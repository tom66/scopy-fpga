
../Release/ps_app.elf:     file format elf32-littlearm

SYMBOL TABLE:
01000000 l    d  .text	00000000 .text
010114d8 l    d  .init	00000000 .init
010114e4 l    d  .fini	00000000 .fini
010114f0 l    d  .rodata	00000000 .rodata
01013038 l    d  .data	00000000 .data
01013dd0 l    d  .eh_frame	00000000 .eh_frame
01014000 l    d  .mmu_tbl	00000000 .mmu_tbl
01018000 l    d  .ARM.exidx	00000000 .ARM.exidx
01018008 l    d  .init_array	00000000 .init_array
0101800c l    d  .fini_array	00000000 .fini_array
01018010 l    d  .ARM.attributes	00000000 .ARM.attributes
01018010 l    d  .bss	00000000 .bss
01029c8c l    d  .heap	00000000 .heap
00000000 l    d  .stack	00000000 .stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 asm_vectors.o
010000a0 l       .text	00000000 Undefined
010000bc l       .text	00000000 SVCHandler
01000100 l       .text	00000000 PrefetchAbortHandler
010000e0 l       .text	00000000 DataAbortHandler
01000020 l       .text	00000000 IRQHandler
01000060 l       .text	00000000 FIQHandler
0100007c l       .text	00000000 FIQLoop
00000000 l    df *ABS*	00000000 boot.o
f8f02000 l       *ABS*	00000000 PSS_L2CC_BASE_ADDR
f8000000 l       *ABS*	00000000 PSS_SLCR_BASE_ADDR
0fffff00 l       *ABS*	00000000 RESERVED
fe00000f l       *ABS*	00000000 LRemap
f8f0277c l       *ABS*	00000000 L2CCWay
f8f02730 l       *ABS*	00000000 L2CCSync
f8f02100 l       *ABS*	00000000 L2CCCrtl
f8f02104 l       *ABS*	00000000 L2CCAuxCrtl
f8f02108 l       *ABS*	00000000 L2CCTAGLatReg
f8f0210c l       *ABS*	00000000 L2CCDataLatReg
f8f02220 l       *ABS*	00000000 L2CCIntClear
f8f0221c l       *ABS*	00000000 L2CCIntRaw
f8000004 l       *ABS*	00000000 SLCRlockReg
f8000008 l       *ABS*	00000000 SLCRUnlockReg
f8000a1c l       *ABS*	00000000 SLCRL2cRamReg
f8000244 l       *ABS*	00000000 SLCRCPURSTReg
f800d010 l       *ABS*	00000000 EFUSEStaus
00001005 l       *ABS*	00000000 CRValMmuCac
00002000 l       *ABS*	00000000 CRValHiVectorAddr
72360000 l       *ABS*	00000000 L2CCAuxControl
00000001 l       *ABS*	00000000 L2CCControl
00000111 l       *ABS*	00000000 L2CCTAGLatency
00000121 l       *ABS*	00000000 L2CCDataLatency
0000767b l       *ABS*	00000000 SLCRlockKey
0000df0d l       *ABS*	00000000 SLCRUnlockKey
00020202 l       *ABS*	00000000 SLCRL2cRamConfig
40000000 l       *ABS*	00000000 FPEXC_EN
01000144 l       .text	00000000 CheckEFUSE
0100013c l       .text	00000000 EndlessLoop0
0100017c l       .text	00000000 OKToRun
010003c8 l       .text	00000000 invalidate_dcache
01000324 l       .text	00000000 Sync
01000444 l       .text	00000000 finished
010003dc l       .text	00000000 loop1
01000438 l       .text	00000000 skip
01000418 l       .text	00000000 loop2
0100041c l       .text	00000000 loop3
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
01013dd0 l     O .eh_frame	00000000 
010004dc l     F .text	00000000 deregister_tm_clones
01000500 l     F .text	00000000 register_tm_clones
0100052c l     F .text	00000000 __do_global_dtors_aux
01018010 l       .bss	00000001 completed.10177
0101800c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0100055c l     F .text	00000000 frame_dummy
01018014 l       .bss	00000018 object.10182
01018008 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 acquire.c
00000000 l    df *ABS*	00000000 fabric_config.c
010024a0 l     F .text	0000001c fabcfg_fastcfg_wait.part.0
00000000 l    df *ABS*	00000000 hal.c
01002b3c l     F .text	0000012c d_printf.constprop.1
01002c68 l     F .text	00000128 d_printf.constprop.2
01002d90 l     F .text	00000128 d_printf.constprop.3
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 xaxidma.c
00000000 l    df *ABS*	00000000 xaxidma_sinit.c
00000000 l    df *ABS*	00000000 xaxidma_bdring.c
00000000 l    df *ABS*	00000000 xaxidma_g.c
00000000 l    df *ABS*	00000000 xgpiops.c
00000000 l    df *ABS*	00000000 xgpiops_sinit.c
00000000 l    df *ABS*	00000000 xgpiops_intr.c
00000000 l    df *ABS*	00000000 xgpiops_g.c
00000000 l    df *ABS*	00000000 xscugic_intr.c
00000000 l    df *ABS*	00000000 xscugic.c
01006d38 l     F .text	00000050 StubHandler
01018030 l     O .bss	00000004 CpuId
00000000 l    df *ABS*	00000000 xscugic_sinit.c
00000000 l    df *ABS*	00000000 xscutimer.c
00000000 l    df *ABS*	00000000 xscutimer_selftest.c
00000000 l    df *ABS*	00000000 xscutimer_sinit.c
00000000 l    df *ABS*	00000000 xscutimer_g.c
00000000 l    df *ABS*	00000000 xil_assert.c
01018034 l     O .bss	00000004 Xil_AssertCallbackRoutine
00000000 l    df *ABS*	00000000 print.c
00000000 l    df *ABS*	00000000 xil_cache.c
010083e4 l     F .text	00000058 Xil_L2CacheEnable.part.0
00000000 l    df *ABS*	00000000 outbyte.c
00000000 l    df *ABS*	00000000 xplatform_info.c
00000000 l    df *ABS*	00000000 xil_printf.c
01008614 l     F .text	0000009c getnum
010086b0 l     F .text	00000034 padding.part.0
010086e4 l     F .text	00000164 outnum
00000000 l    df *ABS*	00000000 xil_exception.c
01008cd4 l     F .text	00000004 Xil_ExceptionNullHandler
00000000 l    df *ABS*	00000000 xuartps_hw.c
00000000 l    df *ABS*	00000000 xscugic_g.c
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 xil-crt0.S
00000000 l    df *ABS*	00000000 translation_table.o
00000000 l       *ABS*	00000000 SECT
00100000 l       *ABS*	00000000 DDR_START
0fffffff l       *ABS*	00000000 DDR_END
0ff00000 l       *ABS*	00000000 DDR_SIZE
000000ff l       *ABS*	00000000 DDR_REG
00000300 l       *ABS*	00000000 UNDEF_REG
00000000 l    df *ABS*	00000000 cpu_init.o
00000000 l    df *ABS*	00000000 xtime_l.c
00000000 l    df *ABS*	00000000 _udivsi3.o
01008f48 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _divsi3.o
010091c6 l       .text	00000000 .divsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
01013408 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
01009c70 l     F .text	0000006c currentlocale
0101150c l     O .rodata	0000001c categories
01018038 l     O .bss	000000e7 global_locale_string
01018120 l     O .bss	000000e0 new_categories.6704
01018200 l     O .bss	000000e0 saved_categories.6705
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
01011694 l     O .rodata	00000048 JIS_state_table
010116dc l     O .rodata	00000048 JIS_action_table
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncasecmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0100c15c l     F .text	00000120 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
01011724 l     O .rodata	00000010 blanks.8644
01011734 l     O .rodata	00000010 zeroes.8645
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 dtoa.c
0100e2d0 l     F .text	00000148 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
01011848 l     O .rodata	0000000c p05.7430
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01011970 l     O .rodata	00000010 blanks.8623
01011980 l     O .rodata	00000010 zeroes.8624
00000000 l    df *ABS*	00000000 wcsnrtombs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 environ.c
01018318 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 envlock.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _sbrk.c
0101831c l     O .bss	00000004 heap.5714
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crtstuff.c
01013dd0 l     O .eh_frame	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crtn.o
0100fd70 g     F .text	00000028 _mprec_log10
00010400 g       .stack	00000000 _supervisor_stack_end
0100fde0 g     F .text	0000005a __any_on
01004fc0 g     F .text	00000180 XAxiDma_BdRingCheck
01011920 g     O .rodata	00000028 __mprec_tinytens
0100822c g     F .text	00000048 Xil_L1ICacheInvalidateRange
0100bddc g     F .text	000000c2 strcpy
0100fe3c g     F .text	0000001a cleanup_glue
01004adc g     F .text	000000b0 XAxiDma_BdRingUnAlloc
01000000 g       .text	00000000 _vector_table
01008274 g     F .text	00000074 Xil_L2CacheDisable
01013dd4 g       .eh_frame	00000000 __eh_framehdr_start
01013dd0 g       .data	00000000 ___CTORS_LIST___
01007ec0 g     F .text	00000058 Xil_ICacheInvalidateRange
010080d8 g     F .text	00000018 Xil_L1DCacheDisable
00000400 g       *ABS*	00000000 _ABORT_STACK_SIZE
01007c68 g     F .text	00000028 print
01009790 g     F .text	0000005a .hidden __floatdidf
0100ded0 g     F .text	00000054 _wcrtomb_r
01001f98 g     F .text	00000068 acq_get_ll_pointer
01004f2c g     F .text	00000094 XAxiDma_BdRingFree
01008cdc g     F .text	00000004 Xil_PrefetchAbortHandler
010058d4 g     F .text	000000e4 XGpioPs_ReadPin
0100a3b0 g     F .text	00000244 _setlocale_r
010084a8 g     F .text	00000014 Xil_L2CacheInvalidateLine
0100b844 g     F .text	00000002 __malloc_unlock
010056e0 g     F .text	000000b8 XGpioPs_GetOutputEnable
01007a10 g     F .text	00000088 XScuTimer_SetPrescaler
01007bf8 g     F .text	0000005c Xil_Assert
010077cc g     F .text	00000050 XScuGic_SetCpuID
01007658 g     F .text	00000174 XScuGic_CfgInitialize
0100e2c0 g     F .text	0000000e __set_ctype
01003c08 g     F .text	00000004 enable_caches
01010fb8 g     F .text	000000ce memmove
00010c00 g       .stack	00000000 __supervisor_stack
0100b8f4 g     F .text	00000090 snprintf
0100a61c g     F .text	00000020 __locale_ctype_ptr
01000be0 g     F .text	000003e0 acq_prepare_triggered
0100f540 g     F .text	0000004c _Balloc
01004294 g     F .text	00000028 XAxiDma_SelectKeyHole
01018008 g       .ARM.exidx	00000000 __exidx_end
01005ab8 g     F .text	00000124 XGpioPs_SetDirectionPin
01008d44 g     F .text	00000018 XUartPs_SendByte
01007144 g     F .text	0000012c XScuGic_GetPriorityTriggerType
00011400 g       .stack	00000000 _undef_stack_end
01008ce4 g     F .text	00000004 Xil_ExceptionInit
0100f458 g     F .text	00000004 __localeconv_l
01002ed0 g     F .text	000001b8 bogo_calibrate
0100e09c g     F .text	00000054 __sjis_wctomb
01018010 g       .ARM.attributes	00000000 __sbss_start
01029c88 g     O .bss	00000004 errno
01008e30 g     F .text	00000014 PrefetchAbortInterrupt
01008d5c g     F .text	0000001c XUartPs_RecvByte
010097f8 g     F .text	00000160 .hidden __aeabi_fadd
010097f4 g     F .text	00000164 .hidden __subsf3
01013dd0 g       .data	00000000 __fixup_start
0100860c g     F .text	00000008 XGetPlatform_Info
010080f0 g     F .text	0000005c Xil_DCacheFlush
0100012c g       .text	00000000 _boot
01008394 g     F .text	00000020 Xil_DCacheInvalidate
0100700c g     F .text	00000138 XScuGic_SetPriorityTriggerType
010063a0 g     F .text	000000b8 XGpioPs_IntrGetStatus
0100e0f0 g     F .text	00000070 __eucjp_wctomb
010130b8 g     O .data	00000008 XScuTimer_ConfigTable
01013dd0 g       .data	00000000 __fixup_end
0100448c g     F .text	00000174 XAxiDma_UpdateBdRingCDesc
0100b1c0 g     F .text	000005e0 memcpy
01005374 g     F .text	000000b4 XGpioPs_Read
01013dd0 g     O .data	00000000 .hidden __TMC_END__
0100c2f8 g     F .text	00001b4c _svfprintf_r
01009718 g     F .text	00000022 .hidden __floatsidf
010114f0 g     O .rodata	00000018 fbcfg_dummy_tests
01008ce0 g     F .text	00000004 Xil_UndefinedExceptionHandler
01014000 g       .mmu_tbl	00000000 __mmu_tbl_start
01018010 g       .ARM.attributes	00000000 __sdata_start
01013dd0 g       .data	00000000 __DTOR_END__
01001ef8 g     F .text	000000a0 acq_debug_dump_waveraw
01009a08 g     F .text	00000000 .hidden __aeabi_uldivmod
010083b4 g     F .text	00000030 Xil_ICacheInvalidate
01003c14 g     F .text	00000004 init_platform
00011000 g       .stack	00000000 __abort_stack
01018010 g       .fini_array	00000000 __fini_array_end
01013034 g       .rodata	00000000 __rodata_end
0100fd10 g     F .text	00000060 __ratio
010084bc g     F .text	00000068 Xil_L2CacheInvalidateRange
0100a758 g     F .text	00000010 malloc
01008f48 g     F .text	0000025c .hidden __udivsi3
01013dd0 g       .data	00000000 __data1_start
01009960 g     F .text	0000001c .hidden __aeabi_i2f
01011858 g     O .rodata	000000c8 __mprec_tens
01013034 g       .data	00000000 __sbss2_end
0100deb0 g     F .text	0000001e vsnprintf
01029c7c g     O .bss	00000004 UndefinedExceptionAddr
01003b10 g     F .text	000000f8 d_dump_timing_ex
010182e4 g     O .bss	00000004 __malloc_top_pad
01003120 g     F .text	000001c0 d_printf
0101802c g     O .bss	00000004 test_sizeptr
01013038 g     O .data	00000000 .hidden __dso_handle
010096f8 g     F .text	0000001e .hidden __aeabi_ui2d
00010400 g       .stack	00000000 __irq_stack
0100f45c g     F .text	0000001e _localeconv_r
0100f764 g     F .text	00000012 __i2b
01007db0 g     F .text	0000004c Xil_DCacheFlushLine
01003c10 g     F .text	00000004 init_uart
01009ab8 g     F .text	00000116 .hidden __udivmoddi4
01009474 g     F .text	00000000 .hidden __aeabi_drsub
0100b848 g     F .text	00000026 _sbrk_r
01006c98 g     F .text	00000028 StubHandler
01008ebc g       .text	00000000 __cpu_init
010130fc g     O .data	00000304 XScuGic_ConfigTable
01003828 g     F .text	00000028 d_read_global_timer
01004a38 g     F .text	0000001c XAxiDma_BdRingGetCoalesce
0100843c g     F .text	00000018 Xil_L2CacheEnable
01018310 g     O .bss	00000004 __malloc_max_sbrked_mem
010042bc g     F .text	00000028 XAxiDma_SelectCyclicMode
0100781c g     F .text	00000010 XScuGic_GetCpuID
0100973c g     F .text	00000042 .hidden __extendsfdf2
01009480 g     F .text	00000276 .hidden __adddf3
01003850 g     F .text	00000074 d_start_timing
00000800 g       *ABS*	00000000 _SUPERVISOR_STACK_SIZE
010029b0 g     F .text	0000001c fabcfg_read
0d029c90 g       .heap	00000000 _heap_end
0100fbac g     F .text	000000ae __b2d
01018000 g       .ARM.exidx	00000000 __exidx_start
01008de0 g     F .text	00000014 IRQInterrupt
01003fb0 g     F .text	000000ac XAxiDma_Pause
01011508 g     O .rodata	00000004 _global_impure_ptr
01011088 g     F .text	00000372 _realloc_r
0100bfdc g     F .text	0000005a strncasecmp
01009c20 g     F .text	00000050 __libc_init_array
01029c8c g       .bss	00000000 __bss_end
0100c2a4 g     F .text	0000001e strtol_l
01010f14 g     F .text	00000036 wcsnrtombs
01002a7c g     F .text	00000068 fabcfg_fastcfg_start
01013034 g       .data	00000000 __rodata1_start
01005428 g     F .text	000000a8 XGpioPs_Write
01011948 g     O .rodata	00000028 __mprec_bigtens
01019287 g       .ARM.attributes	00000000 __ARM.attributes_end
0100f630 g     F .text	00000098 __s2b
01008e08 g     F .text	00000014 SWInterrupt
010096f8 g     F .text	0000001e .hidden __floatunsidf
010113fc  w    F .text	00000040 _sbrk
0100fa18 g     F .text	0000003a __mcmp
01018010 g       .ARM.attributes	00000000 __tbss_start
010009c0 g     F .text	000000ac acq_get_next_alloc
0101306c g     O .data	00000044 XAxiDma_ConfigTable
0100782c g     F .text	0000001c XScuGic_LookupConfig
010114d8 g     F .init	00000000 _init
010030ec g     F .text	00000034 gpio_led_write
01001934 g     F .text	00000070 acq_force_stop
01008524 g     F .text	00000044 Xil_L2CacheFlush
0100c2c4 g     F .text	00000030 strtol
01007dfc g     F .text	00000054 Xil_DCacheFlushRange
010019a4 g     F .text	00000554 acq_debug_dump
01009a78 g     F .text	00000040 .hidden __aeabi_d2ulz
010097f4 g     F .text	00000164 .hidden __aeabi_fsub
01009bf0 g     F .text	00000030 __libc_fini_array
0100e160 g     F .text	00000082 __jis_wctomb
010066cc g     F .text	000000c8 XGpioPs_SetIntrType
0100757c g     F .text	000000dc XScuGic_Stop
010073b8 g     F .text	00000074 XScuGic_InterruptUnmapFromCpu
0100fe58 g     F .text	00000088 _reclaim_reent
00011400 g       .stack	00000000 __fiq_stack
0100f6c8 g     F .text	0000003e __hi0bits
01008ce8 g     F .text	00000018 Xil_ExceptionRegisterHandler
010130c0 g     O .data	00000004 Xil_AssertWait
01029c90 g       .heap	00000000 _heap_start
01005cc4 g     F .text	00000124 XGpioPs_SetOutputEnablePin
00000400 g       *ABS*	00000000 _IRQ_STACK_SIZE
0100998c g     F .text	0000007c .hidden __floatdisf
01018010 g       .ARM.attributes	00000000 __sbss_end
01007fec g     F .text	00000018 Xil_L1DCacheInvalidateLine
01006120 g     F .text	000000dc XGpioPs_IntrDisablePin
0100814c g     F .text	00000018 Xil_L1DCacheFlushLine
00000400 g       *ABS*	00000000 _FIQ_STACK_SIZE
0100012c g       .text	00000000 _prestart
01006540 g     F .text	000000ac XGpioPs_IntrClear
01000a6c g     F .text	00000128 acq_append_next_alloc
01013dcc g     O .data	00000004 environ
01019c78 g     O .bss	00010000 csi_buffer
01004600 g     F .text	0000019c XAxiDma_BdRingCreate
01009480 g     F .text	00000276 .hidden __aeabi_dadd
01007c64 g     F .text	00000004 XNullHandler
0100b9c8 g     F .text	00000040 strcat
01008848 g     F .text	0000048c xil_printf
01009a38 g     F .text	00000040 .hidden __aeabi_f2ulz
0100f8b8 g     F .text	000000a2 __pow5mult
01009780 g     F .text	0000006a .hidden __aeabi_ul2d
00011800 g       .stack	00000000 __undef_stack
01000588 g     F .text	0000003c _acq_irq_error_dma
010091c0 g     F .text	00000000 .hidden __aeabi_idiv
01003808 g     F .text	00000020 d_iskeypress
01007988 g     F .text	00000088 XScuTimer_Stop
01011528 g     O .rodata	0000016c __C_locale
01006a08 g     F .text	0000010c XGpioPs_GetIntrTypePin
01007b20 g     F .text	000000bc XScuTimer_SelfTest
010038c4 g     F .text	00000084 d_stop_timing
01029c80 g     O .bss	00000004 PrefetchAbortAddr
01004278 g     F .text	0000001c XAxiDma_Busy
01006e5c g     F .text	000000cc XScuGic_Disconnect
01013dd0 g       .data	00000000 __CTOR_LIST__
01014000 g       .mmu_tbl	00000000 MMUTable
0100b870 g     F .text	00000084 _snprintf_r
01013034 g       .data	00000000 __sbss2_start
0100a35c g     F .text	00000054 __get_locale_env
01008214 g     F .text	00000018 Xil_L1ICacheInvalidateLine
0100f4a0 g     F .text	00000000 memchr
0100f1d0 g     F .text	000001f0 _free_r
0100a5f4 g     F .text	00000020 __locale_mb_cur_max
0100df7c g     F .text	00000016 _wcsrtombs_r
010081c4 g     F .text	0000001c Xil_L1ICacheEnable
010006ac g     F .text	00000018 _acq_wait_for_ndone
0100e1e4 g     F .text	000000dc __call_exitprocs
01018320 g     O .bss	00000fa0 test_sizes
0100947c g     F .text	0000027a .hidden __aeabi_dsub
0101399c g     O .data	00000020 __default_locale
01013dc4 g     O .data	00000004 __malloc_sbrk_base
01008e58 g       .text	00000064 _start
01007cc8 g     F .text	000000e8 Xil_DCacheInvalidateRange
01009780 g     F .text	0000006a .hidden __floatundidf
010081e0 g     F .text	0000001c Xil_L1ICacheDisable
010114f0 g       .rodata	00000000 __rodata_start
01013054 g     O .data	00000018 acq_substate_to_str
0100f95c g     F .text	000000ba __lshift
01005de8 g     F .text	000000e8 XGpioPs_GetOutputEnablePin
01009960 g     F .text	0000001c .hidden __floatsisf
0100ff60 g     F .text	000000f8 __ssprint_r
01018010 g       *ABS*	00000000 _SDA_BASE_
0100af30 g     F .text	00000082 __sjis_mbtowc
0100bea0 g     F .text	00000056 strlcpy
0100c038 g     F .text	000000a2 strncmp
01007e88 g     F .text	00000038 Xil_ICacheInvalidateLine
0100df94 g     F .text	00000022 wcsrtombs
01013dd0 g       .data	00000000 __data_end
01006794 g     F .text	000000d4 XGpioPs_GetIntrType
010054d0 g     F .text	000000ac XGpioPs_SetDirection
0100f778 g     F .text	0000013e __multiply
01003a18 g     F .text	000000f8 d_dump_timing
01005798 g     F .text	0000013c XGpioPs_GetBankPin
01029c90 g       .heap	00000000 HeapBase
0100c0dc g     F .text	0000007e strncpy
010182e8 g     O .bss	00000028 __malloc_current_mallinfo
0100fc5c g     F .text	000000b2 __d2b
0100b984 g     F .text	00000044 strcasecmp
0100742c g     F .text	000000d4 XScuGic_Disable
010039a0 g     F .text	00000078 d_read_timing_us
01008df4 g     F .text	00000014 UndefinedException
01029c84 g     O .bss	00000004 DataAbortAddr
01009718 g     F .text	00000022 .hidden __aeabi_i2d
01008304 g     F .text	00000024 Xil_ICacheDisable
010082e8 g     F .text	0000001c Xil_DCacheDisable
00010000 g       .stack	00000000 _irq_stack_end
0100997c g     F .text	0000008c .hidden __floatundisf
01009470  w    F .text	00000002 .hidden __aeabi_ldiv0
010192c0 g     O .bss	00000858 g_acq_state
0100fd98 g     F .text	00000046 __copybits
010139bc g     O .data	00000408 __malloc_av_
01009958 g     F .text	00000024 .hidden __aeabi_ui2f
0100de44 g     F .text	0000006a _vsnprintf_r
01013dd4 g       .eh_frame	00000000 __eh_framehdr_end
010085fc g     F .text	00000010 outbyte
0100b840 g     F .text	00000002 __malloc_lock
0101800c g       .fini_array	00000000 __fini_array_start
0100ad28 g     F .text	00000208 __utf8_mbtowc
01010f4c g     F .text	00000062 _calloc_r
01007fcc g     F .text	00000020 Xil_L1DCacheEnable
01004b8c g     F .text	0000024c XAxiDma_BdRingToHw
0100479c g     F .text	00000104 XAxiDma_BdRingClone
01005140 g     F .text	000000b8 XAxiDma_BdRingDumpRegs
010022d8 g     F .text	000001c8 acq_copy_slow_mipi
01018010 g       .bss	00000000 __bss_start
00010000 g       *ABS*	00000000 _STACK_SIZE
01018010 g       .ARM.attributes	00000000 __tdata_start
01018010 g       .ARM.attributes	00000000 __tdata_end
0100b7a0 g     F .text	000000a0 memset
01011440 g     F .text	00000098 main
010042e4 g     F .text	00000170 XAxiDma_SimpleTransfer
010037e0 g     F .text	00000028 d_waitkey
01018314 g     O .bss	00000004 __malloc_max_total_mem
0c000000 g       *ABS*	00000000 _HEAP_SIZE
0100998c g     F .text	0000007c .hidden __aeabi_l2f
0100afb4 g     F .text	000000b6 __eucjp_mbtowc
01008f48 g     F .text	00000000 .hidden __aeabi_uidiv
01007848 g     F .text	000000b0 XScuTimer_CfgInitialize
010078f8 g     F .text	00000090 XScuTimer_Start
01001918 g     F .text	0000001c acq_is_done
0100c27c g     F .text	00000028 _strtol_r
0100f3c0 g     F .text	00000088 _findenv_r
0101800c g       .init_array	00000000 __init_array_end
01003c0c g     F .text	00000004 disable_caches
0100e418 g     F .text	00000d0c _dtoa_r
0100a778 g     F .text	00000564 _malloc_r
01007f18 g     F .text	000000b4 Xil_L1DCacheInvalidate
0100dfe0 g     F .text	00000018 __ascii_wctomb
01009790 g     F .text	0000005a .hidden __aeabi_l2d
0100dff8 g     F .text	000000a4 __utf8_wctomb
01005f98 g     F .text	000000dc XGpioPs_IntrEnablePin
010059b8 g     F .text	00000100 XGpioPs_WritePin
01006074 g     F .text	000000ac XGpioPs_IntrDisable
01010fb4 g     F .text	00000002 __env_unlock
00000000 g       .stack	00000000 _stack_end
01029c78 g     O .bss	00000004 Xil_AssertStatus
0100acdc g     F .text	00000026 _mbtowc_r
0100997c g     F .text	0000008c .hidden __aeabi_ul2f
01009a38 g     F .text	00000040 .hidden __fixunssfdi
010049cc g     F .text	00000020 XAxiDma_BdRingStart
01013dd0 g       .data	00000000 ___DTORS_END___
010091c0 g     F .text	00000294 .hidden __divsi3
01008164 g     F .text	00000048 Xil_L1DCacheFlushRange
01008ef8 g     F .text	00000024 XTime_SetTime
01018010 g       .ARM.attributes	00000000 __sdata_end
0100f124 g     F .text	000000aa _malloc_trim_r
01010df0 g     F .text	000000f4 _wcsnrtombs_l
01013034 g       .data	00000000 __sdata2_start
01013dd0 g       .data	00000000 __CTOR_END__
01013dd0 g       .data	00000000 ___DTORS_LIST___
010024bc g     F .text	000004f4 fabcfg_init
0100bb08 g     F .text	000002dc strcmp
010081ac g     F .text	00000018 Xil_L1DCacheStoreLine
01003948 g     F .text	00000058 d_read_timing
01007bdc g     F .text	0000001c XScuTimer_LookupConfig
010049ec g     F .text	0000004c XAxiDma_BdRingSetCoalesce
01013dd0 g       .data	00000000 __DTOR_LIST__
01003d7c g     F .text	00000234 XAxiDma_CfgInitialize
01009a78 g     F .text	00000040 .hidden __fixunsdfdi
010114e4 g     F .fini	00000000 _fini
01008478 g     F .text	00000030 Xil_ICacheEnable
0100a650 g     F .text	00000012 memalign
0100405c g     F .text	0000021c XAxiDma_Resume
010085e8 g     F .text	00000014 Xil_L2CacheStoreLine
010182e0 g     O .bss	00000004 _PathLocale
00010c00 g       .stack	00000000 _abort_stack_end
01010ee4 g     F .text	00000030 _wcsnrtombs_r
01001170 g     F .text	000007a8 _acq_irq_rx_handler
01002b18 g     F .text	00000024 irq_xscutimer
0100a63c g     F .text	00000012 setlocale
01003c1c g     F .text	00000114 XAxiDma_Reset
010097ec g     F .text	0000016c .hidden __aeabi_frsub
01013400 g     O .data	00000004 _impure_ptr
01018008 g       .init_array	00000000 __preinit_array_end
01010058 g     F .text	00000d96 _svfiprintf_r
01009cdc g     F .text	00000680 __loadlocale
0101303c g     O .data	00000018 acq_state_to_str
01013034 g       .data	00000000 __sdata2_end
010029e8 g     F .text	00000094 fabcfg_commit
0100ad04 g     F .text	00000024 __ascii_mbtowc
0100fb5c g     F .text	00000050 __ulp
01005634 g     F .text	000000ac XGpioPs_SetOutputEnable
01002000 g     F .text	000002d8 acq_debug_dump_wave
010072e4 g     F .text	000000d4 XScuGic_Enable
010130c4 g     O .data	00000038 XExc_VectorTable
01005ed0 g     F .text	0000001c XGpioPs_LookupConfig
0100f47c g     F .text	0000001e localeconv
01013dd0 g       .data	00000000 ___CTORS_END___
00010000 g       .stack	00000000 __stack
010091a4 g     F .text	0000001a .hidden __aeabi_uidivmod
01008d20 g     F .text	00000024 Xil_ExceptionRemoveHandler
0d029c90 g       .heap	00000000 HeapLimit
01000648 g     F .text	00000064 _acq_reset_trigger
00011800 g       .stack	00000000 _end
01008d78 g     F .text	00000054 XUartPs_ResetHw
010130b0 g     O .data	00000008 XGpioPs_ConfigTable
01013034 g       .data	00000000 __rodata1_end
01003c18 g     F .text	00000004 cleanup_platform
01006b14 g     F .text	000000a0 XGpioPs_SetCallbackHandler
01013dd0 g       .data	00000000 __data1_end
010029cc g     F .text	0000001c fabcfg_write
01008e1c g     F .text	00000014 DataAbortInterrupt
01004a54 g     F .text	00000088 XAxiDma_BdRingAlloc
01002ae4 g     F .text	00000034 fabcfg_fastcfg_wait
01006bb4 g     F .text	000000e4 XGpioPs_IntrHandler
01005bdc g     F .text	000000e8 XGpioPs_GetDirectionPin
01013dc8 g     O .data	00000004 __malloc_trim_threshold
01029c90 g       .heap	00000000 _heap
01009bd0 g     F .text	00000020 exit
01019b18 g     O .bss	00000160 g_hal
0100b06c g     F .text	00000126 __jis_mbtowc
01009958 g     F .text	00000024 .hidden __floatunsisf
0100fa54 g     F .text	00000106 __mdiff
010065ec g     F .text	000000e0 XGpioPs_IntrClearPin
0100a664 g     F .text	000000f4 _memalign_r
01007500 g     F .text	0000007c XScuGic_UnmapAllInterruptsFromCpu
01018010 g       .ARM.attributes	00000000 __tbss_end
010005c4 g     F .text	00000084 _acq_reset_PL_fifo
01003088 g     F .text	00000064 bogo_delay
01011744 g     O .rodata	00000101 _ctype_
01009470  w    F .text	00000002 .hidden __aeabi_idiv0
01018008 g       .init_array	00000000 __init_array_start
010051f8 g     F .text	0000017c XGpioPs_CfgInitialize
01007a98 g     F .text	00000088 XScuTimer_GetPrescaler
01006868 g     F .text	000001a0 XGpioPs_SetIntrTypePin
01004dd8 g     F .text	00000154 XAxiDma_BdRingFromHw
0101143c  w    F .text	00000004 _exit
01007c90 g     F .text	00000038 Xil_DCacheInvalidateLine
01004454 g     F .text	0000001c XAxiDma_LookupConfig
01008dcc g     F .text	00000014 FIQInterrupt
01006f28 g     F .text	000000e4 XScuGic_SoftwareIntr
0100bf00 g     F .text	000000dc strlen
0100a614 g     F .text	00000006 __locale_ctype_ptr_l
00010000 g       .stack	00000000 _stack
01003d30 g     F .text	0000004c XAxiDma_ResetIsDone
0100557c g     F .text	000000b8 XGpioPs_GetDirection
0100ba08 g     F .text	000000e4 strchr
01007c54 g     F .text	00000010 Xil_AssertSetCallback
0100973c g     F .text	00000042 .hidden __aeabi_f2d
01006cc0 g     F .text	00000078 XScuGic_InterruptHandler
01013038 g       .data	00000000 __data_start
01008580 g     F .text	00000068 Xil_L2CacheFlushRange
01006d88 g     F .text	000000d4 XScuGic_Connect
01007e50 g     F .text	00000038 Xil_DCacheStoreLine
010048a0 g     F .text	0000012c XAxiDma_StartBdRingHw
01008328 g     F .text	0000006c Xil_L2CacheInvalidate
0100dfb8 g     F .text	00000026 _wctomb_r
01010fb0 g     F .text	00000002 __env_lock
00011000 g       .stack	00000000 _fiq_stack_end
0100947c g     F .text	0000027a .hidden __subdf3
0100804c g     F .text	0000008c Xil_L1DCacheFlush
01018008 g       .init_array	00000000 __preinit_array_start
00000400 g       *ABS*	00000000 _UNDEF_STACK_SIZE
01006458 g     F .text	000000e8 XGpioPs_IntrGetStatusPin
010081fc g     F .text	00000018 Xil_L1ICacheInvalidate
0100f708 g     F .text	0000005c __lo0bits
01009454 g     F .text	0000001a .hidden __aeabi_idivmod
010006c4 g     F .text	000002fc acq_init
01007270 g     F .text	00000074 XScuGic_InterruptMaptoCpu
01008568 g     F .text	00000018 Xil_L2CacheFlushLine
01004470 g     F .text	0000001c XAxiDma_LookupConfigBaseAddr
01008cd8 g     F .text	00000004 Xil_DataAbortHandler
01013034 g       *ABS*	00000000 _SDA2_BASE_
01008f1c g     F .text	00000028 XTime_GetTime
0100df24 g     F .text	00000056 wcrtomb
01000b94 g     F .text	0000004c acq_free_all_alloc
01000fc0 g     F .text	000001b0 acq_start
01008d00 g     F .text	00000020 Xil_GetExceptionRegisterHandler
01002eb8 g     F .text	00000018 d_xilinx_assert
0100fee0 g     F .text	00000080 frexp
01005eec g     F .text	000000ac XGpioPs_IntrEnable
010097f8 g     F .text	00000160 .hidden __addsf3
010062b8 g     F .text	000000e8 XGpioPs_IntrGetEnabledPin
01018000 g       .mmu_tbl	00000000 __mmu_tbl_end
01013830 g     O .data	0000016c __global_locale
010061fc g     F .text	000000bc XGpioPs_IntrGetEnabled
01008454 g     F .text	00000024 Xil_DCacheEnable
010032e0 g     F .text	00000500 hal_init
01018010 g       .ARM.attributes	00000000 __ARM.attributes_start
01008004 g     F .text	00000048 Xil_L1DCacheInvalidateRange
0100a768 g     F .text	00000010 free
0100f5a0 g     F .text	00000090 __multadd
0100f58c g     F .text	00000012 _Bfree
0100f448 g     F .text	00000010 _getenv_r



Disassembly of section .text:

01000000 <_vector_table>:

.globl _vector_table

.section .vectors
_vector_table:
	B	_boot
 1000000:	ea000049 	b	100012c <_boot>
	B	Undefined
 1000004:	ea000025 	b	10000a0 <Undefined>
	B	SVCHandler
 1000008:	ea00002b 	b	10000bc <SVCHandler>
	B	PrefetchAbortHandler
 100000c:	ea00003b 	b	1000100 <PrefetchAbortHandler>
	B	DataAbortHandler
 1000010:	ea000032 	b	10000e0 <DataAbortHandler>
	NOP	/* Placeholder for address exception vector*/
 1000014:	e320f000 	nop	{0}
	B	IRQHandler
 1000018:	ea000000 	b	1000020 <IRQHandler>
	B	FIQHandler
 100001c:	ea00000f 	b	1000060 <FIQHandler>

01000020 <IRQHandler>:


IRQHandler:					/* IRQ vector handler */

	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code*/
 1000020:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000024:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000028:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100002c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000030:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000034:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000038:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	ldr	r2, =prof_pc
	subs	r3, lr, #0
	str	r3, [r2]
#endif

	bl	IRQInterrupt			/* IRQ vector */
 100003c:	eb002367 	bl	1008de0 <IRQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000040:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000044:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000048:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100004c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000050:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000054:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000058:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}


	subs	pc, lr, #4			/* adjust return */
 100005c:	e25ef004 	subs	pc, lr, #4

01000060 <FIQHandler>:


FIQHandler:					/* FIQ vector handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000060:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000064:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000068:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100006c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000070:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000074:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000078:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)

0100007c <FIQLoop>:
#endif

FIQLoop:
	bl	FIQInterrupt			/* FIQ vector */
 100007c:	eb002352 	bl	1008dcc <FIQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000080:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000084:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000088:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100008c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000090:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000094:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000098:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	subs	pc, lr, #4			/* adjust return */
 100009c:	e25ef004 	subs	pc, lr, #4

010000a0 <Undefined>:


Undefined:					/* Undefined handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000a0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =UndefinedExceptionAddr
 10000a4:	e59f0074 	ldr	r0, [pc, #116]	; 1000120 <PrefetchAbortHandler+0x20>
	sub     r1, lr, #4
 10000a8:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Store address of instruction causing undefined exception */
 10000ac:	e5801000 	str	r1, [r0]

	bl	UndefinedException		/* UndefinedException: call C function here */
 10000b0:	eb00234f 	bl	1008df4 <UndefinedException>
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000b4:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	movs	pc, lr
 10000b8:	e1b0f00e 	movs	pc, lr

010000bc <SVCHandler>:

SVCHandler:					/* SWI handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000bc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	tst	r0, #0x20			/* check the T bit */
 10000c0:	e3100020 	tst	r0, #32
	ldrneh	r0, [lr,#-2]			/* Thumb mode */
 10000c4:	115e00b2 	ldrhne	r0, [lr, #-2]
	bicne	r0, r0, #0xff00			/* Thumb mode */
 10000c8:	13c00cff 	bicne	r0, r0, #65280	; 0xff00
	ldreq	r0, [lr,#-4]			/* ARM mode */
 10000cc:	051e0004 	ldreq	r0, [lr, #-4]
	biceq	r0, r0, #0xff000000		/* ARM mode */
 10000d0:	03c004ff 	biceq	r0, r0, #-16777216	; 0xff000000

	bl	SWInterrupt			/* SWInterrupt: call C function here */
 10000d4:	eb00234b 	bl	1008e08 <SWInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000d8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	movs	pc, lr		/*return to the next instruction after the SWI instruction */
 10000dc:	e1b0f00e 	movs	pc, lr

010000e0 <DataAbortHandler>:


DataAbortHandler:				/* Data Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 10000e0:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000e4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =DataAbortAddr
 10000e8:	e59f0034 	ldr	r0, [pc, #52]	; 1000124 <PrefetchAbortHandler+0x24>
	sub     r1, lr, #8
 10000ec:	e24e1008 	sub	r1, lr, #8
	str     r1, [r0]            		/* Stores instruction causing data abort */
 10000f0:	e5801000 	str	r1, [r0]

	bl	DataAbortInterrupt		/*DataAbortInterrupt :call C function here */
 10000f4:	eb002348 	bl	1008e1c <DataAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000f8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #8			/* points to the instruction that caused the Data Abort exception */
 10000fc:	e25ef008 	subs	pc, lr, #8

01000100 <PrefetchAbortHandler>:

PrefetchAbortHandler:				/* Prefetch Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 1000100:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000104:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =PrefetchAbortAddr
 1000108:	e59f0018 	ldr	r0, [pc, #24]	; 1000128 <PrefetchAbortHandler+0x28>
	sub     r1, lr, #4
 100010c:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Stores instruction causing prefetch abort */
 1000110:	e5801000 	str	r1, [r0]

	bl	PrefetchAbortInterrupt		/* PrefetchAbortInterrupt: call C function here */
 1000114:	eb002345 	bl	1008e30 <PrefetchAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000118:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* points to the instruction that caused the Prefetch Abort exception */
 100011c:	e25ef004 	subs	pc, lr, #4
	ldr     r0, =UndefinedExceptionAddr
 1000120:	01029c7c 	.word	0x01029c7c
	ldr     r0, =DataAbortAddr
 1000124:	01029c84 	.word	0x01029c84
	ldr     r0, =PrefetchAbortAddr
 1000128:	01029c80 	.word	0x01029c80

0100012c <_boot>:
_prestart:
_boot:

#if XPAR_CPU_ID==0
        /* only allow cpu0 through */
	mrc	p15,0,r1,c0,c0,5
 100012c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
	and	r1, r1, #0xf
 1000130:	e201100f 	and	r1, r1, #15
        cmp	r1, #0
 1000134:	e3510000 	cmp	r1, #0
	beq	CheckEFUSE
 1000138:	0a000001 	beq	1000144 <CheckEFUSE>

0100013c <EndlessLoop0>:
	EndlessLoop0:
		wfe
 100013c:	e320f002 	wfe
	b	EndlessLoop0
 1000140:	eafffffd 	b	100013c <EndlessLoop0>

01000144 <CheckEFUSE>:

CheckEFUSE:
        ldr r0,=EFUSEStaus
 1000144:	e59f030c 	ldr	r0, [pc, #780]	; 1000458 <finished+0x14>
        ldr r1,[r0]                             /* Read eFuse setting */
 1000148:	e5901000 	ldr	r1, [r0]
        ands r1,r1,#0x80                        /* Check whether device is having single core */
 100014c:	e2111080 	ands	r1, r1, #128	; 0x80
	beq OKToRun
 1000150:	0a000009 	beq	100017c <OKToRun>

 /* single core device, reset cpu1 */
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 1000154:	e59f0300 	ldr	r0, [pc, #768]	; 100045c <finished+0x18>
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000158:	e59f1300 	ldr	r1, [pc, #768]	; 1000460 <finished+0x1c>
        str     r1, [r0]                        /* Unlock SLCR */
 100015c:	e5801000 	str	r1, [r0]

	ldr r0,=SLCRCPURSTReg
 1000160:	e59f02fc 	ldr	r0, [pc, #764]	; 1000464 <finished+0x20>
	ldr r1,[r0]                             /* Read CPU Software Reset Control register */
 1000164:	e5901000 	ldr	r1, [r0]
	orr r1,r1,#0x22
 1000168:	e3811022 	orr	r1, r1, #34	; 0x22
        str r1,[r0]                             /* Reset CPU1 */
 100016c:	e5801000 	str	r1, [r0]

        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000170:	e59f02f0 	ldr	r0, [pc, #752]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 1000174:	e59f12f0 	ldr	r1, [pc, #752]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000178:	e5801000 	str	r1, [r0]

0100017c <OKToRun>:
	        wfe
	b	EndlessLoop1
#endif

OKToRun:
	mrc     p15, 0, r0, c0, c0, 0		/* Get the revision */
 100017c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and     r5, r0, #0x00f00000
 1000180:	e200560f 	and	r5, r0, #15728640	; 0xf00000
	and     r6, r0, #0x0000000f
 1000184:	e200600f 	and	r6, r0, #15
	orr     r6, r6, r5, lsr #20-4
 1000188:	e1866825 	orr	r6, r6, r5, lsr #16

#ifdef CONFIG_ARM_ERRATA_742230
        cmp     r6, #0x22                       /* only present up to r2p2 */
 100018c:	e3560022 	cmp	r6, #34	; 0x22
        mrcle   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 1000190:	de1faf30 	mrcle	15, 0, sl, cr15, cr0, {1}
        orrle   r10, r10, #1 << 4               /* set bit #4 */
 1000194:	d38aa010 	orrle	sl, sl, #16
        mcrle   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 1000198:	de0faf30 	mcrle	15, 0, sl, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	teq     r5, #0x00200000                 /* only present in r2p* */
 100019c:	e3350602 	teq	r5, #2097152	; 0x200000
	mrceq   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 10001a0:	0e1faf30 	mrceq	15, 0, sl, cr15, cr0, {1}
	orreq   r10, r10, #1 << 6               /* set bit #6 */
 10001a4:	038aa040 	orreq	sl, sl, #64	; 0x40
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 10001a8:	0e0faf30 	mcreq	15, 0, sl, cr15, cr0, {1}
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
 10001ac:	e59f02bc 	ldr	r0, [pc, #700]	; 1000470 <finished+0x2c>
	mcr	p15, 0, r0, c12, c0, 0
 10001b0:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
 10001b4:	e59f72b8 	ldr	r7, [pc, #696]	; 1000474 <finished+0x30>
	ldr	r6, =0xffff
 10001b8:	e59f62b8 	ldr	r6, [pc, #696]	; 1000478 <finished+0x34>
	str	r6, [r7]
 10001bc:	e5876000 	str	r6, [r7]

	/* Invalidate caches and TLBs */
	mov	r0,#0				/* r0 = 0  */
 10001c0:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */
 10001c4:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */
 10001c8:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */
 10001cc:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	bl	invalidate_dcache		/* invalidate dcache */
 10001d0:	eb00007c 	bl	10003c8 <invalidate_dcache>

	/* Disable MMU, if enabled */
	mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */
 10001d4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x1			/* clear bit 0 */
 10001d8:	e3c00001 	bic	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 0		/* write value back */
 10001dc:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	add	r2, r2, #0x100000		/* next section */
	subs	r3, r3, #1
	bge	shareable_loop			/* loop till 1G is covered */
#endif

	mrs	r0, cpsr			/* get the current PSR */
 10001e0:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the irq stack pointer */
 10001e4:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 10001e8:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
 10001ec:	e3822012 	orr	r2, r2, #18
	msr	cpsr, r2
 10001f0:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 10001f4:	e59fd280 	ldr	sp, [pc, #640]	; 100047c <finished+0x38>
	bic r2, r2, #(0x1 << 9)    		 /* Set EE bit to little-endian */
 10001f8:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 10001fc:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000200:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
 1000204:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000208:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
 100020c:	e3822013 	orr	r2, r2, #19
	msr	cpsr, r2
 1000210:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000214:	e59fd264 	ldr	sp, [pc, #612]	; 1000480 <finished+0x3c>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000218:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100021c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000220:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
 1000224:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000228:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
 100022c:	e3822017 	orr	r2, r2, #23
	msr	cpsr, r2
 1000230:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000234:	e59fd248 	ldr	sp, [pc, #584]	; 1000484 <finished+0x40>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000238:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100023c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000240:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
 1000244:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000248:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
 100024c:	e3822011 	orr	r2, r2, #17
	msr	cpsr, r2
 1000250:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000254:	e59fd22c 	ldr	sp, [pc, #556]	; 1000488 <finished+0x44>
	bic r2, r2, #(0x1 << 9)    		/* Set EE bit to little-endian */
 1000258:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100025c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000260:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
 1000264:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000268:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
 100026c:	e382201b 	orr	r2, r2, #27
	msr	cpsr, r2
 1000270:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 1000274:	e59fd210 	ldr	sp, [pc, #528]	; 100048c <finished+0x48>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000278:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100027c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000280:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the system stack pointer */
 1000284:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000288:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
 100028c:	e382201f 	orr	r2, r2, #31
	msr	cpsr, r2
 1000290:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000294:	e59fd1f4 	ldr	sp, [pc, #500]	; 1000490 <finished+0x4c>

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
 1000298:	e59f71f4 	ldr	r7, [pc, #500]	; 1000494 <finished+0x50>
	ldr	r0, [r7]
 100029c:	e5970000 	ldr	r0, [r7]
	orr	r0, r0, #0x1
 10002a0:	e3800001 	orr	r0, r0, #1
	str	r0, [r7]
 10002a4:	e5870000 	str	r0, [r7]

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
 10002a8:	e59f01e8 	ldr	r0, [pc, #488]	; 1000498 <finished+0x54>
	orr	r0, r0, #0x5B			/* Outer-cacheable, WB */
 10002ac:	e380005b 	orr	r0, r0, #91	; 0x5b
	mcr	15, 0, r0, c2, c0, 0		/* TTB0 */
 10002b0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}

	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
 10002b4:	e3e00000 	mvn	r0, #0
	mcr	p15,0,r0,c3,c0,0
 10002b8:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
 10002bc:	e59f01d8 	ldr	r0, [pc, #472]	; 100049c <finished+0x58>
	mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */
 10002c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	dsb					/* dsb	allow the MMU to start up */
 10002c4:	f57ff04f 	dsb	sy
	isb					/* isb	flush prefetch buffer */
 10002c8:	f57ff06f 	isb	sy

	/* Write to ACTLR */
	mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/
 10002cc:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x01 << 6)		/* set SMP bit */
 10002d0:	e3800040 	orr	r0, r0, #64	; 0x40
	orr	r0, r0, #(0x01 )		/* Cache/TLB maintenance broadcast */
 10002d4:	e3800001 	orr	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/
 10002d8:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

/* Invalidate L2 Cache and enable L2 Cache*/
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10002dc:	e59f01bc 	ldr	r0, [pc, #444]	; 10004a0 <finished+0x5c>
	mov	r1, #0				/* force the disable bit */
 10002e0:	e3a01000 	mov	r1, #0
	str	r1, [r0]			/* disable the L2 Caches */
 10002e4:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10002e8:	e59f01b4 	ldr	r0, [pc, #436]	; 10004a4 <finished+0x60>
	ldr	r1,[r0]				/* read the register */
 10002ec:	e5901000 	ldr	r1, [r0]
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10002f0:	e59f21b0 	ldr	r2, [pc, #432]	; 10004a8 <finished+0x64>
	orr	r1,r1,r2
 10002f4:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* store the Aux Control Register */
 10002f8:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10002fc:	e59f01a8 	ldr	r0, [pc, #424]	; 10004ac <finished+0x68>
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 1000300:	e59f11a8 	ldr	r1, [pc, #424]	; 10004b0 <finished+0x6c>
	str	r1, [r0]			/* store the TAG Latency register Register */
 1000304:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 1000308:	e59f01a4 	ldr	r0, [pc, #420]	; 10004b4 <finished+0x70>
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 100030c:	e59f11a4 	ldr	r1, [pc, #420]	; 10004b8 <finished+0x74>
	str	r1, [r0]			/* store the Data Latency register Register */
 1000310:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 1000314:	e59f01a0 	ldr	r0, [pc, #416]	; 10004bc <finished+0x78>
	ldr	r2, =0xFFFF
 1000318:	e59f2158 	ldr	r2, [pc, #344]	; 1000478 <finished+0x34>
	str	r2, [r0]			/* force invalidate */
 100031c:	e5802000 	str	r2, [r0]

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 1000320:	e59f0198 	ldr	r0, [pc, #408]	; 10004c0 <finished+0x7c>

01000324 <Sync>:
						/* Load L2CC base address base + sync register*/
	/* poll for completion */
Sync:	ldr	r1, [r0]
 1000324:	e5901000 	ldr	r1, [r0]
	cmp	r1, #0
 1000328:	e3510000 	cmp	r1, #0
	bne	Sync
 100032c:	1afffffc 	bne	1000324 <Sync>

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 1000330:	e59f018c 	ldr	r0, [pc, #396]	; 10004c4 <finished+0x80>
	ldr	r1,[r0]
 1000334:	e5901000 	ldr	r1, [r0]
	ldr	r0,=L2CCIntClear
 1000338:	e59f0188 	ldr	r0, [pc, #392]	; 10004c8 <finished+0x84>
	str	r1,[r0]
 100033c:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
 1000340:	e59f0114 	ldr	r0, [pc, #276]	; 100045c <finished+0x18>
	ldr	r1,=SLCRUnlockKey	    	/* set unlock key */
 1000344:	e59f1114 	ldr	r1, [pc, #276]	; 1000460 <finished+0x1c>
	str	r1, [r0]		    	/* Unlock SLCR */
 1000348:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 100034c:	e59f0178 	ldr	r0, [pc, #376]	; 10004cc <finished+0x88>
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 1000350:	e59f1178 	ldr	r1, [pc, #376]	; 10004d0 <finished+0x8c>
	str	r1, [r0]	        	/* store the L2c Ram Control Register */
 1000354:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000358:	e59f0108 	ldr	r0, [pc, #264]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100035c:	e59f1108 	ldr	r1, [pc, #264]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000360:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 1000364:	e59f0134 	ldr	r0, [pc, #308]	; 10004a0 <finished+0x5c>
	ldr	r1,[r0]				/* read the register */
 1000368:	e5901000 	ldr	r1, [r0]
	mov	r2, #L2CCControl		/* set the enable bit */
 100036c:	e3a02001 	mov	r2, #1
	orr	r1,r1,r2
 1000370:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* enable the L2 Caches */
 1000374:	e5801000 	str	r1, [r0]
#endif

	mov	r0, r0
 1000378:	e1a00000 	nop			; (mov r0, r0)
	mrc	p15, 0, r1, c1, c0, 2		/* read cp access control register (CACR) into r1 */
 100037c:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr	r1, r1, #(0xf << 20)		/* enable full access for p10 & p11 */
 1000380:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr	p15, 0, r1, c1, c0, 2		/* write back into CACR */
 1000384:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}

	/* enable vfp */
	fmrx	r1, FPEXC			/* read the exception register */
 1000388:	eef81a10 	vmrs	r1, fpexc
	orr	r1,r1, #FPEXC_EN		/* set VFP enable bit, leave the others in orig state */
 100038c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
	fmxr	FPEXC, r1			/* write back the exception register */
 1000390:	eee81a10 	vmsr	fpexc, r1

	mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */
 1000394:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #(0x01 << 11)		/* #0x8000 */
 1000398:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15,0,r0,c1,c0,0
 100039c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */
 10003a0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */
 10003a4:	e3800004 	orr	r0, r0, #4
	orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */
 10003a8:	e3800002 	orr	r0, r0, #2
	mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */
 10003ac:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

	mrs	r0, cpsr			/* get the current PSR */
 10003b0:	e10f0000 	mrs	r0, CPSR
	bic	r0, r0, #0x100			/* enable asynchronous abort exception */
 10003b4:	e3c00c01 	bic	r0, r0, #256	; 0x100
	msr	cpsr_xsf, r0
 10003b8:	e12ef000 	msr	CPSR_fsx, r0


	b	_start				/* jump to C startup code */
 10003bc:	ea0022a5 	b	1008e58 <_start>
	and	r0, r0, r0			/* no op */
 10003c0:	e0000000 	and	r0, r0, r0

.Ldone:	b	.Ldone				/* Paranoia: we should never get here */
 10003c4:	eafffffe 	b	10003c4 <Sync+0xa0>

010003c8 <invalidate_dcache>:
 * the whole D-cache. Need to invalidate each line.
 *
 *************************************************************************
 */
invalidate_dcache:
	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */
 10003c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
	ands	r3, r0, #0x7000000
 10003cc:	e2103407 	ands	r3, r0, #117440512	; 0x7000000
	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */
 10003d0:	e1a03ba3 	lsr	r3, r3, #23
	beq	finished
 10003d4:	0a00001a 	beq	1000444 <finished>
	mov	r10, #0				/* start with level 0 */
 10003d8:	e3a0a000 	mov	sl, #0

010003dc <loop1>:
loop1:
	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */
 10003dc:	e08a20aa 	add	r2, sl, sl, lsr #1
	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */
 10003e0:	e1a01230 	lsr	r1, r0, r2
	and	r1, r1, #7			/* get those 3 bits alone */
 10003e4:	e2011007 	and	r1, r1, #7
	cmp	r1, #2
 10003e8:	e3510002 	cmp	r1, #2
	blt	skip				/* no cache or only instruction cache at this level */
 10003ec:	ba000011 	blt	1000438 <skip>
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
 10003f0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	isb					/* isb to sync the change to the CacheSizeID reg */
 10003f4:	f57ff06f 	isb	sy
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
 10003f8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
	and	r2, r1, #7			/* extract the line length field */
 10003fc:	e2012007 	and	r2, r1, #7
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
 1000400:	e2822004 	add	r2, r2, #4
	ldr	r4, =0x3ff
 1000404:	e59f40c8 	ldr	r4, [pc, #200]	; 10004d4 <finished+0x90>
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
 1000408:	e01441a1 	ands	r4, r4, r1, lsr #3
	clz	r5, r4				/* r5 is the bit position of the way size increment */
 100040c:	e16f5f14 	clz	r5, r4
	ldr	r7, =0x7fff
 1000410:	e59f70c0 	ldr	r7, [pc, #192]	; 10004d8 <finished+0x94>
	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */
 1000414:	e01776a1 	ands	r7, r7, r1, lsr #13

01000418 <loop2>:
loop2:
	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */
 1000418:	e1a09004 	mov	r9, r4

0100041c <loop3>:
loop3:
	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */
 100041c:	e18ab519 	orr	fp, sl, r9, lsl r5
	orr	r11, r11, r7, lsl r2		/* factor in the index number */
 1000420:	e18bb217 	orr	fp, fp, r7, lsl r2
	mcr	p15, 0, r11, c7, c6, 2		/* invalidate by set/way */
 1000424:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
	subs	r9, r9, #1			/* decrement the way number */
 1000428:	e2599001 	subs	r9, r9, #1
	bge	loop3
 100042c:	aafffffa 	bge	100041c <loop3>
	subs	r7, r7, #1			/* decrement the index */
 1000430:	e2577001 	subs	r7, r7, #1
	bge	loop2
 1000434:	aafffff7 	bge	1000418 <loop2>

01000438 <skip>:
skip:
	add	r10, r10, #2			/* increment the cache number */
 1000438:	e28aa002 	add	sl, sl, #2
	cmp	r3, r10
 100043c:	e153000a 	cmp	r3, sl
	bgt	loop1
 1000440:	caffffe5 	bgt	10003dc <loop1>

01000444 <finished>:

finished:
	mov	r10, #0				/* switch back to cache level 0 */
 1000444:	e3a0a000 	mov	sl, #0
	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */
 1000448:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	dsb
 100044c:	f57ff04f 	dsb	sy
	isb
 1000450:	f57ff06f 	isb	sy

	bx	lr
 1000454:	e12fff1e 	bx	lr
        ldr r0,=EFUSEStaus
 1000458:	f800d010 	.word	0xf800d010
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 100045c:	f8000008 	.word	0xf8000008
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000460:	0000df0d 	.word	0x0000df0d
	ldr r0,=SLCRCPURSTReg
 1000464:	f8000244 	.word	0xf8000244
        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000468:	f8000004 	.word	0xf8000004
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100046c:	0000767b 	.word	0x0000767b
	ldr	r0, =vector_base
 1000470:	01000000 	.word	0x01000000
	ldr	r7, =0xf8f0000c
 1000474:	f8f0000c 	.word	0xf8f0000c
	ldr	r6, =0xffff
 1000478:	0000ffff 	.word	0x0000ffff
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 100047c:	00010400 	.word	0x00010400
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000480:	00010c00 	.word	0x00010c00
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000484:	00011000 	.word	0x00011000
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000488:	00011400 	.word	0x00011400
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 100048c:	00011800 	.word	0x00011800
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000490:	00010000 	.word	0x00010000
	ldr	r7, =0xf8f00000
 1000494:	f8f00000 	.word	0xf8f00000
	ldr	r0,=TblBase			/* Load MMU translation table base */
 1000498:	01014000 	.word	0x01014000
	ldr	r0,=CRValMmuCac
 100049c:	00001005 	.word	0x00001005
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10004a0:	f8f02100 	.word	0xf8f02100
	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10004a4:	f8f02104 	.word	0xf8f02104
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10004a8:	72360000 	.word	0x72360000
	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10004ac:	f8f02108 	.word	0xf8f02108
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 10004b0:	00000111 	.word	0x00000111
	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 10004b4:	f8f0210c 	.word	0xf8f0210c
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 10004b8:	00000121 	.word	0x00000121
	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 10004bc:	f8f0277c 	.word	0xf8f0277c
	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 10004c0:	f8f02730 	.word	0xf8f02730
	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 10004c4:	f8f0221c 	.word	0xf8f0221c
	ldr	r0,=L2CCIntClear
 10004c8:	f8f02220 	.word	0xf8f02220
	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 10004cc:	f8000a1c 	.word	0xf8000a1c
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 10004d0:	00020202 	.word	0x00020202
	ldr	r4, =0x3ff
 10004d4:	000003ff 	.word	0x000003ff
	ldr	r7, =0x7fff
 10004d8:	00007fff 	.word	0x00007fff

010004dc <deregister_tm_clones>:
 10004dc:	f643 50d0 	movw	r0, #15824	; 0x3dd0
 10004e0:	f2c0 1001 	movt	r0, #257	; 0x101
 10004e4:	f643 53d0 	movw	r3, #15824	; 0x3dd0
 10004e8:	f2c0 1301 	movt	r3, #257	; 0x101
 10004ec:	4283      	cmp	r3, r0
 10004ee:	d005      	beq.n	10004fc <deregister_tm_clones+0x20>
 10004f0:	f240 0300 	movw	r3, #0
 10004f4:	f2c0 0300 	movt	r3, #0
 10004f8:	b103      	cbz	r3, 10004fc <deregister_tm_clones+0x20>
 10004fa:	4718      	bx	r3
 10004fc:	4770      	bx	lr
 10004fe:	bf00      	nop

01000500 <register_tm_clones>:
 1000500:	f643 50d0 	movw	r0, #15824	; 0x3dd0
 1000504:	f2c0 1001 	movt	r0, #257	; 0x101
 1000508:	f643 51d0 	movw	r1, #15824	; 0x3dd0
 100050c:	f2c0 1101 	movt	r1, #257	; 0x101
 1000510:	1a09      	subs	r1, r1, r0
 1000512:	1089      	asrs	r1, r1, #2
 1000514:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 1000518:	1049      	asrs	r1, r1, #1
 100051a:	d005      	beq.n	1000528 <register_tm_clones+0x28>
 100051c:	f240 0300 	movw	r3, #0
 1000520:	f2c0 0300 	movt	r3, #0
 1000524:	b103      	cbz	r3, 1000528 <register_tm_clones+0x28>
 1000526:	4718      	bx	r3
 1000528:	4770      	bx	lr
 100052a:	bf00      	nop

0100052c <__do_global_dtors_aux>:
 100052c:	b510      	push	{r4, lr}
 100052e:	f248 0410 	movw	r4, #32784	; 0x8010
 1000532:	f2c0 1401 	movt	r4, #257	; 0x101
 1000536:	7823      	ldrb	r3, [r4, #0]
 1000538:	b973      	cbnz	r3, 1000558 <__do_global_dtors_aux+0x2c>
 100053a:	f7ff ffcf 	bl	10004dc <deregister_tm_clones>
 100053e:	f240 0300 	movw	r3, #0
 1000542:	f2c0 0300 	movt	r3, #0
 1000546:	b12b      	cbz	r3, 1000554 <__do_global_dtors_aux+0x28>
 1000548:	f643 50d0 	movw	r0, #15824	; 0x3dd0
 100054c:	f2c0 1001 	movt	r0, #257	; 0x101
 1000550:	f3af 8000 	nop.w
 1000554:	2301      	movs	r3, #1
 1000556:	7023      	strb	r3, [r4, #0]
 1000558:	bd10      	pop	{r4, pc}
 100055a:	bf00      	nop

0100055c <frame_dummy>:
 100055c:	b508      	push	{r3, lr}
 100055e:	f240 0300 	movw	r3, #0
 1000562:	f2c0 0300 	movt	r3, #0
 1000566:	b14b      	cbz	r3, 100057c <frame_dummy+0x20>
 1000568:	f248 0114 	movw	r1, #32788	; 0x8014
 100056c:	f643 50d0 	movw	r0, #15824	; 0x3dd0
 1000570:	f2c0 1101 	movt	r1, #257	; 0x101
 1000574:	f2c0 1001 	movt	r0, #257	; 0x101
 1000578:	f3af 8000 	nop.w
 100057c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1000580:	e7be      	b.n	1000500 <register_tm_clones>
 1000582:	bf00      	nop
 1000584:	0000      	movs	r0, r0
	...

01000588 <_acq_irq_error_dma>:
/*
 * Handler for DMA error conditions in IRQs.
 */
void _acq_irq_error_dma()
{
	g_acq_state.stats.num_err_total++;
 1000588:	e30902c0 	movw	r0, #37568	; 0x92c0
{
 100058c:	e92d0030 	push	{r4, r5}
	g_acq_state.stats.num_err_total++;
 1000590:	e3400101 	movt	r0, #257	; 0x101
	g_acq_state.state = ACQSTATE_UNINIT;
 1000594:	e3a04000 	mov	r4, #0
 1000598:	e3a05000 	mov	r5, #0
	g_acq_state.stats.num_err_total++;
 100059c:	e2802e7b 	add	r2, r0, #1968	; 0x7b0
 10005a0:	e59037a8 	ldr	r3, [r0, #1960]	; 0x7a8
 10005a4:	e59017ac 	ldr	r1, [r0, #1964]	; 0x7ac
	g_acq_state.state = ACQSTATE_UNINIT;
 10005a8:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 10005ac:	e2933001 	adds	r3, r3, #1
	g_acq_state.sub_state = ACQSUBST_NONE;
	XAxiDma_Reset(&g_acq_state.dma);
	return;
}
 10005b0:	e8bd0030 	pop	{r4, r5}
	g_acq_state.stats.num_err_total++;
 10005b4:	e2a11000 	adc	r1, r1, #0
 10005b8:	e5023008 	str	r3, [r2, #-8]
 10005bc:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 10005c0:	ea000d95 	b	1003c1c <XAxiDma_Reset>

010005c4 <_acq_reset_PL_fifo>:
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10005c4:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10005c8:	e3a02040 	mov	r2, #64	; 0x40

/*
 * Force a reset of the PL FIFO.  Internal function - do not call outside of acquire engine.
 */
void _acq_reset_PL_fifo()
{
 10005cc:	e92d4010 	push	{r4, lr}
 10005d0:	e34e3000 	movt	r3, #57344	; 0xe000
 10005d4:	e24dd008 	sub	sp, sp, #8
 10005d8:	e34f2fbf 	movt	r2, #65471	; 0xffbf
	 * drive the reset pulse for some cycles to ensure that the reset is received and the state
	 * machine is in the correct state
	 */
	emio_fast_write(ACQ_EMIO_FIFO_RESET, 1);

	for(i = 0; i < 20; i++) {
 10005dc:	e3a01000 	mov	r1, #0
 10005e0:	e5832010 	str	r2, [r3, #16]
 10005e4:	e58d1004 	str	r1, [sp, #4]
 10005e8:	e59d3004 	ldr	r3, [sp, #4]
 10005ec:	e3530013 	cmp	r3, #19
 10005f0:	ca000006 	bgt	1000610 <_acq_reset_PL_fifo+0x4c>
		asm __volatile__("nop");
 10005f4:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 10005f8:	e59d3004 	ldr	r3, [sp, #4]
 10005fc:	e2833001 	add	r3, r3, #1
 1000600:	e58d3004 	str	r3, [sp, #4]
 1000604:	e59d3004 	ldr	r3, [sp, #4]
 1000608:	e3530013 	cmp	r3, #19
 100060c:	dafffff8 	ble	10005f4 <_acq_reset_PL_fifo+0x30>
	}

	emio_fast_write(ACQ_EMIO_FIFO_RESET, 0);

	// Test the FIFO full signal; wait for it to deassert before handing control back over
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 1000610:	e59f402c 	ldr	r4, [pc, #44]	; 1000644 <_acq_reset_PL_fifo+0x80>
 1000614:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1000618:	e3a02000 	mov	r2, #0
 100061c:	e34e3000 	movt	r3, #57344	; 0xe000
 1000620:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 1000624:	e5832010 	str	r2, [r3, #16]
 1000628:	e3a01042 	mov	r1, #66	; 0x42
 100062c:	e1a00004 	mov	r0, r4
 1000630:	eb0014a7 	bl	10058d4 <XGpioPs_ReadPin>
 1000634:	e3500000 	cmp	r0, #0
 1000638:	1afffffa 	bne	1000628 <_acq_reset_PL_fifo+0x64>
}
 100063c:	e28dd008 	add	sp, sp, #8
 1000640:	e8bd8010 	pop	{r4, pc}
 1000644:	01019b3c 	.word	0x01019b3c

01000648 <_acq_reset_trigger>:
 1000648:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100064c:	e3a02c01 	mov	r2, #256	; 0x100
 * Send a trigger reset signal to re-arm the trigger.  This only rearms the trigger on the
 * acquire engine.  It doesn't rearm any actual trigger sources; if those need rearming, you
 * need to send the required signals there, too!
 */
void _acq_reset_trigger()
{
 1000650:	e24dd008 	sub	sp, sp, #8
 1000654:	e34e3000 	movt	r3, #57344	; 0xe000
 1000658:	e34f2eff 	movt	r2, #65279	; 0xfeff
	 * drive the reset pulse for some cycles to ensure that the reset is received and the state
	 * machine is in the correct state
	 */
	emio_fast_write(ACQ_EMIO_TRIG_RESET, 1);

	for(i = 0; i < 10; i++) {
 100065c:	e3a01000 	mov	r1, #0
 1000660:	e5832010 	str	r2, [r3, #16]
 1000664:	e58d1004 	str	r1, [sp, #4]
 1000668:	e59d3004 	ldr	r3, [sp, #4]
 100066c:	e3530009 	cmp	r3, #9
 1000670:	ca000006 	bgt	1000690 <_acq_reset_trigger+0x48>
		asm __volatile__("nop");
 1000674:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 1000678:	e59d3004 	ldr	r3, [sp, #4]
 100067c:	e2833001 	add	r3, r3, #1
 1000680:	e58d3004 	str	r3, [sp, #4]
 1000684:	e59d3004 	ldr	r3, [sp, #4]
 1000688:	e3530009 	cmp	r3, #9
 100068c:	dafffff8 	ble	1000674 <_acq_reset_trigger+0x2c>
 1000690:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1000694:	e3a02000 	mov	r2, #0
 1000698:	e34e3000 	movt	r3, #57344	; 0xe000
 100069c:	e34f2eff 	movt	r2, #65279	; 0xfeff
 10006a0:	e5832010 	str	r2, [r3, #16]
	}

	emio_fast_write(ACQ_EMIO_TRIG_RESET, 0);
}
 10006a4:	e28dd008 	add	sp, sp, #8
 10006a8:	e12fff1e 	bx	lr

010006ac <_acq_wait_for_ndone>:
	return *(volatile u32 *) Addr;
 10006ac:	e3a02a0a 	mov	r2, #40960	; 0xa000
 10006b0:	e34e2000 	movt	r2, #57344	; 0xe000
 10006b4:	e5923068 	ldr	r3, [r2, #104]	; 0x68
/*
 * Blocks until the DONE signal is deasserted.
 */
void _acq_wait_for_ndone()
{
	while(emio_fast_read(ACQ_EMIO_DONE)) ;
 10006b8:	e3130004 	tst	r3, #4
 10006bc:	1afffffc 	bne	10006b4 <_acq_wait_for_ndone+0x8>
 10006c0:	e12fff1e 	bx	lr

010006c4 <acq_init>:

/*
 * Initialise the acquisitions engine.  Sets up default values in the structs.
 */
void acq_init()
{
 10006c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int error;

	g_acq_state.state = ACQSTATE_UNINIT;
 10006c8:	e30952c0 	movw	r5, #37568	; 0x92c0
 10006cc:	e3405101 	movt	r5, #257	; 0x101
 10006d0:	e3a02000 	mov	r2, #0
 10006d4:	e1a03005 	mov	r3, r5
	g_acq_state.state = ACQSTATE_UNINIT;
	g_acq_state.acq_first = NULL;
 10006d8:	e3a06000 	mov	r6, #0
 10006dc:	e3a07000 	mov	r7, #0
	g_acq_state.state = ACQSTATE_UNINIT;
 10006e0:	e4832850 	str	r2, [r3], #2128	; 0x850
	g_acq_state.last_debug_timer = 0;

	/*
	 * Setup the DMA engine.  Fail terribly if this can't be done.
	 */
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 10006e4:	e1a00002 	mov	r0, r2
	g_acq_state.acq_first = NULL;
 10006e8:	e1c360f0 	strd	r6, [r3]
	g_acq_state.last_debug_timer = 0;
 10006ec:	e2852e7f 	add	r2, r5, #2032	; 0x7f0
 10006f0:	e14260f8 	strd	r6, [r2, #-8]
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 10006f4:	eb000f56 	bl	1004454 <XAxiDma_LookupConfig>
 10006f8:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 10006fc:	e2850008 	add	r0, r5, #8
 1000700:	e1a01003 	mov	r1, r3
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 1000704:	e5853758 	str	r3, [r5, #1880]	; 0x758
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 1000708:	eb000d9b 	bl	1003d7c <XAxiDma_CfgInitialize>

	if(error != XST_SUCCESS) {
 100070c:	e3500000 	cmp	r0, #0
 1000710:	1a00009a 	bne	1000980 <acq_init+0x2bc>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
		exit(-1);
	}

	d_printf(D_INFO, "acquire: DMA initialised");
 1000714:	e30119cc 	movw	r1, #6604	; 0x19cc
 1000718:	e3a00002 	mov	r0, #2
 100071c:	e3401101 	movt	r1, #257	; 0x101

	d_printf(D_INFO, "acquire: Waiting for DMA reset to complete");

	XAxiDma_Reset(&g_acq_state.dma);
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 1000720:	e2854008 	add	r4, r5, #8
	d_printf(D_INFO, "acquire: DMA initialised");
 1000724:	eb000a7d 	bl	1003120 <d_printf>
	d_printf(D_INFO, "acquire: Waiting for DMA reset to complete");
 1000728:	e30119e8 	movw	r1, #6632	; 0x19e8
 100072c:	e3a00002 	mov	r0, #2
 1000730:	e3401101 	movt	r1, #257	; 0x101
 1000734:	eb000a79 	bl	1003120 <d_printf>
	XAxiDma_Reset(&g_acq_state.dma);
 1000738:	e1a00004 	mov	r0, r4
 100073c:	eb000d36 	bl	1003c1c <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 1000740:	e1a00004 	mov	r0, r4
 1000744:	eb000d79 	bl	1003d30 <XAxiDma_ResetIsDone>
 1000748:	e3500000 	cmp	r0, #0
 100074c:	0afffffb 	beq	1000740 <acq_init+0x7c>

	d_printf(D_INFO, "acquire: DMA reset OK");
 1000750:	e3011a14 	movw	r1, #6676	; 0x1a14
 1000754:	e3a00002 	mov	r0, #2
 1000758:	e3401101 	movt	r1, #257	; 0x101
 100075c:	eb000a6f 	bl	1003120 <d_printf>

	/*
	 * Setup the SCUGIC interrupt controller.  Fail terribly if this can't be done.
	 */
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_DMA_IRQ_RX, ACQ_DMA_IRQ_RX_PRIORITY, ACQ_DMA_IRQ_RX_TRIGGER);
 1000760:	e3090b18 	movw	r0, #39704	; 0x9b18
 1000764:	e3a03003 	mov	r3, #3
 1000768:	e3400101 	movt	r0, #257	; 0x101
 100076c:	e3a020a0 	mov	r2, #160	; 0xa0
 1000770:	e3a0103d 	mov	r1, #61	; 0x3d
 1000774:	eb001a24 	bl	100700c <XScuGic_SetPriorityTriggerType>

	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_DMA_IRQ_RX, \
 1000778:	e3012170 	movw	r2, #4464	; 0x1170
 100077c:	e3090b18 	movw	r0, #39704	; 0x9b18
 1000780:	e3402100 	movt	r2, #256	; 0x100
 1000784:	e3400101 	movt	r0, #257	; 0x101
 1000788:	e59f3228 	ldr	r3, [pc, #552]	; 10009b8 <acq_init+0x2f4>
 100078c:	e3a0103d 	mov	r1, #61	; 0x3d
 1000790:	eb00197c 	bl	1006d88 <XScuGic_Connect>
				(Xil_InterruptHandler)_acq_irq_rx_handler, XAxiDma_GetRxRing(&g_acq_state.dma));

	if(error != XST_SUCCESS) {
 1000794:	e2504000 	subs	r4, r0, #0
 1000798:	1a00007f 	bne	100099c <acq_init+0x2d8>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
		exit(-1);
	}

	XScuGic_Enable(&g_hal.xscu_gic, ACQ_DMA_IRQ_RX);
 100079c:	e3090b18 	movw	r0, #39704	; 0x9b18
 10007a0:	e3a0103d 	mov	r1, #61	; 0x3d
 10007a4:	e3400101 	movt	r0, #257	; 0x101
 10007a8:	eb001acd 	bl	10072e4 <XScuGic_Enable>

	d_printf(D_INFO, "acquire: SCUGIC configured");
 10007ac:	e3011a6c 	movw	r1, #6764	; 0x1a6c
 10007b0:	e3a00002 	mov	r0, #2
 10007b4:	e3401101 	movt	r1, #257	; 0x101
 10007b8:	eb000a58 	bl	1003120 <d_printf>
	 *   - ACQ_EMIO_ADC_VALID:		Signal to PL, currently ignored, that will control write_en of FIFO, pausing data
	 *   							reception into FIFO until acquisition is ready (e.g. if ADC not yet initialised.)
	 *   - ACQ_EMIO_FIFO_OVERRUN:	Signal to PS to indicate that acquisition has overrun the FIFO and a FIFO reset is
	 *   							required.
	 */
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_RUN, 1);
 10007bc:	e3a02001 	mov	r2, #1
 10007c0:	e3a01036 	mov	r1, #54	; 0x36
 10007c4:	e59f01f0 	ldr	r0, [pc, #496]	; 10009bc <acq_init+0x2f8>
 10007c8:	eb00153d 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_RUN, 1);
 10007cc:	e3a02001 	mov	r2, #1
 10007d0:	e3a01036 	mov	r1, #54	; 0x36
 10007d4:	e59f01e0 	ldr	r0, [pc, #480]	; 10009bc <acq_init+0x2f8>
 10007d8:	eb0014b6 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);
 10007dc:	e3a02001 	mov	r2, #1
 10007e0:	e3a01037 	mov	r1, #55	; 0x37
 10007e4:	e59f01d0 	ldr	r0, [pc, #464]	; 10009bc <acq_init+0x2f8>
 10007e8:	eb001535 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);
 10007ec:	e3a02001 	mov	r2, #1
 10007f0:	e3a01037 	mov	r1, #55	; 0x37
 10007f4:	e59f01c0 	ldr	r0, [pc, #448]	; 10009bc <acq_init+0x2f8>
 10007f8:	eb0014ae 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_MASK, 1);
 10007fc:	e3a02001 	mov	r2, #1
 1000800:	e3a0103b 	mov	r1, #59	; 0x3b
 1000804:	e59f01b0 	ldr	r0, [pc, #432]	; 10009bc <acq_init+0x2f8>
 1000808:	eb00152d 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_MASK, 1);
 100080c:	e3a02001 	mov	r2, #1
 1000810:	e3a0103b 	mov	r1, #59	; 0x3b
 1000814:	e59f01a0 	ldr	r0, [pc, #416]	; 10009bc <acq_init+0x2f8>
 1000818:	eb0014a6 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_RESET, 1);
 100081c:	e3a02001 	mov	r2, #1
 1000820:	e3a0103c 	mov	r1, #60	; 0x3c
 1000824:	e59f0190 	ldr	r0, [pc, #400]	; 10009bc <acq_init+0x2f8>
 1000828:	eb001525 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_RESET, 1);
 100082c:	e3a02001 	mov	r2, #1
 1000830:	e3a0103c 	mov	r1, #60	; 0x3c
 1000834:	e59f0180 	ldr	r0, [pc, #384]	; 10009bc <acq_init+0x2f8>
 1000838:	eb00149e 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_RESET, 1);
 100083c:	e3a02001 	mov	r2, #1
 1000840:	e3a0103e 	mov	r1, #62	; 0x3e
 1000844:	e59f0170 	ldr	r0, [pc, #368]	; 10009bc <acq_init+0x2f8>
 1000848:	eb00151d 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_RESET, 1);
 100084c:	e3a02001 	mov	r2, #1
 1000850:	e3a0103e 	mov	r1, #62	; 0x3e
 1000854:	e59f0160 	ldr	r0, [pc, #352]	; 10009bc <acq_init+0x2f8>
 1000858:	eb001496 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_DEPTH_MUX, 1);
 100085c:	e3a02001 	mov	r2, #1
 1000860:	e3a0103f 	mov	r1, #63	; 0x3f
 1000864:	e59f0150 	ldr	r0, [pc, #336]	; 10009bc <acq_init+0x2f8>
 1000868:	eb001515 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_DEPTH_MUX, 1);
 100086c:	e3a02001 	mov	r2, #1
 1000870:	e3a0103f 	mov	r1, #63	; 0x3f
 1000874:	e59f0140 	ldr	r0, [pc, #320]	; 10009bc <acq_init+0x2f8>
 1000878:	eb00148e 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 1);
 100087c:	e3a02001 	mov	r2, #1
 1000880:	e3a01040 	mov	r1, #64	; 0x40
 1000884:	e59f0130 	ldr	r0, [pc, #304]	; 10009bc <acq_init+0x2f8>
 1000888:	eb00150d 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 1);
 100088c:	e3a02001 	mov	r2, #1
 1000890:	e3a01040 	mov	r1, #64	; 0x40
 1000894:	e59f0120 	ldr	r0, [pc, #288]	; 10009bc <acq_init+0x2f8>
 1000898:	eb001486 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_ADC_VALID, 1);
 100089c:	e3a02001 	mov	r2, #1
 10008a0:	e3a01041 	mov	r1, #65	; 0x41
 10008a4:	e59f0110 	ldr	r0, [pc, #272]	; 10009bc <acq_init+0x2f8>
 10008a8:	eb001505 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_ADC_VALID, 1);
 10008ac:	e3a02001 	mov	r2, #1
 10008b0:	e3a01041 	mov	r1, #65	; 0x41
 10008b4:	e59f0100 	ldr	r0, [pc, #256]	; 10009bc <acq_init+0x2f8>
 10008b8:	eb00147e 	bl	1005ab8 <XGpioPs_SetDirectionPin>

	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_DONE, 0);
 10008bc:	e1a02004 	mov	r2, r4
 10008c0:	e3a01038 	mov	r1, #56	; 0x38
 10008c4:	e59f00f0 	ldr	r0, [pc, #240]	; 10009bc <acq_init+0x2f8>
 10008c8:	eb00147a 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_HAVE_TRIG, 0);
 10008cc:	e1a02004 	mov	r2, r4
 10008d0:	e3a0103d 	mov	r1, #61	; 0x3d
 10008d4:	e59f00e0 	ldr	r0, [pc, #224]	; 10009bc <acq_init+0x2f8>
 10008d8:	eb001476 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN, 0);
 10008dc:	e1a02004 	mov	r2, r4
 10008e0:	e3a01042 	mov	r1, #66	; 0x42
 10008e4:	e59f00d0 	ldr	r0, [pc, #208]	; 10009bc <acq_init+0x2f8>
 10008e8:	eb001472 	bl	1005ab8 <XGpioPs_SetDirectionPin>

	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_RUN, 0);
 10008ec:	e1a02004 	mov	r2, r4
 10008f0:	e3a01036 	mov	r1, #54	; 0x36
 10008f4:	e59f00c0 	ldr	r0, [pc, #192]	; 10009bc <acq_init+0x2f8>
 10008f8:	eb00142e 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_DONE, 0);
 10008fc:	e1a02004 	mov	r2, r4
 1000900:	e3a01038 	mov	r1, #56	; 0x38
 1000904:	e59f00b0 	ldr	r0, [pc, #176]	; 10009bc <acq_init+0x2f8>
 1000908:	eb00142a 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_MASK, 1);
 100090c:	e3a02001 	mov	r2, #1
 1000910:	e3a0103b 	mov	r1, #59	; 0x3b
 1000914:	e59f00a0 	ldr	r0, [pc, #160]	; 10009bc <acq_init+0x2f8>
 1000918:	eb001426 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_RESET, 0);
 100091c:	e1a02004 	mov	r2, r4
 1000920:	e3a0103c 	mov	r1, #60	; 0x3c
 1000924:	e59f0090 	ldr	r0, [pc, #144]	; 10009bc <acq_init+0x2f8>
 1000928:	eb001422 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_RESET, 0);
 100092c:	e1a02004 	mov	r2, r4
 1000930:	e3a0103e 	mov	r1, #62	; 0x3e
 1000934:	e59f0080 	ldr	r0, [pc, #128]	; 10009bc <acq_init+0x2f8>
 1000938:	eb00141e 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_DEPTH_MUX, 0);
 100093c:	e1a02004 	mov	r2, r4
 1000940:	e3a0103f 	mov	r1, #63	; 0x3f
 1000944:	e59f0070 	ldr	r0, [pc, #112]	; 10009bc <acq_init+0x2f8>
 1000948:	eb00141a 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);
 100094c:	e1a02004 	mov	r2, r4
 1000950:	e3a01040 	mov	r1, #64	; 0x40
 1000954:	e59f0060 	ldr	r0, [pc, #96]	; 10009bc <acq_init+0x2f8>
 1000958:	eb001416 	bl	10059b8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_ADC_VALID, 0);
 100095c:	e1a02004 	mov	r2, r4
 1000960:	e3a01041 	mov	r1, #65	; 0x41
 1000964:	e59f0050 	ldr	r0, [pc, #80]	; 10009bc <acq_init+0x2f8>
 1000968:	eb001412 	bl	10059b8 <XGpioPs_WritePin>

	d_printf(D_INFO, "acquire: engine initialised");
 100096c:	e3011a88 	movw	r1, #6792	; 0x1a88
 1000970:	e3a00002 	mov	r0, #2
 1000974:	e3401101 	movt	r1, #257	; 0x101
}
 1000978:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	d_printf(D_INFO, "acquire: engine initialised");
 100097c:	ea0009e7 	b	1003120 <d_printf>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
 1000980:	e3011990 	movw	r1, #6544	; 0x1990
 1000984:	e1a02000 	mov	r2, r0
 1000988:	e3401101 	movt	r1, #257	; 0x101
 100098c:	e3a00004 	mov	r0, #4
 1000990:	eb0009e2 	bl	1003120 <d_printf>
		exit(-1);
 1000994:	e3e00000 	mvn	r0, #0
 1000998:	fa00248c 	blx	1009bd0 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
 100099c:	e3011a2c 	movw	r1, #6700	; 0x1a2c
 10009a0:	e3a00004 	mov	r0, #4
 10009a4:	e1a02004 	mov	r2, r4
 10009a8:	e3401101 	movt	r1, #257	; 0x101
 10009ac:	eb0009db 	bl	1003120 <d_printf>
		exit(-1);
 10009b0:	e3e00000 	mvn	r0, #0
 10009b4:	fa002485 	blx	1009bd0 <exit>
 10009b8:	01019348 	.word	0x01019348
 10009bc:	01019b3c 	.word	0x01019b3c

010009c0 <acq_get_next_alloc>:
 *
 * If this fails (e.g. no memory) ACQRES_MALLOC_FAIL is returned and values in `next`
 * are left unchanged; otherwise ACQRES_OK is returned.
 */
int acq_get_next_alloc(struct acq_buffer_t *next)
{
 10009c0:	e92d4070 	push	{r4, r5, r6, lr}
	} else {
		next->buff_acq = work;
	}
#endif

	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 10009c4:	e30942c0 	movw	r4, #37568	; 0x92c0
 10009c8:	e3404101 	movt	r4, #257	; 0x101
{
 10009cc:	e1a05000 	mov	r5, r0
	//d_printf(D_ERROR, "buf_sz: req:%d actual:%d (align_error: %d)", g_acq_state.total_buffsz, buf_sz, g_acq_state.total_buffsz % ACQ_BUFFER_ALIGN);

	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 10009d0:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 10009d4:	e5946768 	ldr	r6, [r4, #1896]	; 0x768
 10009d8:	e0866000 	add	r6, r6, r0
 10009dc:	e3c6601f 	bic	r6, r6, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 10009e0:	e1a01006 	mov	r1, r6
 10009e4:	fa002719 	blx	100a650 <memalign>

	if(work == NULL) {
 10009e8:	e250c000 	subs	ip, r0, #0
 10009ec:	0a000010 	beq	1000a34 <acq_get_next_alloc+0x74>
	next->buff_alloc = work;
	next->buff_acq = work;

	//d_printf(D_EXINFO, "acquire: next = 0x%08x, next->buff_acq = 0x%08x, work.buff_alloc [malloc] = 0x%08x", next, next->buff_acq, work);

	g_acq_state.stats.num_alloc_total++;
 10009f0:	e59437c8 	ldr	r3, [r4, #1992]	; 0x7c8
	next->idx = 0;
 10009f4:	e3a02000 	mov	r2, #0
	g_acq_state.stats.num_alloc_total++;
 10009f8:	e59417cc 	ldr	r1, [r4, #1996]	; 0x7cc

	return ACQRES_OK;
 10009fc:	e1a00002 	mov	r0, r2
	next->buff_alloc = work;
 1000a00:	e585c004 	str	ip, [r5, #4]
	g_acq_state.stats.num_alloc_total++;
 1000a04:	e2844e7d 	add	r4, r4, #2000	; 0x7d0
 1000a08:	e2933001 	adds	r3, r3, #1
	next->buff_acq = work;
 1000a0c:	e585c008 	str	ip, [r5, #8]
	g_acq_state.stats.num_alloc_total++;
 1000a10:	e0a11002 	adc	r1, r1, r2
	next->flags = ACQBUF_FLAG_ALLOC;
 1000a14:	e3a0c080 	mov	ip, #128	; 0x80
	next->idx = 0;
 1000a18:	e5852000 	str	r2, [r5]
	next->trigger_at = 0;
 1000a1c:	e585200c 	str	r2, [r5, #12]
	next->next = NULL;
 1000a20:	e5852014 	str	r2, [r5, #20]
	next->flags = ACQBUF_FLAG_ALLOC;
 1000a24:	e1c5c1b0 	strh	ip, [r5, #16]
	g_acq_state.stats.num_alloc_total++;
 1000a28:	e5043008 	str	r3, [r4, #-8]
 1000a2c:	e5041004 	str	r1, [r4, #-4]
}
 1000a30:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1000a34:	e3011aa4 	movw	r1, #6820	; 0x1aa4
 1000a38:	e1a02006 	mov	r2, r6
 1000a3c:	e3401101 	movt	r1, #257	; 0x101
 1000a40:	e3a00004 	mov	r0, #4
 1000a44:	eb0009b5 	bl	1003120 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000a48:	e59437c0 	ldr	r3, [r4, #1984]	; 0x7c0
		return ACQRES_MALLOC_FAIL;
 1000a4c:	e3e00000 	mvn	r0, #0
		g_acq_state.stats.num_alloc_err_total++;
 1000a50:	e59427c4 	ldr	r2, [r4, #1988]	; 0x7c4
 1000a54:	e2844d1f 	add	r4, r4, #1984	; 0x7c0
 1000a58:	e2933001 	adds	r3, r3, #1
 1000a5c:	e2a22000 	adc	r2, r2, #0
 1000a60:	e5843000 	str	r3, [r4]
 1000a64:	e5842004 	str	r2, [r4, #4]
		return ACQRES_MALLOC_FAIL;
 1000a68:	e8bd8070 	pop	{r4, r5, r6, pc}

01000a6c <acq_append_next_alloc>:
/*
 * Append a new acquisition buffer to the linked list and set the current pointer to reference
 * this acquisition pointer.
 */
int acq_append_next_alloc()
{
 1000a6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct acq_buffer_t *next;
	int res;

	next = malloc(sizeof(struct acq_buffer_t));
 1000a70:	e3a00018 	mov	r0, #24
 1000a74:	fa002737 	blx	100a758 <malloc>

	/*
	 * Allocate the struct that stores the buffer info first.  This is
	 * just a few bytes, but could fail if we are near the memory limit.
	 */
	if(next == 0) {
 1000a78:	e2504000 	subs	r4, r0, #0
 1000a7c:	0a000035 	beq	1000b58 <acq_append_next_alloc+0xec>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000a80:	e30952c0 	movw	r5, #37568	; 0x92c0
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000a84:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000a88:	e3405101 	movt	r5, #257	; 0x101
		g_acq_state.stats.num_alloc_err_total++;
		return ACQRES_MALLOC_FAIL;
	}

	// ?
	next->next = NULL;
 1000a8c:	e3a06000 	mov	r6, #0
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000a90:	e5957768 	ldr	r7, [r5, #1896]	; 0x768
	next->flags = ACQBUF_FLAG_ALLOC;
 1000a94:	e3a08080 	mov	r8, #128	; 0x80
	next->next = NULL;
 1000a98:	e5846014 	str	r6, [r4, #20]
	next->trigger_at = 0;
 1000a9c:	e584600c 	str	r6, [r4, #12]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000aa0:	e0877000 	add	r7, r7, r0
	next->flags = ACQBUF_FLAG_ALLOC;
 1000aa4:	e1c481b0 	strh	r8, [r4, #16]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000aa8:	e3c7701f 	bic	r7, r7, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000aac:	e1a01007 	mov	r1, r7
 1000ab0:	fa0026e6 	blx	100a650 <memalign>
	if(work == NULL) {
 1000ab4:	e250e000 	subs	lr, r0, #0
 1000ab8:	0a000013 	beq	1000b0c <acq_append_next_alloc+0xa0>
	/*
	 * Set current acquisition next pointer to this structure, increase the index
	 * to be one higher than the last index then move the current pointer to reference
	 * this structure.
	 */
	g_acq_state.acq_current->next = next;
 1000abc:	e5957854 	ldr	r7, [r5, #2132]	; 0x854
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
	g_acq_state.acq_current = next;
	g_acq_state.stats.num_alloc_total++;

	return ACQRES_OK;
 1000ac0:	e1a00006 	mov	r0, r6
	g_acq_state.stats.num_alloc_total++;
 1000ac4:	e59537c8 	ldr	r3, [r5, #1992]	; 0x7c8
	next->idx = 0;
 1000ac8:	e5846000 	str	r6, [r4]
	g_acq_state.stats.num_alloc_total++;
 1000acc:	e595c7cc 	ldr	ip, [r5, #1996]	; 0x7cc
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 1000ad0:	e5971000 	ldr	r1, [r7]
	g_acq_state.stats.num_alloc_total++;
 1000ad4:	e2933002 	adds	r3, r3, #2
	next->trigger_at = 0;
 1000ad8:	e584600c 	str	r6, [r4, #12]
	g_acq_state.stats.num_alloc_total++;
 1000adc:	e2acc000 	adc	ip, ip, #0
	next->flags = ACQBUF_FLAG_ALLOC;
 1000ae0:	e1c481b0 	strh	r8, [r4, #16]
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 1000ae4:	e2811001 	add	r1, r1, #1
	next->next = NULL;
 1000ae8:	e5846014 	str	r6, [r4, #20]
	next->buff_alloc = work;
 1000aec:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 1000af0:	e584e008 	str	lr, [r4, #8]
	g_acq_state.acq_current->next = next;
 1000af4:	e5874014 	str	r4, [r7, #20]
	g_acq_state.stats.num_alloc_total++;
 1000af8:	e58537c8 	str	r3, [r5, #1992]	; 0x7c8
 1000afc:	e585c7cc 	str	ip, [r5, #1996]	; 0x7cc
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 1000b00:	e5841000 	str	r1, [r4]
	g_acq_state.acq_current = next;
 1000b04:	e5854854 	str	r4, [r5, #2132]	; 0x854
}
 1000b08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1000b0c:	e3011aa4 	movw	r1, #6820	; 0x1aa4
 1000b10:	e1a02007 	mov	r2, r7
 1000b14:	e3401101 	movt	r1, #257	; 0x101
 1000b18:	e3a00004 	mov	r0, #4
 1000b1c:	eb00097f 	bl	1003120 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000b20:	e59537c0 	ldr	r3, [r5, #1984]	; 0x7c0
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1000b24:	e3011b18 	movw	r1, #6936	; 0x1b18
		g_acq_state.stats.num_alloc_err_total++;
 1000b28:	e595c7c4 	ldr	ip, [r5, #1988]	; 0x7c4
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1000b2c:	e3401101 	movt	r1, #257	; 0x101
 1000b30:	e3e02000 	mvn	r2, #0
 1000b34:	e3a00004 	mov	r0, #4
		g_acq_state.stats.num_alloc_err_total++;
 1000b38:	e2933001 	adds	r3, r3, #1
 1000b3c:	e2855d1f 	add	r5, r5, #1984	; 0x7c0
 1000b40:	e0acc006 	adc	ip, ip, r6
 1000b44:	e5853000 	str	r3, [r5]
 1000b48:	e585c004 	str	ip, [r5, #4]
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1000b4c:	eb000973 	bl	1003120 <d_printf>
		return ACQRES_MALLOC_FAIL;
 1000b50:	e3e00000 	mvn	r0, #0
		return res;
 1000b54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for alloc structure", sizeof(struct acq_buffer_t));
 1000b58:	e3011adc 	movw	r1, #6876	; 0x1adc
 1000b5c:	e3a02018 	mov	r2, #24
 1000b60:	e3401101 	movt	r1, #257	; 0x101
 1000b64:	e3a00004 	mov	r0, #4
 1000b68:	eb00096c 	bl	1003120 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000b6c:	e59f201c 	ldr	r2, [pc, #28]	; 1000b90 <acq_append_next_alloc+0x124>
 1000b70:	e3e00000 	mvn	r0, #0
 1000b74:	e5923000 	ldr	r3, [r2]
 1000b78:	e5921004 	ldr	r1, [r2, #4]
 1000b7c:	e2933001 	adds	r3, r3, #1
 1000b80:	e2a11000 	adc	r1, r1, #0
 1000b84:	e5823000 	str	r3, [r2]
 1000b88:	e5821004 	str	r1, [r2, #4]
		return ACQRES_MALLOC_FAIL;
 1000b8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1000b90:	01019a80 	.word	0x01019a80

01000b94 <acq_free_all_alloc>:
/*
 * Free all acquisition buffers safely.
 */
void acq_free_all_alloc()
{
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000b94:	e30932c0 	movw	r3, #37568	; 0x92c0
{
 1000b98:	e92d4070 	push	{r4, r5, r6, lr}
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000b9c:	e3403101 	movt	r3, #257	; 0x101
 1000ba0:	e5934850 	ldr	r4, [r3, #2128]	; 0x850
	/*
	 * Iterate through the list of allocations starting at the first allocation,
	 * copy the next pointer, free the current allocation and repeat until we reach
	 * a NULL next pointer.
	 */
	while(next != NULL) {
 1000ba4:	e3540000 	cmp	r4, #0
 1000ba8:	0a000006 	beq	1000bc8 <acq_free_all_alloc+0x34>
		next_next = next->next;
 1000bac:	e5945014 	ldr	r5, [r4, #20]

		// Free the buffer *and* the acquisition structure
		free(next->buff_alloc);
 1000bb0:	e5940004 	ldr	r0, [r4, #4]
 1000bb4:	fa0026eb 	blx	100a768 <free>
		free(next);
 1000bb8:	e1a00004 	mov	r0, r4
 1000bbc:	fa0026e9 	blx	100a768 <free>
	while(next != NULL) {
 1000bc0:	e2554000 	subs	r4, r5, #0
 1000bc4:	1afffff8 	bne	1000bac <acq_free_all_alloc+0x18>

		next = next_next;
	}

	g_acq_state.acq_first = NULL;
 1000bc8:	e59f300c 	ldr	r3, [pc, #12]	; 1000bdc <acq_free_all_alloc+0x48>
 1000bcc:	e3a00000 	mov	r0, #0
 1000bd0:	e3a01000 	mov	r1, #0
 1000bd4:	e1c300f0 	strd	r0, [r3]
	g_acq_state.acq_current = NULL;
}
 1000bd8:	e8bd8070 	pop	{r4, r5, r6, pc}
 1000bdc:	01019b10 	.word	0x01019b10

01000be0 <acq_prepare_triggered>:
	uint32_t align_mask;
	uint32_t demux;
	int i, error = 0;

	// How can we acquire an empty buffer of no waveforms?
	if(num_acq == 0 || total_sz == 0) {
 1000be0:	e16fcf12 	clz	ip, r2
 1000be4:	e3530000 	cmp	r3, #0
 1000be8:	e1a0c2ac 	lsr	ip, ip, #5
 1000bec:	03a0c001 	moveq	ip, #1
{
 1000bf0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if(num_acq == 0 || total_sz == 0) {
 1000bf4:	e35c0000 	cmp	ip, #0
{
 1000bf8:	e24dd010 	sub	sp, sp, #16
	if(num_acq == 0 || total_sz == 0) {
 1000bfc:	1a0000e3 	bne	1000f90 <acq_prepare_triggered+0x3b0>
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 8-bit, 12-bit or 14-bit set
	if(!(mode_flags & (ACQ_MODE_8BIT | ACQ_MODE_12BIT | ACQ_MODE_14BIT))) {
 1000c00:	e3100007 	tst	r0, #7
 1000c04:	e1a08000 	mov	r8, r0
 1000c08:	0a0000e0 	beq	1000f90 <acq_prepare_triggered+0x3b0>
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 1ch, 2ch or 4ch set
	if(!(mode_flags & (ACQ_MODE_1CH | ACQ_MODE_2CH | ACQ_MODE_4CH))) {
 1000c0c:	e31000e0 	tst	r0, #224	; 0xe0
 1000c10:	0a0000de 	beq	1000f90 <acq_prepare_triggered+0x3b0>
		return ACQRES_PARAM_FAIL;
	}

	// Must not have "CONTINUOUS" or "TRIGGERED" set
	if(mode_flags & (ACQ_MODE_TRIGGERED | ACQ_MODE_CONTINUOUS)) {
 1000c14:	e3100c03 	tst	r0, #768	; 0x300
 1000c18:	1a0000dc 	bne	1000f90 <acq_prepare_triggered+0x3b0>

	/*
	 * Compute the pre and post trigger buffer sizes, and verify that everything is
	 * lined up nicely along the required sample boundaries.
	 */
	if(bias_point == 0) {
 1000c1c:	e3510000 	cmp	r1, #0
 1000c20:	e1a00002 	mov	r0, r2
		pre_sz = total_sz / 2;
 1000c24:	01a020a2 	lsreq	r2, r2, #1
 1000c28:	e1a07003 	mov	r7, r3
		post_sz = total_sz / 2;
 1000c2c:	01a03002 	moveq	r3, r2
	if(bias_point == 0) {
 1000c30:	0a000003 	beq	1000c44 <acq_prepare_triggered+0x64>
	} else if(bias_point < 0) {
 1000c34:	e1a03001 	mov	r3, r1
		pre_sz = -bias_point;
 1000c38:	b2612000 	rsblt	r2, r1, #0
		post_sz = total_sz - pre_sz;
 1000c3c:	b0813000 	addlt	r3, r1, r0
	} else if(bias_point > 0) {
		post_sz = bias_point;
		pre_sz = total_sz - post_sz;
 1000c40:	a0402003 	subge	r2, r0, r3
	}

	error = 0;

	if(mode_flags & ACQ_MODE_8BIT) {
 1000c44:	e2189001 	ands	r9, r8, #1
 1000c48:	1a000065 	bne	1000de4 <acq_prepare_triggered+0x204>
		if(pre_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
			error = 1;
		}
	}

	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000c4c:	e3180006 	tst	r8, #6
	error = 0;
 1000c50:	e1a01009 	mov	r1, r9
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000c54:	1a000069 	bne	1000e00 <acq_prepare_triggered+0x220>
		if(pre_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
			error = 1;
		}
	}

	if(pre_sz < ACQ_MIN_PREPOST_SIZE || post_sz < ACQ_MIN_PREPOST_SIZE) {
 1000c58:	e353001f 	cmp	r3, #31
 1000c5c:	8352001f 	cmphi	r2, #31
 1000c60:	93a01001 	movls	r1, #1
 1000c64:	83a01000 	movhi	r1, #0
		error = 1;
	}

	if(error) {
 1000c68:	e19c1001 	orrs	r1, ip, r1
 1000c6c:	1a0000a9 	bne	1000f18 <acq_prepare_triggered+0x338>
		total_sz *= 4;
		pre_sampct = pre_sz;
		post_sampct = post_sz;
		post_sz *= 4;
		pre_sz *= 4;
	} else if(mode_flags & (ACQ_MODE_8BIT)) {
 1000c70:	e3590000 	cmp	r9, #0
		// 8 samples per readout (64-bit)
		total_sz *= 8;
 1000c74:	11a00180 	lslne	r0, r0, #3
		pre_sampct = pre_sz;
		post_sampct = post_sz;
		post_sz *= 8;
 1000c78:	11a0c183 	lslne	ip, r3, #3
		pre_sz *= 8;
 1000c7c:	11a0e182 	lslne	lr, r2, #3
 1000c80:	01a0c003 	moveq	ip, r3
 1000c84:	01a0e002 	moveq	lr, r2
	uint32_t pre_sz = 0, post_sz = 0, pre_sampct = 0, post_sampct = 0;
 1000c88:	01a03009 	moveq	r3, r9
 1000c8c:	01a02009 	moveq	r2, r9
	/*
	 * Ensure that the total acquisition size doesn't exceed the available memory.  If
	 * that's OK, then free any existing buffers and allocate the memory blocks.  Include an
	 * allocation penalty in our size calculation.
	 */
	total_acq_sz = (total_sz + ACQ_BUFFER_ALIGN) * num_acq;
 1000c90:	e2801020 	add	r1, r0, #32
	g_acq_state.pre_buffsz = pre_sz;
 1000c94:	e30962c0 	movw	r6, #37568	; 0x92c0
	total_acq_sz = (total_sz + ACQ_BUFFER_ALIGN) * num_acq;
 1000c98:	e0010197 	mul	r1, r7, r1
	g_acq_state.pre_buffsz = pre_sz;
 1000c9c:	e3406101 	movt	r6, #257	; 0x101
 1000ca0:	e586e760 	str	lr, [r6, #1888]	; 0x760
	g_acq_state.post_buffsz = post_sz;
 1000ca4:	e586c764 	str	ip, [r6, #1892]	; 0x764
	g_acq_state.pre_sampct = pre_sampct;
 1000ca8:	e5862778 	str	r2, [r6, #1912]	; 0x778

	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 1000cac:	e3510303 	cmp	r1, #201326592	; 0xc000000
	g_acq_state.post_sampct = post_sampct;
 1000cb0:	e586377c 	str	r3, [r6, #1916]	; 0x77c
	g_acq_state.total_buffsz = total_sz;
 1000cb4:	e5860768 	str	r0, [r6, #1896]	; 0x768
	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 1000cb8:	8a0000b6 	bhi	1000f98 <acq_prepare_triggered+0x3b8>
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000cbc:	e5964850 	ldr	r4, [r6, #2128]	; 0x850
		return ACQRES_TOTAL_MALLOC_FAIL;
	}

	g_acq_state.state = ACQSTATE_UNINIT;
 1000cc0:	e3a03000 	mov	r3, #0
 1000cc4:	e5863000 	str	r3, [r6]
	while(next != NULL) {
 1000cc8:	e1540003 	cmp	r4, r3
 1000ccc:	0a000006 	beq	1000cec <acq_prepare_triggered+0x10c>
		next_next = next->next;
 1000cd0:	e5945014 	ldr	r5, [r4, #20]
		free(next->buff_alloc);
 1000cd4:	e5940004 	ldr	r0, [r4, #4]
 1000cd8:	fa0026a2 	blx	100a768 <free>
		free(next);
 1000cdc:	e1a00004 	mov	r0, r4
 1000ce0:	fa0026a0 	blx	100a768 <free>
	while(next != NULL) {
 1000ce4:	e2554000 	subs	r4, r5, #0
 1000ce8:	1afffff8 	bne	1000cd0 <acq_prepare_triggered+0xf0>
	g_acq_state.acq_first = NULL;
 1000cec:	e59fa2c8 	ldr	sl, [pc, #712]	; 1000fbc <acq_prepare_triggered+0x3dc>
 1000cf0:	e3a02000 	mov	r2, #0
 1000cf4:	e3a03000 	mov	r3, #0
	acq_free_all_alloc();

	first = malloc(sizeof(struct acq_buffer_t));
 1000cf8:	e3a00018 	mov	r0, #24
	g_acq_state.acq_first = NULL;
 1000cfc:	e1ca20f0 	strd	r2, [sl]
	first = malloc(sizeof(struct acq_buffer_t));
 1000d00:	fa002694 	blx	100a758 <malloc>

	if(first == NULL) {
 1000d04:	e2505000 	subs	r5, r0, #0
 1000d08:	0a0000a4 	beq	1000fa0 <acq_prepare_triggered+0x3c0>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000d0c:	e5964768 	ldr	r4, [r6, #1896]	; 0x768
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000d10:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000d14:	e0844000 	add	r4, r4, r0
 1000d18:	e3c4401f 	bic	r4, r4, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000d1c:	e1a01004 	mov	r1, r4
 1000d20:	fa00264a 	blx	100a650 <memalign>
	if(work == NULL) {
 1000d24:	e3500000 	cmp	r0, #0
 1000d28:	0a000081 	beq	1000f34 <acq_prepare_triggered+0x354>
	g_acq_state.stats.num_alloc_total++;
 1000d2c:	e51a3088 	ldr	r3, [sl, #-136]	; 0xffffff78
	next->idx = 0;
 1000d30:	e3a0c000 	mov	ip, #0
	g_acq_state.stats.num_alloc_total++;
 1000d34:	e51a1084 	ldr	r1, [sl, #-132]	; 0xffffff7c
	 * Allocate all subsequent blocks on start up.  We can't allocate these in the IRQ. Then set
	 * the current pointer back to the first so that we start acquiring from that wave buffer.
	 *
	 * If at any point this fails, bail out and free memory.
	 */
	for(i = 0; i < num_acq; i++) {
 1000d38:	e1a0400c 	mov	r4, ip
	next->buff_alloc = work;
 1000d3c:	e5850004 	str	r0, [r5, #4]
	g_acq_state.stats.num_alloc_total++;
 1000d40:	e2933001 	adds	r3, r3, #1
	next->buff_acq = work;
 1000d44:	e5850008 	str	r0, [r5, #8]
	g_acq_state.stats.num_alloc_total++;
 1000d48:	e0a1100c 	adc	r1, r1, ip
 1000d4c:	e50a3088 	str	r3, [sl, #-136]	; 0xffffff78
	next->flags = ACQBUF_FLAG_ALLOC;
 1000d50:	e3a03080 	mov	r3, #128	; 0x80
	g_acq_state.acq_first = first;
 1000d54:	e5865850 	str	r5, [r6, #2128]	; 0x850
 1000d58:	e5865854 	str	r5, [r6, #2132]	; 0x854
	g_acq_state.stats.num_alloc_total++;
 1000d5c:	e50a1084 	str	r1, [sl, #-132]	; 0xffffff7c
	next->idx = 0;
 1000d60:	e585c000 	str	ip, [r5]
	next->trigger_at = 0;
 1000d64:	e585c00c 	str	ip, [r5, #12]
	next->next = NULL;
 1000d68:	e585c014 	str	ip, [r5, #20]
	next->flags = ACQBUF_FLAG_ALLOC;
 1000d6c:	e1c531b0 	strh	r3, [r5, #16]
	for(i = 0; i < num_acq; i++) {
 1000d70:	ea000002 	b	1000d80 <acq_prepare_triggered+0x1a0>
 1000d74:	e2844001 	add	r4, r4, #1
 1000d78:	e1570004 	cmp	r7, r4
 1000d7c:	9a000033 	bls	1000e50 <acq_prepare_triggered+0x270>
		// d_printf(D_EXINFO, "acq_current: 0x%08x", g_acq_state.acq_current);

		error = acq_append_next_alloc();
 1000d80:	ebffff39 	bl	1000a6c <acq_append_next_alloc>
		if(error != ACQRES_OK) {
 1000d84:	e2505000 	subs	r5, r0, #0
 1000d88:	0afffff9 	beq	1000d74 <acq_prepare_triggered+0x194>
			d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d, aborting allocation", error, i);
 1000d8c:	e3011c5c 	movw	r1, #7260	; 0x1c5c
 1000d90:	e1a03004 	mov	r3, r4
 1000d94:	e3401101 	movt	r1, #257	; 0x101
 1000d98:	e1a02005 	mov	r2, r5
 1000d9c:	e3a00004 	mov	r0, #4
 1000da0:	eb0008de 	bl	1003120 <d_printf>
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000da4:	e5964850 	ldr	r4, [r6, #2128]	; 0x850
	while(next != NULL) {
 1000da8:	e3540000 	cmp	r4, #0
 1000dac:	0a000006 	beq	1000dcc <acq_prepare_triggered+0x1ec>
		next_next = next->next;
 1000db0:	e5946014 	ldr	r6, [r4, #20]
		free(next->buff_alloc);
 1000db4:	e5940004 	ldr	r0, [r4, #4]
 1000db8:	fa00266a 	blx	100a768 <free>
		free(next);
 1000dbc:	e1a00004 	mov	r0, r4
 1000dc0:	fa002668 	blx	100a768 <free>
	while(next != NULL) {
 1000dc4:	e2564000 	subs	r4, r6, #0
 1000dc8:	1afffff8 	bne	1000db0 <acq_prepare_triggered+0x1d0>
	g_acq_state.acq_first = NULL;
 1000dcc:	e3a02000 	mov	r2, #0
 1000dd0:	e3a03000 	mov	r3, #0
 1000dd4:	e1ca20f0 	strd	r2, [sl]
	g_acq_state.demux_reg = demux;
	fabcfg_write(FAB_CFG_ACQ_DEMUX_MODE, demux);
	fabcfg_commit();

	return ACQRES_OK;
}
 1000dd8:	e1a00005 	mov	r0, r5
 1000ddc:	e28dd010 	add	sp, sp, #16
 1000de0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		if(pre_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
 1000de4:	e3120007 	tst	r2, #7
 1000de8:	1a000047 	bne	1000f0c <acq_prepare_triggered+0x32c>
		if(post_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
 1000dec:	e213c007 	ands	ip, r3, #7
 1000df0:	13a0c001 	movne	ip, #1
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000df4:	e3180006 	tst	r8, #6
			error = 1;
 1000df8:	e1a0100c 	mov	r1, ip
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000dfc:	0affff95 	beq	1000c58 <acq_prepare_triggered+0x78>
		if(post_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
 1000e00:	e3130003 	tst	r3, #3
 1000e04:	1a000008 	bne	1000e2c <acq_prepare_triggered+0x24c>
		if(pre_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
 1000e08:	e202c003 	and	ip, r2, #3
 1000e0c:	e19c1001 	orrs	r1, ip, r1
 1000e10:	1a000005 	bne	1000e2c <acq_prepare_triggered+0x24c>
	if(error) {
 1000e14:	e352001f 	cmp	r2, #31
 1000e18:	8353001f 	cmphi	r3, #31
		total_sz *= 4;
 1000e1c:	81a00100 	lslhi	r0, r0, #2
		post_sz *= 4;
 1000e20:	81a0c103 	lslhi	ip, r3, #2
		pre_sz *= 4;
 1000e24:	81a0e102 	lslhi	lr, r2, #2
	if(error) {
 1000e28:	8affff98 	bhi	1000c90 <acq_prepare_triggered+0xb0>
		align_mask = ACQ_SAMPLES_ALIGN_PR_AMOD;
 1000e2c:	e3a0c003 	mov	ip, #3
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d total_sz=%d req_align_mask=0x%08x test=0x%08x)", \
 1000e30:	e203e007 	and	lr, r3, #7
 1000e34:	e3011b50 	movw	r1, #6992	; 0x1b50
 1000e38:	e88d5001 	stm	sp, {r0, ip, lr}
 1000e3c:	e3401101 	movt	r1, #257	; 0x101
 1000e40:	e3a00004 	mov	r0, #4
		return ACQRES_ALIGN_FAIL;
 1000e44:	e3e05001 	mvn	r5, #1
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d total_sz=%d req_align_mask=0x%08x test=0x%08x)", \
 1000e48:	eb0008b4 	bl	1003120 <d_printf>
		return ACQRES_ALIGN_FAIL;
 1000e4c:	eaffffe1 	b	1000dd8 <acq_prepare_triggered+0x1f8>
	g_acq_state.acq_current = g_acq_state.acq_first;
 1000e50:	e5963850 	ldr	r3, [r6, #2128]	; 0x850
	g_acq_state.state = ACQSTATE_STOPPED;
 1000e54:	e3a02001 	mov	r2, #1
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 1000e58:	e5961778 	ldr	r1, [r6, #1912]	; 0x778
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 1000e5c:	e388cc01 	orr	ip, r8, #256	; 0x100
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 1000e60:	e3a00005 	mov	r0, #5
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 1000e64:	e586c75c 	str	ip, [r6, #1884]	; 0x75c
	g_acq_state.acq_current = g_acq_state.acq_first;
 1000e68:	e5863854 	str	r3, [r6, #2132]	; 0x854
	g_acq_state.state = ACQSTATE_STOPPED;
 1000e6c:	e3a03000 	mov	r3, #0
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 1000e70:	e2411001 	sub	r1, r1, #1
	g_acq_state.state = ACQSTATE_STOPPED;
 1000e74:	e1c620f0 	strd	r2, [r6]
	g_acq_state.num_acq_request = num_acq;
 1000e78:	e5867770 	str	r7, [r6, #1904]	; 0x770
	g_acq_state.num_acq_made = 0;
 1000e7c:	e5865774 	str	r5, [r6, #1908]	; 0x774
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 1000e80:	eb0006d1 	bl	10029cc <fabcfg_write>
	fabcfg_write(FAB_CFG_ACQ_SIZE_B, g_acq_state.post_sampct - 1);
 1000e84:	e596177c 	ldr	r1, [r6, #1916]	; 0x77c
 1000e88:	e3a00006 	mov	r0, #6
 1000e8c:	e2411001 	sub	r1, r1, #1
 1000e90:	eb0006cd 	bl	10029cc <fabcfg_write>
	if(mode_flags & ACQ_MODE_8BIT) {
 1000e94:	e3590000 	cmp	r9, #0
 1000e98:	1a000020 	bne	1000f20 <acq_prepare_triggered+0x340>
	} else if(mode_flags & ACQ_MODE_12BIT) {
 1000e9c:	e3180002 	tst	r8, #2
 1000ea0:	1a000035 	bne	1000f7c <acq_prepare_triggered+0x39c>
	} else if(mode_flags & ACQ_MODE_14BIT) {
 1000ea4:	e2083004 	and	r3, r8, #4
 1000ea8:	e3530000 	cmp	r3, #0
 1000eac:	03a01004 	moveq	r1, #4
 1000eb0:	13a01024 	movne	r1, #36	; 0x24
 1000eb4:	03a02002 	moveq	r2, #2
 1000eb8:	13a02022 	movne	r2, #34	; 0x22
 1000ebc:	03a03001 	moveq	r3, #1
 1000ec0:	13a03021 	movne	r3, #33	; 0x21
 1000ec4:	03a00000 	moveq	r0, #0
 1000ec8:	13a00020 	movne	r0, #32
	if(mode_flags & ACQ_MODE_1CH) {
 1000ecc:	e3180020 	tst	r8, #32
 1000ed0:	1a000005 	bne	1000eec <acq_prepare_triggered+0x30c>
	} else if(mode_flags & ACQ_MODE_2CH) {
 1000ed4:	e3180040 	tst	r8, #64	; 0x40
		demux |= ADCDEMUX_2CH;
 1000ed8:	11a03002 	movne	r3, r2
	} else if(mode_flags & ACQ_MODE_2CH) {
 1000edc:	1a000002 	bne	1000eec <acq_prepare_triggered+0x30c>
		demux |= ADCDEMUX_4CH;
 1000ee0:	e3180080 	tst	r8, #128	; 0x80
 1000ee4:	01a03000 	moveq	r3, r0
 1000ee8:	11a03001 	movne	r3, r1
	fabcfg_write(FAB_CFG_ACQ_DEMUX_MODE, demux);
 1000eec:	e1a01003 	mov	r1, r3
 1000ef0:	e3a00008 	mov	r0, #8
	g_acq_state.demux_reg = demux;
 1000ef4:	e5863780 	str	r3, [r6, #1920]	; 0x780
	fabcfg_write(FAB_CFG_ACQ_DEMUX_MODE, demux);
 1000ef8:	eb0006b3 	bl	10029cc <fabcfg_write>
	fabcfg_commit();
 1000efc:	eb0006b9 	bl	10029e8 <fabcfg_commit>
}
 1000f00:	e1a00005 	mov	r0, r5
 1000f04:	e28dd010 	add	sp, sp, #16
 1000f08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000f0c:	e3180006 	tst	r8, #6
			error = 1;
 1000f10:	13a01001 	movne	r1, #1
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000f14:	1affffb9 	bne	1000e00 <acq_prepare_triggered+0x220>
	if(error) {
 1000f18:	e3a0c007 	mov	ip, #7
 1000f1c:	eaffffc3 	b	1000e30 <acq_prepare_triggered+0x250>
 1000f20:	e3a0100c 	mov	r1, #12
 1000f24:	e3a0200a 	mov	r2, #10
 1000f28:	e3a03009 	mov	r3, #9
		demux |= ADCDEMUX_8BIT;
 1000f2c:	e3a00008 	mov	r0, #8
 1000f30:	eaffffe5 	b	1000ecc <acq_prepare_triggered+0x2ec>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1000f34:	e3011aa4 	movw	r1, #6820	; 0x1aa4
 1000f38:	e1a02004 	mov	r2, r4
 1000f3c:	e3401101 	movt	r1, #257	; 0x101
 1000f40:	e3a00004 	mov	r0, #4
 1000f44:	eb000875 	bl	1003120 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000f48:	e16a69d0 	ldrd	r6, [sl, #-144]!	; 0xffffff70
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 1000f4c:	e3011c28 	movw	r1, #7208	; 0x1c28
 1000f50:	e3401101 	movt	r1, #257	; 0x101
 1000f54:	e3a00004 	mov	r0, #4
		return ACQRES_MALLOC_FAIL;
 1000f58:	e3e05000 	mvn	r5, #0
		g_acq_state.stats.num_alloc_err_total++;
 1000f5c:	e2963001 	adds	r3, r6, #1
 1000f60:	e2a72000 	adc	r2, r7, #0
 1000f64:	e58a3000 	str	r3, [sl]
 1000f68:	e58a2004 	str	r2, [sl, #4]
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 1000f6c:	eb00086b 	bl	1003120 <d_printf>
}
 1000f70:	e1a00005 	mov	r0, r5
 1000f74:	e28dd010 	add	sp, sp, #16
 1000f78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1000f7c:	e3a01014 	mov	r1, #20
 1000f80:	e3a02012 	mov	r2, #18
 1000f84:	e3a03011 	mov	r3, #17
		demux |= ADCDEMUX_12BIT;
 1000f88:	e3a00010 	mov	r0, #16
 1000f8c:	eaffffce 	b	1000ecc <acq_prepare_triggered+0x2ec>
		return ACQRES_PARAM_FAIL;
 1000f90:	e3e05002 	mvn	r5, #2
 1000f94:	eaffff8f 	b	1000dd8 <acq_prepare_triggered+0x1f8>
		return ACQRES_TOTAL_MALLOC_FAIL;
 1000f98:	e3e05003 	mvn	r5, #3
 1000f9c:	eaffff8d 	b	1000dd8 <acq_prepare_triggered+0x1f8>
		d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first entry in acquisition", sizeof(struct acq_buffer_t));
 1000fa0:	e3011be4 	movw	r1, #7140	; 0x1be4
 1000fa4:	e3a02018 	mov	r2, #24
 1000fa8:	e3401101 	movt	r1, #257	; 0x101
 1000fac:	e3a00004 	mov	r0, #4
 1000fb0:	eb00085a 	bl	1003120 <d_printf>
		return ACQRES_MALLOC_FAIL;
 1000fb4:	e3e05000 	mvn	r5, #0
 1000fb8:	eaffff86 	b	1000dd8 <acq_prepare_triggered+0x1f8>
 1000fbc:	01019b10 	.word	0x01019b10

01000fc0 <acq_start>:
 * 			ACQRES_NOT_IMPLEMENTED if the mode is not presently supported;
 * 			ACQRES_DMA_FAIL if DMA task could not be started;
 * 			ACQRES_SUCCESS if stop signal sent.
 */
int acq_start()
{
 1000fc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int error;

	//d_printf(D_ERROR, "acquire: starts");

	if(g_acq_state.state == ACQSTATE_UNINIT) {
 1000fc4:	e30942c0 	movw	r4, #37568	; 0x92c0
 1000fc8:	e3404101 	movt	r4, #257	; 0x101
{
 1000fcc:	e24dd00c 	sub	sp, sp, #12
	if(g_acq_state.state == ACQSTATE_UNINIT) {
 1000fd0:	e5943000 	ldr	r3, [r4]
 1000fd4:	e3530000 	cmp	r3, #0
 1000fd8:	0a000061 	beq	1001164 <acq_start+0x1a4>
	if(!(g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE)) {
		return ACQRES_NOT_STOPPED;
	}
#endif

	if(g_acq_state.acq_mode_flags & ACQ_MODE_TRIGGERED) {
 1000fdc:	e594375c 	ldr	r3, [r4, #1884]	; 0x75c
 1000fe0:	e3130c01 	tst	r3, #256	; 0x100
 1000fe4:	0a000055 	beq	1001140 <acq_start+0x180>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1000fe8:	e5942008 	ldr	r2, [r4, #8]

		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 1000fec:	e5941854 	ldr	r1, [r4, #2132]	; 0x854
 1000ff0:	e5923030 	ldr	r3, [r2, #48]	; 0x30
 1000ff4:	e5910008 	ldr	r0, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1000ff8:	e3833a07 	orr	r3, r3, #28672	; 0x7000
	*LocalAddr = Value;
 1000ffc:	e5823030 	str	r3, [r2, #48]	; 0x30
		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 1001000:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
 1001004:	eb001b7c 	bl	1007dfc <Xil_DCacheFlushRange>
		dsb();
 1001008:	f57ff04f 	dsb	sy

		error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)g_acq_state.acq_current->buff_acq, \
 100100c:	e5941854 	ldr	r1, [r4, #2132]	; 0x854
 1001010:	e2840008 	add	r0, r4, #8
 1001014:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1001018:	e3a03001 	mov	r3, #1
 100101c:	e5911008 	ldr	r1, [r1, #8]
 1001020:	eb000caf 	bl	10042e4 <XAxiDma_SimpleTransfer>
				g_acq_state.pre_buffsz, XAXIDMA_DEVICE_TO_DMA);

		if(error != XST_SUCCESS) {
 1001024:	e2505000 	subs	r5, r0, #0
 1001028:	1a000046 	bne	1001148 <acq_start+0x188>
 100102c:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001030:	e3a01000 	mov	r1, #0
 1001034:	e3a02040 	mov	r2, #64	; 0x40
 1001038:	e34e3000 	movt	r3, #57344	; 0xe000
 100103c:	e34f1dff 	movt	r1, #65023	; 0xfdff
			d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
			return ACQRES_DMA_FAIL;
		}

		// Set the state machine
		g_acq_state.state = ACQSTATE_PREP;
 1001040:	e3a06002 	mov	r6, #2
 1001044:	e3a07001 	mov	r7, #1
 1001048:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 100104c:	e1c460f0 	strd	r6, [r4]
 1001050:	e5831010 	str	r1, [r3, #16]
 1001054:	e5832010 	str	r2, [r3, #16]
	for(i = 0; i < 20; i++) {
 1001058:	e58d5004 	str	r5, [sp, #4]
 100105c:	e59d3004 	ldr	r3, [sp, #4]
 1001060:	e3530013 	cmp	r3, #19
 1001064:	ca000006 	bgt	1001084 <acq_start+0xc4>
		asm __volatile__("nop");
 1001068:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 100106c:	e59d3004 	ldr	r3, [sp, #4]
 1001070:	e2833001 	add	r3, r3, #1
 1001074:	e58d3004 	str	r3, [sp, #4]
 1001078:	e59d3004 	ldr	r3, [sp, #4]
 100107c:	e3530013 	cmp	r3, #19
 1001080:	dafffff8 	ble	1001068 <acq_start+0xa8>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 1001084:	e59f40e0 	ldr	r4, [pc, #224]	; 100116c <acq_start+0x1ac>
 1001088:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100108c:	e3a02000 	mov	r2, #0
 1001090:	e34e3000 	movt	r3, #57344	; 0xe000
 1001094:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 1001098:	e5832010 	str	r2, [r3, #16]
 100109c:	e3a01042 	mov	r1, #66	; 0x42
 10010a0:	e1a00004 	mov	r0, r4
 10010a4:	eb00120a 	bl	10058d4 <XGpioPs_ReadPin>
 10010a8:	e3500000 	cmp	r0, #0
 10010ac:	1afffffa 	bne	100109c <acq_start+0xdc>
 10010b0:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10010b4:	e3a02c01 	mov	r2, #256	; 0x100
 10010b8:	e34e3000 	movt	r3, #57344	; 0xe000
 10010bc:	e34f2eff 	movt	r2, #65279	; 0xfeff
 10010c0:	e5832010 	str	r2, [r3, #16]
	for(i = 0; i < 10; i++) {
 10010c4:	e58d0000 	str	r0, [sp]
 10010c8:	e59d3000 	ldr	r3, [sp]
 10010cc:	e3530009 	cmp	r3, #9
 10010d0:	ca000006 	bgt	10010f0 <acq_start+0x130>
		asm __volatile__("nop");
 10010d4:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 10010d8:	e59d3000 	ldr	r3, [sp]
 10010dc:	e2833001 	add	r3, r3, #1
 10010e0:	e58d3000 	str	r3, [sp]
 10010e4:	e59d3000 	ldr	r3, [sp]
 10010e8:	e3530009 	cmp	r3, #9
 10010ec:	dafffff8 	ble	10010d4 <acq_start+0x114>
 10010f0:	e3a02000 	mov	r2, #0
 10010f4:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10010f8:	e34e3000 	movt	r3, #57344	; 0xe000
 10010fc:	e1a0c002 	mov	ip, r2
 1001100:	e34f2eff 	movt	r2, #65279	; 0xfeff
 1001104:	e3a00001 	mov	r0, #1
 1001108:	e5832010 	str	r2, [r3, #16]
 100110c:	e3a01020 	mov	r1, #32
 1001110:	e3a02b01 	mov	r2, #1024	; 0x400
 1001114:	e34fcffd 	movt	ip, #65533	; 0xfffd
 1001118:	e34f0ffe 	movt	r0, #65534	; 0xfffe
 100111c:	e34f1fdf 	movt	r1, #65503	; 0xffdf
 1001120:	e34f2bff 	movt	r2, #64511	; 0xfbff
 1001124:	e583c010 	str	ip, [r3, #16]
 1001128:	e5830010 	str	r0, [r3, #16]
 100112c:	e5831010 	str	r1, [r3, #16]
 1001130:	e5832010 	str	r2, [r3, #16]

		return ACQRES_OK;
	} else {
		return ACQRES_NOT_IMPLEMENTED;
	}
}
 1001134:	e1a00005 	mov	r0, r5
 1001138:	e28dd00c 	add	sp, sp, #12
 100113c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		return ACQRES_NOT_IMPLEMENTED;
 1001140:	e3e05006 	mvn	r5, #6
 1001144:	eafffffa 	b	1001134 <acq_start+0x174>
			d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1001148:	e3011ca0 	movw	r1, #7328	; 0x1ca0
 100114c:	e1a02005 	mov	r2, r5
 1001150:	e3401101 	movt	r1, #257	; 0x101
 1001154:	e3a00004 	mov	r0, #4
 1001158:	eb0007f0 	bl	1003120 <d_printf>
			return ACQRES_DMA_FAIL;
 100115c:	e3e05004 	mvn	r5, #4
 1001160:	eafffff3 	b	1001134 <acq_start+0x174>
		return ACQRES_NOT_INITIALISED;
 1001164:	e3e05005 	mvn	r5, #5
 1001168:	eafffff1 	b	1001134 <acq_start+0x174>
 100116c:	01019b3c 	.word	0x01019b3c

01001170 <_acq_irq_rx_handler>:
{
 1001170:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	g_acq_state.stats.num_irqs++;
 1001174:	e30942c0 	movw	r4, #37568	; 0x92c0
	status = XAxiDma_BdRingGetIrq(bd_ring);
 1001178:	e590c000 	ldr	ip, [r0]
	g_acq_state.stats.num_irqs++;
 100117c:	e3404101 	movt	r4, #257	; 0x101
 1001180:	e3a05a07 	mov	r5, #28672	; 0x7000
{
 1001184:	e24dd010 	sub	sp, sp, #16
	g_acq_state.stats.num_irqs++;
 1001188:	e59437d0 	ldr	r3, [r4, #2000]	; 0x7d0
	return *(volatile u32 *) Addr;
 100118c:	e59c1004 	ldr	r1, [ip, #4]
 1001190:	e59407d4 	ldr	r0, [r4, #2004]	; 0x7d4
 1001194:	e2933001 	adds	r3, r3, #1
	XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 1001198:	e594e008 	ldr	lr, [r4, #8]
	g_acq_state.stats.num_irqs++;
 100119c:	e58437d0 	str	r3, [r4, #2000]	; 0x7d0
	status = XAxiDma_BdRingGetIrq(bd_ring);
 10011a0:	e0013005 	and	r3, r1, r5
	g_acq_state.stats.num_irqs++;
 10011a4:	e2a00000 	adc	r0, r0, #0
	if(status & XAXIDMA_IRQ_ERROR_MASK) {
 10011a8:	e2112901 	ands	r2, r1, #16384	; 0x4000
	g_acq_state.stats.num_irqs++;
 10011ac:	e58407d4 	str	r0, [r4, #2004]	; 0x7d4
	*LocalAddr = Value;
 10011b0:	e58e5004 	str	r5, [lr, #4]
 10011b4:	e58c3004 	str	r3, [ip, #4]
	if(status & XAXIDMA_IRQ_ERROR_MASK) {
 10011b8:	1a00000e 	bne	10011f8 <_acq_irq_rx_handler+0x88>
	if(status & XAXIDMA_IRQ_IOC_MASK) {
 10011bc:	e3110a01 	tst	r1, #4096	; 0x1000
 10011c0:	0a000006 	beq	10011e0 <_acq_irq_rx_handler+0x70>
		switch(g_acq_state.sub_state) {
 10011c4:	e5943004 	ldr	r3, [r4, #4]
 10011c8:	e3530002 	cmp	r3, #2
 10011cc:	0a0000a9 	beq	1001478 <_acq_irq_rx_handler+0x308>
 10011d0:	e3530003 	cmp	r3, #3
 10011d4:	0a000055 	beq	1001330 <_acq_irq_rx_handler+0x1c0>
 10011d8:	e3530001 	cmp	r3, #1
 10011dc:	0a000013 	beq	1001230 <_acq_irq_rx_handler+0xc0>
}
 10011e0:	e28dd010 	add	sp, sp, #16
 10011e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
					d_printf(D_ERROR, "acquire: PL reports not done, but DMA complete!");
 10011e8:	e3011d00 	movw	r1, #7424	; 0x1d00
 10011ec:	e3a00004 	mov	r0, #4
 10011f0:	e3401101 	movt	r1, #257	; 0x101
 10011f4:	eb0007c9 	bl	1003120 <d_printf>
	g_acq_state.stats.num_err_total++;
 10011f8:	e2842e7b 	add	r2, r4, #1968	; 0x7b0
 10011fc:	e5123008 	ldr	r3, [r2, #-8]
 1001200:	e5121004 	ldr	r1, [r2, #-4]
	g_acq_state.state = ACQSTATE_UNINIT;
 1001204:	e1a00004 	mov	r0, r4
 1001208:	e3a05000 	mov	r5, #0
 100120c:	e3a04000 	mov	r4, #0
	g_acq_state.stats.num_err_total++;
 1001210:	e2933001 	adds	r3, r3, #1
	g_acq_state.state = ACQSTATE_UNINIT;
 1001214:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 1001218:	e2a11000 	adc	r1, r1, #0
 100121c:	e5023008 	str	r3, [r2, #-8]
 1001220:	e5021004 	str	r1, [r2, #-4]
}
 1001224:	e28dd010 	add	sp, sp, #16
 1001228:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	XAxiDma_Reset(&g_acq_state.dma);
 100122c:	ea000a7a 	b	1003c1c <XAxiDma_Reset>
				error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)g_acq_state.acq_current->buff_acq, \
 1001230:	e594c854 	ldr	ip, [r4, #2132]	; 0x854
 1001234:	e3a01000 	mov	r1, #0
 1001238:	e1a02001 	mov	r2, r1
 100123c:	e3a05a0a 	mov	r5, #40960	; 0xa000
 1001240:	e34e5000 	movt	r5, #57344	; 0xe000
 1001244:	e34f1dff 	movt	r1, #65023	; 0xfdff
 1001248:	e34f2bff 	movt	r2, #64511	; 0xfbff
 100124c:	e5851010 	str	r1, [r5, #16]
 1001250:	e2840008 	add	r0, r4, #8
 1001254:	e5852010 	str	r2, [r5, #16]
 1001258:	e59c1008 	ldr	r1, [ip, #8]
 100125c:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1001260:	eb000c1f 	bl	10042e4 <XAxiDma_SimpleTransfer>
				if(error != XST_SUCCESS) {
 1001264:	e2506000 	subs	r6, r0, #0
 1001268:	1a000178 	bne	1001850 <_acq_irq_rx_handler+0x6e0>
	return *(volatile u32 *) Addr;
 100126c:	e5953068 	ldr	r3, [r5, #104]	; 0x68
				if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 1001270:	e3130a01 	tst	r3, #4096	; 0x1000
					g_acq_state.state = ACQSTATE_WAIT_TRIG;
 1001274:	03a02003 	moveq	r2, #3
 1001278:	03a03002 	moveq	r3, #2
 100127c:	01c420f0 	strdeq	r2, [r4]
				if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 1001280:	1a00014e 	bne	10017c0 <_acq_irq_rx_handler+0x650>
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 1001284:	e59f2670 	ldr	r2, [pc, #1648]	; 10018fc <_acq_irq_rx_handler+0x78c>
	*LocalAddr = Value;
 1001288:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100128c:	e3a00000 	mov	r0, #0
 1001290:	e3a01b01 	mov	r1, #1024	; 0x400
 1001294:	e34e3000 	movt	r3, #57344	; 0xe000
 1001298:	e34f0fdf 	movt	r0, #65503	; 0xffdf
 100129c:	e34f1bff 	movt	r1, #64511	; 0xfbff
 10012a0:	e5830010 	str	r0, [r3, #16]
 10012a4:	e5831010 	str	r1, [r3, #16]
 10012a8:	e3a06000 	mov	r6, #0
 10012ac:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
 10012b0:	e1a0e002 	mov	lr, r2
 10012b4:	e5921000 	ldr	r1, [r2]
				g_acq_state.stats.num_acq_total++;
 10012b8:	e242c020 	sub	ip, r2, #32
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 10012bc:	e5920004 	ldr	r0, [r2, #4]
 10012c0:	e0911003 	adds	r1, r1, r3
 10012c4:	e1a04001 	mov	r4, r1
 10012c8:	e0a01006 	adc	r1, r0, r6
 10012cc:	e1a05001 	mov	r5, r1
				g_acq_state.stats.num_pre_fill_total++;
 10012d0:	e2420010 	sub	r0, r2, #16
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 10012d4:	e0ce41f0 	strd	r4, [lr], #16
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 10012d8:	e91e0014 	ldmdb	lr, {r2, r4}
				g_acq_state.stats.num_acq_total++;
 10012dc:	e51c1008 	ldr	r1, [ip, #-8]
 10012e0:	e51c5004 	ldr	r5, [ip, #-4]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 10012e4:	e0923003 	adds	r3, r2, r3
				g_acq_state.stats.num_pre_total++;
 10012e8:	e59c2000 	ldr	r2, [ip]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 10012ec:	e0a46006 	adc	r6, r4, r6
 10012f0:	e50e3008 	str	r3, [lr, #-8]
				g_acq_state.stats.num_pre_total++;
 10012f4:	e59c4004 	ldr	r4, [ip, #4]
				g_acq_state.stats.num_acq_total++;
 10012f8:	e2911001 	adds	r1, r1, #1
				g_acq_state.stats.num_pre_fill_total++;
 10012fc:	e5103008 	ldr	r3, [r0, #-8]
				g_acq_state.stats.num_acq_total++;
 1001300:	e2a55000 	adc	r5, r5, #0
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1001304:	e50e6004 	str	r6, [lr, #-4]
				g_acq_state.stats.num_pre_total++;
 1001308:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_pre_fill_total++;
 100130c:	e510e004 	ldr	lr, [r0, #-4]
				g_acq_state.stats.num_pre_total++;
 1001310:	e2a44000 	adc	r4, r4, #0
				g_acq_state.stats.num_pre_fill_total++;
 1001314:	e2933001 	adds	r3, r3, #1
				g_acq_state.stats.num_acq_total++;
 1001318:	e90c0022 	stmdb	ip, {r1, r5}
				g_acq_state.stats.num_pre_total++;
 100131c:	e88c0014 	stm	ip, {r2, r4}
				g_acq_state.stats.num_pre_fill_total++;
 1001320:	e2ae1000 	adc	r1, lr, #0
 1001324:	e5003008 	str	r3, [r0, #-8]
 1001328:	e5001004 	str	r1, [r0, #-4]
				break;
 100132c:	eaffffab 	b	10011e0 <_acq_irq_rx_handler+0x70>
	return *(volatile u32 *) Addr;
 1001330:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001334:	e34e3000 	movt	r3, #57344	; 0xe000
 1001338:	e5931068 	ldr	r1, [r3, #104]	; 0x68
				if(!emio_fast_read(ACQ_EMIO_DONE)) {
 100133c:	e3110004 	tst	r1, #4
 1001340:	0affffa8 	beq	10011e8 <_acq_irq_rx_handler+0x78>
	*LocalAddr = Value;
 1001344:	e3a00000 	mov	r0, #0
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 1001348:	e5945854 	ldr	r5, [r4, #2132]	; 0x854
 100134c:	e1a01000 	mov	r1, r0
 1001350:	e3a0c020 	mov	ip, #32
 1001354:	e34fcfdf 	movt	ip, #65503	; 0xffdf
 1001358:	e34f0ffe 	movt	r0, #65534	; 0xfffe
 100135c:	e34f1bff 	movt	r1, #64511	; 0xfbff
 1001360:	e583c010 	str	ip, [r3, #16]
 1001364:	e5830010 	str	r0, [r3, #16]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 1001368:	e3a07000 	mov	r7, #0
 100136c:	e5831010 	str	r1, [r3, #16]
 1001370:	e284ed1f 	add	lr, r4, #1984	; 0x7c0
 1001374:	e59417b8 	ldr	r1, [r4, #1976]	; 0x7b8
 1001378:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100137c:	e1d5c1b0 	ldrh	ip, [r5, #16]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 1001380:	e59467bc 	ldr	r6, [r4, #1980]	; 0x7bc
 1001384:	e0911000 	adds	r1, r1, r0
 1001388:	e58417b8 	str	r1, [r4, #1976]	; 0x7b8
 100138c:	e0a66007 	adc	r6, r6, r7
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 1001390:	e31c0002 	tst	ip, #2
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 1001394:	e58467bc 	str	r6, [r4, #1980]	; 0x7bc
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 1001398:	e38cc001 	orr	ip, ip, #1
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 100139c:	e3a06004 	mov	r6, #4
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 10013a0:	e1c5c1b0 	strh	ip, [r5, #16]
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 10013a4:	e5846004 	str	r6, [r4, #4]
				g_acq_state.state = ACQSTATE_RUNNING;
 10013a8:	e5846000 	str	r6, [r4]
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 10013ac:	1a0000d1 	bne	10016f8 <_acq_irq_rx_handler+0x588>
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10013b0:	e2848e7b 	add	r8, r4, #1968	; 0x7b0
 10013b4:	e5983000 	ldr	r3, [r8]
					g_acq_state.num_acq_made++;
 10013b8:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10013bc:	e5981004 	ldr	r1, [r8, #4]
					if(g_acq_state.num_acq_made == g_acq_state.num_acq_request) {
 10013c0:	e594c770 	ldr	ip, [r4, #1904]	; 0x770
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10013c4:	e0930000 	adds	r0, r3, r0
					g_acq_state.num_acq_made++;
 10013c8:	e2822001 	add	r2, r2, #1
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10013cc:	e5880000 	str	r0, [r8]
 10013d0:	e0a17007 	adc	r7, r1, r7
					g_acq_state.num_acq_made++;
 10013d4:	e5842774 	str	r2, [r4, #1908]	; 0x774
					if(g_acq_state.num_acq_made == g_acq_state.num_acq_request) {
 10013d8:	e152000c 	cmp	r2, ip
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10013dc:	e5887004 	str	r7, [r8, #4]
						g_acq_state.state = ACQSTATE_DONE;
 10013e0:	03a02005 	moveq	r2, #5
 10013e4:	03a03005 	moveq	r3, #5
 10013e8:	01c420f0 	strdeq	r2, [r4]
					if(g_acq_state.num_acq_made == g_acq_state.num_acq_request) {
 10013ec:	0a000019 	beq	1001458 <_acq_irq_rx_handler+0x2e8>
						if(g_acq_state.acq_current->next != NULL) {
 10013f0:	e5953014 	ldr	r3, [r5, #20]
 10013f4:	e3530000 	cmp	r3, #0
 10013f8:	0a000012 	beq	1001448 <_acq_irq_rx_handler+0x2d8>
							g_acq_state.acq_current = g_acq_state.acq_current->next;
 10013fc:	e5843854 	str	r3, [r4, #2132]	; 0x854
							error = acq_start();
 1001400:	ebfffeee 	bl	1000fc0 <acq_start>
							if(error != ACQRES_OK) {
 1001404:	e2502000 	subs	r2, r0, #0
 1001408:	0a000012 	beq	1001458 <_acq_irq_rx_handler+0x2e8>
								d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 100140c:	e3011d64 	movw	r1, #7524	; 0x1d64
 1001410:	e1a00006 	mov	r0, r6
 1001414:	e3401101 	movt	r1, #257	; 0x101
	g_acq_state.state = ACQSTATE_UNINIT;
 1001418:	e3a05000 	mov	r5, #0
								d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 100141c:	eb00073f 	bl	1003120 <d_printf>
	g_acq_state.stats.num_err_total++;
 1001420:	e5183008 	ldr	r3, [r8, #-8]
	g_acq_state.state = ACQSTATE_UNINIT;
 1001424:	e1a00004 	mov	r0, r4
	g_acq_state.stats.num_err_total++;
 1001428:	e5182004 	ldr	r2, [r8, #-4]
	g_acq_state.state = ACQSTATE_UNINIT;
 100142c:	e3a04000 	mov	r4, #0
 1001430:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 1001434:	e2933001 	adds	r3, r3, #1
 1001438:	e2a22000 	adc	r2, r2, #0
 100143c:	e5083008 	str	r3, [r8, #-8]
 1001440:	e5082004 	str	r2, [r8, #-4]
 1001444:	eaffff76 	b	1001224 <_acq_irq_rx_handler+0xb4>
							d_printf(D_ERROR, "acquire: NULL deref trying to move to next wavebuffer; something's wrong!");
 1001448:	e3011d98 	movw	r1, #7576	; 0x1d98
 100144c:	e1a00006 	mov	r0, r6
 1001450:	e3401101 	movt	r1, #257	; 0x101
 1001454:	eb000731 	bl	1003120 <d_printf>
				g_acq_state.stats.num_post_total++;
 1001458:	e59f24a0 	ldr	r2, [pc, #1184]	; 1001900 <_acq_irq_rx_handler+0x790>
 100145c:	e5923000 	ldr	r3, [r2]
 1001460:	e5921004 	ldr	r1, [r2, #4]
 1001464:	e2933001 	adds	r3, r3, #1
 1001468:	e2a11000 	adc	r1, r1, #0
 100146c:	e5823000 	str	r3, [r2]
 1001470:	e5821004 	str	r1, [r2, #4]
				break;
 1001474:	eaffff59 	b	10011e0 <_acq_irq_rx_handler+0x70>
	return *(volatile u32 *) Addr;
 1001478:	e3a05a0a 	mov	r5, #40960	; 0xa000
 100147c:	e34e5000 	movt	r5, #57344	; 0xe000
 1001480:	e5953068 	ldr	r3, [r5, #104]	; 0x68
				if(emio_fast_read(ACQ_EMIO_HAVE_TRIG)) {
 1001484:	e3130080 	tst	r3, #128	; 0x80
 1001488:	1a000061 	bne	1001614 <_acq_irq_rx_handler+0x4a4>
	*LocalAddr = Value;
 100148c:	e3a03000 	mov	r3, #0
	return *(volatile u32 *) Addr;
 1001490:	e1a02005 	mov	r2, r5
	*LocalAddr = Value;
 1001494:	e34f3bff 	movt	r3, #64511	; 0xfbff
 1001498:	e5853010 	str	r3, [r5, #16]
	return *(volatile u32 *) Addr;
 100149c:	e5923068 	ldr	r3, [r2, #104]	; 0x68
	while(emio_fast_read(ACQ_EMIO_DONE)) ;
 10014a0:	e2133004 	ands	r3, r3, #4
 10014a4:	1afffffc 	bne	100149c <_acq_irq_rx_handler+0x32c>
 10014a8:	e5921068 	ldr	r1, [r2, #104]	; 0x68
					if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 10014ac:	e3110a01 	tst	r1, #4096	; 0x1000
 10014b0:	1a000032 	bne	1001580 <_acq_irq_rx_handler+0x410>
 10014b4:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, g_acq_state.acq_current->buff_acq, \
 10014b8:	e5931008 	ldr	r1, [r3, #8]
 10014bc:	e3a03001 	mov	r3, #1
 10014c0:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 10014c4:	e59f0438 	ldr	r0, [pc, #1080]	; 1001904 <_acq_irq_rx_handler+0x794>
 10014c8:	eb000b85 	bl	10042e4 <XAxiDma_SimpleTransfer>
					if(error != XST_SUCCESS) {
 10014cc:	e2505000 	subs	r5, r0, #0
 10014d0:	1a0000f1 	bne	100189c <_acq_irq_rx_handler+0x72c>
	*LocalAddr = Value;
 10014d4:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10014d8:	e3a01c01 	mov	r1, #256	; 0x100
 10014dc:	e34e3000 	movt	r3, #57344	; 0xe000
 10014e0:	e34f1eff 	movt	r1, #65279	; 0xfeff
 10014e4:	e5831010 	str	r1, [r3, #16]
	for(i = 0; i < 10; i++) {
 10014e8:	e58d5000 	str	r5, [sp]
 10014ec:	e59d3000 	ldr	r3, [sp]
 10014f0:	e3530009 	cmp	r3, #9
 10014f4:	ca000006 	bgt	1001514 <_acq_irq_rx_handler+0x3a4>
		asm __volatile__("nop");
 10014f8:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 10014fc:	e59d3000 	ldr	r3, [sp]
 1001500:	e2833001 	add	r3, r3, #1
 1001504:	e58d3000 	str	r3, [sp]
 1001508:	e59d3000 	ldr	r3, [sp]
 100150c:	e3530009 	cmp	r3, #9
 1001510:	dafffff8 	ble	10014f8 <_acq_irq_rx_handler+0x388>
					g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1001514:	e59f13ec 	ldr	r1, [pc, #1004]	; 1001908 <_acq_irq_rx_handler+0x798>
 1001518:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100151c:	e3a00000 	mov	r0, #0
 1001520:	e3a02b01 	mov	r2, #1024	; 0x400
 1001524:	e34e3000 	movt	r3, #57344	; 0xe000
 1001528:	e34f0eff 	movt	r0, #65279	; 0xfeff
 100152c:	e34f2bff 	movt	r2, #64511	; 0xfbff
 1001530:	e5830010 	str	r0, [r3, #16]
 1001534:	e5832010 	str	r2, [r3, #16]
 1001538:	e14120d8 	ldrd	r2, [r1, #-8]
 100153c:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
 1001540:	e0924000 	adds	r4, r2, r0
 1001544:	e2a35000 	adc	r5, r3, #0
 1001548:	e14140f8 	strd	r4, [r1, #-8]
				g_acq_state.stats.num_acq_total++;
 100154c:	e59f33b8 	ldr	r3, [pc, #952]	; 100190c <_acq_irq_rx_handler+0x79c>
 1001550:	e9131002 	ldmdb	r3, {r1, ip}
				g_acq_state.stats.num_pre_total++;
 1001554:	e5932000 	ldr	r2, [r3]
 1001558:	e5930004 	ldr	r0, [r3, #4]
				g_acq_state.stats.num_acq_total++;
 100155c:	e2911001 	adds	r1, r1, #1
 1001560:	e2acc000 	adc	ip, ip, #0
				g_acq_state.stats.num_pre_total++;
 1001564:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 1001568:	e5031008 	str	r1, [r3, #-8]
				g_acq_state.stats.num_pre_total++;
 100156c:	e2a01000 	adc	r1, r0, #0
				g_acq_state.stats.num_acq_total++;
 1001570:	e503c004 	str	ip, [r3, #-4]
				g_acq_state.stats.num_pre_total++;
 1001574:	e5832000 	str	r2, [r3]
 1001578:	e5831004 	str	r1, [r3, #4]
				break;
 100157c:	eaffff17 	b	10011e0 <_acq_irq_rx_handler+0x70>
 1001580:	e3a01040 	mov	r1, #64	; 0x40
 1001584:	e34f1fbf 	movt	r1, #65471	; 0xffbf
 1001588:	e5821010 	str	r1, [r2, #16]
	for(i = 0; i < 20; i++) {
 100158c:	e58d3008 	str	r3, [sp, #8]
 1001590:	e59d3008 	ldr	r3, [sp, #8]
 1001594:	e3530013 	cmp	r3, #19
 1001598:	ca000006 	bgt	10015b8 <_acq_irq_rx_handler+0x448>
		asm __volatile__("nop");
 100159c:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 10015a0:	e59d3008 	ldr	r3, [sp, #8]
 10015a4:	e2833001 	add	r3, r3, #1
 10015a8:	e58d3008 	str	r3, [sp, #8]
 10015ac:	e59d3008 	ldr	r3, [sp, #8]
 10015b0:	e3530013 	cmp	r3, #19
 10015b4:	dafffff8 	ble	100159c <_acq_irq_rx_handler+0x42c>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 10015b8:	e59f5350 	ldr	r5, [pc, #848]	; 1001910 <_acq_irq_rx_handler+0x7a0>
 10015bc:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10015c0:	e3a02000 	mov	r2, #0
 10015c4:	e34e3000 	movt	r3, #57344	; 0xe000
 10015c8:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 10015cc:	e5832010 	str	r2, [r3, #16]
 10015d0:	e3a01042 	mov	r1, #66	; 0x42
 10015d4:	e1a00005 	mov	r0, r5
 10015d8:	eb0010bd 	bl	10058d4 <XGpioPs_ReadPin>
 10015dc:	e3500000 	cmp	r0, #0
 10015e0:	1afffffa 	bne	10015d0 <_acq_irq_rx_handler+0x460>
						g_acq_state.stats.num_fifo_full++;
 10015e4:	e59f1328 	ldr	r1, [pc, #808]	; 1001914 <_acq_irq_rx_handler+0x7a4>
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10015e8:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
						g_acq_state.stats.num_fifo_full++;
 10015ec:	e5112008 	ldr	r2, [r1, #-8]
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10015f0:	e1d3c1b0 	ldrh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 10015f4:	e5110004 	ldr	r0, [r1, #-4]
 10015f8:	e2922001 	adds	r2, r2, #1
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10015fc:	e38cc002 	orr	ip, ip, #2
						g_acq_state.stats.num_fifo_full++;
 1001600:	e2a00000 	adc	r0, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001604:	e1c3c1b0 	strh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 1001608:	e5012008 	str	r2, [r1, #-8]
 100160c:	e5010004 	str	r0, [r1, #-4]
 1001610:	eaffffa8 	b	10014b8 <_acq_irq_rx_handler+0x348>
 1001614:	e3a02c02 	mov	r2, #512	; 0x200
 1001618:	e3a03000 	mov	r3, #0
 100161c:	e34f3bff 	movt	r3, #64511	; 0xfbff
 1001620:	e34f2dff 	movt	r2, #65023	; 0xfdff
 1001624:	e5852010 	str	r2, [r5, #16]
 1001628:	e5853010 	str	r3, [r5, #16]
					fabcfg_fastcfg_start();
 100162c:	eb000512 	bl	1002a7c <fabcfg_fastcfg_start>
	return *(volatile u32 *) Addr;
 1001630:	e5953068 	ldr	r3, [r5, #104]	; 0x68
					if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 1001634:	e3130a01 	tst	r3, #4096	; 0x1000
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001638:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
					if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 100163c:	0a000008 	beq	1001664 <_acq_irq_rx_handler+0x4f4>
						g_acq_state.stats.num_fifo_full++;
 1001640:	e59427d8 	ldr	r2, [r4, #2008]	; 0x7d8
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001644:	e1d3c1b0 	ldrh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 1001648:	e59407dc 	ldr	r0, [r4, #2012]	; 0x7dc
 100164c:	e2922001 	adds	r2, r2, #1
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001650:	e38cc002 	orr	ip, ip, #2
						g_acq_state.stats.num_fifo_full++;
 1001654:	e2a00000 	adc	r0, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001658:	e1c3c1b0 	strh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 100165c:	e58427d8 	str	r2, [r4, #2008]	; 0x7d8
 1001660:	e58407dc 	str	r0, [r4, #2012]	; 0x7dc
					addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 1001664:	e593c008 	ldr	ip, [r3, #8]
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, addr, \
 1001668:	e3a03001 	mov	r3, #1
					addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 100166c:	e5941760 	ldr	r1, [r4, #1888]	; 0x760
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, addr, \
 1001670:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 1001674:	e59f0288 	ldr	r0, [pc, #648]	; 1001904 <_acq_irq_rx_handler+0x794>
 1001678:	e08c1001 	add	r1, ip, r1
 100167c:	eb000b18 	bl	10042e4 <XAxiDma_SimpleTransfer>
					if(error != XST_SUCCESS) {
 1001680:	e2505000 	subs	r5, r0, #0
 1001684:	1a000092 	bne	10018d4 <_acq_irq_rx_handler+0x764>
					fabcfg_fastcfg_wait();
 1001688:	eb000515 	bl	1002ae4 <fabcfg_fastcfg_wait>
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 100168c:	e3a00007 	mov	r0, #7
 1001690:	e5945854 	ldr	r5, [r4, #2132]	; 0x854
 1001694:	eb0004c5 	bl	10029b0 <fabcfg_read>
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 1001698:	e594c854 	ldr	ip, [r4, #2132]	; 0x854
	*LocalAddr = Value;
 100169c:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10016a0:	e59f1260 	ldr	r1, [pc, #608]	; 1001908 <_acq_irq_rx_handler+0x798>
 10016a4:	e3a02b01 	mov	r2, #1024	; 0x400
 10016a8:	e34e3000 	movt	r3, #57344	; 0xe000
 10016ac:	e34f2bff 	movt	r2, #64511	; 0xfbff
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 10016b0:	e585000c 	str	r0, [r5, #12]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10016b4:	e3a05000 	mov	r5, #0
 10016b8:	e5832010 	str	r2, [r3, #16]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 10016bc:	e1a00001 	mov	r0, r1
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10016c0:	e59c300c 	ldr	r3, [ip, #12]
					g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 10016c4:	e3a0c003 	mov	ip, #3
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10016c8:	e9114004 	ldmdb	r1, {r2, lr}
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 10016cc:	e16061d0 	ldrd	r6, [r0, #-16]!
					g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 10016d0:	e584c004 	str	ip, [r4, #4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10016d4:	e0922003 	adds	r2, r2, r3
 10016d8:	e0aee005 	adc	lr, lr, r5
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 10016dc:	e0963003 	adds	r3, r6, r3
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10016e0:	e5012008 	str	r2, [r1, #-8]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 10016e4:	e0a72005 	adc	r2, r7, r5
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10016e8:	e501e004 	str	lr, [r1, #-4]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 10016ec:	e5803000 	str	r3, [r0]
 10016f0:	e5802004 	str	r2, [r0, #4]
 10016f4:	eaffff94 	b	100154c <_acq_irq_rx_handler+0x3dc>
					g_acq_state.stats.num_fifo_pkt_dscd++;
 10016f8:	e59417e0 	ldr	r1, [r4, #2016]	; 0x7e0
 10016fc:	e3a0e040 	mov	lr, #64	; 0x40
 1001700:	e594c7e4 	ldr	ip, [r4, #2020]	; 0x7e4
 1001704:	e34fefbf 	movt	lr, #65471	; 0xffbf
 1001708:	e2911001 	adds	r1, r1, #1
 100170c:	e0acc007 	adc	ip, ip, r7
 1001710:	e58417e0 	str	r1, [r4, #2016]	; 0x7e0
 1001714:	e584c7e4 	str	ip, [r4, #2020]	; 0x7e4
 1001718:	e583e010 	str	lr, [r3, #16]
	for(i = 0; i < 20; i++) {
 100171c:	e58d200c 	str	r2, [sp, #12]
 1001720:	e59d300c 	ldr	r3, [sp, #12]
 1001724:	e3530013 	cmp	r3, #19
 1001728:	ca000006 	bgt	1001748 <_acq_irq_rx_handler+0x5d8>
		asm __volatile__("nop");
 100172c:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 1001730:	e59d300c 	ldr	r3, [sp, #12]
 1001734:	e2833001 	add	r3, r3, #1
 1001738:	e58d300c 	str	r3, [sp, #12]
 100173c:	e59d300c 	ldr	r3, [sp, #12]
 1001740:	e3530013 	cmp	r3, #19
 1001744:	dafffff8 	ble	100172c <_acq_irq_rx_handler+0x5bc>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 1001748:	e59f51c0 	ldr	r5, [pc, #448]	; 1001910 <_acq_irq_rx_handler+0x7a0>
 100174c:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001750:	e3a02000 	mov	r2, #0
 1001754:	e34e3000 	movt	r3, #57344	; 0xe000
 1001758:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 100175c:	e5832010 	str	r2, [r3, #16]
 1001760:	e3a01042 	mov	r1, #66	; 0x42
 1001764:	e1a00005 	mov	r0, r5
 1001768:	eb001059 	bl	10058d4 <XGpioPs_ReadPin>
 100176c:	e3500000 	cmp	r0, #0
 1001770:	1afffffa 	bne	1001760 <_acq_irq_rx_handler+0x5f0>
					error = acq_start();
 1001774:	ebfffe11 	bl	1000fc0 <acq_start>
					if(error != ACQRES_OK) {
 1001778:	e2502000 	subs	r2, r0, #0
 100177c:	0affff35 	beq	1001458 <_acq_irq_rx_handler+0x2e8>
						d_printf(D_ERROR, "acquire: unable to reset current transfer, error %d", error);
 1001780:	e3011d30 	movw	r1, #7472	; 0x1d30
 1001784:	e3a00004 	mov	r0, #4
 1001788:	e3401101 	movt	r1, #257	; 0x101
 100178c:	eb000663 	bl	1003120 <d_printf>
	g_acq_state.stats.num_err_total++;
 1001790:	e59f2164 	ldr	r2, [pc, #356]	; 10018fc <_acq_irq_rx_handler+0x78c>
	g_acq_state.state = ACQSTATE_UNINIT;
 1001794:	e3a00000 	mov	r0, #0
 1001798:	e3a01000 	mov	r1, #0
 100179c:	e1c400f0 	strd	r0, [r4]
	g_acq_state.stats.num_err_total++;
 10017a0:	e5123008 	ldr	r3, [r2, #-8]
 10017a4:	e5121004 	ldr	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 10017a8:	e59f0154 	ldr	r0, [pc, #340]	; 1001904 <_acq_irq_rx_handler+0x794>
	g_acq_state.stats.num_err_total++;
 10017ac:	e2933001 	adds	r3, r3, #1
 10017b0:	e2a11000 	adc	r1, r1, #0
 10017b4:	e5023008 	str	r3, [r2, #-8]
 10017b8:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 10017bc:	eafffe98 	b	1001224 <_acq_irq_rx_handler+0xb4>
 10017c0:	e3a03040 	mov	r3, #64	; 0x40
 10017c4:	e34f3fbf 	movt	r3, #65471	; 0xffbf
 10017c8:	e5853010 	str	r3, [r5, #16]
	for(i = 0; i < 20; i++) {
 10017cc:	e58d6004 	str	r6, [sp, #4]
 10017d0:	e59d3004 	ldr	r3, [sp, #4]
 10017d4:	e3530013 	cmp	r3, #19
 10017d8:	ca000006 	bgt	10017f8 <_acq_irq_rx_handler+0x688>
		asm __volatile__("nop");
 10017dc:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 10017e0:	e59d3004 	ldr	r3, [sp, #4]
 10017e4:	e2833001 	add	r3, r3, #1
 10017e8:	e58d3004 	str	r3, [sp, #4]
 10017ec:	e59d3004 	ldr	r3, [sp, #4]
 10017f0:	e3530013 	cmp	r3, #19
 10017f4:	dafffff8 	ble	10017dc <_acq_irq_rx_handler+0x66c>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 10017f8:	e59f5110 	ldr	r5, [pc, #272]	; 1001910 <_acq_irq_rx_handler+0x7a0>
 10017fc:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001800:	e3a02000 	mov	r2, #0
 1001804:	e34e3000 	movt	r3, #57344	; 0xe000
 1001808:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 100180c:	e5832010 	str	r2, [r3, #16]
 1001810:	e3a01042 	mov	r1, #66	; 0x42
 1001814:	e1a00005 	mov	r0, r5
 1001818:	eb00102d 	bl	10058d4 <XGpioPs_ReadPin>
 100181c:	e3500000 	cmp	r0, #0
 1001820:	1afffffa 	bne	1001810 <_acq_irq_rx_handler+0x6a0>
					g_acq_state.stats.num_fifo_full++;
 1001824:	e59f20e8 	ldr	r2, [pc, #232]	; 1001914 <_acq_irq_rx_handler+0x7a4>
					g_acq_state.state = ACQSTATE_PREP;
 1001828:	e3a01001 	mov	r1, #1
 100182c:	e3a00002 	mov	r0, #2
 1001830:	e1c400f0 	strd	r0, [r4]
					g_acq_state.stats.num_fifo_full++;
 1001834:	e5123008 	ldr	r3, [r2, #-8]
 1001838:	e5121004 	ldr	r1, [r2, #-4]
 100183c:	e2933001 	adds	r3, r3, #1
 1001840:	e2a11000 	adc	r1, r1, #0
 1001844:	e5023008 	str	r3, [r2, #-8]
 1001848:	e5021004 	str	r1, [r2, #-4]
 100184c:	eafffe8c 	b	1001284 <_acq_irq_rx_handler+0x114>
	g_acq_state.stats.num_err_total++;
 1001850:	e2842e7b 	add	r2, r4, #1968	; 0x7b0
 1001854:	e59437a8 	ldr	r3, [r4, #1960]	; 0x7a8
 1001858:	e5121004 	ldr	r1, [r2, #-4]
	g_acq_state.state = ACQSTATE_UNINIT;
 100185c:	e1a00004 	mov	r0, r4
 1001860:	e3a05000 	mov	r5, #0
 1001864:	e3a04000 	mov	r4, #0
	g_acq_state.stats.num_err_total++;
 1001868:	e2933001 	adds	r3, r3, #1
	g_acq_state.state = ACQSTATE_UNINIT;
 100186c:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 1001870:	e2a11000 	adc	r1, r1, #0
 1001874:	e5023008 	str	r3, [r2, #-8]
 1001878:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 100187c:	eb0008e6 	bl	1003c1c <XAxiDma_Reset>
					d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001880:	e1a02006 	mov	r2, r6
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001884:	e3011ccc 	movw	r1, #7372	; 0x1ccc
 1001888:	e3a00004 	mov	r0, #4
 100188c:	e3401101 	movt	r1, #257	; 0x101
}
 1001890:	e28dd010 	add	sp, sp, #16
 1001894:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001898:	ea000620 	b	1003120 <d_printf>
	g_acq_state.stats.num_err_total++;
 100189c:	e59f2058 	ldr	r2, [pc, #88]	; 10018fc <_acq_irq_rx_handler+0x78c>
	g_acq_state.state = ACQSTATE_UNINIT;
 10018a0:	e3a00000 	mov	r0, #0
 10018a4:	e3a01000 	mov	r1, #0
 10018a8:	e1c400f0 	strd	r0, [r4]
	g_acq_state.stats.num_err_total++;
 10018ac:	e5123008 	ldr	r3, [r2, #-8]
 10018b0:	e5121004 	ldr	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 10018b4:	e59f0048 	ldr	r0, [pc, #72]	; 1001904 <_acq_irq_rx_handler+0x794>
	g_acq_state.stats.num_err_total++;
 10018b8:	e2933001 	adds	r3, r3, #1
 10018bc:	e2a11000 	adc	r1, r1, #0
 10018c0:	e5023008 	str	r3, [r2, #-8]
 10018c4:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 10018c8:	eb0008d3 	bl	1003c1c <XAxiDma_Reset>
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 10018cc:	e1a02005 	mov	r2, r5
 10018d0:	eaffffeb 	b	1001884 <_acq_irq_rx_handler+0x714>
	g_acq_state.stats.num_err_total++;
 10018d4:	e59f1020 	ldr	r1, [pc, #32]	; 10018fc <_acq_irq_rx_handler+0x78c>
	g_acq_state.state = ACQSTATE_UNINIT;
 10018d8:	e3a03000 	mov	r3, #0
 10018dc:	e3a02000 	mov	r2, #0
	XAxiDma_Reset(&g_acq_state.dma);
 10018e0:	e59f001c 	ldr	r0, [pc, #28]	; 1001904 <_acq_irq_rx_handler+0x794>
	g_acq_state.state = ACQSTATE_UNINIT;
 10018e4:	e1c420f0 	strd	r2, [r4]
	g_acq_state.stats.num_err_total++;
 10018e8:	e9111008 	ldmdb	r1, {r3, ip}
 10018ec:	e2933001 	adds	r3, r3, #1
 10018f0:	e2acc000 	adc	ip, ip, #0
 10018f4:	e9011008 	stmdb	r1, {r3, ip}
 10018f8:	eafffff2 	b	10018c8 <_acq_irq_rx_handler+0x758>
 10018fc:	01019a70 	.word	0x01019a70
 1001900:	01019a60 	.word	0x01019a60
 1001904:	010192c8 	.word	0x010192c8
 1001908:	01019a80 	.word	0x01019a80
 100190c:	01019a50 	.word	0x01019a50
 1001910:	01019b3c 	.word	0x01019b3c
 1001914:	01019aa0 	.word	0x01019aa0

01001918 <acq_is_done>:
/*
 * Returns TRUE if the requested acquisition is complete.
 */
bool acq_is_done()
{
	return (g_acq_state.state == ACQSTATE_DONE);
 1001918:	e30932c0 	movw	r3, #37568	; 0x92c0
 100191c:	e3403101 	movt	r3, #257	; 0x101
 1001920:	e5930000 	ldr	r0, [r3]
}
 1001924:	e2400005 	sub	r0, r0, #5
 1001928:	e16f0f10 	clz	r0, r0
 100192c:	e1a002a0 	lsr	r0, r0, #5
 1001930:	e12fff1e 	bx	lr

01001934 <acq_force_stop>:
 *
 * @return	ACQRES_DMA_FAIL if DMA task could not be stopped;
 * 			ACQRES_SUCCESS if stop signal sent.
 */
int acq_force_stop()
{
 1001934:	e92d4070 	push	{r4, r5, r6, lr}
	int error;

	error = XAxiDma_Pause(&g_acq_state.dma);
 1001938:	e59f505c 	ldr	r5, [pc, #92]	; 100199c <acq_force_stop+0x68>
 100193c:	e1a00005 	mov	r0, r5
 1001940:	eb00099a 	bl	1003fb0 <XAxiDma_Pause>

	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);		// AXI bus activity stopped
 1001944:	e3a02000 	mov	r2, #0
	error = XAxiDma_Pause(&g_acq_state.dma);
 1001948:	e1a04000 	mov	r4, r0
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);		// AXI bus activity stopped
 100194c:	e3a01040 	mov	r1, #64	; 0x40
 1001950:	e59f0048 	ldr	r0, [pc, #72]	; 10019a0 <acq_force_stop+0x6c>
 1001954:	eb001017 	bl	10059b8 <XGpioPs_WritePin>

	if(error != XST_SUCCESS) {
 1001958:	e3540000 	cmp	r4, #0
 100195c:	1a000007 	bne	1001980 <acq_force_stop+0x4c>
		d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
		return ACQRES_DMA_FAIL;
	}

	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);
 1001960:	e3a02001 	mov	r2, #1
 1001964:	e3a01037 	mov	r1, #55	; 0x37
 1001968:	e59f0030 	ldr	r0, [pc, #48]	; 10019a0 <acq_force_stop+0x6c>
 100196c:	eb001011 	bl	10059b8 <XGpioPs_WritePin>
	g_acq_state.state = ACQSTATE_STOPPED;
 1001970:	e3a03001 	mov	r3, #1
 1001974:	e5053008 	str	r3, [r5, #-8]

	return ACQRES_OK;
}
 1001978:	e1a00004 	mov	r0, r4
 100197c:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1001980:	e3011ca0 	movw	r1, #7328	; 0x1ca0
 1001984:	e1a02004 	mov	r2, r4
 1001988:	e3401101 	movt	r1, #257	; 0x101
 100198c:	e3a00004 	mov	r0, #4
 1001990:	eb0005e2 	bl	1003120 <d_printf>
		return ACQRES_DMA_FAIL;
 1001994:	e3e04004 	mvn	r4, #4
 1001998:	eafffff6 	b	1001978 <acq_force_stop+0x44>
 100199c:	010192c8 	.word	0x010192c8
 10019a0:	01019b3c 	.word	0x01019b3c

010019a4 <acq_debug_dump>:

/*
 * Dump state of acquire engine for debugging purposes.
 */
void acq_debug_dump()
{
 10019a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t sample_delta;
	uint32_t msb, lsb;
	float time_delta_us, acq_rate = NAN, sample_rate = NAN;

	// Calculate acquisition rate if last debug timer is set
	if(g_acq_state.last_debug_timer != 0) {
 10019a8:	e30942c0 	movw	r4, #37568	; 0x92c0
 10019ac:	e3404101 	movt	r4, #257	; 0x101
{
 10019b0:	ed2d8b02 	vpush	{d8}
	if(g_acq_state.last_debug_timer != 0) {
 10019b4:	e2845e7f 	add	r5, r4, #2032	; 0x7f0
{
 10019b8:	e24dde76 	sub	sp, sp, #1888	; 0x760
	if(g_acq_state.last_debug_timer != 0) {
 10019bc:	e14500d8 	ldrd	r0, [r5, #-8]
{
 10019c0:	e24dd00c 	sub	sp, sp, #12
	void *sp = NULL;  // approximately the stack
 10019c4:	e3a03000 	mov	r3, #0
 10019c8:	e58d375c 	str	r3, [sp, #1884]	; 0x75c
	if(g_acq_state.last_debug_timer != 0) {
 10019cc:	e1902001 	orrs	r2, r0, r1
 10019d0:	1a0000f0 	bne	1001d98 <acq_debug_dump+0x3f4>
 10019d4:	e284be79 	add	fp, r4, #1936	; 0x790
 10019d8:	e284ad1f 	add	sl, r4, #1984	; 0x7c0
 10019dc:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 10019e0:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
			}
		}
	}

	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **", &g_acq_state);
 10019e4:	e30922c0 	movw	r2, #37568	; 0x92c0
 10019e8:	e3011de4 	movw	r1, #7652	; 0x1de4
 10019ec:	e3402101 	movt	r2, #257	; 0x101
 10019f0:	e3401101 	movt	r1, #257	; 0x101
 10019f4:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "");
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts", (void*)&sp);
	d_printf(D_INFO, "");
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x", g_acq_state.acq_mode_flags);
	d_printf(D_INFO, "state                 = %d [%s]", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 10019f8:	e303703c 	movw	r7, #12348	; 0x303c
	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **", &g_acq_state);
 10019fc:	eb0005c7 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001a00:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001a04:	e3a00002 	mov	r0, #2
 1001a08:	e3401101 	movt	r1, #257	; 0x101
	d_printf(D_INFO, "state                 = %d [%s]", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 1001a0c:	e3407101 	movt	r7, #257	; 0x101
	d_printf(D_INFO, "");
 1001a10:	eb0005c2 	bl	1003120 <d_printf>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts", (void*)&sp);
 1001a14:	e28d2e75 	add	r2, sp, #1872	; 0x750
 1001a18:	e3011e14 	movw	r1, #7700	; 0x1e14
 1001a1c:	e282200c 	add	r2, r2, #12
 1001a20:	e3401101 	movt	r1, #257	; 0x101
 1001a24:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "sub_state             = %d [%s]", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
	d_printf(D_INFO, "acq_current           = 0x%08x", g_acq_state.acq_current);
	d_printf(D_INFO, "acq_first             = 0x%08x", g_acq_state.acq_first);
	d_printf(D_INFO, "dma                   = 0x%08x", g_acq_state.dma);
 1001a28:	e59f64c0 	ldr	r6, [pc, #1216]	; 1001ef0 <acq_debug_dump+0x54c>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts", (void*)&sp);
 1001a2c:	eb0005bb 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001a30:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001a34:	e3a00002 	mov	r0, #2
 1001a38:	e3401101 	movt	r1, #257	; 0x101
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
	d_printf(D_INFO, "");
	d_printf(D_INFO, "s.num_acq_total       = %llu", g_acq_state.stats.num_acq_total);
	d_printf(D_INFO, "s.num_alloc_err_total = %llu", g_acq_state.stats.num_alloc_err_total);
	d_printf(D_INFO, "s.num_alloc_total     = %llu", g_acq_state.stats.num_alloc_total);
	d_printf(D_INFO, "s.num_err_total       = %llu", g_acq_state.stats.num_err_total);
 1001a3c:	e59f84b0 	ldr	r8, [pc, #1200]	; 1001ef4 <acq_debug_dump+0x550>
	d_printf(D_INFO, "");
 1001a40:	eb0005b6 	bl	1003120 <d_printf>
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x", g_acq_state.acq_mode_flags);
 1001a44:	e3011e44 	movw	r1, #7748	; 0x1e44
 1001a48:	e594275c 	ldr	r2, [r4, #1884]	; 0x75c
 1001a4c:	e3401101 	movt	r1, #257	; 0x101
 1001a50:	e3a00002 	mov	r0, #2
 1001a54:	eb0005b1 	bl	1003120 <d_printf>
	d_printf(D_INFO, "state                 = %d [%s]", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 1001a58:	e5942000 	ldr	r2, [r4]
 1001a5c:	e3011e64 	movw	r1, #7780	; 0x1e64
 1001a60:	e3401101 	movt	r1, #257	; 0x101
 1001a64:	e3a00002 	mov	r0, #2
 1001a68:	e7973102 	ldr	r3, [r7, r2, lsl #2]
 1001a6c:	eb0005ab 	bl	1003120 <d_printf>
	d_printf(D_INFO, "sub_state             = %d [%s]", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
 1001a70:	e5943004 	ldr	r3, [r4, #4]
 1001a74:	e3a00002 	mov	r0, #2
 1001a78:	e3011e84 	movw	r1, #7812	; 0x1e84
 1001a7c:	e3401101 	movt	r1, #257	; 0x101
 1001a80:	e1a02003 	mov	r2, r3
 1001a84:	e0877013 	add	r7, r7, r3, lsl r0
 1001a88:	e5973018 	ldr	r3, [r7, #24]
 1001a8c:	eb0005a3 	bl	1003120 <d_printf>
	d_printf(D_INFO, "acq_current           = 0x%08x", g_acq_state.acq_current);
 1001a90:	e3011ea4 	movw	r1, #7844	; 0x1ea4
 1001a94:	e5942854 	ldr	r2, [r4, #2132]	; 0x854
 1001a98:	e3401101 	movt	r1, #257	; 0x101
 1001a9c:	e3a00002 	mov	r0, #2
 1001aa0:	eb00059e 	bl	1003120 <d_printf>
	d_printf(D_INFO, "acq_first             = 0x%08x", g_acq_state.acq_first);
 1001aa4:	e3011ec4 	movw	r1, #7876	; 0x1ec4
 1001aa8:	e5942850 	ldr	r2, [r4, #2128]	; 0x850
 1001aac:	e3401101 	movt	r1, #257	; 0x101
 1001ab0:	e3a00002 	mov	r0, #2
 1001ab4:	eb000599 	bl	1003120 <d_printf>
	d_printf(D_INFO, "dma                   = 0x%08x", g_acq_state.dma);
 1001ab8:	e2861008 	add	r1, r6, #8
 1001abc:	e3002748 	movw	r2, #1864	; 0x748
 1001ac0:	e1a0000d 	mov	r0, sp
 1001ac4:	eb0025bd 	bl	100b1c0 <memcpy>
 1001ac8:	e3011ee4 	movw	r1, #7908	; 0x1ee4
 1001acc:	e896000c 	ldm	r6, {r2, r3}
 1001ad0:	e3401101 	movt	r1, #257	; 0x101
 1001ad4:	e3a00002 	mov	r0, #2
 1001ad8:	eb000590 	bl	1003120 <d_printf>
	d_printf(D_INFO, "dma_config            = 0x%08x", g_acq_state.dma_config);
 1001adc:	e3011f04 	movw	r1, #7940	; 0x1f04
 1001ae0:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
 1001ae4:	e3401101 	movt	r1, #257	; 0x101
 1001ae8:	e3a00002 	mov	r0, #2
 1001aec:	eb00058b 	bl	1003120 <d_printf>
	d_printf(D_INFO, "demux_reg             = 0x%02x", g_acq_state.demux_reg);
 1001af0:	e3011f24 	movw	r1, #7972	; 0x1f24
 1001af4:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
 1001af8:	e3401101 	movt	r1, #257	; 0x101
 1001afc:	e3a00002 	mov	r0, #2
 1001b00:	eb000586 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001b04:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001b08:	e3a00002 	mov	r0, #2
 1001b0c:	e3401101 	movt	r1, #257	; 0x101
 1001b10:	eb000582 	bl	1003120 <d_printf>
	d_printf(D_INFO, "pre_buffsz            = %d bytes (0x%08x)", g_acq_state.pre_buffsz, g_acq_state.pre_buffsz);
 1001b14:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
 1001b18:	e3011f44 	movw	r1, #8004	; 0x1f44
 1001b1c:	e3401101 	movt	r1, #257	; 0x101
 1001b20:	e3a00002 	mov	r0, #2
 1001b24:	e1a02003 	mov	r2, r3
 1001b28:	eb00057c 	bl	1003120 <d_printf>
	d_printf(D_INFO, "post_buffsz           = %d bytes (0x%08x)", g_acq_state.post_buffsz, g_acq_state.post_buffsz);
 1001b2c:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
 1001b30:	e3011f70 	movw	r1, #8048	; 0x1f70
 1001b34:	e3401101 	movt	r1, #257	; 0x101
 1001b38:	e3a00002 	mov	r0, #2
 1001b3c:	e1a02003 	mov	r2, r3
 1001b40:	eb000576 	bl	1003120 <d_printf>
	d_printf(D_INFO, "total_buffsz          = %d bytes (0x%08x)", g_acq_state.total_buffsz, g_acq_state.total_buffsz);
 1001b44:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
 1001b48:	e3011f9c 	movw	r1, #8092	; 0x1f9c
 1001b4c:	e3401101 	movt	r1, #257	; 0x101
 1001b50:	e3a00002 	mov	r0, #2
 1001b54:	e1a02003 	mov	r2, r3
 1001b58:	eb000570 	bl	1003120 <d_printf>
	d_printf(D_INFO, "pre_sampct            = %d wavewords", g_acq_state.pre_sampct);
 1001b5c:	e3011fc8 	movw	r1, #8136	; 0x1fc8
 1001b60:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
 1001b64:	e3401101 	movt	r1, #257	; 0x101
 1001b68:	e3a00002 	mov	r0, #2
 1001b6c:	eb00056b 	bl	1003120 <d_printf>
	d_printf(D_INFO, "post_sampct           = %d wavewords", g_acq_state.post_sampct);
 1001b70:	e3011ff0 	movw	r1, #8176	; 0x1ff0
 1001b74:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
 1001b78:	e3401101 	movt	r1, #257	; 0x101
 1001b7c:	e3a00002 	mov	r0, #2
 1001b80:	eb000566 	bl	1003120 <d_printf>
	d_printf(D_INFO, "num_acq_request       = %d waves", g_acq_state.num_acq_request);
 1001b84:	e3021018 	movw	r1, #8216	; 0x2018
 1001b88:	e5942770 	ldr	r2, [r4, #1904]	; 0x770
 1001b8c:	e3401101 	movt	r1, #257	; 0x101
 1001b90:	e3a00002 	mov	r0, #2
 1001b94:	eb000561 	bl	1003120 <d_printf>
	d_printf(D_INFO, "num_acq_made          = %d waves", g_acq_state.num_acq_made);
 1001b98:	e302103c 	movw	r1, #8252	; 0x203c
 1001b9c:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
 1001ba0:	e3401101 	movt	r1, #257	; 0x101
 1001ba4:	e3a00002 	mov	r0, #2
 1001ba8:	eb00055c 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001bac:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001bb0:	e3a00002 	mov	r0, #2
 1001bb4:	e3401101 	movt	r1, #257	; 0x101
 1001bb8:	eb000558 	bl	1003120 <d_printf>
	d_printf(D_INFO, "acq_current->flags    = 0x%04x", g_acq_state.acq_current->flags);
 1001bbc:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
 1001bc0:	e3021060 	movw	r1, #8288	; 0x2060
 1001bc4:	e3401101 	movt	r1, #257	; 0x101
 1001bc8:	e3a00002 	mov	r0, #2
 1001bcc:	e1d321b0 	ldrh	r2, [r3, #16]
 1001bd0:	eb000552 	bl	1003120 <d_printf>
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
 1001bd4:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
 1001bd8:	e3021080 	movw	r1, #8320	; 0x2080
 1001bdc:	e3401101 	movt	r1, #257	; 0x101
 1001be0:	e3a00002 	mov	r0, #2
 1001be4:	e593300c 	ldr	r3, [r3, #12]
 1001be8:	e1a02003 	mov	r2, r3
 1001bec:	eb00054b 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001bf0:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001bf4:	e3a00002 	mov	r0, #2
 1001bf8:	e3401101 	movt	r1, #257	; 0x101
 1001bfc:	eb000547 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_acq_total       = %llu", g_acq_state.stats.num_acq_total);
 1001c00:	e30210a4 	movw	r1, #8356	; 0x20a4
 1001c04:	e14b20d8 	ldrd	r2, [fp, #-8]
 1001c08:	e3401101 	movt	r1, #257	; 0x101
 1001c0c:	e3a00002 	mov	r0, #2
 1001c10:	eb000542 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_alloc_err_total = %llu", g_acq_state.stats.num_alloc_err_total);
 1001c14:	e30210c4 	movw	r1, #8388	; 0x20c4
 1001c18:	e1ca20d0 	ldrd	r2, [sl]
 1001c1c:	e3401101 	movt	r1, #257	; 0x101
 1001c20:	e3a00002 	mov	r0, #2
 1001c24:	eb00053d 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_alloc_total     = %llu", g_acq_state.stats.num_alloc_total);
 1001c28:	e2883020 	add	r3, r8, #32
 1001c2c:	e30210e4 	movw	r1, #8420	; 0x20e4
 1001c30:	e1a04003 	mov	r4, r3
 1001c34:	e3401101 	movt	r1, #257	; 0x101
 1001c38:	e1c821d8 	ldrd	r2, [r8, #24]
 1001c3c:	e3a00002 	mov	r0, #2
 1001c40:	eb000536 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_err_total       = %llu", g_acq_state.stats.num_err_total);
 1001c44:	e3021104 	movw	r1, #8452	; 0x2104
 1001c48:	e14820d8 	ldrd	r2, [r8, #-8]
 1001c4c:	e3401101 	movt	r1, #257	; 0x101
 1001c50:	e3a00002 	mov	r0, #2
 1001c54:	eb000531 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_post_total      = %llu", g_acq_state.stats.num_post_total);
 1001c58:	e3021124 	movw	r1, #8484	; 0x2124
 1001c5c:	e14821d0 	ldrd	r2, [r8, #-16]
 1001c60:	e3401101 	movt	r1, #257	; 0x101
 1001c64:	e3a00002 	mov	r0, #2
 1001c68:	eb00052c 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_pre_total       = %llu", g_acq_state.stats.num_pre_total);
 1001c6c:	e3021144 	movw	r1, #8516	; 0x2144
 1001c70:	e1cb20d0 	ldrd	r2, [fp]
 1001c74:	e3401101 	movt	r1, #257	; 0x101
 1001c78:	e3a00002 	mov	r0, #2
 1001c7c:	eb000527 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_pre_fill_total  = %llu", g_acq_state.stats.num_pre_fill_total);
 1001c80:	e3021164 	movw	r1, #8548	; 0x2164
 1001c84:	e14821d8 	ldrd	r2, [r8, #-24]	; 0xffffffe8
 1001c88:	e3401101 	movt	r1, #257	; 0x101
 1001c8c:	e3a00002 	mov	r0, #2
 1001c90:	eb000522 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_samples         = %llu", g_acq_state.stats.num_samples);
 1001c94:	e3021184 	movw	r1, #8580	; 0x2184
 1001c98:	e1c820d0 	ldrd	r2, [r8]
 1001c9c:	e3401101 	movt	r1, #257	; 0x101
 1001ca0:	e3a00002 	mov	r0, #2
 1001ca4:	eb00051d 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_samples_raw     = %llu", g_acq_state.stats.num_samples_raw);
 1001ca8:	e30211a4 	movw	r1, #8612	; 0x21a4
 1001cac:	e14a20d8 	ldrd	r2, [sl, #-8]
 1001cb0:	e3401101 	movt	r1, #257	; 0x101
 1001cb4:	e3a00002 	mov	r0, #2
 1001cb8:	eb000518 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_irqs            = %llu", g_acq_state.stats.num_irqs);
 1001cbc:	e30211c4 	movw	r1, #8644	; 0x21c4
 1001cc0:	e1c420d0 	ldrd	r2, [r4]
 1001cc4:	e3401101 	movt	r1, #257	; 0x101
 1001cc8:	e3a00002 	mov	r0, #2
 1001ccc:	eb000513 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_fifo_full       = %llu", g_acq_state.stats.num_fifo_full);
 1001cd0:	e30211e4 	movw	r1, #8676	; 0x21e4
 1001cd4:	e1c822d8 	ldrd	r2, [r8, #40]	; 0x28
 1001cd8:	e3401101 	movt	r1, #257	; 0x101
 1001cdc:	e3a00002 	mov	r0, #2
 1001ce0:	eb00050e 	bl	1003120 <d_printf>
	d_printf(D_INFO, "s.num_fifo_pkt_dscd   = %llu", g_acq_state.stats.num_fifo_pkt_dscd);
 1001ce4:	e3021204 	movw	r1, #8708	; 0x2204
 1001ce8:	e1c823d0 	ldrd	r2, [r8, #48]	; 0x30
 1001cec:	e3401101 	movt	r1, #257	; 0x101
 1001cf0:	e3a00002 	mov	r0, #2
 1001cf4:	eb000509 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001cf8:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001cfc:	e3a00002 	mov	r0, #2
 1001d00:	e3401101 	movt	r1, #257	; 0x101
 1001d04:	eb000505 	bl	1003120 <d_printf>
	d_printf(D_INFO, "Approx acq. rate      = %d acq/s     ", (int)acq_rate);
 1001d08:	e3021224 	movw	r1, #8740	; 0x2224
 1001d0c:	e59d274c 	ldr	r2, [sp, #1868]	; 0x74c
 1001d10:	e3401101 	movt	r1, #257	; 0x101
 1001d14:	e3a00002 	mov	r0, #2
 1001d18:	eb000500 	bl	1003120 <d_printf>
	d_printf(D_INFO, "Approx sample rate    = %d Ksa/s     ", (int)sample_rate);
 1001d1c:	e302124c 	movw	r1, #8780	; 0x224c
 1001d20:	e59d2748 	ldr	r2, [sp, #1864]	; 0x748
 1001d24:	e3401101 	movt	r1, #257	; 0x101
 1001d28:	e3a00002 	mov	r0, #2
 1001d2c:	eb0004fb 	bl	1003120 <d_printf>
	d_printf(D_INFO, "Debug delta           = %d us     ", (int)time_delta_us);
 1001d30:	eefd7ac8 	vcvt.s32.f32	s15, s16
 1001d34:	e3021274 	movw	r1, #8820	; 0x2274
 1001d38:	e3401101 	movt	r1, #257	; 0x101
 1001d3c:	e3a00002 	mov	r0, #2
 1001d40:	ee172a90 	vmov	r2, s15
 1001d44:	eb0004f5 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1001d48:	e3021e04 	movw	r1, #11780	; 0x2e04
 1001d4c:	e3a00002 	mov	r0, #2
 1001d50:	e3401101 	movt	r1, #257	; 0x101
 1001d54:	eb0004f1 	bl	1003120 <d_printf>
	d_printf(D_INFO, "** End **");
 1001d58:	e3021298 	movw	r1, #8856	; 0x2298
 1001d5c:	e3a00002 	mov	r0, #2
 1001d60:	e3401101 	movt	r1, #257	; 0x101
 1001d64:	eb0004ed 	bl	1003120 <d_printf>

	// Save last state...
	g_acq_state.stat_last = g_acq_state.stats;
 1001d68:	e2861d1e 	add	r1, r6, #1920	; 0x780
 1001d6c:	e3a02060 	mov	r2, #96	; 0x60
 1001d70:	e2810068 	add	r0, r1, #104	; 0x68
 1001d74:	eb002511 	bl	100b1c0 <memcpy>
	g_acq_state.last_debug_timer = timer_value;
 1001d78:	e59d3750 	ldr	r3, [sp, #1872]	; 0x750
 1001d7c:	e5053008 	str	r3, [r5, #-8]
 1001d80:	e59d3754 	ldr	r3, [sp, #1876]	; 0x754
 1001d84:	e5053004 	str	r3, [r5, #-4]
}
 1001d88:	e28dde76 	add	sp, sp, #1888	; 0x760
 1001d8c:	e28dd00c 	add	sp, sp, #12
 1001d90:	ecbd8b02 	vpop	{d8}
 1001d94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_read_global_timer(&lsb, &msb);
 1001d98:	e28d0e76 	add	r0, sp, #1888	; 0x760
 1001d9c:	e28d1e76 	add	r1, sp, #1888	; 0x760
 1001da0:	e2800004 	add	r0, r0, #4
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001da4:	e284be79 	add	fp, r4, #1936	; 0x790
		d_read_global_timer(&lsb, &msb);
 1001da8:	eb00069e 	bl	1003828 <d_read_global_timer>
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001dac:	e59d3764 	ldr	r3, [sp, #1892]	; 0x764
 1001db0:	e284ad1f 	add	sl, r4, #1984	; 0x7c0
		time_delta = timer_value - g_acq_state.last_debug_timer;
 1001db4:	e5150008 	ldr	r0, [r5, #-8]
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001db8:	e59d2760 	ldr	r2, [sp, #1888]	; 0x760
		time_delta = timer_value - g_acq_state.last_debug_timer;
 1001dbc:	e5151004 	ldr	r1, [r5, #-4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001dc0:	e0530000 	subs	r0, r3, r0
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001dc4:	e58d3750 	str	r3, [sp, #1872]	; 0x750
 1001dc8:	e58d2754 	str	r2, [sp, #1876]	; 0x754
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001dcc:	e0c21001 	sbc	r1, r2, r1
 1001dd0:	fa001e6a 	blx	1009780 <__aeabi_ul2d>
 1001dd4:	eddf0b41 	vldr	d16, [pc, #260]	; 1001ee0 <acq_debug_dump+0x53c>
 1001dd8:	ec410b31 	vmov	d17, r0, r1
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001ddc:	e51bc008 	ldr	ip, [fp, #-8]
 1001de0:	e5952000 	ldr	r2, [r5]
 1001de4:	e51be004 	ldr	lr, [fp, #-4]
 1001de8:	e5951004 	ldr	r1, [r5, #4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001dec:	ee610ba0 	vmul.f64	d16, d17, d16
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001df0:	e05c6002 	subs	r6, ip, r2
 1001df4:	e0ce7001 	sbc	r7, lr, r1
		if(acq_delta > 0) {
 1001df8:	e1963007 	orrs	r3, r6, r7
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001dfc:	eeb78be0 	vcvt.f32.f64	s16, d16
		if(acq_delta > 0) {
 1001e00:	1a000019 	bne	1001e6c <acq_debug_dump+0x4c8>
 1001e04:	e51a2008 	ldr	r2, [sl, #-8]
 1001e08:	e5943820 	ldr	r3, [r4, #2080]	; 0x820
 1001e0c:	e5941824 	ldr	r1, [r4, #2084]	; 0x824
 1001e10:	e51a0004 	ldr	r0, [sl, #-4]
 1001e14:	e0528003 	subs	r8, r2, r3
 1001e18:	e0c09001 	sbc	r9, r0, r1
		if(sample_delta > 0) {
 1001e1c:	e1983009 	orrs	r3, r8, r9
 1001e20:	0a000029 	beq	1001ecc <acq_debug_dump+0x528>
			if(time_delta_us > 0) {
 1001e24:	eeb58ac0 	vcmpe.f32	s16, #0.0
 1001e28:	e3a03000 	mov	r3, #0
 1001e2c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1001e30:	d58d3748 	strle	r3, [sp, #1864]	; 0x748
 1001e34:	d58d374c 	strle	r3, [sp, #1868]	; 0x74c
 1001e38:	dafffee9 	ble	10019e4 <acq_debug_dump+0x40>
 1001e3c:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
 1001e40:	e1a00008 	mov	r0, r8
 1001e44:	e1a01009 	mov	r1, r9
 1001e48:	fa001ecb 	blx	100997c <__aeabi_ul2f>
 1001e4c:	ee070a90 	vmov	s15, r0
 1001e50:	ed9f7a24 	vldr	s14, [pc, #144]	; 1001ee8 <acq_debug_dump+0x544>
 1001e54:	eec77a88 	vdiv.f32	s15, s15, s16
 1001e58:	ee677a87 	vmul.f32	s15, s15, s14
 1001e5c:	eefd7ae7 	vcvt.s32.f32	s15, s15
 1001e60:	ee173a90 	vmov	r3, s15
 1001e64:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1001e68:	eafffedd 	b	10019e4 <acq_debug_dump+0x40>
			if(time_delta_us > 0) {
 1001e6c:	e51a1008 	ldr	r1, [sl, #-8]
 1001e70:	e5942820 	ldr	r2, [r4, #2080]	; 0x820
 1001e74:	e5940824 	ldr	r0, [r4, #2084]	; 0x824
 1001e78:	e51ac004 	ldr	ip, [sl, #-4]
 1001e7c:	e0518002 	subs	r8, r1, r2
 1001e80:	eeb58ac0 	vcmpe.f32	s16, #0.0
 1001e84:	e0cc9000 	sbc	r9, ip, r0
 1001e88:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1001e8c:	daffffe2 	ble	1001e1c <acq_debug_dump+0x478>
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 1001e90:	e1a00006 	mov	r0, r6
 1001e94:	e1a01007 	mov	r1, r7
 1001e98:	fa001eb7 	blx	100997c <__aeabi_ul2f>
 1001e9c:	ee070a90 	vmov	s15, r0
		if(sample_delta > 0) {
 1001ea0:	e1983009 	orrs	r3, r8, r9
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 1001ea4:	ed9f7a10 	vldr	s14, [pc, #64]	; 1001eec <acq_debug_dump+0x548>
 1001ea8:	eec77a88 	vdiv.f32	s15, s15, s16
 1001eac:	ee677a87 	vmul.f32	s15, s15, s14
 1001eb0:	eefd7ae7 	vcvt.s32.f32	s15, s15
 1001eb4:	ee173a90 	vmov	r3, s15
 1001eb8:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
		if(sample_delta > 0) {
 1001ebc:	03a03000 	moveq	r3, #0
 1001ec0:	058d3748 	streq	r3, [sp, #1864]	; 0x748
 1001ec4:	1affffdd 	bne	1001e40 <acq_debug_dump+0x49c>
 1001ec8:	eafffec5 	b	10019e4 <acq_debug_dump+0x40>
 1001ecc:	e3a03000 	mov	r3, #0
 1001ed0:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1001ed4:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
 1001ed8:	eafffec1 	b	10019e4 <acq_debug_dump+0x40>
 1001edc:	e320f000 	nop	{0}
 1001ee0:	a17f0000 	.word	0xa17f0000
 1001ee4:	3f689374 	.word	0x3f689374
 1001ee8:	447a0000 	.word	0x447a0000
 1001eec:	49742400 	.word	0x49742400
 1001ef0:	010192c8 	.word	0x010192c8
 1001ef4:	01019a70 	.word	0x01019a70

01001ef8 <acq_debug_dump_waveraw>:

/*
 * Dump raw contents of buffer in active acquisition.
 */
void acq_debug_dump_waveraw()
{
 1001ef8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	uint32_t sz;
	uint32_t i;

	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
		sz = g_acq_state.pre_buffsz;
 1001efc:	e30952c0 	movw	r5, #37568	; 0x92c0
 1001f00:	e3405101 	movt	r5, #257	; 0x101
	}

	sz /= 4;

	for(i = 0; i <= sz; i += 2) {
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 1001f04:	e3027304 	movw	r7, #8964	; 0x2304
 1001f08:	e3407101 	movt	r7, #257	; 0x101
		sz = g_acq_state.pre_buffsz;
 1001f0c:	e3a04000 	mov	r4, #0
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 1001f10:	e5953004 	ldr	r3, [r5, #4]
{
 1001f14:	e24dd00c 	sub	sp, sp, #12
		sz = g_acq_state.pre_buffsz;
 1001f18:	e5952760 	ldr	r2, [r5, #1888]	; 0x760
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 1001f1c:	e2433001 	sub	r3, r3, #1
 1001f20:	e3530001 	cmp	r3, #1
		sz = g_acq_state.post_buffsz;
 1001f24:	85956764 	ldrhi	r6, [r5, #1892]	; 0x764
		sz = g_acq_state.pre_buffsz;
 1001f28:	91a06002 	movls	r6, r2
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1001f2c:	930212a4 	movwls	r1, #8868	; 0x22a4
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1001f30:	830212d4 	movwhi	r1, #8916	; 0x22d4
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1001f34:	93401101 	movtls	r1, #257	; 0x101
 1001f38:	93a00002 	movls	r0, #2
 1001f3c:	e3c66007 	bic	r6, r6, #7
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1001f40:	83401101 	movthi	r1, #257	; 0x101
 1001f44:	e2866008 	add	r6, r6, #8
 1001f48:	83a00002 	movhi	r0, #2
 1001f4c:	eb000473 	bl	1003120 <d_printf>
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 1001f50:	e5953854 	ldr	r3, [r5, #2132]	; 0x854
 1001f54:	e1a02004 	mov	r2, r4
 1001f58:	e1a01007 	mov	r1, r7
 1001f5c:	e3a00002 	mov	r0, #2
 1001f60:	e593c008 	ldr	ip, [r3, #8]
 1001f64:	e7bc3004 	ldr	r3, [ip, r4]!
 1001f68:	e2844008 	add	r4, r4, #8
 1001f6c:	e59cc004 	ldr	ip, [ip, #4]
 1001f70:	e58dc000 	str	ip, [sp]
 1001f74:	eb000469 	bl	1003120 <d_printf>
	for(i = 0; i <= sz; i += 2) {
 1001f78:	e1560004 	cmp	r6, r4
 1001f7c:	1afffff3 	bne	1001f50 <acq_debug_dump_waveraw+0x58>
	}

	d_printf(D_INFO, "** End of Waveform Data **");
 1001f80:	e302131c 	movw	r1, #8988	; 0x231c
 1001f84:	e3a00002 	mov	r0, #2
 1001f88:	e3401101 	movt	r1, #257	; 0x101
}
 1001f8c:	e28dd00c 	add	sp, sp, #12
 1001f90:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "** End of Waveform Data **");
 1001f94:	ea000461 	b	1003120 <d_printf>

01001f98 <acq_get_ll_pointer>:
 * @return	ACQRES_OK if waveform found (trigger state disregarded)
 * 			ACQRES_WAVE_NOT_FOUND if... well... the waveform wasn't found
 */
int acq_get_ll_pointer(int index, struct acq_buffer_t **buff)
{
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1001f98:	e30932c0 	movw	r3, #37568	; 0x92c0
 1001f9c:	e3403101 	movt	r3, #257	; 0x101
 1001fa0:	e5933850 	ldr	r3, [r3, #2128]	; 0x850

	while(wave != NULL) {
 1001fa4:	e3530000 	cmp	r3, #0
 1001fa8:	0a000009 	beq	1001fd4 <acq_get_ll_pointer+0x3c>
		//d_printf(D_EXINFO, "explore: 0x%08x (%d) (buff_acq:0x%08x, trigger_at:0x%08x %d)", \
				wave, wave->idx, wave->buff_acq, wave->trigger_at, wave->trigger_at);

		if(wave->idx == index)
 1001fac:	e5932000 	ldr	r2, [r3]
 1001fb0:	e1500002 	cmp	r0, r2
 1001fb4:	1a000003 	bne	1001fc8 <acq_get_ll_pointer+0x30>
 1001fb8:	ea00000d 	b	1001ff4 <acq_get_ll_pointer+0x5c>
 1001fbc:	e5932000 	ldr	r2, [r3]
 1001fc0:	e1520000 	cmp	r2, r0
 1001fc4:	0a00000a 	beq	1001ff4 <acq_get_ll_pointer+0x5c>
			break;

		wave = wave->next;
 1001fc8:	e5933014 	ldr	r3, [r3, #20]
	while(wave != NULL) {
 1001fcc:	e3530000 	cmp	r3, #0
 1001fd0:	1afffff9 	bne	1001fbc <acq_get_ll_pointer+0x24>
	}

	if(wave == NULL) {
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1001fd4:	e3021338 	movw	r1, #9016	; 0x2338
 1001fd8:	e1a02000 	mov	r2, r0
{
 1001fdc:	e92d4010 	push	{r4, lr}
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1001fe0:	e3401101 	movt	r1, #257	; 0x101
 1001fe4:	e3a00004 	mov	r0, #4
 1001fe8:	eb00044c 	bl	1003120 <d_printf>
 1001fec:	e3e00008 	mvn	r0, #8
		return ACQRES_WAVE_NOT_FOUND;
	}

	*buff = wave;
	return ACQRES_OK;
}
 1001ff0:	e8bd8010 	pop	{r4, pc}
	return ACQRES_OK;
 1001ff4:	e3a00000 	mov	r0, #0
	*buff = wave;
 1001ff8:	e5813000 	str	r3, [r1]
}
 1001ffc:	e12fff1e 	bx	lr

01002000 <acq_debug_dump_wave>:
 * Dump information from a wave N.
 *
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 */
void acq_debug_dump_wave(int index)
{
 1002000:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002004:	e30962c0 	movw	r6, #37568	; 0x92c0
 1002008:	e3406101 	movt	r6, #257	; 0x101
{
 100200c:	e24dd008 	sub	sp, sp, #8
 1002010:	e1a05000 	mov	r5, r0
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002014:	e5964850 	ldr	r4, [r6, #2128]	; 0x850
	while(wave != NULL) {
 1002018:	e3540000 	cmp	r4, #0
 100201c:	0a000009 	beq	1002048 <acq_debug_dump_wave+0x48>
		if(wave->idx == index)
 1002020:	e5943000 	ldr	r3, [r4]
 1002024:	e1530000 	cmp	r3, r0
 1002028:	1a000003 	bne	100203c <acq_debug_dump_wave+0x3c>
 100202c:	ea000011 	b	1002078 <acq_debug_dump_wave+0x78>
 1002030:	e5943000 	ldr	r3, [r4]
 1002034:	e1550003 	cmp	r5, r3
 1002038:	0a00000e 	beq	1002078 <acq_debug_dump_wave+0x78>
		wave = wave->next;
 100203c:	e5944014 	ldr	r4, [r4, #20]
	while(wave != NULL) {
 1002040:	e3540000 	cmp	r4, #0
 1002044:	1afffff9 	bne	1002030 <acq_debug_dump_wave+0x30>
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1002048:	e3021338 	movw	r1, #9016	; 0x2338
 100204c:	e1a02005 	mov	r2, r5
 1002050:	e3401101 	movt	r1, #257	; 0x101
 1002054:	e3a00004 	mov	r0, #4
 1002058:	eb000430 	bl	1003120 <d_printf>
	uint32_t *addr2;
	uint32_t *deref;
	int first, i;

	if(acq_get_ll_pointer(index, &wave) != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100205c:	e3021408 	movw	r1, #9224	; 0x2408
 1002060:	e1a02005 	mov	r2, r5
 1002064:	e3401101 	movt	r1, #257	; 0x101
 1002068:	e3a00004 	mov	r0, #4
	} else {
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
	}

	d_printf(D_INFO, "");
}
 100206c:	e28dd008 	add	sp, sp, #8
 1002070:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 1002074:	ea000429 	b	1003120 <d_printf>
	d_printf(D_INFO, "");
 1002078:	e3021e04 	movw	r1, #11780	; 0x2e04
 100207c:	e3a00002 	mov	r0, #2
 1002080:	e3401101 	movt	r1, #257	; 0x101
 1002084:	eb000425 	bl	1003120 <d_printf>
	d_printf(D_INFO, "** Waveinfo for index %d **", index);
 1002088:	e302143c 	movw	r1, #9276	; 0x243c
 100208c:	e1a02005 	mov	r2, r5
 1002090:	e3401101 	movt	r1, #257	; 0x101
 1002094:	e3a00002 	mov	r0, #2
 1002098:	eb000420 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 100209c:	e3021e04 	movw	r1, #11780	; 0x2e04
 10020a0:	e3a00002 	mov	r0, #2
 10020a4:	e3401101 	movt	r1, #257	; 0x101
 10020a8:	eb00041c 	bl	1003120 <d_printf>
	d_printf(D_INFO, "buff_acq address      = 0x%08x", wave->buff_acq);
 10020ac:	e3021458 	movw	r1, #9304	; 0x2458
 10020b0:	e5942008 	ldr	r2, [r4, #8]
 10020b4:	e3401101 	movt	r1, #257	; 0x101
 10020b8:	e3a00002 	mov	r0, #2
 10020bc:	eb000417 	bl	1003120 <d_printf>
	d_printf(D_INFO, "buff_alloc address    = 0x%08x", wave->buff_alloc);
 10020c0:	e3021478 	movw	r1, #9336	; 0x2478
 10020c4:	e5942004 	ldr	r2, [r4, #4]
 10020c8:	e3401101 	movt	r1, #257	; 0x101
 10020cc:	e3a00002 	mov	r0, #2
 10020d0:	eb000412 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 10020d4:	e3021e04 	movw	r1, #11780	; 0x2e04
 10020d8:	e3a00002 	mov	r0, #2
 10020dc:	e3401101 	movt	r1, #257	; 0x101
 10020e0:	eb00040e 	bl	1003120 <d_printf>
	d_printf(D_INFO, "idx                   = %d", wave->idx);
 10020e4:	e3021498 	movw	r1, #9368	; 0x2498
 10020e8:	e5942000 	ldr	r2, [r4]
 10020ec:	e3401101 	movt	r1, #257	; 0x101
 10020f0:	e3a00002 	mov	r0, #2
 10020f4:	eb000409 	bl	1003120 <d_printf>
	d_printf(D_INFO, "flags                 = 0x%04x", wave->flags);
 10020f8:	e30214b4 	movw	r1, #9396	; 0x24b4
 10020fc:	e1d421b0 	ldrh	r2, [r4, #16]
 1002100:	e3401101 	movt	r1, #257	; 0x101
 1002104:	e3a00002 	mov	r0, #2
 1002108:	eb000404 	bl	1003120 <d_printf>
	d_printf(D_INFO, "trigger_at            = 0x%08x", wave->trigger_at);
 100210c:	e30214d4 	movw	r1, #9428	; 0x24d4
 1002110:	e594200c 	ldr	r2, [r4, #12]
 1002114:	e3401101 	movt	r1, #257	; 0x101
 1002118:	e3a00002 	mov	r0, #2
 100211c:	eb0003ff 	bl	1003120 <d_printf>
	d_printf(D_INFO, "trigger_at(div8)      = 0x%08x (%d)", wave->trigger_at >> 3, wave->trigger_at >> 3);
 1002120:	e594300c 	ldr	r3, [r4, #12]
 1002124:	e30214f4 	movw	r1, #9460	; 0x24f4
 1002128:	e3401101 	movt	r1, #257	; 0x101
 100212c:	e3a00002 	mov	r0, #2
 1002130:	e1a031a3 	lsr	r3, r3, #3
 1002134:	e1a02003 	mov	r2, r3
 1002138:	eb0003f8 	bl	1003120 <d_printf>
	d_printf(D_INFO, "trigger_at(div16)     = 0x%08x (%d)", wave->trigger_at >> 4, wave->trigger_at >> 4);
 100213c:	e594300c 	ldr	r3, [r4, #12]
 1002140:	e3021518 	movw	r1, #9496	; 0x2518
 1002144:	e3401101 	movt	r1, #257	; 0x101
 1002148:	e3a00002 	mov	r0, #2
 100214c:	e1a03223 	lsr	r3, r3, #4
 1002150:	e1a02003 	mov	r2, r3
 1002154:	eb0003f1 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1002158:	e3021e04 	movw	r1, #11780	; 0x2e04
 100215c:	e3a00002 	mov	r0, #2
 1002160:	e3401101 	movt	r1, #257	; 0x101
 1002164:	eb0003ed 	bl	1003120 <d_printf>
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 1002168:	e594300c 	ldr	r3, [r4, #12]
 100216c:	e3530000 	cmp	r3, #0
 1002170:	ba000002 	blt	1002180 <acq_debug_dump_wave+0x180>
 1002174:	e1d431b0 	ldrh	r3, [r4, #16]
 1002178:	e3130001 	tst	r3, #1
 100217c:	1a00000a 	bne	10021ac <acq_debug_dump_wave+0x1ac>
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
 1002180:	e30213d4 	movw	r1, #9172	; 0x23d4
 1002184:	e1a02005 	mov	r2, r5
 1002188:	e3401101 	movt	r1, #257	; 0x101
 100218c:	e3a00004 	mov	r0, #4
 1002190:	eb0003e2 	bl	1003120 <d_printf>
	d_printf(D_INFO, "");
 1002194:	e3021e04 	movw	r1, #11780	; 0x2e04
 1002198:	e3a00002 	mov	r0, #2
 100219c:	e3401101 	movt	r1, #257	; 0x101
}
 10021a0:	e28dd008 	add	sp, sp, #8
 10021a4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "");
 10021a8:	ea0003dc 	b	1003120 <d_printf>
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 10021ac:	e5961768 	ldr	r1, [r6, #1896]	; 0x768
 10021b0:	e5940008 	ldr	r0, [r4, #8]
 10021b4:	eb0016c3 	bl	1007cc8 <Xil_DCacheInvalidateRange>
		dmb();
 10021b8:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10021bc:	e594700c 	ldr	r7, [r4, #12]
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10021c0:	e3a03000 	mov	r3, #0
		end = g_acq_state.pre_sampct * 2;
 10021c4:	e5969778 	ldr	r9, [r6, #1912]	; 0x778
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10021c8:	e3021354 	movw	r1, #9044	; 0x2354
 10021cc:	e58d3000 	str	r3, [sp]
 10021d0:	e3401101 	movt	r1, #257	; 0x101
 10021d4:	e3a00002 	mov	r0, #2
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10021d8:	e1a071a7 	lsr	r7, r7, #3
		end = g_acq_state.pre_sampct * 2;
 10021dc:	e1a09089 	lsl	r9, r9, #1
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10021e0:	e2877001 	add	r7, r7, #1
 10021e4:	e1a08087 	lsl	r8, r7, #1
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10021e8:	e1a02009 	mov	r2, r9
 10021ec:	e1a03008 	mov	r3, r8
		for(i = start; i < end; i += 2) {
 10021f0:	e1a05008 	mov	r5, r8
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10021f4:	eb0003c9 	bl	1003120 <d_printf>
		for(i = start; i < end; i += 2) {
 10021f8:	e1580009 	cmp	r8, r9
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 10021fc:	3302a374 	movwcc	sl, #9076	; 0x2374
 1002200:	31a07187 	lslcc	r7, r7, #3
 1002204:	3340a101 	movtcc	sl, #257	; 0x101
		for(i = start; i < end; i += 2) {
 1002208:	2a00000b 	bcs	100223c <acq_debug_dump_wave+0x23c>
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100220c:	e594c008 	ldr	ip, [r4, #8]
 1002210:	e1a02005 	mov	r2, r5
 1002214:	e1a0100a 	mov	r1, sl
		for(i = start; i < end; i += 2) {
 1002218:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100221c:	e3a00000 	mov	r0, #0
 1002220:	e7bc3007 	ldr	r3, [ip, r7]!
 1002224:	e2877008 	add	r7, r7, #8
 1002228:	e59cc004 	ldr	ip, [ip, #4]
 100222c:	e58dc000 	str	ip, [sp]
 1002230:	eb0003ba 	bl	1003120 <d_printf>
		for(i = start; i < end; i += 2) {
 1002234:	e1590005 	cmp	r9, r5
 1002238:	8afffff3 	bhi	100220c <acq_debug_dump_wave+0x20c>
{
 100223c:	e3a07000 	mov	r7, #0
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002240:	e3029394 	movw	r9, #9108	; 0x2394
		for(i = 0; i < start; i += 2) {
 1002244:	e1a05007 	mov	r5, r7
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002248:	e3409101 	movt	r9, #257	; 0x101
 100224c:	e594c008 	ldr	ip, [r4, #8]
 1002250:	e1a02005 	mov	r2, r5
 1002254:	e1a01009 	mov	r1, r9
		for(i = 0; i < start; i += 2) {
 1002258:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100225c:	e3a00000 	mov	r0, #0
 1002260:	e7bc3007 	ldr	r3, [ip, r7]!
 1002264:	e2877008 	add	r7, r7, #8
 1002268:	e59cc004 	ldr	ip, [ip, #4]
 100226c:	e58dc000 	str	ip, [sp]
 1002270:	eb0003aa 	bl	1003120 <d_printf>
		for(i = 0; i < start; i += 2) {
 1002274:	e1580005 	cmp	r8, r5
 1002278:	8afffff3 	bhi	100224c <acq_debug_dump_wave+0x24c>
		start = g_acq_state.pre_sampct * 2;
 100227c:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002280:	e596777c 	ldr	r7, [r6, #1916]	; 0x77c
 1002284:	e0837007 	add	r7, r3, r7
		for(i = start; i < end; i += 2) {
 1002288:	e1a05083 	lsl	r5, r3, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100228c:	e1a07087 	lsl	r7, r7, #1
		for(i = start; i < end; i += 2) {
 1002290:	e1550007 	cmp	r5, r7
 1002294:	2affffbe 	bcs	1002194 <acq_debug_dump_wave+0x194>
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002298:	e30283b4 	movw	r8, #9140	; 0x23b4
 100229c:	e1a06183 	lsl	r6, r3, #3
 10022a0:	e3408101 	movt	r8, #257	; 0x101
 10022a4:	e594c008 	ldr	ip, [r4, #8]
 10022a8:	e1a02005 	mov	r2, r5
 10022ac:	e1a01008 	mov	r1, r8
		for(i = start; i < end; i += 2) {
 10022b0:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 10022b4:	e3a00000 	mov	r0, #0
 10022b8:	e7bc3006 	ldr	r3, [ip, r6]!
 10022bc:	e2866008 	add	r6, r6, #8
 10022c0:	e59cc004 	ldr	ip, [ip, #4]
 10022c4:	e58dc000 	str	ip, [sp]
 10022c8:	eb000394 	bl	1003120 <d_printf>
		for(i = start; i < end; i += 2) {
 10022cc:	e1570005 	cmp	r7, r5
 10022d0:	8afffff3 	bhi	10022a4 <acq_debug_dump_wave+0x2a4>
 10022d4:	eaffffae 	b	1002194 <acq_debug_dump_wave+0x194>

010022d8 <acq_copy_slow_mipi>:
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 * @param	buffer	Buffer to place assembled waveform.  The buffer must be at least as large as the
 * 					total_buffsz parameter or buffer overflow could occur.
 */
int acq_copy_slow_mipi(int index, uint32_t *buffer)
{
 10022d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 10022dc:	e30952c0 	movw	r5, #37568	; 0x92c0
 10022e0:	e3405101 	movt	r5, #257	; 0x101
{
 10022e4:	e24dd00c 	sub	sp, sp, #12
 10022e8:	e1a06000 	mov	r6, r0
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 10022ec:	e5954850 	ldr	r4, [r5, #2128]	; 0x850
	while(wave != NULL) {
 10022f0:	e3540000 	cmp	r4, #0
 10022f4:	0a00000a 	beq	1002324 <acq_copy_slow_mipi+0x4c>
		if(wave->idx == index)
 10022f8:	e5943000 	ldr	r3, [r4]
 10022fc:	e1a07001 	mov	r7, r1
 1002300:	e1530000 	cmp	r3, r0
 1002304:	1a000003 	bne	1002318 <acq_copy_slow_mipi+0x40>
 1002308:	ea000012 	b	1002358 <acq_copy_slow_mipi+0x80>
 100230c:	e5943000 	ldr	r3, [r4]
 1002310:	e1560003 	cmp	r6, r3
 1002314:	0a00000f 	beq	1002358 <acq_copy_slow_mipi+0x80>
		wave = wave->next;
 1002318:	e5944014 	ldr	r4, [r4, #20]
	while(wave != NULL) {
 100231c:	e3540000 	cmp	r4, #0
 1002320:	1afffff9 	bne	100230c <acq_copy_slow_mipi+0x34>
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1002324:	e3021338 	movw	r1, #9016	; 0x2338
 1002328:	e1a02006 	mov	r2, r6
 100232c:	e3401101 	movt	r1, #257	; 0x101
 1002330:	e3a00004 	mov	r0, #4
 1002334:	eb000379 	bl	1003120 <d_printf>

	// Find the LL pointer to this waveindex
	res = acq_get_ll_pointer(index, &wave);

	if(res != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 1002338:	e3021408 	movw	r1, #9224	; 0x2408
 100233c:	e1a02006 	mov	r2, r6
 1002340:	e3401101 	movt	r1, #257	; 0x101
 1002344:	e3a00004 	mov	r0, #4
 1002348:	eb000374 	bl	1003120 <d_printf>
		return res;
 100234c:	e3e00008 	mvn	r0, #8
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
		buffer += start;
	} else {
		return ACQRES_WAVE_NOT_READY;
	}
}
 1002350:	e28dd00c 	add	sp, sp, #12
 1002354:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	d_printf(D_EXINFO, "acq: trigger_at=0x%08x (sample:%d)", wave->trigger_at, wave->trigger_at >> 3);
 1002358:	e594300c 	ldr	r3, [r4, #12]
 100235c:	e30215f8 	movw	r1, #9720	; 0x25f8
 1002360:	e3401101 	movt	r1, #257	; 0x101
 1002364:	e3a00001 	mov	r0, #1
 1002368:	e1a02003 	mov	r2, r3
 100236c:	e1a031a3 	lsr	r3, r3, #3
 1002370:	eb00036a 	bl	1003120 <d_printf>
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 1002374:	e594300c 	ldr	r3, [r4, #12]
 1002378:	e3530000 	cmp	r3, #0
 100237c:	ba000002 	blt	100238c <acq_copy_slow_mipi+0xb4>
 1002380:	e1d431b0 	ldrh	r3, [r4, #16]
 1002384:	e3130001 	tst	r3, #1
 1002388:	1a000002 	bne	1002398 <acq_copy_slow_mipi+0xc0>
		return ACQRES_WAVE_NOT_READY;
 100238c:	e3e00009 	mvn	r0, #9
}
 1002390:	e28dd00c 	add	sp, sp, #12
 1002394:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 1002398:	e5951768 	ldr	r1, [r5, #1896]	; 0x768
 100239c:	e5940008 	ldr	r0, [r4, #8]
 10023a0:	eb001648 	bl	1007cc8 <Xil_DCacheInvalidateRange>
		dmb();
 10023a4:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10023a8:	e594600c 	ldr	r6, [r4, #12]
		d_printf(D_INFO, "X. pointer: 0x%08x", wave->buff_acq);
 10023ac:	e302153c 	movw	r1, #9532	; 0x253c
		end = g_acq_state.pre_sampct * 2;
 10023b0:	e5959778 	ldr	r9, [r5, #1912]	; 0x778
		d_printf(D_INFO, "X. pointer: 0x%08x", wave->buff_acq);
 10023b4:	e3401101 	movt	r1, #257	; 0x101
 10023b8:	e5942008 	ldr	r2, [r4, #8]
 10023bc:	e3a00002 	mov	r0, #2
 10023c0:	eb000356 	bl	1003120 <d_printf>
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10023c4:	e1a061a6 	lsr	r6, r6, #3
		d_printf(D_INFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 10023c8:	e5942008 	ldr	r2, [r4, #8]
 10023cc:	e3021550 	movw	r1, #9552	; 0x2550
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10023d0:	e2866001 	add	r6, r6, #1
		d_printf(D_INFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 10023d4:	e3401101 	movt	r1, #257	; 0x101
 10023d8:	e0498006 	sub	r8, r9, r6
 10023dc:	e1a06186 	lsl	r6, r6, #3
 10023e0:	e1a08188 	lsl	r8, r8, #3
 10023e4:	e1a09189 	lsl	r9, r9, #3
 10023e8:	e1a03006 	mov	r3, r6
 10023ec:	e1cd80f0 	strd	r8, [sp]
 10023f0:	e0822006 	add	r2, r2, r6
 10023f4:	e3a00002 	mov	r0, #2
 10023f8:	eb000348 	bl	1003120 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 10023fc:	e5941008 	ldr	r1, [r4, #8]
 1002400:	e1a02008 	mov	r2, r8
 1002404:	e1a00007 	mov	r0, r7
		buffer += (end - start);
 1002408:	e0879008 	add	r9, r7, r8
		buffer += start;
 100240c:	e0897006 	add	r7, r9, r6
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002410:	e0811006 	add	r1, r1, r6
 1002414:	eb002369 	bl	100b1c0 <memcpy>
		d_printf(D_INFO, "1. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq, 0, start * 4, start * 4);
 1002418:	e3021588 	movw	r1, #9608	; 0x2588
 100241c:	e5942008 	ldr	r2, [r4, #8]
 1002420:	e3a03000 	mov	r3, #0
 1002424:	e58d6004 	str	r6, [sp, #4]
 1002428:	e58d6000 	str	r6, [sp]
 100242c:	e3401101 	movt	r1, #257	; 0x101
 1002430:	e3a00002 	mov	r0, #2
 1002434:	eb000339 	bl	1003120 <d_printf>
		memcpy(buffer, wave->buff_acq, start * 4);
 1002438:	e1a02006 	mov	r2, r6
 100243c:	e5941008 	ldr	r1, [r4, #8]
 1002440:	e1a00009 	mov	r0, r9
 1002444:	eb00235d 	bl	100b1c0 <memcpy>
		start = g_acq_state.pre_sampct * 2;
 1002448:	e595c778 	ldr	ip, [r5, #1912]	; 0x778
		d_printf(D_INFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100244c:	e30215c0 	movw	r1, #9664	; 0x25c0
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002450:	e595677c 	ldr	r6, [r5, #1916]	; 0x77c
		d_printf(D_INFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002454:	e3401101 	movt	r1, #257	; 0x101
 1002458:	e5942008 	ldr	r2, [r4, #8]
 100245c:	e3a00002 	mov	r0, #2
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002460:	e08c3006 	add	r3, ip, r6
		d_printf(D_INFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002464:	e1a0518c 	lsl	r5, ip, #3
 1002468:	e1a06186 	lsl	r6, r6, #3
 100246c:	e1a03183 	lsl	r3, r3, #3
 1002470:	e0822005 	add	r2, r2, r5
 1002474:	e58d3004 	str	r3, [sp, #4]
 1002478:	e58d6000 	str	r6, [sp]
 100247c:	e1a03005 	mov	r3, r5
 1002480:	eb000326 	bl	1003120 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002484:	e5941008 	ldr	r1, [r4, #8]
 1002488:	e1a00007 	mov	r0, r7
 100248c:	e1a02006 	mov	r2, r6
 1002490:	e0811005 	add	r1, r1, r5
}
 1002494:	e28dd00c 	add	sp, sp, #12
 1002498:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100249c:	ea002347 	b	100b1c0 <memcpy>

010024a0 <fabcfg_fastcfg_wait.part.0>:
			break;
		}
	}

	if(timeout == 0) {
		d_printf(D_ERROR, "FabCfg: Timeout waiting for fabric to respond to COMMIT");
 10024a0:	e3021704 	movw	r1, #9988	; 0x2704
 10024a4:	e3a00004 	mov	r0, #4
void fabcfg_fastcfg_wait()
 10024a8:	e92d4010 	push	{r4, lr}
		d_printf(D_ERROR, "FabCfg: Timeout waiting for fabric to respond to COMMIT");
 10024ac:	e3401101 	movt	r1, #257	; 0x101
 10024b0:	eb00031a 	bl	1003120 <d_printf>
		exit(-1);
 10024b4:	e3e00000 	mvn	r0, #0
 10024b8:	fa001dc4 	blx	1009bd0 <exit>

010024bc <fabcfg_init>:
{
 10024bc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, FAB_CFG_EMIO_COMMIT, 1);
 10024c0:	e3a02001 	mov	r2, #1
{
 10024c4:	e24dd00c 	sub	sp, sp, #12
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, FAB_CFG_EMIO_COMMIT, 1);
 10024c8:	e3a01039 	mov	r1, #57	; 0x39
 10024cc:	e59f04d8 	ldr	r0, [pc, #1240]	; 10029ac <fabcfg_init+0x4f0>
 10024d0:	eb000dfb 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, FAB_CFG_EMIO_COMMIT, 1);
 10024d4:	e3a02001 	mov	r2, #1
 10024d8:	e3a01039 	mov	r1, #57	; 0x39
 10024dc:	e59f04c8 	ldr	r0, [pc, #1224]	; 10029ac <fabcfg_init+0x4f0>
 10024e0:	eb000d74 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, FAB_CFG_EMIO_DONE, 0);
 10024e4:	e3a02000 	mov	r2, #0
 10024e8:	e3a0103a 	mov	r1, #58	; 0x3a
 10024ec:	e59f04b8 	ldr	r0, [pc, #1208]	; 10029ac <fabcfg_init+0x4f0>
 10024f0:	eb000d70 	bl	1005ab8 <XGpioPs_SetDirectionPin>
 10024f4:	e3a01a0a 	mov	r1, #40960	; 0xa000
 10024f8:	e3a03008 	mov	r3, #8
 10024fc:	e34e1000 	movt	r1, #57344	; 0xe000
 1002500:	e34f3ff7 	movt	r3, #65527	; 0xfff7
 1002504:	e5813010 	str	r3, [r1, #16]
	asm("nop");
 1002508:	e320f000 	nop	{0}
	asm("nop");
 100250c:	e320f000 	nop	{0}
	asm("nop");
 1002510:	e320f000 	nop	{0}
	asm("nop");
 1002514:	e320f000 	nop	{0}
	asm("nop");
 1002518:	e320f000 	nop	{0}
	asm("nop");
 100251c:	e320f000 	nop	{0}
	asm("nop");
 1002520:	e320f000 	nop	{0}
	asm("nop");
 1002524:	e320f000 	nop	{0}
 1002528:	e3a03032 	mov	r3, #50	; 0x32
 100252c:	ea000001 	b	1002538 <fabcfg_init+0x7c>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 1002530:	e2533001 	subs	r3, r3, #1
 1002534:	0a000002 	beq	1002544 <fabcfg_init+0x88>
	return *(volatile u32 *) Addr;
 1002538:	e5912068 	ldr	r2, [r1, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 100253c:	e3120010 	tst	r2, #16
 1002540:	1afffffa 	bne	1002530 <fabcfg_init+0x74>
	*LocalAddr = Value;
 1002544:	e3a02a0a 	mov	r2, #40960	; 0xa000
 1002548:	e3a00000 	mov	r0, #0
 100254c:	e34e2000 	movt	r2, #57344	; 0xe000
 1002550:	e34f0ff7 	movt	r0, #65527	; 0xfff7
	while(timeout--) {
 1002554:	e302370f 	movw	r3, #9999	; 0x270f
	return *(volatile u32 *) Addr;
 1002558:	e1a01002 	mov	r1, r2
	*LocalAddr = Value;
 100255c:	e5820010 	str	r0, [r2, #16]
 1002560:	ea000001 	b	100256c <fabcfg_init+0xb0>
 1002564:	e2533001 	subs	r3, r3, #1
 1002568:	3a000004 	bcc	1002580 <fabcfg_init+0xc4>
	return *(volatile u32 *) Addr;
 100256c:	e5912068 	ldr	r2, [r1, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002570:	e3120010 	tst	r2, #16
 1002574:	0afffffa 	beq	1002564 <fabcfg_init+0xa8>
	if(timeout == 0) {
 1002578:	e3530000 	cmp	r3, #0
 100257c:	0a000103 	beq	1002990 <fabcfg_init+0x4d4>
	bogo_delay(100000);
 1002580:	e30806a0 	movw	r0, #34464	; 0x86a0
 1002584:	e3400001 	movt	r0, #1
 1002588:	eb0002be 	bl	1003088 <bogo_delay>
	*LocalAddr = Value;
 100258c:	e3a01a0a 	mov	r1, #40960	; 0xa000
 1002590:	e3a03008 	mov	r3, #8
 1002594:	e34e1000 	movt	r1, #57344	; 0xe000
 1002598:	e34f3ff7 	movt	r3, #65527	; 0xfff7
 100259c:	e5813010 	str	r3, [r1, #16]
	asm("nop");
 10025a0:	e320f000 	nop	{0}
	asm("nop");
 10025a4:	e320f000 	nop	{0}
	asm("nop");
 10025a8:	e320f000 	nop	{0}
	asm("nop");
 10025ac:	e320f000 	nop	{0}
	asm("nop");
 10025b0:	e320f000 	nop	{0}
	asm("nop");
 10025b4:	e320f000 	nop	{0}
	asm("nop");
 10025b8:	e320f000 	nop	{0}
	asm("nop");
 10025bc:	e320f000 	nop	{0}
 10025c0:	e3a03032 	mov	r3, #50	; 0x32
 10025c4:	ea000001 	b	10025d0 <fabcfg_init+0x114>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 10025c8:	e2533001 	subs	r3, r3, #1
 10025cc:	0a000002 	beq	10025dc <fabcfg_init+0x120>
	return *(volatile u32 *) Addr;
 10025d0:	e5912068 	ldr	r2, [r1, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 10025d4:	e3120010 	tst	r2, #16
 10025d8:	1afffffa 	bne	10025c8 <fabcfg_init+0x10c>
	*LocalAddr = Value;
 10025dc:	e3a02a0a 	mov	r2, #40960	; 0xa000
 10025e0:	e3a00000 	mov	r0, #0
 10025e4:	e34e2000 	movt	r2, #57344	; 0xe000
 10025e8:	e34f0ff7 	movt	r0, #65527	; 0xfff7
	while(timeout--) {
 10025ec:	e302370f 	movw	r3, #9999	; 0x270f
	return *(volatile u32 *) Addr;
 10025f0:	e1a01002 	mov	r1, r2
	*LocalAddr = Value;
 10025f4:	e5820010 	str	r0, [r2, #16]
 10025f8:	ea000001 	b	1002604 <fabcfg_init+0x148>
 10025fc:	e2533001 	subs	r3, r3, #1
 1002600:	3a000004 	bcc	1002618 <fabcfg_init+0x15c>
	return *(volatile u32 *) Addr;
 1002604:	e5912068 	ldr	r2, [r1, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002608:	e3120010 	tst	r2, #16
 100260c:	0afffffa 	beq	10025fc <fabcfg_init+0x140>
	if(timeout == 0) {
 1002610:	e3530000 	cmp	r3, #0
 1002614:	0a0000dd 	beq	1002990 <fabcfg_init+0x4d4>
	dsb();
 1002618:	f57ff04f 	dsb	sy
 100261c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 1002620:	e5932008 	ldr	r2, [r3, #8]
	dsb();
 1002624:	f57ff04f 	dsb	sy
	if(magic == FAB_CFG_MAGIC_VALUE) {
 1002628:	e3073670 	movw	r3, #30320	; 0x7670
 100262c:	e345336d 	movt	r3, #21357	; 0x536d
 1002630:	e1520003 	cmp	r2, r3
 1002634:	1a0000d6 	bne	1002994 <fabcfg_init+0x4d8>
		d_printf(D_INFO, "FabCfg: Magic value: 0x%08x - OK", magic);
 1002638:	e302173c 	movw	r1, #10044	; 0x273c
 100263c:	e3a00002 	mov	r0, #2
 1002640:	e3401101 	movt	r1, #257	; 0x101
	*LocalAddr = Value;
 1002644:	e3a05a0a 	mov	r5, #40960	; 0xa000
 1002648:	eb0002b4 	bl	1003120 <d_printf>
	d_printf(D_INFO, "FabCfg: Running %d test patterns of register interface", FBCFG_NUM_TEST_PATTERNS);
 100264c:	e3021760 	movw	r1, #10080	; 0x2760
 1002650:	e3a02006 	mov	r2, #6
 1002654:	e3401101 	movt	r1, #257	; 0x101
 1002658:	e3a00002 	mov	r0, #2
 100265c:	eb0002af 	bl	1003120 <d_printf>
 1002660:	e3a06008 	mov	r6, #8
 1002664:	e30a3aaa 	movw	r3, #43690	; 0xaaaa
 1002668:	e3058678 	movw	r8, #22136	; 0x5678
 100266c:	e3047321 	movw	r7, #17185	; 0x4321
 1002670:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
 1002674:	e34e5000 	movt	r5, #57344	; 0xe000
 1002678:	e34f6ff7 	movt	r6, #65527	; 0xfff7
 100267c:	e3418234 	movt	r8, #4660	; 0x1234
 1002680:	e3487765 	movt	r7, #34661	; 0x8765
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 1002684:	e3a04000 	mov	r4, #0
	dsb();
 1002688:	f57ff04f 	dsb	sy
 100268c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
 1002690:	e5823000 	str	r3, [r2]
	dsb();
 1002694:	f57ff04f 	dsb	sy
 1002698:	e5856010 	str	r6, [r5, #16]
	asm("nop");
 100269c:	e320f000 	nop	{0}
	asm("nop");
 10026a0:	e320f000 	nop	{0}
	asm("nop");
 10026a4:	e320f000 	nop	{0}
	asm("nop");
 10026a8:	e320f000 	nop	{0}
	asm("nop");
 10026ac:	e320f000 	nop	{0}
	asm("nop");
 10026b0:	e320f000 	nop	{0}
	asm("nop");
 10026b4:	e320f000 	nop	{0}
	asm("nop");
 10026b8:	e320f000 	nop	{0}
 10026bc:	e3a03032 	mov	r3, #50	; 0x32
 10026c0:	ea000001 	b	10026cc <fabcfg_init+0x210>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 10026c4:	e2533001 	subs	r3, r3, #1
 10026c8:	0a000002 	beq	10026d8 <fabcfg_init+0x21c>
	return *(volatile u32 *) Addr;
 10026cc:	e5952068 	ldr	r2, [r5, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 10026d0:	e3120010 	tst	r2, #16
 10026d4:	1afffffa 	bne	10026c4 <fabcfg_init+0x208>
	*LocalAddr = Value;
 10026d8:	e3a02000 	mov	r2, #0
	while(timeout--) {
 10026dc:	e302370f 	movw	r3, #9999	; 0x270f
 10026e0:	e34f2ff7 	movt	r2, #65527	; 0xfff7
 10026e4:	e5852010 	str	r2, [r5, #16]
 10026e8:	ea000001 	b	10026f4 <fabcfg_init+0x238>
 10026ec:	e2533001 	subs	r3, r3, #1
 10026f0:	3a000004 	bcc	1002708 <fabcfg_init+0x24c>
	return *(volatile u32 *) Addr;
 10026f4:	e5952068 	ldr	r2, [r5, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 10026f8:	e3120010 	tst	r2, #16
 10026fc:	0afffffa 	beq	10026ec <fabcfg_init+0x230>
	if(timeout == 0) {
 1002700:	e3530000 	cmp	r3, #0
 1002704:	0a00009b 	beq	1002978 <fabcfg_init+0x4bc>
	dsb();
 1002708:	f57ff04f 	dsb	sy
 100270c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 1002710:	e5932000 	ldr	r2, [r3]
	dsb();
 1002714:	f57ff04f 	dsb	sy
		if(test == fbcfg_dummy_tests[i]) {
 1002718:	e30194f0 	movw	r9, #5360	; 0x14f0
 100271c:	e3409101 	movt	r9, #257	; 0x101
 1002720:	e7993104 	ldr	r3, [r9, r4, lsl #2]
 1002724:	e1530002 	cmp	r3, r2
 1002728:	0a000070 	beq	10028f0 <fabcfg_init+0x434>
			d_printf(D_ERROR, "FabCfg: DummyTest1 value: 0x%08x - Not OK, Expect 0x%08x", test, fbcfg_dummy_tests[i]);
 100272c:	e30217f4 	movw	r1, #10228	; 0x27f4
 1002730:	e3a00004 	mov	r0, #4
 1002734:	e3401101 	movt	r1, #257	; 0x101
 1002738:	eb000278 	bl	1003120 <d_printf>
	*LocalAddr = Value;
 100273c:	e5856010 	str	r6, [r5, #16]
	asm("nop");
 1002740:	e320f000 	nop	{0}
	asm("nop");
 1002744:	e320f000 	nop	{0}
	asm("nop");
 1002748:	e320f000 	nop	{0}
	asm("nop");
 100274c:	e320f000 	nop	{0}
	asm("nop");
 1002750:	e320f000 	nop	{0}
	asm("nop");
 1002754:	e320f000 	nop	{0}
	asm("nop");
 1002758:	e320f000 	nop	{0}
	asm("nop");
 100275c:	e320f000 	nop	{0}
 1002760:	e3a03032 	mov	r3, #50	; 0x32
 1002764:	ea000001 	b	1002770 <fabcfg_init+0x2b4>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 1002768:	e2533001 	subs	r3, r3, #1
 100276c:	0a000002 	beq	100277c <fabcfg_init+0x2c0>
	return *(volatile u32 *) Addr;
 1002770:	e5952068 	ldr	r2, [r5, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002774:	e3120010 	tst	r2, #16
 1002778:	1afffffa 	bne	1002768 <fabcfg_init+0x2ac>
	*LocalAddr = Value;
 100277c:	e3a02000 	mov	r2, #0
	while(timeout--) {
 1002780:	e302370f 	movw	r3, #9999	; 0x270f
 1002784:	e34f2ff7 	movt	r2, #65527	; 0xfff7
 1002788:	e5852010 	str	r2, [r5, #16]
 100278c:	ea000001 	b	1002798 <fabcfg_init+0x2dc>
 1002790:	e2533001 	subs	r3, r3, #1
 1002794:	3a000005 	bcc	10027b0 <fabcfg_init+0x2f4>
	return *(volatile u32 *) Addr;
 1002798:	e5954068 	ldr	r4, [r5, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 100279c:	e2144010 	ands	r4, r4, #16
 10027a0:	0afffffa 	beq	1002790 <fabcfg_init+0x2d4>
	if(timeout == 0) {
 10027a4:	e3530000 	cmp	r3, #0
 10027a8:	0a000072 	beq	1002978 <fabcfg_init+0x4bc>
			i = 0;
 10027ac:	e3a04000 	mov	r4, #0
	dsb();
 10027b0:	f57ff04f 	dsb	sy
 10027b4:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 10027b8:	e5932004 	ldr	r2, [r3, #4]
	dsb();
 10027bc:	f57ff04f 	dsb	sy
		if(test == fbcfg_dummy_tests[i]) {
 10027c0:	e7993104 	ldr	r3, [r9, r4, lsl #2]
 10027c4:	e1530002 	cmp	r3, r2
 10027c8:	0a00004e 	beq	1002908 <fabcfg_init+0x44c>
			d_printf(D_ERROR, "FabCfg: DummyTest2 value: 0x%08x - Not OK, Expect 0x%08x", test, fbcfg_dummy_tests[i]);
 10027cc:	e3021858 	movw	r1, #10328	; 0x2858
 10027d0:	e3a00004 	mov	r0, #4
 10027d4:	e3401101 	movt	r1, #257	; 0x101
 10027d8:	eb000250 	bl	1003120 <d_printf>
	*LocalAddr = Value;
 10027dc:	e5856010 	str	r6, [r5, #16]
	asm("nop");
 10027e0:	e320f000 	nop	{0}
	asm("nop");
 10027e4:	e320f000 	nop	{0}
	asm("nop");
 10027e8:	e320f000 	nop	{0}
	asm("nop");
 10027ec:	e320f000 	nop	{0}
	asm("nop");
 10027f0:	e320f000 	nop	{0}
	asm("nop");
 10027f4:	e320f000 	nop	{0}
	asm("nop");
 10027f8:	e320f000 	nop	{0}
	asm("nop");
 10027fc:	e320f000 	nop	{0}
 1002800:	e3a03032 	mov	r3, #50	; 0x32
 1002804:	ea000001 	b	1002810 <fabcfg_init+0x354>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 1002808:	e2533001 	subs	r3, r3, #1
 100280c:	0a000002 	beq	100281c <fabcfg_init+0x360>
	return *(volatile u32 *) Addr;
 1002810:	e5952068 	ldr	r2, [r5, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002814:	e3120010 	tst	r2, #16
 1002818:	1afffffa 	bne	1002808 <fabcfg_init+0x34c>
	*LocalAddr = Value;
 100281c:	e3a02000 	mov	r2, #0
	while(timeout--) {
 1002820:	e302370f 	movw	r3, #9999	; 0x270f
 1002824:	e34f2ff7 	movt	r2, #65527	; 0xfff7
 1002828:	e5852010 	str	r2, [r5, #16]
 100282c:	ea000001 	b	1002838 <fabcfg_init+0x37c>
 1002830:	e2533001 	subs	r3, r3, #1
 1002834:	3a000005 	bcc	1002850 <fabcfg_init+0x394>
	return *(volatile u32 *) Addr;
 1002838:	e5954068 	ldr	r4, [r5, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 100283c:	e2144010 	ands	r4, r4, #16
 1002840:	0afffffa 	beq	1002830 <fabcfg_init+0x374>
	if(timeout == 0) {
 1002844:	e3530000 	cmp	r3, #0
 1002848:	0a00004a 	beq	1002978 <fabcfg_init+0x4bc>
			i = 0;
 100284c:	e3a04000 	mov	r4, #0
	dsb();
 1002850:	f57ff04f 	dsb	sy
	*LocalAddr = Value;
 1002854:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 1002858:	e5838000 	str	r8, [r3]
	dsb();
 100285c:	f57ff04f 	dsb	sy
	dsb();
 1002860:	f57ff04f 	dsb	sy
 1002864:	e5837004 	str	r7, [r3, #4]
	dsb();
 1002868:	f57ff04f 	dsb	sy
 100286c:	e5856010 	str	r6, [r5, #16]
	asm("nop");
 1002870:	e320f000 	nop	{0}
	asm("nop");
 1002874:	e320f000 	nop	{0}
	asm("nop");
 1002878:	e320f000 	nop	{0}
	asm("nop");
 100287c:	e320f000 	nop	{0}
	asm("nop");
 1002880:	e320f000 	nop	{0}
	asm("nop");
 1002884:	e320f000 	nop	{0}
	asm("nop");
 1002888:	e320f000 	nop	{0}
	asm("nop");
 100288c:	e320f000 	nop	{0}
 1002890:	e3a03032 	mov	r3, #50	; 0x32
 1002894:	ea000001 	b	10028a0 <fabcfg_init+0x3e4>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 1002898:	e2533001 	subs	r3, r3, #1
 100289c:	0a000002 	beq	10028ac <fabcfg_init+0x3f0>
	return *(volatile u32 *) Addr;
 10028a0:	e5952068 	ldr	r2, [r5, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 10028a4:	e3120010 	tst	r2, #16
 10028a8:	1afffffa 	bne	1002898 <fabcfg_init+0x3dc>
	*LocalAddr = Value;
 10028ac:	e3a02000 	mov	r2, #0
	while(timeout--) {
 10028b0:	e302370f 	movw	r3, #9999	; 0x270f
 10028b4:	e34f2ff7 	movt	r2, #65527	; 0xfff7
 10028b8:	e5852010 	str	r2, [r5, #16]
 10028bc:	ea000001 	b	10028c8 <fabcfg_init+0x40c>
 10028c0:	e2533001 	subs	r3, r3, #1
 10028c4:	3a000004 	bcc	10028dc <fabcfg_init+0x420>
	return *(volatile u32 *) Addr;
 10028c8:	e5952068 	ldr	r2, [r5, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 10028cc:	e3120010 	tst	r2, #16
 10028d0:	0afffffa 	beq	10028c0 <fabcfg_init+0x404>
	if(timeout == 0) {
 10028d4:	e3530000 	cmp	r3, #0
 10028d8:	0a000026 	beq	1002978 <fabcfg_init+0x4bc>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 10028dc:	e2844001 	add	r4, r4, #1
 10028e0:	e3540006 	cmp	r4, #6
 10028e4:	0a00000d 	beq	1002920 <fabcfg_init+0x464>
 10028e8:	e7993104 	ldr	r3, [r9, r4, lsl #2]
 10028ec:	eaffff65 	b	1002688 <fabcfg_init+0x1cc>
			d_printf(D_EXINFO, "FabCfg: DummyTest1 value: 0x%08x - OK", test);
 10028f0:	e30217cc 	movw	r1, #10188	; 0x27cc
 10028f4:	e1a02003 	mov	r2, r3
 10028f8:	e3401101 	movt	r1, #257	; 0x101
 10028fc:	e3a00001 	mov	r0, #1
 1002900:	eb000206 	bl	1003120 <d_printf>
 1002904:	eaffffa9 	b	10027b0 <fabcfg_init+0x2f4>
			d_printf(D_EXINFO, "FabCfg: DummyTest2 value: 0x%08x - OK", test);
 1002908:	e3021830 	movw	r1, #10288	; 0x2830
 100290c:	e1a02003 	mov	r2, r3
 1002910:	e3401101 	movt	r1, #257	; 0x101
 1002914:	e3a00001 	mov	r0, #1
 1002918:	eb000200 	bl	1003120 <d_printf>
 100291c:	eaffffcb 	b	1002850 <fabcfg_init+0x394>
	d_printf(D_INFO, "FabCfg: All tests passed");
 1002920:	e3021894 	movw	r1, #10388	; 0x2894
 1002924:	e3a00002 	mov	r0, #2
 1002928:	e3401101 	movt	r1, #257	; 0x101
 100292c:	eb0001fb 	bl	1003120 <d_printf>
	dsb();
 1002930:	f57ff04f 	dsb	sy
 1002934:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 1002938:	e593200c 	ldr	r2, [r3, #12]
	dsb();
 100293c:	f57ff04f 	dsb	sy
	dsb();
 1002940:	f57ff04f 	dsb	sy
 1002944:	e5933010 	ldr	r3, [r3, #16]
	dsb();
 1002948:	f57ff04f 	dsb	sy
	ver_uh = (version & 0xffff0000) >> 16;
 100294c:	e1a00822 	lsr	r0, r2, #16
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 1002950:	e30218b0 	movw	r1, #10416	; 0x28b0
 1002954:	e58d3004 	str	r3, [sp, #4]
 1002958:	e3401101 	movt	r1, #257	; 0x101
 100295c:	e6ef3072 	uxtb	r3, r2
 1002960:	e58d0000 	str	r0, [sp]
 1002964:	e7e72452 	ubfx	r2, r2, #8, #8
 1002968:	e3a00002 	mov	r0, #2
 100296c:	eb0001eb 	bl	1003120 <d_printf>
}
 1002970:	e28dd00c 	add	sp, sp, #12
 1002974:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		d_printf(D_ERROR, "FabCfg: Timeout waiting for fabric to respond to COMMIT");
 1002978:	e3021704 	movw	r1, #9988	; 0x2704
 100297c:	e3a00004 	mov	r0, #4
 1002980:	e3401101 	movt	r1, #257	; 0x101
 1002984:	eb0001e5 	bl	1003120 <d_printf>
		exit(-1);
 1002988:	e3e00000 	mvn	r0, #0
 100298c:	fa001c8f 	blx	1009bd0 <exit>
 1002990:	ebfffec2 	bl	10024a0 <fabcfg_fastcfg_wait.part.0>
		d_printf(D_ERROR, "FabCfg: Magic value: 0x%08x - Not OK, Expect 0x%08x", magic, FAB_CFG_MAGIC_VALUE);
 1002994:	e3021798 	movw	r1, #10136	; 0x2798
 1002998:	e3a00004 	mov	r0, #4
 100299c:	e3401101 	movt	r1, #257	; 0x101
 10029a0:	eb0001de 	bl	1003120 <d_printf>
		exit(-1);
 10029a4:	e3e00000 	mvn	r0, #0
 10029a8:	fa001c88 	blx	1009bd0 <exit>
 10029ac:	01019b3c 	.word	0x01019b3c

010029b0 <fabcfg_read>:
	dsb();
 10029b0:	f57ff04f 	dsb	sy
	reg &= FAB_CFG_ADDR_MASK;
 10029b4:	e7eb0050 	ubfx	r0, r0, #0, #12
	res = Xil_In32(AXI_CFG_BRAM_BASE_ADDRESS + (reg * 4));
 10029b8:	e2800201 	add	r0, r0, #268435456	; 0x10000000
 10029bc:	e1a00100 	lsl	r0, r0, #2
 10029c0:	e5900000 	ldr	r0, [r0]
	dsb();
 10029c4:	f57ff04f 	dsb	sy
}
 10029c8:	e12fff1e 	bx	lr

010029cc <fabcfg_write>:
	dsb();
 10029cc:	f57ff04f 	dsb	sy
	reg &= FAB_CFG_ADDR_MASK;
 10029d0:	e7eb0050 	ubfx	r0, r0, #0, #12
	Xil_Out32(AXI_CFG_BRAM_BASE_ADDRESS + (reg * 4), data);
 10029d4:	e2800201 	add	r0, r0, #268435456	; 0x10000000
 10029d8:	e1a00100 	lsl	r0, r0, #2
	*LocalAddr = Value;
 10029dc:	e5801000 	str	r1, [r0]
	dsb();
 10029e0:	f57ff04f 	dsb	sy
}
 10029e4:	e12fff1e 	bx	lr

010029e8 <fabcfg_commit>:
 10029e8:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10029ec:	e3a02008 	mov	r2, #8
 10029f0:	e34e3000 	movt	r3, #57344	; 0xe000
 10029f4:	e34f2ff7 	movt	r2, #65527	; 0xfff7
 10029f8:	e5832010 	str	r2, [r3, #16]
	asm("nop");
 10029fc:	e320f000 	nop	{0}
	asm("nop");
 1002a00:	e320f000 	nop	{0}
	asm("nop");
 1002a04:	e320f000 	nop	{0}
	asm("nop");
 1002a08:	e320f000 	nop	{0}
	asm("nop");
 1002a0c:	e320f000 	nop	{0}
	asm("nop");
 1002a10:	e320f000 	nop	{0}
	asm("nop");
 1002a14:	e320f000 	nop	{0}
	asm("nop");
 1002a18:	e320f000 	nop	{0}
 1002a1c:	e3a02032 	mov	r2, #50	; 0x32
 1002a20:	ea000001 	b	1002a2c <fabcfg_commit+0x44>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 1002a24:	e2522001 	subs	r2, r2, #1
 1002a28:	0a000002 	beq	1002a38 <fabcfg_commit+0x50>
	return *(volatile u32 *) Addr;
 1002a2c:	e5931068 	ldr	r1, [r3, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002a30:	e3110010 	tst	r1, #16
 1002a34:	1afffffa 	bne	1002a24 <fabcfg_commit+0x3c>
	*LocalAddr = Value;
 1002a38:	e3a02a0a 	mov	r2, #40960	; 0xa000
 1002a3c:	e3a01000 	mov	r1, #0
 1002a40:	e34e2000 	movt	r2, #57344	; 0xe000
 1002a44:	e34f1ff7 	movt	r1, #65527	; 0xfff7
	while(timeout--) {
 1002a48:	e302370f 	movw	r3, #9999	; 0x270f
	return *(volatile u32 *) Addr;
 1002a4c:	e1a00002 	mov	r0, r2
	*LocalAddr = Value;
 1002a50:	e5821010 	str	r1, [r2, #16]
 1002a54:	ea000001 	b	1002a60 <fabcfg_commit+0x78>
 1002a58:	e2533001 	subs	r3, r3, #1
 1002a5c:	312fff1e 	bxcc	lr
	return *(volatile u32 *) Addr;
 1002a60:	e5902068 	ldr	r2, [r0, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002a64:	e3120010 	tst	r2, #16
 1002a68:	0afffffa 	beq	1002a58 <fabcfg_commit+0x70>
	if(timeout == 0) {
 1002a6c:	e3530000 	cmp	r3, #0
 1002a70:	112fff1e 	bxne	lr
{
 1002a74:	e92d4010 	push	{r4, lr}
 1002a78:	ebfffe88 	bl	10024a0 <fabcfg_fastcfg_wait.part.0>

01002a7c <fabcfg_fastcfg_start>:
	*LocalAddr = Value;
 1002a7c:	e3a01a0a 	mov	r1, #40960	; 0xa000
 1002a80:	e3a03008 	mov	r3, #8
 1002a84:	e34e1000 	movt	r1, #57344	; 0xe000
 1002a88:	e34f3ff7 	movt	r3, #65527	; 0xfff7
 1002a8c:	e5813010 	str	r3, [r1, #16]
	asm("nop");
 1002a90:	e320f000 	nop	{0}
	asm("nop");
 1002a94:	e320f000 	nop	{0}
	asm("nop");
 1002a98:	e320f000 	nop	{0}
	asm("nop");
 1002a9c:	e320f000 	nop	{0}
	asm("nop");
 1002aa0:	e320f000 	nop	{0}
	asm("nop");
 1002aa4:	e320f000 	nop	{0}
	asm("nop");
 1002aa8:	e320f000 	nop	{0}
	asm("nop");
 1002aac:	e320f000 	nop	{0}
 1002ab0:	e3a03032 	mov	r3, #50	; 0x32
 1002ab4:	ea000001 	b	1002ac0 <fabcfg_fastcfg_start+0x44>
	for(i = 0; i < FAB_CFG_COMMIT_TIME; i++) {
 1002ab8:	e2533001 	subs	r3, r3, #1
 1002abc:	0a000002 	beq	1002acc <fabcfg_fastcfg_start+0x50>
	return *(volatile u32 *) Addr;
 1002ac0:	e5912068 	ldr	r2, [r1, #104]	; 0x68
		if(!emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002ac4:	e3120010 	tst	r2, #16
 1002ac8:	1afffffa 	bne	1002ab8 <fabcfg_fastcfg_start+0x3c>
	*LocalAddr = Value;
 1002acc:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1002ad0:	e3a02000 	mov	r2, #0
 1002ad4:	e34e3000 	movt	r3, #57344	; 0xe000
 1002ad8:	e34f2ff7 	movt	r2, #65527	; 0xfff7
 1002adc:	e5832010 	str	r2, [r3, #16]
}
 1002ae0:	e12fff1e 	bx	lr

01002ae4 <fabcfg_fastcfg_wait>:
	return *(volatile u32 *) Addr;
 1002ae4:	e3a01a0a 	mov	r1, #40960	; 0xa000
	while(timeout--) {
 1002ae8:	e302370f 	movw	r3, #9999	; 0x270f
 1002aec:	e34e1000 	movt	r1, #57344	; 0xe000
 1002af0:	ea000001 	b	1002afc <fabcfg_fastcfg_wait+0x18>
 1002af4:	e2533001 	subs	r3, r3, #1
 1002af8:	312fff1e 	bxcc	lr
 1002afc:	e5912068 	ldr	r2, [r1, #104]	; 0x68
		if(emio_fast_read(FAB_CFG_EMIO_DONE)) {
 1002b00:	e3120010 	tst	r2, #16
 1002b04:	0afffffa 	beq	1002af4 <fabcfg_fastcfg_wait+0x10>
	if(timeout == 0) {
 1002b08:	e3530000 	cmp	r3, #0
 1002b0c:	112fff1e 	bxne	lr
{
 1002b10:	e92d4010 	push	{r4, lr}
 1002b14:	ebfffe61 	bl	10024a0 <fabcfg_fastcfg_wait.part.0>

01002b18 <irq_xscutimer>:
 */
volatile void irq_xscutimer(void *callback)
{
	XScuTimer *timer = (XScuTimer *) callback;

	if(XScuTimer_IsExpired(timer)) {
 1002b18:	e5903004 	ldr	r3, [r0, #4]
 1002b1c:	e593300c 	ldr	r3, [r3, #12]
 1002b20:	e3130001 	tst	r3, #1
		g_hal.g_timer_overflow++;
 1002b24:	13093b18 	movwne	r3, #39704	; 0x9b18
 1002b28:	13403101 	movtne	r3, #257	; 0x101
 1002b2c:	1593204c 	ldrne	r2, [r3, #76]	; 0x4c
 1002b30:	12822001 	addne	r2, r2, #1
 1002b34:	1583204c 	strne	r2, [r3, #76]	; 0x4c
	}
}
 1002b38:	e12fff1e 	bx	lr

01002b3c <d_printf.constprop.1>:
 * @param	...			Varadic args
 *
 * @note	For formats besides D_RAW, this function appends \r\n to all outputs and prints info/warn/error code and
 * 			optionally prints the system timer.
 */
void d_printf(int debug_code, char *fmt, ...)
 1002b3c:	e92d000e 	push	{r1, r2, r3}
			case D_EXINFO:
				print("[--] ");							// dull white text (default)
				break;

			case D_INFO:
				print("\033[0;97m[ii] "); 				// bright white text
 1002b40:	e30208f0 	movw	r0, #10480	; 0x28f0
void d_printf(int debug_code, char *fmt, ...)
 1002b44:	e92d40d0 	push	{r4, r6, r7, lr}
 1002b48:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1002b4c:	e24dd01c 	sub	sp, sp, #28
				print("\033[0;97m[ii] "); 				// bright white text
 1002b50:	e3400101 	movt	r0, #257	; 0x101
 1002b54:	eb001443 	bl	1007c68 <print>
				print("\033[97;41m[EE]\033[0;91m ");	// red text
				break;
		}

#if DBG_PRINT_TIMES == 1
		if(g_hal.g_timer_have_init) {
 1002b58:	e3093b18 	movw	r3, #39704	; 0x9b18
 1002b5c:	e3403101 	movt	r3, #257	; 0x101
 1002b60:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 1002b64:	e3540000 	cmp	r4, #0
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
			sec = total_usec / 1000000;
			usec = total_usec % 1000000;
		} else {
			sec = 0;
			usec = 0;
 1002b68:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 1002b6c:	0a00001b 	beq	1002be0 <d_printf.constprop.1+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1002b70:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002b74:	eddf3b37 	vldr	d19, [pc, #220]	; 1002c58 <d_printf.constprop.1+0x11c>
 1002b78:	eddf2b38 	vldr	d18, [pc, #224]	; 1002c60 <d_printf.constprop.1+0x124>
 1002b7c:	e5922004 	ldr	r2, [r2, #4]
 1002b80:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1002b84:	e1e02002 	mvn	r2, r2
 1002b88:	ee073a90 	vmov	s15, r3
 1002b8c:	eef80b67 	vcvt.f64.u32	d16, s15
 1002b90:	ee072a90 	vmov	s15, r2
 1002b94:	eef81b67 	vcvt.f64.u32	d17, s15
 1002b98:	ee600ba3 	vmul.f64	d16, d16, d19
 1002b9c:	ee410ba2 	vmla.f64	d16, d17, d18
 1002ba0:	ec510b30 	vmov	r0, r1, d16
 1002ba4:	fa001bb3 	blx	1009a78 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 1002ba8:	e3042240 	movw	r2, #16960	; 0x4240
 1002bac:	e3a03000 	mov	r3, #0
 1002bb0:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002bb4:	e1a06000 	mov	r6, r0
 1002bb8:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 1002bbc:	fa001b91 	blx	1009a08 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 1002bc0:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 1002bc4:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 1002bc8:	e340200f 	movt	r2, #15
 1002bcc:	e3a03000 	mov	r3, #0
 1002bd0:	e1a00006 	mov	r0, r6
 1002bd4:	e1a01007 	mov	r1, r7
 1002bd8:	fa001b8a 	blx	1009a08 <__aeabi_uldivmod>
 1002bdc:	e1a03002 	mov	r3, r2
		}

		if(debug_code != D_RAW) {
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1002be0:	e3022900 	movw	r2, #10496	; 0x2900
 1002be4:	e58d3000 	str	r3, [sp]
 1002be8:	e3402101 	movt	r2, #257	; 0x101
 1002bec:	e1a03004 	mov	r3, r4
 1002bf0:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002bf4:	e28d000c 	add	r0, sp, #12
 1002bf8:	fa00233d 	blx	100b8f4 <snprintf>
			print(time_buffer);
 1002bfc:	e28d000c 	add	r0, sp, #12
 1002c00:	eb001418 	bl	1007c68 <print>
		}
#endif

		va_list args;
		va_start(args, fmt);
 1002c04:	e28dca01 	add	ip, sp, #4096	; 0x1000

		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002c08:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1002c0c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002c10:	e282202c 	add	r2, r2, #44	; 0x2c
 1002c14:	e1a0300c 	mov	r3, ip
 1002c18:	e5922000 	ldr	r2, [r2]
 1002c1c:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002c20:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 1002c24:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002c28:	fa002ca0 	blx	100deb0 <vsnprintf>
		print(buffer);
 1002c2c:	e28d0018 	add	r0, sp, #24
 1002c30:	eb00140c 	bl	1007c68 <print>

		if(debug_code != D_RAW) {
			print("\033[m\r\n");
 1002c34:	e302090c 	movw	r0, #10508	; 0x290c
 1002c38:	e3400101 	movt	r0, #257	; 0x101
 1002c3c:	eb001409 	bl	1007c68 <print>
		}

		va_end(args);
	}
}
 1002c40:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1002c44:	e28dd01c 	add	sp, sp, #28
 1002c48:	e8bd40d0 	pop	{r4, r6, r7, lr}
 1002c4c:	e28dd00c 	add	sp, sp, #12
 1002c50:	e12fff1e 	bx	lr
 1002c54:	e320f000 	nop	{0}
 1002c58:	a17f0000 	.word	0xa17f0000
 1002c5c:	41689374 	.word	0x41689374
 1002c60:	a17f0000 	.word	0xa17f0000
 1002c64:	3f689374 	.word	0x3f689374

01002c68 <d_printf.constprop.2>:
void d_printf(int debug_code, char *fmt, ...)
 1002c68:	e92d000e 	push	{r1, r2, r3}
				print("[--] ");							// dull white text (default)
 1002c6c:	e3020914 	movw	r0, #10516	; 0x2914
void d_printf(int debug_code, char *fmt, ...)
 1002c70:	e92d40d0 	push	{r4, r6, r7, lr}
 1002c74:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1002c78:	e24dd01c 	sub	sp, sp, #28
				print("[--] ");							// dull white text (default)
 1002c7c:	e3400101 	movt	r0, #257	; 0x101
 1002c80:	eb0013f8 	bl	1007c68 <print>
		if(g_hal.g_timer_have_init) {
 1002c84:	e3093b18 	movw	r3, #39704	; 0x9b18
 1002c88:	e3403101 	movt	r3, #257	; 0x101
 1002c8c:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 1002c90:	e3540000 	cmp	r4, #0
			usec = 0;
 1002c94:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 1002c98:	0a00001b 	beq	1002d0c <d_printf.constprop.2+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1002c9c:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002ca0:	eddf3b36 	vldr	d19, [pc, #216]	; 1002d80 <d_printf.constprop.2+0x118>
 1002ca4:	eddf2b37 	vldr	d18, [pc, #220]	; 1002d88 <d_printf.constprop.2+0x120>
 1002ca8:	e5922004 	ldr	r2, [r2, #4]
 1002cac:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1002cb0:	e1e02002 	mvn	r2, r2
 1002cb4:	ee073a90 	vmov	s15, r3
 1002cb8:	eef80b67 	vcvt.f64.u32	d16, s15
 1002cbc:	ee072a90 	vmov	s15, r2
 1002cc0:	eef81b67 	vcvt.f64.u32	d17, s15
 1002cc4:	ee600ba3 	vmul.f64	d16, d16, d19
 1002cc8:	ee410ba2 	vmla.f64	d16, d17, d18
 1002ccc:	ec510b30 	vmov	r0, r1, d16
 1002cd0:	fa001b68 	blx	1009a78 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 1002cd4:	e3042240 	movw	r2, #16960	; 0x4240
 1002cd8:	e3a03000 	mov	r3, #0
 1002cdc:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002ce0:	e1a06000 	mov	r6, r0
 1002ce4:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 1002ce8:	fa001b46 	blx	1009a08 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 1002cec:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 1002cf0:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 1002cf4:	e340200f 	movt	r2, #15
 1002cf8:	e3a03000 	mov	r3, #0
 1002cfc:	e1a00006 	mov	r0, r6
 1002d00:	e1a01007 	mov	r1, r7
 1002d04:	fa001b3f 	blx	1009a08 <__aeabi_uldivmod>
 1002d08:	e1a03002 	mov	r3, r2
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1002d0c:	e3022900 	movw	r2, #10496	; 0x2900
 1002d10:	e58d3000 	str	r3, [sp]
 1002d14:	e3402101 	movt	r2, #257	; 0x101
 1002d18:	e1a03004 	mov	r3, r4
 1002d1c:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002d20:	e28d000c 	add	r0, sp, #12
 1002d24:	fa0022f2 	blx	100b8f4 <snprintf>
			print(time_buffer);
 1002d28:	e28d000c 	add	r0, sp, #12
 1002d2c:	eb0013cd 	bl	1007c68 <print>
		va_start(args, fmt);
 1002d30:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002d34:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1002d38:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002d3c:	e282202c 	add	r2, r2, #44	; 0x2c
 1002d40:	e1a0300c 	mov	r3, ip
 1002d44:	e5922000 	ldr	r2, [r2]
 1002d48:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002d4c:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 1002d50:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002d54:	fa002c55 	blx	100deb0 <vsnprintf>
		print(buffer);
 1002d58:	e28d0018 	add	r0, sp, #24
 1002d5c:	eb0013c1 	bl	1007c68 <print>
			print("\033[m\r\n");
 1002d60:	e302090c 	movw	r0, #10508	; 0x290c
 1002d64:	e3400101 	movt	r0, #257	; 0x101
 1002d68:	eb0013be 	bl	1007c68 <print>
}
 1002d6c:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1002d70:	e28dd01c 	add	sp, sp, #28
 1002d74:	e8bd40d0 	pop	{r4, r6, r7, lr}
 1002d78:	e28dd00c 	add	sp, sp, #12
 1002d7c:	e12fff1e 	bx	lr
 1002d80:	a17f0000 	.word	0xa17f0000
 1002d84:	41689374 	.word	0x41689374
 1002d88:	a17f0000 	.word	0xa17f0000
 1002d8c:	3f689374 	.word	0x3f689374

01002d90 <d_printf.constprop.3>:
void d_printf(int debug_code, char *fmt, ...)
 1002d90:	e92d000e 	push	{r1, r2, r3}
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1002d94:	e302091c 	movw	r0, #10524	; 0x291c
void d_printf(int debug_code, char *fmt, ...)
 1002d98:	e92d40d0 	push	{r4, r6, r7, lr}
 1002d9c:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1002da0:	e24dd01c 	sub	sp, sp, #28
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1002da4:	e3400101 	movt	r0, #257	; 0x101
 1002da8:	eb0013ae 	bl	1007c68 <print>
		if(g_hal.g_timer_have_init) {
 1002dac:	e3093b18 	movw	r3, #39704	; 0x9b18
 1002db0:	e3403101 	movt	r3, #257	; 0x101
 1002db4:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 1002db8:	e3540000 	cmp	r4, #0
			usec = 0;
 1002dbc:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 1002dc0:	0a00001b 	beq	1002e34 <d_printf.constprop.3+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1002dc4:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002dc8:	eddf3b36 	vldr	d19, [pc, #216]	; 1002ea8 <d_printf.constprop.3+0x118>
 1002dcc:	eddf2b37 	vldr	d18, [pc, #220]	; 1002eb0 <d_printf.constprop.3+0x120>
 1002dd0:	e5922004 	ldr	r2, [r2, #4]
 1002dd4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1002dd8:	e1e02002 	mvn	r2, r2
 1002ddc:	ee073a90 	vmov	s15, r3
 1002de0:	eef80b67 	vcvt.f64.u32	d16, s15
 1002de4:	ee072a90 	vmov	s15, r2
 1002de8:	eef81b67 	vcvt.f64.u32	d17, s15
 1002dec:	ee600ba3 	vmul.f64	d16, d16, d19
 1002df0:	ee410ba2 	vmla.f64	d16, d17, d18
 1002df4:	ec510b30 	vmov	r0, r1, d16
 1002df8:	fa001b1e 	blx	1009a78 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 1002dfc:	e3042240 	movw	r2, #16960	; 0x4240
 1002e00:	e3a03000 	mov	r3, #0
 1002e04:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002e08:	e1a06000 	mov	r6, r0
 1002e0c:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 1002e10:	fa001afc 	blx	1009a08 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 1002e14:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 1002e18:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 1002e1c:	e340200f 	movt	r2, #15
 1002e20:	e3a03000 	mov	r3, #0
 1002e24:	e1a00006 	mov	r0, r6
 1002e28:	e1a01007 	mov	r1, r7
 1002e2c:	fa001af5 	blx	1009a08 <__aeabi_uldivmod>
 1002e30:	e1a03002 	mov	r3, r2
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1002e34:	e3022900 	movw	r2, #10496	; 0x2900
 1002e38:	e58d3000 	str	r3, [sp]
 1002e3c:	e3402101 	movt	r2, #257	; 0x101
 1002e40:	e1a03004 	mov	r3, r4
 1002e44:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002e48:	e28d000c 	add	r0, sp, #12
 1002e4c:	fa0022a8 	blx	100b8f4 <snprintf>
			print(time_buffer);
 1002e50:	e28d000c 	add	r0, sp, #12
 1002e54:	eb001383 	bl	1007c68 <print>
		va_start(args, fmt);
 1002e58:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002e5c:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1002e60:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002e64:	e282202c 	add	r2, r2, #44	; 0x2c
 1002e68:	e1a0300c 	mov	r3, ip
 1002e6c:	e5922000 	ldr	r2, [r2]
 1002e70:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002e74:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 1002e78:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002e7c:	fa002c0b 	blx	100deb0 <vsnprintf>
		print(buffer);
 1002e80:	e28d0018 	add	r0, sp, #24
 1002e84:	eb001377 	bl	1007c68 <print>
			print("\033[m\r\n");
 1002e88:	e302090c 	movw	r0, #10508	; 0x290c
 1002e8c:	e3400101 	movt	r0, #257	; 0x101
 1002e90:	eb001374 	bl	1007c68 <print>
}
 1002e94:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1002e98:	e28dd01c 	add	sp, sp, #28
 1002e9c:	e8bd40d0 	pop	{r4, r6, r7, lr}
 1002ea0:	e28dd00c 	add	sp, sp, #12
 1002ea4:	e12fff1e 	bx	lr
 1002ea8:	a17f0000 	.word	0xa17f0000
 1002eac:	41689374 	.word	0x41689374
 1002eb0:	a17f0000 	.word	0xa17f0000
 1002eb4:	3f689374 	.word	0x3f689374

01002eb8 <d_xilinx_assert>:
/**
 * Xilinx assert handler.
 */
void d_xilinx_assert(const char8 *file, s32 line)
{
	d_printf(D_ERROR, "Assert failed at line %d of file `%s'\r\n", line, file);
 1002eb8:	e1a02001 	mov	r2, r1
 1002ebc:	e3021934 	movw	r1, #10548	; 0x2934
 1002ec0:	e1a03000 	mov	r3, r0
 1002ec4:	e3401101 	movt	r1, #257	; 0x101
 1002ec8:	e3a00004 	mov	r0, #4
 1002ecc:	eaffffaf 	b	1002d90 <d_printf.constprop.3>

01002ed0 <bogo_calibrate>:
	d_printf(D_EXINFO, "BogoDelay: starting calibration");
 1002ed0:	e302195c 	movw	r1, #10588	; 0x295c
{
 1002ed4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_EXINFO, "BogoDelay: starting calibration");
 1002ed8:	e3401101 	movt	r1, #257	; 0x101
{
 1002edc:	ed2d8b02 	vpush	{d8}
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1002ee0:	e3096b18 	movw	r6, #39704	; 0x9b18
{
 1002ee4:	e24dd024 	sub	sp, sp, #36	; 0x24
	d_printf(D_EXINFO, "BogoDelay: starting calibration");
 1002ee8:	e3a00001 	mov	r0, #1
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1002eec:	e3406101 	movt	r6, #257	; 0x101
	d_printf(D_EXINFO, "BogoDelay: starting calibration");
 1002ef0:	ebffff5c 	bl	1002c68 <d_printf.constprop.2>
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1002ef4:	e3a03002 	mov	r3, #2
 1002ef8:	e596a014 	ldr	sl, [r6, #20]
 1002efc:	e58d3010 	str	r3, [sp, #16]
 1002f00:	e3a03000 	mov	r3, #0
 1002f04:	e3443020 	movt	r3, #16416	; 0x4020
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1002f08:	ed9f8a5c 	vldr	s16, [pc, #368]	; 1003080 <bogo_calibrate+0x1b0>
	uint64_t timing_total = 0;
 1002f0c:	e3a0b000 	mov	fp, #0
 1002f10:	e28aa004 	add	sl, sl, #4
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1002f14:	ee073a90 	vmov	s15, r3
	uint64_t timing_total = 0;
 1002f18:	e1a0200b 	mov	r2, fp
	while(iters--) {
 1002f1c:	e3e08000 	mvn	r8, #0
 1002f20:	e3e09000 	mvn	r9, #0
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1002f24:	e5863158 	str	r3, [r6, #344]	; 0x158
 1002f28:	e59a7000 	ldr	r7, [sl]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1002f2c:	ee687a27 	vmul.f32	s15, s16, s15
 1002f30:	e58d2018 	str	r2, [sp, #24]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1002f34:	e3770c01 	cmn	r7, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1002f38:	e1e07007 	mvn	r7, r7
		msb = g_hal.g_timer_overflow;
 1002f3c:	9596304c 	ldrls	r3, [r6, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 1002f40:	e5867058 	str	r7, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1002f44:	ee170a90 	vmov	r0, s15
		msb = g_hal.g_timer_overflow;
 1002f48:	958d301c 	strls	r3, [sp, #28]
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1002f4c:	e59d301c 	ldr	r3, [sp, #28]
	g_hal.timers[index] = timer_value;
 1002f50:	e586305c 	str	r3, [r6, #92]	; 0x5c
 1002f54:	e58d3014 	str	r3, [sp, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1002f58:	fa001ab6 	blx	1009a38 <__aeabi_f2ulz>
	while(iters--) {
 1002f5c:	e2504001 	subs	r4, r0, #1
 1002f60:	e59d2018 	ldr	r2, [sp, #24]
 1002f64:	e2c15000 	sbc	r5, r1, #0
 1002f68:	e1903001 	orrs	r3, r0, r1
 1002f6c:	e59d3014 	ldr	r3, [sp, #20]
 1002f70:	0a000009 	beq	1002f9c <bogo_calibrate+0xcc>
		__asm__("nop");
 1002f74:	e320f000 	nop	{0}
	while(iters--) {
 1002f78:	e2544001 	subs	r4, r4, #1
 1002f7c:	e2c55000 	sbc	r5, r5, #0
 1002f80:	e1550009 	cmp	r5, r9
 1002f84:	01540008 	cmpeq	r4, r8
 1002f88:	1afffff9 	bne	1002f74 <bogo_calibrate+0xa4>
 1002f8c:	e596a014 	ldr	sl, [r6, #20]
 1002f90:	e5967058 	ldr	r7, [r6, #88]	; 0x58
 1002f94:	e596305c 	ldr	r3, [r6, #92]	; 0x5c
 1002f98:	e28aa004 	add	sl, sl, #4
 1002f9c:	e59a1000 	ldr	r1, [sl]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1002fa0:	e3710c01 	cmn	r1, #256	; 0x100
 1002fa4:	8a00000e 	bhi	1002fe4 <bogo_calibrate+0x114>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1002fa8:	e1e01001 	mvn	r1, r1
		msb = g_hal.g_timer_overflow;
 1002fac:	e596004c 	ldr	r0, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1002fb0:	e0517007 	subs	r7, r1, r7
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1002fb4:	e59d1010 	ldr	r1, [sp, #16]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1002fb8:	e58670d8 	str	r7, [r6, #216]	; 0xd8
 1002fbc:	e0c03003 	sbc	r3, r0, r3
		timing_total += d_read_timing(0);
 1002fc0:	e09bb007 	adds	fp, fp, r7
 1002fc4:	e0a22003 	adc	r2, r2, r3
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1002fc8:	e3510001 	cmp	r1, #1
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1002fcc:	e58630dc 	str	r3, [r6, #220]	; 0xdc
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1002fd0:	0a00000e 	beq	1003010 <bogo_calibrate+0x140>
 1002fd4:	e3a03001 	mov	r3, #1
 1002fd8:	edd67a56 	vldr	s15, [r6, #344]	; 0x158
 1002fdc:	e58d3010 	str	r3, [sp, #16]
 1002fe0:	eaffffd0 	b	1002f28 <bogo_calibrate+0x58>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1002fe4:	e1e01001 	mvn	r1, r1
 1002fe8:	e3a00000 	mov	r0, #0
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1002fec:	e0517007 	subs	r7, r1, r7
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1002ff0:	e59d1010 	ldr	r1, [sp, #16]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1002ff4:	e0c03003 	sbc	r3, r0, r3
		timing_total += d_read_timing(0);
 1002ff8:	e09bb007 	adds	fp, fp, r7
 1002ffc:	e0a22003 	adc	r2, r2, r3
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003000:	e58670d8 	str	r7, [r6, #216]	; 0xd8
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003004:	e3510001 	cmp	r1, #1
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003008:	e58630dc 	str	r3, [r6, #220]	; 0xdc
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 100300c:	1afffff0 	bne	1002fd4 <bogo_calibrate+0x104>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 1003010:	e1a0000b 	mov	r0, fp
 1003014:	e1a01002 	mov	r1, r2
 1003018:	fa0019d8 	blx	1009780 <__aeabi_ul2d>
 100301c:	eddf0b15 	vldr	d16, [pc, #84]	; 1003078 <bogo_calibrate+0x1a8>
 1003020:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003024:	e302197c 	movw	r1, #10620	; 0x297c
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003028:	ed9f6a15 	vldr	s12, [pc, #84]	; 1003084 <bogo_calibrate+0x1b4>
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100302c:	e3401101 	movt	r1, #257	; 0x101
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003030:	eeb07a04 	vmov.f32	s14, #4	; 0x40200000  2.5
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003034:	e3a00002 	mov	r0, #2
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 1003038:	ee610ba0 	vmul.f64	d16, d17, d16
 100303c:	eef77be0 	vcvt.f32.f64	s15, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003040:	eec66a27 	vdiv.f32	s13, s12, s15
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003044:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003048:	edcd0b00 	vstr	d16, [sp]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100304c:	ee667a87 	vmul.f32	s15, s13, s14
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003050:	eef70ae6 	vcvt.f64.f32	d16, s13
 1003054:	eef71ae7 	vcvt.f64.f32	d17, s15
 1003058:	edcd0b02 	vstr	d16, [sp, #8]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100305c:	edc67a56 	vstr	s15, [r6, #344]	; 0x158
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003060:	ec532b31 	vmov	r2, r3, d17
 1003064:	ebfffeb4 	bl	1002b3c <d_printf.constprop.1>
}
 1003068:	e28dd024 	add	sp, sp, #36	; 0x24
 100306c:	ecbd8b02 	vpop	{d8}
 1003070:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1003074:	e320f000 	nop	{0}
 1003078:	a17f0000 	.word	0xa17f0000
 100307c:	3f689374 	.word	0x3f689374
 1003080:	47c35000 	.word	0x47c35000
 1003084:	48435000 	.word	0x48435000

01003088 <bogo_delay>:
{
 1003088:	e92d4030 	push	{r4, r5, lr}
 100308c:	e24dd00c 	sub	sp, sp, #12
 1003090:	e58d0004 	str	r0, [sp, #4]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003094:	e3093b18 	movw	r3, #39704	; 0x9b18
 1003098:	e3403101 	movt	r3, #257	; 0x101
 100309c:	eddd7a01 	vldr	s15, [sp, #4]
 10030a0:	ed937a56 	vldr	s14, [r3, #344]	; 0x158
 10030a4:	eef87a67 	vcvt.f32.u32	s15, s15
 10030a8:	ee677a87 	vmul.f32	s15, s15, s14
 10030ac:	ee170a90 	vmov	r0, s15
 10030b0:	fa001a60 	blx	1009a38 <__aeabi_f2ulz>
	while(iters--) {
 10030b4:	e2504001 	subs	r4, r0, #1
 10030b8:	e2c15000 	sbc	r5, r1, #0
 10030bc:	e1903001 	orrs	r3, r0, r1
 10030c0:	0a000007 	beq	10030e4 <bogo_delay+0x5c>
 10030c4:	e3e02000 	mvn	r2, #0
 10030c8:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 10030cc:	e320f000 	nop	{0}
	while(iters--) {
 10030d0:	e2544001 	subs	r4, r4, #1
 10030d4:	e2c55000 	sbc	r5, r5, #0
 10030d8:	e1550003 	cmp	r5, r3
 10030dc:	01540002 	cmpeq	r4, r2
 10030e0:	1afffff9 	bne	10030cc <bogo_delay+0x44>
}
 10030e4:	e28dd00c 	add	sp, sp, #12
 10030e8:	e8bd8030 	pop	{r4, r5, pc}

010030ec <gpio_led_write>:
	enable = !!(enable);
 10030ec:	e2912000 	adds	r2, r1, #0
 10030f0:	13a02001 	movne	r2, #1
	switch(index) {
 10030f4:	e3500000 	cmp	r0, #0
 10030f8:	0a000004 	beq	1003110 <gpio_led_write+0x24>
 10030fc:	e3500001 	cmp	r0, #1
 1003100:	112fff1e 	bxne	lr
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, enable);
 1003104:	e3a01025 	mov	r1, #37	; 0x25
 1003108:	e59f000c 	ldr	r0, [pc, #12]	; 100311c <gpio_led_write+0x30>
 100310c:	ea000a29 	b	10059b8 <XGpioPs_WritePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, enable);
 1003110:	e3a01009 	mov	r1, #9
 1003114:	e59f0000 	ldr	r0, [pc]	; 100311c <gpio_led_write+0x30>
 1003118:	ea000a26 	b	10059b8 <XGpioPs_WritePin>
 100311c:	01019b3c 	.word	0x01019b3c

01003120 <d_printf>:
{
 1003120:	e92d000e 	push	{r1, r2, r3}
 1003124:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003128:	e2504000 	subs	r4, r0, #0
{
 100312c:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1003130:	e24dd018 	sub	sp, sp, #24
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003134:	ba00003a 	blt	1003224 <d_printf+0x104>
		switch(debug_code) {
 1003138:	e2443001 	sub	r3, r4, #1
 100313c:	e3530003 	cmp	r3, #3
 1003140:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1003144:	ea000006 	b	1003164 <d_printf+0x44>
 1003148:	0100329c 	.word	0x0100329c
 100314c:	010032ac 	.word	0x010032ac
 1003150:	010032bc 	.word	0x010032bc
 1003154:	01003158 	.word	0x01003158
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003158:	e302091c 	movw	r0, #10524	; 0x291c
 100315c:	e3400101 	movt	r0, #257	; 0x101
 1003160:	eb0012c0 	bl	1007c68 <print>
		if(g_hal.g_timer_have_init) {
 1003164:	e3093b18 	movw	r3, #39704	; 0x9b18
 1003168:	e3403101 	movt	r3, #257	; 0x101
 100316c:	e5935050 	ldr	r5, [r3, #80]	; 0x50
 1003170:	e3550000 	cmp	r5, #0
			usec = 0;
 1003174:	01a03005 	moveq	r3, r5
		if(g_hal.g_timer_have_init) {
 1003178:	0a00001b 	beq	10031ec <d_printf+0xcc>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100317c:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003180:	eddf3b52 	vldr	d19, [pc, #328]	; 10032d0 <d_printf+0x1b0>
 1003184:	eddf2b53 	vldr	d18, [pc, #332]	; 10032d8 <d_printf+0x1b8>
 1003188:	e5922004 	ldr	r2, [r2, #4]
 100318c:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1003190:	e1e02002 	mvn	r2, r2
 1003194:	ee073a90 	vmov	s15, r3
 1003198:	eef80b67 	vcvt.f64.u32	d16, s15
 100319c:	ee072a90 	vmov	s15, r2
 10031a0:	eef81b67 	vcvt.f64.u32	d17, s15
 10031a4:	ee600ba3 	vmul.f64	d16, d16, d19
 10031a8:	ee410ba2 	vmla.f64	d16, d17, d18
 10031ac:	ec510b30 	vmov	r0, r1, d16
 10031b0:	fa001a30 	blx	1009a78 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 10031b4:	e3042240 	movw	r2, #16960	; 0x4240
 10031b8:	e3a03000 	mov	r3, #0
 10031bc:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 10031c0:	e1a06000 	mov	r6, r0
 10031c4:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 10031c8:	fa001a0e 	blx	1009a08 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 10031cc:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 10031d0:	e1a05000 	mov	r5, r0
			usec = total_usec % 1000000;
 10031d4:	e340200f 	movt	r2, #15
 10031d8:	e3a03000 	mov	r3, #0
 10031dc:	e1a00006 	mov	r0, r6
 10031e0:	e1a01007 	mov	r1, r7
 10031e4:	fa001a07 	blx	1009a08 <__aeabi_uldivmod>
 10031e8:	e1a03002 	mov	r3, r2
		if(debug_code != D_RAW) {
 10031ec:	e3540000 	cmp	r4, #0
 10031f0:	1a000010 	bne	1003238 <d_printf+0x118>
		va_start(args, fmt);
 10031f4:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10031f8:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 10031fc:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003200:	e282202c 	add	r2, r2, #44	; 0x2c
 1003204:	e1a0300c 	mov	r3, ip
 1003208:	e28d0018 	add	r0, sp, #24
 100320c:	e5922000 	ldr	r2, [r2]
 1003210:	e3a01a01 	mov	r1, #4096	; 0x1000
		va_start(args, fmt);
 1003214:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003218:	fa002b24 	blx	100deb0 <vsnprintf>
		print(buffer);
 100321c:	e28d0018 	add	r0, sp, #24
 1003220:	eb001290 	bl	1007c68 <print>
}
 1003224:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1003228:	e28dd018 	add	sp, sp, #24
 100322c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 1003230:	e28dd00c 	add	sp, sp, #12
 1003234:	e12fff1e 	bx	lr
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1003238:	e3022900 	movw	r2, #10496	; 0x2900
 100323c:	e58d3000 	str	r3, [sp]
 1003240:	e3402101 	movt	r2, #257	; 0x101
 1003244:	e1a03005 	mov	r3, r5
 1003248:	e3a01a01 	mov	r1, #4096	; 0x1000
 100324c:	e28d000c 	add	r0, sp, #12
 1003250:	fa0021a7 	blx	100b8f4 <snprintf>
			print(time_buffer);
 1003254:	e28d000c 	add	r0, sp, #12
 1003258:	eb001282 	bl	1007c68 <print>
		va_start(args, fmt);
 100325c:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003260:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1003264:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003268:	e282202c 	add	r2, r2, #44	; 0x2c
 100326c:	e1a0300c 	mov	r3, ip
 1003270:	e5922000 	ldr	r2, [r2]
 1003274:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003278:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100327c:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003280:	fa002b0a 	blx	100deb0 <vsnprintf>
		print(buffer);
 1003284:	e28d0018 	add	r0, sp, #24
 1003288:	eb001276 	bl	1007c68 <print>
			print("\033[m\r\n");
 100328c:	e302090c 	movw	r0, #10508	; 0x290c
 1003290:	e3400101 	movt	r0, #257	; 0x101
 1003294:	eb001273 	bl	1007c68 <print>
}
 1003298:	eaffffe1 	b	1003224 <d_printf+0x104>
				print("[--] ");							// dull white text (default)
 100329c:	e3020914 	movw	r0, #10516	; 0x2914
 10032a0:	e3400101 	movt	r0, #257	; 0x101
 10032a4:	eb00126f 	bl	1007c68 <print>
				break;
 10032a8:	eaffffad 	b	1003164 <d_printf+0x44>
				print("\033[0;97m[ii] "); 				// bright white text
 10032ac:	e30208f0 	movw	r0, #10480	; 0x28f0
 10032b0:	e3400101 	movt	r0, #257	; 0x101
 10032b4:	eb00126b 	bl	1007c68 <print>
				break;
 10032b8:	eaffffa9 	b	1003164 <d_printf+0x44>
				print("\033[30;103m[WW]\033[0;93m ");	// yellow text
 10032bc:	e30209d0 	movw	r0, #10704	; 0x29d0
 10032c0:	e3400101 	movt	r0, #257	; 0x101
 10032c4:	eb001267 	bl	1007c68 <print>
				break;
 10032c8:	eaffffa5 	b	1003164 <d_printf+0x44>
 10032cc:	e320f000 	nop	{0}
 10032d0:	a17f0000 	.word	0xa17f0000
 10032d4:	41689374 	.word	0x41689374
 10032d8:	a17f0000 	.word	0xa17f0000
 10032dc:	3f689374 	.word	0x3f689374

010032e0 <hal_init>:
{
 10032e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 1.0f;
 10032e4:	e3096b18 	movw	r6, #39704	; 0x9b18
{
 10032e8:	e24dd014 	sub	sp, sp, #20
	g_hal.bogo_cal = 1.0f;
 10032ec:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
 10032f0:	e3406101 	movt	r6, #257	; 0x101
 10032f4:	e5863158 	str	r3, [r6, #344]	; 0x158
	init_platform();
 10032f8:	eb000245 	bl	1003c14 <init_platform>
	Xil_AssertSetCallback(&d_xilinx_assert);
 10032fc:	e3020eb8 	movw	r0, #11960	; 0x2eb8
 1003300:	e3400100 	movt	r0, #256	; 0x100
 1003304:	eb001252 	bl	1007c54 <Xil_AssertSetCallback>
	d_printf(D_RAW, "\r\n\r\n\033[2J\033[0m\r\n");
 1003308:	e30219e8 	movw	r1, #10728	; 0x29e8
 100330c:	e3a00000 	mov	r0, #0
 1003310:	e3401101 	movt	r1, #257	; 0x101
 1003314:	ebffff81 	bl	1003120 <d_printf>
	d_printf(D_INFO, "ps_app: Zynq application for YAOS Oscilloscope Project (%s)", PS_APP_VERSION_TAG);
 1003318:	e30229f8 	movw	r2, #10744	; 0x29f8
 100331c:	e3021a08 	movw	r1, #10760	; 0x2a08
 1003320:	e3402101 	movt	r2, #257	; 0x101
 1003324:	e3401101 	movt	r1, #257	; 0x101
 1003328:	e3a00002 	mov	r0, #2
 100332c:	ebfffe02 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "Built %s %s", __DATE__, __TIME__);
 1003330:	e3023a44 	movw	r3, #10820	; 0x2a44
 1003334:	e3022a50 	movw	r2, #10832	; 0x2a50
 1003338:	e3021a5c 	movw	r1, #10844	; 0x2a5c
 100333c:	e3403101 	movt	r3, #257	; 0x101
 1003340:	e3402101 	movt	r2, #257	; 0x101
 1003344:	e3401101 	movt	r1, #257	; 0x101
 1003348:	e3a00002 	mov	r0, #2
 100334c:	ebfffdfa 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "");
 1003350:	e3021e04 	movw	r1, #11780	; 0x2e04
 1003354:	e3a00002 	mov	r0, #2
 1003358:	e3401101 	movt	r1, #257	; 0x101
 100335c:	ebfffdf6 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "Application (C) 2020 Tomato Engineering Ltd.");
 1003360:	e3021a68 	movw	r1, #10856	; 0x2a68
 1003364:	e3a00002 	mov	r0, #2
 1003368:	e3401101 	movt	r1, #257	; 0x101
 100336c:	ebfffdf2 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "Parts       (C) 2005 - 2015 Xilinx, Inc.");
 1003370:	e3021a98 	movw	r1, #10904	; 0x2a98
 1003374:	e3a00002 	mov	r0, #2
 1003378:	e3401101 	movt	r1, #257	; 0x101
 100337c:	ebfffdee 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "");
 1003380:	e3021e04 	movw	r1, #11780	; 0x2e04
 1003384:	e3a00002 	mov	r0, #2
 1003388:	e3401101 	movt	r1, #257	; 0x101
 100338c:	ebfffdea 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "Application is licenced under the MIT Licence");
 1003390:	e3021ac4 	movw	r1, #10948	; 0x2ac4
 1003394:	e3a00002 	mov	r0, #2
 1003398:	e3401101 	movt	r1, #257	; 0x101
 100339c:	ebfffde6 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "For information see LICENCE in the Git repository");
 10033a0:	e3021af4 	movw	r1, #10996	; 0x2af4
 10033a4:	e3a00002 	mov	r0, #2
 10033a8:	e3401101 	movt	r1, #257	; 0x101
 10033ac:	ebfffde2 	bl	1002b3c <d_printf.constprop.1>
	d_printf(D_INFO, "");
 10033b0:	e3021e04 	movw	r1, #11780	; 0x2e04
 10033b4:	e3a00002 	mov	r0, #2
 10033b8:	e3401101 	movt	r1, #257	; 0x101
 10033bc:	ebfffdde 	bl	1002b3c <d_printf.constprop.1>
	Xil_ICacheEnable();
 10033c0:	eb00142c 	bl	1008478 <Xil_ICacheEnable>
	Xil_DCacheEnable();
 10033c4:	eb001422 	bl	1008454 <Xil_DCacheEnable>
	d_printf(D_INFO, "boot: enabled D- and I-cache");
 10033c8:	e3021b28 	movw	r1, #11048	; 0x2b28
 10033cc:	e3a00002 	mov	r0, #2
 10033d0:	e3401101 	movt	r1, #257	; 0x101
 10033d4:	ebfffdd8 	bl	1002b3c <d_printf.constprop.1>
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 10033d8:	e3a00000 	mov	r0, #0
 10033dc:	eb001112 	bl	100782c <XScuGic_LookupConfig>
	if(g_hal.xscu_gic_cfg == NULL) {
 10033e0:	e3500000 	cmp	r0, #0
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 10033e4:	e586000c 	str	r0, [r6, #12]
	if(g_hal.xscu_gic_cfg == NULL) {
 10033e8:	0a0000cf 	beq	100372c <hal_init+0x44c>
	error = XScuGic_CfgInitialize(&g_hal.xscu_gic, g_hal.xscu_gic_cfg, g_hal.xscu_gic_cfg->CpuBaseAddress);
 10033ec:	e1a01000 	mov	r1, r0
 10033f0:	e5902004 	ldr	r2, [r0, #4]
 10033f4:	e1a00006 	mov	r0, r6
 10033f8:	eb001096 	bl	1007658 <XScuGic_CfgInitialize>
	if(error != XST_SUCCESS) {
 10033fc:	e2508000 	subs	r8, r0, #0
 1003400:	1a0000eb 	bne	10037b4 <hal_init+0x4d4>
	Xil_ExceptionInit();
 1003404:	eb001636 	bl	1008ce4 <Xil_ExceptionInit>
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &g_hal.xscu_gic);
 1003408:	e3061cc0 	movw	r1, #27840	; 0x6cc0
 100340c:	e1a02006 	mov	r2, r6
 1003410:	e3401100 	movt	r1, #256	; 0x100
 1003414:	e3a00005 	mov	r0, #5
 1003418:	eb001632 	bl	1008ce8 <Xil_ExceptionRegisterHandler>
	Xil_ExceptionEnable();
 100341c:	e10f3000 	mrs	r3, CPSR
 1003420:	e3c33080 	bic	r3, r3, #128	; 0x80
 1003424:	e129f003 	msr	CPSR_fc, r3
	d_printf(D_INFO, "XScuGic: interrupt controller ready");
 1003428:	e3021ba4 	movw	r1, #11172	; 0x2ba4
 100342c:	e3a00002 	mov	r0, #2
 1003430:	e3401101 	movt	r1, #257	; 0x101
 1003434:	ebfffdc0 	bl	1002b3c <d_printf.constprop.1>
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 1003438:	e1a00008 	mov	r0, r8
 100343c:	eb0011e6 	bl	1007bdc <XScuTimer_LookupConfig>
 1003440:	e1a03000 	mov	r3, r0
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 1003444:	e2860010 	add	r0, r6, #16
 1003448:	e5932004 	ldr	r2, [r3, #4]
 100344c:	e1a01003 	mov	r1, r3
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 1003450:	e5863020 	str	r3, [r6, #32]
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 1003454:	eb0010fb 	bl	1007848 <XScuTimer_CfgInitialize>
	if (error != XST_SUCCESS) {
 1003458:	e3500000 	cmp	r0, #0
 100345c:	1a0000cd 	bne	1003798 <hal_init+0x4b8>
	error = XScuTimer_SelfTest(&g_hal.xscu_timer);
 1003460:	e2860010 	add	r0, r6, #16
 1003464:	eb0011ad 	bl	1007b20 <XScuTimer_SelfTest>
	if (error != XST_SUCCESS) {
 1003468:	e3500000 	cmp	r0, #0
 100346c:	1a0000c2 	bne	100377c <hal_init+0x49c>
	d_printf(D_INFO, "XScuTimer: ready");
 1003470:	e3021c28 	movw	r1, #11304	; 0x2c28
 1003474:	e3a00002 	mov	r0, #2
 1003478:	e3401101 	movt	r1, #257	; 0x101
 100347c:	ebfffdae 	bl	1002b3c <d_printf.constprop.1>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)irq_xscutimer, (void *)&g_hal.xscu_timer);
 1003480:	e3022b18 	movw	r2, #11032	; 0x2b18
 1003484:	e2863010 	add	r3, r6, #16
 1003488:	e3402100 	movt	r2, #256	; 0x100
 100348c:	e3a0101d 	mov	r1, #29
 1003490:	e1a00006 	mov	r0, r6
 1003494:	eb000e3b 	bl	1006d88 <XScuGic_Connect>
	if (error != XST_SUCCESS) {
 1003498:	e3500000 	cmp	r0, #0
 100349c:	1a0000af 	bne	1003760 <hal_init+0x480>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 10034a0:	e5963014 	ldr	r3, [r6, #20]
	*LocalAddr = Value;
 10034a4:	e3e02000 	mvn	r2, #0
	g_hal.g_timer_overflow = 0;
 10034a8:	e586004c 	str	r0, [r6, #76]	; 0x4c
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 10034ac:	e3a0101d 	mov	r1, #29
 10034b0:	e1a00006 	mov	r0, r6
	d_printf(D_EXINFO, "XScuTimer: config: %3.3f MHz, 1 tick = %.3f us", XSCUTIMER_CLOCK / 1e6f, XSCUTIMER_TICKS_TO_US);
 10034b4:	e3a0a000 	mov	sl, #0
 10034b8:	e5832000 	str	r2, [r3]
 10034bc:	e309b374 	movw	fp, #37748	; 0x9374
	XScuTimer_EnableAutoReload(&g_hal.xscu_timer);
 10034c0:	e5962014 	ldr	r2, [r6, #20]
	d_printf(D_EXINFO, "XScuTimer: config: %3.3f MHz, 1 tick = %.3f us", XSCUTIMER_CLOCK / 1e6f, XSCUTIMER_TICKS_TO_US);
 10034c4:	e34aa17f 	movt	sl, #41343	; 0xa17f
 10034c8:	e343bf68 	movt	fp, #16232	; 0x3f68
	return *(volatile u32 *) Addr;
 10034cc:	e5923008 	ldr	r3, [r2, #8]
	XScuTimer_EnableAutoReload(&g_hal.xscu_timer);
 10034d0:	e3833002 	orr	r3, r3, #2
	*LocalAddr = Value;
 10034d4:	e5823008 	str	r3, [r2, #8]
	XScuTimer_EnableInterrupt(&g_hal.xscu_timer);
 10034d8:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 10034dc:	e5923008 	ldr	r3, [r2, #8]
 10034e0:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 10034e4:	e5823008 	str	r3, [r2, #8]
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 10034e8:	eb000f7d 	bl	10072e4 <XScuGic_Enable>
	XScuTimer_Start(&g_hal.xscu_timer);
 10034ec:	e2860010 	add	r0, r6, #16
 10034f0:	eb001100 	bl	10078f8 <XScuTimer_Start>
	g_hal.g_timer_have_init = 1;
 10034f4:	e3a03001 	mov	r3, #1
	d_printf(D_EXINFO, "XScuTimer: config: %3.3f MHz, 1 tick = %.3f us", XSCUTIMER_CLOCK / 1e6f, XSCUTIMER_TICKS_TO_US);
 10034f8:	e3021c7c 	movw	r1, #11388	; 0x2c7c
 10034fc:	e1a00003 	mov	r0, r3
	g_hal.g_timer_have_init = 1;
 1003500:	e5863050 	str	r3, [r6, #80]	; 0x50
	d_printf(D_EXINFO, "XScuTimer: config: %3.3f MHz, 1 tick = %.3f us", XSCUTIMER_CLOCK / 1e6f, XSCUTIMER_TICKS_TO_US);
 1003504:	e30d3555 	movw	r3, #54613	; 0xd555
 1003508:	e3401101 	movt	r1, #257	; 0x101
 100350c:	e3443074 	movt	r3, #16500	; 0x4074
 1003510:	e3a02206 	mov	r2, #1610612736	; 0x60000000
 1003514:	e1cda0f0 	strd	sl, [sp]
 1003518:	ebfffdd2 	bl	1002c68 <d_printf.constprop.2>
	bogo_calibrate();
 100351c:	ebfffe6b 	bl	1002ed0 <bogo_calibrate>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003520:	e596a014 	ldr	sl, [r6, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003524:	ed9f7aab 	vldr	s14, [pc, #684]	; 10037d8 <hal_init+0x4f8>
 1003528:	edd67a56 	vldr	s15, [r6, #344]	; 0x158
	return *(volatile u32 *) Addr;
 100352c:	e59a8004 	ldr	r8, [sl, #4]
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003530:	e28aa004 	add	sl, sl, #4
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003534:	e3780c01 	cmn	r8, #256	; 0x100
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003538:	ee677a27 	vmul.f32	s15, s14, s15
		msb = g_hal.g_timer_overflow;
 100353c:	9596904c 	ldrls	r9, [r6, #76]	; 0x4c
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003540:	e1e08008 	mvn	r8, r8
	g_hal.timers[index] = timer_value;
 1003544:	e1c685f8 	strd	r8, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003548:	ee170a90 	vmov	r0, s15
 100354c:	fa001939 	blx	1009a38 <__aeabi_f2ulz>
	while(iters--) {
 1003550:	e2504001 	subs	r4, r0, #1
 1003554:	e2c15000 	sbc	r5, r1, #0
 1003558:	e1903001 	orrs	r3, r0, r1
 100355c:	0a00000a 	beq	100358c <hal_init+0x2ac>
 1003560:	e3e02000 	mvn	r2, #0
 1003564:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 1003568:	e320f000 	nop	{0}
	while(iters--) {
 100356c:	e2544001 	subs	r4, r4, #1
 1003570:	e2c55000 	sbc	r5, r5, #0
 1003574:	e1550003 	cmp	r5, r3
 1003578:	01540002 	cmpeq	r4, r2
 100357c:	1afffff9 	bne	1003568 <hal_init+0x288>
 1003580:	e596a014 	ldr	sl, [r6, #20]
 1003584:	e1c685d8 	ldrd	r8, [r6, #88]	; 0x58
 1003588:	e28aa004 	add	sl, sl, #4
 100358c:	e59a4000 	ldr	r4, [sl]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003590:	e3740c01 	cmn	r4, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003594:	e1e04004 	mvn	r4, r4
		msb = g_hal.g_timer_overflow;
 1003598:	9596704c 	ldrls	r7, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100359c:	e0544008 	subs	r4, r4, r8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10035a0:	e1a00004 	mov	r0, r4
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10035a4:	e0c75009 	sbc	r5, r7, r9
 10035a8:	e1c64df8 	strd	r4, [r6, #216]	; 0xd8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10035ac:	e1a01005 	mov	r1, r5
 10035b0:	fa001876 	blx	1009790 <__aeabi_l2d>
 10035b4:	eddf0b85 	vldr	d16, [pc, #532]	; 10037d0 <hal_init+0x4f0>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10035b8:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10035bc:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10035c0:	e0a55005 	adc	r5, r5, r5
 10035c4:	e3022cac 	movw	r2, #11436	; 0x2cac
 10035c8:	e3021cc4 	movw	r1, #11460	; 0x2cc4
 10035cc:	e3402101 	movt	r2, #257	; 0x101
 10035d0:	e3401101 	movt	r1, #257	; 0x101
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10035d4:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10035d8:	e3a00002 	mov	r0, #2
 10035dc:	e58d4000 	str	r4, [sp]
 10035e0:	e58d5004 	str	r5, [sp, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10035e4:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10035e8:	eef70ae7 	vcvt.f64.f32	d16, s15
 10035ec:	edcd0b02 	vstr	d16, [sp, #8]
 10035f0:	ebfffd51 	bl	1002b3c <d_printf.constprop.1>
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 10035f4:	e3a00000 	mov	r0, #0
 10035f8:	eb000a34 	bl	1005ed0 <XGpioPs_LookupConfig>
 10035fc:	e1a03000 	mov	r3, r0
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 1003600:	e59f01d4 	ldr	r0, [pc, #468]	; 10037dc <hal_init+0x4fc>
 1003604:	e5932004 	ldr	r2, [r3, #4]
 1003608:	e1a01003 	mov	r1, r3
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 100360c:	e5863048 	str	r3, [r6, #72]	; 0x48
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 1003610:	eb0006f8 	bl	10051f8 <XGpioPs_CfgInitialize>
	if (error != XST_SUCCESS) {
 1003614:	e2504000 	subs	r4, r0, #0
 1003618:	1a000049 	bne	1003744 <hal_init+0x464>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 0, 0x00000000);
 100361c:	e1a02004 	mov	r2, r4
 1003620:	e1a01004 	mov	r1, r4
 1003624:	e59f01b0 	ldr	r0, [pc, #432]	; 10037dc <hal_init+0x4fc>
 1003628:	eb0007a8 	bl	10054d0 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 1, 0x00000000);
 100362c:	e1a02004 	mov	r2, r4
 1003630:	e3a01001 	mov	r1, #1
 1003634:	e59f01a0 	ldr	r0, [pc, #416]	; 10037dc <hal_init+0x4fc>
 1003638:	eb0007a4 	bl	10054d0 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 2, 0x00000000);
 100363c:	e1a02004 	mov	r2, r4
 1003640:	e3a01002 	mov	r1, #2
 1003644:	e59f0190 	ldr	r0, [pc, #400]	; 10037dc <hal_init+0x4fc>
 1003648:	eb0007a0 	bl	10054d0 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 3, 0x00000000);
 100364c:	e1a02004 	mov	r2, r4
 1003650:	e3a01003 	mov	r1, #3
 1003654:	e59f0180 	ldr	r0, [pc, #384]	; 10037dc <hal_init+0x4fc>
 1003658:	eb00079c 	bl	10054d0 <XGpioPs_SetDirection>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100365c:	e3a02001 	mov	r2, #1
 1003660:	e3a01009 	mov	r1, #9
 1003664:	e59f0170 	ldr	r0, [pc, #368]	; 10037dc <hal_init+0x4fc>
 1003668:	eb000912 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100366c:	e3a02001 	mov	r2, #1
 1003670:	e3a01009 	mov	r1, #9
 1003674:	e59f0160 	ldr	r0, [pc, #352]	; 10037dc <hal_init+0x4fc>
 1003678:	eb000991 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100367c:	e3a02001 	mov	r2, #1
 1003680:	e3a01025 	mov	r1, #37	; 0x25
 1003684:	e59f0150 	ldr	r0, [pc, #336]	; 10037dc <hal_init+0x4fc>
 1003688:	eb00090a 	bl	1005ab8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100368c:	e3a02001 	mov	r2, #1
 1003690:	e3a01025 	mov	r1, #37	; 0x25
 1003694:	e59f0140 	ldr	r0, [pc, #320]	; 10037dc <hal_init+0x4fc>
 1003698:	eb000989 	bl	1005cc4 <XGpioPs_SetOutputEnablePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, enable);
 100369c:	e1a02004 	mov	r2, r4
 10036a0:	e3a01009 	mov	r1, #9
 10036a4:	e59f0130 	ldr	r0, [pc, #304]	; 10037dc <hal_init+0x4fc>
 10036a8:	eb0008c2 	bl	10059b8 <XGpioPs_WritePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, enable);
 10036ac:	e1a02004 	mov	r2, r4
 10036b0:	e3a01025 	mov	r1, #37	; 0x25
 10036b4:	e59f0120 	ldr	r0, [pc, #288]	; 10037dc <hal_init+0x4fc>
 10036b8:	e3a04a01 	mov	r4, #4096	; 0x1000
 10036bc:	eb0008bd 	bl	10059b8 <XGpioPs_WritePin>
	d_printf(D_INFO, "XGpioPs: ready");
 10036c0:	e3021d1c 	movw	r1, #11548	; 0x2d1c
 10036c4:	e3a00002 	mov	r0, #2
 10036c8:	e3401101 	movt	r1, #257	; 0x101
 10036cc:	e34e4000 	movt	r4, #57344	; 0xe000
 10036d0:	ebfffd19 	bl	1002b3c <d_printf.constprop.1>
	fabcfg_init();
 10036d4:	ebfffb78 	bl	10024bc <fabcfg_init>
	d_printf(D_INFO, "XUartPs: resetting RX FIFO");
 10036d8:	e3021d2c 	movw	r1, #11564	; 0x2d2c
 10036dc:	e3a00002 	mov	r0, #2
 10036e0:	e3401101 	movt	r1, #257	; 0x101
 10036e4:	ebfffd14 	bl	1002b3c <d_printf.constprop.1>
 10036e8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 10036ec:	e3130002 	tst	r3, #2
 10036f0:	1a00000b 	bne	1003724 <hal_init+0x444>
		d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", XUartPs_RecvByte(STDIN_BASEADDRESS));
 10036f4:	e3025d48 	movw	r5, #11592	; 0x2d48
 10036f8:	e3405101 	movt	r5, #257	; 0x101
 10036fc:	e3a00a01 	mov	r0, #4096	; 0x1000
 1003700:	e34e0000 	movt	r0, #57344	; 0xe000
 1003704:	eb001594 	bl	1008d5c <XUartPs_RecvByte>
 1003708:	e1a01005 	mov	r1, r5
 100370c:	e1a02000 	mov	r2, r0
 1003710:	e3a00001 	mov	r0, #1
 1003714:	ebfffd53 	bl	1002c68 <d_printf.constprop.2>
 1003718:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100371c:	e3130002 	tst	r3, #2
 1003720:	0afffff5 	beq	10036fc <hal_init+0x41c>
}
 1003724:	e28dd014 	add	sp, sp, #20
 1003728:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_printf(D_ERROR, "XScuGic: configuration lookup returns NULL");
 100372c:	e3021b48 	movw	r1, #11080	; 0x2b48
 1003730:	e3a00004 	mov	r0, #4
 1003734:	e3401101 	movt	r1, #257	; 0x101
 1003738:	ebfffd94 	bl	1002d90 <d_printf.constprop.3>
		exit(-1);
 100373c:	e3e00000 	mvn	r0, #0
 1003740:	fa001922 	blx	1009bd0 <exit>
		d_printf(D_ERROR, "XGpioPs: returned error code: %d, unable to start", error);
 1003744:	e3021ce8 	movw	r1, #11496	; 0x2ce8
 1003748:	e3a00004 	mov	r0, #4
 100374c:	e1a02004 	mov	r2, r4
 1003750:	e3401101 	movt	r1, #257	; 0x101
 1003754:	ebfffd8d 	bl	1002d90 <d_printf.constprop.3>
		exit(-1);
 1003758:	e3e00000 	mvn	r0, #0
 100375c:	fa00191b 	blx	1009bd0 <exit>
		d_printf(D_ERROR, "XScuTimer: unable to connect interrupt handler: error code %d", error);
 1003760:	e3021c3c 	movw	r1, #11324	; 0x2c3c
 1003764:	e1a02000 	mov	r2, r0
 1003768:	e3401101 	movt	r1, #257	; 0x101
 100376c:	e3a00004 	mov	r0, #4
 1003770:	ebfffd86 	bl	1002d90 <d_printf.constprop.3>
		exit(-1);
 1003774:	e3e00000 	mvn	r0, #0
 1003778:	fa001914 	blx	1009bd0 <exit>
		d_printf(D_ERROR, "XScuTimer: self test failed with error %d", error);
 100377c:	e3021bfc 	movw	r1, #11260	; 0x2bfc
 1003780:	e1a02000 	mov	r2, r0
 1003784:	e3401101 	movt	r1, #257	; 0x101
 1003788:	e3a00004 	mov	r0, #4
 100378c:	ebfffd7f 	bl	1002d90 <d_printf.constprop.3>
		exit(-1);
 1003790:	e3e00000 	mvn	r0, #0
 1003794:	fa00190d 	blx	1009bd0 <exit>
		d_printf(D_ERROR, "XScuTimer: returned error code: %d, unable to start", error);
 1003798:	e3021bc8 	movw	r1, #11208	; 0x2bc8
 100379c:	e1a02000 	mov	r2, r0
 10037a0:	e3401101 	movt	r1, #257	; 0x101
 10037a4:	e3a00004 	mov	r0, #4
 10037a8:	ebfffd78 	bl	1002d90 <d_printf.constprop.3>
		exit(-1);
 10037ac:	e3e00000 	mvn	r0, #0
 10037b0:	fa001906 	blx	1009bd0 <exit>
		d_printf(D_ERROR, "XScuGic: configuration init returned error %d", error);
 10037b4:	e3021b74 	movw	r1, #11124	; 0x2b74
 10037b8:	e3a00004 	mov	r0, #4
 10037bc:	e1a02008 	mov	r2, r8
 10037c0:	e3401101 	movt	r1, #257	; 0x101
 10037c4:	ebfffd71 	bl	1002d90 <d_printf.constprop.3>
		exit(-1);
 10037c8:	e3e00000 	mvn	r0, #0
 10037cc:	fa0018ff 	blx	1009bd0 <exit>
 10037d0:	a17f0000 	.word	0xa17f0000
 10037d4:	3f689374 	.word	0x3f689374
 10037d8:	47c35000 	.word	0x47c35000
 10037dc:	01019b3c 	.word	0x01019b3c

010037e0 <d_waitkey>:
	res = XUartPs_RecvByte(STDIN_BASEADDRESS);
 10037e0:	e3a00a01 	mov	r0, #4096	; 0x1000
{
 10037e4:	e92d4010 	push	{r4, lr}
	res = XUartPs_RecvByte(STDIN_BASEADDRESS);
 10037e8:	e34e0000 	movt	r0, #57344	; 0xe000
 10037ec:	eb00155a 	bl	1008d5c <XUartPs_RecvByte>
	d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", res);
 10037f0:	e3021d48 	movw	r1, #11592	; 0x2d48
 10037f4:	e1a02000 	mov	r2, r0
 10037f8:	e3401101 	movt	r1, #257	; 0x101
 10037fc:	e3a00001 	mov	r0, #1
}
 1003800:	e8bd4010 	pop	{r4, lr}
	d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", res);
 1003804:	eafffd17 	b	1002c68 <d_printf.constprop.2>

01003808 <d_iskeypress>:
	*LocalAddr = Value;
 1003808:	e3a03a01 	mov	r3, #4096	; 0x1000
 100380c:	e3a02003 	mov	r2, #3
 1003810:	e34e3000 	movt	r3, #57344	; 0xe000
 1003814:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 1003818:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
	return XUartPs_IsReceiveData(STDIN_BASEADDRESS);
 100381c:	e2200002 	eor	r0, r0, #2
}
 1003820:	e7e000d0 	ubfx	r0, r0, #1, #1
 1003824:	e12fff1e 	bx	lr

01003828 <d_read_global_timer>:
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003828:	e3092b18 	movw	r2, #39704	; 0x9b18
 100382c:	e3402101 	movt	r2, #257	; 0x101
 1003830:	e5923014 	ldr	r3, [r2, #20]
 1003834:	e5933004 	ldr	r3, [r3, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003838:	e3730c01 	cmn	r3, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100383c:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 1003840:	9592c04c 	ldrls	ip, [r2, #76]	; 0x4c
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1003844:	e5803000 	str	r3, [r0]
	*msb_ret = msb;
 1003848:	e581c000 	str	ip, [r1]
}
 100384c:	e12fff1e 	bx	lr

01003850 <d_start_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003850:	e350000f 	cmp	r0, #15
{
 1003854:	e92d4030 	push	{r4, r5, lr}
 1003858:	e1a04000 	mov	r4, r0
 100385c:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003860:	ca00000c 	bgt	1003898 <d_start_timing+0x48>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003864:	e3093b18 	movw	r3, #39704	; 0x9b18
	g_hal.timers[index] = timer_value;
 1003868:	e284400b 	add	r4, r4, #11
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100386c:	e3403101 	movt	r3, #257	; 0x101
 1003870:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timers[index] = timer_value;
 1003874:	e0831184 	add	r1, r3, r4, lsl #3
 1003878:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100387c:	e3720c01 	cmn	r2, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1003880:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 1003884:	9593504c 	ldrls	r5, [r3, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 1003888:	e7832184 	str	r2, [r3, r4, lsl #3]
 100388c:	e5815004 	str	r5, [r1, #4]
}
 1003890:	e28dd00c 	add	sp, sp, #12
 1003894:	e8bd8030 	pop	{r4, r5, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003898:	e300019e 	movw	r0, #414	; 0x19e
 100389c:	e3023d60 	movw	r3, #11616	; 0x2d60
 10038a0:	e3022d70 	movw	r2, #11632	; 0x2d70
 10038a4:	e3021d8c 	movw	r1, #11660	; 0x2d8c
 10038a8:	e58d0000 	str	r0, [sp]
 10038ac:	e3403101 	movt	r3, #257	; 0x101
 10038b0:	e3402101 	movt	r2, #257	; 0x101
 10038b4:	e3401101 	movt	r1, #257	; 0x101
 10038b8:	e3a00004 	mov	r0, #4
 10038bc:	ebfffd33 	bl	1002d90 <d_printf.constprop.3>
 10038c0:	eaffffe7 	b	1003864 <d_start_timing+0x14>

010038c4 <d_stop_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10038c4:	e350000f 	cmp	r0, #15
{
 10038c8:	e92d4030 	push	{r4, r5, lr}
 10038cc:	e1a05000 	mov	r5, r0
 10038d0:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10038d4:	ca000010 	bgt	100391c <d_stop_timing+0x58>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 10038d8:	e3090b18 	movw	r0, #39704	; 0x9b18
 10038dc:	e3400101 	movt	r0, #257	; 0x101
 10038e0:	e5903014 	ldr	r3, [r0, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10038e4:	e080c185 	add	ip, r0, r5, lsl #3
 10038e8:	e59c1058 	ldr	r1, [ip, #88]	; 0x58
 10038ec:	e5933004 	ldr	r3, [r3, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 10038f0:	e3730c01 	cmn	r3, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 10038f4:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 10038f8:	9590404c 	ldrls	r4, [r0, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10038fc:	e1a0000c 	mov	r0, ip
 1003900:	e59cc05c 	ldr	ip, [ip, #92]	; 0x5c
 1003904:	e0533001 	subs	r3, r3, r1
 1003908:	e58030d8 	str	r3, [r0, #216]	; 0xd8
 100390c:	e0c4200c 	sbc	r2, r4, ip
 1003910:	e58020dc 	str	r2, [r0, #220]	; 0xdc
}
 1003914:	e28dd00c 	add	sp, sp, #12
 1003918:	e8bd8030 	pop	{r4, r5, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100391c:	e30001b2 	movw	r0, #434	; 0x1b2
 1003920:	e3023d60 	movw	r3, #11616	; 0x2d60
 1003924:	e3022d70 	movw	r2, #11632	; 0x2d70
 1003928:	e3021d8c 	movw	r1, #11660	; 0x2d8c
 100392c:	e58d0000 	str	r0, [sp]
 1003930:	e3403101 	movt	r3, #257	; 0x101
 1003934:	e3402101 	movt	r2, #257	; 0x101
 1003938:	e3401101 	movt	r1, #257	; 0x101
 100393c:	e3a00004 	mov	r0, #4
 1003940:	ebfffd12 	bl	1002d90 <d_printf.constprop.3>
 1003944:	eaffffe3 	b	10038d8 <d_stop_timing+0x14>

01003948 <d_read_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003948:	e350000f 	cmp	r0, #15
{
 100394c:	e92d4010 	push	{r4, lr}
 1003950:	e1a04000 	mov	r4, r0
 1003954:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003958:	ca000005 	bgt	1003974 <d_read_timing+0x2c>
	return g_hal.timer_deltas[index];
 100395c:	e3090b18 	movw	r0, #39704	; 0x9b18
 1003960:	e3400101 	movt	r0, #257	; 0x101
 1003964:	e0800184 	add	r0, r0, r4, lsl #3
}
 1003968:	e1c00dd8 	ldrd	r0, [r0, #216]	; 0xd8
 100396c:	e28dd008 	add	sp, sp, #8
 1003970:	e8bd8010 	pop	{r4, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003974:	e30001c3 	movw	r0, #451	; 0x1c3
 1003978:	e3023d60 	movw	r3, #11616	; 0x2d60
 100397c:	e3022d70 	movw	r2, #11632	; 0x2d70
 1003980:	e3021d8c 	movw	r1, #11660	; 0x2d8c
 1003984:	e58d0000 	str	r0, [sp]
 1003988:	e3403101 	movt	r3, #257	; 0x101
 100398c:	e3402101 	movt	r2, #257	; 0x101
 1003990:	e3401101 	movt	r1, #257	; 0x101
 1003994:	e3a00004 	mov	r0, #4
 1003998:	ebfffcfc 	bl	1002d90 <d_printf.constprop.3>
 100399c:	eaffffee 	b	100395c <d_read_timing+0x14>

010039a0 <d_read_timing_us>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10039a0:	e350000f 	cmp	r0, #15
{
 10039a4:	e92d4010 	push	{r4, lr}
 10039a8:	e1a04000 	mov	r4, r0
 10039ac:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10039b0:	ca00000a 	bgt	10039e0 <d_read_timing_us+0x40>
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10039b4:	e3090b18 	movw	r0, #39704	; 0x9b18
 10039b8:	e3400101 	movt	r0, #257	; 0x101
 10039bc:	e0800184 	add	r0, r0, r4, lsl #3
 10039c0:	e1c00dd8 	ldrd	r0, [r0, #216]	; 0xd8
 10039c4:	fa001771 	blx	1009790 <__aeabi_l2d>
 10039c8:	ed9f0b10 	vldr	d0, [pc, #64]	; 1003a10 <d_read_timing_us+0x70>
 10039cc:	ec410b30 	vmov	d16, r0, r1
 10039d0:	ee200b80 	vmul.f64	d0, d16, d0
}
 10039d4:	eeb70bc0 	vcvt.f32.f64	s0, d0
 10039d8:	e28dd008 	add	sp, sp, #8
 10039dc:	e8bd8010 	pop	{r4, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10039e0:	e3a00e1d 	mov	r0, #464	; 0x1d0
 10039e4:	e3023d60 	movw	r3, #11616	; 0x2d60
 10039e8:	e3022d70 	movw	r2, #11632	; 0x2d70
 10039ec:	e3021d8c 	movw	r1, #11660	; 0x2d8c
 10039f0:	e58d0000 	str	r0, [sp]
 10039f4:	e3403101 	movt	r3, #257	; 0x101
 10039f8:	e3402101 	movt	r2, #257	; 0x101
 10039fc:	e3401101 	movt	r1, #257	; 0x101
 1003a00:	e3a00004 	mov	r0, #4
 1003a04:	ebfffce1 	bl	1002d90 <d_printf.constprop.3>
 1003a08:	eaffffe9 	b	10039b4 <d_read_timing_us+0x14>
 1003a0c:	e320f000 	nop	{0}
 1003a10:	a17f0000 	.word	0xa17f0000
 1003a14:	3f689374 	.word	0x3f689374

01003a18 <d_dump_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003a18:	e351000f 	cmp	r1, #15
{
 1003a1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003a20:	e1a04001 	mov	r4, r1
 1003a24:	e24dd010 	sub	sp, sp, #16
 1003a28:	e1a06000 	mov	r6, r0
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003a2c:	ca000014 	bgt	1003a84 <d_dump_timing+0x6c>
	return g_hal.timer_deltas[index];
 1003a30:	e3091b18 	movw	r1, #39704	; 0x9b18
 1003a34:	e3401101 	movt	r1, #257	; 0x101
 1003a38:	e0811184 	add	r1, r1, r4, lsl #3
 1003a3c:	e1c10dd8 	ldrd	r0, [r1, #216]	; 0xd8
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003a40:	e0905000 	adds	r5, r0, r0
 1003a44:	e0a17001 	adc	r7, r1, r1
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003a48:	fa001750 	blx	1009790 <__aeabi_l2d>
 1003a4c:	eddf0b2d 	vldr	d16, [pc, #180]	; 1003b08 <d_dump_timing+0xf0>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003a50:	e1a02006 	mov	r2, r6
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003a54:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003a58:	e3021cc4 	movw	r1, #11460	; 0x2cc4
 1003a5c:	e88d00a0 	stm	sp, {r5, r7}
 1003a60:	e3401101 	movt	r1, #257	; 0x101
 1003a64:	e3a00002 	mov	r0, #2
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003a68:	ee610ba0 	vmul.f64	d16, d17, d16
 1003a6c:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003a70:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003a74:	edcd0b02 	vstr	d16, [sp, #8]
 1003a78:	ebfffc2f 	bl	1002b3c <d_printf.constprop.1>
}
 1003a7c:	e28dd010 	add	sp, sp, #16
 1003a80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003a84:	e30001c3 	movw	r0, #451	; 0x1c3
 1003a88:	e3023d60 	movw	r3, #11616	; 0x2d60
 1003a8c:	e3022d70 	movw	r2, #11632	; 0x2d70
 1003a90:	e3021d8c 	movw	r1, #11660	; 0x2d8c
	return g_hal.timer_deltas[index];
 1003a94:	e284401b 	add	r4, r4, #27
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003a98:	e58d0000 	str	r0, [sp]
	return g_hal.timer_deltas[index];
 1003a9c:	e1a04184 	lsl	r4, r4, #3
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003aa0:	e3403101 	movt	r3, #257	; 0x101
 1003aa4:	e3402101 	movt	r2, #257	; 0x101
 1003aa8:	e3401101 	movt	r1, #257	; 0x101
 1003aac:	e3a00004 	mov	r0, #4
	return g_hal.timer_deltas[index];
 1003ab0:	e3098b18 	movw	r8, #39704	; 0x9b18
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003ab4:	ebfffcb5 	bl	1002d90 <d_printf.constprop.3>
	return g_hal.timer_deltas[index];
 1003ab8:	e3408101 	movt	r8, #257	; 0x101
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003abc:	e3a02e1d 	mov	r2, #464	; 0x1d0
 1003ac0:	e58d2000 	str	r2, [sp]
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003ac4:	e0882004 	add	r2, r8, r4
 1003ac8:	e7985004 	ldr	r5, [r8, r4]
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003acc:	e3023d60 	movw	r3, #11616	; 0x2d60
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003ad0:	e5927004 	ldr	r7, [r2, #4]
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003ad4:	e3021d8c 	movw	r1, #11660	; 0x2d8c
 1003ad8:	e3022d70 	movw	r2, #11632	; 0x2d70
 1003adc:	e3403101 	movt	r3, #257	; 0x101
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003ae0:	e0955005 	adds	r5, r5, r5
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003ae4:	e3401101 	movt	r1, #257	; 0x101
 1003ae8:	e3a00004 	mov	r0, #4
 1003aec:	e3402101 	movt	r2, #257	; 0x101
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003af0:	e0a77007 	adc	r7, r7, r7
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003af4:	ebfffca5 	bl	1002d90 <d_printf.constprop.3>
 1003af8:	e0883004 	add	r3, r8, r4
 1003afc:	e7980004 	ldr	r0, [r8, r4]
 1003b00:	e5931004 	ldr	r1, [r3, #4]
 1003b04:	eaffffcf 	b	1003a48 <d_dump_timing+0x30>
 1003b08:	a17f0000 	.word	0xa17f0000
 1003b0c:	3f689374 	.word	0x3f689374

01003b10 <d_dump_timing_ex>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b10:	e351000f 	cmp	r1, #15
{
 1003b14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003b18:	e1a04001 	mov	r4, r1
 1003b1c:	e24dd010 	sub	sp, sp, #16
 1003b20:	e1a06000 	mov	r6, r0
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b24:	ca000014 	bgt	1003b7c <d_dump_timing_ex+0x6c>
	return g_hal.timer_deltas[index];
 1003b28:	e3091b18 	movw	r1, #39704	; 0x9b18
 1003b2c:	e3401101 	movt	r1, #257	; 0x101
 1003b30:	e0811184 	add	r1, r1, r4, lsl #3
 1003b34:	e1c10dd8 	ldrd	r0, [r1, #216]	; 0xd8
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003b38:	e0905000 	adds	r5, r0, r0
 1003b3c:	e0a17001 	adc	r7, r1, r1
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003b40:	fa001712 	blx	1009790 <__aeabi_l2d>
 1003b44:	eddf0b2d 	vldr	d16, [pc, #180]	; 1003c00 <d_dump_timing_ex+0xf0>
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003b48:	e1a02006 	mov	r2, r6
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003b4c:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003b50:	e3021cc4 	movw	r1, #11460	; 0x2cc4
 1003b54:	e88d00a0 	stm	sp, {r5, r7}
 1003b58:	e3401101 	movt	r1, #257	; 0x101
 1003b5c:	e3a00001 	mov	r0, #1
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003b60:	ee610ba0 	vmul.f64	d16, d17, d16
 1003b64:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003b68:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003b6c:	edcd0b02 	vstr	d16, [sp, #8]
 1003b70:	ebfffc3c 	bl	1002c68 <d_printf.constprop.2>
}
 1003b74:	e28dd010 	add	sp, sp, #16
 1003b78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b7c:	e30001c3 	movw	r0, #451	; 0x1c3
 1003b80:	e3023d60 	movw	r3, #11616	; 0x2d60
 1003b84:	e3022d70 	movw	r2, #11632	; 0x2d70
 1003b88:	e3021d8c 	movw	r1, #11660	; 0x2d8c
	return g_hal.timer_deltas[index];
 1003b8c:	e284401b 	add	r4, r4, #27
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b90:	e58d0000 	str	r0, [sp]
	return g_hal.timer_deltas[index];
 1003b94:	e1a04184 	lsl	r4, r4, #3
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b98:	e3403101 	movt	r3, #257	; 0x101
 1003b9c:	e3402101 	movt	r2, #257	; 0x101
 1003ba0:	e3401101 	movt	r1, #257	; 0x101
 1003ba4:	e3a00004 	mov	r0, #4
	return g_hal.timer_deltas[index];
 1003ba8:	e3098b18 	movw	r8, #39704	; 0x9b18
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bac:	ebfffc77 	bl	1002d90 <d_printf.constprop.3>
	return g_hal.timer_deltas[index];
 1003bb0:	e3408101 	movt	r8, #257	; 0x101
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bb4:	e3a02e1d 	mov	r2, #464	; 0x1d0
 1003bb8:	e58d2000 	str	r2, [sp]
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003bbc:	e0882004 	add	r2, r8, r4
 1003bc0:	e7985004 	ldr	r5, [r8, r4]
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bc4:	e3023d60 	movw	r3, #11616	; 0x2d60
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003bc8:	e5927004 	ldr	r7, [r2, #4]
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bcc:	e3021d8c 	movw	r1, #11660	; 0x2d8c
 1003bd0:	e3022d70 	movw	r2, #11632	; 0x2d70
 1003bd4:	e3403101 	movt	r3, #257	; 0x101
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003bd8:	e0955005 	adds	r5, r5, r5
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bdc:	e3401101 	movt	r1, #257	; 0x101
 1003be0:	e3a00004 	mov	r0, #4
 1003be4:	e3402101 	movt	r2, #257	; 0x101
	d_printf(D_EXINFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003be8:	e0a77007 	adc	r7, r7, r7
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bec:	ebfffc67 	bl	1002d90 <d_printf.constprop.3>
 1003bf0:	e0883004 	add	r3, r8, r4
 1003bf4:	e7980004 	ldr	r0, [r8, r4]
 1003bf8:	e5931004 	ldr	r1, [r3, #4]
 1003bfc:	eaffffcf 	b	1003b40 <d_dump_timing_ex+0x30>
 1003c00:	a17f0000 	.word	0xa17f0000
 1003c04:	3f689374 	.word	0x3f689374

01003c08 <enable_caches>:
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
    Xil_DCacheEnable();
#endif
#endif
}
 1003c08:	e12fff1e 	bx	lr

01003c0c <disable_caches>:
 1003c0c:	e12fff1e 	bx	lr

01003c10 <init_uart>:
 1003c10:	e12fff1e 	bx	lr

01003c14 <init_platform>:
 1003c14:	e12fff1e 	bx	lr

01003c18 <cleanup_platform>:
 1003c18:	e12fff1e 	bx	lr

01003c1c <XAxiDma_Reset>:
	UINTPTR RegBase;
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_BdRing *RxRingPtr;
	int RingIndex;

	if (InstancePtr->HasMm2S) {
 1003c1c:	e5903004 	ldr	r3, [r0, #4]
{
 1003c20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if (InstancePtr->HasMm2S) {
 1003c24:	e3530000 	cmp	r3, #0
 1003c28:	0a000019 	beq	1003c94 <XAxiDma_Reset+0x78>
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* Save the locations of current BDs both rings are working on
		 * before the reset so later we can resume the rings smoothly.
		 */
		if(XAxiDma_HasSg(InstancePtr)){
 1003c2c:	e5903010 	ldr	r3, [r0, #16]
 1003c30:	e3530000 	cmp	r3, #0
 1003c34:	1a00001a 	bne	1003ca4 <XAxiDma_Reset+0x88>
*
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1003c38:	e5902000 	ldr	r2, [r0]
	*LocalAddr = Value;
 1003c3c:	e3a01004 	mov	r1, #4

	/* Set TX/RX Channel state */
	if (InstancePtr->HasMm2S) {
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1003c40:	e3a03002 	mov	r3, #2
 1003c44:	e5821000 	str	r1, [r2]
 1003c48:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 1003c4c:	e5903008 	ldr	r3, [r0, #8]
 1003c50:	e3530000 	cmp	r3, #0
 1003c54:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1003c58:	e5901744 	ldr	r1, [r0, #1860]	; 0x744
 1003c5c:	e3510000 	cmp	r1, #0
 1003c60:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
 1003c64:	e3a03000 	mov	r3, #0
						RingIndex++) {
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);
			if (InstancePtr->HasS2Mm) {
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1003c68:	e3a0e06c 	mov	lr, #108	; 0x6c
 1003c6c:	e3a0c002 	mov	ip, #2
 1003c70:	e022039e 	mla	r2, lr, r3, r0
						RingIndex++) {
 1003c74:	e2833001 	add	r3, r3, #1
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1003c78:	e1530001 	cmp	r3, r1
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1003c7c:	e582c088 	str	ip, [r2, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1003c80:	1afffffa 	bne	1003c70 <XAxiDma_Reset+0x54>
 1003c84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	if (InstancePtr->HasMm2S) {
 1003c88:	e5903004 	ldr	r3, [r0, #4]
 1003c8c:	e3530000 	cmp	r3, #0
 1003c90:	1affffe8 	bne	1003c38 <XAxiDma_Reset+0x1c>
		RegBase = InstancePtr->RegBase + XAXIDMA_RX_OFFSET;
 1003c94:	e5903000 	ldr	r3, [r0]
 1003c98:	e3a02004 	mov	r2, #4
 1003c9c:	e5832030 	str	r2, [r3, #48]	; 0x30
	if (InstancePtr->HasMm2S) {
 1003ca0:	eaffffe9 	b	1003c4c <XAxiDma_Reset+0x30>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1003ca4:	e1c021d4 	ldrd	r2, [r0, #20]
 1003ca8:	e3530000 	cmp	r3, #0
 1003cac:	1a000018 	bne	1003d14 <XAxiDma_Reset+0xf8>
	return *(volatile u32 *) Addr;
 1003cb0:	e5923008 	ldr	r3, [r2, #8]
 1003cb4:	e580305c 	str	r3, [r0, #92]	; 0x5c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1003cb8:	e590c744 	ldr	ip, [r0, #1860]	; 0x744
 1003cbc:	e35c0000 	cmp	ip, #0
 1003cc0:	daffffdc 	ble	1003c38 <XAxiDma_Reset+0x1c>
 1003cc4:	e3a0206c 	mov	r2, #108	; 0x6c
 1003cc8:	e1a03000 	mov	r3, r0
 1003ccc:	e02c0c92 	mla	ip, r2, ip, r0
 1003cd0:	ea000008 	b	1003cf8 <XAxiDma_Reset+0xdc>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1003cd4:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
 1003cd8:	e3520000 	cmp	r2, #0
 1003cdc:	e282e001 	add	lr, r2, #1
 1003ce0:	0a000008 	beq	1003d08 <XAxiDma_Reset+0xec>
 1003ce4:	e791228e 	ldr	r2, [r1, lr, lsl #5]
 1003ce8:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1003cec:	e283306c 	add	r3, r3, #108	; 0x6c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1003cf0:	e15c0003 	cmp	ip, r3
 1003cf4:	0affffe3 	beq	1003c88 <XAxiDma_Reset+0x6c>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1003cf8:	e5932084 	ldr	r2, [r3, #132]	; 0x84
 1003cfc:	e5931080 	ldr	r1, [r3, #128]	; 0x80
 1003d00:	e3520000 	cmp	r2, #0
 1003d04:	1afffff2 	bne	1003cd4 <XAxiDma_Reset+0xb8>
 1003d08:	e5912008 	ldr	r2, [r1, #8]
 1003d0c:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1003d10:	eafffff5 	b	1003cec <XAxiDma_Reset+0xd0>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1003d14:	e5903078 	ldr	r3, [r0, #120]	; 0x78
 1003d18:	e3530000 	cmp	r3, #0
 1003d1c:	0affffe3 	beq	1003cb0 <XAxiDma_Reset+0x94>
 1003d20:	e2833001 	add	r3, r3, #1
 1003d24:	e7923283 	ldr	r3, [r2, r3, lsl #5]
 1003d28:	e580305c 	str	r3, [r0, #92]	; 0x5c
 1003d2c:	eaffffe1 	b	1003cb8 <XAxiDma_Reset+0x9c>

01003d30 <XAxiDma_ResetIsDone>:
	TxRingPtr = XAxiDma_GetTxRing(InstancePtr);
	RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

	/* Check transmit channel
	 */
	if (InstancePtr->HasMm2S) {
 1003d30:	e5903004 	ldr	r3, [r0, #4]
 1003d34:	e3530000 	cmp	r3, #0
 1003d38:	0a000003 	beq	1003d4c <XAxiDma_ResetIsDone+0x1c>
 1003d3c:	e5903014 	ldr	r3, [r0, #20]
 1003d40:	e5933000 	ldr	r3, [r3]
		RegisterValue = XAxiDma_ReadReg(TxRingPtr->ChanBase,
			XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1003d44:	e3130004 	tst	r3, #4
 1003d48:	1a000009 	bne	1003d74 <XAxiDma_ResetIsDone+0x44>
		}
	}

	/* Check receive channel
	 */
	if (InstancePtr->HasS2Mm) {
 1003d4c:	e5903008 	ldr	r3, [r0, #8]
 1003d50:	e3530000 	cmp	r3, #0
 1003d54:	0a000004 	beq	1003d6c <XAxiDma_ResetIsDone+0x3c>
 1003d58:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1003d5c:	e5930000 	ldr	r0, [r3]
		RegisterValue = XAxiDma_ReadReg(RxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1003d60:	e2200004 	eor	r0, r0, #4
 1003d64:	e7e00150 	ubfx	r0, r0, #2, #1
 1003d68:	e12fff1e 	bx	lr

			return 0;
		}
	}

	return 1;
 1003d6c:	e3a00001 	mov	r0, #1
}
 1003d70:	e12fff1e 	bx	lr
			return 0;
 1003d74:	e3a00000 	mov	r0, #0
 1003d78:	e12fff1e 	bx	lr

01003d7c <XAxiDma_CfgInitialize>:
{
 1003d7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!Config) {
 1003d80:	e2515000 	subs	r5, r1, #0
	InstancePtr->Initialized = 0;
 1003d84:	e3a01000 	mov	r1, #0
{
 1003d88:	e24dd00c 	sub	sp, sp, #12
	InstancePtr->Initialized = 0;
 1003d8c:	e580100c 	str	r1, [r0, #12]
		return XST_INVALID_PARAM;
 1003d90:	03a0000f 	moveq	r0, #15
	if(!Config) {
 1003d94:	0a000078 	beq	1003f7c <XAxiDma_CfgInitialize+0x200>
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1003d98:	e3a02e75 	mov	r2, #1872	; 0x750
 1003d9c:	e1a04000 	mov	r4, r0
	BaseAddr = Config->BaseAddr;
 1003da0:	e5956004 	ldr	r6, [r5, #4]
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1003da4:	fa001e7d 	blx	100b7a0 <memset>
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 1003da8:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 1003dac:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
	InstancePtr->AddrWidth = Config->AddrWidth;
 1003db0:	e595103c 	ldr	r1, [r5, #60]	; 0x3c
	if (!InstancePtr->TxNumChannels)
 1003db4:	e3530000 	cmp	r3, #0
	InstancePtr->HasMm2S = Config->HasMm2S;
 1003db8:	e595b00c 	ldr	fp, [r5, #12]
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 1003dbc:	e595a018 	ldr	sl, [r5, #24]
	InstancePtr->HasSg = Config->HasSg;
 1003dc0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1003dc4:	e5958038 	ldr	r8, [r5, #56]	; 0x38
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 1003dc8:	e5843740 	str	r3, [r4, #1856]	; 0x740
		InstancePtr->TxNumChannels = 1;
 1003dcc:	03a03001 	moveq	r3, #1
 1003dd0:	05843740 	streq	r3, [r4, #1856]	; 0x740
	if (!InstancePtr->RxNumChannels)
 1003dd4:	e3500000 	cmp	r0, #0
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 1003dd8:	e5840744 	str	r0, [r4, #1860]	; 0x744
		InstancePtr->RxNumChannels = 1;
 1003ddc:	03a00001 	moveq	r0, #1
	InstancePtr->AddrWidth = Config->AddrWidth;
 1003de0:	e58d1004 	str	r1, [sp, #4]
	InstancePtr->HasMm2S = Config->HasMm2S;
 1003de4:	e8840840 	stm	r4, {r6, fp}
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 1003de8:	e584a008 	str	sl, [r4, #8]
	InstancePtr->HasSg = Config->HasSg;
 1003dec:	e5842010 	str	r2, [r4, #16]
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1003df0:	e5848748 	str	r8, [r4, #1864]	; 0x748
	InstancePtr->AddrWidth = Config->AddrWidth;
 1003df4:	e584174c 	str	r1, [r4, #1868]	; 0x74c
		InstancePtr->RxNumChannels = 1;
 1003df8:	05840744 	streq	r0, [r4, #1860]	; 0x744
	if (!InstancePtr->RxNumChannels)
 1003dfc:	0a000060 	beq	1003f84 <XAxiDma_CfgInitialize+0x208>
	if ((InstancePtr->RxNumChannels > 1) ||
 1003e00:	e3500001 	cmp	r0, #1
 1003e04:	da00005e 	ble	1003f84 <XAxiDma_CfgInitialize+0x208>
		MaxTransferLen =
 1003e08:	e30f9fff 	movw	r9, #65535	; 0xffff
	if (!InstancePtr->MicroDmaMode) {
 1003e0c:	e3580000 	cmp	r8, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1003e10:	e3a02002 	mov	r2, #2
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1003e14:	e3a03000 	mov	r3, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1003e18:	e584201c 	str	r2, [r4, #28]
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1003e1c:	e5843018 	str	r3, [r4, #24]
		InstancePtr->TxBdRing.MaxTransferLen = MaxTransferLen;
 1003e20:	01a02009 	moveq	r2, r9
	if (!InstancePtr->MicroDmaMode) {
 1003e24:	0a000006 	beq	1003e44 <XAxiDma_CfgInitialize+0xc8>
				((Config->Mm2SDataWidth / 4) *
 1003e28:	e5953014 	ldr	r3, [r5, #20]
 1003e2c:	e5952030 	ldr	r2, [r5, #48]	; 0x30
 1003e30:	e2831003 	add	r1, r3, #3
 1003e34:	e3530000 	cmp	r3, #0
 1003e38:	b1a03001 	movlt	r3, r1
 1003e3c:	e1a03143 	asr	r3, r3, #2
 1003e40:	e0020392 	mul	r2, r2, r3
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1003e44:	e3500000 	cmp	r0, #0
	InstancePtr->TxBdRing.RingIndex = 0;
 1003e48:	e3a03000 	mov	r3, #0
 1003e4c:	e5842030 	str	r2, [r4, #48]	; 0x30
						 = AXIDMA_CHANNEL_HALTED;
 1003e50:	c3a0706c 	movgt	r7, #108	; 0x6c
	InstancePtr->TxBdRing.RingIndex = 0;
 1003e54:	e5843078 	str	r3, [r4, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1003e58:	c1a02004 	movgt	r2, r4
						 = AXIDMA_CHANNEL_HALTED;
 1003e5c:	c3a0e002 	movgt	lr, #2
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1003e60:	c3a0c001 	movgt	ip, #1
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1003e64:	da000007 	ble	1003e88 <XAxiDma_CfgInitialize+0x10c>
						 = AXIDMA_CHANNEL_HALTED;
 1003e68:	e0214397 	mla	r1, r7, r3, r4
 1003e6c:	e282206c 	add	r2, r2, #108	; 0x6c
 1003e70:	e581e088 	str	lr, [r1, #136]	; 0x88
		InstancePtr->RxBdRing[Index].RingIndex = Index;
 1003e74:	e5823078 	str	r3, [r2, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1003e78:	e2833001 	add	r3, r3, #1
 1003e7c:	e1500003 	cmp	r0, r3
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1003e80:	e582c018 	str	ip, [r2, #24]
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1003e84:	1afffff7 	bne	1003e68 <XAxiDma_CfgInitialize+0xec>
	if (InstancePtr->HasMm2S) {
 1003e88:	e35b0000 	cmp	fp, #0
 1003e8c:	0a00000c 	beq	1003ec4 <XAxiDma_CfgInitialize+0x148>
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1003e90:	e5953014 	ldr	r3, [r5, #20]
		if (InstancePtr->AddrWidth > 32)
 1003e94:	e59d2004 	ldr	r2, [sp, #4]
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1003e98:	e595c008 	ldr	ip, [r5, #8]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 1003e9c:	e5951010 	ldr	r1, [r5, #16]
		if (InstancePtr->AddrWidth > 32)
 1003ea0:	e3520020 	cmp	r2, #32
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1003ea4:	e1a031a3 	lsr	r3, r3, #3
		if (InstancePtr->AddrWidth > 32)
 1003ea8:	d3a02000 	movle	r2, #0
		InstancePtr->TxBdRing.ChanBase =
 1003eac:	e5846014 	str	r6, [r4, #20]
		if (InstancePtr->AddrWidth > 32)
 1003eb0:	c3a02001 	movgt	r2, #1
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1003eb4:	e584c020 	str	ip, [r4, #32]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 1003eb8:	e5841024 	str	r1, [r4, #36]	; 0x24
		InstancePtr->TxBdRing.DataWidth =
 1003ebc:	e5843028 	str	r3, [r4, #40]	; 0x28
 1003ec0:	e584202c 	str	r2, [r4, #44]	; 0x2c
	if (InstancePtr->HasS2Mm) {
 1003ec4:	e35a0000 	cmp	sl, #0
 1003ec8:	0a00001e 	beq	1003f48 <XAxiDma_CfgInitialize+0x1cc>
		for (Index = 0;
 1003ecc:	e3500000 	cmp	r0, #0
 1003ed0:	da00001c 	ble	1003f48 <XAxiDma_CfgInitialize+0x1cc>
			((unsigned int)Config->S2MmDataWidth >> 3);
 1003ed4:	e5951020 	ldr	r1, [r5, #32]
 1003ed8:	e3a0306c 	mov	r3, #108	; 0x6c
 1003edc:	e0204093 	mla	r0, r3, r0, r4
 1003ee0:	e59d3004 	ldr	r3, [sp, #4]
					Config->HasStsCntrlStrm;
 1003ee4:	e595e008 	ldr	lr, [r5, #8]
						((Config->S2MmDataWidth / 4) *
 1003ee8:	e3510000 	cmp	r1, #0
					Config->HasS2MmDRE;
 1003eec:	e595c01c 	ldr	ip, [r5, #28]
						((Config->S2MmDataWidth / 4) *
 1003ef0:	e2817003 	add	r7, r1, #3
 1003ef4:	a1a07001 	movge	r7, r1
 1003ef8:	e1a07147 	asr	r7, r7, #2
 1003efc:	e3530020 	cmp	r3, #32
			((unsigned int)Config->S2MmDataWidth >> 3);
 1003f00:	e1a011a1 	lsr	r1, r1, #3
 1003f04:	e2866030 	add	r6, r6, #48	; 0x30
 1003f08:	d3a0a000 	movle	sl, #0
 1003f0c:	c3a0a001 	movgt	sl, #1
 1003f10:	e1a03004 	mov	r3, r4
			if (!InstancePtr->MicroDmaMode) {
 1003f14:	e3580000 	cmp	r8, #0
				InstancePtr->RxBdRing[Index].MaxTransferLen =
 1003f18:	e1a02009 	mov	r2, r9
			InstancePtr->RxBdRing[Index].ChanBase =
 1003f1c:	e5836080 	str	r6, [r3, #128]	; 0x80
			InstancePtr->RxBdRing[Index].HasStsCntrlStrm =
 1003f20:	e283306c 	add	r3, r3, #108	; 0x6c
 1003f24:	e583e020 	str	lr, [r3, #32]
			InstancePtr->RxBdRing[Index].HasDRE =
 1003f28:	e583c024 	str	ip, [r3, #36]	; 0x24
			InstancePtr->RxBdRing[Index].DataWidth =
 1003f2c:	e5831028 	str	r1, [r3, #40]	; 0x28
						((Config->S2MmDataWidth / 4) *
 1003f30:	15952034 	ldrne	r2, [r5, #52]	; 0x34
 1003f34:	e583a02c 	str	sl, [r3, #44]	; 0x2c
 1003f38:	10020792 	mulne	r2, r2, r7
 1003f3c:	e5832030 	str	r2, [r3, #48]	; 0x30
		for (Index = 0;
 1003f40:	e1530000 	cmp	r3, r0
 1003f44:	1afffff2 	bne	1003f14 <XAxiDma_CfgInitialize+0x198>
	XAxiDma_Reset(InstancePtr);
 1003f48:	e1a00004 	mov	r0, r4
 1003f4c:	e3a05f7d 	mov	r5, #500	; 0x1f4
 1003f50:	ebffff31 	bl	1003c1c <XAxiDma_Reset>
	while (TimeOut) {
 1003f54:	ea000001 	b	1003f60 <XAxiDma_CfgInitialize+0x1e4>
 1003f58:	e2555001 	subs	r5, r5, #1
 1003f5c:	0a00000f 	beq	1003fa0 <XAxiDma_CfgInitialize+0x224>
		if(XAxiDma_ResetIsDone(InstancePtr)) {
 1003f60:	e1a00004 	mov	r0, r4
 1003f64:	ebffff71 	bl	1003d30 <XAxiDma_ResetIsDone>
 1003f68:	e3500000 	cmp	r0, #0
 1003f6c:	0afffff9 	beq	1003f58 <XAxiDma_CfgInitialize+0x1dc>
	return XST_SUCCESS;
 1003f70:	e3a00000 	mov	r0, #0
	InstancePtr->Initialized = 1;
 1003f74:	e3a03001 	mov	r3, #1
 1003f78:	e584300c 	str	r3, [r4, #12]
}
 1003f7c:	e28dd00c 	add	sp, sp, #12
 1003f80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((InstancePtr->RxNumChannels > 1) ||
 1003f84:	e5943740 	ldr	r3, [r4, #1856]	; 0x740
 1003f88:	e3530001 	cmp	r3, #1
 1003f8c:	caffff9d 	bgt	1003e08 <XAxiDma_CfgInitialize+0x8c>
		MaxTransferLen = (1U << Config->SgLengthWidth) - 1;
 1003f90:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1003f94:	e3e09000 	mvn	r9, #0
 1003f98:	e1e09319 	mvn	r9, r9, lsl r3
 1003f9c:	eaffff9a 	b	1003e0c <XAxiDma_CfgInitialize+0x90>
		return XST_DMA_ERROR;
 1003fa0:	e3a00009 	mov	r0, #9
		InstancePtr->Initialized = 0;
 1003fa4:	e584500c 	str	r5, [r4, #12]
}
 1003fa8:	e28dd00c 	add	sp, sp, #12
 1003fac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

01003fb0 <XAxiDma_Pause>:
*
*****************************************************************************/
int XAxiDma_Pause(XAxiDma * InstancePtr)
{

	if (!InstancePtr->Initialized) {
 1003fb0:	e590300c 	ldr	r3, [r0, #12]
 1003fb4:	e3530000 	cmp	r3, #0
 1003fb8:	0a000025 	beq	1004054 <XAxiDma_Pause+0xa4>
					" %d\r\n",InstancePtr->Initialized);

		return XST_NOT_SGDMA;
	}

	if (InstancePtr->HasMm2S) {
 1003fbc:	e5903004 	ldr	r3, [r0, #4]
 1003fc0:	e3530000 	cmp	r3, #0
 1003fc4:	0a000007 	beq	1003fe8 <XAxiDma_Pause+0x38>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* If channel is halted, then we do not need to do anything
		 */
		if(!XAxiDma_HasSg(InstancePtr)) {
 1003fc8:	e5903010 	ldr	r3, [r0, #16]
 1003fcc:	e3530000 	cmp	r3, #0
 1003fd0:	05902014 	ldreq	r2, [r0, #20]
 1003fd4:	05923000 	ldreq	r3, [r2]
			XAxiDma_WriteReg(TxRingPtr->ChanBase,
 1003fd8:	03c33001 	biceq	r3, r3, #1
	*LocalAddr = Value;
 1003fdc:	05823000 	streq	r3, [r2]
				XAxiDma_ReadReg(TxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET)
				& ~XAXIDMA_CR_RUNSTOP_MASK);
		}

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1003fe0:	e3a03002 	mov	r3, #2
 1003fe4:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 1003fe8:	e5903008 	ldr	r3, [r0, #8]
 1003fec:	e3530000 	cmp	r3, #0
 1003ff0:	0a000015 	beq	100404c <XAxiDma_Pause+0x9c>
{
 1003ff4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
		int RingIndex = 0;
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1003ff8:	e5904744 	ldr	r4, [r0, #1860]	; 0x744
 1003ffc:	e3540000 	cmp	r4, #0
 1004000:	da00000f 	ble	1004044 <XAxiDma_Pause+0x94>
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);

			/* If channel is halted, then we do not need to do anything
			 */

			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 1004004:	e5907010 	ldr	r7, [r0, #16]
 1004008:	e1a02000 	mov	r2, r0
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 100400c:	e3a03000 	mov	r3, #0
					XAxiDma_ReadReg(RxRingPtr->ChanBase,
					XAXIDMA_CR_OFFSET)
					& ~XAXIDMA_CR_RUNSTOP_MASK);
			}

			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004010:	e3a0606c 	mov	r6, #108	; 0x6c
 1004014:	e3a05002 	mov	r5, #2
			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 1004018:	e3570000 	cmp	r7, #0
 100401c:	e282206c 	add	r2, r2, #108	; 0x6c
	return *(volatile u32 *) Addr;
 1004020:	0592e014 	ldreq	lr, [r2, #20]
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004024:	e0210396 	mla	r1, r6, r3, r0
				RingIndex++) {
 1004028:	e2833001 	add	r3, r3, #1
 100402c:	059ec000 	ldreq	ip, [lr]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 1004030:	03ccc001 	biceq	ip, ip, #1
	*LocalAddr = Value;
 1004034:	058ec000 	streq	ip, [lr]
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004038:	e1530004 	cmp	r3, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 100403c:	e5815088 	str	r5, [r1, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004040:	1afffff4 	bne	1004018 <XAxiDma_Pause+0x68>
		}
	}

	return XST_SUCCESS;
 1004044:	e3a00000 	mov	r0, #0

}
 1004048:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	return XST_SUCCESS;
 100404c:	e3a00000 	mov	r0, #0
}
 1004050:	e12fff1e 	bx	lr
		return XST_NOT_SGDMA;
 1004054:	e3a00010 	mov	r0, #16
 1004058:	e12fff1e 	bx	lr

0100405c <XAxiDma_Resume>:
*****************************************************************************/
int XAxiDma_Resume(XAxiDma * InstancePtr)
{
	int Status;

	if (!InstancePtr->Initialized) {
 100405c:	e590300c 	ldr	r3, [r0, #12]
 1004060:	e3530000 	cmp	r3, #0
 1004064:	0a000033 	beq	1004138 <XAxiDma_Resume+0xdc>
		" %d\r\n",InstancePtr->Initialized);

		return 0;
	}

	if (InstancePtr->HasMm2S) {
 1004068:	e5902004 	ldr	r2, [r0, #4]
{
 100406c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1004070:	e1a04000 	mov	r4, r0
	if (InstancePtr->HasMm2S) {
 1004074:	e3520000 	cmp	r2, #0
 1004078:	0a000029 	beq	1004124 <XAxiDma_Resume+0xc8>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(TxRingPtr)) {
 100407c:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 1004080:	e5932004 	ldr	r2, [r3, #4]
 1004084:	e3120001 	tst	r2, #1
 1004088:	1a000052 	bne	10041d8 <XAxiDma_Resume+0x17c>

			return 0;
		}
	}

	if (InstancePtr->HasS2Mm) {
 100408c:	e5902008 	ldr	r2, [r0, #8]
 1004090:	e3520000 	cmp	r2, #0
 1004094:	0a000003 	beq	10040a8 <XAxiDma_Resume+0x4c>
		XAxiDma_BdRing *RxRingPtr;
		RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 1004098:	e5902080 	ldr	r2, [r0, #128]	; 0x80
 100409c:	e5922004 	ldr	r2, [r2, #4]
 10040a0:	e3120001 	tst	r2, #1
 10040a4:	1a00005e 	bne	1004224 <XAxiDma_Resume+0x1c8>
		if(XAxiDma_HasSg(InstancePtr)) {
 10040a8:	e5943010 	ldr	r3, [r4, #16]
 10040ac:	e3530000 	cmp	r3, #0
 10040b0:	1a000056 	bne	1004210 <XAxiDma_Resume+0x1b4>
		TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10040b4:	e3a03001 	mov	r3, #1
 10040b8:	e584301c 	str	r3, [r4, #28]
	if (InstancePtr->HasS2Mm) {
 10040bc:	e5943008 	ldr	r3, [r4, #8]
 10040c0:	e3530000 	cmp	r3, #0
 10040c4:	0a000019 	beq	1004130 <XAxiDma_Resume+0xd4>
 10040c8:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 10040cc:	e3530000 	cmp	r3, #0
 10040d0:	da000016 	ble	1004130 <XAxiDma_Resume+0xd4>
 10040d4:	e3a05000 	mov	r5, #0
				Status = XAxiDma_BdRingStart(RxRingPtr);
 10040d8:	e3a0606c 	mov	r6, #108	; 0x6c
 10040dc:	e2848080 	add	r8, r4, #128	; 0x80
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10040e0:	e3a07001 	mov	r7, #1
 10040e4:	ea000005 	b	1004100 <XAxiDma_Resume+0xa4>
 10040e8:	e0234596 	mla	r3, r6, r5, r4
					RingIndex++) {
 10040ec:	e2855001 	add	r5, r5, #1
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10040f0:	e5837088 	str	r7, [r3, #136]	; 0x88
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 10040f4:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10040f8:	e1530005 	cmp	r3, r5
 10040fc:	da00000b 	ble	1004130 <XAxiDma_Resume+0xd4>
			if(XAxiDma_HasSg(InstancePtr)) {
 1004100:	e5943010 	ldr	r3, [r4, #16]
 1004104:	e3530000 	cmp	r3, #0
 1004108:	0afffff6 	beq	10040e8 <XAxiDma_Resume+0x8c>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 100410c:	e0208596 	mla	r0, r6, r5, r8
 1004110:	eb00022d 	bl	10049cc <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1004114:	e3500000 	cmp	r0, #0
 1004118:	0afffff2 	beq	10040e8 <XAxiDma_Resume+0x8c>
					return XST_DMA_ERROR;
 100411c:	e3a00009 	mov	r0, #9
 1004120:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	if (InstancePtr->HasS2Mm) {
 1004124:	e5903008 	ldr	r3, [r0, #8]
 1004128:	e3530000 	cmp	r3, #0
 100412c:	1a000003 	bne	1004140 <XAxiDma_Resume+0xe4>
	return XST_SUCCESS;
 1004130:	e3a00000 	mov	r0, #0
}
 1004134:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return XST_NOT_SGDMA;
 1004138:	e3a00010 	mov	r0, #16
}
 100413c:	e12fff1e 	bx	lr
		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 1004140:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1004144:	e5933004 	ldr	r3, [r3, #4]
 1004148:	e3130001 	tst	r3, #1
 100414c:	0affffdd 	beq	10040c8 <XAxiDma_Resume+0x6c>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004150:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1004154:	e3530000 	cmp	r3, #0
 1004158:	da000042 	ble	1004268 <XAxiDma_Resume+0x20c>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 100415c:	e5942088 	ldr	r2, [r4, #136]	; 0x88
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr,
 1004160:	e2846080 	add	r6, r4, #128	; 0x80
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1004164:	e3520002 	cmp	r2, #2
 1004168:	1a00003e 	bne	1004268 <XAxiDma_Resume+0x20c>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 100416c:	e3a05000 	mov	r5, #0
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004170:	e3a0706c 	mov	r7, #108	; 0x6c
 1004174:	e3a08001 	mov	r8, #1
 1004178:	ea00000e 	b	10041b8 <XAxiDma_Resume+0x15c>
 100417c:	e5962000 	ldr	r2, [r6]
 1004180:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 1004184:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1004188:	e5823000 	str	r3, [r2]
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 100418c:	e0234597 	mla	r3, r7, r5, r4
						RingIndex++) {
 1004190:	e2855001 	add	r5, r5, #1
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1004194:	e0224597 	mla	r2, r7, r5, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004198:	e5838088 	str	r8, [r3, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 100419c:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10041a0:	e286606c 	add	r6, r6, #108	; 0x6c
 10041a4:	e1550003 	cmp	r5, r3
 10041a8:	aa000014 	bge	1004200 <XAxiDma_Resume+0x1a4>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10041ac:	e5923088 	ldr	r3, [r2, #136]	; 0x88
 10041b0:	e3530002 	cmp	r3, #2
 10041b4:	1a000011 	bne	1004200 <XAxiDma_Resume+0x1a4>
			if(XAxiDma_HasSg(InstancePtr)) {
 10041b8:	e5943010 	ldr	r3, [r4, #16]
 10041bc:	e3530000 	cmp	r3, #0
 10041c0:	0affffed 	beq	100417c <XAxiDma_Resume+0x120>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 10041c4:	e1a00006 	mov	r0, r6
 10041c8:	eb0001ff 	bl	10049cc <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 10041cc:	e3500000 	cmp	r0, #0
 10041d0:	0affffed 	beq	100418c <XAxiDma_Resume+0x130>
 10041d4:	eaffffd0 	b	100411c <XAxiDma_Resume+0xc0>
		if (TxRingPtr->RunState == AXIDMA_CHANNEL_HALTED) {
 10041d8:	e590201c 	ldr	r2, [r0, #28]
 10041dc:	e3520002 	cmp	r2, #2
 10041e0:	0a000012 	beq	1004230 <XAxiDma_Resume+0x1d4>
	if (InstancePtr->HasS2Mm) {
 10041e4:	e5943008 	ldr	r3, [r4, #8]
 10041e8:	e3530000 	cmp	r3, #0
 10041ec:	1affffd7 	bne	1004150 <XAxiDma_Resume+0xf4>
	if (InstancePtr->HasMm2S) {
 10041f0:	e5943004 	ldr	r3, [r4, #4]
 10041f4:	e3530000 	cmp	r3, #0
 10041f8:	1affffaa 	bne	10040a8 <XAxiDma_Resume+0x4c>
 10041fc:	eaffffcb 	b	1004130 <XAxiDma_Resume+0xd4>
 1004200:	e5943004 	ldr	r3, [r4, #4]
 1004204:	e3530000 	cmp	r3, #0
 1004208:	0affffab 	beq	10040bc <XAxiDma_Resume+0x60>
 100420c:	eaffffa5 	b	10040a8 <XAxiDma_Resume+0x4c>
			Status = XAxiDma_BdRingStart(TxRingPtr);
 1004210:	e2840014 	add	r0, r4, #20
 1004214:	eb0001ec 	bl	10049cc <XAxiDma_BdRingStart>
			if (Status != XST_SUCCESS) {
 1004218:	e3500000 	cmp	r0, #0
 100421c:	0affffa4 	beq	10040b4 <XAxiDma_Resume+0x58>
 1004220:	eaffffbd 	b	100411c <XAxiDma_Resume+0xc0>
		if (TxRingPtr->RunState == AXIDMA_CHANNEL_HALTED) {
 1004224:	e594201c 	ldr	r2, [r4, #28]
 1004228:	e3520002 	cmp	r2, #2
 100422c:	1affffc7 	bne	1004150 <XAxiDma_Resume+0xf4>
			if(XAxiDma_HasSg(InstancePtr)) {
 1004230:	e5942010 	ldr	r2, [r4, #16]
 1004234:	e3520000 	cmp	r2, #0
 1004238:	1a000005 	bne	1004254 <XAxiDma_Resume+0x1f8>
	return *(volatile u32 *) Addr;
 100423c:	e5932000 	ldr	r2, [r3]
				XAxiDma_WriteReg(TxRingPtr->ChanBase,
 1004240:	e3822001 	orr	r2, r2, #1
	*LocalAddr = Value;
 1004244:	e5832000 	str	r2, [r3]
			TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004248:	e3a03001 	mov	r3, #1
 100424c:	e584301c 	str	r3, [r4, #28]
 1004250:	eaffffe3 	b	10041e4 <XAxiDma_Resume+0x188>
				Status = XAxiDma_BdRingStart(TxRingPtr);
 1004254:	e2840014 	add	r0, r4, #20
 1004258:	eb0001db 	bl	10049cc <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 100425c:	e3500000 	cmp	r0, #0
 1004260:	0afffff8 	beq	1004248 <XAxiDma_Resume+0x1ec>
 1004264:	eaffffac 	b	100411c <XAxiDma_Resume+0xc0>
 1004268:	e5942004 	ldr	r2, [r4, #4]
	if (InstancePtr->HasMm2S) {
 100426c:	e3520000 	cmp	r2, #0
 1004270:	0affff95 	beq	10040cc <XAxiDma_Resume+0x70>
 1004274:	eaffff8b 	b	10040a8 <XAxiDma_Resume+0x4c>

01004278 <XAxiDma_Busy>:
 *
 *****************************************************************************/
u32 XAxiDma_Busy(XAxiDma *InstancePtr, int Direction)
{

	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1004278:	e5903000 	ldr	r3, [r0]
 100427c:	e0811081 	add	r1, r1, r1, lsl #1
 1004280:	e0833201 	add	r3, r3, r1, lsl #4
	return *(volatile u32 *) Addr;
 1004284:	e5930004 	ldr	r0, [r3, #4]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_SR_OFFSET) &
				XAXIDMA_IDLE_MASK) ? FALSE : TRUE);
 1004288:	e2200002 	eor	r0, r0, #2
}
 100428c:	e7e000d0 	ubfx	r0, r0, #1, #1
 1004290:	e12fff1e 	bx	lr

01004294 <XAxiDma_SelectKeyHole>:
 *****************************************************************************/
int XAxiDma_SelectKeyHole(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1004294:	e0811081 	add	r1, r1, r1, lsl #1
 1004298:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 100429c:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10042a0:	e1a01201 	lsl	r1, r1, #4
 10042a4:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_KEYHOLE_MASK;
 10042a8:	13833008 	orrne	r3, r3, #8
	else
		Value &= ~XAXIDMA_CR_KEYHOLE_MASK;
 10042ac:	03c33008 	biceq	r3, r3, #8
	*LocalAddr = Value;
 10042b0:	e7813000 	str	r3, [r1, r0]
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;

}
 10042b4:	e3a00000 	mov	r0, #0
 10042b8:	e12fff1e 	bx	lr

010042bc <XAxiDma_SelectCyclicMode>:
 *****************************************************************************/
int XAxiDma_SelectCyclicMode(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10042bc:	e0811081 	add	r1, r1, r1, lsl #1
 10042c0:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 10042c4:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10042c8:	e1a01201 	lsl	r1, r1, #4
	return *(volatile u32 *) Addr;
 10042cc:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_CYCLIC_MASK;
 10042d0:	13833010 	orrne	r3, r3, #16
	else
		Value &= ~XAXIDMA_CR_CYCLIC_MASK;
 10042d4:	03c33010 	biceq	r3, r3, #16
	*LocalAddr = Value;
 10042d8:	e7813000 	str	r3, [r1, r0]
	XAxiDma_WriteReg(InstancePtr->RegBase +
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;
}
 10042dc:	e3a00000 	mov	r0, #0
 10042e0:	e12fff1e 	bx	lr

010042e4 <XAxiDma_SimpleTransfer>:
	u32 WordBits;
	int RingIndex = 0;

	/* If Scatter Gather is included then, cannot submit
	 */
	if (XAxiDma_HasSg(InstancePtr)) {
 10042e4:	e590c010 	ldr	ip, [r0, #16]
 10042e8:	e35c0000 	cmp	ip, #0
 10042ec:	1a000032 	bne	10043bc <XAxiDma_SimpleTransfer+0xd8>
							" supported\r\n");

		return XST_FAILURE;
	}

	if(Direction == XAXIDMA_DMA_TO_DEVICE){
 10042f0:	e3530000 	cmp	r3, #0
 10042f4:	1a000024 	bne	100438c <XAxiDma_SimpleTransfer+0xa8>
		if ((Length < 1) ||
 10042f8:	e3520000 	cmp	r2, #0
 10042fc:	0a000030 	beq	10043c4 <XAxiDma_SimpleTransfer+0xe0>
 1004300:	e5903030 	ldr	r3, [r0, #48]	; 0x30
 1004304:	e1530002 	cmp	r3, r2
 1004308:	3a00002d 	bcc	10043c4 <XAxiDma_SimpleTransfer+0xe0>
			(Length > InstancePtr->TxBdRing.MaxTransferLen)) {
			return XST_INVALID_PARAM;
		}

		if (!InstancePtr->HasMm2S) {
 100430c:	e5903004 	ldr	r3, [r0, #4]
 1004310:	e3530000 	cmp	r3, #0
 1004314:	0a000028 	beq	10043bc <XAxiDma_SimpleTransfer+0xd8>
		}

		/* If the engine is doing transfer, cannot submit
		 */

		if(!(XAxiDma_ReadReg(InstancePtr->TxBdRing.ChanBase,
 1004318:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 100431c:	e593c004 	ldr	ip, [r3, #4]
 1004320:	e31c0001 	tst	ip, #1
 1004324:	1a000003 	bne	1004338 <XAxiDma_SimpleTransfer+0x54>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1004328:	e590c000 	ldr	ip, [r0]
 100432c:	e59cc004 	ldr	ip, [ip, #4]
				XAXIDMA_SR_OFFSET) & XAXIDMA_HALTED_MASK)) {
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 1004330:	e31c0002 	tst	ip, #2
 1004334:	0a000020 	beq	10043bc <XAxiDma_SimpleTransfer+0xd8>
							"Engine is busy\r\n");
				return XST_FAILURE;
			}
		}

		if (!InstancePtr->MicroDmaMode) {
 1004338:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 100433c:	e35c0000 	cmp	ip, #0
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 1004340:	0590c028 	ldreq	ip, [r0, #40]	; 0x28
		}
		else {
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 1004344:	1300cfff 	movwne	ip, #4095	; 0xfff
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 1004348:	024cc001 	subeq	ip, ip, #1
		}

		if ((BuffAddr & WordBits)) {
 100434c:	e11c0001 	tst	ip, r1
 1004350:	0a000002 	beq	1004360 <XAxiDma_SimpleTransfer+0x7c>

			if (!InstancePtr->TxBdRing.HasDRE) {
 1004354:	e590c024 	ldr	ip, [r0, #36]	; 0x24
 1004358:	e35c0000 	cmp	ip, #0
 100435c:	0a000018 	beq	10043c4 <XAxiDma_SimpleTransfer+0xe0>
		}


		XAxiDma_WriteReg(InstancePtr->TxBdRing.ChanBase,
				 XAXIDMA_SRCADDR_OFFSET, LOWER_32_BITS(BuffAddr));
		if (InstancePtr->AddrWidth > 32)
 1004360:	e590074c 	ldr	r0, [r0, #1868]	; 0x74c
	*LocalAddr = Value;
 1004364:	e5831018 	str	r1, [r3, #24]
 1004368:	e3500020 	cmp	r0, #32
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
					XAXIDMA_BUFFLEN_OFFSET, Length);

	}

	return XST_SUCCESS;
 100436c:	e3a00000 	mov	r0, #0
 1004370:	c3a01000 	movgt	r1, #0
 1004374:	c583101c 	strgt	r1, [r3, #28]
	return *(volatile u32 *) Addr;
 1004378:	e5931000 	ldr	r1, [r3]
		XAxiDma_WriteReg(InstancePtr->TxBdRing.ChanBase,
 100437c:	e3811001 	orr	r1, r1, #1
	*LocalAddr = Value;
 1004380:	e5831000 	str	r1, [r3]
 1004384:	e5832028 	str	r2, [r3, #40]	; 0x28
 1004388:	e12fff1e 	bx	lr
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 100438c:	e3530001 	cmp	r3, #1
 1004390:	0a000001 	beq	100439c <XAxiDma_SimpleTransfer+0xb8>
	return XST_SUCCESS;
 1004394:	e1a0000c 	mov	r0, ip
 1004398:	e12fff1e 	bx	lr
		if ((Length < 1) ||
 100439c:	e3520000 	cmp	r2, #0
 10043a0:	0a000007 	beq	10043c4 <XAxiDma_SimpleTransfer+0xe0>
 10043a4:	e590c09c 	ldr	ip, [r0, #156]	; 0x9c
 10043a8:	e15c0002 	cmp	ip, r2
 10043ac:	3a000004 	bcc	10043c4 <XAxiDma_SimpleTransfer+0xe0>
		if (!InstancePtr->HasS2Mm) {
 10043b0:	e590c008 	ldr	ip, [r0, #8]
 10043b4:	e35c0000 	cmp	ip, #0
 10043b8:	1a000003 	bne	10043cc <XAxiDma_SimpleTransfer+0xe8>
		return XST_FAILURE;
 10043bc:	e3a00001 	mov	r0, #1
 10043c0:	e12fff1e 	bx	lr
			return XST_INVALID_PARAM;
 10043c4:	e3a0000f 	mov	r0, #15
 10043c8:	e12fff1e 	bx	lr
		if(!(XAxiDma_ReadReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 10043cc:	e590c080 	ldr	ip, [r0, #128]	; 0x80
{
 10043d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return *(volatile u32 *) Addr;
 10043d4:	e59ce004 	ldr	lr, [ip, #4]
		if(!(XAxiDma_ReadReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 10043d8:	e31e0001 	tst	lr, #1
 10043dc:	1a000003 	bne	10043f0 <XAxiDma_SimpleTransfer+0x10c>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 10043e0:	e590e000 	ldr	lr, [r0]
 10043e4:	e59ee034 	ldr	lr, [lr, #52]	; 0x34
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 10043e8:	e31e0002 	tst	lr, #2
 10043ec:	0a000014 	beq	1004444 <XAxiDma_SimpleTransfer+0x160>
		if (!InstancePtr->MicroDmaMode) {
 10043f0:	e5903748 	ldr	r3, [r0, #1864]	; 0x748
 10043f4:	e3530000 	cmp	r3, #0
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 10043f8:	05903094 	ldreq	r3, [r0, #148]	; 0x94
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 10043fc:	13003fff 	movwne	r3, #4095	; 0xfff
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 1004400:	02433001 	subeq	r3, r3, #1
		if ((BuffAddr & WordBits)) {
 1004404:	e1130001 	tst	r3, r1
 1004408:	0a000002 	beq	1004418 <XAxiDma_SimpleTransfer+0x134>
			if (!InstancePtr->RxBdRing[RingIndex].HasDRE) {
 100440c:	e5903090 	ldr	r3, [r0, #144]	; 0x90
 1004410:	e3530000 	cmp	r3, #0
 1004414:	0a00000c 	beq	100444c <XAxiDma_SimpleTransfer+0x168>
		if (InstancePtr->AddrWidth > 32)
 1004418:	e590374c 	ldr	r3, [r0, #1868]	; 0x74c
	return XST_SUCCESS;
 100441c:	e3a00000 	mov	r0, #0
	*LocalAddr = Value;
 1004420:	e58c1018 	str	r1, [ip, #24]
		if (InstancePtr->AddrWidth > 32)
 1004424:	e3530020 	cmp	r3, #32
 1004428:	c3a03000 	movgt	r3, #0
 100442c:	c58c301c 	strgt	r3, [ip, #28]
	return *(volatile u32 *) Addr;
 1004430:	e59c3000 	ldr	r3, [ip]
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 1004434:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1004438:	e58c3000 	str	r3, [ip]
 100443c:	e58c2028 	str	r2, [ip, #40]	; 0x28
 1004440:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		return XST_FAILURE;
 1004444:	e1a00003 	mov	r0, r3
 1004448:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
			return XST_INVALID_PARAM;
 100444c:	e3a0000f 	mov	r0, #15
}
 1004450:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01004454 <XAxiDma_LookupConfig>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].DeviceId == DeviceId) {
 1004454:	e303306c 	movw	r3, #12396	; 0x306c
 1004458:	e3403101 	movt	r3, #257	; 0x101
 100445c:	e5932000 	ldr	r2, [r3]
			break;
		}
	}

	return CfgPtr;
}
 1004460:	e1520000 	cmp	r2, r0
 1004464:	01a00003 	moveq	r0, r3
 1004468:	13a00000 	movne	r0, #0
 100446c:	e12fff1e 	bx	lr

01004470 <XAxiDma_LookupConfigBaseAddr>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].BaseAddr == Baseaddr) {
 1004470:	e303306c 	movw	r3, #12396	; 0x306c
 1004474:	e3403101 	movt	r3, #257	; 0x101
 1004478:	e5932004 	ldr	r2, [r3, #4]
			break;
		}
	}

	return CfgPtr;
}
 100447c:	e1520000 	cmp	r2, r0
 1004480:	01a00003 	moveq	r0, r3
 1004484:	13a00000 	movne	r0, #0
 1004488:	e12fff1e 	bx	lr

0100448c <XAxiDma_UpdateBdRingCDesc>:
	UINTPTR RegBase;
	UINTPTR BdPtr;
	int RingIndex = RingPtr->RingIndex;

	/* BD list has yet to be created for this channel */
	if (RingPtr->AllCnt == 0) {
 100448c:	e5902060 	ldr	r2, [r0, #96]	; 0x60
 1004490:	e3520000 	cmp	r2, #0
 1004494:	0a000020 	beq	100451c <XAxiDma_UpdateBdRingCDesc+0x90>

		return XST_DMA_SG_NO_LIST;
	}

	/* Do nothing if already started */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1004498:	e5902008 	ldr	r2, [r0, #8]
 100449c:	e1a03000 	mov	r3, r0
 10044a0:	e3520001 	cmp	r2, #1
 10044a4:	0a00001a 	beq	1004514 <XAxiDma_UpdateBdRingCDesc+0x88>
		 * transferring)
		 */
		return XST_SUCCESS;
	}

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10044a8:	e590c000 	ldr	ip, [r0]
	return *(volatile u32 *) Addr;
 10044ac:	e59c2004 	ldr	r2, [ip, #4]
 10044b0:	e3120001 	tst	r2, #1
 10044b4:	0a000016 	beq	1004514 <XAxiDma_UpdateBdRingCDesc+0x88>
		RegBase = RingPtr->ChanBase;

		/* Put a valid BD pointer in the current BD pointer register
		 * So, the hardware is ready to go when tail BD pointer is updated
		 */
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 10044b8:	e5901048 	ldr	r1, [r0, #72]	; 0x48
{
 10044bc:	e92d4010 	push	{r4, lr}
	int RingIndex = RingPtr->RingIndex;
 10044c0:	e5904064 	ldr	r4, [r0, #100]	; 0x64

		if (!XAxiDma_BdHwCompleted(BdPtr)) {
 10044c4:	e591201c 	ldr	r2, [r1, #28]
 10044c8:	e3520000 	cmp	r2, #0
 10044cc:	ba000014 	blt	1004524 <XAxiDma_UpdateBdRingCDesc+0x98>
			if (RingPtr->IsRxChannel) {
 10044d0:	e590e024 	ldr	lr, [r0, #36]	; 0x24
 10044d4:	e5900004 	ldr	r0, [r0, #4]
 10044d8:	e5932020 	ldr	r2, [r3, #32]
 10044dc:	e041100e 	sub	r1, r1, lr
 10044e0:	e5933018 	ldr	r3, [r3, #24]
 10044e4:	e3500000 	cmp	r0, #0
 10044e8:	e0811002 	add	r1, r1, r2
 10044ec:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 10044f0:	0a000019 	beq	100455c <XAxiDma_UpdateBdRingCDesc+0xd0>
				if (!RingIndex) {
 10044f4:	e3540000 	cmp	r4, #0
 10044f8:	1a00002c 	bne	10045b0 <XAxiDma_UpdateBdRingCDesc+0x124>
					XAxiDma_WriteReg(RegBase,
							 XAXIDMA_CDESC_OFFSET,
							 (XAXIDMA_VIRT_TO_PHYS(BdPtr) & XAXIDMA_DESC_LSB_MASK));
					if (RingPtr->Addr_ext)
 10044fc:	e3530000 	cmp	r3, #0
	*LocalAddr = Value;
 1004500:	e58c1008 	str	r1, [ip, #8]
 1004504:	0a000027 	beq	10045a8 <XAxiDma_UpdateBdRingCDesc+0x11c>
 1004508:	e58c400c 	str	r4, [ip, #12]
			}
		}

	}

	return XST_SUCCESS;
 100450c:	e1a00004 	mov	r0, r4
 1004510:	e8bd8010 	pop	{r4, pc}
		return XST_SUCCESS;
 1004514:	e3a00000 	mov	r0, #0
}
 1004518:	e12fff1e 	bx	lr
		return XST_DMA_SG_NO_LIST;
 100451c:	e300020b 	movw	r0, #523	; 0x20b
 1004520:	e12fff1e 	bx	lr
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 1004524:	e590e028 	ldr	lr, [r0, #40]	; 0x28
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 1004528:	e1a02001 	mov	r2, r1
 100452c:	ea000002 	b	100453c <XAxiDma_UpdateBdRingCDesc+0xb0>
				if (!XAxiDma_BdHwCompleted(BdPtr)) {
 1004530:	e592001c 	ldr	r0, [r2, #28]
 1004534:	e3500000 	cmp	r0, #0
 1004538:	aa00000c 	bge	1004570 <XAxiDma_UpdateBdRingCDesc+0xe4>
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 100453c:	e15e0002 	cmp	lr, r2
 1004540:	85930030 	ldrhi	r0, [r3, #48]	; 0x30
 1004544:	95932024 	ldrls	r2, [r3, #36]	; 0x24
 1004548:	80822000 	addhi	r2, r2, r0
				if ((UINTPTR)BdPtr == (UINTPTR) RingPtr->BdaRestart) {
 100454c:	e1520001 	cmp	r2, r1
 1004550:	1afffff6 	bne	1004530 <XAxiDma_UpdateBdRingCDesc+0xa4>
					return XST_DMA_ERROR;
 1004554:	e3a00009 	mov	r0, #9
}
 1004558:	e8bd8010 	pop	{r4, pc}
				if (RingPtr->Addr_ext)
 100455c:	e3530000 	cmp	r3, #0
 1004560:	e58c1008 	str	r1, [ip, #8]
 1004564:	0a00000f 	beq	10045a8 <XAxiDma_UpdateBdRingCDesc+0x11c>
 1004568:	e58c000c 	str	r0, [ip, #12]
 100456c:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->IsRxChannel) {
 1004570:	e5931020 	ldr	r1, [r3, #32]
 1004574:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1004578:	e5930004 	ldr	r0, [r3, #4]
 100457c:	e5933018 	ldr	r3, [r3, #24]
 1004580:	e041100e 	sub	r1, r1, lr
 1004584:	e3500000 	cmp	r0, #0
 1004588:	e0812002 	add	r2, r1, r2
 100458c:	e3c2203f 	bic	r2, r2, #63	; 0x3f
 1004590:	0a000010 	beq	10045d8 <XAxiDma_UpdateBdRingCDesc+0x14c>
						if (!RingIndex) {
 1004594:	e3540000 	cmp	r4, #0
 1004598:	1a000012 	bne	10045e8 <XAxiDma_UpdateBdRingCDesc+0x15c>
							if (RingPtr->Addr_ext)
 100459c:	e3530000 	cmp	r3, #0
 10045a0:	e58c2008 	str	r2, [ip, #8]
 10045a4:	1affffd7 	bne	1004508 <XAxiDma_UpdateBdRingCDesc+0x7c>
		return XST_SUCCESS;
 10045a8:	e3a00000 	mov	r0, #0
 10045ac:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->Addr_ext)
 10045b0:	e3530000 	cmp	r3, #0
					XAxiDma_WriteReg(RegBase,
 10045b4:	e2844001 	add	r4, r4, #1
 10045b8:	e78c1284 	str	r1, [ip, r4, lsl #5]
 10045bc:	e1a04284 	lsl	r4, r4, #5
					if (RingPtr->Addr_ext)
 10045c0:	0afffff8 	beq	10045a8 <XAxiDma_UpdateBdRingCDesc+0x11c>
								XAxiDma_WriteReg(RegBase,
 10045c4:	e2444040 	sub	r4, r4, #64	; 0x40
 10045c8:	e28cc044 	add	ip, ip, #68	; 0x44
 10045cc:	e3a00000 	mov	r0, #0
 10045d0:	e784000c 	str	r0, [r4, ip]
 10045d4:	e8bd8010 	pop	{r4, pc}
						if (RingPtr->Addr_ext)
 10045d8:	e3530000 	cmp	r3, #0
 10045dc:	e58c2008 	str	r2, [ip, #8]
 10045e0:	0afffff0 	beq	10045a8 <XAxiDma_UpdateBdRingCDesc+0x11c>
 10045e4:	eaffffdf 	b	1004568 <XAxiDma_UpdateBdRingCDesc+0xdc>
							if (RingPtr->Addr_ext)
 10045e8:	e3530000 	cmp	r3, #0
							XAxiDma_WriteReg(RegBase,
 10045ec:	e2844001 	add	r4, r4, #1
 10045f0:	e78c2284 	str	r2, [ip, r4, lsl #5]
 10045f4:	e1a04284 	lsl	r4, r4, #5
							if (RingPtr->Addr_ext)
 10045f8:	0affffea 	beq	10045a8 <XAxiDma_UpdateBdRingCDesc+0x11c>
 10045fc:	eafffff0 	b	10045c4 <XAxiDma_UpdateBdRingCDesc+0x138>

01004600 <XAxiDma_BdRingCreate>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdRingCreate(XAxiDma_BdRing *RingPtr, UINTPTR PhysAddr,
			UINTPTR VirtAddr, u32 Alignment, int BdCount)
{
 1004600:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1004604:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	int i;
	UINTPTR BdVirtAddr;
	UINTPTR BdPhysAddr;

	if (BdCount <= 0) {
 1004608:	e3570000 	cmp	r7, #0
 100460c:	da00005c 	ble	1004784 <XAxiDma_BdRingCreate+0x184>
	RingPtr->PreCnt = 0;
	RingPtr->PostCnt = 0;
	RingPtr->Cyclic = 0;

	/* Make sure Alignment parameter meets minimum requirements */
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1004610:	e353003f 	cmp	r3, #63	; 0x3f
	RingPtr->AllCnt = 0;
 1004614:	e3a0c000 	mov	ip, #0
 1004618:	e580c060 	str	ip, [r0, #96]	; 0x60
	RingPtr->FreeCnt = 0;
 100461c:	e580c050 	str	ip, [r0, #80]	; 0x50
	RingPtr->HwCnt = 0;
 1004620:	e580c058 	str	ip, [r0, #88]	; 0x58
	RingPtr->PreCnt = 0;
 1004624:	e580c054 	str	ip, [r0, #84]	; 0x54
	RingPtr->PostCnt = 0;
 1004628:	e580c05c 	str	ip, [r0, #92]	; 0x5c
	RingPtr->Cyclic = 0;
 100462c:	e580c068 	str	ip, [r0, #104]	; 0x68
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1004630:	9a000053 	bls	1004784 <XAxiDma_BdRingCreate+0x184>

		return XST_INVALID_PARAM;
	}

	/* Make sure Alignment is a power of 2 */
	if ((Alignment - 1) & Alignment) {
 1004634:	e243c001 	sub	ip, r3, #1
 1004638:	e11c0003 	tst	ip, r3
 100463c:	1a000050 	bne	1004784 <XAxiDma_BdRingCreate+0x184>

		return XST_INVALID_PARAM;
	}

	/* Make sure PhysAddr and VirtAddr are on same Alignment */
	if ((PhysAddr % Alignment) || (VirtAddr % Alignment)) {
 1004640:	e1a08001 	mov	r8, r1
 1004644:	e1a04000 	mov	r4, r0
 1004648:	e1a01003 	mov	r1, r3
 100464c:	e1a00008 	mov	r0, r8
 1004650:	e1a05003 	mov	r5, r3
 1004654:	e1a06002 	mov	r6, r2
 1004658:	fa0012d1 	blx	10091a4 <__aeabi_uidivmod>
 100465c:	e3510000 	cmp	r1, #0
 1004660:	1a000047 	bne	1004784 <XAxiDma_BdRingCreate+0x184>
 1004664:	e1a01005 	mov	r1, r5
 1004668:	e1a00006 	mov	r0, r6
 100466c:	fa0012cc 	blx	10091a4 <__aeabi_uidivmod>
 1004670:	e2519000 	subs	r9, r1, #0
 1004674:	1a000042 	bne	1004784 <XAxiDma_BdRingCreate+0x184>
		return XST_INVALID_PARAM;
	}

	/* Compute how many bytes will be between the start of adjacent BDs */
	RingPtr->Separation =
		(sizeof(XAxiDma_Bd) + (Alignment - 1)) & ~(Alignment - 1);
 1004678:	e285203f 	add	r2, r5, #63	; 0x3f
 100467c:	e2653000 	rsb	r3, r5, #0
 1004680:	e0025003 	and	r5, r2, r3

	/* Must make sure the ring doesn't span address 0x00000000. If it does,
	 * then the next/prev BD traversal macros will fail.
	 */
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 1004684:	e2463001 	sub	r3, r6, #1
 1004688:	e0020795 	mul	r2, r5, r7
	RingPtr->Separation =
 100468c:	e5845030 	str	r5, [r4, #48]	; 0x30
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 1004690:	e0833002 	add	r3, r3, r2
 1004694:	e1530006 	cmp	r3, r6

		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
			"0x0\r\n");

		return XST_DMA_SG_LIST_ERROR;
 1004698:	3300920e 	movwcc	r9, #526	; 0x20e
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 100469c:	3a000039 	bcc	1004788 <XAxiDma_BdRingCreate+0x188>
	 *  - Clear the entire space
	 *  - Setup each BD's next pointer with the physical address of the
	 *    next BD
	 *  - Put hardware information in each BD
	 */
	memset((void *) VirtAddr, 0, (RingPtr->Separation * BdCount));
 10046a0:	e1a00006 	mov	r0, r6
 10046a4:	fa001c3d 	blx	100b7a0 <memset>

	BdVirtAddr = VirtAddr;
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 10046a8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 10046ac:	e3570001 	cmp	r7, #1
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 10046b0:	e083a008 	add	sl, r3, r8
	for (i = 1; i < BdCount; i++) {
 10046b4:	0a000035 	beq	1004790 <XAxiDma_BdRingCreate+0x190>
 10046b8:	e1a05006 	mov	r5, r6
 10046bc:	e3a0b001 	mov	fp, #1
		/* Put hardware information in the BDs
		 */
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
				(u32)RingPtr->HasStsCntrlStrm);

		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 10046c0:	e5941010 	ldr	r1, [r4, #16]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 10046c4:	e3ca003f 	bic	r0, sl, #63	; 0x3f
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 10046c8:	e5943014 	ldr	r3, [r4, #20]
	for (i = 1; i < BdCount; i++) {
 10046cc:	e28bb001 	add	fp, fp, #1
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 10046d0:	e594200c 	ldr	r2, [r4, #12]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 10046d4:	e8850201 	stm	r5, {r0, r9}
		    (((u32)(RingPtr->HasDRE)) << XAXIDMA_BD_HAS_DRE_SHIFT) |
		    RingPtr->DataWidth);

		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 10046d8:	e1a00005 	mov	r0, r5
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 10046dc:	e1833401 	orr	r3, r3, r1, lsl #8
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 10046e0:	e5852038 	str	r2, [r5, #56]	; 0x38
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 10046e4:	e3a01034 	mov	r1, #52	; 0x34
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 10046e8:	e585303c 	str	r3, [r5, #60]	; 0x3c
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 10046ec:	eb000dc2 	bl	1007dfc <Xil_DCacheFlushRange>
		BdVirtAddr += RingPtr->Separation;
 10046f0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 10046f4:	e157000b 	cmp	r7, fp
		BdVirtAddr += RingPtr->Separation;
 10046f8:	e0855003 	add	r5, r5, r3
		BdPhysAddr += RingPtr->Separation;
 10046fc:	e08aa003 	add	sl, sl, r3
	for (i = 1; i < BdCount; i++) {
 1004700:	1affffee 	bne	10046c0 <XAxiDma_BdRingCreate+0xc0>
 1004704:	e1a0e005 	mov	lr, r5

	/* Setup the last BD's hardware information */
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
		(u32)RingPtr->HasStsCntrlStrm);

	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004708:	e5941010 	ldr	r1, [r4, #16]
	/* Setup and initialize pointers and counters */
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
	RingPtr->FirstBdAddr = VirtAddr;
	RingPtr->FirstBdPhysAddr = PhysAddr;
	RingPtr->LastBdAddr = BdVirtAddr;
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 100470c:	e0853003 	add	r3, r5, r3
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004710:	e5942014 	ldr	r2, [r4, #20]
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1004714:	e0433006 	sub	r3, r3, r6
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1004718:	e594000c 	ldr	r0, [r4, #12]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 100471c:	e3c8c03f 	bic	ip, r8, #63	; 0x3f
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1004720:	e3a09000 	mov	r9, #0
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1004724:	e58ec000 	str	ip, [lr]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1004728:	e5859004 	str	r9, [r5, #4]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 100472c:	e1822401 	orr	r2, r2, r1, lsl #8
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004730:	e3a01002 	mov	r1, #2
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1004734:	e5850038 	str	r0, [r5, #56]	; 0x38
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 1004738:	e3a00040 	mov	r0, #64	; 0x40
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 100473c:	e585203c 	str	r2, [r5, #60]	; 0x3c
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1004740:	e584302c 	str	r3, [r4, #44]	; 0x2c
	RingPtr->FirstBdAddr = VirtAddr;
 1004744:	e5846024 	str	r6, [r4, #36]	; 0x24
	RingPtr->FirstBdPhysAddr = PhysAddr;
 1004748:	e5848020 	str	r8, [r4, #32]
	RingPtr->LastBdAddr = BdVirtAddr;
 100474c:	e5845028 	str	r5, [r4, #40]	; 0x28
	RingPtr->AllCnt = BdCount;
 1004750:	e5847060 	str	r7, [r4, #96]	; 0x60
	RingPtr->FreeCnt = BdCount;
 1004754:	e5847050 	str	r7, [r4, #80]	; 0x50
	RingPtr->FreeHead = (XAxiDma_Bd *) VirtAddr;
 1004758:	e5846034 	str	r6, [r4, #52]	; 0x34
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
 100475c:	e5846038 	str	r6, [r4, #56]	; 0x38
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
 1004760:	e584603c 	str	r6, [r4, #60]	; 0x3c
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
 1004764:	e5846040 	str	r6, [r4, #64]	; 0x40
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
 1004768:	e5846044 	str	r6, [r4, #68]	; 0x44
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
 100476c:	e5846048 	str	r6, [r4, #72]	; 0x48
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004770:	e5841008 	str	r1, [r4, #8]
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 1004774:	fa0017f7 	blx	100a758 <malloc>
 1004778:	e584004c 	str	r0, [r4, #76]	; 0x4c

	return XST_SUCCESS;
}
 100477c:	e1a00009 	mov	r0, r9
 1004780:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return XST_INVALID_PARAM;
 1004784:	e3a0900f 	mov	r9, #15
}
 1004788:	e1a00009 	mov	r0, r9
 100478c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 1; i < BdCount; i++) {
 1004790:	e1a0e006 	mov	lr, r6
 1004794:	e1a05006 	mov	r5, r6
 1004798:	eaffffda 	b	1004708 <XAxiDma_BdRingCreate+0x108>

0100479c <XAxiDma_BdRingClone>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingClone(XAxiDma_BdRing * RingPtr, XAxiDma_Bd * SrcBdPtr)
{
 100479c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10047a0:	e24dd044 	sub	sp, sp, #68	; 0x44
	UINTPTR CurBd;
	u32 Save;
	XAxiDma_Bd TmpBd;

	/* Can't do this function if there isn't a ring */
	if (RingPtr->AllCnt == 0) {
 10047a4:	e5906060 	ldr	r6, [r0, #96]	; 0x60
 10047a8:	e3560000 	cmp	r6, #0

		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: no bds\r\n");

		return XST_DMA_SG_NO_LIST;
 10047ac:	0300020b 	movweq	r0, #523	; 0x20b
	if (RingPtr->AllCnt == 0) {
 10047b0:	0a000007 	beq	10047d4 <XAxiDma_BdRingClone+0x38>
	}

	/* Can't do this function with the channel running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 10047b4:	e5903008 	ldr	r3, [r0, #8]
 10047b8:	e1a05000 	mov	r5, r0
 10047bc:	e3530001 	cmp	r3, #1
 10047c0:	0a000034 	beq	1004898 <XAxiDma_BdRingClone+0xfc>

		return XST_DEVICE_IS_STARTED;
	}

	/* Can't do this function with some of the BDs in use */
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 10047c4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
 10047c8:	e1560003 	cmp	r6, r3

		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: some bds already "
			"in use %d/%d\r\n",RingPtr->FreeCnt, RingPtr->AllCnt);

		return XST_DMA_SG_LIST_ERROR;
 10047cc:	1300020e 	movwne	r0, #526	; 0x20e
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 10047d0:	0a000001 	beq	10047dc <XAxiDma_BdRingClone+0x40>

		XAXIDMA_CACHE_FLUSH(CurBd);
	}

	return XST_SUCCESS;
}
 10047d4:	e28dd044 	add	sp, sp, #68	; 0x44
 10047d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 10047dc:	e1a0c001 	mov	ip, r1
 10047e0:	e1a0400d 	mov	r4, sp
 10047e4:	e2817040 	add	r7, r1, #64	; 0x40
 10047e8:	e59c0000 	ldr	r0, [ip]
 10047ec:	e28cc010 	add	ip, ip, #16
 10047f0:	e51c100c 	ldr	r1, [ip, #-12]
 10047f4:	e1a0e004 	mov	lr, r4
 10047f8:	e51c2008 	ldr	r2, [ip, #-8]
 10047fc:	e2844010 	add	r4, r4, #16
 1004800:	e51c3004 	ldr	r3, [ip, #-4]
 1004804:	e15c0007 	cmp	ip, r7
 1004808:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 100480c:	1afffff5 	bne	10047e8 <XAxiDma_BdRingClone+0x4c>
	Save = XAxiDma_BdRead(&TmpBd, XAXIDMA_BD_STS_OFFSET);
 1004810:	e59d301c 	ldr	r3, [sp, #28]
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004814:	e3560000 	cmp	r6, #0
 1004818:	c3a06000 	movgt	r6, #0
 100481c:	c28d7038 	addgt	r7, sp, #56	; 0x38
 1004820:	e5954024 	ldr	r4, [r5, #36]	; 0x24
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1004824:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);
 1004828:	e58d301c 	str	r3, [sp, #28]
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 100482c:	da000016 	ble	100488c <XAxiDma_BdRingClone+0xf0>
		memcpy((void *)((UINTPTR)CurBd + XAXIDMA_BD_START_CLEAR),
 1004830:	e28d3008 	add	r3, sp, #8
 1004834:	e2842008 	add	r2, r4, #8
 1004838:	e593e000 	ldr	lr, [r3]
 100483c:	e2833010 	add	r3, r3, #16
 1004840:	e513c00c 	ldr	ip, [r3, #-12]
 1004844:	e2822010 	add	r2, r2, #16
 1004848:	e5130008 	ldr	r0, [r3, #-8]
 100484c:	e5131004 	ldr	r1, [r3, #-4]
 1004850:	e1530007 	cmp	r3, r7
 1004854:	e502e010 	str	lr, [r2, #-16]
 1004858:	e502c00c 	str	ip, [r2, #-12]
 100485c:	e5020008 	str	r0, [r2, #-8]
 1004860:	e5021004 	str	r1, [r2, #-4]
 1004864:	1afffff3 	bne	1004838 <XAxiDma_BdRingClone+0x9c>
		XAXIDMA_CACHE_FLUSH(CurBd);
 1004868:	e1a00004 	mov	r0, r4
 100486c:	e3a01034 	mov	r1, #52	; 0x34
 1004870:	eb000d61 	bl	1007dfc <Xil_DCacheFlushRange>
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004874:	e5952060 	ldr	r2, [r5, #96]	; 0x60
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1004878:	e2866001 	add	r6, r6, #1
 100487c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004880:	e1520006 	cmp	r2, r6
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1004884:	e0844003 	add	r4, r4, r3
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004888:	caffffe8 	bgt	1004830 <XAxiDma_BdRingClone+0x94>
	return XST_SUCCESS;
 100488c:	e3a00000 	mov	r0, #0
}
 1004890:	e28dd044 	add	sp, sp, #68	; 0x44
 1004894:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		return XST_DEVICE_IS_STARTED;
 1004898:	e3a00005 	mov	r0, #5
 100489c:	eaffffcc 	b	10047d4 <XAxiDma_BdRingClone+0x38>

010048a0 <XAxiDma_StartBdRingHw>:
int XAxiDma_StartBdRingHw(XAxiDma_BdRing * RingPtr)
{
	UINTPTR RegBase;
	int RingIndex = RingPtr->RingIndex;

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10048a0:	e5903000 	ldr	r3, [r0]
{
 10048a4:	e92d4070 	push	{r4, r5, r6, lr}
	int RingIndex = RingPtr->RingIndex;
 10048a8:	e5906064 	ldr	r6, [r0, #100]	; 0x64
	return *(volatile u32 *) Addr;
 10048ac:	e5932004 	ldr	r2, [r3, #4]
	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10048b0:	e3120001 	tst	r2, #1
 10048b4:	15932000 	ldrne	r2, [r3]
		/* Start the hardware
		*/
		RegBase = RingPtr->ChanBase;
		XAxiDma_WriteReg(RegBase, XAXIDMA_CR_OFFSET,
 10048b8:	13822001 	orrne	r2, r2, #1
	*LocalAddr = Value;
 10048bc:	15832000 	strne	r2, [r3]
	return *(volatile u32 *) Addr;
 10048c0:	e5933004 	ldr	r3, [r3, #4]
			XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET)
			| XAXIDMA_CR_RUNSTOP_MASK);
	}

	if (XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10048c4:	e2135001 	ands	r5, r3, #1
 10048c8:	1a000026 	bne	1004968 <XAxiDma_StartBdRingHw+0xc8>
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;

		/* If there are unprocessed BDs then we want the channel to begin
		 * processing right away
		 */
		if (RingPtr->HwCnt > 0) {
 10048cc:	e5903058 	ldr	r3, [r0, #88]	; 0x58
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10048d0:	e3a02001 	mov	r2, #1
 10048d4:	e5802008 	str	r2, [r0, #8]
		if (RingPtr->HwCnt > 0) {
 10048d8:	e3530000 	cmp	r3, #0
 10048dc:	da00001f 	ble	1004960 <XAxiDma_StartBdRingHw+0xc0>

			XAXIDMA_CACHE_INVALIDATE(RingPtr->HwTail);
 10048e0:	e1a04000 	mov	r4, r0
 10048e4:	e3a01034 	mov	r1, #52	; 0x34
 10048e8:	e5900040 	ldr	r0, [r0, #64]	; 0x40
 10048ec:	eb000cf5 	bl	1007cc8 <Xil_DCacheInvalidateRange>
			if (RingPtr->Cyclic) {
 10048f0:	e5942068 	ldr	r2, [r4, #104]	; 0x68
 10048f4:	e3520000 	cmp	r2, #0
 10048f8:	1a00001c 	bne	1004970 <XAxiDma_StartBdRingHw+0xd0>
							 XAXIDMA_TDESC_MSB_OFFSET,
							 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->CyclicBd)));
				return XST_SUCCESS;
			}

			if ((XAxiDma_BdRead(RingPtr->HwTail,
 10048fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
 1004900:	e593101c 	ldr	r1, [r3, #28]
 1004904:	e3510000 	cmp	r1, #0
 1004908:	ba000014 	blt	1004960 <XAxiDma_StartBdRingHw+0xc0>
				    XAXIDMA_BD_STS_OFFSET) &
				XAXIDMA_BD_STS_COMPLETE_MASK) == 0) {
				if (RingPtr->IsRxChannel) {
 100490c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1004910:	e5940004 	ldr	r0, [r4, #4]
 1004914:	e594c020 	ldr	ip, [r4, #32]
 1004918:	e0433001 	sub	r3, r3, r1
 100491c:	e594e018 	ldr	lr, [r4, #24]
 1004920:	e3500000 	cmp	r0, #0
 1004924:	e5941000 	ldr	r1, [r4]
 1004928:	e083300c 	add	r3, r3, ip
 100492c:	e3c3303f 	bic	r3, r3, #63	; 0x3f
 1004930:	0a000007 	beq	1004954 <XAxiDma_StartBdRingHw+0xb4>
					if (!RingIndex) {
 1004934:	e3560000 	cmp	r6, #0
 1004938:	1a00001b 	bne	10049ac <XAxiDma_StartBdRingHw+0x10c>
						XAxiDma_WriteReg(RingPtr->ChanBase,
							XAXIDMA_TDESC_OFFSET, (XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail) & XAXIDMA_DESC_LSB_MASK));
						if (RingPtr->Addr_ext)
 100493c:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1004940:	e5813010 	str	r3, [r1, #16]
 1004944:	0a000005 	beq	1004960 <XAxiDma_StartBdRingHw+0xc0>
 1004948:	e5816014 	str	r6, [r1, #20]
								 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
				}
			}
		}

		return XST_SUCCESS;
 100494c:	e1a00006 	mov	r0, r6
 1004950:	e8bd8070 	pop	{r4, r5, r6, pc}
					if (RingPtr->Addr_ext)
 1004954:	e35e0000 	cmp	lr, #0
 1004958:	e5813010 	str	r3, [r1, #16]
 100495c:	1a000010 	bne	10049a4 <XAxiDma_StartBdRingHw+0x104>
		return XST_SUCCESS;
 1004960:	e3a00000 	mov	r0, #0
 1004964:	e8bd8070 	pop	{r4, r5, r6, pc}
	}

	return XST_DMA_ERROR;
 1004968:	e3a00009 	mov	r0, #9
}
 100496c:	e8bd8070 	pop	{r4, r5, r6, pc}
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1004970:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
 1004974:	e594c024 	ldr	ip, [r4, #36]	; 0x24
				if (RingPtr->Addr_ext)
 1004978:	e5940018 	ldr	r0, [r4, #24]
				XAxiDma_WriteReg(RingPtr->ChanBase,
 100497c:	e5941020 	ldr	r1, [r4, #32]
 1004980:	e5942000 	ldr	r2, [r4]
 1004984:	e043300c 	sub	r3, r3, ip
				if (RingPtr->Addr_ext)
 1004988:	e3500000 	cmp	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 100498c:	e0833001 	add	r3, r3, r1
 1004990:	e5823010 	str	r3, [r2, #16]
				if (RingPtr->Addr_ext)
 1004994:	0afffff1 	beq	1004960 <XAxiDma_StartBdRingHw+0xc0>
 1004998:	e5825014 	str	r5, [r2, #20]
				return XST_SUCCESS;
 100499c:	e1a00005 	mov	r0, r5
 10049a0:	e8bd8070 	pop	{r4, r5, r6, pc}
 10049a4:	e5810014 	str	r0, [r1, #20]
 10049a8:	e8bd8070 	pop	{r4, r5, r6, pc}
						XAxiDma_WriteReg(RingPtr->ChanBase,
 10049ac:	e2466001 	sub	r6, r6, #1
						if (RingPtr->Addr_ext)
 10049b0:	e35e0000 	cmp	lr, #0
						XAxiDma_WriteReg(RingPtr->ChanBase,
 10049b4:	e0816286 	add	r6, r1, r6, lsl #5
 10049b8:	e5863048 	str	r3, [r6, #72]	; 0x48
						if (RingPtr->Addr_ext)
 10049bc:	0affffe7 	beq	1004960 <XAxiDma_StartBdRingHw+0xc0>
 10049c0:	e586204c 	str	r2, [r6, #76]	; 0x4c
		return XST_SUCCESS;
 10049c4:	e1a00002 	mov	r0, r2
 10049c8:	e8bd8070 	pop	{r4, r5, r6, pc}

010049cc <XAxiDma_BdRingStart>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingStart(XAxiDma_BdRing * RingPtr)
{
 10049cc:	e92d4010 	push	{r4, lr}
 10049d0:	e1a04000 	mov	r4, r0
	int Status;

	Status = XAxiDma_UpdateBdRingCDesc(RingPtr);
 10049d4:	ebfffeac 	bl	100448c <XAxiDma_UpdateBdRingCDesc>
	if (Status != XST_SUCCESS) {
 10049d8:	e3500000 	cmp	r0, #0
 10049dc:	18bd8010 	popne	{r4, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
			"Updating Current Descriptor Failed\n\r");
		return Status;
	}

	Status = XAxiDma_StartBdRingHw(RingPtr);
 10049e0:	e1a00004 	mov	r0, r4
			"Starting Hardware Failed\n\r");
		return Status;
	}

	return XST_SUCCESS;
}
 10049e4:	e8bd4010 	pop	{r4, lr}
	Status = XAxiDma_StartBdRingHw(RingPtr);
 10049e8:	eaffffac 	b	10048a0 <XAxiDma_StartBdRingHw>

010049ec <XAxiDma_BdRingSetCoalesce>:
	return *(volatile u32 *) Addr;
 10049ec:	e5900000 	ldr	r0, [r0]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	if (Counter != XAXIDMA_NO_CHANGE) {
 10049f0:	e3710001 	cmn	r1, #1
 10049f4:	e5903000 	ldr	r3, [r0]
 10049f8:	0a000004 	beq	1004a10 <XAxiDma_BdRingSetCoalesce+0x24>
		if ((Counter == 0) || (Counter > 0xFF)) {
 10049fc:	e241c001 	sub	ip, r1, #1
 1004a00:	e35c00fe 	cmp	ip, #254	; 0xfe
 1004a04:	8a000009 	bhi	1004a30 <XAxiDma_BdRingSetCoalesce+0x44>
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
			"invalid  coalescing threshold %d", (int)Counter);
			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_COALESCE_MASK) |
 1004a08:	e3c338ff 	bic	r3, r3, #16711680	; 0xff0000
 1004a0c:	e1833801 	orr	r3, r3, r1, lsl #16
			(Counter << XAXIDMA_COALESCE_SHIFT);
	}

	if (Timer != XAXIDMA_NO_CHANGE) {
 1004a10:	e3720001 	cmn	r2, #1
 1004a14:	0a000002 	beq	1004a24 <XAxiDma_BdRingSetCoalesce+0x38>
		if (Timer > 0xFF) {
 1004a18:	e35200ff 	cmp	r2, #255	; 0xff
 1004a1c:	8a000003 	bhi	1004a30 <XAxiDma_BdRingSetCoalesce+0x44>
			"invalid  delay counter %d", (int)Timer);

			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_DELAY_MASK) |
 1004a20:	e7df3c12 	bfi	r3, r2, #24, #8
	*LocalAddr = Value;
 1004a24:	e5803000 	str	r3, [r0]
			(Timer << XAXIDMA_DELAY_SHIFT);
	}

	XAxiDma_WriteReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET, Cr);

	return XST_SUCCESS;
 1004a28:	e3a00000 	mov	r0, #0
 1004a2c:	e12fff1e 	bx	lr
			return XST_FAILURE;
 1004a30:	e3a00001 	mov	r0, #1
}
 1004a34:	e12fff1e 	bx	lr

01004a38 <XAxiDma_BdRingGetCoalesce>:
	return *(volatile u32 *) Addr;
 1004a38:	e5903000 	ldr	r3, [r0]
 1004a3c:	e5933000 	ldr	r3, [r3]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1004a40:	e7e70853 	ubfx	r0, r3, #16, #8
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1004a44:	e1a03c23 	lsr	r3, r3, #24
	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1004a48:	e5810000 	str	r0, [r1]
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1004a4c:	e5823000 	str	r3, [r2]
}
 1004a50:	e12fff1e 	bx	lr

01004a54 <XAxiDma_BdRingAlloc>:
 *
 *****************************************************************************/
int XAxiDma_BdRingAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd ** BdSetPtr)
{
	if (NumBd <= 0) {
 1004a54:	e3510000 	cmp	r1, #0
 1004a58:	da00001c 	ble	1004ad0 <XAxiDma_BdRingAlloc+0x7c>

		return XST_INVALID_PARAM;
	}

	/* Enough free BDs available for the request? */
	if (RingPtr->FreeCnt < NumBd) {
 1004a5c:	e590c050 	ldr	ip, [r0, #80]	; 0x50
 1004a60:	e15c0001 	cmp	ip, r1
 1004a64:	ba000016 	blt	1004ac4 <XAxiDma_BdRingAlloc+0x70>
		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead forward */
	*BdSetPtr = RingPtr->FreeHead;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1004a68:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->FreeCnt -= NumBd;
 1004a6c:	e04cc001 	sub	ip, ip, r1
{
 1004a70:	e92d4010 	push	{r4, lr}
	*BdSetPtr = RingPtr->FreeHead;
 1004a74:	e590e034 	ldr	lr, [r0, #52]	; 0x34
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1004a78:	e0030193 	mul	r3, r3, r1
 1004a7c:	e5904028 	ldr	r4, [r0, #40]	; 0x28
	*BdSetPtr = RingPtr->FreeHead;
 1004a80:	e582e000 	str	lr, [r2]
	RingPtr->FreeCnt -= NumBd;
 1004a84:	e580c050 	str	ip, [r0, #80]	; 0x50
	RingPtr->PreCnt += NumBd;

	return XST_SUCCESS;
 1004a88:	e3a0c000 	mov	ip, #0
 1004a8c:	e093300e 	adds	r3, r3, lr
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1004a90:	23a02001 	movcs	r2, #1
 1004a94:	33a02000 	movcc	r2, #0
 1004a98:	e1540003 	cmp	r4, r3
 1004a9c:	33822001 	orrcc	r2, r2, #1
 1004aa0:	e3520000 	cmp	r2, #0
 1004aa4:	1590202c 	ldrne	r2, [r0, #44]	; 0x2c
 1004aa8:	10433002 	subne	r3, r3, r2
	RingPtr->PreCnt += NumBd;
 1004aac:	e5902054 	ldr	r2, [r0, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1004ab0:	e5803034 	str	r3, [r0, #52]	; 0x34
	RingPtr->PreCnt += NumBd;
 1004ab4:	e0821001 	add	r1, r2, r1
 1004ab8:	e5801054 	str	r1, [r0, #84]	; 0x54
}
 1004abc:	e1a0000c 	mov	r0, ip
 1004ac0:	e8bd8010 	pop	{r4, pc}
		return XST_FAILURE;
 1004ac4:	e3a0c001 	mov	ip, #1
}
 1004ac8:	e1a0000c 	mov	r0, ip
 1004acc:	e12fff1e 	bx	lr
		return XST_INVALID_PARAM;
 1004ad0:	e3a0c00f 	mov	ip, #15
}
 1004ad4:	e1a0000c 	mov	r0, ip
 1004ad8:	e12fff1e 	bx	lr

01004adc <XAxiDma_BdRingUnAlloc>:
int XAxiDma_BdRingUnAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
	XAxiDma_Bd *TmpBd;

	if (NumBd <= 0) {
 1004adc:	e3510000 	cmp	r1, #0
 1004ae0:	da000027 	ble	1004b84 <XAxiDma_BdRingUnAlloc+0xa8>

		return XST_INVALID_PARAM;
	}

	/* Enough BDs in the preprocessing state for the request? */
	if (RingPtr->PreCnt < NumBd) {
 1004ae4:	e590c054 	ldr	ip, [r0, #84]	; 0x54
 1004ae8:	e1a03000 	mov	r3, r0
 1004aec:	e15c0001 	cmp	ip, r1
 1004af0:	ba000021 	blt	1004b7c <XAxiDma_BdRingUnAlloc+0xa0>

	/* The last BD in the BD set must has the FreeHead as its next BD.
	 * Otherwise, this is not a valid operation.
	 */
	TmpBd = BdSetPtr;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, TmpBd, NumBd);
 1004af4:	e5900030 	ldr	r0, [r0, #48]	; 0x30
{
 1004af8:	e92d4010 	push	{r4, lr}
	XAXIDMA_RING_SEEKAHEAD(RingPtr, TmpBd, NumBd);
 1004afc:	e5934028 	ldr	r4, [r3, #40]	; 0x28
 1004b00:	e0000190 	mul	r0, r0, r1
 1004b04:	e0902002 	adds	r2, r0, r2
 1004b08:	23a0e001 	movcs	lr, #1
 1004b0c:	33a0e000 	movcc	lr, #0
 1004b10:	e1540002 	cmp	r4, r2
 1004b14:	338ee001 	orrcc	lr, lr, #1
 1004b18:	e35e0000 	cmp	lr, #0
 1004b1c:	1593e02c 	ldrne	lr, [r3, #44]	; 0x2c
 1004b20:	1042200e 	subne	r2, r2, lr

	if (TmpBd != RingPtr->FreeHead) {
 1004b24:	e593e034 	ldr	lr, [r3, #52]	; 0x34
 1004b28:	e15e0002 	cmp	lr, r2
 1004b2c:	0a000001 	beq	1004b38 <XAxiDma_BdRingUnAlloc+0x5c>
		return XST_FAILURE;
 1004b30:	e3a00001 	mov	r0, #1
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
	RingPtr->FreeCnt += NumBd;
	RingPtr->PreCnt -= NumBd;

	return XST_SUCCESS;
}
 1004b34:	e8bd8010 	pop	{r4, pc}
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1004b38:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1004b3c:	e0522000 	subs	r2, r2, r0
 1004b40:	33a00001 	movcc	r0, #1
 1004b44:	23a00000 	movcs	r0, #0
	RingPtr->PreCnt -= NumBd;
 1004b48:	e04cc001 	sub	ip, ip, r1
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1004b4c:	e15e0002 	cmp	lr, r2
 1004b50:	83800001 	orrhi	r0, r0, #1
	RingPtr->FreeCnt += NumBd;
 1004b54:	e593e050 	ldr	lr, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1004b58:	e3500000 	cmp	r0, #0
	RingPtr->PreCnt -= NumBd;
 1004b5c:	e583c054 	str	ip, [r3, #84]	; 0x54
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1004b60:	1593002c 	ldrne	r0, [r3, #44]	; 0x2c
	RingPtr->FreeCnt += NumBd;
 1004b64:	e08e1001 	add	r1, lr, r1
 1004b68:	e5831050 	str	r1, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1004b6c:	10822000 	addne	r2, r2, r0
	return XST_SUCCESS;
 1004b70:	e3a00000 	mov	r0, #0
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1004b74:	e5832034 	str	r2, [r3, #52]	; 0x34
	return XST_SUCCESS;
 1004b78:	e8bd8010 	pop	{r4, pc}
		return XST_FAILURE;
 1004b7c:	e3a00001 	mov	r0, #1
}
 1004b80:	e12fff1e 	bx	lr
		return XST_INVALID_PARAM;
 1004b84:	e3a0000f 	mov	r0, #15
 1004b88:	e12fff1e 	bx	lr

01004b8c <XAxiDma_BdRingToHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingToHw(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
 1004b8c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	int i;
	u32 BdCr;
	u32 BdSts;
	int RingIndex = RingPtr->RingIndex;

	if (NumBd < 0) {
 1004b90:	e2516000 	subs	r6, r1, #0
{
 1004b94:	e24dd00c 	sub	sp, sp, #12

		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingToHw: negative BD number "
			"%d\r\n", NumBd);

		return XST_INVALID_PARAM;
 1004b98:	b3a0000f 	movlt	r0, #15
	if (NumBd < 0) {
 1004b9c:	ba000035 	blt	1004c78 <XAxiDma_BdRingToHw+0xec>
	}

	/* If the commit set is empty, do nothing */
	if (NumBd == 0) {
 1004ba0:	0a00006c 	beq	1004d58 <XAxiDma_BdRingToHw+0x1cc>
		return XST_SUCCESS;
	}

	/* Make sure we are in sync with XAxiDma_BdRingAlloc() */
	if ((RingPtr->PreCnt < NumBd) || (RingPtr->PreHead != BdSetPtr)) {
 1004ba4:	e5903054 	ldr	r3, [r0, #84]	; 0x54
 1004ba8:	e1a05000 	mov	r5, r0
 1004bac:	e1530006 	cmp	r3, r6
 1004bb0:	ba000032 	blt	1004c80 <XAxiDma_BdRingToHw+0xf4>
 1004bb4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
 1004bb8:	e1530002 	cmp	r3, r2
 1004bbc:	1a00002f 	bne	1004c80 <XAxiDma_BdRingToHw+0xf4>
	BdSts = XAxiDma_BdGetSts(CurBdPtr);

	/* In case of Tx channel, the first BD should have been marked
	 * as start-of-frame
	 */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1004bc0:	e5901004 	ldr	r1, [r0, #4]
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1004bc4:	e1a04002 	mov	r4, r2
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1004bc8:	e592301c 	ldr	r3, [r2, #28]
	int RingIndex = RingPtr->RingIndex;
 1004bcc:	e5907064 	ldr	r7, [r0, #100]	; 0x64
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1004bd0:	e3510000 	cmp	r1, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1004bd4:	e5921018 	ldr	r1, [r2, #24]
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1004bd8:	e203333f 	and	r3, r3, #-67108864	; 0xfc000000
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1004bdc:	0a000060 	beq	1004d64 <XAxiDma_BdRingToHw+0x1d8>
		return XST_FAILURE;
	}

	/* Clear the completed status bit
	 */
	for (i = 0; i < NumBd - 1; i++) {
 1004be0:	e2468001 	sub	r8, r6, #1
 1004be4:	e3580000 	cmp	r8, #0
 1004be8:	da00001e 	ble	1004c68 <XAxiDma_BdRingToHw+0xdc>

		/* Make sure the length value in the BD is non-zero. */
		if (XAxiDma_BdGetLength(CurBdPtr,
 1004bec:	e595001c 	ldr	r0, [r5, #28]
 1004bf0:	e1110000 	tst	r1, r0
 1004bf4:	0a00001e 	beq	1004c74 <XAxiDma_BdRingToHw+0xe8>
 1004bf8:	e3a09000 	mov	r9, #0
 1004bfc:	ea000002 	b	1004c0c <XAxiDma_BdRingToHw+0x80>
 1004c00:	e595001c 	ldr	r0, [r5, #28]
 1004c04:	e1110000 	tst	r1, r0
 1004c08:	0a000019 	beq	1004c74 <XAxiDma_BdRingToHw+0xe8>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");

			return XST_FAILURE;
		}

		BdSts &=  ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1004c0c:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

		/* Flush the current BD so DMA core could see the updates */
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1004c10:	e1a00002 	mov	r0, r2
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1004c14:	e584301c 	str	r3, [r4, #28]
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1004c18:	e3a01034 	mov	r1, #52	; 0x34
 1004c1c:	eb000c76 	bl	1007dfc <Xil_DCacheFlushRange>

		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1004c20:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	for (i = 0; i < NumBd - 1; i++) {
 1004c24:	e2899001 	add	r9, r9, #1
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1004c28:	e1530004 	cmp	r3, r4
 1004c2c:	85953030 	ldrhi	r3, [r5, #48]	; 0x30
 1004c30:	95954024 	ldrls	r4, [r5, #36]	; 0x24
 1004c34:	80844003 	addhi	r4, r4, r3
	for (i = 0; i < NumBd - 1; i++) {
 1004c38:	e1590008 	cmp	r9, r8
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1004c3c:	e1a02004 	mov	r2, r4
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1004c40:	e5941018 	ldr	r1, [r4, #24]
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1004c44:	e594301c 	ldr	r3, [r4, #28]
	for (i = 0; i < NumBd - 1; i++) {
 1004c48:	baffffec 	blt	1004c00 <XAxiDma_BdRingToHw+0x74>
	}

	/* In case of Tx channel, the last BD should have EOF bit set */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) {
 1004c4c:	e5950004 	ldr	r0, [r5, #4]
 1004c50:	e3500000 	cmp	r0, #0
 1004c54:	1a000003 	bne	1004c68 <XAxiDma_BdRingToHw+0xdc>
 1004c58:	e3110301 	tst	r1, #67108864	; 0x4000000
 1004c5c:	0a000004 	beq	1004c74 <XAxiDma_BdRingToHw+0xe8>
 1004c60:	e5921018 	ldr	r1, [r2, #24]
 1004c64:	e1a04002 	mov	r4, r2

		return XST_FAILURE;
	}

	/* Make sure the length value in the last BD is non-zero. */
	if (XAxiDma_BdGetLength(CurBdPtr,
 1004c68:	e595001c 	ldr	r0, [r5, #28]
 1004c6c:	e1110000 	tst	r1, r0
 1004c70:	1a000005 	bne	1004c8c <XAxiDma_BdRingToHw+0x100>
		return XST_FAILURE;
 1004c74:	e3a00001 	mov	r0, #1
								UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
			}
	}

	return XST_SUCCESS;
}
 1004c78:	e28dd00c 	add	sp, sp, #12
 1004c7c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		return XST_DMA_SG_LIST_ERROR;
 1004c80:	e300020e 	movw	r0, #526	; 0x20e
}
 1004c84:	e28dd00c 	add	sp, sp, #12
 1004c88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	BdSts &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1004c8c:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1004c90:	e3a01034 	mov	r1, #52	; 0x34
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1004c94:	e584301c 	str	r3, [r4, #28]
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1004c98:	e1a00002 	mov	r0, r2
 1004c9c:	e58d2004 	str	r2, [sp, #4]
 1004ca0:	eb000c55 	bl	1007dfc <Xil_DCacheFlushRange>
	DATA_SYNC;
 1004ca4:	f57ff04f 	dsb	sy
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1004ca8:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1004cac:	e5950038 	ldr	r0, [r5, #56]	; 0x38
 1004cb0:	e595c028 	ldr	ip, [r5, #40]	; 0x28
 1004cb4:	e59d2004 	ldr	r2, [sp, #4]
 1004cb8:	e0030693 	mul	r3, r3, r6
	RingPtr->HwTail = CurBdPtr;
 1004cbc:	e5852040 	str	r2, [r5, #64]	; 0x40
 1004cc0:	e0933000 	adds	r3, r3, r0
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1004cc4:	e5950008 	ldr	r0, [r5, #8]
 1004cc8:	23a01001 	movcs	r1, #1
 1004ccc:	33a01000 	movcc	r1, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1004cd0:	e15c0003 	cmp	ip, r3
 1004cd4:	33811001 	orrcc	r1, r1, #1
 1004cd8:	e3510000 	cmp	r1, #0
 1004cdc:	1595102c 	ldrne	r1, [r5, #44]	; 0x2c
 1004ce0:	10433001 	subne	r3, r3, r1
	RingPtr->PreCnt -= NumBd;
 1004ce4:	e5951054 	ldr	r1, [r5, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1004ce8:	e5853038 	str	r3, [r5, #56]	; 0x38
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1004cec:	e3500001 	cmp	r0, #1
	RingPtr->HwCnt += NumBd;
 1004cf0:	e5953058 	ldr	r3, [r5, #88]	; 0x58
	RingPtr->PreCnt -= NumBd;
 1004cf4:	e0411006 	sub	r1, r1, r6
 1004cf8:	e5851054 	str	r1, [r5, #84]	; 0x54
	RingPtr->HwCnt += NumBd;
 1004cfc:	e0836006 	add	r6, r3, r6
 1004d00:	e5856058 	str	r6, [r5, #88]	; 0x58
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1004d04:	1a000013 	bne	1004d58 <XAxiDma_BdRingToHw+0x1cc>
			if (RingPtr->Cyclic) {
 1004d08:	e5951068 	ldr	r1, [r5, #104]	; 0x68
 1004d0c:	e5952000 	ldr	r2, [r5]
 1004d10:	e5953020 	ldr	r3, [r5, #32]
 1004d14:	e3510000 	cmp	r1, #0
 1004d18:	e595c024 	ldr	ip, [r5, #36]	; 0x24
 1004d1c:	e595e018 	ldr	lr, [r5, #24]
 1004d20:	1a000016 	bne	1004d80 <XAxiDma_BdRingToHw+0x1f4>
			if (RingPtr->IsRxChannel) {
 1004d24:	e5950004 	ldr	r0, [r5, #4]
 1004d28:	e043300c 	sub	r3, r3, ip
 1004d2c:	e0834004 	add	r4, r3, r4
 1004d30:	e3c4403f 	bic	r4, r4, #63	; 0x3f
 1004d34:	e3500000 	cmp	r0, #0
 1004d38:	0a000019 	beq	1004da4 <XAxiDma_BdRingToHw+0x218>
				if (!RingIndex) {
 1004d3c:	e3570000 	cmp	r7, #0
 1004d40:	1a00001c 	bne	1004db8 <XAxiDma_BdRingToHw+0x22c>
					if (RingPtr->Addr_ext)
 1004d44:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1004d48:	e5824010 	str	r4, [r2, #16]
	return XST_SUCCESS;
 1004d4c:	11a00007 	movne	r0, r7
 1004d50:	15827014 	strne	r7, [r2, #20]
					if (RingPtr->Addr_ext)
 1004d54:	1affffc7 	bne	1004c78 <XAxiDma_BdRingToHw+0xec>
		return XST_SUCCESS;
 1004d58:	e3a00000 	mov	r0, #0
}
 1004d5c:	e28dd00c 	add	sp, sp, #12
 1004d60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1004d64:	e3110302 	tst	r1, #134217728	; 0x8000000
 1004d68:	0affffc1 	beq	1004c74 <XAxiDma_BdRingToHw+0xe8>
	for (i = 0; i < NumBd - 1; i++) {
 1004d6c:	e2468001 	sub	r8, r6, #1
 1004d70:	e3580000 	cmp	r8, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1004d74:	d2011303 	andle	r1, r1, #201326592	; 0xc000000
	for (i = 0; i < NumBd - 1; i++) {
 1004d78:	caffff9b 	bgt	1004bec <XAxiDma_BdRingToHw+0x60>
 1004d7c:	eaffffb5 	b	1004c58 <XAxiDma_BdRingToHw+0xcc>
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1004d80:	e595104c 	ldr	r1, [r5, #76]	; 0x4c
				if (RingPtr->Addr_ext)
 1004d84:	e35e0000 	cmp	lr, #0
 1004d88:	13a00000 	movne	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1004d8c:	e041c00c 	sub	ip, r1, ip
 1004d90:	e08c3003 	add	r3, ip, r3
 1004d94:	e5823010 	str	r3, [r2, #16]
 1004d98:	15820014 	strne	r0, [r2, #20]
				if (RingPtr->Addr_ext)
 1004d9c:	1affffb5 	bne	1004c78 <XAxiDma_BdRingToHw+0xec>
 1004da0:	eaffffec 	b	1004d58 <XAxiDma_BdRingToHw+0x1cc>
				if (RingPtr->Addr_ext)
 1004da4:	e35e0000 	cmp	lr, #0
 1004da8:	e5824010 	str	r4, [r2, #16]
 1004dac:	15820014 	strne	r0, [r2, #20]
 1004db0:	1affffb0 	bne	1004c78 <XAxiDma_BdRingToHw+0xec>
 1004db4:	eaffffe7 	b	1004d58 <XAxiDma_BdRingToHw+0x1cc>
					XAxiDma_WriteReg(RingPtr->ChanBase,
 1004db8:	e2477001 	sub	r7, r7, #1
					if (RingPtr->Addr_ext)
 1004dbc:	e35e0000 	cmp	lr, #0
					XAxiDma_WriteReg(RingPtr->ChanBase,
 1004dc0:	e0822287 	add	r2, r2, r7, lsl #5
	return XST_SUCCESS;
 1004dc4:	11a00001 	movne	r0, r1
 1004dc8:	e5824048 	str	r4, [r2, #72]	; 0x48
 1004dcc:	1582104c 	strne	r1, [r2, #76]	; 0x4c
					if (RingPtr->Addr_ext)
 1004dd0:	1affffa8 	bne	1004c78 <XAxiDma_BdRingToHw+0xec>
 1004dd4:	eaffffdf 	b	1004d58 <XAxiDma_BdRingToHw+0x1cc>

01004dd8 <XAxiDma_BdRingFromHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingFromHw(XAxiDma_BdRing * RingPtr, int BdLimit,
			     XAxiDma_Bd ** BdSetPtr)
{
 1004dd8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1004ddc:	e1a09002 	mov	r9, r2
	BdPartialCount = 0;
	BdSts = 0;
	BdCr = 0;

	/* If no BDs in work group, then there's nothing to search */
	if (RingPtr->HwCnt == 0) {
 1004de0:	e5908058 	ldr	r8, [r0, #88]	; 0x58
 1004de4:	e3580000 	cmp	r8, #0
 1004de8:	0a00004c 	beq	1004f20 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}

	if (BdLimit > RingPtr->HwCnt) {
 1004dec:	e1580001 	cmp	r8, r1
 1004df0:	a1a08001 	movge	r8, r1
	 *    BD.
	 *  - RingPtr->HwTail is reached
	 *  - The number of requested BDs has been processed
	 */

	while (BdCount < BdLimit) {
 1004df4:	e3580000 	cmp	r8, #0
 1004df8:	da000048 	ble	1004f20 <XAxiDma_BdRingFromHw+0x148>
	CurBdPtr = RingPtr->HwHead;
 1004dfc:	e3a07000 	mov	r7, #0
 1004e00:	e1a05000 	mov	r5, r0
 1004e04:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
 1004e08:	e1a06007 	mov	r6, r7
 1004e0c:	ea00000f 	b	1004e50 <XAxiDma_BdRingFromHw+0x78>
		 * For tx BDs, EOF bit is in the control word
		 * For rx BDs, EOF bit is in the status word
		 */
		if (((!(RingPtr->IsRxChannel) &&
		(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) ||
		((RingPtr->IsRxChannel) && (BdSts &
 1004e10:	e3130301 	tst	r3, #67108864	; 0x4000000
 1004e14:	0a00001b 	beq	1004e88 <XAxiDma_BdRingFromHw+0xb0>
		}
		else {
			BdPartialCount++;
		}

		if (RingPtr->Cyclic) {
 1004e18:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount = 0;
 1004e1c:	e3a07000 	mov	r7, #0
		if (RingPtr->Cyclic) {
 1004e20:	e3520000 	cmp	r2, #0
 1004e24:	1a00001b 	bne	1004e98 <XAxiDma_BdRingFromHw+0xc0>
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
		}

		/* Reached the end of the work group */
		if (CurBdPtr == RingPtr->HwTail) {
 1004e28:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1004e2c:	e1530004 	cmp	r3, r4
 1004e30:	0a000020 	beq	1004eb8 <XAxiDma_BdRingFromHw+0xe0>
			break;
		}

		/* Move on to the next BD in work group */
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1004e34:	e5953028 	ldr	r3, [r5, #40]	; 0x28
 1004e38:	e1540003 	cmp	r4, r3
 1004e3c:	35953030 	ldrcc	r3, [r5, #48]	; 0x30
 1004e40:	25954024 	ldrcs	r4, [r5, #36]	; 0x24
 1004e44:	30844003 	addcc	r4, r4, r3
	while (BdCount < BdLimit) {
 1004e48:	e1580006 	cmp	r8, r6
 1004e4c:	0a000019 	beq	1004eb8 <XAxiDma_BdRingFromHw+0xe0>
		XAXIDMA_CACHE_INVALIDATE(CurBdPtr);
 1004e50:	e3a01034 	mov	r1, #52	; 0x34
 1004e54:	e1a00004 	mov	r0, r4
 1004e58:	eb000b9a 	bl	1007cc8 <Xil_DCacheInvalidateRange>
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1004e5c:	e594301c 	ldr	r3, [r4, #28]
 1004e60:	e284001c 	add	r0, r4, #28
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1004e64:	e5941018 	ldr	r1, [r4, #24]
		if (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)) {
 1004e68:	e3530000 	cmp	r3, #0
 1004e6c:	aa000011 	bge	1004eb8 <XAxiDma_BdRingFromHw+0xe0>
		if (((!(RingPtr->IsRxChannel) &&
 1004e70:	e5952004 	ldr	r2, [r5, #4]
		BdCount++;
 1004e74:	e2866001 	add	r6, r6, #1
		if (((!(RingPtr->IsRxChannel) &&
 1004e78:	e3520000 	cmp	r2, #0
 1004e7c:	1affffe3 	bne	1004e10 <XAxiDma_BdRingFromHw+0x38>
 1004e80:	e3110301 	tst	r1, #67108864	; 0x4000000
 1004e84:	1affffe3 	bne	1004e18 <XAxiDma_BdRingFromHw+0x40>
		if (RingPtr->Cyclic) {
 1004e88:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount++;
 1004e8c:	e2877001 	add	r7, r7, #1
		if (RingPtr->Cyclic) {
 1004e90:	e3520000 	cmp	r2, #0
 1004e94:	0affffe3 	beq	1004e28 <XAxiDma_BdRingFromHw+0x50>
			BdSts = BdSts & ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1004e98:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1004e9c:	e3a01034 	mov	r1, #52	; 0x34
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1004ea0:	e5803000 	str	r3, [r0]
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1004ea4:	e1a00004 	mov	r0, r4
 1004ea8:	eb000bd3 	bl	1007dfc <Xil_DCacheFlushRange>
		if (CurBdPtr == RingPtr->HwTail) {
 1004eac:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1004eb0:	e1530004 	cmp	r3, r4
 1004eb4:	1affffde 	bne	1004e34 <XAxiDma_BdRingFromHw+0x5c>
	BdCount -= BdPartialCount;

	/* If BdCount is non-zero then BDs were found to return. Set return
	 * parameters, update pointers and counters, return success
	 */
	if (BdCount) {
 1004eb8:	e0560007 	subs	r0, r6, r7
 1004ebc:	0a000017 	beq	1004f20 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = RingPtr->HwHead;
		if (!RingPtr->Cyclic) {
 1004ec0:	e5953068 	ldr	r3, [r5, #104]	; 0x68
		*BdSetPtr = RingPtr->HwHead;
 1004ec4:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
		if (!RingPtr->Cyclic) {
 1004ec8:	e3530000 	cmp	r3, #0
		*BdSetPtr = RingPtr->HwHead;
 1004ecc:	e5892000 	str	r2, [r9]
		if (!RingPtr->Cyclic) {
 1004ed0:	1a000005 	bne	1004eec <XAxiDma_BdRingFromHw+0x114>
			RingPtr->HwCnt -= BdCount;
 1004ed4:	e5951058 	ldr	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 1004ed8:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
			RingPtr->HwCnt -= BdCount;
 1004edc:	e0411000 	sub	r1, r1, r0
			RingPtr->PostCnt += BdCount;
 1004ee0:	e0833000 	add	r3, r3, r0
			RingPtr->HwCnt -= BdCount;
 1004ee4:	e5851058 	str	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 1004ee8:	e585305c 	str	r3, [r5, #92]	; 0x5c
		}
		XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->HwHead, BdCount);
 1004eec:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1004ef0:	e5951028 	ldr	r1, [r5, #40]	; 0x28
 1004ef4:	e0030093 	mul	r3, r3, r0
 1004ef8:	e0933002 	adds	r3, r3, r2
 1004efc:	23a02001 	movcs	r2, #1
 1004f00:	33a02000 	movcc	r2, #0
 1004f04:	e1510003 	cmp	r1, r3
 1004f08:	33822001 	orrcc	r2, r2, #1
 1004f0c:	e3520000 	cmp	r2, #0
 1004f10:	1595202c 	ldrne	r2, [r5, #44]	; 0x2c
 1004f14:	10433002 	subne	r3, r3, r2
 1004f18:	e585303c 	str	r3, [r5, #60]	; 0x3c
	else {
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}
}
 1004f1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*BdSetPtr = (XAxiDma_Bd *)NULL;
 1004f20:	e3a00000 	mov	r0, #0
 1004f24:	e5890000 	str	r0, [r9]
		return 0;
 1004f28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01004f2c <XAxiDma_BdRingFree>:
 *
 *****************************************************************************/
int XAxiDma_BdRingFree(XAxiDma_BdRing * RingPtr, int NumBd,
		      XAxiDma_Bd * BdSetPtr)
{
	if (NumBd < 0) {
 1004f2c:	e3510000 	cmp	r1, #0
 1004f30:	ba000020 	blt	1004fb8 <XAxiDma_BdRingFree+0x8c>
		return XST_INVALID_PARAM;
	}

	/* If the BD Set to free is empty, do nothing
	 */
	if (NumBd == 0) {
 1004f34:	0a000019 	beq	1004fa0 <XAxiDma_BdRingFree+0x74>
		return XST_SUCCESS;
	}

	/* Make sure we are in sync with XAxiDma_BdRingFromHw() */
	if ((RingPtr->PostCnt < NumBd) || (RingPtr->PostHead != BdSetPtr)) {
 1004f38:	e590c05c 	ldr	ip, [r0, #92]	; 0x5c
 1004f3c:	e15c0001 	cmp	ip, r1
 1004f40:	ba000018 	blt	1004fa8 <XAxiDma_BdRingFree+0x7c>
{
 1004f44:	e92d4010 	push	{r4, lr}
	if ((RingPtr->PostCnt < NumBd) || (RingPtr->PostHead != BdSetPtr)) {
 1004f48:	e590e044 	ldr	lr, [r0, #68]	; 0x44
 1004f4c:	e15e0002 	cmp	lr, r2
 1004f50:	1a000016 	bne	1004fb0 <XAxiDma_BdRingFree+0x84>
	}

	/* Update pointers and counters */
	RingPtr->FreeCnt += NumBd;
	RingPtr->PostCnt -= NumBd;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1004f54:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->PostCnt -= NumBd;
 1004f58:	e04cc001 	sub	ip, ip, r1
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1004f5c:	e5904028 	ldr	r4, [r0, #40]	; 0x28
	RingPtr->PostCnt -= NumBd;
 1004f60:	e580c05c 	str	ip, [r0, #92]	; 0x5c
	RingPtr->FreeCnt += NumBd;
 1004f64:	e590c050 	ldr	ip, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1004f68:	e0030193 	mul	r3, r3, r1
	RingPtr->FreeCnt += NumBd;
 1004f6c:	e08c1001 	add	r1, ip, r1
 1004f70:	e5801050 	str	r1, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1004f74:	e093300e 	adds	r3, r3, lr
 1004f78:	23a02001 	movcs	r2, #1
 1004f7c:	33a02000 	movcc	r2, #0
 1004f80:	e1540003 	cmp	r4, r3
 1004f84:	33822001 	orrcc	r2, r2, #1
 1004f88:	e3520000 	cmp	r2, #0
 1004f8c:	1590202c 	ldrne	r2, [r0, #44]	; 0x2c
 1004f90:	10433002 	subne	r3, r3, r2
 1004f94:	e5803044 	str	r3, [r0, #68]	; 0x44

	return XST_SUCCESS;
 1004f98:	e3a00000 	mov	r0, #0
 1004f9c:	e8bd8010 	pop	{r4, pc}
		return XST_SUCCESS;
 1004fa0:	e1a00001 	mov	r0, r1
 1004fa4:	e12fff1e 	bx	lr
		return XST_DMA_SG_LIST_ERROR;
 1004fa8:	e300020e 	movw	r0, #526	; 0x20e
}
 1004fac:	e12fff1e 	bx	lr
		return XST_DMA_SG_LIST_ERROR;
 1004fb0:	e300020e 	movw	r0, #526	; 0x20e
}
 1004fb4:	e8bd8010 	pop	{r4, pc}
		return XST_INVALID_PARAM;
 1004fb8:	e3a0000f 	mov	r0, #15
 1004fbc:	e12fff1e 	bx	lr

01004fc0 <XAxiDma_BdRingCheck>:
	u32 AddrV;
	u32 AddrP;
	int i;

	/* Is the list created */
	if (RingPtr->AllCnt == 0) {
 1004fc0:	e5903060 	ldr	r3, [r0, #96]	; 0x60
 1004fc4:	e3530000 	cmp	r3, #0
 1004fc8:	0a00004f 	beq	100510c <XAxiDma_BdRingCheck+0x14c>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't check if channel is running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1004fcc:	e5902008 	ldr	r2, [r0, #8]
 1004fd0:	e3520001 	cmp	r2, #1
 1004fd4:	0a00004e 	beq	1005114 <XAxiDma_BdRingCheck+0x154>

		return XST_IS_STARTED;
	}

	/* RunState doesn't make sense */
	else if (RingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1004fd8:	e5902008 	ldr	r2, [r0, #8]
 1004fdc:	e3520002 	cmp	r2, #2
 1004fe0:	1a000047 	bne	1005104 <XAxiDma_BdRingCheck+0x144>
{
 1004fe4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal pointers point to correct memory space */
	AddrV = (UINTPTR) RingPtr->FreeHead;
 1004fe8:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1004fec:	e5904024 	ldr	r4, [r0, #36]	; 0x24
 1004ff0:	e1540001 	cmp	r4, r1
 1004ff4:	8a000040 	bhi	10050fc <XAxiDma_BdRingCheck+0x13c>
 1004ff8:	e5902028 	ldr	r2, [r0, #40]	; 0x28
 1004ffc:	e1520001 	cmp	r2, r1
 1005000:	3a00003d 	bcc	10050fc <XAxiDma_BdRingCheck+0x13c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PreHead;
 1005004:	e590c038 	ldr	ip, [r0, #56]	; 0x38
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005008:	e154000c 	cmp	r4, ip
 100500c:	93a01000 	movls	r1, #0
 1005010:	83a01001 	movhi	r1, #1
 1005014:	e152000c 	cmp	r2, ip
 1005018:	33811001 	orrcc	r1, r1, #1
 100501c:	e3510000 	cmp	r1, #0
 1005020:	1a000035 	bne	10050fc <XAxiDma_BdRingCheck+0x13c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwHead;
 1005024:	e590c03c 	ldr	ip, [r0, #60]	; 0x3c
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005028:	e152000c 	cmp	r2, ip
 100502c:	23a01000 	movcs	r1, #0
 1005030:	33a01001 	movcc	r1, #1
 1005034:	e154000c 	cmp	r4, ip
 1005038:	83811001 	orrhi	r1, r1, #1
 100503c:	e3510000 	cmp	r1, #0
 1005040:	1a00002d 	bne	10050fc <XAxiDma_BdRingCheck+0x13c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwTail;
 1005044:	e590c040 	ldr	ip, [r0, #64]	; 0x40
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005048:	e152000c 	cmp	r2, ip
 100504c:	23a01000 	movcs	r1, #0
 1005050:	33a01001 	movcc	r1, #1
 1005054:	e154000c 	cmp	r4, ip
 1005058:	83811001 	orrhi	r1, r1, #1
 100505c:	e3510000 	cmp	r1, #0
 1005060:	1a000025 	bne	10050fc <XAxiDma_BdRingCheck+0x13c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PostHead;
 1005064:	e5901044 	ldr	r1, [r0, #68]	; 0x44
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005068:	e1520001 	cmp	r2, r1
 100506c:	23a02000 	movcs	r2, #0
 1005070:	33a02001 	movcc	r2, #1
 1005074:	e1540001 	cmp	r4, r1
 1005078:	83822001 	orrhi	r2, r2, #1
 100507c:	e3520000 	cmp	r2, #0
 1005080:	1a00001d 	bne	10050fc <XAxiDma_BdRingCheck+0x13c>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal counters add up */
	if ((RingPtr->HwCnt + RingPtr->PreCnt + RingPtr->FreeCnt +
 1005084:	e5902058 	ldr	r2, [r0, #88]	; 0x58
 1005088:	e590e054 	ldr	lr, [r0, #84]	; 0x54
 100508c:	e590c050 	ldr	ip, [r0, #80]	; 0x50
 1005090:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
 1005094:	e082200e 	add	r2, r2, lr
 1005098:	e082200c 	add	r2, r2, ip
 100509c:	e0822001 	add	r2, r2, r1
 10050a0:	e1530002 	cmp	r3, r2
 10050a4:	1a000014 	bne	10050fc <XAxiDma_BdRingCheck+0x13c>
		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify BDs are linked correctly */
	AddrV = RingPtr->FirstBdAddr;
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 10050a8:	e5905020 	ldr	r5, [r0, #32]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10050ac:	e3530001 	cmp	r3, #1
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 10050b0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
 10050b4:	e1a07000 	mov	r7, r0
 10050b8:	e0855003 	add	r5, r5, r3
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10050bc:	da000016 	ble	100511c <XAxiDma_BdRingCheck+0x15c>
 10050c0:	e3a06001 	mov	r6, #1
 10050c4:	ea000005 	b	10050e0 <XAxiDma_BdRingCheck+0x120>
 10050c8:	e5972060 	ldr	r2, [r7, #96]	; 0x60

			return XST_DMA_SG_LIST_ERROR;
		}

		/* Move on to next BD */
		AddrV += RingPtr->Separation;
 10050cc:	e5973030 	ldr	r3, [r7, #48]	; 0x30
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10050d0:	e1520006 	cmp	r2, r6
		AddrV += RingPtr->Separation;
 10050d4:	e0844003 	add	r4, r4, r3
		AddrP += RingPtr->Separation;
 10050d8:	e0855003 	add	r5, r5, r3
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10050dc:	da00000e 	ble	100511c <XAxiDma_BdRingCheck+0x15c>
		XAXIDMA_CACHE_INVALIDATE(AddrV);
 10050e0:	e3a01034 	mov	r1, #52	; 0x34
 10050e4:	e1a00004 	mov	r0, r4
 10050e8:	eb000af6 	bl	1007cc8 <Xil_DCacheInvalidateRange>
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10050ec:	e5943000 	ldr	r3, [r4]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10050f0:	e2866001 	add	r6, r6, #1
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10050f4:	e1530005 	cmp	r3, r5
 10050f8:	0afffff2 	beq	10050c8 <XAxiDma_BdRingCheck+0x108>
		"ptr %x wrong, expect %x\r\n",
			(unsigned int)XAxiDma_BdRead(AddrV,
		          XAXIDMA_BD_NDESC_OFFSET),
			(unsigned int)RingPtr->FirstBdPhysAddr);

		return XST_DMA_SG_LIST_ERROR;
 10050fc:	e300020e 	movw	r0, #526	; 0x20e
 1005100:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1005104:	e300020e 	movw	r0, #526	; 0x20e
	}

	/* No problems found */
	return XST_SUCCESS;
}
 1005108:	e12fff1e 	bx	lr
		return XST_DMA_SG_NO_LIST;
 100510c:	e300020b 	movw	r0, #523	; 0x20b
 1005110:	e12fff1e 	bx	lr
		return XST_IS_STARTED;
 1005114:	e3a00017 	mov	r0, #23
 1005118:	e12fff1e 	bx	lr
	XAXIDMA_CACHE_INVALIDATE(AddrV);
 100511c:	e3a01034 	mov	r1, #52	; 0x34
 1005120:	e1a00004 	mov	r0, r4
 1005124:	eb000ae7 	bl	1007cc8 <Xil_DCacheInvalidateRange>
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 1005128:	e5942000 	ldr	r2, [r4]
 100512c:	e5973020 	ldr	r3, [r7, #32]
 1005130:	e1520003 	cmp	r2, r3
 1005134:	1afffff0 	bne	10050fc <XAxiDma_BdRingCheck+0x13c>
	return XST_SUCCESS;
 1005138:	e3a00000 	mov	r0, #0
}
 100513c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005140 <XAxiDma_BdRingDumpRegs>:
 * @return	None
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_BdRingDumpRegs(XAxiDma_BdRing *RingPtr) {
 1005140:	e1a03000 	mov	r3, r0
 1005144:	e92d4070 	push	{r4, r5, r6, lr}
	UINTPTR RegBase = RingPtr->ChanBase;
 1005148:	e5934000 	ldr	r4, [r3]
	int RingIndex = RingPtr->RingIndex;

	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 100514c:	e3020df0 	movw	r0, #11760	; 0x2df0
 1005150:	e3400101 	movt	r0, #257	; 0x101
	int RingIndex = RingPtr->RingIndex;
 1005154:	e5935064 	ldr	r5, [r3, #100]	; 0x64
	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 1005158:	e1a01004 	mov	r1, r4
 100515c:	eb000db9 	bl	1008848 <xil_printf>
	xil_printf("Control REG: %08x\r\n",
 1005160:	e3020e08 	movw	r0, #11784	; 0x2e08
	return *(volatile u32 *) Addr;
 1005164:	e5941000 	ldr	r1, [r4]
 1005168:	e3400101 	movt	r0, #257	; 0x101
 100516c:	eb000db5 	bl	1008848 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET));
	xil_printf("Status REG: %08x\r\n",
 1005170:	e3020e1c 	movw	r0, #11804	; 0x2e1c
 1005174:	e5941004 	ldr	r1, [r4, #4]
 1005178:	e3400101 	movt	r0, #257	; 0x101
 100517c:	eb000db1 	bl	1008848 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_SR_OFFSET));

	if (RingIndex) {
 1005180:	e3550000 	cmp	r5, #0
 1005184:	0a00000f 	beq	10051c8 <XAxiDma_BdRingDumpRegs+0x88>
	xil_printf("Cur BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1005188:	e2855001 	add	r5, r5, #1
	xil_printf("Cur BD REG: %08x\r\n",
 100518c:	e3020e30 	movw	r0, #11824	; 0x2e30
 1005190:	e7941285 	ldr	r1, [r4, r5, lsl #5]
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1005194:	e1a05285 	lsl	r5, r5, #5
	xil_printf("Cur BD REG: %08x\r\n",
 1005198:	e3400101 	movt	r0, #257	; 0x101
 100519c:	eb000da9 	bl	1008848 <xil_printf>
		XAXIDMA_RX_CDESC0_OFFSET + ((RingIndex - 1) *
		XAXIDMA_RX_NDESC_OFFSET)));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 10051a0:	e2455040 	sub	r5, r5, #64	; 0x40
 10051a4:	e2844048 	add	r4, r4, #72	; 0x48
	xil_printf("Tail BD REG: %08x\r\n",
 10051a8:	e3020e44 	movw	r0, #11844	; 0x2e44
 10051ac:	e7951004 	ldr	r1, [r5, r4]
 10051b0:	e3400101 	movt	r0, #257	; 0x101
 10051b4:	eb000da3 	bl	1008848 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CDESC_OFFSET));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_TDESC_OFFSET));
	}

	xil_printf("\r\n");
 10051b8:	e30209f4 	movw	r0, #10740	; 0x29f4
}
 10051bc:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 10051c0:	e3400101 	movt	r0, #257	; 0x101
 10051c4:	ea000d9f 	b	1008848 <xil_printf>
	xil_printf("Cur BD REG: %08x\r\n",
 10051c8:	e3020e30 	movw	r0, #11824	; 0x2e30
 10051cc:	e5941008 	ldr	r1, [r4, #8]
 10051d0:	e3400101 	movt	r0, #257	; 0x101
 10051d4:	eb000d9b 	bl	1008848 <xil_printf>
	xil_printf("Tail BD REG: %08x\r\n",
 10051d8:	e3020e44 	movw	r0, #11844	; 0x2e44
 10051dc:	e5941010 	ldr	r1, [r4, #16]
 10051e0:	e3400101 	movt	r0, #257	; 0x101
 10051e4:	eb000d97 	bl	1008848 <xil_printf>
	xil_printf("\r\n");
 10051e8:	e30209f4 	movw	r0, #10740	; 0x29f4
}
 10051ec:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 10051f0:	e3400101 	movt	r0, #257	; 0x101
 10051f4:	ea000d93 	b	1008848 <xil_printf>

010051f8 <XGpioPs_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XGpioPs_CfgInitialize(XGpioPs *InstancePtr, const XGpioPs_Config *ConfigPtr,
				u32 EffectiveAddr)
{
 10051f8:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status = XST_SUCCESS;
	u8 i;
	Xil_AssertNonvoid(InstancePtr != NULL);
 10051fc:	e2504000 	subs	r4, r0, #0
 1005200:	0a00004b 	beq	1005334 <XGpioPs_CfgInitialize+0x13c>
 1005204:	e3095c78 	movw	r5, #40056	; 0x9c78
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1005208:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 100520c:	e3405102 	movt	r5, #258	; 0x102
 1005210:	e3a03000 	mov	r3, #0
 1005214:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1005218:	0a00004e 	beq	1005358 <XGpioPs_CfgInitialize+0x160>
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 100521c:	e3520000 	cmp	r2, #0
 1005220:	0a00002d 	beq	10052dc <XGpioPs_CfgInitialize+0xe4>
	 * Set some default values for instance data, don't indicate the device
	 * is ready to use until everything has been initialized successfully.
	 */
	InstancePtr->IsReady = 0U;
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1005224:	e1d100b0 	ldrh	r0, [r1]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1005228:	e3061c98 	movw	r1, #27800	; 0x6c98
 100522c:	e3401100 	movt	r1, #256	; 0x100
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
 1005230:	e1c420f4 	strd	r2, [r4, #4]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1005234:	e584100c 	str	r1, [r4, #12]
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1005238:	e1c400b0 	strh	r0, [r4]
	InstancePtr->Platform = XGetPlatform_Info();
 100523c:	eb000cf2 	bl	100860c <XGetPlatform_Info>

	/* Initialize the Bank data based on platform */
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1005240:	e3500001 	cmp	r0, #1
	InstancePtr->Platform = XGetPlatform_Info();
 1005244:	e5840014 	str	r0, [r4, #20]
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1005248:	0a00002b 	beq	10052fc <XGpioPs_CfgInitialize+0x104>
		 *	142 - 173, Bank 5
		 */
		InstancePtr->MaxPinNum = (u32)174;
		InstancePtr->MaxBanks = (u8)6;
	}
        else if (InstancePtr->Platform == (u32)XPLAT_VERSAL)
 100524c:	e3500006 	cmp	r0, #6
 1005250:	0a00002e 	beq	1005310 <XGpioPs_CfgInitialize+0x118>
		 *	0 - 31,  Bank 0
		 *	32 - 53, Bank 1
		 *	54 - 85, Bank 2
		 *	86 - 117, Bank 3
		 */
		InstancePtr->MaxPinNum = (u32)118;
 1005254:	e3a02076 	mov	r2, #118	; 0x76
		InstancePtr->MaxBanks = (u8)4;
 1005258:	e3a03004 	mov	r3, #4
		InstancePtr->MaxPinNum = (u32)118;
 100525c:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)4;
 1005260:	e5c4301c 	strb	r3, [r4, #28]
{
 1005264:	e3a02000 	mov	r2, #0
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1005268:	e3e0c000 	mvn	ip, #0
 100526c:	e1a03002 	mov	r3, r2
 1005270:	ea000008 	b	1005298 <XGpioPs_CfgInitialize+0xa0>

                       }
                }
                else
                {
		XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005274:	e5941004 	ldr	r1, [r4, #4]
 1005278:	e2811f85 	add	r1, r1, #532	; 0x214
 100527c:	e781c303 	str	ip, [r1, r3, lsl #6]
 1005280:	e2822001 	add	r2, r2, #1
	for (i=(u8)0U;i<InstancePtr->MaxBanks;i++) {
 1005284:	e5d4101c 	ldrb	r1, [r4, #28]
 1005288:	e6ef3072 	uxtb	r3, r2
 100528c:	e1510003 	cmp	r1, r3
 1005290:	9a00000c 	bls	10052c8 <XGpioPs_CfgInitialize+0xd0>
 1005294:	e5940014 	ldr	r0, [r4, #20]
                if (InstancePtr->Platform == XPLAT_VERSAL){
 1005298:	e3500006 	cmp	r0, #6
 100529c:	1afffff4 	bne	1005274 <XGpioPs_CfgInitialize+0x7c>
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10052a0:	e5941020 	ldr	r1, [r4, #32]
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10052a4:	e2430001 	sub	r0, r3, #1
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10052a8:	e3510000 	cmp	r1, #0
 10052ac:	1a000002 	bne	10052bc <XGpioPs_CfgInitialize+0xc4>
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10052b0:	e3500001 	cmp	r0, #1
 10052b4:	8affffee 	bhi	1005274 <XGpioPs_CfgInitialize+0x7c>
 10052b8:	eafffff0 	b	1005280 <XGpioPs_CfgInitialize+0x88>
                                if(i==(u32)XGPIOPS_TWO)
 10052bc:	e3530002 	cmp	r3, #2
 10052c0:	1affffeb 	bne	1005274 <XGpioPs_CfgInitialize+0x7c>
 10052c4:	eaffffed 	b	1005280 <XGpioPs_CfgInitialize+0x88>
					  XGPIOPS_INTDIS_OFFSET, 0xFFFFFFFFU);
                }
	}

	/* Indicate the component is now ready to use. */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10052c8:	e3013111 	movw	r3, #4369	; 0x1111
 10052cc:	e3413111 	movt	r3, #4369	; 0x1111
 10052d0:	e5843008 	str	r3, [r4, #8]

	return Status;
}
 10052d4:	e3a00000 	mov	r0, #0
 10052d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 10052dc:	e3020e58 	movw	r0, #11864	; 0x2e58
 10052e0:	e3a01068 	mov	r1, #104	; 0x68
 10052e4:	e3400101 	movt	r0, #257	; 0x101
 10052e8:	eb000a42 	bl	1007bf8 <Xil_Assert>
 10052ec:	e3a03001 	mov	r3, #1
}
 10052f0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 10052f4:	e5853000 	str	r3, [r5]
}
 10052f8:	e8bd8070 	pop	{r4, r5, r6, pc}
		InstancePtr->MaxPinNum = (u32)174;
 10052fc:	e3a020ae 	mov	r2, #174	; 0xae
		InstancePtr->MaxBanks = (u8)6;
 1005300:	e3a03006 	mov	r3, #6
		InstancePtr->MaxPinNum = (u32)174;
 1005304:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)6;
 1005308:	e5c4301c 	strb	r3, [r4, #28]
 100530c:	eaffffd4 	b	1005264 <XGpioPs_CfgInitialize+0x6c>
                if(InstancePtr->PmcGpio == (u32)FALSE)
 1005310:	e5943020 	ldr	r3, [r4, #32]
 1005314:	e3530000 	cmp	r3, #0
                        InstancePtr->MaxPinNum = (u32)58;
 1005318:	03a0203a 	moveq	r2, #58	; 0x3a
                        InstancePtr->MaxBanks = (u8)4;
 100531c:	03a03004 	moveq	r3, #4
                        InstancePtr->MaxPinNum = (u32)116;
 1005320:	13a02074 	movne	r2, #116	; 0x74
                        InstancePtr->MaxBanks = (u8)5;
 1005324:	13a03005 	movne	r3, #5
                        InstancePtr->MaxPinNum = (u32)116;
 1005328:	e5842018 	str	r2, [r4, #24]
                        InstancePtr->MaxBanks = (u8)5;
 100532c:	e5c4301c 	strb	r3, [r4, #28]
 1005330:	eaffffcb 	b	1005264 <XGpioPs_CfgInitialize+0x6c>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005334:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005338:	e3a01066 	mov	r1, #102	; 0x66
 100533c:	e3400101 	movt	r0, #257	; 0x101
 1005340:	eb000a2c 	bl	1007bf8 <Xil_Assert>
 1005344:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005348:	e3a02001 	mov	r2, #1
 100534c:	e3403102 	movt	r3, #258	; 0x102
 1005350:	e5832000 	str	r2, [r3]
 1005354:	eaffffde 	b	10052d4 <XGpioPs_CfgInitialize+0xdc>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1005358:	e3020e58 	movw	r0, #11864	; 0x2e58
 100535c:	e3a01067 	mov	r1, #103	; 0x67
 1005360:	e3400101 	movt	r0, #257	; 0x101
 1005364:	eb000a23 	bl	1007bf8 <Xil_Assert>
 1005368:	e3a03001 	mov	r3, #1
 100536c:	e5853000 	str	r3, [r5]
 1005370:	eaffffd7 	b	10052d4 <XGpioPs_CfgInitialize+0xdc>

01005374 <XGpioPs_Read>:
* @note		This function is used for reading the state of all the GPIO pins
*		of specified bank.
*
*****************************************************************************/
u32 XGpioPs_Read(const XGpioPs *InstancePtr, u8 Bank)
{
 1005374:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005378:	e2506000 	subs	r6, r0, #0
 100537c:	0a00001f 	beq	1005400 <XGpioPs_Read+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005380:	e5962008 	ldr	r2, [r6, #8]
 1005384:	e3013111 	movw	r3, #4369	; 0x1111
 1005388:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 100538c:	e3095c78 	movw	r5, #40056	; 0x9c78
 1005390:	e3405102 	movt	r5, #258	; 0x102
 1005394:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005398:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 100539c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10053a0:	1a000006 	bne	10053c0 <XGpioPs_Read+0x4c>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10053a4:	e5d6301c 	ldrb	r3, [r6, #28]
 10053a8:	e1530001 	cmp	r3, r1
 10053ac:	9a00000b 	bls	10053e0 <XGpioPs_Read+0x6c>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10053b0:	e5963004 	ldr	r3, [r6, #4]
 10053b4:	e2811018 	add	r1, r1, #24
	return *(volatile u32 *) Addr;
 10053b8:	e7930101 	ldr	r0, [r3, r1, lsl #2]
 10053bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10053c0:	e3020e58 	movw	r0, #11864	; 0x2e58
 10053c4:	e3a010e0 	mov	r1, #224	; 0xe0
 10053c8:	e3400101 	movt	r0, #257	; 0x101
 10053cc:	eb000a09 	bl	1007bf8 <Xil_Assert>
 10053d0:	e3a03001 	mov	r3, #1
 10053d4:	e1a00004 	mov	r0, r4
 10053d8:	e5853000 	str	r3, [r5]
 10053dc:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10053e0:	e3020e58 	movw	r0, #11864	; 0x2e58
 10053e4:	e3a010e1 	mov	r1, #225	; 0xe1
 10053e8:	e3400101 	movt	r0, #257	; 0x101
 10053ec:	eb000a01 	bl	1007bf8 <Xil_Assert>
 10053f0:	e3a03001 	mov	r3, #1
 10053f4:	e1a00004 	mov	r0, r4
 10053f8:	e5853000 	str	r3, [r5]
				 ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
				 XGPIOPS_DATA_RO_OFFSET);
}
 10053fc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005400:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005404:	e3a010df 	mov	r1, #223	; 0xdf
 1005408:	e3400101 	movt	r0, #257	; 0x101
 100540c:	eb0009f9 	bl	1007bf8 <Xil_Assert>
 1005410:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005414:	e3a02001 	mov	r2, #1
 1005418:	e3403102 	movt	r3, #258	; 0x102
 100541c:	e1a00006 	mov	r0, r6
 1005420:	e5832000 	str	r2, [r3]
 1005424:	e8bd8070 	pop	{r4, r5, r6, pc}

01005428 <XGpioPs_Write>:
*		the bank. The previous state of the pins is not maintained.
*
*****************************************************************************/
void XGpioPs_Write(const XGpioPs *InstancePtr, u8 Bank, u32 Data)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1005428:	e3500000 	cmp	r0, #0
{
 100542c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005430:	0a00001d 	beq	10054ac <XGpioPs_Write+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005434:	e590c008 	ldr	ip, [r0, #8]
 1005438:	e3013111 	movw	r3, #4369	; 0x1111
 100543c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005440:	e3094c78 	movw	r4, #40056	; 0x9c78
 1005444:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005448:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 100544c:	e3a03000 	mov	r3, #0
 1005450:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005454:	1a000006 	bne	1005474 <XGpioPs_Write+0x4c>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005458:	e5d0301c 	ldrb	r3, [r0, #28]
 100545c:	e1530001 	cmp	r3, r1
 1005460:	9a00000a 	bls	1005490 <XGpioPs_Write+0x68>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005464:	e5903004 	ldr	r3, [r0, #4]
 1005468:	e2811010 	add	r1, r1, #16
	*LocalAddr = Value;
 100546c:	e7832101 	str	r2, [r3, r1, lsl #2]
 1005470:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005474:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005478:	e3001127 	movw	r1, #295	; 0x127
 100547c:	e3400101 	movt	r0, #257	; 0x101
 1005480:	eb0009dc 	bl	1007bf8 <Xil_Assert>
 1005484:	e3a03001 	mov	r3, #1
 1005488:	e5843000 	str	r3, [r4]
 100548c:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005490:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005494:	e3a01f4a 	mov	r1, #296	; 0x128
 1005498:	e3400101 	movt	r0, #257	; 0x101
 100549c:	eb0009d5 	bl	1007bf8 <Xil_Assert>
 10054a0:	e3a03001 	mov	r3, #1
 10054a4:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
			  XGPIOPS_DATA_OFFSET, Data);
}
 10054a8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10054ac:	e3020e58 	movw	r0, #11864	; 0x2e58
 10054b0:	e3001126 	movw	r1, #294	; 0x126
 10054b4:	e3400101 	movt	r0, #257	; 0x101
 10054b8:	eb0009ce 	bl	1007bf8 <Xil_Assert>
 10054bc:	e3093c78 	movw	r3, #40056	; 0x9c78
 10054c0:	e3a02001 	mov	r2, #1
 10054c4:	e3403102 	movt	r3, #258	; 0x102
 10054c8:	e5832000 	str	r2, [r3]
 10054cc:	e8bd8010 	pop	{r4, pc}

010054d0 <XGpioPs_SetDirection>:
*		not maintained.
*
*****************************************************************************/
void XGpioPs_SetDirection(const XGpioPs *InstancePtr, u8 Bank, u32 Direction)
{
	Xil_AssertVoid(InstancePtr != NULL);
 10054d0:	e3500000 	cmp	r0, #0
{
 10054d4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10054d8:	0a00001e 	beq	1005558 <XGpioPs_SetDirection+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10054dc:	e590c008 	ldr	ip, [r0, #8]
 10054e0:	e3013111 	movw	r3, #4369	; 0x1111
 10054e4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10054e8:	e3094c78 	movw	r4, #40056	; 0x9c78
 10054ec:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10054f0:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10054f4:	e3a03000 	mov	r3, #0
 10054f8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10054fc:	1a000007 	bne	1005520 <XGpioPs_SetDirection+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005500:	e5d0301c 	ldrb	r3, [r0, #28]
 1005504:	e1530001 	cmp	r3, r1
 1005508:	9a00000b 	bls	100553c <XGpioPs_SetDirection+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100550c:	e5900004 	ldr	r0, [r0, #4]
 1005510:	e3a03f81 	mov	r3, #516	; 0x204
 1005514:	e0831301 	add	r1, r3, r1, lsl #6
 1005518:	e7812000 	str	r2, [r1, r0]
 100551c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005520:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005524:	e3001186 	movw	r1, #390	; 0x186
 1005528:	e3400101 	movt	r0, #257	; 0x101
 100552c:	eb0009b1 	bl	1007bf8 <Xil_Assert>
 1005530:	e3a03001 	mov	r3, #1
 1005534:	e5843000 	str	r3, [r4]
 1005538:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 100553c:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005540:	e3001187 	movw	r1, #391	; 0x187
 1005544:	e3400101 	movt	r0, #257	; 0x101
 1005548:	eb0009aa 	bl	1007bf8 <Xil_Assert>
 100554c:	e3a03001 	mov	r3, #1
 1005550:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_DIRM_OFFSET, Direction);
}
 1005554:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005558:	e3020e58 	movw	r0, #11864	; 0x2e58
 100555c:	e3001185 	movw	r1, #389	; 0x185
 1005560:	e3400101 	movt	r0, #257	; 0x101
 1005564:	eb0009a3 	bl	1007bf8 <Xil_Assert>
 1005568:	e3093c78 	movw	r3, #40056	; 0x9c78
 100556c:	e3a02001 	mov	r2, #1
 1005570:	e3403102 	movt	r3, #258	; 0x102
 1005574:	e5832000 	str	r2, [r3]
 1005578:	e8bd8010 	pop	{r4, pc}

0100557c <XGpioPs_GetDirection>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetDirection(const XGpioPs *InstancePtr, u8 Bank)
{
 100557c:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005580:	e2506000 	subs	r6, r0, #0
 1005584:	0a000020 	beq	100560c <XGpioPs_GetDirection+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005588:	e5962008 	ldr	r2, [r6, #8]
 100558c:	e3013111 	movw	r3, #4369	; 0x1111
 1005590:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005594:	e3095c78 	movw	r5, #40056	; 0x9c78
 1005598:	e3405102 	movt	r5, #258	; 0x102
 100559c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10055a0:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10055a4:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10055a8:	1a000007 	bne	10055cc <XGpioPs_GetDirection+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10055ac:	e5d6301c 	ldrb	r3, [r6, #28]
 10055b0:	e1530001 	cmp	r3, r1
 10055b4:	9a00000c 	bls	10055ec <XGpioPs_GetDirection+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10055b8:	e5962004 	ldr	r2, [r6, #4]
 10055bc:	e3a03f81 	mov	r3, #516	; 0x204
 10055c0:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 10055c4:	e7910002 	ldr	r0, [r1, r2]
 10055c8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10055cc:	e3020e58 	movw	r0, #11864	; 0x2e58
 10055d0:	e30011d5 	movw	r1, #469	; 0x1d5
 10055d4:	e3400101 	movt	r0, #257	; 0x101
 10055d8:	eb000986 	bl	1007bf8 <Xil_Assert>
 10055dc:	e3a03001 	mov	r3, #1
 10055e0:	e1a00004 	mov	r0, r4
 10055e4:	e5853000 	str	r3, [r5]
 10055e8:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10055ec:	e3020e58 	movw	r0, #11864	; 0x2e58
 10055f0:	e30011d6 	movw	r1, #470	; 0x1d6
 10055f4:	e3400101 	movt	r0, #257	; 0x101
 10055f8:	eb00097e 	bl	1007bf8 <Xil_Assert>
 10055fc:	e3a03001 	mov	r3, #1
 1005600:	e1a00004 	mov	r0, r4
 1005604:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_DIRM_OFFSET);
}
 1005608:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 100560c:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005610:	e3a01f75 	mov	r1, #468	; 0x1d4
 1005614:	e3400101 	movt	r0, #257	; 0x101
 1005618:	eb000976 	bl	1007bf8 <Xil_Assert>
 100561c:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005620:	e3a02001 	mov	r2, #1
 1005624:	e3403102 	movt	r3, #258	; 0x102
 1005628:	e1a00006 	mov	r0, r6
 100562c:	e5832000 	str	r2, [r3]
 1005630:	e8bd8070 	pop	{r4, r5, r6, pc}

01005634 <XGpioPs_SetOutputEnable>:
*		Enables is not maintained.
*
*****************************************************************************/
void XGpioPs_SetOutputEnable(const XGpioPs *InstancePtr, u8 Bank, u32 OpEnable)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1005634:	e3500000 	cmp	r0, #0
{
 1005638:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100563c:	0a00001e 	beq	10056bc <XGpioPs_SetOutputEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005640:	e590c008 	ldr	ip, [r0, #8]
 1005644:	e3013111 	movw	r3, #4369	; 0x1111
 1005648:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100564c:	e3094c78 	movw	r4, #40056	; 0x9c78
 1005650:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005654:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005658:	e3a03000 	mov	r3, #0
 100565c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005660:	1a000007 	bne	1005684 <XGpioPs_SetOutputEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005664:	e5d0301c 	ldrb	r3, [r0, #28]
 1005668:	e1530001 	cmp	r3, r1
 100566c:	9a00000b 	bls	10056a0 <XGpioPs_SetOutputEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005670:	e5900004 	ldr	r0, [r0, #4]
 1005674:	e3a03f82 	mov	r3, #520	; 0x208
 1005678:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 100567c:	e7812000 	str	r2, [r1, r0]
 1005680:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005684:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005688:	e3a01e22 	mov	r1, #544	; 0x220
 100568c:	e3400101 	movt	r0, #257	; 0x101
 1005690:	eb000958 	bl	1007bf8 <Xil_Assert>
 1005694:	e3a03001 	mov	r3, #1
 1005698:	e5843000 	str	r3, [r4]
 100569c:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10056a0:	e3020e58 	movw	r0, #11864	; 0x2e58
 10056a4:	e3001221 	movw	r1, #545	; 0x221
 10056a8:	e3400101 	movt	r0, #257	; 0x101
 10056ac:	eb000951 	bl	1007bf8 <Xil_Assert>
 10056b0:	e3a03001 	mov	r3, #1
 10056b4:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_OUTEN_OFFSET, OpEnable);
}
 10056b8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10056bc:	e3020e58 	movw	r0, #11864	; 0x2e58
 10056c0:	e300121f 	movw	r1, #543	; 0x21f
 10056c4:	e3400101 	movt	r0, #257	; 0x101
 10056c8:	eb00094a 	bl	1007bf8 <Xil_Assert>
 10056cc:	e3093c78 	movw	r3, #40056	; 0x9c78
 10056d0:	e3a02001 	mov	r2, #1
 10056d4:	e3403102 	movt	r3, #258	; 0x102
 10056d8:	e5832000 	str	r2, [r3]
 10056dc:	e8bd8010 	pop	{r4, pc}

010056e0 <XGpioPs_GetOutputEnable>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetOutputEnable(const XGpioPs *InstancePtr, u8 Bank)
{
 10056e0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10056e4:	e2506000 	subs	r6, r0, #0
 10056e8:	0a000020 	beq	1005770 <XGpioPs_GetOutputEnable+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10056ec:	e5962008 	ldr	r2, [r6, #8]
 10056f0:	e3013111 	movw	r3, #4369	; 0x1111
 10056f4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10056f8:	e3095c78 	movw	r5, #40056	; 0x9c78
 10056fc:	e3405102 	movt	r5, #258	; 0x102
 1005700:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005704:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005708:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100570c:	1a000007 	bne	1005730 <XGpioPs_GetOutputEnable+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1005710:	e5d6301c 	ldrb	r3, [r6, #28]
 1005714:	e1530001 	cmp	r3, r1
 1005718:	9a00000c 	bls	1005750 <XGpioPs_GetOutputEnable+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100571c:	e5962004 	ldr	r2, [r6, #4]
 1005720:	e3a03f82 	mov	r3, #520	; 0x208
 1005724:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1005728:	e7910002 	ldr	r0, [r1, r2]
 100572c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005730:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005734:	e3a01f9d 	mov	r1, #628	; 0x274
 1005738:	e3400101 	movt	r0, #257	; 0x101
 100573c:	eb00092d 	bl	1007bf8 <Xil_Assert>
 1005740:	e3a03001 	mov	r3, #1
 1005744:	e1a00004 	mov	r0, r4
 1005748:	e5853000 	str	r3, [r5]
 100574c:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1005750:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005754:	e3001275 	movw	r1, #629	; 0x275
 1005758:	e3400101 	movt	r0, #257	; 0x101
 100575c:	eb000925 	bl	1007bf8 <Xil_Assert>
 1005760:	e3a03001 	mov	r3, #1
 1005764:	e1a00004 	mov	r0, r4
 1005768:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_OUTEN_OFFSET);
}
 100576c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005770:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005774:	e3001273 	movw	r1, #627	; 0x273
 1005778:	e3400101 	movt	r0, #257	; 0x101
 100577c:	eb00091d 	bl	1007bf8 <Xil_Assert>
 1005780:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005784:	e3a02001 	mov	r2, #1
 1005788:	e3403102 	movt	r3, #258	; 0x102
 100578c:	e1a00006 	mov	r0, r6
 1005790:	e5832000 	str	r2, [r3]
 1005794:	e8bd8070 	pop	{r4, r5, r6, pc}

01005798 <XGpioPs_GetBankPin>:
#ifdef versal
void XGpioPs_GetBankPin(const XGpioPs *InstancePtr,u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#else
void XGpioPs_GetBankPin(u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#endif
{
 1005798:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	u32 XGpioPsPinTable[6] = {0};
 100579c:	e3a05000 	mov	r5, #0
{
 10057a0:	e24dd01c 	sub	sp, sp, #28
 10057a4:	e1a04000 	mov	r4, r0
 10057a8:	e1a06001 	mov	r6, r1
 10057ac:	e1a07002 	mov	r7, r2
	u32 XGpioPsPinTable[6] = {0};
 10057b0:	e58d5004 	str	r5, [sp, #4]
 10057b4:	e58d5000 	str	r5, [sp]
 10057b8:	e58d5008 	str	r5, [sp, #8]
 10057bc:	e58d500c 	str	r5, [sp, #12]
 10057c0:	e58d5010 	str	r5, [sp, #16]
 10057c4:	e58d5014 	str	r5, [sp, #20]
#ifdef versal
        u8 i=(u8)0;
#endif
	u32 Platform = XGetPlatform_Info();
 10057c8:	eb000b8f 	bl	100860c <XGetPlatform_Info>

	if (Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 10057cc:	e3500001 	cmp	r0, #1
 10057d0:	0a000022 	beq	1005860 <XGpioPs_GetBankPin+0xc8>
                }

        }
#endif
        else {
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 10057d4:	e3a0201f 	mov	r2, #31
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 10057d8:	e3a03035 	mov	r3, #53	; 0x35
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */

		*BankNumber = 0U;
		while (*BankNumber < XGPIOPS_FOUR) {
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10057dc:	e354001f 	cmp	r4, #31
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 10057e0:	e58d2000 	str	r2, [sp]
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 10057e4:	e58d3004 	str	r3, [sp, #4]
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
 10057e8:	e3a02055 	mov	r2, #85	; 0x55
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */
 10057ec:	e3a03075 	mov	r3, #117	; 0x75
 10057f0:	e1cd20f8 	strd	r2, [sp, #8]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10057f4:	9a000034 	bls	10058cc <XGpioPs_GetBankPin+0x134>
 10057f8:	e3540035 	cmp	r4, #53	; 0x35
				break;
			}
			(*BankNumber)++;
 10057fc:	e3a03001 	mov	r3, #1
 1005800:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1005804:	9a000013 	bls	1005858 <XGpioPs_GetBankPin+0xc0>
 1005808:	e3540055 	cmp	r4, #85	; 0x55
			(*BankNumber)++;
 100580c:	e3a03002 	mov	r3, #2
 1005810:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1005814:	9a00000f 	bls	1005858 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1005818:	e3a03003 	mov	r3, #3
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 100581c:	e3540075 	cmp	r4, #117	; 0x75
			(*BankNumber)++;
 1005820:	e5c63000 	strb	r3, [r6]
 1005824:	83a03004 	movhi	r3, #4
 1005828:	85c63000 	strbhi	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 100582c:	9a000009 	bls	1005858 <XGpioPs_GetBankPin+0xc0>
        }
#endif

        else {
		*PinNumberInBank = (u8)((u32)PinNumber %
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1005830:	e28d2018 	add	r2, sp, #24
		*PinNumberInBank = (u8)((u32)PinNumber %
 1005834:	e1a00004 	mov	r0, r4
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1005838:	e0823103 	add	r3, r2, r3, lsl #2
 100583c:	e513101c 	ldr	r1, [r3, #-28]	; 0xffffffe4
		*PinNumberInBank = (u8)((u32)PinNumber %
 1005840:	e2811001 	add	r1, r1, #1
 1005844:	fa000e56 	blx	10091a4 <__aeabi_uidivmod>
 1005848:	e6ef4071 	uxtb	r4, r1
 100584c:	e5c74000 	strb	r4, [r7]
        }
}
 1005850:	e28dd01c 	add	sp, sp, #28
 1005854:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1005858:	e5d63000 	ldrb	r3, [r6]
 100585c:	eafffff3 	b	1005830 <XGpioPs_GetBankPin+0x98>
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1005860:	e3540019 	cmp	r4, #25
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1005864:	e3a01019 	mov	r1, #25
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1005868:	e3a0304d 	mov	r3, #77	; 0x4d
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 100586c:	e3a02033 	mov	r2, #51	; 0x33
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1005870:	e58d1000 	str	r1, [sp]
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1005874:	e3a0c06d 	mov	ip, #109	; 0x6d
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1005878:	e3a0108d 	mov	r1, #141	; 0x8d
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 100587c:	e58d3008 	str	r3, [sp, #8]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1005880:	e3a030ad 	mov	r3, #173	; 0xad
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1005884:	e58d1010 	str	r1, [sp, #16]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1005888:	e58d3014 	str	r3, [sp, #20]
 100588c:	828d1008 	addhi	r1, sp, #8
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1005890:	e58d2004 	str	r2, [sp, #4]
			(*BankNumber)++;
 1005894:	83a03002 	movhi	r3, #2
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1005898:	e58dc00c 	str	ip, [sp, #12]
			(*BankNumber)++;
 100589c:	85c60000 	strbhi	r0, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10058a0:	8a000001 	bhi	10058ac <XGpioPs_GetBankPin+0x114>
 10058a4:	ea000008 	b	10058cc <XGpioPs_GetBankPin+0x134>
 10058a8:	e4912004 	ldr	r2, [r1], #4
 10058ac:	e1540002 	cmp	r4, r2
 10058b0:	9affffe8 	bls	1005858 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 10058b4:	e5c63000 	strb	r3, [r6]
 10058b8:	e2833001 	add	r3, r3, #1
		while (*BankNumber < XGPIOPS_SIX) {
 10058bc:	e3530007 	cmp	r3, #7
 10058c0:	1afffff8 	bne	10058a8 <XGpioPs_GetBankPin+0x110>
 10058c4:	e3a03006 	mov	r3, #6
 10058c8:	eaffffd8 	b	1005830 <XGpioPs_GetBankPin+0x98>
		*BankNumber = 0U;
 10058cc:	e5c65000 	strb	r5, [r6]
	if (*BankNumber == (u8)0) {
 10058d0:	eaffffdd 	b	100584c <XGpioPs_GetBankPin+0xb4>

010058d4 <XGpioPs_ReadPin>:
{
 10058d4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10058d8:	e2506000 	subs	r6, r0, #0
{
 10058dc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10058e0:	0a00002a 	beq	1005990 <XGpioPs_ReadPin+0xbc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10058e4:	e5962008 	ldr	r2, [r6, #8]
 10058e8:	e3013111 	movw	r3, #4369	; 0x1111
 10058ec:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10058f0:	e3095c78 	movw	r5, #40056	; 0x9c78
 10058f4:	e3405102 	movt	r5, #258	; 0x102
 10058f8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10058fc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005900:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005904:	1a000018 	bne	100596c <XGpioPs_ReadPin+0x98>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1005908:	e5963018 	ldr	r3, [r6, #24]
 100590c:	e1530001 	cmp	r3, r1
 1005910:	9a00000c 	bls	1005948 <XGpioPs_ReadPin+0x74>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1005914:	e6ef0071 	uxtb	r0, r1
 1005918:	e28d2007 	add	r2, sp, #7
 100591c:	e28d1006 	add	r1, sp, #6
 1005920:	ebffff9c 	bl	1005798 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005924:	e5dd3006 	ldrb	r3, [sp, #6]
 1005928:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 100592c:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005930:	e2833018 	add	r3, r3, #24
 1005934:	e7920103 	ldr	r0, [r2, r3, lsl #2]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1005938:	e1a04430 	lsr	r4, r0, r4
 100593c:	e2040001 	and	r0, r4, #1
}
 1005940:	e28dd008 	add	sp, sp, #8
 1005944:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1005948:	e3020e58 	movw	r0, #11864	; 0x2e58
 100594c:	e3001106 	movw	r1, #262	; 0x106
 1005950:	e3400101 	movt	r0, #257	; 0x101
 1005954:	eb0008a7 	bl	1007bf8 <Xil_Assert>
 1005958:	e3a03001 	mov	r3, #1
 100595c:	e1a00004 	mov	r0, r4
 1005960:	e5853000 	str	r3, [r5]
}
 1005964:	e28dd008 	add	sp, sp, #8
 1005968:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100596c:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005970:	e3001105 	movw	r1, #261	; 0x105
 1005974:	e3400101 	movt	r0, #257	; 0x101
 1005978:	eb00089e 	bl	1007bf8 <Xil_Assert>
 100597c:	e3a03001 	mov	r3, #1
 1005980:	e1a00004 	mov	r0, r4
 1005984:	e5853000 	str	r3, [r5]
}
 1005988:	e28dd008 	add	sp, sp, #8
 100598c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005990:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005994:	e3a01f41 	mov	r1, #260	; 0x104
 1005998:	e3400101 	movt	r0, #257	; 0x101
 100599c:	eb000895 	bl	1007bf8 <Xil_Assert>
 10059a0:	e3093c78 	movw	r3, #40056	; 0x9c78
 10059a4:	e3a02001 	mov	r2, #1
 10059a8:	e3403102 	movt	r3, #258	; 0x102
 10059ac:	e1a00006 	mov	r0, r6
 10059b0:	e5832000 	str	r2, [r3]
 10059b4:	eaffffe1 	b	1005940 <XGpioPs_ReadPin+0x6c>

010059b8 <XGpioPs_WritePin>:
{
 10059b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10059bc:	e2505000 	subs	r5, r0, #0
{
 10059c0:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 10059c4:	0a000032 	beq	1005a94 <XGpioPs_WritePin+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10059c8:	e5953008 	ldr	r3, [r5, #8]
 10059cc:	e1a07002 	mov	r7, r2
 10059d0:	e3012111 	movw	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10059d4:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10059d8:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10059dc:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10059e0:	e1530002 	cmp	r3, r2
	Xil_AssertVoid(InstancePtr != NULL);
 10059e4:	e3a06000 	mov	r6, #0
 10059e8:	e5846000 	str	r6, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10059ec:	1a000020 	bne	1005a74 <XGpioPs_WritePin+0xbc>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10059f0:	e5953018 	ldr	r3, [r5, #24]
 10059f4:	e1530001 	cmp	r3, r1
 10059f8:	9a000015 	bls	1005a54 <XGpioPs_WritePin+0x9c>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10059fc:	e6ef0071 	uxtb	r0, r1
 1005a00:	e28d2007 	add	r2, sp, #7
 1005a04:	e28d1006 	add	r1, sp, #6
 1005a08:	ebffff62 	bl	1005798 <XGpioPs_GetBankPin>
	if (PinNumber > 15U) {
 1005a0c:	e5dd3007 	ldrb	r3, [sp, #7]
 1005a10:	e353000f 	cmp	r3, #15
		PinNumber -= (u8)16;
 1005a14:	82433010 	subhi	r3, r3, #16
		RegOffset = XGPIOPS_DATA_MSW_OFFSET;
 1005a18:	83a06004 	movhi	r6, #4
		PinNumber -= (u8)16;
 1005a1c:	86ef3073 	uxtbhi	r3, r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005a20:	e5952004 	ldr	r2, [r5, #4]
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1005a24:	e3a01000 	mov	r1, #0
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005a28:	e5dd0006 	ldrb	r0, [sp, #6]
	DataVar &= (u32)0x01;
 1005a2c:	e2077001 	and	r7, r7, #1
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1005a30:	e34f1fff 	movt	r1, #65535	; 0xffff
 1005a34:	e3a0c001 	mov	ip, #1
 1005a38:	e1811317 	orr	r1, r1, r7, lsl r3
 1005a3c:	e2833010 	add	r3, r3, #16
 1005a40:	e1c1331c 	bic	r3, r1, ip, lsl r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005a44:	e0822180 	add	r2, r2, r0, lsl #3
	*LocalAddr = Value;
 1005a48:	e7823006 	str	r3, [r2, r6]
}
 1005a4c:	e28dd00c 	add	sp, sp, #12
 1005a50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1005a54:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005a58:	e3001151 	movw	r1, #337	; 0x151
 1005a5c:	e3400101 	movt	r0, #257	; 0x101
 1005a60:	eb000864 	bl	1007bf8 <Xil_Assert>
 1005a64:	e3a03001 	mov	r3, #1
 1005a68:	e5843000 	str	r3, [r4]
}
 1005a6c:	e28dd00c 	add	sp, sp, #12
 1005a70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005a74:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005a78:	e3a01e15 	mov	r1, #336	; 0x150
 1005a7c:	e3400101 	movt	r0, #257	; 0x101
 1005a80:	eb00085c 	bl	1007bf8 <Xil_Assert>
 1005a84:	e3a03001 	mov	r3, #1
 1005a88:	e5843000 	str	r3, [r4]
}
 1005a8c:	e28dd00c 	add	sp, sp, #12
 1005a90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005a94:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005a98:	e300114f 	movw	r1, #335	; 0x14f
 1005a9c:	e3400101 	movt	r0, #257	; 0x101
 1005aa0:	eb000854 	bl	1007bf8 <Xil_Assert>
 1005aa4:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005aa8:	e3a02001 	mov	r2, #1
 1005aac:	e3403102 	movt	r3, #258	; 0x102
 1005ab0:	e5832000 	str	r2, [r3]
 1005ab4:	eaffffec 	b	1005a6c <XGpioPs_WritePin+0xb4>

01005ab8 <XGpioPs_SetDirectionPin>:
{
 1005ab8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005abc:	e2505000 	subs	r5, r0, #0
{
 1005ac0:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1005ac4:	0a00003b 	beq	1005bb8 <XGpioPs_SetDirectionPin+0x100>
 1005ac8:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005acc:	e5952008 	ldr	r2, [r5, #8]
 1005ad0:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005ad4:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ad8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005adc:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ae0:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005ae4:	e3a03000 	mov	r3, #0
 1005ae8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005aec:	1a000015 	bne	1005b48 <XGpioPs_SetDirectionPin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1005af0:	e5953018 	ldr	r3, [r5, #24]
 1005af4:	e1530001 	cmp	r3, r1
 1005af8:	9a000026 	bls	1005b98 <XGpioPs_SetDirectionPin+0xe0>
	Xil_AssertVoid(Direction <= (u32)1);
 1005afc:	e3560001 	cmp	r6, #1
 1005b00:	8a000018 	bhi	1005b68 <XGpioPs_SetDirectionPin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1005b04:	e6ef0071 	uxtb	r0, r1
 1005b08:	e28d2007 	add	r2, sp, #7
 1005b0c:	e28d1006 	add	r1, sp, #6
 1005b10:	ebffff20 	bl	1005798 <XGpioPs_GetBankPin>
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005b14:	e5dd2006 	ldrb	r2, [sp, #6]
 1005b18:	e3a03f81 	mov	r3, #516	; 0x204
 1005b1c:	e5951004 	ldr	r1, [r5, #4]
	if (Direction!=(u32)0) { /*  Output Direction */
 1005b20:	e3560000 	cmp	r6, #0
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005b24:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1005b28:	e7932001 	ldr	r2, [r3, r1]
	if (Direction!=(u32)0) { /*  Output Direction */
 1005b2c:	1a000015 	bne	1005b88 <XGpioPs_SetDirectionPin+0xd0>
		DirModeReg &= ~ ((u32)1 << (u32)PinNumber);
 1005b30:	e5dd0007 	ldrb	r0, [sp, #7]
 1005b34:	e3a0c001 	mov	ip, #1
 1005b38:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1005b3c:	e7832001 	str	r2, [r3, r1]
}
 1005b40:	e28dd008 	add	sp, sp, #8
 1005b44:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005b48:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005b4c:	e30011aa 	movw	r1, #426	; 0x1aa
 1005b50:	e3400101 	movt	r0, #257	; 0x101
 1005b54:	eb000827 	bl	1007bf8 <Xil_Assert>
 1005b58:	e3a03001 	mov	r3, #1
 1005b5c:	e5843000 	str	r3, [r4]
}
 1005b60:	e28dd008 	add	sp, sp, #8
 1005b64:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Direction <= (u32)1);
 1005b68:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005b6c:	e3a01f6b 	mov	r1, #428	; 0x1ac
 1005b70:	e3400101 	movt	r0, #257	; 0x101
 1005b74:	eb00081f 	bl	1007bf8 <Xil_Assert>
 1005b78:	e3a03001 	mov	r3, #1
 1005b7c:	e5843000 	str	r3, [r4]
}
 1005b80:	e28dd008 	add	sp, sp, #8
 1005b84:	e8bd8070 	pop	{r4, r5, r6, pc}
		DirModeReg |= ((u32)1 << (u32)PinNumber);
 1005b88:	e5dd0007 	ldrb	r0, [sp, #7]
 1005b8c:	e3a0c001 	mov	ip, #1
 1005b90:	e182201c 	orr	r2, r2, ip, lsl r0
 1005b94:	eaffffe8 	b	1005b3c <XGpioPs_SetDirectionPin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1005b98:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005b9c:	e30011ab 	movw	r1, #427	; 0x1ab
 1005ba0:	e3400101 	movt	r0, #257	; 0x101
 1005ba4:	eb000813 	bl	1007bf8 <Xil_Assert>
 1005ba8:	e3a03001 	mov	r3, #1
 1005bac:	e5843000 	str	r3, [r4]
}
 1005bb0:	e28dd008 	add	sp, sp, #8
 1005bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005bb8:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005bbc:	e30011a9 	movw	r1, #425	; 0x1a9
 1005bc0:	e3400101 	movt	r0, #257	; 0x101
 1005bc4:	eb00080b 	bl	1007bf8 <Xil_Assert>
 1005bc8:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005bcc:	e3a02001 	mov	r2, #1
 1005bd0:	e3403102 	movt	r3, #258	; 0x102
 1005bd4:	e5832000 	str	r2, [r3]
 1005bd8:	eaffffe0 	b	1005b60 <XGpioPs_SetDirectionPin+0xa8>

01005bdc <XGpioPs_GetDirectionPin>:
{
 1005bdc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005be0:	e2506000 	subs	r6, r0, #0
{
 1005be4:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005be8:	0a00002b 	beq	1005c9c <XGpioPs_GetDirectionPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005bec:	e5962008 	ldr	r2, [r6, #8]
 1005bf0:	e3013111 	movw	r3, #4369	; 0x1111
 1005bf4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005bf8:	e3095c78 	movw	r5, #40056	; 0x9c78
 1005bfc:	e3405102 	movt	r5, #258	; 0x102
 1005c00:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005c04:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005c08:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005c0c:	1a000019 	bne	1005c78 <XGpioPs_GetDirectionPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1005c10:	e5963018 	ldr	r3, [r6, #24]
 1005c14:	e1530001 	cmp	r3, r1
 1005c18:	9a00000d 	bls	1005c54 <XGpioPs_GetDirectionPin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1005c1c:	e6ef0071 	uxtb	r0, r1
 1005c20:	e28d2007 	add	r2, sp, #7
 1005c24:	e28d1006 	add	r1, sp, #6
 1005c28:	ebfffeda 	bl	1005798 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005c2c:	e5dd1006 	ldrb	r1, [sp, #6]
 1005c30:	e3a03f81 	mov	r3, #516	; 0x204
 1005c34:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1005c38:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005c3c:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1005c40:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1005c44:	e1a04430 	lsr	r4, r0, r4
 1005c48:	e2040001 	and	r0, r4, #1
}
 1005c4c:	e28dd008 	add	sp, sp, #8
 1005c50:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1005c54:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005c58:	e3a01f7f 	mov	r1, #508	; 0x1fc
 1005c5c:	e3400101 	movt	r0, #257	; 0x101
 1005c60:	eb0007e4 	bl	1007bf8 <Xil_Assert>
 1005c64:	e3a03001 	mov	r3, #1
 1005c68:	e1a00004 	mov	r0, r4
 1005c6c:	e5853000 	str	r3, [r5]
}
 1005c70:	e28dd008 	add	sp, sp, #8
 1005c74:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005c78:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005c7c:	e30011fb 	movw	r1, #507	; 0x1fb
 1005c80:	e3400101 	movt	r0, #257	; 0x101
 1005c84:	eb0007db 	bl	1007bf8 <Xil_Assert>
 1005c88:	e3a03001 	mov	r3, #1
 1005c8c:	e1a00004 	mov	r0, r4
 1005c90:	e5853000 	str	r3, [r5]
}
 1005c94:	e28dd008 	add	sp, sp, #8
 1005c98:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005c9c:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005ca0:	e30011fa 	movw	r1, #506	; 0x1fa
 1005ca4:	e3400101 	movt	r0, #257	; 0x101
 1005ca8:	eb0007d2 	bl	1007bf8 <Xil_Assert>
 1005cac:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005cb0:	e3a02001 	mov	r2, #1
 1005cb4:	e3403102 	movt	r3, #258	; 0x102
 1005cb8:	e1a00006 	mov	r0, r6
 1005cbc:	e5832000 	str	r2, [r3]
 1005cc0:	eaffffe1 	b	1005c4c <XGpioPs_GetDirectionPin+0x70>

01005cc4 <XGpioPs_SetOutputEnablePin>:
{
 1005cc4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005cc8:	e2505000 	subs	r5, r0, #0
{
 1005ccc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1005cd0:	0a00003b 	beq	1005dc4 <XGpioPs_SetOutputEnablePin+0x100>
 1005cd4:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005cd8:	e5952008 	ldr	r2, [r5, #8]
 1005cdc:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005ce0:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ce4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005ce8:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005cec:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005cf0:	e3a03000 	mov	r3, #0
 1005cf4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005cf8:	1a000015 	bne	1005d54 <XGpioPs_SetOutputEnablePin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1005cfc:	e5953018 	ldr	r3, [r5, #24]
 1005d00:	e1530001 	cmp	r3, r1
 1005d04:	9a000026 	bls	1005da4 <XGpioPs_SetOutputEnablePin+0xe0>
	Xil_AssertVoid(OpEnable <= (u32)1);
 1005d08:	e3560001 	cmp	r6, #1
 1005d0c:	8a000018 	bhi	1005d74 <XGpioPs_SetOutputEnablePin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1005d10:	e6ef0071 	uxtb	r0, r1
 1005d14:	e28d2007 	add	r2, sp, #7
 1005d18:	e28d1006 	add	r1, sp, #6
 1005d1c:	ebfffe9d 	bl	1005798 <XGpioPs_GetBankPin>
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005d20:	e5dd2006 	ldrb	r2, [sp, #6]
 1005d24:	e3a03f82 	mov	r3, #520	; 0x208
 1005d28:	e5951004 	ldr	r1, [r5, #4]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1005d2c:	e3560000 	cmp	r6, #0
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005d30:	e0833302 	add	r3, r3, r2, lsl #6
 1005d34:	e7932001 	ldr	r2, [r3, r1]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1005d38:	1a000015 	bne	1005d94 <XGpioPs_SetOutputEnablePin+0xd0>
		OpEnableReg &= ~ ((u32)1 << (u32)PinNumber);
 1005d3c:	e5dd0007 	ldrb	r0, [sp, #7]
 1005d40:	e3a0c001 	mov	ip, #1
 1005d44:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1005d48:	e7832001 	str	r2, [r3, r1]
}
 1005d4c:	e28dd008 	add	sp, sp, #8
 1005d50:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005d54:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005d58:	e3a01f92 	mov	r1, #584	; 0x248
 1005d5c:	e3400101 	movt	r0, #257	; 0x101
 1005d60:	eb0007a4 	bl	1007bf8 <Xil_Assert>
 1005d64:	e3a03001 	mov	r3, #1
 1005d68:	e5843000 	str	r3, [r4]
}
 1005d6c:	e28dd008 	add	sp, sp, #8
 1005d70:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(OpEnable <= (u32)1);
 1005d74:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005d78:	e300124a 	movw	r1, #586	; 0x24a
 1005d7c:	e3400101 	movt	r0, #257	; 0x101
 1005d80:	eb00079c 	bl	1007bf8 <Xil_Assert>
 1005d84:	e3a03001 	mov	r3, #1
 1005d88:	e5843000 	str	r3, [r4]
}
 1005d8c:	e28dd008 	add	sp, sp, #8
 1005d90:	e8bd8070 	pop	{r4, r5, r6, pc}
		OpEnableReg |= ((u32)1 << (u32)PinNumber);
 1005d94:	e5dd0007 	ldrb	r0, [sp, #7]
 1005d98:	e3a0c001 	mov	ip, #1
 1005d9c:	e182201c 	orr	r2, r2, ip, lsl r0
 1005da0:	eaffffe8 	b	1005d48 <XGpioPs_SetOutputEnablePin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1005da4:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005da8:	e3001249 	movw	r1, #585	; 0x249
 1005dac:	e3400101 	movt	r0, #257	; 0x101
 1005db0:	eb000790 	bl	1007bf8 <Xil_Assert>
 1005db4:	e3a03001 	mov	r3, #1
 1005db8:	e5843000 	str	r3, [r4]
}
 1005dbc:	e28dd008 	add	sp, sp, #8
 1005dc0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005dc4:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005dc8:	e3001247 	movw	r1, #583	; 0x247
 1005dcc:	e3400101 	movt	r0, #257	; 0x101
 1005dd0:	eb000788 	bl	1007bf8 <Xil_Assert>
 1005dd4:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005dd8:	e3a02001 	mov	r2, #1
 1005ddc:	e3403102 	movt	r3, #258	; 0x102
 1005de0:	e5832000 	str	r2, [r3]
 1005de4:	eaffffe0 	b	1005d6c <XGpioPs_SetOutputEnablePin+0xa8>

01005de8 <XGpioPs_GetOutputEnablePin>:
{
 1005de8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005dec:	e2506000 	subs	r6, r0, #0
{
 1005df0:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005df4:	0a00002b 	beq	1005ea8 <XGpioPs_GetOutputEnablePin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005df8:	e5962008 	ldr	r2, [r6, #8]
 1005dfc:	e3013111 	movw	r3, #4369	; 0x1111
 1005e00:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005e04:	e3095c78 	movw	r5, #40056	; 0x9c78
 1005e08:	e3405102 	movt	r5, #258	; 0x102
 1005e0c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e10:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005e14:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e18:	1a000019 	bne	1005e84 <XGpioPs_GetOutputEnablePin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1005e1c:	e5963018 	ldr	r3, [r6, #24]
 1005e20:	e1530001 	cmp	r3, r1
 1005e24:	9a00000d 	bls	1005e60 <XGpioPs_GetOutputEnablePin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1005e28:	e6ef0071 	uxtb	r0, r1
 1005e2c:	e28d2007 	add	r2, sp, #7
 1005e30:	e28d1006 	add	r1, sp, #6
 1005e34:	ebfffe57 	bl	1005798 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005e38:	e5dd1006 	ldrb	r1, [sp, #6]
 1005e3c:	e3a03f82 	mov	r3, #520	; 0x208
 1005e40:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1005e44:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005e48:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1005e4c:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1005e50:	e1a04430 	lsr	r4, r0, r4
 1005e54:	e2040001 	and	r0, r4, #1
}
 1005e58:	e28dd008 	add	sp, sp, #8
 1005e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1005e60:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005e64:	e300129b 	movw	r1, #667	; 0x29b
 1005e68:	e3400101 	movt	r0, #257	; 0x101
 1005e6c:	eb000761 	bl	1007bf8 <Xil_Assert>
 1005e70:	e3a03001 	mov	r3, #1
 1005e74:	e1a00004 	mov	r0, r4
 1005e78:	e5853000 	str	r3, [r5]
}
 1005e7c:	e28dd008 	add	sp, sp, #8
 1005e80:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e84:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005e88:	e300129a 	movw	r1, #666	; 0x29a
 1005e8c:	e3400101 	movt	r0, #257	; 0x101
 1005e90:	eb000758 	bl	1007bf8 <Xil_Assert>
 1005e94:	e3a03001 	mov	r3, #1
 1005e98:	e1a00004 	mov	r0, r4
 1005e9c:	e5853000 	str	r3, [r5]
}
 1005ea0:	e28dd008 	add	sp, sp, #8
 1005ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005ea8:	e3020e58 	movw	r0, #11864	; 0x2e58
 1005eac:	e3001299 	movw	r1, #665	; 0x299
 1005eb0:	e3400101 	movt	r0, #257	; 0x101
 1005eb4:	eb00074f 	bl	1007bf8 <Xil_Assert>
 1005eb8:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005ebc:	e3a02001 	mov	r2, #1
 1005ec0:	e3403102 	movt	r3, #258	; 0x102
 1005ec4:	e1a00006 	mov	r0, r6
 1005ec8:	e5832000 	str	r2, [r3]
 1005ecc:	eaffffe1 	b	1005e58 <XGpioPs_GetOutputEnablePin+0x70>

01005ed0 <XGpioPs_LookupConfig>:
{
	XGpioPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XGPIOPS_NUM_INSTANCES; Index++) {
		if (XGpioPs_ConfigTable[Index].DeviceId == DeviceId) {
 1005ed0:	e30330b0 	movw	r3, #12464	; 0x30b0
 1005ed4:	e3403101 	movt	r3, #257	; 0x101
 1005ed8:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XGpioPs_Config *)CfgPtr;
}
 1005edc:	e1520000 	cmp	r2, r0
 1005ee0:	01a00003 	moveq	r0, r3
 1005ee4:	13a00000 	movne	r0, #0
 1005ee8:	e12fff1e 	bx	lr

01005eec <XGpioPs_IntrEnable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1005eec:	e3500000 	cmp	r0, #0
{
 1005ef0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005ef4:	0a00001e 	beq	1005f74 <XGpioPs_IntrEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ef8:	e590c008 	ldr	ip, [r0, #8]
 1005efc:	e3013111 	movw	r3, #4369	; 0x1111
 1005f00:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005f04:	e3094c78 	movw	r4, #40056	; 0x9c78
 1005f08:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f0c:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005f10:	e3a03000 	mov	r3, #0
 1005f14:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f18:	1a000007 	bne	1005f3c <XGpioPs_IntrEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005f1c:	e5d0301c 	ldrb	r3, [r0, #28]
 1005f20:	e1530001 	cmp	r3, r1
 1005f24:	9a00000b 	bls	1005f58 <XGpioPs_IntrEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005f28:	e5900004 	ldr	r0, [r0, #4]
 1005f2c:	e3a03e21 	mov	r3, #528	; 0x210
 1005f30:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1005f34:	e7812000 	str	r2, [r1, r0]
 1005f38:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f3c:	e3020e64 	movw	r0, #11876	; 0x2e64
 1005f40:	e3a01063 	mov	r1, #99	; 0x63
 1005f44:	e3400101 	movt	r0, #257	; 0x101
 1005f48:	eb00072a 	bl	1007bf8 <Xil_Assert>
 1005f4c:	e3a03001 	mov	r3, #1
 1005f50:	e5843000 	str	r3, [r4]
 1005f54:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005f58:	e3020e64 	movw	r0, #11876	; 0x2e64
 1005f5c:	e3a01064 	mov	r1, #100	; 0x64
 1005f60:	e3400101 	movt	r0, #257	; 0x101
 1005f64:	eb000723 	bl	1007bf8 <Xil_Assert>
 1005f68:	e3a03001 	mov	r3, #1
 1005f6c:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, Mask);
}
 1005f70:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005f74:	e3020e64 	movw	r0, #11876	; 0x2e64
 1005f78:	e3a01062 	mov	r1, #98	; 0x62
 1005f7c:	e3400101 	movt	r0, #257	; 0x101
 1005f80:	eb00071c 	bl	1007bf8 <Xil_Assert>
 1005f84:	e3093c78 	movw	r3, #40056	; 0x9c78
 1005f88:	e3a02001 	mov	r2, #1
 1005f8c:	e3403102 	movt	r3, #258	; 0x102
 1005f90:	e5832000 	str	r2, [r3]
 1005f94:	e8bd8010 	pop	{r4, pc}

01005f98 <XGpioPs_IntrEnablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1005f98:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1005f9c:	e2505000 	subs	r5, r0, #0
{
 1005fa0:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1005fa4:	0a000029 	beq	1006050 <XGpioPs_IntrEnablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005fa8:	e5950008 	ldr	r0, [r5, #8]
 1005fac:	e3013111 	movw	r3, #4369	; 0x1111
 1005fb0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005fb4:	e3094c78 	movw	r4, #40056	; 0x9c78
 1005fb8:	e3404102 	movt	r4, #258	; 0x102
 1005fbc:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005fc0:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005fc4:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005fc8:	1a000018 	bne	1006030 <XGpioPs_IntrEnablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1005fcc:	e5953018 	ldr	r3, [r5, #24]
 1005fd0:	e1530001 	cmp	r3, r1
 1005fd4:	9a00000d 	bls	1006010 <XGpioPs_IntrEnablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1005fd8:	e6ef0071 	uxtb	r0, r1
 1005fdc:	e28d2007 	add	r2, sp, #7
 1005fe0:	e28d1006 	add	r1, sp, #6
 1005fe4:	ebfffdeb 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1005fe8:	e5ddc007 	ldrb	ip, [sp, #7]
 1005fec:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005ff0:	e5dd0006 	ldrb	r0, [sp, #6]
 1005ff4:	e3a03e21 	mov	r3, #528	; 0x210
 1005ff8:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1005ffc:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006000:	e0833300 	add	r3, r3, r0, lsl #6
 1006004:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, IntrReg);
}
 1006008:	e28dd00c 	add	sp, sp, #12
 100600c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006010:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006014:	e3a01088 	mov	r1, #136	; 0x88
 1006018:	e3400101 	movt	r0, #257	; 0x101
 100601c:	eb0006f5 	bl	1007bf8 <Xil_Assert>
 1006020:	e3a03001 	mov	r3, #1
 1006024:	e5843000 	str	r3, [r4]
}
 1006028:	e28dd00c 	add	sp, sp, #12
 100602c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006030:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006034:	e3a01087 	mov	r1, #135	; 0x87
 1006038:	e3400101 	movt	r0, #257	; 0x101
 100603c:	eb0006ed 	bl	1007bf8 <Xil_Assert>
 1006040:	e3a03001 	mov	r3, #1
 1006044:	e5843000 	str	r3, [r4]
}
 1006048:	e28dd00c 	add	sp, sp, #12
 100604c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006050:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006054:	e3a01086 	mov	r1, #134	; 0x86
 1006058:	e3400101 	movt	r0, #257	; 0x101
 100605c:	eb0006e5 	bl	1007bf8 <Xil_Assert>
 1006060:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006064:	e3a02001 	mov	r2, #1
 1006068:	e3403102 	movt	r3, #258	; 0x102
 100606c:	e5832000 	str	r2, [r3]
 1006070:	eaffffe4 	b	1006008 <XGpioPs_IntrEnablePin+0x70>

01006074 <XGpioPs_IntrDisable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006074:	e3500000 	cmp	r0, #0
{
 1006078:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100607c:	0a00001e 	beq	10060fc <XGpioPs_IntrDisable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006080:	e590c008 	ldr	ip, [r0, #8]
 1006084:	e3013111 	movw	r3, #4369	; 0x1111
 1006088:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100608c:	e3094c78 	movw	r4, #40056	; 0x9c78
 1006090:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006094:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006098:	e3a03000 	mov	r3, #0
 100609c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10060a0:	1a000007 	bne	10060c4 <XGpioPs_IntrDisable+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10060a4:	e5d0301c 	ldrb	r3, [r0, #28]
 10060a8:	e1530001 	cmp	r3, r1
 10060ac:	9a00000b 	bls	10060e0 <XGpioPs_IntrDisable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10060b0:	e5900004 	ldr	r0, [r0, #4]
 10060b4:	e3a03f85 	mov	r3, #532	; 0x214
 10060b8:	e0831301 	add	r1, r3, r1, lsl #6
 10060bc:	e7812000 	str	r2, [r1, r0]
 10060c0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10060c4:	e3020e64 	movw	r0, #11876	; 0x2e64
 10060c8:	e3a010ac 	mov	r1, #172	; 0xac
 10060cc:	e3400101 	movt	r0, #257	; 0x101
 10060d0:	eb0006c8 	bl	1007bf8 <Xil_Assert>
 10060d4:	e3a03001 	mov	r3, #1
 10060d8:	e5843000 	str	r3, [r4]
 10060dc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10060e0:	e3020e64 	movw	r0, #11876	; 0x2e64
 10060e4:	e3a010ad 	mov	r1, #173	; 0xad
 10060e8:	e3400101 	movt	r0, #257	; 0x101
 10060ec:	eb0006c1 	bl	1007bf8 <Xil_Assert>
 10060f0:	e3a03001 	mov	r3, #1
 10060f4:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, Mask);
}
 10060f8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10060fc:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006100:	e3a010ab 	mov	r1, #171	; 0xab
 1006104:	e3400101 	movt	r0, #257	; 0x101
 1006108:	eb0006ba 	bl	1007bf8 <Xil_Assert>
 100610c:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006110:	e3a02001 	mov	r2, #1
 1006114:	e3403102 	movt	r3, #258	; 0x102
 1006118:	e5832000 	str	r2, [r3]
 100611c:	e8bd8010 	pop	{r4, pc}

01006120 <XGpioPs_IntrDisablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006120:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1006124:	e2505000 	subs	r5, r0, #0
{
 1006128:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 100612c:	0a000029 	beq	10061d8 <XGpioPs_IntrDisablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006130:	e5950008 	ldr	r0, [r5, #8]
 1006134:	e3013111 	movw	r3, #4369	; 0x1111
 1006138:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100613c:	e3094c78 	movw	r4, #40056	; 0x9c78
 1006140:	e3404102 	movt	r4, #258	; 0x102
 1006144:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006148:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 100614c:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006150:	1a000018 	bne	10061b8 <XGpioPs_IntrDisablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006154:	e5953018 	ldr	r3, [r5, #24]
 1006158:	e1530001 	cmp	r3, r1
 100615c:	9a00000d 	bls	1006198 <XGpioPs_IntrDisablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006160:	e6ef0071 	uxtb	r0, r1
 1006164:	e28d2007 	add	r2, sp, #7
 1006168:	e28d1006 	add	r1, sp, #6
 100616c:	ebfffd89 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1006170:	e5ddc007 	ldrb	ip, [sp, #7]
 1006174:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006178:	e5dd0006 	ldrb	r0, [sp, #6]
 100617c:	e3a03f85 	mov	r3, #532	; 0x214
 1006180:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1006184:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006188:	e0833300 	add	r3, r3, r0, lsl #6
 100618c:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, IntrReg);
}
 1006190:	e28dd00c 	add	sp, sp, #12
 1006194:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006198:	e3020e64 	movw	r0, #11876	; 0x2e64
 100619c:	e3a010d1 	mov	r1, #209	; 0xd1
 10061a0:	e3400101 	movt	r0, #257	; 0x101
 10061a4:	eb000693 	bl	1007bf8 <Xil_Assert>
 10061a8:	e3a03001 	mov	r3, #1
 10061ac:	e5843000 	str	r3, [r4]
}
 10061b0:	e28dd00c 	add	sp, sp, #12
 10061b4:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10061b8:	e3020e64 	movw	r0, #11876	; 0x2e64
 10061bc:	e3a010d0 	mov	r1, #208	; 0xd0
 10061c0:	e3400101 	movt	r0, #257	; 0x101
 10061c4:	eb00068b 	bl	1007bf8 <Xil_Assert>
 10061c8:	e3a03001 	mov	r3, #1
 10061cc:	e5843000 	str	r3, [r4]
}
 10061d0:	e28dd00c 	add	sp, sp, #12
 10061d4:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10061d8:	e3020e64 	movw	r0, #11876	; 0x2e64
 10061dc:	e3a010cf 	mov	r1, #207	; 0xcf
 10061e0:	e3400101 	movt	r0, #257	; 0x101
 10061e4:	eb000683 	bl	1007bf8 <Xil_Assert>
 10061e8:	e3093c78 	movw	r3, #40056	; 0x9c78
 10061ec:	e3a02001 	mov	r2, #1
 10061f0:	e3403102 	movt	r3, #258	; 0x102
 10061f4:	e5832000 	str	r2, [r3]
 10061f8:	eaffffe4 	b	1006190 <XGpioPs_IntrDisablePin+0x70>

010061fc <XGpioPs_IntrGetEnabled>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabled(const XGpioPs *InstancePtr, u8 Bank)
{
 10061fc:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrMask;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1006200:	e2506000 	subs	r6, r0, #0
 1006204:	0a000021 	beq	1006290 <XGpioPs_IntrGetEnabled+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006208:	e5962008 	ldr	r2, [r6, #8]
 100620c:	e3013111 	movw	r3, #4369	; 0x1111
 1006210:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006214:	e3095c78 	movw	r5, #40056	; 0x9c78
 1006218:	e3405102 	movt	r5, #258	; 0x102
 100621c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006220:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006224:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006228:	1a000008 	bne	1006250 <XGpioPs_IntrGetEnabled+0x54>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 100622c:	e5d6301c 	ldrb	r3, [r6, #28]
 1006230:	e1530001 	cmp	r3, r1
 1006234:	9a00000d 	bls	1006270 <XGpioPs_IntrGetEnabled+0x74>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	IntrMask = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006238:	e5962004 	ldr	r2, [r6, #4]
 100623c:	e3a03f83 	mov	r3, #524	; 0x20c
 1006240:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1006244:	e7914002 	ldr	r4, [r1, r2]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);
	return (~IntrMask);
 1006248:	e1e00004 	mvn	r0, r4
 100624c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006250:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006254:	e3a010f6 	mov	r1, #246	; 0xf6
 1006258:	e3400101 	movt	r0, #257	; 0x101
 100625c:	eb000665 	bl	1007bf8 <Xil_Assert>
 1006260:	e3a03001 	mov	r3, #1
 1006264:	e1a00004 	mov	r0, r4
 1006268:	e5853000 	str	r3, [r5]
 100626c:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006270:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006274:	e3a010f7 	mov	r1, #247	; 0xf7
 1006278:	e3400101 	movt	r0, #257	; 0x101
 100627c:	eb00065d 	bl	1007bf8 <Xil_Assert>
 1006280:	e3a03001 	mov	r3, #1
 1006284:	e1a00004 	mov	r0, r4
 1006288:	e5853000 	str	r3, [r5]
}
 100628c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006290:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006294:	e3a010f5 	mov	r1, #245	; 0xf5
 1006298:	e3400101 	movt	r0, #257	; 0x101
 100629c:	eb000655 	bl	1007bf8 <Xil_Assert>
 10062a0:	e3093c78 	movw	r3, #40056	; 0x9c78
 10062a4:	e3a02001 	mov	r2, #1
 10062a8:	e3403102 	movt	r3, #258	; 0x102
 10062ac:	e1a00006 	mov	r0, r6
 10062b0:	e5832000 	str	r2, [r3]
 10062b4:	e8bd8070 	pop	{r4, r5, r6, pc}

010062b8 <XGpioPs_IntrGetEnabledPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabledPin(const XGpioPs *InstancePtr, u32 Pin)
{
 10062b8:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10062bc:	e2506000 	subs	r6, r0, #0
{
 10062c0:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10062c4:	0a00002b 	beq	1006378 <XGpioPs_IntrGetEnabledPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062c8:	e5962008 	ldr	r2, [r6, #8]
 10062cc:	e3013111 	movw	r3, #4369	; 0x1111
 10062d0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10062d4:	e3095c78 	movw	r5, #40056	; 0x9c78
 10062d8:	e3405102 	movt	r5, #258	; 0x102
 10062dc:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062e0:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10062e4:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062e8:	1a000019 	bne	1006354 <XGpioPs_IntrGetEnabledPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10062ec:	e5963018 	ldr	r3, [r6, #24]
 10062f0:	e1530001 	cmp	r3, r1
 10062f4:	9a00000d 	bls	1006330 <XGpioPs_IntrGetEnabledPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10062f8:	e6ef0071 	uxtb	r0, r1
 10062fc:	e28d2007 	add	r2, sp, #7
 1006300:	e28d1006 	add	r1, sp, #6
 1006304:	ebfffd23 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006308:	e5dd1006 	ldrb	r1, [sp, #6]
 100630c:	e3a03f83 	mov	r3, #524	; 0x20c
 1006310:	e5962004 	ldr	r2, [r6, #4]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1006314:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006318:	e0833301 	add	r3, r3, r1, lsl #6
 100631c:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1006320:	e1e04430 	mvn	r4, r0, lsr r4
 1006324:	e2040001 	and	r0, r4, #1
}
 1006328:	e28dd008 	add	sp, sp, #8
 100632c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006330:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006334:	e300111f 	movw	r1, #287	; 0x11f
 1006338:	e3400101 	movt	r0, #257	; 0x101
 100633c:	eb00062d 	bl	1007bf8 <Xil_Assert>
 1006340:	e3a03001 	mov	r3, #1
 1006344:	e1a00004 	mov	r0, r4
 1006348:	e5853000 	str	r3, [r5]
}
 100634c:	e28dd008 	add	sp, sp, #8
 1006350:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006354:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006358:	e300111e 	movw	r1, #286	; 0x11e
 100635c:	e3400101 	movt	r0, #257	; 0x101
 1006360:	eb000624 	bl	1007bf8 <Xil_Assert>
 1006364:	e3a03001 	mov	r3, #1
 1006368:	e1a00004 	mov	r0, r4
 100636c:	e5853000 	str	r3, [r5]
}
 1006370:	e28dd008 	add	sp, sp, #8
 1006374:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006378:	e3020e64 	movw	r0, #11876	; 0x2e64
 100637c:	e300111d 	movw	r1, #285	; 0x11d
 1006380:	e3400101 	movt	r0, #257	; 0x101
 1006384:	eb00061b 	bl	1007bf8 <Xil_Assert>
 1006388:	e3093c78 	movw	r3, #40056	; 0x9c78
 100638c:	e3a02001 	mov	r2, #1
 1006390:	e3403102 	movt	r3, #258	; 0x102
 1006394:	e1a00006 	mov	r0, r6
 1006398:	e5832000 	str	r2, [r3]
 100639c:	eaffffe1 	b	1006328 <XGpioPs_IntrGetEnabledPin+0x70>

010063a0 <XGpioPs_IntrGetStatus>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatus(const XGpioPs *InstancePtr, u8 Bank)
{
 10063a0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10063a4:	e2506000 	subs	r6, r0, #0
 10063a8:	0a000020 	beq	1006430 <XGpioPs_IntrGetStatus+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063ac:	e5962008 	ldr	r2, [r6, #8]
 10063b0:	e3013111 	movw	r3, #4369	; 0x1111
 10063b4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10063b8:	e3095c78 	movw	r5, #40056	; 0x9c78
 10063bc:	e3405102 	movt	r5, #258	; 0x102
 10063c0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063c4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10063c8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063cc:	1a000007 	bne	10063f0 <XGpioPs_IntrGetStatus+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10063d0:	e5d6301c 	ldrb	r3, [r6, #28]
 10063d4:	e1530001 	cmp	r3, r1
 10063d8:	9a00000c 	bls	1006410 <XGpioPs_IntrGetStatus+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10063dc:	e5962004 	ldr	r2, [r6, #4]
 10063e0:	e3a03f86 	mov	r3, #536	; 0x218
 10063e4:	e0831301 	add	r1, r3, r1, lsl #6
 10063e8:	e7910002 	ldr	r0, [r1, r2]
 10063ec:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063f0:	e3020e64 	movw	r0, #11876	; 0x2e64
 10063f4:	e3a01d05 	mov	r1, #320	; 0x140
 10063f8:	e3400101 	movt	r0, #257	; 0x101
 10063fc:	eb0005fd 	bl	1007bf8 <Xil_Assert>
 1006400:	e3a03001 	mov	r3, #1
 1006404:	e1a00004 	mov	r0, r4
 1006408:	e5853000 	str	r3, [r5]
 100640c:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006410:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006414:	e3001141 	movw	r1, #321	; 0x141
 1006418:	e3400101 	movt	r0, #257	; 0x101
 100641c:	eb0005f5 	bl	1007bf8 <Xil_Assert>
 1006420:	e3a03001 	mov	r3, #1
 1006424:	e1a00004 	mov	r0, r4
 1006428:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_INTSTS_OFFSET);
}
 100642c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006430:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006434:	e300113f 	movw	r1, #319	; 0x13f
 1006438:	e3400101 	movt	r0, #257	; 0x101
 100643c:	eb0005ed 	bl	1007bf8 <Xil_Assert>
 1006440:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006444:	e3a02001 	mov	r2, #1
 1006448:	e3403102 	movt	r3, #258	; 0x102
 100644c:	e1a00006 	mov	r0, r6
 1006450:	e5832000 	str	r2, [r3]
 1006454:	e8bd8070 	pop	{r4, r5, r6, pc}

01006458 <XGpioPs_IntrGetStatusPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatusPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006458:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 100645c:	e2506000 	subs	r6, r0, #0
{
 1006460:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006464:	0a00002b 	beq	1006518 <XGpioPs_IntrGetStatusPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006468:	e5962008 	ldr	r2, [r6, #8]
 100646c:	e3013111 	movw	r3, #4369	; 0x1111
 1006470:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006474:	e3095c78 	movw	r5, #40056	; 0x9c78
 1006478:	e3405102 	movt	r5, #258	; 0x102
 100647c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006480:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006484:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006488:	1a000019 	bne	10064f4 <XGpioPs_IntrGetStatusPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 100648c:	e5963018 	ldr	r3, [r6, #24]
 1006490:	e1530001 	cmp	r3, r1
 1006494:	9a00000d 	bls	10064d0 <XGpioPs_IntrGetStatusPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006498:	e6ef0071 	uxtb	r0, r1
 100649c:	e28d2007 	add	r2, sp, #7
 10064a0:	e28d1006 	add	r1, sp, #6
 10064a4:	ebfffcbb 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10064a8:	e5dd1006 	ldrb	r1, [sp, #6]
 10064ac:	e3a03f86 	mov	r3, #536	; 0x218
 10064b0:	e5962004 	ldr	r2, [r6, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 10064b4:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10064b8:	e0833301 	add	r3, r3, r1, lsl #6
 10064bc:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 10064c0:	e1a04430 	lsr	r4, r0, r4
 10064c4:	e2040001 	and	r0, r4, #1
}
 10064c8:	e28dd008 	add	sp, sp, #8
 10064cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10064d0:	e3020e64 	movw	r0, #11876	; 0x2e64
 10064d4:	e3a01f5a 	mov	r1, #360	; 0x168
 10064d8:	e3400101 	movt	r0, #257	; 0x101
 10064dc:	eb0005c5 	bl	1007bf8 <Xil_Assert>
 10064e0:	e3a03001 	mov	r3, #1
 10064e4:	e1a00004 	mov	r0, r4
 10064e8:	e5853000 	str	r3, [r5]
}
 10064ec:	e28dd008 	add	sp, sp, #8
 10064f0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10064f4:	e3020e64 	movw	r0, #11876	; 0x2e64
 10064f8:	e3001167 	movw	r1, #359	; 0x167
 10064fc:	e3400101 	movt	r0, #257	; 0x101
 1006500:	eb0005bc 	bl	1007bf8 <Xil_Assert>
 1006504:	e3a03001 	mov	r3, #1
 1006508:	e1a00004 	mov	r0, r4
 100650c:	e5853000 	str	r3, [r5]
}
 1006510:	e28dd008 	add	sp, sp, #8
 1006514:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006518:	e3020e64 	movw	r0, #11876	; 0x2e64
 100651c:	e3001166 	movw	r1, #358	; 0x166
 1006520:	e3400101 	movt	r0, #257	; 0x101
 1006524:	eb0005b3 	bl	1007bf8 <Xil_Assert>
 1006528:	e3093c78 	movw	r3, #40056	; 0x9c78
 100652c:	e3a02001 	mov	r2, #1
 1006530:	e3403102 	movt	r3, #258	; 0x102
 1006534:	e1a00006 	mov	r0, r6
 1006538:	e5832000 	str	r2, [r3]
 100653c:	eaffffe1 	b	10064c8 <XGpioPs_IntrGetStatusPin+0x70>

01006540 <XGpioPs_IntrClear>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClear(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006540:	e3500000 	cmp	r0, #0
{
 1006544:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006548:	0a00001e 	beq	10065c8 <XGpioPs_IntrClear+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100654c:	e590c008 	ldr	ip, [r0, #8]
 1006550:	e3013111 	movw	r3, #4369	; 0x1111
 1006554:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006558:	e3094c78 	movw	r4, #40056	; 0x9c78
 100655c:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006560:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006564:	e3a03000 	mov	r3, #0
 1006568:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100656c:	1a000007 	bne	1006590 <XGpioPs_IntrClear+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006570:	e5d0301c 	ldrb	r3, [r0, #28]
 1006574:	e1530001 	cmp	r3, r1
 1006578:	9a00000b 	bls	10065ac <XGpioPs_IntrClear+0x6c>
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	/* Clear the currently pending interrupts. */
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100657c:	e5900004 	ldr	r0, [r0, #4]
 1006580:	e3a03f86 	mov	r3, #536	; 0x218
 1006584:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1006588:	e7812000 	str	r2, [r1, r0]
 100658c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006590:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006594:	e3a01f63 	mov	r1, #396	; 0x18c
 1006598:	e3400101 	movt	r0, #257	; 0x101
 100659c:	eb000595 	bl	1007bf8 <Xil_Assert>
 10065a0:	e3a03001 	mov	r3, #1
 10065a4:	e5843000 	str	r3, [r4]
 10065a8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10065ac:	e3020e64 	movw	r0, #11876	; 0x2e64
 10065b0:	e300118d 	movw	r1, #397	; 0x18d
 10065b4:	e3400101 	movt	r0, #257	; 0x101
 10065b8:	eb00058e 	bl	1007bf8 <Xil_Assert>
 10065bc:	e3a03001 	mov	r3, #1
 10065c0:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, Mask);
}
 10065c4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10065c8:	e3020e64 	movw	r0, #11876	; 0x2e64
 10065cc:	e300118b 	movw	r1, #395	; 0x18b
 10065d0:	e3400101 	movt	r0, #257	; 0x101
 10065d4:	eb000587 	bl	1007bf8 <Xil_Assert>
 10065d8:	e3093c78 	movw	r3, #40056	; 0x9c78
 10065dc:	e3a02001 	mov	r2, #1
 10065e0:	e3403102 	movt	r3, #258	; 0x102
 10065e4:	e5832000 	str	r2, [r3]
 10065e8:	e8bd8010 	pop	{r4, pc}

010065ec <XGpioPs_IntrClearPin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClearPin(const XGpioPs *InstancePtr, u32 Pin)
{
 10065ec:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 10065f0:	e2505000 	subs	r5, r0, #0
{
 10065f4:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 10065f8:	0a00002a 	beq	10066a8 <XGpioPs_IntrClearPin+0xbc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10065fc:	e5950008 	ldr	r0, [r5, #8]
 1006600:	e3013111 	movw	r3, #4369	; 0x1111
 1006604:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006608:	e3094c78 	movw	r4, #40056	; 0x9c78
 100660c:	e3404102 	movt	r4, #258	; 0x102
 1006610:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006614:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006618:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100661c:	1a000019 	bne	1006688 <XGpioPs_IntrClearPin+0x9c>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006620:	e5953018 	ldr	r3, [r5, #24]
 1006624:	e1530001 	cmp	r3, r1
 1006628:	9a00000e 	bls	1006668 <XGpioPs_IntrClearPin+0x7c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 100662c:	e6ef0071 	uxtb	r0, r1
 1006630:	e28d2007 	add	r2, sp, #7
 1006634:	e28d1006 	add	r1, sp, #6
 1006638:	ebfffc56 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	/* Clear the specified pending interrupts. */
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100663c:	e5dd2006 	ldrb	r2, [sp, #6]
 1006640:	e3a03f86 	mov	r3, #536	; 0x218
 1006644:	e5951004 	ldr	r1, [r5, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	IntrReg &= ((u32)1 << PinNumber);
 1006648:	e3a0c001 	mov	ip, #1
 100664c:	e5dd0007 	ldrb	r0, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006650:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1006654:	e7932001 	ldr	r2, [r3, r1]
	IntrReg &= ((u32)1 << PinNumber);
 1006658:	e002201c 	and	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 100665c:	e7832001 	str	r2, [r3, r1]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, IntrReg);
}
 1006660:	e28dd00c 	add	sp, sp, #12
 1006664:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006668:	e3020e64 	movw	r0, #11876	; 0x2e64
 100666c:	e30011b1 	movw	r1, #433	; 0x1b1
 1006670:	e3400101 	movt	r0, #257	; 0x101
 1006674:	eb00055f 	bl	1007bf8 <Xil_Assert>
 1006678:	e3a03001 	mov	r3, #1
 100667c:	e5843000 	str	r3, [r4]
}
 1006680:	e28dd00c 	add	sp, sp, #12
 1006684:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006688:	e3020e64 	movw	r0, #11876	; 0x2e64
 100668c:	e3a01e1b 	mov	r1, #432	; 0x1b0
 1006690:	e3400101 	movt	r0, #257	; 0x101
 1006694:	eb000557 	bl	1007bf8 <Xil_Assert>
 1006698:	e3a03001 	mov	r3, #1
 100669c:	e5843000 	str	r3, [r4]
}
 10066a0:	e28dd00c 	add	sp, sp, #12
 10066a4:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10066a8:	e3020e64 	movw	r0, #11876	; 0x2e64
 10066ac:	e30011af 	movw	r1, #431	; 0x1af
 10066b0:	e3400101 	movt	r0, #257	; 0x101
 10066b4:	eb00054f 	bl	1007bf8 <Xil_Assert>
 10066b8:	e3093c78 	movw	r3, #40056	; 0x9c78
 10066bc:	e3a02001 	mov	r2, #1
 10066c0:	e3403102 	movt	r3, #258	; 0x102
 10066c4:	e5832000 	str	r2, [r3]
 10066c8:	eaffffe4 	b	1006660 <XGpioPs_IntrClearPin+0x74>

010066cc <XGpioPs_SetIntrType>:
*
*****************************************************************************/
void XGpioPs_SetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 IntrType,
			  u32 IntrPolarity, u32 IntrOnAny)
{
	Xil_AssertVoid(InstancePtr != NULL);
 10066cc:	e3500000 	cmp	r0, #0
{
 10066d0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10066d4:	0a000025 	beq	1006770 <XGpioPs_SetIntrType+0xa4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10066d8:	e590e008 	ldr	lr, [r0, #8]
 10066dc:	e301c111 	movw	ip, #4369	; 0x1111
 10066e0:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10066e4:	e3094c78 	movw	r4, #40056	; 0x9c78
 10066e8:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10066ec:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 10066f0:	e3a0c000 	mov	ip, #0
 10066f4:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10066f8:	1a00000e 	bne	1006738 <XGpioPs_SetIntrType+0x6c>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10066fc:	e5d0c01c 	ldrb	ip, [r0, #28]
 1006700:	e15c0001 	cmp	ip, r1
 1006704:	9a000012 	bls	1006754 <XGpioPs_SetIntrType+0x88>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006708:	e1a01301 	lsl	r1, r1, #6
 100670c:	e590e004 	ldr	lr, [r0, #4]
 1006710:	e2814f87 	add	r4, r1, #540	; 0x21c
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTTYPE_OFFSET, IntrType);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006714:	e281ce22 	add	ip, r1, #544	; 0x220
 1006718:	e784200e 	str	r2, [r4, lr]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTPOL_OFFSET, IntrPolarity);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100671c:	e2811f89 	add	r1, r1, #548	; 0x224
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006720:	e5902004 	ldr	r2, [r0, #4]
 1006724:	e78c3002 	str	r3, [ip, r2]
 1006728:	e59d2008 	ldr	r2, [sp, #8]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100672c:	e5903004 	ldr	r3, [r0, #4]
 1006730:	e7812003 	str	r2, [r1, r3]
 1006734:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006738:	e3020e64 	movw	r0, #11876	; 0x2e64
 100673c:	e30011e5 	movw	r1, #485	; 0x1e5
 1006740:	e3400101 	movt	r0, #257	; 0x101
 1006744:	eb00052b 	bl	1007bf8 <Xil_Assert>
 1006748:	e3a03001 	mov	r3, #1
 100674c:	e5843000 	str	r3, [r4]
 1006750:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006754:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006758:	e30011e6 	movw	r1, #486	; 0x1e6
 100675c:	e3400101 	movt	r0, #257	; 0x101
 1006760:	eb000524 	bl	1007bf8 <Xil_Assert>
 1006764:	e3a03001 	mov	r3, #1
 1006768:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAny);
}
 100676c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006770:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006774:	e3a01f79 	mov	r1, #484	; 0x1e4
 1006778:	e3400101 	movt	r0, #257	; 0x101
 100677c:	eb00051d 	bl	1007bf8 <Xil_Assert>
 1006780:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006784:	e3a02001 	mov	r2, #1
 1006788:	e3403102 	movt	r3, #258	; 0x102
 100678c:	e5832000 	str	r2, [r3]
 1006790:	e8bd8010 	pop	{r4, pc}

01006794 <XGpioPs_GetIntrType>:
*****************************************************************************/
void XGpioPs_GetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 *IntrType,
			  u32 *IntrPolarity, u32 *IntrOnAny)

{
	Xil_AssertVoid(InstancePtr != NULL);
 1006794:	e3500000 	cmp	r0, #0
{
 1006798:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100679c:	0a000028 	beq	1006844 <XGpioPs_GetIntrType+0xb0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10067a0:	e590e008 	ldr	lr, [r0, #8]
 10067a4:	e301c111 	movw	ip, #4369	; 0x1111
 10067a8:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10067ac:	e3094c78 	movw	r4, #40056	; 0x9c78
 10067b0:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10067b4:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 10067b8:	e3a0c000 	mov	ip, #0
 10067bc:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10067c0:	1a000011 	bne	100680c <XGpioPs_GetIntrType+0x78>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10067c4:	e5d0c01c 	ldrb	ip, [r0, #28]
 10067c8:	e15c0001 	cmp	ip, r1
 10067cc:	9a000015 	bls	1006828 <XGpioPs_GetIntrType+0x94>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10067d0:	e590e004 	ldr	lr, [r0, #4]
 10067d4:	e1a01301 	lsl	r1, r1, #6
 10067d8:	e2814f87 	add	r4, r1, #540	; 0x21c
				     ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				     XGPIOPS_INTTYPE_OFFSET);

	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10067dc:	e281ce22 	add	ip, r1, #544	; 0x220
	return *(volatile u32 *) Addr;
 10067e0:	e794e00e 	ldr	lr, [r4, lr]
					 ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					 XGPIOPS_INTPOL_OFFSET);

	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10067e4:	e2811f89 	add	r1, r1, #548	; 0x224
	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10067e8:	e582e000 	str	lr, [r2]
	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10067ec:	e5902004 	ldr	r2, [r0, #4]
 10067f0:	e79c2002 	ldr	r2, [ip, r2]
 10067f4:	e5832000 	str	r2, [r3]
	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10067f8:	e5903004 	ldr	r3, [r0, #4]
 10067fc:	e59d2008 	ldr	r2, [sp, #8]
 1006800:	e7913003 	ldr	r3, [r1, r3]
 1006804:	e5823000 	str	r3, [r2]
 1006808:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100680c:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006810:	e3001219 	movw	r1, #537	; 0x219
 1006814:	e3400101 	movt	r0, #257	; 0x101
 1006818:	eb0004f6 	bl	1007bf8 <Xil_Assert>
 100681c:	e3a03001 	mov	r3, #1
 1006820:	e5843000 	str	r3, [r4]
 1006824:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006828:	e3020e64 	movw	r0, #11876	; 0x2e64
 100682c:	e300121a 	movw	r1, #538	; 0x21a
 1006830:	e3400101 	movt	r0, #257	; 0x101
 1006834:	eb0004ef 	bl	1007bf8 <Xil_Assert>
 1006838:	e3a03001 	mov	r3, #1
 100683c:	e5843000 	str	r3, [r4]
				      ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				      XGPIOPS_INTANY_OFFSET);
}
 1006840:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006844:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006848:	e3a01f86 	mov	r1, #536	; 0x218
 100684c:	e3400101 	movt	r0, #257	; 0x101
 1006850:	eb0004e8 	bl	1007bf8 <Xil_Assert>
 1006854:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006858:	e3a02001 	mov	r2, #1
 100685c:	e3403102 	movt	r3, #258	; 0x102
 1006860:	e5832000 	str	r2, [r3]
 1006864:	e8bd8010 	pop	{r4, pc}

01006868 <XGpioPs_SetIntrTypePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_SetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin, u8 IrqType)
{
 1006868:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrPolReg;
	u32 IntrOnAnyReg;
	u8 Bank;
	u8 PinNumber;

	Xil_AssertVoid(InstancePtr != NULL);
 100686c:	e2505000 	subs	r5, r0, #0
{
 1006870:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1006874:	0a000055 	beq	10069d0 <XGpioPs_SetIntrTypePin+0x168>
 1006878:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100687c:	e5952008 	ldr	r2, [r5, #8]
 1006880:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006884:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006888:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100688c:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006890:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006894:	e3a03000 	mov	r3, #0
 1006898:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100689c:	1a000019 	bne	1006908 <XGpioPs_SetIntrTypePin+0xa0>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10068a0:	e5953018 	ldr	r3, [r5, #24]
 10068a4:	e1530001 	cmp	r3, r1
 10068a8:	9a00001e 	bls	1006928 <XGpioPs_SetIntrTypePin+0xc0>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 10068ac:	e3560004 	cmp	r6, #4
 10068b0:	8a00003e 	bhi	10069b0 <XGpioPs_SetIntrTypePin+0x148>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10068b4:	e6ef0071 	uxtb	r0, r1
 10068b8:	e28d2007 	add	r2, sp, #7
 10068bc:	e28d1006 	add	r1, sp, #6
 10068c0:	ebfffbb4 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10068c4:	e5dd3006 	ldrb	r3, [sp, #6]

	IntrOnAnyReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
					((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					XGPIOPS_INTANY_OFFSET);

	switch (IrqType) {
 10068c8:	e2466001 	sub	r6, r6, #1
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10068cc:	e5952004 	ldr	r2, [r5, #4]
		case XGPIOPS_IRQ_TYPE_LEVEL_HIGH:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
			break;
		case XGPIOPS_IRQ_TYPE_LEVEL_LOW:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 10068d0:	e3a0e001 	mov	lr, #1
 10068d4:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10068d8:	e1a03303 	lsl	r3, r3, #6
 10068dc:	e0832002 	add	r2, r3, r2
 10068e0:	e592121c 	ldr	r1, [r2, #540]	; 0x21c
 10068e4:	e5920220 	ldr	r0, [r2, #544]	; 0x220
 10068e8:	e592c224 	ldr	ip, [r2, #548]	; 0x224
	switch (IrqType) {
 10068ec:	e3560003 	cmp	r6, #3
 10068f0:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
 10068f4:	ea00003e 	b	10069f4 <XGpioPs_SetIntrTypePin+0x18c>
 10068f8:	01006988 	.word	0x01006988
 10068fc:	01006978 	.word	0x01006978
 1006900:	01006948 	.word	0x01006948
 1006904:	010069a0 	.word	0x010069a0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006908:	e3020e64 	movw	r0, #11876	; 0x2e64
 100690c:	e3001249 	movw	r1, #585	; 0x249
 1006910:	e3400101 	movt	r0, #257	; 0x101
 1006914:	eb0004b7 	bl	1007bf8 <Xil_Assert>
 1006918:	e3a03001 	mov	r3, #1
 100691c:	e5843000 	str	r3, [r4]
			  XGPIOPS_INTPOL_OFFSET, IntrPolReg);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAnyReg);
}
 1006920:	e28dd008 	add	sp, sp, #8
 1006924:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006928:	e3020e64 	movw	r0, #11876	; 0x2e64
 100692c:	e300124a 	movw	r1, #586	; 0x24a
 1006930:	e3400101 	movt	r0, #257	; 0x101
 1006934:	eb0004af 	bl	1007bf8 <Xil_Assert>
 1006938:	e3a03001 	mov	r3, #1
 100693c:	e5843000 	str	r3, [r4]
}
 1006940:	e28dd008 	add	sp, sp, #8
 1006944:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1006948:	e1a0e41e 	lsl	lr, lr, r4
 100694c:	e1c1100e 	bic	r1, r1, lr
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1006950:	e180000e 	orr	r0, r0, lr
	*LocalAddr = Value;
 1006954:	e582121c 	str	r1, [r2, #540]	; 0x21c
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006958:	e2831e22 	add	r1, r3, #544	; 0x220
 100695c:	e5952004 	ldr	r2, [r5, #4]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006960:	e2833f89 	add	r3, r3, #548	; 0x224
 1006964:	e7810002 	str	r0, [r1, r2]
 1006968:	e5952004 	ldr	r2, [r5, #4]
 100696c:	e783c002 	str	ip, [r3, r2]
}
 1006970:	e28dd008 	add	sp, sp, #8
 1006974:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1006978:	e1a0e41e 	lsl	lr, lr, r4
 100697c:	e18e1001 	orr	r1, lr, r1
			IntrOnAnyReg |= ((u32)1 << (u32)PinNumber);
 1006980:	e18cc00e 	orr	ip, ip, lr
			break;
 1006984:	eafffff2 	b	1006954 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1006988:	e1a0e41e 	lsl	lr, lr, r4
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 100698c:	e1e0400e 	mvn	r4, lr
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1006990:	e18e1001 	orr	r1, lr, r1
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1006994:	e0000004 	and	r0, r0, r4
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 1006998:	e00cc004 	and	ip, ip, r4
			break;
 100699c:	eaffffec 	b	1006954 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 10069a0:	e1e0e41e 	mvn	lr, lr, lsl r4
 10069a4:	e001100e 	and	r1, r1, lr
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 10069a8:	e000000e 	and	r0, r0, lr
			break;
 10069ac:	eaffffe8 	b	1006954 <XGpioPs_SetIntrTypePin+0xec>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 10069b0:	e3020e64 	movw	r0, #11876	; 0x2e64
 10069b4:	e300124b 	movw	r1, #587	; 0x24b
 10069b8:	e3400101 	movt	r0, #257	; 0x101
 10069bc:	eb00048d 	bl	1007bf8 <Xil_Assert>
 10069c0:	e3a03001 	mov	r3, #1
 10069c4:	e5843000 	str	r3, [r4]
}
 10069c8:	e28dd008 	add	sp, sp, #8
 10069cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10069d0:	e3020e64 	movw	r0, #11876	; 0x2e64
 10069d4:	e3a01f92 	mov	r1, #584	; 0x248
 10069d8:	e3400101 	movt	r0, #257	; 0x101
 10069dc:	eb000485 	bl	1007bf8 <Xil_Assert>
 10069e0:	e3093c78 	movw	r3, #40056	; 0x9c78
 10069e4:	e3a02001 	mov	r2, #1
 10069e8:	e3403102 	movt	r3, #258	; 0x102
 10069ec:	e5832000 	str	r2, [r3]
 10069f0:	eaffffca 	b	1006920 <XGpioPs_SetIntrTypePin+0xb8>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 10069f4:	e1a0e41e 	lsl	lr, lr, r4
 10069f8:	e18e1001 	orr	r1, lr, r1
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 10069fc:	e180000e 	orr	r0, r0, lr
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 1006a00:	e1ccc00e 	bic	ip, ip, lr
			break;
 1006a04:	eaffffd2 	b	1006954 <XGpioPs_SetIntrTypePin+0xec>

01006a08 <XGpioPs_GetIntrTypePin>:
* @note		Use XGPIOPS_IRQ_TYPE_* defined in xgpiops.h for the IRQ type
*		returned by this function.
*
*****************************************************************************/
u8 XGpioPs_GetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006a08:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrOnAny;
	u8 Bank;
	u8 PinNumber;
	u8 IrqType;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1006a0c:	e2506000 	subs	r6, r0, #0
{
 1006a10:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006a14:	0a000034 	beq	1006aec <XGpioPs_GetIntrTypePin+0xe4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a18:	e5962008 	ldr	r2, [r6, #8]
 1006a1c:	e3013111 	movw	r3, #4369	; 0x1111
 1006a20:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006a24:	e3095c78 	movw	r5, #40056	; 0x9c78
 1006a28:	e3405102 	movt	r5, #258	; 0x102
 1006a2c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a30:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006a34:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a38:	1a00001e 	bne	1006ab8 <XGpioPs_GetIntrTypePin+0xb0>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006a3c:	e5963018 	ldr	r3, [r6, #24]
 1006a40:	e1530001 	cmp	r3, r1
 1006a44:	9a000012 	bls	1006a94 <XGpioPs_GetIntrTypePin+0x8c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006a48:	e6ef0071 	uxtb	r0, r1
 1006a4c:	e28d2007 	add	r2, sp, #7
 1006a50:	e28d1006 	add	r1, sp, #6
 1006a54:	ebfffb4f 	bl	1005798 <XGpioPs_GetBankPin>
#endif

	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006a58:	e5dd2006 	ldrb	r2, [sp, #6]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1006a5c:	e3a00001 	mov	r0, #1
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006a60:	e5963004 	ldr	r3, [r6, #4]
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1006a64:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006a68:	e0833302 	add	r3, r3, r2, lsl #6
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1006a6c:	e1a04410 	lsl	r4, r0, r4
	return *(volatile u32 *) Addr;
 1006a70:	e593221c 	ldr	r2, [r3, #540]	; 0x21c

	if (IntrType == ((u32)1 << PinNumber)) {
 1006a74:	e1d42002 	bics	r2, r4, r2
 1006a78:	0a000011 	beq	1006ac4 <XGpioPs_GetIntrTypePin+0xbc>
 1006a7c:	e5933220 	ldr	r3, [r3, #544]	; 0x220

		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTPOL_OFFSET) & ((u32)1 << PinNumber);

		if (IntrPol == ((u32)1 << PinNumber)) {
 1006a80:	e1d43003 	bics	r3, r4, r3
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_HIGH;
		} else {
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_LOW;
 1006a84:	03a00003 	moveq	r0, #3
 1006a88:	13a00004 	movne	r0, #4
		}
	}

	return IrqType;
}
 1006a8c:	e28dd008 	add	sp, sp, #8
 1006a90:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006a94:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006a98:	e30012a3 	movw	r1, #675	; 0x2a3
 1006a9c:	e3400101 	movt	r0, #257	; 0x101
 1006aa0:	eb000454 	bl	1007bf8 <Xil_Assert>
 1006aa4:	e3a03001 	mov	r3, #1
 1006aa8:	e1a00004 	mov	r0, r4
 1006aac:	e5853000 	str	r3, [r5]
}
 1006ab0:	e28dd008 	add	sp, sp, #8
 1006ab4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006ab8:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006abc:	e30012a2 	movw	r1, #674	; 0x2a2
 1006ac0:	eafffff5 	b	1006a9c <XGpioPs_GetIntrTypePin+0x94>
 1006ac4:	e5932224 	ldr	r2, [r3, #548]	; 0x224
 1006ac8:	e5930220 	ldr	r0, [r3, #544]	; 0x220
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 1006acc:	e1d43002 	bics	r3, r4, r2
		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006ad0:	e0000004 	and	r0, r0, r4
			IrqType = XGPIOPS_IRQ_TYPE_EDGE_BOTH;
 1006ad4:	03a00002 	moveq	r0, #2
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 1006ad8:	0affffeb 	beq	1006a8c <XGpioPs_GetIntrTypePin+0x84>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006adc:	e0540000 	subs	r0, r4, r0
 1006ae0:	13a00001 	movne	r0, #1
}
 1006ae4:	e28dd008 	add	sp, sp, #8
 1006ae8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006aec:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006af0:	e30012a1 	movw	r1, #673	; 0x2a1
 1006af4:	e3400101 	movt	r0, #257	; 0x101
 1006af8:	eb00043e 	bl	1007bf8 <Xil_Assert>
 1006afc:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006b00:	e3a02001 	mov	r2, #1
 1006b04:	e3403102 	movt	r3, #258	; 0x102
 1006b08:	e1a00006 	mov	r0, r6
 1006b0c:	e5832000 	str	r2, [r3]
 1006b10:	eaffffdd 	b	1006a8c <XGpioPs_GetIntrTypePin+0x84>

01006b14 <XGpioPs_SetCallbackHandler>:
*
******************************************************************************/
void XGpioPs_SetCallbackHandler(XGpioPs *InstancePtr, void *CallBackRef,
				 XGpioPs_Handler FuncPointer)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006b14:	e3500000 	cmp	r0, #0
{
 1006b18:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006b1c:	0a000014 	beq	1006b74 <XGpioPs_SetCallbackHandler+0x60>
 1006b20:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertVoid(FuncPointer != NULL);
 1006b24:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1006b28:	e3404102 	movt	r4, #258	; 0x102
 1006b2c:	e3a03000 	mov	r3, #0
 1006b30:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 1006b34:	0a000017 	beq	1006b98 <XGpioPs_SetCallbackHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b38:	e590c008 	ldr	ip, [r0, #8]
 1006b3c:	e3013111 	movw	r3, #4369	; 0x1111
 1006b40:	e3413111 	movt	r3, #4369	; 0x1111
 1006b44:	e15c0003 	cmp	ip, r3
 1006b48:	1a000002 	bne	1006b58 <XGpioPs_SetCallbackHandler+0x44>

	InstancePtr->Handler = FuncPointer;
 1006b4c:	e580200c 	str	r2, [r0, #12]
	InstancePtr->CallBackRef = CallBackRef;
 1006b50:	e5801010 	str	r1, [r0, #16]
 1006b54:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b58:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006b5c:	e30012ea 	movw	r1, #746	; 0x2ea
 1006b60:	e3400101 	movt	r0, #257	; 0x101
 1006b64:	eb000423 	bl	1007bf8 <Xil_Assert>
 1006b68:	e3a03001 	mov	r3, #1
 1006b6c:	e5843000 	str	r3, [r4]
}
 1006b70:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006b74:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006b78:	e3a01fba 	mov	r1, #744	; 0x2e8
 1006b7c:	e3400101 	movt	r0, #257	; 0x101
 1006b80:	eb00041c 	bl	1007bf8 <Xil_Assert>
 1006b84:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006b88:	e3a02001 	mov	r2, #1
 1006b8c:	e3403102 	movt	r3, #258	; 0x102
 1006b90:	e5832000 	str	r2, [r3]
 1006b94:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 1006b98:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006b9c:	e30012e9 	movw	r1, #745	; 0x2e9
 1006ba0:	e3400101 	movt	r0, #257	; 0x101
 1006ba4:	eb000413 	bl	1007bf8 <Xil_Assert>
 1006ba8:	e3a03001 	mov	r3, #1
 1006bac:	e5843000 	str	r3, [r4]
 1006bb0:	e8bd8010 	pop	{r4, pc}

01006bb4 <XGpioPs_IntrHandler>:
* @note		This function does not save and restore the processor context
*		such that the user must provide this processing.
*
******************************************************************************/
void XGpioPs_IntrHandler(const XGpioPs *InstancePtr)
{
 1006bb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	u8 Bank;
	u32 IntrStatus;
	u32 IntrEnabled;

	Xil_AssertVoid(InstancePtr != NULL);
 1006bb8:	e2506000 	subs	r6, r0, #0
 1006bbc:	0a00002c 	beq	1006c74 <XGpioPs_IntrHandler+0xc0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bc0:	e5962008 	ldr	r2, [r6, #8]
 1006bc4:	e3013111 	movw	r3, #4369	; 0x1111
 1006bc8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006bcc:	e3094c78 	movw	r4, #40056	; 0x9c78
 1006bd0:	e3404102 	movt	r4, #258	; 0x102
 1006bd4:	e3a07000 	mov	r7, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bd8:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006bdc:	e5847000 	str	r7, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006be0:	1a00001c 	bne	1006c58 <XGpioPs_IntrHandler+0xa4>

	for (Bank = 0U; Bank < InstancePtr->MaxBanks; Bank++) {
 1006be4:	e5d6301c 	ldrb	r3, [r6, #28]
 1006be8:	e1530007 	cmp	r3, r7
 1006bec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 1006bf0:	e1a04007 	mov	r4, r7
 1006bf4:	ea000003 	b	1006c08 <XGpioPs_IntrHandler+0x54>
 1006bf8:	e5d6301c 	ldrb	r3, [r6, #28]
 1006bfc:	e6ef4077 	uxtb	r4, r7
 1006c00:	e1530004 	cmp	r3, r4
 1006c04:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
			if((Bank == XGPIOPS_ONE) || (Bank == XGPIOPS_TWO)) {
				continue;
			}
		}
#endif
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1006c08:	e1a01004 	mov	r1, r4
 1006c0c:	e1a00006 	mov	r0, r6
 1006c10:	ebfffde2 	bl	10063a0 <XGpioPs_IntrGetStatus>
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1006c14:	e1a01004 	mov	r1, r4
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1006c18:	e1a05000 	mov	r5, r0
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1006c1c:	e1a00006 	mov	r0, r6
 1006c20:	e2877001 	add	r7, r7, #1
 1006c24:	ebfffd74 	bl	10061fc <XGpioPs_IntrGetEnabled>
		if ((IntrStatus & IntrEnabled) != (u32)0) {
 1006c28:	e0155000 	ands	r5, r5, r0
 1006c2c:	0afffff1 	beq	1006bf8 <XGpioPs_IntrHandler+0x44>
			XGpioPs_IntrClear(InstancePtr, Bank,
 1006c30:	e1a02005 	mov	r2, r5
 1006c34:	e1a01004 	mov	r1, r4
 1006c38:	e1a00006 	mov	r0, r6
 1006c3c:	ebfffe3f 	bl	1006540 <XGpioPs_IntrClear>
					(IntrStatus & IntrEnabled));
			InstancePtr->Handler(InstancePtr->
 1006c40:	e1a02005 	mov	r2, r5
 1006c44:	e1a01004 	mov	r1, r4
 1006c48:	e596300c 	ldr	r3, [r6, #12]
 1006c4c:	e5960010 	ldr	r0, [r6, #16]
 1006c50:	e12fff33 	blx	r3
 1006c54:	eaffffe7 	b	1006bf8 <XGpioPs_IntrHandler+0x44>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c58:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006c5c:	e3a01fc2 	mov	r1, #776	; 0x308
 1006c60:	e3400101 	movt	r0, #257	; 0x101
 1006c64:	eb0003e3 	bl	1007bf8 <Xil_Assert>
 1006c68:	e3a03001 	mov	r3, #1
 1006c6c:	e5843000 	str	r3, [r4]
 1006c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006c74:	e3020e64 	movw	r0, #11876	; 0x2e64
 1006c78:	e3001307 	movw	r1, #775	; 0x307
 1006c7c:	e3400101 	movt	r0, #257	; 0x101
 1006c80:	eb0003dc 	bl	1007bf8 <Xil_Assert>
 1006c84:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006c88:	e3a02001 	mov	r2, #1
 1006c8c:	e3403102 	movt	r3, #258	; 0x102
 1006c90:	e5832000 	str	r2, [r3]
 1006c94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01006c98 <StubHandler>:
{
	(void) CallBackRef;
	(void) Bank;
	(void) Status;

	Xil_AssertVoidAlways();
 1006c98:	e3020e64 	movw	r0, #11876	; 0x2e64
{
 1006c9c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1006ca0:	e3001337 	movw	r1, #823	; 0x337
 1006ca4:	e3400101 	movt	r0, #257	; 0x101
 1006ca8:	eb0003d2 	bl	1007bf8 <Xil_Assert>
 1006cac:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006cb0:	e3a02001 	mov	r2, #1
 1006cb4:	e3403102 	movt	r3, #258	; 0x102
 1006cb8:	e5832000 	str	r2, [r3]
}
 1006cbc:	e8bd8010 	pop	{r4, pc}

01006cc0 <XScuGic_InterruptHandler>:
*
* @note		None.
*
******************************************************************************/
void XScuGic_InterruptHandler(XScuGic *InstancePtr)
{
 1006cc0:	e92d4070 	push	{r4, r5, r6, lr}
#endif
	    XScuGic_VectorTableEntry *TablePtr;

	    /* Assert that the pointer to the instance is valid
	     */
	    Xil_AssertVoid(InstancePtr != NULL);
 1006cc4:	e2505000 	subs	r5, r0, #0
 1006cc8:	0a000011 	beq	1006d14 <XScuGic_InterruptHandler+0x54>
	     * clear the interrupt in the GIC.
	     */
#if defined (GICv3)
	    InterruptID = XScuGic_get_IntID();
#else
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 1006ccc:	e5953000 	ldr	r3, [r5]
	    Xil_AssertVoid(InstancePtr != NULL);
 1006cd0:	e3092c78 	movw	r2, #40056	; 0x9c78
 1006cd4:	e3402102 	movt	r2, #258	; 0x102
 1006cd8:	e3a01000 	mov	r1, #0
 1006cdc:	e5821000 	str	r1, [r2]
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 1006ce0:	e5932004 	ldr	r2, [r3, #4]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1006ce4:	e592400c 	ldr	r4, [r2, #12]
	    InterruptID = IntIDFull & XSCUGIC_ACK_INTID_MASK;
 1006ce8:	e7e91054 	ubfx	r1, r4, #0, #10
#endif
	    if (XSCUGIC_MAX_NUM_INTR_INPUTS <= InterruptID) {
 1006cec:	e351005e 	cmp	r1, #94	; 0x5e
 1006cf0:	8a000005 	bhi	1006d0c <XScuGic_InterruptHandler+0x4c>
	     * based on the IRQSource. A software trigger is cleared by
	     *.the ACK.
	     */
	    TablePtr = &(InstancePtr->Config->HandlerTable[InterruptID]);
		if (TablePtr != NULL) {
			TablePtr->Handler(TablePtr->CallBackRef);
 1006cf4:	e0833181 	add	r3, r3, r1, lsl #3
 1006cf8:	e593200c 	ldr	r2, [r3, #12]
 1006cfc:	e5930010 	ldr	r0, [r3, #16]
 1006d00:	e12fff32 	blx	r2
 1006d04:	e5953000 	ldr	r3, [r5]
 1006d08:	e5932004 	ldr	r2, [r3, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1006d0c:	e5824010 	str	r4, [r2, #16]
#endif
	    /*
	     * Return from the interrupt. Change security domains
	     * could happen here.
	     */
}
 1006d10:	e8bd8070 	pop	{r4, r5, r6, pc}
	    Xil_AssertVoid(InstancePtr != NULL);
 1006d14:	e3020e74 	movw	r0, #11892	; 0x2e74
 1006d18:	e3a0107d 	mov	r1, #125	; 0x7d
 1006d1c:	e3400101 	movt	r0, #257	; 0x101
 1006d20:	eb0003b4 	bl	1007bf8 <Xil_Assert>
 1006d24:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006d28:	e3a02001 	mov	r2, #1
 1006d2c:	e3403102 	movt	r3, #258	; 0x102
 1006d30:	e5832000 	str	r2, [r3]
 1006d34:	e8bd8070 	pop	{r4, r5, r6, pc}

01006d38 <StubHandler>:
static void StubHandler(void *CallBackRef)
{
	/*
	 * verify that the inputs are valid
	 */
	Xil_AssertVoid(CallBackRef != NULL);
 1006d38:	e3500000 	cmp	r0, #0
 1006d3c:	0a000007 	beq	1006d60 <StubHandler+0x28>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1006d40:	e5903008 	ldr	r3, [r0, #8]
	Xil_AssertVoid(CallBackRef != NULL);
 1006d44:	e3092c78 	movw	r2, #40056	; 0x9c78
 1006d48:	e3402102 	movt	r2, #258	; 0x102
 1006d4c:	e3a01000 	mov	r1, #0
 1006d50:	e5821000 	str	r1, [r2]
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1006d54:	e2833001 	add	r3, r3, #1
 1006d58:	e5803008 	str	r3, [r0, #8]
 1006d5c:	e12fff1e 	bx	lr
	Xil_AssertVoid(CallBackRef != NULL);
 1006d60:	e3020e84 	movw	r0, #11908	; 0x2e84
{
 1006d64:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CallBackRef != NULL);
 1006d68:	e30012e5 	movw	r1, #741	; 0x2e5
 1006d6c:	e3400101 	movt	r0, #257	; 0x101
 1006d70:	eb0003a0 	bl	1007bf8 <Xil_Assert>
 1006d74:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006d78:	e3a02001 	mov	r2, #1
 1006d7c:	e3403102 	movt	r3, #258	; 0x102
 1006d80:	e5832000 	str	r2, [r3]
}
 1006d84:	e8bd8010 	pop	{r4, pc}

01006d88 <XScuGic_Connect>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d88:	e3500000 	cmp	r0, #0
{
 1006d8c:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d90:	0a000021 	beq	1006e1c <XScuGic_Connect+0x94>
 1006d94:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006d98:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d9c:	e3404102 	movt	r4, #258	; 0x102
 1006da0:	e3a0c000 	mov	ip, #0
 1006da4:	e584c000 	str	ip, [r4]
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006da8:	8a000013 	bhi	1006dfc <XScuGic_Connect+0x74>
	Xil_AssertNonvoid(Handler != NULL);
 1006dac:	e3520000 	cmp	r2, #0
 1006db0:	0a000022 	beq	1006e40 <XScuGic_Connect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006db4:	e590e004 	ldr	lr, [r0, #4]
 1006db8:	e301c111 	movw	ip, #4369	; 0x1111
 1006dbc:	e341c111 	movt	ip, #4369	; 0x1111
 1006dc0:	e15e000c 	cmp	lr, ip
 1006dc4:	1a000004 	bne	1006ddc <XScuGic_Connect+0x54>
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)Handler;
 1006dc8:	e5900000 	ldr	r0, [r0]
 1006dcc:	e0801181 	add	r1, r0, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = CallBackRef;
 1006dd0:	e1c120fc 	strd	r2, [r1, #12]
}
 1006dd4:	e3a00000 	mov	r0, #0
 1006dd8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006ddc:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006de0:	e30011e1 	movw	r1, #481	; 0x1e1
 1006de4:	e3400101 	movt	r0, #257	; 0x101
 1006de8:	eb000382 	bl	1007bf8 <Xil_Assert>
 1006dec:	e3a03001 	mov	r3, #1
}
 1006df0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006df4:	e5843000 	str	r3, [r4]
}
 1006df8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006dfc:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006e00:	e30011df 	movw	r1, #479	; 0x1df
 1006e04:	e3400101 	movt	r0, #257	; 0x101
 1006e08:	eb00037a 	bl	1007bf8 <Xil_Assert>
 1006e0c:	e3a03001 	mov	r3, #1
}
 1006e10:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006e14:	e5843000 	str	r3, [r4]
}
 1006e18:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006e1c:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006e20:	e30011de 	movw	r1, #478	; 0x1de
 1006e24:	e3400101 	movt	r0, #257	; 0x101
 1006e28:	eb000372 	bl	1007bf8 <Xil_Assert>
 1006e2c:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006e30:	e3a02001 	mov	r2, #1
 1006e34:	e3403102 	movt	r3, #258	; 0x102
 1006e38:	e5832000 	str	r2, [r3]
 1006e3c:	eaffffe4 	b	1006dd4 <XScuGic_Connect+0x4c>
	Xil_AssertNonvoid(Handler != NULL);
 1006e40:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006e44:	e3a01e1e 	mov	r1, #480	; 0x1e0
 1006e48:	e3400101 	movt	r0, #257	; 0x101
 1006e4c:	eb000369 	bl	1007bf8 <Xil_Assert>
 1006e50:	e3a03001 	mov	r3, #1
 1006e54:	e5843000 	str	r3, [r4]
 1006e58:	eaffffdd 	b	1006dd4 <XScuGic_Connect+0x4c>

01006e5c <XScuGic_Disconnect>:
	Xil_AssertVoid(InstancePtr != NULL);
 1006e5c:	e3500000 	cmp	r0, #0
{
 1006e60:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006e64:	0a000026 	beq	1006f04 <XScuGic_Disconnect+0xa8>
 1006e68:	e3094c78 	movw	r4, #40056	; 0x9c78
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006e6c:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1006e70:	e3404102 	movt	r4, #258	; 0x102
 1006e74:	e3a03000 	mov	r3, #0
 1006e78:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006e7c:	8a000019 	bhi	1006ee8 <XScuGic_Disconnect+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006e80:	e5902004 	ldr	r2, [r0, #4]
 1006e84:	e3013111 	movw	r3, #4369	; 0x1111
 1006e88:	e3413111 	movt	r3, #4369	; 0x1111
 1006e8c:	e1520003 	cmp	r2, r3
 1006e90:	1a00000d 	bne	1006ecc <XScuGic_Disconnect+0x70>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1006e94:	e5903000 	ldr	r3, [r0]
	Mask = 0x00000001U << (Int_Id % 32U);
 1006e98:	e201201f 	and	r2, r1, #31
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1006e9c:	e1a0c2a1 	lsr	ip, r1, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1006ea0:	e3a0e001 	mov	lr, #1
 1006ea4:	e1a0e21e 	lsl	lr, lr, r2
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1006ea8:	e3062d38 	movw	r2, #27960	; 0x6d38
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1006eac:	e5934008 	ldr	r4, [r3, #8]
 1006eb0:	e28cc060 	add	ip, ip, #96	; 0x60
 1006eb4:	e0831181 	add	r1, r3, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1006eb8:	e3402100 	movt	r2, #256	; 0x100
 1006ebc:	e784e10c 	str	lr, [r4, ip, lsl #2]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 1006ec0:	e5810010 	str	r0, [r1, #16]
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1006ec4:	e581200c 	str	r2, [r1, #12]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 1006ec8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006ecc:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006ed0:	e3001206 	movw	r1, #518	; 0x206
 1006ed4:	e3400101 	movt	r0, #257	; 0x101
 1006ed8:	eb000346 	bl	1007bf8 <Xil_Assert>
 1006edc:	e3a03001 	mov	r3, #1
 1006ee0:	e5843000 	str	r3, [r4]
}
 1006ee4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1006ee8:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006eec:	e3001205 	movw	r1, #517	; 0x205
 1006ef0:	e3400101 	movt	r0, #257	; 0x101
 1006ef4:	eb00033f 	bl	1007bf8 <Xil_Assert>
 1006ef8:	e3a03001 	mov	r3, #1
 1006efc:	e5843000 	str	r3, [r4]
 1006f00:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006f04:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006f08:	e3a01f81 	mov	r1, #516	; 0x204
 1006f0c:	e3400101 	movt	r0, #257	; 0x101
 1006f10:	eb000338 	bl	1007bf8 <Xil_Assert>
 1006f14:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006f18:	e3a02001 	mov	r2, #1
 1006f1c:	e3403102 	movt	r3, #258	; 0x102
 1006f20:	e5832000 	str	r2, [r3]
 1006f24:	e8bd8010 	pop	{r4, pc}

01006f28 <XScuGic_SoftwareIntr>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f28:	e3500000 	cmp	r0, #0
{
 1006f2c:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f30:	0a000025 	beq	1006fcc <XScuGic_SoftwareIntr+0xa4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f34:	e590c004 	ldr	ip, [r0, #4]
 1006f38:	e3013111 	movw	r3, #4369	; 0x1111
 1006f3c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f40:	e3094c78 	movw	r4, #40056	; 0x9c78
 1006f44:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f48:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f4c:	e3a03000 	mov	r3, #0
 1006f50:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f54:	1a00000c 	bne	1006f8c <XScuGic_SoftwareIntr+0x64>
	Xil_AssertNonvoid(Int_Id <= 15U);
 1006f58:	e351000f 	cmp	r1, #15
 1006f5c:	8a000012 	bhi	1006fac <XScuGic_SoftwareIntr+0x84>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1006f60:	e35200ff 	cmp	r2, #255	; 0xff
 1006f64:	8a000021 	bhi	1006ff0 <XScuGic_SoftwareIntr+0xc8>
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1006f68:	e5900000 	ldr	r0, [r0]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 1006f6c:	e1811802 	orr	r1, r1, r2, lsl #16
 1006f70:	e3a0300f 	mov	r3, #15
 1006f74:	e34030ff 	movt	r3, #255	; 0xff
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1006f78:	e5902008 	ldr	r2, [r0, #8]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 1006f7c:	e0033001 	and	r3, r3, r1
 1006f80:	e5823f00 	str	r3, [r2, #3840]	; 0xf00
}
 1006f84:	e3a00000 	mov	r0, #0
 1006f88:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f8c:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006f90:	e30012b3 	movw	r1, #691	; 0x2b3
 1006f94:	e3400101 	movt	r0, #257	; 0x101
 1006f98:	eb000316 	bl	1007bf8 <Xil_Assert>
 1006f9c:	e3a03001 	mov	r3, #1
}
 1006fa0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006fa4:	e5843000 	str	r3, [r4]
}
 1006fa8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id <= 15U);
 1006fac:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006fb0:	e3a01fad 	mov	r1, #692	; 0x2b4
 1006fb4:	e3400101 	movt	r0, #257	; 0x101
 1006fb8:	eb00030e 	bl	1007bf8 <Xil_Assert>
 1006fbc:	e3a03001 	mov	r3, #1
}
 1006fc0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id <= 15U);
 1006fc4:	e5843000 	str	r3, [r4]
}
 1006fc8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006fcc:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006fd0:	e30012b2 	movw	r1, #690	; 0x2b2
 1006fd4:	e3400101 	movt	r0, #257	; 0x101
 1006fd8:	eb000306 	bl	1007bf8 <Xil_Assert>
 1006fdc:	e3093c78 	movw	r3, #40056	; 0x9c78
 1006fe0:	e3a02001 	mov	r2, #1
 1006fe4:	e3403102 	movt	r3, #258	; 0x102
 1006fe8:	e5832000 	str	r2, [r3]
 1006fec:	eaffffe4 	b	1006f84 <XScuGic_SoftwareIntr+0x5c>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1006ff0:	e3020e84 	movw	r0, #11908	; 0x2e84
 1006ff4:	e30012b5 	movw	r1, #693	; 0x2b5
 1006ff8:	e3400101 	movt	r0, #257	; 0x101
 1006ffc:	eb0002fd 	bl	1007bf8 <Xil_Assert>
 1007000:	e3a03001 	mov	r3, #1
 1007004:	e5843000 	str	r3, [r4]
 1007008:	eaffffdd 	b	1006f84 <XScuGic_SoftwareIntr+0x5c>

0100700c <XScuGic_SetPriorityTriggerType>:
	u32 Index;
#endif
	u8 LocalPriority;
	LocalPriority = Priority;

	Xil_AssertVoid(InstancePtr != NULL);
 100700c:	e3500000 	cmp	r0, #0
{
 1007010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007014:	0a000033 	beq	10070e8 <XScuGic_SetPriorityTriggerType+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007018:	e590e004 	ldr	lr, [r0, #4]
 100701c:	e301c111 	movw	ip, #4369	; 0x1111
 1007020:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007024:	e3094c78 	movw	r4, #40056	; 0x9c78
 1007028:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100702c:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1007030:	e3a0c000 	mov	ip, #0
 1007034:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007038:	1a00001c 	bne	10070b0 <XScuGic_SetPriorityTriggerType+0xa4>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 100703c:	e351005e 	cmp	r1, #94	; 0x5e
 1007040:	8a000021 	bhi	10070cc <XScuGic_SetPriorityTriggerType+0xc0>
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1007044:	e3530003 	cmp	r3, #3
 1007048:	8a00002f 	bhi	100710c <XScuGic_SetPriorityTriggerType+0x100>
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 100704c:	e35200f8 	cmp	r2, #248	; 0xf8
 1007050:	8a000034 	bhi	1007128 <XScuGic_SetPriorityTriggerType+0x11c>
#endif

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007054:	e5905000 	ldr	r5, [r0]
 1007058:	e3c1e003 	bic	lr, r1, #3
	LocalPriority = LocalPriority & (u8)XSCUGIC_INTR_PRIO_MASK;
	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 100705c:	e2010003 	and	r0, r1, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007060:	e28eeb01 	add	lr, lr, #1024	; 0x400
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1007064:	e1a04180 	lsl	r4, r0, #3
 1007068:	e3a080ff 	mov	r8, #255	; 0xff
	RegValue = XScuGic_DistReadReg(InstancePtr,
 100706c:	e5956008 	ldr	r6, [r5, #8]
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1007070:	e20220f8 	and	r2, r2, #248	; 0xf8
				RegValue);

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007074:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 1007078:	e201100f 	and	r1, r1, #15
 100707c:	e1a01081 	lsl	r1, r1, #1
 1007080:	e3a07003 	mov	r7, #3
	return *(volatile u32 *) Addr;
 1007084:	e79e0006 	ldr	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007088:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 100708c:	e1c00418 	bic	r0, r0, r8, lsl r4
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1007090:	e1800412 	orr	r0, r0, r2, lsl r4
	*LocalAddr = Value;
 1007094:	e78e0006 	str	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007098:	e5950008 	ldr	r0, [r5, #8]
	return *(volatile u32 *) Addr;
 100709c:	e790210c 	ldr	r2, [r0, ip, lsl #2]
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 10070a0:	e1c22117 	bic	r2, r2, r7, lsl r1
	RegValue |= (u32)Trigger << ((Int_Id%16U)*2U);
 10070a4:	e1821113 	orr	r1, r2, r3, lsl r1
	*LocalAddr = Value;
 10070a8:	e780110c 	str	r1, [r0, ip, lsl #2]
 10070ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10070b0:	e3020e84 	movw	r0, #11908	; 0x2e84
 10070b4:	e3001312 	movw	r1, #786	; 0x312
 10070b8:	e3400101 	movt	r0, #257	; 0x101
 10070bc:	eb0002cd 	bl	1007bf8 <Xil_Assert>
 10070c0:	e3a03001 	mov	r3, #1
 10070c4:	e5843000 	str	r3, [r4]
 10070c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10070cc:	e3020e84 	movw	r0, #11908	; 0x2e84
 10070d0:	e3001313 	movw	r1, #787	; 0x313
 10070d4:	e3400101 	movt	r0, #257	; 0x101
 10070d8:	eb0002c6 	bl	1007bf8 <Xil_Assert>
 10070dc:	e3a03001 	mov	r3, #1
 10070e0:	e5843000 	str	r3, [r4]
 10070e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10070e8:	e3020e84 	movw	r0, #11908	; 0x2e84
 10070ec:	e3001311 	movw	r1, #785	; 0x311
 10070f0:	e3400101 	movt	r0, #257	; 0x101
 10070f4:	eb0002bf 	bl	1007bf8 <Xil_Assert>
 10070f8:	e3093c78 	movw	r3, #40056	; 0x9c78
 10070fc:	e3a02001 	mov	r2, #1
 1007100:	e3403102 	movt	r3, #258	; 0x102
 1007104:	e5832000 	str	r2, [r3]
 1007108:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 100710c:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007110:	e3a01fc5 	mov	r1, #788	; 0x314
 1007114:	e3400101 	movt	r0, #257	; 0x101
 1007118:	eb0002b6 	bl	1007bf8 <Xil_Assert>
 100711c:	e3a03001 	mov	r3, #1
 1007120:	e5843000 	str	r3, [r4]
 1007124:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1007128:	e3020e84 	movw	r0, #11908	; 0x2e84
 100712c:	e3001315 	movw	r1, #789	; 0x315
 1007130:	e3400101 	movt	r0, #257	; 0x101
 1007134:	eb0002af 	bl	1007bf8 <Xil_Assert>
 1007138:	e3a03001 	mov	r3, #1
 100713c:	e5843000 	str	r3, [r4]
	 * Write the value back to the register.
	 */
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_INT_CFG_OFFSET_CALC(Int_Id),
				RegValue);

}
 1007140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007144 <XScuGic_GetPriorityTriggerType>:
void XScuGic_GetPriorityTriggerType(XScuGic *InstancePtr, u32 Int_Id,
					u8 *Priority, u8 *Trigger)
{
	u32 RegValue;

	Xil_AssertVoid(InstancePtr != NULL);
 1007144:	e3500000 	cmp	r0, #0
{
 1007148:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100714c:	0a000030 	beq	1007214 <XScuGic_GetPriorityTriggerType+0xd0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007150:	e590e004 	ldr	lr, [r0, #4]
 1007154:	e301c111 	movw	ip, #4369	; 0x1111
 1007158:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100715c:	e3094c78 	movw	r4, #40056	; 0x9c78
 1007160:	e3404102 	movt	r4, #258	; 0x102
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007164:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1007168:	e3a0c000 	mov	ip, #0
 100716c:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007170:	1a000019 	bne	10071dc <XScuGic_GetPriorityTriggerType+0x98>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007174:	e351005e 	cmp	r1, #94	; 0x5e
 1007178:	8a00001e 	bhi	10071f8 <XScuGic_GetPriorityTriggerType+0xb4>
	Xil_AssertVoid(Priority != NULL);
 100717c:	e3520000 	cmp	r2, #0
 1007180:	0a00002c 	beq	1007238 <XScuGic_GetPriorityTriggerType+0xf4>
	Xil_AssertVoid(Trigger != NULL);
 1007184:	e3530000 	cmp	r3, #0
 1007188:	0a000031 	beq	1007254 <XScuGic_GetPriorityTriggerType+0x110>

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 100718c:	e590c000 	ldr	ip, [r0]

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 1007190:	e201e003 	and	lr, r1, #3
 1007194:	e1a0418e 	lsl	r4, lr, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007198:	e3c15003 	bic	r5, r1, #3
 100719c:	e2855b01 	add	r5, r5, #1024	; 0x400
 10071a0:	e59ce008 	ldr	lr, [ip, #8]
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10071a4:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10071a8:	e201100f 	and	r1, r1, #15
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10071ac:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10071b0:	e1a01081 	lsl	r1, r1, #1
	return *(volatile u32 *) Addr;
 10071b4:	e795e00e 	ldr	lr, [r5, lr]
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 10071b8:	e1a0e43e 	lsr	lr, lr, r4
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);
 10071bc:	e5c2e000 	strb	lr, [r2]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10071c0:	e5902000 	ldr	r2, [r0]
 10071c4:	e5922008 	ldr	r2, [r2, #8]
 10071c8:	e792210c 	ldr	r2, [r2, ip, lsl #2]
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10071cc:	e1a01132 	lsr	r1, r2, r1

	*Trigger = (u8)(RegValue & XSCUGIC_INT_CFG_MASK);
 10071d0:	e2011003 	and	r1, r1, #3
 10071d4:	e5c31000 	strb	r1, [r3]
 10071d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10071dc:	e3020e84 	movw	r0, #11908	; 0x2e84
 10071e0:	e3001367 	movw	r1, #871	; 0x367
 10071e4:	e3400101 	movt	r0, #257	; 0x101
 10071e8:	eb000282 	bl	1007bf8 <Xil_Assert>
 10071ec:	e3a03001 	mov	r3, #1
 10071f0:	e5843000 	str	r3, [r4]
 10071f4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10071f8:	e3020e84 	movw	r0, #11908	; 0x2e84
 10071fc:	e3a01fda 	mov	r1, #872	; 0x368
 1007200:	e3400101 	movt	r0, #257	; 0x101
 1007204:	eb00027b 	bl	1007bf8 <Xil_Assert>
 1007208:	e3a03001 	mov	r3, #1
 100720c:	e5843000 	str	r3, [r4]
 1007210:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007214:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007218:	e3001366 	movw	r1, #870	; 0x366
 100721c:	e3400101 	movt	r0, #257	; 0x101
 1007220:	eb000274 	bl	1007bf8 <Xil_Assert>
 1007224:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007228:	e3a02001 	mov	r2, #1
 100722c:	e3403102 	movt	r3, #258	; 0x102
 1007230:	e5832000 	str	r2, [r3]
 1007234:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Priority != NULL);
 1007238:	e3020e84 	movw	r0, #11908	; 0x2e84
 100723c:	e3001369 	movw	r1, #873	; 0x369
 1007240:	e3400101 	movt	r0, #257	; 0x101
 1007244:	eb00026b 	bl	1007bf8 <Xil_Assert>
 1007248:	e3a03001 	mov	r3, #1
 100724c:	e5843000 	str	r3, [r4]
 1007250:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Trigger != NULL);
 1007254:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007258:	e300136a 	movw	r1, #874	; 0x36a
 100725c:	e3400101 	movt	r0, #257	; 0x101
 1007260:	eb000264 	bl	1007bf8 <Xil_Assert>
 1007264:	e3a03001 	mov	r3, #1
 1007268:	e5843000 	str	r3, [r4]
}
 100726c:	e8bd8070 	pop	{r4, r5, r6, pc}

01007270 <XScuGic_InterruptMaptoCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 1007270:	e3500000 	cmp	r0, #0
{
 1007274:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007278:	0a000010 	beq	10072c0 <XScuGic_InterruptMaptoCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 100727c:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1007280:	e309cc78 	movw	ip, #40056	; 0x9c78
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007284:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 1007288:	e340c102 	movt	ip, #258	; 0x102
	RegValue = XScuGic_DistReadReg(InstancePtr,
 100728c:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 1007290:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007294:	e593e008 	ldr	lr, [r3, #8]
			XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 1007298:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 100729c:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 10072a0:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 10072a4:	e2022003 	and	r2, r2, #3
 10072a8:	e790100e 	ldr	r1, [r0, lr]

	RegValue |= (Cpu_Id) << (Offset*8U);
 10072ac:	e1a02182 	lsl	r2, r2, #3
 10072b0:	e6ef3073 	uxtb	r3, r3
 10072b4:	e1813213 	orr	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 10072b8:	e780300e 	str	r3, [r0, lr]
 10072bc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10072c0:	e3020e84 	movw	r0, #11908	; 0x2e84
 10072c4:	e30013a5 	movw	r1, #933	; 0x3a5
 10072c8:	e3400101 	movt	r0, #257	; 0x101
 10072cc:	eb000249 	bl	1007bf8 <Xil_Assert>
 10072d0:	e3093c78 	movw	r3, #40056	; 0x9c78
 10072d4:	e3a02001 	mov	r2, #1
 10072d8:	e3403102 	movt	r3, #258	; 0x102
 10072dc:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
					XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
					RegValue);
#endif
}
 10072e0:	e8bd8010 	pop	{r4, pc}

010072e4 <XScuGic_Enable>:
{
 10072e4:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 10072e8:	e3083030 	movw	r3, #32816	; 0x8030
	Xil_AssertVoid(InstancePtr != NULL);
 10072ec:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 10072f0:	e3403101 	movt	r3, #257	; 0x101
{
 10072f4:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 10072f8:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 10072fc:	0a000024 	beq	1007394 <XScuGic_Enable+0xb0>
 1007300:	e3095c78 	movw	r5, #40056	; 0x9c78
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007304:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1007308:	e3405102 	movt	r5, #258	; 0x102
 100730c:	e3a03000 	mov	r3, #0
 1007310:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007314:	8a000017 	bhi	1007378 <XScuGic_Enable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007318:	e5962004 	ldr	r2, [r6, #4]
 100731c:	e3013111 	movw	r3, #4369	; 0x1111
 1007320:	e3413111 	movt	r3, #4369	; 0x1111
 1007324:	e1520003 	cmp	r2, r3
 1007328:	1a00000b 	bne	100735c <XScuGic_Enable+0x78>
	XScuGic_InterruptMaptoCpu(InstancePtr, Cpu_Id, Int_Id);
 100732c:	e1a02004 	mov	r2, r4
 1007330:	e6ef1071 	uxtb	r1, r1
 1007334:	ebffffcd 	bl	1007270 <XScuGic_InterruptMaptoCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1007338:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 100733c:	e204101f 	and	r1, r4, #31
 1007340:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1007344:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1007348:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 100734c:	e5922008 	ldr	r2, [r2, #8]
 1007350:	e2844040 	add	r4, r4, #64	; 0x40
 1007354:	e7823104 	str	r3, [r2, r4, lsl #2]
 1007358:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100735c:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007360:	e300123d 	movw	r1, #573	; 0x23d
 1007364:	e3400101 	movt	r0, #257	; 0x101
 1007368:	eb000222 	bl	1007bf8 <Xil_Assert>
 100736c:	e3a03001 	mov	r3, #1
 1007370:	e5853000 	str	r3, [r5]
}
 1007374:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007378:	e3020e84 	movw	r0, #11908	; 0x2e84
 100737c:	e3a01f8f 	mov	r1, #572	; 0x23c
 1007380:	e3400101 	movt	r0, #257	; 0x101
 1007384:	eb00021b 	bl	1007bf8 <Xil_Assert>
 1007388:	e3a03001 	mov	r3, #1
 100738c:	e5853000 	str	r3, [r5]
 1007390:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007394:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007398:	e300123b 	movw	r1, #571	; 0x23b
 100739c:	e3400101 	movt	r0, #257	; 0x101
 10073a0:	eb000214 	bl	1007bf8 <Xil_Assert>
 10073a4:	e3093c78 	movw	r3, #40056	; 0x9c78
 10073a8:	e3a02001 	mov	r2, #1
 10073ac:	e3403102 	movt	r3, #258	; 0x102
 10073b0:	e5832000 	str	r2, [r3]
 10073b4:	e8bd8070 	pop	{r4, r5, r6, pc}

010073b8 <XScuGic_InterruptUnmapFromCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 10073b8:	e3500000 	cmp	r0, #0
{
 10073bc:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10073c0:	0a000010 	beq	1007408 <XScuGic_InterruptUnmapFromCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10073c4:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 10073c8:	e309cc78 	movw	ip, #40056	; 0x9c78
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10073cc:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 10073d0:	e340c102 	movt	ip, #258	; 0x102
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10073d4:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 10073d8:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10073dc:	e593e008 	ldr	lr, [r3, #8]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 10073e0:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 10073e4:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 10073e8:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 10073ec:	e2022003 	and	r2, r2, #3
	return *(volatile u32 *) Addr;
 10073f0:	e790100e 	ldr	r1, [r0, lr]

	RegValue &= ~(Cpu_Id << (Offset*8U));
 10073f4:	e1a02182 	lsl	r2, r2, #3
 10073f8:	e6ef3073 	uxtb	r3, r3
 10073fc:	e1c13213 	bic	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 1007400:	e780300e 	str	r3, [r0, lr]
 1007404:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007408:	e3020e84 	movw	r0, #11908	; 0x2e84
 100740c:	e30013d1 	movw	r1, #977	; 0x3d1
 1007410:	e3400101 	movt	r0, #257	; 0x101
 1007414:	eb0001f7 	bl	1007bf8 <Xil_Assert>
 1007418:	e3093c78 	movw	r3, #40056	; 0x9c78
 100741c:	e3a02001 	mov	r2, #1
 1007420:	e3403102 	movt	r3, #258	; 0x102
 1007424:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
			RegValue);
#endif
}
 1007428:	e8bd8010 	pop	{r4, pc}

0100742c <XScuGic_Disable>:
{
 100742c:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1007430:	e3083030 	movw	r3, #32816	; 0x8030
	Xil_AssertVoid(InstancePtr != NULL);
 1007434:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1007438:	e3403101 	movt	r3, #257	; 0x101
{
 100743c:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1007440:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1007444:	0a000024 	beq	10074dc <XScuGic_Disable+0xb0>
 1007448:	e3095c78 	movw	r5, #40056	; 0x9c78
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 100744c:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1007450:	e3405102 	movt	r5, #258	; 0x102
 1007454:	e3a03000 	mov	r3, #0
 1007458:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 100745c:	8a000017 	bhi	10074c0 <XScuGic_Disable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007460:	e5962004 	ldr	r2, [r6, #4]
 1007464:	e3013111 	movw	r3, #4369	; 0x1111
 1007468:	e3413111 	movt	r3, #4369	; 0x1111
 100746c:	e1520003 	cmp	r2, r3
 1007470:	1a00000b 	bne	10074a4 <XScuGic_Disable+0x78>
	XScuGic_InterruptUnmapFromCpu(InstancePtr, Cpu_Id, Int_Id);
 1007474:	e1a02004 	mov	r2, r4
 1007478:	e6ef1071 	uxtb	r1, r1
 100747c:	ebffffcd 	bl	10073b8 <XScuGic_InterruptUnmapFromCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1007480:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1007484:	e204101f 	and	r1, r4, #31
 1007488:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 100748c:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1007490:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1007494:	e5922008 	ldr	r2, [r2, #8]
 1007498:	e2844060 	add	r4, r4, #96	; 0x60
 100749c:	e7823104 	str	r3, [r2, r4, lsl #2]
 10074a0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10074a4:	e3020e84 	movw	r0, #11908	; 0x2e84
 10074a8:	e3a01f9e 	mov	r1, #632	; 0x278
 10074ac:	e3400101 	movt	r0, #257	; 0x101
 10074b0:	eb0001d0 	bl	1007bf8 <Xil_Assert>
 10074b4:	e3a03001 	mov	r3, #1
 10074b8:	e5853000 	str	r3, [r5]
}
 10074bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10074c0:	e3020e84 	movw	r0, #11908	; 0x2e84
 10074c4:	e3001277 	movw	r1, #631	; 0x277
 10074c8:	e3400101 	movt	r0, #257	; 0x101
 10074cc:	eb0001c9 	bl	1007bf8 <Xil_Assert>
 10074d0:	e3a03001 	mov	r3, #1
 10074d4:	e5853000 	str	r3, [r5]
 10074d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10074dc:	e3020e84 	movw	r0, #11908	; 0x2e84
 10074e0:	e3001276 	movw	r1, #630	; 0x276
 10074e4:	e3400101 	movt	r0, #257	; 0x101
 10074e8:	eb0001c2 	bl	1007bf8 <Xil_Assert>
 10074ec:	e3093c78 	movw	r3, #40056	; 0x9c78
 10074f0:	e3a02001 	mov	r2, #1
 10074f4:	e3403102 	movt	r3, #258	; 0x102
 10074f8:	e5832000 	str	r2, [r3]
 10074fc:	e8bd8070 	pop	{r4, r5, r6, pc}

01007500 <XScuGic_UnmapAllInterruptsFromCpu>:
{
	u32 Int_Id;
	u32 Target_Cpu;
	u32 LocalCpuID = (1U << Cpu_Id);

	Xil_AssertVoid(InstancePtr != NULL);
 1007500:	e3500000 	cmp	r0, #0
{
 1007504:	e92d4010 	push	{r4, lr}
	u32 LocalCpuID = (1U << Cpu_Id);
 1007508:	e3a04001 	mov	r4, #1
 100750c:	e1a01114 	lsl	r1, r4, r1
	Xil_AssertVoid(InstancePtr != NULL);
 1007510:	0a000011 	beq	100755c <XScuGic_UnmapAllInterruptsFromCpu+0x5c>

	LocalCpuID |= LocalCpuID << 8U;
 1007514:	e1811401 	orr	r1, r1, r1, lsl #8
	Xil_AssertVoid(InstancePtr != NULL);
 1007518:	e3093c78 	movw	r3, #40056	; 0x9c78
 100751c:	e3403102 	movt	r3, #258	; 0x102
	LocalCpuID |= LocalCpuID << 16U;

	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1007520:	e590c000 	ldr	ip, [r0]
	LocalCpuID |= LocalCpuID << 16U;
 1007524:	e1811801 	orr	r1, r1, r1, lsl #16
	Xil_AssertVoid(InstancePtr != NULL);
 1007528:	e3a02000 	mov	r2, #0
 100752c:	e5832000 	str	r2, [r3]
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007530:	e3a03020 	mov	r3, #32
 1007534:	e1e00001 	mvn	r0, r1
		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1007538:	e59c2008 	ldr	r2, [ip, #8]
 100753c:	e2822b02 	add	r2, r2, #2048	; 0x800
	return *(volatile u32 *) Addr;
 1007540:	e7921003 	ldr	r1, [r2, r3]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));
		/* Remove LocalCpuID from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1007544:	e0011000 	and	r1, r1, r0
	*LocalAddr = Value;
 1007548:	e7821003 	str	r1, [r2, r3]
			Int_Id = Int_Id+4U) {
 100754c:	e2833004 	add	r3, r3, #4
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007550:	e3530060 	cmp	r3, #96	; 0x60
 1007554:	1afffff7 	bne	1007538 <XScuGic_UnmapAllInterruptsFromCpu+0x38>
 1007558:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 100755c:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007560:	e30013f1 	movw	r1, #1009	; 0x3f1
 1007564:	e3400101 	movt	r0, #257	; 0x101
 1007568:	eb0001a2 	bl	1007bf8 <Xil_Assert>
 100756c:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007570:	e3403102 	movt	r3, #258	; 0x102
 1007574:	e5834000 	str	r4, [r3]
 1007578:	e8bd8010 	pop	{r4, pc}

0100757c <XScuGic_Stop>:
{
	u32 Int_Id;
	u32 RegValue;
	u32 Target_Cpu;
	u32 DistDisable = 1; /* Track distributor status*/
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 100757c:	e3083030 	movw	r3, #32816	; 0x8030

	Xil_AssertVoid(InstancePtr != NULL);
 1007580:	e3500000 	cmp	r0, #0
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1007584:	e3403101 	movt	r3, #257	; 0x101
{
 1007588:	e92d4070 	push	{r4, r5, r6, lr}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 100758c:	e593e000 	ldr	lr, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1007590:	0a000027 	beq	1007634 <XScuGic_Stop+0xb8>
 1007594:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007598:	e3a02000 	mov	r2, #0

	/* If distributor is already disabled, no need to do anything */
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 100759c:	e5904000 	ldr	r4, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 10075a0:	e3403102 	movt	r3, #258	; 0x102
 10075a4:	e5832000 	str	r2, [r3]
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 10075a8:	e5941008 	ldr	r1, [r4, #8]
	return *(volatile u32 *) Addr;
 10075ac:	e5913000 	ldr	r3, [r1]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 10075b0:	e3130001 	tst	r3, #1
 10075b4:	08bd8070 	popeq	{r4, r5, r6, pc}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 10075b8:	e3a0c001 	mov	ip, #1
	/*
	 * Check if the interrupt are targeted to current cpu only or not.
	 * Also remove current cpu from interrupt target register for all
	 * interrupts.
	 */
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10075bc:	e3a02020 	mov	r2, #32
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 10075c0:	e1a0ee1c 	lsl	lr, ip, lr
	LocalCpuID |= LocalCpuID << 8U;
 10075c4:	e18ee40e 	orr	lr, lr, lr, lsl #8
	LocalCpuID |= LocalCpuID << 16U;
 10075c8:	e18ee80e 	orr	lr, lr, lr, lsl #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10075cc:	e1e0500e 	mvn	r5, lr
 10075d0:	ea000000 	b	10075d8 <XScuGic_Stop+0x5c>
 10075d4:	e5941008 	ldr	r1, [r4, #8]
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 10075d8:	e2820b02 	add	r0, r2, #2048	; 0x800
			Int_Id = Int_Id+4U) {
 10075dc:	e2822004 	add	r2, r2, #4
 10075e0:	e7903001 	ldr	r3, [r0, r1]
		if ((Target_Cpu != LocalCpuID) && (Target_Cpu != 0)) {
			/*
			 * If any other CPU is also programmed to target
			 * register, GIC distributor can not be disabled.
			 */
			DistDisable = 0;
 10075e4:	e15e0003 	cmp	lr, r3
 10075e8:	13530000 	cmpne	r3, #0
		}

		/* Remove current CPU from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 10075ec:	e0033005 	and	r3, r3, r5
			DistDisable = 0;
 10075f0:	13a0c000 	movne	ip, #0
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10075f4:	e3520060 	cmp	r2, #96	; 0x60
	*LocalAddr = Value;
 10075f8:	e7803001 	str	r3, [r0, r1]
 10075fc:	1afffff4 	bne	10075d4 <XScuGic_Stop+0x58>

	/*
	 * If GIC distributor is safe to be disabled, disable all the interrupt
	 * and then disable distributor.
	 */
	if (DistDisable == 1) {
 1007600:	e35c0001 	cmp	ip, #1
 1007604:	18bd8070 	popne	{r4, r5, r6, pc}
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
				Int_Id = Int_Id+32U) {
			/*
			 * Disable all the interrupts
			 */
			XScuGic_DistWriteReg(InstancePtr,
 1007608:	e5941008 	ldr	r1, [r4, #8]
 100760c:	e3e03000 	mvn	r3, #0
 1007610:	e3a02000 	mov	r2, #0
 1007614:	e5813180 	str	r3, [r1, #384]	; 0x180
 1007618:	e5941008 	ldr	r1, [r4, #8]
 100761c:	e5813184 	str	r3, [r1, #388]	; 0x184
 1007620:	e5941008 	ldr	r1, [r4, #8]
 1007624:	e5813188 	str	r3, [r1, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1007628:	e5943008 	ldr	r3, [r4, #8]
	*LocalAddr = Value;
 100762c:	e5832000 	str	r2, [r3]
							Int_Id),
			0xFFFFFFFFU);
		}
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET, 0U);
	}
}
 1007630:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007634:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007638:	e3001419 	movw	r1, #1049	; 0x419
 100763c:	e3400101 	movt	r0, #257	; 0x101
 1007640:	eb00016c 	bl	1007bf8 <Xil_Assert>
 1007644:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007648:	e3a02001 	mov	r2, #1
 100764c:	e3403102 	movt	r3, #258	; 0x102
 1007650:	e5832000 	str	r2, [r3]
 1007654:	e8bd8070 	pop	{r4, r5, r6, pc}

01007658 <XScuGic_CfgInitialize>:
{
 1007658:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 100765c:	e2504000 	subs	r4, r0, #0
 1007660:	0a000049 	beq	100778c <XScuGic_CfgInitialize+0x134>
 1007664:	e3095c78 	movw	r5, #40056	; 0x9c78
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1007668:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 100766c:	e3405102 	movt	r5, #258	; 0x102
 1007670:	e3a02000 	mov	r2, #0
 1007674:	e5852000 	str	r2, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1007678:	0a00004c 	beq	10077b0 <XScuGic_CfgInitialize+0x158>
	if(InstancePtr->IsReady != XIL_COMPONENT_IS_READY) {
 100767c:	e5940004 	ldr	r0, [r4, #4]
 1007680:	e3013111 	movw	r3, #4369	; 0x1111
 1007684:	e3413111 	movt	r3, #4369	; 0x1111
 1007688:	e1500003 	cmp	r0, r3
 100768c:	0a00001e 	beq	100770c <XScuGic_CfgInitialize+0xb4>
						= (Xil_InterruptHandler)StubHandler;
 1007690:	e306cd38 	movw	ip, #27960	; 0x6d38
 1007694:	e1a03001 	mov	r3, r1
 1007698:	e340c100 	movt	ip, #256	; 0x100
 100769c:	e2810fbe 	add	r0, r1, #760	; 0x2f8
		InstancePtr->IsReady = 0U;
 10076a0:	e5842004 	str	r2, [r4, #4]
		InstancePtr->Config = ConfigPtr;
 10076a4:	e5841000 	str	r1, [r4]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 10076a8:	e593200c 	ldr	r2, [r3, #12]
 10076ac:	e2833008 	add	r3, r3, #8
			InstancePtr->Config->HandlerTable[Int_Id].CallBackRef =
 10076b0:	e5834008 	str	r4, [r3, #8]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 10076b4:	e3520000 	cmp	r2, #0
						= (Xil_InterruptHandler)StubHandler;
 10076b8:	0583c004 	streq	ip, [r3, #4]
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10076bc:	e1500003 	cmp	r0, r3
 10076c0:	1afffff8 	bne	10076a8 <XScuGic_CfgInitialize+0x50>
		XScuGic_Stop(InstancePtr);
 10076c4:	e1a00004 	mov	r0, r4
 10076c8:	ebffffab 	bl	100757c <XScuGic_Stop>
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 10076cc:	e5941000 	ldr	r1, [r4]
	Xil_AssertVoid(InstancePtr != NULL);
 10076d0:	e3a03000 	mov	r3, #0
 10076d4:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 10076d8:	e5910008 	ldr	r0, [r1, #8]
 10076dc:	e5903000 	ldr	r3, [r0]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 10076e0:	e2133001 	ands	r3, r3, #1
 10076e4:	0a00000a 	beq	1007714 <XScuGic_CfgInitialize+0xbc>
	XScuGic_CPUWriteReg(InstancePtr, XSCUGIC_CPU_PRIOR_OFFSET, 0xF0U);
 10076e8:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 10076ec:	e3a0c0f0 	mov	ip, #240	; 0xf0
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10076f0:	e3013111 	movw	r3, #4369	; 0x1111
 10076f4:	e3a00007 	mov	r0, #7
 10076f8:	e3413111 	movt	r3, #4369	; 0x1111
 10076fc:	e582c004 	str	ip, [r2, #4]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1007700:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1007704:	e5820000 	str	r0, [r2]
 1007708:	e5843004 	str	r3, [r4, #4]
}
 100770c:	e3a00000 	mov	r0, #0
 1007710:	e8bd8070 	pop	{r4, r5, r6, pc}
 1007714:	e1a0c003 	mov	ip, r3
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007718:	e3a02020 	mov	r2, #32
 100771c:	e5803000 	str	r3, [r0]
		XScuGic_DistWriteReg(InstancePtr,
 1007720:	e1a03222 	lsr	r3, r2, #4
 1007724:	e5910008 	ldr	r0, [r1, #8]
			Int_Id = Int_Id+16U) {
 1007728:	e2822010 	add	r2, r2, #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 100772c:	e3520060 	cmp	r2, #96	; 0x60
		XScuGic_DistWriteReg(InstancePtr,
 1007730:	e2833c03 	add	r3, r3, #768	; 0x300
 1007734:	e780c103 	str	ip, [r0, r3, lsl #2]
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007738:	1afffff8 	bne	1007720 <XScuGic_CfgInitialize+0xc8>
 100773c:	e30a00a0 	movw	r0, #41120	; 0xa0a0
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007740:	e3a03000 	mov	r3, #0
 1007744:	e34a00a0 	movt	r0, #41120	; 0xa0a0
		XScuGic_DistWriteReg(InstancePtr,
 1007748:	e5912008 	ldr	r2, [r1, #8]
 100774c:	e2822b01 	add	r2, r2, #1024	; 0x400
 1007750:	e7820003 	str	r0, [r2, r3]
			Int_Id = Int_Id+4U) {
 1007754:	e2833004 	add	r3, r3, #4
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007758:	e3530060 	cmp	r3, #96	; 0x60
 100775c:	1afffff9 	bne	1007748 <XScuGic_CfgInitialize+0xf0>
		XScuGic_DistWriteReg(InstancePtr,
 1007760:	e5910008 	ldr	r0, [r1, #8]
 1007764:	e3e03000 	mvn	r3, #0
 1007768:	e3a02001 	mov	r2, #1
 100776c:	e5803180 	str	r3, [r0, #384]	; 0x180
 1007770:	e5910008 	ldr	r0, [r1, #8]
 1007774:	e5803184 	str	r3, [r0, #388]	; 0x184
 1007778:	e5910008 	ldr	r0, [r1, #8]
 100777c:	e5803188 	str	r3, [r0, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1007780:	e5913008 	ldr	r3, [r1, #8]
	*LocalAddr = Value;
 1007784:	e5832000 	str	r2, [r3]
 1007788:	eaffffd6 	b	10076e8 <XScuGic_CfgInitialize+0x90>
	Xil_AssertNonvoid(InstancePtr != NULL);
 100778c:	e3020e84 	movw	r0, #11908	; 0x2e84
 1007790:	e3001181 	movw	r1, #385	; 0x181
 1007794:	e3400101 	movt	r0, #257	; 0x101
 1007798:	eb000116 	bl	1007bf8 <Xil_Assert>
 100779c:	e3093c78 	movw	r3, #40056	; 0x9c78
 10077a0:	e3a02001 	mov	r2, #1
 10077a4:	e3403102 	movt	r3, #258	; 0x102
 10077a8:	e5832000 	str	r2, [r3]
 10077ac:	eaffffd6 	b	100770c <XScuGic_CfgInitialize+0xb4>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 10077b0:	e3020e84 	movw	r0, #11908	; 0x2e84
 10077b4:	e3001182 	movw	r1, #386	; 0x182
 10077b8:	e3400101 	movt	r0, #257	; 0x101
 10077bc:	eb00010d 	bl	1007bf8 <Xil_Assert>
 10077c0:	e3a03001 	mov	r3, #1
 10077c4:	e5853000 	str	r3, [r5]
 10077c8:	eaffffcf 	b	100770c <XScuGic_CfgInitialize+0xb4>

010077cc <XScuGic_SetCpuID>:
* @note		None
*
*****************************************************************************/
void XScuGic_SetCpuID(u32 CpuCoreId)
{
	Xil_AssertVoid(CpuCoreId <= 1U);
 10077cc:	e3500001 	cmp	r0, #1
 10077d0:	8a000007 	bhi	10077f4 <XScuGic_SetCpuID+0x28>
 10077d4:	e3092c78 	movw	r2, #40056	; 0x9c78

	CpuId = CpuCoreId;
 10077d8:	e3083030 	movw	r3, #32816	; 0x8030
	Xil_AssertVoid(CpuCoreId <= 1U);
 10077dc:	e3402102 	movt	r2, #258	; 0x102
 10077e0:	e3a01000 	mov	r1, #0
	CpuId = CpuCoreId;
 10077e4:	e3403101 	movt	r3, #257	; 0x101
	Xil_AssertVoid(CpuCoreId <= 1U);
 10077e8:	e5821000 	str	r1, [r2]
	CpuId = CpuCoreId;
 10077ec:	e5830000 	str	r0, [r3]
 10077f0:	e12fff1e 	bx	lr
	Xil_AssertVoid(CpuCoreId <= 1U);
 10077f4:	e3020e84 	movw	r0, #11908	; 0x2e84
{
 10077f8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CpuCoreId <= 1U);
 10077fc:	e300145d 	movw	r1, #1117	; 0x45d
 1007800:	e3400101 	movt	r0, #257	; 0x101
 1007804:	eb0000fb 	bl	1007bf8 <Xil_Assert>
 1007808:	e3093c78 	movw	r3, #40056	; 0x9c78
 100780c:	e3a02001 	mov	r2, #1
 1007810:	e3403102 	movt	r3, #258	; 0x102
 1007814:	e5832000 	str	r2, [r3]
}
 1007818:	e8bd8010 	pop	{r4, pc}

0100781c <XScuGic_GetCpuID>:
* @note        None.
*
*****************************************************************************/
u32 XScuGic_GetCpuID(void)
{
	return CpuId;
 100781c:	e3083030 	movw	r3, #32816	; 0x8030
 1007820:	e3403101 	movt	r3, #257	; 0x101
}
 1007824:	e5930000 	ldr	r0, [r3]
 1007828:	e12fff1e 	bx	lr

0100782c <XScuGic_LookupConfig>:
{
	XScuGic_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_SCUGIC_NUM_INSTANCES; Index++) {
		if (XScuGic_ConfigTable[Index].DeviceId == DeviceId) {
 100782c:	e30330fc 	movw	r3, #12540	; 0x30fc
 1007830:	e3403101 	movt	r3, #257	; 0x101
 1007834:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuGic_Config *)CfgPtr;
}
 1007838:	e1520000 	cmp	r2, r0
 100783c:	01a00003 	moveq	r0, r3
 1007840:	13a00000 	movne	r0, #0
 1007844:	e12fff1e 	bx	lr

01007848 <XScuTimer_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XScuTimer_CfgInitialize(XScuTimer *InstancePtr,
			 XScuTimer_Config *ConfigPtr, u32 EffectiveAddress)
{
 1007848:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;
	Xil_AssertNonvoid(InstancePtr != NULL);
 100784c:	e2505000 	subs	r5, r0, #0
 1007850:	0a000016 	beq	10078b0 <XScuTimer_CfgInitialize+0x68>
 1007854:	e3096c78 	movw	r6, #40056	; 0x9c78
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1007858:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 100785c:	e3406102 	movt	r6, #258	; 0x102
 1007860:	e3a03000 	mov	r3, #0
 1007864:	e1a04001 	mov	r4, r1
 1007868:	e5863000 	str	r3, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 100786c:	0a000019 	beq	10078d8 <XScuTimer_CfgInitialize+0x90>
	 * If the device is started, disallow the initialize and return a
	 * status indicating it is started. This allows the user to stop the
	 * device and reinitialize, but prevents a user from inadvertently
	 * initializing.
	 */
	if (InstancePtr->IsStarted != XIL_COMPONENT_IS_STARTED) {
 1007870:	e595000c 	ldr	r0, [r5, #12]
 1007874:	e3021222 	movw	r1, #8738	; 0x2222
 1007878:	e3421222 	movt	r1, #8738	; 0x2222
 100787c:	e1500001 	cmp	r0, r1
 1007880:	0a000008 	beq	10078a8 <XScuTimer_CfgInitialize+0x60>
		/*
		 * Copy configuration into the instance structure.
		 */
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1007884:	e1d4c0b0 	ldrh	ip, [r4]
		InstancePtr->IsStarted = (u32)0;

		/*
		 * Indicate the instance is ready to use, successfully initialized.
		 */
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1007888:	e3011111 	movw	r1, #4369	; 0x1111
 100788c:	e3411111 	movt	r1, #4369	; 0x1111

		Status =(s32)XST_SUCCESS;
 1007890:	e1a00003 	mov	r0, r3
		InstancePtr->Config.BaseAddr = EffectiveAddress;
 1007894:	e5852004 	str	r2, [r5, #4]
		InstancePtr->IsStarted = (u32)0;
 1007898:	e585300c 	str	r3, [r5, #12]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 100789c:	e1c5c0b0 	strh	ip, [r5]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10078a0:	e5851008 	str	r1, [r5, #8]
	}
	else {
		Status = (s32)XST_DEVICE_IS_STARTED;
	}
	return Status;
}
 10078a4:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 10078a8:	e3a00005 	mov	r0, #5
 10078ac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10078b0:	e3020e90 	movw	r0, #11920	; 0x2e90
 10078b4:	e3a01054 	mov	r1, #84	; 0x54
 10078b8:	e3400101 	movt	r0, #257	; 0x101
 10078bc:	eb0000cd 	bl	1007bf8 <Xil_Assert>
 10078c0:	e3093c78 	movw	r3, #40056	; 0x9c78
 10078c4:	e3a02001 	mov	r2, #1
 10078c8:	e3403102 	movt	r3, #258	; 0x102
 10078cc:	e1a00005 	mov	r0, r5
 10078d0:	e5832000 	str	r2, [r3]
 10078d4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 10078d8:	e3020e90 	movw	r0, #11920	; 0x2e90
 10078dc:	e3a01055 	mov	r1, #85	; 0x55
 10078e0:	e3400101 	movt	r0, #257	; 0x101
 10078e4:	eb0000c3 	bl	1007bf8 <Xil_Assert>
 10078e8:	e3a03001 	mov	r3, #1
 10078ec:	e1a00004 	mov	r0, r4
 10078f0:	e5863000 	str	r3, [r6]
 10078f4:	e8bd8070 	pop	{r4, r5, r6, pc}

010078f8 <XScuTimer_Start>:
******************************************************************************/
void XScuTimer_Start(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 10078f8:	e3500000 	cmp	r0, #0
{
 10078fc:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007900:	0a000017 	beq	1007964 <XScuTimer_Start+0x6c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007904:	e5901008 	ldr	r1, [r0, #8]
 1007908:	e3013111 	movw	r3, #4369	; 0x1111
 100790c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007910:	e3094c78 	movw	r4, #40056	; 0x9c78
 1007914:	e3404102 	movt	r4, #258	; 0x102
 1007918:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100791c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007920:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007924:	1a000007 	bne	1007948 <XScuTimer_Start+0x50>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1007928:	e5901004 	ldr	r1, [r0, #4]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is started.
	 */
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 100792c:	e3022222 	movw	r2, #8738	; 0x2222
 1007930:	e3422222 	movt	r2, #8738	; 0x2222
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1007934:	e5913008 	ldr	r3, [r1, #8]
	Register |= XSCUTIMER_CONTROL_ENABLE_MASK;
 1007938:	e3833001 	orr	r3, r3, #1
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100793c:	e5813008 	str	r3, [r1, #8]
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 1007940:	e580200c 	str	r2, [r0, #12]
 1007944:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007948:	e3020e90 	movw	r0, #11920	; 0x2e90
 100794c:	e3a01089 	mov	r1, #137	; 0x89
 1007950:	e3400101 	movt	r0, #257	; 0x101
 1007954:	eb0000a7 	bl	1007bf8 <Xil_Assert>
 1007958:	e3a03001 	mov	r3, #1
 100795c:	e5843000 	str	r3, [r4]
}
 1007960:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007964:	e3020e90 	movw	r0, #11920	; 0x2e90
 1007968:	e3a01088 	mov	r1, #136	; 0x88
 100796c:	e3400101 	movt	r0, #257	; 0x101
 1007970:	eb0000a0 	bl	1007bf8 <Xil_Assert>
 1007974:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007978:	e3a02001 	mov	r2, #1
 100797c:	e3403102 	movt	r3, #258	; 0x102
 1007980:	e5832000 	str	r2, [r3]
 1007984:	e8bd8010 	pop	{r4, pc}

01007988 <XScuTimer_Stop>:
******************************************************************************/
void XScuTimer_Stop(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1007988:	e3500000 	cmp	r0, #0
{
 100798c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007990:	0a000015 	beq	10079ec <XScuTimer_Stop+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007994:	e5901008 	ldr	r1, [r0, #8]
 1007998:	e3013111 	movw	r3, #4369	; 0x1111
 100799c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10079a0:	e3094c78 	movw	r4, #40056	; 0x9c78
 10079a4:	e3404102 	movt	r4, #258	; 0x102
 10079a8:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10079ac:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10079b0:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10079b4:	1a000005 	bne	10079d0 <XScuTimer_Stop+0x48>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 10079b8:	e5901004 	ldr	r1, [r0, #4]
	return *(volatile u32 *) Addr;
 10079bc:	e5913008 	ldr	r3, [r1, #8]
				  XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear the 'timer enable' bit in the register.
	 */
	Register &= (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 10079c0:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 10079c4:	e5813008 	str	r3, [r1, #8]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is stopped.
	 */
	InstancePtr->IsStarted = (u32)0;
 10079c8:	e580200c 	str	r2, [r0, #12]
 10079cc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10079d0:	e3020e90 	movw	r0, #11920	; 0x2e90
 10079d4:	e3a010b3 	mov	r1, #179	; 0xb3
 10079d8:	e3400101 	movt	r0, #257	; 0x101
 10079dc:	eb000085 	bl	1007bf8 <Xil_Assert>
 10079e0:	e3a03001 	mov	r3, #1
 10079e4:	e5843000 	str	r3, [r4]
}
 10079e8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10079ec:	e3020e90 	movw	r0, #11920	; 0x2e90
 10079f0:	e3a010b2 	mov	r1, #178	; 0xb2
 10079f4:	e3400101 	movt	r0, #257	; 0x101
 10079f8:	eb00007e 	bl	1007bf8 <Xil_Assert>
 10079fc:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007a00:	e3a02001 	mov	r2, #1
 1007a04:	e3403102 	movt	r3, #258	; 0x102
 1007a08:	e5832000 	str	r2, [r3]
 1007a0c:	e8bd8010 	pop	{r4, pc}

01007a10 <XScuTimer_SetPrescaler>:
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
 1007a10:	e3500000 	cmp	r0, #0
{
 1007a14:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007a18:	0a000015 	beq	1007a74 <XScuTimer_SetPrescaler+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a1c:	e590e008 	ldr	lr, [r0, #8]
 1007a20:	e3012111 	movw	r2, #4369	; 0x1111
 1007a24:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007a28:	e3094c78 	movw	r4, #40056	; 0x9c78
 1007a2c:	e3404102 	movt	r4, #258	; 0x102
 1007a30:	e3a0c000 	mov	ip, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a34:	e15e0002 	cmp	lr, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1007a38:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a3c:	1a000005 	bne	1007a58 <XScuTimer_SetPrescaler+0x48>
	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1007a40:	e5902004 	ldr	r2, [r0, #4]
	return *(volatile u32 *) Addr;
 1007a44:	e5923008 	ldr	r3, [r2, #8]
					XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear all of the prescaler control bits in the register.
	 */
	ControlReg &= (u32)(~XSCUTIMER_CONTROL_PRESCALER_MASK);
 1007a48:	e3c33cff 	bic	r3, r3, #65280	; 0xff00

	/*
	 * Set the prescaler value.
	 */
	ControlReg |= (((u32)PrescalerValue) << XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 1007a4c:	e1833401 	orr	r3, r3, r1, lsl #8
	*LocalAddr = Value;
 1007a50:	e5823008 	str	r3, [r2, #8]
 1007a54:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a58:	e3020e90 	movw	r0, #11920	; 0x2e90
 1007a5c:	e3a010e1 	mov	r1, #225	; 0xe1
 1007a60:	e3400101 	movt	r0, #257	; 0x101
 1007a64:	eb000063 	bl	1007bf8 <Xil_Assert>
 1007a68:	e3a03001 	mov	r3, #1
 1007a6c:	e5843000 	str	r3, [r4]
	/*
	 * Write the register with the new values.
	 */
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
			  XSCUTIMER_CONTROL_OFFSET, ControlReg);
}
 1007a70:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007a74:	e3020e90 	movw	r0, #11920	; 0x2e90
 1007a78:	e3a010e0 	mov	r1, #224	; 0xe0
 1007a7c:	e3400101 	movt	r0, #257	; 0x101
 1007a80:	eb00005c 	bl	1007bf8 <Xil_Assert>
 1007a84:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007a88:	e3a02001 	mov	r2, #1
 1007a8c:	e3403102 	movt	r3, #258	; 0x102
 1007a90:	e5832000 	str	r2, [r3]
 1007a94:	e8bd8010 	pop	{r4, pc}

01007a98 <XScuTimer_GetPrescaler>:
*
* @note		None.
*
****************************************************************************/
u8 XScuTimer_GetPrescaler(XScuTimer *InstancePtr)
{
 1007a98:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007a9c:	e2506000 	subs	r6, r0, #0
 1007aa0:	0a000014 	beq	1007af8 <XScuTimer_GetPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007aa4:	e5962008 	ldr	r2, [r6, #8]
 1007aa8:	e3013111 	movw	r3, #4369	; 0x1111
 1007aac:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007ab0:	e3095c78 	movw	r5, #40056	; 0x9c78
 1007ab4:	e3405102 	movt	r5, #258	; 0x102
 1007ab8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007abc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007ac0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ac4:	1a000003 	bne	1007ad8 <XScuTimer_GetPrescaler+0x40>

	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1007ac8:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 1007acc:	e5930008 	ldr	r0, [r3, #8]
				    XSCUTIMER_CONTROL_OFFSET);
	ControlReg &= XSCUTIMER_CONTROL_PRESCALER_MASK;

	return (u8)(ControlReg >> XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 1007ad0:	e7e70450 	ubfx	r0, r0, #8, #8
 1007ad4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ad8:	e3020e90 	movw	r0, #11920	; 0x2e90
 1007adc:	e300110d 	movw	r1, #269	; 0x10d
 1007ae0:	e3400101 	movt	r0, #257	; 0x101
 1007ae4:	eb000043 	bl	1007bf8 <Xil_Assert>
 1007ae8:	e3a03001 	mov	r3, #1
 1007aec:	e1a00004 	mov	r0, r4
 1007af0:	e5853000 	str	r3, [r5]
}
 1007af4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007af8:	e3020e90 	movw	r0, #11920	; 0x2e90
 1007afc:	e3a01f43 	mov	r1, #268	; 0x10c
 1007b00:	e3400101 	movt	r0, #257	; 0x101
 1007b04:	eb00003b 	bl	1007bf8 <Xil_Assert>
 1007b08:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007b0c:	e3a02001 	mov	r2, #1
 1007b10:	e3403102 	movt	r3, #258	; 0x102
 1007b14:	e1a00006 	mov	r0, r6
 1007b18:	e5832000 	str	r2, [r3]
 1007b1c:	e8bd8070 	pop	{r4, r5, r6, pc}

01007b20 <XScuTimer_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XScuTimer_SelfTest(XScuTimer *InstancePtr)
{
 1007b20:	e92d4070 	push	{r4, r5, r6, lr}

	/*
	 * Assert to ensure the inputs are valid and the instance has been
	 * initialized.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007b24:	e2505000 	subs	r5, r0, #0
 1007b28:	0a000021 	beq	1007bb4 <XScuTimer_SelfTest+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b2c:	e5952008 	ldr	r2, [r5, #8]
 1007b30:	e3013111 	movw	r3, #4369	; 0x1111
 1007b34:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007b38:	e3096c78 	movw	r6, #40056	; 0x9c78
 1007b3c:	e3406102 	movt	r6, #258	; 0x102
 1007b40:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b44:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007b48:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b4c:	1a000010 	bne	1007b94 <XScuTimer_SelfTest+0x74>

	/*
	 * Save the contents of the Control Register and stop the timer.
	 */
	CtrlOrig = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1007b50:	e5952004 	ldr	r2, [r5, #4]
	*LocalAddr = Value;
 1007b54:	e30f400f 	movw	r4, #61455	; 0xf00f
 1007b58:	e34a455a 	movt	r4, #42330	; 0xa55a
	return *(volatile u32 *) Addr;
 1007b5c:	e5923008 	ldr	r3, [r2, #8]
				  XSCUTIMER_CONTROL_OFFSET);
	Register = CtrlOrig & (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 1007b60:	e3c31001 	bic	r1, r3, #1
	*LocalAddr = Value;
 1007b64:	e5821008 	str	r1, [r2, #8]
	return *(volatile u32 *) Addr;
 1007b68:	e5952004 	ldr	r2, [r5, #4]
 1007b6c:	e5921000 	ldr	r1, [r2]
	*LocalAddr = Value;
 1007b70:	e5824000 	str	r4, [r2]
	return *(volatile u32 *) Addr;
 1007b74:	e5952004 	ldr	r2, [r5, #4]
 1007b78:	e5920000 	ldr	r0, [r2]
	*LocalAddr = Value;
 1007b7c:	e5821000 	str	r1, [r2]

	/*
	 * Restore the contents of the Load Register and Control Register.
	 */
	XScuTimer_LoadTimer(InstancePtr, LoadOrig);
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
 1007b80:	e5952004 	ldr	r2, [r5, #4]

	/*
	 * Return a Failure if the contents of the Load Register do not
	 * match with the value written to it.
	 */
	if (Register != XSCUTIMER_SELFTEST_VALUE) {
 1007b84:	e0500004 	subs	r0, r0, r4
 1007b88:	13a00001 	movne	r0, #1
 1007b8c:	e5823008 	str	r3, [r2, #8]
 1007b90:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b94:	e3020e9c 	movw	r0, #11932	; 0x2e9c
 1007b98:	e3a0105b 	mov	r1, #91	; 0x5b
 1007b9c:	e3400101 	movt	r0, #257	; 0x101
 1007ba0:	eb000014 	bl	1007bf8 <Xil_Assert>
 1007ba4:	e3a03001 	mov	r3, #1
 1007ba8:	e1a00004 	mov	r0, r4
 1007bac:	e5863000 	str	r3, [r6]
	else {
		Status = (s32)XST_SUCCESS;
	}

	return Status;
}
 1007bb0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007bb4:	e3020e9c 	movw	r0, #11932	; 0x2e9c
 1007bb8:	e3a0105a 	mov	r1, #90	; 0x5a
 1007bbc:	e3400101 	movt	r0, #257	; 0x101
 1007bc0:	eb00000c 	bl	1007bf8 <Xil_Assert>
 1007bc4:	e3093c78 	movw	r3, #40056	; 0x9c78
 1007bc8:	e3a02001 	mov	r2, #1
 1007bcc:	e3403102 	movt	r3, #258	; 0x102
 1007bd0:	e1a00005 	mov	r0, r5
 1007bd4:	e5832000 	str	r2, [r3]
 1007bd8:	e8bd8070 	pop	{r4, r5, r6, pc}

01007bdc <XScuTimer_LookupConfig>:
{
	XScuTimer_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < XPAR_XSCUTIMER_NUM_INSTANCES; Index++) {
		if (XScuTimer_ConfigTable[Index].DeviceId == DeviceId) {
 1007bdc:	e30330b8 	movw	r3, #12472	; 0x30b8
 1007be0:	e3403101 	movt	r3, #257	; 0x101
 1007be4:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuTimer_Config *)CfgPtr;
}
 1007be8:	e1520000 	cmp	r2, r0
 1007bec:	01a00003 	moveq	r0, r3
 1007bf0:	13a00000 	movne	r0, #0
 1007bf4:	e12fff1e 	bx	lr

01007bf8 <Xil_Assert>:
*
******************************************************************************/
void Xil_Assert(const char8 *File, s32 Line)
{
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
 1007bf8:	e3083034 	movw	r3, #32820	; 0x8034
 1007bfc:	e3403101 	movt	r3, #257	; 0x101
 1007c00:	e5933000 	ldr	r3, [r3]
 1007c04:	e3530000 	cmp	r3, #0
 1007c08:	0a000009 	beq	1007c34 <Xil_Assert+0x3c>
{
 1007c0c:	e92d4010 	push	{r4, lr}
		(*Xil_AssertCallbackRoutine)(File, Line);
 1007c10:	e12fff33 	blx	r3
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait != 0) {
 1007c14:	e30330c0 	movw	r3, #12480	; 0x30c0
 1007c18:	e3403101 	movt	r3, #257	; 0x101
 1007c1c:	e5933000 	ldr	r3, [r3]
 1007c20:	e3530000 	cmp	r3, #0
 1007c24:	08bd8010 	popeq	{r4, pc}
 1007c28:	e3530000 	cmp	r3, #0
 1007c2c:	1afffffb 	bne	1007c20 <Xil_Assert+0x28>
 1007c30:	e8bd8010 	pop	{r4, pc}
 1007c34:	e30330c0 	movw	r3, #12480	; 0x30c0
 1007c38:	e3403101 	movt	r3, #257	; 0x101
 1007c3c:	e5933000 	ldr	r3, [r3]
 1007c40:	e3530000 	cmp	r3, #0
 1007c44:	012fff1e 	bxeq	lr
 1007c48:	e3530000 	cmp	r3, #0
 1007c4c:	1afffffb 	bne	1007c40 <Xil_Assert+0x48>
 1007c50:	e12fff1e 	bx	lr

01007c54 <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
 1007c54:	e3083034 	movw	r3, #32820	; 0x8034
 1007c58:	e3403101 	movt	r3, #257	; 0x101
 1007c5c:	e5830000 	str	r0, [r3]
}
 1007c60:	e12fff1e 	bx	lr

01007c64 <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
	(void) NullParameter;
}
 1007c64:	e12fff1e 	bx	lr

01007c68 <print>:
 * print -- do a raw print of a string
 */
#include "xil_printf.h"

void print(const char8 *ptr)
{
 1007c68:	e92d4010 	push	{r4, lr}
 1007c6c:	e1a04000 	mov	r4, r0
#if HYP_GUEST && EL1_NONSECURE && XEN_USE_PV_CONSOLE
	XPVXenConsole_Write(ptr);
#else
#ifdef STDOUT_BASEADDRESS
  while (*ptr != (char8)0) {
 1007c70:	e5d00000 	ldrb	r0, [r0]
 1007c74:	e3500000 	cmp	r0, #0
 1007c78:	08bd8010 	popeq	{r4, pc}
    outbyte (*ptr);
 1007c7c:	eb00025e 	bl	10085fc <outbyte>
  while (*ptr != (char8)0) {
 1007c80:	e5f40001 	ldrb	r0, [r4, #1]!
 1007c84:	e3500000 	cmp	r0, #0
 1007c88:	1afffffb 	bne	1007c7c <print+0x14>
 1007c8c:	e8bd8010 	pop	{r4, pc}

01007c90 <Xil_DCacheInvalidateLine>:
****************************************************************************/
void Xil_DCacheInvalidateLine(u32 adr)
{
	u32 currmask;

	currmask = mfcpsr();
 1007c90:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007c94:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1007c98:	e129f002 	msr	CPSR_fc, r2
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1007c9c:	e3a02a02 	mov	r2, #8192	; 0x2000
 1007ca0:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1007ca4:	e5820770 	str	r0, [r2, #1904]	; 0x770
****************************************************************************/
void Xil_L2CacheInvalidateLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, (u32)adr);
	/* synchronize the processor */
	dsb();
 1007ca8:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007cac:	e3a02000 	mov	r2, #0
 1007cb0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1007cb4:	e3c0001f 	bic	r0, r0, #31
 1007cb8:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 1007cbc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007cc0:	e129f003 	msr	CPSR_fc, r3
}
 1007cc4:	e12fff1e 	bx	lr

01007cc8 <Xil_DCacheInvalidateRange>:
	currmask = mfcpsr();
 1007cc8:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007ccc:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1007cd0:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1007cd4:	e3510000 	cmp	r1, #0
 1007cd8:	0a000031 	beq	1007da4 <Xil_DCacheInvalidateRange+0xdc>
{
 1007cdc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007ce0:	e3a02000 	mov	r2, #0
		end = tempadr + len;
 1007ce4:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007ce8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		if ((tempadr & (cacheline-1U)) != 0U) {
 1007cec:	e310001f 	tst	r0, #31
 1007cf0:	0a00000d 	beq	1007d2c <Xil_DCacheInvalidateRange+0x64>
			tempadr &= (~(cacheline - 1U));
 1007cf4:	e3c0001f 	bic	r0, r0, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007cf8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1007cfc:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 1007d00:	f57ff04f 	dsb	sy
 1007d04:	e3a03a02 	mov	r3, #8192	; 0x2000
 1007d08:	e3a0e003 	mov	lr, #3
 1007d0c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1007d10:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1007d14:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1007d18:	e5830770 	str	r0, [r3, #1904]	; 0x770
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, adr);
#endif
	/* synchronize the processor */
	dsb();
 1007d1c:	f57ff04f 	dsb	sy
			tempadr += cacheline;
 1007d20:	e2800020 	add	r0, r0, #32
 1007d24:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1007d28:	e5832730 	str	r2, [r3, #1840]	; 0x730
		if ((tempend & (cacheline-1U)) != 0U) {
 1007d2c:	e311001f 	tst	r1, #31
 1007d30:	0a00000d 	beq	1007d6c <Xil_DCacheInvalidateRange+0xa4>
			tempend &= (~(cacheline - 1U));
 1007d34:	e3c1101f 	bic	r1, r1, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007d38:	e3a02000 	mov	r2, #0
 1007d3c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1007d40:	ee071f3e 	mcr	15, 0, r1, cr7, cr14, {1}
	dsb();
 1007d44:	f57ff04f 	dsb	sy
 1007d48:	e3a03a02 	mov	r3, #8192	; 0x2000
 1007d4c:	e3a0e003 	mov	lr, #3
 1007d50:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1007d54:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1007d58:	e58317b0 	str	r1, [r3, #1968]	; 0x7b0
 1007d5c:	e5831770 	str	r1, [r3, #1904]	; 0x770
	dsb();
 1007d60:	f57ff04f 	dsb	sy
 1007d64:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1007d68:	e5832730 	str	r2, [r3, #1840]	; 0x730
		while (tempadr < tempend) {
 1007d6c:	e1500001 	cmp	r0, r1
 1007d70:	2a000008 	bcs	1007d98 <Xil_DCacheInvalidateRange+0xd0>
			*L2CCOffset = tempadr;
 1007d74:	e3a03a02 	mov	r3, #8192	; 0x2000
 1007d78:	e3a02000 	mov	r2, #0
 1007d7c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1007d80:	e5830770 	str	r0, [r3, #1904]	; 0x770
 1007d84:	e5832730 	str	r2, [r3, #1840]	; 0x730
			asm_cp15_inval_dc_line_mva_poc(tempadr);
 1007d88:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			tempadr += cacheline;
 1007d8c:	e2800020 	add	r0, r0, #32
		while (tempadr < tempend) {
 1007d90:	e1500001 	cmp	r0, r1
 1007d94:	3afffff9 	bcc	1007d80 <Xil_DCacheInvalidateRange+0xb8>
	dsb();
 1007d98:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007d9c:	e129f00c 	msr	CPSR_fc, ip
}
 1007da0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	dsb();
 1007da4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007da8:	e129f00c 	msr	CPSR_fc, ip
 1007dac:	e12fff1e 	bx	lr

01007db0 <Xil_DCacheFlushLine>:
	currmask = mfcpsr();
 1007db0:	e10f1000 	mrs	r1, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007db4:	e38130c0 	orr	r3, r1, #192	; 0xc0
 1007db8:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007dbc:	e3a02000 	mov	r2, #0
 1007dc0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1007dc4:	e3c0301f 	bic	r3, r0, #31
 1007dc8:	ee073f3e 	mcr	15, 0, r3, cr7, cr14, {1}
	dsb();
 1007dcc:	f57ff04f 	dsb	sy
 1007dd0:	e3a03a02 	mov	r3, #8192	; 0x2000
 1007dd4:	e3a0c003 	mov	ip, #3
 1007dd8:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1007ddc:	e583cf40 	str	ip, [r3, #3904]	; 0xf40
 1007de0:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1007de4:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1007de8:	f57ff04f 	dsb	sy
 1007dec:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1007df0:	e5832730 	str	r2, [r3, #1840]	; 0x730
	mtcpsr(currmask);
 1007df4:	e129f001 	msr	CPSR_fc, r1
}
 1007df8:	e12fff1e 	bx	lr

01007dfc <Xil_DCacheFlushRange>:
	currmask = mfcpsr();
 1007dfc:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007e00:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1007e04:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1007e08:	e3510000 	cmp	r1, #0
 1007e0c:	0a00000c 	beq	1007e44 <Xil_DCacheFlushRange+0x48>
		end = LocalAddr + len;
 1007e10:	e0801001 	add	r1, r0, r1
		LocalAddr &= ~(cacheline - 1U);
 1007e14:	e3c0001f 	bic	r0, r0, #31
		while (LocalAddr < end) {
 1007e18:	e1510000 	cmp	r1, r0
 1007e1c:	9a000008 	bls	1007e44 <Xil_DCacheFlushRange+0x48>
			*L2CCOffset = LocalAddr;
 1007e20:	e3a03a02 	mov	r3, #8192	; 0x2000
 1007e24:	e3a02000 	mov	r2, #0
 1007e28:	e34f38f0 	movt	r3, #63728	; 0xf8f0
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1007e2c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			*L2CCOffset = LocalAddr;
 1007e30:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1007e34:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1007e38:	e1510000 	cmp	r1, r0
 1007e3c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1007e40:	8afffff9 	bhi	1007e2c <Xil_DCacheFlushRange+0x30>
	dsb();
 1007e44:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007e48:	e129f00c 	msr	CPSR_fc, ip
}
 1007e4c:	e12fff1e 	bx	lr

01007e50 <Xil_DCacheStoreLine>:
	currmask = mfcpsr();
 1007e50:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007e54:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1007e58:	e129f002 	msr	CPSR_fc, r2
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007e5c:	e3a02000 	mov	r2, #0
 1007e60:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1007e64:	e3c0201f 	bic	r2, r0, #31
 1007e68:	ee072f3a 	mcr	15, 0, r2, cr7, cr10, {1}
	dsb();
 1007e6c:	f57ff04f 	dsb	sy
 1007e70:	e3a02a02 	mov	r2, #8192	; 0x2000
 1007e74:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1007e78:	e58207b0 	str	r0, [r2, #1968]	; 0x7b0
****************************************************************************/
void Xil_L2CacheStoreLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
	/* synchronize the processor */
	dsb();
 1007e7c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007e80:	e129f003 	msr	CPSR_fc, r3
}
 1007e84:	e12fff1e 	bx	lr

01007e88 <Xil_ICacheInvalidateLine>:
	currmask = mfcpsr();
 1007e88:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007e8c:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1007e90:	e129f002 	msr	CPSR_fc, r2
 1007e94:	e3a02a02 	mov	r2, #8192	; 0x2000
 1007e98:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1007e9c:	e5820770 	str	r0, [r2, #1904]	; 0x770
	dsb();
 1007ea0:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1007ea4:	e3a02001 	mov	r2, #1
 1007ea8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 1007eac:	e3c0001f 	bic	r0, r0, #31
 1007eb0:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 1007eb4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007eb8:	e129f003 	msr	CPSR_fc, r3
}
 1007ebc:	e12fff1e 	bx	lr

01007ec0 <Xil_ICacheInvalidateRange>:
	currmask = mfcpsr();
 1007ec0:	e10f2000 	mrs	r2, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007ec4:	e38230c0 	orr	r3, r2, #192	; 0xc0
 1007ec8:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1007ecc:	e3510000 	cmp	r1, #0
 1007ed0:	0a00000d 	beq	1007f0c <Xil_ICacheInvalidateRange+0x4c>
		end = LocalAddr + len;
 1007ed4:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1007ed8:	e3a03001 	mov	r3, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1007edc:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1007ee0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
		while (LocalAddr < end) {
 1007ee4:	e1510000 	cmp	r1, r0
 1007ee8:	9a000007 	bls	1007f0c <Xil_ICacheInvalidateRange+0x4c>
		*L2CCOffset = LocalAddr;
 1007eec:	e3a03a02 	mov	r3, #8192	; 0x2000
 1007ef0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1007ef4:	e5830770 	str	r0, [r3, #1904]	; 0x770
		dsb();
 1007ef8:	f57ff04f 	dsb	sy
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1007efc:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 1007f00:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1007f04:	e1510000 	cmp	r1, r0
 1007f08:	8afffff9 	bhi	1007ef4 <Xil_ICacheInvalidateRange+0x34>
	dsb();
 1007f0c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007f10:	e129f002 	msr	CPSR_fc, r2
}
 1007f14:	e12fff1e 	bx	lr

01007f18 <Xil_L1DCacheInvalidate>:
{
 1007f18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1007f1c:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1007f20:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1007f24:	e129f003 	msr	CPSR_fc, r3
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1007f28:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 1007f2c:	e3130004 	tst	r3, #4
 1007f30:	1a00001e 	bne	1007fb0 <Xil_L1DCacheInvalidate+0x98>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007f34:	e3a04000 	mov	r4, #0
 1007f38:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1007f3c:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1007f40:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 1007f44:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1007f48:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1007f4c:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1007f50:	e1a00380 	lsl	r0, r0, #7
 1007f54:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1007f58:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 1007f5c:	fa0003f9 	blx	1008f48 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1007f60:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 1007f64:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1007f68:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1007f6c:	e3500000 	cmp	r0, #0
 1007f70:	e1a0cf04 	lsl	ip, r4, #30
 1007f74:	13a03000 	movne	r3, #0
 1007f78:	11a02003 	movne	r2, r3
 1007f7c:	0a000005 	beq	1007f98 <Xil_L1DCacheInvalidate+0x80>
			C7Reg = Way | Set;
 1007f80:	e182100c 	orr	r1, r2, ip
			asm_cp15_inval_dc_line_sw(C7Reg);
 1007f84:	ee071f56 	mcr	15, 0, r1, cr7, cr6, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1007f88:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 1007f8c:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1007f90:	e1500003 	cmp	r0, r3
 1007f94:	1afffff9 	bne	1007f80 <Xil_L1DCacheInvalidate+0x68>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 1007f98:	e1550004 	cmp	r5, r4
 1007f9c:	e2844001 	add	r4, r4, #1
 1007fa0:	1afffff1 	bne	1007f6c <Xil_L1DCacheInvalidate+0x54>
	dsb();
 1007fa4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1007fa8:	e129f006 	msr	CPSR_fc, r6
}
 1007fac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	stack_size=stack_start-stack_end;
 1007fb0:	e3011800 	movw	r1, #6144	; 0x1800
 1007fb4:	e3000000 	movw	r0, #0
 1007fb8:	e3400000 	movt	r0, #0
 1007fbc:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1007fc0:	e0411000 	sub	r1, r1, r0
 1007fc4:	ebffff8c 	bl	1007dfc <Xil_DCacheFlushRange>
 1007fc8:	eaffffd9 	b	1007f34 <Xil_L1DCacheInvalidate+0x1c>

01007fcc <Xil_L1DCacheEnable>:
{
 1007fcc:	e92d4010 	push	{r4, lr}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1007fd0:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 1007fd4:	e3140004 	tst	r4, #4
 1007fd8:	18bd8010 	popne	{r4, pc}
	Xil_L1DCacheInvalidate();
 1007fdc:	ebffffcd 	bl	1007f18 <Xil_L1DCacheInvalidate>
	CtrlReg |= (XREG_CP15_CONTROL_C_BIT);
 1007fe0:	e3844004 	orr	r4, r4, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1007fe4:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
}
 1007fe8:	e8bd8010 	pop	{r4, pc}

01007fec <Xil_L1DCacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1007fec:	e3a03000 	mov	r3, #0
 1007ff0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1007ff4:	e3c0001f 	bic	r0, r0, #31
 1007ff8:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 1007ffc:	f57ff04f 	dsb	sy
}
 1008000:	e12fff1e 	bx	lr

01008004 <Xil_L1DCacheInvalidateRange>:
	currmask = mfcpsr();
 1008004:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008008:	e38320c0 	orr	r2, r3, #192	; 0xc0
 100800c:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1008010:	e3510000 	cmp	r1, #0
 1008014:	0a000009 	beq	1008040 <Xil_L1DCacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1008018:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 100801c:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008020:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1008024:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1008028:	e1510000 	cmp	r1, r0
 100802c:	9a000003 	bls	1008040 <Xil_L1DCacheInvalidateRange+0x3c>
			asm_cp15_inval_dc_line_mva_poc(LocalAddr);
 1008030:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			LocalAddr += cacheline;
 1008034:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008038:	e1510000 	cmp	r1, r0
 100803c:	8afffffb 	bhi	1008030 <Xil_L1DCacheInvalidateRange+0x2c>
	dsb();
 1008040:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008044:	e129f003 	msr	CPSR_fc, r3
}
 1008048:	e12fff1e 	bx	lr

0100804c <Xil_L1DCacheFlush>:
{
 100804c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1008050:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008054:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1008058:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 100805c:	e3a04000 	mov	r4, #0
 1008060:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1008064:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1008068:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 100806c:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1008070:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1008074:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1008078:	e1a00380 	lsl	r0, r0, #7
 100807c:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1008080:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 1008084:	fa0003af 	blx	1008f48 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1008088:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 100808c:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1008090:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1008094:	e3500000 	cmp	r0, #0
 1008098:	e1a0cf04 	lsl	ip, r4, #30
 100809c:	13a03000 	movne	r3, #0
 10080a0:	11a02003 	movne	r2, r3
 10080a4:	0a000005 	beq	10080c0 <Xil_L1DCacheFlush+0x74>
			C7Reg = Way | Set;
 10080a8:	e182100c 	orr	r1, r2, ip
			asm_cp15_clean_inval_dc_line_sw(C7Reg);
 10080ac:	ee071f5e 	mcr	15, 0, r1, cr7, cr14, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10080b0:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 10080b4:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10080b8:	e1500003 	cmp	r0, r3
 10080bc:	1afffff9 	bne	10080a8 <Xil_L1DCacheFlush+0x5c>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 10080c0:	e1550004 	cmp	r5, r4
 10080c4:	e2844001 	add	r4, r4, #1
 10080c8:	1afffff1 	bne	1008094 <Xil_L1DCacheFlush+0x48>
	dsb();
 10080cc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10080d0:	e129f006 	msr	CPSR_fc, r6
}
 10080d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010080d8 <Xil_L1DCacheDisable>:
{
 10080d8:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheFlush();
 10080dc:	ebffffda 	bl	100804c <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10080e0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 10080e4:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10080e8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10080ec:	e8bd8010 	pop	{r4, pc}

010080f0 <Xil_DCacheFlush>:
{
 10080f0:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 10080f4:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10080f8:	e38430c0 	orr	r3, r4, #192	; 0xc0
 10080fc:	e129f003 	msr	CPSR_fc, r3
	Xil_L1DCacheFlush();
 1008100:	ebffffd1 	bl	100804c <Xil_L1DCacheFlush>
 1008104:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008108:	e3a01003 	mov	r1, #3
 100810c:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008110:	e30f3fff 	movw	r3, #65535	; 0xffff
 1008114:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1008118:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 100811c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1008120:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1008124:	e3530000 	cmp	r3, #0
 1008128:	1afffffb 	bne	100811c <Xil_DCacheFlush+0x2c>
	*LocalAddr = Value;
 100812c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008130:	e3a02000 	mov	r2, #0
 1008134:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008138:	e5832730 	str	r2, [r3, #1840]	; 0x730
 100813c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008140:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008144:	e129f004 	msr	CPSR_fc, r4
}
 1008148:	e8bd8010 	pop	{r4, pc}

0100814c <Xil_L1DCacheFlushLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100814c:	e3a03000 	mov	r3, #0
 1008150:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1008154:	e3c0001f 	bic	r0, r0, #31
 1008158:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 100815c:	f57ff04f 	dsb	sy
}
 1008160:	e12fff1e 	bx	lr

01008164 <Xil_L1DCacheFlushRange>:
	currmask = mfcpsr();
 1008164:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008168:	e38320c0 	orr	r2, r3, #192	; 0xc0
 100816c:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1008170:	e3510000 	cmp	r1, #0
 1008174:	0a000009 	beq	10081a0 <Xil_L1DCacheFlushRange+0x3c>
		end = LocalAddr + len;
 1008178:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100817c:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008180:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008184:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1008188:	e1510000 	cmp	r1, r0
 100818c:	9a000003 	bls	10081a0 <Xil_L1DCacheFlushRange+0x3c>
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1008190:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			LocalAddr += cacheline;
 1008194:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008198:	e1510000 	cmp	r1, r0
 100819c:	8afffffb 	bhi	1008190 <Xil_L1DCacheFlushRange+0x2c>
	dsb();
 10081a0:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10081a4:	e129f003 	msr	CPSR_fc, r3
}
 10081a8:	e12fff1e 	bx	lr

010081ac <Xil_L1DCacheStoreLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10081ac:	e3a03000 	mov	r3, #0
 10081b0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10081b4:	e3c0001f 	bic	r0, r0, #31
 10081b8:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
	dsb();
 10081bc:	f57ff04f 	dsb	sy
}
 10081c0:	e12fff1e 	bx	lr

010081c4 <Xil_L1ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10081c4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 10081c8:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 10081cc:	112fff1e 	bxne	lr
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10081d0:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 10081d4:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10081d8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10081dc:	e12fff1e 	bx	lr

010081e0 <Xil_L1ICacheDisable>:
	dsb();
 10081e0:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10081e4:	e3a03000 	mov	r3, #0
 10081e8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10081ec:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 10081f0:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10081f4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10081f8:	e12fff1e 	bx	lr

010081fc <Xil_L1ICacheInvalidate>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10081fc:	e3a03001 	mov	r3, #1
 1008200:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008204:	e3a03000 	mov	r3, #0
 1008208:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 100820c:	f57ff04f 	dsb	sy
}
 1008210:	e12fff1e 	bx	lr

01008214 <Xil_L1ICacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008214:	e3a03001 	mov	r3, #1
 1008218:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 100821c:	e3c0001f 	bic	r0, r0, #31
 1008220:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 1008224:	f57ff04f 	dsb	sy
}
 1008228:	e12fff1e 	bx	lr

0100822c <Xil_L1ICacheInvalidateRange>:
	currmask = mfcpsr();
 100822c:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008230:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1008234:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1008238:	e3510000 	cmp	r1, #0
 100823c:	0a000009 	beq	1008268 <Xil_L1ICacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1008240:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008244:	e3a02001 	mov	r2, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008248:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 100824c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1008250:	e1510000 	cmp	r1, r0
 1008254:	9a000003 	bls	1008268 <Xil_L1ICacheInvalidateRange+0x3c>
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1008258:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 100825c:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008260:	e1510000 	cmp	r1, r0
 1008264:	8afffffb 	bhi	1008258 <Xil_L1ICacheInvalidateRange+0x2c>
	dsb();
 1008268:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 100826c:	e129f003 	msr	CPSR_fc, r3
}
 1008270:	e12fff1e 	bx	lr

01008274 <Xil_L2CacheDisable>:
	return *(volatile u32 *) Addr;
 1008274:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008278:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 100827c:	e5932100 	ldr	r2, [r3, #256]	; 0x100
    if((L2CCReg & 0x1U) != 0U) {
 1008280:	e3120001 	tst	r2, #1
 1008284:	012fff1e 	bxeq	lr
	*LocalAddr = Value;
 1008288:	e30f2fff 	movw	r2, #65535	; 0xffff
 100828c:	e3a01003 	mov	r1, #3
 1008290:	e5831f40 	str	r1, [r3, #3904]	; 0xf40
 1008294:	e58327fc 	str	r2, [r3, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1008298:	e59327fc 	ldr	r2, [r3, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 100829c:	e6ff2072 	uxth	r2, r2
	while(ResultL2Cache != (u32)0U) {
 10082a0:	e3520000 	cmp	r2, #0
 10082a4:	0a000004 	beq	10082bc <Xil_L2CacheDisable+0x48>
 10082a8:	e1a02003 	mov	r2, r3
 10082ac:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
		ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 10082b0:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 10082b4:	e3530000 	cmp	r3, #0
 10082b8:	1afffffb 	bne	10082ac <Xil_L2CacheDisable+0x38>
	*LocalAddr = Value;
 10082bc:	e3a03a02 	mov	r3, #8192	; 0x2000
 10082c0:	e3a02000 	mov	r2, #0
 10082c4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10082c8:	e5832730 	str	r2, [r3, #1840]	; 0x730
 10082cc:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 10082d0:	f57ff04f 	dsb	sy
	return *(volatile u32 *) Addr;
 10082d4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	    Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 10082d8:	e3c22001 	bic	r2, r2, #1
	*LocalAddr = Value;
 10082dc:	e5832100 	str	r2, [r3, #256]	; 0x100
		dsb();
 10082e0:	f57ff04f 	dsb	sy
}
 10082e4:	e12fff1e 	bx	lr

010082e8 <Xil_DCacheDisable>:
{
 10082e8:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 10082ec:	ebffffe0 	bl	1008274 <Xil_L2CacheDisable>
	Xil_L1DCacheFlush();
 10082f0:	ebffff55 	bl	100804c <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10082f4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 10082f8:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10082fc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1008300:	e8bd8010 	pop	{r4, pc}

01008304 <Xil_ICacheDisable>:
{
 1008304:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 1008308:	ebffffd9 	bl	1008274 <Xil_L2CacheDisable>
	dsb();
 100830c:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008310:	e3a03000 	mov	r3, #0
 1008314:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008318:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 100831c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1008320:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1008324:	e8bd8010 	pop	{r4, pc}

01008328 <Xil_L2CacheInvalidate>:
	return *(volatile u32 *) Addr;
 1008328:	e3a03a02 	mov	r3, #8192	; 0x2000
{
 100832c:	e92d4010 	push	{r4, lr}
 1008330:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008334:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) != 0U) {
 1008338:	e3130001 	tst	r3, #1
 100833c:	1a00000d 	bne	1008378 <Xil_L2CacheInvalidate+0x50>
	*LocalAddr = Value;
 1008340:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008344:	e30f3fff 	movw	r3, #65535	; 0xffff
 1008348:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 100834c:	e582377c 	str	r3, [r2, #1916]	; 0x77c
	return *(volatile u32 *) Addr;
 1008350:	e592377c 	ldr	r3, [r2, #1916]	; 0x77c
	ResultDCache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET)
 1008354:	e6ff3073 	uxth	r3, r3
	while(ResultDCache != (u32)0U) {
 1008358:	e3530000 	cmp	r3, #0
 100835c:	1afffffb 	bne	1008350 <Xil_L2CacheInvalidate+0x28>
	*LocalAddr = Value;
 1008360:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008364:	e3a02000 	mov	r2, #0
 1008368:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 100836c:	e5832730 	str	r2, [r3, #1840]	; 0x730
	dsb();
 1008370:	f57ff04f 	dsb	sy
}
 1008374:	e8bd8010 	pop	{r4, pc}
	stack_size=stack_start-stack_end;
 1008378:	e3011800 	movw	r1, #6144	; 0x1800
 100837c:	e3000000 	movw	r0, #0
 1008380:	e3400000 	movt	r0, #0
 1008384:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1008388:	e0411000 	sub	r1, r1, r0
 100838c:	ebfffe9a 	bl	1007dfc <Xil_DCacheFlushRange>
 1008390:	eaffffea 	b	1008340 <Xil_L2CacheInvalidate+0x18>

01008394 <Xil_DCacheInvalidate>:
{
 1008394:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1008398:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 100839c:	e38430c0 	orr	r3, r4, #192	; 0xc0
 10083a0:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 10083a4:	ebffffdf 	bl	1008328 <Xil_L2CacheInvalidate>
	Xil_L1DCacheInvalidate();
 10083a8:	ebfffeda 	bl	1007f18 <Xil_L1DCacheInvalidate>
	mtcpsr(currmask);
 10083ac:	e129f004 	msr	CPSR_fc, r4
}
 10083b0:	e8bd8010 	pop	{r4, pc}

010083b4 <Xil_ICacheInvalidate>:
{
 10083b4:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 10083b8:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10083bc:	e38430c0 	orr	r3, r4, #192	; 0xc0
 10083c0:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 10083c4:	ebffffd7 	bl	1008328 <Xil_L2CacheInvalidate>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10083c8:	e3a03001 	mov	r3, #1
 10083cc:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10083d0:	e3a03000 	mov	r3, #0
 10083d4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 10083d8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10083dc:	e129f004 	msr	CPSR_fc, r4
}
 10083e0:	e8bd8010 	pop	{r4, pc}

010083e4 <Xil_L2CacheEnable.part.0>:
void Xil_L2CacheEnable(void)
 10083e4:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 10083e8:	e3a04a02 	mov	r4, #8192	; 0x2000
 10083ec:	e34f48f0 	movt	r4, #63728	; 0xf8f0
	*LocalAddr = Value;
 10083f0:	e3001111 	movw	r1, #273	; 0x111
 10083f4:	e3002121 	movw	r2, #289	; 0x121
	return *(volatile u32 *) Addr;
 10083f8:	e5943104 	ldr	r3, [r4, #260]	; 0x104
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
 10083fc:	e3c3380e 	bic	r3, r3, #917504	; 0xe0000
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
 1008400:	e3833472 	orr	r3, r3, #1912602624	; 0x72000000
 1008404:	e3833836 	orr	r3, r3, #3538944	; 0x360000
	*LocalAddr = Value;
 1008408:	e5843104 	str	r3, [r4, #260]	; 0x104
 100840c:	e5841108 	str	r1, [r4, #264]	; 0x108
 1008410:	e584210c 	str	r2, [r4, #268]	; 0x10c
	return *(volatile u32 *) Addr;
 1008414:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	*LocalAddr = Value;
 1008418:	e5843220 	str	r3, [r4, #544]	; 0x220
		Xil_L2CacheInvalidate();
 100841c:	ebffffc1 	bl	1008328 <Xil_L2CacheInvalidate>
	return *(volatile u32 *) Addr;
 1008420:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	*LocalAddr = Value;
 1008424:	e3a02000 	mov	r2, #0
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 1008428:	e3833001 	orr	r3, r3, #1
 100842c:	e5843100 	str	r3, [r4, #256]	; 0x100
 1008430:	e5842730 	str	r2, [r4, #1840]	; 0x730
	    dsb();
 1008434:	f57ff04f 	dsb	sy
}
 1008438:	e8bd8010 	pop	{r4, pc}

0100843c <Xil_L2CacheEnable>:
	return *(volatile u32 *) Addr;
 100843c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008440:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008444:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1008448:	e3130001 	tst	r3, #1
 100844c:	112fff1e 	bxne	lr
 1008450:	eaffffe3 	b	10083e4 <Xil_L2CacheEnable.part.0>

01008454 <Xil_DCacheEnable>:
{
 1008454:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheEnable();
 1008458:	ebfffedb 	bl	1007fcc <Xil_L1DCacheEnable>
 100845c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008460:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008464:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1008468:	e3130001 	tst	r3, #1
 100846c:	18bd8010 	popne	{r4, pc}
}
 1008470:	e8bd4010 	pop	{r4, lr}
 1008474:	eaffffda 	b	10083e4 <Xil_L2CacheEnable.part.0>

01008478 <Xil_ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008478:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 100847c:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1008480:	1a000002 	bne	1008490 <Xil_ICacheEnable+0x18>
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008484:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1008488:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 100848c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
 1008490:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008494:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008498:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 100849c:	e3130001 	tst	r3, #1
 10084a0:	112fff1e 	bxne	lr
 10084a4:	eaffffce 	b	10083e4 <Xil_L2CacheEnable.part.0>

010084a8 <Xil_L2CacheInvalidateLine>:
	*LocalAddr = Value;
 10084a8:	e3a03a02 	mov	r3, #8192	; 0x2000
 10084ac:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10084b0:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 10084b4:	f57ff04f 	dsb	sy
}
 10084b8:	e12fff1e 	bx	lr

010084bc <Xil_L2CacheInvalidateRange>:
	currmask = mfcpsr();
 10084bc:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10084c0:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10084c4:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10084c8:	e3510000 	cmp	r1, #0
 10084cc:	0a000011 	beq	1008518 <Xil_L2CacheInvalidateRange+0x5c>
		end = LocalAddr + len;
 10084d0:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 10084d4:	e3c0001f 	bic	r0, r0, #31
 10084d8:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 10084dc:	e1510000 	cmp	r1, r0
 10084e0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10084e4:	e3a02003 	mov	r2, #3
 10084e8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10084ec:	9a000005 	bls	1008508 <Xil_L2CacheInvalidateRange+0x4c>
 10084f0:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 10084f4:	e5830770 	str	r0, [r3, #1904]	; 0x770
			LocalAddr += cacheline;
 10084f8:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 10084fc:	e1510000 	cmp	r1, r0
 1008500:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008504:	8afffffa 	bhi	10084f4 <Xil_L2CacheInvalidateRange+0x38>
 1008508:	e3a03a02 	mov	r3, #8192	; 0x2000
 100850c:	e3a02000 	mov	r2, #0
 1008510:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008514:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008518:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 100851c:	e129f00c 	msr	CPSR_fc, ip
}
 1008520:	e12fff1e 	bx	lr

01008524 <Xil_L2CacheFlush>:
 1008524:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008528:	e3a01003 	mov	r1, #3
 100852c:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008530:	e30f3fff 	movw	r3, #65535	; 0xffff
 1008534:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1008538:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 100853c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1008540:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1008544:	e3530000 	cmp	r3, #0
 1008548:	1afffffb 	bne	100853c <Xil_L2CacheFlush+0x18>
	*LocalAddr = Value;
 100854c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008550:	e3a02000 	mov	r2, #0
 1008554:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008558:	e5832730 	str	r2, [r3, #1840]	; 0x730
 100855c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008560:	f57ff04f 	dsb	sy
}
 1008564:	e12fff1e 	bx	lr

01008568 <Xil_L2CacheFlushLine>:
 1008568:	e3a03a02 	mov	r3, #8192	; 0x2000
 100856c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008570:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1008574:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1008578:	f57ff04f 	dsb	sy
}
 100857c:	e12fff1e 	bx	lr

01008580 <Xil_L2CacheFlushRange>:
	currmask = mfcpsr();
 1008580:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008584:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1008588:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 100858c:	e3510000 	cmp	r1, #0
 1008590:	0a000011 	beq	10085dc <Xil_L2CacheFlushRange+0x5c>
		end = LocalAddr + len;
 1008594:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008598:	e3c0001f 	bic	r0, r0, #31
 100859c:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 10085a0:	e1510000 	cmp	r1, r0
 10085a4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10085a8:	e3a02003 	mov	r2, #3
 10085ac:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10085b0:	9a000005 	bls	10085cc <Xil_L2CacheFlushRange+0x4c>
 10085b4:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 10085b8:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 10085bc:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 10085c0:	e1510000 	cmp	r1, r0
 10085c4:	e5832730 	str	r2, [r3, #1840]	; 0x730
 10085c8:	8afffffa 	bhi	10085b8 <Xil_L2CacheFlushRange+0x38>
 10085cc:	e3a03a02 	mov	r3, #8192	; 0x2000
 10085d0:	e3a02000 	mov	r2, #0
 10085d4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10085d8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 10085dc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10085e0:	e129f00c 	msr	CPSR_fc, ip
}
 10085e4:	e12fff1e 	bx	lr

010085e8 <Xil_L2CacheStoreLine>:
 10085e8:	e3a03a02 	mov	r3, #8192	; 0x2000
 10085ec:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10085f0:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
	dsb();
 10085f4:	f57ff04f 	dsb	sy
}
 10085f8:	e12fff1e 	bx	lr

010085fc <outbyte>:
#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
	 XUartPs_SendByte(STDOUT_BASEADDRESS, c);
 10085fc:	e1a01000 	mov	r1, r0
 1008600:	e3a00a01 	mov	r0, #4096	; 0x1000
 1008604:	e34e0000 	movt	r0, #57344	; 0xe000
 1008608:	ea0001cd 	b	1008d44 <XUartPs_SendByte>

0100860c <XGetPlatform_Info>:
#elif (__microblaze__)
	return XPLAT_MICROBLAZE;
#else
	return XPLAT_ZYNQ;
#endif
}
 100860c:	e3a00004 	mov	r0, #4
 1008610:	e12fff1e 	bx	lr

01008614 <getnum>:
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
static s32 getnum( charptr* linep)
{
 1008614:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1008618:	e1a07000 	mov	r7, r0
    s32 n;
    s32 ResultIsDigit = 0;
    charptr cptr;
    n = 0;
    cptr = *linep;
 100861c:	e5906000 	ldr	r6, [r0]
	if(cptr != NULL){
 1008620:	e3560000 	cmp	r6, #0
 1008624:	0a00001b 	beq	1008698 <getnum+0x84>
		ResultIsDigit = isdigit(((s32)*cptr));
 1008628:	fa0007fb 	blx	100a61c <__locale_ctype_ptr>
 100862c:	e5d63000 	ldrb	r3, [r6]
 1008630:	e0800003 	add	r0, r0, r3
	}
    while (ResultIsDigit != 0) {
 1008634:	e5d05001 	ldrb	r5, [r0, #1]
 1008638:	e2155004 	ands	r5, r5, #4
 100863c:	0a000012 	beq	100868c <getnum+0x78>
 1008640:	e2864001 	add	r4, r6, #1
 1008644:	e3a05000 	mov	r5, #0
		if(cptr != NULL){
 1008648:	e3540001 	cmp	r4, #1
 100864c:	0a000013 	beq	10086a0 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
			cptr += 1;
			if(cptr != NULL){
 1008650:	e3540000 	cmp	r4, #0
			cptr += 1;
 1008654:	e1a06004 	mov	r6, r4
			if(cptr != NULL){
 1008658:	0a000010 	beq	10086a0 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
 100865c:	e5543001 	ldrb	r3, [r4, #-1]
 1008660:	e0855105 	add	r5, r5, r5, lsl #2
 1008664:	e2844001 	add	r4, r4, #1
 1008668:	e2433030 	sub	r3, r3, #48	; 0x30
 100866c:	e0835085 	add	r5, r3, r5, lsl #1
				ResultIsDigit = isdigit(((s32)*cptr));
 1008670:	fa0007e9 	blx	100a61c <__locale_ctype_ptr>
			}
		}
		ResultIsDigit = isdigit(((s32)*cptr));
 1008674:	fa0007e8 	blx	100a61c <__locale_ctype_ptr>
 1008678:	e5d63000 	ldrb	r3, [r6]
 100867c:	e0800003 	add	r0, r0, r3
    while (ResultIsDigit != 0) {
 1008680:	e5d03001 	ldrb	r3, [r0, #1]
 1008684:	e3130004 	tst	r3, #4
 1008688:	1affffee 	bne	1008648 <getnum+0x34>
	}
    *linep = ((charptr )(cptr));
 100868c:	e5876000 	str	r6, [r7]
    return(n);
}
 1008690:	e1a00005 	mov	r0, r5
 1008694:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1008698:	e1a05006 	mov	r5, r6
 100869c:	eafffffa 	b	100868c <getnum+0x78>
		ResultIsDigit = isdigit(((s32)*cptr));
 10086a0:	fa0007dd 	blx	100a61c <__locale_ctype_ptr>
 10086a4:	e3a03000 	mov	r3, #0
 10086a8:	e5d33000 	ldrb	r3, [r3]
 10086ac:	e7f000f0 	udf	#0

010086b0 <padding.part.0>:
static void padding( const s32 l_flag, const struct params_s *par)
 10086b0:	e92d4070 	push	{r4, r5, r6, lr}
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10086b4:	e5903004 	ldr	r3, [r0, #4]
 10086b8:	e5904000 	ldr	r4, [r0]
 10086bc:	e1540003 	cmp	r4, r3
 10086c0:	a8bd8070 	popge	{r4, r5, r6, pc}
 10086c4:	e1a05000 	mov	r5, r0
            outbyte( par->pad_character);
 10086c8:	e5d5000c 	ldrb	r0, [r5, #12]
        for (; i<(par->num1); i++) {
 10086cc:	e2844001 	add	r4, r4, #1
            outbyte( par->pad_character);
 10086d0:	ebffffc9 	bl	10085fc <outbyte>
        for (; i<(par->num1); i++) {
 10086d4:	e5953004 	ldr	r3, [r5, #4]
 10086d8:	e1540003 	cmp	r4, r3
 10086dc:	bafffff9 	blt	10086c8 <padding.part.0+0x18>
 10086e0:	e8bd8070 	pop	{r4, r5, r6, pc}

010086e4 <outnum>:
{
 10086e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char8 digits[] = "0123456789ABCDEF";
 10086e8:	e3024eb4 	movw	r4, #11956	; 0x2eb4
 10086ec:	e3404101 	movt	r4, #257	; 0x101
{
 10086f0:	e1a05000 	mov	r5, r0
 10086f4:	e1a08001 	mov	r8, r1
 10086f8:	e1a07002 	mov	r7, r2
    const char8 digits[] = "0123456789ABCDEF";
 10086fc:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
{
 1008700:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    const char8 digits[] = "0123456789ABCDEF";
 1008704:	e28d9004 	add	r9, sp, #4
 1008708:	e28d6018 	add	r6, sp, #24
 100870c:	e28dc017 	add	ip, sp, #23
 1008710:	e28de037 	add	lr, sp, #55	; 0x37
 1008714:	e5944000 	ldr	r4, [r4]
 1008718:	e8a9000f 	stmia	r9!, {r0, r1, r2, r3}
	outbuf[i] = '0';
 100871c:	e3a03030 	mov	r3, #48	; 0x30
    const char8 digits[] = "0123456789ABCDEF";
 1008720:	e5c94000 	strb	r4, [r9]
	outbuf[i] = '0';
 1008724:	e5ec3001 	strb	r3, [ip, #1]!
    for(i = 0; i<32; i++) {
 1008728:	e15c000e 	cmp	ip, lr
 100872c:	1afffffc 	bne	1008724 <outnum+0x40>
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1008730:	e5973018 	ldr	r3, [r7, #24]
 1008734:	e3530000 	cmp	r3, #0
 1008738:	1a000039 	bne	1008824 <outnum+0x140>
 100873c:	e1a03fa5 	lsr	r3, r5, #31
 1008740:	e358000a 	cmp	r8, #10
 1008744:	13a03000 	movne	r3, #0
 1008748:	02033001 	andeq	r3, r3, #1
 100874c:	e3530000 	cmp	r3, #0
		num =(-(n));
 1008750:	12655000 	rsbne	r5, r5, #0
        negative = 1;
 1008754:	13a0b001 	movne	fp, #1
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1008758:	0a000031 	beq	1008824 <outnum+0x140>
        negative = 0;
 100875c:	e1a09006 	mov	r9, r6
    i = 0;
 1008760:	e3a0a000 	mov	sl, #0
 1008764:	ea000000 	b	100876c <outnum+0x88>
		i++;
 1008768:	e1a0a004 	mov	sl, r4
		outbuf[i] = digits[(num % base)];
 100876c:	e1a00005 	mov	r0, r5
 1008770:	e1a01008 	mov	r1, r8
 1008774:	fa00028a 	blx	10091a4 <__aeabi_uidivmod>
 1008778:	e28d3038 	add	r3, sp, #56	; 0x38
    } while (num > 0);
 100877c:	e1550008 	cmp	r5, r8
		outbuf[i] = digits[(num % base)];
 1008780:	e0831001 	add	r1, r3, r1
		i++;
 1008784:	e28a4001 	add	r4, sl, #1
		outbuf[i] = digits[(num % base)];
 1008788:	e5513034 	ldrb	r3, [r1, #-52]	; 0xffffffcc
		num /= base;
 100878c:	e1a05000 	mov	r5, r0
		i++;
 1008790:	e1a02004 	mov	r2, r4
		outbuf[i] = digits[(num % base)];
 1008794:	e4c93001 	strb	r3, [r9], #1
    } while (num > 0);
 1008798:	2afffff2 	bcs	1008768 <outnum+0x84>
    if (negative != 0) {
 100879c:	e35b0000 	cmp	fp, #0
 10087a0:	0a000005 	beq	10087bc <outnum+0xd8>
		outbuf[i] = '-';
 10087a4:	e28d3038 	add	r3, sp, #56	; 0x38
		i++;
 10087a8:	e28a2002 	add	r2, sl, #2
		outbuf[i] = '-';
 10087ac:	e0833004 	add	r3, r3, r4
 10087b0:	e2844001 	add	r4, r4, #1
 10087b4:	e3a0102d 	mov	r1, #45	; 0x2d
 10087b8:	e5431020 	strb	r1, [r3, #-32]	; 0xffffffe0
    outbuf[i] = '\0';
 10087bc:	e28d3038 	add	r3, sp, #56	; 0x38
    par->len = (s32)strlen(outbuf);
 10087c0:	e1a00006 	mov	r0, r6
    outbuf[i] = '\0';
 10087c4:	e0832002 	add	r2, r3, r2
 10087c8:	e3a03000 	mov	r3, #0
 10087cc:	e5423020 	strb	r3, [r2, #-32]	; 0xffffffe0
    par->len = (s32)strlen(outbuf);
 10087d0:	fa000dca 	blx	100bf00 <strlen>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10087d4:	e1c721d0 	ldrd	r2, [r7, #16]
    par->len = (s32)strlen(outbuf);
 10087d8:	e5870000 	str	r0, [r7]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10087dc:	e16f3f13 	clz	r3, r3
 10087e0:	e3520000 	cmp	r2, #0
 10087e4:	e1a032a3 	lsr	r3, r3, #5
 10087e8:	03a03000 	moveq	r3, #0
 10087ec:	e3530000 	cmp	r3, #0
 10087f0:	1a00000d 	bne	100882c <outnum+0x148>
 10087f4:	e0864004 	add	r4, r6, r4
	outbyte( outbuf[i] );
 10087f8:	e5740001 	ldrb	r0, [r4, #-1]!
 10087fc:	ebffff7e 	bl	10085fc <outbyte>
    while (&outbuf[i] >= outbuf) {
 1008800:	e1540006 	cmp	r4, r6
 1008804:	1afffffb 	bne	10087f8 <outnum+0x114>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1008808:	e5972014 	ldr	r2, [r7, #20]
 100880c:	e5973010 	ldr	r3, [r7, #16]
 1008810:	e3520000 	cmp	r2, #0
 1008814:	13530000 	cmpne	r3, #0
 1008818:	1a000006 	bne	1008838 <outnum+0x154>
}
 100881c:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1008820:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        negative = 0;
 1008824:	e3a0b000 	mov	fp, #0
 1008828:	eaffffcb 	b	100875c <outnum+0x78>
 100882c:	e1a00007 	mov	r0, r7
 1008830:	ebffff9e 	bl	10086b0 <padding.part.0>
 1008834:	eaffffee 	b	10087f4 <outnum+0x110>
 1008838:	e1a00007 	mov	r0, r7
}
 100883c:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1008840:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1008844:	eaffff99 	b	10086b0 <padding.part.0>

01008848 <xil_printf>:
void xil_printf( const char8 *ctrl1, ...){
	XPVXenConsole_Printf(ctrl1);
}
#else
void xil_printf( const char8 *ctrl1, ...)
{
 1008848:	e92d000f 	push	{r0, r1, r2, r3}
 100884c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1008850:	e24dd02c 	sub	sp, sp, #44	; 0x2c
        /* initialize all the flags for this format.   */
        dot_flag = 0;
#if defined (__aarch64__) || defined (__arch64__)
		long_flag = 0;
#endif
        par.unsigned_flag = 0;
 1008854:	e3a04000 	mov	r4, #0
		par.left_flag = 0;
		par.do_padding = 0;
        par.pad_character = ' ';
 1008858:	e3a06020 	mov	r6, #32
        par.num2=32767;
 100885c:	e3075fff 	movw	r5, #32767	; 0x7fff
    va_start( argp, ctrl1);
 1008860:	e28d204c 	add	r2, sp, #76	; 0x4c
{
 1008864:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    va_start( argp, ctrl1);
 1008868:	e58d2004 	str	r2, [sp, #4]
    char8 *ctrl = (char8 *)ctrl1;
 100886c:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1008870:	e3530000 	cmp	r3, #0
 1008874:	0a00000a 	beq	10088a4 <xil_printf+0x5c>
 1008878:	e5d30000 	ldrb	r0, [r3]
 100887c:	e3500000 	cmp	r0, #0
 1008880:	0a000007 	beq	10088a4 <xil_printf+0x5c>
        if (*ctrl != '%') {
 1008884:	e3500025 	cmp	r0, #37	; 0x25
 1008888:	0a000009 	beq	10088b4 <xil_printf+0x6c>
            outbyte(*ctrl);
 100888c:	ebffff5a 	bl	10085fc <outbyte>
			ctrl += 1;
 1008890:	e59d3008 	ldr	r3, [sp, #8]
 1008894:	e2833001 	add	r3, r3, #1
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1008898:	e3530000 	cmp	r3, #0
			ctrl += 1;
 100889c:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 10088a0:	1afffff4 	bne	1008878 <xil_printf+0x30>
                continue;
        }
        goto try_next;
    }
    va_end( argp);
}
 10088a4:	e28dd02c 	add	sp, sp, #44	; 0x2c
 10088a8:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 10088ac:	e28dd010 	add	sp, sp, #16
 10088b0:	e12fff1e 	bx	lr
        dot_flag = 0;
 10088b4:	e3a08000 	mov	r8, #0
        par.unsigned_flag = 0;
 10088b8:	e58d4024 	str	r4, [sp, #36]	; 0x24
		par.left_flag = 0;
 10088bc:	e58d4020 	str	r4, [sp, #32]
		par.do_padding = 0;
 10088c0:	e58d401c 	str	r4, [sp, #28]
        par.pad_character = ' ';
 10088c4:	e5cd6018 	strb	r6, [sp, #24]
		par.num1=0;
 10088c8:	e1cd41f0 	strd	r4, [sp, #16]
		par.len=0;
 10088cc:	e58d400c 	str	r4, [sp, #12]
			ctrl += 1;
 10088d0:	e2832001 	add	r2, r3, #1
		if(ctrl != NULL) {
 10088d4:	e3520000 	cmp	r2, #0
			ctrl += 1;
 10088d8:	e58d2008 	str	r2, [sp, #8]
		if(ctrl != NULL) {
 10088dc:	0afffff0 	beq	10088a4 <xil_printf+0x5c>
			ch = *ctrl;
 10088e0:	e5d37001 	ldrb	r7, [r3, #1]
        if (isdigit((s32)ch) != 0) {
 10088e4:	fa00074c 	blx	100a61c <__locale_ctype_ptr>
 10088e8:	e2879001 	add	r9, r7, #1
 10088ec:	e7d03009 	ldrb	r3, [r0, r9]
 10088f0:	e3130004 	tst	r3, #4
 10088f4:	0a000016 	beq	1008954 <xil_printf+0x10c>
            if (dot_flag != 0) {
 10088f8:	e3580000 	cmp	r8, #0
 10088fc:	1a0000d9 	bne	1008c68 <xil_printf+0x420>
				if(ctrl != NULL) {
 1008900:	e59d3008 	ldr	r3, [sp, #8]
                if (ch == '0') {
 1008904:	e3570030 	cmp	r7, #48	; 0x30
                    par.pad_character = '0';
 1008908:	05cd7018 	strbeq	r7, [sp, #24]
				if(ctrl != NULL) {
 100890c:	e3530000 	cmp	r3, #0
 1008910:	0affffe3 	beq	10088a4 <xil_printf+0x5c>
			par.num1 = getnum(&ctrl);
 1008914:	e28d0008 	add	r0, sp, #8
 1008918:	ebffff3d 	bl	1008614 <getnum>
 100891c:	e59d3008 	ldr	r3, [sp, #8]
                par.do_padding = 1;
 1008920:	e3a02001 	mov	r2, #1
			par.num1 = getnum(&ctrl);
 1008924:	e58d0010 	str	r0, [sp, #16]
                par.do_padding = 1;
 1008928:	e58d201c 	str	r2, [sp, #28]
            if(ctrl != NULL) {
 100892c:	e3530000 	cmp	r3, #0
 1008930:	0affffdb 	beq	10088a4 <xil_printf+0x5c>
			ctrl -= 1;
 1008934:	e2433001 	sub	r3, r3, #1
 1008938:	e58d3008 	str	r3, [sp, #8]
		if(ctrl != NULL) {
 100893c:	e3530000 	cmp	r3, #0
 1008940:	1affffe2 	bne	10088d0 <xil_printf+0x88>
}
 1008944:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1008948:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 100894c:	e28dd010 	add	sp, sp, #16
 1008950:	e12fff1e 	bx	lr
        switch (tolower((s32)ch)) {
 1008954:	fa000730 	blx	100a61c <__locale_ctype_ptr>
 1008958:	e7d03009 	ldrb	r3, [r0, r9]
 100895c:	e2033003 	and	r3, r3, #3
 1008960:	e3530001 	cmp	r3, #1
 1008964:	02877020 	addeq	r7, r7, #32
 1008968:	e2477025 	sub	r7, r7, #37	; 0x25
 100896c:	e3570053 	cmp	r7, #83	; 0x53
 1008970:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
 1008974:	ea00005c 	b	1008aec <xil_printf+0x2a4>
 1008978:	01008bb0 	.word	0x01008bb0
 100897c:	01008aec 	.word	0x01008aec
 1008980:	01008aec 	.word	0x01008aec
 1008984:	01008aec 	.word	0x01008aec
 1008988:	01008aec 	.word	0x01008aec
 100898c:	01008aec 	.word	0x01008aec
 1008990:	01008aec 	.word	0x01008aec
 1008994:	01008aec 	.word	0x01008aec
 1008998:	01008bbc 	.word	0x01008bbc
 100899c:	01008ba4 	.word	0x01008ba4
 10089a0:	01008aec 	.word	0x01008aec
 10089a4:	01008aec 	.word	0x01008aec
 10089a8:	01008aec 	.word	0x01008aec
 10089ac:	01008aec 	.word	0x01008aec
 10089b0:	01008aec 	.word	0x01008aec
 10089b4:	01008aec 	.word	0x01008aec
 10089b8:	01008aec 	.word	0x01008aec
 10089bc:	01008aec 	.word	0x01008aec
 10089c0:	01008aec 	.word	0x01008aec
 10089c4:	01008aec 	.word	0x01008aec
 10089c8:	01008aec 	.word	0x01008aec
 10089cc:	01008aec 	.word	0x01008aec
 10089d0:	01008aec 	.word	0x01008aec
 10089d4:	01008aec 	.word	0x01008aec
 10089d8:	01008aec 	.word	0x01008aec
 10089dc:	01008aec 	.word	0x01008aec
 10089e0:	01008aec 	.word	0x01008aec
 10089e4:	01008aec 	.word	0x01008aec
 10089e8:	01008aec 	.word	0x01008aec
 10089ec:	01008aec 	.word	0x01008aec
 10089f0:	01008aec 	.word	0x01008aec
 10089f4:	01008aec 	.word	0x01008aec
 10089f8:	01008aec 	.word	0x01008aec
 10089fc:	01008aec 	.word	0x01008aec
 1008a00:	01008aec 	.word	0x01008aec
 1008a04:	01008aec 	.word	0x01008aec
 1008a08:	01008aec 	.word	0x01008aec
 1008a0c:	01008aec 	.word	0x01008aec
 1008a10:	01008aec 	.word	0x01008aec
 1008a14:	01008aec 	.word	0x01008aec
 1008a18:	01008aec 	.word	0x01008aec
 1008a1c:	01008aec 	.word	0x01008aec
 1008a20:	01008aec 	.word	0x01008aec
 1008a24:	01008aec 	.word	0x01008aec
 1008a28:	01008aec 	.word	0x01008aec
 1008a2c:	01008aec 	.word	0x01008aec
 1008a30:	01008aec 	.word	0x01008aec
 1008a34:	01008aec 	.word	0x01008aec
 1008a38:	01008aec 	.word	0x01008aec
 1008a3c:	01008aec 	.word	0x01008aec
 1008a40:	01008aec 	.word	0x01008aec
 1008a44:	01008b7c 	.word	0x01008b7c
 1008a48:	01008aec 	.word	0x01008aec
 1008a4c:	01008aec 	.word	0x01008aec
 1008a50:	01008aec 	.word	0x01008aec
 1008a54:	01008b1c 	.word	0x01008b1c
 1008a58:	01008aec 	.word	0x01008aec
 1008a5c:	01008aec 	.word	0x01008aec
 1008a60:	01008aec 	.word	0x01008aec
 1008a64:	01008aec 	.word	0x01008aec
 1008a68:	01008aec 	.word	0x01008aec
 1008a6c:	01008aec 	.word	0x01008aec
 1008a70:	01008b04 	.word	0x01008b04
 1008a74:	01008ad0 	.word	0x01008ad0
 1008a78:	01008aec 	.word	0x01008aec
 1008a7c:	01008aec 	.word	0x01008aec
 1008a80:	01008aec 	.word	0x01008aec
 1008a84:	01008aec 	.word	0x01008aec
 1008a88:	01008ad0 	.word	0x01008ad0
 1008a8c:	01008aec 	.word	0x01008aec
 1008a90:	01008aec 	.word	0x01008aec
 1008a94:	01008c60 	.word	0x01008c60
 1008a98:	01008aec 	.word	0x01008aec
 1008a9c:	01008aec 	.word	0x01008aec
 1008aa0:	01008aec 	.word	0x01008aec
 1008aa4:	01008b7c 	.word	0x01008b7c
 1008aa8:	01008aec 	.word	0x01008aec
 1008aac:	01008aec 	.word	0x01008aec
 1008ab0:	01008bcc 	.word	0x01008bcc
 1008ab4:	01008aec 	.word	0x01008aec
 1008ab8:	01008ac8 	.word	0x01008ac8
 1008abc:	01008aec 	.word	0x01008aec
 1008ac0:	01008aec 	.word	0x01008aec
 1008ac4:	01008b7c 	.word	0x01008b7c
                par.unsigned_flag = 1;
 1008ac8:	e3a03001 	mov	r3, #1
 1008acc:	e58d3024 	str	r3, [sp, #36]	; 0x24
                    outnum( va_arg(argp, s32), 10L, &par);
 1008ad0:	e59d3004 	ldr	r3, [sp, #4]
 1008ad4:	e28d200c 	add	r2, sp, #12
 1008ad8:	e3a0100a 	mov	r1, #10
 1008adc:	e283c004 	add	ip, r3, #4
 1008ae0:	e5930000 	ldr	r0, [r3]
 1008ae4:	e58dc004 	str	ip, [sp, #4]
 1008ae8:	ebfffefd 	bl	10086e4 <outnum>
			if(ctrl != NULL) {
 1008aec:	e59d3008 	ldr	r3, [sp, #8]
 1008af0:	e3530000 	cmp	r3, #0
 1008af4:	0affff6a 	beq	10088a4 <xil_printf+0x5c>
				ctrl += 1;
 1008af8:	e2833001 	add	r3, r3, #1
 1008afc:	e58d3008 	str	r3, [sp, #8]
 1008b00:	eaffff5a 	b	1008870 <xil_printf+0x28>
                outbyte( va_arg( argp, s32));
 1008b04:	e59d3004 	ldr	r3, [sp, #4]
 1008b08:	e2832004 	add	r2, r3, #4
 1008b0c:	e5d30000 	ldrb	r0, [r3]
 1008b10:	e58d2004 	str	r2, [sp, #4]
 1008b14:	ebfffeb8 	bl	10085fc <outbyte>
        if(Check == 1) {
 1008b18:	eafffff3 	b	1008aec <xil_printf+0x2a4>
                switch (*ctrl) {
 1008b1c:	e59d3008 	ldr	r3, [sp, #8]
 1008b20:	e5d30000 	ldrb	r0, [r3]
 1008b24:	e2403061 	sub	r3, r0, #97	; 0x61
 1008b28:	e3530011 	cmp	r3, #17
 1008b2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1008b30:	ea000065 	b	1008ccc <xil_printf+0x484>
 1008b34:	01008ca0 	.word	0x01008ca0
 1008b38:	01008ccc 	.word	0x01008ccc
 1008b3c:	01008ccc 	.word	0x01008ccc
 1008b40:	01008ccc 	.word	0x01008ccc
 1008b44:	01008ccc 	.word	0x01008ccc
 1008b48:	01008ccc 	.word	0x01008ccc
 1008b4c:	01008ccc 	.word	0x01008ccc
 1008b50:	01008cac 	.word	0x01008cac
 1008b54:	01008ccc 	.word	0x01008ccc
 1008b58:	01008ccc 	.word	0x01008ccc
 1008b5c:	01008ccc 	.word	0x01008ccc
 1008b60:	01008ccc 	.word	0x01008ccc
 1008b64:	01008ccc 	.word	0x01008ccc
 1008b68:	01008cb8 	.word	0x01008cb8
 1008b6c:	01008ccc 	.word	0x01008ccc
 1008b70:	01008ccc 	.word	0x01008ccc
 1008b74:	01008ccc 	.word	0x01008ccc
 1008b78:	01008c88 	.word	0x01008c88
                outnum((s32)va_arg(argp, s32), 16L, &par);
 1008b7c:	e59d3004 	ldr	r3, [sp, #4]
                par.unsigned_flag = 1;
 1008b80:	e3a01001 	mov	r1, #1
 1008b84:	e58d1024 	str	r1, [sp, #36]	; 0x24
                outnum((s32)va_arg(argp, s32), 16L, &par);
 1008b88:	e28d200c 	add	r2, sp, #12
 1008b8c:	e3a01010 	mov	r1, #16
 1008b90:	e283c004 	add	ip, r3, #4
 1008b94:	e5930000 	ldr	r0, [r3]
 1008b98:	e58dc004 	str	ip, [sp, #4]
 1008b9c:	ebfffed0 	bl	10086e4 <outnum>
        if(Check == 1) {
 1008ba0:	eaffffd1 	b	1008aec <xil_printf+0x2a4>
 1008ba4:	e59d3008 	ldr	r3, [sp, #8]
                dot_flag = 1;
 1008ba8:	e3a08001 	mov	r8, #1
 1008bac:	eaffff62 	b	100893c <xil_printf+0xf4>
                outbyte( '%');
 1008bb0:	e3a00025 	mov	r0, #37	; 0x25
 1008bb4:	ebfffe90 	bl	10085fc <outbyte>
        if(Check == 1) {
 1008bb8:	eaffffcb 	b	1008aec <xil_printf+0x2a4>
                par.left_flag = 1;
 1008bbc:	e3a02001 	mov	r2, #1
 1008bc0:	e59d3008 	ldr	r3, [sp, #8]
 1008bc4:	e58d2020 	str	r2, [sp, #32]
        if(Check == 1) {
 1008bc8:	eaffff5b 	b	100893c <xil_printf+0xf4>
                outs( va_arg( argp, char *), &par);
 1008bcc:	e59d3004 	ldr	r3, [sp, #4]
 1008bd0:	e5937000 	ldr	r7, [r3]
 1008bd4:	e2833004 	add	r3, r3, #4
 1008bd8:	e58d3004 	str	r3, [sp, #4]
	if(LocalPtr != NULL) {
 1008bdc:	e3570000 	cmp	r7, #0
 1008be0:	0a000002 	beq	1008bf0 <xil_printf+0x3a8>
		par->len = (s32)strlen( LocalPtr);
 1008be4:	e1a00007 	mov	r0, r7
 1008be8:	fa000cc4 	blx	100bf00 <strlen>
 1008bec:	e58d000c 	str	r0, [sp, #12]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1008bf0:	e1cd21dc 	ldrd	r2, [sp, #28]
 1008bf4:	e16f3f13 	clz	r3, r3
 1008bf8:	e3520000 	cmp	r2, #0
 1008bfc:	e1a032a3 	lsr	r3, r3, #5
 1008c00:	03a03000 	moveq	r3, #0
 1008c04:	e3530000 	cmp	r3, #0
 1008c08:	1a00001b 	bne	1008c7c <xil_printf+0x434>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 1008c0c:	e5d73000 	ldrb	r3, [r7]
 1008c10:	e3530000 	cmp	r3, #0
 1008c14:	1a000007 	bne	1008c38 <xil_printf+0x3f0>
 1008c18:	ea000009 	b	1008c44 <xil_printf+0x3fc>
		(par->num2)--;
 1008c1c:	e2433001 	sub	r3, r3, #1
 1008c20:	e58d3014 	str	r3, [sp, #20]
        outbyte(*LocalPtr);
 1008c24:	e5d70000 	ldrb	r0, [r7]
 1008c28:	ebfffe73 	bl	10085fc <outbyte>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 1008c2c:	e5f73001 	ldrb	r3, [r7, #1]!
 1008c30:	e3530000 	cmp	r3, #0
 1008c34:	0a000002 	beq	1008c44 <xil_printf+0x3fc>
 1008c38:	e59d3014 	ldr	r3, [sp, #20]
 1008c3c:	e3530000 	cmp	r3, #0
 1008c40:	1afffff5 	bne	1008c1c <xil_printf+0x3d4>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1008c44:	e1cd21dc 	ldrd	r2, [sp, #28]
 1008c48:	e3520000 	cmp	r2, #0
 1008c4c:	13530000 	cmpne	r3, #0
 1008c50:	0affffa5 	beq	1008aec <xil_printf+0x2a4>
 1008c54:	e28d000c 	add	r0, sp, #12
 1008c58:	ebfffe94 	bl	10086b0 <padding.part.0>
 1008c5c:	eaffffa2 	b	1008aec <xil_printf+0x2a4>
 1008c60:	e59d3008 	ldr	r3, [sp, #8]
 1008c64:	eaffff34 	b	100893c <xil_printf+0xf4>
                par.num2 = getnum(&ctrl);
 1008c68:	e28d0008 	add	r0, sp, #8
 1008c6c:	ebfffe68 	bl	1008614 <getnum>
 1008c70:	e59d3008 	ldr	r3, [sp, #8]
 1008c74:	e58d0014 	str	r0, [sp, #20]
 1008c78:	eaffff2b 	b	100892c <xil_printf+0xe4>
 1008c7c:	e28d000c 	add	r0, sp, #12
 1008c80:	ebfffe8a 	bl	10086b0 <padding.part.0>
 1008c84:	eaffffe0 	b	1008c0c <xil_printf+0x3c4>
                        outbyte( ((char8)0x0D));
 1008c88:	e3a0000d 	mov	r0, #13
 1008c8c:	ebfffe5a 	bl	10085fc <outbyte>
                ctrl += 1;
 1008c90:	e59d3008 	ldr	r3, [sp, #8]
 1008c94:	e2833001 	add	r3, r3, #1
 1008c98:	e58d3008 	str	r3, [sp, #8]
        if(Check == 1) {
 1008c9c:	eaffff26 	b	100893c <xil_printf+0xf4>
                        outbyte( ((char8)0x07));
 1008ca0:	e3a00007 	mov	r0, #7
 1008ca4:	ebfffe54 	bl	10085fc <outbyte>
                        break;
 1008ca8:	eafffff8 	b	1008c90 <xil_printf+0x448>
                        outbyte( ((char8)0x08));
 1008cac:	e3a00008 	mov	r0, #8
 1008cb0:	ebfffe51 	bl	10085fc <outbyte>
                        break;
 1008cb4:	eafffff5 	b	1008c90 <xil_printf+0x448>
                        outbyte( ((char8)0x0D));
 1008cb8:	e3a0000d 	mov	r0, #13
 1008cbc:	ebfffe4e 	bl	10085fc <outbyte>
                        outbyte( ((char8)0x0A));
 1008cc0:	e3a0000a 	mov	r0, #10
 1008cc4:	ebfffe4c 	bl	10085fc <outbyte>
                        break;
 1008cc8:	eafffff0 	b	1008c90 <xil_printf+0x448>
                        outbyte( *ctrl);
 1008ccc:	ebfffe4a 	bl	10085fc <outbyte>
                        break;
 1008cd0:	eaffffee 	b	1008c90 <xil_printf+0x448>

01008cd4 <Xil_ExceptionNullHandler>:
*
*****************************************************************************/
static void Xil_ExceptionNullHandler(void *Data)
{
	(void) Data;
DieLoop: goto DieLoop;
 1008cd4:	eafffffe 	b	1008cd4 <Xil_ExceptionNullHandler>

01008cd8 <Xil_DataAbortHandler>:
	    #endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Data abort with Data Fault Status Register  %lx\n",FaultStatus);
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Data abort %lx\n",DataAbortAddr);
#endif
	while(1) {
		;
 1008cd8:	eafffffe 	b	1008cd8 <Xil_DataAbortHandler>

01008cdc <Xil_PrefetchAbortHandler>:
		#endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Prefetch abort with Instruction Fault Status Register  %lx\n",FaultStatus);
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Prefetch abort %lx\n",PrefetchAbortAddr);
#endif
	while(1) {
		;
 1008cdc:	eafffffe 	b	1008cdc <Xil_PrefetchAbortHandler>

01008ce0 <Xil_UndefinedExceptionHandler>:
****************************************************************************/
void Xil_UndefinedExceptionHandler(void *CallBackRef){
	(void) CallBackRef;
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
	while(1) {
		;
 1008ce0:	eafffffe 	b	1008ce0 <Xil_UndefinedExceptionHandler>

01008ce4 <Xil_ExceptionInit>:
}
 1008ce4:	e12fff1e 	bx	lr

01008ce8 <Xil_ExceptionRegisterHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 1008ce8:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008cec:	e3403101 	movt	r3, #257	; 0x101
	XExc_VectorTable[Exception_id].Data = Data;
 1008cf0:	e083c180 	add	ip, r3, r0, lsl #3
	XExc_VectorTable[Exception_id].Handler = Handler;
 1008cf4:	e7831180 	str	r1, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 1008cf8:	e58c2004 	str	r2, [ip, #4]
}
 1008cfc:	e12fff1e 	bx	lr

01008d00 <Xil_GetExceptionRegisterHandler>:
	*Handler = XExc_VectorTable[Exception_id].Handler;
 1008d00:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008d04:	e3403101 	movt	r3, #257	; 0x101
 1008d08:	e793c180 	ldr	ip, [r3, r0, lsl #3]
	*Data = XExc_VectorTable[Exception_id].Data;
 1008d0c:	e0833180 	add	r3, r3, r0, lsl #3
	*Handler = XExc_VectorTable[Exception_id].Handler;
 1008d10:	e581c000 	str	ip, [r1]
	*Data = XExc_VectorTable[Exception_id].Data;
 1008d14:	e5933004 	ldr	r3, [r3, #4]
 1008d18:	e5823000 	str	r3, [r2]
}
 1008d1c:	e12fff1e 	bx	lr

01008d20 <Xil_ExceptionRemoveHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 1008d20:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008d24:	e3082cd4 	movw	r2, #36052	; 0x8cd4
 1008d28:	e3403101 	movt	r3, #257	; 0x101
 1008d2c:	e3402100 	movt	r2, #256	; 0x100
	XExc_VectorTable[Exception_id].Data = Data;
 1008d30:	e0831180 	add	r1, r3, r0, lsl #3
 1008d34:	e3a0c000 	mov	ip, #0
	XExc_VectorTable[Exception_id].Handler = Handler;
 1008d38:	e7832180 	str	r2, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 1008d3c:	e581c004 	str	ip, [r1, #4]
}
 1008d40:	e12fff1e 	bx	lr

01008d44 <XUartPs_SendByte>:
*
*****************************************************************************/
void XUartPs_SendByte(u32 BaseAddress, u8 Data)
{
	/* Wait until there is space in TX FIFO */
	while (XUartPs_IsTransmitFull(BaseAddress)) {
 1008d44:	e280202c 	add	r2, r0, #44	; 0x2c
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1008d48:	e5923000 	ldr	r3, [r2]
 1008d4c:	e3130010 	tst	r3, #16
 1008d50:	1afffffc 	bne	1008d48 <XUartPs_SendByte+0x4>
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1008d54:	e5801030 	str	r1, [r0, #48]	; 0x30
		;
	}

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, (u32)Data);
}
 1008d58:	e12fff1e 	bx	lr

01008d5c <XUartPs_RecvByte>:
*****************************************************************************/
u8 XUartPs_RecvByte(u32 BaseAddress)
{
	u32 RecievedByte;
	/* Wait until there is data */
	while (!XUartPs_IsReceiveData(BaseAddress)) {
 1008d5c:	e280202c 	add	r2, r0, #44	; 0x2c
	return *(volatile u32 *) Addr;
 1008d60:	e5923000 	ldr	r3, [r2]
 1008d64:	e3130002 	tst	r3, #2
 1008d68:	1afffffc 	bne	1008d60 <XUartPs_RecvByte+0x4>
 1008d6c:	e5900030 	ldr	r0, [r0, #48]	; 0x30
		;
	}
	RecievedByte = XUartPs_ReadReg(BaseAddress, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (u8)RecievedByte;
}
 1008d70:	e6ef0070 	uxtb	r0, r0
 1008d74:	e12fff1e 	bx	lr

01008d78 <XUartPs_ResetHw>:
*
* @note		None.
*
*****************************************************************************/
void XUartPs_ResetHw(u32 BaseAddress)
{
 1008d78:	e92d4010 	push	{r4, lr}
	*LocalAddr = Value;
 1008d7c:	e3031fff 	movw	r1, #16383	; 0x3fff
 1008d80:	e3a0e028 	mov	lr, #40	; 0x28
 1008d84:	e3a0c003 	mov	ip, #3
 1008d88:	e3a03000 	mov	r3, #0
 1008d8c:	e3a02020 	mov	r2, #32
 1008d90:	e580100c 	str	r1, [r0, #12]
 1008d94:	e300428b 	movw	r4, #651	; 0x28b
 1008d98:	e580e000 	str	lr, [r0]
 1008d9c:	e3a0e00f 	mov	lr, #15
 1008da0:	e580c000 	str	ip, [r0]
 1008da4:	e3a0cf4a 	mov	ip, #296	; 0x128
 1008da8:	e5801014 	str	r1, [r0, #20]
 1008dac:	e5803004 	str	r3, [r0, #4]
 1008db0:	e5802020 	str	r2, [r0, #32]
 1008db4:	e5802044 	str	r2, [r0, #68]	; 0x44
 1008db8:	e580301c 	str	r3, [r0, #28]
 1008dbc:	e5804018 	str	r4, [r0, #24]
 1008dc0:	e580e034 	str	lr, [r0, #52]	; 0x34
 1008dc4:	e580c000 	str	ip, [r0]
	 */
	XUartPs_WriteReg(BaseAddress, XUARTPS_CR_OFFSET,
				((u32)XUARTPS_CR_RX_DIS | (u32)XUARTPS_CR_TX_DIS |
						(u32)XUARTPS_CR_STOPBRK));

}
 1008dc8:	e8bd8010 	pop	{r4, pc}

01008dcc <FIQInterrupt>:
* @note		None.
*
******************************************************************************/
void FIQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_FIQ_INT].Handler(XExc_VectorTable[
 1008dcc:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008dd0:	e3403101 	movt	r3, #257	; 0x101
 1008dd4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
 1008dd8:	e5930034 	ldr	r0, [r3, #52]	; 0x34
 1008ddc:	e12fff12 	bx	r2

01008de0 <IRQInterrupt>:
* @note		None.
*
******************************************************************************/
void IRQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_IRQ_INT].Handler(XExc_VectorTable[
 1008de0:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008de4:	e3403101 	movt	r3, #257	; 0x101
 1008de8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 1008dec:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
 1008df0:	e12fff12 	bx	r2

01008df4 <UndefinedException>:
* @note		None.
*
******************************************************************************/
void UndefinedException(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_UNDEFINED_INT].Handler(XExc_VectorTable[
 1008df4:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008df8:	e3403101 	movt	r3, #257	; 0x101
 1008dfc:	e5932008 	ldr	r2, [r3, #8]
 1008e00:	e593000c 	ldr	r0, [r3, #12]
 1008e04:	e12fff12 	bx	r2

01008e08 <SWInterrupt>:
* @note		None.
*
******************************************************************************/
void SWInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_SWI_INT].Handler(XExc_VectorTable[
 1008e08:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008e0c:	e3403101 	movt	r3, #257	; 0x101
 1008e10:	e5932010 	ldr	r2, [r3, #16]
 1008e14:	e5930014 	ldr	r0, [r3, #20]
 1008e18:	e12fff12 	bx	r2

01008e1c <DataAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void DataAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_DATA_ABORT_INT].Handler(
 1008e1c:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008e20:	e3403101 	movt	r3, #257	; 0x101
 1008e24:	e5932020 	ldr	r2, [r3, #32]
 1008e28:	e5930024 	ldr	r0, [r3, #36]	; 0x24
 1008e2c:	e12fff12 	bx	r2

01008e30 <PrefetchAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void PrefetchAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_PREFETCH_ABORT_INT].Handler(
 1008e30:	e30330c4 	movw	r3, #12484	; 0x30c4
 1008e34:	e3403101 	movt	r3, #257	; 0x101
 1008e38:	e5932018 	ldr	r2, [r3, #24]
 1008e3c:	e593001c 	ldr	r0, [r3, #28]
 1008e40:	e12fff12 	bx	r2
 1008e44:	01018010 	.word	0x01018010
 1008e48:	01018010 	.word	0x01018010
 1008e4c:	01018010 	.word	0x01018010
 1008e50:	01029c8c 	.word	0x01029c8c
 1008e54:	00010000 	.word	0x00010000

01008e58 <_start>:
	.long	__stack


	.globl	_start
_start:
	bl      __cpu_init		/* Initialize the CPU first (BSP provides this) */
 1008e58:	eb000017 	bl	1008ebc <__cpu_init>

	mov	r0, #0
 1008e5c:	e3a00000 	mov	r0, #0

	/* clear sbss */
	ldr 	r1,.Lsbss_start		/* calculate beginning of the SBSS */
 1008e60:	e51f1024 	ldr	r1, [pc, #-36]	; 1008e44 <PrefetchAbortInterrupt+0x14>
	ldr	r2,.Lsbss_end		/* calculate end of the SBSS */
 1008e64:	e51f2024 	ldr	r2, [pc, #-36]	; 1008e48 <PrefetchAbortInterrupt+0x18>

.Lloop_sbss:
	cmp	r1,r2
 1008e68:	e1510002 	cmp	r1, r2
	bge	.Lenclsbss		/* If no SBSS, no clearing required */
 1008e6c:	aa000001 	bge	1008e78 <_start+0x20>
	str	r0, [r1], #4
 1008e70:	e4810004 	str	r0, [r1], #4
	b	.Lloop_sbss
 1008e74:	eafffffb 	b	1008e68 <_start+0x10>

.Lenclsbss:
	/* clear bss */
	ldr	r1,.Lbss_start		/* calculate beginning of the BSS */
 1008e78:	e51f1034 	ldr	r1, [pc, #-52]	; 1008e4c <PrefetchAbortInterrupt+0x1c>
	ldr	r2,.Lbss_end		/* calculate end of the BSS */
 1008e7c:	e51f2034 	ldr	r2, [pc, #-52]	; 1008e50 <PrefetchAbortInterrupt+0x20>

.Lloop_bss:
	cmp	r1,r2
 1008e80:	e1510002 	cmp	r1, r2
	bge	.Lenclbss		/* If no BSS, no clearing required */
 1008e84:	aa000001 	bge	1008e90 <_start+0x38>
	str	r0, [r1], #4
 1008e88:	e4810004 	str	r0, [r1], #4
	b	.Lloop_bss
 1008e8c:	eafffffb 	b	1008e80 <_start+0x28>

.Lenclbss:

	/* set stack pointer */
	ldr	r13,.Lstack		/* stack address */
 1008e90:	e51fd044 	ldr	sp, [pc, #-68]	; 1008e54 <PrefetchAbortInterrupt+0x24>

    /* Reset and start Global Timer */
	mov	r0, #0x0
 1008e94:	e3a00000 	mov	r0, #0
	mov	r1, #0x0
 1008e98:	e3a01000 	mov	r1, #0
	#if defined SLEEP_TIMER_BASEADDR
	bl XTime_StartTTCTimer
	#endif

#if USE_AMP != 1
	bl XTime_SetTime
 1008e9c:	eb000015 	bl	1008ef8 <XTime_SetTime>
	/* Setup profiling stuff */
	bl	_profile_init
#endif /* PROFILING */

   /* run global constructors */
   bl __libc_init_array
 1008ea0:	fa00035e 	blx	1009c20 <__libc_init_array>

	/* make sure argc and argv are valid */
	mov	r0, #0
 1008ea4:	e3a00000 	mov	r0, #0
	mov	r1, #0
 1008ea8:	e3a01000 	mov	r1, #0

	/* Let her rip */
	bl	main
 1008eac:	eb002163 	bl	1011440 <main>

   /* Cleanup global constructors */
   bl __libc_fini_array
 1008eb0:	fa00034e 	blx	1009bf0 <__libc_fini_array>
	/* Cleanup profiling stuff */
	bl	_profile_clean
#endif /* PROFILING */

        /* All done */
	bl	exit
 1008eb4:	fa000345 	blx	1009bd0 <exit>

.Lexit:	/* should never get here */
	b .Lexit
 1008eb8:	eafffffe 	b	1008eb8 <_start+0x60>

01008ebc <__cpu_init>:
	.global __cpu_init
	.align 2
__cpu_init:

/* Clear cp15 regs with unknown reset values */
	mov	r0, #0x0
 1008ebc:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c5, c0, 0	/* DFSR */
 1008ec0:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
	mcr	p15, 0, r0, c5, c0, 1	/* IFSR */
 1008ec4:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
	mcr	p15, 0, r0, c6, c0, 0	/* DFAR */
 1008ec8:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
	mcr	p15, 0, r0, c6, c0, 2	/* IFAR */
 1008ecc:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
	mcr	p15, 0, r0, c9, c13, 2	/* PMXEVCNTR */
 1008ed0:	ee090f5d 	mcr	15, 0, r0, cr9, cr13, {2}
	mcr	p15, 0, r0, c13, c0, 2	/* TPIDRURW */
 1008ed4:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
	mcr	p15, 0, r0, c13, c0, 3	/* TPIDRURO */
 1008ed8:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}

/* Reset and start Cycle Counter */
	mov	r2, #0x80000000		/* clear overflow */
 1008edc:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 3
 1008ee0:	ee092f7c 	mcr	15, 0, r2, cr9, cr12, {3}
	mov	r2, #0xd		/* D, C, E */
 1008ee4:	e3a0200d 	mov	r2, #13
	mcr	p15, 0, r2, c9, c12, 0
 1008ee8:	ee092f1c 	mcr	15, 0, r2, cr9, cr12, {0}
	mov	r2, #0x80000000		/* enable cycle counter */
 1008eec:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 1
 1008ef0:	ee092f3c 	mcr	15, 0, r2, cr9, cr12, {1}

	bx	lr
 1008ef4:	e12fff1e 	bx	lr

01008ef8 <XTime_SetTime>:
 1008ef8:	e3a03000 	mov	r3, #0
 1008efc:	e3a0c000 	mov	ip, #0
 1008f00:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008f04:	e3a02001 	mov	r2, #1
 1008f08:	e583c208 	str	ip, [r3, #520]	; 0x208
 1008f0c:	e5830200 	str	r0, [r3, #512]	; 0x200
 1008f10:	e5831204 	str	r1, [r3, #516]	; 0x204
 1008f14:	e5832208 	str	r2, [r3, #520]	; 0x208
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_COUNTER_UPPER_OFFSET,
		(u32)((u32)(Xtime_Global>>32U)));

	/* Enable Global Timer */
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_CONTROL_OFFSET, (u32)0x1);
}
 1008f18:	e12fff1e 	bx	lr

01008f1c <XTime_GetTime>:
	return *(volatile u32 *) Addr;
 1008f1c:	e3a03000 	mov	r3, #0
 1008f20:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008f24:	e5931204 	ldr	r1, [r3, #516]	; 0x204
 1008f28:	e593c200 	ldr	ip, [r3, #512]	; 0x200
 1008f2c:	e5932204 	ldr	r2, [r3, #516]	; 0x204
	/* Reading Global Timer Counter Register */
	do
	{
		high = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET);
		low = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);
	} while(Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET) != high);
 1008f30:	e1520001 	cmp	r2, r1
 1008f34:	1afffffa 	bne	1008f24 <XTime_GetTime+0x8>

	*Xtime_Global = (((XTime) high) << 32U) | (XTime) low;
 1008f38:	e580c000 	str	ip, [r0]
 1008f3c:	e5802004 	str	r2, [r0, #4]
}
 1008f40:	e12fff1e 	bx	lr
 1008f44:	00000000 	andeq	r0, r0, r0

01008f48 <__udivsi3>:
 1008f48:	1e4a      	subs	r2, r1, #1
 1008f4a:	bf08      	it	eq
 1008f4c:	4770      	bxeq	lr
 1008f4e:	f0c0 8124 	bcc.w	100919a <__udivsi3+0x252>
 1008f52:	4288      	cmp	r0, r1
 1008f54:	f240 8116 	bls.w	1009184 <__udivsi3+0x23c>
 1008f58:	4211      	tst	r1, r2
 1008f5a:	f000 8117 	beq.w	100918c <__udivsi3+0x244>
 1008f5e:	fab0 f380 	clz	r3, r0
 1008f62:	fab1 f281 	clz	r2, r1
 1008f66:	eba2 0303 	sub.w	r3, r2, r3
 1008f6a:	f1c3 031f 	rsb	r3, r3, #31
 1008f6e:	a204      	add	r2, pc, #16	; (adr r2, 1008f80 <__udivsi3+0x38>)
 1008f70:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 1008f74:	f04f 0200 	mov.w	r2, #0
 1008f78:	469f      	mov	pc, r3
 1008f7a:	bf00      	nop
 1008f7c:	f3af 8000 	nop.w
 1008f80:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 1008f84:	bf00      	nop
 1008f86:	eb42 0202 	adc.w	r2, r2, r2
 1008f8a:	bf28      	it	cs
 1008f8c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 1008f90:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 1008f94:	bf00      	nop
 1008f96:	eb42 0202 	adc.w	r2, r2, r2
 1008f9a:	bf28      	it	cs
 1008f9c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 1008fa0:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 1008fa4:	bf00      	nop
 1008fa6:	eb42 0202 	adc.w	r2, r2, r2
 1008faa:	bf28      	it	cs
 1008fac:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 1008fb0:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 1008fb4:	bf00      	nop
 1008fb6:	eb42 0202 	adc.w	r2, r2, r2
 1008fba:	bf28      	it	cs
 1008fbc:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 1008fc0:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 1008fc4:	bf00      	nop
 1008fc6:	eb42 0202 	adc.w	r2, r2, r2
 1008fca:	bf28      	it	cs
 1008fcc:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 1008fd0:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 1008fd4:	bf00      	nop
 1008fd6:	eb42 0202 	adc.w	r2, r2, r2
 1008fda:	bf28      	it	cs
 1008fdc:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 1008fe0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 1008fe4:	bf00      	nop
 1008fe6:	eb42 0202 	adc.w	r2, r2, r2
 1008fea:	bf28      	it	cs
 1008fec:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 1008ff0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 1008ff4:	bf00      	nop
 1008ff6:	eb42 0202 	adc.w	r2, r2, r2
 1008ffa:	bf28      	it	cs
 1008ffc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 1009000:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 1009004:	bf00      	nop
 1009006:	eb42 0202 	adc.w	r2, r2, r2
 100900a:	bf28      	it	cs
 100900c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 1009010:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 1009014:	bf00      	nop
 1009016:	eb42 0202 	adc.w	r2, r2, r2
 100901a:	bf28      	it	cs
 100901c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 1009020:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 1009024:	bf00      	nop
 1009026:	eb42 0202 	adc.w	r2, r2, r2
 100902a:	bf28      	it	cs
 100902c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 1009030:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 1009034:	bf00      	nop
 1009036:	eb42 0202 	adc.w	r2, r2, r2
 100903a:	bf28      	it	cs
 100903c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 1009040:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 1009044:	bf00      	nop
 1009046:	eb42 0202 	adc.w	r2, r2, r2
 100904a:	bf28      	it	cs
 100904c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 1009050:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 1009054:	bf00      	nop
 1009056:	eb42 0202 	adc.w	r2, r2, r2
 100905a:	bf28      	it	cs
 100905c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 1009060:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 1009064:	bf00      	nop
 1009066:	eb42 0202 	adc.w	r2, r2, r2
 100906a:	bf28      	it	cs
 100906c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 1009070:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 1009074:	bf00      	nop
 1009076:	eb42 0202 	adc.w	r2, r2, r2
 100907a:	bf28      	it	cs
 100907c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 1009080:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 1009084:	bf00      	nop
 1009086:	eb42 0202 	adc.w	r2, r2, r2
 100908a:	bf28      	it	cs
 100908c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 1009090:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 1009094:	bf00      	nop
 1009096:	eb42 0202 	adc.w	r2, r2, r2
 100909a:	bf28      	it	cs
 100909c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 10090a0:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 10090a4:	bf00      	nop
 10090a6:	eb42 0202 	adc.w	r2, r2, r2
 10090aa:	bf28      	it	cs
 10090ac:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 10090b0:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 10090b4:	bf00      	nop
 10090b6:	eb42 0202 	adc.w	r2, r2, r2
 10090ba:	bf28      	it	cs
 10090bc:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 10090c0:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 10090c4:	bf00      	nop
 10090c6:	eb42 0202 	adc.w	r2, r2, r2
 10090ca:	bf28      	it	cs
 10090cc:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 10090d0:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 10090d4:	bf00      	nop
 10090d6:	eb42 0202 	adc.w	r2, r2, r2
 10090da:	bf28      	it	cs
 10090dc:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 10090e0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 10090e4:	bf00      	nop
 10090e6:	eb42 0202 	adc.w	r2, r2, r2
 10090ea:	bf28      	it	cs
 10090ec:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 10090f0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 10090f4:	bf00      	nop
 10090f6:	eb42 0202 	adc.w	r2, r2, r2
 10090fa:	bf28      	it	cs
 10090fc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 1009100:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 1009104:	bf00      	nop
 1009106:	eb42 0202 	adc.w	r2, r2, r2
 100910a:	bf28      	it	cs
 100910c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 1009110:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 1009114:	bf00      	nop
 1009116:	eb42 0202 	adc.w	r2, r2, r2
 100911a:	bf28      	it	cs
 100911c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 1009120:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 1009124:	bf00      	nop
 1009126:	eb42 0202 	adc.w	r2, r2, r2
 100912a:	bf28      	it	cs
 100912c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 1009130:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 1009134:	bf00      	nop
 1009136:	eb42 0202 	adc.w	r2, r2, r2
 100913a:	bf28      	it	cs
 100913c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 1009140:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 1009144:	bf00      	nop
 1009146:	eb42 0202 	adc.w	r2, r2, r2
 100914a:	bf28      	it	cs
 100914c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 1009150:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 1009154:	bf00      	nop
 1009156:	eb42 0202 	adc.w	r2, r2, r2
 100915a:	bf28      	it	cs
 100915c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 1009160:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 1009164:	bf00      	nop
 1009166:	eb42 0202 	adc.w	r2, r2, r2
 100916a:	bf28      	it	cs
 100916c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 1009170:	ebb0 0f01 	cmp.w	r0, r1
 1009174:	bf00      	nop
 1009176:	eb42 0202 	adc.w	r2, r2, r2
 100917a:	bf28      	it	cs
 100917c:	eba0 0001 	subcs.w	r0, r0, r1
 1009180:	4610      	mov	r0, r2
 1009182:	4770      	bx	lr
 1009184:	bf0c      	ite	eq
 1009186:	2001      	moveq	r0, #1
 1009188:	2000      	movne	r0, #0
 100918a:	4770      	bx	lr
 100918c:	fab1 f281 	clz	r2, r1
 1009190:	f1c2 021f 	rsb	r2, r2, #31
 1009194:	fa20 f002 	lsr.w	r0, r0, r2
 1009198:	4770      	bx	lr
 100919a:	b108      	cbz	r0, 10091a0 <__udivsi3+0x258>
 100919c:	f04f 30ff 	mov.w	r0, #4294967295
 10091a0:	f000 b966 	b.w	1009470 <__aeabi_idiv0>

010091a4 <__aeabi_uidivmod>:
 10091a4:	2900      	cmp	r1, #0
 10091a6:	d0f8      	beq.n	100919a <__udivsi3+0x252>
 10091a8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 10091ac:	f7ff fecc 	bl	1008f48 <__udivsi3>
 10091b0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 10091b4:	fb02 f300 	mul.w	r3, r2, r0
 10091b8:	eba1 0103 	sub.w	r1, r1, r3
 10091bc:	4770      	bx	lr
 10091be:	bf00      	nop

010091c0 <__divsi3>:
 10091c0:	2900      	cmp	r1, #0
 10091c2:	f000 813e 	beq.w	1009442 <.divsi3_skip_div0_test+0x27c>

010091c6 <.divsi3_skip_div0_test>:
 10091c6:	ea80 0c01 	eor.w	ip, r0, r1
 10091ca:	bf48      	it	mi
 10091cc:	4249      	negmi	r1, r1
 10091ce:	1e4a      	subs	r2, r1, #1
 10091d0:	f000 811f 	beq.w	1009412 <.divsi3_skip_div0_test+0x24c>
 10091d4:	0003      	movs	r3, r0
 10091d6:	bf48      	it	mi
 10091d8:	4243      	negmi	r3, r0
 10091da:	428b      	cmp	r3, r1
 10091dc:	f240 811e 	bls.w	100941c <.divsi3_skip_div0_test+0x256>
 10091e0:	4211      	tst	r1, r2
 10091e2:	f000 8123 	beq.w	100942c <.divsi3_skip_div0_test+0x266>
 10091e6:	fab3 f283 	clz	r2, r3
 10091ea:	fab1 f081 	clz	r0, r1
 10091ee:	eba0 0202 	sub.w	r2, r0, r2
 10091f2:	f1c2 021f 	rsb	r2, r2, #31
 10091f6:	a004      	add	r0, pc, #16	; (adr r0, 1009208 <.divsi3_skip_div0_test+0x42>)
 10091f8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 10091fc:	f04f 0000 	mov.w	r0, #0
 1009200:	4697      	mov	pc, r2
 1009202:	bf00      	nop
 1009204:	f3af 8000 	nop.w
 1009208:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 100920c:	bf00      	nop
 100920e:	eb40 0000 	adc.w	r0, r0, r0
 1009212:	bf28      	it	cs
 1009214:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 1009218:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 100921c:	bf00      	nop
 100921e:	eb40 0000 	adc.w	r0, r0, r0
 1009222:	bf28      	it	cs
 1009224:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 1009228:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 100922c:	bf00      	nop
 100922e:	eb40 0000 	adc.w	r0, r0, r0
 1009232:	bf28      	it	cs
 1009234:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 1009238:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 100923c:	bf00      	nop
 100923e:	eb40 0000 	adc.w	r0, r0, r0
 1009242:	bf28      	it	cs
 1009244:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 1009248:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 100924c:	bf00      	nop
 100924e:	eb40 0000 	adc.w	r0, r0, r0
 1009252:	bf28      	it	cs
 1009254:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 1009258:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 100925c:	bf00      	nop
 100925e:	eb40 0000 	adc.w	r0, r0, r0
 1009262:	bf28      	it	cs
 1009264:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 1009268:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 100926c:	bf00      	nop
 100926e:	eb40 0000 	adc.w	r0, r0, r0
 1009272:	bf28      	it	cs
 1009274:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 1009278:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 100927c:	bf00      	nop
 100927e:	eb40 0000 	adc.w	r0, r0, r0
 1009282:	bf28      	it	cs
 1009284:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 1009288:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 100928c:	bf00      	nop
 100928e:	eb40 0000 	adc.w	r0, r0, r0
 1009292:	bf28      	it	cs
 1009294:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 1009298:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 100929c:	bf00      	nop
 100929e:	eb40 0000 	adc.w	r0, r0, r0
 10092a2:	bf28      	it	cs
 10092a4:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 10092a8:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 10092ac:	bf00      	nop
 10092ae:	eb40 0000 	adc.w	r0, r0, r0
 10092b2:	bf28      	it	cs
 10092b4:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 10092b8:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 10092bc:	bf00      	nop
 10092be:	eb40 0000 	adc.w	r0, r0, r0
 10092c2:	bf28      	it	cs
 10092c4:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 10092c8:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 10092cc:	bf00      	nop
 10092ce:	eb40 0000 	adc.w	r0, r0, r0
 10092d2:	bf28      	it	cs
 10092d4:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 10092d8:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 10092dc:	bf00      	nop
 10092de:	eb40 0000 	adc.w	r0, r0, r0
 10092e2:	bf28      	it	cs
 10092e4:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 10092e8:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 10092ec:	bf00      	nop
 10092ee:	eb40 0000 	adc.w	r0, r0, r0
 10092f2:	bf28      	it	cs
 10092f4:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 10092f8:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 10092fc:	bf00      	nop
 10092fe:	eb40 0000 	adc.w	r0, r0, r0
 1009302:	bf28      	it	cs
 1009304:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 1009308:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 100930c:	bf00      	nop
 100930e:	eb40 0000 	adc.w	r0, r0, r0
 1009312:	bf28      	it	cs
 1009314:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 1009318:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 100931c:	bf00      	nop
 100931e:	eb40 0000 	adc.w	r0, r0, r0
 1009322:	bf28      	it	cs
 1009324:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 1009328:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 100932c:	bf00      	nop
 100932e:	eb40 0000 	adc.w	r0, r0, r0
 1009332:	bf28      	it	cs
 1009334:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 1009338:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 100933c:	bf00      	nop
 100933e:	eb40 0000 	adc.w	r0, r0, r0
 1009342:	bf28      	it	cs
 1009344:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 1009348:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 100934c:	bf00      	nop
 100934e:	eb40 0000 	adc.w	r0, r0, r0
 1009352:	bf28      	it	cs
 1009354:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 1009358:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 100935c:	bf00      	nop
 100935e:	eb40 0000 	adc.w	r0, r0, r0
 1009362:	bf28      	it	cs
 1009364:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 1009368:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 100936c:	bf00      	nop
 100936e:	eb40 0000 	adc.w	r0, r0, r0
 1009372:	bf28      	it	cs
 1009374:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 1009378:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 100937c:	bf00      	nop
 100937e:	eb40 0000 	adc.w	r0, r0, r0
 1009382:	bf28      	it	cs
 1009384:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 1009388:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 100938c:	bf00      	nop
 100938e:	eb40 0000 	adc.w	r0, r0, r0
 1009392:	bf28      	it	cs
 1009394:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 1009398:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 100939c:	bf00      	nop
 100939e:	eb40 0000 	adc.w	r0, r0, r0
 10093a2:	bf28      	it	cs
 10093a4:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 10093a8:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 10093ac:	bf00      	nop
 10093ae:	eb40 0000 	adc.w	r0, r0, r0
 10093b2:	bf28      	it	cs
 10093b4:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 10093b8:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 10093bc:	bf00      	nop
 10093be:	eb40 0000 	adc.w	r0, r0, r0
 10093c2:	bf28      	it	cs
 10093c4:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 10093c8:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 10093cc:	bf00      	nop
 10093ce:	eb40 0000 	adc.w	r0, r0, r0
 10093d2:	bf28      	it	cs
 10093d4:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 10093d8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 10093dc:	bf00      	nop
 10093de:	eb40 0000 	adc.w	r0, r0, r0
 10093e2:	bf28      	it	cs
 10093e4:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 10093e8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 10093ec:	bf00      	nop
 10093ee:	eb40 0000 	adc.w	r0, r0, r0
 10093f2:	bf28      	it	cs
 10093f4:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 10093f8:	ebb3 0f01 	cmp.w	r3, r1
 10093fc:	bf00      	nop
 10093fe:	eb40 0000 	adc.w	r0, r0, r0
 1009402:	bf28      	it	cs
 1009404:	eba3 0301 	subcs.w	r3, r3, r1
 1009408:	f1bc 0f00 	cmp.w	ip, #0
 100940c:	bf48      	it	mi
 100940e:	4240      	negmi	r0, r0
 1009410:	4770      	bx	lr
 1009412:	ea9c 0f00 	teq	ip, r0
 1009416:	bf48      	it	mi
 1009418:	4240      	negmi	r0, r0
 100941a:	4770      	bx	lr
 100941c:	bf38      	it	cc
 100941e:	2000      	movcc	r0, #0
 1009420:	bf04      	itt	eq
 1009422:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 1009426:	f040 0001 	orreq.w	r0, r0, #1
 100942a:	4770      	bx	lr
 100942c:	fab1 f281 	clz	r2, r1
 1009430:	f1c2 021f 	rsb	r2, r2, #31
 1009434:	f1bc 0f00 	cmp.w	ip, #0
 1009438:	fa23 f002 	lsr.w	r0, r3, r2
 100943c:	bf48      	it	mi
 100943e:	4240      	negmi	r0, r0
 1009440:	4770      	bx	lr
 1009442:	2800      	cmp	r0, #0
 1009444:	bfc8      	it	gt
 1009446:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 100944a:	bfb8      	it	lt
 100944c:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 1009450:	f000 b80e 	b.w	1009470 <__aeabi_idiv0>

01009454 <__aeabi_idivmod>:
 1009454:	2900      	cmp	r1, #0
 1009456:	d0f4      	beq.n	1009442 <.divsi3_skip_div0_test+0x27c>
 1009458:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 100945c:	f7ff feb3 	bl	10091c6 <.divsi3_skip_div0_test>
 1009460:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 1009464:	fb02 f300 	mul.w	r3, r2, r0
 1009468:	eba1 0103 	sub.w	r1, r1, r3
 100946c:	4770      	bx	lr
 100946e:	bf00      	nop

01009470 <__aeabi_idiv0>:
 1009470:	4770      	bx	lr
 1009472:	bf00      	nop

01009474 <__aeabi_drsub>:
 1009474:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 1009478:	e002      	b.n	1009480 <__adddf3>
 100947a:	bf00      	nop

0100947c <__aeabi_dsub>:
 100947c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

01009480 <__adddf3>:
 1009480:	b530      	push	{r4, r5, lr}
 1009482:	ea4f 0441 	mov.w	r4, r1, lsl #1
 1009486:	ea4f 0543 	mov.w	r5, r3, lsl #1
 100948a:	ea94 0f05 	teq	r4, r5
 100948e:	bf08      	it	eq
 1009490:	ea90 0f02 	teqeq	r0, r2
 1009494:	bf1f      	itttt	ne
 1009496:	ea54 0c00 	orrsne.w	ip, r4, r0
 100949a:	ea55 0c02 	orrsne.w	ip, r5, r2
 100949e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 10094a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 10094a6:	f000 80e2 	beq.w	100966e <__adddf3+0x1ee>
 10094aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 10094ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 10094b2:	bfb8      	it	lt
 10094b4:	426d      	neglt	r5, r5
 10094b6:	dd0c      	ble.n	10094d2 <__adddf3+0x52>
 10094b8:	442c      	add	r4, r5
 10094ba:	ea80 0202 	eor.w	r2, r0, r2
 10094be:	ea81 0303 	eor.w	r3, r1, r3
 10094c2:	ea82 0000 	eor.w	r0, r2, r0
 10094c6:	ea83 0101 	eor.w	r1, r3, r1
 10094ca:	ea80 0202 	eor.w	r2, r0, r2
 10094ce:	ea81 0303 	eor.w	r3, r1, r3
 10094d2:	2d36      	cmp	r5, #54	; 0x36
 10094d4:	bf88      	it	hi
 10094d6:	bd30      	pophi	{r4, r5, pc}
 10094d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 10094dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 10094e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 10094e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 10094e8:	d002      	beq.n	10094f0 <__adddf3+0x70>
 10094ea:	4240      	negs	r0, r0
 10094ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 10094f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 10094f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 10094f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 10094fc:	d002      	beq.n	1009504 <__adddf3+0x84>
 10094fe:	4252      	negs	r2, r2
 1009500:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 1009504:	ea94 0f05 	teq	r4, r5
 1009508:	f000 80a7 	beq.w	100965a <__adddf3+0x1da>
 100950c:	f1a4 0401 	sub.w	r4, r4, #1
 1009510:	f1d5 0e20 	rsbs	lr, r5, #32
 1009514:	db0d      	blt.n	1009532 <__adddf3+0xb2>
 1009516:	fa02 fc0e 	lsl.w	ip, r2, lr
 100951a:	fa22 f205 	lsr.w	r2, r2, r5
 100951e:	1880      	adds	r0, r0, r2
 1009520:	f141 0100 	adc.w	r1, r1, #0
 1009524:	fa03 f20e 	lsl.w	r2, r3, lr
 1009528:	1880      	adds	r0, r0, r2
 100952a:	fa43 f305 	asr.w	r3, r3, r5
 100952e:	4159      	adcs	r1, r3
 1009530:	e00e      	b.n	1009550 <__adddf3+0xd0>
 1009532:	f1a5 0520 	sub.w	r5, r5, #32
 1009536:	f10e 0e20 	add.w	lr, lr, #32
 100953a:	2a01      	cmp	r2, #1
 100953c:	fa03 fc0e 	lsl.w	ip, r3, lr
 1009540:	bf28      	it	cs
 1009542:	f04c 0c02 	orrcs.w	ip, ip, #2
 1009546:	fa43 f305 	asr.w	r3, r3, r5
 100954a:	18c0      	adds	r0, r0, r3
 100954c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 1009550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1009554:	d507      	bpl.n	1009566 <__adddf3+0xe6>
 1009556:	f04f 0e00 	mov.w	lr, #0
 100955a:	f1dc 0c00 	rsbs	ip, ip, #0
 100955e:	eb7e 0000 	sbcs.w	r0, lr, r0
 1009562:	eb6e 0101 	sbc.w	r1, lr, r1
 1009566:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 100956a:	d31b      	bcc.n	10095a4 <__adddf3+0x124>
 100956c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 1009570:	d30c      	bcc.n	100958c <__adddf3+0x10c>
 1009572:	0849      	lsrs	r1, r1, #1
 1009574:	ea5f 0030 	movs.w	r0, r0, rrx
 1009578:	ea4f 0c3c 	mov.w	ip, ip, rrx
 100957c:	f104 0401 	add.w	r4, r4, #1
 1009580:	ea4f 5244 	mov.w	r2, r4, lsl #21
 1009584:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 1009588:	f080 809a 	bcs.w	10096c0 <__adddf3+0x240>
 100958c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 1009590:	bf08      	it	eq
 1009592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 1009596:	f150 0000 	adcs.w	r0, r0, #0
 100959a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 100959e:	ea41 0105 	orr.w	r1, r1, r5
 10095a2:	bd30      	pop	{r4, r5, pc}
 10095a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 10095a8:	4140      	adcs	r0, r0
 10095aa:	eb41 0101 	adc.w	r1, r1, r1
 10095ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 10095b2:	f1a4 0401 	sub.w	r4, r4, #1
 10095b6:	d1e9      	bne.n	100958c <__adddf3+0x10c>
 10095b8:	f091 0f00 	teq	r1, #0
 10095bc:	bf04      	itt	eq
 10095be:	4601      	moveq	r1, r0
 10095c0:	2000      	moveq	r0, #0
 10095c2:	fab1 f381 	clz	r3, r1
 10095c6:	bf08      	it	eq
 10095c8:	3320      	addeq	r3, #32
 10095ca:	f1a3 030b 	sub.w	r3, r3, #11
 10095ce:	f1b3 0220 	subs.w	r2, r3, #32
 10095d2:	da0c      	bge.n	10095ee <__adddf3+0x16e>
 10095d4:	320c      	adds	r2, #12
 10095d6:	dd08      	ble.n	10095ea <__adddf3+0x16a>
 10095d8:	f102 0c14 	add.w	ip, r2, #20
 10095dc:	f1c2 020c 	rsb	r2, r2, #12
 10095e0:	fa01 f00c 	lsl.w	r0, r1, ip
 10095e4:	fa21 f102 	lsr.w	r1, r1, r2
 10095e8:	e00c      	b.n	1009604 <__adddf3+0x184>
 10095ea:	f102 0214 	add.w	r2, r2, #20
 10095ee:	bfd8      	it	le
 10095f0:	f1c2 0c20 	rsble	ip, r2, #32
 10095f4:	fa01 f102 	lsl.w	r1, r1, r2
 10095f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 10095fc:	bfdc      	itt	le
 10095fe:	ea41 010c 	orrle.w	r1, r1, ip
 1009602:	4090      	lslle	r0, r2
 1009604:	1ae4      	subs	r4, r4, r3
 1009606:	bfa2      	ittt	ge
 1009608:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 100960c:	4329      	orrge	r1, r5
 100960e:	bd30      	popge	{r4, r5, pc}
 1009610:	ea6f 0404 	mvn.w	r4, r4
 1009614:	3c1f      	subs	r4, #31
 1009616:	da1c      	bge.n	1009652 <__adddf3+0x1d2>
 1009618:	340c      	adds	r4, #12
 100961a:	dc0e      	bgt.n	100963a <__adddf3+0x1ba>
 100961c:	f104 0414 	add.w	r4, r4, #20
 1009620:	f1c4 0220 	rsb	r2, r4, #32
 1009624:	fa20 f004 	lsr.w	r0, r0, r4
 1009628:	fa01 f302 	lsl.w	r3, r1, r2
 100962c:	ea40 0003 	orr.w	r0, r0, r3
 1009630:	fa21 f304 	lsr.w	r3, r1, r4
 1009634:	ea45 0103 	orr.w	r1, r5, r3
 1009638:	bd30      	pop	{r4, r5, pc}
 100963a:	f1c4 040c 	rsb	r4, r4, #12
 100963e:	f1c4 0220 	rsb	r2, r4, #32
 1009642:	fa20 f002 	lsr.w	r0, r0, r2
 1009646:	fa01 f304 	lsl.w	r3, r1, r4
 100964a:	ea40 0003 	orr.w	r0, r0, r3
 100964e:	4629      	mov	r1, r5
 1009650:	bd30      	pop	{r4, r5, pc}
 1009652:	fa21 f004 	lsr.w	r0, r1, r4
 1009656:	4629      	mov	r1, r5
 1009658:	bd30      	pop	{r4, r5, pc}
 100965a:	f094 0f00 	teq	r4, #0
 100965e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 1009662:	bf06      	itte	eq
 1009664:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 1009668:	3401      	addeq	r4, #1
 100966a:	3d01      	subne	r5, #1
 100966c:	e74e      	b.n	100950c <__adddf3+0x8c>
 100966e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 1009672:	bf18      	it	ne
 1009674:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 1009678:	d029      	beq.n	10096ce <__adddf3+0x24e>
 100967a:	ea94 0f05 	teq	r4, r5
 100967e:	bf08      	it	eq
 1009680:	ea90 0f02 	teqeq	r0, r2
 1009684:	d005      	beq.n	1009692 <__adddf3+0x212>
 1009686:	ea54 0c00 	orrs.w	ip, r4, r0
 100968a:	bf04      	itt	eq
 100968c:	4619      	moveq	r1, r3
 100968e:	4610      	moveq	r0, r2
 1009690:	bd30      	pop	{r4, r5, pc}
 1009692:	ea91 0f03 	teq	r1, r3
 1009696:	bf1e      	ittt	ne
 1009698:	2100      	movne	r1, #0
 100969a:	2000      	movne	r0, #0
 100969c:	bd30      	popne	{r4, r5, pc}
 100969e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 10096a2:	d105      	bne.n	10096b0 <__adddf3+0x230>
 10096a4:	0040      	lsls	r0, r0, #1
 10096a6:	4149      	adcs	r1, r1
 10096a8:	bf28      	it	cs
 10096aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 10096ae:	bd30      	pop	{r4, r5, pc}
 10096b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 10096b4:	bf3c      	itt	cc
 10096b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 10096ba:	bd30      	popcc	{r4, r5, pc}
 10096bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 10096c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 10096c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 10096c8:	f04f 0000 	mov.w	r0, #0
 10096cc:	bd30      	pop	{r4, r5, pc}
 10096ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 10096d2:	bf1a      	itte	ne
 10096d4:	4619      	movne	r1, r3
 10096d6:	4610      	movne	r0, r2
 10096d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 10096dc:	bf1c      	itt	ne
 10096de:	460b      	movne	r3, r1
 10096e0:	4602      	movne	r2, r0
 10096e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 10096e6:	bf06      	itte	eq
 10096e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 10096ec:	ea91 0f03 	teqeq	r1, r3
 10096f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 10096f4:	bd30      	pop	{r4, r5, pc}
 10096f6:	bf00      	nop

010096f8 <__aeabi_ui2d>:
 10096f8:	f090 0f00 	teq	r0, #0
 10096fc:	bf04      	itt	eq
 10096fe:	2100      	moveq	r1, #0
 1009700:	4770      	bxeq	lr
 1009702:	b530      	push	{r4, r5, lr}
 1009704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 1009708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100970c:	f04f 0500 	mov.w	r5, #0
 1009710:	f04f 0100 	mov.w	r1, #0
 1009714:	e750      	b.n	10095b8 <__adddf3+0x138>
 1009716:	bf00      	nop

01009718 <__aeabi_i2d>:
 1009718:	f090 0f00 	teq	r0, #0
 100971c:	bf04      	itt	eq
 100971e:	2100      	moveq	r1, #0
 1009720:	4770      	bxeq	lr
 1009722:	b530      	push	{r4, r5, lr}
 1009724:	f44f 6480 	mov.w	r4, #1024	; 0x400
 1009728:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100972c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 1009730:	bf48      	it	mi
 1009732:	4240      	negmi	r0, r0
 1009734:	f04f 0100 	mov.w	r1, #0
 1009738:	e73e      	b.n	10095b8 <__adddf3+0x138>
 100973a:	bf00      	nop

0100973c <__aeabi_f2d>:
 100973c:	0042      	lsls	r2, r0, #1
 100973e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 1009742:	ea4f 0131 	mov.w	r1, r1, rrx
 1009746:	ea4f 7002 	mov.w	r0, r2, lsl #28
 100974a:	bf1f      	itttt	ne
 100974c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 1009750:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 1009754:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 1009758:	4770      	bxne	lr
 100975a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 100975e:	bf08      	it	eq
 1009760:	4770      	bxeq	lr
 1009762:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 1009766:	bf04      	itt	eq
 1009768:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 100976c:	4770      	bxeq	lr
 100976e:	b530      	push	{r4, r5, lr}
 1009770:	f44f 7460 	mov.w	r4, #896	; 0x380
 1009774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1009778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 100977c:	e71c      	b.n	10095b8 <__adddf3+0x138>
 100977e:	bf00      	nop

01009780 <__aeabi_ul2d>:
 1009780:	ea50 0201 	orrs.w	r2, r0, r1
 1009784:	bf08      	it	eq
 1009786:	4770      	bxeq	lr
 1009788:	b530      	push	{r4, r5, lr}
 100978a:	f04f 0500 	mov.w	r5, #0
 100978e:	e00a      	b.n	10097a6 <__aeabi_l2d+0x16>

01009790 <__aeabi_l2d>:
 1009790:	ea50 0201 	orrs.w	r2, r0, r1
 1009794:	bf08      	it	eq
 1009796:	4770      	bxeq	lr
 1009798:	b530      	push	{r4, r5, lr}
 100979a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 100979e:	d502      	bpl.n	10097a6 <__aeabi_l2d+0x16>
 10097a0:	4240      	negs	r0, r0
 10097a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 10097a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 10097aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 10097ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 10097b2:	f43f aed8 	beq.w	1009566 <__adddf3+0xe6>
 10097b6:	f04f 0203 	mov.w	r2, #3
 10097ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 10097be:	bf18      	it	ne
 10097c0:	3203      	addne	r2, #3
 10097c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 10097c6:	bf18      	it	ne
 10097c8:	3203      	addne	r2, #3
 10097ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 10097ce:	f1c2 0320 	rsb	r3, r2, #32
 10097d2:	fa00 fc03 	lsl.w	ip, r0, r3
 10097d6:	fa20 f002 	lsr.w	r0, r0, r2
 10097da:	fa01 fe03 	lsl.w	lr, r1, r3
 10097de:	ea40 000e 	orr.w	r0, r0, lr
 10097e2:	fa21 f102 	lsr.w	r1, r1, r2
 10097e6:	4414      	add	r4, r2
 10097e8:	e6bd      	b.n	1009566 <__adddf3+0xe6>
 10097ea:	bf00      	nop

010097ec <__aeabi_frsub>:
 10097ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 10097f0:	e002      	b.n	10097f8 <__addsf3>
 10097f2:	bf00      	nop

010097f4 <__aeabi_fsub>:
 10097f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

010097f8 <__addsf3>:
 10097f8:	0042      	lsls	r2, r0, #1
 10097fa:	bf1f      	itttt	ne
 10097fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 1009800:	ea92 0f03 	teqne	r2, r3
 1009804:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 1009808:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 100980c:	d06a      	beq.n	10098e4 <__addsf3+0xec>
 100980e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 1009812:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 1009816:	bfc1      	itttt	gt
 1009818:	18d2      	addgt	r2, r2, r3
 100981a:	4041      	eorgt	r1, r0
 100981c:	4048      	eorgt	r0, r1
 100981e:	4041      	eorgt	r1, r0
 1009820:	bfb8      	it	lt
 1009822:	425b      	neglt	r3, r3
 1009824:	2b19      	cmp	r3, #25
 1009826:	bf88      	it	hi
 1009828:	4770      	bxhi	lr
 100982a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 100982e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 1009832:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1009836:	bf18      	it	ne
 1009838:	4240      	negne	r0, r0
 100983a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 100983e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 1009842:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 1009846:	bf18      	it	ne
 1009848:	4249      	negne	r1, r1
 100984a:	ea92 0f03 	teq	r2, r3
 100984e:	d03f      	beq.n	10098d0 <__addsf3+0xd8>
 1009850:	f1a2 0201 	sub.w	r2, r2, #1
 1009854:	fa41 fc03 	asr.w	ip, r1, r3
 1009858:	eb10 000c 	adds.w	r0, r0, ip
 100985c:	f1c3 0320 	rsb	r3, r3, #32
 1009860:	fa01 f103 	lsl.w	r1, r1, r3
 1009864:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 1009868:	d502      	bpl.n	1009870 <__addsf3+0x78>
 100986a:	4249      	negs	r1, r1
 100986c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 1009870:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1009874:	d313      	bcc.n	100989e <__addsf3+0xa6>
 1009876:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 100987a:	d306      	bcc.n	100988a <__addsf3+0x92>
 100987c:	0840      	lsrs	r0, r0, #1
 100987e:	ea4f 0131 	mov.w	r1, r1, rrx
 1009882:	f102 0201 	add.w	r2, r2, #1
 1009886:	2afe      	cmp	r2, #254	; 0xfe
 1009888:	d251      	bcs.n	100992e <__addsf3+0x136>
 100988a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 100988e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 1009892:	bf08      	it	eq
 1009894:	f020 0001 	biceq.w	r0, r0, #1
 1009898:	ea40 0003 	orr.w	r0, r0, r3
 100989c:	4770      	bx	lr
 100989e:	0049      	lsls	r1, r1, #1
 10098a0:	eb40 0000 	adc.w	r0, r0, r0
 10098a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 10098a8:	f1a2 0201 	sub.w	r2, r2, #1
 10098ac:	d1ed      	bne.n	100988a <__addsf3+0x92>
 10098ae:	fab0 fc80 	clz	ip, r0
 10098b2:	f1ac 0c08 	sub.w	ip, ip, #8
 10098b6:	ebb2 020c 	subs.w	r2, r2, ip
 10098ba:	fa00 f00c 	lsl.w	r0, r0, ip
 10098be:	bfaa      	itet	ge
 10098c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 10098c4:	4252      	neglt	r2, r2
 10098c6:	4318      	orrge	r0, r3
 10098c8:	bfbc      	itt	lt
 10098ca:	40d0      	lsrlt	r0, r2
 10098cc:	4318      	orrlt	r0, r3
 10098ce:	4770      	bx	lr
 10098d0:	f092 0f00 	teq	r2, #0
 10098d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 10098d8:	bf06      	itte	eq
 10098da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 10098de:	3201      	addeq	r2, #1
 10098e0:	3b01      	subne	r3, #1
 10098e2:	e7b5      	b.n	1009850 <__addsf3+0x58>
 10098e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 10098e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 10098ec:	bf18      	it	ne
 10098ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 10098f2:	d021      	beq.n	1009938 <__addsf3+0x140>
 10098f4:	ea92 0f03 	teq	r2, r3
 10098f8:	d004      	beq.n	1009904 <__addsf3+0x10c>
 10098fa:	f092 0f00 	teq	r2, #0
 10098fe:	bf08      	it	eq
 1009900:	4608      	moveq	r0, r1
 1009902:	4770      	bx	lr
 1009904:	ea90 0f01 	teq	r0, r1
 1009908:	bf1c      	itt	ne
 100990a:	2000      	movne	r0, #0
 100990c:	4770      	bxne	lr
 100990e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 1009912:	d104      	bne.n	100991e <__addsf3+0x126>
 1009914:	0040      	lsls	r0, r0, #1
 1009916:	bf28      	it	cs
 1009918:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 100991c:	4770      	bx	lr
 100991e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 1009922:	bf3c      	itt	cc
 1009924:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 1009928:	4770      	bxcc	lr
 100992a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 100992e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 1009932:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 1009936:	4770      	bx	lr
 1009938:	ea7f 6222 	mvns.w	r2, r2, asr #24
 100993c:	bf16      	itet	ne
 100993e:	4608      	movne	r0, r1
 1009940:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 1009944:	4601      	movne	r1, r0
 1009946:	0242      	lsls	r2, r0, #9
 1009948:	bf06      	itte	eq
 100994a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 100994e:	ea90 0f01 	teqeq	r0, r1
 1009952:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 1009956:	4770      	bx	lr

01009958 <__aeabi_ui2f>:
 1009958:	f04f 0300 	mov.w	r3, #0
 100995c:	e004      	b.n	1009968 <__aeabi_i2f+0x8>
 100995e:	bf00      	nop

01009960 <__aeabi_i2f>:
 1009960:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 1009964:	bf48      	it	mi
 1009966:	4240      	negmi	r0, r0
 1009968:	ea5f 0c00 	movs.w	ip, r0
 100996c:	bf08      	it	eq
 100996e:	4770      	bxeq	lr
 1009970:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 1009974:	4601      	mov	r1, r0
 1009976:	f04f 0000 	mov.w	r0, #0
 100997a:	e01c      	b.n	10099b6 <__aeabi_l2f+0x2a>

0100997c <__aeabi_ul2f>:
 100997c:	ea50 0201 	orrs.w	r2, r0, r1
 1009980:	bf08      	it	eq
 1009982:	4770      	bxeq	lr
 1009984:	f04f 0300 	mov.w	r3, #0
 1009988:	e00a      	b.n	10099a0 <__aeabi_l2f+0x14>
 100998a:	bf00      	nop

0100998c <__aeabi_l2f>:
 100998c:	ea50 0201 	orrs.w	r2, r0, r1
 1009990:	bf08      	it	eq
 1009992:	4770      	bxeq	lr
 1009994:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 1009998:	d502      	bpl.n	10099a0 <__aeabi_l2f+0x14>
 100999a:	4240      	negs	r0, r0
 100999c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 10099a0:	ea5f 0c01 	movs.w	ip, r1
 10099a4:	bf02      	ittt	eq
 10099a6:	4684      	moveq	ip, r0
 10099a8:	4601      	moveq	r1, r0
 10099aa:	2000      	moveq	r0, #0
 10099ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 10099b0:	bf08      	it	eq
 10099b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 10099b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 10099ba:	fabc f28c 	clz	r2, ip
 10099be:	3a08      	subs	r2, #8
 10099c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 10099c4:	db10      	blt.n	10099e8 <__aeabi_l2f+0x5c>
 10099c6:	fa01 fc02 	lsl.w	ip, r1, r2
 10099ca:	4463      	add	r3, ip
 10099cc:	fa00 fc02 	lsl.w	ip, r0, r2
 10099d0:	f1c2 0220 	rsb	r2, r2, #32
 10099d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 10099d8:	fa20 f202 	lsr.w	r2, r0, r2
 10099dc:	eb43 0002 	adc.w	r0, r3, r2
 10099e0:	bf08      	it	eq
 10099e2:	f020 0001 	biceq.w	r0, r0, #1
 10099e6:	4770      	bx	lr
 10099e8:	f102 0220 	add.w	r2, r2, #32
 10099ec:	fa01 fc02 	lsl.w	ip, r1, r2
 10099f0:	f1c2 0220 	rsb	r2, r2, #32
 10099f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 10099f8:	fa21 f202 	lsr.w	r2, r1, r2
 10099fc:	eb43 0002 	adc.w	r0, r3, r2
 1009a00:	bf08      	it	eq
 1009a02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 1009a06:	4770      	bx	lr

01009a08 <__aeabi_uldivmod>:
 1009a08:	b953      	cbnz	r3, 1009a20 <__aeabi_uldivmod+0x18>
 1009a0a:	b94a      	cbnz	r2, 1009a20 <__aeabi_uldivmod+0x18>
 1009a0c:	2900      	cmp	r1, #0
 1009a0e:	bf08      	it	eq
 1009a10:	2800      	cmpeq	r0, #0
 1009a12:	bf1c      	itt	ne
 1009a14:	f04f 31ff 	movne.w	r1, #4294967295
 1009a18:	f04f 30ff 	movne.w	r0, #4294967295
 1009a1c:	f7ff bd28 	b.w	1009470 <__aeabi_idiv0>
 1009a20:	f1ad 0c08 	sub.w	ip, sp, #8
 1009a24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 1009a28:	f000 f846 	bl	1009ab8 <__udivmoddi4>
 1009a2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 1009a30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1009a34:	b004      	add	sp, #16
 1009a36:	4770      	bx	lr

01009a38 <__aeabi_f2ulz>:
 1009a38:	ee07 0a90 	vmov	s15, r0
 1009a3c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 1009a68 <__aeabi_f2ulz+0x30>
 1009a40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 1009a44:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 1009a70 <__aeabi_f2ulz+0x38>
 1009a48:	ee26 7b07 	vmul.f64	d7, d6, d7
 1009a4c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 1009a50:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 1009a54:	ee17 1a10 	vmov	r1, s14
 1009a58:	ee04 6b45 	vmls.f64	d6, d4, d5
 1009a5c:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 1009a60:	ee17 0a90 	vmov	r0, s15
 1009a64:	4770      	bx	lr
 1009a66:	bf00      	nop
 1009a68:	00000000 	.word	0x00000000
 1009a6c:	41f00000 	.word	0x41f00000
 1009a70:	00000000 	.word	0x00000000
 1009a74:	3df00000 	.word	0x3df00000

01009a78 <__aeabi_d2ulz>:
 1009a78:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 1009aa8 <__aeabi_d2ulz+0x30>
 1009a7c:	ec41 0b16 	vmov	d6, r0, r1
 1009a80:	ee26 7b07 	vmul.f64	d7, d6, d7
 1009a84:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 1009ab0 <__aeabi_d2ulz+0x38>
 1009a88:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 1009a8c:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 1009a90:	ee17 1a10 	vmov	r1, s14
 1009a94:	ee04 6b45 	vmls.f64	d6, d4, d5
 1009a98:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 1009a9c:	ee17 0a90 	vmov	r0, s15
 1009aa0:	4770      	bx	lr
 1009aa2:	bf00      	nop
 1009aa4:	f3af 8000 	nop.w
 1009aa8:	00000000 	.word	0x00000000
 1009aac:	3df00000 	.word	0x3df00000
 1009ab0:	00000000 	.word	0x00000000
 1009ab4:	41f00000 	.word	0x41f00000

01009ab8 <__udivmoddi4>:
 1009ab8:	4299      	cmp	r1, r3
 1009aba:	bf08      	it	eq
 1009abc:	4290      	cmpeq	r0, r2
 1009abe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1009ac2:	4604      	mov	r4, r0
 1009ac4:	bf38      	it	cc
 1009ac6:	2000      	movcc	r0, #0
 1009ac8:	460d      	mov	r5, r1
 1009aca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 1009acc:	bf38      	it	cc
 1009ace:	4601      	movcc	r1, r0
 1009ad0:	d36c      	bcc.n	1009bac <__udivmoddi4+0xf4>
 1009ad2:	4690      	mov	r8, r2
 1009ad4:	4699      	mov	r9, r3
 1009ad6:	fab3 f683 	clz	r6, r3
 1009ada:	2b00      	cmp	r3, #0
 1009adc:	d06f      	beq.n	1009bbe <__udivmoddi4+0x106>
 1009ade:	fab5 f185 	clz	r1, r5
 1009ae2:	2d00      	cmp	r5, #0
 1009ae4:	d067      	beq.n	1009bb6 <__udivmoddi4+0xfe>
 1009ae6:	1a76      	subs	r6, r6, r1
 1009ae8:	f1a6 0c20 	sub.w	ip, r6, #32
 1009aec:	fa09 fb06 	lsl.w	fp, r9, r6
 1009af0:	fa08 f30c 	lsl.w	r3, r8, ip
 1009af4:	f1c6 0e20 	rsb	lr, r6, #32
 1009af8:	ea4b 0b03 	orr.w	fp, fp, r3
 1009afc:	fa28 f30e 	lsr.w	r3, r8, lr
 1009b00:	ea4b 0b03 	orr.w	fp, fp, r3
 1009b04:	fa08 fa06 	lsl.w	sl, r8, r6
 1009b08:	455d      	cmp	r5, fp
 1009b0a:	bf08      	it	eq
 1009b0c:	4554      	cmpeq	r4, sl
 1009b0e:	bf3c      	itt	cc
 1009b10:	2000      	movcc	r0, #0
 1009b12:	4601      	movcc	r1, r0
 1009b14:	d30a      	bcc.n	1009b2c <__udivmoddi4+0x74>
 1009b16:	2001      	movs	r0, #1
 1009b18:	ebb4 040a 	subs.w	r4, r4, sl
 1009b1c:	fa00 f10c 	lsl.w	r1, r0, ip
 1009b20:	fa20 f30e 	lsr.w	r3, r0, lr
 1009b24:	eb65 050b 	sbc.w	r5, r5, fp
 1009b28:	4319      	orrs	r1, r3
 1009b2a:	40b0      	lsls	r0, r6
 1009b2c:	2e00      	cmp	r6, #0
 1009b2e:	d03d      	beq.n	1009bac <__udivmoddi4+0xf4>
 1009b30:	ea4f 085a 	mov.w	r8, sl, lsr #1
 1009b34:	4632      	mov	r2, r6
 1009b36:	ea48 78cb 	orr.w	r8, r8, fp, lsl #31
 1009b3a:	ea4f 095b 	mov.w	r9, fp, lsr #1
 1009b3e:	e00b      	b.n	1009b58 <__udivmoddi4+0xa0>
 1009b40:	ebb4 0308 	subs.w	r3, r4, r8
 1009b44:	eb65 0a09 	sbc.w	sl, r5, r9
 1009b48:	18db      	adds	r3, r3, r3
 1009b4a:	eb4a 0a0a 	adc.w	sl, sl, sl
 1009b4e:	1c5c      	adds	r4, r3, #1
 1009b50:	f14a 0500 	adc.w	r5, sl, #0
 1009b54:	3a01      	subs	r2, #1
 1009b56:	d007      	beq.n	1009b68 <__udivmoddi4+0xb0>
 1009b58:	454d      	cmp	r5, r9
 1009b5a:	bf08      	it	eq
 1009b5c:	4544      	cmpeq	r4, r8
 1009b5e:	d2ef      	bcs.n	1009b40 <__udivmoddi4+0x88>
 1009b60:	1924      	adds	r4, r4, r4
 1009b62:	416d      	adcs	r5, r5
 1009b64:	3a01      	subs	r2, #1
 1009b66:	d1f7      	bne.n	1009b58 <__udivmoddi4+0xa0>
 1009b68:	fa05 fe0e 	lsl.w	lr, r5, lr
 1009b6c:	fa24 f306 	lsr.w	r3, r4, r6
 1009b70:	fa25 fc0c 	lsr.w	ip, r5, ip
 1009b74:	ea43 030e 	orr.w	r3, r3, lr
 1009b78:	1900      	adds	r0, r0, r4
 1009b7a:	fa25 fe06 	lsr.w	lr, r5, r6
 1009b7e:	ea43 040c 	orr.w	r4, r3, ip
 1009b82:	f1a6 0c20 	sub.w	ip, r6, #32
 1009b86:	f1c6 0220 	rsb	r2, r6, #32
 1009b8a:	fa0e f306 	lsl.w	r3, lr, r6
 1009b8e:	fa04 fc0c 	lsl.w	ip, r4, ip
 1009b92:	fa04 f606 	lsl.w	r6, r4, r6
 1009b96:	ea43 030c 	orr.w	r3, r3, ip
 1009b9a:	fa24 f202 	lsr.w	r2, r4, r2
 1009b9e:	eb45 0101 	adc.w	r1, r5, r1
 1009ba2:	4313      	orrs	r3, r2
 1009ba4:	1b80      	subs	r0, r0, r6
 1009ba6:	4675      	mov	r5, lr
 1009ba8:	eb61 0103 	sbc.w	r1, r1, r3
 1009bac:	b10f      	cbz	r7, 1009bb2 <__udivmoddi4+0xfa>
 1009bae:	e9c7 4500 	strd	r4, r5, [r7]
 1009bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1009bb6:	fab4 f184 	clz	r1, r4
 1009bba:	3120      	adds	r1, #32
 1009bbc:	e793      	b.n	1009ae6 <__udivmoddi4+0x2e>
 1009bbe:	fab2 f682 	clz	r6, r2
 1009bc2:	fab5 f185 	clz	r1, r5
 1009bc6:	3620      	adds	r6, #32
 1009bc8:	2d00      	cmp	r5, #0
 1009bca:	d18c      	bne.n	1009ae6 <__udivmoddi4+0x2e>
 1009bcc:	e7f3      	b.n	1009bb6 <__udivmoddi4+0xfe>
 1009bce:	bf00      	nop

01009bd0 <exit>:
 1009bd0:	b508      	push	{r3, lr}
 1009bd2:	2100      	movs	r1, #0
 1009bd4:	4604      	mov	r4, r0
 1009bd6:	f004 fb05 	bl	100e1e4 <__call_exitprocs>
 1009bda:	f241 5308 	movw	r3, #5384	; 0x1508
 1009bde:	f2c0 1301 	movt	r3, #257	; 0x101
 1009be2:	6818      	ldr	r0, [r3, #0]
 1009be4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 1009be6:	b103      	cbz	r3, 1009bea <exit+0x1a>
 1009be8:	4798      	blx	r3
 1009bea:	4620      	mov	r0, r4
 1009bec:	f007 ec26 	blx	101143c <_exit>

01009bf0 <__libc_fini_array>:
 1009bf0:	b538      	push	{r3, r4, r5, lr}
 1009bf2:	f248 0410 	movw	r4, #32784	; 0x8010
 1009bf6:	f248 050c 	movw	r5, #32780	; 0x800c
 1009bfa:	f2c0 1401 	movt	r4, #257	; 0x101
 1009bfe:	f2c0 1501 	movt	r5, #257	; 0x101
 1009c02:	1b64      	subs	r4, r4, r5
 1009c04:	10a4      	asrs	r4, r4, #2
 1009c06:	d007      	beq.n	1009c18 <__libc_fini_array+0x28>
 1009c08:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 1009c0c:	3c01      	subs	r4, #1
 1009c0e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 1009c12:	4798      	blx	r3
 1009c14:	2c00      	cmp	r4, #0
 1009c16:	d1f9      	bne.n	1009c0c <__libc_fini_array+0x1c>
 1009c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1009c1c:	f007 bc62 	b.w	10114e4 <_fini>

01009c20 <__libc_init_array>:
 1009c20:	b570      	push	{r4, r5, r6, lr}
 1009c22:	f248 0608 	movw	r6, #32776	; 0x8008
 1009c26:	f248 0508 	movw	r5, #32776	; 0x8008
 1009c2a:	f2c0 1601 	movt	r6, #257	; 0x101
 1009c2e:	f2c0 1501 	movt	r5, #257	; 0x101
 1009c32:	1b76      	subs	r6, r6, r5
 1009c34:	10b6      	asrs	r6, r6, #2
 1009c36:	d006      	beq.n	1009c46 <__libc_init_array+0x26>
 1009c38:	2400      	movs	r4, #0
 1009c3a:	3401      	adds	r4, #1
 1009c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 1009c40:	4798      	blx	r3
 1009c42:	42a6      	cmp	r6, r4
 1009c44:	d1f9      	bne.n	1009c3a <__libc_init_array+0x1a>
 1009c46:	f248 060c 	movw	r6, #32780	; 0x800c
 1009c4a:	f248 0508 	movw	r5, #32776	; 0x8008
 1009c4e:	f2c0 1601 	movt	r6, #257	; 0x101
 1009c52:	f2c0 1501 	movt	r5, #257	; 0x101
 1009c56:	1b76      	subs	r6, r6, r5
 1009c58:	f007 fc3e 	bl	10114d8 <_init>
 1009c5c:	10b6      	asrs	r6, r6, #2
 1009c5e:	d006      	beq.n	1009c6e <__libc_init_array+0x4e>
 1009c60:	2400      	movs	r4, #0
 1009c62:	3401      	adds	r4, #1
 1009c64:	f855 3b04 	ldr.w	r3, [r5], #4
 1009c68:	4798      	blx	r3
 1009c6a:	42a6      	cmp	r6, r4
 1009c6c:	d1f9      	bne.n	1009c62 <__libc_init_array+0x42>
 1009c6e:	bd70      	pop	{r4, r5, r6, pc}

01009c70 <currentlocale>:
 1009c70:	4919      	ldr	r1, [pc, #100]	; (1009cd8 <currentlocale+0x68>)
 1009c72:	f248 0038 	movw	r0, #32824	; 0x8038
 1009c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1009c78:	f2c0 1001 	movt	r0, #257	; 0x101
 1009c7c:	f101 0520 	add.w	r5, r1, #32
 1009c80:	f002 f8ac 	bl	100bddc <strcpy>
 1009c84:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 1009c88:	f1a5 0720 	sub.w	r7, r5, #32
 1009c8c:	462c      	mov	r4, r5
 1009c8e:	4621      	mov	r1, r4
 1009c90:	4638      	mov	r0, r7
 1009c92:	f001 ff39 	bl	100bb08 <strcmp>
 1009c96:	3420      	adds	r4, #32
 1009c98:	b930      	cbnz	r0, 1009ca8 <currentlocale+0x38>
 1009c9a:	42b4      	cmp	r4, r6
 1009c9c:	d1f7      	bne.n	1009c8e <currentlocale+0x1e>
 1009c9e:	f248 0038 	movw	r0, #32824	; 0x8038
 1009ca2:	f2c0 1001 	movt	r0, #257	; 0x101
 1009ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1009ca8:	f642 67c8 	movw	r7, #11976	; 0x2ec8
 1009cac:	f248 0438 	movw	r4, #32824	; 0x8038
 1009cb0:	f2c0 1701 	movt	r7, #257	; 0x101
 1009cb4:	f2c0 1401 	movt	r4, #257	; 0x101
 1009cb8:	4639      	mov	r1, r7
 1009cba:	4620      	mov	r0, r4
 1009cbc:	f001 fe84 	bl	100b9c8 <strcat>
 1009cc0:	4629      	mov	r1, r5
 1009cc2:	4620      	mov	r0, r4
 1009cc4:	3520      	adds	r5, #32
 1009cc6:	f001 fe7f 	bl	100b9c8 <strcat>
 1009cca:	42b5      	cmp	r5, r6
 1009ccc:	d1f4      	bne.n	1009cb8 <currentlocale+0x48>
 1009cce:	f248 0038 	movw	r0, #32824	; 0x8038
 1009cd2:	f2c0 1001 	movt	r0, #257	; 0x101
 1009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1009cd8:	01013850 	.word	0x01013850

01009cdc <__loadlocale>:
 1009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1009ce0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 1009ce4:	b08d      	sub	sp, #52	; 0x34
 1009ce6:	460f      	mov	r7, r1
 1009ce8:	4606      	mov	r6, r0
 1009cea:	4629      	mov	r1, r5
 1009cec:	4610      	mov	r0, r2
 1009cee:	4614      	mov	r4, r2
 1009cf0:	f001 ff0a 	bl	100bb08 <strcmp>
 1009cf4:	b918      	cbnz	r0, 1009cfe <__loadlocale+0x22>
 1009cf6:	4628      	mov	r0, r5
 1009cf8:	b00d      	add	sp, #52	; 0x34
 1009cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1009cfe:	f642 61cc 	movw	r1, #11980	; 0x2ecc
 1009d02:	4620      	mov	r0, r4
 1009d04:	f2c0 1101 	movt	r1, #257	; 0x101
 1009d08:	f001 fefe 	bl	100bb08 <strcmp>
 1009d0c:	2800      	cmp	r0, #0
 1009d0e:	f000 809f 	beq.w	1009e50 <__loadlocale+0x174>
 1009d12:	f642 61d4 	movw	r1, #11988	; 0x2ed4
 1009d16:	4620      	mov	r0, r4
 1009d18:	f2c0 1101 	movt	r1, #257	; 0x101
 1009d1c:	f001 fef4 	bl	100bb08 <strcmp>
 1009d20:	4680      	mov	r8, r0
 1009d22:	2800      	cmp	r0, #0
 1009d24:	f000 808a 	beq.w	1009e3c <__loadlocale+0x160>
 1009d28:	7823      	ldrb	r3, [r4, #0]
 1009d2a:	2b43      	cmp	r3, #67	; 0x43
 1009d2c:	f000 8098 	beq.w	1009e60 <__loadlocale+0x184>
 1009d30:	3b61      	subs	r3, #97	; 0x61
 1009d32:	2b19      	cmp	r3, #25
 1009d34:	d87d      	bhi.n	1009e32 <__loadlocale+0x156>
 1009d36:	7863      	ldrb	r3, [r4, #1]
 1009d38:	3b61      	subs	r3, #97	; 0x61
 1009d3a:	2b19      	cmp	r3, #25
 1009d3c:	d879      	bhi.n	1009e32 <__loadlocale+0x156>
 1009d3e:	78a3      	ldrb	r3, [r4, #2]
 1009d40:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 1009d44:	2a19      	cmp	r2, #25
 1009d46:	bf8e      	itee	hi
 1009d48:	f104 0802 	addhi.w	r8, r4, #2
 1009d4c:	f104 0803 	addls.w	r8, r4, #3
 1009d50:	78e3      	ldrbls	r3, [r4, #3]
 1009d52:	2b5f      	cmp	r3, #95	; 0x5f
 1009d54:	f000 80a0 	beq.w	1009e98 <__loadlocale+0x1bc>
 1009d58:	2b2e      	cmp	r3, #46	; 0x2e
 1009d5a:	f000 827c 	beq.w	100a256 <__loadlocale+0x57a>
 1009d5e:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 1009d62:	d166      	bne.n	1009e32 <__loadlocale+0x156>
 1009d64:	f10d 0910 	add.w	r9, sp, #16
 1009d68:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 1009d6c:	f2c0 1101 	movt	r1, #257	; 0x101
 1009d70:	4648      	mov	r0, r9
 1009d72:	f002 f833 	bl	100bddc <strcpy>
 1009d76:	f898 3000 	ldrb.w	r3, [r8]
 1009d7a:	2b40      	cmp	r3, #64	; 0x40
 1009d7c:	f000 828a 	beq.w	100a294 <__loadlocale+0x5b8>
 1009d80:	f04f 0800 	mov.w	r8, #0
 1009d84:	f89d 3010 	ldrb.w	r3, [sp, #16]
 1009d88:	3b41      	subs	r3, #65	; 0x41
 1009d8a:	2b34      	cmp	r3, #52	; 0x34
 1009d8c:	d851      	bhi.n	1009e32 <__loadlocale+0x156>
 1009d8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 1009d92:	019c      	.short	0x019c
 1009d94:	016f0050 	.word	0x016f0050
 1009d98:	01d10050 	.word	0x01d10050
 1009d9c:	01ae0050 	.word	0x01ae0050
 1009da0:	01fd0050 	.word	0x01fd0050
 1009da4:	01330154 	.word	0x01330154
 1009da8:	00500050 	.word	0x00500050
 1009dac:	00500050 	.word	0x00500050
 1009db0:	00500121 	.word	0x00500121
 1009db4:	01060050 	.word	0x01060050
 1009db8:	009200c6 	.word	0x009200c6
 1009dbc:	00500050 	.word	0x00500050
 1009dc0:	00500050 	.word	0x00500050
 1009dc4:	00500050 	.word	0x00500050
 1009dc8:	00500050 	.word	0x00500050
 1009dcc:	00500050 	.word	0x00500050
 1009dd0:	019c0050 	.word	0x019c0050
 1009dd4:	016f0050 	.word	0x016f0050
 1009dd8:	01d10050 	.word	0x01d10050
 1009ddc:	01ae0050 	.word	0x01ae0050
 1009de0:	01fd0050 	.word	0x01fd0050
 1009de4:	01330154 	.word	0x01330154
 1009de8:	00500050 	.word	0x00500050
 1009dec:	00500050 	.word	0x00500050
 1009df0:	00500121 	.word	0x00500121
 1009df4:	01060050 	.word	0x01060050
 1009df8:	009200c6 	.word	0x009200c6
 1009dfc:	f5b0 7f56 	cmp.w	r0, #856	; 0x358
 1009e00:	f300 80af 	bgt.w	1009f62 <__loadlocale+0x286>
 1009e04:	f240 3307 	movw	r3, #775	; 0x307
 1009e08:	4298      	cmp	r0, r3
 1009e0a:	f000 80aa 	beq.w	1009f62 <__loadlocale+0x286>
 1009e0e:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
 1009e12:	f280 826a 	bge.w	100a2ea <__loadlocale+0x60e>
 1009e16:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 1009e1a:	f000 80a2 	beq.w	1009f62 <__loadlocale+0x286>
 1009e1e:	f240 23e1 	movw	r3, #737	; 0x2e1
 1009e22:	4298      	cmp	r0, r3
 1009e24:	f000 809d 	beq.w	1009f62 <__loadlocale+0x286>
 1009e28:	f240 13b5 	movw	r3, #437	; 0x1b5
 1009e2c:	4298      	cmp	r0, r3
 1009e2e:	f000 8098 	beq.w	1009f62 <__loadlocale+0x286>
 1009e32:	2500      	movs	r5, #0
 1009e34:	4628      	mov	r0, r5
 1009e36:	b00d      	add	sp, #52	; 0x34
 1009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1009e3c:	f10d 0910 	add.w	r9, sp, #16
 1009e40:	f642 61d8 	movw	r1, #11992	; 0x2ed8
 1009e44:	f2c0 1101 	movt	r1, #257	; 0x101
 1009e48:	4648      	mov	r0, r9
 1009e4a:	f001 ffc7 	bl	100bddc <strcpy>
 1009e4e:	e799      	b.n	1009d84 <__loadlocale+0xa8>
 1009e50:	f642 61d4 	movw	r1, #11988	; 0x2ed4
 1009e54:	4620      	mov	r0, r4
 1009e56:	f2c0 1101 	movt	r1, #257	; 0x101
 1009e5a:	f001 ffbf 	bl	100bddc <strcpy>
 1009e5e:	e758      	b.n	1009d12 <__loadlocale+0x36>
 1009e60:	7863      	ldrb	r3, [r4, #1]
 1009e62:	3b2d      	subs	r3, #45	; 0x2d
 1009e64:	2b01      	cmp	r3, #1
 1009e66:	d8e4      	bhi.n	1009e32 <__loadlocale+0x156>
 1009e68:	f104 0802 	add.w	r8, r4, #2
 1009e6c:	f10d 0910 	add.w	r9, sp, #16
 1009e70:	4641      	mov	r1, r8
 1009e72:	4648      	mov	r0, r9
 1009e74:	f001 ffb2 	bl	100bddc <strcpy>
 1009e78:	4648      	mov	r0, r9
 1009e7a:	2140      	movs	r1, #64	; 0x40
 1009e7c:	f001 fdc4 	bl	100ba08 <strchr>
 1009e80:	b108      	cbz	r0, 1009e86 <__loadlocale+0x1aa>
 1009e82:	2300      	movs	r3, #0
 1009e84:	7003      	strb	r3, [r0, #0]
 1009e86:	4648      	mov	r0, r9
 1009e88:	f002 f83a 	bl	100bf00 <strlen>
 1009e8c:	4480      	add	r8, r0
 1009e8e:	f1b8 0f00 	cmp.w	r8, #0
 1009e92:	f43f af75 	beq.w	1009d80 <__loadlocale+0xa4>
 1009e96:	e76e      	b.n	1009d76 <__loadlocale+0x9a>
 1009e98:	f898 3001 	ldrb.w	r3, [r8, #1]
 1009e9c:	3b41      	subs	r3, #65	; 0x41
 1009e9e:	2b19      	cmp	r3, #25
 1009ea0:	d8c7      	bhi.n	1009e32 <__loadlocale+0x156>
 1009ea2:	f898 3002 	ldrb.w	r3, [r8, #2]
 1009ea6:	3b41      	subs	r3, #65	; 0x41
 1009ea8:	2b19      	cmp	r3, #25
 1009eaa:	d8c2      	bhi.n	1009e32 <__loadlocale+0x156>
 1009eac:	f898 3003 	ldrb.w	r3, [r8, #3]
 1009eb0:	f108 0803 	add.w	r8, r8, #3
 1009eb4:	e750      	b.n	1009d58 <__loadlocale+0x7c>
 1009eb6:	f642 61f8 	movw	r1, #12024	; 0x2ef8
 1009eba:	4648      	mov	r0, r9
 1009ebc:	f2c0 1101 	movt	r1, #257	; 0x101
 1009ec0:	f001 fd60 	bl	100b984 <strcasecmp>
 1009ec4:	b140      	cbz	r0, 1009ed8 <__loadlocale+0x1fc>
 1009ec6:	f642 7100 	movw	r1, #12032	; 0x2f00
 1009eca:	4648      	mov	r0, r9
 1009ecc:	f2c0 1101 	movt	r1, #257	; 0x101
 1009ed0:	f001 fd58 	bl	100b984 <strcasecmp>
 1009ed4:	2800      	cmp	r0, #0
 1009ed6:	d1ac      	bne.n	1009e32 <__loadlocale+0x156>
 1009ed8:	f642 61f8 	movw	r1, #12024	; 0x2ef8
 1009edc:	4648      	mov	r0, r9
 1009ede:	f2c0 1101 	movt	r1, #257	; 0x101
 1009ee2:	f64a 5a29 	movw	sl, #44329	; 0xad29
 1009ee6:	f64d 7bf9 	movw	fp, #57337	; 0xdff9
 1009eea:	f2c0 1a00 	movt	sl, #256	; 0x100
 1009eee:	f2c0 1b00 	movt	fp, #256	; 0x100
 1009ef2:	f001 ff73 	bl	100bddc <strcpy>
 1009ef6:	2306      	movs	r3, #6
 1009ef8:	2f02      	cmp	r7, #2
 1009efa:	f000 81af 	beq.w	100a25c <__loadlocale+0x580>
 1009efe:	2f06      	cmp	r7, #6
 1009f00:	d104      	bne.n	1009f0c <__loadlocale+0x230>
 1009f02:	4649      	mov	r1, r9
 1009f04:	f506 70a5 	add.w	r0, r6, #330	; 0x14a
 1009f08:	f001 ff68 	bl	100bddc <strcpy>
 1009f0c:	4621      	mov	r1, r4
 1009f0e:	4628      	mov	r0, r5
 1009f10:	f001 ff64 	bl	100bddc <strcpy>
 1009f14:	4605      	mov	r5, r0
 1009f16:	4628      	mov	r0, r5
 1009f18:	b00d      	add	sp, #52	; 0x34
 1009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1009f1e:	f642 7180 	movw	r1, #12160	; 0x2f80
 1009f22:	2203      	movs	r2, #3
 1009f24:	f2c0 1101 	movt	r1, #257	; 0x101
 1009f28:	4648      	mov	r0, r9
 1009f2a:	f002 f857 	bl	100bfdc <strncasecmp>
 1009f2e:	2800      	cmp	r0, #0
 1009f30:	f47f af7f 	bne.w	1009e32 <__loadlocale+0x156>
 1009f34:	f89d 3013 	ldrb.w	r3, [sp, #19]
 1009f38:	f642 7184 	movw	r1, #12164	; 0x2f84
 1009f3c:	f2c0 1101 	movt	r1, #257	; 0x101
 1009f40:	2b2d      	cmp	r3, #45	; 0x2d
 1009f42:	bf0c      	ite	eq
 1009f44:	a805      	addeq	r0, sp, #20
 1009f46:	f10d 0013 	addne.w	r0, sp, #19
 1009f4a:	f001 fd1b 	bl	100b984 <strcasecmp>
 1009f4e:	2800      	cmp	r0, #0
 1009f50:	f47f af6f 	bne.w	1009e32 <__loadlocale+0x156>
 1009f54:	f642 7188 	movw	r1, #12168	; 0x2f88
 1009f58:	4648      	mov	r0, r9
 1009f5a:	f2c0 1101 	movt	r1, #257	; 0x101
 1009f5e:	f001 ff3d 	bl	100bddc <strcpy>
 1009f62:	2f02      	cmp	r7, #2
 1009f64:	d1cb      	bne.n	1009efe <__loadlocale+0x222>
 1009f66:	4649      	mov	r1, r9
 1009f68:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 1009f6c:	f001 ff36 	bl	100bddc <strcpy>
 1009f70:	4630      	mov	r0, r6
 1009f72:	4649      	mov	r1, r9
 1009f74:	f64d 72e1 	movw	r2, #57313	; 0xdfe1
 1009f78:	f64a 5305 	movw	r3, #44293	; 0xad05
 1009f7c:	f2c0 1200 	movt	r2, #256	; 0x100
 1009f80:	f2c0 1300 	movt	r3, #256	; 0x100
 1009f84:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 1009f88:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 1009f8c:	2201      	movs	r2, #1
 1009f8e:	f886 2128 	strb.w	r2, [r6, #296]	; 0x128
 1009f92:	f004 f995 	bl	100e2c0 <__set_ctype>
 1009f96:	2000      	movs	r0, #0
 1009f98:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
 1009f9c:	e7b6      	b.n	1009f0c <__loadlocale+0x230>
 1009f9e:	f642 711c 	movw	r1, #12060	; 0x2f1c
 1009fa2:	4648      	mov	r0, r9
 1009fa4:	f2c0 1101 	movt	r1, #257	; 0x101
 1009fa8:	f001 fcec 	bl	100b984 <strcasecmp>
 1009fac:	2800      	cmp	r0, #0
 1009fae:	f47f af40 	bne.w	1009e32 <__loadlocale+0x156>
 1009fb2:	f642 711c 	movw	r1, #12060	; 0x2f1c
 1009fb6:	4648      	mov	r0, r9
 1009fb8:	f2c0 1101 	movt	r1, #257	; 0x101
 1009fbc:	f64a 7a31 	movw	sl, #44849	; 0xaf31
 1009fc0:	f001 ff0c 	bl	100bddc <strcpy>
 1009fc4:	f24e 0b9d 	movw	fp, #57501	; 0xe09d
 1009fc8:	f2c0 1a00 	movt	sl, #256	; 0x100
 1009fcc:	2302      	movs	r3, #2
 1009fce:	f2c0 1b00 	movt	fp, #256	; 0x100
 1009fd2:	e791      	b.n	1009ef8 <__loadlocale+0x21c>
 1009fd4:	f642 7170 	movw	r1, #12144	; 0x2f70
 1009fd8:	4648      	mov	r0, r9
 1009fda:	f2c0 1101 	movt	r1, #257	; 0x101
 1009fde:	f001 fcd1 	bl	100b984 <strcasecmp>
 1009fe2:	2800      	cmp	r0, #0
 1009fe4:	f47f af25 	bne.w	1009e32 <__loadlocale+0x156>
 1009fe8:	f642 7178 	movw	r1, #12152	; 0x2f78
 1009fec:	4648      	mov	r0, r9
 1009fee:	f2c0 1101 	movt	r1, #257	; 0x101
 1009ff2:	f001 fef3 	bl	100bddc <strcpy>
 1009ff6:	e7b4      	b.n	1009f62 <__loadlocale+0x286>
 1009ff8:	f642 7140 	movw	r1, #12096	; 0x2f40
 1009ffc:	2204      	movs	r2, #4
 1009ffe:	f2c0 1101 	movt	r1, #257	; 0x101
 100a002:	4648      	mov	r0, r9
 100a004:	f001 ffea 	bl	100bfdc <strncasecmp>
 100a008:	2800      	cmp	r0, #0
 100a00a:	f47f af12 	bne.w	1009e32 <__loadlocale+0x156>
 100a00e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 100a012:	2b2d      	cmp	r3, #45	; 0x2d
 100a014:	bf08      	it	eq
 100a016:	f89d 3015 	ldrbeq.w	r3, [sp, #21]
 100a01a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100a01e:	2b52      	cmp	r3, #82	; 0x52
 100a020:	f000 8172 	beq.w	100a308 <__loadlocale+0x62c>
 100a024:	2b55      	cmp	r3, #85	; 0x55
 100a026:	f47f af04 	bne.w	1009e32 <__loadlocale+0x156>
 100a02a:	f642 7150 	movw	r1, #12112	; 0x2f50
 100a02e:	4648      	mov	r0, r9
 100a030:	f2c0 1101 	movt	r1, #257	; 0x101
 100a034:	f001 fed2 	bl	100bddc <strcpy>
 100a038:	e793      	b.n	1009f62 <__loadlocale+0x286>
 100a03a:	f642 7108 	movw	r1, #12040	; 0x2f08
 100a03e:	4648      	mov	r0, r9
 100a040:	f2c0 1101 	movt	r1, #257	; 0x101
 100a044:	f001 fc9e 	bl	100b984 <strcasecmp>
 100a048:	2800      	cmp	r0, #0
 100a04a:	f47f aef2 	bne.w	1009e32 <__loadlocale+0x156>
 100a04e:	f642 7108 	movw	r1, #12040	; 0x2f08
 100a052:	4648      	mov	r0, r9
 100a054:	f2c0 1101 	movt	r1, #257	; 0x101
 100a058:	f24b 0a6d 	movw	sl, #45165	; 0xb06d
 100a05c:	f001 febe 	bl	100bddc <strcpy>
 100a060:	f24e 1b61 	movw	fp, #57697	; 0xe161
 100a064:	f2c0 1a00 	movt	sl, #256	; 0x100
 100a068:	2308      	movs	r3, #8
 100a06a:	f2c0 1b00 	movt	fp, #256	; 0x100
 100a06e:	e743      	b.n	1009ef8 <__loadlocale+0x21c>
 100a070:	f89d 3011 	ldrb.w	r3, [sp, #17]
 100a074:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100a078:	2b50      	cmp	r3, #80	; 0x50
 100a07a:	f47f aeda 	bne.w	1009e32 <__loadlocale+0x156>
 100a07e:	2202      	movs	r2, #2
 100a080:	f642 713c 	movw	r1, #12092	; 0x2f3c
 100a084:	4648      	mov	r0, r9
 100a086:	f2c0 1101 	movt	r1, #257	; 0x101
 100a08a:	f002 f827 	bl	100c0dc <strncpy>
 100a08e:	220a      	movs	r2, #10
 100a090:	a903      	add	r1, sp, #12
 100a092:	f10d 0012 	add.w	r0, sp, #18
 100a096:	f002 f915 	bl	100c2c4 <strtol>
 100a09a:	9b03      	ldr	r3, [sp, #12]
 100a09c:	781b      	ldrb	r3, [r3, #0]
 100a09e:	2b00      	cmp	r3, #0
 100a0a0:	f47f aec7 	bne.w	1009e32 <__loadlocale+0x156>
 100a0a4:	f240 335a 	movw	r3, #858	; 0x35a
 100a0a8:	4298      	cmp	r0, r3
 100a0aa:	f77f aea7 	ble.w	1009dfc <__loadlocale+0x120>
 100a0ae:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
 100a0b2:	f040 80fc 	bne.w	100a2ae <__loadlocale+0x5d2>
 100a0b6:	f64a 7a31 	movw	sl, #44849	; 0xaf31
 100a0ba:	f24e 0b9d 	movw	fp, #57501	; 0xe09d
 100a0be:	f2c0 1a00 	movt	sl, #256	; 0x100
 100a0c2:	f2c0 1b00 	movt	fp, #256	; 0x100
 100a0c6:	2302      	movs	r3, #2
 100a0c8:	e716      	b.n	1009ef8 <__loadlocale+0x21c>
 100a0ca:	f642 61d8 	movw	r1, #11992	; 0x2ed8
 100a0ce:	4648      	mov	r0, r9
 100a0d0:	f2c0 1101 	movt	r1, #257	; 0x101
 100a0d4:	f001 fc56 	bl	100b984 <strcasecmp>
 100a0d8:	2800      	cmp	r0, #0
 100a0da:	f47f aeaa 	bne.w	1009e32 <__loadlocale+0x156>
 100a0de:	f642 61d8 	movw	r1, #11992	; 0x2ed8
 100a0e2:	4648      	mov	r0, r9
 100a0e4:	f2c0 1101 	movt	r1, #257	; 0x101
 100a0e8:	f001 fe78 	bl	100bddc <strcpy>
 100a0ec:	e739      	b.n	1009f62 <__loadlocale+0x286>
 100a0ee:	f642 7158 	movw	r1, #12120	; 0x2f58
 100a0f2:	2208      	movs	r2, #8
 100a0f4:	f2c0 1101 	movt	r1, #257	; 0x101
 100a0f8:	4648      	mov	r0, r9
 100a0fa:	f001 ff6f 	bl	100bfdc <strncasecmp>
 100a0fe:	2800      	cmp	r0, #0
 100a100:	f47f ae97 	bne.w	1009e32 <__loadlocale+0x156>
 100a104:	f89d 3018 	ldrb.w	r3, [sp, #24]
 100a108:	f642 7164 	movw	r1, #12132	; 0x2f64
 100a10c:	f2c0 1101 	movt	r1, #257	; 0x101
 100a110:	2b2d      	cmp	r3, #45	; 0x2d
 100a112:	bf0c      	ite	eq
 100a114:	f10d 0019 	addeq.w	r0, sp, #25
 100a118:	a806      	addne	r0, sp, #24
 100a11a:	f001 fc33 	bl	100b984 <strcasecmp>
 100a11e:	2800      	cmp	r0, #0
 100a120:	f47f ae87 	bne.w	1009e32 <__loadlocale+0x156>
 100a124:	f642 7168 	movw	r1, #12136	; 0x2f68
 100a128:	4648      	mov	r0, r9
 100a12a:	f2c0 1101 	movt	r1, #257	; 0x101
 100a12e:	f001 fe55 	bl	100bddc <strcpy>
 100a132:	e716      	b.n	1009f62 <__loadlocale+0x286>
 100a134:	f642 710c 	movw	r1, #12044	; 0x2f0c
 100a138:	2203      	movs	r2, #3
 100a13a:	f2c0 1101 	movt	r1, #257	; 0x101
 100a13e:	4648      	mov	r0, r9
 100a140:	f001 ff4c 	bl	100bfdc <strncasecmp>
 100a144:	2800      	cmp	r0, #0
 100a146:	f47f ae74 	bne.w	1009e32 <__loadlocale+0x156>
 100a14a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100a14e:	f642 7110 	movw	r1, #12048	; 0x2f10
 100a152:	f2c0 1101 	movt	r1, #257	; 0x101
 100a156:	2b2d      	cmp	r3, #45	; 0x2d
 100a158:	bf0c      	ite	eq
 100a15a:	a805      	addeq	r0, sp, #20
 100a15c:	f10d 0013 	addne.w	r0, sp, #19
 100a160:	f001 fc10 	bl	100b984 <strcasecmp>
 100a164:	2800      	cmp	r0, #0
 100a166:	f47f ae64 	bne.w	1009e32 <__loadlocale+0x156>
 100a16a:	f642 7114 	movw	r1, #12052	; 0x2f14
 100a16e:	4648      	mov	r0, r9
 100a170:	f2c0 1101 	movt	r1, #257	; 0x101
 100a174:	f64a 7ab5 	movw	sl, #44981	; 0xafb5
 100a178:	f001 fe30 	bl	100bddc <strcpy>
 100a17c:	f24e 0bf1 	movw	fp, #57585	; 0xe0f1
 100a180:	f2c0 1a00 	movt	sl, #256	; 0x100
 100a184:	2303      	movs	r3, #3
 100a186:	f2c0 1b00 	movt	fp, #256	; 0x100
 100a18a:	e6b5      	b.n	1009ef8 <__loadlocale+0x21c>
 100a18c:	f642 7124 	movw	r1, #12068	; 0x2f24
 100a190:	2203      	movs	r2, #3
 100a192:	f2c0 1101 	movt	r1, #257	; 0x101
 100a196:	4648      	mov	r0, r9
 100a198:	f001 ff20 	bl	100bfdc <strncasecmp>
 100a19c:	2800      	cmp	r0, #0
 100a19e:	f47f ae48 	bne.w	1009e32 <__loadlocale+0x156>
 100a1a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100a1a6:	f642 7128 	movw	r1, #12072	; 0x2f28
 100a1aa:	2204      	movs	r2, #4
 100a1ac:	f2c0 1101 	movt	r1, #257	; 0x101
 100a1b0:	2b2d      	cmp	r3, #45	; 0x2d
 100a1b2:	bf0c      	ite	eq
 100a1b4:	f10d 0814 	addeq.w	r8, sp, #20
 100a1b8:	f10d 0813 	addne.w	r8, sp, #19
 100a1bc:	4640      	mov	r0, r8
 100a1be:	f001 ff0d 	bl	100bfdc <strncasecmp>
 100a1c2:	2800      	cmp	r0, #0
 100a1c4:	f47f ae35 	bne.w	1009e32 <__loadlocale+0x156>
 100a1c8:	f898 3004 	ldrb.w	r3, [r8, #4]
 100a1cc:	220a      	movs	r2, #10
 100a1ce:	a903      	add	r1, sp, #12
 100a1d0:	2b2d      	cmp	r3, #45	; 0x2d
 100a1d2:	bf14      	ite	ne
 100a1d4:	f108 0004 	addne.w	r0, r8, #4
 100a1d8:	f108 0005 	addeq.w	r0, r8, #5
 100a1dc:	f002 f872 	bl	100c2c4 <strtol>
 100a1e0:	f1a0 030c 	sub.w	r3, r0, #12
 100a1e4:	1e42      	subs	r2, r0, #1
 100a1e6:	fab3 f383 	clz	r3, r3
 100a1ea:	4680      	mov	r8, r0
 100a1ec:	095b      	lsrs	r3, r3, #5
 100a1ee:	2a0f      	cmp	r2, #15
 100a1f0:	bf88      	it	hi
 100a1f2:	f043 0301 	orrhi.w	r3, r3, #1
 100a1f6:	2b00      	cmp	r3, #0
 100a1f8:	f47f ae1b 	bne.w	1009e32 <__loadlocale+0x156>
 100a1fc:	9b03      	ldr	r3, [sp, #12]
 100a1fe:	781b      	ldrb	r3, [r3, #0]
 100a200:	2b00      	cmp	r3, #0
 100a202:	f47f ae16 	bne.w	1009e32 <__loadlocale+0x156>
 100a206:	f642 7130 	movw	r1, #12080	; 0x2f30
 100a20a:	4648      	mov	r0, r9
 100a20c:	f2c0 1101 	movt	r1, #257	; 0x101
 100a210:	f001 fde4 	bl	100bddc <strcpy>
 100a214:	f246 6267 	movw	r2, #26215	; 0x6667
 100a218:	f2c6 6266 	movt	r2, #26214	; 0x6666
 100a21c:	f1b8 0f0a 	cmp.w	r8, #10
 100a220:	f04f 000a 	mov.w	r0, #10
 100a224:	bfc8      	it	gt
 100a226:	f10d 011a 	addgt.w	r1, sp, #26
 100a22a:	fb82 c208 	smull	ip, r2, r2, r8
 100a22e:	bfcc      	ite	gt
 100a230:	2331      	movgt	r3, #49	; 0x31
 100a232:	f10d 0119 	addle.w	r1, sp, #25
 100a236:	f04f 0c00 	mov.w	ip, #0
 100a23a:	bfc8      	it	gt
 100a23c:	f88d 3019 	strbgt.w	r3, [sp, #25]
 100a240:	ea4f 73e8 	mov.w	r3, r8, asr #31
 100a244:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 100a248:	f881 c001 	strb.w	ip, [r1, #1]
 100a24c:	fb00 8313 	mls	r3, r0, r3, r8
 100a250:	3330      	adds	r3, #48	; 0x30
 100a252:	700b      	strb	r3, [r1, #0]
 100a254:	e685      	b.n	1009f62 <__loadlocale+0x286>
 100a256:	f108 0801 	add.w	r8, r8, #1
 100a25a:	e607      	b.n	1009e6c <__loadlocale+0x190>
 100a25c:	4649      	mov	r1, r9
 100a25e:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 100a262:	9301      	str	r3, [sp, #4]
 100a264:	f001 fdba 	bl	100bddc <strcpy>
 100a268:	9b01      	ldr	r3, [sp, #4]
 100a26a:	4649      	mov	r1, r9
 100a26c:	f8c6 b0e0 	str.w	fp, [r6, #224]	; 0xe0
 100a270:	4630      	mov	r0, r6
 100a272:	f8c6 a0e4 	str.w	sl, [r6, #228]	; 0xe4
 100a276:	f088 0801 	eor.w	r8, r8, #1
 100a27a:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
 100a27e:	f004 f81f 	bl	100e2c0 <__set_ctype>
 100a282:	f018 0801 	ands.w	r8, r8, #1
 100a286:	d067      	beq.n	100a358 <__loadlocale+0x67c>
 100a288:	f89d 3010 	ldrb.w	r3, [sp, #16]
 100a28c:	2b55      	cmp	r3, #85	; 0x55
 100a28e:	d043      	beq.n	100a318 <__loadlocale+0x63c>
 100a290:	2001      	movs	r0, #1
 100a292:	e681      	b.n	1009f98 <__loadlocale+0x2bc>
 100a294:	f108 0001 	add.w	r0, r8, #1
 100a298:	f642 61ec 	movw	r1, #12012	; 0x2eec
 100a29c:	f2c0 1101 	movt	r1, #257	; 0x101
 100a2a0:	f001 fc32 	bl	100bb08 <strcmp>
 100a2a4:	fab0 f880 	clz	r8, r0
 100a2a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 100a2ac:	e56a      	b.n	1009d84 <__loadlocale+0xa8>
 100a2ae:	dc0f      	bgt.n	100a2d0 <__loadlocale+0x5f4>
 100a2b0:	f240 3362 	movw	r3, #866	; 0x362
 100a2b4:	4298      	cmp	r0, r3
 100a2b6:	f43f ae54 	beq.w	1009f62 <__loadlocale+0x286>
 100a2ba:	f240 336a 	movw	r3, #874	; 0x36a
 100a2be:	4298      	cmp	r0, r3
 100a2c0:	f43f ae4f 	beq.w	1009f62 <__loadlocale+0x286>
 100a2c4:	f240 335e 	movw	r3, #862	; 0x35e
 100a2c8:	4298      	cmp	r0, r3
 100a2ca:	f47f adb2 	bne.w	1009e32 <__loadlocale+0x156>
 100a2ce:	e648      	b.n	1009f62 <__loadlocale+0x286>
 100a2d0:	f240 4365 	movw	r3, #1125	; 0x465
 100a2d4:	4298      	cmp	r0, r3
 100a2d6:	f43f ae44 	beq.w	1009f62 <__loadlocale+0x286>
 100a2da:	f6ff adaa 	blt.w	1009e32 <__loadlocale+0x156>
 100a2de:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
 100a2e2:	2808      	cmp	r0, #8
 100a2e4:	f63f ada5 	bhi.w	1009e32 <__loadlocale+0x156>
 100a2e8:	e63b      	b.n	1009f62 <__loadlocale+0x286>
 100a2ea:	f5b0 7f55 	cmp.w	r0, #852	; 0x354
 100a2ee:	f43f ae38 	beq.w	1009f62 <__loadlocale+0x286>
 100a2f2:	f240 3357 	movw	r3, #855	; 0x357
 100a2f6:	4298      	cmp	r0, r3
 100a2f8:	f43f ae33 	beq.w	1009f62 <__loadlocale+0x286>
 100a2fc:	f240 3352 	movw	r3, #850	; 0x352
 100a300:	4298      	cmp	r0, r3
 100a302:	f47f ad96 	bne.w	1009e32 <__loadlocale+0x156>
 100a306:	e62c      	b.n	1009f62 <__loadlocale+0x286>
 100a308:	f642 7148 	movw	r1, #12104	; 0x2f48
 100a30c:	4648      	mov	r0, r9
 100a30e:	f2c0 1101 	movt	r1, #257	; 0x101
 100a312:	f001 fd63 	bl	100bddc <strcpy>
 100a316:	e624      	b.n	1009f62 <__loadlocale+0x286>
 100a318:	f642 7190 	movw	r1, #12176	; 0x2f90
 100a31c:	463a      	mov	r2, r7
 100a31e:	f2c0 1101 	movt	r1, #257	; 0x101
 100a322:	4620      	mov	r0, r4
 100a324:	f001 fe88 	bl	100c038 <strncmp>
 100a328:	2800      	cmp	r0, #0
 100a32a:	d0b1      	beq.n	100a290 <__loadlocale+0x5b4>
 100a32c:	f642 7194 	movw	r1, #12180	; 0x2f94
 100a330:	463a      	mov	r2, r7
 100a332:	f2c0 1101 	movt	r1, #257	; 0x101
 100a336:	4620      	mov	r0, r4
 100a338:	f001 fe7e 	bl	100c038 <strncmp>
 100a33c:	2800      	cmp	r0, #0
 100a33e:	d0a7      	beq.n	100a290 <__loadlocale+0x5b4>
 100a340:	463a      	mov	r2, r7
 100a342:	f642 7198 	movw	r1, #12184	; 0x2f98
 100a346:	4620      	mov	r0, r4
 100a348:	f2c0 1101 	movt	r1, #257	; 0x101
 100a34c:	f001 fe74 	bl	100c038 <strncmp>
 100a350:	fab0 f080 	clz	r0, r0
 100a354:	0940      	lsrs	r0, r0, #5
 100a356:	e61f      	b.n	1009f98 <__loadlocale+0x2bc>
 100a358:	4640      	mov	r0, r8
 100a35a:	e61d      	b.n	1009f98 <__loadlocale+0x2bc>

0100a35c <__get_locale_env>:
 100a35c:	b538      	push	{r3, r4, r5, lr}
 100a35e:	460d      	mov	r5, r1
 100a360:	f642 719c 	movw	r1, #12188	; 0x2f9c
 100a364:	f2c0 1101 	movt	r1, #257	; 0x101
 100a368:	4604      	mov	r4, r0
 100a36a:	f005 f86d 	bl	100f448 <_getenv_r>
 100a36e:	b108      	cbz	r0, 100a374 <__get_locale_env+0x18>
 100a370:	7803      	ldrb	r3, [r0, #0]
 100a372:	b9a3      	cbnz	r3, 100a39e <__get_locale_env+0x42>
 100a374:	f241 530c 	movw	r3, #5388	; 0x150c
 100a378:	f2c0 1301 	movt	r3, #257	; 0x101
 100a37c:	4620      	mov	r0, r4
 100a37e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 100a382:	f005 f861 	bl	100f448 <_getenv_r>
 100a386:	b108      	cbz	r0, 100a38c <__get_locale_env+0x30>
 100a388:	7803      	ldrb	r3, [r0, #0]
 100a38a:	b943      	cbnz	r3, 100a39e <__get_locale_env+0x42>
 100a38c:	f642 71a4 	movw	r1, #12196	; 0x2fa4
 100a390:	4620      	mov	r0, r4
 100a392:	f2c0 1101 	movt	r1, #257	; 0x101
 100a396:	f005 f857 	bl	100f448 <_getenv_r>
 100a39a:	b908      	cbnz	r0, 100a3a0 <__get_locale_env+0x44>
 100a39c:	4803      	ldr	r0, [pc, #12]	; (100a3ac <__get_locale_env+0x50>)
 100a39e:	bd38      	pop	{r3, r4, r5, pc}
 100a3a0:	7802      	ldrb	r2, [r0, #0]
 100a3a2:	4b02      	ldr	r3, [pc, #8]	; (100a3ac <__get_locale_env+0x50>)
 100a3a4:	2a00      	cmp	r2, #0
 100a3a6:	bf08      	it	eq
 100a3a8:	4618      	moveq	r0, r3
 100a3aa:	bd38      	pop	{r3, r4, r5, pc}
 100a3ac:	0101399c 	.word	0x0101399c

0100a3b0 <_setlocale_r>:
 100a3b0:	2906      	cmp	r1, #6
 100a3b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100a3b6:	4681      	mov	r9, r0
 100a3b8:	b083      	sub	sp, #12
 100a3ba:	d868      	bhi.n	100a48e <_setlocale_r+0xde>
 100a3bc:	468b      	mov	fp, r1
 100a3be:	4692      	mov	sl, r2
 100a3c0:	2a00      	cmp	r2, #0
 100a3c2:	f000 80a3 	beq.w	100a50c <_setlocale_r+0x15c>
 100a3c6:	f8df 8228 	ldr.w	r8, [pc, #552]	; 100a5f0 <_setlocale_r+0x240>
 100a3ca:	4e86      	ldr	r6, [pc, #536]	; (100a5e4 <_setlocale_r+0x234>)
 100a3cc:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
 100a3d0:	4644      	mov	r4, r8
 100a3d2:	4635      	mov	r5, r6
 100a3d4:	4629      	mov	r1, r5
 100a3d6:	4620      	mov	r0, r4
 100a3d8:	3420      	adds	r4, #32
 100a3da:	f001 fcff 	bl	100bddc <strcpy>
 100a3de:	42bc      	cmp	r4, r7
 100a3e0:	f105 0520 	add.w	r5, r5, #32
 100a3e4:	d1f6      	bne.n	100a3d4 <_setlocale_r+0x24>
 100a3e6:	f89a 3000 	ldrb.w	r3, [sl]
 100a3ea:	bbb3      	cbnz	r3, 100a45a <_setlocale_r+0xaa>
 100a3ec:	f1bb 0f00 	cmp.w	fp, #0
 100a3f0:	f040 8098 	bne.w	100a524 <_setlocale_r+0x174>
 100a3f4:	4645      	mov	r5, r8
 100a3f6:	2401      	movs	r4, #1
 100a3f8:	4621      	mov	r1, r4
 100a3fa:	4648      	mov	r0, r9
 100a3fc:	f7ff ffae 	bl	100a35c <__get_locale_env>
 100a400:	3401      	adds	r4, #1
 100a402:	4607      	mov	r7, r0
 100a404:	f001 fd7c 	bl	100bf00 <strlen>
 100a408:	4639      	mov	r1, r7
 100a40a:	281f      	cmp	r0, #31
 100a40c:	4628      	mov	r0, r5
 100a40e:	f105 0520 	add.w	r5, r5, #32
 100a412:	d83c      	bhi.n	100a48e <_setlocale_r+0xde>
 100a414:	f001 fce2 	bl	100bddc <strcpy>
 100a418:	2c07      	cmp	r4, #7
 100a41a:	d1ed      	bne.n	100a3f8 <_setlocale_r+0x48>
 100a41c:	4f72      	ldr	r7, [pc, #456]	; (100a5e8 <_setlocale_r+0x238>)
 100a41e:	f643 0a30 	movw	sl, #14384	; 0x3830
 100a422:	f2c0 1a01 	movt	sl, #257	; 0x101
 100a426:	4645      	mov	r5, r8
 100a428:	2401      	movs	r4, #1
 100a42a:	46bb      	mov	fp, r7
 100a42c:	4631      	mov	r1, r6
 100a42e:	4658      	mov	r0, fp
 100a430:	f001 fcd4 	bl	100bddc <strcpy>
 100a434:	462a      	mov	r2, r5
 100a436:	4621      	mov	r1, r4
 100a438:	4650      	mov	r0, sl
 100a43a:	f7ff fc4f 	bl	1009cdc <__loadlocale>
 100a43e:	f10b 0b20 	add.w	fp, fp, #32
 100a442:	3620      	adds	r6, #32
 100a444:	3520      	adds	r5, #32
 100a446:	4603      	mov	r3, r0
 100a448:	2800      	cmp	r0, #0
 100a44a:	d07c      	beq.n	100a546 <_setlocale_r+0x196>
 100a44c:	3401      	adds	r4, #1
 100a44e:	2c07      	cmp	r4, #7
 100a450:	d1ec      	bne.n	100a42c <_setlocale_r+0x7c>
 100a452:	b003      	add	sp, #12
 100a454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100a458:	e40a      	b.n	1009c70 <currentlocale>
 100a45a:	f1bb 0f00 	cmp.w	fp, #0
 100a45e:	d01e      	beq.n	100a49e <_setlocale_r+0xee>
 100a460:	4650      	mov	r0, sl
 100a462:	f001 fd4d 	bl	100bf00 <strlen>
 100a466:	281f      	cmp	r0, #31
 100a468:	d811      	bhi.n	100a48e <_setlocale_r+0xde>
 100a46a:	4c60      	ldr	r4, [pc, #384]	; (100a5ec <_setlocale_r+0x23c>)
 100a46c:	4651      	mov	r1, sl
 100a46e:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 100a472:	4620      	mov	r0, r4
 100a474:	f001 fcb2 	bl	100bddc <strcpy>
 100a478:	4622      	mov	r2, r4
 100a47a:	4659      	mov	r1, fp
 100a47c:	f643 0030 	movw	r0, #14384	; 0x3830
 100a480:	f2c0 1001 	movt	r0, #257	; 0x101
 100a484:	b003      	add	sp, #12
 100a486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100a48a:	f7ff bc27 	b.w	1009cdc <__loadlocale>
 100a48e:	2300      	movs	r3, #0
 100a490:	2216      	movs	r2, #22
 100a492:	f8c9 2000 	str.w	r2, [r9]
 100a496:	4618      	mov	r0, r3
 100a498:	b003      	add	sp, #12
 100a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a49e:	212f      	movs	r1, #47	; 0x2f
 100a4a0:	4650      	mov	r0, sl
 100a4a2:	f001 fab1 	bl	100ba08 <strchr>
 100a4a6:	4604      	mov	r4, r0
 100a4a8:	2800      	cmp	r0, #0
 100a4aa:	f000 808b 	beq.w	100a5c4 <_setlocale_r+0x214>
 100a4ae:	7842      	ldrb	r2, [r0, #1]
 100a4b0:	2a2f      	cmp	r2, #47	; 0x2f
 100a4b2:	bf08      	it	eq
 100a4b4:	1c43      	addeq	r3, r0, #1
 100a4b6:	d104      	bne.n	100a4c2 <_setlocale_r+0x112>
 100a4b8:	461c      	mov	r4, r3
 100a4ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 100a4be:	2a2f      	cmp	r2, #47	; 0x2f
 100a4c0:	d0fa      	beq.n	100a4b8 <_setlocale_r+0x108>
 100a4c2:	2a00      	cmp	r2, #0
 100a4c4:	d0e3      	beq.n	100a48e <_setlocale_r+0xde>
 100a4c6:	46c3      	mov	fp, r8
 100a4c8:	2501      	movs	r5, #1
 100a4ca:	eba4 020a 	sub.w	r2, r4, sl
 100a4ce:	2a1f      	cmp	r2, #31
 100a4d0:	dcdd      	bgt.n	100a48e <_setlocale_r+0xde>
 100a4d2:	3201      	adds	r2, #1
 100a4d4:	4651      	mov	r1, sl
 100a4d6:	4658      	mov	r0, fp
 100a4d8:	3501      	adds	r5, #1
 100a4da:	f001 fce1 	bl	100bea0 <strlcpy>
 100a4de:	7823      	ldrb	r3, [r4, #0]
 100a4e0:	2b2f      	cmp	r3, #47	; 0x2f
 100a4e2:	d103      	bne.n	100a4ec <_setlocale_r+0x13c>
 100a4e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 100a4e8:	2b2f      	cmp	r3, #47	; 0x2f
 100a4ea:	d0fb      	beq.n	100a4e4 <_setlocale_r+0x134>
 100a4ec:	2b00      	cmp	r3, #0
 100a4ee:	d059      	beq.n	100a5a4 <_setlocale_r+0x1f4>
 100a4f0:	4622      	mov	r2, r4
 100a4f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 100a4f6:	2b00      	cmp	r3, #0
 100a4f8:	bf18      	it	ne
 100a4fa:	2b2f      	cmpne	r3, #47	; 0x2f
 100a4fc:	d1f9      	bne.n	100a4f2 <_setlocale_r+0x142>
 100a4fe:	2d07      	cmp	r5, #7
 100a500:	f10b 0b20 	add.w	fp, fp, #32
 100a504:	46a2      	mov	sl, r4
 100a506:	d089      	beq.n	100a41c <_setlocale_r+0x6c>
 100a508:	4614      	mov	r4, r2
 100a50a:	e7de      	b.n	100a4ca <_setlocale_r+0x11a>
 100a50c:	2900      	cmp	r1, #0
 100a50e:	d0a0      	beq.n	100a452 <_setlocale_r+0xa2>
 100a510:	f643 0330 	movw	r3, #14384	; 0x3830
 100a514:	f2c0 1301 	movt	r3, #257	; 0x101
 100a518:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 100a51c:	4618      	mov	r0, r3
 100a51e:	b003      	add	sp, #12
 100a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a524:	4659      	mov	r1, fp
 100a526:	4648      	mov	r0, r9
 100a528:	f7ff ff18 	bl	100a35c <__get_locale_env>
 100a52c:	4605      	mov	r5, r0
 100a52e:	f001 fce7 	bl	100bf00 <strlen>
 100a532:	281f      	cmp	r0, #31
 100a534:	d8ab      	bhi.n	100a48e <_setlocale_r+0xde>
 100a536:	4c2d      	ldr	r4, [pc, #180]	; (100a5ec <_setlocale_r+0x23c>)
 100a538:	4629      	mov	r1, r5
 100a53a:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 100a53e:	4620      	mov	r0, r4
 100a540:	f001 fc4c 	bl	100bddc <strcpy>
 100a544:	e798      	b.n	100a478 <_setlocale_r+0xc8>
 100a546:	2c01      	cmp	r4, #1
 100a548:	f8d9 b000 	ldr.w	fp, [r9]
 100a54c:	d027      	beq.n	100a59e <_setlocale_r+0x1ee>
 100a54e:	f643 0630 	movw	r6, #14384	; 0x3830
 100a552:	f642 6ad4 	movw	sl, #11988	; 0x2ed4
 100a556:	f2c0 1601 	movt	r6, #257	; 0x101
 100a55a:	f2c0 1a01 	movt	sl, #257	; 0x101
 100a55e:	2501      	movs	r5, #1
 100a560:	e004      	b.n	100a56c <_setlocale_r+0x1bc>
 100a562:	3501      	adds	r5, #1
 100a564:	f108 0820 	add.w	r8, r8, #32
 100a568:	42a5      	cmp	r5, r4
 100a56a:	d018      	beq.n	100a59e <_setlocale_r+0x1ee>
 100a56c:	4639      	mov	r1, r7
 100a56e:	4640      	mov	r0, r8
 100a570:	9301      	str	r3, [sp, #4]
 100a572:	f001 fc33 	bl	100bddc <strcpy>
 100a576:	4642      	mov	r2, r8
 100a578:	4629      	mov	r1, r5
 100a57a:	4630      	mov	r0, r6
 100a57c:	3720      	adds	r7, #32
 100a57e:	f7ff fbad 	bl	1009cdc <__loadlocale>
 100a582:	9b01      	ldr	r3, [sp, #4]
 100a584:	2800      	cmp	r0, #0
 100a586:	d1ec      	bne.n	100a562 <_setlocale_r+0x1b2>
 100a588:	4651      	mov	r1, sl
 100a58a:	4640      	mov	r0, r8
 100a58c:	f001 fc26 	bl	100bddc <strcpy>
 100a590:	4642      	mov	r2, r8
 100a592:	4629      	mov	r1, r5
 100a594:	4630      	mov	r0, r6
 100a596:	f7ff fba1 	bl	1009cdc <__loadlocale>
 100a59a:	9b01      	ldr	r3, [sp, #4]
 100a59c:	e7e1      	b.n	100a562 <_setlocale_r+0x1b2>
 100a59e:	f8c9 b000 	str.w	fp, [r9]
 100a5a2:	e778      	b.n	100a496 <_setlocale_r+0xe6>
 100a5a4:	2d07      	cmp	r5, #7
 100a5a6:	bf1c      	itt	ne
 100a5a8:	4b10      	ldrne	r3, [pc, #64]	; (100a5ec <_setlocale_r+0x23c>)
 100a5aa:	eb03 1545 	addne.w	r5, r3, r5, lsl #5
 100a5ae:	f43f af35 	beq.w	100a41c <_setlocale_r+0x6c>
 100a5b2:	f1a5 0120 	sub.w	r1, r5, #32
 100a5b6:	4628      	mov	r0, r5
 100a5b8:	3520      	adds	r5, #32
 100a5ba:	f001 fc0f 	bl	100bddc <strcpy>
 100a5be:	42bd      	cmp	r5, r7
 100a5c0:	d1f7      	bne.n	100a5b2 <_setlocale_r+0x202>
 100a5c2:	e72b      	b.n	100a41c <_setlocale_r+0x6c>
 100a5c4:	4650      	mov	r0, sl
 100a5c6:	f001 fc9b 	bl	100bf00 <strlen>
 100a5ca:	281f      	cmp	r0, #31
 100a5cc:	f63f af5f 	bhi.w	100a48e <_setlocale_r+0xde>
 100a5d0:	4644      	mov	r4, r8
 100a5d2:	4620      	mov	r0, r4
 100a5d4:	4651      	mov	r1, sl
 100a5d6:	3420      	adds	r4, #32
 100a5d8:	f001 fc00 	bl	100bddc <strcpy>
 100a5dc:	42bc      	cmp	r4, r7
 100a5de:	d1f8      	bne.n	100a5d2 <_setlocale_r+0x222>
 100a5e0:	e71c      	b.n	100a41c <_setlocale_r+0x6c>
 100a5e2:	bf00      	nop
 100a5e4:	01013850 	.word	0x01013850
 100a5e8:	01018220 	.word	0x01018220
 100a5ec:	01018120 	.word	0x01018120
 100a5f0:	01018140 	.word	0x01018140

0100a5f4 <__locale_mb_cur_max>:
 100a5f4:	f243 4300 	movw	r3, #13312	; 0x3400
 100a5f8:	f2c0 1301 	movt	r3, #257	; 0x101
 100a5fc:	f643 0230 	movw	r2, #14384	; 0x3830
 100a600:	f2c0 1201 	movt	r2, #257	; 0x101
 100a604:	681b      	ldr	r3, [r3, #0]
 100a606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100a608:	2b00      	cmp	r3, #0
 100a60a:	bf08      	it	eq
 100a60c:	4613      	moveq	r3, r2
 100a60e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 100a612:	4770      	bx	lr

0100a614 <__locale_ctype_ptr_l>:
 100a614:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 100a618:	4770      	bx	lr
 100a61a:	bf00      	nop

0100a61c <__locale_ctype_ptr>:
 100a61c:	f243 4300 	movw	r3, #13312	; 0x3400
 100a620:	f2c0 1301 	movt	r3, #257	; 0x101
 100a624:	f643 0230 	movw	r2, #14384	; 0x3830
 100a628:	f2c0 1201 	movt	r2, #257	; 0x101
 100a62c:	681b      	ldr	r3, [r3, #0]
 100a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100a630:	2b00      	cmp	r3, #0
 100a632:	bf08      	it	eq
 100a634:	4613      	moveq	r3, r2
 100a636:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 100a63a:	4770      	bx	lr

0100a63c <setlocale>:
 100a63c:	f243 4300 	movw	r3, #13312	; 0x3400
 100a640:	f2c0 1301 	movt	r3, #257	; 0x101
 100a644:	460a      	mov	r2, r1
 100a646:	4601      	mov	r1, r0
 100a648:	6818      	ldr	r0, [r3, #0]
 100a64a:	f7ff beb1 	b.w	100a3b0 <_setlocale_r>
 100a64e:	bf00      	nop

0100a650 <memalign>:
 100a650:	f243 4300 	movw	r3, #13312	; 0x3400
 100a654:	f2c0 1301 	movt	r3, #257	; 0x101
 100a658:	460a      	mov	r2, r1
 100a65a:	4601      	mov	r1, r0
 100a65c:	6818      	ldr	r0, [r3, #0]
 100a65e:	f000 b801 	b.w	100a664 <_memalign_r>
 100a662:	bf00      	nop

0100a664 <_memalign_r>:
 100a664:	2908      	cmp	r1, #8
 100a666:	d962      	bls.n	100a72e <_memalign_r+0xca>
 100a668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100a66c:	f102 050b 	add.w	r5, r2, #11
 100a670:	2d16      	cmp	r5, #22
 100a672:	4607      	mov	r7, r0
 100a674:	bf8d      	iteet	hi
 100a676:	f025 0507 	bichi.w	r5, r5, #7
 100a67a:	2300      	movls	r3, #0
 100a67c:	2510      	movls	r5, #16
 100a67e:	0feb      	lsrhi	r3, r5, #31
 100a680:	4295      	cmp	r5, r2
 100a682:	bf2c      	ite	cs
 100a684:	461a      	movcs	r2, r3
 100a686:	f043 0201 	orrcc.w	r2, r3, #1
 100a68a:	2a00      	cmp	r2, #0
 100a68c:	d149      	bne.n	100a722 <_memalign_r+0xbe>
 100a68e:	2910      	cmp	r1, #16
 100a690:	bf38      	it	cc
 100a692:	2110      	movcc	r1, #16
 100a694:	460c      	mov	r4, r1
 100a696:	3110      	adds	r1, #16
 100a698:	4429      	add	r1, r5
 100a69a:	f000 f86d 	bl	100a778 <_malloc_r>
 100a69e:	4606      	mov	r6, r0
 100a6a0:	b3e0      	cbz	r0, 100a71c <_memalign_r+0xb8>
 100a6a2:	4638      	mov	r0, r7
 100a6a4:	f1a6 0808 	sub.w	r8, r6, #8
 100a6a8:	f001 f8ca 	bl	100b840 <__malloc_lock>
 100a6ac:	4621      	mov	r1, r4
 100a6ae:	4630      	mov	r0, r6
 100a6b0:	f7fe fd78 	bl	10091a4 <__aeabi_uidivmod>
 100a6b4:	b341      	cbz	r1, 100a708 <_memalign_r+0xa4>
 100a6b6:	1e63      	subs	r3, r4, #1
 100a6b8:	4261      	negs	r1, r4
 100a6ba:	4433      	add	r3, r6
 100a6bc:	4638      	mov	r0, r7
 100a6be:	4019      	ands	r1, r3
 100a6c0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 100a6c4:	3908      	subs	r1, #8
 100a6c6:	eba1 0208 	sub.w	r2, r1, r8
 100a6ca:	f023 0303 	bic.w	r3, r3, #3
 100a6ce:	2a0f      	cmp	r2, #15
 100a6d0:	bfdc      	itt	le
 100a6d2:	1909      	addle	r1, r1, r4
 100a6d4:	eba1 0208 	suble.w	r2, r1, r8
 100a6d8:	1a9b      	subs	r3, r3, r2
 100a6da:	4688      	mov	r8, r1
 100a6dc:	eb08 0403 	add.w	r4, r8, r3
 100a6e0:	f043 0301 	orr.w	r3, r3, #1
 100a6e4:	f8c8 3004 	str.w	r3, [r8, #4]
 100a6e8:	4631      	mov	r1, r6
 100a6ea:	6863      	ldr	r3, [r4, #4]
 100a6ec:	f043 0301 	orr.w	r3, r3, #1
 100a6f0:	6063      	str	r3, [r4, #4]
 100a6f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 100a6f6:	f003 0301 	and.w	r3, r3, #1
 100a6fa:	431a      	orrs	r2, r3
 100a6fc:	f846 2c04 	str.w	r2, [r6, #-4]
 100a700:	f004 fd66 	bl	100f1d0 <_free_r>
 100a704:	f108 0608 	add.w	r6, r8, #8
 100a708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 100a70c:	f023 0303 	bic.w	r3, r3, #3
 100a710:	1b5b      	subs	r3, r3, r5
 100a712:	2b0f      	cmp	r3, #15
 100a714:	dc0e      	bgt.n	100a734 <_memalign_r+0xd0>
 100a716:	4638      	mov	r0, r7
 100a718:	f001 f894 	bl	100b844 <__malloc_unlock>
 100a71c:	4630      	mov	r0, r6
 100a71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100a722:	2600      	movs	r6, #0
 100a724:	230c      	movs	r3, #12
 100a726:	6003      	str	r3, [r0, #0]
 100a728:	4630      	mov	r0, r6
 100a72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100a72e:	4611      	mov	r1, r2
 100a730:	f000 b822 	b.w	100a778 <_malloc_r>
 100a734:	eb08 0205 	add.w	r2, r8, r5
 100a738:	f043 0301 	orr.w	r3, r3, #1
 100a73c:	f102 0108 	add.w	r1, r2, #8
 100a740:	4638      	mov	r0, r7
 100a742:	6053      	str	r3, [r2, #4]
 100a744:	f8d8 3004 	ldr.w	r3, [r8, #4]
 100a748:	f003 0301 	and.w	r3, r3, #1
 100a74c:	431d      	orrs	r5, r3
 100a74e:	f8c8 5004 	str.w	r5, [r8, #4]
 100a752:	f004 fd3d 	bl	100f1d0 <_free_r>
 100a756:	e7de      	b.n	100a716 <_memalign_r+0xb2>

0100a758 <malloc>:
 100a758:	f243 4300 	movw	r3, #13312	; 0x3400
 100a75c:	f2c0 1301 	movt	r3, #257	; 0x101
 100a760:	4601      	mov	r1, r0
 100a762:	6818      	ldr	r0, [r3, #0]
 100a764:	f000 b808 	b.w	100a778 <_malloc_r>

0100a768 <free>:
 100a768:	f243 4300 	movw	r3, #13312	; 0x3400
 100a76c:	f2c0 1301 	movt	r3, #257	; 0x101
 100a770:	4601      	mov	r1, r0
 100a772:	6818      	ldr	r0, [r3, #0]
 100a774:	f004 bd2c 	b.w	100f1d0 <_free_r>

0100a778 <_malloc_r>:
 100a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100a77c:	f101 050b 	add.w	r5, r1, #11
 100a780:	2d16      	cmp	r5, #22
 100a782:	b083      	sub	sp, #12
 100a784:	4607      	mov	r7, r0
 100a786:	d82c      	bhi.n	100a7e2 <_malloc_r+0x6a>
 100a788:	2910      	cmp	r1, #16
 100a78a:	d823      	bhi.n	100a7d4 <_malloc_r+0x5c>
 100a78c:	f001 f858 	bl	100b840 <__malloc_lock>
 100a790:	2510      	movs	r5, #16
 100a792:	2002      	movs	r0, #2
 100a794:	2318      	movs	r3, #24
 100a796:	f643 16bc 	movw	r6, #14780	; 0x39bc
 100a79a:	f2c0 1601 	movt	r6, #257	; 0x101
 100a79e:	4433      	add	r3, r6
 100a7a0:	f1a3 0108 	sub.w	r1, r3, #8
 100a7a4:	685a      	ldr	r2, [r3, #4]
 100a7a6:	428a      	cmp	r2, r1
 100a7a8:	d04f      	beq.n	100a84a <_malloc_r+0xd2>
 100a7aa:	6853      	ldr	r3, [r2, #4]
 100a7ac:	f102 0408 	add.w	r4, r2, #8
 100a7b0:	68d1      	ldr	r1, [r2, #12]
 100a7b2:	4638      	mov	r0, r7
 100a7b4:	f023 0303 	bic.w	r3, r3, #3
 100a7b8:	6895      	ldr	r5, [r2, #8]
 100a7ba:	441a      	add	r2, r3
 100a7bc:	6853      	ldr	r3, [r2, #4]
 100a7be:	60e9      	str	r1, [r5, #12]
 100a7c0:	f043 0301 	orr.w	r3, r3, #1
 100a7c4:	608d      	str	r5, [r1, #8]
 100a7c6:	6053      	str	r3, [r2, #4]
 100a7c8:	f001 f83c 	bl	100b844 <__malloc_unlock>
 100a7cc:	4620      	mov	r0, r4
 100a7ce:	b003      	add	sp, #12
 100a7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a7d4:	2400      	movs	r4, #0
 100a7d6:	230c      	movs	r3, #12
 100a7d8:	4620      	mov	r0, r4
 100a7da:	603b      	str	r3, [r7, #0]
 100a7dc:	b003      	add	sp, #12
 100a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a7e2:	f025 0507 	bic.w	r5, r5, #7
 100a7e6:	42a9      	cmp	r1, r5
 100a7e8:	bf94      	ite	ls
 100a7ea:	2100      	movls	r1, #0
 100a7ec:	2101      	movhi	r1, #1
 100a7ee:	ea51 73d5 	orrs.w	r3, r1, r5, lsr #31
 100a7f2:	d1ef      	bne.n	100a7d4 <_malloc_r+0x5c>
 100a7f4:	f001 f824 	bl	100b840 <__malloc_lock>
 100a7f8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 100a7fc:	f0c0 81c5 	bcc.w	100ab8a <_malloc_r+0x412>
 100a800:	0a6b      	lsrs	r3, r5, #9
 100a802:	f000 8111 	beq.w	100aa28 <_malloc_r+0x2b0>
 100a806:	2b04      	cmp	r3, #4
 100a808:	f200 819b 	bhi.w	100ab42 <_malloc_r+0x3ca>
 100a80c:	09ab      	lsrs	r3, r5, #6
 100a80e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 100a812:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 100a816:	00c3      	lsls	r3, r0, #3
 100a818:	f643 16bc 	movw	r6, #14780	; 0x39bc
 100a81c:	f2c0 1601 	movt	r6, #257	; 0x101
 100a820:	4433      	add	r3, r6
 100a822:	f1a3 0408 	sub.w	r4, r3, #8
 100a826:	685b      	ldr	r3, [r3, #4]
 100a828:	429c      	cmp	r4, r3
 100a82a:	d106      	bne.n	100a83a <_malloc_r+0xc2>
 100a82c:	e012      	b.n	100a854 <_malloc_r+0xdc>
 100a82e:	2900      	cmp	r1, #0
 100a830:	f280 8155 	bge.w	100aade <_malloc_r+0x366>
 100a834:	68db      	ldr	r3, [r3, #12]
 100a836:	429c      	cmp	r4, r3
 100a838:	d00c      	beq.n	100a854 <_malloc_r+0xdc>
 100a83a:	685a      	ldr	r2, [r3, #4]
 100a83c:	f022 0203 	bic.w	r2, r2, #3
 100a840:	1b51      	subs	r1, r2, r5
 100a842:	290f      	cmp	r1, #15
 100a844:	ddf3      	ble.n	100a82e <_malloc_r+0xb6>
 100a846:	4660      	mov	r0, ip
 100a848:	e004      	b.n	100a854 <_malloc_r+0xdc>
 100a84a:	68da      	ldr	r2, [r3, #12]
 100a84c:	4293      	cmp	r3, r2
 100a84e:	bf08      	it	eq
 100a850:	3002      	addeq	r0, #2
 100a852:	d1aa      	bne.n	100a7aa <_malloc_r+0x32>
 100a854:	6932      	ldr	r2, [r6, #16]
 100a856:	f8df e480 	ldr.w	lr, [pc, #1152]	; 100acd8 <_malloc_r+0x560>
 100a85a:	4572      	cmp	r2, lr
 100a85c:	bf08      	it	eq
 100a85e:	6871      	ldreq	r1, [r6, #4]
 100a860:	d029      	beq.n	100a8b6 <_malloc_r+0x13e>
 100a862:	6853      	ldr	r3, [r2, #4]
 100a864:	f023 0c03 	bic.w	ip, r3, #3
 100a868:	ebac 0305 	sub.w	r3, ip, r5
 100a86c:	2b0f      	cmp	r3, #15
 100a86e:	f300 8190 	bgt.w	100ab92 <_malloc_r+0x41a>
 100a872:	2b00      	cmp	r3, #0
 100a874:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 100a878:	f280 8114 	bge.w	100aaa4 <_malloc_r+0x32c>
 100a87c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 100a880:	f080 813f 	bcs.w	100ab02 <_malloc_r+0x38a>
 100a884:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 100a888:	2101      	movs	r1, #1
 100a88a:	eb0c 0401 	add.w	r4, ip, r1
 100a88e:	6873      	ldr	r3, [r6, #4]
 100a890:	ea4f 0cac 	mov.w	ip, ip, asr #2
 100a894:	f856 9034 	ldr.w	r9, [r6, r4, lsl #3]
 100a898:	fa01 fc0c 	lsl.w	ip, r1, ip
 100a89c:	eb06 08c4 	add.w	r8, r6, r4, lsl #3
 100a8a0:	ea4c 0103 	orr.w	r1, ip, r3
 100a8a4:	f1a8 0308 	sub.w	r3, r8, #8
 100a8a8:	6071      	str	r1, [r6, #4]
 100a8aa:	e9c2 9302 	strd	r9, r3, [r2, #8]
 100a8ae:	f846 2034 	str.w	r2, [r6, r4, lsl #3]
 100a8b2:	f8c9 200c 	str.w	r2, [r9, #12]
 100a8b6:	1083      	asrs	r3, r0, #2
 100a8b8:	2401      	movs	r4, #1
 100a8ba:	409c      	lsls	r4, r3
 100a8bc:	428c      	cmp	r4, r1
 100a8be:	f240 80b9 	bls.w	100aa34 <_malloc_r+0x2bc>
 100a8c2:	68b4      	ldr	r4, [r6, #8]
 100a8c4:	6863      	ldr	r3, [r4, #4]
 100a8c6:	f023 0803 	bic.w	r8, r3, #3
 100a8ca:	45a8      	cmp	r8, r5
 100a8cc:	eba8 0205 	sub.w	r2, r8, r5
 100a8d0:	bf2c      	ite	cs
 100a8d2:	2300      	movcs	r3, #0
 100a8d4:	2301      	movcc	r3, #1
 100a8d6:	2a0f      	cmp	r2, #15
 100a8d8:	bfd8      	it	le
 100a8da:	f043 0301 	orrle.w	r3, r3, #1
 100a8de:	2b00      	cmp	r3, #0
 100a8e0:	f000 80ed 	beq.w	100aabe <_malloc_r+0x346>
 100a8e4:	f248 29e4 	movw	r9, #33508	; 0x82e4
 100a8e8:	f2c0 1901 	movt	r9, #257	; 0x101
 100a8ec:	f8d6 3408 	ldr.w	r3, [r6, #1032]	; 0x408
 100a8f0:	4638      	mov	r0, r7
 100a8f2:	f8d9 1000 	ldr.w	r1, [r9]
 100a8f6:	eb04 0b08 	add.w	fp, r4, r8
 100a8fa:	3301      	adds	r3, #1
 100a8fc:	4429      	add	r1, r5
 100a8fe:	bf17      	itett	ne
 100a900:	f501 5180 	addne.w	r1, r1, #4096	; 0x1000
 100a904:	f101 0310 	addeq.w	r3, r1, #16
 100a908:	310f      	addne	r1, #15
 100a90a:	f421 637f 	bicne.w	r3, r1, #4080	; 0xff0
 100a90e:	bf18      	it	ne
 100a910:	f023 030f 	bicne.w	r3, r3, #15
 100a914:	9301      	str	r3, [sp, #4]
 100a916:	4619      	mov	r1, r3
 100a918:	f000 ff96 	bl	100b848 <_sbrk_r>
 100a91c:	9b01      	ldr	r3, [sp, #4]
 100a91e:	f1b0 3fff 	cmp.w	r0, #4294967295
 100a922:	4682      	mov	sl, r0
 100a924:	f000 8181 	beq.w	100ac2a <_malloc_r+0x4b2>
 100a928:	42b4      	cmp	r4, r6
 100a92a:	bf18      	it	ne
 100a92c:	4583      	cmpne	fp, r0
 100a92e:	f200 817c 	bhi.w	100ac2a <_malloc_r+0x4b2>
 100a932:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100a936:	45d3      	cmp	fp, sl
 100a938:	4418      	add	r0, r3
 100a93a:	f8c9 0004 	str.w	r0, [r9, #4]
 100a93e:	f000 8166 	beq.w	100ac0e <_malloc_r+0x496>
 100a942:	f8d6 2408 	ldr.w	r2, [r6, #1032]	; 0x408
 100a946:	3201      	adds	r2, #1
 100a948:	bf0f      	iteee	eq
 100a94a:	f8c6 a408 	streq.w	sl, [r6, #1032]	; 0x408
 100a94e:	ebaa 0b0b 	subne.w	fp, sl, fp
 100a952:	4458      	addne	r0, fp
 100a954:	f8c9 0004 	strne.w	r0, [r9, #4]
 100a958:	f01a 0b07 	ands.w	fp, sl, #7
 100a95c:	4638      	mov	r0, r7
 100a95e:	bf1f      	itttt	ne
 100a960:	f1cb 0208 	rsbne	r2, fp, #8
 100a964:	f5cb 5b80 	rsbne	fp, fp, #4096	; 0x1000
 100a968:	4492      	addne	sl, r2
 100a96a:	f10b 0b08 	addne.w	fp, fp, #8
 100a96e:	4453      	add	r3, sl
 100a970:	bf08      	it	eq
 100a972:	f44f 5b80 	moveq.w	fp, #4096	; 0x1000
 100a976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 100a97a:	ebab 0b03 	sub.w	fp, fp, r3
 100a97e:	4659      	mov	r1, fp
 100a980:	f000 ff62 	bl	100b848 <_sbrk_r>
 100a984:	f8c6 a008 	str.w	sl, [r6, #8]
 100a988:	1c43      	adds	r3, r0, #1
 100a98a:	bf18      	it	ne
 100a98c:	eba0 010a 	subne.w	r1, r0, sl
 100a990:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100a994:	bf15      	itete	ne
 100a996:	4459      	addne	r1, fp
 100a998:	2101      	moveq	r1, #1
 100a99a:	f041 0101 	orrne.w	r1, r1, #1
 100a99e:	f04f 0b00 	moveq.w	fp, #0
 100a9a2:	42b4      	cmp	r4, r6
 100a9a4:	4458      	add	r0, fp
 100a9a6:	f8ca 1004 	str.w	r1, [sl, #4]
 100a9aa:	f8c9 0004 	str.w	r0, [r9, #4]
 100a9ae:	f000 813a 	beq.w	100ac26 <_malloc_r+0x4ae>
 100a9b2:	f1b8 0f0f 	cmp.w	r8, #15
 100a9b6:	bf9c      	itt	ls
 100a9b8:	2301      	movls	r3, #1
 100a9ba:	f8ca 3004 	strls.w	r3, [sl, #4]
 100a9be:	d92e      	bls.n	100aa1e <_malloc_r+0x2a6>
 100a9c0:	f1a8 030c 	sub.w	r3, r8, #12
 100a9c4:	6862      	ldr	r2, [r4, #4]
 100a9c6:	f023 0307 	bic.w	r3, r3, #7
 100a9ca:	f04f 0c05 	mov.w	ip, #5
 100a9ce:	18e1      	adds	r1, r4, r3
 100a9d0:	2b0f      	cmp	r3, #15
 100a9d2:	f002 0201 	and.w	r2, r2, #1
 100a9d6:	ea42 0203 	orr.w	r2, r2, r3
 100a9da:	6062      	str	r2, [r4, #4]
 100a9dc:	e9c1 cc01 	strd	ip, ip, [r1, #4]
 100a9e0:	f200 8159 	bhi.w	100ac96 <_malloc_r+0x51e>
 100a9e4:	f8da 1004 	ldr.w	r1, [sl, #4]
 100a9e8:	4654      	mov	r4, sl
 100a9ea:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 100a9ee:	4283      	cmp	r3, r0
 100a9f0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 100a9f4:	bf38      	it	cc
 100a9f6:	f8c9 002c 	strcc.w	r0, [r9, #44]	; 0x2c
 100a9fa:	4283      	cmp	r3, r0
 100a9fc:	bf38      	it	cc
 100a9fe:	f8c9 0030 	strcc.w	r0, [r9, #48]	; 0x30
 100aa02:	f021 0103 	bic.w	r1, r1, #3
 100aa06:	1b4a      	subs	r2, r1, r5
 100aa08:	2a0f      	cmp	r2, #15
 100aa0a:	bfcc      	ite	gt
 100aa0c:	2300      	movgt	r3, #0
 100aa0e:	2301      	movle	r3, #1
 100aa10:	42a9      	cmp	r1, r5
 100aa12:	bf2c      	ite	cs
 100aa14:	4619      	movcs	r1, r3
 100aa16:	f043 0101 	orrcc.w	r1, r3, #1
 100aa1a:	2900      	cmp	r1, #0
 100aa1c:	d04f      	beq.n	100aabe <_malloc_r+0x346>
 100aa1e:	4638      	mov	r0, r7
 100aa20:	2400      	movs	r4, #0
 100aa22:	f000 ff0f 	bl	100b844 <__malloc_unlock>
 100aa26:	e6d1      	b.n	100a7cc <_malloc_r+0x54>
 100aa28:	f44f 7300 	mov.w	r3, #512	; 0x200
 100aa2c:	2040      	movs	r0, #64	; 0x40
 100aa2e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 100aa32:	e6f1      	b.n	100a818 <_malloc_r+0xa0>
 100aa34:	420c      	tst	r4, r1
 100aa36:	d105      	bne.n	100aa44 <_malloc_r+0x2cc>
 100aa38:	f020 0003 	bic.w	r0, r0, #3
 100aa3c:	0064      	lsls	r4, r4, #1
 100aa3e:	3004      	adds	r0, #4
 100aa40:	420c      	tst	r4, r1
 100aa42:	d0fb      	beq.n	100aa3c <_malloc_r+0x2c4>
 100aa44:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 100aa48:	4680      	mov	r8, r0
 100aa4a:	46cc      	mov	ip, r9
 100aa4c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 100aa50:	459c      	cmp	ip, r3
 100aa52:	d106      	bne.n	100aa62 <_malloc_r+0x2ea>
 100aa54:	e081      	b.n	100ab5a <_malloc_r+0x3e2>
 100aa56:	2a00      	cmp	r2, #0
 100aa58:	f280 8088 	bge.w	100ab6c <_malloc_r+0x3f4>
 100aa5c:	68db      	ldr	r3, [r3, #12]
 100aa5e:	459c      	cmp	ip, r3
 100aa60:	d07b      	beq.n	100ab5a <_malloc_r+0x3e2>
 100aa62:	6859      	ldr	r1, [r3, #4]
 100aa64:	f021 0103 	bic.w	r1, r1, #3
 100aa68:	1b4a      	subs	r2, r1, r5
 100aa6a:	2a0f      	cmp	r2, #15
 100aa6c:	ddf3      	ble.n	100aa56 <_malloc_r+0x2de>
 100aa6e:	68dc      	ldr	r4, [r3, #12]
 100aa70:	eb03 0c05 	add.w	ip, r3, r5
 100aa74:	f8d3 8008 	ldr.w	r8, [r3, #8]
 100aa78:	f045 0501 	orr.w	r5, r5, #1
 100aa7c:	4638      	mov	r0, r7
 100aa7e:	605d      	str	r5, [r3, #4]
 100aa80:	f042 0501 	orr.w	r5, r2, #1
 100aa84:	f8c8 400c 	str.w	r4, [r8, #12]
 100aa88:	f8c4 8008 	str.w	r8, [r4, #8]
 100aa8c:	f103 0408 	add.w	r4, r3, #8
 100aa90:	e9c6 cc04 	strd	ip, ip, [r6, #16]
 100aa94:	e9cc ee02 	strd	lr, lr, [ip, #8]
 100aa98:	f8cc 5004 	str.w	r5, [ip, #4]
 100aa9c:	505a      	str	r2, [r3, r1]
 100aa9e:	f000 fed1 	bl	100b844 <__malloc_unlock>
 100aaa2:	e693      	b.n	100a7cc <_malloc_r+0x54>
 100aaa4:	4494      	add	ip, r2
 100aaa6:	4638      	mov	r0, r7
 100aaa8:	f102 0408 	add.w	r4, r2, #8
 100aaac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 100aab0:	f043 0301 	orr.w	r3, r3, #1
 100aab4:	f8cc 3004 	str.w	r3, [ip, #4]
 100aab8:	f000 fec4 	bl	100b844 <__malloc_unlock>
 100aabc:	e686      	b.n	100a7cc <_malloc_r+0x54>
 100aabe:	1963      	adds	r3, r4, r5
 100aac0:	f042 0201 	orr.w	r2, r2, #1
 100aac4:	4638      	mov	r0, r7
 100aac6:	f045 0501 	orr.w	r5, r5, #1
 100aaca:	6065      	str	r5, [r4, #4]
 100aacc:	3408      	adds	r4, #8
 100aace:	60b3      	str	r3, [r6, #8]
 100aad0:	605a      	str	r2, [r3, #4]
 100aad2:	f000 feb7 	bl	100b844 <__malloc_unlock>
 100aad6:	4620      	mov	r0, r4
 100aad8:	b003      	add	sp, #12
 100aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100aade:	441a      	add	r2, r3
 100aae0:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
 100aae4:	4638      	mov	r0, r7
 100aae6:	f103 0408 	add.w	r4, r3, #8
 100aaea:	6851      	ldr	r1, [r2, #4]
 100aaec:	60f5      	str	r5, [r6, #12]
 100aaee:	f041 0101 	orr.w	r1, r1, #1
 100aaf2:	60ae      	str	r6, [r5, #8]
 100aaf4:	6051      	str	r1, [r2, #4]
 100aaf6:	f000 fea5 	bl	100b844 <__malloc_unlock>
 100aafa:	4620      	mov	r0, r4
 100aafc:	b003      	add	sp, #12
 100aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ab02:	ea4f 215c 	mov.w	r1, ip, lsr #9
 100ab06:	2904      	cmp	r1, #4
 100ab08:	d956      	bls.n	100abb8 <_malloc_r+0x440>
 100ab0a:	2914      	cmp	r1, #20
 100ab0c:	f200 809b 	bhi.w	100ac46 <_malloc_r+0x4ce>
 100ab10:	f101 035c 	add.w	r3, r1, #92	; 0x5c
 100ab14:	315b      	adds	r1, #91	; 0x5b
 100ab16:	00db      	lsls	r3, r3, #3
 100ab18:	18f4      	adds	r4, r6, r3
 100ab1a:	58f3      	ldr	r3, [r6, r3]
 100ab1c:	3c08      	subs	r4, #8
 100ab1e:	429c      	cmp	r4, r3
 100ab20:	f000 8086 	beq.w	100ac30 <_malloc_r+0x4b8>
 100ab24:	6859      	ldr	r1, [r3, #4]
 100ab26:	f021 0103 	bic.w	r1, r1, #3
 100ab2a:	4561      	cmp	r1, ip
 100ab2c:	d902      	bls.n	100ab34 <_malloc_r+0x3bc>
 100ab2e:	689b      	ldr	r3, [r3, #8]
 100ab30:	429c      	cmp	r4, r3
 100ab32:	d1f7      	bne.n	100ab24 <_malloc_r+0x3ac>
 100ab34:	68dc      	ldr	r4, [r3, #12]
 100ab36:	6871      	ldr	r1, [r6, #4]
 100ab38:	e9c2 3402 	strd	r3, r4, [r2, #8]
 100ab3c:	60a2      	str	r2, [r4, #8]
 100ab3e:	60da      	str	r2, [r3, #12]
 100ab40:	e6b9      	b.n	100a8b6 <_malloc_r+0x13e>
 100ab42:	2b14      	cmp	r3, #20
 100ab44:	d93f      	bls.n	100abc6 <_malloc_r+0x44e>
 100ab46:	2b54      	cmp	r3, #84	; 0x54
 100ab48:	f200 8086 	bhi.w	100ac58 <_malloc_r+0x4e0>
 100ab4c:	0b2b      	lsrs	r3, r5, #12
 100ab4e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 100ab52:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 100ab56:	00c3      	lsls	r3, r0, #3
 100ab58:	e65e      	b.n	100a818 <_malloc_r+0xa0>
 100ab5a:	f108 0801 	add.w	r8, r8, #1
 100ab5e:	f10c 0c08 	add.w	ip, ip, #8
 100ab62:	f018 0f03 	tst.w	r8, #3
 100ab66:	f47f af71 	bne.w	100aa4c <_malloc_r+0x2d4>
 100ab6a:	e036      	b.n	100abda <_malloc_r+0x462>
 100ab6c:	4419      	add	r1, r3
 100ab6e:	461c      	mov	r4, r3
 100ab70:	68da      	ldr	r2, [r3, #12]
 100ab72:	4638      	mov	r0, r7
 100ab74:	f854 5f08 	ldr.w	r5, [r4, #8]!
 100ab78:	684b      	ldr	r3, [r1, #4]
 100ab7a:	f043 0301 	orr.w	r3, r3, #1
 100ab7e:	604b      	str	r3, [r1, #4]
 100ab80:	60ea      	str	r2, [r5, #12]
 100ab82:	6095      	str	r5, [r2, #8]
 100ab84:	f000 fe5e 	bl	100b844 <__malloc_unlock>
 100ab88:	e620      	b.n	100a7cc <_malloc_r+0x54>
 100ab8a:	08e8      	lsrs	r0, r5, #3
 100ab8c:	f105 0308 	add.w	r3, r5, #8
 100ab90:	e601      	b.n	100a796 <_malloc_r+0x1e>
 100ab92:	1951      	adds	r1, r2, r5
 100ab94:	4638      	mov	r0, r7
 100ab96:	f045 0501 	orr.w	r5, r5, #1
 100ab9a:	6055      	str	r5, [r2, #4]
 100ab9c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 100aba0:	f043 0501 	orr.w	r5, r3, #1
 100aba4:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 100aba8:	f102 0408 	add.w	r4, r2, #8
 100abac:	604d      	str	r5, [r1, #4]
 100abae:	f842 300c 	str.w	r3, [r2, ip]
 100abb2:	f000 fe47 	bl	100b844 <__malloc_unlock>
 100abb6:	e609      	b.n	100a7cc <_malloc_r+0x54>
 100abb8:	ea4f 119c 	mov.w	r1, ip, lsr #6
 100abbc:	f101 0339 	add.w	r3, r1, #57	; 0x39
 100abc0:	3138      	adds	r1, #56	; 0x38
 100abc2:	00db      	lsls	r3, r3, #3
 100abc4:	e7a8      	b.n	100ab18 <_malloc_r+0x3a0>
 100abc6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 100abca:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 100abce:	00c3      	lsls	r3, r0, #3
 100abd0:	e622      	b.n	100a818 <_malloc_r+0xa0>
 100abd2:	f859 3908 	ldr.w	r3, [r9], #-8
 100abd6:	454b      	cmp	r3, r9
 100abd8:	d17c      	bne.n	100acd4 <_malloc_r+0x55c>
 100abda:	f010 0f03 	tst.w	r0, #3
 100abde:	f100 30ff 	add.w	r0, r0, #4294967295
 100abe2:	d1f6      	bne.n	100abd2 <_malloc_r+0x45a>
 100abe4:	6873      	ldr	r3, [r6, #4]
 100abe6:	ea23 0304 	bic.w	r3, r3, r4
 100abea:	6073      	str	r3, [r6, #4]
 100abec:	0064      	lsls	r4, r4, #1
 100abee:	429c      	cmp	r4, r3
 100abf0:	bf8c      	ite	hi
 100abf2:	2200      	movhi	r2, #0
 100abf4:	2201      	movls	r2, #1
 100abf6:	2c00      	cmp	r4, #0
 100abf8:	bf08      	it	eq
 100abfa:	2200      	moveq	r2, #0
 100abfc:	b91a      	cbnz	r2, 100ac06 <_malloc_r+0x48e>
 100abfe:	e660      	b.n	100a8c2 <_malloc_r+0x14a>
 100ac00:	0064      	lsls	r4, r4, #1
 100ac02:	f108 0804 	add.w	r8, r8, #4
 100ac06:	421c      	tst	r4, r3
 100ac08:	d0fa      	beq.n	100ac00 <_malloc_r+0x488>
 100ac0a:	4640      	mov	r0, r8
 100ac0c:	e71a      	b.n	100aa44 <_malloc_r+0x2cc>
 100ac0e:	f3cb 020b 	ubfx	r2, fp, #0, #12
 100ac12:	2a00      	cmp	r2, #0
 100ac14:	f47f ae95 	bne.w	100a942 <_malloc_r+0x1ca>
 100ac18:	68b4      	ldr	r4, [r6, #8]
 100ac1a:	eb08 0103 	add.w	r1, r8, r3
 100ac1e:	f041 0101 	orr.w	r1, r1, #1
 100ac22:	6061      	str	r1, [r4, #4]
 100ac24:	e6e1      	b.n	100a9ea <_malloc_r+0x272>
 100ac26:	4654      	mov	r4, sl
 100ac28:	e6df      	b.n	100a9ea <_malloc_r+0x272>
 100ac2a:	68b4      	ldr	r4, [r6, #8]
 100ac2c:	6861      	ldr	r1, [r4, #4]
 100ac2e:	e6e8      	b.n	100aa02 <_malloc_r+0x28a>
 100ac30:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 100ac34:	f04f 0801 	mov.w	r8, #1
 100ac38:	6871      	ldr	r1, [r6, #4]
 100ac3a:	fa08 fc0c 	lsl.w	ip, r8, ip
 100ac3e:	ea4c 0101 	orr.w	r1, ip, r1
 100ac42:	6071      	str	r1, [r6, #4]
 100ac44:	e778      	b.n	100ab38 <_malloc_r+0x3c0>
 100ac46:	2954      	cmp	r1, #84	; 0x54
 100ac48:	d810      	bhi.n	100ac6c <_malloc_r+0x4f4>
 100ac4a:	ea4f 311c 	mov.w	r1, ip, lsr #12
 100ac4e:	f101 036f 	add.w	r3, r1, #111	; 0x6f
 100ac52:	316e      	adds	r1, #110	; 0x6e
 100ac54:	00db      	lsls	r3, r3, #3
 100ac56:	e75f      	b.n	100ab18 <_malloc_r+0x3a0>
 100ac58:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 100ac5c:	d810      	bhi.n	100ac80 <_malloc_r+0x508>
 100ac5e:	0beb      	lsrs	r3, r5, #15
 100ac60:	f103 0078 	add.w	r0, r3, #120	; 0x78
 100ac64:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 100ac68:	00c3      	lsls	r3, r0, #3
 100ac6a:	e5d5      	b.n	100a818 <_malloc_r+0xa0>
 100ac6c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 100ac70:	d81b      	bhi.n	100acaa <_malloc_r+0x532>
 100ac72:	ea4f 31dc 	mov.w	r1, ip, lsr #15
 100ac76:	f101 0378 	add.w	r3, r1, #120	; 0x78
 100ac7a:	3177      	adds	r1, #119	; 0x77
 100ac7c:	00db      	lsls	r3, r3, #3
 100ac7e:	e74b      	b.n	100ab18 <_malloc_r+0x3a0>
 100ac80:	f240 5254 	movw	r2, #1364	; 0x554
 100ac84:	4293      	cmp	r3, r2
 100ac86:	d81f      	bhi.n	100acc8 <_malloc_r+0x550>
 100ac88:	0cab      	lsrs	r3, r5, #18
 100ac8a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 100ac8e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 100ac92:	00c3      	lsls	r3, r0, #3
 100ac94:	e5c0      	b.n	100a818 <_malloc_r+0xa0>
 100ac96:	f104 0108 	add.w	r1, r4, #8
 100ac9a:	4638      	mov	r0, r7
 100ac9c:	f004 fa98 	bl	100f1d0 <_free_r>
 100aca0:	68b4      	ldr	r4, [r6, #8]
 100aca2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100aca6:	6861      	ldr	r1, [r4, #4]
 100aca8:	e69f      	b.n	100a9ea <_malloc_r+0x272>
 100acaa:	f240 5354 	movw	r3, #1364	; 0x554
 100acae:	4299      	cmp	r1, r3
 100acb0:	bf9b      	ittet	ls
 100acb2:	ea4f 419c 	movls.w	r1, ip, lsr #18
 100acb6:	f101 037d 	addls.w	r3, r1, #125	; 0x7d
 100acba:	f44f 737e 	movhi.w	r3, #1016	; 0x3f8
 100acbe:	317c      	addls	r1, #124	; 0x7c
 100acc0:	bf8c      	ite	hi
 100acc2:	217e      	movhi	r1, #126	; 0x7e
 100acc4:	00db      	lslls	r3, r3, #3
 100acc6:	e727      	b.n	100ab18 <_malloc_r+0x3a0>
 100acc8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 100accc:	207f      	movs	r0, #127	; 0x7f
 100acce:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 100acd2:	e5a1      	b.n	100a818 <_malloc_r+0xa0>
 100acd4:	6873      	ldr	r3, [r6, #4]
 100acd6:	e789      	b.n	100abec <_malloc_r+0x474>
 100acd8:	010139c4 	.word	0x010139c4

0100acdc <_mbtowc_r>:
 100acdc:	b430      	push	{r4, r5}
 100acde:	f243 4400 	movw	r4, #13312	; 0x3400
 100ace2:	f2c0 1401 	movt	r4, #257	; 0x101
 100ace6:	f643 0530 	movw	r5, #14384	; 0x3830
 100acea:	f2c0 1501 	movt	r5, #257	; 0x101
 100acee:	6824      	ldr	r4, [r4, #0]
 100acf0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100acf2:	2c00      	cmp	r4, #0
 100acf4:	bf08      	it	eq
 100acf6:	462c      	moveq	r4, r5
 100acf8:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 100acfc:	46a4      	mov	ip, r4
 100acfe:	bc30      	pop	{r4, r5}
 100ad00:	4760      	bx	ip
 100ad02:	bf00      	nop

0100ad04 <__ascii_mbtowc>:
 100ad04:	b082      	sub	sp, #8
 100ad06:	b151      	cbz	r1, 100ad1e <__ascii_mbtowc+0x1a>
 100ad08:	4610      	mov	r0, r2
 100ad0a:	b132      	cbz	r2, 100ad1a <__ascii_mbtowc+0x16>
 100ad0c:	b14b      	cbz	r3, 100ad22 <__ascii_mbtowc+0x1e>
 100ad0e:	7813      	ldrb	r3, [r2, #0]
 100ad10:	600b      	str	r3, [r1, #0]
 100ad12:	7812      	ldrb	r2, [r2, #0]
 100ad14:	1c10      	adds	r0, r2, #0
 100ad16:	bf18      	it	ne
 100ad18:	2001      	movne	r0, #1
 100ad1a:	b002      	add	sp, #8
 100ad1c:	4770      	bx	lr
 100ad1e:	a901      	add	r1, sp, #4
 100ad20:	e7f2      	b.n	100ad08 <__ascii_mbtowc+0x4>
 100ad22:	f06f 0001 	mvn.w	r0, #1
 100ad26:	e7f8      	b.n	100ad1a <__ascii_mbtowc+0x16>

0100ad28 <__utf8_mbtowc>:
 100ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 100ad2a:	b083      	sub	sp, #12
 100ad2c:	4607      	mov	r7, r0
 100ad2e:	9c08      	ldr	r4, [sp, #32]
 100ad30:	2900      	cmp	r1, #0
 100ad32:	d035      	beq.n	100ada0 <__utf8_mbtowc+0x78>
 100ad34:	4610      	mov	r0, r2
 100ad36:	b34a      	cbz	r2, 100ad8c <__utf8_mbtowc+0x64>
 100ad38:	2b00      	cmp	r3, #0
 100ad3a:	f000 80db 	beq.w	100aef4 <__utf8_mbtowc+0x1cc>
 100ad3e:	6826      	ldr	r6, [r4, #0]
 100ad40:	bb36      	cbnz	r6, 100ad90 <__utf8_mbtowc+0x68>
 100ad42:	7810      	ldrb	r0, [r2, #0]
 100ad44:	2501      	movs	r5, #1
 100ad46:	b338      	cbz	r0, 100ad98 <__utf8_mbtowc+0x70>
 100ad48:	287f      	cmp	r0, #127	; 0x7f
 100ad4a:	dd66      	ble.n	100ae1a <__utf8_mbtowc+0xf2>
 100ad4c:	f1a0 0cc0 	sub.w	ip, r0, #192	; 0xc0
 100ad50:	f1bc 0f1f 	cmp.w	ip, #31
 100ad54:	d826      	bhi.n	100ada4 <__utf8_mbtowc+0x7c>
 100ad56:	7120      	strb	r0, [r4, #4]
 100ad58:	b926      	cbnz	r6, 100ad64 <__utf8_mbtowc+0x3c>
 100ad5a:	2601      	movs	r6, #1
 100ad5c:	42b3      	cmp	r3, r6
 100ad5e:	6026      	str	r6, [r4, #0]
 100ad60:	f240 80c8 	bls.w	100aef4 <__utf8_mbtowc+0x1cc>
 100ad64:	5d52      	ldrb	r2, [r2, r5]
 100ad66:	3501      	adds	r5, #1
 100ad68:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100ad6c:	2b3f      	cmp	r3, #63	; 0x3f
 100ad6e:	f200 80c7 	bhi.w	100af00 <__utf8_mbtowc+0x1d8>
 100ad72:	28c1      	cmp	r0, #193	; 0xc1
 100ad74:	f340 80c4 	ble.w	100af00 <__utf8_mbtowc+0x1d8>
 100ad78:	0183      	lsls	r3, r0, #6
 100ad7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100ad7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 100ad82:	4628      	mov	r0, r5
 100ad84:	4313      	orrs	r3, r2
 100ad86:	2200      	movs	r2, #0
 100ad88:	6022      	str	r2, [r4, #0]
 100ad8a:	600b      	str	r3, [r1, #0]
 100ad8c:	b003      	add	sp, #12
 100ad8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100ad90:	7920      	ldrb	r0, [r4, #4]
 100ad92:	2500      	movs	r5, #0
 100ad94:	2800      	cmp	r0, #0
 100ad96:	d1d7      	bne.n	100ad48 <__utf8_mbtowc+0x20>
 100ad98:	6008      	str	r0, [r1, #0]
 100ad9a:	6020      	str	r0, [r4, #0]
 100ad9c:	b003      	add	sp, #12
 100ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100ada0:	a901      	add	r1, sp, #4
 100ada2:	e7c7      	b.n	100ad34 <__utf8_mbtowc+0xc>
 100ada4:	f1a0 0ce0 	sub.w	ip, r0, #224	; 0xe0
 100ada8:	f1bc 0f0f 	cmp.w	ip, #15
 100adac:	d83b      	bhi.n	100ae26 <__utf8_mbtowc+0xfe>
 100adae:	7120      	strb	r0, [r4, #4]
 100adb0:	2e00      	cmp	r6, #0
 100adb2:	f000 8088 	beq.w	100aec6 <__utf8_mbtowc+0x19e>
 100adb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 100adba:	bf18      	it	ne
 100adbc:	3301      	addne	r3, #1
 100adbe:	2e01      	cmp	r6, #1
 100adc0:	bf18      	it	ne
 100adc2:	f894 c005 	ldrbne.w	ip, [r4, #5]
 100adc6:	f000 8082 	beq.w	100aece <__utf8_mbtowc+0x1a6>
 100adca:	f1bc 0f9f 	cmp.w	ip, #159	; 0x9f
 100adce:	bfd8      	it	le
 100add0:	28e0      	cmple	r0, #224	; 0xe0
 100add2:	f000 8095 	beq.w	100af00 <__utf8_mbtowc+0x1d8>
 100add6:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 100adda:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100adde:	f200 808f 	bhi.w	100af00 <__utf8_mbtowc+0x1d8>
 100ade2:	2e01      	cmp	r6, #1
 100ade4:	f884 c005 	strb.w	ip, [r4, #5]
 100ade8:	d07f      	beq.n	100aeea <__utf8_mbtowc+0x1c2>
 100adea:	5d53      	ldrb	r3, [r2, r5]
 100adec:	3501      	adds	r5, #1
 100adee:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 100adf2:	2a3f      	cmp	r2, #63	; 0x3f
 100adf4:	f200 8084 	bhi.w	100af00 <__utf8_mbtowc+0x1d8>
 100adf8:	0300      	lsls	r0, r0, #12
 100adfa:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 100adfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 100ae02:	f40c 6c7c 	and.w	ip, ip, #4032	; 0xfc0
 100ae06:	b283      	uxth	r3, r0
 100ae08:	4628      	mov	r0, r5
 100ae0a:	ea43 0c0c 	orr.w	ip, r3, ip
 100ae0e:	2500      	movs	r5, #0
 100ae10:	ea4c 0202 	orr.w	r2, ip, r2
 100ae14:	6025      	str	r5, [r4, #0]
 100ae16:	600a      	str	r2, [r1, #0]
 100ae18:	e7b8      	b.n	100ad8c <__utf8_mbtowc+0x64>
 100ae1a:	2300      	movs	r3, #0
 100ae1c:	6023      	str	r3, [r4, #0]
 100ae1e:	6008      	str	r0, [r1, #0]
 100ae20:	2001      	movs	r0, #1
 100ae22:	b003      	add	sp, #12
 100ae24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100ae26:	f1a0 0cf0 	sub.w	ip, r0, #240	; 0xf0
 100ae2a:	f1bc 0f04 	cmp.w	ip, #4
 100ae2e:	d867      	bhi.n	100af00 <__utf8_mbtowc+0x1d8>
 100ae30:	7120      	strb	r0, [r4, #4]
 100ae32:	2e00      	cmp	r6, #0
 100ae34:	d050      	beq.n	100aed8 <__utf8_mbtowc+0x1b0>
 100ae36:	f1b3 3fff 	cmp.w	r3, #4294967295
 100ae3a:	bf18      	it	ne
 100ae3c:	3301      	addne	r3, #1
 100ae3e:	2e01      	cmp	r6, #1
 100ae40:	bf18      	it	ne
 100ae42:	f894 c005 	ldrbne.w	ip, [r4, #5]
 100ae46:	d04b      	beq.n	100aee0 <__utf8_mbtowc+0x1b8>
 100ae48:	28f0      	cmp	r0, #240	; 0xf0
 100ae4a:	d056      	beq.n	100aefa <__utf8_mbtowc+0x1d2>
 100ae4c:	f1a0 0ef4 	sub.w	lr, r0, #244	; 0xf4
 100ae50:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 100ae54:	fabe fe8e 	clz	lr, lr
 100ae58:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 100ae5c:	bfd8      	it	le
 100ae5e:	f04f 0e00 	movle.w	lr, #0
 100ae62:	f1be 0f00 	cmp.w	lr, #0
 100ae66:	d14b      	bne.n	100af00 <__utf8_mbtowc+0x1d8>
 100ae68:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 100ae6c:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100ae70:	d846      	bhi.n	100af00 <__utf8_mbtowc+0x1d8>
 100ae72:	2e01      	cmp	r6, #1
 100ae74:	f884 c005 	strb.w	ip, [r4, #5]
 100ae78:	d047      	beq.n	100af0a <__utf8_mbtowc+0x1e2>
 100ae7a:	1c5e      	adds	r6, r3, #1
 100ae7c:	6826      	ldr	r6, [r4, #0]
 100ae7e:	bf18      	it	ne
 100ae80:	3301      	addne	r3, #1
 100ae82:	2e02      	cmp	r6, #2
 100ae84:	d045      	beq.n	100af12 <__utf8_mbtowc+0x1ea>
 100ae86:	79a6      	ldrb	r6, [r4, #6]
 100ae88:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
 100ae8c:	2b3f      	cmp	r3, #63	; 0x3f
 100ae8e:	d837      	bhi.n	100af00 <__utf8_mbtowc+0x1d8>
 100ae90:	5d52      	ldrb	r2, [r2, r5]
 100ae92:	3501      	adds	r5, #1
 100ae94:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100ae98:	2b3f      	cmp	r3, #63	; 0x3f
 100ae9a:	d831      	bhi.n	100af00 <__utf8_mbtowc+0x1d8>
 100ae9c:	0483      	lsls	r3, r0, #18
 100ae9e:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
 100aea2:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 100aea6:	f40c 3c7c 	and.w	ip, ip, #258048	; 0x3f000
 100aeaa:	01b0      	lsls	r0, r6, #6
 100aeac:	ea43 030c 	orr.w	r3, r3, ip
 100aeb0:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
 100aeb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100aeb8:	4303      	orrs	r3, r0
 100aeba:	4628      	mov	r0, r5
 100aebc:	4313      	orrs	r3, r2
 100aebe:	2200      	movs	r2, #0
 100aec0:	600b      	str	r3, [r1, #0]
 100aec2:	6022      	str	r2, [r4, #0]
 100aec4:	e762      	b.n	100ad8c <__utf8_mbtowc+0x64>
 100aec6:	2601      	movs	r6, #1
 100aec8:	42b3      	cmp	r3, r6
 100aeca:	6026      	str	r6, [r4, #0]
 100aecc:	d912      	bls.n	100aef4 <__utf8_mbtowc+0x1cc>
 100aece:	f812 c005 	ldrb.w	ip, [r2, r5]
 100aed2:	2601      	movs	r6, #1
 100aed4:	4435      	add	r5, r6
 100aed6:	e778      	b.n	100adca <__utf8_mbtowc+0xa2>
 100aed8:	2601      	movs	r6, #1
 100aeda:	42b3      	cmp	r3, r6
 100aedc:	6026      	str	r6, [r4, #0]
 100aede:	d909      	bls.n	100aef4 <__utf8_mbtowc+0x1cc>
 100aee0:	f812 c005 	ldrb.w	ip, [r2, r5]
 100aee4:	2601      	movs	r6, #1
 100aee6:	4435      	add	r5, r6
 100aee8:	e7ae      	b.n	100ae48 <__utf8_mbtowc+0x120>
 100aeea:	2602      	movs	r6, #2
 100aeec:	42b3      	cmp	r3, r6
 100aeee:	6026      	str	r6, [r4, #0]
 100aef0:	f47f af7b 	bne.w	100adea <__utf8_mbtowc+0xc2>
 100aef4:	f06f 0001 	mvn.w	r0, #1
 100aef8:	e748      	b.n	100ad8c <__utf8_mbtowc+0x64>
 100aefa:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 100aefe:	dcb3      	bgt.n	100ae68 <__utf8_mbtowc+0x140>
 100af00:	238a      	movs	r3, #138	; 0x8a
 100af02:	f04f 30ff 	mov.w	r0, #4294967295
 100af06:	603b      	str	r3, [r7, #0]
 100af08:	e740      	b.n	100ad8c <__utf8_mbtowc+0x64>
 100af0a:	2602      	movs	r6, #2
 100af0c:	42b3      	cmp	r3, r6
 100af0e:	6026      	str	r6, [r4, #0]
 100af10:	d0f0      	beq.n	100aef4 <__utf8_mbtowc+0x1cc>
 100af12:	5d56      	ldrb	r6, [r2, r5]
 100af14:	3501      	adds	r5, #1
 100af16:	f1a6 0e80 	sub.w	lr, r6, #128	; 0x80
 100af1a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100af1e:	d8ef      	bhi.n	100af00 <__utf8_mbtowc+0x1d8>
 100af20:	f04f 0e03 	mov.w	lr, #3
 100af24:	4573      	cmp	r3, lr
 100af26:	71a6      	strb	r6, [r4, #6]
 100af28:	f8c4 e000 	str.w	lr, [r4]
 100af2c:	d1b0      	bne.n	100ae90 <__utf8_mbtowc+0x168>
 100af2e:	e7e1      	b.n	100aef4 <__utf8_mbtowc+0x1cc>

0100af30 <__sjis_mbtowc>:
 100af30:	b4f0      	push	{r4, r5, r6, r7}
 100af32:	b082      	sub	sp, #8
 100af34:	4606      	mov	r6, r0
 100af36:	9f06      	ldr	r7, [sp, #24]
 100af38:	2900      	cmp	r1, #0
 100af3a:	d035      	beq.n	100afa8 <__sjis_mbtowc+0x78>
 100af3c:	4610      	mov	r0, r2
 100af3e:	b332      	cbz	r2, 100af8e <__sjis_mbtowc+0x5e>
 100af40:	2b00      	cmp	r3, #0
 100af42:	d033      	beq.n	100afac <__sjis_mbtowc+0x7c>
 100af44:	6838      	ldr	r0, [r7, #0]
 100af46:	7814      	ldrb	r4, [r2, #0]
 100af48:	bb20      	cbnz	r0, 100af94 <__sjis_mbtowc+0x64>
 100af4a:	f1a4 0581 	sub.w	r5, r4, #129	; 0x81
 100af4e:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
 100af52:	280f      	cmp	r0, #15
 100af54:	bf88      	it	hi
 100af56:	2d1e      	cmphi	r5, #30
 100af58:	d81e      	bhi.n	100af98 <__sjis_mbtowc+0x68>
 100af5a:	2001      	movs	r0, #1
 100af5c:	4283      	cmp	r3, r0
 100af5e:	713c      	strb	r4, [r7, #4]
 100af60:	6038      	str	r0, [r7, #0]
 100af62:	d923      	bls.n	100afac <__sjis_mbtowc+0x7c>
 100af64:	7854      	ldrb	r4, [r2, #1]
 100af66:	2002      	movs	r0, #2
 100af68:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 100af6c:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
 100af70:	2a7c      	cmp	r2, #124	; 0x7c
 100af72:	bf88      	it	hi
 100af74:	2b3e      	cmphi	r3, #62	; 0x3e
 100af76:	bf95      	itete	ls
 100af78:	793a      	ldrbls	r2, [r7, #4]
 100af7a:	f04f 30ff 	movhi.w	r0, #4294967295
 100af7e:	2300      	movls	r3, #0
 100af80:	238a      	movhi	r3, #138	; 0x8a
 100af82:	bf8f      	iteee	hi
 100af84:	6033      	strhi	r3, [r6, #0]
 100af86:	eb04 2402 	addls.w	r4, r4, r2, lsl #8
 100af8a:	600c      	strls	r4, [r1, #0]
 100af8c:	603b      	strls	r3, [r7, #0]
 100af8e:	b002      	add	sp, #8
 100af90:	bcf0      	pop	{r4, r5, r6, r7}
 100af92:	4770      	bx	lr
 100af94:	2801      	cmp	r0, #1
 100af96:	d0e7      	beq.n	100af68 <__sjis_mbtowc+0x38>
 100af98:	600c      	str	r4, [r1, #0]
 100af9a:	7810      	ldrb	r0, [r2, #0]
 100af9c:	3000      	adds	r0, #0
 100af9e:	bf18      	it	ne
 100afa0:	2001      	movne	r0, #1
 100afa2:	b002      	add	sp, #8
 100afa4:	bcf0      	pop	{r4, r5, r6, r7}
 100afa6:	4770      	bx	lr
 100afa8:	a901      	add	r1, sp, #4
 100afaa:	e7c7      	b.n	100af3c <__sjis_mbtowc+0xc>
 100afac:	f06f 0001 	mvn.w	r0, #1
 100afb0:	e7ed      	b.n	100af8e <__sjis_mbtowc+0x5e>
 100afb2:	bf00      	nop

0100afb4 <__eucjp_mbtowc>:
 100afb4:	b4f0      	push	{r4, r5, r6, r7}
 100afb6:	b082      	sub	sp, #8
 100afb8:	4607      	mov	r7, r0
 100afba:	9e06      	ldr	r6, [sp, #24]
 100afbc:	2900      	cmp	r1, #0
 100afbe:	d040      	beq.n	100b042 <__eucjp_mbtowc+0x8e>
 100afc0:	4610      	mov	r0, r2
 100afc2:	b37a      	cbz	r2, 100b024 <__eucjp_mbtowc+0x70>
 100afc4:	2b00      	cmp	r3, #0
 100afc6:	d048      	beq.n	100b05a <__eucjp_mbtowc+0xa6>
 100afc8:	6830      	ldr	r0, [r6, #0]
 100afca:	7814      	ldrb	r4, [r2, #0]
 100afcc:	bb68      	cbnz	r0, 100b02a <__eucjp_mbtowc+0x76>
 100afce:	f1a4 058e 	sub.w	r5, r4, #142	; 0x8e
 100afd2:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
 100afd6:	285d      	cmp	r0, #93	; 0x5d
 100afd8:	bf88      	it	hi
 100afda:	2d01      	cmphi	r5, #1
 100afdc:	d829      	bhi.n	100b032 <__eucjp_mbtowc+0x7e>
 100afde:	2001      	movs	r0, #1
 100afe0:	4283      	cmp	r3, r0
 100afe2:	7134      	strb	r4, [r6, #4]
 100afe4:	6030      	str	r0, [r6, #0]
 100afe6:	d938      	bls.n	100b05a <__eucjp_mbtowc+0xa6>
 100afe8:	7854      	ldrb	r4, [r2, #1]
 100afea:	2002      	movs	r0, #2
 100afec:	f1a4 05a1 	sub.w	r5, r4, #161	; 0xa1
 100aff0:	2d5d      	cmp	r5, #93	; 0x5d
 100aff2:	d835      	bhi.n	100b060 <__eucjp_mbtowc+0xac>
 100aff4:	7935      	ldrb	r5, [r6, #4]
 100aff6:	2d8f      	cmp	r5, #143	; 0x8f
 100aff8:	d125      	bne.n	100b046 <__eucjp_mbtowc+0x92>
 100affa:	4298      	cmp	r0, r3
 100affc:	7174      	strb	r4, [r6, #5]
 100affe:	f04f 0402 	mov.w	r4, #2
 100b002:	6034      	str	r4, [r6, #0]
 100b004:	4604      	mov	r4, r0
 100b006:	d228      	bcs.n	100b05a <__eucjp_mbtowc+0xa6>
 100b008:	5d14      	ldrb	r4, [r2, r4]
 100b00a:	3001      	adds	r0, #1
 100b00c:	f1a4 03a1 	sub.w	r3, r4, #161	; 0xa1
 100b010:	2b5d      	cmp	r3, #93	; 0x5d
 100b012:	d825      	bhi.n	100b060 <__eucjp_mbtowc+0xac>
 100b014:	7972      	ldrb	r2, [r6, #5]
 100b016:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 100b01a:	2300      	movs	r3, #0
 100b01c:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 100b020:	600c      	str	r4, [r1, #0]
 100b022:	6033      	str	r3, [r6, #0]
 100b024:	b002      	add	sp, #8
 100b026:	bcf0      	pop	{r4, r5, r6, r7}
 100b028:	4770      	bx	lr
 100b02a:	2801      	cmp	r0, #1
 100b02c:	d0de      	beq.n	100afec <__eucjp_mbtowc+0x38>
 100b02e:	2802      	cmp	r0, #2
 100b030:	d011      	beq.n	100b056 <__eucjp_mbtowc+0xa2>
 100b032:	600c      	str	r4, [r1, #0]
 100b034:	7810      	ldrb	r0, [r2, #0]
 100b036:	3000      	adds	r0, #0
 100b038:	bf18      	it	ne
 100b03a:	2001      	movne	r0, #1
 100b03c:	b002      	add	sp, #8
 100b03e:	bcf0      	pop	{r4, r5, r6, r7}
 100b040:	4770      	bx	lr
 100b042:	a901      	add	r1, sp, #4
 100b044:	e7bc      	b.n	100afc0 <__eucjp_mbtowc+0xc>
 100b046:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 100b04a:	2300      	movs	r3, #0
 100b04c:	600c      	str	r4, [r1, #0]
 100b04e:	6033      	str	r3, [r6, #0]
 100b050:	b002      	add	sp, #8
 100b052:	bcf0      	pop	{r4, r5, r6, r7}
 100b054:	4770      	bx	lr
 100b056:	2001      	movs	r0, #1
 100b058:	e7d8      	b.n	100b00c <__eucjp_mbtowc+0x58>
 100b05a:	f06f 0001 	mvn.w	r0, #1
 100b05e:	e7e1      	b.n	100b024 <__eucjp_mbtowc+0x70>
 100b060:	238a      	movs	r3, #138	; 0x8a
 100b062:	f04f 30ff 	mov.w	r0, #4294967295
 100b066:	603b      	str	r3, [r7, #0]
 100b068:	e7dc      	b.n	100b024 <__eucjp_mbtowc+0x70>
 100b06a:	bf00      	nop

0100b06c <__jis_mbtowc>:
 100b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100b070:	b083      	sub	sp, #12
 100b072:	4682      	mov	sl, r0
 100b074:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 100b078:	2900      	cmp	r1, #0
 100b07a:	d042      	beq.n	100b102 <__jis_mbtowc+0x96>
 100b07c:	2a00      	cmp	r2, #0
 100b07e:	d043      	beq.n	100b108 <__jis_mbtowc+0x9c>
 100b080:	2b00      	cmp	r3, #0
 100b082:	d07d      	beq.n	100b180 <__jis_mbtowc+0x114>
 100b084:	f89e 4000 	ldrb.w	r4, [lr]
 100b088:	4610      	mov	r0, r2
 100b08a:	f241 6794 	movw	r7, #5780	; 0x1694
 100b08e:	3a01      	subs	r2, #1
 100b090:	f1c0 0801 	rsb	r8, r0, #1
 100b094:	f2c0 1701 	movt	r7, #257	; 0x101
 100b098:	7855      	ldrb	r5, [r2, #1]
 100b09a:	eb02 0c08 	add.w	ip, r2, r8
 100b09e:	f102 0b01 	add.w	fp, r2, #1
 100b0a2:	2d28      	cmp	r5, #40	; 0x28
 100b0a4:	d06a      	beq.n	100b17c <__jis_mbtowc+0x110>
 100b0a6:	d81d      	bhi.n	100b0e4 <__jis_mbtowc+0x78>
 100b0a8:	2d1b      	cmp	r5, #27
 100b0aa:	bf08      	it	eq
 100b0ac:	2600      	moveq	r6, #0
 100b0ae:	d00a      	beq.n	100b0c6 <__jis_mbtowc+0x5a>
 100b0b0:	2d24      	cmp	r5, #36	; 0x24
 100b0b2:	bf08      	it	eq
 100b0b4:	2601      	moveq	r6, #1
 100b0b6:	d006      	beq.n	100b0c6 <__jis_mbtowc+0x5a>
 100b0b8:	b30d      	cbz	r5, 100b0fe <__jis_mbtowc+0x92>
 100b0ba:	f1a5 0621 	sub.w	r6, r5, #33	; 0x21
 100b0be:	2e5e      	cmp	r6, #94	; 0x5e
 100b0c0:	bf34      	ite	cc
 100b0c2:	2607      	movcc	r6, #7
 100b0c4:	2608      	movcs	r6, #8
 100b0c6:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 100b0ca:	443c      	add	r4, r7
 100b0cc:	eb04 0906 	add.w	r9, r4, r6
 100b0d0:	5da4      	ldrb	r4, [r4, r6]
 100b0d2:	f899 6048 	ldrb.w	r6, [r9, #72]	; 0x48
 100b0d6:	2e05      	cmp	r6, #5
 100b0d8:	d855      	bhi.n	100b186 <__jis_mbtowc+0x11a>
 100b0da:	e8df f006 	tbb	[pc, r6]
 100b0de:	2d23      	.short	0x2d23
 100b0e0:	1b4c4839 	.word	0x1b4c4839
 100b0e4:	2d42      	cmp	r5, #66	; 0x42
 100b0e6:	bf08      	it	eq
 100b0e8:	2604      	moveq	r6, #4
 100b0ea:	d0ec      	beq.n	100b0c6 <__jis_mbtowc+0x5a>
 100b0ec:	2d4a      	cmp	r5, #74	; 0x4a
 100b0ee:	bf08      	it	eq
 100b0f0:	2605      	moveq	r6, #5
 100b0f2:	d0e8      	beq.n	100b0c6 <__jis_mbtowc+0x5a>
 100b0f4:	2d40      	cmp	r5, #64	; 0x40
 100b0f6:	bf08      	it	eq
 100b0f8:	2603      	moveq	r6, #3
 100b0fa:	d1de      	bne.n	100b0ba <__jis_mbtowc+0x4e>
 100b0fc:	e7e3      	b.n	100b0c6 <__jis_mbtowc+0x5a>
 100b0fe:	2606      	movs	r6, #6
 100b100:	e7e1      	b.n	100b0c6 <__jis_mbtowc+0x5a>
 100b102:	a901      	add	r1, sp, #4
 100b104:	2a00      	cmp	r2, #0
 100b106:	d1bb      	bne.n	100b080 <__jis_mbtowc+0x14>
 100b108:	2001      	movs	r0, #1
 100b10a:	f8ce 2000 	str.w	r2, [lr]
 100b10e:	b003      	add	sp, #12
 100b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b114:	2300      	movs	r3, #0
 100b116:	f8ce 3000 	str.w	r3, [lr]
 100b11a:	4618      	mov	r0, r3
 100b11c:	600b      	str	r3, [r1, #0]
 100b11e:	b003      	add	sp, #12
 100b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b124:	2300      	movs	r3, #0
 100b126:	f8ce 3000 	str.w	r3, [lr]
 100b12a:	7803      	ldrb	r3, [r0, #0]
 100b12c:	f10c 0001 	add.w	r0, ip, #1
 100b130:	600b      	str	r3, [r1, #0]
 100b132:	b003      	add	sp, #12
 100b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b138:	f88e 5004 	strb.w	r5, [lr, #4]
 100b13c:	eb0b 0508 	add.w	r5, fp, r8
 100b140:	429d      	cmp	r5, r3
 100b142:	465a      	mov	r2, fp
 100b144:	d3a8      	bcc.n	100b098 <__jis_mbtowc+0x2c>
 100b146:	f8ce 4000 	str.w	r4, [lr]
 100b14a:	f06f 0001 	mvn.w	r0, #1
 100b14e:	e7e6      	b.n	100b11e <__jis_mbtowc+0xb2>
 100b150:	f89e 2004 	ldrb.w	r2, [lr, #4]
 100b154:	2301      	movs	r3, #1
 100b156:	f8ce 3000 	str.w	r3, [lr]
 100b15a:	eb0c 0003 	add.w	r0, ip, r3
 100b15e:	f89b 3000 	ldrb.w	r3, [fp]
 100b162:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 100b166:	600b      	str	r3, [r1, #0]
 100b168:	b003      	add	sp, #12
 100b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b16e:	1c90      	adds	r0, r2, #2
 100b170:	eb0b 0508 	add.w	r5, fp, r8
 100b174:	e7e4      	b.n	100b140 <__jis_mbtowc+0xd4>
 100b176:	eb0b 0508 	add.w	r5, fp, r8
 100b17a:	e7e1      	b.n	100b140 <__jis_mbtowc+0xd4>
 100b17c:	2602      	movs	r6, #2
 100b17e:	e7a2      	b.n	100b0c6 <__jis_mbtowc+0x5a>
 100b180:	f06f 0001 	mvn.w	r0, #1
 100b184:	e7cb      	b.n	100b11e <__jis_mbtowc+0xb2>
 100b186:	238a      	movs	r3, #138	; 0x8a
 100b188:	f04f 30ff 	mov.w	r0, #4294967295
 100b18c:	f8ca 3000 	str.w	r3, [sl]
 100b190:	e7c5      	b.n	100b11e <__jis_mbtowc+0xb2>
 100b192:	bf00      	nop
	...

0100b1c0 <memcpy>:
 100b1c0:	e1a0c000 	mov	ip, r0
 100b1c4:	e3520040 	cmp	r2, #64	; 0x40
 100b1c8:	aa000028 	bge	100b270 <memcpy+0xb0>
 100b1cc:	e202303c 	and	r3, r2, #60	; 0x3c
 100b1d0:	e08cc003 	add	ip, ip, r3
 100b1d4:	e0811003 	add	r1, r1, r3
 100b1d8:	e263303a 	rsb	r3, r3, #58	; 0x3a
 100b1dc:	e08ff083 	add	pc, pc, r3, lsl #1
 100b1e0:	e511303c 	ldr	r3, [r1, #-60]	; 0xffffffc4
 100b1e4:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
 100b1e8:	e5113038 	ldr	r3, [r1, #-56]	; 0xffffffc8
 100b1ec:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
 100b1f0:	e5113034 	ldr	r3, [r1, #-52]	; 0xffffffcc
 100b1f4:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
 100b1f8:	e5113030 	ldr	r3, [r1, #-48]	; 0xffffffd0
 100b1fc:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
 100b200:	e511302c 	ldr	r3, [r1, #-44]	; 0xffffffd4
 100b204:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
 100b208:	e5113028 	ldr	r3, [r1, #-40]	; 0xffffffd8
 100b20c:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
 100b210:	e5113024 	ldr	r3, [r1, #-36]	; 0xffffffdc
 100b214:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
 100b218:	e5113020 	ldr	r3, [r1, #-32]	; 0xffffffe0
 100b21c:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
 100b220:	e511301c 	ldr	r3, [r1, #-28]	; 0xffffffe4
 100b224:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
 100b228:	e5113018 	ldr	r3, [r1, #-24]	; 0xffffffe8
 100b22c:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
 100b230:	e5113014 	ldr	r3, [r1, #-20]	; 0xffffffec
 100b234:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
 100b238:	e5113010 	ldr	r3, [r1, #-16]
 100b23c:	e50c3010 	str	r3, [ip, #-16]
 100b240:	e511300c 	ldr	r3, [r1, #-12]
 100b244:	e50c300c 	str	r3, [ip, #-12]
 100b248:	e5113008 	ldr	r3, [r1, #-8]
 100b24c:	e50c3008 	str	r3, [ip, #-8]
 100b250:	e5113004 	ldr	r3, [r1, #-4]
 100b254:	e50c3004 	str	r3, [ip, #-4]
 100b258:	e1b02f82 	lsls	r2, r2, #31
 100b25c:	20d130b2 	ldrhcs	r3, [r1], #2
 100b260:	15d11000 	ldrbne	r1, [r1]
 100b264:	20cc30b2 	strhcs	r3, [ip], #2
 100b268:	15cc1000 	strbne	r1, [ip]
 100b26c:	e12fff1e 	bx	lr
 100b270:	e52da020 	str	sl, [sp, #-32]!	; 0xffffffe0
 100b274:	e201a007 	and	sl, r1, #7
 100b278:	e20c3007 	and	r3, ip, #7
 100b27c:	e153000a 	cmp	r3, sl
 100b280:	1a0000f1 	bne	100b64c <memcpy+0x48c>
 100b284:	eeb00a40 	vmov.f32	s0, s0
 100b288:	e1b0ae8c 	lsls	sl, ip, #29
 100b28c:	0a000008 	beq	100b2b4 <memcpy+0xf4>
 100b290:	e27aa000 	rsbs	sl, sl, #0
 100b294:	e0422eaa 	sub	r2, r2, sl, lsr #29
 100b298:	44913004 	ldrmi	r3, [r1], #4
 100b29c:	448c3004 	strmi	r3, [ip], #4
 100b2a0:	e1b0a10a 	lsls	sl, sl, #2
 100b2a4:	20d130b2 	ldrhcs	r3, [r1], #2
 100b2a8:	14d1a001 	ldrbne	sl, [r1], #1
 100b2ac:	20cc30b2 	strhcs	r3, [ip], #2
 100b2b0:	14cca001 	strbne	sl, [ip], #1
 100b2b4:	e252a040 	subs	sl, r2, #64	; 0x40
 100b2b8:	ba000017 	blt	100b31c <memcpy+0x15c>
 100b2bc:	e35a0c02 	cmp	sl, #512	; 0x200
 100b2c0:	aa000032 	bge	100b390 <memcpy+0x1d0>
 100b2c4:	ed910b00 	vldr	d0, [r1]
 100b2c8:	e25aa040 	subs	sl, sl, #64	; 0x40
 100b2cc:	ed911b02 	vldr	d1, [r1, #8]
 100b2d0:	ed8c0b00 	vstr	d0, [ip]
 100b2d4:	ed910b04 	vldr	d0, [r1, #16]
 100b2d8:	ed8c1b02 	vstr	d1, [ip, #8]
 100b2dc:	ed911b06 	vldr	d1, [r1, #24]
 100b2e0:	ed8c0b04 	vstr	d0, [ip, #16]
 100b2e4:	ed910b08 	vldr	d0, [r1, #32]
 100b2e8:	ed8c1b06 	vstr	d1, [ip, #24]
 100b2ec:	ed911b0a 	vldr	d1, [r1, #40]	; 0x28
 100b2f0:	ed8c0b08 	vstr	d0, [ip, #32]
 100b2f4:	ed910b0c 	vldr	d0, [r1, #48]	; 0x30
 100b2f8:	ed8c1b0a 	vstr	d1, [ip, #40]	; 0x28
 100b2fc:	ed911b0e 	vldr	d1, [r1, #56]	; 0x38
 100b300:	ed8c0b0c 	vstr	d0, [ip, #48]	; 0x30
 100b304:	e2811040 	add	r1, r1, #64	; 0x40
 100b308:	ed8c1b0e 	vstr	d1, [ip, #56]	; 0x38
 100b30c:	e28cc040 	add	ip, ip, #64	; 0x40
 100b310:	aaffffeb 	bge	100b2c4 <memcpy+0x104>
 100b314:	e31a003f 	tst	sl, #63	; 0x3f
 100b318:	0a00001a 	beq	100b388 <memcpy+0x1c8>
 100b31c:	e20a3038 	and	r3, sl, #56	; 0x38
 100b320:	e08cc003 	add	ip, ip, r3
 100b324:	e0811003 	add	r1, r1, r3
 100b328:	e2633034 	rsb	r3, r3, #52	; 0x34
 100b32c:	e08ff003 	add	pc, pc, r3
 100b330:	ed110b0e 	vldr	d0, [r1, #-56]	; 0xffffffc8
 100b334:	ed0c0b0e 	vstr	d0, [ip, #-56]	; 0xffffffc8
 100b338:	ed110b0c 	vldr	d0, [r1, #-48]	; 0xffffffd0
 100b33c:	ed0c0b0c 	vstr	d0, [ip, #-48]	; 0xffffffd0
 100b340:	ed110b0a 	vldr	d0, [r1, #-40]	; 0xffffffd8
 100b344:	ed0c0b0a 	vstr	d0, [ip, #-40]	; 0xffffffd8
 100b348:	ed110b08 	vldr	d0, [r1, #-32]	; 0xffffffe0
 100b34c:	ed0c0b08 	vstr	d0, [ip, #-32]	; 0xffffffe0
 100b350:	ed110b06 	vldr	d0, [r1, #-24]	; 0xffffffe8
 100b354:	ed0c0b06 	vstr	d0, [ip, #-24]	; 0xffffffe8
 100b358:	ed110b04 	vldr	d0, [r1, #-16]
 100b35c:	ed0c0b04 	vstr	d0, [ip, #-16]
 100b360:	ed110b02 	vldr	d0, [r1, #-8]
 100b364:	ed0c0b02 	vstr	d0, [ip, #-8]
 100b368:	e31a0004 	tst	sl, #4
 100b36c:	14913004 	ldrne	r3, [r1], #4
 100b370:	148c3004 	strne	r3, [ip], #4
 100b374:	e1b0af8a 	lsls	sl, sl, #31
 100b378:	20d130b2 	ldrhcs	r3, [r1], #2
 100b37c:	15d1a000 	ldrbne	sl, [r1]
 100b380:	20cc30b2 	strhcs	r3, [ip], #2
 100b384:	15cca000 	strbne	sl, [ip]
 100b388:	e49da020 	ldr	sl, [sp], #32
 100b38c:	e12fff1e 	bx	lr
 100b390:	ed913b00 	vldr	d3, [r1]
 100b394:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100b398:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100b39c:	ed916b30 	vldr	d6, [r1, #192]	; 0xc0
 100b3a0:	ed917b40 	vldr	d7, [r1, #256]	; 0x100
 100b3a4:	ed910b02 	vldr	d0, [r1, #8]
 100b3a8:	ed911b04 	vldr	d1, [r1, #16]
 100b3ac:	ed912b06 	vldr	d2, [r1, #24]
 100b3b0:	e2811020 	add	r1, r1, #32
 100b3b4:	e25aad0a 	subs	sl, sl, #640	; 0x280
 100b3b8:	ba000055 	blt	100b514 <memcpy+0x354>
 100b3bc:	ed8c3b00 	vstr	d3, [ip]
 100b3c0:	ed913b00 	vldr	d3, [r1]
 100b3c4:	ed8c0b02 	vstr	d0, [ip, #8]
 100b3c8:	ed910b02 	vldr	d0, [r1, #8]
 100b3cc:	ed8c1b04 	vstr	d1, [ip, #16]
 100b3d0:	ed911b04 	vldr	d1, [r1, #16]
 100b3d4:	ed8c2b06 	vstr	d2, [ip, #24]
 100b3d8:	ed912b06 	vldr	d2, [r1, #24]
 100b3dc:	ed8c3b08 	vstr	d3, [ip, #32]
 100b3e0:	ed913b48 	vldr	d3, [r1, #288]	; 0x120
 100b3e4:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100b3e8:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100b3ec:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100b3f0:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100b3f4:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100b3f8:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100b3fc:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 100b400:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100b404:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100b408:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100b40c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100b410:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100b414:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100b418:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100b41c:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 100b420:	ed914b58 	vldr	d4, [r1, #352]	; 0x160
 100b424:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100b428:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100b42c:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100b430:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100b434:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100b438:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100b43c:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 100b440:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100b444:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 100b448:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 100b44c:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 100b450:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 100b454:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 100b458:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 100b45c:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 100b460:	ed915b68 	vldr	d5, [r1, #416]	; 0x1a0
 100b464:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 100b468:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 100b46c:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 100b470:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 100b474:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 100b478:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 100b47c:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 100b480:	e28110c0 	add	r1, r1, #192	; 0xc0
 100b484:	ed8c6b00 	vstr	d6, [ip]
 100b488:	ed916b00 	vldr	d6, [r1]
 100b48c:	ed8c0b02 	vstr	d0, [ip, #8]
 100b490:	ed910b02 	vldr	d0, [r1, #8]
 100b494:	ed8c1b04 	vstr	d1, [ip, #16]
 100b498:	ed911b04 	vldr	d1, [r1, #16]
 100b49c:	ed8c2b06 	vstr	d2, [ip, #24]
 100b4a0:	ed912b06 	vldr	d2, [r1, #24]
 100b4a4:	ed8c6b08 	vstr	d6, [ip, #32]
 100b4a8:	ed916b48 	vldr	d6, [r1, #288]	; 0x120
 100b4ac:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100b4b0:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100b4b4:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100b4b8:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100b4bc:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100b4c0:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100b4c4:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 100b4c8:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 100b4cc:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100b4d0:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100b4d4:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100b4d8:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100b4dc:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100b4e0:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100b4e4:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 100b4e8:	ed917b58 	vldr	d7, [r1, #352]	; 0x160
 100b4ec:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100b4f0:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100b4f4:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100b4f8:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100b4fc:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100b500:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100b504:	e28cc080 	add	ip, ip, #128	; 0x80
 100b508:	e2811080 	add	r1, r1, #128	; 0x80
 100b50c:	e25aad05 	subs	sl, sl, #320	; 0x140
 100b510:	aaffffa9 	bge	100b3bc <memcpy+0x1fc>
 100b514:	ed8c3b00 	vstr	d3, [ip]
 100b518:	ed913b00 	vldr	d3, [r1]
 100b51c:	ed8c0b02 	vstr	d0, [ip, #8]
 100b520:	ed910b02 	vldr	d0, [r1, #8]
 100b524:	ed8c1b04 	vstr	d1, [ip, #16]
 100b528:	ed911b04 	vldr	d1, [r1, #16]
 100b52c:	ed8c2b06 	vstr	d2, [ip, #24]
 100b530:	ed912b06 	vldr	d2, [r1, #24]
 100b534:	ed8c3b08 	vstr	d3, [ip, #32]
 100b538:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100b53c:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100b540:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100b544:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100b548:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100b54c:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100b550:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 100b554:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100b558:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100b55c:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100b560:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100b564:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100b568:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100b56c:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100b570:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 100b574:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100b578:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100b57c:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100b580:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100b584:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100b588:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100b58c:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 100b590:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100b594:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 100b598:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 100b59c:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 100b5a0:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 100b5a4:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 100b5a8:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 100b5ac:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 100b5b0:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 100b5b4:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 100b5b8:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 100b5bc:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 100b5c0:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 100b5c4:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 100b5c8:	e28110c0 	add	r1, r1, #192	; 0xc0
 100b5cc:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 100b5d0:	ed8c6b00 	vstr	d6, [ip]
 100b5d4:	ed916b00 	vldr	d6, [r1]
 100b5d8:	ed8c0b02 	vstr	d0, [ip, #8]
 100b5dc:	ed910b02 	vldr	d0, [r1, #8]
 100b5e0:	ed8c1b04 	vstr	d1, [ip, #16]
 100b5e4:	ed911b04 	vldr	d1, [r1, #16]
 100b5e8:	ed8c2b06 	vstr	d2, [ip, #24]
 100b5ec:	ed912b06 	vldr	d2, [r1, #24]
 100b5f0:	ed8c6b08 	vstr	d6, [ip, #32]
 100b5f4:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100b5f8:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100b5fc:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100b600:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100b604:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100b608:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100b60c:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 100b610:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 100b614:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100b618:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100b61c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100b620:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100b624:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100b628:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100b62c:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 100b630:	e2811060 	add	r1, r1, #96	; 0x60
 100b634:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100b638:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100b63c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100b640:	e28cc080 	add	ip, ip, #128	; 0x80
 100b644:	e28aad05 	add	sl, sl, #320	; 0x140
 100b648:	eaffff1d 	b	100b2c4 <memcpy+0x104>
 100b64c:	f5d1f000 	pld	[r1]
 100b650:	f5d1f040 	pld	[r1, #64]	; 0x40
 100b654:	e1b0ae8c 	lsls	sl, ip, #29
 100b658:	f5d1f080 	pld	[r1, #128]	; 0x80
 100b65c:	0a000008 	beq	100b684 <memcpy+0x4c4>
 100b660:	e27aa000 	rsbs	sl, sl, #0
 100b664:	e0422eaa 	sub	r2, r2, sl, lsr #29
 100b668:	44913004 	ldrmi	r3, [r1], #4
 100b66c:	448c3004 	strmi	r3, [ip], #4
 100b670:	e1b0a10a 	lsls	sl, sl, #2
 100b674:	14d13001 	ldrbne	r3, [r1], #1
 100b678:	20d1a0b2 	ldrhcs	sl, [r1], #2
 100b67c:	14cc3001 	strbne	r3, [ip], #1
 100b680:	20cca0b2 	strhcs	sl, [ip], #2
 100b684:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
 100b688:	e2522040 	subs	r2, r2, #64	; 0x40
 100b68c:	449da020 	ldrmi	sl, [sp], #32
 100b690:	4afffecd 	bmi	100b1cc <memcpy+0xc>
 100b694:	f5d1f100 	pld	[r1, #256]	; 0x100
 100b698:	e2411004 	sub	r1, r1, #4
 100b69c:	e24cc008 	sub	ip, ip, #8
 100b6a0:	e252a040 	subs	sl, r2, #64	; 0x40
 100b6a4:	e5912004 	ldr	r2, [r1, #4]
 100b6a8:	e5913008 	ldr	r3, [r1, #8]
 100b6ac:	e1cd40f8 	strd	r4, [sp, #8]
 100b6b0:	e591400c 	ldr	r4, [r1, #12]
 100b6b4:	e5915010 	ldr	r5, [r1, #16]
 100b6b8:	e1cd61f0 	strd	r6, [sp, #16]
 100b6bc:	e5916014 	ldr	r6, [r1, #20]
 100b6c0:	e5917018 	ldr	r7, [r1, #24]
 100b6c4:	e1cd81f8 	strd	r8, [sp, #24]
 100b6c8:	e591801c 	ldr	r8, [r1, #28]
 100b6cc:	e5b19020 	ldr	r9, [r1, #32]!
 100b6d0:	ea000018 	b	100b738 <memcpy+0x578>
 100b6d4:	e1a00000 	nop			; (mov r0, r0)
 100b6d8:	e1a00000 	nop			; (mov r0, r0)
 100b6dc:	e1a00000 	nop			; (mov r0, r0)
 100b6e0:	e1a00000 	nop			; (mov r0, r0)
 100b6e4:	e1a00000 	nop			; (mov r0, r0)
 100b6e8:	e1a00000 	nop			; (mov r0, r0)
 100b6ec:	e1a00000 	nop			; (mov r0, r0)
 100b6f0:	e1a00000 	nop			; (mov r0, r0)
 100b6f4:	e1a00000 	nop			; (mov r0, r0)
 100b6f8:	e1a00000 	nop			; (mov r0, r0)
 100b6fc:	e1a00000 	nop			; (mov r0, r0)
 100b700:	f5d1f124 	pld	[r1, #292]	; 0x124
 100b704:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 100b708:	e5912024 	ldr	r2, [r1, #36]	; 0x24
 100b70c:	e5913028 	ldr	r3, [r1, #40]	; 0x28
 100b710:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 100b714:	e591402c 	ldr	r4, [r1, #44]	; 0x2c
 100b718:	e5915030 	ldr	r5, [r1, #48]	; 0x30
 100b71c:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 100b720:	e5916034 	ldr	r6, [r1, #52]	; 0x34
 100b724:	e5917038 	ldr	r7, [r1, #56]	; 0x38
 100b728:	e1ec84f0 	strd	r8, [ip, #64]!	; 0x40
 100b72c:	e591803c 	ldr	r8, [r1, #60]	; 0x3c
 100b730:	e5b19040 	ldr	r9, [r1, #64]!	; 0x40
 100b734:	e25aa040 	subs	sl, sl, #64	; 0x40
 100b738:	e1cc20f8 	strd	r2, [ip, #8]
 100b73c:	e5912004 	ldr	r2, [r1, #4]
 100b740:	e5913008 	ldr	r3, [r1, #8]
 100b744:	e1cc41f0 	strd	r4, [ip, #16]
 100b748:	e591400c 	ldr	r4, [r1, #12]
 100b74c:	e5915010 	ldr	r5, [r1, #16]
 100b750:	e1cc61f8 	strd	r6, [ip, #24]
 100b754:	e5916014 	ldr	r6, [r1, #20]
 100b758:	e5917018 	ldr	r7, [r1, #24]
 100b75c:	e1cc82f0 	strd	r8, [ip, #32]
 100b760:	e591801c 	ldr	r8, [r1, #28]
 100b764:	e5919020 	ldr	r9, [r1, #32]
 100b768:	2affffe4 	bcs	100b700 <memcpy+0x540>
 100b76c:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 100b770:	e2811024 	add	r1, r1, #36	; 0x24
 100b774:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 100b778:	e1cd40d8 	ldrd	r4, [sp, #8]
 100b77c:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 100b780:	e1cd61d0 	ldrd	r6, [sp, #16]
 100b784:	e1cc84f0 	strd	r8, [ip, #64]	; 0x40
 100b788:	e1cd81d8 	ldrd	r8, [sp, #24]
 100b78c:	e28cc048 	add	ip, ip, #72	; 0x48
 100b790:	e21a203f 	ands	r2, sl, #63	; 0x3f
 100b794:	e49da020 	ldr	sl, [sp], #32
 100b798:	1afffe8b 	bne	100b1cc <memcpy+0xc>
 100b79c:	e12fff1e 	bx	lr

0100b7a0 <memset>:
 100b7a0:	b4f0      	push	{r4, r5, r6, r7}
 100b7a2:	0786      	lsls	r6, r0, #30
 100b7a4:	d046      	beq.n	100b834 <memset+0x94>
 100b7a6:	1e54      	subs	r4, r2, #1
 100b7a8:	2a00      	cmp	r2, #0
 100b7aa:	d03c      	beq.n	100b826 <memset+0x86>
 100b7ac:	b2ca      	uxtb	r2, r1
 100b7ae:	4603      	mov	r3, r0
 100b7b0:	e002      	b.n	100b7b8 <memset+0x18>
 100b7b2:	f114 34ff 	adds.w	r4, r4, #4294967295
 100b7b6:	d336      	bcc.n	100b826 <memset+0x86>
 100b7b8:	f803 2b01 	strb.w	r2, [r3], #1
 100b7bc:	079d      	lsls	r5, r3, #30
 100b7be:	d1f8      	bne.n	100b7b2 <memset+0x12>
 100b7c0:	2c03      	cmp	r4, #3
 100b7c2:	d929      	bls.n	100b818 <memset+0x78>
 100b7c4:	b2cd      	uxtb	r5, r1
 100b7c6:	2c0f      	cmp	r4, #15
 100b7c8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 100b7cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 100b7d0:	d933      	bls.n	100b83a <memset+0x9a>
 100b7d2:	f1a4 0610 	sub.w	r6, r4, #16
 100b7d6:	f103 0720 	add.w	r7, r3, #32
 100b7da:	f103 0210 	add.w	r2, r3, #16
 100b7de:	0936      	lsrs	r6, r6, #4
 100b7e0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 100b7e4:	e942 5504 	strd	r5, r5, [r2, #-16]
 100b7e8:	e942 5502 	strd	r5, r5, [r2, #-8]
 100b7ec:	3210      	adds	r2, #16
 100b7ee:	42ba      	cmp	r2, r7
 100b7f0:	d1f8      	bne.n	100b7e4 <memset+0x44>
 100b7f2:	1c72      	adds	r2, r6, #1
 100b7f4:	f014 0f0c 	tst.w	r4, #12
 100b7f8:	f004 060f 	and.w	r6, r4, #15
 100b7fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 100b800:	d013      	beq.n	100b82a <memset+0x8a>
 100b802:	1f33      	subs	r3, r6, #4
 100b804:	f023 0303 	bic.w	r3, r3, #3
 100b808:	3304      	adds	r3, #4
 100b80a:	4413      	add	r3, r2
 100b80c:	f842 5b04 	str.w	r5, [r2], #4
 100b810:	4293      	cmp	r3, r2
 100b812:	d1fb      	bne.n	100b80c <memset+0x6c>
 100b814:	f006 0403 	and.w	r4, r6, #3
 100b818:	b12c      	cbz	r4, 100b826 <memset+0x86>
 100b81a:	b2c9      	uxtb	r1, r1
 100b81c:	441c      	add	r4, r3
 100b81e:	f803 1b01 	strb.w	r1, [r3], #1
 100b822:	429c      	cmp	r4, r3
 100b824:	d1fb      	bne.n	100b81e <memset+0x7e>
 100b826:	bcf0      	pop	{r4, r5, r6, r7}
 100b828:	4770      	bx	lr
 100b82a:	4634      	mov	r4, r6
 100b82c:	4613      	mov	r3, r2
 100b82e:	2c00      	cmp	r4, #0
 100b830:	d1f3      	bne.n	100b81a <memset+0x7a>
 100b832:	e7f8      	b.n	100b826 <memset+0x86>
 100b834:	4614      	mov	r4, r2
 100b836:	4603      	mov	r3, r0
 100b838:	e7c2      	b.n	100b7c0 <memset+0x20>
 100b83a:	461a      	mov	r2, r3
 100b83c:	4626      	mov	r6, r4
 100b83e:	e7e0      	b.n	100b802 <memset+0x62>

0100b840 <__malloc_lock>:
 100b840:	4770      	bx	lr
 100b842:	bf00      	nop

0100b844 <__malloc_unlock>:
 100b844:	4770      	bx	lr
 100b846:	bf00      	nop

0100b848 <_sbrk_r>:
 100b848:	b538      	push	{r3, r4, r5, lr}
 100b84a:	f649 4488 	movw	r4, #40072	; 0x9c88
 100b84e:	f2c0 1402 	movt	r4, #258	; 0x102
 100b852:	4605      	mov	r5, r0
 100b854:	4608      	mov	r0, r1
 100b856:	2300      	movs	r3, #0
 100b858:	6023      	str	r3, [r4, #0]
 100b85a:	f005 edd0 	blx	10113fc <_sbrk>
 100b85e:	1c43      	adds	r3, r0, #1
 100b860:	d000      	beq.n	100b864 <_sbrk_r+0x1c>
 100b862:	bd38      	pop	{r3, r4, r5, pc}
 100b864:	6823      	ldr	r3, [r4, #0]
 100b866:	2b00      	cmp	r3, #0
 100b868:	d0fb      	beq.n	100b862 <_sbrk_r+0x1a>
 100b86a:	602b      	str	r3, [r5, #0]
 100b86c:	bd38      	pop	{r3, r4, r5, pc}
 100b86e:	bf00      	nop

0100b870 <_snprintf_r>:
 100b870:	b408      	push	{r3}
 100b872:	b570      	push	{r4, r5, r6, lr}
 100b874:	1e14      	subs	r4, r2, #0
 100b876:	4605      	mov	r5, r0
 100b878:	b09d      	sub	sp, #116	; 0x74
 100b87a:	bfbe      	ittt	lt
 100b87c:	228b      	movlt	r2, #139	; 0x8b
 100b87e:	f04f 30ff 	movlt.w	r0, #4294967295
 100b882:	602a      	strlt	r2, [r5, #0]
 100b884:	db17      	blt.n	100b8b6 <_snprintf_r+0x46>
 100b886:	f44f 7302 	mov.w	r3, #520	; 0x208
 100b88a:	9102      	str	r1, [sp, #8]
 100b88c:	9106      	str	r1, [sp, #24]
 100b88e:	f8ad 3014 	strh.w	r3, [sp, #20]
 100b892:	d115      	bne.n	100b8c0 <_snprintf_r+0x50>
 100b894:	ae22      	add	r6, sp, #136	; 0x88
 100b896:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100b898:	a902      	add	r1, sp, #8
 100b89a:	9404      	str	r4, [sp, #16]
 100b89c:	4633      	mov	r3, r6
 100b89e:	9407      	str	r4, [sp, #28]
 100b8a0:	9601      	str	r6, [sp, #4]
 100b8a2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100b8a6:	f8ad 4016 	strh.w	r4, [sp, #22]
 100b8aa:	f000 fd25 	bl	100c2f8 <_svfprintf_r>
 100b8ae:	1c43      	adds	r3, r0, #1
 100b8b0:	da01      	bge.n	100b8b6 <_snprintf_r+0x46>
 100b8b2:	238b      	movs	r3, #139	; 0x8b
 100b8b4:	602b      	str	r3, [r5, #0]
 100b8b6:	b01d      	add	sp, #116	; 0x74
 100b8b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100b8bc:	b001      	add	sp, #4
 100b8be:	4770      	bx	lr
 100b8c0:	ab22      	add	r3, sp, #136	; 0x88
 100b8c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100b8c4:	a902      	add	r1, sp, #8
 100b8c6:	9301      	str	r3, [sp, #4]
 100b8c8:	3c01      	subs	r4, #1
 100b8ca:	9404      	str	r4, [sp, #16]
 100b8cc:	9407      	str	r4, [sp, #28]
 100b8ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100b8d2:	f8ad 4016 	strh.w	r4, [sp, #22]
 100b8d6:	f000 fd0f 	bl	100c2f8 <_svfprintf_r>
 100b8da:	1c42      	adds	r2, r0, #1
 100b8dc:	f04f 0200 	mov.w	r2, #0
 100b8e0:	bfbc      	itt	lt
 100b8e2:	238b      	movlt	r3, #139	; 0x8b
 100b8e4:	602b      	strlt	r3, [r5, #0]
 100b8e6:	9b02      	ldr	r3, [sp, #8]
 100b8e8:	701a      	strb	r2, [r3, #0]
 100b8ea:	b01d      	add	sp, #116	; 0x74
 100b8ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100b8f0:	b001      	add	sp, #4
 100b8f2:	4770      	bx	lr

0100b8f4 <snprintf>:
 100b8f4:	b40c      	push	{r2, r3}
 100b8f6:	f243 4300 	movw	r3, #13312	; 0x3400
 100b8fa:	f2c0 1301 	movt	r3, #257	; 0x101
 100b8fe:	b570      	push	{r4, r5, r6, lr}
 100b900:	1e0c      	subs	r4, r1, #0
 100b902:	681d      	ldr	r5, [r3, #0]
 100b904:	b09c      	sub	sp, #112	; 0x70
 100b906:	bfbe      	ittt	lt
 100b908:	238b      	movlt	r3, #139	; 0x8b
 100b90a:	f04f 30ff 	movlt.w	r0, #4294967295
 100b90e:	602b      	strlt	r3, [r5, #0]
 100b910:	db18      	blt.n	100b944 <snprintf+0x50>
 100b912:	f44f 7302 	mov.w	r3, #520	; 0x208
 100b916:	9002      	str	r0, [sp, #8]
 100b918:	9006      	str	r0, [sp, #24]
 100b91a:	f8ad 3014 	strh.w	r3, [sp, #20]
 100b91e:	d116      	bne.n	100b94e <snprintf+0x5a>
 100b920:	ae21      	add	r6, sp, #132	; 0x84
 100b922:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100b924:	a902      	add	r1, sp, #8
 100b926:	4628      	mov	r0, r5
 100b928:	4633      	mov	r3, r6
 100b92a:	9404      	str	r4, [sp, #16]
 100b92c:	9407      	str	r4, [sp, #28]
 100b92e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100b932:	9601      	str	r6, [sp, #4]
 100b934:	f8ad 4016 	strh.w	r4, [sp, #22]
 100b938:	f000 fcde 	bl	100c2f8 <_svfprintf_r>
 100b93c:	1c43      	adds	r3, r0, #1
 100b93e:	da01      	bge.n	100b944 <snprintf+0x50>
 100b940:	238b      	movs	r3, #139	; 0x8b
 100b942:	602b      	str	r3, [r5, #0]
 100b944:	b01c      	add	sp, #112	; 0x70
 100b946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100b94a:	b002      	add	sp, #8
 100b94c:	4770      	bx	lr
 100b94e:	ab21      	add	r3, sp, #132	; 0x84
 100b950:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100b952:	a902      	add	r1, sp, #8
 100b954:	4628      	mov	r0, r5
 100b956:	9301      	str	r3, [sp, #4]
 100b958:	3c01      	subs	r4, #1
 100b95a:	9404      	str	r4, [sp, #16]
 100b95c:	9407      	str	r4, [sp, #28]
 100b95e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100b962:	f8ad 4016 	strh.w	r4, [sp, #22]
 100b966:	f000 fcc7 	bl	100c2f8 <_svfprintf_r>
 100b96a:	1c42      	adds	r2, r0, #1
 100b96c:	f04f 0200 	mov.w	r2, #0
 100b970:	bfbc      	itt	lt
 100b972:	238b      	movlt	r3, #139	; 0x8b
 100b974:	602b      	strlt	r3, [r5, #0]
 100b976:	9b02      	ldr	r3, [sp, #8]
 100b978:	701a      	strb	r2, [r3, #0]
 100b97a:	b01c      	add	sp, #112	; 0x70
 100b97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100b980:	b002      	add	sp, #8
 100b982:	4770      	bx	lr

0100b984 <strcasecmp>:
 100b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100b986:	4607      	mov	r7, r0
 100b988:	460e      	mov	r6, r1
 100b98a:	f817 4b01 	ldrb.w	r4, [r7], #1
 100b98e:	f7fe fe45 	bl	100a61c <__locale_ctype_ptr>
 100b992:	f816 5b01 	ldrb.w	r5, [r6], #1
 100b996:	4420      	add	r0, r4
 100b998:	7843      	ldrb	r3, [r0, #1]
 100b99a:	f003 0303 	and.w	r3, r3, #3
 100b99e:	2b01      	cmp	r3, #1
 100b9a0:	bf08      	it	eq
 100b9a2:	3420      	addeq	r4, #32
 100b9a4:	f7fe fe3a 	bl	100a61c <__locale_ctype_ptr>
 100b9a8:	4428      	add	r0, r5
 100b9aa:	7843      	ldrb	r3, [r0, #1]
 100b9ac:	f003 0303 	and.w	r3, r3, #3
 100b9b0:	2b01      	cmp	r3, #1
 100b9b2:	d004      	beq.n	100b9be <strcasecmp+0x3a>
 100b9b4:	1b60      	subs	r0, r4, r5
 100b9b6:	d101      	bne.n	100b9bc <strcasecmp+0x38>
 100b9b8:	2d00      	cmp	r5, #0
 100b9ba:	d1e6      	bne.n	100b98a <strcasecmp+0x6>
 100b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100b9be:	f105 0020 	add.w	r0, r5, #32
 100b9c2:	1a20      	subs	r0, r4, r0
 100b9c4:	d0e1      	beq.n	100b98a <strcasecmp+0x6>
 100b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0100b9c8 <strcat>:
 100b9c8:	0783      	lsls	r3, r0, #30
 100b9ca:	b510      	push	{r4, lr}
 100b9cc:	4604      	mov	r4, r0
 100b9ce:	d111      	bne.n	100b9f4 <strcat+0x2c>
 100b9d0:	6822      	ldr	r2, [r4, #0]
 100b9d2:	4620      	mov	r0, r4
 100b9d4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100b9d8:	ea23 0302 	bic.w	r3, r3, r2
 100b9dc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100b9e0:	d108      	bne.n	100b9f4 <strcat+0x2c>
 100b9e2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 100b9e6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100b9ea:	ea23 0302 	bic.w	r3, r3, r2
 100b9ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100b9f2:	d0f6      	beq.n	100b9e2 <strcat+0x1a>
 100b9f4:	7803      	ldrb	r3, [r0, #0]
 100b9f6:	b11b      	cbz	r3, 100ba00 <strcat+0x38>
 100b9f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100b9fc:	2b00      	cmp	r3, #0
 100b9fe:	d1fb      	bne.n	100b9f8 <strcat+0x30>
 100ba00:	f000 f9ec 	bl	100bddc <strcpy>
 100ba04:	4620      	mov	r0, r4
 100ba06:	bd10      	pop	{r4, pc}

0100ba08 <strchr>:
 100ba08:	b2c9      	uxtb	r1, r1
 100ba0a:	f000 0303 	and.w	r3, r0, #3
 100ba0e:	2900      	cmp	r1, #0
 100ba10:	d042      	beq.n	100ba98 <strchr+0x90>
 100ba12:	b17b      	cbz	r3, 100ba34 <strchr+0x2c>
 100ba14:	7803      	ldrb	r3, [r0, #0]
 100ba16:	2b00      	cmp	r3, #0
 100ba18:	d066      	beq.n	100bae8 <strchr+0xe0>
 100ba1a:	4299      	cmp	r1, r3
 100ba1c:	d061      	beq.n	100bae2 <strchr+0xda>
 100ba1e:	1c43      	adds	r3, r0, #1
 100ba20:	e005      	b.n	100ba2e <strchr+0x26>
 100ba22:	f813 2b01 	ldrb.w	r2, [r3], #1
 100ba26:	2a00      	cmp	r2, #0
 100ba28:	d05c      	beq.n	100bae4 <strchr+0xdc>
 100ba2a:	428a      	cmp	r2, r1
 100ba2c:	d059      	beq.n	100bae2 <strchr+0xda>
 100ba2e:	079a      	lsls	r2, r3, #30
 100ba30:	4618      	mov	r0, r3
 100ba32:	d1f6      	bne.n	100ba22 <strchr+0x1a>
 100ba34:	b470      	push	{r4, r5, r6}
 100ba36:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 100ba3a:	6804      	ldr	r4, [r0, #0]
 100ba3c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 100ba40:	ea86 0504 	eor.w	r5, r6, r4
 100ba44:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 100ba48:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 100ba4c:	ea23 0304 	bic.w	r3, r3, r4
 100ba50:	ea22 0205 	bic.w	r2, r2, r5
 100ba54:	4313      	orrs	r3, r2
 100ba56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100ba5a:	d10f      	bne.n	100ba7c <strchr+0x74>
 100ba5c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 100ba60:	ea84 0506 	eor.w	r5, r4, r6
 100ba64:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 100ba68:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 100ba6c:	ea23 0304 	bic.w	r3, r3, r4
 100ba70:	ea22 0205 	bic.w	r2, r2, r5
 100ba74:	4313      	orrs	r3, r2
 100ba76:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100ba7a:	d0ef      	beq.n	100ba5c <strchr+0x54>
 100ba7c:	7803      	ldrb	r3, [r0, #0]
 100ba7e:	b143      	cbz	r3, 100ba92 <strchr+0x8a>
 100ba80:	4299      	cmp	r1, r3
 100ba82:	d102      	bne.n	100ba8a <strchr+0x82>
 100ba84:	e006      	b.n	100ba94 <strchr+0x8c>
 100ba86:	428b      	cmp	r3, r1
 100ba88:	d004      	beq.n	100ba94 <strchr+0x8c>
 100ba8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100ba8e:	2b00      	cmp	r3, #0
 100ba90:	d1f9      	bne.n	100ba86 <strchr+0x7e>
 100ba92:	4618      	mov	r0, r3
 100ba94:	bc70      	pop	{r4, r5, r6}
 100ba96:	4770      	bx	lr
 100ba98:	b15b      	cbz	r3, 100bab2 <strchr+0xaa>
 100ba9a:	7803      	ldrb	r3, [r0, #0]
 100ba9c:	b30b      	cbz	r3, 100bae2 <strchr+0xda>
 100ba9e:	1c43      	adds	r3, r0, #1
 100baa0:	e001      	b.n	100baa6 <strchr+0x9e>
 100baa2:	7802      	ldrb	r2, [r0, #0]
 100baa4:	b1ea      	cbz	r2, 100bae2 <strchr+0xda>
 100baa6:	f013 0f03 	tst.w	r3, #3
 100baaa:	4618      	mov	r0, r3
 100baac:	f103 0301 	add.w	r3, r3, #1
 100bab0:	d1f7      	bne.n	100baa2 <strchr+0x9a>
 100bab2:	6802      	ldr	r2, [r0, #0]
 100bab4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100bab8:	ea23 0302 	bic.w	r3, r3, r2
 100babc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100bac0:	d108      	bne.n	100bad4 <strchr+0xcc>
 100bac2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 100bac6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100baca:	ea23 0302 	bic.w	r3, r3, r2
 100bace:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100bad2:	d0f6      	beq.n	100bac2 <strchr+0xba>
 100bad4:	7803      	ldrb	r3, [r0, #0]
 100bad6:	b123      	cbz	r3, 100bae2 <strchr+0xda>
 100bad8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100badc:	2b00      	cmp	r3, #0
 100bade:	d1fb      	bne.n	100bad8 <strchr+0xd0>
 100bae0:	4770      	bx	lr
 100bae2:	4770      	bx	lr
 100bae4:	4610      	mov	r0, r2
 100bae6:	4770      	bx	lr
 100bae8:	4618      	mov	r0, r3
 100baea:	4770      	bx	lr
	...
 100bb00:	eba2 0003 	sub.w	r0, r2, r3
 100bb04:	4770      	bx	lr
 100bb06:	bf00      	nop

0100bb08 <strcmp>:
 100bb08:	7802      	ldrb	r2, [r0, #0]
 100bb0a:	780b      	ldrb	r3, [r1, #0]
 100bb0c:	2a01      	cmp	r2, #1
 100bb0e:	bf28      	it	cs
 100bb10:	429a      	cmpcs	r2, r3
 100bb12:	d1f5      	bne.n	100bb00 <strchr+0xf8>
 100bb14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 100bb18:	ea40 0401 	orr.w	r4, r0, r1
 100bb1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 100bb20:	f06f 0c00 	mvn.w	ip, #0
 100bb24:	ea4f 7244 	mov.w	r2, r4, lsl #29
 100bb28:	b312      	cbz	r2, 100bb70 <strcmp+0x68>
 100bb2a:	ea80 0401 	eor.w	r4, r0, r1
 100bb2e:	f014 0f07 	tst.w	r4, #7
 100bb32:	d16a      	bne.n	100bc0a <strcmp+0x102>
 100bb34:	f000 0407 	and.w	r4, r0, #7
 100bb38:	f020 0007 	bic.w	r0, r0, #7
 100bb3c:	f004 0503 	and.w	r5, r4, #3
 100bb40:	f021 0107 	bic.w	r1, r1, #7
 100bb44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100bb48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 100bb4c:	f014 0f04 	tst.w	r4, #4
 100bb50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 100bb54:	fa0c f405 	lsl.w	r4, ip, r5
 100bb58:	ea62 0204 	orn	r2, r2, r4
 100bb5c:	ea66 0604 	orn	r6, r6, r4
 100bb60:	d00a      	beq.n	100bb78 <strcmp+0x70>
 100bb62:	ea63 0304 	orn	r3, r3, r4
 100bb66:	4662      	mov	r2, ip
 100bb68:	ea67 0704 	orn	r7, r7, r4
 100bb6c:	4666      	mov	r6, ip
 100bb6e:	e003      	b.n	100bb78 <strcmp+0x70>
 100bb70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 100bb74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 100bb78:	fa82 f54c 	uadd8	r5, r2, ip
 100bb7c:	ea82 0406 	eor.w	r4, r2, r6
 100bb80:	faa4 f48c 	sel	r4, r4, ip
 100bb84:	bb6c      	cbnz	r4, 100bbe2 <strcmp+0xda>
 100bb86:	fa83 f54c 	uadd8	r5, r3, ip
 100bb8a:	ea83 0507 	eor.w	r5, r3, r7
 100bb8e:	faa5 f58c 	sel	r5, r5, ip
 100bb92:	b995      	cbnz	r5, 100bbba <strcmp+0xb2>
 100bb94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 100bb98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 100bb9c:	fa82 f54c 	uadd8	r5, r2, ip
 100bba0:	ea82 0406 	eor.w	r4, r2, r6
 100bba4:	faa4 f48c 	sel	r4, r4, ip
 100bba8:	fa83 f54c 	uadd8	r5, r3, ip
 100bbac:	ea83 0507 	eor.w	r5, r3, r7
 100bbb0:	faa5 f58c 	sel	r5, r5, ip
 100bbb4:	4325      	orrs	r5, r4
 100bbb6:	d0db      	beq.n	100bb70 <strcmp+0x68>
 100bbb8:	b99c      	cbnz	r4, 100bbe2 <strcmp+0xda>
 100bbba:	ba2d      	rev	r5, r5
 100bbbc:	fab5 f485 	clz	r4, r5
 100bbc0:	f024 0407 	bic.w	r4, r4, #7
 100bbc4:	fa27 f104 	lsr.w	r1, r7, r4
 100bbc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 100bbcc:	fa23 f304 	lsr.w	r3, r3, r4
 100bbd0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 100bbd4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100bbd8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100bbdc:	eba0 0001 	sub.w	r0, r0, r1
 100bbe0:	4770      	bx	lr
 100bbe2:	ba24      	rev	r4, r4
 100bbe4:	fab4 f484 	clz	r4, r4
 100bbe8:	f024 0407 	bic.w	r4, r4, #7
 100bbec:	fa26 f104 	lsr.w	r1, r6, r4
 100bbf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 100bbf4:	fa22 f204 	lsr.w	r2, r2, r4
 100bbf8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 100bbfc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100bc00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100bc04:	eba0 0001 	sub.w	r0, r0, r1
 100bc08:	4770      	bx	lr
 100bc0a:	f014 0f03 	tst.w	r4, #3
 100bc0e:	d13c      	bne.n	100bc8a <strcmp+0x182>
 100bc10:	f010 0403 	ands.w	r4, r0, #3
 100bc14:	d128      	bne.n	100bc68 <strcmp+0x160>
 100bc16:	f850 2b08 	ldr.w	r2, [r0], #8
 100bc1a:	f851 3b08 	ldr.w	r3, [r1], #8
 100bc1e:	fa82 f54c 	uadd8	r5, r2, ip
 100bc22:	ea82 0503 	eor.w	r5, r2, r3
 100bc26:	faa5 f58c 	sel	r5, r5, ip
 100bc2a:	b95d      	cbnz	r5, 100bc44 <strcmp+0x13c>
 100bc2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 100bc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 100bc34:	fa82 f54c 	uadd8	r5, r2, ip
 100bc38:	ea82 0503 	eor.w	r5, r2, r3
 100bc3c:	faa5 f58c 	sel	r5, r5, ip
 100bc40:	2d00      	cmp	r5, #0
 100bc42:	d0e8      	beq.n	100bc16 <strcmp+0x10e>
 100bc44:	ba2d      	rev	r5, r5
 100bc46:	fab5 f485 	clz	r4, r5
 100bc4a:	f024 0407 	bic.w	r4, r4, #7
 100bc4e:	fa23 f104 	lsr.w	r1, r3, r4
 100bc52:	fa22 f204 	lsr.w	r2, r2, r4
 100bc56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 100bc5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100bc5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100bc62:	eba0 0001 	sub.w	r0, r0, r1
 100bc66:	4770      	bx	lr
 100bc68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 100bc6c:	f020 0003 	bic.w	r0, r0, #3
 100bc70:	f850 2b08 	ldr.w	r2, [r0], #8
 100bc74:	f021 0103 	bic.w	r1, r1, #3
 100bc78:	f851 3b08 	ldr.w	r3, [r1], #8
 100bc7c:	fa0c f404 	lsl.w	r4, ip, r4
 100bc80:	ea62 0204 	orn	r2, r2, r4
 100bc84:	ea63 0304 	orn	r3, r3, r4
 100bc88:	e7c9      	b.n	100bc1e <strcmp+0x116>
 100bc8a:	f010 0403 	ands.w	r4, r0, #3
 100bc8e:	d01a      	beq.n	100bcc6 <strcmp+0x1be>
 100bc90:	eba1 0104 	sub.w	r1, r1, r4
 100bc94:	f020 0003 	bic.w	r0, r0, #3
 100bc98:	07e4      	lsls	r4, r4, #31
 100bc9a:	f850 2b04 	ldr.w	r2, [r0], #4
 100bc9e:	d006      	beq.n	100bcae <strcmp+0x1a6>
 100bca0:	d20f      	bcs.n	100bcc2 <strcmp+0x1ba>
 100bca2:	788b      	ldrb	r3, [r1, #2]
 100bca4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 100bca8:	1ae4      	subs	r4, r4, r3
 100bcaa:	d106      	bne.n	100bcba <strcmp+0x1b2>
 100bcac:	b12b      	cbz	r3, 100bcba <strcmp+0x1b2>
 100bcae:	78cb      	ldrb	r3, [r1, #3]
 100bcb0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 100bcb4:	1ae4      	subs	r4, r4, r3
 100bcb6:	d100      	bne.n	100bcba <strcmp+0x1b2>
 100bcb8:	b91b      	cbnz	r3, 100bcc2 <strcmp+0x1ba>
 100bcba:	4620      	mov	r0, r4
 100bcbc:	f85d 4b10 	ldr.w	r4, [sp], #16
 100bcc0:	4770      	bx	lr
 100bcc2:	f101 0104 	add.w	r1, r1, #4
 100bcc6:	f850 2b04 	ldr.w	r2, [r0], #4
 100bcca:	07cc      	lsls	r4, r1, #31
 100bccc:	f021 0103 	bic.w	r1, r1, #3
 100bcd0:	f851 3b04 	ldr.w	r3, [r1], #4
 100bcd4:	d848      	bhi.n	100bd68 <strcmp+0x260>
 100bcd6:	d224      	bcs.n	100bd22 <strcmp+0x21a>
 100bcd8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 100bcdc:	fa82 f54c 	uadd8	r5, r2, ip
 100bce0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 100bce4:	faa5 f58c 	sel	r5, r5, ip
 100bce8:	d10a      	bne.n	100bd00 <strcmp+0x1f8>
 100bcea:	b965      	cbnz	r5, 100bd06 <strcmp+0x1fe>
 100bcec:	f851 3b04 	ldr.w	r3, [r1], #4
 100bcf0:	ea84 0402 	eor.w	r4, r4, r2
 100bcf4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 100bcf8:	d10e      	bne.n	100bd18 <strcmp+0x210>
 100bcfa:	f850 2b04 	ldr.w	r2, [r0], #4
 100bcfe:	e7eb      	b.n	100bcd8 <strcmp+0x1d0>
 100bd00:	ea4f 2313 	mov.w	r3, r3, lsr #8
 100bd04:	e055      	b.n	100bdb2 <strcmp+0x2aa>
 100bd06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 100bd0a:	d14d      	bne.n	100bda8 <strcmp+0x2a0>
 100bd0c:	7808      	ldrb	r0, [r1, #0]
 100bd0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100bd12:	f1c0 0000 	rsb	r0, r0, #0
 100bd16:	4770      	bx	lr
 100bd18:	ea4f 6212 	mov.w	r2, r2, lsr #24
 100bd1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 100bd20:	e047      	b.n	100bdb2 <strcmp+0x2aa>
 100bd22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 100bd26:	fa82 f54c 	uadd8	r5, r2, ip
 100bd2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 100bd2e:	faa5 f58c 	sel	r5, r5, ip
 100bd32:	d10a      	bne.n	100bd4a <strcmp+0x242>
 100bd34:	b965      	cbnz	r5, 100bd50 <strcmp+0x248>
 100bd36:	f851 3b04 	ldr.w	r3, [r1], #4
 100bd3a:	ea84 0402 	eor.w	r4, r4, r2
 100bd3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 100bd42:	d10c      	bne.n	100bd5e <strcmp+0x256>
 100bd44:	f850 2b04 	ldr.w	r2, [r0], #4
 100bd48:	e7eb      	b.n	100bd22 <strcmp+0x21a>
 100bd4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 100bd4e:	e030      	b.n	100bdb2 <strcmp+0x2aa>
 100bd50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 100bd54:	d128      	bne.n	100bda8 <strcmp+0x2a0>
 100bd56:	880b      	ldrh	r3, [r1, #0]
 100bd58:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100bd5c:	e029      	b.n	100bdb2 <strcmp+0x2aa>
 100bd5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100bd62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 100bd66:	e024      	b.n	100bdb2 <strcmp+0x2aa>
 100bd68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 100bd6c:	fa82 f54c 	uadd8	r5, r2, ip
 100bd70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 100bd74:	faa5 f58c 	sel	r5, r5, ip
 100bd78:	d10a      	bne.n	100bd90 <strcmp+0x288>
 100bd7a:	b965      	cbnz	r5, 100bd96 <strcmp+0x28e>
 100bd7c:	f851 3b04 	ldr.w	r3, [r1], #4
 100bd80:	ea84 0402 	eor.w	r4, r4, r2
 100bd84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 100bd88:	d109      	bne.n	100bd9e <strcmp+0x296>
 100bd8a:	f850 2b04 	ldr.w	r2, [r0], #4
 100bd8e:	e7eb      	b.n	100bd68 <strcmp+0x260>
 100bd90:	ea4f 6313 	mov.w	r3, r3, lsr #24
 100bd94:	e00d      	b.n	100bdb2 <strcmp+0x2aa>
 100bd96:	f015 0fff 	tst.w	r5, #255	; 0xff
 100bd9a:	d105      	bne.n	100bda8 <strcmp+0x2a0>
 100bd9c:	680b      	ldr	r3, [r1, #0]
 100bd9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 100bda2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 100bda6:	e004      	b.n	100bdb2 <strcmp+0x2aa>
 100bda8:	f04f 0000 	mov.w	r0, #0
 100bdac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100bdb0:	4770      	bx	lr
 100bdb2:	ba12      	rev	r2, r2
 100bdb4:	ba1b      	rev	r3, r3
 100bdb6:	fa82 f44c 	uadd8	r4, r2, ip
 100bdba:	ea82 0403 	eor.w	r4, r2, r3
 100bdbe:	faa4 f58c 	sel	r5, r4, ip
 100bdc2:	fab5 f485 	clz	r4, r5
 100bdc6:	fa02 f204 	lsl.w	r2, r2, r4
 100bdca:	fa03 f304 	lsl.w	r3, r3, r4
 100bdce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 100bdd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100bdd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 100bdda:	4770      	bx	lr

0100bddc <strcpy>:
 100bddc:	f891 f000 	pld	[r1]
 100bde0:	ea80 0201 	eor.w	r2, r0, r1
 100bde4:	4684      	mov	ip, r0
 100bde6:	f012 0f03 	tst.w	r2, #3
 100bdea:	d151      	bne.n	100be90 <strcpy+0xb4>
 100bdec:	f011 0f03 	tst.w	r1, #3
 100bdf0:	d134      	bne.n	100be5c <strcpy+0x80>
 100bdf2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 100bdf6:	f011 0f04 	tst.w	r1, #4
 100bdfa:	f851 3b04 	ldr.w	r3, [r1], #4
 100bdfe:	d00b      	beq.n	100be18 <strcpy+0x3c>
 100be00:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 100be04:	439a      	bics	r2, r3
 100be06:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100be0a:	bf04      	itt	eq
 100be0c:	f84c 3b04 	streq.w	r3, [ip], #4
 100be10:	f851 3b04 	ldreq.w	r3, [r1], #4
 100be14:	d118      	bne.n	100be48 <strcpy+0x6c>
 100be16:	bf00      	nop
 100be18:	f891 f008 	pld	[r1, #8]
 100be1c:	f851 4b04 	ldr.w	r4, [r1], #4
 100be20:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 100be24:	439a      	bics	r2, r3
 100be26:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100be2a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 100be2e:	d10b      	bne.n	100be48 <strcpy+0x6c>
 100be30:	f84c 3b04 	str.w	r3, [ip], #4
 100be34:	43a2      	bics	r2, r4
 100be36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100be3a:	bf04      	itt	eq
 100be3c:	f851 3b04 	ldreq.w	r3, [r1], #4
 100be40:	f84c 4b04 	streq.w	r4, [ip], #4
 100be44:	d0e8      	beq.n	100be18 <strcpy+0x3c>
 100be46:	4623      	mov	r3, r4
 100be48:	f80c 3b01 	strb.w	r3, [ip], #1
 100be4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 100be50:	ea4f 2333 	mov.w	r3, r3, ror #8
 100be54:	d1f8      	bne.n	100be48 <strcpy+0x6c>
 100be56:	f85d 4b04 	ldr.w	r4, [sp], #4
 100be5a:	4770      	bx	lr
 100be5c:	f011 0f01 	tst.w	r1, #1
 100be60:	d006      	beq.n	100be70 <strcpy+0x94>
 100be62:	f811 2b01 	ldrb.w	r2, [r1], #1
 100be66:	f80c 2b01 	strb.w	r2, [ip], #1
 100be6a:	2a00      	cmp	r2, #0
 100be6c:	bf08      	it	eq
 100be6e:	4770      	bxeq	lr
 100be70:	f011 0f02 	tst.w	r1, #2
 100be74:	d0bd      	beq.n	100bdf2 <strcpy+0x16>
 100be76:	f831 2b02 	ldrh.w	r2, [r1], #2
 100be7a:	f012 0fff 	tst.w	r2, #255	; 0xff
 100be7e:	bf16      	itet	ne
 100be80:	f82c 2b02 	strhne.w	r2, [ip], #2
 100be84:	f88c 2000 	strbeq.w	r2, [ip]
 100be88:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 100be8c:	d1b1      	bne.n	100bdf2 <strcpy+0x16>
 100be8e:	4770      	bx	lr
 100be90:	f811 2b01 	ldrb.w	r2, [r1], #1
 100be94:	f80c 2b01 	strb.w	r2, [ip], #1
 100be98:	2a00      	cmp	r2, #0
 100be9a:	d1f9      	bne.n	100be90 <strcpy+0xb4>
 100be9c:	4770      	bx	lr
 100be9e:	bf00      	nop

0100bea0 <strlcpy>:
 100bea0:	b19a      	cbz	r2, 100beca <strlcpy+0x2a>
 100bea2:	2a01      	cmp	r2, #1
 100bea4:	d019      	beq.n	100beda <strlcpy+0x3a>
 100bea6:	b470      	push	{r4, r5, r6}
 100bea8:	460b      	mov	r3, r1
 100beaa:	4605      	mov	r5, r0
 100beac:	e001      	b.n	100beb2 <strlcpy+0x12>
 100beae:	42e0      	cmn	r0, r4
 100beb0:	d017      	beq.n	100bee2 <strlcpy+0x42>
 100beb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 100beb6:	f805 6b01 	strb.w	r6, [r5], #1
 100beba:	43ec      	mvns	r4, r5
 100bebc:	4414      	add	r4, r2
 100bebe:	2e00      	cmp	r6, #0
 100bec0:	d1f5      	bne.n	100beae <strlcpy+0xe>
 100bec2:	1a58      	subs	r0, r3, r1
 100bec4:	3801      	subs	r0, #1
 100bec6:	bc70      	pop	{r4, r5, r6}
 100bec8:	4770      	bx	lr
 100beca:	460b      	mov	r3, r1
 100becc:	f813 2b01 	ldrb.w	r2, [r3], #1
 100bed0:	2a00      	cmp	r2, #0
 100bed2:	d1fb      	bne.n	100becc <strlcpy+0x2c>
 100bed4:	1a58      	subs	r0, r3, r1
 100bed6:	3801      	subs	r0, #1
 100bed8:	4770      	bx	lr
 100beda:	2200      	movs	r2, #0
 100bedc:	460b      	mov	r3, r1
 100bede:	7002      	strb	r2, [r0, #0]
 100bee0:	e7f4      	b.n	100becc <strlcpy+0x2c>
 100bee2:	2200      	movs	r2, #0
 100bee4:	702a      	strb	r2, [r5, #0]
 100bee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 100beea:	2a00      	cmp	r2, #0
 100beec:	d1fb      	bne.n	100bee6 <strlcpy+0x46>
 100beee:	1a58      	subs	r0, r3, r1
 100bef0:	3801      	subs	r0, #1
 100bef2:	bc70      	pop	{r4, r5, r6}
 100bef4:	4770      	bx	lr
 100bef6:	bf00      	nop
	...

0100bf00 <strlen>:
 100bf00:	f890 f000 	pld	[r0]
 100bf04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 100bf08:	f020 0107 	bic.w	r1, r0, #7
 100bf0c:	f06f 0c00 	mvn.w	ip, #0
 100bf10:	f010 0407 	ands.w	r4, r0, #7
 100bf14:	f891 f020 	pld	[r1, #32]
 100bf18:	f040 8049 	bne.w	100bfae <strlen+0xae>
 100bf1c:	f04f 0400 	mov.w	r4, #0
 100bf20:	f06f 0007 	mvn.w	r0, #7
 100bf24:	e9d1 2300 	ldrd	r2, r3, [r1]
 100bf28:	f891 f040 	pld	[r1, #64]	; 0x40
 100bf2c:	f100 0008 	add.w	r0, r0, #8
 100bf30:	fa82 f24c 	uadd8	r2, r2, ip
 100bf34:	faa4 f28c 	sel	r2, r4, ip
 100bf38:	fa83 f34c 	uadd8	r3, r3, ip
 100bf3c:	faa2 f38c 	sel	r3, r2, ip
 100bf40:	bb4b      	cbnz	r3, 100bf96 <strlen+0x96>
 100bf42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 100bf46:	fa82 f24c 	uadd8	r2, r2, ip
 100bf4a:	f100 0008 	add.w	r0, r0, #8
 100bf4e:	faa4 f28c 	sel	r2, r4, ip
 100bf52:	fa83 f34c 	uadd8	r3, r3, ip
 100bf56:	faa2 f38c 	sel	r3, r2, ip
 100bf5a:	b9e3      	cbnz	r3, 100bf96 <strlen+0x96>
 100bf5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 100bf60:	fa82 f24c 	uadd8	r2, r2, ip
 100bf64:	f100 0008 	add.w	r0, r0, #8
 100bf68:	faa4 f28c 	sel	r2, r4, ip
 100bf6c:	fa83 f34c 	uadd8	r3, r3, ip
 100bf70:	faa2 f38c 	sel	r3, r2, ip
 100bf74:	b97b      	cbnz	r3, 100bf96 <strlen+0x96>
 100bf76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 100bf7a:	f101 0120 	add.w	r1, r1, #32
 100bf7e:	fa82 f24c 	uadd8	r2, r2, ip
 100bf82:	f100 0008 	add.w	r0, r0, #8
 100bf86:	faa4 f28c 	sel	r2, r4, ip
 100bf8a:	fa83 f34c 	uadd8	r3, r3, ip
 100bf8e:	faa2 f38c 	sel	r3, r2, ip
 100bf92:	2b00      	cmp	r3, #0
 100bf94:	d0c6      	beq.n	100bf24 <strlen+0x24>
 100bf96:	2a00      	cmp	r2, #0
 100bf98:	bf04      	itt	eq
 100bf9a:	3004      	addeq	r0, #4
 100bf9c:	461a      	moveq	r2, r3
 100bf9e:	ba12      	rev	r2, r2
 100bfa0:	fab2 f282 	clz	r2, r2
 100bfa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 100bfa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 100bfac:	4770      	bx	lr
 100bfae:	e9d1 2300 	ldrd	r2, r3, [r1]
 100bfb2:	f004 0503 	and.w	r5, r4, #3
 100bfb6:	f1c4 0000 	rsb	r0, r4, #0
 100bfba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100bfbe:	f014 0f04 	tst.w	r4, #4
 100bfc2:	f891 f040 	pld	[r1, #64]	; 0x40
 100bfc6:	fa0c f505 	lsl.w	r5, ip, r5
 100bfca:	ea62 0205 	orn	r2, r2, r5
 100bfce:	bf1c      	itt	ne
 100bfd0:	ea63 0305 	ornne	r3, r3, r5
 100bfd4:	4662      	movne	r2, ip
 100bfd6:	f04f 0400 	mov.w	r4, #0
 100bfda:	e7a9      	b.n	100bf30 <strlen+0x30>

0100bfdc <strncasecmp>:
 100bfdc:	b34a      	cbz	r2, 100c032 <strncasecmp+0x56>
 100bfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100bfe2:	4606      	mov	r6, r0
 100bfe4:	460f      	mov	r7, r1
 100bfe6:	eb00 0802 	add.w	r8, r0, r2
 100bfea:	e004      	b.n	100bff6 <strncasecmp+0x1a>
 100bfec:	1b60      	subs	r0, r4, r5
 100bfee:	d11b      	bne.n	100c028 <strncasecmp+0x4c>
 100bff0:	b1e5      	cbz	r5, 100c02c <strncasecmp+0x50>
 100bff2:	45b0      	cmp	r8, r6
 100bff4:	d01a      	beq.n	100c02c <strncasecmp+0x50>
 100bff6:	f816 4b01 	ldrb.w	r4, [r6], #1
 100bffa:	f7fe fb0f 	bl	100a61c <__locale_ctype_ptr>
 100bffe:	f817 5b01 	ldrb.w	r5, [r7], #1
 100c002:	4420      	add	r0, r4
 100c004:	7843      	ldrb	r3, [r0, #1]
 100c006:	f003 0303 	and.w	r3, r3, #3
 100c00a:	2b01      	cmp	r3, #1
 100c00c:	bf08      	it	eq
 100c00e:	3420      	addeq	r4, #32
 100c010:	f7fe fb04 	bl	100a61c <__locale_ctype_ptr>
 100c014:	4428      	add	r0, r5
 100c016:	7843      	ldrb	r3, [r0, #1]
 100c018:	f003 0303 	and.w	r3, r3, #3
 100c01c:	2b01      	cmp	r3, #1
 100c01e:	d1e5      	bne.n	100bfec <strncasecmp+0x10>
 100c020:	f105 0020 	add.w	r0, r5, #32
 100c024:	1a20      	subs	r0, r4, r0
 100c026:	d0e4      	beq.n	100bff2 <strncasecmp+0x16>
 100c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100c02c:	2000      	movs	r0, #0
 100c02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100c032:	2000      	movs	r0, #0
 100c034:	4770      	bx	lr
 100c036:	bf00      	nop

0100c038 <strncmp>:
 100c038:	2a00      	cmp	r2, #0
 100c03a:	d049      	beq.n	100c0d0 <strncmp+0x98>
 100c03c:	ea40 0301 	orr.w	r3, r0, r1
 100c040:	f013 0303 	ands.w	r3, r3, #3
 100c044:	b4f0      	push	{r4, r5, r6, r7}
 100c046:	d125      	bne.n	100c094 <strncmp+0x5c>
 100c048:	2a03      	cmp	r2, #3
 100c04a:	d923      	bls.n	100c094 <strncmp+0x5c>
 100c04c:	6804      	ldr	r4, [r0, #0]
 100c04e:	680d      	ldr	r5, [r1, #0]
 100c050:	42ac      	cmp	r4, r5
 100c052:	d11f      	bne.n	100c094 <strncmp+0x5c>
 100c054:	3a04      	subs	r2, #4
 100c056:	d038      	beq.n	100c0ca <strncmp+0x92>
 100c058:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 100c05c:	ea25 0404 	bic.w	r4, r5, r4
 100c060:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100c064:	d131      	bne.n	100c0ca <strncmp+0x92>
 100c066:	1d07      	adds	r7, r0, #4
 100c068:	1d0d      	adds	r5, r1, #4
 100c06a:	e00d      	b.n	100c088 <strncmp+0x50>
 100c06c:	f857 3b04 	ldr.w	r3, [r7], #4
 100c070:	680e      	ldr	r6, [r1, #0]
 100c072:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 100c076:	42b3      	cmp	r3, r6
 100c078:	ea24 0403 	bic.w	r4, r4, r3
 100c07c:	d10a      	bne.n	100c094 <strncmp+0x5c>
 100c07e:	3a04      	subs	r2, #4
 100c080:	d023      	beq.n	100c0ca <strncmp+0x92>
 100c082:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100c086:	d120      	bne.n	100c0ca <strncmp+0x92>
 100c088:	2a03      	cmp	r2, #3
 100c08a:	4629      	mov	r1, r5
 100c08c:	4638      	mov	r0, r7
 100c08e:	f105 0504 	add.w	r5, r5, #4
 100c092:	d8eb      	bhi.n	100c06c <strncmp+0x34>
 100c094:	7804      	ldrb	r4, [r0, #0]
 100c096:	780e      	ldrb	r6, [r1, #0]
 100c098:	42a6      	cmp	r6, r4
 100c09a:	d11b      	bne.n	100c0d4 <strncmp+0x9c>
 100c09c:	2a01      	cmp	r2, #1
 100c09e:	bf18      	it	ne
 100c0a0:	2e00      	cmpne	r6, #0
 100c0a2:	d012      	beq.n	100c0ca <strncmp+0x92>
 100c0a4:	4605      	mov	r5, r0
 100c0a6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 100c0aa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 100c0ae:	42b4      	cmp	r4, r6
 100c0b0:	ea6f 0305 	mvn.w	r3, r5
 100c0b4:	4413      	add	r3, r2
 100c0b6:	d10d      	bne.n	100c0d4 <strncmp+0x9c>
 100c0b8:	42d8      	cmn	r0, r3
 100c0ba:	bf0c      	ite	eq
 100c0bc:	2301      	moveq	r3, #1
 100c0be:	2300      	movne	r3, #0
 100c0c0:	2c00      	cmp	r4, #0
 100c0c2:	bf08      	it	eq
 100c0c4:	2301      	moveq	r3, #1
 100c0c6:	2b00      	cmp	r3, #0
 100c0c8:	d0ed      	beq.n	100c0a6 <strncmp+0x6e>
 100c0ca:	2000      	movs	r0, #0
 100c0cc:	bcf0      	pop	{r4, r5, r6, r7}
 100c0ce:	4770      	bx	lr
 100c0d0:	4610      	mov	r0, r2
 100c0d2:	4770      	bx	lr
 100c0d4:	1ba0      	subs	r0, r4, r6
 100c0d6:	bcf0      	pop	{r4, r5, r6, r7}
 100c0d8:	4770      	bx	lr
 100c0da:	bf00      	nop

0100c0dc <strncpy>:
 100c0dc:	2a03      	cmp	r2, #3
 100c0de:	ea40 0301 	orr.w	r3, r0, r1
 100c0e2:	b470      	push	{r4, r5, r6}
 100c0e4:	f3c3 0401 	ubfx	r4, r3, #0, #2
 100c0e8:	bf94      	ite	ls
 100c0ea:	2500      	movls	r5, #0
 100c0ec:	2501      	movhi	r5, #1
 100c0ee:	2c00      	cmp	r4, #0
 100c0f0:	4606      	mov	r6, r0
 100c0f2:	bf18      	it	ne
 100c0f4:	2500      	movne	r5, #0
 100c0f6:	b9a5      	cbnz	r5, 100c122 <strncpy+0x46>
 100c0f8:	b18a      	cbz	r2, 100c11e <strncpy+0x42>
 100c0fa:	780c      	ldrb	r4, [r1, #0]
 100c0fc:	4633      	mov	r3, r6
 100c0fe:	1e55      	subs	r5, r2, #1
 100c100:	f803 4b01 	strb.w	r4, [r3], #1
 100c104:	b1fc      	cbz	r4, 100c146 <strncpy+0x6a>
 100c106:	4432      	add	r2, r6
 100c108:	442e      	add	r6, r5
 100c10a:	e004      	b.n	100c116 <strncpy+0x3a>
 100c10c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 100c110:	f803 4b01 	strb.w	r4, [r3], #1
 100c114:	b1bc      	cbz	r4, 100c146 <strncpy+0x6a>
 100c116:	429a      	cmp	r2, r3
 100c118:	eba6 0503 	sub.w	r5, r6, r3
 100c11c:	d1f6      	bne.n	100c10c <strncpy+0x30>
 100c11e:	bc70      	pop	{r4, r5, r6}
 100c120:	4770      	bx	lr
 100c122:	460b      	mov	r3, r1
 100c124:	4619      	mov	r1, r3
 100c126:	f853 5b04 	ldr.w	r5, [r3], #4
 100c12a:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 100c12e:	ea24 0405 	bic.w	r4, r4, r5
 100c132:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100c136:	d1e0      	bne.n	100c0fa <strncpy+0x1e>
 100c138:	3a04      	subs	r2, #4
 100c13a:	f846 5b04 	str.w	r5, [r6], #4
 100c13e:	2a03      	cmp	r2, #3
 100c140:	4619      	mov	r1, r3
 100c142:	d8ef      	bhi.n	100c124 <strncpy+0x48>
 100c144:	e7d8      	b.n	100c0f8 <strncpy+0x1c>
 100c146:	2d00      	cmp	r5, #0
 100c148:	d0e9      	beq.n	100c11e <strncpy+0x42>
 100c14a:	441d      	add	r5, r3
 100c14c:	2200      	movs	r2, #0
 100c14e:	f803 2b01 	strb.w	r2, [r3], #1
 100c152:	42ab      	cmp	r3, r5
 100c154:	d1fb      	bne.n	100c14e <strncpy+0x72>
 100c156:	bc70      	pop	{r4, r5, r6}
 100c158:	4770      	bx	lr
 100c15a:	bf00      	nop

0100c15c <_strtol_l.isra.0>:
 100c15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100c160:	b083      	sub	sp, #12
 100c162:	460f      	mov	r7, r1
 100c164:	4690      	mov	r8, r2
 100c166:	9001      	str	r0, [sp, #4]
 100c168:	461e      	mov	r6, r3
 100c16a:	468b      	mov	fp, r1
 100c16c:	e000      	b.n	100c170 <_strtol_l.isra.0+0x14>
 100c16e:	46ab      	mov	fp, r5
 100c170:	465d      	mov	r5, fp
 100c172:	980c      	ldr	r0, [sp, #48]	; 0x30
 100c174:	f815 4b01 	ldrb.w	r4, [r5], #1
 100c178:	f7fe fa4c 	bl	100a614 <__locale_ctype_ptr_l>
 100c17c:	4420      	add	r0, r4
 100c17e:	7842      	ldrb	r2, [r0, #1]
 100c180:	f012 0208 	ands.w	r2, r2, #8
 100c184:	d1f3      	bne.n	100c16e <_strtol_l.isra.0+0x12>
 100c186:	2c2d      	cmp	r4, #45	; 0x2d
 100c188:	d061      	beq.n	100c24e <_strtol_l.isra.0+0xf2>
 100c18a:	2c2b      	cmp	r4, #43	; 0x2b
 100c18c:	4692      	mov	sl, r2
 100c18e:	bf04      	itt	eq
 100c190:	782c      	ldrbeq	r4, [r5, #0]
 100c192:	f10b 0502 	addeq.w	r5, fp, #2
 100c196:	f036 0310 	bics.w	r3, r6, #16
 100c19a:	d103      	bne.n	100c1a4 <_strtol_l.isra.0+0x48>
 100c19c:	2c30      	cmp	r4, #48	; 0x30
 100c19e:	d05c      	beq.n	100c25a <_strtol_l.isra.0+0xfe>
 100c1a0:	b906      	cbnz	r6, 100c1a4 <_strtol_l.isra.0+0x48>
 100c1a2:	260a      	movs	r6, #10
 100c1a4:	46b3      	mov	fp, r6
 100c1a6:	f1ba 0f00 	cmp.w	sl, #0
 100c1aa:	4659      	mov	r1, fp
 100c1ac:	bf14      	ite	ne
 100c1ae:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 100c1b2:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 100c1b6:	4648      	mov	r0, r9
 100c1b8:	f7fc fff4 	bl	10091a4 <__aeabi_uidivmod>
 100c1bc:	2200      	movs	r2, #0
 100c1be:	4686      	mov	lr, r0
 100c1c0:	4610      	mov	r0, r2
 100c1c2:	e00e      	b.n	100c1e2 <_strtol_l.isra.0+0x86>
 100c1c4:	ebae 0400 	sub.w	r4, lr, r0
 100c1c8:	4299      	cmp	r1, r3
 100c1ca:	fab4 f484 	clz	r4, r4
 100c1ce:	ea4f 1454 	mov.w	r4, r4, lsr #5
 100c1d2:	bfa8      	it	ge
 100c1d4:	2400      	movge	r4, #0
 100c1d6:	b9f4      	cbnz	r4, 100c216 <_strtol_l.isra.0+0xba>
 100c1d8:	fb0b 3000 	mla	r0, fp, r0, r3
 100c1dc:	2201      	movs	r2, #1
 100c1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 100c1e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 100c1e6:	2b09      	cmp	r3, #9
 100c1e8:	d90c      	bls.n	100c204 <_strtol_l.isra.0+0xa8>
 100c1ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 100c1ee:	2b19      	cmp	r3, #25
 100c1f0:	bf98      	it	ls
 100c1f2:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
 100c1f6:	d905      	bls.n	100c204 <_strtol_l.isra.0+0xa8>
 100c1f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 100c1fc:	2b19      	cmp	r3, #25
 100c1fe:	d80d      	bhi.n	100c21c <_strtol_l.isra.0+0xc0>
 100c200:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 100c204:	429e      	cmp	r6, r3
 100c206:	dd09      	ble.n	100c21c <_strtol_l.isra.0+0xc0>
 100c208:	4586      	cmp	lr, r0
 100c20a:	bf2c      	ite	cs
 100c20c:	2400      	movcs	r4, #0
 100c20e:	2401      	movcc	r4, #1
 100c210:	ea54 72d2 	orrs.w	r2, r4, r2, lsr #31
 100c214:	d0d6      	beq.n	100c1c4 <_strtol_l.isra.0+0x68>
 100c216:	f04f 32ff 	mov.w	r2, #4294967295
 100c21a:	e7e0      	b.n	100c1de <_strtol_l.isra.0+0x82>
 100c21c:	1c53      	adds	r3, r2, #1
 100c21e:	d00c      	beq.n	100c23a <_strtol_l.isra.0+0xde>
 100c220:	f1ba 0f00 	cmp.w	sl, #0
 100c224:	d000      	beq.n	100c228 <_strtol_l.isra.0+0xcc>
 100c226:	4240      	negs	r0, r0
 100c228:	f1b8 0f00 	cmp.w	r8, #0
 100c22c:	d002      	beq.n	100c234 <_strtol_l.isra.0+0xd8>
 100c22e:	bb1a      	cbnz	r2, 100c278 <_strtol_l.isra.0+0x11c>
 100c230:	f8c8 7000 	str.w	r7, [r8]
 100c234:	b003      	add	sp, #12
 100c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c23a:	9a01      	ldr	r2, [sp, #4]
 100c23c:	2322      	movs	r3, #34	; 0x22
 100c23e:	4648      	mov	r0, r9
 100c240:	6013      	str	r3, [r2, #0]
 100c242:	f1b8 0f00 	cmp.w	r8, #0
 100c246:	d0f5      	beq.n	100c234 <_strtol_l.isra.0+0xd8>
 100c248:	1e6f      	subs	r7, r5, #1
 100c24a:	4648      	mov	r0, r9
 100c24c:	e7f0      	b.n	100c230 <_strtol_l.isra.0+0xd4>
 100c24e:	782c      	ldrb	r4, [r5, #0]
 100c250:	f04f 0a01 	mov.w	sl, #1
 100c254:	f10b 0502 	add.w	r5, fp, #2
 100c258:	e79d      	b.n	100c196 <_strtol_l.isra.0+0x3a>
 100c25a:	782b      	ldrb	r3, [r5, #0]
 100c25c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100c260:	2b58      	cmp	r3, #88	; 0x58
 100c262:	d104      	bne.n	100c26e <_strtol_l.isra.0+0x112>
 100c264:	2610      	movs	r6, #16
 100c266:	786c      	ldrb	r4, [r5, #1]
 100c268:	46b3      	mov	fp, r6
 100c26a:	3502      	adds	r5, #2
 100c26c:	e79b      	b.n	100c1a6 <_strtol_l.isra.0+0x4a>
 100c26e:	2e00      	cmp	r6, #0
 100c270:	d198      	bne.n	100c1a4 <_strtol_l.isra.0+0x48>
 100c272:	2608      	movs	r6, #8
 100c274:	46b3      	mov	fp, r6
 100c276:	e796      	b.n	100c1a6 <_strtol_l.isra.0+0x4a>
 100c278:	4681      	mov	r9, r0
 100c27a:	e7e5      	b.n	100c248 <_strtol_l.isra.0+0xec>

0100c27c <_strtol_r>:
 100c27c:	b530      	push	{r4, r5, lr}
 100c27e:	f243 4400 	movw	r4, #13312	; 0x3400
 100c282:	f2c0 1401 	movt	r4, #257	; 0x101
 100c286:	b083      	sub	sp, #12
 100c288:	f643 0530 	movw	r5, #14384	; 0x3830
 100c28c:	f2c0 1501 	movt	r5, #257	; 0x101
 100c290:	6824      	ldr	r4, [r4, #0]
 100c292:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100c294:	2c00      	cmp	r4, #0
 100c296:	bf08      	it	eq
 100c298:	462c      	moveq	r4, r5
 100c29a:	9400      	str	r4, [sp, #0]
 100c29c:	f7ff ff5e 	bl	100c15c <_strtol_l.isra.0>
 100c2a0:	b003      	add	sp, #12
 100c2a2:	bd30      	pop	{r4, r5, pc}

0100c2a4 <strtol_l>:
 100c2a4:	b510      	push	{r4, lr}
 100c2a6:	f243 4400 	movw	r4, #13312	; 0x3400
 100c2aa:	b082      	sub	sp, #8
 100c2ac:	f2c0 1401 	movt	r4, #257	; 0x101
 100c2b0:	9300      	str	r3, [sp, #0]
 100c2b2:	4613      	mov	r3, r2
 100c2b4:	460a      	mov	r2, r1
 100c2b6:	4601      	mov	r1, r0
 100c2b8:	6820      	ldr	r0, [r4, #0]
 100c2ba:	f7ff ff4f 	bl	100c15c <_strtol_l.isra.0>
 100c2be:	b002      	add	sp, #8
 100c2c0:	bd10      	pop	{r4, pc}
 100c2c2:	bf00      	nop

0100c2c4 <strtol>:
 100c2c4:	f243 4300 	movw	r3, #13312	; 0x3400
 100c2c8:	f2c0 1301 	movt	r3, #257	; 0x101
 100c2cc:	b570      	push	{r4, r5, r6, lr}
 100c2ce:	b082      	sub	sp, #8
 100c2d0:	681e      	ldr	r6, [r3, #0]
 100c2d2:	f643 0530 	movw	r5, #14384	; 0x3830
 100c2d6:	f2c0 1501 	movt	r5, #257	; 0x101
 100c2da:	4613      	mov	r3, r2
 100c2dc:	460a      	mov	r2, r1
 100c2de:	4601      	mov	r1, r0
 100c2e0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 100c2e2:	4630      	mov	r0, r6
 100c2e4:	2c00      	cmp	r4, #0
 100c2e6:	bf08      	it	eq
 100c2e8:	462c      	moveq	r4, r5
 100c2ea:	9400      	str	r4, [sp, #0]
 100c2ec:	f7ff ff36 	bl	100c15c <_strtol_l.isra.0>
 100c2f0:	b002      	add	sp, #8
 100c2f2:	bd70      	pop	{r4, r5, r6, pc}
 100c2f4:	0000      	movs	r0, r0
	...

0100c2f8 <_svfprintf_r>:
 100c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100c2fc:	460c      	mov	r4, r1
 100c2fe:	ed2d 8b0a 	vpush	{d8-d12}
 100c302:	4615      	mov	r5, r2
 100c304:	4682      	mov	sl, r0
 100c306:	b0d5      	sub	sp, #340	; 0x154
 100c308:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 100c30c:	9108      	str	r1, [sp, #32]
 100c30e:	9309      	str	r3, [sp, #36]	; 0x24
 100c310:	f003 f8a4 	bl	100f45c <_localeconv_r>
 100c314:	6803      	ldr	r3, [r0, #0]
 100c316:	4618      	mov	r0, r3
 100c318:	9317      	str	r3, [sp, #92]	; 0x5c
 100c31a:	f7ff fdf1 	bl	100bf00 <strlen>
 100c31e:	2208      	movs	r2, #8
 100c320:	2100      	movs	r1, #0
 100c322:	9016      	str	r0, [sp, #88]	; 0x58
 100c324:	4658      	mov	r0, fp
 100c326:	f7ff fa3b 	bl	100b7a0 <memset>
 100c32a:	89a3      	ldrh	r3, [r4, #12]
 100c32c:	061a      	lsls	r2, r3, #24
 100c32e:	d503      	bpl.n	100c338 <_svfprintf_r+0x40>
 100c330:	6923      	ldr	r3, [r4, #16]
 100c332:	2b00      	cmp	r3, #0
 100c334:	f000 87d7 	beq.w	100d2e6 <_svfprintf_r+0xfee>
 100c338:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 100c33c:	f243 4800 	movw	r8, #13312	; 0x3400
 100c340:	ed9f 8b75 	vldr	d8, [pc, #468]	; 100c518 <_svfprintf_r+0x220>
 100c344:	f2c0 1801 	movt	r8, #257	; 0x101
 100c348:	462f      	mov	r7, r5
 100c34a:	2300      	movs	r3, #0
 100c34c:	f643 0130 	movw	r1, #14384	; 0x3830
 100c350:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100c354:	f2c0 1101 	movt	r1, #257	; 0x101
 100c358:	9312      	str	r3, [sp, #72]	; 0x48
 100c35a:	910f      	str	r1, [sp, #60]	; 0x3c
 100c35c:	9315      	str	r3, [sp, #84]	; 0x54
 100c35e:	9318      	str	r3, [sp, #96]	; 0x60
 100c360:	9314      	str	r3, [sp, #80]	; 0x50
 100c362:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 100c366:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 100c36a:	9305      	str	r3, [sp, #20]
 100c36c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 100c370:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 100c374:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 100c378:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 100c37a:	463c      	mov	r4, r7
 100c37c:	f8d8 3000 	ldr.w	r3, [r8]
 100c380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100c382:	2b00      	cmp	r3, #0
 100c384:	bf08      	it	eq
 100c386:	4633      	moveq	r3, r6
 100c388:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 100c38c:	f7fe f932 	bl	100a5f4 <__locale_mb_cur_max>
 100c390:	f8cd b000 	str.w	fp, [sp]
 100c394:	4622      	mov	r2, r4
 100c396:	a920      	add	r1, sp, #128	; 0x80
 100c398:	4603      	mov	r3, r0
 100c39a:	4650      	mov	r0, sl
 100c39c:	47a8      	blx	r5
 100c39e:	2800      	cmp	r0, #0
 100c3a0:	4603      	mov	r3, r0
 100c3a2:	f000 8083 	beq.w	100c4ac <_svfprintf_r+0x1b4>
 100c3a6:	db79      	blt.n	100c49c <_svfprintf_r+0x1a4>
 100c3a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100c3aa:	2a25      	cmp	r2, #37	; 0x25
 100c3ac:	d001      	beq.n	100c3b2 <_svfprintf_r+0xba>
 100c3ae:	441c      	add	r4, r3
 100c3b0:	e7e4      	b.n	100c37c <_svfprintf_r+0x84>
 100c3b2:	1be6      	subs	r6, r4, r7
 100c3b4:	4605      	mov	r5, r0
 100c3b6:	d17c      	bne.n	100c4b2 <_svfprintf_r+0x1ba>
 100c3b8:	2300      	movs	r3, #0
 100c3ba:	1c67      	adds	r7, r4, #1
 100c3bc:	461e      	mov	r6, r3
 100c3be:	9306      	str	r3, [sp, #24]
 100c3c0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100c3c4:	f04f 32ff 	mov.w	r2, #4294967295
 100c3c8:	7863      	ldrb	r3, [r4, #1]
 100c3ca:	240a      	movs	r4, #10
 100c3cc:	9204      	str	r2, [sp, #16]
 100c3ce:	3701      	adds	r7, #1
 100c3d0:	f1a3 0220 	sub.w	r2, r3, #32
 100c3d4:	2a5a      	cmp	r2, #90	; 0x5a
 100c3d6:	f200 83b7 	bhi.w	100cb48 <_svfprintf_r+0x850>
 100c3da:	e8df f012 	tbh	[pc, r2, lsl #1]
 100c3de:	01f3      	.short	0x01f3
 100c3e0:	03b503b5 	.word	0x03b503b5
 100c3e4:	03b501ef 	.word	0x03b501ef
 100c3e8:	03b503b5 	.word	0x03b503b5
 100c3ec:	03b501d2 	.word	0x03b501d2
 100c3f0:	01c403b5 	.word	0x01c403b5
 100c3f4:	03b5037a 	.word	0x03b5037a
 100c3f8:	020f0229 	.word	0x020f0229
 100c3fc:	020b03b5 	.word	0x020b03b5
 100c400:	01a201a2 	.word	0x01a201a2
 100c404:	01a201a2 	.word	0x01a201a2
 100c408:	01a201a2 	.word	0x01a201a2
 100c40c:	01a201a2 	.word	0x01a201a2
 100c410:	03b501a2 	.word	0x03b501a2
 100c414:	03b503b5 	.word	0x03b503b5
 100c418:	03b503b5 	.word	0x03b503b5
 100c41c:	03b503b5 	.word	0x03b503b5
 100c420:	03b5037f 	.word	0x03b5037f
 100c424:	03100350 	.word	0x03100350
 100c428:	037f037f 	.word	0x037f037f
 100c42c:	03b5037f 	.word	0x03b5037f
 100c430:	03b503b5 	.word	0x03b503b5
 100c434:	02e603b5 	.word	0x02e603b5
 100c438:	03b503b5 	.word	0x03b503b5
 100c43c:	03b502da 	.word	0x03b502da
 100c440:	03b503b5 	.word	0x03b503b5
 100c444:	03b502aa 	.word	0x03b502aa
 100c448:	03b5029b 	.word	0x03b5029b
 100c44c:	026d03b5 	.word	0x026d03b5
 100c450:	03b503b5 	.word	0x03b503b5
 100c454:	03b503b5 	.word	0x03b503b5
 100c458:	03b503b5 	.word	0x03b503b5
 100c45c:	03b503b5 	.word	0x03b503b5
 100c460:	03b5037f 	.word	0x03b5037f
 100c464:	02410350 	.word	0x02410350
 100c468:	037f037f 	.word	0x037f037f
 100c46c:	0237037f 	.word	0x0237037f
 100c470:	005b0241 	.word	0x005b0241
 100c474:	022d03b5 	.word	0x022d03b5
 100c478:	02fb03b5 	.word	0x02fb03b5
 100c47c:	01af02ea 	.word	0x01af02ea
 100c480:	03b5005b 	.word	0x03b5005b
 100c484:	005d02aa 	.word	0x005d02aa
 100c488:	03b501fd 	.word	0x03b501fd
 100c48c:	00a103b5 	.word	0x00a103b5
 100c490:	005d03b5 	.word	0x005d03b5
 100c494:	f046 0620 	orr.w	r6, r6, #32
 100c498:	783b      	ldrb	r3, [r7, #0]
 100c49a:	e798      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c49c:	2208      	movs	r2, #8
 100c49e:	2100      	movs	r1, #0
 100c4a0:	4658      	mov	r0, fp
 100c4a2:	f7ff f97d 	bl	100b7a0 <memset>
 100c4a6:	2301      	movs	r3, #1
 100c4a8:	441c      	add	r4, r3
 100c4aa:	e767      	b.n	100c37c <_svfprintf_r+0x84>
 100c4ac:	1be6      	subs	r6, r4, r7
 100c4ae:	4605      	mov	r5, r0
 100c4b0:	d012      	beq.n	100c4d8 <_svfprintf_r+0x1e0>
 100c4b2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100c4b6:	e9c9 7600 	strd	r7, r6, [r9]
 100c4ba:	3301      	adds	r3, #1
 100c4bc:	4432      	add	r2, r6
 100c4be:	2b07      	cmp	r3, #7
 100c4c0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100c4c4:	bfd8      	it	le
 100c4c6:	f109 0908 	addle.w	r9, r9, #8
 100c4ca:	dc19      	bgt.n	100c500 <_svfprintf_r+0x208>
 100c4cc:	9b05      	ldr	r3, [sp, #20]
 100c4ce:	4433      	add	r3, r6
 100c4d0:	9305      	str	r3, [sp, #20]
 100c4d2:	2d00      	cmp	r5, #0
 100c4d4:	f47f af70 	bne.w	100c3b8 <_svfprintf_r+0xc0>
 100c4d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 100c4da:	2b00      	cmp	r3, #0
 100c4dc:	f041 826d 	bne.w	100d9ba <_svfprintf_r+0x16c2>
 100c4e0:	9b08      	ldr	r3, [sp, #32]
 100c4e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 100c4e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 100c4ea:	9b05      	ldr	r3, [sp, #20]
 100c4ec:	bf18      	it	ne
 100c4ee:	f04f 33ff 	movne.w	r3, #4294967295
 100c4f2:	9305      	str	r3, [sp, #20]
 100c4f4:	9805      	ldr	r0, [sp, #20]
 100c4f6:	b055      	add	sp, #340	; 0x154
 100c4f8:	ecbd 8b0a 	vpop	{d8-d12}
 100c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c500:	aa28      	add	r2, sp, #160	; 0xa0
 100c502:	9908      	ldr	r1, [sp, #32]
 100c504:	4650      	mov	r0, sl
 100c506:	f003 fd2b 	bl	100ff60 <__ssprint_r>
 100c50a:	2800      	cmp	r0, #0
 100c50c:	d1e8      	bne.n	100c4e0 <_svfprintf_r+0x1e8>
 100c50e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100c512:	e7db      	b.n	100c4cc <_svfprintf_r+0x1d4>
 100c514:	f3af 8000 	nop.w
	...
 100c520:	06b0      	lsls	r0, r6, #26
 100c522:	930e      	str	r3, [sp, #56]	; 0x38
 100c524:	f243 0304 	movw	r3, #12292	; 0x3004
 100c528:	f2c0 1301 	movt	r3, #257	; 0x101
 100c52c:	9315      	str	r3, [sp, #84]	; 0x54
 100c52e:	f140 81cc 	bpl.w	100c8ca <_svfprintf_r+0x5d2>
 100c532:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100c534:	3507      	adds	r5, #7
 100c536:	f025 0307 	bic.w	r3, r5, #7
 100c53a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 100c53e:	9309      	str	r3, [sp, #36]	; 0x24
 100c540:	ea54 0305 	orrs.w	r3, r4, r5
 100c544:	f006 0301 	and.w	r3, r6, #1
 100c548:	bf08      	it	eq
 100c54a:	2300      	moveq	r3, #0
 100c54c:	2b00      	cmp	r3, #0
 100c54e:	f040 81d8 	bne.w	100c902 <_svfprintf_r+0x60a>
 100c552:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100c556:	9303      	str	r3, [sp, #12]
 100c558:	2302      	movs	r3, #2
 100c55a:	9904      	ldr	r1, [sp, #16]
 100c55c:	2200      	movs	r2, #0
 100c55e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100c562:	1c4a      	adds	r2, r1, #1
 100c564:	f000 826c 	beq.w	100ca40 <_svfprintf_r+0x748>
 100c568:	ea54 0205 	orrs.w	r2, r4, r5
 100c56c:	9a03      	ldr	r2, [sp, #12]
 100c56e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 100c572:	bf14      	ite	ne
 100c574:	2201      	movne	r2, #1
 100c576:	2200      	moveq	r2, #0
 100c578:	2900      	cmp	r1, #0
 100c57a:	bf18      	it	ne
 100c57c:	2201      	movne	r2, #1
 100c57e:	2a00      	cmp	r2, #0
 100c580:	f040 873e 	bne.w	100d400 <_svfprintf_r+0x1108>
 100c584:	2b00      	cmp	r3, #0
 100c586:	f040 84da 	bne.w	100cf3e <_svfprintf_r+0xc46>
 100c58a:	9a03      	ldr	r2, [sp, #12]
 100c58c:	9304      	str	r3, [sp, #16]
 100c58e:	f012 0201 	ands.w	r2, r2, #1
 100c592:	9207      	str	r2, [sp, #28]
 100c594:	bf04      	itt	eq
 100c596:	ab54      	addeq	r3, sp, #336	; 0x150
 100c598:	930b      	streq	r3, [sp, #44]	; 0x2c
 100c59a:	d005      	beq.n	100c5a8 <_svfprintf_r+0x2b0>
 100c59c:	2330      	movs	r3, #48	; 0x30
 100c59e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 100c5a2:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100c5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 100c5a8:	2300      	movs	r3, #0
 100c5aa:	9a04      	ldr	r2, [sp, #16]
 100c5ac:	930a      	str	r3, [sp, #40]	; 0x28
 100c5ae:	9313      	str	r3, [sp, #76]	; 0x4c
 100c5b0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100c5b4:	9b07      	ldr	r3, [sp, #28]
 100c5b6:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100c5ba:	4293      	cmp	r3, r2
 100c5bc:	bfb8      	it	lt
 100c5be:	4613      	movlt	r3, r2
 100c5c0:	9303      	str	r3, [sp, #12]
 100c5c2:	b111      	cbz	r1, 100c5ca <_svfprintf_r+0x2d2>
 100c5c4:	9b03      	ldr	r3, [sp, #12]
 100c5c6:	3301      	adds	r3, #1
 100c5c8:	9303      	str	r3, [sp, #12]
 100c5ca:	f016 0302 	ands.w	r3, r6, #2
 100c5ce:	930c      	str	r3, [sp, #48]	; 0x30
 100c5d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100c5d2:	bf1e      	ittt	ne
 100c5d4:	9b03      	ldrne	r3, [sp, #12]
 100c5d6:	3302      	addne	r3, #2
 100c5d8:	9303      	strne	r3, [sp, #12]
 100c5da:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 100c5de:	930d      	str	r3, [sp, #52]	; 0x34
 100c5e0:	d104      	bne.n	100c5ec <_svfprintf_r+0x2f4>
 100c5e2:	9b06      	ldr	r3, [sp, #24]
 100c5e4:	9803      	ldr	r0, [sp, #12]
 100c5e6:	1a1c      	subs	r4, r3, r0
 100c5e8:	2c00      	cmp	r4, #0
 100c5ea:	dc60      	bgt.n	100c6ae <_svfprintf_r+0x3b6>
 100c5ec:	b189      	cbz	r1, 100c612 <_svfprintf_r+0x31a>
 100c5ee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100c5f0:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 100c5f4:	3201      	adds	r2, #1
 100c5f6:	f8c9 0000 	str.w	r0, [r9]
 100c5fa:	3101      	adds	r1, #1
 100c5fc:	2001      	movs	r0, #1
 100c5fe:	2907      	cmp	r1, #7
 100c600:	f8c9 0004 	str.w	r0, [r9, #4]
 100c604:	922a      	str	r2, [sp, #168]	; 0xa8
 100c606:	bfd8      	it	le
 100c608:	f109 0908 	addle.w	r9, r9, #8
 100c60c:	9129      	str	r1, [sp, #164]	; 0xa4
 100c60e:	f300 843e 	bgt.w	100ce8e <_svfprintf_r+0xb96>
 100c612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100c614:	b183      	cbz	r3, 100c638 <_svfprintf_r+0x340>
 100c616:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100c618:	a91e      	add	r1, sp, #120	; 0x78
 100c61a:	3202      	adds	r2, #2
 100c61c:	f8c9 1000 	str.w	r1, [r9]
 100c620:	3301      	adds	r3, #1
 100c622:	2102      	movs	r1, #2
 100c624:	2b07      	cmp	r3, #7
 100c626:	f8c9 1004 	str.w	r1, [r9, #4]
 100c62a:	922a      	str	r2, [sp, #168]	; 0xa8
 100c62c:	bfd8      	it	le
 100c62e:	f109 0908 	addle.w	r9, r9, #8
 100c632:	9329      	str	r3, [sp, #164]	; 0xa4
 100c634:	f300 8437 	bgt.w	100cea6 <_svfprintf_r+0xbae>
 100c638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100c63a:	2b80      	cmp	r3, #128	; 0x80
 100c63c:	f000 8309 	beq.w	100cc52 <_svfprintf_r+0x95a>
 100c640:	9b04      	ldr	r3, [sp, #16]
 100c642:	9907      	ldr	r1, [sp, #28]
 100c644:	1a5c      	subs	r4, r3, r1
 100c646:	2c00      	cmp	r4, #0
 100c648:	f300 8350 	bgt.w	100ccec <_svfprintf_r+0x9f4>
 100c64c:	05f5      	lsls	r5, r6, #23
 100c64e:	f100 82a1 	bmi.w	100cb94 <_svfprintf_r+0x89c>
 100c652:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100c654:	9907      	ldr	r1, [sp, #28]
 100c656:	3301      	adds	r3, #1
 100c658:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100c65a:	2b07      	cmp	r3, #7
 100c65c:	440a      	add	r2, r1
 100c65e:	f8c9 1004 	str.w	r1, [r9, #4]
 100c662:	f8c9 0000 	str.w	r0, [r9]
 100c666:	922a      	str	r2, [sp, #168]	; 0xa8
 100c668:	9329      	str	r3, [sp, #164]	; 0xa4
 100c66a:	f300 8404 	bgt.w	100ce76 <_svfprintf_r+0xb7e>
 100c66e:	f109 0908 	add.w	r9, r9, #8
 100c672:	0771      	lsls	r1, r6, #29
 100c674:	d505      	bpl.n	100c682 <_svfprintf_r+0x38a>
 100c676:	9b06      	ldr	r3, [sp, #24]
 100c678:	9903      	ldr	r1, [sp, #12]
 100c67a:	1a5c      	subs	r4, r3, r1
 100c67c:	2c00      	cmp	r4, #0
 100c67e:	f300 841e 	bgt.w	100cebe <_svfprintf_r+0xbc6>
 100c682:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 100c686:	9803      	ldr	r0, [sp, #12]
 100c688:	4281      	cmp	r1, r0
 100c68a:	bfac      	ite	ge
 100c68c:	185b      	addge	r3, r3, r1
 100c68e:	181b      	addlt	r3, r3, r0
 100c690:	9305      	str	r3, [sp, #20]
 100c692:	2a00      	cmp	r2, #0
 100c694:	f040 838b 	bne.w	100cdae <_svfprintf_r+0xab6>
 100c698:	2300      	movs	r3, #0
 100c69a:	9329      	str	r3, [sp, #164]	; 0xa4
 100c69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100c69e:	b11b      	cbz	r3, 100c6a8 <_svfprintf_r+0x3b0>
 100c6a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 100c6a2:	4650      	mov	r0, sl
 100c6a4:	f002 fd94 	bl	100f1d0 <_free_r>
 100c6a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100c6ac:	e664      	b.n	100c378 <_svfprintf_r+0x80>
 100c6ae:	2c10      	cmp	r4, #16
 100c6b0:	f241 7524 	movw	r5, #5924	; 0x1724
 100c6b4:	bfc8      	it	gt
 100c6b6:	961b      	strgt	r6, [sp, #108]	; 0x6c
 100c6b8:	f2c0 1501 	movt	r5, #257	; 0x101
 100c6bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100c6be:	bfc4      	itt	gt
 100c6c0:	2310      	movgt	r3, #16
 100c6c2:	9e08      	ldrgt	r6, [sp, #32]
 100c6c4:	dc03      	bgt.n	100c6ce <_svfprintf_r+0x3d6>
 100c6c6:	e01e      	b.n	100c706 <_svfprintf_r+0x40e>
 100c6c8:	3c10      	subs	r4, #16
 100c6ca:	2c10      	cmp	r4, #16
 100c6cc:	dd1a      	ble.n	100c704 <_svfprintf_r+0x40c>
 100c6ce:	3101      	adds	r1, #1
 100c6d0:	3210      	adds	r2, #16
 100c6d2:	2907      	cmp	r1, #7
 100c6d4:	e9c9 5300 	strd	r5, r3, [r9]
 100c6d8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100c6dc:	f109 0908 	add.w	r9, r9, #8
 100c6e0:	ddf2      	ble.n	100c6c8 <_svfprintf_r+0x3d0>
 100c6e2:	aa28      	add	r2, sp, #160	; 0xa0
 100c6e4:	4631      	mov	r1, r6
 100c6e6:	4650      	mov	r0, sl
 100c6e8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100c6ec:	f003 fc38 	bl	100ff60 <__ssprint_r>
 100c6f0:	2800      	cmp	r0, #0
 100c6f2:	f040 8364 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100c6f6:	3c10      	subs	r4, #16
 100c6f8:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100c6fc:	2c10      	cmp	r4, #16
 100c6fe:	f04f 0310 	mov.w	r3, #16
 100c702:	dce4      	bgt.n	100c6ce <_svfprintf_r+0x3d6>
 100c704:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 100c706:	3101      	adds	r1, #1
 100c708:	4422      	add	r2, r4
 100c70a:	2907      	cmp	r1, #7
 100c70c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100c710:	e9c9 5400 	strd	r5, r4, [r9]
 100c714:	f300 86f5 	bgt.w	100d502 <_svfprintf_r+0x120a>
 100c718:	f109 0908 	add.w	r9, r9, #8
 100c71c:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100c720:	e764      	b.n	100c5ec <_svfprintf_r+0x2f4>
 100c722:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100c726:	2100      	movs	r1, #0
 100c728:	f817 3b01 	ldrb.w	r3, [r7], #1
 100c72c:	fb04 2101 	mla	r1, r4, r1, r2
 100c730:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100c734:	2a09      	cmp	r2, #9
 100c736:	d9f7      	bls.n	100c728 <_svfprintf_r+0x430>
 100c738:	9106      	str	r1, [sp, #24]
 100c73a:	e649      	b.n	100c3d0 <_svfprintf_r+0xd8>
 100c73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100c73e:	f046 0202 	orr.w	r2, r6, #2
 100c742:	f243 0104 	movw	r1, #12292	; 0x3004
 100c746:	9203      	str	r2, [sp, #12]
 100c748:	f2c0 1101 	movt	r1, #257	; 0x101
 100c74c:	f647 0230 	movw	r2, #30768	; 0x7830
 100c750:	f853 4b04 	ldr.w	r4, [r3], #4
 100c754:	2500      	movs	r5, #0
 100c756:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 100c75a:	2278      	movs	r2, #120	; 0x78
 100c75c:	9115      	str	r1, [sp, #84]	; 0x54
 100c75e:	9309      	str	r3, [sp, #36]	; 0x24
 100c760:	2302      	movs	r3, #2
 100c762:	920e      	str	r2, [sp, #56]	; 0x38
 100c764:	e6f9      	b.n	100c55a <_svfprintf_r+0x262>
 100c766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100c768:	783b      	ldrb	r3, [r7, #0]
 100c76a:	f852 1b04 	ldr.w	r1, [r2], #4
 100c76e:	2900      	cmp	r1, #0
 100c770:	9106      	str	r1, [sp, #24]
 100c772:	bfa8      	it	ge
 100c774:	9209      	strge	r2, [sp, #36]	; 0x24
 100c776:	f6bf ae2a 	bge.w	100c3ce <_svfprintf_r+0xd6>
 100c77a:	4249      	negs	r1, r1
 100c77c:	9209      	str	r2, [sp, #36]	; 0x24
 100c77e:	9106      	str	r1, [sp, #24]
 100c780:	e057      	b.n	100c832 <_svfprintf_r+0x53a>
 100c782:	4650      	mov	r0, sl
 100c784:	f002 fe6a 	bl	100f45c <_localeconv_r>
 100c788:	6843      	ldr	r3, [r0, #4]
 100c78a:	4618      	mov	r0, r3
 100c78c:	931a      	str	r3, [sp, #104]	; 0x68
 100c78e:	f7ff fbb7 	bl	100bf00 <strlen>
 100c792:	4605      	mov	r5, r0
 100c794:	9019      	str	r0, [sp, #100]	; 0x64
 100c796:	4650      	mov	r0, sl
 100c798:	f002 fe60 	bl	100f45c <_localeconv_r>
 100c79c:	6883      	ldr	r3, [r0, #8]
 100c79e:	2d00      	cmp	r5, #0
 100c7a0:	bf18      	it	ne
 100c7a2:	2b00      	cmpne	r3, #0
 100c7a4:	9314      	str	r3, [sp, #80]	; 0x50
 100c7a6:	f43f ae77 	beq.w	100c498 <_svfprintf_r+0x1a0>
 100c7aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100c7ac:	781a      	ldrb	r2, [r3, #0]
 100c7ae:	783b      	ldrb	r3, [r7, #0]
 100c7b0:	2a00      	cmp	r2, #0
 100c7b2:	f43f ae0c 	beq.w	100c3ce <_svfprintf_r+0xd6>
 100c7b6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 100c7ba:	e608      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c7bc:	f046 0601 	orr.w	r6, r6, #1
 100c7c0:	783b      	ldrb	r3, [r7, #0]
 100c7c2:	e604      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c7c4:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 100c7c8:	783b      	ldrb	r3, [r7, #0]
 100c7ca:	2a00      	cmp	r2, #0
 100c7cc:	f47f adff 	bne.w	100c3ce <_svfprintf_r+0xd6>
 100c7d0:	2220      	movs	r2, #32
 100c7d2:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100c7d6:	e5fa      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c7d8:	06b0      	lsls	r0, r6, #26
 100c7da:	930e      	str	r3, [sp, #56]	; 0x38
 100c7dc:	f140 8531 	bpl.w	100d242 <_svfprintf_r+0xf4a>
 100c7e0:	9603      	str	r6, [sp, #12]
 100c7e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100c7e4:	2301      	movs	r3, #1
 100c7e6:	3507      	adds	r5, #7
 100c7e8:	f025 0207 	bic.w	r2, r5, #7
 100c7ec:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100c7f0:	9209      	str	r2, [sp, #36]	; 0x24
 100c7f2:	e6b2      	b.n	100c55a <_svfprintf_r+0x262>
 100c7f4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 100c7f8:	783b      	ldrb	r3, [r7, #0]
 100c7fa:	e5e8      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c7fc:	4639      	mov	r1, r7
 100c7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 100c802:	2b2a      	cmp	r3, #42	; 0x2a
 100c804:	f001 82e5 	beq.w	100ddd2 <_svfprintf_r+0x1ada>
 100c808:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100c80c:	460f      	mov	r7, r1
 100c80e:	2a09      	cmp	r2, #9
 100c810:	bf84      	itt	hi
 100c812:	2200      	movhi	r2, #0
 100c814:	9204      	strhi	r2, [sp, #16]
 100c816:	f63f addb 	bhi.w	100c3d0 <_svfprintf_r+0xd8>
 100c81a:	2100      	movs	r1, #0
 100c81c:	f817 3b01 	ldrb.w	r3, [r7], #1
 100c820:	fb04 2101 	mla	r1, r4, r1, r2
 100c824:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100c828:	2a09      	cmp	r2, #9
 100c82a:	d9f7      	bls.n	100c81c <_svfprintf_r+0x524>
 100c82c:	9104      	str	r1, [sp, #16]
 100c82e:	e5cf      	b.n	100c3d0 <_svfprintf_r+0xd8>
 100c830:	783b      	ldrb	r3, [r7, #0]
 100c832:	f046 0604 	orr.w	r6, r6, #4
 100c836:	e5ca      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c838:	783b      	ldrb	r3, [r7, #0]
 100c83a:	2b6c      	cmp	r3, #108	; 0x6c
 100c83c:	bf09      	itett	eq
 100c83e:	f046 0620 	orreq.w	r6, r6, #32
 100c842:	f046 0610 	orrne.w	r6, r6, #16
 100c846:	787b      	ldrbeq	r3, [r7, #1]
 100c848:	3701      	addeq	r7, #1
 100c84a:	e5c0      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c84c:	783b      	ldrb	r3, [r7, #0]
 100c84e:	2b68      	cmp	r3, #104	; 0x68
 100c850:	bf09      	itett	eq
 100c852:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 100c856:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 100c85a:	787b      	ldrbeq	r3, [r7, #1]
 100c85c:	3701      	addeq	r7, #1
 100c85e:	e5b6      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c860:	06b5      	lsls	r5, r6, #26
 100c862:	930e      	str	r3, [sp, #56]	; 0x38
 100c864:	f140 84d5 	bpl.w	100d212 <_svfprintf_r+0xf1a>
 100c868:	9603      	str	r6, [sp, #12]
 100c86a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100c86c:	3507      	adds	r5, #7
 100c86e:	f025 0307 	bic.w	r3, r5, #7
 100c872:	4619      	mov	r1, r3
 100c874:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 100c878:	4614      	mov	r4, r2
 100c87a:	461d      	mov	r5, r3
 100c87c:	9109      	str	r1, [sp, #36]	; 0x24
 100c87e:	2a00      	cmp	r2, #0
 100c880:	f173 0300 	sbcs.w	r3, r3, #0
 100c884:	f2c0 80cf 	blt.w	100ca26 <_svfprintf_r+0x72e>
 100c888:	9b04      	ldr	r3, [sp, #16]
 100c88a:	3301      	adds	r3, #1
 100c88c:	f000 8173 	beq.w	100cb76 <_svfprintf_r+0x87e>
 100c890:	ea54 0305 	orrs.w	r3, r4, r5
 100c894:	9a04      	ldr	r2, [sp, #16]
 100c896:	9b03      	ldr	r3, [sp, #12]
 100c898:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 100c89c:	bf14      	ite	ne
 100c89e:	2301      	movne	r3, #1
 100c8a0:	2300      	moveq	r3, #0
 100c8a2:	2a00      	cmp	r2, #0
 100c8a4:	bf18      	it	ne
 100c8a6:	2301      	movne	r3, #1
 100c8a8:	2b00      	cmp	r3, #0
 100c8aa:	f040 8163 	bne.w	100cb74 <_svfprintf_r+0x87c>
 100c8ae:	aa54      	add	r2, sp, #336	; 0x150
 100c8b0:	9304      	str	r3, [sp, #16]
 100c8b2:	920b      	str	r2, [sp, #44]	; 0x2c
 100c8b4:	9307      	str	r3, [sp, #28]
 100c8b6:	e677      	b.n	100c5a8 <_svfprintf_r+0x2b0>
 100c8b8:	06b0      	lsls	r0, r6, #26
 100c8ba:	930e      	str	r3, [sp, #56]	; 0x38
 100c8bc:	f642 63b4 	movw	r3, #11956	; 0x2eb4
 100c8c0:	f2c0 1301 	movt	r3, #257	; 0x101
 100c8c4:	9315      	str	r3, [sp, #84]	; 0x54
 100c8c6:	f53f ae34 	bmi.w	100c532 <_svfprintf_r+0x23a>
 100c8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100c8cc:	06f1      	lsls	r1, r6, #27
 100c8ce:	f853 4b04 	ldr.w	r4, [r3], #4
 100c8d2:	9309      	str	r3, [sp, #36]	; 0x24
 100c8d4:	d40b      	bmi.n	100c8ee <_svfprintf_r+0x5f6>
 100c8d6:	0672      	lsls	r2, r6, #25
 100c8d8:	bf44      	itt	mi
 100c8da:	b2a4      	uxthmi	r4, r4
 100c8dc:	2500      	movmi	r5, #0
 100c8de:	f53f ae2f 	bmi.w	100c540 <_svfprintf_r+0x248>
 100c8e2:	05b3      	lsls	r3, r6, #22
 100c8e4:	bf44      	itt	mi
 100c8e6:	b2e4      	uxtbmi	r4, r4
 100c8e8:	2500      	movmi	r5, #0
 100c8ea:	f53f ae29 	bmi.w	100c540 <_svfprintf_r+0x248>
 100c8ee:	2500      	movs	r5, #0
 100c8f0:	ea54 0305 	orrs.w	r3, r4, r5
 100c8f4:	f006 0301 	and.w	r3, r6, #1
 100c8f8:	bf08      	it	eq
 100c8fa:	2300      	moveq	r3, #0
 100c8fc:	2b00      	cmp	r3, #0
 100c8fe:	f43f ae28 	beq.w	100c552 <_svfprintf_r+0x25a>
 100c902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100c904:	f046 0602 	orr.w	r6, r6, #2
 100c908:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100c90c:	2330      	movs	r3, #48	; 0x30
 100c90e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 100c912:	e61e      	b.n	100c552 <_svfprintf_r+0x25a>
 100c914:	06b4      	lsls	r4, r6, #26
 100c916:	930e      	str	r3, [sp, #56]	; 0x38
 100c918:	f046 0310 	orr.w	r3, r6, #16
 100c91c:	9303      	str	r3, [sp, #12]
 100c91e:	f53f af60 	bmi.w	100c7e2 <_svfprintf_r+0x4ea>
 100c922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100c924:	1d1a      	adds	r2, r3, #4
 100c926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100c928:	2500      	movs	r5, #0
 100c92a:	9209      	str	r2, [sp, #36]	; 0x24
 100c92c:	681c      	ldr	r4, [r3, #0]
 100c92e:	2301      	movs	r3, #1
 100c930:	e613      	b.n	100c55a <_svfprintf_r+0x262>
 100c932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100c934:	930e      	str	r3, [sp, #56]	; 0x38
 100c936:	2300      	movs	r3, #0
 100c938:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100c93c:	f855 2b04 	ldr.w	r2, [r5], #4
 100c940:	920b      	str	r2, [sp, #44]	; 0x2c
 100c942:	2a00      	cmp	r2, #0
 100c944:	f000 84bb 	beq.w	100d2be <_svfprintf_r+0xfc6>
 100c948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100c94a:	2b53      	cmp	r3, #83	; 0x53
 100c94c:	f000 8600 	beq.w	100d550 <_svfprintf_r+0x1258>
 100c950:	f016 0310 	ands.w	r3, r6, #16
 100c954:	9310      	str	r3, [sp, #64]	; 0x40
 100c956:	f040 85fb 	bne.w	100d550 <_svfprintf_r+0x1258>
 100c95a:	9a04      	ldr	r2, [sp, #16]
 100c95c:	1c53      	adds	r3, r2, #1
 100c95e:	f001 801b 	beq.w	100d998 <_svfprintf_r+0x16a0>
 100c962:	9910      	ldr	r1, [sp, #64]	; 0x40
 100c964:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100c966:	f002 fd9b 	bl	100f4a0 <memchr>
 100c96a:	900a      	str	r0, [sp, #40]	; 0x28
 100c96c:	2800      	cmp	r0, #0
 100c96e:	f001 81dc 	beq.w	100dd2a <_svfprintf_r+0x1a32>
 100c972:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 100c976:	9509      	str	r5, [sp, #36]	; 0x24
 100c978:	1a9a      	subs	r2, r3, r2
 100c97a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100c97c:	9207      	str	r2, [sp, #28]
 100c97e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100c982:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 100c986:	9304      	str	r3, [sp, #16]
 100c988:	9313      	str	r3, [sp, #76]	; 0x4c
 100c98a:	9203      	str	r2, [sp, #12]
 100c98c:	9311      	str	r3, [sp, #68]	; 0x44
 100c98e:	930a      	str	r3, [sp, #40]	; 0x28
 100c990:	e617      	b.n	100c5c2 <_svfprintf_r+0x2ca>
 100c992:	06b4      	lsls	r4, r6, #26
 100c994:	930e      	str	r3, [sp, #56]	; 0x38
 100c996:	f046 0310 	orr.w	r3, r6, #16
 100c99a:	d40f      	bmi.n	100c9bc <_svfprintf_r+0x6c4>
 100c99c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100c99e:	3204      	adds	r2, #4
 100c9a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 100c9a2:	2500      	movs	r5, #0
 100c9a4:	9209      	str	r2, [sp, #36]	; 0x24
 100c9a6:	680c      	ldr	r4, [r1, #0]
 100c9a8:	e00f      	b.n	100c9ca <_svfprintf_r+0x6d2>
 100c9aa:	f046 0608 	orr.w	r6, r6, #8
 100c9ae:	783b      	ldrb	r3, [r7, #0]
 100c9b0:	e50d      	b.n	100c3ce <_svfprintf_r+0xd6>
 100c9b2:	06b0      	lsls	r0, r6, #26
 100c9b4:	930e      	str	r3, [sp, #56]	; 0x38
 100c9b6:	f140 845e 	bpl.w	100d276 <_svfprintf_r+0xf7e>
 100c9ba:	4633      	mov	r3, r6
 100c9bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100c9be:	3507      	adds	r5, #7
 100c9c0:	f025 0207 	bic.w	r2, r5, #7
 100c9c4:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100c9c8:	9209      	str	r2, [sp, #36]	; 0x24
 100c9ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 100c9ce:	9303      	str	r3, [sp, #12]
 100c9d0:	2300      	movs	r3, #0
 100c9d2:	e5c2      	b.n	100c55a <_svfprintf_r+0x262>
 100c9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100c9d6:	06b0      	lsls	r0, r6, #26
 100c9d8:	f102 0304 	add.w	r3, r2, #4
 100c9dc:	f100 8441 	bmi.w	100d262 <_svfprintf_r+0xf6a>
 100c9e0:	06f1      	lsls	r1, r6, #27
 100c9e2:	f100 8608 	bmi.w	100d5f6 <_svfprintf_r+0x12fe>
 100c9e6:	0672      	lsls	r2, r6, #25
 100c9e8:	f100 87c4 	bmi.w	100d974 <_svfprintf_r+0x167c>
 100c9ec:	05b5      	lsls	r5, r6, #22
 100c9ee:	f140 8602 	bpl.w	100d5f6 <_svfprintf_r+0x12fe>
 100c9f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100c9f4:	9309      	str	r3, [sp, #36]	; 0x24
 100c9f6:	9b05      	ldr	r3, [sp, #20]
 100c9f8:	6812      	ldr	r2, [r2, #0]
 100c9fa:	7013      	strb	r3, [r2, #0]
 100c9fc:	e4bc      	b.n	100c378 <_svfprintf_r+0x80>
 100c9fe:	930e      	str	r3, [sp, #56]	; 0x38
 100ca00:	f046 0310 	orr.w	r3, r6, #16
 100ca04:	06b6      	lsls	r6, r6, #26
 100ca06:	9303      	str	r3, [sp, #12]
 100ca08:	f53f af2f 	bmi.w	100c86a <_svfprintf_r+0x572>
 100ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ca0e:	1d1a      	adds	r2, r3, #4
 100ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ca12:	9209      	str	r2, [sp, #36]	; 0x24
 100ca14:	681c      	ldr	r4, [r3, #0]
 100ca16:	17e5      	asrs	r5, r4, #31
 100ca18:	4622      	mov	r2, r4
 100ca1a:	2a00      	cmp	r2, #0
 100ca1c:	462b      	mov	r3, r5
 100ca1e:	f173 0300 	sbcs.w	r3, r3, #0
 100ca22:	f6bf af31 	bge.w	100c888 <_svfprintf_r+0x590>
 100ca26:	4264      	negs	r4, r4
 100ca28:	9904      	ldr	r1, [sp, #16]
 100ca2a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 100ca2e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100ca32:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 100ca36:	1c4a      	adds	r2, r1, #1
 100ca38:	f04f 0301 	mov.w	r3, #1
 100ca3c:	f47f ad94 	bne.w	100c568 <_svfprintf_r+0x270>
 100ca40:	2b01      	cmp	r3, #1
 100ca42:	f000 8098 	beq.w	100cb76 <_svfprintf_r+0x87e>
 100ca46:	2b02      	cmp	r3, #2
 100ca48:	bf18      	it	ne
 100ca4a:	a954      	addne	r1, sp, #336	; 0x150
 100ca4c:	f040 818f 	bne.w	100cd6e <_svfprintf_r+0xa76>
 100ca50:	ab54      	add	r3, sp, #336	; 0x150
 100ca52:	9e15      	ldr	r6, [sp, #84]	; 0x54
 100ca54:	461a      	mov	r2, r3
 100ca56:	f004 010f 	and.w	r1, r4, #15
 100ca5a:	0923      	lsrs	r3, r4, #4
 100ca5c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 100ca60:	0928      	lsrs	r0, r5, #4
 100ca62:	5c71      	ldrb	r1, [r6, r1]
 100ca64:	461c      	mov	r4, r3
 100ca66:	4605      	mov	r5, r0
 100ca68:	ea54 0305 	orrs.w	r3, r4, r5
 100ca6c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 100ca70:	d1f1      	bne.n	100ca56 <_svfprintf_r+0x75e>
 100ca72:	ab54      	add	r3, sp, #336	; 0x150
 100ca74:	920b      	str	r2, [sp, #44]	; 0x2c
 100ca76:	1a9b      	subs	r3, r3, r2
 100ca78:	9e03      	ldr	r6, [sp, #12]
 100ca7a:	9307      	str	r3, [sp, #28]
 100ca7c:	e594      	b.n	100c5a8 <_svfprintf_r+0x2b0>
 100ca7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ca80:	2b43      	cmp	r3, #67	; 0x43
 100ca82:	930e      	str	r3, [sp, #56]	; 0x38
 100ca84:	f102 0504 	add.w	r5, r2, #4
 100ca88:	d002      	beq.n	100ca90 <_svfprintf_r+0x798>
 100ca8a:	06f3      	lsls	r3, r6, #27
 100ca8c:	f140 8402 	bpl.w	100d294 <_svfprintf_r+0xf9c>
 100ca90:	2208      	movs	r2, #8
 100ca92:	2100      	movs	r1, #0
 100ca94:	a826      	add	r0, sp, #152	; 0x98
 100ca96:	ac3b      	add	r4, sp, #236	; 0xec
 100ca98:	f7fe fe82 	bl	100b7a0 <memset>
 100ca9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ca9e:	ab26      	add	r3, sp, #152	; 0x98
 100caa0:	4621      	mov	r1, r4
 100caa2:	4650      	mov	r0, sl
 100caa4:	6812      	ldr	r2, [r2, #0]
 100caa6:	f001 fa13 	bl	100ded0 <_wcrtomb_r>
 100caaa:	1c43      	adds	r3, r0, #1
 100caac:	9007      	str	r0, [sp, #28]
 100caae:	f001 80eb 	beq.w	100dc88 <_svfprintf_r+0x1990>
 100cab2:	9b07      	ldr	r3, [sp, #28]
 100cab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100cab8:	9303      	str	r3, [sp, #12]
 100caba:	2300      	movs	r3, #0
 100cabc:	9509      	str	r5, [sp, #36]	; 0x24
 100cabe:	4619      	mov	r1, r3
 100cac0:	940b      	str	r4, [sp, #44]	; 0x2c
 100cac2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100cac6:	930a      	str	r3, [sp, #40]	; 0x28
 100cac8:	9304      	str	r3, [sp, #16]
 100caca:	9313      	str	r3, [sp, #76]	; 0x4c
 100cacc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100cad0:	e57b      	b.n	100c5ca <_svfprintf_r+0x2d2>
 100cad2:	232b      	movs	r3, #43	; 0x2b
 100cad4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100cad8:	783b      	ldrb	r3, [r7, #0]
 100cada:	e478      	b.n	100c3ce <_svfprintf_r+0xd6>
 100cadc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100cade:	930e      	str	r3, [sp, #56]	; 0x38
 100cae0:	3507      	adds	r5, #7
 100cae2:	ed9f 7bbd 	vldr	d7, [pc, #756]	; 100cdd8 <_svfprintf_r+0xae0>
 100cae6:	f025 0307 	bic.w	r3, r5, #7
 100caea:	ecb3 8b02 	vldmia	r3!, {d8}
 100caee:	eeb0 6bc8 	vabs.f64	d6, d8
 100caf2:	9309      	str	r3, [sp, #36]	; 0x24
 100caf4:	eeb4 6b47 	vcmp.f64	d6, d7
 100caf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100cafc:	f340 8309 	ble.w	100d112 <_svfprintf_r+0xe1a>
 100cb00:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 100cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100cb08:	bf58      	it	pl
 100cb0a:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 100cb0e:	d502      	bpl.n	100cb16 <_svfprintf_r+0x81e>
 100cb10:	212d      	movs	r1, #45	; 0x2d
 100cb12:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100cb16:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 100cb1a:	f642 74f8 	movw	r4, #12280	; 0x2ff8
 100cb1e:	f2c0 1301 	movt	r3, #257	; 0x101
 100cb22:	f2c0 1401 	movt	r4, #257	; 0x101
 100cb26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100cb28:	2200      	movs	r2, #0
 100cb2a:	2003      	movs	r0, #3
 100cb2c:	920a      	str	r2, [sp, #40]	; 0x28
 100cb2e:	2d47      	cmp	r5, #71	; 0x47
 100cb30:	bfc8      	it	gt
 100cb32:	4623      	movgt	r3, r4
 100cb34:	9003      	str	r0, [sp, #12]
 100cb36:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 100cb3a:	930b      	str	r3, [sp, #44]	; 0x2c
 100cb3c:	9007      	str	r0, [sp, #28]
 100cb3e:	9204      	str	r2, [sp, #16]
 100cb40:	9213      	str	r2, [sp, #76]	; 0x4c
 100cb42:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100cb46:	e53c      	b.n	100c5c2 <_svfprintf_r+0x2ca>
 100cb48:	461a      	mov	r2, r3
 100cb4a:	930e      	str	r3, [sp, #56]	; 0x38
 100cb4c:	2b00      	cmp	r3, #0
 100cb4e:	f43f acc3 	beq.w	100c4d8 <_svfprintf_r+0x1e0>
 100cb52:	2300      	movs	r3, #0
 100cb54:	2001      	movs	r0, #1
 100cb56:	4619      	mov	r1, r3
 100cb58:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100cb5c:	930a      	str	r3, [sp, #40]	; 0x28
 100cb5e:	9304      	str	r3, [sp, #16]
 100cb60:	9313      	str	r3, [sp, #76]	; 0x4c
 100cb62:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100cb66:	ab3b      	add	r3, sp, #236	; 0xec
 100cb68:	9003      	str	r0, [sp, #12]
 100cb6a:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 100cb6e:	9007      	str	r0, [sp, #28]
 100cb70:	930b      	str	r3, [sp, #44]	; 0x2c
 100cb72:	e52a      	b.n	100c5ca <_svfprintf_r+0x2d2>
 100cb74:	9603      	str	r6, [sp, #12]
 100cb76:	2d00      	cmp	r5, #0
 100cb78:	bf08      	it	eq
 100cb7a:	2c0a      	cmpeq	r4, #10
 100cb7c:	f080 8544 	bcs.w	100d608 <_svfprintf_r+0x1310>
 100cb80:	2301      	movs	r3, #1
 100cb82:	3430      	adds	r4, #48	; 0x30
 100cb84:	9307      	str	r3, [sp, #28]
 100cb86:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100cb8a:	9e03      	ldr	r6, [sp, #12]
 100cb8c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 100cb90:	930b      	str	r3, [sp, #44]	; 0x2c
 100cb92:	e509      	b.n	100c5a8 <_svfprintf_r+0x2b0>
 100cb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100cb96:	2b65      	cmp	r3, #101	; 0x65
 100cb98:	f340 8124 	ble.w	100cde4 <_svfprintf_r+0xaec>
 100cb9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100cba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100cba4:	f040 81d1 	bne.w	100cf4a <_svfprintf_r+0xc52>
 100cba8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100cbaa:	3201      	adds	r2, #1
 100cbac:	2101      	movs	r1, #1
 100cbae:	922a      	str	r2, [sp, #168]	; 0xa8
 100cbb0:	3301      	adds	r3, #1
 100cbb2:	f243 0220 	movw	r2, #12320	; 0x3020
 100cbb6:	2b07      	cmp	r3, #7
 100cbb8:	f2c0 1201 	movt	r2, #257	; 0x101
 100cbbc:	9329      	str	r3, [sp, #164]	; 0xa4
 100cbbe:	e9c9 2100 	strd	r2, r1, [r9]
 100cbc2:	bfd8      	it	le
 100cbc4:	f109 0908 	addle.w	r9, r9, #8
 100cbc8:	f300 84b6 	bgt.w	100d538 <_svfprintf_r+0x1240>
 100cbcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100cbce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100cbd0:	4293      	cmp	r3, r2
 100cbd2:	f280 8298 	bge.w	100d106 <_svfprintf_r+0xe0e>
 100cbd6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 100cbd8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100cbdc:	f8c9 1000 	str.w	r1, [r9]
 100cbe0:	3301      	adds	r3, #1
 100cbe2:	9916      	ldr	r1, [sp, #88]	; 0x58
 100cbe4:	2b07      	cmp	r3, #7
 100cbe6:	440a      	add	r2, r1
 100cbe8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100cbec:	f8c9 1004 	str.w	r1, [r9, #4]
 100cbf0:	bfd8      	it	le
 100cbf2:	f109 0908 	addle.w	r9, r9, #8
 100cbf6:	f300 8356 	bgt.w	100d2a6 <_svfprintf_r+0xfae>
 100cbfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100cbfc:	1e5c      	subs	r4, r3, #1
 100cbfe:	2c00      	cmp	r4, #0
 100cc00:	f77f ad37 	ble.w	100c672 <_svfprintf_r+0x37a>
 100cc04:	2c10      	cmp	r4, #16
 100cc06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100cc08:	f340 84d0 	ble.w	100d5ac <_svfprintf_r+0x12b4>
 100cc0c:	9604      	str	r6, [sp, #16]
 100cc0e:	2510      	movs	r5, #16
 100cc10:	4626      	mov	r6, r4
 100cc12:	4619      	mov	r1, r3
 100cc14:	9c08      	ldr	r4, [sp, #32]
 100cc16:	e003      	b.n	100cc20 <_svfprintf_r+0x928>
 100cc18:	3e10      	subs	r6, #16
 100cc1a:	2e10      	cmp	r6, #16
 100cc1c:	f340 84c3 	ble.w	100d5a6 <_svfprintf_r+0x12ae>
 100cc20:	3101      	adds	r1, #1
 100cc22:	4b6f      	ldr	r3, [pc, #444]	; (100cde0 <_svfprintf_r+0xae8>)
 100cc24:	2907      	cmp	r1, #7
 100cc26:	f102 0210 	add.w	r2, r2, #16
 100cc2a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100cc2e:	e9c9 3500 	strd	r3, r5, [r9]
 100cc32:	f109 0908 	add.w	r9, r9, #8
 100cc36:	ddef      	ble.n	100cc18 <_svfprintf_r+0x920>
 100cc38:	aa28      	add	r2, sp, #160	; 0xa0
 100cc3a:	4621      	mov	r1, r4
 100cc3c:	4650      	mov	r0, sl
 100cc3e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cc42:	f003 f98d 	bl	100ff60 <__ssprint_r>
 100cc46:	2800      	cmp	r0, #0
 100cc48:	f040 80b9 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100cc4c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100cc50:	e7e2      	b.n	100cc18 <_svfprintf_r+0x920>
 100cc52:	9b06      	ldr	r3, [sp, #24]
 100cc54:	9903      	ldr	r1, [sp, #12]
 100cc56:	1a5c      	subs	r4, r3, r1
 100cc58:	2c00      	cmp	r4, #0
 100cc5a:	f77f acf1 	ble.w	100c640 <_svfprintf_r+0x348>
 100cc5e:	2c10      	cmp	r4, #16
 100cc60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100cc62:	dd26      	ble.n	100ccb2 <_svfprintf_r+0x9ba>
 100cc64:	960c      	str	r6, [sp, #48]	; 0x30
 100cc66:	2510      	movs	r5, #16
 100cc68:	4626      	mov	r6, r4
 100cc6a:	4619      	mov	r1, r3
 100cc6c:	9c08      	ldr	r4, [sp, #32]
 100cc6e:	e002      	b.n	100cc76 <_svfprintf_r+0x97e>
 100cc70:	3e10      	subs	r6, #16
 100cc72:	2e10      	cmp	r6, #16
 100cc74:	dd1a      	ble.n	100ccac <_svfprintf_r+0x9b4>
 100cc76:	3101      	adds	r1, #1
 100cc78:	4b59      	ldr	r3, [pc, #356]	; (100cde0 <_svfprintf_r+0xae8>)
 100cc7a:	2907      	cmp	r1, #7
 100cc7c:	f102 0210 	add.w	r2, r2, #16
 100cc80:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100cc84:	e9c9 3500 	strd	r3, r5, [r9]
 100cc88:	f109 0908 	add.w	r9, r9, #8
 100cc8c:	ddf0      	ble.n	100cc70 <_svfprintf_r+0x978>
 100cc8e:	aa28      	add	r2, sp, #160	; 0xa0
 100cc90:	4621      	mov	r1, r4
 100cc92:	4650      	mov	r0, sl
 100cc94:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cc98:	f003 f962 	bl	100ff60 <__ssprint_r>
 100cc9c:	2800      	cmp	r0, #0
 100cc9e:	f040 808e 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100cca2:	3e10      	subs	r6, #16
 100cca4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100cca8:	2e10      	cmp	r6, #16
 100ccaa:	dce4      	bgt.n	100cc76 <_svfprintf_r+0x97e>
 100ccac:	4634      	mov	r4, r6
 100ccae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 100ccb0:	460b      	mov	r3, r1
 100ccb2:	3301      	adds	r3, #1
 100ccb4:	494a      	ldr	r1, [pc, #296]	; (100cde0 <_svfprintf_r+0xae8>)
 100ccb6:	2b07      	cmp	r3, #7
 100ccb8:	4422      	add	r2, r4
 100ccba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100ccbe:	e9c9 1400 	strd	r1, r4, [r9]
 100ccc2:	bfd8      	it	le
 100ccc4:	f109 0908 	addle.w	r9, r9, #8
 100ccc8:	f77f acba 	ble.w	100c640 <_svfprintf_r+0x348>
 100cccc:	aa28      	add	r2, sp, #160	; 0xa0
 100ccce:	9908      	ldr	r1, [sp, #32]
 100ccd0:	4650      	mov	r0, sl
 100ccd2:	f003 f945 	bl	100ff60 <__ssprint_r>
 100ccd6:	2800      	cmp	r0, #0
 100ccd8:	d171      	bne.n	100cdbe <_svfprintf_r+0xac6>
 100ccda:	9b04      	ldr	r3, [sp, #16]
 100ccdc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cce0:	9907      	ldr	r1, [sp, #28]
 100cce2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100cce4:	1a5c      	subs	r4, r3, r1
 100cce6:	2c00      	cmp	r4, #0
 100cce8:	f77f acb0 	ble.w	100c64c <_svfprintf_r+0x354>
 100ccec:	2c10      	cmp	r4, #16
 100ccee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ccf0:	dd25      	ble.n	100cd3e <_svfprintf_r+0xa46>
 100ccf2:	9604      	str	r6, [sp, #16]
 100ccf4:	2510      	movs	r5, #16
 100ccf6:	4626      	mov	r6, r4
 100ccf8:	4619      	mov	r1, r3
 100ccfa:	9c08      	ldr	r4, [sp, #32]
 100ccfc:	e002      	b.n	100cd04 <_svfprintf_r+0xa0c>
 100ccfe:	3e10      	subs	r6, #16
 100cd00:	2e10      	cmp	r6, #16
 100cd02:	dd19      	ble.n	100cd38 <_svfprintf_r+0xa40>
 100cd04:	3101      	adds	r1, #1
 100cd06:	4b36      	ldr	r3, [pc, #216]	; (100cde0 <_svfprintf_r+0xae8>)
 100cd08:	2907      	cmp	r1, #7
 100cd0a:	f102 0210 	add.w	r2, r2, #16
 100cd0e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100cd12:	e9c9 3500 	strd	r3, r5, [r9]
 100cd16:	f109 0908 	add.w	r9, r9, #8
 100cd1a:	ddf0      	ble.n	100ccfe <_svfprintf_r+0xa06>
 100cd1c:	aa28      	add	r2, sp, #160	; 0xa0
 100cd1e:	4621      	mov	r1, r4
 100cd20:	4650      	mov	r0, sl
 100cd22:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cd26:	f003 f91b 	bl	100ff60 <__ssprint_r>
 100cd2a:	2800      	cmp	r0, #0
 100cd2c:	d147      	bne.n	100cdbe <_svfprintf_r+0xac6>
 100cd2e:	3e10      	subs	r6, #16
 100cd30:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100cd34:	2e10      	cmp	r6, #16
 100cd36:	dce5      	bgt.n	100cd04 <_svfprintf_r+0xa0c>
 100cd38:	4634      	mov	r4, r6
 100cd3a:	9e04      	ldr	r6, [sp, #16]
 100cd3c:	460b      	mov	r3, r1
 100cd3e:	3301      	adds	r3, #1
 100cd40:	4927      	ldr	r1, [pc, #156]	; (100cde0 <_svfprintf_r+0xae8>)
 100cd42:	2b07      	cmp	r3, #7
 100cd44:	4422      	add	r2, r4
 100cd46:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100cd4a:	e9c9 1400 	strd	r1, r4, [r9]
 100cd4e:	bfd8      	it	le
 100cd50:	f109 0908 	addle.w	r9, r9, #8
 100cd54:	f77f ac7a 	ble.w	100c64c <_svfprintf_r+0x354>
 100cd58:	aa28      	add	r2, sp, #160	; 0xa0
 100cd5a:	9908      	ldr	r1, [sp, #32]
 100cd5c:	4650      	mov	r0, sl
 100cd5e:	f003 f8ff 	bl	100ff60 <__ssprint_r>
 100cd62:	bb60      	cbnz	r0, 100cdbe <_svfprintf_r+0xac6>
 100cd64:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100cd66:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cd6a:	e46f      	b.n	100c64c <_svfprintf_r+0x354>
 100cd6c:	4611      	mov	r1, r2
 100cd6e:	08e2      	lsrs	r2, r4, #3
 100cd70:	08e8      	lsrs	r0, r5, #3
 100cd72:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 100cd76:	f004 0307 	and.w	r3, r4, #7
 100cd7a:	4605      	mov	r5, r0
 100cd7c:	3330      	adds	r3, #48	; 0x30
 100cd7e:	4614      	mov	r4, r2
 100cd80:	ea54 0005 	orrs.w	r0, r4, r5
 100cd84:	f801 3c01 	strb.w	r3, [r1, #-1]
 100cd88:	f101 32ff 	add.w	r2, r1, #4294967295
 100cd8c:	d1ee      	bne.n	100cd6c <_svfprintf_r+0xa74>
 100cd8e:	9e03      	ldr	r6, [sp, #12]
 100cd90:	920b      	str	r2, [sp, #44]	; 0x2c
 100cd92:	4630      	mov	r0, r6
 100cd94:	2b30      	cmp	r3, #48	; 0x30
 100cd96:	bf0c      	ite	eq
 100cd98:	2000      	moveq	r0, #0
 100cd9a:	f000 0001 	andne.w	r0, r0, #1
 100cd9e:	2800      	cmp	r0, #0
 100cda0:	f040 840f 	bne.w	100d5c2 <_svfprintf_r+0x12ca>
 100cda4:	ab54      	add	r3, sp, #336	; 0x150
 100cda6:	1a9b      	subs	r3, r3, r2
 100cda8:	9307      	str	r3, [sp, #28]
 100cdaa:	f7ff bbfd 	b.w	100c5a8 <_svfprintf_r+0x2b0>
 100cdae:	aa28      	add	r2, sp, #160	; 0xa0
 100cdb0:	9908      	ldr	r1, [sp, #32]
 100cdb2:	4650      	mov	r0, sl
 100cdb4:	f003 f8d4 	bl	100ff60 <__ssprint_r>
 100cdb8:	2800      	cmp	r0, #0
 100cdba:	f43f ac6d 	beq.w	100c698 <_svfprintf_r+0x3a0>
 100cdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100cdc0:	2b00      	cmp	r3, #0
 100cdc2:	f43f ab8d 	beq.w	100c4e0 <_svfprintf_r+0x1e8>
 100cdc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 100cdc8:	4650      	mov	r0, sl
 100cdca:	f002 fa01 	bl	100f1d0 <_free_r>
 100cdce:	f7ff bb87 	b.w	100c4e0 <_svfprintf_r+0x1e8>
 100cdd2:	bf00      	nop
 100cdd4:	f3af 8000 	nop.w
 100cdd8:	ffffffff 	.word	0xffffffff
 100cddc:	7fefffff 	.word	0x7fefffff
 100cde0:	01011734 	.word	0x01011734
 100cde4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100cde6:	3201      	adds	r2, #1
 100cde8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100cdea:	f109 0308 	add.w	r3, r9, #8
 100cdee:	2c01      	cmp	r4, #1
 100cdf0:	f100 0101 	add.w	r1, r0, #1
 100cdf4:	f340 8134 	ble.w	100d060 <_svfprintf_r+0xd68>
 100cdf8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100cdfa:	2907      	cmp	r1, #7
 100cdfc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ce00:	f8c9 0000 	str.w	r0, [r9]
 100ce04:	f04f 0001 	mov.w	r0, #1
 100ce08:	f8c9 0004 	str.w	r0, [r9, #4]
 100ce0c:	f300 8163 	bgt.w	100d0d6 <_svfprintf_r+0xdde>
 100ce10:	3101      	adds	r1, #1
 100ce12:	9816      	ldr	r0, [sp, #88]	; 0x58
 100ce14:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100ce16:	2907      	cmp	r1, #7
 100ce18:	4402      	add	r2, r0
 100ce1a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ce1e:	e9c3 4000 	strd	r4, r0, [r3]
 100ce22:	bfd8      	it	le
 100ce24:	3308      	addle	r3, #8
 100ce26:	f300 8162 	bgt.w	100d0ee <_svfprintf_r+0xdf6>
 100ce2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100ce2e:	1c48      	adds	r0, r1, #1
 100ce30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100ce32:	f103 0908 	add.w	r9, r3, #8
 100ce36:	4684      	mov	ip, r0
 100ce38:	3c01      	subs	r4, #1
 100ce3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ce3e:	f000 8122 	beq.w	100d086 <_svfprintf_r+0xd8e>
 100ce42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100ce44:	2807      	cmp	r0, #7
 100ce46:	4422      	add	r2, r4
 100ce48:	605c      	str	r4, [r3, #4]
 100ce4a:	f105 0501 	add.w	r5, r5, #1
 100ce4e:	922a      	str	r2, [sp, #168]	; 0xa8
 100ce50:	601d      	str	r5, [r3, #0]
 100ce52:	9029      	str	r0, [sp, #164]	; 0xa4
 100ce54:	f300 82de 	bgt.w	100d414 <_svfprintf_r+0x111c>
 100ce58:	f103 0410 	add.w	r4, r3, #16
 100ce5c:	1c88      	adds	r0, r1, #2
 100ce5e:	464b      	mov	r3, r9
 100ce60:	46a1      	mov	r9, r4
 100ce62:	9918      	ldr	r1, [sp, #96]	; 0x60
 100ce64:	2807      	cmp	r0, #7
 100ce66:	9029      	str	r0, [sp, #164]	; 0xa4
 100ce68:	440a      	add	r2, r1
 100ce6a:	922a      	str	r2, [sp, #168]	; 0xa8
 100ce6c:	6059      	str	r1, [r3, #4]
 100ce6e:	a922      	add	r1, sp, #136	; 0x88
 100ce70:	6019      	str	r1, [r3, #0]
 100ce72:	f77f abfe 	ble.w	100c672 <_svfprintf_r+0x37a>
 100ce76:	aa28      	add	r2, sp, #160	; 0xa0
 100ce78:	9908      	ldr	r1, [sp, #32]
 100ce7a:	4650      	mov	r0, sl
 100ce7c:	f003 f870 	bl	100ff60 <__ssprint_r>
 100ce80:	2800      	cmp	r0, #0
 100ce82:	d19c      	bne.n	100cdbe <_svfprintf_r+0xac6>
 100ce84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ce86:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ce8a:	f7ff bbf2 	b.w	100c672 <_svfprintf_r+0x37a>
 100ce8e:	aa28      	add	r2, sp, #160	; 0xa0
 100ce90:	9908      	ldr	r1, [sp, #32]
 100ce92:	4650      	mov	r0, sl
 100ce94:	f003 f864 	bl	100ff60 <__ssprint_r>
 100ce98:	2800      	cmp	r0, #0
 100ce9a:	d190      	bne.n	100cdbe <_svfprintf_r+0xac6>
 100ce9c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ce9e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cea2:	f7ff bbb6 	b.w	100c612 <_svfprintf_r+0x31a>
 100cea6:	aa28      	add	r2, sp, #160	; 0xa0
 100cea8:	9908      	ldr	r1, [sp, #32]
 100ceaa:	4650      	mov	r0, sl
 100ceac:	f003 f858 	bl	100ff60 <__ssprint_r>
 100ceb0:	2800      	cmp	r0, #0
 100ceb2:	d184      	bne.n	100cdbe <_svfprintf_r+0xac6>
 100ceb4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ceb6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ceba:	f7ff bbbd 	b.w	100c638 <_svfprintf_r+0x340>
 100cebe:	2c10      	cmp	r4, #16
 100cec0:	f241 7524 	movw	r5, #5924	; 0x1724
 100cec4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100cec6:	f2c0 1501 	movt	r5, #257	; 0x101
 100ceca:	dd24      	ble.n	100cf16 <_svfprintf_r+0xc1e>
 100cecc:	9704      	str	r7, [sp, #16]
 100cece:	2610      	movs	r6, #16
 100ced0:	462f      	mov	r7, r5
 100ced2:	4619      	mov	r1, r3
 100ced4:	9d08      	ldr	r5, [sp, #32]
 100ced6:	e002      	b.n	100cede <_svfprintf_r+0xbe6>
 100ced8:	3c10      	subs	r4, #16
 100ceda:	2c10      	cmp	r4, #16
 100cedc:	dd18      	ble.n	100cf10 <_svfprintf_r+0xc18>
 100cede:	3101      	adds	r1, #1
 100cee0:	3210      	adds	r2, #16
 100cee2:	2907      	cmp	r1, #7
 100cee4:	e9c9 7600 	strd	r7, r6, [r9]
 100cee8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ceec:	f109 0908 	add.w	r9, r9, #8
 100cef0:	ddf2      	ble.n	100ced8 <_svfprintf_r+0xbe0>
 100cef2:	aa28      	add	r2, sp, #160	; 0xa0
 100cef4:	4629      	mov	r1, r5
 100cef6:	4650      	mov	r0, sl
 100cef8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cefc:	f003 f830 	bl	100ff60 <__ssprint_r>
 100cf00:	2800      	cmp	r0, #0
 100cf02:	f47f af5c 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100cf06:	3c10      	subs	r4, #16
 100cf08:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100cf0c:	2c10      	cmp	r4, #16
 100cf0e:	dce6      	bgt.n	100cede <_svfprintf_r+0xbe6>
 100cf10:	463d      	mov	r5, r7
 100cf12:	9f04      	ldr	r7, [sp, #16]
 100cf14:	460b      	mov	r3, r1
 100cf16:	3301      	adds	r3, #1
 100cf18:	4422      	add	r2, r4
 100cf1a:	2b07      	cmp	r3, #7
 100cf1c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100cf20:	e9c9 5400 	strd	r5, r4, [r9]
 100cf24:	f77f abad 	ble.w	100c682 <_svfprintf_r+0x38a>
 100cf28:	aa28      	add	r2, sp, #160	; 0xa0
 100cf2a:	9908      	ldr	r1, [sp, #32]
 100cf2c:	4650      	mov	r0, sl
 100cf2e:	f003 f817 	bl	100ff60 <__ssprint_r>
 100cf32:	2800      	cmp	r0, #0
 100cf34:	f47f af43 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100cf38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100cf3a:	f7ff bba2 	b.w	100c682 <_svfprintf_r+0x38a>
 100cf3e:	ab54      	add	r3, sp, #336	; 0x150
 100cf40:	9204      	str	r2, [sp, #16]
 100cf42:	930b      	str	r3, [sp, #44]	; 0x2c
 100cf44:	9207      	str	r2, [sp, #28]
 100cf46:	f7ff bb2f 	b.w	100c5a8 <_svfprintf_r+0x2b0>
 100cf4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100cf4c:	2900      	cmp	r1, #0
 100cf4e:	f340 82a2 	ble.w	100d496 <_svfprintf_r+0x119e>
 100cf52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100cf54:	9912      	ldr	r1, [sp, #72]	; 0x48
 100cf56:	428b      	cmp	r3, r1
 100cf58:	bfa8      	it	ge
 100cf5a:	460b      	movge	r3, r1
 100cf5c:	2b00      	cmp	r3, #0
 100cf5e:	461c      	mov	r4, r3
 100cf60:	dd0f      	ble.n	100cf82 <_svfprintf_r+0xc8a>
 100cf62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100cf64:	4422      	add	r2, r4
 100cf66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100cf68:	3301      	adds	r3, #1
 100cf6a:	f8c9 4004 	str.w	r4, [r9, #4]
 100cf6e:	2b07      	cmp	r3, #7
 100cf70:	922a      	str	r2, [sp, #168]	; 0xa8
 100cf72:	f8c9 1000 	str.w	r1, [r9]
 100cf76:	bfd8      	it	le
 100cf78:	f109 0908 	addle.w	r9, r9, #8
 100cf7c:	9329      	str	r3, [sp, #164]	; 0xa4
 100cf7e:	f300 84e1 	bgt.w	100d944 <_svfprintf_r+0x164c>
 100cf82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100cf84:	2c00      	cmp	r4, #0
 100cf86:	bfa8      	it	ge
 100cf88:	1b1b      	subge	r3, r3, r4
 100cf8a:	2b00      	cmp	r3, #0
 100cf8c:	461c      	mov	r4, r3
 100cf8e:	f300 81b9 	bgt.w	100d304 <_svfprintf_r+0x100c>
 100cf92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100cf94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100cf96:	440b      	add	r3, r1
 100cf98:	0571      	lsls	r1, r6, #21
 100cf9a:	461d      	mov	r5, r3
 100cf9c:	f100 81db 	bmi.w	100d356 <_svfprintf_r+0x105e>
 100cfa0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100cfa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100cfa4:	429c      	cmp	r4, r3
 100cfa6:	db02      	blt.n	100cfae <_svfprintf_r+0xcb6>
 100cfa8:	07f3      	lsls	r3, r6, #31
 100cfaa:	f140 84d8 	bpl.w	100d95e <_svfprintf_r+0x1666>
 100cfae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100cfb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 100cfb2:	3301      	adds	r3, #1
 100cfb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100cfb6:	2b07      	cmp	r3, #7
 100cfb8:	440a      	add	r2, r1
 100cfba:	f8c9 1004 	str.w	r1, [r9, #4]
 100cfbe:	f8c9 0000 	str.w	r0, [r9]
 100cfc2:	bfd8      	it	le
 100cfc4:	f109 0908 	addle.w	r9, r9, #8
 100cfc8:	922a      	str	r2, [sp, #168]	; 0xa8
 100cfca:	9329      	str	r3, [sp, #164]	; 0xa4
 100cfcc:	f300 85c4 	bgt.w	100db58 <_svfprintf_r+0x1860>
 100cfd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100cfd2:	4619      	mov	r1, r3
 100cfd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100cfd6:	4419      	add	r1, r3
 100cfd8:	1b1b      	subs	r3, r3, r4
 100cfda:	1b4c      	subs	r4, r1, r5
 100cfdc:	429c      	cmp	r4, r3
 100cfde:	bfa8      	it	ge
 100cfe0:	461c      	movge	r4, r3
 100cfe2:	2c00      	cmp	r4, #0
 100cfe4:	dd0e      	ble.n	100d004 <_svfprintf_r+0xd0c>
 100cfe6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100cfe8:	4422      	add	r2, r4
 100cfea:	f8c9 5000 	str.w	r5, [r9]
 100cfee:	3101      	adds	r1, #1
 100cff0:	f8c9 4004 	str.w	r4, [r9, #4]
 100cff4:	2907      	cmp	r1, #7
 100cff6:	922a      	str	r2, [sp, #168]	; 0xa8
 100cff8:	9129      	str	r1, [sp, #164]	; 0xa4
 100cffa:	bfd8      	it	le
 100cffc:	f109 0908 	addle.w	r9, r9, #8
 100d000:	f300 85b8 	bgt.w	100db74 <_svfprintf_r+0x187c>
 100d004:	2c00      	cmp	r4, #0
 100d006:	bfac      	ite	ge
 100d008:	1b1c      	subge	r4, r3, r4
 100d00a:	461c      	movlt	r4, r3
 100d00c:	2c00      	cmp	r4, #0
 100d00e:	f77f ab30 	ble.w	100c672 <_svfprintf_r+0x37a>
 100d012:	2c10      	cmp	r4, #16
 100d014:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d016:	f340 82c9 	ble.w	100d5ac <_svfprintf_r+0x12b4>
 100d01a:	9604      	str	r6, [sp, #16]
 100d01c:	2510      	movs	r5, #16
 100d01e:	4626      	mov	r6, r4
 100d020:	4619      	mov	r1, r3
 100d022:	9c08      	ldr	r4, [sp, #32]
 100d024:	e003      	b.n	100d02e <_svfprintf_r+0xd36>
 100d026:	3e10      	subs	r6, #16
 100d028:	2e10      	cmp	r6, #16
 100d02a:	f340 82bc 	ble.w	100d5a6 <_svfprintf_r+0x12ae>
 100d02e:	3101      	adds	r1, #1
 100d030:	4bb9      	ldr	r3, [pc, #740]	; (100d318 <_svfprintf_r+0x1020>)
 100d032:	2907      	cmp	r1, #7
 100d034:	f102 0210 	add.w	r2, r2, #16
 100d038:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d03c:	e9c9 3500 	strd	r3, r5, [r9]
 100d040:	f109 0908 	add.w	r9, r9, #8
 100d044:	ddef      	ble.n	100d026 <_svfprintf_r+0xd2e>
 100d046:	aa28      	add	r2, sp, #160	; 0xa0
 100d048:	4621      	mov	r1, r4
 100d04a:	4650      	mov	r0, sl
 100d04c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d050:	f002 ff86 	bl	100ff60 <__ssprint_r>
 100d054:	2800      	cmp	r0, #0
 100d056:	f47f aeb2 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d05a:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d05e:	e7e2      	b.n	100d026 <_svfprintf_r+0xd2e>
 100d060:	07f4      	lsls	r4, r6, #31
 100d062:	f53f aec9 	bmi.w	100cdf8 <_svfprintf_r+0xb00>
 100d066:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 100d068:	2907      	cmp	r1, #7
 100d06a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d06e:	f8c9 4000 	str.w	r4, [r9]
 100d072:	f04f 0401 	mov.w	r4, #1
 100d076:	f8c9 4004 	str.w	r4, [r9, #4]
 100d07a:	f300 81cb 	bgt.w	100d414 <_svfprintf_r+0x111c>
 100d07e:	3002      	adds	r0, #2
 100d080:	f109 0910 	add.w	r9, r9, #16
 100d084:	e6ed      	b.n	100ce62 <_svfprintf_r+0xb6a>
 100d086:	2c00      	cmp	r4, #0
 100d088:	f77f aeeb 	ble.w	100ce62 <_svfprintf_r+0xb6a>
 100d08c:	2c10      	cmp	r4, #16
 100d08e:	f340 869e 	ble.w	100ddce <_svfprintf_r+0x1ad6>
 100d092:	2510      	movs	r5, #16
 100d094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 100d098:	e005      	b.n	100d0a6 <_svfprintf_r+0xdae>
 100d09a:	3c10      	subs	r4, #16
 100d09c:	f101 0c01 	add.w	ip, r1, #1
 100d0a0:	2c10      	cmp	r4, #16
 100d0a2:	f340 8302 	ble.w	100d6aa <_svfprintf_r+0x13b2>
 100d0a6:	489c      	ldr	r0, [pc, #624]	; (100d318 <_svfprintf_r+0x1020>)
 100d0a8:	4661      	mov	r1, ip
 100d0aa:	2907      	cmp	r1, #7
 100d0ac:	f102 0210 	add.w	r2, r2, #16
 100d0b0:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 100d0b4:	e9c3 0500 	strd	r0, r5, [r3]
 100d0b8:	f103 0308 	add.w	r3, r3, #8
 100d0bc:	dded      	ble.n	100d09a <_svfprintf_r+0xda2>
 100d0be:	aa28      	add	r2, sp, #160	; 0xa0
 100d0c0:	4649      	mov	r1, r9
 100d0c2:	4650      	mov	r0, sl
 100d0c4:	f002 ff4c 	bl	100ff60 <__ssprint_r>
 100d0c8:	ab2b      	add	r3, sp, #172	; 0xac
 100d0ca:	2800      	cmp	r0, #0
 100d0cc:	f47f ae77 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d0d0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d0d4:	e7e1      	b.n	100d09a <_svfprintf_r+0xda2>
 100d0d6:	aa28      	add	r2, sp, #160	; 0xa0
 100d0d8:	9908      	ldr	r1, [sp, #32]
 100d0da:	4650      	mov	r0, sl
 100d0dc:	f002 ff40 	bl	100ff60 <__ssprint_r>
 100d0e0:	2800      	cmp	r0, #0
 100d0e2:	f47f ae6c 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d0e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d0e8:	ab2b      	add	r3, sp, #172	; 0xac
 100d0ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100d0ec:	e690      	b.n	100ce10 <_svfprintf_r+0xb18>
 100d0ee:	aa28      	add	r2, sp, #160	; 0xa0
 100d0f0:	9908      	ldr	r1, [sp, #32]
 100d0f2:	4650      	mov	r0, sl
 100d0f4:	f002 ff34 	bl	100ff60 <__ssprint_r>
 100d0f8:	2800      	cmp	r0, #0
 100d0fa:	f47f ae60 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d0fe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d100:	ab2b      	add	r3, sp, #172	; 0xac
 100d102:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100d104:	e691      	b.n	100ce2a <_svfprintf_r+0xb32>
 100d106:	07f4      	lsls	r4, r6, #31
 100d108:	bf58      	it	pl
 100d10a:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 100d10c:	f57f aab1 	bpl.w	100c672 <_svfprintf_r+0x37a>
 100d110:	e561      	b.n	100cbd6 <_svfprintf_r+0x8de>
 100d112:	eeb4 8b48 	vcmp.f64	d8, d8
 100d116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d11a:	f180 862f 	bvs.w	100dd7c <_svfprintf_r+0x1a84>
 100d11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100d120:	f023 0420 	bic.w	r4, r3, #32
 100d124:	2c41      	cmp	r4, #65	; 0x41
 100d126:	f040 82e6 	bne.w	100d6f6 <_svfprintf_r+0x13fe>
 100d12a:	2b61      	cmp	r3, #97	; 0x61
 100d12c:	f04f 0230 	mov.w	r2, #48	; 0x30
 100d130:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 100d134:	bf0c      	ite	eq
 100d136:	2378      	moveq	r3, #120	; 0x78
 100d138:	2358      	movne	r3, #88	; 0x58
 100d13a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100d13e:	9b04      	ldr	r3, [sp, #16]
 100d140:	2b63      	cmp	r3, #99	; 0x63
 100d142:	f300 848e 	bgt.w	100da62 <_svfprintf_r+0x176a>
 100d146:	2300      	movs	r3, #0
 100d148:	930a      	str	r3, [sp, #40]	; 0x28
 100d14a:	ab3b      	add	r3, sp, #236	; 0xec
 100d14c:	930b      	str	r3, [sp, #44]	; 0x2c
 100d14e:	ee18 3a90 	vmov	r3, s17
 100d152:	2b00      	cmp	r3, #0
 100d154:	f280 855a 	bge.w	100dc0c <_svfprintf_r+0x1914>
 100d158:	eeb1 0b48 	vneg.f64	d0, d8
 100d15c:	232d      	movs	r3, #45	; 0x2d
 100d15e:	930c      	str	r3, [sp, #48]	; 0x30
 100d160:	a81f      	add	r0, sp, #124	; 0x7c
 100d162:	f002 febd 	bl	100fee0 <frexp>
 100d166:	9a04      	ldr	r2, [sp, #16]
 100d168:	990e      	ldr	r1, [sp, #56]	; 0x38
 100d16a:	f243 0004 	movw	r0, #12292	; 0x3004
 100d16e:	f2c0 1001 	movt	r0, #257	; 0x101
 100d172:	3a01      	subs	r2, #1
 100d174:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100d176:	ee20 0b0b 	vmul.f64	d0, d0, d11
 100d17a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100d17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d182:	bf04      	itt	eq
 100d184:	2301      	moveq	r3, #1
 100d186:	931f      	streq	r3, [sp, #124]	; 0x7c
 100d188:	f642 63b4 	movw	r3, #11956	; 0x2eb4
 100d18c:	f2c0 1301 	movt	r3, #257	; 0x101
 100d190:	2961      	cmp	r1, #97	; 0x61
 100d192:	bf18      	it	ne
 100d194:	4618      	movne	r0, r3
 100d196:	e005      	b.n	100d1a4 <_svfprintf_r+0xeac>
 100d198:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100d19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d1a0:	d015      	beq.n	100d1ce <_svfprintf_r+0xed6>
 100d1a2:	461d      	mov	r5, r3
 100d1a4:	ee20 0b09 	vmul.f64	d0, d0, d9
 100d1a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 100d1ac:	462b      	mov	r3, r5
 100d1ae:	4611      	mov	r1, r2
 100d1b0:	f102 32ff 	add.w	r2, r2, #4294967295
 100d1b4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 100d1b8:	ee17 ca90 	vmov	ip, s15
 100d1bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 100d1c0:	ee30 0b46 	vsub.f64	d0, d0, d6
 100d1c4:	f810 c00c 	ldrb.w	ip, [r0, ip]
 100d1c8:	f803 cb01 	strb.w	ip, [r3], #1
 100d1cc:	d1e4      	bne.n	100d198 <_svfprintf_r+0xea0>
 100d1ce:	eeb4 0bca 	vcmpe.f64	d0, d10
 100d1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d1d6:	f300 855f 	bgt.w	100dc98 <_svfprintf_r+0x19a0>
 100d1da:	eeb4 0b4a 	vcmp.f64	d0, d10
 100d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d1e2:	d104      	bne.n	100d1ee <_svfprintf_r+0xef6>
 100d1e4:	ee17 2a90 	vmov	r2, s15
 100d1e8:	07d2      	lsls	r2, r2, #31
 100d1ea:	f100 8555 	bmi.w	100dc98 <_svfprintf_r+0x19a0>
 100d1ee:	2900      	cmp	r1, #0
 100d1f0:	bfa2      	ittt	ge
 100d1f2:	1c4a      	addge	r2, r1, #1
 100d1f4:	18d2      	addge	r2, r2, r3
 100d1f6:	2130      	movge	r1, #48	; 0x30
 100d1f8:	db03      	blt.n	100d202 <_svfprintf_r+0xf0a>
 100d1fa:	f803 1b01 	strb.w	r1, [r3], #1
 100d1fe:	4293      	cmp	r3, r2
 100d200:	d1fb      	bne.n	100d1fa <_svfprintf_r+0xf02>
 100d202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100d204:	f046 0602 	orr.w	r6, r6, #2
 100d208:	1a9b      	subs	r3, r3, r2
 100d20a:	9312      	str	r3, [sp, #72]	; 0x48
 100d20c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100d20e:	9310      	str	r3, [sp, #64]	; 0x40
 100d210:	e2b5      	b.n	100d77e <_svfprintf_r+0x1486>
 100d212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d214:	06f4      	lsls	r4, r6, #27
 100d216:	f103 0204 	add.w	r2, r3, #4
 100d21a:	f100 85ea 	bmi.w	100ddf2 <_svfprintf_r+0x1afa>
 100d21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d220:	0670      	lsls	r0, r6, #25
 100d222:	bf48      	it	mi
 100d224:	f9b3 4000 	ldrshmi.w	r4, [r3]
 100d228:	d404      	bmi.n	100d234 <_svfprintf_r+0xf3c>
 100d22a:	05b1      	lsls	r1, r6, #22
 100d22c:	f140 83a9 	bpl.w	100d982 <_svfprintf_r+0x168a>
 100d230:	f993 4000 	ldrsb.w	r4, [r3]
 100d234:	17e5      	asrs	r5, r4, #31
 100d236:	9209      	str	r2, [sp, #36]	; 0x24
 100d238:	9603      	str	r6, [sp, #12]
 100d23a:	4622      	mov	r2, r4
 100d23c:	462b      	mov	r3, r5
 100d23e:	f7ff bb1e 	b.w	100c87e <_svfprintf_r+0x586>
 100d242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d244:	06f1      	lsls	r1, r6, #27
 100d246:	f852 4b04 	ldr.w	r4, [r2], #4
 100d24a:	f100 85d5 	bmi.w	100ddf8 <_svfprintf_r+0x1b00>
 100d24e:	0673      	lsls	r3, r6, #25
 100d250:	9209      	str	r2, [sp, #36]	; 0x24
 100d252:	9603      	str	r6, [sp, #12]
 100d254:	f140 823b 	bpl.w	100d6ce <_svfprintf_r+0x13d6>
 100d258:	b2a4      	uxth	r4, r4
 100d25a:	2500      	movs	r5, #0
 100d25c:	2301      	movs	r3, #1
 100d25e:	f7ff b97c 	b.w	100c55a <_svfprintf_r+0x262>
 100d262:	9905      	ldr	r1, [sp, #20]
 100d264:	6812      	ldr	r2, [r2, #0]
 100d266:	9309      	str	r3, [sp, #36]	; 0x24
 100d268:	17cd      	asrs	r5, r1, #31
 100d26a:	4608      	mov	r0, r1
 100d26c:	4629      	mov	r1, r5
 100d26e:	e9c2 0100 	strd	r0, r1, [r2]
 100d272:	f7ff b881 	b.w	100c378 <_svfprintf_r+0x80>
 100d276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d278:	06f1      	lsls	r1, r6, #27
 100d27a:	f852 4b04 	ldr.w	r4, [r2], #4
 100d27e:	f100 85db 	bmi.w	100de38 <_svfprintf_r+0x1b40>
 100d282:	0673      	lsls	r3, r6, #25
 100d284:	f140 822b 	bpl.w	100d6de <_svfprintf_r+0x13e6>
 100d288:	4633      	mov	r3, r6
 100d28a:	9209      	str	r2, [sp, #36]	; 0x24
 100d28c:	b2a4      	uxth	r4, r4
 100d28e:	2500      	movs	r5, #0
 100d290:	f7ff bb9b 	b.w	100c9ca <_svfprintf_r+0x6d2>
 100d294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d296:	2201      	movs	r2, #1
 100d298:	ac3b      	add	r4, sp, #236	; 0xec
 100d29a:	9203      	str	r2, [sp, #12]
 100d29c:	9207      	str	r2, [sp, #28]
 100d29e:	681b      	ldr	r3, [r3, #0]
 100d2a0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 100d2a4:	e409      	b.n	100caba <_svfprintf_r+0x7c2>
 100d2a6:	aa28      	add	r2, sp, #160	; 0xa0
 100d2a8:	9908      	ldr	r1, [sp, #32]
 100d2aa:	4650      	mov	r0, sl
 100d2ac:	f002 fe58 	bl	100ff60 <__ssprint_r>
 100d2b0:	2800      	cmp	r0, #0
 100d2b2:	f47f ad84 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d2b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d2b8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d2bc:	e49d      	b.n	100cbfa <_svfprintf_r+0x902>
 100d2be:	9804      	ldr	r0, [sp, #16]
 100d2c0:	f243 0318 	movw	r3, #12312	; 0x3018
 100d2c4:	9204      	str	r2, [sp, #16]
 100d2c6:	f2c0 1301 	movt	r3, #257	; 0x101
 100d2ca:	2806      	cmp	r0, #6
 100d2cc:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 100d2d0:	4611      	mov	r1, r2
 100d2d2:	9213      	str	r2, [sp, #76]	; 0x4c
 100d2d4:	bf28      	it	cs
 100d2d6:	2006      	movcs	r0, #6
 100d2d8:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100d2dc:	9003      	str	r0, [sp, #12]
 100d2de:	9007      	str	r0, [sp, #28]
 100d2e0:	930b      	str	r3, [sp, #44]	; 0x2c
 100d2e2:	f7ff b96e 	b.w	100c5c2 <_svfprintf_r+0x2ca>
 100d2e6:	2140      	movs	r1, #64	; 0x40
 100d2e8:	4650      	mov	r0, sl
 100d2ea:	f7fd fa45 	bl	100a778 <_malloc_r>
 100d2ee:	9b08      	ldr	r3, [sp, #32]
 100d2f0:	6018      	str	r0, [r3, #0]
 100d2f2:	6118      	str	r0, [r3, #16]
 100d2f4:	2800      	cmp	r0, #0
 100d2f6:	f000 8591 	beq.w	100de1c <_svfprintf_r+0x1b24>
 100d2fa:	9a08      	ldr	r2, [sp, #32]
 100d2fc:	2340      	movs	r3, #64	; 0x40
 100d2fe:	6153      	str	r3, [r2, #20]
 100d300:	f7ff b81a 	b.w	100c338 <_svfprintf_r+0x40>
 100d304:	2c10      	cmp	r4, #16
 100d306:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d308:	f340 82a9 	ble.w	100d85e <_svfprintf_r+0x1566>
 100d30c:	9604      	str	r6, [sp, #16]
 100d30e:	2510      	movs	r5, #16
 100d310:	4626      	mov	r6, r4
 100d312:	4619      	mov	r1, r3
 100d314:	9c08      	ldr	r4, [sp, #32]
 100d316:	e005      	b.n	100d324 <_svfprintf_r+0x102c>
 100d318:	01011734 	.word	0x01011734
 100d31c:	3e10      	subs	r6, #16
 100d31e:	2e10      	cmp	r6, #16
 100d320:	f340 829a 	ble.w	100d858 <_svfprintf_r+0x1560>
 100d324:	3101      	adds	r1, #1
 100d326:	4bb7      	ldr	r3, [pc, #732]	; (100d604 <_svfprintf_r+0x130c>)
 100d328:	2907      	cmp	r1, #7
 100d32a:	f102 0210 	add.w	r2, r2, #16
 100d32e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d332:	e9c9 3500 	strd	r3, r5, [r9]
 100d336:	f109 0908 	add.w	r9, r9, #8
 100d33a:	ddef      	ble.n	100d31c <_svfprintf_r+0x1024>
 100d33c:	aa28      	add	r2, sp, #160	; 0xa0
 100d33e:	4621      	mov	r1, r4
 100d340:	4650      	mov	r0, sl
 100d342:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d346:	f002 fe0b 	bl	100ff60 <__ssprint_r>
 100d34a:	2800      	cmp	r0, #0
 100d34c:	f47f ad37 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d350:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d354:	e7e2      	b.n	100d31c <_svfprintf_r+0x1024>
 100d356:	9911      	ldr	r1, [sp, #68]	; 0x44
 100d358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100d35a:	2b00      	cmp	r3, #0
 100d35c:	bfd8      	it	le
 100d35e:	2900      	cmple	r1, #0
 100d360:	f340 8556 	ble.w	100de10 <_svfprintf_r+0x1b18>
 100d364:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 100d368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 100d36c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100d36e:	9812      	ldr	r0, [sp, #72]	; 0x48
 100d370:	960c      	str	r6, [sp, #48]	; 0x30
 100d372:	461e      	mov	r6, r3
 100d374:	4401      	add	r1, r0
 100d376:	9107      	str	r1, [sp, #28]
 100d378:	2e00      	cmp	r6, #0
 100d37a:	d044      	beq.n	100d406 <_svfprintf_r+0x110e>
 100d37c:	3e01      	subs	r6, #1
 100d37e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d380:	9919      	ldr	r1, [sp, #100]	; 0x64
 100d382:	3301      	adds	r3, #1
 100d384:	981a      	ldr	r0, [sp, #104]	; 0x68
 100d386:	2b07      	cmp	r3, #7
 100d388:	440a      	add	r2, r1
 100d38a:	f8c9 1004 	str.w	r1, [r9, #4]
 100d38e:	f8c9 0000 	str.w	r0, [r9]
 100d392:	bfd8      	it	le
 100d394:	f109 0908 	addle.w	r9, r9, #8
 100d398:	922a      	str	r2, [sp, #168]	; 0xa8
 100d39a:	9329      	str	r3, [sp, #164]	; 0xa4
 100d39c:	f300 80c0 	bgt.w	100d520 <_svfprintf_r+0x1228>
 100d3a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 100d3a2:	9907      	ldr	r1, [sp, #28]
 100d3a4:	7803      	ldrb	r3, [r0, #0]
 100d3a6:	1b4c      	subs	r4, r1, r5
 100d3a8:	9104      	str	r1, [sp, #16]
 100d3aa:	429c      	cmp	r4, r3
 100d3ac:	bfa8      	it	ge
 100d3ae:	461c      	movge	r4, r3
 100d3b0:	2c00      	cmp	r4, #0
 100d3b2:	dd0e      	ble.n	100d3d2 <_svfprintf_r+0x10da>
 100d3b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d3b6:	4422      	add	r2, r4
 100d3b8:	f8c9 5000 	str.w	r5, [r9]
 100d3bc:	3301      	adds	r3, #1
 100d3be:	922a      	str	r2, [sp, #168]	; 0xa8
 100d3c0:	2b07      	cmp	r3, #7
 100d3c2:	f8c9 4004 	str.w	r4, [r9, #4]
 100d3c6:	9329      	str	r3, [sp, #164]	; 0xa4
 100d3c8:	f300 8107 	bgt.w	100d5da <_svfprintf_r+0x12e2>
 100d3cc:	7803      	ldrb	r3, [r0, #0]
 100d3ce:	f109 0908 	add.w	r9, r9, #8
 100d3d2:	2c00      	cmp	r4, #0
 100d3d4:	bfac      	ite	ge
 100d3d6:	1b1c      	subge	r4, r3, r4
 100d3d8:	461c      	movlt	r4, r3
 100d3da:	2c00      	cmp	r4, #0
 100d3dc:	dc29      	bgt.n	100d432 <_svfprintf_r+0x113a>
 100d3de:	441d      	add	r5, r3
 100d3e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100d3e2:	2e00      	cmp	r6, #0
 100d3e4:	bfd8      	it	le
 100d3e6:	2b00      	cmple	r3, #0
 100d3e8:	dcc6      	bgt.n	100d378 <_svfprintf_r+0x1080>
 100d3ea:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 100d3ee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 100d3f2:	9904      	ldr	r1, [sp, #16]
 100d3f4:	462b      	mov	r3, r5
 100d3f6:	428d      	cmp	r5, r1
 100d3f8:	bf28      	it	cs
 100d3fa:	460b      	movcs	r3, r1
 100d3fc:	461d      	mov	r5, r3
 100d3fe:	e5cf      	b.n	100cfa0 <_svfprintf_r+0xca8>
 100d400:	9603      	str	r6, [sp, #12]
 100d402:	f7ff bb1d 	b.w	100ca40 <_svfprintf_r+0x748>
 100d406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100d408:	3b01      	subs	r3, #1
 100d40a:	9314      	str	r3, [sp, #80]	; 0x50
 100d40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100d40e:	3b01      	subs	r3, #1
 100d410:	9311      	str	r3, [sp, #68]	; 0x44
 100d412:	e7b4      	b.n	100d37e <_svfprintf_r+0x1086>
 100d414:	aa28      	add	r2, sp, #160	; 0xa0
 100d416:	9908      	ldr	r1, [sp, #32]
 100d418:	4650      	mov	r0, sl
 100d41a:	f002 fda1 	bl	100ff60 <__ssprint_r>
 100d41e:	2800      	cmp	r0, #0
 100d420:	f47f accd 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d424:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100d426:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 100d42a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d42c:	ab2b      	add	r3, sp, #172	; 0xac
 100d42e:	3001      	adds	r0, #1
 100d430:	e517      	b.n	100ce62 <_svfprintf_r+0xb6a>
 100d432:	2c10      	cmp	r4, #16
 100d434:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100d436:	dd1f      	ble.n	100d478 <_svfprintf_r+0x1180>
 100d438:	2710      	movs	r7, #16
 100d43a:	e002      	b.n	100d442 <_svfprintf_r+0x114a>
 100d43c:	3c10      	subs	r4, #16
 100d43e:	2c10      	cmp	r4, #16
 100d440:	dd1a      	ble.n	100d478 <_svfprintf_r+0x1180>
 100d442:	3101      	adds	r1, #1
 100d444:	4b6f      	ldr	r3, [pc, #444]	; (100d604 <_svfprintf_r+0x130c>)
 100d446:	2907      	cmp	r1, #7
 100d448:	f102 0210 	add.w	r2, r2, #16
 100d44c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d450:	e9c9 3700 	strd	r3, r7, [r9]
 100d454:	f109 0908 	add.w	r9, r9, #8
 100d458:	ddf0      	ble.n	100d43c <_svfprintf_r+0x1144>
 100d45a:	aa28      	add	r2, sp, #160	; 0xa0
 100d45c:	4641      	mov	r1, r8
 100d45e:	4650      	mov	r0, sl
 100d460:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d464:	f002 fd7c 	bl	100ff60 <__ssprint_r>
 100d468:	2800      	cmp	r0, #0
 100d46a:	f47f aca8 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d46e:	3c10      	subs	r4, #16
 100d470:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d474:	2c10      	cmp	r4, #16
 100d476:	dce4      	bgt.n	100d442 <_svfprintf_r+0x114a>
 100d478:	3101      	adds	r1, #1
 100d47a:	4b62      	ldr	r3, [pc, #392]	; (100d604 <_svfprintf_r+0x130c>)
 100d47c:	2907      	cmp	r1, #7
 100d47e:	4422      	add	r2, r4
 100d480:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d484:	e9c9 3400 	strd	r3, r4, [r9]
 100d488:	f300 8337 	bgt.w	100dafa <_svfprintf_r+0x1802>
 100d48c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100d48e:	f109 0908 	add.w	r9, r9, #8
 100d492:	781b      	ldrb	r3, [r3, #0]
 100d494:	e7a3      	b.n	100d3de <_svfprintf_r+0x10e6>
 100d496:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d498:	3201      	adds	r2, #1
 100d49a:	f243 0020 	movw	r0, #12320	; 0x3020
 100d49e:	2401      	movs	r4, #1
 100d4a0:	3301      	adds	r3, #1
 100d4a2:	f2c0 1001 	movt	r0, #257	; 0x101
 100d4a6:	2b07      	cmp	r3, #7
 100d4a8:	e9c9 0400 	strd	r0, r4, [r9]
 100d4ac:	922a      	str	r2, [sp, #168]	; 0xa8
 100d4ae:	bfd8      	it	le
 100d4b0:	f109 0908 	addle.w	r9, r9, #8
 100d4b4:	9329      	str	r3, [sp, #164]	; 0xa4
 100d4b6:	f300 822c 	bgt.w	100d912 <_svfprintf_r+0x161a>
 100d4ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100d4bc:	430b      	orrs	r3, r1
 100d4be:	f000 8338 	beq.w	100db32 <_svfprintf_r+0x183a>
 100d4c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d4c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 100d4c6:	3301      	adds	r3, #1
 100d4c8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100d4ca:	2b07      	cmp	r3, #7
 100d4cc:	4402      	add	r2, r0
 100d4ce:	f8c9 0004 	str.w	r0, [r9, #4]
 100d4d2:	f8c9 4000 	str.w	r4, [r9]
 100d4d6:	bfd8      	it	le
 100d4d8:	f109 0908 	addle.w	r9, r9, #8
 100d4dc:	922a      	str	r2, [sp, #168]	; 0xa8
 100d4de:	9329      	str	r3, [sp, #164]	; 0xa4
 100d4e0:	f300 8319 	bgt.w	100db16 <_svfprintf_r+0x181e>
 100d4e4:	2900      	cmp	r1, #0
 100d4e6:	f2c0 8397 	blt.w	100dc18 <_svfprintf_r+0x1920>
 100d4ea:	3301      	adds	r3, #1
 100d4ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 100d4ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100d4f0:	2b07      	cmp	r3, #7
 100d4f2:	440a      	add	r2, r1
 100d4f4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d4f8:	e9c9 0100 	strd	r0, r1, [r9]
 100d4fc:	f77f a8b7 	ble.w	100c66e <_svfprintf_r+0x376>
 100d500:	e4b9      	b.n	100ce76 <_svfprintf_r+0xb7e>
 100d502:	aa28      	add	r2, sp, #160	; 0xa0
 100d504:	9908      	ldr	r1, [sp, #32]
 100d506:	4650      	mov	r0, sl
 100d508:	f002 fd2a 	bl	100ff60 <__ssprint_r>
 100d50c:	2800      	cmp	r0, #0
 100d50e:	f47f ac56 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d512:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d516:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d51a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d51c:	f7ff b866 	b.w	100c5ec <_svfprintf_r+0x2f4>
 100d520:	aa28      	add	r2, sp, #160	; 0xa0
 100d522:	4641      	mov	r1, r8
 100d524:	4650      	mov	r0, sl
 100d526:	f002 fd1b 	bl	100ff60 <__ssprint_r>
 100d52a:	2800      	cmp	r0, #0
 100d52c:	f47f ac47 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d530:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d532:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d536:	e733      	b.n	100d3a0 <_svfprintf_r+0x10a8>
 100d538:	aa28      	add	r2, sp, #160	; 0xa0
 100d53a:	9908      	ldr	r1, [sp, #32]
 100d53c:	4650      	mov	r0, sl
 100d53e:	f002 fd0f 	bl	100ff60 <__ssprint_r>
 100d542:	2800      	cmp	r0, #0
 100d544:	f47f ac3b 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d548:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d54c:	f7ff bb3e 	b.w	100cbcc <_svfprintf_r+0x8d4>
 100d550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100d552:	2208      	movs	r2, #8
 100d554:	2100      	movs	r1, #0
 100d556:	a826      	add	r0, sp, #152	; 0x98
 100d558:	9321      	str	r3, [sp, #132]	; 0x84
 100d55a:	f7fe f921 	bl	100b7a0 <memset>
 100d55e:	9b04      	ldr	r3, [sp, #16]
 100d560:	1c5a      	adds	r2, r3, #1
 100d562:	f000 8196 	beq.w	100d892 <_svfprintf_r+0x159a>
 100d566:	2400      	movs	r4, #0
 100d568:	9603      	str	r6, [sp, #12]
 100d56a:	f8cd 9010 	str.w	r9, [sp, #16]
 100d56e:	4626      	mov	r6, r4
 100d570:	4699      	mov	r9, r3
 100d572:	9509      	str	r5, [sp, #36]	; 0x24
 100d574:	e009      	b.n	100d58a <_svfprintf_r+0x1292>
 100d576:	f000 fcab 	bl	100ded0 <_wcrtomb_r>
 100d57a:	1833      	adds	r3, r6, r0
 100d57c:	3001      	adds	r0, #1
 100d57e:	f000 8383 	beq.w	100dc88 <_svfprintf_r+0x1990>
 100d582:	454b      	cmp	r3, r9
 100d584:	dc0a      	bgt.n	100d59c <_svfprintf_r+0x12a4>
 100d586:	461e      	mov	r6, r3
 100d588:	d008      	beq.n	100d59c <_svfprintf_r+0x12a4>
 100d58a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100d58c:	ab26      	add	r3, sp, #152	; 0x98
 100d58e:	a93b      	add	r1, sp, #236	; 0xec
 100d590:	4650      	mov	r0, sl
 100d592:	5915      	ldr	r5, [r2, r4]
 100d594:	3404      	adds	r4, #4
 100d596:	462a      	mov	r2, r5
 100d598:	2d00      	cmp	r5, #0
 100d59a:	d1ec      	bne.n	100d576 <_svfprintf_r+0x127e>
 100d59c:	9607      	str	r6, [sp, #28]
 100d59e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100d5a0:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 100d5a4:	e183      	b.n	100d8ae <_svfprintf_r+0x15b6>
 100d5a6:	4634      	mov	r4, r6
 100d5a8:	9e04      	ldr	r6, [sp, #16]
 100d5aa:	460b      	mov	r3, r1
 100d5ac:	3301      	adds	r3, #1
 100d5ae:	4915      	ldr	r1, [pc, #84]	; (100d604 <_svfprintf_r+0x130c>)
 100d5b0:	2b07      	cmp	r3, #7
 100d5b2:	4422      	add	r2, r4
 100d5b4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d5b8:	e9c9 1400 	strd	r1, r4, [r9]
 100d5bc:	f77f a857 	ble.w	100c66e <_svfprintf_r+0x376>
 100d5c0:	e459      	b.n	100ce76 <_svfprintf_r+0xb7e>
 100d5c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100d5c4:	3902      	subs	r1, #2
 100d5c6:	2330      	movs	r3, #48	; 0x30
 100d5c8:	9e03      	ldr	r6, [sp, #12]
 100d5ca:	910b      	str	r1, [sp, #44]	; 0x2c
 100d5cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 100d5d0:	ab54      	add	r3, sp, #336	; 0x150
 100d5d2:	1a5b      	subs	r3, r3, r1
 100d5d4:	9307      	str	r3, [sp, #28]
 100d5d6:	f7fe bfe7 	b.w	100c5a8 <_svfprintf_r+0x2b0>
 100d5da:	aa28      	add	r2, sp, #160	; 0xa0
 100d5dc:	4641      	mov	r1, r8
 100d5de:	4650      	mov	r0, sl
 100d5e0:	f002 fcbe 	bl	100ff60 <__ssprint_r>
 100d5e4:	2800      	cmp	r0, #0
 100d5e6:	f47f abea 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d5ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100d5ec:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d5f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d5f2:	781b      	ldrb	r3, [r3, #0]
 100d5f4:	e6ed      	b.n	100d3d2 <_svfprintf_r+0x10da>
 100d5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d5f8:	6812      	ldr	r2, [r2, #0]
 100d5fa:	9309      	str	r3, [sp, #36]	; 0x24
 100d5fc:	9b05      	ldr	r3, [sp, #20]
 100d5fe:	6013      	str	r3, [r2, #0]
 100d600:	f7fe beba 	b.w	100c378 <_svfprintf_r+0x80>
 100d604:	01011734 	.word	0x01011734
 100d608:	9b03      	ldr	r3, [sp, #12]
 100d60a:	2200      	movs	r2, #0
 100d60c:	f8cd 901c 	str.w	r9, [sp, #28]
 100d610:	ae54      	add	r6, sp, #336	; 0x150
 100d612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 100d616:	970c      	str	r7, [sp, #48]	; 0x30
 100d618:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 100d61c:	4691      	mov	r9, r2
 100d61e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100d622:	461f      	mov	r7, r3
 100d624:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 100d628:	e008      	b.n	100d63c <_svfprintf_r+0x1344>
 100d62a:	f7fc f9ed 	bl	1009a08 <__aeabi_uldivmod>
 100d62e:	2d00      	cmp	r5, #0
 100d630:	bf08      	it	eq
 100d632:	2c0a      	cmpeq	r4, #10
 100d634:	d329      	bcc.n	100d68a <_svfprintf_r+0x1392>
 100d636:	4604      	mov	r4, r0
 100d638:	4656      	mov	r6, sl
 100d63a:	460d      	mov	r5, r1
 100d63c:	220a      	movs	r2, #10
 100d63e:	2300      	movs	r3, #0
 100d640:	4620      	mov	r0, r4
 100d642:	4629      	mov	r1, r5
 100d644:	f7fc f9e0 	bl	1009a08 <__aeabi_uldivmod>
 100d648:	f109 0901 	add.w	r9, r9, #1
 100d64c:	4620      	mov	r0, r4
 100d64e:	4629      	mov	r1, r5
 100d650:	f106 3aff 	add.w	sl, r6, #4294967295
 100d654:	2300      	movs	r3, #0
 100d656:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 100d65a:	220a      	movs	r2, #10
 100d65c:	f806 cc01 	strb.w	ip, [r6, #-1]
 100d660:	2f00      	cmp	r7, #0
 100d662:	d0e2      	beq.n	100d62a <_svfprintf_r+0x1332>
 100d664:	f898 6000 	ldrb.w	r6, [r8]
 100d668:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 100d66c:	bf18      	it	ne
 100d66e:	f04f 0c01 	movne.w	ip, #1
 100d672:	454e      	cmp	r6, r9
 100d674:	bf18      	it	ne
 100d676:	f04f 0c00 	movne.w	ip, #0
 100d67a:	f1bc 0f00 	cmp.w	ip, #0
 100d67e:	d0d4      	beq.n	100d62a <_svfprintf_r+0x1332>
 100d680:	429d      	cmp	r5, r3
 100d682:	bf08      	it	eq
 100d684:	4294      	cmpeq	r4, r2
 100d686:	f080 8285 	bcs.w	100db94 <_svfprintf_r+0x189c>
 100d68a:	4652      	mov	r2, sl
 100d68c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 100d690:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 100d694:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 100d698:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100d69c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 100d6a0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 100d6a4:	9e03      	ldr	r6, [sp, #12]
 100d6a6:	f7ff bb7d 	b.w	100cda4 <_svfprintf_r+0xaac>
 100d6aa:	f103 0108 	add.w	r1, r3, #8
 100d6ae:	4660      	mov	r0, ip
 100d6b0:	4db8      	ldr	r5, [pc, #736]	; (100d994 <_svfprintf_r+0x169c>)
 100d6b2:	2807      	cmp	r0, #7
 100d6b4:	4422      	add	r2, r4
 100d6b6:	605c      	str	r4, [r3, #4]
 100d6b8:	922a      	str	r2, [sp, #168]	; 0xa8
 100d6ba:	601d      	str	r5, [r3, #0]
 100d6bc:	9029      	str	r0, [sp, #164]	; 0xa4
 100d6be:	f73f aea9 	bgt.w	100d414 <_svfprintf_r+0x111c>
 100d6c2:	3001      	adds	r0, #1
 100d6c4:	f101 0908 	add.w	r9, r1, #8
 100d6c8:	460b      	mov	r3, r1
 100d6ca:	f7ff bbca 	b.w	100ce62 <_svfprintf_r+0xb6a>
 100d6ce:	05b5      	lsls	r5, r6, #22
 100d6d0:	f04f 0301 	mov.w	r3, #1
 100d6d4:	bf48      	it	mi
 100d6d6:	b2e4      	uxtbmi	r4, r4
 100d6d8:	2500      	movs	r5, #0
 100d6da:	f7fe bf3e 	b.w	100c55a <_svfprintf_r+0x262>
 100d6de:	05b5      	lsls	r5, r6, #22
 100d6e0:	bf45      	ittet	mi
 100d6e2:	9209      	strmi	r2, [sp, #36]	; 0x24
 100d6e4:	b2e4      	uxtbmi	r4, r4
 100d6e6:	9209      	strpl	r2, [sp, #36]	; 0x24
 100d6e8:	4633      	movmi	r3, r6
 100d6ea:	bf4e      	itee	mi
 100d6ec:	2500      	movmi	r5, #0
 100d6ee:	2500      	movpl	r5, #0
 100d6f0:	4633      	movpl	r3, r6
 100d6f2:	f7ff b96a 	b.w	100c9ca <_svfprintf_r+0x6d2>
 100d6f6:	9b04      	ldr	r3, [sp, #16]
 100d6f8:	1c5a      	adds	r2, r3, #1
 100d6fa:	f000 816a 	beq.w	100d9d2 <_svfprintf_r+0x16da>
 100d6fe:	2b00      	cmp	r3, #0
 100d700:	bf08      	it	eq
 100d702:	2c47      	cmpeq	r4, #71	; 0x47
 100d704:	f040 8167 	bne.w	100d9d6 <_svfprintf_r+0x16de>
 100d708:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100d70c:	930d      	str	r3, [sp, #52]	; 0x34
 100d70e:	ee18 3a90 	vmov	r3, s17
 100d712:	2b00      	cmp	r3, #0
 100d714:	f04f 0301 	mov.w	r3, #1
 100d718:	9304      	str	r3, [sp, #16]
 100d71a:	f2c0 8311 	blt.w	100dd40 <_svfprintf_r+0x1a48>
 100d71e:	eeb0 cb48 	vmov.f64	d12, d8
 100d722:	461d      	mov	r5, r3
 100d724:	2300      	movs	r3, #0
 100d726:	930c      	str	r3, [sp, #48]	; 0x30
 100d728:	ab26      	add	r3, sp, #152	; 0x98
 100d72a:	aa21      	add	r2, sp, #132	; 0x84
 100d72c:	9301      	str	r3, [sp, #4]
 100d72e:	2102      	movs	r1, #2
 100d730:	9200      	str	r2, [sp, #0]
 100d732:	ab1f      	add	r3, sp, #124	; 0x7c
 100d734:	462a      	mov	r2, r5
 100d736:	eeb0 0b4c 	vmov.f64	d0, d12
 100d73a:	4650      	mov	r0, sl
 100d73c:	f000 fe6c 	bl	100e418 <_dtoa_r>
 100d740:	2c47      	cmp	r4, #71	; 0x47
 100d742:	900b      	str	r0, [sp, #44]	; 0x2c
 100d744:	f040 8177 	bne.w	100da36 <_svfprintf_r+0x173e>
 100d748:	07f3      	lsls	r3, r6, #31
 100d74a:	f100 8174 	bmi.w	100da36 <_svfprintf_r+0x173e>
 100d74e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100d750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100d752:	2c47      	cmp	r4, #71	; 0x47
 100d754:	eba3 0302 	sub.w	r3, r3, r2
 100d758:	9312      	str	r3, [sp, #72]	; 0x48
 100d75a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100d75c:	9310      	str	r3, [sp, #64]	; 0x40
 100d75e:	f040 81b1 	bne.w	100dac4 <_svfprintf_r+0x17cc>
 100d762:	9a04      	ldr	r2, [sp, #16]
 100d764:	f113 0f03 	cmn.w	r3, #3
 100d768:	bfa8      	it	ge
 100d76a:	429a      	cmpge	r2, r3
 100d76c:	f280 8185 	bge.w	100da7a <_svfprintf_r+0x1782>
 100d770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100d772:	2200      	movs	r2, #0
 100d774:	920a      	str	r2, [sp, #40]	; 0x28
 100d776:	3b02      	subs	r3, #2
 100d778:	930e      	str	r3, [sp, #56]	; 0x38
 100d77a:	f023 0420 	bic.w	r4, r3, #32
 100d77e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100d780:	2c41      	cmp	r4, #65	; 0x41
 100d782:	f103 32ff 	add.w	r2, r3, #4294967295
 100d786:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 100d78a:	921f      	str	r2, [sp, #124]	; 0x7c
 100d78c:	bf04      	itt	eq
 100d78e:	330f      	addeq	r3, #15
 100d790:	b2db      	uxtbeq	r3, r3
 100d792:	2a00      	cmp	r2, #0
 100d794:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 100d798:	bfb7      	itett	lt
 100d79a:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 100d79c:	232b      	movge	r3, #43	; 0x2b
 100d79e:	f1c3 0201 	rsblt	r2, r3, #1
 100d7a2:	232d      	movlt	r3, #45	; 0x2d
 100d7a4:	2a09      	cmp	r2, #9
 100d7a6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 100d7aa:	f340 82d5 	ble.w	100dd58 <_svfprintf_r+0x1a60>
 100d7ae:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 100d7b2:	f246 6567 	movw	r5, #26215	; 0x6667
 100d7b6:	f04f 0e0a 	mov.w	lr, #10
 100d7ba:	f2c6 6566 	movt	r5, #26214	; 0x6666
 100d7be:	4664      	mov	r4, ip
 100d7c0:	e000      	b.n	100d7c4 <_svfprintf_r+0x14cc>
 100d7c2:	460c      	mov	r4, r1
 100d7c4:	fb85 3002 	smull	r3, r0, r5, r2
 100d7c8:	17d3      	asrs	r3, r2, #31
 100d7ca:	2a63      	cmp	r2, #99	; 0x63
 100d7cc:	f104 31ff 	add.w	r1, r4, #4294967295
 100d7d0:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 100d7d4:	fb0e 2013 	mls	r0, lr, r3, r2
 100d7d8:	461a      	mov	r2, r3
 100d7da:	f100 0030 	add.w	r0, r0, #48	; 0x30
 100d7de:	f804 0c01 	strb.w	r0, [r4, #-1]
 100d7e2:	dcee      	bgt.n	100d7c2 <_svfprintf_r+0x14ca>
 100d7e4:	1ea2      	subs	r2, r4, #2
 100d7e6:	3330      	adds	r3, #48	; 0x30
 100d7e8:	4594      	cmp	ip, r2
 100d7ea:	b2db      	uxtb	r3, r3
 100d7ec:	f801 3c01 	strb.w	r3, [r1, #-1]
 100d7f0:	f240 831f 	bls.w	100de32 <_svfprintf_r+0x1b3a>
 100d7f4:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 100d7f8:	e001      	b.n	100d7fe <_svfprintf_r+0x1506>
 100d7fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 100d7fe:	458c      	cmp	ip, r1
 100d800:	f802 3b01 	strb.w	r3, [r2], #1
 100d804:	d1f9      	bne.n	100d7fa <_svfprintf_r+0x1502>
 100d806:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 100d80a:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 100d80e:	1b1b      	subs	r3, r3, r4
 100d810:	aa22      	add	r2, sp, #136	; 0x88
 100d812:	440b      	add	r3, r1
 100d814:	1a9b      	subs	r3, r3, r2
 100d816:	9318      	str	r3, [sp, #96]	; 0x60
 100d818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100d81a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 100d81c:	2b01      	cmp	r3, #1
 100d81e:	441a      	add	r2, r3
 100d820:	9207      	str	r2, [sp, #28]
 100d822:	f340 82be 	ble.w	100dda2 <_svfprintf_r+0x1aaa>
 100d826:	9b07      	ldr	r3, [sp, #28]
 100d828:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100d82a:	4413      	add	r3, r2
 100d82c:	9307      	str	r3, [sp, #28]
 100d82e:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100d832:	2200      	movs	r2, #0
 100d834:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 100d838:	9b07      	ldr	r3, [sp, #28]
 100d83a:	9213      	str	r2, [sp, #76]	; 0x4c
 100d83c:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100d840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100d844:	9303      	str	r3, [sp, #12]
 100d846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100d848:	2b00      	cmp	r3, #0
 100d84a:	f040 8134 	bne.w	100dab6 <_svfprintf_r+0x17be>
 100d84e:	9304      	str	r3, [sp, #16]
 100d850:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d854:	f7fe beb5 	b.w	100c5c2 <_svfprintf_r+0x2ca>
 100d858:	4634      	mov	r4, r6
 100d85a:	9e04      	ldr	r6, [sp, #16]
 100d85c:	460b      	mov	r3, r1
 100d85e:	3301      	adds	r3, #1
 100d860:	494c      	ldr	r1, [pc, #304]	; (100d994 <_svfprintf_r+0x169c>)
 100d862:	2b07      	cmp	r3, #7
 100d864:	4422      	add	r2, r4
 100d866:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d86a:	e9c9 1400 	strd	r1, r4, [r9]
 100d86e:	bfd8      	it	le
 100d870:	f109 0908 	addle.w	r9, r9, #8
 100d874:	f77f ab8d 	ble.w	100cf92 <_svfprintf_r+0xc9a>
 100d878:	aa28      	add	r2, sp, #160	; 0xa0
 100d87a:	9908      	ldr	r1, [sp, #32]
 100d87c:	4650      	mov	r0, sl
 100d87e:	f002 fb6f 	bl	100ff60 <__ssprint_r>
 100d882:	2800      	cmp	r0, #0
 100d884:	f47f aa9b 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d888:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d88a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d88e:	f7ff bb80 	b.w	100cf92 <_svfprintf_r+0xc9a>
 100d892:	2300      	movs	r3, #0
 100d894:	aa26      	add	r2, sp, #152	; 0x98
 100d896:	4619      	mov	r1, r3
 100d898:	9200      	str	r2, [sp, #0]
 100d89a:	4650      	mov	r0, sl
 100d89c:	aa21      	add	r2, sp, #132	; 0x84
 100d89e:	f000 fb6d 	bl	100df7c <_wcsrtombs_r>
 100d8a2:	1c43      	adds	r3, r0, #1
 100d8a4:	9007      	str	r0, [sp, #28]
 100d8a6:	f000 81ef 	beq.w	100dc88 <_svfprintf_r+0x1990>
 100d8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100d8ac:	9321      	str	r3, [sp, #132]	; 0x84
 100d8ae:	9b07      	ldr	r3, [sp, #28]
 100d8b0:	2b00      	cmp	r3, #0
 100d8b2:	d03b      	beq.n	100d92c <_svfprintf_r+0x1634>
 100d8b4:	2b63      	cmp	r3, #99	; 0x63
 100d8b6:	f340 8087 	ble.w	100d9c8 <_svfprintf_r+0x16d0>
 100d8ba:	1c59      	adds	r1, r3, #1
 100d8bc:	4650      	mov	r0, sl
 100d8be:	f7fc ff5b 	bl	100a778 <_malloc_r>
 100d8c2:	900b      	str	r0, [sp, #44]	; 0x2c
 100d8c4:	2800      	cmp	r0, #0
 100d8c6:	f000 81df 	beq.w	100dc88 <_svfprintf_r+0x1990>
 100d8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100d8cc:	930a      	str	r3, [sp, #40]	; 0x28
 100d8ce:	2208      	movs	r2, #8
 100d8d0:	2100      	movs	r1, #0
 100d8d2:	a826      	add	r0, sp, #152	; 0x98
 100d8d4:	f7fd ff64 	bl	100b7a0 <memset>
 100d8d8:	9c07      	ldr	r4, [sp, #28]
 100d8da:	ab26      	add	r3, sp, #152	; 0x98
 100d8dc:	aa21      	add	r2, sp, #132	; 0x84
 100d8de:	9300      	str	r3, [sp, #0]
 100d8e0:	4650      	mov	r0, sl
 100d8e2:	4623      	mov	r3, r4
 100d8e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100d8e6:	f000 fb49 	bl	100df7c <_wcsrtombs_r>
 100d8ea:	4284      	cmp	r4, r0
 100d8ec:	f040 8287 	bne.w	100ddfe <_svfprintf_r+0x1b06>
 100d8f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100d8f2:	2300      	movs	r3, #0
 100d8f4:	9509      	str	r5, [sp, #36]	; 0x24
 100d8f6:	9304      	str	r3, [sp, #16]
 100d8f8:	4614      	mov	r4, r2
 100d8fa:	9a07      	ldr	r2, [sp, #28]
 100d8fc:	9313      	str	r3, [sp, #76]	; 0x4c
 100d8fe:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100d902:	54a3      	strb	r3, [r4, r2]
 100d904:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100d908:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d90c:	9303      	str	r3, [sp, #12]
 100d90e:	f7fe be58 	b.w	100c5c2 <_svfprintf_r+0x2ca>
 100d912:	aa28      	add	r2, sp, #160	; 0xa0
 100d914:	9908      	ldr	r1, [sp, #32]
 100d916:	4650      	mov	r0, sl
 100d918:	f002 fb22 	bl	100ff60 <__ssprint_r>
 100d91c:	2800      	cmp	r0, #0
 100d91e:	f47f aa4e 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d922:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100d924:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d928:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d92a:	e5c6      	b.n	100d4ba <_svfprintf_r+0x11c2>
 100d92c:	9b07      	ldr	r3, [sp, #28]
 100d92e:	9509      	str	r5, [sp, #36]	; 0x24
 100d930:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d934:	e9cd 3303 	strd	r3, r3, [sp, #12]
 100d938:	9313      	str	r3, [sp, #76]	; 0x4c
 100d93a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100d93e:	930a      	str	r3, [sp, #40]	; 0x28
 100d940:	f7fe be3f 	b.w	100c5c2 <_svfprintf_r+0x2ca>
 100d944:	aa28      	add	r2, sp, #160	; 0xa0
 100d946:	9908      	ldr	r1, [sp, #32]
 100d948:	4650      	mov	r0, sl
 100d94a:	f002 fb09 	bl	100ff60 <__ssprint_r>
 100d94e:	2800      	cmp	r0, #0
 100d950:	f47f aa35 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100d954:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d956:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d95a:	f7ff bb12 	b.w	100cf82 <_svfprintf_r+0xc8a>
 100d95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100d960:	4619      	mov	r1, r3
 100d962:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100d964:	4419      	add	r1, r3
 100d966:	1b1b      	subs	r3, r3, r4
 100d968:	1b4c      	subs	r4, r1, r5
 100d96a:	429c      	cmp	r4, r3
 100d96c:	bfa8      	it	ge
 100d96e:	461c      	movge	r4, r3
 100d970:	f7ff bb48 	b.w	100d004 <_svfprintf_r+0xd0c>
 100d974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d976:	9309      	str	r3, [sp, #36]	; 0x24
 100d978:	9b05      	ldr	r3, [sp, #20]
 100d97a:	6812      	ldr	r2, [r2, #0]
 100d97c:	8013      	strh	r3, [r2, #0]
 100d97e:	f7fe bcfb 	b.w	100c378 <_svfprintf_r+0x80>
 100d982:	681c      	ldr	r4, [r3, #0]
 100d984:	9209      	str	r2, [sp, #36]	; 0x24
 100d986:	9603      	str	r6, [sp, #12]
 100d988:	17e5      	asrs	r5, r4, #31
 100d98a:	4622      	mov	r2, r4
 100d98c:	462b      	mov	r3, r5
 100d98e:	f7fe bf76 	b.w	100c87e <_svfprintf_r+0x586>
 100d992:	bf00      	nop
 100d994:	01011734 	.word	0x01011734
 100d998:	9c10      	ldr	r4, [sp, #64]	; 0x40
 100d99a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100d99c:	9404      	str	r4, [sp, #16]
 100d99e:	f7fe faaf 	bl	100bf00 <strlen>
 100d9a2:	9509      	str	r5, [sp, #36]	; 0x24
 100d9a4:	9413      	str	r4, [sp, #76]	; 0x4c
 100d9a6:	9411      	str	r4, [sp, #68]	; 0x44
 100d9a8:	940a      	str	r4, [sp, #40]	; 0x28
 100d9aa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d9ae:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 100d9b2:	9007      	str	r0, [sp, #28]
 100d9b4:	9303      	str	r3, [sp, #12]
 100d9b6:	f7fe be04 	b.w	100c5c2 <_svfprintf_r+0x2ca>
 100d9ba:	4650      	mov	r0, sl
 100d9bc:	aa28      	add	r2, sp, #160	; 0xa0
 100d9be:	9908      	ldr	r1, [sp, #32]
 100d9c0:	f002 face 	bl	100ff60 <__ssprint_r>
 100d9c4:	f7fe bd8c 	b.w	100c4e0 <_svfprintf_r+0x1e8>
 100d9c8:	2300      	movs	r3, #0
 100d9ca:	930a      	str	r3, [sp, #40]	; 0x28
 100d9cc:	ab3b      	add	r3, sp, #236	; 0xec
 100d9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 100d9d0:	e77d      	b.n	100d8ce <_svfprintf_r+0x15d6>
 100d9d2:	2306      	movs	r3, #6
 100d9d4:	9304      	str	r3, [sp, #16]
 100d9d6:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100d9da:	930d      	str	r3, [sp, #52]	; 0x34
 100d9dc:	ee18 3a90 	vmov	r3, s17
 100d9e0:	2b00      	cmp	r3, #0
 100d9e2:	f2c0 81ad 	blt.w	100dd40 <_svfprintf_r+0x1a48>
 100d9e6:	eeb0 cb48 	vmov.f64	d12, d8
 100d9ea:	2300      	movs	r3, #0
 100d9ec:	930c      	str	r3, [sp, #48]	; 0x30
 100d9ee:	2c46      	cmp	r4, #70	; 0x46
 100d9f0:	f040 80f9 	bne.w	100dbe6 <_svfprintf_r+0x18ee>
 100d9f4:	ab26      	add	r3, sp, #152	; 0x98
 100d9f6:	aa21      	add	r2, sp, #132	; 0x84
 100d9f8:	9301      	str	r3, [sp, #4]
 100d9fa:	2103      	movs	r1, #3
 100d9fc:	ab1f      	add	r3, sp, #124	; 0x7c
 100d9fe:	9200      	str	r2, [sp, #0]
 100da00:	eeb0 0b4c 	vmov.f64	d0, d12
 100da04:	9a04      	ldr	r2, [sp, #16]
 100da06:	4650      	mov	r0, sl
 100da08:	f000 fd06 	bl	100e418 <_dtoa_r>
 100da0c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 100da0e:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100da12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100da16:	7802      	ldrb	r2, [r0, #0]
 100da18:	4603      	mov	r3, r0
 100da1a:	bf14      	ite	ne
 100da1c:	2301      	movne	r3, #1
 100da1e:	2300      	moveq	r3, #0
 100da20:	2a30      	cmp	r2, #48	; 0x30
 100da22:	bf14      	ite	ne
 100da24:	2300      	movne	r3, #0
 100da26:	f003 0301 	andeq.w	r3, r3, #1
 100da2a:	900b      	str	r0, [sp, #44]	; 0x2c
 100da2c:	2b00      	cmp	r3, #0
 100da2e:	f040 81db 	bne.w	100dde8 <_svfprintf_r+0x1af0>
 100da32:	9b04      	ldr	r3, [sp, #16]
 100da34:	441d      	add	r5, r3
 100da36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100da38:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100da3c:	441d      	add	r5, r3
 100da3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100da42:	bf08      	it	eq
 100da44:	462b      	moveq	r3, r5
 100da46:	f43f ae83 	beq.w	100d750 <_svfprintf_r+0x1458>
 100da4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100da4c:	42ab      	cmp	r3, r5
 100da4e:	f4bf ae7f 	bcs.w	100d750 <_svfprintf_r+0x1458>
 100da52:	2130      	movs	r1, #48	; 0x30
 100da54:	1c5a      	adds	r2, r3, #1
 100da56:	9226      	str	r2, [sp, #152]	; 0x98
 100da58:	7019      	strb	r1, [r3, #0]
 100da5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100da5c:	429d      	cmp	r5, r3
 100da5e:	d8f9      	bhi.n	100da54 <_svfprintf_r+0x175c>
 100da60:	e676      	b.n	100d750 <_svfprintf_r+0x1458>
 100da62:	1c59      	adds	r1, r3, #1
 100da64:	4650      	mov	r0, sl
 100da66:	f7fc fe87 	bl	100a778 <_malloc_r>
 100da6a:	900b      	str	r0, [sp, #44]	; 0x2c
 100da6c:	2800      	cmp	r0, #0
 100da6e:	f000 810b 	beq.w	100dc88 <_svfprintf_r+0x1990>
 100da72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100da74:	930a      	str	r3, [sp, #40]	; 0x28
 100da76:	f7ff bb6a 	b.w	100d14e <_svfprintf_r+0xe56>
 100da7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100da7c:	4619      	mov	r1, r3
 100da7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100da80:	4299      	cmp	r1, r3
 100da82:	f300 809c 	bgt.w	100dbbe <_svfprintf_r+0x18c6>
 100da86:	07f5      	lsls	r5, r6, #31
 100da88:	f140 814c 	bpl.w	100dd24 <_svfprintf_r+0x1a2c>
 100da8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100da8e:	4413      	add	r3, r2
 100da90:	9307      	str	r3, [sp, #28]
 100da92:	0574      	lsls	r4, r6, #21
 100da94:	d503      	bpl.n	100da9e <_svfprintf_r+0x17a6>
 100da96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100da98:	2b00      	cmp	r3, #0
 100da9a:	f300 8118 	bgt.w	100dcce <_svfprintf_r+0x19d6>
 100da9e:	9b07      	ldr	r3, [sp, #28]
 100daa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100daa4:	9303      	str	r3, [sp, #12]
 100daa6:	2367      	movs	r3, #103	; 0x67
 100daa8:	930e      	str	r3, [sp, #56]	; 0x38
 100daaa:	2300      	movs	r3, #0
 100daac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 100daae:	930a      	str	r3, [sp, #40]	; 0x28
 100dab0:	9313      	str	r3, [sp, #76]	; 0x4c
 100dab2:	9311      	str	r3, [sp, #68]	; 0x44
 100dab4:	e6c7      	b.n	100d846 <_svfprintf_r+0x154e>
 100dab6:	212d      	movs	r1, #45	; 0x2d
 100dab8:	2300      	movs	r3, #0
 100daba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100dabe:	9304      	str	r3, [sp, #16]
 100dac0:	f7fe bd80 	b.w	100c5c4 <_svfprintf_r+0x2cc>
 100dac4:	2c46      	cmp	r4, #70	; 0x46
 100dac6:	f040 81b1 	bne.w	100de2c <_svfprintf_r+0x1b34>
 100daca:	9910      	ldr	r1, [sp, #64]	; 0x40
 100dacc:	f006 0301 	and.w	r3, r6, #1
 100dad0:	9a04      	ldr	r2, [sp, #16]
 100dad2:	2900      	cmp	r1, #0
 100dad4:	ea43 0302 	orr.w	r3, r3, r2
 100dad8:	f340 8167 	ble.w	100ddaa <_svfprintf_r+0x1ab2>
 100dadc:	2b00      	cmp	r3, #0
 100dade:	f040 8134 	bne.w	100dd4a <_svfprintf_r+0x1a52>
 100dae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100dae4:	9307      	str	r3, [sp, #28]
 100dae6:	2366      	movs	r3, #102	; 0x66
 100dae8:	930e      	str	r3, [sp, #56]	; 0x38
 100daea:	0572      	lsls	r2, r6, #21
 100daec:	f100 80f1 	bmi.w	100dcd2 <_svfprintf_r+0x19da>
 100daf0:	9b07      	ldr	r3, [sp, #28]
 100daf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100daf6:	9303      	str	r3, [sp, #12]
 100daf8:	e7d7      	b.n	100daaa <_svfprintf_r+0x17b2>
 100dafa:	aa28      	add	r2, sp, #160	; 0xa0
 100dafc:	4641      	mov	r1, r8
 100dafe:	4650      	mov	r0, sl
 100db00:	f002 fa2e 	bl	100ff60 <__ssprint_r>
 100db04:	2800      	cmp	r0, #0
 100db06:	f47f a95a 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100db0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100db0c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100db10:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100db12:	781b      	ldrb	r3, [r3, #0]
 100db14:	e463      	b.n	100d3de <_svfprintf_r+0x10e6>
 100db16:	aa28      	add	r2, sp, #160	; 0xa0
 100db18:	9908      	ldr	r1, [sp, #32]
 100db1a:	4650      	mov	r0, sl
 100db1c:	f002 fa20 	bl	100ff60 <__ssprint_r>
 100db20:	2800      	cmp	r0, #0
 100db22:	f47f a94c 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100db26:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100db28:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100db2c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100db30:	e4d8      	b.n	100d4e4 <_svfprintf_r+0x11ec>
 100db32:	07f0      	lsls	r0, r6, #31
 100db34:	f57e ad9d 	bpl.w	100c672 <_svfprintf_r+0x37a>
 100db38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100db3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 100db3c:	3301      	adds	r3, #1
 100db3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100db40:	2b07      	cmp	r3, #7
 100db42:	440a      	add	r2, r1
 100db44:	f8c9 1004 	str.w	r1, [r9, #4]
 100db48:	f8c9 0000 	str.w	r0, [r9]
 100db4c:	922a      	str	r2, [sp, #168]	; 0xa8
 100db4e:	9329      	str	r3, [sp, #164]	; 0xa4
 100db50:	dce1      	bgt.n	100db16 <_svfprintf_r+0x181e>
 100db52:	f109 0908 	add.w	r9, r9, #8
 100db56:	e4c8      	b.n	100d4ea <_svfprintf_r+0x11f2>
 100db58:	aa28      	add	r2, sp, #160	; 0xa0
 100db5a:	9908      	ldr	r1, [sp, #32]
 100db5c:	4650      	mov	r0, sl
 100db5e:	f002 f9ff 	bl	100ff60 <__ssprint_r>
 100db62:	2800      	cmp	r0, #0
 100db64:	f47f a92b 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100db68:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100db6a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100db6e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100db70:	f7ff ba2e 	b.w	100cfd0 <_svfprintf_r+0xcd8>
 100db74:	aa28      	add	r2, sp, #160	; 0xa0
 100db76:	9908      	ldr	r1, [sp, #32]
 100db78:	4650      	mov	r0, sl
 100db7a:	f002 f9f1 	bl	100ff60 <__ssprint_r>
 100db7e:	2800      	cmp	r0, #0
 100db80:	f47f a91d 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100db84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100db86:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100db8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 100db8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100db8e:	1acb      	subs	r3, r1, r3
 100db90:	f7ff ba38 	b.w	100d004 <_svfprintf_r+0xd0c>
 100db94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100db96:	991a      	ldr	r1, [sp, #104]	; 0x68
 100db98:	ebaa 0a02 	sub.w	sl, sl, r2
 100db9c:	4650      	mov	r0, sl
 100db9e:	f7fe fa9d 	bl	100c0dc <strncpy>
 100dba2:	f898 3001 	ldrb.w	r3, [r8, #1]
 100dba6:	b10b      	cbz	r3, 100dbac <_svfprintf_r+0x18b4>
 100dba8:	f108 0801 	add.w	r8, r8, #1
 100dbac:	4620      	mov	r0, r4
 100dbae:	4629      	mov	r1, r5
 100dbb0:	220a      	movs	r2, #10
 100dbb2:	2300      	movs	r3, #0
 100dbb4:	f7fb ff28 	bl	1009a08 <__aeabi_uldivmod>
 100dbb8:	f04f 0900 	mov.w	r9, #0
 100dbbc:	e53b      	b.n	100d636 <_svfprintf_r+0x133e>
 100dbbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100dbc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100dbc2:	189a      	adds	r2, r3, r2
 100dbc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100dbc6:	9207      	str	r2, [sp, #28]
 100dbc8:	2b00      	cmp	r3, #0
 100dbca:	bfc4      	itt	gt
 100dbcc:	2367      	movgt	r3, #103	; 0x67
 100dbce:	930e      	strgt	r3, [sp, #56]	; 0x38
 100dbd0:	dc8b      	bgt.n	100daea <_svfprintf_r+0x17f2>
 100dbd2:	f1c3 0301 	rsb	r3, r3, #1
 100dbd6:	2167      	movs	r1, #103	; 0x67
 100dbd8:	441a      	add	r2, r3
 100dbda:	910e      	str	r1, [sp, #56]	; 0x38
 100dbdc:	9207      	str	r2, [sp, #28]
 100dbde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100dbe2:	9303      	str	r3, [sp, #12]
 100dbe4:	e761      	b.n	100daaa <_svfprintf_r+0x17b2>
 100dbe6:	2c45      	cmp	r4, #69	; 0x45
 100dbe8:	f040 8110 	bne.w	100de0c <_svfprintf_r+0x1b14>
 100dbec:	9b04      	ldr	r3, [sp, #16]
 100dbee:	aa26      	add	r2, sp, #152	; 0x98
 100dbf0:	2102      	movs	r1, #2
 100dbf2:	9201      	str	r2, [sp, #4]
 100dbf4:	1c5d      	adds	r5, r3, #1
 100dbf6:	eeb0 0b4c 	vmov.f64	d0, d12
 100dbfa:	ab21      	add	r3, sp, #132	; 0x84
 100dbfc:	4650      	mov	r0, sl
 100dbfe:	9300      	str	r3, [sp, #0]
 100dc00:	462a      	mov	r2, r5
 100dc02:	ab1f      	add	r3, sp, #124	; 0x7c
 100dc04:	f000 fc08 	bl	100e418 <_dtoa_r>
 100dc08:	900b      	str	r0, [sp, #44]	; 0x2c
 100dc0a:	e714      	b.n	100da36 <_svfprintf_r+0x173e>
 100dc0c:	2300      	movs	r3, #0
 100dc0e:	eeb0 0b48 	vmov.f64	d0, d8
 100dc12:	930c      	str	r3, [sp, #48]	; 0x30
 100dc14:	f7ff baa4 	b.w	100d160 <_svfprintf_r+0xe68>
 100dc18:	424c      	negs	r4, r1
 100dc1a:	3110      	adds	r1, #16
 100dc1c:	da1d      	bge.n	100dc5a <_svfprintf_r+0x1962>
 100dc1e:	2510      	movs	r5, #16
 100dc20:	e002      	b.n	100dc28 <_svfprintf_r+0x1930>
 100dc22:	3c10      	subs	r4, #16
 100dc24:	2c10      	cmp	r4, #16
 100dc26:	dd18      	ble.n	100dc5a <_svfprintf_r+0x1962>
 100dc28:	3301      	adds	r3, #1
 100dc2a:	4985      	ldr	r1, [pc, #532]	; (100de40 <_svfprintf_r+0x1b48>)
 100dc2c:	2b07      	cmp	r3, #7
 100dc2e:	f102 0210 	add.w	r2, r2, #16
 100dc32:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100dc36:	e9c9 1500 	strd	r1, r5, [r9]
 100dc3a:	f109 0908 	add.w	r9, r9, #8
 100dc3e:	ddf0      	ble.n	100dc22 <_svfprintf_r+0x192a>
 100dc40:	aa28      	add	r2, sp, #160	; 0xa0
 100dc42:	9908      	ldr	r1, [sp, #32]
 100dc44:	4650      	mov	r0, sl
 100dc46:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100dc4a:	f002 f989 	bl	100ff60 <__ssprint_r>
 100dc4e:	2800      	cmp	r0, #0
 100dc50:	f47f a8b5 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100dc54:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100dc58:	e7e3      	b.n	100dc22 <_svfprintf_r+0x192a>
 100dc5a:	3301      	adds	r3, #1
 100dc5c:	4978      	ldr	r1, [pc, #480]	; (100de40 <_svfprintf_r+0x1b48>)
 100dc5e:	2b07      	cmp	r3, #7
 100dc60:	4422      	add	r2, r4
 100dc62:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100dc66:	e9c9 1400 	strd	r1, r4, [r9]
 100dc6a:	f77f af72 	ble.w	100db52 <_svfprintf_r+0x185a>
 100dc6e:	aa28      	add	r2, sp, #160	; 0xa0
 100dc70:	9908      	ldr	r1, [sp, #32]
 100dc72:	4650      	mov	r0, sl
 100dc74:	f002 f974 	bl	100ff60 <__ssprint_r>
 100dc78:	2800      	cmp	r0, #0
 100dc7a:	f47f a8a0 	bne.w	100cdbe <_svfprintf_r+0xac6>
 100dc7e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100dc80:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100dc84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100dc86:	e430      	b.n	100d4ea <_svfprintf_r+0x11f2>
 100dc88:	9a08      	ldr	r2, [sp, #32]
 100dc8a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 100dc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100dc92:	8193      	strh	r3, [r2, #12]
 100dc94:	f7fe bc27 	b.w	100c4e6 <_svfprintf_r+0x1ee>
 100dc98:	9526      	str	r5, [sp, #152]	; 0x98
 100dc9a:	4619      	mov	r1, r3
 100dc9c:	7bc5      	ldrb	r5, [r0, #15]
 100dc9e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 100dca2:	4295      	cmp	r5, r2
 100dca4:	d10a      	bne.n	100dcbc <_svfprintf_r+0x19c4>
 100dca6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 100dcaa:	f801 cc01 	strb.w	ip, [r1, #-1]
 100dcae:	9926      	ldr	r1, [sp, #152]	; 0x98
 100dcb0:	1e4a      	subs	r2, r1, #1
 100dcb2:	9226      	str	r2, [sp, #152]	; 0x98
 100dcb4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 100dcb8:	4295      	cmp	r5, r2
 100dcba:	d0f6      	beq.n	100dcaa <_svfprintf_r+0x19b2>
 100dcbc:	2a39      	cmp	r2, #57	; 0x39
 100dcbe:	bf16      	itet	ne
 100dcc0:	3201      	addne	r2, #1
 100dcc2:	7a82      	ldrbeq	r2, [r0, #10]
 100dcc4:	b2d2      	uxtbne	r2, r2
 100dcc6:	f801 2c01 	strb.w	r2, [r1, #-1]
 100dcca:	f7ff ba9a 	b.w	100d202 <_svfprintf_r+0xf0a>
 100dcce:	2367      	movs	r3, #103	; 0x67
 100dcd0:	930e      	str	r3, [sp, #56]	; 0x38
 100dcd2:	9814      	ldr	r0, [sp, #80]	; 0x50
 100dcd4:	2200      	movs	r2, #0
 100dcd6:	9213      	str	r2, [sp, #76]	; 0x4c
 100dcd8:	9211      	str	r2, [sp, #68]	; 0x44
 100dcda:	7803      	ldrb	r3, [r0, #0]
 100dcdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 100dcde:	2bff      	cmp	r3, #255	; 0xff
 100dce0:	d00b      	beq.n	100dcfa <_svfprintf_r+0x1a02>
 100dce2:	4293      	cmp	r3, r2
 100dce4:	da09      	bge.n	100dcfa <_svfprintf_r+0x1a02>
 100dce6:	7841      	ldrb	r1, [r0, #1]
 100dce8:	1ad2      	subs	r2, r2, r3
 100dcea:	b1b9      	cbz	r1, 100dd1c <_svfprintf_r+0x1a24>
 100dcec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100dcee:	3001      	adds	r0, #1
 100dcf0:	3301      	adds	r3, #1
 100dcf2:	9311      	str	r3, [sp, #68]	; 0x44
 100dcf4:	460b      	mov	r3, r1
 100dcf6:	2bff      	cmp	r3, #255	; 0xff
 100dcf8:	d1f3      	bne.n	100dce2 <_svfprintf_r+0x19ea>
 100dcfa:	9210      	str	r2, [sp, #64]	; 0x40
 100dcfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100dcfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 100dd00:	9907      	ldr	r1, [sp, #28]
 100dd02:	4413      	add	r3, r2
 100dd04:	2200      	movs	r2, #0
 100dd06:	920a      	str	r2, [sp, #40]	; 0x28
 100dd08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100dd0a:	9014      	str	r0, [sp, #80]	; 0x50
 100dd0c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 100dd0e:	fb02 1303 	mla	r3, r2, r3, r1
 100dd12:	9307      	str	r3, [sp, #28]
 100dd14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100dd18:	9303      	str	r3, [sp, #12]
 100dd1a:	e594      	b.n	100d846 <_svfprintf_r+0x154e>
 100dd1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 100dd1e:	3101      	adds	r1, #1
 100dd20:	9113      	str	r1, [sp, #76]	; 0x4c
 100dd22:	e7dc      	b.n	100dcde <_svfprintf_r+0x19e6>
 100dd24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100dd26:	9307      	str	r3, [sp, #28]
 100dd28:	e6b3      	b.n	100da92 <_svfprintf_r+0x179a>
 100dd2a:	9b04      	ldr	r3, [sp, #16]
 100dd2c:	9509      	str	r5, [sp, #36]	; 0x24
 100dd2e:	9004      	str	r0, [sp, #16]
 100dd30:	9303      	str	r3, [sp, #12]
 100dd32:	9307      	str	r3, [sp, #28]
 100dd34:	9013      	str	r0, [sp, #76]	; 0x4c
 100dd36:	9011      	str	r0, [sp, #68]	; 0x44
 100dd38:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100dd3c:	f7fe bc41 	b.w	100c5c2 <_svfprintf_r+0x2ca>
 100dd40:	232d      	movs	r3, #45	; 0x2d
 100dd42:	eeb1 cb48 	vneg.f64	d12, d8
 100dd46:	930c      	str	r3, [sp, #48]	; 0x30
 100dd48:	e651      	b.n	100d9ee <_svfprintf_r+0x16f6>
 100dd4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100dd4c:	18cb      	adds	r3, r1, r3
 100dd4e:	2166      	movs	r1, #102	; 0x66
 100dd50:	441a      	add	r2, r3
 100dd52:	910e      	str	r1, [sp, #56]	; 0x38
 100dd54:	9207      	str	r2, [sp, #28]
 100dd56:	e6c8      	b.n	100daea <_svfprintf_r+0x17f2>
 100dd58:	2c41      	cmp	r4, #65	; 0x41
 100dd5a:	a922      	add	r1, sp, #136	; 0x88
 100dd5c:	bf08      	it	eq
 100dd5e:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 100dd62:	f102 0230 	add.w	r2, r2, #48	; 0x30
 100dd66:	bf1e      	ittt	ne
 100dd68:	2330      	movne	r3, #48	; 0x30
 100dd6a:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 100dd6e:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 100dd72:	f803 2b01 	strb.w	r2, [r3], #1
 100dd76:	1a5b      	subs	r3, r3, r1
 100dd78:	9318      	str	r3, [sp, #96]	; 0x60
 100dd7a:	e54d      	b.n	100d818 <_svfprintf_r+0x1520>
 100dd7c:	ee18 3a90 	vmov	r3, s17
 100dd80:	f243 0400 	movw	r4, #12288	; 0x3000
 100dd84:	f2c0 1401 	movt	r4, #257	; 0x101
 100dd88:	2b00      	cmp	r3, #0
 100dd8a:	f642 73fc 	movw	r3, #12284	; 0x2ffc
 100dd8e:	f2c0 1301 	movt	r3, #257	; 0x101
 100dd92:	bfb6      	itet	lt
 100dd94:	212d      	movlt	r1, #45	; 0x2d
 100dd96:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 100dd9a:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 100dd9e:	f7fe bec2 	b.w	100cb26 <_svfprintf_r+0x82e>
 100dda2:	07f3      	lsls	r3, r6, #31
 100dda4:	f57f ad43 	bpl.w	100d82e <_svfprintf_r+0x1536>
 100dda8:	e53d      	b.n	100d826 <_svfprintf_r+0x152e>
 100ddaa:	b92b      	cbnz	r3, 100ddb8 <_svfprintf_r+0x1ac0>
 100ddac:	2301      	movs	r3, #1
 100ddae:	2266      	movs	r2, #102	; 0x66
 100ddb0:	9303      	str	r3, [sp, #12]
 100ddb2:	920e      	str	r2, [sp, #56]	; 0x38
 100ddb4:	9307      	str	r3, [sp, #28]
 100ddb6:	e678      	b.n	100daaa <_svfprintf_r+0x17b2>
 100ddb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100ddba:	2266      	movs	r2, #102	; 0x66
 100ddbc:	920e      	str	r2, [sp, #56]	; 0x38
 100ddbe:	9a04      	ldr	r2, [sp, #16]
 100ddc0:	3301      	adds	r3, #1
 100ddc2:	441a      	add	r2, r3
 100ddc4:	9207      	str	r2, [sp, #28]
 100ddc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100ddca:	9303      	str	r3, [sp, #12]
 100ddcc:	e66d      	b.n	100daaa <_svfprintf_r+0x17b2>
 100ddce:	4649      	mov	r1, r9
 100ddd0:	e46e      	b.n	100d6b0 <_svfprintf_r+0x13b8>
 100ddd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ddd4:	787b      	ldrb	r3, [r7, #1]
 100ddd6:	460f      	mov	r7, r1
 100ddd8:	f852 0b04 	ldr.w	r0, [r2], #4
 100dddc:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 100dde0:	9209      	str	r2, [sp, #36]	; 0x24
 100dde2:	9104      	str	r1, [sp, #16]
 100dde4:	f7fe baf3 	b.w	100c3ce <_svfprintf_r+0xd6>
 100dde8:	9b04      	ldr	r3, [sp, #16]
 100ddea:	f1c3 0501 	rsb	r5, r3, #1
 100ddee:	951f      	str	r5, [sp, #124]	; 0x7c
 100ddf0:	e61f      	b.n	100da32 <_svfprintf_r+0x173a>
 100ddf2:	9603      	str	r6, [sp, #12]
 100ddf4:	f7fe be0c 	b.w	100ca10 <_svfprintf_r+0x718>
 100ddf8:	9603      	str	r6, [sp, #12]
 100ddfa:	f7fe bd94 	b.w	100c926 <_svfprintf_r+0x62e>
 100ddfe:	9a08      	ldr	r2, [sp, #32]
 100de00:	8993      	ldrh	r3, [r2, #12]
 100de02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100de06:	8193      	strh	r3, [r2, #12]
 100de08:	f7fe bfd9 	b.w	100cdbe <_svfprintf_r+0xac6>
 100de0c:	9d04      	ldr	r5, [sp, #16]
 100de0e:	e48b      	b.n	100d728 <_svfprintf_r+0x1430>
 100de10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100de12:	9912      	ldr	r1, [sp, #72]	; 0x48
 100de14:	440b      	add	r3, r1
 100de16:	9304      	str	r3, [sp, #16]
 100de18:	f7ff baeb 	b.w	100d3f2 <_svfprintf_r+0x10fa>
 100de1c:	230c      	movs	r3, #12
 100de1e:	f04f 32ff 	mov.w	r2, #4294967295
 100de22:	f8ca 3000 	str.w	r3, [sl]
 100de26:	9205      	str	r2, [sp, #20]
 100de28:	f7fe bb64 	b.w	100c4f4 <_svfprintf_r+0x1fc>
 100de2c:	2300      	movs	r3, #0
 100de2e:	930a      	str	r3, [sp, #40]	; 0x28
 100de30:	e4a5      	b.n	100d77e <_svfprintf_r+0x1486>
 100de32:	2302      	movs	r3, #2
 100de34:	9318      	str	r3, [sp, #96]	; 0x60
 100de36:	e4ef      	b.n	100d818 <_svfprintf_r+0x1520>
 100de38:	4633      	mov	r3, r6
 100de3a:	f7fe bdb1 	b.w	100c9a0 <_svfprintf_r+0x6a8>
 100de3e:	bf00      	nop
 100de40:	01011734 	.word	0x01011734

0100de44 <_vsnprintf_r>:
 100de44:	b530      	push	{r4, r5, lr}
 100de46:	1e14      	subs	r4, r2, #0
 100de48:	4605      	mov	r5, r0
 100de4a:	b09b      	sub	sp, #108	; 0x6c
 100de4c:	bfbe      	ittt	lt
 100de4e:	238b      	movlt	r3, #139	; 0x8b
 100de50:	f04f 30ff 	movlt.w	r0, #4294967295
 100de54:	602b      	strlt	r3, [r5, #0]
 100de56:	db15      	blt.n	100de84 <_vsnprintf_r+0x40>
 100de58:	461a      	mov	r2, r3
 100de5a:	9100      	str	r1, [sp, #0]
 100de5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 100de60:	9104      	str	r1, [sp, #16]
 100de62:	f8ad 300c 	strh.w	r3, [sp, #12]
 100de66:	4669      	mov	r1, sp
 100de68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 100de6a:	d10d      	bne.n	100de88 <_vsnprintf_r+0x44>
 100de6c:	9402      	str	r4, [sp, #8]
 100de6e:	9405      	str	r4, [sp, #20]
 100de70:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100de74:	f8ad 400e 	strh.w	r4, [sp, #14]
 100de78:	f7fe fa3e 	bl	100c2f8 <_svfprintf_r>
 100de7c:	1c43      	adds	r3, r0, #1
 100de7e:	da01      	bge.n	100de84 <_vsnprintf_r+0x40>
 100de80:	238b      	movs	r3, #139	; 0x8b
 100de82:	602b      	str	r3, [r5, #0]
 100de84:	b01b      	add	sp, #108	; 0x6c
 100de86:	bd30      	pop	{r4, r5, pc}
 100de88:	3c01      	subs	r4, #1
 100de8a:	9402      	str	r4, [sp, #8]
 100de8c:	9405      	str	r4, [sp, #20]
 100de8e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100de92:	f8ad 400e 	strh.w	r4, [sp, #14]
 100de96:	f7fe fa2f 	bl	100c2f8 <_svfprintf_r>
 100de9a:	1c42      	adds	r2, r0, #1
 100de9c:	f04f 0200 	mov.w	r2, #0
 100dea0:	bfbc      	itt	lt
 100dea2:	238b      	movlt	r3, #139	; 0x8b
 100dea4:	602b      	strlt	r3, [r5, #0]
 100dea6:	9b00      	ldr	r3, [sp, #0]
 100dea8:	701a      	strb	r2, [r3, #0]
 100deaa:	b01b      	add	sp, #108	; 0x6c
 100deac:	bd30      	pop	{r4, r5, pc}
 100deae:	bf00      	nop

0100deb0 <vsnprintf>:
 100deb0:	b510      	push	{r4, lr}
 100deb2:	f243 4400 	movw	r4, #13312	; 0x3400
 100deb6:	b082      	sub	sp, #8
 100deb8:	f2c0 1401 	movt	r4, #257	; 0x101
 100debc:	9300      	str	r3, [sp, #0]
 100debe:	4613      	mov	r3, r2
 100dec0:	460a      	mov	r2, r1
 100dec2:	4601      	mov	r1, r0
 100dec4:	6820      	ldr	r0, [r4, #0]
 100dec6:	f7ff ffbd 	bl	100de44 <_vsnprintf_r>
 100deca:	b002      	add	sp, #8
 100decc:	bd10      	pop	{r4, pc}
 100dece:	bf00      	nop

0100ded0 <_wcrtomb_r>:
 100ded0:	b570      	push	{r4, r5, r6, lr}
 100ded2:	4605      	mov	r5, r0
 100ded4:	b084      	sub	sp, #16
 100ded6:	f500 748a 	add.w	r4, r0, #276	; 0x114
 100deda:	b103      	cbz	r3, 100dede <_wcrtomb_r+0xe>
 100dedc:	461c      	mov	r4, r3
 100dede:	f243 4300 	movw	r3, #13312	; 0x3400
 100dee2:	f2c0 1301 	movt	r3, #257	; 0x101
 100dee6:	681b      	ldr	r3, [r3, #0]
 100dee8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 100deea:	f643 0330 	movw	r3, #14384	; 0x3830
 100deee:	f2c0 1301 	movt	r3, #257	; 0x101
 100def2:	2800      	cmp	r0, #0
 100def4:	bf08      	it	eq
 100def6:	4618      	moveq	r0, r3
 100def8:	b161      	cbz	r1, 100df14 <_wcrtomb_r+0x44>
 100defa:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 100defe:	4623      	mov	r3, r4
 100df00:	4628      	mov	r0, r5
 100df02:	47b0      	blx	r6
 100df04:	1c43      	adds	r3, r0, #1
 100df06:	bf01      	itttt	eq
 100df08:	2200      	moveq	r2, #0
 100df0a:	238a      	moveq	r3, #138	; 0x8a
 100df0c:	6022      	streq	r2, [r4, #0]
 100df0e:	602b      	streq	r3, [r5, #0]
 100df10:	b004      	add	sp, #16
 100df12:	bd70      	pop	{r4, r5, r6, pc}
 100df14:	460a      	mov	r2, r1
 100df16:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 100df1a:	4623      	mov	r3, r4
 100df1c:	a901      	add	r1, sp, #4
 100df1e:	4628      	mov	r0, r5
 100df20:	47b0      	blx	r6
 100df22:	e7ef      	b.n	100df04 <_wcrtomb_r+0x34>

0100df24 <wcrtomb>:
 100df24:	f243 4300 	movw	r3, #13312	; 0x3400
 100df28:	f2c0 1301 	movt	r3, #257	; 0x101
 100df2c:	b570      	push	{r4, r5, r6, lr}
 100df2e:	b084      	sub	sp, #16
 100df30:	681d      	ldr	r5, [r3, #0]
 100df32:	f505 768a 	add.w	r6, r5, #276	; 0x114
 100df36:	b102      	cbz	r2, 100df3a <wcrtomb+0x16>
 100df38:	4616      	mov	r6, r2
 100df3a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 100df3c:	f643 0330 	movw	r3, #14384	; 0x3830
 100df40:	f2c0 1301 	movt	r3, #257	; 0x101
 100df44:	2c00      	cmp	r4, #0
 100df46:	bf08      	it	eq
 100df48:	461c      	moveq	r4, r3
 100df4a:	b170      	cbz	r0, 100df6a <wcrtomb+0x46>
 100df4c:	460a      	mov	r2, r1
 100df4e:	4633      	mov	r3, r6
 100df50:	4601      	mov	r1, r0
 100df52:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 100df56:	4628      	mov	r0, r5
 100df58:	47a0      	blx	r4
 100df5a:	1c43      	adds	r3, r0, #1
 100df5c:	bf01      	itttt	eq
 100df5e:	2200      	moveq	r2, #0
 100df60:	238a      	moveq	r3, #138	; 0x8a
 100df62:	6032      	streq	r2, [r6, #0]
 100df64:	602b      	streq	r3, [r5, #0]
 100df66:	b004      	add	sp, #16
 100df68:	bd70      	pop	{r4, r5, r6, pc}
 100df6a:	4602      	mov	r2, r0
 100df6c:	4633      	mov	r3, r6
 100df6e:	a901      	add	r1, sp, #4
 100df70:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 100df74:	4628      	mov	r0, r5
 100df76:	47a0      	blx	r4
 100df78:	e7ef      	b.n	100df5a <wcrtomb+0x36>
 100df7a:	bf00      	nop

0100df7c <_wcsrtombs_r>:
 100df7c:	b510      	push	{r4, lr}
 100df7e:	b082      	sub	sp, #8
 100df80:	9c04      	ldr	r4, [sp, #16]
 100df82:	9300      	str	r3, [sp, #0]
 100df84:	f04f 33ff 	mov.w	r3, #4294967295
 100df88:	9401      	str	r4, [sp, #4]
 100df8a:	f002 ffab 	bl	1010ee4 <_wcsnrtombs_r>
 100df8e:	b002      	add	sp, #8
 100df90:	bd10      	pop	{r4, pc}
 100df92:	bf00      	nop

0100df94 <wcsrtombs>:
 100df94:	b510      	push	{r4, lr}
 100df96:	f243 4400 	movw	r4, #13312	; 0x3400
 100df9a:	b082      	sub	sp, #8
 100df9c:	f2c0 1401 	movt	r4, #257	; 0x101
 100dfa0:	9200      	str	r2, [sp, #0]
 100dfa2:	460a      	mov	r2, r1
 100dfa4:	9301      	str	r3, [sp, #4]
 100dfa6:	4601      	mov	r1, r0
 100dfa8:	f04f 33ff 	mov.w	r3, #4294967295
 100dfac:	6820      	ldr	r0, [r4, #0]
 100dfae:	f002 ff99 	bl	1010ee4 <_wcsnrtombs_r>
 100dfb2:	b002      	add	sp, #8
 100dfb4:	bd10      	pop	{r4, pc}
 100dfb6:	bf00      	nop

0100dfb8 <_wctomb_r>:
 100dfb8:	b430      	push	{r4, r5}
 100dfba:	f243 4400 	movw	r4, #13312	; 0x3400
 100dfbe:	f2c0 1401 	movt	r4, #257	; 0x101
 100dfc2:	f643 0530 	movw	r5, #14384	; 0x3830
 100dfc6:	f2c0 1501 	movt	r5, #257	; 0x101
 100dfca:	6824      	ldr	r4, [r4, #0]
 100dfcc:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100dfce:	2c00      	cmp	r4, #0
 100dfd0:	bf08      	it	eq
 100dfd2:	462c      	moveq	r4, r5
 100dfd4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 100dfd8:	46a4      	mov	ip, r4
 100dfda:	bc30      	pop	{r4, r5}
 100dfdc:	4760      	bx	ip
 100dfde:	bf00      	nop

0100dfe0 <__ascii_wctomb>:
 100dfe0:	b141      	cbz	r1, 100dff4 <__ascii_wctomb+0x14>
 100dfe2:	2aff      	cmp	r2, #255	; 0xff
 100dfe4:	bf95      	itete	ls
 100dfe6:	700a      	strbls	r2, [r1, #0]
 100dfe8:	f04f 31ff 	movhi.w	r1, #4294967295
 100dfec:	2101      	movls	r1, #1
 100dfee:	238a      	movhi	r3, #138	; 0x8a
 100dff0:	bf88      	it	hi
 100dff2:	6003      	strhi	r3, [r0, #0]
 100dff4:	4608      	mov	r0, r1
 100dff6:	4770      	bx	lr

0100dff8 <__utf8_wctomb>:
 100dff8:	b3c1      	cbz	r1, 100e06c <__utf8_wctomb+0x74>
 100dffa:	2a7f      	cmp	r2, #127	; 0x7f
 100dffc:	bf9c      	itt	ls
 100dffe:	700a      	strbls	r2, [r1, #0]
 100e000:	2301      	movls	r3, #1
 100e002:	d931      	bls.n	100e068 <__utf8_wctomb+0x70>
 100e004:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100e008:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 100e00c:	d322      	bcc.n	100e054 <__utf8_wctomb+0x5c>
 100e00e:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 100e012:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 100e016:	d32c      	bcc.n	100e072 <__utf8_wctomb+0x7a>
 100e018:	f5a2 3380 	sub.w	r3, r2, #65536	; 0x10000
 100e01c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 100e020:	d237      	bcs.n	100e092 <__utf8_wctomb+0x9a>
 100e022:	f3c2 1385 	ubfx	r3, r2, #6, #6
 100e026:	f3c2 3005 	ubfx	r0, r2, #12, #6
 100e02a:	b410      	push	{r4}
 100e02c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100e030:	0c94      	lsrs	r4, r2, #18
 100e032:	708b      	strb	r3, [r1, #2]
 100e034:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100e038:	2304      	movs	r3, #4
 100e03a:	f064 040f 	orn	r4, r4, #15
 100e03e:	f060 007f 	orn	r0, r0, #127	; 0x7f
 100e042:	700c      	strb	r4, [r1, #0]
 100e044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 100e048:	7048      	strb	r0, [r1, #1]
 100e04a:	4618      	mov	r0, r3
 100e04c:	70ca      	strb	r2, [r1, #3]
 100e04e:	f85d 4b04 	ldr.w	r4, [sp], #4
 100e052:	4770      	bx	lr
 100e054:	0993      	lsrs	r3, r2, #6
 100e056:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100e05a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 100e05e:	700b      	strb	r3, [r1, #0]
 100e060:	2302      	movs	r3, #2
 100e062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 100e066:	704a      	strb	r2, [r1, #1]
 100e068:	4618      	mov	r0, r3
 100e06a:	4770      	bx	lr
 100e06c:	460b      	mov	r3, r1
 100e06e:	4618      	mov	r0, r3
 100e070:	4770      	bx	lr
 100e072:	0b10      	lsrs	r0, r2, #12
 100e074:	f3c2 1385 	ubfx	r3, r2, #6, #6
 100e078:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100e07c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100e080:	f060 001f 	orn	r0, r0, #31
 100e084:	704b      	strb	r3, [r1, #1]
 100e086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 100e08a:	7008      	strb	r0, [r1, #0]
 100e08c:	2303      	movs	r3, #3
 100e08e:	708a      	strb	r2, [r1, #2]
 100e090:	e7ea      	b.n	100e068 <__utf8_wctomb+0x70>
 100e092:	228a      	movs	r2, #138	; 0x8a
 100e094:	f04f 33ff 	mov.w	r3, #4294967295
 100e098:	6002      	str	r2, [r0, #0]
 100e09a:	e7e5      	b.n	100e068 <__utf8_wctomb+0x70>

0100e09c <__sjis_wctomb>:
 100e09c:	b2d3      	uxtb	r3, r2
 100e09e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 100e0a2:	b1e9      	cbz	r1, 100e0e0 <__sjis_wctomb+0x44>
 100e0a4:	b1c2      	cbz	r2, 100e0d8 <__sjis_wctomb+0x3c>
 100e0a6:	b430      	push	{r4, r5}
 100e0a8:	f102 057f 	add.w	r5, r2, #127	; 0x7f
 100e0ac:	f102 0420 	add.w	r4, r2, #32
 100e0b0:	b2ed      	uxtb	r5, r5
 100e0b2:	b2e4      	uxtb	r4, r4
 100e0b4:	2c0f      	cmp	r4, #15
 100e0b6:	bf88      	it	hi
 100e0b8:	2d1e      	cmphi	r5, #30
 100e0ba:	d814      	bhi.n	100e0e6 <__sjis_wctomb+0x4a>
 100e0bc:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 100e0c0:	f083 0580 	eor.w	r5, r3, #128	; 0x80
 100e0c4:	2d7c      	cmp	r5, #124	; 0x7c
 100e0c6:	bf88      	it	hi
 100e0c8:	2c3e      	cmphi	r4, #62	; 0x3e
 100e0ca:	d80c      	bhi.n	100e0e6 <__sjis_wctomb+0x4a>
 100e0cc:	700a      	strb	r2, [r1, #0]
 100e0ce:	2202      	movs	r2, #2
 100e0d0:	704b      	strb	r3, [r1, #1]
 100e0d2:	4610      	mov	r0, r2
 100e0d4:	bc30      	pop	{r4, r5}
 100e0d6:	4770      	bx	lr
 100e0d8:	2201      	movs	r2, #1
 100e0da:	700b      	strb	r3, [r1, #0]
 100e0dc:	4610      	mov	r0, r2
 100e0de:	4770      	bx	lr
 100e0e0:	460a      	mov	r2, r1
 100e0e2:	4610      	mov	r0, r2
 100e0e4:	4770      	bx	lr
 100e0e6:	238a      	movs	r3, #138	; 0x8a
 100e0e8:	f04f 32ff 	mov.w	r2, #4294967295
 100e0ec:	6003      	str	r3, [r0, #0]
 100e0ee:	e7f0      	b.n	100e0d2 <__sjis_wctomb+0x36>

0100e0f0 <__eucjp_wctomb>:
 100e0f0:	b2d3      	uxtb	r3, r2
 100e0f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 100e0f6:	b381      	cbz	r1, 100e15a <__eucjp_wctomb+0x6a>
 100e0f8:	b18a      	cbz	r2, 100e11e <__eucjp_wctomb+0x2e>
 100e0fa:	b430      	push	{r4, r5}
 100e0fc:	f102 045f 	add.w	r4, r2, #95	; 0x5f
 100e100:	f102 0572 	add.w	r5, r2, #114	; 0x72
 100e104:	b2e4      	uxtb	r4, r4
 100e106:	b2ed      	uxtb	r5, r5
 100e108:	2c5d      	cmp	r4, #93	; 0x5d
 100e10a:	bf88      	it	hi
 100e10c:	2d01      	cmphi	r5, #1
 100e10e:	d90a      	bls.n	100e126 <__eucjp_wctomb+0x36>
 100e110:	f04f 32ff 	mov.w	r2, #4294967295
 100e114:	238a      	movs	r3, #138	; 0x8a
 100e116:	6003      	str	r3, [r0, #0]
 100e118:	4610      	mov	r0, r2
 100e11a:	bc30      	pop	{r4, r5}
 100e11c:	4770      	bx	lr
 100e11e:	2201      	movs	r2, #1
 100e120:	700b      	strb	r3, [r1, #0]
 100e122:	4610      	mov	r0, r2
 100e124:	4770      	bx	lr
 100e126:	f103 055f 	add.w	r5, r3, #95	; 0x5f
 100e12a:	b2ed      	uxtb	r5, r5
 100e12c:	2d5d      	cmp	r5, #93	; 0x5d
 100e12e:	bf9e      	ittt	ls
 100e130:	700a      	strbls	r2, [r1, #0]
 100e132:	704b      	strbls	r3, [r1, #1]
 100e134:	2202      	movls	r2, #2
 100e136:	d9ef      	bls.n	100e118 <__eucjp_wctomb+0x28>
 100e138:	2c5d      	cmp	r4, #93	; 0x5d
 100e13a:	d8e9      	bhi.n	100e110 <__eucjp_wctomb+0x20>
 100e13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 100e140:	f103 045f 	add.w	r4, r3, #95	; 0x5f
 100e144:	b2e4      	uxtb	r4, r4
 100e146:	2c5d      	cmp	r4, #93	; 0x5d
 100e148:	d8e2      	bhi.n	100e110 <__eucjp_wctomb+0x20>
 100e14a:	704a      	strb	r2, [r1, #1]
 100e14c:	2203      	movs	r2, #3
 100e14e:	208f      	movs	r0, #143	; 0x8f
 100e150:	708b      	strb	r3, [r1, #2]
 100e152:	7008      	strb	r0, [r1, #0]
 100e154:	4610      	mov	r0, r2
 100e156:	bc30      	pop	{r4, r5}
 100e158:	4770      	bx	lr
 100e15a:	460a      	mov	r2, r1
 100e15c:	4610      	mov	r0, r2
 100e15e:	4770      	bx	lr

0100e160 <__jis_wctomb>:
 100e160:	b430      	push	{r4, r5}
 100e162:	b2d4      	uxtb	r4, r2
 100e164:	f3c2 2207 	ubfx	r2, r2, #8, #8
 100e168:	b391      	cbz	r1, 100e1d0 <__jis_wctomb+0x70>
 100e16a:	b17a      	cbz	r2, 100e18c <__jis_wctomb+0x2c>
 100e16c:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 100e170:	2d5d      	cmp	r5, #93	; 0x5d
 100e172:	d831      	bhi.n	100e1d8 <__jis_wctomb+0x78>
 100e174:	f1a4 0521 	sub.w	r5, r4, #33	; 0x21
 100e178:	2d5d      	cmp	r5, #93	; 0x5d
 100e17a:	d82d      	bhi.n	100e1d8 <__jis_wctomb+0x78>
 100e17c:	6818      	ldr	r0, [r3, #0]
 100e17e:	b1c8      	cbz	r0, 100e1b4 <__jis_wctomb+0x54>
 100e180:	2302      	movs	r3, #2
 100e182:	704c      	strb	r4, [r1, #1]
 100e184:	4618      	mov	r0, r3
 100e186:	700a      	strb	r2, [r1, #0]
 100e188:	bc30      	pop	{r4, r5}
 100e18a:	4770      	bx	lr
 100e18c:	6818      	ldr	r0, [r3, #0]
 100e18e:	b178      	cbz	r0, 100e1b0 <__jis_wctomb+0x50>
 100e190:	601a      	str	r2, [r3, #0]
 100e192:	3103      	adds	r1, #3
 100e194:	221b      	movs	r2, #27
 100e196:	2328      	movs	r3, #40	; 0x28
 100e198:	f801 2c03 	strb.w	r2, [r1, #-3]
 100e19c:	2242      	movs	r2, #66	; 0x42
 100e19e:	f801 3c02 	strb.w	r3, [r1, #-2]
 100e1a2:	2304      	movs	r3, #4
 100e1a4:	f801 2c01 	strb.w	r2, [r1, #-1]
 100e1a8:	700c      	strb	r4, [r1, #0]
 100e1aa:	4618      	mov	r0, r3
 100e1ac:	bc30      	pop	{r4, r5}
 100e1ae:	4770      	bx	lr
 100e1b0:	2301      	movs	r3, #1
 100e1b2:	e7f9      	b.n	100e1a8 <__jis_wctomb+0x48>
 100e1b4:	2001      	movs	r0, #1
 100e1b6:	3103      	adds	r1, #3
 100e1b8:	6018      	str	r0, [r3, #0]
 100e1ba:	201b      	movs	r0, #27
 100e1bc:	2324      	movs	r3, #36	; 0x24
 100e1be:	f801 0c03 	strb.w	r0, [r1, #-3]
 100e1c2:	f801 3c02 	strb.w	r3, [r1, #-2]
 100e1c6:	2042      	movs	r0, #66	; 0x42
 100e1c8:	2305      	movs	r3, #5
 100e1ca:	f801 0c01 	strb.w	r0, [r1, #-1]
 100e1ce:	e7d8      	b.n	100e182 <__jis_wctomb+0x22>
 100e1d0:	2301      	movs	r3, #1
 100e1d2:	4618      	mov	r0, r3
 100e1d4:	bc30      	pop	{r4, r5}
 100e1d6:	4770      	bx	lr
 100e1d8:	228a      	movs	r2, #138	; 0x8a
 100e1da:	f04f 33ff 	mov.w	r3, #4294967295
 100e1de:	6002      	str	r2, [r0, #0]
 100e1e0:	e7e3      	b.n	100e1aa <__jis_wctomb+0x4a>
 100e1e2:	bf00      	nop

0100e1e4 <__call_exitprocs>:
 100e1e4:	f241 5308 	movw	r3, #5384	; 0x1508
 100e1e8:	f2c0 1301 	movt	r3, #257	; 0x101
 100e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100e1f0:	b085      	sub	sp, #20
 100e1f2:	681b      	ldr	r3, [r3, #0]
 100e1f4:	460f      	mov	r7, r1
 100e1f6:	468a      	mov	sl, r1
 100e1f8:	f24a 7269 	movw	r2, #42857	; 0xa769
 100e1fc:	f2c0 1200 	movt	r2, #256	; 0x100
 100e200:	9203      	str	r2, [sp, #12]
 100e202:	e9cd 0300 	strd	r0, r3, [sp]
 100e206:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 100e20a:	9302      	str	r3, [sp, #8]
 100e20c:	9b01      	ldr	r3, [sp, #4]
 100e20e:	f8dd b008 	ldr.w	fp, [sp, #8]
 100e212:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 100e216:	b32e      	cbz	r6, 100e264 <__call_exitprocs+0x80>
 100e218:	f04f 0801 	mov.w	r8, #1
 100e21c:	6874      	ldr	r4, [r6, #4]
 100e21e:	1e65      	subs	r5, r4, #1
 100e220:	bf5e      	ittt	pl
 100e222:	3401      	addpl	r4, #1
 100e224:	2700      	movpl	r7, #0
 100e226:	eb06 0484 	addpl.w	r4, r6, r4, lsl #2
 100e22a:	d40a      	bmi.n	100e242 <__call_exitprocs+0x5e>
 100e22c:	f1ba 0f00 	cmp.w	sl, #0
 100e230:	d01b      	beq.n	100e26a <__call_exitprocs+0x86>
 100e232:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 100e236:	4553      	cmp	r3, sl
 100e238:	d017      	beq.n	100e26a <__call_exitprocs+0x86>
 100e23a:	3d01      	subs	r5, #1
 100e23c:	3c04      	subs	r4, #4
 100e23e:	1c6b      	adds	r3, r5, #1
 100e240:	d1f4      	bne.n	100e22c <__call_exitprocs+0x48>
 100e242:	9b03      	ldr	r3, [sp, #12]
 100e244:	b173      	cbz	r3, 100e264 <__call_exitprocs+0x80>
 100e246:	e9d6 3200 	ldrd	r3, r2, [r6]
 100e24a:	2a00      	cmp	r2, #0
 100e24c:	d133      	bne.n	100e2b6 <__call_exitprocs+0xd2>
 100e24e:	2b00      	cmp	r3, #0
 100e250:	d031      	beq.n	100e2b6 <__call_exitprocs+0xd2>
 100e252:	4630      	mov	r0, r6
 100e254:	f8cb 3000 	str.w	r3, [fp]
 100e258:	f7fc fa86 	bl	100a768 <free>
 100e25c:	f8db 6000 	ldr.w	r6, [fp]
 100e260:	2e00      	cmp	r6, #0
 100e262:	d1db      	bne.n	100e21c <__call_exitprocs+0x38>
 100e264:	b005      	add	sp, #20
 100e266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100e26a:	6873      	ldr	r3, [r6, #4]
 100e26c:	6822      	ldr	r2, [r4, #0]
 100e26e:	3b01      	subs	r3, #1
 100e270:	42ab      	cmp	r3, r5
 100e272:	bf0c      	ite	eq
 100e274:	6075      	streq	r5, [r6, #4]
 100e276:	6027      	strne	r7, [r4, #0]
 100e278:	2a00      	cmp	r2, #0
 100e27a:	d0de      	beq.n	100e23a <__call_exitprocs+0x56>
 100e27c:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 100e280:	fa08 f305 	lsl.w	r3, r8, r5
 100e284:	f8d6 9004 	ldr.w	r9, [r6, #4]
 100e288:	420b      	tst	r3, r1
 100e28a:	d108      	bne.n	100e29e <__call_exitprocs+0xba>
 100e28c:	4790      	blx	r2
 100e28e:	6873      	ldr	r3, [r6, #4]
 100e290:	454b      	cmp	r3, r9
 100e292:	d1bb      	bne.n	100e20c <__call_exitprocs+0x28>
 100e294:	f8db 3000 	ldr.w	r3, [fp]
 100e298:	42b3      	cmp	r3, r6
 100e29a:	d0ce      	beq.n	100e23a <__call_exitprocs+0x56>
 100e29c:	e7b6      	b.n	100e20c <__call_exitprocs+0x28>
 100e29e:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 100e2a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 100e2a6:	4203      	tst	r3, r0
 100e2a8:	d102      	bne.n	100e2b0 <__call_exitprocs+0xcc>
 100e2aa:	9800      	ldr	r0, [sp, #0]
 100e2ac:	4790      	blx	r2
 100e2ae:	e7ee      	b.n	100e28e <__call_exitprocs+0xaa>
 100e2b0:	4608      	mov	r0, r1
 100e2b2:	4790      	blx	r2
 100e2b4:	e7eb      	b.n	100e28e <__call_exitprocs+0xaa>
 100e2b6:	46b3      	mov	fp, r6
 100e2b8:	461e      	mov	r6, r3
 100e2ba:	2e00      	cmp	r6, #0
 100e2bc:	d1ae      	bne.n	100e21c <__call_exitprocs+0x38>
 100e2be:	e7d1      	b.n	100e264 <__call_exitprocs+0x80>

0100e2c0 <__set_ctype>:
 100e2c0:	f241 7344 	movw	r3, #5956	; 0x1744
 100e2c4:	f2c0 1301 	movt	r3, #257	; 0x101
 100e2c8:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 100e2cc:	4770      	bx	lr
 100e2ce:	bf00      	nop

0100e2d0 <quorem>:
 100e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100e2d4:	b085      	sub	sp, #20
 100e2d6:	6903      	ldr	r3, [r0, #16]
 100e2d8:	690d      	ldr	r5, [r1, #16]
 100e2da:	42ab      	cmp	r3, r5
 100e2dc:	bfb8      	it	lt
 100e2de:	2000      	movlt	r0, #0
 100e2e0:	f2c0 8097 	blt.w	100e412 <quorem+0x142>
 100e2e4:	3d01      	subs	r5, #1
 100e2e6:	f101 0414 	add.w	r4, r1, #20
 100e2ea:	f100 0914 	add.w	r9, r0, #20
 100e2ee:	9101      	str	r1, [sp, #4]
 100e2f0:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 100e2f4:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 100e2f8:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 100e2fc:	4680      	mov	r8, r0
 100e2fe:	f102 0b01 	add.w	fp, r2, #1
 100e302:	eb09 020a 	add.w	r2, r9, sl
 100e306:	9203      	str	r2, [sp, #12]
 100e308:	eb04 070a 	add.w	r7, r4, sl
 100e30c:	4618      	mov	r0, r3
 100e30e:	4659      	mov	r1, fp
 100e310:	9302      	str	r3, [sp, #8]
 100e312:	f7fa fe19 	bl	1008f48 <__udivsi3>
 100e316:	9b02      	ldr	r3, [sp, #8]
 100e318:	455b      	cmp	r3, fp
 100e31a:	4606      	mov	r6, r0
 100e31c:	d33f      	bcc.n	100e39e <quorem+0xce>
 100e31e:	2000      	movs	r0, #0
 100e320:	46a6      	mov	lr, r4
 100e322:	4602      	mov	r2, r0
 100e324:	46cc      	mov	ip, r9
 100e326:	f85e bb04 	ldr.w	fp, [lr], #4
 100e32a:	f8dc 1000 	ldr.w	r1, [ip]
 100e32e:	4577      	cmp	r7, lr
 100e330:	fa1f f38b 	uxth.w	r3, fp
 100e334:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 100e338:	fb06 0303 	mla	r3, r6, r3, r0
 100e33c:	ea4f 4013 	mov.w	r0, r3, lsr #16
 100e340:	b29b      	uxth	r3, r3
 100e342:	eba2 0303 	sub.w	r3, r2, r3
 100e346:	fb06 000b 	mla	r0, r6, fp, r0
 100e34a:	fa13 f381 	uxtah	r3, r3, r1
 100e34e:	fa1f fb83 	uxth.w	fp, r3
 100e352:	b282      	uxth	r2, r0
 100e354:	ea4f 4010 	mov.w	r0, r0, lsr #16
 100e358:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
 100e35c:	eb02 4323 	add.w	r3, r2, r3, asr #16
 100e360:	ea4b 4103 	orr.w	r1, fp, r3, lsl #16
 100e364:	ea4f 4223 	mov.w	r2, r3, asr #16
 100e368:	f84c 1b04 	str.w	r1, [ip], #4
 100e36c:	d2db      	bcs.n	100e326 <quorem+0x56>
 100e36e:	f859 300a 	ldr.w	r3, [r9, sl]
 100e372:	b9a3      	cbnz	r3, 100e39e <quorem+0xce>
 100e374:	9a03      	ldr	r2, [sp, #12]
 100e376:	1f13      	subs	r3, r2, #4
 100e378:	4599      	cmp	r9, r3
 100e37a:	d20e      	bcs.n	100e39a <quorem+0xca>
 100e37c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 100e380:	b95b      	cbnz	r3, 100e39a <quorem+0xca>
 100e382:	f1a2 0308 	sub.w	r3, r2, #8
 100e386:	e001      	b.n	100e38c <quorem+0xbc>
 100e388:	6812      	ldr	r2, [r2, #0]
 100e38a:	b932      	cbnz	r2, 100e39a <quorem+0xca>
 100e38c:	4599      	cmp	r9, r3
 100e38e:	461a      	mov	r2, r3
 100e390:	f105 35ff 	add.w	r5, r5, #4294967295
 100e394:	f1a3 0304 	sub.w	r3, r3, #4
 100e398:	d3f6      	bcc.n	100e388 <quorem+0xb8>
 100e39a:	f8c8 5010 	str.w	r5, [r8, #16]
 100e39e:	9901      	ldr	r1, [sp, #4]
 100e3a0:	4640      	mov	r0, r8
 100e3a2:	f001 fb39 	bl	100fa18 <__mcmp>
 100e3a6:	2800      	cmp	r0, #0
 100e3a8:	db32      	blt.n	100e410 <quorem+0x140>
 100e3aa:	3601      	adds	r6, #1
 100e3ac:	4648      	mov	r0, r9
 100e3ae:	f04f 0c00 	mov.w	ip, #0
 100e3b2:	f854 2b04 	ldr.w	r2, [r4], #4
 100e3b6:	6803      	ldr	r3, [r0, #0]
 100e3b8:	42a7      	cmp	r7, r4
 100e3ba:	b291      	uxth	r1, r2
 100e3bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100e3c0:	ebac 0101 	sub.w	r1, ip, r1
 100e3c4:	ebc2 4c13 	rsb	ip, r2, r3, lsr #16
 100e3c8:	fa11 f383 	uxtah	r3, r1, r3
 100e3cc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
 100e3d0:	b29b      	uxth	r3, r3
 100e3d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 100e3d6:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 100e3da:	f840 3b04 	str.w	r3, [r0], #4
 100e3de:	d2e8      	bcs.n	100e3b2 <quorem+0xe2>
 100e3e0:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 100e3e4:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 100e3e8:	b992      	cbnz	r2, 100e410 <quorem+0x140>
 100e3ea:	1f1a      	subs	r2, r3, #4
 100e3ec:	4591      	cmp	r9, r2
 100e3ee:	d20d      	bcs.n	100e40c <quorem+0x13c>
 100e3f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 100e3f4:	b952      	cbnz	r2, 100e40c <quorem+0x13c>
 100e3f6:	3b08      	subs	r3, #8
 100e3f8:	e001      	b.n	100e3fe <quorem+0x12e>
 100e3fa:	6812      	ldr	r2, [r2, #0]
 100e3fc:	b932      	cbnz	r2, 100e40c <quorem+0x13c>
 100e3fe:	4599      	cmp	r9, r3
 100e400:	461a      	mov	r2, r3
 100e402:	f105 35ff 	add.w	r5, r5, #4294967295
 100e406:	f1a3 0304 	sub.w	r3, r3, #4
 100e40a:	d3f6      	bcc.n	100e3fa <quorem+0x12a>
 100e40c:	f8c8 5010 	str.w	r5, [r8, #16]
 100e410:	4630      	mov	r0, r6
 100e412:	b005      	add	sp, #20
 100e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0100e418 <_dtoa_r>:
 100e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100e41c:	b093      	sub	sp, #76	; 0x4c
 100e41e:	ec57 6b10 	vmov	r6, r7, d0
 100e422:	4604      	mov	r4, r0
 100e424:	6c05      	ldr	r5, [r0, #64]	; 0x40
 100e426:	468a      	mov	sl, r1
 100e428:	e9cd 3207 	strd	r3, r2, [sp, #28]
 100e42c:	e9cd 6700 	strd	r6, r7, [sp]
 100e430:	b14d      	cbz	r5, 100e446 <_dtoa_r+0x2e>
 100e432:	6c42      	ldr	r2, [r0, #68]	; 0x44
 100e434:	2301      	movs	r3, #1
 100e436:	4629      	mov	r1, r5
 100e438:	4093      	lsls	r3, r2
 100e43a:	e9c5 2301 	strd	r2, r3, [r5, #4]
 100e43e:	f001 f8a5 	bl	100f58c <_Bfree>
 100e442:	2300      	movs	r3, #0
 100e444:	6423      	str	r3, [r4, #64]	; 0x40
 100e446:	1e3e      	subs	r6, r7, #0
 100e448:	bfbf      	itttt	lt
 100e44a:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 100e44e:	9601      	strlt	r6, [sp, #4]
 100e450:	9a1c      	ldrlt	r2, [sp, #112]	; 0x70
 100e452:	2301      	movlt	r3, #1
 100e454:	bfa5      	ittet	ge
 100e456:	9a1c      	ldrge	r2, [sp, #112]	; 0x70
 100e458:	2300      	movge	r3, #0
 100e45a:	6013      	strlt	r3, [r2, #0]
 100e45c:	6013      	strge	r3, [r2, #0]
 100e45e:	2300      	movs	r3, #0
 100e460:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 100e464:	43b3      	bics	r3, r6
 100e466:	f000 80b1 	beq.w	100e5cc <_dtoa_r+0x1b4>
 100e46a:	ed9d 7b00 	vldr	d7, [sp]
 100e46e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 100e472:	ed8d 7b02 	vstr	d7, [sp, #8]
 100e476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e47a:	d10e      	bne.n	100e49a <_dtoa_r+0x82>
 100e47c:	9a07      	ldr	r2, [sp, #28]
 100e47e:	2301      	movs	r3, #1
 100e480:	6013      	str	r3, [r2, #0]
 100e482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100e484:	2b00      	cmp	r3, #0
 100e486:	f000 8358 	beq.w	100eb3a <_dtoa_r+0x722>
 100e48a:	4bc3      	ldr	r3, [pc, #780]	; (100e798 <_dtoa_r+0x380>)
 100e48c:	1e5e      	subs	r6, r3, #1
 100e48e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 100e490:	6013      	str	r3, [r2, #0]
 100e492:	4630      	mov	r0, r6
 100e494:	b013      	add	sp, #76	; 0x4c
 100e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100e49a:	aa10      	add	r2, sp, #64	; 0x40
 100e49c:	a911      	add	r1, sp, #68	; 0x44
 100e49e:	ed9d 0b02 	vldr	d0, [sp, #8]
 100e4a2:	4620      	mov	r0, r4
 100e4a4:	f001 fbda 	bl	100fc5c <__d2b>
 100e4a8:	ea5f 5b16 	movs.w	fp, r6, lsr #20
 100e4ac:	4680      	mov	r8, r0
 100e4ae:	f040 80a1 	bne.w	100e5f4 <_dtoa_r+0x1dc>
 100e4b2:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
 100e4b6:	eb01 0b03 	add.w	fp, r1, r3
 100e4ba:	f20b 4332 	addw	r3, fp, #1074	; 0x432
 100e4be:	2b20      	cmp	r3, #32
 100e4c0:	f340 8343 	ble.w	100eb4a <_dtoa_r+0x732>
 100e4c4:	f20b 4212 	addw	r2, fp, #1042	; 0x412
 100e4c8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 100e4cc:	409e      	lsls	r6, r3
 100e4ce:	4613      	mov	r3, r2
 100e4d0:	9a00      	ldr	r2, [sp, #0]
 100e4d2:	fa22 f303 	lsr.w	r3, r2, r3
 100e4d6:	4333      	orrs	r3, r6
 100e4d8:	ee07 3a90 	vmov	s15, r3
 100e4dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 100e4e0:	2301      	movs	r3, #1
 100e4e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 100e4e6:	930c      	str	r3, [sp, #48]	; 0x30
 100e4e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 100e4ec:	9805      	ldr	r0, [sp, #20]
 100e4ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 100e4f2:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 100e4f6:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 100e4fa:	ec43 2b13 	vmov	d3, r2, r3
 100e4fe:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 100e780 <_dtoa_r+0x368>
 100e502:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 100e788 <_dtoa_r+0x370>
 100e506:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 100e790 <_dtoa_r+0x378>
 100e50a:	ee33 6b46 	vsub.f64	d6, d3, d6
 100e50e:	ee06 7b04 	vmla.f64	d7, d6, d4
 100e512:	ee06 ba90 	vmov	s13, fp
 100e516:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 100e51a:	ee06 7b05 	vmla.f64	d7, d6, d5
 100e51e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 100e522:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 100e526:	ee16 5a90 	vmov	r5, s13
 100e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e52e:	d508      	bpl.n	100e542 <_dtoa_r+0x12a>
 100e530:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 100e534:	eeb4 6b47 	vcmp.f64	d6, d7
 100e538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e53c:	bf18      	it	ne
 100e53e:	f105 35ff 	addne.w	r5, r5, #4294967295
 100e542:	2d16      	cmp	r5, #22
 100e544:	eba1 0b0b 	sub.w	fp, r1, fp
 100e548:	f10b 36ff 	add.w	r6, fp, #4294967295
 100e54c:	f200 82e7 	bhi.w	100eb1e <_dtoa_r+0x706>
 100e550:	f641 0358 	movw	r3, #6232	; 0x1858
 100e554:	f2c0 1301 	movt	r3, #257	; 0x101
 100e558:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 100e55c:	ed9d 6b02 	vldr	d6, [sp, #8]
 100e560:	ed93 7b00 	vldr	d7, [r3]
 100e564:	eeb4 6bc7 	vcmpe.f64	d6, d7
 100e568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e56c:	d55b      	bpl.n	100e626 <_dtoa_r+0x20e>
 100e56e:	2e00      	cmp	r6, #0
 100e570:	f04f 0300 	mov.w	r3, #0
 100e574:	f105 35ff 	add.w	r5, r5, #4294967295
 100e578:	930d      	str	r3, [sp, #52]	; 0x34
 100e57a:	bfa4      	itt	ge
 100e57c:	2300      	movge	r3, #0
 100e57e:	9309      	strge	r3, [sp, #36]	; 0x24
 100e580:	f2c0 82d6 	blt.w	100eb30 <_dtoa_r+0x718>
 100e584:	2d00      	cmp	r5, #0
 100e586:	da56      	bge.n	100e636 <_dtoa_r+0x21e>
 100e588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e58a:	f1ba 0f09 	cmp.w	sl, #9
 100e58e:	9504      	str	r5, [sp, #16]
 100e590:	eba3 0305 	sub.w	r3, r3, r5
 100e594:	9309      	str	r3, [sp, #36]	; 0x24
 100e596:	f1c5 0300 	rsb	r3, r5, #0
 100e59a:	f04f 0500 	mov.w	r5, #0
 100e59e:	930b      	str	r3, [sp, #44]	; 0x2c
 100e5a0:	d851      	bhi.n	100e646 <_dtoa_r+0x22e>
 100e5a2:	f1ba 0f05 	cmp.w	sl, #5
 100e5a6:	bfc4      	itt	gt
 100e5a8:	f1aa 0a04 	subgt.w	sl, sl, #4
 100e5ac:	f04f 0900 	movgt.w	r9, #0
 100e5b0:	dc01      	bgt.n	100e5b6 <_dtoa_r+0x19e>
 100e5b2:	f04f 0901 	mov.w	r9, #1
 100e5b6:	f1aa 0302 	sub.w	r3, sl, #2
 100e5ba:	2b03      	cmp	r3, #3
 100e5bc:	f200 8477 	bhi.w	100eeae <_dtoa_r+0xa96>
 100e5c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 100e5c4:	0367036a 	.word	0x0367036a
 100e5c8:	035b033d 	.word	0x035b033d
 100e5cc:	9a07      	ldr	r2, [sp, #28]
 100e5ce:	f242 730f 	movw	r3, #9999	; 0x270f
 100e5d2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 100e5d6:	6013      	str	r3, [r2, #0]
 100e5d8:	9b00      	ldr	r3, [sp, #0]
 100e5da:	4333      	orrs	r3, r6
 100e5dc:	d119      	bne.n	100e612 <_dtoa_r+0x1fa>
 100e5de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100e5e0:	f243 0628 	movw	r6, #12328	; 0x3028
 100e5e4:	f2c0 1601 	movt	r6, #257	; 0x101
 100e5e8:	2b00      	cmp	r3, #0
 100e5ea:	f43f af52 	beq.w	100e492 <_dtoa_r+0x7a>
 100e5ee:	f106 0308 	add.w	r3, r6, #8
 100e5f2:	e74c      	b.n	100e48e <_dtoa_r+0x76>
 100e5f4:	9903      	ldr	r1, [sp, #12]
 100e5f6:	2000      	movs	r0, #0
 100e5f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100e5fc:	f2ab 3bff 	subw	fp, fp, #1023	; 0x3ff
 100e600:	f3c1 0113 	ubfx	r1, r1, #0, #20
 100e604:	900c      	str	r0, [sp, #48]	; 0x30
 100e606:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 100e60a:	9910      	ldr	r1, [sp, #64]	; 0x40
 100e60c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 100e610:	e771      	b.n	100e4f6 <_dtoa_r+0xde>
 100e612:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100e614:	f243 0624 	movw	r6, #12324	; 0x3024
 100e618:	f2c0 1601 	movt	r6, #257	; 0x101
 100e61c:	2b00      	cmp	r3, #0
 100e61e:	f43f af38 	beq.w	100e492 <_dtoa_r+0x7a>
 100e622:	1cf3      	adds	r3, r6, #3
 100e624:	e733      	b.n	100e48e <_dtoa_r+0x76>
 100e626:	2e00      	cmp	r6, #0
 100e628:	f04f 0300 	mov.w	r3, #0
 100e62c:	930d      	str	r3, [sp, #52]	; 0x34
 100e62e:	bfa8      	it	ge
 100e630:	9309      	strge	r3, [sp, #36]	; 0x24
 100e632:	f2c0 827d 	blt.w	100eb30 <_dtoa_r+0x718>
 100e636:	f1ba 0f09 	cmp.w	sl, #9
 100e63a:	f04f 0300 	mov.w	r3, #0
 100e63e:	442e      	add	r6, r5
 100e640:	9504      	str	r5, [sp, #16]
 100e642:	930b      	str	r3, [sp, #44]	; 0x2c
 100e644:	d9ad      	bls.n	100e5a2 <_dtoa_r+0x18a>
 100e646:	f04f 0a00 	mov.w	sl, #0
 100e64a:	f04f 37ff 	mov.w	r7, #4294967295
 100e64e:	46d1      	mov	r9, sl
 100e650:	2301      	movs	r3, #1
 100e652:	f8cd a020 	str.w	sl, [sp, #32]
 100e656:	930a      	str	r3, [sp, #40]	; 0x28
 100e658:	2100      	movs	r1, #0
 100e65a:	970e      	str	r7, [sp, #56]	; 0x38
 100e65c:	6461      	str	r1, [r4, #68]	; 0x44
 100e65e:	4620      	mov	r0, r4
 100e660:	f000 ff6e 	bl	100f540 <_Balloc>
 100e664:	4683      	mov	fp, r0
 100e666:	6420      	str	r0, [r4, #64]	; 0x40
 100e668:	f1b9 0f00 	cmp.w	r9, #0
 100e66c:	f000 80e2 	beq.w	100e834 <_dtoa_r+0x41c>
 100e670:	9a04      	ldr	r2, [sp, #16]
 100e672:	2a00      	cmp	r2, #0
 100e674:	f340 827a 	ble.w	100eb6c <_dtoa_r+0x754>
 100e678:	f002 010f 	and.w	r1, r2, #15
 100e67c:	f641 0358 	movw	r3, #6232	; 0x1858
 100e680:	f2c0 1301 	movt	r3, #257	; 0x101
 100e684:	1112      	asrs	r2, r2, #4
 100e686:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 100e68a:	ed93 6b00 	vldr	d6, [r3]
 100e68e:	06d3      	lsls	r3, r2, #27
 100e690:	f140 82d1 	bpl.w	100ec36 <_dtoa_r+0x81e>
 100e694:	f641 1348 	movw	r3, #6472	; 0x1948
 100e698:	f2c0 1301 	movt	r3, #257	; 0x101
 100e69c:	ed9d 5b02 	vldr	d5, [sp, #8]
 100e6a0:	f002 020f 	and.w	r2, r2, #15
 100e6a4:	2103      	movs	r1, #3
 100e6a6:	ed93 7b08 	vldr	d7, [r3, #32]
 100e6aa:	ee85 5b07 	vdiv.f64	d5, d5, d7
 100e6ae:	f641 1348 	movw	r3, #6472	; 0x1948
 100e6b2:	f2c0 1301 	movt	r3, #257	; 0x101
 100e6b6:	b152      	cbz	r2, 100e6ce <_dtoa_r+0x2b6>
 100e6b8:	07d0      	lsls	r0, r2, #31
 100e6ba:	d504      	bpl.n	100e6c6 <_dtoa_r+0x2ae>
 100e6bc:	ed93 7b00 	vldr	d7, [r3]
 100e6c0:	3101      	adds	r1, #1
 100e6c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 100e6c6:	1052      	asrs	r2, r2, #1
 100e6c8:	f103 0308 	add.w	r3, r3, #8
 100e6cc:	d1f4      	bne.n	100e6b8 <_dtoa_r+0x2a0>
 100e6ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 100e6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100e6d4:	b13b      	cbz	r3, 100e6e6 <_dtoa_r+0x2ce>
 100e6d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 100e6da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 100e6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e6e2:	f100 83b3 	bmi.w	100ee4c <_dtoa_r+0xa34>
 100e6e6:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 100e6ea:	ee05 1a90 	vmov	s11, r1
 100e6ee:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 100e6f2:	ee05 6b07 	vmla.f64	d6, d5, d7
 100e6f6:	ed8d 6b00 	vstr	d6, [sp]
 100e6fa:	9b01      	ldr	r3, [sp, #4]
 100e6fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 100e700:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 100e704:	2f00      	cmp	r7, #0
 100e706:	d07d      	beq.n	100e804 <_dtoa_r+0x3ec>
 100e708:	f8dd e010 	ldr.w	lr, [sp, #16]
 100e70c:	463a      	mov	r2, r7
 100e70e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 100e712:	f641 0c58 	movw	ip, #6232	; 0x1858
 100e716:	ec41 0b15 	vmov	d5, r0, r1
 100e71a:	f2c0 1c01 	movt	ip, #257	; 0x101
 100e71e:	980a      	ldr	r0, [sp, #40]	; 0x28
 100e720:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 100e724:	f10b 0301 	add.w	r3, fp, #1
 100e728:	ed1c 3b02 	vldr	d3, [ip, #-8]
 100e72c:	ee16 1a90 	vmov	r1, s13
 100e730:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 100e734:	ee37 7b44 	vsub.f64	d7, d7, d4
 100e738:	3130      	adds	r1, #48	; 0x30
 100e73a:	b2c9      	uxtb	r1, r1
 100e73c:	2800      	cmp	r0, #0
 100e73e:	f000 82ae 	beq.w	100ec9e <_dtoa_r+0x886>
 100e742:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 100e746:	f88b 1000 	strb.w	r1, [fp]
 100e74a:	ee84 6b03 	vdiv.f64	d6, d4, d3
 100e74e:	ee36 6b45 	vsub.f64	d6, d6, d5
 100e752:	eeb4 6bc7 	vcmpe.f64	d6, d7
 100e756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e75a:	dc3e      	bgt.n	100e7da <_dtoa_r+0x3c2>
 100e75c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 100e760:	ee32 5b47 	vsub.f64	d5, d2, d7
 100e764:	eeb4 6bc5 	vcmpe.f64	d6, d5
 100e768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e76c:	f300 8473 	bgt.w	100f056 <_dtoa_r+0xc3e>
 100e770:	2a01      	cmp	r2, #1
 100e772:	d05b      	beq.n	100e82c <_dtoa_r+0x414>
 100e774:	445a      	add	r2, fp
 100e776:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 100e77a:	e019      	b.n	100e7b0 <_dtoa_r+0x398>
 100e77c:	f3af 8000 	nop.w
 100e780:	636f4361 	.word	0x636f4361
 100e784:	3fd287a7 	.word	0x3fd287a7
 100e788:	8b60c8b3 	.word	0x8b60c8b3
 100e78c:	3fc68a28 	.word	0x3fc68a28
 100e790:	509f79fb 	.word	0x509f79fb
 100e794:	3fd34413 	.word	0x3fd34413
 100e798:	01013021 	.word	0x01013021
 100e79c:	ee32 5b47 	vsub.f64	d5, d2, d7
 100e7a0:	eeb4 5bc6 	vcmpe.f64	d5, d6
 100e7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e7a8:	f100 8455 	bmi.w	100f056 <_dtoa_r+0xc3e>
 100e7ac:	4293      	cmp	r3, r2
 100e7ae:	d03d      	beq.n	100e82c <_dtoa_r+0x414>
 100e7b0:	ee27 5b04 	vmul.f64	d5, d7, d4
 100e7b4:	ee26 6b04 	vmul.f64	d6, d6, d4
 100e7b8:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 100e7bc:	ee17 1a90 	vmov	r1, s15
 100e7c0:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 100e7c4:	ee35 7b43 	vsub.f64	d7, d5, d3
 100e7c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 100e7cc:	3130      	adds	r1, #48	; 0x30
 100e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e7d2:	b2c9      	uxtb	r1, r1
 100e7d4:	f803 1b01 	strb.w	r1, [r3], #1
 100e7d8:	d5e0      	bpl.n	100e79c <_dtoa_r+0x384>
 100e7da:	465e      	mov	r6, fp
 100e7dc:	f10e 0201 	add.w	r2, lr, #1
 100e7e0:	469b      	mov	fp, r3
 100e7e2:	9204      	str	r2, [sp, #16]
 100e7e4:	e0e3      	b.n	100e9ae <_dtoa_r+0x596>
 100e7e6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 100e7ea:	ee06 1a90 	vmov	s13, r1
 100e7ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 100e7f2:	ee06 5b07 	vmla.f64	d5, d6, d7
 100e7f6:	ed8d 5b00 	vstr	d5, [sp]
 100e7fa:	9b01      	ldr	r3, [sp, #4]
 100e7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 100e800:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 100e804:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 100e808:	ec41 0b15 	vmov	d5, r0, r1
 100e80c:	ee37 7b46 	vsub.f64	d7, d7, d6
 100e810:	eeb4 7bc5 	vcmpe.f64	d7, d5
 100e814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e818:	f300 8345 	bgt.w	100eea6 <_dtoa_r+0xa8e>
 100e81c:	eeb1 5b45 	vneg.f64	d5, d5
 100e820:	eeb4 7bc5 	vcmpe.f64	d7, d5
 100e824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e828:	f100 8171 	bmi.w	100eb0e <_dtoa_r+0x6f6>
 100e82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100e830:	e9cd 2300 	strd	r2, r3, [sp]
 100e834:	9a04      	ldr	r2, [sp, #16]
 100e836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100e838:	4611      	mov	r1, r2
 100e83a:	290e      	cmp	r1, #14
 100e83c:	ea6f 0203 	mvn.w	r2, r3
 100e840:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 100e844:	bfc8      	it	gt
 100e846:	2200      	movgt	r2, #0
 100e848:	2a00      	cmp	r2, #0
 100e84a:	f040 814a 	bne.w	100eae2 <_dtoa_r+0x6ca>
 100e84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 100e850:	2a00      	cmp	r2, #0
 100e852:	f000 8182 	beq.w	100eb5a <_dtoa_r+0x742>
 100e856:	f1ba 0f01 	cmp.w	sl, #1
 100e85a:	f340 8316 	ble.w	100ee8a <_dtoa_r+0xa72>
 100e85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e860:	1e7a      	subs	r2, r7, #1
 100e862:	4293      	cmp	r3, r2
 100e864:	bfaf      	iteee	ge
 100e866:	1a9b      	subge	r3, r3, r2
 100e868:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 100e86a:	920b      	strlt	r2, [sp, #44]	; 0x2c
 100e86c:	1ad3      	sublt	r3, r2, r3
 100e86e:	bfbc      	itt	lt
 100e870:	18ed      	addlt	r5, r5, r3
 100e872:	2300      	movlt	r3, #0
 100e874:	2f00      	cmp	r7, #0
 100e876:	9302      	str	r3, [sp, #8]
 100e878:	bfa5      	ittet	ge
 100e87a:	19f6      	addge	r6, r6, r7
 100e87c:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 100e87e:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 100e880:	930c      	strge	r3, [sp, #48]	; 0x30
 100e882:	bfb5      	itete	lt
 100e884:	1bdb      	sublt	r3, r3, r7
 100e886:	19db      	addge	r3, r3, r7
 100e888:	930c      	strlt	r3, [sp, #48]	; 0x30
 100e88a:	9309      	strge	r3, [sp, #36]	; 0x24
 100e88c:	2101      	movs	r1, #1
 100e88e:	4620      	mov	r0, r4
 100e890:	f000 ff68 	bl	100f764 <__i2b>
 100e894:	4681      	mov	r9, r0
 100e896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100e898:	2a00      	cmp	r2, #0
 100e89a:	bfc8      	it	gt
 100e89c:	2e00      	cmpgt	r6, #0
 100e89e:	dd09      	ble.n	100e8b4 <_dtoa_r+0x49c>
 100e8a0:	42b2      	cmp	r2, r6
 100e8a2:	4613      	mov	r3, r2
 100e8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 100e8a6:	bfa8      	it	ge
 100e8a8:	4633      	movge	r3, r6
 100e8aa:	1af6      	subs	r6, r6, r3
 100e8ac:	1ac9      	subs	r1, r1, r3
 100e8ae:	1ad2      	subs	r2, r2, r3
 100e8b0:	9109      	str	r1, [sp, #36]	; 0x24
 100e8b2:	920c      	str	r2, [sp, #48]	; 0x30
 100e8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e8b6:	b163      	cbz	r3, 100e8d2 <_dtoa_r+0x4ba>
 100e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100e8ba:	2b00      	cmp	r3, #0
 100e8bc:	f000 810a 	beq.w	100ead4 <_dtoa_r+0x6bc>
 100e8c0:	9b02      	ldr	r3, [sp, #8]
 100e8c2:	2b00      	cmp	r3, #0
 100e8c4:	f300 8294 	bgt.w	100edf0 <_dtoa_r+0x9d8>
 100e8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e8ca:	9a02      	ldr	r2, [sp, #8]
 100e8cc:	1a9a      	subs	r2, r3, r2
 100e8ce:	f040 8102 	bne.w	100ead6 <_dtoa_r+0x6be>
 100e8d2:	2101      	movs	r1, #1
 100e8d4:	4620      	mov	r0, r4
 100e8d6:	f000 ff45 	bl	100f764 <__i2b>
 100e8da:	2d00      	cmp	r5, #0
 100e8dc:	9002      	str	r0, [sp, #8]
 100e8de:	f300 8174 	bgt.w	100ebca <_dtoa_r+0x7b2>
 100e8e2:	f1ba 0f01 	cmp.w	sl, #1
 100e8e6:	f340 82a5 	ble.w	100ee34 <_dtoa_r+0xa1c>
 100e8ea:	2300      	movs	r3, #0
 100e8ec:	930b      	str	r3, [sp, #44]	; 0x2c
 100e8ee:	2001      	movs	r0, #1
 100e8f0:	2d00      	cmp	r5, #0
 100e8f2:	f040 8176 	bne.w	100ebe2 <_dtoa_r+0x7ca>
 100e8f6:	4430      	add	r0, r6
 100e8f8:	f010 001f 	ands.w	r0, r0, #31
 100e8fc:	f000 8134 	beq.w	100eb68 <_dtoa_r+0x750>
 100e900:	f1c0 0320 	rsb	r3, r0, #32
 100e904:	2b04      	cmp	r3, #4
 100e906:	f340 83fe 	ble.w	100f106 <_dtoa_r+0xcee>
 100e90a:	f1c0 001c 	rsb	r0, r0, #28
 100e90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e910:	4406      	add	r6, r0
 100e912:	4403      	add	r3, r0
 100e914:	9309      	str	r3, [sp, #36]	; 0x24
 100e916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100e918:	4403      	add	r3, r0
 100e91a:	930c      	str	r3, [sp, #48]	; 0x30
 100e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e91e:	2b00      	cmp	r3, #0
 100e920:	dd05      	ble.n	100e92e <_dtoa_r+0x516>
 100e922:	4641      	mov	r1, r8
 100e924:	461a      	mov	r2, r3
 100e926:	4620      	mov	r0, r4
 100e928:	f001 f818 	bl	100f95c <__lshift>
 100e92c:	4680      	mov	r8, r0
 100e92e:	2e00      	cmp	r6, #0
 100e930:	dd05      	ble.n	100e93e <_dtoa_r+0x526>
 100e932:	4632      	mov	r2, r6
 100e934:	9902      	ldr	r1, [sp, #8]
 100e936:	4620      	mov	r0, r4
 100e938:	f001 f810 	bl	100f95c <__lshift>
 100e93c:	9002      	str	r0, [sp, #8]
 100e93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100e940:	f1ba 0f02 	cmp.w	sl, #2
 100e944:	bfd4      	ite	le
 100e946:	2500      	movle	r5, #0
 100e948:	2501      	movgt	r5, #1
 100e94a:	2b00      	cmp	r3, #0
 100e94c:	f040 8153 	bne.w	100ebf6 <_dtoa_r+0x7de>
 100e950:	2f00      	cmp	r7, #0
 100e952:	bfcc      	ite	gt
 100e954:	2500      	movgt	r5, #0
 100e956:	f005 0501 	andle.w	r5, r5, #1
 100e95a:	2d00      	cmp	r5, #0
 100e95c:	d03c      	beq.n	100e9d8 <_dtoa_r+0x5c0>
 100e95e:	2f00      	cmp	r7, #0
 100e960:	f040 80d8 	bne.w	100eb14 <_dtoa_r+0x6fc>
 100e964:	463b      	mov	r3, r7
 100e966:	9902      	ldr	r1, [sp, #8]
 100e968:	2205      	movs	r2, #5
 100e96a:	4620      	mov	r0, r4
 100e96c:	f000 fe18 	bl	100f5a0 <__multadd>
 100e970:	4601      	mov	r1, r0
 100e972:	9002      	str	r0, [sp, #8]
 100e974:	4640      	mov	r0, r8
 100e976:	f001 f84f 	bl	100fa18 <__mcmp>
 100e97a:	2800      	cmp	r0, #0
 100e97c:	f340 80ca 	ble.w	100eb14 <_dtoa_r+0x6fc>
 100e980:	9a04      	ldr	r2, [sp, #16]
 100e982:	465b      	mov	r3, fp
 100e984:	465e      	mov	r6, fp
 100e986:	f102 0a01 	add.w	sl, r2, #1
 100e98a:	2231      	movs	r2, #49	; 0x31
 100e98c:	f803 2b01 	strb.w	r2, [r3], #1
 100e990:	469b      	mov	fp, r3
 100e992:	9902      	ldr	r1, [sp, #8]
 100e994:	4620      	mov	r0, r4
 100e996:	f10a 0301 	add.w	r3, sl, #1
 100e99a:	9304      	str	r3, [sp, #16]
 100e99c:	f000 fdf6 	bl	100f58c <_Bfree>
 100e9a0:	f1b9 0f00 	cmp.w	r9, #0
 100e9a4:	d003      	beq.n	100e9ae <_dtoa_r+0x596>
 100e9a6:	4649      	mov	r1, r9
 100e9a8:	4620      	mov	r0, r4
 100e9aa:	f000 fdef 	bl	100f58c <_Bfree>
 100e9ae:	4641      	mov	r1, r8
 100e9b0:	4620      	mov	r0, r4
 100e9b2:	f000 fdeb 	bl	100f58c <_Bfree>
 100e9b6:	2300      	movs	r3, #0
 100e9b8:	f88b 3000 	strb.w	r3, [fp]
 100e9bc:	9b07      	ldr	r3, [sp, #28]
 100e9be:	461a      	mov	r2, r3
 100e9c0:	9b04      	ldr	r3, [sp, #16]
 100e9c2:	6013      	str	r3, [r2, #0]
 100e9c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100e9c6:	2b00      	cmp	r3, #0
 100e9c8:	f43f ad63 	beq.w	100e492 <_dtoa_r+0x7a>
 100e9cc:	4630      	mov	r0, r6
 100e9ce:	f8c3 b000 	str.w	fp, [r3]
 100e9d2:	b013      	add	sp, #76	; 0x4c
 100e9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100e9d8:	9b04      	ldr	r3, [sp, #16]
 100e9da:	3301      	adds	r3, #1
 100e9dc:	9304      	str	r3, [sp, #16]
 100e9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100e9e0:	2b00      	cmp	r3, #0
 100e9e2:	f000 818e 	beq.w	100ed02 <_dtoa_r+0x8ea>
 100e9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100e9e8:	2b00      	cmp	r3, #0
 100e9ea:	dd05      	ble.n	100e9f8 <_dtoa_r+0x5e0>
 100e9ec:	4649      	mov	r1, r9
 100e9ee:	461a      	mov	r2, r3
 100e9f0:	4620      	mov	r0, r4
 100e9f2:	f000 ffb3 	bl	100f95c <__lshift>
 100e9f6:	4681      	mov	r9, r0
 100e9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e9fa:	2b00      	cmp	r3, #0
 100e9fc:	f040 8315 	bne.w	100f02a <_dtoa_r+0xc12>
 100ea00:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 100ea04:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 100ea08:	f10b 33ff 	add.w	r3, fp, #4294967295
 100ea0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100ea10:	443b      	add	r3, r7
 100ea12:	9a00      	ldr	r2, [sp, #0]
 100ea14:	465f      	mov	r7, fp
 100ea16:	930b      	str	r3, [sp, #44]	; 0x2c
 100ea18:	f002 0201 	and.w	r2, r2, #1
 100ea1c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 100ea20:	9208      	str	r2, [sp, #32]
 100ea22:	9d02      	ldr	r5, [sp, #8]
 100ea24:	4640      	mov	r0, r8
 100ea26:	4629      	mov	r1, r5
 100ea28:	f7ff fc52 	bl	100e2d0 <quorem>
 100ea2c:	4649      	mov	r1, r9
 100ea2e:	4683      	mov	fp, r0
 100ea30:	4640      	mov	r0, r8
 100ea32:	f000 fff1 	bl	100fa18 <__mcmp>
 100ea36:	4629      	mov	r1, r5
 100ea38:	4652      	mov	r2, sl
 100ea3a:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 100ea3e:	9300      	str	r3, [sp, #0]
 100ea40:	4606      	mov	r6, r0
 100ea42:	4620      	mov	r0, r4
 100ea44:	f001 f806 	bl	100fa54 <__mdiff>
 100ea48:	68c3      	ldr	r3, [r0, #12]
 100ea4a:	4605      	mov	r5, r0
 100ea4c:	4601      	mov	r1, r0
 100ea4e:	2b00      	cmp	r3, #0
 100ea50:	f040 81e1 	bne.w	100ee16 <_dtoa_r+0x9fe>
 100ea54:	4640      	mov	r0, r8
 100ea56:	f000 ffdf 	bl	100fa18 <__mcmp>
 100ea5a:	4629      	mov	r1, r5
 100ea5c:	900a      	str	r0, [sp, #40]	; 0x28
 100ea5e:	4620      	mov	r0, r4
 100ea60:	f000 fd94 	bl	100f58c <_Bfree>
 100ea64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ea66:	9908      	ldr	r1, [sp, #32]
 100ea68:	461a      	mov	r2, r3
 100ea6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100ea6c:	431a      	orrs	r2, r3
 100ea6e:	430a      	orrs	r2, r1
 100ea70:	f000 8321 	beq.w	100f0b6 <_dtoa_r+0xc9e>
 100ea74:	2e00      	cmp	r6, #0
 100ea76:	f107 0501 	add.w	r5, r7, #1
 100ea7a:	f2c0 82ae 	blt.w	100efda <_dtoa_r+0xbc2>
 100ea7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ea80:	4316      	orrs	r6, r2
 100ea82:	9a08      	ldr	r2, [sp, #32]
 100ea84:	4332      	orrs	r2, r6
 100ea86:	f000 82a8 	beq.w	100efda <_dtoa_r+0xbc2>
 100ea8a:	2b00      	cmp	r3, #0
 100ea8c:	f300 82e8 	bgt.w	100f060 <_dtoa_r+0xc48>
 100ea90:	9b00      	ldr	r3, [sp, #0]
 100ea92:	703b      	strb	r3, [r7, #0]
 100ea94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100ea96:	42bb      	cmp	r3, r7
 100ea98:	f000 82f0 	beq.w	100f07c <_dtoa_r+0xc64>
 100ea9c:	4641      	mov	r1, r8
 100ea9e:	2300      	movs	r3, #0
 100eaa0:	220a      	movs	r2, #10
 100eaa2:	4620      	mov	r0, r4
 100eaa4:	f000 fd7c 	bl	100f5a0 <__multadd>
 100eaa8:	45d1      	cmp	r9, sl
 100eaaa:	4649      	mov	r1, r9
 100eaac:	f04f 0300 	mov.w	r3, #0
 100eab0:	f04f 020a 	mov.w	r2, #10
 100eab4:	4680      	mov	r8, r0
 100eab6:	4620      	mov	r0, r4
 100eab8:	f000 81b2 	beq.w	100ee20 <_dtoa_r+0xa08>
 100eabc:	f000 fd70 	bl	100f5a0 <__multadd>
 100eac0:	4651      	mov	r1, sl
 100eac2:	2300      	movs	r3, #0
 100eac4:	220a      	movs	r2, #10
 100eac6:	462f      	mov	r7, r5
 100eac8:	4681      	mov	r9, r0
 100eaca:	4620      	mov	r0, r4
 100eacc:	f000 fd68 	bl	100f5a0 <__multadd>
 100ead0:	4682      	mov	sl, r0
 100ead2:	e7a6      	b.n	100ea22 <_dtoa_r+0x60a>
 100ead4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100ead6:	4641      	mov	r1, r8
 100ead8:	4620      	mov	r0, r4
 100eada:	f000 feed 	bl	100f8b8 <__pow5mult>
 100eade:	4680      	mov	r8, r0
 100eae0:	e6f7      	b.n	100e8d2 <_dtoa_r+0x4ba>
 100eae2:	f641 0358 	movw	r3, #6232	; 0x1858
 100eae6:	f2c0 1301 	movt	r3, #257	; 0x101
 100eaea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 100eaee:	2f00      	cmp	r7, #0
 100eaf0:	460a      	mov	r2, r1
 100eaf2:	ed93 5b00 	vldr	d5, [r3]
 100eaf6:	bfc8      	it	gt
 100eaf8:	2200      	movgt	r2, #0
 100eafa:	9b08      	ldr	r3, [sp, #32]
 100eafc:	bfd8      	it	le
 100eafe:	2201      	movle	r2, #1
 100eb00:	ea12 73d3 	ands.w	r3, r2, r3, lsr #31
 100eb04:	f000 81ed 	beq.w	100eee2 <_dtoa_r+0xaca>
 100eb08:	2f00      	cmp	r7, #0
 100eb0a:	f000 814a 	beq.w	100eda2 <_dtoa_r+0x98a>
 100eb0e:	2300      	movs	r3, #0
 100eb10:	9302      	str	r3, [sp, #8]
 100eb12:	4699      	mov	r9, r3
 100eb14:	9b08      	ldr	r3, [sp, #32]
 100eb16:	465e      	mov	r6, fp
 100eb18:	ea6f 0a03 	mvn.w	sl, r3
 100eb1c:	e739      	b.n	100e992 <_dtoa_r+0x57a>
 100eb1e:	2e00      	cmp	r6, #0
 100eb20:	f04f 0301 	mov.w	r3, #1
 100eb24:	930d      	str	r3, [sp, #52]	; 0x34
 100eb26:	bfa4      	itt	ge
 100eb28:	2300      	movge	r3, #0
 100eb2a:	9309      	strge	r3, [sp, #36]	; 0x24
 100eb2c:	f6bf ad2a 	bge.w	100e584 <_dtoa_r+0x16c>
 100eb30:	f1cb 0301 	rsb	r3, fp, #1
 100eb34:	2600      	movs	r6, #0
 100eb36:	9309      	str	r3, [sp, #36]	; 0x24
 100eb38:	e524      	b.n	100e584 <_dtoa_r+0x16c>
 100eb3a:	f243 0620 	movw	r6, #12320	; 0x3020
 100eb3e:	f2c0 1601 	movt	r6, #257	; 0x101
 100eb42:	4630      	mov	r0, r6
 100eb44:	b013      	add	sp, #76	; 0x4c
 100eb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100eb4a:	9a00      	ldr	r2, [sp, #0]
 100eb4c:	f1c3 0320 	rsb	r3, r3, #32
 100eb50:	fa02 f303 	lsl.w	r3, r2, r3
 100eb54:	ee07 3a90 	vmov	s15, r3
 100eb58:	e4c0      	b.n	100e4dc <_dtoa_r+0xc4>
 100eb5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100eb5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 100eb60:	9302      	str	r3, [sp, #8]
 100eb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100eb64:	930c      	str	r3, [sp, #48]	; 0x30
 100eb66:	e696      	b.n	100e896 <_dtoa_r+0x47e>
 100eb68:	201c      	movs	r0, #28
 100eb6a:	e6d0      	b.n	100e90e <_dtoa_r+0x4f6>
 100eb6c:	f000 8115 	beq.w	100ed9a <_dtoa_r+0x982>
 100eb70:	9b04      	ldr	r3, [sp, #16]
 100eb72:	f641 0258 	movw	r2, #6232	; 0x1858
 100eb76:	f2c0 1201 	movt	r2, #257	; 0x101
 100eb7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 100eb7e:	425b      	negs	r3, r3
 100eb80:	f003 010f 	and.w	r1, r3, #15
 100eb84:	111b      	asrs	r3, r3, #4
 100eb86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 100eb8a:	ed92 5b00 	vldr	d5, [r2]
 100eb8e:	ee27 5b05 	vmul.f64	d5, d7, d5
 100eb92:	f000 82ad 	beq.w	100f0f0 <_dtoa_r+0xcd8>
 100eb96:	f641 1248 	movw	r2, #6472	; 0x1948
 100eb9a:	f2c0 1201 	movt	r2, #257	; 0x101
 100eb9e:	2000      	movs	r0, #0
 100eba0:	2102      	movs	r1, #2
 100eba2:	eeb0 7b45 	vmov.f64	d7, d5
 100eba6:	f013 0f01 	tst.w	r3, #1
 100ebaa:	d005      	beq.n	100ebb8 <_dtoa_r+0x7a0>
 100ebac:	ed92 6b00 	vldr	d6, [r2]
 100ebb0:	3101      	adds	r1, #1
 100ebb2:	4648      	mov	r0, r9
 100ebb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 100ebb8:	105b      	asrs	r3, r3, #1
 100ebba:	f102 0208 	add.w	r2, r2, #8
 100ebbe:	d1f2      	bne.n	100eba6 <_dtoa_r+0x78e>
 100ebc0:	2800      	cmp	r0, #0
 100ebc2:	bf08      	it	eq
 100ebc4:	eeb0 7b45 	vmoveq.f64	d7, d5
 100ebc8:	e583      	b.n	100e6d2 <_dtoa_r+0x2ba>
 100ebca:	4601      	mov	r1, r0
 100ebcc:	462a      	mov	r2, r5
 100ebce:	4620      	mov	r0, r4
 100ebd0:	f000 fe72 	bl	100f8b8 <__pow5mult>
 100ebd4:	f1ba 0f01 	cmp.w	sl, #1
 100ebd8:	9002      	str	r0, [sp, #8]
 100ebda:	f340 80f1 	ble.w	100edc0 <_dtoa_r+0x9a8>
 100ebde:	2300      	movs	r3, #0
 100ebe0:	930b      	str	r3, [sp, #44]	; 0x2c
 100ebe2:	9a02      	ldr	r2, [sp, #8]
 100ebe4:	6913      	ldr	r3, [r2, #16]
 100ebe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 100ebea:	6918      	ldr	r0, [r3, #16]
 100ebec:	f000 fd6c 	bl	100f6c8 <__hi0bits>
 100ebf0:	f1c0 0020 	rsb	r0, r0, #32
 100ebf4:	e67f      	b.n	100e8f6 <_dtoa_r+0x4de>
 100ebf6:	9902      	ldr	r1, [sp, #8]
 100ebf8:	4640      	mov	r0, r8
 100ebfa:	f000 ff0d 	bl	100fa18 <__mcmp>
 100ebfe:	2800      	cmp	r0, #0
 100ec00:	f6bf aea6 	bge.w	100e950 <_dtoa_r+0x538>
 100ec04:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 100ec06:	2300      	movs	r3, #0
 100ec08:	4641      	mov	r1, r8
 100ec0a:	220a      	movs	r2, #10
 100ec0c:	4620      	mov	r0, r4
 100ec0e:	429e      	cmp	r6, r3
 100ec10:	bfcc      	ite	gt
 100ec12:	2500      	movgt	r5, #0
 100ec14:	f005 0501 	andle.w	r5, r5, #1
 100ec18:	f000 fcc2 	bl	100f5a0 <__multadd>
 100ec1c:	9b04      	ldr	r3, [sp, #16]
 100ec1e:	1e5e      	subs	r6, r3, #1
 100ec20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100ec22:	4680      	mov	r8, r0
 100ec24:	2b00      	cmp	r3, #0
 100ec26:	f040 8252 	bne.w	100f0ce <_dtoa_r+0xcb6>
 100ec2a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 100ec2c:	2d00      	cmp	r5, #0
 100ec2e:	d068      	beq.n	100ed02 <_dtoa_r+0x8ea>
 100ec30:	9604      	str	r6, [sp, #16]
 100ec32:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 100ec34:	e693      	b.n	100e95e <_dtoa_r+0x546>
 100ec36:	ed9d 5b00 	vldr	d5, [sp]
 100ec3a:	2102      	movs	r1, #2
 100ec3c:	e537      	b.n	100e6ae <_dtoa_r+0x296>
 100ec3e:	2301      	movs	r3, #1
 100ec40:	930a      	str	r3, [sp, #40]	; 0x28
 100ec42:	9b08      	ldr	r3, [sp, #32]
 100ec44:	2b00      	cmp	r3, #0
 100ec46:	f340 80f1 	ble.w	100ee2c <_dtoa_r+0xa14>
 100ec4a:	461f      	mov	r7, r3
 100ec4c:	461a      	mov	r2, r3
 100ec4e:	930e      	str	r3, [sp, #56]	; 0x38
 100ec50:	2f0e      	cmp	r7, #14
 100ec52:	bf8c      	ite	hi
 100ec54:	f04f 0900 	movhi.w	r9, #0
 100ec58:	f009 0901 	andls.w	r9, r9, #1
 100ec5c:	2a17      	cmp	r2, #23
 100ec5e:	f04f 0100 	mov.w	r1, #0
 100ec62:	6461      	str	r1, [r4, #68]	; 0x44
 100ec64:	f77f acfb 	ble.w	100e65e <_dtoa_r+0x246>
 100ec68:	2304      	movs	r3, #4
 100ec6a:	005b      	lsls	r3, r3, #1
 100ec6c:	3101      	adds	r1, #1
 100ec6e:	f103 0014 	add.w	r0, r3, #20
 100ec72:	4290      	cmp	r0, r2
 100ec74:	d9f9      	bls.n	100ec6a <_dtoa_r+0x852>
 100ec76:	6461      	str	r1, [r4, #68]	; 0x44
 100ec78:	e4f1      	b.n	100e65e <_dtoa_r+0x246>
 100ec7a:	2301      	movs	r3, #1
 100ec7c:	930a      	str	r3, [sp, #40]	; 0x28
 100ec7e:	9a04      	ldr	r2, [sp, #16]
 100ec80:	9b08      	ldr	r3, [sp, #32]
 100ec82:	4413      	add	r3, r2
 100ec84:	930e      	str	r3, [sp, #56]	; 0x38
 100ec86:	1c5f      	adds	r7, r3, #1
 100ec88:	2f01      	cmp	r7, #1
 100ec8a:	463a      	mov	r2, r7
 100ec8c:	bfb8      	it	lt
 100ec8e:	2201      	movlt	r2, #1
 100ec90:	e7de      	b.n	100ec50 <_dtoa_r+0x838>
 100ec92:	2300      	movs	r3, #0
 100ec94:	930a      	str	r3, [sp, #40]	; 0x28
 100ec96:	e7f2      	b.n	100ec7e <_dtoa_r+0x866>
 100ec98:	2300      	movs	r3, #0
 100ec9a:	930a      	str	r3, [sp, #40]	; 0x28
 100ec9c:	e7d1      	b.n	100ec42 <_dtoa_r+0x82a>
 100ec9e:	2a01      	cmp	r2, #1
 100eca0:	ee25 3b03 	vmul.f64	d3, d5, d3
 100eca4:	f88b 1000 	strb.w	r1, [fp]
 100eca8:	d011      	beq.n	100ecce <_dtoa_r+0x8b6>
 100ecaa:	445a      	add	r2, fp
 100ecac:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 100ecb0:	ee27 6b04 	vmul.f64	d6, d7, d4
 100ecb4:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 100ecb8:	ee17 1a90 	vmov	r1, s15
 100ecbc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 100ecc0:	ee36 7b45 	vsub.f64	d7, d6, d5
 100ecc4:	3130      	adds	r1, #48	; 0x30
 100ecc6:	f803 1b01 	strb.w	r1, [r3], #1
 100ecca:	4293      	cmp	r3, r2
 100eccc:	d1f0      	bne.n	100ecb0 <_dtoa_r+0x898>
 100ecce:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 100ecd2:	ee33 5b06 	vadd.f64	d5, d3, d6
 100ecd6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 100ecda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ecde:	f100 819d 	bmi.w	100f01c <_dtoa_r+0xc04>
 100ece2:	ee36 6b43 	vsub.f64	d6, d6, d3
 100ece6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 100ecea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ecee:	f77f ad9d 	ble.w	100e82c <_dtoa_r+0x414>
 100ecf2:	e000      	b.n	100ecf6 <_dtoa_r+0x8de>
 100ecf4:	460b      	mov	r3, r1
 100ecf6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 100ecfa:	1e59      	subs	r1, r3, #1
 100ecfc:	2a30      	cmp	r2, #48	; 0x30
 100ecfe:	d0f9      	beq.n	100ecf4 <_dtoa_r+0x8dc>
 100ed00:	e56b      	b.n	100e7da <_dtoa_r+0x3c2>
 100ed02:	465d      	mov	r5, fp
 100ed04:	2601      	movs	r6, #1
 100ed06:	f8dd a008 	ldr.w	sl, [sp, #8]
 100ed0a:	e002      	b.n	100ed12 <_dtoa_r+0x8fa>
 100ed0c:	f000 fc48 	bl	100f5a0 <__multadd>
 100ed10:	4680      	mov	r8, r0
 100ed12:	4651      	mov	r1, sl
 100ed14:	4640      	mov	r0, r8
 100ed16:	f7ff fadb 	bl	100e2d0 <quorem>
 100ed1a:	42be      	cmp	r6, r7
 100ed1c:	f04f 0300 	mov.w	r3, #0
 100ed20:	f04f 020a 	mov.w	r2, #10
 100ed24:	4641      	mov	r1, r8
 100ed26:	f106 0601 	add.w	r6, r6, #1
 100ed2a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 100ed2e:	4620      	mov	r0, r4
 100ed30:	f805 cb01 	strb.w	ip, [r5], #1
 100ed34:	dbea      	blt.n	100ed0c <_dtoa_r+0x8f4>
 100ed36:	2600      	movs	r6, #0
 100ed38:	f8cd c000 	str.w	ip, [sp]
 100ed3c:	4641      	mov	r1, r8
 100ed3e:	2201      	movs	r2, #1
 100ed40:	4620      	mov	r0, r4
 100ed42:	f000 fe0b 	bl	100f95c <__lshift>
 100ed46:	9902      	ldr	r1, [sp, #8]
 100ed48:	4680      	mov	r8, r0
 100ed4a:	f000 fe65 	bl	100fa18 <__mcmp>
 100ed4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 100ed52:	2800      	cmp	r0, #0
 100ed54:	f340 8118 	ble.w	100ef88 <_dtoa_r+0xb70>
 100ed58:	1e6b      	subs	r3, r5, #1
 100ed5a:	e004      	b.n	100ed66 <_dtoa_r+0x94e>
 100ed5c:	459b      	cmp	fp, r3
 100ed5e:	f000 8124 	beq.w	100efaa <_dtoa_r+0xb92>
 100ed62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 100ed66:	2a39      	cmp	r2, #57	; 0x39
 100ed68:	f103 0501 	add.w	r5, r3, #1
 100ed6c:	d0f6      	beq.n	100ed5c <_dtoa_r+0x944>
 100ed6e:	3201      	adds	r2, #1
 100ed70:	701a      	strb	r2, [r3, #0]
 100ed72:	9902      	ldr	r1, [sp, #8]
 100ed74:	4620      	mov	r0, r4
 100ed76:	f000 fc09 	bl	100f58c <_Bfree>
 100ed7a:	f1b9 0f00 	cmp.w	r9, #0
 100ed7e:	f000 8111 	beq.w	100efa4 <_dtoa_r+0xb8c>
 100ed82:	2e00      	cmp	r6, #0
 100ed84:	bf18      	it	ne
 100ed86:	454e      	cmpne	r6, r9
 100ed88:	f000 81b7 	beq.w	100f0fa <_dtoa_r+0xce2>
 100ed8c:	4631      	mov	r1, r6
 100ed8e:	4620      	mov	r0, r4
 100ed90:	465e      	mov	r6, fp
 100ed92:	f000 fbfb 	bl	100f58c <_Bfree>
 100ed96:	46ab      	mov	fp, r5
 100ed98:	e605      	b.n	100e9a6 <_dtoa_r+0x58e>
 100ed9a:	ed9d 7b00 	vldr	d7, [sp]
 100ed9e:	2102      	movs	r1, #2
 100eda0:	e497      	b.n	100e6d2 <_dtoa_r+0x2ba>
 100eda2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 100eda6:	9702      	str	r7, [sp, #8]
 100eda8:	46b9      	mov	r9, r7
 100edaa:	ee25 5b07 	vmul.f64	d5, d5, d7
 100edae:	ed9d 7b00 	vldr	d7, [sp]
 100edb2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 100edb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100edba:	f6bf aeab 	bge.w	100eb14 <_dtoa_r+0x6fc>
 100edbe:	e5df      	b.n	100e980 <_dtoa_r+0x568>
 100edc0:	e9dd 1200 	ldrd	r1, r2, [sp]
 100edc4:	2900      	cmp	r1, #0
 100edc6:	f47f af0a 	bne.w	100ebde <_dtoa_r+0x7c6>
 100edca:	f3c2 0313 	ubfx	r3, r2, #0, #20
 100edce:	2b00      	cmp	r3, #0
 100edd0:	f040 8196 	bne.w	100f100 <_dtoa_r+0xce8>
 100edd4:	2300      	movs	r3, #0
 100edd6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 100edda:	4013      	ands	r3, r2
 100eddc:	2b00      	cmp	r3, #0
 100edde:	f000 8152 	beq.w	100f086 <_dtoa_r+0xc6e>
 100ede2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ede4:	3601      	adds	r6, #1
 100ede6:	3301      	adds	r3, #1
 100ede8:	9309      	str	r3, [sp, #36]	; 0x24
 100edea:	2301      	movs	r3, #1
 100edec:	930b      	str	r3, [sp, #44]	; 0x2c
 100edee:	e57e      	b.n	100e8ee <_dtoa_r+0x4d6>
 100edf0:	461a      	mov	r2, r3
 100edf2:	4649      	mov	r1, r9
 100edf4:	4620      	mov	r0, r4
 100edf6:	f000 fd5f 	bl	100f8b8 <__pow5mult>
 100edfa:	4642      	mov	r2, r8
 100edfc:	4601      	mov	r1, r0
 100edfe:	4681      	mov	r9, r0
 100ee00:	4620      	mov	r0, r4
 100ee02:	f000 fcb9 	bl	100f778 <__multiply>
 100ee06:	4641      	mov	r1, r8
 100ee08:	900f      	str	r0, [sp, #60]	; 0x3c
 100ee0a:	4620      	mov	r0, r4
 100ee0c:	f000 fbbe 	bl	100f58c <_Bfree>
 100ee10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100ee12:	4698      	mov	r8, r3
 100ee14:	e558      	b.n	100e8c8 <_dtoa_r+0x4b0>
 100ee16:	4620      	mov	r0, r4
 100ee18:	f000 fbb8 	bl	100f58c <_Bfree>
 100ee1c:	2301      	movs	r3, #1
 100ee1e:	e629      	b.n	100ea74 <_dtoa_r+0x65c>
 100ee20:	f000 fbbe 	bl	100f5a0 <__multadd>
 100ee24:	462f      	mov	r7, r5
 100ee26:	4681      	mov	r9, r0
 100ee28:	4682      	mov	sl, r0
 100ee2a:	e5fa      	b.n	100ea22 <_dtoa_r+0x60a>
 100ee2c:	2301      	movs	r3, #1
 100ee2e:	9308      	str	r3, [sp, #32]
 100ee30:	461f      	mov	r7, r3
 100ee32:	e411      	b.n	100e658 <_dtoa_r+0x240>
 100ee34:	e9dd 1200 	ldrd	r1, r2, [sp]
 100ee38:	2900      	cmp	r1, #0
 100ee3a:	f47f ad56 	bne.w	100e8ea <_dtoa_r+0x4d2>
 100ee3e:	f3c2 0313 	ubfx	r3, r2, #0, #20
 100ee42:	2b00      	cmp	r3, #0
 100ee44:	d0c6      	beq.n	100edd4 <_dtoa_r+0x9bc>
 100ee46:	9b00      	ldr	r3, [sp, #0]
 100ee48:	930b      	str	r3, [sp, #44]	; 0x2c
 100ee4a:	e550      	b.n	100e8ee <_dtoa_r+0x4d6>
 100ee4c:	2f00      	cmp	r7, #0
 100ee4e:	f43f acca 	beq.w	100e7e6 <_dtoa_r+0x3ce>
 100ee52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100ee54:	2a00      	cmp	r2, #0
 100ee56:	f77f ace9 	ble.w	100e82c <_dtoa_r+0x414>
 100ee5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 100ee5e:	3101      	adds	r1, #1
 100ee60:	9b04      	ldr	r3, [sp, #16]
 100ee62:	f103 3eff 	add.w	lr, r3, #4294967295
 100ee66:	ee27 7b06 	vmul.f64	d7, d7, d6
 100ee6a:	ee06 1a90 	vmov	s13, r1
 100ee6e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 100ee72:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 100ee76:	ee06 5b07 	vmla.f64	d5, d6, d7
 100ee7a:	ed8d 5b00 	vstr	d5, [sp]
 100ee7e:	9b01      	ldr	r3, [sp, #4]
 100ee80:	e9dd 0100 	ldrd	r0, r1, [sp]
 100ee84:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 100ee88:	e441      	b.n	100e70e <_dtoa_r+0x2f6>
 100ee8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100ee8c:	2a00      	cmp	r2, #0
 100ee8e:	f000 8099 	beq.w	100efc4 <_dtoa_r+0xbac>
 100ee92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ee94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 100ee98:	441e      	add	r6, r3
 100ee9a:	18d3      	adds	r3, r2, r3
 100ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 100ee9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100eea0:	920c      	str	r2, [sp, #48]	; 0x30
 100eea2:	9302      	str	r3, [sp, #8]
 100eea4:	e4f2      	b.n	100e88c <_dtoa_r+0x474>
 100eea6:	2300      	movs	r3, #0
 100eea8:	9302      	str	r3, [sp, #8]
 100eeaa:	4699      	mov	r9, r3
 100eeac:	e568      	b.n	100e980 <_dtoa_r+0x568>
 100eeae:	2100      	movs	r1, #0
 100eeb0:	4620      	mov	r0, r4
 100eeb2:	6461      	str	r1, [r4, #68]	; 0x44
 100eeb4:	f000 fb44 	bl	100f540 <_Balloc>
 100eeb8:	9a04      	ldr	r2, [sp, #16]
 100eeba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100eebc:	2a0e      	cmp	r2, #14
 100eebe:	4683      	mov	fp, r0
 100eec0:	6420      	str	r0, [r4, #64]	; 0x40
 100eec2:	f300 8126 	bgt.w	100f112 <_dtoa_r+0xcfa>
 100eec6:	2b00      	cmp	r3, #0
 100eec8:	f2c0 8123 	blt.w	100f112 <_dtoa_r+0xcfa>
 100eecc:	9a04      	ldr	r2, [sp, #16]
 100eece:	f641 0358 	movw	r3, #6232	; 0x1858
 100eed2:	f2c0 1301 	movt	r3, #257	; 0x101
 100eed6:	f04f 37ff 	mov.w	r7, #4294967295
 100eeda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 100eede:	ed93 5b00 	vldr	d5, [r3]
 100eee2:	9a04      	ldr	r2, [sp, #16]
 100eee4:	2f01      	cmp	r7, #1
 100eee6:	465b      	mov	r3, fp
 100eee8:	ed9d 7b00 	vldr	d7, [sp]
 100eeec:	f102 0201 	add.w	r2, r2, #1
 100eef0:	9204      	str	r2, [sp, #16]
 100eef2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 100eef6:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 100eefa:	ee16 2a10 	vmov	r2, s12
 100eefe:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 100ef02:	ee04 7b45 	vmls.f64	d7, d4, d5
 100ef06:	f102 0230 	add.w	r2, r2, #48	; 0x30
 100ef0a:	f803 2b01 	strb.w	r2, [r3], #1
 100ef0e:	d022      	beq.n	100ef56 <_dtoa_r+0xb3e>
 100ef10:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 100ef14:	ee27 7b03 	vmul.f64	d7, d7, d3
 100ef18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 100ef1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ef20:	d079      	beq.n	100f016 <_dtoa_r+0xbfe>
 100ef22:	2201      	movs	r2, #1
 100ef24:	e006      	b.n	100ef34 <_dtoa_r+0xb1c>
 100ef26:	ee27 7b03 	vmul.f64	d7, d7, d3
 100ef2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 100ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ef32:	d070      	beq.n	100f016 <_dtoa_r+0xbfe>
 100ef34:	ee87 6b05 	vdiv.f64	d6, d7, d5
 100ef38:	3201      	adds	r2, #1
 100ef3a:	42ba      	cmp	r2, r7
 100ef3c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 100ef40:	ee16 1a10 	vmov	r1, s12
 100ef44:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 100ef48:	ee04 7b45 	vmls.f64	d7, d4, d5
 100ef4c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 100ef50:	f803 1b01 	strb.w	r1, [r3], #1
 100ef54:	d1e7      	bne.n	100ef26 <_dtoa_r+0xb0e>
 100ef56:	ee37 7b07 	vadd.f64	d7, d7, d7
 100ef5a:	eeb4 7bc5 	vcmpe.f64	d7, d5
 100ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ef62:	f340 8098 	ble.w	100f096 <_dtoa_r+0xc7e>
 100ef66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 100ef6a:	465e      	mov	r6, fp
 100ef6c:	3b01      	subs	r3, #1
 100ef6e:	e003      	b.n	100ef78 <_dtoa_r+0xb60>
 100ef70:	429e      	cmp	r6, r3
 100ef72:	d021      	beq.n	100efb8 <_dtoa_r+0xba0>
 100ef74:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 100ef78:	2939      	cmp	r1, #57	; 0x39
 100ef7a:	f103 0b01 	add.w	fp, r3, #1
 100ef7e:	d0f7      	beq.n	100ef70 <_dtoa_r+0xb58>
 100ef80:	1c4a      	adds	r2, r1, #1
 100ef82:	b2d2      	uxtb	r2, r2
 100ef84:	701a      	strb	r2, [r3, #0]
 100ef86:	e512      	b.n	100e9ae <_dtoa_r+0x596>
 100ef88:	d103      	bne.n	100ef92 <_dtoa_r+0xb7a>
 100ef8a:	9b00      	ldr	r3, [sp, #0]
 100ef8c:	07db      	lsls	r3, r3, #31
 100ef8e:	f53f aee3 	bmi.w	100ed58 <_dtoa_r+0x940>
 100ef92:	1e6b      	subs	r3, r5, #1
 100ef94:	e001      	b.n	100ef9a <_dtoa_r+0xb82>
 100ef96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 100ef9a:	2a30      	cmp	r2, #48	; 0x30
 100ef9c:	f103 0501 	add.w	r5, r3, #1
 100efa0:	d0f9      	beq.n	100ef96 <_dtoa_r+0xb7e>
 100efa2:	e6e6      	b.n	100ed72 <_dtoa_r+0x95a>
 100efa4:	465e      	mov	r6, fp
 100efa6:	46ab      	mov	fp, r5
 100efa8:	e501      	b.n	100e9ae <_dtoa_r+0x596>
 100efaa:	9b04      	ldr	r3, [sp, #16]
 100efac:	3301      	adds	r3, #1
 100efae:	9304      	str	r3, [sp, #16]
 100efb0:	2331      	movs	r3, #49	; 0x31
 100efb2:	f88b 3000 	strb.w	r3, [fp]
 100efb6:	e6dc      	b.n	100ed72 <_dtoa_r+0x95a>
 100efb8:	9a04      	ldr	r2, [sp, #16]
 100efba:	3201      	adds	r2, #1
 100efbc:	9204      	str	r2, [sp, #16]
 100efbe:	2231      	movs	r2, #49	; 0x31
 100efc0:	701a      	strb	r2, [r3, #0]
 100efc2:	e4f4      	b.n	100e9ae <_dtoa_r+0x596>
 100efc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100efc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100efc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100efca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 100efce:	920c      	str	r2, [sp, #48]	; 0x30
 100efd0:	441e      	add	r6, r3
 100efd2:	18d3      	adds	r3, r2, r3
 100efd4:	9102      	str	r1, [sp, #8]
 100efd6:	9309      	str	r3, [sp, #36]	; 0x24
 100efd8:	e458      	b.n	100e88c <_dtoa_r+0x474>
 100efda:	2b00      	cmp	r3, #0
 100efdc:	465e      	mov	r6, fp
 100efde:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100efe2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 100efe6:	dd10      	ble.n	100f00a <_dtoa_r+0xbf2>
 100efe8:	4641      	mov	r1, r8
 100efea:	2201      	movs	r2, #1
 100efec:	4620      	mov	r0, r4
 100efee:	f000 fcb5 	bl	100f95c <__lshift>
 100eff2:	9902      	ldr	r1, [sp, #8]
 100eff4:	4680      	mov	r8, r0
 100eff6:	f000 fd0f 	bl	100fa18 <__mcmp>
 100effa:	2800      	cmp	r0, #0
 100effc:	dd73      	ble.n	100f0e6 <_dtoa_r+0xcce>
 100effe:	9b00      	ldr	r3, [sp, #0]
 100f000:	2b39      	cmp	r3, #57	; 0x39
 100f002:	d042      	beq.n	100f08a <_dtoa_r+0xc72>
 100f004:	4633      	mov	r3, r6
 100f006:	3331      	adds	r3, #49	; 0x31
 100f008:	9300      	str	r3, [sp, #0]
 100f00a:	9b00      	ldr	r3, [sp, #0]
 100f00c:	464e      	mov	r6, r9
 100f00e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 100f012:	703b      	strb	r3, [r7, #0]
 100f014:	e6ad      	b.n	100ed72 <_dtoa_r+0x95a>
 100f016:	465e      	mov	r6, fp
 100f018:	469b      	mov	fp, r3
 100f01a:	e4c8      	b.n	100e9ae <_dtoa_r+0x596>
 100f01c:	f10e 0201 	add.w	r2, lr, #1
 100f020:	465e      	mov	r6, fp
 100f022:	9204      	str	r2, [sp, #16]
 100f024:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 100f028:	e7a0      	b.n	100ef6c <_dtoa_r+0xb54>
 100f02a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 100f02e:	4620      	mov	r0, r4
 100f030:	f000 fa86 	bl	100f540 <_Balloc>
 100f034:	f8d9 3010 	ldr.w	r3, [r9, #16]
 100f038:	f109 010c 	add.w	r1, r9, #12
 100f03c:	3302      	adds	r3, #2
 100f03e:	009a      	lsls	r2, r3, #2
 100f040:	4605      	mov	r5, r0
 100f042:	300c      	adds	r0, #12
 100f044:	f7fc e8bc 	blx	100b1c0 <memcpy>
 100f048:	4629      	mov	r1, r5
 100f04a:	2201      	movs	r2, #1
 100f04c:	4620      	mov	r0, r4
 100f04e:	f000 fc85 	bl	100f95c <__lshift>
 100f052:	900a      	str	r0, [sp, #40]	; 0x28
 100f054:	e4d6      	b.n	100ea04 <_dtoa_r+0x5ec>
 100f056:	f10e 0201 	add.w	r2, lr, #1
 100f05a:	465e      	mov	r6, fp
 100f05c:	9204      	str	r2, [sp, #16]
 100f05e:	e785      	b.n	100ef6c <_dtoa_r+0xb54>
 100f060:	9b00      	ldr	r3, [sp, #0]
 100f062:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 100f066:	2b39      	cmp	r3, #57	; 0x39
 100f068:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100f06c:	d00d      	beq.n	100f08a <_dtoa_r+0xc72>
 100f06e:	9b00      	ldr	r3, [sp, #0]
 100f070:	464e      	mov	r6, r9
 100f072:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 100f076:	3301      	adds	r3, #1
 100f078:	703b      	strb	r3, [r7, #0]
 100f07a:	e67a      	b.n	100ed72 <_dtoa_r+0x95a>
 100f07c:	464e      	mov	r6, r9
 100f07e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 100f082:	46d1      	mov	r9, sl
 100f084:	e65a      	b.n	100ed3c <_dtoa_r+0x924>
 100f086:	930b      	str	r3, [sp, #44]	; 0x2c
 100f088:	e431      	b.n	100e8ee <_dtoa_r+0x4d6>
 100f08a:	2239      	movs	r2, #57	; 0x39
 100f08c:	464e      	mov	r6, r9
 100f08e:	703a      	strb	r2, [r7, #0]
 100f090:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 100f094:	e660      	b.n	100ed58 <_dtoa_r+0x940>
 100f096:	eeb4 7b45 	vcmp.f64	d7, d5
 100f09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f09e:	d1ba      	bne.n	100f016 <_dtoa_r+0xbfe>
 100f0a0:	ee16 2a10 	vmov	r2, s12
 100f0a4:	465e      	mov	r6, fp
 100f0a6:	07d1      	lsls	r1, r2, #31
 100f0a8:	bf48      	it	mi
 100f0aa:	f813 1c01 	ldrbmi.w	r1, [r3, #-1]
 100f0ae:	f53f af5d 	bmi.w	100ef6c <_dtoa_r+0xb54>
 100f0b2:	469b      	mov	fp, r3
 100f0b4:	e47b      	b.n	100e9ae <_dtoa_r+0x596>
 100f0b6:	9a00      	ldr	r2, [sp, #0]
 100f0b8:	465b      	mov	r3, fp
 100f0ba:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100f0be:	1c7d      	adds	r5, r7, #1
 100f0c0:	2a39      	cmp	r2, #57	; 0x39
 100f0c2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 100f0c6:	d0e0      	beq.n	100f08a <_dtoa_r+0xc72>
 100f0c8:	2e00      	cmp	r6, #0
 100f0ca:	dc9c      	bgt.n	100f006 <_dtoa_r+0xbee>
 100f0cc:	e79d      	b.n	100f00a <_dtoa_r+0xbf2>
 100f0ce:	4649      	mov	r1, r9
 100f0d0:	2300      	movs	r3, #0
 100f0d2:	220a      	movs	r2, #10
 100f0d4:	4620      	mov	r0, r4
 100f0d6:	f000 fa63 	bl	100f5a0 <__multadd>
 100f0da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 100f0dc:	4681      	mov	r9, r0
 100f0de:	2d00      	cmp	r5, #0
 100f0e0:	f43f ac81 	beq.w	100e9e6 <_dtoa_r+0x5ce>
 100f0e4:	e5a4      	b.n	100ec30 <_dtoa_r+0x818>
 100f0e6:	d190      	bne.n	100f00a <_dtoa_r+0xbf2>
 100f0e8:	9b00      	ldr	r3, [sp, #0]
 100f0ea:	07da      	lsls	r2, r3, #31
 100f0ec:	d58d      	bpl.n	100f00a <_dtoa_r+0xbf2>
 100f0ee:	e786      	b.n	100effe <_dtoa_r+0xbe6>
 100f0f0:	eeb0 7b45 	vmov.f64	d7, d5
 100f0f4:	2102      	movs	r1, #2
 100f0f6:	f7ff baec 	b.w	100e6d2 <_dtoa_r+0x2ba>
 100f0fa:	465e      	mov	r6, fp
 100f0fc:	46ab      	mov	fp, r5
 100f0fe:	e452      	b.n	100e9a6 <_dtoa_r+0x58e>
 100f100:	9b00      	ldr	r3, [sp, #0]
 100f102:	930b      	str	r3, [sp, #44]	; 0x2c
 100f104:	e56d      	b.n	100ebe2 <_dtoa_r+0x7ca>
 100f106:	f43f ac09 	beq.w	100e91c <_dtoa_r+0x504>
 100f10a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 100f10e:	f7ff bbfe 	b.w	100e90e <_dtoa_r+0x4f6>
 100f112:	2200      	movs	r2, #0
 100f114:	f04f 37ff 	mov.w	r7, #4294967295
 100f118:	9208      	str	r2, [sp, #32]
 100f11a:	2201      	movs	r2, #1
 100f11c:	970e      	str	r7, [sp, #56]	; 0x38
 100f11e:	920a      	str	r2, [sp, #40]	; 0x28
 100f120:	f7ff bb99 	b.w	100e856 <_dtoa_r+0x43e>

0100f124 <_malloc_trim_r>:
 100f124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100f126:	f643 17bc 	movw	r7, #14780	; 0x39bc
 100f12a:	f2c0 1701 	movt	r7, #257	; 0x101
 100f12e:	460c      	mov	r4, r1
 100f130:	4606      	mov	r6, r0
 100f132:	f7fc fb85 	bl	100b840 <__malloc_lock>
 100f136:	68bb      	ldr	r3, [r7, #8]
 100f138:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 100f13c:	310f      	adds	r1, #15
 100f13e:	685d      	ldr	r5, [r3, #4]
 100f140:	f025 0503 	bic.w	r5, r5, #3
 100f144:	4429      	add	r1, r5
 100f146:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 100f14a:	f021 010f 	bic.w	r1, r1, #15
 100f14e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 100f152:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 100f156:	db07      	blt.n	100f168 <_malloc_trim_r+0x44>
 100f158:	2100      	movs	r1, #0
 100f15a:	4630      	mov	r0, r6
 100f15c:	f7fc fb74 	bl	100b848 <_sbrk_r>
 100f160:	68bb      	ldr	r3, [r7, #8]
 100f162:	442b      	add	r3, r5
 100f164:	4298      	cmp	r0, r3
 100f166:	d004      	beq.n	100f172 <_malloc_trim_r+0x4e>
 100f168:	4630      	mov	r0, r6
 100f16a:	f7fc fb6b 	bl	100b844 <__malloc_unlock>
 100f16e:	2000      	movs	r0, #0
 100f170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100f172:	4261      	negs	r1, r4
 100f174:	4630      	mov	r0, r6
 100f176:	f7fc fb67 	bl	100b848 <_sbrk_r>
 100f17a:	3001      	adds	r0, #1
 100f17c:	d010      	beq.n	100f1a0 <_malloc_trim_r+0x7c>
 100f17e:	68ba      	ldr	r2, [r7, #8]
 100f180:	f248 23e8 	movw	r3, #33512	; 0x82e8
 100f184:	f2c0 1301 	movt	r3, #257	; 0x101
 100f188:	1b2d      	subs	r5, r5, r4
 100f18a:	4630      	mov	r0, r6
 100f18c:	f045 0501 	orr.w	r5, r5, #1
 100f190:	6819      	ldr	r1, [r3, #0]
 100f192:	6055      	str	r5, [r2, #4]
 100f194:	1b09      	subs	r1, r1, r4
 100f196:	6019      	str	r1, [r3, #0]
 100f198:	f7fc fb54 	bl	100b844 <__malloc_unlock>
 100f19c:	2001      	movs	r0, #1
 100f19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100f1a0:	2100      	movs	r1, #0
 100f1a2:	4630      	mov	r0, r6
 100f1a4:	f7fc fb50 	bl	100b848 <_sbrk_r>
 100f1a8:	68ba      	ldr	r2, [r7, #8]
 100f1aa:	1a83      	subs	r3, r0, r2
 100f1ac:	2b0f      	cmp	r3, #15
 100f1ae:	dddb      	ble.n	100f168 <_malloc_trim_r+0x44>
 100f1b0:	f643 54c4 	movw	r4, #15812	; 0x3dc4
 100f1b4:	f2c0 1401 	movt	r4, #257	; 0x101
 100f1b8:	f248 21e8 	movw	r1, #33512	; 0x82e8
 100f1bc:	f2c0 1101 	movt	r1, #257	; 0x101
 100f1c0:	6824      	ldr	r4, [r4, #0]
 100f1c2:	f043 0301 	orr.w	r3, r3, #1
 100f1c6:	6053      	str	r3, [r2, #4]
 100f1c8:	1b00      	subs	r0, r0, r4
 100f1ca:	6008      	str	r0, [r1, #0]
 100f1cc:	e7cc      	b.n	100f168 <_malloc_trim_r+0x44>
 100f1ce:	bf00      	nop

0100f1d0 <_free_r>:
 100f1d0:	2900      	cmp	r1, #0
 100f1d2:	d060      	beq.n	100f296 <_free_r+0xc6>
 100f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100f1d6:	460f      	mov	r7, r1
 100f1d8:	4606      	mov	r6, r0
 100f1da:	f7fc fb31 	bl	100b840 <__malloc_lock>
 100f1de:	f857 cc04 	ldr.w	ip, [r7, #-4]
 100f1e2:	f643 12bc 	movw	r2, #14780	; 0x39bc
 100f1e6:	f2c0 1201 	movt	r2, #257	; 0x101
 100f1ea:	f1a7 0008 	sub.w	r0, r7, #8
 100f1ee:	f02c 0301 	bic.w	r3, ip, #1
 100f1f2:	18c4      	adds	r4, r0, r3
 100f1f4:	6891      	ldr	r1, [r2, #8]
 100f1f6:	6865      	ldr	r5, [r4, #4]
 100f1f8:	42a1      	cmp	r1, r4
 100f1fa:	f025 0503 	bic.w	r5, r5, #3
 100f1fe:	d07f      	beq.n	100f300 <_free_r+0x130>
 100f200:	f01c 0f01 	tst.w	ip, #1
 100f204:	6065      	str	r5, [r4, #4]
 100f206:	eb04 0105 	add.w	r1, r4, r5
 100f20a:	d133      	bne.n	100f274 <_free_r+0xa4>
 100f20c:	f857 7c08 	ldr.w	r7, [r7, #-8]
 100f210:	f102 0c08 	add.w	ip, r2, #8
 100f214:	6849      	ldr	r1, [r1, #4]
 100f216:	1bc0      	subs	r0, r0, r7
 100f218:	443b      	add	r3, r7
 100f21a:	f001 0101 	and.w	r1, r1, #1
 100f21e:	6887      	ldr	r7, [r0, #8]
 100f220:	4567      	cmp	r7, ip
 100f222:	d061      	beq.n	100f2e8 <_free_r+0x118>
 100f224:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 100f228:	f8c7 e00c 	str.w	lr, [r7, #12]
 100f22c:	f8ce 7008 	str.w	r7, [lr, #8]
 100f230:	2900      	cmp	r1, #0
 100f232:	f000 8090 	beq.w	100f356 <_free_r+0x186>
 100f236:	f043 0101 	orr.w	r1, r3, #1
 100f23a:	6041      	str	r1, [r0, #4]
 100f23c:	6023      	str	r3, [r4, #0]
 100f23e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 100f242:	d231      	bcs.n	100f2a8 <_free_r+0xd8>
 100f244:	08db      	lsrs	r3, r3, #3
 100f246:	2101      	movs	r1, #1
 100f248:	185d      	adds	r5, r3, r1
 100f24a:	6854      	ldr	r4, [r2, #4]
 100f24c:	109b      	asrs	r3, r3, #2
 100f24e:	f852 7035 	ldr.w	r7, [r2, r5, lsl #3]
 100f252:	fa01 f303 	lsl.w	r3, r1, r3
 100f256:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 100f25a:	4323      	orrs	r3, r4
 100f25c:	3908      	subs	r1, #8
 100f25e:	6053      	str	r3, [r2, #4]
 100f260:	e9c0 7102 	strd	r7, r1, [r0, #8]
 100f264:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
 100f268:	60f8      	str	r0, [r7, #12]
 100f26a:	4630      	mov	r0, r6
 100f26c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 100f270:	f7fc bae8 	b.w	100b844 <__malloc_unlock>
 100f274:	6849      	ldr	r1, [r1, #4]
 100f276:	07c9      	lsls	r1, r1, #31
 100f278:	d40e      	bmi.n	100f298 <_free_r+0xc8>
 100f27a:	442b      	add	r3, r5
 100f27c:	f102 0c08 	add.w	ip, r2, #8
 100f280:	68a1      	ldr	r1, [r4, #8]
 100f282:	f043 0501 	orr.w	r5, r3, #1
 100f286:	4561      	cmp	r1, ip
 100f288:	d06d      	beq.n	100f366 <_free_r+0x196>
 100f28a:	68e4      	ldr	r4, [r4, #12]
 100f28c:	60cc      	str	r4, [r1, #12]
 100f28e:	60a1      	str	r1, [r4, #8]
 100f290:	6045      	str	r5, [r0, #4]
 100f292:	50c3      	str	r3, [r0, r3]
 100f294:	e7d3      	b.n	100f23e <_free_r+0x6e>
 100f296:	4770      	bx	lr
 100f298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 100f29c:	f043 0101 	orr.w	r1, r3, #1
 100f2a0:	f847 1c04 	str.w	r1, [r7, #-4]
 100f2a4:	6023      	str	r3, [r4, #0]
 100f2a6:	d3cd      	bcc.n	100f244 <_free_r+0x74>
 100f2a8:	0a59      	lsrs	r1, r3, #9
 100f2aa:	2904      	cmp	r1, #4
 100f2ac:	d848      	bhi.n	100f340 <_free_r+0x170>
 100f2ae:	0999      	lsrs	r1, r3, #6
 100f2b0:	f101 0439 	add.w	r4, r1, #57	; 0x39
 100f2b4:	f101 0538 	add.w	r5, r1, #56	; 0x38
 100f2b8:	00e1      	lsls	r1, r4, #3
 100f2ba:	1854      	adds	r4, r2, r1
 100f2bc:	5851      	ldr	r1, [r2, r1]
 100f2be:	3c08      	subs	r4, #8
 100f2c0:	428c      	cmp	r4, r1
 100f2c2:	d057      	beq.n	100f374 <_free_r+0x1a4>
 100f2c4:	684a      	ldr	r2, [r1, #4]
 100f2c6:	f022 0203 	bic.w	r2, r2, #3
 100f2ca:	429a      	cmp	r2, r3
 100f2cc:	d902      	bls.n	100f2d4 <_free_r+0x104>
 100f2ce:	6889      	ldr	r1, [r1, #8]
 100f2d0:	428c      	cmp	r4, r1
 100f2d2:	d1f7      	bne.n	100f2c4 <_free_r+0xf4>
 100f2d4:	68cc      	ldr	r4, [r1, #12]
 100f2d6:	e9c0 1402 	strd	r1, r4, [r0, #8]
 100f2da:	60a0      	str	r0, [r4, #8]
 100f2dc:	60c8      	str	r0, [r1, #12]
 100f2de:	4630      	mov	r0, r6
 100f2e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 100f2e4:	f7fc baae 	b.w	100b844 <__malloc_unlock>
 100f2e8:	2900      	cmp	r1, #0
 100f2ea:	d164      	bne.n	100f3b6 <_free_r+0x1e6>
 100f2ec:	68a1      	ldr	r1, [r4, #8]
 100f2ee:	442b      	add	r3, r5
 100f2f0:	68e2      	ldr	r2, [r4, #12]
 100f2f2:	f043 0401 	orr.w	r4, r3, #1
 100f2f6:	60ca      	str	r2, [r1, #12]
 100f2f8:	6091      	str	r1, [r2, #8]
 100f2fa:	6044      	str	r4, [r0, #4]
 100f2fc:	50c3      	str	r3, [r0, r3]
 100f2fe:	e7b4      	b.n	100f26a <_free_r+0x9a>
 100f300:	f01c 0f01 	tst.w	ip, #1
 100f304:	442b      	add	r3, r5
 100f306:	d107      	bne.n	100f318 <_free_r+0x148>
 100f308:	f857 1c08 	ldr.w	r1, [r7, #-8]
 100f30c:	1a40      	subs	r0, r0, r1
 100f30e:	440b      	add	r3, r1
 100f310:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 100f314:	60e1      	str	r1, [r4, #12]
 100f316:	608c      	str	r4, [r1, #8]
 100f318:	f643 51c8 	movw	r1, #15816	; 0x3dc8
 100f31c:	f2c0 1101 	movt	r1, #257	; 0x101
 100f320:	f043 0401 	orr.w	r4, r3, #1
 100f324:	6044      	str	r4, [r0, #4]
 100f326:	6809      	ldr	r1, [r1, #0]
 100f328:	6090      	str	r0, [r2, #8]
 100f32a:	4299      	cmp	r1, r3
 100f32c:	d89d      	bhi.n	100f26a <_free_r+0x9a>
 100f32e:	f248 23e4 	movw	r3, #33508	; 0x82e4
 100f332:	f2c0 1301 	movt	r3, #257	; 0x101
 100f336:	4630      	mov	r0, r6
 100f338:	6819      	ldr	r1, [r3, #0]
 100f33a:	f7ff fef3 	bl	100f124 <_malloc_trim_r>
 100f33e:	e794      	b.n	100f26a <_free_r+0x9a>
 100f340:	2914      	cmp	r1, #20
 100f342:	d90a      	bls.n	100f35a <_free_r+0x18a>
 100f344:	2954      	cmp	r1, #84	; 0x54
 100f346:	d81d      	bhi.n	100f384 <_free_r+0x1b4>
 100f348:	0b19      	lsrs	r1, r3, #12
 100f34a:	f101 046f 	add.w	r4, r1, #111	; 0x6f
 100f34e:	f101 056e 	add.w	r5, r1, #110	; 0x6e
 100f352:	00e1      	lsls	r1, r4, #3
 100f354:	e7b1      	b.n	100f2ba <_free_r+0xea>
 100f356:	442b      	add	r3, r5
 100f358:	e792      	b.n	100f280 <_free_r+0xb0>
 100f35a:	f101 045c 	add.w	r4, r1, #92	; 0x5c
 100f35e:	f101 055b 	add.w	r5, r1, #91	; 0x5b
 100f362:	00e1      	lsls	r1, r4, #3
 100f364:	e7a9      	b.n	100f2ba <_free_r+0xea>
 100f366:	e9c2 0004 	strd	r0, r0, [r2, #16]
 100f36a:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 100f36e:	6045      	str	r5, [r0, #4]
 100f370:	50c3      	str	r3, [r0, r3]
 100f372:	e77a      	b.n	100f26a <_free_r+0x9a>
 100f374:	6853      	ldr	r3, [r2, #4]
 100f376:	10ad      	asrs	r5, r5, #2
 100f378:	2701      	movs	r7, #1
 100f37a:	fa07 f505 	lsl.w	r5, r7, r5
 100f37e:	431d      	orrs	r5, r3
 100f380:	6055      	str	r5, [r2, #4]
 100f382:	e7a8      	b.n	100f2d6 <_free_r+0x106>
 100f384:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 100f388:	d806      	bhi.n	100f398 <_free_r+0x1c8>
 100f38a:	0bd9      	lsrs	r1, r3, #15
 100f38c:	f101 0478 	add.w	r4, r1, #120	; 0x78
 100f390:	f101 0577 	add.w	r5, r1, #119	; 0x77
 100f394:	00e1      	lsls	r1, r4, #3
 100f396:	e790      	b.n	100f2ba <_free_r+0xea>
 100f398:	f240 5454 	movw	r4, #1364	; 0x554
 100f39c:	42a1      	cmp	r1, r4
 100f39e:	bf9d      	ittte	ls
 100f3a0:	0c99      	lsrls	r1, r3, #18
 100f3a2:	f101 047d 	addls.w	r4, r1, #125	; 0x7d
 100f3a6:	f101 057c 	addls.w	r5, r1, #124	; 0x7c
 100f3aa:	f44f 717e 	movhi.w	r1, #1016	; 0x3f8
 100f3ae:	bf8c      	ite	hi
 100f3b0:	257e      	movhi	r5, #126	; 0x7e
 100f3b2:	00e1      	lslls	r1, r4, #3
 100f3b4:	e781      	b.n	100f2ba <_free_r+0xea>
 100f3b6:	f043 0201 	orr.w	r2, r3, #1
 100f3ba:	6042      	str	r2, [r0, #4]
 100f3bc:	6023      	str	r3, [r4, #0]
 100f3be:	e754      	b.n	100f26a <_free_r+0x9a>

0100f3c0 <_findenv_r>:
 100f3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100f3c4:	f643 57cc 	movw	r7, #15820	; 0x3dcc
 100f3c8:	f2c0 1701 	movt	r7, #257	; 0x101
 100f3cc:	460d      	mov	r5, r1
 100f3ce:	4616      	mov	r6, r2
 100f3d0:	4680      	mov	r8, r0
 100f3d2:	f001 fded 	bl	1010fb0 <__env_lock>
 100f3d6:	f8d7 9000 	ldr.w	r9, [r7]
 100f3da:	f1b9 0f00 	cmp.w	r9, #0
 100f3de:	d021      	beq.n	100f424 <_findenv_r+0x64>
 100f3e0:	782a      	ldrb	r2, [r5, #0]
 100f3e2:	462c      	mov	r4, r5
 100f3e4:	2a3d      	cmp	r2, #61	; 0x3d
 100f3e6:	bf18      	it	ne
 100f3e8:	2a00      	cmpne	r2, #0
 100f3ea:	d005      	beq.n	100f3f8 <_findenv_r+0x38>
 100f3ec:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 100f3f0:	2a00      	cmp	r2, #0
 100f3f2:	bf18      	it	ne
 100f3f4:	2a3d      	cmpne	r2, #61	; 0x3d
 100f3f6:	d1f9      	bne.n	100f3ec <_findenv_r+0x2c>
 100f3f8:	2a3d      	cmp	r2, #61	; 0x3d
 100f3fa:	d013      	beq.n	100f424 <_findenv_r+0x64>
 100f3fc:	f8d9 0000 	ldr.w	r0, [r9]
 100f400:	1b64      	subs	r4, r4, r5
 100f402:	b178      	cbz	r0, 100f424 <_findenv_r+0x64>
 100f404:	4622      	mov	r2, r4
 100f406:	4629      	mov	r1, r5
 100f408:	f7fc fe16 	bl	100c038 <strncmp>
 100f40c:	b930      	cbnz	r0, 100f41c <_findenv_r+0x5c>
 100f40e:	f8d9 3000 	ldr.w	r3, [r9]
 100f412:	eb03 0a04 	add.w	sl, r3, r4
 100f416:	5d1b      	ldrb	r3, [r3, r4]
 100f418:	2b3d      	cmp	r3, #61	; 0x3d
 100f41a:	d009      	beq.n	100f430 <_findenv_r+0x70>
 100f41c:	f859 0f04 	ldr.w	r0, [r9, #4]!
 100f420:	2800      	cmp	r0, #0
 100f422:	d1ef      	bne.n	100f404 <_findenv_r+0x44>
 100f424:	4640      	mov	r0, r8
 100f426:	f001 fdc5 	bl	1010fb4 <__env_unlock>
 100f42a:	2000      	movs	r0, #0
 100f42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100f430:	683b      	ldr	r3, [r7, #0]
 100f432:	4640      	mov	r0, r8
 100f434:	eba9 0303 	sub.w	r3, r9, r3
 100f438:	109b      	asrs	r3, r3, #2
 100f43a:	6033      	str	r3, [r6, #0]
 100f43c:	f001 fdba 	bl	1010fb4 <__env_unlock>
 100f440:	f10a 0001 	add.w	r0, sl, #1
 100f444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0100f448 <_getenv_r>:
 100f448:	b500      	push	{lr}
 100f44a:	b083      	sub	sp, #12
 100f44c:	aa01      	add	r2, sp, #4
 100f44e:	f7ff ffb7 	bl	100f3c0 <_findenv_r>
 100f452:	b003      	add	sp, #12
 100f454:	f85d fb04 	ldr.w	pc, [sp], #4

0100f458 <__localeconv_l>:
 100f458:	30f0      	adds	r0, #240	; 0xf0
 100f45a:	4770      	bx	lr

0100f45c <_localeconv_r>:
 100f45c:	f243 4200 	movw	r2, #13312	; 0x3400
 100f460:	f2c0 1201 	movt	r2, #257	; 0x101
 100f464:	f643 0330 	movw	r3, #14384	; 0x3830
 100f468:	f2c0 1301 	movt	r3, #257	; 0x101
 100f46c:	6812      	ldr	r2, [r2, #0]
 100f46e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 100f470:	2800      	cmp	r0, #0
 100f472:	bf08      	it	eq
 100f474:	4618      	moveq	r0, r3
 100f476:	30f0      	adds	r0, #240	; 0xf0
 100f478:	4770      	bx	lr
 100f47a:	bf00      	nop

0100f47c <localeconv>:
 100f47c:	f243 4200 	movw	r2, #13312	; 0x3400
 100f480:	f2c0 1201 	movt	r2, #257	; 0x101
 100f484:	f643 0330 	movw	r3, #14384	; 0x3830
 100f488:	f2c0 1301 	movt	r3, #257	; 0x101
 100f48c:	6812      	ldr	r2, [r2, #0]
 100f48e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 100f490:	2800      	cmp	r0, #0
 100f492:	bf08      	it	eq
 100f494:	4618      	moveq	r0, r3
 100f496:	30f0      	adds	r0, #240	; 0xf0
 100f498:	4770      	bx	lr
 100f49a:	bf00      	nop
 100f49c:	0000      	movs	r0, r0
	...

0100f4a0 <memchr>:
 100f4a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100f4a4:	2a10      	cmp	r2, #16
 100f4a6:	db2b      	blt.n	100f500 <memchr+0x60>
 100f4a8:	f010 0f07 	tst.w	r0, #7
 100f4ac:	d008      	beq.n	100f4c0 <memchr+0x20>
 100f4ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 100f4b2:	3a01      	subs	r2, #1
 100f4b4:	428b      	cmp	r3, r1
 100f4b6:	d02d      	beq.n	100f514 <memchr+0x74>
 100f4b8:	f010 0f07 	tst.w	r0, #7
 100f4bc:	b342      	cbz	r2, 100f510 <memchr+0x70>
 100f4be:	d1f6      	bne.n	100f4ae <memchr+0xe>
 100f4c0:	b4f0      	push	{r4, r5, r6, r7}
 100f4c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 100f4c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 100f4ca:	f022 0407 	bic.w	r4, r2, #7
 100f4ce:	f07f 0700 	mvns.w	r7, #0
 100f4d2:	2300      	movs	r3, #0
 100f4d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 100f4d8:	3c08      	subs	r4, #8
 100f4da:	ea85 0501 	eor.w	r5, r5, r1
 100f4de:	ea86 0601 	eor.w	r6, r6, r1
 100f4e2:	fa85 f547 	uadd8	r5, r5, r7
 100f4e6:	faa3 f587 	sel	r5, r3, r7
 100f4ea:	fa86 f647 	uadd8	r6, r6, r7
 100f4ee:	faa5 f687 	sel	r6, r5, r7
 100f4f2:	b98e      	cbnz	r6, 100f518 <memchr+0x78>
 100f4f4:	d1ee      	bne.n	100f4d4 <memchr+0x34>
 100f4f6:	bcf0      	pop	{r4, r5, r6, r7}
 100f4f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100f4fc:	f002 0207 	and.w	r2, r2, #7
 100f500:	b132      	cbz	r2, 100f510 <memchr+0x70>
 100f502:	f810 3b01 	ldrb.w	r3, [r0], #1
 100f506:	3a01      	subs	r2, #1
 100f508:	ea83 0301 	eor.w	r3, r3, r1
 100f50c:	b113      	cbz	r3, 100f514 <memchr+0x74>
 100f50e:	d1f8      	bne.n	100f502 <memchr+0x62>
 100f510:	2000      	movs	r0, #0
 100f512:	4770      	bx	lr
 100f514:	3801      	subs	r0, #1
 100f516:	4770      	bx	lr
 100f518:	2d00      	cmp	r5, #0
 100f51a:	bf06      	itte	eq
 100f51c:	4635      	moveq	r5, r6
 100f51e:	3803      	subeq	r0, #3
 100f520:	3807      	subne	r0, #7
 100f522:	f015 0f01 	tst.w	r5, #1
 100f526:	d107      	bne.n	100f538 <memchr+0x98>
 100f528:	3001      	adds	r0, #1
 100f52a:	f415 7f80 	tst.w	r5, #256	; 0x100
 100f52e:	bf02      	ittt	eq
 100f530:	3001      	addeq	r0, #1
 100f532:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 100f536:	3001      	addeq	r0, #1
 100f538:	bcf0      	pop	{r4, r5, r6, r7}
 100f53a:	3801      	subs	r0, #1
 100f53c:	4770      	bx	lr
 100f53e:	bf00      	nop

0100f540 <_Balloc>:
 100f540:	b538      	push	{r3, r4, r5, lr}
 100f542:	4605      	mov	r5, r0
 100f544:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 100f546:	460c      	mov	r4, r1
 100f548:	b14b      	cbz	r3, 100f55e <_Balloc+0x1e>
 100f54a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 100f54e:	b180      	cbz	r0, 100f572 <_Balloc+0x32>
 100f550:	6802      	ldr	r2, [r0, #0]
 100f552:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 100f556:	2300      	movs	r3, #0
 100f558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 100f55c:	bd38      	pop	{r3, r4, r5, pc}
 100f55e:	2221      	movs	r2, #33	; 0x21
 100f560:	2104      	movs	r1, #4
 100f562:	f001 fcf3 	bl	1010f4c <_calloc_r>
 100f566:	4603      	mov	r3, r0
 100f568:	64e8      	str	r0, [r5, #76]	; 0x4c
 100f56a:	2800      	cmp	r0, #0
 100f56c:	d1ed      	bne.n	100f54a <_Balloc+0xa>
 100f56e:	2000      	movs	r0, #0
 100f570:	bd38      	pop	{r3, r4, r5, pc}
 100f572:	2101      	movs	r1, #1
 100f574:	4628      	mov	r0, r5
 100f576:	fa01 f504 	lsl.w	r5, r1, r4
 100f57a:	1d6a      	adds	r2, r5, #5
 100f57c:	0092      	lsls	r2, r2, #2
 100f57e:	f001 fce5 	bl	1010f4c <_calloc_r>
 100f582:	2800      	cmp	r0, #0
 100f584:	d0f3      	beq.n	100f56e <_Balloc+0x2e>
 100f586:	e9c0 4501 	strd	r4, r5, [r0, #4]
 100f58a:	e7e4      	b.n	100f556 <_Balloc+0x16>

0100f58c <_Bfree>:
 100f58c:	b131      	cbz	r1, 100f59c <_Bfree+0x10>
 100f58e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 100f590:	684a      	ldr	r2, [r1, #4]
 100f592:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 100f596:	6008      	str	r0, [r1, #0]
 100f598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 100f59c:	4770      	bx	lr
 100f59e:	bf00      	nop

0100f5a0 <__multadd>:
 100f5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 100f5a2:	f101 0714 	add.w	r7, r1, #20
 100f5a6:	690c      	ldr	r4, [r1, #16]
 100f5a8:	b083      	sub	sp, #12
 100f5aa:	460d      	mov	r5, r1
 100f5ac:	4606      	mov	r6, r0
 100f5ae:	f04f 0c00 	mov.w	ip, #0
 100f5b2:	6838      	ldr	r0, [r7, #0]
 100f5b4:	f10c 0c01 	add.w	ip, ip, #1
 100f5b8:	4564      	cmp	r4, ip
 100f5ba:	b281      	uxth	r1, r0
 100f5bc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 100f5c0:	fb02 3301 	mla	r3, r2, r1, r3
 100f5c4:	ea4f 4113 	mov.w	r1, r3, lsr #16
 100f5c8:	b29b      	uxth	r3, r3
 100f5ca:	fb02 1000 	mla	r0, r2, r0, r1
 100f5ce:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 100f5d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 100f5d6:	f847 1b04 	str.w	r1, [r7], #4
 100f5da:	dcea      	bgt.n	100f5b2 <__multadd+0x12>
 100f5dc:	b13b      	cbz	r3, 100f5ee <__multadd+0x4e>
 100f5de:	68aa      	ldr	r2, [r5, #8]
 100f5e0:	42a2      	cmp	r2, r4
 100f5e2:	dd07      	ble.n	100f5f4 <__multadd+0x54>
 100f5e4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 100f5e8:	3401      	adds	r4, #1
 100f5ea:	6153      	str	r3, [r2, #20]
 100f5ec:	612c      	str	r4, [r5, #16]
 100f5ee:	4628      	mov	r0, r5
 100f5f0:	b003      	add	sp, #12
 100f5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100f5f4:	6869      	ldr	r1, [r5, #4]
 100f5f6:	4630      	mov	r0, r6
 100f5f8:	9301      	str	r3, [sp, #4]
 100f5fa:	3101      	adds	r1, #1
 100f5fc:	f7ff ffa0 	bl	100f540 <_Balloc>
 100f600:	692a      	ldr	r2, [r5, #16]
 100f602:	f105 010c 	add.w	r1, r5, #12
 100f606:	3202      	adds	r2, #2
 100f608:	0092      	lsls	r2, r2, #2
 100f60a:	4607      	mov	r7, r0
 100f60c:	300c      	adds	r0, #12
 100f60e:	f7fb edd8 	blx	100b1c0 <memcpy>
 100f612:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 100f614:	6869      	ldr	r1, [r5, #4]
 100f616:	9b01      	ldr	r3, [sp, #4]
 100f618:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 100f61c:	6028      	str	r0, [r5, #0]
 100f61e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 100f622:	463d      	mov	r5, r7
 100f624:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 100f628:	3401      	adds	r4, #1
 100f62a:	6153      	str	r3, [r2, #20]
 100f62c:	612c      	str	r4, [r5, #16]
 100f62e:	e7de      	b.n	100f5ee <__multadd+0x4e>

0100f630 <__s2b>:
 100f630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100f634:	461d      	mov	r5, r3
 100f636:	f648 6639 	movw	r6, #36409	; 0x8e39
 100f63a:	3308      	adds	r3, #8
 100f63c:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 100f640:	4607      	mov	r7, r0
 100f642:	460c      	mov	r4, r1
 100f644:	2d09      	cmp	r5, #9
 100f646:	fb86 0103 	smull	r0, r1, r6, r3
 100f64a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 100f64e:	4690      	mov	r8, r2
 100f650:	9e08      	ldr	r6, [sp, #32]
 100f652:	ebc3 0261 	rsb	r2, r3, r1, asr #1
 100f656:	dd35      	ble.n	100f6c4 <__s2b+0x94>
 100f658:	2301      	movs	r3, #1
 100f65a:	2100      	movs	r1, #0
 100f65c:	005b      	lsls	r3, r3, #1
 100f65e:	3101      	adds	r1, #1
 100f660:	429a      	cmp	r2, r3
 100f662:	dcfb      	bgt.n	100f65c <__s2b+0x2c>
 100f664:	4638      	mov	r0, r7
 100f666:	f7ff ff6b 	bl	100f540 <_Balloc>
 100f66a:	f1b8 0f09 	cmp.w	r8, #9
 100f66e:	f04f 0301 	mov.w	r3, #1
 100f672:	bfdc      	itt	le
 100f674:	340a      	addle	r4, #10
 100f676:	f04f 0809 	movle.w	r8, #9
 100f67a:	6146      	str	r6, [r0, #20]
 100f67c:	6103      	str	r3, [r0, #16]
 100f67e:	dd10      	ble.n	100f6a2 <__s2b+0x72>
 100f680:	f104 0909 	add.w	r9, r4, #9
 100f684:	4444      	add	r4, r8
 100f686:	464e      	mov	r6, r9
 100f688:	f816 3b01 	ldrb.w	r3, [r6], #1
 100f68c:	4601      	mov	r1, r0
 100f68e:	220a      	movs	r2, #10
 100f690:	4638      	mov	r0, r7
 100f692:	3b30      	subs	r3, #48	; 0x30
 100f694:	f7ff ff84 	bl	100f5a0 <__multadd>
 100f698:	42b4      	cmp	r4, r6
 100f69a:	d1f5      	bne.n	100f688 <__s2b+0x58>
 100f69c:	f1a8 0408 	sub.w	r4, r8, #8
 100f6a0:	444c      	add	r4, r9
 100f6a2:	4545      	cmp	r5, r8
 100f6a4:	dd0c      	ble.n	100f6c0 <__s2b+0x90>
 100f6a6:	eba5 0508 	sub.w	r5, r5, r8
 100f6aa:	4425      	add	r5, r4
 100f6ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 100f6b0:	4601      	mov	r1, r0
 100f6b2:	220a      	movs	r2, #10
 100f6b4:	4638      	mov	r0, r7
 100f6b6:	3b30      	subs	r3, #48	; 0x30
 100f6b8:	f7ff ff72 	bl	100f5a0 <__multadd>
 100f6bc:	42a5      	cmp	r5, r4
 100f6be:	d1f5      	bne.n	100f6ac <__s2b+0x7c>
 100f6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100f6c4:	2100      	movs	r1, #0
 100f6c6:	e7cd      	b.n	100f664 <__s2b+0x34>

0100f6c8 <__hi0bits>:
 100f6c8:	0c02      	lsrs	r2, r0, #16
 100f6ca:	4603      	mov	r3, r0
 100f6cc:	2000      	movs	r0, #0
 100f6ce:	0412      	lsls	r2, r2, #16
 100f6d0:	b90a      	cbnz	r2, 100f6d6 <__hi0bits+0xe>
 100f6d2:	041b      	lsls	r3, r3, #16
 100f6d4:	2010      	movs	r0, #16
 100f6d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 100f6da:	bf04      	itt	eq
 100f6dc:	021b      	lsleq	r3, r3, #8
 100f6de:	3008      	addeq	r0, #8
 100f6e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 100f6e4:	bf04      	itt	eq
 100f6e6:	011b      	lsleq	r3, r3, #4
 100f6e8:	3004      	addeq	r0, #4
 100f6ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 100f6ee:	bf04      	itt	eq
 100f6f0:	009b      	lsleq	r3, r3, #2
 100f6f2:	3002      	addeq	r0, #2
 100f6f4:	2b00      	cmp	r3, #0
 100f6f6:	db05      	blt.n	100f704 <__hi0bits+0x3c>
 100f6f8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 100f6fc:	f100 0001 	add.w	r0, r0, #1
 100f700:	bf08      	it	eq
 100f702:	2020      	moveq	r0, #32
 100f704:	4770      	bx	lr
 100f706:	bf00      	nop

0100f708 <__lo0bits>:
 100f708:	6803      	ldr	r3, [r0, #0]
 100f70a:	4601      	mov	r1, r0
 100f70c:	f013 0207 	ands.w	r2, r3, #7
 100f710:	d009      	beq.n	100f726 <__lo0bits+0x1e>
 100f712:	07da      	lsls	r2, r3, #31
 100f714:	d422      	bmi.n	100f75c <__lo0bits+0x54>
 100f716:	0798      	lsls	r0, r3, #30
 100f718:	bf4b      	itete	mi
 100f71a:	085b      	lsrmi	r3, r3, #1
 100f71c:	089b      	lsrpl	r3, r3, #2
 100f71e:	2001      	movmi	r0, #1
 100f720:	2002      	movpl	r0, #2
 100f722:	600b      	str	r3, [r1, #0]
 100f724:	4770      	bx	lr
 100f726:	b298      	uxth	r0, r3
 100f728:	b9b0      	cbnz	r0, 100f758 <__lo0bits+0x50>
 100f72a:	0c1b      	lsrs	r3, r3, #16
 100f72c:	2010      	movs	r0, #16
 100f72e:	f013 0fff 	tst.w	r3, #255	; 0xff
 100f732:	bf04      	itt	eq
 100f734:	0a1b      	lsreq	r3, r3, #8
 100f736:	3008      	addeq	r0, #8
 100f738:	071a      	lsls	r2, r3, #28
 100f73a:	bf04      	itt	eq
 100f73c:	091b      	lsreq	r3, r3, #4
 100f73e:	3004      	addeq	r0, #4
 100f740:	079a      	lsls	r2, r3, #30
 100f742:	bf04      	itt	eq
 100f744:	089b      	lsreq	r3, r3, #2
 100f746:	3002      	addeq	r0, #2
 100f748:	07da      	lsls	r2, r3, #31
 100f74a:	d403      	bmi.n	100f754 <__lo0bits+0x4c>
 100f74c:	085b      	lsrs	r3, r3, #1
 100f74e:	f100 0001 	add.w	r0, r0, #1
 100f752:	d005      	beq.n	100f760 <__lo0bits+0x58>
 100f754:	600b      	str	r3, [r1, #0]
 100f756:	4770      	bx	lr
 100f758:	4610      	mov	r0, r2
 100f75a:	e7e8      	b.n	100f72e <__lo0bits+0x26>
 100f75c:	2000      	movs	r0, #0
 100f75e:	4770      	bx	lr
 100f760:	2020      	movs	r0, #32
 100f762:	4770      	bx	lr

0100f764 <__i2b>:
 100f764:	b510      	push	{r4, lr}
 100f766:	460c      	mov	r4, r1
 100f768:	2101      	movs	r1, #1
 100f76a:	f7ff fee9 	bl	100f540 <_Balloc>
 100f76e:	2201      	movs	r2, #1
 100f770:	6144      	str	r4, [r0, #20]
 100f772:	6102      	str	r2, [r0, #16]
 100f774:	bd10      	pop	{r4, pc}
 100f776:	bf00      	nop

0100f778 <__multiply>:
 100f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100f77c:	b083      	sub	sp, #12
 100f77e:	690d      	ldr	r5, [r1, #16]
 100f780:	6913      	ldr	r3, [r2, #16]
 100f782:	429d      	cmp	r5, r3
 100f784:	bfb5      	itete	lt
 100f786:	4614      	movlt	r4, r2
 100f788:	460c      	movge	r4, r1
 100f78a:	461f      	movlt	r7, r3
 100f78c:	469b      	movge	fp, r3
 100f78e:	68a3      	ldr	r3, [r4, #8]
 100f790:	bfae      	itee	ge
 100f792:	462f      	movge	r7, r5
 100f794:	46ab      	movlt	fp, r5
 100f796:	460d      	movlt	r5, r1
 100f798:	eb07 080b 	add.w	r8, r7, fp
 100f79c:	6861      	ldr	r1, [r4, #4]
 100f79e:	bfa8      	it	ge
 100f7a0:	4615      	movge	r5, r2
 100f7a2:	4543      	cmp	r3, r8
 100f7a4:	bfb8      	it	lt
 100f7a6:	3101      	addlt	r1, #1
 100f7a8:	f7ff feca 	bl	100f540 <_Balloc>
 100f7ac:	f100 0a14 	add.w	sl, r0, #20
 100f7b0:	4603      	mov	r3, r0
 100f7b2:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 100f7b6:	9000      	str	r0, [sp, #0]
 100f7b8:	45ca      	cmp	sl, r9
 100f7ba:	bf3c      	itt	cc
 100f7bc:	4653      	movcc	r3, sl
 100f7be:	2000      	movcc	r0, #0
 100f7c0:	d203      	bcs.n	100f7ca <__multiply+0x52>
 100f7c2:	f843 0b04 	str.w	r0, [r3], #4
 100f7c6:	4599      	cmp	r9, r3
 100f7c8:	d8fb      	bhi.n	100f7c2 <__multiply+0x4a>
 100f7ca:	f105 0e14 	add.w	lr, r5, #20
 100f7ce:	f104 0314 	add.w	r3, r4, #20
 100f7d2:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 100f7d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 100f7da:	45de      	cmp	lr, fp
 100f7dc:	bf3c      	itt	cc
 100f7de:	f8cd 8004 	strcc.w	r8, [sp, #4]
 100f7e2:	4698      	movcc	r8, r3
 100f7e4:	d306      	bcc.n	100f7f4 <__multiply+0x7c>
 100f7e6:	e051      	b.n	100f88c <__multiply+0x114>
 100f7e8:	0c24      	lsrs	r4, r4, #16
 100f7ea:	d12a      	bne.n	100f842 <__multiply+0xca>
 100f7ec:	45f3      	cmp	fp, lr
 100f7ee:	f10a 0a04 	add.w	sl, sl, #4
 100f7f2:	d949      	bls.n	100f888 <__multiply+0x110>
 100f7f4:	f85e 4b04 	ldr.w	r4, [lr], #4
 100f7f8:	b2a6      	uxth	r6, r4
 100f7fa:	2e00      	cmp	r6, #0
 100f7fc:	d0f4      	beq.n	100f7e8 <__multiply+0x70>
 100f7fe:	4645      	mov	r5, r8
 100f800:	4654      	mov	r4, sl
 100f802:	2300      	movs	r3, #0
 100f804:	f855 1b04 	ldr.w	r1, [r5], #4
 100f808:	6820      	ldr	r0, [r4, #0]
 100f80a:	42af      	cmp	r7, r5
 100f80c:	b28a      	uxth	r2, r1
 100f80e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 100f812:	fa1f fc80 	uxth.w	ip, r0
 100f816:	ea4f 4010 	mov.w	r0, r0, lsr #16
 100f81a:	fb06 c202 	mla	r2, r6, r2, ip
 100f81e:	fb06 0101 	mla	r1, r6, r1, r0
 100f822:	4413      	add	r3, r2
 100f824:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 100f828:	b29b      	uxth	r3, r3
 100f82a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 100f82e:	ea4f 4311 	mov.w	r3, r1, lsr #16
 100f832:	f844 2b04 	str.w	r2, [r4], #4
 100f836:	d8e5      	bhi.n	100f804 <__multiply+0x8c>
 100f838:	6023      	str	r3, [r4, #0]
 100f83a:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 100f83e:	0c24      	lsrs	r4, r4, #16
 100f840:	d0d4      	beq.n	100f7ec <__multiply+0x74>
 100f842:	f8da 3000 	ldr.w	r3, [sl]
 100f846:	4645      	mov	r5, r8
 100f848:	4656      	mov	r6, sl
 100f84a:	2200      	movs	r2, #0
 100f84c:	4618      	mov	r0, r3
 100f84e:	8829      	ldrh	r1, [r5, #0]
 100f850:	0c00      	lsrs	r0, r0, #16
 100f852:	b29b      	uxth	r3, r3
 100f854:	fb04 0001 	mla	r0, r4, r1, r0
 100f858:	4402      	add	r2, r0
 100f85a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 100f85e:	f846 3b04 	str.w	r3, [r6], #4
 100f862:	f855 3b04 	ldr.w	r3, [r5], #4
 100f866:	6830      	ldr	r0, [r6, #0]
 100f868:	42af      	cmp	r7, r5
 100f86a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 100f86e:	b281      	uxth	r1, r0
 100f870:	fb04 1303 	mla	r3, r4, r3, r1
 100f874:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 100f878:	ea4f 4213 	mov.w	r2, r3, lsr #16
 100f87c:	d8e7      	bhi.n	100f84e <__multiply+0xd6>
 100f87e:	45f3      	cmp	fp, lr
 100f880:	6033      	str	r3, [r6, #0]
 100f882:	f10a 0a04 	add.w	sl, sl, #4
 100f886:	d8b5      	bhi.n	100f7f4 <__multiply+0x7c>
 100f888:	f8dd 8004 	ldr.w	r8, [sp, #4]
 100f88c:	f1b8 0f00 	cmp.w	r8, #0
 100f890:	dd0b      	ble.n	100f8aa <__multiply+0x132>
 100f892:	f859 3c04 	ldr.w	r3, [r9, #-4]
 100f896:	f1a9 0904 	sub.w	r9, r9, #4
 100f89a:	b11b      	cbz	r3, 100f8a4 <__multiply+0x12c>
 100f89c:	e005      	b.n	100f8aa <__multiply+0x132>
 100f89e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 100f8a2:	b913      	cbnz	r3, 100f8aa <__multiply+0x132>
 100f8a4:	f1b8 0801 	subs.w	r8, r8, #1
 100f8a8:	d1f9      	bne.n	100f89e <__multiply+0x126>
 100f8aa:	9800      	ldr	r0, [sp, #0]
 100f8ac:	f8c0 8010 	str.w	r8, [r0, #16]
 100f8b0:	b003      	add	sp, #12
 100f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100f8b6:	bf00      	nop

0100f8b8 <__pow5mult>:
 100f8b8:	f012 0303 	ands.w	r3, r2, #3
 100f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100f8c0:	4614      	mov	r4, r2
 100f8c2:	4607      	mov	r7, r0
 100f8c4:	bf08      	it	eq
 100f8c6:	460d      	moveq	r5, r1
 100f8c8:	d12d      	bne.n	100f926 <__pow5mult+0x6e>
 100f8ca:	10a4      	asrs	r4, r4, #2
 100f8cc:	d01c      	beq.n	100f908 <__pow5mult+0x50>
 100f8ce:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 100f8d0:	b3ae      	cbz	r6, 100f93e <__pow5mult+0x86>
 100f8d2:	07e3      	lsls	r3, r4, #31
 100f8d4:	f04f 0800 	mov.w	r8, #0
 100f8d8:	d406      	bmi.n	100f8e8 <__pow5mult+0x30>
 100f8da:	1064      	asrs	r4, r4, #1
 100f8dc:	d014      	beq.n	100f908 <__pow5mult+0x50>
 100f8de:	6830      	ldr	r0, [r6, #0]
 100f8e0:	b1a8      	cbz	r0, 100f90e <__pow5mult+0x56>
 100f8e2:	4606      	mov	r6, r0
 100f8e4:	07e3      	lsls	r3, r4, #31
 100f8e6:	d5f8      	bpl.n	100f8da <__pow5mult+0x22>
 100f8e8:	4632      	mov	r2, r6
 100f8ea:	4629      	mov	r1, r5
 100f8ec:	4638      	mov	r0, r7
 100f8ee:	f7ff ff43 	bl	100f778 <__multiply>
 100f8f2:	b1b5      	cbz	r5, 100f922 <__pow5mult+0x6a>
 100f8f4:	686a      	ldr	r2, [r5, #4]
 100f8f6:	1064      	asrs	r4, r4, #1
 100f8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 100f8fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 100f8fe:	6029      	str	r1, [r5, #0]
 100f900:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 100f904:	4605      	mov	r5, r0
 100f906:	d1ea      	bne.n	100f8de <__pow5mult+0x26>
 100f908:	4628      	mov	r0, r5
 100f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100f90e:	4632      	mov	r2, r6
 100f910:	4631      	mov	r1, r6
 100f912:	4638      	mov	r0, r7
 100f914:	f7ff ff30 	bl	100f778 <__multiply>
 100f918:	6030      	str	r0, [r6, #0]
 100f91a:	4606      	mov	r6, r0
 100f91c:	f8c0 8000 	str.w	r8, [r0]
 100f920:	e7e0      	b.n	100f8e4 <__pow5mult+0x2c>
 100f922:	4605      	mov	r5, r0
 100f924:	e7d9      	b.n	100f8da <__pow5mult+0x22>
 100f926:	1e5a      	subs	r2, r3, #1
 100f928:	f641 0548 	movw	r5, #6216	; 0x1848
 100f92c:	f2c0 1501 	movt	r5, #257	; 0x101
 100f930:	2300      	movs	r3, #0
 100f932:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 100f936:	f7ff fe33 	bl	100f5a0 <__multadd>
 100f93a:	4605      	mov	r5, r0
 100f93c:	e7c5      	b.n	100f8ca <__pow5mult+0x12>
 100f93e:	2101      	movs	r1, #1
 100f940:	4638      	mov	r0, r7
 100f942:	f7ff fdfd 	bl	100f540 <_Balloc>
 100f946:	2301      	movs	r3, #1
 100f948:	f240 2271 	movw	r2, #625	; 0x271
 100f94c:	4606      	mov	r6, r0
 100f94e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 100f952:	2300      	movs	r3, #0
 100f954:	64b8      	str	r0, [r7, #72]	; 0x48
 100f956:	6003      	str	r3, [r0, #0]
 100f958:	e7bb      	b.n	100f8d2 <__pow5mult+0x1a>
 100f95a:	bf00      	nop

0100f95c <__lshift>:
 100f95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100f960:	ea4f 1962 	mov.w	r9, r2, asr #5
 100f964:	690e      	ldr	r6, [r1, #16]
 100f966:	460d      	mov	r5, r1
 100f968:	688b      	ldr	r3, [r1, #8]
 100f96a:	4690      	mov	r8, r2
 100f96c:	444e      	add	r6, r9
 100f96e:	4607      	mov	r7, r0
 100f970:	1c74      	adds	r4, r6, #1
 100f972:	6849      	ldr	r1, [r1, #4]
 100f974:	429c      	cmp	r4, r3
 100f976:	dd03      	ble.n	100f980 <__lshift+0x24>
 100f978:	005b      	lsls	r3, r3, #1
 100f97a:	3101      	adds	r1, #1
 100f97c:	429c      	cmp	r4, r3
 100f97e:	dcfb      	bgt.n	100f978 <__lshift+0x1c>
 100f980:	4638      	mov	r0, r7
 100f982:	f7ff fddd 	bl	100f540 <_Balloc>
 100f986:	f1b9 0f00 	cmp.w	r9, #0
 100f98a:	4684      	mov	ip, r0
 100f98c:	f100 0014 	add.w	r0, r0, #20
 100f990:	dd0e      	ble.n	100f9b0 <__lshift+0x54>
 100f992:	f109 0905 	add.w	r9, r9, #5
 100f996:	4603      	mov	r3, r0
 100f998:	2100      	movs	r1, #0
 100f99a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 100f99e:	eb0c 0209 	add.w	r2, ip, r9
 100f9a2:	f843 1b04 	str.w	r1, [r3], #4
 100f9a6:	4293      	cmp	r3, r2
 100f9a8:	d1fb      	bne.n	100f9a2 <__lshift+0x46>
 100f9aa:	f1a9 0914 	sub.w	r9, r9, #20
 100f9ae:	4448      	add	r0, r9
 100f9b0:	6929      	ldr	r1, [r5, #16]
 100f9b2:	f018 081f 	ands.w	r8, r8, #31
 100f9b6:	f105 0314 	add.w	r3, r5, #20
 100f9ba:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 100f9be:	d022      	beq.n	100fa06 <__lshift+0xaa>
 100f9c0:	f1c8 0220 	rsb	r2, r8, #32
 100f9c4:	f04f 0900 	mov.w	r9, #0
 100f9c8:	6819      	ldr	r1, [r3, #0]
 100f9ca:	fa01 f108 	lsl.w	r1, r1, r8
 100f9ce:	ea41 0109 	orr.w	r1, r1, r9
 100f9d2:	f840 1b04 	str.w	r1, [r0], #4
 100f9d6:	f853 1b04 	ldr.w	r1, [r3], #4
 100f9da:	4573      	cmp	r3, lr
 100f9dc:	fa21 f902 	lsr.w	r9, r1, r2
 100f9e0:	d3f2      	bcc.n	100f9c8 <__lshift+0x6c>
 100f9e2:	f1b9 0f00 	cmp.w	r9, #0
 100f9e6:	bf18      	it	ne
 100f9e8:	4626      	movne	r6, r4
 100f9ea:	f8c0 9000 	str.w	r9, [r0]
 100f9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 100f9f0:	4660      	mov	r0, ip
 100f9f2:	686a      	ldr	r2, [r5, #4]
 100f9f4:	f8cc 6010 	str.w	r6, [ip, #16]
 100f9f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 100f9fc:	6029      	str	r1, [r5, #0]
 100f9fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 100fa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100fa06:	3804      	subs	r0, #4
 100fa08:	f853 2b04 	ldr.w	r2, [r3], #4
 100fa0c:	459e      	cmp	lr, r3
 100fa0e:	f840 2f04 	str.w	r2, [r0, #4]!
 100fa12:	d8f9      	bhi.n	100fa08 <__lshift+0xac>
 100fa14:	e7eb      	b.n	100f9ee <__lshift+0x92>
 100fa16:	bf00      	nop

0100fa18 <__mcmp>:
 100fa18:	b430      	push	{r4, r5}
 100fa1a:	4605      	mov	r5, r0
 100fa1c:	690a      	ldr	r2, [r1, #16]
 100fa1e:	6900      	ldr	r0, [r0, #16]
 100fa20:	1a80      	subs	r0, r0, r2
 100fa22:	d110      	bne.n	100fa46 <__mcmp+0x2e>
 100fa24:	0092      	lsls	r2, r2, #2
 100fa26:	3514      	adds	r5, #20
 100fa28:	3114      	adds	r1, #20
 100fa2a:	18ab      	adds	r3, r5, r2
 100fa2c:	4411      	add	r1, r2
 100fa2e:	e001      	b.n	100fa34 <__mcmp+0x1c>
 100fa30:	429d      	cmp	r5, r3
 100fa32:	d208      	bcs.n	100fa46 <__mcmp+0x2e>
 100fa34:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 100fa38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 100fa3c:	4294      	cmp	r4, r2
 100fa3e:	d0f7      	beq.n	100fa30 <__mcmp+0x18>
 100fa40:	bf28      	it	cs
 100fa42:	2001      	movcs	r0, #1
 100fa44:	d301      	bcc.n	100fa4a <__mcmp+0x32>
 100fa46:	bc30      	pop	{r4, r5}
 100fa48:	4770      	bx	lr
 100fa4a:	f04f 30ff 	mov.w	r0, #4294967295
 100fa4e:	bc30      	pop	{r4, r5}
 100fa50:	4770      	bx	lr
 100fa52:	bf00      	nop

0100fa54 <__mdiff>:
 100fa54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100fa58:	460f      	mov	r7, r1
 100fa5a:	690d      	ldr	r5, [r1, #16]
 100fa5c:	4616      	mov	r6, r2
 100fa5e:	6911      	ldr	r1, [r2, #16]
 100fa60:	4684      	mov	ip, r0
 100fa62:	f107 0414 	add.w	r4, r7, #20
 100fa66:	f102 0914 	add.w	r9, r2, #20
 100fa6a:	1a6d      	subs	r5, r5, r1
 100fa6c:	2d00      	cmp	r5, #0
 100fa6e:	d15f      	bne.n	100fb30 <__mdiff+0xdc>
 100fa70:	0089      	lsls	r1, r1, #2
 100fa72:	1863      	adds	r3, r4, r1
 100fa74:	4449      	add	r1, r9
 100fa76:	e001      	b.n	100fa7c <__mdiff+0x28>
 100fa78:	42a3      	cmp	r3, r4
 100fa7a:	d964      	bls.n	100fb46 <__mdiff+0xf2>
 100fa7c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 100fa80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 100fa84:	4290      	cmp	r0, r2
 100fa86:	d0f7      	beq.n	100fa78 <__mdiff+0x24>
 100fa88:	d355      	bcc.n	100fb36 <__mdiff+0xe2>
 100fa8a:	4660      	mov	r0, ip
 100fa8c:	6879      	ldr	r1, [r7, #4]
 100fa8e:	f7ff fd57 	bl	100f540 <_Balloc>
 100fa92:	f8d7 8010 	ldr.w	r8, [r7, #16]
 100fa96:	6933      	ldr	r3, [r6, #16]
 100fa98:	46cc      	mov	ip, r9
 100fa9a:	4627      	mov	r7, r4
 100fa9c:	2200      	movs	r2, #0
 100fa9e:	eb04 0e88 	add.w	lr, r4, r8, lsl #2
 100faa2:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 100faa6:	60c5      	str	r5, [r0, #12]
 100faa8:	f100 0514 	add.w	r5, r0, #20
 100faac:	e000      	b.n	100fab0 <__mdiff+0x5c>
 100faae:	4625      	mov	r5, r4
 100fab0:	f857 ab04 	ldr.w	sl, [r7], #4
 100fab4:	462c      	mov	r4, r5
 100fab6:	f85c 1b04 	ldr.w	r1, [ip], #4
 100faba:	fa12 f38a 	uxtah	r3, r2, sl
 100fabe:	45e1      	cmp	r9, ip
 100fac0:	fa1f fb81 	uxth.w	fp, r1
 100fac4:	ea4f 4211 	mov.w	r2, r1, lsr #16
 100fac8:	eba3 030b 	sub.w	r3, r3, fp
 100facc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 100fad0:	463e      	mov	r6, r7
 100fad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 100fad6:	b29b      	uxth	r3, r3
 100fad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 100fadc:	ea4f 4222 	mov.w	r2, r2, asr #16
 100fae0:	f844 3b04 	str.w	r3, [r4], #4
 100fae4:	d8e3      	bhi.n	100faae <__mdiff+0x5a>
 100fae6:	45be      	cmp	lr, r7
 100fae8:	d917      	bls.n	100fb1a <__mdiff+0xc6>
 100faea:	4625      	mov	r5, r4
 100faec:	f856 1b04 	ldr.w	r1, [r6], #4
 100faf0:	45b6      	cmp	lr, r6
 100faf2:	fa12 f381 	uxtah	r3, r2, r1
 100faf6:	ea4f 4223 	mov.w	r2, r3, asr #16
 100fafa:	b29b      	uxth	r3, r3
 100fafc:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 100fb00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 100fb04:	ea4f 4222 	mov.w	r2, r2, asr #16
 100fb08:	f845 3b04 	str.w	r3, [r5], #4
 100fb0c:	d8ee      	bhi.n	100faec <__mdiff+0x98>
 100fb0e:	f10e 35ff 	add.w	r5, lr, #4294967295
 100fb12:	1bed      	subs	r5, r5, r7
 100fb14:	f025 0503 	bic.w	r5, r5, #3
 100fb18:	4425      	add	r5, r4
 100fb1a:	b92b      	cbnz	r3, 100fb28 <__mdiff+0xd4>
 100fb1c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 100fb20:	f108 38ff 	add.w	r8, r8, #4294967295
 100fb24:	2b00      	cmp	r3, #0
 100fb26:	d0f9      	beq.n	100fb1c <__mdiff+0xc8>
 100fb28:	f8c0 8010 	str.w	r8, [r0, #16]
 100fb2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100fb30:	bfa8      	it	ge
 100fb32:	2500      	movge	r5, #0
 100fb34:	daa9      	bge.n	100fa8a <__mdiff+0x36>
 100fb36:	4622      	mov	r2, r4
 100fb38:	463b      	mov	r3, r7
 100fb3a:	464c      	mov	r4, r9
 100fb3c:	4637      	mov	r7, r6
 100fb3e:	4691      	mov	r9, r2
 100fb40:	461e      	mov	r6, r3
 100fb42:	2501      	movs	r5, #1
 100fb44:	e7a1      	b.n	100fa8a <__mdiff+0x36>
 100fb46:	4660      	mov	r0, ip
 100fb48:	2100      	movs	r1, #0
 100fb4a:	f7ff fcf9 	bl	100f540 <_Balloc>
 100fb4e:	2201      	movs	r2, #1
 100fb50:	2300      	movs	r3, #0
 100fb52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 100fb56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100fb5a:	bf00      	nop

0100fb5c <__ulp>:
 100fb5c:	ee10 2a90 	vmov	r2, s1
 100fb60:	2300      	movs	r3, #0
 100fb62:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 100fb66:	401a      	ands	r2, r3
 100fb68:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 100fb6c:	2b00      	cmp	r3, #0
 100fb6e:	dd04      	ble.n	100fb7a <__ulp+0x1e>
 100fb70:	2000      	movs	r0, #0
 100fb72:	4619      	mov	r1, r3
 100fb74:	ec41 0b10 	vmov	d0, r0, r1
 100fb78:	4770      	bx	lr
 100fb7a:	425b      	negs	r3, r3
 100fb7c:	151b      	asrs	r3, r3, #20
 100fb7e:	2b13      	cmp	r3, #19
 100fb80:	dc07      	bgt.n	100fb92 <__ulp+0x36>
 100fb82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 100fb86:	2000      	movs	r0, #0
 100fb88:	fa42 f103 	asr.w	r1, r2, r3
 100fb8c:	ec41 0b10 	vmov	d0, r0, r1
 100fb90:	4770      	bx	lr
 100fb92:	3b14      	subs	r3, #20
 100fb94:	2100      	movs	r1, #0
 100fb96:	2b1e      	cmp	r3, #30
 100fb98:	bfd6      	itet	le
 100fb9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 100fb9e:	2301      	movgt	r3, #1
 100fba0:	fa22 f303 	lsrle.w	r3, r2, r3
 100fba4:	4618      	mov	r0, r3
 100fba6:	ec41 0b10 	vmov	d0, r0, r1
 100fbaa:	4770      	bx	lr

0100fbac <__b2d>:
 100fbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100fbae:	f100 0614 	add.w	r6, r0, #20
 100fbb2:	6904      	ldr	r4, [r0, #16]
 100fbb4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 100fbb8:	1f27      	subs	r7, r4, #4
 100fbba:	f854 5c04 	ldr.w	r5, [r4, #-4]
 100fbbe:	4628      	mov	r0, r5
 100fbc0:	f7ff fd82 	bl	100f6c8 <__hi0bits>
 100fbc4:	280a      	cmp	r0, #10
 100fbc6:	f1c0 0320 	rsb	r3, r0, #32
 100fbca:	600b      	str	r3, [r1, #0]
 100fbcc:	dd24      	ble.n	100fc18 <__b2d+0x6c>
 100fbce:	42be      	cmp	r6, r7
 100fbd0:	f1a0 000b 	sub.w	r0, r0, #11
 100fbd4:	d219      	bcs.n	100fc0a <__b2d+0x5e>
 100fbd6:	f854 1c08 	ldr.w	r1, [r4, #-8]
 100fbda:	b1c0      	cbz	r0, 100fc0e <__b2d+0x62>
 100fbdc:	f1c0 0720 	rsb	r7, r0, #32
 100fbe0:	4085      	lsls	r5, r0
 100fbe2:	fa21 f307 	lsr.w	r3, r1, r7
 100fbe6:	4081      	lsls	r1, r0
 100fbe8:	431d      	orrs	r5, r3
 100fbea:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 100fbee:	f1a4 0508 	sub.w	r5, r4, #8
 100fbf2:	42ae      	cmp	r6, r5
 100fbf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 100fbf8:	d203      	bcs.n	100fc02 <__b2d+0x56>
 100fbfa:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 100fbfe:	40f8      	lsrs	r0, r7
 100fc00:	4301      	orrs	r1, r0
 100fc02:	460a      	mov	r2, r1
 100fc04:	ec43 2b10 	vmov	d0, r2, r3
 100fc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100fc0a:	4601      	mov	r1, r0
 100fc0c:	b9e8      	cbnz	r0, 100fc4a <__b2d+0x9e>
 100fc0e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 100fc12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 100fc16:	e7f4      	b.n	100fc02 <__b2d+0x56>
 100fc18:	f1c0 0c0b 	rsb	ip, r0, #11
 100fc1c:	42be      	cmp	r6, r7
 100fc1e:	fa25 f10c 	lsr.w	r1, r5, ip
 100fc22:	f100 0015 	add.w	r0, r0, #21
 100fc26:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 100fc2a:	bf38      	it	cc
 100fc2c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 100fc30:	fa05 f000 	lsl.w	r0, r5, r0
 100fc34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 100fc38:	bf2c      	ite	cs
 100fc3a:	2100      	movcs	r1, #0
 100fc3c:	fa21 f10c 	lsrcc.w	r1, r1, ip
 100fc40:	ea40 0201 	orr.w	r2, r0, r1
 100fc44:	ec43 2b10 	vmov	d0, r2, r3
 100fc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100fc4a:	fa05 f000 	lsl.w	r0, r5, r0
 100fc4e:	2100      	movs	r1, #0
 100fc50:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 100fc54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 100fc58:	e7d3      	b.n	100fc02 <__b2d+0x56>
 100fc5a:	bf00      	nop

0100fc5c <__d2b>:
 100fc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100fc60:	4688      	mov	r8, r1
 100fc62:	b083      	sub	sp, #12
 100fc64:	2101      	movs	r1, #1
 100fc66:	ec55 4b10 	vmov	r4, r5, d0
 100fc6a:	4617      	mov	r7, r2
 100fc6c:	f7ff fc68 	bl	100f540 <_Balloc>
 100fc70:	f3c5 560a 	ubfx	r6, r5, #20, #11
 100fc74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 100fc78:	4681      	mov	r9, r0
 100fc7a:	b10e      	cbz	r6, 100fc80 <__d2b+0x24>
 100fc7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 100fc80:	2c00      	cmp	r4, #0
 100fc82:	9301      	str	r3, [sp, #4]
 100fc84:	d029      	beq.n	100fcda <__d2b+0x7e>
 100fc86:	4668      	mov	r0, sp
 100fc88:	9400      	str	r4, [sp, #0]
 100fc8a:	f7ff fd3d 	bl	100f708 <__lo0bits>
 100fc8e:	b9c0      	cbnz	r0, 100fcc2 <__d2b+0x66>
 100fc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 100fc94:	f8c9 2014 	str.w	r2, [r9, #20]
 100fc98:	2b00      	cmp	r3, #0
 100fc9a:	f8c9 3018 	str.w	r3, [r9, #24]
 100fc9e:	bf14      	ite	ne
 100fca0:	2102      	movne	r1, #2
 100fca2:	2101      	moveq	r1, #1
 100fca4:	f8c9 1010 	str.w	r1, [r9, #16]
 100fca8:	b30e      	cbz	r6, 100fcee <__d2b+0x92>
 100fcaa:	f2a6 4633 	subw	r6, r6, #1075	; 0x433
 100fcae:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 100fcb2:	4406      	add	r6, r0
 100fcb4:	4648      	mov	r0, r9
 100fcb6:	f8c8 6000 	str.w	r6, [r8]
 100fcba:	603b      	str	r3, [r7, #0]
 100fcbc:	b003      	add	sp, #12
 100fcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 100fcc2:	9b01      	ldr	r3, [sp, #4]
 100fcc4:	f1c0 0220 	rsb	r2, r0, #32
 100fcc8:	9900      	ldr	r1, [sp, #0]
 100fcca:	fa03 f202 	lsl.w	r2, r3, r2
 100fcce:	40c3      	lsrs	r3, r0
 100fcd0:	430a      	orrs	r2, r1
 100fcd2:	9301      	str	r3, [sp, #4]
 100fcd4:	f8c9 2014 	str.w	r2, [r9, #20]
 100fcd8:	e7de      	b.n	100fc98 <__d2b+0x3c>
 100fcda:	a801      	add	r0, sp, #4
 100fcdc:	f7ff fd14 	bl	100f708 <__lo0bits>
 100fce0:	9b01      	ldr	r3, [sp, #4]
 100fce2:	2101      	movs	r1, #1
 100fce4:	e9c9 1304 	strd	r1, r3, [r9, #16]
 100fce8:	3020      	adds	r0, #32
 100fcea:	2e00      	cmp	r6, #0
 100fcec:	d1dd      	bne.n	100fcaa <__d2b+0x4e>
 100fcee:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 100fcf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 100fcf6:	f8c8 0000 	str.w	r0, [r8]
 100fcfa:	6918      	ldr	r0, [r3, #16]
 100fcfc:	f7ff fce4 	bl	100f6c8 <__hi0bits>
 100fd00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 100fd04:	6038      	str	r0, [r7, #0]
 100fd06:	4648      	mov	r0, r9
 100fd08:	b003      	add	sp, #12
 100fd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 100fd0e:	bf00      	nop

0100fd10 <__ratio>:
 100fd10:	b530      	push	{r4, r5, lr}
 100fd12:	b087      	sub	sp, #28
 100fd14:	460c      	mov	r4, r1
 100fd16:	a904      	add	r1, sp, #16
 100fd18:	4605      	mov	r5, r0
 100fd1a:	f7ff ff47 	bl	100fbac <__b2d>
 100fd1e:	4620      	mov	r0, r4
 100fd20:	a905      	add	r1, sp, #20
 100fd22:	ed8d 0b00 	vstr	d0, [sp]
 100fd26:	f7ff ff41 	bl	100fbac <__b2d>
 100fd2a:	6920      	ldr	r0, [r4, #16]
 100fd2c:	6929      	ldr	r1, [r5, #16]
 100fd2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 100fd32:	1a09      	subs	r1, r1, r0
 100fd34:	1ad3      	subs	r3, r2, r3
 100fd36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 100fd3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 100fd3e:	2b00      	cmp	r3, #0
 100fd40:	ed8d 0b02 	vstr	d0, [sp, #8]
 100fd44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 100fd48:	dd0c      	ble.n	100fd64 <__ratio+0x54>
 100fd4a:	9a01      	ldr	r2, [sp, #4]
 100fd4c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 100fd50:	e9cd 0100 	strd	r0, r1, [sp]
 100fd54:	ed9d 7b00 	vldr	d7, [sp]
 100fd58:	ed9d 6b02 	vldr	d6, [sp, #8]
 100fd5c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 100fd60:	b007      	add	sp, #28
 100fd62:	bd30      	pop	{r4, r5, pc}
 100fd64:	9a03      	ldr	r2, [sp, #12]
 100fd66:	eba2 5503 	sub.w	r5, r2, r3, lsl #20
 100fd6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 100fd6e:	e7f1      	b.n	100fd54 <__ratio+0x44>

0100fd70 <_mprec_log10>:
 100fd70:	2817      	cmp	r0, #23
 100fd72:	dd08      	ble.n	100fd86 <_mprec_log10+0x16>
 100fd74:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 100fd78:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 100fd7c:	3801      	subs	r0, #1
 100fd7e:	ee20 0b07 	vmul.f64	d0, d0, d7
 100fd82:	d1fb      	bne.n	100fd7c <_mprec_log10+0xc>
 100fd84:	4770      	bx	lr
 100fd86:	f641 0348 	movw	r3, #6216	; 0x1848
 100fd8a:	f2c0 1301 	movt	r3, #257	; 0x101
 100fd8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 100fd92:	ed90 0b04 	vldr	d0, [r0, #16]
 100fd96:	4770      	bx	lr

0100fd98 <__copybits>:
 100fd98:	b470      	push	{r4, r5, r6}
 100fd9a:	3901      	subs	r1, #1
 100fd9c:	6914      	ldr	r4, [r2, #16]
 100fd9e:	f102 0314 	add.w	r3, r2, #20
 100fda2:	1149      	asrs	r1, r1, #5
 100fda4:	1c4e      	adds	r6, r1, #1
 100fda6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 100fdaa:	428b      	cmp	r3, r1
 100fdac:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 100fdb0:	d20c      	bcs.n	100fdcc <__copybits+0x34>
 100fdb2:	1f04      	subs	r4, r0, #4
 100fdb4:	f853 5b04 	ldr.w	r5, [r3], #4
 100fdb8:	4299      	cmp	r1, r3
 100fdba:	f844 5f04 	str.w	r5, [r4, #4]!
 100fdbe:	d8f9      	bhi.n	100fdb4 <__copybits+0x1c>
 100fdc0:	1a8b      	subs	r3, r1, r2
 100fdc2:	3b15      	subs	r3, #21
 100fdc4:	f023 0303 	bic.w	r3, r3, #3
 100fdc8:	3304      	adds	r3, #4
 100fdca:	4418      	add	r0, r3
 100fdcc:	4286      	cmp	r6, r0
 100fdce:	d904      	bls.n	100fdda <__copybits+0x42>
 100fdd0:	2300      	movs	r3, #0
 100fdd2:	f840 3b04 	str.w	r3, [r0], #4
 100fdd6:	4286      	cmp	r6, r0
 100fdd8:	d8fb      	bhi.n	100fdd2 <__copybits+0x3a>
 100fdda:	bc70      	pop	{r4, r5, r6}
 100fddc:	4770      	bx	lr
 100fdde:	bf00      	nop

0100fde0 <__any_on>:
 100fde0:	6903      	ldr	r3, [r0, #16]
 100fde2:	114a      	asrs	r2, r1, #5
 100fde4:	b410      	push	{r4}
 100fde6:	4293      	cmp	r3, r2
 100fde8:	f100 0414 	add.w	r4, r0, #20
 100fdec:	bfb8      	it	lt
 100fdee:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 100fdf2:	db02      	blt.n	100fdfa <__any_on+0x1a>
 100fdf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 100fdf8:	dc0e      	bgt.n	100fe18 <__any_on+0x38>
 100fdfa:	429c      	cmp	r4, r3
 100fdfc:	d21b      	bcs.n	100fe36 <__any_on+0x56>
 100fdfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 100fe02:	3b04      	subs	r3, #4
 100fe04:	b118      	cbz	r0, 100fe0e <__any_on+0x2e>
 100fe06:	e012      	b.n	100fe2e <__any_on+0x4e>
 100fe08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 100fe0c:	b97a      	cbnz	r2, 100fe2e <__any_on+0x4e>
 100fe0e:	429c      	cmp	r4, r3
 100fe10:	d3fa      	bcc.n	100fe08 <__any_on+0x28>
 100fe12:	f85d 4b04 	ldr.w	r4, [sp], #4
 100fe16:	4770      	bx	lr
 100fe18:	f011 011f 	ands.w	r1, r1, #31
 100fe1c:	d0ed      	beq.n	100fdfa <__any_on+0x1a>
 100fe1e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 100fe22:	fa20 f201 	lsr.w	r2, r0, r1
 100fe26:	fa02 f101 	lsl.w	r1, r2, r1
 100fe2a:	4288      	cmp	r0, r1
 100fe2c:	d0e5      	beq.n	100fdfa <__any_on+0x1a>
 100fe2e:	2001      	movs	r0, #1
 100fe30:	f85d 4b04 	ldr.w	r4, [sp], #4
 100fe34:	4770      	bx	lr
 100fe36:	2000      	movs	r0, #0
 100fe38:	e7eb      	b.n	100fe12 <__any_on+0x32>
 100fe3a:	bf00      	nop

0100fe3c <cleanup_glue>:
 100fe3c:	b538      	push	{r3, r4, r5, lr}
 100fe3e:	460c      	mov	r4, r1
 100fe40:	6809      	ldr	r1, [r1, #0]
 100fe42:	4605      	mov	r5, r0
 100fe44:	b109      	cbz	r1, 100fe4a <cleanup_glue+0xe>
 100fe46:	f7ff fff9 	bl	100fe3c <cleanup_glue>
 100fe4a:	4621      	mov	r1, r4
 100fe4c:	4628      	mov	r0, r5
 100fe4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 100fe52:	f7ff b9bd 	b.w	100f1d0 <_free_r>
 100fe56:	bf00      	nop

0100fe58 <_reclaim_reent>:
 100fe58:	f243 4300 	movw	r3, #13312	; 0x3400
 100fe5c:	f2c0 1301 	movt	r3, #257	; 0x101
 100fe60:	681b      	ldr	r3, [r3, #0]
 100fe62:	4283      	cmp	r3, r0
 100fe64:	d03b      	beq.n	100fede <_reclaim_reent+0x86>
 100fe66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 100fe68:	b570      	push	{r4, r5, r6, lr}
 100fe6a:	4605      	mov	r5, r0
 100fe6c:	b18b      	cbz	r3, 100fe92 <_reclaim_reent+0x3a>
 100fe6e:	2600      	movs	r6, #0
 100fe70:	5999      	ldr	r1, [r3, r6]
 100fe72:	b139      	cbz	r1, 100fe84 <_reclaim_reent+0x2c>
 100fe74:	680c      	ldr	r4, [r1, #0]
 100fe76:	4628      	mov	r0, r5
 100fe78:	f7ff f9aa 	bl	100f1d0 <_free_r>
 100fe7c:	4621      	mov	r1, r4
 100fe7e:	2c00      	cmp	r4, #0
 100fe80:	d1f8      	bne.n	100fe74 <_reclaim_reent+0x1c>
 100fe82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 100fe84:	3604      	adds	r6, #4
 100fe86:	2e80      	cmp	r6, #128	; 0x80
 100fe88:	d1f2      	bne.n	100fe70 <_reclaim_reent+0x18>
 100fe8a:	4619      	mov	r1, r3
 100fe8c:	4628      	mov	r0, r5
 100fe8e:	f7ff f99f 	bl	100f1d0 <_free_r>
 100fe92:	6c29      	ldr	r1, [r5, #64]	; 0x40
 100fe94:	b111      	cbz	r1, 100fe9c <_reclaim_reent+0x44>
 100fe96:	4628      	mov	r0, r5
 100fe98:	f7ff f99a 	bl	100f1d0 <_free_r>
 100fe9c:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 100fea0:	b151      	cbz	r1, 100feb8 <_reclaim_reent+0x60>
 100fea2:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 100fea6:	42b1      	cmp	r1, r6
 100fea8:	d006      	beq.n	100feb8 <_reclaim_reent+0x60>
 100feaa:	680c      	ldr	r4, [r1, #0]
 100feac:	4628      	mov	r0, r5
 100feae:	f7ff f98f 	bl	100f1d0 <_free_r>
 100feb2:	42a6      	cmp	r6, r4
 100feb4:	4621      	mov	r1, r4
 100feb6:	d1f8      	bne.n	100feaa <_reclaim_reent+0x52>
 100feb8:	6d69      	ldr	r1, [r5, #84]	; 0x54
 100feba:	b111      	cbz	r1, 100fec2 <_reclaim_reent+0x6a>
 100febc:	4628      	mov	r0, r5
 100febe:	f7ff f987 	bl	100f1d0 <_free_r>
 100fec2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 100fec4:	b153      	cbz	r3, 100fedc <_reclaim_reent+0x84>
 100fec6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 100fec8:	4628      	mov	r0, r5
 100feca:	4798      	blx	r3
 100fecc:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 100fed0:	b121      	cbz	r1, 100fedc <_reclaim_reent+0x84>
 100fed2:	4628      	mov	r0, r5
 100fed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100fed8:	f7ff bfb0 	b.w	100fe3c <cleanup_glue>
 100fedc:	bd70      	pop	{r4, r5, r6, pc}
 100fede:	4770      	bx	lr

0100fee0 <frexp>:
 100fee0:	b430      	push	{r4, r5}
 100fee2:	b082      	sub	sp, #8
 100fee4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100fee8:	f6c7 74ef 	movt	r4, #32751	; 0x7fef
 100feec:	ed8d 0b00 	vstr	d0, [sp]
 100fef0:	2500      	movs	r5, #0
 100fef2:	9b01      	ldr	r3, [sp, #4]
 100fef4:	6005      	str	r5, [r0, #0]
 100fef6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 100fefa:	42a1      	cmp	r1, r4
 100fefc:	dc24      	bgt.n	100ff48 <frexp+0x68>
 100fefe:	9c00      	ldr	r4, [sp, #0]
 100ff00:	ea51 0204 	orrs.w	r2, r1, r4
 100ff04:	d020      	beq.n	100ff48 <frexp+0x68>
 100ff06:	462c      	mov	r4, r5
 100ff08:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 100ff0c:	401c      	ands	r4, r3
 100ff0e:	b954      	cbnz	r4, 100ff26 <frexp+0x46>
 100ff10:	ed9f 7b11 	vldr	d7, [pc, #68]	; 100ff58 <frexp+0x78>
 100ff14:	f06f 0535 	mvn.w	r5, #53	; 0x35
 100ff18:	ee20 7b07 	vmul.f64	d7, d0, d7
 100ff1c:	ed8d 7b00 	vstr	d7, [sp]
 100ff20:	9b01      	ldr	r3, [sp, #4]
 100ff22:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 100ff26:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
 100ff2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 100ff2e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 100ff32:	1509      	asrs	r1, r1, #20
 100ff34:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 100ff38:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 100ff3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 100ff40:	4429      	add	r1, r5
 100ff42:	e9cd 2300 	strd	r2, r3, [sp]
 100ff46:	6001      	str	r1, [r0, #0]
 100ff48:	ed9d 0b00 	vldr	d0, [sp]
 100ff4c:	b002      	add	sp, #8
 100ff4e:	bc30      	pop	{r4, r5}
 100ff50:	4770      	bx	lr
 100ff52:	bf00      	nop
 100ff54:	f3af 8000 	nop.w
 100ff58:	00000000 	.word	0x00000000
 100ff5c:	43500000 	.word	0x43500000

0100ff60 <__ssprint_r>:
 100ff60:	6893      	ldr	r3, [r2, #8]
 100ff62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100ff66:	4692      	mov	sl, r2
 100ff68:	b083      	sub	sp, #12
 100ff6a:	2b00      	cmp	r3, #0
 100ff6c:	d06e      	beq.n	101004c <__ssprint_r+0xec>
 100ff6e:	6817      	ldr	r7, [r2, #0]
 100ff70:	4681      	mov	r9, r0
 100ff72:	460c      	mov	r4, r1
 100ff74:	6808      	ldr	r0, [r1, #0]
 100ff76:	3708      	adds	r7, #8
 100ff78:	688d      	ldr	r5, [r1, #8]
 100ff7a:	e042      	b.n	1010002 <__ssprint_r+0xa2>
 100ff7c:	89a3      	ldrh	r3, [r4, #12]
 100ff7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 100ff82:	d02d      	beq.n	100ffe0 <__ssprint_r+0x80>
 100ff84:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 100ff88:	1a45      	subs	r5, r0, r1
 100ff8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 100ff8e:	eb05 0806 	add.w	r8, r5, r6
 100ff92:	f108 0801 	add.w	r8, r8, #1
 100ff96:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 100ff9a:	1052      	asrs	r2, r2, #1
 100ff9c:	4590      	cmp	r8, r2
 100ff9e:	bf94      	ite	ls
 100ffa0:	4690      	movls	r8, r2
 100ffa2:	4642      	movhi	r2, r8
 100ffa4:	055b      	lsls	r3, r3, #21
 100ffa6:	d538      	bpl.n	101001a <__ssprint_r+0xba>
 100ffa8:	4611      	mov	r1, r2
 100ffaa:	4648      	mov	r0, r9
 100ffac:	f7fa fbe4 	bl	100a778 <_malloc_r>
 100ffb0:	2800      	cmp	r0, #0
 100ffb2:	d03c      	beq.n	101002e <__ssprint_r+0xce>
 100ffb4:	462a      	mov	r2, r5
 100ffb6:	6921      	ldr	r1, [r4, #16]
 100ffb8:	9001      	str	r0, [sp, #4]
 100ffba:	f7fb e902 	blx	100b1c0 <memcpy>
 100ffbe:	89a2      	ldrh	r2, [r4, #12]
 100ffc0:	9b01      	ldr	r3, [sp, #4]
 100ffc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 100ffc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 100ffca:	81a2      	strh	r2, [r4, #12]
 100ffcc:	1958      	adds	r0, r3, r5
 100ffce:	f8c4 8014 	str.w	r8, [r4, #20]
 100ffd2:	eba8 0505 	sub.w	r5, r8, r5
 100ffd6:	46b0      	mov	r8, r6
 100ffd8:	60a5      	str	r5, [r4, #8]
 100ffda:	4635      	mov	r5, r6
 100ffdc:	6123      	str	r3, [r4, #16]
 100ffde:	6020      	str	r0, [r4, #0]
 100ffe0:	4642      	mov	r2, r8
 100ffe2:	4659      	mov	r1, fp
 100ffe4:	f000 ffe8 	bl	1010fb8 <memmove>
 100ffe8:	f8da 2008 	ldr.w	r2, [sl, #8]
 100ffec:	68a3      	ldr	r3, [r4, #8]
 100ffee:	6820      	ldr	r0, [r4, #0]
 100fff0:	1b96      	subs	r6, r2, r6
 100fff2:	1b5d      	subs	r5, r3, r5
 100fff4:	60a5      	str	r5, [r4, #8]
 100fff6:	4440      	add	r0, r8
 100fff8:	6020      	str	r0, [r4, #0]
 100fffa:	f8ca 6008 	str.w	r6, [sl, #8]
 100fffe:	b32e      	cbz	r6, 101004c <__ssprint_r+0xec>
 1010000:	3708      	adds	r7, #8
 1010002:	f857 6c04 	ldr.w	r6, [r7, #-4]
 1010006:	46a8      	mov	r8, r5
 1010008:	f857 bc08 	ldr.w	fp, [r7, #-8]
 101000c:	2e00      	cmp	r6, #0
 101000e:	d0f7      	beq.n	1010000 <__ssprint_r+0xa0>
 1010010:	42ae      	cmp	r6, r5
 1010012:	d2b3      	bcs.n	100ff7c <__ssprint_r+0x1c>
 1010014:	4635      	mov	r5, r6
 1010016:	46b0      	mov	r8, r6
 1010018:	e7e2      	b.n	100ffe0 <__ssprint_r+0x80>
 101001a:	4648      	mov	r0, r9
 101001c:	f001 f834 	bl	1011088 <_realloc_r>
 1010020:	4603      	mov	r3, r0
 1010022:	2800      	cmp	r0, #0
 1010024:	d1d2      	bne.n	100ffcc <__ssprint_r+0x6c>
 1010026:	6921      	ldr	r1, [r4, #16]
 1010028:	4648      	mov	r0, r9
 101002a:	f7ff f8d1 	bl	100f1d0 <_free_r>
 101002e:	230c      	movs	r3, #12
 1010030:	f8c9 3000 	str.w	r3, [r9]
 1010034:	89a3      	ldrh	r3, [r4, #12]
 1010036:	f04f 30ff 	mov.w	r0, #4294967295
 101003a:	2200      	movs	r2, #0
 101003c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1010040:	81a3      	strh	r3, [r4, #12]
 1010042:	e9ca 2201 	strd	r2, r2, [sl, #4]
 1010046:	b003      	add	sp, #12
 1010048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101004c:	2000      	movs	r0, #0
 101004e:	f8ca 0004 	str.w	r0, [sl, #4]
 1010052:	b003      	add	sp, #12
 1010054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01010058 <_svfiprintf_r>:
 1010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101005c:	b0c7      	sub	sp, #284	; 0x11c
 101005e:	460c      	mov	r4, r1
 1010060:	4683      	mov	fp, r0
 1010062:	9109      	str	r1, [sp, #36]	; 0x24
 1010064:	4615      	mov	r5, r2
 1010066:	a816      	add	r0, sp, #88	; 0x58
 1010068:	2208      	movs	r2, #8
 101006a:	2100      	movs	r1, #0
 101006c:	9307      	str	r3, [sp, #28]
 101006e:	f7fb fb97 	bl	100b7a0 <memset>
 1010072:	89a3      	ldrh	r3, [r4, #12]
 1010074:	061b      	lsls	r3, r3, #24
 1010076:	d503      	bpl.n	1010080 <_svfiprintf_r+0x28>
 1010078:	6923      	ldr	r3, [r4, #16]
 101007a:	2b00      	cmp	r3, #0
 101007c:	f000 853f 	beq.w	1010afe <_svfiprintf_r+0xaa6>
 1010080:	f243 4900 	movw	r9, #13312	; 0x3400
 1010084:	f2c0 1901 	movt	r9, #257	; 0x101
 1010088:	46aa      	mov	sl, r5
 101008a:	2300      	movs	r3, #0
 101008c:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1010090:	930c      	str	r3, [sp, #48]	; 0x30
 1010092:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 1010096:	930f      	str	r3, [sp, #60]	; 0x3c
 1010098:	9304      	str	r3, [sp, #16]
 101009a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 101009e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 10100a2:	f643 0630 	movw	r6, #14384	; 0x3830
 10100a6:	f2c0 1601 	movt	r6, #257	; 0x101
 10100aa:	4654      	mov	r4, sl
 10100ac:	f8d9 3000 	ldr.w	r3, [r9]
 10100b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 10100b2:	2b00      	cmp	r3, #0
 10100b4:	bf08      	it	eq
 10100b6:	4633      	moveq	r3, r6
 10100b8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 10100bc:	f7fa fa9a 	bl	100a5f4 <__locale_mb_cur_max>
 10100c0:	ab16      	add	r3, sp, #88	; 0x58
 10100c2:	4622      	mov	r2, r4
 10100c4:	9300      	str	r3, [sp, #0]
 10100c6:	a914      	add	r1, sp, #80	; 0x50
 10100c8:	4603      	mov	r3, r0
 10100ca:	4658      	mov	r0, fp
 10100cc:	47a8      	blx	r5
 10100ce:	2800      	cmp	r0, #0
 10100d0:	4603      	mov	r3, r0
 10100d2:	f000 8086 	beq.w	10101e2 <_svfiprintf_r+0x18a>
 10100d6:	db7c      	blt.n	10101d2 <_svfiprintf_r+0x17a>
 10100d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 10100da:	2a25      	cmp	r2, #37	; 0x25
 10100dc:	d001      	beq.n	10100e2 <_svfiprintf_r+0x8a>
 10100de:	441c      	add	r4, r3
 10100e0:	e7e4      	b.n	10100ac <_svfiprintf_r+0x54>
 10100e2:	ebb4 060a 	subs.w	r6, r4, sl
 10100e6:	4605      	mov	r5, r0
 10100e8:	d17f      	bne.n	10101ea <_svfiprintf_r+0x192>
 10100ea:	2300      	movs	r3, #0
 10100ec:	9306      	str	r3, [sp, #24]
 10100ee:	461e      	mov	r6, r3
 10100f0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10100f4:	7863      	ldrb	r3, [r4, #1]
 10100f6:	f104 0a01 	add.w	sl, r4, #1
 10100fa:	f04f 32ff 	mov.w	r2, #4294967295
 10100fe:	9203      	str	r2, [sp, #12]
 1010100:	f10a 0a01 	add.w	sl, sl, #1
 1010104:	f1a3 0220 	sub.w	r2, r3, #32
 1010108:	2a5a      	cmp	r2, #90	; 0x5a
 101010a:	f200 8322 	bhi.w	1010752 <_svfiprintf_r+0x6fa>
 101010e:	e8df f012 	tbh	[pc, r2, lsl #1]
 1010112:	01d2      	.short	0x01d2
 1010114:	03200320 	.word	0x03200320
 1010118:	032001cd 	.word	0x032001cd
 101011c:	03200320 	.word	0x03200320
 1010120:	032001af 	.word	0x032001af
 1010124:	01a00320 	.word	0x01a00320
 1010128:	0320025e 	.word	0x0320025e
 101012c:	01f4020f 	.word	0x01f4020f
 1010130:	01ef0320 	.word	0x01ef0320
 1010134:	015e015e 	.word	0x015e015e
 1010138:	015e015e 	.word	0x015e015e
 101013c:	015e015e 	.word	0x015e015e
 1010140:	015e015e 	.word	0x015e015e
 1010144:	0320015e 	.word	0x0320015e
 1010148:	03200320 	.word	0x03200320
 101014c:	03200320 	.word	0x03200320
 1010150:	03200320 	.word	0x03200320
 1010154:	03200320 	.word	0x03200320
 1010158:	0220016c 	.word	0x0220016c
 101015c:	03200320 	.word	0x03200320
 1010160:	03200320 	.word	0x03200320
 1010164:	03200320 	.word	0x03200320
 1010168:	03200320 	.word	0x03200320
 101016c:	03200320 	.word	0x03200320
 1010170:	03200214 	.word	0x03200214
 1010174:	03200320 	.word	0x03200320
 1010178:	032002c9 	.word	0x032002c9
 101017c:	032002bc 	.word	0x032002bc
 1010180:	02900320 	.word	0x02900320
 1010184:	03200320 	.word	0x03200320
 1010188:	03200320 	.word	0x03200320
 101018c:	03200320 	.word	0x03200320
 1010190:	03200320 	.word	0x03200320
 1010194:	03200320 	.word	0x03200320
 1010198:	0276016c 	.word	0x0276016c
 101019c:	03200320 	.word	0x03200320
 10101a0:	02fe0320 	.word	0x02fe0320
 10101a4:	005b0276 	.word	0x005b0276
 10101a8:	02f10320 	.word	0x02f10320
 10101ac:	030b0320 	.word	0x030b0320
 10101b0:	0264018f 	.word	0x0264018f
 10101b4:	0320005b 	.word	0x0320005b
 10101b8:	005d02c9 	.word	0x005d02c9
 10101bc:	032001dd 	.word	0x032001dd
 10101c0:	009b0320 	.word	0x009b0320
 10101c4:	005d0320 	.word	0x005d0320
 10101c8:	f046 0620 	orr.w	r6, r6, #32
 10101cc:	f89a 3000 	ldrb.w	r3, [sl]
 10101d0:	e796      	b.n	1010100 <_svfiprintf_r+0xa8>
 10101d2:	2208      	movs	r2, #8
 10101d4:	2100      	movs	r1, #0
 10101d6:	a816      	add	r0, sp, #88	; 0x58
 10101d8:	f7fb fae2 	bl	100b7a0 <memset>
 10101dc:	2301      	movs	r3, #1
 10101de:	441c      	add	r4, r3
 10101e0:	e764      	b.n	10100ac <_svfiprintf_r+0x54>
 10101e2:	ebb4 060a 	subs.w	r6, r4, sl
 10101e6:	4605      	mov	r5, r0
 10101e8:	d012      	beq.n	1010210 <_svfiprintf_r+0x1b8>
 10101ea:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 10101ee:	e9c8 a600 	strd	sl, r6, [r8]
 10101f2:	3301      	adds	r3, #1
 10101f4:	4432      	add	r2, r6
 10101f6:	2b07      	cmp	r3, #7
 10101f8:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 10101fc:	bfd8      	it	le
 10101fe:	f108 0808 	addle.w	r8, r8, #8
 1010202:	dc17      	bgt.n	1010234 <_svfiprintf_r+0x1dc>
 1010204:	9b04      	ldr	r3, [sp, #16]
 1010206:	4433      	add	r3, r6
 1010208:	9304      	str	r3, [sp, #16]
 101020a:	2d00      	cmp	r5, #0
 101020c:	f47f af6d 	bne.w	10100ea <_svfiprintf_r+0x92>
 1010210:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 1010212:	2b00      	cmp	r3, #0
 1010214:	f040 8586 	bne.w	1010d24 <_svfiprintf_r+0xccc>
 1010218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101021a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 101021e:	f013 0f40 	tst.w	r3, #64	; 0x40
 1010222:	9b04      	ldr	r3, [sp, #16]
 1010224:	bf18      	it	ne
 1010226:	f04f 33ff 	movne.w	r3, #4294967295
 101022a:	9304      	str	r3, [sp, #16]
 101022c:	9804      	ldr	r0, [sp, #16]
 101022e:	b047      	add	sp, #284	; 0x11c
 1010230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1010234:	aa1a      	add	r2, sp, #104	; 0x68
 1010236:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010238:	4658      	mov	r0, fp
 101023a:	f7ff fe91 	bl	100ff60 <__ssprint_r>
 101023e:	2800      	cmp	r0, #0
 1010240:	d1ea      	bne.n	1010218 <_svfiprintf_r+0x1c0>
 1010242:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1010246:	e7dd      	b.n	1010204 <_svfiprintf_r+0x1ac>
 1010248:	06b4      	lsls	r4, r6, #26
 101024a:	f243 0204 	movw	r2, #12292	; 0x3004
 101024e:	f2c0 1201 	movt	r2, #257	; 0x101
 1010252:	920c      	str	r2, [sp, #48]	; 0x30
 1010254:	f140 81f5 	bpl.w	1010642 <_svfiprintf_r+0x5ea>
 1010258:	9d07      	ldr	r5, [sp, #28]
 101025a:	3507      	adds	r5, #7
 101025c:	f025 0207 	bic.w	r2, r5, #7
 1010260:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1010264:	9207      	str	r2, [sp, #28]
 1010266:	ea54 0205 	orrs.w	r2, r4, r5
 101026a:	f006 0201 	and.w	r2, r6, #1
 101026e:	bf08      	it	eq
 1010270:	2200      	moveq	r2, #0
 1010272:	2a00      	cmp	r2, #0
 1010274:	f040 8201 	bne.w	101067a <_svfiprintf_r+0x622>
 1010278:	f426 6780 	bic.w	r7, r6, #1024	; 0x400
 101027c:	2302      	movs	r3, #2
 101027e:	9903      	ldr	r1, [sp, #12]
 1010280:	2200      	movs	r2, #0
 1010282:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1010286:	1c4a      	adds	r2, r1, #1
 1010288:	f000 8182 	beq.w	1010590 <_svfiprintf_r+0x538>
 101028c:	ea54 0205 	orrs.w	r2, r4, r5
 1010290:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 1010294:	bf14      	ite	ne
 1010296:	2201      	movne	r2, #1
 1010298:	2200      	moveq	r2, #0
 101029a:	2900      	cmp	r1, #0
 101029c:	bf18      	it	ne
 101029e:	2201      	movne	r2, #1
 10102a0:	2a00      	cmp	r2, #0
 10102a2:	f040 8417 	bne.w	1010ad4 <_svfiprintf_r+0xa7c>
 10102a6:	2b00      	cmp	r3, #0
 10102a8:	f040 83f0 	bne.w	1010a8c <_svfiprintf_r+0xa34>
 10102ac:	f017 0201 	ands.w	r2, r7, #1
 10102b0:	9303      	str	r3, [sp, #12]
 10102b2:	9205      	str	r2, [sp, #20]
 10102b4:	bf04      	itt	eq
 10102b6:	ab46      	addeq	r3, sp, #280	; 0x118
 10102b8:	930b      	streq	r3, [sp, #44]	; 0x2c
 10102ba:	d005      	beq.n	10102c8 <_svfiprintf_r+0x270>
 10102bc:	2330      	movs	r3, #48	; 0x30
 10102be:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 10102c2:	f20d 1317 	addw	r3, sp, #279	; 0x117
 10102c6:	930b      	str	r3, [sp, #44]	; 0x2c
 10102c8:	9b05      	ldr	r3, [sp, #20]
 10102ca:	9a03      	ldr	r2, [sp, #12]
 10102cc:	4293      	cmp	r3, r2
 10102ce:	bfb8      	it	lt
 10102d0:	4613      	movlt	r3, r2
 10102d2:	9302      	str	r3, [sp, #8]
 10102d4:	2300      	movs	r3, #0
 10102d6:	9308      	str	r3, [sp, #32]
 10102d8:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 10102dc:	b113      	cbz	r3, 10102e4 <_svfiprintf_r+0x28c>
 10102de:	9b02      	ldr	r3, [sp, #8]
 10102e0:	3301      	adds	r3, #1
 10102e2:	9302      	str	r3, [sp, #8]
 10102e4:	f016 0302 	ands.w	r3, r6, #2
 10102e8:	bf1e      	ittt	ne
 10102ea:	9a02      	ldrne	r2, [sp, #8]
 10102ec:	3202      	addne	r2, #2
 10102ee:	9202      	strne	r2, [sp, #8]
 10102f0:	f016 0084 	ands.w	r0, r6, #132	; 0x84
 10102f4:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 10102f8:	900a      	str	r0, [sp, #40]	; 0x28
 10102fa:	d105      	bne.n	1010308 <_svfiprintf_r+0x2b0>
 10102fc:	9806      	ldr	r0, [sp, #24]
 10102fe:	9c02      	ldr	r4, [sp, #8]
 1010300:	1b04      	subs	r4, r0, r4
 1010302:	2c00      	cmp	r4, #0
 1010304:	f300 8326 	bgt.w	1010954 <_svfiprintf_r+0x8fc>
 1010308:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 101030c:	1c48      	adds	r0, r1, #1
 101030e:	f108 0708 	add.w	r7, r8, #8
 1010312:	b1ac      	cbz	r4, 1010340 <_svfiprintf_r+0x2e8>
 1010314:	2807      	cmp	r0, #7
 1010316:	f10d 044b 	add.w	r4, sp, #75	; 0x4b
 101031a:	f102 0201 	add.w	r2, r2, #1
 101031e:	f8c8 4000 	str.w	r4, [r8]
 1010322:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 1010326:	f04f 0401 	mov.w	r4, #1
 101032a:	f8c8 4004 	str.w	r4, [r8, #4]
 101032e:	f300 8355 	bgt.w	10109dc <_svfiprintf_r+0x984>
 1010332:	1c8d      	adds	r5, r1, #2
 1010334:	f108 0410 	add.w	r4, r8, #16
 1010338:	4601      	mov	r1, r0
 101033a:	46b8      	mov	r8, r7
 101033c:	4628      	mov	r0, r5
 101033e:	4627      	mov	r7, r4
 1010340:	b18b      	cbz	r3, 1010366 <_svfiprintf_r+0x30e>
 1010342:	2807      	cmp	r0, #7
 1010344:	ab13      	add	r3, sp, #76	; 0x4c
 1010346:	f102 0202 	add.w	r2, r2, #2
 101034a:	f8c8 3000 	str.w	r3, [r8]
 101034e:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 1010352:	f04f 0302 	mov.w	r3, #2
 1010356:	f8c8 3004 	str.w	r3, [r8, #4]
 101035a:	f300 834f 	bgt.w	10109fc <_svfiprintf_r+0x9a4>
 101035e:	4601      	mov	r1, r0
 1010360:	46b8      	mov	r8, r7
 1010362:	3001      	adds	r0, #1
 1010364:	3708      	adds	r7, #8
 1010366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1010368:	2b80      	cmp	r3, #128	; 0x80
 101036a:	f000 825f 	beq.w	101082c <_svfiprintf_r+0x7d4>
 101036e:	9b03      	ldr	r3, [sp, #12]
 1010370:	9c05      	ldr	r4, [sp, #20]
 1010372:	1b1c      	subs	r4, r3, r4
 1010374:	2c00      	cmp	r4, #0
 1010376:	f300 829c 	bgt.w	10108b2 <_svfiprintf_r+0x85a>
 101037a:	9b05      	ldr	r3, [sp, #20]
 101037c:	2807      	cmp	r0, #7
 101037e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1010380:	441a      	add	r2, r3
 1010382:	901b      	str	r0, [sp, #108]	; 0x6c
 1010384:	921c      	str	r2, [sp, #112]	; 0x70
 1010386:	f8c8 1000 	str.w	r1, [r8]
 101038a:	f8c8 3004 	str.w	r3, [r8, #4]
 101038e:	f300 82c7 	bgt.w	1010920 <_svfiprintf_r+0x8c8>
 1010392:	0773      	lsls	r3, r6, #29
 1010394:	d505      	bpl.n	10103a2 <_svfiprintf_r+0x34a>
 1010396:	9b06      	ldr	r3, [sp, #24]
 1010398:	9902      	ldr	r1, [sp, #8]
 101039a:	1a5c      	subs	r4, r3, r1
 101039c:	2c00      	cmp	r4, #0
 101039e:	f300 833b 	bgt.w	1010a18 <_svfiprintf_r+0x9c0>
 10103a2:	9b04      	ldr	r3, [sp, #16]
 10103a4:	9906      	ldr	r1, [sp, #24]
 10103a6:	9802      	ldr	r0, [sp, #8]
 10103a8:	4281      	cmp	r1, r0
 10103aa:	bfac      	ite	ge
 10103ac:	185b      	addge	r3, r3, r1
 10103ae:	181b      	addlt	r3, r3, r0
 10103b0:	9304      	str	r3, [sp, #16]
 10103b2:	2a00      	cmp	r2, #0
 10103b4:	f040 82bd 	bne.w	1010932 <_svfiprintf_r+0x8da>
 10103b8:	2300      	movs	r3, #0
 10103ba:	931b      	str	r3, [sp, #108]	; 0x6c
 10103bc:	9b08      	ldr	r3, [sp, #32]
 10103be:	b11b      	cbz	r3, 10103c8 <_svfiprintf_r+0x370>
 10103c0:	9908      	ldr	r1, [sp, #32]
 10103c2:	4658      	mov	r0, fp
 10103c4:	f7fe ff04 	bl	100f1d0 <_free_r>
 10103c8:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10103cc:	e669      	b.n	10100a2 <_svfiprintf_r+0x4a>
 10103ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10103d2:	2100      	movs	r1, #0
 10103d4:	f81a 3b01 	ldrb.w	r3, [sl], #1
 10103d8:	200a      	movs	r0, #10
 10103da:	fb00 2101 	mla	r1, r0, r1, r2
 10103de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10103e2:	2a09      	cmp	r2, #9
 10103e4:	d9f6      	bls.n	10103d4 <_svfiprintf_r+0x37c>
 10103e6:	9106      	str	r1, [sp, #24]
 10103e8:	e68c      	b.n	1010104 <_svfiprintf_r+0xac>
 10103ea:	9a07      	ldr	r2, [sp, #28]
 10103ec:	2b43      	cmp	r3, #67	; 0x43
 10103ee:	f102 0404 	add.w	r4, r2, #4
 10103f2:	d002      	beq.n	10103fa <_svfiprintf_r+0x3a2>
 10103f4:	06f7      	lsls	r7, r6, #27
 10103f6:	f140 8379 	bpl.w	1010aec <_svfiprintf_r+0xa94>
 10103fa:	2208      	movs	r2, #8
 10103fc:	2100      	movs	r1, #0
 10103fe:	a818      	add	r0, sp, #96	; 0x60
 1010400:	ad2d      	add	r5, sp, #180	; 0xb4
 1010402:	f7fb f9cd 	bl	100b7a0 <memset>
 1010406:	9a07      	ldr	r2, [sp, #28]
 1010408:	ab18      	add	r3, sp, #96	; 0x60
 101040a:	4629      	mov	r1, r5
 101040c:	4658      	mov	r0, fp
 101040e:	6812      	ldr	r2, [r2, #0]
 1010410:	f7fd fd5e 	bl	100ded0 <_wcrtomb_r>
 1010414:	1c43      	adds	r3, r0, #1
 1010416:	9005      	str	r0, [sp, #20]
 1010418:	f000 84bf 	beq.w	1010d9a <_svfiprintf_r+0xd42>
 101041c:	9b05      	ldr	r3, [sp, #20]
 101041e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010422:	9302      	str	r3, [sp, #8]
 1010424:	2300      	movs	r3, #0
 1010426:	9407      	str	r4, [sp, #28]
 1010428:	950b      	str	r5, [sp, #44]	; 0x2c
 101042a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 101042e:	e19d      	b.n	101076c <_svfiprintf_r+0x714>
 1010430:	06b2      	lsls	r2, r6, #26
 1010432:	f100 81d0 	bmi.w	10107d6 <_svfiprintf_r+0x77e>
 1010436:	9a07      	ldr	r2, [sp, #28]
 1010438:	06f3      	lsls	r3, r6, #27
 101043a:	f852 4b04 	ldr.w	r4, [r2], #4
 101043e:	f100 84c3 	bmi.w	1010dc8 <_svfiprintf_r+0xd70>
 1010442:	0677      	lsls	r7, r6, #25
 1010444:	f140 8436 	bpl.w	1010cb4 <_svfiprintf_r+0xc5c>
 1010448:	4633      	mov	r3, r6
 101044a:	9207      	str	r2, [sp, #28]
 101044c:	b2a4      	uxth	r4, r4
 101044e:	2500      	movs	r5, #0
 1010450:	e1c9      	b.n	10107e6 <_svfiprintf_r+0x78e>
 1010452:	9a07      	ldr	r2, [sp, #28]
 1010454:	f89a 3000 	ldrb.w	r3, [sl]
 1010458:	f852 1b04 	ldr.w	r1, [r2], #4
 101045c:	2900      	cmp	r1, #0
 101045e:	9106      	str	r1, [sp, #24]
 1010460:	bfa8      	it	ge
 1010462:	9207      	strge	r2, [sp, #28]
 1010464:	f6bf ae4c 	bge.w	1010100 <_svfiprintf_r+0xa8>
 1010468:	4249      	negs	r1, r1
 101046a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 101046e:	e061      	b.n	1010534 <_svfiprintf_r+0x4dc>
 1010470:	4658      	mov	r0, fp
 1010472:	f7fe fff3 	bl	100f45c <_localeconv_r>
 1010476:	6843      	ldr	r3, [r0, #4]
 1010478:	4618      	mov	r0, r3
 101047a:	930f      	str	r3, [sp, #60]	; 0x3c
 101047c:	f7fb fd40 	bl	100bf00 <strlen>
 1010480:	4604      	mov	r4, r0
 1010482:	900e      	str	r0, [sp, #56]	; 0x38
 1010484:	4658      	mov	r0, fp
 1010486:	f7fe ffe9 	bl	100f45c <_localeconv_r>
 101048a:	6883      	ldr	r3, [r0, #8]
 101048c:	2c00      	cmp	r4, #0
 101048e:	bf18      	it	ne
 1010490:	2b00      	cmpne	r3, #0
 1010492:	930d      	str	r3, [sp, #52]	; 0x34
 1010494:	f43f ae9a 	beq.w	10101cc <_svfiprintf_r+0x174>
 1010498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 101049a:	781a      	ldrb	r2, [r3, #0]
 101049c:	f89a 3000 	ldrb.w	r3, [sl]
 10104a0:	2a00      	cmp	r2, #0
 10104a2:	f43f ae2d 	beq.w	1010100 <_svfiprintf_r+0xa8>
 10104a6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 10104aa:	e629      	b.n	1010100 <_svfiprintf_r+0xa8>
 10104ac:	f046 0601 	orr.w	r6, r6, #1
 10104b0:	f89a 3000 	ldrb.w	r3, [sl]
 10104b4:	e624      	b.n	1010100 <_svfiprintf_r+0xa8>
 10104b6:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 10104ba:	f89a 3000 	ldrb.w	r3, [sl]
 10104be:	2a00      	cmp	r2, #0
 10104c0:	f47f ae1e 	bne.w	1010100 <_svfiprintf_r+0xa8>
 10104c4:	2220      	movs	r2, #32
 10104c6:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10104ca:	e619      	b.n	1010100 <_svfiprintf_r+0xa8>
 10104cc:	06b0      	lsls	r0, r6, #26
 10104ce:	f100 8178 	bmi.w	10107c2 <_svfiprintf_r+0x76a>
 10104d2:	9a07      	ldr	r2, [sp, #28]
 10104d4:	06f1      	lsls	r1, r6, #27
 10104d6:	f852 4b04 	ldr.w	r4, [r2], #4
 10104da:	f100 8478 	bmi.w	1010dce <_svfiprintf_r+0xd76>
 10104de:	0673      	lsls	r3, r6, #25
 10104e0:	9207      	str	r2, [sp, #28]
 10104e2:	4637      	mov	r7, r6
 10104e4:	f140 83f1 	bpl.w	1010cca <_svfiprintf_r+0xc72>
 10104e8:	b2a4      	uxth	r4, r4
 10104ea:	2500      	movs	r5, #0
 10104ec:	2301      	movs	r3, #1
 10104ee:	e6c6      	b.n	101027e <_svfiprintf_r+0x226>
 10104f0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 10104f4:	f89a 3000 	ldrb.w	r3, [sl]
 10104f8:	e602      	b.n	1010100 <_svfiprintf_r+0xa8>
 10104fa:	4651      	mov	r1, sl
 10104fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 1010500:	2b2a      	cmp	r3, #42	; 0x2a
 1010502:	f000 8452 	beq.w	1010daa <_svfiprintf_r+0xd52>
 1010506:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101050a:	468a      	mov	sl, r1
 101050c:	2a09      	cmp	r2, #9
 101050e:	bf84      	itt	hi
 1010510:	2200      	movhi	r2, #0
 1010512:	9203      	strhi	r2, [sp, #12]
 1010514:	f63f adf6 	bhi.w	1010104 <_svfiprintf_r+0xac>
 1010518:	2100      	movs	r1, #0
 101051a:	f81a 3b01 	ldrb.w	r3, [sl], #1
 101051e:	200a      	movs	r0, #10
 1010520:	fb00 2101 	mla	r1, r0, r1, r2
 1010524:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1010528:	2a09      	cmp	r2, #9
 101052a:	d9f6      	bls.n	101051a <_svfiprintf_r+0x4c2>
 101052c:	9103      	str	r1, [sp, #12]
 101052e:	e5e9      	b.n	1010104 <_svfiprintf_r+0xac>
 1010530:	f89a 3000 	ldrb.w	r3, [sl]
 1010534:	f046 0604 	orr.w	r6, r6, #4
 1010538:	e5e2      	b.n	1010100 <_svfiprintf_r+0xa8>
 101053a:	06b1      	lsls	r1, r6, #26
 101053c:	f046 0310 	orr.w	r3, r6, #16
 1010540:	f100 814a 	bmi.w	10107d8 <_svfiprintf_r+0x780>
 1010544:	9a07      	ldr	r2, [sp, #28]
 1010546:	3204      	adds	r2, #4
 1010548:	9907      	ldr	r1, [sp, #28]
 101054a:	2500      	movs	r5, #0
 101054c:	9207      	str	r2, [sp, #28]
 101054e:	680c      	ldr	r4, [r1, #0]
 1010550:	e149      	b.n	10107e6 <_svfiprintf_r+0x78e>
 1010552:	f046 0710 	orr.w	r7, r6, #16
 1010556:	06b6      	lsls	r6, r6, #26
 1010558:	f100 810d 	bmi.w	1010776 <_svfiprintf_r+0x71e>
 101055c:	9b07      	ldr	r3, [sp, #28]
 101055e:	1d1a      	adds	r2, r3, #4
 1010560:	9b07      	ldr	r3, [sp, #28]
 1010562:	9207      	str	r2, [sp, #28]
 1010564:	681c      	ldr	r4, [r3, #0]
 1010566:	17e5      	asrs	r5, r4, #31
 1010568:	4622      	mov	r2, r4
 101056a:	2a00      	cmp	r2, #0
 101056c:	462b      	mov	r3, r5
 101056e:	f173 0300 	sbcs.w	r3, r3, #0
 1010572:	f280 810f 	bge.w	1010794 <_svfiprintf_r+0x73c>
 1010576:	4264      	negs	r4, r4
 1010578:	9903      	ldr	r1, [sp, #12]
 101057a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 101057e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1010582:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1010586:	1c4a      	adds	r2, r1, #1
 1010588:	f04f 0301 	mov.w	r3, #1
 101058c:	f47f ae7e 	bne.w	101028c <_svfiprintf_r+0x234>
 1010590:	2b01      	cmp	r3, #1
 1010592:	f000 8281 	beq.w	1010a98 <_svfiprintf_r+0xa40>
 1010596:	2b02      	cmp	r3, #2
 1010598:	bf18      	it	ne
 101059a:	a946      	addne	r1, sp, #280	; 0x118
 101059c:	f040 8128 	bne.w	10107f0 <_svfiprintf_r+0x798>
 10105a0:	ab46      	add	r3, sp, #280	; 0x118
 10105a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 10105a4:	461a      	mov	r2, r3
 10105a6:	f004 010f 	and.w	r1, r4, #15
 10105aa:	0923      	lsrs	r3, r4, #4
 10105ac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 10105b0:	0928      	lsrs	r0, r5, #4
 10105b2:	5c71      	ldrb	r1, [r6, r1]
 10105b4:	461c      	mov	r4, r3
 10105b6:	4605      	mov	r5, r0
 10105b8:	ea54 0305 	orrs.w	r3, r4, r5
 10105bc:	f802 1d01 	strb.w	r1, [r2, #-1]!
 10105c0:	d1f1      	bne.n	10105a6 <_svfiprintf_r+0x54e>
 10105c2:	ab46      	add	r3, sp, #280	; 0x118
 10105c4:	920b      	str	r2, [sp, #44]	; 0x2c
 10105c6:	1a9b      	subs	r3, r3, r2
 10105c8:	463e      	mov	r6, r7
 10105ca:	9305      	str	r3, [sp, #20]
 10105cc:	e67c      	b.n	10102c8 <_svfiprintf_r+0x270>
 10105ce:	232b      	movs	r3, #43	; 0x2b
 10105d0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10105d4:	f89a 3000 	ldrb.w	r3, [sl]
 10105d8:	e592      	b.n	1010100 <_svfiprintf_r+0xa8>
 10105da:	9b07      	ldr	r3, [sp, #28]
 10105dc:	f647 0230 	movw	r2, #30768	; 0x7830
 10105e0:	f243 0104 	movw	r1, #12292	; 0x3004
 10105e4:	f046 0702 	orr.w	r7, r6, #2
 10105e8:	f2c0 1101 	movt	r1, #257	; 0x101
 10105ec:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 10105f0:	f853 4b04 	ldr.w	r4, [r3], #4
 10105f4:	2500      	movs	r5, #0
 10105f6:	910c      	str	r1, [sp, #48]	; 0x30
 10105f8:	9307      	str	r3, [sp, #28]
 10105fa:	2302      	movs	r3, #2
 10105fc:	e63f      	b.n	101027e <_svfiprintf_r+0x226>
 10105fe:	06b5      	lsls	r5, r6, #26
 1010600:	f100 80b8 	bmi.w	1010774 <_svfiprintf_r+0x71c>
 1010604:	9b07      	ldr	r3, [sp, #28]
 1010606:	06f4      	lsls	r4, r6, #27
 1010608:	f103 0204 	add.w	r2, r3, #4
 101060c:	f100 83d9 	bmi.w	1010dc2 <_svfiprintf_r+0xd6a>
 1010610:	9b07      	ldr	r3, [sp, #28]
 1010612:	0670      	lsls	r0, r6, #25
 1010614:	bf48      	it	mi
 1010616:	f9b3 4000 	ldrshmi.w	r4, [r3]
 101061a:	d404      	bmi.n	1010626 <_svfiprintf_r+0x5ce>
 101061c:	05b1      	lsls	r1, r6, #22
 101061e:	f140 837a 	bpl.w	1010d16 <_svfiprintf_r+0xcbe>
 1010622:	f993 4000 	ldrsb.w	r4, [r3]
 1010626:	17e5      	asrs	r5, r4, #31
 1010628:	9207      	str	r2, [sp, #28]
 101062a:	4637      	mov	r7, r6
 101062c:	4622      	mov	r2, r4
 101062e:	462b      	mov	r3, r5
 1010630:	e0ab      	b.n	101078a <_svfiprintf_r+0x732>
 1010632:	06b4      	lsls	r4, r6, #26
 1010634:	f642 62b4 	movw	r2, #11956	; 0x2eb4
 1010638:	f2c0 1201 	movt	r2, #257	; 0x101
 101063c:	920c      	str	r2, [sp, #48]	; 0x30
 101063e:	f53f ae0b 	bmi.w	1010258 <_svfiprintf_r+0x200>
 1010642:	9a07      	ldr	r2, [sp, #28]
 1010644:	06f0      	lsls	r0, r6, #27
 1010646:	f852 4b04 	ldr.w	r4, [r2], #4
 101064a:	9207      	str	r2, [sp, #28]
 101064c:	d40b      	bmi.n	1010666 <_svfiprintf_r+0x60e>
 101064e:	0671      	lsls	r1, r6, #25
 1010650:	bf44      	itt	mi
 1010652:	b2a4      	uxthmi	r4, r4
 1010654:	2500      	movmi	r5, #0
 1010656:	f53f ae06 	bmi.w	1010266 <_svfiprintf_r+0x20e>
 101065a:	05b2      	lsls	r2, r6, #22
 101065c:	bf44      	itt	mi
 101065e:	b2e4      	uxtbmi	r4, r4
 1010660:	2500      	movmi	r5, #0
 1010662:	f53f ae00 	bmi.w	1010266 <_svfiprintf_r+0x20e>
 1010666:	2500      	movs	r5, #0
 1010668:	ea54 0205 	orrs.w	r2, r4, r5
 101066c:	f006 0201 	and.w	r2, r6, #1
 1010670:	bf08      	it	eq
 1010672:	2200      	moveq	r2, #0
 1010674:	2a00      	cmp	r2, #0
 1010676:	f43f adff 	beq.w	1010278 <_svfiprintf_r+0x220>
 101067a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 101067e:	f046 0602 	orr.w	r6, r6, #2
 1010682:	2330      	movs	r3, #48	; 0x30
 1010684:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 1010688:	e5f6      	b.n	1010278 <_svfiprintf_r+0x220>
 101068a:	06b4      	lsls	r4, r6, #26
 101068c:	f046 0710 	orr.w	r7, r6, #16
 1010690:	f100 8098 	bmi.w	10107c4 <_svfiprintf_r+0x76c>
 1010694:	9b07      	ldr	r3, [sp, #28]
 1010696:	1d1a      	adds	r2, r3, #4
 1010698:	9b07      	ldr	r3, [sp, #28]
 101069a:	2500      	movs	r5, #0
 101069c:	9207      	str	r2, [sp, #28]
 101069e:	681c      	ldr	r4, [r3, #0]
 10106a0:	2301      	movs	r3, #1
 10106a2:	e5ec      	b.n	101027e <_svfiprintf_r+0x226>
 10106a4:	9d07      	ldr	r5, [sp, #28]
 10106a6:	2200      	movs	r2, #0
 10106a8:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10106ac:	f855 1b04 	ldr.w	r1, [r5], #4
 10106b0:	910b      	str	r1, [sp, #44]	; 0x2c
 10106b2:	2900      	cmp	r1, #0
 10106b4:	f000 82f1 	beq.w	1010c9a <_svfiprintf_r+0xc42>
 10106b8:	2b53      	cmp	r3, #83	; 0x53
 10106ba:	f000 8231 	beq.w	1010b20 <_svfiprintf_r+0xac8>
 10106be:	f016 0410 	ands.w	r4, r6, #16
 10106c2:	f040 822d 	bne.w	1010b20 <_svfiprintf_r+0xac8>
 10106c6:	9a03      	ldr	r2, [sp, #12]
 10106c8:	1c53      	adds	r3, r2, #1
 10106ca:	f000 8343 	beq.w	1010d54 <_svfiprintf_r+0xcfc>
 10106ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 10106d0:	4621      	mov	r1, r4
 10106d2:	4638      	mov	r0, r7
 10106d4:	f7fe fee4 	bl	100f4a0 <memchr>
 10106d8:	9008      	str	r0, [sp, #32]
 10106da:	2800      	cmp	r0, #0
 10106dc:	f000 8332 	beq.w	1010d44 <_svfiprintf_r+0xcec>
 10106e0:	1bc3      	subs	r3, r0, r7
 10106e2:	4622      	mov	r2, r4
 10106e4:	9305      	str	r3, [sp, #20]
 10106e6:	9403      	str	r4, [sp, #12]
 10106e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10106ec:	e9cd 5407 	strd	r5, r4, [sp, #28]
 10106f0:	9302      	str	r3, [sp, #8]
 10106f2:	e5f1      	b.n	10102d8 <_svfiprintf_r+0x280>
 10106f4:	f89a 3000 	ldrb.w	r3, [sl]
 10106f8:	2b6c      	cmp	r3, #108	; 0x6c
 10106fa:	bf09      	itett	eq
 10106fc:	f046 0620 	orreq.w	r6, r6, #32
 1010700:	f046 0610 	orrne.w	r6, r6, #16
 1010704:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1010708:	f10a 0a01 	addeq.w	sl, sl, #1
 101070c:	e4f8      	b.n	1010100 <_svfiprintf_r+0xa8>
 101070e:	f89a 3000 	ldrb.w	r3, [sl]
 1010712:	2b68      	cmp	r3, #104	; 0x68
 1010714:	bf09      	itett	eq
 1010716:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 101071a:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 101071e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1010722:	f10a 0a01 	addeq.w	sl, sl, #1
 1010726:	e4eb      	b.n	1010100 <_svfiprintf_r+0xa8>
 1010728:	9a07      	ldr	r2, [sp, #28]
 101072a:	06b7      	lsls	r7, r6, #26
 101072c:	f102 0304 	add.w	r3, r2, #4
 1010730:	f100 81d2 	bmi.w	1010ad8 <_svfiprintf_r+0xa80>
 1010734:	06f5      	lsls	r5, r6, #27
 1010736:	f100 825d 	bmi.w	1010bf4 <_svfiprintf_r+0xb9c>
 101073a:	0674      	lsls	r4, r6, #25
 101073c:	f100 82e4 	bmi.w	1010d08 <_svfiprintf_r+0xcb0>
 1010740:	05b0      	lsls	r0, r6, #22
 1010742:	f140 8257 	bpl.w	1010bf4 <_svfiprintf_r+0xb9c>
 1010746:	9a07      	ldr	r2, [sp, #28]
 1010748:	9307      	str	r3, [sp, #28]
 101074a:	9b04      	ldr	r3, [sp, #16]
 101074c:	6812      	ldr	r2, [r2, #0]
 101074e:	7013      	strb	r3, [r2, #0]
 1010750:	e4a7      	b.n	10100a2 <_svfiprintf_r+0x4a>
 1010752:	2b00      	cmp	r3, #0
 1010754:	f43f ad5c 	beq.w	1010210 <_svfiprintf_r+0x1b8>
 1010758:	2201      	movs	r2, #1
 101075a:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 101075e:	9202      	str	r2, [sp, #8]
 1010760:	2300      	movs	r3, #0
 1010762:	9205      	str	r2, [sp, #20]
 1010764:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1010768:	ab2d      	add	r3, sp, #180	; 0xb4
 101076a:	930b      	str	r3, [sp, #44]	; 0x2c
 101076c:	2300      	movs	r3, #0
 101076e:	9308      	str	r3, [sp, #32]
 1010770:	9303      	str	r3, [sp, #12]
 1010772:	e5b7      	b.n	10102e4 <_svfiprintf_r+0x28c>
 1010774:	4637      	mov	r7, r6
 1010776:	9d07      	ldr	r5, [sp, #28]
 1010778:	3507      	adds	r5, #7
 101077a:	f025 0307 	bic.w	r3, r5, #7
 101077e:	4619      	mov	r1, r3
 1010780:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 1010784:	4614      	mov	r4, r2
 1010786:	461d      	mov	r5, r3
 1010788:	9107      	str	r1, [sp, #28]
 101078a:	2a00      	cmp	r2, #0
 101078c:	f173 0300 	sbcs.w	r3, r3, #0
 1010790:	f6ff aef1 	blt.w	1010576 <_svfiprintf_r+0x51e>
 1010794:	9b03      	ldr	r3, [sp, #12]
 1010796:	3301      	adds	r3, #1
 1010798:	f000 817e 	beq.w	1010a98 <_svfiprintf_r+0xa40>
 101079c:	ea54 0305 	orrs.w	r3, r4, r5
 10107a0:	9a03      	ldr	r2, [sp, #12]
 10107a2:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 10107a6:	bf14      	ite	ne
 10107a8:	2301      	movne	r3, #1
 10107aa:	2300      	moveq	r3, #0
 10107ac:	2a00      	cmp	r2, #0
 10107ae:	bf18      	it	ne
 10107b0:	2301      	movne	r3, #1
 10107b2:	2b00      	cmp	r3, #0
 10107b4:	f040 816f 	bne.w	1010a96 <_svfiprintf_r+0xa3e>
 10107b8:	aa46      	add	r2, sp, #280	; 0x118
 10107ba:	9303      	str	r3, [sp, #12]
 10107bc:	920b      	str	r2, [sp, #44]	; 0x2c
 10107be:	9305      	str	r3, [sp, #20]
 10107c0:	e582      	b.n	10102c8 <_svfiprintf_r+0x270>
 10107c2:	4637      	mov	r7, r6
 10107c4:	9d07      	ldr	r5, [sp, #28]
 10107c6:	2301      	movs	r3, #1
 10107c8:	3507      	adds	r5, #7
 10107ca:	f025 0207 	bic.w	r2, r5, #7
 10107ce:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10107d2:	9207      	str	r2, [sp, #28]
 10107d4:	e553      	b.n	101027e <_svfiprintf_r+0x226>
 10107d6:	4633      	mov	r3, r6
 10107d8:	9d07      	ldr	r5, [sp, #28]
 10107da:	3507      	adds	r5, #7
 10107dc:	f025 0207 	bic.w	r2, r5, #7
 10107e0:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10107e4:	9207      	str	r2, [sp, #28]
 10107e6:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
 10107ea:	2300      	movs	r3, #0
 10107ec:	e547      	b.n	101027e <_svfiprintf_r+0x226>
 10107ee:	4611      	mov	r1, r2
 10107f0:	08e2      	lsrs	r2, r4, #3
 10107f2:	08e8      	lsrs	r0, r5, #3
 10107f4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 10107f8:	f004 0307 	and.w	r3, r4, #7
 10107fc:	4605      	mov	r5, r0
 10107fe:	3330      	adds	r3, #48	; 0x30
 1010800:	4614      	mov	r4, r2
 1010802:	ea54 0005 	orrs.w	r0, r4, r5
 1010806:	f801 3c01 	strb.w	r3, [r1, #-1]
 101080a:	f101 32ff 	add.w	r2, r1, #4294967295
 101080e:	d1ee      	bne.n	10107ee <_svfiprintf_r+0x796>
 1010810:	2b30      	cmp	r3, #48	; 0x30
 1010812:	bf0c      	ite	eq
 1010814:	2300      	moveq	r3, #0
 1010816:	f007 0301 	andne.w	r3, r7, #1
 101081a:	920b      	str	r2, [sp, #44]	; 0x2c
 101081c:	2b00      	cmp	r3, #0
 101081e:	f040 81cd 	bne.w	1010bbc <_svfiprintf_r+0xb64>
 1010822:	ab46      	add	r3, sp, #280	; 0x118
 1010824:	463e      	mov	r6, r7
 1010826:	1a9b      	subs	r3, r3, r2
 1010828:	9305      	str	r3, [sp, #20]
 101082a:	e54d      	b.n	10102c8 <_svfiprintf_r+0x270>
 101082c:	9b06      	ldr	r3, [sp, #24]
 101082e:	9c02      	ldr	r4, [sp, #8]
 1010830:	1b1c      	subs	r4, r3, r4
 1010832:	2c00      	cmp	r4, #0
 1010834:	f77f ad9b 	ble.w	101036e <_svfiprintf_r+0x316>
 1010838:	2c10      	cmp	r4, #16
 101083a:	4db8      	ldr	r5, [pc, #736]	; (1010b1c <_svfiprintf_r+0xac4>)
 101083c:	f340 82aa 	ble.w	1010d94 <_svfiprintf_r+0xd3c>
 1010840:	960a      	str	r6, [sp, #40]	; 0x28
 1010842:	2710      	movs	r7, #16
 1010844:	462e      	mov	r6, r5
 1010846:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1010848:	e002      	b.n	1010850 <_svfiprintf_r+0x7f8>
 101084a:	3c10      	subs	r4, #16
 101084c:	2c10      	cmp	r4, #16
 101084e:	dd17      	ble.n	1010880 <_svfiprintf_r+0x828>
 1010850:	3101      	adds	r1, #1
 1010852:	3210      	adds	r2, #16
 1010854:	2907      	cmp	r1, #7
 1010856:	e9c8 6700 	strd	r6, r7, [r8]
 101085a:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 101085e:	f108 0808 	add.w	r8, r8, #8
 1010862:	ddf2      	ble.n	101084a <_svfiprintf_r+0x7f2>
 1010864:	aa1a      	add	r2, sp, #104	; 0x68
 1010866:	4629      	mov	r1, r5
 1010868:	4658      	mov	r0, fp
 101086a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 101086e:	f7ff fb77 	bl	100ff60 <__ssprint_r>
 1010872:	2800      	cmp	r0, #0
 1010874:	d165      	bne.n	1010942 <_svfiprintf_r+0x8ea>
 1010876:	3c10      	subs	r4, #16
 1010878:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 101087c:	2c10      	cmp	r4, #16
 101087e:	dce7      	bgt.n	1010850 <_svfiprintf_r+0x7f8>
 1010880:	4635      	mov	r5, r6
 1010882:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1010884:	3101      	adds	r1, #1
 1010886:	f108 0308 	add.w	r3, r8, #8
 101088a:	2907      	cmp	r1, #7
 101088c:	4422      	add	r2, r4
 101088e:	f8c8 5000 	str.w	r5, [r8]
 1010892:	921c      	str	r2, [sp, #112]	; 0x70
 1010894:	f8c8 4004 	str.w	r4, [r8, #4]
 1010898:	911b      	str	r1, [sp, #108]	; 0x6c
 101089a:	f300 819b 	bgt.w	1010bd4 <_svfiprintf_r+0xb7c>
 101089e:	f103 0708 	add.w	r7, r3, #8
 10108a2:	4698      	mov	r8, r3
 10108a4:	9c05      	ldr	r4, [sp, #20]
 10108a6:	1c48      	adds	r0, r1, #1
 10108a8:	9b03      	ldr	r3, [sp, #12]
 10108aa:	1b1c      	subs	r4, r3, r4
 10108ac:	2c00      	cmp	r4, #0
 10108ae:	f77f ad64 	ble.w	101037a <_svfiprintf_r+0x322>
 10108b2:	2c10      	cmp	r4, #16
 10108b4:	4d99      	ldr	r5, [pc, #612]	; (1010b1c <_svfiprintf_r+0xac4>)
 10108b6:	f340 8210 	ble.w	1010cda <_svfiprintf_r+0xc82>
 10108ba:	9603      	str	r6, [sp, #12]
 10108bc:	2710      	movs	r7, #16
 10108be:	462e      	mov	r6, r5
 10108c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 10108c2:	e002      	b.n	10108ca <_svfiprintf_r+0x872>
 10108c4:	3c10      	subs	r4, #16
 10108c6:	2c10      	cmp	r4, #16
 10108c8:	dd16      	ble.n	10108f8 <_svfiprintf_r+0x8a0>
 10108ca:	3101      	adds	r1, #1
 10108cc:	3210      	adds	r2, #16
 10108ce:	2907      	cmp	r1, #7
 10108d0:	e9c8 6700 	strd	r6, r7, [r8]
 10108d4:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 10108d8:	f108 0808 	add.w	r8, r8, #8
 10108dc:	ddf2      	ble.n	10108c4 <_svfiprintf_r+0x86c>
 10108de:	aa1a      	add	r2, sp, #104	; 0x68
 10108e0:	4629      	mov	r1, r5
 10108e2:	4658      	mov	r0, fp
 10108e4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10108e8:	f7ff fb3a 	bl	100ff60 <__ssprint_r>
 10108ec:	bb48      	cbnz	r0, 1010942 <_svfiprintf_r+0x8ea>
 10108ee:	3c10      	subs	r4, #16
 10108f0:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 10108f4:	2c10      	cmp	r4, #16
 10108f6:	dce8      	bgt.n	10108ca <_svfiprintf_r+0x872>
 10108f8:	4635      	mov	r5, r6
 10108fa:	9e03      	ldr	r6, [sp, #12]
 10108fc:	1c48      	adds	r0, r1, #1
 10108fe:	f108 0308 	add.w	r3, r8, #8
 1010902:	2807      	cmp	r0, #7
 1010904:	4422      	add	r2, r4
 1010906:	f8c8 5000 	str.w	r5, [r8]
 101090a:	921c      	str	r2, [sp, #112]	; 0x70
 101090c:	f8c8 4004 	str.w	r4, [r8, #4]
 1010910:	901b      	str	r0, [sp, #108]	; 0x6c
 1010912:	f300 80d0 	bgt.w	1010ab6 <_svfiprintf_r+0xa5e>
 1010916:	3001      	adds	r0, #1
 1010918:	f103 0708 	add.w	r7, r3, #8
 101091c:	4698      	mov	r8, r3
 101091e:	e52c      	b.n	101037a <_svfiprintf_r+0x322>
 1010920:	aa1a      	add	r2, sp, #104	; 0x68
 1010922:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010924:	4658      	mov	r0, fp
 1010926:	f7ff fb1b 	bl	100ff60 <__ssprint_r>
 101092a:	b950      	cbnz	r0, 1010942 <_svfiprintf_r+0x8ea>
 101092c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 101092e:	af1d      	add	r7, sp, #116	; 0x74
 1010930:	e52f      	b.n	1010392 <_svfiprintf_r+0x33a>
 1010932:	aa1a      	add	r2, sp, #104	; 0x68
 1010934:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010936:	4658      	mov	r0, fp
 1010938:	f7ff fb12 	bl	100ff60 <__ssprint_r>
 101093c:	2800      	cmp	r0, #0
 101093e:	f43f ad3b 	beq.w	10103b8 <_svfiprintf_r+0x360>
 1010942:	9b08      	ldr	r3, [sp, #32]
 1010944:	2b00      	cmp	r3, #0
 1010946:	f43f ac67 	beq.w	1010218 <_svfiprintf_r+0x1c0>
 101094a:	9908      	ldr	r1, [sp, #32]
 101094c:	4658      	mov	r0, fp
 101094e:	f7fe fc3f 	bl	100f1d0 <_free_r>
 1010952:	e461      	b.n	1010218 <_svfiprintf_r+0x1c0>
 1010954:	2c10      	cmp	r4, #16
 1010956:	f641 1570 	movw	r5, #6512	; 0x1970
 101095a:	f2c0 1501 	movt	r5, #257	; 0x101
 101095e:	dd23      	ble.n	10109a8 <_svfiprintf_r+0x950>
 1010960:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 1010964:	2710      	movs	r7, #16
 1010966:	462e      	mov	r6, r5
 1010968:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101096a:	e002      	b.n	1010972 <_svfiprintf_r+0x91a>
 101096c:	3c10      	subs	r4, #16
 101096e:	2c10      	cmp	r4, #16
 1010970:	dd17      	ble.n	10109a2 <_svfiprintf_r+0x94a>
 1010972:	3101      	adds	r1, #1
 1010974:	3210      	adds	r2, #16
 1010976:	2907      	cmp	r1, #7
 1010978:	e9c8 6700 	strd	r6, r7, [r8]
 101097c:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1010980:	f108 0808 	add.w	r8, r8, #8
 1010984:	ddf2      	ble.n	101096c <_svfiprintf_r+0x914>
 1010986:	aa1a      	add	r2, sp, #104	; 0x68
 1010988:	4629      	mov	r1, r5
 101098a:	4658      	mov	r0, fp
 101098c:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1010990:	f7ff fae6 	bl	100ff60 <__ssprint_r>
 1010994:	2800      	cmp	r0, #0
 1010996:	d1d4      	bne.n	1010942 <_svfiprintf_r+0x8ea>
 1010998:	3c10      	subs	r4, #16
 101099a:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 101099e:	2c10      	cmp	r4, #16
 10109a0:	dce7      	bgt.n	1010972 <_svfiprintf_r+0x91a>
 10109a2:	4635      	mov	r5, r6
 10109a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10109a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 10109a8:	3101      	adds	r1, #1
 10109aa:	4422      	add	r2, r4
 10109ac:	2907      	cmp	r1, #7
 10109ae:	e9c8 5400 	strd	r5, r4, [r8]
 10109b2:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 10109b6:	bfd8      	it	le
 10109b8:	f108 0808 	addle.w	r8, r8, #8
 10109bc:	f77f aca4 	ble.w	1010308 <_svfiprintf_r+0x2b0>
 10109c0:	aa1a      	add	r2, sp, #104	; 0x68
 10109c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 10109c4:	4658      	mov	r0, fp
 10109c6:	9310      	str	r3, [sp, #64]	; 0x40
 10109c8:	f7ff faca 	bl	100ff60 <__ssprint_r>
 10109cc:	2800      	cmp	r0, #0
 10109ce:	d1b8      	bne.n	1010942 <_svfiprintf_r+0x8ea>
 10109d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 10109d2:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10109d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 10109d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10109da:	e495      	b.n	1010308 <_svfiprintf_r+0x2b0>
 10109dc:	aa1a      	add	r2, sp, #104	; 0x68
 10109de:	9909      	ldr	r1, [sp, #36]	; 0x24
 10109e0:	4658      	mov	r0, fp
 10109e2:	9310      	str	r3, [sp, #64]	; 0x40
 10109e4:	f7ff fabc 	bl	100ff60 <__ssprint_r>
 10109e8:	2800      	cmp	r0, #0
 10109ea:	d1aa      	bne.n	1010942 <_svfiprintf_r+0x8ea>
 10109ec:	991b      	ldr	r1, [sp, #108]	; 0x6c
 10109ee:	af1f      	add	r7, sp, #124	; 0x7c
 10109f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 10109f2:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10109f6:	1c48      	adds	r0, r1, #1
 10109f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10109fa:	e4a1      	b.n	1010340 <_svfiprintf_r+0x2e8>
 10109fc:	aa1a      	add	r2, sp, #104	; 0x68
 10109fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010a00:	4658      	mov	r0, fp
 1010a02:	f7ff faad 	bl	100ff60 <__ssprint_r>
 1010a06:	2800      	cmp	r0, #0
 1010a08:	d19b      	bne.n	1010942 <_svfiprintf_r+0x8ea>
 1010a0a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1010a0c:	af1f      	add	r7, sp, #124	; 0x7c
 1010a0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1010a10:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1010a14:	1c48      	adds	r0, r1, #1
 1010a16:	e4a6      	b.n	1010366 <_svfiprintf_r+0x30e>
 1010a18:	2c10      	cmp	r4, #16
 1010a1a:	f641 1570 	movw	r5, #6512	; 0x1970
 1010a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 1010a20:	f2c0 1501 	movt	r5, #257	; 0x101
 1010a24:	bfc4      	itt	gt
 1010a26:	2610      	movgt	r6, #16
 1010a28:	f8dd 8024 	ldrgt.w	r8, [sp, #36]	; 0x24
 1010a2c:	dc03      	bgt.n	1010a36 <_svfiprintf_r+0x9de>
 1010a2e:	e01a      	b.n	1010a66 <_svfiprintf_r+0xa0e>
 1010a30:	3c10      	subs	r4, #16
 1010a32:	2c10      	cmp	r4, #16
 1010a34:	dd17      	ble.n	1010a66 <_svfiprintf_r+0xa0e>
 1010a36:	3301      	adds	r3, #1
 1010a38:	3210      	adds	r2, #16
 1010a3a:	2b07      	cmp	r3, #7
 1010a3c:	e9c7 5600 	strd	r5, r6, [r7]
 1010a40:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1010a44:	f107 0708 	add.w	r7, r7, #8
 1010a48:	ddf2      	ble.n	1010a30 <_svfiprintf_r+0x9d8>
 1010a4a:	aa1a      	add	r2, sp, #104	; 0x68
 1010a4c:	4641      	mov	r1, r8
 1010a4e:	4658      	mov	r0, fp
 1010a50:	af1d      	add	r7, sp, #116	; 0x74
 1010a52:	f7ff fa85 	bl	100ff60 <__ssprint_r>
 1010a56:	2800      	cmp	r0, #0
 1010a58:	f47f af73 	bne.w	1010942 <_svfiprintf_r+0x8ea>
 1010a5c:	3c10      	subs	r4, #16
 1010a5e:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1010a62:	2c10      	cmp	r4, #16
 1010a64:	dce7      	bgt.n	1010a36 <_svfiprintf_r+0x9de>
 1010a66:	3301      	adds	r3, #1
 1010a68:	4422      	add	r2, r4
 1010a6a:	2b07      	cmp	r3, #7
 1010a6c:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1010a70:	e9c7 5400 	strd	r5, r4, [r7]
 1010a74:	f77f ac95 	ble.w	10103a2 <_svfiprintf_r+0x34a>
 1010a78:	aa1a      	add	r2, sp, #104	; 0x68
 1010a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010a7c:	4658      	mov	r0, fp
 1010a7e:	f7ff fa6f 	bl	100ff60 <__ssprint_r>
 1010a82:	2800      	cmp	r0, #0
 1010a84:	f47f af5d 	bne.w	1010942 <_svfiprintf_r+0x8ea>
 1010a88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1010a8a:	e48a      	b.n	10103a2 <_svfiprintf_r+0x34a>
 1010a8c:	ab46      	add	r3, sp, #280	; 0x118
 1010a8e:	9203      	str	r2, [sp, #12]
 1010a90:	930b      	str	r3, [sp, #44]	; 0x2c
 1010a92:	9205      	str	r2, [sp, #20]
 1010a94:	e418      	b.n	10102c8 <_svfiprintf_r+0x270>
 1010a96:	4637      	mov	r7, r6
 1010a98:	2d00      	cmp	r5, #0
 1010a9a:	bf08      	it	eq
 1010a9c:	2c0a      	cmpeq	r4, #10
 1010a9e:	f080 80b0 	bcs.w	1010c02 <_svfiprintf_r+0xbaa>
 1010aa2:	2301      	movs	r3, #1
 1010aa4:	3430      	adds	r4, #48	; 0x30
 1010aa6:	9305      	str	r3, [sp, #20]
 1010aa8:	463e      	mov	r6, r7
 1010aaa:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1010aae:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1010ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 1010ab4:	e408      	b.n	10102c8 <_svfiprintf_r+0x270>
 1010ab6:	aa1a      	add	r2, sp, #104	; 0x68
 1010ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010aba:	4658      	mov	r0, fp
 1010abc:	f7ff fa50 	bl	100ff60 <__ssprint_r>
 1010ac0:	2800      	cmp	r0, #0
 1010ac2:	f47f af3e 	bne.w	1010942 <_svfiprintf_r+0x8ea>
 1010ac6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1010ac8:	af1f      	add	r7, sp, #124	; 0x7c
 1010aca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1010acc:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1010ad0:	3001      	adds	r0, #1
 1010ad2:	e452      	b.n	101037a <_svfiprintf_r+0x322>
 1010ad4:	4637      	mov	r7, r6
 1010ad6:	e55b      	b.n	1010590 <_svfiprintf_r+0x538>
 1010ad8:	9904      	ldr	r1, [sp, #16]
 1010ada:	6812      	ldr	r2, [r2, #0]
 1010adc:	9307      	str	r3, [sp, #28]
 1010ade:	17cd      	asrs	r5, r1, #31
 1010ae0:	4608      	mov	r0, r1
 1010ae2:	4629      	mov	r1, r5
 1010ae4:	e9c2 0100 	strd	r0, r1, [r2]
 1010ae8:	f7ff badb 	b.w	10100a2 <_svfiprintf_r+0x4a>
 1010aec:	9b07      	ldr	r3, [sp, #28]
 1010aee:	2201      	movs	r2, #1
 1010af0:	ad2d      	add	r5, sp, #180	; 0xb4
 1010af2:	9202      	str	r2, [sp, #8]
 1010af4:	9205      	str	r2, [sp, #20]
 1010af6:	681b      	ldr	r3, [r3, #0]
 1010af8:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1010afc:	e492      	b.n	1010424 <_svfiprintf_r+0x3cc>
 1010afe:	2140      	movs	r1, #64	; 0x40
 1010b00:	4658      	mov	r0, fp
 1010b02:	f7f9 fe39 	bl	100a778 <_malloc_r>
 1010b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010b08:	6018      	str	r0, [r3, #0]
 1010b0a:	6118      	str	r0, [r3, #16]
 1010b0c:	2800      	cmp	r0, #0
 1010b0e:	f000 8160 	beq.w	1010dd2 <_svfiprintf_r+0xd7a>
 1010b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1010b14:	2340      	movs	r3, #64	; 0x40
 1010b16:	6153      	str	r3, [r2, #20]
 1010b18:	f7ff bab2 	b.w	1010080 <_svfiprintf_r+0x28>
 1010b1c:	01011980 	.word	0x01011980
 1010b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010b22:	2208      	movs	r2, #8
 1010b24:	2100      	movs	r1, #0
 1010b26:	a818      	add	r0, sp, #96	; 0x60
 1010b28:	9315      	str	r3, [sp, #84]	; 0x54
 1010b2a:	f7fa fe39 	bl	100b7a0 <memset>
 1010b2e:	9f03      	ldr	r7, [sp, #12]
 1010b30:	1c7b      	adds	r3, r7, #1
 1010b32:	f000 80d4 	beq.w	1010cde <_svfiprintf_r+0xc86>
 1010b36:	2400      	movs	r4, #0
 1010b38:	9602      	str	r6, [sp, #8]
 1010b3a:	9503      	str	r5, [sp, #12]
 1010b3c:	4626      	mov	r6, r4
 1010b3e:	e009      	b.n	1010b54 <_svfiprintf_r+0xafc>
 1010b40:	f7fd f9c6 	bl	100ded0 <_wcrtomb_r>
 1010b44:	1833      	adds	r3, r6, r0
 1010b46:	3001      	adds	r0, #1
 1010b48:	f000 8127 	beq.w	1010d9a <_svfiprintf_r+0xd42>
 1010b4c:	42bb      	cmp	r3, r7
 1010b4e:	dc0a      	bgt.n	1010b66 <_svfiprintf_r+0xb0e>
 1010b50:	461e      	mov	r6, r3
 1010b52:	d008      	beq.n	1010b66 <_svfiprintf_r+0xb0e>
 1010b54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1010b56:	ab18      	add	r3, sp, #96	; 0x60
 1010b58:	a92d      	add	r1, sp, #180	; 0xb4
 1010b5a:	4658      	mov	r0, fp
 1010b5c:	5915      	ldr	r5, [r2, r4]
 1010b5e:	3404      	adds	r4, #4
 1010b60:	462a      	mov	r2, r5
 1010b62:	2d00      	cmp	r5, #0
 1010b64:	d1ec      	bne.n	1010b40 <_svfiprintf_r+0xae8>
 1010b66:	9605      	str	r6, [sp, #20]
 1010b68:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 1010b6c:	9b05      	ldr	r3, [sp, #20]
 1010b6e:	2b00      	cmp	r3, #0
 1010b70:	f000 80c3 	beq.w	1010cfa <_svfiprintf_r+0xca2>
 1010b74:	2b63      	cmp	r3, #99	; 0x63
 1010b76:	f300 80dc 	bgt.w	1010d32 <_svfiprintf_r+0xcda>
 1010b7a:	2300      	movs	r3, #0
 1010b7c:	9308      	str	r3, [sp, #32]
 1010b7e:	ab2d      	add	r3, sp, #180	; 0xb4
 1010b80:	930b      	str	r3, [sp, #44]	; 0x2c
 1010b82:	2208      	movs	r2, #8
 1010b84:	2100      	movs	r1, #0
 1010b86:	a818      	add	r0, sp, #96	; 0x60
 1010b88:	f7fa fe0a 	bl	100b7a0 <memset>
 1010b8c:	9c05      	ldr	r4, [sp, #20]
 1010b8e:	ab18      	add	r3, sp, #96	; 0x60
 1010b90:	aa15      	add	r2, sp, #84	; 0x54
 1010b92:	9300      	str	r3, [sp, #0]
 1010b94:	4658      	mov	r0, fp
 1010b96:	4623      	mov	r3, r4
 1010b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1010b9a:	f7fd f9ef 	bl	100df7c <_wcsrtombs_r>
 1010b9e:	4284      	cmp	r4, r0
 1010ba0:	f040 811f 	bne.w	1010de2 <_svfiprintf_r+0xd8a>
 1010ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010ba6:	2400      	movs	r4, #0
 1010ba8:	9507      	str	r5, [sp, #28]
 1010baa:	9403      	str	r4, [sp, #12]
 1010bac:	4619      	mov	r1, r3
 1010bae:	9b05      	ldr	r3, [sp, #20]
 1010bb0:	54cc      	strb	r4, [r1, r3]
 1010bb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010bb6:	9302      	str	r3, [sp, #8]
 1010bb8:	f7ff bb8e 	b.w	10102d8 <_svfiprintf_r+0x280>
 1010bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1010bbe:	3902      	subs	r1, #2
 1010bc0:	2330      	movs	r3, #48	; 0x30
 1010bc2:	463e      	mov	r6, r7
 1010bc4:	910b      	str	r1, [sp, #44]	; 0x2c
 1010bc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 1010bca:	ab46      	add	r3, sp, #280	; 0x118
 1010bcc:	1a5b      	subs	r3, r3, r1
 1010bce:	9305      	str	r3, [sp, #20]
 1010bd0:	f7ff bb7a 	b.w	10102c8 <_svfiprintf_r+0x270>
 1010bd4:	aa1a      	add	r2, sp, #104	; 0x68
 1010bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010bd8:	4658      	mov	r0, fp
 1010bda:	f7ff f9c1 	bl	100ff60 <__ssprint_r>
 1010bde:	2800      	cmp	r0, #0
 1010be0:	f47f aeaf 	bne.w	1010942 <_svfiprintf_r+0x8ea>
 1010be4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1010be6:	af1f      	add	r7, sp, #124	; 0x7c
 1010be8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1010bea:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1010bee:	1c48      	adds	r0, r1, #1
 1010bf0:	f7ff bbbd 	b.w	101036e <_svfiprintf_r+0x316>
 1010bf4:	9a07      	ldr	r2, [sp, #28]
 1010bf6:	6812      	ldr	r2, [r2, #0]
 1010bf8:	9307      	str	r3, [sp, #28]
 1010bfa:	9b04      	ldr	r3, [sp, #16]
 1010bfc:	6013      	str	r3, [r2, #0]
 1010bfe:	f7ff ba50 	b.w	10100a2 <_svfiprintf_r+0x4a>
 1010c02:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 1010c06:	2200      	movs	r2, #0
 1010c08:	9702      	str	r7, [sp, #8]
 1010c0a:	ae46      	add	r6, sp, #280	; 0x118
 1010c0c:	f8cd a020 	str.w	sl, [sp, #32]
 1010c10:	4617      	mov	r7, r2
 1010c12:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 1010c16:	4699      	mov	r9, r3
 1010c18:	f8cd 8014 	str.w	r8, [sp, #20]
 1010c1c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 1010c20:	e008      	b.n	1010c34 <_svfiprintf_r+0xbdc>
 1010c22:	f7f8 fef1 	bl	1009a08 <__aeabi_uldivmod>
 1010c26:	2d00      	cmp	r5, #0
 1010c28:	bf08      	it	eq
 1010c2a:	2c0a      	cmpeq	r4, #10
 1010c2c:	d328      	bcc.n	1010c80 <_svfiprintf_r+0xc28>
 1010c2e:	4604      	mov	r4, r0
 1010c30:	4646      	mov	r6, r8
 1010c32:	460d      	mov	r5, r1
 1010c34:	220a      	movs	r2, #10
 1010c36:	2300      	movs	r3, #0
 1010c38:	4620      	mov	r0, r4
 1010c3a:	4629      	mov	r1, r5
 1010c3c:	f7f8 fee4 	bl	1009a08 <__aeabi_uldivmod>
 1010c40:	3701      	adds	r7, #1
 1010c42:	4620      	mov	r0, r4
 1010c44:	4629      	mov	r1, r5
 1010c46:	f106 38ff 	add.w	r8, r6, #4294967295
 1010c4a:	2300      	movs	r3, #0
 1010c4c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1010c50:	220a      	movs	r2, #10
 1010c52:	f806 cc01 	strb.w	ip, [r6, #-1]
 1010c56:	f1b9 0f00 	cmp.w	r9, #0
 1010c5a:	d0e2      	beq.n	1010c22 <_svfiprintf_r+0xbca>
 1010c5c:	f89a 6000 	ldrb.w	r6, [sl]
 1010c60:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1010c64:	bf18      	it	ne
 1010c66:	f04f 0c01 	movne.w	ip, #1
 1010c6a:	42be      	cmp	r6, r7
 1010c6c:	bf18      	it	ne
 1010c6e:	f04f 0c00 	movne.w	ip, #0
 1010c72:	f1bc 0f00 	cmp.w	ip, #0
 1010c76:	d0d4      	beq.n	1010c22 <_svfiprintf_r+0xbca>
 1010c78:	429d      	cmp	r5, r3
 1010c7a:	bf08      	it	eq
 1010c7c:	4294      	cmpeq	r4, r2
 1010c7e:	d275      	bcs.n	1010d6c <_svfiprintf_r+0xd14>
 1010c80:	4642      	mov	r2, r8
 1010c82:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 1010c86:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 1010c8a:	9f02      	ldr	r7, [sp, #8]
 1010c8c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 1010c90:	f8dd a020 	ldr.w	sl, [sp, #32]
 1010c94:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1010c98:	e5c3      	b.n	1010822 <_svfiprintf_r+0x7ca>
 1010c9a:	9b03      	ldr	r3, [sp, #12]
 1010c9c:	f243 0218 	movw	r2, #12312	; 0x3018
 1010ca0:	9507      	str	r5, [sp, #28]
 1010ca2:	f2c0 1201 	movt	r2, #257	; 0x101
 1010ca6:	2b06      	cmp	r3, #6
 1010ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 1010caa:	bf28      	it	cs
 1010cac:	2306      	movcs	r3, #6
 1010cae:	9305      	str	r3, [sp, #20]
 1010cb0:	9302      	str	r3, [sp, #8]
 1010cb2:	e55b      	b.n	101076c <_svfiprintf_r+0x714>
 1010cb4:	05b5      	lsls	r5, r6, #22
 1010cb6:	bf45      	ittet	mi
 1010cb8:	9207      	strmi	r2, [sp, #28]
 1010cba:	b2e4      	uxtbmi	r4, r4
 1010cbc:	9207      	strpl	r2, [sp, #28]
 1010cbe:	4633      	movmi	r3, r6
 1010cc0:	bf4e      	itee	mi
 1010cc2:	2500      	movmi	r5, #0
 1010cc4:	2500      	movpl	r5, #0
 1010cc6:	4633      	movpl	r3, r6
 1010cc8:	e58d      	b.n	10107e6 <_svfiprintf_r+0x78e>
 1010cca:	05b5      	lsls	r5, r6, #22
 1010ccc:	f04f 0301 	mov.w	r3, #1
 1010cd0:	bf48      	it	mi
 1010cd2:	b2e4      	uxtbmi	r4, r4
 1010cd4:	2500      	movs	r5, #0
 1010cd6:	f7ff bad2 	b.w	101027e <_svfiprintf_r+0x226>
 1010cda:	463b      	mov	r3, r7
 1010cdc:	e611      	b.n	1010902 <_svfiprintf_r+0x8aa>
 1010cde:	2300      	movs	r3, #0
 1010ce0:	aa18      	add	r2, sp, #96	; 0x60
 1010ce2:	4619      	mov	r1, r3
 1010ce4:	9200      	str	r2, [sp, #0]
 1010ce6:	4658      	mov	r0, fp
 1010ce8:	aa15      	add	r2, sp, #84	; 0x54
 1010cea:	f7fd f947 	bl	100df7c <_wcsrtombs_r>
 1010cee:	1c43      	adds	r3, r0, #1
 1010cf0:	9005      	str	r0, [sp, #20]
 1010cf2:	d052      	beq.n	1010d9a <_svfiprintf_r+0xd42>
 1010cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010cf6:	9315      	str	r3, [sp, #84]	; 0x54
 1010cf8:	e738      	b.n	1010b6c <_svfiprintf_r+0xb14>
 1010cfa:	9b05      	ldr	r3, [sp, #20]
 1010cfc:	9507      	str	r5, [sp, #28]
 1010cfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 1010d02:	9308      	str	r3, [sp, #32]
 1010d04:	f7ff bae8 	b.w	10102d8 <_svfiprintf_r+0x280>
 1010d08:	9a07      	ldr	r2, [sp, #28]
 1010d0a:	9307      	str	r3, [sp, #28]
 1010d0c:	9b04      	ldr	r3, [sp, #16]
 1010d0e:	6812      	ldr	r2, [r2, #0]
 1010d10:	8013      	strh	r3, [r2, #0]
 1010d12:	f7ff b9c6 	b.w	10100a2 <_svfiprintf_r+0x4a>
 1010d16:	681c      	ldr	r4, [r3, #0]
 1010d18:	4637      	mov	r7, r6
 1010d1a:	9207      	str	r2, [sp, #28]
 1010d1c:	17e5      	asrs	r5, r4, #31
 1010d1e:	4622      	mov	r2, r4
 1010d20:	462b      	mov	r3, r5
 1010d22:	e532      	b.n	101078a <_svfiprintf_r+0x732>
 1010d24:	4658      	mov	r0, fp
 1010d26:	aa1a      	add	r2, sp, #104	; 0x68
 1010d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010d2a:	f7ff f919 	bl	100ff60 <__ssprint_r>
 1010d2e:	f7ff ba73 	b.w	1010218 <_svfiprintf_r+0x1c0>
 1010d32:	1c59      	adds	r1, r3, #1
 1010d34:	4658      	mov	r0, fp
 1010d36:	f7f9 fd1f 	bl	100a778 <_malloc_r>
 1010d3a:	900b      	str	r0, [sp, #44]	; 0x2c
 1010d3c:	b368      	cbz	r0, 1010d9a <_svfiprintf_r+0xd42>
 1010d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010d40:	9308      	str	r3, [sp, #32]
 1010d42:	e71e      	b.n	1010b82 <_svfiprintf_r+0xb2a>
 1010d44:	9b03      	ldr	r3, [sp, #12]
 1010d46:	9507      	str	r5, [sp, #28]
 1010d48:	9302      	str	r3, [sp, #8]
 1010d4a:	9305      	str	r3, [sp, #20]
 1010d4c:	9b08      	ldr	r3, [sp, #32]
 1010d4e:	9303      	str	r3, [sp, #12]
 1010d50:	f7ff bac2 	b.w	10102d8 <_svfiprintf_r+0x280>
 1010d54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1010d56:	9403      	str	r4, [sp, #12]
 1010d58:	f7fb f8d2 	bl	100bf00 <strlen>
 1010d5c:	9507      	str	r5, [sp, #28]
 1010d5e:	9408      	str	r4, [sp, #32]
 1010d60:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1010d64:	9005      	str	r0, [sp, #20]
 1010d66:	9302      	str	r3, [sp, #8]
 1010d68:	f7ff bab6 	b.w	10102d8 <_svfiprintf_r+0x280>
 1010d6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 1010d6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 1010d70:	eba8 0802 	sub.w	r8, r8, r2
 1010d74:	4640      	mov	r0, r8
 1010d76:	f7fb f9b1 	bl	100c0dc <strncpy>
 1010d7a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1010d7e:	b10b      	cbz	r3, 1010d84 <_svfiprintf_r+0xd2c>
 1010d80:	f10a 0a01 	add.w	sl, sl, #1
 1010d84:	4620      	mov	r0, r4
 1010d86:	4629      	mov	r1, r5
 1010d88:	220a      	movs	r2, #10
 1010d8a:	2300      	movs	r3, #0
 1010d8c:	f7f8 fe3c 	bl	1009a08 <__aeabi_uldivmod>
 1010d90:	2700      	movs	r7, #0
 1010d92:	e74c      	b.n	1010c2e <_svfiprintf_r+0xbd6>
 1010d94:	463b      	mov	r3, r7
 1010d96:	4601      	mov	r1, r0
 1010d98:	e577      	b.n	101088a <_svfiprintf_r+0x832>
 1010d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1010d9c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1010da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1010da4:	8193      	strh	r3, [r2, #12]
 1010da6:	f7ff ba3a 	b.w	101021e <_svfiprintf_r+0x1c6>
 1010daa:	9a07      	ldr	r2, [sp, #28]
 1010dac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1010db0:	468a      	mov	sl, r1
 1010db2:	f852 0b04 	ldr.w	r0, [r2], #4
 1010db6:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1010dba:	9207      	str	r2, [sp, #28]
 1010dbc:	9103      	str	r1, [sp, #12]
 1010dbe:	f7ff b99f 	b.w	1010100 <_svfiprintf_r+0xa8>
 1010dc2:	4637      	mov	r7, r6
 1010dc4:	f7ff bbcc 	b.w	1010560 <_svfiprintf_r+0x508>
 1010dc8:	4633      	mov	r3, r6
 1010dca:	f7ff bbbd 	b.w	1010548 <_svfiprintf_r+0x4f0>
 1010dce:	4637      	mov	r7, r6
 1010dd0:	e462      	b.n	1010698 <_svfiprintf_r+0x640>
 1010dd2:	230c      	movs	r3, #12
 1010dd4:	f04f 32ff 	mov.w	r2, #4294967295
 1010dd8:	f8cb 3000 	str.w	r3, [fp]
 1010ddc:	9204      	str	r2, [sp, #16]
 1010dde:	f7ff ba25 	b.w	101022c <_svfiprintf_r+0x1d4>
 1010de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1010de4:	8993      	ldrh	r3, [r2, #12]
 1010de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1010dea:	8193      	strh	r3, [r2, #12]
 1010dec:	e5a9      	b.n	1010942 <_svfiprintf_r+0x8ea>
 1010dee:	bf00      	nop

01010df0 <_wcsnrtombs_l>:
 1010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1010df4:	b08b      	sub	sp, #44	; 0x2c
 1010df6:	e9dd 9414 	ldrd	r9, r4, [sp, #80]	; 0x50
 1010dfa:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 1010dfe:	2c00      	cmp	r4, #0
 1010e00:	d058      	beq.n	1010eb4 <_wcsnrtombs_l+0xc4>
 1010e02:	6816      	ldr	r6, [r2, #0]
 1010e04:	2900      	cmp	r1, #0
 1010e06:	d05a      	beq.n	1010ebe <_wcsnrtombs_l+0xce>
 1010e08:	f1b9 0f00 	cmp.w	r9, #0
 1010e0c:	d064      	beq.n	1010ed8 <_wcsnrtombs_l+0xe8>
 1010e0e:	1e5d      	subs	r5, r3, #1
 1010e10:	2b00      	cmp	r3, #0
 1010e12:	d063      	beq.n	1010edc <_wcsnrtombs_l+0xec>
 1010e14:	9205      	str	r2, [sp, #20]
 1010e16:	3e04      	subs	r6, #4
 1010e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 1010e1c:	f04f 0800 	mov.w	r8, #0
 1010e20:	9104      	str	r1, [sp, #16]
 1010e22:	46cb      	mov	fp, r9
 1010e24:	e00a      	b.n	1010e3c <_wcsnrtombs_l+0x4c>
 1010e26:	9b03      	ldr	r3, [sp, #12]
 1010e28:	bb13      	cbnz	r3, 1010e70 <_wcsnrtombs_l+0x80>
 1010e2a:	6833      	ldr	r3, [r6, #0]
 1010e2c:	2b00      	cmp	r3, #0
 1010e2e:	d035      	beq.n	1010e9c <_wcsnrtombs_l+0xac>
 1010e30:	4559      	cmp	r1, fp
 1010e32:	d255      	bcs.n	1010ee0 <_wcsnrtombs_l+0xf0>
 1010e34:	3d01      	subs	r5, #1
 1010e36:	4688      	mov	r8, r1
 1010e38:	1c6b      	adds	r3, r5, #1
 1010e3a:	d015      	beq.n	1010e68 <_wcsnrtombs_l+0x78>
 1010e3c:	6827      	ldr	r7, [r4, #0]
 1010e3e:	4623      	mov	r3, r4
 1010e40:	f856 2f04 	ldr.w	r2, [r6, #4]!
 1010e44:	a907      	add	r1, sp, #28
 1010e46:	9802      	ldr	r0, [sp, #8]
 1010e48:	9701      	str	r7, [sp, #4]
 1010e4a:	f8da 70e0 	ldr.w	r7, [sl, #224]	; 0xe0
 1010e4e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 1010e52:	47b8      	blx	r7
 1010e54:	1c42      	adds	r2, r0, #1
 1010e56:	d035      	beq.n	1010ec4 <_wcsnrtombs_l+0xd4>
 1010e58:	eb00 0108 	add.w	r1, r0, r8
 1010e5c:	4559      	cmp	r1, fp
 1010e5e:	d9e2      	bls.n	1010e26 <_wcsnrtombs_l+0x36>
 1010e60:	f8dd b004 	ldr.w	fp, [sp, #4]
 1010e64:	e9c4 b900 	strd	fp, r9, [r4]
 1010e68:	4640      	mov	r0, r8
 1010e6a:	b00b      	add	sp, #44	; 0x2c
 1010e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1010e70:	2800      	cmp	r0, #0
 1010e72:	dd0c      	ble.n	1010e8e <_wcsnrtombs_l+0x9e>
 1010e74:	9b04      	ldr	r3, [sp, #16]
 1010e76:	aa07      	add	r2, sp, #28
 1010e78:	4418      	add	r0, r3
 1010e7a:	3b01      	subs	r3, #1
 1010e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 1010e80:	f812 7b01 	ldrb.w	r7, [r2], #1
 1010e84:	f803 7f01 	strb.w	r7, [r3, #1]!
 1010e88:	4563      	cmp	r3, ip
 1010e8a:	d1f9      	bne.n	1010e80 <_wcsnrtombs_l+0x90>
 1010e8c:	9004      	str	r0, [sp, #16]
 1010e8e:	9a05      	ldr	r2, [sp, #20]
 1010e90:	6813      	ldr	r3, [r2, #0]
 1010e92:	3304      	adds	r3, #4
 1010e94:	6013      	str	r3, [r2, #0]
 1010e96:	6833      	ldr	r3, [r6, #0]
 1010e98:	2b00      	cmp	r3, #0
 1010e9a:	d1c9      	bne.n	1010e30 <_wcsnrtombs_l+0x40>
 1010e9c:	9a03      	ldr	r2, [sp, #12]
 1010e9e:	b10a      	cbz	r2, 1010ea4 <_wcsnrtombs_l+0xb4>
 1010ea0:	9a05      	ldr	r2, [sp, #20]
 1010ea2:	6013      	str	r3, [r2, #0]
 1010ea4:	f101 38ff 	add.w	r8, r1, #4294967295
 1010ea8:	2300      	movs	r3, #0
 1010eaa:	6023      	str	r3, [r4, #0]
 1010eac:	4640      	mov	r0, r8
 1010eae:	b00b      	add	sp, #44	; 0x2c
 1010eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1010eb4:	f500 748e 	add.w	r4, r0, #284	; 0x11c
 1010eb8:	6816      	ldr	r6, [r2, #0]
 1010eba:	2900      	cmp	r1, #0
 1010ebc:	d1a4      	bne.n	1010e08 <_wcsnrtombs_l+0x18>
 1010ebe:	f04f 39ff 	mov.w	r9, #4294967295
 1010ec2:	e7a4      	b.n	1010e0e <_wcsnrtombs_l+0x1e>
 1010ec4:	9902      	ldr	r1, [sp, #8]
 1010ec6:	4680      	mov	r8, r0
 1010ec8:	228a      	movs	r2, #138	; 0x8a
 1010eca:	2300      	movs	r3, #0
 1010ecc:	4640      	mov	r0, r8
 1010ece:	600a      	str	r2, [r1, #0]
 1010ed0:	6023      	str	r3, [r4, #0]
 1010ed2:	b00b      	add	sp, #44	; 0x2c
 1010ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1010ed8:	46c8      	mov	r8, r9
 1010eda:	e7c5      	b.n	1010e68 <_wcsnrtombs_l+0x78>
 1010edc:	4698      	mov	r8, r3
 1010ede:	e7c3      	b.n	1010e68 <_wcsnrtombs_l+0x78>
 1010ee0:	4688      	mov	r8, r1
 1010ee2:	e7c1      	b.n	1010e68 <_wcsnrtombs_l+0x78>

01010ee4 <_wcsnrtombs_r>:
 1010ee4:	f243 4000 	movw	r0, #13312	; 0x3400
 1010ee8:	f2c0 1001 	movt	r0, #257	; 0x101
 1010eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010eee:	b085      	sub	sp, #20
 1010ef0:	6800      	ldr	r0, [r0, #0]
 1010ef2:	f643 0530 	movw	r5, #14384	; 0x3830
 1010ef6:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 1010efa:	f2c0 1501 	movt	r5, #257	; 0x101
 1010efe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 1010f00:	9700      	str	r7, [sp, #0]
 1010f02:	2c00      	cmp	r4, #0
 1010f04:	bf08      	it	eq
 1010f06:	462c      	moveq	r4, r5
 1010f08:	e9cd 6401 	strd	r6, r4, [sp, #4]
 1010f0c:	f7ff ff70 	bl	1010df0 <_wcsnrtombs_l>
 1010f10:	b005      	add	sp, #20
 1010f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

01010f14 <wcsnrtombs>:
 1010f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010f16:	f243 4400 	movw	r4, #13312	; 0x3400
 1010f1a:	f2c0 1401 	movt	r4, #257	; 0x101
 1010f1e:	b085      	sub	sp, #20
 1010f20:	f643 0530 	movw	r5, #14384	; 0x3830
 1010f24:	f2c0 1501 	movt	r5, #257	; 0x101
 1010f28:	6827      	ldr	r7, [r4, #0]
 1010f2a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1010f2c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 1010f2e:	9300      	str	r3, [sp, #0]
 1010f30:	4613      	mov	r3, r2
 1010f32:	2c00      	cmp	r4, #0
 1010f34:	bf08      	it	eq
 1010f36:	462c      	moveq	r4, r5
 1010f38:	460a      	mov	r2, r1
 1010f3a:	9402      	str	r4, [sp, #8]
 1010f3c:	4601      	mov	r1, r0
 1010f3e:	9601      	str	r6, [sp, #4]
 1010f40:	4638      	mov	r0, r7
 1010f42:	f7ff ff55 	bl	1010df0 <_wcsnrtombs_l>
 1010f46:	b005      	add	sp, #20
 1010f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1010f4a:	bf00      	nop

01010f4c <_calloc_r>:
 1010f4c:	b510      	push	{r4, lr}
 1010f4e:	fb02 f101 	mul.w	r1, r2, r1
 1010f52:	f7f9 fc11 	bl	100a778 <_malloc_r>
 1010f56:	4604      	mov	r4, r0
 1010f58:	b170      	cbz	r0, 1010f78 <_calloc_r+0x2c>
 1010f5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 1010f5e:	f022 0203 	bic.w	r2, r2, #3
 1010f62:	3a04      	subs	r2, #4
 1010f64:	2a24      	cmp	r2, #36	; 0x24
 1010f66:	d81d      	bhi.n	1010fa4 <_calloc_r+0x58>
 1010f68:	2a13      	cmp	r2, #19
 1010f6a:	bf98      	it	ls
 1010f6c:	4602      	movls	r2, r0
 1010f6e:	d805      	bhi.n	1010f7c <_calloc_r+0x30>
 1010f70:	2300      	movs	r3, #0
 1010f72:	e9c2 3300 	strd	r3, r3, [r2]
 1010f76:	6093      	str	r3, [r2, #8]
 1010f78:	4620      	mov	r0, r4
 1010f7a:	bd10      	pop	{r4, pc}
 1010f7c:	2a1b      	cmp	r2, #27
 1010f7e:	f04f 0300 	mov.w	r3, #0
 1010f82:	bf98      	it	ls
 1010f84:	f100 0208 	addls.w	r2, r0, #8
 1010f88:	e9c0 3300 	strd	r3, r3, [r0]
 1010f8c:	d9f0      	bls.n	1010f70 <_calloc_r+0x24>
 1010f8e:	2a24      	cmp	r2, #36	; 0x24
 1010f90:	e9c0 3302 	strd	r3, r3, [r0, #8]
 1010f94:	bf11      	iteee	ne
 1010f96:	f100 0210 	addne.w	r2, r0, #16
 1010f9a:	6103      	streq	r3, [r0, #16]
 1010f9c:	f100 0218 	addeq.w	r2, r0, #24
 1010fa0:	6143      	streq	r3, [r0, #20]
 1010fa2:	e7e5      	b.n	1010f70 <_calloc_r+0x24>
 1010fa4:	2100      	movs	r1, #0
 1010fa6:	f7fa fbfb 	bl	100b7a0 <memset>
 1010faa:	4620      	mov	r0, r4
 1010fac:	bd10      	pop	{r4, pc}
 1010fae:	bf00      	nop

01010fb0 <__env_lock>:
 1010fb0:	4770      	bx	lr
 1010fb2:	bf00      	nop

01010fb4 <__env_unlock>:
 1010fb4:	4770      	bx	lr
 1010fb6:	bf00      	nop

01010fb8 <memmove>:
 1010fb8:	4288      	cmp	r0, r1
 1010fba:	b4f0      	push	{r4, r5, r6, r7}
 1010fbc:	d90d      	bls.n	1010fda <memmove+0x22>
 1010fbe:	188b      	adds	r3, r1, r2
 1010fc0:	4283      	cmp	r3, r0
 1010fc2:	d90a      	bls.n	1010fda <memmove+0x22>
 1010fc4:	1884      	adds	r4, r0, r2
 1010fc6:	b132      	cbz	r2, 1010fd6 <memmove+0x1e>
 1010fc8:	4622      	mov	r2, r4
 1010fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 1010fce:	4299      	cmp	r1, r3
 1010fd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 1010fd4:	d1f9      	bne.n	1010fca <memmove+0x12>
 1010fd6:	bcf0      	pop	{r4, r5, r6, r7}
 1010fd8:	4770      	bx	lr
 1010fda:	2a0f      	cmp	r2, #15
 1010fdc:	d80e      	bhi.n	1010ffc <memmove+0x44>
 1010fde:	4603      	mov	r3, r0
 1010fe0:	1e54      	subs	r4, r2, #1
 1010fe2:	2a00      	cmp	r2, #0
 1010fe4:	d0f7      	beq.n	1010fd6 <memmove+0x1e>
 1010fe6:	3401      	adds	r4, #1
 1010fe8:	3b01      	subs	r3, #1
 1010fea:	440c      	add	r4, r1
 1010fec:	f811 2b01 	ldrb.w	r2, [r1], #1
 1010ff0:	42a1      	cmp	r1, r4
 1010ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 1010ff6:	d1f9      	bne.n	1010fec <memmove+0x34>
 1010ff8:	bcf0      	pop	{r4, r5, r6, r7}
 1010ffa:	4770      	bx	lr
 1010ffc:	ea40 0301 	orr.w	r3, r0, r1
 1011000:	079b      	lsls	r3, r3, #30
 1011002:	d13d      	bne.n	1011080 <memmove+0xc8>
 1011004:	f1a2 0510 	sub.w	r5, r2, #16
 1011008:	f101 0420 	add.w	r4, r1, #32
 101100c:	f101 0610 	add.w	r6, r1, #16
 1011010:	f100 0710 	add.w	r7, r0, #16
 1011014:	092d      	lsrs	r5, r5, #4
 1011016:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 101101a:	f856 3c10 	ldr.w	r3, [r6, #-16]
 101101e:	3610      	adds	r6, #16
 1011020:	3710      	adds	r7, #16
 1011022:	f847 3c20 	str.w	r3, [r7, #-32]
 1011026:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 101102a:	f847 3c1c 	str.w	r3, [r7, #-28]
 101102e:	f856 3c18 	ldr.w	r3, [r6, #-24]
 1011032:	f847 3c18 	str.w	r3, [r7, #-24]
 1011036:	f856 3c14 	ldr.w	r3, [r6, #-20]
 101103a:	42a6      	cmp	r6, r4
 101103c:	f847 3c14 	str.w	r3, [r7, #-20]
 1011040:	d1eb      	bne.n	101101a <memmove+0x62>
 1011042:	1c6b      	adds	r3, r5, #1
 1011044:	f012 0f0c 	tst.w	r2, #12
 1011048:	f002 050f 	and.w	r5, r2, #15
 101104c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 1011050:	4419      	add	r1, r3
 1011052:	bf08      	it	eq
 1011054:	462a      	moveq	r2, r5
 1011056:	4403      	add	r3, r0
 1011058:	d0c2      	beq.n	1010fe0 <memmove+0x28>
 101105a:	1f1f      	subs	r7, r3, #4
 101105c:	460e      	mov	r6, r1
 101105e:	f856 cb04 	ldr.w	ip, [r6], #4
 1011062:	1bac      	subs	r4, r5, r6
 1011064:	440c      	add	r4, r1
 1011066:	f847 cf04 	str.w	ip, [r7, #4]!
 101106a:	2c03      	cmp	r4, #3
 101106c:	d8f7      	bhi.n	101105e <memmove+0xa6>
 101106e:	1f2c      	subs	r4, r5, #4
 1011070:	f002 0203 	and.w	r2, r2, #3
 1011074:	f024 0403 	bic.w	r4, r4, #3
 1011078:	3404      	adds	r4, #4
 101107a:	4423      	add	r3, r4
 101107c:	4421      	add	r1, r4
 101107e:	e7af      	b.n	1010fe0 <memmove+0x28>
 1011080:	1e54      	subs	r4, r2, #1
 1011082:	4603      	mov	r3, r0
 1011084:	e7af      	b.n	1010fe6 <memmove+0x2e>
 1011086:	bf00      	nop

01011088 <_realloc_r>:
 1011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101108c:	4692      	mov	sl, r2
 101108e:	b083      	sub	sp, #12
 1011090:	2900      	cmp	r1, #0
 1011092:	f000 80df 	beq.w	1011254 <_realloc_r+0x1cc>
 1011096:	460d      	mov	r5, r1
 1011098:	4680      	mov	r8, r0
 101109a:	f7fa fbd1 	bl	100b840 <__malloc_lock>
 101109e:	f10a 040b 	add.w	r4, sl, #11
 10110a2:	2c16      	cmp	r4, #22
 10110a4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 10110a8:	bf88      	it	hi
 10110aa:	f024 0407 	bichi.w	r4, r4, #7
 10110ae:	f1a5 0708 	sub.w	r7, r5, #8
 10110b2:	bf99      	ittee	ls
 10110b4:	2210      	movls	r2, #16
 10110b6:	2300      	movls	r3, #0
 10110b8:	0fe3      	lsrhi	r3, r4, #31
 10110ba:	4622      	movhi	r2, r4
 10110bc:	f021 0603 	bic.w	r6, r1, #3
 10110c0:	bf98      	it	ls
 10110c2:	4614      	movls	r4, r2
 10110c4:	4554      	cmp	r4, sl
 10110c6:	bf38      	it	cc
 10110c8:	f043 0301 	orrcc.w	r3, r3, #1
 10110cc:	2b00      	cmp	r3, #0
 10110ce:	f040 80c7 	bne.w	1011260 <_realloc_r+0x1d8>
 10110d2:	4296      	cmp	r6, r2
 10110d4:	eb07 0906 	add.w	r9, r7, r6
 10110d8:	f280 808b 	bge.w	10111f2 <_realloc_r+0x16a>
 10110dc:	f643 1bbc 	movw	fp, #14780	; 0x39bc
 10110e0:	f2c0 1b01 	movt	fp, #257	; 0x101
 10110e4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 10110e8:	f8db 3008 	ldr.w	r3, [fp, #8]
 10110ec:	454b      	cmp	r3, r9
 10110ee:	f000 80c0 	beq.w	1011272 <_realloc_r+0x1ea>
 10110f2:	f020 0301 	bic.w	r3, r0, #1
 10110f6:	444b      	add	r3, r9
 10110f8:	685b      	ldr	r3, [r3, #4]
 10110fa:	07db      	lsls	r3, r3, #31
 10110fc:	f100 80a0 	bmi.w	1011240 <_realloc_r+0x1b8>
 1011100:	f020 0003 	bic.w	r0, r0, #3
 1011104:	1833      	adds	r3, r6, r0
 1011106:	4293      	cmp	r3, r2
 1011108:	f280 810c 	bge.w	1011324 <_realloc_r+0x29c>
 101110c:	07c9      	lsls	r1, r1, #31
 101110e:	d40f      	bmi.n	1011130 <_realloc_r+0xa8>
 1011110:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1011114:	1afb      	subs	r3, r7, r3
 1011116:	6859      	ldr	r1, [r3, #4]
 1011118:	f021 0103 	bic.w	r1, r1, #3
 101111c:	4408      	add	r0, r1
 101111e:	eb00 0c06 	add.w	ip, r0, r6
 1011122:	4594      	cmp	ip, r2
 1011124:	f280 811f 	bge.w	1011366 <_realloc_r+0x2de>
 1011128:	eb06 0c01 	add.w	ip, r6, r1
 101112c:	4594      	cmp	ip, r2
 101112e:	da2a      	bge.n	1011186 <_realloc_r+0xfe>
 1011130:	4651      	mov	r1, sl
 1011132:	4640      	mov	r0, r8
 1011134:	f7f9 fb20 	bl	100a778 <_malloc_r>
 1011138:	4682      	mov	sl, r0
 101113a:	b1e8      	cbz	r0, 1011178 <_realloc_r+0xf0>
 101113c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 1011140:	f1a0 0208 	sub.w	r2, r0, #8
 1011144:	f023 0301 	bic.w	r3, r3, #1
 1011148:	443b      	add	r3, r7
 101114a:	4293      	cmp	r3, r2
 101114c:	f000 80f4 	beq.w	1011338 <_realloc_r+0x2b0>
 1011150:	1f32      	subs	r2, r6, #4
 1011152:	2a24      	cmp	r2, #36	; 0x24
 1011154:	f200 8103 	bhi.w	101135e <_realloc_r+0x2d6>
 1011158:	2a13      	cmp	r2, #19
 101115a:	6829      	ldr	r1, [r5, #0]
 101115c:	bf9c      	itt	ls
 101115e:	4603      	movls	r3, r0
 1011160:	462a      	movls	r2, r5
 1011162:	f200 80f1 	bhi.w	1011348 <_realloc_r+0x2c0>
 1011166:	6019      	str	r1, [r3, #0]
 1011168:	6851      	ldr	r1, [r2, #4]
 101116a:	6059      	str	r1, [r3, #4]
 101116c:	6892      	ldr	r2, [r2, #8]
 101116e:	609a      	str	r2, [r3, #8]
 1011170:	4629      	mov	r1, r5
 1011172:	4640      	mov	r0, r8
 1011174:	f7fe f82c 	bl	100f1d0 <_free_r>
 1011178:	4640      	mov	r0, r8
 101117a:	f7fa fb63 	bl	100b844 <__malloc_unlock>
 101117e:	4650      	mov	r0, sl
 1011180:	b003      	add	sp, #12
 1011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1011186:	469a      	mov	sl, r3
 1011188:	68d9      	ldr	r1, [r3, #12]
 101118a:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 101118e:	1f32      	subs	r2, r6, #4
 1011190:	2a24      	cmp	r2, #36	; 0x24
 1011192:	eb03 090c 	add.w	r9, r3, ip
 1011196:	60c1      	str	r1, [r0, #12]
 1011198:	6088      	str	r0, [r1, #8]
 101119a:	f200 80f6 	bhi.w	101138a <_realloc_r+0x302>
 101119e:	2a13      	cmp	r2, #19
 10111a0:	6829      	ldr	r1, [r5, #0]
 10111a2:	bf98      	it	ls
 10111a4:	4652      	movls	r2, sl
 10111a6:	d91c      	bls.n	10111e2 <_realloc_r+0x15a>
 10111a8:	6099      	str	r1, [r3, #8]
 10111aa:	2a1b      	cmp	r2, #27
 10111ac:	6869      	ldr	r1, [r5, #4]
 10111ae:	bf98      	it	ls
 10111b0:	f103 0210 	addls.w	r2, r3, #16
 10111b4:	60d9      	str	r1, [r3, #12]
 10111b6:	68a9      	ldr	r1, [r5, #8]
 10111b8:	bf98      	it	ls
 10111ba:	3508      	addls	r5, #8
 10111bc:	d911      	bls.n	10111e2 <_realloc_r+0x15a>
 10111be:	6119      	str	r1, [r3, #16]
 10111c0:	2a24      	cmp	r2, #36	; 0x24
 10111c2:	68e9      	ldr	r1, [r5, #12]
 10111c4:	bf14      	ite	ne
 10111c6:	f103 0218 	addne.w	r2, r3, #24
 10111ca:	f103 0220 	addeq.w	r2, r3, #32
 10111ce:	6159      	str	r1, [r3, #20]
 10111d0:	6929      	ldr	r1, [r5, #16]
 10111d2:	bf11      	iteee	ne
 10111d4:	3510      	addne	r5, #16
 10111d6:	6199      	streq	r1, [r3, #24]
 10111d8:	6969      	ldreq	r1, [r5, #20]
 10111da:	61d9      	streq	r1, [r3, #28]
 10111dc:	bf04      	itt	eq
 10111de:	69a9      	ldreq	r1, [r5, #24]
 10111e0:	3518      	addeq	r5, #24
 10111e2:	6011      	str	r1, [r2, #0]
 10111e4:	461f      	mov	r7, r3
 10111e6:	6869      	ldr	r1, [r5, #4]
 10111e8:	4666      	mov	r6, ip
 10111ea:	6051      	str	r1, [r2, #4]
 10111ec:	68ab      	ldr	r3, [r5, #8]
 10111ee:	4655      	mov	r5, sl
 10111f0:	6093      	str	r3, [r2, #8]
 10111f2:	1b32      	subs	r2, r6, r4
 10111f4:	687b      	ldr	r3, [r7, #4]
 10111f6:	2a0f      	cmp	r2, #15
 10111f8:	f003 0301 	and.w	r3, r3, #1
 10111fc:	d80f      	bhi.n	101121e <_realloc_r+0x196>
 10111fe:	4333      	orrs	r3, r6
 1011200:	607b      	str	r3, [r7, #4]
 1011202:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1011206:	f043 0301 	orr.w	r3, r3, #1
 101120a:	f8c9 3004 	str.w	r3, [r9, #4]
 101120e:	4640      	mov	r0, r8
 1011210:	46aa      	mov	sl, r5
 1011212:	f7fa fb17 	bl	100b844 <__malloc_unlock>
 1011216:	4650      	mov	r0, sl
 1011218:	b003      	add	sp, #12
 101121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101121e:	1939      	adds	r1, r7, r4
 1011220:	4323      	orrs	r3, r4
 1011222:	f042 0201 	orr.w	r2, r2, #1
 1011226:	607b      	str	r3, [r7, #4]
 1011228:	604a      	str	r2, [r1, #4]
 101122a:	4640      	mov	r0, r8
 101122c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1011230:	3108      	adds	r1, #8
 1011232:	f043 0301 	orr.w	r3, r3, #1
 1011236:	f8c9 3004 	str.w	r3, [r9, #4]
 101123a:	f7fd ffc9 	bl	100f1d0 <_free_r>
 101123e:	e7e6      	b.n	101120e <_realloc_r+0x186>
 1011240:	07c8      	lsls	r0, r1, #31
 1011242:	f53f af75 	bmi.w	1011130 <_realloc_r+0xa8>
 1011246:	f855 3c08 	ldr.w	r3, [r5, #-8]
 101124a:	1afb      	subs	r3, r7, r3
 101124c:	6859      	ldr	r1, [r3, #4]
 101124e:	f021 0103 	bic.w	r1, r1, #3
 1011252:	e769      	b.n	1011128 <_realloc_r+0xa0>
 1011254:	4611      	mov	r1, r2
 1011256:	b003      	add	sp, #12
 1011258:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101125c:	f7f9 ba8c 	b.w	100a778 <_malloc_r>
 1011260:	f04f 0a00 	mov.w	sl, #0
 1011264:	230c      	movs	r3, #12
 1011266:	4650      	mov	r0, sl
 1011268:	f8c8 3000 	str.w	r3, [r8]
 101126c:	b003      	add	sp, #12
 101126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1011272:	f020 0003 	bic.w	r0, r0, #3
 1011276:	f104 0c10 	add.w	ip, r4, #16
 101127a:	1833      	adds	r3, r6, r0
 101127c:	4563      	cmp	r3, ip
 101127e:	f280 8098 	bge.w	10113b2 <_realloc_r+0x32a>
 1011282:	07cb      	lsls	r3, r1, #31
 1011284:	f53f af54 	bmi.w	1011130 <_realloc_r+0xa8>
 1011288:	f855 3c08 	ldr.w	r3, [r5, #-8]
 101128c:	1afb      	subs	r3, r7, r3
 101128e:	6859      	ldr	r1, [r3, #4]
 1011290:	f021 0103 	bic.w	r1, r1, #3
 1011294:	4408      	add	r0, r1
 1011296:	eb00 0906 	add.w	r9, r0, r6
 101129a:	45cc      	cmp	ip, r9
 101129c:	f73f af44 	bgt.w	1011128 <_realloc_r+0xa0>
 10112a0:	469a      	mov	sl, r3
 10112a2:	68d9      	ldr	r1, [r3, #12]
 10112a4:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 10112a8:	1f32      	subs	r2, r6, #4
 10112aa:	2a24      	cmp	r2, #36	; 0x24
 10112ac:	60c1      	str	r1, [r0, #12]
 10112ae:	6088      	str	r0, [r1, #8]
 10112b0:	f200 809c 	bhi.w	10113ec <_realloc_r+0x364>
 10112b4:	2a13      	cmp	r2, #19
 10112b6:	6829      	ldr	r1, [r5, #0]
 10112b8:	bf98      	it	ls
 10112ba:	4652      	movls	r2, sl
 10112bc:	d91c      	bls.n	10112f8 <_realloc_r+0x270>
 10112be:	6099      	str	r1, [r3, #8]
 10112c0:	2a1b      	cmp	r2, #27
 10112c2:	6869      	ldr	r1, [r5, #4]
 10112c4:	bf98      	it	ls
 10112c6:	f103 0210 	addls.w	r2, r3, #16
 10112ca:	60d9      	str	r1, [r3, #12]
 10112cc:	68a9      	ldr	r1, [r5, #8]
 10112ce:	bf98      	it	ls
 10112d0:	3508      	addls	r5, #8
 10112d2:	d911      	bls.n	10112f8 <_realloc_r+0x270>
 10112d4:	6119      	str	r1, [r3, #16]
 10112d6:	2a24      	cmp	r2, #36	; 0x24
 10112d8:	68e9      	ldr	r1, [r5, #12]
 10112da:	bf14      	ite	ne
 10112dc:	f103 0218 	addne.w	r2, r3, #24
 10112e0:	f103 0220 	addeq.w	r2, r3, #32
 10112e4:	6159      	str	r1, [r3, #20]
 10112e6:	6929      	ldr	r1, [r5, #16]
 10112e8:	bf11      	iteee	ne
 10112ea:	3510      	addne	r5, #16
 10112ec:	6199      	streq	r1, [r3, #24]
 10112ee:	6969      	ldreq	r1, [r5, #20]
 10112f0:	61d9      	streq	r1, [r3, #28]
 10112f2:	bf04      	itt	eq
 10112f4:	69a9      	ldreq	r1, [r5, #24]
 10112f6:	3518      	addeq	r5, #24
 10112f8:	6011      	str	r1, [r2, #0]
 10112fa:	6869      	ldr	r1, [r5, #4]
 10112fc:	6051      	str	r1, [r2, #4]
 10112fe:	68a9      	ldr	r1, [r5, #8]
 1011300:	6091      	str	r1, [r2, #8]
 1011302:	1919      	adds	r1, r3, r4
 1011304:	eba9 0204 	sub.w	r2, r9, r4
 1011308:	f8cb 1008 	str.w	r1, [fp, #8]
 101130c:	f042 0201 	orr.w	r2, r2, #1
 1011310:	604a      	str	r2, [r1, #4]
 1011312:	4640      	mov	r0, r8
 1011314:	685a      	ldr	r2, [r3, #4]
 1011316:	f002 0201 	and.w	r2, r2, #1
 101131a:	4314      	orrs	r4, r2
 101131c:	605c      	str	r4, [r3, #4]
 101131e:	f7fa fa91 	bl	100b844 <__malloc_unlock>
 1011322:	e778      	b.n	1011216 <_realloc_r+0x18e>
 1011324:	f8d9 200c 	ldr.w	r2, [r9, #12]
 1011328:	461e      	mov	r6, r3
 101132a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 101132e:	eb07 0903 	add.w	r9, r7, r3
 1011332:	60ca      	str	r2, [r1, #12]
 1011334:	6091      	str	r1, [r2, #8]
 1011336:	e75c      	b.n	10111f2 <_realloc_r+0x16a>
 1011338:	f850 3c04 	ldr.w	r3, [r0, #-4]
 101133c:	f023 0303 	bic.w	r3, r3, #3
 1011340:	441e      	add	r6, r3
 1011342:	eb07 0906 	add.w	r9, r7, r6
 1011346:	e754      	b.n	10111f2 <_realloc_r+0x16a>
 1011348:	6001      	str	r1, [r0, #0]
 101134a:	2a1b      	cmp	r2, #27
 101134c:	686b      	ldr	r3, [r5, #4]
 101134e:	6043      	str	r3, [r0, #4]
 1011350:	d823      	bhi.n	101139a <_realloc_r+0x312>
 1011352:	f105 0208 	add.w	r2, r5, #8
 1011356:	f100 0308 	add.w	r3, r0, #8
 101135a:	68a9      	ldr	r1, [r5, #8]
 101135c:	e703      	b.n	1011166 <_realloc_r+0xde>
 101135e:	4629      	mov	r1, r5
 1011360:	f7ff fe2a 	bl	1010fb8 <memmove>
 1011364:	e704      	b.n	1011170 <_realloc_r+0xe8>
 1011366:	f8d9 100c 	ldr.w	r1, [r9, #12]
 101136a:	469a      	mov	sl, r3
 101136c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 1011370:	1f32      	subs	r2, r6, #4
 1011372:	2a24      	cmp	r2, #36	; 0x24
 1011374:	eb03 090c 	add.w	r9, r3, ip
 1011378:	60c1      	str	r1, [r0, #12]
 101137a:	6088      	str	r0, [r1, #8]
 101137c:	68d9      	ldr	r1, [r3, #12]
 101137e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1011382:	60c1      	str	r1, [r0, #12]
 1011384:	6088      	str	r0, [r1, #8]
 1011386:	f67f af0a 	bls.w	101119e <_realloc_r+0x116>
 101138a:	4629      	mov	r1, r5
 101138c:	4650      	mov	r0, sl
 101138e:	4666      	mov	r6, ip
 1011390:	461f      	mov	r7, r3
 1011392:	4655      	mov	r5, sl
 1011394:	f7ff fe10 	bl	1010fb8 <memmove>
 1011398:	e72b      	b.n	10111f2 <_realloc_r+0x16a>
 101139a:	68ab      	ldr	r3, [r5, #8]
 101139c:	2a24      	cmp	r2, #36	; 0x24
 101139e:	6083      	str	r3, [r0, #8]
 10113a0:	68eb      	ldr	r3, [r5, #12]
 10113a2:	60c3      	str	r3, [r0, #12]
 10113a4:	d018      	beq.n	10113d8 <_realloc_r+0x350>
 10113a6:	f105 0210 	add.w	r2, r5, #16
 10113aa:	f100 0310 	add.w	r3, r0, #16
 10113ae:	6929      	ldr	r1, [r5, #16]
 10113b0:	e6d9      	b.n	1011166 <_realloc_r+0xde>
 10113b2:	4427      	add	r7, r4
 10113b4:	1b1b      	subs	r3, r3, r4
 10113b6:	f8cb 7008 	str.w	r7, [fp, #8]
 10113ba:	f043 0301 	orr.w	r3, r3, #1
 10113be:	607b      	str	r3, [r7, #4]
 10113c0:	4640      	mov	r0, r8
 10113c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
 10113c6:	46aa      	mov	sl, r5
 10113c8:	f003 0301 	and.w	r3, r3, #1
 10113cc:	431c      	orrs	r4, r3
 10113ce:	f845 4c04 	str.w	r4, [r5, #-4]
 10113d2:	f7fa fa37 	bl	100b844 <__malloc_unlock>
 10113d6:	e71e      	b.n	1011216 <_realloc_r+0x18e>
 10113d8:	6929      	ldr	r1, [r5, #16]
 10113da:	f105 0218 	add.w	r2, r5, #24
 10113de:	f100 0318 	add.w	r3, r0, #24
 10113e2:	6101      	str	r1, [r0, #16]
 10113e4:	6969      	ldr	r1, [r5, #20]
 10113e6:	6141      	str	r1, [r0, #20]
 10113e8:	69a9      	ldr	r1, [r5, #24]
 10113ea:	e6bc      	b.n	1011166 <_realloc_r+0xde>
 10113ec:	4629      	mov	r1, r5
 10113ee:	4650      	mov	r0, sl
 10113f0:	9301      	str	r3, [sp, #4]
 10113f2:	f7ff fde1 	bl	1010fb8 <memmove>
 10113f6:	9b01      	ldr	r3, [sp, #4]
 10113f8:	e783      	b.n	1011302 <_realloc_r+0x27a>
 10113fa:	bf00      	nop

010113fc <_sbrk>:
  static u8 *heap = NULL;
  u8 *prev_heap;
  static u8 *HeapEndPtr = (u8 *)&_heap_end;
  caddr_t Status;

  if (heap == NULL) {
 10113fc:	e308231c 	movw	r2, #33564	; 0x831c
 1011400:	e3402101 	movt	r2, #257	; 0x101
 1011404:	e5923000 	ldr	r3, [r2]
 1011408:	e3530000 	cmp	r3, #0
    heap = (u8 *)&_heap_start;
 101140c:	03091c90 	movweq	r1, #40080	; 0x9c90
 1011410:	03401102 	movteq	r1, #258	; 0x102
 1011414:	01a03001 	moveq	r3, r1
 1011418:	05821000 	streq	r1, [r2]
  }
  prev_heap = heap;

	if (((heap + incr) <= HeapEndPtr) && (prev_heap != NULL)) {
 101141c:	e3091c90 	movw	r1, #40080	; 0x9c90
 1011420:	e0830000 	add	r0, r3, r0
 1011424:	e3401d02 	movt	r1, #3330	; 0xd02
 1011428:	e1500001 	cmp	r0, r1
  heap += incr;
	  Status = (caddr_t) ((void *)prev_heap);
	} else {
	  Status = (caddr_t) -1;
 101142c:	83e03000 	mvnhi	r3, #0
  heap += incr;
 1011430:	95820000 	strls	r0, [r2]
  }

  return Status;
}
 1011434:	e1a00003 	mov	r0, r3
 1011438:	e12fff1e 	bx	lr

0101143c <_exit>:
*/
__attribute__((weak)) void _exit (sint32 status)
{
  (void)status;
  while (1) {
	;
 101143c:	eafffffe 	b	101143c <_exit>

01011440 <main>:
#include "acquire.h"

uint32_t csi_buffer[16384];

int main()
{
 1011440:	e92d4070 	push	{r4, r5, r6, lr}
		//d_printf(D_INFO, "acq_start = %d", res);

		while(!acq_is_done()) ;

		//acq_debug_dump();
		acq_copy_slow_mipi(49, (uint32_t *)&csi_buffer);
 1011444:	e3095c78 	movw	r5, #40056	; 0x9c78
	Xil_DCacheDisable();
 1011448:	ebffdba6 	bl	10082e8 <Xil_DCacheDisable>
		d_printf(D_INFO, "raw_samples=%llu", g_acq_state.stats.num_samples_raw);
 101144c:	e3024ddc 	movw	r4, #11740	; 0x2ddc
		acq_copy_slow_mipi(49, (uint32_t *)&csi_buffer);
 1011450:	e3405101 	movt	r5, #257	; 0x101
	hal_init();
 1011454:	ebffc7a1 	bl	10032e0 <hal_init>
	acq_init();
 1011458:	ebffbc99 	bl	10006c4 <acq_init>
	d_printf(D_WARN, "Press key to start");
 101145c:	e3021db8 	movw	r1, #11704	; 0x2db8
 1011460:	e3a00003 	mov	r0, #3
 1011464:	e3401101 	movt	r1, #257	; 0x101
 1011468:	e59f6064 	ldr	r6, [pc, #100]	; 10114d4 <main+0x94>
 101146c:	ebffc72b 	bl	1003120 <d_printf>
	d_waitkey();
 1011470:	ebffc8da 	bl	10037e0 <d_waitkey>
	d_printf(D_WARN, "Press key again");
 1011474:	e3021dcc 	movw	r1, #11724	; 0x2dcc
 1011478:	e3a00003 	mov	r0, #3
 101147c:	e3401101 	movt	r1, #257	; 0x101
		d_printf(D_INFO, "raw_samples=%llu", g_acq_state.stats.num_samples_raw);
 1011480:	e3404101 	movt	r4, #257	; 0x101
	d_printf(D_WARN, "Press key again");
 1011484:	ebffc725 	bl	1003120 <d_printf>
	d_waitkey();
 1011488:	ebffc8d4 	bl	10037e0 <d_waitkey>
		acq_free_all_alloc();
 101148c:	ebffbdc0 	bl	1000b94 <acq_free_all_alloc>
		res = acq_prepare_triggered(ACQ_MODE_8BIT | ACQ_MODE_1CH, 0, 8192, 50);
 1011490:	e3a03032 	mov	r3, #50	; 0x32
 1011494:	e3a02a02 	mov	r2, #8192	; 0x2000
 1011498:	e3a01000 	mov	r1, #0
 101149c:	e3a00021 	mov	r0, #33	; 0x21
 10114a0:	ebffbdce 	bl	1000be0 <acq_prepare_triggered>
		res = acq_start();
 10114a4:	ebffbec5 	bl	1000fc0 <acq_start>
		while(!acq_is_done()) ;
 10114a8:	ebffc11a 	bl	1001918 <acq_is_done>
 10114ac:	e3500000 	cmp	r0, #0
 10114b0:	0afffffc 	beq	10114a8 <main+0x68>
		acq_copy_slow_mipi(49, (uint32_t *)&csi_buffer);
 10114b4:	e1a01005 	mov	r1, r5
 10114b8:	e3a00031 	mov	r0, #49	; 0x31
 10114bc:	ebffc385 	bl	10022d8 <acq_copy_slow_mipi>
		d_printf(D_INFO, "raw_samples=%llu", g_acq_state.stats.num_samples_raw);
 10114c0:	e14620d8 	ldrd	r2, [r6, #-8]
 10114c4:	e1a01004 	mov	r1, r4
 10114c8:	e3a00002 	mov	r0, #2
 10114cc:	ebffc713 	bl	1003120 <d_printf>
		acq_free_all_alloc();
 10114d0:	eaffffed 	b	101148c <main+0x4c>
 10114d4:	01019a80 	.word	0x01019a80

Disassembly of section .init:

010114d8 <_init>:
 10114d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10114da:	bf00      	nop
 10114dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10114de:	bc08      	pop	{r3}
 10114e0:	469e      	mov	lr, r3
 10114e2:	4770      	bx	lr

Disassembly of section .fini:

010114e4 <_fini>:
 10114e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10114e6:	bf00      	nop
 10114e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10114ea:	bc08      	pop	{r3}
 10114ec:	469e      	mov	lr, r3
 10114ee:	4770      	bx	lr
