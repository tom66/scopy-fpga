
../Release/ps_app.elf:     file format elf32-littlearm

SYMBOL TABLE:
01000000 l    d  .text	00000000 .text
01027840 l    d  .init	00000000 .init
0102784c l    d  .fini	00000000 .fini
01027860 l    d  .rodata	00000000 .rodata
0106c1f8 l    d  .data	00000000 .data
0106d088 l    d  .eh_frame	00000000 .eh_frame
01070000 l    d  .mmu_tbl	00000000 .mmu_tbl
01074000 l    d  .ARM.exidx	00000000 .ARM.exidx
01074008 l    d  .init_array	00000000 .init_array
0107400c l    d  .fini_array	00000000 .fini_array
01074010 l    d  .ARM.attributes	00000000 .ARM.attributes
01074020 l    d  .bss	00000000 .bss
010c1f6c l    d  .heap	00000000 .heap
00000000 l    d  .stack	00000000 .stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 asm_vectors.o
010000a0 l       .text	00000000 Undefined
010000bc l       .text	00000000 SVCHandler
01000100 l       .text	00000000 PrefetchAbortHandler
010000e0 l       .text	00000000 DataAbortHandler
01000020 l       .text	00000000 IRQHandler
01000060 l       .text	00000000 FIQHandler
0100007c l       .text	00000000 FIQLoop
00000000 l    df *ABS*	00000000 boot.o
f8f02000 l       *ABS*	00000000 PSS_L2CC_BASE_ADDR
f8000000 l       *ABS*	00000000 PSS_SLCR_BASE_ADDR
0fffff00 l       *ABS*	00000000 RESERVED
fe00000f l       *ABS*	00000000 LRemap
f8f0277c l       *ABS*	00000000 L2CCWay
f8f02730 l       *ABS*	00000000 L2CCSync
f8f02100 l       *ABS*	00000000 L2CCCrtl
f8f02104 l       *ABS*	00000000 L2CCAuxCrtl
f8f02108 l       *ABS*	00000000 L2CCTAGLatReg
f8f0210c l       *ABS*	00000000 L2CCDataLatReg
f8f02220 l       *ABS*	00000000 L2CCIntClear
f8f0221c l       *ABS*	00000000 L2CCIntRaw
f8000004 l       *ABS*	00000000 SLCRlockReg
f8000008 l       *ABS*	00000000 SLCRUnlockReg
f8000a1c l       *ABS*	00000000 SLCRL2cRamReg
f8000244 l       *ABS*	00000000 SLCRCPURSTReg
f800d010 l       *ABS*	00000000 EFUSEStaus
00001005 l       *ABS*	00000000 CRValMmuCac
00002000 l       *ABS*	00000000 CRValHiVectorAddr
72360000 l       *ABS*	00000000 L2CCAuxControl
00000001 l       *ABS*	00000000 L2CCControl
00000111 l       *ABS*	00000000 L2CCTAGLatency
00000121 l       *ABS*	00000000 L2CCDataLatency
0000767b l       *ABS*	00000000 SLCRlockKey
0000df0d l       *ABS*	00000000 SLCRUnlockKey
00020202 l       *ABS*	00000000 SLCRL2cRamConfig
40000000 l       *ABS*	00000000 FPEXC_EN
01000144 l       .text	00000000 CheckEFUSE
0100013c l       .text	00000000 EndlessLoop0
0100017c l       .text	00000000 OKToRun
010003c8 l       .text	00000000 invalidate_dcache
01000324 l       .text	00000000 Sync
01000444 l       .text	00000000 finished
010003dc l       .text	00000000 loop1
01000438 l       .text	00000000 skip
01000418 l       .text	00000000 loop2
0100041c l       .text	00000000 loop3
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
0106d088 l     O .eh_frame	00000000 
010004dc l     F .text	00000000 deregister_tm_clones
01000500 l     F .text	00000000 register_tm_clones
0100052c l     F .text	00000000 __do_global_dtors_aux
01074020 l       .bss	00000001 completed.10177
0107400c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0100055c l     F .text	00000000 frame_dummy
01074024 l       .bss	00000018 object.10182
01074008 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 array.c
00000000 l    df *ABS*	00000000 common.c
00000000 l    df *ABS*	00000000 deque.c
01001a94 l     F .text	000000b8 expand_capacity
00000000 l    df *ABS*	00000000 hashset.c
00000000 l    df *ABS*	00000000 hashtable.c
00000000 l    df *ABS*	00000000 list.c
010043c4 l     F .text	000001f0 split
010045b4 l     F .text	00000170 list_add_all_at.part.3
00000000 l    df *ABS*	00000000 pqueue.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 ring_buffer.c
00000000 l    df *ABS*	00000000 slist.c
00000000 l    df *ABS*	00000000 stack.c
00000000 l    df *ABS*	00000000 treeset.c
00000000 l    df *ABS*	00000000 treetable.c
01008788 l     F .text	00000434 remove_node
01008bbc l     F .text	00000104 treetable_test
01008cc0 l     F .text	00000048 tree_destroy.part.0
00000000 l    df *ABS*	00000000 acq_hacks.c
00000000 l    df *ABS*	00000000 acquire.c
00000000 l    df *ABS*	00000000 clkwiz_interface.c
00000000 l    df *ABS*	00000000 dma_bd.c
00000000 l    df *ABS*	00000000 fabric_config.c
00000000 l    df *ABS*	00000000 hal.c
0100eed4 l     F .text	0000012c d_printf.constprop.8
0100f000 l     F .text	0000000c d_printf.constprop.9
0100f00c l     F .text	0000012c d_printf.constprop.10
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mipi_csi.c
0100fea4 l     F .text	00000274 mipi_csi_generate_sg_list_for_waves.constprop.3
00000000 l    df *ABS*	00000000 mipi_csi_hw.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 spi_commands.c
00000000 l    df *ABS*	00000000 system_control.c
00000000 l    df *ABS*	00000000 test_patterns.c
00000000 l    df *ABS*	00000000 trigger.c
00000000 l    df *ABS*	00000000 xaxidma.c
00000000 l    df *ABS*	00000000 xaxidma_sinit.c
00000000 l    df *ABS*	00000000 xaxidma_selftest.c
00000000 l    df *ABS*	00000000 xaxidma_bdring.c
00000000 l    df *ABS*	00000000 xaxidma_g.c
00000000 l    df *ABS*	00000000 xclk_wiz.c
010156a4 l     F .text	00000028 StubErrCallBack
00000000 l    df *ABS*	00000000 xclk_wiz_sinit.c
00000000 l    df *ABS*	00000000 xgpiops.c
00000000 l    df *ABS*	00000000 xgpiops_sinit.c
00000000 l    df *ABS*	00000000 xgpiops_intr.c
00000000 l    df *ABS*	00000000 xgpiops_g.c
00000000 l    df *ABS*	00000000 xscugic_intr.c
00000000 l    df *ABS*	00000000 xscugic.c
01017350 l     F .text	00000050 StubHandler
01074048 l     O .bss	00000004 CpuId
00000000 l    df *ABS*	00000000 xscugic_sinit.c
00000000 l    df *ABS*	00000000 xscugic_selftest.c
00000000 l    df *ABS*	00000000 xscutimer.c
00000000 l    df *ABS*	00000000 xscutimer_selftest.c
00000000 l    df *ABS*	00000000 xscutimer_sinit.c
00000000 l    df *ABS*	00000000 xscutimer_g.c
00000000 l    df *ABS*	00000000 xspips.c
010182c4 l     F .text	00000028 StubStatusHandler
00000000 l    df *ABS*	00000000 xspips_sinit.c
00000000 l    df *ABS*	00000000 xspips_g.c
00000000 l    df *ABS*	00000000 xspips_selftest.c
00000000 l    df *ABS*	00000000 xil_assert.c
0107404c l     O .bss	00000004 Xil_AssertCallbackRoutine
00000000 l    df *ABS*	00000000 print.c
00000000 l    df *ABS*	00000000 xil_cache.c
01019728 l     F .text	00000058 Xil_L2CacheEnable.part.0
00000000 l    df *ABS*	00000000 outbyte.c
00000000 l    df *ABS*	00000000 xplatform_info.c
00000000 l    df *ABS*	00000000 xil_printf.c
01019958 l     F .text	0000009c getnum
010199f4 l     F .text	00000034 padding.part.0
01019a28 l     F .text	00000164 outnum
00000000 l    df *ABS*	00000000 xil_exception.c
0101a018 l     F .text	00000004 Xil_ExceptionNullHandler
00000000 l    df *ABS*	00000000 xttcps.c
0101a0fc l     F .text	00000028 StubStatusHandler
00000000 l    df *ABS*	00000000 xttcps_sinit.c
00000000 l    df *ABS*	00000000 xttcps_g.c
00000000 l    df *ABS*	00000000 xttcps_options.c
01067ba0 l     O .rodata	00000054 TmrCtrOptionsTable
00000000 l    df *ABS*	00000000 xuartps_hw.c
00000000 l    df *ABS*	00000000 xclk_wiz_g.c
00000000 l    df *ABS*	00000000 xscugic_g.c
00000000 l    df *ABS*	00000000 xspips_options.c
01067bf4 l     O .rodata	00000030 OptionsTable
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 xil-crt0.S
00000000 l    df *ABS*	00000000 translation_table.o
00000000 l       *ABS*	00000000 SECT
00100000 l       *ABS*	00000000 DDR_START
0fffffff l       *ABS*	00000000 DDR_END
0ff00000 l       *ABS*	00000000 DDR_SIZE
000000ff l       *ABS*	00000000 DDR_REG
00000300 l       *ABS*	00000000 UNDEF_REG
00000000 l    df *ABS*	00000000 cpu_init.o
00000000 l    df *ABS*	00000000 xtime_l.c
00000000 l    df *ABS*	00000000 _udivsi3.o
0101af08 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _divsi3.o
0101b186 l       .text	00000000 .divsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
0106c6c0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0101bcd0 l     F .text	0000006c currentlocale
01067c28 l     O .rodata	0000001c categories
01074050 l     O .bss	000000e7 global_locale_string
01074138 l     O .bss	000000e0 new_categories.6704
01074218 l     O .bss	000000e0 saved_categories.6705
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
01067db0 l     O .rodata	00000048 JIS_state_table
01067df8 l     O .rodata	00000048 JIS_action_table
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mstats.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 qsort.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncasecmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0101e95c l     F .text	00000120 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
01067e40 l     O .rodata	00000010 blanks.8644
01067e50 l     O .rodata	00000010 zeroes.8645
00000000 l    df *ABS*	00000000 vfprintf.c
01022204 l     F .text	0000006a __sbprintf
01067e60 l     O .rodata	00000010 blanks.8659
01067e70 l     O .rodata	00000010 zeroes.8660
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 dtoa.c
010227c8 l     F .text	00000148 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010237c4 l     F .text	00000004 __fp_lock
010237d4 l     F .text	000000e4 __sinit.part.0
010238b8 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
01067f88 l     O .rodata	0000000c p05.7430
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
010680b0 l     O .rodata	00000010 blanks.8623
010680c0 l     O .rodata	00000010 zeroes.8624
00000000 l    df *ABS*	00000000 vfprintf.c
01026108 l     F .text	00000074 __sprint_r.part.0
01027128 l     F .text	0000006a __sbprintf
010680d0 l     O .rodata	00000010 blanks.8637
010680e0 l     O .rodata	00000010 zeroes.8638
00000000 l    df *ABS*	00000000 wcsnrtombs.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
01074330 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 envlock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 _sbrk.c
01074334 l     O .bss	00000004 heap.5714
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 write.c
010276e0 l     F .text	0000006c write.localalias.0
00000000 l    df *ABS*	00000000 read.c
01027750 l     F .text	0000005c read.localalias.0
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 inbyte.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 crtstuff.c
0106d088 l     O .eh_frame	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crtn.o
01027828 l     F .text	00000008 __qsort_from_arm
01027830 l     F .text	00000008 __free_from_arm
01027838 l     F .text	00000008 __strcmp_from_arm
010079ac g     F .text	00000124 slist_copy_shallow
010184cc g     F .text	00000284 XSpiPs_PolledTransfer
0101300c g     F .text	00000004 spicmd_csi_stream_unpop_start
010083c8 g     F .text	00000004 stack_conf_init
01024c80 g     F .text	00000028 _mprec_log10
01004c80 g     F .text	00000038 list_add_all_at
00010400 g       .stack	00000000 _supervisor_stack_end
01000cac g     F .text	000000c4 array_subarray
01008110 g     F .text	00000030 slist_zip_iter_init
01003428 g     F .text	0000000c deque_zip_iter_index
01024cf0 g     F .text	0000005a __any_on
0102752c g     F .text	00000026 _isatty_r
010153d4 g     F .text	00000218 XAxiDma_BdRingCheck
01068060 g     O .rodata	00000028 __mprec_tinytens
01019570 g     F .text	00000048 Xil_L1ICacheInvalidateRange
0106c358 g     O .data	00000058 XClk_Wiz_ConfigTable
01005a90 g     F .text	00000050 list_contains_value
0101e5dc g     F .text	000000c2 strcpy
01009554 g     F .text	00000034 treetable_get_first_key
010021d8 g     F .text	000001fc deque_remove_at
010250c0 g     F .text	0000001a cleanup_glue
01014e54 g     F .text	000000d8 XAxiDma_BdRingUnAlloc
01005c34 g     F .text	00000094 list_filter_mut
0101da28 g     F .text	00000068 _puts_r
010083cc g     F .text	00000088 stack_new
010112d8 g     F .text	000003a4 spi_isr_handler
010015d0 g     F .text	00000010 array_zip_iter_init
01027554 g     F .text	0000002c _lseek_r
01000000 g       .text	00000000 _vector_table
01007bfc g     F .text	00000034 slist_contains
010195b8 g     F .text	00000074 Xil_L2CacheDisable
0106d08c g       .eh_frame	00000000 __eh_framehdr_start
0100a3a0 g     F .text	000000ac treetable_foreach_value
0100e3a8 g     F .text	000001b8 dma_bd_add_zero_sg_entry
0106d088 g       .data	00000000 ___CTORS_LIST___
01005870 g     F .text	00000178 list_copy_deep
01013a1c g     F .text	000001ac trig_dump_state
01013244 g     F .text	00000004 spicmd_csi_setup_trigpos_range
01019204 g     F .text	00000058 Xil_ICacheInvalidateRange
01006dfc g     F .text	00000098 slist_destroy_cb
01003574 g     F .text	00000008 hashset_remove
0100e75c g     F .text	000000cc dma_bd_start
0101941c g     F .text	00000018 Xil_L1DCacheDisable
0100f888 g     F .text	000000d4 d_dump_malloc_info
00000400 g       *ABS*	00000000 _ABORT_STACK_SIZE
01018fac g     F .text	00000028 print
0101b750 g     F .text	0000005a .hidden __floatdidf
01005b38 g     F .text	00000008 list_size
0100642c g     F .text	0000003c pqueue_conf_init
01018978 g     F .text	0000005c XSpiPs_Abort
01006a74 g     F .text	00000004 queue_iter_next
01006600 g     F .text	00000054 pqueue_destroy_cb
0100dd24 g     F .text	000001dc dma_bd_allocate
01006a28 g     F .text	0000001c queue_destroy_cb
0101d9fc g     F .text	0000002a printf
0101acf0 g     F .text	0000009c XSpiPs_GetDelays
010222fc g     F .text	00000054 _wcrtomb_r
01001574 g     F .text	00000050 array_iter_replace
01025250 g     F .text	00000020 __sseek
0102398c g     F .text	00000008 __sinit
0100c978 g     F .text	000000b8 acq_get_ll_pointer
01015320 g     F .text	000000b4 XAxiDma_BdRingFree
010275ac g     F .text	000000b0 __swbuf_r
010156cc g     F .text	000000c8 XClk_Wiz_CfgInitialize
0101a04c g     F .text	00000030 Xil_PrefetchAbortHandler
01015eec g     F .text	000000e4 XGpioPs_ReadPin
0101c410 g     F .text	00000244 _setlocale_r
010238bc g     F .text	0000002e __sfmoreglue
010040e4 g     F .text	00000014 hashtable_iter_remove
01076c78 g     O .bss	000007c0 g_mipi_csi_state
010197ec g     F .text	00000014 Xil_L2CacheInvalidateLine
0101d954 g     F .text	00000002 __malloc_unlock
01015cf8 g     F .text	000000b8 XGpioPs_GetOutputEnable
01001db0 g     F .text	000000e0 deque_add_first
01013bc8 g     F .text	00000094 trig_init
010180dc g     F .text	00000088 XScuTimer_SetPrescaler
0100ca30 g     F .text	00000064 acq_get_ll_pointer_in_base
01007c30 g     F .text	00000050 slist_contains_value
01018f3c g     F .text	0000005c Xil_Assert
01010a24 g     F .text	00000064 mipi_csi_clear_queue
0100a564 g     F .text	000000e4 treetable_assert_rb_rules
01000b84 g     F .text	00000038 array_remove_last
01017de4 g     F .text	00000050 XScuGic_SetCpuID
01017c70 g     F .text	00000174 XScuGic_CfgInitialize
010227b4 g     F .text	0000000e __set_ctype
010112c4 g     F .text	00000004 enable_caches
0100a648 g     F .text	00000070 acq_hacks_init
0101d7e0 g     F .text	000000ce memmove
01023974 g     F .text	00000016 _cleanup
00010c00 g       .stack	00000000 __supervisor_stack
0101e100 g     F .text	00000090 snprintf
0101c67c g     F .text	00000020 __locale_ctype_ptr
01013018 g     F .text	0000002c spicmd_csi_status
0100b16c g     F .text	000005a8 acq_prepare_triggered
01024450 g     F .text	0000004c _Balloc
01004d7c g     F .text	00000188 list_splice_at
010143fc g     F .text	00000028 XAxiDma_SelectKeyHole
01074008 g       .ARM.exidx	00000000 __exidx_end
010160d0 g     F .text	00000124 XGpioPs_SetDirectionPin
0101a8bc g     F .text	00000018 XUartPs_SendByte
01013200 g     F .text	00000038 spicmd_acq_stop
0100d350 g     F .text	000000d4 clkwiz_init
01007cd0 g     F .text	00000064 slist_to_array
0101d994 g     F .text	0000001e _mstats_r
0101775c g     F .text	0000012c XScuGic_GetPriorityTriggerType
00011400 g       .stack	00000000 _undef_stack_end
0101a3a8 g     F .text	000000b0 XTtcPs_SetPrescaler
01006770 g     F .text	00000020 pqueue_top
010015e0 g     F .text	00000068 array_zip_iter_next
010051d0 g     F .text	00000108 list_remove_all_cb
010013d4 g     F .text	000001a0 array_iter_add
010277c0  w    F .text	00000010 __errno
010107b8 g     F .text	0000026c mipi_csi_generate_sg_list_for_waves
0101a09c g     F .text	00000004 Xil_ExceptionInit
010064f4 g     F .text	000000e8 pqueue_new_conf
0101371c g     F .text	00000040 trig_configure_always
010242ac g     F .text	00000034 _mallinfo_r
01018a58 g     F .text	000000d0 XSpiPs_CfgInitialize
0101d970 g     F .text	0000000e malloc_stats
01024118 g     F .text	00000004 __localeconv_l
010c1f20 g     O .bss	00000038 g_sysctrl_state
01012798 g     F .text	0000002c spicmd_acq_start
010085f4 g     F .text	00000088 treeset_new_conf
0100388c g     F .text	00000208 hashtable_add
0100f150 g     F .text	000001b4 bogo_calibrate
010224c8 g     F .text	00000054 __sjis_wctomb
01009520 g     F .text	00000034 treetable_get_last_value
01006c00 g     F .text	00000010 rbuf_is_empty
0100073c g     F .text	00000054 array_destroy_cb
01074010 g       .ARM.attributes	00000000 __sbss_start
01027500 g     F .text	0000002a _fstat_r
010034c4 g     F .text	00000088 hashset_new_conf
010188d8 g     F .text	000000a0 XSpiPs_SetStatusHandler
010065dc g     F .text	00000024 pqueue_destroy
010026cc g     F .text	00000144 deque_copy_deep
010c1f68 g     O .bss	00000004 errno
01011e00 g     F .text	00000090 spi_command_pack_response_simple
0102520c g     F .text	00000004 __seofread
0101adf0 g     F .text	00000014 PrefetchAbortInterrupt
01003434 g     F .text	00000004 hashset_conf_init
0101a8d4 g     F .text	0000001c XUartPs_RecvByte
01006bdc g     F .text	00000024 rbuf_destroy
01012fc8 g     F .text	00000040 spicmd_csi_set_params_queue
010060d4 g     F .text	00000044 list_diter_next
010024e0 g     F .text	00000014 deque_remove_all
01005ae0 g     F .text	00000058 list_index_of
0100d2c4 g     F .text	00000030 acq_get_wave_size_bytes
0100b888 g     F .text	00000070 acq_stop
01003148 g     F .text	0000000c deque_iter_index
0101b7b8 g     F .text	00000160 .hidden __aeabi_fadd
0101b7b4 g     F .text	00000164 .hidden __subsf3
01008e5c g     F .text	00000614 treetable_destroy
01010340 g     F .text	0000016c mipi_csi_queue_buffer
0106d088 g       .data	00000000 __fixup_start
01007f70 g     F .text	0000001c slist_iter_init
0100499c g     F .text	0000005c list_add
010094ec g     F .text	00000034 treetable_get_first_value
01019950 g     F .text	00000008 XGetPlatform_Info
01008140 g     F .text	0000007c slist_zip_iter_next
0101daa0 g     F .text	000005b4 qsort
01019434 g     F .text	0000005c Xil_DCacheFlush
01008104 g     F .text	0000000c slist_iter_index
0100012c g       .text	00000000 _boot
010196d8 g     F .text	00000020 Xil_DCacheInvalidate
01000790 g     F .text	000000ac array_add
01017624 g     F .text	00000138 XScuGic_SetPriorityTriggerType
010019e4 g     F .text	000000a0 array_zip_iter_replace
010127f4 g     F .text	0000002c spicmd_trig_configure_edge
01001e90 g     F .text	00000064 deque_add_last
01008018 g     F .text	00000070 slist_iter_add
010169b8 g     F .text	000000b8 XGpioPs_IntrGetStatus
01004360 g     F .text	00000064 hashtable_hash_ptr
0102251c g     F .text	00000070 __eucjp_wctomb
01001218 g     F .text	00000008 array_capacity
0100d324 g     F .text	00000028 acq_get_wave_bit_packed_depth
0100a748 g     F .text	00000184 _acq_irq_fifo_gen_rst
0106c2c0 g     O .data	00000008 XScuTimer_ConfigTable
01012828 g     F .text	00000004 spicmd_trig_arm
0106d088 g       .data	00000000 __fixup_end
0100da20 g     F .text	00000074 dma_bd_init
01001744 g     F .text	000002a0 array_zip_iter_add
010012f0 g     F .text	00000010 array_iter_init
01007e14 g     F .text	000000d4 slist_filter
010146d0 g     F .text	00000184 XAxiDma_UpdateBdRingCDesc
0101d200 g     F .text	000005e0 memcpy
0101598c g     F .text	000000b4 XGpioPs_Read
01003dc0 g     F .text	000000c4 hashtable_get_values
0101120c g     F .text	000000b8 mipi_csi_pack_padding
010025f4 g     F .text	000000d8 deque_copy_shallow
01008d08 g     F .text	00000028 treetable_conf_init
010189d4 g     F .text	00000084 XSpiPs_Reset
0106d088 g     O .data	00000000 .hidden __TMC_END__
01008750 g     F .text	00000008 treeset_iter_init
0100cfb8 g     F .text	000000d8 acq_dma_address_helper
010237c8 g     F .text	0000000c _cleanup_r
01001a84 g     F .text	0000000c array_zip_iter_index
0101eaf8 g     F .text	00001b4c _svfprintf_r
0101b6d8 g     F .text	00000022 .hidden __floatsidf
0101a07c g     F .text	00000020 Xil_UndefinedExceptionHandler
01010dd0 g     F .text	0000007c mipi_csi_get_status
0100083c g     F .text	0000019c array_add_at
01070000 g       .mmu_tbl	00000000 __mmu_tbl_start
01011b74 g     F .text	000000c8 spi_command_lut_gen
01010ae4 g     F .text	0000017c mipi_csi_process_queue_item
01074010 g       .ARM.attributes	00000000 __sdata_start
0101d9b4 g     F .text	00000026 mstats
0106d088 g       .data	00000000 __DTOR_END__
0100c8d8 g     F .text	000000a0 acq_debug_dump_waveraw
0101b9c8 g     F .text	00000000 .hidden __aeabi_uldivmod
010196f8 g     F .text	00000030 Xil_ICacheInvalidate
0101da90 g     F .text	00000010 puts
010112d0 g     F .text	00000004 init_platform
010035a4 g     F .text	00000008 hashset_iter_init
01008d30 g     F .text	00000094 treetable_new
00011000 g       .stack	00000000 __abort_stack
01074010 g       .fini_array	00000000 __fini_array_end
01007520 g     F .text	000000a4 slist_remove_last
0106c1f8 g       .rodata	00000000 __rodata_end
0100caf0 g     F .text	00000258 acq_debug_dump_wave_pointer
0101a124 g     F .text	0000011c XTtcPs_CfgInitialize
01008454 g     F .text	00000080 stack_new_conf
01002a7c g     F .text	00000008 deque_size
01024c20 g     F .text	00000060 __ratio
01019800 g     F .text	00000068 Xil_L2CacheInvalidateRange
0100a44c g     F .text	00000030 treetable_iter_init
010096b4 g     F .text	000000f4 treetable_get_lesser_than
0100d714 g     F .text	00000278 clkwiz_dump_state
0101c7b8 g     F .text	00000010 malloc
010133e0 g     F .text	00000018 systick_get_time_us_nonirq
0101d9dc g     F .text	00000020 _printf_r
0101af08 g     F .text	0000025c .hidden __udivsi3
010277d4  w    F .text	00000008 isatty
010081bc g     F .text	000000d4 slist_zip_iter_add
0100a47c g     F .text	000000a4 treetable_iter_next
010277b0  w    F .text	00000010 _fstat
0106d088 g       .data	00000000 __data1_start
0101167c g     F .text	0000043c spi_init
0101b920 g     F .text	0000001c .hidden __aeabi_i2f
0100d090 g     F .text	000000b8 acq_dma_address_helper_debug
010037c0 g     F .text	00000060 hashtable_conf_init
01067f98 g     O .rodata	000000c8 __mprec_tens
01002a84 g     F .text	00000008 deque_capacity
01013008 g     F .text	00000004 spicmd_csi_stream_clear_queue
0106c1f8 g       .data	00000000 __sbss2_end
0100e5c0 g     F .text	0000019c dma_bd_debug_dump
010050b4 g     F .text	00000074 list_remove_last
01013598 g     F .text	00000034 trig_zero_levels
010222dc g     F .text	0000001e vsnprintf
010c1f5c g     O .bss	00000004 UndefinedExceptionAddr
010127c4 g     F .text	00000004 spicmd_acq_rewind
0100f848 g     F .text	00000040 d_dump_timing_ex
01005f14 g     F .text	0000000c list_iter_index
0101aa48 g     F .text	000000b4 XSpiPs_GetOptions
01003d3c g     F .text	00000008 hashtable_size
01008558 g     F .text	00000004 stack_zip_iter_replace
010742fc g     O .bss	00000004 __malloc_top_pad
01009bd8 g     F .text	00000090 treetable_remove
0100f368 g     F .text	000001d8 d_printf
0100869c g     F .text	00000008 treeset_add
0107403c g     O .bss	00000004 test_sizeptr
01001348 g     F .text	0000008c array_iter_remove
0106c1f8 g     O .data	00000000 .hidden __dso_handle
0101b6b8 g     F .text	0000001e .hidden __aeabi_ui2d
0100df64 g     F .text	00000074 dma_bd_free
00010400 g       .stack	00000000 __irq_stack
0102411c g     F .text	0000001e _localeconv_r
01002490 g     F .text	00000050 deque_remove_last
01005ee8 g     F .text	0000002c list_iter_replace
01024674 g     F .text	00000012 __i2b
01023cbc g     F .text	0000032c __sfvwrite_r
01003594 g     F .text	00000008 hashset_capacity
010190f4 g     F .text	0000004c Xil_DCacheFlushLine
010112cc g     F .text	00000004 init_uart
0100e050 g     F .text	0000003c dma_bd_rewind
01001110 g     F .text	00000078 array_trim_capacity
0101baa0 g     F .text	00000116 .hidden __udivmoddi4
0101b434 g     F .text	00000000 .hidden __aeabi_drsub
0101e054 g     F .text	00000026 _sbrk_r
010172b0 g     F .text	00000028 StubHandler
01001d4c g     F .text	00000064 deque_add
0101ae7c g       .text	00000000 __cpu_init
0106c3b0 g     O .data	00000304 XScuGic_ConfigTable
0100f58c g     F .text	00000028 d_read_global_timer
01027580 g     F .text	0000002c _read_r
01014d98 g     F .text	0000001c XAxiDma_BdRingGetCoalesce
01001bd8 g     F .text	000000b4 deque_new_conf
01000fac g     F .text	00000110 array_filter
0102734c g     F .text	00000088 _fclose_r
01004a58 g     F .text	0000005c list_add_last
01006118 g     F .text	00000030 list_zip_iter_init
01004894 g     F .text	00000108 list_destroy_cb
01019780 g     F .text	00000018 Xil_L2CacheEnable
01008738 g     F .text	00000008 treeset_contains
0102379c g     F .text	00000028 fflush
01074328 g     O .bss	00000004 __malloc_max_sbrked_mem
01014424 g     F .text	00000028 XAxiDma_SelectCyclicMode
01017e34 g     F .text	00000010 XScuGic_GetCpuID
0101b6fc g     F .text	00000042 .hidden __extendsfdf2
0100550c g     F .text	000001f8 list_sublist
0101b440 g     F .text	00000276 .hidden __adddf3
0100f5b4 g     F .text	00000070 d_start_timing
00000800 g       *ABS*	00000000 _SUPERVISOR_STACK_SIZE
0e8c1f70 g       .heap	00000000 _heap_end
01024abc g     F .text	000000ae __b2d
01074000 g       .ARM.exidx	00000000 __exidx_start
01024254 g     F .text	00000056 __malloc_update_mallinfo
010276b0  w    F .text	00000018 lseek
0100a9d4 g     F .text	00000028 _acq_fast_dma_start
010277dc  w    F .text	00000008 _isatty
0101ada0 g     F .text	00000014 IRQInterrupt
01014078 g     F .text	000000b0 XAxiDma_Pause
01067c24 g     O .rodata	00000004 _global_impure_ptr
01014658 g     F .text	00000078 XAxiDma_Selftest
01024d4c g     F .text	00000372 _realloc_r
01005cc8 g     F .text	000000dc list_filter
0101e7dc g     F .text	0000005a strncasecmp
0101bc80 g     F .text	00000050 __libc_init_array
010c1f6c g       .bss	00000000 __bss_end
010139a0 g     F .text	0000007c trig_configure_holdoff
01000b10 g     F .text	00000074 array_remove_at
0101eaa4 g     F .text	0000001e strtol_l
010272b8 g     F .text	00000036 wcsnrtombs
0106c1f8 g       .data	00000000 __rodata1_start
01018830 g     F .text	000000a8 XSpiPs_GetSlaveSelect
01015a40 g     F .text	000000a8 XGpioPs_Write
010072b8 g     F .text	000000a0 slist_splice_at
01004cb8 g     F .text	000000c4 list_splice
01027494 g     F .text	00000026 _fputwc_r
01068088 g     O .rodata	00000028 __mprec_bigtens
01013014 g     F .text	00000004 spicmd_csi_stream_stop
0107613a g       .ARM.attributes	00000000 __ARM.attributes_end
01024540 g     F .text	00000098 __s2b
0101adc8 g     F .text	00000014 SWInterrupt
0101b6b8 g     F .text	0000001e .hidden __floatunsidf
01012848 g     F .text	00000780 spicmd_csi_setup_testpatt
01002a10 g     F .text	0000006c deque_index_of
01001a90 g     F .text	00000004 cc_common_cmp_str
01027670  w    F .text	00000040 _sbrk
01024928 g     F .text	0000003a __mcmp
01009cb4 g     F .text	00000038 treetable_remove_last
01074010 g       .ARM.attributes	00000000 __tbss_start
0100acd0 g     F .text	000000bc acq_get_next_alloc
0106c230 g     O .data	00000088 XAxiDma_ConfigTable
010239a4 g     F .text	00000016 __fp_lock_all
01017e44 g     F .text	0000001c XScuGic_LookupConfig
01027840 g     F .init	00000000 _init
01006c80 g     F .text	00000058 rbuf_dequeue
01019868 g     F .text	00000044 Xil_L2CacheFlush
01011c3c g     F .text	00000150 spi_transmit_packet_nonblock
0101eac4 g     F .text	00000030 strtol
0100a520 g     F .text	00000044 treetable_iter_remove
01019140 g     F .text	00000054 Xil_DCacheFlushRange
01000c4c g     F .text	00000008 array_get_buffer
0100b9d4 g     F .text	00000694 acq_debug_dump
01004050 g     F .text	00000094 hashtable_iter_next
01010f80 g     F .text	00000090 mipi_csi_send_eof
01002eb4 g     F .text	00000210 deque_iter_remove
0100da94 g     F .text	000001dc dma_bd_create_ring
010049f8 g     F .text	00000060 list_add_first
0101ba60 g     F .text	00000040 .hidden __aeabi_d2ulz
0101b7b4 g     F .text	00000164 .hidden __aeabi_fsub
010062f4 g     F .text	000000dc list_zip_iter_remove
0101bc50 g     F .text	00000030 __libc_fini_array
01002ae0 g     F .text	00000224 deque_filter_mut
01006ce8 g     F .text	00000020 slist_conf_init
01001cb4 g     F .text	00000024 deque_destroy
0102258c g     F .text	00000082 __jis_wctomb
01016ce4 g     F .text	000000c8 XGpioPs_SetIntrType
01017b94 g     F .text	000000dc XScuGic_Stop
010179d0 g     F .text	00000074 XScuGic_InterruptUnmapFromCpu
01004744 g     F .text	00000054 list_new
01024344 g     F .text	0000005e _malloc_stats_r
010250dc g     F .text	00000088 _reclaim_reent
00011400 g       .stack	00000000 __fiq_stack
010245d8 g     F .text	0000003e __hi0bits
0101a0a0 g     F .text	00000018 Xil_ExceptionRegisterHandler
01027860 g     O .rodata	00000018 fabcfg_dummy_tests
01008740 g     F .text	00000008 treeset_size
0101bbb8 g     F .text	00000012 calloc
0106c2d4 g     O .data	00000004 Xil_AssertWait
010c1f70 g       .heap	00000000 _heap_start
010162dc g     F .text	00000124 XGpioPs_SetOutputEnablePin
01018db4 g     F .text	0000001c XSpiPs_LookupConfig
00000400 g       *ABS*	00000000 _IRQ_STACK_SIZE
0101b94c g     F .text	0000007c .hidden __floatdisf
01074010 g       .ARM.attributes	00000000 __sbss_end
01019330 g     F .text	00000018 Xil_L1DCacheInvalidateLine
01003ff0 g     F .text	00000060 hashtable_iter_init
01016738 g     F .text	000000dc XGpioPs_IntrDisablePin
01003154 g     F .text	00000010 deque_zip_iter_init
01019490 g     F .text	00000018 Xil_L1DCacheFlushLine
00000400 g       *ABS*	00000000 _FIQ_STACK_SIZE
010047dc g     F .text	000000b8 list_destroy
010276e0  w    F .text	0000006c write
010024f4 g     F .text	0000005c deque_remove_all_cb
0100012c g       .text	00000000 _prestart
01006d08 g     F .text	00000054 slist_new
01016b58 g     F .text	000000ac XGpioPs_IntrClear
0100ad8c g     F .text	00000140 acq_append_next_alloc
0106d084 g     O .data	00000004 environ
01003f9c g     F .text	00000054 hashtable_foreach_value
01014854 g     F .text	00000218 XAxiDma_BdRingCreate
0101b440 g     F .text	00000276 .hidden __aeabi_dadd
01018fa8 g     F .text	00000004 XNullHandler
01007724 g     F .text	00000020 slist_get_last
01006a08 g     F .text	00000020 queue_destroy
0101e1d4 g     F .text	00000040 strcat
0100354c g     F .text	00000020 hashset_destroy
01003f48 g     F .text	00000054 hashtable_foreach_key
01019b8c g     F .text	0000048c xil_printf
0101ba20 g     F .text	00000040 .hidden __aeabi_f2ulz
0100ca94 g     F .text	0000005c acq_next_ll_pointer
010247c8 g     F .text	000000a2 __pow5mult
0101b740 g     F .text	0000006a .hidden __aeabi_ul2d
00011800 g       .stack	00000000 __undef_stack
0100b8f8 g     F .text	00000020 acq_abort_done
010083bc g     F .text	0000000c slist_zip_iter_index
0100a8cc g     F .text	00000084 _acq_irq_error_dma
0101b9f8 g     F .text	00000028 .hidden __popcountsi2
01015794 g     F .text	00000060 XClk_Wiz_GetInterruptSettings
01010e4c g     F .text	00000050 mipi_csi_get_size_report
01001220 g     F .text	00000018 array_sort
01009c68 g     F .text	0000004c treetable_remove_first
010084f4 g     F .text	0000001c stack_destroy_cb
0101b180 g     F .text	00000000 .hidden __aeabi_idiv
01008dc4 g     F .text	00000098 treetable_new_conf
0100f54c g     F .text	00000020 d_iskeypress
01018054 g     F .text	00000088 XScuTimer_Stop
01067c44 g     O .rodata	0000016c __C_locale
010102e8 g     F .text	00000058 mipi_csi_alloc_item
01009cec g     F .text	00000608 treetable_remove_all
01003820 g     F .text	0000006c hashtable_destroy
01027ba0 g     O .rodata	00040000 testpatt_norway_512x512_grey
01017020 g     F .text	0000010c XGpioPs_GetIntrTypePin
010181ec g     F .text	000000bc XScuTimer_SelfTest
0100f624 g     F .text	00000090 d_stop_timing
0100609c g     F .text	0000002c list_diter_replace
010035e4 g     F .text	00000034 hashtable_hash_string
010c1f60 g     O .bss	00000004 PrefetchAbortAddr
010143e0 g     F .text	0000001c XAxiDma_Busy
01017474 g     F .text	000000cc XScuGic_Disconnect
010053a4 g     F .text	00000078 list_get_at
0106d088 g       .data	00000000 __CTOR_LIST__
010011bc g     F .text	00000054 array_contains_value
010023d4 g     F .text	0000006c deque_remove
0101a2ec g     F .text	000000bc XTtcPs_GetMatchValue
0101a5d0 g     F .text	00000060 XTtcPs_InterruptHandler
01070000 g       .mmu_tbl	00000000 MMUTable
01006790 g     F .text	0000017c pqueue_pop
01005dc0 g     F .text	00000084 list_iter_remove
0101e07c g     F .text	00000084 _snprintf_r
0106c1f8 g       .data	00000000 __sbss2_start
01002900 g     F .text	0000005c deque_reverse
0101c3bc g     F .text	00000054 __get_locale_env
01019558 g     F .text	00000018 Xil_L1ICacheInvalidateLine
01023994 g     F .text	00000002 __sfp_lock_acquire
010243b0 g     F .text	00000000 memchr
01011aec g     F .text	00000088 spi_crc_lut_gen
01013ca0 g     F .text	00000018 trig_disarm
01023acc g     F .text	000001f0 _free_r
0101c654 g     F .text	00000020 __locale_mb_cur_max
010223a8 g     F .text	00000016 _wcsrtombs_r
01019508 g     F .text	0000001c Xil_L1ICacheEnable
0100a6b8 g     F .text	00000090 acq_hacks_run
01012820 g     F .text	00000004 spicmd_trig_configure_always
0100a9bc g     F .text	00000018 _acq_wait_for_ndone
010226d8 g     F .text	000000dc __call_exitprocs
0106c2c8 g     O .data	0000000c XSpiPs_ConfigTable
0100b934 g     F .text	000000a0 acq_make_status
01074338 g     O .bss	00000fa0 test_sizes
0100359c g     F .text	00000008 hashset_foreach
0101b43c g     F .text	0000027a .hidden __aeabi_dsub
01012670 g     F .text	00000004 spicmd_csi_setup_wave_range
0106cc54 g     O .data	00000020 __default_locale
010134ec g     F .text	00000004 sysctrl_xadc_tick
010105f0 g     F .text	000000ec mipi_csi_queue_all_waves
0106d07c g     O .data	00000004 __malloc_sbrk_base
0101ae18 g       .text	00000064 _start
01075b78 g     O .bss	00000004 g_void_zone
0101900c g     F .text	000000e8 Xil_DCacheInvalidateRange
01001188 g     F .text	00000034 array_contains
01012674 g     F .text	00000030 spicmd_hello
01011d8c g     F .text	00000048 spi_command_find_free_slot
0101b740 g     F .text	0000006a .hidden __floatundidf
010276c8  w    F .text	00000018 _lseek
010036d4 g     F .text	000000ec hashtable_new_conf
010086e4 g     F .text	0000001c treeset_get_last
01002180 g     F .text	00000058 deque_replace_at
01019524 g     F .text	0000001c Xil_L1ICacheDisable
01007704 g     F .text	00000020 slist_get_first
01027860 g       .rodata	00000000 __rodata_start
01009588 g     F .text	00000034 treetable_get_last_key
0106c218 g     O .data	00000018 acq_substate_to_str
0100836c g     F .text	00000050 slist_zip_iter_replace
0102486c g     F .text	000000ba __lshift
01002440 g     F .text	00000050 deque_remove_first
01003210 g     F .text	000000bc deque_zip_iter_add
01027750  w    F .text	0000005c read
01016400 g     F .text	000000e8 XGpioPs_GetOutputEnablePin
0101b920 g     F .text	0000001c .hidden __floatsisf
0100358c g     F .text	00000008 hashset_size
01025278 g     F .text	000000f8 __ssprint_r
01013c5c g     F .text	0000002c trig_has_trigd
01008560 g     F .text	00000094 treeset_new
01000d70 g     F .text	000000a0 array_copy_shallow
01074010 g       *ABS*	00000000 _SDA_BASE_
0101cf90 g     F .text	00000082 __sjis_mbtowc
0101e6a0 g     F .text	00000056 strlcpy
01006fa0 g     F .text	000000b4 slist_add_at
0101e838 g     F .text	000000a2 strncmp
01004f88 g     F .text	000000b8 list_remove_at
010191cc g     F .text	00000038 Xil_ICacheInvalidateLine
010223c0 g     F .text	00000022 wcsrtombs
0106d088 g       .data	00000000 __data_end
01016dac g     F .text	000000d4 XGpioPs_GetIntrType
01000718 g     F .text	00000024 array_destroy
01015ae8 g     F .text	000000ac XGpioPs_SetDirection
01024688 g     F .text	0000013e __multiply
0100f790 g     F .text	000000b8 d_dump_timing
01015db0 g     F .text	0000013c XGpioPs_GetBankPin
01006a64 g     F .text	00000008 queue_foreach
010c1f70 g       .heap	00000000 HeapBase
01005f20 g     F .text	00000044 list_iter_next
0101e8dc g     F .text	0000007e strncpy
01074300 g     O .bss	00000028 __malloc_current_mallinfo
01003618 g     F .text	000000bc hashtable_new
01024b6c g     F .text	000000b2 __d2b
0100e560 g     F .text	0000002c dma_bd_flush_to_ram
0101e190 g     F .text	00000044 strcasecmp
01077438 g     O .bss	00000010 g_version_resp
01017a44 g     F .text	000000d4 XScuGic_Disable
01008554 g     F .text	00000004 stack_zip_iter_next
01004ab4 g     F .text	000000e8 list_add_at
0100f710 g     F .text	00000080 d_read_timing_us
0100aa54 g     F .text	000000b8 acq_write_training
01081f20 g     O .bss	00040000 testpatt_buffer
01006148 g     F .text	0000006c list_zip_iter_next
01003a94 g     F .text	000000c0 hashtable_get
010030e8 g     F .text	00000060 deque_iter_replace
0101323c g     F .text	00000004 spicmd_csi_setup_bitpack_wave
0101a458 g     F .text	00000098 XTtcPs_GetPrescaler
01000a64 g     F .text	000000ac array_remove
01000608 g     F .text	000000d8 array_new_conf
010060c8 g     F .text	0000000c list_diter_index
01003d44 g     F .text	00000008 hashtable_capacity
01001648 g     F .text	000000fc array_zip_iter_remove
0102731c g     F .text	00000026 _close_r
0106c310 g     O .data	00000048 XTtcPs_ConfigTable
0101adb4 g     F .text	00000014 UndefinedException
010c1f64 g     O .bss	00000004 DataAbortAddr
0101b6d8 g     F .text	00000022 .hidden __aeabi_i2d
01007358 g     F .text	000000c4 slist_remove
01010118 g     F .text	000001d0 mipi_csi_init
01008528 g     F .text	00000008 stack_size
010157f4 g     F .text	0000001c XClk_Wiz_LookupConfig
01013238 g     F .text	00000004 spicmd_csi_setup_trigpos_all
01006a6c g     F .text	00000008 queue_iter_init
01006654 g     F .text	0000011c pqueue_push
01017e60 g     F .text	000000b4 XScuGic_SelfTest
01019648 g     F .text	00000024 Xil_ICacheDisable
010080b4 g     F .text	00000050 slist_iter_next
0101962c g     F .text	0000001c Xil_DCacheDisable
00010000 g       .stack	00000000 _irq_stack_end
0101b93c g     F .text	0000008c .hidden __floatundisf
01022610 g     F .text	000000c6 __swsetup_r
0101b430  w    F .text	00000002 .hidden __aeabi_ldiv0
010752d8 g     O .bss	000008a0 g_acq_state
010238ec g     F .text	00000086 __sfp
01024ca8 g     F .text	00000046 __copybits
010097a8 g     F .text	00000008 treetable_size
01012830 g     F .text	00000018 spicmd_csi_setup_addr_range
0106cc74 g     O .data	00000408 __malloc_av_
0101b918 g     F .text	00000024 .hidden __aeabi_ui2f
01009470 g     F .text	0000007c treetable_get
010239a0 g     F .text	00000002 __sinit_lock_release
01000c54 g     F .text	00000058 array_index_of
01022270 g     F .text	0000006a _vsnprintf_r
0106d08c g       .eh_frame	00000000 __eh_framehdr_end
010251e8 g     F .text	00000022 __sread
01019940 g     F .text	00000010 outbyte
0100d424 g     F .text	000002f0 clkwiz_change_mipi_freq
01011ef4 g     F .text	0000077c spi_command_tick
0100a2f4 g     F .text	000000ac treetable_foreach_key
01077448 g     O .bss	00007f00 spi_resp_buffer
0101abbc g     F .text	00000088 XSpiPs_GetClkPrescaler
0101d950 g     F .text	00000002 __malloc_lock
0107400c g       .fini_array	00000000 __fini_array_start
0100fe84 g     F .text	00000020 d_trap_handle
010086c8 g     F .text	0000001c treeset_get_first
01023768 g     F .text	00000032 _fflush_r
01010748 g     F .text	0000006c mipi_csi_free_item
0101cd88 g     F .text	00000208 __utf8_mbtowc
01008758 g     F .text	0000002c treeset_iter_next
010035ac g     F .text	00000034 hashset_iter_next
0101bbcc g     F .text	00000062 _calloc_r
01019310 g     F .text	00000020 Xil_L1DCacheEnable
01014f2c g     F .text	000002a0 XAxiDma_BdRingToHw
01014a6c g     F .text	00000138 XAxiDma_BdRingClone
01010ec0 g     F .text	000000c0 mipi_csi_send_sof
010155ec g     F .text	000000b8 XAxiDma_BdRingDumpRegs
0100ce08 g     F .text	000001b0 acq_copy_slow_mipi
01074020 g       .bss	00000000 __bss_start
00010000 g       *ABS*	00000000 _STACK_SIZE
01074010 g       .ARM.attributes	00000000 __tdata_start
01074010 g       .ARM.attributes	00000000 __tdata_end
0101d8b0 g     F .text	000000a0 memset
010277f8 g     F .text	0000002c main
01006a44 g     F .text	00000008 queue_peek
0101444c g     F .text	000001ac XAxiDma_SimpleTransfer
0100f540 g     F .text	0000000c d_waitkey
01074044 g     O .bss	00000004 test_counter
0107432c g     O .bss	00000004 __malloc_max_total_mem
0d800000 g       *ABS*	00000000 _HEAP_SIZE
010095bc g     F .text	000000f8 treetable_get_greater_than
01006018 g     F .text	00000084 list_diter_remove
0101b94c g     F .text	0000007c .hidden __aeabi_l2f
0102765c g     F .text	00000012 __swbuf
01007620 g     F .text	00000098 slist_remove_all_cb
01000c08 g     F .text	00000020 array_get_at
0101d014 g     F .text	000000b6 __eucjp_mbtowc
010032cc g     F .text	00000090 deque_zip_iter_remove
01005e44 g     F .text	000000a4 list_iter_add
0101af08 g     F .text	00000000 .hidden __aeabi_uidiv
01006b20 g     F .text	00000094 rbuf_conf_new
01017f14 g     F .text	000000b0 XScuTimer_CfgInitialize
01011dd4 g     F .text	0000002c spi_command_count_allocated
01025270 g     F .text	00000008 __sclose
01017fc4 g     F .text	00000090 XScuTimer_Start
01005704 g     F .text	0000016c list_copy_shallow
0101d980 g     F .text	00000012 mallopt
010273d4 g     F .text	00000010 fclose
0100b918 g     F .text	0000001c acq_is_done
0101ea7c g     F .text	00000028 _strtol_r
01006eec g     F .text	0000005c slist_add_first
01024080 g     F .text	00000088 _findenv_r
01008520 g     F .text	00000008 stack_pop
0107400c g       .init_array	00000000 __init_array_end
010112c8 g     F .text	00000004 disable_caches
01022910 g     F .text	00000d0c _dtoa_r
01011010 g     F .text	000000a0 mipi_csi_stop
0101c7d8 g     F .text	00000564 _malloc_r
0101925c g     F .text	000000b4 Xil_L1DCacheInvalidate
010242e0 g     F .text	00000064 _mallopt_r
0102240c g     F .text	00000018 __ascii_wctomb
0101a804 g     F .text	000000b8 XTtcPs_GetOptions
010097b0 g     F .text	00000074 treetable_contains_key
0100e58c g     F .text	00000034 dma_bd_finalise
0100b094 g     F .text	000000d8 acq_swap
01002e38 g     F .text	00000010 deque_iter_init
01002d04 g     F .text	00000134 deque_filter
0101b750 g     F .text	0000005a .hidden __aeabi_l2d
01074040 g     O .bss	00000004 g_frame_ctr
01022424 g     F .text	000000a4 __utf8_wctomb
010165b0 g     F .text	000000dc XGpioPs_IntrEnablePin
01015fd0 g     F .text	00000100 XGpioPs_WritePin
0101668c g     F .text	000000ac XGpioPs_IntrDisable
010239d4 g     F .text	0000001e _fiprintf_r
0101a4f0 g     F .text	000000e0 XTtcPs_CalcIntervalFromFreq
01027348 g     F .text	00000002 __env_unlock
01023fe8 g     F .text	00000048 _fwalk
00000000 g       .stack	00000000 _stack_end
010c1f58 g     O .bss	00000004 Xil_AssertStatus
0100a9fc g     F .text	00000058 _acq_core_dma_start
01007de8 g     F .text	0000002c slist_foreach
010076b8 g     F .text	0000004c slist_replace_at
0100c844 g     F .text	00000094 acq_debug_ll_dump
0101cd3c g     F .text	00000026 _mbtowc_r
01013460 g     F .text	0000008c sysctrl_led_tick
01027878 g     O .rodata	0000030c spi_command_defs
0101b93c g     F .text	0000008c .hidden __aeabi_ul2f
01004798 g     F .text	00000044 list_new_conf
0101ba20 g     F .text	00000040 .hidden __fixunssfdi
01005384 g     F .text	00000020 list_get_last
01014cd0 g     F .text	00000054 XAxiDma_BdRingStart
0106d088 g       .data	00000000 ___DTORS_END___
0101b180 g     F .text	00000294 .hidden __divsi3
010194a8 g     F .text	00000048 Xil_L1DCacheFlushRange
0101aeb8 g     F .text	00000024 XTime_SetTime
01006a8c g     F .text	00000004 queue_zip_iter_replace
01074010 g       .ARM.attributes	00000000 __sdata_end
01023a20 g     F .text	000000aa _malloc_trim_r
01027194 g     F .text	000000f4 _wcsnrtombs_l
0106c1f8 g       .data	00000000 __sdata2_start
0100e08c g     F .text	00000168 dma_bd_add_raw_sg_entry
0100855c g     F .text	00000004 treeset_conf_init
01005da4 g     F .text	0000001c list_iter_init
0106d088 g       .data	00000000 __CTOR_END__
0106d088 g       .data	00000000 ___DTORS_LIST___
0100ed48 g     F .text	00000164 fabcfg_init
01005364 g     F .text	00000020 list_get_first
0101e308 g     F .text	000002dc strcmp
010194f0 g     F .text	00000018 Xil_L1DCacheStoreLine
0100f6b4 g     F .text	0000005c d_read_timing
010182a8 g     F .text	0000001c XScuTimer_LookupConfig
01018dd0 g     F .text	0000016c XSpiPs_SelfTest
01014d24 g     F .text	00000074 XAxiDma_BdRingSetCoalesce
0106d088 g       .data	00000000 __DTOR_LIST__
0101282c g     F .text	00000004 spicmd_trig_disarm
0102710c g     F .text	0000001a vfiprintf
010126a4 g     F .text	00000010 spicmd_version
01008784 g     F .text	00000004 treeset_iter_remove
01003d4c g     F .text	00000074 hashtable_contains_key
01006cd8 g     F .text	00000010 rbuf_peek
01006a5c g     F .text	00000008 queue_size
01013e3c g     F .text	0000023c XAxiDma_CfgInitialize
0101ba60 g     F .text	00000040 .hidden __fixunsdfdi
01006a4c g     F .text	00000008 queue_poll
0102784c g     F .fini	00000000 _fini
01000edc g     F .text	000000d0 array_filter_mut
010110b0 g     F .text	0000015c mipi_csi_transfer_packet
0100e1f4 g     F .text	000001b4 dma_bd_add_large_sg_entry
010197bc g     F .text	00000030 Xil_ICacheEnable
0101c6b0 g     F .text	00000012 memalign
01008700 g     F .text	0000001c treeset_get_greater_than
01014128 g     F .text	000002b8 XAxiDma_Resume
010133f8 g     F .text	00000068 sysctrl_led_mode
0101992c g     F .text	00000014 Xil_L2CacheStoreLine
010742f8 g     O .bss	00000004 _PathLocale
01002a8c g     F .text	00000008 deque_get_buffer
01004b9c g     F .text	000000e4 list_add_all
01008538 g     F .text	00000008 stack_iter_init
01011e90 g     F .text	00000064 spi_command_pack_response_pre_alloc
01013010 g     F .text	00000004 spicmd_csi_stream_unpop_start_all
00010c00 g       .stack	00000000 _abort_stack_end
01027288 g     F .text	00000030 _wcsnrtombs_r
010272f0 g     F .text	0000002c _write_r
0100c068 g     F .text	000007dc _acq_irq_rx_handler
01007ee8 g     F .text	00000088 slist_filter_mut
0100eeb0 g     F .text	00000024 irq_xscutimer
010030c4 g     F .text	00000024 deque_iter_add
0101c69c g     F .text	00000012 setlocale
01013cdc g     F .text	00000114 XAxiDma_Reset
01008088 g     F .text	0000002c slist_iter_replace
0101b7ac g     F .text	0000016c .hidden __aeabi_frsub
0107f348 g     O .bss	00000bc8 g_spi_state
010059e8 g     F .text	00000074 list_to_array
010015c4 g     F .text	0000000c array_iter_index
01010e9c g     F .text	00000024 mipi_csi_send_fifo_reset
010025bc g     F .text	00000038 deque_get_last
0100867c g     F .text	00000020 treeset_destroy
01008748 g     F .text	00000008 treeset_foreach
0106c6b8 g     O .data	00000004 _impure_ptr
010061b4 g     F .text	00000140 list_zip_iter_add
01006a7c g     F .text	0000000c queue_zip_iter_init
0102361c g     F .text	0000014a __sflush_r
01008540 g     F .text	00000004 stack_iter_next
01018750 g     F .text	000000e0 XSpiPs_SetSlaveSelect
01001ef4 g     F .text	0000028c deque_add_at
0100356c g     F .text	00000008 hashset_add
01007744 g     F .text	00000044 slist_get_at
01007260 g     F .text	00000058 slist_splice
0100dc70 g     F .text	000000b4 dma_bd_destroy_ring
01000e10 g     F .text	000000cc array_copy_deep
01074008 g       .init_array	00000000 __preinit_array_end
01005128 g     F .text	000000a8 list_remove_all
01025370 g     F .text	00000d96 _svfiprintf_r
0101bd3c g     F .text	00000680 __loadlocale
010106dc g     F .text	0000006c mipi_csi_set_datatype_and_frame_wct
0106c1fc g     O .data	0000001c acq_state_to_str
01001300 g     F .text	00000048 array_iter_next
0106c1f8 g       .data	00000000 __sdata2_end
010006e0 g     F .text	00000038 array_conf_init
0100357c g     F .text	00000008 hashset_remove_all
01007790 g     F .text	00000044 slist_reverse
0101cd64 g     F .text	00000024 __ascii_mbtowc
01024a6c g     F .text	00000050 __ulp
010239bc g     F .text	00000016 __fp_unlock_all
01015c4c g     F .text	000000ac XGpioPs_SetOutputEnable
01006990 g     F .text	00000078 queue_new_conf
01010c60 g     F .text	00000170 mipi_csi_tick
0100cd48 g     F .text	000000c0 acq_debug_dump_wave
010040f8 g     F .text	00000268 hashtable_hash
010098dc g     F .text	000002fc treetable_add
01005b40 g     F .text	000000b8 list_sort
010277e4 g     F .text	0000000c inbyte
0101d958 g     F .text	00000016 mallinfo
01013248 g     F .text	00000050 sysctrl_tick_irq
01010ab8 g     F .text	0000002c mipi_csi_unpop_and_start_all
01013240 g     F .text	00000004 spicmd_csi_setup_wave_all
01011ab8 g     F .text	00000034 spi_reset_hw
0100eb84 g     F .text	000001c4 fabcfg_dump_state
0100690c g     F .text	00000004 queue_conf_init
010178fc g     F .text	000000d4 XScuGic_Enable
0106c2d8 g     O .data	00000038 XExc_VectorTable
0100295c g     F .text	0000004c deque_contains
01006bb4 g     F .text	00000028 rbuf_conf_init
01006a88 g     F .text	00000004 queue_zip_iter_next
010164e8 g     F .text	0000001c XGpioPs_LookupConfig
01005f64 g     F .text	00000020 list_diter_init
01008518 g     F .text	00000008 stack_peek
01000c28 g     F .text	00000024 array_get_last
0102413c g     F .text	0000001e localeconv
010134f0 g     F .text	000000a8 sysctrl_main_loop
0106d088 g       .data	00000000 ___CTORS_END___
0102415c g     F .text	0000005c __swhatbuf_r
010077d4 g     F .text	000001d8 slist_sublist
00010000 g       .stack	00000000 __stack
01008290 g     F .text	000000dc slist_zip_iter_remove
01006468 g     F .text	0000008c pqueue_new
0101b164 g     F .text	0000001a .hidden __aeabi_uidivmod
01005040 g     F .text	00000074 list_remove_first
010010bc g     F .text	00000054 array_reverse
0101a0d8 g     F .text	00000024 Xil_ExceptionRemoveHandler
0e8c1f70 g       .heap	00000000 HeapLimit
0102774c  w    F .text	00000004 _write
0100a990 g     F .text	0000002c _acq_reset_trigger
01002550 g     F .text	00000044 deque_get_at
00011800 g       .stack	00000000 _end
010035e0 g     F .text	00000004 hashset_iter_remove
01007f8c g     F .text	0000008c slist_iter_remove
0101a8f0 g     F .text	00000054 XUartPs_ResetHw
0106c2b8 g     O .data	00000008 XGpioPs_ConfigTable
01010a88 g     F .text	00000030 mipi_csi_unpop_and_start
0106c1f8 g       .data	00000000 __rodata1_end
010112d4 g     F .text	00000004 cleanup_platform
010273e4 g     F .text	000000ae __fputwc
01012824 g     F .text	00000004 spicmd_trig_force
0101712c g     F .text	000000a0 XGpioPs_SetCallbackHandler
0106d088 g       .data	00000000 __data1_end
01007ad0 g     F .text	0000012c slist_copy_deep
01003cc8 g     F .text	00000074 hashtable_remove_all
0101addc g     F .text	00000014 DataAbortInterrupt
01014db4 g     F .text	000000a0 XAxiDma_BdRingAlloc
01001210 g     F .text	00000008 array_size
0100df00 g     F .text	00000064 dma_bd_free_from
01008548 g     F .text	0000000c stack_zip_iter_init
0100741c g     F .text	000000a4 slist_remove_at
010029a8 g     F .text	00000068 deque_contains_value
010009d8 g     F .text	00000044 array_replace_at
010171cc g     F .text	000000e4 XGpioPs_IntrHandler
010161f4 g     F .text	000000e8 XGpioPs_GetDirectionPin
01005bf8 g     F .text	00000010 list_sort_in_place
01025210 g     F .text	0000003e __swrite
010135cc g     F .text	00000150 trig_write_levels
0106d080 g     O .data	00000004 __malloc_trim_threshold
01013298 g     F .text	00000148 sysctrl_init
01003e84 g     F .text	000000c4 hashtable_get_keys
010c1f70 g       .heap	00000000 _heap
0100335c g     F .text	000000cc deque_zip_iter_replace
0101bc30 g     F .text	00000020 exit
010239f4 g     F .text	0000002a fiprintf
01026190 g     F .text	00000f7c _vfiprintf_r
01075b80 g     O .bss	000010f8 g_hal
010074c0 g     F .text	00000060 slist_remove_first
01024030 g     F .text	00000050 _fwalk_reent
0101d0cc g     F .text	00000126 __jis_mbtowc
01007788 g     F .text	00000008 slist_size
01005c08 g     F .text	0000002c list_foreach
01003b54 g     F .text	00000174 hashtable_remove
0101b918 g     F .text	00000024 .hidden __floatunsisf
01024964 g     F .text	00000106 __mdiff
01008544 g     F .text	00000004 stack_iter_replace
0100aecc g     F .text	00000064 acq_free_all_alloc_core
010127c8 g     F .text	0000002c spicmd_acq_status
01016c04 g     F .text	000000e0 XGpioPs_IntrClearPin
0101a710 g     F .text	000000f4 XTtcPs_SetOptions
0101c6c4 g     F .text	000000f4 _memalign_r
01017b18 g     F .text	0000007c XScuGic_UnmapAllInterruptsFromCpu
01074010 g       .ARM.attributes	00000000 __tbss_end
01006f48 g     F .text	00000058 slist_add_last
01006d5c g     F .text	00000044 slist_new_conf
01023998 g     F .text	00000002 __sfp_lock_release
0100a950 g     F .text	00000040 _acq_reset_PL_fifo
01008510 g     F .text	00000008 stack_push
0100f304 g     F .text	00000064 bogo_delay
01003584 g     F .text	00000008 hashset_contains
01067e80 g     O .rodata	00000101 _ctype_
0101ac44 g     F .text	000000ac XSpiPs_SetDelays
01013c88 g     F .text	00000018 trig_arm
01007054 g     F .text	000000e4 slist_add_all
010277ac  w    F .text	00000004 _read
0101b430  w    F .text	00000002 .hidden __aeabi_idiv0
01074008 g       .init_array	00000000 __init_array_start
01002a94 g     F .text	0000004c deque_foreach
010107b4 g     F .text	00000004 mipi_csi_generate_sg_list_for_buffer_range
01005f84 g     F .text	00000094 list_diter_add
01015810 g     F .text	0000017c XGpioPs_CfgInitialize
01005a5c g     F .text	00000034 list_contains
01018164 g     F .text	00000088 XScuTimer_GetPrescaler
01016e80 g     F .text	000001a0 XGpioPs_SetIntrTypePin
01003438 g     F .text	0000008c hashset_new
010151cc g     F .text	00000154 XAxiDma_BdRingFromHw
010277d0  w    F .text	00000004 _exit
01006a90 g     F .text	00000090 rbuf_new
0100dfd8 g     F .text	00000078 dma_bd_trim
01018fd4 g     F .text	00000038 Xil_DCacheInvalidateLine
01006420 g     F .text	0000000c list_zip_iter_index
0100d2f4 g     F .text	00000030 acq_get_wave_bit_depth
010145f8 g     F .text	00000030 XAxiDma_LookupConfig
010126b4 g     F .text	00000068 spicmd_stats
010241b8 g     F .text	0000009a __smakebuf_r
0101ad8c g     F .text	00000014 FIQInterrupt
01017540 g     F .text	000000e4 XScuGic_SoftwareIntr
0101e700 g     F .text	000000dc strlen
01002810 g     F .text	000000f0 deque_trim_capacity
0100d98c g     F .text	00000094 clkwiz_commit
0100541c g     F .text	000000f0 list_reverse
0101c674 g     F .text	00000006 __locale_ctype_ptr_l
0107ff10 g     O .bss	00002000 g_spi_command_lut
01000bc8 g     F .text	00000040 array_remove_all_free
0100b028 g     F .text	0000006c acq_rewind
00010000 g       .stack	00000000 _stack
01013df0 g     F .text	0000004c XAxiDma_ResetIsDone
0101aafc g     F .text	000000c0 XSpiPs_SetClkPrescaler
0100d148 g     F .text	0000017c acq_dma_clipped_address_helper
01000584 g     F .text	00000084 array_new
01004724 g     F .text	00000020 list_conf_init
01015b94 g     F .text	000000b8 XGpioPs_GetDirection
010086c0 g     F .text	00000008 treeset_remove_all
0102617c g     F .text	00000012 __sprint_r
010182ec g     F .text	000001e0 XSpiPs_Transfer
01006c10 g     F .text	00000008 rbuf_size
0101e214 g     F .text	000000e4 strchr
01003164 g     F .text	000000ac deque_zip_iter_next
01018f98 g     F .text	00000010 Xil_AssertSetCallback
0101b6fc g     F .text	00000042 .hidden __aeabi_f2d
010172d8 g     F .text	00000078 XScuGic_InterruptHandler
010086a4 g     F .text	0000001c treeset_remove
01008530 g     F .text	00000008 stack_map
0106c1f8 g       .data	00000000 __data_start
010198c4 g     F .text	00000068 Xil_L2CacheFlushRange
010173a0 g     F .text	000000d4 XScuGic_Connect
01001274 g     F .text	0000007c array_reduce
01006a78 g     F .text	00000004 queue_iter_replace
010075c4 g     F .text	0000005c slist_remove_all
010052d8 g     F .text	0000008c list_replace_at
01019194 g     F .text	00000038 Xil_DCacheStoreLine
01014ba4 g     F .text	0000012c XAxiDma_StartBdRingHw
01006910 g     F .text	00000080 queue_new
01006e94 g     F .text	00000058 slist_add
0101966c g     F .text	0000006c Xil_L2CacheInvalidate
010223e4 g     F .text	00000026 _wctomb_r
01027344 g     F .text	00000002 __env_lock
010104ac g     F .text	00000144 mipi_csi_queue_waverange
00011000 g       .stack	00000000 _fiq_stack_end
01007138 g     F .text	00000128 slist_add_all_at
0100f56c g     F .text	00000020 d_getkey
0101b43c g     F .text	0000027a .hidden __subdf3
01020648 g     F .text	00001ba0 _vfprintf_r
01001c8c g     F .text	00000028 deque_conf_init
0101a240 g     F .text	000000ac XTtcPs_SetMatchValue
01019390 g     F .text	0000008c Xil_L1DCacheFlush
01074008 g       .init_array	00000000 __preinit_array_start
00000400 g       *ABS*	00000000 _UNDEF_STACK_SIZE
01000a1c g     F .text	00000048 array_swap_at
01013cb8 g     F .text	00000024 trig_force
01004f04 g     F .text	00000084 list_remove
01016a70 g     F .text	000000e8 XGpioPs_IntrGetStatusPin
01000bbc g     F .text	0000000c array_remove_all
01019540 g     F .text	00000018 Xil_L1ICacheInvalidate
01006c18 g     F .text	00000068 rbuf_enqueue
01006da0 g     F .text	0000005c slist_destroy
01024618 g     F .text	0000005c __lo0bits
01007c80 g     F .text	00000050 slist_index_of
0101b414 g     F .text	0000001a .hidden __aeabi_idivmod
0100ab0c g     F .text	000001c4 acq_init
01017888 g     F .text	00000074 XScuGic_InterruptMaptoCpu
0100871c g     F .text	0000001c treeset_get_lesser_than
010198ac g     F .text	00000018 Xil_L2CacheFlushLine
0101a630 g     F .text	000000a0 XTtcPs_SetStatusHandler
01014628 g     F .text	00000030 XAxiDma_LookupConfigBaseAddr
0101a01c g     F .text	00000030 Xil_DataAbortHandler
0106c1f8 g       *ABS*	00000000 _SDA2_BASE_
0101aedc g     F .text	00000028 XTime_GetTime
01002e48 g     F .text	0000006c deque_iter_next
01022350 g     F .text	00000056 wcrtomb
01007d34 g     F .text	000000b4 slist_sort
0100af30 g     F .text	000000f8 acq_free_all_alloc
0100b714 g     F .text	00000174 acq_start
0101a0b8 g     F .text	00000020 Xil_GetExceptionRegisterHandler
0100f138 g     F .text	00000018 d_xilinx_assert
01025168 g     F .text	00000080 frexp
010084d4 g     F .text	00000020 stack_destroy
01016504 g     F .text	000000ac XGpioPs_IntrEnable
0101b7b8 g     F .text	00000160 .hidden __addsf3
010168d0 g     F .text	000000e8 XGpioPs_IntrGetEnabledPin
01074000 g       .mmu_tbl	00000000 __mmu_tbl_end
0101375c g     F .text	00000244 trig_configure_edge
01006a54 g     F .text	00000008 queue_enqueue
01002594 g     F .text	00000028 deque_get_first
0106cae8 g     O .data	0000016c __global_locale
01016814 g     F .text	000000bc XGpioPs_IntrGetEnabled
0101a6d0 g     F .text	00000040 XTtcPs_LookupConfig
01019798 g     F .text	00000024 Xil_DCacheEnable
0100f95c g     F .text	00000528 hal_init
01018b28 g     F .text	0000028c XSpiPs_InterruptHandler
01009824 g     F .text	000000b8 treetable_contains_value
01074010 g       .ARM.attributes	00000000 __ARM.attributes_start
010221e8 g     F .text	0000001a vfprintf
01001b4c g     F .text	0000008c deque_new
01001238 g     F .text	0000003c array_map
01019348 g     F .text	00000048 Xil_L1DCacheInvalidateRange
01013044 g     F .text	000001bc spicmd_comp0
0101271c g     F .text	0000007c spicmd_acq_setup_trigd
010274bc g     F .text	00000042 fputwc
010277f0  w    F .text	00000008 _close
0101c7c8 g     F .text	00000010 free
0102399c g     F .text	00000002 __sinit_lock_acquire
010063d0 g     F .text	00000050 list_zip_iter_replace
010244b0 g     F .text	00000090 __multadd
0102449c g     F .text	00000012 _Bfree
01024108 g     F .text	00000010 _getenv_r
0101a944 g     F .text	00000104 XSpiPs_SetOptions
01001cd8 g     F .text	00000074 deque_destroy_cb
0100e828 g     F .text	0000035c dma_bd_test



Disassembly of section .text:

01000000 <_vector_table>:

.globl _vector_table

.section .vectors
_vector_table:
	B	_boot
 1000000:	ea000049 	b	100012c <_boot>
	B	Undefined
 1000004:	ea000025 	b	10000a0 <Undefined>
	B	SVCHandler
 1000008:	ea00002b 	b	10000bc <SVCHandler>
	B	PrefetchAbortHandler
 100000c:	ea00003b 	b	1000100 <PrefetchAbortHandler>
	B	DataAbortHandler
 1000010:	ea000032 	b	10000e0 <DataAbortHandler>
	NOP	/* Placeholder for address exception vector*/
 1000014:	e320f000 	nop	{0}
	B	IRQHandler
 1000018:	ea000000 	b	1000020 <IRQHandler>
	B	FIQHandler
 100001c:	ea00000f 	b	1000060 <FIQHandler>

01000020 <IRQHandler>:


IRQHandler:					/* IRQ vector handler */

	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code*/
 1000020:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000024:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000028:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100002c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000030:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000034:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000038:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	ldr	r2, =prof_pc
	subs	r3, lr, #0
	str	r3, [r2]
#endif

	bl	IRQInterrupt			/* IRQ vector */
 100003c:	eb006b57 	bl	101ada0 <IRQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000040:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000044:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000048:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100004c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000050:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000054:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000058:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}


	subs	pc, lr, #4			/* adjust return */
 100005c:	e25ef004 	subs	pc, lr, #4

01000060 <FIQHandler>:


FIQHandler:					/* FIQ vector handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000060:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000064:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000068:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100006c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000070:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000074:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000078:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)

0100007c <FIQLoop>:
#endif

FIQLoop:
	bl	FIQInterrupt			/* FIQ vector */
 100007c:	eb006b42 	bl	101ad8c <FIQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000080:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000084:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000088:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100008c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000090:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000094:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000098:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	subs	pc, lr, #4			/* adjust return */
 100009c:	e25ef004 	subs	pc, lr, #4

010000a0 <Undefined>:


Undefined:					/* Undefined handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000a0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =UndefinedExceptionAddr
 10000a4:	e59f0074 	ldr	r0, [pc, #116]	; 1000120 <PrefetchAbortHandler+0x20>
	sub     r1, lr, #4
 10000a8:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Store address of instruction causing undefined exception */
 10000ac:	e5801000 	str	r1, [r0]

	bl	UndefinedException		/* UndefinedException: call C function here */
 10000b0:	eb006b3f 	bl	101adb4 <UndefinedException>
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000b4:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	movs	pc, lr
 10000b8:	e1b0f00e 	movs	pc, lr

010000bc <SVCHandler>:

SVCHandler:					/* SWI handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000bc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	tst	r0, #0x20			/* check the T bit */
 10000c0:	e3100020 	tst	r0, #32
	ldrneh	r0, [lr,#-2]			/* Thumb mode */
 10000c4:	115e00b2 	ldrhne	r0, [lr, #-2]
	bicne	r0, r0, #0xff00			/* Thumb mode */
 10000c8:	13c00cff 	bicne	r0, r0, #65280	; 0xff00
	ldreq	r0, [lr,#-4]			/* ARM mode */
 10000cc:	051e0004 	ldreq	r0, [lr, #-4]
	biceq	r0, r0, #0xff000000		/* ARM mode */
 10000d0:	03c004ff 	biceq	r0, r0, #-16777216	; 0xff000000

	bl	SWInterrupt			/* SWInterrupt: call C function here */
 10000d4:	eb006b3b 	bl	101adc8 <SWInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000d8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	movs	pc, lr		/*return to the next instruction after the SWI instruction */
 10000dc:	e1b0f00e 	movs	pc, lr

010000e0 <DataAbortHandler>:


DataAbortHandler:				/* Data Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 10000e0:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000e4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =DataAbortAddr
 10000e8:	e59f0034 	ldr	r0, [pc, #52]	; 1000124 <PrefetchAbortHandler+0x24>
	sub     r1, lr, #8
 10000ec:	e24e1008 	sub	r1, lr, #8
	str     r1, [r0]            		/* Stores instruction causing data abort */
 10000f0:	e5801000 	str	r1, [r0]

	bl	DataAbortInterrupt		/*DataAbortInterrupt :call C function here */
 10000f4:	eb006b38 	bl	101addc <DataAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000f8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #8			/* points to the instruction that caused the Data Abort exception */
 10000fc:	e25ef008 	subs	pc, lr, #8

01000100 <PrefetchAbortHandler>:

PrefetchAbortHandler:				/* Prefetch Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 1000100:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000104:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =PrefetchAbortAddr
 1000108:	e59f0018 	ldr	r0, [pc, #24]	; 1000128 <PrefetchAbortHandler+0x28>
	sub     r1, lr, #4
 100010c:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Stores instruction causing prefetch abort */
 1000110:	e5801000 	str	r1, [r0]

	bl	PrefetchAbortInterrupt		/* PrefetchAbortInterrupt: call C function here */
 1000114:	eb006b35 	bl	101adf0 <PrefetchAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000118:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* points to the instruction that caused the Prefetch Abort exception */
 100011c:	e25ef004 	subs	pc, lr, #4
	ldr     r0, =UndefinedExceptionAddr
 1000120:	010c1f5c 	.word	0x010c1f5c
	ldr     r0, =DataAbortAddr
 1000124:	010c1f64 	.word	0x010c1f64
	ldr     r0, =PrefetchAbortAddr
 1000128:	010c1f60 	.word	0x010c1f60

0100012c <_boot>:
_prestart:
_boot:

#if XPAR_CPU_ID==0
        /* only allow cpu0 through */
	mrc	p15,0,r1,c0,c0,5
 100012c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
	and	r1, r1, #0xf
 1000130:	e201100f 	and	r1, r1, #15
        cmp	r1, #0
 1000134:	e3510000 	cmp	r1, #0
	beq	CheckEFUSE
 1000138:	0a000001 	beq	1000144 <CheckEFUSE>

0100013c <EndlessLoop0>:
	EndlessLoop0:
		wfe
 100013c:	e320f002 	wfe
	b	EndlessLoop0
 1000140:	eafffffd 	b	100013c <EndlessLoop0>

01000144 <CheckEFUSE>:

CheckEFUSE:
        ldr r0,=EFUSEStaus
 1000144:	e59f030c 	ldr	r0, [pc, #780]	; 1000458 <finished+0x14>
        ldr r1,[r0]                             /* Read eFuse setting */
 1000148:	e5901000 	ldr	r1, [r0]
        ands r1,r1,#0x80                        /* Check whether device is having single core */
 100014c:	e2111080 	ands	r1, r1, #128	; 0x80
	beq OKToRun
 1000150:	0a000009 	beq	100017c <OKToRun>

 /* single core device, reset cpu1 */
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 1000154:	e59f0300 	ldr	r0, [pc, #768]	; 100045c <finished+0x18>
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000158:	e59f1300 	ldr	r1, [pc, #768]	; 1000460 <finished+0x1c>
        str     r1, [r0]                        /* Unlock SLCR */
 100015c:	e5801000 	str	r1, [r0]

	ldr r0,=SLCRCPURSTReg
 1000160:	e59f02fc 	ldr	r0, [pc, #764]	; 1000464 <finished+0x20>
	ldr r1,[r0]                             /* Read CPU Software Reset Control register */
 1000164:	e5901000 	ldr	r1, [r0]
	orr r1,r1,#0x22
 1000168:	e3811022 	orr	r1, r1, #34	; 0x22
        str r1,[r0]                             /* Reset CPU1 */
 100016c:	e5801000 	str	r1, [r0]

        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000170:	e59f02f0 	ldr	r0, [pc, #752]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 1000174:	e59f12f0 	ldr	r1, [pc, #752]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000178:	e5801000 	str	r1, [r0]

0100017c <OKToRun>:
	        wfe
	b	EndlessLoop1
#endif

OKToRun:
	mrc     p15, 0, r0, c0, c0, 0		/* Get the revision */
 100017c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and     r5, r0, #0x00f00000
 1000180:	e200560f 	and	r5, r0, #15728640	; 0xf00000
	and     r6, r0, #0x0000000f
 1000184:	e200600f 	and	r6, r0, #15
	orr     r6, r6, r5, lsr #20-4
 1000188:	e1866825 	orr	r6, r6, r5, lsr #16

#ifdef CONFIG_ARM_ERRATA_742230
        cmp     r6, #0x22                       /* only present up to r2p2 */
 100018c:	e3560022 	cmp	r6, #34	; 0x22
        mrcle   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 1000190:	de1faf30 	mrcle	15, 0, sl, cr15, cr0, {1}
        orrle   r10, r10, #1 << 4               /* set bit #4 */
 1000194:	d38aa010 	orrle	sl, sl, #16
        mcrle   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 1000198:	de0faf30 	mcrle	15, 0, sl, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	teq     r5, #0x00200000                 /* only present in r2p* */
 100019c:	e3350602 	teq	r5, #2097152	; 0x200000
	mrceq   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 10001a0:	0e1faf30 	mrceq	15, 0, sl, cr15, cr0, {1}
	orreq   r10, r10, #1 << 6               /* set bit #6 */
 10001a4:	038aa040 	orreq	sl, sl, #64	; 0x40
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 10001a8:	0e0faf30 	mcreq	15, 0, sl, cr15, cr0, {1}
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
 10001ac:	e59f02bc 	ldr	r0, [pc, #700]	; 1000470 <finished+0x2c>
	mcr	p15, 0, r0, c12, c0, 0
 10001b0:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
 10001b4:	e59f72b8 	ldr	r7, [pc, #696]	; 1000474 <finished+0x30>
	ldr	r6, =0xffff
 10001b8:	e59f62b8 	ldr	r6, [pc, #696]	; 1000478 <finished+0x34>
	str	r6, [r7]
 10001bc:	e5876000 	str	r6, [r7]

	/* Invalidate caches and TLBs */
	mov	r0,#0				/* r0 = 0  */
 10001c0:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */
 10001c4:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */
 10001c8:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */
 10001cc:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	bl	invalidate_dcache		/* invalidate dcache */
 10001d0:	eb00007c 	bl	10003c8 <invalidate_dcache>

	/* Disable MMU, if enabled */
	mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */
 10001d4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x1			/* clear bit 0 */
 10001d8:	e3c00001 	bic	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 0		/* write value back */
 10001dc:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	add	r2, r2, #0x100000		/* next section */
	subs	r3, r3, #1
	bge	shareable_loop			/* loop till 1G is covered */
#endif

	mrs	r0, cpsr			/* get the current PSR */
 10001e0:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the irq stack pointer */
 10001e4:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 10001e8:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
 10001ec:	e3822012 	orr	r2, r2, #18
	msr	cpsr, r2
 10001f0:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 10001f4:	e59fd280 	ldr	sp, [pc, #640]	; 100047c <finished+0x38>
	bic r2, r2, #(0x1 << 9)    		 /* Set EE bit to little-endian */
 10001f8:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 10001fc:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000200:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
 1000204:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000208:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
 100020c:	e3822013 	orr	r2, r2, #19
	msr	cpsr, r2
 1000210:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000214:	e59fd264 	ldr	sp, [pc, #612]	; 1000480 <finished+0x3c>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000218:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100021c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000220:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
 1000224:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000228:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
 100022c:	e3822017 	orr	r2, r2, #23
	msr	cpsr, r2
 1000230:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000234:	e59fd248 	ldr	sp, [pc, #584]	; 1000484 <finished+0x40>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000238:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100023c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000240:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
 1000244:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000248:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
 100024c:	e3822011 	orr	r2, r2, #17
	msr	cpsr, r2
 1000250:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000254:	e59fd22c 	ldr	sp, [pc, #556]	; 1000488 <finished+0x44>
	bic r2, r2, #(0x1 << 9)    		/* Set EE bit to little-endian */
 1000258:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100025c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000260:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
 1000264:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000268:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
 100026c:	e382201b 	orr	r2, r2, #27
	msr	cpsr, r2
 1000270:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 1000274:	e59fd210 	ldr	sp, [pc, #528]	; 100048c <finished+0x48>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000278:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100027c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000280:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the system stack pointer */
 1000284:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000288:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
 100028c:	e382201f 	orr	r2, r2, #31
	msr	cpsr, r2
 1000290:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000294:	e59fd1f4 	ldr	sp, [pc, #500]	; 1000490 <finished+0x4c>

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
 1000298:	e59f71f4 	ldr	r7, [pc, #500]	; 1000494 <finished+0x50>
	ldr	r0, [r7]
 100029c:	e5970000 	ldr	r0, [r7]
	orr	r0, r0, #0x1
 10002a0:	e3800001 	orr	r0, r0, #1
	str	r0, [r7]
 10002a4:	e5870000 	str	r0, [r7]

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
 10002a8:	e59f01e8 	ldr	r0, [pc, #488]	; 1000498 <finished+0x54>
	orr	r0, r0, #0x5B			/* Outer-cacheable, WB */
 10002ac:	e380005b 	orr	r0, r0, #91	; 0x5b
	mcr	15, 0, r0, c2, c0, 0		/* TTB0 */
 10002b0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}

	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
 10002b4:	e3e00000 	mvn	r0, #0
	mcr	p15,0,r0,c3,c0,0
 10002b8:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
 10002bc:	e59f01d8 	ldr	r0, [pc, #472]	; 100049c <finished+0x58>
	mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */
 10002c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	dsb					/* dsb	allow the MMU to start up */
 10002c4:	f57ff04f 	dsb	sy
	isb					/* isb	flush prefetch buffer */
 10002c8:	f57ff06f 	isb	sy

	/* Write to ACTLR */
	mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/
 10002cc:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x01 << 6)		/* set SMP bit */
 10002d0:	e3800040 	orr	r0, r0, #64	; 0x40
	orr	r0, r0, #(0x01 )		/* Cache/TLB maintenance broadcast */
 10002d4:	e3800001 	orr	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/
 10002d8:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

/* Invalidate L2 Cache and enable L2 Cache*/
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10002dc:	e59f01bc 	ldr	r0, [pc, #444]	; 10004a0 <finished+0x5c>
	mov	r1, #0				/* force the disable bit */
 10002e0:	e3a01000 	mov	r1, #0
	str	r1, [r0]			/* disable the L2 Caches */
 10002e4:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10002e8:	e59f01b4 	ldr	r0, [pc, #436]	; 10004a4 <finished+0x60>
	ldr	r1,[r0]				/* read the register */
 10002ec:	e5901000 	ldr	r1, [r0]
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10002f0:	e59f21b0 	ldr	r2, [pc, #432]	; 10004a8 <finished+0x64>
	orr	r1,r1,r2
 10002f4:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* store the Aux Control Register */
 10002f8:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10002fc:	e59f01a8 	ldr	r0, [pc, #424]	; 10004ac <finished+0x68>
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 1000300:	e59f11a8 	ldr	r1, [pc, #424]	; 10004b0 <finished+0x6c>
	str	r1, [r0]			/* store the TAG Latency register Register */
 1000304:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 1000308:	e59f01a4 	ldr	r0, [pc, #420]	; 10004b4 <finished+0x70>
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 100030c:	e59f11a4 	ldr	r1, [pc, #420]	; 10004b8 <finished+0x74>
	str	r1, [r0]			/* store the Data Latency register Register */
 1000310:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 1000314:	e59f01a0 	ldr	r0, [pc, #416]	; 10004bc <finished+0x78>
	ldr	r2, =0xFFFF
 1000318:	e59f2158 	ldr	r2, [pc, #344]	; 1000478 <finished+0x34>
	str	r2, [r0]			/* force invalidate */
 100031c:	e5802000 	str	r2, [r0]

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 1000320:	e59f0198 	ldr	r0, [pc, #408]	; 10004c0 <finished+0x7c>

01000324 <Sync>:
						/* Load L2CC base address base + sync register*/
	/* poll for completion */
Sync:	ldr	r1, [r0]
 1000324:	e5901000 	ldr	r1, [r0]
	cmp	r1, #0
 1000328:	e3510000 	cmp	r1, #0
	bne	Sync
 100032c:	1afffffc 	bne	1000324 <Sync>

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 1000330:	e59f018c 	ldr	r0, [pc, #396]	; 10004c4 <finished+0x80>
	ldr	r1,[r0]
 1000334:	e5901000 	ldr	r1, [r0]
	ldr	r0,=L2CCIntClear
 1000338:	e59f0188 	ldr	r0, [pc, #392]	; 10004c8 <finished+0x84>
	str	r1,[r0]
 100033c:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
 1000340:	e59f0114 	ldr	r0, [pc, #276]	; 100045c <finished+0x18>
	ldr	r1,=SLCRUnlockKey	    	/* set unlock key */
 1000344:	e59f1114 	ldr	r1, [pc, #276]	; 1000460 <finished+0x1c>
	str	r1, [r0]		    	/* Unlock SLCR */
 1000348:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 100034c:	e59f0178 	ldr	r0, [pc, #376]	; 10004cc <finished+0x88>
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 1000350:	e59f1178 	ldr	r1, [pc, #376]	; 10004d0 <finished+0x8c>
	str	r1, [r0]	        	/* store the L2c Ram Control Register */
 1000354:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000358:	e59f0108 	ldr	r0, [pc, #264]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100035c:	e59f1108 	ldr	r1, [pc, #264]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000360:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 1000364:	e59f0134 	ldr	r0, [pc, #308]	; 10004a0 <finished+0x5c>
	ldr	r1,[r0]				/* read the register */
 1000368:	e5901000 	ldr	r1, [r0]
	mov	r2, #L2CCControl		/* set the enable bit */
 100036c:	e3a02001 	mov	r2, #1
	orr	r1,r1,r2
 1000370:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* enable the L2 Caches */
 1000374:	e5801000 	str	r1, [r0]
#endif

	mov	r0, r0
 1000378:	e1a00000 	nop			; (mov r0, r0)
	mrc	p15, 0, r1, c1, c0, 2		/* read cp access control register (CACR) into r1 */
 100037c:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr	r1, r1, #(0xf << 20)		/* enable full access for p10 & p11 */
 1000380:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr	p15, 0, r1, c1, c0, 2		/* write back into CACR */
 1000384:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}

	/* enable vfp */
	fmrx	r1, FPEXC			/* read the exception register */
 1000388:	eef81a10 	vmrs	r1, fpexc
	orr	r1,r1, #FPEXC_EN		/* set VFP enable bit, leave the others in orig state */
 100038c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
	fmxr	FPEXC, r1			/* write back the exception register */
 1000390:	eee81a10 	vmsr	fpexc, r1

	mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */
 1000394:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #(0x01 << 11)		/* #0x8000 */
 1000398:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15,0,r0,c1,c0,0
 100039c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */
 10003a0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */
 10003a4:	e3800004 	orr	r0, r0, #4
	orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */
 10003a8:	e3800002 	orr	r0, r0, #2
	mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */
 10003ac:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

	mrs	r0, cpsr			/* get the current PSR */
 10003b0:	e10f0000 	mrs	r0, CPSR
	bic	r0, r0, #0x100			/* enable asynchronous abort exception */
 10003b4:	e3c00c01 	bic	r0, r0, #256	; 0x100
	msr	cpsr_xsf, r0
 10003b8:	e12ef000 	msr	CPSR_fsx, r0


	b	_start				/* jump to C startup code */
 10003bc:	ea006a95 	b	101ae18 <_start>
	and	r0, r0, r0			/* no op */
 10003c0:	e0000000 	and	r0, r0, r0

.Ldone:	b	.Ldone				/* Paranoia: we should never get here */
 10003c4:	eafffffe 	b	10003c4 <Sync+0xa0>

010003c8 <invalidate_dcache>:
 * the whole D-cache. Need to invalidate each line.
 *
 *************************************************************************
 */
invalidate_dcache:
	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */
 10003c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
	ands	r3, r0, #0x7000000
 10003cc:	e2103407 	ands	r3, r0, #117440512	; 0x7000000
	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */
 10003d0:	e1a03ba3 	lsr	r3, r3, #23
	beq	finished
 10003d4:	0a00001a 	beq	1000444 <finished>
	mov	r10, #0				/* start with level 0 */
 10003d8:	e3a0a000 	mov	sl, #0

010003dc <loop1>:
loop1:
	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */
 10003dc:	e08a20aa 	add	r2, sl, sl, lsr #1
	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */
 10003e0:	e1a01230 	lsr	r1, r0, r2
	and	r1, r1, #7			/* get those 3 bits alone */
 10003e4:	e2011007 	and	r1, r1, #7
	cmp	r1, #2
 10003e8:	e3510002 	cmp	r1, #2
	blt	skip				/* no cache or only instruction cache at this level */
 10003ec:	ba000011 	blt	1000438 <skip>
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
 10003f0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	isb					/* isb to sync the change to the CacheSizeID reg */
 10003f4:	f57ff06f 	isb	sy
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
 10003f8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
	and	r2, r1, #7			/* extract the line length field */
 10003fc:	e2012007 	and	r2, r1, #7
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
 1000400:	e2822004 	add	r2, r2, #4
	ldr	r4, =0x3ff
 1000404:	e59f40c8 	ldr	r4, [pc, #200]	; 10004d4 <finished+0x90>
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
 1000408:	e01441a1 	ands	r4, r4, r1, lsr #3
	clz	r5, r4				/* r5 is the bit position of the way size increment */
 100040c:	e16f5f14 	clz	r5, r4
	ldr	r7, =0x7fff
 1000410:	e59f70c0 	ldr	r7, [pc, #192]	; 10004d8 <finished+0x94>
	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */
 1000414:	e01776a1 	ands	r7, r7, r1, lsr #13

01000418 <loop2>:
loop2:
	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */
 1000418:	e1a09004 	mov	r9, r4

0100041c <loop3>:
loop3:
	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */
 100041c:	e18ab519 	orr	fp, sl, r9, lsl r5
	orr	r11, r11, r7, lsl r2		/* factor in the index number */
 1000420:	e18bb217 	orr	fp, fp, r7, lsl r2
	mcr	p15, 0, r11, c7, c6, 2		/* invalidate by set/way */
 1000424:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
	subs	r9, r9, #1			/* decrement the way number */
 1000428:	e2599001 	subs	r9, r9, #1
	bge	loop3
 100042c:	aafffffa 	bge	100041c <loop3>
	subs	r7, r7, #1			/* decrement the index */
 1000430:	e2577001 	subs	r7, r7, #1
	bge	loop2
 1000434:	aafffff7 	bge	1000418 <loop2>

01000438 <skip>:
skip:
	add	r10, r10, #2			/* increment the cache number */
 1000438:	e28aa002 	add	sl, sl, #2
	cmp	r3, r10
 100043c:	e153000a 	cmp	r3, sl
	bgt	loop1
 1000440:	caffffe5 	bgt	10003dc <loop1>

01000444 <finished>:

finished:
	mov	r10, #0				/* switch back to cache level 0 */
 1000444:	e3a0a000 	mov	sl, #0
	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */
 1000448:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	dsb
 100044c:	f57ff04f 	dsb	sy
	isb
 1000450:	f57ff06f 	isb	sy

	bx	lr
 1000454:	e12fff1e 	bx	lr
        ldr r0,=EFUSEStaus
 1000458:	f800d010 	.word	0xf800d010
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 100045c:	f8000008 	.word	0xf8000008
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000460:	0000df0d 	.word	0x0000df0d
	ldr r0,=SLCRCPURSTReg
 1000464:	f8000244 	.word	0xf8000244
        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000468:	f8000004 	.word	0xf8000004
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100046c:	0000767b 	.word	0x0000767b
	ldr	r0, =vector_base
 1000470:	01000000 	.word	0x01000000
	ldr	r7, =0xf8f0000c
 1000474:	f8f0000c 	.word	0xf8f0000c
	ldr	r6, =0xffff
 1000478:	0000ffff 	.word	0x0000ffff
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 100047c:	00010400 	.word	0x00010400
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000480:	00010c00 	.word	0x00010c00
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000484:	00011000 	.word	0x00011000
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000488:	00011400 	.word	0x00011400
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 100048c:	00011800 	.word	0x00011800
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000490:	00010000 	.word	0x00010000
	ldr	r7, =0xf8f00000
 1000494:	f8f00000 	.word	0xf8f00000
	ldr	r0,=TblBase			/* Load MMU translation table base */
 1000498:	01070000 	.word	0x01070000
	ldr	r0,=CRValMmuCac
 100049c:	00001005 	.word	0x00001005
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10004a0:	f8f02100 	.word	0xf8f02100
	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10004a4:	f8f02104 	.word	0xf8f02104
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10004a8:	72360000 	.word	0x72360000
	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10004ac:	f8f02108 	.word	0xf8f02108
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 10004b0:	00000111 	.word	0x00000111
	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 10004b4:	f8f0210c 	.word	0xf8f0210c
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 10004b8:	00000121 	.word	0x00000121
	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 10004bc:	f8f0277c 	.word	0xf8f0277c
	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 10004c0:	f8f02730 	.word	0xf8f02730
	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 10004c4:	f8f0221c 	.word	0xf8f0221c
	ldr	r0,=L2CCIntClear
 10004c8:	f8f02220 	.word	0xf8f02220
	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 10004cc:	f8000a1c 	.word	0xf8000a1c
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 10004d0:	00020202 	.word	0x00020202
	ldr	r4, =0x3ff
 10004d4:	000003ff 	.word	0x000003ff
	ldr	r7, =0x7fff
 10004d8:	00007fff 	.word	0x00007fff

010004dc <deregister_tm_clones>:
 10004dc:	f24d 0088 	movw	r0, #53384	; 0xd088
 10004e0:	f2c0 1006 	movt	r0, #262	; 0x106
 10004e4:	f24d 0388 	movw	r3, #53384	; 0xd088
 10004e8:	f2c0 1306 	movt	r3, #262	; 0x106
 10004ec:	4283      	cmp	r3, r0
 10004ee:	d005      	beq.n	10004fc <deregister_tm_clones+0x20>
 10004f0:	f240 0300 	movw	r3, #0
 10004f4:	f2c0 0300 	movt	r3, #0
 10004f8:	b103      	cbz	r3, 10004fc <deregister_tm_clones+0x20>
 10004fa:	4718      	bx	r3
 10004fc:	4770      	bx	lr
 10004fe:	bf00      	nop

01000500 <register_tm_clones>:
 1000500:	f24d 0088 	movw	r0, #53384	; 0xd088
 1000504:	f2c0 1006 	movt	r0, #262	; 0x106
 1000508:	f24d 0188 	movw	r1, #53384	; 0xd088
 100050c:	f2c0 1106 	movt	r1, #262	; 0x106
 1000510:	1a09      	subs	r1, r1, r0
 1000512:	1089      	asrs	r1, r1, #2
 1000514:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 1000518:	1049      	asrs	r1, r1, #1
 100051a:	d005      	beq.n	1000528 <register_tm_clones+0x28>
 100051c:	f240 0300 	movw	r3, #0
 1000520:	f2c0 0300 	movt	r3, #0
 1000524:	b103      	cbz	r3, 1000528 <register_tm_clones+0x28>
 1000526:	4718      	bx	r3
 1000528:	4770      	bx	lr
 100052a:	bf00      	nop

0100052c <__do_global_dtors_aux>:
 100052c:	b510      	push	{r4, lr}
 100052e:	f244 0420 	movw	r4, #16416	; 0x4020
 1000532:	f2c0 1407 	movt	r4, #263	; 0x107
 1000536:	7823      	ldrb	r3, [r4, #0]
 1000538:	b973      	cbnz	r3, 1000558 <__do_global_dtors_aux+0x2c>
 100053a:	f7ff ffcf 	bl	10004dc <deregister_tm_clones>
 100053e:	f240 0300 	movw	r3, #0
 1000542:	f2c0 0300 	movt	r3, #0
 1000546:	b12b      	cbz	r3, 1000554 <__do_global_dtors_aux+0x28>
 1000548:	f24d 0088 	movw	r0, #53384	; 0xd088
 100054c:	f2c0 1006 	movt	r0, #262	; 0x106
 1000550:	f3af 8000 	nop.w
 1000554:	2301      	movs	r3, #1
 1000556:	7023      	strb	r3, [r4, #0]
 1000558:	bd10      	pop	{r4, pc}
 100055a:	bf00      	nop

0100055c <frame_dummy>:
 100055c:	b508      	push	{r3, lr}
 100055e:	f240 0300 	movw	r3, #0
 1000562:	f2c0 0300 	movt	r3, #0
 1000566:	b14b      	cbz	r3, 100057c <frame_dummy+0x20>
 1000568:	f244 0124 	movw	r1, #16420	; 0x4024
 100056c:	f24d 0088 	movw	r0, #53384	; 0xd088
 1000570:	f2c0 1107 	movt	r1, #263	; 0x107
 1000574:	f2c0 1006 	movt	r0, #262	; 0x106
 1000578:	f3af 8000 	nop.w
 100057c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1000580:	e7be      	b.n	1000500 <register_tm_clones>
 1000582:	bf00      	nop

01000584 <array_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new Array structure failed.
 */
enum cc_stat array_new(Array **out)
{
 1000584:	e92d4070 	push	{r4, r5, r6, lr}
    /* Needed to avoid an integer overflow on the first resize and
     * to easily check for any future overflows. */
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
        return CC_ERR_INVALID_CAPACITY;

    Array *ar = conf->mem_calloc(1, sizeof(Array));
 1000588:	e3a0101c 	mov	r1, #28
{
 100058c:	e1a05000 	mov	r5, r0
    Array *ar = conf->mem_calloc(1, sizeof(Array));
 1000590:	e3a00001 	mov	r0, #1
 1000594:	fa006d87 	blx	101bbb8 <calloc>

    if (!ar)
 1000598:	e2504000 	subs	r4, r0, #0
 100059c:	0a000017 	beq	1000600 <array_new+0x7c>
        return CC_ERR_ALLOC;

    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 10005a0:	e3a00020 	mov	r0, #32
 10005a4:	fa007083 	blx	101c7b8 <malloc>

    if (!buff) {
 10005a8:	e3500000 	cmp	r0, #0
 10005ac:	0a00000f 	beq	10005f0 <array_new+0x6c>
    }

    ar->buffer     = buff;
    ar->exp_factor = ex;
    ar->capacity   = conf->capacity;
    ar->mem_alloc  = conf->mem_alloc;
 10005b0:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    ar->mem_calloc = conf->mem_calloc;
 10005b4:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    ar->mem_alloc  = conf->mem_alloc;
 10005b8:	e3401101 	movt	r1, #257	; 0x101
    ar->mem_free   = conf->mem_free;
 10005bc:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    ar->mem_calloc = conf->mem_calloc;
 10005c0:	e3402101 	movt	r2, #257	; 0x101
    ar->mem_free   = conf->mem_free;
 10005c4:	e3403101 	movt	r3, #257	; 0x101
    ar->capacity   = conf->capacity;
 10005c8:	e3a0c008 	mov	ip, #8
    ar->mem_alloc  = conf->mem_alloc;
 10005cc:	e5841010 	str	r1, [r4, #16]
    ar->exp_factor = ex;
 10005d0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    ar->buffer     = buff;
 10005d4:	e584000c 	str	r0, [r4, #12]

    *out = ar;
 10005d8:	e5854000 	str	r4, [r5]
    return CC_OK;
 10005dc:	e3a00000 	mov	r0, #0
    ar->mem_free   = conf->mem_free;
 10005e0:	e1c421f4 	strd	r2, [r4, #20]
    ar->exp_factor = ex;
 10005e4:	e5841008 	str	r1, [r4, #8]
    ar->capacity   = conf->capacity;
 10005e8:	e584c004 	str	ip, [r4, #4]
    return CC_OK;
 10005ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(ar);
 10005f0:	e1a00004 	mov	r0, r4
 10005f4:	fa007073 	blx	101c7c8 <free>
        return CC_ERR_ALLOC;
 10005f8:	e3a00001 	mov	r0, #1
 10005fc:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1000600:	e3a00001 	mov	r0, #1
}
 1000604:	e8bd8070 	pop	{r4, r5, r6, pc}

01000608 <array_new_conf>:
{
 1000608:	e92d4070 	push	{r4, r5, r6, lr}
 100060c:	ed2d8b02 	vpush	{d8}
    if (conf->exp_factor <= 1)
 1000610:	ed908a01 	vldr	s16, [r0, #4]
 1000614:	eeb77a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 1000618:	e5903000 	ldr	r3, [r0]
        ex = DEFAULT_EXPANSION_FACTOR;
 100061c:	eef07a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 1000620:	eeb48a47 	vcmp.f32	s16, s14
 1000624:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1000628:	9eb08a67 	vmovls.f32	s16, s15
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 100062c:	e3530000 	cmp	r3, #0
 1000630:	0a000022 	beq	10006c0 <array_new_conf+0xb8>
 1000634:	e1a06001 	mov	r6, r1
 1000638:	e1a04000 	mov	r4, r0
 100063c:	e1a01003 	mov	r1, r3
 1000640:	e3e00001 	mvn	r0, #1
 1000644:	fa006a2f 	blx	101af08 <__udivsi3>
 1000648:	ee070a90 	vmov	s15, r0
 100064c:	eef87a67 	vcvt.f32.u32	s15, s15
 1000650:	eef47ac8 	vcmpe.f32	s15, s16
 1000654:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1000658:	9a000018 	bls	10006c0 <array_new_conf+0xb8>
    Array *ar = conf->mem_calloc(1, sizeof(Array));
 100065c:	e594300c 	ldr	r3, [r4, #12]
 1000660:	e3a0101c 	mov	r1, #28
 1000664:	e3a00001 	mov	r0, #1
 1000668:	e12fff33 	blx	r3
    if (!ar)
 100066c:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 1000670:	03a00001 	moveq	r0, #1
    if (!ar)
 1000674:	0a00000f 	beq	10006b8 <array_new_conf+0xb0>
    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 1000678:	e5940000 	ldr	r0, [r4]
 100067c:	e5943008 	ldr	r3, [r4, #8]
 1000680:	e1a00100 	lsl	r0, r0, #2
 1000684:	e12fff33 	blx	r3
    if (!buff) {
 1000688:	e2503000 	subs	r3, r0, #0
 100068c:	0a00000e 	beq	10006cc <array_new_conf+0xc4>
    ar->capacity   = conf->capacity;
 1000690:	e5942000 	ldr	r2, [r4]
    ar->mem_alloc  = conf->mem_alloc;
 1000694:	e2841008 	add	r1, r4, #8
    ar->buffer     = buff;
 1000698:	e585300c 	str	r3, [r5, #12]
    return CC_OK;
 100069c:	e3a00000 	mov	r0, #0
    ar->exp_factor = ex;
 10006a0:	ed858a02 	vstr	s16, [r5, #8]
    ar->capacity   = conf->capacity;
 10006a4:	e5852004 	str	r2, [r5, #4]
    ar->mem_alloc  = conf->mem_alloc;
 10006a8:	e891000e 	ldm	r1, {r1, r2, r3}
 10006ac:	e5851010 	str	r1, [r5, #16]
 10006b0:	e1c521f4 	strd	r2, [r5, #20]
    *out = ar;
 10006b4:	e5865000 	str	r5, [r6]
}
 10006b8:	ecbd8b02 	vpop	{d8}
 10006bc:	e8bd8070 	pop	{r4, r5, r6, pc}
 10006c0:	ecbd8b02 	vpop	{d8}
        return CC_ERR_INVALID_CAPACITY;
 10006c4:	e3a00002 	mov	r0, #2
}
 10006c8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(ar);
 10006cc:	e1a00005 	mov	r0, r5
 10006d0:	e5943010 	ldr	r3, [r4, #16]
 10006d4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10006d8:	e3a00001 	mov	r0, #1
 10006dc:	eafffff5 	b	10006b8 <array_new_conf+0xb0>

010006e0 <array_conf_init>:
 */
void array_conf_init(ArrayConf *conf)
{
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
    conf->capacity   = DEFAULT_CAPACITY;
    conf->mem_alloc  = malloc;
 10006e0:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    conf->mem_calloc = calloc;
 10006e4:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 10006e8:	e30c37c9 	movw	r3, #51145	; 0xc7c9
{
 10006ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    conf->mem_alloc  = malloc;
 10006f0:	e3401101 	movt	r1, #257	; 0x101
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 10006f4:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
    conf->mem_calloc = calloc;
 10006f8:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 10006fc:	e3403101 	movt	r3, #257	; 0x101
    conf->capacity   = DEFAULT_CAPACITY;
 1000700:	e3a0c008 	mov	ip, #8
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 1000704:	e580e004 	str	lr, [r0, #4]
    conf->capacity   = DEFAULT_CAPACITY;
 1000708:	e580c000 	str	ip, [r0]
    conf->mem_alloc  = malloc;
 100070c:	e5801008 	str	r1, [r0, #8]
    conf->mem_free   = free;
 1000710:	e1c020fc 	strd	r2, [r0, #12]
}
 1000714:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01000718 <array_destroy>:
 * Destroys the Array structure, but leaves the data it used to hold intact.
 *
 * @param[in] ar the array that is to be destroyed
 */
void array_destroy(Array *ar)
{
 1000718:	e92d4010 	push	{r4, lr}
 100071c:	e1a04000 	mov	r4, r0
    ar->mem_free(ar->buffer);
 1000720:	e5903018 	ldr	r3, [r0, #24]
 1000724:	e590000c 	ldr	r0, [r0, #12]
 1000728:	e12fff33 	blx	r3
    ar->mem_free(ar);
 100072c:	e5943018 	ldr	r3, [r4, #24]
 1000730:	e1a00004 	mov	r0, r4
}
 1000734:	e8bd4010 	pop	{r4, lr}
    ar->mem_free(ar);
 1000738:	e12fff13 	bx	r3

0100073c <array_destroy_cb>:
 * @param[in] ar the array that is being destroyed
 */
void array_destroy_cb(Array *ar, void (*cb) (void*))
{
    size_t i;
    for (i = 0; i < ar->size; i++)
 100073c:	e5903000 	ldr	r3, [r0]
{
 1000740:	e92d4070 	push	{r4, r5, r6, lr}
 1000744:	e1a05000 	mov	r5, r0
    for (i = 0; i < ar->size; i++)
 1000748:	e3530000 	cmp	r3, #0
 100074c:	0a000008 	beq	1000774 <array_destroy_cb+0x38>
 1000750:	e1a06001 	mov	r6, r1
 1000754:	e3a04000 	mov	r4, #0
        cb(ar->buffer[i]);
 1000758:	e595300c 	ldr	r3, [r5, #12]
 100075c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++)
 1000760:	e2844001 	add	r4, r4, #1
        cb(ar->buffer[i]);
 1000764:	e12fff36 	blx	r6
    for (i = 0; i < ar->size; i++)
 1000768:	e5953000 	ldr	r3, [r5]
 100076c:	e1530004 	cmp	r3, r4
 1000770:	8afffff8 	bhi	1000758 <array_destroy_cb+0x1c>
    ar->mem_free(ar->buffer);
 1000774:	e5953018 	ldr	r3, [r5, #24]
 1000778:	e595000c 	ldr	r0, [r5, #12]
 100077c:	e12fff33 	blx	r3
    ar->mem_free(ar);
 1000780:	e5953018 	ldr	r3, [r5, #24]
 1000784:	e1a00005 	mov	r0, r5

    array_destroy(ar);
}
 1000788:	e8bd4070 	pop	{r4, r5, r6, lr}
    ar->mem_free(ar);
 100078c:	e12fff13 	bx	r3

01000790 <array_add>:
 * memory allocation for the new element failed, or CC_ERR_MAX_CAPACITY if the
 * array is already at maximum capacity.
 */
enum cc_stat array_add(Array *ar, void *element)
{
    if (ar->size >= ar->capacity) {
 1000790:	e5903000 	ldr	r3, [r0]
 1000794:	e5902004 	ldr	r2, [r0, #4]
{
 1000798:	e92d4070 	push	{r4, r5, r6, lr}
 100079c:	e1a04000 	mov	r4, r0
 10007a0:	e1a06001 	mov	r6, r1
    if (ar->size >= ar->capacity) {
 10007a4:	e1530002 	cmp	r3, r2
 10007a8:	2a000005 	bcs	10007c4 <array_add+0x34>
 10007ac:	e590500c 	ldr	r5, [r0, #12]
        if (status != CC_OK)
            return status;
    }

    ar->buffer[ar->size] = element;
    ar->size++;
 10007b0:	e2832001 	add	r2, r3, #1
    ar->buffer[ar->size] = element;
 10007b4:	e7856103 	str	r6, [r5, r3, lsl #2]

    return CC_OK;
 10007b8:	e3a00000 	mov	r0, #0
    ar->size++;
 10007bc:	e5842000 	str	r2, [r4]
    return CC_OK;
 10007c0:	e8bd8070 	pop	{r4, r5, r6, pc}
 * the memory allocation for the new buffer failed, or CC_ERR_MAX_CAPACITY
 * if the array is already at maximum capacity.
 */
static enum cc_stat expand_capacity(Array *ar)
{
    if (ar->capacity == CC_MAX_ELEMENTS)
 10007c4:	e3720002 	cmn	r2, #2
 10007c8:	0a000019 	beq	1000834 <array_add+0xa4>
        return CC_ERR_MAX_CAPACITY;

    size_t new_capacity = ar->capacity * ar->exp_factor;
 10007cc:	ee072a90 	vmov	s15, r2
 10007d0:	ed907a02 	vldr	s14, [r0, #8]
 10007d4:	eef87a67 	vcvt.f32.u32	s15, s15
    if (new_capacity <= ar->capacity)
        ar->capacity = CC_MAX_ELEMENTS;
    else
        ar->capacity = new_capacity;

    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10007d8:	e5901010 	ldr	r1, [r0, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10007dc:	ee677a87 	vmul.f32	s15, s15, s14
 10007e0:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10007e4:	ee173a90 	vmov	r3, s15
    if (new_capacity <= ar->capacity)
 10007e8:	e1520003 	cmp	r2, r3
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10007ec:	e1a00103 	lsl	r0, r3, #2
        ar->capacity = CC_MAX_ELEMENTS;
 10007f0:	23e03001 	mvncs	r3, #1
 10007f4:	e5843004 	str	r3, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10007f8:	e12fff31 	blx	r1

    if (!new_buff)
 10007fc:	e2505000 	subs	r5, r0, #0
 1000800:	0a000009 	beq	100082c <array_add+0x9c>
        return CC_ERR_ALLOC;

    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 1000804:	e5942000 	ldr	r2, [r4]
 1000808:	e594100c 	ldr	r1, [r4, #12]
 100080c:	e1a02102 	lsl	r2, r2, #2
 1000810:	eb00727a 	bl	101d200 <memcpy>

    ar->mem_free(ar->buffer);
 1000814:	e5943018 	ldr	r3, [r4, #24]
 1000818:	e594000c 	ldr	r0, [r4, #12]
 100081c:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1000820:	e5943000 	ldr	r3, [r4]
 1000824:	e584500c 	str	r5, [r4, #12]
        if (status != CC_OK)
 1000828:	eaffffe0 	b	10007b0 <array_add+0x20>
        return CC_ERR_ALLOC;
 100082c:	e3a00001 	mov	r0, #1
}
 1000830:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_MAX_CAPACITY;
 1000834:	e3a00004 	mov	r0, #4
 1000838:	e8bd8070 	pop	{r4, r5, r6, pc}

0100083c <array_add_at>:
{
 100083c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1000840:	e1a05002 	mov	r5, r2
    if (index == ar->size)
 1000844:	e5902000 	ldr	r2, [r0]
{
 1000848:	e1a04000 	mov	r4, r0
 100084c:	e1a06001 	mov	r6, r1
    if (index == ar->size)
 1000850:	e1520005 	cmp	r2, r5
 1000854:	0a00003a 	beq	1000944 <array_add_at+0x108>
    if ((ar->size == 0 && index != 0) || index > (ar->size - 1))
 1000858:	e2953000 	adds	r3, r5, #0
 100085c:	13a03001 	movne	r3, #1
 1000860:	e3520000 	cmp	r2, #0
 1000864:	13a03000 	movne	r3, #0
 1000868:	e3530000 	cmp	r3, #0
 100086c:	1a000030 	bne	1000934 <array_add_at+0xf8>
 1000870:	e2423001 	sub	r3, r2, #1
 1000874:	e1530005 	cmp	r3, r5
 1000878:	3a00002d 	bcc	1000934 <array_add_at+0xf8>
    if (ar->size >= ar->capacity) {
 100087c:	e5903004 	ldr	r3, [r0, #4]
 1000880:	e1520003 	cmp	r2, r3
 1000884:	3a00001a 	bcc	10008f4 <array_add_at+0xb8>
    if (ar->capacity == CC_MAX_ELEMENTS)
 1000888:	e3730002 	cmn	r3, #2
 100088c:	0a000035 	beq	1000968 <array_add_at+0x12c>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1000890:	ee073a90 	vmov	s15, r3
 1000894:	ed907a02 	vldr	s14, [r0, #8]
 1000898:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 100089c:	e5902010 	ldr	r2, [r0, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10008a0:	ee677a87 	vmul.f32	s15, s15, s14
 10008a4:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10008a8:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10008ac:	e1530000 	cmp	r3, r0
 10008b0:	31a03000 	movcc	r3, r0
 10008b4:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10008b8:	e1a00100 	lsl	r0, r0, #2
 10008bc:	e5843004 	str	r3, [r4, #4]
 10008c0:	e12fff32 	blx	r2
    if (!new_buff)
 10008c4:	e2507000 	subs	r7, r0, #0
 10008c8:	0a00001b 	beq	100093c <array_add_at+0x100>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10008cc:	e5942000 	ldr	r2, [r4]
 10008d0:	e594100c 	ldr	r1, [r4, #12]
 10008d4:	e1a02102 	lsl	r2, r2, #2
 10008d8:	eb007248 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 10008dc:	e5943018 	ldr	r3, [r4, #24]
 10008e0:	e594000c 	ldr	r0, [r4, #12]
 10008e4:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10008e8:	e5942000 	ldr	r2, [r4]
 10008ec:	e584700c 	str	r7, [r4, #12]
        if (status != CC_OK)
 10008f0:	ea000000 	b	10008f8 <array_add_at+0xbc>
 10008f4:	e590700c 	ldr	r7, [r0, #12]
    memmove(&(ar->buffer[index + 1]),
 10008f8:	e2850001 	add	r0, r5, #1
    size_t shift = (ar->size - index) * sizeof(void*);
 10008fc:	e0422005 	sub	r2, r2, r5
    memmove(&(ar->buffer[index + 1]),
 1000900:	e1a00100 	lsl	r0, r0, #2
 1000904:	e1a02102 	lsl	r2, r2, #2
            &(ar->buffer[index]),
 1000908:	e2405004 	sub	r5, r0, #4
    memmove(&(ar->buffer[index + 1]),
 100090c:	e0870000 	add	r0, r7, r0
 1000910:	e0871005 	add	r1, r7, r5
 1000914:	fa0073b1 	blx	101d7e0 <memmove>
    ar->size++;
 1000918:	e5943000 	ldr	r3, [r4]
 100091c:	e3a00000 	mov	r0, #0
    ar->buffer[index] = element;
 1000920:	e594200c 	ldr	r2, [r4, #12]
    ar->size++;
 1000924:	e2833001 	add	r3, r3, #1
    ar->buffer[index] = element;
 1000928:	e7826005 	str	r6, [r2, r5]
    ar->size++;
 100092c:	e5843000 	str	r3, [r4]
    return CC_OK;
 1000930:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000934:	e3a00008 	mov	r0, #8
 1000938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 100093c:	e3a00001 	mov	r0, #1
 1000940:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->size >= ar->capacity) {
 1000944:	e5903004 	ldr	r3, [r0, #4]
 1000948:	e1550003 	cmp	r5, r3
 100094c:	2a000007 	bcs	1000970 <array_add_at+0x134>
 1000950:	e590700c 	ldr	r7, [r0, #12]
    ar->size++;
 1000954:	e2853001 	add	r3, r5, #1
    ar->buffer[ar->size] = element;
 1000958:	e7876105 	str	r6, [r7, r5, lsl #2]
    return CC_OK;
 100095c:	e3a00000 	mov	r0, #0
    ar->size++;
 1000960:	e5843000 	str	r3, [r4]
    return CC_OK;
 1000964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1000968:	e3a00004 	mov	r0, #4
}
 100096c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 1000970:	e3730002 	cmn	r3, #2
 1000974:	0afffffb 	beq	1000968 <array_add_at+0x12c>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1000978:	ee073a90 	vmov	s15, r3
 100097c:	ed907a02 	vldr	s14, [r0, #8]
 1000980:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1000984:	e5901010 	ldr	r1, [r0, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1000988:	ee677a87 	vmul.f32	s15, s15, s14
 100098c:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1000990:	ee172a90 	vmov	r2, s15
        ar->capacity = CC_MAX_ELEMENTS;
 1000994:	e1530002 	cmp	r3, r2
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1000998:	e1a00102 	lsl	r0, r2, #2
        ar->capacity = CC_MAX_ELEMENTS;
 100099c:	23e02001 	mvncs	r2, #1
 10009a0:	e5842004 	str	r2, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10009a4:	e12fff31 	blx	r1
    if (!new_buff)
 10009a8:	e2507000 	subs	r7, r0, #0
 10009ac:	0affffe2 	beq	100093c <array_add_at+0x100>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10009b0:	e5942000 	ldr	r2, [r4]
 10009b4:	e594100c 	ldr	r1, [r4, #12]
 10009b8:	e1a02102 	lsl	r2, r2, #2
 10009bc:	eb00720f 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 10009c0:	e5943018 	ldr	r3, [r4, #24]
 10009c4:	e594000c 	ldr	r0, [r4, #12]
 10009c8:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10009cc:	e5945000 	ldr	r5, [r4]
 10009d0:	e584700c 	str	r7, [r4, #12]
        if (status != CC_OK)
 10009d4:	eaffffde 	b	1000954 <array_add_at+0x118>

010009d8 <array_replace_at>:
    if (index >= ar->size)
 10009d8:	e590c000 	ldr	ip, [r0]
 10009dc:	e15c0002 	cmp	ip, r2
 10009e0:	9a00000b 	bls	1000a14 <array_replace_at+0x3c>
{
 10009e4:	e92d4010 	push	{r4, lr}
    if (out)
 10009e8:	e3530000 	cmp	r3, #0
 10009ec:	e590400c 	ldr	r4, [r0, #12]
 10009f0:	e1a0e102 	lsl	lr, r2, #2
        *out = ar->buffer[index];
 10009f4:	17942102 	ldrne	r2, [r4, r2, lsl #2]
 10009f8:	e084c00e 	add	ip, r4, lr
 10009fc:	15832000 	strne	r2, [r3]
 1000a00:	1590c00c 	ldrne	ip, [r0, #12]
    return CC_OK;
 1000a04:	e3a00000 	mov	r0, #0
 1000a08:	108cc00e 	addne	ip, ip, lr
    ar->buffer[index] = element;
 1000a0c:	e58c1000 	str	r1, [ip]
}
 1000a10:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000a14:	e3a00008 	mov	r0, #8
}
 1000a18:	e12fff1e 	bx	lr

01000a1c <array_swap_at>:
    if(index1 >= ar->size || index2 >= ar->size)
 1000a1c:	e5903000 	ldr	r3, [r0]
 1000a20:	e1530001 	cmp	r3, r1
 1000a24:	81530002 	cmphi	r3, r2
 1000a28:	93a03001 	movls	r3, #1
 1000a2c:	83a03000 	movhi	r3, #0
 1000a30:	9a000008 	bls	1000a58 <array_swap_at+0x3c>
    tmp = ar->buffer[index1];
 1000a34:	e590c00c 	ldr	ip, [r0, #12]
{
 1000a38:	e92d4010 	push	{r4, lr}
    ar->buffer[index1] = ar->buffer[index2];
 1000a3c:	e79c4102 	ldr	r4, [ip, r2, lsl #2]
    tmp = ar->buffer[index1];
 1000a40:	e79ce101 	ldr	lr, [ip, r1, lsl #2]
    ar->buffer[index1] = ar->buffer[index2];
 1000a44:	e78c4101 	str	r4, [ip, r1, lsl #2]
    ar->buffer[index2] = tmp;
 1000a48:	e590100c 	ldr	r1, [r0, #12]
}
 1000a4c:	e1a00003 	mov	r0, r3
    ar->buffer[index2] = tmp;
 1000a50:	e781e102 	str	lr, [r1, r2, lsl #2]
}
 1000a54:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000a58:	e3a03008 	mov	r3, #8
}
 1000a5c:	e1a00003 	mov	r0, r3
 1000a60:	e12fff1e 	bx	lr

01000a64 <array_remove>:
{
 1000a64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < ar->size; i++) {
 1000a68:	e5905000 	ldr	r5, [r0]
 1000a6c:	e3550000 	cmp	r5, #0
 1000a70:	0a00000e 	beq	1000ab0 <array_remove+0x4c>
        if (ar->buffer[i] == element) {
 1000a74:	e590800c 	ldr	r8, [r0, #12]
 1000a78:	e5983000 	ldr	r3, [r8]
 1000a7c:	e1510003 	cmp	r1, r3
 1000a80:	1288c004 	addne	ip, r8, #4
    for (i = 0; i < ar->size; i++) {
 1000a84:	13a03000 	movne	r3, #0
        if (ar->buffer[i] == element) {
 1000a88:	1a000003 	bne	1000a9c <array_remove+0x38>
 1000a8c:	ea000009 	b	1000ab8 <array_remove+0x54>
 1000a90:	e59e4000 	ldr	r4, [lr]
 1000a94:	e1510004 	cmp	r1, r4
 1000a98:	0a000008 	beq	1000ac0 <array_remove+0x5c>
    for (i = 0; i < ar->size; i++) {
 1000a9c:	e2833001 	add	r3, r3, #1
        if (ar->buffer[i] == element) {
 1000aa0:	e1a0e00c 	mov	lr, ip
    for (i = 0; i < ar->size; i++) {
 1000aa4:	e1550003 	cmp	r5, r3
 1000aa8:	e28cc004 	add	ip, ip, #4
 1000aac:	1afffff7 	bne	1000a90 <array_remove+0x2c>
        return CC_ERR_VALUE_NOT_FOUND;
 1000ab0:	e3a00007 	mov	r0, #7
 1000ab4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (ar->buffer[i] == element) {
 1000ab8:	e1a0e008 	mov	lr, r8
    for (i = 0; i < ar->size; i++) {
 1000abc:	e3a03000 	mov	r3, #0
 1000ac0:	e1a06002 	mov	r6, r2
    if (index != ar->size - 1) {
 1000ac4:	e2452001 	sub	r2, r5, #1
 1000ac8:	e1520003 	cmp	r2, r3
 1000acc:	e1a04001 	mov	r4, r1
 1000ad0:	e1a07000 	mov	r7, r0
 1000ad4:	0a000008 	beq	1000afc <array_remove+0x98>
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1000ad8:	e2455107 	sub	r5, r5, #-1073741823	; 0xc0000001
        memmove(&(ar->buffer[index]),
 1000adc:	e2831001 	add	r1, r3, #1
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1000ae0:	e0453003 	sub	r3, r5, r3
        memmove(&(ar->buffer[index]),
 1000ae4:	e0881101 	add	r1, r8, r1, lsl #2
 1000ae8:	e1a02103 	lsl	r2, r3, #2
 1000aec:	e1a0000e 	mov	r0, lr
 1000af0:	fa00733a 	blx	101d7e0 <memmove>
 1000af4:	e5973000 	ldr	r3, [r7]
 1000af8:	e2433001 	sub	r3, r3, #1
    if (out)
 1000afc:	e3560000 	cmp	r6, #0
    ar->size--;
 1000b00:	e5873000 	str	r3, [r7]
    return CC_OK;
 1000b04:	e3a00000 	mov	r0, #0
        *out = element;
 1000b08:	15864000 	strne	r4, [r6]
 1000b0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01000b10 <array_remove_at>:
    if (index >= ar->size)
 1000b10:	e5903000 	ldr	r3, [r0]
 1000b14:	e1530001 	cmp	r3, r1
 1000b18:	9a000017 	bls	1000b7c <array_remove_at+0x6c>
    if (out)
 1000b1c:	e3520000 	cmp	r2, #0
{
 1000b20:	e92d4010 	push	{r4, lr}
 1000b24:	e1a04000 	mov	r4, r0
        *out = ar->buffer[index];
 1000b28:	1590000c 	ldrne	r0, [r0, #12]
 1000b2c:	17900101 	ldrne	r0, [r0, r1, lsl #2]
 1000b30:	15820000 	strne	r0, [r2]
    if (index != ar->size - 1) {
 1000b34:	e2432001 	sub	r2, r3, #1
 1000b38:	e1520001 	cmp	r2, r1
 1000b3c:	1a000002 	bne	1000b4c <array_remove_at+0x3c>
    ar->size--;
 1000b40:	e5841000 	str	r1, [r4]
    return CC_OK;
 1000b44:	e3a00000 	mov	r0, #0
}
 1000b48:	e8bd8010 	pop	{r4, pc}
        memmove(&(ar->buffer[index]),
 1000b4c:	e1a00101 	lsl	r0, r1, #2
 1000b50:	e594c00c 	ldr	ip, [r4, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1000b54:	e0431001 	sub	r1, r3, r1
 1000b58:	e2412107 	sub	r2, r1, #-1073741823	; 0xc0000001
        memmove(&(ar->buffer[index]),
 1000b5c:	e2801004 	add	r1, r0, #4
 1000b60:	e08c1001 	add	r1, ip, r1
 1000b64:	e1a02102 	lsl	r2, r2, #2
 1000b68:	e08c0000 	add	r0, ip, r0
 1000b6c:	fa00731b 	blx	101d7e0 <memmove>
 1000b70:	e5941000 	ldr	r1, [r4]
 1000b74:	e2411001 	sub	r1, r1, #1
 1000b78:	eafffff0 	b	1000b40 <array_remove_at+0x30>
        return CC_ERR_OUT_OF_RANGE;
 1000b7c:	e3a00008 	mov	r0, #8
}
 1000b80:	e12fff1e 	bx	lr

01000b84 <array_remove_last>:
    return array_remove_at(ar, ar->size - 1, out);
 1000b84:	e5903000 	ldr	r3, [r0]
 1000b88:	e3e02000 	mvn	r2, #0
 1000b8c:	e0933002 	adds	r3, r3, r2
 1000b90:	2a000002 	bcs	1000ba0 <array_remove_last+0x1c>
        return CC_ERR_OUT_OF_RANGE;
 1000b94:	e3a02008 	mov	r2, #8
}
 1000b98:	e1a00002 	mov	r0, r2
 1000b9c:	e12fff1e 	bx	lr
    if (out)
 1000ba0:	e3510000 	cmp	r1, #0
        *out = ar->buffer[index];
 1000ba4:	1590200c 	ldrne	r2, [r0, #12]
 1000ba8:	17922103 	ldrne	r2, [r2, r3, lsl #2]
 1000bac:	15812000 	strne	r2, [r1]
    return CC_OK;
 1000bb0:	e3a02000 	mov	r2, #0
    ar->size--;
 1000bb4:	e5803000 	str	r3, [r0]
    return CC_OK;
 1000bb8:	eafffff6 	b	1000b98 <array_remove_last+0x14>

01000bbc <array_remove_all>:
    ar->size = 0;
 1000bbc:	e3a03000 	mov	r3, #0
 1000bc0:	e5803000 	str	r3, [r0]
}
 1000bc4:	e12fff1e 	bx	lr

01000bc8 <array_remove_all_free>:
    for (i = 0; i < ar->size; i++)
 1000bc8:	e5903000 	ldr	r3, [r0]
{
 1000bcc:	e92d4070 	push	{r4, r5, r6, lr}
 1000bd0:	e1a05000 	mov	r5, r0
    for (i = 0; i < ar->size; i++)
 1000bd4:	e3530000 	cmp	r3, #0
 1000bd8:	0a000007 	beq	1000bfc <array_remove_all_free+0x34>
 1000bdc:	e3a04000 	mov	r4, #0
        free(ar->buffer[i]);
 1000be0:	e595300c 	ldr	r3, [r5, #12]
 1000be4:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++)
 1000be8:	e2844001 	add	r4, r4, #1
        free(ar->buffer[i]);
 1000bec:	fa006ef5 	blx	101c7c8 <free>
    for (i = 0; i < ar->size; i++)
 1000bf0:	e5953000 	ldr	r3, [r5]
 1000bf4:	e1530004 	cmp	r3, r4
 1000bf8:	8afffff8 	bhi	1000be0 <array_remove_all_free+0x18>
    ar->size = 0;
 1000bfc:	e3a03000 	mov	r3, #0
 1000c00:	e5853000 	str	r3, [r5]
}
 1000c04:	e8bd8070 	pop	{r4, r5, r6, pc}

01000c08 <array_get_at>:
    if (index >= ar->size)
 1000c08:	e5903000 	ldr	r3, [r0]
 1000c0c:	e1530001 	cmp	r3, r1
    *out = ar->buffer[index];
 1000c10:	8590300c 	ldrhi	r3, [r0, #12]
    return CC_OK;
 1000c14:	83a00000 	movhi	r0, #0
        return CC_ERR_OUT_OF_RANGE;
 1000c18:	93a00008 	movls	r0, #8
    *out = ar->buffer[index];
 1000c1c:	87933101 	ldrhi	r3, [r3, r1, lsl #2]
 1000c20:	85823000 	strhi	r3, [r2]
}
 1000c24:	e12fff1e 	bx	lr

01000c28 <array_get_last>:
    if (ar->size == 0)
 1000c28:	e5903000 	ldr	r3, [r0]
 1000c2c:	e3530000 	cmp	r3, #0
    *out = ar->buffer[index];
 1000c30:	1590200c 	ldrne	r2, [r0, #12]
 1000c34:	12433001 	subne	r3, r3, #1
    return array_get_at(ar, ar->size - 1, out);
 1000c38:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1000c3c:	03a00007 	moveq	r0, #7
    *out = ar->buffer[index];
 1000c40:	17923103 	ldrne	r3, [r2, r3, lsl #2]
 1000c44:	15813000 	strne	r3, [r1]
}
 1000c48:	e12fff1e 	bx	lr

01000c4c <array_get_buffer>:
}
 1000c4c:	e590000c 	ldr	r0, [r0, #12]
 1000c50:	e12fff1e 	bx	lr

01000c54 <array_index_of>:
{
 1000c54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    for (i = 0; i < ar->size; i++) {
 1000c58:	e590e000 	ldr	lr, [r0]
 1000c5c:	e35e0000 	cmp	lr, #0
 1000c60:	0a00000b 	beq	1000c94 <array_index_of+0x40>
        if (ar->buffer[i] == element) {
 1000c64:	e590000c 	ldr	r0, [r0, #12]
 1000c68:	e5903000 	ldr	r3, [r0]
 1000c6c:	e1510003 	cmp	r1, r3
    for (i = 0; i < ar->size; i++) {
 1000c70:	13a03000 	movne	r3, #0
        if (ar->buffer[i] == element) {
 1000c74:	1a000003 	bne	1000c88 <array_index_of+0x34>
 1000c78:	ea000007 	b	1000c9c <array_index_of+0x48>
 1000c7c:	e5b0c004 	ldr	ip, [r0, #4]!
 1000c80:	e15c0001 	cmp	ip, r1
 1000c84:	0a000005 	beq	1000ca0 <array_index_of+0x4c>
    for (i = 0; i < ar->size; i++) {
 1000c88:	e2833001 	add	r3, r3, #1
 1000c8c:	e153000e 	cmp	r3, lr
 1000c90:	1afffff9 	bne	1000c7c <array_index_of+0x28>
    return CC_ERR_OUT_OF_RANGE;
 1000c94:	e3a00008 	mov	r0, #8
}
 1000c98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    for (i = 0; i < ar->size; i++) {
 1000c9c:	e3a03000 	mov	r3, #0
            *index = i;
 1000ca0:	e5823000 	str	r3, [r2]
            return CC_OK;
 1000ca4:	e3a00000 	mov	r0, #0
 1000ca8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01000cac <array_subarray>:
    if (b > e || e >= ar->size)
 1000cac:	e1510002 	cmp	r1, r2
 1000cb0:	8a000025 	bhi	1000d4c <array_subarray+0xa0>
 1000cb4:	e590c000 	ldr	ip, [r0]
 1000cb8:	e15c0002 	cmp	ip, r2
 1000cbc:	9a000022 	bls	1000d4c <array_subarray+0xa0>
{
 1000cc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1000cc4:	e1a07003 	mov	r7, r3
 1000cc8:	e1a06000 	mov	r6, r0
    Array *sub_ar = ar->mem_calloc(1, sizeof(Array));
 1000ccc:	e5903014 	ldr	r3, [r0, #20]
 1000cd0:	e1a08001 	mov	r8, r1
 1000cd4:	e3a00001 	mov	r0, #1
 1000cd8:	e3a0101c 	mov	r1, #28
 1000cdc:	e1a05002 	mov	r5, r2
 1000ce0:	e12fff33 	blx	r3
    if (!sub_ar)
 1000ce4:	e2504000 	subs	r4, r0, #0
 1000ce8:	0a00001e 	beq	1000d68 <array_subarray+0xbc>
    if (!(sub_ar->buffer = ar->mem_alloc(ar->capacity * sizeof(void*)))) {
 1000cec:	e5960004 	ldr	r0, [r6, #4]
 1000cf0:	e5963010 	ldr	r3, [r6, #16]
 1000cf4:	e1a00100 	lsl	r0, r0, #2
 1000cf8:	e12fff33 	blx	r3
 1000cfc:	e3500000 	cmp	r0, #0
 1000d00:	e584000c 	str	r0, [r4, #12]
 1000d04:	0a000012 	beq	1000d54 <array_subarray+0xa8>
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d08:	e5961014 	ldr	r1, [r6, #20]
    sub_ar->size       = e - b + 1;
 1000d0c:	e2852001 	add	r2, r5, #1
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d10:	e596e010 	ldr	lr, [r6, #16]
    sub_ar->size       = e - b + 1;
 1000d14:	e042c008 	sub	ip, r2, r8
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d18:	e5963018 	ldr	r3, [r6, #24]
    memcpy(sub_ar->buffer,
 1000d1c:	e1a0210c 	lsl	r2, ip, #2
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d20:	e5841014 	str	r1, [r4, #20]
 1000d24:	e584e010 	str	lr, [r4, #16]
 1000d28:	e5843018 	str	r3, [r4, #24]
           &(ar->buffer[b]),
 1000d2c:	e596100c 	ldr	r1, [r6, #12]
    sub_ar->size       = e - b + 1;
 1000d30:	e584c000 	str	ip, [r4]
    sub_ar->capacity   = sub_ar->size;
 1000d34:	e584c004 	str	ip, [r4, #4]
    memcpy(sub_ar->buffer,
 1000d38:	e0811108 	add	r1, r1, r8, lsl #2
 1000d3c:	eb00712f 	bl	101d200 <memcpy>
    *out = sub_ar;
 1000d40:	e5874000 	str	r4, [r7]
    return CC_OK;
 1000d44:	e3a00000 	mov	r0, #0
 1000d48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_INVALID_RANGE;
 1000d4c:	e3a00003 	mov	r0, #3
}
 1000d50:	e12fff1e 	bx	lr
        ar->mem_free(sub_ar);
 1000d54:	e1a00004 	mov	r0, r4
 1000d58:	e5963018 	ldr	r3, [r6, #24]
 1000d5c:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1000d60:	e3a00001 	mov	r0, #1
 1000d64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1000d68:	e3a00001 	mov	r0, #1
}
 1000d6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01000d70 <array_copy_shallow>:
{
 1000d70:	e92d4070 	push	{r4, r5, r6, lr}
 1000d74:	e1a04000 	mov	r4, r0
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000d78:	e5943010 	ldr	r3, [r4, #16]
 1000d7c:	e3a0001c 	mov	r0, #28
{
 1000d80:	e1a06001 	mov	r6, r1
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000d84:	e12fff33 	blx	r3
    if (!copy)
 1000d88:	e2505000 	subs	r5, r0, #0
 1000d8c:	0a00001d 	beq	1000e08 <array_copy_shallow+0x98>
    if (!(copy->buffer = ar->mem_calloc(ar->capacity, sizeof(void*)))) {
 1000d90:	e5943014 	ldr	r3, [r4, #20]
 1000d94:	e3a01004 	mov	r1, #4
 1000d98:	e5940004 	ldr	r0, [r4, #4]
 1000d9c:	e12fff33 	blx	r3
 1000da0:	e3500000 	cmp	r0, #0
 1000da4:	e585000c 	str	r0, [r5, #12]
 1000da8:	0a000011 	beq	1000df4 <array_copy_shallow+0x84>
    copy->exp_factor = ar->exp_factor;
 1000dac:	e5941008 	ldr	r1, [r4, #8]
    copy->capacity   = ar->capacity;
 1000db0:	e5943004 	ldr	r3, [r4, #4]
    copy->size       = ar->size;
 1000db4:	e5942000 	ldr	r2, [r4]
    copy->mem_alloc  = ar->mem_alloc;
 1000db8:	e594c010 	ldr	ip, [r4, #16]
    copy->exp_factor = ar->exp_factor;
 1000dbc:	e5851008 	str	r1, [r5, #8]
    copy->mem_calloc = ar->mem_calloc;
 1000dc0:	e5941014 	ldr	r1, [r4, #20]
    copy->capacity   = ar->capacity;
 1000dc4:	e5853004 	str	r3, [r5, #4]
    copy->mem_free   = ar->mem_free;
 1000dc8:	e5943018 	ldr	r3, [r4, #24]
    copy->size       = ar->size;
 1000dcc:	e5852000 	str	r2, [r5]
    memcpy(copy->buffer,
 1000dd0:	e1a02102 	lsl	r2, r2, #2
    copy->mem_calloc = ar->mem_calloc;
 1000dd4:	e5851014 	str	r1, [r5, #20]
    copy->mem_alloc  = ar->mem_alloc;
 1000dd8:	e585c010 	str	ip, [r5, #16]
    copy->mem_free   = ar->mem_free;
 1000ddc:	e5853018 	str	r3, [r5, #24]
    memcpy(copy->buffer,
 1000de0:	e594100c 	ldr	r1, [r4, #12]
 1000de4:	eb007105 	bl	101d200 <memcpy>
    *out = copy;
 1000de8:	e5865000 	str	r5, [r6]
    return CC_OK;
 1000dec:	e3a00000 	mov	r0, #0
 1000df0:	e8bd8070 	pop	{r4, r5, r6, pc}
        ar->mem_free(copy);
 1000df4:	e1a00005 	mov	r0, r5
 1000df8:	e5943018 	ldr	r3, [r4, #24]
 1000dfc:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1000e00:	e3a00001 	mov	r0, #1
 1000e04:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1000e08:	e3a00001 	mov	r0, #1
}
 1000e0c:	e8bd8070 	pop	{r4, r5, r6, pc}

01000e10 <array_copy_deep>:
{
 1000e10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1000e14:	e1a06000 	mov	r6, r0
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000e18:	e5963010 	ldr	r3, [r6, #16]
 1000e1c:	e3a0001c 	mov	r0, #28
{
 1000e20:	e1a08001 	mov	r8, r1
 1000e24:	e1a09002 	mov	r9, r2
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000e28:	e12fff33 	blx	r3
    if (!copy)
 1000e2c:	e2505000 	subs	r5, r0, #0
 1000e30:	0a000022 	beq	1000ec0 <array_copy_deep+0xb0>
    if (!(copy->buffer = ar->mem_calloc(ar->capacity, sizeof(void*)))) {
 1000e34:	e5963014 	ldr	r3, [r6, #20]
 1000e38:	e3a01004 	mov	r1, #4
 1000e3c:	e5960004 	ldr	r0, [r6, #4]
 1000e40:	e12fff33 	blx	r3
 1000e44:	e3500000 	cmp	r0, #0
 1000e48:	e1a07000 	mov	r7, r0
 1000e4c:	e585000c 	str	r0, [r5, #12]
 1000e50:	0a00001c 	beq	1000ec8 <array_copy_deep+0xb8>
    copy->size       = ar->size;
 1000e54:	e5963000 	ldr	r3, [r6]
    copy->exp_factor = ar->exp_factor;
 1000e58:	e596c008 	ldr	ip, [r6, #8]
    copy->capacity   = ar->capacity;
 1000e5c:	e5960004 	ldr	r0, [r6, #4]
    copy->mem_alloc  = ar->mem_alloc;
 1000e60:	e5961010 	ldr	r1, [r6, #16]
    for (i = 0; i < copy->size; i++)
 1000e64:	e3530000 	cmp	r3, #0
    copy->mem_calloc = ar->mem_calloc;
 1000e68:	e5962014 	ldr	r2, [r6, #20]
    copy->size       = ar->size;
 1000e6c:	e5853000 	str	r3, [r5]
    copy->mem_free   = ar->mem_free;
 1000e70:	e5963018 	ldr	r3, [r6, #24]
    copy->exp_factor = ar->exp_factor;
 1000e74:	e585c008 	str	ip, [r5, #8]
    copy->capacity   = ar->capacity;
 1000e78:	e5850004 	str	r0, [r5, #4]
    copy->mem_alloc  = ar->mem_alloc;
 1000e7c:	e5851010 	str	r1, [r5, #16]
    copy->mem_free   = ar->mem_free;
 1000e80:	e1c521f4 	strd	r2, [r5, #20]
    for (i = 0; i < copy->size; i++)
 1000e84:	0a00000a 	beq	1000eb4 <array_copy_deep+0xa4>
 1000e88:	e3a04000 	mov	r4, #0
 1000e8c:	ea000000 	b	1000e94 <array_copy_deep+0x84>
 1000e90:	e595700c 	ldr	r7, [r5, #12]
        copy->buffer[i] = cp(ar->buffer[i]);
 1000e94:	e596300c 	ldr	r3, [r6, #12]
 1000e98:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 1000e9c:	e12fff38 	blx	r8
    for (i = 0; i < copy->size; i++)
 1000ea0:	e5953000 	ldr	r3, [r5]
        copy->buffer[i] = cp(ar->buffer[i]);
 1000ea4:	e7870104 	str	r0, [r7, r4, lsl #2]
    for (i = 0; i < copy->size; i++)
 1000ea8:	e2844001 	add	r4, r4, #1
 1000eac:	e1530004 	cmp	r3, r4
 1000eb0:	8afffff6 	bhi	1000e90 <array_copy_deep+0x80>
    *out = copy;
 1000eb4:	e5895000 	str	r5, [r9]
    return CC_OK;
 1000eb8:	e3a00000 	mov	r0, #0
 1000ebc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1000ec0:	e3a00001 	mov	r0, #1
}
 1000ec4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        ar->mem_free(copy);
 1000ec8:	e1a00005 	mov	r0, r5
 1000ecc:	e5963018 	ldr	r3, [r6, #24]
 1000ed0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1000ed4:	e3a00001 	mov	r0, #1
 1000ed8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01000edc <array_filter_mut>:
{
 1000edc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (ar->size == 0)
 1000ee0:	e5904000 	ldr	r4, [r0]
 1000ee4:	e3540000 	cmp	r4, #0
 1000ee8:	0a00002d 	beq	1000fa4 <array_filter_mut+0xc8>
    size_t keep = 0;
 1000eec:	e3a07000 	mov	r7, #0
 1000ef0:	e1a08001 	mov	r8, r1
 1000ef4:	e1a06000 	mov	r6, r0
    for (size_t i = ar->size - 1; i != ((size_t) - 1); i--) {
 1000ef8:	e2444001 	sub	r4, r4, #1
    size_t rm   = 0;
 1000efc:	e1a05007 	mov	r5, r7
        if (!pred(ar->buffer[i])) {
 1000f00:	e596300c 	ldr	r3, [r6, #12]
 1000f04:	e1a09104 	lsl	r9, r4, #2
 1000f08:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 1000f0c:	e12fff38 	blx	r8
 1000f10:	e3500000 	cmp	r0, #0
            rm++;
 1000f14:	02855001 	addeq	r5, r5, #1
        if (!pred(ar->buffer[i])) {
 1000f18:	0a000008 	beq	1000f40 <array_filter_mut+0x64>
        if (rm > 0) {
 1000f1c:	e3550000 	cmp	r5, #0
 1000f20:	0a000004 	beq	1000f38 <array_filter_mut+0x5c>
            if (keep > 0) {
 1000f24:	e3570000 	cmp	r7, #0
 1000f28:	1a00000a 	bne	1000f58 <array_filter_mut+0x7c>
            ar->size -= rm;
 1000f2c:	e5963000 	ldr	r3, [r6]
 1000f30:	e0435005 	sub	r5, r3, r5
 1000f34:	e5865000 	str	r5, [r6]
        keep++;
 1000f38:	e2877001 	add	r7, r7, #1
 1000f3c:	e3a05000 	mov	r5, #0
    for (size_t i = ar->size - 1; i != ((size_t) - 1); i--) {
 1000f40:	e2544001 	subs	r4, r4, #1
 1000f44:	2affffed 	bcs	1000f00 <array_filter_mut+0x24>
    if (rm > 0) {
 1000f48:	e3550000 	cmp	r5, #0
 1000f4c:	1a00000a 	bne	1000f7c <array_filter_mut+0xa0>
    return CC_OK;
 1000f50:	e1a00005 	mov	r0, r5
}
 1000f54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                memmove(&(ar->buffer[i + 1]),
 1000f58:	e596100c 	ldr	r1, [r6, #12]
                        &(ar->buffer[i + 1 + rm]),
 1000f5c:	e0853004 	add	r3, r5, r4
                memmove(&(ar->buffer[i + 1]),
 1000f60:	e2890004 	add	r0, r9, #4
                        &(ar->buffer[i + 1 + rm]),
 1000f64:	e2833001 	add	r3, r3, #1
                memmove(&(ar->buffer[i + 1]),
 1000f68:	e1a02107 	lsl	r2, r7, #2
 1000f6c:	e0810000 	add	r0, r1, r0
 1000f70:	e0811103 	add	r1, r1, r3, lsl #2
 1000f74:	fa007219 	blx	101d7e0 <memmove>
 1000f78:	eaffffeb 	b	1000f2c <array_filter_mut+0x50>
        memmove(&(ar->buffer[0]),
 1000f7c:	e596100c 	ldr	r1, [r6, #12]
 1000f80:	e1a02107 	lsl	r2, r7, #2
 1000f84:	e1a00001 	mov	r0, r1
 1000f88:	e0811105 	add	r1, r1, r5, lsl #2
 1000f8c:	fa007213 	blx	101d7e0 <memmove>
        ar->size -= rm;
 1000f90:	e5963000 	ldr	r3, [r6]
    return CC_OK;
 1000f94:	e3a00000 	mov	r0, #0
        ar->size -= rm;
 1000f98:	e0435005 	sub	r5, r3, r5
 1000f9c:	e5865000 	str	r5, [r6]
 1000fa0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000fa4:	e3a00008 	mov	r0, #8
 1000fa8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01000fac <array_filter>:
    if (ar->size == 0)
 1000fac:	e5903000 	ldr	r3, [r0]
 1000fb0:	e3530000 	cmp	r3, #0
 1000fb4:	0a000037 	beq	1001098 <array_filter+0xec>
{
 1000fb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1000fbc:	e1a05000 	mov	r5, r0
    Array *filtered = ar->mem_alloc(sizeof(Array));
 1000fc0:	e5903010 	ldr	r3, [r0, #16]
 1000fc4:	e3a0001c 	mov	r0, #28
 1000fc8:	e1a09002 	mov	r9, r2
 1000fcc:	e1a08001 	mov	r8, r1
 1000fd0:	e12fff33 	blx	r3
    if (!filtered)
 1000fd4:	e2506000 	subs	r6, r0, #0
 1000fd8:	0a000030 	beq	10010a0 <array_filter+0xf4>
    if (!(filtered->buffer = ar->mem_calloc(ar->capacity, sizeof(void*)))) {
 1000fdc:	e5953014 	ldr	r3, [r5, #20]
 1000fe0:	e3a01004 	mov	r1, #4
 1000fe4:	e5950004 	ldr	r0, [r5, #4]
 1000fe8:	e12fff33 	blx	r3
 1000fec:	e3500000 	cmp	r0, #0
 1000ff0:	e586000c 	str	r0, [r6, #12]
 1000ff4:	0a00002b 	beq	10010a8 <array_filter+0xfc>
    filtered->size       = 0;
 1000ff8:	e3a04000 	mov	r4, #0
    filtered->exp_factor = ar->exp_factor;
 1000ffc:	e5951008 	ldr	r1, [r5, #8]
    filtered->size       = 0;
 1001000:	e5864000 	str	r4, [r6]
    filtered->capacity   = ar->capacity;
 1001004:	e1c520d0 	ldrd	r2, [r5]
    filtered->exp_factor = ar->exp_factor;
 1001008:	e5861008 	str	r1, [r6, #8]
    filtered->mem_alloc  = ar->mem_alloc;
 100100c:	e5951010 	ldr	r1, [r5, #16]
    for (size_t i = 0; i < ar->size; i++) {
 1001010:	e1520004 	cmp	r2, r4
    filtered->mem_calloc = ar->mem_calloc;
 1001014:	e5952014 	ldr	r2, [r5, #20]
    filtered->capacity   = ar->capacity;
 1001018:	e5863004 	str	r3, [r6, #4]
    filtered->mem_free   = ar->mem_free;
 100101c:	e5953018 	ldr	r3, [r5, #24]
    filtered->mem_alloc  = ar->mem_alloc;
 1001020:	e5861010 	str	r1, [r6, #16]
    filtered->mem_free   = ar->mem_free;
 1001024:	e1c621f4 	strd	r2, [r6, #20]
    for (size_t i = 0; i < ar->size; i++) {
 1001028:	0a000012 	beq	1001078 <array_filter+0xcc>
    size_t f = 0;
 100102c:	e1a07004 	mov	r7, r4
        if (pred(ar->buffer[i])) {
 1001030:	e595300c 	ldr	r3, [r5, #12]
 1001034:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 1001038:	e12fff38 	blx	r8
 100103c:	e3500000 	cmp	r0, #0
            filtered->buffer[f++] = ar->buffer[i];
 1001040:	e2872001 	add	r2, r7, #1
        if (pred(ar->buffer[i])) {
 1001044:	0a00000e 	beq	1001084 <array_filter+0xd8>
            filtered->buffer[f++] = ar->buffer[i];
 1001048:	e595000c 	ldr	r0, [r5, #12]
            filtered->size++;
 100104c:	e5963000 	ldr	r3, [r6]
            filtered->buffer[f++] = ar->buffer[i];
 1001050:	e596100c 	ldr	r1, [r6, #12]
 1001054:	e7900104 	ldr	r0, [r0, r4, lsl #2]
    for (size_t i = 0; i < ar->size; i++) {
 1001058:	e2844001 	add	r4, r4, #1
            filtered->size++;
 100105c:	e2833001 	add	r3, r3, #1
            filtered->buffer[f++] = ar->buffer[i];
 1001060:	e7810107 	str	r0, [r1, r7, lsl #2]
 1001064:	e1a07002 	mov	r7, r2
            filtered->size++;
 1001068:	e5863000 	str	r3, [r6]
    for (size_t i = 0; i < ar->size; i++) {
 100106c:	e5953000 	ldr	r3, [r5]
 1001070:	e1530004 	cmp	r3, r4
 1001074:	8affffed 	bhi	1001030 <array_filter+0x84>
    *out = filtered;
 1001078:	e5896000 	str	r6, [r9]
    return CC_OK;
 100107c:	e3a00000 	mov	r0, #0
 1001080:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for (size_t i = 0; i < ar->size; i++) {
 1001084:	e5953000 	ldr	r3, [r5]
 1001088:	e2844001 	add	r4, r4, #1
 100108c:	e1530004 	cmp	r3, r4
 1001090:	8affffe6 	bhi	1001030 <array_filter+0x84>
 1001094:	eafffff7 	b	1001078 <array_filter+0xcc>
        return CC_ERR_OUT_OF_RANGE;
 1001098:	e3a00008 	mov	r0, #8
}
 100109c:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 10010a0:	e3a00001 	mov	r0, #1
}
 10010a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        ar->mem_free(filtered);
 10010a8:	e1a00006 	mov	r0, r6
 10010ac:	e5953018 	ldr	r3, [r5, #24]
 10010b0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10010b4:	e3a00001 	mov	r0, #1
 10010b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010010bc <array_reverse>:
    if (ar->size == 0)
 10010bc:	e5902000 	ldr	r2, [r0]
 10010c0:	e3520000 	cmp	r2, #0
 10010c4:	012fff1e 	bxeq	lr
{
 10010c8:	e92d4010 	push	{r4, lr}
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 10010cc:	e2424001 	sub	r4, r2, #1
 10010d0:	e1b040a4 	lsrs	r4, r4, #1
 10010d4:	08bd8010 	popeq	{r4, pc}
 10010d8:	e2422107 	sub	r2, r2, #-1073741823	; 0xc0000001
 10010dc:	e3a03000 	mov	r3, #0
 10010e0:	e1a02102 	lsl	r2, r2, #2
        void *tmp = ar->buffer[i];
 10010e4:	e590100c 	ldr	r1, [r0, #12]
        ar->buffer[i] = ar->buffer[j];
 10010e8:	e791e002 	ldr	lr, [r1, r2]
        void *tmp = ar->buffer[i];
 10010ec:	e791c103 	ldr	ip, [r1, r3, lsl #2]
        ar->buffer[i] = ar->buffer[j];
 10010f0:	e781e103 	str	lr, [r1, r3, lsl #2]
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 10010f4:	e2833001 	add	r3, r3, #1
        ar->buffer[j] = tmp;
 10010f8:	e590100c 	ldr	r1, [r0, #12]
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 10010fc:	e1530004 	cmp	r3, r4
        ar->buffer[j] = tmp;
 1001100:	e781c002 	str	ip, [r1, r2]
 1001104:	e2422004 	sub	r2, r2, #4
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 1001108:	1afffff5 	bne	10010e4 <array_reverse+0x28>
 100110c:	e8bd8010 	pop	{r4, pc}

01001110 <array_trim_capacity>:
{
 1001110:	e92d4070 	push	{r4, r5, r6, lr}
 1001114:	e1a04000 	mov	r4, r0
    if (ar->size == ar->capacity)
 1001118:	e5943004 	ldr	r3, [r4, #4]
 100111c:	e5900000 	ldr	r0, [r0]
 1001120:	e1500003 	cmp	r0, r3
 1001124:	0a000013 	beq	1001178 <array_trim_capacity+0x68>
    void **new_buff = ar->mem_calloc(ar->size, sizeof(void*));
 1001128:	e5943014 	ldr	r3, [r4, #20]
 100112c:	e3a01004 	mov	r1, #4
 1001130:	e12fff33 	blx	r3
    if (!new_buff)
 1001134:	e2505000 	subs	r5, r0, #0
 1001138:	0a000010 	beq	1001180 <array_trim_capacity+0x70>
    size_t size = ar->size < 1 ? 1 : ar->size;
 100113c:	e5942000 	ldr	r2, [r4]
    memcpy(new_buff, ar->buffer, size * sizeof(void*));
 1001140:	e1a00005 	mov	r0, r5
 1001144:	e594100c 	ldr	r1, [r4, #12]
    size_t size = ar->size < 1 ? 1 : ar->size;
 1001148:	e3520000 	cmp	r2, #0
 100114c:	11a02102 	lslne	r2, r2, #2
 1001150:	03a02004 	moveq	r2, #4
    memcpy(new_buff, ar->buffer, size * sizeof(void*));
 1001154:	eb007029 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 1001158:	e5943018 	ldr	r3, [r4, #24]
 100115c:	e594000c 	ldr	r0, [r4, #12]
 1001160:	e12fff33 	blx	r3
    ar->capacity = ar->size;
 1001164:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1001168:	e3a00000 	mov	r0, #0
    ar->buffer   = new_buff;
 100116c:	e584500c 	str	r5, [r4, #12]
    ar->capacity = ar->size;
 1001170:	e5843004 	str	r3, [r4, #4]
    return CC_OK;
 1001174:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_OK;
 1001178:	e3a00000 	mov	r0, #0
 100117c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1001180:	e3a00001 	mov	r0, #1
}
 1001184:	e8bd8070 	pop	{r4, r5, r6, pc}

01001188 <array_contains>:
{
 1001188:	e1a03000 	mov	r3, r0
    for (i = 0; i < ar->size; i++) {
 100118c:	e5900000 	ldr	r0, [r0]
 1001190:	e3500000 	cmp	r0, #0
 1001194:	012fff1e 	bxeq	lr
 1001198:	e593300c 	ldr	r3, [r3, #12]
 100119c:	e083c100 	add	ip, r3, r0, lsl #2
    size_t o = 0;
 10011a0:	e3a00000 	mov	r0, #0
        if (ar->buffer[i] == element)
 10011a4:	e4932004 	ldr	r2, [r3], #4
 10011a8:	e1510002 	cmp	r1, r2
            o++;
 10011ac:	02800001 	addeq	r0, r0, #1
    for (i = 0; i < ar->size; i++) {
 10011b0:	e153000c 	cmp	r3, ip
 10011b4:	1afffffa 	bne	10011a4 <array_contains+0x1c>
 10011b8:	e12fff1e 	bx	lr

010011bc <array_contains_value>:
{
 10011bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < ar->size; i++) {
 10011c0:	e5906000 	ldr	r6, [r0]
 10011c4:	e3560000 	cmp	r6, #0
 10011c8:	0a00000e 	beq	1001208 <array_contains_value+0x4c>
 10011cc:	e3a04000 	mov	r4, #0
 10011d0:	e1a08002 	mov	r8, r2
 10011d4:	e1a07001 	mov	r7, r1
 10011d8:	e1a05000 	mov	r5, r0
    size_t o = 0;
 10011dc:	e1a06004 	mov	r6, r4
        if (cmp(element, ar->buffer[i]) == 0)
 10011e0:	e595300c 	ldr	r3, [r5, #12]
 10011e4:	e1a00007 	mov	r0, r7
 10011e8:	e7931104 	ldr	r1, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++) {
 10011ec:	e2844001 	add	r4, r4, #1
        if (cmp(element, ar->buffer[i]) == 0)
 10011f0:	e12fff38 	blx	r8
    for (i = 0; i < ar->size; i++) {
 10011f4:	e5953000 	ldr	r3, [r5]
        if (cmp(element, ar->buffer[i]) == 0)
 10011f8:	e3500000 	cmp	r0, #0
            o++;
 10011fc:	02866001 	addeq	r6, r6, #1
    for (i = 0; i < ar->size; i++) {
 1001200:	e1530004 	cmp	r3, r4
 1001204:	8afffff5 	bhi	10011e0 <array_contains_value+0x24>
}
 1001208:	e1a00006 	mov	r0, r6
 100120c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01001210 <array_size>:
}
 1001210:	e5900000 	ldr	r0, [r0]
 1001214:	e12fff1e 	bx	lr

01001218 <array_capacity>:
}
 1001218:	e5900004 	ldr	r0, [r0, #4]
 100121c:	e12fff1e 	bx	lr

01001220 <array_sort>:
{
 1001220:	e1a0c000 	mov	ip, r0
    qsort(ar->buffer, ar->size, sizeof(void*), cmp);
 1001224:	e1a03001 	mov	r3, r1
 1001228:	e590000c 	ldr	r0, [r0, #12]
 100122c:	e3a02004 	mov	r2, #4
 1001230:	e59c1000 	ldr	r1, [ip]
 1001234:	ea00997b 	b	1027828 <__qsort_from_arm>

01001238 <array_map>:
 *               element
 */
void array_map(Array *ar, void (*fn) (void *e))
{
    size_t i;
    for (i = 0; i < ar->size; i++)
 1001238:	e5903000 	ldr	r3, [r0]
 100123c:	e3530000 	cmp	r3, #0
 1001240:	012fff1e 	bxeq	lr
{
 1001244:	e92d4070 	push	{r4, r5, r6, lr}
 1001248:	e1a06001 	mov	r6, r1
 100124c:	e1a05000 	mov	r5, r0
    for (i = 0; i < ar->size; i++)
 1001250:	e3a04000 	mov	r4, #0
        fn(ar->buffer[i]);
 1001254:	e595300c 	ldr	r3, [r5, #12]
 1001258:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++)
 100125c:	e2844001 	add	r4, r4, #1
        fn(ar->buffer[i]);
 1001260:	e12fff36 	blx	r6
    for (i = 0; i < ar->size; i++)
 1001264:	e5953000 	ldr	r3, [r5]
 1001268:	e1530004 	cmp	r3, r4
 100126c:	8afffff8 	bhi	1001254 <array_map+0x1c>
 1001270:	e8bd8070 	pop	{r4, r5, r6, pc}

01001274 <array_reduce>:
 *               element
 * @param[in] result the pointer which will collect the end result
 */
void array_reduce(Array *ar, void (*fn) (void*, void*, void*), void *result)
{
    if (ar->size == 1) {
 1001274:	e5903000 	ldr	r3, [r0]
{
 1001278:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100127c:	e1a07001 	mov	r7, r1
    if (ar->size == 1) {
 1001280:	e3530001 	cmp	r3, #1
 1001284:	0a000013 	beq	10012d8 <array_reduce+0x64>
        fn(ar->buffer[0], NULL, result);
        return;
    }
    if (ar->size > 1)
 1001288:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
        fn(ar->buffer[0], ar->buffer[1], result);
 100128c:	e590300c 	ldr	r3, [r0, #12]
 1001290:	e1a05000 	mov	r5, r0
 1001294:	e1a06002 	mov	r6, r2
 1001298:	e1c300d0 	ldrd	r0, [r3]
 100129c:	e12fff37 	blx	r7

    for (size_t i = 2; i < ar->size; i++)
 10012a0:	e5953000 	ldr	r3, [r5]
 10012a4:	e3530002 	cmp	r3, #2
 10012a8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
 10012ac:	e3a04002 	mov	r4, #2
        fn(result, ar->buffer[i], result);
 10012b0:	e595300c 	ldr	r3, [r5, #12]
 10012b4:	e1a02006 	mov	r2, r6
 10012b8:	e1a00006 	mov	r0, r6
 10012bc:	e7931104 	ldr	r1, [r3, r4, lsl #2]
    for (size_t i = 2; i < ar->size; i++)
 10012c0:	e2844001 	add	r4, r4, #1
        fn(result, ar->buffer[i], result);
 10012c4:	e12fff37 	blx	r7
    for (size_t i = 2; i < ar->size; i++)
 10012c8:	e5953000 	ldr	r3, [r5]
 10012cc:	e1530004 	cmp	r3, r4
 10012d0:	8afffff6 	bhi	10012b0 <array_reduce+0x3c>
 10012d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        fn(ar->buffer[0], NULL, result);
 10012d8:	e590300c 	ldr	r3, [r0, #12]
 10012dc:	e3a01000 	mov	r1, #0
 10012e0:	e5930000 	ldr	r0, [r3]
 10012e4:	e1a03007 	mov	r3, r7
}
 10012e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        fn(ar->buffer[0], NULL, result);
 10012ec:	e12fff13 	bx	r3

010012f0 <array_iter_init>:
 * @param[in] ar the array to iterate over
 */
void array_iter_init(ArrayIter *iter, Array *ar)
{
    iter->ar    = ar;
    iter->index = 0;
 10012f0:	e3a03000 	mov	r3, #0
 10012f4:	e880000a 	stm	r0, {r1, r3}
    iter->last_removed = false;
 10012f8:	e5c03008 	strb	r3, [r0, #8]
}
 10012fc:	e12fff1e 	bx	lr

01001300 <array_iter_next>:
 *
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Array has been reached.
 */
enum cc_stat array_iter_next(ArrayIter *iter, void **out)
{
 1001300:	e1a03000 	mov	r3, r0
    if (iter->index >= iter->ar->size)
 1001304:	e5900000 	ldr	r0, [r0]
 1001308:	e5932004 	ldr	r2, [r3, #4]
 100130c:	e590c000 	ldr	ip, [r0]
 1001310:	e152000c 	cmp	r2, ip
 1001314:	2a000009 	bcs	1001340 <array_iter_next+0x40>
        return CC_ITER_END;

    *out = iter->ar->buffer[iter->index];
 1001318:	e590000c 	ldr	r0, [r0, #12]

    iter->index++;
    iter->last_removed = false;
 100131c:	e3a0c000 	mov	ip, #0
{
 1001320:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    iter->index++;
 1001324:	e282e001 	add	lr, r2, #1
    *out = iter->ar->buffer[iter->index];
 1001328:	e7902102 	ldr	r2, [r0, r2, lsl #2]

    return CC_OK;
 100132c:	e1a0000c 	mov	r0, ip
    *out = iter->ar->buffer[iter->index];
 1001330:	e5812000 	str	r2, [r1]
    iter->index++;
 1001334:	e583e004 	str	lr, [r3, #4]
    iter->last_removed = false;
 1001338:	e5c3c008 	strb	ip, [r3, #8]
}
 100133c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_ITER_END;
 1001340:	e3a00009 	mov	r0, #9
}
 1001344:	e12fff1e 	bx	lr

01001348 <array_iter_remove>:
 */
enum cc_stat array_iter_remove(ArrayIter *iter, void **out)
{
    enum cc_stat status = CC_ERR_VALUE_NOT_FOUND;

    if (!iter->last_removed) {
 1001348:	e5d03008 	ldrb	r3, [r0, #8]
 100134c:	e3530000 	cmp	r3, #0
 1001350:	0a000001 	beq	100135c <array_iter_remove+0x14>
    enum cc_stat status = CC_ERR_VALUE_NOT_FOUND;
 1001354:	e3a00007 	mov	r0, #7
        status = array_remove_at(iter->ar, iter->index - 1, out);
        if (status == CC_OK)
            iter->last_removed = true;
    }
    return status;
}
 1001358:	e12fff1e 	bx	lr
{
 100135c:	e92d4070 	push	{r4, r5, r6, lr}
        status = array_remove_at(iter->ar, iter->index - 1, out);
 1001360:	e8901020 	ldm	r0, {r5, ip}
    if (index >= ar->size)
 1001364:	e5952000 	ldr	r2, [r5]
        status = array_remove_at(iter->ar, iter->index - 1, out);
 1001368:	e24c3001 	sub	r3, ip, #1
    if (index >= ar->size)
 100136c:	e1530002 	cmp	r3, r2
 1001370:	2a000015 	bcs	10013cc <array_iter_remove+0x84>
    if (out)
 1001374:	e3510000 	cmp	r1, #0
        *out = ar->buffer[index];
 1001378:	e1a04000 	mov	r4, r0
 100137c:	1595e00c 	ldrne	lr, [r5, #12]
 1001380:	179ee103 	ldrne	lr, [lr, r3, lsl #2]
 1001384:	1581e000 	strne	lr, [r1]
    if (index != ar->size - 1) {
 1001388:	e15c0002 	cmp	ip, r2
 100138c:	1a000005 	bne	10013a8 <array_iter_remove+0x60>
    ar->size--;
 1001390:	e2422001 	sub	r2, r2, #1
            iter->last_removed = true;
 1001394:	e3a03001 	mov	r3, #1
    ar->size--;
 1001398:	e5852000 	str	r2, [r5]
        status = array_remove_at(iter->ar, iter->index - 1, out);
 100139c:	e3a00000 	mov	r0, #0
            iter->last_removed = true;
 10013a0:	e5c43008 	strb	r3, [r4, #8]
 10013a4:	e8bd8070 	pop	{r4, r5, r6, pc}
        memmove(&(ar->buffer[index]),
 10013a8:	e595000c 	ldr	r0, [r5, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 10013ac:	e2422107 	sub	r2, r2, #-1073741823	; 0xc0000001
 10013b0:	e0422003 	sub	r2, r2, r3
        memmove(&(ar->buffer[index]),
 10013b4:	e1a02102 	lsl	r2, r2, #2
 10013b8:	e080110c 	add	r1, r0, ip, lsl #2
 10013bc:	e0800103 	add	r0, r0, r3, lsl #2
 10013c0:	fa007106 	blx	101d7e0 <memmove>
 10013c4:	e5952000 	ldr	r2, [r5]
 10013c8:	eafffff0 	b	1001390 <array_iter_remove+0x48>
        return CC_ERR_OUT_OF_RANGE;
 10013cc:	e3a00008 	mov	r0, #8
}
 10013d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010013d4 <array_iter_add>:
 * @return CC_OK if the element was successfully added, CC_ERR_ALLOC if the
 * memory allocation for the new element failed, or CC_ERR_MAX_CAPACITY if
 * the array is already at maximum capacity.
 */
enum cc_stat array_iter_add(ArrayIter *iter, void *element)
{
 10013d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10013d8:	e1a07001 	mov	r7, r1
    return array_add_at(iter->ar, element, iter->index++);
 10013dc:	e1c040d0 	ldrd	r4, [r0]
    if (index == ar->size)
 10013e0:	e5943000 	ldr	r3, [r4]
    return array_add_at(iter->ar, element, iter->index++);
 10013e4:	e2856001 	add	r6, r5, #1
 10013e8:	e5806004 	str	r6, [r0, #4]
    if (index == ar->size)
 10013ec:	e1550003 	cmp	r5, r3
 10013f0:	0a00003a 	beq	10014e0 <array_iter_add+0x10c>
    if ((ar->size == 0 && index != 0) || index > (ar->size - 1))
 10013f4:	e1a02003 	mov	r2, r3
 10013f8:	e2953000 	adds	r3, r5, #0
 10013fc:	13a03001 	movne	r3, #1
 1001400:	e3520000 	cmp	r2, #0
 1001404:	13a03000 	movne	r3, #0
 1001408:	e3530000 	cmp	r3, #0
 100140c:	1a00002f 	bne	10014d0 <array_iter_add+0xfc>
 1001410:	e2423001 	sub	r3, r2, #1
 1001414:	e1550003 	cmp	r5, r3
 1001418:	8a00002c 	bhi	10014d0 <array_iter_add+0xfc>
    if (ar->size >= ar->capacity) {
 100141c:	e5943004 	ldr	r3, [r4, #4]
 1001420:	e1520003 	cmp	r2, r3
 1001424:	3a00001a 	bcc	1001494 <array_iter_add+0xc0>
    if (ar->capacity == CC_MAX_ELEMENTS)
 1001428:	e3730002 	cmn	r3, #2
 100142c:	0a000034 	beq	1001504 <array_iter_add+0x130>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001430:	ee073a90 	vmov	s15, r3
 1001434:	ed947a02 	vldr	s14, [r4, #8]
 1001438:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 100143c:	e5942010 	ldr	r2, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001440:	ee677a87 	vmul.f32	s15, s15, s14
 1001444:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1001448:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 100144c:	e1530000 	cmp	r3, r0
 1001450:	31a03000 	movcc	r3, r0
 1001454:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001458:	e1a00100 	lsl	r0, r0, #2
 100145c:	e5843004 	str	r3, [r4, #4]
 1001460:	e12fff32 	blx	r2
    if (!new_buff)
 1001464:	e2508000 	subs	r8, r0, #0
 1001468:	0a00001a 	beq	10014d8 <array_iter_add+0x104>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 100146c:	e5942000 	ldr	r2, [r4]
 1001470:	e594100c 	ldr	r1, [r4, #12]
 1001474:	e1a02102 	lsl	r2, r2, #2
 1001478:	eb006f60 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 100147c:	e5943018 	ldr	r3, [r4, #24]
 1001480:	e594000c 	ldr	r0, [r4, #12]
 1001484:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001488:	e5942000 	ldr	r2, [r4]
 100148c:	e584800c 	str	r8, [r4, #12]
        if (status != CC_OK)
 1001490:	ea000000 	b	1001498 <array_iter_add+0xc4>
 1001494:	e594800c 	ldr	r8, [r4, #12]
    memmove(&(ar->buffer[index + 1]),
 1001498:	e1a00106 	lsl	r0, r6, #2
    size_t shift = (ar->size - index) * sizeof(void*);
 100149c:	e0422005 	sub	r2, r2, r5
    memmove(&(ar->buffer[index + 1]),
 10014a0:	e1a02102 	lsl	r2, r2, #2
            &(ar->buffer[index]),
 10014a4:	e2405004 	sub	r5, r0, #4
    memmove(&(ar->buffer[index + 1]),
 10014a8:	e0881005 	add	r1, r8, r5
 10014ac:	e0880000 	add	r0, r8, r0
 10014b0:	fa0070ca 	blx	101d7e0 <memmove>
    ar->size++;
 10014b4:	e5943000 	ldr	r3, [r4]
 10014b8:	e3a00000 	mov	r0, #0
    ar->buffer[index] = element;
 10014bc:	e594200c 	ldr	r2, [r4, #12]
    ar->size++;
 10014c0:	e2833001 	add	r3, r3, #1
    ar->buffer[index] = element;
 10014c4:	e7827005 	str	r7, [r2, r5]
    ar->size++;
 10014c8:	e5843000 	str	r3, [r4]
    return CC_OK;
 10014cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 10014d0:	e3a00008 	mov	r0, #8
 10014d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 10014d8:	e3a00001 	mov	r0, #1
 10014dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->size >= ar->capacity) {
 10014e0:	e5942004 	ldr	r2, [r4, #4]
 10014e4:	e1530002 	cmp	r3, r2
 10014e8:	2a000007 	bcs	100150c <array_iter_add+0x138>
    ar->buffer[ar->size] = element;
 10014ec:	e594100c 	ldr	r1, [r4, #12]
    ar->size++;
 10014f0:	e2832001 	add	r2, r3, #1
    return CC_OK;
 10014f4:	e3a00000 	mov	r0, #0
    ar->buffer[ar->size] = element;
 10014f8:	e7817103 	str	r7, [r1, r3, lsl #2]
    ar->size++;
 10014fc:	e5842000 	str	r2, [r4]
    return CC_OK;
 1001500:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1001504:	e3a00004 	mov	r0, #4
}
 1001508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 100150c:	e3720002 	cmn	r2, #2
 1001510:	0afffffb 	beq	1001504 <array_iter_add+0x130>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001514:	ee072a90 	vmov	s15, r2
 1001518:	ed947a02 	vldr	s14, [r4, #8]
 100151c:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001520:	e5941010 	ldr	r1, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001524:	ee677a87 	vmul.f32	s15, s15, s14
 1001528:	eefc7ae7 	vcvt.u32.f32	s15, s15
 100152c:	ee173a90 	vmov	r3, s15
        ar->capacity = CC_MAX_ELEMENTS;
 1001530:	e1520003 	cmp	r2, r3
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001534:	e1a00103 	lsl	r0, r3, #2
        ar->capacity = CC_MAX_ELEMENTS;
 1001538:	23e03001 	mvncs	r3, #1
 100153c:	e5843004 	str	r3, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001540:	e12fff31 	blx	r1
    if (!new_buff)
 1001544:	e2505000 	subs	r5, r0, #0
 1001548:	0affffe2 	beq	10014d8 <array_iter_add+0x104>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 100154c:	e5942000 	ldr	r2, [r4]
 1001550:	e594100c 	ldr	r1, [r4, #12]
 1001554:	e1a02102 	lsl	r2, r2, #2
 1001558:	eb006f28 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 100155c:	e5943018 	ldr	r3, [r4, #24]
 1001560:	e594000c 	ldr	r0, [r4, #12]
 1001564:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001568:	e5943000 	ldr	r3, [r4]
 100156c:	e584500c 	str	r5, [r4, #12]
        if (status != CC_OK)
 1001570:	eaffffdd 	b	10014ec <array_iter_add+0x118>

01001574 <array_iter_replace>:
 * @return CC_OK if the element was replaced successfully, or
 * CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat array_iter_replace(ArrayIter *iter, void *element, void **out)
{
    return array_replace_at(iter->ar, element, iter->index - 1, out);
 1001574:	e590c000 	ldr	ip, [r0]
 1001578:	e5903004 	ldr	r3, [r0, #4]
    if (index >= ar->size)
 100157c:	e59c0000 	ldr	r0, [ip]
    return array_replace_at(iter->ar, element, iter->index - 1, out);
 1001580:	e2433001 	sub	r3, r3, #1
    if (index >= ar->size)
 1001584:	e1530000 	cmp	r3, r0
 1001588:	2a00000b 	bcs	10015bc <array_iter_replace+0x48>
{
 100158c:	e92d4010 	push	{r4, lr}
    if (out)
 1001590:	e3520000 	cmp	r2, #0
 1001594:	e59c400c 	ldr	r4, [ip, #12]
 1001598:	e1a0e103 	lsl	lr, r3, #2
        *out = ar->buffer[index];
 100159c:	17943103 	ldrne	r3, [r4, r3, lsl #2]
 10015a0:	e084000e 	add	r0, r4, lr
 10015a4:	15823000 	strne	r3, [r2]
 10015a8:	159c000c 	ldrne	r0, [ip, #12]
 10015ac:	1080000e 	addne	r0, r0, lr
    ar->buffer[index] = element;
 10015b0:	e5801000 	str	r1, [r0]
    return CC_OK;
 10015b4:	e3a00000 	mov	r0, #0
}
 10015b8:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 10015bc:	e3a00008 	mov	r0, #8
}
 10015c0:	e12fff1e 	bx	lr

010015c4 <array_iter_index>:
 *
 * @return the index.
 */
size_t array_iter_index(ArrayIter *iter)
{
    return iter->index - 1;
 10015c4:	e5900004 	ldr	r0, [r0, #4]
}
 10015c8:	e2400001 	sub	r0, r0, #1
 10015cc:	e12fff1e 	bx	lr

010015d0 <array_zip_iter_init>:
 */
void array_zip_iter_init(ArrayZipIter *iter, Array *ar1, Array *ar2)
{
    iter->ar1 = ar1;
    iter->ar2 = ar2;
    iter->index = 0;
 10015d0:	e3a03000 	mov	r3, #0
 10015d4:	e880000e 	stm	r0, {r1, r2, r3}
    iter->last_removed = false;
 10015d8:	e5c0300c 	strb	r3, [r0, #12]
}
 10015dc:	e12fff1e 	bx	lr

010015e0 <array_zip_iter_next>:
 *
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end of one
 * of the arrays has been reached.
 */
enum cc_stat array_zip_iter_next(ArrayZipIter *iter, void **out1, void **out2)
{
 10015e0:	e1a03000 	mov	r3, r0
    if (iter->index >= iter->ar1->size || iter->index >= iter->ar2->size)
 10015e4:	e5900000 	ldr	r0, [r0]
{
 10015e8:	e92d4030 	push	{r4, r5, lr}
    if (iter->index >= iter->ar1->size || iter->index >= iter->ar2->size)
 10015ec:	e593c008 	ldr	ip, [r3, #8]
 10015f0:	e590e000 	ldr	lr, [r0]
 10015f4:	e15c000e 	cmp	ip, lr
 10015f8:	2a000010 	bcs	1001640 <array_zip_iter_next+0x60>
 10015fc:	e593e004 	ldr	lr, [r3, #4]
 1001600:	e59ee000 	ldr	lr, [lr]
 1001604:	e15c000e 	cmp	ip, lr
 1001608:	2a00000c 	bcs	1001640 <array_zip_iter_next+0x60>
        return CC_ITER_END;

    *out1 = iter->ar1->buffer[iter->index];
 100160c:	e590000c 	ldr	r0, [r0, #12]
    *out2 = iter->ar2->buffer[iter->index];

    iter->index++;
    iter->last_removed = false;
 1001610:	e3a0e000 	mov	lr, #0
    iter->index++;
 1001614:	e28c4001 	add	r4, ip, #1
    *out1 = iter->ar1->buffer[iter->index];
 1001618:	e790510c 	ldr	r5, [r0, ip, lsl #2]

    return CC_OK;
 100161c:	e1a0000e 	mov	r0, lr
    *out1 = iter->ar1->buffer[iter->index];
 1001620:	e5815000 	str	r5, [r1]
    *out2 = iter->ar2->buffer[iter->index];
 1001624:	e5931004 	ldr	r1, [r3, #4]
 1001628:	e591100c 	ldr	r1, [r1, #12]
 100162c:	e791110c 	ldr	r1, [r1, ip, lsl #2]
 1001630:	e5821000 	str	r1, [r2]
    iter->index++;
 1001634:	e5834008 	str	r4, [r3, #8]
    iter->last_removed = false;
 1001638:	e5c3e00c 	strb	lr, [r3, #12]
    return CC_OK;
 100163c:	e8bd8030 	pop	{r4, r5, pc}
        return CC_ITER_END;
 1001640:	e3a00009 	mov	r0, #9
}
 1001644:	e8bd8030 	pop	{r4, r5, pc}

01001648 <array_zip_iter_remove>:
 * @return CC_OK if the element was successfully removed, CC_ERR_OUT_OF_RANGE if the
 * state of the iterator is invalid, or CC_ERR_VALUE_NOT_FOUND if the element was
 * already removed.
 */
enum cc_stat array_zip_iter_remove(ArrayZipIter *iter, void **out1, void **out2)
{
 1001648:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if ((iter->index - 1) >= iter->ar1->size || (iter->index - 1) >= iter->ar2->size)
 100164c:	e5905000 	ldr	r5, [r0]
 1001650:	e590e008 	ldr	lr, [r0, #8]
 1001654:	e595c000 	ldr	ip, [r5]
 1001658:	e24e3001 	sub	r3, lr, #1
 100165c:	e153000c 	cmp	r3, ip
 1001660:	2a000008 	bcs	1001688 <array_zip_iter_remove+0x40>
 1001664:	e5904004 	ldr	r4, [r0, #4]
 1001668:	e5944000 	ldr	r4, [r4]
 100166c:	e1530004 	cmp	r3, r4
 1001670:	2a000004 	bcs	1001688 <array_zip_iter_remove+0x40>
        return CC_ERR_OUT_OF_RANGE;

    if (!iter->last_removed) {
 1001674:	e5d0400c 	ldrb	r4, [r0, #12]
 1001678:	e3540000 	cmp	r4, #0
 100167c:	0a000003 	beq	1001690 <array_zip_iter_remove+0x48>
        array_remove_at(iter->ar1, iter->index - 1, out1);
        array_remove_at(iter->ar2, iter->index - 1, out2);
        iter->last_removed = true;
        return CC_OK;
    }
    return CC_ERR_VALUE_NOT_FOUND;
 1001680:	e3a00007 	mov	r0, #7
}
 1001684:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1001688:	e3a00008 	mov	r0, #8
 100168c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (out)
 1001690:	e3510000 	cmp	r1, #0
        *out = ar->buffer[index];
 1001694:	e1a06002 	mov	r6, r2
 1001698:	1595400c 	ldrne	r4, [r5, #12]
 100169c:	17944103 	ldrne	r4, [r4, r3, lsl #2]
 10016a0:	15814000 	strne	r4, [r1]
    if (index != ar->size - 1) {
 10016a4:	e15e000c 	cmp	lr, ip
 10016a8:	e1a04000 	mov	r4, r0
 10016ac:	01a0200c 	moveq	r2, ip
 10016b0:	0a000009 	beq	10016dc <array_zip_iter_remove+0x94>
        memmove(&(ar->buffer[index]),
 10016b4:	e595000c 	ldr	r0, [r5, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 10016b8:	e24c2107 	sub	r2, ip, #-1073741823	; 0xc0000001
 10016bc:	e0422003 	sub	r2, r2, r3
        memmove(&(ar->buffer[index]),
 10016c0:	e1a02102 	lsl	r2, r2, #2
 10016c4:	e080110e 	add	r1, r0, lr, lsl #2
 10016c8:	e0800103 	add	r0, r0, r3, lsl #2
 10016cc:	fa007043 	blx	101d7e0 <memmove>
 10016d0:	e594c008 	ldr	ip, [r4, #8]
 10016d4:	e5952000 	ldr	r2, [r5]
 10016d8:	e24c3001 	sub	r3, ip, #1
        array_remove_at(iter->ar2, iter->index - 1, out2);
 10016dc:	e5947004 	ldr	r7, [r4, #4]
    ar->size--;
 10016e0:	e2422001 	sub	r2, r2, #1
 10016e4:	e5852000 	str	r2, [r5]
    if (index >= ar->size)
 10016e8:	e5972000 	ldr	r2, [r7]
 10016ec:	e1520003 	cmp	r2, r3
 10016f0:	9a00000f 	bls	1001734 <array_zip_iter_remove+0xec>
    if (out)
 10016f4:	e3560000 	cmp	r6, #0
        *out = ar->buffer[index];
 10016f8:	1597100c 	ldrne	r1, [r7, #12]
 10016fc:	17911103 	ldrne	r1, [r1, r3, lsl #2]
 1001700:	15861000 	strne	r1, [r6]
    if (index != ar->size - 1) {
 1001704:	e152000c 	cmp	r2, ip
 1001708:	0a000007 	beq	100172c <array_zip_iter_remove+0xe4>
        memmove(&(ar->buffer[index]),
 100170c:	e597000c 	ldr	r0, [r7, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1001710:	e2422107 	sub	r2, r2, #-1073741823	; 0xc0000001
 1001714:	e0422003 	sub	r2, r2, r3
        memmove(&(ar->buffer[index]),
 1001718:	e1a02102 	lsl	r2, r2, #2
 100171c:	e080110c 	add	r1, r0, ip, lsl #2
 1001720:	e0800103 	add	r0, r0, r3, lsl #2
 1001724:	fa00702d 	blx	101d7e0 <memmove>
 1001728:	e597c000 	ldr	ip, [r7]
    ar->size--;
 100172c:	e24cc001 	sub	ip, ip, #1
 1001730:	e587c000 	str	ip, [r7]
        iter->last_removed = true;
 1001734:	e3a03001 	mov	r3, #1
        return CC_OK;
 1001738:	e3a00000 	mov	r0, #0
        iter->last_removed = true;
 100173c:	e5c4300c 	strb	r3, [r4, #12]
        return CC_OK;
 1001740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01001744 <array_zip_iter_add>:
 *
 * @return CC_OK if the element pair was successfully added to the arrays, or
 * CC_ERR_ALLOC if the memory allocation for the new elements failed.
 */
enum cc_stat array_zip_iter_add(ArrayZipIter *iter, void *e1, void *e2)
{
 1001744:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1001748:	e1a08002 	mov	r8, r2
    size_t index = iter->index++;
    Array  *ar1  = iter->ar1;
 100174c:	e5906000 	ldr	r6, [r0]
{
 1001750:	e1a09001 	mov	r9, r1
    Array  *ar2  = iter->ar2;
 1001754:	e1c040d4 	ldrd	r4, [r0, #4]

    /* Make sure both array buffers have room */
    if ((ar1->size == ar1->capacity && (expand_capacity(ar1) != CC_OK)) ||
 1001758:	e5962004 	ldr	r2, [r6, #4]
 100175c:	e5963000 	ldr	r3, [r6]
    size_t index = iter->index++;
 1001760:	e2857001 	add	r7, r5, #1
 1001764:	e5807008 	str	r7, [r0, #8]
    if ((ar1->size == ar1->capacity && (expand_capacity(ar1) != CC_OK)) ||
 1001768:	e1530002 	cmp	r3, r2
 100176c:	0a00005d 	beq	10018e8 <array_zip_iter_add+0x1a4>
            (ar2->size == ar2->capacity && (expand_capacity(ar2) != CC_OK)))
 1001770:	e5942004 	ldr	r2, [r4, #4]
    if ((ar1->size == ar1->capacity && (expand_capacity(ar1) != CC_OK)) ||
 1001774:	e5943000 	ldr	r3, [r4]
 1001778:	e1530002 	cmp	r3, r2
 100177c:	0a00003f 	beq	1001880 <array_zip_iter_add+0x13c>
        return CC_ERR_ALLOC;

    array_add_at(ar1, e1, index);
 1001780:	e1a02005 	mov	r2, r5
 1001784:	e1a01009 	mov	r1, r9
 1001788:	e1a00006 	mov	r0, r6
 100178c:	ebfffc2a 	bl	100083c <array_add_at>
    if (index == ar->size)
 1001790:	e5943000 	ldr	r3, [r4]
 1001794:	e1550003 	cmp	r5, r3
 1001798:	e1a02003 	mov	r2, r3
 100179c:	0a00006d 	beq	1001958 <array_zip_iter_add+0x214>
    if ((ar->size == 0 && index != 0) || index > (ar->size - 1))
 10017a0:	e2953000 	adds	r3, r5, #0
 10017a4:	13a03001 	movne	r3, #1
 10017a8:	e3520000 	cmp	r2, #0
 10017ac:	13a03000 	movne	r3, #0
 10017b0:	e3530000 	cmp	r3, #0
 10017b4:	1a00002f 	bne	1001878 <array_zip_iter_add+0x134>
 10017b8:	e2423001 	sub	r3, r2, #1
 10017bc:	e1550003 	cmp	r5, r3
 10017c0:	8a00002c 	bhi	1001878 <array_zip_iter_add+0x134>
    if (ar->size >= ar->capacity) {
 10017c4:	e5943004 	ldr	r3, [r4, #4]
 10017c8:	e1520003 	cmp	r2, r3
 10017cc:	3a00001a 	bcc	100183c <array_zip_iter_add+0xf8>
    if (ar->capacity == CC_MAX_ELEMENTS)
 10017d0:	e3730002 	cmn	r3, #2
 10017d4:	0a000027 	beq	1001878 <array_zip_iter_add+0x134>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10017d8:	ee073a90 	vmov	s15, r3
 10017dc:	ed947a02 	vldr	s14, [r4, #8]
 10017e0:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10017e4:	e5942010 	ldr	r2, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10017e8:	ee677a87 	vmul.f32	s15, s15, s14
 10017ec:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10017f0:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10017f4:	e1530000 	cmp	r3, r0
 10017f8:	31a03000 	movcc	r3, r0
 10017fc:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001800:	e1a00100 	lsl	r0, r0, #2
 1001804:	e5843004 	str	r3, [r4, #4]
 1001808:	e12fff32 	blx	r2
    if (!new_buff)
 100180c:	e2506000 	subs	r6, r0, #0
 1001810:	0a000018 	beq	1001878 <array_zip_iter_add+0x134>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 1001814:	e5942000 	ldr	r2, [r4]
 1001818:	e594100c 	ldr	r1, [r4, #12]
 100181c:	e1a02102 	lsl	r2, r2, #2
 1001820:	eb006e76 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 1001824:	e5943018 	ldr	r3, [r4, #24]
 1001828:	e594000c 	ldr	r0, [r4, #12]
 100182c:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001830:	e5942000 	ldr	r2, [r4]
 1001834:	e584600c 	str	r6, [r4, #12]
        if (status != CC_OK)
 1001838:	ea000000 	b	1001840 <array_zip_iter_add+0xfc>
 100183c:	e594600c 	ldr	r6, [r4, #12]
    memmove(&(ar->buffer[index + 1]),
 1001840:	e1a00107 	lsl	r0, r7, #2
    size_t shift = (ar->size - index) * sizeof(void*);
 1001844:	e0422005 	sub	r2, r2, r5
    memmove(&(ar->buffer[index + 1]),
 1001848:	e1a02102 	lsl	r2, r2, #2
            &(ar->buffer[index]),
 100184c:	e2405004 	sub	r5, r0, #4
    memmove(&(ar->buffer[index + 1]),
 1001850:	e0861005 	add	r1, r6, r5
 1001854:	e0860000 	add	r0, r6, r0
 1001858:	fa006fe0 	blx	101d7e0 <memmove>
    ar->size++;
 100185c:	e5943000 	ldr	r3, [r4]
    array_add_at(ar2, e2, index);

    return CC_OK;
 1001860:	e3a00000 	mov	r0, #0
    ar->buffer[index] = element;
 1001864:	e594200c 	ldr	r2, [r4, #12]
    ar->size++;
 1001868:	e2833001 	add	r3, r3, #1
    ar->buffer[index] = element;
 100186c:	e7828005 	str	r8, [r2, r5]
    ar->size++;
 1001870:	e5843000 	str	r3, [r4]
}
 1001874:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    return CC_OK;
 1001878:	e3a00000 	mov	r0, #0
 100187c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 1001880:	e3730002 	cmn	r3, #2
 1001884:	0a000019 	beq	10018f0 <array_zip_iter_add+0x1ac>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001888:	ee073a90 	vmov	s15, r3
 100188c:	ed947a02 	vldr	s14, [r4, #8]
 1001890:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001894:	e5942010 	ldr	r2, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001898:	ee677a87 	vmul.f32	s15, s15, s14
 100189c:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10018a0:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10018a4:	e1530000 	cmp	r3, r0
 10018a8:	31a03000 	movcc	r3, r0
 10018ac:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10018b0:	e1a00100 	lsl	r0, r0, #2
 10018b4:	e5843004 	str	r3, [r4, #4]
 10018b8:	e12fff32 	blx	r2
    if (!new_buff)
 10018bc:	e250a000 	subs	sl, r0, #0
 10018c0:	0a00000a 	beq	10018f0 <array_zip_iter_add+0x1ac>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10018c4:	e5942000 	ldr	r2, [r4]
 10018c8:	e594100c 	ldr	r1, [r4, #12]
 10018cc:	e1a02102 	lsl	r2, r2, #2
 10018d0:	eb006e4a 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 10018d4:	e5943018 	ldr	r3, [r4, #24]
 10018d8:	e594000c 	ldr	r0, [r4, #12]
 10018dc:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10018e0:	e584a00c 	str	sl, [r4, #12]
    return CC_OK;
 10018e4:	eaffffa5 	b	1001780 <array_zip_iter_add+0x3c>
    if (ar->capacity == CC_MAX_ELEMENTS)
 10018e8:	e3730002 	cmn	r3, #2
 10018ec:	1a000001 	bne	10018f8 <array_zip_iter_add+0x1b4>
        return CC_ERR_ALLOC;
 10018f0:	e3a00001 	mov	r0, #1
 10018f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10018f8:	ee073a90 	vmov	s15, r3
 10018fc:	ed967a02 	vldr	s14, [r6, #8]
 1001900:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001904:	e5962010 	ldr	r2, [r6, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001908:	ee677a87 	vmul.f32	s15, s15, s14
 100190c:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1001910:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 1001914:	e1530000 	cmp	r3, r0
 1001918:	31a03000 	movcc	r3, r0
 100191c:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001920:	e1a00100 	lsl	r0, r0, #2
 1001924:	e5863004 	str	r3, [r6, #4]
 1001928:	e12fff32 	blx	r2
    if (!new_buff)
 100192c:	e250a000 	subs	sl, r0, #0
 1001930:	0affffee 	beq	10018f0 <array_zip_iter_add+0x1ac>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 1001934:	e5962000 	ldr	r2, [r6]
 1001938:	e596100c 	ldr	r1, [r6, #12]
 100193c:	e1a02102 	lsl	r2, r2, #2
 1001940:	eb006e2e 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 1001944:	e5963018 	ldr	r3, [r6, #24]
 1001948:	e596000c 	ldr	r0, [r6, #12]
 100194c:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001950:	e586a00c 	str	sl, [r6, #12]
    return CC_OK;
 1001954:	eaffff85 	b	1001770 <array_zip_iter_add+0x2c>
    if (ar->size >= ar->capacity) {
 1001958:	e5942004 	ldr	r2, [r4, #4]
 100195c:	e1530002 	cmp	r3, r2
 1001960:	2a000005 	bcs	100197c <array_zip_iter_add+0x238>
    ar->buffer[ar->size] = element;
 1001964:	e594100c 	ldr	r1, [r4, #12]
    ar->size++;
 1001968:	e2832001 	add	r2, r3, #1
    return CC_OK;
 100196c:	e3a00000 	mov	r0, #0
    ar->buffer[ar->size] = element;
 1001970:	e7818103 	str	r8, [r1, r3, lsl #2]
    ar->size++;
 1001974:	e5842000 	str	r2, [r4]
    return CC_OK;
 1001978:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 100197c:	e3720002 	cmn	r2, #2
 1001980:	0affffbc 	beq	1001878 <array_zip_iter_add+0x134>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001984:	ee072a90 	vmov	s15, r2
 1001988:	ed947a02 	vldr	s14, [r4, #8]
 100198c:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001990:	e5941010 	ldr	r1, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001994:	ee677a87 	vmul.f32	s15, s15, s14
 1001998:	eefc7ae7 	vcvt.u32.f32	s15, s15
 100199c:	ee173a90 	vmov	r3, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10019a0:	e1520003 	cmp	r2, r3
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10019a4:	e1a00103 	lsl	r0, r3, #2
        ar->capacity = CC_MAX_ELEMENTS;
 10019a8:	23e03001 	mvncs	r3, #1
 10019ac:	e5843004 	str	r3, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10019b0:	e12fff31 	blx	r1
    if (!new_buff)
 10019b4:	e2505000 	subs	r5, r0, #0
 10019b8:	0affffae 	beq	1001878 <array_zip_iter_add+0x134>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10019bc:	e5942000 	ldr	r2, [r4]
 10019c0:	e594100c 	ldr	r1, [r4, #12]
 10019c4:	e1a02102 	lsl	r2, r2, #2
 10019c8:	eb006e0c 	bl	101d200 <memcpy>
    ar->mem_free(ar->buffer);
 10019cc:	e5943018 	ldr	r3, [r4, #24]
 10019d0:	e594000c 	ldr	r0, [r4, #12]
 10019d4:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10019d8:	e5943000 	ldr	r3, [r4]
 10019dc:	e584500c 	str	r5, [r4, #12]
        if (status != CC_OK)
 10019e0:	eaffffdf 	b	1001964 <array_zip_iter_add+0x220>

010019e4 <array_zip_iter_replace>:
 * @param[out] out2 output of the replaced element from the second array
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat array_zip_iter_replace(ArrayZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
 10019e4:	e92d4070 	push	{r4, r5, r6, lr}
    if ((iter->index - 1) >= iter->ar1->size || (iter->index - 1) >= iter->ar2->size)
 10019e8:	e5905000 	ldr	r5, [r0]
 10019ec:	e590c008 	ldr	ip, [r0, #8]
 10019f0:	e595e000 	ldr	lr, [r5]
 10019f4:	e24cc001 	sub	ip, ip, #1
 10019f8:	e15c000e 	cmp	ip, lr
 10019fc:	2a00001c 	bcs	1001a74 <array_zip_iter_replace+0x90>
 1001a00:	e590e004 	ldr	lr, [r0, #4]
 1001a04:	e59ee000 	ldr	lr, [lr]
 1001a08:	e15c000e 	cmp	ip, lr
 1001a0c:	2a000018 	bcs	1001a74 <array_zip_iter_replace+0x90>
    if (out)
 1001a10:	e595600c 	ldr	r6, [r5, #12]
 1001a14:	e1a0410c 	lsl	r4, ip, #2
 1001a18:	e3530000 	cmp	r3, #0
 1001a1c:	e086e004 	add	lr, r6, r4
        *out = ar->buffer[index];
 1001a20:	1796e10c 	ldrne	lr, [r6, ip, lsl #2]
 1001a24:	1583e000 	strne	lr, [r3]
 1001a28:	1595e00c 	ldrne	lr, [r5, #12]
 1001a2c:	108ee004 	addne	lr, lr, r4
    ar->buffer[index] = element;
 1001a30:	e58e1000 	str	r1, [lr]
        return CC_ERR_OUT_OF_RANGE;

    array_replace_at(iter->ar1, e1, iter->index - 1, out1);
    array_replace_at(iter->ar2, e2, iter->index - 1, out2);
 1001a34:	e5903004 	ldr	r3, [r0, #4]
    if (index >= ar->size)
 1001a38:	e5931000 	ldr	r1, [r3]
 1001a3c:	e15c0001 	cmp	ip, r1
 1001a40:	2a00000d 	bcs	1001a7c <array_zip_iter_replace+0x98>
    if (out)
 1001a44:	e59d1010 	ldr	r1, [sp, #16]
 1001a48:	e593000c 	ldr	r0, [r3, #12]
 1001a4c:	e3510000 	cmp	r1, #0
 1001a50:	e0801004 	add	r1, r0, r4
        *out = ar->buffer[index];
 1001a54:	1790110c 	ldrne	r1, [r0, ip, lsl #2]
 1001a58:	159d0010 	ldrne	r0, [sp, #16]
 1001a5c:	15801000 	strne	r1, [r0]

    return CC_OK;
 1001a60:	e3a00000 	mov	r0, #0
 1001a64:	1593100c 	ldrne	r1, [r3, #12]
 1001a68:	10811004 	addne	r1, r1, r4
    ar->buffer[index] = element;
 1001a6c:	e5812000 	str	r2, [r1]
    return CC_OK;
 1001a70:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_OUT_OF_RANGE;
 1001a74:	e3a00008 	mov	r0, #8
 1001a78:	e8bd8070 	pop	{r4, r5, r6, pc}
    return CC_OK;
 1001a7c:	e3a00000 	mov	r0, #0
}
 1001a80:	e8bd8070 	pop	{r4, r5, r6, pc}

01001a84 <array_zip_iter_index>:
 *
 * @return current iterator index.
 */
size_t array_zip_iter_index(ArrayZipIter *iter)
{
    return iter->index - 1;
 1001a84:	e5900008 	ldr	r0, [r0, #8]
}
 1001a88:	e2400001 	sub	r0, r0, #1
 1001a8c:	e12fff1e 	bx	lr

01001a90 <cc_common_cmp_str>:
 *
 * @return
 */
int cc_common_cmp_str(const void *str1, const void *str2)
{
    return strcmp((const char*) str1, (const char*) str2);
 1001a90:	ea009768 	b	1027838 <__strcmp_from_arm>

01001a94 <expand_capacity>:
 * the memory allocation for the new buffer failed, or CC_ERR_MAX_CAPACITY
 * if the Deque is already at maximum capacity.
 */
static enum cc_stat expand_capacity(Deque *deque)
{
    if (deque->capacity == MAX_POW_TWO)
 1001a94:	e5903004 	ldr	r3, [r0, #4]
 1001a98:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
 1001a9c:	0a000028 	beq	1001b44 <expand_capacity+0xb0>
{
 1001aa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
        return CC_ERR_MAX_CAPACITY;

    size_t new_capacity = deque->capacity << 1;
 1001aa4:	e1a05083 	lsl	r5, r3, #1
    void **new_buffer = deque->mem_calloc(new_capacity, sizeof(void*));
 1001aa8:	e1a04000 	mov	r4, r0
 1001aac:	e5903018 	ldr	r3, [r0, #24]
 1001ab0:	e3a01004 	mov	r1, #4
 1001ab4:	e1a00005 	mov	r0, r5
 1001ab8:	e12fff33 	blx	r3

    if (!new_buffer)
 1001abc:	e2507000 	subs	r7, r0, #0
 1001ac0:	0a00001d 	beq	1001b3c <expand_capacity+0xa8>
        if (deque->last > deque->first) {
 1001ac4:	e5943008 	ldr	r3, [r4, #8]
 1001ac8:	e594800c 	ldr	r8, [r4, #12]
 1001acc:	e5941010 	ldr	r1, [r4, #16]
 1001ad0:	e1580003 	cmp	r8, r3
 1001ad4:	e0811103 	add	r1, r1, r3, lsl #2
 1001ad8:	8a000013 	bhi	1001b2c <expand_capacity+0x98>
            size_t e = deque->capacity - deque->first;
 1001adc:	e5946004 	ldr	r6, [r4, #4]
 1001ae0:	e0466003 	sub	r6, r6, r3
            memcpy(buff,
 1001ae4:	e1a06106 	lsl	r6, r6, #2
 1001ae8:	e1a02006 	mov	r2, r6
 1001aec:	eb006dc3 	bl	101d200 <memcpy>
            memcpy(&(buff[e]),
 1001af0:	e0870006 	add	r0, r7, r6
 1001af4:	e1a02108 	lsl	r2, r8, #2
 1001af8:	e5941010 	ldr	r1, [r4, #16]
 1001afc:	eb006dbf 	bl	101d200 <memcpy>
        return CC_ERR_ALLOC;

    copy_buffer(deque, new_buffer, NULL);
    deque->mem_free(deque->buffer);
 1001b00:	e594301c 	ldr	r3, [r4, #28]
 1001b04:	e5940010 	ldr	r0, [r4, #16]
 1001b08:	e12fff33 	blx	r3

    deque->first    = 0;
    deque->last     = deque->size;
 1001b0c:	e5942000 	ldr	r2, [r4]
    deque->first    = 0;
 1001b10:	e3a03000 	mov	r3, #0
    deque->capacity = new_capacity;
 1001b14:	e5845004 	str	r5, [r4, #4]
    deque->buffer   = new_buffer;

    return CC_OK;
 1001b18:	e1a00003 	mov	r0, r3
    deque->buffer   = new_buffer;
 1001b1c:	e5847010 	str	r7, [r4, #16]
    deque->last     = deque->size;
 1001b20:	e584200c 	str	r2, [r4, #12]
    deque->first    = 0;
 1001b24:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 1001b28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            memcpy(buff,
 1001b2c:	e5942000 	ldr	r2, [r4]
 1001b30:	e1a02102 	lsl	r2, r2, #2
 1001b34:	eb006db1 	bl	101d200 <memcpy>
 1001b38:	eafffff0 	b	1001b00 <expand_capacity+0x6c>
        return CC_ERR_ALLOC;
 1001b3c:	e3a00001 	mov	r0, #1
}
 1001b40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1001b44:	e3a00004 	mov	r0, #4
}
 1001b48:	e12fff1e 	bx	lr

01001b4c <deque_new>:
{
 1001b4c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001b50:	e3a01020 	mov	r1, #32
{
 1001b54:	e1a05000 	mov	r5, r0
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001b58:	e3a00001 	mov	r0, #1
 1001b5c:	fa006815 	blx	101bbb8 <calloc>
    if (!deque)
 1001b60:	e2504000 	subs	r4, r0, #0
 1001b64:	0a000015 	beq	1001bc0 <deque_new+0x74>
    if (!(deque->buffer = conf->mem_alloc(conf->capacity * sizeof(void*)))) {
 1001b68:	e3a00020 	mov	r0, #32
 1001b6c:	fa006b11 	blx	101c7b8 <malloc>
 1001b70:	e3500000 	cmp	r0, #0
 1001b74:	e5840010 	str	r0, [r4, #16]
 1001b78:	0a000012 	beq	1001bc8 <deque_new+0x7c>
    deque->mem_alloc  = conf->mem_alloc;
 1001b7c:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    deque->mem_calloc = conf->mem_calloc;
 1001b80:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    deque->mem_free   = conf->mem_free;
 1001b84:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    deque->mem_alloc  = conf->mem_alloc;
 1001b88:	e3401101 	movt	r1, #257	; 0x101
    deque->mem_calloc = conf->mem_calloc;
 1001b8c:	e3402101 	movt	r2, #257	; 0x101
    deque->mem_free   = conf->mem_free;
 1001b90:	e3403101 	movt	r3, #257	; 0x101
    deque->size       = 0;
 1001b94:	e3a06000 	mov	r6, #0
 1001b98:	e3a07008 	mov	r7, #8
 1001b9c:	e3a08000 	mov	r8, #0
 1001ba0:	e3a09000 	mov	r9, #0
    *d = deque;
 1001ba4:	e5854000 	str	r4, [r5]
    return CC_OK;
 1001ba8:	e3a00000 	mov	r0, #0
    deque->mem_alloc  = conf->mem_alloc;
 1001bac:	e5841014 	str	r1, [r4, #20]
    deque->mem_free   = conf->mem_free;
 1001bb0:	e1c421f8 	strd	r2, [r4, #24]
    deque->size       = 0;
 1001bb4:	e1c460f0 	strd	r6, [r4]
 1001bb8:	e1c480f8 	strd	r8, [r4, #8]
    return CC_OK;
 1001bbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1001bc0:	e3a00001 	mov	r0, #1
}
 1001bc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        conf->mem_free(deque);
 1001bc8:	e1a00004 	mov	r0, r4
 1001bcc:	fa006afd 	blx	101c7c8 <free>
        return CC_ERR_ALLOC;
 1001bd0:	e3a00001 	mov	r0, #1
 1001bd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01001bd8 <deque_new_conf>:
{
 1001bd8:	e92d4070 	push	{r4, r5, r6, lr}
 1001bdc:	e1a06000 	mov	r6, r0
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001be0:	e5903008 	ldr	r3, [r0, #8]
{
 1001be4:	e1a04001 	mov	r4, r1
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001be8:	e3a00001 	mov	r0, #1
 1001bec:	e3a01020 	mov	r1, #32
 1001bf0:	e12fff33 	blx	r3
    if (!deque)
 1001bf4:	e2505000 	subs	r5, r0, #0
 1001bf8:	0a00001c 	beq	1001c70 <deque_new_conf+0x98>
    if (!(deque->buffer = conf->mem_alloc(conf->capacity * sizeof(void*)))) {
 1001bfc:	e8960009 	ldm	r6, {r0, r3}
 1001c00:	e1a00100 	lsl	r0, r0, #2
 1001c04:	e12fff33 	blx	r3
 1001c08:	e3500000 	cmp	r0, #0
 1001c0c:	e5850010 	str	r0, [r5, #16]
 1001c10:	0a000018 	beq	1001c78 <deque_new_conf+0xa0>
    deque->mem_alloc  = conf->mem_alloc;
 1001c14:	e996000e 	ldmib	r6, {r1, r2, r3}
 1001c18:	e5851014 	str	r1, [r5, #20]
 1001c1c:	e1c521f8 	strd	r2, [r5, #24]
    deque->capacity   = upper_pow_two(conf->capacity);
 1001c20:	e5963000 	ldr	r3, [r6]
 *
 * @return the nearest upper power of two
 */
static INLINE size_t upper_pow_two(size_t n)
{
    if (n >= MAX_POW_TWO)
 1001c24:	e3530000 	cmp	r3, #0
        return MAX_POW_TWO;
 1001c28:	b3a03102 	movlt	r3, #-2147483648	; 0x80000000
    if (n >= MAX_POW_TWO)
 1001c2c:	ba000007 	blt	1001c50 <deque_new_conf+0x78>
    /**
     * taken from:
     * http://graphics.stanford.edu/~seander/
     * bithacks.html#RoundUpPowerOf2Float
     */
    n--;
 1001c30:	12433001 	subne	r3, r3, #1
        return 2;
 1001c34:	03a03002 	moveq	r3, #2
    n |= n >> 1;
 1001c38:	118330a3 	orrne	r3, r3, r3, lsr #1
    n |= n >> 2;
 1001c3c:	11833123 	orrne	r3, r3, r3, lsr #2
    n |= n >> 4;
 1001c40:	11833223 	orrne	r3, r3, r3, lsr #4
    n |= n >> 8;
 1001c44:	11833423 	orrne	r3, r3, r3, lsr #8
    n |= n >> 16;
 1001c48:	11833823 	orrne	r3, r3, r3, lsr #16
    n++;
 1001c4c:	12833001 	addne	r3, r3, #1
    deque->first      = 0;
 1001c50:	e3a02000 	mov	r2, #0
    deque->capacity   = upper_pow_two(conf->capacity);
 1001c54:	e5853004 	str	r3, [r5, #4]
    deque->first      = 0;
 1001c58:	e5852008 	str	r2, [r5, #8]
    return CC_OK;
 1001c5c:	e1a00002 	mov	r0, r2
    deque->last       = 0;
 1001c60:	e585200c 	str	r2, [r5, #12]
    deque->size       = 0;
 1001c64:	e5852000 	str	r2, [r5]
    *d = deque;
 1001c68:	e5845000 	str	r5, [r4]
    return CC_OK;
 1001c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1001c70:	e3a00001 	mov	r0, #1
}
 1001c74:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(deque);
 1001c78:	e1a00005 	mov	r0, r5
 1001c7c:	e596300c 	ldr	r3, [r6, #12]
 1001c80:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1001c84:	e3a00001 	mov	r0, #1
 1001c88:	e8bd8070 	pop	{r4, r5, r6, pc}

01001c8c <deque_conf_init>:
    conf->mem_alloc  = malloc;
 1001c8c:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    conf->mem_calloc = calloc;
 1001c90:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 1001c94:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    conf->capacity   = DEFAULT_CAPACITY;
 1001c98:	e3a0c008 	mov	ip, #8
    conf->mem_alloc  = malloc;
 1001c9c:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1001ca0:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1001ca4:	e3403101 	movt	r3, #257	; 0x101
    conf->capacity   = DEFAULT_CAPACITY;
 1001ca8:	e580c000 	str	ip, [r0]
    conf->mem_free   = free;
 1001cac:	e980000e 	stmib	r0, {r1, r2, r3}
}
 1001cb0:	e12fff1e 	bx	lr

01001cb4 <deque_destroy>:
{
 1001cb4:	e92d4010 	push	{r4, lr}
 1001cb8:	e1a04000 	mov	r4, r0
    deque->mem_free(deque->buffer);
 1001cbc:	e590301c 	ldr	r3, [r0, #28]
 1001cc0:	e5900010 	ldr	r0, [r0, #16]
 1001cc4:	e12fff33 	blx	r3
    deque->mem_free(deque);
 1001cc8:	e594301c 	ldr	r3, [r4, #28]
 1001ccc:	e1a00004 	mov	r0, r4
}
 1001cd0:	e8bd4010 	pop	{r4, lr}
    deque->mem_free(deque);
 1001cd4:	e12fff13 	bx	r3

01001cd8 <deque_destroy_cb>:
    for (i = 0; i < deque->size; i++) {
 1001cd8:	e5903000 	ldr	r3, [r0]
{
 1001cdc:	e92d4070 	push	{r4, r5, r6, lr}
 1001ce0:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 1001ce4:	e3530000 	cmp	r3, #0
 1001ce8:	0a00000c 	beq	1001d20 <deque_destroy_cb+0x48>
 1001cec:	e1a06001 	mov	r6, r1
 1001cf0:	e3a05000 	mov	r5, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1001cf4:	e1c420d4 	ldrd	r2, [r4, #4]
        fn(deque->buffer[p]);
 1001cf8:	e5941010 	ldr	r1, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1001cfc:	e0853003 	add	r3, r5, r3
 1001d00:	e2422001 	sub	r2, r2, #1
 1001d04:	e0033002 	and	r3, r3, r2
    for (i = 0; i < deque->size; i++) {
 1001d08:	e2855001 	add	r5, r5, #1
        fn(deque->buffer[p]);
 1001d0c:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 1001d10:	e12fff36 	blx	r6
    for (i = 0; i < deque->size; i++) {
 1001d14:	e5943000 	ldr	r3, [r4]
 1001d18:	e1550003 	cmp	r5, r3
 1001d1c:	3afffff4 	bcc	1001cf4 <deque_destroy_cb+0x1c>
    deque->first = 0;
 1001d20:	e3a03000 	mov	r3, #0
    deque->mem_free(deque->buffer);
 1001d24:	e5940010 	ldr	r0, [r4, #16]
    deque->first = 0;
 1001d28:	e5843008 	str	r3, [r4, #8]
    deque->last  = 0;
 1001d2c:	e584300c 	str	r3, [r4, #12]
    deque->size  = 0;
 1001d30:	e5843000 	str	r3, [r4]
    deque->mem_free(deque->buffer);
 1001d34:	e594201c 	ldr	r2, [r4, #28]
 1001d38:	e12fff32 	blx	r2
    deque->mem_free(deque);
 1001d3c:	e594301c 	ldr	r3, [r4, #28]
 1001d40:	e1a00004 	mov	r0, r4
}
 1001d44:	e8bd4070 	pop	{r4, r5, r6, lr}
    deque->mem_free(deque);
 1001d48:	e12fff13 	bx	r3

01001d4c <deque_add>:
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001d4c:	e5902004 	ldr	r2, [r0, #4]
 1001d50:	e5903000 	ldr	r3, [r0]
{
 1001d54:	e92d4070 	push	{r4, r5, r6, lr}
 1001d58:	e1a04000 	mov	r4, r0
 1001d5c:	e1a05001 	mov	r5, r1
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001d60:	e1520003 	cmp	r2, r3
 1001d64:	0a00000a 	beq	1001d94 <deque_add+0x48>
    deque->buffer[deque->last] = element;
 1001d68:	e594c00c 	ldr	ip, [r4, #12]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001d6c:	e2422001 	sub	r2, r2, #1
    deque->buffer[deque->last] = element;
 1001d70:	e5941010 	ldr	r1, [r4, #16]
    deque->size++;
 1001d74:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001d78:	e28c0001 	add	r0, ip, #1
 1001d7c:	e0022000 	and	r2, r2, r0
    deque->buffer[deque->last] = element;
 1001d80:	e781510c 	str	r5, [r1, ip, lsl #2]
    return CC_OK;
 1001d84:	e3a00000 	mov	r0, #0
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001d88:	e584200c 	str	r2, [r4, #12]
    deque->size++;
 1001d8c:	e5843000 	str	r3, [r4]
    return CC_OK;
 1001d90:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001d94:	ebffff3e 	bl	1001a94 <expand_capacity>
 1001d98:	e3500000 	cmp	r0, #0
 1001d9c:	05942004 	ldreq	r2, [r4, #4]
 1001da0:	05943000 	ldreq	r3, [r4]
 1001da4:	0affffef 	beq	1001d68 <deque_add+0x1c>
        return CC_ERR_ALLOC;
 1001da8:	e3a00001 	mov	r0, #1
}
 1001dac:	e8bd8070 	pop	{r4, r5, r6, pc}

01001db0 <deque_add_first>:
{
 1001db0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1001db4:	e1a05000 	mov	r5, r0
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 1001db8:	e8900018 	ldm	r0, {r3, r4}
{
 1001dbc:	e1a07001 	mov	r7, r1
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 1001dc0:	e1530004 	cmp	r3, r4
 1001dc4:	2a00000a 	bcs	1001df4 <deque_add_first+0x44>
 1001dc8:	e5902008 	ldr	r2, [r0, #8]
 1001dcc:	e5906010 	ldr	r6, [r0, #16]
 1001dd0:	e2422001 	sub	r2, r2, #1
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 1001dd4:	e2444001 	sub	r4, r4, #1
    deque->size++;
 1001dd8:	e2833001 	add	r3, r3, #1
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 1001ddc:	e0044002 	and	r4, r4, r2
    return CC_OK;
 1001de0:	e3a00000 	mov	r0, #0
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 1001de4:	e5854008 	str	r4, [r5, #8]
    deque->buffer[deque->first] = element;
 1001de8:	e7867104 	str	r7, [r6, r4, lsl #2]
    deque->size++;
 1001dec:	e5853000 	str	r3, [r5]
}
 1001df0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (deque->capacity == MAX_POW_TWO)
 1001df4:	e3540102 	cmp	r4, #-2147483648	; 0x80000000
 1001df8:	0a000018 	beq	1001e60 <deque_add_first+0xb0>
    size_t new_capacity = deque->capacity << 1;
 1001dfc:	e1a04084 	lsl	r4, r4, #1
    void **new_buffer = deque->mem_calloc(new_capacity, sizeof(void*));
 1001e00:	e5903018 	ldr	r3, [r0, #24]
 1001e04:	e3a01004 	mov	r1, #4
 1001e08:	e1a00004 	mov	r0, r4
 1001e0c:	e12fff33 	blx	r3
    if (!new_buffer)
 1001e10:	e2506000 	subs	r6, r0, #0
 1001e14:	0a000011 	beq	1001e60 <deque_add_first+0xb0>
        if (deque->last > deque->first) {
 1001e18:	e5953008 	ldr	r3, [r5, #8]
 1001e1c:	e595900c 	ldr	r9, [r5, #12]
 1001e20:	e5951010 	ldr	r1, [r5, #16]
 1001e24:	e1590003 	cmp	r9, r3
 1001e28:	e0811103 	add	r1, r1, r3, lsl #2
 1001e2c:	9a00000d 	bls	1001e68 <deque_add_first+0xb8>
            memcpy(buff,
 1001e30:	e5952000 	ldr	r2, [r5]
 1001e34:	e1a02102 	lsl	r2, r2, #2
 1001e38:	eb006cf0 	bl	101d200 <memcpy>
    deque->mem_free(deque->buffer);
 1001e3c:	e595301c 	ldr	r3, [r5, #28]
 1001e40:	e5950010 	ldr	r0, [r5, #16]
 1001e44:	e12fff33 	blx	r3
    deque->last     = deque->size;
 1001e48:	e5953000 	ldr	r3, [r5]
    deque->buffer   = new_buffer;
 1001e4c:	e3e02000 	mvn	r2, #0
    deque->capacity = new_capacity;
 1001e50:	e5854004 	str	r4, [r5, #4]
    deque->buffer   = new_buffer;
 1001e54:	e5856010 	str	r6, [r5, #16]
    deque->last     = deque->size;
 1001e58:	e585300c 	str	r3, [r5, #12]
    return CC_OK;
 1001e5c:	eaffffdc 	b	1001dd4 <deque_add_first+0x24>
        return CC_ERR_ALLOC;
 1001e60:	e3a00001 	mov	r0, #1
 1001e64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            size_t e = deque->capacity - deque->first;
 1001e68:	e5958004 	ldr	r8, [r5, #4]
 1001e6c:	e0488003 	sub	r8, r8, r3
            memcpy(buff,
 1001e70:	e1a08108 	lsl	r8, r8, #2
 1001e74:	e1a02008 	mov	r2, r8
 1001e78:	eb006ce0 	bl	101d200 <memcpy>
            memcpy(&(buff[e]),
 1001e7c:	e0860008 	add	r0, r6, r8
 1001e80:	e1a02109 	lsl	r2, r9, #2
 1001e84:	e5951010 	ldr	r1, [r5, #16]
 1001e88:	eb006cdc 	bl	101d200 <memcpy>
 1001e8c:	eaffffea 	b	1001e3c <deque_add_first+0x8c>

01001e90 <deque_add_last>:
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001e90:	e5902004 	ldr	r2, [r0, #4]
 1001e94:	e5903000 	ldr	r3, [r0]
{
 1001e98:	e92d4070 	push	{r4, r5, r6, lr}
 1001e9c:	e1a04000 	mov	r4, r0
 1001ea0:	e1a05001 	mov	r5, r1
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001ea4:	e1520003 	cmp	r2, r3
 1001ea8:	0a00000a 	beq	1001ed8 <deque_add_last+0x48>
    deque->buffer[deque->last] = element;
 1001eac:	e594c00c 	ldr	ip, [r4, #12]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001eb0:	e2422001 	sub	r2, r2, #1
    deque->buffer[deque->last] = element;
 1001eb4:	e5941010 	ldr	r1, [r4, #16]
    deque->size++;
 1001eb8:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001ebc:	e28c0001 	add	r0, ip, #1
 1001ec0:	e0022000 	and	r2, r2, r0
    deque->buffer[deque->last] = element;
 1001ec4:	e781510c 	str	r5, [r1, ip, lsl #2]
    return CC_OK;
 1001ec8:	e3a00000 	mov	r0, #0
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001ecc:	e584200c 	str	r2, [r4, #12]
    deque->size++;
 1001ed0:	e5843000 	str	r3, [r4]
    return CC_OK;
 1001ed4:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001ed8:	ebfffeed 	bl	1001a94 <expand_capacity>
 1001edc:	e3500000 	cmp	r0, #0
 1001ee0:	05942004 	ldreq	r2, [r4, #4]
 1001ee4:	05943000 	ldreq	r3, [r4]
 1001ee8:	0affffef 	beq	1001eac <deque_add_last+0x1c>
        return CC_ERR_ALLOC;
 1001eec:	e3a00001 	mov	r0, #1
}
 1001ef0:	e8bd8070 	pop	{r4, r5, r6, pc}

01001ef4 <deque_add_at>:
    if (index >= deque->size)
 1001ef4:	e5903000 	ldr	r3, [r0]
 1001ef8:	e1530002 	cmp	r3, r2
 1001efc:	9a000056 	bls	100205c <deque_add_at+0x168>
{
 1001f00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1001f04:	e1a04000 	mov	r4, r0
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001f08:	e590e004 	ldr	lr, [r0, #4]
 1001f0c:	e1a08001 	mov	r8, r1
 1001f10:	e1a05002 	mov	r5, r2
 1001f14:	e153000e 	cmp	r3, lr
 1001f18:	0a000060 	beq	10020a0 <deque_add_at+0x1ac>
    if (index == 0)
 1001f1c:	e3550000 	cmp	r5, #0
    const size_t c = deque->capacity - 1;
 1001f20:	e24e6001 	sub	r6, lr, #1
    const size_t f = deque->first & c;
 1001f24:	e5942008 	ldr	r2, [r4, #8]
    if (index == 0)
 1001f28:	0a000064 	beq	10020c0 <deque_add_at+0x1cc>
    if (index == c)
 1001f2c:	e1550006 	cmp	r5, r6
    const size_t l = deque->last & c;
 1001f30:	e594a00c 	ldr	sl, [r4, #12]
    if (index == c)
 1001f34:	0a00006e 	beq	10020f4 <deque_add_at+0x200>
    if (index <= (deque->size / 2) - 1) {
 1001f38:	e1a010a3 	lsr	r1, r3, #1
    const size_t p = (deque->first + index) & c;
 1001f3c:	e0827005 	add	r7, r2, r5
 1001f40:	e0077006 	and	r7, r7, r6
    if (index <= (deque->size / 2) - 1) {
 1001f44:	e594c010 	ldr	ip, [r4, #16]
 1001f48:	e2411001 	sub	r1, r1, #1
 1001f4c:	e1a09107 	lsl	r9, r7, #2
 1001f50:	e1510005 	cmp	r1, r5
 1001f54:	3a000020 	bcc	1001fdc <deque_add_at+0xe8>
    const size_t f = deque->first & c;
 1001f58:	e0022006 	and	r2, r2, r6
        if (p < f || f == 0) {
 1001f5c:	e16f3f12 	clz	r3, r2
 1001f60:	e1a032a3 	lsr	r3, r3, #5
 1001f64:	e1520007 	cmp	r2, r7
 1001f68:	83833001 	orrhi	r3, r3, #1
 1001f6c:	e3530000 	cmp	r3, #0
 1001f70:	0a000042 	beq	1002080 <deque_add_at+0x18c>
            const size_t r_move = (f != 0) ? c - f + 1 : 0;
 1001f74:	e3520000 	cmp	r2, #0
 1001f78:	e59c5000 	ldr	r5, [ip]
 1001f7c:	0a000008 	beq	1001fa4 <deque_add_at+0xb0>
                memmove(&(deque->buffer[f - 1]),
 1001f80:	e2420107 	sub	r0, r2, #-1073741823	; 0xc0000001
            const size_t r_move = (f != 0) ? c - f + 1 : 0;
 1001f84:	e04e2002 	sub	r2, lr, r2
                memmove(&(deque->buffer[f - 1]),
 1001f88:	e1a00100 	lsl	r0, r0, #2
 1001f8c:	e1a02102 	lsl	r2, r2, #2
                        &(deque->buffer[f]),
 1001f90:	e2801004 	add	r1, r0, #4
                memmove(&(deque->buffer[f - 1]),
 1001f94:	e08c0000 	add	r0, ip, r0
 1001f98:	e08c1001 	add	r1, ip, r1
 1001f9c:	fa006e0f 	blx	101d7e0 <memmove>
 1001fa0:	e594c010 	ldr	ip, [r4, #16]
            if (p != 0) {
 1001fa4:	e3570000 	cmp	r7, #0
 1001fa8:	1a00005c 	bne	1002120 <deque_add_at+0x22c>
            deque->buffer[c] = e_first;
 1001fac:	e78c5106 	str	r5, [ip, r6, lsl #2]
        deque->first = (deque->first - 1) & c;
 1001fb0:	e5943008 	ldr	r3, [r4, #8]
 1001fb4:	e2433001 	sub	r3, r3, #1
 1001fb8:	e0066003 	and	r6, r6, r3
 1001fbc:	e5846008 	str	r6, [r4, #8]
    deque->size++;
 1001fc0:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1001fc4:	e3a00000 	mov	r0, #0
    deque->buffer[p] = element;
 1001fc8:	e5942010 	ldr	r2, [r4, #16]
    deque->size++;
 1001fcc:	e2833001 	add	r3, r3, #1
    deque->buffer[p] = element;
 1001fd0:	e7828107 	str	r8, [r2, r7, lsl #2]
    deque->size++;
 1001fd4:	e5843000 	str	r3, [r4]
}
 1001fd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    const size_t l = deque->last & c;
 1001fdc:	e00aa006 	and	sl, sl, r6
        if (p > l || l == c) {
 1001fe0:	e046200a 	sub	r2, r6, sl
 1001fe4:	e16f2f12 	clz	r2, r2
 1001fe8:	e1a022a2 	lsr	r2, r2, #5
 1001fec:	e15a0007 	cmp	sl, r7
 1001ff0:	33822001 	orrcc	r2, r2, #1
 1001ff4:	e3520000 	cmp	r2, #0
 1001ff8:	0a000019 	beq	1002064 <deque_add_at+0x170>
            if (p != c) {
 1001ffc:	e1560007 	cmp	r6, r7
            void* e_last = deque->buffer[c];
 1002000:	e79c5106 	ldr	r5, [ip, r6, lsl #2]
            if (p != c) {
 1002004:	0a000006 	beq	1002024 <deque_add_at+0x130>
                        (c - p) * sizeof(void*));
 1002008:	e0462007 	sub	r2, r6, r7
                memmove(&(deque->buffer[p + 1]),
 100200c:	e2890004 	add	r0, r9, #4
 1002010:	e08c0000 	add	r0, ip, r0
 1002014:	e08c1009 	add	r1, ip, r9
 1002018:	e1a02102 	lsl	r2, r2, #2
 100201c:	fa006def 	blx	101d7e0 <memmove>
 1002020:	e594c010 	ldr	ip, [r4, #16]
            if (l != c) {
 1002024:	e156000a 	cmp	r6, sl
 1002028:	0a000005 	beq	1002044 <deque_add_at+0x150>
                memmove(&(deque->buffer[1]),
 100202c:	e28aa001 	add	sl, sl, #1
 1002030:	e1a0100c 	mov	r1, ip
 1002034:	e28c0004 	add	r0, ip, #4
 1002038:	e1a0210a 	lsl	r2, sl, #2
 100203c:	fa006de7 	blx	101d7e0 <memmove>
 1002040:	e594c010 	ldr	ip, [r4, #16]
            deque->buffer[0] = e_last;
 1002044:	e58c5000 	str	r5, [ip]
        deque->last = (deque->last + 1) & c;
 1002048:	e594300c 	ldr	r3, [r4, #12]
 100204c:	e2833001 	add	r3, r3, #1
 1002050:	e0066003 	and	r6, r6, r3
 1002054:	e584600c 	str	r6, [r4, #12]
 1002058:	eaffffd8 	b	1001fc0 <deque_add_at+0xcc>
        return CC_ERR_OUT_OF_RANGE;
 100205c:	e3a00008 	mov	r0, #8
}
 1002060:	e12fff1e 	bx	lr
                    (deque->size - index) * sizeof(void*));
 1002064:	e0432005 	sub	r2, r3, r5
            memmove(&(deque->buffer[p + 1]),
 1002068:	e2890004 	add	r0, r9, #4
 100206c:	e1a02102 	lsl	r2, r2, #2
 1002070:	e08c0000 	add	r0, ip, r0
 1002074:	e08c1009 	add	r1, ip, r9
 1002078:	fa006dd8 	blx	101d7e0 <memmove>
 100207c:	eafffff1 	b	1002048 <deque_add_at+0x154>
            memmove(&(deque->buffer[f - 1]),
 1002080:	e2420107 	sub	r0, r2, #-1073741823	; 0xc0000001
 1002084:	e1a02105 	lsl	r2, r5, #2
 1002088:	e1a00100 	lsl	r0, r0, #2
                    &(deque->buffer[f]),
 100208c:	e2801004 	add	r1, r0, #4
            memmove(&(deque->buffer[f - 1]),
 1002090:	e08c0000 	add	r0, ip, r0
 1002094:	e08c1001 	add	r1, ip, r1
 1002098:	fa006dd0 	blx	101d7e0 <memmove>
 100209c:	eaffffc3 	b	1001fb0 <deque_add_at+0xbc>
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 10020a0:	ebfffe7b 	bl	1001a94 <expand_capacity>
 10020a4:	e3500000 	cmp	r0, #0
 10020a8:	1a00000f 	bne	10020ec <deque_add_at+0x1f8>
 10020ac:	e8944008 	ldm	r4, {r3, lr}
    if (index == 0)
 10020b0:	e3550000 	cmp	r5, #0
    const size_t f = deque->first & c;
 10020b4:	e5942008 	ldr	r2, [r4, #8]
    const size_t c = deque->capacity - 1;
 10020b8:	e24e6001 	sub	r6, lr, #1
    if (index == 0)
 10020bc:	1affff9a 	bne	1001f2c <deque_add_at+0x38>
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 10020c0:	e15e0003 	cmp	lr, r3
 10020c4:	9a00001b 	bls	1002138 <deque_add_at+0x244>
    deque->buffer[deque->first] = element;
 10020c8:	e5941010 	ldr	r1, [r4, #16]
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 10020cc:	e2422001 	sub	r2, r2, #1
 10020d0:	e0066002 	and	r6, r6, r2
    deque->size++;
 10020d4:	e2833001 	add	r3, r3, #1
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 10020d8:	e5846008 	str	r6, [r4, #8]
    return CC_OK;
 10020dc:	e3a00000 	mov	r0, #0
    deque->buffer[deque->first] = element;
 10020e0:	e7818106 	str	r8, [r1, r6, lsl #2]
    deque->size++;
 10020e4:	e5843000 	str	r3, [r4]
    return CC_OK;
 10020e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 10020ec:	e3a00001 	mov	r0, #1
 10020f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 10020f4:	e15e0003 	cmp	lr, r3
 10020f8:	0a000017 	beq	100215c <deque_add_at+0x268>
    deque->buffer[deque->last] = element;
 10020fc:	e5942010 	ldr	r2, [r4, #16]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002100:	e28a1001 	add	r1, sl, #1
    deque->size++;
 1002104:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002108:	e0066001 	and	r6, r6, r1
    return CC_OK;
 100210c:	e3a00000 	mov	r0, #0
    deque->buffer[deque->last] = element;
 1002110:	e782810a 	str	r8, [r2, sl, lsl #2]
    deque->size++;
 1002114:	e5843000 	str	r3, [r4]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002118:	e584600c 	str	r6, [r4, #12]
    return CC_OK;
 100211c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                memmove(&(deque->buffer[0]),
 1002120:	e28c1004 	add	r1, ip, #4
 1002124:	e1a0000c 	mov	r0, ip
 1002128:	e1a02009 	mov	r2, r9
 100212c:	fa006dab 	blx	101d7e0 <memmove>
 1002130:	e594c010 	ldr	ip, [r4, #16]
 1002134:	eaffff9c 	b	1001fac <deque_add_at+0xb8>
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 1002138:	e1a00004 	mov	r0, r4
 100213c:	ebfffe54 	bl	1001a94 <expand_capacity>
 1002140:	e3500000 	cmp	r0, #0
 1002144:	1affffe8 	bne	10020ec <deque_add_at+0x1f8>
 1002148:	e5946004 	ldr	r6, [r4, #4]
 100214c:	e5942008 	ldr	r2, [r4, #8]
 1002150:	e5943000 	ldr	r3, [r4]
 1002154:	e2466001 	sub	r6, r6, #1
 1002158:	eaffffda 	b	10020c8 <deque_add_at+0x1d4>
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 100215c:	e1a00004 	mov	r0, r4
 1002160:	ebfffe4b 	bl	1001a94 <expand_capacity>
 1002164:	e3500000 	cmp	r0, #0
 1002168:	1affffdf 	bne	10020ec <deque_add_at+0x1f8>
 100216c:	e5946004 	ldr	r6, [r4, #4]
 1002170:	e594a00c 	ldr	sl, [r4, #12]
 1002174:	e5943000 	ldr	r3, [r4]
 1002178:	e2466001 	sub	r6, r6, #1
 100217c:	eaffffde 	b	10020fc <deque_add_at+0x208>

01002180 <deque_replace_at>:
    if (index >= deque->size)
 1002180:	e590c000 	ldr	ip, [r0]
 1002184:	e15c0002 	cmp	ip, r2
 1002188:	9a000010 	bls	10021d0 <deque_replace_at+0x50>
    size_t i = (deque->first + index) & (deque->capacity - 1);
 100218c:	e590c004 	ldr	ip, [r0, #4]
    if (out)
 1002190:	e3530000 	cmp	r3, #0
{
 1002194:	e92d4010 	push	{r4, lr}
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1002198:	e590e008 	ldr	lr, [r0, #8]
 100219c:	e24cc001 	sub	ip, ip, #1
 10021a0:	e5904010 	ldr	r4, [r0, #16]
 10021a4:	e082200e 	add	r2, r2, lr
 10021a8:	e002200c 	and	r2, r2, ip
 10021ac:	e1a0e102 	lsl	lr, r2, #2
        *out = deque->buffer[i];
 10021b0:	17942102 	ldrne	r2, [r4, r2, lsl #2]
 10021b4:	e084c00e 	add	ip, r4, lr
 10021b8:	15832000 	strne	r2, [r3]
 10021bc:	1590c010 	ldrne	ip, [r0, #16]
    return CC_OK;
 10021c0:	e3a00000 	mov	r0, #0
 10021c4:	108cc00e 	addne	ip, ip, lr
    deque->buffer[i] = element;
 10021c8:	e58c1000 	str	r1, [ip]
}
 10021cc:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 10021d0:	e3a00008 	mov	r0, #8
}
 10021d4:	e12fff1e 	bx	lr

010021d8 <deque_remove_at>:
    if (index >= deque->size)
 10021d8:	e5903000 	ldr	r3, [r0]
 10021dc:	e1530001 	cmp	r3, r1
 10021e0:	9a000037 	bls	10022c4 <deque_remove_at+0xec>
{
 10021e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (index == 0)
 10021e8:	e3510000 	cmp	r1, #0
    const size_t c = deque->capacity - 1;
 10021ec:	e5905004 	ldr	r5, [r0, #4]
    const size_t f = deque->first & c;
 10021f0:	e590c008 	ldr	ip, [r0, #8]
    void *removed  = deque->buffer[index];
 10021f4:	e590e010 	ldr	lr, [r0, #16]
    const size_t c = deque->capacity - 1;
 10021f8:	e2455001 	sub	r5, r5, #1
    if (index == 0)
 10021fc:	0a000023 	beq	1002290 <deque_remove_at+0xb8>
    if (index == c)
 1002200:	e1510005 	cmp	r1, r5
    const size_t l = deque->last & c;
 1002204:	e590900c 	ldr	r9, [r0, #12]
    if (index == c)
 1002208:	0a00004f 	beq	100234c <deque_remove_at+0x174>
    if (index <= (deque->size / 2) - 1) {
 100220c:	e1a030a3 	lsr	r3, r3, #1
    const size_t p = (deque->first + index) & c;
 1002210:	e08c7001 	add	r7, ip, r1
 1002214:	e1a06002 	mov	r6, r2
    void *removed  = deque->buffer[index];
 1002218:	e79e8101 	ldr	r8, [lr, r1, lsl #2]
    if (index <= (deque->size / 2) - 1) {
 100221c:	e2433001 	sub	r3, r3, #1
 1002220:	e1a04000 	mov	r4, r0
 1002224:	e1530001 	cmp	r3, r1
    const size_t p = (deque->first + index) & c;
 1002228:	e0077005 	and	r7, r7, r5
    void *removed  = deque->buffer[index];
 100222c:	e1a02101 	lsl	r2, r1, #2
    if (index <= (deque->size / 2) - 1) {
 1002230:	3a000025 	bcc	10022cc <deque_remove_at+0xf4>
    const size_t f = deque->first & c;
 1002234:	e00cc005 	and	ip, ip, r5
        if (p < f) {
 1002238:	e15c0007 	cmp	ip, r7
 100223c:	9a00004d 	bls	1002378 <deque_remove_at+0x1a0>
            if (f != c) {
 1002240:	e155000c 	cmp	r5, ip
            void *e = deque->buffer[c];
 1002244:	e79e9105 	ldr	r9, [lr, r5, lsl #2]
            if (f != c) {
 1002248:	0a000008 	beq	1002270 <deque_remove_at+0x98>
                memmove(&(deque->buffer[f + 1]),
 100224c:	e28c0001 	add	r0, ip, #1
                        (c - f) * sizeof(void*));
 1002250:	e045c00c 	sub	ip, r5, ip
                memmove(&(deque->buffer[f + 1]),
 1002254:	e1a00100 	lsl	r0, r0, #2
 1002258:	e1a0210c 	lsl	r2, ip, #2
                        &(deque->buffer[f]),
 100225c:	e2401004 	sub	r1, r0, #4
                memmove(&(deque->buffer[f + 1]),
 1002260:	e08e0000 	add	r0, lr, r0
 1002264:	e08e1001 	add	r1, lr, r1
 1002268:	fa006d5c 	blx	101d7e0 <memmove>
 100226c:	e594e010 	ldr	lr, [r4, #16]
            if (p != 0) {
 1002270:	e3570000 	cmp	r7, #0
 1002274:	1a000050 	bne	10023bc <deque_remove_at+0x1e4>
            deque->buffer[0] = e;
 1002278:	e58e9000 	str	r9, [lr]
        deque->first = (deque->first + 1) & c;
 100227c:	e5943008 	ldr	r3, [r4, #8]
 1002280:	e2833001 	add	r3, r3, #1
 1002284:	e0055003 	and	r5, r5, r3
 1002288:	e5845008 	str	r5, [r4, #8]
 100228c:	ea000026 	b	100232c <deque_remove_at+0x154>
    if (deque->size == 0)
 1002290:	e3530000 	cmp	r3, #0
 1002294:	0a000046 	beq	10023b4 <deque_remove_at+0x1dc>
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002298:	e28c4001 	add	r4, ip, #1
    if (out)
 100229c:	e3520000 	cmp	r2, #0
    deque->size--;
 10022a0:	e2433001 	sub	r3, r3, #1
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 10022a4:	e0055004 	and	r5, r5, r4
    void *element = deque->buffer[deque->first];
 10022a8:	e79ec10c 	ldr	ip, [lr, ip, lsl #2]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 10022ac:	e5805008 	str	r5, [r0, #8]
    deque->size--;
 10022b0:	e5803000 	str	r3, [r0]
    if (out)
 10022b4:	0a000000 	beq	10022bc <deque_remove_at+0xe4>
        *out = element;
 10022b8:	e582c000 	str	ip, [r2]
    return CC_OK;
 10022bc:	e3a00000 	mov	r0, #0
 10022c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_OUT_OF_RANGE;
 10022c4:	e3a00008 	mov	r0, #8
}
 10022c8:	e12fff1e 	bx	lr
    const size_t l = deque->last & c;
 10022cc:	e0099005 	and	r9, r9, r5
        if (p > l) {
 10022d0:	e1590007 	cmp	r9, r7
 10022d4:	2a00002e 	bcs	1002394 <deque_remove_at+0x1bc>
            if (p != c) {
 10022d8:	e1550007 	cmp	r5, r7
            void *e = deque->buffer[0];
 10022dc:	e59ea000 	ldr	sl, [lr]
            if (p != c) {
 10022e0:	0a000007 	beq	1002304 <deque_remove_at+0x12c>
                memmove(&(deque->buffer[p]),
 10022e4:	e1a00107 	lsl	r0, r7, #2
                        (c - p) * sizeof(void*));
 10022e8:	e0452007 	sub	r2, r5, r7
                memmove(&(deque->buffer[p]),
 10022ec:	e1a02102 	lsl	r2, r2, #2
 10022f0:	e2801004 	add	r1, r0, #4
 10022f4:	e08e1001 	add	r1, lr, r1
 10022f8:	e08e0000 	add	r0, lr, r0
 10022fc:	fa006d37 	blx	101d7e0 <memmove>
 1002300:	e594e010 	ldr	lr, [r4, #16]
                memmove(&(deque->buffer[1]),
 1002304:	e1a02109 	lsl	r2, r9, #2
 1002308:	e1a0100e 	mov	r1, lr
 100230c:	e28e0004 	add	r0, lr, #4
 1002310:	fa006d32 	blx	101d7e0 <memmove>
            deque->buffer[c] = e;
 1002314:	e5943010 	ldr	r3, [r4, #16]
 1002318:	e783a105 	str	sl, [r3, r5, lsl #2]
        deque->last = (deque->last- 1) & c;
 100231c:	e594300c 	ldr	r3, [r4, #12]
 1002320:	e2433001 	sub	r3, r3, #1
 1002324:	e0055003 	and	r5, r5, r3
 1002328:	e584500c 	str	r5, [r4, #12]
    deque->size--;
 100232c:	e5943000 	ldr	r3, [r4]
    if (out)
 1002330:	e3560000 	cmp	r6, #0
    deque->size--;
 1002334:	e2433001 	sub	r3, r3, #1
 1002338:	e5843000 	str	r3, [r4]
    if (out)
 100233c:	0affffde 	beq	10022bc <deque_remove_at+0xe4>
        *out = removed;
 1002340:	e5868000 	str	r8, [r6]
    return CC_OK;
 1002344:	e3a00000 	mov	r0, #0
 1002348:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (deque->size == 0)
 100234c:	e3530000 	cmp	r3, #0
 1002350:	0a000017 	beq	10023b4 <deque_remove_at+0x1dc>
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1002354:	e2499001 	sub	r9, r9, #1
    if (out)
 1002358:	e3520000 	cmp	r2, #0
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 100235c:	e0011009 	and	r1, r1, r9
    deque->size--;
 1002360:	e2433001 	sub	r3, r3, #1
    void   *element = deque->buffer[last];
 1002364:	e79ec101 	ldr	ip, [lr, r1, lsl #2]
    deque->last = last;
 1002368:	e580100c 	str	r1, [r0, #12]
    deque->size--;
 100236c:	e5803000 	str	r3, [r0]
    if (out)
 1002370:	1affffd0 	bne	10022b8 <deque_remove_at+0xe0>
 1002374:	eaffffd0 	b	10022bc <deque_remove_at+0xe4>
            memmove(&(deque->buffer[f + 1]),
 1002378:	e28cc001 	add	ip, ip, #1
 100237c:	e1a0010c 	lsl	r0, ip, #2
                    &(deque->buffer[f]),
 1002380:	e2401004 	sub	r1, r0, #4
            memmove(&(deque->buffer[f + 1]),
 1002384:	e08e0000 	add	r0, lr, r0
 1002388:	e08e1001 	add	r1, lr, r1
 100238c:	fa006d13 	blx	101d7e0 <memmove>
 1002390:	eaffffb9 	b	100227c <deque_remove_at+0xa4>
            memmove(&(deque->buffer[p]),
 1002394:	e1a00107 	lsl	r0, r7, #2
                    (l - p) * sizeof(void*));
 1002398:	e0499007 	sub	r9, r9, r7
            memmove(&(deque->buffer[p]),
 100239c:	e1a02109 	lsl	r2, r9, #2
 10023a0:	e2801004 	add	r1, r0, #4
 10023a4:	e08e1001 	add	r1, lr, r1
 10023a8:	e08e0000 	add	r0, lr, r0
 10023ac:	fa006d0b 	blx	101d7e0 <memmove>
 10023b0:	eaffffd9 	b	100231c <deque_remove_at+0x144>
        return CC_ERR_OUT_OF_RANGE;
 10023b4:	e3a00008 	mov	r0, #8
}
 10023b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                memmove(&(deque->buffer[1]),
 10023bc:	e1a0100e 	mov	r1, lr
 10023c0:	e28e0004 	add	r0, lr, #4
 10023c4:	e1a02107 	lsl	r2, r7, #2
 10023c8:	fa006d04 	blx	101d7e0 <memmove>
 10023cc:	e594e010 	ldr	lr, [r4, #16]
 10023d0:	eaffffa8 	b	1002278 <deque_remove_at+0xa0>

010023d4 <deque_remove>:
{
 10023d4:	e92d4070 	push	{r4, r5, r6, lr}
    for (i = 0; i < deque->size; i++) {
 10023d8:	e5904000 	ldr	r4, [r0]
 10023dc:	e3540000 	cmp	r4, #0
 10023e0:	0a000011 	beq	100242c <deque_remove+0x58>
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10023e4:	e590e004 	ldr	lr, [r0, #4]
 10023e8:	e5905008 	ldr	r5, [r0, #8]
        if (deque->buffer[p] == element) {
 10023ec:	e5906010 	ldr	r6, [r0, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10023f0:	e24ee001 	sub	lr, lr, #1
 10023f4:	e005300e 	and	r3, r5, lr
        if (deque->buffer[p] == element) {
 10023f8:	e7963103 	ldr	r3, [r6, r3, lsl #2]
 10023fc:	e1510003 	cmp	r1, r3
    for (i = 0; i < deque->size; i++) {
 1002400:	e3a03000 	mov	r3, #0
        if (deque->buffer[p] == element) {
 1002404:	1a000003 	bne	1002418 <deque_remove+0x44>
 1002408:	ea000009 	b	1002434 <deque_remove+0x60>
 100240c:	e796c10c 	ldr	ip, [r6, ip, lsl #2]
 1002410:	e151000c 	cmp	r1, ip
 1002414:	0a000006 	beq	1002434 <deque_remove+0x60>
    for (i = 0; i < deque->size; i++) {
 1002418:	e2833001 	add	r3, r3, #1
 100241c:	e1530004 	cmp	r3, r4
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002420:	e083c005 	add	ip, r3, r5
 1002424:	e00cc00e 	and	ip, ip, lr
    for (i = 0; i < deque->size; i++) {
 1002428:	1afffff7 	bne	100240c <deque_remove+0x38>
}
 100242c:	e3a00008 	mov	r0, #8
 1002430:	e8bd8070 	pop	{r4, r5, r6, pc}
    return deque_remove_at(deque, index, out);
 1002434:	e1a01003 	mov	r1, r3
}
 1002438:	e8bd4070 	pop	{r4, r5, r6, lr}
    return deque_remove_at(deque, index, out);
 100243c:	eaffff65 	b	10021d8 <deque_remove_at>

01002440 <deque_remove_first>:
    if (deque->size == 0)
 1002440:	e5902000 	ldr	r2, [r0]
 1002444:	e3520000 	cmp	r2, #0
 1002448:	0a00000e 	beq	1002488 <deque_remove_first+0x48>
    void *element = deque->buffer[deque->first];
 100244c:	e590c008 	ldr	ip, [r0, #8]
    if (out)
 1002450:	e3510000 	cmp	r1, #0
{
 1002454:	e92d4010 	push	{r4, lr}
    deque->size--;
 1002458:	e2422001 	sub	r2, r2, #1
    void *element = deque->buffer[deque->first];
 100245c:	e590e010 	ldr	lr, [r0, #16]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002460:	e28c4001 	add	r4, ip, #1
 1002464:	e5903004 	ldr	r3, [r0, #4]
    void *element = deque->buffer[deque->first];
 1002468:	e79ec10c 	ldr	ip, [lr, ip, lsl #2]
    deque->size--;
 100246c:	e5802000 	str	r2, [r0]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002470:	e2433001 	sub	r3, r3, #1
 1002474:	e0033004 	and	r3, r3, r4
 1002478:	e5803008 	str	r3, [r0, #8]
    return CC_OK;
 100247c:	e3a00000 	mov	r0, #0
        *out = element;
 1002480:	1581c000 	strne	ip, [r1]
 1002484:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1002488:	e3a00008 	mov	r0, #8
}
 100248c:	e12fff1e 	bx	lr

01002490 <deque_remove_last>:
    if (deque->size == 0)
 1002490:	e5902000 	ldr	r2, [r0]
 1002494:	e3520000 	cmp	r2, #0
 1002498:	0a00000e 	beq	10024d8 <deque_remove_last+0x48>
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 100249c:	e590300c 	ldr	r3, [r0, #12]
    if (out)
 10024a0:	e3510000 	cmp	r1, #0
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 10024a4:	e590c004 	ldr	ip, [r0, #4]
    deque->size--;
 10024a8:	e2422001 	sub	r2, r2, #1
{
 10024ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    void   *element = deque->buffer[last];
 10024b0:	e590e010 	ldr	lr, [r0, #16]
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 10024b4:	e2433001 	sub	r3, r3, #1
 10024b8:	e24cc001 	sub	ip, ip, #1
 10024bc:	e003300c 	and	r3, r3, ip
    void   *element = deque->buffer[last];
 10024c0:	e79ec103 	ldr	ip, [lr, r3, lsl #2]
    deque->size--;
 10024c4:	e5802000 	str	r2, [r0]
    deque->last = last;
 10024c8:	e580300c 	str	r3, [r0, #12]
    return CC_OK;
 10024cc:	e3a00000 	mov	r0, #0
        *out = element;
 10024d0:	1581c000 	strne	ip, [r1]
 10024d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_ERR_OUT_OF_RANGE;
 10024d8:	e3a00008 	mov	r0, #8
}
 10024dc:	e12fff1e 	bx	lr

010024e0 <deque_remove_all>:
    deque->first = 0;
 10024e0:	e3a03000 	mov	r3, #0
 10024e4:	e5803008 	str	r3, [r0, #8]
    deque->last  = 0;
 10024e8:	e580300c 	str	r3, [r0, #12]
    deque->size  = 0;
 10024ec:	e5803000 	str	r3, [r0]
}
 10024f0:	e12fff1e 	bx	lr

010024f4 <deque_remove_all_cb>:
    for (i = 0; i < deque->size; i++) {
 10024f4:	e5903000 	ldr	r3, [r0]
{
 10024f8:	e92d4070 	push	{r4, r5, r6, lr}
 10024fc:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 1002500:	e3530000 	cmp	r3, #0
 1002504:	0a00000c 	beq	100253c <deque_remove_all_cb+0x48>
 1002508:	e1a06001 	mov	r6, r1
 100250c:	e3a05000 	mov	r5, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002510:	e1c420d4 	ldrd	r2, [r4, #4]
        fn(deque->buffer[p]);
 1002514:	e5941010 	ldr	r1, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002518:	e0853003 	add	r3, r5, r3
 100251c:	e2422001 	sub	r2, r2, #1
 1002520:	e0033002 	and	r3, r3, r2
    for (i = 0; i < deque->size; i++) {
 1002524:	e2855001 	add	r5, r5, #1
        fn(deque->buffer[p]);
 1002528:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 100252c:	e12fff36 	blx	r6
    for (i = 0; i < deque->size; i++) {
 1002530:	e5943000 	ldr	r3, [r4]
 1002534:	e1550003 	cmp	r5, r3
 1002538:	3afffff4 	bcc	1002510 <deque_remove_all_cb+0x1c>
    deque->first = 0;
 100253c:	e3a03000 	mov	r3, #0
 1002540:	e5843008 	str	r3, [r4, #8]
    deque->last  = 0;
 1002544:	e584300c 	str	r3, [r4, #12]
    deque->size  = 0;
 1002548:	e5843000 	str	r3, [r4]
}
 100254c:	e8bd8070 	pop	{r4, r5, r6, pc}

01002550 <deque_get_at>:
{
 1002550:	e1a03000 	mov	r3, r0
    if (index > deque->size)
 1002554:	e5900000 	ldr	r0, [r0]
 1002558:	e1500001 	cmp	r0, r1
 100255c:	3a00000a 	bcc	100258c <deque_get_at+0x3c>
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1002560:	e593c004 	ldr	ip, [r3, #4]
    return CC_OK;
 1002564:	e3a00000 	mov	r0, #0
{
 1002568:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    size_t i = (deque->first + index) & (deque->capacity - 1);
 100256c:	e593e008 	ldr	lr, [r3, #8]
 1002570:	e24cc001 	sub	ip, ip, #1
    *out = deque->buffer[i];
 1002574:	e5933010 	ldr	r3, [r3, #16]
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1002578:	e081100e 	add	r1, r1, lr
 100257c:	e001100c 	and	r1, r1, ip
    *out = deque->buffer[i];
 1002580:	e7933101 	ldr	r3, [r3, r1, lsl #2]
 1002584:	e5823000 	str	r3, [r2]
}
 1002588:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_ERR_OUT_OF_RANGE;
 100258c:	e3a00008 	mov	r0, #8
}
 1002590:	e12fff1e 	bx	lr

01002594 <deque_get_first>:
    if (deque->size == 0)
 1002594:	e5902000 	ldr	r2, [r0]
{
 1002598:	e1a03000 	mov	r3, r0
    if (deque->size == 0)
 100259c:	e3520000 	cmp	r2, #0
    *out = deque->buffer[deque->first];
 10025a0:	15902008 	ldrne	r2, [r0, #8]
    return CC_OK;
 10025a4:	13a00000 	movne	r0, #0
    *out = deque->buffer[deque->first];
 10025a8:	15933010 	ldrne	r3, [r3, #16]
        return CC_ERR_OUT_OF_RANGE;
 10025ac:	03a00008 	moveq	r0, #8
    *out = deque->buffer[deque->first];
 10025b0:	17933102 	ldrne	r3, [r3, r2, lsl #2]
 10025b4:	15813000 	strne	r3, [r1]
}
 10025b8:	e12fff1e 	bx	lr

010025bc <deque_get_last>:
    if (deque->size == 0)
 10025bc:	e5903000 	ldr	r3, [r0]
{
 10025c0:	e1a02000 	mov	r2, r0
    if (deque->size == 0)
 10025c4:	e3530000 	cmp	r3, #0
    size_t last = (deque->last - 1) & (deque->capacity - 1);
 10025c8:	1590300c 	ldrne	r3, [r0, #12]
    return CC_OK;
 10025cc:	13a00000 	movne	r0, #0
    size_t last = (deque->last - 1) & (deque->capacity - 1);
 10025d0:	1592c004 	ldrne	ip, [r2, #4]
        return CC_ERR_OUT_OF_RANGE;
 10025d4:	03a00008 	moveq	r0, #8
    *out = deque->buffer[last];
 10025d8:	15922010 	ldrne	r2, [r2, #16]
    size_t last = (deque->last - 1) & (deque->capacity - 1);
 10025dc:	12433001 	subne	r3, r3, #1
 10025e0:	124cc001 	subne	ip, ip, #1
 10025e4:	1003300c 	andne	r3, r3, ip
    *out = deque->buffer[last];
 10025e8:	17923103 	ldrne	r3, [r2, r3, lsl #2]
 10025ec:	15813000 	strne	r3, [r1]
}
 10025f0:	e12fff1e 	bx	lr

010025f4 <deque_copy_shallow>:
{
 10025f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10025f8:	e1a04000 	mov	r4, r0
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 10025fc:	e5943014 	ldr	r3, [r4, #20]
 1002600:	e3a00020 	mov	r0, #32
{
 1002604:	e1a07001 	mov	r7, r1
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 1002608:	e12fff33 	blx	r3
    if (!copy)
 100260c:	e2505000 	subs	r5, r0, #0
 1002610:	0a00002b 	beq	10026c4 <deque_copy_shallow+0xd0>
    if (!(copy->buffer = deque->mem_alloc(deque->capacity * sizeof(void*)))) {
 1002614:	e5940004 	ldr	r0, [r4, #4]
 1002618:	e5943014 	ldr	r3, [r4, #20]
 100261c:	e1a00100 	lsl	r0, r0, #2
 1002620:	e12fff33 	blx	r3
 1002624:	e3500000 	cmp	r0, #0
 1002628:	e1a06000 	mov	r6, r0
 100262c:	e5850010 	str	r0, [r5, #16]
 1002630:	0a00001e 	beq	10026b0 <deque_copy_shallow+0xbc>
    copy->size       = deque->size;
 1002634:	e1c420d0 	ldrd	r2, [r4]
    copy->mem_alloc  = deque->mem_alloc;
 1002638:	e2841014 	add	r1, r4, #20
    copy->size       = deque->size;
 100263c:	e1c520f0 	strd	r2, [r5]
    copy->mem_alloc  = deque->mem_alloc;
 1002640:	e891000e 	ldm	r1, {r1, r2, r3}
 1002644:	e5851014 	str	r1, [r5, #20]
 1002648:	e1c521f8 	strd	r2, [r5, #24]
        if (deque->last > deque->first) {
 100264c:	e5943008 	ldr	r3, [r4, #8]
 1002650:	e594900c 	ldr	r9, [r4, #12]
 1002654:	e5941010 	ldr	r1, [r4, #16]
 1002658:	e1590003 	cmp	r9, r3
 100265c:	e0811103 	add	r1, r1, r3, lsl #2
 1002660:	8a00000e 	bhi	10026a0 <deque_copy_shallow+0xac>
            size_t e = deque->capacity - deque->first;
 1002664:	e5948004 	ldr	r8, [r4, #4]
 1002668:	e0488003 	sub	r8, r8, r3
            memcpy(buff,
 100266c:	e1a08108 	lsl	r8, r8, #2
 1002670:	e1a02008 	mov	r2, r8
 1002674:	eb006ae1 	bl	101d200 <memcpy>
            memcpy(&(buff[e]),
 1002678:	e0860008 	add	r0, r6, r8
 100267c:	e1a02109 	lsl	r2, r9, #2
 1002680:	e5941010 	ldr	r1, [r4, #16]
 1002684:	eb006add 	bl	101d200 <memcpy>
    copy->last  = copy->size;
 1002688:	e5953000 	ldr	r3, [r5]
    copy->first = 0;
 100268c:	e3a00000 	mov	r0, #0
 1002690:	e5850008 	str	r0, [r5, #8]
    copy->last  = copy->size;
 1002694:	e585300c 	str	r3, [r5, #12]
    *out = copy;
 1002698:	e5875000 	str	r5, [r7]
    return CC_OK;
 100269c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            memcpy(buff,
 10026a0:	e5942000 	ldr	r2, [r4]
 10026a4:	e1a02102 	lsl	r2, r2, #2
 10026a8:	eb006ad4 	bl	101d200 <memcpy>
 10026ac:	eafffff5 	b	1002688 <deque_copy_shallow+0x94>
        deque->mem_free(copy);
 10026b0:	e1a00005 	mov	r0, r5
 10026b4:	e594301c 	ldr	r3, [r4, #28]
 10026b8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10026bc:	e3a00001 	mov	r0, #1
 10026c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 10026c4:	e3a00001 	mov	r0, #1
}
 10026c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010026cc <deque_copy_deep>:
{
 10026cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10026d0:	e1a04000 	mov	r4, r0
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 10026d4:	e5943014 	ldr	r3, [r4, #20]
 10026d8:	e3a00020 	mov	r0, #32
{
 10026dc:	e1a07001 	mov	r7, r1
 10026e0:	e1a08002 	mov	r8, r2
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 10026e4:	e12fff33 	blx	r3
    if (!copy)
 10026e8:	e2505000 	subs	r5, r0, #0
 10026ec:	0a00003a 	beq	10027dc <deque_copy_deep+0x110>
    if (!(copy->buffer = deque->mem_alloc(deque->capacity * sizeof(void*)))) {
 10026f0:	e5940004 	ldr	r0, [r4, #4]
 10026f4:	e5943014 	ldr	r3, [r4, #20]
 10026f8:	e1a00100 	lsl	r0, r0, #2
 10026fc:	e12fff33 	blx	r3
 1002700:	e3500000 	cmp	r0, #0
 1002704:	e1a06000 	mov	r6, r0
 1002708:	e5850010 	str	r0, [r5, #16]
 100270c:	0a000022 	beq	100279c <deque_copy_deep+0xd0>
    copy->capacity   = deque->capacity;
 1002710:	e5942004 	ldr	r2, [r4, #4]
    if (cp == NULL) {
 1002714:	e3570000 	cmp	r7, #0
    copy->size       = deque->size;
 1002718:	e5943000 	ldr	r3, [r4]
    copy->mem_alloc  = deque->mem_alloc;
 100271c:	e594c014 	ldr	ip, [r4, #20]
    copy->mem_calloc = deque->mem_calloc;
 1002720:	e5941018 	ldr	r1, [r4, #24]
    copy->capacity   = deque->capacity;
 1002724:	e5852004 	str	r2, [r5, #4]
    copy->mem_free   = deque->mem_free;
 1002728:	e594201c 	ldr	r2, [r4, #28]
    copy->size       = deque->size;
 100272c:	e5853000 	str	r3, [r5]
    copy->mem_alloc  = deque->mem_alloc;
 1002730:	e585c014 	str	ip, [r5, #20]
    copy->mem_calloc = deque->mem_calloc;
 1002734:	e5851018 	str	r1, [r5, #24]
    copy->mem_free   = deque->mem_free;
 1002738:	e585201c 	str	r2, [r5, #28]
    if (cp == NULL) {
 100273c:	0a00001b 	beq	10027b0 <deque_copy_deep+0xe4>
        for (i = 0; i < deque->size; i++) {
 1002740:	e5942000 	ldr	r2, [r4]
 1002744:	e3520000 	cmp	r2, #0
 1002748:	12409004 	subne	r9, r0, #4
 100274c:	13a06000 	movne	r6, #0
 1002750:	0a00000c 	beq	1002788 <deque_copy_deep+0xbc>
            size_t p = (deque->first + i) & (deque->capacity - 1);
 1002754:	e1c420d4 	ldrd	r2, [r4, #4]
            buff[i]  = cp(deque->buffer[p]);
 1002758:	e5941010 	ldr	r1, [r4, #16]
            size_t p = (deque->first + i) & (deque->capacity - 1);
 100275c:	e0863003 	add	r3, r6, r3
 1002760:	e2422001 	sub	r2, r2, #1
 1002764:	e0033002 	and	r3, r3, r2
        for (i = 0; i < deque->size; i++) {
 1002768:	e2866001 	add	r6, r6, #1
            buff[i]  = cp(deque->buffer[p]);
 100276c:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 1002770:	e12fff37 	blx	r7
        for (i = 0; i < deque->size; i++) {
 1002774:	e5943000 	ldr	r3, [r4]
            buff[i]  = cp(deque->buffer[p]);
 1002778:	e5a90004 	str	r0, [r9, #4]!
        for (i = 0; i < deque->size; i++) {
 100277c:	e1560003 	cmp	r6, r3
 1002780:	3afffff3 	bcc	1002754 <deque_copy_deep+0x88>
 1002784:	e5953000 	ldr	r3, [r5]
    copy->first = 0;
 1002788:	e3a00000 	mov	r0, #0
    copy->last  = copy->size;
 100278c:	e585300c 	str	r3, [r5, #12]
    copy->first = 0;
 1002790:	e5850008 	str	r0, [r5, #8]
    *out = copy;
 1002794:	e5885000 	str	r5, [r8]
    return CC_OK;
 1002798:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        deque->mem_free(copy);
 100279c:	e1a00005 	mov	r0, r5
 10027a0:	e594301c 	ldr	r3, [r4, #28]
 10027a4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10027a8:	e3a00001 	mov	r0, #1
 10027ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        if (deque->last > deque->first) {
 10027b0:	e5943008 	ldr	r3, [r4, #8]
 10027b4:	e594900c 	ldr	r9, [r4, #12]
 10027b8:	e5941010 	ldr	r1, [r4, #16]
 10027bc:	e1590003 	cmp	r9, r3
 10027c0:	e0811103 	add	r1, r1, r3, lsl #2
 10027c4:	9a000006 	bls	10027e4 <deque_copy_deep+0x118>
            memcpy(buff,
 10027c8:	e5942000 	ldr	r2, [r4]
 10027cc:	e1a02102 	lsl	r2, r2, #2
 10027d0:	eb006a8a 	bl	101d200 <memcpy>
 10027d4:	e5953000 	ldr	r3, [r5]
 10027d8:	eaffffea 	b	1002788 <deque_copy_deep+0xbc>
        return CC_ERR_ALLOC;
 10027dc:	e3a00001 	mov	r0, #1
}
 10027e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            size_t e = deque->capacity - deque->first;
 10027e4:	e5947004 	ldr	r7, [r4, #4]
 10027e8:	e0477003 	sub	r7, r7, r3
            memcpy(buff,
 10027ec:	e1a07107 	lsl	r7, r7, #2
 10027f0:	e1a02007 	mov	r2, r7
 10027f4:	eb006a81 	bl	101d200 <memcpy>
            memcpy(&(buff[e]),
 10027f8:	e0860007 	add	r0, r6, r7
 10027fc:	e1a02109 	lsl	r2, r9, #2
 1002800:	e5941010 	ldr	r1, [r4, #16]
 1002804:	eb006a7d 	bl	101d200 <memcpy>
 1002808:	e5953000 	ldr	r3, [r5]
 100280c:	eaffffdd 	b	1002788 <deque_copy_deep+0xbc>

01002810 <deque_trim_capacity>:
    if (deque->capacity == deque->size)
 1002810:	e5902004 	ldr	r2, [r0, #4]
 1002814:	e5903000 	ldr	r3, [r0]
 1002818:	e1520003 	cmp	r2, r3
 100281c:	0a000031 	beq	10028e8 <deque_trim_capacity+0xd8>
    if (n >= MAX_POW_TWO)
 1002820:	e3530000 	cmp	r3, #0
{
 1002824:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
        return MAX_POW_TWO;
 1002828:	b3a04102 	movlt	r4, #-2147483648	; 0x80000000
    if (n >= MAX_POW_TWO)
 100282c:	ba000007 	blt	1002850 <deque_trim_capacity+0x40>
    n--;
 1002830:	12434001 	subne	r4, r3, #1
        return 2;
 1002834:	03a04002 	moveq	r4, #2
    n |= n >> 1;
 1002838:	118440a4 	orrne	r4, r4, r4, lsr #1
    n |= n >> 2;
 100283c:	11844124 	orrne	r4, r4, r4, lsr #2
    n |= n >> 4;
 1002840:	11844224 	orrne	r4, r4, r4, lsr #4
    n |= n >> 8;
 1002844:	11844424 	orrne	r4, r4, r4, lsr #8
    n |= n >> 16;
 1002848:	11844824 	orrne	r4, r4, r4, lsr #16
    n++;
 100284c:	12844001 	addne	r4, r4, #1
    if (new_size == deque->capacity)
 1002850:	e1520004 	cmp	r2, r4
 1002854:	0a000027 	beq	10028f8 <deque_trim_capacity+0xe8>
    void **new_buff = deque->mem_alloc(sizeof(void*) * new_size);
 1002858:	e5903014 	ldr	r3, [r0, #20]
 100285c:	e1a05000 	mov	r5, r0
 1002860:	e1a00104 	lsl	r0, r4, #2
 1002864:	e12fff33 	blx	r3
    if (!new_buff)
 1002868:	e2507000 	subs	r7, r0, #0
 100286c:	0a00001f 	beq	10028f0 <deque_trim_capacity+0xe0>
        if (deque->last > deque->first) {
 1002870:	e5953008 	ldr	r3, [r5, #8]
 1002874:	e595800c 	ldr	r8, [r5, #12]
 1002878:	e5951010 	ldr	r1, [r5, #16]
 100287c:	e1580003 	cmp	r8, r3
 1002880:	e0811103 	add	r1, r1, r3, lsl #2
 1002884:	9a00000d 	bls	10028c0 <deque_trim_capacity+0xb0>
            memcpy(buff,
 1002888:	e5952000 	ldr	r2, [r5]
 100288c:	e1a02102 	lsl	r2, r2, #2
 1002890:	eb006a5a 	bl	101d200 <memcpy>
    deque->mem_free(deque->buffer);
 1002894:	e595301c 	ldr	r3, [r5, #28]
 1002898:	e5950010 	ldr	r0, [r5, #16]
 100289c:	e12fff33 	blx	r3
    deque->last     = deque->size;
 10028a0:	e5952000 	ldr	r2, [r5]
    deque->first    = 0;
 10028a4:	e3a03000 	mov	r3, #0
    deque->buffer   = new_buff;
 10028a8:	e5857010 	str	r7, [r5, #16]
    return CC_OK;
 10028ac:	e1a00003 	mov	r0, r3
    deque->capacity = new_size;
 10028b0:	e5854004 	str	r4, [r5, #4]
    deque->last     = deque->size;
 10028b4:	e585200c 	str	r2, [r5, #12]
    deque->first    = 0;
 10028b8:	e5853008 	str	r3, [r5, #8]
    return CC_OK;
 10028bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            size_t e = deque->capacity - deque->first;
 10028c0:	e5956004 	ldr	r6, [r5, #4]
 10028c4:	e0466003 	sub	r6, r6, r3
            memcpy(buff,
 10028c8:	e1a06106 	lsl	r6, r6, #2
 10028cc:	e1a02006 	mov	r2, r6
 10028d0:	eb006a4a 	bl	101d200 <memcpy>
            memcpy(&(buff[e]),
 10028d4:	e0870006 	add	r0, r7, r6
 10028d8:	e1a02108 	lsl	r2, r8, #2
 10028dc:	e5951010 	ldr	r1, [r5, #16]
 10028e0:	eb006a46 	bl	101d200 <memcpy>
 10028e4:	eaffffea 	b	1002894 <deque_trim_capacity+0x84>
        return CC_OK;
 10028e8:	e3a00000 	mov	r0, #0
}
 10028ec:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 10028f0:	e3a00001 	mov	r0, #1
}
 10028f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_OK;
 10028f8:	e3a00000 	mov	r0, #0
 10028fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01002900 <deque_reverse>:
{
 1002900:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    size_t c = deque->capacity - 1;
 1002904:	e8904080 	ldm	r0, {r7, lr}
    size_t first = deque->first;
 1002908:	e5903008 	ldr	r3, [r0, #8]
    for (i = 0, j = s - 1; i < (s - 1) / 2; i++, j--) {
 100290c:	e2476001 	sub	r6, r7, #1
 1002910:	e1b060a6 	lsrs	r6, r6, #1
 1002914:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
 1002918:	e0877083 	add	r7, r7, r3, lsl #1
 100291c:	e24ee001 	sub	lr, lr, #1
 1002920:	e0836006 	add	r6, r3, r6
 1002924:	e2477001 	sub	r7, r7, #1
        void *tmp = deque->buffer[f];
 1002928:	e5901010 	ldr	r1, [r0, #16]
        size_t l = (first + j) & c;
 100292c:	e0472003 	sub	r2, r7, r3
 1002930:	e002200e 	and	r2, r2, lr
        size_t f = (first + i) & c;
 1002934:	e00ec003 	and	ip, lr, r3
 1002938:	e2833001 	add	r3, r3, #1
        deque->buffer[f] = deque->buffer[l];
 100293c:	e7915102 	ldr	r5, [r1, r2, lsl #2]
    for (i = 0, j = s - 1; i < (s - 1) / 2; i++, j--) {
 1002940:	e1560003 	cmp	r6, r3
        void *tmp = deque->buffer[f];
 1002944:	e791410c 	ldr	r4, [r1, ip, lsl #2]
        deque->buffer[f] = deque->buffer[l];
 1002948:	e781510c 	str	r5, [r1, ip, lsl #2]
        deque->buffer[l] = tmp;
 100294c:	e5901010 	ldr	r1, [r0, #16]
 1002950:	e7814102 	str	r4, [r1, r2, lsl #2]
    for (i = 0, j = s - 1; i < (s - 1) / 2; i++, j--) {
 1002954:	1afffff3 	bne	1002928 <deque_reverse+0x28>
 1002958:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0100295c <deque_contains>:
{
 100295c:	e1a02000 	mov	r2, r0
    for (i = 0; i < deque->size; i++) {
 1002960:	e5900000 	ldr	r0, [r0]
 1002964:	e3500000 	cmp	r0, #0
 1002968:	012fff1e 	bxeq	lr
        size_t p = (deque->first + i) & (deque->capacity - 1);
 100296c:	e5923008 	ldr	r3, [r2, #8]
 1002970:	e592c004 	ldr	ip, [r2, #4]
{
 1002974:	e92d4010 	push	{r4, lr}
        if (deque->buffer[p] == element)
 1002978:	e5924010 	ldr	r4, [r2, #16]
 100297c:	e083e000 	add	lr, r3, r0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002980:	e24cc001 	sub	ip, ip, #1
    size_t o = 0;
 1002984:	e3a00000 	mov	r0, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002988:	e00c2003 	and	r2, ip, r3
        if (deque->buffer[p] == element)
 100298c:	e2833001 	add	r3, r3, #1
 1002990:	e7942102 	ldr	r2, [r4, r2, lsl #2]
 1002994:	e1510002 	cmp	r1, r2
            o++;
 1002998:	02800001 	addeq	r0, r0, #1
    for (i = 0; i < deque->size; i++) {
 100299c:	e15e0003 	cmp	lr, r3
 10029a0:	1afffff8 	bne	1002988 <deque_contains+0x2c>
 10029a4:	e8bd8010 	pop	{r4, pc}

010029a8 <deque_contains_value>:
{
 10029a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < deque->size; i++) {
 10029ac:	e5906000 	ldr	r6, [r0]
 10029b0:	e3560000 	cmp	r6, #0
 10029b4:	0a000013 	beq	1002a08 <deque_contains_value+0x60>
    size_t o = 0;
 10029b8:	e3a06000 	mov	r6, #0
 10029bc:	e1a08002 	mov	r8, r2
 10029c0:	e1a07001 	mov	r7, r1
 10029c4:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 10029c8:	e1a05006 	mov	r5, r6
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10029cc:	e5943008 	ldr	r3, [r4, #8]
        if (cmp(deque->buffer[p], element) == 0)
 10029d0:	e1a01007 	mov	r1, r7
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10029d4:	e5942004 	ldr	r2, [r4, #4]
        if (cmp(deque->buffer[p], element) == 0)
 10029d8:	e5940010 	ldr	r0, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10029dc:	e0853003 	add	r3, r5, r3
 10029e0:	e2855001 	add	r5, r5, #1
 10029e4:	e2422001 	sub	r2, r2, #1
 10029e8:	e0033002 	and	r3, r3, r2
        if (cmp(deque->buffer[p], element) == 0)
 10029ec:	e7900103 	ldr	r0, [r0, r3, lsl #2]
 10029f0:	e12fff38 	blx	r8
    for (i = 0; i < deque->size; i++) {
 10029f4:	e5943000 	ldr	r3, [r4]
        if (cmp(deque->buffer[p], element) == 0)
 10029f8:	e3500000 	cmp	r0, #0
            o++;
 10029fc:	02866001 	addeq	r6, r6, #1
    for (i = 0; i < deque->size; i++) {
 1002a00:	e1530005 	cmp	r3, r5
 1002a04:	8afffff0 	bhi	10029cc <deque_contains_value+0x24>
}
 1002a08:	e1a00006 	mov	r0, r6
 1002a0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01002a10 <deque_index_of>:
{
 1002a10:	e92d4030 	push	{r4, r5, lr}
    for (i = 0; i < deque->size; i++) {
 1002a14:	e590e000 	ldr	lr, [r0]
 1002a18:	e35e0000 	cmp	lr, #0
 1002a1c:	0a000011 	beq	1002a68 <deque_index_of+0x58>
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002a20:	e590c004 	ldr	ip, [r0, #4]
 1002a24:	e5904008 	ldr	r4, [r0, #8]
        if (deque->buffer[p] == element) {
 1002a28:	e5905010 	ldr	r5, [r0, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002a2c:	e24cc001 	sub	ip, ip, #1
 1002a30:	e004300c 	and	r3, r4, ip
        if (deque->buffer[p] == element) {
 1002a34:	e7953103 	ldr	r3, [r5, r3, lsl #2]
 1002a38:	e1510003 	cmp	r1, r3
    for (i = 0; i < deque->size; i++) {
 1002a3c:	e3a03000 	mov	r3, #0
        if (deque->buffer[p] == element) {
 1002a40:	1a000003 	bne	1002a54 <deque_index_of+0x44>
 1002a44:	ea000009 	b	1002a70 <deque_index_of+0x60>
 1002a48:	e7950100 	ldr	r0, [r5, r0, lsl #2]
 1002a4c:	e1500001 	cmp	r0, r1
 1002a50:	0a000006 	beq	1002a70 <deque_index_of+0x60>
    for (i = 0; i < deque->size; i++) {
 1002a54:	e2833001 	add	r3, r3, #1
 1002a58:	e153000e 	cmp	r3, lr
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002a5c:	e0830004 	add	r0, r3, r4
 1002a60:	e000000c 	and	r0, r0, ip
    for (i = 0; i < deque->size; i++) {
 1002a64:	1afffff7 	bne	1002a48 <deque_index_of+0x38>
    return CC_ERR_OUT_OF_RANGE;
 1002a68:	e3a00008 	mov	r0, #8
}
 1002a6c:	e8bd8030 	pop	{r4, r5, pc}
            *index = i;
 1002a70:	e5823000 	str	r3, [r2]
            return CC_OK;
 1002a74:	e3a00000 	mov	r0, #0
 1002a78:	e8bd8030 	pop	{r4, r5, pc}

01002a7c <deque_size>:
}
 1002a7c:	e5900000 	ldr	r0, [r0]
 1002a80:	e12fff1e 	bx	lr

01002a84 <deque_capacity>:
}
 1002a84:	e5900004 	ldr	r0, [r0, #4]
 1002a88:	e12fff1e 	bx	lr

01002a8c <deque_get_buffer>:
}
 1002a8c:	e5900010 	ldr	r0, [r0, #16]
 1002a90:	e12fff1e 	bx	lr

01002a94 <deque_foreach>:
    for (i = 0; i < deque->size; i++) {
 1002a94:	e5903000 	ldr	r3, [r0]
 1002a98:	e3530000 	cmp	r3, #0
 1002a9c:	012fff1e 	bxeq	lr
{
 1002aa0:	e92d4070 	push	{r4, r5, r6, lr}
 1002aa4:	e1a06001 	mov	r6, r1
 1002aa8:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 1002aac:	e3a05000 	mov	r5, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002ab0:	e1c420d4 	ldrd	r2, [r4, #4]
        fn(deque->buffer[p]);
 1002ab4:	e5941010 	ldr	r1, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002ab8:	e0853003 	add	r3, r5, r3
 1002abc:	e2422001 	sub	r2, r2, #1
 1002ac0:	e0033002 	and	r3, r3, r2
    for (i = 0; i < deque->size; i++) {
 1002ac4:	e2855001 	add	r5, r5, #1
        fn(deque->buffer[p]);
 1002ac8:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 1002acc:	e12fff36 	blx	r6
    for (i = 0; i < deque->size; i++) {
 1002ad0:	e5943000 	ldr	r3, [r4]
 1002ad4:	e1530005 	cmp	r3, r5
 1002ad8:	8afffff4 	bhi	1002ab0 <deque_foreach+0x1c>
 1002adc:	e8bd8070 	pop	{r4, r5, r6, pc}

01002ae0 <deque_filter_mut>:
{
 1002ae0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (deque_size(deque) == 0)
 1002ae4:	e5903000 	ldr	r3, [r0]
 1002ae8:	e3530000 	cmp	r3, #0
 1002aec:	0a000051 	beq	1002c38 <deque_filter_mut+0x158>
    size_t i = 0, c = deque->capacity - 1;
 1002af0:	e5907004 	ldr	r7, [r0, #4]
 1002af4:	e1a06001 	mov	r6, r1
 1002af8:	e1a04000 	mov	r4, r0
 1002afc:	e3a05000 	mov	r5, #0
 1002b00:	e2477001 	sub	r7, r7, #1
    return deque->size;
 1002b04:	ea000003 	b	1002b18 <deque_filter_mut+0x38>
            i++;
 1002b08:	e5940000 	ldr	r0, [r4]
 1002b0c:	e2855001 	add	r5, r5, #1
    while (i < deque_size(deque)) {
 1002b10:	e1550000 	cmp	r5, r0
 1002b14:	2a000045 	bcs	1002c30 <deque_filter_mut+0x150>
        size_t d_index = (deque->first + i) & c;
 1002b18:	e5943008 	ldr	r3, [r4, #8]
        if (!pred(deque->buffer[d_index])) {
 1002b1c:	e5942010 	ldr	r2, [r4, #16]
        size_t d_index = (deque->first + i) & c;
 1002b20:	e0853003 	add	r3, r5, r3
 1002b24:	e0033007 	and	r3, r3, r7
        if (!pred(deque->buffer[d_index])) {
 1002b28:	e7920103 	ldr	r0, [r2, r3, lsl #2]
 1002b2c:	e12fff36 	blx	r6
 1002b30:	e3500000 	cmp	r0, #0
 1002b34:	1afffff3 	bne	1002b08 <deque_filter_mut+0x28>
    if (index >= deque->size)
 1002b38:	e5943000 	ldr	r3, [r4]
 1002b3c:	e1530005 	cmp	r3, r5
 1002b40:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const size_t c = deque->capacity - 1;
 1002b44:	e5948004 	ldr	r8, [r4, #4]
    if (index == 0)
 1002b48:	e3550000 	cmp	r5, #0
    const size_t f = deque->first & c;
 1002b4c:	e5942008 	ldr	r2, [r4, #8]
    const size_t c = deque->capacity - 1;
 1002b50:	e2488001 	sub	r8, r8, #1
    if (index == 0)
 1002b54:	0a00001a 	beq	1002bc4 <deque_filter_mut+0xe4>
    if (index == c)
 1002b58:	e1580005 	cmp	r8, r5
    const size_t l = deque->last & c;
 1002b5c:	e594100c 	ldr	r1, [r4, #12]
    if (index == c)
 1002b60:	0a000030 	beq	1002c28 <deque_filter_mut+0x148>
    if (index <= (deque->size / 2) - 1) {
 1002b64:	e1a000a3 	lsr	r0, r3, #1
    const size_t p = (deque->first + index) & c;
 1002b68:	e0829005 	add	r9, r2, r5
 1002b6c:	e0099008 	and	r9, r9, r8
    void *removed  = deque->buffer[index];
 1002b70:	e5943010 	ldr	r3, [r4, #16]
    if (index <= (deque->size / 2) - 1) {
 1002b74:	e2400001 	sub	r0, r0, #1
 1002b78:	e1500005 	cmp	r0, r5
 1002b7c:	3a000018 	bcc	1002be4 <deque_filter_mut+0x104>
    const size_t f = deque->first & c;
 1002b80:	e0022008 	and	r2, r2, r8
        if (p < f) {
 1002b84:	e1520009 	cmp	r2, r9
 1002b88:	9a000055 	bls	1002ce4 <deque_filter_mut+0x204>
            if (f != c) {
 1002b8c:	e1580002 	cmp	r8, r2
            void *e = deque->buffer[c];
 1002b90:	e793a108 	ldr	sl, [r3, r8, lsl #2]
            if (f != c) {
 1002b94:	1a00002f 	bne	1002c58 <deque_filter_mut+0x178>
            if (p != 0) {
 1002b98:	e3590000 	cmp	r9, #0
 1002b9c:	1a000042 	bne	1002cac <deque_filter_mut+0x1cc>
            deque->buffer[0] = e;
 1002ba0:	e583a000 	str	sl, [r3]
        deque->first = (deque->first + 1) & c;
 1002ba4:	e5943008 	ldr	r3, [r4, #8]
 1002ba8:	e2833001 	add	r3, r3, #1
 1002bac:	e0088003 	and	r8, r8, r3
 1002bb0:	e5848008 	str	r8, [r4, #8]
    deque->size--;
 1002bb4:	e5940000 	ldr	r0, [r4]
 1002bb8:	e2400001 	sub	r0, r0, #1
 1002bbc:	e5840000 	str	r0, [r4]
    if (out)
 1002bc0:	eaffffd2 	b	1002b10 <deque_filter_mut+0x30>
    if (deque->size == 0)
 1002bc4:	e3530000 	cmp	r3, #0
 1002bc8:	0a000018 	beq	1002c30 <deque_filter_mut+0x150>
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002bcc:	e2822001 	add	r2, r2, #1
    deque->size--;
 1002bd0:	e2430001 	sub	r0, r3, #1
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002bd4:	e0088002 	and	r8, r8, r2
    deque->size--;
 1002bd8:	e5840000 	str	r0, [r4]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002bdc:	e5848008 	str	r8, [r4, #8]
    if (out)
 1002be0:	eaffffca 	b	1002b10 <deque_filter_mut+0x30>
    const size_t l = deque->last & c;
 1002be4:	e008b001 	and	fp, r8, r1
        if (p > l) {
 1002be8:	e15b0009 	cmp	fp, r9
 1002bec:	2a000034 	bcs	1002cc4 <deque_filter_mut+0x1e4>
            if (p != c) {
 1002bf0:	e1580009 	cmp	r8, r9
            void *e = deque->buffer[0];
 1002bf4:	e593a000 	ldr	sl, [r3]
            if (p != c) {
 1002bf8:	1a000022 	bne	1002c88 <deque_filter_mut+0x1a8>
                memmove(&(deque->buffer[1]),
 1002bfc:	e1a01003 	mov	r1, r3
 1002c00:	e2830004 	add	r0, r3, #4
 1002c04:	e1a0210b 	lsl	r2, fp, #2
 1002c08:	fa006af4 	blx	101d7e0 <memmove>
            deque->buffer[c] = e;
 1002c0c:	e5943010 	ldr	r3, [r4, #16]
 1002c10:	e783a108 	str	sl, [r3, r8, lsl #2]
        deque->last = (deque->last- 1) & c;
 1002c14:	e594300c 	ldr	r3, [r4, #12]
 1002c18:	e2433001 	sub	r3, r3, #1
 1002c1c:	e0088003 	and	r8, r8, r3
 1002c20:	e584800c 	str	r8, [r4, #12]
 1002c24:	eaffffe2 	b	1002bb4 <deque_filter_mut+0xd4>
    if (deque->size == 0)
 1002c28:	e3530000 	cmp	r3, #0
 1002c2c:	1a000003 	bne	1002c40 <deque_filter_mut+0x160>
    return CC_OK;
 1002c30:	e3a00000 	mov	r0, #0
 1002c34:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_ERR_OUT_OF_RANGE;
 1002c38:	e3a00008 	mov	r0, #8
 1002c3c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1002c40:	e2411001 	sub	r1, r1, #1
    deque->size--;
 1002c44:	e2430001 	sub	r0, r3, #1
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1002c48:	e0011005 	and	r1, r1, r5
    deque->size--;
 1002c4c:	e5840000 	str	r0, [r4]
    deque->last = last;
 1002c50:	e584100c 	str	r1, [r4, #12]
    if (out)
 1002c54:	eaffffad 	b	1002b10 <deque_filter_mut+0x30>
                memmove(&(deque->buffer[f + 1]),
 1002c58:	e2820001 	add	r0, r2, #1
                        (c - f) * sizeof(void*));
 1002c5c:	e0482002 	sub	r2, r8, r2
                memmove(&(deque->buffer[f + 1]),
 1002c60:	e1a00100 	lsl	r0, r0, #2
 1002c64:	e1a02102 	lsl	r2, r2, #2
                        &(deque->buffer[f]),
 1002c68:	e2401004 	sub	r1, r0, #4
                memmove(&(deque->buffer[f + 1]),
 1002c6c:	e0830000 	add	r0, r3, r0
 1002c70:	e0831001 	add	r1, r3, r1
 1002c74:	fa006ad9 	blx	101d7e0 <memmove>
            if (p != 0) {
 1002c78:	e3590000 	cmp	r9, #0
 1002c7c:	e5943010 	ldr	r3, [r4, #16]
 1002c80:	0affffc6 	beq	1002ba0 <deque_filter_mut+0xc0>
 1002c84:	ea000008 	b	1002cac <deque_filter_mut+0x1cc>
                memmove(&(deque->buffer[p]),
 1002c88:	e1a00109 	lsl	r0, r9, #2
                        (c - p) * sizeof(void*));
 1002c8c:	e0482009 	sub	r2, r8, r9
                memmove(&(deque->buffer[p]),
 1002c90:	e1a02102 	lsl	r2, r2, #2
 1002c94:	e2801004 	add	r1, r0, #4
 1002c98:	e0831001 	add	r1, r3, r1
 1002c9c:	e0830000 	add	r0, r3, r0
 1002ca0:	fa006ace 	blx	101d7e0 <memmove>
 1002ca4:	e5943010 	ldr	r3, [r4, #16]
 1002ca8:	eaffffd3 	b	1002bfc <deque_filter_mut+0x11c>
                memmove(&(deque->buffer[1]),
 1002cac:	e1a01003 	mov	r1, r3
 1002cb0:	e2830004 	add	r0, r3, #4
 1002cb4:	e1a02109 	lsl	r2, r9, #2
 1002cb8:	fa006ac8 	blx	101d7e0 <memmove>
 1002cbc:	e5943010 	ldr	r3, [r4, #16]
 1002cc0:	eaffffb6 	b	1002ba0 <deque_filter_mut+0xc0>
            memmove(&(deque->buffer[p]),
 1002cc4:	e1a00109 	lsl	r0, r9, #2
                    (l - p) * sizeof(void*));
 1002cc8:	e04b2009 	sub	r2, fp, r9
            memmove(&(deque->buffer[p]),
 1002ccc:	e1a02102 	lsl	r2, r2, #2
 1002cd0:	e2801004 	add	r1, r0, #4
 1002cd4:	e0831001 	add	r1, r3, r1
 1002cd8:	e0830000 	add	r0, r3, r0
 1002cdc:	fa006abf 	blx	101d7e0 <memmove>
 1002ce0:	eaffffcb 	b	1002c14 <deque_filter_mut+0x134>
            memmove(&(deque->buffer[f + 1]),
 1002ce4:	e2820001 	add	r0, r2, #1
 1002ce8:	e1a02105 	lsl	r2, r5, #2
 1002cec:	e1a00100 	lsl	r0, r0, #2
                    &(deque->buffer[f]),
 1002cf0:	e2401004 	sub	r1, r0, #4
            memmove(&(deque->buffer[f + 1]),
 1002cf4:	e0830000 	add	r0, r3, r0
 1002cf8:	e0831001 	add	r1, r3, r1
 1002cfc:	fa006ab7 	blx	101d7e0 <memmove>
 1002d00:	eaffffa7 	b	1002ba4 <deque_filter_mut+0xc4>

01002d04 <deque_filter>:
    if (deque_size(deque) == 0)
 1002d04:	e5903000 	ldr	r3, [r0]
 1002d08:	e3530000 	cmp	r3, #0
 1002d0c:	0a000040 	beq	1002e14 <deque_filter+0x110>
{
 1002d10:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1002d14:	e1a07001 	mov	r7, r1
    conf->mem_alloc  = malloc;
 1002d18:	e30c17b9 	movw	r1, #51129	; 0xc7b9
{
 1002d1c:	e24dd01c 	sub	sp, sp, #28
    conf->capacity   = DEFAULT_CAPACITY;
 1002d20:	e3a0c008 	mov	ip, #8
    conf->mem_alloc  = malloc;
 1002d24:	e3401101 	movt	r1, #257	; 0x101
 1002d28:	e1a08002 	mov	r8, r2
    conf->mem_free   = free;
 1002d2c:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    conf->mem_calloc = calloc;
 1002d30:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 1002d34:	e3403101 	movt	r3, #257	; 0x101
    conf->mem_calloc = calloc;
 1002d38:	e3402101 	movt	r2, #257	; 0x101
    Deque *filtered = NULL;
 1002d3c:	e3a06000 	mov	r6, #0
    conf->mem_alloc  = malloc;
 1002d40:	e58d100c 	str	r1, [sp, #12]
 1002d44:	e1a05000 	mov	r5, r0
    return deque_new_conf(&conf, deque);
 1002d48:	e28d1004 	add	r1, sp, #4
 1002d4c:	e08d000c 	add	r0, sp, ip
    conf->mem_free   = free;
 1002d50:	e58d3014 	str	r3, [sp, #20]
    conf->mem_calloc = calloc;
 1002d54:	e58d2010 	str	r2, [sp, #16]
    conf->capacity   = DEFAULT_CAPACITY;
 1002d58:	e98d1040 	stmib	sp, {r6, ip}
    return deque_new_conf(&conf, deque);
 1002d5c:	ebfffb9d 	bl	1001bd8 <deque_new_conf>
    if (!filtered)
 1002d60:	e59d3004 	ldr	r3, [sp, #4]
 1002d64:	e1530006 	cmp	r3, r6
        return CC_ERR_ALLOC;
 1002d68:	03a00001 	moveq	r0, #1
    if (!filtered)
 1002d6c:	0a000004 	beq	1002d84 <deque_filter+0x80>
    for (i = 0; i < deque->size; i++) {
 1002d70:	e5952000 	ldr	r2, [r5]
 1002d74:	e1520006 	cmp	r2, r6
 1002d78:	1a000016 	bne	1002dd8 <deque_filter+0xd4>
    return CC_OK;
 1002d7c:	e3a00000 	mov	r0, #0
    *out = filtered;
 1002d80:	e5883000 	str	r3, [r8]
}
 1002d84:	e28dd01c 	add	sp, sp, #28
 1002d88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            deque_add(filtered, deque->buffer[d_index]);
 1002d8c:	e59d9004 	ldr	r9, [sp, #4]
 1002d90:	e5951010 	ldr	r1, [r5, #16]
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1002d94:	e5992004 	ldr	r2, [r9, #4]
 1002d98:	e5993000 	ldr	r3, [r9]
            deque_add(filtered, deque->buffer[d_index]);
 1002d9c:	e7914104 	ldr	r4, [r1, r4, lsl #2]
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1002da0:	e1520003 	cmp	r2, r3
 1002da4:	0a00001c 	beq	1002e1c <deque_filter+0x118>
    deque->buffer[deque->last] = element;
 1002da8:	e599000c 	ldr	r0, [r9, #12]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002dac:	e2422001 	sub	r2, r2, #1
    deque->buffer[deque->last] = element;
 1002db0:	e599c010 	ldr	ip, [r9, #16]
    deque->size++;
 1002db4:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002db8:	e2801001 	add	r1, r0, #1
 1002dbc:	e0022001 	and	r2, r2, r1
    deque->buffer[deque->last] = element;
 1002dc0:	e78c4100 	str	r4, [ip, r0, lsl #2]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002dc4:	e589200c 	str	r2, [r9, #12]
    deque->size++;
 1002dc8:	e5893000 	str	r3, [r9]
    for (i = 0; i < deque->size; i++) {
 1002dcc:	e5953000 	ldr	r3, [r5]
 1002dd0:	e1530006 	cmp	r3, r6
 1002dd4:	9a00000c 	bls	1002e0c <deque_filter+0x108>
        size_t d_index = (deque->first + i) & (deque->capacity - 1);
 1002dd8:	e9950018 	ldmib	r5, {r3, r4}
        if (pred(deque->buffer[d_index])) {
 1002ddc:	e5952010 	ldr	r2, [r5, #16]
        size_t d_index = (deque->first + i) & (deque->capacity - 1);
 1002de0:	e0864004 	add	r4, r6, r4
 1002de4:	e2433001 	sub	r3, r3, #1
 1002de8:	e0044003 	and	r4, r4, r3
 1002dec:	e2866001 	add	r6, r6, #1
        if (pred(deque->buffer[d_index])) {
 1002df0:	e7920104 	ldr	r0, [r2, r4, lsl #2]
 1002df4:	e12fff37 	blx	r7
 1002df8:	e3500000 	cmp	r0, #0
 1002dfc:	1affffe2 	bne	1002d8c <deque_filter+0x88>
    for (i = 0; i < deque->size; i++) {
 1002e00:	e5953000 	ldr	r3, [r5]
 1002e04:	e1530006 	cmp	r3, r6
 1002e08:	8afffff2 	bhi	1002dd8 <deque_filter+0xd4>
 1002e0c:	e59d3004 	ldr	r3, [sp, #4]
 1002e10:	eaffffd9 	b	1002d7c <deque_filter+0x78>
        return CC_ERR_OUT_OF_RANGE;
 1002e14:	e3a00008 	mov	r0, #8
}
 1002e18:	e12fff1e 	bx	lr
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1002e1c:	e1a00009 	mov	r0, r9
 1002e20:	ebfffb1b 	bl	1001a94 <expand_capacity>
 1002e24:	e3500000 	cmp	r0, #0
 1002e28:	1affffe7 	bne	1002dcc <deque_filter+0xc8>
 1002e2c:	e5992004 	ldr	r2, [r9, #4]
 1002e30:	e5993000 	ldr	r3, [r9]
 1002e34:	eaffffdb 	b	1002da8 <deque_filter+0xa4>

01002e38 <deque_iter_init>:
 * @param[in] deque the vector to iterate over
 */
void deque_iter_init(DequeIter *iter, Deque *deque)
{
    iter->deque = deque;
    iter->index = 0;
 1002e38:	e3a03000 	mov	r3, #0
 1002e3c:	e880000a 	stm	r0, {r1, r3}
    iter->last_removed = false;
 1002e40:	e5c03008 	strb	r3, [r0, #8]
}
 1002e44:	e12fff1e 	bx	lr

01002e48 <deque_iter_next>:
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Deque has been reached.
 */
enum cc_stat deque_iter_next(DequeIter *iter, void **out)
{
    const size_t c     = (iter->deque->capacity - 1);
 1002e48:	e5902000 	ldr	r2, [r0]
{
 1002e4c:	e92d4010 	push	{r4, lr}
    const size_t last  = (iter->deque->last) & c;
    const size_t first = (iter->deque->first) & c;
 1002e50:	e9925008 	ldmib	r2, {r3, ip, lr}
    const size_t c     = (iter->deque->capacity - 1);
 1002e54:	e2433001 	sub	r3, r3, #1
    const size_t last  = (iter->deque->last) & c;
 1002e58:	e00ee003 	and	lr, lr, r3
    const size_t first = (iter->deque->first) & c;
 1002e5c:	e00c4003 	and	r4, ip, r3

    if (last == first || iter->index >= iter->deque->size)
 1002e60:	e15e0004 	cmp	lr, r4
 1002e64:	0a00000f 	beq	1002ea8 <deque_iter_next+0x60>
 1002e68:	e590e004 	ldr	lr, [r0, #4]
 1002e6c:	e5924000 	ldr	r4, [r2]
 1002e70:	e15e0004 	cmp	lr, r4
 1002e74:	2a00000b 	bcs	1002ea8 <deque_iter_next+0x60>

    const size_t i = (iter->deque->first + iter->index) & c;

    iter->index++;
    iter->last_removed = false;
    *out = iter->deque->buffer[i];
 1002e78:	e5924010 	ldr	r4, [r2, #16]
    const size_t i = (iter->deque->first + iter->index) & c;
 1002e7c:	e08cc00e 	add	ip, ip, lr
 1002e80:	e003300c 	and	r3, r3, ip
    iter->last_removed = false;
 1002e84:	e3a02000 	mov	r2, #0
    iter->index++;
 1002e88:	e28ee001 	add	lr, lr, #1
    *out = iter->deque->buffer[i];
 1002e8c:	e794c103 	ldr	ip, [r4, r3, lsl #2]

    return CC_OK;
 1002e90:	e1a03002 	mov	r3, r2
    iter->index++;
 1002e94:	e580e004 	str	lr, [r0, #4]
    iter->last_removed = false;
 1002e98:	e5c02008 	strb	r2, [r0, #8]
}
 1002e9c:	e1a00003 	mov	r0, r3
    *out = iter->deque->buffer[i];
 1002ea0:	e581c000 	str	ip, [r1]
}
 1002ea4:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 1002ea8:	e3a03009 	mov	r3, #9
}
 1002eac:	e1a00003 	mov	r0, r3
 1002eb0:	e8bd8010 	pop	{r4, pc}

01002eb4 <deque_iter_remove>:
 * @return CC_OK if the element was successfully removed, CC_ERR_OUT_OF_RANGE
 * if the iterator state is invalid, or CC_ERR_VALUE_NOT_FOUND if the value
 * was already removed.
 */
enum cc_stat deque_iter_remove(DequeIter *iter, void **out)
{
 1002eb4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (iter->last_removed)
 1002eb8:	e5d03008 	ldrb	r3, [r0, #8]
 1002ebc:	e3530000 	cmp	r3, #0
 1002ec0:	1a000029 	bne	1002f6c <deque_iter_remove+0xb8>
        return CC_ERR_VALUE_NOT_FOUND;

    void *rm;
    enum cc_stat status = deque_remove_at(iter->deque, iter->index, &rm);
 1002ec4:	e5905000 	ldr	r5, [r0]
 1002ec8:	e5903004 	ldr	r3, [r0, #4]
    if (index >= deque->size)
 1002ecc:	e5952000 	ldr	r2, [r5]
 1002ed0:	e1530002 	cmp	r3, r2
 1002ed4:	2a000047 	bcs	1002ff8 <deque_iter_remove+0x144>
    const size_t c = deque->capacity - 1;
 1002ed8:	e5957004 	ldr	r7, [r5, #4]
    if (index == 0)
 1002edc:	e3530000 	cmp	r3, #0
 1002ee0:	e1a04000 	mov	r4, r0
    const size_t c = deque->capacity - 1;
 1002ee4:	e1a06001 	mov	r6, r1
    const size_t f = deque->first & c;
 1002ee8:	e5950008 	ldr	r0, [r5, #8]
    void *removed  = deque->buffer[index];
 1002eec:	e595c010 	ldr	ip, [r5, #16]
    const size_t c = deque->capacity - 1;
 1002ef0:	e2477001 	sub	r7, r7, #1
    if (index == 0)
 1002ef4:	0a00001e 	beq	1002f74 <deque_iter_remove+0xc0>
    if (index == c)
 1002ef8:	e1530007 	cmp	r3, r7
    const size_t l = deque->last & c;
 1002efc:	e595e00c 	ldr	lr, [r5, #12]
    if (index == c)
 1002f00:	0a00003e 	beq	1003000 <deque_iter_remove+0x14c>
    if (index <= (deque->size / 2) - 1) {
 1002f04:	e1a010a2 	lsr	r1, r2, #1
    const size_t p = (deque->first + index) & c;
 1002f08:	e0838000 	add	r8, r3, r0
 1002f0c:	e0088007 	and	r8, r8, r7
    void *removed  = deque->buffer[index];
 1002f10:	e1a02103 	lsl	r2, r3, #2
    if (index <= (deque->size / 2) - 1) {
 1002f14:	e2411001 	sub	r1, r1, #1
    void *removed  = deque->buffer[index];
 1002f18:	e79c9103 	ldr	r9, [ip, r3, lsl #2]
    if (index <= (deque->size / 2) - 1) {
 1002f1c:	e1530001 	cmp	r3, r1
 1002f20:	8a000023 	bhi	1002fb4 <deque_iter_remove+0x100>
    const size_t f = deque->first & c;
 1002f24:	e0000007 	and	r0, r0, r7
        if (p < f) {
 1002f28:	e1500008 	cmp	r0, r8
 1002f2c:	9a00004f 	bls	1003070 <deque_iter_remove+0x1bc>
            if (f != c) {
 1002f30:	e1570000 	cmp	r7, r0
            void *e = deque->buffer[c];
 1002f34:	e79ca107 	ldr	sl, [ip, r7, lsl #2]
            if (f != c) {
 1002f38:	1a000039 	bne	1003024 <deque_iter_remove+0x170>
            if (p != 0) {
 1002f3c:	e3580000 	cmp	r8, #0
 1002f40:	1a000059 	bne	10030ac <deque_iter_remove+0x1f8>
            deque->buffer[0] = e;
 1002f44:	e58ca000 	str	sl, [ip]
        deque->first = (deque->first + 1) & c;
 1002f48:	e5953008 	ldr	r3, [r5, #8]
 1002f4c:	e2833001 	add	r3, r3, #1
 1002f50:	e0077003 	and	r7, r7, r3
 1002f54:	e5857008 	str	r7, [r5, #8]
    deque->size--;
 1002f58:	e5952000 	ldr	r2, [r5]
 1002f5c:	e5943004 	ldr	r3, [r4, #4]
 1002f60:	e2422001 	sub	r2, r2, #1
 1002f64:	e5852000 	str	r2, [r5]
    if (status == CC_OK) {
 1002f68:	ea000009 	b	1002f94 <deque_iter_remove+0xe0>
        return CC_ERR_VALUE_NOT_FOUND;
 1002f6c:	e3a00007 	mov	r0, #7
 1002f70:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (deque->size == 0)
 1002f74:	e3520000 	cmp	r2, #0
 1002f78:	0a00001e 	beq	1002ff8 <deque_iter_remove+0x144>
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002f7c:	e2801001 	add	r1, r0, #1
    deque->size--;
 1002f80:	e2422001 	sub	r2, r2, #1
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002f84:	e0077001 	and	r7, r7, r1
    void *element = deque->buffer[deque->first];
 1002f88:	e79c9100 	ldr	r9, [ip, r0, lsl #2]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002f8c:	e5857008 	str	r7, [r5, #8]
    deque->size--;
 1002f90:	e5852000 	str	r2, [r5]
        iter->index--;
        iter->last_removed = true;
        if (out)
 1002f94:	e3560000 	cmp	r6, #0
        iter->index--;
 1002f98:	e2433001 	sub	r3, r3, #1
        iter->last_removed = true;
 1002f9c:	e3a02001 	mov	r2, #1
        iter->index--;
 1002fa0:	e5843004 	str	r3, [r4, #4]
        iter->last_removed = true;
 1002fa4:	e5c42008 	strb	r2, [r4, #8]
            *out = rm;
 1002fa8:	e3a00000 	mov	r0, #0
 1002fac:	15869000 	strne	r9, [r6]
 1002fb0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const size_t l = deque->last & c;
 1002fb4:	e007b00e 	and	fp, r7, lr
        if (p > l) {
 1002fb8:	e15b0008 	cmp	fp, r8
 1002fbc:	2a000032 	bcs	100308c <deque_iter_remove+0x1d8>
            if (p != c) {
 1002fc0:	e1570008 	cmp	r7, r8
            void *e = deque->buffer[0];
 1002fc4:	e59ca000 	ldr	sl, [ip]
            if (p != c) {
 1002fc8:	1a00001f 	bne	100304c <deque_iter_remove+0x198>
                memmove(&(deque->buffer[1]),
 1002fcc:	e1a0210b 	lsl	r2, fp, #2
 1002fd0:	e1a0100c 	mov	r1, ip
 1002fd4:	e28c0004 	add	r0, ip, #4
 1002fd8:	fa006a00 	blx	101d7e0 <memmove>
            deque->buffer[c] = e;
 1002fdc:	e5953010 	ldr	r3, [r5, #16]
 1002fe0:	e783a107 	str	sl, [r3, r7, lsl #2]
        deque->last = (deque->last- 1) & c;
 1002fe4:	e595300c 	ldr	r3, [r5, #12]
 1002fe8:	e2433001 	sub	r3, r3, #1
 1002fec:	e0077003 	and	r7, r7, r3
 1002ff0:	e585700c 	str	r7, [r5, #12]
 1002ff4:	eaffffd7 	b	1002f58 <deque_iter_remove+0xa4>
        return CC_ERR_OUT_OF_RANGE;
 1002ff8:	e3a00008 	mov	r0, #8
 1002ffc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (deque->size == 0)
 1003000:	e3520000 	cmp	r2, #0
 1003004:	0afffffb 	beq	1002ff8 <deque_iter_remove+0x144>
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1003008:	e24ee001 	sub	lr, lr, #1
    deque->size--;
 100300c:	e2422001 	sub	r2, r2, #1
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1003010:	e00ee003 	and	lr, lr, r3
    void   *element = deque->buffer[last];
 1003014:	e79c910e 	ldr	r9, [ip, lr, lsl #2]
    deque->last = last;
 1003018:	e585e00c 	str	lr, [r5, #12]
    deque->size--;
 100301c:	e5852000 	str	r2, [r5]
    if (status == CC_OK) {
 1003020:	eaffffdb 	b	1002f94 <deque_iter_remove+0xe0>
                memmove(&(deque->buffer[f + 1]),
 1003024:	e2803001 	add	r3, r0, #1
                        (c - f) * sizeof(void*));
 1003028:	e0472000 	sub	r2, r7, r0
                memmove(&(deque->buffer[f + 1]),
 100302c:	e1a00103 	lsl	r0, r3, #2
 1003030:	e1a02102 	lsl	r2, r2, #2
                        &(deque->buffer[f]),
 1003034:	e2401004 	sub	r1, r0, #4
                memmove(&(deque->buffer[f + 1]),
 1003038:	e08c0000 	add	r0, ip, r0
 100303c:	e08c1001 	add	r1, ip, r1
 1003040:	fa0069e6 	blx	101d7e0 <memmove>
 1003044:	e595c010 	ldr	ip, [r5, #16]
 1003048:	eaffffbb 	b	1002f3c <deque_iter_remove+0x88>
                memmove(&(deque->buffer[p]),
 100304c:	e1a00108 	lsl	r0, r8, #2
                        (c - p) * sizeof(void*));
 1003050:	e0472008 	sub	r2, r7, r8
                memmove(&(deque->buffer[p]),
 1003054:	e1a02102 	lsl	r2, r2, #2
 1003058:	e2801004 	add	r1, r0, #4
 100305c:	e08c1001 	add	r1, ip, r1
 1003060:	e08c0000 	add	r0, ip, r0
 1003064:	fa0069dd 	blx	101d7e0 <memmove>
 1003068:	e595c010 	ldr	ip, [r5, #16]
 100306c:	eaffffd6 	b	1002fcc <deque_iter_remove+0x118>
            memmove(&(deque->buffer[f + 1]),
 1003070:	e2800001 	add	r0, r0, #1
 1003074:	e1a00100 	lsl	r0, r0, #2
                    &(deque->buffer[f]),
 1003078:	e2401004 	sub	r1, r0, #4
            memmove(&(deque->buffer[f + 1]),
 100307c:	e08c0000 	add	r0, ip, r0
 1003080:	e08c1001 	add	r1, ip, r1
 1003084:	fa0069d5 	blx	101d7e0 <memmove>
 1003088:	eaffffae 	b	1002f48 <deque_iter_remove+0x94>
            memmove(&(deque->buffer[p]),
 100308c:	e1a00108 	lsl	r0, r8, #2
                    (l - p) * sizeof(void*));
 1003090:	e04b2008 	sub	r2, fp, r8
            memmove(&(deque->buffer[p]),
 1003094:	e1a02102 	lsl	r2, r2, #2
 1003098:	e2801004 	add	r1, r0, #4
 100309c:	e08c1001 	add	r1, ip, r1
 10030a0:	e08c0000 	add	r0, ip, r0
 10030a4:	fa0069cd 	blx	101d7e0 <memmove>
 10030a8:	eaffffcd 	b	1002fe4 <deque_iter_remove+0x130>
                memmove(&(deque->buffer[1]),
 10030ac:	e1a0100c 	mov	r1, ip
 10030b0:	e28c0004 	add	r0, ip, #4
 10030b4:	e1a02108 	lsl	r2, r8, #2
 10030b8:	fa0069c8 	blx	101d7e0 <memmove>
 10030bc:	e595c010 	ldr	ip, [r5, #16]
 10030c0:	eaffff9f 	b	1002f44 <deque_iter_remove+0x90>

010030c4 <deque_iter_add>:
 *
 * @return CC_OK if the element was successfully added, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat deque_iter_add(DequeIter *iter, void *element)
{
 10030c4:	e92d4010 	push	{r4, lr}
 10030c8:	e1a04000 	mov	r4, r0
    enum cc_stat status = deque_add_at(iter->deque, element, iter->index);
 10030cc:	e8900005 	ldm	r0, {r0, r2}
 10030d0:	ebfffb87 	bl	1001ef4 <deque_add_at>
    if (status == CC_OK)
 10030d4:	e3500000 	cmp	r0, #0
        iter->index++;
 10030d8:	05943004 	ldreq	r3, [r4, #4]
 10030dc:	02833001 	addeq	r3, r3, #1
 10030e0:	05843004 	streq	r3, [r4, #4]

    return status;
}
 10030e4:	e8bd8010 	pop	{r4, pc}

010030e8 <deque_iter_replace>:
 * @return  CC_OK if the element was replaced successfully, or
 * CC_ERR_VALUE_NOT_FOUND.
 */
enum cc_stat deque_iter_replace(DequeIter *iter, void *replacement, void **out)
{
    return deque_replace_at(iter->deque, replacement, iter->index, out);
 10030e8:	e590c000 	ldr	ip, [r0]
 10030ec:	e5903004 	ldr	r3, [r0, #4]
    if (index >= deque->size)
 10030f0:	e59c0000 	ldr	r0, [ip]
 10030f4:	e1530000 	cmp	r3, r0
 10030f8:	2a000010 	bcs	1003140 <deque_iter_replace+0x58>
{
 10030fc:	e92d4010 	push	{r4, lr}
    if (out)
 1003100:	e3520000 	cmp	r2, #0
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1003104:	e59ce008 	ldr	lr, [ip, #8]
 1003108:	e59c0004 	ldr	r0, [ip, #4]
 100310c:	e59c4010 	ldr	r4, [ip, #16]
 1003110:	e083300e 	add	r3, r3, lr
 1003114:	e2400001 	sub	r0, r0, #1
 1003118:	e0033000 	and	r3, r3, r0
 100311c:	e1a0e103 	lsl	lr, r3, #2
        *out = deque->buffer[i];
 1003120:	17943103 	ldrne	r3, [r4, r3, lsl #2]
 1003124:	e084000e 	add	r0, r4, lr
 1003128:	15823000 	strne	r3, [r2]
 100312c:	159c0010 	ldrne	r0, [ip, #16]
 1003130:	1080000e 	addne	r0, r0, lr
    deque->buffer[i] = element;
 1003134:	e5801000 	str	r1, [r0]
    return CC_OK;
 1003138:	e3a00000 	mov	r0, #0
}
 100313c:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1003140:	e3a00008 	mov	r0, #8
}
 1003144:	e12fff1e 	bx	lr

01003148 <deque_iter_index>:
 *
 * @return the index
 */
size_t deque_iter_index(DequeIter *iter)
{
    return iter->index - 1;
 1003148:	e5900004 	ldr	r0, [r0, #4]
}
 100314c:	e2400001 	sub	r0, r0, #1
 1003150:	e12fff1e 	bx	lr

01003154 <deque_zip_iter_init>:
 */
void deque_zip_iter_init(DequeZipIter *iter, Deque *d1, Deque *d2)
{
    iter->d1    = d1;
    iter->d2    = d2;
    iter->index = 0;
 1003154:	e3a03000 	mov	r3, #0
 1003158:	e880000e 	stm	r0, {r1, r2, r3}
    iter->last_removed = false;
 100315c:	e5c0300c 	strb	r3, [r0, #12]
}
 1003160:	e12fff1e 	bx	lr

01003164 <deque_zip_iter_next>:
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end of one
 * of the deques has been reached.
 */
enum cc_stat deque_zip_iter_next(DequeZipIter *iter, void **out1, void **out2)
{
    const size_t d1_capacity = (iter->d1->capacity - 1);
 1003164:	e590c000 	ldr	ip, [r0]
{
 1003168:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    const size_t d1_last     = (iter->d1->last) & d1_capacity;
    const size_t d1_first    = (iter->d1->first) & d1_capacity;
 100316c:	e99c4018 	ldmib	ip, {r3, r4, lr}
    const size_t d1_capacity = (iter->d1->capacity - 1);
 1003170:	e2433001 	sub	r3, r3, #1
    const size_t d1_last     = (iter->d1->last) & d1_capacity;
 1003174:	e00ee003 	and	lr, lr, r3
    const size_t d1_first    = (iter->d1->first) & d1_capacity;
 1003178:	e0045003 	and	r5, r4, r3

    if (d1_last == d1_first || iter->index >= iter->d1->size)
 100317c:	e15e0005 	cmp	lr, r5
 1003180:	0a00001f 	beq	1003204 <deque_zip_iter_next+0xa0>
 1003184:	e590e008 	ldr	lr, [r0, #8]
 1003188:	e59c5000 	ldr	r5, [ip]
 100318c:	e15e0005 	cmp	lr, r5
 1003190:	2a00001b 	bcs	1003204 <deque_zip_iter_next+0xa0>
        return CC_ITER_END;

    const size_t d2_capacity = (iter->d2->capacity - 1);
 1003194:	e5907004 	ldr	r7, [r0, #4]
    const size_t d2_last     = (iter->d2->last) & d2_capacity;
    const size_t d2_first    = (iter->d2->first) & d2_capacity;
 1003198:	e9970160 	ldmib	r7, {r5, r6, r8}
    const size_t d2_capacity = (iter->d2->capacity - 1);
 100319c:	e2455001 	sub	r5, r5, #1
    const size_t d2_last     = (iter->d2->last) & d2_capacity;
 10031a0:	e0088005 	and	r8, r8, r5
    const size_t d2_first    = (iter->d2->first) & d2_capacity;
 10031a4:	e0069005 	and	r9, r6, r5

    if (d2_last == d2_first || iter->index >= iter->d2->size)
 10031a8:	e1580009 	cmp	r8, r9
 10031ac:	0a000014 	beq	1003204 <deque_zip_iter_next+0xa0>
 10031b0:	e5977000 	ldr	r7, [r7]
 10031b4:	e15e0007 	cmp	lr, r7
 10031b8:	2a000011 	bcs	1003204 <deque_zip_iter_next+0xa0>
         return CC_ITER_END;

    const size_t d1_index = (iter->d1->first + iter->index) & d1_capacity;
    const size_t d2_index = (iter->d2->first + iter->index) & d2_capacity;

    *out1 = iter->d1->buffer[d1_index];
 10031bc:	e59cc010 	ldr	ip, [ip, #16]
    const size_t d1_index = (iter->d1->first + iter->index) & d1_capacity;
 10031c0:	e084400e 	add	r4, r4, lr
 10031c4:	e0033004 	and	r3, r3, r4
    const size_t d2_index = (iter->d2->first + iter->index) & d2_capacity;
 10031c8:	e08e6006 	add	r6, lr, r6
 10031cc:	e0055006 	and	r5, r5, r6
    *out2 = iter->d2->buffer[d2_index];

    iter->index++;
 10031d0:	e28ee001 	add	lr, lr, #1
    *out1 = iter->d1->buffer[d1_index];
 10031d4:	e79c4103 	ldr	r4, [ip, r3, lsl #2]
    iter->last_removed = false;
 10031d8:	e3a0c000 	mov	ip, #0

    return CC_OK;
 10031dc:	e1a0300c 	mov	r3, ip
    *out1 = iter->d1->buffer[d1_index];
 10031e0:	e5814000 	str	r4, [r1]
    *out2 = iter->d2->buffer[d2_index];
 10031e4:	e5901004 	ldr	r1, [r0, #4]
 10031e8:	e5911010 	ldr	r1, [r1, #16]
 10031ec:	e7911105 	ldr	r1, [r1, r5, lsl #2]
 10031f0:	e5821000 	str	r1, [r2]
    iter->index++;
 10031f4:	e580e008 	str	lr, [r0, #8]
    iter->last_removed = false;
 10031f8:	e5c0c00c 	strb	ip, [r0, #12]
}
 10031fc:	e1a00003 	mov	r0, r3
 1003200:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        return CC_ITER_END;
 1003204:	e3a03009 	mov	r3, #9
}
 1003208:	e1a00003 	mov	r0, r3
 100320c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

01003210 <deque_zip_iter_add>:
 * @return CC_OK if the element pair was successfully added to the deques, or
 * CC_ERR_ALLOC if the memory allocation for the new elements failed.
 */
enum cc_stat deque_zip_iter_add(DequeZipIter *iter, void *e1, void *e2)
{
    if (iter->index >= iter->d1->size || iter->index >= iter->d2->size)
 1003210:	e5903000 	ldr	r3, [r0]
{
 1003214:	e92d4070 	push	{r4, r5, r6, lr}
    if (iter->index >= iter->d1->size || iter->index >= iter->d2->size)
 1003218:	e590c008 	ldr	ip, [r0, #8]
 100321c:	e593e000 	ldr	lr, [r3]
 1003220:	e15c000e 	cmp	ip, lr
 1003224:	2a000021 	bcs	10032b0 <deque_zip_iter_add+0xa0>
 1003228:	e5904004 	ldr	r4, [r0, #4]
 100322c:	e5944000 	ldr	r4, [r4]
 1003230:	e15c0004 	cmp	ip, r4
 1003234:	2a00001d 	bcs	10032b0 <deque_zip_iter_add+0xa0>
 1003238:	e1a06002 	mov	r6, r2
        return CC_ERR_OUT_OF_RANGE;

    /* While this check is performed by a call to deque_add_at, it is necessary to know
       in advance whether both deque buffers have enough room before inserting new elements
       because this operation must insert either both elements, or none.*/
    if ((iter->d1->capacity == iter->d1->size && expand_capacity(iter->d1) != CC_OK) &&
 100323c:	e5932004 	ldr	r2, [r3, #4]
 1003240:	e1a05001 	mov	r5, r1
 1003244:	e1a04000 	mov	r4, r0
 1003248:	e15e0002 	cmp	lr, r2
 100324c:	0a00000b 	beq	1003280 <deque_zip_iter_add+0x70>
        (iter->d2->capacity == iter->d2->size && expand_capacity(iter->d2) != CC_OK)) {
        return CC_ERR_ALLOC;
    }

    /* The retun status can be ignored since the checks have already been made. */
    deque_add_at(iter->d1, e1, iter->index);
 1003250:	e1a0200c 	mov	r2, ip
 1003254:	e1a01005 	mov	r1, r5
 1003258:	e1a00003 	mov	r0, r3
 100325c:	ebfffb24 	bl	1001ef4 <deque_add_at>
    deque_add_at(iter->d2, e2, iter->index);
 1003260:	e1a01006 	mov	r1, r6
 1003264:	e9940005 	ldmib	r4, {r0, r2}
 1003268:	ebfffb21 	bl	1001ef4 <deque_add_at>

    iter->index++;
 100326c:	e5943008 	ldr	r3, [r4, #8]
    return CC_OK;
 1003270:	e3a00000 	mov	r0, #0
    iter->index++;
 1003274:	e2833001 	add	r3, r3, #1
 1003278:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 100327c:	e8bd8070 	pop	{r4, r5, r6, pc}
    if ((iter->d1->capacity == iter->d1->size && expand_capacity(iter->d1) != CC_OK) &&
 1003280:	e1a00003 	mov	r0, r3
 1003284:	ebfffa02 	bl	1001a94 <expand_capacity>
 1003288:	e3500000 	cmp	r0, #0
 100328c:	0a000004 	beq	10032a4 <deque_zip_iter_add+0x94>
        (iter->d2->capacity == iter->d2->size && expand_capacity(iter->d2) != CC_OK)) {
 1003290:	e5940004 	ldr	r0, [r4, #4]
    if ((iter->d1->capacity == iter->d1->size && expand_capacity(iter->d1) != CC_OK) &&
 1003294:	e5902004 	ldr	r2, [r0, #4]
 1003298:	e5903000 	ldr	r3, [r0]
 100329c:	e1520003 	cmp	r2, r3
 10032a0:	0a000004 	beq	10032b8 <deque_zip_iter_add+0xa8>
 10032a4:	e5943000 	ldr	r3, [r4]
 10032a8:	e594c008 	ldr	ip, [r4, #8]
 10032ac:	eaffffe7 	b	1003250 <deque_zip_iter_add+0x40>
        return CC_ERR_OUT_OF_RANGE;
 10032b0:	e3a00008 	mov	r0, #8
 10032b4:	e8bd8070 	pop	{r4, r5, r6, pc}
        (iter->d2->capacity == iter->d2->size && expand_capacity(iter->d2) != CC_OK)) {
 10032b8:	ebfff9f5 	bl	1001a94 <expand_capacity>
 10032bc:	e3500000 	cmp	r0, #0
 10032c0:	0afffff7 	beq	10032a4 <deque_zip_iter_add+0x94>
        return CC_ERR_ALLOC;
 10032c4:	e3a00001 	mov	r0, #1
}
 10032c8:	e8bd8070 	pop	{r4, r5, r6, pc}

010032cc <deque_zip_iter_remove>:
 * @return CC_OK if the element was successfully removed, CC_ERR_OUT_OF_RANGE if the
 * iterator is in an invalid state, or CC_ERR_VALUE_NOT_FOUND if the value was already
 * removed.
 */
enum cc_stat deque_zip_iter_remove(DequeZipIter *iter, void **out1, void **out2)
{
 10032cc:	e92d4070 	push	{r4, r5, r6, lr}
    if (iter->last_removed)
 10032d0:	e5d0500c 	ldrb	r5, [r0, #12]
 10032d4:	e3550000 	cmp	r5, #0
 10032d8:	1a00001d 	bne	1003354 <deque_zip_iter_remove+0x88>
        return CC_ERR_VALUE_NOT_FOUND;

    if ((iter->index - 1) >= iter->d1->size || (iter->index - 1) >= iter->d2->size)
 10032dc:	e590c000 	ldr	ip, [r0]
 10032e0:	e5903008 	ldr	r3, [r0, #8]
 10032e4:	e59ce000 	ldr	lr, [ip]
 10032e8:	e2433001 	sub	r3, r3, #1
 10032ec:	e153000e 	cmp	r3, lr
 10032f0:	2a000015 	bcs	100334c <deque_zip_iter_remove+0x80>
 10032f4:	e590e004 	ldr	lr, [r0, #4]
 10032f8:	e59ee000 	ldr	lr, [lr]
 10032fc:	e153000e 	cmp	r3, lr
 1003300:	2a000011 	bcs	100334c <deque_zip_iter_remove+0x80>
        return CC_ERR_OUT_OF_RANGE;

    deque_remove_at(iter->d1, iter->index - 1, out1);
 1003304:	e1a04000 	mov	r4, r0
 1003308:	e1a06002 	mov	r6, r2
 100330c:	e1a0000c 	mov	r0, ip
 1003310:	e1a02001 	mov	r2, r1
 1003314:	e1a01003 	mov	r1, r3
 1003318:	ebfffbae 	bl	10021d8 <deque_remove_at>
    deque_remove_at(iter->d2, iter->index - 1, out2);
 100331c:	e5941008 	ldr	r1, [r4, #8]
 1003320:	e1a02006 	mov	r2, r6
 1003324:	e5940004 	ldr	r0, [r4, #4]
 1003328:	e2411001 	sub	r1, r1, #1
 100332c:	ebfffba9 	bl	10021d8 <deque_remove_at>

    iter->index--;
 1003330:	e5943008 	ldr	r3, [r4, #8]
    iter->last_removed = true;
 1003334:	e3a02001 	mov	r2, #1

    return CC_OK;
 1003338:	e1a00005 	mov	r0, r5
    iter->last_removed = true;
 100333c:	e5c4200c 	strb	r2, [r4, #12]
    iter->index--;
 1003340:	e2433001 	sub	r3, r3, #1
 1003344:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 1003348:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_OUT_OF_RANGE;
 100334c:	e3a00008 	mov	r0, #8
}
 1003350:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1003354:	e3a00007 	mov	r0, #7
 1003358:	e8bd8070 	pop	{r4, r5, r6, pc}

0100335c <deque_zip_iter_replace>:
 * @param[out] out2 Output of the replaced element from the second deque
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat deque_zip_iter_replace(DequeZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
 100335c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if ((iter->index - 1) >= iter->d1->size || (iter->index - 1) >= iter->d2->size)
 1003360:	e590e000 	ldr	lr, [r0]
 1003364:	e590c008 	ldr	ip, [r0, #8]
 1003368:	e59e4000 	ldr	r4, [lr]
 100336c:	e24cc001 	sub	ip, ip, #1
 1003370:	e15c0004 	cmp	ip, r4
 1003374:	2a000027 	bcs	1003418 <deque_zip_iter_replace+0xbc>
 1003378:	e5904004 	ldr	r4, [r0, #4]
 100337c:	e5944000 	ldr	r4, [r4]
 1003380:	e15c0004 	cmp	ip, r4
 1003384:	2a000023 	bcs	1003418 <deque_zip_iter_replace+0xbc>
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1003388:	e59e4008 	ldr	r4, [lr, #8]
    if (out)
 100338c:	e3530000 	cmp	r3, #0
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1003390:	e59e5004 	ldr	r5, [lr, #4]
 1003394:	e59e7010 	ldr	r7, [lr, #16]
 1003398:	e08c4004 	add	r4, ip, r4
 100339c:	e2455001 	sub	r5, r5, #1
 10033a0:	e0044005 	and	r4, r4, r5
 10033a4:	e1a06104 	lsl	r6, r4, #2
        *out = deque->buffer[i];
 10033a8:	17974104 	ldrne	r4, [r7, r4, lsl #2]
 10033ac:	e0875006 	add	r5, r7, r6
 10033b0:	15834000 	strne	r4, [r3]
 10033b4:	159e5010 	ldrne	r5, [lr, #16]
 10033b8:	10855006 	addne	r5, r5, r6
    deque->buffer[i] = element;
 10033bc:	e5851000 	str	r1, [r5]
        return CC_ERR_OUT_OF_RANGE;

    deque_replace_at(iter->d1, e1, iter->index - 1, out1);
    deque_replace_at(iter->d2, e2, iter->index - 1, out2);
 10033c0:	e5903004 	ldr	r3, [r0, #4]
    if (index >= deque->size)
 10033c4:	e5931000 	ldr	r1, [r3]
 10033c8:	e15c0001 	cmp	ip, r1
 10033cc:	2a000013 	bcs	1003420 <deque_zip_iter_replace+0xc4>
    if (out)
 10033d0:	e59d1014 	ldr	r1, [sp, #20]
    size_t i = (deque->first + index) & (deque->capacity - 1);
 10033d4:	e5930008 	ldr	r0, [r3, #8]
 10033d8:	e593e010 	ldr	lr, [r3, #16]
    if (out)
 10033dc:	e3510000 	cmp	r1, #0
    size_t i = (deque->first + index) & (deque->capacity - 1);
 10033e0:	e5931004 	ldr	r1, [r3, #4]
 10033e4:	e08cc000 	add	ip, ip, r0
 10033e8:	e2411001 	sub	r1, r1, #1
 10033ec:	e00cc001 	and	ip, ip, r1
 10033f0:	e1a0010c 	lsl	r0, ip, #2
 10033f4:	e08e1000 	add	r1, lr, r0
        *out = deque->buffer[i];
 10033f8:	179e110c 	ldrne	r1, [lr, ip, lsl #2]
 10033fc:	159dc014 	ldrne	ip, [sp, #20]
 1003400:	158c1000 	strne	r1, [ip]
 1003404:	15931010 	ldrne	r1, [r3, #16]
 1003408:	10811000 	addne	r1, r1, r0

    return CC_OK;
 100340c:	e3a00000 	mov	r0, #0
    deque->buffer[i] = element;
 1003410:	e5812000 	str	r2, [r1]
    return CC_OK;
 1003414:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ERR_OUT_OF_RANGE;
 1003418:	e3a00008 	mov	r0, #8
 100341c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    return CC_OK;
 1003420:	e3a00000 	mov	r0, #0
}
 1003424:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

01003428 <deque_zip_iter_index>:
 *
 * @return current iterator index
 */
size_t deque_zip_iter_index(DequeZipIter *iter)
{
    return iter->index - 1;
 1003428:	e5900008 	ldr	r0, [r0, #8]
}
 100342c:	e2400001 	sub	r0, r0, #1
 1003430:	e12fff1e 	bx	lr

01003434 <hashset_conf_init>:
 *
 * @param[in, out] conf the configuration struct that is being initialized
 */
void hashset_conf_init(HashSetConf *conf)
{
    hashtable_conf_init(conf);
 1003434:	ea0000e1 	b	10037c0 <hashtable_conf_init>

01003438 <hashset_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new HashSet failed.
 */
enum cc_stat hashset_new(HashSet **hs)
{
 1003438:	e92d4070 	push	{r4, r5, r6, lr}
 100343c:	e24dd028 	sub	sp, sp, #40	; 0x28
 1003440:	e1a06000 	mov	r6, r0
    hashtable_conf_init(conf);
 1003444:	e28d0004 	add	r0, sp, #4
 1003448:	eb0000dc 	bl	10037c0 <hashtable_conf_init>
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new HashSet structure failed.
 */
enum cc_stat hashset_new_conf(HashSetConf const * const conf, HashSet **hs)
{
    HashSet *set = conf->mem_calloc(1, sizeof(HashSet));
 100344c:	e59d3020 	ldr	r3, [sp, #32]
 1003450:	e3a01014 	mov	r1, #20
 1003454:	e3a00001 	mov	r0, #1
 1003458:	e12fff33 	blx	r3

    if (!set)
 100345c:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 1003460:	03a05001 	moveq	r5, #1
    if (!set)
 1003464:	0a00000d 	beq	10034a0 <hashset_new+0x68>

    HashTable *table;
    enum cc_stat stat = hashtable_new_conf(conf, &table);
 1003468:	e28d0004 	add	r0, sp, #4
 100346c:	e1a0100d 	mov	r1, sp
 1003470:	eb000097 	bl	10036d4 <hashtable_new_conf>

    if (stat != CC_OK) {
 1003474:	e2505000 	subs	r5, r0, #0
 1003478:	1a00000b 	bne	10034ac <hashset_new+0x74>
        conf->mem_free(set);
        return stat;
    }

    set->table      = table;
 100347c:	e59d2000 	ldr	r2, [sp]
    set->mem_calloc = conf->mem_calloc;
    set->mem_free   = conf->mem_free;

    /* A dummy pointer that is never actually dereferenced
    *  that must not be null.*/
    set->dummy = (int*) 1;
 1003480:	e3a03001 	mov	r3, #1
    set->mem_calloc = conf->mem_calloc;
 1003484:	e1cd01dc 	ldrd	r0, [sp, #28]
    set->table      = table;
 1003488:	e5842000 	str	r2, [r4]
    set->mem_free   = conf->mem_free;
 100348c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    set->mem_calloc = conf->mem_calloc;
 1003490:	e1c400f8 	strd	r0, [r4, #8]
    set->dummy = (int*) 1;
 1003494:	e5843004 	str	r3, [r4, #4]
    set->mem_free   = conf->mem_free;
 1003498:	e5842010 	str	r2, [r4, #16]
    *hs = set;
 100349c:	e5864000 	str	r4, [r6]
}
 10034a0:	e1a00005 	mov	r0, r5
 10034a4:	e28dd028 	add	sp, sp, #40	; 0x28
 10034a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(set);
 10034ac:	e1a00004 	mov	r0, r4
 10034b0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 10034b4:	e12fff33 	blx	r3
}
 10034b8:	e1a00005 	mov	r0, r5
 10034bc:	e28dd028 	add	sp, sp, #40	; 0x28
 10034c0:	e8bd8070 	pop	{r4, r5, r6, pc}

010034c4 <hashset_new_conf>:
{
 10034c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10034c8:	e1a04000 	mov	r4, r0
    HashSet *set = conf->mem_calloc(1, sizeof(HashSet));
 10034cc:	e590301c 	ldr	r3, [r0, #28]
{
 10034d0:	e24dd00c 	sub	sp, sp, #12
 10034d4:	e1a07001 	mov	r7, r1
    HashSet *set = conf->mem_calloc(1, sizeof(HashSet));
 10034d8:	e3a00001 	mov	r0, #1
 10034dc:	e3a01014 	mov	r1, #20
 10034e0:	e12fff33 	blx	r3
    if (!set)
 10034e4:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 10034e8:	03a06001 	moveq	r6, #1
    if (!set)
 10034ec:	0a00000d 	beq	1003528 <hashset_new_conf+0x64>
    enum cc_stat stat = hashtable_new_conf(conf, &table);
 10034f0:	e28d1004 	add	r1, sp, #4
 10034f4:	e1a00004 	mov	r0, r4
 10034f8:	eb000075 	bl	10036d4 <hashtable_new_conf>
    if (stat != CC_OK) {
 10034fc:	e2506000 	subs	r6, r0, #0
 1003500:	1a00000b 	bne	1003534 <hashset_new_conf+0x70>
    set->mem_calloc = conf->mem_calloc;
 1003504:	e1c401d8 	ldrd	r0, [r4, #24]
    set->dummy = (int*) 1;
 1003508:	e3a03001 	mov	r3, #1
    set->mem_free   = conf->mem_free;
 100350c:	e5942020 	ldr	r2, [r4, #32]
    set->table      = table;
 1003510:	e59dc004 	ldr	ip, [sp, #4]
    set->mem_calloc = conf->mem_calloc;
 1003514:	e1c500f8 	strd	r0, [r5, #8]
    set->mem_free   = conf->mem_free;
 1003518:	e5852010 	str	r2, [r5, #16]
    set->table      = table;
 100351c:	e585c000 	str	ip, [r5]
    set->dummy = (int*) 1;
 1003520:	e5853004 	str	r3, [r5, #4]
    *hs = set;
 1003524:	e5875000 	str	r5, [r7]
    return CC_OK;
}
 1003528:	e1a00006 	mov	r0, r6
 100352c:	e28dd00c 	add	sp, sp, #12
 1003530:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        conf->mem_free(set);
 1003534:	e1a00005 	mov	r0, r5
 1003538:	e5943020 	ldr	r3, [r4, #32]
 100353c:	e12fff33 	blx	r3
}
 1003540:	e1a00006 	mov	r0, r6
 1003544:	e28dd00c 	add	sp, sp, #12
 1003548:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0100354c <hashset_destroy>:
 * it holds.
 *
 * @param[in] table HashSet to be destroyed.
 */
void hashset_destroy(HashSet *set)
{
 100354c:	e92d4010 	push	{r4, lr}
 1003550:	e1a04000 	mov	r4, r0
    hashtable_destroy(set->table);
 1003554:	e5900000 	ldr	r0, [r0]
 1003558:	eb0000b0 	bl	1003820 <hashtable_destroy>
    set->mem_free(set);
 100355c:	e5943010 	ldr	r3, [r4, #16]
 1003560:	e1a00004 	mov	r0, r4
}
 1003564:	e8bd4010 	pop	{r4, lr}
    set->mem_free(set);
 1003568:	e12fff13 	bx	r3

0100356c <hashset_add>:
 * @return CC_OK if the element was successfully added, or CC_ERR_ALLOC
 * if the memory allocation failed.
 */
enum cc_stat hashset_add(HashSet *set, void *element)
{
    return hashtable_add(set->table, element, set->dummy);
 100356c:	e8900005 	ldm	r0, {r0, r2}
 1003570:	ea0000c5 	b	100388c <hashtable_add>

01003574 <hashset_remove>:
 * @return CC_OK if the element was successfully removed, or CC_ERR_VALUE_NOT_FOUND
 * if the value was not found.
 */
enum cc_stat hashset_remove(HashSet *set, void *element, void **out)
{
    return hashtable_remove(set->table, element, out);
 1003574:	e5900000 	ldr	r0, [r0]
 1003578:	ea000175 	b	1003b54 <hashtable_remove>

0100357c <hashset_remove_all>:
 *
 * @param set the set from which all elements are being removed
 */
void hashset_remove_all(HashSet *set)
{
    hashtable_remove_all(set->table);
 100357c:	e5900000 	ldr	r0, [r0]
 1003580:	ea0001d0 	b	1003cc8 <hashtable_remove_all>

01003584 <hashset_contains>:
 *
 * @return true if the specified element is an element of the set
 */
bool hashset_contains(HashSet *set, void *element)
{
    return hashtable_contains_key(set->table, element);
 1003584:	e5900000 	ldr	r0, [r0]
 1003588:	ea0001ef 	b	1003d4c <hashtable_contains_key>

0100358c <hashset_size>:
 *
 * @return the size of the set
 */
size_t hashset_size(HashSet *set)
{
    return hashtable_size(set->table);
 100358c:	e5900000 	ldr	r0, [r0]
 1003590:	ea0001e9 	b	1003d3c <hashtable_size>

01003594 <hashset_capacity>:
 *
 * @return the capacity of the set
 */
size_t hashset_capacity(HashSet *set)
{
    return hashtable_capacity(set->table);
 1003594:	e5900000 	ldr	r0, [r0]
 1003598:	ea0001e9 	b	1003d44 <hashtable_capacity>

0100359c <hashset_foreach>:
 * @param[in] fn the operation function that is invoked on each element of the
 *               set
 */
void hashset_foreach(HashSet *set, void (*fn) (const void *e))
{
    hashtable_foreach_key(set->table, fn);
 100359c:	e5900000 	ldr	r0, [r0]
 10035a0:	ea000268 	b	1003f48 <hashtable_foreach_key>

010035a4 <hashset_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] set the set on which this iterator will operate
 */
void hashset_iter_init(HashSetIter *iter, HashSet *set)
{
    hashtable_iter_init(&(iter->iter), set->table);
 10035a4:	e5911000 	ldr	r1, [r1]
 10035a8:	ea000290 	b	1003ff0 <hashtable_iter_init>

010035ac <hashset_iter_next>:
 *
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the HashSet has been reached.
 */
enum cc_stat hashset_iter_next(HashSetIter *iter, void **out)
{
 10035ac:	e92d4010 	push	{r4, lr}
 10035b0:	e24dd008 	sub	sp, sp, #8
 10035b4:	e1a04001 	mov	r4, r1
    TableEntry *entry;
    enum cc_stat status = hashtable_iter_next(&(iter->iter), &entry);
 10035b8:	e28d1004 	add	r1, sp, #4
 10035bc:	eb0002a3 	bl	1004050 <hashtable_iter_next>

    if (status != CC_OK)
 10035c0:	e3500000 	cmp	r0, #0
 10035c4:	1a000003 	bne	10035d8 <hashset_iter_next+0x2c>
        return status;

    if (out)
 10035c8:	e3540000 	cmp	r4, #0
        *out = entry->key;
 10035cc:	159d3004 	ldrne	r3, [sp, #4]
 10035d0:	15933000 	ldrne	r3, [r3]
 10035d4:	15843000 	strne	r3, [r4]

    return CC_OK;
}
 10035d8:	e28dd008 	add	sp, sp, #8
 10035dc:	e8bd8010 	pop	{r4, pc}

010035e0 <hashset_iter_remove>:
 * @return CC_OK if the entry was successfully removed, or
 * CC_ERR_VALUE_NOT_FOUND.
 */
enum cc_stat hashset_iter_remove(HashSetIter *iter, void **out)
{
    return hashtable_iter_remove(&(iter->iter), out);
 10035e0:	ea0002bf 	b	10040e4 <hashtable_iter_remove>

010035e4 <hashtable_hash_string>:
{
    const    char   *str  = key;
    register size_t  hash = seed + 5381 + len + 1; /* Suppress the unused param warning */

    int c;
    while ((c = *str++))
 10035e4:	e4d03001 	ldrb	r3, [r0], #1
    register size_t  hash = seed + 5381 + len + 1; /* Suppress the unused param warning */
 10035e8:	e2822c15 	add	r2, r2, #5376	; 0x1500
 10035ec:	e2822006 	add	r2, r2, #6
 10035f0:	e0821001 	add	r1, r2, r1
    while ((c = *str++))
 10035f4:	e3530000 	cmp	r3, #0
 10035f8:	0a000004 	beq	1003610 <hashtable_hash_string+0x2c>
        hash = ((hash << 5) + hash) ^ c;
 10035fc:	e0811281 	add	r1, r1, r1, lsl #5
 1003600:	e0211003 	eor	r1, r1, r3
    while ((c = *str++))
 1003604:	e4d03001 	ldrb	r3, [r0], #1
 1003608:	e3530000 	cmp	r3, #0
 100360c:	1afffffa 	bne	10035fc <hashtable_hash_string+0x18>

    return hash;
}
 1003610:	e1a00001 	mov	r0, r1
 1003614:	e12fff1e 	bx	lr

01003618 <hashtable_new>:
{
 1003618:	e92d4070 	push	{r4, r5, r6, lr}
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 100361c:	e3a01030 	mov	r1, #48	; 0x30
{
 1003620:	e1a05000 	mov	r5, r0
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 1003624:	e3a00001 	mov	r0, #1
 1003628:	fa006162 	blx	101bbb8 <calloc>
    if (!table)
 100362c:	e2504000 	subs	r4, r0, #0
 1003630:	0a000021 	beq	10036bc <hashtable_new+0xa4>
    table->capacity = round_pow_two(conf->initial_capacity);
 1003634:	e3a01010 	mov	r1, #16
 1003638:	e5841000 	str	r1, [r4]
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 100363c:	e1a00001 	mov	r0, r1
 1003640:	fa00615c 	blx	101bbb8 <calloc>
    if (!table->buckets) {
 1003644:	e3500000 	cmp	r0, #0
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 1003648:	e5840018 	str	r0, [r4, #24]
    if (!table->buckets) {
 100364c:	0a00001c 	beq	10036c4 <hashtable_new+0xac>
    table->hash        = conf->hash;
 1003650:	e30335e4 	movw	r3, #13796	; 0x35e4
    table->key_cmp     = conf->key_compare;
 1003654:	e301ca90 	movw	ip, #6800	; 0x1a90
    table->hash        = conf->hash;
 1003658:	e3403100 	movt	r3, #256	; 0x100
    table->key_cmp     = conf->key_compare;
 100365c:	e340c100 	movt	ip, #256	; 0x100
    table->mem_alloc   = conf->mem_alloc;
 1003660:	e30c07b9 	movw	r0, #51129	; 0xc7b9
    table->mem_calloc  = conf->mem_calloc;
 1003664:	e30b1bb9 	movw	r1, #48057	; 0xbbb9
    table->mem_free    = conf->mem_free;
 1003668:	e30c27c9 	movw	r2, #51145	; 0xc7c9
    table->mem_alloc   = conf->mem_alloc;
 100366c:	e3400101 	movt	r0, #257	; 0x101
    table->mem_calloc  = conf->mem_calloc;
 1003670:	e3401101 	movt	r1, #257	; 0x101
    *out = table;
 1003674:	e5854000 	str	r4, [r5]
    table->mem_free    = conf->mem_free;
 1003678:	e3402101 	movt	r2, #257	; 0x101
    table->hash        = conf->hash;
 100367c:	e584301c 	str	r3, [r4, #28]
    table->load_factor = conf->load_factor;
 1003680:	e3a055fd 	mov	r5, #1061158912	; 0x3f400000
    table->hash_seed   = conf->hash_seed;
 1003684:	e3a03000 	mov	r3, #0
    table->key_cmp     = conf->key_compare;
 1003688:	e584c020 	str	ip, [r4, #32]
    table->key_len     = conf->key_length;
 100368c:	e3e0e000 	mvn	lr, #0
    table->threshold   = table->capacity * table->load_factor;
 1003690:	e3a0c00c 	mov	ip, #12
    table->mem_alloc   = conf->mem_alloc;
 1003694:	e5840024 	str	r0, [r4, #36]	; 0x24
    table->mem_calloc  = conf->mem_calloc;
 1003698:	e5841028 	str	r1, [r4, #40]	; 0x28
    return CC_OK;
 100369c:	e1a00003 	mov	r0, r3
    table->mem_free    = conf->mem_free;
 10036a0:	e584202c 	str	r2, [r4, #44]	; 0x2c
    table->load_factor = conf->load_factor;
 10036a4:	e5845014 	str	r5, [r4, #20]
    table->hash_seed   = conf->hash_seed;
 10036a8:	e584300c 	str	r3, [r4, #12]
    table->size        = 0;
 10036ac:	e5843004 	str	r3, [r4, #4]
    table->key_len     = conf->key_length;
 10036b0:	e584e010 	str	lr, [r4, #16]
    table->threshold   = table->capacity * table->load_factor;
 10036b4:	e584c008 	str	ip, [r4, #8]
    return CC_OK;
 10036b8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10036bc:	e3a00001 	mov	r0, #1
}
 10036c0:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 10036c4:	e1a00004 	mov	r0, r4
 10036c8:	fa00643e 	blx	101c7c8 <free>
        return CC_ERR_ALLOC;
 10036cc:	e3a00001 	mov	r0, #1
 10036d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010036d4 <hashtable_new_conf>:
{
 10036d4:	e92d4070 	push	{r4, r5, r6, lr}
 10036d8:	e1a06000 	mov	r6, r0
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 10036dc:	e590301c 	ldr	r3, [r0, #28]
{
 10036e0:	e1a04001 	mov	r4, r1
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 10036e4:	e3a00001 	mov	r0, #1
 10036e8:	e3a01030 	mov	r1, #48	; 0x30
 10036ec:	e12fff33 	blx	r3
    if (!table)
 10036f0:	e2505000 	subs	r5, r0, #0
 10036f4:	0a00002a 	beq	10037a4 <hashtable_new_conf+0xd0>
    table->capacity = round_pow_two(conf->initial_capacity);
 10036f8:	e5963004 	ldr	r3, [r6, #4]
    if (n >= MAX_POW_TWO)
 10036fc:	e3530000 	cmp	r3, #0
        return MAX_POW_TWO;
 1003700:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    if (n >= MAX_POW_TWO)
 1003704:	ba000007 	blt	1003728 <hashtable_new_conf+0x54>
    n--;
 1003708:	12430001 	subne	r0, r3, #1
        return 2;
 100370c:	03a00002 	moveq	r0, #2
    n |= n >> 1;
 1003710:	118000a0 	orrne	r0, r0, r0, lsr #1
    n |= n >> 2;
 1003714:	11800120 	orrne	r0, r0, r0, lsr #2
    n |= n >> 4;
 1003718:	11800220 	orrne	r0, r0, r0, lsr #4
    n |= n >> 8;
 100371c:	11800420 	orrne	r0, r0, r0, lsr #8
    n |= n >> 16;
 1003720:	11800820 	orrne	r0, r0, r0, lsr #16
    n++;
 1003724:	12800001 	addne	r0, r0, #1
    table->capacity = round_pow_two(conf->initial_capacity);
 1003728:	e5850000 	str	r0, [r5]
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 100372c:	e3a01010 	mov	r1, #16
 1003730:	e596301c 	ldr	r3, [r6, #28]
 1003734:	e12fff33 	blx	r3
    if (!table->buckets) {
 1003738:	e3500000 	cmp	r0, #0
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 100373c:	e5850018 	str	r0, [r5, #24]
    if (!table->buckets) {
 1003740:	0a000019 	beq	10037ac <hashtable_new_conf+0xd8>
    table->threshold   = table->capacity * table->load_factor;
 1003744:	edd57a00 	vldr	s15, [r5]
    table->size        = 0;
 1003748:	e3a03000 	mov	r3, #0
    table->load_factor = conf->load_factor;
 100374c:	ed967a00 	vldr	s14, [r6]
    return CC_OK;
 1003750:	e1a00003 	mov	r0, r3
    table->hash        = conf->hash;
 1003754:	e5962010 	ldr	r2, [r6, #16]
    table->key_cmp     = conf->key_compare;
 1003758:	e5961014 	ldr	r1, [r6, #20]
    table->threshold   = table->capacity * table->load_factor;
 100375c:	eef87a67 	vcvt.f32.u32	s15, s15
    table->hash        = conf->hash;
 1003760:	e585201c 	str	r2, [r5, #28]
    table->hash_seed   = conf->hash_seed;
 1003764:	e596200c 	ldr	r2, [r6, #12]
    table->key_cmp     = conf->key_compare;
 1003768:	e5851020 	str	r1, [r5, #32]
    table->threshold   = table->capacity * table->load_factor;
 100376c:	ee677a87 	vmul.f32	s15, s15, s14
    table->hash_seed   = conf->hash_seed;
 1003770:	e585200c 	str	r2, [r5, #12]
    table->key_len     = conf->key_length;
 1003774:	e5962008 	ldr	r2, [r6, #8]
    table->mem_alloc   = conf->mem_alloc;
 1003778:	e5961018 	ldr	r1, [r6, #24]
    table->threshold   = table->capacity * table->load_factor;
 100377c:	eefc7ae7 	vcvt.u32.f32	s15, s15
    table->size        = 0;
 1003780:	e5853004 	str	r3, [r5, #4]
    table->key_len     = conf->key_length;
 1003784:	e5852010 	str	r2, [r5, #16]
    table->mem_free    = conf->mem_free;
 1003788:	e1c621dc 	ldrd	r2, [r6, #28]
    table->load_factor = conf->load_factor;
 100378c:	ed857a05 	vstr	s14, [r5, #20]
    table->mem_alloc   = conf->mem_alloc;
 1003790:	e5851024 	str	r1, [r5, #36]	; 0x24
    table->threshold   = table->capacity * table->load_factor;
 1003794:	edc57a02 	vstr	s15, [r5, #8]
    table->mem_free    = conf->mem_free;
 1003798:	e1c522f8 	strd	r2, [r5, #40]	; 0x28
    *out = table;
 100379c:	e5845000 	str	r5, [r4]
    return CC_OK;
 10037a0:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10037a4:	e3a00001 	mov	r0, #1
}
 10037a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 10037ac:	e1a00005 	mov	r0, r5
 10037b0:	e5963020 	ldr	r3, [r6, #32]
 10037b4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10037b8:	e3a00001 	mov	r0, #1
 10037bc:	e8bd8070 	pop	{r4, r5, r6, pc}

010037c0 <hashtable_conf_init>:
    conf->hash             = STRING_HASH;
 10037c0:	e30335e4 	movw	r3, #13796	; 0x35e4
    conf->key_compare      = cc_common_cmp_str;
 10037c4:	e301ca90 	movw	ip, #6800	; 0x1a90
    conf->hash             = STRING_HASH;
 10037c8:	e3403100 	movt	r3, #256	; 0x100
    conf->key_compare      = cc_common_cmp_str;
 10037cc:	e340c100 	movt	ip, #256	; 0x100
{
 10037d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    conf->mem_alloc        = malloc;
 10037d4:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    conf->load_factor      = DEFAULT_LOAD_FACTOR;
 10037d8:	e3a0e5fd 	mov	lr, #1061158912	; 0x3f400000
    conf->mem_calloc       = calloc;
 10037dc:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_alloc        = malloc;
 10037e0:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc       = calloc;
 10037e4:	e3402101 	movt	r2, #257	; 0x101
    conf->hash             = STRING_HASH;
 10037e8:	e5803010 	str	r3, [r0, #16]
    conf->mem_free         = free;
 10037ec:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    conf->key_compare      = cc_common_cmp_str;
 10037f0:	e580c014 	str	ip, [r0, #20]
    conf->initial_capacity = DEFAULT_CAPACITY;
 10037f4:	e3a0c010 	mov	ip, #16
    conf->mem_free         = free;
 10037f8:	e3403101 	movt	r3, #257	; 0x101
    conf->load_factor      = DEFAULT_LOAD_FACTOR;
 10037fc:	e580e000 	str	lr, [r0]
    conf->initial_capacity = DEFAULT_CAPACITY;
 1003800:	e580c004 	str	ip, [r0, #4]
    conf->key_length       = KEY_LENGTH_VARIABLE;
 1003804:	e3e0e000 	mvn	lr, #0
    conf->hash_seed        = 0;
 1003808:	e3a0c000 	mov	ip, #0
    conf->key_length       = KEY_LENGTH_VARIABLE;
 100380c:	e580e008 	str	lr, [r0, #8]
    conf->hash_seed        = 0;
 1003810:	e580c00c 	str	ip, [r0, #12]
    conf->mem_alloc        = malloc;
 1003814:	e5801018 	str	r1, [r0, #24]
    conf->mem_free         = free;
 1003818:	e1c021fc 	strd	r2, [r0, #28]
}
 100381c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01003820 <hashtable_destroy>:
    for (i = 0; i < table->capacity; i++) {
 1003820:	e5902000 	ldr	r2, [r0]
{
 1003824:	e92d4070 	push	{r4, r5, r6, lr}
 1003828:	e1a05000 	mov	r5, r0
 100382c:	e5903018 	ldr	r3, [r0, #24]
    for (i = 0; i < table->capacity; i++) {
 1003830:	e3520000 	cmp	r2, #0
 1003834:	0a00000d 	beq	1003870 <hashtable_destroy+0x50>
 1003838:	e3a06000 	mov	r6, #0
        TableEntry *next = table->buckets[i];
 100383c:	e7930106 	ldr	r0, [r3, r6, lsl #2]
        while (next) {
 1003840:	e3500000 	cmp	r0, #0
 1003844:	0a000006 	beq	1003864 <hashtable_destroy+0x44>
            TableEntry *tmp = next->next;
 1003848:	e590400c 	ldr	r4, [r0, #12]
            table->mem_free(next);
 100384c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
 1003850:	e12fff33 	blx	r3
        while (next) {
 1003854:	e2540000 	subs	r0, r4, #0
 1003858:	1afffffa 	bne	1003848 <hashtable_destroy+0x28>
 100385c:	e5952000 	ldr	r2, [r5]
 1003860:	e5953018 	ldr	r3, [r5, #24]
    for (i = 0; i < table->capacity; i++) {
 1003864:	e2866001 	add	r6, r6, #1
 1003868:	e1560002 	cmp	r6, r2
 100386c:	3afffff2 	bcc	100383c <hashtable_destroy+0x1c>
    table->mem_free(table->buckets);
 1003870:	e1a00003 	mov	r0, r3
 1003874:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
 1003878:	e12fff33 	blx	r3
    table->mem_free(table);
 100387c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
 1003880:	e1a00005 	mov	r0, r5
}
 1003884:	e8bd4070 	pop	{r4, r5, r6, lr}
    table->mem_free(table);
 1003888:	e12fff13 	bx	r3

0100388c <hashtable_add>:
{
 100388c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1003890:	e1a05001 	mov	r5, r1
    if (table->size >= table->threshold) {
 1003894:	e5903008 	ldr	r3, [r0, #8]
{
 1003898:	e1a07000 	mov	r7, r0
 100389c:	e1a06002 	mov	r6, r2
    if (table->size >= table->threshold) {
 10038a0:	e5901004 	ldr	r1, [r0, #4]
 10038a4:	e1510003 	cmp	r1, r3
 10038a8:	2a00002a 	bcs	1003958 <hashtable_add+0xcc>
    if (!key)
 10038ac:	e3550000 	cmp	r5, #0
 10038b0:	0a000055 	beq	1003a0c <hashtable_add+0x180>
    const size_t hash = table->hash(key, table->key_len, table->hash_seed);
 10038b4:	e597301c 	ldr	r3, [r7, #28]
 10038b8:	e1a00005 	mov	r0, r5
 10038bc:	e597200c 	ldr	r2, [r7, #12]
 10038c0:	e5971010 	ldr	r1, [r7, #16]
 10038c4:	e12fff33 	blx	r3
    const size_t i    = hash & (table->capacity - 1);
 10038c8:	e5978000 	ldr	r8, [r7]
    const size_t hash = table->hash(key, table->key_len, table->hash_seed);
 10038cc:	e1a09000 	mov	r9, r0
    TableEntry *replace = table->buckets[i];
 10038d0:	e5973018 	ldr	r3, [r7, #24]
    const size_t i    = hash & (table->capacity - 1);
 10038d4:	e2488001 	sub	r8, r8, #1
 10038d8:	e0088000 	and	r8, r8, r0
    TableEntry *replace = table->buckets[i];
 10038dc:	e7934108 	ldr	r4, [r3, r8, lsl #2]
    while (replace) {
 10038e0:	e3540000 	cmp	r4, #0
 10038e4:	0a00000a 	beq	1003914 <hashtable_add+0x88>
        void *rk = replace->key;
 10038e8:	e5943000 	ldr	r3, [r4]
        if (rk && table->key_cmp(rk, key) == 0) {
 10038ec:	e1a01005 	mov	r1, r5
 10038f0:	e2530000 	subs	r0, r3, #0
 10038f4:	0a000003 	beq	1003908 <hashtable_add+0x7c>
 10038f8:	e5973020 	ldr	r3, [r7, #32]
 10038fc:	e12fff33 	blx	r3
 1003900:	e3500000 	cmp	r0, #0
 1003904:	0a00003c 	beq	10039fc <hashtable_add+0x170>
        replace = replace->next;
 1003908:	e594400c 	ldr	r4, [r4, #12]
    while (replace) {
 100390c:	e3540000 	cmp	r4, #0
 1003910:	1afffff4 	bne	10038e8 <hashtable_add+0x5c>
    TableEntry *new_entry = table->mem_alloc(sizeof(TableEntry));
 1003914:	e5973024 	ldr	r3, [r7, #36]	; 0x24
 1003918:	e3a00010 	mov	r0, #16
 100391c:	e12fff33 	blx	r3
    if (!new_entry)
 1003920:	e2503000 	subs	r3, r0, #0
 1003924:	0a000036 	beq	1003a04 <hashtable_add+0x178>
    new_entry->next  = table->buckets[i];
 1003928:	e5971018 	ldr	r1, [r7, #24]
    return CC_OK;
 100392c:	e3a00000 	mov	r0, #0
    table->size++;
 1003930:	e5972004 	ldr	r2, [r7, #4]
    new_entry->key   = key;
 1003934:	e5835000 	str	r5, [r3]
    new_entry->value = val;
 1003938:	e5836004 	str	r6, [r3, #4]
    new_entry->next  = table->buckets[i];
 100393c:	e791c108 	ldr	ip, [r1, r8, lsl #2]
    table->size++;
 1003940:	e2822001 	add	r2, r2, #1
    new_entry->hash  = hash;
 1003944:	e5839008 	str	r9, [r3, #8]
    new_entry->next  = table->buckets[i];
 1003948:	e583c00c 	str	ip, [r3, #12]
    table->buckets[i] = new_entry;
 100394c:	e7813108 	str	r3, [r1, r8, lsl #2]
    table->size++;
 1003950:	e5872004 	str	r2, [r7, #4]
    return CC_OK;
 1003954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        if ((stat = resize(table, table->capacity << 1)) != CC_OK)
 1003958:	e5904000 	ldr	r4, [r0]
    if (t->capacity == MAX_POW_TWO)
 100395c:	e3540102 	cmp	r4, #-2147483648	; 0x80000000
        if ((stat = resize(table, table->capacity << 1)) != CC_OK)
 1003960:	e1a04084 	lsl	r4, r4, #1
    if (t->capacity == MAX_POW_TWO)
 1003964:	0a000048 	beq	1003a8c <hashtable_add+0x200>
    TableEntry **new_buckets = t->mem_calloc(new_capacity, sizeof(TableEntry));
 1003968:	e5903028 	ldr	r3, [r0, #40]	; 0x28
 100396c:	e3a01010 	mov	r1, #16
 1003970:	e1a00004 	mov	r0, r4
 1003974:	e12fff33 	blx	r3
    if (!new_buckets)
 1003978:	e250c000 	subs	ip, r0, #0
 100397c:	0a000020 	beq	1003a04 <hashtable_add+0x178>
    move_entries(old_buckets, new_buckets, t->capacity, new_capacity);
 1003980:	e597a000 	ldr	sl, [r7]
    TableEntry **old_buckets = t->buckets;
 1003984:	e5970018 	ldr	r0, [r7, #24]
    for (i = 0; i < src_size; i++) {
 1003988:	e35a0000 	cmp	sl, #0
 100398c:	11a09000 	movne	r9, r0
 1003990:	12448001 	subne	r8, r4, #1
 1003994:	1080a10a 	addne	sl, r0, sl, lsl #2
 1003998:	0a00000c 	beq	10039d0 <hashtable_add+0x144>
        TableEntry *entry = src_bucket[i];
 100399c:	e4993004 	ldr	r3, [r9], #4
        while (entry) {
 10039a0:	e3530000 	cmp	r3, #0
 10039a4:	0a000007 	beq	10039c8 <hashtable_add+0x13c>
            size_t      index = entry->hash & (dest_size - 1);
 10039a8:	e5932008 	ldr	r2, [r3, #8]
            TableEntry *next  = entry->next;
 10039ac:	e593100c 	ldr	r1, [r3, #12]
            size_t      index = entry->hash & (dest_size - 1);
 10039b0:	e0022008 	and	r2, r2, r8
            entry->next = dest_bucket[index];
 10039b4:	e79ce102 	ldr	lr, [ip, r2, lsl #2]
 10039b8:	e583e00c 	str	lr, [r3, #12]
            dest_bucket[index] = entry;
 10039bc:	e78c3102 	str	r3, [ip, r2, lsl #2]
        while (entry) {
 10039c0:	e2513000 	subs	r3, r1, #0
 10039c4:	1afffff7 	bne	10039a8 <hashtable_add+0x11c>
    for (i = 0; i < src_size; i++) {
 10039c8:	e159000a 	cmp	r9, sl
 10039cc:	1afffff2 	bne	100399c <hashtable_add+0x110>
    t->threshold = t->load_factor * new_capacity;
 10039d0:	ee074a90 	vmov	s15, r4
 10039d4:	ed977a05 	vldr	s14, [r7, #20]
 10039d8:	eef87a67 	vcvt.f32.u32	s15, s15
    t->buckets   = new_buckets;
 10039dc:	e587c018 	str	ip, [r7, #24]
    t->capacity  = new_capacity;
 10039e0:	e5874000 	str	r4, [r7]
    t->mem_free(old_buckets);
 10039e4:	e597302c 	ldr	r3, [r7, #44]	; 0x2c
    t->threshold = t->load_factor * new_capacity;
 10039e8:	ee677a87 	vmul.f32	s15, s15, s14
 10039ec:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10039f0:	edc77a02 	vstr	s15, [r7, #8]
    t->mem_free(old_buckets);
 10039f4:	e12fff33 	blx	r3
    return CC_OK;
 10039f8:	eaffffab 	b	10038ac <hashtable_add+0x20>
            replace->value = val;
 10039fc:	e5846004 	str	r6, [r4, #4]
            return CC_OK;
 1003a00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1003a04:	e3a00001 	mov	r0, #1
 1003a08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    TableEntry *replace = table->buckets[0];
 1003a0c:	e5973018 	ldr	r3, [r7, #24]
 1003a10:	e5933000 	ldr	r3, [r3]
    while (replace) {
 1003a14:	e3530000 	cmp	r3, #0
 1003a18:	1a000003 	bne	1003a2c <hashtable_add+0x1a0>
 1003a1c:	ea000008 	b	1003a44 <hashtable_add+0x1b8>
        replace = replace->next;
 1003a20:	e593300c 	ldr	r3, [r3, #12]
    while (replace) {
 1003a24:	e3530000 	cmp	r3, #0
 1003a28:	0a000005 	beq	1003a44 <hashtable_add+0x1b8>
        if (!replace->key) {
 1003a2c:	e5932000 	ldr	r2, [r3]
 1003a30:	e3520000 	cmp	r2, #0
 1003a34:	1afffff9 	bne	1003a20 <hashtable_add+0x194>
            replace->value = val;
 1003a38:	e5836004 	str	r6, [r3, #4]
            return CC_OK;
 1003a3c:	e3a00000 	mov	r0, #0
 1003a40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    TableEntry *new_entry = table->mem_alloc(sizeof(TableEntry));
 1003a44:	e5973024 	ldr	r3, [r7, #36]	; 0x24
 1003a48:	e3a00010 	mov	r0, #16
 1003a4c:	e12fff33 	blx	r3
    if (!new_entry)
 1003a50:	e2503000 	subs	r3, r0, #0
 1003a54:	0affffea 	beq	1003a04 <hashtable_add+0x178>
    new_entry->next  = table->buckets[0];
 1003a58:	e597c018 	ldr	ip, [r7, #24]
    new_entry->key   = NULL;
 1003a5c:	e3a01000 	mov	r1, #0
    table->size++;
 1003a60:	e5972004 	ldr	r2, [r7, #4]
    return CC_OK;
 1003a64:	e1a00001 	mov	r0, r1
    new_entry->value = val;
 1003a68:	e5836004 	str	r6, [r3, #4]
    new_entry->key   = NULL;
 1003a6c:	e5831000 	str	r1, [r3]
    new_entry->next  = table->buckets[0];
 1003a70:	e59ce000 	ldr	lr, [ip]
    table->size++;
 1003a74:	e2822001 	add	r2, r2, #1
    new_entry->hash  = 0;
 1003a78:	e5831008 	str	r1, [r3, #8]
    new_entry->next  = table->buckets[0];
 1003a7c:	e583e00c 	str	lr, [r3, #12]
    table->buckets[0] = new_entry;
 1003a80:	e58c3000 	str	r3, [ip]
    table->size++;
 1003a84:	e5872004 	str	r2, [r7, #4]
    return CC_OK;
 1003a88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_MAX_CAPACITY;
 1003a8c:	e3a00004 	mov	r0, #4
}
 1003a90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01003a94 <hashtable_get>:
{
 1003a94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (!key)
 1003a98:	e2516000 	subs	r6, r1, #0
 1003a9c:	0a00001d 	beq	1003b18 <hashtable_get+0x84>
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003aa0:	e1a05000 	mov	r5, r0
 1003aa4:	e590301c 	ldr	r3, [r0, #28]
 1003aa8:	e1a07002 	mov	r7, r2
 1003aac:	e1a00006 	mov	r0, r6
 1003ab0:	e595200c 	ldr	r2, [r5, #12]
 1003ab4:	e5951010 	ldr	r1, [r5, #16]
 1003ab8:	e12fff33 	blx	r3
    return hash & (table->capacity - 1);
 1003abc:	e5953000 	ldr	r3, [r5]
    TableEntry *bucket = table->buckets[index];
 1003ac0:	e5952018 	ldr	r2, [r5, #24]
    return hash & (table->capacity - 1);
 1003ac4:	e2433001 	sub	r3, r3, #1
 1003ac8:	e0000003 	and	r0, r0, r3
    TableEntry *bucket = table->buckets[index];
 1003acc:	e7924100 	ldr	r4, [r2, r0, lsl #2]
    while (bucket) {
 1003ad0:	e3540000 	cmp	r4, #0
 1003ad4:	0a00000a 	beq	1003b04 <hashtable_get+0x70>
        if (bucket->key && table->key_cmp(bucket->key, key) == 0) {
 1003ad8:	e5943000 	ldr	r3, [r4]
 1003adc:	e1a01006 	mov	r1, r6
 1003ae0:	e2530000 	subs	r0, r3, #0
 1003ae4:	0a000003 	beq	1003af8 <hashtable_get+0x64>
 1003ae8:	e5953020 	ldr	r3, [r5, #32]
 1003aec:	e12fff33 	blx	r3
 1003af0:	e3500000 	cmp	r0, #0
 1003af4:	0a000004 	beq	1003b0c <hashtable_get+0x78>
        bucket = bucket->next;
 1003af8:	e594400c 	ldr	r4, [r4, #12]
    while (bucket) {
 1003afc:	e3540000 	cmp	r4, #0
 1003b00:	1afffff4 	bne	1003ad8 <hashtable_get+0x44>
    return CC_ERR_KEY_NOT_FOUND;
 1003b04:	e3a00006 	mov	r0, #6
}
 1003b08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            *out = bucket->value;
 1003b0c:	e5943004 	ldr	r3, [r4, #4]
 1003b10:	e5873000 	str	r3, [r7]
            return CC_OK;
 1003b14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    TableEntry *bucket = table->buckets[0];
 1003b18:	e5903018 	ldr	r3, [r0, #24]
 1003b1c:	e5933000 	ldr	r3, [r3]
    while (bucket) {
 1003b20:	e3530000 	cmp	r3, #0
 1003b24:	1a000003 	bne	1003b38 <hashtable_get+0xa4>
 1003b28:	eafffff5 	b	1003b04 <hashtable_get+0x70>
        bucket = bucket->next;
 1003b2c:	e593300c 	ldr	r3, [r3, #12]
    while (bucket) {
 1003b30:	e3530000 	cmp	r3, #0
 1003b34:	0afffff2 	beq	1003b04 <hashtable_get+0x70>
        if (bucket->key == NULL) {
 1003b38:	e5931000 	ldr	r1, [r3]
 1003b3c:	e3510000 	cmp	r1, #0
 1003b40:	1afffff9 	bne	1003b2c <hashtable_get+0x98>
            *out = bucket->value;
 1003b44:	e5933004 	ldr	r3, [r3, #4]
            return CC_OK;
 1003b48:	e3a00000 	mov	r0, #0
            *out = bucket->value;
 1003b4c:	e5823000 	str	r3, [r2]
            return CC_OK;
 1003b50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003b54 <hashtable_remove>:
{
 1003b54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (!key)
 1003b58:	e2517000 	subs	r7, r1, #0
{
 1003b5c:	e1a06000 	mov	r6, r0
 1003b60:	e1a0a002 	mov	sl, r2
    if (!key)
 1003b64:	0a000036 	beq	1003c44 <hashtable_remove+0xf0>
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003b68:	e590301c 	ldr	r3, [r0, #28]
 1003b6c:	e1a00007 	mov	r0, r7
 1003b70:	e596200c 	ldr	r2, [r6, #12]
 1003b74:	e5961010 	ldr	r1, [r6, #16]
 1003b78:	e12fff33 	blx	r3
    return hash & (table->capacity - 1);
 1003b7c:	e5969000 	ldr	r9, [r6]
    TableEntry *e    = table->buckets[i];
 1003b80:	e5963018 	ldr	r3, [r6, #24]
    return hash & (table->capacity - 1);
 1003b84:	e2499001 	sub	r9, r9, #1
 1003b88:	e0099000 	and	r9, r9, r0
    TableEntry *e    = table->buckets[i];
 1003b8c:	e7934109 	ldr	r4, [r3, r9, lsl #2]
    while (e) {
 1003b90:	e3540000 	cmp	r4, #0
 1003b94:	0a00000d 	beq	1003bd0 <hashtable_remove+0x7c>
    TableEntry *prev = NULL;
 1003b98:	e3a08000 	mov	r8, #0
        if (e->key && table->key_cmp(key, e->key) == 0) {
 1003b9c:	e5943000 	ldr	r3, [r4]
 1003ba0:	e1a00007 	mov	r0, r7
        next = e->next;
 1003ba4:	e594500c 	ldr	r5, [r4, #12]
        if (e->key && table->key_cmp(key, e->key) == 0) {
 1003ba8:	e2531000 	subs	r1, r3, #0
 1003bac:	0a000003 	beq	1003bc0 <hashtable_remove+0x6c>
 1003bb0:	e5963020 	ldr	r3, [r6, #32]
 1003bb4:	e12fff33 	blx	r3
 1003bb8:	e3500000 	cmp	r0, #0
 1003bbc:	0a000005 	beq	1003bd8 <hashtable_remove+0x84>
    while (e) {
 1003bc0:	e3550000 	cmp	r5, #0
 1003bc4:	e1a08004 	mov	r8, r4
 1003bc8:	e1a04005 	mov	r4, r5
 1003bcc:	1afffff2 	bne	1003b9c <hashtable_remove+0x48>
    return CC_ERR_KEY_NOT_FOUND;
 1003bd0:	e3a00006 	mov	r0, #6
}
 1003bd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            if (!prev)
 1003bd8:	e3580000 	cmp	r8, #0
            void *value = e->value;
 1003bdc:	e5947004 	ldr	r7, [r4, #4]
                table->buckets[i] = next;
 1003be0:	05963018 	ldreq	r3, [r6, #24]
            table->mem_free(e);
 1003be4:	e1a00004 	mov	r0, r4
                prev->next = next;
 1003be8:	1588500c 	strne	r5, [r8, #12]
                table->buckets[i] = next;
 1003bec:	07835109 	streq	r5, [r3, r9, lsl #2]
            table->mem_free(e);
 1003bf0:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
 1003bf4:	e12fff33 	blx	r3
            table->size--;
 1003bf8:	e5963004 	ldr	r3, [r6, #4]
            if (out)
 1003bfc:	e35a0000 	cmp	sl, #0
            table->size--;
 1003c00:	e2433001 	sub	r3, r3, #1
 1003c04:	e5863004 	str	r3, [r6, #4]
            if (out)
 1003c08:	0a00000b 	beq	1003c3c <hashtable_remove+0xe8>
                *out = value;
 1003c0c:	e58a7000 	str	r7, [sl]
            return CC_OK;
 1003c10:	e3a00000 	mov	r0, #0
 1003c14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            void *value = e->value;
 1003c18:	e5904004 	ldr	r4, [r0, #4]
                prev->next = next;
 1003c1c:	e581300c 	str	r3, [r1, #12]
            table->mem_free(e);
 1003c20:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
 1003c24:	e12fff33 	blx	r3
            table->size--;
 1003c28:	e5963004 	ldr	r3, [r6, #4]
            if (out)
 1003c2c:	e35a0000 	cmp	sl, #0
            table->size--;
 1003c30:	e2433001 	sub	r3, r3, #1
 1003c34:	e5863004 	str	r3, [r6, #4]
                *out = value;
 1003c38:	158a4000 	strne	r4, [sl]
            return CC_OK;
 1003c3c:	e3a00000 	mov	r0, #0
 1003c40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    TableEntry *e = table->buckets[0];
 1003c44:	e5903018 	ldr	r3, [r0, #24]
 1003c48:	e5932000 	ldr	r2, [r3]
    while (e) {
 1003c4c:	e3520000 	cmp	r2, #0
 1003c50:	0affffde 	beq	1003bd0 <hashtable_remove+0x7c>
        if (e->key == NULL) {
 1003c54:	e5920000 	ldr	r0, [r2]
        next = e->next;
 1003c58:	e592100c 	ldr	r1, [r2, #12]
        if (e->key == NULL) {
 1003c5c:	e3500000 	cmp	r0, #0
 1003c60:	0a00000f 	beq	1003ca4 <hashtable_remove+0x150>
    while (e) {
 1003c64:	e3510000 	cmp	r1, #0
 1003c68:	0affffd8 	beq	1003bd0 <hashtable_remove+0x7c>
        if (e->key == NULL) {
 1003c6c:	e5913000 	ldr	r3, [r1]
        next = e->next;
 1003c70:	e591000c 	ldr	r0, [r1, #12]
        if (e->key == NULL) {
 1003c74:	e3530000 	cmp	r3, #0
 1003c78:	1a000006 	bne	1003c98 <hashtable_remove+0x144>
 1003c7c:	ea00000c 	b	1003cb4 <hashtable_remove+0x160>
 1003c80:	e5902000 	ldr	r2, [r0]
        next = e->next;
 1003c84:	e590300c 	ldr	r3, [r0, #12]
        if (e->key == NULL) {
 1003c88:	e3520000 	cmp	r2, #0
 1003c8c:	0affffe1 	beq	1003c18 <hashtable_remove+0xc4>
 1003c90:	e1a01000 	mov	r1, r0
        next = e->next;
 1003c94:	e1a00003 	mov	r0, r3
    while (e) {
 1003c98:	e3500000 	cmp	r0, #0
 1003c9c:	1afffff7 	bne	1003c80 <hashtable_remove+0x12c>
 1003ca0:	eaffffca 	b	1003bd0 <hashtable_remove+0x7c>
            void *value = e->value;
 1003ca4:	e5924004 	ldr	r4, [r2, #4]
                table->buckets[0] = next;
 1003ca8:	e1a00002 	mov	r0, r2
 1003cac:	e5831000 	str	r1, [r3]
 1003cb0:	eaffffda 	b	1003c20 <hashtable_remove+0xcc>
        next = e->next;
 1003cb4:	e1a03000 	mov	r3, r0
            void *value = e->value;
 1003cb8:	e5914004 	ldr	r4, [r1, #4]
 1003cbc:	e1a00001 	mov	r0, r1
    TableEntry *e = table->buckets[0];
 1003cc0:	e1a01002 	mov	r1, r2
 1003cc4:	eaffffd4 	b	1003c1c <hashtable_remove+0xc8>

01003cc8 <hashtable_remove_all>:
    for (i = 0; i < table->capacity; i++) {
 1003cc8:	e5901000 	ldr	r1, [r0]
 1003ccc:	e3510000 	cmp	r1, #0
 1003cd0:	012fff1e 	bxeq	lr
 1003cd4:	e5903018 	ldr	r3, [r0, #24]
{
 1003cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < table->capacity; i++) {
 1003cdc:	e3a06000 	mov	r6, #0
 1003ce0:	e1a04000 	mov	r4, r0
        table->buckets[i] = NULL;
 1003ce4:	e1a08006 	mov	r8, r6
        TableEntry *entry = table->buckets[i];
 1003ce8:	e1a07106 	lsl	r7, r6, #2
 1003cec:	e7930106 	ldr	r0, [r3, r6, lsl #2]
 1003cf0:	e0832007 	add	r2, r3, r7
        while (entry) {
 1003cf4:	e3500000 	cmp	r0, #0
 1003cf8:	0a00000a 	beq	1003d28 <hashtable_remove_all+0x60>
            TableEntry *next = entry->next;
 1003cfc:	e590500c 	ldr	r5, [r0, #12]
            table->mem_free(entry);
 1003d00:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
 1003d04:	e12fff33 	blx	r3
            table->size--;
 1003d08:	e5943004 	ldr	r3, [r4, #4]
        while (entry) {
 1003d0c:	e2550000 	subs	r0, r5, #0
            table->size--;
 1003d10:	e2433001 	sub	r3, r3, #1
 1003d14:	e5843004 	str	r3, [r4, #4]
        while (entry) {
 1003d18:	1afffff7 	bne	1003cfc <hashtable_remove_all+0x34>
 1003d1c:	e5943018 	ldr	r3, [r4, #24]
 1003d20:	e5941000 	ldr	r1, [r4]
 1003d24:	e0832007 	add	r2, r3, r7
    for (i = 0; i < table->capacity; i++) {
 1003d28:	e2866001 	add	r6, r6, #1
        table->buckets[i] = NULL;
 1003d2c:	e5828000 	str	r8, [r2]
    for (i = 0; i < table->capacity; i++) {
 1003d30:	e1560001 	cmp	r6, r1
 1003d34:	3affffeb 	bcc	1003ce8 <hashtable_remove_all+0x20>
 1003d38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003d3c <hashtable_size>:
}
 1003d3c:	e5900004 	ldr	r0, [r0, #4]
 1003d40:	e12fff1e 	bx	lr

01003d44 <hashtable_capacity>:
}
 1003d44:	e5900000 	ldr	r0, [r0]
 1003d48:	e12fff1e 	bx	lr

01003d4c <hashtable_contains_key>:
{
 1003d4c:	e92d4070 	push	{r4, r5, r6, lr}
 1003d50:	e1a05000 	mov	r5, r0
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003d54:	e590301c 	ldr	r3, [r0, #28]
{
 1003d58:	e1a06001 	mov	r6, r1
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003d5c:	e1a00001 	mov	r0, r1
 1003d60:	e595200c 	ldr	r2, [r5, #12]
 1003d64:	e5951010 	ldr	r1, [r5, #16]
    TableEntry *entry = table->buckets[get_table_index(table, key)];
 1003d68:	e5954018 	ldr	r4, [r5, #24]
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003d6c:	e12fff33 	blx	r3
    return hash & (table->capacity - 1);
 1003d70:	e5953000 	ldr	r3, [r5]
 1003d74:	e2433001 	sub	r3, r3, #1
 1003d78:	e0000003 	and	r0, r0, r3
    TableEntry *entry = table->buckets[get_table_index(table, key)];
 1003d7c:	e7944100 	ldr	r4, [r4, r0, lsl #2]
    while (entry) {
 1003d80:	e3540000 	cmp	r4, #0
 1003d84:	1a000003 	bne	1003d98 <hashtable_contains_key+0x4c>
 1003d88:	ea00000a 	b	1003db8 <hashtable_contains_key+0x6c>
        entry = entry->next;
 1003d8c:	e594400c 	ldr	r4, [r4, #12]
    while (entry) {
 1003d90:	e3540000 	cmp	r4, #0
 1003d94:	0a000007 	beq	1003db8 <hashtable_contains_key+0x6c>
        if (table->key_cmp(key, entry->key) == 0)
 1003d98:	e5953020 	ldr	r3, [r5, #32]
 1003d9c:	e1a00006 	mov	r0, r6
 1003da0:	e5941000 	ldr	r1, [r4]
 1003da4:	e12fff33 	blx	r3
 1003da8:	e3500000 	cmp	r0, #0
 1003dac:	1afffff6 	bne	1003d8c <hashtable_contains_key+0x40>
            return true;
 1003db0:	e3a00001 	mov	r0, #1
}
 1003db4:	e8bd8070 	pop	{r4, r5, r6, pc}
    return false;
 1003db8:	e3a00000 	mov	r0, #0
 1003dbc:	e8bd8070 	pop	{r4, r5, r6, pc}

01003dc0 <hashtable_get_values>:
{
 1003dc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003dc4:	e24dd018 	sub	sp, sp, #24
 1003dc8:	e1a05000 	mov	r5, r0
    array_conf_init(&ac);
 1003dcc:	e28d0004 	add	r0, sp, #4
{
 1003dd0:	e1a08001 	mov	r8, r1
    array_conf_init(&ac);
 1003dd4:	ebfff241 	bl	10006e0 <array_conf_init>
    ac.capacity   = table->size;
 1003dd8:	e5953004 	ldr	r3, [r5, #4]
    enum cc_stat stat = array_new_conf(&ac, &values);
 1003ddc:	e28d0004 	add	r0, sp, #4
    ac.mem_alloc  = table->mem_alloc;
 1003de0:	e595c028 	ldr	ip, [r5, #40]	; 0x28
    enum cc_stat stat = array_new_conf(&ac, &values);
 1003de4:	e1a0100d 	mov	r1, sp
    ac.mem_alloc  = table->mem_alloc;
 1003de8:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    ac.capacity   = table->size;
 1003dec:	e58d3004 	str	r3, [sp, #4]
    ac.mem_alloc  = table->mem_alloc;
 1003df0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
 1003df4:	e58dc010 	str	ip, [sp, #16]
 1003df8:	e58d2014 	str	r2, [sp, #20]
 1003dfc:	e58d300c 	str	r3, [sp, #12]
    enum cc_stat stat = array_new_conf(&ac, &values);
 1003e00:	ebfff200 	bl	1000608 <array_new_conf>
    if (stat != CC_OK)
 1003e04:	e2507000 	subs	r7, r0, #0
 1003e08:	1a000013 	bne	1003e5c <hashtable_get_values+0x9c>
    for (i = 0; i <table->capacity; i++) {
 1003e0c:	e5953000 	ldr	r3, [r5]
 1003e10:	e3530000 	cmp	r3, #0
 1003e14:	11a06007 	movne	r6, r7
 1003e18:	0a000016 	beq	1003e78 <hashtable_get_values+0xb8>
        TableEntry *entry = table->buckets[i];
 1003e1c:	e5952018 	ldr	r2, [r5, #24]
 1003e20:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003e24:	e3540000 	cmp	r4, #0
 1003e28:	1a000003 	bne	1003e3c <hashtable_get_values+0x7c>
 1003e2c:	ea00000e 	b	1003e6c <hashtable_get_values+0xac>
                entry = entry->next;
 1003e30:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003e34:	e3540000 	cmp	r4, #0
 1003e38:	0a00000a 	beq	1003e68 <hashtable_get_values+0xa8>
            if ((stat = array_add(values, entry->value)) == CC_OK) {
 1003e3c:	e5941004 	ldr	r1, [r4, #4]
 1003e40:	e59d0000 	ldr	r0, [sp]
 1003e44:	ebfff251 	bl	1000790 <array_add>
 1003e48:	e2503000 	subs	r3, r0, #0
 1003e4c:	0afffff7 	beq	1003e30 <hashtable_get_values+0x70>
                array_destroy(values);
 1003e50:	e59d0000 	ldr	r0, [sp]
            if ((stat = array_add(values, entry->value)) == CC_OK) {
 1003e54:	e1a07003 	mov	r7, r3
                array_destroy(values);
 1003e58:	ebfff22e 	bl	1000718 <array_destroy>
}
 1003e5c:	e1a00007 	mov	r0, r7
 1003e60:	e28dd018 	add	sp, sp, #24
 1003e64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1003e68:	e5953000 	ldr	r3, [r5]
    for (i = 0; i <table->capacity; i++) {
 1003e6c:	e2866001 	add	r6, r6, #1
 1003e70:	e1560003 	cmp	r6, r3
 1003e74:	3affffe8 	bcc	1003e1c <hashtable_get_values+0x5c>
    *out = values;
 1003e78:	e59d3000 	ldr	r3, [sp]
 1003e7c:	e5883000 	str	r3, [r8]
    return CC_OK;
 1003e80:	eafffff5 	b	1003e5c <hashtable_get_values+0x9c>

01003e84 <hashtable_get_keys>:
{
 1003e84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003e88:	e24dd018 	sub	sp, sp, #24
 1003e8c:	e1a05000 	mov	r5, r0
    array_conf_init(&vc);
 1003e90:	e28d0004 	add	r0, sp, #4
{
 1003e94:	e1a08001 	mov	r8, r1
    array_conf_init(&vc);
 1003e98:	ebfff210 	bl	10006e0 <array_conf_init>
    vc.capacity   = table->size;
 1003e9c:	e5953004 	ldr	r3, [r5, #4]
    enum cc_stat stat = array_new_conf(&vc, &keys);
 1003ea0:	e28d0004 	add	r0, sp, #4
    vc.mem_alloc  = table->mem_alloc;
 1003ea4:	e595c028 	ldr	ip, [r5, #40]	; 0x28
    enum cc_stat stat = array_new_conf(&vc, &keys);
 1003ea8:	e1a0100d 	mov	r1, sp
    vc.mem_alloc  = table->mem_alloc;
 1003eac:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    vc.capacity   = table->size;
 1003eb0:	e58d3004 	str	r3, [sp, #4]
    vc.mem_alloc  = table->mem_alloc;
 1003eb4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
 1003eb8:	e58dc010 	str	ip, [sp, #16]
 1003ebc:	e58d2014 	str	r2, [sp, #20]
 1003ec0:	e58d300c 	str	r3, [sp, #12]
    enum cc_stat stat = array_new_conf(&vc, &keys);
 1003ec4:	ebfff1cf 	bl	1000608 <array_new_conf>
    if (stat != CC_OK)
 1003ec8:	e2507000 	subs	r7, r0, #0
 1003ecc:	1a000013 	bne	1003f20 <hashtable_get_keys+0x9c>
    for (i = 0; i < table->capacity; i++) {
 1003ed0:	e5953000 	ldr	r3, [r5]
 1003ed4:	e3530000 	cmp	r3, #0
 1003ed8:	11a06007 	movne	r6, r7
 1003edc:	0a000016 	beq	1003f3c <hashtable_get_keys+0xb8>
        TableEntry *entry = table->buckets[i];
 1003ee0:	e5952018 	ldr	r2, [r5, #24]
 1003ee4:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003ee8:	e3540000 	cmp	r4, #0
 1003eec:	1a000003 	bne	1003f00 <hashtable_get_keys+0x7c>
 1003ef0:	ea00000e 	b	1003f30 <hashtable_get_keys+0xac>
                entry = entry->next;
 1003ef4:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003ef8:	e3540000 	cmp	r4, #0
 1003efc:	0a00000a 	beq	1003f2c <hashtable_get_keys+0xa8>
            if ((stat = array_add(keys, entry->key)) == CC_OK) {
 1003f00:	e5941000 	ldr	r1, [r4]
 1003f04:	e59d0000 	ldr	r0, [sp]
 1003f08:	ebfff220 	bl	1000790 <array_add>
 1003f0c:	e2503000 	subs	r3, r0, #0
 1003f10:	0afffff7 	beq	1003ef4 <hashtable_get_keys+0x70>
                array_destroy(keys);
 1003f14:	e59d0000 	ldr	r0, [sp]
            if ((stat = array_add(keys, entry->key)) == CC_OK) {
 1003f18:	e1a07003 	mov	r7, r3
                array_destroy(keys);
 1003f1c:	ebfff1fd 	bl	1000718 <array_destroy>
}
 1003f20:	e1a00007 	mov	r0, r7
 1003f24:	e28dd018 	add	sp, sp, #24
 1003f28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1003f2c:	e5953000 	ldr	r3, [r5]
    for (i = 0; i < table->capacity; i++) {
 1003f30:	e2866001 	add	r6, r6, #1
 1003f34:	e1560003 	cmp	r6, r3
 1003f38:	3affffe8 	bcc	1003ee0 <hashtable_get_keys+0x5c>
    *out = keys;
 1003f3c:	e59d3000 	ldr	r3, [sp]
 1003f40:	e5883000 	str	r3, [r8]
    return CC_OK;
 1003f44:	eafffff5 	b	1003f20 <hashtable_get_keys+0x9c>

01003f48 <hashtable_foreach_key>:
    for (i = 0; i <table->capacity; i++) {
 1003f48:	e5903000 	ldr	r3, [r0]
 1003f4c:	e3530000 	cmp	r3, #0
 1003f50:	012fff1e 	bxeq	lr
{
 1003f54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003f58:	e1a05001 	mov	r5, r1
 1003f5c:	e1a07000 	mov	r7, r0
    for (i = 0; i <table->capacity; i++) {
 1003f60:	e3a06000 	mov	r6, #0
        TableEntry *entry = table->buckets[i];
 1003f64:	e5972018 	ldr	r2, [r7, #24]
 1003f68:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003f6c:	e3540000 	cmp	r4, #0
 1003f70:	0a000005 	beq	1003f8c <hashtable_foreach_key+0x44>
            fn(entry->key);
 1003f74:	e5940000 	ldr	r0, [r4]
 1003f78:	e12fff35 	blx	r5
            entry = entry->next;
 1003f7c:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003f80:	e3540000 	cmp	r4, #0
 1003f84:	1afffffa 	bne	1003f74 <hashtable_foreach_key+0x2c>
 1003f88:	e5973000 	ldr	r3, [r7]
    for (i = 0; i <table->capacity; i++) {
 1003f8c:	e2866001 	add	r6, r6, #1
 1003f90:	e1560003 	cmp	r6, r3
 1003f94:	3afffff2 	bcc	1003f64 <hashtable_foreach_key+0x1c>
 1003f98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003f9c <hashtable_foreach_value>:
    for (i = 0; i <table->capacity; i++) {
 1003f9c:	e5903000 	ldr	r3, [r0]
 1003fa0:	e3530000 	cmp	r3, #0
 1003fa4:	012fff1e 	bxeq	lr
{
 1003fa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003fac:	e1a05001 	mov	r5, r1
 1003fb0:	e1a07000 	mov	r7, r0
    for (i = 0; i <table->capacity; i++) {
 1003fb4:	e3a06000 	mov	r6, #0
        TableEntry *entry = table->buckets[i];
 1003fb8:	e5972018 	ldr	r2, [r7, #24]
 1003fbc:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003fc0:	e3540000 	cmp	r4, #0
 1003fc4:	0a000005 	beq	1003fe0 <hashtable_foreach_value+0x44>
            fn(entry->value);
 1003fc8:	e5940004 	ldr	r0, [r4, #4]
 1003fcc:	e12fff35 	blx	r5
            entry = entry->next;
 1003fd0:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003fd4:	e3540000 	cmp	r4, #0
 1003fd8:	1afffffa 	bne	1003fc8 <hashtable_foreach_value+0x2c>
 1003fdc:	e5973000 	ldr	r3, [r7]
    for (i = 0; i <table->capacity; i++) {
 1003fe0:	e2866001 	add	r6, r6, #1
 1003fe4:	e1560003 	cmp	r6, r3
 1003fe8:	3afffff2 	bcc	1003fb8 <hashtable_foreach_value+0x1c>
 1003fec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003ff0 <hashtable_iter_init>:
    memset(iter, 0, sizeof(HashTableIter));
 1003ff0:	e3a03000 	mov	r3, #0
 1003ff4:	e5803004 	str	r3, [r0, #4]
 1003ff8:	e5803008 	str	r3, [r0, #8]
 1003ffc:	e580300c 	str	r3, [r0, #12]
    for (i = 0; i < table->capacity; i++) {
 1004000:	e591c000 	ldr	ip, [r1]
    iter->table = table;
 1004004:	e5801000 	str	r1, [r0]
    for (i = 0; i < table->capacity; i++) {
 1004008:	e15c0003 	cmp	ip, r3
 100400c:	012fff1e 	bxeq	lr
        TableEntry *e = table->buckets[i];
 1004010:	e5912018 	ldr	r2, [r1, #24]
 1004014:	e5921000 	ldr	r1, [r2]
        if (e) {
 1004018:	e1510003 	cmp	r1, r3
    for (i = 0; i < table->capacity; i++) {
 100401c:	01a03001 	moveq	r3, r1
        if (e) {
 1004020:	1a000005 	bne	100403c <hashtable_iter_init+0x4c>
    for (i = 0; i < table->capacity; i++) {
 1004024:	e2833001 	add	r3, r3, #1
 1004028:	e153000c 	cmp	r3, ip
 100402c:	012fff1e 	bxeq	lr
        TableEntry *e = table->buckets[i];
 1004030:	e5b21004 	ldr	r1, [r2, #4]!
        if (e) {
 1004034:	e3510000 	cmp	r1, #0
 1004038:	0afffff9 	beq	1004024 <hashtable_iter_init+0x34>
            iter->prev_entry   = NULL;
 100403c:	e3a02000 	mov	r2, #0
            iter->bucket_index = i;
 1004040:	e5803004 	str	r3, [r0, #4]
            iter->next_entry   = e;
 1004044:	e580100c 	str	r1, [r0, #12]
            iter->prev_entry   = NULL;
 1004048:	e5802008 	str	r2, [r0, #8]
            break;
 100404c:	e12fff1e 	bx	lr

01004050 <hashtable_iter_next>:
    if (!iter->next_entry)
 1004050:	e590c00c 	ldr	ip, [r0, #12]
 1004054:	e35c0000 	cmp	ip, #0
 1004058:	0a00001f 	beq	10040dc <hashtable_iter_next+0x8c>
    iter->next_entry = iter->next_entry->next;
 100405c:	e59c300c 	ldr	r3, [ip, #12]
    iter->prev_entry = iter->next_entry;
 1004060:	e580c008 	str	ip, [r0, #8]
    if (iter->next_entry) {
 1004064:	e3530000 	cmp	r3, #0
    iter->next_entry = iter->next_entry->next;
 1004068:	e580300c 	str	r3, [r0, #12]
    if (iter->next_entry) {
 100406c:	0a000002 	beq	100407c <hashtable_iter_next+0x2c>
        *te = iter->prev_entry;
 1004070:	e581c000 	str	ip, [r1]
        return CC_OK;
 1004074:	e3a00000 	mov	r0, #0
 1004078:	e12fff1e 	bx	lr
    for (i = iter->bucket_index + 1; i < iter->table->capacity; i++) {
 100407c:	e1c020d0 	ldrd	r2, [r0]
{
 1004080:	e92d4010 	push	{r4, lr}
    for (i = iter->bucket_index + 1; i < iter->table->capacity; i++) {
 1004084:	e2833001 	add	r3, r3, #1
 1004088:	e592e000 	ldr	lr, [r2]
 100408c:	e153000e 	cmp	r3, lr
 1004090:	2a00000c 	bcs	10040c8 <hashtable_iter_next+0x78>
        iter->next_entry = iter->table->buckets[i];
 1004094:	e5924018 	ldr	r4, [r2, #24]
 1004098:	e7942103 	ldr	r2, [r4, r3, lsl #2]
        if (iter->next_entry) {
 100409c:	e3520000 	cmp	r2, #0
        iter->next_entry = iter->table->buckets[i];
 10040a0:	e580200c 	str	r2, [r0, #12]
        if (iter->next_entry) {
 10040a4:	0a000004 	beq	10040bc <hashtable_iter_next+0x6c>
 10040a8:	ea000009 	b	10040d4 <hashtable_iter_next+0x84>
        iter->next_entry = iter->table->buckets[i];
 10040ac:	e7942103 	ldr	r2, [r4, r3, lsl #2]
        if (iter->next_entry) {
 10040b0:	e3520000 	cmp	r2, #0
        iter->next_entry = iter->table->buckets[i];
 10040b4:	e580200c 	str	r2, [r0, #12]
        if (iter->next_entry) {
 10040b8:	1a000005 	bne	10040d4 <hashtable_iter_next+0x84>
    for (i = iter->bucket_index + 1; i < iter->table->capacity; i++) {
 10040bc:	e2833001 	add	r3, r3, #1
 10040c0:	e153000e 	cmp	r3, lr
 10040c4:	3afffff8 	bcc	10040ac <hashtable_iter_next+0x5c>
    *te = iter->prev_entry;
 10040c8:	e581c000 	str	ip, [r1]
    return CC_OK;
 10040cc:	e3a00000 	mov	r0, #0
}
 10040d0:	e8bd8010 	pop	{r4, pc}
            iter->bucket_index = i;
 10040d4:	e5803004 	str	r3, [r0, #4]
            break;
 10040d8:	eafffffa 	b	10040c8 <hashtable_iter_next+0x78>
        return CC_ITER_END;
 10040dc:	e3a00009 	mov	r0, #9
}
 10040e0:	e12fff1e 	bx	lr

010040e4 <hashtable_iter_remove>:
    return hashtable_remove(iter->table, iter->prev_entry->key, out);
 10040e4:	e5903008 	ldr	r3, [r0, #8]
 10040e8:	e1a02001 	mov	r2, r1
 10040ec:	e5900000 	ldr	r0, [r0]
 10040f0:	e5931000 	ldr	r1, [r3]
 10040f4:	eafffe96 	b	1003b54 <hashtable_remove>

010040f8 <hashtable_hash>:
 * MurmurHash3 the 32bit variant.
 */
size_t hashtable_hash(const void *key, int len, uint32_t seed)
{
    const uint8_t *data    = (const uint8_t*)key;
    const int      nblocks = len / 4;
 10040f8:	e3510000 	cmp	r1, #0
 10040fc:	e281c003 	add	ip, r1, #3
 1004100:	a1a0c001 	movge	ip, r1
{
 1004104:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int      nblocks = len / 4;
 1004108:	e1a0c14c 	asr	ip, ip, #2
{
 100410c:	e24dd00c 	sub	sp, sp, #12
    uint32_t h1 = seed;

    const uint32_t c1 = 0xcc9e2d51;
    const uint32_t c2 = 0x1b873593;

    const uint32_t *blocks = (const uint32_t *)(data + nblocks*4);
 1004110:	e1a0810c 	lsl	r8, ip, #2

    int i;
    for (i = -nblocks; i; i++) {
 1004114:	e35c0000 	cmp	ip, #0
    const uint32_t *blocks = (const uint32_t *)(data + nblocks*4);
 1004118:	e0809008 	add	r9, r0, r8
    for (i = -nblocks; i; i++) {
 100411c:	0a000069 	beq	10042c8 <hashtable_hash+0x1d0>
 1004120:	e3510023 	cmp	r1, #35	; 0x23
 1004124:	e26c7000 	rsb	r7, ip, #0
 1004128:	da000051 	ble	1004274 <hashtable_hash+0x17c>
 100412c:	e24c3009 	sub	r3, ip, #9
 1004130:	e26ce008 	rsb	lr, ip, #8
 1004134:	e3c33007 	bic	r3, r3, #7
        uint32_t k1 = blocks[i];

        k1 *= c1;
 1004138:	e3026d51 	movw	r6, #11601	; 0x2d51
        k1 = ROTL32(k1,15);
        k1 *= c2;
 100413c:	e3035593 	movw	r5, #13715	; 0x3593

        h1 ^= k1;
        h1 = ROTL32(h1,13);
        h1 = h1*5+0xe6546b64;
 1004140:	e3064b64 	movw	r4, #27492	; 0x6b64
 1004144:	e083300e 	add	r3, r3, lr
        k1 *= c1;
 1004148:	e34c6c9e 	movt	r6, #52382	; 0xcc9e
        k1 *= c2;
 100414c:	e3415b87 	movt	r5, #7047	; 0x1b87
        h1 = h1*5+0xe6546b64;
 1004150:	e34e4654 	movt	r4, #58964	; 0xe654
 1004154:	e280e03c 	add	lr, r0, #60	; 0x3c
 1004158:	e58d3004 	str	r3, [sp, #4]
        uint32_t k1 = blocks[i];
 100415c:	e51ea03c 	ldr	sl, [lr, #-60]	; 0xffffffc4
    return (x << r) | (x >> (32 - r));
 1004160:	e2877008 	add	r7, r7, #8
        uint32_t k1 = blocks[i];
 1004164:	e51e3038 	ldr	r3, [lr, #-56]	; 0xffffffc8
 1004168:	e59db004 	ldr	fp, [sp, #4]
 100416c:	f5def000 	pld	[lr]
 1004170:	e28ee020 	add	lr, lr, #32
        k1 *= c1;
 1004174:	e00a0a96 	mul	sl, r6, sl
 1004178:	e157000b 	cmp	r7, fp
        uint32_t k1 = blocks[i];
 100417c:	e51eb054 	ldr	fp, [lr, #-84]	; 0xffffffac
        k1 *= c1;
 1004180:	e0030396 	mul	r3, r6, r3
    return (x << r) | (x >> (32 - r));
 1004184:	e1a0a8ea 	ror	sl, sl, #17
        k1 *= c1;
 1004188:	e00b0b96 	mul	fp, r6, fp
    return (x << r) | (x >> (32 - r));
 100418c:	e1a038e3 	ror	r3, r3, #17
        k1 *= c2;
 1004190:	e00a0a95 	mul	sl, r5, sl
 1004194:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 1004198:	e1a0b8eb 	ror	fp, fp, #17
        h1 ^= k1;
 100419c:	e022200a 	eor	r2, r2, sl
        uint32_t k1 = blocks[i];
 10041a0:	e51ea050 	ldr	sl, [lr, #-80]	; 0xffffffb0
    return (x << r) | (x >> (32 - r));
 10041a4:	e1a029e2 	ror	r2, r2, #19
        k1 *= c2;
 10041a8:	e00b0b95 	mul	fp, r5, fp
        h1 = h1*5+0xe6546b64;
 10041ac:	e0822102 	add	r2, r2, r2, lsl #2
 10041b0:	e0822004 	add	r2, r2, r4
        h1 ^= k1;
 10041b4:	e0233002 	eor	r3, r3, r2
        k1 *= c1;
 10041b8:	e0020a96 	mul	r2, r6, sl
    return (x << r) | (x >> (32 - r));
 10041bc:	e1a0a9e3 	ror	sl, r3, #19
        uint32_t k1 = blocks[i];
 10041c0:	e51e304c 	ldr	r3, [lr, #-76]	; 0xffffffb4
        h1 = h1*5+0xe6546b64;
 10041c4:	e08aa10a 	add	sl, sl, sl, lsl #2
    return (x << r) | (x >> (32 - r));
 10041c8:	e1a028e2 	ror	r2, r2, #17
        h1 = h1*5+0xe6546b64;
 10041cc:	e08aa004 	add	sl, sl, r4
        k1 *= c1;
 10041d0:	e0030396 	mul	r3, r6, r3
        h1 ^= k1;
 10041d4:	e02bb00a 	eor	fp, fp, sl
        uint32_t k1 = blocks[i];
 10041d8:	e51ea048 	ldr	sl, [lr, #-72]	; 0xffffffb8
    return (x << r) | (x >> (32 - r));
 10041dc:	e1a0b9eb 	ror	fp, fp, #19
        k1 *= c2;
 10041e0:	e0020295 	mul	r2, r5, r2
        h1 = h1*5+0xe6546b64;
 10041e4:	e08bb10b 	add	fp, fp, fp, lsl #2
    return (x << r) | (x >> (32 - r));
 10041e8:	e1a038e3 	ror	r3, r3, #17
        k1 *= c1;
 10041ec:	e00a0a96 	mul	sl, r6, sl
        h1 = h1*5+0xe6546b64;
 10041f0:	e08bb004 	add	fp, fp, r4
        h1 ^= k1;
 10041f4:	e022200b 	eor	r2, r2, fp
        k1 *= c2;
 10041f8:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 10041fc:	e1a029e2 	ror	r2, r2, #19
 1004200:	e1a0a8ea 	ror	sl, sl, #17
        h1 = h1*5+0xe6546b64;
 1004204:	e0822102 	add	r2, r2, r2, lsl #2
        k1 *= c2;
 1004208:	e00a0a95 	mul	sl, r5, sl
        h1 = h1*5+0xe6546b64;
 100420c:	e082b004 	add	fp, r2, r4
        h1 ^= k1;
 1004210:	e02bb003 	eor	fp, fp, r3
        k1 *= c1;
 1004214:	e51e3044 	ldr	r3, [lr, #-68]	; 0xffffffbc
    return (x << r) | (x >> (32 - r));
 1004218:	e1a0b9eb 	ror	fp, fp, #19
        h1 = h1*5+0xe6546b64;
 100421c:	e08bb10b 	add	fp, fp, fp, lsl #2
        k1 *= c1;
 1004220:	e0020396 	mul	r2, r6, r3
        uint32_t k1 = blocks[i];
 1004224:	e51e3040 	ldr	r3, [lr, #-64]	; 0xffffffc0
        h1 = h1*5+0xe6546b64;
 1004228:	e08bb004 	add	fp, fp, r4
        h1 ^= k1;
 100422c:	e02aa00b 	eor	sl, sl, fp
    return (x << r) | (x >> (32 - r));
 1004230:	e1a0a9ea 	ror	sl, sl, #19
 1004234:	e1a028e2 	ror	r2, r2, #17
        k1 *= c1;
 1004238:	e0030396 	mul	r3, r6, r3
        h1 = h1*5+0xe6546b64;
 100423c:	e08aa10a 	add	sl, sl, sl, lsl #2
        k1 *= c2;
 1004240:	e0020295 	mul	r2, r5, r2
        h1 = h1*5+0xe6546b64;
 1004244:	e08aa004 	add	sl, sl, r4
    return (x << r) | (x >> (32 - r));
 1004248:	e1a038e3 	ror	r3, r3, #17
        h1 ^= k1;
 100424c:	e022200a 	eor	r2, r2, sl
        k1 *= c2;
 1004250:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 1004254:	e1a029e2 	ror	r2, r2, #19
        h1 = h1*5+0xe6546b64;
 1004258:	e0822102 	add	r2, r2, r2, lsl #2
 100425c:	e0822004 	add	r2, r2, r4
        h1 ^= k1;
 1004260:	e0233002 	eor	r3, r3, r2
    return (x << r) | (x >> (32 - r));
 1004264:	e1a039e3 	ror	r3, r3, #19
        h1 = h1*5+0xe6546b64;
 1004268:	e0833103 	add	r3, r3, r3, lsl #2
 100426c:	e0832004 	add	r2, r3, r4
 1004270:	1affffb9 	bne	100415c <hashtable_hash+0x64>
 1004274:	e248e004 	sub	lr, r8, #4
 1004278:	e2403004 	sub	r3, r0, #4
 100427c:	e08e7107 	add	r7, lr, r7, lsl #2
        k1 *= c1;
 1004280:	e3025d51 	movw	r5, #11601	; 0x2d51
        k1 *= c2;
 1004284:	e3034593 	movw	r4, #13715	; 0x3593
        h1 = h1*5+0xe6546b64;
 1004288:	e306eb64 	movw	lr, #27492	; 0x6b64
 100428c:	e0807007 	add	r7, r0, r7
 1004290:	e0838008 	add	r8, r3, r8
        k1 *= c1;
 1004294:	e34c5c9e 	movt	r5, #52382	; 0xcc9e
        k1 *= c2;
 1004298:	e3414b87 	movt	r4, #7047	; 0x1b87
        h1 = h1*5+0xe6546b64;
 100429c:	e34ee654 	movt	lr, #58964	; 0xe654
        uint32_t k1 = blocks[i];
 10042a0:	e5b73004 	ldr	r3, [r7, #4]!
    for (i = -nblocks; i; i++) {
 10042a4:	e1570008 	cmp	r7, r8
        k1 *= c1;
 10042a8:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 10042ac:	e1a038e3 	ror	r3, r3, #17
        k1 *= c2;
 10042b0:	e0030394 	mul	r3, r4, r3
        h1 ^= k1;
 10042b4:	e0233002 	eor	r3, r3, r2
    return (x << r) | (x >> (32 - r));
 10042b8:	e1a039e3 	ror	r3, r3, #19
        h1 = h1*5+0xe6546b64;
 10042bc:	e0833103 	add	r3, r3, r3, lsl #2
 10042c0:	e083200e 	add	r2, r3, lr
    for (i = -nblocks; i; i++) {
 10042c4:	1afffff5 	bne	10042a0 <hashtable_hash+0x1a8>

    const uint8_t * tail = (const uint8_t*)(data + nblocks*4);

    uint32_t k1 = 0;

    switch(len & 3) {
 10042c8:	e2013003 	and	r3, r1, #3
 10042cc:	e3530002 	cmp	r3, #2
 10042d0:	0a000020 	beq	1004358 <hashtable_hash+0x260>
 10042d4:	e3530003 	cmp	r3, #3
 10042d8:	0a000019 	beq	1004344 <hashtable_hash+0x24c>
 10042dc:	e3530001 	cmp	r3, #1
 10042e0:	0a00000b 	beq	1004314 <hashtable_hash+0x21c>
            k1  = ROTL32(k1,15);
            k1 *= c2;
            h1 ^= k1;
    };

    h1 ^= len;
 10042e4:	e0222001 	eor	r2, r2, r1
    h *= 0x85ebca6b;
 10042e8:	e30c1a6b 	movw	r1, #51819	; 0xca6b
    h ^= h >> 16;
 10042ec:	e0222822 	eor	r2, r2, r2, lsr #16
    h *= 0x85ebca6b;
 10042f0:	e34815eb 	movt	r1, #34283	; 0x85eb
    h *= 0xc2b2ae35;
 10042f4:	e30a0e35 	movw	r0, #44597	; 0xae35
    h *= 0x85ebca6b;
 10042f8:	e0020291 	mul	r2, r1, r2
    h *= 0xc2b2ae35;
 10042fc:	e34c02b2 	movt	r0, #49842	; 0xc2b2
    h ^= h >> 13;
 1004300:	e02226a2 	eor	r2, r2, r2, lsr #13
    h *= 0xc2b2ae35;
 1004304:	e0000290 	mul	r0, r0, r2
    h1  = fmix32(h1);

    return (size_t) h1;
}
 1004308:	e0200820 	eor	r0, r0, r0, lsr #16
 100430c:	e28dd00c 	add	sp, sp, #12
 1004310:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t k1 = 0;
 1004314:	e3a0e000 	mov	lr, #0
    case 1: k1 ^= tail[0];
 1004318:	e7d0c10c 	ldrb	ip, [r0, ip, lsl #2]
            k1 *= c1;
 100431c:	e3023d51 	movw	r3, #11601	; 0x2d51
 1004320:	e34c3c9e 	movt	r3, #52382	; 0xcc9e
            k1 *= c2;
 1004324:	e3030593 	movw	r0, #13715	; 0x3593
 1004328:	e3410b87 	movt	r0, #7047	; 0x1b87
    case 1: k1 ^= tail[0];
 100432c:	e02ee00c 	eor	lr, lr, ip
            k1 *= c1;
 1004330:	e0030e93 	mul	r3, r3, lr
    return (x << r) | (x >> (32 - r));
 1004334:	e1a038e3 	ror	r3, r3, #17
            k1 *= c2;
 1004338:	e0030390 	mul	r3, r0, r3
            h1 ^= k1;
 100433c:	e0222003 	eor	r2, r2, r3
 1004340:	eaffffe7 	b	10042e4 <hashtable_hash+0x1ec>
    case 3: k1 ^= tail[2] << 16;
 1004344:	e5d9e002 	ldrb	lr, [r9, #2]
 1004348:	e1a0e80e 	lsl	lr, lr, #16
    case 2: k1 ^= tail[1] << 8;
 100434c:	e5d93001 	ldrb	r3, [r9, #1]
 1004350:	e18ee403 	orr	lr, lr, r3, lsl #8
 1004354:	eaffffef 	b	1004318 <hashtable_hash+0x220>
    uint32_t k1 = 0;
 1004358:	e3a0e000 	mov	lr, #0
 100435c:	eafffffa 	b	100434c <hashtable_hash+0x254>

01004360 <hashtable_hash_ptr>:
    const uint32_t c1 = 0xcc9e2d51;
    const uint32_t c2 = 0x1b873593;

    uint32_t k1 = (uint32_t) (uintptr_t) key;

    k1 *= c1;
 1004360:	e302cd51 	movw	ip, #11601	; 0x2d51
{
 1004364:	e92d4010 	push	{r4, lr}
    k1 *= c1;
 1004368:	e34ccc9e 	movt	ip, #52382	; 0xcc9e
    k1 = ROTL32(k1,15);
    k1 *= c2;
 100436c:	e3033593 	movw	r3, #13715	; 0x3593
    k1 *= c1;
 1004370:	e000009c 	mul	r0, ip, r0
    k1 *= c2;
 1004374:	e3413b87 	movt	r3, #7047	; 0x1b87

    h1 ^= k1;
    h1 = ROTL32(h1,13);
    h1 = h1*5+0xe6546b64;
 1004378:	e306cb64 	movw	ip, #27492	; 0x6b64
    h *= 0x85ebca6b;
 100437c:	e30cea6b 	movw	lr, #51819	; 0xca6b
    h1 = h1*5+0xe6546b64;
 1004380:	e34ec654 	movt	ip, #58964	; 0xe654
    h *= 0x85ebca6b;
 1004384:	e348e5eb 	movt	lr, #34283	; 0x85eb
    return (x << r) | (x >> (32 - r));
 1004388:	e1a048e0 	ror	r4, r0, #17
    h *= 0xc2b2ae35;
 100438c:	e30a0e35 	movw	r0, #44597	; 0xae35
 1004390:	e34c02b2 	movt	r0, #49842	; 0xc2b2
    k1 *= c2;
 1004394:	e0030493 	mul	r3, r3, r4
    h1 ^= k1;
 1004398:	e0222003 	eor	r2, r2, r3
    return (x << r) | (x >> (32 - r));
 100439c:	e1a029e2 	ror	r2, r2, #19
    h1 = h1*5+0xe6546b64;
 10043a0:	e0822102 	add	r2, r2, r2, lsl #2
 10043a4:	e082c00c 	add	ip, r2, ip

    /* Since the pointers are power of two length
     * we don't need a tail mix */

    h1 ^= len;
 10043a8:	e021100c 	eor	r1, r1, ip
    h ^= h >> 16;
 10043ac:	e0211821 	eor	r1, r1, r1, lsr #16
    h *= 0x85ebca6b;
 10043b0:	e001019e 	mul	r1, lr, r1
    h ^= h >> 13;
 10043b4:	e02116a1 	eor	r1, r1, r1, lsr #13
    h *= 0xc2b2ae35;
 10043b8:	e0000190 	mul	r0, r0, r1
    h1  = fmix32(h1);

    return (size_t) h1;
}
 10043bc:	e0200820 	eor	r0, r0, r0, lsr #16
 10043c0:	e8bd8010 	pop	{r4, pc}

010043c4 <split>:
 *
 * @return
 */
static Node *split(List *list, Node *b, size_t size, int (*cmp) (void const*, void const*))
{
    if (size < 2)
 10043c4:	e3520001 	cmp	r2, #1
{
 10043c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10043cc:	e24dd01c 	sub	sp, sp, #28
        return b;
 10043d0:	958d100c 	strls	r1, [sp, #12]
    if (size < 2)
 10043d4:	9a000055 	bls	1004530 <split+0x16c>

    size_t l_size = size / 2;
 10043d8:	e1a070a2 	lsr	r7, r2, #1
    size_t r_size = size / 2 + (size % 2);
 10043dc:	e2022001 	and	r2, r2, #1

    Node *center = b;
 10043e0:	e1a04001 	mov	r4, r1
    size_t r_size = size / 2 + (size % 2);
 10043e4:	e0828007 	add	r8, r2, r7

    size_t i;
    for (i = 0; i < l_size; i++)
 10043e8:	e3a02000 	mov	r2, #0
 10043ec:	e2822001 	add	r2, r2, #1
        center = center->next;
 10043f0:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < l_size; i++)
 10043f4:	e1570002 	cmp	r7, r2
 10043f8:	1afffffb 	bne	10043ec <split+0x28>

    Node *l_head = split(list, b, l_size, cmp);
 10043fc:	e1a09003 	mov	r9, r3
 1004400:	e1a06000 	mov	r6, r0
 1004404:	e1a02007 	mov	r2, r7
 1004408:	e58d0014 	str	r0, [sp, #20]
 100440c:	ebffffec 	bl	10043c4 <split>
    Node *r_head = split(list, center, r_size, cmp);
 1004410:	e1a03009 	mov	r3, r9
 1004414:	e1a02008 	mov	r2, r8
    Node *l_head = split(list, b, l_size, cmp);
 1004418:	e1a05000 	mov	r5, r0
    Node *r_head = split(list, center, r_size, cmp);
 100441c:	e1a01004 	mov	r1, r4
 1004420:	e1a00006 	mov	r0, r6
 *@param[in]      cmp    the comparator function
 */
static INLINE void merge(Node **left, Node **right, size_t l_size,
                        size_t r_size, int (*cmp) (void const*, void const*))
{
    size_t size = r_size + l_size;
 1004424:	e0876008 	add	r6, r7, r8
    Node *r_head = split(list, center, r_size, cmp);
 1004428:	ebffffe5 	bl	10043c4 <split>
 100442c:	e2462002 	sub	r2, r6, #2
    size_t l    = 0; /* Number of processed elements from the left partition */
    size_t r    = 0; /* NUmber of processed elements from the right partition. */
 1004430:	e3a0a000 	mov	sl, #0
 1004434:	e16f2f12 	clz	r2, r2
 1004438:	e1a03006 	mov	r3, r6
 100443c:	e1a022a2 	lsr	r2, r2, #5
    size_t l    = 0; /* Number of processed elements from the left partition */
 1004440:	e1a0b00a 	mov	fp, sl
 1004444:	e58d7008 	str	r7, [sp, #8]

    Node *l_part = *left;
    Node *r_part = *right;
 1004448:	e1a04000 	mov	r4, r0
 100444c:	e1a07008 	mov	r7, r8
    Node *r_head = split(list, center, r_size, cmp);
 1004450:	e58d0010 	str	r0, [sp, #16]

    size_t i;
    for (i = 0; i < size; i++) {
 1004454:	e1a0800a 	mov	r8, sl
    Node *l_head = split(list, b, l_size, cmp);
 1004458:	e58d500c 	str	r5, [sp, #12]
 100445c:	e1a0a009 	mov	sl, r9
 1004460:	e58d2004 	str	r2, [sp, #4]
    size_t size = r_size + l_size;
 1004464:	e3a06001 	mov	r6, #1
 1004468:	e1a09003 	mov	r9, r3
 100446c:	ea000017 	b	10044d0 <split+0x10c>
                break;
            }
            l_part = l_part->next;
            l++;
        } else {
            Node *tmp = (r_part)->next;
 1004470:	e5941004 	ldr	r1, [r4, #4]
 *                 node
 */
static void link_behind(Node *const base, Node *ins)
{
    /* link the gap */
    if (ins->next != NULL)
 1004474:	e5940008 	ldr	r0, [r4, #8]
 1004478:	e3510000 	cmp	r1, #0
        ins->next->prev = ins->prev;
 100447c:	15810008 	strne	r0, [r1, #8]
 1004480:	15940008 	ldrne	r0, [r4, #8]

    if (ins->prev != NULL)
 1004484:	e3500000 	cmp	r0, #0
        ins->prev->next = ins->next;
 1004488:	15801004 	strne	r1, [r0, #4]

    /* link behind */
    if (base->prev == NULL) {
 100448c:	e5950008 	ldr	r0, [r5, #8]
 1004490:	e3500000 	cmp	r0, #0
        ins->prev       = NULL;
 1004494:	e5840008 	str	r0, [r4, #8]
        ins->next       = base;
        base->prev      = ins;
    } else {
        ins->prev       = base->prev;
        ins->prev->next = ins;
 1004498:	15804004 	strne	r4, [r0, #4]
            if (i == 0 && size == 2) {
 100449c:	e35c0000 	cmp	ip, #0
        ins->next       = base;
 10044a0:	e5845004 	str	r5, [r4, #4]
        base->prev      = ins;
 10044a4:	e5854008 	str	r4, [r5, #8]
            if (i == 0 && size == 2) {
 10044a8:	1a000025 	bne	1004544 <split+0x180>
            r++;
 10044ac:	e28bb001 	add	fp, fp, #1
            if (r == r_size) {
 10044b0:	e157000b 	cmp	r7, fp
 10044b4:	0a000024 	beq	100454c <split+0x188>
            if (i == 0) {
 10044b8:	e3560001 	cmp	r6, #1
 10044bc:	0a00001e 	beq	100453c <split+0x178>
    for (i = 0; i < size; i++) {
 10044c0:	e1590006 	cmp	r9, r6
 10044c4:	9a000014 	bls	100451c <split+0x158>
 10044c8:	e2866001 	add	r6, r6, #1
            if (i == 0) {
 10044cc:	e1a04001 	mov	r4, r1
        int c = cmp(&(l_part->data), &(r_part->data));
 10044d0:	e1a01004 	mov	r1, r4
 10044d4:	e1a00005 	mov	r0, r5
 10044d8:	e12fff3a 	blx	sl
        if ((c < 0 || c == 0)) {
 10044dc:	e59dc004 	ldr	ip, [sp, #4]
 10044e0:	e3560001 	cmp	r6, #1
 10044e4:	13a0c000 	movne	ip, #0
 10044e8:	020cc001 	andeq	ip, ip, #1
 10044ec:	e3500000 	cmp	r0, #0
 10044f0:	caffffde 	bgt	1004470 <split+0xac>
            if (i == 0 && size == 2) {
 10044f4:	e35c0000 	cmp	ip, #0
 10044f8:	1a000007 	bne	100451c <split+0x158>
            if (l == l_size) {
 10044fc:	e59d3008 	ldr	r3, [sp, #8]
 1004500:	e1530008 	cmp	r3, r8
 1004504:	0a00001c 	beq	100457c <split+0x1b8>
    for (i = 0; i < size; i++) {
 1004508:	e1590006 	cmp	r9, r6
            l_part = l_part->next;
 100450c:	e5955004 	ldr	r5, [r5, #4]
            l++;
 1004510:	e2888001 	add	r8, r8, #1
 1004514:	e1a01004 	mov	r1, r4
    for (i = 0; i < size; i++) {
 1004518:	8affffea 	bhi	10044c8 <split+0x104>
    list->head = l_head;
 100451c:	e59d3014 	ldr	r3, [sp, #20]
 1004520:	e59d200c 	ldr	r2, [sp, #12]
 1004524:	e5832004 	str	r2, [r3, #4]
    list->tail = r_head;
 1004528:	e59d2010 	ldr	r2, [sp, #16]
 100452c:	e5832008 	str	r2, [r3, #8]
}
 1004530:	e59d000c 	ldr	r0, [sp, #12]
 1004534:	e28dd01c 	add	sp, sp, #28
 1004538:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (i == 0) {
 100453c:	e58d400c 	str	r4, [sp, #12]
 1004540:	eaffffe0 	b	10044c8 <split+0x104>
            if (i == 0 && size == 2) {
 1004544:	e1cd40fc 	strd	r4, [sp, #12]
 1004548:	eafffff3 	b	100451c <split+0x158>
 100454c:	e59d7008 	ldr	r7, [sp, #8]
 1004550:	e1a0b008 	mov	fp, r8
                for (;l < l_size - 1; l++)
 1004554:	e2477001 	sub	r7, r7, #1
 1004558:	e1570008 	cmp	r7, r8
 100455c:	9a000010 	bls	10045a4 <split+0x1e0>
 1004560:	e1a03005 	mov	r3, r5
 1004564:	e28bb001 	add	fp, fp, #1
                    l_part = l_part->next;
 1004568:	e5933004 	ldr	r3, [r3, #4]
                for (;l < l_size - 1; l++)
 100456c:	e157000b 	cmp	r7, fp
 1004570:	1afffffb 	bne	1004564 <split+0x1a0>
 1004574:	e58d3010 	str	r3, [sp, #16]
 1004578:	eaffffe7 	b	100451c <split+0x158>
                for (;r < r_size - 1; r++)
 100457c:	e2478001 	sub	r8, r7, #1
 1004580:	e1a0a00b 	mov	sl, fp
 1004584:	e158000b 	cmp	r8, fp
 1004588:	9a000007 	bls	10045ac <split+0x1e8>
 100458c:	e1a03004 	mov	r3, r4
 1004590:	e28aa001 	add	sl, sl, #1
                    r_part = r_part->next;
 1004594:	e5933004 	ldr	r3, [r3, #4]
                for (;r < r_size - 1; r++)
 1004598:	e15a0008 	cmp	sl, r8
 100459c:	1afffffb 	bne	1004590 <split+0x1cc>
 10045a0:	eafffff3 	b	1004574 <split+0x1b0>
                for (;l < l_size - 1; l++)
 10045a4:	e58d5010 	str	r5, [sp, #16]
 10045a8:	eaffffdb 	b	100451c <split+0x158>
                for (;r < r_size - 1; r++)
 10045ac:	e58d4010 	str	r4, [sp, #16]
 10045b0:	eaffffd9 	b	100451c <split+0x158>

010045b4 <list_add_all_at.part.3>:
    for (i = 0; i < list->size; i++) {
 10045b4:	e5913000 	ldr	r3, [r1]
enum cc_stat list_add_all_at(List *list1, List *list2, size_t index)
 10045b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10045bc:	e1a08000 	mov	r8, r0
 10045c0:	e1a0a002 	mov	sl, r2
    Node *insert = list->head;
 10045c4:	e5916004 	ldr	r6, [r1, #4]
    for (i = 0; i < list->size; i++) {
 10045c8:	e3530000 	cmp	r3, #0
    Node *tail = NULL;
 10045cc:	01a00003 	moveq	r0, r3
    Node *head = NULL;
 10045d0:	01a05003 	moveq	r5, r3
    for (i = 0; i < list->size; i++) {
 10045d4:	0a00001a 	beq	1004644 <list_add_all_at.part.3+0x90>
    Node *tail = NULL;
 10045d8:	e3a09000 	mov	r9, #0
 10045dc:	e1a07001 	mov	r7, r1
    Node *head = NULL;
 10045e0:	e1a05009 	mov	r5, r9
    for (i = 0; i < list->size; i++) {
 10045e4:	e1a04009 	mov	r4, r9
 10045e8:	ea000005 	b	1004604 <list_add_all_at.part.3+0x50>
 10045ec:	e1530004 	cmp	r3, r4
            (*t)->next = new;
 10045f0:	e5890004 	str	r0, [r9, #4]
            new->prev  = *t;
 10045f4:	e5809008 	str	r9, [r0, #8]
        insert = insert->next;
 10045f8:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 10045fc:	9a000010 	bls	1004644 <list_add_all_at.part.3+0x90>
 1004600:	e1a09000 	mov	r9, r0
        Node *new = list->mem_calloc(1, sizeof(Node));
 1004604:	e5973010 	ldr	r3, [r7, #16]
 1004608:	e3a0100c 	mov	r1, #12
 100460c:	e3a00001 	mov	r0, #1
 1004610:	e12fff33 	blx	r3
        if (!new) {
 1004614:	e3500000 	cmp	r0, #0
 1004618:	0a000032 	beq	10046e8 <list_add_all_at.part.3+0x134>
        new->data = insert->data;
 100461c:	e5963000 	ldr	r3, [r6]
        if (!*h) {
 1004620:	e3550000 	cmp	r5, #0
    for (i = 0; i < list->size; i++) {
 1004624:	e2844001 	add	r4, r4, #1
        new->data = insert->data;
 1004628:	e5803000 	str	r3, [r0]
    for (i = 0; i < list->size; i++) {
 100462c:	e5973000 	ldr	r3, [r7]
        if (!*h) {
 1004630:	1affffed 	bne	10045ec <list_add_all_at.part.3+0x38>
    for (i = 0; i < list->size; i++) {
 1004634:	e1540003 	cmp	r4, r3
 1004638:	e1a05000 	mov	r5, r0
        insert = insert->next;
 100463c:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 1004640:	3affffee 	bcc	1004600 <list_add_all_at.part.3+0x4c>
 *
 * @return CC_OK if the node was found, or CC_ERR_OUT_OF_RANGE if not.
 */
static enum cc_stat get_node_at(List *list, size_t index, Node **out)
{
    if (!list || index >= list->size)
 1004644:	e598c000 	ldr	ip, [r8]
 1004648:	e15c000a 	cmp	ip, sl
 100464c:	9a000020 	bls	10046d4 <list_add_all_at.part.3+0x120>
        return CC_ERR_OUT_OF_RANGE;

    size_t i;
    Node *node = NULL;

    if (index < list->size / 2) {
 1004650:	e15a00ac 	cmp	sl, ip, lsr #1
 1004654:	2a000014 	bcs	10046ac <list_add_all_at.part.3+0xf8>
        node = list->head;
        for (i = 0; i < index; i++)
 1004658:	e35a0000 	cmp	sl, #0
        node = list->head;
 100465c:	e5981004 	ldr	r1, [r8, #4]
        for (i = 0; i < index; i++)
 1004660:	0a000004 	beq	1004678 <list_add_all_at.part.3+0xc4>
 1004664:	e3a02000 	mov	r2, #0
 1004668:	e2822001 	add	r2, r2, #1
            node = node->next;
 100466c:	e5911004 	ldr	r1, [r1, #4]
        for (i = 0; i < index; i++)
 1004670:	e15a0002 	cmp	sl, r2
 1004674:	1afffffb 	bne	1004668 <list_add_all_at.part.3+0xb4>
    if (end)
 1004678:	e3510000 	cmp	r1, #0
 100467c:	0a000014 	beq	10046d4 <list_add_all_at.part.3+0x120>
        base = end->prev;
 1004680:	e5912008 	ldr	r2, [r1, #8]
    } else if (!base) {
 1004684:	e3520000 	cmp	r2, #0
 1004688:	0a000020 	beq	1004710 <list_add_all_at.part.3+0x15c>
        head->prev        = base;
 100468c:	e5852008 	str	r2, [r5, #8]
        base->next        = head;
 1004690:	e5825004 	str	r5, [r2, #4]
        tail->next        = end;
 1004694:	e5801004 	str	r1, [r0, #4]
        end->prev         = tail;
 1004698:	e5810008 	str	r0, [r1, #8]
    list1->size += list2->size;
 100469c:	e083300c 	add	r3, r3, ip
    return CC_OK;
 10046a0:	e3a00000 	mov	r0, #0
    list1->size += list2->size;
 10046a4:	e5883000 	str	r3, [r8]
}
 10046a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    } else {
        node = list->tail;
        for (i = list->size - 1; i > index; i--)
 10046ac:	e24c2001 	sub	r2, ip, #1
        node = list->tail;
 10046b0:	e5981008 	ldr	r1, [r8, #8]
        for (i = list->size - 1; i > index; i--)
 10046b4:	e15a0002 	cmp	sl, r2
 10046b8:	2affffee 	bcs	1004678 <list_add_all_at.part.3+0xc4>
 10046bc:	e2422001 	sub	r2, r2, #1
            node = node->prev;
 10046c0:	e5911008 	ldr	r1, [r1, #8]
        for (i = list->size - 1; i > index; i--)
 10046c4:	e15a0002 	cmp	sl, r2
 10046c8:	1afffffb 	bne	10046bc <list_add_all_at.part.3+0x108>
    if (end)
 10046cc:	e3510000 	cmp	r1, #0
 10046d0:	1affffea 	bne	1004680 <list_add_all_at.part.3+0xcc>
        list1->tail->next = head;
 10046d4:	e5982008 	ldr	r2, [r8, #8]
 10046d8:	e5825004 	str	r5, [r2, #4]
        head->prev        = list1->tail;
 10046dc:	e5852008 	str	r2, [r5, #8]
        list1->tail       = tail;
 10046e0:	e5880008 	str	r0, [r8, #8]
 10046e4:	eaffffec 	b	100469c <list_add_all_at.part.3+0xe8>
            while (*h) {
 10046e8:	e3550000 	cmp	r5, #0
 10046ec:	0a000005 	beq	1004708 <list_add_all_at.part.3+0x154>
                Node *tmp = (*h)->next;
 10046f0:	e5954004 	ldr	r4, [r5, #4]
                list->mem_free(*h);
 10046f4:	e1a00005 	mov	r0, r5
 10046f8:	e5973014 	ldr	r3, [r7, #20]
 10046fc:	e12fff33 	blx	r3
            while (*h) {
 1004700:	e2545000 	subs	r5, r4, #0
 1004704:	1afffff9 	bne	10046f0 <list_add_all_at.part.3+0x13c>
        return CC_ERR_ALLOC;
 1004708:	e3a00001 	mov	r0, #1
 100470c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list1->head->prev = tail;
 1004710:	e5982004 	ldr	r2, [r8, #4]
 1004714:	e5820008 	str	r0, [r2, #8]
        tail->next        = list1->head;
 1004718:	e5802004 	str	r2, [r0, #4]
        list1->head       = head;
 100471c:	e5885004 	str	r5, [r8, #4]
 1004720:	eaffffdd 	b	100469c <list_add_all_at.part.3+0xe8>

01004724 <list_conf_init>:
    conf->mem_alloc  = malloc;
 1004724:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    conf->mem_calloc = calloc;
 1004728:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 100472c:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    conf->mem_alloc  = malloc;
 1004730:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1004734:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1004738:	e3403101 	movt	r3, #257	; 0x101
 100473c:	e880000e 	stm	r0, {r1, r2, r3}
}
 1004740:	e12fff1e 	bx	lr

01004744 <list_new>:
{
 1004744:	e92d4010 	push	{r4, lr}
    List *list = conf->mem_calloc(1, sizeof(List));
 1004748:	e3a01018 	mov	r1, #24
{
 100474c:	e1a04000 	mov	r4, r0
    List *list = conf->mem_calloc(1, sizeof(List));
 1004750:	e3a00001 	mov	r0, #1
 1004754:	fa005d17 	blx	101bbb8 <calloc>
    if (!list)
 1004758:	e2503000 	subs	r3, r0, #0
 100475c:	0a00000b 	beq	1004790 <list_new+0x4c>
    list->mem_alloc  = conf->mem_alloc;
 1004760:	e30cc7b9 	movw	ip, #51129	; 0xc7b9
    list->mem_calloc = conf->mem_calloc;
 1004764:	e30b1bb9 	movw	r1, #48057	; 0xbbb9
    list->mem_free   = conf->mem_free;
 1004768:	e30c27c9 	movw	r2, #51145	; 0xc7c9
    list->mem_alloc  = conf->mem_alloc;
 100476c:	e340c101 	movt	ip, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1004770:	e3401101 	movt	r1, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1004774:	e3402101 	movt	r2, #257	; 0x101
    *out = list;
 1004778:	e5843000 	str	r3, [r4]
    return CC_OK;
 100477c:	e3a00000 	mov	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1004780:	e583c00c 	str	ip, [r3, #12]
    list->mem_calloc = conf->mem_calloc;
 1004784:	e5831010 	str	r1, [r3, #16]
    list->mem_free   = conf->mem_free;
 1004788:	e5832014 	str	r2, [r3, #20]
    return CC_OK;
 100478c:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_ALLOC;
 1004790:	e3a00001 	mov	r0, #1
}
 1004794:	e8bd8010 	pop	{r4, pc}

01004798 <list_new_conf>:
{
 1004798:	e92d4070 	push	{r4, r5, r6, lr}
 100479c:	e1a04000 	mov	r4, r0
 10047a0:	e1a05001 	mov	r5, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 10047a4:	e5903004 	ldr	r3, [r0, #4]
 10047a8:	e3a01018 	mov	r1, #24
 10047ac:	e3a00001 	mov	r0, #1
 10047b0:	e12fff33 	blx	r3
    if (!list)
 10047b4:	e2503000 	subs	r3, r0, #0
    list->mem_alloc  = conf->mem_alloc;
 10047b8:	1594c000 	ldrne	ip, [r4]
    return CC_OK;
 10047bc:	13a00000 	movne	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 10047c0:	19940006 	ldmibne	r4, {r1, r2}
        return CC_ERR_ALLOC;
 10047c4:	03a00001 	moveq	r0, #1
    list->mem_alloc  = conf->mem_alloc;
 10047c8:	1583c00c 	strne	ip, [r3, #12]
 10047cc:	15831010 	strne	r1, [r3, #16]
 10047d0:	15832014 	strne	r2, [r3, #20]
    *out = list;
 10047d4:	15853000 	strne	r3, [r5]
}
 10047d8:	e8bd8070 	pop	{r4, r5, r6, pc}

010047dc <list_destroy>:
    if (list->size > 0)
 10047dc:	e5903000 	ldr	r3, [r0]
{
 10047e0:	e92d4070 	push	{r4, r5, r6, lr}
 10047e4:	e1a04000 	mov	r4, r0
    if (list->size > 0)
 10047e8:	e3530000 	cmp	r3, #0
 10047ec:	1a000003 	bne	1004800 <list_destroy+0x24>
    list->mem_free(list);
 10047f0:	e5943014 	ldr	r3, [r4, #20]
 10047f4:	e1a00004 	mov	r0, r4
}
 10047f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    list->mem_free(list);
 10047fc:	e12fff13 	bx	r3
    Node *node = list->head;
 1004800:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1004804:	e3530000 	cmp	r3, #0
 1004808:	1a00000e 	bne	1004848 <list_destroy+0x6c>
 100480c:	ea000019 	b	1004878 <list_destroy+0x9c>
        node->prev->next = node->next;
 1004810:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 1004814:	e1a00003 	mov	r0, r3
 1004818:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 100481c:	e3510000 	cmp	r1, #0
 1004820:	0a000011 	beq	100486c <list_destroy+0x90>
    list->mem_free(node);
 1004824:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1004828:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 100482c:	e12fff33 	blx	r3
    list->size--;
 1004830:	e5943000 	ldr	r3, [r4]
    while (node) {
 1004834:	e3550000 	cmp	r5, #0
    list->size--;
 1004838:	e2433001 	sub	r3, r3, #1
 100483c:	e5843000 	str	r3, [r4]
    while (node) {
 1004840:	0a00000c 	beq	1004878 <list_destroy+0x9c>
{
 1004844:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 1004848:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 100484c:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 1004850:	e3520000 	cmp	r2, #0
 1004854:	1affffed 	bne	1004810 <list_destroy+0x34>
        Node *tmp = node->next;
 1004858:	e1a01005 	mov	r1, r5
        list->head = node->next;
 100485c:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 1004860:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 1004864:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 1004868:	1affffed 	bne	1004824 <list_destroy+0x48>
        list->tail = node->prev;
 100486c:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 1004870:	e5943014 	ldr	r3, [r4, #20]
 1004874:	eaffffec 	b	100482c <list_destroy+0x50>
        list->head = NULL;
 1004878:	e3a03000 	mov	r3, #0
    list->mem_free(list);
 100487c:	e1a00004 	mov	r0, r4
        list->head = NULL;
 1004880:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1004884:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1004888:	e5943014 	ldr	r3, [r4, #20]
}
 100488c:	e8bd4070 	pop	{r4, r5, r6, lr}
    list->mem_free(list);
 1004890:	e12fff13 	bx	r3

01004894 <list_destroy_cb>:
    if (list->size == 0)
 1004894:	e5903000 	ldr	r3, [r0]
{
 1004898:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100489c:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 10048a0:	e3530000 	cmp	r3, #0
 10048a4:	0a000038 	beq	100498c <list_destroy_cb+0xf8>
    Node *node = list->head;
 10048a8:	e5905004 	ldr	r5, [r0, #4]
    while (node) {
 10048ac:	e3550000 	cmp	r5, #0
 10048b0:	0a000032 	beq	1004980 <list_destroy_cb+0xec>
 10048b4:	e3510000 	cmp	r1, #0
 10048b8:	e1a07001 	mov	r7, r1
 10048bc:	1a000020 	bne	1004944 <list_destroy_cb+0xb0>
 10048c0:	ea000008 	b	10048e8 <list_destroy_cb+0x54>
    list->mem_free(node);
 10048c4:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 10048c8:	e5823008 	str	r3, [r2, #8]
    list->mem_free(node);
 10048cc:	e12fff31 	blx	r1
    list->size--;
 10048d0:	e5943000 	ldr	r3, [r4]
    while (node) {
 10048d4:	e3560000 	cmp	r6, #0
    list->size--;
 10048d8:	e2433001 	sub	r3, r3, #1
 10048dc:	e5843000 	str	r3, [r4]
    while (node) {
 10048e0:	0a000026 	beq	1004980 <list_destroy_cb+0xec>
{
 10048e4:	e1a05006 	mov	r5, r6
    if (node->prev != NULL)
 10048e8:	e5953008 	ldr	r3, [r5, #8]
    list->mem_free(node);
 10048ec:	e1a00005 	mov	r0, r5
        Node *tmp = node->next;
 10048f0:	e5956004 	ldr	r6, [r5, #4]
    if (node->prev != NULL)
 10048f4:	e3530000 	cmp	r3, #0
        node->prev->next = node->next;
 10048f8:	15836004 	strne	r6, [r3, #4]
        Node *tmp = node->next;
 10048fc:	01a02006 	moveq	r2, r6
 1004900:	15952004 	ldrne	r2, [r5, #4]
        list->head = node->next;
 1004904:	05846004 	streq	r6, [r4, #4]
    if (node->next == NULL)
 1004908:	e3520000 	cmp	r2, #0
 100490c:	1affffec 	bne	10048c4 <list_destroy_cb+0x30>
        list->tail = node->prev;
 1004910:	e5843008 	str	r3, [r4, #8]
    list->mem_free(node);
 1004914:	e5943014 	ldr	r3, [r4, #20]
 1004918:	e12fff33 	blx	r3
 100491c:	eaffffeb 	b	10048d0 <list_destroy_cb+0x3c>
 1004920:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 1004924:	e5832008 	str	r2, [r3, #8]
    list->mem_free(node);
 1004928:	e12fff31 	blx	r1
    list->size--;
 100492c:	e5943000 	ldr	r3, [r4]
    while (node) {
 1004930:	e3560000 	cmp	r6, #0
    list->size--;
 1004934:	e2433001 	sub	r3, r3, #1
 1004938:	e5843000 	str	r3, [r4]
    while (node) {
 100493c:	0a00000f 	beq	1004980 <list_destroy_cb+0xec>
        Node *tmp = node->next;
 1004940:	e1a05006 	mov	r5, r6
 1004944:	e8950041 	ldm	r5, {r0, r6}
            cb(node->data);
 1004948:	e12fff37 	blx	r7
    if (node->prev != NULL)
 100494c:	e5952008 	ldr	r2, [r5, #8]
    list->mem_free(node);
 1004950:	e1a00005 	mov	r0, r5
 1004954:	e5953004 	ldr	r3, [r5, #4]
    if (node->prev != NULL)
 1004958:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 100495c:	15823004 	strne	r3, [r2, #4]
    if (node->prev == NULL)
 1004960:	15953004 	ldrne	r3, [r5, #4]
        list->head = node->next;
 1004964:	05843004 	streq	r3, [r4, #4]
    if (node->next == NULL)
 1004968:	e3530000 	cmp	r3, #0
 100496c:	1affffeb 	bne	1004920 <list_destroy_cb+0x8c>
        list->tail = node->prev;
 1004970:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 1004974:	e5943014 	ldr	r3, [r4, #20]
 1004978:	e12fff33 	blx	r3
    list->size--;
 100497c:	eaffffea 	b	100492c <list_destroy_cb+0x98>
        list->head = NULL;
 1004980:	e3a03000 	mov	r3, #0
 1004984:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1004988:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 100498c:	e5943014 	ldr	r3, [r4, #20]
 1004990:	e1a00004 	mov	r0, r4
}
 1004994:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    list->mem_free(list);
 1004998:	e12fff13 	bx	r3

0100499c <list_add>:
{
 100499c:	e92d4070 	push	{r4, r5, r6, lr}
 10049a0:	e1a04000 	mov	r4, r0
    Node *node = list->mem_calloc(1, sizeof(Node));
 10049a4:	e5903010 	ldr	r3, [r0, #16]
{
 10049a8:	e1a05001 	mov	r5, r1
    Node *node = list->mem_calloc(1, sizeof(Node));
 10049ac:	e3a00001 	mov	r0, #1
 10049b0:	e3a0100c 	mov	r1, #12
 10049b4:	e12fff33 	blx	r3
    if (node == NULL)
 10049b8:	e3500000 	cmp	r0, #0
 10049bc:	0a00000b 	beq	10049f0 <list_add+0x54>
    if (list->size == 0) {
 10049c0:	e5943000 	ldr	r3, [r4]
    node->data = element;
 10049c4:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 10049c8:	e3530000 	cmp	r3, #0
    list->size++;
 10049cc:	e2833001 	add	r3, r3, #1
        node->prev = list->tail;
 10049d0:	15942008 	ldrne	r2, [r4, #8]
        list->head = node;
 10049d4:	05840004 	streq	r0, [r4, #4]
        node->prev = list->tail;
 10049d8:	15802008 	strne	r2, [r0, #8]
        list->tail->next = node;
 10049dc:	15820004 	strne	r0, [r2, #4]
        list->tail = node;
 10049e0:	e5840008 	str	r0, [r4, #8]
    return CC_OK;
 10049e4:	e3a00000 	mov	r0, #0
    list->size++;
 10049e8:	e5843000 	str	r3, [r4]
    return CC_OK;
 10049ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10049f0:	e3a00001 	mov	r0, #1
}
 10049f4:	e8bd8070 	pop	{r4, r5, r6, pc}

010049f8 <list_add_first>:
{
 10049f8:	e92d4070 	push	{r4, r5, r6, lr}
 10049fc:	e1a04000 	mov	r4, r0
    Node *node = list->mem_calloc(1, sizeof(Node));
 1004a00:	e5903010 	ldr	r3, [r0, #16]
{
 1004a04:	e1a05001 	mov	r5, r1
    Node *node = list->mem_calloc(1, sizeof(Node));
 1004a08:	e3a00001 	mov	r0, #1
 1004a0c:	e3a0100c 	mov	r1, #12
 1004a10:	e12fff33 	blx	r3
    if (node == NULL)
 1004a14:	e3500000 	cmp	r0, #0
 1004a18:	0a00000c 	beq	1004a50 <list_add_first+0x58>
    if (list->size == 0) {
 1004a1c:	e5943000 	ldr	r3, [r4]
    node->data = element;
 1004a20:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 1004a24:	e3530000 	cmp	r3, #0
    list->size++;
 1004a28:	e2833001 	add	r3, r3, #1
        node->next = list->head;
 1004a2c:	15942004 	ldrne	r2, [r4, #4]
        list->head = node;
 1004a30:	05840004 	streq	r0, [r4, #4]
        list->tail = node;
 1004a34:	05840008 	streq	r0, [r4, #8]
        node->next = list->head;
 1004a38:	15802004 	strne	r2, [r0, #4]
        list->head->prev = node;
 1004a3c:	15820008 	strne	r0, [r2, #8]
        list->head = node;
 1004a40:	15840004 	strne	r0, [r4, #4]
    return CC_OK;
 1004a44:	e3a00000 	mov	r0, #0
    list->size++;
 1004a48:	e5843000 	str	r3, [r4]
    return CC_OK;
 1004a4c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1004a50:	e3a00001 	mov	r0, #1
}
 1004a54:	e8bd8070 	pop	{r4, r5, r6, pc}

01004a58 <list_add_last>:
 1004a58:	e92d4070 	push	{r4, r5, r6, lr}
 1004a5c:	e1a04000 	mov	r4, r0
 1004a60:	e5903010 	ldr	r3, [r0, #16]
 1004a64:	e1a05001 	mov	r5, r1
 1004a68:	e3a00001 	mov	r0, #1
 1004a6c:	e3a0100c 	mov	r1, #12
 1004a70:	e12fff33 	blx	r3
 1004a74:	e3500000 	cmp	r0, #0
 1004a78:	0a00000b 	beq	1004aac <list_add_last+0x54>
 1004a7c:	e5943000 	ldr	r3, [r4]
 1004a80:	e5805000 	str	r5, [r0]
 1004a84:	e3530000 	cmp	r3, #0
 1004a88:	e2833001 	add	r3, r3, #1
 1004a8c:	15942008 	ldrne	r2, [r4, #8]
 1004a90:	05840004 	streq	r0, [r4, #4]
 1004a94:	15802008 	strne	r2, [r0, #8]
 1004a98:	15820004 	strne	r0, [r2, #4]
 1004a9c:	e5840008 	str	r0, [r4, #8]
 1004aa0:	e3a00000 	mov	r0, #0
 1004aa4:	e5843000 	str	r3, [r4]
 1004aa8:	e8bd8070 	pop	{r4, r5, r6, pc}
 1004aac:	e3a00001 	mov	r0, #1
 1004ab0:	e8bd8070 	pop	{r4, r5, r6, pc}

01004ab4 <list_add_at>:
{
 1004ab4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (!list || index >= list->size)
 1004ab8:	e2506000 	subs	r6, r0, #0
 1004abc:	0a000032 	beq	1004b8c <list_add_at+0xd8>
 1004ac0:	e5963000 	ldr	r3, [r6]
 1004ac4:	e1520003 	cmp	r2, r3
 1004ac8:	2a00002f 	bcs	1004b8c <list_add_at+0xd8>
    if (index < list->size / 2) {
 1004acc:	e15200a3 	cmp	r2, r3, lsr #1
 1004ad0:	2a000024 	bcs	1004b68 <list_add_at+0xb4>
        for (i = 0; i < index; i++)
 1004ad4:	e3520000 	cmp	r2, #0
        node = list->head;
 1004ad8:	e5964004 	ldr	r4, [r6, #4]
        for (i = 0; i < index; i++)
 1004adc:	0a000004 	beq	1004af4 <list_add_at+0x40>
 1004ae0:	e3a03000 	mov	r3, #0
 1004ae4:	e2833001 	add	r3, r3, #1
            node = node->next;
 1004ae8:	e5944004 	ldr	r4, [r4, #4]
        for (i = 0; i < index; i++)
 1004aec:	e1520003 	cmp	r2, r3
 1004af0:	1afffffb 	bne	1004ae4 <list_add_at+0x30>
    Node *new = list->mem_calloc(1, sizeof(Node));
 1004af4:	e1a07001 	mov	r7, r1
 1004af8:	e5963010 	ldr	r3, [r6, #16]
 1004afc:	e3a0100c 	mov	r1, #12
 1004b00:	e3a00001 	mov	r0, #1
 1004b04:	e1a05002 	mov	r5, r2
 1004b08:	e12fff33 	blx	r3
    if (!new)
 1004b0c:	e3500000 	cmp	r0, #0
 1004b10:	0a00001f 	beq	1004b94 <list_add_at+0xe0>
    if (ins->next != NULL)
 1004b14:	e5902004 	ldr	r2, [r0, #4]
 1004b18:	e5903008 	ldr	r3, [r0, #8]
    new->data = element;
 1004b1c:	e5807000 	str	r7, [r0]
    if (ins->next != NULL)
 1004b20:	e3520000 	cmp	r2, #0
        ins->next->prev = ins->prev;
 1004b24:	15823008 	strne	r3, [r2, #8]
 1004b28:	15903008 	ldrne	r3, [r0, #8]
    if (ins->prev != NULL)
 1004b2c:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1004b30:	15832004 	strne	r2, [r3, #4]
    if (base->prev == NULL) {
 1004b34:	e5943008 	ldr	r3, [r4, #8]
 1004b38:	e3530000 	cmp	r3, #0
        ins->prev       = NULL;
 1004b3c:	e5803008 	str	r3, [r0, #8]
        ins->prev->next = ins;
 1004b40:	15830004 	strne	r0, [r3, #4]
    if (index == 0)
 1004b44:	e3550000 	cmp	r5, #0
    list->size++;
 1004b48:	e5963000 	ldr	r3, [r6]
        ins->next       = base;
 1004b4c:	e5804004 	str	r4, [r0, #4]
        base->prev      = ins;
 1004b50:	e5840008 	str	r0, [r4, #8]
    list->size++;
 1004b54:	e2833001 	add	r3, r3, #1
        list->head = new;
 1004b58:	05860004 	streq	r0, [r6, #4]
    list->size++;
 1004b5c:	e5863000 	str	r3, [r6]
    return CC_OK;
 1004b60:	e3a00000 	mov	r0, #0
 1004b64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        for (i = list->size - 1; i > index; i--)
 1004b68:	e2433001 	sub	r3, r3, #1
        node = list->tail;
 1004b6c:	e5964008 	ldr	r4, [r6, #8]
        for (i = list->size - 1; i > index; i--)
 1004b70:	e1520003 	cmp	r2, r3
 1004b74:	2affffde 	bcs	1004af4 <list_add_at+0x40>
 1004b78:	e2433001 	sub	r3, r3, #1
            node = node->prev;
 1004b7c:	e5944008 	ldr	r4, [r4, #8]
        for (i = list->size - 1; i > index; i--)
 1004b80:	e1520003 	cmp	r2, r3
 1004b84:	1afffffb 	bne	1004b78 <list_add_at+0xc4>
 1004b88:	eaffffd9 	b	1004af4 <list_add_at+0x40>
    if (!list || index >= list->size)
 1004b8c:	e3a00008 	mov	r0, #8
 1004b90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1004b94:	e3a00001 	mov	r0, #1
}
 1004b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01004b9c <list_add_all>:
{
 1004b9c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (list1->size == 0)
 1004ba0:	e5904000 	ldr	r4, [r0]
 1004ba4:	e5913000 	ldr	r3, [r1]
 1004ba8:	e3540000 	cmp	r4, #0
 1004bac:	0a000004 	beq	1004bc4 <list_add_all+0x28>
    if (list2->size == 0)
 1004bb0:	e3530000 	cmp	r3, #0
 1004bb4:	0a000004 	beq	1004bcc <list_add_all+0x30>
    if (index > list1->size)
 1004bb8:	e1a02004 	mov	r2, r4
}
 1004bbc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 1004bc0:	eafffe7b 	b	10045b4 <list_add_all_at.part.3>
    if (list2->size == 0)
 1004bc4:	e3530000 	cmp	r3, #0
 1004bc8:	1a000001 	bne	1004bd4 <list_add_all+0x38>
        return CC_OK;
 1004bcc:	e1a00003 	mov	r0, r3
 1004bd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1004bd4:	e1a08000 	mov	r8, r0
 1004bd8:	e1a05001 	mov	r5, r1
    Node *insert = list->head;
 1004bdc:	e5916004 	ldr	r6, [r1, #4]
    Node *tail = NULL;
 1004be0:	e1a09004 	mov	r9, r4
    Node *head = NULL;
 1004be4:	e1a07004 	mov	r7, r4
 1004be8:	ea000005 	b	1004c04 <list_add_all+0x68>
    for (i = 0; i < list->size; i++) {
 1004bec:	e1520004 	cmp	r2, r4
            (*t)->next = new;
 1004bf0:	e5893004 	str	r3, [r9, #4]
            new->prev  = *t;
 1004bf4:	e5839008 	str	r9, [r3, #8]
        insert = insert->next;
 1004bf8:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 1004bfc:	9a000010 	bls	1004c44 <list_add_all+0xa8>
 1004c00:	e1a09003 	mov	r9, r3
        Node *new = list->mem_calloc(1, sizeof(Node));
 1004c04:	e5953010 	ldr	r3, [r5, #16]
 1004c08:	e3a0100c 	mov	r1, #12
 1004c0c:	e3a00001 	mov	r0, #1
 1004c10:	e12fff33 	blx	r3
        if (!new) {
 1004c14:	e2503000 	subs	r3, r0, #0
 1004c18:	0a00000e 	beq	1004c58 <list_add_all+0xbc>
        new->data = insert->data;
 1004c1c:	e5962000 	ldr	r2, [r6]
        if (!*h) {
 1004c20:	e3570000 	cmp	r7, #0
    for (i = 0; i < list->size; i++) {
 1004c24:	e2844001 	add	r4, r4, #1
        new->data = insert->data;
 1004c28:	e5832000 	str	r2, [r3]
    for (i = 0; i < list->size; i++) {
 1004c2c:	e5952000 	ldr	r2, [r5]
        if (!*h) {
 1004c30:	1affffed 	bne	1004bec <list_add_all+0x50>
    for (i = 0; i < list->size; i++) {
 1004c34:	e1540002 	cmp	r4, r2
 1004c38:	e1a07003 	mov	r7, r3
        insert = insert->next;
 1004c3c:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 1004c40:	3affffee 	bcc	1004c00 <list_add_all+0x64>
    return CC_OK;
 1004c44:	e3a00000 	mov	r0, #0
    list1->head = head;
 1004c48:	e5887004 	str	r7, [r8, #4]
    list1->tail = tail;
 1004c4c:	e5883008 	str	r3, [r8, #8]
    list1->size = list2->size;
 1004c50:	e5882000 	str	r2, [r8]
}
 1004c54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            while (*h) {
 1004c58:	e3570000 	cmp	r7, #0
 1004c5c:	0a000005 	beq	1004c78 <list_add_all+0xdc>
                Node *tmp = (*h)->next;
 1004c60:	e5974004 	ldr	r4, [r7, #4]
                list->mem_free(*h);
 1004c64:	e1a00007 	mov	r0, r7
 1004c68:	e5953014 	ldr	r3, [r5, #20]
 1004c6c:	e12fff33 	blx	r3
            while (*h) {
 1004c70:	e2547000 	subs	r7, r4, #0
 1004c74:	1afffff9 	bne	1004c60 <list_add_all+0xc4>
        return CC_ERR_ALLOC;
 1004c78:	e3a00001 	mov	r0, #1
 1004c7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01004c80 <list_add_all_at>:
    if (list2->size == 0)
 1004c80:	e5913000 	ldr	r3, [r1]
 1004c84:	e3530000 	cmp	r3, #0
 1004c88:	0a000008 	beq	1004cb0 <list_add_all_at+0x30>
    if (index > list1->size)
 1004c8c:	e5903000 	ldr	r3, [r0]
{
 1004c90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1004c94:	e1a0e000 	mov	lr, r0
    if (index > list1->size)
 1004c98:	e1530002 	cmp	r3, r2
 1004c9c:	3a000001 	bcc	1004ca8 <list_add_all_at+0x28>
}
 1004ca0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
 1004ca4:	eafffe42 	b	10045b4 <list_add_all_at.part.3>
        return CC_ERR_OUT_OF_RANGE;
 1004ca8:	e3a00008 	mov	r0, #8
}
 1004cac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_OK;
 1004cb0:	e1a00003 	mov	r0, r3
}
 1004cb4:	e12fff1e 	bx	lr

01004cb8 <list_splice>:
    if (list2->size == 0)
 1004cb8:	e5912000 	ldr	r2, [r1]
 1004cbc:	e3520000 	cmp	r2, #0
 1004cc0:	0a000021 	beq	1004d4c <list_splice+0x94>
    return list_splice_at(list1, list2, list1->size);
 1004cc4:	e5903000 	ldr	r3, [r0]
{
 1004cc8:	e92d4070 	push	{r4, r5, r6, lr}
 1004ccc:	e5915004 	ldr	r5, [r1, #4]
    if (list1->size == 0) {
 1004cd0:	e3530000 	cmp	r3, #0
 1004cd4:	e5914008 	ldr	r4, [r1, #8]
 1004cd8:	0a00001d 	beq	1004d54 <list_splice+0x9c>
        get_node_at(list1, index - 1, &base);
 1004cdc:	e2436001 	sub	r6, r3, #1
    if (index < list->size / 2) {
 1004ce0:	e15600a3 	cmp	r6, r3, lsr #1
 1004ce4:	2a000022 	bcs	1004d74 <list_splice+0xbc>
        for (i = 0; i < index; i++)
 1004ce8:	e3560000 	cmp	r6, #0
        node = list->head;
 1004cec:	e590e004 	ldr	lr, [r0, #4]
        for (i = 0; i < index; i++)
 1004cf0:	0a000004 	beq	1004d08 <list_splice+0x50>
 1004cf4:	e3a0c000 	mov	ip, #0
 1004cf8:	e28cc001 	add	ip, ip, #1
            node = node->next;
 1004cfc:	e59ee004 	ldr	lr, [lr, #4]
        for (i = 0; i < index; i++)
 1004d00:	e156000c 	cmp	r6, ip
 1004d04:	1afffffb 	bne	1004cf8 <list_splice+0x40>
    if (!left) {
 1004d08:	e35e0000 	cmp	lr, #0
    l1->size += l2->size;
 1004d0c:	e0833002 	add	r3, r3, r2
        l1->head->prev = l2->tail;
 1004d10:	0590c004 	ldreq	ip, [r0, #4]
    l2->head = NULL;
 1004d14:	e3a02000 	mov	r2, #0
        l1->tail->next = l2->head;
 1004d18:	1590c008 	ldrne	ip, [r0, #8]
        l1->head->prev = l2->tail;
 1004d1c:	058c4008 	streq	r4, [ip, #8]
        l1->tail->next = l2->head;
 1004d20:	158c5004 	strne	r5, [ip, #4]
        l2->tail->next = l1->head;
 1004d24:	0584c004 	streq	ip, [r4, #4]
        l2->head->prev = l1->tail;
 1004d28:	1585c008 	strne	ip, [r5, #8]
        l1->head       = l2->head;
 1004d2c:	05805004 	streq	r5, [r0, #4]
        l1->tail       = l2->tail;
 1004d30:	15804008 	strne	r4, [r0, #8]
    l1->size += l2->size;
 1004d34:	e5803000 	str	r3, [r0]
}
 1004d38:	e3a00000 	mov	r0, #0
    l2->head = NULL;
 1004d3c:	e5812004 	str	r2, [r1, #4]
    l2->tail = NULL;
 1004d40:	e5812008 	str	r2, [r1, #8]
    l2->size = 0;
 1004d44:	e5812000 	str	r2, [r1]
}
 1004d48:	e8bd8070 	pop	{r4, r5, r6, pc}
 1004d4c:	e3a00000 	mov	r0, #0
 1004d50:	e12fff1e 	bx	lr
        list1->head = list2->head;
 1004d54:	e5805004 	str	r5, [r0, #4]
        list1->tail = list2->tail;
 1004d58:	e5804008 	str	r4, [r0, #8]
        list1->size = list2->size;
 1004d5c:	e5802000 	str	r2, [r0]
}
 1004d60:	e3a00000 	mov	r0, #0
        list2->head = NULL;
 1004d64:	e5813004 	str	r3, [r1, #4]
        list2->tail = NULL;
 1004d68:	e5813008 	str	r3, [r1, #8]
        list2->size = 0;
 1004d6c:	e5813000 	str	r3, [r1]
}
 1004d70:	e8bd8070 	pop	{r4, r5, r6, pc}
        node = list->tail;
 1004d74:	e590e008 	ldr	lr, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1004d78:	eaffffe2 	b	1004d08 <list_splice+0x50>

01004d7c <list_splice_at>:
{
 1004d7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if (list2->size == 0)
 1004d80:	e5914000 	ldr	r4, [r1]
 1004d84:	e3540000 	cmp	r4, #0
        return CC_OK;
 1004d88:	01a03004 	moveq	r3, r4
    if (list2->size == 0)
 1004d8c:	0a000023 	beq	1004e20 <list_splice_at+0xa4>
    if (index > list1->size)
 1004d90:	e590c000 	ldr	ip, [r0]
 1004d94:	e15c0002 	cmp	ip, r2
        return CC_ERR_OUT_OF_RANGE;
 1004d98:	33a03008 	movcc	r3, #8
    if (index > list1->size)
 1004d9c:	3a00001f 	bcc	1004e20 <list_splice_at+0xa4>
    if (list1->size == 0) {
 1004da0:	e35c0000 	cmp	ip, #0
 1004da4:	e5916004 	ldr	r6, [r1, #4]
 1004da8:	e5915008 	ldr	r5, [r1, #8]
 1004dac:	0a00001d 	beq	1004e28 <list_splice_at+0xac>
    if (!list || index >= list->size)
 1004db0:	e15c0002 	cmp	ip, r2
 1004db4:	0a00002d 	beq	1004e70 <list_splice_at+0xf4>
    if (index < list->size / 2) {
 1004db8:	e15200ac 	cmp	r2, ip, lsr #1
 1004dbc:	2a000022 	bcs	1004e4c <list_splice_at+0xd0>
        for (i = 0; i < index; i++)
 1004dc0:	e3520000 	cmp	r2, #0
        node = list->head;
 1004dc4:	e5903004 	ldr	r3, [r0, #4]
        for (i = 0; i < index; i++)
 1004dc8:	0a00004a 	beq	1004ef8 <list_splice_at+0x17c>
 1004dcc:	e3a0e000 	mov	lr, #0
 1004dd0:	e28ee001 	add	lr, lr, #1
            node = node->next;
 1004dd4:	e5933004 	ldr	r3, [r3, #4]
        for (i = 0; i < index; i++)
 1004dd8:	e152000e 	cmp	r2, lr
 1004ddc:	1afffffb 	bne	1004dd0 <list_splice_at+0x54>
    if (end)
 1004de0:	e3530000 	cmp	r3, #0
 1004de4:	0a000021 	beq	1004e70 <list_splice_at+0xf4>
        base = end->prev;
 1004de8:	e5932008 	ldr	r2, [r3, #8]
    if (!left) {
 1004dec:	e3520000 	cmp	r2, #0
        left->next     = l2->head;
 1004df0:	15826004 	strne	r6, [r2, #4]
        l2->head->prev = left;
 1004df4:	15862008 	strne	r2, [r6, #8]
        right->prev    = l2->tail;
 1004df8:	15835008 	strne	r5, [r3, #8]
        l2->tail->next = right;
 1004dfc:	15853004 	strne	r3, [r5, #4]
    if (!left) {
 1004e00:	0a00002e 	beq	1004ec0 <list_splice_at+0x144>
    l2->head = NULL;
 1004e04:	e3a02000 	mov	r2, #0
    l1->size += l2->size;
 1004e08:	e084c00c 	add	ip, r4, ip
    return CC_OK;
 1004e0c:	e1a03002 	mov	r3, r2
    l1->size += l2->size;
 1004e10:	e580c000 	str	ip, [r0]
    l2->head = NULL;
 1004e14:	e5812004 	str	r2, [r1, #4]
    l2->tail = NULL;
 1004e18:	e5812008 	str	r2, [r1, #8]
    l2->size = 0;
 1004e1c:	e5812000 	str	r2, [r1]
}
 1004e20:	e1a00003 	mov	r0, r3
 1004e24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_OK;
 1004e28:	e1a0300c 	mov	r3, ip
        list1->head = list2->head;
 1004e2c:	e5806004 	str	r6, [r0, #4]
        list1->tail = list2->tail;
 1004e30:	e5805008 	str	r5, [r0, #8]
        list1->size = list2->size;
 1004e34:	e5804000 	str	r4, [r0]
}
 1004e38:	e1a00003 	mov	r0, r3
        list2->head = NULL;
 1004e3c:	e581c004 	str	ip, [r1, #4]
        list2->tail = NULL;
 1004e40:	e581c008 	str	ip, [r1, #8]
        list2->size = 0;
 1004e44:	e581c000 	str	ip, [r1]
}
 1004e48:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        for (i = list->size - 1; i > index; i--)
 1004e4c:	e24ce001 	sub	lr, ip, #1
        node = list->tail;
 1004e50:	e5903008 	ldr	r3, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1004e54:	e152000e 	cmp	r2, lr
 1004e58:	2affffe0 	bcs	1004de0 <list_splice_at+0x64>
 1004e5c:	e24ee001 	sub	lr, lr, #1
            node = node->prev;
 1004e60:	e5933008 	ldr	r3, [r3, #8]
        for (i = list->size - 1; i > index; i--)
 1004e64:	e152000e 	cmp	r2, lr
 1004e68:	1afffffb 	bne	1004e5c <list_splice_at+0xe0>
 1004e6c:	eaffffdb 	b	1004de0 <list_splice_at+0x64>
        get_node_at(list1, index - 1, &base);
 1004e70:	e2427001 	sub	r7, r2, #1
    if (!list || index >= list->size)
 1004e74:	e15c0007 	cmp	ip, r7
 1004e78:	9a000010 	bls	1004ec0 <list_splice_at+0x144>
    if (index < list->size / 2) {
 1004e7c:	e15700ac 	cmp	r7, ip, lsr #1
 1004e80:	2a000013 	bcs	1004ed4 <list_splice_at+0x158>
        for (i = 0; i < index; i++)
 1004e84:	e3570000 	cmp	r7, #0
        node = list->head;
 1004e88:	e590e004 	ldr	lr, [r0, #4]
        for (i = 0; i < index; i++)
 1004e8c:	0a000004 	beq	1004ea4 <list_splice_at+0x128>
 1004e90:	e3a03000 	mov	r3, #0
 1004e94:	e2833001 	add	r3, r3, #1
            node = node->next;
 1004e98:	e59ee004 	ldr	lr, [lr, #4]
        for (i = 0; i < index; i++)
 1004e9c:	e1570003 	cmp	r7, r3
 1004ea0:	1afffffb 	bne	1004e94 <list_splice_at+0x118>
    if (!left) {
 1004ea4:	e35e0000 	cmp	lr, #0
 1004ea8:	0a000004 	beq	1004ec0 <list_splice_at+0x144>
        l1->tail->next = l2->head;
 1004eac:	e5903008 	ldr	r3, [r0, #8]
 1004eb0:	e5836004 	str	r6, [r3, #4]
        l2->head->prev = l1->tail;
 1004eb4:	e5863008 	str	r3, [r6, #8]
        l1->tail       = l2->tail;
 1004eb8:	e5805008 	str	r5, [r0, #8]
 1004ebc:	eaffffd0 	b	1004e04 <list_splice_at+0x88>
 1004ec0:	e5903004 	ldr	r3, [r0, #4]
        l1->head->prev = l2->tail;
 1004ec4:	e5835008 	str	r5, [r3, #8]
        l2->tail->next = l1->head;
 1004ec8:	e5853004 	str	r3, [r5, #4]
        l1->head       = l2->head;
 1004ecc:	e5806004 	str	r6, [r0, #4]
 1004ed0:	eaffffcb 	b	1004e04 <list_splice_at+0x88>
        for (i = list->size - 1; i > index; i--)
 1004ed4:	e24c3001 	sub	r3, ip, #1
        node = list->tail;
 1004ed8:	e590e008 	ldr	lr, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1004edc:	e1570003 	cmp	r7, r3
 1004ee0:	2affffef 	bcs	1004ea4 <list_splice_at+0x128>
 1004ee4:	e1520003 	cmp	r2, r3
            node = node->prev;
 1004ee8:	e59ee008 	ldr	lr, [lr, #8]
        for (i = list->size - 1; i > index; i--)
 1004eec:	e2433001 	sub	r3, r3, #1
 1004ef0:	1afffffb 	bne	1004ee4 <list_splice_at+0x168>
 1004ef4:	eaffffea 	b	1004ea4 <list_splice_at+0x128>
    if (end)
 1004ef8:	e3530000 	cmp	r3, #0
 1004efc:	1affffb9 	bne	1004de8 <list_splice_at+0x6c>
 1004f00:	eaffffef 	b	1004ec4 <list_splice_at+0x148>

01004f04 <list_remove>:
    Node *node = get_node(list, element);
 1004f04:	e5903004 	ldr	r3, [r0, #4]
 * @return the node associated with the specified element.
 */
static Node *get_node(List *list, void *element)
{
    Node *node = list->head;
    while (node) {
 1004f08:	e3530000 	cmp	r3, #0
 1004f0c:	1a000003 	bne	1004f20 <list_remove+0x1c>
 1004f10:	ea00001a 	b	1004f80 <list_remove+0x7c>
        if (node->data == element)
            return node;
        node = node->next;
 1004f14:	e5933004 	ldr	r3, [r3, #4]
    while (node) {
 1004f18:	e3530000 	cmp	r3, #0
 1004f1c:	0a000017 	beq	1004f80 <list_remove+0x7c>
        if (node->data == element)
 1004f20:	e593c000 	ldr	ip, [r3]
 1004f24:	e151000c 	cmp	r1, ip
 1004f28:	1afffff9 	bne	1004f14 <list_remove+0x10>
    if (out)
 1004f2c:	e3520000 	cmp	r2, #0
{
 1004f30:	e92d4010 	push	{r4, lr}
        *out = node->data;
 1004f34:	1582c000 	strne	ip, [r2]
    if (node->prev != NULL)
 1004f38:	e1a04000 	mov	r4, r0
 1004f3c:	e5931008 	ldr	r1, [r3, #8]
 1004f40:	e5932004 	ldr	r2, [r3, #4]
 1004f44:	e3510000 	cmp	r1, #0
        node->prev->next = node->next;
 1004f48:	15812004 	strne	r2, [r1, #4]
 1004f4c:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1004f50:	05802004 	streq	r2, [r0, #4]
    if (node->next == NULL)
 1004f54:	e3520000 	cmp	r2, #0
        list->tail = node->prev;
 1004f58:	05801008 	streq	r1, [r0, #8]
    list->mem_free(node);
 1004f5c:	e1a00003 	mov	r0, r3
        node->next->prev = node->prev;
 1004f60:	15821008 	strne	r1, [r2, #8]
    list->mem_free(node);
 1004f64:	e5943014 	ldr	r3, [r4, #20]
 1004f68:	e12fff33 	blx	r3
    list->size--;
 1004f6c:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1004f70:	e3a00000 	mov	r0, #0
    list->size--;
 1004f74:	e2433001 	sub	r3, r3, #1
 1004f78:	e5843000 	str	r3, [r4]
}
 1004f7c:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1004f80:	e3a00007 	mov	r0, #7
}
 1004f84:	e12fff1e 	bx	lr

01004f88 <list_remove_at>:
{
 1004f88:	e92d4010 	push	{r4, lr}
    if (!list || index >= list->size)
 1004f8c:	e2504000 	subs	r4, r0, #0
 1004f90:	0a000028 	beq	1005038 <list_remove_at+0xb0>
 1004f94:	e5943000 	ldr	r3, [r4]
 1004f98:	e1510003 	cmp	r1, r3
 1004f9c:	2a000025 	bcs	1005038 <list_remove_at+0xb0>
    if (index < list->size / 2) {
 1004fa0:	e15100a3 	cmp	r1, r3, lsr #1
 1004fa4:	2a00001a 	bcs	1005014 <list_remove_at+0x8c>
        for (i = 0; i < index; i++)
 1004fa8:	e3510000 	cmp	r1, #0
        node = list->head;
 1004fac:	e5940004 	ldr	r0, [r4, #4]
        for (i = 0; i < index; i++)
 1004fb0:	0a000004 	beq	1004fc8 <list_remove_at+0x40>
 1004fb4:	e3a03000 	mov	r3, #0
 1004fb8:	e2833001 	add	r3, r3, #1
            node = node->next;
 1004fbc:	e5900004 	ldr	r0, [r0, #4]
        for (i = 0; i < index; i++)
 1004fc0:	e1510003 	cmp	r1, r3
 1004fc4:	1afffffb 	bne	1004fb8 <list_remove_at+0x30>
    if (out)
 1004fc8:	e3520000 	cmp	r2, #0
        *out = node->data;
 1004fcc:	15903000 	ldrne	r3, [r0]
 1004fd0:	15823000 	strne	r3, [r2]
    if (node->prev != NULL)
 1004fd4:	e5902008 	ldr	r2, [r0, #8]
 1004fd8:	e5903004 	ldr	r3, [r0, #4]
 1004fdc:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 1004fe0:	15823004 	strne	r3, [r2, #4]
 1004fe4:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 1004fe8:	05843004 	streq	r3, [r4, #4]
    if (node->next == NULL)
 1004fec:	e3530000 	cmp	r3, #0
        node->next->prev = node->prev;
 1004ff0:	15832008 	strne	r2, [r3, #8]
        list->tail = node->prev;
 1004ff4:	05842008 	streq	r2, [r4, #8]
    list->mem_free(node);
 1004ff8:	e5943014 	ldr	r3, [r4, #20]
 1004ffc:	e12fff33 	blx	r3
    list->size--;
 1005000:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1005004:	e3a00000 	mov	r0, #0
    list->size--;
 1005008:	e2433001 	sub	r3, r3, #1
 100500c:	e5843000 	str	r3, [r4]
    return data;
 1005010:	e8bd8010 	pop	{r4, pc}
        for (i = list->size - 1; i > index; i--)
 1005014:	e2433001 	sub	r3, r3, #1
        node = list->tail;
 1005018:	e5940008 	ldr	r0, [r4, #8]
        for (i = list->size - 1; i > index; i--)
 100501c:	e1510003 	cmp	r1, r3
 1005020:	2affffe8 	bcs	1004fc8 <list_remove_at+0x40>
 1005024:	e2433001 	sub	r3, r3, #1
            node = node->prev;
 1005028:	e5900008 	ldr	r0, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 100502c:	e1510003 	cmp	r1, r3
 1005030:	1afffffb 	bne	1005024 <list_remove_at+0x9c>
 1005034:	eaffffe3 	b	1004fc8 <list_remove_at+0x40>
    if (!list || index >= list->size)
 1005038:	e3a00008 	mov	r0, #8
}
 100503c:	e8bd8010 	pop	{r4, pc}

01005040 <list_remove_first>:
    if (!list->size)
 1005040:	e5903000 	ldr	r3, [r0]
 1005044:	e3530000 	cmp	r3, #0
 1005048:	0a000017 	beq	10050ac <list_remove_first+0x6c>
    void *e = unlinkn(list, list->head);
 100504c:	e5903004 	ldr	r3, [r0, #4]
{
 1005050:	e92d4070 	push	{r4, r5, r6, lr}
 1005054:	e1a04000 	mov	r4, r0
 1005058:	e1a05001 	mov	r5, r1
    if (node->prev != NULL)
 100505c:	e593c008 	ldr	ip, [r3, #8]
 1005060:	e5932004 	ldr	r2, [r3, #4]
    void *data = node->data;
 1005064:	e5936000 	ldr	r6, [r3]
    if (node->prev != NULL)
 1005068:	e35c0000 	cmp	ip, #0
        node->prev->next = node->next;
 100506c:	158c2004 	strne	r2, [ip, #4]
 1005070:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1005074:	05802004 	streq	r2, [r0, #4]
    if (node->next == NULL)
 1005078:	e3520000 	cmp	r2, #0
        list->tail = node->prev;
 100507c:	0580c008 	streq	ip, [r0, #8]
    list->mem_free(node);
 1005080:	e1a00003 	mov	r0, r3
        node->next->prev = node->prev;
 1005084:	1582c008 	strne	ip, [r2, #8]
    list->mem_free(node);
 1005088:	e5943014 	ldr	r3, [r4, #20]
 100508c:	e12fff33 	blx	r3
    list->size--;
 1005090:	e5943000 	ldr	r3, [r4]
    if (out)
 1005094:	e3550000 	cmp	r5, #0
    return CC_OK;
 1005098:	e3a00000 	mov	r0, #0
    list->size--;
 100509c:	e2433001 	sub	r3, r3, #1
 10050a0:	e5843000 	str	r3, [r4]
        *out = e;
 10050a4:	15856000 	strne	r6, [r5]
 10050a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10050ac:	e3a00007 	mov	r0, #7
}
 10050b0:	e12fff1e 	bx	lr

010050b4 <list_remove_last>:
    if (!list->size)
 10050b4:	e5903000 	ldr	r3, [r0]
 10050b8:	e3530000 	cmp	r3, #0
 10050bc:	0a000017 	beq	1005120 <list_remove_last+0x6c>
    void *e = unlinkn(list, list->tail);
 10050c0:	e5903008 	ldr	r3, [r0, #8]
{
 10050c4:	e92d4070 	push	{r4, r5, r6, lr}
 10050c8:	e1a04000 	mov	r4, r0
 10050cc:	e1a05001 	mov	r5, r1
    if (node->prev != NULL)
 10050d0:	e593c008 	ldr	ip, [r3, #8]
 10050d4:	e5932004 	ldr	r2, [r3, #4]
    void *data = node->data;
 10050d8:	e5936000 	ldr	r6, [r3]
    if (node->prev != NULL)
 10050dc:	e35c0000 	cmp	ip, #0
        node->prev->next = node->next;
 10050e0:	158c2004 	strne	r2, [ip, #4]
 10050e4:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 10050e8:	05802004 	streq	r2, [r0, #4]
    if (node->next == NULL)
 10050ec:	e3520000 	cmp	r2, #0
        list->tail = node->prev;
 10050f0:	0580c008 	streq	ip, [r0, #8]
    list->mem_free(node);
 10050f4:	e1a00003 	mov	r0, r3
        node->next->prev = node->prev;
 10050f8:	1582c008 	strne	ip, [r2, #8]
    list->mem_free(node);
 10050fc:	e5943014 	ldr	r3, [r4, #20]
 1005100:	e12fff33 	blx	r3
    list->size--;
 1005104:	e5943000 	ldr	r3, [r4]
    if (out)
 1005108:	e3550000 	cmp	r5, #0
    return CC_OK;
 100510c:	e3a00000 	mov	r0, #0
    list->size--;
 1005110:	e2433001 	sub	r3, r3, #1
 1005114:	e5843000 	str	r3, [r4]
        *out = e;
 1005118:	15856000 	strne	r6, [r5]
 100511c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1005120:	e3a00007 	mov	r0, #7
}
 1005124:	e12fff1e 	bx	lr

01005128 <list_remove_all>:
    if (list->size == 0)
 1005128:	e5903000 	ldr	r3, [r0]
 100512c:	e3530000 	cmp	r3, #0
 1005130:	0a000024 	beq	10051c8 <list_remove_all+0xa0>
    Node *node = list->head;
 1005134:	e5903004 	ldr	r3, [r0, #4]
{
 1005138:	e92d4070 	push	{r4, r5, r6, lr}
 100513c:	e1a04000 	mov	r4, r0
    while (node) {
 1005140:	e3530000 	cmp	r3, #0
 1005144:	1a00000e 	bne	1005184 <list_remove_all+0x5c>
 1005148:	ea000019 	b	10051b4 <list_remove_all+0x8c>
        node->prev->next = node->next;
 100514c:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 1005150:	e1a00003 	mov	r0, r3
 1005154:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 1005158:	e3510000 	cmp	r1, #0
 100515c:	0a000011 	beq	10051a8 <list_remove_all+0x80>
    list->mem_free(node);
 1005160:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1005164:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 1005168:	e12fff33 	blx	r3
    list->size--;
 100516c:	e5943000 	ldr	r3, [r4]
    while (node) {
 1005170:	e3550000 	cmp	r5, #0
    list->size--;
 1005174:	e2433001 	sub	r3, r3, #1
 1005178:	e5843000 	str	r3, [r4]
    while (node) {
 100517c:	0a00000c 	beq	10051b4 <list_remove_all+0x8c>
{
 1005180:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 1005184:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 1005188:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 100518c:	e3520000 	cmp	r2, #0
 1005190:	1affffed 	bne	100514c <list_remove_all+0x24>
        Node *tmp = node->next;
 1005194:	e1a01005 	mov	r1, r5
        list->head = node->next;
 1005198:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 100519c:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 10051a0:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 10051a4:	1affffed 	bne	1005160 <list_remove_all+0x38>
        list->tail = node->prev;
 10051a8:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 10051ac:	e5943014 	ldr	r3, [r4, #20]
 10051b0:	eaffffec 	b	1005168 <list_remove_all+0x40>
        list->head = NULL;
 10051b4:	e3a03000 	mov	r3, #0
 10051b8:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 10051bc:	e1a00003 	mov	r0, r3
 10051c0:	e5843008 	str	r3, [r4, #8]
}
 10051c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    return CC_ERR_VALUE_NOT_FOUND;
 10051c8:	e3a00007 	mov	r0, #7
}
 10051cc:	e12fff1e 	bx	lr

010051d0 <list_remove_all_cb>:
    if (list->size == 0)
 10051d0:	e5903000 	ldr	r3, [r0]
 10051d4:	e3530000 	cmp	r3, #0
 10051d8:	0a00003c 	beq	10052d0 <list_remove_all_cb+0x100>
{
 10051dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10051e0:	e1a07001 	mov	r7, r1
    Node *node = list->head;
 10051e4:	e5905004 	ldr	r5, [r0, #4]
 10051e8:	e1a04000 	mov	r4, r0
    while (node) {
 10051ec:	e3550000 	cmp	r5, #0
 10051f0:	0a000031 	beq	10052bc <list_remove_all_cb+0xec>
 10051f4:	e3510000 	cmp	r1, #0
 10051f8:	1a000020 	bne	1005280 <list_remove_all_cb+0xb0>
 10051fc:	ea000008 	b	1005224 <list_remove_all_cb+0x54>
    list->mem_free(node);
 1005200:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 1005204:	e5823008 	str	r3, [r2, #8]
    list->mem_free(node);
 1005208:	e12fff31 	blx	r1
    list->size--;
 100520c:	e5943000 	ldr	r3, [r4]
    while (node) {
 1005210:	e3560000 	cmp	r6, #0
    list->size--;
 1005214:	e2433001 	sub	r3, r3, #1
 1005218:	e5843000 	str	r3, [r4]
    while (node) {
 100521c:	0a000026 	beq	10052bc <list_remove_all_cb+0xec>
{
 1005220:	e1a05006 	mov	r5, r6
    if (node->prev != NULL)
 1005224:	e5953008 	ldr	r3, [r5, #8]
    list->mem_free(node);
 1005228:	e1a00005 	mov	r0, r5
        Node *tmp = node->next;
 100522c:	e5956004 	ldr	r6, [r5, #4]
    if (node->prev != NULL)
 1005230:	e3530000 	cmp	r3, #0
        node->prev->next = node->next;
 1005234:	15836004 	strne	r6, [r3, #4]
        Node *tmp = node->next;
 1005238:	01a02006 	moveq	r2, r6
 100523c:	15952004 	ldrne	r2, [r5, #4]
        list->head = node->next;
 1005240:	05846004 	streq	r6, [r4, #4]
    if (node->next == NULL)
 1005244:	e3520000 	cmp	r2, #0
 1005248:	1affffec 	bne	1005200 <list_remove_all_cb+0x30>
        list->tail = node->prev;
 100524c:	e5843008 	str	r3, [r4, #8]
    list->mem_free(node);
 1005250:	e5943014 	ldr	r3, [r4, #20]
 1005254:	e12fff33 	blx	r3
 1005258:	eaffffeb 	b	100520c <list_remove_all_cb+0x3c>
 100525c:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 1005260:	e5832008 	str	r2, [r3, #8]
    list->mem_free(node);
 1005264:	e12fff31 	blx	r1
    list->size--;
 1005268:	e5943000 	ldr	r3, [r4]
    while (node) {
 100526c:	e3560000 	cmp	r6, #0
    list->size--;
 1005270:	e2433001 	sub	r3, r3, #1
 1005274:	e5843000 	str	r3, [r4]
    while (node) {
 1005278:	0a00000f 	beq	10052bc <list_remove_all_cb+0xec>
        Node *tmp = node->next;
 100527c:	e1a05006 	mov	r5, r6
 1005280:	e8950041 	ldm	r5, {r0, r6}
            cb(node->data);
 1005284:	e12fff37 	blx	r7
    if (node->prev != NULL)
 1005288:	e5952008 	ldr	r2, [r5, #8]
    list->mem_free(node);
 100528c:	e1a00005 	mov	r0, r5
 1005290:	e5953004 	ldr	r3, [r5, #4]
    if (node->prev != NULL)
 1005294:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 1005298:	15823004 	strne	r3, [r2, #4]
    if (node->prev == NULL)
 100529c:	15953004 	ldrne	r3, [r5, #4]
        list->head = node->next;
 10052a0:	05843004 	streq	r3, [r4, #4]
    if (node->next == NULL)
 10052a4:	e3530000 	cmp	r3, #0
 10052a8:	1affffeb 	bne	100525c <list_remove_all_cb+0x8c>
        list->tail = node->prev;
 10052ac:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 10052b0:	e5943014 	ldr	r3, [r4, #20]
 10052b4:	e12fff33 	blx	r3
    list->size--;
 10052b8:	eaffffea 	b	1005268 <list_remove_all_cb+0x98>
        list->head = NULL;
 10052bc:	e3a03000 	mov	r3, #0
 10052c0:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 10052c4:	e1a00003 	mov	r0, r3
 10052c8:	e5843008 	str	r3, [r4, #8]
}
 10052cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_ERR_VALUE_NOT_FOUND;
 10052d0:	e3a00007 	mov	r0, #7
}
 10052d4:	e12fff1e 	bx	lr

010052d8 <list_replace_at>:
    if (!list || index >= list->size)
 10052d8:	e3500000 	cmp	r0, #0
 10052dc:	0a00001e 	beq	100535c <list_replace_at+0x84>
{
 10052e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (!list || index >= list->size)
 10052e4:	e590e000 	ldr	lr, [r0]
 10052e8:	e152000e 	cmp	r2, lr
 10052ec:	2a000018 	bcs	1005354 <list_replace_at+0x7c>
    if (index < list->size / 2) {
 10052f0:	e15200ae 	cmp	r2, lr, lsr #1
 10052f4:	2a00000d 	bcs	1005330 <list_replace_at+0x58>
        for (i = 0; i < index; i++)
 10052f8:	e3520000 	cmp	r2, #0
        node = list->head;
 10052fc:	e590c004 	ldr	ip, [r0, #4]
        for (i = 0; i < index; i++)
 1005300:	0a000004 	beq	1005318 <list_replace_at+0x40>
 1005304:	e3a0e000 	mov	lr, #0
 1005308:	e28ee001 	add	lr, lr, #1
            node = node->next;
 100530c:	e59cc004 	ldr	ip, [ip, #4]
        for (i = 0; i < index; i++)
 1005310:	e152000e 	cmp	r2, lr
 1005314:	1afffffb 	bne	1005308 <list_replace_at+0x30>
        void *old  = node->data;
 1005318:	e59c2000 	ldr	r2, [ip]
        if (out)
 100531c:	e3530000 	cmp	r3, #0
        node->data = element;
 1005320:	e58c1000 	str	r1, [ip]
    return CC_OK;
 1005324:	e3a00000 	mov	r0, #0
            *out = old;
 1005328:	15832000 	strne	r2, [r3]
 100532c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        for (i = list->size - 1; i > index; i--)
 1005330:	e24ee001 	sub	lr, lr, #1
        node = list->tail;
 1005334:	e590c008 	ldr	ip, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1005338:	e152000e 	cmp	r2, lr
 100533c:	2afffff5 	bcs	1005318 <list_replace_at+0x40>
 1005340:	e24ee001 	sub	lr, lr, #1
            node = node->prev;
 1005344:	e59cc008 	ldr	ip, [ip, #8]
        for (i = list->size - 1; i > index; i--)
 1005348:	e152000e 	cmp	r2, lr
 100534c:	1afffffb 	bne	1005340 <list_replace_at+0x68>
 1005350:	eafffff0 	b	1005318 <list_replace_at+0x40>
        return CC_ERR_OUT_OF_RANGE;
 1005354:	e3a00008 	mov	r0, #8
 1005358:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 100535c:	e3a00008 	mov	r0, #8
}
 1005360:	e12fff1e 	bx	lr

01005364 <list_get_first>:
    if (list->size == 0)
 1005364:	e5903000 	ldr	r3, [r0]
 1005368:	e3530000 	cmp	r3, #0
    *out = list->head->data;
 100536c:	15903004 	ldrne	r3, [r0, #4]
    return CC_OK;
 1005370:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1005374:	03a00007 	moveq	r0, #7
    *out = list->head->data;
 1005378:	15933000 	ldrne	r3, [r3]
 100537c:	15813000 	strne	r3, [r1]
}
 1005380:	e12fff1e 	bx	lr

01005384 <list_get_last>:
    if (list->size == 0)
 1005384:	e5903000 	ldr	r3, [r0]
 1005388:	e3530000 	cmp	r3, #0
    *out = list->tail->data;
 100538c:	15903008 	ldrne	r3, [r0, #8]
    return CC_OK;
 1005390:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1005394:	03a00007 	moveq	r0, #7
    *out = list->tail->data;
 1005398:	15933000 	ldrne	r3, [r3]
 100539c:	15813000 	strne	r3, [r1]
}
 10053a0:	e12fff1e 	bx	lr

010053a4 <list_get_at>:
    if (!list || index >= list->size)
 10053a4:	e3500000 	cmp	r0, #0
 10053a8:	0a000019 	beq	1005414 <list_get_at+0x70>
 10053ac:	e590c000 	ldr	ip, [r0]
 10053b0:	e151000c 	cmp	r1, ip
 10053b4:	2a000016 	bcs	1005414 <list_get_at+0x70>
    if (index < list->size / 2) {
 10053b8:	e15100ac 	cmp	r1, ip, lsr #1
 10053bc:	2a00000b 	bcs	10053f0 <list_get_at+0x4c>
        for (i = 0; i < index; i++)
 10053c0:	e3510000 	cmp	r1, #0
        node = list->head;
 10053c4:	e5903004 	ldr	r3, [r0, #4]
        for (i = 0; i < index; i++)
 10053c8:	0a000004 	beq	10053e0 <list_get_at+0x3c>
 10053cc:	e3a00000 	mov	r0, #0
 10053d0:	e2800001 	add	r0, r0, #1
            node = node->next;
 10053d4:	e5933004 	ldr	r3, [r3, #4]
        for (i = 0; i < index; i++)
 10053d8:	e1510000 	cmp	r1, r0
 10053dc:	1afffffb 	bne	10053d0 <list_get_at+0x2c>
        *out = node->data;
 10053e0:	e5933000 	ldr	r3, [r3]
    return CC_OK;
 10053e4:	e3a00000 	mov	r0, #0
        *out = node->data;
 10053e8:	e5823000 	str	r3, [r2]
 10053ec:	e12fff1e 	bx	lr
        for (i = list->size - 1; i > index; i--)
 10053f0:	e24cc001 	sub	ip, ip, #1
        node = list->tail;
 10053f4:	e5903008 	ldr	r3, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 10053f8:	e151000c 	cmp	r1, ip
 10053fc:	2afffff7 	bcs	10053e0 <list_get_at+0x3c>
 1005400:	e24cc001 	sub	ip, ip, #1
            node = node->prev;
 1005404:	e5933008 	ldr	r3, [r3, #8]
        for (i = list->size - 1; i > index; i--)
 1005408:	e151000c 	cmp	r1, ip
 100540c:	1afffffb 	bne	1005400 <list_get_at+0x5c>
 1005410:	eafffff2 	b	10053e0 <list_get_at+0x3c>
        return CC_ERR_OUT_OF_RANGE;
 1005414:	e3a00008 	mov	r0, #8
}
 1005418:	e12fff1e 	bx	lr

0100541c <list_reverse>:
{
 100541c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (list->size == 0 || list->size == 1)
 1005420:	e5906000 	ldr	r6, [r0]
 1005424:	e3560001 	cmp	r6, #1
 1005428:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    Node *head_old = list->head;
 100542c:	e5907004 	ldr	r7, [r0, #4]
    for (i = 0; i < list->size / 2; i++) {
 1005430:	e1a060a6 	lsr	r6, r6, #1
    Node *tail_old = list->tail;
 1005434:	e5908008 	ldr	r8, [r0, #8]
    for (i = 0; i < list->size / 2; i++) {
 1005438:	e3a04000 	mov	r4, #0
    Node *left  = list->head;
 100543c:	e1a02007 	mov	r2, r7
    Node *right = list->tail;
 1005440:	e1a03008 	mov	r3, r8
 1005444:	ea000011 	b	1005490 <list_reverse+0x74>
    Node *n1_left  = n1->prev;
 1005448:	e5925008 	ldr	r5, [r2, #8]
    if (n1_left)
 100544c:	e3550000 	cmp	r5, #0
        n1_left->next = n2;
 1005450:	15853004 	strne	r3, [r5, #4]
    if (n1_right)
 1005454:	e3510000 	cmp	r1, #0
    n2->prev = n1_left;
 1005458:	e5835008 	str	r5, [r3, #8]
        n1_right->prev = n2;
 100545c:	15813008 	strne	r3, [r1, #8]
    if (n2_left)
 1005460:	e35c0000 	cmp	ip, #0
    n2->next = n1_right;
 1005464:	e5831004 	str	r1, [r3, #4]
        n2_left->next = n1;
 1005468:	158c2004 	strne	r2, [ip, #4]
    if (n2_right)
 100546c:	e35e0000 	cmp	lr, #0
    n1->prev = n2_left;
 1005470:	e582c008 	str	ip, [r2, #8]
        n2_right->prev = n1;
 1005474:	158e2008 	strne	r2, [lr, #8]
    n1->next = n2_right;
 1005478:	e582e004 	str	lr, [r2, #4]
    for (i = 0; i < list->size / 2; i++) {
 100547c:	e2844001 	add	r4, r4, #1
        Node *tmpl = left->next;
 1005480:	e1a02001 	mov	r2, r1
    for (i = 0; i < list->size / 2; i++) {
 1005484:	e1540006 	cmp	r4, r6
        Node *tmpr = right->prev;
 1005488:	e1a0300c 	mov	r3, ip
    for (i = 0; i < list->size / 2; i++) {
 100548c:	0a000011 	beq	10054d8 <list_reverse+0xbc>
        Node *tmpl = left->next;
 1005490:	e5921004 	ldr	r1, [r2, #4]
        Node *tmpr = right->prev;
 1005494:	e593c008 	ldr	ip, [r3, #8]
    if (n1->next == n2 || n2->next == n1) {
 1005498:	e593e004 	ldr	lr, [r3, #4]
 100549c:	e1510003 	cmp	r1, r3
 10054a0:	0a00000f 	beq	10054e4 <list_reverse+0xc8>
 10054a4:	e15e0002 	cmp	lr, r2
 10054a8:	1affffe6 	bne	1005448 <list_reverse+0x2c>
        if (n1->next)
 10054ac:	e3510000 	cmp	r1, #0
            n1->next->prev = n2;
 10054b0:	15813008 	strne	r3, [r1, #8]
        Node *tmpr = right->prev;
 10054b4:	01a0e00c 	moveq	lr, ip
        n2->next = n1->next;
 10054b8:	1593e008 	ldrne	lr, [r3, #8]
 10054bc:	e5831004 	str	r1, [r3, #4]
        if (n2->prev)
 10054c0:	e35e0000 	cmp	lr, #0
            n2->prev->next = n1;
 10054c4:	158e2004 	strne	r2, [lr, #4]
        n1->prev = n2->prev;
 10054c8:	e582e008 	str	lr, [r2, #8]
        n2->prev = n1;
 10054cc:	e5832008 	str	r2, [r3, #8]
        n1->next = n2;
 10054d0:	e5823004 	str	r3, [r2, #4]
        return;
 10054d4:	eaffffe8 	b	100547c <list_reverse+0x60>
    list->head = tail_old;
 10054d8:	e5808004 	str	r8, [r0, #4]
    list->tail = head_old;
 10054dc:	e5807008 	str	r7, [r0, #8]
}
 10054e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (n2->next)
 10054e4:	e35e0000 	cmp	lr, #0
            n2->next->prev = n1;
 10054e8:	158e2008 	strne	r2, [lr, #8]
        if (n1->prev)
 10054ec:	e5925008 	ldr	r5, [r2, #8]
        n1->next = n2->next;
 10054f0:	e582e004 	str	lr, [r2, #4]
        if (n1->prev)
 10054f4:	e3550000 	cmp	r5, #0
            n1->prev->next = n2;
 10054f8:	15853004 	strne	r3, [r5, #4]
        n2->prev = n1->prev;
 10054fc:	e5835008 	str	r5, [r3, #8]
        n1->prev = n2;
 1005500:	e5823008 	str	r3, [r2, #8]
        n2->next = n1;
 1005504:	e5832004 	str	r2, [r3, #4]
        return;
 1005508:	eaffffdb 	b	100547c <list_reverse+0x60>

0100550c <list_sublist>:
    if (b > e || e >= list->size)
 100550c:	e1510002 	cmp	r1, r2
 1005510:	8a000034 	bhi	10055e8 <list_sublist+0xdc>
 1005514:	e590c000 	ldr	ip, [r0]
 1005518:	e15c0002 	cmp	ip, r2
 100551c:	9a000031 	bls	10055e8 <list_sublist+0xdc>
{
 1005520:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1005524:	e1a06000 	mov	r6, r0
    conf.mem_calloc = list->mem_calloc;
 1005528:	e590b010 	ldr	fp, [r0, #16]
 100552c:	e1a07001 	mov	r7, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 1005530:	e3a00001 	mov	r0, #1
 1005534:	e3a01018 	mov	r1, #24
 1005538:	e1a09003 	mov	r9, r3
 100553c:	e1a08002 	mov	r8, r2
    conf.mem_alloc  = list->mem_alloc;
 1005540:	e596400c 	ldr	r4, [r6, #12]
    conf.mem_free   = list->mem_free;
 1005544:	e596a014 	ldr	sl, [r6, #20]
    List *list = conf->mem_calloc(1, sizeof(List));
 1005548:	e12fff3b 	blx	fp
    if (!list)
 100554c:	e2505000 	subs	r5, r0, #0
 1005550:	0a000045 	beq	100566c <list_sublist+0x160>
    if (!list || index >= list->size)
 1005554:	e5963000 	ldr	r3, [r6]
    list->mem_alloc  = conf->mem_alloc;
 1005558:	e585400c 	str	r4, [r5, #12]
    list->mem_calloc = conf->mem_calloc;
 100555c:	e585b010 	str	fp, [r5, #16]
    if (!list || index >= list->size)
 1005560:	e1570003 	cmp	r7, r3
    list->mem_free   = conf->mem_free;
 1005564:	e585a014 	str	sl, [r5, #20]
    if (!list || index >= list->size)
 1005568:	2a000029 	bcs	1005614 <list_sublist+0x108>
    if (index < list->size / 2) {
 100556c:	e15700a3 	cmp	r7, r3, lsr #1
 1005570:	2a00001e 	bcs	10055f0 <list_sublist+0xe4>
        for (i = 0; i < index; i++)
 1005574:	e3570000 	cmp	r7, #0
        node = list->head;
 1005578:	e5966004 	ldr	r6, [r6, #4]
        for (i = 0; i < index; i++)
 100557c:	0a00005e 	beq	10056fc <list_sublist+0x1f0>
 1005580:	e3a04000 	mov	r4, #0
 1005584:	e2844001 	add	r4, r4, #1
            node = node->next;
 1005588:	e5966004 	ldr	r6, [r6, #4]
        for (i = 0; i < index; i++)
 100558c:	e1570004 	cmp	r7, r4
 1005590:	1afffffb 	bne	1005584 <list_sublist+0x78>
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005594:	e3a0a001 	mov	sl, #1
 1005598:	e3a0100c 	mov	r1, #12
 100559c:	e3a00001 	mov	r0, #1
        status = list_add(sub, node->data);
 10055a0:	e5967000 	ldr	r7, [r6]
    Node *node = list->mem_calloc(1, sizeof(Node));
 10055a4:	e12fff3b 	blx	fp
    if (node == NULL)
 10055a8:	e3500000 	cmp	r0, #0
    if (list->size > 0)
 10055ac:	e5953000 	ldr	r3, [r5]
    if (node == NULL)
 10055b0:	0a000026 	beq	1005650 <list_sublist+0x144>
    if (list->size == 0) {
 10055b4:	e3530000 	cmp	r3, #0
    node->data = element;
 10055b8:	e5807000 	str	r7, [r0]
    for (i = b; i <= e; i++) {
 10055bc:	e2844001 	add	r4, r4, #1
    list->size++;
 10055c0:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 10055c4:	1a000016 	bne	1005624 <list_sublist+0x118>
    for (i = b; i <= e; i++) {
 10055c8:	e1580004 	cmp	r8, r4
        list->head = node;
 10055cc:	e5850004 	str	r0, [r5, #4]
        list->tail = node;
 10055d0:	e5850008 	str	r0, [r5, #8]
    list->size++;
 10055d4:	e585a000 	str	sl, [r5]
        node = node->next;
 10055d8:	e5966004 	ldr	r6, [r6, #4]
    for (i = b; i <= e; i++) {
 10055dc:	3a000018 	bcc	1005644 <list_sublist+0x138>
 10055e0:	e595b010 	ldr	fp, [r5, #16]
 10055e4:	eaffffeb 	b	1005598 <list_sublist+0x8c>
        return CC_ERR_INVALID_RANGE;
 10055e8:	e3a00003 	mov	r0, #3
}
 10055ec:	e12fff1e 	bx	lr
        for (i = list->size - 1; i > index; i--)
 10055f0:	e2434001 	sub	r4, r3, #1
        node = list->tail;
 10055f4:	e5966008 	ldr	r6, [r6, #8]
        for (i = list->size - 1; i > index; i--)
 10055f8:	e1570004 	cmp	r7, r4
 10055fc:	2a00003e 	bcs	10056fc <list_sublist+0x1f0>
 1005600:	e2444001 	sub	r4, r4, #1
            node = node->prev;
 1005604:	e5966008 	ldr	r6, [r6, #8]
        for (i = list->size - 1; i > index; i--)
 1005608:	e1570004 	cmp	r7, r4
 100560c:	1afffffb 	bne	1005600 <list_sublist+0xf4>
 1005610:	eaffffdf 	b	1005594 <list_sublist+0x88>
        list->mem_free(sub);
 1005614:	e5963014 	ldr	r3, [r6, #20]
 1005618:	e12fff33 	blx	r3
        return status;
 100561c:	e3a00008 	mov	r0, #8
 1005620:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        node->prev = list->tail;
 1005624:	e5952008 	ldr	r2, [r5, #8]
    for (i = b; i <= e; i++) {
 1005628:	e1580004 	cmp	r8, r4
        node->prev = list->tail;
 100562c:	e5802008 	str	r2, [r0, #8]
        list->tail->next = node;
 1005630:	e5820004 	str	r0, [r2, #4]
        list->tail = node;
 1005634:	e5850008 	str	r0, [r5, #8]
        node = node->next;
 1005638:	e5966004 	ldr	r6, [r6, #4]
    list->size++;
 100563c:	e5853000 	str	r3, [r5]
    for (i = b; i <= e; i++) {
 1005640:	2affffe6 	bcs	10055e0 <list_sublist+0xd4>
    *out = sub;
 1005644:	e5895000 	str	r5, [r9]
    return CC_OK;
 1005648:	e3a00000 	mov	r0, #0
 100564c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (list->size > 0)
 1005650:	e3530000 	cmp	r3, #0
 1005654:	1a000006 	bne	1005674 <list_sublist+0x168>
    list->mem_free(list);
 1005658:	e1a00005 	mov	r0, r5
 100565c:	e5953014 	ldr	r3, [r5, #20]
 1005660:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1005664:	e3a00001 	mov	r0, #1
            return status;
 1005668:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_ERR_ALLOC;
 100566c:	e3a00001 	mov	r0, #1
}
 1005670:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Node *node = list->head;
 1005674:	e5953004 	ldr	r3, [r5, #4]
    while (node) {
 1005678:	e3530000 	cmp	r3, #0
 100567c:	1a00000e 	bne	10056bc <list_sublist+0x1b0>
 1005680:	ea000019 	b	10056ec <list_sublist+0x1e0>
        node->prev->next = node->next;
 1005684:	e5824004 	str	r4, [r2, #4]
    list->mem_free(node);
 1005688:	e1a00003 	mov	r0, r3
 100568c:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 1005690:	e3510000 	cmp	r1, #0
 1005694:	0a000011 	beq	10056e0 <list_sublist+0x1d4>
    list->mem_free(node);
 1005698:	e5953014 	ldr	r3, [r5, #20]
        node->next->prev = node->prev;
 100569c:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 10056a0:	e12fff33 	blx	r3
    list->size--;
 10056a4:	e5953000 	ldr	r3, [r5]
    while (node) {
 10056a8:	e3540000 	cmp	r4, #0
    list->size--;
 10056ac:	e2433001 	sub	r3, r3, #1
 10056b0:	e5853000 	str	r3, [r5]
    while (node) {
 10056b4:	0a00000c 	beq	10056ec <list_sublist+0x1e0>
        for (i = 0; i < index; i++)
 10056b8:	e1a03004 	mov	r3, r4
    if (node->prev != NULL)
 10056bc:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 10056c0:	e5934004 	ldr	r4, [r3, #4]
    if (node->prev != NULL)
 10056c4:	e3520000 	cmp	r2, #0
 10056c8:	1affffed 	bne	1005684 <list_sublist+0x178>
        Node *tmp = node->next;
 10056cc:	e1a01004 	mov	r1, r4
        list->head = node->next;
 10056d0:	e5854004 	str	r4, [r5, #4]
    if (node->next == NULL)
 10056d4:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 10056d8:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 10056dc:	1affffed 	bne	1005698 <list_sublist+0x18c>
        list->tail = node->prev;
 10056e0:	e5852008 	str	r2, [r5, #8]
    list->mem_free(node);
 10056e4:	e5953014 	ldr	r3, [r5, #20]
 10056e8:	eaffffec 	b	10056a0 <list_sublist+0x194>
        list->head = NULL;
 10056ec:	e3a03000 	mov	r3, #0
 10056f0:	e5853004 	str	r3, [r5, #4]
        list->tail = NULL;
 10056f4:	e5853008 	str	r3, [r5, #8]
        return CC_OK;
 10056f8:	eaffffd6 	b	1005658 <list_sublist+0x14c>
        for (i = list->size - 1; i > index; i--)
 10056fc:	e1a04007 	mov	r4, r7
 1005700:	eaffffa3 	b	1005594 <list_sublist+0x88>

01005704 <list_copy_shallow>:
{
 1005704:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1005708:	e1a05000 	mov	r5, r0
    conf.mem_calloc = list->mem_calloc;
 100570c:	e5906010 	ldr	r6, [r0, #16]
{
 1005710:	e1a08001 	mov	r8, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 1005714:	e3a00001 	mov	r0, #1
 1005718:	e3a01018 	mov	r1, #24
    conf.mem_alloc  = list->mem_alloc;
 100571c:	e595900c 	ldr	r9, [r5, #12]
    conf.mem_free   = list->mem_free;
 1005720:	e5957014 	ldr	r7, [r5, #20]
    List *list = conf->mem_calloc(1, sizeof(List));
 1005724:	e12fff36 	blx	r6
    if (!list)
 1005728:	e2504000 	subs	r4, r0, #0
 100572c:	0a000049 	beq	1005858 <list_copy_shallow+0x154>
    Node *node = list->head;
 1005730:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 1005734:	e584900c 	str	r9, [r4, #12]
    list->mem_calloc = conf->mem_calloc;
 1005738:	e5846010 	str	r6, [r4, #16]
    if (!node) {
 100573c:	e3550000 	cmp	r5, #0
    list->mem_free   = conf->mem_free;
 1005740:	e5847014 	str	r7, [r4, #20]
    if (!node) {
 1005744:	0a00001b 	beq	10057b8 <list_copy_shallow+0xb4>
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005748:	e3a07001 	mov	r7, #1
 100574c:	e3a0100c 	mov	r1, #12
 1005750:	e3a00001 	mov	r0, #1
        status = list_add(copy, node->data);
 1005754:	e5959000 	ldr	r9, [r5]
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005758:	e12fff36 	blx	r6
    if (node == NULL)
 100575c:	e3500000 	cmp	r0, #0
    if (list->size > 0)
 1005760:	e5943000 	ldr	r3, [r4]
    if (node == NULL)
 1005764:	0a000016 	beq	10057c4 <list_copy_shallow+0xc0>
    if (list->size == 0) {
 1005768:	e3530000 	cmp	r3, #0
    node->data = element;
 100576c:	e5809000 	str	r9, [r0]
    list->size++;
 1005770:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1005774:	1a000007 	bne	1005798 <list_copy_shallow+0x94>
        node = node->next;
 1005778:	e5955004 	ldr	r5, [r5, #4]
        list->head = node;
 100577c:	e5840004 	str	r0, [r4, #4]
        list->tail = node;
 1005780:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1005784:	e3550000 	cmp	r5, #0
    list->size++;
 1005788:	e5847000 	str	r7, [r4]
    while (node) {
 100578c:	0a000009 	beq	10057b8 <list_copy_shallow+0xb4>
 1005790:	e5946010 	ldr	r6, [r4, #16]
 1005794:	eaffffec 	b	100574c <list_copy_shallow+0x48>
        node->prev = list->tail;
 1005798:	e5942008 	ldr	r2, [r4, #8]
 100579c:	e5802008 	str	r2, [r0, #8]
        list->tail->next = node;
 10057a0:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 10057a4:	e5955004 	ldr	r5, [r5, #4]
        list->tail = node;
 10057a8:	e5840008 	str	r0, [r4, #8]
    list->size++;
 10057ac:	e5843000 	str	r3, [r4]
    while (node) {
 10057b0:	e3550000 	cmp	r5, #0
 10057b4:	1afffff5 	bne	1005790 <list_copy_shallow+0x8c>
    *out = copy;
 10057b8:	e5884000 	str	r4, [r8]
    return CC_OK;
 10057bc:	e3a00000 	mov	r0, #0
 10057c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (list->size > 0)
 10057c4:	e3530000 	cmp	r3, #0
 10057c8:	1a000004 	bne	10057e0 <list_copy_shallow+0xdc>
    list->mem_free(list);
 10057cc:	e1a00004 	mov	r0, r4
 10057d0:	e5943014 	ldr	r3, [r4, #20]
 10057d4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10057d8:	e3a00001 	mov	r0, #1
            return status;
 10057dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    Node *node = list->head;
 10057e0:	e5943004 	ldr	r3, [r4, #4]
    while (node) {
 10057e4:	e3530000 	cmp	r3, #0
 10057e8:	1a00000e 	bne	1005828 <list_copy_shallow+0x124>
 10057ec:	ea00001b 	b	1005860 <list_copy_shallow+0x15c>
        node->prev->next = node->next;
 10057f0:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 10057f4:	e1a00003 	mov	r0, r3
 10057f8:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 10057fc:	e3510000 	cmp	r1, #0
 1005800:	0a000011 	beq	100584c <list_copy_shallow+0x148>
    list->mem_free(node);
 1005804:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1005808:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 100580c:	e12fff33 	blx	r3
    list->size--;
 1005810:	e5943000 	ldr	r3, [r4]
    while (node) {
 1005814:	e3550000 	cmp	r5, #0
    list->size--;
 1005818:	e2433001 	sub	r3, r3, #1
 100581c:	e5843000 	str	r3, [r4]
    while (node) {
 1005820:	0a00000e 	beq	1005860 <list_copy_shallow+0x15c>
{
 1005824:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 1005828:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 100582c:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 1005830:	e3520000 	cmp	r2, #0
 1005834:	1affffed 	bne	10057f0 <list_copy_shallow+0xec>
        Node *tmp = node->next;
 1005838:	e1a01005 	mov	r1, r5
        list->head = node->next;
 100583c:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 1005840:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 1005844:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 1005848:	1affffed 	bne	1005804 <list_copy_shallow+0x100>
        list->tail = node->prev;
 100584c:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 1005850:	e5943014 	ldr	r3, [r4, #20]
 1005854:	eaffffec 	b	100580c <list_copy_shallow+0x108>
        return CC_ERR_ALLOC;
 1005858:	e3a00001 	mov	r0, #1
}
 100585c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list->head = NULL;
 1005860:	e3a03000 	mov	r3, #0
 1005864:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1005868:	e5843008 	str	r3, [r4, #8]
        return CC_OK;
 100586c:	eaffffd6 	b	10057cc <list_copy_shallow+0xc8>

01005870 <list_copy_deep>:
{
 1005870:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1005874:	e1a05000 	mov	r5, r0
    conf.mem_calloc = list->mem_calloc;
 1005878:	e5907010 	ldr	r7, [r0, #16]
{
 100587c:	e1a06001 	mov	r6, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 1005880:	e3a00001 	mov	r0, #1
 1005884:	e3a01018 	mov	r1, #24
{
 1005888:	e1a08002 	mov	r8, r2
    conf.mem_alloc  = list->mem_alloc;
 100588c:	e595a00c 	ldr	sl, [r5, #12]
    conf.mem_free   = list->mem_free;
 1005890:	e5959014 	ldr	r9, [r5, #20]
    List *list = conf->mem_calloc(1, sizeof(List));
 1005894:	e12fff37 	blx	r7
    if (!list)
 1005898:	e2504000 	subs	r4, r0, #0
 100589c:	0a00004b 	beq	10059d0 <list_copy_deep+0x160>
    Node *node = list->head;
 10058a0:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 10058a4:	e584a00c 	str	sl, [r4, #12]
    list->mem_calloc = conf->mem_calloc;
 10058a8:	e5847010 	str	r7, [r4, #16]
    if (!node) {
 10058ac:	e3550000 	cmp	r5, #0
    list->mem_free   = conf->mem_free;
 10058b0:	e5849014 	str	r9, [r4, #20]
    if (!node) {
 10058b4:	0a000014 	beq	100590c <list_copy_deep+0x9c>
    Node *node = list->mem_calloc(1, sizeof(Node));
 10058b8:	e3a07001 	mov	r7, #1
        status = list_add(copy, cp(node->data));
 10058bc:	e5950000 	ldr	r0, [r5]
 10058c0:	e12fff36 	blx	r6
    Node *node = list->mem_calloc(1, sizeof(Node));
 10058c4:	e5943010 	ldr	r3, [r4, #16]
        status = list_add(copy, cp(node->data));
 10058c8:	e1a09000 	mov	r9, r0
    Node *node = list->mem_calloc(1, sizeof(Node));
 10058cc:	e3a0100c 	mov	r1, #12
 10058d0:	e3a00001 	mov	r0, #1
 10058d4:	e12fff33 	blx	r3
    if (node == NULL)
 10058d8:	e3500000 	cmp	r0, #0
    if (list->size > 0)
 10058dc:	e5943000 	ldr	r3, [r4]
    if (node == NULL)
 10058e0:	0a000015 	beq	100593c <list_copy_deep+0xcc>
    if (list->size == 0) {
 10058e4:	e3530000 	cmp	r3, #0
    node->data = element;
 10058e8:	e5809000 	str	r9, [r0]
    list->size++;
 10058ec:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 10058f0:	1a000008 	bne	1005918 <list_copy_deep+0xa8>
        node = node->next;
 10058f4:	e5955004 	ldr	r5, [r5, #4]
        list->head = node;
 10058f8:	e5840004 	str	r0, [r4, #4]
        list->tail = node;
 10058fc:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1005900:	e3550000 	cmp	r5, #0
    list->size++;
 1005904:	e5847000 	str	r7, [r4]
    while (node) {
 1005908:	1affffeb 	bne	10058bc <list_copy_deep+0x4c>
    *out = copy;
 100590c:	e5884000 	str	r4, [r8]
    return CC_OK;
 1005910:	e3a00000 	mov	r0, #0
 1005914:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        node->prev = list->tail;
 1005918:	e5942008 	ldr	r2, [r4, #8]
 100591c:	e5802008 	str	r2, [r0, #8]
        list->tail->next = node;
 1005920:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 1005924:	e5955004 	ldr	r5, [r5, #4]
        list->tail = node;
 1005928:	e5840008 	str	r0, [r4, #8]
    list->size++;
 100592c:	e5843000 	str	r3, [r4]
    while (node) {
 1005930:	e3550000 	cmp	r5, #0
 1005934:	1affffe0 	bne	10058bc <list_copy_deep+0x4c>
 1005938:	eafffff3 	b	100590c <list_copy_deep+0x9c>
    if (list->size > 0)
 100593c:	e3530000 	cmp	r3, #0
 1005940:	1a000004 	bne	1005958 <list_copy_deep+0xe8>
    list->mem_free(list);
 1005944:	e1a00004 	mov	r0, r4
 1005948:	e5943014 	ldr	r3, [r4, #20]
 100594c:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1005950:	e3a00001 	mov	r0, #1
            return status;
 1005954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    Node *node = list->head;
 1005958:	e5943004 	ldr	r3, [r4, #4]
    while (node) {
 100595c:	e3530000 	cmp	r3, #0
 1005960:	1a00000e 	bne	10059a0 <list_copy_deep+0x130>
 1005964:	ea00001b 	b	10059d8 <list_copy_deep+0x168>
        node->prev->next = node->next;
 1005968:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 100596c:	e1a00003 	mov	r0, r3
 1005970:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 1005974:	e3510000 	cmp	r1, #0
 1005978:	0a000011 	beq	10059c4 <list_copy_deep+0x154>
    list->mem_free(node);
 100597c:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1005980:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 1005984:	e12fff33 	blx	r3
    list->size--;
 1005988:	e5943000 	ldr	r3, [r4]
    while (node) {
 100598c:	e3550000 	cmp	r5, #0
    list->size--;
 1005990:	e2433001 	sub	r3, r3, #1
 1005994:	e5843000 	str	r3, [r4]
    while (node) {
 1005998:	0a00000e 	beq	10059d8 <list_copy_deep+0x168>
{
 100599c:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 10059a0:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 10059a4:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 10059a8:	e3520000 	cmp	r2, #0
 10059ac:	1affffed 	bne	1005968 <list_copy_deep+0xf8>
        Node *tmp = node->next;
 10059b0:	e1a01005 	mov	r1, r5
        list->head = node->next;
 10059b4:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 10059b8:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 10059bc:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 10059c0:	1affffed 	bne	100597c <list_copy_deep+0x10c>
        list->tail = node->prev;
 10059c4:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 10059c8:	e5943014 	ldr	r3, [r4, #20]
 10059cc:	eaffffec 	b	1005984 <list_copy_deep+0x114>
        return CC_ERR_ALLOC;
 10059d0:	e3a00001 	mov	r0, #1
}
 10059d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list->head = NULL;
 10059d8:	e3a03000 	mov	r3, #0
 10059dc:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 10059e0:	e5843008 	str	r3, [r4, #8]
        return CC_OK;
 10059e4:	eaffffd6 	b	1005944 <list_copy_deep+0xd4>

010059e8 <list_to_array>:
{
 10059e8:	e92d4070 	push	{r4, r5, r6, lr}
 10059ec:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 10059f0:	e5900000 	ldr	r0, [r0]
 10059f4:	e3500000 	cmp	r0, #0
 10059f8:	0a000013 	beq	1005a4c <list_to_array+0x64>
    void **array = list->mem_calloc(list->size, sizeof(void*));
 10059fc:	e1a05001 	mov	r5, r1
 1005a00:	e5943010 	ldr	r3, [r4, #16]
 1005a04:	e3a01004 	mov	r1, #4
 1005a08:	e12fff33 	blx	r3
    if (!array)
 1005a0c:	e3500000 	cmp	r0, #0
 1005a10:	0a00000f 	beq	1005a54 <list_to_array+0x6c>
    for (i = 0; i < list->size; i++) {
 1005a14:	e594e000 	ldr	lr, [r4]
    Node *node = list->head;
 1005a18:	e5943004 	ldr	r3, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1005a1c:	e35e0000 	cmp	lr, #0
 1005a20:	0a000006 	beq	1005a40 <list_to_array+0x58>
 1005a24:	e080e10e 	add	lr, r0, lr, lsl #2
 1005a28:	e1a02000 	mov	r2, r0
        array[i] = node->data;
 1005a2c:	e593c000 	ldr	ip, [r3]
 1005a30:	e482c004 	str	ip, [r2], #4
    for (i = 0; i < list->size; i++) {
 1005a34:	e152000e 	cmp	r2, lr
        node     = node->next;
 1005a38:	e5933004 	ldr	r3, [r3, #4]
    for (i = 0; i < list->size; i++) {
 1005a3c:	1afffffa 	bne	1005a2c <list_to_array+0x44>
    *out = array;
 1005a40:	e5850000 	str	r0, [r5]
    return CC_OK;
 1005a44:	e3a00000 	mov	r0, #0
 1005a48:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_INVALID_RANGE;
 1005a4c:	e3a00003 	mov	r0, #3
 1005a50:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1005a54:	e3a00001 	mov	r0, #1
}
 1005a58:	e8bd8070 	pop	{r4, r5, r6, pc}

01005a5c <list_contains>:
    Node *node = list->head;
 1005a5c:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1005a60:	e3530000 	cmp	r3, #0
 1005a64:	0a000007 	beq	1005a88 <list_contains+0x2c>
    size_t e_count = 0;
 1005a68:	e3a00000 	mov	r0, #0
        if (node->data == element)
 1005a6c:	e5932000 	ldr	r2, [r3]
        node = node->next;
 1005a70:	e5933004 	ldr	r3, [r3, #4]
        if (node->data == element)
 1005a74:	e1510002 	cmp	r1, r2
            e_count++;
 1005a78:	02800001 	addeq	r0, r0, #1
    while (node) {
 1005a7c:	e3530000 	cmp	r3, #0
 1005a80:	1afffff9 	bne	1005a6c <list_contains+0x10>
 1005a84:	e12fff1e 	bx	lr
    size_t e_count = 0;
 1005a88:	e1a00003 	mov	r0, r3
}
 1005a8c:	e12fff1e 	bx	lr

01005a90 <list_contains_value>:
{
 1005a90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    Node *node = list->head;
 1005a94:	e5904004 	ldr	r4, [r0, #4]
    while (node) {
 1005a98:	e3540000 	cmp	r4, #0
 1005a9c:	0a00000c 	beq	1005ad4 <list_contains_value+0x44>
 1005aa0:	e1a06002 	mov	r6, r2
 1005aa4:	e1a05001 	mov	r5, r1
    size_t e_count = 0;
 1005aa8:	e3a07000 	mov	r7, #0
        if (cmp(node->data, element) == 0)
 1005aac:	e5940000 	ldr	r0, [r4]
 1005ab0:	e1a01005 	mov	r1, r5
 1005ab4:	e12fff36 	blx	r6
        node = node->next;
 1005ab8:	e5944004 	ldr	r4, [r4, #4]
        if (cmp(node->data, element) == 0)
 1005abc:	e3500000 	cmp	r0, #0
            e_count++;
 1005ac0:	02877001 	addeq	r7, r7, #1
    while (node) {
 1005ac4:	e3540000 	cmp	r4, #0
 1005ac8:	1afffff7 	bne	1005aac <list_contains_value+0x1c>
}
 1005acc:	e1a00007 	mov	r0, r7
 1005ad0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    size_t e_count = 0;
 1005ad4:	e1a07004 	mov	r7, r4
}
 1005ad8:	e1a00007 	mov	r0, r7
 1005adc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005ae0 <list_index_of>:
{
 1005ae0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    Node   *node = list->head;
 1005ae4:	e5904004 	ldr	r4, [r0, #4]
    while (node) {
 1005ae8:	e3540000 	cmp	r4, #0
 1005aec:	0a00000f 	beq	1005b30 <list_index_of+0x50>
 1005af0:	e1a08003 	mov	r8, r3
 1005af4:	e1a07002 	mov	r7, r2
 1005af8:	e1a06001 	mov	r6, r1
    size_t  i    = 0;
 1005afc:	e3a05000 	mov	r5, #0
 1005b00:	ea000003 	b	1005b14 <list_index_of+0x34>
        node = node->next;
 1005b04:	e5944004 	ldr	r4, [r4, #4]
        i++;
 1005b08:	e2855001 	add	r5, r5, #1
    while (node) {
 1005b0c:	e3540000 	cmp	r4, #0
 1005b10:	0a000006 	beq	1005b30 <list_index_of+0x50>
        if (cmp(node->data, element) == 0) {
 1005b14:	e1a01006 	mov	r1, r6
 1005b18:	e5940000 	ldr	r0, [r4]
 1005b1c:	e12fff37 	blx	r7
 1005b20:	e3500000 	cmp	r0, #0
 1005b24:	1afffff6 	bne	1005b04 <list_index_of+0x24>
            *index = i;
 1005b28:	e5885000 	str	r5, [r8]
            return CC_OK;
 1005b2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_ERR_OUT_OF_RANGE;
 1005b30:	e3a00008 	mov	r0, #8
}
 1005b34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005b38 <list_size>:
}
 1005b38:	e5900000 	ldr	r0, [r0]
 1005b3c:	e12fff1e 	bx	lr

01005b40 <list_sort>:
    if (list->size == 0)
 1005b40:	e5902000 	ldr	r2, [r0]
 1005b44:	e3520000 	cmp	r2, #0
 1005b48:	0a000026 	beq	1005be8 <list_sort+0xa8>
{
 1005b4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005b50:	e1a05000 	mov	r5, r0
 1005b54:	e1a07001 	mov	r7, r1
    void **array = list->mem_calloc(list->size, sizeof(void*));
 1005b58:	e1a00002 	mov	r0, r2
 1005b5c:	e3a01004 	mov	r1, #4
 1005b60:	e5953010 	ldr	r3, [r5, #16]
 1005b64:	e12fff33 	blx	r3
    if (!array)
 1005b68:	e2506000 	subs	r6, r0, #0
 1005b6c:	0a00001f 	beq	1005bf0 <list_sort+0xb0>
    Node *node = list->head;
 1005b70:	e8950012 	ldm	r5, {r1, r4}
    for (i = 0; i < list->size; i++) {
 1005b74:	e3510000 	cmp	r1, #0
 1005b78:	0a000007 	beq	1005b9c <list_sort+0x5c>
 1005b7c:	e0860101 	add	r0, r6, r1, lsl #2
 1005b80:	e1a02006 	mov	r2, r6
        array[i] = node->data;
 1005b84:	e594c000 	ldr	ip, [r4]
 1005b88:	e482c004 	str	ip, [r2], #4
    for (i = 0; i < list->size; i++) {
 1005b8c:	e1520000 	cmp	r2, r0
        node     = node->next;
 1005b90:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1005b94:	1afffffa 	bne	1005b84 <list_sort+0x44>
 1005b98:	e5954004 	ldr	r4, [r5, #4]
    qsort(elements, list->size, sizeof(void*), cmp);
 1005b9c:	e1a03007 	mov	r3, r7
 1005ba0:	e3a02004 	mov	r2, #4
 1005ba4:	e1a00006 	mov	r0, r6
 1005ba8:	fa005fbc 	blx	101daa0 <qsort>
    for (i = 0; i < list->size; i++) {
 1005bac:	e5951000 	ldr	r1, [r5]
 1005bb0:	e3510000 	cmp	r1, #0
 1005bb4:	10861101 	addne	r1, r6, r1, lsl #2
 1005bb8:	11a03006 	movne	r3, r6
 1005bbc:	0a000004 	beq	1005bd4 <list_sort+0x94>
        node->data = elements[i];
 1005bc0:	e4932004 	ldr	r2, [r3], #4
    for (i = 0; i < list->size; i++) {
 1005bc4:	e1530001 	cmp	r3, r1
        node->data = elements[i];
 1005bc8:	e5842000 	str	r2, [r4]
        node       = node->next;
 1005bcc:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1005bd0:	1afffffa 	bne	1005bc0 <list_sort+0x80>
    list->mem_free(elements);
 1005bd4:	e1a00006 	mov	r0, r6
 1005bd8:	e5953014 	ldr	r3, [r5, #20]
 1005bdc:	e12fff33 	blx	r3
    return CC_OK;
 1005be0:	e3a00000 	mov	r0, #0
 1005be4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_INVALID_RANGE;
 1005be8:	e3a00003 	mov	r0, #3
}
 1005bec:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1005bf0:	e3a00001 	mov	r0, #1
}
 1005bf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005bf8 <list_sort_in_place>:
    split(list, list->head, list->size, cmp);
 1005bf8:	e1a03001 	mov	r3, r1
 1005bfc:	e5902000 	ldr	r2, [r0]
 1005c00:	e5901004 	ldr	r1, [r0, #4]
 1005c04:	eafff9ee 	b	10043c4 <split>

01005c08 <list_foreach>:
{
 1005c08:	e92d4070 	push	{r4, r5, r6, lr}
    Node *n = list->head;
 1005c0c:	e5904004 	ldr	r4, [r0, #4]
    while (n) {
 1005c10:	e3540000 	cmp	r4, #0
 1005c14:	08bd8070 	popeq	{r4, r5, r6, pc}
 1005c18:	e1a05001 	mov	r5, r1
        op(n->data);
 1005c1c:	e5940000 	ldr	r0, [r4]
 1005c20:	e12fff35 	blx	r5
        n = n->next;
 1005c24:	e5944004 	ldr	r4, [r4, #4]
    while (n) {
 1005c28:	e3540000 	cmp	r4, #0
 1005c2c:	1afffffa 	bne	1005c1c <list_foreach+0x14>
 1005c30:	e8bd8070 	pop	{r4, r5, r6, pc}

01005c34 <list_filter_mut>:
    if (list_size(list) == 0)
 1005c34:	e5903000 	ldr	r3, [r0]
 1005c38:	e3530000 	cmp	r3, #0
 1005c3c:	0a00001f 	beq	1005cc0 <list_filter_mut+0x8c>
{
 1005c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005c44:	e1a07001 	mov	r7, r1
    Node *curr = list->head;
 1005c48:	e5904004 	ldr	r4, [r0, #4]
 1005c4c:	e1a06000 	mov	r6, r0
    while (curr) {
 1005c50:	e3540000 	cmp	r4, #0
 1005c54:	1a000002 	bne	1005c64 <list_filter_mut+0x30>
 1005c58:	ea000016 	b	1005cb8 <list_filter_mut+0x84>
 1005c5c:	e2554000 	subs	r4, r5, #0
 1005c60:	0a000014 	beq	1005cb8 <list_filter_mut+0x84>
        next = curr->next;
 1005c64:	e8940021 	ldm	r4, {r0, r5}
        if (!pred(curr->data)) {
 1005c68:	e12fff37 	blx	r7
 1005c6c:	e3500000 	cmp	r0, #0
 1005c70:	1afffff9 	bne	1005c5c <list_filter_mut+0x28>
    if (node->prev != NULL)
 1005c74:	e5942008 	ldr	r2, [r4, #8]
    list->mem_free(node);
 1005c78:	e1a00004 	mov	r0, r4
 1005c7c:	e5943004 	ldr	r3, [r4, #4]
    if (node->prev != NULL)
 1005c80:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 1005c84:	15823004 	strne	r3, [r2, #4]
    if (node->prev == NULL)
 1005c88:	15943004 	ldrne	r3, [r4, #4]
        list->head = node->next;
 1005c8c:	05863004 	streq	r3, [r6, #4]
    if (node->next == NULL)
 1005c90:	e3530000 	cmp	r3, #0
        node->next->prev = node->prev;
 1005c94:	15832008 	strne	r2, [r3, #8]
        list->tail = node->prev;
 1005c98:	05862008 	streq	r2, [r6, #8]
    list->mem_free(node);
 1005c9c:	e5963014 	ldr	r3, [r6, #20]
 1005ca0:	e12fff33 	blx	r3
    list->size--;
 1005ca4:	e5963000 	ldr	r3, [r6]
    while (curr) {
 1005ca8:	e2554000 	subs	r4, r5, #0
    list->size--;
 1005cac:	e2433001 	sub	r3, r3, #1
 1005cb0:	e5863000 	str	r3, [r6]
    while (curr) {
 1005cb4:	1affffea 	bne	1005c64 <list_filter_mut+0x30>
    return CC_OK;
 1005cb8:	e3a00000 	mov	r0, #0
}
 1005cbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1005cc0:	e3a00008 	mov	r0, #8
}
 1005cc4:	e12fff1e 	bx	lr

01005cc8 <list_filter>:
    if (list_size(list) == 0)
 1005cc8:	e5903000 	ldr	r3, [r0]
 1005ccc:	e3530000 	cmp	r3, #0
 1005cd0:	0a00002f 	beq	1005d94 <list_filter+0xcc>
{
 1005cd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005cd8:	e1a06001 	mov	r6, r1
 1005cdc:	e1a04000 	mov	r4, r0
    List *list = conf->mem_calloc(1, sizeof(List));
 1005ce0:	e3a01018 	mov	r1, #24
 1005ce4:	e3a00001 	mov	r0, #1
 1005ce8:	e1a07002 	mov	r7, r2
 1005cec:	fa0057b1 	blx	101bbb8 <calloc>
    if (!list)
 1005cf0:	e2505000 	subs	r5, r0, #0
 1005cf4:	0a000028 	beq	1005d9c <list_filter+0xd4>
    Node *curr = list->head;
 1005cf8:	e5944004 	ldr	r4, [r4, #4]
    list->mem_alloc  = conf->mem_alloc;
 1005cfc:	e30c37b9 	movw	r3, #51129	; 0xc7b9
 1005d00:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1005d04:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    list->mem_alloc  = conf->mem_alloc;
 1005d08:	e585300c 	str	r3, [r5, #12]
    list->mem_free   = conf->mem_free;
 1005d0c:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    while (curr) {
 1005d10:	e3540000 	cmp	r4, #0
    list->mem_calloc = conf->mem_calloc;
 1005d14:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1005d18:	e3403101 	movt	r3, #257	; 0x101
 1005d1c:	e1c521f0 	strd	r2, [r5, #16]
    while (curr) {
 1005d20:	1a000016 	bne	1005d80 <list_filter+0xb8>
    *out = filtered;
 1005d24:	e5875000 	str	r5, [r7]
    return CC_OK;
 1005d28:	e3a00000 	mov	r0, #0
 1005d2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005d30:	e5953010 	ldr	r3, [r5, #16]
 1005d34:	e3a0100c 	mov	r1, #12
 1005d38:	e3a00001 	mov	r0, #1
            list_add(filtered, curr->data);
 1005d3c:	e5948000 	ldr	r8, [r4]
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005d40:	e12fff33 	blx	r3
    if (node == NULL)
 1005d44:	e3500000 	cmp	r0, #0
 1005d48:	0a000009 	beq	1005d74 <list_filter+0xac>
    if (list->size == 0) {
 1005d4c:	e5953000 	ldr	r3, [r5]
    node->data = element;
 1005d50:	e5808000 	str	r8, [r0]
    if (list->size == 0) {
 1005d54:	e3530000 	cmp	r3, #0
    list->size++;
 1005d58:	e2833001 	add	r3, r3, #1
        node->prev = list->tail;
 1005d5c:	15952008 	ldrne	r2, [r5, #8]
        list->head = node;
 1005d60:	05850004 	streq	r0, [r5, #4]
        node->prev = list->tail;
 1005d64:	15802008 	strne	r2, [r0, #8]
        list->tail->next = node;
 1005d68:	15820004 	strne	r0, [r2, #4]
        list->tail = node;
 1005d6c:	e5850008 	str	r0, [r5, #8]
    list->size++;
 1005d70:	e5853000 	str	r3, [r5]
        curr = curr->next;
 1005d74:	e5944004 	ldr	r4, [r4, #4]
    while (curr) {
 1005d78:	e3540000 	cmp	r4, #0
 1005d7c:	0affffe8 	beq	1005d24 <list_filter+0x5c>
        if (pred(curr->data)) {
 1005d80:	e5940000 	ldr	r0, [r4]
 1005d84:	e12fff36 	blx	r6
 1005d88:	e3500000 	cmp	r0, #0
 1005d8c:	0afffff8 	beq	1005d74 <list_filter+0xac>
 1005d90:	eaffffe6 	b	1005d30 <list_filter+0x68>
        return CC_ERR_OUT_OF_RANGE;
 1005d94:	e3a00008 	mov	r0, #8
}
 1005d98:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1005d9c:	e3a00001 	mov	r0, #1
}
 1005da0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005da4 <list_iter_init>:
    iter->next  = list->head;
 1005da4:	e5912004 	ldr	r2, [r1, #4]
    iter->index = 0;
 1005da8:	e3a03000 	mov	r3, #0
    iter->list  = list;
 1005dac:	e5801004 	str	r1, [r0, #4]
    iter->index = 0;
 1005db0:	e5803000 	str	r3, [r0]
    iter->next  = list->head;
 1005db4:	e580200c 	str	r2, [r0, #12]
    iter->last  = NULL;
 1005db8:	e5803008 	str	r3, [r0, #8]
}
 1005dbc:	e12fff1e 	bx	lr

01005dc0 <list_iter_remove>:
    if (!iter->last)
 1005dc0:	e5903008 	ldr	r3, [r0, #8]
 1005dc4:	e3530000 	cmp	r3, #0
 1005dc8:	0a00001b 	beq	1005e3c <list_iter_remove+0x7c>
    if (node->prev != NULL)
 1005dcc:	e593c008 	ldr	ip, [r3, #8]
 1005dd0:	e5932004 	ldr	r2, [r3, #4]
{
 1005dd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005dd8:	e1a04000 	mov	r4, r0
    if (node->prev != NULL)
 1005ddc:	e35c0000 	cmp	ip, #0
    void *e = unlinkn(iter->list, iter->last);
 1005de0:	e5906004 	ldr	r6, [r0, #4]
    list->mem_free(node);
 1005de4:	e1a00003 	mov	r0, r3
 1005de8:	e1a05001 	mov	r5, r1
    void *data = node->data;
 1005dec:	e5937000 	ldr	r7, [r3]
        node->prev->next = node->next;
 1005df0:	158c2004 	strne	r2, [ip, #4]
 1005df4:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1005df8:	05862004 	streq	r2, [r6, #4]
    list->mem_free(node);
 1005dfc:	e5963014 	ldr	r3, [r6, #20]
    if (node->next == NULL)
 1005e00:	e3520000 	cmp	r2, #0
        node->next->prev = node->prev;
 1005e04:	1582c008 	strne	ip, [r2, #8]
        list->tail = node->prev;
 1005e08:	0586c008 	streq	ip, [r6, #8]
    list->mem_free(node);
 1005e0c:	e12fff33 	blx	r3
    list->size--;
 1005e10:	e5963000 	ldr	r3, [r6]
    if (out)
 1005e14:	e3550000 	cmp	r5, #0
    iter->last = NULL;
 1005e18:	e3a00000 	mov	r0, #0
    list->size--;
 1005e1c:	e2433001 	sub	r3, r3, #1
 1005e20:	e5863000 	str	r3, [r6]
    iter->last = NULL;
 1005e24:	e5840008 	str	r0, [r4, #8]
    if (out)
 1005e28:	0a000001 	beq	1005e34 <list_iter_remove+0x74>
        *out = e;
 1005e2c:	e5857000 	str	r7, [r5]
 1005e30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_OK;
 1005e34:	e1a00005 	mov	r0, r5
}
 1005e38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1005e3c:	e3a00007 	mov	r0, #7
}
 1005e40:	e12fff1e 	bx	lr

01005e44 <list_iter_add>:
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005e44:	e5903004 	ldr	r3, [r0, #4]
{
 1005e48:	e92d4070 	push	{r4, r5, r6, lr}
 1005e4c:	e1a04000 	mov	r4, r0
 1005e50:	e1a05001 	mov	r5, r1
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005e54:	e3a00001 	mov	r0, #1
 1005e58:	e3a0100c 	mov	r1, #12
 1005e5c:	e5933010 	ldr	r3, [r3, #16]
 1005e60:	e12fff33 	blx	r3
    if (!new_node)
 1005e64:	e3500000 	cmp	r0, #0
 1005e68:	0a00001c 	beq	1005ee0 <list_iter_add+0x9c>
    if (ins->next)
 1005e6c:	e5901004 	ldr	r1, [r0, #4]
 1005e70:	e5903008 	ldr	r3, [r0, #8]
    link_after(iter->last, new_node);
 1005e74:	e5942008 	ldr	r2, [r4, #8]
    if (ins->next)
 1005e78:	e3510000 	cmp	r1, #0
    new_node->data = element;
 1005e7c:	e5805000 	str	r5, [r0]
        ins->next->prev = ins->prev;
 1005e80:	15813008 	strne	r3, [r1, #8]
 1005e84:	15903008 	ldrne	r3, [r0, #8]
    if (ins->prev)
 1005e88:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1005e8c:	15831004 	strne	r1, [r3, #4]
    if (!base->next) {
 1005e90:	e5923004 	ldr	r3, [r2, #4]
    if (iter->index == iter->list->size)
 1005e94:	e5941004 	ldr	r1, [r4, #4]
    if (!base->next) {
 1005e98:	e3530000 	cmp	r3, #0
        ins->prev       = base;
 1005e9c:	05802008 	streq	r2, [r0, #8]
        ins->next       = base->next;
 1005ea0:	15803004 	strne	r3, [r0, #4]
        base->next      = ins;
 1005ea4:	05820004 	streq	r0, [r2, #4]
        ins->next->prev = ins;
 1005ea8:	15830008 	strne	r0, [r3, #8]
        ins->next       = NULL;
 1005eac:	05803004 	streq	r3, [r0, #4]
        ins->prev       = base;
 1005eb0:	15802008 	strne	r2, [r0, #8]
    if (iter->index == iter->list->size)
 1005eb4:	e5943000 	ldr	r3, [r4]
        base->next      = ins;
 1005eb8:	15820004 	strne	r0, [r2, #4]
    if (iter->index == iter->list->size)
 1005ebc:	e5912000 	ldr	r2, [r1]
 1005ec0:	e1530002 	cmp	r3, r2
    iter->list->size++;
 1005ec4:	e2822001 	add	r2, r2, #1
    iter->index++;
 1005ec8:	e2833001 	add	r3, r3, #1
        iter->list->tail = new_node;
 1005ecc:	05810008 	streq	r0, [r1, #8]
    iter->list->size++;
 1005ed0:	e5812000 	str	r2, [r1]
    return CC_OK;
 1005ed4:	e3a00000 	mov	r0, #0
    iter->index++;
 1005ed8:	e5843000 	str	r3, [r4]
    return CC_OK;
 1005edc:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1005ee0:	e3a00001 	mov	r0, #1
}
 1005ee4:	e8bd8070 	pop	{r4, r5, r6, pc}

01005ee8 <list_iter_replace>:
    if (!iter->last)
 1005ee8:	e5903008 	ldr	r3, [r0, #8]
 1005eec:	e3530000 	cmp	r3, #0
 1005ef0:	0a000005 	beq	1005f0c <list_iter_replace+0x24>
    void *old = iter->last->data;
 1005ef4:	e5930000 	ldr	r0, [r3]
    if (out)
 1005ef8:	e3520000 	cmp	r2, #0
    iter->last->data = element;
 1005efc:	e5831000 	str	r1, [r3]
        *out = old;
 1005f00:	15820000 	strne	r0, [r2]
    return CC_OK;
 1005f04:	e3a00000 	mov	r0, #0
 1005f08:	e12fff1e 	bx	lr
        return CC_ERR_VALUE_NOT_FOUND;
 1005f0c:	e3a00007 	mov	r0, #7
 1005f10:	e12fff1e 	bx	lr

01005f14 <list_iter_index>:
    return iter->index - 1;
 1005f14:	e5900000 	ldr	r0, [r0]
}
 1005f18:	e2400001 	sub	r0, r0, #1
 1005f1c:	e12fff1e 	bx	lr

01005f20 <list_iter_next>:
    if (!iter->next)
 1005f20:	e590200c 	ldr	r2, [r0, #12]
 1005f24:	e3520000 	cmp	r2, #0
 1005f28:	0a00000b 	beq	1005f5c <list_iter_next+0x3c>
    iter->index++;
 1005f2c:	e590c000 	ldr	ip, [r0]
 1005f30:	e1a03000 	mov	r3, r0
{
 1005f34:	e92d4010 	push	{r4, lr}
    return CC_OK;
 1005f38:	e3a00000 	mov	r0, #0
    void *data = iter->next->data;
 1005f3c:	e592e000 	ldr	lr, [r2]
    iter->index++;
 1005f40:	e28cc001 	add	ip, ip, #1
    iter->next = iter->next->next;
 1005f44:	e5924004 	ldr	r4, [r2, #4]
    iter->last = iter->next;
 1005f48:	e5832008 	str	r2, [r3, #8]
    iter->index++;
 1005f4c:	e583c000 	str	ip, [r3]
    iter->next = iter->next->next;
 1005f50:	e583400c 	str	r4, [r3, #12]
    *out = data;
 1005f54:	e581e000 	str	lr, [r1]
}
 1005f58:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 1005f5c:	e3a00009 	mov	r0, #9
}
 1005f60:	e12fff1e 	bx	lr

01005f64 <list_diter_init>:
    iter->index = list->size;
 1005f64:	e591c000 	ldr	ip, [r1]
    iter->last  = NULL;
 1005f68:	e3a03000 	mov	r3, #0
    iter->next  = list->tail;
 1005f6c:	e5912008 	ldr	r2, [r1, #8]
    iter->list  = list;
 1005f70:	e5801004 	str	r1, [r0, #4]
    iter->index = list->size;
 1005f74:	e580c000 	str	ip, [r0]
    iter->next  = list->tail;
 1005f78:	e580200c 	str	r2, [r0, #12]
    iter->last  = NULL;
 1005f7c:	e5803008 	str	r3, [r0, #8]
}
 1005f80:	e12fff1e 	bx	lr

01005f84 <list_diter_add>:
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005f84:	e5903004 	ldr	r3, [r0, #4]
{
 1005f88:	e92d4070 	push	{r4, r5, r6, lr}
 1005f8c:	e1a04000 	mov	r4, r0
 1005f90:	e1a05001 	mov	r5, r1
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005f94:	e3a00001 	mov	r0, #1
 1005f98:	e3a0100c 	mov	r1, #12
 1005f9c:	e5933010 	ldr	r3, [r3, #16]
 1005fa0:	e12fff33 	blx	r3
    if (!new_node)
 1005fa4:	e2503000 	subs	r3, r0, #0
 1005fa8:	0a000018 	beq	1006010 <list_diter_add+0x8c>
    if (iter->index == 0)
 1005fac:	e5942000 	ldr	r2, [r4]
 1005fb0:	e594c004 	ldr	ip, [r4, #4]
    if (ins->next != NULL)
 1005fb4:	e5930004 	ldr	r0, [r3, #4]
    if (iter->index == 0)
 1005fb8:	e3520000 	cmp	r2, #0
 1005fbc:	e5932008 	ldr	r2, [r3, #8]
    new_node->data = element;
 1005fc0:	e5835000 	str	r5, [r3]
        iter->list->head = new_node;
 1005fc4:	058c3004 	streq	r3, [ip, #4]
    if (ins->next != NULL)
 1005fc8:	e3500000 	cmp	r0, #0
    link_behind(iter->last, new_node);
 1005fcc:	e5941008 	ldr	r1, [r4, #8]
        ins->next->prev = ins->prev;
 1005fd0:	15802008 	strne	r2, [r0, #8]
 1005fd4:	15932008 	ldrne	r2, [r3, #8]
    if (ins->prev != NULL)
 1005fd8:	e3520000 	cmp	r2, #0
        ins->prev->next = ins->next;
 1005fdc:	15820004 	strne	r0, [r2, #4]
    return CC_OK;
 1005fe0:	e3a00000 	mov	r0, #0
    if (base->prev == NULL) {
 1005fe4:	e5912008 	ldr	r2, [r1, #8]
 1005fe8:	e3520000 	cmp	r2, #0
        ins->prev       = NULL;
 1005fec:	e5832008 	str	r2, [r3, #8]
        ins->prev->next = ins;
 1005ff0:	15823004 	strne	r3, [r2, #4]
    iter->list->size++;
 1005ff4:	e59c2000 	ldr	r2, [ip]
        ins->next       = base;
 1005ff8:	e5831004 	str	r1, [r3, #4]
        base->prev      = ins;
 1005ffc:	e5813008 	str	r3, [r1, #8]
    iter->list->size++;
 1006000:	e2822001 	add	r2, r2, #1
 1006004:	e58c2000 	str	r2, [ip]
    iter->last = new_node;
 1006008:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 100600c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1006010:	e3a00001 	mov	r0, #1
}
 1006014:	e8bd8070 	pop	{r4, r5, r6, pc}

01006018 <list_diter_remove>:
 1006018:	e5903008 	ldr	r3, [r0, #8]
 100601c:	e3530000 	cmp	r3, #0
 1006020:	0a00001b 	beq	1006094 <list_diter_remove+0x7c>
 1006024:	e593c008 	ldr	ip, [r3, #8]
 1006028:	e5932004 	ldr	r2, [r3, #4]
 100602c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006030:	e1a04000 	mov	r4, r0
 1006034:	e35c0000 	cmp	ip, #0
 1006038:	e5906004 	ldr	r6, [r0, #4]
 100603c:	e1a00003 	mov	r0, r3
 1006040:	e1a05001 	mov	r5, r1
 1006044:	e5937000 	ldr	r7, [r3]
 1006048:	158c2004 	strne	r2, [ip, #4]
 100604c:	15932004 	ldrne	r2, [r3, #4]
 1006050:	05862004 	streq	r2, [r6, #4]
 1006054:	e5963014 	ldr	r3, [r6, #20]
 1006058:	e3520000 	cmp	r2, #0
 100605c:	1582c008 	strne	ip, [r2, #8]
 1006060:	0586c008 	streq	ip, [r6, #8]
 1006064:	e12fff33 	blx	r3
 1006068:	e5963000 	ldr	r3, [r6]
 100606c:	e3550000 	cmp	r5, #0
 1006070:	e3a00000 	mov	r0, #0
 1006074:	e2433001 	sub	r3, r3, #1
 1006078:	e5863000 	str	r3, [r6]
 100607c:	e5840008 	str	r0, [r4, #8]
 1006080:	0a000001 	beq	100608c <list_diter_remove+0x74>
 1006084:	e5857000 	str	r7, [r5]
 1006088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 100608c:	e1a00005 	mov	r0, r5
 1006090:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1006094:	e3a00007 	mov	r0, #7
 1006098:	e12fff1e 	bx	lr

0100609c <list_diter_replace>:
 100609c:	e5903008 	ldr	r3, [r0, #8]
 10060a0:	e3530000 	cmp	r3, #0
 10060a4:	0a000005 	beq	10060c0 <list_diter_replace+0x24>
 10060a8:	e5930000 	ldr	r0, [r3]
 10060ac:	e3520000 	cmp	r2, #0
 10060b0:	e5831000 	str	r1, [r3]
 10060b4:	15820000 	strne	r0, [r2]
 10060b8:	e3a00000 	mov	r0, #0
 10060bc:	e12fff1e 	bx	lr
 10060c0:	e3a00007 	mov	r0, #7
 10060c4:	e12fff1e 	bx	lr

010060c8 <list_diter_index>:
 10060c8:	e5900000 	ldr	r0, [r0]
 10060cc:	e2400001 	sub	r0, r0, #1
 10060d0:	e12fff1e 	bx	lr

010060d4 <list_diter_next>:
    if (!iter->next)
 10060d4:	e590200c 	ldr	r2, [r0, #12]
 10060d8:	e3520000 	cmp	r2, #0
 10060dc:	0a00000b 	beq	1006110 <list_diter_next+0x3c>
    iter->index--;
 10060e0:	e590c000 	ldr	ip, [r0]
 10060e4:	e1a03000 	mov	r3, r0
{
 10060e8:	e92d4010 	push	{r4, lr}
    return CC_OK;
 10060ec:	e3a00000 	mov	r0, #0
    void *data = iter->next->data;
 10060f0:	e592e000 	ldr	lr, [r2]
    iter->index--;
 10060f4:	e24cc001 	sub	ip, ip, #1
    iter->next = iter->next->prev;
 10060f8:	e5924008 	ldr	r4, [r2, #8]
    iter->last = iter->next;
 10060fc:	e5832008 	str	r2, [r3, #8]
    iter->index--;
 1006100:	e583c000 	str	ip, [r3]
    iter->next = iter->next->prev;
 1006104:	e583400c 	str	r4, [r3, #12]
    *out = data;
 1006108:	e581e000 	str	lr, [r1]
}
 100610c:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 1006110:	e3a00009 	mov	r0, #9
}
 1006114:	e12fff1e 	bx	lr

01006118 <list_zip_iter_init>:
    iter->l2_next = l2->head;
 1006118:	e592c004 	ldr	ip, [r2, #4]
    iter->index   = 0;
 100611c:	e3a03000 	mov	r3, #0
{
 1006120:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    iter->l1_next = l1->head;
 1006124:	e591e004 	ldr	lr, [r1, #4]
    iter->l1      = l1;
 1006128:	e5801000 	str	r1, [r0]
    iter->l1_next = l1->head;
 100612c:	e580e010 	str	lr, [r0, #16]
    iter->l2      = l2;
 1006130:	e5802004 	str	r2, [r0, #4]
    iter->l2_next = l2->head;
 1006134:	e580c014 	str	ip, [r0, #20]
    iter->index   = 0;
 1006138:	e5803018 	str	r3, [r0, #24]
    iter->l1_last = NULL;
 100613c:	e5803008 	str	r3, [r0, #8]
    iter->l2_last = NULL;
 1006140:	e580300c 	str	r3, [r0, #12]
}
 1006144:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01006148 <list_zip_iter_next>:
    if (!iter->l1_next || !iter->l2_next)
 1006148:	e590c010 	ldr	ip, [r0, #16]
 100614c:	e35c0000 	cmp	ip, #0
 1006150:	0a000013 	beq	10061a4 <list_zip_iter_next+0x5c>
{
 1006154:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1006158:	e1a03000 	mov	r3, r0
    if (!iter->l1_next || !iter->l2_next)
 100615c:	e590e014 	ldr	lr, [r0, #20]
 1006160:	e35e0000 	cmp	lr, #0
 1006164:	0a000010 	beq	10061ac <list_zip_iter_next+0x64>
    iter->index++;
 1006168:	e5904018 	ldr	r4, [r0, #24]
    return CC_OK;
 100616c:	e3a00000 	mov	r0, #0
    void *data1 = iter->l1_next->data;
 1006170:	e59c6000 	ldr	r6, [ip]
    iter->l1_next = iter->l1_next->next;
 1006174:	e59c7004 	ldr	r7, [ip, #4]
    void *data2 = iter->l2_next->data;
 1006178:	e59e5000 	ldr	r5, [lr]
    iter->index++;
 100617c:	e2844001 	add	r4, r4, #1
    iter->l1_last = iter->l1_next;
 1006180:	e583c008 	str	ip, [r3, #8]
    iter->l2_next = iter->l2_next->next;
 1006184:	e59ec004 	ldr	ip, [lr, #4]
    iter->l1_next = iter->l1_next->next;
 1006188:	e5837010 	str	r7, [r3, #16]
    iter->l2_last = iter->l2_next;
 100618c:	e583e00c 	str	lr, [r3, #12]
    iter->index++;
 1006190:	e5834018 	str	r4, [r3, #24]
    iter->l2_next = iter->l2_next->next;
 1006194:	e583c014 	str	ip, [r3, #20]
    *out1 = data1;
 1006198:	e5816000 	str	r6, [r1]
    *out2 = data2;
 100619c:	e5825000 	str	r5, [r2]
    return CC_OK;
 10061a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ITER_END;
 10061a4:	e3a00009 	mov	r0, #9
}
 10061a8:	e12fff1e 	bx	lr
        return CC_ITER_END;
 10061ac:	e3a00009 	mov	r0, #9
}
 10061b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

010061b4 <list_zip_iter_add>:
    Node *new_node1 = iter->l1->mem_calloc(1, sizeof(Node));
 10061b4:	e5903000 	ldr	r3, [r0]
{
 10061b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10061bc:	e1a04000 	mov	r4, r0
 10061c0:	e1a07001 	mov	r7, r1
    Node *new_node1 = iter->l1->mem_calloc(1, sizeof(Node));
 10061c4:	e3a00001 	mov	r0, #1
 10061c8:	e3a0100c 	mov	r1, #12
{
 10061cc:	e1a06002 	mov	r6, r2
    Node *new_node1 = iter->l1->mem_calloc(1, sizeof(Node));
 10061d0:	e5933010 	ldr	r3, [r3, #16]
 10061d4:	e12fff33 	blx	r3
    if (!new_node1)
 10061d8:	e2505000 	subs	r5, r0, #0
 10061dc:	0a00003c 	beq	10062d4 <list_zip_iter_add+0x120>
    Node *new_node2 = iter->l2->mem_calloc(1, sizeof(Node));
 10061e0:	e5943004 	ldr	r3, [r4, #4]
 10061e4:	e3a0100c 	mov	r1, #12
 10061e8:	e3a00001 	mov	r0, #1
 10061ec:	e5933010 	ldr	r3, [r3, #16]
 10061f0:	e12fff33 	blx	r3
    if (!new_node2) {
 10061f4:	e3500000 	cmp	r0, #0
 10061f8:	0a000037 	beq	10062dc <list_zip_iter_add+0x128>
    if (ins->next)
 10061fc:	e5951004 	ldr	r1, [r5, #4]
 1006200:	e5953008 	ldr	r3, [r5, #8]
    link_after(iter->l1_last, new_node1);
 1006204:	e5942008 	ldr	r2, [r4, #8]
    if (ins->next)
 1006208:	e3510000 	cmp	r1, #0
    new_node1->data = e1;
 100620c:	e5857000 	str	r7, [r5]
    new_node2->data = e2;
 1006210:	e5806000 	str	r6, [r0]
        ins->next->prev = ins->prev;
 1006214:	15813008 	strne	r3, [r1, #8]
 1006218:	15953008 	ldrne	r3, [r5, #8]
    if (iter->index == iter->l1->size)
 100621c:	e594c000 	ldr	ip, [r4]
    if (ins->prev)
 1006220:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1006224:	15831004 	strne	r1, [r3, #4]
    if (!base->next) {
 1006228:	e5923004 	ldr	r3, [r2, #4]
 100622c:	e3530000 	cmp	r3, #0
        ins->next       = base->next;
 1006230:	15853004 	strne	r3, [r5, #4]
        ins->prev       = base;
 1006234:	05852008 	streq	r2, [r5, #8]
        ins->next->prev = ins;
 1006238:	15835008 	strne	r5, [r3, #8]
        base->next      = ins;
 100623c:	05825004 	streq	r5, [r2, #4]
        ins->prev       = base;
 1006240:	15852008 	strne	r2, [r5, #8]
        ins->next       = NULL;
 1006244:	05853004 	streq	r3, [r5, #4]
        base->next      = ins;
 1006248:	15825004 	strne	r5, [r2, #4]
    if (ins->next)
 100624c:	e5901004 	ldr	r1, [r0, #4]
 1006250:	e5903008 	ldr	r3, [r0, #8]
    link_after(iter->l2_last, new_node2);
 1006254:	e594200c 	ldr	r2, [r4, #12]
    if (ins->next)
 1006258:	e3510000 	cmp	r1, #0
        ins->next->prev = ins->prev;
 100625c:	15813008 	strne	r3, [r1, #8]
 1006260:	15903008 	ldrne	r3, [r0, #8]
    if (ins->prev)
 1006264:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1006268:	15831004 	strne	r1, [r3, #4]
    if (!base->next) {
 100626c:	e5923004 	ldr	r3, [r2, #4]
 1006270:	e3530000 	cmp	r3, #0
        ins->next       = base->next;
 1006274:	15803004 	strne	r3, [r0, #4]
        ins->prev       = base;
 1006278:	05802008 	streq	r2, [r0, #8]
        ins->next->prev = ins;
 100627c:	15830008 	strne	r0, [r3, #8]
        base->next      = ins;
 1006280:	05820004 	streq	r0, [r2, #4]
        ins->prev       = base;
 1006284:	15802008 	strne	r2, [r0, #8]
        ins->next       = NULL;
 1006288:	05803004 	streq	r3, [r0, #4]
        base->next      = ins;
 100628c:	15820004 	strne	r0, [r2, #4]
    if (iter->index == iter->l1->size)
 1006290:	e5943018 	ldr	r3, [r4, #24]
 1006294:	e59c2000 	ldr	r2, [ip]
    if (iter->index == iter->l2->size)
 1006298:	e5941004 	ldr	r1, [r4, #4]
    if (iter->index == iter->l1->size)
 100629c:	e1530002 	cmp	r3, r2
    iter->l1->size++;
 10062a0:	e2822001 	add	r2, r2, #1
    if (iter->index == iter->l2->size)
 10062a4:	e591e000 	ldr	lr, [r1]
        iter->l1->tail = new_node1;
 10062a8:	058c5008 	streq	r5, [ip, #8]
    if (iter->index == iter->l2->size)
 10062ac:	e153000e 	cmp	r3, lr
    iter->index++;
 10062b0:	e2833001 	add	r3, r3, #1
        iter->l2->tail = new_node2;
 10062b4:	05810008 	streq	r0, [r1, #8]
    return CC_OK;
 10062b8:	e3a00000 	mov	r0, #0
    iter->l1->size++;
 10062bc:	e58c2000 	str	r2, [ip]
    iter->l2->size++;
 10062c0:	e5912000 	ldr	r2, [r1]
 10062c4:	e2822001 	add	r2, r2, #1
 10062c8:	e5812000 	str	r2, [r1]
    iter->index++;
 10062cc:	e5843018 	str	r3, [r4, #24]
    return CC_OK;
 10062d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 10062d4:	e3a00001 	mov	r0, #1
}
 10062d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        iter->l1->mem_free(new_node1);
 10062dc:	e5943000 	ldr	r3, [r4]
 10062e0:	e1a00005 	mov	r0, r5
 10062e4:	e5933014 	ldr	r3, [r3, #20]
 10062e8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10062ec:	e3a00001 	mov	r0, #1
 10062f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010062f4 <list_zip_iter_remove>:
    if (!iter->l1_last || !iter->l2_last)
 10062f4:	e5903008 	ldr	r3, [r0, #8]
 10062f8:	e3530000 	cmp	r3, #0
 10062fc:	0a000031 	beq	10063c8 <list_zip_iter_remove+0xd4>
 1006300:	e590c00c 	ldr	ip, [r0, #12]
 1006304:	e35c0000 	cmp	ip, #0
 1006308:	0a00002e 	beq	10063c8 <list_zip_iter_remove+0xd4>
{
 100630c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1006310:	e1a04000 	mov	r4, r0
    if (node->prev != NULL)
 1006314:	e593e008 	ldr	lr, [r3, #8]
 1006318:	e1a05002 	mov	r5, r2
 100631c:	e1a06001 	mov	r6, r1
 1006320:	e593c004 	ldr	ip, [r3, #4]
 1006324:	e35e0000 	cmp	lr, #0
    void *e1 = unlinkn(iter->l1, iter->l1_last);
 1006328:	e5908000 	ldr	r8, [r0]
    void *data = node->data;
 100632c:	e5937000 	ldr	r7, [r3]
    list->mem_free(node);
 1006330:	e1a00003 	mov	r0, r3
        node->prev->next = node->next;
 1006334:	158ec004 	strne	ip, [lr, #4]
 1006338:	1593c004 	ldrne	ip, [r3, #4]
        list->head = node->next;
 100633c:	0588c004 	streq	ip, [r8, #4]
    list->mem_free(node);
 1006340:	e5983014 	ldr	r3, [r8, #20]
    if (node->next == NULL)
 1006344:	e35c0000 	cmp	ip, #0
        list->tail = node->prev;
 1006348:	0588e008 	streq	lr, [r8, #8]
        node->next->prev = node->prev;
 100634c:	158ce008 	strne	lr, [ip, #8]
    list->mem_free(node);
 1006350:	e12fff33 	blx	r3
    void *e2 = unlinkn(iter->l2, iter->l2_last);
 1006354:	e594000c 	ldr	r0, [r4, #12]
    list->size--;
 1006358:	e5983000 	ldr	r3, [r8]
    void *e2 = unlinkn(iter->l2, iter->l2_last);
 100635c:	e5949004 	ldr	r9, [r4, #4]
    if (node->prev != NULL)
 1006360:	e5902008 	ldr	r2, [r0, #8]
    list->size--;
 1006364:	e2433001 	sub	r3, r3, #1
 1006368:	e5883000 	str	r3, [r8]
        node->prev->next = node->next;
 100636c:	e5903004 	ldr	r3, [r0, #4]
    if (node->prev != NULL)
 1006370:	e3520000 	cmp	r2, #0
    void *data = node->data;
 1006374:	e5908000 	ldr	r8, [r0]
        node->prev->next = node->next;
 1006378:	15823004 	strne	r3, [r2, #4]
 100637c:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 1006380:	05893004 	streq	r3, [r9, #4]
    if (node->next == NULL)
 1006384:	e3530000 	cmp	r3, #0
        node->next->prev = node->prev;
 1006388:	15832008 	strne	r2, [r3, #8]
        list->tail = node->prev;
 100638c:	05892008 	streq	r2, [r9, #8]
    list->mem_free(node);
 1006390:	e5993014 	ldr	r3, [r9, #20]
 1006394:	e12fff33 	blx	r3
    list->size--;
 1006398:	e5993000 	ldr	r3, [r9]
    if (out1)
 100639c:	e3560000 	cmp	r6, #0
    iter->l1_last = NULL;
 10063a0:	e3a02000 	mov	r2, #0
    return CC_OK;
 10063a4:	e3a00000 	mov	r0, #0
    list->size--;
 10063a8:	e2433001 	sub	r3, r3, #1
 10063ac:	e5893000 	str	r3, [r9]
    iter->l1_last = NULL;
 10063b0:	e5842008 	str	r2, [r4, #8]
    iter->l2_last = NULL;
 10063b4:	e584200c 	str	r2, [r4, #12]
        *out1 = e1;
 10063b8:	15867000 	strne	r7, [r6]
    if (out2)
 10063bc:	e3550000 	cmp	r5, #0
        *out2 = e2;
 10063c0:	15858000 	strne	r8, [r5]
 10063c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10063c8:	e3a00007 	mov	r0, #7
}
 10063cc:	e12fff1e 	bx	lr

010063d0 <list_zip_iter_replace>:
{
 10063d0:	e92d4030 	push	{r4, r5, lr}
    if (!iter->l1_last || !iter->l2_last)
 10063d4:	e590e008 	ldr	lr, [r0, #8]
{
 10063d8:	e59dc00c 	ldr	ip, [sp, #12]
    if (!iter->l1_last || !iter->l2_last)
 10063dc:	e35e0000 	cmp	lr, #0
 10063e0:	0a00000c 	beq	1006418 <list_zip_iter_replace+0x48>
 10063e4:	e590000c 	ldr	r0, [r0, #12]
 10063e8:	e3500000 	cmp	r0, #0
 10063ec:	0a000009 	beq	1006418 <list_zip_iter_replace+0x48>
    void *old1 = iter->l1_last->data;
 10063f0:	e59e5000 	ldr	r5, [lr]
    if (out1)
 10063f4:	e3530000 	cmp	r3, #0
    void *old2 = iter->l2_last->data;
 10063f8:	e5904000 	ldr	r4, [r0]
    iter->l1_last->data = e1;
 10063fc:	e58e1000 	str	r1, [lr]
    iter->l2_last->data = e2;
 1006400:	e5802000 	str	r2, [r0]
    return CC_OK;
 1006404:	e3a00000 	mov	r0, #0
        *out1 = old1;
 1006408:	15835000 	strne	r5, [r3]
    if (out2)
 100640c:	e35c0000 	cmp	ip, #0
        *out2 = old2;
 1006410:	158c4000 	strne	r4, [ip]
 1006414:	e8bd8030 	pop	{r4, r5, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1006418:	e3a00007 	mov	r0, #7
 100641c:	e8bd8030 	pop	{r4, r5, pc}

01006420 <list_zip_iter_index>:
    return iter->index - 1;
 1006420:	e5900018 	ldr	r0, [r0, #24]
}
 1006424:	e2400001 	sub	r0, r0, #1
 1006428:	e12fff1e 	bx	lr

0100642c <pqueue_conf_init>:
 * @param[in, out] conf PQueueConf structure that is being initialized
 * @param[in] comp The comparator function required for PQueue
 */
void pqueue_conf_init(PQueueConf *conf, int (*cmp)(const void *, const void *))
{
    conf->mem_alloc  = malloc;
 100642c:	e30cc7b9 	movw	ip, #51129	; 0xc7b9
    conf->mem_calloc = calloc;
 1006430:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 1006434:	e30c37c9 	movw	r3, #51145	; 0xc7c9
{
 1006438:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    conf->mem_alloc  = malloc;
 100643c:	e340c101 	movt	ip, #257	; 0x101
    conf->cmp        = cmp;
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 1006440:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
    conf->mem_calloc = calloc;
 1006444:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1006448:	e3403101 	movt	r3, #257	; 0x101
    conf->cmp        = cmp;
 100644c:	e5801008 	str	r1, [r0, #8]
    conf->capacity   = DEFAULT_CAPACITY;
 1006450:	e3a01008 	mov	r1, #8
    conf->mem_alloc  = malloc;
 1006454:	e580c00c 	str	ip, [r0, #12]
    conf->mem_free   = free;
 1006458:	e1c021f0 	strd	r2, [r0, #16]
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 100645c:	e580e004 	str	lr, [r0, #4]
    conf->capacity   = DEFAULT_CAPACITY;
 1006460:	e5801000 	str	r1, [r0]
}
 1006464:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01006468 <pqueue_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new PQueue structure failed.
 */
enum cc_stat pqueue_new(PQueue **out, int (*cmp)(const void*, const void*))
{
 1006468:	e92d4070 	push	{r4, r5, r6, lr}
 100646c:	e1a05000 	mov	r5, r0
 1006470:	e1a06001 	mov	r6, r1
    /* Needed to avoid an integer overflow on the first resize and
     * to easily check for any future overflows. */
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
        return CC_ERR_INVALID_CAPACITY;

    PQueue *pq = conf->mem_calloc(1, sizeof(PQueue));
 1006474:	e3a00001 	mov	r0, #1
 1006478:	e3a01020 	mov	r1, #32
 100647c:	fa0055cd 	blx	101bbb8 <calloc>

    if (!pq)
 1006480:	e2504000 	subs	r4, r0, #0
 1006484:	0a000018 	beq	10064ec <pqueue_new+0x84>
        return CC_ERR_ALLOC;

    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 1006488:	e3a00020 	mov	r0, #32
 100648c:	fa0058c9 	blx	101c7b8 <malloc>

    if (!buff) {
 1006490:	e3500000 	cmp	r0, #0
 1006494:	0a000010 	beq	10064dc <pqueue_new+0x74>
        conf->mem_free(pq);
        return CC_ERR_ALLOC;
    }

    pq->mem_alloc  = conf->mem_alloc;
 1006498:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    pq->mem_calloc = conf->mem_calloc;
 100649c:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    pq->mem_free   = conf->mem_free;
 10064a0:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    pq->mem_alloc  = conf->mem_alloc;
 10064a4:	e3401101 	movt	r1, #257	; 0x101
    pq->mem_calloc = conf->mem_calloc;
 10064a8:	e3402101 	movt	r2, #257	; 0x101
    pq->mem_free   = conf->mem_free;
 10064ac:	e3403101 	movt	r3, #257	; 0x101
    pq->cmp        = conf->cmp;
    pq->buffer     = buff;
    pq->exp_factor = ex;
 10064b0:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
    pq->capacity   = conf->capacity;
 10064b4:	e3a0c008 	mov	ip, #8
    pq->buffer     = buff;
 10064b8:	e584000c 	str	r0, [r4, #12]

    *out = pq;
    return CC_OK;
 10064bc:	e3a00000 	mov	r0, #0
    pq->cmp        = conf->cmp;
 10064c0:	e584601c 	str	r6, [r4, #28]
    *out = pq;
 10064c4:	e5854000 	str	r4, [r5]
    pq->mem_alloc  = conf->mem_alloc;
 10064c8:	e5841010 	str	r1, [r4, #16]
    pq->mem_free   = conf->mem_free;
 10064cc:	e1c421f4 	strd	r2, [r4, #20]
    pq->exp_factor = ex;
 10064d0:	e584e008 	str	lr, [r4, #8]
    pq->capacity   = conf->capacity;
 10064d4:	e584c004 	str	ip, [r4, #4]
    return CC_OK;
 10064d8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(pq);
 10064dc:	e1a00004 	mov	r0, r4
 10064e0:	fa0058b8 	blx	101c7c8 <free>
        return CC_ERR_ALLOC;
 10064e4:	e3a00001 	mov	r0, #1
 10064e8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10064ec:	e3a00001 	mov	r0, #1
}
 10064f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010064f4 <pqueue_new_conf>:
{
 10064f4:	e92d4070 	push	{r4, r5, r6, lr}
 10064f8:	ed2d8b02 	vpush	{d8}
    if (conf->exp_factor <= 1)
 10064fc:	ed908a01 	vldr	s16, [r0, #4]
 1006500:	eeb77a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 1006504:	e5903000 	ldr	r3, [r0]
        ex = DEFAULT_EXPANSION_FACTOR;
 1006508:	eef07a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 100650c:	eeb48a47 	vcmp.f32	s16, s14
 1006510:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1006514:	9eb08a67 	vmovls.f32	s16, s15
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 1006518:	e3530000 	cmp	r3, #0
 100651c:	0a000026 	beq	10065bc <pqueue_new_conf+0xc8>
 1006520:	e1a06001 	mov	r6, r1
 1006524:	e1a04000 	mov	r4, r0
 1006528:	e1a01003 	mov	r1, r3
 100652c:	e3e00001 	mvn	r0, #1
 1006530:	fa005274 	blx	101af08 <__udivsi3>
 1006534:	ee070a90 	vmov	s15, r0
 1006538:	eef87a67 	vcvt.f32.u32	s15, s15
 100653c:	eef47ac8 	vcmpe.f32	s15, s16
 1006540:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1006544:	9a00001c 	bls	10065bc <pqueue_new_conf+0xc8>
    PQueue *pq = conf->mem_calloc(1, sizeof(PQueue));
 1006548:	e5943010 	ldr	r3, [r4, #16]
 100654c:	e3a01020 	mov	r1, #32
 1006550:	e3a00001 	mov	r0, #1
 1006554:	e12fff33 	blx	r3
    if (!pq)
 1006558:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 100655c:	03a00001 	moveq	r0, #1
    if (!pq)
 1006560:	0a000013 	beq	10065b4 <pqueue_new_conf+0xc0>
    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 1006564:	e5940000 	ldr	r0, [r4]
 1006568:	e594300c 	ldr	r3, [r4, #12]
 100656c:	e1a00100 	lsl	r0, r0, #2
 1006570:	e12fff33 	blx	r3
    if (!buff) {
 1006574:	e2503000 	subs	r3, r0, #0
 1006578:	0a000012 	beq	10065c8 <pqueue_new_conf+0xd4>
    pq->mem_alloc  = conf->mem_alloc;
 100657c:	e5942014 	ldr	r2, [r4, #20]
    return CC_OK;
 1006580:	e3a00000 	mov	r0, #0
    pq->mem_alloc  = conf->mem_alloc;
 1006584:	e594e008 	ldr	lr, [r4, #8]
 1006588:	e594c00c 	ldr	ip, [r4, #12]
 100658c:	e5941010 	ldr	r1, [r4, #16]
 1006590:	e585e01c 	str	lr, [r5, #28]
 1006594:	e585c010 	str	ip, [r5, #16]
 1006598:	e5851014 	str	r1, [r5, #20]
 100659c:	e5852018 	str	r2, [r5, #24]
    pq->capacity   = conf->capacity;
 10065a0:	e5942000 	ldr	r2, [r4]
    pq->buffer     = buff;
 10065a4:	e585300c 	str	r3, [r5, #12]
    pq->exp_factor = ex;
 10065a8:	ed858a02 	vstr	s16, [r5, #8]
    pq->capacity   = conf->capacity;
 10065ac:	e5852004 	str	r2, [r5, #4]
    *out = pq;
 10065b0:	e5865000 	str	r5, [r6]
}
 10065b4:	ecbd8b02 	vpop	{d8}
 10065b8:	e8bd8070 	pop	{r4, r5, r6, pc}
 10065bc:	ecbd8b02 	vpop	{d8}
        return CC_ERR_INVALID_CAPACITY;
 10065c0:	e3a00002 	mov	r0, #2
}
 10065c4:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(pq);
 10065c8:	e1a00005 	mov	r0, r5
 10065cc:	e5943014 	ldr	r3, [r4, #20]
 10065d0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10065d4:	e3a00001 	mov	r0, #1
 10065d8:	eafffff5 	b	10065b4 <pqueue_new_conf+0xc0>

010065dc <pqueue_destroy>:
 * intact.
 *
 * @param[in] pq the PQueue to be destroyed
 */
void pqueue_destroy(PQueue *pq)
{
 10065dc:	e92d4010 	push	{r4, lr}
 10065e0:	e1a04000 	mov	r4, r0
    pq->mem_free(pq->buffer);
 10065e4:	e5903018 	ldr	r3, [r0, #24]
 10065e8:	e590000c 	ldr	r0, [r0, #12]
 10065ec:	e12fff33 	blx	r3
    pq->mem_free(pq);
 10065f0:	e5943018 	ldr	r3, [r4, #24]
 10065f4:	e1a00004 	mov	r0, r4
}
 10065f8:	e8bd4010 	pop	{r4, lr}
    pq->mem_free(pq);
 10065fc:	e12fff13 	bx	r3

01006600 <pqueue_destroy_cb>:
 * @param[in] pq the Priority Queue to be destroyed
 */
void pqueue_destroy_cb(PQueue *pq, void (*cb) (void*))
{
    size_t i;
    for (i = 0; i < pq->size; i++)
 1006600:	e5903000 	ldr	r3, [r0]
{
 1006604:	e92d4070 	push	{r4, r5, r6, lr}
 1006608:	e1a05000 	mov	r5, r0
    for (i = 0; i < pq->size; i++)
 100660c:	e3530000 	cmp	r3, #0
 1006610:	0a000008 	beq	1006638 <pqueue_destroy_cb+0x38>
 1006614:	e1a06001 	mov	r6, r1
 1006618:	e3a04000 	mov	r4, #0
        cb(pq->buffer[i]);
 100661c:	e595300c 	ldr	r3, [r5, #12]
 1006620:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < pq->size; i++)
 1006624:	e2844001 	add	r4, r4, #1
        cb(pq->buffer[i]);
 1006628:	e12fff36 	blx	r6
    for (i = 0; i < pq->size; i++)
 100662c:	e5953000 	ldr	r3, [r5]
 1006630:	e1530004 	cmp	r3, r4
 1006634:	8afffff8 	bhi	100661c <pqueue_destroy_cb+0x1c>
    pq->mem_free(pq->buffer);
 1006638:	e5953018 	ldr	r3, [r5, #24]
 100663c:	e595000c 	ldr	r0, [r5, #12]
 1006640:	e12fff33 	blx	r3
    pq->mem_free(pq);
 1006644:	e5953018 	ldr	r3, [r5, #24]
 1006648:	e1a00005 	mov	r0, r5

    pqueue_destroy(pq);
}
 100664c:	e8bd4070 	pop	{r4, r5, r6, lr}
    pq->mem_free(pq);
 1006650:	e12fff13 	bx	r3

01006654 <pqueue_push>:
 *
 * @return CC_OK if the element was successfully pushed, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat pqueue_push(PQueue *pq, void *element)
{
 1006654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006658:	e1a05000 	mov	r5, r0
    size_t i = pq->size;
 100665c:	e5904000 	ldr	r4, [r0]
{
 1006660:	e1a07001 	mov	r7, r1

    if (i >= pq->capacity) {
 1006664:	e5903004 	ldr	r3, [r0, #4]
 1006668:	e1530004 	cmp	r3, r4
 100666c:	9a000020 	bls	10066f4 <pqueue_push+0xa0>
 1006670:	e590600c 	ldr	r6, [r0, #12]
 1006674:	e1a03004 	mov	r3, r4
    }

    pq->buffer[i] = element;
    pq->size++;

    if (i == 0)
 1006678:	e3540000 	cmp	r4, #0
    pq->size++;
 100667c:	e2833001 	add	r3, r3, #1
    pq->buffer[i] = element;
 1006680:	e7867104 	str	r7, [r6, r4, lsl #2]
    pq->size++;
 1006684:	e5853000 	str	r3, [r5]
    if (i == 0)
 1006688:	0a000017 	beq	10066ec <pqueue_push+0x98>
        return CC_OK;

    void *child  = pq->buffer[i];
 100668c:	e595300c 	ldr	r3, [r5, #12]
    void *parent = pq->buffer[CC_PARENT(i)];
 1006690:	e2446001 	sub	r6, r4, #1
 1006694:	e1a020a6 	lsr	r2, r6, #1
    void *child  = pq->buffer[i];
 1006698:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    void *parent = pq->buffer[CC_PARENT(i)];
 100669c:	e7931102 	ldr	r1, [r3, r2, lsl #2]

    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066a0:	e595301c 	ldr	r3, [r5, #28]
 10066a4:	e12fff33 	blx	r3
 10066a8:	e3500000 	cmp	r0, #0
        void *tmp = pq->buffer[i];
 10066ac:	e1a02104 	lsl	r2, r4, #2
    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066b0:	da00000d 	ble	10066ec <pqueue_push+0x98>
        void *tmp = pq->buffer[i];
 10066b4:	e595300c 	ldr	r3, [r5, #12]
 10066b8:	e7930104 	ldr	r0, [r3, r4, lsl #2]
        pq->buffer[i] = pq->buffer[CC_PARENT(i)];
 10066bc:	e1a040a6 	lsr	r4, r6, #1
 10066c0:	e793c104 	ldr	ip, [r3, r4, lsl #2]
        pq->buffer[CC_PARENT(i)] = tmp;

        i      = CC_PARENT(i);
        child  = pq->buffer[i];
        parent = pq->buffer[CC_PARENT(i)];
 10066c4:	e2446001 	sub	r6, r4, #1
 10066c8:	e1a010a6 	lsr	r1, r6, #1
    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066cc:	e3540000 	cmp	r4, #0
        pq->buffer[i] = pq->buffer[CC_PARENT(i)];
 10066d0:	e783c002 	str	ip, [r3, r2]
        pq->buffer[CC_PARENT(i)] = tmp;
 10066d4:	e595300c 	ldr	r3, [r5, #12]
 10066d8:	e7830104 	str	r0, [r3, r4, lsl #2]
        child  = pq->buffer[i];
 10066dc:	e595300c 	ldr	r3, [r5, #12]
 10066e0:	e7930104 	ldr	r0, [r3, r4, lsl #2]
        parent = pq->buffer[CC_PARENT(i)];
 10066e4:	e7931101 	ldr	r1, [r3, r1, lsl #2]
    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066e8:	1affffec 	bne	10066a0 <pqueue_push+0x4c>
        return CC_OK;
 10066ec:	e3a00000 	mov	r0, #0
 10066f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (pq->capacity == CC_MAX_ELEMENTS)
 10066f4:	e3730002 	cmn	r3, #2
 10066f8:	0a00001a 	beq	1006768 <pqueue_push+0x114>
    size_t new_capacity = pq->capacity * pq->exp_factor;
 10066fc:	ee073a90 	vmov	s15, r3
 1006700:	ed907a02 	vldr	s14, [r0, #8]
 1006704:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = pq->mem_alloc(new_capacity * sizeof(void*));
 1006708:	e5902010 	ldr	r2, [r0, #16]
    size_t new_capacity = pq->capacity * pq->exp_factor;
 100670c:	ee677a87 	vmul.f32	s15, s15, s14
 1006710:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1006714:	ee170a90 	vmov	r0, s15
        pq->capacity = CC_MAX_ELEMENTS;
 1006718:	e1530000 	cmp	r3, r0
 100671c:	31a03000 	movcc	r3, r0
 1006720:	23e03001 	mvncs	r3, #1
    void **new_buff = pq->mem_alloc(new_capacity * sizeof(void*));
 1006724:	e1a00100 	lsl	r0, r0, #2
 1006728:	e5853004 	str	r3, [r5, #4]
 100672c:	e12fff32 	blx	r2
    if (!new_buff)
 1006730:	e2506000 	subs	r6, r0, #0
 1006734:	0a000009 	beq	1006760 <pqueue_push+0x10c>
    memcpy(new_buff, pq->buffer, pq->size * sizeof(void*));
 1006738:	e5952000 	ldr	r2, [r5]
 100673c:	e595100c 	ldr	r1, [r5, #12]
 1006740:	e1a02102 	lsl	r2, r2, #2
 1006744:	eb005aad 	bl	101d200 <memcpy>
    pq->mem_free(pq->buffer);
 1006748:	e5953018 	ldr	r3, [r5, #24]
 100674c:	e595000c 	ldr	r0, [r5, #12]
 1006750:	e12fff33 	blx	r3
    pq->buffer = new_buff;
 1006754:	e5953000 	ldr	r3, [r5]
 1006758:	e585600c 	str	r6, [r5, #12]
        if (status != CC_OK)
 100675c:	eaffffc5 	b	1006678 <pqueue_push+0x24>
        return CC_ERR_ALLOC;
 1006760:	e3a00001 	mov	r0, #1
    }
    return CC_OK;
}
 1006764:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1006768:	e3a00004 	mov	r0, #4
 100676c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01006770 <pqueue_top>:
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if the
 * PQueue is empty.
 */
enum cc_stat pqueue_top(PQueue *pq, void **out)
{
    if (pq->size == 0)
 1006770:	e5903000 	ldr	r3, [r0]
 1006774:	e3530000 	cmp	r3, #0
        return CC_ERR_OUT_OF_RANGE;

    *out = pq->buffer[0];
 1006778:	1590300c 	ldrne	r3, [r0, #12]
    return CC_OK;
 100677c:	13a00000 	movne	r0, #0
        return CC_ERR_OUT_OF_RANGE;
 1006780:	03a00008 	moveq	r0, #8
    *out = pq->buffer[0];
 1006784:	15933000 	ldrne	r3, [r3]
 1006788:	15813000 	strne	r3, [r1]
}
 100678c:	e12fff1e 	bx	lr

01006790 <pqueue_pop>:
 * return CC_OK if the element was popped successfully, or CC_ERR_OUT_OF_RANGE
 * if pqueue was empty
 */
enum cc_stat pqueue_pop(PQueue *pq, void **out)
{
    if (pq->size == 0)
 1006790:	e5903000 	ldr	r3, [r0]
 1006794:	e3530000 	cmp	r3, #0
 1006798:	0a000059 	beq	1006904 <pqueue_pop+0x174>
        return CC_ERR_OUT_OF_RANGE;

    void *tmp = pq->buffer[0];
 100679c:	e590200c 	ldr	r2, [r0, #12]
{
 10067a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10067a4:	e24dd014 	sub	sp, sp, #20
 10067a8:	e58d1008 	str	r1, [sp, #8]
    pq->buffer[0] = pq->buffer[pq->size - 1];
 10067ac:	e2431107 	sub	r1, r3, #-1073741823	; 0xc0000001
 10067b0:	e1a04000 	mov	r4, r0
    pq->buffer[pq->size - 1] = tmp;

    tmp = pq->buffer[pq->size - 1];
    pq->size--;
 10067b4:	e2433001 	sub	r3, r3, #1
    pq->buffer[0] = pq->buffer[pq->size - 1];
 10067b8:	e792c101 	ldr	ip, [r2, r1, lsl #2]
 * @param[in] pq the PQueue structure whose heap property is to be maintained
 * @param[in] index the index from where we need to apply this operation
 */
static void pqueue_heapify(PQueue *pq, size_t index)
{
    if (pq->size <= 1)
 10067bc:	e3530001 	cmp	r3, #1
    void *tmp = pq->buffer[0];
 10067c0:	e5920000 	ldr	r0, [r2]
    pq->buffer[0] = pq->buffer[pq->size - 1];
 10067c4:	e582c000 	str	ip, [r2]
    pq->buffer[pq->size - 1] = tmp;
 10067c8:	e594200c 	ldr	r2, [r4, #12]
 10067cc:	e7820101 	str	r0, [r2, r1, lsl #2]
    tmp = pq->buffer[pq->size - 1];
 10067d0:	e594200c 	ldr	r2, [r4, #12]
 10067d4:	e7921101 	ldr	r1, [r2, r1, lsl #2]
    pq->size--;
 10067d8:	e5843000 	str	r3, [r4]
    tmp = pq->buffer[pq->size - 1];
 10067dc:	e58d100c 	str	r1, [sp, #12]
    if (pq->size <= 1)
 10067e0:	9a00003f 	bls	10068e4 <pqueue_pop+0x154>

    void *left     = pq->buffer[L];
    void *right    = pq->buffer[R];
    void *indexPtr = pq->buffer[index];

    if (L >= pq->size || R >= pq->size)
 10067e4:	e3530002 	cmp	r3, #2
    void *left     = pq->buffer[L];
 10067e8:	e5929004 	ldr	r9, [r2, #4]
    void *right    = pq->buffer[R];
 10067ec:	e5923008 	ldr	r3, [r2, #8]
    void *indexPtr = pq->buffer[index];
 10067f0:	e5928000 	ldr	r8, [r2]
    if (L >= pq->size || R >= pq->size)
 10067f4:	9a00003a 	bls	10068e4 <pqueue_pop+0x154>
 10067f8:	e3a0b000 	mov	fp, #0
    void *left     = pq->buffer[L];
 10067fc:	e3a02004 	mov	r2, #4
    void *right    = pq->buffer[R];
 1006800:	e3a07008 	mov	r7, #8
    void *indexPtr = pq->buffer[index];
 1006804:	e1a0a00b 	mov	sl, fp
    void *left     = pq->buffer[L];
 1006808:	e58d2000 	str	r2, [sp]
    size_t R   = CC_RIGHT(index);
 100680c:	e3a05002 	mov	r5, #2
    size_t L   = CC_LEFT(index);
 1006810:	e3a06001 	mov	r6, #1
 1006814:	ea000020 	b	100689c <pqueue_pop+0x10c>
    if (pq->cmp(indexPtr, left) < 0) {
        indexPtr = left;
        index = L;
    }

    if (pq->cmp(indexPtr, right) < 0) {
 1006818:	e1a00008 	mov	r0, r8
 100681c:	e594301c 	ldr	r3, [r4, #28]
 1006820:	e12fff33 	blx	r3
 1006824:	e3500000 	cmp	r0, #0
 1006828:	aa00002d 	bge	10068e4 <pqueue_pop+0x154>
    size_t L   = CC_LEFT(index);
 100682c:	e1a03085 	lsl	r3, r5, #1
        indexPtr = right;
        index = R;
    }

    if (index != tmp) {
 1006830:	e15b0005 	cmp	fp, r5
    size_t R   = CC_RIGHT(index);
 1006834:	e2850001 	add	r0, r5, #1
    size_t L   = CC_LEFT(index);
 1006838:	e2836001 	add	r6, r3, #1
    if (L >= pq->size || R >= pq->size)
 100683c:	e1a0b005 	mov	fp, r5
    size_t R   = CC_RIGHT(index);
 1006840:	e2833002 	add	r3, r3, #2
    if (index != tmp) {
 1006844:	0a000026 	beq	10068e4 <pqueue_pop+0x154>
        void *swap_tmp = pq->buffer[tmp];
 1006848:	e594200c 	ldr	r2, [r4, #12]
    void *left     = pq->buffer[L];
 100684c:	e1a01106 	lsl	r1, r6, #2
 1006850:	e58d1000 	str	r1, [sp]
        pq->buffer[tmp] = pq->buffer[index];
 1006854:	e792e007 	ldr	lr, [r2, r7]
    if (pq->size <= 1)
 1006858:	e5941000 	ldr	r1, [r4]
        void *swap_tmp = pq->buffer[tmp];
 100685c:	e792c00a 	ldr	ip, [r2, sl]
        pq->buffer[tmp] = pq->buffer[index];
 1006860:	e782e00a 	str	lr, [r2, sl]
    void *indexPtr = pq->buffer[index];
 1006864:	e1a0a105 	lsl	sl, r5, #2
        pq->buffer[index] = swap_tmp;
 1006868:	e594200c 	ldr	r2, [r4, #12]
    if (pq->size <= 1)
 100686c:	e3510001 	cmp	r1, #1
        pq->buffer[index] = swap_tmp;
 1006870:	e782c007 	str	ip, [r2, r7]
    if (pq->size <= 1)
 1006874:	9a00001a 	bls	10068e4 <pqueue_pop+0x154>
 1006878:	e594200c 	ldr	r2, [r4, #12]
    if (L >= pq->size || R >= pq->size)
 100687c:	e1510003 	cmp	r1, r3
 1006880:	81510006 	cmphi	r1, r6
    void *right    = pq->buffer[R];
 1006884:	e1a07180 	lsl	r7, r0, #3
    void *indexPtr = pq->buffer[index];
 1006888:	e7928105 	ldr	r8, [r2, r5, lsl #2]
    if (L >= pq->size || R >= pq->size)
 100688c:	e1a05003 	mov	r5, r3
    void *left     = pq->buffer[L];
 1006890:	e7929106 	ldr	r9, [r2, r6, lsl #2]
    void *right    = pq->buffer[R];
 1006894:	e7923180 	ldr	r3, [r2, r0, lsl #3]
    if (L >= pq->size || R >= pq->size)
 1006898:	9a000011 	bls	10068e4 <pqueue_pop+0x154>
    if (pq->cmp(indexPtr, left) < 0) {
 100689c:	e1a01009 	mov	r1, r9
 10068a0:	e594201c 	ldr	r2, [r4, #28]
 10068a4:	e1a00008 	mov	r0, r8
 10068a8:	e58d3004 	str	r3, [sp, #4]
 10068ac:	e12fff32 	blx	r2
    if (pq->cmp(indexPtr, right) < 0) {
 10068b0:	e59d3004 	ldr	r3, [sp, #4]
    if (pq->cmp(indexPtr, left) < 0) {
 10068b4:	e3500000 	cmp	r0, #0
    if (pq->cmp(indexPtr, right) < 0) {
 10068b8:	e1a00009 	mov	r0, r9
 10068bc:	e1a01003 	mov	r1, r3
    if (pq->cmp(indexPtr, left) < 0) {
 10068c0:	aaffffd4 	bge	1006818 <pqueue_pop+0x88>
    if (pq->cmp(indexPtr, right) < 0) {
 10068c4:	e594301c 	ldr	r3, [r4, #28]
 10068c8:	e12fff33 	blx	r3
 10068cc:	e59d3000 	ldr	r3, [sp]
 10068d0:	e3500000 	cmp	r0, #0
 10068d4:	b1a03007 	movlt	r3, r7
 10068d8:	a1a05006 	movge	r5, r6
 10068dc:	e1a07003 	mov	r7, r3
 10068e0:	eaffffd1 	b	100682c <pqueue_pop+0x9c>
    if (out)
 10068e4:	e59d3008 	ldr	r3, [sp, #8]
 10068e8:	e3530000 	cmp	r3, #0
 10068ec:	01a00003 	moveq	r0, r3
        *out = tmp;
 10068f0:	159d200c 	ldrne	r2, [sp, #12]
    return CC_OK;
 10068f4:	13a00000 	movne	r0, #0
        *out = tmp;
 10068f8:	15832000 	strne	r2, [r3]
}
 10068fc:	e28dd014 	add	sp, sp, #20
 1006900:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_ERR_OUT_OF_RANGE;
 1006904:	e3a00008 	mov	r0, #8
}
 1006908:	e12fff1e 	bx	lr

0100690c <queue_conf_init>:
 *
 * @param[in, out] conf the configuration struct that is being initialized
 */
void queue_conf_init(QueueConf *conf)
{
    deque_conf_init(conf);
 100690c:	eaffecde 	b	1001c8c <deque_conf_init>

01006910 <queue_new>:
 *
 * @return  CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new Queue structure failed.
 */
enum cc_stat queue_new(Queue **queue)
{
 1006910:	e92d4030 	push	{r4, r5, lr}
 1006914:	e24dd01c 	sub	sp, sp, #28
 1006918:	e1a05000 	mov	r5, r0
    deque_conf_init(conf);
 100691c:	e28d0008 	add	r0, sp, #8
 1006920:	ebffecd9 	bl	1001c8c <deque_conf_init>
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new Queue structure failed.
 */
enum cc_stat queue_new_conf(QueueConf const * const conf, Queue **q)
{
    Queue *queue = conf->mem_calloc(1, sizeof(Queue));
 1006924:	e59d3010 	ldr	r3, [sp, #16]
 1006928:	e3a01010 	mov	r1, #16
 100692c:	e3a00001 	mov	r0, #1
 1006930:	e12fff33 	blx	r3

    if (!queue)
 1006934:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 1006938:	03a00001 	moveq	r0, #1
    if (!queue)
 100693c:	0a00000b 	beq	1006970 <queue_new+0x60>

    Deque *deque;
    deque_new_conf(conf, &deque);
 1006940:	e28d0008 	add	r0, sp, #8
 1006944:	e28d1004 	add	r1, sp, #4
 1006948:	ebffeca2 	bl	1001bd8 <deque_new_conf>

    if (!deque) {
 100694c:	e59d3004 	ldr	r3, [sp, #4]
 1006950:	e3530000 	cmp	r3, #0
 1006954:	0a000007 	beq	1006978 <queue_new+0x68>
        conf->mem_free(queue);
        return CC_ERR_ALLOC;
    }

    queue->d          = deque;
    queue->mem_alloc  = conf->mem_alloc;
 1006958:	e28d100c 	add	r1, sp, #12
    queue->d          = deque;
 100695c:	e5843000 	str	r3, [r4]
    queue->mem_alloc  = conf->mem_alloc;
 1006960:	e891000e 	ldm	r1, {r1, r2, r3}
    queue->mem_calloc = conf->mem_calloc;
    queue->mem_free   = conf->mem_free;

    *q = queue;

    return CC_OK;
 1006964:	e3a00000 	mov	r0, #0
    queue->mem_alloc  = conf->mem_alloc;
 1006968:	e984000e 	stmib	r4, {r1, r2, r3}
    *q = queue;
 100696c:	e5854000 	str	r4, [r5]
}
 1006970:	e28dd01c 	add	sp, sp, #28
 1006974:	e8bd8030 	pop	{r4, r5, pc}
        conf->mem_free(queue);
 1006978:	e1a00004 	mov	r0, r4
 100697c:	e59d3014 	ldr	r3, [sp, #20]
 1006980:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1006984:	e3a00001 	mov	r0, #1
}
 1006988:	e28dd01c 	add	sp, sp, #28
 100698c:	e8bd8030 	pop	{r4, r5, pc}

01006990 <queue_new_conf>:
{
 1006990:	e92d4070 	push	{r4, r5, r6, lr}
 1006994:	e1a04000 	mov	r4, r0
    Queue *queue = conf->mem_calloc(1, sizeof(Queue));
 1006998:	e5903008 	ldr	r3, [r0, #8]
{
 100699c:	e24dd008 	sub	sp, sp, #8
 10069a0:	e1a06001 	mov	r6, r1
    Queue *queue = conf->mem_calloc(1, sizeof(Queue));
 10069a4:	e3a00001 	mov	r0, #1
 10069a8:	e3a01010 	mov	r1, #16
 10069ac:	e12fff33 	blx	r3
    if (!queue)
 10069b0:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 10069b4:	03a00001 	moveq	r0, #1
    if (!queue)
 10069b8:	0a00000a 	beq	10069e8 <queue_new_conf+0x58>
    deque_new_conf(conf, &deque);
 10069bc:	e28d1004 	add	r1, sp, #4
 10069c0:	e1a00004 	mov	r0, r4
 10069c4:	ebffec83 	bl	1001bd8 <deque_new_conf>
    if (!deque) {
 10069c8:	e59d3004 	ldr	r3, [sp, #4]
 10069cc:	e3530000 	cmp	r3, #0
 10069d0:	0a000006 	beq	10069f0 <queue_new_conf+0x60>
    queue->d          = deque;
 10069d4:	e5853000 	str	r3, [r5]
    return CC_OK;
 10069d8:	e3a00000 	mov	r0, #0
    queue->mem_alloc  = conf->mem_alloc;
 10069dc:	e994000e 	ldmib	r4, {r1, r2, r3}
 10069e0:	e985000e 	stmib	r5, {r1, r2, r3}
    *q = queue;
 10069e4:	e5865000 	str	r5, [r6]
}
 10069e8:	e28dd008 	add	sp, sp, #8
 10069ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(queue);
 10069f0:	e1a00005 	mov	r0, r5
 10069f4:	e594300c 	ldr	r3, [r4, #12]
 10069f8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10069fc:	e3a00001 	mov	r0, #1
}
 1006a00:	e28dd008 	add	sp, sp, #8
 1006a04:	e8bd8070 	pop	{r4, r5, r6, pc}

01006a08 <queue_destroy>:
 * Destroys the queue structure, but leaves the data it used to hold intact.
 *
 * @param[in] queue the queue that is to be destroyed
 */
void queue_destroy(Queue *queue)
{
 1006a08:	e92d4010 	push	{r4, lr}
 1006a0c:	e1a04000 	mov	r4, r0
    deque_destroy(queue->d);
 1006a10:	e5900000 	ldr	r0, [r0]
 1006a14:	ebffeca6 	bl	1001cb4 <deque_destroy>
    queue->mem_free(queue);
 1006a18:	e594300c 	ldr	r3, [r4, #12]
 1006a1c:	e1a00004 	mov	r0, r4
}
 1006a20:	e8bd4010 	pop	{r4, lr}
    queue->mem_free(queue);
 1006a24:	e12fff13 	bx	r3

01006a28 <queue_destroy_cb>:
 *       elements allocated on the stack.
 *
 * @param[in] queue the queue that is to be destroyed
 */
void queue_destroy_cb(Queue *queue, void (*cb) (void*))
{
 1006a28:	e92d4010 	push	{r4, lr}
 1006a2c:	e1a04000 	mov	r4, r0
    deque_destroy_cb(queue->d, cb);
 1006a30:	e5900000 	ldr	r0, [r0]
 1006a34:	ebffeca7 	bl	1001cd8 <deque_destroy_cb>
    free(queue);
 1006a38:	e1a00004 	mov	r0, r4
}
 1006a3c:	e8bd4010 	pop	{r4, lr}
    free(queue);
 1006a40:	ea00837a 	b	1027830 <__free_from_arm>

01006a44 <queue_peek>:
 * @return CC_OK if the element was found, or CC_ERR_OUT_OF_RANGE if the
 * Queue is empty.
 */
enum cc_stat queue_peek(Queue const * const queue, void **out)
{
    return deque_get_last(queue->d, out);
 1006a44:	e5900000 	ldr	r0, [r0]
 1006a48:	eaffeedb 	b	10025bc <deque_get_last>

01006a4c <queue_poll>:
 * @return CC_OK if the element was found, or CC_ERR_OUT_OF_RANGE if the
 * Queue is empty.
 */
enum cc_stat queue_poll(Queue *queue, void **out)
{
    return deque_remove_last(queue->d, out);
 1006a4c:	e5900000 	ldr	r0, [r0]
 1006a50:	eaffee8e 	b	1002490 <deque_remove_last>

01006a54 <queue_enqueue>:
 * @return CC_OK if the element was successfully added, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat queue_enqueue(Queue *queue, void *element)
{
    return deque_add_first(queue->d, element);
 1006a54:	e5900000 	ldr	r0, [r0]
 1006a58:	eaffecd4 	b	1001db0 <deque_add_first>

01006a5c <queue_size>:
 *
 * @return the number of elements within the queue.
 */
size_t queue_size(Queue const * const queue)
{
    return deque_size(queue->d);
 1006a5c:	e5900000 	ldr	r0, [r0]
 1006a60:	eafff005 	b	1002a7c <deque_size>

01006a64 <queue_foreach>:
 * @param[in] queue the queue on which this operation is performed
 * @param[in] fn the operation function that is to be invoked on each queue element
 */
void queue_foreach(Queue *queue, void (*fn) (void*))
{
    deque_foreach(queue->d, fn);
 1006a64:	e5900000 	ldr	r0, [r0]
 1006a68:	eafff009 	b	1002a94 <deque_foreach>

01006a6c <queue_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] queue the queue to iterate over
 */
void queue_iter_init(QueueIter *iter, Queue *queue)
{
    deque_iter_init(&(iter->i), queue->d);
 1006a6c:	e5911000 	ldr	r1, [r1]
 1006a70:	eafff0f0 	b	1002e38 <deque_iter_init>

01006a74 <queue_iter_next>:
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Queue has been reached.
 */
enum cc_stat queue_iter_next(QueueIter *iter, void **out)
{
    return deque_iter_next(&(iter->i), out);
 1006a74:	eafff0f3 	b	1002e48 <deque_iter_next>

01006a78 <queue_iter_replace>:
 * @return  CC_OK if the element was replaced successfully, or
 * CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat queue_iter_replace(QueueIter *iter, void *replacement, void **out)
{
    return deque_iter_replace(&(iter->i), replacement, out);
 1006a78:	eafff19a 	b	10030e8 <deque_iter_replace>

01006a7c <queue_zip_iter_init>:
 * @param[in] q1   first queue
 * @param[in] q2   second queue
 */
void queue_zip_iter_init(QueueZipIter *iter, Queue *q1, Queue *q2)
{
    deque_zip_iter_init(&(iter->i), q1->d, q2->d);
 1006a7c:	e5922000 	ldr	r2, [r2]
 1006a80:	e5911000 	ldr	r1, [r1]
 1006a84:	eafff1b2 	b	1003154 <deque_zip_iter_init>

01006a88 <queue_zip_iter_next>:
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end
 * of one of the queues has been reached.
 */
enum cc_stat queue_zip_iter_next(QueueZipIter *iter, void **out1, void **out2)
{
    return deque_zip_iter_next(&(iter->i), out1, out2);
 1006a88:	eafff1b5 	b	1003164 <deque_zip_iter_next>

01006a8c <queue_zip_iter_replace>:
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat queue_zip_iter_replace(QueueZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
    return deque_zip_iter_replace(&(iter->i), e1, e2, out1, out2);
 1006a8c:	eafff232 	b	100335c <deque_zip_iter_replace>

01006a90 <rbuf_new>:
    void  (*mem_free)   (void *block);

};

enum cc_stat rbuf_new(Rbuf **rbuf)
{
 1006a90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    return rbuf_conf_new(&conf, rbuf);
}

enum cc_stat rbuf_conf_new(RbufConf *rconf, Rbuf **rbuf)
{
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006a94:	e3a01020 	mov	r1, #32
{
 1006a98:	e1a05000 	mov	r5, r0
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006a9c:	e3a00001 	mov	r0, #1
 1006aa0:	fa005444 	blx	101bbb8 <calloc>
    if (!ringbuf)
 1006aa4:	e2504000 	subs	r4, r0, #0
 1006aa8:	0a000016 	beq	1006b08 <rbuf_new+0x78>
       return CC_ERR_ALLOC;
    if (!(ringbuf->buf = rconf->mem_calloc(rconf->capacity, sizeof(uint64_t)))) {
 1006aac:	e3a01008 	mov	r1, #8
 1006ab0:	e3a0000a 	mov	r0, #10
 1006ab4:	fa00543f 	blx	101bbb8 <calloc>
 1006ab8:	e3500000 	cmp	r0, #0
 1006abc:	e5840010 	str	r0, [r4, #16]
 1006ac0:	0a000012 	beq	1006b10 <rbuf_new+0x80>
      rconf->mem_free(ringbuf);
      return CC_ERR_ALLOC;
    }

    ringbuf->mem_alloc = rconf->mem_alloc;
 1006ac4:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    ringbuf->mem_calloc = rconf->mem_calloc;
 1006ac8:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    ringbuf->mem_free = rconf->mem_free;
 1006acc:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006ad0:	e3401101 	movt	r1, #257	; 0x101
    ringbuf->mem_calloc = rconf->mem_calloc;
 1006ad4:	e3402101 	movt	r2, #257	; 0x101
    ringbuf->mem_free = rconf->mem_free;
 1006ad8:	e3403101 	movt	r3, #257	; 0x101
    ringbuf->capacity = rconf->capacity;
    ringbuf->size = 0;
 1006adc:	e3a06000 	mov	r6, #0
 1006ae0:	e3a0700a 	mov	r7, #10
 1006ae4:	e3a08000 	mov	r8, #0
 1006ae8:	e3a09000 	mov	r9, #0
    ringbuf->head = 0, ringbuf->tail = 0;
    *rbuf = ringbuf;
 1006aec:	e5854000 	str	r4, [r5]
    return CC_OK;
 1006af0:	e3a00000 	mov	r0, #0
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006af4:	e5841014 	str	r1, [r4, #20]
    ringbuf->mem_free = rconf->mem_free;
 1006af8:	e1c421f8 	strd	r2, [r4, #24]
    ringbuf->size = 0;
 1006afc:	e1c460f0 	strd	r6, [r4]
 1006b00:	e1c480f8 	strd	r8, [r4, #8]
    return CC_OK;
 1006b04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
       return CC_ERR_ALLOC;
 1006b08:	e3a00001 	mov	r0, #1
}
 1006b0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      rconf->mem_free(ringbuf);
 1006b10:	e1a00004 	mov	r0, r4
 1006b14:	fa00572b 	blx	101c7c8 <free>
      return CC_ERR_ALLOC;
 1006b18:	e3a00001 	mov	r0, #1
 1006b1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01006b20 <rbuf_conf_new>:
{
 1006b20:	e92d4070 	push	{r4, r5, r6, lr}
 1006b24:	e1a05000 	mov	r5, r0
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006b28:	e5903008 	ldr	r3, [r0, #8]
{
 1006b2c:	e1a06001 	mov	r6, r1
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006b30:	e3a00001 	mov	r0, #1
 1006b34:	e3a01020 	mov	r1, #32
 1006b38:	e12fff33 	blx	r3
    if (!ringbuf)
 1006b3c:	e2504000 	subs	r4, r0, #0
 1006b40:	0a000014 	beq	1006b98 <rbuf_conf_new+0x78>
    if (!(ringbuf->buf = rconf->mem_calloc(rconf->capacity, sizeof(uint64_t)))) {
 1006b44:	e5953008 	ldr	r3, [r5, #8]
 1006b48:	e3a01008 	mov	r1, #8
 1006b4c:	e5950000 	ldr	r0, [r5]
 1006b50:	e12fff33 	blx	r3
 1006b54:	e3500000 	cmp	r0, #0
 1006b58:	e5840010 	str	r0, [r4, #16]
 1006b5c:	0a00000f 	beq	1006ba0 <rbuf_conf_new+0x80>
    ringbuf->mem_free = rconf->mem_free;
 1006b60:	e1c500d8 	ldrd	r0, [r5, #8]
    ringbuf->size = 0;
 1006b64:	e3a03000 	mov	r3, #0
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006b68:	e595c004 	ldr	ip, [r5, #4]
    ringbuf->capacity = rconf->capacity;
 1006b6c:	e5952000 	ldr	r2, [r5]
    ringbuf->mem_calloc = rconf->mem_calloc;
 1006b70:	e5840018 	str	r0, [r4, #24]
    return CC_OK;
 1006b74:	e1a00003 	mov	r0, r3
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006b78:	e584c014 	str	ip, [r4, #20]
    ringbuf->mem_free = rconf->mem_free;
 1006b7c:	e584101c 	str	r1, [r4, #28]
    ringbuf->capacity = rconf->capacity;
 1006b80:	e5842004 	str	r2, [r4, #4]
    ringbuf->size = 0;
 1006b84:	e5843000 	str	r3, [r4]
    ringbuf->head = 0, ringbuf->tail = 0;
 1006b88:	e5843008 	str	r3, [r4, #8]
 1006b8c:	e584300c 	str	r3, [r4, #12]
    *rbuf = ringbuf;
 1006b90:	e5864000 	str	r4, [r6]
    return CC_OK;
 1006b94:	e8bd8070 	pop	{r4, r5, r6, pc}
       return CC_ERR_ALLOC;
 1006b98:	e3a00001 	mov	r0, #1
}
 1006b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
      rconf->mem_free(ringbuf);
 1006ba0:	e1a00004 	mov	r0, r4
 1006ba4:	e595300c 	ldr	r3, [r5, #12]
 1006ba8:	e12fff33 	blx	r3
      return CC_ERR_ALLOC;
 1006bac:	e3a00001 	mov	r0, #1
 1006bb0:	e8bd8070 	pop	{r4, r5, r6, pc}

01006bb4 <rbuf_conf_init>:

void rbuf_conf_init(RbufConf *rconf)
{
    rconf->capacity = DEFAULT_RBUF_CAPACITY;
    rconf->mem_alloc = malloc;
 1006bb4:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    rconf->mem_calloc = calloc;
 1006bb8:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    rconf->mem_free = free;
 1006bbc:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    rconf->capacity = DEFAULT_RBUF_CAPACITY;
 1006bc0:	e3a0c00a 	mov	ip, #10
    rconf->mem_alloc = malloc;
 1006bc4:	e3401101 	movt	r1, #257	; 0x101
    rconf->mem_calloc = calloc;
 1006bc8:	e3402101 	movt	r2, #257	; 0x101
    rconf->mem_free = free;
 1006bcc:	e3403101 	movt	r3, #257	; 0x101
    rconf->capacity = DEFAULT_RBUF_CAPACITY;
 1006bd0:	e580c000 	str	ip, [r0]
    rconf->mem_free = free;
 1006bd4:	e980000e 	stmib	r0, {r1, r2, r3}
}
 1006bd8:	e12fff1e 	bx	lr

01006bdc <rbuf_destroy>:

void rbuf_destroy(Rbuf *rbuf)
{
 1006bdc:	e92d4010 	push	{r4, lr}
 1006be0:	e1a04000 	mov	r4, r0
    rbuf->mem_free(rbuf->buf);
 1006be4:	e590301c 	ldr	r3, [r0, #28]
 1006be8:	e5900010 	ldr	r0, [r0, #16]
 1006bec:	e12fff33 	blx	r3
    rbuf->mem_free(rbuf);
 1006bf0:	e594301c 	ldr	r3, [r4, #28]
 1006bf4:	e1a00004 	mov	r0, r4
}
 1006bf8:	e8bd4010 	pop	{r4, lr}
    rbuf->mem_free(rbuf);
 1006bfc:	e12fff13 	bx	r3

01006c00 <rbuf_is_empty>:

bool rbuf_is_empty(Rbuf *rbuf)
{
    return (rbuf->size == 0);
 1006c00:	e5900000 	ldr	r0, [r0]
}
 1006c04:	e16f0f10 	clz	r0, r0
 1006c08:	e1a002a0 	lsr	r0, r0, #5
 1006c0c:	e12fff1e 	bx	lr

01006c10 <rbuf_size>:

size_t rbuf_size(Rbuf *rbuf)
{
  return rbuf->size;
}
 1006c10:	e5900000 	ldr	r0, [r0]
 1006c14:	e12fff1e 	bx	lr

01006c18 <rbuf_enqueue>:

void rbuf_enqueue(Rbuf *rbuf, uint64_t item)
{
 1006c18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1006c1c:	e1a09003 	mov	r9, r3
    if (rbuf->head == rbuf->tail)
 1006c20:	e5905008 	ldr	r5, [r0, #8]
{
 1006c24:	e1a04000 	mov	r4, r0
 1006c28:	e1a08002 	mov	r8, r2
    if (rbuf->head == rbuf->tail)
 1006c2c:	e590300c 	ldr	r3, [r0, #12]
 1006c30:	e5906004 	ldr	r6, [r0, #4]
       rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006c34:	e2857001 	add	r7, r5, #1
    if (rbuf->head == rbuf->tail)
 1006c38:	e1550003 	cmp	r5, r3
 1006c3c:	1a000003 	bne	1006c50 <rbuf_enqueue+0x38>
       rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006c40:	e1a01006 	mov	r1, r6
 1006c44:	e1a00007 	mov	r0, r7
 1006c48:	fa005145 	blx	101b164 <__aeabi_uidivmod>
 1006c4c:	e584100c 	str	r1, [r4, #12]
    rbuf->buf[rbuf->head] = item;
 1006c50:	e5943010 	ldr	r3, [r4, #16]
 1006c54:	e1a05185 	lsl	r5, r5, #3
    rbuf->head = (rbuf->head + 1) % rbuf->capacity;
 1006c58:	e1a00007 	mov	r0, r7
 1006c5c:	e1a01006 	mov	r1, r6
    rbuf->buf[rbuf->head] = item;
 1006c60:	e18380f5 	strd	r8, [r3, r5]
    rbuf->head = (rbuf->head + 1) % rbuf->capacity;
 1006c64:	fa00513e 	blx	101b164 <__aeabi_uidivmod>
    if (rbuf->size < rbuf->capacity)
 1006c68:	e5943000 	ldr	r3, [r4]
    rbuf->head = (rbuf->head + 1) % rbuf->capacity;
 1006c6c:	e5841008 	str	r1, [r4, #8]
    if (rbuf->size < rbuf->capacity)
 1006c70:	e1530006 	cmp	r3, r6
       ++rbuf->size;
 1006c74:	32833001 	addcc	r3, r3, #1
 1006c78:	35843000 	strcc	r3, [r4]
}
 1006c7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01006c80 <rbuf_dequeue>:

enum cc_stat rbuf_dequeue(Rbuf *rbuf, uint64_t *out)
{
 1006c80:	e92d4070 	push	{r4, r5, r6, lr}
    return (rbuf->size == 0);
 1006c84:	e5905000 	ldr	r5, [r0]
    if (rbuf_is_empty(rbuf))
 1006c88:	e3550000 	cmp	r5, #0
 1006c8c:	0a00000f 	beq	1006cd0 <rbuf_dequeue+0x50>
       return CC_ERR_OUT_OF_RANGE;
    *out = rbuf->buf[rbuf->tail];
 1006c90:	e590300c 	ldr	r3, [r0, #12]
 1006c94:	e1a0c001 	mov	ip, r1
 1006c98:	e5902010 	ldr	r2, [r0, #16]
 1006c9c:	e1a04000 	mov	r4, r0
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006ca0:	e5901004 	ldr	r1, [r0, #4]
    --rbuf->size;
 1006ca4:	e2455001 	sub	r5, r5, #1
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006ca8:	e2830001 	add	r0, r3, #1
    *out = rbuf->buf[rbuf->tail];
 1006cac:	e1a03183 	lsl	r3, r3, #3
 1006cb0:	e0822003 	add	r2, r2, r3
 1006cb4:	e1c220d0 	ldrd	r2, [r2]
 1006cb8:	e1cc20f0 	strd	r2, [ip]
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006cbc:	fa005128 	blx	101b164 <__aeabi_uidivmod>
    --rbuf->size;
 1006cc0:	e5845000 	str	r5, [r4]
    return CC_OK;
 1006cc4:	e3a00000 	mov	r0, #0
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006cc8:	e584100c 	str	r1, [r4, #12]
    return CC_OK;
 1006ccc:	e8bd8070 	pop	{r4, r5, r6, pc}
       return CC_ERR_OUT_OF_RANGE;
 1006cd0:	e3a00008 	mov	r0, #8
}
 1006cd4:	e8bd8070 	pop	{r4, r5, r6, pc}

01006cd8 <rbuf_peek>:

uint64_t rbuf_peek(Rbuf *rbuf, int index)
{
    return rbuf->buf[index];
 1006cd8:	e5903010 	ldr	r3, [r0, #16]
 1006cdc:	e1a01181 	lsl	r1, r1, #3
}
 1006ce0:	e18100d3 	ldrd	r0, [r1, r3]
 1006ce4:	e12fff1e 	bx	lr

01006ce8 <slist_conf_init>:
 *
 * @param[in] conf the SListConf struct that is being initialized.
 */
void slist_conf_init(SListConf *conf)
{
    conf->mem_alloc  = malloc;
 1006ce8:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    conf->mem_calloc = calloc;
 1006cec:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 1006cf0:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    conf->mem_alloc  = malloc;
 1006cf4:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1006cf8:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1006cfc:	e3403101 	movt	r3, #257	; 0x101
 1006d00:	e880000e 	stm	r0, {r1, r2, r3}
}
 1006d04:	e12fff1e 	bx	lr

01006d08 <slist_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new SList structure failed.
 */
enum cc_stat slist_new(SList **out)
{
 1006d08:	e92d4010 	push	{r4, lr}
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new SList structure failed.
 */
enum cc_stat slist_new_conf(SListConf const * const conf, SList **out)
{
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1006d0c:	e3a01018 	mov	r1, #24
{
 1006d10:	e1a04000 	mov	r4, r0
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1006d14:	e3a00001 	mov	r0, #1
 1006d18:	fa0053a6 	blx	101bbb8 <calloc>

    if (!list)
 1006d1c:	e2503000 	subs	r3, r0, #0
 1006d20:	0a00000b 	beq	1006d54 <slist_new+0x4c>
        return CC_ERR_ALLOC;

    list->mem_alloc  = conf->mem_alloc;
 1006d24:	e30cc7b9 	movw	ip, #51129	; 0xc7b9
    list->mem_calloc = conf->mem_calloc;
 1006d28:	e30b1bb9 	movw	r1, #48057	; 0xbbb9
    list->mem_free   = conf->mem_free;
 1006d2c:	e30c27c9 	movw	r2, #51145	; 0xc7c9
    list->mem_alloc  = conf->mem_alloc;
 1006d30:	e340c101 	movt	ip, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1006d34:	e3401101 	movt	r1, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1006d38:	e3402101 	movt	r2, #257	; 0x101

    *out = list;
 1006d3c:	e5843000 	str	r3, [r4]
    return CC_OK;
 1006d40:	e3a00000 	mov	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1006d44:	e583c00c 	str	ip, [r3, #12]
    list->mem_calloc = conf->mem_calloc;
 1006d48:	e5831010 	str	r1, [r3, #16]
    list->mem_free   = conf->mem_free;
 1006d4c:	e5832014 	str	r2, [r3, #20]
    return CC_OK;
 1006d50:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_ALLOC;
 1006d54:	e3a00001 	mov	r0, #1
}
 1006d58:	e8bd8010 	pop	{r4, pc}

01006d5c <slist_new_conf>:
{
 1006d5c:	e92d4070 	push	{r4, r5, r6, lr}
 1006d60:	e1a04000 	mov	r4, r0
 1006d64:	e1a05001 	mov	r5, r1
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1006d68:	e5903004 	ldr	r3, [r0, #4]
 1006d6c:	e3a01018 	mov	r1, #24
 1006d70:	e3a00001 	mov	r0, #1
 1006d74:	e12fff33 	blx	r3
    if (!list)
 1006d78:	e2503000 	subs	r3, r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1006d7c:	1594c000 	ldrne	ip, [r4]
    return CC_OK;
 1006d80:	13a00000 	movne	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1006d84:	19940006 	ldmibne	r4, {r1, r2}
        return CC_ERR_ALLOC;
 1006d88:	03a00001 	moveq	r0, #1
    list->mem_alloc  = conf->mem_alloc;
 1006d8c:	1583c00c 	strne	ip, [r3, #12]
 1006d90:	15831010 	strne	r1, [r3, #16]
 1006d94:	15832014 	strne	r2, [r3, #20]
    *out = list;
 1006d98:	15853000 	strne	r3, [r5]
}
 1006d9c:	e8bd8070 	pop	{r4, r5, r6, pc}

01006da0 <slist_destroy>:
 *
 * @return false if the list is already y empty, otherwise returns true
 */
static bool unlinkn_all(SList *list, void (*cb) (void*))
{
    if (list->size == 0)
 1006da0:	e5903000 	ldr	r3, [r0]
{
 1006da4:	e92d4070 	push	{r4, r5, r6, lr}
 1006da8:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 1006dac:	e3530000 	cmp	r3, #0
 1006db0:	0a00000d 	beq	1006dec <slist_destroy+0x4c>
        return false;

    SNode *n = list->head;
 1006db4:	e5900004 	ldr	r0, [r0, #4]

    while (n) {
 1006db8:	e3500000 	cmp	r0, #0
 1006dbc:	0a000007 	beq	1006de0 <slist_destroy+0x40>
        SNode *tmp = n->next;
 1006dc0:	e5905004 	ldr	r5, [r0, #4]

        if (cb)
            cb(n->data);

        list->mem_free(n);
 1006dc4:	e5943014 	ldr	r3, [r4, #20]
 1006dc8:	e12fff33 	blx	r3
        n = tmp;
        list->size--;
 1006dcc:	e5943000 	ldr	r3, [r4]
    while (n) {
 1006dd0:	e2550000 	subs	r0, r5, #0
        list->size--;
 1006dd4:	e2433001 	sub	r3, r3, #1
 1006dd8:	e5843000 	str	r3, [r4]
    while (n) {
 1006ddc:	1afffff7 	bne	1006dc0 <slist_destroy+0x20>
        list->head = NULL;
 1006de0:	e3a03000 	mov	r3, #0
 1006de4:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1006de8:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1006dec:	e5943014 	ldr	r3, [r4, #20]
 1006df0:	e1a00004 	mov	r0, r4
}
 1006df4:	e8bd4070 	pop	{r4, r5, r6, lr}
    list->mem_free(list);
 1006df8:	e12fff13 	bx	r3

01006dfc <slist_destroy_cb>:
    if (list->size == 0)
 1006dfc:	e5903000 	ldr	r3, [r0]
{
 1006e00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006e04:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 1006e08:	e3530000 	cmp	r3, #0
 1006e0c:	0a000012 	beq	1006e5c <slist_destroy_cb+0x60>
    SNode *n = list->head;
 1006e10:	e5905004 	ldr	r5, [r0, #4]
    while (n) {
 1006e14:	e3550000 	cmp	r5, #0
 1006e18:	0a00000c 	beq	1006e50 <slist_destroy_cb+0x54>
 1006e1c:	e3510000 	cmp	r1, #0
 1006e20:	e1a07001 	mov	r7, r1
 1006e24:	0a000010 	beq	1006e6c <slist_destroy_cb+0x70>
        SNode *tmp = n->next;
 1006e28:	e8950041 	ldm	r5, {r0, r6}
            cb(n->data);
 1006e2c:	e12fff37 	blx	r7
        list->mem_free(n);
 1006e30:	e1a00005 	mov	r0, r5
 1006e34:	e5943014 	ldr	r3, [r4, #20]
 1006e38:	e12fff33 	blx	r3
        list->size--;
 1006e3c:	e5943000 	ldr	r3, [r4]
    while (n) {
 1006e40:	e2565000 	subs	r5, r6, #0
        list->size--;
 1006e44:	e2433001 	sub	r3, r3, #1
 1006e48:	e5843000 	str	r3, [r4]
    while (n) {
 1006e4c:	1afffff5 	bne	1006e28 <slist_destroy_cb+0x2c>
        list->head = NULL;
 1006e50:	e3a03000 	mov	r3, #0
 1006e54:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1006e58:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1006e5c:	e5943014 	ldr	r3, [r4, #20]
 1006e60:	e1a00004 	mov	r0, r4
}
 1006e64:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    list->mem_free(list);
 1006e68:	e12fff13 	bx	r3
        SNode *tmp = n->next;
 1006e6c:	e5956004 	ldr	r6, [r5, #4]
        list->mem_free(n);
 1006e70:	e1a00005 	mov	r0, r5
 1006e74:	e5943014 	ldr	r3, [r4, #20]
 1006e78:	e12fff33 	blx	r3
        list->size--;
 1006e7c:	e5943000 	ldr	r3, [r4]
    while (n) {
 1006e80:	e2565000 	subs	r5, r6, #0
        list->size--;
 1006e84:	e2433001 	sub	r3, r3, #1
 1006e88:	e5843000 	str	r3, [r4]
    while (n) {
 1006e8c:	1afffff6 	bne	1006e6c <slist_destroy_cb+0x70>
 1006e90:	eaffffee 	b	1006e50 <slist_destroy_cb+0x54>

01006e94 <slist_add>:
{
 1006e94:	e92d4070 	push	{r4, r5, r6, lr}
 1006e98:	e1a04000 	mov	r4, r0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006e9c:	e5903010 	ldr	r3, [r0, #16]
{
 1006ea0:	e1a05001 	mov	r5, r1
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006ea4:	e3a00001 	mov	r0, #1
 1006ea8:	e3a01008 	mov	r1, #8
 1006eac:	e12fff33 	blx	r3
    if (!node)
 1006eb0:	e3500000 	cmp	r0, #0
 1006eb4:	0a00000a 	beq	1006ee4 <slist_add+0x50>
    if (list->size == 0) {
 1006eb8:	e5943000 	ldr	r3, [r4]
    node->data = element;
 1006ebc:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 1006ec0:	e3530000 	cmp	r3, #0
    list->size++;
 1006ec4:	e2833001 	add	r3, r3, #1
        list->tail->next = node;
 1006ec8:	15942008 	ldrne	r2, [r4, #8]
        list->head       = node;
 1006ecc:	05840004 	streq	r0, [r4, #4]
        list->tail->next = node;
 1006ed0:	15820004 	strne	r0, [r2, #4]
        list->tail       = node;
 1006ed4:	e5840008 	str	r0, [r4, #8]
    return CC_OK;
 1006ed8:	e3a00000 	mov	r0, #0
    list->size++;
 1006edc:	e5843000 	str	r3, [r4]
    return CC_OK;
 1006ee0:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1006ee4:	e3a00001 	mov	r0, #1
}
 1006ee8:	e8bd8070 	pop	{r4, r5, r6, pc}

01006eec <slist_add_first>:
{
 1006eec:	e92d4070 	push	{r4, r5, r6, lr}
 1006ef0:	e1a04000 	mov	r4, r0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006ef4:	e5903010 	ldr	r3, [r0, #16]
{
 1006ef8:	e1a05001 	mov	r5, r1
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006efc:	e3a00001 	mov	r0, #1
 1006f00:	e3a01008 	mov	r1, #8
 1006f04:	e12fff33 	blx	r3
    if (!node)
 1006f08:	e3500000 	cmp	r0, #0
 1006f0c:	0a00000b 	beq	1006f40 <slist_add_first+0x54>
    if (list->size == 0) {
 1006f10:	e5943000 	ldr	r3, [r4]
    node->data = element;
 1006f14:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 1006f18:	e3530000 	cmp	r3, #0
    list->size++;
 1006f1c:	e2833001 	add	r3, r3, #1
        node->next = list->head;
 1006f20:	15942004 	ldrne	r2, [r4, #4]
        list->head = node;
 1006f24:	05840004 	streq	r0, [r4, #4]
        list->tail = node;
 1006f28:	05840008 	streq	r0, [r4, #8]
        node->next = list->head;
 1006f2c:	15802004 	strne	r2, [r0, #4]
        list->head = node;
 1006f30:	15840004 	strne	r0, [r4, #4]
    return CC_OK;
 1006f34:	e3a00000 	mov	r0, #0
    list->size++;
 1006f38:	e5843000 	str	r3, [r4]
    return CC_OK;
 1006f3c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1006f40:	e3a00001 	mov	r0, #1
}
 1006f44:	e8bd8070 	pop	{r4, r5, r6, pc}

01006f48 <slist_add_last>:
 1006f48:	e92d4070 	push	{r4, r5, r6, lr}
 1006f4c:	e1a04000 	mov	r4, r0
 1006f50:	e5903010 	ldr	r3, [r0, #16]
 1006f54:	e1a05001 	mov	r5, r1
 1006f58:	e3a00001 	mov	r0, #1
 1006f5c:	e3a01008 	mov	r1, #8
 1006f60:	e12fff33 	blx	r3
 1006f64:	e3500000 	cmp	r0, #0
 1006f68:	0a00000a 	beq	1006f98 <slist_add_last+0x50>
 1006f6c:	e5943000 	ldr	r3, [r4]
 1006f70:	e5805000 	str	r5, [r0]
 1006f74:	e3530000 	cmp	r3, #0
 1006f78:	e2833001 	add	r3, r3, #1
 1006f7c:	15942008 	ldrne	r2, [r4, #8]
 1006f80:	05840004 	streq	r0, [r4, #4]
 1006f84:	15820004 	strne	r0, [r2, #4]
 1006f88:	e5840008 	str	r0, [r4, #8]
 1006f8c:	e3a00000 	mov	r0, #0
 1006f90:	e5843000 	str	r3, [r4]
 1006f94:	e8bd8070 	pop	{r4, r5, r6, pc}
 1006f98:	e3a00001 	mov	r0, #1
 1006f9c:	e8bd8070 	pop	{r4, r5, r6, pc}

01006fa0 <slist_add_at>:
 * was out of range.
 */
static enum cc_stat
get_node_at(SList *list, size_t index, SNode **node, SNode **prev)
{
    if (index >= list->size)
 1006fa0:	e5903000 	ldr	r3, [r0]
 1006fa4:	e1520003 	cmp	r2, r3
 1006fa8:	2a00001d 	bcs	1007024 <slist_add_at+0x84>

    *node = list->head;
    *prev = NULL;

    size_t i;
    for (i = 0; i < index; i++) {
 1006fac:	e3520000 	cmp	r2, #0
{
 1006fb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006fb4:	e1a06001 	mov	r6, r1
 1006fb8:	e1a04000 	mov	r4, r0
    *node = list->head;
 1006fbc:	e5905004 	ldr	r5, [r0, #4]
    for (i = 0; i < index; i++) {
 1006fc0:	e5907010 	ldr	r7, [r0, #16]
 1006fc4:	0a000018 	beq	100702c <slist_add_at+0x8c>
 1006fc8:	e3a03000 	mov	r3, #0
 1006fcc:	ea000000 	b	1006fd4 <slist_add_at+0x34>
        *prev = *node;
        *node = (*node)->next;
 1006fd0:	e1a05000 	mov	r5, r0
    for (i = 0; i < index; i++) {
 1006fd4:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1006fd8:	e5950004 	ldr	r0, [r5, #4]
    for (i = 0; i < index; i++) {
 1006fdc:	e1520003 	cmp	r2, r3
 1006fe0:	1afffffa 	bne	1006fd0 <slist_add_at+0x30>
    SNode *new = list->mem_calloc(1, sizeof(SNode));
 1006fe4:	e3a01008 	mov	r1, #8
 1006fe8:	e3a00001 	mov	r0, #1
 1006fec:	e12fff37 	blx	r7
    if (!new)
 1006ff0:	e3500000 	cmp	r0, #0
 1006ff4:	0a000008 	beq	100701c <slist_add_at+0x7c>
        SNode *tmp = prev->next;
 1006ff8:	e5953004 	ldr	r3, [r5, #4]
    new->data = element;
 1006ffc:	e5806000 	str	r6, [r0]
        prev->next = new;
 1007000:	e5850004 	str	r0, [r5, #4]
        new->next  = tmp;
 1007004:	e5803004 	str	r3, [r0, #4]
    list->size++;
 1007008:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 100700c:	e3a00000 	mov	r0, #0
    list->size++;
 1007010:	e2833001 	add	r3, r3, #1
 1007014:	e5843000 	str	r3, [r4]
    return CC_OK;
 1007018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 100701c:	e3a00001 	mov	r0, #1
}
 1007020:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (index >= list->size)
 1007024:	e3a00008 	mov	r0, #8
}
 1007028:	e12fff1e 	bx	lr
    SNode *new = list->mem_calloc(1, sizeof(SNode));
 100702c:	e3a01008 	mov	r1, #8
 1007030:	e3a00001 	mov	r0, #1
 1007034:	e12fff37 	blx	r7
    if (!new)
 1007038:	e3500000 	cmp	r0, #0
 100703c:	0afffff6 	beq	100701c <slist_add_at+0x7c>
        new->next  = list->head;
 1007040:	e5943004 	ldr	r3, [r4, #4]
    new->data = element;
 1007044:	e5806000 	str	r6, [r0]
        new->next  = list->head;
 1007048:	e5803004 	str	r3, [r0, #4]
        list->head = new;
 100704c:	e5840004 	str	r0, [r4, #4]
 1007050:	eaffffec 	b	1007008 <slist_add_at+0x68>

01007054 <slist_add_all>:
    if (list2->size == 0)
 1007054:	e5913000 	ldr	r3, [r1]
 1007058:	e3530000 	cmp	r3, #0
 100705c:	1a000001 	bne	1007068 <slist_add_all+0x14>
        return CC_OK;
 1007060:	e1a00003 	mov	r0, r3
}
 1007064:	e12fff1e 	bx	lr
{
 1007068:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    SNode *tail = NULL;
 100706c:	e3a09000 	mov	r9, #0
 1007070:	e1a08000 	mov	r8, r0
 1007074:	e1a04001 	mov	r4, r1
    SNode *head = NULL;
 1007078:	e1a06009 	mov	r6, r9
    for (i = 0; i < list->size; i++) {
 100707c:	e1a05009 	mov	r5, r9
    SNode *ins = list->head;
 1007080:	e5917004 	ldr	r7, [r1, #4]
    for (i = 0; i < list->size; i++) {
 1007084:	ea000004 	b	100709c <slist_add_all+0x48>
 1007088:	e1520005 	cmp	r2, r5
            (*t)->next = new;
 100708c:	e5890004 	str	r0, [r9, #4]
        ins = ins->next;
 1007090:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 1007094:	9a000010 	bls	10070dc <slist_add_all+0x88>
 1007098:	e1a09000 	mov	r9, r0
        SNode *new = list->mem_calloc(1, sizeof(SNode));
 100709c:	e5943010 	ldr	r3, [r4, #16]
 10070a0:	e3a01008 	mov	r1, #8
 10070a4:	e3a00001 	mov	r0, #1
 10070a8:	e12fff33 	blx	r3
        if (!new) {
 10070ac:	e3500000 	cmp	r0, #0
 10070b0:	0a000012 	beq	1007100 <slist_add_all+0xac>
        new->data = ins->data;
 10070b4:	e5972000 	ldr	r2, [r7]
        if (!*h) {
 10070b8:	e3560000 	cmp	r6, #0
    for (i = 0; i < list->size; i++) {
 10070bc:	e2855001 	add	r5, r5, #1
        new->data = ins->data;
 10070c0:	e5802000 	str	r2, [r0]
    for (i = 0; i < list->size; i++) {
 10070c4:	e5942000 	ldr	r2, [r4]
        if (!*h) {
 10070c8:	1affffee 	bne	1007088 <slist_add_all+0x34>
    for (i = 0; i < list->size; i++) {
 10070cc:	e1550002 	cmp	r5, r2
 10070d0:	e1a06000 	mov	r6, r0
        ins = ins->next;
 10070d4:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 10070d8:	3affffee 	bcc	1007098 <slist_add_all+0x44>
    if (list1->size == 0) {
 10070dc:	e5981000 	ldr	r1, [r8]
 10070e0:	e3510000 	cmp	r1, #0
        list1->head = head;
 10070e4:	05886004 	streq	r6, [r8, #4]
        list1->tail = tail;
 10070e8:	05880008 	streq	r0, [r8, #8]
    if (list1->size == 0) {
 10070ec:	1a00000d 	bne	1007128 <slist_add_all+0xd4>
    list1->size += list2->size;
 10070f0:	e0812002 	add	r2, r1, r2
    return CC_OK;
 10070f4:	e3a00000 	mov	r0, #0
    list1->size += list2->size;
 10070f8:	e5882000 	str	r2, [r8]
}
 10070fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            while (*h) {
 1007100:	e3560000 	cmp	r6, #0
 1007104:	0a000005 	beq	1007120 <slist_add_all+0xcc>
                SNode *tmp = (*h)->next;
 1007108:	e5965004 	ldr	r5, [r6, #4]
                list->mem_free(*h);
 100710c:	e1a00006 	mov	r0, r6
 1007110:	e5943014 	ldr	r3, [r4, #20]
 1007114:	e12fff33 	blx	r3
            while (*h) {
 1007118:	e2556000 	subs	r6, r5, #0
 100711c:	1afffff9 	bne	1007108 <slist_add_all+0xb4>
        return CC_ERR_ALLOC;
 1007120:	e3a00001 	mov	r0, #1
 1007124:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list1->tail->next = head;
 1007128:	e5983008 	ldr	r3, [r8, #8]
 100712c:	e5836004 	str	r6, [r3, #4]
        list1->tail = tail;
 1007130:	e5880008 	str	r0, [r8, #8]
 1007134:	eaffffed 	b	10070f0 <slist_add_all+0x9c>

01007138 <slist_add_all_at>:
{
 1007138:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (list2->size == 0)
 100713c:	e5913000 	ldr	r3, [r1]
 1007140:	e3530000 	cmp	r3, #0
 1007144:	0a000031 	beq	1007210 <slist_add_all_at+0xd8>
    if (index >= list->size)
 1007148:	e5903000 	ldr	r3, [r0]
 100714c:	e1520003 	cmp	r2, r3
 1007150:	2a000033 	bcs	1007224 <slist_add_all_at+0xec>
    for (i = 0; i < index; i++) {
 1007154:	e3520000 	cmp	r2, #0
    *node = list->head;
 1007158:	e5909004 	ldr	r9, [r0, #4]
    for (i = 0; i < index; i++) {
 100715c:	0a00002d 	beq	1007218 <slist_add_all_at+0xe0>
 1007160:	e3a03000 	mov	r3, #0
 1007164:	ea000000 	b	100716c <slist_add_all_at+0x34>
        *node = (*node)->next;
 1007168:	e1a0900a 	mov	r9, sl
    for (i = 0; i < index; i++) {
 100716c:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1007170:	e599a004 	ldr	sl, [r9, #4]
    for (i = 0; i < index; i++) {
 1007174:	e1520003 	cmp	r2, r3
 1007178:	1afffffa 	bne	1007168 <slist_add_all_at+0x30>
    for (i = 0; i < list->size; i++) {
 100717c:	e3a0b000 	mov	fp, #0
 1007180:	e1a08000 	mov	r8, r0
 1007184:	e1a04001 	mov	r4, r1
 1007188:	e5917004 	ldr	r7, [r1, #4]
 100718c:	e1a0500b 	mov	r5, fp
 1007190:	e1a0600b 	mov	r6, fp
 1007194:	ea000004 	b	10071ac <slist_add_all_at+0x74>
 1007198:	e1560003 	cmp	r6, r3
            (*t)->next = new;
 100719c:	e58b0004 	str	r0, [fp, #4]
        ins = ins->next;
 10071a0:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 10071a4:	2a000010 	bcs	10071ec <slist_add_all_at+0xb4>
 10071a8:	e1a0b000 	mov	fp, r0
        SNode *new = list->mem_calloc(1, sizeof(SNode));
 10071ac:	e5943010 	ldr	r3, [r4, #16]
 10071b0:	e3a01008 	mov	r1, #8
 10071b4:	e3a00001 	mov	r0, #1
 10071b8:	e12fff33 	blx	r3
        if (!new) {
 10071bc:	e3500000 	cmp	r0, #0
 10071c0:	0a000019 	beq	100722c <slist_add_all_at+0xf4>
        new->data = ins->data;
 10071c4:	e5973000 	ldr	r3, [r7]
        if (!*h) {
 10071c8:	e3550000 	cmp	r5, #0
    for (i = 0; i < list->size; i++) {
 10071cc:	e2866001 	add	r6, r6, #1
        new->data = ins->data;
 10071d0:	e5803000 	str	r3, [r0]
    for (i = 0; i < list->size; i++) {
 10071d4:	e5943000 	ldr	r3, [r4]
        if (!*h) {
 10071d8:	1affffee 	bne	1007198 <slist_add_all_at+0x60>
    for (i = 0; i < list->size; i++) {
 10071dc:	e1560003 	cmp	r6, r3
 10071e0:	e1a05000 	mov	r5, r0
        ins = ins->next;
 10071e4:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 10071e8:	3affffee 	bcc	10071a8 <slist_add_all_at+0x70>
    if (!prev) {
 10071ec:	e3590000 	cmp	r9, #0
        prev->next = head;
 10071f0:	15895004 	strne	r5, [r9, #4]
        tail->next = node;
 10071f4:	1580a004 	strne	sl, [r0, #4]
    if (!prev) {
 10071f8:	0a000015 	beq	1007254 <slist_add_all_at+0x11c>
    list1->size += list2->size;
 10071fc:	e5982000 	ldr	r2, [r8]
    return CC_OK;
 1007200:	e3a00000 	mov	r0, #0
    list1->size += list2->size;
 1007204:	e0823003 	add	r3, r2, r3
 1007208:	e5883000 	str	r3, [r8]
    return CC_OK;
 100720c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_OK;
 1007210:	e1a00003 	mov	r0, r3
 1007214:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *node = list->head;
 1007218:	e1a0a009 	mov	sl, r9
    SNode *prev = NULL;
 100721c:	e1a09002 	mov	r9, r2
 1007220:	eaffffd5 	b	100717c <slist_add_all_at+0x44>
    if (index >= list->size)
 1007224:	e3a00008 	mov	r0, #8
}
 1007228:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while (*h) {
 100722c:	e3550000 	cmp	r5, #0
 1007230:	0a000005 	beq	100724c <slist_add_all_at+0x114>
                SNode *tmp = (*h)->next;
 1007234:	e5956004 	ldr	r6, [r5, #4]
                list->mem_free(*h);
 1007238:	e1a00005 	mov	r0, r5
 100723c:	e5943014 	ldr	r3, [r4, #20]
 1007240:	e12fff33 	blx	r3
            while (*h) {
 1007244:	e2565000 	subs	r5, r6, #0
 1007248:	1afffff9 	bne	1007234 <slist_add_all_at+0xfc>
        return CC_ERR_ALLOC;
 100724c:	e3a00001 	mov	r0, #1
 1007250:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tail->next  = node;
 1007254:	e580a004 	str	sl, [r0, #4]
        list1->head = head;
 1007258:	e5885004 	str	r5, [r8, #4]
 100725c:	eaffffe6 	b	10071fc <slist_add_all_at+0xc4>

01007260 <slist_splice>:
    if (list2->size == 0)
 1007260:	e5913000 	ldr	r3, [r1]
 1007264:	e3530000 	cmp	r3, #0
 1007268:	0a000010 	beq	10072b0 <slist_splice+0x50>
    if (list1->size == 0) {
 100726c:	e5902000 	ldr	r2, [r0]
{
 1007270:	e92d4010 	push	{r4, lr}
 1007274:	e591c008 	ldr	ip, [r1, #8]
    if (list1->size == 0) {
 1007278:	e3520000 	cmp	r2, #0
    list1->size += list2->size;
 100727c:	e0833002 	add	r3, r3, r2
        list1->tail->next = list2->head;
 1007280:	15904008 	ldrne	r4, [r0, #8]
    list2->head = NULL;
 1007284:	e3a02000 	mov	r2, #0
 1007288:	e591e004 	ldr	lr, [r1, #4]
        list1->tail->next = list2->head;
 100728c:	1584e004 	strne	lr, [r4, #4]
        list1->head = list2->head;
 1007290:	0580e004 	streq	lr, [r0, #4]
        list1->tail = list2->tail;
 1007294:	e580c008 	str	ip, [r0, #8]
    list1->size += list2->size;
 1007298:	e5803000 	str	r3, [r0]
}
 100729c:	e3a00000 	mov	r0, #0
    list2->head = NULL;
 10072a0:	e5812004 	str	r2, [r1, #4]
    list2->tail = NULL;
 10072a4:	e5812008 	str	r2, [r1, #8]
    list2->size = 0;
 10072a8:	e5812000 	str	r2, [r1]
}
 10072ac:	e8bd8010 	pop	{r4, pc}
 10072b0:	e3a00000 	mov	r0, #0
 10072b4:	e12fff1e 	bx	lr

010072b8 <slist_splice_at>:
    if (list2->size == 0)
 10072b8:	e5913000 	ldr	r3, [r1]
 10072bc:	e3530000 	cmp	r3, #0
 10072c0:	0a00001f 	beq	1007344 <slist_splice_at+0x8c>
{
 10072c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if (index >= list1->size)
 10072c8:	e5905000 	ldr	r5, [r0]
 10072cc:	e1550002 	cmp	r5, r2
 10072d0:	9a000019 	bls	100733c <slist_splice_at+0x84>
    for (i = 0; i < index; i++) {
 10072d4:	e3520000 	cmp	r2, #0
    *node = list->head;
 10072d8:	e590e004 	ldr	lr, [r0, #4]
    for (i = 0; i < index; i++) {
 10072dc:	e5916008 	ldr	r6, [r1, #8]
 10072e0:	e5917004 	ldr	r7, [r1, #4]
 10072e4:	0a000018 	beq	100734c <slist_splice_at+0x94>
 10072e8:	e3a0c000 	mov	ip, #0
 10072ec:	ea000000 	b	10072f4 <slist_splice_at+0x3c>
        *node = (*node)->next;
 10072f0:	e1a0e004 	mov	lr, r4
    for (i = 0; i < index; i++) {
 10072f4:	e28cc001 	add	ip, ip, #1
        *node = (*node)->next;
 10072f8:	e59e4004 	ldr	r4, [lr, #4]
    for (i = 0; i < index; i++) {
 10072fc:	e152000c 	cmp	r2, ip
 1007300:	1afffffa 	bne	10072f0 <slist_splice_at+0x38>
    } else if (!end) {
 1007304:	e3540000 	cmp	r4, #0
        l1->tail->next = l2->head;
 1007308:	05902008 	ldreq	r2, [r0, #8]
        base->next = l2->head;
 100730c:	158e7004 	strne	r7, [lr, #4]
        l2->tail->next = end;
 1007310:	15864004 	strne	r4, [r6, #4]
        l1->tail->next = l2->head;
 1007314:	05827004 	streq	r7, [r2, #4]
        l1->tail = l2->tail;
 1007318:	05806008 	streq	r6, [r0, #8]
    l2->head = NULL;
 100731c:	e3a02000 	mov	r2, #0
    l1->size += l2->size;
 1007320:	e0833005 	add	r3, r3, r5
 1007324:	e5803000 	str	r3, [r0]
    return CC_OK;
 1007328:	e1a00002 	mov	r0, r2
    l2->head = NULL;
 100732c:	e5812004 	str	r2, [r1, #4]
    l2->tail = NULL;
 1007330:	e5812008 	str	r2, [r1, #8]
    l2->size = 0;
 1007334:	e5812000 	str	r2, [r1]
    return CC_OK;
 1007338:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ERR_OUT_OF_RANGE;
 100733c:	e3a00008 	mov	r0, #8
}
 1007340:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_OK;
 1007344:	e1a00003 	mov	r0, r3
}
 1007348:	e12fff1e 	bx	lr
        l2->tail->next = l1->head;
 100734c:	e586e004 	str	lr, [r6, #4]
        l1->head = l2->head;
 1007350:	e5807004 	str	r7, [r0, #4]
 1007354:	eafffff0 	b	100731c <slist_splice_at+0x64>

01007358 <slist_remove>:
{
 1007358:	e92d4070 	push	{r4, r5, r6, lr}
    enum cc_stat status = get_node(list, element, &node, &prev);
 100735c:	e590e004 	ldr	lr, [r0, #4]
get_node(SList *list, void *element, SNode **node, SNode **prev)
{
   *node = list->head;
   *prev = NULL;

    while (*node) {
 1007360:	e35e0000 	cmp	lr, #0
 1007364:	0a000011 	beq	10073b0 <slist_remove+0x58>
        if ((*node)->data == element)
 1007368:	e89e0018 	ldm	lr, {r3, r4}
 100736c:	e1510003 	cmp	r1, r3
 1007370:	0a000024 	beq	1007408 <slist_remove+0xb0>
    while (*node) {
 1007374:	e3540000 	cmp	r4, #0
 1007378:	0a00000c 	beq	10073b0 <slist_remove+0x58>
        if ((*node)->data == element)
 100737c:	e594c000 	ldr	ip, [r4]
 1007380:	e5943004 	ldr	r3, [r4, #4]
 1007384:	e151000c 	cmp	r1, ip
 1007388:	1a000006 	bne	10073a8 <slist_remove+0x50>
 100738c:	ea000009 	b	10073b8 <slist_remove+0x60>
 1007390:	e593e000 	ldr	lr, [r3]
 1007394:	e593c004 	ldr	ip, [r3, #4]
 1007398:	e151000e 	cmp	r1, lr
 100739c:	0a000008 	beq	10073c4 <slist_remove+0x6c>
 10073a0:	e1a04003 	mov	r4, r3
 10073a4:	e1a0300c 	mov	r3, ip
    while (*node) {
 10073a8:	e3530000 	cmp	r3, #0
 10073ac:	1afffff7 	bne	1007390 <slist_remove+0x38>
            return CC_OK;

        *prev = *node;
        *node = (*node)->next;
    }
    return CC_ERR_VALUE_NOT_FOUND;
 10073b0:	e3a00007 	mov	r0, #7
 10073b4:	e8bd8070 	pop	{r4, r5, r6, pc}
        if ((*node)->data == element)
 10073b8:	e1a0c003 	mov	ip, r3
 10073bc:	e1a03004 	mov	r3, r4
 10073c0:	e1a0400e 	mov	r4, lr
        prev->next = node->next;
 10073c4:	e584c004 	str	ip, [r4, #4]
 10073c8:	e593c004 	ldr	ip, [r3, #4]
    if (!node->next)
 10073cc:	e1a06000 	mov	r6, r0
 10073d0:	e35c0000 	cmp	ip, #0
        list->tail = prev;
 10073d4:	05804008 	streq	r4, [r0, #8]
    list->mem_free(node);
 10073d8:	e1a00003 	mov	r0, r3
 10073dc:	e5963014 	ldr	r3, [r6, #20]
 10073e0:	e1a05002 	mov	r5, r2
 10073e4:	e1a04001 	mov	r4, r1
 10073e8:	e12fff33 	blx	r3
    list->size--;
 10073ec:	e5963000 	ldr	r3, [r6]
    if (out)
 10073f0:	e3550000 	cmp	r5, #0
    return CC_OK;
 10073f4:	e3a00000 	mov	r0, #0
    list->size--;
 10073f8:	e2433001 	sub	r3, r3, #1
 10073fc:	e5863000 	str	r3, [r6]
        *out = val;
 1007400:	15854000 	strne	r4, [r5]
 1007404:	e8bd8070 	pop	{r4, r5, r6, pc}
        list->head = node->next;
 1007408:	e5804004 	str	r4, [r0, #4]
 100740c:	e1a0c004 	mov	ip, r4
 1007410:	e1a0300e 	mov	r3, lr
 1007414:	e3a04000 	mov	r4, #0
 1007418:	eaffffeb 	b	10073cc <slist_remove+0x74>

0100741c <slist_remove_at>:
    if (index >= list->size)
 100741c:	e5903000 	ldr	r3, [r0]
 1007420:	e1510003 	cmp	r1, r3
 1007424:	2a00001d 	bcs	10074a0 <slist_remove_at+0x84>
{
 1007428:	e92d4070 	push	{r4, r5, r6, lr}
    for (i = 0; i < index; i++) {
 100742c:	e3510000 	cmp	r1, #0
    *node = list->head;
 1007430:	e590e004 	ldr	lr, [r0, #4]
    for (i = 0; i < index; i++) {
 1007434:	e59e3004 	ldr	r3, [lr, #4]
 1007438:	0a00001a 	beq	10074a8 <slist_remove_at+0x8c>
 100743c:	e3a0c000 	mov	ip, #0
 1007440:	ea000001 	b	100744c <slist_remove_at+0x30>
 1007444:	e1a0e003 	mov	lr, r3
 1007448:	e1a03004 	mov	r3, r4
 100744c:	e28cc001 	add	ip, ip, #1
 1007450:	e5934004 	ldr	r4, [r3, #4]
 1007454:	e151000c 	cmp	r1, ip
 1007458:	1afffff9 	bne	1007444 <slist_remove_at+0x28>
    void *data = node->data;
 100745c:	e5936000 	ldr	r6, [r3]
        prev->next = node->next;
 1007460:	e58e4004 	str	r4, [lr, #4]
 1007464:	e593c004 	ldr	ip, [r3, #4]
    if (!node->next)
 1007468:	e1a04000 	mov	r4, r0
 100746c:	e35c0000 	cmp	ip, #0
        list->tail = prev;
 1007470:	0580e008 	streq	lr, [r0, #8]
    list->mem_free(node);
 1007474:	e1a00003 	mov	r0, r3
 1007478:	e5943014 	ldr	r3, [r4, #20]
 100747c:	e1a05002 	mov	r5, r2
 1007480:	e12fff33 	blx	r3
    list->size--;
 1007484:	e5943000 	ldr	r3, [r4]
    if (out)
 1007488:	e3550000 	cmp	r5, #0
    return CC_OK;
 100748c:	e3a00000 	mov	r0, #0
    list->size--;
 1007490:	e2433001 	sub	r3, r3, #1
 1007494:	e5843000 	str	r3, [r4]
        *out = e;
 1007498:	15856000 	strne	r6, [r5]
 100749c:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (index >= list->size)
 10074a0:	e3a00008 	mov	r0, #8
}
 10074a4:	e12fff1e 	bx	lr
    void *data = node->data;
 10074a8:	e59e6000 	ldr	r6, [lr]
        list->head = node->next;
 10074ac:	e1a0c003 	mov	ip, r3
 10074b0:	e5803004 	str	r3, [r0, #4]
 10074b4:	e1a0300e 	mov	r3, lr
 10074b8:	e1a0e001 	mov	lr, r1
 10074bc:	eaffffe9 	b	1007468 <slist_remove_at+0x4c>

010074c0 <slist_remove_first>:
    if (list->size == 0)
 10074c0:	e5903000 	ldr	r3, [r0]
 10074c4:	e3530000 	cmp	r3, #0
 10074c8:	0a000012 	beq	1007518 <slist_remove_first+0x58>
    void *e = unlinkn(list, list->head, NULL);
 10074cc:	e5903004 	ldr	r3, [r0, #4]
{
 10074d0:	e92d4070 	push	{r4, r5, r6, lr}
 10074d4:	e1a04000 	mov	r4, r0
 10074d8:	e1a05001 	mov	r5, r1
        list->head = node->next;
 10074dc:	e5932004 	ldr	r2, [r3, #4]
    void *data = node->data;
 10074e0:	e5936000 	ldr	r6, [r3]
    if (!node->next)
 10074e4:	e3520000 	cmp	r2, #0
        list->head = node->next;
 10074e8:	e5802004 	str	r2, [r0, #4]
        list->tail = prev;
 10074ec:	05802008 	streq	r2, [r0, #8]
    list->mem_free(node);
 10074f0:	e1a00003 	mov	r0, r3
 10074f4:	e5943014 	ldr	r3, [r4, #20]
 10074f8:	e12fff33 	blx	r3
    list->size--;
 10074fc:	e5943000 	ldr	r3, [r4]
    if (out)
 1007500:	e3550000 	cmp	r5, #0
    return CC_OK;
 1007504:	e3a00000 	mov	r0, #0
    list->size--;
 1007508:	e2433001 	sub	r3, r3, #1
 100750c:	e5843000 	str	r3, [r4]
        *out = e;
 1007510:	15856000 	strne	r6, [r5]
 1007514:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1007518:	e3a00007 	mov	r0, #7
}
 100751c:	e12fff1e 	bx	lr

01007520 <slist_remove_last>:
    if (list->size == 0)
 1007520:	e5903000 	ldr	r3, [r0]
 1007524:	e3530000 	cmp	r3, #0
 1007528:	0a00001d 	beq	10075a4 <slist_remove_last+0x84>
{
 100752c:	e92d4070 	push	{r4, r5, r6, lr}
    for (i = 0; i < index; i++) {
 1007530:	e2532001 	subs	r2, r3, #1
    *node = list->head;
 1007534:	e590e004 	ldr	lr, [r0, #4]
    for (i = 0; i < index; i++) {
 1007538:	e59e3004 	ldr	r3, [lr, #4]
 100753c:	0a00001a 	beq	10075ac <slist_remove_last+0x8c>
 1007540:	e3a0c000 	mov	ip, #0
 1007544:	ea000001 	b	1007550 <slist_remove_last+0x30>
 1007548:	e1a0e003 	mov	lr, r3
 100754c:	e1a03004 	mov	r3, r4
 1007550:	e28cc001 	add	ip, ip, #1
 1007554:	e5934004 	ldr	r4, [r3, #4]
 1007558:	e152000c 	cmp	r2, ip
 100755c:	1afffff9 	bne	1007548 <slist_remove_last+0x28>
    void *data = node->data;
 1007560:	e5936000 	ldr	r6, [r3]
        prev->next = node->next;
 1007564:	e58e4004 	str	r4, [lr, #4]
 1007568:	e593c004 	ldr	ip, [r3, #4]
    if (!node->next)
 100756c:	e1a04000 	mov	r4, r0
 1007570:	e35c0000 	cmp	ip, #0
        list->tail = prev;
 1007574:	0580e008 	streq	lr, [r0, #8]
    list->mem_free(node);
 1007578:	e1a00003 	mov	r0, r3
 100757c:	e5943014 	ldr	r3, [r4, #20]
 1007580:	e1a05001 	mov	r5, r1
 1007584:	e12fff33 	blx	r3
    list->size--;
 1007588:	e5943000 	ldr	r3, [r4]
    if (out)
 100758c:	e3550000 	cmp	r5, #0
    return CC_OK;
 1007590:	e3a00000 	mov	r0, #0
    list->size--;
 1007594:	e2433001 	sub	r3, r3, #1
 1007598:	e5843000 	str	r3, [r4]
        *out = e;
 100759c:	15856000 	strne	r6, [r5]
 10075a0:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10075a4:	e3a00007 	mov	r0, #7
}
 10075a8:	e12fff1e 	bx	lr
    void *data = node->data;
 10075ac:	e59e6000 	ldr	r6, [lr]
        list->head = node->next;
 10075b0:	e1a0c003 	mov	ip, r3
 10075b4:	e5803004 	str	r3, [r0, #4]
 10075b8:	e1a0300e 	mov	r3, lr
 10075bc:	e1a0e002 	mov	lr, r2
 10075c0:	eaffffe9 	b	100756c <slist_remove_last+0x4c>

010075c4 <slist_remove_all>:
    if (list->size == 0)
 10075c4:	e5903000 	ldr	r3, [r0]
 10075c8:	e3530000 	cmp	r3, #0
 10075cc:	0a000011 	beq	1007618 <slist_remove_all+0x54>
{
 10075d0:	e92d4070 	push	{r4, r5, r6, lr}
 10075d4:	e1a04000 	mov	r4, r0
    SNode *n = list->head;
 10075d8:	e5900004 	ldr	r0, [r0, #4]
    while (n) {
 10075dc:	e3500000 	cmp	r0, #0
 10075e0:	0a000007 	beq	1007604 <slist_remove_all+0x40>
        SNode *tmp = n->next;
 10075e4:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 10075e8:	e5943014 	ldr	r3, [r4, #20]
 10075ec:	e12fff33 	blx	r3
        list->size--;
 10075f0:	e5943000 	ldr	r3, [r4]
    while (n) {
 10075f4:	e2550000 	subs	r0, r5, #0
        list->size--;
 10075f8:	e2433001 	sub	r3, r3, #1
 10075fc:	e5843000 	str	r3, [r4]
    while (n) {
 1007600:	1afffff7 	bne	10075e4 <slist_remove_all+0x20>
        list->head = NULL;
 1007604:	e3a03000 	mov	r3, #0
 1007608:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 100760c:	e1a00003 	mov	r0, r3
 1007610:	e5843008 	str	r3, [r4, #8]
}
 1007614:	e8bd8070 	pop	{r4, r5, r6, pc}
    return CC_ERR_VALUE_NOT_FOUND;
 1007618:	e3a00007 	mov	r0, #7
}
 100761c:	e12fff1e 	bx	lr

01007620 <slist_remove_all_cb>:
    if (list->size == 0)
 1007620:	e5903000 	ldr	r3, [r0]
 1007624:	e3530000 	cmp	r3, #0
 1007628:	0a000020 	beq	10076b0 <slist_remove_all_cb+0x90>
{
 100762c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007630:	e1a06001 	mov	r6, r1
    SNode *n = list->head;
 1007634:	e5905004 	ldr	r5, [r0, #4]
 1007638:	e1a04000 	mov	r4, r0
    while (n) {
 100763c:	e3550000 	cmp	r5, #0
 1007640:	0a00000b 	beq	1007674 <slist_remove_all_cb+0x54>
 1007644:	e3510000 	cmp	r1, #0
 1007648:	0a00000e 	beq	1007688 <slist_remove_all_cb+0x68>
        SNode *tmp = n->next;
 100764c:	e8950081 	ldm	r5, {r0, r7}
            cb(n->data);
 1007650:	e12fff36 	blx	r6
        list->mem_free(n);
 1007654:	e1a00005 	mov	r0, r5
 1007658:	e5943014 	ldr	r3, [r4, #20]
 100765c:	e12fff33 	blx	r3
        list->size--;
 1007660:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007664:	e2575000 	subs	r5, r7, #0
        list->size--;
 1007668:	e2433001 	sub	r3, r3, #1
 100766c:	e5843000 	str	r3, [r4]
    while (n) {
 1007670:	1afffff5 	bne	100764c <slist_remove_all_cb+0x2c>
        list->head = NULL;
 1007674:	e3a03000 	mov	r3, #0
 1007678:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 100767c:	e1a00003 	mov	r0, r3
 1007680:	e5843008 	str	r3, [r4, #8]
}
 1007684:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        SNode *tmp = n->next;
 1007688:	e5956004 	ldr	r6, [r5, #4]
        list->mem_free(n);
 100768c:	e1a00005 	mov	r0, r5
 1007690:	e5943014 	ldr	r3, [r4, #20]
 1007694:	e12fff33 	blx	r3
        list->size--;
 1007698:	e5943000 	ldr	r3, [r4]
    while (n) {
 100769c:	e2565000 	subs	r5, r6, #0
        list->size--;
 10076a0:	e2433001 	sub	r3, r3, #1
 10076a4:	e5843000 	str	r3, [r4]
    while (n) {
 10076a8:	1afffff6 	bne	1007688 <slist_remove_all_cb+0x68>
 10076ac:	eafffff0 	b	1007674 <slist_remove_all_cb+0x54>
    return CC_ERR_VALUE_NOT_FOUND;
 10076b0:	e3a00007 	mov	r0, #7
}
 10076b4:	e12fff1e 	bx	lr

010076b8 <slist_replace_at>:
    if (index >= list->size)
 10076b8:	e590c000 	ldr	ip, [r0]
 10076bc:	e152000c 	cmp	r2, ip
 10076c0:	2a00000d 	bcs	10076fc <slist_replace_at+0x44>
    for (i = 0; i < index; i++) {
 10076c4:	e3520000 	cmp	r2, #0
    *node = list->head;
 10076c8:	e590c004 	ldr	ip, [r0, #4]
    for (i = 0; i < index; i++) {
 10076cc:	0a000004 	beq	10076e4 <slist_replace_at+0x2c>
 10076d0:	e3a00000 	mov	r0, #0
 10076d4:	e2800001 	add	r0, r0, #1
        *node = (*node)->next;
 10076d8:	e59cc004 	ldr	ip, [ip, #4]
    for (i = 0; i < index; i++) {
 10076dc:	e1520000 	cmp	r2, r0
 10076e0:	1afffffb 	bne	10076d4 <slist_replace_at+0x1c>
    void *old = node->data;
 10076e4:	e59c2000 	ldr	r2, [ip]
    if (out)
 10076e8:	e3530000 	cmp	r3, #0
    node->data = element;
 10076ec:	e58c1000 	str	r1, [ip]
    return CC_OK;
 10076f0:	e3a00000 	mov	r0, #0
        *out = old;
 10076f4:	15832000 	strne	r2, [r3]
 10076f8:	e12fff1e 	bx	lr
    if (index >= list->size)
 10076fc:	e3a00008 	mov	r0, #8
 1007700:	e12fff1e 	bx	lr

01007704 <slist_get_first>:
    if (list->size == 0)
 1007704:	e5903000 	ldr	r3, [r0]
 1007708:	e3530000 	cmp	r3, #0
    *out = list->head->data;
 100770c:	15903004 	ldrne	r3, [r0, #4]
    return CC_OK;
 1007710:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1007714:	03a00007 	moveq	r0, #7
    *out = list->head->data;
 1007718:	15933000 	ldrne	r3, [r3]
 100771c:	15813000 	strne	r3, [r1]
}
 1007720:	e12fff1e 	bx	lr

01007724 <slist_get_last>:
    if (list->size == 0)
 1007724:	e5903000 	ldr	r3, [r0]
 1007728:	e3530000 	cmp	r3, #0
    *out = list->tail->data;
 100772c:	15903008 	ldrne	r3, [r0, #8]
    return CC_OK;
 1007730:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1007734:	03a00007 	moveq	r0, #7
    *out = list->tail->data;
 1007738:	15933000 	ldrne	r3, [r3]
 100773c:	15813000 	strne	r3, [r1]
}
 1007740:	e12fff1e 	bx	lr

01007744 <slist_get_at>:
    if (index >= list->size)
 1007744:	e5903000 	ldr	r3, [r0]
 1007748:	e1510003 	cmp	r1, r3
 100774c:	2a00000b 	bcs	1007780 <slist_get_at+0x3c>
    for (i = 0; i < index; i++) {
 1007750:	e3510000 	cmp	r1, #0
    *node = list->head;
 1007754:	e5900004 	ldr	r0, [r0, #4]
    for (i = 0; i < index; i++) {
 1007758:	0a000004 	beq	1007770 <slist_get_at+0x2c>
 100775c:	e3a03000 	mov	r3, #0
 1007760:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1007764:	e5900004 	ldr	r0, [r0, #4]
    for (i = 0; i < index; i++) {
 1007768:	e1510003 	cmp	r1, r3
 100776c:	1afffffb 	bne	1007760 <slist_get_at+0x1c>
    *out = node->data;
 1007770:	e5903000 	ldr	r3, [r0]
    return CC_OK;
 1007774:	e3a00000 	mov	r0, #0
    *out = node->data;
 1007778:	e5823000 	str	r3, [r2]
    return CC_OK;
 100777c:	e12fff1e 	bx	lr
    if (index >= list->size)
 1007780:	e3a00008 	mov	r0, #8
}
 1007784:	e12fff1e 	bx	lr

01007788 <slist_size>:
}
 1007788:	e5900000 	ldr	r0, [r0]
 100778c:	e12fff1e 	bx	lr

01007790 <slist_reverse>:
    if (list->size == 0 || list->size == 1)
 1007790:	e5903000 	ldr	r3, [r0]
 1007794:	e3530001 	cmp	r3, #1
 1007798:	912fff1e 	bxls	lr
    SNode *flip = list->head;
 100779c:	e5903004 	ldr	r3, [r0, #4]
    while (flip) {
 10077a0:	e3530000 	cmp	r3, #0
    list->tail = list->head;
 10077a4:	e5803008 	str	r3, [r0, #8]
    while (flip) {
 10077a8:	0a000007 	beq	10077cc <slist_reverse+0x3c>
    SNode *prev = NULL;
 10077ac:	e3a01000 	mov	r1, #0
 10077b0:	ea000000 	b	10077b8 <slist_reverse+0x28>
 10077b4:	e1a03002 	mov	r3, r2
        next = flip->next;
 10077b8:	e5932004 	ldr	r2, [r3, #4]
        flip->next = prev;
 10077bc:	e5831004 	str	r1, [r3, #4]
        flip = next;
 10077c0:	e1a01003 	mov	r1, r3
    while (flip) {
 10077c4:	e3520000 	cmp	r2, #0
 10077c8:	1afffff9 	bne	10077b4 <slist_reverse+0x24>
    list->head = prev;
 10077cc:	e5803004 	str	r3, [r0, #4]
}
 10077d0:	e12fff1e 	bx	lr

010077d4 <slist_sublist>:
    if (from > to || to >= list->size)
 10077d4:	e1510002 	cmp	r1, r2
 10077d8:	8a000044 	bhi	10078f0 <slist_sublist+0x11c>
{
 10077dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10077e0:	e1a07002 	mov	r7, r2
    if (from > to || to >= list->size)
 10077e4:	e5909000 	ldr	r9, [r0]
 10077e8:	e1a06000 	mov	r6, r0
 10077ec:	e1590002 	cmp	r9, r2
 10077f0:	9a00003c 	bls	10078e8 <slist_sublist+0x114>
    SList *list = conf->mem_calloc(1, sizeof(SList));
 10077f4:	e1a05001 	mov	r5, r1
 10077f8:	e3a00001 	mov	r0, #1
 10077fc:	e3a01018 	mov	r1, #24
 1007800:	e1a08003 	mov	r8, r3
 1007804:	fa0050eb 	blx	101bbb8 <calloc>
    if (!list)
 1007808:	e2504000 	subs	r4, r0, #0
 100780c:	0a000039 	beq	10078f8 <slist_sublist+0x124>
    list->mem_alloc  = conf->mem_alloc;
 1007810:	e30c37b9 	movw	r3, #51129	; 0xc7b9
    list->mem_calloc = conf->mem_calloc;
 1007814:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    list->mem_alloc  = conf->mem_alloc;
 1007818:	e3403101 	movt	r3, #257	; 0x101
    if (index >= list->size)
 100781c:	e1590005 	cmp	r9, r5
    list->mem_alloc  = conf->mem_alloc;
 1007820:	e584300c 	str	r3, [r4, #12]
    list->mem_free   = conf->mem_free;
 1007824:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    list->mem_calloc = conf->mem_calloc;
 1007828:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 100782c:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1007830:	e5842010 	str	r2, [r4, #16]
    list->mem_free   = conf->mem_free;
 1007834:	e5843014 	str	r3, [r4, #20]
    if (index >= list->size)
 1007838:	9a000030 	bls	1007900 <slist_sublist+0x12c>
    for (i = 0; i < index; i++) {
 100783c:	e3550000 	cmp	r5, #0
    *node = list->head;
 1007840:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < index; i++) {
 1007844:	0a000004 	beq	100785c <slist_sublist+0x88>
 1007848:	e3a03000 	mov	r3, #0
 100784c:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1007850:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < index; i++) {
 1007854:	e1550003 	cmp	r5, r3
 1007858:	1afffffb 	bne	100784c <slist_sublist+0x78>
    if (list->size == 0)
 100785c:	e30b3bb9 	movw	r3, #48057	; 0xbbb9
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007860:	e3a09001 	mov	r9, #1
    if (list->size == 0)
 1007864:	e3403101 	movt	r3, #257	; 0x101
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007868:	e3a01008 	mov	r1, #8
 100786c:	e3a00001 	mov	r0, #1
        status = slist_add(sub, node->data);
 1007870:	e596a000 	ldr	sl, [r6]
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007874:	e12fff33 	blx	r3
    if (!node)
 1007878:	e3500000 	cmp	r0, #0
    if (list->size == 0)
 100787c:	e5943000 	ldr	r3, [r4]
    for (i = from; i <= to; i++) {
 1007880:	e2852001 	add	r2, r5, #1
    if (!node)
 1007884:	0a000033 	beq	1007958 <slist_sublist+0x184>
    if (list->size == 0) {
 1007888:	e3530000 	cmp	r3, #0
    node->data = element;
 100788c:	e580a000 	str	sl, [r0]
    list->size++;
 1007890:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1007894:	1a000008 	bne	10078bc <slist_sublist+0xe8>
    for (i = from; i <= to; i++) {
 1007898:	e1570005 	cmp	r7, r5
        list->head       = node;
 100789c:	e5840004 	str	r0, [r4, #4]
        list->tail       = node;
 10078a0:	e5840008 	str	r0, [r4, #8]
    list->size++;
 10078a4:	e5849000 	str	r9, [r4]
        node = node->next;
 10078a8:	e5966004 	ldr	r6, [r6, #4]
    for (i = from; i <= to; i++) {
 10078ac:	0a00000a 	beq	10078dc <slist_sublist+0x108>
    if (list->size == 0)
 10078b0:	e1a05002 	mov	r5, r2
 10078b4:	e5943010 	ldr	r3, [r4, #16]
 10078b8:	eaffffea 	b	1007868 <slist_sublist+0x94>
        list->tail->next = node;
 10078bc:	e5941008 	ldr	r1, [r4, #8]
    for (i = from; i <= to; i++) {
 10078c0:	e1570005 	cmp	r7, r5
 10078c4:	e2852001 	add	r2, r5, #1
        list->tail->next = node;
 10078c8:	e5810004 	str	r0, [r1, #4]
        list->tail       = node;
 10078cc:	e5840008 	str	r0, [r4, #8]
        node = node->next;
 10078d0:	e5966004 	ldr	r6, [r6, #4]
    list->size++;
 10078d4:	e5843000 	str	r3, [r4]
    for (i = from; i <= to; i++) {
 10078d8:	1afffff4 	bne	10078b0 <slist_sublist+0xdc>
    *out = sub;
 10078dc:	e5884000 	str	r4, [r8]
    return CC_OK;
 10078e0:	e3a00000 	mov	r0, #0
 10078e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_INVALID_RANGE;
 10078e8:	e3a00003 	mov	r0, #3
 10078ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 10078f0:	e3a00003 	mov	r0, #3
}
 10078f4:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 10078f8:	e3a00001 	mov	r0, #1
}
 10078fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (list->size == 0)
 1007900:	e5942000 	ldr	r2, [r4]
 1007904:	e3520000 	cmp	r2, #0
 1007908:	0a00000e 	beq	1007948 <slist_sublist+0x174>
    SNode *n = list->head;
 100790c:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007910:	e3500000 	cmp	r0, #0
 1007914:	0a000008 	beq	100793c <slist_sublist+0x168>
        SNode *tmp = n->next;
 1007918:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 100791c:	e12fff33 	blx	r3
        list->size--;
 1007920:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007924:	e3550000 	cmp	r5, #0
 1007928:	e1a00005 	mov	r0, r5
        list->size--;
 100792c:	e2433001 	sub	r3, r3, #1
 1007930:	e5843000 	str	r3, [r4]
 1007934:	e5943014 	ldr	r3, [r4, #20]
    while (n) {
 1007938:	1afffff6 	bne	1007918 <slist_sublist+0x144>
        list->head = NULL;
 100793c:	e3a02000 	mov	r2, #0
 1007940:	e5842004 	str	r2, [r4, #4]
        list->tail = NULL;
 1007944:	e5842008 	str	r2, [r4, #8]
    list->mem_free(list);
 1007948:	e1a00004 	mov	r0, r4
 100794c:	e12fff33 	blx	r3
        return status;
 1007950:	e3a00008 	mov	r0, #8
 1007954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (list->size == 0)
 1007958:	e3530000 	cmp	r3, #0
 100795c:	0a00000d 	beq	1007998 <slist_sublist+0x1c4>
    SNode *n = list->head;
 1007960:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007964:	e3500000 	cmp	r0, #0
 1007968:	0a000007 	beq	100798c <slist_sublist+0x1b8>
        SNode *tmp = n->next;
 100796c:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 1007970:	e5943014 	ldr	r3, [r4, #20]
 1007974:	e12fff33 	blx	r3
        list->size--;
 1007978:	e5943000 	ldr	r3, [r4]
    while (n) {
 100797c:	e2550000 	subs	r0, r5, #0
        list->size--;
 1007980:	e2433001 	sub	r3, r3, #1
 1007984:	e5843000 	str	r3, [r4]
    while (n) {
 1007988:	1afffff7 	bne	100796c <slist_sublist+0x198>
        list->head = NULL;
 100798c:	e3a03000 	mov	r3, #0
 1007990:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1007994:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1007998:	e1a00004 	mov	r0, r4
 100799c:	e5943014 	ldr	r3, [r4, #20]
 10079a0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10079a4:	e3a00001 	mov	r0, #1
            return status;
 10079a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010079ac <slist_copy_shallow>:
{
 10079ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10079b0:	e1a05000 	mov	r5, r0
 10079b4:	e1a06001 	mov	r6, r1
    SList *list = conf->mem_calloc(1, sizeof(SList));
 10079b8:	e3a00001 	mov	r0, #1
 10079bc:	e3a01018 	mov	r1, #24
 10079c0:	fa00507c 	blx	101bbb8 <calloc>
    if (!list)
 10079c4:	e2504000 	subs	r4, r0, #0
 10079c8:	0a00003e 	beq	1007ac8 <slist_copy_shallow+0x11c>
    SNode *node = list->head;
 10079cc:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 10079d0:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    list->mem_calloc = conf->mem_calloc;
 10079d4:	e30b3bb9 	movw	r3, #48057	; 0xbbb9
    list->mem_free   = conf->mem_free;
 10079d8:	e30c27c9 	movw	r2, #51145	; 0xc7c9
    list->mem_alloc  = conf->mem_alloc;
 10079dc:	e3401101 	movt	r1, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 10079e0:	e3403101 	movt	r3, #257	; 0x101
    while (node) {
 10079e4:	e3550000 	cmp	r5, #0
    list->mem_free   = conf->mem_free;
 10079e8:	e3402101 	movt	r2, #257	; 0x101
    list->mem_alloc  = conf->mem_alloc;
 10079ec:	e584100c 	str	r1, [r4, #12]
    list->mem_calloc = conf->mem_calloc;
 10079f0:	e5843010 	str	r3, [r4, #16]
    list->mem_free   = conf->mem_free;
 10079f4:	e5842014 	str	r2, [r4, #20]
    while (node) {
 10079f8:	0a00001a 	beq	1007a68 <slist_copy_shallow+0xbc>
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 10079fc:	e3a07001 	mov	r7, #1
 1007a00:	e3a01008 	mov	r1, #8
 1007a04:	e3a00001 	mov	r0, #1
        status = slist_add(copy, node->data);
 1007a08:	e5958000 	ldr	r8, [r5]
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007a0c:	e12fff33 	blx	r3
    if (!node)
 1007a10:	e3500000 	cmp	r0, #0
    if (list->size == 0)
 1007a14:	e5943000 	ldr	r3, [r4]
    if (!node)
 1007a18:	0a000015 	beq	1007a74 <slist_copy_shallow+0xc8>
    if (list->size == 0) {
 1007a1c:	e3530000 	cmp	r3, #0
    node->data = element;
 1007a20:	e5808000 	str	r8, [r0]
    list->size++;
 1007a24:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1007a28:	1a000007 	bne	1007a4c <slist_copy_shallow+0xa0>
        node = node->next;
 1007a2c:	e5955004 	ldr	r5, [r5, #4]
        list->head       = node;
 1007a30:	e5840004 	str	r0, [r4, #4]
        list->tail       = node;
 1007a34:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1007a38:	e3550000 	cmp	r5, #0
    list->size++;
 1007a3c:	e5847000 	str	r7, [r4]
    while (node) {
 1007a40:	0a000008 	beq	1007a68 <slist_copy_shallow+0xbc>
 1007a44:	e5943010 	ldr	r3, [r4, #16]
 1007a48:	eaffffec 	b	1007a00 <slist_copy_shallow+0x54>
        list->tail->next = node;
 1007a4c:	e5942008 	ldr	r2, [r4, #8]
 1007a50:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 1007a54:	e5955004 	ldr	r5, [r5, #4]
        list->tail       = node;
 1007a58:	e5840008 	str	r0, [r4, #8]
    list->size++;
 1007a5c:	e5843000 	str	r3, [r4]
    while (node) {
 1007a60:	e3550000 	cmp	r5, #0
 1007a64:	1afffff6 	bne	1007a44 <slist_copy_shallow+0x98>
    *out = copy;
 1007a68:	e5864000 	str	r4, [r6]
    return CC_OK;
 1007a6c:	e3a00000 	mov	r0, #0
 1007a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (list->size == 0)
 1007a74:	e3530000 	cmp	r3, #0
 1007a78:	0a00000d 	beq	1007ab4 <slist_copy_shallow+0x108>
    SNode *n = list->head;
 1007a7c:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007a80:	e3500000 	cmp	r0, #0
 1007a84:	0a000007 	beq	1007aa8 <slist_copy_shallow+0xfc>
        SNode *tmp = n->next;
 1007a88:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 1007a8c:	e5943014 	ldr	r3, [r4, #20]
 1007a90:	e12fff33 	blx	r3
        list->size--;
 1007a94:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007a98:	e2550000 	subs	r0, r5, #0
        list->size--;
 1007a9c:	e2433001 	sub	r3, r3, #1
 1007aa0:	e5843000 	str	r3, [r4]
    while (n) {
 1007aa4:	1afffff7 	bne	1007a88 <slist_copy_shallow+0xdc>
        list->head = NULL;
 1007aa8:	e3a03000 	mov	r3, #0
 1007aac:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1007ab0:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1007ab4:	e1a00004 	mov	r0, r4
 1007ab8:	e5943014 	ldr	r3, [r4, #20]
 1007abc:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1007ac0:	e3a00001 	mov	r0, #1
            return status;
 1007ac4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1007ac8:	e3a00001 	mov	r0, #1
}
 1007acc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007ad0 <slist_copy_deep>:
{
 1007ad0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1007ad4:	e1a05000 	mov	r5, r0
 1007ad8:	e1a06001 	mov	r6, r1
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1007adc:	e3a00001 	mov	r0, #1
 1007ae0:	e3a01018 	mov	r1, #24
{
 1007ae4:	e1a08002 	mov	r8, r2
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1007ae8:	fa005032 	blx	101bbb8 <calloc>
    if (!list)
 1007aec:	e2504000 	subs	r4, r0, #0
 1007af0:	0a00003f 	beq	1007bf4 <slist_copy_deep+0x124>
    SNode *node = list->head;
 1007af4:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 1007af8:	e30c37b9 	movw	r3, #51129	; 0xc7b9
 1007afc:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1007b00:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    list->mem_alloc  = conf->mem_alloc;
 1007b04:	e584300c 	str	r3, [r4, #12]
    list->mem_free   = conf->mem_free;
 1007b08:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    while (node) {
 1007b0c:	e3550000 	cmp	r5, #0
    list->mem_calloc = conf->mem_calloc;
 1007b10:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1007b14:	e3403101 	movt	r3, #257	; 0x101
 1007b18:	e1c421f0 	strd	r2, [r4, #16]
    while (node) {
 1007b1c:	0a000014 	beq	1007b74 <slist_copy_deep+0xa4>
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007b20:	e3a07001 	mov	r7, #1
        status = slist_add(copy, cp(node->data));
 1007b24:	e5950000 	ldr	r0, [r5]
 1007b28:	e12fff36 	blx	r6
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007b2c:	e5943010 	ldr	r3, [r4, #16]
        status = slist_add(copy, cp(node->data));
 1007b30:	e1a09000 	mov	r9, r0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007b34:	e3a01008 	mov	r1, #8
 1007b38:	e3a00001 	mov	r0, #1
 1007b3c:	e12fff33 	blx	r3
    if (!node)
 1007b40:	e3500000 	cmp	r0, #0
    if (list->size == 0)
 1007b44:	e5943000 	ldr	r3, [r4]
    if (!node)
 1007b48:	0a000014 	beq	1007ba0 <slist_copy_deep+0xd0>
    if (list->size == 0) {
 1007b4c:	e3530000 	cmp	r3, #0
    node->data = element;
 1007b50:	e5809000 	str	r9, [r0]
    list->size++;
 1007b54:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1007b58:	1a000008 	bne	1007b80 <slist_copy_deep+0xb0>
        node = node->next;
 1007b5c:	e5955004 	ldr	r5, [r5, #4]
        list->head       = node;
 1007b60:	e5840004 	str	r0, [r4, #4]
        list->tail       = node;
 1007b64:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1007b68:	e3550000 	cmp	r5, #0
    list->size++;
 1007b6c:	e5847000 	str	r7, [r4]
    while (node) {
 1007b70:	1affffeb 	bne	1007b24 <slist_copy_deep+0x54>
    *out = copy;
 1007b74:	e5884000 	str	r4, [r8]
    return CC_OK;
 1007b78:	e3a00000 	mov	r0, #0
 1007b7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list->tail->next = node;
 1007b80:	e5942008 	ldr	r2, [r4, #8]
 1007b84:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 1007b88:	e5955004 	ldr	r5, [r5, #4]
        list->tail       = node;
 1007b8c:	e5840008 	str	r0, [r4, #8]
    list->size++;
 1007b90:	e5843000 	str	r3, [r4]
    while (node) {
 1007b94:	e3550000 	cmp	r5, #0
 1007b98:	1affffe1 	bne	1007b24 <slist_copy_deep+0x54>
 1007b9c:	eafffff4 	b	1007b74 <slist_copy_deep+0xa4>
    if (list->size == 0)
 1007ba0:	e3530000 	cmp	r3, #0
 1007ba4:	0a00000d 	beq	1007be0 <slist_copy_deep+0x110>
    SNode *n = list->head;
 1007ba8:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007bac:	e3500000 	cmp	r0, #0
 1007bb0:	0a000007 	beq	1007bd4 <slist_copy_deep+0x104>
        SNode *tmp = n->next;
 1007bb4:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 1007bb8:	e5943014 	ldr	r3, [r4, #20]
 1007bbc:	e12fff33 	blx	r3
        list->size--;
 1007bc0:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007bc4:	e2550000 	subs	r0, r5, #0
        list->size--;
 1007bc8:	e2433001 	sub	r3, r3, #1
 1007bcc:	e5843000 	str	r3, [r4]
    while (n) {
 1007bd0:	1afffff7 	bne	1007bb4 <slist_copy_deep+0xe4>
        list->head = NULL;
 1007bd4:	e3a03000 	mov	r3, #0
 1007bd8:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1007bdc:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1007be0:	e1a00004 	mov	r0, r4
 1007be4:	e5943014 	ldr	r3, [r4, #20]
 1007be8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1007bec:	e3a00001 	mov	r0, #1
            return status;
 1007bf0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1007bf4:	e3a00001 	mov	r0, #1
}
 1007bf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01007bfc <slist_contains>:
    SNode *node = list->head;
 1007bfc:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1007c00:	e3530000 	cmp	r3, #0
 1007c04:	0a000007 	beq	1007c28 <slist_contains+0x2c>
    size_t e_count = 0;
 1007c08:	e3a00000 	mov	r0, #0
        if (node->data == element)
 1007c0c:	e5932000 	ldr	r2, [r3]
        node = node->next;
 1007c10:	e5933004 	ldr	r3, [r3, #4]
        if (node->data == element)
 1007c14:	e1510002 	cmp	r1, r2
            e_count++;
 1007c18:	02800001 	addeq	r0, r0, #1
    while (node) {
 1007c1c:	e3530000 	cmp	r3, #0
 1007c20:	1afffff9 	bne	1007c0c <slist_contains+0x10>
 1007c24:	e12fff1e 	bx	lr
    size_t e_count = 0;
 1007c28:	e1a00003 	mov	r0, r3
}
 1007c2c:	e12fff1e 	bx	lr

01007c30 <slist_contains_value>:
{
 1007c30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    SNode *node = list->head;
 1007c34:	e5904004 	ldr	r4, [r0, #4]
    while (node) {
 1007c38:	e3540000 	cmp	r4, #0
 1007c3c:	0a00000c 	beq	1007c74 <slist_contains_value+0x44>
 1007c40:	e1a06002 	mov	r6, r2
 1007c44:	e1a05001 	mov	r5, r1
    size_t e_count = 0;
 1007c48:	e3a07000 	mov	r7, #0
        if (cmp(node->data, element) == 0)
 1007c4c:	e5940000 	ldr	r0, [r4]
 1007c50:	e1a01005 	mov	r1, r5
 1007c54:	e12fff36 	blx	r6
        node = node->next;
 1007c58:	e5944004 	ldr	r4, [r4, #4]
        if (cmp(node->data, element) == 0)
 1007c5c:	e3500000 	cmp	r0, #0
            e_count++;
 1007c60:	02877001 	addeq	r7, r7, #1
    while (node) {
 1007c64:	e3540000 	cmp	r4, #0
 1007c68:	1afffff7 	bne	1007c4c <slist_contains_value+0x1c>
}
 1007c6c:	e1a00007 	mov	r0, r7
 1007c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    size_t e_count = 0;
 1007c74:	e1a07004 	mov	r7, r4
}
 1007c78:	e1a00007 	mov	r0, r7
 1007c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007c80 <slist_index_of>:
    SNode *node = list->head;
 1007c80:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1007c84:	e3530000 	cmp	r3, #0
 1007c88:	0a00000b 	beq	1007cbc <slist_index_of+0x3c>
        if (node->data == element) {
 1007c8c:	e5930000 	ldr	r0, [r3]
 1007c90:	e1510000 	cmp	r1, r0
    size_t i = 0;
 1007c94:	e3a00000 	mov	r0, #0
        if (node->data == element) {
 1007c98:	1a000003 	bne	1007cac <slist_index_of+0x2c>
 1007c9c:	ea000008 	b	1007cc4 <slist_index_of+0x44>
 1007ca0:	e593c000 	ldr	ip, [r3]
 1007ca4:	e15c0001 	cmp	ip, r1
 1007ca8:	0a000005 	beq	1007cc4 <slist_index_of+0x44>
        node = node->next;
 1007cac:	e5933004 	ldr	r3, [r3, #4]
        i++;
 1007cb0:	e2800001 	add	r0, r0, #1
    while (node) {
 1007cb4:	e3530000 	cmp	r3, #0
 1007cb8:	1afffff8 	bne	1007ca0 <slist_index_of+0x20>
    return CC_ERR_OUT_OF_RANGE;
 1007cbc:	e3a00008 	mov	r0, #8
}
 1007cc0:	e12fff1e 	bx	lr
            *index = i;
 1007cc4:	e5820000 	str	r0, [r2]
            return CC_OK;
 1007cc8:	e3a00000 	mov	r0, #0
 1007ccc:	e12fff1e 	bx	lr

01007cd0 <slist_to_array>:
{
 1007cd0:	e92d4070 	push	{r4, r5, r6, lr}
 1007cd4:	e1a04000 	mov	r4, r0
    void **array = list->mem_alloc(list->size * sizeof(void*));
 1007cd8:	e5900000 	ldr	r0, [r0]
{
 1007cdc:	e1a05001 	mov	r5, r1
    void **array = list->mem_alloc(list->size * sizeof(void*));
 1007ce0:	e594300c 	ldr	r3, [r4, #12]
 1007ce4:	e1a00100 	lsl	r0, r0, #2
 1007ce8:	e12fff33 	blx	r3
    if (!array)
 1007cec:	e3500000 	cmp	r0, #0
 1007cf0:	0a00000d 	beq	1007d2c <slist_to_array+0x5c>
    for (i = 0; i < list->size; i++) {
 1007cf4:	e594e000 	ldr	lr, [r4]
    SNode *node = list->head;
 1007cf8:	e5943004 	ldr	r3, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1007cfc:	e35e0000 	cmp	lr, #0
 1007d00:	0a000006 	beq	1007d20 <slist_to_array+0x50>
 1007d04:	e080e10e 	add	lr, r0, lr, lsl #2
 1007d08:	e1a02000 	mov	r2, r0
        array[i] = node->data;
 1007d0c:	e593c000 	ldr	ip, [r3]
 1007d10:	e482c004 	str	ip, [r2], #4
    for (i = 0; i < list->size; i++) {
 1007d14:	e152000e 	cmp	r2, lr
        node = node->next;
 1007d18:	e5933004 	ldr	r3, [r3, #4]
    for (i = 0; i < list->size; i++) {
 1007d1c:	1afffffa 	bne	1007d0c <slist_to_array+0x3c>
    *out = array;
 1007d20:	e5850000 	str	r0, [r5]
    return CC_OK;
 1007d24:	e3a00000 	mov	r0, #0
 1007d28:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1007d2c:	e3a00001 	mov	r0, #1
}
 1007d30:	e8bd8070 	pop	{r4, r5, r6, pc}

01007d34 <slist_sort>:
    if (list->size == 1)
 1007d34:	e5902000 	ldr	r2, [r0]
 1007d38:	e3520001 	cmp	r2, #1
 1007d3c:	0a000025 	beq	1007dd8 <slist_sort+0xa4>
{
 1007d40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007d44:	e1a05000 	mov	r5, r0
    void **array = list->mem_alloc(list->size * sizeof(void*));
 1007d48:	e595300c 	ldr	r3, [r5, #12]
 1007d4c:	e1a00102 	lsl	r0, r2, #2
 1007d50:	e1a07001 	mov	r7, r1
 1007d54:	e12fff33 	blx	r3
    if (!array)
 1007d58:	e2506000 	subs	r6, r0, #0
 1007d5c:	0a00001f 	beq	1007de0 <slist_sort+0xac>
    SNode *node = list->head;
 1007d60:	e8950012 	ldm	r5, {r1, r4}
    for (i = 0; i < list->size; i++) {
 1007d64:	e3510000 	cmp	r1, #0
 1007d68:	0a000007 	beq	1007d8c <slist_sort+0x58>
 1007d6c:	e086c101 	add	ip, r6, r1, lsl #2
 1007d70:	e1a02006 	mov	r2, r6
        array[i] = node->data;
 1007d74:	e5940000 	ldr	r0, [r4]
 1007d78:	e4820004 	str	r0, [r2], #4
    for (i = 0; i < list->size; i++) {
 1007d7c:	e15c0002 	cmp	ip, r2
        node = node->next;
 1007d80:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1007d84:	1afffffa 	bne	1007d74 <slist_sort+0x40>
 1007d88:	e5954004 	ldr	r4, [r5, #4]
    qsort(elements, list->size, sizeof(void*), cmp);
 1007d8c:	e1a03007 	mov	r3, r7
 1007d90:	e3a02004 	mov	r2, #4
 1007d94:	e1a00006 	mov	r0, r6
 1007d98:	fa005740 	blx	101daa0 <qsort>
    for (i = 0; i < list->size; i++) {
 1007d9c:	e5951000 	ldr	r1, [r5]
 1007da0:	e3510000 	cmp	r1, #0
 1007da4:	10861101 	addne	r1, r6, r1, lsl #2
 1007da8:	11a03006 	movne	r3, r6
 1007dac:	0a000004 	beq	1007dc4 <slist_sort+0x90>
        node->data = elements[i];
 1007db0:	e4932004 	ldr	r2, [r3], #4
    for (i = 0; i < list->size; i++) {
 1007db4:	e1530001 	cmp	r3, r1
        node->data = elements[i];
 1007db8:	e5842000 	str	r2, [r4]
        node       = node->next;
 1007dbc:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1007dc0:	1afffffa 	bne	1007db0 <slist_sort+0x7c>
    list->mem_free(elements);
 1007dc4:	e1a00006 	mov	r0, r6
 1007dc8:	e5953014 	ldr	r3, [r5, #20]
 1007dcc:	e12fff33 	blx	r3
    return CC_OK;
 1007dd0:	e3a00000 	mov	r0, #0
 1007dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_OK;
 1007dd8:	e3a00000 	mov	r0, #0
}
 1007ddc:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1007de0:	e3a00001 	mov	r0, #1
}
 1007de4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007de8 <slist_foreach>:
{
 1007de8:	e92d4070 	push	{r4, r5, r6, lr}
    SNode *n = list->head;
 1007dec:	e5904004 	ldr	r4, [r0, #4]
    while (n) {
 1007df0:	e3540000 	cmp	r4, #0
 1007df4:	08bd8070 	popeq	{r4, r5, r6, pc}
 1007df8:	e1a05001 	mov	r5, r1
        op(n->data);
 1007dfc:	e5940000 	ldr	r0, [r4]
 1007e00:	e12fff35 	blx	r5
        n = n->next;
 1007e04:	e5944004 	ldr	r4, [r4, #4]
    while (n) {
 1007e08:	e3540000 	cmp	r4, #0
 1007e0c:	1afffffa 	bne	1007dfc <slist_foreach+0x14>
 1007e10:	e8bd8070 	pop	{r4, r5, r6, pc}

01007e14 <slist_filter>:
  if (slist_size(list) == 0)
 1007e14:	e5903000 	ldr	r3, [r0]
 1007e18:	e3530000 	cmp	r3, #0
 1007e1c:	0a00002d 	beq	1007ed8 <slist_filter+0xc4>
{
 1007e20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007e24:	e1a06001 	mov	r6, r1
 1007e28:	e1a04000 	mov	r4, r0
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1007e2c:	e3a01018 	mov	r1, #24
 1007e30:	e3a00001 	mov	r0, #1
 1007e34:	e1a07002 	mov	r7, r2
 1007e38:	fa004f5e 	blx	101bbb8 <calloc>
    if (!list)
 1007e3c:	e2505000 	subs	r5, r0, #0
 1007e40:	0a000026 	beq	1007ee0 <slist_filter+0xcc>
    SNode *curr = list->head;
 1007e44:	e5944004 	ldr	r4, [r4, #4]
    list->mem_alloc  = conf->mem_alloc;
 1007e48:	e30c37b9 	movw	r3, #51129	; 0xc7b9
 1007e4c:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1007e50:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    list->mem_alloc  = conf->mem_alloc;
 1007e54:	e585300c 	str	r3, [r5, #12]
    list->mem_free   = conf->mem_free;
 1007e58:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    while (curr) {
 1007e5c:	e3540000 	cmp	r4, #0
    list->mem_calloc = conf->mem_calloc;
 1007e60:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1007e64:	e3403101 	movt	r3, #257	; 0x101
 1007e68:	e1c521f0 	strd	r2, [r5, #16]
    while (curr) {
 1007e6c:	0a000016 	beq	1007ecc <slist_filter+0xb8>
        if (pred(curr->data)) {
 1007e70:	e5940000 	ldr	r0, [r4]
 1007e74:	e12fff36 	blx	r6
 1007e78:	e3500000 	cmp	r0, #0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007e7c:	e3a01008 	mov	r1, #8
 1007e80:	e3a00001 	mov	r0, #1
        if (pred(curr->data)) {
 1007e84:	0a00000d 	beq	1007ec0 <slist_filter+0xac>
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007e88:	e5953010 	ldr	r3, [r5, #16]
	  slist_add(filtered, curr->data);
 1007e8c:	e5948000 	ldr	r8, [r4]
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007e90:	e12fff33 	blx	r3
    if (!node)
 1007e94:	e3500000 	cmp	r0, #0
 1007e98:	0a000008 	beq	1007ec0 <slist_filter+0xac>
    if (list->size == 0) {
 1007e9c:	e5953000 	ldr	r3, [r5]
    node->data = element;
 1007ea0:	e5808000 	str	r8, [r0]
    if (list->size == 0) {
 1007ea4:	e3530000 	cmp	r3, #0
    list->size++;
 1007ea8:	e2833001 	add	r3, r3, #1
        list->tail->next = node;
 1007eac:	15952008 	ldrne	r2, [r5, #8]
        list->head       = node;
 1007eb0:	05850004 	streq	r0, [r5, #4]
        list->tail->next = node;
 1007eb4:	15820004 	strne	r0, [r2, #4]
        list->tail       = node;
 1007eb8:	e5850008 	str	r0, [r5, #8]
    list->size++;
 1007ebc:	e5853000 	str	r3, [r5]
        curr = curr->next;
 1007ec0:	e5944004 	ldr	r4, [r4, #4]
    while (curr) {
 1007ec4:	e3540000 	cmp	r4, #0
 1007ec8:	1affffe8 	bne	1007e70 <slist_filter+0x5c>
    *out = filtered;
 1007ecc:	e5875000 	str	r5, [r7]
    return CC_OK;
 1007ed0:	e3a00000 	mov	r0, #0
 1007ed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1007ed8:	e3a00008 	mov	r0, #8
}
 1007edc:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1007ee0:	e3a00001 	mov	r0, #1
}
 1007ee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007ee8 <slist_filter_mut>:
    if (slist_size(list) == 0)
 1007ee8:	e5903000 	ldr	r3, [r0]
 1007eec:	e3530000 	cmp	r3, #0
 1007ef0:	0a00001c 	beq	1007f68 <slist_filter_mut+0x80>
{
 1007ef4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    SNode *curr = list->head;
 1007ef8:	e5904004 	ldr	r4, [r0, #4]
    while (curr) {
 1007efc:	e3540000 	cmp	r4, #0
 1007f00:	11a08001 	movne	r8, r1
 1007f04:	11a06000 	movne	r6, r0
    SNode *next = NULL, *prev =NULL;
 1007f08:	13a07000 	movne	r7, #0
    while (curr) {
 1007f0c:	0a000013 	beq	1007f60 <slist_filter_mut+0x78>
        next = curr->next;
 1007f10:	e8940021 	ldm	r4, {r0, r5}
        if (!pred(curr->data)) {
 1007f14:	e12fff38 	blx	r8
 1007f18:	e3500000 	cmp	r0, #0
 1007f1c:	11a07004 	movne	r7, r4
 1007f20:	1a00000c 	bne	1007f58 <slist_filter_mut+0x70>
        prev->next = node->next;
 1007f24:	e5943004 	ldr	r3, [r4, #4]
    if (prev)
 1007f28:	e3570000 	cmp	r7, #0
    list->mem_free(node);
 1007f2c:	e1a00004 	mov	r0, r4
        prev->next = node->next;
 1007f30:	15873004 	strne	r3, [r7, #4]
 1007f34:	15943004 	ldrne	r3, [r4, #4]
        list->head = node->next;
 1007f38:	05863004 	streq	r3, [r6, #4]
    if (!node->next)
 1007f3c:	e3530000 	cmp	r3, #0
    list->mem_free(node);
 1007f40:	e5963014 	ldr	r3, [r6, #20]
        list->tail = prev;
 1007f44:	05867008 	streq	r7, [r6, #8]
    list->mem_free(node);
 1007f48:	e12fff33 	blx	r3
    list->size--;
 1007f4c:	e5963000 	ldr	r3, [r6]
 1007f50:	e2433001 	sub	r3, r3, #1
 1007f54:	e5863000 	str	r3, [r6]
    while (curr) {
 1007f58:	e2554000 	subs	r4, r5, #0
 1007f5c:	1affffeb 	bne	1007f10 <slist_filter_mut+0x28>
    return CC_OK;
 1007f60:	e3a00000 	mov	r0, #0
}
 1007f64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1007f68:	e3a00008 	mov	r0, #8
}
 1007f6c:	e12fff1e 	bx	lr

01007f70 <slist_iter_init>:
    iter->next    = list->head;
 1007f70:	e5912004 	ldr	r2, [r1, #4]
    iter->index   = 0;
 1007f74:	e3a03000 	mov	r3, #0
    iter->list    = list;
 1007f78:	e5801004 	str	r1, [r0, #4]
    iter->index   = 0;
 1007f7c:	e5803000 	str	r3, [r0]
    iter->current = NULL;
 1007f80:	e1c020f8 	strd	r2, [r0, #8]
    iter->prev    = NULL;
 1007f84:	e5803010 	str	r3, [r0, #16]
}
 1007f88:	e12fff1e 	bx	lr

01007f8c <slist_iter_remove>:
    if (!iter->current)
 1007f8c:	e590300c 	ldr	r3, [r0, #12]
 1007f90:	e3530000 	cmp	r3, #0
 1007f94:	0a00001d 	beq	1008010 <slist_iter_remove+0x84>
    void *e = unlinkn(iter->list, iter->current, iter->prev);
 1007f98:	e590c010 	ldr	ip, [r0, #16]
 1007f9c:	e5932004 	ldr	r2, [r3, #4]
{
 1007fa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007fa4:	e1a04000 	mov	r4, r0
    if (prev)
 1007fa8:	e35c0000 	cmp	ip, #0
    void *e = unlinkn(iter->list, iter->current, iter->prev);
 1007fac:	e5906004 	ldr	r6, [r0, #4]
    list->mem_free(node);
 1007fb0:	e1a00003 	mov	r0, r3
 1007fb4:	e1a05001 	mov	r5, r1
    void *data = node->data;
 1007fb8:	e5937000 	ldr	r7, [r3]
        prev->next = node->next;
 1007fbc:	158c2004 	strne	r2, [ip, #4]
 1007fc0:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1007fc4:	05862004 	streq	r2, [r6, #4]
    list->mem_free(node);
 1007fc8:	e5963014 	ldr	r3, [r6, #20]
    if (!node->next)
 1007fcc:	e3520000 	cmp	r2, #0
        list->tail = prev;
 1007fd0:	0586c008 	streq	ip, [r6, #8]
    list->mem_free(node);
 1007fd4:	e12fff33 	blx	r3
    list->size--;
 1007fd8:	e5962000 	ldr	r2, [r6]
    if (out)
 1007fdc:	e3550000 	cmp	r5, #0
    iter->index--;
 1007fe0:	e5943000 	ldr	r3, [r4]
    iter->current = NULL;
 1007fe4:	e3a00000 	mov	r0, #0
    list->size--;
 1007fe8:	e2422001 	sub	r2, r2, #1
    iter->index--;
 1007fec:	e2433001 	sub	r3, r3, #1
    list->size--;
 1007ff0:	e5862000 	str	r2, [r6]
    iter->index--;
 1007ff4:	e5843000 	str	r3, [r4]
    iter->current = NULL;
 1007ff8:	e584000c 	str	r0, [r4, #12]
    if (out)
 1007ffc:	0a000001 	beq	1008008 <slist_iter_remove+0x7c>
        *out = e;
 1008000:	e5857000 	str	r7, [r5]
 1008004:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_OK;
 1008008:	e1a00005 	mov	r0, r5
}
 100800c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1008010:	e3a00007 	mov	r0, #7
}
 1008014:	e12fff1e 	bx	lr

01008018 <slist_iter_add>:
    SNode *new_node = iter->list->mem_calloc(1, sizeof(SNode));
 1008018:	e5903004 	ldr	r3, [r0, #4]
{
 100801c:	e92d4070 	push	{r4, r5, r6, lr}
 1008020:	e1a04000 	mov	r4, r0
 1008024:	e1a05001 	mov	r5, r1
    SNode *new_node = iter->list->mem_calloc(1, sizeof(SNode));
 1008028:	e3a00001 	mov	r0, #1
 100802c:	e3a01008 	mov	r1, #8
 1008030:	e5933010 	ldr	r3, [r3, #16]
 1008034:	e12fff33 	blx	r3
    if (!new_node)
 1008038:	e3500000 	cmp	r0, #0
 100803c:	0a00000f 	beq	1008080 <slist_iter_add+0x68>
    if (iter->index == iter->list->size)
 1008040:	e5941004 	ldr	r1, [r4, #4]
 1008044:	e5942000 	ldr	r2, [r4]
    new_node->next = iter->next;
 1008048:	e594e008 	ldr	lr, [r4, #8]
    if (iter->index == iter->list->size)
 100804c:	e5913000 	ldr	r3, [r1]
    iter->current->next = new_node;
 1008050:	e594c00c 	ldr	ip, [r4, #12]
    new_node->data = element;
 1008054:	e5805000 	str	r5, [r0]
    if (iter->index == iter->list->size)
 1008058:	e1520003 	cmp	r2, r3
    iter->index++;
 100805c:	e2822001 	add	r2, r2, #1
    iter->list->size++;
 1008060:	e2833001 	add	r3, r3, #1
    new_node->next = iter->next;
 1008064:	e580e004 	str	lr, [r0, #4]
    iter->current->next = new_node;
 1008068:	e58c0004 	str	r0, [ip, #4]
        iter->list->tail = new_node;
 100806c:	05810008 	streq	r0, [r1, #8]
    return CC_OK;
 1008070:	e3a00000 	mov	r0, #0
    iter->index++;
 1008074:	e5842000 	str	r2, [r4]
    iter->list->size++;
 1008078:	e5813000 	str	r3, [r1]
    return CC_OK;
 100807c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1008080:	e3a00001 	mov	r0, #1
}
 1008084:	e8bd8070 	pop	{r4, r5, r6, pc}

01008088 <slist_iter_replace>:
    if (!iter->current)
 1008088:	e590300c 	ldr	r3, [r0, #12]
 100808c:	e3530000 	cmp	r3, #0
 1008090:	0a000005 	beq	10080ac <slist_iter_replace+0x24>
    void *old = iter->current->data;
 1008094:	e5930000 	ldr	r0, [r3]
    if (out)
 1008098:	e3520000 	cmp	r2, #0
    iter->current->data = element;
 100809c:	e5831000 	str	r1, [r3]
        *out = old;
 10080a0:	15820000 	strne	r0, [r2]
    return CC_OK;
 10080a4:	e3a00000 	mov	r0, #0
 10080a8:	e12fff1e 	bx	lr
        return CC_ERR_VALUE_NOT_FOUND;
 10080ac:	e3a00007 	mov	r0, #7
 10080b0:	e12fff1e 	bx	lr

010080b4 <slist_iter_next>:
    if (!iter->next)
 10080b4:	e5902008 	ldr	r2, [r0, #8]
 10080b8:	e3520000 	cmp	r2, #0
 10080bc:	0a00000e 	beq	10080fc <slist_iter_next+0x48>
 10080c0:	e1a03000 	mov	r3, r0
    if (iter->current)
 10080c4:	e590000c 	ldr	r0, [r0, #12]
    iter->index++;
 10080c8:	e593c000 	ldr	ip, [r3]
{
 10080cc:	e92d4010 	push	{r4, lr}
    void *data = iter->next->data;
 10080d0:	e592e000 	ldr	lr, [r2]
    if (iter->current)
 10080d4:	e3500000 	cmp	r0, #0
    iter->next = iter->next->next;
 10080d8:	e5924004 	ldr	r4, [r2, #4]
    iter->current = iter->next;
 10080dc:	e583200c 	str	r2, [r3, #12]
    iter->index++;
 10080e0:	e28c2001 	add	r2, ip, #1
        iter->prev = iter->current;
 10080e4:	15830010 	strne	r0, [r3, #16]
    return CC_OK;
 10080e8:	e3a00000 	mov	r0, #0
    iter->next = iter->next->next;
 10080ec:	e5834008 	str	r4, [r3, #8]
    iter->index++;
 10080f0:	e5832000 	str	r2, [r3]
    *out = data;
 10080f4:	e581e000 	str	lr, [r1]
}
 10080f8:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 10080fc:	e3a00009 	mov	r0, #9
}
 1008100:	e12fff1e 	bx	lr

01008104 <slist_iter_index>:
    return iter->index - 1;
 1008104:	e5900000 	ldr	r0, [r0]
}
 1008108:	e2400001 	sub	r0, r0, #1
 100810c:	e12fff1e 	bx	lr

01008110 <slist_zip_iter_init>:
    iter->l2_next    = l2->head;
 1008110:	e592c004 	ldr	ip, [r2, #4]
    iter->index      = 0;
 1008114:	e3a03000 	mov	r3, #0
{
 1008118:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    iter->l1_next    = l1->head;
 100811c:	e591e004 	ldr	lr, [r1, #4]
    iter->l2_next    = l2->head;
 1008120:	e580c010 	str	ip, [r0, #16]
    iter->l2         = l2;
 1008124:	e9804006 	stmib	r0, {r1, r2, lr}
    iter->index      = 0;
 1008128:	e5803000 	str	r3, [r0]
    iter->l1_current = NULL;
 100812c:	e5803014 	str	r3, [r0, #20]
    iter->l2_current = NULL;
 1008130:	e5803018 	str	r3, [r0, #24]
    iter->l1_prev    = NULL;
 1008134:	e580301c 	str	r3, [r0, #28]
    iter->l2_prev    = NULL;
 1008138:	e5803020 	str	r3, [r0, #32]
}
 100813c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01008140 <slist_zip_iter_next>:
{
 1008140:	e1a03000 	mov	r3, r0
    if (!iter->l1_next || !iter->l2_next)
 1008144:	e590000c 	ldr	r0, [r0, #12]
 1008148:	e3500000 	cmp	r0, #0
 100814c:	0a000018 	beq	10081b4 <slist_zip_iter_next+0x74>
 1008150:	e593c010 	ldr	ip, [r3, #16]
 1008154:	e35c0000 	cmp	ip, #0
 1008158:	0a000015 	beq	10081b4 <slist_zip_iter_next+0x74>
{
 100815c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if (iter->l1_current)
 1008160:	e593e014 	ldr	lr, [r3, #20]
    void *data1 = iter->l1_next->data;
 1008164:	e5905000 	ldr	r5, [r0]
    if (iter->l1_current)
 1008168:	e35e0000 	cmp	lr, #0
    void *data2 = iter->l2_next->data;
 100816c:	e59c4000 	ldr	r4, [ip]
        iter->l1_prev = iter->l1_current;
 1008170:	1583e01c 	strne	lr, [r3, #28]
    if (iter->l2_current)
 1008174:	e593e018 	ldr	lr, [r3, #24]
    iter->l1_next    = iter->l1_next->next;
 1008178:	e5907004 	ldr	r7, [r0, #4]
    iter->l2_next    = iter->l2_next->next;
 100817c:	e59c6004 	ldr	r6, [ip, #4]
    if (iter->l2_current)
 1008180:	e35e0000 	cmp	lr, #0
    iter->l1_current = iter->l1_next;
 1008184:	e5830014 	str	r0, [r3, #20]
        iter->l2_prev = iter->l2_current;
 1008188:	1583e020 	strne	lr, [r3, #32]
    return CC_OK;
 100818c:	e3a00000 	mov	r0, #0
    iter->index++;
 1008190:	e593e000 	ldr	lr, [r3]
    iter->l1_next    = iter->l1_next->next;
 1008194:	e583700c 	str	r7, [r3, #12]
    iter->l2_current = iter->l2_next;
 1008198:	e583c018 	str	ip, [r3, #24]
    iter->index++;
 100819c:	e28ee001 	add	lr, lr, #1
    iter->l2_next    = iter->l2_next->next;
 10081a0:	e5836010 	str	r6, [r3, #16]
    iter->index++;
 10081a4:	e583e000 	str	lr, [r3]
    *out1 = data1;
 10081a8:	e5815000 	str	r5, [r1]
    *out2 = data2;
 10081ac:	e5824000 	str	r4, [r2]
}
 10081b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ITER_END;
 10081b4:	e3a00009 	mov	r0, #9
}
 10081b8:	e12fff1e 	bx	lr

010081bc <slist_zip_iter_add>:
    SNode *new_node1 = iter->l1->mem_calloc(1, sizeof(SNode));
 10081bc:	e5903004 	ldr	r3, [r0, #4]
{
 10081c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10081c4:	e1a04000 	mov	r4, r0
 10081c8:	e1a07001 	mov	r7, r1
    SNode *new_node1 = iter->l1->mem_calloc(1, sizeof(SNode));
 10081cc:	e3a00001 	mov	r0, #1
 10081d0:	e3a01008 	mov	r1, #8
{
 10081d4:	e1a06002 	mov	r6, r2
    SNode *new_node1 = iter->l1->mem_calloc(1, sizeof(SNode));
 10081d8:	e5933010 	ldr	r3, [r3, #16]
 10081dc:	e12fff33 	blx	r3
    if (!new_node1)
 10081e0:	e2505000 	subs	r5, r0, #0
 10081e4:	0a000021 	beq	1008270 <slist_zip_iter_add+0xb4>
    SNode *new_node2 = iter->l2->mem_calloc(1, sizeof(SNode));
 10081e8:	e5943008 	ldr	r3, [r4, #8]
 10081ec:	e3a01008 	mov	r1, #8
 10081f0:	e3a00001 	mov	r0, #1
 10081f4:	e5933010 	ldr	r3, [r3, #16]
 10081f8:	e12fff33 	blx	r3
    if (!new_node2) {
 10081fc:	e3500000 	cmp	r0, #0
 1008200:	0a00001c 	beq	1008278 <slist_zip_iter_add+0xbc>
    if (iter->index == iter->l1->size)
 1008204:	e8941008 	ldm	r4, {r3, ip}
    new_node1->next = iter->l1_next;
 1008208:	e594100c 	ldr	r1, [r4, #12]
    iter->l1_current->next = new_node1;
 100820c:	e594e014 	ldr	lr, [r4, #20]
    if (iter->index == iter->l1->size)
 1008210:	e59c2000 	ldr	r2, [ip]
    new_node1->data = e1;
 1008214:	e5857000 	str	r7, [r5]
    new_node2->next = iter->l2_next;
 1008218:	e5947010 	ldr	r7, [r4, #16]
    new_node2->data = e2;
 100821c:	e5806000 	str	r6, [r0]
    if (iter->index == iter->l1->size)
 1008220:	e1530002 	cmp	r3, r2
    new_node1->next = iter->l1_next;
 1008224:	e5851004 	str	r1, [r5, #4]
    iter->l1->size++;
 1008228:	e2822001 	add	r2, r2, #1
    iter->l2_current->next = new_node2;
 100822c:	e5941018 	ldr	r1, [r4, #24]
    new_node2->next = iter->l2_next;
 1008230:	e5807004 	str	r7, [r0, #4]
    iter->l1_current->next = new_node1;
 1008234:	e58e5004 	str	r5, [lr, #4]
    iter->l2_current->next = new_node2;
 1008238:	e5810004 	str	r0, [r1, #4]
    if (iter->index == iter->l2->size)
 100823c:	e5941008 	ldr	r1, [r4, #8]
        iter->l1->tail = new_node1;
 1008240:	058c5008 	streq	r5, [ip, #8]
    if (iter->index == iter->l2->size)
 1008244:	e591e000 	ldr	lr, [r1]
 1008248:	e153000e 	cmp	r3, lr
    iter->index++;
 100824c:	e2833001 	add	r3, r3, #1
        iter->l2->tail = new_node2;
 1008250:	05810008 	streq	r0, [r1, #8]
    return CC_OK;
 1008254:	e3a00000 	mov	r0, #0
    iter->index++;
 1008258:	e5843000 	str	r3, [r4]
    iter->l1->size++;
 100825c:	e58c2000 	str	r2, [ip]
    iter->l2->size++;
 1008260:	e5913000 	ldr	r3, [r1]
 1008264:	e2833001 	add	r3, r3, #1
 1008268:	e5813000 	str	r3, [r1]
    return CC_OK;
 100826c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1008270:	e3a00001 	mov	r0, #1
}
 1008274:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        iter->l1->mem_free(new_node1);
 1008278:	e5943004 	ldr	r3, [r4, #4]
 100827c:	e1a00005 	mov	r0, r5
 1008280:	e5933014 	ldr	r3, [r3, #20]
 1008284:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1008288:	e3a00001 	mov	r0, #1
 100828c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01008290 <slist_zip_iter_remove>:
{
 1008290:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1008294:	e1a04000 	mov	r4, r0
    if (!iter->l1_current || !iter->l2_current)
 1008298:	e5900014 	ldr	r0, [r0, #20]
 100829c:	e3500000 	cmp	r0, #0
 10082a0:	0a00002f 	beq	1008364 <slist_zip_iter_remove+0xd4>
 10082a4:	e5943018 	ldr	r3, [r4, #24]
 10082a8:	e3530000 	cmp	r3, #0
 10082ac:	0a00002c 	beq	1008364 <slist_zip_iter_remove+0xd4>
    void *e1 = unlinkn(iter->l1, iter->l1_current, iter->l1_prev);
 10082b0:	e594c01c 	ldr	ip, [r4, #28]
 10082b4:	e1a06001 	mov	r6, r1
 10082b8:	e5903004 	ldr	r3, [r0, #4]
 10082bc:	e1a05002 	mov	r5, r2
 10082c0:	e5949004 	ldr	r9, [r4, #4]
    if (prev)
 10082c4:	e35c0000 	cmp	ip, #0
    void *data = node->data;
 10082c8:	e5908000 	ldr	r8, [r0]
        prev->next = node->next;
 10082cc:	158c3004 	strne	r3, [ip, #4]
 10082d0:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 10082d4:	05893004 	streq	r3, [r9, #4]
    if (!node->next)
 10082d8:	e3530000 	cmp	r3, #0
    list->mem_free(node);
 10082dc:	e5993014 	ldr	r3, [r9, #20]
        list->tail = prev;
 10082e0:	0589c008 	streq	ip, [r9, #8]
    list->mem_free(node);
 10082e4:	e12fff33 	blx	r3
    list->size--;
 10082e8:	e5993000 	ldr	r3, [r9]
    void *e2 = unlinkn(iter->l2, iter->l2_current, iter->l2_prev);
 10082ec:	e5940018 	ldr	r0, [r4, #24]
 10082f0:	e5942020 	ldr	r2, [r4, #32]
    list->size--;
 10082f4:	e2433001 	sub	r3, r3, #1
    void *e2 = unlinkn(iter->l2, iter->l2_current, iter->l2_prev);
 10082f8:	e5947008 	ldr	r7, [r4, #8]
    list->size--;
 10082fc:	e5893000 	str	r3, [r9]
        prev->next = node->next;
 1008300:	e5903004 	ldr	r3, [r0, #4]
    if (prev)
 1008304:	e3520000 	cmp	r2, #0
    void *data = node->data;
 1008308:	e5909000 	ldr	r9, [r0]
        prev->next = node->next;
 100830c:	15823004 	strne	r3, [r2, #4]
 1008310:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 1008314:	05873004 	streq	r3, [r7, #4]
    if (!node->next)
 1008318:	e3530000 	cmp	r3, #0
    list->mem_free(node);
 100831c:	e5973014 	ldr	r3, [r7, #20]
        list->tail = prev;
 1008320:	05872008 	streq	r2, [r7, #8]
    list->mem_free(node);
 1008324:	e12fff33 	blx	r3
    list->size--;
 1008328:	e5972000 	ldr	r2, [r7]
    if (out1)
 100832c:	e3560000 	cmp	r6, #0
    iter->index--;
 1008330:	e5943000 	ldr	r3, [r4]
    iter->l1_current = NULL;
 1008334:	e3a01000 	mov	r1, #0
    return CC_OK;
 1008338:	e3a00000 	mov	r0, #0
    list->size--;
 100833c:	e2422001 	sub	r2, r2, #1
    iter->index--;
 1008340:	e2433001 	sub	r3, r3, #1
    list->size--;
 1008344:	e5872000 	str	r2, [r7]
    iter->index--;
 1008348:	e5843000 	str	r3, [r4]
    iter->l1_current = NULL;
 100834c:	e5841014 	str	r1, [r4, #20]
    iter->l2_current = NULL;
 1008350:	e5841018 	str	r1, [r4, #24]
        *out1 = e1;
 1008354:	15868000 	strne	r8, [r6]
    if (out2)
 1008358:	e3550000 	cmp	r5, #0
        *out2 = e2;
 100835c:	15859000 	strne	r9, [r5]
 1008360:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1008364:	e3a00007 	mov	r0, #7
 1008368:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0100836c <slist_zip_iter_replace>:
{
 100836c:	e92d4030 	push	{r4, r5, lr}
    if (!iter->l1_current || !iter->l2_current)
 1008370:	e590e014 	ldr	lr, [r0, #20]
{
 1008374:	e59dc00c 	ldr	ip, [sp, #12]
    if (!iter->l1_current || !iter->l2_current)
 1008378:	e35e0000 	cmp	lr, #0
 100837c:	0a00000c 	beq	10083b4 <slist_zip_iter_replace+0x48>
 1008380:	e5900018 	ldr	r0, [r0, #24]
 1008384:	e3500000 	cmp	r0, #0
 1008388:	0a000009 	beq	10083b4 <slist_zip_iter_replace+0x48>
    void *old1 = iter->l1_current->data;
 100838c:	e59e5000 	ldr	r5, [lr]
    if (out1)
 1008390:	e3530000 	cmp	r3, #0
    void *old2 = iter->l2_current->data;
 1008394:	e5904000 	ldr	r4, [r0]
    iter->l1_current->data = e1;
 1008398:	e58e1000 	str	r1, [lr]
    iter->l2_current->data = e2;
 100839c:	e5802000 	str	r2, [r0]
    return CC_OK;
 10083a0:	e3a00000 	mov	r0, #0
        *out1 = old1;
 10083a4:	15835000 	strne	r5, [r3]
    if (out2)
 10083a8:	e35c0000 	cmp	ip, #0
        *out2 = old2;
 10083ac:	158c4000 	strne	r4, [ip]
 10083b0:	e8bd8030 	pop	{r4, r5, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10083b4:	e3a00007 	mov	r0, #7
 10083b8:	e8bd8030 	pop	{r4, r5, pc}

010083bc <slist_zip_iter_index>:
    return iter->index - 1;
 10083bc:	e5900000 	ldr	r0, [r0]
}
 10083c0:	e2400001 	sub	r0, r0, #1
 10083c4:	e12fff1e 	bx	lr

010083c8 <stack_conf_init>:
 *
 * @param[in, out] conf StackConf structure that is being initialized
 */
void stack_conf_init(StackConf *conf)
{
    array_conf_init(conf);
 10083c8:	eaffe0c4 	b	10006e0 <array_conf_init>

010083cc <stack_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new Stack structure failed.
 */
enum cc_stat stack_new(Stack **out)
{
 10083cc:	e92d4070 	push	{r4, r5, r6, lr}
 10083d0:	e24dd018 	sub	sp, sp, #24
 10083d4:	e1a06000 	mov	r6, r0
    array_conf_init(conf);
 10083d8:	e28d0004 	add	r0, sp, #4
 10083dc:	ebffe0bf 	bl	10006e0 <array_conf_init>
 * the above mentioned condition is not met, or CC_ERR_ALLOC if the memory
 * allocation for the new Stack structure failed.
 */
enum cc_stat stack_new_conf(StackConf const * const conf, Stack **out)
{
    Stack *stack = conf->mem_calloc(1, sizeof(Stack));
 10083e0:	e59d3010 	ldr	r3, [sp, #16]
 10083e4:	e3a01010 	mov	r1, #16
 10083e8:	e3a00001 	mov	r0, #1
 10083ec:	e12fff33 	blx	r3

    if (!stack)
 10083f0:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 10083f4:	03a05001 	moveq	r5, #1
    if (!stack)
 10083f8:	0a00000c 	beq	1008430 <stack_new+0x64>

    stack->mem_alloc  = conf->mem_alloc;
 10083fc:	e59dc00c 	ldr	ip, [sp, #12]
    stack->mem_calloc = conf->mem_calloc;
    stack->mem_free   = conf->mem_free;

    Array *array;
    enum cc_stat status;
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008400:	e28d0004 	add	r0, sp, #4
    stack->mem_alloc  = conf->mem_alloc;
 1008404:	e59d2010 	ldr	r2, [sp, #16]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008408:	e1a0100d 	mov	r1, sp
    stack->mem_alloc  = conf->mem_alloc;
 100840c:	e59d3014 	ldr	r3, [sp, #20]
 1008410:	e584c004 	str	ip, [r4, #4]
 1008414:	e1c420f8 	strd	r2, [r4, #8]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008418:	ebffe07a 	bl	1000608 <array_new_conf>
 100841c:	e2505000 	subs	r5, r0, #0
 1008420:	1a000005 	bne	100843c <stack_new+0x70>
        stack->v = array;
 1008424:	e59d3000 	ldr	r3, [sp]
 1008428:	e5843000 	str	r3, [r4]
    } else {
        conf->mem_free(stack);
        return status;
    }
    *out = stack;
 100842c:	e5864000 	str	r4, [r6]
}
 1008430:	e1a00005 	mov	r0, r5
 1008434:	e28dd018 	add	sp, sp, #24
 1008438:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(stack);
 100843c:	e1a00004 	mov	r0, r4
 1008440:	e59d3014 	ldr	r3, [sp, #20]
 1008444:	e12fff33 	blx	r3
}
 1008448:	e1a00005 	mov	r0, r5
 100844c:	e28dd018 	add	sp, sp, #24
 1008450:	e8bd8070 	pop	{r4, r5, r6, pc}

01008454 <stack_new_conf>:
{
 1008454:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1008458:	e1a04000 	mov	r4, r0
    Stack *stack = conf->mem_calloc(1, sizeof(Stack));
 100845c:	e590300c 	ldr	r3, [r0, #12]
{
 1008460:	e24dd00c 	sub	sp, sp, #12
 1008464:	e1a07001 	mov	r7, r1
    Stack *stack = conf->mem_calloc(1, sizeof(Stack));
 1008468:	e3a00001 	mov	r0, #1
 100846c:	e3a01010 	mov	r1, #16
 1008470:	e12fff33 	blx	r3
    if (!stack)
 1008474:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 1008478:	03a06001 	moveq	r6, #1
    if (!stack)
 100847c:	0a00000b 	beq	10084b0 <stack_new_conf+0x5c>
    stack->mem_alloc  = conf->mem_alloc;
 1008480:	e5940008 	ldr	r0, [r4, #8]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008484:	e28d1004 	add	r1, sp, #4
    stack->mem_alloc  = conf->mem_alloc;
 1008488:	e1c420dc 	ldrd	r2, [r4, #12]
 100848c:	e5850004 	str	r0, [r5, #4]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008490:	e1a00004 	mov	r0, r4
    stack->mem_alloc  = conf->mem_alloc;
 1008494:	e1c520f8 	strd	r2, [r5, #8]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008498:	ebffe05a 	bl	1000608 <array_new_conf>
 100849c:	e2506000 	subs	r6, r0, #0
 10084a0:	1a000005 	bne	10084bc <stack_new_conf+0x68>
        stack->v = array;
 10084a4:	e59d3004 	ldr	r3, [sp, #4]
 10084a8:	e5853000 	str	r3, [r5]
    *out = stack;
 10084ac:	e5875000 	str	r5, [r7]
    return CC_OK;
}
 10084b0:	e1a00006 	mov	r0, r6
 10084b4:	e28dd00c 	add	sp, sp, #12
 10084b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        conf->mem_free(stack);
 10084bc:	e1a00005 	mov	r0, r5
 10084c0:	e5943010 	ldr	r3, [r4, #16]
 10084c4:	e12fff33 	blx	r3
}
 10084c8:	e1a00006 	mov	r0, r6
 10084cc:	e28dd00c 	add	sp, sp, #12
 10084d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

010084d4 <stack_destroy>:
 * intact.
 *
 * @param[in] stack the Stack to be destroyed
 */
void stack_destroy(Stack *stack)
{
 10084d4:	e92d4010 	push	{r4, lr}
 10084d8:	e1a04000 	mov	r4, r0
    array_destroy(stack->v);
 10084dc:	e5900000 	ldr	r0, [r0]
 10084e0:	ebffe08c 	bl	1000718 <array_destroy>
    stack->mem_free(stack);
 10084e4:	e594300c 	ldr	r3, [r4, #12]
 10084e8:	e1a00004 	mov	r0, r4
}
 10084ec:	e8bd4010 	pop	{r4, lr}
    stack->mem_free(stack);
 10084f0:	e12fff13 	bx	r3

010084f4 <stack_destroy_cb>:
 * elements allocated on the stack (stack memory).
 *
 * @param[in] stack the stack to be destroyed
 */
void stack_destroy_cb(Stack *stack, void (*cb) (void*))
{
 10084f4:	e92d4010 	push	{r4, lr}
 10084f8:	e1a04000 	mov	r4, r0
    array_destroy_cb(stack->v, cb);
 10084fc:	e5900000 	ldr	r0, [r0]
 1008500:	ebffe08d 	bl	100073c <array_destroy_cb>
    free(stack);
 1008504:	e1a00004 	mov	r0, r4
}
 1008508:	e8bd4010 	pop	{r4, lr}
    free(stack);
 100850c:	ea007cc7 	b	1027830 <__free_from_arm>

01008510 <stack_push>:
 * @return CC_OK if the element was successfully pushed, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat stack_push(Stack *stack, void *element)
{
    return array_add(stack->v, element);
 1008510:	e5900000 	ldr	r0, [r0]
 1008514:	eaffe09d 	b	1000790 <array_add>

01008518 <stack_peek>:
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if the
 * Stack is empty.
 */
enum cc_stat stack_peek(Stack *stack, void **out)
{
    return array_get_last(stack->v, out);
 1008518:	e5900000 	ldr	r0, [r0]
 100851c:	eaffe1c1 	b	1000c28 <array_get_last>

01008520 <stack_pop>:
 * @return CC_OK if the element was successfully popped, or CC_ERR_OUT_OF_RANGE
 * if the Stack is already empty.
 */
enum cc_stat stack_pop(Stack *stack, void **out)
{
    return array_remove_last(stack->v, out);
 1008520:	e5900000 	ldr	r0, [r0]
 1008524:	eaffe196 	b	1000b84 <array_remove_last>

01008528 <stack_size>:
 *
 * @return the number of Stack elements.
 */
size_t stack_size(Stack *stack)
{
    return array_size(stack->v);
 1008528:	e5900000 	ldr	r0, [r0]
 100852c:	eaffe337 	b	1001210 <array_size>

01008530 <stack_map>:
 * @param[in] fn the operation function that is to be invoked on each
 *               element of the Stack
 */
void stack_map(Stack *stack, void (*fn) (void *))
{
    array_map(stack->v, fn);
 1008530:	e5900000 	ldr	r0, [r0]
 1008534:	eaffe33f 	b	1001238 <array_map>

01008538 <stack_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] s the stack to iterate over
 */
void stack_iter_init(StackIter *iter, Stack *s)
{
    array_iter_init(&(iter->i), s->v);
 1008538:	e5911000 	ldr	r1, [r1]
 100853c:	eaffe36b 	b	10012f0 <array_iter_init>

01008540 <stack_iter_next>:
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Stack has been reached.
 */
enum cc_stat stack_iter_next(StackIter *iter, void **out)
{
    return array_iter_next(&(iter->i), out);
 1008540:	eaffe36e 	b	1001300 <array_iter_next>

01008544 <stack_iter_replace>:
 * @return  CC_OK if the element was replaced successfully, or
 * CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat stack_iter_replace(StackIter *iter, void *element, void **out)
{
    return array_iter_replace(&(iter->i), element, out);
 1008544:	eaffe40a 	b	1001574 <array_iter_replace>

01008548 <stack_zip_iter_init>:
 * @param[in] s1   first Stack
 * @param[in] s2   second Stack
 */
void stack_zip_iter_init(StackZipIter *iter, Stack *s1, Stack *s2)
{
    array_zip_iter_init(&(iter->i), s1->v, s2->v);
 1008548:	e5922000 	ldr	r2, [r2]
 100854c:	e5911000 	ldr	r1, [r1]
 1008550:	eaffe41e 	b	10015d0 <array_zip_iter_init>

01008554 <stack_zip_iter_next>:
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end
 * of one of the stacks has been reached.
 */
enum cc_stat stack_zip_iter_next(StackZipIter *iter, void **out1, void **out2)
{
    return array_zip_iter_next(&(iter->i), out1, out2);
 1008554:	eaffe421 	b	10015e0 <array_zip_iter_next>

01008558 <stack_zip_iter_replace>:
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat stack_zip_iter_replace(StackZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
    return array_zip_iter_replace(&(iter->i), e1, e2, out1, out2);
 1008558:	eaffe521 	b	10019e4 <array_zip_iter_replace>

0100855c <treeset_conf_init>:
 *
 * @param[in, out] conf the configuration struct that is being initialized
 */
void treeset_conf_init(TreeSetConf *conf)
{
    treetable_conf_init(conf);
 100855c:	ea0001e9 	b	1008d08 <treetable_conf_init>

01008560 <treeset_new>:
 *
 * @return  CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new TreeSet failed.
 */
enum cc_stat treeset_new(int (*cmp) (const void*, const void*), TreeSet **set)
{
 1008560:	e92d4070 	push	{r4, r5, r6, lr}
 1008564:	e24dd018 	sub	sp, sp, #24
 1008568:	e1a04000 	mov	r4, r0
    treetable_conf_init(conf);
 100856c:	e28d0008 	add	r0, sp, #8
{
 1008570:	e1a06001 	mov	r6, r1
    treetable_conf_init(conf);
 1008574:	eb0001e3 	bl	1008d08 <treetable_conf_init>
    TreeSetConf conf;
    treeset_conf_init(&conf);
    conf.cmp = cmp;
 1008578:	e58d4008 	str	r4, [sp, #8]
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new TreeSet structure failed.
 */
enum cc_stat treeset_new_conf(TreeSetConf const * const conf, TreeSet **tset)
{
    TreeSet *set = conf->mem_calloc(1, sizeof(TreeSet));
 100857c:	e3a01014 	mov	r1, #20
 1008580:	e59d3010 	ldr	r3, [sp, #16]
 1008584:	e3a00001 	mov	r0, #1
 1008588:	e12fff33 	blx	r3

    if (!set)
 100858c:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 1008590:	03a05001 	moveq	r5, #1
    if (!set)
 1008594:	0a00000d 	beq	10085d0 <treeset_new+0x70>

    TreeTable *table;
    enum cc_stat s = treetable_new_conf(conf, &table);
 1008598:	e28d0008 	add	r0, sp, #8
 100859c:	e28d1004 	add	r1, sp, #4
 10085a0:	eb000207 	bl	1008dc4 <treetable_new_conf>

    if (s != CC_OK) {
 10085a4:	e2505000 	subs	r5, r0, #0
 10085a8:	1a00000b 	bne	10085dc <treeset_new+0x7c>
        conf->mem_free(set);
        return s;
    }
    set->t          = table;
 10085ac:	e59d2004 	ldr	r2, [sp, #4]
    set->dummy      = (int*) 1;
 10085b0:	e3a03001 	mov	r3, #1
    set->mem_alloc  = conf->mem_alloc;
    set->mem_calloc = conf->mem_calloc;
 10085b4:	e1cd00dc 	ldrd	r0, [sp, #12]
    set->t          = table;
 10085b8:	e5842000 	str	r2, [r4]
    set->mem_free   = conf->mem_free;
 10085bc:	e59d2014 	ldr	r2, [sp, #20]
    set->mem_calloc = conf->mem_calloc;
 10085c0:	e1c400f8 	strd	r0, [r4, #8]
    set->dummy      = (int*) 1;
 10085c4:	e5843004 	str	r3, [r4, #4]
    set->mem_free   = conf->mem_free;
 10085c8:	e5842010 	str	r2, [r4, #16]

    *tset = set;
 10085cc:	e5864000 	str	r4, [r6]
}
 10085d0:	e1a00005 	mov	r0, r5
 10085d4:	e28dd018 	add	sp, sp, #24
 10085d8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(set);
 10085dc:	e1a00004 	mov	r0, r4
 10085e0:	e59d3014 	ldr	r3, [sp, #20]
 10085e4:	e12fff33 	blx	r3
}
 10085e8:	e1a00005 	mov	r0, r5
 10085ec:	e28dd018 	add	sp, sp, #24
 10085f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010085f4 <treeset_new_conf>:
{
 10085f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10085f8:	e1a04000 	mov	r4, r0
    TreeSet *set = conf->mem_calloc(1, sizeof(TreeSet));
 10085fc:	e5903008 	ldr	r3, [r0, #8]
{
 1008600:	e24dd00c 	sub	sp, sp, #12
 1008604:	e1a07001 	mov	r7, r1
    TreeSet *set = conf->mem_calloc(1, sizeof(TreeSet));
 1008608:	e3a00001 	mov	r0, #1
 100860c:	e3a01014 	mov	r1, #20
 1008610:	e12fff33 	blx	r3
    if (!set)
 1008614:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 1008618:	03a06001 	moveq	r6, #1
    if (!set)
 100861c:	0a00000d 	beq	1008658 <treeset_new_conf+0x64>
    enum cc_stat s = treetable_new_conf(conf, &table);
 1008620:	e28d1004 	add	r1, sp, #4
 1008624:	e1a00004 	mov	r0, r4
 1008628:	eb0001e5 	bl	1008dc4 <treetable_new_conf>
    if (s != CC_OK) {
 100862c:	e2506000 	subs	r6, r0, #0
 1008630:	1a00000b 	bne	1008664 <treeset_new_conf+0x70>
    set->dummy      = (int*) 1;
 1008634:	e3a03001 	mov	r3, #1
    set->mem_alloc  = conf->mem_alloc;
 1008638:	e5941004 	ldr	r1, [r4, #4]
    set->t          = table;
 100863c:	e59d0004 	ldr	r0, [sp, #4]
    set->dummy      = (int*) 1;
 1008640:	e5853004 	str	r3, [r5, #4]
    set->mem_free   = conf->mem_free;
 1008644:	e1c420d8 	ldrd	r2, [r4, #8]
    set->t          = table;
 1008648:	e5850000 	str	r0, [r5]
    set->mem_alloc  = conf->mem_alloc;
 100864c:	e5851008 	str	r1, [r5, #8]
    set->mem_free   = conf->mem_free;
 1008650:	e1c520fc 	strd	r2, [r5, #12]
    *tset = set;
 1008654:	e5875000 	str	r5, [r7]
    return CC_OK;
}
 1008658:	e1a00006 	mov	r0, r6
 100865c:	e28dd00c 	add	sp, sp, #12
 1008660:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        conf->mem_free(set);
 1008664:	e1a00005 	mov	r0, r5
 1008668:	e594300c 	ldr	r3, [r4, #12]
 100866c:	e12fff33 	blx	r3
}
 1008670:	e1a00006 	mov	r0, r6
 1008674:	e28dd00c 	add	sp, sp, #12
 1008678:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0100867c <treeset_destroy>:
 * Destroys the specified TreeSet.
 *
 * @param[in] set the TreeSet to be destroyed
 */
void treeset_destroy(TreeSet *set)
{
 100867c:	e92d4010 	push	{r4, lr}
 1008680:	e1a04000 	mov	r4, r0
    treetable_destroy(set->t);
 1008684:	e5900000 	ldr	r0, [r0]
 1008688:	eb0001f3 	bl	1008e5c <treetable_destroy>
    set->mem_free(set);
 100868c:	e5943010 	ldr	r3, [r4, #16]
 1008690:	e1a00004 	mov	r0, r4
}
 1008694:	e8bd4010 	pop	{r4, lr}
    set->mem_free(set);
 1008698:	e12fff13 	bx	r3

0100869c <treeset_add>:
 * @return CC_OK if the operation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new element failed.
 */
enum cc_stat treeset_add(TreeSet *set, void *element)
{
    return treetable_add(set->t, element, set->dummy);
 100869c:	e8900005 	ldm	r0, {r0, r2}
 10086a0:	ea00048d 	b	10098dc <treetable_add>

010086a4 <treeset_remove>:
 *
 * @return CC_OK if the mapping was successfully removed, or CC_ERR_VALUE_NOT_FOUND
 * if the value was not found.
 */
enum cc_stat treeset_remove(TreeSet *set, void *element, void **out)
{
 10086a4:	e92d4010 	push	{r4, lr}
    if (treetable_remove(set->t, element, out) == CC_ERR_KEY_NOT_FOUND)
 10086a8:	e5900000 	ldr	r0, [r0]
 10086ac:	eb000549 	bl	1009bd8 <treetable_remove>
 10086b0:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 10086b4:	03a00007 	moveq	r0, #7
 10086b8:	13a00000 	movne	r0, #0
 10086bc:	e8bd8010 	pop	{r4, pc}

010086c0 <treeset_remove_all>:
 *
 * @param set the set from which all elements are being removed
 */
void treeset_remove_all(TreeSet *set)
{
    treetable_remove_all(set->t);
 10086c0:	e5900000 	ldr	r0, [r0]
 10086c4:	ea000588 	b	1009cec <treetable_remove_all>

010086c8 <treeset_get_first>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_first(TreeSet *set, void **out)
{
 10086c8:	e92d4010 	push	{r4, lr}
    if (treetable_get_first_key(set->t, out) == CC_ERR_KEY_NOT_FOUND)
 10086cc:	e5900000 	ldr	r0, [r0]
 10086d0:	eb00039f 	bl	1009554 <treetable_get_first_key>
 10086d4:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 10086d8:	03a00007 	moveq	r0, #7
 10086dc:	13a00000 	movne	r0, #0
 10086e0:	e8bd8010 	pop	{r4, pc}

010086e4 <treeset_get_last>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_last(TreeSet *set, void **out)
{
 10086e4:	e92d4010 	push	{r4, lr}
    if (treetable_get_last_key(set->t, out) == CC_ERR_KEY_NOT_FOUND)
 10086e8:	e5900000 	ldr	r0, [r0]
 10086ec:	eb0003a5 	bl	1009588 <treetable_get_last_key>
 10086f0:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 10086f4:	03a00007 	moveq	r0, #7
 10086f8:	13a00000 	movne	r0, #0
 10086fc:	e8bd8010 	pop	{r4, pc}

01008700 <treeset_get_greater_than>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_greater_than(TreeSet *set, void *element, void **out)
{
 1008700:	e92d4010 	push	{r4, lr}
    if (treetable_get_greater_than(set->t, element, out) == CC_ERR_KEY_NOT_FOUND)
 1008704:	e5900000 	ldr	r0, [r0]
 1008708:	eb0003ab 	bl	10095bc <treetable_get_greater_than>
 100870c:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 1008710:	03a00007 	moveq	r0, #7
 1008714:	13a00000 	movne	r0, #0
 1008718:	e8bd8010 	pop	{r4, pc}

0100871c <treeset_get_lesser_than>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_lesser_than(TreeSet *set, void *element, void **out)
{
 100871c:	e92d4010 	push	{r4, lr}
    if (treetable_get_lesser_than(set->t, element, out) == CC_ERR_KEY_NOT_FOUND)
 1008720:	e5900000 	ldr	r0, [r0]
 1008724:	eb0003e2 	bl	10096b4 <treetable_get_lesser_than>
 1008728:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 100872c:	03a00007 	moveq	r0, #7
 1008730:	13a00000 	movne	r0, #0
 1008734:	e8bd8010 	pop	{r4, pc}

01008738 <treeset_contains>:
 *
 * @return true if the specified element is an element of the set.
 */
bool treeset_contains(TreeSet *set, void *element)
{
    return treetable_contains_key(set->t, element);
 1008738:	e5900000 	ldr	r0, [r0]
 100873c:	ea00041b 	b	10097b0 <treetable_contains_key>

01008740 <treeset_size>:
 *
 * @return the size of the set.
 */
size_t treeset_size(TreeSet *set)
{
    return treetable_size(set->t);
 1008740:	e5900000 	ldr	r0, [r0]
 1008744:	ea000417 	b	10097a8 <treetable_size>

01008748 <treeset_foreach>:
 * @param[in] fn the operation function that is invoked on each element
 *               of the set
 */
void treeset_foreach(TreeSet *set, void (*fn) (const void*))
{
    treetable_foreach_key(set->t, fn);
 1008748:	e5900000 	ldr	r0, [r0]
 100874c:	ea0006e8 	b	100a2f4 <treetable_foreach_key>

01008750 <treeset_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] set the set on which this iterator will operate
 */
void treeset_iter_init(TreeSetIter *iter, TreeSet *set)
{
    treetable_iter_init(&(iter->i), set->t);
 1008750:	e5911000 	ldr	r1, [r1]
 1008754:	ea00073c 	b	100a44c <treetable_iter_init>

01008758 <treeset_iter_next>:
 *
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the TreeSet has been reached.
 */
enum cc_stat treeset_iter_next(TreeSetIter *iter, void **element)
{
 1008758:	e92d4010 	push	{r4, lr}
 100875c:	e24dd008 	sub	sp, sp, #8
 1008760:	e1a04001 	mov	r4, r1
    TreeTableEntry entry;

    if (treetable_iter_next(&(iter->i), &entry) != CC_OK)
 1008764:	e1a0100d 	mov	r1, sp
 1008768:	eb000743 	bl	100a47c <treetable_iter_next>
 100876c:	e3500000 	cmp	r0, #0
        return CC_ITER_END;

    *element = entry.key;
 1008770:	059d3000 	ldreq	r3, [sp]
        return CC_ITER_END;
 1008774:	13a00009 	movne	r0, #9
    *element = entry.key;
 1008778:	05843000 	streq	r3, [r4]
    return CC_OK;
}
 100877c:	e28dd008 	add	sp, sp, #8
 1008780:	e8bd8010 	pop	{r4, pc}

01008784 <treeset_iter_remove>:
 * @return CC_OK if the element was successfully removed, or
 * CC_ERR_KEY_NOT_FOUND.
 */
enum cc_stat treeset_iter_remove(TreeSetIter *iter, void **out)
{
    return treetable_iter_remove(&(iter->i), out);
 1008784:	ea000765 	b	100a520 <treetable_iter_remove>

01008788 <remove_node>:
 *
 * @param[in] table the table on which this operation is performed
 * @param[in] z the node that is being removed
 */
static void remove_node(TreeTable *table, RBNode *z)
{
 1008788:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100878c:	e1a04000 	mov	r4, r0
    RBNode *x;
    RBNode *y = z;

    int y_color = y->color;

    if (z->left == table->sentinel) {
 1008790:	e591c010 	ldr	ip, [r1, #16]
 1008794:	e5900004 	ldr	r0, [r0, #4]
    int y_color = y->color;
 1008798:	e5d12008 	ldrb	r2, [r1, #8]
    if (z->left == table->sentinel) {
 100879c:	e591e014 	ldr	lr, [r1, #20]
 10087a0:	e15c0000 	cmp	ip, r0
 10087a4:	0a00007e 	beq	10089a4 <remove_node+0x21c>
        x = z->right;
        transplant(table, z, z->right);
    } else if (z->right == table->sentinel) {
 10087a8:	e150000e 	cmp	r0, lr
 10087ac:	11a0300e 	movne	r3, lr
 10087b0:	1a000050 	bne	10088f8 <remove_node+0x170>
    if (u->parent == table->sentinel)
 10087b4:	e591300c 	ldr	r3, [r1, #12]
 10087b8:	e1500003 	cmp	r0, r3
        table->root = v;
 10087bc:	0584c000 	streq	ip, [r4]
    if (u->parent == table->sentinel)
 10087c0:	0a000003 	beq	10087d4 <remove_node+0x4c>
    else if (u == u->parent->left)
 10087c4:	e5930010 	ldr	r0, [r3, #16]
 10087c8:	e1510000 	cmp	r1, r0
        u->parent->left = v;
 10087cc:	0583c010 	streq	ip, [r3, #16]
        u->parent->right = v;
 10087d0:	1583c014 	strne	ip, [r3, #20]
        transplant(table, z, y);
        y->left = z->left;
        y->left->parent = y;
        y->color = z->color;
    }
    if (y_color == RB_BLACK)
 10087d4:	e3520001 	cmp	r2, #1
    v->parent = u->parent;
 10087d8:	e58c300c 	str	r3, [ip, #12]
    if (y_color == RB_BLACK)
 10087dc:	1a000069 	bne	1008988 <remove_node+0x200>
 10087e0:	e5943000 	ldr	r3, [r4]
    while (x != table->root && x->color == RB_BLACK) {
 10087e4:	e15c0003 	cmp	ip, r3
 10087e8:	0a00003e 	beq	10088e8 <remove_node+0x160>
 10087ec:	e5dc3008 	ldrb	r3, [ip, #8]
 10087f0:	e3530001 	cmp	r3, #1
 10087f4:	1a00003b 	bne	10088e8 <remove_node+0x160>
                w->color = RB_BLACK;
 10087f8:	e1a06002 	mov	r6, r2
                w->color = RB_RED;
 10087fc:	e3a07000 	mov	r7, #0
        if (x == x->parent->left) {
 1008800:	e59c300c 	ldr	r3, [ip, #12]
 1008804:	e5932010 	ldr	r2, [r3, #16]
 1008808:	e152000c 	cmp	r2, ip
 100880c:	0a00006f 	beq	10089d0 <remove_node+0x248>
            if (w->color == RB_RED) {
 1008810:	e5d20008 	ldrb	r0, [r2, #8]
 1008814:	e592e014 	ldr	lr, [r2, #20]
 1008818:	e3500000 	cmp	r0, #0
 100881c:	1a000013 	bne	1008870 <remove_node+0xe8>
                w->color = RB_BLACK;
 1008820:	e5c26008 	strb	r6, [r2, #8]
                x->parent->color = RB_RED;
 1008824:	e5c30008 	strb	r0, [r3, #8]
                rotate_right(table, x->parent);
 1008828:	e5945004 	ldr	r5, [r4, #4]
 */
static void rotate_right(TreeTable *table, RBNode *x)
{
    RBNode *y = x->left;

    x->left = y->right;
 100882c:	e583e010 	str	lr, [r3, #16]

    if (y->right != table->sentinel)
 1008830:	e155000e 	cmp	r5, lr
        y->right->parent = x;
 1008834:	158e300c 	strne	r3, [lr, #12]

    y->parent = x->parent;
 1008838:	e593000c 	ldr	r0, [r3, #12]

    if (x->parent == table->sentinel)
 100883c:	e1550000 	cmp	r5, r0
    y->parent = x->parent;
 1008840:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 1008844:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 1008848:	0a000003 	beq	100885c <remove_node+0xd4>
    else if (x == x->parent->right)
 100884c:	e590e014 	ldr	lr, [r0, #20]
 1008850:	e153000e 	cmp	r3, lr
        x->parent->right = y;
 1008854:	05802014 	streq	r2, [r0, #20]
    else
        x->parent->left = y;
 1008858:	15802010 	strne	r2, [r0, #16]

    y->right  = x;
 100885c:	e5823014 	str	r3, [r2, #20]
    x->parent = y;
 1008860:	e583200c 	str	r2, [r3, #12]
                w = x->parent->left;
 1008864:	e59c300c 	ldr	r3, [ip, #12]
 1008868:	e5932010 	ldr	r2, [r3, #16]
 100886c:	e592e014 	ldr	lr, [r2, #20]
            if (w->right->color == RB_BLACK && w->left->color == RB_BLACK) {
 1008870:	e5de5008 	ldrb	r5, [lr, #8]
 1008874:	e5920010 	ldr	r0, [r2, #16]
 1008878:	e3550001 	cmp	r5, #1
 100887c:	e5d05008 	ldrb	r5, [r0, #8]
 1008880:	0a00008c 	beq	1008ab8 <remove_node+0x330>
                if (w->left->color == RB_BLACK) {
 1008884:	e3550001 	cmp	r5, #1
 1008888:	0a000095 	beq	1008ae4 <remove_node+0x35c>
                w->color = x->parent->color;
 100888c:	e5d35008 	ldrb	r5, [r3, #8]
                x->parent->color = RB_BLACK;
 1008890:	e3a0c001 	mov	ip, #1
                w->color = x->parent->color;
 1008894:	e5c25008 	strb	r5, [r2, #8]
                x->parent->color = RB_BLACK;
 1008898:	e5c3c008 	strb	ip, [r3, #8]
                w->left->color = RB_BLACK;
 100889c:	e5c0c008 	strb	ip, [r0, #8]
                rotate_right(table, x->parent);
 10088a0:	e594c004 	ldr	ip, [r4, #4]
    x->left = y->right;
 10088a4:	e583e010 	str	lr, [r3, #16]
    if (y->right != table->sentinel)
 10088a8:	e15c000e 	cmp	ip, lr
        y->right->parent = x;
 10088ac:	158e300c 	strne	r3, [lr, #12]
    y->parent = x->parent;
 10088b0:	e593000c 	ldr	r0, [r3, #12]
    if (x->parent == table->sentinel)
 10088b4:	e15c0000 	cmp	ip, r0
    y->parent = x->parent;
 10088b8:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 10088bc:	01a0c002 	moveq	ip, r2
 10088c0:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 10088c4:	0a000005 	beq	10088e0 <remove_node+0x158>
    else if (x == x->parent->right)
 10088c8:	e590c014 	ldr	ip, [r0, #20]
 10088cc:	e15c0003 	cmp	ip, r3
        x->parent->right = y;
 10088d0:	0594c000 	ldreq	ip, [r4]
 10088d4:	1594c000 	ldrne	ip, [r4]
 10088d8:	05802014 	streq	r2, [r0, #20]
        x->parent->left = y;
 10088dc:	15802010 	strne	r2, [r0, #16]
    y->right  = x;
 10088e0:	e5823014 	str	r3, [r2, #20]
    x->parent = y;
 10088e4:	e583200c 	str	r2, [r3, #12]
    x->color = RB_BLACK;
 10088e8:	e3a03001 	mov	r3, #1
 10088ec:	e5cc3008 	strb	r3, [ip, #8]
 10088f0:	ea000024 	b	1008988 <remove_node+0x200>
    while (n->left != s)
 10088f4:	e1a03002 	mov	r3, r2
 10088f8:	e5932010 	ldr	r2, [r3, #16]
 10088fc:	e1500002 	cmp	r0, r2
 1008900:	1afffffb 	bne	10088f4 <remove_node+0x16c>
        if (y->parent == z) {
 1008904:	e593500c 	ldr	r5, [r3, #12]
        x = y->right;
 1008908:	e593c014 	ldr	ip, [r3, #20]
        y_color = y->color;
 100890c:	e5d32008 	ldrb	r2, [r3, #8]
        if (y->parent == z) {
 1008910:	e1550001 	cmp	r5, r1
            x->parent = y;
 1008914:	058c300c 	streq	r3, [ip, #12]
        if (y->parent == z) {
 1008918:	0a000009 	beq	1008944 <remove_node+0x1bc>
    if (u->parent == table->sentinel)
 100891c:	e1500005 	cmp	r0, r5
 1008920:	0a0000a2 	beq	1008bb0 <remove_node+0x428>
    else if (u == u->parent->left)
 1008924:	e5950010 	ldr	r0, [r5, #16]
 1008928:	e1530000 	cmp	r3, r0
        u->parent->right = v;
 100892c:	1585c014 	strne	ip, [r5, #20]
 1008930:	1591e014 	ldrne	lr, [r1, #20]
        u->parent->left = v;
 1008934:	0585c010 	streq	ip, [r5, #16]
    v->parent = u->parent;
 1008938:	e58c500c 	str	r5, [ip, #12]
            y->right = z->right;
 100893c:	e583e014 	str	lr, [r3, #20]
            y->right->parent = y;
 1008940:	e58e300c 	str	r3, [lr, #12]
    if (u->parent == table->sentinel)
 1008944:	e591000c 	ldr	r0, [r1, #12]
 1008948:	e594e004 	ldr	lr, [r4, #4]
 100894c:	e15e0000 	cmp	lr, r0
        table->root = v;
 1008950:	05843000 	streq	r3, [r4]
    if (u->parent == table->sentinel)
 1008954:	0a000003 	beq	1008968 <remove_node+0x1e0>
    else if (u == u->parent->left)
 1008958:	e590e010 	ldr	lr, [r0, #16]
 100895c:	e151000e 	cmp	r1, lr
        u->parent->left = v;
 1008960:	05803010 	streq	r3, [r0, #16]
        u->parent->right = v;
 1008964:	15803014 	strne	r3, [r0, #20]
        y->left = z->left;
 1008968:	e591e010 	ldr	lr, [r1, #16]
    v->parent = u->parent;
 100896c:	e583000c 	str	r0, [r3, #12]
        y->left = z->left;
 1008970:	e583e010 	str	lr, [r3, #16]
        y->left->parent = y;
 1008974:	e58e300c 	str	r3, [lr, #12]
        y->color = z->color;
 1008978:	e5d10008 	ldrb	r0, [r1, #8]
 100897c:	e5c30008 	strb	r0, [r3, #8]
    if (y_color == RB_BLACK)
 1008980:	e3520001 	cmp	r2, #1
 1008984:	0affff95 	beq	10087e0 <remove_node+0x58>
    table->mem_free(z);
 1008988:	e5943018 	ldr	r3, [r4, #24]
 100898c:	e1a00001 	mov	r0, r1
 1008990:	e12fff33 	blx	r3
    table->size--;
 1008994:	e5943008 	ldr	r3, [r4, #8]
 1008998:	e2433001 	sub	r3, r3, #1
 100899c:	e5843008 	str	r3, [r4, #8]
}
 10089a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (u->parent == table->sentinel)
 10089a4:	e591300c 	ldr	r3, [r1, #12]
 10089a8:	e15c0003 	cmp	ip, r3
        table->root = v;
 10089ac:	0584e000 	streq	lr, [r4]
    if (u->parent == table->sentinel)
 10089b0:	0a000003 	beq	10089c4 <remove_node+0x23c>
    else if (u == u->parent->left)
 10089b4:	e5930010 	ldr	r0, [r3, #16]
 10089b8:	e1510000 	cmp	r1, r0
        u->parent->left = v;
 10089bc:	0583e010 	streq	lr, [r3, #16]
        u->parent->right = v;
 10089c0:	1583e014 	strne	lr, [r3, #20]
    v->parent = u->parent;
 10089c4:	e58e300c 	str	r3, [lr, #12]
 10089c8:	e1a0c00e 	mov	ip, lr
 10089cc:	eaffffeb 	b	1008980 <remove_node+0x1f8>
            w = x->parent->right;
 10089d0:	e5932014 	ldr	r2, [r3, #20]
            if (w->color == RB_RED) {
 10089d4:	e5d2e008 	ldrb	lr, [r2, #8]
 10089d8:	e5920010 	ldr	r0, [r2, #16]
 10089dc:	e35e0000 	cmp	lr, #0
 10089e0:	1a000013 	bne	1008a34 <remove_node+0x2ac>
                w->color = RB_BLACK;
 10089e4:	e5c26008 	strb	r6, [r2, #8]
                x->parent->color = RB_RED;
 10089e8:	e5c3e008 	strb	lr, [r3, #8]
                rotate_left(table, x->parent);
 10089ec:	e594e004 	ldr	lr, [r4, #4]
 */
static void rotate_left(TreeTable *table, RBNode *x)
{
    RBNode *y = x->right;

    x->right = y->left;
 10089f0:	e5830014 	str	r0, [r3, #20]

    if (y->left != table->sentinel)
 10089f4:	e15e0000 	cmp	lr, r0
        y->left->parent = x;
 10089f8:	1580300c 	strne	r3, [r0, #12]

    y->parent = x->parent;
 10089fc:	e593000c 	ldr	r0, [r3, #12]

    if (x->parent == table->sentinel)
 1008a00:	e15e0000 	cmp	lr, r0
    y->parent = x->parent;
 1008a04:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 1008a08:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 1008a0c:	0a000003 	beq	1008a20 <remove_node+0x298>
    else if (x == x->parent->left)
 1008a10:	e590e010 	ldr	lr, [r0, #16]
 1008a14:	e153000e 	cmp	r3, lr
        x->parent->left = y;
 1008a18:	05802010 	streq	r2, [r0, #16]
    else
        x->parent->right = y;
 1008a1c:	15802014 	strne	r2, [r0, #20]

    y->left   = x;
 1008a20:	e5823010 	str	r3, [r2, #16]
    x->parent = y;
 1008a24:	e583200c 	str	r2, [r3, #12]
                w = x->parent->right;
 1008a28:	e59c300c 	ldr	r3, [ip, #12]
 1008a2c:	e5932014 	ldr	r2, [r3, #20]
 1008a30:	e5920010 	ldr	r0, [r2, #16]
            if (w->left->color == RB_BLACK && w->right->color == RB_BLACK) {
 1008a34:	e5d05008 	ldrb	r5, [r0, #8]
 1008a38:	e592e014 	ldr	lr, [r2, #20]
 1008a3c:	e3550001 	cmp	r5, #1
 1008a40:	e5de5008 	ldrb	r5, [lr, #8]
 1008a44:	0a00003e 	beq	1008b44 <remove_node+0x3bc>
                if (w->right->color == RB_BLACK) {
 1008a48:	e3550001 	cmp	r5, #1
 1008a4c:	0a00003f 	beq	1008b50 <remove_node+0x3c8>
                w->color = x->parent->color;
 1008a50:	e5d35008 	ldrb	r5, [r3, #8]
                x->parent->color = RB_BLACK;
 1008a54:	e3a0c001 	mov	ip, #1
                w->color = x->parent->color;
 1008a58:	e5c25008 	strb	r5, [r2, #8]
                x->parent->color = RB_BLACK;
 1008a5c:	e5c3c008 	strb	ip, [r3, #8]
                w->right->color = RB_BLACK;
 1008a60:	e5cec008 	strb	ip, [lr, #8]
                rotate_left(table, x->parent);
 1008a64:	e594c004 	ldr	ip, [r4, #4]
    x->right = y->left;
 1008a68:	e5830014 	str	r0, [r3, #20]
    if (y->left != table->sentinel)
 1008a6c:	e15c0000 	cmp	ip, r0
        y->left->parent = x;
 1008a70:	1580300c 	strne	r3, [r0, #12]
    y->parent = x->parent;
 1008a74:	e593000c 	ldr	r0, [r3, #12]
    if (x->parent == table->sentinel)
 1008a78:	e15c0000 	cmp	ip, r0
    y->parent = x->parent;
 1008a7c:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 1008a80:	01a0c002 	moveq	ip, r2
 1008a84:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 1008a88:	0a000005 	beq	1008aa4 <remove_node+0x31c>
    else if (x == x->parent->left)
 1008a8c:	e590c010 	ldr	ip, [r0, #16]
 1008a90:	e15c0003 	cmp	ip, r3
        x->parent->left = y;
 1008a94:	0594c000 	ldreq	ip, [r4]
 1008a98:	1594c000 	ldrne	ip, [r4]
 1008a9c:	05802010 	streq	r2, [r0, #16]
        x->parent->right = y;
 1008aa0:	15802014 	strne	r2, [r0, #20]
    y->left   = x;
 1008aa4:	e5823010 	str	r3, [r2, #16]
    x->parent = y;
 1008aa8:	e583200c 	str	r2, [r3, #12]
    x->color = RB_BLACK;
 1008aac:	e3a03001 	mov	r3, #1
 1008ab0:	e5cc3008 	strb	r3, [ip, #8]
 1008ab4:	eaffffb3 	b	1008988 <remove_node+0x200>
            if (w->right->color == RB_BLACK && w->left->color == RB_BLACK) {
 1008ab8:	e3550001 	cmp	r5, #1
 1008abc:	1affff72 	bne	100888c <remove_node+0x104>
                w->color = RB_RED;
 1008ac0:	e5c27008 	strb	r7, [r2, #8]
 1008ac4:	e1a0c003 	mov	ip, r3
 1008ac8:	e5942000 	ldr	r2, [r4]
    while (x != table->root && x->color == RB_BLACK) {
 1008acc:	e1530002 	cmp	r3, r2
 1008ad0:	0affff84 	beq	10088e8 <remove_node+0x160>
 1008ad4:	e5d33008 	ldrb	r3, [r3, #8]
 1008ad8:	e3530001 	cmp	r3, #1
 1008adc:	0affff47 	beq	1008800 <remove_node+0x78>
 1008ae0:	eaffff80 	b	10088e8 <remove_node+0x160>
                    w->color = RB_RED;
 1008ae4:	e3a03000 	mov	r3, #0
                    w->right->color = RB_BLACK;
 1008ae8:	e5ce5008 	strb	r5, [lr, #8]
                    w->color = RB_RED;
 1008aec:	e5c23008 	strb	r3, [r2, #8]
                    rotate_left(table, w);
 1008af0:	e5940004 	ldr	r0, [r4, #4]
    x->right = y->left;
 1008af4:	e59e3010 	ldr	r3, [lr, #16]
    if (y->left != table->sentinel)
 1008af8:	e1500003 	cmp	r0, r3
    x->right = y->left;
 1008afc:	e5823014 	str	r3, [r2, #20]
        y->left->parent = x;
 1008b00:	1583200c 	strne	r2, [r3, #12]
    y->parent = x->parent;
 1008b04:	e592300c 	ldr	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1008b08:	e1500003 	cmp	r0, r3
    y->parent = x->parent;
 1008b0c:	e58e300c 	str	r3, [lr, #12]
        table->root = y;
 1008b10:	0584e000 	streq	lr, [r4]
    if (x->parent == table->sentinel)
 1008b14:	0a000003 	beq	1008b28 <remove_node+0x3a0>
    else if (x == x->parent->left)
 1008b18:	e5930010 	ldr	r0, [r3, #16]
 1008b1c:	e1520000 	cmp	r2, r0
        x->parent->left = y;
 1008b20:	0583e010 	streq	lr, [r3, #16]
        x->parent->right = y;
 1008b24:	1583e014 	strne	lr, [r3, #20]
    y->left   = x;
 1008b28:	e58e2010 	str	r2, [lr, #16]
    x->parent = y;
 1008b2c:	e582e00c 	str	lr, [r2, #12]
                    w = x->parent->left;
 1008b30:	e59c300c 	ldr	r3, [ip, #12]
 1008b34:	e5932010 	ldr	r2, [r3, #16]
 1008b38:	e5920010 	ldr	r0, [r2, #16]
 1008b3c:	e592e014 	ldr	lr, [r2, #20]
 1008b40:	eaffff51 	b	100888c <remove_node+0x104>
            if (w->left->color == RB_BLACK && w->right->color == RB_BLACK) {
 1008b44:	e3550001 	cmp	r5, #1
 1008b48:	1affffc0 	bne	1008a50 <remove_node+0x2c8>
 1008b4c:	eaffffdb 	b	1008ac0 <remove_node+0x338>
                    w->color = RB_RED;
 1008b50:	e3a03000 	mov	r3, #0
                    w->left->color = RB_BLACK;
 1008b54:	e5c05008 	strb	r5, [r0, #8]
                    w->color = RB_RED;
 1008b58:	e5c23008 	strb	r3, [r2, #8]
                    rotate_right(table, w);
 1008b5c:	e594e004 	ldr	lr, [r4, #4]
    x->left = y->right;
 1008b60:	e5903014 	ldr	r3, [r0, #20]
    if (y->right != table->sentinel)
 1008b64:	e15e0003 	cmp	lr, r3
    x->left = y->right;
 1008b68:	e5823010 	str	r3, [r2, #16]
        y->right->parent = x;
 1008b6c:	1583200c 	strne	r2, [r3, #12]
    y->parent = x->parent;
 1008b70:	e592300c 	ldr	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1008b74:	e15e0003 	cmp	lr, r3
    y->parent = x->parent;
 1008b78:	e580300c 	str	r3, [r0, #12]
        table->root = y;
 1008b7c:	05840000 	streq	r0, [r4]
    if (x->parent == table->sentinel)
 1008b80:	0a000003 	beq	1008b94 <remove_node+0x40c>
    else if (x == x->parent->right)
 1008b84:	e593e014 	ldr	lr, [r3, #20]
 1008b88:	e152000e 	cmp	r2, lr
        x->parent->right = y;
 1008b8c:	05830014 	streq	r0, [r3, #20]
        x->parent->left = y;
 1008b90:	15830010 	strne	r0, [r3, #16]
    y->right  = x;
 1008b94:	e5802014 	str	r2, [r0, #20]
    x->parent = y;
 1008b98:	e582000c 	str	r0, [r2, #12]
                    w = x->parent->right;
 1008b9c:	e59c300c 	ldr	r3, [ip, #12]
 1008ba0:	e5932014 	ldr	r2, [r3, #20]
 1008ba4:	e592e014 	ldr	lr, [r2, #20]
 1008ba8:	e5920010 	ldr	r0, [r2, #16]
 1008bac:	eaffffa7 	b	1008a50 <remove_node+0x2c8>
        table->root = v;
 1008bb0:	e584c000 	str	ip, [r4]
 1008bb4:	e591e014 	ldr	lr, [r1, #20]
 1008bb8:	eaffff5e 	b	1008938 <remove_node+0x1b0>

01008bbc <treetable_test>:


#ifdef DEBUG
static int treetable_test(TreeTable *table, RBNode *node, int *nb)
{
    if (node == table->sentinel) {
 1008bbc:	e590c004 	ldr	ip, [r0, #4]
 1008bc0:	e15c0001 	cmp	ip, r1
 1008bc4:	0a000039 	beq	1008cb0 <treetable_test+0xf4>
        *nb = 1;
        return RB_ERROR_OK;
    }
    /* check tree order */
    if (node->left != table->sentinel) {
 1008bc8:	e5913010 	ldr	r3, [r1, #16]
{
 1008bcc:	e92d4070 	push	{r4, r5, r6, lr}
 1008bd0:	e1a06002 	mov	r6, r2
 1008bd4:	e24dd008 	sub	sp, sp, #8
 1008bd8:	e1a04001 	mov	r4, r1
    if (node->left != table->sentinel) {
 1008bdc:	e15c0003 	cmp	ip, r3
 1008be0:	e1a05000 	mov	r5, r0
 1008be4:	0a000006 	beq	1008c04 <treetable_test+0x48>
        int cmp = table->cmp(node->left->key, node->key);
 1008be8:	e5930000 	ldr	r0, [r3]
 1008bec:	e5911000 	ldr	r1, [r1]
 1008bf0:	e595300c 	ldr	r3, [r5, #12]
 1008bf4:	e12fff33 	blx	r3
        if (cmp >= 0)
 1008bf8:	e3500000 	cmp	r0, #0
 1008bfc:	b5953004 	ldrlt	r3, [r5, #4]
 1008c00:	aa000017 	bge	1008c64 <treetable_test+0xa8>
            return RB_ERROR_TREE_STRUCTURE;
    }
    if (node->right != table->sentinel) {
 1008c04:	e5942014 	ldr	r2, [r4, #20]
 1008c08:	e1520003 	cmp	r2, r3
 1008c0c:	0a000005 	beq	1008c28 <treetable_test+0x6c>
        int cmp = table->cmp(node->right->key, node->key);
 1008c10:	e5920000 	ldr	r0, [r2]
 1008c14:	e595300c 	ldr	r3, [r5, #12]
 1008c18:	e5941000 	ldr	r1, [r4]
 1008c1c:	e12fff33 	blx	r3
        if (cmp <= 0)
 1008c20:	e3500000 	cmp	r0, #0
 1008c24:	da00000e 	ble	1008c64 <treetable_test+0xa8>
            return RB_ERROR_TREE_STRUCTURE;
    }

    /* check red rule */
    if (node->color == RB_RED && node->parent->color == RB_RED) {
 1008c28:	e5d43008 	ldrb	r3, [r4, #8]
 1008c2c:	e3530000 	cmp	r3, #0
 1008c30:	1a000003 	bne	1008c44 <treetable_test+0x88>
 1008c34:	e594300c 	ldr	r3, [r4, #12]
 1008c38:	e5d30008 	ldrb	r0, [r3, #8]
 1008c3c:	e3500000 	cmp	r0, #0
 1008c40:	0a000005 	beq	1008c5c <treetable_test+0xa0>
    }

    int nb_left;
    int nb_right;

    int left_err = treetable_test(table, node->left, &nb_left);
 1008c44:	e1a0200d 	mov	r2, sp
 1008c48:	e5941010 	ldr	r1, [r4, #16]
 1008c4c:	e1a00005 	mov	r0, r5
 1008c50:	ebffffd9 	bl	1008bbc <treetable_test>

    /* propagate the descendant errors all the way up */
    if (left_err != RB_ERROR_OK)
 1008c54:	e3500004 	cmp	r0, #4
 1008c58:	0a000004 	beq	1008c70 <treetable_test+0xb4>
        *nb = nb_left + 1;
    else
        *nb = nb_left;

    return RB_ERROR_OK;
}
 1008c5c:	e28dd008 	add	sp, sp, #8
 1008c60:	e8bd8070 	pop	{r4, r5, r6, pc}
            return RB_ERROR_TREE_STRUCTURE;
 1008c64:	e3a00002 	mov	r0, #2
}
 1008c68:	e28dd008 	add	sp, sp, #8
 1008c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    int right_err = treetable_test(table, node->right, &nb_right);
 1008c70:	e1a00005 	mov	r0, r5
 1008c74:	e28d2004 	add	r2, sp, #4
 1008c78:	e5941014 	ldr	r1, [r4, #20]
 1008c7c:	ebffffce 	bl	1008bbc <treetable_test>
    if (right_err != RB_ERROR_OK)
 1008c80:	e3500004 	cmp	r0, #4
 1008c84:	1afffff4 	bne	1008c5c <treetable_test+0xa0>
    if (nb_left != nb_right)
 1008c88:	e59d3000 	ldr	r3, [sp]
 1008c8c:	e59d2004 	ldr	r2, [sp, #4]
 1008c90:	e1530002 	cmp	r3, r2
        return RB_ERROR_BLACK_HEIGHT;
 1008c94:	13a00001 	movne	r0, #1
    if (nb_left != nb_right)
 1008c98:	1affffef 	bne	1008c5c <treetable_test+0xa0>
    if (node->color == RB_BLACK)
 1008c9c:	e5d42008 	ldrb	r2, [r4, #8]
 1008ca0:	e3520001 	cmp	r2, #1
        *nb = nb_left + 1;
 1008ca4:	02833001 	addeq	r3, r3, #1
        *nb = nb_left;
 1008ca8:	e5863000 	str	r3, [r6]
 1008cac:	eaffffea 	b	1008c5c <treetable_test+0xa0>
        *nb = 1;
 1008cb0:	e3a03001 	mov	r3, #1
        return RB_ERROR_OK;
 1008cb4:	e3a00004 	mov	r0, #4
        *nb = 1;
 1008cb8:	e5823000 	str	r3, [r2]
}
 1008cbc:	e12fff1e 	bx	lr

01008cc0 <tree_destroy.part.0>:
static void tree_destroy(TreeTable *table, RBNode *n)
 1008cc0:	e92d4070 	push	{r4, r5, r6, lr}
 1008cc4:	e1a05001 	mov	r5, r1
    if (n == table->sentinel)
 1008cc8:	e5903004 	ldr	r3, [r0, #4]
static void tree_destroy(TreeTable *table, RBNode *n)
 1008ccc:	e1a04000 	mov	r4, r0
    tree_destroy(table, n->left);
 1008cd0:	e5911010 	ldr	r1, [r1, #16]
    if (n == table->sentinel)
 1008cd4:	e1510003 	cmp	r1, r3
 1008cd8:	0a000001 	beq	1008ce4 <tree_destroy.part.0+0x24>
 1008cdc:	ebfffff7 	bl	1008cc0 <tree_destroy.part.0>
 1008ce0:	e5943004 	ldr	r3, [r4, #4]
    tree_destroy(table, n->right);
 1008ce4:	e5951014 	ldr	r1, [r5, #20]
    if (n == table->sentinel)
 1008ce8:	e1510003 	cmp	r1, r3
 1008cec:	0a000001 	beq	1008cf8 <tree_destroy.part.0+0x38>
 1008cf0:	e1a00004 	mov	r0, r4
 1008cf4:	ebfffff1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008cf8:	e5943018 	ldr	r3, [r4, #24]
 1008cfc:	e1a00005 	mov	r0, r5
}
 1008d00:	e8bd4070 	pop	{r4, r5, r6, lr}
    table->mem_free(n);
 1008d04:	e12fff13 	bx	r3

01008d08 <treetable_conf_init>:
    conf->mem_alloc  = malloc;
 1008d08:	e30c17b9 	movw	r1, #51129	; 0xc7b9
    conf->mem_calloc = calloc;
 1008d0c:	e30b2bb9 	movw	r2, #48057	; 0xbbb9
    conf->mem_free   = free;
 1008d10:	e30c37c9 	movw	r3, #51145	; 0xc7c9
    conf->mem_alloc  = malloc;
 1008d14:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1008d18:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1008d1c:	e3403101 	movt	r3, #257	; 0x101
    conf->cmp        = NULL;
 1008d20:	e3a0c000 	mov	ip, #0
    conf->mem_free   = free;
 1008d24:	e980000e 	stmib	r0, {r1, r2, r3}
    conf->cmp        = NULL;
 1008d28:	e580c000 	str	ip, [r0]
}
 1008d2c:	e12fff1e 	bx	lr

01008d30 <treetable_new>:
{
 1008d30:	e92d4070 	push	{r4, r5, r6, lr}
 1008d34:	e1a06000 	mov	r6, r0
 1008d38:	e1a05001 	mov	r5, r1
    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
 1008d3c:	e3a00001 	mov	r0, #1
 1008d40:	e3a0101c 	mov	r1, #28
 1008d44:	fa004b9b 	blx	101bbb8 <calloc>
    if (!table)
 1008d48:	e2504000 	subs	r4, r0, #0
 1008d4c:	0a000016 	beq	1008dac <treetable_new+0x7c>
    RBNode *sentinel = conf->mem_calloc(1, sizeof(RBNode));
 1008d50:	e3a01018 	mov	r1, #24
 1008d54:	e3a00001 	mov	r0, #1
 1008d58:	fa004b96 	blx	101bbb8 <calloc>
    if (!sentinel) {
 1008d5c:	e2503000 	subs	r3, r0, #0
 1008d60:	0a000013 	beq	1008db4 <treetable_new+0x84>
    table->mem_alloc  = conf->mem_alloc;
 1008d64:	e30c07b9 	movw	r0, #51129	; 0xc7b9
    table->mem_calloc = conf->mem_calloc;
 1008d68:	e30b1bb9 	movw	r1, #48057	; 0xbbb9
    table->mem_free   = conf->mem_free;
 1008d6c:	e30c27c9 	movw	r2, #51145	; 0xc7c9
    table->size       = 0;
 1008d70:	e3a0c000 	mov	ip, #0
    table->mem_alloc  = conf->mem_alloc;
 1008d74:	e3400101 	movt	r0, #257	; 0x101
    table->mem_calloc = conf->mem_calloc;
 1008d78:	e3401101 	movt	r1, #257	; 0x101
    table->mem_free   = conf->mem_free;
 1008d7c:	e3402101 	movt	r2, #257	; 0x101
    sentinel->color   = RB_BLACK;
 1008d80:	e3a0e001 	mov	lr, #1
    table->mem_calloc = conf->mem_calloc;
 1008d84:	e1c401f0 	strd	r0, [r4, #16]
    return CC_OK;
 1008d88:	e1a0000c 	mov	r0, ip
    table->cmp        = conf->cmp;
 1008d8c:	e584600c 	str	r6, [r4, #12]
    table->root       = sentinel;
 1008d90:	e5843000 	str	r3, [r4]
 1008d94:	e5843004 	str	r3, [r4, #4]
    *tt = table;
 1008d98:	e5854000 	str	r4, [r5]
    table->mem_free   = conf->mem_free;
 1008d9c:	e5842018 	str	r2, [r4, #24]
    sentinel->color   = RB_BLACK;
 1008da0:	e5c3e008 	strb	lr, [r3, #8]
    table->size       = 0;
 1008da4:	e584c008 	str	ip, [r4, #8]
    return CC_OK;
 1008da8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1008dac:	e3a00001 	mov	r0, #1
}
 1008db0:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 1008db4:	e1a00004 	mov	r0, r4
 1008db8:	fa004e82 	blx	101c7c8 <free>
        return CC_ERR_ALLOC;
 1008dbc:	e3a00001 	mov	r0, #1
 1008dc0:	e8bd8070 	pop	{r4, r5, r6, pc}

01008dc4 <treetable_new_conf>:
{
 1008dc4:	e92d4070 	push	{r4, r5, r6, lr}
 1008dc8:	e1a05000 	mov	r5, r0
    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
 1008dcc:	e5903008 	ldr	r3, [r0, #8]
{
 1008dd0:	e1a06001 	mov	r6, r1
    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
 1008dd4:	e3a00001 	mov	r0, #1
 1008dd8:	e3a0101c 	mov	r1, #28
 1008ddc:	e12fff33 	blx	r3
    if (!table)
 1008de0:	e2504000 	subs	r4, r0, #0
 1008de4:	0a000015 	beq	1008e40 <treetable_new_conf+0x7c>
    RBNode *sentinel = conf->mem_calloc(1, sizeof(RBNode));
 1008de8:	e5953008 	ldr	r3, [r5, #8]
 1008dec:	e3a01018 	mov	r1, #24
 1008df0:	e3a00001 	mov	r0, #1
 1008df4:	e12fff33 	blx	r3
    if (!sentinel) {
 1008df8:	e2503000 	subs	r3, r0, #0
 1008dfc:	0a000011 	beq	1008e48 <treetable_new_conf+0x84>
    sentinel->color   = RB_BLACK;
 1008e00:	e3a01001 	mov	r1, #1
    table->size       = 0;
 1008e04:	e3a02000 	mov	r2, #0
    sentinel->color   = RB_BLACK;
 1008e08:	e5c31008 	strb	r1, [r3, #8]
    table->mem_free   = conf->mem_free;
 1008e0c:	e1c500d8 	ldrd	r0, [r5, #8]
    table->cmp        = conf->cmp;
 1008e10:	e595e000 	ldr	lr, [r5]
    table->mem_alloc  = conf->mem_alloc;
 1008e14:	e595c004 	ldr	ip, [r5, #4]
    table->mem_calloc = conf->mem_calloc;
 1008e18:	e5840014 	str	r0, [r4, #20]
    return CC_OK;
 1008e1c:	e1a00002 	mov	r0, r2
    table->cmp        = conf->cmp;
 1008e20:	e584e00c 	str	lr, [r4, #12]
    table->mem_alloc  = conf->mem_alloc;
 1008e24:	e584c010 	str	ip, [r4, #16]
    table->mem_free   = conf->mem_free;
 1008e28:	e5841018 	str	r1, [r4, #24]
    table->root       = sentinel;
 1008e2c:	e5843000 	str	r3, [r4]
    table->sentinel   = sentinel;
 1008e30:	e5843004 	str	r3, [r4, #4]
    table->size       = 0;
 1008e34:	e5842008 	str	r2, [r4, #8]
    *tt = table;
 1008e38:	e5864000 	str	r4, [r6]
    return CC_OK;
 1008e3c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1008e40:	e3a00001 	mov	r0, #1
}
 1008e44:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 1008e48:	e1a00004 	mov	r0, r4
 1008e4c:	e595300c 	ldr	r3, [r5, #12]
 1008e50:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1008e54:	e3a00001 	mov	r0, #1
 1008e58:	e8bd8070 	pop	{r4, r5, r6, pc}

01008e5c <treetable_destroy>:
{
 1008e5c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1008e60:	e1a04000 	mov	r4, r0
    tree_destroy(table, table->root);
 1008e64:	e5907000 	ldr	r7, [r0]
    if (n == table->sentinel)
 1008e68:	e5903004 	ldr	r3, [r0, #4]
 1008e6c:	e1570003 	cmp	r7, r3
 1008e70:	0a000177 	beq	1009454 <treetable_destroy+0x5f8>
    tree_destroy(table, n->left);
 1008e74:	e5975010 	ldr	r5, [r7, #16]
    if (n == table->sentinel)
 1008e78:	e1530005 	cmp	r3, r5
 1008e7c:	0a0000b6 	beq	100915c <treetable_destroy+0x300>
    tree_destroy(table, n->left);
 1008e80:	e5956010 	ldr	r6, [r5, #16]
    if (n == table->sentinel)
 1008e84:	e1530006 	cmp	r3, r6
 1008e88:	0a000056 	beq	1008fe8 <treetable_destroy+0x18c>
    tree_destroy(table, n->left);
 1008e8c:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 1008e90:	e1530008 	cmp	r3, r8
 1008e94:	0a000026 	beq	1008f34 <treetable_destroy+0xd8>
    tree_destroy(table, n->left);
 1008e98:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1008e9c:	e1530009 	cmp	r3, r9
 1008ea0:	0a00000e 	beq	1008ee0 <treetable_destroy+0x84>
    tree_destroy(table, n->left);
 1008ea4:	e5992010 	ldr	r2, [r9, #16]
    if (n == table->sentinel)
 1008ea8:	e1530002 	cmp	r3, r2
 1008eac:	0a000002 	beq	1008ebc <treetable_destroy+0x60>
 1008eb0:	e1a01002 	mov	r1, r2
 1008eb4:	ebffff81 	bl	1008cc0 <tree_destroy.part.0>
 1008eb8:	e5942004 	ldr	r2, [r4, #4]
    tree_destroy(table, n->right);
 1008ebc:	e5991014 	ldr	r1, [r9, #20]
    if (n == table->sentinel)
 1008ec0:	e1510002 	cmp	r1, r2
 1008ec4:	0a000001 	beq	1008ed0 <treetable_destroy+0x74>
 1008ec8:	e1a00004 	mov	r0, r4
 1008ecc:	ebffff7b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008ed0:	e1a00009 	mov	r0, r9
 1008ed4:	e5943018 	ldr	r3, [r4, #24]
 1008ed8:	e12fff33 	blx	r3
 1008edc:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1008ee0:	e598a014 	ldr	sl, [r8, #20]
    if (n == table->sentinel)
 1008ee4:	e15a0009 	cmp	sl, r9
 1008ee8:	0a00000d 	beq	1008f24 <treetable_destroy+0xc8>
    tree_destroy(table, n->left);
 1008eec:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1008ef0:	e1510009 	cmp	r1, r9
 1008ef4:	0a000002 	beq	1008f04 <treetable_destroy+0xa8>
 1008ef8:	e1a00004 	mov	r0, r4
 1008efc:	ebffff6f 	bl	1008cc0 <tree_destroy.part.0>
 1008f00:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1008f04:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1008f08:	e1510009 	cmp	r1, r9
 1008f0c:	0a000001 	beq	1008f18 <treetable_destroy+0xbc>
 1008f10:	e1a00004 	mov	r0, r4
 1008f14:	ebffff69 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008f18:	e1a0000a 	mov	r0, sl
 1008f1c:	e5943018 	ldr	r3, [r4, #24]
 1008f20:	e12fff33 	blx	r3
 1008f24:	e1a00008 	mov	r0, r8
 1008f28:	e5943018 	ldr	r3, [r4, #24]
 1008f2c:	e12fff33 	blx	r3
 1008f30:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008f34:	e5969014 	ldr	r9, [r6, #20]
    if (n == table->sentinel)
 1008f38:	e1590008 	cmp	r9, r8
 1008f3c:	0a000025 	beq	1008fd8 <treetable_destroy+0x17c>
    tree_destroy(table, n->left);
 1008f40:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1008f44:	e15a0008 	cmp	sl, r8
 1008f48:	0a00000e 	beq	1008f88 <treetable_destroy+0x12c>
    tree_destroy(table, n->left);
 1008f4c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1008f50:	e1510008 	cmp	r1, r8
 1008f54:	0a000002 	beq	1008f64 <treetable_destroy+0x108>
 1008f58:	e1a00004 	mov	r0, r4
 1008f5c:	ebffff57 	bl	1008cc0 <tree_destroy.part.0>
 1008f60:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008f64:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1008f68:	e1510008 	cmp	r1, r8
 1008f6c:	0a000001 	beq	1008f78 <treetable_destroy+0x11c>
 1008f70:	e1a00004 	mov	r0, r4
 1008f74:	ebffff51 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008f78:	e1a0000a 	mov	r0, sl
 1008f7c:	e5943018 	ldr	r3, [r4, #24]
 1008f80:	e12fff33 	blx	r3
 1008f84:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008f88:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1008f8c:	e15a0008 	cmp	sl, r8
 1008f90:	0a00000d 	beq	1008fcc <treetable_destroy+0x170>
    tree_destroy(table, n->left);
 1008f94:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1008f98:	e1510008 	cmp	r1, r8
 1008f9c:	0a000002 	beq	1008fac <treetable_destroy+0x150>
 1008fa0:	e1a00004 	mov	r0, r4
 1008fa4:	ebffff45 	bl	1008cc0 <tree_destroy.part.0>
 1008fa8:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008fac:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1008fb0:	e1510008 	cmp	r1, r8
 1008fb4:	0a000001 	beq	1008fc0 <treetable_destroy+0x164>
 1008fb8:	e1a00004 	mov	r0, r4
 1008fbc:	ebffff3f 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008fc0:	e1a0000a 	mov	r0, sl
 1008fc4:	e5943018 	ldr	r3, [r4, #24]
 1008fc8:	e12fff33 	blx	r3
 1008fcc:	e1a00009 	mov	r0, r9
 1008fd0:	e5943018 	ldr	r3, [r4, #24]
 1008fd4:	e12fff33 	blx	r3
 1008fd8:	e1a00006 	mov	r0, r6
 1008fdc:	e5943018 	ldr	r3, [r4, #24]
 1008fe0:	e12fff33 	blx	r3
 1008fe4:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1008fe8:	e5958014 	ldr	r8, [r5, #20]
    if (n == table->sentinel)
 1008fec:	e1580006 	cmp	r8, r6
 1008ff0:	0a000055 	beq	100914c <treetable_destroy+0x2f0>
    tree_destroy(table, n->left);
 1008ff4:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1008ff8:	e1590006 	cmp	r9, r6
 1008ffc:	0a000026 	beq	100909c <treetable_destroy+0x240>
    tree_destroy(table, n->left);
 1009000:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009004:	e15a0006 	cmp	sl, r6
 1009008:	0a00000e 	beq	1009048 <treetable_destroy+0x1ec>
    tree_destroy(table, n->left);
 100900c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009010:	e1510006 	cmp	r1, r6
 1009014:	0a000002 	beq	1009024 <treetable_destroy+0x1c8>
 1009018:	e1a00004 	mov	r0, r4
 100901c:	ebffff27 	bl	1008cc0 <tree_destroy.part.0>
 1009020:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009024:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009028:	e1510006 	cmp	r1, r6
 100902c:	0a000001 	beq	1009038 <treetable_destroy+0x1dc>
 1009030:	e1a00004 	mov	r0, r4
 1009034:	ebffff21 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009038:	e1a0000a 	mov	r0, sl
 100903c:	e5943018 	ldr	r3, [r4, #24]
 1009040:	e12fff33 	blx	r3
 1009044:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009048:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100904c:	e15a0006 	cmp	sl, r6
 1009050:	0a00000d 	beq	100908c <treetable_destroy+0x230>
    tree_destroy(table, n->left);
 1009054:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009058:	e1510006 	cmp	r1, r6
 100905c:	0a000002 	beq	100906c <treetable_destroy+0x210>
 1009060:	e1a00004 	mov	r0, r4
 1009064:	ebffff15 	bl	1008cc0 <tree_destroy.part.0>
 1009068:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 100906c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009070:	e1510006 	cmp	r1, r6
 1009074:	0a000001 	beq	1009080 <treetable_destroy+0x224>
 1009078:	e1a00004 	mov	r0, r4
 100907c:	ebffff0f 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009080:	e1a0000a 	mov	r0, sl
 1009084:	e5943018 	ldr	r3, [r4, #24]
 1009088:	e12fff33 	blx	r3
 100908c:	e1a00009 	mov	r0, r9
 1009090:	e5943018 	ldr	r3, [r4, #24]
 1009094:	e12fff33 	blx	r3
 1009098:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 100909c:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 10090a0:	e1590006 	cmp	r9, r6
 10090a4:	0a000025 	beq	1009140 <treetable_destroy+0x2e4>
    tree_destroy(table, n->left);
 10090a8:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 10090ac:	e15a0006 	cmp	sl, r6
 10090b0:	0a00000e 	beq	10090f0 <treetable_destroy+0x294>
    tree_destroy(table, n->left);
 10090b4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10090b8:	e1510006 	cmp	r1, r6
 10090bc:	0a000002 	beq	10090cc <treetable_destroy+0x270>
 10090c0:	e1a00004 	mov	r0, r4
 10090c4:	ebfffefd 	bl	1008cc0 <tree_destroy.part.0>
 10090c8:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 10090cc:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10090d0:	e1510006 	cmp	r1, r6
 10090d4:	0a000001 	beq	10090e0 <treetable_destroy+0x284>
 10090d8:	e1a00004 	mov	r0, r4
 10090dc:	ebfffef7 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10090e0:	e1a0000a 	mov	r0, sl
 10090e4:	e5943018 	ldr	r3, [r4, #24]
 10090e8:	e12fff33 	blx	r3
 10090ec:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 10090f0:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 10090f4:	e15a0006 	cmp	sl, r6
 10090f8:	0a00000d 	beq	1009134 <treetable_destroy+0x2d8>
    tree_destroy(table, n->left);
 10090fc:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009100:	e1510006 	cmp	r1, r6
 1009104:	0a000002 	beq	1009114 <treetable_destroy+0x2b8>
 1009108:	e1a00004 	mov	r0, r4
 100910c:	ebfffeeb 	bl	1008cc0 <tree_destroy.part.0>
 1009110:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009114:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009118:	e1510006 	cmp	r1, r6
 100911c:	0a000001 	beq	1009128 <treetable_destroy+0x2cc>
 1009120:	e1a00004 	mov	r0, r4
 1009124:	ebfffee5 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009128:	e1a0000a 	mov	r0, sl
 100912c:	e5943018 	ldr	r3, [r4, #24]
 1009130:	e12fff33 	blx	r3
 1009134:	e1a00009 	mov	r0, r9
 1009138:	e5943018 	ldr	r3, [r4, #24]
 100913c:	e12fff33 	blx	r3
 1009140:	e1a00008 	mov	r0, r8
 1009144:	e5943018 	ldr	r3, [r4, #24]
 1009148:	e12fff33 	blx	r3
 100914c:	e1a00005 	mov	r0, r5
 1009150:	e5943018 	ldr	r3, [r4, #24]
 1009154:	e12fff33 	blx	r3
 1009158:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100915c:	e5976014 	ldr	r6, [r7, #20]
    if (n == table->sentinel)
 1009160:	e1560005 	cmp	r6, r5
 1009164:	0a0000b6 	beq	1009444 <treetable_destroy+0x5e8>
    tree_destroy(table, n->left);
 1009168:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 100916c:	e1580005 	cmp	r8, r5
 1009170:	0a000056 	beq	10092d0 <treetable_destroy+0x474>
    tree_destroy(table, n->left);
 1009174:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1009178:	e1590005 	cmp	r9, r5
 100917c:	0a000026 	beq	100921c <treetable_destroy+0x3c0>
    tree_destroy(table, n->left);
 1009180:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009184:	e15a0005 	cmp	sl, r5
 1009188:	0a00000e 	beq	10091c8 <treetable_destroy+0x36c>
    tree_destroy(table, n->left);
 100918c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009190:	e1510005 	cmp	r1, r5
 1009194:	0a000002 	beq	10091a4 <treetable_destroy+0x348>
 1009198:	e1a00004 	mov	r0, r4
 100919c:	ebfffec7 	bl	1008cc0 <tree_destroy.part.0>
 10091a0:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10091a4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10091a8:	e1510005 	cmp	r1, r5
 10091ac:	0a000001 	beq	10091b8 <treetable_destroy+0x35c>
 10091b0:	e1a00004 	mov	r0, r4
 10091b4:	ebfffec1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10091b8:	e1a0000a 	mov	r0, sl
 10091bc:	e5943018 	ldr	r3, [r4, #24]
 10091c0:	e12fff33 	blx	r3
 10091c4:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10091c8:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 10091cc:	e15a0005 	cmp	sl, r5
 10091d0:	0a00000d 	beq	100920c <treetable_destroy+0x3b0>
    tree_destroy(table, n->left);
 10091d4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10091d8:	e1510005 	cmp	r1, r5
 10091dc:	0a000002 	beq	10091ec <treetable_destroy+0x390>
 10091e0:	e1a00004 	mov	r0, r4
 10091e4:	ebfffeb5 	bl	1008cc0 <tree_destroy.part.0>
 10091e8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10091ec:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10091f0:	e1510005 	cmp	r1, r5
 10091f4:	0a000001 	beq	1009200 <treetable_destroy+0x3a4>
 10091f8:	e1a00004 	mov	r0, r4
 10091fc:	ebfffeaf 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009200:	e1a0000a 	mov	r0, sl
 1009204:	e5943018 	ldr	r3, [r4, #24]
 1009208:	e12fff33 	blx	r3
 100920c:	e1a00009 	mov	r0, r9
 1009210:	e5943018 	ldr	r3, [r4, #24]
 1009214:	e12fff33 	blx	r3
 1009218:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100921c:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 1009220:	e1590005 	cmp	r9, r5
 1009224:	0a000025 	beq	10092c0 <treetable_destroy+0x464>
    tree_destroy(table, n->left);
 1009228:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100922c:	e15a0005 	cmp	sl, r5
 1009230:	0a00000e 	beq	1009270 <treetable_destroy+0x414>
    tree_destroy(table, n->left);
 1009234:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009238:	e1510005 	cmp	r1, r5
 100923c:	0a000002 	beq	100924c <treetable_destroy+0x3f0>
 1009240:	e1a00004 	mov	r0, r4
 1009244:	ebfffe9d 	bl	1008cc0 <tree_destroy.part.0>
 1009248:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100924c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009250:	e1510005 	cmp	r1, r5
 1009254:	0a000001 	beq	1009260 <treetable_destroy+0x404>
 1009258:	e1a00004 	mov	r0, r4
 100925c:	ebfffe97 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009260:	e1a0000a 	mov	r0, sl
 1009264:	e5943018 	ldr	r3, [r4, #24]
 1009268:	e12fff33 	blx	r3
 100926c:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009270:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009274:	e15a0005 	cmp	sl, r5
 1009278:	0a00000d 	beq	10092b4 <treetable_destroy+0x458>
    tree_destroy(table, n->left);
 100927c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009280:	e1510005 	cmp	r1, r5
 1009284:	0a000002 	beq	1009294 <treetable_destroy+0x438>
 1009288:	e1a00004 	mov	r0, r4
 100928c:	ebfffe8b 	bl	1008cc0 <tree_destroy.part.0>
 1009290:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009294:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009298:	e1510005 	cmp	r1, r5
 100929c:	0a000001 	beq	10092a8 <treetable_destroy+0x44c>
 10092a0:	e1a00004 	mov	r0, r4
 10092a4:	ebfffe85 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10092a8:	e1a0000a 	mov	r0, sl
 10092ac:	e5943018 	ldr	r3, [r4, #24]
 10092b0:	e12fff33 	blx	r3
 10092b4:	e1a00009 	mov	r0, r9
 10092b8:	e5943018 	ldr	r3, [r4, #24]
 10092bc:	e12fff33 	blx	r3
 10092c0:	e1a00008 	mov	r0, r8
 10092c4:	e5943018 	ldr	r3, [r4, #24]
 10092c8:	e12fff33 	blx	r3
 10092cc:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10092d0:	e5968014 	ldr	r8, [r6, #20]
    if (n == table->sentinel)
 10092d4:	e1580005 	cmp	r8, r5
 10092d8:	0a000056 	beq	1009438 <treetable_destroy+0x5dc>
    tree_destroy(table, n->left);
 10092dc:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 10092e0:	e1590005 	cmp	r9, r5
 10092e4:	0a000026 	beq	1009384 <treetable_destroy+0x528>
    tree_destroy(table, n->left);
 10092e8:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 10092ec:	e15a0005 	cmp	sl, r5
 10092f0:	0a00000e 	beq	1009330 <treetable_destroy+0x4d4>
    tree_destroy(table, n->left);
 10092f4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10092f8:	e1510005 	cmp	r1, r5
 10092fc:	0a000002 	beq	100930c <treetable_destroy+0x4b0>
 1009300:	e1a00004 	mov	r0, r4
 1009304:	ebfffe6d 	bl	1008cc0 <tree_destroy.part.0>
 1009308:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100930c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009310:	e1510005 	cmp	r1, r5
 1009314:	0a000001 	beq	1009320 <treetable_destroy+0x4c4>
 1009318:	e1a00004 	mov	r0, r4
 100931c:	ebfffe67 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009320:	e1a0000a 	mov	r0, sl
 1009324:	e5943018 	ldr	r3, [r4, #24]
 1009328:	e12fff33 	blx	r3
 100932c:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009330:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009334:	e15a0005 	cmp	sl, r5
 1009338:	0a00000d 	beq	1009374 <treetable_destroy+0x518>
    tree_destroy(table, n->left);
 100933c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009340:	e1510005 	cmp	r1, r5
 1009344:	0a000002 	beq	1009354 <treetable_destroy+0x4f8>
 1009348:	e1a00004 	mov	r0, r4
 100934c:	ebfffe5b 	bl	1008cc0 <tree_destroy.part.0>
 1009350:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009354:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009358:	e1510005 	cmp	r1, r5
 100935c:	0a000001 	beq	1009368 <treetable_destroy+0x50c>
 1009360:	e1a00004 	mov	r0, r4
 1009364:	ebfffe55 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009368:	e1a0000a 	mov	r0, sl
 100936c:	e5943018 	ldr	r3, [r4, #24]
 1009370:	e12fff33 	blx	r3
 1009374:	e1a00009 	mov	r0, r9
 1009378:	e5943018 	ldr	r3, [r4, #24]
 100937c:	e12fff33 	blx	r3
 1009380:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009384:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 1009388:	e1590005 	cmp	r9, r5
 100938c:	0a000026 	beq	100942c <treetable_destroy+0x5d0>
    tree_destroy(table, n->left);
 1009390:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009394:	e15a0005 	cmp	sl, r5
 1009398:	0a00000e 	beq	10093d8 <treetable_destroy+0x57c>
    tree_destroy(table, n->left);
 100939c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10093a0:	e1510005 	cmp	r1, r5
 10093a4:	0a000002 	beq	10093b4 <treetable_destroy+0x558>
 10093a8:	e1a00004 	mov	r0, r4
 10093ac:	ebfffe43 	bl	1008cc0 <tree_destroy.part.0>
 10093b0:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10093b4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10093b8:	e1550001 	cmp	r5, r1
 10093bc:	0a000001 	beq	10093c8 <treetable_destroy+0x56c>
 10093c0:	e1a00004 	mov	r0, r4
 10093c4:	ebfffe3d 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10093c8:	e1a0000a 	mov	r0, sl
 10093cc:	e5943018 	ldr	r3, [r4, #24]
 10093d0:	e12fff33 	blx	r3
 10093d4:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10093d8:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 10093dc:	e15a0005 	cmp	sl, r5
 10093e0:	0a00000e 	beq	1009420 <treetable_destroy+0x5c4>
    tree_destroy(table, n->left);
 10093e4:	e59a3010 	ldr	r3, [sl, #16]
    if (n == table->sentinel)
 10093e8:	e1550003 	cmp	r5, r3
 10093ec:	0a000003 	beq	1009400 <treetable_destroy+0x5a4>
 10093f0:	e1a01003 	mov	r1, r3
 10093f4:	e1a00004 	mov	r0, r4
 10093f8:	ebfffe30 	bl	1008cc0 <tree_destroy.part.0>
 10093fc:	e5943004 	ldr	r3, [r4, #4]
    tree_destroy(table, n->right);
 1009400:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009404:	e1510003 	cmp	r1, r3
 1009408:	0a000001 	beq	1009414 <treetable_destroy+0x5b8>
 100940c:	e1a00004 	mov	r0, r4
 1009410:	ebfffe2a 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009414:	e1a0000a 	mov	r0, sl
 1009418:	e5943018 	ldr	r3, [r4, #24]
 100941c:	e12fff33 	blx	r3
 1009420:	e1a00009 	mov	r0, r9
 1009424:	e5943018 	ldr	r3, [r4, #24]
 1009428:	e12fff33 	blx	r3
 100942c:	e1a00008 	mov	r0, r8
 1009430:	e5943018 	ldr	r3, [r4, #24]
 1009434:	e12fff33 	blx	r3
 1009438:	e1a00006 	mov	r0, r6
 100943c:	e5943018 	ldr	r3, [r4, #24]
 1009440:	e12fff33 	blx	r3
 1009444:	e5943018 	ldr	r3, [r4, #24]
 1009448:	e1a00007 	mov	r0, r7
 100944c:	e12fff33 	blx	r3
 1009450:	e5943004 	ldr	r3, [r4, #4]
    table->mem_free(table->sentinel);
 1009454:	e1a00003 	mov	r0, r3
 1009458:	e5943018 	ldr	r3, [r4, #24]
 100945c:	e12fff33 	blx	r3
    table->mem_free(table);
 1009460:	e5943018 	ldr	r3, [r4, #24]
 1009464:	e1a00004 	mov	r0, r4
}
 1009468:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    table->mem_free(table);
 100946c:	e12fff13 	bx	r3

01009470 <treetable_get>:
    if (table->size == 0)
 1009470:	e5903008 	ldr	r3, [r0, #8]
 1009474:	e3530000 	cmp	r3, #0
 1009478:	0a000019 	beq	10094e4 <treetable_get+0x74>
{
 100947c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1009480:	e1a07002 	mov	r7, r2
 1009484:	e1a06001 	mov	r6, r1
 1009488:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 100948c:	e8900110 	ldm	r0, {r4, r8}
 1009490:	ea000004 	b	10094a8 <treetable_get+0x38>
        else if (cmp > 0)
 1009494:	0a00000f 	beq	10094d8 <treetable_get+0x68>
            n = n->right;
 1009498:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 100949c:	e1580004 	cmp	r8, r4
 10094a0:	13500000 	cmpne	r0, #0
 10094a4:	0a000009 	beq	10094d0 <treetable_get+0x60>
        cmp = table->cmp(key, n->key);
 10094a8:	e595300c 	ldr	r3, [r5, #12]
 10094ac:	e1a00006 	mov	r0, r6
 10094b0:	e5941000 	ldr	r1, [r4]
 10094b4:	e12fff33 	blx	r3
        if (cmp < 0)
 10094b8:	e3500000 	cmp	r0, #0
 10094bc:	aafffff4 	bge	1009494 <treetable_get+0x24>
            n = n->left;
 10094c0:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 10094c4:	e1580004 	cmp	r8, r4
 10094c8:	13500000 	cmpne	r0, #0
 10094cc:	1afffff5 	bne	10094a8 <treetable_get+0x38>
        return CC_ERR_KEY_NOT_FOUND;
 10094d0:	e3a00006 	mov	r0, #6
 10094d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    *out = node->value;
 10094d8:	e5943004 	ldr	r3, [r4, #4]
 10094dc:	e5873000 	str	r3, [r7]
}
 10094e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_KEY_NOT_FOUND;
 10094e4:	e3a00006 	mov	r0, #6
}
 10094e8:	e12fff1e 	bx	lr

010094ec <treetable_get_first_value>:
    RBNode *node = tree_min(table, table->root);
 10094ec:	e5902000 	ldr	r2, [r0]
 10094f0:	e5900004 	ldr	r0, [r0, #4]
    while (n->left != s)
 10094f4:	ea000000 	b	10094fc <treetable_get_first_value+0x10>
 10094f8:	e1a02003 	mov	r2, r3
 10094fc:	e5923010 	ldr	r3, [r2, #16]
 1009500:	e1500003 	cmp	r0, r3
 1009504:	1afffffb 	bne	10094f8 <treetable_get_first_value+0xc>
    if (node != table->sentinel) {
 1009508:	e1500002 	cmp	r0, r2
        *out = node->value;
 100950c:	15923004 	ldrne	r3, [r2, #4]
        return CC_OK;
 1009510:	13a00000 	movne	r0, #0
    return CC_ERR_VALUE_NOT_FOUND;
 1009514:	03a00007 	moveq	r0, #7
        *out = node->value;
 1009518:	15813000 	strne	r3, [r1]
}
 100951c:	e12fff1e 	bx	lr

01009520 <treetable_get_last_value>:
    RBNode *node = tree_max(table, table->root);
 1009520:	e5902000 	ldr	r2, [r0]
 1009524:	e5900004 	ldr	r0, [r0, #4]
    while (n->right != s)
 1009528:	ea000000 	b	1009530 <treetable_get_last_value+0x10>
 100952c:	e1a02003 	mov	r2, r3
 1009530:	e5923014 	ldr	r3, [r2, #20]
 1009534:	e1500003 	cmp	r0, r3
 1009538:	1afffffb 	bne	100952c <treetable_get_last_value+0xc>
    if (node != table->sentinel) {
 100953c:	e1500002 	cmp	r0, r2
        *out = node->value;
 1009540:	15923004 	ldrne	r3, [r2, #4]
        return CC_OK;
 1009544:	13a00000 	movne	r0, #0
    return CC_ERR_VALUE_NOT_FOUND;
 1009548:	03a00007 	moveq	r0, #7
        *out = node->value;
 100954c:	15813000 	strne	r3, [r1]
}
 1009550:	e12fff1e 	bx	lr

01009554 <treetable_get_first_key>:
    RBNode *node = tree_min(table, table->root);
 1009554:	e5902000 	ldr	r2, [r0]
 1009558:	e5900004 	ldr	r0, [r0, #4]
    while (n->left != s)
 100955c:	ea000000 	b	1009564 <treetable_get_first_key+0x10>
 1009560:	e1a02003 	mov	r2, r3
 1009564:	e5923010 	ldr	r3, [r2, #16]
 1009568:	e1500003 	cmp	r0, r3
 100956c:	1afffffb 	bne	1009560 <treetable_get_first_key+0xc>
    if (node != table->sentinel) {
 1009570:	e1500002 	cmp	r0, r2
        *out = node->key;
 1009574:	15923000 	ldrne	r3, [r2]
        return CC_OK;
 1009578:	13a00000 	movne	r0, #0
    return CC_ERR_KEY_NOT_FOUND;
 100957c:	03a00006 	moveq	r0, #6
        *out = node->key;
 1009580:	15813000 	strne	r3, [r1]
}
 1009584:	e12fff1e 	bx	lr

01009588 <treetable_get_last_key>:
    RBNode *node = tree_max(table, table->root);
 1009588:	e5902000 	ldr	r2, [r0]
 100958c:	e5900004 	ldr	r0, [r0, #4]
    while (n->right != s)
 1009590:	ea000000 	b	1009598 <treetable_get_last_key+0x10>
 1009594:	e1a02003 	mov	r2, r3
 1009598:	e5923014 	ldr	r3, [r2, #20]
 100959c:	e1500003 	cmp	r0, r3
 10095a0:	1afffffb 	bne	1009594 <treetable_get_last_key+0xc>
    if (node != table->sentinel) {
 10095a4:	e1500002 	cmp	r0, r2
        *out = node->key;
 10095a8:	15923000 	ldrne	r3, [r2]
        return CC_OK;
 10095ac:	13a00000 	movne	r0, #0
    return CC_ERR_KEY_NOT_FOUND;
 10095b0:	03a00006 	moveq	r0, #6
        *out = node->key;
 10095b4:	15813000 	strne	r3, [r1]
}
 10095b8:	e12fff1e 	bx	lr

010095bc <treetable_get_greater_than>:
    if (table->size == 0)
 10095bc:	e5903008 	ldr	r3, [r0, #8]
 10095c0:	e3530000 	cmp	r3, #0
 10095c4:	0a000036 	beq	10096a4 <treetable_get_greater_than+0xe8>
{
 10095c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10095cc:	e1a06002 	mov	r6, r2
 10095d0:	e1a07001 	mov	r7, r1
 10095d4:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 10095d8:	e8900110 	ldm	r0, {r4, r8}
 10095dc:	ea000005 	b	10095f8 <treetable_get_greater_than+0x3c>
 10095e0:	e5943014 	ldr	r3, [r4, #20]
        else if (cmp > 0)
 10095e4:	0a000010 	beq	100962c <treetable_get_greater_than+0x70>
    } while (n != s && cmp != 0);
 10095e8:	e1580003 	cmp	r8, r3
 10095ec:	13500000 	cmpne	r0, #0
 10095f0:	e1a04003 	mov	r4, r3
 10095f4:	0a00000a 	beq	1009624 <treetable_get_greater_than+0x68>
        cmp = table->cmp(key, n->key);
 10095f8:	e595300c 	ldr	r3, [r5, #12]
 10095fc:	e1a00007 	mov	r0, r7
 1009600:	e5941000 	ldr	r1, [r4]
 1009604:	e12fff33 	blx	r3
        if (cmp < 0)
 1009608:	e3500000 	cmp	r0, #0
 100960c:	aafffff3 	bge	10095e0 <treetable_get_greater_than+0x24>
            n = n->left;
 1009610:	e5943010 	ldr	r3, [r4, #16]
    } while (n != s && cmp != 0);
 1009614:	e1580003 	cmp	r8, r3
 1009618:	13500000 	cmpne	r0, #0
 100961c:	e1a04003 	mov	r4, r3
 1009620:	1afffff4 	bne	10095f8 <treetable_get_greater_than+0x3c>
    return CC_ERR_KEY_NOT_FOUND;
 1009624:	e3a00006 	mov	r0, #6
 1009628:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (x->right != table->sentinel)
 100962c:	e5950004 	ldr	r0, [r5, #4]
 1009630:	e1500003 	cmp	r0, r3
 1009634:	1a000001 	bne	1009640 <treetable_get_greater_than+0x84>
 1009638:	ea000007 	b	100965c <treetable_get_greater_than+0xa0>
    while (n->left != s)
 100963c:	e1a03001 	mov	r3, r1
 1009640:	e5931010 	ldr	r1, [r3, #16]
 1009644:	e1500001 	cmp	r0, r1
 1009648:	1afffffb 	bne	100963c <treetable_get_greater_than+0x80>
        *out = s->key;
 100964c:	e5933000 	ldr	r3, [r3]
        return CC_OK;
 1009650:	e3a00000 	mov	r0, #0
        *out = s->key;
 1009654:	e5863000 	str	r3, [r6]
}
 1009658:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RBNode *y = x->parent;
 100965c:	e594100c 	ldr	r1, [r4, #12]
    while (y != table->sentinel && x == y->right) {
 1009660:	e1530001 	cmp	r3, r1
 1009664:	0a00000a 	beq	1009694 <treetable_get_greater_than+0xd8>
 1009668:	e5913014 	ldr	r3, [r1, #20]
 100966c:	e1540003 	cmp	r4, r3
 1009670:	0a000004 	beq	1009688 <treetable_get_greater_than+0xcc>
 1009674:	ea00000c 	b	10096ac <treetable_get_greater_than+0xf0>
 1009678:	e5932014 	ldr	r2, [r3, #20]
 100967c:	e1520001 	cmp	r2, r1
 1009680:	e1a01003 	mov	r1, r3
 1009684:	1afffff0 	bne	100964c <treetable_get_greater_than+0x90>
        y = y->parent;
 1009688:	e591300c 	ldr	r3, [r1, #12]
    while (y != table->sentinel && x == y->right) {
 100968c:	e1500003 	cmp	r0, r3
 1009690:	1afffff8 	bne	1009678 <treetable_get_greater_than+0xbc>
    if (n && s) {
 1009694:	e3530000 	cmp	r3, #0
 1009698:	1affffeb 	bne	100964c <treetable_get_greater_than+0x90>
    return CC_ERR_KEY_NOT_FOUND;
 100969c:	e3a00006 	mov	r0, #6
 10096a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 10096a4:	e3a00006 	mov	r0, #6
}
 10096a8:	e12fff1e 	bx	lr
    while (y != table->sentinel && x == y->right) {
 10096ac:	e1a03001 	mov	r3, r1
 10096b0:	eaffffe5 	b	100964c <treetable_get_greater_than+0x90>

010096b4 <treetable_get_lesser_than>:
    if (table->size == 0)
 10096b4:	e5903008 	ldr	r3, [r0, #8]
 10096b8:	e3530000 	cmp	r3, #0
 10096bc:	0a000035 	beq	1009798 <treetable_get_lesser_than+0xe4>
{
 10096c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10096c4:	e1a06002 	mov	r6, r2
 10096c8:	e1a07001 	mov	r7, r1
 10096cc:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 10096d0:	e8900110 	ldm	r0, {r4, r8}
 10096d4:	ea000004 	b	10096ec <treetable_get_lesser_than+0x38>
        else if (cmp > 0)
 10096d8:	0a00000f 	beq	100971c <treetable_get_lesser_than+0x68>
            n = n->right;
 10096dc:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 10096e0:	e1580004 	cmp	r8, r4
 10096e4:	13500000 	cmpne	r0, #0
 10096e8:	0a000009 	beq	1009714 <treetable_get_lesser_than+0x60>
        cmp = table->cmp(key, n->key);
 10096ec:	e595300c 	ldr	r3, [r5, #12]
 10096f0:	e1a00007 	mov	r0, r7
 10096f4:	e5941000 	ldr	r1, [r4]
 10096f8:	e12fff33 	blx	r3
        if (cmp < 0)
 10096fc:	e3500000 	cmp	r0, #0
 1009700:	aafffff4 	bge	10096d8 <treetable_get_lesser_than+0x24>
            n = n->left;
 1009704:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 1009708:	e1580004 	cmp	r8, r4
 100970c:	13500000 	cmpne	r0, #0
 1009710:	1afffff5 	bne	10096ec <treetable_get_lesser_than+0x38>
    return CC_ERR_KEY_NOT_FOUND;
 1009714:	e3a00006 	mov	r0, #6
 1009718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (x->left != table->sentinel)
 100971c:	e5950004 	ldr	r0, [r5, #4]
 1009720:	e5943010 	ldr	r3, [r4, #16]
 1009724:	e1530000 	cmp	r3, r0
 1009728:	1a000001 	bne	1009734 <treetable_get_lesser_than+0x80>
 100972c:	ea000007 	b	1009750 <treetable_get_lesser_than+0x9c>
    while (n->right != s)
 1009730:	e1a03001 	mov	r3, r1
 1009734:	e5931014 	ldr	r1, [r3, #20]
 1009738:	e1500001 	cmp	r0, r1
 100973c:	1afffffb 	bne	1009730 <treetable_get_lesser_than+0x7c>
        *out = s->key;
 1009740:	e5933000 	ldr	r3, [r3]
        return CC_OK;
 1009744:	e3a00000 	mov	r0, #0
        *out = s->key;
 1009748:	e5863000 	str	r3, [r6]
}
 100974c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RBNode *y = x->parent;
 1009750:	e594100c 	ldr	r1, [r4, #12]
    while (y != table->sentinel && x == y->left) {
 1009754:	e1530001 	cmp	r3, r1
 1009758:	0a00000a 	beq	1009788 <treetable_get_lesser_than+0xd4>
 100975c:	e5913010 	ldr	r3, [r1, #16]
 1009760:	e1540003 	cmp	r4, r3
 1009764:	0a000004 	beq	100977c <treetable_get_lesser_than+0xc8>
 1009768:	ea00000c 	b	10097a0 <treetable_get_lesser_than+0xec>
 100976c:	e5932010 	ldr	r2, [r3, #16]
 1009770:	e1520001 	cmp	r2, r1
 1009774:	e1a01003 	mov	r1, r3
 1009778:	1afffff0 	bne	1009740 <treetable_get_lesser_than+0x8c>
        y = y->parent;
 100977c:	e591300c 	ldr	r3, [r1, #12]
    while (y != table->sentinel && x == y->left) {
 1009780:	e1500003 	cmp	r0, r3
 1009784:	1afffff8 	bne	100976c <treetable_get_lesser_than+0xb8>
    if (n && s) {
 1009788:	e3530000 	cmp	r3, #0
 100978c:	1affffeb 	bne	1009740 <treetable_get_lesser_than+0x8c>
    return CC_ERR_KEY_NOT_FOUND;
 1009790:	e3a00006 	mov	r0, #6
 1009794:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1009798:	e3a00006 	mov	r0, #6
}
 100979c:	e12fff1e 	bx	lr
    while (y != table->sentinel && x == y->left) {
 10097a0:	e1a03001 	mov	r3, r1
 10097a4:	eaffffe5 	b	1009740 <treetable_get_lesser_than+0x8c>

010097a8 <treetable_size>:
}
 10097a8:	e5900008 	ldr	r0, [r0, #8]
 10097ac:	e12fff1e 	bx	lr

010097b0 <treetable_contains_key>:
    if (table->size == 0)
 10097b0:	e5903008 	ldr	r3, [r0, #8]
 10097b4:	e3530000 	cmp	r3, #0
 10097b8:	0a000017 	beq	100981c <treetable_contains_key+0x6c>
{
 10097bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10097c0:	e1a06001 	mov	r6, r1
 10097c4:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 10097c8:	e8900090 	ldm	r0, {r4, r7}
 10097cc:	ea000004 	b	10097e4 <treetable_contains_key+0x34>
        else if (cmp > 0)
 10097d0:	0a00000f 	beq	1009814 <treetable_contains_key+0x64>
            n = n->right;
 10097d4:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 10097d8:	e1570004 	cmp	r7, r4
 10097dc:	13500000 	cmpne	r0, #0
 10097e0:	0a000009 	beq	100980c <treetable_contains_key+0x5c>
        cmp = table->cmp(key, n->key);
 10097e4:	e595300c 	ldr	r3, [r5, #12]
 10097e8:	e1a00006 	mov	r0, r6
 10097ec:	e5941000 	ldr	r1, [r4]
 10097f0:	e12fff33 	blx	r3
        if (cmp < 0)
 10097f4:	e3500000 	cmp	r0, #0
 10097f8:	aafffff4 	bge	10097d0 <treetable_contains_key+0x20>
            n = n->left;
 10097fc:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 1009800:	e1570004 	cmp	r7, r4
 1009804:	13500000 	cmpne	r0, #0
 1009808:	1afffff5 	bne	10097e4 <treetable_contains_key+0x34>
    return false;
 100980c:	e3a00000 	mov	r0, #0
 1009810:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return true;
 1009814:	e3a00001 	mov	r0, #1
}
 1009818:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return false;
 100981c:	e3a00000 	mov	r0, #0
}
 1009820:	e12fff1e 	bx	lr

01009824 <treetable_contains_value>:
{
 1009824:	e92d4010 	push	{r4, lr}
    RBNode *node = tree_min(table, table->root);
 1009828:	e8904008 	ldm	r0, {r3, lr}
    while (n->left != s)
 100982c:	ea000000 	b	1009834 <treetable_contains_value+0x10>
 1009830:	e1a03002 	mov	r3, r2
 1009834:	e5932010 	ldr	r2, [r3, #16]
 1009838:	e15e0002 	cmp	lr, r2
 100983c:	1afffffb 	bne	1009830 <treetable_contains_value+0xc>
    while (node != table->sentinel) {
 1009840:	e153000e 	cmp	r3, lr
 1009844:	0a000022 	beq	10098d4 <treetable_contains_value+0xb0>
 1009848:	e5932014 	ldr	r2, [r3, #20]
    size_t o = 0;
 100984c:	e3a00000 	mov	r0, #0
        if (node->value == value)
 1009850:	e593c004 	ldr	ip, [r3, #4]
 1009854:	e15c0001 	cmp	ip, r1
            o++;
 1009858:	02800001 	addeq	r0, r0, #1
    if (x->right != table->sentinel)
 100985c:	e15e0002 	cmp	lr, r2
 1009860:	1a000001 	bne	100986c <treetable_contains_value+0x48>
 1009864:	ea000008 	b	100988c <treetable_contains_value+0x68>
    while (n->left != s)
 1009868:	e1a02003 	mov	r2, r3
 100986c:	e5923010 	ldr	r3, [r2, #16]
 1009870:	e15e0003 	cmp	lr, r3
 1009874:	1afffffb 	bne	1009868 <treetable_contains_value+0x44>
    while (node != table->sentinel) {
 1009878:	e15e0002 	cmp	lr, r2
 100987c:	08bd8010 	popeq	{r4, pc}
 1009880:	e1a03002 	mov	r3, r2
 1009884:	e5922014 	ldr	r2, [r2, #20]
 1009888:	eafffff0 	b	1009850 <treetable_contains_value+0x2c>
    RBNode *y = x->parent;
 100988c:	e593c00c 	ldr	ip, [r3, #12]
    while (y != table->sentinel && x == y->right) {
 1009890:	e15c000e 	cmp	ip, lr
 1009894:	08bd8010 	popeq	{r4, pc}
 1009898:	e59c4014 	ldr	r4, [ip, #20]
 100989c:	e1540003 	cmp	r4, r3
 10098a0:	1a000008 	bne	10098c8 <treetable_contains_value+0xa4>
        y = y->parent;
 10098a4:	e59c300c 	ldr	r3, [ip, #12]
    while (y != table->sentinel && x == y->right) {
 10098a8:	e1530002 	cmp	r3, r2
 10098ac:	08bd8010 	popeq	{r4, pc}
 10098b0:	e5934014 	ldr	r4, [r3, #20]
 10098b4:	e154000c 	cmp	r4, ip
 10098b8:	e1a0c003 	mov	ip, r3
 10098bc:	0afffff8 	beq	10098a4 <treetable_contains_value+0x80>
    while (n->left != s)
 10098c0:	e1a02004 	mov	r2, r4
 10098c4:	eaffffe1 	b	1009850 <treetable_contains_value+0x2c>
    while (y != table->sentinel && x == y->right) {
 10098c8:	e1a0300c 	mov	r3, ip
    while (n->left != s)
 10098cc:	e1a02004 	mov	r2, r4
 10098d0:	eaffffde 	b	1009850 <treetable_contains_value+0x2c>
    size_t o = 0;
 10098d4:	e3a00000 	mov	r0, #0
}
 10098d8:	e8bd8010 	pop	{r4, pc}

010098dc <treetable_add>:
{
 10098dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10098e0:	e1a05000 	mov	r5, r0
    RBNode *x = table->root;
 10098e4:	e5904000 	ldr	r4, [r0]
{
 10098e8:	e1a06001 	mov	r6, r1
 10098ec:	e1a07002 	mov	r7, r2
    while (x != table->sentinel) {
 10098f0:	e5903004 	ldr	r3, [r0, #4]
 10098f4:	e1530004 	cmp	r3, r4
 10098f8:	1a000006 	bne	1009918 <treetable_add+0x3c>
 10098fc:	ea00000f 	b	1009940 <treetable_add+0x64>
        } else if (cmp > 0) {
 1009900:	0a00007a 	beq	1009af0 <treetable_add+0x214>
            x = x->right;
 1009904:	e5943014 	ldr	r3, [r4, #20]
    while (x != table->sentinel) {
 1009908:	e5952004 	ldr	r2, [r5, #4]
 100990c:	e1530002 	cmp	r3, r2
 1009910:	0a00000a 	beq	1009940 <treetable_add+0x64>
 1009914:	e1a04003 	mov	r4, r3
        cmp = table->cmp(key, x->key);
 1009918:	e595300c 	ldr	r3, [r5, #12]
 100991c:	e1a00006 	mov	r0, r6
 1009920:	e5941000 	ldr	r1, [r4]
 1009924:	e12fff33 	blx	r3
        if (cmp < 0) {
 1009928:	e3500000 	cmp	r0, #0
 100992c:	aafffff3 	bge	1009900 <treetable_add+0x24>
            x = x->left;
 1009930:	e5943010 	ldr	r3, [r4, #16]
    while (x != table->sentinel) {
 1009934:	e5952004 	ldr	r2, [r5, #4]
 1009938:	e1530002 	cmp	r3, r2
 100993c:	1afffff4 	bne	1009914 <treetable_add+0x38>
    RBNode *n = table->mem_alloc(sizeof(RBNode));
 1009940:	e5953010 	ldr	r3, [r5, #16]
 1009944:	e3a00018 	mov	r0, #24
 1009948:	e12fff33 	blx	r3
    if (!n)
 100994c:	e2508000 	subs	r8, r0, #0
 1009950:	0a000097 	beq	1009bb4 <treetable_add+0x2d8>
    table->size++;
 1009954:	e1c520d4 	ldrd	r2, [r5, #4]
    n->value  = val;
 1009958:	e5887004 	str	r7, [r8, #4]
    n->key    = key;
 100995c:	e5886000 	str	r6, [r8]
    if (y == table->sentinel) {
 1009960:	e1520004 	cmp	r2, r4
    table->size++;
 1009964:	e2833001 	add	r3, r3, #1
    n->parent = y;
 1009968:	e588400c 	str	r4, [r8, #12]
    n->left   = table->sentinel;
 100996c:	e5882010 	str	r2, [r8, #16]
    n->right  = table->sentinel;
 1009970:	e5882014 	str	r2, [r8, #20]
    table->size++;
 1009974:	e5853008 	str	r3, [r5, #8]
    if (y == table->sentinel) {
 1009978:	0a000072 	beq	1009b48 <treetable_add+0x26c>
        n->color = RB_RED;
 100997c:	e3a03000 	mov	r3, #0
        if (table->cmp(key, y->key) < 0) {
 1009980:	e1a00006 	mov	r0, r6
        n->color = RB_RED;
 1009984:	e5c83008 	strb	r3, [r8, #8]
        if (table->cmp(key, y->key) < 0) {
 1009988:	e595300c 	ldr	r3, [r5, #12]
 100998c:	e5941000 	ldr	r1, [r4]
 1009990:	e12fff33 	blx	r3
    while (z->parent->color == RB_RED) {
 1009994:	e598200c 	ldr	r2, [r8, #12]
        if (table->cmp(key, y->key) < 0) {
 1009998:	e3500000 	cmp	r0, #0
            y->right = n;
 100999c:	a5848014 	strge	r8, [r4, #20]
            y->left = n;
 10099a0:	b5848010 	strlt	r8, [r4, #16]
    while (z->parent->color == RB_RED) {
 10099a4:	e5d2e008 	ldrb	lr, [r2, #8]
 10099a8:	e35e0000 	cmp	lr, #0
 10099ac:	1a00002a 	bne	1009a5c <treetable_add+0x180>
                z->parent->color         = RB_BLACK;
 10099b0:	e3a0c001 	mov	ip, #1
 10099b4:	ea000007 	b	10099d8 <treetable_add+0xfc>
                z->parent->parent->color = RB_RED;
 10099b8:	e1a08003 	mov	r8, r3
                z->parent->color         = RB_BLACK;
 10099bc:	e5c2c008 	strb	ip, [r2, #8]
                y->color                 = RB_BLACK;
 10099c0:	e5c1c008 	strb	ip, [r1, #8]
                z->parent->parent->color = RB_RED;
 10099c4:	e5c30008 	strb	r0, [r3, #8]
    while (z->parent->color == RB_RED) {
 10099c8:	e598200c 	ldr	r2, [r8, #12]
 10099cc:	e5d23008 	ldrb	r3, [r2, #8]
 10099d0:	e3530000 	cmp	r3, #0
 10099d4:	1a000020 	bne	1009a5c <treetable_add+0x180>
        if (z->parent == z->parent->parent->left) {
 10099d8:	e592300c 	ldr	r3, [r2, #12]
 10099dc:	e5931010 	ldr	r1, [r3, #16]
 10099e0:	e1520001 	cmp	r2, r1
 10099e4:	0a000021 	beq	1009a70 <treetable_add+0x194>
            if (y->color == RB_RED) {
 10099e8:	e5d10008 	ldrb	r0, [r1, #8]
 10099ec:	e3500000 	cmp	r0, #0
 10099f0:	0afffff0 	beq	10099b8 <treetable_add+0xdc>
                if (z == z->parent->left) {
 10099f4:	e5921010 	ldr	r1, [r2, #16]
 10099f8:	e1580001 	cmp	r8, r1
 10099fc:	0a00003d 	beq	1009af8 <treetable_add+0x21c>
                z->parent->color         = RB_BLACK;
 1009a00:	e5c2c008 	strb	ip, [r2, #8]
    RBNode *y = x->right;
 1009a04:	e5932014 	ldr	r2, [r3, #20]
                z->parent->parent->color = RB_RED;
 1009a08:	e5c3e008 	strb	lr, [r3, #8]
                rotate_left(table, z->parent->parent);
 1009a0c:	e5950004 	ldr	r0, [r5, #4]
    x->right = y->left;
 1009a10:	e5921010 	ldr	r1, [r2, #16]
    if (y->left != table->sentinel)
 1009a14:	e1500001 	cmp	r0, r1
    x->right = y->left;
 1009a18:	e5831014 	str	r1, [r3, #20]
        y->left->parent = x;
 1009a1c:	1581300c 	strne	r3, [r1, #12]
    y->parent = x->parent;
 1009a20:	e593100c 	ldr	r1, [r3, #12]
    if (x->parent == table->sentinel)
 1009a24:	e1500001 	cmp	r0, r1
    y->parent = x->parent;
 1009a28:	e582100c 	str	r1, [r2, #12]
        table->root = y;
 1009a2c:	05852000 	streq	r2, [r5]
    if (x->parent == table->sentinel)
 1009a30:	0a000003 	beq	1009a44 <treetable_add+0x168>
    else if (x == x->parent->left)
 1009a34:	e5910010 	ldr	r0, [r1, #16]
 1009a38:	e1500003 	cmp	r0, r3
        x->parent->left = y;
 1009a3c:	05812010 	streq	r2, [r1, #16]
        x->parent->right = y;
 1009a40:	15812014 	strne	r2, [r1, #20]
    y->left   = x;
 1009a44:	e5823010 	str	r3, [r2, #16]
    x->parent = y;
 1009a48:	e583200c 	str	r2, [r3, #12]
    while (z->parent->color == RB_RED) {
 1009a4c:	e598200c 	ldr	r2, [r8, #12]
 1009a50:	e5d23008 	ldrb	r3, [r2, #8]
 1009a54:	e3530000 	cmp	r3, #0
 1009a58:	0affffde 	beq	10099d8 <treetable_add+0xfc>
    table->root->color = RB_BLACK;
 1009a5c:	e5953000 	ldr	r3, [r5]
 1009a60:	e3a02001 	mov	r2, #1
    return CC_OK;
 1009a64:	e3a00000 	mov	r0, #0
    table->root->color = RB_BLACK;
 1009a68:	e5c32008 	strb	r2, [r3, #8]
 1009a6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            y = z->parent->parent->right;
 1009a70:	e5934014 	ldr	r4, [r3, #20]
            if (y->color == RB_RED) {
 1009a74:	e5d40008 	ldrb	r0, [r4, #8]
 1009a78:	e3500000 	cmp	r0, #0
 1009a7c:	1a000004 	bne	1009a94 <treetable_add+0x1b8>
                z->parent->color         = RB_BLACK;
 1009a80:	e5c2c008 	strb	ip, [r2, #8]
                z->parent->parent->color = RB_RED;
 1009a84:	e1a08003 	mov	r8, r3
                y->color                 = RB_BLACK;
 1009a88:	e5c4c008 	strb	ip, [r4, #8]
                z->parent->parent->color = RB_RED;
 1009a8c:	e5c30008 	strb	r0, [r3, #8]
                z = z->parent->parent;
 1009a90:	eaffffcc 	b	10099c8 <treetable_add+0xec>
                if (z == z->parent->right) {
 1009a94:	e5920014 	ldr	r0, [r2, #20]
 1009a98:	e1580000 	cmp	r8, r0
 1009a9c:	11a02001 	movne	r2, r1
 1009aa0:	0a00002d 	beq	1009b5c <treetable_add+0x280>
                z->parent->color         = RB_BLACK;
 1009aa4:	e5c1c008 	strb	ip, [r1, #8]
                z->parent->parent->color = RB_RED;
 1009aa8:	e5c3e008 	strb	lr, [r3, #8]
                rotate_right(table, z->parent->parent);
 1009aac:	e5950004 	ldr	r0, [r5, #4]
    x->left = y->right;
 1009ab0:	e5921014 	ldr	r1, [r2, #20]
    if (y->right != table->sentinel)
 1009ab4:	e1500001 	cmp	r0, r1
    x->left = y->right;
 1009ab8:	e5831010 	str	r1, [r3, #16]
        y->right->parent = x;
 1009abc:	1581300c 	strne	r3, [r1, #12]
    y->parent = x->parent;
 1009ac0:	e593100c 	ldr	r1, [r3, #12]
    if (x->parent == table->sentinel)
 1009ac4:	e1500001 	cmp	r0, r1
    y->parent = x->parent;
 1009ac8:	e582100c 	str	r1, [r2, #12]
        table->root = y;
 1009acc:	05852000 	streq	r2, [r5]
    if (x->parent == table->sentinel)
 1009ad0:	0a000003 	beq	1009ae4 <treetable_add+0x208>
    else if (x == x->parent->right)
 1009ad4:	e5910014 	ldr	r0, [r1, #20]
 1009ad8:	e1500003 	cmp	r0, r3
        x->parent->right = y;
 1009adc:	05812014 	streq	r2, [r1, #20]
        x->parent->left = y;
 1009ae0:	15812010 	strne	r2, [r1, #16]
    y->right  = x;
 1009ae4:	e5823014 	str	r3, [r2, #20]
    x->parent = y;
 1009ae8:	e583200c 	str	r2, [r3, #12]
 1009aec:	eaffffb5 	b	10099c8 <treetable_add+0xec>
            x->value = val;
 1009af0:	e5847004 	str	r7, [r4, #4]
            return CC_OK;
 1009af4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                    rotate_right(table, z);
 1009af8:	e5954004 	ldr	r4, [r5, #4]
    x->left = y->right;
 1009afc:	e5910014 	ldr	r0, [r1, #20]
    if (y->right != table->sentinel)
 1009b00:	e1540000 	cmp	r4, r0
    x->left = y->right;
 1009b04:	e5820010 	str	r0, [r2, #16]
        y->right->parent = x;
 1009b08:	1580200c 	strne	r2, [r0, #12]
 1009b0c:	1592300c 	ldrne	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1009b10:	e1540003 	cmp	r4, r3
    y->parent = x->parent;
 1009b14:	e581300c 	str	r3, [r1, #12]
        table->root = y;
 1009b18:	05851000 	streq	r1, [r5]
    if (x->parent == table->sentinel)
 1009b1c:	0a000003 	beq	1009b30 <treetable_add+0x254>
    else if (x == x->parent->right)
 1009b20:	e5930014 	ldr	r0, [r3, #20]
 1009b24:	e1520000 	cmp	r2, r0
        x->parent->right = y;
 1009b28:	05831014 	streq	r1, [r3, #20]
        x->parent->left = y;
 1009b2c:	15831010 	strne	r1, [r3, #16]
    y->right  = x;
 1009b30:	e5812014 	str	r2, [r1, #20]
    x->parent = y;
 1009b34:	e1a08002 	mov	r8, r2
 1009b38:	e582100c 	str	r1, [r2, #12]
 1009b3c:	e1a02001 	mov	r2, r1
 1009b40:	e591300c 	ldr	r3, [r1, #12]
 1009b44:	eaffffad 	b	1009a00 <treetable_add+0x124>
        n->color    = RB_BLACK;
 1009b48:	e3a03001 	mov	r3, #1
        table->root = n;
 1009b4c:	e5858000 	str	r8, [r5]
    return CC_OK;
 1009b50:	e3a00000 	mov	r0, #0
        n->color    = RB_BLACK;
 1009b54:	e5c83008 	strb	r3, [r8, #8]
 1009b58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                    rotate_left(table, z);
 1009b5c:	e5954004 	ldr	r4, [r5, #4]
    x->right = y->left;
 1009b60:	e5980010 	ldr	r0, [r8, #16]
    if (y->left != table->sentinel)
 1009b64:	e1540000 	cmp	r4, r0
    x->right = y->left;
 1009b68:	e5820014 	str	r0, [r2, #20]
    if (y->left != table->sentinel)
 1009b6c:	0a000012 	beq	1009bbc <treetable_add+0x2e0>
        y->left->parent = x;
 1009b70:	e580200c 	str	r2, [r0, #12]
    y->parent = x->parent;
 1009b74:	e592300c 	ldr	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1009b78:	e1540003 	cmp	r4, r3
    y->parent = x->parent;
 1009b7c:	e588300c 	str	r3, [r8, #12]
    if (x->parent == table->sentinel)
 1009b80:	0a000012 	beq	1009bd0 <treetable_add+0x2f4>
    else if (x == x->parent->left)
 1009b84:	e5930010 	ldr	r0, [r3, #16]
 1009b88:	e1520000 	cmp	r2, r0
        x->parent->right = y;
 1009b8c:	15838014 	strne	r8, [r3, #20]
    else if (x == x->parent->left)
 1009b90:	0a00000c 	beq	1009bc8 <treetable_add+0x2ec>
    y->left   = x;
 1009b94:	e5882010 	str	r2, [r8, #16]
    x->parent = y;
 1009b98:	e1a00008 	mov	r0, r8
 1009b9c:	e582800c 	str	r8, [r2, #12]
 1009ba0:	e598300c 	ldr	r3, [r8, #12]
 1009ba4:	e1a08001 	mov	r8, r1
 1009ba8:	e1a01000 	mov	r1, r0
 1009bac:	e5932010 	ldr	r2, [r3, #16]
 1009bb0:	eaffffbb 	b	1009aa4 <treetable_add+0x1c8>
        return CC_ERR_ALLOC;
 1009bb4:	e3a00001 	mov	r0, #1
}
 1009bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (x->parent == table->sentinel)
 1009bbc:	e1530004 	cmp	r3, r4
    y->parent = x->parent;
 1009bc0:	e588300c 	str	r3, [r8, #12]
    if (x->parent == table->sentinel)
 1009bc4:	0a000001 	beq	1009bd0 <treetable_add+0x2f4>
        x->parent->left = y;
 1009bc8:	e5838010 	str	r8, [r3, #16]
 1009bcc:	eafffff0 	b	1009b94 <treetable_add+0x2b8>
        table->root = y;
 1009bd0:	e5858000 	str	r8, [r5]
 1009bd4:	eaffffee 	b	1009b94 <treetable_add+0x2b8>

01009bd8 <treetable_remove>:
    if (table->size == 0)
 1009bd8:	e5903008 	ldr	r3, [r0, #8]
 1009bdc:	e3530000 	cmp	r3, #0
 1009be0:	0a00001e 	beq	1009c60 <treetable_remove+0x88>
{
 1009be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1009be8:	e1a06002 	mov	r6, r2
 1009bec:	e1a07001 	mov	r7, r1
 1009bf0:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 1009bf4:	e8900110 	ldm	r0, {r4, r8}
 1009bf8:	ea000004 	b	1009c10 <treetable_remove+0x38>
        else if (cmp > 0)
 1009bfc:	0a00000f 	beq	1009c40 <treetable_remove+0x68>
            n = n->right;
 1009c00:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 1009c04:	e1580004 	cmp	r8, r4
 1009c08:	13500000 	cmpne	r0, #0
 1009c0c:	0a000009 	beq	1009c38 <treetable_remove+0x60>
        cmp = table->cmp(key, n->key);
 1009c10:	e595300c 	ldr	r3, [r5, #12]
 1009c14:	e1a00007 	mov	r0, r7
 1009c18:	e5941000 	ldr	r1, [r4]
 1009c1c:	e12fff33 	blx	r3
        if (cmp < 0)
 1009c20:	e3500000 	cmp	r0, #0
 1009c24:	aafffff4 	bge	1009bfc <treetable_remove+0x24>
            n = n->left;
 1009c28:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 1009c2c:	e1580004 	cmp	r8, r4
 1009c30:	13500000 	cmpne	r0, #0
 1009c34:	1afffff5 	bne	1009c10 <treetable_remove+0x38>
        return CC_ERR_KEY_NOT_FOUND;
 1009c38:	e3a00006 	mov	r0, #6
 1009c3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (out)
 1009c40:	e3560000 	cmp	r6, #0
        *out = node->value;
 1009c44:	15943004 	ldrne	r3, [r4, #4]
 1009c48:	15863000 	strne	r3, [r6]
    remove_node(table, node);
 1009c4c:	e1a00005 	mov	r0, r5
 1009c50:	e1a01004 	mov	r1, r4
 1009c54:	ebfffacb 	bl	1008788 <remove_node>
    return CC_OK;
 1009c58:	e3a00000 	mov	r0, #0
}
 1009c5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_KEY_NOT_FOUND;
 1009c60:	e3a00006 	mov	r0, #6
}
 1009c64:	e12fff1e 	bx	lr

01009c68 <treetable_remove_first>:
    if (table->size == 0)
 1009c68:	e5903008 	ldr	r3, [r0, #8]
 1009c6c:	e3530000 	cmp	r3, #0
 1009c70:	0a00000d 	beq	1009cac <treetable_remove_first+0x44>
{
 1009c74:	e92d4010 	push	{r4, lr}
    RBNode *node = tree_min(table, table->root);
 1009c78:	e8901004 	ldm	r0, {r2, ip}
    while (n->left != s)
 1009c7c:	ea000000 	b	1009c84 <treetable_remove_first+0x1c>
 1009c80:	e1a02003 	mov	r2, r3
 1009c84:	e5923010 	ldr	r3, [r2, #16]
 1009c88:	e15c0003 	cmp	ip, r3
 1009c8c:	1afffffb 	bne	1009c80 <treetable_remove_first+0x18>
    if (out)
 1009c90:	e3510000 	cmp	r1, #0
        *out = node->value;
 1009c94:	15923004 	ldrne	r3, [r2, #4]
 1009c98:	15813000 	strne	r3, [r1]
    remove_node(table, node);
 1009c9c:	e1a01002 	mov	r1, r2
 1009ca0:	ebfffab8 	bl	1008788 <remove_node>
    return CC_OK;
 1009ca4:	e3a00000 	mov	r0, #0
}
 1009ca8:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_KEY_NOT_FOUND;
 1009cac:	e3a00006 	mov	r0, #6
}
 1009cb0:	e12fff1e 	bx	lr

01009cb4 <treetable_remove_last>:
{
 1009cb4:	e92d4010 	push	{r4, lr}
    RBNode *node = tree_max(table, table->root);
 1009cb8:	e8901004 	ldm	r0, {r2, ip}
    while (n->right != s)
 1009cbc:	ea000000 	b	1009cc4 <treetable_remove_last+0x10>
 1009cc0:	e1a02003 	mov	r2, r3
 1009cc4:	e5923014 	ldr	r3, [r2, #20]
 1009cc8:	e15c0003 	cmp	ip, r3
 1009ccc:	1afffffb 	bne	1009cc0 <treetable_remove_last+0xc>
    if (out)
 1009cd0:	e3510000 	cmp	r1, #0
        *out = node->value;
 1009cd4:	15923004 	ldrne	r3, [r2, #4]
 1009cd8:	15813000 	strne	r3, [r1]
    remove_node(table, node);
 1009cdc:	e1a01002 	mov	r1, r2
 1009ce0:	ebfffaa8 	bl	1008788 <remove_node>
}
 1009ce4:	e3a00000 	mov	r0, #0
 1009ce8:	e8bd8010 	pop	{r4, pc}

01009cec <treetable_remove_all>:
{
 1009cec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1009cf0:	e1a04000 	mov	r4, r0
    tree_destroy(table, table->root);
 1009cf4:	e5907000 	ldr	r7, [r0]
    if (n == table->sentinel)
 1009cf8:	e5903004 	ldr	r3, [r0, #4]
 1009cfc:	e1570003 	cmp	r7, r3
 1009d00:	0a000177 	beq	100a2e4 <treetable_remove_all+0x5f8>
    tree_destroy(table, n->left);
 1009d04:	e5975010 	ldr	r5, [r7, #16]
    if (n == table->sentinel)
 1009d08:	e1530005 	cmp	r3, r5
 1009d0c:	0a0000b6 	beq	1009fec <treetable_remove_all+0x300>
    tree_destroy(table, n->left);
 1009d10:	e5956010 	ldr	r6, [r5, #16]
    if (n == table->sentinel)
 1009d14:	e1530006 	cmp	r3, r6
 1009d18:	0a000056 	beq	1009e78 <treetable_remove_all+0x18c>
    tree_destroy(table, n->left);
 1009d1c:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 1009d20:	e1530008 	cmp	r3, r8
 1009d24:	0a000026 	beq	1009dc4 <treetable_remove_all+0xd8>
    tree_destroy(table, n->left);
 1009d28:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1009d2c:	e1530009 	cmp	r3, r9
 1009d30:	0a00000e 	beq	1009d70 <treetable_remove_all+0x84>
    tree_destroy(table, n->left);
 1009d34:	e5992010 	ldr	r2, [r9, #16]
    if (n == table->sentinel)
 1009d38:	e1530002 	cmp	r3, r2
 1009d3c:	0a000002 	beq	1009d4c <treetable_remove_all+0x60>
 1009d40:	e1a01002 	mov	r1, r2
 1009d44:	ebfffbdd 	bl	1008cc0 <tree_destroy.part.0>
 1009d48:	e5942004 	ldr	r2, [r4, #4]
    tree_destroy(table, n->right);
 1009d4c:	e5991014 	ldr	r1, [r9, #20]
    if (n == table->sentinel)
 1009d50:	e1510002 	cmp	r1, r2
 1009d54:	0a000001 	beq	1009d60 <treetable_remove_all+0x74>
 1009d58:	e1a00004 	mov	r0, r4
 1009d5c:	ebfffbd7 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009d60:	e1a00009 	mov	r0, r9
 1009d64:	e5943018 	ldr	r3, [r4, #24]
 1009d68:	e12fff33 	blx	r3
 1009d6c:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1009d70:	e598a014 	ldr	sl, [r8, #20]
    if (n == table->sentinel)
 1009d74:	e15a0009 	cmp	sl, r9
 1009d78:	0a00000d 	beq	1009db4 <treetable_remove_all+0xc8>
    tree_destroy(table, n->left);
 1009d7c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009d80:	e1510009 	cmp	r1, r9
 1009d84:	0a000002 	beq	1009d94 <treetable_remove_all+0xa8>
 1009d88:	e1a00004 	mov	r0, r4
 1009d8c:	ebfffbcb 	bl	1008cc0 <tree_destroy.part.0>
 1009d90:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1009d94:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009d98:	e1510009 	cmp	r1, r9
 1009d9c:	0a000001 	beq	1009da8 <treetable_remove_all+0xbc>
 1009da0:	e1a00004 	mov	r0, r4
 1009da4:	ebfffbc5 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009da8:	e1a0000a 	mov	r0, sl
 1009dac:	e5943018 	ldr	r3, [r4, #24]
 1009db0:	e12fff33 	blx	r3
 1009db4:	e1a00008 	mov	r0, r8
 1009db8:	e5943018 	ldr	r3, [r4, #24]
 1009dbc:	e12fff33 	blx	r3
 1009dc0:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009dc4:	e5969014 	ldr	r9, [r6, #20]
    if (n == table->sentinel)
 1009dc8:	e1590008 	cmp	r9, r8
 1009dcc:	0a000025 	beq	1009e68 <treetable_remove_all+0x17c>
    tree_destroy(table, n->left);
 1009dd0:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009dd4:	e15a0008 	cmp	sl, r8
 1009dd8:	0a00000e 	beq	1009e18 <treetable_remove_all+0x12c>
    tree_destroy(table, n->left);
 1009ddc:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009de0:	e1510008 	cmp	r1, r8
 1009de4:	0a000002 	beq	1009df4 <treetable_remove_all+0x108>
 1009de8:	e1a00004 	mov	r0, r4
 1009dec:	ebfffbb3 	bl	1008cc0 <tree_destroy.part.0>
 1009df0:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009df4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009df8:	e1510008 	cmp	r1, r8
 1009dfc:	0a000001 	beq	1009e08 <treetable_remove_all+0x11c>
 1009e00:	e1a00004 	mov	r0, r4
 1009e04:	ebfffbad 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009e08:	e1a0000a 	mov	r0, sl
 1009e0c:	e5943018 	ldr	r3, [r4, #24]
 1009e10:	e12fff33 	blx	r3
 1009e14:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009e18:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009e1c:	e15a0008 	cmp	sl, r8
 1009e20:	0a00000d 	beq	1009e5c <treetable_remove_all+0x170>
    tree_destroy(table, n->left);
 1009e24:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009e28:	e1510008 	cmp	r1, r8
 1009e2c:	0a000002 	beq	1009e3c <treetable_remove_all+0x150>
 1009e30:	e1a00004 	mov	r0, r4
 1009e34:	ebfffba1 	bl	1008cc0 <tree_destroy.part.0>
 1009e38:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009e3c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009e40:	e1510008 	cmp	r1, r8
 1009e44:	0a000001 	beq	1009e50 <treetable_remove_all+0x164>
 1009e48:	e1a00004 	mov	r0, r4
 1009e4c:	ebfffb9b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009e50:	e1a0000a 	mov	r0, sl
 1009e54:	e5943018 	ldr	r3, [r4, #24]
 1009e58:	e12fff33 	blx	r3
 1009e5c:	e1a00009 	mov	r0, r9
 1009e60:	e5943018 	ldr	r3, [r4, #24]
 1009e64:	e12fff33 	blx	r3
 1009e68:	e1a00006 	mov	r0, r6
 1009e6c:	e5943018 	ldr	r3, [r4, #24]
 1009e70:	e12fff33 	blx	r3
 1009e74:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009e78:	e5958014 	ldr	r8, [r5, #20]
    if (n == table->sentinel)
 1009e7c:	e1580006 	cmp	r8, r6
 1009e80:	0a000055 	beq	1009fdc <treetable_remove_all+0x2f0>
    tree_destroy(table, n->left);
 1009e84:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1009e88:	e1590006 	cmp	r9, r6
 1009e8c:	0a000026 	beq	1009f2c <treetable_remove_all+0x240>
    tree_destroy(table, n->left);
 1009e90:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009e94:	e15a0006 	cmp	sl, r6
 1009e98:	0a00000e 	beq	1009ed8 <treetable_remove_all+0x1ec>
    tree_destroy(table, n->left);
 1009e9c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009ea0:	e1510006 	cmp	r1, r6
 1009ea4:	0a000002 	beq	1009eb4 <treetable_remove_all+0x1c8>
 1009ea8:	e1a00004 	mov	r0, r4
 1009eac:	ebfffb83 	bl	1008cc0 <tree_destroy.part.0>
 1009eb0:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009eb4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009eb8:	e1510006 	cmp	r1, r6
 1009ebc:	0a000001 	beq	1009ec8 <treetable_remove_all+0x1dc>
 1009ec0:	e1a00004 	mov	r0, r4
 1009ec4:	ebfffb7d 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009ec8:	e1a0000a 	mov	r0, sl
 1009ecc:	e5943018 	ldr	r3, [r4, #24]
 1009ed0:	e12fff33 	blx	r3
 1009ed4:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009ed8:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009edc:	e15a0006 	cmp	sl, r6
 1009ee0:	0a00000d 	beq	1009f1c <treetable_remove_all+0x230>
    tree_destroy(table, n->left);
 1009ee4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009ee8:	e1510006 	cmp	r1, r6
 1009eec:	0a000002 	beq	1009efc <treetable_remove_all+0x210>
 1009ef0:	e1a00004 	mov	r0, r4
 1009ef4:	ebfffb71 	bl	1008cc0 <tree_destroy.part.0>
 1009ef8:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009efc:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009f00:	e1510006 	cmp	r1, r6
 1009f04:	0a000001 	beq	1009f10 <treetable_remove_all+0x224>
 1009f08:	e1a00004 	mov	r0, r4
 1009f0c:	ebfffb6b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009f10:	e1a0000a 	mov	r0, sl
 1009f14:	e5943018 	ldr	r3, [r4, #24]
 1009f18:	e12fff33 	blx	r3
 1009f1c:	e1a00009 	mov	r0, r9
 1009f20:	e5943018 	ldr	r3, [r4, #24]
 1009f24:	e12fff33 	blx	r3
 1009f28:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009f2c:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 1009f30:	e1590006 	cmp	r9, r6
 1009f34:	0a000025 	beq	1009fd0 <treetable_remove_all+0x2e4>
    tree_destroy(table, n->left);
 1009f38:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009f3c:	e15a0006 	cmp	sl, r6
 1009f40:	0a00000e 	beq	1009f80 <treetable_remove_all+0x294>
    tree_destroy(table, n->left);
 1009f44:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009f48:	e1510006 	cmp	r1, r6
 1009f4c:	0a000002 	beq	1009f5c <treetable_remove_all+0x270>
 1009f50:	e1a00004 	mov	r0, r4
 1009f54:	ebfffb59 	bl	1008cc0 <tree_destroy.part.0>
 1009f58:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009f5c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009f60:	e1510006 	cmp	r1, r6
 1009f64:	0a000001 	beq	1009f70 <treetable_remove_all+0x284>
 1009f68:	e1a00004 	mov	r0, r4
 1009f6c:	ebfffb53 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009f70:	e1a0000a 	mov	r0, sl
 1009f74:	e5943018 	ldr	r3, [r4, #24]
 1009f78:	e12fff33 	blx	r3
 1009f7c:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009f80:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009f84:	e15a0006 	cmp	sl, r6
 1009f88:	0a00000d 	beq	1009fc4 <treetable_remove_all+0x2d8>
    tree_destroy(table, n->left);
 1009f8c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009f90:	e1510006 	cmp	r1, r6
 1009f94:	0a000002 	beq	1009fa4 <treetable_remove_all+0x2b8>
 1009f98:	e1a00004 	mov	r0, r4
 1009f9c:	ebfffb47 	bl	1008cc0 <tree_destroy.part.0>
 1009fa0:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009fa4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009fa8:	e1510006 	cmp	r1, r6
 1009fac:	0a000001 	beq	1009fb8 <treetable_remove_all+0x2cc>
 1009fb0:	e1a00004 	mov	r0, r4
 1009fb4:	ebfffb41 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009fb8:	e1a0000a 	mov	r0, sl
 1009fbc:	e5943018 	ldr	r3, [r4, #24]
 1009fc0:	e12fff33 	blx	r3
 1009fc4:	e1a00009 	mov	r0, r9
 1009fc8:	e5943018 	ldr	r3, [r4, #24]
 1009fcc:	e12fff33 	blx	r3
 1009fd0:	e1a00008 	mov	r0, r8
 1009fd4:	e5943018 	ldr	r3, [r4, #24]
 1009fd8:	e12fff33 	blx	r3
 1009fdc:	e1a00005 	mov	r0, r5
 1009fe0:	e5943018 	ldr	r3, [r4, #24]
 1009fe4:	e12fff33 	blx	r3
 1009fe8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009fec:	e5976014 	ldr	r6, [r7, #20]
    if (n == table->sentinel)
 1009ff0:	e1560005 	cmp	r6, r5
 1009ff4:	0a0000b6 	beq	100a2d4 <treetable_remove_all+0x5e8>
    tree_destroy(table, n->left);
 1009ff8:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 1009ffc:	e1580005 	cmp	r8, r5
 100a000:	0a000056 	beq	100a160 <treetable_remove_all+0x474>
    tree_destroy(table, n->left);
 100a004:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 100a008:	e1590005 	cmp	r9, r5
 100a00c:	0a000026 	beq	100a0ac <treetable_remove_all+0x3c0>
    tree_destroy(table, n->left);
 100a010:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a014:	e15a0005 	cmp	sl, r5
 100a018:	0a00000e 	beq	100a058 <treetable_remove_all+0x36c>
    tree_destroy(table, n->left);
 100a01c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a020:	e1510005 	cmp	r1, r5
 100a024:	0a000002 	beq	100a034 <treetable_remove_all+0x348>
 100a028:	e1a00004 	mov	r0, r4
 100a02c:	ebfffb23 	bl	1008cc0 <tree_destroy.part.0>
 100a030:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a034:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a038:	e1510005 	cmp	r1, r5
 100a03c:	0a000001 	beq	100a048 <treetable_remove_all+0x35c>
 100a040:	e1a00004 	mov	r0, r4
 100a044:	ebfffb1d 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a048:	e1a0000a 	mov	r0, sl
 100a04c:	e5943018 	ldr	r3, [r4, #24]
 100a050:	e12fff33 	blx	r3
 100a054:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a058:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a05c:	e15a0005 	cmp	sl, r5
 100a060:	0a00000d 	beq	100a09c <treetable_remove_all+0x3b0>
    tree_destroy(table, n->left);
 100a064:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a068:	e1510005 	cmp	r1, r5
 100a06c:	0a000002 	beq	100a07c <treetable_remove_all+0x390>
 100a070:	e1a00004 	mov	r0, r4
 100a074:	ebfffb11 	bl	1008cc0 <tree_destroy.part.0>
 100a078:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a07c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a080:	e1510005 	cmp	r1, r5
 100a084:	0a000001 	beq	100a090 <treetable_remove_all+0x3a4>
 100a088:	e1a00004 	mov	r0, r4
 100a08c:	ebfffb0b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a090:	e1a0000a 	mov	r0, sl
 100a094:	e5943018 	ldr	r3, [r4, #24]
 100a098:	e12fff33 	blx	r3
 100a09c:	e1a00009 	mov	r0, r9
 100a0a0:	e5943018 	ldr	r3, [r4, #24]
 100a0a4:	e12fff33 	blx	r3
 100a0a8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a0ac:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 100a0b0:	e1590005 	cmp	r9, r5
 100a0b4:	0a000025 	beq	100a150 <treetable_remove_all+0x464>
    tree_destroy(table, n->left);
 100a0b8:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a0bc:	e15a0005 	cmp	sl, r5
 100a0c0:	0a00000e 	beq	100a100 <treetable_remove_all+0x414>
    tree_destroy(table, n->left);
 100a0c4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a0c8:	e1510005 	cmp	r1, r5
 100a0cc:	0a000002 	beq	100a0dc <treetable_remove_all+0x3f0>
 100a0d0:	e1a00004 	mov	r0, r4
 100a0d4:	ebfffaf9 	bl	1008cc0 <tree_destroy.part.0>
 100a0d8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a0dc:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a0e0:	e1510005 	cmp	r1, r5
 100a0e4:	0a000001 	beq	100a0f0 <treetable_remove_all+0x404>
 100a0e8:	e1a00004 	mov	r0, r4
 100a0ec:	ebfffaf3 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a0f0:	e1a0000a 	mov	r0, sl
 100a0f4:	e5943018 	ldr	r3, [r4, #24]
 100a0f8:	e12fff33 	blx	r3
 100a0fc:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a100:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a104:	e15a0005 	cmp	sl, r5
 100a108:	0a00000d 	beq	100a144 <treetable_remove_all+0x458>
    tree_destroy(table, n->left);
 100a10c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a110:	e1510005 	cmp	r1, r5
 100a114:	0a000002 	beq	100a124 <treetable_remove_all+0x438>
 100a118:	e1a00004 	mov	r0, r4
 100a11c:	ebfffae7 	bl	1008cc0 <tree_destroy.part.0>
 100a120:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a124:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a128:	e1510005 	cmp	r1, r5
 100a12c:	0a000001 	beq	100a138 <treetable_remove_all+0x44c>
 100a130:	e1a00004 	mov	r0, r4
 100a134:	ebfffae1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a138:	e1a0000a 	mov	r0, sl
 100a13c:	e5943018 	ldr	r3, [r4, #24]
 100a140:	e12fff33 	blx	r3
 100a144:	e1a00009 	mov	r0, r9
 100a148:	e5943018 	ldr	r3, [r4, #24]
 100a14c:	e12fff33 	blx	r3
 100a150:	e1a00008 	mov	r0, r8
 100a154:	e5943018 	ldr	r3, [r4, #24]
 100a158:	e12fff33 	blx	r3
 100a15c:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a160:	e5968014 	ldr	r8, [r6, #20]
    if (n == table->sentinel)
 100a164:	e1580005 	cmp	r8, r5
 100a168:	0a000056 	beq	100a2c8 <treetable_remove_all+0x5dc>
    tree_destroy(table, n->left);
 100a16c:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 100a170:	e1590005 	cmp	r9, r5
 100a174:	0a000026 	beq	100a214 <treetable_remove_all+0x528>
    tree_destroy(table, n->left);
 100a178:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a17c:	e15a0005 	cmp	sl, r5
 100a180:	0a00000e 	beq	100a1c0 <treetable_remove_all+0x4d4>
    tree_destroy(table, n->left);
 100a184:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a188:	e1510005 	cmp	r1, r5
 100a18c:	0a000002 	beq	100a19c <treetable_remove_all+0x4b0>
 100a190:	e1a00004 	mov	r0, r4
 100a194:	ebfffac9 	bl	1008cc0 <tree_destroy.part.0>
 100a198:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a19c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a1a0:	e1510005 	cmp	r1, r5
 100a1a4:	0a000001 	beq	100a1b0 <treetable_remove_all+0x4c4>
 100a1a8:	e1a00004 	mov	r0, r4
 100a1ac:	ebfffac3 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a1b0:	e1a0000a 	mov	r0, sl
 100a1b4:	e5943018 	ldr	r3, [r4, #24]
 100a1b8:	e12fff33 	blx	r3
 100a1bc:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a1c0:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a1c4:	e15a0005 	cmp	sl, r5
 100a1c8:	0a00000d 	beq	100a204 <treetable_remove_all+0x518>
    tree_destroy(table, n->left);
 100a1cc:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a1d0:	e1510005 	cmp	r1, r5
 100a1d4:	0a000002 	beq	100a1e4 <treetable_remove_all+0x4f8>
 100a1d8:	e1a00004 	mov	r0, r4
 100a1dc:	ebfffab7 	bl	1008cc0 <tree_destroy.part.0>
 100a1e0:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a1e4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a1e8:	e1510005 	cmp	r1, r5
 100a1ec:	0a000001 	beq	100a1f8 <treetable_remove_all+0x50c>
 100a1f0:	e1a00004 	mov	r0, r4
 100a1f4:	ebfffab1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a1f8:	e1a0000a 	mov	r0, sl
 100a1fc:	e5943018 	ldr	r3, [r4, #24]
 100a200:	e12fff33 	blx	r3
 100a204:	e1a00009 	mov	r0, r9
 100a208:	e5943018 	ldr	r3, [r4, #24]
 100a20c:	e12fff33 	blx	r3
 100a210:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a214:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 100a218:	e1590005 	cmp	r9, r5
 100a21c:	0a000026 	beq	100a2bc <treetable_remove_all+0x5d0>
    tree_destroy(table, n->left);
 100a220:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a224:	e15a0005 	cmp	sl, r5
 100a228:	0a00000e 	beq	100a268 <treetable_remove_all+0x57c>
    tree_destroy(table, n->left);
 100a22c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a230:	e1510005 	cmp	r1, r5
 100a234:	0a000002 	beq	100a244 <treetable_remove_all+0x558>
 100a238:	e1a00004 	mov	r0, r4
 100a23c:	ebfffa9f 	bl	1008cc0 <tree_destroy.part.0>
 100a240:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a244:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a248:	e1550001 	cmp	r5, r1
 100a24c:	0a000001 	beq	100a258 <treetable_remove_all+0x56c>
 100a250:	e1a00004 	mov	r0, r4
 100a254:	ebfffa99 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a258:	e1a0000a 	mov	r0, sl
 100a25c:	e5943018 	ldr	r3, [r4, #24]
 100a260:	e12fff33 	blx	r3
 100a264:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a268:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a26c:	e15a0005 	cmp	sl, r5
 100a270:	0a00000e 	beq	100a2b0 <treetable_remove_all+0x5c4>
    tree_destroy(table, n->left);
 100a274:	e59a3010 	ldr	r3, [sl, #16]
    if (n == table->sentinel)
 100a278:	e1550003 	cmp	r5, r3
 100a27c:	0a000003 	beq	100a290 <treetable_remove_all+0x5a4>
 100a280:	e1a01003 	mov	r1, r3
 100a284:	e1a00004 	mov	r0, r4
 100a288:	ebfffa8c 	bl	1008cc0 <tree_destroy.part.0>
 100a28c:	e5943004 	ldr	r3, [r4, #4]
    tree_destroy(table, n->right);
 100a290:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a294:	e1510003 	cmp	r1, r3
 100a298:	0a000001 	beq	100a2a4 <treetable_remove_all+0x5b8>
 100a29c:	e1a00004 	mov	r0, r4
 100a2a0:	ebfffa86 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a2a4:	e1a0000a 	mov	r0, sl
 100a2a8:	e5943018 	ldr	r3, [r4, #24]
 100a2ac:	e12fff33 	blx	r3
 100a2b0:	e1a00009 	mov	r0, r9
 100a2b4:	e5943018 	ldr	r3, [r4, #24]
 100a2b8:	e12fff33 	blx	r3
 100a2bc:	e1a00008 	mov	r0, r8
 100a2c0:	e5943018 	ldr	r3, [r4, #24]
 100a2c4:	e12fff33 	blx	r3
 100a2c8:	e1a00006 	mov	r0, r6
 100a2cc:	e5943018 	ldr	r3, [r4, #24]
 100a2d0:	e12fff33 	blx	r3
 100a2d4:	e5943018 	ldr	r3, [r4, #24]
 100a2d8:	e1a00007 	mov	r0, r7
 100a2dc:	e12fff33 	blx	r3
 100a2e0:	e5943004 	ldr	r3, [r4, #4]
    table->size = 0;
 100a2e4:	e3a02000 	mov	r2, #0
    table->root = table->sentinel;
 100a2e8:	e5843000 	str	r3, [r4]
    table->size = 0;
 100a2ec:	e5842008 	str	r2, [r4, #8]
}
 100a2f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0100a2f4 <treetable_foreach_key>:
{
 100a2f4:	e92d4070 	push	{r4, r5, r6, lr}
 100a2f8:	e1a05000 	mov	r5, r0
 100a2fc:	e1a06001 	mov	r6, r1
    RBNode *n = tree_min(table, table->root);
 100a300:	e5904000 	ldr	r4, [r0]
 100a304:	e5902004 	ldr	r2, [r0, #4]
    while (n->left != s)
 100a308:	ea000000 	b	100a310 <treetable_foreach_key+0x1c>
 100a30c:	e1a04003 	mov	r4, r3
 100a310:	e5943010 	ldr	r3, [r4, #16]
 100a314:	e1520003 	cmp	r2, r3
 100a318:	1afffffb 	bne	100a30c <treetable_foreach_key+0x18>
    while (n != table->sentinel) {
 100a31c:	e1540002 	cmp	r4, r2
 100a320:	08bd8070 	popeq	{r4, r5, r6, pc}
        fn(n->key);
 100a324:	e5940000 	ldr	r0, [r4]
 100a328:	e12fff36 	blx	r6
    if (x->right != table->sentinel)
 100a32c:	e5943014 	ldr	r3, [r4, #20]
 100a330:	e5951004 	ldr	r1, [r5, #4]
 100a334:	e1530001 	cmp	r3, r1
 100a338:	1a000001 	bne	100a344 <treetable_foreach_key+0x50>
 100a33c:	ea000007 	b	100a360 <treetable_foreach_key+0x6c>
    while (n->left != s)
 100a340:	e1a03002 	mov	r3, r2
 100a344:	e5932010 	ldr	r2, [r3, #16]
 100a348:	e1510002 	cmp	r1, r2
 100a34c:	1afffffb 	bne	100a340 <treetable_foreach_key+0x4c>
    while (n != table->sentinel) {
 100a350:	e1510003 	cmp	r1, r3
 100a354:	08bd8070 	popeq	{r4, r5, r6, pc}
    while (n->left != s)
 100a358:	e1a04003 	mov	r4, r3
 100a35c:	eafffff0 	b	100a324 <treetable_foreach_key+0x30>
    RBNode *y = x->parent;
 100a360:	e594200c 	ldr	r2, [r4, #12]
    while (y != table->sentinel && x == y->right) {
 100a364:	e1530002 	cmp	r3, r2
 100a368:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a36c:	e5923014 	ldr	r3, [r2, #20]
 100a370:	e1540003 	cmp	r4, r3
 100a374:	1a000007 	bne	100a398 <treetable_foreach_key+0xa4>
        y = y->parent;
 100a378:	e592300c 	ldr	r3, [r2, #12]
    while (y != table->sentinel && x == y->right) {
 100a37c:	e1510003 	cmp	r1, r3
 100a380:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a384:	e5930014 	ldr	r0, [r3, #20]
 100a388:	e1500002 	cmp	r0, r2
 100a38c:	e1a02003 	mov	r2, r3
 100a390:	0afffff8 	beq	100a378 <treetable_foreach_key+0x84>
 100a394:	eaffffef 	b	100a358 <treetable_foreach_key+0x64>
 100a398:	e1a03002 	mov	r3, r2
 100a39c:	eaffffed 	b	100a358 <treetable_foreach_key+0x64>

0100a3a0 <treetable_foreach_value>:
{
 100a3a0:	e92d4070 	push	{r4, r5, r6, lr}
 100a3a4:	e1a05000 	mov	r5, r0
 100a3a8:	e1a06001 	mov	r6, r1
    RBNode *n = tree_min(table, table->root);
 100a3ac:	e5904000 	ldr	r4, [r0]
 100a3b0:	e5902004 	ldr	r2, [r0, #4]
    while (n->left != s)
 100a3b4:	ea000000 	b	100a3bc <treetable_foreach_value+0x1c>
 100a3b8:	e1a04003 	mov	r4, r3
 100a3bc:	e5943010 	ldr	r3, [r4, #16]
 100a3c0:	e1520003 	cmp	r2, r3
 100a3c4:	1afffffb 	bne	100a3b8 <treetable_foreach_value+0x18>
    while (n != table->sentinel) {
 100a3c8:	e1540002 	cmp	r4, r2
 100a3cc:	08bd8070 	popeq	{r4, r5, r6, pc}
        fn(n->value);
 100a3d0:	e5940004 	ldr	r0, [r4, #4]
 100a3d4:	e12fff36 	blx	r6
    if (x->right != table->sentinel)
 100a3d8:	e5943014 	ldr	r3, [r4, #20]
 100a3dc:	e5951004 	ldr	r1, [r5, #4]
 100a3e0:	e1530001 	cmp	r3, r1
 100a3e4:	1a000001 	bne	100a3f0 <treetable_foreach_value+0x50>
 100a3e8:	ea000007 	b	100a40c <treetable_foreach_value+0x6c>
    while (n->left != s)
 100a3ec:	e1a03002 	mov	r3, r2
 100a3f0:	e5932010 	ldr	r2, [r3, #16]
 100a3f4:	e1510002 	cmp	r1, r2
 100a3f8:	1afffffb 	bne	100a3ec <treetable_foreach_value+0x4c>
    while (n != table->sentinel) {
 100a3fc:	e1510003 	cmp	r1, r3
 100a400:	08bd8070 	popeq	{r4, r5, r6, pc}
    while (n->left != s)
 100a404:	e1a04003 	mov	r4, r3
 100a408:	eafffff0 	b	100a3d0 <treetable_foreach_value+0x30>
    RBNode *y = x->parent;
 100a40c:	e594200c 	ldr	r2, [r4, #12]
    while (y != table->sentinel && x == y->right) {
 100a410:	e1530002 	cmp	r3, r2
 100a414:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a418:	e5923014 	ldr	r3, [r2, #20]
 100a41c:	e1540003 	cmp	r4, r3
 100a420:	1a000007 	bne	100a444 <treetable_foreach_value+0xa4>
        y = y->parent;
 100a424:	e592300c 	ldr	r3, [r2, #12]
    while (y != table->sentinel && x == y->right) {
 100a428:	e1510003 	cmp	r1, r3
 100a42c:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a430:	e5930014 	ldr	r0, [r3, #20]
 100a434:	e1500002 	cmp	r0, r2
 100a438:	e1a02003 	mov	r2, r3
 100a43c:	0afffff8 	beq	100a424 <treetable_foreach_value+0x84>
 100a440:	eaffffef 	b	100a404 <treetable_foreach_value+0x64>
 100a444:	e1a03002 	mov	r3, r2
 100a448:	eaffffed 	b	100a404 <treetable_foreach_value+0x64>

0100a44c <treetable_iter_init>:
    iter->current = table->sentinel;
 100a44c:	e5913004 	ldr	r3, [r1, #4]
    iter->next    = tree_min(table, table->root);
 100a450:	e5912000 	ldr	r2, [r1]
    iter->table   = table;
 100a454:	e5801000 	str	r1, [r0]
    iter->current = table->sentinel;
 100a458:	e5803004 	str	r3, [r0, #4]
    iter->next    = tree_min(table, table->root);
 100a45c:	e5911004 	ldr	r1, [r1, #4]
    while (n->left != s)
 100a460:	ea000000 	b	100a468 <treetable_iter_init+0x1c>
 100a464:	e1a02003 	mov	r2, r3
 100a468:	e5923010 	ldr	r3, [r2, #16]
 100a46c:	e1510003 	cmp	r1, r3
 100a470:	1afffffb 	bne	100a464 <treetable_iter_init+0x18>
    iter->next    = tree_min(table, table->root);
 100a474:	e5802008 	str	r2, [r0, #8]
}
 100a478:	e12fff1e 	bx	lr

0100a47c <treetable_iter_next>:
    if (iter->next == iter->table->sentinel)
 100a47c:	e5902000 	ldr	r2, [r0]
 100a480:	e590c008 	ldr	ip, [r0, #8]
 100a484:	e5923004 	ldr	r3, [r2, #4]
 100a488:	e15c0003 	cmp	ip, r3
 100a48c:	0a00001f 	beq	100a510 <treetable_iter_next+0x94>
{
 100a490:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    entry->key    = iter->next->key;
 100a494:	e59c3004 	ldr	r3, [ip, #4]
 100a498:	e59ce000 	ldr	lr, [ip]
 100a49c:	e5813004 	str	r3, [r1, #4]
 100a4a0:	e581e000 	str	lr, [r1]
    iter->current = iter->next;
 100a4a4:	e580c004 	str	ip, [r0, #4]
    if (x->right != table->sentinel)
 100a4a8:	e59c3014 	ldr	r3, [ip, #20]
 100a4ac:	e5921004 	ldr	r1, [r2, #4]
 100a4b0:	e1530001 	cmp	r3, r1
 100a4b4:	1a000011 	bne	100a500 <treetable_iter_next+0x84>
    RBNode *y = x->parent;
 100a4b8:	e59c200c 	ldr	r2, [ip, #12]
    while (y != table->sentinel && x == y->right) {
 100a4bc:	e1530002 	cmp	r3, r2
 100a4c0:	0a00000a 	beq	100a4f0 <treetable_iter_next+0x74>
 100a4c4:	e5923014 	ldr	r3, [r2, #20]
 100a4c8:	e15c0003 	cmp	ip, r3
 100a4cc:	0a000004 	beq	100a4e4 <treetable_iter_next+0x68>
 100a4d0:	ea000010 	b	100a518 <treetable_iter_next+0x9c>
 100a4d4:	e593c014 	ldr	ip, [r3, #20]
 100a4d8:	e15c0002 	cmp	ip, r2
 100a4dc:	e1a02003 	mov	r2, r3
 100a4e0:	1a000002 	bne	100a4f0 <treetable_iter_next+0x74>
        y = y->parent;
 100a4e4:	e592300c 	ldr	r3, [r2, #12]
    while (y != table->sentinel && x == y->right) {
 100a4e8:	e1510003 	cmp	r1, r3
 100a4ec:	1afffff8 	bne	100a4d4 <treetable_iter_next+0x58>
    iter->next    = get_successor_node(iter->table, iter->current);
 100a4f0:	e5803008 	str	r3, [r0, #8]
    return CC_OK;
 100a4f4:	e3a00000 	mov	r0, #0
}
 100a4f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    while (n->left != s)
 100a4fc:	e1a03002 	mov	r3, r2
 100a500:	e5932010 	ldr	r2, [r3, #16]
 100a504:	e1510002 	cmp	r1, r2
 100a508:	1afffffb 	bne	100a4fc <treetable_iter_next+0x80>
 100a50c:	eafffff7 	b	100a4f0 <treetable_iter_next+0x74>
        return CC_ITER_END;
 100a510:	e3a00009 	mov	r0, #9
}
 100a514:	e12fff1e 	bx	lr
    while (y != table->sentinel && x == y->right) {
 100a518:	e1a03002 	mov	r3, r2
 100a51c:	eafffff3 	b	100a4f0 <treetable_iter_next+0x74>

0100a520 <treetable_iter_remove>:
    if (!iter->current)
 100a520:	e5903004 	ldr	r3, [r0, #4]
 100a524:	e3530000 	cmp	r3, #0
 100a528:	0a00000b 	beq	100a55c <treetable_iter_remove+0x3c>
    if (out)
 100a52c:	e3510000 	cmp	r1, #0
{
 100a530:	e92d4010 	push	{r4, lr}
        *out = iter->current->value;
 100a534:	15933004 	ldrne	r3, [r3, #4]
 100a538:	e1a04000 	mov	r4, r0
 100a53c:	15813000 	strne	r3, [r1]
 100a540:	15903004 	ldrne	r3, [r0, #4]
    remove_node(iter->table, iter->current);
 100a544:	e5900000 	ldr	r0, [r0]
 100a548:	e1a01003 	mov	r1, r3
 100a54c:	ebfff88d 	bl	1008788 <remove_node>
    iter->current = NULL;
 100a550:	e3a00000 	mov	r0, #0
 100a554:	e5840004 	str	r0, [r4, #4]
}
 100a558:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_KEY_NOT_FOUND;
 100a55c:	e3a00006 	mov	r0, #6
}
 100a560:	e12fff1e 	bx	lr

0100a564 <treetable_assert_rb_rules>:

int treetable_assert_rb_rules(TreeTable *table)
{
 100a564:	e92d4030 	push	{r4, r5, lr}
 100a568:	e24dd00c 	sub	sp, sp, #12
    int x;
    int status = treetable_test(table, table->root, &x);
 100a56c:	e5905000 	ldr	r5, [r0]
    if (node == table->sentinel) {
 100a570:	e5902004 	ldr	r2, [r0, #4]
 100a574:	e1550002 	cmp	r5, r2
 100a578:	0a00002f 	beq	100a63c <treetable_assert_rb_rules+0xd8>
    if (node->left != table->sentinel) {
 100a57c:	e5953010 	ldr	r3, [r5, #16]
 100a580:	e1a04000 	mov	r4, r0
 100a584:	e1520003 	cmp	r2, r3
 100a588:	0a000006 	beq	100a5a8 <treetable_assert_rb_rules+0x44>
        int cmp = table->cmp(node->left->key, node->key);
 100a58c:	e5930000 	ldr	r0, [r3]
 100a590:	e5951000 	ldr	r1, [r5]
 100a594:	e594300c 	ldr	r3, [r4, #12]
 100a598:	e12fff33 	blx	r3
        if (cmp >= 0)
 100a59c:	e3500000 	cmp	r0, #0
 100a5a0:	b5943004 	ldrlt	r3, [r4, #4]
 100a5a4:	aa000017 	bge	100a608 <treetable_assert_rb_rules+0xa4>
    if (node->right != table->sentinel) {
 100a5a8:	e5952014 	ldr	r2, [r5, #20]
 100a5ac:	e1520003 	cmp	r2, r3
 100a5b0:	0a000005 	beq	100a5cc <treetable_assert_rb_rules+0x68>
        int cmp = table->cmp(node->right->key, node->key);
 100a5b4:	e5920000 	ldr	r0, [r2]
 100a5b8:	e594300c 	ldr	r3, [r4, #12]
 100a5bc:	e5951000 	ldr	r1, [r5]
 100a5c0:	e12fff33 	blx	r3
        if (cmp <= 0)
 100a5c4:	e3500000 	cmp	r0, #0
 100a5c8:	da00000e 	ble	100a608 <treetable_assert_rb_rules+0xa4>
    if (node->color == RB_RED && node->parent->color == RB_RED) {
 100a5cc:	e5d53008 	ldrb	r3, [r5, #8]
 100a5d0:	e3530000 	cmp	r3, #0
 100a5d4:	1a000003 	bne	100a5e8 <treetable_assert_rb_rules+0x84>
 100a5d8:	e595300c 	ldr	r3, [r5, #12]
 100a5dc:	e5d30008 	ldrb	r0, [r3, #8]
 100a5e0:	e3500000 	cmp	r0, #0
 100a5e4:	0a000005 	beq	100a600 <treetable_assert_rb_rules+0x9c>
    int left_err = treetable_test(table, node->left, &nb_left);
 100a5e8:	e1a0200d 	mov	r2, sp
 100a5ec:	e5951010 	ldr	r1, [r5, #16]
 100a5f0:	e1a00004 	mov	r0, r4
 100a5f4:	ebfff970 	bl	1008bbc <treetable_test>
    if (left_err != RB_ERROR_OK)
 100a5f8:	e3500004 	cmp	r0, #4
 100a5fc:	0a000004 	beq	100a614 <treetable_assert_rb_rules+0xb0>
    return status;
}
 100a600:	e28dd00c 	add	sp, sp, #12
 100a604:	e8bd8030 	pop	{r4, r5, pc}
            return RB_ERROR_TREE_STRUCTURE;
 100a608:	e3a00002 	mov	r0, #2
}
 100a60c:	e28dd00c 	add	sp, sp, #12
 100a610:	e8bd8030 	pop	{r4, r5, pc}
    int right_err = treetable_test(table, node->right, &nb_right);
 100a614:	e5951014 	ldr	r1, [r5, #20]
 100a618:	e1a00004 	mov	r0, r4
 100a61c:	e28d2004 	add	r2, sp, #4
 100a620:	ebfff965 	bl	1008bbc <treetable_test>
    if (right_err != RB_ERROR_OK)
 100a624:	e3500004 	cmp	r0, #4
 100a628:	1afffff4 	bne	100a600 <treetable_assert_rb_rules+0x9c>
    if (nb_left != nb_right)
 100a62c:	e1cd20d0 	ldrd	r2, [sp]
 100a630:	e1520003 	cmp	r2, r3
        return RB_ERROR_BLACK_HEIGHT;
 100a634:	13a00001 	movne	r0, #1
 100a638:	1afffff0 	bne	100a600 <treetable_assert_rb_rules+0x9c>
        return RB_ERROR_OK;
 100a63c:	e3a00004 	mov	r0, #4
}
 100a640:	e28dd00c 	add	sp, sp, #12
 100a644:	e8bd8030 	pop	{r4, r5, pc}

0100a648 <acq_hacks_init>:
#include "fabric_config.h"
#include "trigger.h"

void acq_hacks_init()
{
	d_printf(D_ERROR, "Start test");
 100a648:	e30810f0 	movw	r1, #33008	; 0x80f0
{
 100a64c:	e92d4010 	push	{r4, lr}
	d_printf(D_ERROR, "Start test");
 100a650:	e3a00004 	mov	r0, #4
 100a654:	e3401106 	movt	r1, #262	; 0x106
 100a658:	eb001342 	bl	100f368 <d_printf>

	acq_prepare_triggered(ACQ_MODE_1CH | ACQ_MODE_8BIT, 12000, 12000, 99);
 100a65c:	e3022ee0 	movw	r2, #12000	; 0x2ee0
 100a660:	e3a03063 	mov	r3, #99	; 0x63
 100a664:	e1a01002 	mov	r1, r2
 100a668:	e3a00021 	mov	r0, #33	; 0x21
 100a66c:	eb0002be 	bl	100b16c <acq_prepare_triggered>
	trig_configure_edge(TRIG_ADCSRC1, 0x7f, 0x10, TRIG_EDGE_RISING);
 100a670:	e3a0107f 	mov	r1, #127	; 0x7f
 100a674:	e3a03002 	mov	r3, #2
 100a678:	e3a02010 	mov	r2, #16
 100a67c:	e3a00000 	mov	r0, #0
 100a680:	eb002435 	bl	101375c <trig_configure_edge>
	acq_start(1);
 100a684:	e3a00001 	mov	r0, #1
 100a688:	eb000421 	bl	100b714 <acq_start>

	bogo_delay(10000);
 100a68c:	e3020710 	movw	r0, #10000	; 0x2710
 100a690:	eb00131b 	bl	100f304 <bogo_delay>

	dma_bd_debug_dump(g_mipi_csi_state.bd_ring);
 100a694:	e3063c78 	movw	r3, #27768	; 0x6c78
 100a698:	e3403107 	movt	r3, #263	; 0x107
 100a69c:	e5930758 	ldr	r0, [r3, #1880]	; 0x758
 100a6a0:	eb000fc6 	bl	100e5c0 <dma_bd_debug_dump>

	d_printf(D_ERROR, "Done test");
 100a6a4:	e30810fc 	movw	r1, #33020	; 0x80fc
 100a6a8:	e3a00004 	mov	r0, #4
 100a6ac:	e3401106 	movt	r1, #262	; 0x106
}
 100a6b0:	e8bd4010 	pop	{r4, lr}
	d_printf(D_ERROR, "Done test");
 100a6b4:	ea00132b 	b	100f368 <d_printf>

0100a6b8 <acq_hacks_run>:

void acq_hacks_run()
{
 100a6b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100a6bc:	e30572d8 	movw	r7, #21208	; 0x52d8
	int i;

	while(1) {
		d_printf(D_ERROR, "Press key to iterate");
 100a6c0:	e3086108 	movw	r6, #33032	; 0x8108
		d_waitkey();

		d_printf(D_ERROR, "Iteration");
 100a6c4:	e3085120 	movw	r5, #33056	; 0x8120
 100a6c8:	e3407107 	movt	r7, #263	; 0x107
		d_printf(D_ERROR, "Press key to iterate");
 100a6cc:	e3406106 	movt	r6, #262	; 0x106
		d_printf(D_ERROR, "Iteration");
 100a6d0:	e3405106 	movt	r5, #262	; 0x106
		d_printf(D_ERROR, "Press key to iterate");
 100a6d4:	e1a01006 	mov	r1, r6
 100a6d8:	e3a00004 	mov	r0, #4
 100a6dc:	eb001321 	bl	100f368 <d_printf>
		d_waitkey();
 100a6e0:	eb001396 	bl	100f540 <d_waitkey>
		d_printf(D_ERROR, "Iteration");
 100a6e4:	e1a01005 	mov	r1, r5
 100a6e8:	e3a00004 	mov	r0, #4
 100a6ec:	eb00131d 	bl	100f368 <d_printf>

		acq_stop();
 100a6f0:	eb000464 	bl	100b888 <acq_stop>
		acq_rewind();
 100a6f4:	eb00024b 	bl	100b028 <acq_rewind>

		d_printf(D_ERROR, "got %d waves", acq_get_nwaves_done());
 100a6f8:	e308112c 	movw	r1, #33068	; 0x812c
 100a6fc:	e597277c 	ldr	r2, [r7, #1916]	; 0x77c
 100a700:	e3401106 	movt	r1, #262	; 0x106
 100a704:	e3a00004 	mov	r0, #4

		mipi_csi_queue_all_waves();
		//acq_swap();
		//acq_start(1);
		mipi_csi_unpop_and_start_all();
 100a708:	e3a0400a 	mov	r4, #10
		d_printf(D_ERROR, "got %d waves", acq_get_nwaves_done());
 100a70c:	eb001315 	bl	100f368 <d_printf>
		mipi_csi_queue_all_waves();
 100a710:	eb0017b6 	bl	10105f0 <mipi_csi_queue_all_waves>
		mipi_csi_unpop_and_start_all();
 100a714:	eb0018e7 	bl	1010ab8 <mipi_csi_unpop_and_start_all>

		//d_printf(D_ERROR, "Running CSI");

		for(i = 0; i < 10; i++) {
			mipi_csi_tick();
 100a718:	eb001950 	bl	1010c60 <mipi_csi_tick>
		for(i = 0; i < 10; i++) {
 100a71c:	e2544001 	subs	r4, r4, #1
 100a720:	1afffffc 	bne	100a718 <acq_hacks_run+0x60>
		}

		acq_start(1);
 100a724:	e3a00001 	mov	r0, #1
 100a728:	eb0003f9 	bl	100b714 <acq_start>
		bogo_delay(10000);
 100a72c:	e3020710 	movw	r0, #10000	; 0x2710
 100a730:	eb0012f3 	bl	100f304 <bogo_delay>

		d_printf(D_ERROR, "Done");
 100a734:	e308113c 	movw	r1, #33084	; 0x813c
 100a738:	e3a00004 	mov	r0, #4
 100a73c:	e3401106 	movt	r1, #262	; 0x106
 100a740:	eb001308 	bl	100f368 <d_printf>
		d_printf(D_ERROR, "Press key to iterate");
 100a744:	eaffffe2 	b	100a6d4 <acq_hacks_run+0x1c>

0100a748 <_acq_irq_fifo_gen_rst>:
{
	uint32_t res;

	reg &= FAB_CFG_ADDR_MASK;
	//dsb();
	res = _FAB_CFG_ACCESS(reg);
 100a748:	e3a01000 	mov	r1, #0
 100a74c:	e34413c0 	movt	r1, #17344	; 0x43c0
 100a750:	e5913058 	ldr	r3, [r1, #88]	; 0x58
		d_printf(D_WARN, "NotRecover");
		return;
	}
#endif

	if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_RG_FIFO_STALL)) {
 100a754:	e3130010 	tst	r3, #16
 100a758:	0a00004c 	beq	100a890 <_acq_irq_fifo_gen_rst+0x148>
{
 100a75c:	e92d4070 	push	{r4, r5, r6, lr}
	fabcfg_write(FAB_CFG_ACQ_CTRL_A, g_acq_state.acq_ctrl_a);
}

static inline void _acq_clear_and_set_ctrl_a(uint32_t bitmask_clear, uint32_t bitmask_set)
{
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100a760:	e30542d8 	movw	r4, #21208	; 0x52d8
 100a764:	e3404107 	movt	r4, #263	; 0x107
		_acq_clear_and_set_ctrl_a(ACQ_CTRL_A_RUN | ACQ_CTRL_A_AXI_RUN, ACQ_CTRL_A_FIFO_RESET /*| ACQ_CTRL_A_TRIG_RST*/ | ACQ_CTRL_A_ABORT);

		// Wait until both FIFO level readouts report 0x0000
		while(((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_A) & ACQ_STATUS_A_FIFO_MASK) != 0) && \
 100a768:	e3a03000 	mov	r3, #0
{
 100a76c:	e24dd008 	sub	sp, sp, #8
		while(((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_A) & ACQ_STATUS_A_FIFO_MASK) != 0) && \
 100a770:	e34f3fff 	movt	r3, #65535	; 0xffff
 100a774:	e5940780 	ldr	r0, [r4, #1920]	; 0x780
	res = _FAB_CFG_ACCESS(reg);
 100a778:	e1a02001 	mov	r2, r1
 100a77c:	e3c0c003 	bic	ip, r0, #3
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100a780:	e38cc060 	orr	ip, ip, #96	; 0x60
 100a784:	e584c780 	str	ip, [r4, #1920]	; 0x780
static inline void fabcfg_write(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;
	//d_printf(D_RAW, "%08x : %08x\r\n", reg, data);
	//dsb();
	_FAB_CFG_ACCESS(reg) = data;
 100a788:	e581c050 	str	ip, [r1, #80]	; 0x50
 100a78c:	ea000002 	b	100a79c <_acq_irq_fifo_gen_rst+0x54>
	res = _FAB_CFG_ACCESS(reg);
 100a790:	e592105c 	ldr	r1, [r2, #92]	; 0x5c
 100a794:	e1110003 	tst	r1, r3
 100a798:	0a000002 	beq	100a7a8 <_acq_irq_fifo_gen_rst+0x60>
 100a79c:	e5921058 	ldr	r1, [r2, #88]	; 0x58
 100a7a0:	e1110003 	tst	r1, r3
 100a7a4:	1afffff9 	bne	100a790 <_acq_irq_fifo_gen_rst+0x48>
			  ((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_B) & ACQ_STATUS_B_FIFO_MASK) != 0)) ;

		_acq_clear_ctrl_a(ACQ_CTRL_A_FIFO_RESET  /*| ACQ_CTRL_A_TRIG_RST*/ | ACQ_CTRL_A_ABORT);

		// Reset the current acquisition and try again.  Set a tracking flag for diagnostics/debug.
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a7a8:	e5942884 	ldr	r2, [r4, #2180]	; 0x884
	_FAB_CFG_ACCESS(reg) = data;
 100a7ac:	e3a0c000 	mov	ip, #0
 100a7b0:	e59f6110 	ldr	r6, [pc, #272]	; 100a8c8 <_acq_irq_fifo_gen_rst+0x180>
 100a7b4:	e3c03063 	bic	r3, r0, #99	; 0x63
 100a7b8:	e344c3c0 	movt	ip, #17344	; 0x43c0
		g_acq_state.acq_current->trigger_at = 0;
 100a7bc:	e3a00000 	mov	r0, #0
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a7c0:	e1d211b0 	ldrh	r1, [r2, #16]
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100a7c4:	e5843780 	str	r3, [r4, #1920]	; 0x780
		g_acq_state.state = ACQSTATE_WAIT_TRIG; // TODO: maybe need another state here
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL; // TODO: maybe need another state here

		XAxiDma_Reset(&g_acq_state.dma);
		while(!XAxiDma_ResetIsDone(&g_acq_state.dma));
 100a7c8:	e1a05006 	mov	r5, r6
 100a7cc:	e58c3050 	str	r3, [ip, #80]	; 0x50
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a7d0:	e3813004 	orr	r3, r1, #4
		g_acq_state.acq_current->trigger_at = 0;
 100a7d4:	e582000c 	str	r0, [r2, #12]
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a7d8:	e1c231b0 	strh	r3, [r2, #16]
		XAxiDma_Reset(&g_acq_state.dma);
 100a7dc:	e1a00006 	mov	r0, r6
		g_acq_state.state = ACQSTATE_WAIT_TRIG; // TODO: maybe need another state here
 100a7e0:	e3a02003 	mov	r2, #3
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL; // TODO: maybe need another state here
 100a7e4:	e3a03001 	mov	r3, #1
 100a7e8:	e1c420f0 	strd	r2, [r4]
		XAxiDma_Reset(&g_acq_state.dma);
 100a7ec:	eb00253a 	bl	1013cdc <XAxiDma_Reset>
		while(!XAxiDma_ResetIsDone(&g_acq_state.dma));
 100a7f0:	e1a00005 	mov	r0, r5
 100a7f4:	eb00257d 	bl	1013df0 <XAxiDma_ResetIsDone>
 100a7f8:	e3500000 	cmp	r0, #0
 100a7fc:	0afffffb 	beq	100a7f0 <_acq_irq_fifo_gen_rst+0xa8>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100a800:	e594c008 	ldr	ip, [r4, #8]
 */
int _acq_core_dma_start(uint32_t *buff_ptr, uint32_t buff_sz)
{
	int error;

	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a804:	e3a03001 	mov	r3, #1
		if(_acq_core_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz) != ACQRES_OK) {
 100a808:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a80c:	e59f00b4 	ldr	r0, [pc, #180]	; 100a8c8 <_acq_irq_fifo_gen_rst+0x180>
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 100a810:	e59c2030 	ldr	r2, [ip, #48]	; 0x30
 100a814:	e5911008 	ldr	r1, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100a818:	e3822a07 	orr	r2, r2, #28672	; 0x7000
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100a81c:	e58c2030 	str	r2, [ip, #48]	; 0x30
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a820:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 100a824:	eb002708 	bl	101444c <XAxiDma_SimpleTransfer>

	if(error != XST_SUCCESS) {
 100a828:	e2502000 	subs	r2, r0, #0
 100a82c:	1a00001b 	bne	100a8a0 <_acq_irq_fifo_gen_rst+0x158>
	return *(volatile u32 *) Addr;
 100a830:	e5942088 	ldr	r2, [r4, #136]	; 0x88
	res = _FAB_CFG_ACCESS(reg);
 100a834:	e3a00000 	mov	r0, #0
 100a838:	e34403c0 	movt	r0, #17344	; 0x43c0
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100a83c:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
		g_acq_state.stats.num_fifo_stall_total++;
 100a840:	e594c7d4 	ldr	ip, [r4, #2004]	; 0x7d4
 100a844:	e5922000 	ldr	r2, [r2]
 100a848:	e3c33802 	bic	r3, r3, #131072	; 0x20000
 100a84c:	e3c33010 	bic	r3, r3, #16
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
		return ACQRES_DMA_FAIL;
	}

	g_acq_state.dmacr_state = XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_CR_OFFSET);
 100a850:	e5842784 	str	r2, [r4, #1924]	; 0x784
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100a854:	e3833f41 	orr	r3, r3, #260	; 0x104
 100a858:	e590e058 	ldr	lr, [r0, #88]	; 0x58
 100a85c:	e3833003 	orr	r3, r3, #3
		g_acq_state.stats.num_fifo_stall_total++;
 100a860:	e59427d0 	ldr	r2, [r4, #2000]	; 0x7d0
		stat_a = fabcfg_read(FAB_CFG_ACQ_STATUS_A);
 100a864:	e58de000 	str	lr, [sp]
 100a868:	e590e05c 	ldr	lr, [r0, #92]	; 0x5c
		g_acq_state.stats.num_fifo_stall_total++;
 100a86c:	e2922001 	adds	r2, r2, #1
 100a870:	e2acc000 	adc	ip, ip, #0
 100a874:	e5863778 	str	r3, [r6, #1912]	; 0x778
		stat_b = fabcfg_read(FAB_CFG_ACQ_STATUS_B);
 100a878:	e58de004 	str	lr, [sp, #4]
	_FAB_CFG_ACCESS(reg) = data;
 100a87c:	e5803050 	str	r3, [r0, #80]	; 0x50
		g_acq_state.stats.num_fifo_stall_total++;
 100a880:	e58427d0 	str	r2, [r4, #2000]	; 0x7d0
 100a884:	e584c7d4 	str	ip, [r4, #2004]	; 0x7d4
}
 100a888:	e28dd008 	add	sp, sp, #8
 100a88c:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: FIFO stall interrupt without FIFO stall signal!");
 100a890:	e3081194 	movw	r1, #33172	; 0x8194
 100a894:	e3a00004 	mov	r0, #4
 100a898:	e3401106 	movt	r1, #262	; 0x106
 100a89c:	ea0012b1 	b	100f368 <d_printf>
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
 100a8a0:	e3081144 	movw	r1, #33092	; 0x8144
 100a8a4:	e3a00004 	mov	r0, #4
 100a8a8:	e3401106 	movt	r1, #262	; 0x106
 100a8ac:	eb0012ad 	bl	100f368 <d_printf>
			d_printf(D_ERROR, "acquire: FIFO stall not recovered");
 100a8b0:	e3081170 	movw	r1, #33136	; 0x8170
 100a8b4:	e3a00004 	mov	r0, #4
 100a8b8:	e3401106 	movt	r1, #262	; 0x106
}
 100a8bc:	e28dd008 	add	sp, sp, #8
 100a8c0:	e8bd4070 	pop	{r4, r5, r6, lr}
			d_printf(D_ERROR, "acquire: FIFO stall not recovered");
 100a8c4:	ea0012a7 	b	100f368 <d_printf>
 100a8c8:	010752e0 	.word	0x010752e0

0100a8cc <_acq_irq_error_dma>:
{
 100a8cc:	e92d4010 	push	{r4, lr}
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100a8d0:	e30542d8 	movw	r4, #21208	; 0x52d8
 100a8d4:	e3404107 	movt	r4, #263	; 0x107
{
 100a8d8:	e24dd008 	sub	sp, sp, #8
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100a8dc:	e30811d0 	movw	r1, #33232	; 0x81d0
 100a8e0:	e1a02000 	mov	r2, r0
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100a8e4:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100a8e8:	e3401106 	movt	r1, #262	; 0x106
 100a8ec:	e3a00004 	mov	r0, #4
 100a8f0:	e59c3004 	ldr	r3, [ip, #4]
 100a8f4:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
 100a8f8:	e58dc000 	str	ip, [sp]
 100a8fc:	eb001299 	bl	100f368 <d_printf>
	g_acq_state.acq_ctrl_a |= bitmask;
 100a900:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
 100a904:	e3a00000 	mov	r0, #0
	g_acq_state.stats.num_err_total++;
 100a908:	e59437c8 	ldr	r3, [r4, #1992]	; 0x7c8
 100a90c:	e34403c0 	movt	r0, #17344	; 0x43c0
 100a910:	e594c7cc 	ldr	ip, [r4, #1996]	; 0x7cc
 100a914:	e3811008 	orr	r1, r1, #8
 100a918:	e2933001 	adds	r3, r3, #1
 100a91c:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100a920:	e2acc000 	adc	ip, ip, #0
 100a924:	e5801050 	str	r1, [r0, #80]	; 0x50
	g_acq_state.state = ACQSTATE_ERROR;
 100a928:	e3a00006 	mov	r0, #6
	g_acq_state.sub_state = ACQSUBST_NONE;
 100a92c:	e3a01000 	mov	r1, #0
	g_acq_state.state = ACQSTATE_ERROR;
 100a930:	e5840000 	str	r0, [r4]
	XAxiDma_Reset(&g_acq_state.dma);
 100a934:	e2840008 	add	r0, r4, #8
	g_acq_state.sub_state = ACQSUBST_NONE;
 100a938:	e5841004 	str	r1, [r4, #4]
	g_acq_state.stats.num_err_total++;
 100a93c:	e58437c8 	str	r3, [r4, #1992]	; 0x7c8
 100a940:	e584c7cc 	str	ip, [r4, #1996]	; 0x7cc
}
 100a944:	e28dd008 	add	sp, sp, #8
 100a948:	e8bd4010 	pop	{r4, lr}
	XAxiDma_Reset(&g_acq_state.dma);
 100a94c:	ea0024e2 	b	1013cdc <XAxiDma_Reset>

0100a950 <_acq_reset_PL_fifo>:
{
 100a950:	e92d4070 	push	{r4, r5, r6, lr}
 100a954:	e30542d8 	movw	r4, #21208	; 0x52d8
 100a958:	e3404107 	movt	r4, #263	; 0x107
 100a95c:	e3a05000 	mov	r5, #0
 100a960:	e34453c0 	movt	r5, #17344	; 0x43c0
	bogo_delay(10);
 100a964:	e3a0000a 	mov	r0, #10
 100a968:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100a96c:	e3833020 	orr	r3, r3, #32
 100a970:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100a974:	e5853050 	str	r3, [r5, #80]	; 0x50
 100a978:	eb001261 	bl	100f304 <bogo_delay>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100a97c:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100a980:	e3c33020 	bic	r3, r3, #32
 100a984:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100a988:	e5853050 	str	r3, [r5, #80]	; 0x50
}
 100a98c:	e8bd8070 	pop	{r4, r5, r6, pc}

0100a990 <_acq_reset_trigger>:
	g_acq_state.acq_ctrl_a |= bitmask;
 100a990:	e30522d8 	movw	r2, #21208	; 0x52d8
 100a994:	e3a01000 	mov	r1, #0
 100a998:	e3402107 	movt	r2, #263	; 0x107
 100a99c:	e34413c0 	movt	r1, #17344	; 0x43c0
 100a9a0:	e5923780 	ldr	r3, [r2, #1920]	; 0x780
 100a9a4:	e3830008 	orr	r0, r3, #8
 100a9a8:	e3c33008 	bic	r3, r3, #8
 100a9ac:	e5810050 	str	r0, [r1, #80]	; 0x50
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100a9b0:	e5823780 	str	r3, [r2, #1920]	; 0x780
 100a9b4:	e5813050 	str	r3, [r1, #80]	; 0x50
}
 100a9b8:	e12fff1e 	bx	lr

0100a9bc <_acq_wait_for_ndone>:
	res = _FAB_CFG_ACCESS(reg);
 100a9bc:	e3a02000 	mov	r2, #0
 100a9c0:	e34423c0 	movt	r2, #17344	; 0x43c0
 100a9c4:	e5923058 	ldr	r3, [r2, #88]	; 0x58
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) ;
 100a9c8:	e3130001 	tst	r3, #1
 100a9cc:	1afffffc 	bne	100a9c4 <_acq_wait_for_ndone+0x8>
 100a9d0:	e12fff1e 	bx	lr

0100a9d4 <_acq_fast_dma_start>:
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100a9d4:	e30532d8 	movw	r3, #21208	; 0x52d8
 100a9d8:	e3403107 	movt	r3, #263	; 0x107
 100a9dc:	e593c088 	ldr	ip, [r3, #136]	; 0x88
	*LocalAddr = Value;
 100a9e0:	e58c0018 	str	r0, [ip, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100a9e4:	e5932784 	ldr	r2, [r3, #1924]	; 0x784
 100a9e8:	e3822001 	orr	r2, r2, #1
 100a9ec:	e5832784 	str	r2, [r3, #1924]	; 0x784
 100a9f0:	e58c2000 	str	r2, [ip]
 100a9f4:	e58c1028 	str	r1, [ip, #40]	; 0x28
}
 100a9f8:	e12fff1e 	bx	lr

0100a9fc <_acq_core_dma_start>:
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a9fc:	e1a02001 	mov	r2, r1
{
 100aa00:	e92d4010 	push	{r4, lr}
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100aa04:	e1a01000 	mov	r1, r0
 100aa08:	e3a03001 	mov	r3, #1
 100aa0c:	e59f003c 	ldr	r0, [pc, #60]	; 100aa50 <_acq_core_dma_start+0x54>
 100aa10:	eb00268d 	bl	101444c <XAxiDma_SimpleTransfer>
	if(error != XST_SUCCESS) {
 100aa14:	e3500000 	cmp	r0, #0
 100aa18:	1a000005 	bne	100aa34 <_acq_core_dma_start+0x38>
	g_acq_state.dmacr_state = XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_CR_OFFSET);
 100aa1c:	e30532d8 	movw	r3, #21208	; 0x52d8
 100aa20:	e3403107 	movt	r3, #263	; 0x107
	return *(volatile u32 *) Addr;
 100aa24:	e5932088 	ldr	r2, [r3, #136]	; 0x88
 100aa28:	e5922000 	ldr	r2, [r2]
 100aa2c:	e5832784 	str	r2, [r3, #1924]	; 0x784

	//d_printf(D_WARN, "c=%d", buff_sz);

	return ACQRES_OK;
}
 100aa30:	e8bd8010 	pop	{r4, pc}
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
 100aa34:	e3081144 	movw	r1, #33092	; 0x8144
 100aa38:	e1a02000 	mov	r2, r0
 100aa3c:	e3401106 	movt	r1, #262	; 0x106
 100aa40:	e3a00004 	mov	r0, #4
 100aa44:	eb001247 	bl	100f368 <d_printf>
		return ACQRES_DMA_FAIL;
 100aa48:	e3e00004 	mvn	r0, #4
 100aa4c:	e8bd8010 	pop	{r4, pc}
 100aa50:	010752e0 	.word	0x010752e0

0100aa54 <acq_write_training>:
void acq_write_training()
{
	int i;
	uint32_t train_regA = 0, train_regB = 0;

	d_printf(D_INFO, "acquire: start loading train values");
 100aa54:	e3081218 	movw	r1, #33304	; 0x8218
{
 100aa58:	e92d4070 	push	{r4, r5, r6, lr}
	d_printf(D_INFO, "acquire: start loading train values");
 100aa5c:	e3a00002 	mov	r0, #2
 100aa60:	e3401106 	movt	r1, #262	; 0x106
 100aa64:	eb00123f 	bl	100f368 <d_printf>

	// 5 LSBs from each line train value are stored into A and B registers
	for(i = 0; i < 4; i++) {
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aa68:	e305c2d8 	movw	ip, #21208	; 0x52d8
	_FAB_CFG_ACCESS(reg) = data;
 100aa6c:	e3a00000 	mov	r0, #0
 100aa70:	e340c107 	movt	ip, #263	; 0x107
 100aa74:	e34403c0 	movt	r0, #17344	; 0x43c0
 100aa78:	e5dc3899 	ldrb	r3, [ip, #2201]	; 0x899
	res = _FAB_CFG_ACCESS(reg);
 100aa7c:	e1a02000 	mov	r2, r0
	}

	for(i = 0; i < 4; i++) {
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aa80:	e5dc189d 	ldrb	r1, [ip, #2205]	; 0x89d
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aa84:	e5dc4898 	ldrb	r4, [ip, #2200]	; 0x898
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aa88:	e5dce89c 	ldrb	lr, [ip, #2204]	; 0x89c
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aa8c:	e203301f 	and	r3, r3, #31
 100aa90:	e1a03583 	lsl	r3, r3, #11
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aa94:	e201101f 	and	r1, r1, #31
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aa98:	e5dc689b 	ldrb	r6, [ip, #2203]	; 0x89b
 100aa9c:	e204401f 	and	r4, r4, #31
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aaa0:	e1a01581 	lsl	r1, r1, #11
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aaa4:	e1833184 	orr	r3, r3, r4, lsl #3
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aaa8:	e5dc489e 	ldrb	r4, [ip, #2206]	; 0x89e
 100aaac:	e20ee01f 	and	lr, lr, #31
 100aab0:	e5dc589f 	ldrb	r5, [ip, #2207]	; 0x89f
 100aab4:	e181118e 	orr	r1, r1, lr, lsl #3
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aab8:	e5dce89a 	ldrb	lr, [ip, #2202]	; 0x89a
 100aabc:	e1833d86 	orr	r3, r3, r6, lsl #27
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aac0:	e204401f 	and	r4, r4, #31
 100aac4:	e1811984 	orr	r1, r1, r4, lsl #19
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100aac8:	e20ec01f 	and	ip, lr, #31
 100aacc:	e183398c 	orr	r3, r3, ip, lsl #19
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100aad0:	e1811d85 	orr	r1, r1, r5, lsl #27
	}

	fabcfg_write(FAB_CFG_ACQ_TRAIN_A, train_regA | ACQ_TRAIN_A_LOAD);
 100aad4:	e3833001 	orr	r3, r3, #1
	_FAB_CFG_ACCESS(reg) = data;
 100aad8:	e5803064 	str	r3, [r0, #100]	; 0x64
 100aadc:	e5801068 	str	r1, [r0, #104]	; 0x68
	res = _FAB_CFG_ACCESS(reg);
 100aae0:	e5923060 	ldr	r3, [r2, #96]	; 0x60
	fabcfg_write(FAB_CFG_ACQ_TRAIN_B, train_regB);

	// Verify "DL" bit is clear
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_C, ACQ_STATUS_C_DELAY_LOADED)) ;
 100aae4:	e3130a02 	tst	r3, #8192	; 0x2000
 100aae8:	1afffffc 	bne	100aae0 <acq_write_training+0x8c>
 */
static inline void fabcfg_clear(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;
	//dsb();
	_FAB_CFG_ACCESS(reg) &= ~data;
 100aaec:	e5923064 	ldr	r3, [r2, #100]	; 0x64
	while(!fabcfg_test(FAB_CFG_ACQ_STATUS_C, ACQ_STATUS_C_DELAY_LOADED)) {
		//outbyte('C');
	}
#endif

	d_printf(D_INFO, "acquire: training values loaded");
 100aaf0:	e308123c 	movw	r1, #33340	; 0x823c
 100aaf4:	e3401106 	movt	r1, #262	; 0x106
 100aaf8:	e3a00002 	mov	r0, #2
}
 100aafc:	e8bd4070 	pop	{r4, r5, r6, lr}
 100ab00:	e3c33001 	bic	r3, r3, #1
 100ab04:	e5823064 	str	r3, [r2, #100]	; 0x64
	d_printf(D_INFO, "acquire: training values loaded");
 100ab08:	ea001216 	b	100f368 <d_printf>

0100ab0c <acq_init>:
{
 100ab0c:	e92d4070 	push	{r4, r5, r6, lr}
	g_acq_state.state = ACQSTATE_UNINIT;
 100ab10:	e30542d8 	movw	r4, #21208	; 0x52d8
 100ab14:	e3404107 	movt	r4, #263	; 0x107
 100ab18:	e3a02000 	mov	r2, #0
 100ab1c:	e3a03000 	mov	r3, #0
	g_acq_state.acq_first = NULL;
 100ab20:	e284cd22 	add	ip, r4, #2176	; 0x880
	g_acq_state.last_debug_timer = 0;
 100ab24:	e2841e81 	add	r1, r4, #2064	; 0x810
	g_acq_state.acq_first = NULL;
 100ab28:	e1cc20f0 	strd	r2, [ip]
	g_acq_state.state = ACQSTATE_UNINIT;
 100ab2c:	e1c420f0 	strd	r2, [r4]
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 100ab30:	e3a00000 	mov	r0, #0
	g_acq_state.last_debug_timer = 0;
 100ab34:	e1c120f0 	strd	r2, [r1]
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 100ab38:	e2845008 	add	r5, r4, #8
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 100ab3c:	eb0026ad 	bl	10145f8 <XAxiDma_LookupConfig>
 100ab40:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 100ab44:	e1a00005 	mov	r0, r5
 100ab48:	e1a01003 	mov	r1, r3
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 100ab4c:	e5843758 	str	r3, [r4, #1880]	; 0x758
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 100ab50:	eb0024b9 	bl	1013e3c <XAxiDma_CfgInitialize>
	if(error != XST_SUCCESS) {
 100ab54:	e3500000 	cmp	r0, #0
 100ab58:	1a000046 	bne	100ac78 <acq_init+0x16c>
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 100ab5c:	e5943758 	ldr	r3, [r4, #1880]	; 0x758
 100ab60:	e3081298 	movw	r1, #33432	; 0x8298
 100ab64:	e3a00002 	mov	r0, #2
 100ab68:	e3401106 	movt	r1, #262	; 0x106
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 100ab6c:	e1a04005 	mov	r4, r5
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 100ab70:	e5932004 	ldr	r2, [r3, #4]
 100ab74:	eb0011fb 	bl	100f368 <d_printf>
	XAxiDma_Reset(&g_acq_state.dma);
 100ab78:	e1a00005 	mov	r0, r5
 100ab7c:	eb002456 	bl	1013cdc <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 100ab80:	e1a00004 	mov	r0, r4
 100ab84:	eb002499 	bl	1013df0 <XAxiDma_ResetIsDone>
 100ab88:	e3500000 	cmp	r0, #0
 100ab8c:	0afffffb 	beq	100ab80 <acq_init+0x74>
	d_printf(D_INFO, "acquire: DMA reset OK");
 100ab90:	e30812bc 	movw	r1, #33468	; 0x82bc
 100ab94:	e3a00002 	mov	r0, #2
 100ab98:	e3401106 	movt	r1, #262	; 0x106
 100ab9c:	eb0011f1 	bl	100f368 <d_printf>
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ, ACQ_DMA_RX_IRQ_PRIO, ACQ_DMA_RX_IRQ_TRIG);
 100aba0:	e3050b80 	movw	r0, #23424	; 0x5b80
 100aba4:	e3a03003 	mov	r3, #3
 100aba8:	e3400107 	movt	r0, #263	; 0x107
 100abac:	e3a02040 	mov	r2, #64	; 0x40
 100abb0:	e3a0103d 	mov	r1, #61	; 0x3d
 100abb4:	eb00329a 	bl	1017624 <XScuGic_SetPriorityTriggerType>
	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ, \
 100abb8:	e30c2068 	movw	r2, #49256	; 0xc068
 100abbc:	e3050b80 	movw	r0, #23424	; 0x5b80
 100abc0:	e3402100 	movt	r2, #256	; 0x100
 100abc4:	e3400107 	movt	r0, #263	; 0x107
 100abc8:	e59f30fc 	ldr	r3, [pc, #252]	; 100accc <acq_init+0x1c0>
 100abcc:	e3a0103d 	mov	r1, #61	; 0x3d
 100abd0:	eb0031f2 	bl	10173a0 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 100abd4:	e2504000 	subs	r4, r0, #0
 100abd8:	1a000034 	bne	100acb0 <acq_init+0x1a4>
	d_printf(D_INFO, "acquire: SCUGIC connected for DMA IRQ");
 100abdc:	e3081314 	movw	r1, #33556	; 0x8314
 100abe0:	e3a00002 	mov	r0, #2
 100abe4:	e3401106 	movt	r1, #262	; 0x106
 100abe8:	eb0011de 	bl	100f368 <d_printf>
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ, ACQ_FIFO_STALL_IRQ_PRIO, \
 100abec:	e3050b80 	movw	r0, #23424	; 0x5b80
 100abf0:	e3a03003 	mov	r3, #3
 100abf4:	e3400107 	movt	r0, #263	; 0x107
 100abf8:	e3a02020 	mov	r2, #32
 100abfc:	e3a0103e 	mov	r1, #62	; 0x3e
 100ac00:	eb003287 	bl	1017624 <XScuGic_SetPriorityTriggerType>
	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ, \
 100ac04:	e30a2748 	movw	r2, #42824	; 0xa748
 100ac08:	e3050b80 	movw	r0, #23424	; 0x5b80
 100ac0c:	e1a03004 	mov	r3, r4
 100ac10:	e3402100 	movt	r2, #256	; 0x100
 100ac14:	e3400107 	movt	r0, #263	; 0x107
 100ac18:	e3a0103e 	mov	r1, #62	; 0x3e
 100ac1c:	eb0031df 	bl	10173a0 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 100ac20:	e2504000 	subs	r4, r0, #0
 100ac24:	1a00001a 	bne	100ac94 <acq_init+0x188>
	d_printf(D_INFO, "acquire: SCUGIC connected for FIFO stall IRQ");
 100ac28:	e308137c 	movw	r1, #33660	; 0x837c
 100ac2c:	e3a00002 	mov	r0, #2
 100ac30:	e3401106 	movt	r1, #262	; 0x106
 100ac34:	eb0011cb 	bl	100f368 <d_printf>
	XScuGic_Enable(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ);
 100ac38:	e3050b80 	movw	r0, #23424	; 0x5b80
 100ac3c:	e3a0103d 	mov	r1, #61	; 0x3d
 100ac40:	e3400107 	movt	r0, #263	; 0x107
 100ac44:	eb00332c 	bl	10178fc <XScuGic_Enable>
	XScuGic_Enable(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ);
 100ac48:	e3050b80 	movw	r0, #23424	; 0x5b80
 100ac4c:	e3a0103e 	mov	r1, #62	; 0x3e
 100ac50:	e3400107 	movt	r0, #263	; 0x107
 100ac54:	eb003328 	bl	10178fc <XScuGic_Enable>
	d_printf(D_INFO, "acquire: SCUGIC configured");
 100ac58:	e30813ac 	movw	r1, #33708	; 0x83ac
 100ac5c:	e3a00002 	mov	r0, #2
 100ac60:	e3401106 	movt	r1, #262	; 0x106
 100ac64:	eb0011bf 	bl	100f368 <d_printf>
	for(i = 0; i < 8; i++) {
 100ac68:	e5854890 	str	r4, [r5, #2192]	; 0x890
 100ac6c:	e5854894 	str	r4, [r5, #2196]	; 0x894
}
 100ac70:	e8bd4070 	pop	{r4, r5, r6, lr}
	acq_write_training();
 100ac74:	eaffff76 	b	100aa54 <acq_write_training>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
 100ac78:	e308125c 	movw	r1, #33372	; 0x825c
 100ac7c:	e1a02000 	mov	r2, r0
 100ac80:	e3401106 	movt	r1, #262	; 0x106
 100ac84:	e3a00004 	mov	r0, #4
 100ac88:	eb0011b6 	bl	100f368 <d_printf>
		exit(-1);
 100ac8c:	e3e00000 	mvn	r0, #0
 100ac90:	fa0043e6 	blx	101bc30 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise FIFO stall IRQ! (error=%d)", error);
 100ac94:	e308133c 	movw	r1, #33596	; 0x833c
 100ac98:	e3a00004 	mov	r0, #4
 100ac9c:	e1a02004 	mov	r2, r4
 100aca0:	e3401106 	movt	r1, #262	; 0x106
 100aca4:	eb0011af 	bl	100f368 <d_printf>
		exit(-1);
 100aca8:	e3e00000 	mvn	r0, #0
 100acac:	fa0043df 	blx	101bc30 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
 100acb0:	e30812d4 	movw	r1, #33492	; 0x82d4
 100acb4:	e3a00004 	mov	r0, #4
 100acb8:	e1a02004 	mov	r2, r4
 100acbc:	e3401106 	movt	r1, #262	; 0x106
 100acc0:	eb0011a8 	bl	100f368 <d_printf>
		exit(-1);
 100acc4:	e3e00000 	mvn	r0, #0
 100acc8:	fa0043d8 	blx	101bc30 <exit>
 100accc:	01075360 	.word	0x01075360

0100acd0 <acq_get_next_alloc>:
 *
 * If this fails (e.g. no memory) ACQRES_MALLOC_FAIL is returned and values in `next`
 * are left unchanged; otherwise ACQRES_OK is returned.
 */
int acq_get_next_alloc(struct acq_buffer_t *next)
{
 100acd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	/*
	 * Buffer must align with a cache boundary (32 bytes) and end at the end of a cache boundary,
	 * even if the whole size is not used.
	 */
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100acd4:	e30552d8 	movw	r5, #21208	; 0x52d8
 100acd8:	e3405107 	movt	r5, #263	; 0x107
{
 100acdc:	e1a04000 	mov	r4, r0
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100ace0:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100ace4:	e595676c 	ldr	r6, [r5, #1900]	; 0x76c
 100ace8:	e0866000 	add	r6, r6, r0
 100acec:	e3c6601f 	bic	r6, r6, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100acf0:	e1a01006 	mov	r1, r6
 100acf4:	fa00466d 	blx	101c6b0 <memalign>

	if(work == NULL) {
 100acf8:	e250e000 	subs	lr, r0, #0
 100acfc:	0a000013 	beq	100ad50 <acq_get_next_alloc+0x80>
	// Both blocks allocated aligned, so both pointers are identical.  TODO: once tested buff_alloc
	// may be removed entirely.
	next->buff_alloc = work;
	next->buff_acq = work;

	g_acq_state.stats.num_alloc_total++;
 100ad00:	e59537f0 	ldr	r3, [r5, #2032]	; 0x7f0
	next->idx = 0;
 100ad04:	e3a01000 	mov	r1, #0
	g_acq_state.stats.num_alloc_total++;
 100ad08:	e595c7f4 	ldr	ip, [r5, #2036]	; 0x7f4

	return ACQRES_OK;
 100ad0c:	e1a00001 	mov	r0, r1
	next->pre_sz = g_acq_state.pre_buffsz;
 100ad10:	e5956764 	ldr	r6, [r5, #1892]	; 0x764
	next->flags = ACQBUF_FLAG_ALLOC;
 100ad14:	e3a07080 	mov	r7, #128	; 0x80
	g_acq_state.stats.num_alloc_total++;
 100ad18:	e2933001 	adds	r3, r3, #1
	next->idx = 0;
 100ad1c:	e5841000 	str	r1, [r4]
	next->trigger_at = 0;
 100ad20:	e584100c 	str	r1, [r4, #12]
	g_acq_state.stats.num_alloc_total++;
 100ad24:	e0acc001 	adc	ip, ip, r1
	next->next = NULL;
 100ad28:	e584101c 	str	r1, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 100ad2c:	e5951768 	ldr	r1, [r5, #1896]	; 0x768
	next->flags = ACQBUF_FLAG_ALLOC;
 100ad30:	e1c471b0 	strh	r7, [r4, #16]
	next->pre_sz = g_acq_state.pre_buffsz;
 100ad34:	e5846014 	str	r6, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100ad38:	e5841018 	str	r1, [r4, #24]
	next->buff_alloc = work;
 100ad3c:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 100ad40:	e584e008 	str	lr, [r4, #8]
	g_acq_state.stats.num_alloc_total++;
 100ad44:	e58537f0 	str	r3, [r5, #2032]	; 0x7f0
 100ad48:	e585c7f4 	str	ip, [r5, #2036]	; 0x7f4
}
 100ad4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100ad50:	e30813c8 	movw	r1, #33736	; 0x83c8
 100ad54:	e1a02006 	mov	r2, r6
 100ad58:	e3401106 	movt	r1, #262	; 0x106
 100ad5c:	e3a00004 	mov	r0, #4
 100ad60:	eb001180 	bl	100f368 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100ad64:	e59537e8 	ldr	r3, [r5, #2024]	; 0x7e8
 100ad68:	e2855e7f 	add	r5, r5, #2032	; 0x7f0
 100ad6c:	e5152004 	ldr	r2, [r5, #-4]
 100ad70:	e2933001 	adds	r3, r3, #1
 100ad74:	e2a22000 	adc	r2, r2, #0
 100ad78:	e5053008 	str	r3, [r5, #-8]
 100ad7c:	e5052004 	str	r2, [r5, #-4]
		malloc_stats();
 100ad80:	fa004afa 	blx	101d970 <malloc_stats>
		return ACQRES_MALLOC_FAIL;
 100ad84:	e3e00000 	mvn	r0, #0
 100ad88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0100ad8c <acq_append_next_alloc>:
/*
 * Append a new acquisition buffer to the linked list and set the current pointer to reference
 * this acquisition pointer.
 */
int acq_append_next_alloc()
{
 100ad8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct acq_buffer_t *next;
	int res;

	next = malloc(sizeof(struct acq_buffer_t));
 100ad90:	e3a00020 	mov	r0, #32
 100ad94:	fa004687 	blx	101c7b8 <malloc>

	/*
	 * Allocate the struct that stores the buffer info first.  This is
	 * just a few bytes, but could fail if we are near the memory limit.
	 */
	if(next == NULL) {
 100ad98:	e2504000 	subs	r4, r0, #0
 100ad9c:	0a00003a 	beq	100ae8c <acq_append_next_alloc+0x100>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100ada0:	e30552d8 	movw	r5, #21208	; 0x52d8
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100ada4:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100ada8:	e3405107 	movt	r5, #263	; 0x107
		g_acq_state.stats.num_alloc_err_total++;
		malloc_stats();
		return ACQRES_MALLOC_FAIL;
	}

	next->next = NULL;
 100adac:	e3a06000 	mov	r6, #0
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100adb0:	e595776c 	ldr	r7, [r5, #1900]	; 0x76c
	next->flags = ACQBUF_FLAG_ALLOC;
 100adb4:	e3a08080 	mov	r8, #128	; 0x80
	next->next = NULL;
 100adb8:	e584601c 	str	r6, [r4, #28]
	next->trigger_at = 0;
 100adbc:	e584600c 	str	r6, [r4, #12]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100adc0:	e0877000 	add	r7, r7, r0
	next->flags = ACQBUF_FLAG_ALLOC;
 100adc4:	e1c481b0 	strh	r8, [r4, #16]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100adc8:	e3c7701f 	bic	r7, r7, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100adcc:	e1a01007 	mov	r1, r7
 100add0:	fa004636 	blx	101c6b0 <memalign>
	if(work == NULL) {
 100add4:	e250e000 	subs	lr, r0, #0
 100add8:	0a000017 	beq	100ae3c <acq_append_next_alloc+0xb0>
	 * Set current acquisition next pointer to this structure, increase the index
	 * to be one higher than the last index then move the current pointer to reference
	 * this structure.
	 */
	//d_printf(D_INFO, "AppNext cur:%08x cur->next:%08x next:%08x", g_acq_state.acq_current, g_acq_state.acq_current->next, next);
	g_acq_state.acq_current->next = next;
 100addc:	e5957884 	ldr	r7, [r5, #2180]	; 0x884
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
	g_acq_state.acq_current = next;
	g_acq_state.stats.num_alloc_total++;

	return ACQRES_OK;
 100ade0:	e1a00006 	mov	r0, r6
	g_acq_state.stats.num_alloc_total++;
 100ade4:	e59517f0 	ldr	r1, [r5, #2032]	; 0x7f0
	next->idx = 0;
 100ade8:	e5846000 	str	r6, [r4]
	g_acq_state.stats.num_alloc_total++;
 100adec:	e59527f4 	ldr	r2, [r5, #2036]	; 0x7f4
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100adf0:	e5973000 	ldr	r3, [r7]
	g_acq_state.stats.num_alloc_total++;
 100adf4:	e2911002 	adds	r1, r1, #2
	next->trigger_at = 0;
 100adf8:	e584600c 	str	r6, [r4, #12]
	next->flags = ACQBUF_FLAG_ALLOC;
 100adfc:	e1c481b0 	strh	r8, [r4, #16]
	g_acq_state.stats.num_alloc_total++;
 100ae00:	e2a22000 	adc	r2, r2, #0
	next->pre_sz = g_acq_state.pre_buffsz;
 100ae04:	e5958764 	ldr	r8, [r5, #1892]	; 0x764
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100ae08:	e2833001 	add	r3, r3, #1
	next->next = NULL;
 100ae0c:	e584601c 	str	r6, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 100ae10:	e5956768 	ldr	r6, [r5, #1896]	; 0x768
	next->buff_alloc = work;
 100ae14:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 100ae18:	e584e008 	str	lr, [r4, #8]
	next->pre_sz = g_acq_state.pre_buffsz;
 100ae1c:	e5848014 	str	r8, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100ae20:	e5846018 	str	r6, [r4, #24]
	g_acq_state.acq_current->next = next;
 100ae24:	e587401c 	str	r4, [r7, #28]
	g_acq_state.stats.num_alloc_total++;
 100ae28:	e58517f0 	str	r1, [r5, #2032]	; 0x7f0
 100ae2c:	e58527f4 	str	r2, [r5, #2036]	; 0x7f4
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100ae30:	e5843000 	str	r3, [r4]
	g_acq_state.acq_current = next;
 100ae34:	e5854884 	str	r4, [r5, #2180]	; 0x884
}
 100ae38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100ae3c:	e30813c8 	movw	r1, #33736	; 0x83c8
 100ae40:	e1a02007 	mov	r2, r7
 100ae44:	e3401106 	movt	r1, #262	; 0x106
 100ae48:	e3a00004 	mov	r0, #4
 100ae4c:	eb001145 	bl	100f368 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100ae50:	e59537e8 	ldr	r3, [r5, #2024]	; 0x7e8
 100ae54:	e2855e7f 	add	r5, r5, #2032	; 0x7f0
 100ae58:	e5152004 	ldr	r2, [r5, #-4]
 100ae5c:	e2933001 	adds	r3, r3, #1
 100ae60:	e0a22006 	adc	r2, r2, r6
 100ae64:	e5053008 	str	r3, [r5, #-8]
 100ae68:	e5052004 	str	r2, [r5, #-4]
		malloc_stats();
 100ae6c:	fa004abf 	blx	101d970 <malloc_stats>
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 100ae70:	e308143c 	movw	r1, #33852	; 0x843c
 100ae74:	e3e02000 	mvn	r2, #0
 100ae78:	e3401106 	movt	r1, #262	; 0x106
 100ae7c:	e3a00004 	mov	r0, #4
 100ae80:	eb001138 	bl	100f368 <d_printf>
		return ACQRES_MALLOC_FAIL;
 100ae84:	e3e00000 	mvn	r0, #0
		return res;
 100ae88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for alloc structure", sizeof(struct acq_buffer_t));
 100ae8c:	e3081400 	movw	r1, #33792	; 0x8400
 100ae90:	e3a00004 	mov	r0, #4
 100ae94:	e3a02020 	mov	r2, #32
 100ae98:	e3401106 	movt	r1, #262	; 0x106
 100ae9c:	eb001131 	bl	100f368 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100aea0:	e59f2020 	ldr	r2, [pc, #32]	; 100aec8 <acq_append_next_alloc+0x13c>
 100aea4:	e5123008 	ldr	r3, [r2, #-8]
 100aea8:	e5121004 	ldr	r1, [r2, #-4]
 100aeac:	e2933001 	adds	r3, r3, #1
 100aeb0:	e2a11000 	adc	r1, r1, #0
 100aeb4:	e5023008 	str	r3, [r2, #-8]
 100aeb8:	e5021004 	str	r1, [r2, #-4]
		malloc_stats();
 100aebc:	fa004aab 	blx	101d970 <malloc_stats>
 100aec0:	e3e00000 	mvn	r0, #0
 100aec4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 100aec8:	01075ac8 	.word	0x01075ac8

0100aecc <acq_free_all_alloc_core>:
/*
 * Free all acquisition buffers starting from a pointer.  Recommend disabling
 * interrupts while executing this function.
 */
void acq_free_all_alloc_core(struct acq_buffer_t *list_base)
{
 100aecc:	e92d4030 	push	{r4, r5, lr}
	struct acq_buffer_t *next = list_base;
	struct acq_buffer_t *next_next;

	D_ASSERT(list_base != NULL);
 100aed0:	e2504000 	subs	r4, r0, #0
{
 100aed4:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(list_base != NULL);
 100aed8:	0a000008 	beq	100af00 <acq_free_all_alloc_core+0x34>
	 * a NULL next pointer.
	 */
	while(next != NULL) {
		//d_printf(D_INFO, "FA Ba:%08x n:%08x b:%08x idx:%d nn:%08x fl:%04x", list_base, next, next->buff_alloc, next->idx, next->next, next->flags);

		next_next = next->next;
 100aedc:	e594501c 	ldr	r5, [r4, #28]

		// Free the buffer *and* the acquisition structure
		//d_printf(D_INFO, "free 0x%08x [BA]", next->buff_alloc);
		free(next->buff_alloc);
 100aee0:	e5940004 	ldr	r0, [r4, #4]
 100aee4:	fa004637 	blx	101c7c8 <free>

		//d_printf(D_INFO, "free 0x%08x (N)", next);
		free(next);
 100aee8:	e1a00004 	mov	r0, r4
 100aeec:	fa004635 	blx	101c7c8 <free>
	while(next != NULL) {
 100aef0:	e2554000 	subs	r4, r5, #0
 100aef4:	1afffff8 	bne	100aedc <acq_free_all_alloc_core+0x10>

		next = next_next;
	}

	//d_printf(D_INFO, "donefree");
}
 100aef8:	e28dd00c 	add	sp, sp, #12
 100aefc:	e8bd8030 	pop	{r4, r5, pc}
	D_ASSERT(list_base != NULL);
 100af00:	e3000302 	movw	r0, #770	; 0x302
 100af04:	e3083474 	movw	r3, #33908	; 0x8474
 100af08:	e3082488 	movw	r2, #33928	; 0x8488
 100af0c:	e308149c 	movw	r1, #33948	; 0x849c
 100af10:	e58d0000 	str	r0, [sp]
 100af14:	e3403106 	movt	r3, #262	; 0x106
 100af18:	e3a00004 	mov	r0, #4
 100af1c:	e3402106 	movt	r2, #262	; 0x106
 100af20:	e3401106 	movt	r1, #262	; 0x106
 100af24:	eb00110f 	bl	100f368 <d_printf>
 100af28:	e3e00062 	mvn	r0, #98	; 0x62
 100af2c:	fa00433f 	blx	101bc30 <exit>

0100af30 <acq_free_all_alloc>:
/*
 * Free all acquisition buffers safely.  Interrupts are inhibited while the lists
 * are freed.
 */
void acq_free_all_alloc(int flags)
{
 100af30:	e92d4070 	push	{r4, r5, r6, lr}
 100af34:	e1a06000 	mov	r6, r0
 100af38:	e24dd008 	sub	sp, sp, #8
	//d_printf(D_INFO, "acq_free_all_alloc");

	GLOBAL_IRQ_DISABLE();
 100af3c:	f10c0080 	cpsid	i

	if(flags & ACQLIST_ACQ) {
 100af40:	e3100001 	tst	r0, #1
 100af44:	1a000004 	bne	100af5c <acq_free_all_alloc+0x2c>

		g_acq_state.acq_first = NULL;
		g_acq_state.acq_current = NULL;
	}

	if(flags & ACQLIST_DONE) {
 100af48:	e3160002 	tst	r6, #2
 100af4c:	1a000014 	bne	100afa4 <acq_free_all_alloc+0x74>

		g_acq_state.acq_done_first = NULL;
		g_acq_state.acq_done_current = NULL;
	}

	GLOBAL_IRQ_ENABLE();
 100af50:	f1080080 	cpsie	i

	//d_printf(D_INFO, "END acq_free_all_alloc");
}
 100af54:	e28dd008 	add	sp, sp, #8
 100af58:	e8bd8070 	pop	{r4, r5, r6, pc}
		acq_free_all_alloc_core(g_acq_state.acq_first);
 100af5c:	e30532d8 	movw	r3, #21208	; 0x52d8
 100af60:	e3403107 	movt	r3, #263	; 0x107
 100af64:	e5934880 	ldr	r4, [r3, #2176]	; 0x880
	D_ASSERT(list_base != NULL);
 100af68:	e3540000 	cmp	r4, #0
 100af6c:	0a00001f 	beq	100aff0 <acq_free_all_alloc+0xc0>
		next_next = next->next;
 100af70:	e594501c 	ldr	r5, [r4, #28]
		free(next->buff_alloc);
 100af74:	e5940004 	ldr	r0, [r4, #4]
 100af78:	fa004612 	blx	101c7c8 <free>
		free(next);
 100af7c:	e1a00004 	mov	r0, r4
 100af80:	fa004610 	blx	101c7c8 <free>
	while(next != NULL) {
 100af84:	e2554000 	subs	r4, r5, #0
 100af88:	1afffff8 	bne	100af70 <acq_free_all_alloc+0x40>
		g_acq_state.acq_first = NULL;
 100af8c:	e59f308c 	ldr	r3, [pc, #140]	; 100b020 <acq_free_all_alloc+0xf0>
	if(flags & ACQLIST_DONE) {
 100af90:	e3160002 	tst	r6, #2
		g_acq_state.acq_first = NULL;
 100af94:	e3a00000 	mov	r0, #0
 100af98:	e3a01000 	mov	r1, #0
 100af9c:	e1c300f0 	strd	r0, [r3]
	if(flags & ACQLIST_DONE) {
 100afa0:	0affffea 	beq	100af50 <acq_free_all_alloc+0x20>
		acq_free_all_alloc_core(g_acq_state.acq_done_first);
 100afa4:	e30532d8 	movw	r3, #21208	; 0x52d8
 100afa8:	e3403107 	movt	r3, #263	; 0x107
 100afac:	e5934888 	ldr	r4, [r3, #2184]	; 0x888
	D_ASSERT(list_base != NULL);
 100afb0:	e3540000 	cmp	r4, #0
 100afb4:	0a00000d 	beq	100aff0 <acq_free_all_alloc+0xc0>
		next_next = next->next;
 100afb8:	e594501c 	ldr	r5, [r4, #28]
		free(next->buff_alloc);
 100afbc:	e5940004 	ldr	r0, [r4, #4]
 100afc0:	fa004600 	blx	101c7c8 <free>
		free(next);
 100afc4:	e1a00004 	mov	r0, r4
 100afc8:	fa0045fe 	blx	101c7c8 <free>
	while(next != NULL) {
 100afcc:	e2554000 	subs	r4, r5, #0
 100afd0:	1afffff8 	bne	100afb8 <acq_free_all_alloc+0x88>
		g_acq_state.acq_done_first = NULL;
 100afd4:	e59f3048 	ldr	r3, [pc, #72]	; 100b024 <acq_free_all_alloc+0xf4>
 100afd8:	e3a00000 	mov	r0, #0
 100afdc:	e3a01000 	mov	r1, #0
 100afe0:	e14300f8 	strd	r0, [r3, #-8]
	GLOBAL_IRQ_ENABLE();
 100afe4:	f1080080 	cpsie	i
}
 100afe8:	e28dd008 	add	sp, sp, #8
 100afec:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(list_base != NULL);
 100aff0:	e3000302 	movw	r0, #770	; 0x302
 100aff4:	e3083474 	movw	r3, #33908	; 0x8474
 100aff8:	e3082488 	movw	r2, #33928	; 0x8488
 100affc:	e308149c 	movw	r1, #33948	; 0x849c
 100b000:	e58d0000 	str	r0, [sp]
 100b004:	e3403106 	movt	r3, #262	; 0x106
 100b008:	e3a00004 	mov	r0, #4
 100b00c:	e3402106 	movt	r2, #262	; 0x106
 100b010:	e3401106 	movt	r1, #262	; 0x106
 100b014:	eb0010d3 	bl	100f368 <d_printf>
 100b018:	e3e00062 	mvn	r0, #98	; 0x62
 100b01c:	fa004303 	blx	101bc30 <exit>
 100b020:	01075b58 	.word	0x01075b58
 100b024:	01075b68 	.word	0x01075b68

0100b028 <acq_rewind>:
 *
 * Only the currently active acquisition buffer is rewound.
 */
void acq_rewind()
{
	struct acq_buffer_t *next = g_acq_state.acq_first;
 100b028:	e30512d8 	movw	r1, #21208	; 0x52d8
 100b02c:	e3401107 	movt	r1, #263	; 0x107
 100b030:	e5913880 	ldr	r3, [r1, #2176]	; 0x880

	//d_printf(D_INFO, "Start Rewind");

	// Disable interrupts while we process this as we're altering the linked list
	GLOBAL_IRQ_DISABLE();
 100b034:	f10c0080 	cpsid	i

	/*
	 * Iterate through the list of allocations starting at the first allocation,
	 * clearing the flags and trigger position.
	 */
	while(next != NULL) {
 100b038:	e3530000 	cmp	r3, #0
 100b03c:	0a000009 	beq	100b068 <acq_rewind+0x40>
 100b040:	e3a0cd06 	mov	ip, #384	; 0x180
 100b044:	e3a00080 	mov	r0, #128	; 0x80
		//d_printf(D_INFO, "RW %08x %d %08x %04x", next, next->idx, next->next, next->flags);

		if(next->flags & ACQBUF_FLAG_PKT_DONE) {
 100b048:	e1d321b0 	ldrh	r2, [r3, #16]
 100b04c:	e2122001 	ands	r2, r2, #1
 100b050:	1a00000a 	bne	100b080 <acq_rewind+0x58>
			next->flags = ACQBUF_FLAG_READY_CSI | ACQBUF_FLAG_ALLOC;
		} else {
			next->flags = ACQBUF_FLAG_ALLOC;
			next->trigger_at = 0;
 100b054:	e583200c 	str	r2, [r3, #12]
 100b058:	e1c301b0 	strh	r0, [r3, #16]
		}

		next = next->next;
 100b05c:	e593301c 	ldr	r3, [r3, #28]
	while(next != NULL) {
 100b060:	e3530000 	cmp	r3, #0
 100b064:	1afffff7 	bne	100b048 <acq_rewind+0x20>
	}

	g_acq_state.acq_current = g_acq_state.acq_first;
 100b068:	e5913880 	ldr	r3, [r1, #2176]	; 0x880
	g_acq_state.num_acq_made = 0; // Reset wave counter
 100b06c:	e3a02000 	mov	r2, #0
 100b070:	e5812778 	str	r2, [r1, #1912]	; 0x778
	g_acq_state.acq_current = g_acq_state.acq_first;
 100b074:	e5813884 	str	r3, [r1, #2180]	; 0x884

	GLOBAL_IRQ_ENABLE();
 100b078:	f1080080 	cpsie	i

	//d_printf(D_INFO, "Done Rewind");
}
 100b07c:	e12fff1e 	bx	lr
 100b080:	e1c3c1b0 	strh	ip, [r3, #16]
		next = next->next;
 100b084:	e593301c 	ldr	r3, [r3, #28]
	while(next != NULL) {
 100b088:	e3530000 	cmp	r3, #0
 100b08c:	1affffed 	bne	100b048 <acq_rewind+0x20>
 100b090:	eafffff4 	b	100b068 <acq_rewind+0x40>

0100b094 <acq_swap>:
 * as required.
 *
 * Interrupts are disabled while this process runs.
 */
void acq_swap()
{
 100b094:	e92d4010 	push	{r4, lr}
 100b098:	e24dd008 	sub	sp, sp, #8
	struct acq_buffer_t *temp_first, *temp_current;

	GLOBAL_IRQ_DISABLE();
 100b09c:	f10c0080 	cpsid	i

	D_ASSERT(!(g_acq_state.control & ACQCTRL_FLAG_NO_SWAP));
 100b0a0:	e30532d8 	movw	r3, #21208	; 0x52d8
 100b0a4:	e300175e 	movw	r1, #1886	; 0x75e
 100b0a8:	e3403107 	movt	r3, #263	; 0x107
 100b0ac:	e19320b1 	ldrh	r2, [r3, r1]
 100b0b0:	e3120004 	tst	r2, #4
 100b0b4:	1a000018 	bne	100b11c <acq_swap+0x88>
	D_ASSERT((g_acq_state.control & (ACQCTRL_FLAG_LIST_A_ACQ | ACQCTRL_FLAG_LIST_B_ACQ)));
 100b0b8:	e3120003 	tst	r2, #3
 100b0bc:	0a000022 	beq	100b14c <acq_swap+0xb8>

	if(g_acq_state.control & ACQCTRL_FLAG_LIST_A_ACQ) {
 100b0c0:	e3120001 	tst	r2, #1
 100b0c4:	1a00000f 	bne	100b108 <acq_swap+0x74>
		g_acq_state.acq_done_first = temp_first;
		g_acq_state.acq_done_current = temp_current;

		g_acq_state.control &= ~ACQCTRL_FLAG_LIST_A_ACQ;
		g_acq_state.control |= ACQCTRL_FLAG_LIST_B_ACQ;
	} else if(g_acq_state.control & ACQCTRL_FLAG_LIST_B_ACQ) {
 100b0c8:	e3120002 	tst	r2, #2
 100b0cc:	0a00000a 	beq	100b0fc <acq_swap+0x68>
		temp_first = g_acq_state.acq_done_first;
 100b0d0:	e5934880 	ldr	r4, [r3, #2176]	; 0x880
		g_acq_state.acq_done_first = g_acq_state.acq_first;
		g_acq_state.acq_done_current = g_acq_state.acq_current;
		g_acq_state.acq_first = temp_first;
		g_acq_state.acq_current = temp_current;

		g_acq_state.control &= ~ACQCTRL_FLAG_LIST_B_ACQ;
 100b0d4:	e3c22002 	bic	r2, r2, #2
		g_acq_state.acq_first = temp_first;
 100b0d8:	e593e888 	ldr	lr, [r3, #2184]	; 0x888
		g_acq_state.control |= ACQCTRL_FLAG_LIST_A_ACQ;
 100b0dc:	e3822001 	orr	r2, r2, #1
		temp_first = g_acq_state.acq_done_first;
 100b0e0:	e593c884 	ldr	ip, [r3, #2180]	; 0x884
 100b0e4:	e593088c 	ldr	r0, [r3, #2188]	; 0x88c
		g_acq_state.control |= ACQCTRL_FLAG_LIST_A_ACQ;
 100b0e8:	e18320b1 	strh	r2, [r3, r1]
		g_acq_state.acq_first = temp_first;
 100b0ec:	e5834888 	str	r4, [r3, #2184]	; 0x888
 100b0f0:	e583e880 	str	lr, [r3, #2176]	; 0x880
 100b0f4:	e583c88c 	str	ip, [r3, #2188]	; 0x88c
 100b0f8:	e5830884 	str	r0, [r3, #2180]	; 0x884
	}

	GLOBAL_IRQ_ENABLE();
 100b0fc:	f1080080 	cpsie	i
}
 100b100:	e28dd008 	add	sp, sp, #8
 100b104:	e8bd8010 	pop	{r4, pc}
		g_acq_state.control &= ~ACQCTRL_FLAG_LIST_A_ACQ;
 100b108:	e3c22001 	bic	r2, r2, #1
		g_acq_state.acq_first = g_acq_state.acq_done_first;
 100b10c:	e5934880 	ldr	r4, [r3, #2176]	; 0x880
 100b110:	e593e888 	ldr	lr, [r3, #2184]	; 0x888
		g_acq_state.control |= ACQCTRL_FLAG_LIST_B_ACQ;
 100b114:	e3822002 	orr	r2, r2, #2
 100b118:	eafffff0 	b	100b0e0 <acq_swap+0x4c>
	D_ASSERT(!(g_acq_state.control & ACQCTRL_FLAG_NO_SWAP));
 100b11c:	e3083474 	movw	r3, #33908	; 0x8474
 100b120:	e30824c8 	movw	r2, #33992	; 0x84c8
 100b124:	e308149c 	movw	r1, #33948	; 0x849c
 100b128:	e3403106 	movt	r3, #262	; 0x106
 100b12c:	e3402106 	movt	r2, #262	; 0x106
 100b130:	e3000377 	movw	r0, #887	; 0x377
 100b134:	e58d0000 	str	r0, [sp]
	D_ASSERT((g_acq_state.control & (ACQCTRL_FLAG_LIST_A_ACQ | ACQCTRL_FLAG_LIST_B_ACQ)));
 100b138:	e3a00004 	mov	r0, #4
 100b13c:	e3401106 	movt	r1, #262	; 0x106
 100b140:	eb001088 	bl	100f368 <d_printf>
 100b144:	e3e00062 	mvn	r0, #98	; 0x62
 100b148:	fa0042b8 	blx	101bc30 <exit>
 100b14c:	e3a00fde 	mov	r0, #888	; 0x378
 100b150:	e3083474 	movw	r3, #33908	; 0x8474
 100b154:	e30824f8 	movw	r2, #34040	; 0x84f8
 100b158:	e308149c 	movw	r1, #33948	; 0x849c
 100b15c:	e58d0000 	str	r0, [sp]
 100b160:	e3403106 	movt	r3, #262	; 0x106
 100b164:	e3402106 	movt	r2, #262	; 0x106
 100b168:	eafffff2 	b	100b138 <acq_swap+0xa4>

0100b16c <acq_prepare_triggered>:
	uint32_t align_mask;
	uint32_t demux;
	int i, error;

	// How can we acquire an empty buffer of no waveforms?
	if(COND_UNLIKELY(num_acq == 0 || pre_sz == 0 || post_sz == 0)) {
 100b16c:	e3510000 	cmp	r1, #0
 100b170:	e16fcf12 	clz	ip, r2
 100b174:	e1a0c2ac 	lsr	ip, ip, #5
 100b178:	03a0c001 	moveq	ip, #1
 100b17c:	e3530000 	cmp	r3, #0
 100b180:	03a0c001 	moveq	ip, #1
{
 100b184:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(COND_UNLIKELY(num_acq == 0 || pre_sz == 0 || post_sz == 0)) {
 100b188:	e35c0000 	cmp	ip, #0
{
 100b18c:	e24dd014 	sub	sp, sp, #20
	if(COND_UNLIKELY(num_acq == 0 || pre_sz == 0 || post_sz == 0)) {
 100b190:	1a00007a 	bne	100b380 <acq_prepare_triggered+0x214>
		d_printf(D_ERROR, "acquire: zero buffer/zero wavecount");
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 8-bit, 12-bit or 14-bit set
	if(COND_UNLIKELY(!(mode_flags & (ACQ_MODE_8BIT | ACQ_MODE_12BIT | ACQ_MODE_14BIT)))) {
 100b194:	e3100007 	tst	r0, #7
 100b198:	e1a05000 	mov	r5, r0
 100b19c:	0a0000fe 	beq	100b59c <acq_prepare_triggered+0x430>
		d_printf(D_ERROR, "acquire: bit-depth not provided");
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 1ch, 2ch or 4ch set
	if(COND_UNLIKELY(!(mode_flags & (ACQ_MODE_1CH | ACQ_MODE_2CH | ACQ_MODE_4CH)))) {
 100b1a0:	e31000e0 	tst	r0, #224	; 0xe0
 100b1a4:	0a000111 	beq	100b5f0 <acq_prepare_triggered+0x484>
		d_printf(D_ERROR, "acquire: channel mode not provided");
		return ACQRES_PARAM_FAIL;
	}

	// Must not have "CONTINUOUS" or "TRIGGERED" set
	if(COND_UNLIKELY(mode_flags & (ACQ_MODE_TRIGGERED | ACQ_MODE_CONTINUOUS))) {
 100b1a8:	e3100c03 	tst	r0, #768	; 0x300
 100b1ac:	1a000115 	bne	100b608 <acq_prepare_triggered+0x49c>
		return ACQRES_PARAM_FAIL;
	}

	error = 0;

	if(mode_flags & ACQ_MODE_8BIT) {
 100b1b0:	e2157001 	ands	r7, r5, #1
 100b1b4:	e1a00001 	mov	r0, r1
 100b1b8:	e1a06003 	mov	r6, r3
 100b1bc:	0a000064 	beq	100b354 <acq_prepare_triggered+0x1e8>
		align_mask = ACQ_SAMPLES_ALIGN_8B_AMOD;
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_8B;
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_8B;
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b1c0:	e181c002 	orr	ip, r1, r2
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_8B;
 100b1c4:	e1a081a2 	lsr	r8, r2, #3
 100b1c8:	e21cc007 	ands	ip, ip, #7
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_8B;
 100b1cc:	e1a011a1 	lsr	r1, r1, #3
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b1d0:	13a0c001 	movne	ip, #1
		align_mask = ACQ_SAMPLES_ALIGN_8B_AMOD;
 100b1d4:	e3a0e007 	mov	lr, #7
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_PR;
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_PR;
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
	}

	if(COND_UNLIKELY(pre_sz < ACQ_MIN_PREPOST_SIZE || post_sz < ACQ_MIN_PREPOST_SIZE)) {
 100b1d8:	e3520007 	cmp	r2, #7
 100b1dc:	83500007 	cmphi	r0, #7
 100b1e0:	93a03001 	movls	r3, #1
 100b1e4:	83a03000 	movhi	r3, #0
		error |= 1;
	}

	if(COND_UNLIKELY(error)) {
 100b1e8:	e19c3003 	orrs	r3, ip, r3
 100b1ec:	1a00010b 	bne	100b620 <acq_prepare_triggered+0x4b4>
		//post_sz *= 8;
		//pre_sz *= 8;
	}
#endif

	g_acq_state.pre_buffsz = pre_sz;
 100b1f0:	e30542d8 	movw	r4, #21208	; 0x52d8
	g_acq_state.post_buffsz = post_sz;
	g_acq_state.pre_sampct = pre_sampct;
	g_acq_state.post_sampct = post_sampct;
	g_acq_state.total_buffsz = pre_sz + post_sz;
 100b1f4:	e0803002 	add	r3, r0, r2
	g_acq_state.pre_buffsz = pre_sz;
 100b1f8:	e3404107 	movt	r4, #263	; 0x107

	// If the acquisition is small, set a flag indicating this which will trigger a FIFO reset mode
	// to maximise performance
	if(g_acq_state.total_buffsz <= ACQ_SHORT_THRESHOLD) {
 100b1fc:	e3530a02 	cmp	r3, #8192	; 0x2000
	g_acq_state.total_buffsz = pre_sz + post_sz;
 100b200:	e584376c 	str	r3, [r4, #1900]	; 0x76c
	/*
	 * Ensure that the total acquisition size doesn't exceed the available memory.  If
	 * that's OK, then free any existing buffers and allocate the memory blocks.  Include an
	 * allocation penalty in our size calculation.
	 */
	total_acq_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) * num_acq;
 100b204:	e2833020 	add	r3, r3, #32
 100b208:	e0030396 	mul	r3, r6, r3
		mode_flags |= ACQ_MODE_SHORT_WITH_RESET;
 100b20c:	93855b01 	orrls	r5, r5, #1024	; 0x400

	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b210:	e215bb02 	ands	fp, r5, #2048	; 0x800
	g_acq_state.pre_buffsz = pre_sz;
 100b214:	e5840764 	str	r0, [r4, #1892]	; 0x764
	g_acq_state.post_buffsz = post_sz;
 100b218:	e5842768 	str	r2, [r4, #1896]	; 0x768
	g_acq_state.pre_sampct = pre_sampct;
 100b21c:	e5841788 	str	r1, [r4, #1928]	; 0x788
		total_acq_sz *= 2; // Double memory allocation required for two buffers
 100b220:	11a03083 	lslne	r3, r3, #1
	g_acq_state.post_sampct = post_sampct;
 100b224:	e584878c 	str	r8, [r4, #1932]	; 0x78c
	}

	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 100b228:	e3530303 	cmp	r3, #201326592	; 0xc000000
 100b22c:	8a000126 	bhi	100b6cc <acq_prepare_triggered+0x560>
	 * If both lists pointers are identical (unified lists in use), only free once.
	 * If the list pointers differ, then free both (distinct lists in use)
	 *
	 * XXX: Perhaps there's a better/saner way of doing this?
	 */
	if(g_acq_state.acq_first == g_acq_state.acq_done_first) {
 100b230:	e5942880 	ldr	r2, [r4, #2176]	; 0x880
	g_acq_state.state = ACQSTATE_UNINIT;
 100b234:	e3a01000 	mov	r1, #0
	if(g_acq_state.acq_first == g_acq_state.acq_done_first) {
 100b238:	e5943888 	ldr	r3, [r4, #2184]	; 0x888
	g_acq_state.state = ACQSTATE_UNINIT;
 100b23c:	e5841000 	str	r1, [r4]
	if(g_acq_state.acq_first == g_acq_state.acq_done_first) {
 100b240:	e1520003 	cmp	r2, r3
 100b244:	0a00006c 	beq	100b3fc <acq_prepare_triggered+0x290>
		}

		g_acq_state.acq_done_first = NULL;
		g_acq_state.acq_first = NULL;
	} else {
		if(g_acq_state.acq_first != NULL) {
 100b248:	e3520000 	cmp	r2, #0
 100b24c:	0a000002 	beq	100b25c <acq_prepare_triggered+0xf0>
			acq_free_all_alloc(ACQLIST_ACQ);
 100b250:	e3a00001 	mov	r0, #1
 100b254:	ebffff35 	bl	100af30 <acq_free_all_alloc>
 100b258:	e5943888 	ldr	r3, [r4, #2184]	; 0x888
		}

		if(g_acq_state.acq_done_first != NULL) {
 100b25c:	e3530000 	cmp	r3, #0
 100b260:	0a000001 	beq	100b26c <acq_prepare_triggered+0x100>
			acq_free_all_alloc(ACQLIST_DONE);
 100b264:	e3a00002 	mov	r0, #2
 100b268:	ebffff30 	bl	100af30 <acq_free_all_alloc>
		}
	}

	first_a = malloc(sizeof(struct acq_buffer_t));
 100b26c:	e3a00020 	mov	r0, #32
 100b270:	fa004550 	blx	101c7b8 <malloc>

	if(first_a == NULL) {
 100b274:	e2508000 	subs	r8, r0, #0
 100b278:	0a000115 	beq	100b6d4 <acq_prepare_triggered+0x568>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b27c:	e594976c 	ldr	r9, [r4, #1900]	; 0x76c
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b280:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b284:	e0899000 	add	r9, r9, r0
 100b288:	e3c9901f 	bic	r9, r9, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b28c:	e1a01009 	mov	r1, r9
 100b290:	fa004506 	blx	101c6b0 <memalign>
	if(work == NULL) {
 100b294:	e3500000 	cmp	r0, #0
 100b298:	0a0000a1 	beq	100b524 <acq_prepare_triggered+0x3b8>
	g_acq_state.stats.num_alloc_total++;
 100b29c:	e59f946c 	ldr	r9, [pc, #1132]	; 100b710 <acq_prepare_triggered+0x5a4>
	next->idx = 0;
 100b2a0:	e3a02000 	mov	r2, #0
	next->pre_sz = g_acq_state.pre_buffsz;
 100b2a4:	e594e764 	ldr	lr, [r4, #1892]	; 0x764
	next->flags = ACQBUF_FLAG_ALLOC;
 100b2a8:	e3a0a080 	mov	sl, #128	; 0x80
	next->post_sz = g_acq_state.post_buffsz;
 100b2ac:	e594c768 	ldr	ip, [r4, #1896]	; 0x768
	g_acq_state.stats.num_alloc_total++;
 100b2b0:	e5993000 	ldr	r3, [r9]
 100b2b4:	e5991004 	ldr	r1, [r9, #4]
	next->buff_alloc = work;
 100b2b8:	e5880004 	str	r0, [r8, #4]
	g_acq_state.stats.num_alloc_total++;
 100b2bc:	e2933001 	adds	r3, r3, #1
	next->buff_acq = work;
 100b2c0:	e5880008 	str	r0, [r8, #8]
	g_acq_state.stats.num_alloc_total++;
 100b2c4:	e0a11002 	adc	r1, r1, r2
	g_acq_state.acq_A_first = first_a;

	/*
	 * If we support swapping, allocate a second linked list.
	 */
	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b2c8:	e15b0002 	cmp	fp, r2
	g_acq_state.acq_first = first_a;
 100b2cc:	e5848880 	str	r8, [r4, #2176]	; 0x880
 100b2d0:	e5848884 	str	r8, [r4, #2180]	; 0x884
	g_acq_state.acq_A_first = first_a;
 100b2d4:	e5848890 	str	r8, [r4, #2192]	; 0x890
	g_acq_state.stats.num_alloc_total++;
 100b2d8:	e5893000 	str	r3, [r9]
 100b2dc:	e5891004 	str	r1, [r9, #4]
	next->pre_sz = g_acq_state.pre_buffsz;
 100b2e0:	e588e014 	str	lr, [r8, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100b2e4:	e588c018 	str	ip, [r8, #24]
	next->idx = 0;
 100b2e8:	e5882000 	str	r2, [r8]
	next->trigger_at = 0;
 100b2ec:	e588200c 	str	r2, [r8, #12]
	next->next = NULL;
 100b2f0:	e588201c 	str	r2, [r8, #28]
	next->flags = ACQBUF_FLAG_ALLOC;
 100b2f4:	e1c8a1b0 	strh	sl, [r8, #16]
	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b2f8:	1a000047 	bne	100b41c <acq_prepare_triggered+0x2b0>
	 * Allocate all subsequent blocks on start up.  We can't allocate these in the IRQ. Then set
	 * the current pointer back to the first so that we start acquiring from that wave buffer.
	 *
	 * If at any point this fails, bail out and free memory.
	 */
	for(i = 0; i < (num_acq - 1); i++) {
 100b2fc:	e256a001 	subs	sl, r6, #1
 100b300:	0a00009d 	beq	100b57c <acq_prepare_triggered+0x410>
	uint32_t pre_sampct = 0, post_sampct = 0;
 100b304:	e3a09000 	mov	r9, #0
 100b308:	ea000002 	b	100b318 <acq_prepare_triggered+0x1ac>
	for(i = 0; i < (num_acq - 1); i++) {
 100b30c:	e153000a 	cmp	r3, sl
 100b310:	0a000022 	beq	100b3a0 <acq_prepare_triggered+0x234>
 100b314:	e1a09003 	mov	r9, r3
		error = acq_append_next_alloc();
 100b318:	ebfffe9b 	bl	100ad8c <acq_append_next_alloc>
		if(error != ACQRES_OK) {
 100b31c:	e2508000 	subs	r8, r0, #0
	for(i = 0; i < (num_acq - 1); i++) {
 100b320:	e2893001 	add	r3, r9, #1
		if(error != ACQRES_OK) {
 100b324:	0afffff8 	beq	100b30c <acq_prepare_triggered+0x1a0>
			d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d [A], aborting allocation", error, i);
 100b328:	e308177c 	movw	r1, #34684	; 0x877c
 100b32c:	e3a00004 	mov	r0, #4
 100b330:	e1a03009 	mov	r3, r9
 100b334:	e3401106 	movt	r1, #262	; 0x106
 100b338:	e1a02008 	mov	r2, r8
 100b33c:	eb001009 	bl	100f368 <d_printf>
			acq_free_all_alloc(ACQLIST_ACQ);
 100b340:	e3a00001 	mov	r0, #1
 100b344:	ebfffef9 	bl	100af30 <acq_free_all_alloc>

	//acq_debug_ll_dump(g_acq_state.acq_first,      "CURR");
	//acq_debug_ll_dump(g_acq_state.acq_done_first, "DONE");

	return ACQRES_OK;
}
 100b348:	e1a00008 	mov	r0, r8
 100b34c:	e28dd014 	add	sp, sp, #20
 100b350:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 100b354:	e3150006 	tst	r5, #6
	uint32_t pre_sampct = 0, post_sampct = 0;
 100b358:	01a08007 	moveq	r8, r7
 100b35c:	01a01007 	moveq	r1, r7
	} else if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 100b360:	0affff9c 	beq	100b1d8 <acq_prepare_triggered+0x6c>
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b364:	e180c002 	orr	ip, r0, r2
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_PR;
 100b368:	e1a01120 	lsr	r1, r0, #2
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_PR;
 100b36c:	e21cc003 	ands	ip, ip, #3
 100b370:	e1a08122 	lsr	r8, r2, #2
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b374:	13a0c001 	movne	ip, #1
		align_mask = ACQ_SAMPLES_ALIGN_PR_AMOD;
 100b378:	e3a0e003 	mov	lr, #3
 100b37c:	eaffff95 	b	100b1d8 <acq_prepare_triggered+0x6c>
		d_printf(D_ERROR, "acquire: zero buffer/zero wavecount");
 100b380:	e3081544 	movw	r1, #34116	; 0x8544
 100b384:	e3a00004 	mov	r0, #4
 100b388:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b38c:	e3e08002 	mvn	r8, #2
		d_printf(D_ERROR, "acquire: zero buffer/zero wavecount");
 100b390:	eb000ff4 	bl	100f368 <d_printf>
}
 100b394:	e1a00008 	mov	r0, r8
 100b398:	e28dd014 	add	sp, sp, #20
 100b39c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b3a0:	e35b0000 	cmp	fp, #0
 100b3a4:	0a000074 	beq	100b57c <acq_prepare_triggered+0x410>
		g_acq_state.acq_current = g_acq_state.acq_B_first;
 100b3a8:	e5943894 	ldr	r3, [r4, #2196]	; 0x894
		g_acq_state.acq_first = g_acq_state.acq_B_first;
 100b3ac:	e5843880 	str	r3, [r4, #2176]	; 0x880
 100b3b0:	e5843884 	str	r3, [r4, #2180]	; 0x884
		for(i = 0; i < (num_acq - 1); i++) {
 100b3b4:	ea000002 	b	100b3c4 <acq_prepare_triggered+0x258>
 100b3b8:	e1590008 	cmp	r9, r8
 100b3bc:	e1a08003 	mov	r8, r3
 100b3c0:	0a000037 	beq	100b4a4 <acq_prepare_triggered+0x338>
			error = acq_append_next_alloc();
 100b3c4:	ebfffe70 	bl	100ad8c <acq_append_next_alloc>
			if(error != ACQRES_OK) {
 100b3c8:	e3500000 	cmp	r0, #0
		for(i = 0; i < (num_acq - 1); i++) {
 100b3cc:	e2883001 	add	r3, r8, #1
			if(error != ACQRES_OK) {
 100b3d0:	0afffff8 	beq	100b3b8 <acq_prepare_triggered+0x24c>
				d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d [A], aborting allocation", error, i);
 100b3d4:	e308177c 	movw	r1, #34684	; 0x877c
 100b3d8:	e1a02000 	mov	r2, r0
 100b3dc:	e1a03008 	mov	r3, r8
 100b3e0:	e3401106 	movt	r1, #262	; 0x106
 100b3e4:	e3a00004 	mov	r0, #4
			error = acq_append_next_alloc();
 100b3e8:	e1a08002 	mov	r8, r2
				d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d [A], aborting allocation", error, i);
 100b3ec:	eb000fdd 	bl	100f368 <d_printf>
				acq_free_all_alloc(ACQLIST_ACQ); // param ACQLIST_ACQ is correct as we have temporarily swapped the list pointers
 100b3f0:	e3a00001 	mov	r0, #1
 100b3f4:	ebfffecd 	bl	100af30 <acq_free_all_alloc>
				return error;
 100b3f8:	eaffffd2 	b	100b348 <acq_prepare_triggered+0x1dc>
		if(g_acq_state.acq_first != NULL) {
 100b3fc:	e1520001 	cmp	r2, r1
 100b400:	0a000001 	beq	100b40c <acq_prepare_triggered+0x2a0>
			acq_free_all_alloc(ACQLIST_ACQ);
 100b404:	e3a00001 	mov	r0, #1
 100b408:	ebfffec8 	bl	100af30 <acq_free_all_alloc>
		g_acq_state.acq_done_first = NULL;
 100b40c:	e3a03000 	mov	r3, #0
 100b410:	e5843888 	str	r3, [r4, #2184]	; 0x888
		g_acq_state.acq_first = NULL;
 100b414:	e5843880 	str	r3, [r4, #2176]	; 0x880
 100b418:	eaffff93 	b	100b26c <acq_prepare_triggered+0x100>
		first_b = malloc(sizeof(struct acq_buffer_t));
 100b41c:	e3a00020 	mov	r0, #32
 100b420:	fa0044e4 	blx	101c7b8 <malloc>
		if(first_b == NULL) {
 100b424:	e2508000 	subs	r8, r0, #0
 100b428:	0a0000b1 	beq	100b6f4 <acq_prepare_triggered+0x588>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b42c:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b430:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b434:	e0833000 	add	r3, r3, r0
 100b438:	e3c3301f 	bic	r3, r3, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b43c:	e1a01003 	mov	r1, r3
 100b440:	e58d300c 	str	r3, [sp, #12]
 100b444:	fa004499 	blx	101c6b0 <memalign>
	if(work == NULL) {
 100b448:	e3500000 	cmp	r0, #0
 100b44c:	e59d300c 	ldr	r3, [sp, #12]
 100b450:	e3a02000 	mov	r2, #0
 100b454:	0a000089 	beq	100b680 <acq_prepare_triggered+0x514>
	g_acq_state.stats.num_alloc_total++;
 100b458:	e899000a 	ldm	r9, {r1, r3}
	next->idx = 0;
 100b45c:	e5882000 	str	r2, [r8]
	next->trigger_at = 0;
 100b460:	e588200c 	str	r2, [r8, #12]
	g_acq_state.stats.num_alloc_total++;
 100b464:	e2911001 	adds	r1, r1, #1
	next->pre_sz = g_acq_state.pre_buffsz;
 100b468:	e594c764 	ldr	ip, [r4, #1892]	; 0x764
	next->next = NULL;
 100b46c:	e588201c 	str	r2, [r8, #28]
	g_acq_state.stats.num_alloc_total++;
 100b470:	e2a33000 	adc	r3, r3, #0
	next->post_sz = g_acq_state.post_buffsz;
 100b474:	e5942768 	ldr	r2, [r4, #1896]	; 0x768
	next->flags = ACQBUF_FLAG_ALLOC;
 100b478:	e1c8a1b0 	strh	sl, [r8, #16]
	for(i = 0; i < (num_acq - 1); i++) {
 100b47c:	e256a001 	subs	sl, r6, #1
	next->buff_alloc = work;
 100b480:	e5880004 	str	r0, [r8, #4]
	next->buff_acq = work;
 100b484:	e5880008 	str	r0, [r8, #8]
		g_acq_state.acq_done_first = first_b;
 100b488:	e5848888 	str	r8, [r4, #2184]	; 0x888
 100b48c:	e584888c 	str	r8, [r4, #2188]	; 0x88c
		g_acq_state.acq_B_first = first_b;
 100b490:	e5848894 	str	r8, [r4, #2196]	; 0x894
	g_acq_state.stats.num_alloc_total++;
 100b494:	e889000a 	stm	r9, {r1, r3}
	next->pre_sz = g_acq_state.pre_buffsz;
 100b498:	e588c014 	str	ip, [r8, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100b49c:	e5882018 	str	r2, [r8, #24]
	for(i = 0; i < (num_acq - 1); i++) {
 100b4a0:	1affff97 	bne	100b304 <acq_prepare_triggered+0x198>
		g_acq_state.acq_current = g_acq_state.acq_A_first;
 100b4a4:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
		g_acq_state.control = ACQCTRL_FLAG_LIST_A_ACQ;
 100b4a8:	e300275e 	movw	r2, #1886	; 0x75e
 100b4ac:	e3a01001 	mov	r1, #1
 100b4b0:	e18410b2 	strh	r1, [r4, r2]
		g_acq_state.acq_first = g_acq_state.acq_A_first;
 100b4b4:	e5843880 	str	r3, [r4, #2176]	; 0x880
 100b4b8:	e5843884 	str	r3, [r4, #2180]	; 0x884
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 100b4bc:	e5943788 	ldr	r3, [r4, #1928]	; 0x788
	g_acq_state.num_acq_made = 0;
 100b4c0:	e3a02000 	mov	r2, #0
	_FAB_CFG_ACCESS(reg) = data;
 100b4c4:	e3a01000 	mov	r1, #0
	g_acq_state.num_acq_request = num_acq;
 100b4c8:	e5846774 	str	r6, [r4, #1908]	; 0x774
	g_acq_state.num_acq_made = 0;
 100b4cc:	e5842778 	str	r2, [r4, #1912]	; 0x778
 100b4d0:	e34413c0 	movt	r1, #17344	; 0x43c0
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 100b4d4:	e2433001 	sub	r3, r3, #1
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 100b4d8:	e300075c 	movw	r0, #1884	; 0x75c
 100b4dc:	e3852c01 	orr	r2, r5, #256	; 0x100
	if(mode_flags & ACQ_MODE_8BIT) {
 100b4e0:	e3570000 	cmp	r7, #0
	g_acq_state.state = ACQSTATE_STOPPED;
 100b4e4:	e3a06001 	mov	r6, #1
 100b4e8:	e3a07000 	mov	r7, #0
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 100b4ec:	e18420b0 	strh	r2, [r4, r0]
	g_acq_state.state = ACQSTATE_STOPPED;
 100b4f0:	e1c460f0 	strd	r6, [r4]
 100b4f4:	e5813040 	str	r3, [r1, #64]	; 0x40
	fabcfg_write(FAB_CFG_ACQ_SIZE_B, g_acq_state.post_sampct - 1);
 100b4f8:	e594378c 	ldr	r3, [r4, #1932]	; 0x78c
 100b4fc:	e2433001 	sub	r3, r3, #1
 100b500:	e5813044 	str	r3, [r1, #68]	; 0x44
	if(mode_flags & ACQ_MODE_8BIT) {
 100b504:	1a00002a 	bne	100b5b4 <acq_prepare_triggered+0x448>
	} else if(mode_flags & ACQ_MODE_12BIT) {
 100b508:	e3150002 	tst	r5, #2
 100b50c:	0a000050 	beq	100b654 <acq_prepare_triggered+0x4e8>
 100b510:	e3a01014 	mov	r1, #20
 100b514:	e3a02012 	mov	r2, #18
 100b518:	e3a03011 	mov	r3, #17
		demux |= ADCDEMUX_12BIT;
 100b51c:	e3a00010 	mov	r0, #16
 100b520:	ea000027 	b	100b5c4 <acq_prepare_triggered+0x458>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100b524:	e30813c8 	movw	r1, #33736	; 0x83c8
 100b528:	e1a02009 	mov	r2, r9
 100b52c:	e3a00004 	mov	r0, #4
 100b530:	e3401106 	movt	r1, #262	; 0x106
 100b534:	eb000f8b 	bl	100f368 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100b538:	e59f21d0 	ldr	r2, [pc, #464]	; 100b710 <acq_prepare_triggered+0x5a4>
		return ACQRES_MALLOC_FAIL;
 100b53c:	e3e08000 	mvn	r8, #0
		g_acq_state.stats.num_alloc_err_total++;
 100b540:	e5123008 	ldr	r3, [r2, #-8]
 100b544:	e5121004 	ldr	r1, [r2, #-4]
 100b548:	e2933001 	adds	r3, r3, #1
 100b54c:	e2a11000 	adc	r1, r1, #0
 100b550:	e5023008 	str	r3, [r2, #-8]
 100b554:	e5021004 	str	r1, [r2, #-4]
		malloc_stats();
 100b558:	fa004904 	blx	101d970 <malloc_stats>
		d_printf(D_ERROR, "acquire: unable to get allocation for first-A buffer: error %d", error);
 100b55c:	e30816b4 	movw	r1, #34484	; 0x86b4
 100b560:	e1a02008 	mov	r2, r8
 100b564:	e3401106 	movt	r1, #262	; 0x106
 100b568:	e3a00004 	mov	r0, #4
 100b56c:	eb000f7d 	bl	100f368 <d_printf>
}
 100b570:	e1a00008 	mov	r0, r8
 100b574:	e28dd014 	add	sp, sp, #20
 100b578:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		g_acq_state.acq_current = g_acq_state.acq_first;
 100b57c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
		g_acq_state.control = ACQCTRL_FLAG_NO_SWAP;
 100b580:	e300275e 	movw	r2, #1886	; 0x75e
 100b584:	e3a01004 	mov	r1, #4
 100b588:	e18410b2 	strh	r1, [r4, r2]
		g_acq_state.acq_current = g_acq_state.acq_first;
 100b58c:	e5843884 	str	r3, [r4, #2180]	; 0x884
		g_acq_state.acq_done_first = g_acq_state.acq_first;
 100b590:	e5843888 	str	r3, [r4, #2184]	; 0x888
		g_acq_state.acq_done_current = g_acq_state.acq_first;
 100b594:	e584388c 	str	r3, [r4, #2188]	; 0x88c
		g_acq_state.control = ACQCTRL_FLAG_NO_SWAP;
 100b598:	eaffffc7 	b	100b4bc <acq_prepare_triggered+0x350>
		d_printf(D_ERROR, "acquire: bit-depth not provided");
 100b59c:	e3081568 	movw	r1, #34152	; 0x8568
 100b5a0:	e3a00004 	mov	r0, #4
 100b5a4:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b5a8:	e3e08002 	mvn	r8, #2
		d_printf(D_ERROR, "acquire: bit-depth not provided");
 100b5ac:	eb000f6d 	bl	100f368 <d_printf>
		return ACQRES_PARAM_FAIL;
 100b5b0:	eaffff64 	b	100b348 <acq_prepare_triggered+0x1dc>
 100b5b4:	e3a0100c 	mov	r1, #12
 100b5b8:	e3a0200a 	mov	r2, #10
 100b5bc:	e3a03009 	mov	r3, #9
		demux |= ADCDEMUX_8BIT;
 100b5c0:	e3a00008 	mov	r0, #8
	if(mode_flags & ACQ_MODE_1CH) {
 100b5c4:	e3150020 	tst	r5, #32
 100b5c8:	1a000002 	bne	100b5d8 <acq_prepare_triggered+0x46c>
	} else if(mode_flags & ACQ_MODE_2CH) {
 100b5cc:	e3150040 	tst	r5, #64	; 0x40
		demux |= ADCDEMUX_2CH;
 100b5d0:	11a03002 	movne	r3, r2
	} else if(mode_flags & ACQ_MODE_2CH) {
 100b5d4:	0a00001a 	beq	100b644 <acq_prepare_triggered+0x4d8>
	return ACQRES_OK;
 100b5d8:	e3a08000 	mov	r8, #0
	g_acq_state.demux_reg = demux;
 100b5dc:	e5843790 	str	r3, [r4, #1936]	; 0x790
	d_dump_malloc_info();
 100b5e0:	eb0010a8 	bl	100f888 <d_dump_malloc_info>
}
 100b5e4:	e1a00008 	mov	r0, r8
 100b5e8:	e28dd014 	add	sp, sp, #20
 100b5ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_printf(D_ERROR, "acquire: channel mode not provided");
 100b5f0:	e3081588 	movw	r1, #34184	; 0x8588
 100b5f4:	e3a00004 	mov	r0, #4
 100b5f8:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b5fc:	e3e08002 	mvn	r8, #2
		d_printf(D_ERROR, "acquire: channel mode not provided");
 100b600:	eb000f58 	bl	100f368 <d_printf>
		return ACQRES_PARAM_FAIL;
 100b604:	eaffff4f 	b	100b348 <acq_prepare_triggered+0x1dc>
		d_printf(D_ERROR, "acquire: triggered or continuous flag set (both bits must be clear)");
 100b608:	e30815ac 	movw	r1, #34220	; 0x85ac
 100b60c:	e3a00004 	mov	r0, #4
 100b610:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b614:	e3e08002 	mvn	r8, #2
		d_printf(D_ERROR, "acquire: triggered or continuous flag set (both bits must be clear)");
 100b618:	eb000f52 	bl	100f368 <d_printf>
		return ACQRES_PARAM_FAIL;
 100b61c:	eaffff49 	b	100b348 <acq_prepare_triggered+0x1dc>
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d req_align_mask=0x%08x)", \
 100b620:	e30815f0 	movw	r1, #34288	; 0x85f0
 100b624:	e1a03002 	mov	r3, r2
 100b628:	e58de000 	str	lr, [sp]
 100b62c:	e1a02000 	mov	r2, r0
 100b630:	e3401106 	movt	r1, #262	; 0x106
 100b634:	e3a00004 	mov	r0, #4
 100b638:	eb000f4a 	bl	100f368 <d_printf>
		return ACQRES_ALIGN_FAIL;
 100b63c:	e3e08001 	mvn	r8, #1
 100b640:	eaffff40 	b	100b348 <acq_prepare_triggered+0x1dc>
		demux |= ADCDEMUX_4CH;
 100b644:	e3150080 	tst	r5, #128	; 0x80
 100b648:	01a03000 	moveq	r3, r0
 100b64c:	11a03001 	movne	r3, r1
 100b650:	eaffffe0 	b	100b5d8 <acq_prepare_triggered+0x46c>
	} else if(mode_flags & ACQ_MODE_14BIT) {
 100b654:	e2053004 	and	r3, r5, #4
 100b658:	e3530000 	cmp	r3, #0
 100b65c:	03a01004 	moveq	r1, #4
 100b660:	13a01024 	movne	r1, #36	; 0x24
 100b664:	03a02002 	moveq	r2, #2
 100b668:	13a02022 	movne	r2, #34	; 0x22
 100b66c:	03a03001 	moveq	r3, #1
 100b670:	13a03021 	movne	r3, #33	; 0x21
 100b674:	03a00000 	moveq	r0, #0
 100b678:	13a00020 	movne	r0, #32
 100b67c:	eaffffd0 	b	100b5c4 <acq_prepare_triggered+0x458>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100b680:	e30813c8 	movw	r1, #33736	; 0x83c8
 100b684:	e1a02003 	mov	r2, r3
 100b688:	e3401106 	movt	r1, #262	; 0x106
 100b68c:	e3a00004 	mov	r0, #4
 100b690:	eb000f34 	bl	100f368 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100b694:	e5193008 	ldr	r3, [r9, #-8]
		return ACQRES_MALLOC_FAIL;
 100b698:	e3e08000 	mvn	r8, #0
		g_acq_state.stats.num_alloc_err_total++;
 100b69c:	e5192004 	ldr	r2, [r9, #-4]
 100b6a0:	e2933001 	adds	r3, r3, #1
 100b6a4:	e2a22000 	adc	r2, r2, #0
 100b6a8:	e5093008 	str	r3, [r9, #-8]
 100b6ac:	e5092004 	str	r2, [r9, #-4]
		malloc_stats();
 100b6b0:	fa0048ae 	blx	101d970 <malloc_stats>
			d_printf(D_ERROR, "acquire: unable to get allocation for first-B buffer: error %d", error);
 100b6b4:	e308173c 	movw	r1, #34620	; 0x873c
 100b6b8:	e1a02008 	mov	r2, r8
 100b6bc:	e3401106 	movt	r1, #262	; 0x106
 100b6c0:	e3a00004 	mov	r0, #4
 100b6c4:	eb000f27 	bl	100f368 <d_printf>
			return error;
 100b6c8:	eaffff1e 	b	100b348 <acq_prepare_triggered+0x1dc>
		return ACQRES_TOTAL_MALLOC_FAIL;
 100b6cc:	e3e08003 	mvn	r8, #3
 100b6d0:	eaffff1c 	b	100b348 <acq_prepare_triggered+0x1dc>
		d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first-A entry in acquisition", sizeof(struct acq_buffer_t));
 100b6d4:	e308166c 	movw	r1, #34412	; 0x866c
 100b6d8:	e3a02020 	mov	r2, #32
 100b6dc:	e3401106 	movt	r1, #262	; 0x106
 100b6e0:	e3a00004 	mov	r0, #4
 100b6e4:	eb000f1f 	bl	100f368 <d_printf>
		return ACQRES_MALLOC_FAIL;
 100b6e8:	e3e08000 	mvn	r8, #0
		malloc_stats();
 100b6ec:	fa00489f 	blx	101d970 <malloc_stats>
		return ACQRES_MALLOC_FAIL;
 100b6f0:	eaffff14 	b	100b348 <acq_prepare_triggered+0x1dc>
			d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first-B entry in acquisition", sizeof(struct acq_buffer_t));
 100b6f4:	e30816f4 	movw	r1, #34548	; 0x86f4
 100b6f8:	e3a02020 	mov	r2, #32
 100b6fc:	e3401106 	movt	r1, #262	; 0x106
 100b700:	e3a00004 	mov	r0, #4
 100b704:	eb000f17 	bl	100f368 <d_printf>
			return ACQRES_MALLOC_FAIL;
 100b708:	e3e08000 	mvn	r8, #0
 100b70c:	eaffff0d 	b	100b348 <acq_prepare_triggered+0x1dc>
 100b710:	01075ac8 	.word	0x01075ac8

0100b714 <acq_start>:
 * 			ACQRES_NOT_IMPLEMENTED if the mode is not presently supported;
 * 			ACQRES_DMA_FAIL if DMA task could not be started;
 * 			ACQRES_OK if acquisition task started successfully.
 */
int acq_start(int reset_fifo)
{
 100b714:	e92d4070 	push	{r4, r5, r6, lr}
	int error;

	//d_printf(D_INFO, "acquire: starts");

	if(COND_UNLIKELY(g_acq_state.state == ACQSTATE_UNINIT)) {
 100b718:	e30542d8 	movw	r4, #21208	; 0x52d8
 100b71c:	e3404107 	movt	r4, #263	; 0x107
 100b720:	e5943000 	ldr	r3, [r4]
 100b724:	e3530000 	cmp	r3, #0
 100b728:	0a00003e 	beq	100b828 <acq_start+0x114>
	if(!(g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE)) {
		return ACQRES_NOT_STOPPED;
	}
#endif

	if(g_acq_state.acq_mode_flags & ACQ_MODE_TRIGGERED) {
 100b72c:	e300375c 	movw	r3, #1884	; 0x75c
 100b730:	e19420b3 	ldrh	r2, [r4, r3]
 100b734:	e3120c01 	tst	r2, #256	; 0x100
 100b738:	0a000040 	beq	100b840 <acq_start+0x12c>
		XAxiDma_Reset(&g_acq_state.dma);
 100b73c:	e1a05000 	mov	r5, r0
 100b740:	e2840008 	add	r0, r4, #8
 100b744:	eb002164 	bl	1013cdc <XAxiDma_Reset>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100b748:	e5942008 	ldr	r2, [r4, #8]

		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 100b74c:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
 100b750:	e5923030 	ldr	r3, [r2, #48]	; 0x30
 100b754:	e5910008 	ldr	r0, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100b758:	e3833a07 	orr	r3, r3, #28672	; 0x7000
	*LocalAddr = Value;
 100b75c:	e5823030 	str	r3, [r2, #48]	; 0x30
		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 100b760:	e594176c 	ldr	r1, [r4, #1900]	; 0x76c
 100b764:	eb003675 	bl	1019140 <Xil_DCacheFlushRange>
		dsb();
 100b768:	f57ff04f 	dsb	sy

		//d_printf(D_INFO, "acquire: %d bytes", g_acq_state.pre_buffsz);
		error = _acq_core_dma_start((uint32_t)g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100b76c:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100b770:	e2840008 	add	r0, r4, #8
 100b774:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 100b778:	e3a03001 	mov	r3, #1
 100b77c:	e5911008 	ldr	r1, [r1, #8]
 100b780:	eb002331 	bl	101444c <XAxiDma_SimpleTransfer>
	if(error != XST_SUCCESS) {
 100b784:	e2506000 	subs	r6, r0, #0
 100b788:	1a000032 	bne	100b858 <acq_start+0x144>
			return ACQRES_DMA_FAIL;
		}

		// Ensure we clear the overrun flag as this is a new packet.  If this is not cleared
		// we cannot recover from overrun.
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b78c:	e5940884 	ldr	r0, [r4, #2180]	; 0x884

		// Start the transaction: initially with triggers masked and not in POST_TRIG mode
		_acq_set_ctrl_a(ACQ_CTRL_A_DATA_VALID | ACQ_CTRL_A_RUN | ACQ_CTRL_A_TRIG_MASK | ACQ_CTRL_A_AXI_RUN);

		// Reset the FIFO, if needed
		if(reset_fifo == ACQ_START_FIFO_RESET) {
 100b790:	e3550001 	cmp	r5, #1
	return *(volatile u32 *) Addr;
 100b794:	e5942088 	ldr	r2, [r4, #136]	; 0x88
 100b798:	e3a05000 	mov	r5, #0
 100b79c:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100b7a0:	e34453c0 	movt	r5, #17344	; 0x43c0
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b7a4:	e1d011b0 	ldrh	r1, [r0, #16]
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;
 100b7a8:	e3a0c001 	mov	ip, #1
 100b7ac:	e5922000 	ldr	r2, [r2]
 100b7b0:	e3c33b82 	bic	r3, r3, #133120	; 0x20800
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b7b4:	e3c11002 	bic	r1, r1, #2
 100b7b8:	e3c33050 	bic	r3, r3, #80	; 0x50
	g_acq_state.dmacr_state = XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_CR_OFFSET);
 100b7bc:	e5842784 	str	r2, [r4, #1924]	; 0x784
	g_acq_state.acq_ctrl_a |= bitmask;
 100b7c0:	e3832f41 	orr	r2, r3, #260	; 0x104
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b7c4:	e1c011b0 	strh	r1, [r0, #16]
 100b7c8:	e3822003 	orr	r2, r2, #3
		g_acq_state.acq_early_abort = 0;
 100b7cc:	e5d41760 	ldrb	r1, [r4, #1888]	; 0x760
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;
 100b7d0:	e3a00002 	mov	r0, #2
 100b7d4:	e8841001 	stm	r4, {r0, ip}
		g_acq_state.acq_early_abort = 0;
 100b7d8:	e7c01016 	bfi	r1, r6, #0, #1
 100b7dc:	e5c41760 	strb	r1, [r4, #1888]	; 0x760
 100b7e0:	e5853050 	str	r3, [r5, #80]	; 0x50
 100b7e4:	e5842780 	str	r2, [r4, #1920]	; 0x780
 100b7e8:	e5852050 	str	r2, [r5, #80]	; 0x50
		if(reset_fifo == ACQ_START_FIFO_RESET) {
 100b7ec:	0a000001 	beq	100b7f8 <acq_start+0xe4>
		return ACQRES_OK;
	} else {
		d_printf(D_ERROR, "acquire: mode unsupported (0x%08x)", g_acq_state.acq_mode_flags);
		return ACQRES_NOT_IMPLEMENTED;
	}
}
 100b7f0:	e1a00006 	mov	r0, r6
 100b7f4:	e8bd8070 	pop	{r4, r5, r6, pc}
 100b7f8:	e3833f49 	orr	r3, r3, #292	; 0x124
	bogo_delay(10);
 100b7fc:	e3a0000a 	mov	r0, #10
 100b800:	e3833003 	orr	r3, r3, #3
 100b804:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100b808:	e5853050 	str	r3, [r5, #80]	; 0x50
 100b80c:	eb000ebc 	bl	100f304 <bogo_delay>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100b810:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
}
 100b814:	e1a00006 	mov	r0, r6
 100b818:	e3c33020 	bic	r3, r3, #32
 100b81c:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100b820:	e5853050 	str	r3, [r5, #80]	; 0x50
 100b824:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "ACQSTATE_UNINIT");
 100b828:	e30817c4 	movw	r1, #34756	; 0x87c4
 100b82c:	e3a00004 	mov	r0, #4
 100b830:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_NOT_INITIALISED;
 100b834:	e3e06005 	mvn	r6, #5
		d_printf(D_ERROR, "ACQSTATE_UNINIT");
 100b838:	eb000eca 	bl	100f368 <d_printf>
		return ACQRES_NOT_INITIALISED;
 100b83c:	eaffffeb 	b	100b7f0 <acq_start+0xdc>
		d_printf(D_ERROR, "acquire: mode unsupported (0x%08x)", g_acq_state.acq_mode_flags);
 100b840:	e30817fc 	movw	r1, #34812	; 0x87fc
 100b844:	e3a00004 	mov	r0, #4
 100b848:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_NOT_IMPLEMENTED;
 100b84c:	e3e06006 	mvn	r6, #6
		d_printf(D_ERROR, "acquire: mode unsupported (0x%08x)", g_acq_state.acq_mode_flags);
 100b850:	eb000ec4 	bl	100f368 <d_printf>
		return ACQRES_NOT_IMPLEMENTED;
 100b854:	eaffffe5 	b	100b7f0 <acq_start+0xdc>
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
 100b858:	e3081144 	movw	r1, #33092	; 0x8144
 100b85c:	e1a02006 	mov	r2, r6
 100b860:	e3401106 	movt	r1, #262	; 0x106
 100b864:	e3a00004 	mov	r0, #4
 100b868:	eb000ebe 	bl	100f368 <d_printf>
			d_printf(D_ERROR, "acquire: unable to start DMA, error %d", error);
 100b86c:	e30817d4 	movw	r1, #34772	; 0x87d4
 100b870:	e3e02004 	mvn	r2, #4
 100b874:	e3401106 	movt	r1, #262	; 0x106
 100b878:	e3a00004 	mov	r0, #4
 100b87c:	eb000eb9 	bl	100f368 <d_printf>
			return ACQRES_DMA_FAIL;
 100b880:	e3e06004 	mvn	r6, #4
 100b884:	eaffffd9 	b	100b7f0 <acq_start+0xdc>

0100b888 <acq_stop>:
 * @return	ACQRES_NOT_RUNNING if the acquisition is already stopped;
 * 			ACQRES_OK if stop signal sent.
 */
int acq_stop()
{
	if(g_acq_state.state == ACQSTATE_STOPPED) {
 100b888:	e30532d8 	movw	r3, #21208	; 0x52d8
 100b88c:	e3403107 	movt	r3, #263	; 0x107
 100b890:	e5932000 	ldr	r2, [r3]
 100b894:	e3520001 	cmp	r2, #1
 100b898:	0a00000f 	beq	100b8dc <acq_stop+0x54>
		d_printf(D_WARN, "acquire: acquisition already stopped");
		return ACQRES_NOT_RUNNING;
	}

	GLOBAL_IRQ_DISABLE();
 100b89c:	f10c0080 	cpsid	i
	g_acq_state.acq_abort_done = 0;
	g_acq_state.acq_early_abort = 1;
 100b8a0:	e5d32760 	ldrb	r2, [r3, #1888]	; 0x760
 100b8a4:	e3a00000 	mov	r0, #0
	g_acq_state.acq_ctrl_a |= bitmask;
 100b8a8:	e5931780 	ldr	r1, [r3, #1920]	; 0x780
 100b8ac:	e34403c0 	movt	r0, #17344	; 0x43c0
	g_acq_state.num_acq_made_done = g_acq_state.num_acq_made;
 100b8b0:	e593c778 	ldr	ip, [r3, #1912]	; 0x778
	g_acq_state.acq_early_abort = 1;
 100b8b4:	e3c22003 	bic	r2, r2, #3
 100b8b8:	e3811b02 	orr	r1, r1, #2048	; 0x800
 100b8bc:	e3822001 	orr	r2, r2, #1
 100b8c0:	e5c32760 	strb	r2, [r3, #1888]	; 0x760
	g_acq_state.num_acq_made_done = g_acq_state.num_acq_made;
 100b8c4:	e583c77c 	str	ip, [r3, #1916]	; 0x77c
 100b8c8:	e5831780 	str	r1, [r3, #1920]	; 0x780
 100b8cc:	e5801050 	str	r1, [r0, #80]	; 0x50
	_acq_set_ctrl_a(ACQ_CTRL_A_END_EARLY);
	GLOBAL_IRQ_ENABLE();
 100b8d0:	f1080080 	cpsie	i

	return ACQRES_OK;
 100b8d4:	e3a00000 	mov	r0, #0
}
 100b8d8:	e12fff1e 	bx	lr
		d_printf(D_WARN, "acquire: acquisition already stopped");
 100b8dc:	e3081820 	movw	r1, #34848	; 0x8820
{
 100b8e0:	e92d4010 	push	{r4, lr}
		d_printf(D_WARN, "acquire: acquisition already stopped");
 100b8e4:	e3a00003 	mov	r0, #3
 100b8e8:	e3401106 	movt	r1, #262	; 0x106
 100b8ec:	eb000e9d 	bl	100f368 <d_printf>
		return ACQRES_NOT_RUNNING;
 100b8f0:	e3e00008 	mvn	r0, #8
}
 100b8f4:	e8bd8010 	pop	{r4, pc}

0100b8f8 <acq_abort_done>:
 * present if a hold off is programmed, because that hold off needs to be stopped
 * first.
 */
bool acq_abort_done()
{
	if(g_acq_state.acq_abort_done) {
 100b8f8:	e30522d8 	movw	r2, #21208	; 0x52d8
 100b8fc:	e3402107 	movt	r2, #263	; 0x107
 100b900:	e5d23760 	ldrb	r3, [r2, #1888]	; 0x760
 100b904:	e2130002 	ands	r0, r3, #2
		g_acq_state.acq_abort_done = 0;
 100b908:	17c1309f 	bfcne	r3, #1, #1
		return 1;
 100b90c:	13a00001 	movne	r0, #1
		g_acq_state.acq_abort_done = 0;
 100b910:	15c23760 	strbne	r3, [r2, #1888]	; 0x760
	}

	return 0;
}
 100b914:	e12fff1e 	bx	lr

0100b918 <acq_is_done>:
/*
 * Returns TRUE if the requested acquisition is complete.
 */
bool acq_is_done()
{
	return (g_acq_state.state == ACQSTATE_DONE);
 100b918:	e30532d8 	movw	r3, #21208	; 0x52d8
 100b91c:	e3403107 	movt	r3, #263	; 0x107
 100b920:	e5930000 	ldr	r0, [r3]
}
 100b924:	e2400005 	sub	r0, r0, #5
 100b928:	e16f0f10 	clz	r0, r0
 100b92c:	e1a002a0 	lsr	r0, r0, #5
 100b930:	e12fff1e 	bx	lr

0100b934 <acq_make_status>:
void acq_make_status(struct acq_status_resp_t *status_resp)
{
	int trig_res;

	status_resp->flags = 0;
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b934:	e30522d8 	movw	r2, #21208	; 0x52d8
{
 100b938:	e92d4010 	push	{r4, lr}
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b93c:	e3402107 	movt	r2, #263	; 0x107
{
 100b940:	e1a04000 	mov	r4, r0
	status_resp->flags = 0;
 100b944:	e3a00000 	mov	r0, #0

	if(g_acq_state.state == ACQSTATE_UNINIT || g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE) {
 100b948:	e5921000 	ldr	r1, [r2]
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b94c:	e5923778 	ldr	r3, [r2, #1912]	; 0x778
	status_resp->flags = 0;
 100b950:	e5c40004 	strb	r0, [r4, #4]
	if(g_acq_state.state == ACQSTATE_UNINIT || g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE) {
 100b954:	e3510005 	cmp	r1, #5
 100b958:	13510001 	cmpne	r1, #1
	status_resp->flags = 0;
 100b95c:	e5c40005 	strb	r0, [r4, #5]
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b960:	e5843000 	str	r3, [r4]
	if(g_acq_state.state == ACQSTATE_UNINIT || g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE) {
 100b964:	83a01002 	movhi	r1, #2
 100b968:	8a000005 	bhi	100b984 <acq_make_status+0x50>
		status_resp->flags |= ACQSTA_STOPPED;
	}

	if(g_acq_state.state == ACQSTATE_DONE) {
 100b96c:	e3510005 	cmp	r1, #5
		status_resp->flags |= ACQSTA_STOPPED;
 100b970:	13a01022 	movne	r1, #34	; 0x22
		status_resp->flags |= ACQSTA_DONE;
 100b974:	03a01023 	moveq	r1, #35	; 0x23
		status_resp->flags |= ACQSTA_STOPPED;
 100b978:	13a00020 	movne	r0, #32
		status_resp->flags |= ACQSTA_DONE;
 100b97c:	03a00021 	moveq	r0, #33	; 0x21
 100b980:	e5c40004 	strb	r0, [r4, #4]
	}

	if(g_acq_state.num_acq_made == g_acq_state.num_acq_request && g_acq_state.num_acq_request > 0) {
 100b984:	e5922774 	ldr	r2, [r2, #1908]	; 0x774
 100b988:	e0433002 	sub	r3, r3, r2
 100b98c:	e3520000 	cmp	r2, #0
 100b990:	e16f3f13 	clz	r3, r3
 100b994:	e1a032a3 	lsr	r3, r3, #5
 100b998:	03a03000 	moveq	r3, #0
 100b99c:	e3530000 	cmp	r3, #0
		status_resp->flags |= ACQSTA_ALL_REQUESTED;
 100b9a0:	11c410b4 	strhne	r1, [r4, #4]
	}

	trig_res = trig_has_trigd();
 100b9a4:	eb0020ac 	bl	1013c5c <trig_has_trigd>

	if(trig_res == TRIG_STATUS_TRIGD) {
 100b9a8:	e3500001 	cmp	r0, #1
 100b9ac:	0a000004 	beq	100b9c4 <acq_make_status+0x90>
		status_resp->flags |= ACQSTA_TRIGD_NORMAL;
	} else if(trig_res == TRIG_STATUS_AUTO) {
 100b9b0:	e3500002 	cmp	r0, #2
		status_resp->flags |= ACQSTA_TRIGD_AUTO;
 100b9b4:	01d430b4 	ldrheq	r3, [r4, #4]
 100b9b8:	03833008 	orreq	r3, r3, #8
 100b9bc:	01c430b4 	strheq	r3, [r4, #4]
	}
}
 100b9c0:	e8bd8010 	pop	{r4, pc}
		status_resp->flags |= ACQSTA_TRIGD_NORMAL;
 100b9c4:	e1d430b4 	ldrh	r3, [r4, #4]
 100b9c8:	e3833004 	orr	r3, r3, #4
 100b9cc:	e1c430b4 	strh	r3, [r4, #4]
 100b9d0:	e8bd8010 	pop	{r4, pc}

0100b9d4 <acq_debug_dump>:

/*
 * Dump state of acquire engine for debugging purposes.
 */
void acq_debug_dump()
{
 100b9d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t sample_delta;
	uint32_t msb, lsb;
	float time_delta_us, acq_rate = NAN, sample_rate = NAN;

	// Calculate acquisition rate if last debug timer is set
	if(g_acq_state.last_debug_timer != 0) {
 100b9d8:	e30542d8 	movw	r4, #21208	; 0x52d8
 100b9dc:	e3404107 	movt	r4, #263	; 0x107
{
 100b9e0:	ed2d8b02 	vpush	{d8}
	if(g_acq_state.last_debug_timer != 0) {
 100b9e4:	e2847e81 	add	r7, r4, #2064	; 0x810
{
 100b9e8:	e24dde77 	sub	sp, sp, #1904	; 0x770
	if(g_acq_state.last_debug_timer != 0) {
 100b9ec:	e1c720d0 	ldrd	r2, [r7]
{
 100b9f0:	e24dd00c 	sub	sp, sp, #12
	void *sp = NULL;  // approximately the stack
 100b9f4:	e3a05000 	mov	r5, #0
 100b9f8:	e58d576c 	str	r5, [sp, #1900]	; 0x76c
	if(g_acq_state.last_debug_timer != 0) {
 100b9fc:	e1923003 	orrs	r3, r2, r3
 100ba00:	1a000134 	bne	100bed8 <acq_debug_dump+0x504>
 100ba04:	e284ae7b 	add	sl, r4, #1968	; 0x7b0
 100ba08:	e2849e7e 	add	r9, r4, #2016	; 0x7e0
 100ba0c:	e58d5748 	str	r5, [sp, #1864]	; 0x748
 100ba10:	e58d5754 	str	r5, [sp, #1876]	; 0x754
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
			}
		}
	}

	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **   ", &g_acq_state);
 100ba14:	e30522d8 	movw	r2, #21208	; 0x52d8
 100ba18:	e3081848 	movw	r1, #34888	; 0x8848
 100ba1c:	e3402107 	movt	r2, #263	; 0x107
 100ba20:	e3401106 	movt	r1, #262	; 0x106
 100ba24:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x                  ", g_acq_state.acq_mode_flags);
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100ba28:	e30c51fc 	movw	r5, #49660	; 0xc1fc
	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **   ", &g_acq_state);
 100ba2c:	eb000e4d 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100ba30:	e308187c 	movw	r1, #34940	; 0x887c
 100ba34:	e3a00002 	mov	r0, #2
 100ba38:	e3401106 	movt	r1, #262	; 0x106
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100ba3c:	e3405106 	movt	r5, #262	; 0x106
	d_printf(D_INFO, "                                                ");
 100ba40:	eb000e48 	bl	100f368 <d_printf>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
 100ba44:	e28d2e76 	add	r2, sp, #1888	; 0x760
 100ba48:	e30818b0 	movw	r1, #34992	; 0x88b0
 100ba4c:	e282200c 	add	r2, r2, #12
 100ba50:	e3401106 	movt	r1, #262	; 0x106
 100ba54:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "sub_state             = %d [%s]                 ", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
	d_printf(D_INFO, "acq_current           = 0x%08x                  ", g_acq_state.acq_current);
	d_printf(D_INFO, "acq_first             = 0x%08x                  ", g_acq_state.acq_first);
	d_printf(D_INFO, "acq_done_current      = 0x%08x                  ", g_acq_state.acq_done_current);
	d_printf(D_INFO, "acq_done_first        = 0x%08x                  ", g_acq_state.acq_done_first);
	d_printf(D_INFO, "dma                   = 0x%08x                  ", g_acq_state.dma);
 100ba58:	e59f8600 	ldr	r8, [pc, #1536]	; 100c060 <acq_debug_dump+0x68c>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
 100ba5c:	eb000e41 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100ba60:	e308187c 	movw	r1, #34940	; 0x887c
 100ba64:	e3a00002 	mov	r0, #2
 100ba68:	e3401106 	movt	r1, #262	; 0x106
	res = _FAB_CFG_ACCESS(reg);
 100ba6c:	e3a06000 	mov	r6, #0
 100ba70:	eb000e3c 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x                  ", g_acq_state.acq_mode_flags);
 100ba74:	e300375c 	movw	r3, #1884	; 0x75c
 100ba78:	e30818e4 	movw	r1, #35044	; 0x88e4
 100ba7c:	e19420b3 	ldrh	r2, [r4, r3]
 100ba80:	e3401106 	movt	r1, #262	; 0x106
 100ba84:	e3a00002 	mov	r0, #2
 100ba88:	e34463c0 	movt	r6, #17344	; 0x43c0
 100ba8c:	eb000e35 	bl	100f368 <d_printf>
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100ba90:	e5942000 	ldr	r2, [r4]
 100ba94:	e3081918 	movw	r1, #35096	; 0x8918
 100ba98:	e3401106 	movt	r1, #262	; 0x106
 100ba9c:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "acq_current->flags    = 0x%04x                  ", g_acq_state.acq_current->flags);
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)             ", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "s.num_acq_total       = %llu                    ", g_acq_state.stats.num_acq_total);
	d_printf(D_INFO, "s.num_alloc_err_total = %llu                    ", g_acq_state.stats.num_alloc_err_total);
 100baa0:	e59fb5bc 	ldr	fp, [pc, #1468]	; 100c064 <acq_debug_dump+0x690>
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100baa4:	e7953102 	ldr	r3, [r5, r2, lsl #2]
 100baa8:	eb000e2e 	bl	100f368 <d_printf>
	d_printf(D_INFO, "sub_state             = %d [%s]                 ", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
 100baac:	e5942004 	ldr	r2, [r4, #4]
 100bab0:	e3a00002 	mov	r0, #2
 100bab4:	e308194c 	movw	r1, #35148	; 0x894c
 100bab8:	e3401106 	movt	r1, #262	; 0x106
 100babc:	e0855012 	add	r5, r5, r2, lsl r0
 100bac0:	e595301c 	ldr	r3, [r5, #28]
 100bac4:	eb000e27 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_current           = 0x%08x                  ", g_acq_state.acq_current);
 100bac8:	e3081980 	movw	r1, #35200	; 0x8980
 100bacc:	e5942884 	ldr	r2, [r4, #2180]	; 0x884
 100bad0:	e3401106 	movt	r1, #262	; 0x106
 100bad4:	e3a00002 	mov	r0, #2
 100bad8:	eb000e22 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_first             = 0x%08x                  ", g_acq_state.acq_first);
 100badc:	e30819b4 	movw	r1, #35252	; 0x89b4
 100bae0:	e5942880 	ldr	r2, [r4, #2176]	; 0x880
 100bae4:	e3401106 	movt	r1, #262	; 0x106
 100bae8:	e3a00002 	mov	r0, #2
 100baec:	eb000e1d 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_done_current      = 0x%08x                  ", g_acq_state.acq_done_current);
 100baf0:	e30819e8 	movw	r1, #35304	; 0x89e8
 100baf4:	e594288c 	ldr	r2, [r4, #2188]	; 0x88c
 100baf8:	e3401106 	movt	r1, #262	; 0x106
 100bafc:	e3a00002 	mov	r0, #2
 100bb00:	eb000e18 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_done_first        = 0x%08x                  ", g_acq_state.acq_done_first);
 100bb04:	e3081a1c 	movw	r1, #35356	; 0x8a1c
 100bb08:	e5942888 	ldr	r2, [r4, #2184]	; 0x888
 100bb0c:	e3401106 	movt	r1, #262	; 0x106
 100bb10:	e3a00002 	mov	r0, #2
 100bb14:	eb000e13 	bl	100f368 <d_printf>
	d_printf(D_INFO, "dma                   = 0x%08x                  ", g_acq_state.dma);
 100bb18:	e2881008 	add	r1, r8, #8
 100bb1c:	e3002748 	movw	r2, #1864	; 0x748
 100bb20:	e1a0000d 	mov	r0, sp
 100bb24:	eb0045b5 	bl	101d200 <memcpy>
 100bb28:	e3081a50 	movw	r1, #35408	; 0x8a50
 100bb2c:	e898000c 	ldm	r8, {r2, r3}
 100bb30:	e3401106 	movt	r1, #262	; 0x106
 100bb34:	e3a00002 	mov	r0, #2
 100bb38:	eb000e0a 	bl	100f368 <d_printf>
	d_printf(D_INFO, "dma_config            = 0x%08x                  ", g_acq_state.dma_config);
 100bb3c:	e3081a84 	movw	r1, #35460	; 0x8a84
 100bb40:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
 100bb44:	e3401106 	movt	r1, #262	; 0x106
 100bb48:	e3a00002 	mov	r0, #2
 100bb4c:	eb000e05 	bl	100f368 <d_printf>
	d_printf(D_INFO, "demux_reg             = 0x%02x                  ", g_acq_state.demux_reg);
 100bb50:	e3081ab8 	movw	r1, #35512	; 0x8ab8
 100bb54:	e5942790 	ldr	r2, [r4, #1936]	; 0x790
 100bb58:	e3401106 	movt	r1, #262	; 0x106
 100bb5c:	e3a00002 	mov	r0, #2
 100bb60:	eb000e00 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bb64:	e308187c 	movw	r1, #34940	; 0x887c
 100bb68:	e3a00002 	mov	r0, #2
 100bb6c:	e3401106 	movt	r1, #262	; 0x106
 100bb70:	eb000dfc 	bl	100f368 <d_printf>
	d_printf(D_INFO, "R_acq_ctrl_a          = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_CTRL_A), g_acq_state.dbg_isr_acq_ctrl_a);
 100bb74:	e3081aec 	movw	r1, #35564	; 0x8aec
 100bb78:	e5962050 	ldr	r2, [r6, #80]	; 0x50
 100bb7c:	e5943794 	ldr	r3, [r4, #1940]	; 0x794
 100bb80:	e3401106 	movt	r1, #262	; 0x106
 100bb84:	e3a00002 	mov	r0, #2
 100bb88:	eb000df6 	bl	100f368 <d_printf>
	d_printf(D_INFO, "R_acq_status_a        = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_A), g_acq_state.dbg_isr_acq_status_a);
 100bb8c:	e3081b20 	movw	r1, #35616	; 0x8b20
 100bb90:	e5962058 	ldr	r2, [r6, #88]	; 0x58
 100bb94:	e5943798 	ldr	r3, [r4, #1944]	; 0x798
 100bb98:	e3401106 	movt	r1, #262	; 0x106
 100bb9c:	e3a00002 	mov	r0, #2
 100bba0:	eb000df0 	bl	100f368 <d_printf>
	d_printf(D_INFO, "R_acq_status_b        = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_B), g_acq_state.dbg_isr_acq_status_b);
 100bba4:	e3081b54 	movw	r1, #35668	; 0x8b54
 100bba8:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
 100bbac:	e594379c 	ldr	r3, [r4, #1948]	; 0x79c
 100bbb0:	e3401106 	movt	r1, #262	; 0x106
 100bbb4:	e3a00002 	mov	r0, #2
 100bbb8:	eb000dea 	bl	100f368 <d_printf>
	d_printf(D_INFO, "R_acq_trigger_ptr     = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR), g_acq_state.dbg_isr_acq_trig_ptr);
 100bbbc:	e3081b88 	movw	r1, #35720	; 0x8b88
 100bbc0:	e5962048 	ldr	r2, [r6, #72]	; 0x48
 100bbc4:	e59437a0 	ldr	r3, [r4, #1952]	; 0x7a0
 100bbc8:	e3401106 	movt	r1, #262	; 0x106
 100bbcc:	e3a00002 	mov	r0, #2
 100bbd0:	eb000de4 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bbd4:	e308187c 	movw	r1, #34940	; 0x887c
 100bbd8:	e3a00002 	mov	r0, #2
 100bbdc:	e3401106 	movt	r1, #262	; 0x106
 100bbe0:	eb000de0 	bl	100f368 <d_printf>
	d_printf(D_INFO, "pre_buffsz            = %7d bytes (0x%08x)      ", g_acq_state.pre_buffsz, g_acq_state.pre_buffsz);
 100bbe4:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
 100bbe8:	e3081bbc 	movw	r1, #35772	; 0x8bbc
 100bbec:	e3401106 	movt	r1, #262	; 0x106
 100bbf0:	e3a00002 	mov	r0, #2
 100bbf4:	e1a02003 	mov	r2, r3
 100bbf8:	eb000dda 	bl	100f368 <d_printf>
	d_printf(D_INFO, "post_buffsz           = %7d bytes (0x%08x)      ", g_acq_state.post_buffsz, g_acq_state.post_buffsz);
 100bbfc:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
 100bc00:	e3081bf0 	movw	r1, #35824	; 0x8bf0
 100bc04:	e3401106 	movt	r1, #262	; 0x106
 100bc08:	e3a00002 	mov	r0, #2
 100bc0c:	e1a02003 	mov	r2, r3
 100bc10:	eb000dd4 	bl	100f368 <d_printf>
	d_printf(D_INFO, "total_buffsz          = %7d bytes (0x%08x)      ", g_acq_state.total_buffsz, g_acq_state.total_buffsz);
 100bc14:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
 100bc18:	e3081c24 	movw	r1, #35876	; 0x8c24
 100bc1c:	e3401106 	movt	r1, #262	; 0x106
 100bc20:	e3a00002 	mov	r0, #2
 100bc24:	e1a02003 	mov	r2, r3
 100bc28:	eb000dce 	bl	100f368 <d_printf>
	d_printf(D_INFO, "pre_sampct            = %7d wavewords           ", g_acq_state.pre_sampct);
 100bc2c:	e3081c58 	movw	r1, #35928	; 0x8c58
 100bc30:	e5942788 	ldr	r2, [r4, #1928]	; 0x788
 100bc34:	e3401106 	movt	r1, #262	; 0x106
 100bc38:	e3a00002 	mov	r0, #2
 100bc3c:	eb000dc9 	bl	100f368 <d_printf>
	d_printf(D_INFO, "post_sampct           = %7d wavewords           ", g_acq_state.post_sampct);
 100bc40:	e3081c8c 	movw	r1, #35980	; 0x8c8c
 100bc44:	e594278c 	ldr	r2, [r4, #1932]	; 0x78c
 100bc48:	e3401106 	movt	r1, #262	; 0x106
 100bc4c:	e3a00002 	mov	r0, #2
 100bc50:	eb000dc4 	bl	100f368 <d_printf>
	d_printf(D_INFO, "num_acq_request       = %7d waves               ", g_acq_state.num_acq_request);
 100bc54:	e3081cc0 	movw	r1, #36032	; 0x8cc0
 100bc58:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
 100bc5c:	e3401106 	movt	r1, #262	; 0x106
 100bc60:	e3a00002 	mov	r0, #2
 100bc64:	eb000dbf 	bl	100f368 <d_printf>
	d_printf(D_INFO, "num_acq_made          = %7d waves               ", g_acq_state.num_acq_made);
 100bc68:	e3081cf4 	movw	r1, #36084	; 0x8cf4
 100bc6c:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
 100bc70:	e3401106 	movt	r1, #262	; 0x106
 100bc74:	e3a00002 	mov	r0, #2
 100bc78:	eb000dba 	bl	100f368 <d_printf>
	d_printf(D_INFO, "num_acq_made_done     = %7d waves               ", g_acq_state.num_acq_made_done);
 100bc7c:	e3081d28 	movw	r1, #36136	; 0x8d28
 100bc80:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
 100bc84:	e3401106 	movt	r1, #262	; 0x106
 100bc88:	e3a00002 	mov	r0, #2
 100bc8c:	eb000db5 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bc90:	e308187c 	movw	r1, #34940	; 0x887c
 100bc94:	e3a00002 	mov	r0, #2
 100bc98:	e3401106 	movt	r1, #262	; 0x106
 100bc9c:	eb000db1 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_current->flags    = 0x%04x                  ", g_acq_state.acq_current->flags);
 100bca0:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
 100bca4:	e3081d5c 	movw	r1, #36188	; 0x8d5c
 100bca8:	e3401106 	movt	r1, #262	; 0x106
 100bcac:	e3a00002 	mov	r0, #2
 100bcb0:	e1d321b0 	ldrh	r2, [r3, #16]
 100bcb4:	eb000dab 	bl	100f368 <d_printf>
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)             ", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
 100bcb8:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
 100bcbc:	e3081d90 	movw	r1, #36240	; 0x8d90
 100bcc0:	e3401106 	movt	r1, #262	; 0x106
 100bcc4:	e3a00002 	mov	r0, #2
 100bcc8:	e593300c 	ldr	r3, [r3, #12]
 100bccc:	e1a02003 	mov	r2, r3
 100bcd0:	eb000da4 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bcd4:	e308187c 	movw	r1, #34940	; 0x887c
 100bcd8:	e3a00002 	mov	r0, #2
 100bcdc:	e3401106 	movt	r1, #262	; 0x106
 100bce0:	eb000da0 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_acq_total       = %llu                    ", g_acq_state.stats.num_acq_total);
 100bce4:	e3081dc4 	movw	r1, #36292	; 0x8dc4
 100bce8:	e14a20d8 	ldrd	r2, [sl, #-8]
 100bcec:	e3401106 	movt	r1, #262	; 0x106
 100bcf0:	e3a00002 	mov	r0, #2
 100bcf4:	eb000d9b 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_alloc_err_total = %llu                    ", g_acq_state.stats.num_alloc_err_total);
 100bcf8:	e3081df8 	movw	r1, #36344	; 0x8df8
 100bcfc:	e14b20d8 	ldrd	r2, [fp, #-8]
 100bd00:	e3401106 	movt	r1, #262	; 0x106
 100bd04:	e3a00002 	mov	r0, #2
 100bd08:	eb000d96 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_alloc_total     = %llu                    ", g_acq_state.stats.num_alloc_total);
 100bd0c:	e3081e2c 	movw	r1, #36396	; 0x8e2c
 100bd10:	e1cb20d0 	ldrd	r2, [fp]
 100bd14:	e3401106 	movt	r1, #262	; 0x106
 100bd18:	e3a00002 	mov	r0, #2
 100bd1c:	eb000d91 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_err_total       = %llu                    ", g_acq_state.stats.num_err_total);
 100bd20:	e3081e60 	movw	r1, #36448	; 0x8e60
 100bd24:	e14b22d8 	ldrd	r2, [fp, #-40]	; 0xffffffd8
 100bd28:	e3401106 	movt	r1, #262	; 0x106
 100bd2c:	e3a00002 	mov	r0, #2
 100bd30:	eb000d8c 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_post_total      = %llu                    ", g_acq_state.stats.num_post_total);
 100bd34:	e3081e94 	movw	r1, #36500	; 0x8e94
 100bd38:	e14b23d0 	ldrd	r2, [fp, #-48]	; 0xffffffd0
 100bd3c:	e3401106 	movt	r1, #262	; 0x106
 100bd40:	e3a00002 	mov	r0, #2
 100bd44:	eb000d87 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_pre_total       = %llu                    ", g_acq_state.stats.num_pre_total);
 100bd48:	e3081ec8 	movw	r1, #36552	; 0x8ec8
 100bd4c:	e1ca20d0 	ldrd	r2, [sl]
 100bd50:	e3401106 	movt	r1, #262	; 0x106
 100bd54:	e3a00002 	mov	r0, #2
 100bd58:	eb000d82 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_pre_fill_total  = %llu                    ", g_acq_state.stats.num_pre_fill_total);
 100bd5c:	e3081efc 	movw	r1, #36604	; 0x8efc
 100bd60:	e14b23d8 	ldrd	r2, [fp, #-56]	; 0xffffffc8
 100bd64:	e3401106 	movt	r1, #262	; 0x106
 100bd68:	e3a00002 	mov	r0, #2
 100bd6c:	eb000d7d 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_samples         = %llu                    ", g_acq_state.stats.num_samples);
 100bd70:	e3081f30 	movw	r1, #36656	; 0x8f30
 100bd74:	e14920d8 	ldrd	r2, [r9, #-8]
 100bd78:	e3401106 	movt	r1, #262	; 0x106
 100bd7c:	e3a00002 	mov	r0, #2
 100bd80:	eb000d78 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_samples_raw     = %llu                    ", g_acq_state.stats.num_samples_raw);
 100bd84:	e3081f64 	movw	r1, #36708	; 0x8f64
 100bd88:	e1c920d0 	ldrd	r2, [r9]
 100bd8c:	e3401106 	movt	r1, #262	; 0x106
 100bd90:	e3a00002 	mov	r0, #2
 100bd94:	eb000d73 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_irqs            = %llu                    ", g_acq_state.stats.num_irqs);
 100bd98:	e3081f98 	movw	r1, #36760	; 0x8f98
 100bd9c:	e1cb20d8 	ldrd	r2, [fp, #8]
 100bda0:	e3401106 	movt	r1, #262	; 0x106
 100bda4:	e3a00002 	mov	r0, #2
 100bda8:	eb000d6e 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_fifo_full       = %llu                    ", g_acq_state.stats.num_fifo_full);
 100bdac:	e3081fcc 	movw	r1, #36812	; 0x8fcc
 100bdb0:	e1cb21d0 	ldrd	r2, [fp, #16]
 100bdb4:	e3401106 	movt	r1, #262	; 0x106
 100bdb8:	e3a00002 	mov	r0, #2
 100bdbc:	eb000d69 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_fifo_pkt_dscd   = %llu                    ", g_acq_state.stats.num_fifo_pkt_dscd);
 100bdc0:	e3091000 	movw	r1, #36864	; 0x9000
 100bdc4:	e14720d8 	ldrd	r2, [r7, #-8]
 100bdc8:	e3401106 	movt	r1, #262	; 0x106
 100bdcc:	e3a00002 	mov	r0, #2
 100bdd0:	eb000d64 	bl	100f368 <d_printf>
	d_printf(D_INFO, "s.num_fifo_stall_tot  = %llu                    ", g_acq_state.stats.num_fifo_stall_total);
 100bdd4:	e3091034 	movw	r1, #36916	; 0x9034
 100bdd8:	e14b22d0 	ldrd	r2, [fp, #-32]	; 0xffffffe0
 100bddc:	e3401106 	movt	r1, #262	; 0x106
 100bde0:	e3a00002 	mov	r0, #2
 100bde4:	eb000d5f 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bde8:	e308187c 	movw	r1, #34940	; 0x887c
 100bdec:	e3a00002 	mov	r0, #2
 100bdf0:	e3401106 	movt	r1, #262	; 0x106
 100bdf4:	eb000d5b 	bl	100f368 <d_printf>
	d_printf(D_INFO, "Approx acq. rate      = %d acq/s                ", (int)acq_rate);
 100bdf8:	e3091068 	movw	r1, #36968	; 0x9068
 100bdfc:	e59d2754 	ldr	r2, [sp, #1876]	; 0x754
 100be00:	e3401106 	movt	r1, #262	; 0x106
 100be04:	e3a00002 	mov	r0, #2
 100be08:	eb000d56 	bl	100f368 <d_printf>
	d_printf(D_INFO, "Approx sample rate    = %d Ksa/s                ", (int)sample_rate);
 100be0c:	e309109c 	movw	r1, #37020	; 0x909c
 100be10:	e59d2748 	ldr	r2, [sp, #1864]	; 0x748
 100be14:	e3401106 	movt	r1, #262	; 0x106
 100be18:	e3a00002 	mov	r0, #2
 100be1c:	eb000d51 	bl	100f368 <d_printf>
	d_printf(D_INFO, "Debug delta           = %d us                   ", (int)time_delta_us);
 100be20:	eefd7ac8 	vcvt.s32.f32	s15, s16
 100be24:	e30910d0 	movw	r1, #37072	; 0x90d0
 100be28:	e3401106 	movt	r1, #262	; 0x106
 100be2c:	e3a00002 	mov	r0, #2
 100be30:	ee172a90 	vmov	r2, s15
 100be34:	eb000d4b 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100be38:	e308187c 	movw	r1, #34940	; 0x887c
 100be3c:	e3a00002 	mov	r0, #2
 100be40:	e3401106 	movt	r1, #262	; 0x106
 100be44:	eb000d47 	bl	100f368 <d_printf>
	d_printf(D_INFO, "** End **                                       ");
 100be48:	e3091104 	movw	r1, #37124	; 0x9104
 100be4c:	e3a00002 	mov	r0, #2
 100be50:	e3401106 	movt	r1, #262	; 0x106
 100be54:	eb000d43 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100be58:	e308187c 	movw	r1, #34940	; 0x887c
 100be5c:	e3a00002 	mov	r0, #2
 100be60:	e3401106 	movt	r1, #262	; 0x106
 100be64:	eb000d3f 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100be68:	e308187c 	movw	r1, #34940	; 0x887c
 100be6c:	e3a00002 	mov	r0, #2
 100be70:	e3401106 	movt	r1, #262	; 0x106
 100be74:	eb000d3b 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100be78:	e308187c 	movw	r1, #34940	; 0x887c
 100be7c:	e3a00002 	mov	r0, #2
 100be80:	e3401106 	movt	r1, #262	; 0x106
 100be84:	eb000d37 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100be88:	e308187c 	movw	r1, #34940	; 0x887c
 100be8c:	e3a00002 	mov	r0, #2
 100be90:	e3401106 	movt	r1, #262	; 0x106
 100be94:	eb000d33 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                                                ");
 100be98:	e308187c 	movw	r1, #34940	; 0x887c
 100be9c:	e3a00002 	mov	r0, #2
 100bea0:	e3401106 	movt	r1, #262	; 0x106
 100bea4:	eb000d2f 	bl	100f368 <d_printf>

	// Save last state...
	g_acq_state.stat_last = g_acq_state.stats;
 100bea8:	e2881e7a 	add	r1, r8, #1952	; 0x7a0
 100beac:	e2880e81 	add	r0, r8, #2064	; 0x810
 100beb0:	e3a02068 	mov	r2, #104	; 0x68
 100beb4:	eb0044d1 	bl	101d200 <memcpy>
	g_acq_state.last_debug_timer = timer_value;
 100beb8:	e59d3758 	ldr	r3, [sp, #1880]	; 0x758
 100bebc:	e5873000 	str	r3, [r7]
 100bec0:	e59d375c 	ldr	r3, [sp, #1884]	; 0x75c
 100bec4:	e5873004 	str	r3, [r7, #4]
}
 100bec8:	e28dde77 	add	sp, sp, #1904	; 0x770
 100becc:	e28dd00c 	add	sp, sp, #12
 100bed0:	ecbd8b02 	vpop	{d8}
 100bed4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_read_global_timer(&lsb, &msb);
 100bed8:	e28d0e77 	add	r0, sp, #1904	; 0x770
 100bedc:	e28d1e77 	add	r1, sp, #1904	; 0x770
 100bee0:	e2800004 	add	r0, r0, #4
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bee4:	e284ae7b 	add	sl, r4, #1968	; 0x7b0
		d_read_global_timer(&lsb, &msb);
 100bee8:	eb000da7 	bl	100f58c <d_read_global_timer>
		timer_value = (((uint64_t)msb) << 32) | lsb;
 100beec:	e59d3774 	ldr	r3, [sp, #1908]	; 0x774
 100bef0:	e2849e7e 	add	r9, r4, #2016	; 0x7e0
		time_delta = timer_value - g_acq_state.last_debug_timer;
 100bef4:	e5970000 	ldr	r0, [r7]
		timer_value = (((uint64_t)msb) << 32) | lsb;
 100bef8:	e59d2770 	ldr	r2, [sp, #1904]	; 0x770
		time_delta = timer_value - g_acq_state.last_debug_timer;
 100befc:	e5971004 	ldr	r1, [r7, #4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bf00:	e0530000 	subs	r0, r3, r0
		timer_value = (((uint64_t)msb) << 32) | lsb;
 100bf04:	e58d3758 	str	r3, [sp, #1880]	; 0x758
 100bf08:	e58d275c 	str	r2, [sp, #1884]	; 0x75c
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bf0c:	e0c21001 	sbc	r1, r2, r1
 100bf10:	fa003e0a 	blx	101b740 <__aeabi_ul2d>
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bf14:	e51ac008 	ldr	ip, [sl, #-8]
 100bf18:	e5943818 	ldr	r3, [r4, #2072]	; 0x818
 100bf1c:	e594281c 	ldr	r2, [r4, #2076]	; 0x81c
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bf20:	ec410b31 	vmov	d17, r0, r1
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bf24:	e51a1004 	ldr	r1, [sl, #-4]
 100bf28:	e05c3003 	subs	r3, ip, r3
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bf2c:	eddf0b47 	vldr	d16, [pc, #284]	; 100c050 <acq_debug_dump+0x67c>
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bf30:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 100bf34:	e0c13002 	sbc	r3, r1, r2
 100bf38:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
		if(acq_delta > 0) {
 100bf3c:	e28d3d1d 	add	r3, sp, #1856	; 0x740
 100bf40:	e2833008 	add	r3, r3, #8
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bf44:	ee610ba0 	vmul.f64	d16, d17, d16
		if(acq_delta > 0) {
 100bf48:	e1c320d0 	ldrd	r2, [r3]
 100bf4c:	e1923003 	orrs	r3, r2, r3
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bf50:	eeb78be0 	vcvt.f32.f64	s16, d16
		if(acq_delta > 0) {
 100bf54:	1a00001d 	bne	100bfd0 <acq_debug_dump+0x5fc>
 100bf58:	e5992000 	ldr	r2, [r9]
 100bf5c:	e5943850 	ldr	r3, [r4, #2128]	; 0x850
 100bf60:	e5941854 	ldr	r1, [r4, #2132]	; 0x854
 100bf64:	e5990004 	ldr	r0, [r9, #4]
 100bf68:	e0523003 	subs	r3, r2, r3
 100bf6c:	e58d3760 	str	r3, [sp, #1888]	; 0x760
 100bf70:	e0c03001 	sbc	r3, r0, r1
 100bf74:	e58d3764 	str	r3, [sp, #1892]	; 0x764
		if(sample_delta > 0) {
 100bf78:	e28d3e76 	add	r3, sp, #1888	; 0x760
 100bf7c:	e1c320d0 	ldrd	r2, [r3]
 100bf80:	e1923003 	orrs	r3, r2, r3
 100bf84:	0a00002d 	beq	100c040 <acq_debug_dump+0x66c>
			if(time_delta_us > 0) {
 100bf88:	eeb58ac0 	vcmpe.f32	s16, #0.0
 100bf8c:	e3a03000 	mov	r3, #0
 100bf90:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100bf94:	d58d3748 	strle	r3, [sp, #1864]	; 0x748
 100bf98:	d58d3754 	strle	r3, [sp, #1876]	; 0x754
 100bf9c:	dafffe9c 	ble	100ba14 <acq_debug_dump+0x40>
 100bfa0:	e58d3754 	str	r3, [sp, #1876]	; 0x754
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
 100bfa4:	e28d3e76 	add	r3, sp, #1888	; 0x760
 100bfa8:	e1c300d0 	ldrd	r0, [r3]
 100bfac:	fa003e62 	blx	101b93c <__aeabi_ul2f>
 100bfb0:	ee070a90 	vmov	s15, r0
 100bfb4:	ed9f7a27 	vldr	s14, [pc, #156]	; 100c058 <acq_debug_dump+0x684>
 100bfb8:	eec77a88 	vdiv.f32	s15, s15, s16
 100bfbc:	ee677a87 	vmul.f32	s15, s15, s14
 100bfc0:	eefd7ae7 	vcvt.s32.f32	s15, s15
 100bfc4:	ee173a90 	vmov	r3, s15
 100bfc8:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 100bfcc:	eafffe90 	b	100ba14 <acq_debug_dump+0x40>
			if(time_delta_us > 0) {
 100bfd0:	e5990000 	ldr	r0, [r9]
 100bfd4:	e5943850 	ldr	r3, [r4, #2128]	; 0x850
 100bfd8:	e5942854 	ldr	r2, [r4, #2132]	; 0x854
 100bfdc:	e5991004 	ldr	r1, [r9, #4]
 100bfe0:	e0503003 	subs	r3, r0, r3
 100bfe4:	eeb58ac0 	vcmpe.f32	s16, #0.0
 100bfe8:	e58d3760 	str	r3, [sp, #1888]	; 0x760
 100bfec:	e0c13002 	sbc	r3, r1, r2
 100bff0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100bff4:	e58d3764 	str	r3, [sp, #1892]	; 0x764
 100bff8:	daffffde 	ble	100bf78 <acq_debug_dump+0x5a4>
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100bffc:	e28d3d1d 	add	r3, sp, #1856	; 0x740
 100c000:	e2833008 	add	r3, r3, #8
 100c004:	e1c300d0 	ldrd	r0, [r3]
 100c008:	fa003e4b 	blx	101b93c <__aeabi_ul2f>
 100c00c:	ee070a90 	vmov	s15, r0
		if(sample_delta > 0) {
 100c010:	e28d3e76 	add	r3, sp, #1888	; 0x760
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100c014:	ed9f7a10 	vldr	s14, [pc, #64]	; 100c05c <acq_debug_dump+0x688>
 100c018:	eec77a88 	vdiv.f32	s15, s15, s16
		if(sample_delta > 0) {
 100c01c:	e1c320d0 	ldrd	r2, [r3]
 100c020:	e1923003 	orrs	r3, r2, r3
 100c024:	058d5748 	streq	r5, [sp, #1864]	; 0x748
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100c028:	ee677a87 	vmul.f32	s15, s15, s14
 100c02c:	eefd7ae7 	vcvt.s32.f32	s15, s15
 100c030:	ee173a90 	vmov	r3, s15
 100c034:	e58d3754 	str	r3, [sp, #1876]	; 0x754
		if(sample_delta > 0) {
 100c038:	1affffd9 	bne	100bfa4 <acq_debug_dump+0x5d0>
 100c03c:	eafffe74 	b	100ba14 <acq_debug_dump+0x40>
 100c040:	e3a03000 	mov	r3, #0
 100c044:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 100c048:	e58d3754 	str	r3, [sp, #1876]	; 0x754
 100c04c:	eafffe70 	b	100ba14 <acq_debug_dump+0x40>
 100c050:	a17f0000 	.word	0xa17f0000
 100c054:	3f689374 	.word	0x3f689374
 100c058:	447a0000 	.word	0x447a0000
 100c05c:	49742400 	.word	0x49742400
 100c060:	010752e0 	.word	0x010752e0
 100c064:	01075ac8 	.word	0x01075ac8

0100c068 <_acq_irq_rx_handler>:
	irq_status = XAxiDma_BdRingGetIrq(bd_ring);
 100c068:	e5902000 	ldr	r2, [r0]
{
 100c06c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
		XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100c070:	e30542d8 	movw	r4, #21208	; 0x52d8
{
 100c074:	e24dd014 	sub	sp, sp, #20
	irq_status = XAxiDma_BdRingGetIrq(bd_ring);
 100c078:	e2821004 	add	r1, r2, #4
 100c07c:	e5923004 	ldr	r3, [r2, #4]
	if(irq_status & XAXIDMA_IRQ_ERROR_MASK) {
 100c080:	e3130901 	tst	r3, #16384	; 0x4000
	irq_status = XAxiDma_BdRingGetIrq(bd_ring);
 100c084:	e2036a07 	and	r6, r3, #28672	; 0x7000
	*LocalAddr = Value;
 100c088:	13a0c901 	movne	ip, #16384	; 0x4000
		XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100c08c:	13404107 	movtne	r4, #263	; 0x107
 100c090:	1582c004 	strne	ip, [r2, #4]
 100c094:	13a0ea07 	movne	lr, #28672	; 0x7000
 100c098:	1594c008 	ldrne	ip, [r4, #8]
 100c09c:	03404107 	movteq	r4, #263	; 0x107
 100c0a0:	158ce004 	strne	lr, [ip, #4]
	if(irq_status & XAXIDMA_IRQ_IOC_MASK) {
 100c0a4:	e3130a01 	tst	r3, #4096	; 0x1000
 100c0a8:	0a000041 	beq	100c1b4 <_acq_irq_rx_handler+0x14c>
		switch(g_acq_state.sub_state) {
 100c0ac:	e5943004 	ldr	r3, [r4, #4]
 100c0b0:	e1a05000 	mov	r5, r0
 100c0b4:	e3530003 	cmp	r3, #3
 100c0b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100c0bc:	ea00003c 	b	100c1b4 <_acq_irq_rx_handler+0x14c>
 100c0c0:	0100c1cc 	.word	0x0100c1cc
 100c0c4:	0100c1e8 	.word	0x0100c1e8
 100c0c8:	0100c2c8 	.word	0x0100c2c8
 100c0cc:	0100c0d0 	.word	0x0100c0d0
				if(!g_acq_state.acq_early_abort && !fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) {
 100c0d0:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c0d4:	e3130001 	tst	r3, #1
 100c0d8:	1a000004 	bne	100c0f0 <_acq_irq_rx_handler+0x88>
	res = _FAB_CFG_ACCESS(reg);
 100c0dc:	e3a08000 	mov	r8, #0
 100c0e0:	e34483c0 	movt	r8, #17344	; 0x43c0
 100c0e4:	e5983058 	ldr	r3, [r8, #88]	; 0x58
 100c0e8:	e2137001 	ands	r7, r3, #1
 100c0ec:	0a000145 	beq	100c608 <_acq_irq_rx_handler+0x5a0>
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100c0f0:	e5940780 	ldr	r0, [r4, #1920]	; 0x780
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 100c0f4:	e3a09004 	mov	r9, #4
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100c0f8:	e59f772c 	ldr	r7, [pc, #1836]	; 100c82c <_acq_irq_rx_handler+0x7c4>
	_FAB_CFG_ACCESS(reg) = data;
 100c0fc:	e3a08000 	mov	r8, #0
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100c100:	e594c884 	ldr	ip, [r4, #2180]	; 0x884
 100c104:	e34483c0 	movt	r8, #17344	; 0x43c0
 100c108:	e3c03802 	bic	r3, r0, #131072	; 0x20000
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100c10c:	e3a0a000 	mov	sl, #0
 100c110:	e3c33003 	bic	r3, r3, #3
 100c114:	e5972000 	ldr	r2, [r7]
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100c118:	e1833009 	orr	r3, r3, r9
 100c11c:	e597b004 	ldr	fp, [r7, #4]
 100c120:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c124:	e5883050 	str	r3, [r8, #80]	; 0x50
 100c128:	e594e768 	ldr	lr, [r4, #1896]	; 0x768
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100c12c:	e1dc11b0 	ldrh	r1, [ip, #16]
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 100c130:	e5849004 	str	r9, [r4, #4]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100c134:	e092200e 	adds	r2, r2, lr
				g_acq_state.state = ACQSTATE_RUNNING;
 100c138:	e5849000 	str	r9, [r4]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100c13c:	e0abb00a 	adc	fp, fp, sl
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100c140:	e3813001 	orr	r3, r1, #1
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 100c144:	e2111002 	ands	r1, r1, #2
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100c148:	e8870804 	stm	r7, {r2, fp}
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100c14c:	e1cc31b0 	strh	r3, [ip, #16]
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 100c150:	1a0000e6 	bne	100c4f0 <_acq_irq_rx_handler+0x488>
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100c154:	e5173008 	ldr	r3, [r7, #-8]
					g_acq_state.num_acq_made++;
 100c158:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100c15c:	e517b004 	ldr	fp, [r7, #-4]
 100c160:	e093e00e 	adds	lr, r3, lr
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 100c164:	e5943774 	ldr	r3, [r4, #1908]	; 0x774
					g_acq_state.num_acq_made++;
 100c168:	e2822001 	add	r2, r2, #1
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100c16c:	e507e008 	str	lr, [r7, #-8]
 100c170:	e0aba00a 	adc	sl, fp, sl
					g_acq_state.num_acq_made++;
 100c174:	e5842778 	str	r2, [r4, #1912]	; 0x778
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 100c178:	e1520003 	cmp	r2, r3
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100c17c:	e507a004 	str	sl, [r7, #-4]
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 100c180:	3a000179 	bcc	100c76c <_acq_irq_rx_handler+0x704>
						g_acq_state.state = ACQSTATE_DONE;
 100c184:	e3a02005 	mov	r2, #5
 100c188:	e3a03005 	mov	r3, #5
 100c18c:	e1c420f0 	strd	r2, [r4]
				g_acq_state.stats.num_post_total++;
 100c190:	e59f2698 	ldr	r2, [pc, #1688]	; 100c830 <_acq_irq_rx_handler+0x7c8>
 100c194:	e5951000 	ldr	r1, [r5]
 100c198:	e5923000 	ldr	r3, [r2]
 100c19c:	e5920004 	ldr	r0, [r2, #4]
 100c1a0:	e2811004 	add	r1, r1, #4
 100c1a4:	e2933001 	adds	r3, r3, #1
 100c1a8:	e2a00000 	adc	r0, r0, #0
 100c1ac:	e5823000 	str	r3, [r2]
 100c1b0:	e5820004 	str	r0, [r2, #4]
		XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100c1b4:	e5943008 	ldr	r3, [r4, #8]
 100c1b8:	e3a02a07 	mov	r2, #28672	; 0x7000
 100c1bc:	e5816000 	str	r6, [r1]
 100c1c0:	e5832004 	str	r2, [r3, #4]
}
 100c1c4:	e28dd014 	add	sp, sp, #20
 100c1c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				d_printf(D_RAW, "IRQ_none!");
 100c1cc:	e3091244 	movw	r1, #37444	; 0x9244
 100c1d0:	e3a00000 	mov	r0, #0
 100c1d4:	e3401106 	movt	r1, #262	; 0x106
 100c1d8:	eb000c62 	bl	100f368 <d_printf>
	if(!irq_ackd) {
 100c1dc:	e5951000 	ldr	r1, [r5]
 100c1e0:	e2811004 	add	r1, r1, #4
 100c1e4:	eafffff2 	b	100c1b4 <_acq_irq_rx_handler+0x14c>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c1e8:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c1ec:	e3a07000 	mov	r7, #0
 100c1f0:	e34473c0 	movt	r7, #17344	; 0x43c0
 100c1f4:	e5940008 	ldr	r0, [r4, #8]
 100c1f8:	e3c31802 	bic	r1, r3, #131072	; 0x20000
 100c1fc:	e3c11012 	bic	r1, r1, #18
 100c200:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100c204:	e5871050 	str	r1, [r7, #80]	; 0x50
				if(g_acq_state.acq_early_abort) {
 100c208:	e5d41760 	ldrb	r1, [r4, #1888]	; 0x760
 100c20c:	e3110001 	tst	r1, #1
 100c210:	0a00009a 	beq	100c480 <_acq_irq_rx_handler+0x418>
					g_acq_state.acq_early_abort = 0;
 100c214:	e3c11003 	bic	r1, r1, #3
 100c218:	e3c33b82 	bic	r3, r3, #133120	; 0x20800
 100c21c:	e3811002 	orr	r1, r1, #2
 100c220:	e3c33012 	bic	r3, r3, #18
 100c224:	e5c41760 	strb	r1, [r4, #1888]	; 0x760
					g_acq_state.sub_state = ACQSUBST_NONE;
 100c228:	e3a0c000 	mov	ip, #0
				XAxiDma_BdRingAckIrq(bd_ring, irq_status);
 100c22c:	e5951000 	ldr	r1, [r5]
 100c230:	e3a02a07 	mov	r2, #28672	; 0x7000
 100c234:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c238:	e5873050 	str	r3, [r7, #80]	; 0x50
					g_acq_state.sub_state = ACQSUBST_NONE;
 100c23c:	e584c004 	str	ip, [r4, #4]
 100c240:	e5816004 	str	r6, [r1, #4]
 100c244:	e5802004 	str	r2, [r0, #4]
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c248:	e59f35dc 	ldr	r3, [pc, #1500]	; 100c82c <_acq_irq_rx_handler+0x7c4>
 100c24c:	e3a05000 	mov	r5, #0
 100c250:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 100c254:	e9134001 	ldmdb	r3, {r0, lr}
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c258:	e5931000 	ldr	r1, [r3]
 100c25c:	e593c004 	ldr	ip, [r3, #4]
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c260:	e0900002 	adds	r0, r0, r2
 100c264:	e0aee005 	adc	lr, lr, r5
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c268:	e0912002 	adds	r2, r1, r2
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c26c:	e5030008 	str	r0, [r3, #-8]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c270:	e1a00002 	mov	r0, r2
 100c274:	e0ac2005 	adc	r2, ip, r5
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c278:	e503e004 	str	lr, [r3, #-4]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c27c:	e1a01002 	mov	r1, r2
				g_acq_state.stats.num_pre_fill_total++;
 100c280:	e243c020 	sub	ip, r3, #32
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c284:	e04303f0 	strd	r0, [r3], #-48	; 0xffffffd0
				g_acq_state.stats.num_acq_total++;
 100c288:	e9130024 	ldmdb	r3, {r2, r5}
				g_acq_state.stats.num_pre_total++;
 100c28c:	e8930012 	ldm	r3, {r1, r4}
				g_acq_state.stats.num_pre_fill_total++;
 100c290:	e51ce004 	ldr	lr, [ip, #-4]
				g_acq_state.stats.num_acq_total++;
 100c294:	e2920001 	adds	r0, r2, #1
				g_acq_state.stats.num_pre_fill_total++;
 100c298:	e51c2008 	ldr	r2, [ip, #-8]
				g_acq_state.stats.num_acq_total++;
 100c29c:	e2a55000 	adc	r5, r5, #0
				g_acq_state.stats.num_pre_total++;
 100c2a0:	e2911001 	adds	r1, r1, #1
 100c2a4:	e2a44000 	adc	r4, r4, #0
				g_acq_state.stats.num_acq_total++;
 100c2a8:	e5030008 	str	r0, [r3, #-8]
				g_acq_state.stats.num_pre_fill_total++;
 100c2ac:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 100c2b0:	e5035004 	str	r5, [r3, #-4]
				g_acq_state.stats.num_pre_fill_total++;
 100c2b4:	e2ae0000 	adc	r0, lr, #0
				g_acq_state.stats.num_pre_total++;
 100c2b8:	e8830012 	stm	r3, {r1, r4}
				g_acq_state.stats.num_pre_fill_total++;
 100c2bc:	e50c2008 	str	r2, [ip, #-8]
 100c2c0:	e50c0004 	str	r0, [ip, #-4]
	if(!irq_ackd) {
 100c2c4:	eaffffbe 	b	100c1c4 <_acq_irq_rx_handler+0x15c>
	res = _FAB_CFG_ACCESS(reg);
 100c2c8:	e3a07000 	mov	r7, #0
 100c2cc:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c2d0:	e34473c0 	movt	r7, #17344	; 0x43c0
 100c2d4:	e5971058 	ldr	r1, [r7, #88]	; 0x58
	return res;
 100c2d8:	e3c33002 	bic	r3, r3, #2
				acq_status_a = fabcfg_read(FAB_CFG_ACQ_STATUS_A);
 100c2dc:	e58d100c 	str	r1, [sp, #12]
				if(acq_status_a & ACQ_STATUS_A_HAVE_TRIG) {
 100c2e0:	e59d100c 	ldr	r1, [sp, #12]
 100c2e4:	e3110002 	tst	r1, #2
 100c2e8:	0a000033 	beq	100c3bc <_acq_irq_rx_handler+0x354>
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100c2ec:	e3833010 	orr	r3, r3, #16
 100c2f0:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
 100c2f4:	e5843780 	str	r3, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c2f8:	e5873050 	str	r3, [r7, #80]	; 0x50
					if(COND_UNLIKELY(acq_status_a & ACQ_STATUS_A_DATA_LOSS)) {
 100c2fc:	e59d300c 	ldr	r3, [sp, #12]
 100c300:	e3130004 	tst	r3, #4
 100c304:	1a0000dc 	bne	100c67c <_acq_irq_rx_handler+0x614>
					XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100c308:	e5943008 	ldr	r3, [r4, #8]
 100c30c:	e3a00a07 	mov	r0, #28672	; 0x7000
 100c310:	e5826004 	str	r6, [r2, #4]
 100c314:	e5830004 	str	r0, [r3, #4]
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c318:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c31c:	e7a02053 	sbfx	r2, r3, #0, #1
 100c320:	e31200ff 	tst	r2, #255	; 0xff
 100c324:	1a000102 	bne	100c734 <_acq_irq_rx_handler+0x6cc>
						addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 100c328:	e5913008 	ldr	r3, [r1, #8]
	res = _FAB_CFG_ACCESS(reg);
 100c32c:	e3a02000 	mov	r2, #0
 100c330:	e594e764 	ldr	lr, [r4, #1892]	; 0x764
 100c334:	e34423c0 	movt	r2, #17344	; 0x43c0
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c338:	e5940088 	ldr	r0, [r4, #136]	; 0x88
						g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 100c33c:	e3a0c003 	mov	ip, #3
						addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 100c340:	e083300e 	add	r3, r3, lr
						_acq_fast_dma_start((uint32_t*)addr, g_acq_state.post_buffsz);
 100c344:	e594e768 	ldr	lr, [r4, #1896]	; 0x768
 100c348:	e5803018 	str	r3, [r0, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100c34c:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 100c350:	e3833001 	orr	r3, r3, #1
 100c354:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100c358:	e5803000 	str	r3, [r0]
 100c35c:	e580e028 	str	lr, [r0, #40]	; 0x28
	g_acq_state.acq_ctrl_a |= bitmask;
 100c360:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c364:	e5920048 	ldr	r0, [r2, #72]	; 0x48
 100c368:	e3833802 	orr	r3, r3, #131072	; 0x20000
 100c36c:	e3833006 	orr	r3, r3, #6
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 100c370:	e581000c 	str	r0, [r1, #12]
 100c374:	e5843780 	str	r3, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c378:	e5823050 	str	r3, [r2, #80]	; 0x50
						g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 100c37c:	e591200c 	ldr	r2, [r1, #12]
 100c380:	e584c004 	str	ip, [r4, #4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100c384:	e59f34a0 	ldr	r3, [pc, #1184]	; 100c82c <_acq_irq_rx_handler+0x7c4>
 100c388:	e3a04000 	mov	r4, #0
 100c38c:	e8934001 	ldm	r3, {r0, lr}
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100c390:	e5131008 	ldr	r1, [r3, #-8]
 100c394:	e513c004 	ldr	ip, [r3, #-4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100c398:	e0900002 	adds	r0, r0, r2
 100c39c:	e0aee004 	adc	lr, lr, r4
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100c3a0:	e0912002 	adds	r2, r1, r2
 100c3a4:	e0ac1004 	adc	r1, ip, r4
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100c3a8:	e5830000 	str	r0, [r3]
 100c3ac:	e583e004 	str	lr, [r3, #4]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100c3b0:	e5032008 	str	r2, [r3, #-8]
 100c3b4:	e5031004 	str	r1, [r3, #-4]
 100c3b8:	ea000023 	b	100c44c <_acq_irq_rx_handler+0x3e4>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c3bc:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c3c0:	e5873050 	str	r3, [r7, #80]	; 0x50
					if(COND_UNLIKELY(acq_status_a & ACQ_STATUS_A_DATA_LOSS)) {
 100c3c4:	e59d200c 	ldr	r2, [sp, #12]
 100c3c8:	e3120004 	tst	r2, #4
 100c3cc:	1a0000c3 	bne	100c6e0 <_acq_irq_rx_handler+0x678>
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c3d0:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c3d4:	e5940008 	ldr	r0, [r4, #8]
 100c3d8:	e7a02053 	sbfx	r2, r3, #0, #1
 100c3dc:	e31200ff 	tst	r2, #255	; 0xff
 100c3e0:	1a0000ae 	bne	100c6a0 <_acq_irq_rx_handler+0x638>
						_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c3e4:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
 100c3e8:	e3a0ca07 	mov	ip, #28672	; 0x7000
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c3ec:	e5942088 	ldr	r2, [r4, #136]	; 0x88
 100c3f0:	e3a01000 	mov	r1, #0
					XAxiDma_BdRingAckIrq(bd_ring, irq_status);
 100c3f4:	e595e000 	ldr	lr, [r5]
 100c3f8:	e34413c0 	movt	r1, #17344	; 0x43c0
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c3fc:	e5933008 	ldr	r3, [r3, #8]
						_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c400:	e5947764 	ldr	r7, [r4, #1892]	; 0x764
 100c404:	e5823018 	str	r3, [r2, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100c408:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 100c40c:	e3833001 	orr	r3, r3, #1
 100c410:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100c414:	e5823000 	str	r3, [r2]
 100c418:	e5827028 	str	r7, [r2, #40]	; 0x28
 100c41c:	e58e6004 	str	r6, [lr, #4]
 100c420:	e580c004 	str	ip, [r0, #4]
	g_acq_state.acq_ctrl_a |= bitmask;
 100c424:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c428:	e3833002 	orr	r3, r3, #2
 100c42c:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c430:	e5813050 	str	r3, [r1, #80]	; 0x50
					g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c434:	e59f13f0 	ldr	r1, [pc, #1008]	; 100c82c <_acq_irq_rx_handler+0x7c4>
 100c438:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
 100c43c:	e1c120d0 	ldrd	r2, [r1]
 100c440:	e0924000 	adds	r4, r2, r0
 100c444:	e2a35000 	adc	r5, r3, #0
 100c448:	e1c140f0 	strd	r4, [r1]
				g_acq_state.stats.num_acq_total++;
 100c44c:	e59f33e0 	ldr	r3, [pc, #992]	; 100c834 <_acq_irq_rx_handler+0x7cc>
 100c450:	e9131002 	ldmdb	r3, {r1, ip}
				g_acq_state.stats.num_pre_total++;
 100c454:	e5932000 	ldr	r2, [r3]
 100c458:	e5930004 	ldr	r0, [r3, #4]
				g_acq_state.stats.num_acq_total++;
 100c45c:	e2911001 	adds	r1, r1, #1
 100c460:	e2acc000 	adc	ip, ip, #0
				g_acq_state.stats.num_pre_total++;
 100c464:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 100c468:	e5031008 	str	r1, [r3, #-8]
				g_acq_state.stats.num_pre_total++;
 100c46c:	e2a01000 	adc	r1, r0, #0
				g_acq_state.stats.num_acq_total++;
 100c470:	e503c004 	str	ip, [r3, #-4]
				g_acq_state.stats.num_pre_total++;
 100c474:	e5832000 	str	r2, [r3]
 100c478:	e5831004 	str	r1, [r3, #4]
	if(!irq_ackd) {
 100c47c:	eaffff50 	b	100c1c4 <_acq_irq_rx_handler+0x15c>
					_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c480:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c484:	e300c75c 	movw	ip, #1884	; 0x75c
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c488:	e5941088 	ldr	r1, [r4, #136]	; 0x88
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c48c:	e194c0bc 	ldrh	ip, [r4, ip]
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c490:	e5933008 	ldr	r3, [r3, #8]
					_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c494:	e594e764 	ldr	lr, [r4, #1892]	; 0x764
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c498:	e31c0b01 	tst	ip, #1024	; 0x400
 100c49c:	e3a0ca07 	mov	ip, #28672	; 0x7000
 100c4a0:	e5813018 	str	r3, [r1, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100c4a4:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 100c4a8:	e3833001 	orr	r3, r3, #1
 100c4ac:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100c4b0:	e5813000 	str	r3, [r1]
 100c4b4:	e581e028 	str	lr, [r1, #40]	; 0x28
 100c4b8:	e5826004 	str	r6, [r2, #4]
 100c4bc:	e580c004 	str	ip, [r0, #4]
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c4c0:	0a000038 	beq	100c5a8 <_acq_irq_rx_handler+0x540>
						g_acq_state.state = ACQSTATE_WAIT_TRIG;
 100c4c4:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c4c8:	e3a00003 	mov	r0, #3
 100c4cc:	e3a01002 	mov	r1, #2
 100c4d0:	e1c400f0 	strd	r0, [r4]
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100c4d4:	e3c33024 	bic	r3, r3, #36	; 0x24
 100c4d8:	e3a02000 	mov	r2, #0
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100c4dc:	e3833002 	orr	r3, r3, #2
 100c4e0:	e34423c0 	movt	r2, #17344	; 0x43c0
 100c4e4:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c4e8:	e5823050 	str	r3, [r2, #80]	; 0x50
 100c4ec:	eaffff55 	b	100c248 <_acq_irq_rx_handler+0x1e0>
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c4f0:	e5d4c760 	ldrb	ip, [r4, #1888]	; 0x760
					g_acq_state.stats.num_fifo_pkt_dscd++;
 100c4f4:	e5973028 	ldr	r3, [r7, #40]	; 0x28
 100c4f8:	e597102c 	ldr	r1, [r7, #44]	; 0x2c
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c4fc:	e7a0a05c 	sbfx	sl, ip, #0, #1
 100c500:	e6afa07a 	sxtb	sl, sl
					g_acq_state.stats.num_fifo_pkt_dscd++;
 100c504:	e2933001 	adds	r3, r3, #1
 100c508:	e2a11000 	adc	r1, r1, #0
 100c50c:	e5873028 	str	r3, [r7, #40]	; 0x28
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c510:	e35a0000 	cmp	sl, #0
					g_acq_state.stats.num_fifo_pkt_dscd++;
 100c514:	e587102c 	str	r1, [r7, #44]	; 0x2c
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c518:	1a0000b2 	bne	100c7e8 <_acq_irq_rx_handler+0x780>
						error = acq_start(ACQ_START_FIFO_RESET);
 100c51c:	e3a00001 	mov	r0, #1
 100c520:	ebfffc7b 	bl	100b714 <acq_start>
						if(error != ACQRES_OK) {
 100c524:	e2502000 	subs	r2, r0, #0
 100c528:	0affff18 	beq	100c190 <_acq_irq_rx_handler+0x128>
							d_printf(D_ERROR, "acquire: unable to reset current transfer, error %d", error);
 100c52c:	e3091174 	movw	r1, #37236	; 0x9174
 100c530:	e1a00009 	mov	r0, r9
 100c534:	e3401106 	movt	r1, #262	; 0x106
 100c538:	eb000b8a 	bl	100f368 <d_printf>
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100c53c:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c540:	e30811d0 	movw	r1, #33232	; 0x81d0
 100c544:	e1a00009 	mov	r0, r9
 100c548:	e3401106 	movt	r1, #262	; 0x106
 100c54c:	e3a02005 	mov	r2, #5
	return *(volatile u32 *) Addr;
 100c550:	e59c3004 	ldr	r3, [ip, #4]
	g_acq_state.stats.num_err_total++;
 100c554:	e2477010 	sub	r7, r7, #16
 100c558:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c55c:	e58dc000 	str	ip, [sp]
 100c560:	eb000b80 	bl	100f368 <d_printf>
	g_acq_state.stats.num_err_total++;
 100c564:	e5173008 	ldr	r3, [r7, #-8]
	g_acq_state.state = ACQSTATE_ERROR;
 100c568:	e3a0c006 	mov	ip, #6
	g_acq_state.acq_ctrl_a |= bitmask;
 100c56c:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
	g_acq_state.stats.num_err_total++;
 100c570:	e5171004 	ldr	r1, [r7, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 100c574:	e59f02bc 	ldr	r0, [pc, #700]	; 100c838 <_acq_irq_rx_handler+0x7d0>
	g_acq_state.stats.num_err_total++;
 100c578:	e2933001 	adds	r3, r3, #1
 100c57c:	e3822008 	orr	r2, r2, #8
 100c580:	e2a11000 	adc	r1, r1, #0
 100c584:	e5842780 	str	r2, [r4, #1920]	; 0x780
 100c588:	e5882050 	str	r2, [r8, #80]	; 0x50
 100c58c:	e5073008 	str	r3, [r7, #-8]
	g_acq_state.sub_state = ACQSUBST_NONE;
 100c590:	e584a004 	str	sl, [r4, #4]
	g_acq_state.stats.num_err_total++;
 100c594:	e5071004 	str	r1, [r7, #-4]
	g_acq_state.state = ACQSTATE_ERROR;
 100c598:	e584c000 	str	ip, [r4]
}
 100c59c:	e28dd014 	add	sp, sp, #20
 100c5a0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	XAxiDma_Reset(&g_acq_state.dma);
 100c5a4:	ea001dcc 	b	1013cdc <XAxiDma_Reset>
	res = _FAB_CFG_ACCESS(reg);
 100c5a8:	e5972058 	ldr	r2, [r7, #88]	; 0x58
	return res & mask;
 100c5ac:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
						if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DATA_LOSS)) {
 100c5b0:	e3120004 	tst	r2, #4
 100c5b4:	0affffc3 	beq	100c4c8 <_acq_irq_rx_handler+0x460>
 100c5b8:	e3833020 	orr	r3, r3, #32
	bogo_delay(10);
 100c5bc:	e3a0000a 	mov	r0, #10
 100c5c0:	e5843780 	str	r3, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c5c4:	e5873050 	str	r3, [r7, #80]	; 0x50
 100c5c8:	eb000b4d 	bl	100f304 <bogo_delay>
							g_acq_state.stats.num_fifo_full++;
 100c5cc:	e59f1268 	ldr	r1, [pc, #616]	; 100c83c <_acq_irq_rx_handler+0x7d4>
							g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;
 100c5d0:	e3a0e001 	mov	lr, #1
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c5d4:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
							g_acq_state.state = ACQSTATE_PREP;
 100c5d8:	e3a0c002 	mov	ip, #2
							g_acq_state.stats.num_fifo_full++;
 100c5dc:	e5912000 	ldr	r2, [r1]
 100c5e0:	e5910004 	ldr	r0, [r1, #4]
 100c5e4:	e3c33020 	bic	r3, r3, #32
 100c5e8:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c5ec:	e092200e 	adds	r2, r2, lr
 100c5f0:	e5873050 	str	r3, [r7, #80]	; 0x50
 100c5f4:	e2a00000 	adc	r0, r0, #0
 100c5f8:	e5812000 	str	r2, [r1]
 100c5fc:	e5810004 	str	r0, [r1, #4]
							g_acq_state.state = ACQSTATE_PREP;
 100c600:	e8845000 	stm	r4, {ip, lr}
							g_acq_state.stats.num_fifo_full++;
 100c604:	eaffffb2 	b	100c4d4 <_acq_irq_rx_handler+0x46c>
					d_printf(D_ERROR, "acquire: PL reports not done, but DMA complete! (0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_A));
 100c608:	e3091138 	movw	r1, #37176	; 0x9138
	res = _FAB_CFG_ACCESS(reg);
 100c60c:	e5982058 	ldr	r2, [r8, #88]	; 0x58
 100c610:	e3401106 	movt	r1, #262	; 0x106
 100c614:	e3a00004 	mov	r0, #4
 100c618:	eb000b52 	bl	100f368 <d_printf>
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100c61c:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c620:	e3a02004 	mov	r2, #4
 100c624:	e30811d0 	movw	r1, #33232	; 0x81d0
 100c628:	e1a00002 	mov	r0, r2
 100c62c:	e3401106 	movt	r1, #262	; 0x106
 100c630:	e59c3004 	ldr	r3, [ip, #4]
 100c634:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
 100c638:	e58dc000 	str	ip, [sp]
 100c63c:	eb000b49 	bl	100f368 <d_printf>
	g_acq_state.stats.num_err_total++;
 100c640:	e59f21f8 	ldr	r2, [pc, #504]	; 100c840 <_acq_irq_rx_handler+0x7d8>
	g_acq_state.state = ACQSTATE_ERROR;
 100c644:	e3a0e006 	mov	lr, #6
	g_acq_state.acq_ctrl_a |= bitmask;
 100c648:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
	XAxiDma_Reset(&g_acq_state.dma);
 100c64c:	e59f01e4 	ldr	r0, [pc, #484]	; 100c838 <_acq_irq_rx_handler+0x7d0>
	g_acq_state.stats.num_err_total++;
 100c650:	e9121008 	ldmdb	r2, {r3, ip}
 100c654:	e3811008 	orr	r1, r1, #8
 100c658:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100c65c:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) = data;
 100c660:	e5881050 	str	r1, [r8, #80]	; 0x50
 100c664:	e2ac1000 	adc	r1, ip, #0
 100c668:	e5023008 	str	r3, [r2, #-8]
	g_acq_state.sub_state = ACQSUBST_NONE;
 100c66c:	e5847004 	str	r7, [r4, #4]
	g_acq_state.stats.num_err_total++;
 100c670:	e5021004 	str	r1, [r2, #-4]
	g_acq_state.state = ACQSTATE_ERROR;
 100c674:	e584e000 	str	lr, [r4]
	XAxiDma_Reset(&g_acq_state.dma);
 100c678:	eaffffc7 	b	100c59c <_acq_irq_rx_handler+0x534>
						g_acq_state.stats.num_fifo_full++;
 100c67c:	e59f01b8 	ldr	r0, [pc, #440]	; 100c83c <_acq_irq_rx_handler+0x7d4>
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c680:	e1d1e1b0 	ldrh	lr, [r1, #16]
						g_acq_state.stats.num_fifo_full++;
 100c684:	e8901008 	ldm	r0, {r3, ip}
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c688:	e38ee002 	orr	lr, lr, #2
 100c68c:	e1c1e1b0 	strh	lr, [r1, #16]
						g_acq_state.stats.num_fifo_full++;
 100c690:	e2933001 	adds	r3, r3, #1
 100c694:	e2acc000 	adc	ip, ip, #0
 100c698:	e8801008 	stm	r0, {r3, ip}
 100c69c:	eaffff19 	b	100c308 <_acq_irq_rx_handler+0x2a0>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c6a0:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
						g_acq_state.acq_early_abort = 0;
 100c6a4:	e3c33003 	bic	r3, r3, #3
 100c6a8:	e3833002 	orr	r3, r3, #2
 100c6ac:	e3a01000 	mov	r1, #0
 100c6b0:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c6b4:	e34413c0 	movt	r1, #17344	; 0x43c0
					XAxiDma_BdRingAckIrq(bd_ring, irq_status);
 100c6b8:	e595c000 	ldr	ip, [r5]
 100c6bc:	e3c23b02 	bic	r3, r2, #2048	; 0x800
 100c6c0:	e5843780 	str	r3, [r4, #1920]	; 0x780
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c6c4:	e3a02000 	mov	r2, #0
 100c6c8:	e5813050 	str	r3, [r1, #80]	; 0x50
	*LocalAddr = Value;
 100c6cc:	e3a03a07 	mov	r3, #28672	; 0x7000
 100c6d0:	e5842004 	str	r2, [r4, #4]
 100c6d4:	e58c6004 	str	r6, [ip, #4]
 100c6d8:	e5803004 	str	r3, [r0, #4]
					if(dma_sent) {
 100c6dc:	eaffff54 	b	100c434 <_acq_irq_rx_handler+0x3cc>
	g_acq_state.acq_ctrl_a |= bitmask;
 100c6e0:	e3833020 	orr	r3, r3, #32
	bogo_delay(10);
 100c6e4:	e3a0000a 	mov	r0, #10
 100c6e8:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c6ec:	e5873050 	str	r3, [r7, #80]	; 0x50
 100c6f0:	eb000b03 	bl	100f304 <bogo_delay>
						g_acq_state.stats.num_fifo_full++;
 100c6f4:	e59f2140 	ldr	r2, [pc, #320]	; 100c83c <_acq_irq_rx_handler+0x7d4>
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c6f8:	e594e884 	ldr	lr, [r4, #2180]	; 0x884
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c6fc:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
						g_acq_state.stats.num_fifo_full++;
 100c700:	e5923000 	ldr	r3, [r2]
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c704:	e1dec1b0 	ldrh	ip, [lr, #16]
						g_acq_state.stats.num_fifo_full++;
 100c708:	e5920004 	ldr	r0, [r2, #4]
 100c70c:	e3c11020 	bic	r1, r1, #32
 100c710:	e2933001 	adds	r3, r3, #1
 100c714:	e5841780 	str	r1, [r4, #1920]	; 0x780
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c718:	e38cc002 	orr	ip, ip, #2
 100c71c:	e5871050 	str	r1, [r7, #80]	; 0x50
						g_acq_state.stats.num_fifo_full++;
 100c720:	e2a01000 	adc	r1, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c724:	e1cec1b0 	strh	ip, [lr, #16]
						g_acq_state.stats.num_fifo_full++;
 100c728:	e5823000 	str	r3, [r2]
 100c72c:	e5821004 	str	r1, [r2, #4]
 100c730:	eaffff26 	b	100c3d0 <_acq_irq_rx_handler+0x368>
 100c734:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
						g_acq_state.acq_early_abort = 0;
 100c738:	e3c33003 	bic	r3, r3, #3
 100c73c:	e3833002 	orr	r3, r3, #2
 100c740:	e3a00000 	mov	r0, #0
 100c744:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c748:	e34403c0 	movt	r0, #17344	; 0x43c0
 100c74c:	e3c23b02 	bic	r3, r2, #2048	; 0x800
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c750:	e3a0c000 	mov	ip, #0
 100c754:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c758:	e5803050 	str	r3, [r0, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 100c75c:	e5902048 	ldr	r2, [r0, #72]	; 0x48
 100c760:	e584c004 	str	ip, [r4, #4]
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 100c764:	e581200c 	str	r2, [r1, #12]
					if(dma_sent) {
 100c768:	eaffff05 	b	100c384 <_acq_irq_rx_handler+0x31c>
						if(g_acq_state.acq_current->next != NULL) {
 100c76c:	e59cc01c 	ldr	ip, [ip, #28]
 100c770:	e35c0000 	cmp	ip, #0
 100c774:	0a000026 	beq	100c814 <_acq_irq_rx_handler+0x7ac>
							if(g_acq_state.acq_early_abort) {
 100c778:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c77c:	e213a001 	ands	sl, r3, #1
 100c780:	0a000009 	beq	100c7ac <_acq_irq_rx_handler+0x744>
 100c784:	e3c00b82 	bic	r0, r0, #133120	; 0x20800
								g_acq_state.acq_early_abort = 0;
 100c788:	e3c33003 	bic	r3, r3, #3
 100c78c:	e3c00003 	bic	r0, r0, #3
 100c790:	e3833002 	orr	r3, r3, #2
 100c794:	e3800004 	orr	r0, r0, #4
 100c798:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c79c:	e5840780 	str	r0, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c7a0:	e5880050 	str	r0, [r8, #80]	; 0x50
								g_acq_state.sub_state = ACQSUBST_NONE;
 100c7a4:	e5841004 	str	r1, [r4, #4]
 100c7a8:	eafffe78 	b	100c190 <_acq_irq_rx_handler+0x128>
								error = acq_start(ACQ_START_FIFO_RESET);
 100c7ac:	e3a00001 	mov	r0, #1
								g_acq_state.acq_current = g_acq_state.acq_current->next;
 100c7b0:	e584c884 	str	ip, [r4, #2180]	; 0x884
								error = acq_start(ACQ_START_FIFO_RESET);
 100c7b4:	ebfffbd6 	bl	100b714 <acq_start>
								if(error != ACQRES_OK) {
 100c7b8:	e2502000 	subs	r2, r0, #0
 100c7bc:	0afffe73 	beq	100c190 <_acq_irq_rx_handler+0x128>
									d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 100c7c0:	e30911a8 	movw	r1, #37288	; 0x91a8
 100c7c4:	e1a00009 	mov	r0, r9
 100c7c8:	e3401106 	movt	r1, #262	; 0x106
 100c7cc:	eb000ae5 	bl	100f368 <d_printf>
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c7d0:	e30811d0 	movw	r1, #33232	; 0x81d0
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100c7d4:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c7d8:	e1a00009 	mov	r0, r9
 100c7dc:	e3401106 	movt	r1, #262	; 0x106
 100c7e0:	e3a02006 	mov	r2, #6
 100c7e4:	eaffff59 	b	100c550 <_acq_irq_rx_handler+0x4e8>
 100c7e8:	e3c00b82 	bic	r0, r0, #133120	; 0x20800
						g_acq_state.acq_early_abort = 0;
 100c7ec:	e3cc3003 	bic	r3, ip, #3
 100c7f0:	e3c00003 	bic	r0, r0, #3
 100c7f4:	e3833002 	orr	r3, r3, #2
 100c7f8:	e1800009 	orr	r0, r0, r9
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c7fc:	e3a02000 	mov	r2, #0
 100c800:	e5840780 	str	r0, [r4, #1920]	; 0x780
						g_acq_state.acq_early_abort = 0;
 100c804:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c808:	e5880050 	str	r0, [r8, #80]	; 0x50
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c80c:	e5842004 	str	r2, [r4, #4]
 100c810:	eafffe5e 	b	100c190 <_acq_irq_rx_handler+0x128>
							d_printf(D_ERROR, "acquire: NULL deref trying to move to next wavebuffer; something's wrong! (%d acq made, %d requested)", \
 100c814:	e30911dc 	movw	r1, #37340	; 0x91dc
 100c818:	e1a00009 	mov	r0, r9
 100c81c:	e3401106 	movt	r1, #262	; 0x106
 100c820:	eb000ad0 	bl	100f368 <d_printf>
							acq_debug_dump();
 100c824:	ebfffc6a 	bl	100b9d4 <acq_debug_dump>
 100c828:	eafffe58 	b	100c190 <_acq_irq_rx_handler+0x128>
 100c82c:	01075ab8 	.word	0x01075ab8
 100c830:	01075a98 	.word	0x01075a98
 100c834:	01075a88 	.word	0x01075a88
 100c838:	010752e0 	.word	0x010752e0
 100c83c:	01075ad8 	.word	0x01075ad8
 100c840:	01075aa8 	.word	0x01075aa8

0100c844 <acq_debug_ll_dump>:
 */
void acq_debug_ll_dump(struct acq_buffer_t *base, char *str)
{
	struct acq_buffer_t *wave = base;

	d_printf(D_INFO, "** Acquisition Linked List State for 0x%08x %s **", base, str);
 100c844:	e1a03001 	mov	r3, r1
 100c848:	e3091250 	movw	r1, #37456	; 0x9250
{
 100c84c:	e92d4030 	push	{r4, r5, lr}
	d_printf(D_INFO, "** Acquisition Linked List State for 0x%08x %s **", base, str);
 100c850:	e1a02000 	mov	r2, r0
{
 100c854:	e24dd014 	sub	sp, sp, #20
 100c858:	e1a04000 	mov	r4, r0
	d_printf(D_INFO, "** Acquisition Linked List State for 0x%08x %s **", base, str);
 100c85c:	e3401106 	movt	r1, #262	; 0x106
 100c860:	e3a00002 	mov	r0, #2
 100c864:	eb000abf 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100c868:	e3091f80 	movw	r1, #40832	; 0x9f80
 100c86c:	e3a00002 	mov	r0, #2
 100c870:	e3401106 	movt	r1, #262	; 0x106
 100c874:	eb000abb 	bl	100f368 <d_printf>

	while(wave != NULL) {
 100c878:	e3540000 	cmp	r4, #0
 100c87c:	0a00000f 	beq	100c8c0 <acq_debug_ll_dump+0x7c>
		d_printf(D_INFO, "info = 0x%08x, buffer = 0x%08x, next = 0x%08x, flags = 0x%04x, index = %8d", wave, wave->buff_acq, wave->next, wave->flags, wave->idx);
 100c880:	e3095284 	movw	r5, #37508	; 0x9284
 100c884:	e3405106 	movt	r5, #262	; 0x106
 100c888:	e594c000 	ldr	ip, [r4]
 100c88c:	e1a02004 	mov	r2, r4
 100c890:	e5943008 	ldr	r3, [r4, #8]
 100c894:	e1a01005 	mov	r1, r5
 100c898:	e3a00002 	mov	r0, #2
 100c89c:	e58dc008 	str	ip, [sp, #8]
 100c8a0:	e1d4c1b0 	ldrh	ip, [r4, #16]
 100c8a4:	e58dc004 	str	ip, [sp, #4]
 100c8a8:	e594c01c 	ldr	ip, [r4, #28]
 100c8ac:	e58dc000 	str	ip, [sp]
 100c8b0:	eb000aac 	bl	100f368 <d_printf>
		wave = wave->next;
 100c8b4:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 100c8b8:	e3540000 	cmp	r4, #0
 100c8bc:	1afffff1 	bne	100c888 <acq_debug_ll_dump+0x44>
	}

	d_printf(D_INFO, "");
 100c8c0:	e3091f80 	movw	r1, #40832	; 0x9f80
 100c8c4:	e3a00002 	mov	r0, #2
 100c8c8:	e3401106 	movt	r1, #262	; 0x106
}
 100c8cc:	e28dd014 	add	sp, sp, #20
 100c8d0:	e8bd4030 	pop	{r4, r5, lr}
	d_printf(D_INFO, "");
 100c8d4:	ea000aa3 	b	100f368 <d_printf>

0100c8d8 <acq_debug_dump_waveraw>:

/*
 * Dump raw contents of buffer in active acquisition.
 */
void acq_debug_dump_waveraw()
{
 100c8d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	uint32_t sz;
	uint32_t i;

	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
		sz = g_acq_state.pre_buffsz;
 100c8dc:	e30552d8 	movw	r5, #21208	; 0x52d8
 100c8e0:	e3405107 	movt	r5, #263	; 0x107
	}

	sz /= 4;

	for(i = 0; i <= sz; i += 2) {
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 100c8e4:	e3097330 	movw	r7, #37680	; 0x9330
 100c8e8:	e3407106 	movt	r7, #262	; 0x106
		sz = g_acq_state.pre_buffsz;
 100c8ec:	e3a04000 	mov	r4, #0
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 100c8f0:	e5953004 	ldr	r3, [r5, #4]
{
 100c8f4:	e24dd00c 	sub	sp, sp, #12
		sz = g_acq_state.pre_buffsz;
 100c8f8:	e5952764 	ldr	r2, [r5, #1892]	; 0x764
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 100c8fc:	e2433001 	sub	r3, r3, #1
 100c900:	e3530001 	cmp	r3, #1
		sz = g_acq_state.post_buffsz;
 100c904:	85956768 	ldrhi	r6, [r5, #1896]	; 0x768
		sz = g_acq_state.pre_buffsz;
 100c908:	91a06002 	movls	r6, r2
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c90c:	930912d0 	movwls	r1, #37584	; 0x92d0
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c910:	83091300 	movwhi	r1, #37632	; 0x9300
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c914:	93401106 	movtls	r1, #262	; 0x106
 100c918:	93a00002 	movls	r0, #2
 100c91c:	e3c66007 	bic	r6, r6, #7
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c920:	83401106 	movthi	r1, #262	; 0x106
 100c924:	e2866008 	add	r6, r6, #8
 100c928:	83a00002 	movhi	r0, #2
 100c92c:	eb000a8d 	bl	100f368 <d_printf>
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 100c930:	e5953884 	ldr	r3, [r5, #2180]	; 0x884
 100c934:	e1a02004 	mov	r2, r4
 100c938:	e1a01007 	mov	r1, r7
 100c93c:	e3a00002 	mov	r0, #2
 100c940:	e593c008 	ldr	ip, [r3, #8]
 100c944:	e7bc3004 	ldr	r3, [ip, r4]!
 100c948:	e2844008 	add	r4, r4, #8
 100c94c:	e59cc004 	ldr	ip, [ip, #4]
 100c950:	e58dc000 	str	ip, [sp]
 100c954:	eb000a83 	bl	100f368 <d_printf>
	for(i = 0; i <= sz; i += 2) {
 100c958:	e1560004 	cmp	r6, r4
 100c95c:	1afffff3 	bne	100c930 <acq_debug_dump_waveraw+0x58>
	}

	d_printf(D_INFO, "** End of Waveform Data **");
 100c960:	e3091348 	movw	r1, #37704	; 0x9348
 100c964:	e3a00002 	mov	r0, #2
 100c968:	e3401106 	movt	r1, #262	; 0x106
}
 100c96c:	e28dd00c 	add	sp, sp, #12
 100c970:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "** End of Waveform Data **");
 100c974:	ea000a7b 	b	100f368 <d_printf>

0100c978 <acq_get_ll_pointer>:
 * 			ACQRES_WAVE_NOT_FOUND if... well... the waveform wasn't found
 */
int acq_get_ll_pointer(int index, struct acq_buffer_t **buff, int list_used)
{
	struct acq_buffer_t *wave;
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c978:	e2423001 	sub	r3, r2, #1
{
 100c97c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c980:	e3530001 	cmp	r3, #1
{
 100c984:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c988:	8a00001c 	bhi	100ca00 <acq_get_ll_pointer+0x88>

	if(list_used == ACQLIST_ACQ)
		wave = g_acq_state.acq_first;
 100c98c:	e30532d8 	movw	r3, #21208	; 0x52d8
	if(list_used == ACQLIST_ACQ)
 100c990:	e3520001 	cmp	r2, #1
		wave = g_acq_state.acq_first;
 100c994:	e3403107 	movt	r3, #263	; 0x107
 100c998:	0593c880 	ldreq	ip, [r3, #2176]	; 0x880
	else
		wave = g_acq_state.acq_done_first;
 100c99c:	1593c888 	ldrne	ip, [r3, #2184]	; 0x888

	while(wave != NULL) {
 100c9a0:	e35c0000 	cmp	ip, #0
 100c9a4:	0a000009 	beq	100c9d0 <acq_get_ll_pointer+0x58>
		//d_printf(D_EXINFO, "explore: 0x%08x (%d) (buff_acq:0x%08x, trigger_at:0x%08x %d)", \
				wave, wave->idx, wave->buff_acq, wave->trigger_at, wave->trigger_at);

		if(wave->idx == index)
 100c9a8:	e59c3000 	ldr	r3, [ip]
 100c9ac:	e1500003 	cmp	r0, r3
 100c9b0:	1a000003 	bne	100c9c4 <acq_get_ll_pointer+0x4c>
 100c9b4:	ea00000d 	b	100c9f0 <acq_get_ll_pointer+0x78>
 100c9b8:	e59ce000 	ldr	lr, [ip]
 100c9bc:	e15e0000 	cmp	lr, r0
 100c9c0:	0a00000a 	beq	100c9f0 <acq_get_ll_pointer+0x78>
			break;

		wave = wave->next;
 100c9c4:	e59cc01c 	ldr	ip, [ip, #28]
	while(wave != NULL) {
 100c9c8:	e35c0000 	cmp	ip, #0
 100c9cc:	1afffff9 	bne	100c9b8 <acq_get_ll_pointer+0x40>
	}

	if(wave == NULL) {
		d_printf(D_ERROR, "Unable to find waveindex %d with list_used %02x", index, list_used);
 100c9d0:	e309139c 	movw	r1, #37788	; 0x939c
 100c9d4:	e1a03002 	mov	r3, r2
 100c9d8:	e3401106 	movt	r1, #262	; 0x106
 100c9dc:	e1a02000 	mov	r2, r0
 100c9e0:	e3a00004 	mov	r0, #4
 100c9e4:	eb000a5f 	bl	100f368 <d_printf>
 100c9e8:	e3e00009 	mvn	r0, #9
 100c9ec:	ea000001 	b	100c9f8 <acq_get_ll_pointer+0x80>
		return ACQRES_WAVE_NOT_FOUND;
	}

	*buff = wave;
	return ACQRES_OK;
 100c9f0:	e3a00000 	mov	r0, #0
	*buff = wave;
 100c9f4:	e581c000 	str	ip, [r1]
}
 100c9f8:	e28dd00c 	add	sp, sp, #12
 100c9fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100ca00:	e30005cf 	movw	r0, #1487	; 0x5cf
 100ca04:	e3083474 	movw	r3, #33908	; 0x8474
 100ca08:	e3092364 	movw	r2, #37732	; 0x9364
 100ca0c:	e308149c 	movw	r1, #33948	; 0x849c
 100ca10:	e58d0000 	str	r0, [sp]
 100ca14:	e3403106 	movt	r3, #262	; 0x106
 100ca18:	e3a00004 	mov	r0, #4
 100ca1c:	e3402106 	movt	r2, #262	; 0x106
 100ca20:	e3401106 	movt	r1, #262	; 0x106
 100ca24:	eb000a4f 	bl	100f368 <d_printf>
 100ca28:	e3e00062 	mvn	r0, #98	; 0x62
 100ca2c:	fa003c7f 	blx	101bc30 <exit>

0100ca30 <acq_get_ll_pointer_in_base>:
 */
int acq_get_ll_pointer_in_base(int index, struct acq_buffer_t **buff, struct acq_buffer_t *base_wave)
{
	struct acq_buffer_t *wave = base_wave;

	while(wave != NULL) {
 100ca30:	e3520000 	cmp	r2, #0
 100ca34:	0a00000a 	beq	100ca64 <acq_get_ll_pointer_in_base+0x34>
		//d_printf(D_EXINFO, "explore: 0x%08x (%d) (buff_acq:0x%08x, trigger_at:0x%08x %d)", \
				wave, wave->idx, wave->buff_acq, wave->trigger_at, wave->trigger_at);

		if(wave->idx == index)
 100ca38:	e5923000 	ldr	r3, [r2]
 100ca3c:	e1500003 	cmp	r0, r3
 100ca40:	e1a03002 	mov	r3, r2
 100ca44:	1a000003 	bne	100ca58 <acq_get_ll_pointer_in_base+0x28>
 100ca48:	ea00000e 	b	100ca88 <acq_get_ll_pointer_in_base+0x58>
 100ca4c:	e593c000 	ldr	ip, [r3]
 100ca50:	e15c0000 	cmp	ip, r0
 100ca54:	0a00000b 	beq	100ca88 <acq_get_ll_pointer_in_base+0x58>
			break;

		wave = wave->next;
 100ca58:	e593301c 	ldr	r3, [r3, #28]
	while(wave != NULL) {
 100ca5c:	e3530000 	cmp	r3, #0
 100ca60:	1afffff9 	bne	100ca4c <acq_get_ll_pointer_in_base+0x1c>
	}

	if(wave == NULL) {
		d_printf(D_ERROR, "Unable to find waveindex %d with list_base 0x%08x", index, base_wave);
 100ca64:	e30913cc 	movw	r1, #37836	; 0x93cc
 100ca68:	e1a03002 	mov	r3, r2
{
 100ca6c:	e92d4010 	push	{r4, lr}
		d_printf(D_ERROR, "Unable to find waveindex %d with list_base 0x%08x", index, base_wave);
 100ca70:	e1a02000 	mov	r2, r0
 100ca74:	e3401106 	movt	r1, #262	; 0x106
 100ca78:	e3a00004 	mov	r0, #4
 100ca7c:	eb000a39 	bl	100f368 <d_printf>
		return ACQRES_WAVE_NOT_FOUND;
 100ca80:	e3e00009 	mvn	r0, #9
	}

	*buff = wave;
	return ACQRES_OK;
}
 100ca84:	e8bd8010 	pop	{r4, pc}
	return ACQRES_OK;
 100ca88:	e3a00000 	mov	r0, #0
	*buff = wave;
 100ca8c:	e5813000 	str	r3, [r1]
}
 100ca90:	e12fff1e 	bx	lr

0100ca94 <acq_next_ll_pointer>:
 * @param	buff	Current waveform pointer
 * @param	next	Pointer to result for next waveform pointer; set to NULL if no next exists
 */
int acq_next_ll_pointer(struct acq_buffer_t *this, struct acq_buffer_t **next)
{
	D_ASSERT(this != NULL && next != NULL);
 100ca94:	e3510000 	cmp	r1, #0
 100ca98:	13500000 	cmpne	r0, #0
 100ca9c:	0a000005 	beq	100cab8 <acq_next_ll_pointer+0x24>

	if(this->next != NULL) {
 100caa0:	e590301c 	ldr	r3, [r0, #28]
 100caa4:	e3530000 	cmp	r3, #0
 100caa8:	e5813000 	str	r3, [r1]
		return ACQRES_OK;
	}

	*next = NULL;
	return ACQRES_END_OF_WAVE_LL;
}
 100caac:	03e0000b 	mvneq	r0, #11
 100cab0:	13a00000 	movne	r0, #0
 100cab4:	e12fff1e 	bx	lr
{
 100cab8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(this != NULL && next != NULL);
 100cabc:	e3000614 	movw	r0, #1556	; 0x614
{
 100cac0:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(this != NULL && next != NULL);
 100cac4:	e3083474 	movw	r3, #33908	; 0x8474
 100cac8:	e3092400 	movw	r2, #37888	; 0x9400
 100cacc:	e308149c 	movw	r1, #33948	; 0x849c
 100cad0:	e58d0000 	str	r0, [sp]
 100cad4:	e3403106 	movt	r3, #262	; 0x106
 100cad8:	e3a00004 	mov	r0, #4
 100cadc:	e3402106 	movt	r2, #262	; 0x106
 100cae0:	e3401106 	movt	r1, #262	; 0x106
 100cae4:	eb000a1f 	bl	100f368 <d_printf>
 100cae8:	e3e00062 	mvn	r0, #98	; 0x62
 100caec:	fa003c4f 	blx	101bc30 <exit>

0100caf0 <acq_debug_dump_wave_pointer>:
{
	uint32_t start, end;
	int i;

	// Dump info about this wave
	d_printf(D_INFO, "");
 100caf0:	e3091f80 	movw	r1, #40832	; 0x9f80
{
 100caf4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "");
 100caf8:	e3401106 	movt	r1, #262	; 0x106
{
 100cafc:	e24dd008 	sub	sp, sp, #8
 100cb00:	e1a04000 	mov	r4, r0
	d_printf(D_INFO, "");
 100cb04:	e3a00002 	mov	r0, #2
 100cb08:	eb000a16 	bl	100f368 <d_printf>
	d_printf(D_INFO, "** Waveinfo for index %d **", wave->idx);
 100cb0c:	e3091420 	movw	r1, #37920	; 0x9420
 100cb10:	e5942000 	ldr	r2, [r4]
 100cb14:	e3401106 	movt	r1, #262	; 0x106
 100cb18:	e3a00002 	mov	r0, #2
 100cb1c:	eb000a11 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100cb20:	e3091f80 	movw	r1, #40832	; 0x9f80
 100cb24:	e3a00002 	mov	r0, #2
 100cb28:	e3401106 	movt	r1, #262	; 0x106
 100cb2c:	eb000a0d 	bl	100f368 <d_printf>
	d_printf(D_INFO, "buff_acq address      = 0x%08x", wave->buff_acq);
 100cb30:	e309143c 	movw	r1, #37948	; 0x943c
 100cb34:	e5942008 	ldr	r2, [r4, #8]
 100cb38:	e3401106 	movt	r1, #262	; 0x106
 100cb3c:	e3a00002 	mov	r0, #2
 100cb40:	eb000a08 	bl	100f368 <d_printf>
	d_printf(D_INFO, "buff_alloc address    = 0x%08x", wave->buff_alloc);
 100cb44:	e309145c 	movw	r1, #37980	; 0x945c
 100cb48:	e5942004 	ldr	r2, [r4, #4]
 100cb4c:	e3401106 	movt	r1, #262	; 0x106
 100cb50:	e3a00002 	mov	r0, #2
 100cb54:	eb000a03 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100cb58:	e3091f80 	movw	r1, #40832	; 0x9f80
 100cb5c:	e3a00002 	mov	r0, #2
 100cb60:	e3401106 	movt	r1, #262	; 0x106
 100cb64:	eb0009ff 	bl	100f368 <d_printf>
	d_printf(D_INFO, "idx                   = %d", wave->idx);
 100cb68:	e309147c 	movw	r1, #38012	; 0x947c
 100cb6c:	e5942000 	ldr	r2, [r4]
 100cb70:	e3401106 	movt	r1, #262	; 0x106
 100cb74:	e3a00002 	mov	r0, #2
 100cb78:	eb0009fa 	bl	100f368 <d_printf>
	d_printf(D_INFO, "flags                 = 0x%04x", wave->flags);
 100cb7c:	e3091498 	movw	r1, #38040	; 0x9498
 100cb80:	e1d421b0 	ldrh	r2, [r4, #16]
 100cb84:	e3401106 	movt	r1, #262	; 0x106
 100cb88:	e3a00002 	mov	r0, #2
 100cb8c:	eb0009f5 	bl	100f368 <d_printf>
	d_printf(D_INFO, "trigger_at            = 0x%08x (%d)", wave->trigger_at, wave->trigger_at);
 100cb90:	e594300c 	ldr	r3, [r4, #12]
 100cb94:	e30914b8 	movw	r1, #38072	; 0x94b8
 100cb98:	e3401106 	movt	r1, #262	; 0x106
 100cb9c:	e3a00002 	mov	r0, #2
 100cba0:	e1a02003 	mov	r2, r3
 100cba4:	eb0009ef 	bl	100f368 <d_printf>
	d_printf(D_INFO, "trigger_at(div8)      = 0x%08x (%d)", wave->trigger_at >> 3, wave->trigger_at >> 3);
 100cba8:	e594300c 	ldr	r3, [r4, #12]
 100cbac:	e30914dc 	movw	r1, #38108	; 0x94dc
 100cbb0:	e3401106 	movt	r1, #262	; 0x106
 100cbb4:	e3a00002 	mov	r0, #2
 100cbb8:	e1a031a3 	lsr	r3, r3, #3
 100cbbc:	e1a02003 	mov	r2, r3
 100cbc0:	eb0009e8 	bl	100f368 <d_printf>
	d_printf(D_INFO, "trigger_at(div16)     = 0x%08x (%d)", wave->trigger_at >> 4, wave->trigger_at >> 4);
 100cbc4:	e594300c 	ldr	r3, [r4, #12]
 100cbc8:	e3091500 	movw	r1, #38144	; 0x9500
 100cbcc:	e3401106 	movt	r1, #262	; 0x106
 100cbd0:	e3a00002 	mov	r0, #2
 100cbd4:	e1a03223 	lsr	r3, r3, #4
 100cbd8:	e1a02003 	mov	r2, r3
 100cbdc:	eb0009e1 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100cbe0:	e3091f80 	movw	r1, #40832	; 0x9f80
 100cbe4:	e3a00002 	mov	r0, #2
 100cbe8:	e3401106 	movt	r1, #262	; 0x106
 100cbec:	eb0009dd 	bl	100f368 <d_printf>

	// If waveform is completed with trigger then display it
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK)) {
 100cbf0:	e594300c 	ldr	r3, [r4, #12]
 100cbf4:	e3530000 	cmp	r3, #0
 100cbf8:	ba00004c 	blt	100cd30 <acq_debug_dump_wave_pointer+0x240>
		 * generated the trigger event.  These are discarded (for now).
		 *
		 * The trigger_at value is given in 8-byte word counts; it must be scaled
		 * by two to get the address.
		 */
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 100cbfc:	e30572d8 	movw	r7, #21208	; 0x52d8
 100cc00:	e5940008 	ldr	r0, [r4, #8]
 100cc04:	e3407107 	movt	r7, #263	; 0x107
 100cc08:	e597176c 	ldr	r1, [r7, #1900]	; 0x76c
 100cc0c:	eb0030fe 	bl	101900c <Xil_DCacheInvalidateRange>
		dmb();
 100cc10:	f57ff05f 	dmb	sy

		//addr_start = wave->buff_acq;

		start = (((wave->trigger_at >> 3) + 1) * 2);
 100cc14:	e594500c 	ldr	r5, [r4, #12]
		end = g_acq_state.pre_sampct * 2;

		//d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);

		d_printf(D_RAW, " bytepos word0     word1\r\n");
 100cc18:	e3091524 	movw	r1, #38180	; 0x9524
		end = g_acq_state.pre_sampct * 2;
 100cc1c:	e5979788 	ldr	r9, [r7, #1928]	; 0x788
		d_printf(D_RAW, " bytepos word0     word1\r\n");
 100cc20:	e3401106 	movt	r1, #262	; 0x106
 100cc24:	e3a00000 	mov	r0, #0
 100cc28:	eb0009ce 	bl	100f368 <d_printf>
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100cc2c:	e1a051a5 	lsr	r5, r5, #3
		end = g_acq_state.pre_sampct * 2;
 100cc30:	e1a09089 	lsl	r9, r9, #1
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100cc34:	e2855001 	add	r5, r5, #1
 100cc38:	e1a08085 	lsl	r8, r5, #1

		for(i = start; i < end; i += 2) {
 100cc3c:	e1580009 	cmp	r8, r9
 100cc40:	e1a06008 	mov	r6, r8
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cc44:	3309a540 	movwcc	sl, #38208	; 0x9540
 100cc48:	31a05185 	lslcc	r5, r5, #3
 100cc4c:	3340a106 	movtcc	sl, #262	; 0x106
		for(i = start; i < end; i += 2) {
 100cc50:	2a00000b 	bcs	100cc84 <acq_debug_dump_wave_pointer+0x194>
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cc54:	e594c008 	ldr	ip, [r4, #8]
 100cc58:	e1a02005 	mov	r2, r5
		for(i = start; i < end; i += 2) {
 100cc5c:	e2866002 	add	r6, r6, #2
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cc60:	e1a0100a 	mov	r1, sl
 100cc64:	e3a00000 	mov	r0, #0
 100cc68:	e7bc3005 	ldr	r3, [ip, r5]!
 100cc6c:	e2855008 	add	r5, r5, #8
 100cc70:	e59cc004 	ldr	ip, [ip, #4]
 100cc74:	e58dc000 	str	ip, [sp]
 100cc78:	eb0009ba 	bl	100f368 <d_printf>
		for(i = start; i < end; i += 2) {
 100cc7c:	e1590006 	cmp	r9, r6
 100cc80:	8afffff3 	bhi	100cc54 <acq_debug_dump_wave_pointer+0x164>
		}

		for(i = 0; i < start; i += 2) {
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cc84:	e3096560 	movw	r6, #38240	; 0x9560
 100cc88:	e1a08108 	lsl	r8, r8, #2
 100cc8c:	e3406106 	movt	r6, #262	; 0x106
{
 100cc90:	e3a05000 	mov	r5, #0
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cc94:	e594c008 	ldr	ip, [r4, #8]
 100cc98:	e1a02005 	mov	r2, r5
 100cc9c:	e1a01006 	mov	r1, r6
 100cca0:	e3a00000 	mov	r0, #0
 100cca4:	e7bc3005 	ldr	r3, [ip, r5]!
 100cca8:	e2855008 	add	r5, r5, #8
 100ccac:	e59cc004 	ldr	ip, [ip, #4]
 100ccb0:	e58dc000 	str	ip, [sp]
 100ccb4:	eb0009ab 	bl	100f368 <d_printf>
		for(i = 0; i < start; i += 2) {
 100ccb8:	e1580005 	cmp	r8, r5
 100ccbc:	1afffff4 	bne	100cc94 <acq_debug_dump_wave_pointer+0x1a4>
		}

		start = g_acq_state.pre_sampct * 2;
 100ccc0:	e5975788 	ldr	r5, [r7, #1928]	; 0x788
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100ccc4:	e597778c 	ldr	r7, [r7, #1932]	; 0x78c
 100ccc8:	e0857007 	add	r7, r5, r7

		for(i = start; i < end; i += 2) {
 100cccc:	e1a06085 	lsl	r6, r5, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100ccd0:	e1a07087 	lsl	r7, r7, #1
		for(i = start; i < end; i += 2) {
 100ccd4:	e1560007 	cmp	r6, r7
 100ccd8:	2a00000e 	bcs	100cd18 <acq_debug_dump_wave_pointer+0x228>
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100ccdc:	e3098580 	movw	r8, #38272	; 0x9580
 100cce0:	e1a05185 	lsl	r5, r5, #3
 100cce4:	e3408106 	movt	r8, #262	; 0x106
 100cce8:	e594c008 	ldr	ip, [r4, #8]
 100ccec:	e1a02005 	mov	r2, r5
		for(i = start; i < end; i += 2) {
 100ccf0:	e2866002 	add	r6, r6, #2
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i * 4, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100ccf4:	e1a01008 	mov	r1, r8
 100ccf8:	e3a00000 	mov	r0, #0
 100ccfc:	e7bc3005 	ldr	r3, [ip, r5]!
 100cd00:	e2855008 	add	r5, r5, #8
 100cd04:	e59cc004 	ldr	ip, [ip, #4]
 100cd08:	e58dc000 	str	ip, [sp]
 100cd0c:	eb000995 	bl	100f368 <d_printf>
		for(i = start; i < end; i += 2) {
 100cd10:	e1570006 	cmp	r7, r6
 100cd14:	8afffff3 	bhi	100cce8 <acq_debug_dump_wave_pointer+0x1f8>
		}
	} else {
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", wave->idx);
	}

	d_printf(D_INFO, "");
 100cd18:	e3091f80 	movw	r1, #40832	; 0x9f80
 100cd1c:	e3a00002 	mov	r0, #2
 100cd20:	e3401106 	movt	r1, #262	; 0x106
}
 100cd24:	e28dd008 	add	sp, sp, #8
 100cd28:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "");
 100cd2c:	ea00098d 	b	100f368 <d_printf>
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", wave->idx);
 100cd30:	e30915a0 	movw	r1, #38304	; 0x95a0
 100cd34:	e5942000 	ldr	r2, [r4]
 100cd38:	e3401106 	movt	r1, #262	; 0x106
 100cd3c:	e3a00004 	mov	r0, #4
 100cd40:	eb000988 	bl	100f368 <d_printf>
 100cd44:	eafffff3 	b	100cd18 <acq_debug_dump_wave_pointer+0x228>

0100cd48 <acq_debug_dump_wave>:
	D_ASSERT(list == ACQLIST_ACQ || list == ACQLIST_DONE);
 100cd48:	e2412001 	sub	r2, r1, #1
{
 100cd4c:	e92d4010 	push	{r4, lr}
	D_ASSERT(list == ACQLIST_ACQ || list == ACQLIST_DONE);
 100cd50:	e3520001 	cmp	r2, #1
{
 100cd54:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(list == ACQLIST_ACQ || list == ACQLIST_DONE);
 100cd58:	8a00001e 	bhi	100cdd8 <acq_debug_dump_wave+0x90>
		wave = g_acq_state.acq_first;
 100cd5c:	e30522d8 	movw	r2, #21208	; 0x52d8
	if(list_used == ACQLIST_ACQ)
 100cd60:	e3510001 	cmp	r1, #1
		wave = g_acq_state.acq_first;
 100cd64:	e3402107 	movt	r2, #263	; 0x107
 100cd68:	e1a04000 	mov	r4, r0
 100cd6c:	05920880 	ldreq	r0, [r2, #2176]	; 0x880
		wave = g_acq_state.acq_done_first;
 100cd70:	e1a03001 	mov	r3, r1
 100cd74:	15920888 	ldrne	r0, [r2, #2184]	; 0x888
	while(wave != NULL) {
 100cd78:	e3500000 	cmp	r0, #0
 100cd7c:	1a000003 	bne	100cd90 <acq_debug_dump_wave+0x48>
 100cd80:	ea000008 	b	100cda8 <acq_debug_dump_wave+0x60>
		wave = wave->next;
 100cd84:	e590001c 	ldr	r0, [r0, #28]
	while(wave != NULL) {
 100cd88:	e3500000 	cmp	r0, #0
 100cd8c:	0a000005 	beq	100cda8 <acq_debug_dump_wave+0x60>
		if(wave->idx == index)
 100cd90:	e5902000 	ldr	r2, [r0]
 100cd94:	e1540002 	cmp	r4, r2
 100cd98:	1afffff9 	bne	100cd84 <acq_debug_dump_wave+0x3c>
}
 100cd9c:	e28dd008 	add	sp, sp, #8
 100cda0:	e8bd4010 	pop	{r4, lr}
	acq_debug_dump_wave_pointer(wave);
 100cda4:	eaffff51 	b	100caf0 <acq_debug_dump_wave_pointer>
		d_printf(D_ERROR, "Unable to find waveindex %d with list_used %02x", index, list_used);
 100cda8:	e309139c 	movw	r1, #37788	; 0x939c
 100cdac:	e1a02004 	mov	r2, r4
 100cdb0:	e3401106 	movt	r1, #262	; 0x106
 100cdb4:	e3a00004 	mov	r0, #4
 100cdb8:	eb00096a 	bl	100f368 <d_printf>
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100cdbc:	e3091600 	movw	r1, #38400	; 0x9600
 100cdc0:	e1a02004 	mov	r2, r4
 100cdc4:	e3401106 	movt	r1, #262	; 0x106
 100cdc8:	e3a00004 	mov	r0, #4
}
 100cdcc:	e28dd008 	add	sp, sp, #8
 100cdd0:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100cdd4:	ea000963 	b	100f368 <d_printf>
	D_ASSERT(list == ACQLIST_ACQ || list == ACQLIST_DONE);
 100cdd8:	e3000628 	movw	r0, #1576	; 0x628
 100cddc:	e3083474 	movw	r3, #33908	; 0x8474
 100cde0:	e30925d4 	movw	r2, #38356	; 0x95d4
 100cde4:	e308149c 	movw	r1, #33948	; 0x849c
 100cde8:	e58d0000 	str	r0, [sp]
 100cdec:	e3403106 	movt	r3, #262	; 0x106
 100cdf0:	e3a00004 	mov	r0, #4
 100cdf4:	e3402106 	movt	r2, #262	; 0x106
 100cdf8:	e3401106 	movt	r1, #262	; 0x106
 100cdfc:	eb000959 	bl	100f368 <d_printf>
 100ce00:	e3e00062 	mvn	r0, #98	; 0x62
 100ce04:	fa003b89 	blx	101bc30 <exit>

0100ce08 <acq_copy_slow_mipi>:
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 * @param	buffer	Buffer to place assembled waveform.  The buffer must be at least as large as the
 * 					total_buffsz parameter or buffer overflow could occur.
 */
int acq_copy_slow_mipi(int index, uint32_t *buffer)
{
 100ce08:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
		wave = g_acq_state.acq_done_first;
 100ce0c:	e30552d8 	movw	r5, #21208	; 0x52d8
 100ce10:	e3405107 	movt	r5, #263	; 0x107
{
 100ce14:	e24dd00c 	sub	sp, sp, #12
 100ce18:	e1a06000 	mov	r6, r0
		wave = g_acq_state.acq_done_first;
 100ce1c:	e5954888 	ldr	r4, [r5, #2184]	; 0x888
	while(wave != NULL) {
 100ce20:	e3540000 	cmp	r4, #0
 100ce24:	0a00000a 	beq	100ce54 <acq_copy_slow_mipi+0x4c>
		if(wave->idx == index)
 100ce28:	e5943000 	ldr	r3, [r4]
 100ce2c:	e1a07001 	mov	r7, r1
 100ce30:	e1500003 	cmp	r0, r3
 100ce34:	1a000003 	bne	100ce48 <acq_copy_slow_mipi+0x40>
 100ce38:	ea000013 	b	100ce8c <acq_copy_slow_mipi+0x84>
 100ce3c:	e5943000 	ldr	r3, [r4]
 100ce40:	e1560003 	cmp	r6, r3
 100ce44:	0a000010 	beq	100ce8c <acq_copy_slow_mipi+0x84>
		wave = wave->next;
 100ce48:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 100ce4c:	e3540000 	cmp	r4, #0
 100ce50:	1afffff9 	bne	100ce3c <acq_copy_slow_mipi+0x34>
		d_printf(D_ERROR, "Unable to find waveindex %d with list_used %02x", index, list_used);
 100ce54:	e309139c 	movw	r1, #37788	; 0x939c
 100ce58:	e3a03002 	mov	r3, #2
 100ce5c:	e1a02006 	mov	r2, r6
 100ce60:	e3401106 	movt	r1, #262	; 0x106
 100ce64:	e3a00004 	mov	r0, #4
 100ce68:	eb00093e 	bl	100f368 <d_printf>

	// Find the LL pointer to this waveindex
	res = acq_get_ll_pointer(index, &wave, ACQLIST_DONE);

	if(res != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100ce6c:	e3091600 	movw	r1, #38400	; 0x9600
 100ce70:	e1a02006 	mov	r2, r6
 100ce74:	e3401106 	movt	r1, #262	; 0x106
 100ce78:	e3a00004 	mov	r0, #4
 100ce7c:	eb000939 	bl	100f368 <d_printf>
		return res;
 100ce80:	e3e00009 	mvn	r0, #9
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
		buffer += start;
	} else {
		return ACQRES_WAVE_NOT_READY;
	}
}
 100ce84:	e28dd00c 	add	sp, sp, #12
 100ce88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 100ce8c:	e594300c 	ldr	r3, [r4, #12]
 100ce90:	e3530000 	cmp	r3, #0
 100ce94:	ba000002 	blt	100cea4 <acq_copy_slow_mipi+0x9c>
 100ce98:	e1d431b0 	ldrh	r3, [r4, #16]
 100ce9c:	e3130001 	tst	r3, #1
 100cea0:	1a000002 	bne	100ceb0 <acq_copy_slow_mipi+0xa8>
		return ACQRES_WAVE_NOT_READY;
 100cea4:	e3e0000a 	mvn	r0, #10
}
 100cea8:	e28dd00c 	add	sp, sp, #12
 100ceac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 100ceb0:	e595176c 	ldr	r1, [r5, #1900]	; 0x76c
 100ceb4:	e5940008 	ldr	r0, [r4, #8]
 100ceb8:	eb003053 	bl	101900c <Xil_DCacheInvalidateRange>
		dmb();
 100cebc:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100cec0:	e594600c 	ldr	r6, [r4, #12]
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 100cec4:	e3a00001 	mov	r0, #1
		end = g_acq_state.pre_sampct * 2;
 100cec8:	e5959788 	ldr	r9, [r5, #1928]	; 0x788
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 100cecc:	e3091634 	movw	r1, #38452	; 0x9634
 100ced0:	e5942008 	ldr	r2, [r4, #8]
 100ced4:	e3401106 	movt	r1, #262	; 0x106
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100ced8:	e1a061a6 	lsr	r6, r6, #3
 100cedc:	e0866000 	add	r6, r6, r0
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cee0:	e0498006 	sub	r8, r9, r6
 100cee4:	e1a06186 	lsl	r6, r6, #3
 100cee8:	e1a08188 	lsl	r8, r8, #3
 100ceec:	e1a09189 	lsl	r9, r9, #3
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 100cef0:	eb00091c 	bl	100f368 <d_printf>
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cef4:	e5942008 	ldr	r2, [r4, #8]
 100cef8:	e3091648 	movw	r1, #38472	; 0x9648
 100cefc:	e1a03006 	mov	r3, r6
 100cf00:	e1cd80f0 	strd	r8, [sp]
 100cf04:	e3401106 	movt	r1, #262	; 0x106
 100cf08:	e3a00001 	mov	r0, #1
 100cf0c:	e0822006 	add	r2, r2, r6
		buffer += (end - start);
 100cf10:	e0879008 	add	r9, r7, r8
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cf14:	eb000913 	bl	100f368 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100cf18:	e5941008 	ldr	r1, [r4, #8]
 100cf1c:	e1a02008 	mov	r2, r8
 100cf20:	e1a00007 	mov	r0, r7
		buffer += start;
 100cf24:	e0897006 	add	r7, r9, r6
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100cf28:	e0811006 	add	r1, r1, r6
 100cf2c:	eb0040b3 	bl	101d200 <memcpy>
		d_printf(D_EXINFO, "1. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq, 0, start * 4, start * 4);
 100cf30:	e3091680 	movw	r1, #38528	; 0x9680
 100cf34:	e5942008 	ldr	r2, [r4, #8]
 100cf38:	e3a03000 	mov	r3, #0
 100cf3c:	e58d6004 	str	r6, [sp, #4]
 100cf40:	e58d6000 	str	r6, [sp]
 100cf44:	e3401106 	movt	r1, #262	; 0x106
 100cf48:	e3a00001 	mov	r0, #1
 100cf4c:	eb000905 	bl	100f368 <d_printf>
		memcpy(buffer, wave->buff_acq, start * 4);
 100cf50:	e1a02006 	mov	r2, r6
 100cf54:	e5941008 	ldr	r1, [r4, #8]
 100cf58:	e1a00009 	mov	r0, r9
 100cf5c:	eb0040a7 	bl	101d200 <memcpy>
		start = g_acq_state.pre_sampct * 2;
 100cf60:	e595c788 	ldr	ip, [r5, #1928]	; 0x788
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cf64:	e30916b8 	movw	r1, #38584	; 0x96b8
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100cf68:	e595678c 	ldr	r6, [r5, #1932]	; 0x78c
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cf6c:	e3401106 	movt	r1, #262	; 0x106
 100cf70:	e5942008 	ldr	r2, [r4, #8]
 100cf74:	e3a00001 	mov	r0, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100cf78:	e08c3006 	add	r3, ip, r6
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cf7c:	e1a0518c 	lsl	r5, ip, #3
 100cf80:	e1a06186 	lsl	r6, r6, #3
 100cf84:	e1a03183 	lsl	r3, r3, #3
 100cf88:	e0822005 	add	r2, r2, r5
 100cf8c:	e58d3004 	str	r3, [sp, #4]
 100cf90:	e58d6000 	str	r6, [sp]
 100cf94:	e1a03005 	mov	r3, r5
 100cf98:	eb0008f2 	bl	100f368 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100cf9c:	e5941008 	ldr	r1, [r4, #8]
 100cfa0:	e1a00007 	mov	r0, r7
 100cfa4:	e1a02006 	mov	r2, r6
 100cfa8:	e0811005 	add	r1, r1, r5
}
 100cfac:	e28dd00c 	add	sp, sp, #12
 100cfb0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100cfb4:	ea004091 	b	101d200 <memcpy>

0100cfb8 <acq_dma_address_helper>:
 */
int acq_dma_address_helper(struct acq_buffer_t *wave, struct acq_dma_addr_t *addr_helper)
{
	uint32_t start, end;

	D_ASSERT(wave != NULL);
 100cfb8:	e3500000 	cmp	r0, #0
{
 100cfbc:	e92d4010 	push	{r4, lr}
 100cfc0:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(wave != NULL);
 100cfc4:	0a00001b 	beq	100d038 <acq_dma_address_helper+0x80>
	D_ASSERT(addr_helper != NULL);
 100cfc8:	e3510000 	cmp	r1, #0
 100cfcc:	0a000025 	beq	100d068 <acq_dma_address_helper+0xb0>

	//d_printf(D_INFO, "0x%08x 0x%02x", wave->trigger_at, wave->flags);

	if((wave->trigger_at & TRIGGER_INVALID_MASK) || !(wave->flags & ACQBUF_FLAG_READY_CSI)) {
 100cfd0:	e590300c 	ldr	r3, [r0, #12]
 100cfd4:	e3530000 	cmp	r3, #0
 100cfd8:	ba00002a 	blt	100d088 <acq_dma_address_helper+0xd0>
 100cfdc:	e1d021b0 	ldrh	r2, [r0, #16]
 100cfe0:	e3120c01 	tst	r2, #256	; 0x100
 100cfe4:	0a000027 	beq	100d088 <acq_dma_address_helper+0xd0>
	//end = ACQ_64SAMPCT_TO_32PTR(wave->pre_sz);

	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
	end = wave->pre_sz;

	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100cfe8:	e590c008 	ldr	ip, [r0, #8]
	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
 100cfec:	e3c33007 	bic	r3, r3, #7
	end = wave->pre_sz;
 100cff0:	e5902014 	ldr	r2, [r0, #20]
	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
 100cff4:	e2833008 	add	r3, r3, #8

	addr_helper->pre_lower_start = (uint32_t)wave->buff_acq;
	addr_helper->pre_lower_end = addr_helper->pre_lower_start + start;

	addr_helper->post_start = (uint32_t)wave->buff_acq + wave->pre_sz;
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100cff8:	e590e018 	ldr	lr, [r0, #24]

	addr_helper->wave_base = (uint32_t)wave->buff_acq;  // Alias for pre_lower_start but keeps the values distinct for future changes
	addr_helper->flags = ACQBUF_ALL_FLAGS;

	return ACQRES_OK;
 100cffc:	e3a00000 	mov	r0, #0
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100d000:	e083300c 	add	r3, r3, ip
	addr_helper->flags = ACQBUF_ALL_FLAGS;
 100d004:	e3a04007 	mov	r4, #7
	addr_helper->pre_upper_end = addr_helper->pre_upper_start + end - start;
 100d008:	e08c2002 	add	r2, ip, r2
	addr_helper->pre_lower_start = (uint32_t)wave->buff_acq;
 100d00c:	e581c000 	str	ip, [r1]
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100d010:	e08ee002 	add	lr, lr, r2
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100d014:	e5813008 	str	r3, [r1, #8]
	addr_helper->pre_lower_end = addr_helper->pre_lower_start + start;
 100d018:	e5813004 	str	r3, [r1, #4]
	addr_helper->pre_upper_end = addr_helper->pre_upper_start + end - start;
 100d01c:	e581200c 	str	r2, [r1, #12]
	addr_helper->post_start = (uint32_t)wave->buff_acq + wave->pre_sz;
 100d020:	e5812010 	str	r2, [r1, #16]
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100d024:	e581e014 	str	lr, [r1, #20]
	addr_helper->wave_base = (uint32_t)wave->buff_acq;  // Alias for pre_lower_start but keeps the values distinct for future changes
 100d028:	e581c018 	str	ip, [r1, #24]
	addr_helper->flags = ACQBUF_ALL_FLAGS;
 100d02c:	e5c1401c 	strb	r4, [r1, #28]
}
 100d030:	e28dd008 	add	sp, sp, #8
 100d034:	e8bd8010 	pop	{r4, pc}
	D_ASSERT(wave != NULL);
 100d038:	e3083474 	movw	r3, #33908	; 0x8474
 100d03c:	e30926f0 	movw	r2, #38640	; 0x96f0
 100d040:	e308149c 	movw	r1, #33948	; 0x849c
 100d044:	e3403106 	movt	r3, #262	; 0x106
 100d048:	e3402106 	movt	r2, #262	; 0x106
 100d04c:	e30006c4 	movw	r0, #1732	; 0x6c4
 100d050:	e58d0000 	str	r0, [sp]
	D_ASSERT(addr_helper != NULL);
 100d054:	e3a00004 	mov	r0, #4
 100d058:	e3401106 	movt	r1, #262	; 0x106
 100d05c:	eb0008c1 	bl	100f368 <d_printf>
 100d060:	e3e00062 	mvn	r0, #98	; 0x62
 100d064:	fa003af1 	blx	101bc30 <exit>
 100d068:	e30006c5 	movw	r0, #1733	; 0x6c5
 100d06c:	e3083474 	movw	r3, #33908	; 0x8474
 100d070:	e3092700 	movw	r2, #38656	; 0x9700
 100d074:	e308149c 	movw	r1, #33948	; 0x849c
 100d078:	e58d0000 	str	r0, [sp]
 100d07c:	e3403106 	movt	r3, #262	; 0x106
 100d080:	e3402106 	movt	r2, #262	; 0x106
 100d084:	eafffff2 	b	100d054 <acq_dma_address_helper+0x9c>
		return ACQRES_WAVE_NOT_READY;
 100d088:	e3e0000a 	mvn	r0, #10
 100d08c:	eaffffe7 	b	100d030 <acq_dma_address_helper+0x78>

0100d090 <acq_dma_address_helper_debug>:
 *
 * @param	wave			Pointer to the waveform struct for the address helper
 * @param	addr_helper		Pointer to an addr_helper struct
 */
void acq_dma_address_helper_debug(struct acq_buffer_t *wave, struct acq_dma_addr_t *addr_helper)
{
 100d090:	e92d4030 	push	{r4, r5, lr}
 100d094:	e1a04001 	mov	r4, r1
	d_printf(D_RAW, "WaveBase = 0x%08x, Trigger = 0x%08x, PrLS = 0x%08x, PrLE = 0x%08x, PrUS = 0x%08x, PrUE = 0x%08x, PoS = 0x%08x, PoE = 0x%08x, WavIdx = %3d, N = 0x%08x\r\n", \
 100d098:	e590e01c 	ldr	lr, [r0, #28]
{
 100d09c:	e24dd024 	sub	sp, sp, #36	; 0x24
 100d0a0:	e1a05000 	mov	r5, r0
	d_printf(D_RAW, "WaveBase = 0x%08x, Trigger = 0x%08x, PrLS = 0x%08x, PrLE = 0x%08x, PrUS = 0x%08x, PrUE = 0x%08x, PoS = 0x%08x, PoE = 0x%08x, WavIdx = %3d, N = 0x%08x\r\n", \
 100d0a4:	e3091714 	movw	r1, #38676	; 0x9714
 100d0a8:	e590c000 	ldr	ip, [r0]
 100d0ac:	e3401106 	movt	r1, #262	; 0x106
 100d0b0:	e5942014 	ldr	r2, [r4, #20]
 100d0b4:	e3a00000 	mov	r0, #0
 100d0b8:	e5943010 	ldr	r3, [r4, #16]
 100d0bc:	e58de01c 	str	lr, [sp, #28]
 100d0c0:	e594e00c 	ldr	lr, [r4, #12]
 100d0c4:	e58dc018 	str	ip, [sp, #24]
 100d0c8:	e594c008 	ldr	ip, [r4, #8]
 100d0cc:	e58d2014 	str	r2, [sp, #20]
 100d0d0:	e5942004 	ldr	r2, [r4, #4]
 100d0d4:	e58d3010 	str	r3, [sp, #16]
 100d0d8:	e5943000 	ldr	r3, [r4]
 100d0dc:	e98d5004 	stmib	sp, {r2, ip, lr}
 100d0e0:	e58d3000 	str	r3, [sp]
 100d0e4:	e1c520d8 	ldrd	r2, [r5, #8]
 100d0e8:	eb00089e 	bl	100f368 <d_printf>
			addr_helper->pre_lower_start, addr_helper->pre_lower_end, \
			addr_helper->pre_upper_start, addr_helper->pre_upper_end, \
			addr_helper->post_start, addr_helper->post_end,  wave->idx, wave->next);

	d_printf(D_RAW, "DeBASED:                                     PrLS = 0x%08x, PrLE = 0x%08x, PrUS = 0x%08x, PrUE = 0x%08x, PoS = 0x%08x, PoE = 0x%08x\r\n\r\n", \
			addr_helper->pre_lower_start - (uint32_t)wave->buff_acq, addr_helper->pre_lower_end - (uint32_t)wave->buff_acq, \
 100d0ec:	e5952008 	ldr	r2, [r5, #8]
	d_printf(D_RAW, "DeBASED:                                     PrLS = 0x%08x, PrLE = 0x%08x, PrUS = 0x%08x, PrUE = 0x%08x, PoS = 0x%08x, PoE = 0x%08x\r\n\r\n", \
 100d0f0:	e30917ac 	movw	r1, #38828	; 0x97ac
 100d0f4:	e5943014 	ldr	r3, [r4, #20]
 100d0f8:	e3401106 	movt	r1, #262	; 0x106
 100d0fc:	e5945010 	ldr	r5, [r4, #16]
 100d100:	e3a00000 	mov	r0, #0
 100d104:	e594e00c 	ldr	lr, [r4, #12]
 100d108:	e594c008 	ldr	ip, [r4, #8]
 100d10c:	e0433002 	sub	r3, r3, r2
 100d110:	e58d300c 	str	r3, [sp, #12]
 100d114:	e0455002 	sub	r5, r5, r2
 100d118:	e5943004 	ldr	r3, [r4, #4]
 100d11c:	e04ee002 	sub	lr, lr, r2
 100d120:	e5944000 	ldr	r4, [r4]
 100d124:	e04cc002 	sub	ip, ip, r2
 100d128:	e58d5008 	str	r5, [sp, #8]
 100d12c:	e0433002 	sub	r3, r3, r2
 100d130:	e58de004 	str	lr, [sp, #4]
 100d134:	e58dc000 	str	ip, [sp]
 100d138:	e0442002 	sub	r2, r4, r2
 100d13c:	eb000889 	bl	100f368 <d_printf>
			addr_helper->pre_upper_start - (uint32_t)wave->buff_acq, addr_helper->pre_upper_end - (uint32_t)wave->buff_acq, \
			addr_helper->post_start - (uint32_t)wave->buff_acq, addr_helper->post_end - (uint32_t)wave->buff_acq);
}
 100d140:	e28dd024 	add	sp, sp, #36	; 0x24
 100d144:	e8bd8030 	pop	{r4, r5, pc}

0100d148 <acq_dma_clipped_address_helper>:
	D_ASSERT(wave != NULL);
 100d148:	e3500000 	cmp	r0, #0
 * @return	ACQRES_OK if successful, ACQRES_WAVE_NOT_READY if waveform not
 * 			ready for pointer calculation (e.g. unfilled) or ACQRES_WAVE_BOUNDS_INVALID
 * 			if the range specified exceeds the valid range for the waveform.
 */
int acq_dma_clipped_address_helper(struct acq_buffer_t *wave, struct acq_wave_range_t *range, struct acq_dma_addr_t *addr_helper)
{
 100d14c:	e92d4030 	push	{r4, r5, lr}
 100d150:	e24dd014 	sub	sp, sp, #20
 100d154:	e58d200c 	str	r2, [sp, #12]
	D_ASSERT(wave != NULL);
 100d158:	0a00004d 	beq	100d294 <acq_dma_clipped_address_helper+0x14c>
	if((wave->trigger_at & TRIGGER_INVALID_MASK) || !(wave->flags & ACQBUF_FLAG_READY_CSI)) {
 100d15c:	e590300c 	ldr	r3, [r0, #12]
 100d160:	e3530000 	cmp	r3, #0
 100d164:	ba000043 	blt	100d278 <acq_dma_clipped_address_helper+0x130>
 100d168:	e1d021b0 	ldrh	r2, [r0, #16]
 100d16c:	e3120c01 	tst	r2, #256	; 0x100
 100d170:	0a000040 	beq	100d278 <acq_dma_clipped_address_helper+0x130>
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100d174:	e590c008 	ldr	ip, [r0, #8]
	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
 100d178:	e3c3e007 	bic	lr, r3, #7
	end = wave->pre_sz;
 100d17c:	e5904014 	ldr	r4, [r0, #20]
	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
 100d180:	e28ee008 	add	lr, lr, #8
	if(acq_dma_address_helper(wave, &addr_helper) != ACQRES_OK) {
		return ACQRES_WAVE_NOT_READY;
	}

	range_off = *range;
	range_off.start += addr_helper->wave_base;
 100d184:	e5912000 	ldr	r2, [r1]
	addr_helper->flags = ACQBUF_ALL_FLAGS;
 100d188:	e3a03007 	mov	r3, #7
	range_off.stop += addr_helper->wave_base;
 100d18c:	e5915004 	ldr	r5, [r1, #4]
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100d190:	e08ee00c 	add	lr, lr, ip
	addr_helper->pre_upper_end = addr_helper->pre_upper_start + end - start;
 100d194:	e084100c 	add	r1, r4, ip
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100d198:	e58de014 	str	lr, [sp, #20]
	addr_helper->pre_upper_end = addr_helper->pre_upper_start + end - start;
 100d19c:	e58d1018 	str	r1, [sp, #24]
	addr_helper->post_start = (uint32_t)wave->buff_acq + wave->pre_sz;
 100d1a0:	e58d101c 	str	r1, [sp, #28]
	addr_helper->pre_lower_end = addr_helper->pre_lower_start + start;
 100d1a4:	e58de010 	str	lr, [sp, #16]
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100d1a8:	e5900018 	ldr	r0, [r0, #24]
	addr_helper->wave_base = (uint32_t)wave->buff_acq;  // Alias for pre_lower_start but keeps the values distinct for future changes
 100d1ac:	e58dc024 	str	ip, [sp, #36]	; 0x24
	addr_helper->flags = ACQBUF_ALL_FLAGS;
 100d1b0:	e5cd3028 	strb	r3, [sp, #40]	; 0x28
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100d1b4:	e0801001 	add	r1, r0, r1
	addr_helper->pre_lower_start = (uint32_t)wave->buff_acq;
 100d1b8:	e58dc00c 	str	ip, [sp, #12]
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100d1bc:	e58d1020 	str	r1, [sp, #32]
	range_off.start += addr_helper->wave_base;
 100d1c0:	e59c3018 	ldr	r3, [ip, #24]

	addr_helper->pre_lower_start = MAX(addr_helper->pre_lower_start, range_off.start);
 100d1c4:	e59ce000 	ldr	lr, [ip]
	addr_helper->pre_lower_start = MIN(addr_helper->pre_lower_start, range_off.stop);

	addr_helper->pre_lower_end = MAX(addr_helper->pre_lower_end, range_off.start);
 100d1c8:	e59c0004 	ldr	r0, [ip, #4]
	range_off.start += addr_helper->wave_base;
 100d1cc:	e0832002 	add	r2, r3, r2
	range_off.stop += addr_helper->wave_base;
 100d1d0:	e0833005 	add	r3, r3, r5
	addr_helper->pre_lower_start = MAX(addr_helper->pre_lower_start, range_off.start);
 100d1d4:	e152000e 	cmp	r2, lr
	addr_helper->pre_lower_end = MIN(addr_helper->pre_lower_end, range_off.stop);

	addr_helper->pre_upper_start = MAX(addr_helper->pre_upper_start, range_off.start);
 100d1d8:	e59c1008 	ldr	r1, [ip, #8]
	addr_helper->pre_lower_start = MAX(addr_helper->pre_lower_start, range_off.start);
 100d1dc:	21a0e002 	movcs	lr, r2
	addr_helper->pre_upper_start = MIN(addr_helper->pre_upper_start, range_off.stop);

	addr_helper->pre_upper_end = MAX(addr_helper->pre_upper_end, range_off.start);
 100d1e0:	e59c400c 	ldr	r4, [ip, #12]
	addr_helper->pre_lower_start = MIN(addr_helper->pre_lower_start, range_off.stop);
 100d1e4:	e15e0003 	cmp	lr, r3
 100d1e8:	21a0e003 	movcs	lr, r3
	addr_helper->pre_lower_end = MAX(addr_helper->pre_lower_end, range_off.start);
 100d1ec:	e1520000 	cmp	r2, r0
 100d1f0:	21a00002 	movcs	r0, r2
	addr_helper->pre_lower_start = MIN(addr_helper->pre_lower_start, range_off.stop);
 100d1f4:	e58ce000 	str	lr, [ip]
	addr_helper->pre_lower_end = MIN(addr_helper->pre_lower_end, range_off.stop);
 100d1f8:	e1500003 	cmp	r0, r3
 100d1fc:	21a00003 	movcs	r0, r3
	addr_helper->pre_upper_start = MAX(addr_helper->pre_upper_start, range_off.start);
 100d200:	e1520001 	cmp	r2, r1
 100d204:	21a01002 	movcs	r1, r2
	addr_helper->pre_lower_end = MIN(addr_helper->pre_lower_end, range_off.stop);
 100d208:	e58c0004 	str	r0, [ip, #4]
	addr_helper->pre_upper_start = MIN(addr_helper->pre_upper_start, range_off.stop);
 100d20c:	e1510003 	cmp	r1, r3
 100d210:	21a01003 	movcs	r1, r3
	addr_helper->pre_upper_end = MAX(addr_helper->pre_upper_end, range_off.start);
 100d214:	e1520004 	cmp	r2, r4
 100d218:	31a02004 	movcc	r2, r4
	addr_helper->pre_upper_start = MIN(addr_helper->pre_upper_start, range_off.stop);
 100d21c:	e58c1008 	str	r1, [ip, #8]
	addr_helper->pre_upper_end = MIN(addr_helper->pre_upper_end, range_off.stop);
 100d220:	e1520003 	cmp	r2, r3
 100d224:	21a02003 	movcs	r2, r3

	addr_helper->post_start = MAX(addr_helper->pre_upper_start, range_off.start);
	addr_helper->post_start = MIN(addr_helper->pre_upper_start, range_off.stop);
 100d228:	e1530001 	cmp	r3, r1
 100d22c:	31a04003 	movcc	r4, r3
 100d230:	21a04001 	movcs	r4, r1

	addr_helper->post_end = MAX(addr_helper->pre_upper_end, range_off.start);
	addr_helper->post_end = MIN(addr_helper->pre_upper_end, range_off.stop);
 100d234:	e1530002 	cmp	r3, r2
	addr_helper->pre_upper_end = MIN(addr_helper->pre_upper_end, range_off.stop);
 100d238:	e58c200c 	str	r2, [ip, #12]
	addr_helper->post_end = MIN(addr_helper->pre_upper_end, range_off.stop);
 100d23c:	21a03002 	movcs	r3, r2

	if(addr_helper->pre_lower_start == addr_helper->pre_lower_end) {
 100d240:	e15e0000 	cmp	lr, r0
	addr_helper->post_start = MIN(addr_helper->pre_upper_start, range_off.stop);
 100d244:	e58c4010 	str	r4, [ip, #16]
	addr_helper->post_end = MIN(addr_helper->pre_upper_end, range_off.stop);
 100d248:	e58c3014 	str	r3, [ip, #20]
	if(addr_helper->pre_lower_start == addr_helper->pre_lower_end) {
 100d24c:	0a00000c 	beq	100d284 <acq_dma_clipped_address_helper+0x13c>
		addr_helper->flags &= ~ACQBUF_PRE_LOWER_VALID;
	}

	if(addr_helper->pre_upper_start == addr_helper->pre_upper_end) {
 100d250:	e1510002 	cmp	r1, r2
		addr_helper->flags &= ~ACQBUF_PRE_UPPER_VALID;
 100d254:	05dc201c 	ldrbeq	r2, [ip, #28]
 100d258:	03c22002 	biceq	r2, r2, #2
 100d25c:	05cc201c 	strbeq	r2, [ip, #28]
	}

	if(addr_helper->post_start == addr_helper->post_end) {
 100d260:	e1540003 	cmp	r4, r3
		addr_helper->flags &= ~ACQBUF_POST_VALID;
 100d264:	05dc301c 	ldrbeq	r3, [ip, #28]
 100d268:	03c33004 	biceq	r3, r3, #4
 100d26c:	05cc301c 	strbeq	r3, [ip, #28]
	}
}
 100d270:	e28dd014 	add	sp, sp, #20
 100d274:	e8bd8030 	pop	{r4, r5, pc}
		return ACQRES_WAVE_NOT_READY;
 100d278:	e3e0000a 	mvn	r0, #10
}
 100d27c:	e28dd014 	add	sp, sp, #20
 100d280:	e8bd8030 	pop	{r4, r5, pc}
		addr_helper->flags &= ~ACQBUF_PRE_LOWER_VALID;
 100d284:	e5dc001c 	ldrb	r0, [ip, #28]
 100d288:	e3c00001 	bic	r0, r0, #1
 100d28c:	e5cc001c 	strb	r0, [ip, #28]
 100d290:	eaffffee 	b	100d250 <acq_dma_clipped_address_helper+0x108>
	D_ASSERT(wave != NULL);
 100d294:	e30006c4 	movw	r0, #1732	; 0x6c4
 100d298:	e3083474 	movw	r3, #33908	; 0x8474
 100d29c:	e30926f0 	movw	r2, #38640	; 0x96f0
 100d2a0:	e308149c 	movw	r1, #33948	; 0x849c
 100d2a4:	e58d0000 	str	r0, [sp]
 100d2a8:	e3403106 	movt	r3, #262	; 0x106
 100d2ac:	e3a00004 	mov	r0, #4
 100d2b0:	e3402106 	movt	r2, #262	; 0x106
 100d2b4:	e3401106 	movt	r1, #262	; 0x106
 100d2b8:	eb00082a 	bl	100f368 <d_printf>
 100d2bc:	e3e00062 	mvn	r0, #98	; 0x62
 100d2c0:	fa003a5a 	blx	101bc30 <exit>

0100d2c4 <acq_get_wave_size_bytes>:
 */
unsigned int acq_get_wave_size_bytes(int region)
{
	unsigned int size = 0;

	if(region & ACQ_REGION_PRE)
 100d2c4:	e2103001 	ands	r3, r0, #1
{
 100d2c8:	e1a02000 	mov	r2, r0
		size += g_acq_state.pre_buffsz;
 100d2cc:	130532d8 	movwne	r3, #21208	; 0x52d8
	unsigned int size = 0;
 100d2d0:	01a00003 	moveq	r0, r3
		size += g_acq_state.pre_buffsz;
 100d2d4:	13403107 	movtne	r3, #263	; 0x107
 100d2d8:	15930764 	ldrne	r0, [r3, #1892]	; 0x764

	if(region & ACQ_REGION_POST)
 100d2dc:	e3120002 	tst	r2, #2
		size += g_acq_state.post_buffsz;
 100d2e0:	130532d8 	movwne	r3, #21208	; 0x52d8
 100d2e4:	13403107 	movtne	r3, #263	; 0x107
 100d2e8:	15933768 	ldrne	r3, [r3, #1896]	; 0x768
 100d2ec:	10800003 	addne	r0, r0, r3

	return size;
}
 100d2f0:	e12fff1e 	bx	lr

0100d2f4 <acq_get_wave_bit_depth>:
 */
int acq_get_wave_bit_depth()
{
	int res = 0;

	if(g_acq_state.acq_mode_flags & ACQ_MODE_8BIT)
 100d2f4:	e30532d8 	movw	r3, #21208	; 0x52d8
 100d2f8:	e300275c 	movw	r2, #1884	; 0x75c
 100d2fc:	e3403107 	movt	r3, #263	; 0x107
 100d300:	e19330b2 	ldrh	r3, [r3, r2]
 100d304:	e3130001 	tst	r3, #1
		res = 8;
 100d308:	13a00008 	movne	r0, #8
 100d30c:	03a00000 	moveq	r0, #0

	if(g_acq_state.acq_mode_flags & ACQ_MODE_12BIT)
 100d310:	e3130002 	tst	r3, #2
		res = 12;
 100d314:	13a0000c 	movne	r0, #12

	if(g_acq_state.acq_mode_flags & ACQ_MODE_14BIT)
 100d318:	e3130004 	tst	r3, #4
		res = 14;

	return res;
}
 100d31c:	13a0000e 	movne	r0, #14
 100d320:	e12fff1e 	bx	lr

0100d324 <acq_get_wave_bit_packed_depth>:
 */
int acq_get_wave_bit_packed_depth()
{
	int res = 0;

	if(g_acq_state.acq_mode_flags & ACQ_MODE_8BIT)
 100d324:	e30532d8 	movw	r3, #21208	; 0x52d8
 100d328:	e300275c 	movw	r2, #1884	; 0x75c
 100d32c:	e3403107 	movt	r3, #263	; 0x107
 100d330:	e19330b2 	ldrh	r3, [r3, r2]
 100d334:	e3130001 	tst	r3, #1
		res = 8;
 100d338:	13a00008 	movne	r0, #8
 100d33c:	03a00000 	moveq	r0, #0

	if(g_acq_state.acq_mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT))
 100d340:	e3130006 	tst	r3, #6
		res = 16;

	return res;
}
 100d344:	13a00010 	movne	r0, #16
 100d348:	e12fff1e 	bx	lr
 100d34c:	00000000 	andeq	r0, r0, r0

0100d350 <clkwiz_init>:
 * an empty `struct clkwiz_interface_t`. For reasons unknown to me,
 * the refclk frequency stored in the ClkWiz is invalid, so an external
 * refclk must be specified as `refclk_freq`.
 */
void clkwiz_init(struct clkwiz_interface_t *ifc, uint32_t device_id, float refclk_freq)
{
 100d350:	e92d4010 	push	{r4, lr}
 100d354:	e1a04000 	mov	r4, r0
 100d358:	ed2d8b02 	vpush	{d8}
	int i;
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 100d35c:	e1a00001 	mov	r0, r1
{
 100d360:	e24dd008 	sub	sp, sp, #8
 100d364:	eeb08a40 	vmov.f32	s16, s0
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 100d368:	eb002121 	bl	10157f4 <XClk_Wiz_LookupConfig>

	D_ASSERT(clkcfg != NULL);
 100d36c:	e2503000 	subs	r3, r0, #0
 100d370:	0a000022 	beq	100d400 <clkwiz_init+0xb0>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 100d374:	eef77a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 100d378:	eeb48ae7 	vcmpe.f32	s16, s15
 100d37c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d380:	da000012 	ble	100d3d0 <clkwiz_init+0x80>
 100d384:	eddf7a25 	vldr	s15, [pc, #148]	; 100d420 <clkwiz_init+0xd0>
 100d388:	eeb48ae7 	vcmpe.f32	s16, s15
 100d38c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d390:	5a00000e 	bpl	100d3d0 <clkwiz_init+0x80>

	ifc->wiz_cfg = clkcfg;
 100d394:	e5843000 	str	r3, [r4]
	ifc->refclk_freq = refclk_freq;

	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 100d398:	e1a01003 	mov	r1, r3
 100d39c:	e5932004 	ldr	r2, [r3, #4]
 100d3a0:	e2840008 	add	r0, r4, #8
	ifc->refclk_freq = refclk_freq;
 100d3a4:	ed848a24 	vstr	s16, [r4, #144]	; 0x90
	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 100d3a8:	eb0020c7 	bl	10156cc <XClk_Wiz_CfgInitialize>

	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 100d3ac:	e5943000 	ldr	r3, [r4]
 100d3b0:	e3091974 	movw	r1, #39284	; 0x9974
 100d3b4:	e3401106 	movt	r1, #262	; 0x106
 100d3b8:	e3a00002 	mov	r0, #2
 100d3bc:	e5932004 	ldr	r2, [r3, #4]
}
 100d3c0:	e28dd008 	add	sp, sp, #8
 100d3c4:	ecbd8b02 	vpop	{d8}
 100d3c8:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 100d3cc:	ea0007e5 	b	100f368 <d_printf>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 100d3d0:	e309391c 	movw	r3, #39196	; 0x991c
 100d3d4:	e3092948 	movw	r2, #39240	; 0x9948
 100d3d8:	e308149c 	movw	r1, #33948	; 0x849c
 100d3dc:	e3403106 	movt	r3, #262	; 0x106
 100d3e0:	e3402106 	movt	r2, #262	; 0x106
 100d3e4:	e3a00020 	mov	r0, #32
 100d3e8:	e58d0000 	str	r0, [sp]
 100d3ec:	e3a00004 	mov	r0, #4
 100d3f0:	e3401106 	movt	r1, #262	; 0x106
 100d3f4:	eb0007db 	bl	100f368 <d_printf>
 100d3f8:	e3e00062 	mvn	r0, #98	; 0x62
 100d3fc:	fa003a0b 	blx	101bc30 <exit>
	D_ASSERT(clkcfg != NULL);
 100d400:	e3a0001f 	mov	r0, #31
 100d404:	e309391c 	movw	r3, #39196	; 0x991c
 100d408:	e3092938 	movw	r2, #39224	; 0x9938
 100d40c:	e308149c 	movw	r1, #33948	; 0x849c
 100d410:	e58d0000 	str	r0, [sp]
 100d414:	e3403106 	movt	r3, #262	; 0x106
 100d418:	e3402106 	movt	r2, #262	; 0x106
 100d41c:	eafffff2 	b	100d3ec <clkwiz_init+0x9c>
 100d420:	44480000 	.word	0x44480000

0100d424 <clkwiz_change_mipi_freq>:
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
	int solved = 0, solver_iters = 0;
	uint32_t ccfg_0, clkout_div;

	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 100d424:	eeb50ac0 	vcmpe.f32	s0, #0.0
 100d428:	eef1fa10 	vmrs	APSR_nzcv, fpscr
{
 100d42c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 100d430:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 100d434:	da00009c 	ble	100d6ac <clkwiz_change_mipi_freq+0x288>
 100d438:	ed9f7aae 	vldr	s14, [pc, #696]	; 100d6f8 <clkwiz_change_mipi_freq+0x2d4>
 100d43c:	eeb40ac7 	vcmpe.f32	s0, s14
 100d440:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d444:	5a000098 	bpl	100d6ac <clkwiz_change_mipi_freq+0x288>

	// Compute the closest divider assuming an 800MHz FBOUT.
	// Above 600MHz divider is forced to 1.
	if(new_freq >= 600) {
 100d448:	eddf7aab 	vldr	s15, [pc, #684]	; 100d6fc <clkwiz_change_mipi_freq+0x2d8>
 100d44c:	e1a06000 	mov	r6, r0
 100d450:	eeb40ae7 	vcmpe.f32	s0, s15
 100d454:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d458:	ba000075 	blt	100d634 <clkwiz_change_mipi_freq+0x210>
 100d45c:	eeb73a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 100d460:	e3a05001 	mov	r5, #1
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 100d464:	eddf6aa5 	vldr	s13, [pc, #660]	; 100d700 <clkwiz_change_mipi_freq+0x2dc>
	int solved = 0, solver_iters = 0;
 100d468:	e3a00000 	mov	r0, #0
	 * with minimal error, though the search algorithm could be substantially improved
	 * with e.g. a binary search.
	 */
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 100d46c:	edd64a24 	vldr	s9, [r6, #144]	; 0x90
	int solved = 0, solver_iters = 0;
 100d470:	e1a0e000 	mov	lr, r0
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 100d474:	ed9f7aa2 	vldr	s14, [pc, #648]	; 100d704 <clkwiz_change_mipi_freq+0x2e0>
	int best_fb_mult = 0, best_fb_frac = 0;
 100d478:	e1a04000 	mov	r4, r0
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 100d47c:	ed9f5aa1 	vldr	s10, [pc, #644]	; 100d708 <clkwiz_change_mipi_freq+0x2e4>
	int best_fb_mult = 0, best_fb_frac = 0;
 100d480:	e1a07000 	mov	r7, r0

			// Skip invalid frequencies.
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100d484:	eddf5a9c 	vldr	s11, [pc, #624]	; 100d6fc <clkwiz_change_mipi_freq+0x2d8>
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 100d488:	e1a03000 	mov	r3, r0
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100d48c:	eddf3a9e 	vldr	s7, [pc, #632]	; 100d70c <clkwiz_change_mipi_freq+0x2e8>
				best_fb_mult = fb_mult;
				best_fb_frac = fb_frac;
				best_fbout_freq = fbout_freq;

				// If < 10Hz error, end
				if(best_error < 1e-5) {
 100d490:	eddf1b94 	vldr	d17, [pc, #592]	; 100d6e8 <clkwiz_change_mipi_freq+0x2c4>
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
 100d494:	eef07a66 	vmov.f32	s15, s13
 100d498:	eeb04a47 	vmov.f32	s8, s14
 100d49c:	e1a0c004 	mov	ip, r4
 100d4a0:	ee073a10 	vmov	s14, r3
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 100d4a4:	e3a04000 	mov	r4, #0
 100d4a8:	eeb86ac7 	vcvt.f32.s32	s12, s14
 100d4ac:	ee161a90 	vmov	r1, s13
 100d4b0:	ee172a90 	vmov	r2, s15
 100d4b4:	ea000007 	b	100d4d8 <clkwiz_change_mipi_freq+0xb4>
				best_error = error;
 100d4b8:	eeb04a47 	vmov.f32	s8, s14
 100d4bc:	e1a0c004 	mov	ip, r4
				best_freq = freq;
 100d4c0:	ee161a90 	vmov	r1, s13
 100d4c4:	e1a07003 	mov	r7, r3
				best_fbout_freq = fbout_freq;
 100d4c8:	ee172a90 	vmov	r2, s15
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 100d4cc:	e2844001 	add	r4, r4, #1
 100d4d0:	e3540ffa 	cmp	r4, #1000	; 0x3e8
 100d4d4:	0a000062 	beq	100d664 <clkwiz_change_mipi_freq+0x240>
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 100d4d8:	ee074a90 	vmov	s15, r4
 100d4dc:	eeb87ae7 	vcvt.f32.s32	s14, s15
 100d4e0:	eec77a05 	vdiv.f32	s15, s14, s10
 100d4e4:	ee777a86 	vadd.f32	s15, s15, s12
 100d4e8:	ee677aa4 	vmul.f32	s15, s15, s9
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100d4ec:	eef47ae5 	vcmpe.f32	s15, s11
 100d4f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d4f4:	4afffff4 	bmi	100d4cc <clkwiz_change_mipi_freq+0xa8>
 100d4f8:	eef47ae3 	vcmpe.f32	s15, s7
 100d4fc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d500:	cafffff1 	bgt	100d4cc <clkwiz_change_mipi_freq+0xa8>
			freq = fbout_freq / div;
 100d504:	eec76a83 	vdiv.f32	s13, s15, s6
			solver_iters++;
 100d508:	e2800001 	add	r0, r0, #1
			error = fabs(new_freq - freq);
 100d50c:	ee307a66 	vsub.f32	s14, s0, s13
 100d510:	eeb07ac7 	vabs.f32	s14, s14
			if(error < best_error) {
 100d514:	eeb47ac4 	vcmpe.f32	s14, s8
 100d518:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d51c:	5affffea 	bpl	100d4cc <clkwiz_change_mipi_freq+0xa8>
				if(best_error < 1e-5) {
 100d520:	eef70ac7 	vcvt.f64.f32	d16, s14
 100d524:	eef40be1 	vcmpe.f64	d16, d17
 100d528:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d52c:	5affffe1 	bpl	100d4b8 <clkwiz_change_mipi_freq+0x94>
 100d530:	e1a07003 	mov	r7, r3
					solved = 1;
 100d534:	e3a0e001 	mov	lr, #1
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 100d538:	e2833001 	add	r3, r3, #1
 100d53c:	e3530008 	cmp	r3, #8
 100d540:	1affffd4 	bne	100d498 <clkwiz_change_mipi_freq+0x74>
			}
		}
	}

	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100d544:	eef71ac7 	vcvt.f64.f32	d17, s14
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 100d548:	e35e0000 	cmp	lr, #0
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100d54c:	eddf3b67 	vldr	d19, [pc, #412]	; 100d6f0 <clkwiz_change_mipi_freq+0x2cc>
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 100d550:	13a0c059 	movne	ip, #89	; 0x59
 100d554:	eef70ae7 	vcvt.f64.f32	d16, s15
 100d558:	03a0c04e 	moveq	ip, #78	; 0x4e
 100d55c:	eef72ae6 	vcvt.f64.f32	d18, s13
 100d560:	e30919c8 	movw	r1, #39368	; 0x99c8
 100d564:	eeb70ac0 	vcvt.f64.f32	d0, s0
 100d568:	e3401106 	movt	r1, #262	; 0x106
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100d56c:	ee611ba3 	vmul.f64	d17, d17, d19
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 100d570:	e1a03004 	mov	r3, r4
 100d574:	e1a02007 	mov	r2, r7
 100d578:	e58d001c 	str	r0, [sp, #28]
 100d57c:	e58dc020 	str	ip, [sp, #32]
 100d580:	e3a00002 	mov	r0, #2
 100d584:	edcd0b00 	vstr	d16, [sp]
 100d588:	edcd2b02 	vstr	d18, [sp, #8]
 100d58c:	eefd7be1 	vcvt.s32.f64	s15, d17
 100d590:	ed8d0b04 	vstr	d0, [sp, #16]
 100d594:	edcd7a06 	vstr	s15, [sp, #24]
 100d598:	eb000772 	bl	100f368 <d_printf>

	// Write the settings to the registers and commit the clock change.
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 100d59c:	e5962000 	ldr	r2, [r6]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 100d5a0:	e1a03804 	lsl	r3, r4, #16
 100d5a4:	e3a01000 	mov	r1, #0
 100d5a8:	e1833407 	orr	r3, r3, r7, lsl #8
 100d5ac:	e30c0350 	movw	r0, #50000	; 0xc350
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 100d5b0:	e5922004 	ldr	r2, [r2, #4]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 100d5b4:	e3833341 	orr	r3, r3, #67108865	; 0x4000001
 100d5b8:	e5823200 	str	r3, [r2, #512]	; 0x200
 100d5bc:	e5821204 	str	r1, [r2, #516]	; 0x204
 100d5c0:	e5825208 	str	r5, [r2, #520]	; 0x208
 100d5c4:	e582120c 	str	r1, [r2, #524]	; 0x20c
 100d5c8:	e5820210 	str	r0, [r2, #528]	; 0x210
 100d5cc:	e5825214 	str	r5, [r2, #532]	; 0x214
 100d5d0:	e5821218 	str	r1, [r2, #536]	; 0x218
 100d5d4:	e582021c 	str	r0, [r2, #540]	; 0x21c
	return *(volatile u32 *) Addr;
 100d5d8:	e5923004 	ldr	r3, [r2, #4]
void clkwiz_commit(struct clkwiz_interface_t *ifc)
{
	int timeout = 100000;

	// Check that MMCM is locked already
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100d5dc:	e3130001 	tst	r3, #1
 100d5e0:	0a00002a 	beq	100d690 <clkwiz_change_mipi_freq+0x26c>
	*LocalAddr = Value;
 100d5e4:	e3a03003 	mov	r3, #3
 100d5e8:	e582325c 	str	r3, [r2, #604]	; 0x25c
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
	}

	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x03);	// Load and SEN set
	asm("nop");
 100d5ec:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d5f0:	e5962000 	ldr	r2, [r6]
	int timeout = 100000;
 100d5f4:	e30836a0 	movw	r3, #34464	; 0x86a0
 100d5f8:	e3a00000 	mov	r0, #0
 100d5fc:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d600:	e5922004 	ldr	r2, [r2, #4]
 100d604:	e2821004 	add	r1, r2, #4
 100d608:	e582025c 	str	r0, [r2, #604]	; 0x25c
 100d60c:	ea000001 	b	100d618 <clkwiz_change_mipi_freq+0x1f4>

	// Wait for re-lock
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 100d610:	e2533001 	subs	r3, r3, #1
 100d614:	3a000004 	bcc	100d62c <clkwiz_change_mipi_freq+0x208>
	return *(volatile u32 *) Addr;
 100d618:	e5912000 	ldr	r2, [r1]
 100d61c:	e3120001 	tst	r2, #1
 100d620:	0afffffa 	beq	100d610 <clkwiz_change_mipi_freq+0x1ec>

	if(timeout == 0) {
 100d624:	e3530000 	cmp	r3, #0
 100d628:	0a000012 	beq	100d678 <clkwiz_change_mipi_freq+0x254>
}
 100d62c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100d630:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		for(div = 1; div < 106; div++) {
 100d634:	e3a05001 	mov	r5, #1
 100d638:	ea000002 	b	100d648 <clkwiz_change_mipi_freq+0x224>
 100d63c:	e2855001 	add	r5, r5, #1
 100d640:	e355006a 	cmp	r5, #106	; 0x6a
 100d644:	0a000024 	beq	100d6dc <clkwiz_change_mipi_freq+0x2b8>
			freq = fbout_freq / div;
 100d648:	ee075a90 	vmov	s15, r5
 100d64c:	eeb83ae7 	vcvt.f32.s32	s6, s15
 100d650:	eec77a03 	vdiv.f32	s15, s14, s6
			if(freq <= new_freq) {
 100d654:	eeb40ae7 	vcmpe.f32	s0, s15
 100d658:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d65c:	bafffff6 	blt	100d63c <clkwiz_change_mipi_freq+0x218>
 100d660:	eaffff7f 	b	100d464 <clkwiz_change_mipi_freq+0x40>
 100d664:	eeb07a44 	vmov.f32	s14, s8
 100d668:	e1a0400c 	mov	r4, ip
 100d66c:	ee061a90 	vmov	s13, r1
 100d670:	ee072a90 	vmov	s15, r2
 100d674:	eaffffaf 	b	100d538 <clkwiz_change_mipi_freq+0x114>
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d678:	e3091a74 	movw	r1, #39540	; 0x9a74
 100d67c:	e3a00004 	mov	r0, #4
 100d680:	e3401106 	movt	r1, #262	; 0x106
}
 100d684:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100d688:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d68c:	ea000735 	b	100f368 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 100d690:	e3091a40 	movw	r1, #39488	; 0x9a40
 100d694:	e3a00004 	mov	r0, #4
 100d698:	e3401106 	movt	r1, #262	; 0x106
 100d69c:	eb000731 	bl	100f368 <d_printf>
 100d6a0:	e5963000 	ldr	r3, [r6]
 100d6a4:	e5932004 	ldr	r2, [r3, #4]
 100d6a8:	eaffffcd 	b	100d5e4 <clkwiz_change_mipi_freq+0x1c0>
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 100d6ac:	e3a00039 	mov	r0, #57	; 0x39
 100d6b0:	e309391c 	movw	r3, #39196	; 0x991c
 100d6b4:	e30929a0 	movw	r2, #39328	; 0x99a0
 100d6b8:	e308149c 	movw	r1, #33948	; 0x849c
 100d6bc:	e58d0000 	str	r0, [sp]
 100d6c0:	e3403106 	movt	r3, #262	; 0x106
 100d6c4:	e3a00004 	mov	r0, #4
 100d6c8:	e3402106 	movt	r2, #262	; 0x106
 100d6cc:	e3401106 	movt	r1, #262	; 0x106
 100d6d0:	eb000724 	bl	100f368 <d_printf>
 100d6d4:	e3e00062 	mvn	r0, #98	; 0x62
 100d6d8:	fa003954 	blx	101bc30 <exit>
 100d6dc:	ed9f3a0b 	vldr	s6, [pc, #44]	; 100d710 <clkwiz_change_mipi_freq+0x2ec>
 100d6e0:	eaffff5f 	b	100d464 <clkwiz_change_mipi_freq+0x40>
 100d6e4:	e320f000 	nop	{0}
 100d6e8:	88e368f1 	.word	0x88e368f1
 100d6ec:	3ee4f8b5 	.word	0x3ee4f8b5
 100d6f0:	00000000 	.word	0x00000000
 100d6f4:	412e8480 	.word	0x412e8480
 100d6f8:	44480000 	.word	0x44480000
 100d6fc:	44160000 	.word	0x44160000
 100d700:	00000000 	.word	0x00000000
 100d704:	501502f9 	.word	0x501502f9
 100d708:	447a0000 	.word	0x447a0000
 100d70c:	44960000 	.word	0x44960000
 100d710:	42d40000 	.word	0x42d40000

0100d714 <clkwiz_dump_state>:
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 100d714:	e5903000 	ldr	r3, [r0]
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d718:	e3091ab0 	movw	r1, #39600	; 0x9ab0
{
 100d71c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d720:	e1a02000 	mov	r2, r0
{
 100d724:	ed2d8b04 	vpush	{d8-d9}
 100d728:	e1a08000 	mov	r8, r0
 100d72c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d730:	e3401106 	movt	r1, #262	; 0x106
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 100d734:	e5933004 	ldr	r3, [r3, #4]
	uint32_t base_addr = 0x208;
 100d738:	e3a04f82 	mov	r4, #520	; 0x208
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d73c:	eddf7a91 	vldr	s15, [pc, #580]	; 100d988 <clkwiz_dump_state+0x274>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d740:	e3a05001 	mov	r5, #1
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d744:	ed909a24 	vldr	s18, [r0, #144]	; 0x90
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d748:	e3a00002 	mov	r0, #2
 100d74c:	e5936200 	ldr	r6, [r3, #512]	; 0x200
 100d750:	e3a09000 	mov	r9, #0
 100d754:	e593b204 	ldr	fp, [r3, #516]	; 0x204
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 100d758:	eeb08a67 	vmov.f32	s16, s15
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 100d75c:	e7e93856 	ubfx	r3, r6, #16, #10
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 100d760:	e7e7a456 	ubfx	sl, r6, #8, #8
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 100d764:	e6ef7076 	uxtb	r7, r6
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 100d768:	ee083a90 	vmov	s17, r3
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d76c:	eef86ae8 	vcvt.f32.s32	s13, s17
 100d770:	ee07aa10 	vmov	s14, sl
 100d774:	eeb87ac7 	vcvt.f32.s32	s14, s14
 100d778:	eec69aa7 	vdiv.f32	s19, s13, s15
 100d77c:	ee799a87 	vadd.f32	s19, s19, s14
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d780:	eb0006f8 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100d784:	e3091f80 	movw	r1, #40832	; 0x9f80
 100d788:	e3a00002 	mov	r0, #2
 100d78c:	e3401106 	movt	r1, #262	; 0x106
 100d790:	eb0006f4 	bl	100f368 <d_printf>
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 100d794:	e5983000 	ldr	r3, [r8]
 100d798:	e3091adc 	movw	r1, #39644	; 0x9adc
 100d79c:	e3401106 	movt	r1, #262	; 0x106
 100d7a0:	e3a00002 	mov	r0, #2
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d7a4:	ee299a89 	vmul.f32	s18, s19, s18
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 100d7a8:	e5932004 	ldr	r2, [r3, #4]
 100d7ac:	eb0006ed 	bl	100f368 <d_printf>
	d_printf(D_INFO, "Configured refclk freq: %2.5f MHz", ifc->refclk_freq);
 100d7b0:	edd87a24 	vldr	s15, [r8, #144]	; 0x90
 100d7b4:	e3091afc 	movw	r1, #39676	; 0x9afc
 100d7b8:	e3401106 	movt	r1, #262	; 0x106
 100d7bc:	e3a00002 	mov	r0, #2
 100d7c0:	eef70ae7 	vcvt.f64.f32	d16, s15
 100d7c4:	ec532b30 	vmov	r2, r3, d16
 100d7c8:	eb0006e6 	bl	100f368 <d_printf>
	d_printf(D_INFO, "CLKCFG0 register:       0x%08x", ccfg_0);
 100d7cc:	e3091b20 	movw	r1, #39712	; 0x9b20
 100d7d0:	e1a02006 	mov	r2, r6
 100d7d4:	e3401106 	movt	r1, #262	; 0x106
 100d7d8:	e3a00002 	mov	r0, #2
 100d7dc:	eb0006e1 	bl	100f368 <d_printf>
	d_printf(D_INFO, "CLKFBOUT register:      0x%08x", clkfbout_phase);
 100d7e0:	e3091b40 	movw	r1, #39744	; 0x9b40
 100d7e4:	e1a0200b 	mov	r2, fp
 100d7e8:	e3401106 	movt	r1, #262	; 0x106
 100d7ec:	e3a00002 	mov	r0, #2
 100d7f0:	eb0006dc 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100d7f4:	e3091f80 	movw	r1, #40832	; 0x9f80
 100d7f8:	e3a00002 	mov	r0, #2
 100d7fc:	e3401106 	movt	r1, #262	; 0x106
	clkfbout_frac_en = !!(ccfg_0 & (1 << 26));
 100d800:	e7e06d56 	ubfx	r6, r6, #26, #1
	d_printf(D_INFO, "");
 100d804:	eb0006d7 	bl	100f368 <d_printf>
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 100d808:	e3091b60 	movw	r1, #39776	; 0x9b60
 100d80c:	e1a02007 	mov	r2, r7
 100d810:	e3401106 	movt	r1, #262	; 0x106
 100d814:	e3a00002 	mov	r0, #2
 100d818:	eb0006d2 	bl	100f368 <d_printf>
	d_printf(D_INFO, "CLKFBOUT multiplier:    %2.5f (MULT=%d, FRAC=%d, FRAC_EN=%d)", \
 100d81c:	eef70ae9 	vcvt.f64.f32	d16, s19
 100d820:	e3091b7c 	movw	r1, #39804	; 0x9b7c
 100d824:	edcd8a01 	vstr	s17, [sp, #4]
 100d828:	e3401106 	movt	r1, #262	; 0x106
 100d82c:	e3a00002 	mov	r0, #2
 100d830:	e58da000 	str	sl, [sp]
 100d834:	e58d6008 	str	r6, [sp, #8]
 100d838:	ec532b30 	vmov	r2, r3, d16
 100d83c:	eb0006c9 	bl	100f368 <d_printf>
	d_printf(D_INFO, "FBOUT frequency:        %2.5f MHz", fbout_freq);
 100d840:	eef70ac9 	vcvt.f64.f32	d16, s18
 100d844:	e3091bbc 	movw	r1, #39868	; 0x9bbc
 100d848:	e3401106 	movt	r1, #262	; 0x106
 100d84c:	e3a00002 	mov	r0, #2
 100d850:	ec532b30 	vmov	r2, r3, d16
 100d854:	eb0006c3 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 100d858:	e3091f80 	movw	r1, #40832	; 0x9f80
 100d85c:	e3a00002 	mov	r0, #2
 100d860:	e3401106 	movt	r1, #262	; 0x106
 100d864:	eb0006bf 	bl	100f368 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d868:	ee077a90 	vmov	s15, r7
 100d86c:	eef88ae7 	vcvt.f32.s32	s17, s15
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 100d870:	e5983000 	ldr	r3, [r8]
		if(i > 1) {
 100d874:	e3550001 	cmp	r5, #1
 100d878:	ee079a10 	vmov	s14, r9
			clk_frac = 0;
 100d87c:	e3a00000 	mov	r0, #0
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 100d880:	e5933004 	ldr	r3, [r3, #4]
 100d884:	e793c004 	ldr	ip, [r3, r4]
* @note		C-style signature:
* 		u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)
*
******************************************************************************/
static inline u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)  {
			return (Xil_In32((BaseAddress) + (u32)(RegOffset)));
 100d888:	e2832004 	add	r2, r3, #4
 100d88c:	e2833008 	add	r3, r3, #8
 100d890:	e7927004 	ldr	r7, [r2, r4]
 100d894:	e7936004 	ldr	r6, [r3, r4]
		clk_frac_en = !!(reg_divfrac & 0x00040000);
 100d898:	e7e0395c 	ubfx	r3, ip, #18, #1
		clk_div     =   (reg_divfrac & 0x000000ff);
 100d89c:	e6ef207c 	uxtb	r2, ip
		if(i > 1) {
 100d8a0:	0a000031 	beq	100d96c <clkwiz_dump_state+0x258>
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d8a4:	ee072a90 	vmov	s15, r2
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d8a8:	e3091be0 	movw	r1, #39904	; 0x9be0
 100d8ac:	e58dc000 	str	ip, [sp]
 100d8b0:	e3401106 	movt	r1, #262	; 0x106
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d8b4:	eef87ae7 	vcvt.f32.s32	s15, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d8b8:	e58d3020 	str	r3, [sp, #32]
 100d8bc:	e1a03004 	mov	r3, r4
 100d8c0:	e58d0010 	str	r0, [sp, #16]
 100d8c4:	e3a00002 	mov	r0, #2
 100d8c8:	e58d200c 	str	r2, [sp, #12]
 100d8cc:	e1a02005 	mov	r2, r5
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d8d0:	ee777a87 	vadd.f32	s15, s15, s14
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d8d4:	e2855001 	add	r5, r5, #1
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d8d8:	e58d6008 	str	r6, [sp, #8]
		base_addr += 12;
 100d8dc:	e284400c 	add	r4, r4, #12
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d8e0:	e58d7004 	str	r7, [sp, #4]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d8e4:	ee897a27 	vdiv.f32	s14, s18, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d8e8:	eef70ae7 	vcvt.f64.f32	d16, s15
 100d8ec:	edcd0b06 	vstr	d16, [sp, #24]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d8f0:	eec79a28 	vdiv.f32	s19, s14, s17
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d8f4:	eb00069b 	bl	100f368 <d_printf>
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d8f8:	ee077a90 	vmov	s15, r7
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d8fc:	e3091c48 	movw	r1, #40008	; 0x9c48
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d900:	eeb87a67 	vcvt.f32.u32	s14, s15
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d904:	e3401106 	movt	r1, #262	; 0x106
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d908:	ee076a90 	vmov	s15, r6
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d90c:	e3a00002 	mov	r0, #2
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d910:	eef87a67 	vcvt.f32.u32	s15, s15
 100d914:	eec76a08 	vdiv.f32	s13, s14, s16
 100d918:	ee877a88 	vdiv.f32	s14, s15, s16
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d91c:	eef70ae9 	vcvt.f64.f32	d16, s19
 100d920:	ec532b30 	vmov	r2, r3, d16
 100d924:	eef71ae6 	vcvt.f64.f32	d17, s13
 100d928:	eeb77ac7 	vcvt.f64.f32	d7, s14
 100d92c:	edcd1b02 	vstr	d17, [sp, #8]
 100d930:	ed8d7b00 	vstr	d7, [sp]
 100d934:	eb00068b 	bl	100f368 <d_printf>
		d_printf(D_INFO, "");
 100d938:	e3091f80 	movw	r1, #40832	; 0x9f80
 100d93c:	e3a00002 	mov	r0, #2
 100d940:	e3401106 	movt	r1, #262	; 0x106
 100d944:	eb000687 	bl	100f368 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d948:	e3550007 	cmp	r5, #7
 100d94c:	1affffc7 	bne	100d870 <clkwiz_dump_state+0x15c>
	d_printf(D_INFO, "");
 100d950:	e3091f80 	movw	r1, #40832	; 0x9f80
 100d954:	e3a00002 	mov	r0, #2
 100d958:	e3401106 	movt	r1, #262	; 0x106
}
 100d95c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100d960:	ecbd8b04 	vpop	{d8-d9}
 100d964:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "");
 100d968:	ea00067e 	b	100f368 <d_printf>
		clk_frac    =   (reg_divfrac & 0x0003ff00);
 100d96c:	e3a00cff 	mov	r0, #65280	; 0xff00
 100d970:	e3400003 	movt	r0, #3
 100d974:	e000000c 	and	r0, r0, ip
 100d978:	ee070a90 	vmov	s15, r0
 100d97c:	eef87ae7 	vcvt.f32.s32	s15, s15
 100d980:	ee877a88 	vdiv.f32	s14, s15, s16
 100d984:	eaffffc6 	b	100d8a4 <clkwiz_dump_state+0x190>
 100d988:	447a0000 	.word	0x447a0000

0100d98c <clkwiz_commit>:
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100d98c:	e5903000 	ldr	r3, [r0]
{
 100d990:	e92d4010 	push	{r4, lr}
 100d994:	e1a04000 	mov	r4, r0
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100d998:	e5933004 	ldr	r3, [r3, #4]
 100d99c:	e5932004 	ldr	r2, [r3, #4]
 100d9a0:	e3120001 	tst	r2, #1
 100d9a4:	0a000016 	beq	100da04 <clkwiz_commit+0x78>
	*LocalAddr = Value;
 100d9a8:	e3a02003 	mov	r2, #3
 100d9ac:	e583225c 	str	r2, [r3, #604]	; 0x25c
	asm("nop");
 100d9b0:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d9b4:	e5942000 	ldr	r2, [r4]
	int timeout = 100000;
 100d9b8:	e30836a0 	movw	r3, #34464	; 0x86a0
 100d9bc:	e3a00000 	mov	r0, #0
 100d9c0:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d9c4:	e5922004 	ldr	r2, [r2, #4]
 100d9c8:	e2821004 	add	r1, r2, #4
 100d9cc:	e582025c 	str	r0, [r2, #604]	; 0x25c
 100d9d0:	ea000001 	b	100d9dc <clkwiz_commit+0x50>
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 100d9d4:	e2533001 	subs	r3, r3, #1
 100d9d8:	38bd8010 	popcc	{r4, pc}
	return *(volatile u32 *) Addr;
 100d9dc:	e5912000 	ldr	r2, [r1]
 100d9e0:	e3120001 	tst	r2, #1
 100d9e4:	0afffffa 	beq	100d9d4 <clkwiz_commit+0x48>
	if(timeout == 0) {
 100d9e8:	e3530000 	cmp	r3, #0
 100d9ec:	18bd8010 	popne	{r4, pc}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d9f0:	e3091a74 	movw	r1, #39540	; 0x9a74
 100d9f4:	e3a00004 	mov	r0, #4
 100d9f8:	e3401106 	movt	r1, #262	; 0x106
	}
}
 100d9fc:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100da00:	ea000658 	b	100f368 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 100da04:	e3091a40 	movw	r1, #39488	; 0x9a40
 100da08:	e3a00004 	mov	r0, #4
 100da0c:	e3401106 	movt	r1, #262	; 0x106
 100da10:	eb000654 	bl	100f368 <d_printf>
 100da14:	e5943000 	ldr	r3, [r4]
 100da18:	e5933004 	ldr	r3, [r3, #4]
 100da1c:	eaffffe1 	b	100d9a8 <clkwiz_commit+0x1c>

0100da20 <dma_bd_init>:

/*
 * Initialise the DMA BD allocator.
 */
void dma_bd_init()
{
 100da20:	e92d4010 	push	{r4, lr}
	// Build sanity check
	D_ASSERT(sizeof(struct dma_bd_sg_descriptor_t) == BD_SIZE);

	// Allocate global void zone: a 'guaranteed' block of zeroes BD_VOID_ZONE_BYTES long.
	// Must be 32-byte aligned (i.e. along cache lines.)
	g_void_zone = memalign(32, BD_VOID_ZONE_BYTES);
 100da24:	e3a01801 	mov	r1, #65536	; 0x10000
 100da28:	e3a00020 	mov	r0, #32
 100da2c:	e3054b78 	movw	r4, #23416	; 0x5b78
 100da30:	e3404107 	movt	r4, #263	; 0x107
 100da34:	fa003b1d 	blx	101c6b0 <memalign>
	if(g_void_zone == NULL) {
 100da38:	e3500000 	cmp	r0, #0
	g_void_zone = memalign(32, BD_VOID_ZONE_BYTES);
 100da3c:	e5840000 	str	r0, [r4]
	if(g_void_zone == NULL) {
 100da40:	0a00000c 	beq	100da78 <dma_bd_init+0x58>
		d_printf(D_ERROR, "dma_bd: fatal error allocating void zone of %d bytes", BD_VOID_ZONE_BYTES);
		d_trap_handle();
		return;
	}

	memset(g_void_zone, 0x00, BD_VOID_ZONE_BYTES);
 100da44:	e3a02801 	mov	r2, #65536	; 0x10000
 100da48:	e3a01000 	mov	r1, #0
 100da4c:	fa003f97 	blx	101d8b0 <memset>
	Xil_DCacheFlushRange((INTPTR)g_void_zone, BD_VOID_ZONE_BYTES);
 100da50:	e5940000 	ldr	r0, [r4]
 100da54:	e3a01801 	mov	r1, #65536	; 0x10000
 100da58:	eb002db8 	bl	1019140 <Xil_DCacheFlushRange>

	d_printf(D_INFO, "dma_bd: void zone @ 0x%08x (%d bytes)", g_void_zone, BD_VOID_ZONE_BYTES);
 100da5c:	e3091ccc 	movw	r1, #40140	; 0x9ccc
 100da60:	e5942000 	ldr	r2, [r4]
 100da64:	e3401106 	movt	r1, #262	; 0x106
 100da68:	e3a03801 	mov	r3, #65536	; 0x10000
 100da6c:	e3a00002 	mov	r0, #2
}
 100da70:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "dma_bd: void zone @ 0x%08x (%d bytes)", g_void_zone, BD_VOID_ZONE_BYTES);
 100da74:	ea00063b 	b	100f368 <d_printf>
		d_printf(D_ERROR, "dma_bd: fatal error allocating void zone of %d bytes", BD_VOID_ZONE_BYTES);
 100da78:	e3091c94 	movw	r1, #40084	; 0x9c94
 100da7c:	e3a02801 	mov	r2, #65536	; 0x10000
 100da80:	e3401106 	movt	r1, #262	; 0x106
 100da84:	e3a00004 	mov	r0, #4
 100da88:	eb000636 	bl	100f368 <d_printf>
}
 100da8c:	e8bd4010 	pop	{r4, lr}
		d_trap_handle();
 100da90:	ea0008fb 	b	100fe84 <d_trap_handle>

0100da94 <dma_bd_create_ring>:
/*
 * Create a BD ring.  The initial tag is also created and allocated.  If this function fails,
 * `ring` is written with a NULL pointer and an error response is returned.
 */
int dma_bd_create_ring(struct dma_bd_ring_t **ring)
{
 100da94:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	struct dma_bd_ring_t *work;
	int res;

	work = calloc(sizeof(struct dma_bd_ring_t), 1);
 100da98:	e3a01001 	mov	r1, #1
{
 100da9c:	e24dd00c 	sub	sp, sp, #12
 100daa0:	e1a06000 	mov	r6, r0
	work = calloc(sizeof(struct dma_bd_ring_t), 1);
 100daa4:	e3a00038 	mov	r0, #56	; 0x38
 100daa8:	fa003842 	blx	101bbb8 <calloc>

	if(work == NULL) {
 100daac:	e2505000 	subs	r5, r0, #0
 100dab0:	0a000067 	beq	100dc54 <dma_bd_create_ring+0x1c0>
 */
int dma_bd_allocate(struct dma_bd_ring_t *ring, int n_bds_req, int first)
{
	int n_bds, bd_size;
	struct dma_bd_tag_t *tag;
	struct dma_bd_tag_t *next_tag = ring->current->next_alloc;
 100dab4:	e5953008 	ldr	r3, [r5, #8]
 100dab8:	e5934014 	ldr	r4, [r3, #20]

	/*
	 * If the ring has a next item then reuse that instead, after scrubbing it.
	 */
	if(next_tag != NULL) {
 100dabc:	e3540000 	cmp	r4, #0
 100dac0:	0a00001f 	beq	100db44 <dma_bd_create_ring+0xb0>
		if(next_tag->bd_base_ptr != NULL && next_tag->n_bds > 0) {
 100dac4:	e5943008 	ldr	r3, [r4, #8]
 100dac8:	e3530000 	cmp	r3, #0
 100dacc:	0a000002 	beq	100dadc <dma_bd_create_ring+0x48>
 100dad0:	e5942000 	ldr	r2, [r4]
 100dad4:	e3520000 	cmp	r2, #0
 100dad8:	ca000042 	bgt	100dbe8 <dma_bd_create_ring+0x154>
			next_tag->bd_last_ptr = next_tag->bd_base_ptr;
			next_tag->n_bds_free = next_tag->n_bds;
			return BD_RES_OK;
		} else {
			// Cleanup if invalid tag.  Should not happen.
			d_printf(D_WARN, "dma_bd: cleaning invalid tag 0x%08x", next_tag);
 100dadc:	e3091d20 	movw	r1, #40224	; 0x9d20
void dma_bd_free_from(struct dma_bd_tag_t *tag)
{
	struct dma_bd_tag_t *tag_next;

	while(tag != NULL) {
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dae0:	e3099d44 	movw	r9, #40260	; 0x9d44

		free(tag->bd_base_ptr);
		tag->bd_base_ptr = NULL;

		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dae4:	e3098d60 	movw	r8, #40288	; 0x9d60
			d_printf(D_WARN, "dma_bd: cleaning invalid tag 0x%08x", next_tag);
 100dae8:	e3401106 	movt	r1, #262	; 0x106
 100daec:	e1a02004 	mov	r2, r4
 100daf0:	e3a00003 	mov	r0, #3
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100daf4:	e3409106 	movt	r9, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100daf8:	e3408106 	movt	r8, #262	; 0x106
			d_printf(D_WARN, "dma_bd: cleaning invalid tag 0x%08x", next_tag);
 100dafc:	eb000619 	bl	100f368 <d_printf>
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100db00:	e5942008 	ldr	r2, [r4, #8]
 100db04:	e1a01009 	mov	r1, r9
 100db08:	e3a00002 	mov	r0, #2
 100db0c:	eb000615 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100db10:	e5940008 	ldr	r0, [r4, #8]
 100db14:	fa003b2b 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100db18:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100db1c:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100db20:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100db24:	e1a01008 	mov	r1, r8
 100db28:	e3a00002 	mov	r0, #2
 100db2c:	eb00060d 	bl	100f368 <d_printf>

		tag_next = tag->next_alloc;
 100db30:	e5947014 	ldr	r7, [r4, #20]
		free(tag);
 100db34:	e1a00004 	mov	r0, r4
 100db38:	fa003b22 	blx	101c7c8 <free>
	while(tag != NULL) {
 100db3c:	e2574000 	subs	r4, r7, #0
 100db40:	1affffee 	bne	100db00 <dma_bd_create_ring+0x6c>
	tag = malloc(sizeof(struct dma_bd_tag_t));
 100db44:	e3a00018 	mov	r0, #24
 100db48:	fa003b1a 	blx	101c7b8 <malloc>
	if(tag == NULL) {
 100db4c:	e2504000 	subs	r4, r0, #0
 100db50:	0a00002a 	beq	100dc00 <dma_bd_create_ring+0x16c>
	tag->n_bds = n_bds;
 100db54:	e3a02080 	mov	r2, #128	; 0x80
 100db58:	e3a03080 	mov	r3, #128	; 0x80
	tag->bd_base_ptr = memalign(BD_ALIGN, bd_size);
 100db5c:	e3a01a02 	mov	r1, #8192	; 0x2000
	tag->n_bds = n_bds;
 100db60:	e1c420f0 	strd	r2, [r4]
	tag->bd_base_ptr = memalign(BD_ALIGN, bd_size);
 100db64:	e3a00040 	mov	r0, #64	; 0x40
 100db68:	fa003ad0 	blx	101c6b0 <memalign>
	D_ASSERT(((int)(tag->bd_base_ptr) % BD_ALIGN) == 0);
 100db6c:	e210703f 	ands	r7, r0, #63	; 0x3f
	tag->bd_last_ptr = 0;
 100db70:	e3a01000 	mov	r1, #0
	tag->bd_base_ptr->nxtdesc = tag->bd_base_ptr + 1;  // Create first nxtdesc reference  [TODO: Fix warning]
 100db74:	e2802040 	add	r2, r0, #64	; 0x40
	tag->bd_base_ptr = memalign(BD_ALIGN, bd_size);
 100db78:	e5840008 	str	r0, [r4, #8]
	tag->bd_working_ptr = tag->bd_base_ptr;
 100db7c:	e5840010 	str	r0, [r4, #16]
	tag->bd_last_ptr = 0;
 100db80:	e584100c 	str	r1, [r4, #12]
	tag->bd_base_ptr->nxtdesc = tag->bd_base_ptr + 1;  // Create first nxtdesc reference  [TODO: Fix warning]
 100db84:	e5802000 	str	r2, [r0]
	D_ASSERT(((int)(tag->bd_base_ptr) % BD_ALIGN) == 0);
 100db88:	1a000025 	bne	100dc24 <dma_bd_create_ring+0x190>
	memset(tag->bd_base_ptr, 0x00, bd_size);
 100db8c:	e3a02a02 	mov	r2, #8192	; 0x2000
 100db90:	e1a01007 	mov	r1, r7
 100db94:	fa003f45 	blx	101d8b0 <memset>
	ring->stats.num_bds_alloc += n_bds;
 100db98:	e5952010 	ldr	r2, [r5, #16]
 100db9c:	e5950014 	ldr	r0, [r5, #20]
	ring->stats.num_tags_alloc++;
 100dba0:	e5953020 	ldr	r3, [r5, #32]
 100dba4:	e5951024 	ldr	r1, [r5, #36]	; 0x24
	ring->stats.num_bds_alloc += n_bds;
 100dba8:	e2922080 	adds	r2, r2, #128	; 0x80
 100dbac:	e2a00000 	adc	r0, r0, #0
		ring->current = tag;
 100dbb0:	e5854008 	str	r4, [r5, #8]
	ring->stats.num_tags_alloc++;
 100dbb4:	e2933001 	adds	r3, r3, #1
		ring->base = tag;
 100dbb8:	e5854000 	str	r4, [r5]
	ring->stats.num_tags_alloc++;
 100dbbc:	e2a11000 	adc	r1, r1, #0
		ring->base = tag;
 100dbc0:	e5854004 	str	r4, [r5, #4]
	tag->next_alloc = NULL;
 100dbc4:	e5847014 	str	r7, [r4, #20]
	ring->stats.num_bds_alloc += n_bds;
 100dbc8:	e5852010 	str	r2, [r5, #16]
 100dbcc:	e5850014 	str	r0, [r5, #20]
	ring->stats.num_tags_alloc++;
 100dbd0:	e5853020 	str	r3, [r5, #32]
 100dbd4:	e5851024 	str	r1, [r5, #36]	; 0x24
	return BD_RES_OK;
 100dbd8:	e3a00000 	mov	r0, #0
	*ring = work;
 100dbdc:	e5865000 	str	r5, [r6]
}
 100dbe0:	e28dd00c 	add	sp, sp, #12
 100dbe4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
			ring->current = next_tag;
 100dbe8:	e5854008 	str	r4, [r5, #8]
			ring->last = ring->current;
 100dbec:	e5854004 	str	r4, [r5, #4]
			next_tag->bd_working_ptr = next_tag->bd_base_ptr;
 100dbf0:	e5843010 	str	r3, [r4, #16]
			next_tag->bd_last_ptr = next_tag->bd_base_ptr;
 100dbf4:	e584300c 	str	r3, [r4, #12]
			next_tag->n_bds_free = next_tag->n_bds;
 100dbf8:	e5842004 	str	r2, [r4, #4]
	if(res != BD_RES_OK) {
 100dbfc:	eafffff5 	b	100dbd8 <dma_bd_create_ring+0x144>
		d_printf(D_ERROR, "dma_bd: failed to allocate header block (%d bytes)", sizeof(struct dma_bd_tag_t));
 100dc00:	e3091d74 	movw	r1, #40308	; 0x9d74
 100dc04:	e3a02018 	mov	r2, #24
 100dc08:	e3401106 	movt	r1, #262	; 0x106
 100dc0c:	e3a00004 	mov	r0, #4
 100dc10:	eb0005d4 	bl	100f368 <d_printf>
		return BD_RES_MEM_ALLOC_ERR;
 100dc14:	e3e00000 	mvn	r0, #0
		*ring = NULL;
 100dc18:	e5864000 	str	r4, [r6]
}
 100dc1c:	e28dd00c 	add	sp, sp, #12
 100dc20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	D_ASSERT(((int)(tag->bd_base_ptr) % BD_ALIGN) == 0);
 100dc24:	e3a000a3 	mov	r0, #163	; 0xa3
 100dc28:	e3093da8 	movw	r3, #40360	; 0x9da8
 100dc2c:	e3092db8 	movw	r2, #40376	; 0x9db8
 100dc30:	e308149c 	movw	r1, #33948	; 0x849c
 100dc34:	e58d0000 	str	r0, [sp]
 100dc38:	e3403106 	movt	r3, #262	; 0x106
 100dc3c:	e3a00004 	mov	r0, #4
 100dc40:	e3402106 	movt	r2, #262	; 0x106
 100dc44:	e3401106 	movt	r1, #262	; 0x106
 100dc48:	eb0005c6 	bl	100f368 <d_printf>
 100dc4c:	e3e00062 	mvn	r0, #98	; 0x62
 100dc50:	fa0037f6 	blx	101bc30 <exit>
		d_printf(D_ERROR, "dma_bd: failed to allocate ring (%d bytes)", sizeof(struct dma_bd_ring_t));
 100dc54:	e3091cf4 	movw	r1, #40180	; 0x9cf4
 100dc58:	e3a00004 	mov	r0, #4
 100dc5c:	e3a02038 	mov	r2, #56	; 0x38
 100dc60:	e3401106 	movt	r1, #262	; 0x106
 100dc64:	eb0005bf 	bl	100f368 <d_printf>
 100dc68:	e3e00000 	mvn	r0, #0
 100dc6c:	eaffffdb 	b	100dbe0 <dma_bd_create_ring+0x14c>

0100dc70 <dma_bd_destroy_ring>:
{
 100dc70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	D_ASSERT(ring != NULL);
 100dc74:	e2508000 	subs	r8, r0, #0
{
 100dc78:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(ring != NULL);
 100dc7c:	0a00001c 	beq	100dcf4 <dma_bd_destroy_ring+0x84>
 * Walk the list and free all BD blocks and tag entries.  The ring itself is
 * NOT freed.
 */
void dma_bd_free(struct dma_bd_ring_t *ring)
{
	dma_bd_free_from(ring->base);
 100dc80:	e5984000 	ldr	r4, [r8]
	while(tag != NULL) {
 100dc84:	e3540000 	cmp	r4, #0
 100dc88:	0a000014 	beq	100dce0 <dma_bd_destroy_ring+0x70>
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dc8c:	e3096d44 	movw	r6, #40260	; 0x9d44
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dc90:	e3095d60 	movw	r5, #40288	; 0x9d60
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dc94:	e3406106 	movt	r6, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dc98:	e3405106 	movt	r5, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dc9c:	e5942008 	ldr	r2, [r4, #8]
 100dca0:	e1a01006 	mov	r1, r6
 100dca4:	e3a00002 	mov	r0, #2
 100dca8:	eb0005ae 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100dcac:	e5940008 	ldr	r0, [r4, #8]
 100dcb0:	fa003ac4 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100dcb4:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dcb8:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100dcbc:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dcc0:	e1a01005 	mov	r1, r5
 100dcc4:	e3a00002 	mov	r0, #2
 100dcc8:	eb0005a6 	bl	100f368 <d_printf>
		tag_next = tag->next_alloc;
 100dccc:	e5947014 	ldr	r7, [r4, #20]
		free(tag);
 100dcd0:	e1a00004 	mov	r0, r4
 100dcd4:	fa003abb 	blx	101c7c8 <free>
	while(tag != NULL) {
 100dcd8:	e2574000 	subs	r4, r7, #0
 100dcdc:	1affffee 	bne	100dc9c <dma_bd_destroy_ring+0x2c>
	free(ring);
 100dce0:	e1a00008 	mov	r0, r8
 100dce4:	fa003ab7 	blx	101c7c8 <free>
}
 100dce8:	e3a00000 	mov	r0, #0
 100dcec:	e28dd008 	add	sp, sp, #8
 100dcf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	D_ASSERT(ring != NULL);
 100dcf4:	e3a0005c 	mov	r0, #92	; 0x5c
 100dcf8:	e3093da8 	movw	r3, #40360	; 0x9da8
 100dcfc:	e30a2bcc 	movw	r2, #43980	; 0xabcc
 100dd00:	e308149c 	movw	r1, #33948	; 0x849c
 100dd04:	e58d0000 	str	r0, [sp]
 100dd08:	e3403106 	movt	r3, #262	; 0x106
 100dd0c:	e3a00004 	mov	r0, #4
 100dd10:	e3402106 	movt	r2, #262	; 0x106
 100dd14:	e3401106 	movt	r1, #262	; 0x106
 100dd18:	eb000592 	bl	100f368 <d_printf>
 100dd1c:	e3e00062 	mvn	r0, #98	; 0x62
 100dd20:	fa0037c2 	blx	101bc30 <exit>

0100dd24 <dma_bd_allocate>:
	struct dma_bd_tag_t *next_tag = ring->current->next_alloc;
 100dd24:	e5903008 	ldr	r3, [r0, #8]
{
 100dd28:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 100dd2c:	e1a05000 	mov	r5, r0
 100dd30:	e24dd008 	sub	sp, sp, #8
 100dd34:	e1a06001 	mov	r6, r1
 100dd38:	e1a09002 	mov	r9, r2
	struct dma_bd_tag_t *next_tag = ring->current->next_alloc;
 100dd3c:	e5934014 	ldr	r4, [r3, #20]
	if(next_tag != NULL) {
 100dd40:	e3540000 	cmp	r4, #0
 100dd44:	0a00001f 	beq	100ddc8 <dma_bd_allocate+0xa4>
		if(next_tag->bd_base_ptr != NULL && next_tag->n_bds > 0) {
 100dd48:	e5943008 	ldr	r3, [r4, #8]
 100dd4c:	e3530000 	cmp	r3, #0
 100dd50:	0a000002 	beq	100dd60 <dma_bd_allocate+0x3c>
 100dd54:	e5942000 	ldr	r2, [r4]
 100dd58:	e3520000 	cmp	r2, #0
 100dd5c:	ca000047 	bgt	100de80 <dma_bd_allocate+0x15c>
			d_printf(D_WARN, "dma_bd: cleaning invalid tag 0x%08x", next_tag);
 100dd60:	e3091d20 	movw	r1, #40224	; 0x9d20
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dd64:	e309ad44 	movw	sl, #40260	; 0x9d44
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dd68:	e3098d60 	movw	r8, #40288	; 0x9d60
			d_printf(D_WARN, "dma_bd: cleaning invalid tag 0x%08x", next_tag);
 100dd6c:	e3401106 	movt	r1, #262	; 0x106
 100dd70:	e1a02004 	mov	r2, r4
 100dd74:	e3a00003 	mov	r0, #3
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dd78:	e340a106 	movt	sl, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dd7c:	e3408106 	movt	r8, #262	; 0x106
			d_printf(D_WARN, "dma_bd: cleaning invalid tag 0x%08x", next_tag);
 100dd80:	eb000578 	bl	100f368 <d_printf>
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dd84:	e5942008 	ldr	r2, [r4, #8]
 100dd88:	e1a0100a 	mov	r1, sl
 100dd8c:	e3a00002 	mov	r0, #2
 100dd90:	eb000574 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100dd94:	e5940008 	ldr	r0, [r4, #8]
 100dd98:	fa003a8a 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100dd9c:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dda0:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100dda4:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dda8:	e1a01008 	mov	r1, r8
 100ddac:	e3a00002 	mov	r0, #2
 100ddb0:	eb00056c 	bl	100f368 <d_printf>
		tag_next = tag->next_alloc;
 100ddb4:	e5947014 	ldr	r7, [r4, #20]
		free(tag);
 100ddb8:	e1a00004 	mov	r0, r4
 100ddbc:	fa003a81 	blx	101c7c8 <free>
	while(tag != NULL) {
 100ddc0:	e2574000 	subs	r4, r7, #0
 100ddc4:	1affffee 	bne	100dd84 <dma_bd_allocate+0x60>
	tag = malloc(sizeof(struct dma_bd_tag_t));
 100ddc8:	e3a00018 	mov	r0, #24
 100ddcc:	fa003a79 	blx	101c7b8 <malloc>
	if(tag == NULL) {
 100ddd0:	e2504000 	subs	r4, r0, #0
 100ddd4:	0a000042 	beq	100dee4 <dma_bd_allocate+0x1c0>
	if(n_bds_req == 0) {
 100ddd8:	e3560000 	cmp	r6, #0
 100dddc:	0a00002f 	beq	100dea0 <dma_bd_allocate+0x17c>
		if(n_bds_req > 0) {
 100dde0:	da00003d 	ble	100dedc <dma_bd_allocate+0x1b8>
 100dde4:	e1a07306 	lsl	r7, r6, #6
	tag->bd_base_ptr = memalign(BD_ALIGN, bd_size);
 100dde8:	e1a01007 	mov	r1, r7
	tag->n_bds = n_bds;
 100ddec:	e5846000 	str	r6, [r4]
 100ddf0:	e5846004 	str	r6, [r4, #4]
	tag->bd_base_ptr = memalign(BD_ALIGN, bd_size);
 100ddf4:	e3a00040 	mov	r0, #64	; 0x40
 100ddf8:	fa003a2c 	blx	101c6b0 <memalign>
	D_ASSERT(((int)(tag->bd_base_ptr) % BD_ALIGN) == 0);
 100ddfc:	e210103f 	ands	r1, r0, #63	; 0x3f
	tag->bd_last_ptr = 0;
 100de00:	e3a0c000 	mov	ip, #0
	tag->bd_base_ptr->nxtdesc = tag->bd_base_ptr + 1;  // Create first nxtdesc reference  [TODO: Fix warning]
 100de04:	e2802040 	add	r2, r0, #64	; 0x40
	tag->bd_base_ptr = memalign(BD_ALIGN, bd_size);
 100de08:	e5840008 	str	r0, [r4, #8]
	tag->bd_working_ptr = tag->bd_base_ptr;
 100de0c:	e5840010 	str	r0, [r4, #16]
	tag->bd_last_ptr = 0;
 100de10:	e584c00c 	str	ip, [r4, #12]
	tag->bd_base_ptr->nxtdesc = tag->bd_base_ptr + 1;  // Create first nxtdesc reference  [TODO: Fix warning]
 100de14:	e5802000 	str	r2, [r0]
	D_ASSERT(((int)(tag->bd_base_ptr) % BD_ALIGN) == 0);
 100de18:	1a000023 	bne	100deac <dma_bd_allocate+0x188>
	memset(tag->bd_base_ptr, 0x00, bd_size);
 100de1c:	e1a02007 	mov	r2, r7
 100de20:	fa003ea2 	blx	101d8b0 <memset>
	if(first == BD_FIRST_ENTRY) {
 100de24:	e3590001 	cmp	r9, #1
	ring->stats.num_tags_alloc++;
 100de28:	e5951020 	ldr	r1, [r5, #32]
		ring->current->bd_working_ptr = tag->bd_base_ptr;
 100de2c:	15953008 	ldrne	r3, [r5, #8]
	tag->next_alloc = NULL;
 100de30:	e3a00000 	mov	r0, #0
		ring->current->bd_working_ptr = tag->bd_base_ptr;
 100de34:	15942008 	ldrne	r2, [r4, #8]
	ring->stats.num_tags_alloc++;
 100de38:	e595c024 	ldr	ip, [r5, #36]	; 0x24
		ring->current->next_alloc = tag;
 100de3c:	15834014 	strne	r4, [r3, #20]
		ring->current->bd_working_ptr = tag->bd_base_ptr;
 100de40:	15832010 	strne	r2, [r3, #16]
	ring->stats.num_bds_alloc += n_bds;
 100de44:	e1c521d0 	ldrd	r2, [r5, #16]
		ring->current = tag;
 100de48:	05854008 	streq	r4, [r5, #8]
		ring->base = tag;
 100de4c:	05854000 	streq	r4, [r5]
 100de50:	05854004 	streq	r4, [r5, #4]
		ring->current = ring->current->next_alloc;
 100de54:	15854008 	strne	r4, [r5, #8]
	ring->stats.num_bds_alloc += n_bds;
 100de58:	e0928006 	adds	r8, r2, r6
 100de5c:	e0a39fc6 	adc	r9, r3, r6, asr #31
	ring->stats.num_tags_alloc++;
 100de60:	e2911001 	adds	r1, r1, #1
 100de64:	e0ac3000 	adc	r3, ip, r0
	tag->next_alloc = NULL;
 100de68:	e5840014 	str	r0, [r4, #20]
	ring->stats.num_bds_alloc += n_bds;
 100de6c:	e1c581f0 	strd	r8, [r5, #16]
	ring->stats.num_tags_alloc++;
 100de70:	e5851020 	str	r1, [r5, #32]
 100de74:	e5853024 	str	r3, [r5, #36]	; 0x24
}
 100de78:	e28dd008 	add	sp, sp, #8
 100de7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
			ring->current = next_tag;
 100de80:	e5804008 	str	r4, [r0, #8]
			return BD_RES_OK;
 100de84:	e3a00000 	mov	r0, #0
			ring->last = ring->current;
 100de88:	e5854004 	str	r4, [r5, #4]
			next_tag->bd_working_ptr = next_tag->bd_base_ptr;
 100de8c:	e5843010 	str	r3, [r4, #16]
			next_tag->bd_last_ptr = next_tag->bd_base_ptr;
 100de90:	e584300c 	str	r3, [r4, #12]
			next_tag->n_bds_free = next_tag->n_bds;
 100de94:	e5842004 	str	r2, [r4, #4]
}
 100de98:	e28dd008 	add	sp, sp, #8
 100de9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 100dea0:	e3a07a02 	mov	r7, #8192	; 0x2000
		n_bds = BD_ALLOC_BLOCK_COUNT;
 100dea4:	e3a06080 	mov	r6, #128	; 0x80
 100dea8:	eaffffce 	b	100dde8 <dma_bd_allocate+0xc4>
	D_ASSERT(((int)(tag->bd_base_ptr) % BD_ALIGN) == 0);
 100deac:	e3a000a3 	mov	r0, #163	; 0xa3
 100deb0:	e3093da8 	movw	r3, #40360	; 0x9da8
 100deb4:	e3092db8 	movw	r2, #40376	; 0x9db8
 100deb8:	e308149c 	movw	r1, #33948	; 0x849c
 100debc:	e58d0000 	str	r0, [sp]
 100dec0:	e3403106 	movt	r3, #262	; 0x106
 100dec4:	e3a00004 	mov	r0, #4
 100dec8:	e3402106 	movt	r2, #262	; 0x106
 100decc:	e3401106 	movt	r1, #262	; 0x106
 100ded0:	eb000524 	bl	100f368 <d_printf>
 100ded4:	e3e00062 	mvn	r0, #98	; 0x62
 100ded8:	fa003754 	blx	101bc30 <exit>
			return BD_RES_PARAM_ERR;
 100dedc:	e3e00001 	mvn	r0, #1
 100dee0:	eaffffe4 	b	100de78 <dma_bd_allocate+0x154>
		d_printf(D_ERROR, "dma_bd: failed to allocate header block (%d bytes)", sizeof(struct dma_bd_tag_t));
 100dee4:	e3091d74 	movw	r1, #40308	; 0x9d74
 100dee8:	e3a00004 	mov	r0, #4
 100deec:	e3a02018 	mov	r2, #24
 100def0:	e3401106 	movt	r1, #262	; 0x106
 100def4:	eb00051b 	bl	100f368 <d_printf>
		return BD_RES_MEM_ALLOC_ERR;
 100def8:	e3e00000 	mvn	r0, #0
 100defc:	eaffffdd 	b	100de78 <dma_bd_allocate+0x154>

0100df00 <dma_bd_free_from>:
{
 100df00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	while(tag != NULL) {
 100df04:	e2504000 	subs	r4, r0, #0
 100df08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100df0c:	e3097d44 	movw	r7, #40260	; 0x9d44
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100df10:	e3096d60 	movw	r6, #40288	; 0x9d60
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100df14:	e3407106 	movt	r7, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100df18:	e3406106 	movt	r6, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100df1c:	e5942008 	ldr	r2, [r4, #8]
 100df20:	e1a01007 	mov	r1, r7
 100df24:	e3a00002 	mov	r0, #2
 100df28:	eb00050e 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100df2c:	e5940008 	ldr	r0, [r4, #8]
 100df30:	fa003a24 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100df34:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100df38:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100df3c:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100df40:	e1a01006 	mov	r1, r6
 100df44:	e3a00002 	mov	r0, #2
 100df48:	eb000506 	bl	100f368 <d_printf>
		tag_next = tag->next_alloc;
 100df4c:	e5945014 	ldr	r5, [r4, #20]
		free(tag);
 100df50:	e1a00004 	mov	r0, r4
 100df54:	fa003a1b 	blx	101c7c8 <free>
	while(tag != NULL) {
 100df58:	e2554000 	subs	r4, r5, #0
 100df5c:	1affffee 	bne	100df1c <dma_bd_free_from+0x1c>
 100df60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0100df64 <dma_bd_free>:
{
 100df64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100df68:	e1a07000 	mov	r7, r0
	dma_bd_free_from(ring->base);
 100df6c:	e5904000 	ldr	r4, [r0]
	while(tag != NULL) {
 100df70:	e3540000 	cmp	r4, #0
 100df74:	0a000014 	beq	100dfcc <dma_bd_free+0x68>
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100df78:	e3096d44 	movw	r6, #40260	; 0x9d44
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100df7c:	e3095d60 	movw	r5, #40288	; 0x9d60
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100df80:	e3406106 	movt	r6, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100df84:	e3405106 	movt	r5, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100df88:	e5942008 	ldr	r2, [r4, #8]
 100df8c:	e1a01006 	mov	r1, r6
 100df90:	e3a00002 	mov	r0, #2
 100df94:	eb0004f3 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100df98:	e5940008 	ldr	r0, [r4, #8]
 100df9c:	fa003a09 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100dfa0:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dfa4:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100dfa8:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dfac:	e1a01005 	mov	r1, r5
 100dfb0:	e3a00002 	mov	r0, #2
 100dfb4:	eb0004eb 	bl	100f368 <d_printf>
		tag_next = tag->next_alloc;
 100dfb8:	e5948014 	ldr	r8, [r4, #20]
		free(tag);
 100dfbc:	e1a00004 	mov	r0, r4
 100dfc0:	fa003a00 	blx	101c7c8 <free>
	while(tag != NULL) {
 100dfc4:	e2584000 	subs	r4, r8, #0
 100dfc8:	1affffee 	bne	100df88 <dma_bd_free+0x24>
	ring->total_bd_count = 0;
 100dfcc:	e3a03000 	mov	r3, #0
 100dfd0:	e5873030 	str	r3, [r7, #48]	; 0x30
}
 100dfd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0100dfd8 <dma_bd_trim>:
 * Trim the list of blocks, freeing any unused blocks at the end of the BD ring.
 * This walks from the working pointer until it reaches a NULL next tag.
 */
void dma_bd_trim(struct dma_bd_ring_t *ring)
{
	if(ring->current->next_alloc != NULL) {
 100dfd8:	e5903008 	ldr	r3, [r0, #8]
{
 100dfdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if(ring->current->next_alloc != NULL) {
 100dfe0:	e5934014 	ldr	r4, [r3, #20]
 100dfe4:	e3540000 	cmp	r4, #0
 100dfe8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dfec:	e3098d44 	movw	r8, #40260	; 0x9d44
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dff0:	e3097d60 	movw	r7, #40288	; 0x9d60
 100dff4:	e1a05000 	mov	r5, r0
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100dff8:	e3408106 	movt	r8, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100dffc:	e3407106 	movt	r7, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100e000:	e5942008 	ldr	r2, [r4, #8]
 100e004:	e1a01008 	mov	r1, r8
 100e008:	e3a00002 	mov	r0, #2
 100e00c:	eb0004d5 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100e010:	e5940008 	ldr	r0, [r4, #8]
 100e014:	fa0039eb 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100e018:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100e01c:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100e020:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100e024:	e1a01007 	mov	r1, r7
 100e028:	e3a00002 	mov	r0, #2
 100e02c:	eb0004cd 	bl	100f368 <d_printf>
		tag_next = tag->next_alloc;
 100e030:	e5946014 	ldr	r6, [r4, #20]
		free(tag);
 100e034:	e1a00004 	mov	r0, r4
 100e038:	fa0039e2 	blx	101c7c8 <free>
	while(tag != NULL) {
 100e03c:	e2564000 	subs	r4, r6, #0
 100e040:	1affffee 	bne	100e000 <dma_bd_trim+0x28>
		dma_bd_free_from(ring->current->next_alloc);
		ring->current->next_alloc = NULL;
 100e044:	e5953008 	ldr	r3, [r5, #8]
 100e048:	e5834014 	str	r4, [r3, #20]
	}
}
 100e04c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0100e050 <dma_bd_rewind>:
 * in most cases, provided the peripheral is never pointed to the corrupt/incomplete
 * list fragments.
 */
void dma_bd_rewind(struct dma_bd_ring_t *ring)
{
	struct dma_bd_tag_t *tag = ring->base;
 100e050:	e590c000 	ldr	ip, [r0]

	while(tag != NULL) {
 100e054:	e35c0000 	cmp	ip, #0
 100e058:	0a000007 	beq	100e07c <dma_bd_rewind+0x2c>
 100e05c:	e1a0300c 	mov	r3, ip
		tag->n_bds_free = tag->n_bds;
 100e060:	e5931000 	ldr	r1, [r3]
		tag->bd_working_ptr = tag->bd_base_ptr;
 100e064:	e5932008 	ldr	r2, [r3, #8]
		tag->n_bds_free = tag->n_bds;
 100e068:	e5831004 	str	r1, [r3, #4]
		tag->bd_working_ptr = tag->bd_base_ptr;
 100e06c:	e5832010 	str	r2, [r3, #16]

		tag = tag->next_alloc;
 100e070:	e5933014 	ldr	r3, [r3, #20]
	while(tag != NULL) {
 100e074:	e3530000 	cmp	r3, #0
 100e078:	1afffff8 	bne	100e060 <dma_bd_rewind+0x10>
	}

	ring->total_bd_count = 0;
 100e07c:	e3a03000 	mov	r3, #0
	ring->current = ring->base;
 100e080:	e580c008 	str	ip, [r0, #8]
	ring->total_bd_count = 0;
 100e084:	e5803030 	str	r3, [r0, #48]	; 0x30
}
 100e088:	e12fff1e 	bx	lr

0100e08c <dma_bd_add_raw_sg_entry>:
 *
 * Note that normally flags should be zero because the finalise function adds the SOF
 * and EOF flags.  Only use for packet marking (not presently used for MIPI.)
 */
int dma_bd_add_raw_sg_entry(struct dma_bd_ring_t *ring, uint32_t base_addr, int size, int flags, struct dma_bd_sg_userdata_t *user)
{
 100e08c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	struct dma_bd_sg_descriptor_t *entry = NULL;
	int res, alloc = 0;

	D_ASSERT(ring != NULL);
 100e090:	e2505000 	subs	r5, r0, #0
{
 100e094:	e24dd00c 	sub	sp, sp, #12
 100e098:	e59de020 	ldr	lr, [sp, #32]
	D_ASSERT(ring != NULL);
 100e09c:	0a00003e 	beq	100e19c <dma_bd_add_raw_sg_entry+0x110>
	 * Nothing to do?  Zero size is invalid for a BD, see pg. 42 of Xil PG021.
	 *
	 * Maximum size exceeded is also an error (use dma_bd_add_large_sg_entry for
	 * spanning blocks.)
	 */
	if(size == 0) {
 100e0a0:	e16f0f12 	clz	r0, r2
 100e0a4:	e1a002a0 	lsr	r0, r0, #5
		return BD_RES_PARAM_ERR;
	} else if(size > BD_MAX_SIZE) {
 100e0a8:	e3520701 	cmp	r2, #262144	; 0x40000
 100e0ac:	c3800001 	orrgt	r0, r0, #1
 100e0b0:	e3500000 	cmp	r0, #0
 100e0b4:	1a00004c 	bne	100e1ec <dma_bd_add_raw_sg_entry+0x160>

	/*
	 * Fetch the working BD.  This is guaranteed by design to always point to an available
	 * BD.  Once the working pointer is incremented beyond the list size,
	 */
	entry = ring->current->bd_working_ptr;
 100e0b8:	e595c008 	ldr	ip, [r5, #8]
 100e0bc:	e59c4010 	ldr	r4, [ip, #16]

	//d_printf(D_INFO, "dma_bd_add_raw_sg_entry @ 0x%08x", entry);

	// Cheap sanity checks providing BD_ALIGN is pow2 (guaranteed by design)
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e0c0:	e214603f 	ands	r6, r4, #63	; 0x3f
 100e0c4:	1a000040 	bne	100e1cc <dma_bd_add_raw_sg_entry+0x140>

	entry->status = 0;
	entry->buffer_address_msb = 0;
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e0c8:	e2030303 	and	r0, r3, #201326592	; 0xc000000
	entry->buffer_address = base_addr;

	// Copy user fields (if applicable)
	if(user != NULL) {
 100e0cc:	e35e0000 	cmp	lr, #0
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e0d0:	e3c2333f 	bic	r3, r2, #-67108864	; 0xfc000000
	entry->status = 0;
 100e0d4:	e584601c 	str	r6, [r4, #28]
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e0d8:	e1833000 	orr	r3, r3, r0
	entry->buffer_address_msb = 0;
 100e0dc:	e584600c 	str	r6, [r4, #12]
	entry->buffer_address = base_addr;
 100e0e0:	e5841008 	str	r1, [r4, #8]
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e0e4:	e5843018 	str	r3, [r4, #24]
	if(user != NULL) {
 100e0e8:	0a000007 	beq	100e10c <dma_bd_add_raw_sg_entry+0x80>
		entry->app0 = user->app0;
 100e0ec:	e59e7000 	ldr	r7, [lr]
 100e0f0:	e59e6004 	ldr	r6, [lr, #4]
 100e0f4:	e1ce00d8 	ldrd	r0, [lr, #8]
 100e0f8:	e59e3010 	ldr	r3, [lr, #16]
 100e0fc:	e5847020 	str	r7, [r4, #32]
 100e100:	e5846024 	str	r6, [r4, #36]	; 0x24
 100e104:	e1c402f8 	strd	r0, [r4, #40]	; 0x28
 100e108:	e5843030 	str	r3, [r4, #48]	; 0x30
		entry->app2 = user->app2;
		entry->app3 = user->app3;
		entry->app4 = user->app4;
	}

	ring->stats.num_bds_filled++;
 100e10c:	e5953018 	ldr	r3, [r5, #24]
	ring->stats.total_bytes += size;
 100e110:	e1c502d8 	ldrd	r0, [r5, #40]	; 0x28
	ring->current->n_bds_free--;
 100e114:	e59ce004 	ldr	lr, [ip, #4]
	ring->stats.num_bds_filled++;
 100e118:	e595601c 	ldr	r6, [r5, #28]
 100e11c:	e2933001 	adds	r3, r3, #1
 100e120:	e5853018 	str	r3, [r5, #24]
	ring->current->n_bds_free--;
 100e124:	e24ee001 	sub	lr, lr, #1
	ring->stats.num_bds_filled++;
 100e128:	e2a63000 	adc	r3, r6, #0
	ring->stats.total_bytes += size;
 100e12c:	e0906002 	adds	r6, r0, r2
 100e130:	e0a17fc2 	adc	r7, r1, r2, asr #31
	 * new buffer.
	 */
	ring->current->bd_last_ptr = entry;
	ring->last = ring->current;

	if(ring->current->n_bds_free == 0) {
 100e134:	e35e0000 	cmp	lr, #0
		res = dma_bd_allocate(ring, 0, BD_NEXT_ENTRY);
		if(res != BD_RES_OK) {
			return res;
		}
	} else {
		ring->current->bd_working_ptr++;
 100e138:	12841040 	addne	r1, r4, #64	; 0x40
	ring->stats.num_bds_filled++;
 100e13c:	e585301c 	str	r3, [r5, #28]
	ring->stats.total_bytes += size;
 100e140:	e1c562f8 	strd	r6, [r5, #40]	; 0x28
	ring->current->bd_last_ptr = entry;
 100e144:	e58c400c 	str	r4, [ip, #12]
	ring->current->n_bds_free--;
 100e148:	e58ce004 	str	lr, [ip, #4]
	ring->last = ring->current;
 100e14c:	e585c004 	str	ip, [r5, #4]
		ring->current->bd_working_ptr++;
 100e150:	158c1010 	strne	r1, [ip, #16]
	if(ring->current->n_bds_free == 0) {
 100e154:	0a000007 	beq	100e178 <dma_bd_add_raw_sg_entry+0xec>
	}

	ring->total_bd_count++;
 100e158:	e5953030 	ldr	r3, [r5, #48]	; 0x30

	entry->nxtdesc = (uint32_t)ring->current->bd_working_ptr;
	entry->nxtdesc_msb = 0;
 100e15c:	e3a02000 	mov	r2, #0

	//ring->current->bd_working_ptr->nxtdesc = (uint32_t)entry;
	//ring->current->bd_working_ptr->nxtdesc_msb = 0;

	return BD_RES_OK;
 100e160:	e1a00002 	mov	r0, r2
	ring->total_bd_count++;
 100e164:	e2833001 	add	r3, r3, #1
 100e168:	e5853030 	str	r3, [r5, #48]	; 0x30
	entry->nxtdesc_msb = 0;
 100e16c:	e8840006 	stm	r4, {r1, r2}
}
 100e170:	e28dd00c 	add	sp, sp, #12
 100e174:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		res = dma_bd_allocate(ring, 0, BD_NEXT_ENTRY);
 100e178:	e1a0200e 	mov	r2, lr
 100e17c:	e1a0100e 	mov	r1, lr
 100e180:	e1a00005 	mov	r0, r5
 100e184:	ebfffee6 	bl	100dd24 <dma_bd_allocate>
		if(res != BD_RES_OK) {
 100e188:	e3500000 	cmp	r0, #0
 100e18c:	1afffff7 	bne	100e170 <dma_bd_add_raw_sg_entry+0xe4>
 100e190:	e5953008 	ldr	r3, [r5, #8]
 100e194:	e5931010 	ldr	r1, [r3, #16]
 100e198:	eaffffee 	b	100e158 <dma_bd_add_raw_sg_entry+0xcc>
	D_ASSERT(ring != NULL);
 100e19c:	e3093da8 	movw	r3, #40360	; 0x9da8
 100e1a0:	e30a2bcc 	movw	r2, #43980	; 0xabcc
 100e1a4:	e308149c 	movw	r1, #33948	; 0x849c
 100e1a8:	e3403106 	movt	r3, #262	; 0x106
 100e1ac:	e3402106 	movt	r2, #262	; 0x106
 100e1b0:	e3a00e11 	mov	r0, #272	; 0x110
 100e1b4:	e58d0000 	str	r0, [sp]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e1b8:	e3a00004 	mov	r0, #4
 100e1bc:	e3401106 	movt	r1, #262	; 0x106
 100e1c0:	eb000468 	bl	100f368 <d_printf>
 100e1c4:	e3e00062 	mvn	r0, #98	; 0x62
 100e1c8:	fa003698 	blx	101bc30 <exit>
 100e1cc:	e3000129 	movw	r0, #297	; 0x129
 100e1d0:	e3093da8 	movw	r3, #40360	; 0x9da8
 100e1d4:	e3092de4 	movw	r2, #40420	; 0x9de4
 100e1d8:	e308149c 	movw	r1, #33948	; 0x849c
 100e1dc:	e58d0000 	str	r0, [sp]
 100e1e0:	e3403106 	movt	r3, #262	; 0x106
 100e1e4:	e3402106 	movt	r2, #262	; 0x106
 100e1e8:	eafffff2 	b	100e1b8 <dma_bd_add_raw_sg_entry+0x12c>
		return BD_RES_PARAM_ERR;
 100e1ec:	e3e00001 	mvn	r0, #1
 100e1f0:	eaffffde 	b	100e170 <dma_bd_add_raw_sg_entry+0xe4>

0100e1f4 <dma_bd_add_large_sg_entry>:
 * Add a potentially large scatter-gather entry, which might require more than
 * one SG entry to be added if the size exceeds the nominal BD size.  If this
 * is not required, then only one entry will be added.
 */
int dma_bd_add_large_sg_entry(struct dma_bd_ring_t *ring, uint32_t base_addr, int size, int flags, struct dma_bd_sg_userdata_t *user)
{
 100e1f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int res, block_size = 0;
	uint32_t addr = base_addr;

	// Zero size entries not supported
	if(size == 0) {
 100e1f8:	e2526000 	subs	r6, r2, #0
{
 100e1fc:	e24dd014 	sub	sp, sp, #20
 100e200:	e58d1008 	str	r1, [sp, #8]
 100e204:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
	if(size == 0) {
 100e208:	0a00004c 	beq	100e340 <dma_bd_add_large_sg_entry+0x14c>
		return BD_RES_ZERO_SIZE;
	}

	while(size > 0) {
 100e20c:	da000062 	ble	100e39c <dma_bd_add_large_sg_entry+0x1a8>
		block_size = MIN(size, BD_MAX_SIZE);
 100e210:	e3560701 	cmp	r6, #262144	; 0x40000
 100e214:	e1a05000 	mov	r5, r0
 100e218:	b1a07006 	movlt	r7, r6
 100e21c:	a3a07701 	movge	r7, #262144	; 0x40000
	D_ASSERT(ring != NULL);
 100e220:	e3500000 	cmp	r0, #0
 100e224:	0a000048 	beq	100e34c <dma_bd_add_large_sg_entry+0x158>
	entry = ring->current->bd_working_ptr;
 100e228:	e5901008 	ldr	r1, [r0, #8]
 100e22c:	e5914010 	ldr	r4, [r1, #16]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e230:	e214903f 	ands	r9, r4, #63	; 0x3f
 100e234:	02033303 	andeq	r3, r3, #201326592	; 0xc000000
 100e238:	058d300c 	streq	r3, [sp, #12]
 100e23c:	0a000011 	beq	100e288 <dma_bd_add_large_sg_entry+0x94>
 100e240:	ea00004d 	b	100e37c <dma_bd_add_large_sg_entry+0x188>
	ring->total_bd_count++;
 100e244:	e5953030 	ldr	r3, [r5, #48]	; 0x30
		if(res != BD_RES_OK) {
			return res;
		}

		addr += block_size;
		size -= block_size;
 100e248:	e0466007 	sub	r6, r6, r7
		addr += block_size;
 100e24c:	e59d0008 	ldr	r0, [sp, #8]
	while(size > 0) {
 100e250:	e3560000 	cmp	r6, #0
	entry->nxtdesc = (uint32_t)ring->current->bd_working_ptr;
 100e254:	e5912010 	ldr	r2, [r1, #16]
	ring->total_bd_count++;
 100e258:	e2833001 	add	r3, r3, #1
		addr += block_size;
 100e25c:	e0800007 	add	r0, r0, r7
	ring->total_bd_count++;
 100e260:	e5853030 	str	r3, [r5, #48]	; 0x30
		addr += block_size;
 100e264:	e58d0008 	str	r0, [sp, #8]
	entry->nxtdesc_msb = 0;
 100e268:	e8840204 	stm	r4, {r2, r9}
	while(size > 0) {
 100e26c:	da00004a 	ble	100e39c <dma_bd_add_large_sg_entry+0x1a8>
		block_size = MIN(size, BD_MAX_SIZE);
 100e270:	e3560701 	cmp	r6, #262144	; 0x40000
	entry = ring->current->bd_working_ptr;
 100e274:	e1a04002 	mov	r4, r2
		block_size = MIN(size, BD_MAX_SIZE);
 100e278:	b1a07006 	movlt	r7, r6
 100e27c:	a3a07701 	movge	r7, #262144	; 0x40000
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e280:	e312003f 	tst	r2, #63	; 0x3f
 100e284:	1a00003c 	bne	100e37c <dma_bd_add_large_sg_entry+0x188>
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e288:	e59d300c 	ldr	r3, [sp, #12]
	if(user != NULL) {
 100e28c:	e3580000 	cmp	r8, #0
	entry->buffer_address = base_addr;
 100e290:	e59d2008 	ldr	r2, [sp, #8]
	entry->status = 0;
 100e294:	e584901c 	str	r9, [r4, #28]
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e298:	e1873003 	orr	r3, r7, r3
	entry->buffer_address_msb = 0;
 100e29c:	e584900c 	str	r9, [r4, #12]
	entry->buffer_address = base_addr;
 100e2a0:	e5842008 	str	r2, [r4, #8]
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e2a4:	e5843018 	str	r3, [r4, #24]
	if(user != NULL) {
 100e2a8:	0a000007 	beq	100e2cc <dma_bd_add_large_sg_entry+0xd8>
		entry->app0 = user->app0;
 100e2ac:	e2880008 	add	r0, r8, #8
 100e2b0:	e598e000 	ldr	lr, [r8]
 100e2b4:	e890000d 	ldm	r0, {r0, r2, r3}
 100e2b8:	e598c004 	ldr	ip, [r8, #4]
 100e2bc:	e584e020 	str	lr, [r4, #32]
 100e2c0:	e5840028 	str	r0, [r4, #40]	; 0x28
 100e2c4:	e584c024 	str	ip, [r4, #36]	; 0x24
 100e2c8:	e1c422fc 	strd	r2, [r4, #44]	; 0x2c
	ring->stats.num_bds_filled++;
 100e2cc:	e595e018 	ldr	lr, [r5, #24]
	ring->stats.total_bytes += size;
 100e2d0:	e1c522d8 	ldrd	r2, [r5, #40]	; 0x28
	ring->stats.num_bds_filled++;
 100e2d4:	e595c01c 	ldr	ip, [r5, #28]
	ring->current->n_bds_free--;
 100e2d8:	e5910004 	ldr	r0, [r1, #4]
	ring->stats.num_bds_filled++;
 100e2dc:	e29ee001 	adds	lr, lr, #1
 100e2e0:	e585e018 	str	lr, [r5, #24]
 100e2e4:	e2acc000 	adc	ip, ip, #0
	ring->stats.total_bytes += size;
 100e2e8:	e092a007 	adds	sl, r2, r7
 100e2ec:	e0a3bfc7 	adc	fp, r3, r7, asr #31
	ring->current->n_bds_free--;
 100e2f0:	e2400001 	sub	r0, r0, #1
	if(ring->current->n_bds_free == 0) {
 100e2f4:	e3500000 	cmp	r0, #0
	ring->stats.num_bds_filled++;
 100e2f8:	e585c01c 	str	ip, [r5, #28]
	ring->stats.total_bytes += size;
 100e2fc:	e1a0300b 	mov	r3, fp
 100e300:	e1a0200a 	mov	r2, sl
 100e304:	e1c522f8 	strd	r2, [r5, #40]	; 0x28
		ring->current->bd_working_ptr++;
 100e308:	12843040 	addne	r3, r4, #64	; 0x40
	ring->current->bd_last_ptr = entry;
 100e30c:	e581400c 	str	r4, [r1, #12]
	ring->current->n_bds_free--;
 100e310:	e5810004 	str	r0, [r1, #4]
	ring->last = ring->current;
 100e314:	e5851004 	str	r1, [r5, #4]
		ring->current->bd_working_ptr++;
 100e318:	15813010 	strne	r3, [r1, #16]
	if(ring->current->n_bds_free == 0) {
 100e31c:	1affffc8 	bne	100e244 <dma_bd_add_large_sg_entry+0x50>
		res = dma_bd_allocate(ring, 0, BD_NEXT_ENTRY);
 100e320:	e1a02000 	mov	r2, r0
 100e324:	e1a01000 	mov	r1, r0
 100e328:	e1a00005 	mov	r0, r5
 100e32c:	ebfffe7c 	bl	100dd24 <dma_bd_allocate>
		if(res != BD_RES_OK) {
 100e330:	e3500000 	cmp	r0, #0
 100e334:	1a000002 	bne	100e344 <dma_bd_add_large_sg_entry+0x150>
 100e338:	e5951008 	ldr	r1, [r5, #8]
 100e33c:	eaffffc0 	b	100e244 <dma_bd_add_large_sg_entry+0x50>
		return BD_RES_ZERO_SIZE;
 100e340:	e3e00002 	mvn	r0, #2
	}

	return BD_RES_OK;
}
 100e344:	e28dd014 	add	sp, sp, #20
 100e348:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	D_ASSERT(ring != NULL);
 100e34c:	e3093da8 	movw	r3, #40360	; 0x9da8
 100e350:	e30a2bcc 	movw	r2, #43980	; 0xabcc
 100e354:	e308149c 	movw	r1, #33948	; 0x849c
 100e358:	e3403106 	movt	r3, #262	; 0x106
 100e35c:	e3402106 	movt	r2, #262	; 0x106
 100e360:	e3a00e11 	mov	r0, #272	; 0x110
 100e364:	e58d0000 	str	r0, [sp]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e368:	e3a00004 	mov	r0, #4
 100e36c:	e3401106 	movt	r1, #262	; 0x106
 100e370:	eb0003fc 	bl	100f368 <d_printf>
 100e374:	e3e00062 	mvn	r0, #98	; 0x62
 100e378:	fa00362c 	blx	101bc30 <exit>
 100e37c:	e3000129 	movw	r0, #297	; 0x129
 100e380:	e3093da8 	movw	r3, #40360	; 0x9da8
 100e384:	e3092de4 	movw	r2, #40420	; 0x9de4
 100e388:	e308149c 	movw	r1, #33948	; 0x849c
 100e38c:	e58d0000 	str	r0, [sp]
 100e390:	e3403106 	movt	r3, #262	; 0x106
 100e394:	e3402106 	movt	r2, #262	; 0x106
 100e398:	eafffff2 	b	100e368 <dma_bd_add_large_sg_entry+0x174>
	return BD_RES_OK;
 100e39c:	e3a00000 	mov	r0, #0
}
 100e3a0:	e28dd014 	add	sp, sp, #20
 100e3a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0100e3a8 <dma_bd_add_zero_sg_entry>:
 *
 * To create the zero entry, references to the 64KB zero page are created,
 * up to the length required.
 */
int dma_bd_add_zero_sg_entry(struct dma_bd_ring_t *ring, int size, int flags, struct dma_bd_sg_userdata_t *user)
{
 100e3a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int res, block_size = 0;

	// Zero size entries not supported
	if(size == 0) {
 100e3ac:	e2516000 	subs	r6, r1, #0
{
 100e3b0:	e24dd014 	sub	sp, sp, #20
	if(size == 0) {
 100e3b4:	0a00004f 	beq	100e4f8 <dma_bd_add_zero_sg_entry+0x150>
		return BD_RES_ZERO_SIZE;
	}

	while(size > 0) {
 100e3b8:	da000065 	ble	100e554 <dma_bd_add_zero_sg_entry+0x1ac>
		block_size = MIN(size, BD_VOID_ZONE_BYTES);
 100e3bc:	e3560801 	cmp	r6, #65536	; 0x10000
 100e3c0:	e1a07003 	mov	r7, r3
 100e3c4:	b1a08006 	movlt	r8, r6
 100e3c8:	a3a08801 	movge	r8, #65536	; 0x10000

		res = dma_bd_add_raw_sg_entry(ring, (uint32_t)g_void_zone, block_size, flags, user);
 100e3cc:	e3053b78 	movw	r3, #23416	; 0x5b78
	D_ASSERT(ring != NULL);
 100e3d0:	e3500000 	cmp	r0, #0
		res = dma_bd_add_raw_sg_entry(ring, (uint32_t)g_void_zone, block_size, flags, user);
 100e3d4:	e3403107 	movt	r3, #263	; 0x107
 100e3d8:	e1a05000 	mov	r5, r0
 100e3dc:	e58d3008 	str	r3, [sp, #8]
 100e3e0:	e5933000 	ldr	r3, [r3]
	D_ASSERT(ring != NULL);
 100e3e4:	0a000046 	beq	100e504 <dma_bd_add_zero_sg_entry+0x15c>
	entry = ring->current->bd_working_ptr;
 100e3e8:	e5901008 	ldr	r1, [r0, #8]
 100e3ec:	e5914010 	ldr	r4, [r1, #16]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e3f0:	e214903f 	ands	r9, r4, #63	; 0x3f
 100e3f4:	02022303 	andeq	r2, r2, #201326592	; 0xc000000
 100e3f8:	058d200c 	streq	r2, [sp, #12]
 100e3fc:	0a000010 	beq	100e444 <dma_bd_add_zero_sg_entry+0x9c>
 100e400:	ea00004b 	b	100e534 <dma_bd_add_zero_sg_entry+0x18c>
	ring->total_bd_count++;
 100e404:	e5953030 	ldr	r3, [r5, #48]	; 0x30
		if(res != BD_RES_OK) {
			return res;
		}

		size -= block_size;
 100e408:	e0466008 	sub	r6, r6, r8
	entry->nxtdesc = (uint32_t)ring->current->bd_working_ptr;
 100e40c:	e5912010 	ldr	r2, [r1, #16]
	while(size > 0) {
 100e410:	e3560000 	cmp	r6, #0
	ring->total_bd_count++;
 100e414:	e2833001 	add	r3, r3, #1
 100e418:	e5853030 	str	r3, [r5, #48]	; 0x30
	entry->nxtdesc_msb = 0;
 100e41c:	e8840204 	stm	r4, {r2, r9}
	while(size > 0) {
 100e420:	da00004b 	ble	100e554 <dma_bd_add_zero_sg_entry+0x1ac>
		block_size = MIN(size, BD_VOID_ZONE_BYTES);
 100e424:	e3560801 	cmp	r6, #65536	; 0x10000
		res = dma_bd_add_raw_sg_entry(ring, (uint32_t)g_void_zone, block_size, flags, user);
 100e428:	e59d3008 	ldr	r3, [sp, #8]
		block_size = MIN(size, BD_VOID_ZONE_BYTES);
 100e42c:	b1a08006 	movlt	r8, r6
 100e430:	a3a08801 	movge	r8, #65536	; 0x10000
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e434:	e312003f 	tst	r2, #63	; 0x3f
	entry = ring->current->bd_working_ptr;
 100e438:	e1a04002 	mov	r4, r2
		res = dma_bd_add_raw_sg_entry(ring, (uint32_t)g_void_zone, block_size, flags, user);
 100e43c:	e5933000 	ldr	r3, [r3]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e440:	1a00003b 	bne	100e534 <dma_bd_add_zero_sg_entry+0x18c>
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e444:	e59d200c 	ldr	r2, [sp, #12]
	if(user != NULL) {
 100e448:	e3570000 	cmp	r7, #0
	entry->status = 0;
 100e44c:	e584901c 	str	r9, [r4, #28]
	entry->buffer_address_msb = 0;
 100e450:	e584900c 	str	r9, [r4, #12]
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e454:	e1882002 	orr	r2, r8, r2
	entry->buffer_address = base_addr;
 100e458:	e5843008 	str	r3, [r4, #8]
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e45c:	e5842018 	str	r2, [r4, #24]
	if(user != NULL) {
 100e460:	0a000007 	beq	100e484 <dma_bd_add_zero_sg_entry+0xdc>
		entry->app0 = user->app0;
 100e464:	e2870008 	add	r0, r7, #8
 100e468:	e597e000 	ldr	lr, [r7]
 100e46c:	e890000d 	ldm	r0, {r0, r2, r3}
 100e470:	e597c004 	ldr	ip, [r7, #4]
 100e474:	e584e020 	str	lr, [r4, #32]
 100e478:	e5840028 	str	r0, [r4, #40]	; 0x28
 100e47c:	e584c024 	str	ip, [r4, #36]	; 0x24
 100e480:	e1c422fc 	strd	r2, [r4, #44]	; 0x2c
	ring->stats.num_bds_filled++;
 100e484:	e595e018 	ldr	lr, [r5, #24]
	ring->stats.total_bytes += size;
 100e488:	e1c522d8 	ldrd	r2, [r5, #40]	; 0x28
	ring->stats.num_bds_filled++;
 100e48c:	e595c01c 	ldr	ip, [r5, #28]
	ring->current->n_bds_free--;
 100e490:	e5910004 	ldr	r0, [r1, #4]
	ring->stats.num_bds_filled++;
 100e494:	e29ee001 	adds	lr, lr, #1
 100e498:	e585e018 	str	lr, [r5, #24]
 100e49c:	e2acc000 	adc	ip, ip, #0
	ring->stats.total_bytes += size;
 100e4a0:	e092a008 	adds	sl, r2, r8
 100e4a4:	e0a3bfc8 	adc	fp, r3, r8, asr #31
	ring->current->n_bds_free--;
 100e4a8:	e2400001 	sub	r0, r0, #1
	if(ring->current->n_bds_free == 0) {
 100e4ac:	e3500000 	cmp	r0, #0
	ring->stats.num_bds_filled++;
 100e4b0:	e585c01c 	str	ip, [r5, #28]
	ring->stats.total_bytes += size;
 100e4b4:	e1a0300b 	mov	r3, fp
 100e4b8:	e1a0200a 	mov	r2, sl
 100e4bc:	e1c522f8 	strd	r2, [r5, #40]	; 0x28
		ring->current->bd_working_ptr++;
 100e4c0:	12843040 	addne	r3, r4, #64	; 0x40
	ring->current->bd_last_ptr = entry;
 100e4c4:	e581400c 	str	r4, [r1, #12]
	ring->current->n_bds_free--;
 100e4c8:	e5810004 	str	r0, [r1, #4]
	ring->last = ring->current;
 100e4cc:	e5851004 	str	r1, [r5, #4]
		ring->current->bd_working_ptr++;
 100e4d0:	15813010 	strne	r3, [r1, #16]
	if(ring->current->n_bds_free == 0) {
 100e4d4:	1affffca 	bne	100e404 <dma_bd_add_zero_sg_entry+0x5c>
		res = dma_bd_allocate(ring, 0, BD_NEXT_ENTRY);
 100e4d8:	e1a02000 	mov	r2, r0
 100e4dc:	e1a01000 	mov	r1, r0
 100e4e0:	e1a00005 	mov	r0, r5
 100e4e4:	ebfffe0e 	bl	100dd24 <dma_bd_allocate>
		if(res != BD_RES_OK) {
 100e4e8:	e3500000 	cmp	r0, #0
 100e4ec:	1a000002 	bne	100e4fc <dma_bd_add_zero_sg_entry+0x154>
 100e4f0:	e5951008 	ldr	r1, [r5, #8]
 100e4f4:	eaffffc2 	b	100e404 <dma_bd_add_zero_sg_entry+0x5c>
		return BD_RES_ZERO_SIZE;
 100e4f8:	e3e00002 	mvn	r0, #2
	}

	return BD_RES_OK;
}
 100e4fc:	e28dd014 	add	sp, sp, #20
 100e500:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	D_ASSERT(ring != NULL);
 100e504:	e3093da8 	movw	r3, #40360	; 0x9da8
 100e508:	e30a2bcc 	movw	r2, #43980	; 0xabcc
 100e50c:	e308149c 	movw	r1, #33948	; 0x849c
 100e510:	e3403106 	movt	r3, #262	; 0x106
 100e514:	e3402106 	movt	r2, #262	; 0x106
 100e518:	e3a00e11 	mov	r0, #272	; 0x110
 100e51c:	e58d0000 	str	r0, [sp]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e520:	e3a00004 	mov	r0, #4
 100e524:	e3401106 	movt	r1, #262	; 0x106
 100e528:	eb00038e 	bl	100f368 <d_printf>
 100e52c:	e3e00062 	mvn	r0, #98	; 0x62
 100e530:	fa0035be 	blx	101bc30 <exit>
 100e534:	e3000129 	movw	r0, #297	; 0x129
 100e538:	e3093da8 	movw	r3, #40360	; 0x9da8
 100e53c:	e3092de4 	movw	r2, #40420	; 0x9de4
 100e540:	e308149c 	movw	r1, #33948	; 0x849c
 100e544:	e58d0000 	str	r0, [sp]
 100e548:	e3403106 	movt	r3, #262	; 0x106
 100e54c:	e3402106 	movt	r2, #262	; 0x106
 100e550:	eafffff2 	b	100e520 <dma_bd_add_zero_sg_entry+0x178>
	return BD_RES_OK;
 100e554:	e3a00000 	mov	r0, #0
}
 100e558:	e28dd014 	add	sp, sp, #20
 100e55c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0100e560 <dma_bd_flush_to_ram>:
 * and going up to the current block but no further, is flushed.  Since each block
 * is guaranteed to be 64-byte aligned (per AxiDma requirements) this lines up
 * nicely with the 32-byte cache lines.
 */
void dma_bd_flush_to_ram(struct dma_bd_ring_t *ring)
{
 100e560:	e92d4010 	push	{r4, lr}
	struct dma_bd_tag_t *tag = ring->base;
 100e564:	e5904000 	ldr	r4, [r0]

	//d_printf(D_WARN, "Flush to RAM");

	do {
		//d_printf(D_INFO, "FlushRange 0x%08x, %d bytes", (INTPTR)tag->bd_base_ptr, (tag->n_bds - tag->n_bds_free) * BD_SIZE);
		Xil_DCacheFlushRange((INTPTR)tag->bd_base_ptr, (tag->n_bds - tag->n_bds_free) * BD_SIZE);
 100e568:	e894000a 	ldm	r4, {r1, r3}
 100e56c:	e5940008 	ldr	r0, [r4, #8]
 100e570:	e0411003 	sub	r1, r1, r3
 100e574:	e1a01301 	lsl	r1, r1, #6
 100e578:	eb002af0 	bl	1019140 <Xil_DCacheFlushRange>
		tag = tag->next_alloc;
 100e57c:	e5944014 	ldr	r4, [r4, #20]
	} while(tag != NULL) ;
 100e580:	e3540000 	cmp	r4, #0
 100e584:	1afffff7 	bne	100e568 <dma_bd_flush_to_ram+0x8>
 100e588:	e8bd8010 	pop	{r4, pc}

0100e58c <dma_bd_finalise>:
 *   - Ensure the last pointer points to the first.
 *
 * @param	ring		Reference to the ring
 */
int dma_bd_finalise(struct dma_bd_ring_t *ring)
{
 100e58c:	e1a03000 	mov	r3, r0
	// Create a circular linked list.  The AXIDMA peripheral stops when the next
	// pointer points to the first pointer.
	//ring->last->bd_last_ptr->nxtdesc = 0x00000000;
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
	ring->last->bd_last_ptr->control |= BD_EOF;
}
 100e590:	e1a00002 	mov	r0, r2
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e594:	e1c320d0 	ldrd	r2, [r3]
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e598:	e5921008 	ldr	r1, [r2, #8]
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e59c:	e593300c 	ldr	r3, [r3, #12]
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e5a0:	e5912018 	ldr	r2, [r1, #24]
 100e5a4:	e3822301 	orr	r2, r2, #67108864	; 0x4000000
 100e5a8:	e5812018 	str	r2, [r1, #24]
	ring->last->bd_last_ptr->control |= BD_EOF;
 100e5ac:	e5932018 	ldr	r2, [r3, #24]
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e5b0:	e5831000 	str	r1, [r3]
	ring->last->bd_last_ptr->control |= BD_EOF;
 100e5b4:	e3822302 	orr	r2, r2, #134217728	; 0x8000000
 100e5b8:	e5832018 	str	r2, [r3, #24]
}
 100e5bc:	e12fff1e 	bx	lr

0100e5c0 <dma_bd_debug_dump>:
	char desc_as_bytes[BD_SIZE];
	int used, i, b;
	char s, e, c;
	uint32_t total_bytes = 0;

	d_printf(D_RAW, "\r\n");
 100e5c0:	e3091fac 	movw	r1, #40876	; 0x9fac
{
 100e5c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	d_printf(D_RAW, "\r\n");
 100e5c8:	e3401106 	movt	r1, #262	; 0x106
{
 100e5cc:	e24dd05c 	sub	sp, sp, #92	; 0x5c
 100e5d0:	e1a04000 	mov	r4, r0
	d_printf(D_RAW, "\r\n");
 100e5d4:	e3a00000 	mov	r0, #0
	struct dma_bd_tag_t *tag = ring->base;
 100e5d8:	e5946000 	ldr	r6, [r4]
	d_printf(D_RAW, "\r\n");
 100e5dc:	eb000361 	bl	100f368 <d_printf>
	d_printf(D_RAW, "** Debug for dma_bd_ring_t @ 0x%08x **\r\n", ring);
 100e5e0:	e3091e04 	movw	r1, #40452	; 0x9e04
 100e5e4:	e1a02004 	mov	r2, r4
 100e5e8:	e3401106 	movt	r1, #262	; 0x106
 100e5ec:	e3a00000 	mov	r0, #0
 100e5f0:	eb00035c 	bl	100f368 <d_printf>
	d_printf(D_RAW, "\r\n");
 100e5f4:	e3091fac 	movw	r1, #40876	; 0x9fac
 100e5f8:	e3a00000 	mov	r0, #0
 100e5fc:	e3401106 	movt	r1, #262	; 0x106
 100e600:	eb000358 	bl	100f368 <d_printf>
	d_printf(D_RAW, "base           = 0x%08x\r\n", ring->base);
 100e604:	e3091e30 	movw	r1, #40496	; 0x9e30
 100e608:	e5942000 	ldr	r2, [r4]
 100e60c:	e3401106 	movt	r1, #262	; 0x106
 100e610:	e3a00000 	mov	r0, #0
 100e614:	eb000353 	bl	100f368 <d_printf>
	d_printf(D_RAW, "current        = 0x%08x\r\n", ring->current);
 100e618:	e3091e4c 	movw	r1, #40524	; 0x9e4c
 100e61c:	e5942008 	ldr	r2, [r4, #8]
 100e620:	e3401106 	movt	r1, #262	; 0x106
 100e624:	e3a00000 	mov	r0, #0
 100e628:	eb00034e 	bl	100f368 <d_printf>
	d_printf(D_RAW, "num_bds_alloc  = %d\r\n", ring->stats.num_bds_alloc);
 100e62c:	e3091e68 	movw	r1, #40552	; 0x9e68
 100e630:	e1c421d0 	ldrd	r2, [r4, #16]
 100e634:	e3401106 	movt	r1, #262	; 0x106
 100e638:	e3a00000 	mov	r0, #0
 100e63c:	eb000349 	bl	100f368 <d_printf>
	d_printf(D_RAW, "num_bds_filled = %d\r\n", ring->stats.num_bds_filled);
 100e640:	e3091e80 	movw	r1, #40576	; 0x9e80
 100e644:	e1c421d8 	ldrd	r2, [r4, #24]
 100e648:	e3401106 	movt	r1, #262	; 0x106
 100e64c:	e3a00000 	mov	r0, #0
 100e650:	eb000344 	bl	100f368 <d_printf>
	d_printf(D_RAW, "num_tags_alloc = %d\r\n", ring->stats.num_tags_alloc);
 100e654:	e3091e98 	movw	r1, #40600	; 0x9e98
 100e658:	e1c422d0 	ldrd	r2, [r4, #32]
 100e65c:	e3401106 	movt	r1, #262	; 0x106
 100e660:	e3a00000 	mov	r0, #0
 100e664:	eb00033f 	bl	100f368 <d_printf>
	d_printf(D_RAW, "total_bd_count = %d\r\n", ring->total_bd_count);
 100e668:	e3091eb0 	movw	r1, #40624	; 0x9eb0
 100e66c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
 100e670:	e3401106 	movt	r1, #262	; 0x106
 100e674:	e3a00000 	mov	r0, #0
 100e678:	eb00033a 	bl	100f368 <d_printf>
	d_printf(D_RAW, "\r\n");
 100e67c:	e3091fac 	movw	r1, #40876	; 0x9fac
 100e680:	e3a00000 	mov	r0, #0
 100e684:	e3401106 	movt	r1, #262	; 0x106
 100e688:	eb000336 	bl	100f368 <d_printf>

	while(tag != NULL) {
 100e68c:	e3560000 	cmp	r6, #0
 100e690:	0a00002b 	beq	100e744 <dma_bd_debug_dump+0x184>
		used = tag->n_bds - tag->n_bds_free;

		d_printf(D_RAW, "== Tag @ 0x%08x,  next tag @ 0x%08x,  base_bd 0x%08x,  working_bd 0x%08x,  last_bd 0x%08x,  %d/%d entries consumed == \r\n", \
 100e694:	e3098ed8 	movw	r8, #40664	; 0x9ed8
					desc->buffer_address, desc->control & BD_SIZE_MASK, desc->control & BD_SIZE_MASK, s, e, desc->nxtdesc, desc->status, total_bytes, \
					((desc->status & ~BD_STATUS_MASK) == (desc->control & BD_SIZE_MASK)) ? 'C' : '-');
			*/
		}

		d_printf(D_RAW, "\r\n");
 100e698:	e3097fac 	movw	r7, #40876	; 0x9fac
		d_printf(D_RAW, "== Tag @ 0x%08x,  next tag @ 0x%08x,  base_bd 0x%08x,  working_bd 0x%08x,  last_bd 0x%08x,  %d/%d entries consumed == \r\n", \
 100e69c:	e3408106 	movt	r8, #262	; 0x106
		d_printf(D_RAW, "\r\n");
 100e6a0:	e3407106 	movt	r7, #262	; 0x106
		used = tag->n_bds - tag->n_bds_free;
 100e6a4:	e596c004 	ldr	ip, [r6, #4]
		d_printf(D_RAW, "== Tag @ 0x%08x,  next tag @ 0x%08x,  base_bd 0x%08x,  working_bd 0x%08x,  last_bd 0x%08x,  %d/%d entries consumed == \r\n", \
 100e6a8:	e1a02006 	mov	r2, r6
		used = tag->n_bds - tag->n_bds_free;
 100e6ac:	e5969000 	ldr	r9, [r6]
		d_printf(D_RAW, "== Tag @ 0x%08x,  next tag @ 0x%08x,  base_bd 0x%08x,  working_bd 0x%08x,  last_bd 0x%08x,  %d/%d entries consumed == \r\n", \
 100e6b0:	e1a01008 	mov	r1, r8
 100e6b4:	e5963014 	ldr	r3, [r6, #20]
 100e6b8:	e3a00000 	mov	r0, #0
 100e6bc:	e58d9010 	str	r9, [sp, #16]
		used = tag->n_bds - tag->n_bds_free;
 100e6c0:	e049900c 	sub	r9, r9, ip
		d_printf(D_RAW, "== Tag @ 0x%08x,  next tag @ 0x%08x,  base_bd 0x%08x,  working_bd 0x%08x,  last_bd 0x%08x,  %d/%d entries consumed == \r\n", \
 100e6c4:	e58d900c 	str	r9, [sp, #12]
 100e6c8:	e596c00c 	ldr	ip, [r6, #12]
 100e6cc:	e58dc008 	str	ip, [sp, #8]
 100e6d0:	e596c010 	ldr	ip, [r6, #16]
 100e6d4:	e58dc004 	str	ip, [sp, #4]
 100e6d8:	e596c008 	ldr	ip, [r6, #8]
 100e6dc:	e58dc000 	str	ip, [sp]
 100e6e0:	eb000320 	bl	100f368 <d_printf>
		for(i = 0; i < used; i++) {
 100e6e4:	e3590000 	cmp	r9, #0
 100e6e8:	da00000f 	ble	100e72c <dma_bd_debug_dump+0x16c>
 100e6ec:	e596c008 	ldr	ip, [r6, #8]
 100e6f0:	e08c9309 	add	r9, ip, r9, lsl #6
			memcpy(&desc_as_bytes, desc, BD_SIZE);
 100e6f4:	e28c5040 	add	r5, ip, #64	; 0x40
 100e6f8:	e28d4018 	add	r4, sp, #24
 100e6fc:	e59c0000 	ldr	r0, [ip]
 100e700:	e28cc010 	add	ip, ip, #16
 100e704:	e51c100c 	ldr	r1, [ip, #-12]
 100e708:	e1a0e004 	mov	lr, r4
 100e70c:	e51c2008 	ldr	r2, [ip, #-8]
 100e710:	e2844010 	add	r4, r4, #16
 100e714:	e51c3004 	ldr	r3, [ip, #-4]
 100e718:	e15c0005 	cmp	ip, r5
 100e71c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 100e720:	1afffff5 	bne	100e6fc <dma_bd_debug_dump+0x13c>
		for(i = 0; i < used; i++) {
 100e724:	e159000c 	cmp	r9, ip
 100e728:	1afffff1 	bne	100e6f4 <dma_bd_debug_dump+0x134>
		d_printf(D_RAW, "\r\n");
 100e72c:	e1a01007 	mov	r1, r7
 100e730:	e3a00000 	mov	r0, #0
 100e734:	eb00030b 	bl	100f368 <d_printf>

		tag = tag->next_alloc;
 100e738:	e5966014 	ldr	r6, [r6, #20]
	while(tag != NULL) {
 100e73c:	e3560000 	cmp	r6, #0
 100e740:	1affffd7 	bne	100e6a4 <dma_bd_debug_dump+0xe4>
	}

	d_printf(D_RAW, "** Ends **\r\n\r\n");
 100e744:	e3091ec8 	movw	r1, #40648	; 0x9ec8
 100e748:	e3a00000 	mov	r0, #0
 100e74c:	e3401106 	movt	r1, #262	; 0x106
}
 100e750:	e28dd05c 	add	sp, sp, #92	; 0x5c
 100e754:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
	d_printf(D_RAW, "** Ends **\r\n\r\n");
 100e758:	ea000302 	b	100f368 <d_printf>

0100e75c <dma_bd_start>:
	if(flags & BD_STFLAGS_TRANSMIT) {
 100e75c:	e3120001 	tst	r2, #1
{
 100e760:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if(flags & BD_STFLAGS_TRANSMIT) {
 100e764:	1a000028 	bne	100e80c <dma_bd_start+0xb0>
	} else if(flags & BD_STFLAGS_RECEIVE) {
 100e768:	e3120002 	tst	r2, #2
 100e76c:	0a00002b 	beq	100e820 <dma_bd_start+0xc4>
		reg_base = XAXIDMA_RX_OFFSET;
 100e770:	e3a08030 	mov	r8, #48	; 0x30
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e774:	e5914000 	ldr	r4, [r1]
 100e778:	e1a07000 	mov	r7, r0
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e77c:	e5913004 	ldr	r3, [r1, #4]
 100e780:	e1a06002 	mov	r6, r2
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e784:	e1a05001 	mov	r5, r1
 100e788:	e5940008 	ldr	r0, [r4, #8]
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e78c:	e593300c 	ldr	r3, [r3, #12]
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e790:	e5902018 	ldr	r2, [r0, #24]
 100e794:	e3822301 	orr	r2, r2, #67108864	; 0x4000000
 100e798:	e5802018 	str	r2, [r0, #24]
	ring->last->bd_last_ptr->control |= BD_EOF;
 100e79c:	e5932018 	ldr	r2, [r3, #24]
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e7a0:	e5830000 	str	r0, [r3]
	ring->last->bd_last_ptr->control |= BD_EOF;
 100e7a4:	e3822302 	orr	r2, r2, #134217728	; 0x8000000
 100e7a8:	e5832018 	str	r2, [r3, #24]
	struct dma_bd_tag_t *tag = ring->base;
 100e7ac:	ea000000 	b	100e7b4 <dma_bd_start+0x58>
 100e7b0:	e5940008 	ldr	r0, [r4, #8]
		Xil_DCacheFlushRange((INTPTR)tag->bd_base_ptr, (tag->n_bds - tag->n_bds_free) * BD_SIZE);
 100e7b4:	e894000a 	ldm	r4, {r1, r3}
 100e7b8:	e0411003 	sub	r1, r1, r3
 100e7bc:	e1a01301 	lsl	r1, r1, #6
 100e7c0:	eb002a5e 	bl	1019140 <Xil_DCacheFlushRange>
		tag = tag->next_alloc;
 100e7c4:	e5944014 	ldr	r4, [r4, #20]
	} while(tag != NULL) ;
 100e7c8:	e3540000 	cmp	r4, #0
 100e7cc:	1afffff7 	bne	100e7b0 <dma_bd_start+0x54>
	if(flags & BD_STFLAGS_DUMP_DEBUG) {
 100e7d0:	e3160004 	tst	r6, #4
 100e7d4:	1a00000e 	bne	100e814 <dma_bd_start+0xb8>
	XAxiDma_WriteReg(periph->RegBase, XAXIDMA_CDESC_OFFSET + reg_base, (uint32_t)ring->base->bd_base_ptr);
 100e7d8:	e5952000 	ldr	r2, [r5]
	return BD_RES_OK;
 100e7dc:	e3a00000 	mov	r0, #0
	XAxiDma_WriteReg(periph->RegBase, XAXIDMA_CDESC_OFFSET + reg_base, (uint32_t)ring->base->bd_base_ptr);
 100e7e0:	e5973000 	ldr	r3, [r7]
	XAxiDma_WriteReg(periph->RegBase, XAXIDMA_TDESC_OFFSET + reg_base, (uint32_t)ring->last->bd_last_ptr);
 100e7e4:	e595c004 	ldr	ip, [r5, #4]
	XAxiDma_WriteReg(periph->RegBase, XAXIDMA_CDESC_OFFSET + reg_base, (uint32_t)ring->base->bd_base_ptr);
 100e7e8:	e5922008 	ldr	r2, [r2, #8]
 100e7ec:	e0881003 	add	r1, r8, r3
	XAxiDma_WriteReg(periph->RegBase, XAXIDMA_TDESC_OFFSET + reg_base, (uint32_t)ring->last->bd_last_ptr);
 100e7f0:	e59cc00c 	ldr	ip, [ip, #12]
	*LocalAddr = Value;
 100e7f4:	e5812008 	str	r2, [r1, #8]
	return *(volatile u32 *) Addr;
 100e7f8:	e7982003 	ldr	r2, [r8, r3]
	XAxiDma_WriteReg(periph->RegBase, XAXIDMA_CR_OFFSET + reg_base, \
 100e7fc:	e3822001 	orr	r2, r2, #1
	*LocalAddr = Value;
 100e800:	e7882003 	str	r2, [r8, r3]
 100e804:	e581c010 	str	ip, [r1, #16]
	return BD_RES_OK;
 100e808:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		reg_base = XAXIDMA_TX_OFFSET;
 100e80c:	e3a08000 	mov	r8, #0
 100e810:	eaffffd7 	b	100e774 <dma_bd_start+0x18>
		dma_bd_debug_dump(ring);
 100e814:	e1a00005 	mov	r0, r5
 100e818:	ebffff68 	bl	100e5c0 <dma_bd_debug_dump>
 100e81c:	eaffffed 	b	100e7d8 <dma_bd_start+0x7c>
		return BD_RES_PARAM_ERR;
 100e820:	e3e00001 	mvn	r0, #1
}
 100e824:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0100e828 <dma_bd_test>:

/*
 * Testcase for dma_bd library.  dma_bd_init should have been called first.
 */
void dma_bd_test()
{
 100e828:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 100e82c:	e24dd010 	sub	sp, sp, #16
	struct dma_bd_ring_t *ring;
	int i;

	dma_bd_create_ring(&ring);
 100e830:	e28d000c 	add	r0, sp, #12
	dma_bd_debug_dump(ring);
 100e834:	e3a08c01 	mov	r8, #256	; 0x100
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e838:	e3a07701 	mov	r7, #262144	; 0x40000
	entry->buffer_address = base_addr;
 100e83c:	e3a06102 	mov	r6, #-2147483648	; 0x80000000
	dma_bd_create_ring(&ring);
 100e840:	ebfffc93 	bl	100da94 <dma_bd_create_ring>
	dma_bd_debug_dump(ring);
 100e844:	e59d000c 	ldr	r0, [sp, #12]
	entry->nxtdesc_msb = 0;
 100e848:	e3a09000 	mov	r9, #0
	dma_bd_debug_dump(ring);
 100e84c:	ebffff5b 	bl	100e5c0 <dma_bd_debug_dump>

	for(i = 0; i < 256; i++) {
		dma_bd_add_large_sg_entry(ring, 0x80000000, 262144, 0, NULL);
 100e850:	e59d400c 	ldr	r4, [sp, #12]
	D_ASSERT(ring != NULL);
 100e854:	e3540000 	cmp	r4, #0
 100e858:	0a000087 	beq	100ea7c <dma_bd_test+0x254>
	entry = ring->current->bd_working_ptr;
 100e85c:	e5940008 	ldr	r0, [r4, #8]
 100e860:	e5905010 	ldr	r5, [r0, #16]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e864:	e215a03f 	ands	sl, r5, #63	; 0x3f
 100e868:	1a00008f 	bne	100eaac <dma_bd_test+0x284>
	ring->stats.num_bds_filled++;
 100e86c:	e5941018 	ldr	r1, [r4, #24]
	ring->current->n_bds_free--;
 100e870:	e5902004 	ldr	r2, [r0, #4]
	ring->stats.num_bds_filled++;
 100e874:	e594e01c 	ldr	lr, [r4, #28]
	ring->stats.total_bytes += size;
 100e878:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	ring->stats.num_bds_filled++;
 100e87c:	e2911001 	adds	r1, r1, #1
	ring->stats.total_bytes += size;
 100e880:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
	ring->current->n_bds_free--;
 100e884:	e2422001 	sub	r2, r2, #1
	ring->stats.num_bds_filled++;
 100e888:	e2aee000 	adc	lr, lr, #0
	entry->status = 0;
 100e88c:	e585a01c 	str	sl, [r5, #28]
	ring->stats.total_bytes += size;
 100e890:	e2933701 	adds	r3, r3, #262144	; 0x40000
	entry->buffer_address_msb = 0;
 100e894:	e585a00c 	str	sl, [r5, #12]
	ring->stats.total_bytes += size;
 100e898:	e2acc000 	adc	ip, ip, #0
	if(ring->current->n_bds_free == 0) {
 100e89c:	e3520000 	cmp	r2, #0
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e8a0:	e5857018 	str	r7, [r5, #24]
	entry->buffer_address = base_addr;
 100e8a4:	e5856008 	str	r6, [r5, #8]
	ring->stats.num_bds_filled++;
 100e8a8:	e5841018 	str	r1, [r4, #24]
 100e8ac:	e584e01c 	str	lr, [r4, #28]
	ring->stats.total_bytes += size;
 100e8b0:	e5843028 	str	r3, [r4, #40]	; 0x28
 100e8b4:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	ring->current->n_bds_free--;
 100e8b8:	e5802004 	str	r2, [r0, #4]
		ring->current->bd_working_ptr++;
 100e8bc:	12852040 	addne	r2, r5, #64	; 0x40
	ring->current->bd_last_ptr = entry;
 100e8c0:	e580500c 	str	r5, [r0, #12]
	ring->last = ring->current;
 100e8c4:	e5840004 	str	r0, [r4, #4]
		ring->current->bd_working_ptr++;
 100e8c8:	15802010 	strne	r2, [r0, #16]
	if(ring->current->n_bds_free == 0) {
 100e8cc:	0a000062 	beq	100ea5c <dma_bd_test+0x234>
	ring->total_bd_count++;
 100e8d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
 100e8d4:	e2833001 	add	r3, r3, #1
 100e8d8:	e5843030 	str	r3, [r4, #48]	; 0x30
	entry->nxtdesc_msb = 0;
 100e8dc:	e8850204 	stm	r5, {r2, r9}
	for(i = 0; i < 256; i++) {
 100e8e0:	e2588001 	subs	r8, r8, #1
 100e8e4:	1affffd9 	bne	100e850 <dma_bd_test+0x28>
	}

	d_printf(D_RAW, "\r\n\r\n** Finalise **\r\n\r\n");
 100e8e8:	e3091f54 	movw	r1, #40788	; 0x9f54
 100e8ec:	e1a00008 	mov	r0, r8
 100e8f0:	e3401106 	movt	r1, #262	; 0x106
 100e8f4:	eb00029b 	bl	100f368 <d_printf>

	dma_bd_finalise(ring);
 100e8f8:	e59d300c 	ldr	r3, [sp, #12]
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e8fc:	e5932000 	ldr	r2, [r3]
	dma_bd_debug_dump(ring);
 100e900:	e1a00003 	mov	r0, r3
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e904:	e5933004 	ldr	r3, [r3, #4]
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e908:	e5921008 	ldr	r1, [r2, #8]
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e90c:	e593300c 	ldr	r3, [r3, #12]
	ring->base->bd_base_ptr->control |= BD_SOF;
 100e910:	e5912018 	ldr	r2, [r1, #24]
 100e914:	e3822301 	orr	r2, r2, #67108864	; 0x4000000
 100e918:	e5812018 	str	r2, [r1, #24]
	ring->last->bd_last_ptr->control |= BD_EOF;
 100e91c:	e5932018 	ldr	r2, [r3, #24]
	ring->last->bd_last_ptr->nxtdesc = (uint32_t)ring->base->bd_base_ptr;
 100e920:	e5831000 	str	r1, [r3]
	ring->last->bd_last_ptr->control |= BD_EOF;
 100e924:	e3822302 	orr	r2, r2, #134217728	; 0x8000000
 100e928:	e5832018 	str	r2, [r3, #24]
	dma_bd_debug_dump(ring);
 100e92c:	ebffff23 	bl	100e5c0 <dma_bd_debug_dump>

	d_printf(D_RAW, "\r\n\r\n** Rewind **\r\n\r\n");
 100e930:	e3091f6c 	movw	r1, #40812	; 0x9f6c
 100e934:	e1a00008 	mov	r0, r8
 100e938:	e3401106 	movt	r1, #262	; 0x106
 100e93c:	eb000289 	bl	100f368 <d_printf>

	dma_bd_rewind(ring);
 100e940:	e59d000c 	ldr	r0, [sp, #12]
	struct dma_bd_tag_t *tag = ring->base;
 100e944:	e5902000 	ldr	r2, [r0]
	while(tag != NULL) {
 100e948:	e3520000 	cmp	r2, #0
 100e94c:	11a03002 	movne	r3, r2
 100e950:	0a000006 	beq	100e970 <dma_bd_test+0x148>
		tag->n_bds_free = tag->n_bds;
 100e954:	e593c000 	ldr	ip, [r3]
		tag->bd_working_ptr = tag->bd_base_ptr;
 100e958:	e5931008 	ldr	r1, [r3, #8]
		tag->n_bds_free = tag->n_bds;
 100e95c:	e583c004 	str	ip, [r3, #4]
		tag->bd_working_ptr = tag->bd_base_ptr;
 100e960:	e5831010 	str	r1, [r3, #16]
		tag = tag->next_alloc;
 100e964:	e5933014 	ldr	r3, [r3, #20]
	while(tag != NULL) {
 100e968:	e3530000 	cmp	r3, #0
 100e96c:	1afffff8 	bne	100e954 <dma_bd_test+0x12c>
	ring->total_bd_count = 0;
 100e970:	e3a04000 	mov	r4, #0
	ring->current = ring->base;
 100e974:	e5802008 	str	r2, [r0, #8]
	ring->total_bd_count = 0;
 100e978:	e5804030 	str	r4, [r0, #48]	; 0x30
	dma_bd_debug_dump(ring);
 100e97c:	ebffff0f 	bl	100e5c0 <dma_bd_debug_dump>

	d_printf(D_RAW, "\r\n\r\n** Add again **\r\n\r\n");
 100e980:	e3091f84 	movw	r1, #40836	; 0x9f84
 100e984:	e1a00004 	mov	r0, r4
 100e988:	e3401106 	movt	r1, #262	; 0x106
 100e98c:	eb000275 	bl	100f368 <d_printf>

	for(i = 0; i < 90; i++) {
 100e990:	e59d400c 	ldr	r4, [sp, #12]
	D_ASSERT(ring != NULL);
 100e994:	e3540000 	cmp	r4, #0
 100e998:	0a000037 	beq	100ea7c <dma_bd_test+0x254>
	entry = ring->current->bd_working_ptr;
 100e99c:	e5943008 	ldr	r3, [r4, #8]
 100e9a0:	e5935010 	ldr	r5, [r3, #16]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100e9a4:	e215603f 	ands	r6, r5, #63	; 0x3f
 100e9a8:	1a00003f 	bne	100eaac <dma_bd_test+0x284>
	entry->status = 0;
 100e9ac:	e1a07006 	mov	r7, r6
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e9b0:	e3a09701 	mov	r9, #262144	; 0x40000
	entry->buffer_address = base_addr;
 100e9b4:	e3a08102 	mov	r8, #-2147483648	; 0x80000000
	ring->stats.num_bds_filled++;
 100e9b8:	e5940018 	ldr	r0, [r4, #24]
	ring->current->n_bds_free--;
 100e9bc:	e5932004 	ldr	r2, [r3, #4]
	ring->stats.num_bds_filled++;
 100e9c0:	e594e01c 	ldr	lr, [r4, #28]
	ring->stats.total_bytes += size;
 100e9c4:	e5941028 	ldr	r1, [r4, #40]	; 0x28
	ring->stats.num_bds_filled++;
 100e9c8:	e2900001 	adds	r0, r0, #1
	ring->stats.total_bytes += size;
 100e9cc:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
	ring->current->n_bds_free--;
 100e9d0:	e2422001 	sub	r2, r2, #1
	ring->stats.num_bds_filled++;
 100e9d4:	e2aee000 	adc	lr, lr, #0
	entry->status = 0;
 100e9d8:	e585701c 	str	r7, [r5, #28]
	ring->stats.total_bytes += size;
 100e9dc:	e2911701 	adds	r1, r1, #262144	; 0x40000
	entry->buffer_address_msb = 0;
 100e9e0:	e585700c 	str	r7, [r5, #12]
	ring->stats.total_bytes += size;
 100e9e4:	e2acc000 	adc	ip, ip, #0
	if(ring->current->n_bds_free == 0) {
 100e9e8:	e3520000 	cmp	r2, #0
	entry->control = (size & BD_SIZE_MASK) | (flags & BD_FLAGS_MASK);
 100e9ec:	e5859018 	str	r9, [r5, #24]
	entry->buffer_address = base_addr;
 100e9f0:	e5858008 	str	r8, [r5, #8]
	ring->stats.num_bds_filled++;
 100e9f4:	e5840018 	str	r0, [r4, #24]
		ring->current->bd_working_ptr++;
 100e9f8:	11a00004 	movne	r0, r4
	ring->stats.num_bds_filled++;
 100e9fc:	e584e01c 	str	lr, [r4, #28]
	ring->stats.total_bytes += size;
 100ea00:	e5841028 	str	r1, [r4, #40]	; 0x28
 100ea04:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	ring->current->n_bds_free--;
 100ea08:	e5832004 	str	r2, [r3, #4]
		ring->current->bd_working_ptr++;
 100ea0c:	12852040 	addne	r2, r5, #64	; 0x40
	ring->current->bd_last_ptr = entry;
 100ea10:	e583500c 	str	r5, [r3, #12]
	ring->last = ring->current;
 100ea14:	e5843004 	str	r3, [r4, #4]
		ring->current->bd_working_ptr++;
 100ea18:	15832010 	strne	r2, [r3, #16]
	if(ring->current->n_bds_free == 0) {
 100ea1c:	0a00002a 	beq	100eacc <dma_bd_test+0x2a4>
	ring->total_bd_count++;
 100ea20:	e5943030 	ldr	r3, [r4, #48]	; 0x30
 100ea24:	e2833001 	add	r3, r3, #1
 100ea28:	e5843030 	str	r3, [r4, #48]	; 0x30
	entry->nxtdesc_msb = 0;
 100ea2c:	e8850084 	stm	r5, {r2, r7}
	for(i = 0; i < 90; i++) {
 100ea30:	e3560059 	cmp	r6, #89	; 0x59
 100ea34:	0a00002e 	beq	100eaf4 <dma_bd_test+0x2cc>
	D_ASSERT(ring != NULL);
 100ea38:	e3500000 	cmp	r0, #0
 100ea3c:	0a00000e 	beq	100ea7c <dma_bd_test+0x254>
	entry = ring->current->bd_working_ptr;
 100ea40:	e5903008 	ldr	r3, [r0, #8]
 100ea44:	e2866001 	add	r6, r6, #1
 100ea48:	e5935010 	ldr	r5, [r3, #16]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100ea4c:	e315003f 	tst	r5, #63	; 0x3f
 100ea50:	1a000015 	bne	100eaac <dma_bd_test+0x284>
 100ea54:	e1a04000 	mov	r4, r0
 100ea58:	eaffffd6 	b	100e9b8 <dma_bd_test+0x190>
		res = dma_bd_allocate(ring, 0, BD_NEXT_ENTRY);
 100ea5c:	e1a01002 	mov	r1, r2
 100ea60:	e1a00004 	mov	r0, r4
 100ea64:	ebfffcae 	bl	100dd24 <dma_bd_allocate>
		if(res != BD_RES_OK) {
 100ea68:	e3500000 	cmp	r0, #0
 100ea6c:	1affff9b 	bne	100e8e0 <dma_bd_test+0xb8>
 100ea70:	e5943008 	ldr	r3, [r4, #8]
 100ea74:	e5932010 	ldr	r2, [r3, #16]
 100ea78:	eaffff94 	b	100e8d0 <dma_bd_test+0xa8>
	D_ASSERT(ring != NULL);
 100ea7c:	e3093da8 	movw	r3, #40360	; 0x9da8
 100ea80:	e30a2bcc 	movw	r2, #43980	; 0xabcc
 100ea84:	e308149c 	movw	r1, #33948	; 0x849c
 100ea88:	e3403106 	movt	r3, #262	; 0x106
 100ea8c:	e3402106 	movt	r2, #262	; 0x106
 100ea90:	e3a00e11 	mov	r0, #272	; 0x110
 100ea94:	e58d0000 	str	r0, [sp]
	D_ASSERT((((int)entry) % BD_ALIGN) == 0);
 100ea98:	e3a00004 	mov	r0, #4
 100ea9c:	e3401106 	movt	r1, #262	; 0x106
 100eaa0:	eb000230 	bl	100f368 <d_printf>
 100eaa4:	e3e00062 	mvn	r0, #98	; 0x62
 100eaa8:	fa003460 	blx	101bc30 <exit>
 100eaac:	e3000129 	movw	r0, #297	; 0x129
 100eab0:	e3093da8 	movw	r3, #40360	; 0x9da8
 100eab4:	e3092de4 	movw	r2, #40420	; 0x9de4
 100eab8:	e308149c 	movw	r1, #33948	; 0x849c
 100eabc:	e58d0000 	str	r0, [sp]
 100eac0:	e3403106 	movt	r3, #262	; 0x106
 100eac4:	e3402106 	movt	r2, #262	; 0x106
 100eac8:	eafffff2 	b	100ea98 <dma_bd_test+0x270>
		res = dma_bd_allocate(ring, 0, BD_NEXT_ENTRY);
 100eacc:	e1a01002 	mov	r1, r2
 100ead0:	e1a00004 	mov	r0, r4
 100ead4:	ebfffc92 	bl	100dd24 <dma_bd_allocate>
		if(res != BD_RES_OK) {
 100ead8:	e3500000 	cmp	r0, #0
 100eadc:	05943008 	ldreq	r3, [r4, #8]
 100eae0:	059d000c 	ldreq	r0, [sp, #12]
 100eae4:	05932010 	ldreq	r2, [r3, #16]
 100eae8:	0affffcc 	beq	100ea20 <dma_bd_test+0x1f8>
 100eaec:	e59d000c 	ldr	r0, [sp, #12]
 100eaf0:	eaffffce 	b	100ea30 <dma_bd_test+0x208>
		dma_bd_add_large_sg_entry(ring, 0x80000000, 262144, 0, NULL);
	}

	dma_bd_debug_dump(ring);
 100eaf4:	ebfffeb1 	bl	100e5c0 <dma_bd_debug_dump>

	d_printf(D_RAW, "\r\n\r\n** Free **\r\n\r\n");
 100eaf8:	e3091f9c 	movw	r1, #40860	; 0x9f9c
 100eafc:	e3a00000 	mov	r0, #0
 100eb00:	e3401106 	movt	r1, #262	; 0x106
 100eb04:	eb000217 	bl	100f368 <d_printf>

	dma_bd_free(ring);
 100eb08:	e59d700c 	ldr	r7, [sp, #12]
	dma_bd_free_from(ring->base);
 100eb0c:	e5974000 	ldr	r4, [r7]
	while(tag != NULL) {
 100eb10:	e3540000 	cmp	r4, #0
 100eb14:	0a000014 	beq	100eb6c <dma_bd_test+0x344>
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100eb18:	e3096d44 	movw	r6, #40260	; 0x9d44
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100eb1c:	e3095d60 	movw	r5, #40288	; 0x9d60
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100eb20:	e3406106 	movt	r6, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100eb24:	e3405106 	movt	r5, #262	; 0x106
		d_printf(D_INFO, "Free: 0x%08x (bd_base_ptr)", tag->bd_base_ptr);
 100eb28:	e5942008 	ldr	r2, [r4, #8]
 100eb2c:	e1a01006 	mov	r1, r6
 100eb30:	e3a00002 	mov	r0, #2
 100eb34:	eb00020b 	bl	100f368 <d_printf>
		free(tag->bd_base_ptr);
 100eb38:	e5940008 	ldr	r0, [r4, #8]
 100eb3c:	fa003721 	blx	101c7c8 <free>
		tag->bd_base_ptr = NULL;
 100eb40:	e3a03000 	mov	r3, #0
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100eb44:	e1a02004 	mov	r2, r4
		tag->bd_base_ptr = NULL;
 100eb48:	e5843008 	str	r3, [r4, #8]
		d_printf(D_INFO, "Free: 0x%08x (prev)", tag);
 100eb4c:	e1a01005 	mov	r1, r5
 100eb50:	e3a00002 	mov	r0, #2
 100eb54:	eb000203 	bl	100f368 <d_printf>
		tag_next = tag->next_alloc;
 100eb58:	e5948014 	ldr	r8, [r4, #20]
		free(tag);
 100eb5c:	e1a00004 	mov	r0, r4
 100eb60:	fa003718 	blx	101c7c8 <free>
	while(tag != NULL) {
 100eb64:	e2584000 	subs	r4, r8, #0
 100eb68:	1affffee 	bne	100eb28 <dma_bd_test+0x300>
	ring->total_bd_count = 0;
 100eb6c:	e3a03000 	mov	r3, #0
	dma_bd_debug_dump(ring);
 100eb70:	e59d000c 	ldr	r0, [sp, #12]
	ring->total_bd_count = 0;
 100eb74:	e5873030 	str	r3, [r7, #48]	; 0x30
	dma_bd_debug_dump(ring);
 100eb78:	ebfffe90 	bl	100e5c0 <dma_bd_debug_dump>

	//dma_bd_destroy_ring(ring);
}
 100eb7c:	e28dd010 	add	sp, sp, #16
 100eb80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0100eb84 <fabcfg_dump_state>:
 */
void fabcfg_dump_state()
{
	int i;

	d_printf(D_INFO, "");
 100eb84:	e3091f80 	movw	r1, #40832	; 0x9f80
{
 100eb88:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "");
 100eb8c:	e3a00002 	mov	r0, #2
{
 100eb90:	e24dd014 	sub	sp, sp, #20
	d_printf(D_INFO, "");
 100eb94:	e3401106 	movt	r1, #262	; 0x106
 100eb98:	e3a07060 	mov	r7, #96	; 0x60
 100eb9c:	eb0001f1 	bl	100f368 <d_printf>
	d_printf(D_INFO, "FabCfg: Memory map (including unimplemented registers)");
 100eba0:	e3091fb0 	movw	r1, #40880	; 0x9fb0
 100eba4:	e3a00002 	mov	r0, #2
 100eba8:	e3401106 	movt	r1, #262	; 0x106
	d_printf(D_INFO, "                 0          4          8          c");

	for(i = 0; i < 1023; i += 16) {
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100ebac:	e30a501c 	movw	r5, #40988	; 0xa01c
	d_printf(D_INFO, "FabCfg: Memory map (including unimplemented registers)");
 100ebb0:	eb0001ec 	bl	100f368 <d_printf>
	d_printf(D_INFO, "                 0          4          8          c");
 100ebb4:	e3091fe8 	movw	r1, #40936	; 0x9fe8
 100ebb8:	e3a00002 	mov	r0, #2
 100ebbc:	e3401106 	movt	r1, #262	; 0x106
 100ebc0:	e34473c0 	movt	r7, #17344	; 0x43c0
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100ebc4:	e3405106 	movt	r5, #262	; 0x106
	d_printf(D_INFO, "                 0          4          8          c");
 100ebc8:	e3a06040 	mov	r6, #64	; 0x40
	for(i = 0; i < 1023; i += 16) {
 100ebcc:	e3a04000 	mov	r4, #0
	d_printf(D_INFO, "                 0          4          8          c");
 100ebd0:	eb0001e4 	bl	100f368 <d_printf>
	reg &= FAB_CFG_ADDR_MASK;
 100ebd4:	e2842004 	add	r2, r4, #4
 100ebd8:	e2840008 	add	r0, r4, #8
 100ebdc:	e284100c 	add	r1, r4, #12
 100ebe0:	e2022fff 	and	r2, r2, #1020	; 0x3fc
 100ebe4:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 100ebe8:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 100ebec:	e2843443 	add	r3, r4, #1124073472	; 0x43000000
	res = _FAB_CFG_ACCESS(reg);
 100ebf0:	e2822443 	add	r2, r2, #1124073472	; 0x43000000
 100ebf4:	e2800443 	add	r0, r0, #1124073472	; 0x43000000
 100ebf8:	e2811443 	add	r1, r1, #1124073472	; 0x43000000
 100ebfc:	e2822503 	add	r2, r2, #12582912	; 0xc00000
 100ec00:	e2800503 	add	r0, r0, #12582912	; 0xc00000
 100ec04:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 100ec08:	e2833503 	add	r3, r3, #12582912	; 0xc00000
 100ec0c:	e5933000 	ldr	r3, [r3]
 100ec10:	e2466002 	sub	r6, r6, #2
 100ec14:	e592e000 	ldr	lr, [r2]
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100ec18:	e1a02004 	mov	r2, r4
 100ec1c:	e590c000 	ldr	ip, [r0]
 100ec20:	e5910000 	ldr	r0, [r1]
 100ec24:	e1a01005 	mov	r1, r5
 100ec28:	f7d4f007 	pld	[r4, r7]
 100ec2c:	e58de000 	str	lr, [sp]
 100ec30:	e58d0008 	str	r0, [sp, #8]
 100ec34:	e3a00002 	mov	r0, #2
 100ec38:	e58dc004 	str	ip, [sp, #4]
 100ec3c:	eb0001c9 	bl	100f368 <d_printf>
	reg &= FAB_CFG_ADDR_MASK;
 100ec40:	e284c014 	add	ip, r4, #20
 100ec44:	e2840018 	add	r0, r4, #24
 100ec48:	e284101c 	add	r1, r4, #28
 100ec4c:	e20ccfff 	and	ip, ip, #1020	; 0x3fc
 100ec50:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 100ec54:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 100ec58:	e2843141 	add	r3, r4, #1073741840	; 0x40000010
	res = _FAB_CFG_ACCESS(reg);
 100ec5c:	e28cc443 	add	ip, ip, #1124073472	; 0x43000000
 100ec60:	e2800443 	add	r0, r0, #1124073472	; 0x43000000
 100ec64:	e2811443 	add	r1, r1, #1124073472	; 0x43000000
 100ec68:	e28cc503 	add	ip, ip, #12582912	; 0xc00000
 100ec6c:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 100ec70:	e283350f 	add	r3, r3, #62914560	; 0x3c00000
 100ec74:	e2800503 	add	r0, r0, #12582912	; 0xc00000
 100ec78:	e5933000 	ldr	r3, [r3]
 100ec7c:	e2842010 	add	r2, r4, #16
 100ec80:	e59ce000 	ldr	lr, [ip]
 100ec84:	e2844020 	add	r4, r4, #32
 100ec88:	e5900000 	ldr	r0, [r0]
 100ec8c:	e591c000 	ldr	ip, [r1]
 100ec90:	e1a01005 	mov	r1, r5
 100ec94:	e58de000 	str	lr, [sp]
 100ec98:	e58d0004 	str	r0, [sp, #4]
 100ec9c:	e3a00002 	mov	r0, #2
 100eca0:	e58dc008 	str	ip, [sp, #8]
 100eca4:	eb0001af 	bl	100f368 <d_printf>
 100eca8:	e3540e3e 	cmp	r4, #992	; 0x3e0
 100ecac:	1affffc8 	bne	100ebd4 <fabcfg_dump_state+0x50>
 100ecb0:	e1a05206 	lsl	r5, r6, #4
 100ecb4:	e30a601c 	movw	r6, #40988	; 0xa01c
 100ecb8:	e3406106 	movt	r6, #262	; 0x106
 100ecbc:	e2855e3e 	add	r5, r5, #992	; 0x3e0
	reg &= FAB_CFG_ADDR_MASK;
 100ecc0:	e284c004 	add	ip, r4, #4
 100ecc4:	e2841008 	add	r1, r4, #8
 100ecc8:	e284000c 	add	r0, r4, #12
 100eccc:	e20ccfff 	and	ip, ip, #1020	; 0x3fc
 100ecd0:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 100ecd4:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 100ecd8:	e2843443 	add	r3, r4, #1124073472	; 0x43000000
	res = _FAB_CFG_ACCESS(reg);
 100ecdc:	e28cc443 	add	ip, ip, #1124073472	; 0x43000000
 100ece0:	e2811443 	add	r1, r1, #1124073472	; 0x43000000
 100ece4:	e2800443 	add	r0, r0, #1124073472	; 0x43000000
 100ece8:	e28cc503 	add	ip, ip, #12582912	; 0xc00000
 100ecec:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 100ecf0:	e2800503 	add	r0, r0, #12582912	; 0xc00000
 100ecf4:	e2833503 	add	r3, r3, #12582912	; 0xc00000
 100ecf8:	e5933000 	ldr	r3, [r3]
 100ecfc:	e1a02004 	mov	r2, r4
 100ed00:	e59c7000 	ldr	r7, [ip]
	for(i = 0; i < 1023; i += 16) {
 100ed04:	e2844010 	add	r4, r4, #16
 100ed08:	e591e000 	ldr	lr, [r1]
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100ed0c:	e1a01006 	mov	r1, r6
 100ed10:	e590c000 	ldr	ip, [r0]
 100ed14:	e3a00002 	mov	r0, #2
 100ed18:	e58d7000 	str	r7, [sp]
 100ed1c:	e58de004 	str	lr, [sp, #4]
 100ed20:	e58dc008 	str	ip, [sp, #8]
 100ed24:	eb00018f 	bl	100f368 <d_printf>
	for(i = 0; i < 1023; i += 16) {
 100ed28:	e1540005 	cmp	r4, r5
 100ed2c:	1affffe3 	bne	100ecc0 <fabcfg_dump_state+0x13c>
				fabcfg_read(i), fabcfg_read(i + 4), fabcfg_read(i + 8), fabcfg_read(i + 12));
	}

	d_printf(D_INFO, "");
 100ed30:	e3091f80 	movw	r1, #40832	; 0x9f80
 100ed34:	e3a00002 	mov	r0, #2
 100ed38:	e3401106 	movt	r1, #262	; 0x106
}
 100ed3c:	e28dd014 	add	sp, sp, #20
 100ed40:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "");
 100ed44:	ea000187 	b	100f368 <d_printf>

0100ed48 <fabcfg_init>:
{
 100ed48:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 100ed4c:	e3a04000 	mov	r4, #0
 100ed50:	e34443c0 	movt	r4, #17344	; 0x43c0
 100ed54:	e30a1040 	movw	r1, #41024	; 0xa040
 100ed58:	e1a02004 	mov	r2, r4
{
 100ed5c:	e24dd00c 	sub	sp, sp, #12
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 100ed60:	e3401106 	movt	r1, #262	; 0x106
 100ed64:	e3a00002 	mov	r0, #2
 100ed68:	eb00017e 	bl	100f368 <d_printf>
 100ed6c:	e5942008 	ldr	r2, [r4, #8]
	if(magic == FAB_CFG_MAGIC_VALUE) {
 100ed70:	e3073670 	movw	r3, #30320	; 0x7670
 100ed74:	e345336d 	movt	r3, #21357	; 0x536d
 100ed78:	e1520003 	cmp	r2, r3
 100ed7c:	1a000044 	bne	100ee94 <fabcfg_init+0x14c>
		d_printf(D_INFO, "FabCfg: Magic value: 0x%08x - OK", magic);
 100ed80:	e30a1060 	movw	r1, #41056	; 0xa060
 100ed84:	e3076860 	movw	r6, #30816	; 0x7860
 100ed88:	e3401106 	movt	r1, #262	; 0x106
 100ed8c:	e3a00002 	mov	r0, #2
 100ed90:	e3406102 	movt	r6, #258	; 0x102
	_FAB_CFG_ACCESS(reg) = data;
 100ed94:	e3058678 	movw	r8, #22136	; 0x5678
 100ed98:	e3047321 	movw	r7, #17185	; 0x4321
 100ed9c:	e2869018 	add	r9, r6, #24
 100eda0:	eb000170 	bl	100f368 <d_printf>
 100eda4:	e3418234 	movt	r8, #4660	; 0x1234
	d_printf(D_INFO, "FabCfg: Running %d test patterns of register interface", FBCFG_NUM_TEST_PATTERNS);
 100eda8:	e30a1084 	movw	r1, #41092	; 0xa084
 100edac:	e3487765 	movt	r7, #34661	; 0x8765
 100edb0:	e3401106 	movt	r1, #262	; 0x106
 100edb4:	e3a02006 	mov	r2, #6
 100edb8:	e3a00002 	mov	r0, #2
 100edbc:	eb000169 	bl	100f368 <d_printf>
		fabcfg_write(FAB_CFG_DUMMY1, fabcfg_dummy_tests[i]);
 100edc0:	e4965004 	ldr	r5, [r6], #4
 100edc4:	e5845000 	str	r5, [r4]
	res = _FAB_CFG_ACCESS(reg);
 100edc8:	e5942000 	ldr	r2, [r4]
		if(test == fabcfg_dummy_tests[i]) {
 100edcc:	e1550002 	cmp	r5, r2
 100edd0:	0a000029 	beq	100ee7c <fabcfg_init+0x134>
			d_printf(D_ERROR, "FabCfg: DummyTest1 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 100edd4:	e30a1118 	movw	r1, #41240	; 0xa118
 100edd8:	e5163004 	ldr	r3, [r6, #-4]
 100eddc:	e3401106 	movt	r1, #262	; 0x106
 100ede0:	e3a00004 	mov	r0, #4
 100ede4:	eb00015f 	bl	100f368 <d_printf>
 100ede8:	e5942004 	ldr	r2, [r4, #4]
		if(test == fabcfg_dummy_tests[i]) {
 100edec:	e1550002 	cmp	r5, r2
 100edf0:	0a00001c 	beq	100ee68 <fabcfg_init+0x120>
			d_printf(D_ERROR, "FabCfg: DummyTest2 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 100edf4:	e30a1154 	movw	r1, #41300	; 0xa154
 100edf8:	e1a03005 	mov	r3, r5
 100edfc:	e3401106 	movt	r1, #262	; 0x106
 100ee00:	e3a00004 	mov	r0, #4
 100ee04:	eb000157 	bl	100f368 <d_printf>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 100ee08:	e1590006 	cmp	r9, r6
	_FAB_CFG_ACCESS(reg) = data;
 100ee0c:	e5848000 	str	r8, [r4]
 100ee10:	e5847004 	str	r7, [r4, #4]
 100ee14:	1affffe9 	bne	100edc0 <fabcfg_init+0x78>
	d_printf(D_INFO, "FabCfg: All tests passed");
 100ee18:	e30a1190 	movw	r1, #41360	; 0xa190
 100ee1c:	e3a00002 	mov	r0, #2
 100ee20:	e3401106 	movt	r1, #262	; 0x106
 100ee24:	eb00014f 	bl	100f368 <d_printf>
	res = _FAB_CFG_ACCESS(reg);
 100ee28:	e3a02000 	mov	r2, #0
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 100ee2c:	e30a11ac 	movw	r1, #41388	; 0xa1ac
 100ee30:	e34423c0 	movt	r2, #17344	; 0x43c0
 100ee34:	e3401106 	movt	r1, #262	; 0x106
 100ee38:	e592300c 	ldr	r3, [r2, #12]
 100ee3c:	e3a00002 	mov	r0, #2
 100ee40:	e592e010 	ldr	lr, [r2, #16]
 100ee44:	e7e72453 	ubfx	r2, r3, #8, #8
	ver_uh = (version & 0xffff0000) >> 16;
 100ee48:	e1a0c823 	lsr	ip, r3, #16
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 100ee4c:	e58de004 	str	lr, [sp, #4]
 100ee50:	e6ef3073 	uxtb	r3, r3
 100ee54:	e58dc000 	str	ip, [sp]
 100ee58:	eb000142 	bl	100f368 <d_printf>
}
 100ee5c:	e28dd00c 	add	sp, sp, #12
 100ee60:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
	fabcfg_dump_state();
 100ee64:	eaffff46 	b	100eb84 <fabcfg_dump_state>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 100ee68:	e1590006 	cmp	r9, r6
	_FAB_CFG_ACCESS(reg) = data;
 100ee6c:	e5848000 	str	r8, [r4]
 100ee70:	e5847004 	str	r7, [r4, #4]
 100ee74:	1affffd1 	bne	100edc0 <fabcfg_init+0x78>
 100ee78:	eaffffe6 	b	100ee18 <fabcfg_init+0xd0>
			d_printf(D_EXINFO, "FabCfg: DummyTest1 value: 0x%08x - OK", test);
 100ee7c:	e30a10f0 	movw	r1, #41200	; 0xa0f0
 100ee80:	e1a02005 	mov	r2, r5
 100ee84:	e3401106 	movt	r1, #262	; 0x106
 100ee88:	e3a00001 	mov	r0, #1
 100ee8c:	eb000135 	bl	100f368 <d_printf>
 100ee90:	eaffffd4 	b	100ede8 <fabcfg_init+0xa0>
		d_printf(D_ERROR, "FabCfg: Magic value: 0x%08x - Not OK, Expect 0x%08x", magic, FAB_CFG_MAGIC_VALUE);
 100ee94:	e30a10bc 	movw	r1, #41148	; 0xa0bc
 100ee98:	e3a00004 	mov	r0, #4
 100ee9c:	e3401106 	movt	r1, #262	; 0x106
 100eea0:	eb000130 	bl	100f368 <d_printf>
		exit(-1);
 100eea4:	e3e00000 	mvn	r0, #0
 100eea8:	fa003360 	blx	101bc30 <exit>
 100eeac:	00000000 	andeq	r0, r0, r0

0100eeb0 <irq_xscutimer>:
 */
volatile void irq_xscutimer(void *callback)
{
	XScuTimer *timer = (XScuTimer *) callback;

	if(XScuTimer_IsExpired(timer)) {
 100eeb0:	e5903004 	ldr	r3, [r0, #4]
	return *(volatile u32 *) Addr;
 100eeb4:	e593300c 	ldr	r3, [r3, #12]
 100eeb8:	e3130001 	tst	r3, #1
		g_hal.g_timer_overflow++;
 100eebc:	13053b80 	movwne	r3, #23424	; 0x5b80
 100eec0:	13403107 	movtne	r3, #263	; 0x107
 100eec4:	1593204c 	ldrne	r2, [r3, #76]	; 0x4c
 100eec8:	12822001 	addne	r2, r2, #1
 100eecc:	1583204c 	strne	r2, [r3, #76]	; 0x4c
	}
}
 100eed0:	e12fff1e 	bx	lr

0100eed4 <d_printf.constprop.8>:
 * @param	...			Varadic args
 *
 * @note	For formats besides D_RAW, this function appends \r\n to all outputs and prints info/warn/error code and
 * 			optionally prints the system timer.
 */
void d_printf(int debug_code, char *fmt, ...)
 100eed4:	e92d000e 	push	{r1, r2, r3}
			case D_EXINFO:
				print("[--] ");							// dull white text (default)
				break;

			case D_INFO:
				print("\033[0;97m[ii] "); 				// bright white text
 100eed8:	e30a01ec 	movw	r0, #41452	; 0xa1ec
void d_printf(int debug_code, char *fmt, ...)
 100eedc:	e92d40d0 	push	{r4, r6, r7, lr}
 100eee0:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100eee4:	e24dd01c 	sub	sp, sp, #28
				print("\033[0;97m[ii] "); 				// bright white text
 100eee8:	e3400106 	movt	r0, #262	; 0x106
 100eeec:	eb00282e 	bl	1018fac <print>
				print("\033[97;41m[EE]\033[0;91m ");	// red text
				break;
		}

#if DBG_PRINT_TIMES == 1
		if(g_hal.g_timer_have_init) {
 100eef0:	e3053b80 	movw	r3, #23424	; 0x5b80
 100eef4:	e3403107 	movt	r3, #263	; 0x107
 100eef8:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 100eefc:	e3540000 	cmp	r4, #0
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
			sec = total_usec / 1000000;
			usec = total_usec % 1000000;
		} else {
			sec = 0;
			usec = 0;
 100ef00:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 100ef04:	0a00001b 	beq	100ef78 <d_printf.constprop.8+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100ef08:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100ef0c:	eddf3b37 	vldr	d19, [pc, #220]	; 100eff0 <d_printf.constprop.8+0x11c>
 100ef10:	eddf2b38 	vldr	d18, [pc, #224]	; 100eff8 <d_printf.constprop.8+0x124>
 100ef14:	e5922004 	ldr	r2, [r2, #4]
 100ef18:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100ef1c:	e1e02002 	mvn	r2, r2
 100ef20:	ee073a90 	vmov	s15, r3
 100ef24:	eef80b67 	vcvt.f64.u32	d16, s15
 100ef28:	ee072a90 	vmov	s15, r2
 100ef2c:	eef81b67 	vcvt.f64.u32	d17, s15
 100ef30:	ee600ba3 	vmul.f64	d16, d16, d19
 100ef34:	ee410ba2 	vmla.f64	d16, d17, d18
 100ef38:	ec510b30 	vmov	r0, r1, d16
 100ef3c:	fa0032c7 	blx	101ba60 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 100ef40:	e3042240 	movw	r2, #16960	; 0x4240
 100ef44:	e3a03000 	mov	r3, #0
 100ef48:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100ef4c:	e1a06000 	mov	r6, r0
 100ef50:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100ef54:	fa00329b 	blx	101b9c8 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 100ef58:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 100ef5c:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 100ef60:	e340200f 	movt	r2, #15
 100ef64:	e3a03000 	mov	r3, #0
 100ef68:	e1a00006 	mov	r0, r6
 100ef6c:	e1a01007 	mov	r1, r7
 100ef70:	fa003294 	blx	101b9c8 <__aeabi_uldivmod>
 100ef74:	e1a03002 	mov	r3, r2
		}

		if(debug_code != D_RAW) {
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 100ef78:	e30a21fc 	movw	r2, #41468	; 0xa1fc
 100ef7c:	e58d3000 	str	r3, [sp]
 100ef80:	e3402106 	movt	r2, #262	; 0x106
 100ef84:	e1a03004 	mov	r3, r4
 100ef88:	e3a01a01 	mov	r1, #4096	; 0x1000
 100ef8c:	e28d000c 	add	r0, sp, #12
 100ef90:	fa003c5a 	blx	101e100 <snprintf>
			print(time_buffer);
 100ef94:	e28d000c 	add	r0, sp, #12
 100ef98:	eb002803 	bl	1018fac <print>
		}
#endif

		va_list args;
		va_start(args, fmt);
 100ef9c:	e28dca01 	add	ip, sp, #4096	; 0x1000

		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100efa0:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100efa4:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100efa8:	e282202c 	add	r2, r2, #44	; 0x2c
 100efac:	e1a0300c 	mov	r3, ip
 100efb0:	e5922000 	ldr	r2, [r2]
 100efb4:	e3a01a01 	mov	r1, #4096	; 0x1000
 100efb8:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100efbc:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100efc0:	fa004cc5 	blx	10222dc <vsnprintf>
		print(buffer);
 100efc4:	e28d0018 	add	r0, sp, #24
 100efc8:	eb0027f7 	bl	1018fac <print>

		if(debug_code != D_RAW) {
			print("\033[m\r\n");
 100efcc:	e30a0208 	movw	r0, #41480	; 0xa208
 100efd0:	e3400106 	movt	r0, #262	; 0x106
 100efd4:	eb0027f4 	bl	1018fac <print>
		}

		va_end(args);
	}
}
 100efd8:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100efdc:	e28dd01c 	add	sp, sp, #28
 100efe0:	e8bd40d0 	pop	{r4, r6, r7, lr}
 100efe4:	e28dd00c 	add	sp, sp, #12
 100efe8:	e12fff1e 	bx	lr
 100efec:	e320f000 	nop	{0}
 100eff0:	a17f0000 	.word	0xa17f0000
 100eff4:	41689374 	.word	0x41689374
 100eff8:	a17f0000 	.word	0xa17f0000
 100effc:	3f689374 	.word	0x3f689374

0100f000 <d_printf.constprop.9>:
void d_printf(int debug_code, char *fmt, ...)
 100f000:	e92d000e 	push	{r1, r2, r3}
}
 100f004:	e28dd00c 	add	sp, sp, #12
 100f008:	e12fff1e 	bx	lr

0100f00c <d_printf.constprop.10>:
void d_printf(int debug_code, char *fmt, ...)
 100f00c:	e92d000e 	push	{r1, r2, r3}
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 100f010:	e30a0210 	movw	r0, #41488	; 0xa210
void d_printf(int debug_code, char *fmt, ...)
 100f014:	e92d40d0 	push	{r4, r6, r7, lr}
 100f018:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100f01c:	e24dd01c 	sub	sp, sp, #28
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 100f020:	e3400106 	movt	r0, #262	; 0x106
 100f024:	eb0027e0 	bl	1018fac <print>
		if(g_hal.g_timer_have_init) {
 100f028:	e3053b80 	movw	r3, #23424	; 0x5b80
 100f02c:	e3403107 	movt	r3, #263	; 0x107
 100f030:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 100f034:	e3540000 	cmp	r4, #0
			usec = 0;
 100f038:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 100f03c:	0a00001b 	beq	100f0b0 <d_printf.constprop.10+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100f040:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100f044:	eddf3b37 	vldr	d19, [pc, #220]	; 100f128 <d_printf.constprop.10+0x11c>
 100f048:	eddf2b38 	vldr	d18, [pc, #224]	; 100f130 <d_printf.constprop.10+0x124>
 100f04c:	e5922004 	ldr	r2, [r2, #4]
 100f050:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100f054:	e1e02002 	mvn	r2, r2
 100f058:	ee073a90 	vmov	s15, r3
 100f05c:	eef80b67 	vcvt.f64.u32	d16, s15
 100f060:	ee072a90 	vmov	s15, r2
 100f064:	eef81b67 	vcvt.f64.u32	d17, s15
 100f068:	ee600ba3 	vmul.f64	d16, d16, d19
 100f06c:	ee410ba2 	vmla.f64	d16, d17, d18
 100f070:	ec510b30 	vmov	r0, r1, d16
 100f074:	fa003279 	blx	101ba60 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 100f078:	e3042240 	movw	r2, #16960	; 0x4240
 100f07c:	e3a03000 	mov	r3, #0
 100f080:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100f084:	e1a06000 	mov	r6, r0
 100f088:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100f08c:	fa00324d 	blx	101b9c8 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 100f090:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 100f094:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 100f098:	e340200f 	movt	r2, #15
 100f09c:	e3a03000 	mov	r3, #0
 100f0a0:	e1a00006 	mov	r0, r6
 100f0a4:	e1a01007 	mov	r1, r7
 100f0a8:	fa003246 	blx	101b9c8 <__aeabi_uldivmod>
 100f0ac:	e1a03002 	mov	r3, r2
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 100f0b0:	e30a21fc 	movw	r2, #41468	; 0xa1fc
 100f0b4:	e58d3000 	str	r3, [sp]
 100f0b8:	e3402106 	movt	r2, #262	; 0x106
 100f0bc:	e1a03004 	mov	r3, r4
 100f0c0:	e3a01a01 	mov	r1, #4096	; 0x1000
 100f0c4:	e28d000c 	add	r0, sp, #12
 100f0c8:	fa003c0c 	blx	101e100 <snprintf>
			print(time_buffer);
 100f0cc:	e28d000c 	add	r0, sp, #12
 100f0d0:	eb0027b5 	bl	1018fac <print>
		va_start(args, fmt);
 100f0d4:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f0d8:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100f0dc:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f0e0:	e282202c 	add	r2, r2, #44	; 0x2c
 100f0e4:	e1a0300c 	mov	r3, ip
 100f0e8:	e5922000 	ldr	r2, [r2]
 100f0ec:	e3a01a01 	mov	r1, #4096	; 0x1000
 100f0f0:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100f0f4:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f0f8:	fa004c77 	blx	10222dc <vsnprintf>
		print(buffer);
 100f0fc:	e28d0018 	add	r0, sp, #24
 100f100:	eb0027a9 	bl	1018fac <print>
			print("\033[m\r\n");
 100f104:	e30a0208 	movw	r0, #41480	; 0xa208
 100f108:	e3400106 	movt	r0, #262	; 0x106
 100f10c:	eb0027a6 	bl	1018fac <print>
}
 100f110:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100f114:	e28dd01c 	add	sp, sp, #28
 100f118:	e8bd40d0 	pop	{r4, r6, r7, lr}
 100f11c:	e28dd00c 	add	sp, sp, #12
 100f120:	e12fff1e 	bx	lr
 100f124:	e320f000 	nop	{0}
 100f128:	a17f0000 	.word	0xa17f0000
 100f12c:	41689374 	.word	0x41689374
 100f130:	a17f0000 	.word	0xa17f0000
 100f134:	3f689374 	.word	0x3f689374

0100f138 <d_xilinx_assert>:
/**
 * Xilinx assert handler.
 */
void d_xilinx_assert(const char8 *file, s32 line)
{
	d_printf(D_ERROR, "XilAssert failed at line %d of file `%s'\r\n", line, file);
 100f138:	e1a02001 	mov	r2, r1
 100f13c:	e30a1228 	movw	r1, #41512	; 0xa228
 100f140:	e1a03000 	mov	r3, r0
 100f144:	e3401106 	movt	r1, #262	; 0x106
 100f148:	e3a00004 	mov	r0, #4
 100f14c:	eaffffae 	b	100f00c <d_printf.constprop.10>

0100f150 <bogo_calibrate>:
{
 100f150:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100f154:	e3056b80 	movw	r6, #23424	; 0x5b80
 100f158:	e3406107 	movt	r6, #263	; 0x107
 100f15c:	e3a01000 	mov	r1, #0
 100f160:	e3441020 	movt	r1, #16416	; 0x4020
 100f164:	e286be86 	add	fp, r6, #2144	; 0x860
 100f168:	e5968014 	ldr	r8, [r6, #20]
 100f16c:	e3a03002 	mov	r3, #2
{
 100f170:	ed2d8b02 	vpush	{d8}
	uint64_t timing_total = 0;
 100f174:	e3a09000 	mov	r9, #0
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100f178:	ed9f8a5e 	vldr	s16, [pc, #376]	; 100f2f8 <bogo_calibrate+0x1a8>
{
 100f17c:	e24dd024 	sub	sp, sp, #36	; 0x24
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100f180:	ee071a90 	vmov	s15, r1
 100f184:	e2888004 	add	r8, r8, #4
 100f188:	e2860a01 	add	r0, r6, #4096	; 0x1000
 100f18c:	e58d3018 	str	r3, [sp, #24]
	uint64_t timing_total = 0;
 100f190:	e58d9014 	str	r9, [sp, #20]
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100f194:	e5801058 	str	r1, [r0, #88]	; 0x58
 100f198:	e5987000 	ldr	r7, [r8]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100f19c:	ee687a27 	vmul.f32	s15, s16, s15
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100f1a0:	e3770c01 	cmn	r7, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100f1a4:	e1e07007 	mvn	r7, r7
		msb = g_hal.g_timer_overflow;
 100f1a8:	9596104c 	ldrls	r1, [r6, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 100f1ac:	e5867058 	str	r7, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100f1b0:	ee170a90 	vmov	r0, s15
		msb = g_hal.g_timer_overflow;
 100f1b4:	958d101c 	strls	r1, [sp, #28]
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100f1b8:	e59da01c 	ldr	sl, [sp, #28]
	g_hal.timers[index] = timer_value;
 100f1bc:	e586a05c 	str	sl, [r6, #92]	; 0x5c
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100f1c0:	fa003216 	blx	101ba20 <__aeabi_f2ulz>
	while(iters--) {
 100f1c4:	e2504001 	subs	r4, r0, #1
 100f1c8:	e3e02000 	mvn	r2, #0
 100f1cc:	e2c15000 	sbc	r5, r1, #0
 100f1d0:	e1903001 	orrs	r3, r0, r1
 100f1d4:	e3e03000 	mvn	r3, #0
 100f1d8:	0a000009 	beq	100f204 <bogo_calibrate+0xb4>
		__asm__("nop");
 100f1dc:	e320f000 	nop	{0}
	while(iters--) {
 100f1e0:	e2544001 	subs	r4, r4, #1
 100f1e4:	e2c55000 	sbc	r5, r5, #0
 100f1e8:	e1550003 	cmp	r5, r3
 100f1ec:	01540002 	cmpeq	r4, r2
 100f1f0:	1afffff9 	bne	100f1dc <bogo_calibrate+0x8c>
 100f1f4:	e5968014 	ldr	r8, [r6, #20]
 100f1f8:	e5967058 	ldr	r7, [r6, #88]	; 0x58
 100f1fc:	e596a05c 	ldr	sl, [r6, #92]	; 0x5c
 100f200:	e2888004 	add	r8, r8, #4
 100f204:	e5981000 	ldr	r1, [r8]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100f208:	e3710c01 	cmn	r1, #256	; 0x100
 100f20c:	8a000026 	bhi	100f2ac <bogo_calibrate+0x15c>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100f210:	e1e01001 	mvn	r1, r1
		msb = g_hal.g_timer_overflow;
 100f214:	e596004c 	ldr	r0, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f218:	e0517007 	subs	r7, r1, r7
		timing_total += d_read_timing(0);
 100f21c:	e59d1014 	ldr	r1, [sp, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f220:	e50b7008 	str	r7, [fp, #-8]
 100f224:	e0c0a00a 	sbc	sl, r0, sl
		timing_total += d_read_timing(0);
 100f228:	e0999007 	adds	r9, r9, r7
 100f22c:	e0a1100a 	adc	r1, r1, sl
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f230:	e50ba004 	str	sl, [fp, #-4]
		timing_total += d_read_timing(0);
 100f234:	e58d1014 	str	r1, [sp, #20]
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 100f238:	e59d1018 	ldr	r1, [sp, #24]
 100f23c:	e3510001 	cmp	r1, #1
 100f240:	1a000025 	bne	100f2dc <bogo_calibrate+0x18c>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 100f244:	e59d1014 	ldr	r1, [sp, #20]
 100f248:	e1a00009 	mov	r0, r9
 100f24c:	fa00313b 	blx	101b740 <__aeabi_ul2d>
 100f250:	eddf0b26 	vldr	d16, [pc, #152]	; 100f2f0 <bogo_calibrate+0x1a0>
 100f254:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100f258:	e30a1254 	movw	r1, #41556	; 0xa254
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100f25c:	ed9f6a26 	vldr	s12, [pc, #152]	; 100f2fc <bogo_calibrate+0x1ac>
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100f260:	e3401106 	movt	r1, #262	; 0x106
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100f264:	eeb07a04 	vmov.f32	s14, #4	; 0x40200000  2.5
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100f268:	e3a00002 	mov	r0, #2
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 100f26c:	ee610ba0 	vmul.f64	d16, d17, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100f270:	e59fc088 	ldr	ip, [pc, #136]	; 100f300 <bogo_calibrate+0x1b0>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 100f274:	eef77be0 	vcvt.f32.f64	s15, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100f278:	eec66a27 	vdiv.f32	s13, s12, s15
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100f27c:	eef70ae7 	vcvt.f64.f32	d16, s15
 100f280:	edcd0b00 	vstr	d16, [sp]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100f284:	ee667a87 	vmul.f32	s15, s13, s14
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100f288:	eef70ae6 	vcvt.f64.f32	d16, s13
 100f28c:	eef71ae7 	vcvt.f64.f32	d17, s15
 100f290:	edcd0b02 	vstr	d16, [sp, #8]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100f294:	edcc7a16 	vstr	s15, [ip, #88]	; 0x58
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100f298:	ec532b31 	vmov	r2, r3, d17
 100f29c:	ebffff0c 	bl	100eed4 <d_printf.constprop.8>
}
 100f2a0:	e28dd024 	add	sp, sp, #36	; 0x24
 100f2a4:	ecbd8b02 	vpop	{d8}
 100f2a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100f2ac:	e1e01001 	mvn	r1, r1
 100f2b0:	e3a00000 	mov	r0, #0
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f2b4:	e0517007 	subs	r7, r1, r7
		timing_total += d_read_timing(0);
 100f2b8:	e59d1014 	ldr	r1, [sp, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f2bc:	e0c0a00a 	sbc	sl, r0, sl
		timing_total += d_read_timing(0);
 100f2c0:	e0999007 	adds	r9, r9, r7
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f2c4:	e90b0480 	stmdb	fp, {r7, sl}
		timing_total += d_read_timing(0);
 100f2c8:	e0a1100a 	adc	r1, r1, sl
 100f2cc:	e58d1014 	str	r1, [sp, #20]
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 100f2d0:	e59d1018 	ldr	r1, [sp, #24]
 100f2d4:	e3510001 	cmp	r1, #1
 100f2d8:	0affffd9 	beq	100f244 <bogo_calibrate+0xf4>
 100f2dc:	e59f101c 	ldr	r1, [pc, #28]	; 100f300 <bogo_calibrate+0x1b0>
 100f2e0:	edd17a16 	vldr	s15, [r1, #88]	; 0x58
 100f2e4:	e3a01001 	mov	r1, #1
 100f2e8:	e58d1018 	str	r1, [sp, #24]
 100f2ec:	eaffffa9 	b	100f198 <bogo_calibrate+0x48>
 100f2f0:	a17f0000 	.word	0xa17f0000
 100f2f4:	3f689374 	.word	0x3f689374
 100f2f8:	47c35000 	.word	0x47c35000
 100f2fc:	48435000 	.word	0x48435000
 100f300:	01076b80 	.word	0x01076b80

0100f304 <bogo_delay>:
{
 100f304:	e92d4030 	push	{r4, r5, lr}
 100f308:	e24dd00c 	sub	sp, sp, #12
 100f30c:	e58d0004 	str	r0, [sp, #4]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100f310:	eddd7a01 	vldr	s15, [sp, #4]
 100f314:	e59f3048 	ldr	r3, [pc, #72]	; 100f364 <bogo_delay+0x60>
 100f318:	eef87a67 	vcvt.f32.u32	s15, s15
 100f31c:	ed937a16 	vldr	s14, [r3, #88]	; 0x58
 100f320:	ee677a87 	vmul.f32	s15, s15, s14
 100f324:	ee170a90 	vmov	r0, s15
 100f328:	fa0031bc 	blx	101ba20 <__aeabi_f2ulz>
	while(iters--) {
 100f32c:	e2504001 	subs	r4, r0, #1
 100f330:	e2c15000 	sbc	r5, r1, #0
 100f334:	e1903001 	orrs	r3, r0, r1
 100f338:	0a000007 	beq	100f35c <bogo_delay+0x58>
 100f33c:	e3e02000 	mvn	r2, #0
 100f340:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 100f344:	e320f000 	nop	{0}
	while(iters--) {
 100f348:	e2544001 	subs	r4, r4, #1
 100f34c:	e2c55000 	sbc	r5, r5, #0
 100f350:	e1550003 	cmp	r5, r3
 100f354:	01540002 	cmpeq	r4, r2
 100f358:	1afffff9 	bne	100f344 <bogo_delay+0x40>
}
 100f35c:	e28dd00c 	add	sp, sp, #12
 100f360:	e8bd8030 	pop	{r4, r5, pc}
 100f364:	01076b80 	.word	0x01076b80

0100f368 <d_printf>:
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100f368:	e3500001 	cmp	r0, #1
{
 100f36c:	e92d000e 	push	{r1, r2, r3}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100f370:	d3a03000 	movle	r3, #0
 100f374:	c3a03001 	movgt	r3, #1
 100f378:	e3500000 	cmp	r0, #0
 100f37c:	03a03001 	moveq	r3, #1
{
 100f380:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100f384:	e3530000 	cmp	r3, #0
{
 100f388:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100f38c:	e24dd018 	sub	sp, sp, #24
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100f390:	0a00003b 	beq	100f484 <d_printf+0x11c>
		switch(debug_code) {
 100f394:	e2403001 	sub	r3, r0, #1
 100f398:	e1a04000 	mov	r4, r0
 100f39c:	e3530003 	cmp	r3, #3
 100f3a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100f3a4:	ea000006 	b	100f3c4 <d_printf+0x5c>
 100f3a8:	0100f498 	.word	0x0100f498
 100f3ac:	0100f4a8 	.word	0x0100f4a8
 100f3b0:	0100f4b8 	.word	0x0100f4b8
 100f3b4:	0100f3b8 	.word	0x0100f3b8
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 100f3b8:	e30a0210 	movw	r0, #41488	; 0xa210
 100f3bc:	e3400106 	movt	r0, #262	; 0x106
 100f3c0:	eb0026f9 	bl	1018fac <print>
		if(g_hal.g_timer_have_init) {
 100f3c4:	e3053b80 	movw	r3, #23424	; 0x5b80
 100f3c8:	e3403107 	movt	r3, #263	; 0x107
 100f3cc:	e5935050 	ldr	r5, [r3, #80]	; 0x50
 100f3d0:	e3550000 	cmp	r5, #0
			usec = 0;
 100f3d4:	01a03005 	moveq	r3, r5
		if(g_hal.g_timer_have_init) {
 100f3d8:	0a00001b 	beq	100f44c <d_printf+0xe4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100f3dc:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100f3e0:	eddf3b52 	vldr	d19, [pc, #328]	; 100f530 <d_printf+0x1c8>
 100f3e4:	eddf2b53 	vldr	d18, [pc, #332]	; 100f538 <d_printf+0x1d0>
 100f3e8:	e5922004 	ldr	r2, [r2, #4]
 100f3ec:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100f3f0:	e1e02002 	mvn	r2, r2
 100f3f4:	ee073a90 	vmov	s15, r3
 100f3f8:	eef80b67 	vcvt.f64.u32	d16, s15
 100f3fc:	ee072a90 	vmov	s15, r2
 100f400:	eef81b67 	vcvt.f64.u32	d17, s15
 100f404:	ee600ba3 	vmul.f64	d16, d16, d19
 100f408:	ee410ba2 	vmla.f64	d16, d17, d18
 100f40c:	ec510b30 	vmov	r0, r1, d16
 100f410:	fa003192 	blx	101ba60 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 100f414:	e3042240 	movw	r2, #16960	; 0x4240
 100f418:	e3a03000 	mov	r3, #0
 100f41c:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100f420:	e1a06000 	mov	r6, r0
 100f424:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100f428:	fa003166 	blx	101b9c8 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 100f42c:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 100f430:	e1a05000 	mov	r5, r0
			usec = total_usec % 1000000;
 100f434:	e340200f 	movt	r2, #15
 100f438:	e3a03000 	mov	r3, #0
 100f43c:	e1a00006 	mov	r0, r6
 100f440:	e1a01007 	mov	r1, r7
 100f444:	fa00315f 	blx	101b9c8 <__aeabi_uldivmod>
 100f448:	e1a03002 	mov	r3, r2
		if(debug_code != D_RAW) {
 100f44c:	e3540000 	cmp	r4, #0
 100f450:	1a00001c 	bne	100f4c8 <d_printf+0x160>
		va_start(args, fmt);
 100f454:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f458:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100f45c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f460:	e282202c 	add	r2, r2, #44	; 0x2c
 100f464:	e1a0300c 	mov	r3, ip
 100f468:	e28d0018 	add	r0, sp, #24
 100f46c:	e5922000 	ldr	r2, [r2]
 100f470:	e3a01a01 	mov	r1, #4096	; 0x1000
		va_start(args, fmt);
 100f474:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f478:	fa004b97 	blx	10222dc <vsnprintf>
		print(buffer);
 100f47c:	e28d0018 	add	r0, sp, #24
 100f480:	eb0026c9 	bl	1018fac <print>
}
 100f484:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100f488:	e28dd018 	add	sp, sp, #24
 100f48c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 100f490:	e28dd00c 	add	sp, sp, #12
 100f494:	e12fff1e 	bx	lr
				print("[--] ");							// dull white text (default)
 100f498:	e30a02a8 	movw	r0, #41640	; 0xa2a8
 100f49c:	e3400106 	movt	r0, #262	; 0x106
 100f4a0:	eb0026c1 	bl	1018fac <print>
				break;
 100f4a4:	eaffffc6 	b	100f3c4 <d_printf+0x5c>
				print("\033[0;97m[ii] "); 				// bright white text
 100f4a8:	e30a01ec 	movw	r0, #41452	; 0xa1ec
 100f4ac:	e3400106 	movt	r0, #262	; 0x106
 100f4b0:	eb0026bd 	bl	1018fac <print>
				break;
 100f4b4:	eaffffc2 	b	100f3c4 <d_printf+0x5c>
				print("\033[30;103m[WW]\033[0;93m ");	// yellow text
 100f4b8:	e30a02b0 	movw	r0, #41648	; 0xa2b0
 100f4bc:	e3400106 	movt	r0, #262	; 0x106
 100f4c0:	eb0026b9 	bl	1018fac <print>
				break;
 100f4c4:	eaffffbe 	b	100f3c4 <d_printf+0x5c>
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 100f4c8:	e30a21fc 	movw	r2, #41468	; 0xa1fc
 100f4cc:	e58d3000 	str	r3, [sp]
 100f4d0:	e3402106 	movt	r2, #262	; 0x106
 100f4d4:	e1a03005 	mov	r3, r5
 100f4d8:	e3a01a01 	mov	r1, #4096	; 0x1000
 100f4dc:	e28d000c 	add	r0, sp, #12
 100f4e0:	fa003b06 	blx	101e100 <snprintf>
			print(time_buffer);
 100f4e4:	e28d000c 	add	r0, sp, #12
 100f4e8:	eb0026af 	bl	1018fac <print>
		va_start(args, fmt);
 100f4ec:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f4f0:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100f4f4:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f4f8:	e282202c 	add	r2, r2, #44	; 0x2c
 100f4fc:	e1a0300c 	mov	r3, ip
 100f500:	e5922000 	ldr	r2, [r2]
 100f504:	e3a01a01 	mov	r1, #4096	; 0x1000
 100f508:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100f50c:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100f510:	fa004b71 	blx	10222dc <vsnprintf>
		print(buffer);
 100f514:	e28d0018 	add	r0, sp, #24
 100f518:	eb0026a3 	bl	1018fac <print>
			print("\033[m\r\n");
 100f51c:	e30a0208 	movw	r0, #41480	; 0xa208
 100f520:	e3400106 	movt	r0, #262	; 0x106
 100f524:	eb0026a0 	bl	1018fac <print>
}
 100f528:	eaffffd5 	b	100f484 <d_printf+0x11c>
 100f52c:	e320f000 	nop	{0}
 100f530:	a17f0000 	.word	0xa17f0000
 100f534:	41689374 	.word	0x41689374
 100f538:	a17f0000 	.word	0xa17f0000
 100f53c:	3f689374 	.word	0x3f689374

0100f540 <d_waitkey>:
	res = XUartPs_RecvByte(STDIN_BASEADDRESS);
 100f540:	e3a00a01 	mov	r0, #4096	; 0x1000
 100f544:	e34e0000 	movt	r0, #57344	; 0xe000
 100f548:	ea002ce1 	b	101a8d4 <XUartPs_RecvByte>

0100f54c <d_iskeypress>:
	*LocalAddr = Value;
 100f54c:	e3a03a01 	mov	r3, #4096	; 0x1000
 100f550:	e3a02003 	mov	r2, #3
 100f554:	e34e3000 	movt	r3, #57344	; 0xe000
 100f558:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 100f55c:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
	return XUartPs_IsReceiveData(STDIN_BASEADDRESS);
 100f560:	e2200002 	eor	r0, r0, #2
}
 100f564:	e7e000d0 	ubfx	r0, r0, #1, #1
 100f568:	e12fff1e 	bx	lr

0100f56c <d_getkey>:
 100f56c:	e3a00a01 	mov	r0, #4096	; 0x1000
 100f570:	e34e0000 	movt	r0, #57344	; 0xe000
 100f574:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
	if(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100f578:	e3130002 	tst	r3, #2
 100f57c:	0a000001 	beq	100f588 <d_getkey+0x1c>
}
 100f580:	e3a00000 	mov	r0, #0
 100f584:	e12fff1e 	bx	lr
		return XUartPs_RecvByte(STDIN_BASEADDRESS);
 100f588:	ea002cd1 	b	101a8d4 <XUartPs_RecvByte>

0100f58c <d_read_global_timer>:
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100f58c:	e3052b80 	movw	r2, #23424	; 0x5b80
 100f590:	e3402107 	movt	r2, #263	; 0x107
 100f594:	e5923014 	ldr	r3, [r2, #20]
 100f598:	e5933004 	ldr	r3, [r3, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100f59c:	e3730c01 	cmn	r3, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100f5a0:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 100f5a4:	9592c04c 	ldrls	ip, [r2, #76]	; 0x4c
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100f5a8:	e5803000 	str	r3, [r0]
	*msb_ret = msb;
 100f5ac:	e581c000 	str	ip, [r1]
}
 100f5b0:	e12fff1e 	bx	lr

0100f5b4 <d_start_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f5b4:	e35000ff 	cmp	r0, #255	; 0xff
 100f5b8:	ca00000b 	bgt	100f5ec <d_start_timing+0x38>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100f5bc:	e3053b80 	movw	r3, #23424	; 0x5b80
	g_hal.timers[index] = timer_value;
 100f5c0:	e280000b 	add	r0, r0, #11
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100f5c4:	e3403107 	movt	r3, #263	; 0x107
 100f5c8:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timers[index] = timer_value;
 100f5cc:	e0831180 	add	r1, r3, r0, lsl #3
 100f5d0:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100f5d4:	e3720c01 	cmn	r2, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100f5d8:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 100f5dc:	9593c04c 	ldrls	ip, [r3, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 100f5e0:	e7832180 	str	r2, [r3, r0, lsl #3]
 100f5e4:	e581c004 	str	ip, [r1, #4]
 100f5e8:	e12fff1e 	bx	lr
{
 100f5ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f5f0:	e30001ae 	movw	r0, #430	; 0x1ae
{
 100f5f4:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f5f8:	e30a32c8 	movw	r3, #41672	; 0xa2c8
 100f5fc:	e30a22d8 	movw	r2, #41688	; 0xa2d8
 100f600:	e308149c 	movw	r1, #33948	; 0x849c
 100f604:	e58d0000 	str	r0, [sp]
 100f608:	e3403106 	movt	r3, #262	; 0x106
 100f60c:	e3a00004 	mov	r0, #4
 100f610:	e3402106 	movt	r2, #262	; 0x106
 100f614:	e3401106 	movt	r1, #262	; 0x106
 100f618:	ebfffe7b 	bl	100f00c <d_printf.constprop.10>
 100f61c:	e3e00062 	mvn	r0, #98	; 0x62
 100f620:	fa003182 	blx	101bc30 <exit>

0100f624 <d_stop_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f624:	e35000ff 	cmp	r0, #255	; 0xff
{
 100f628:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100f62c:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f630:	ca000013 	bgt	100f684 <d_stop_timing+0x60>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100f634:	e3052b80 	movw	r2, #23424	; 0x5b80
 100f638:	e3402107 	movt	r2, #263	; 0x107
 100f63c:	e5923014 	ldr	r3, [r2, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f640:	e082e180 	add	lr, r2, r0, lsl #3
 100f644:	e2800f42 	add	r0, r0, #264	; 0x108
 100f648:	e59ec058 	ldr	ip, [lr, #88]	; 0x58
 100f64c:	e2800003 	add	r0, r0, #3
 100f650:	e5933004 	ldr	r3, [r3, #4]
 100f654:	e1a00180 	lsl	r0, r0, #3
 100f658:	e59ee05c 	ldr	lr, [lr, #92]	; 0x5c
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100f65c:	e3730c01 	cmn	r3, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100f660:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 100f664:	9592104c 	ldrls	r1, [r2, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100f668:	e053300c 	subs	r3, r3, ip
 100f66c:	e082c000 	add	ip, r2, r0
 100f670:	e7823000 	str	r3, [r2, r0]
 100f674:	e0c1100e 	sbc	r1, r1, lr
 100f678:	e58c1004 	str	r1, [ip, #4]
}
 100f67c:	e28dd00c 	add	sp, sp, #12
 100f680:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f684:	e30001c2 	movw	r0, #450	; 0x1c2
 100f688:	e30a32c8 	movw	r3, #41672	; 0xa2c8
 100f68c:	e30a22d8 	movw	r2, #41688	; 0xa2d8
 100f690:	e308149c 	movw	r1, #33948	; 0x849c
 100f694:	e58d0000 	str	r0, [sp]
 100f698:	e3403106 	movt	r3, #262	; 0x106
 100f69c:	e3a00004 	mov	r0, #4
 100f6a0:	e3402106 	movt	r2, #262	; 0x106
 100f6a4:	e3401106 	movt	r1, #262	; 0x106
 100f6a8:	ebfffe57 	bl	100f00c <d_printf.constprop.10>
 100f6ac:	e3e00062 	mvn	r0, #98	; 0x62
 100f6b0:	fa00315e 	blx	101bc30 <exit>

0100f6b4 <d_read_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f6b4:	e35000ff 	cmp	r0, #255	; 0xff
 100f6b8:	ca000006 	bgt	100f6d8 <d_read_timing+0x24>
	return g_hal.timer_deltas[index];
 100f6bc:	e2800f42 	add	r0, r0, #264	; 0x108
 100f6c0:	e3053b80 	movw	r3, #23424	; 0x5b80
 100f6c4:	e2800003 	add	r0, r0, #3
 100f6c8:	e3403107 	movt	r3, #263	; 0x107
 100f6cc:	e1a00180 	lsl	r0, r0, #3
}
 100f6d0:	e18000d3 	ldrd	r0, [r0, r3]
 100f6d4:	e12fff1e 	bx	lr
{
 100f6d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f6dc:	e30001d3 	movw	r0, #467	; 0x1d3
{
 100f6e0:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f6e4:	e30a32c8 	movw	r3, #41672	; 0xa2c8
 100f6e8:	e30a22d8 	movw	r2, #41688	; 0xa2d8
 100f6ec:	e308149c 	movw	r1, #33948	; 0x849c
 100f6f0:	e58d0000 	str	r0, [sp]
 100f6f4:	e3403106 	movt	r3, #262	; 0x106
 100f6f8:	e3a00004 	mov	r0, #4
 100f6fc:	e3402106 	movt	r2, #262	; 0x106
 100f700:	e3401106 	movt	r1, #262	; 0x106
 100f704:	ebfffe40 	bl	100f00c <d_printf.constprop.10>
 100f708:	e3e00062 	mvn	r0, #98	; 0x62
 100f70c:	fa003147 	blx	101bc30 <exit>

0100f710 <d_read_timing_us>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f710:	e35000ff 	cmp	r0, #255	; 0xff
{
 100f714:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100f718:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f71c:	ca00000c 	bgt	100f754 <d_read_timing_us+0x44>
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100f720:	e2800f42 	add	r0, r0, #264	; 0x108
 100f724:	e3053b80 	movw	r3, #23424	; 0x5b80
 100f728:	e2800003 	add	r0, r0, #3
 100f72c:	e3403107 	movt	r3, #263	; 0x107
 100f730:	e1a00180 	lsl	r0, r0, #3
 100f734:	e18000d3 	ldrd	r0, [r0, r3]
 100f738:	fa003004 	blx	101b750 <__aeabi_l2d>
 100f73c:	ed9f0b11 	vldr	d0, [pc, #68]	; 100f788 <d_read_timing_us+0x78>
 100f740:	ec410b30 	vmov	d16, r0, r1
 100f744:	ee200b80 	vmul.f64	d0, d16, d0
}
 100f748:	eeb70bc0 	vcvt.f32.f64	s0, d0
 100f74c:	e28dd00c 	add	sp, sp, #12
 100f750:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f754:	e3a00e1e 	mov	r0, #480	; 0x1e0
 100f758:	e30a32c8 	movw	r3, #41672	; 0xa2c8
 100f75c:	e30a22d8 	movw	r2, #41688	; 0xa2d8
 100f760:	e308149c 	movw	r1, #33948	; 0x849c
 100f764:	e58d0000 	str	r0, [sp]
 100f768:	e3403106 	movt	r3, #262	; 0x106
 100f76c:	e3a00004 	mov	r0, #4
 100f770:	e3402106 	movt	r2, #262	; 0x106
 100f774:	e3401106 	movt	r1, #262	; 0x106
 100f778:	ebfffe23 	bl	100f00c <d_printf.constprop.10>
 100f77c:	e3e00062 	mvn	r0, #98	; 0x62
 100f780:	fa00312a 	blx	101bc30 <exit>
 100f784:	e320f000 	nop	{0}
 100f788:	a17f0000 	.word	0xa17f0000
 100f78c:	3f689374 	.word	0x3f689374

0100f790 <d_dump_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f790:	e35100ff 	cmp	r1, #255	; 0xff
{
 100f794:	e92d4070 	push	{r4, r5, r6, lr}
 100f798:	e24dd010 	sub	sp, sp, #16
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f79c:	ca00001b 	bgt	100f810 <d_dump_timing+0x80>
	return g_hal.timer_deltas[index];
 100f7a0:	e2811f42 	add	r1, r1, #264	; 0x108
 100f7a4:	e3053b80 	movw	r3, #23424	; 0x5b80
 100f7a8:	e2811003 	add	r1, r1, #3
 100f7ac:	e3403107 	movt	r3, #263	; 0x107
 100f7b0:	e1a01181 	lsl	r1, r1, #3
 100f7b4:	e1a06000 	mov	r6, r0
 100f7b8:	e0832001 	add	r2, r3, r1
 100f7bc:	e7934001 	ldr	r4, [r3, r1]
 100f7c0:	e5925004 	ldr	r5, [r2, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100f7c4:	e1a00004 	mov	r0, r4
 100f7c8:	e1a01005 	mov	r1, r5
 100f7cc:	fa002fdf 	blx	101b750 <__aeabi_l2d>
 100f7d0:	eddf0b1a 	vldr	d16, [pc, #104]	; 100f840 <d_dump_timing+0xb0>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100f7d4:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100f7d8:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100f7dc:	e0a55005 	adc	r5, r5, r5
 100f7e0:	e30a12f4 	movw	r1, #41716	; 0xa2f4
 100f7e4:	e1cd40f0 	strd	r4, [sp]
 100f7e8:	e1a02006 	mov	r2, r6
 100f7ec:	e3401106 	movt	r1, #262	; 0x106
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100f7f0:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100f7f4:	e3a00002 	mov	r0, #2
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100f7f8:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100f7fc:	eef70ae7 	vcvt.f64.f32	d16, s15
 100f800:	edcd0b02 	vstr	d16, [sp, #8]
 100f804:	ebfffdb2 	bl	100eed4 <d_printf.constprop.8>
}
 100f808:	e28dd010 	add	sp, sp, #16
 100f80c:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f810:	e30001d3 	movw	r0, #467	; 0x1d3
 100f814:	e30a32c8 	movw	r3, #41672	; 0xa2c8
 100f818:	e30a22d8 	movw	r2, #41688	; 0xa2d8
 100f81c:	e308149c 	movw	r1, #33948	; 0x849c
 100f820:	e58d0000 	str	r0, [sp]
 100f824:	e3403106 	movt	r3, #262	; 0x106
 100f828:	e3a00004 	mov	r0, #4
 100f82c:	e3402106 	movt	r2, #262	; 0x106
 100f830:	e3401106 	movt	r1, #262	; 0x106
 100f834:	ebfffdf4 	bl	100f00c <d_printf.constprop.10>
 100f838:	e3e00062 	mvn	r0, #98	; 0x62
 100f83c:	fa0030fb 	blx	101bc30 <exit>
 100f840:	a17f0000 	.word	0xa17f0000
 100f844:	3f689374 	.word	0x3f689374

0100f848 <d_dump_timing_ex>:
 100f848:	e35100ff 	cmp	r1, #255	; 0xff
 100f84c:	d12fff1e 	bxle	lr
{
 100f850:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f854:	e30001d3 	movw	r0, #467	; 0x1d3
{
 100f858:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100f85c:	e30a32c8 	movw	r3, #41672	; 0xa2c8
 100f860:	e30a22d8 	movw	r2, #41688	; 0xa2d8
 100f864:	e308149c 	movw	r1, #33948	; 0x849c
 100f868:	e58d0000 	str	r0, [sp]
 100f86c:	e3403106 	movt	r3, #262	; 0x106
 100f870:	e3a00004 	mov	r0, #4
 100f874:	e3402106 	movt	r2, #262	; 0x106
 100f878:	e3401106 	movt	r1, #262	; 0x106
 100f87c:	ebfffde2 	bl	100f00c <d_printf.constprop.10>
 100f880:	e3e00062 	mvn	r0, #98	; 0x62
 100f884:	fa0030e9 	blx	101bc30 <exit>

0100f888 <d_dump_malloc_info>:
/*
 * Print malloc info (more than malloc_stats).  TODO:  This should pull data from a common
 * function so we can return same data over SPI port.
 */
void d_dump_malloc_info()
{
 100f888:	e92d4070 	push	{r4, r5, r6, lr}
 100f88c:	e24dd030 	sub	sp, sp, #48	; 0x30
	struct mallinfo _mallinfo = mallinfo();
 100f890:	e28d0008 	add	r0, sp, #8
	unsigned int heap_size, heap_alloc, heap_free;
	float perc_free;

	heap_size = (unsigned int)(&_HEAP_SIZE);
 100f894:	e3004000 	movw	r4, #0
 100f898:	e3404d80 	movt	r4, #3456	; 0xd80
	struct mallinfo _mallinfo = mallinfo();
 100f89c:	fa00382d 	blx	101d958 <mallinfo>
	heap_alloc = _mallinfo.uordblks;
	heap_free = heap_size - heap_alloc;
	perc_free = 100.0f * ((float)heap_free / heap_size);

	d_printf(D_INFO, "---- MALLOC INFO ----");
 100f8a0:	e30a1318 	movw	r1, #41752	; 0xa318
 100f8a4:	e3a00002 	mov	r0, #2
 100f8a8:	e3401106 	movt	r1, #262	; 0x106
	heap_alloc = _mallinfo.uordblks;
 100f8ac:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
	d_printf(D_INFO, "---- MALLOC INFO ----");
 100f8b0:	ebfffd87 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Compiled stack size: %7d KiB (%10d bytes)", (unsigned int)(&_STACK_SIZE) / 1024, (unsigned int)(&_STACK_SIZE));
 100f8b4:	e3003000 	movw	r3, #0
 100f8b8:	e30a1330 	movw	r1, #41776	; 0xa330
 100f8bc:	e3403001 	movt	r3, #1
 100f8c0:	e3401106 	movt	r1, #262	; 0x106
 100f8c4:	e1a02523 	lsr	r2, r3, #10
 100f8c8:	e3a00002 	mov	r0, #2
	heap_free = heap_size - heap_alloc;
 100f8cc:	e0445006 	sub	r5, r4, r6
	d_printf(D_INFO, "Compiled stack size: %7d KiB (%10d bytes)", (unsigned int)(&_STACK_SIZE) / 1024, (unsigned int)(&_STACK_SIZE));
 100f8d0:	ebfffd7f 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Compiled heap size:  %7d KiB (%10d bytes)", heap_size / 1024, heap_size);
 100f8d4:	e30a135c 	movw	r1, #41820	; 0xa35c
 100f8d8:	e1a03004 	mov	r3, r4
 100f8dc:	e1a02524 	lsr	r2, r4, #10
 100f8e0:	e3401106 	movt	r1, #262	; 0x106
 100f8e4:	e3a00002 	mov	r0, #2
 100f8e8:	ebfffd79 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Total heap alloc'd:  %7d KiB (%10d bytes)", heap_alloc / 1024, heap_alloc);
 100f8ec:	e30a1388 	movw	r1, #41864	; 0xa388
 100f8f0:	e1a03006 	mov	r3, r6
 100f8f4:	e1a02526 	lsr	r2, r6, #10
 100f8f8:	e3401106 	movt	r1, #262	; 0x106
 100f8fc:	e3a00002 	mov	r0, #2
 100f900:	ebfffd73 	bl	100eed4 <d_printf.constprop.8>
	perc_free = 100.0f * ((float)heap_free / heap_size);
 100f904:	ee075a90 	vmov	s15, r5
	d_printf(D_INFO, "Maximum heap free:   %7d KiB (%10d bytes) (%.1f%% free)", heap_free / 1024, heap_free, perc_free);
 100f908:	e30a13b4 	movw	r1, #41908	; 0xa3b4
	perc_free = 100.0f * ((float)heap_free / heap_size);
 100f90c:	eeb86a67 	vcvt.f32.u32	s12, s15
	d_printf(D_INFO, "Maximum heap free:   %7d KiB (%10d bytes) (%.1f%% free)", heap_free / 1024, heap_free, perc_free);
 100f910:	e1a03005 	mov	r3, r5
	perc_free = 100.0f * ((float)heap_free / heap_size);
 100f914:	ee074a90 	vmov	s15, r4
	d_printf(D_INFO, "Maximum heap free:   %7d KiB (%10d bytes) (%.1f%% free)", heap_free / 1024, heap_free, perc_free);
 100f918:	e1a02525 	lsr	r2, r5, #10
	perc_free = 100.0f * ((float)heap_free / heap_size);
 100f91c:	eddf6a0d 	vldr	s13, [pc, #52]	; 100f958 <d_dump_malloc_info+0xd0>
	d_printf(D_INFO, "Maximum heap free:   %7d KiB (%10d bytes) (%.1f%% free)", heap_free / 1024, heap_free, perc_free);
 100f920:	e3401106 	movt	r1, #262	; 0x106
	perc_free = 100.0f * ((float)heap_free / heap_size);
 100f924:	eef87a67 	vcvt.f32.u32	s15, s15
	d_printf(D_INFO, "Maximum heap free:   %7d KiB (%10d bytes) (%.1f%% free)", heap_free / 1024, heap_free, perc_free);
 100f928:	e3a00002 	mov	r0, #2
	perc_free = 100.0f * ((float)heap_free / heap_size);
 100f92c:	ee867a27 	vdiv.f32	s14, s12, s15
 100f930:	ee677a26 	vmul.f32	s15, s14, s13
	d_printf(D_INFO, "Maximum heap free:   %7d KiB (%10d bytes) (%.1f%% free)", heap_free / 1024, heap_free, perc_free);
 100f934:	eef70ae7 	vcvt.f64.f32	d16, s15
 100f938:	edcd0b00 	vstr	d16, [sp]
 100f93c:	ebfffd64 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "---- END    INFO ----");
 100f940:	e30a13ec 	movw	r1, #41964	; 0xa3ec
 100f944:	e3a00002 	mov	r0, #2
 100f948:	e3401106 	movt	r1, #262	; 0x106
}
 100f94c:	e28dd030 	add	sp, sp, #48	; 0x30
 100f950:	e8bd4070 	pop	{r4, r5, r6, lr}
	d_printf(D_INFO, "---- END    INFO ----");
 100f954:	eafffd5e 	b	100eed4 <d_printf.constprop.8>
 100f958:	42c80000 	.word	0x42c80000

0100f95c <hal_init>:
{
 100f95c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 1.0f;
 100f960:	e3056b80 	movw	r6, #23424	; 0x5b80
 100f964:	e3406107 	movt	r6, #263	; 0x107
{
 100f968:	e24dd014 	sub	sp, sp, #20
	g_hal.bogo_cal = 1.0f;
 100f96c:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
 100f970:	e286ba01 	add	fp, r6, #4096	; 0x1000
 100f974:	e58b3058 	str	r3, [fp, #88]	; 0x58
	init_platform();
 100f978:	eb000654 	bl	10112d0 <init_platform>
	Xil_AssertSetCallback(&d_xilinx_assert);
 100f97c:	e30f0138 	movw	r0, #61752	; 0xf138
 100f980:	e3400100 	movt	r0, #256	; 0x100
 100f984:	eb002583 	bl	1018f98 <Xil_AssertSetCallback>
	d_printf(D_RAW, "\r\n\r\n\033[2J\033[0m\r\n");
 100f988:	e30a1404 	movw	r1, #41988	; 0xa404
 100f98c:	e3a00000 	mov	r0, #0
 100f990:	e3401106 	movt	r1, #262	; 0x106
 100f994:	ebfffe73 	bl	100f368 <d_printf>
	d_printf(D_INFO, "ps_app: Zynq application for YAOS Oscilloscope Project (%s)", PS_APP_VERSION_TAG);
 100f998:	e30a2414 	movw	r2, #42004	; 0xa414
 100f99c:	e30a1420 	movw	r1, #42016	; 0xa420
 100f9a0:	e3402106 	movt	r2, #262	; 0x106
 100f9a4:	e3401106 	movt	r1, #262	; 0x106
 100f9a8:	e3a00002 	mov	r0, #2
 100f9ac:	ebfffd48 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Built %s %s", __DATE__, __TIME__);
 100f9b0:	e30a345c 	movw	r3, #42076	; 0xa45c
 100f9b4:	e30a2468 	movw	r2, #42088	; 0xa468
 100f9b8:	e30a1474 	movw	r1, #42100	; 0xa474
 100f9bc:	e3403106 	movt	r3, #262	; 0x106
 100f9c0:	e3402106 	movt	r2, #262	; 0x106
 100f9c4:	e3401106 	movt	r1, #262	; 0x106
 100f9c8:	e3a00002 	mov	r0, #2
 100f9cc:	ebfffd40 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "");
 100f9d0:	e3091f80 	movw	r1, #40832	; 0x9f80
 100f9d4:	e3a00002 	mov	r0, #2
 100f9d8:	e3401106 	movt	r1, #262	; 0x106
 100f9dc:	ebfffd3c 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Application (C) 2020 Tomato Engineering Ltd.");
 100f9e0:	e30a1480 	movw	r1, #42112	; 0xa480
 100f9e4:	e3a00002 	mov	r0, #2
 100f9e8:	e3401106 	movt	r1, #262	; 0x106
 100f9ec:	ebfffd38 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Parts       (C) 2005 - 2015 Xilinx, Inc.");
 100f9f0:	e30a14b0 	movw	r1, #42160	; 0xa4b0
 100f9f4:	e3a00002 	mov	r0, #2
 100f9f8:	e3401106 	movt	r1, #262	; 0x106
 100f9fc:	ebfffd34 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "");
 100fa00:	e3091f80 	movw	r1, #40832	; 0x9f80
 100fa04:	e3a00002 	mov	r0, #2
 100fa08:	e3401106 	movt	r1, #262	; 0x106
 100fa0c:	ebfffd30 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "Application is licenced under the MIT Licence");
 100fa10:	e30a14dc 	movw	r1, #42204	; 0xa4dc
 100fa14:	e3a00002 	mov	r0, #2
 100fa18:	e3401106 	movt	r1, #262	; 0x106
 100fa1c:	ebfffd2c 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "For information see LICENCE in the Git repository");
 100fa20:	e30a150c 	movw	r1, #42252	; 0xa50c
 100fa24:	e3a00002 	mov	r0, #2
 100fa28:	e3401106 	movt	r1, #262	; 0x106
 100fa2c:	ebfffd28 	bl	100eed4 <d_printf.constprop.8>
	d_printf(D_INFO, "");
 100fa30:	e3091f80 	movw	r1, #40832	; 0x9f80
 100fa34:	e3a00002 	mov	r0, #2
 100fa38:	e3401106 	movt	r1, #262	; 0x106
 100fa3c:	ebfffd24 	bl	100eed4 <d_printf.constprop.8>
	d_dump_malloc_info();
 100fa40:	ebffff90 	bl	100f888 <d_dump_malloc_info>
	d_printf(D_INFO, "");
 100fa44:	e3091f80 	movw	r1, #40832	; 0x9f80
 100fa48:	e3a00002 	mov	r0, #2
 100fa4c:	e3401106 	movt	r1, #262	; 0x106
 100fa50:	ebfffd1f 	bl	100eed4 <d_printf.constprop.8>
	Xil_ICacheEnable();
 100fa54:	eb002758 	bl	10197bc <Xil_ICacheEnable>
	Xil_DCacheEnable();
 100fa58:	eb00274e 	bl	1019798 <Xil_DCacheEnable>
	d_printf(D_INFO, "boot: enabled D- and I-cache");
 100fa5c:	e30a1540 	movw	r1, #42304	; 0xa540
 100fa60:	e3a00002 	mov	r0, #2
 100fa64:	e3401106 	movt	r1, #262	; 0x106
 100fa68:	ebfffd19 	bl	100eed4 <d_printf.constprop.8>
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 100fa6c:	e3a00000 	mov	r0, #0
 100fa70:	eb0020f3 	bl	1017e44 <XScuGic_LookupConfig>
	if(g_hal.xscu_gic_cfg == NULL) {
 100fa74:	e3500000 	cmp	r0, #0
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 100fa78:	e586000c 	str	r0, [r6, #12]
	if(g_hal.xscu_gic_cfg == NULL) {
 100fa7c:	0a0000c9 	beq	100fda8 <hal_init+0x44c>
	error = XScuGic_CfgInitialize(&g_hal.xscu_gic, g_hal.xscu_gic_cfg, g_hal.xscu_gic_cfg->CpuBaseAddress);
 100fa80:	e1a01000 	mov	r1, r0
 100fa84:	e5902004 	ldr	r2, [r0, #4]
 100fa88:	e1a00006 	mov	r0, r6
 100fa8c:	eb002077 	bl	1017c70 <XScuGic_CfgInitialize>
	if(error != XST_SUCCESS) {
 100fa90:	e3500000 	cmp	r0, #0
 100fa94:	1a0000ec 	bne	100fe4c <hal_init+0x4f0>
	error = XScuGic_SelfTest(&g_hal.xscu_gic);
 100fa98:	e1a00006 	mov	r0, r6
 100fa9c:	eb0020ef 	bl	1017e60 <XScuGic_SelfTest>
	if(error != XST_SUCCESS) {
 100faa0:	e2508000 	subs	r8, r0, #0
 100faa4:	1a0000e1 	bne	100fe30 <hal_init+0x4d4>
	Xil_ExceptionInit();
 100faa8:	eb00297b 	bl	101a09c <Xil_ExceptionInit>
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &g_hal.xscu_gic);
 100faac:	e30712d8 	movw	r1, #29400	; 0x72d8
 100fab0:	e1a02006 	mov	r2, r6
 100fab4:	e3401101 	movt	r1, #257	; 0x101
 100fab8:	e3a00005 	mov	r0, #5
 100fabc:	eb002977 	bl	101a0a0 <Xil_ExceptionRegisterHandler>
	Xil_ExceptionEnable();
 100fac0:	e10f3000 	mrs	r3, CPSR
 100fac4:	e3c33080 	bic	r3, r3, #128	; 0x80
 100fac8:	e129f003 	msr	CPSR_fc, r3
	d_printf(D_INFO, "XScuGic: interrupt controller ready");
 100facc:	e30a15e0 	movw	r1, #42464	; 0xa5e0
 100fad0:	e3a00002 	mov	r0, #2
 100fad4:	e3401106 	movt	r1, #262	; 0x106
 100fad8:	ebfffcfd 	bl	100eed4 <d_printf.constprop.8>
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 100fadc:	e1a00008 	mov	r0, r8
 100fae0:	eb0021f0 	bl	10182a8 <XScuTimer_LookupConfig>
 100fae4:	e1a03000 	mov	r3, r0
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 100fae8:	e2860010 	add	r0, r6, #16
 100faec:	e5932004 	ldr	r2, [r3, #4]
 100faf0:	e1a01003 	mov	r1, r3
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 100faf4:	e5863020 	str	r3, [r6, #32]
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 100faf8:	eb002105 	bl	1017f14 <XScuTimer_CfgInitialize>
	if (error != XST_SUCCESS) {
 100fafc:	e3500000 	cmp	r0, #0
 100fb00:	1a0000c3 	bne	100fe14 <hal_init+0x4b8>
	error = XScuTimer_SelfTest(&g_hal.xscu_timer);
 100fb04:	e2860010 	add	r0, r6, #16
 100fb08:	eb0021b7 	bl	10181ec <XScuTimer_SelfTest>
	if (error != XST_SUCCESS) {
 100fb0c:	e3500000 	cmp	r0, #0
 100fb10:	1a0000b8 	bne	100fdf8 <hal_init+0x49c>
	d_printf(D_INFO, "XScuTimer: ready");
 100fb14:	e30a1664 	movw	r1, #42596	; 0xa664
 100fb18:	e3a00002 	mov	r0, #2
 100fb1c:	e3401106 	movt	r1, #262	; 0x106
 100fb20:	ebfffceb 	bl	100eed4 <d_printf.constprop.8>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)irq_xscutimer, (void *)&g_hal.xscu_timer);
 100fb24:	e30e2eb0 	movw	r2, #61104	; 0xeeb0
 100fb28:	e2863010 	add	r3, r6, #16
 100fb2c:	e3402100 	movt	r2, #256	; 0x100
 100fb30:	e3a0101d 	mov	r1, #29
 100fb34:	e1a00006 	mov	r0, r6
 100fb38:	eb001e18 	bl	10173a0 <XScuGic_Connect>
	if (error != XST_SUCCESS) {
 100fb3c:	e3500000 	cmp	r0, #0
 100fb40:	1a0000a5 	bne	100fddc <hal_init+0x480>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 100fb44:	e5963014 	ldr	r3, [r6, #20]
	*LocalAddr = Value;
 100fb48:	e3e02000 	mvn	r2, #0
	g_hal.g_timer_overflow = 0;
 100fb4c:	e586004c 	str	r0, [r6, #76]	; 0x4c
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 100fb50:	e3a0101d 	mov	r1, #29
 100fb54:	e1a00006 	mov	r0, r6
 100fb58:	e5832000 	str	r2, [r3]
	XScuTimer_EnableAutoReload(&g_hal.xscu_timer);
 100fb5c:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 100fb60:	e5923008 	ldr	r3, [r2, #8]
 100fb64:	e3833002 	orr	r3, r3, #2
	*LocalAddr = Value;
 100fb68:	e5823008 	str	r3, [r2, #8]
	XScuTimer_EnableInterrupt(&g_hal.xscu_timer);
 100fb6c:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 100fb70:	e5923008 	ldr	r3, [r2, #8]
 100fb74:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 100fb78:	e5823008 	str	r3, [r2, #8]
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 100fb7c:	eb001f5e 	bl	10178fc <XScuGic_Enable>
	XScuTimer_Start(&g_hal.xscu_timer);
 100fb80:	e2860010 	add	r0, r6, #16
 100fb84:	eb00210e 	bl	1017fc4 <XScuTimer_Start>
	g_hal.g_timer_have_init = 1;
 100fb88:	e3a03001 	mov	r3, #1
 100fb8c:	e5863050 	str	r3, [r6, #80]	; 0x50
	bogo_calibrate();
 100fb90:	ebfffd6e 	bl	100f150 <bogo_calibrate>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100fb94:	e5968014 	ldr	r8, [r6, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100fb98:	ed9f7ab4 	vldr	s14, [pc, #720]	; 100fe70 <hal_init+0x514>
 100fb9c:	eddb7a16 	vldr	s15, [fp, #88]	; 0x58
	return *(volatile u32 *) Addr;
 100fba0:	e598a004 	ldr	sl, [r8, #4]
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100fba4:	e2888004 	add	r8, r8, #4
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100fba8:	e37a0c01 	cmn	sl, #256	; 0x100
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100fbac:	ee677a27 	vmul.f32	s15, s14, s15
		msb = g_hal.g_timer_overflow;
 100fbb0:	9596904c 	ldrls	r9, [r6, #76]	; 0x4c
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100fbb4:	e1e0a00a 	mvn	sl, sl
	g_hal.timers[index] = timer_value;
 100fbb8:	e586a058 	str	sl, [r6, #88]	; 0x58
 100fbbc:	e586905c 	str	r9, [r6, #92]	; 0x5c
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100fbc0:	ee170a90 	vmov	r0, s15
 100fbc4:	fa002f95 	blx	101ba20 <__aeabi_f2ulz>
	while(iters--) {
 100fbc8:	e2504001 	subs	r4, r0, #1
 100fbcc:	e2c15000 	sbc	r5, r1, #0
 100fbd0:	e1903001 	orrs	r3, r0, r1
 100fbd4:	0a00000b 	beq	100fc08 <hal_init+0x2ac>
 100fbd8:	e3e02000 	mvn	r2, #0
 100fbdc:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 100fbe0:	e320f000 	nop	{0}
	while(iters--) {
 100fbe4:	e2544001 	subs	r4, r4, #1
 100fbe8:	e2c55000 	sbc	r5, r5, #0
 100fbec:	e1550003 	cmp	r5, r3
 100fbf0:	01540002 	cmpeq	r4, r2
 100fbf4:	1afffff9 	bne	100fbe0 <hal_init+0x284>
 100fbf8:	e5968014 	ldr	r8, [r6, #20]
 100fbfc:	e596a058 	ldr	sl, [r6, #88]	; 0x58
 100fc00:	e596905c 	ldr	r9, [r6, #92]	; 0x5c
 100fc04:	e2888004 	add	r8, r8, #4
 100fc08:	e5984000 	ldr	r4, [r8]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100fc0c:	e59f3264 	ldr	r3, [pc, #612]	; 100fe78 <hal_init+0x51c>
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100fc10:	e3740c01 	cmn	r4, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100fc14:	e1e04004 	mvn	r4, r4
		msb = g_hal.g_timer_overflow;
 100fc18:	9596704c 	ldrls	r7, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100fc1c:	e054400a 	subs	r4, r4, sl
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100fc20:	e1a00004 	mov	r0, r4
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100fc24:	e0c75009 	sbc	r5, r7, r9
 100fc28:	e14340f8 	strd	r4, [r3, #-8]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100fc2c:	e1a01005 	mov	r1, r5
 100fc30:	fa002ec6 	blx	101b750 <__aeabi_l2d>
 100fc34:	eddf0b8b 	vldr	d16, [pc, #556]	; 100fe68 <hal_init+0x50c>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100fc38:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100fc3c:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100fc40:	e0a55005 	adc	r5, r5, r5
 100fc44:	e30a26b8 	movw	r2, #42680	; 0xa6b8
 100fc48:	e30a12f4 	movw	r1, #41716	; 0xa2f4
 100fc4c:	e3402106 	movt	r2, #262	; 0x106
 100fc50:	e3401106 	movt	r1, #262	; 0x106
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100fc54:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100fc58:	e3a00002 	mov	r0, #2
 100fc5c:	e58d4000 	str	r4, [sp]
 100fc60:	e58d5004 	str	r5, [sp, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100fc64:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100fc68:	eef70ae7 	vcvt.f64.f32	d16, s15
 100fc6c:	edcd0b02 	vstr	d16, [sp, #8]
 100fc70:	ebfffc97 	bl	100eed4 <d_printf.constprop.8>
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 100fc74:	e3a00000 	mov	r0, #0
 100fc78:	eb001a1a 	bl	10164e8 <XGpioPs_LookupConfig>
 100fc7c:	e1a03000 	mov	r3, r0
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 100fc80:	e59f01f4 	ldr	r0, [pc, #500]	; 100fe7c <hal_init+0x520>
 100fc84:	e5932004 	ldr	r2, [r3, #4]
 100fc88:	e1a01003 	mov	r1, r3
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 100fc8c:	e5863048 	str	r3, [r6, #72]	; 0x48
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 100fc90:	eb0016de 	bl	1015810 <XGpioPs_CfgInitialize>
	if (error != XST_SUCCESS) {
 100fc94:	e2504000 	subs	r4, r0, #0
 100fc98:	1a000048 	bne	100fdc0 <hal_init+0x464>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 0, 0x00000000);
 100fc9c:	e1a02004 	mov	r2, r4
 100fca0:	e1a01004 	mov	r1, r4
 100fca4:	e59f01d0 	ldr	r0, [pc, #464]	; 100fe7c <hal_init+0x520>
 100fca8:	eb00178e 	bl	1015ae8 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 1, 0x00000000);
 100fcac:	e1a02004 	mov	r2, r4
 100fcb0:	e3a01001 	mov	r1, #1
 100fcb4:	e59f01c0 	ldr	r0, [pc, #448]	; 100fe7c <hal_init+0x520>
 100fcb8:	eb00178a 	bl	1015ae8 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 2, 0x00000000);
 100fcbc:	e1a02004 	mov	r2, r4
 100fcc0:	e3a01002 	mov	r1, #2
 100fcc4:	e59f01b0 	ldr	r0, [pc, #432]	; 100fe7c <hal_init+0x520>
 100fcc8:	eb001786 	bl	1015ae8 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 3, 0x00000000);
 100fccc:	e1a02004 	mov	r2, r4
 100fcd0:	e3a01003 	mov	r1, #3
 100fcd4:	e59f01a0 	ldr	r0, [pc, #416]	; 100fe7c <hal_init+0x520>
 100fcd8:	e3a04a01 	mov	r4, #4096	; 0x1000
 100fcdc:	eb001781 	bl	1015ae8 <XGpioPs_SetDirection>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100fce0:	e3a02001 	mov	r2, #1
 100fce4:	e3a01009 	mov	r1, #9
 100fce8:	e59f018c 	ldr	r0, [pc, #396]	; 100fe7c <hal_init+0x520>
 100fcec:	e34e4000 	movt	r4, #57344	; 0xe000
 100fcf0:	eb0018f6 	bl	10160d0 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100fcf4:	e3a02001 	mov	r2, #1
 100fcf8:	e3a01009 	mov	r1, #9
 100fcfc:	e59f0178 	ldr	r0, [pc, #376]	; 100fe7c <hal_init+0x520>
 100fd00:	eb001975 	bl	10162dc <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100fd04:	e3a02001 	mov	r2, #1
 100fd08:	e3a01025 	mov	r1, #37	; 0x25
 100fd0c:	e59f0168 	ldr	r0, [pc, #360]	; 100fe7c <hal_init+0x520>
 100fd10:	eb0018ee 	bl	10160d0 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100fd14:	e3a02001 	mov	r2, #1
 100fd18:	e3a01025 	mov	r1, #37	; 0x25
 100fd1c:	e59f0158 	ldr	r0, [pc, #344]	; 100fe7c <hal_init+0x520>
 100fd20:	eb00196d 	bl	10162dc <XGpioPs_SetOutputEnablePin>
	*LocalAddr = Value;
 100fd24:	e3a00000 	mov	r0, #0
 100fd28:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100fd2c:	e1a02000 	mov	r2, r0
 100fd30:	e34e3000 	movt	r3, #57344	; 0xe000
 100fd34:	e34f2fdf 	movt	r2, #65503	; 0xffdf
 100fd38:	e34f0dff 	movt	r0, #65023	; 0xfdff
	d_printf(D_INFO, "XGpioPs: ready");
 100fd3c:	e30a1704 	movw	r1, #42756	; 0xa704
 100fd40:	e5830000 	str	r0, [r3]
 100fd44:	e3401106 	movt	r1, #262	; 0x106
 100fd48:	e5832008 	str	r2, [r3, #8]
 100fd4c:	e3a00002 	mov	r0, #2
 100fd50:	ebfffc5f 	bl	100eed4 <d_printf.constprop.8>
	fabcfg_init();
 100fd54:	ebfffbfb 	bl	100ed48 <fabcfg_init>
	d_printf(D_INFO, "XUartPs: resetting RX FIFO");
 100fd58:	e30a1714 	movw	r1, #42772	; 0xa714
 100fd5c:	e3a00002 	mov	r0, #2
 100fd60:	e3401106 	movt	r1, #262	; 0x106
 100fd64:	ebfffc5a 	bl	100eed4 <d_printf.constprop.8>
	return *(volatile u32 *) Addr;
 100fd68:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100fd6c:	e3130002 	tst	r3, #2
 100fd70:	1a000005 	bne	100fd8c <hal_init+0x430>
		d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", XUartPs_RecvByte(STDIN_BASEADDRESS));
 100fd74:	e3a00a01 	mov	r0, #4096	; 0x1000
 100fd78:	e34e0000 	movt	r0, #57344	; 0xe000
 100fd7c:	eb002ad4 	bl	101a8d4 <XUartPs_RecvByte>
 100fd80:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100fd84:	e3130002 	tst	r3, #2
 100fd88:	0afffff9 	beq	100fd74 <hal_init+0x418>
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 100fd8c:	ed9f0a38 	vldr	s0, [pc, #224]	; 100fe74 <hal_init+0x518>
 100fd90:	e3a01000 	mov	r1, #0
 100fd94:	e59f00e4 	ldr	r0, [pc, #228]	; 100fe80 <hal_init+0x524>
 100fd98:	ebfff56c 	bl	100d350 <clkwiz_init>
}
 100fd9c:	e28dd014 	add	sp, sp, #20
 100fda0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dma_bd_init();
 100fda4:	eafff71d 	b	100da20 <dma_bd_init>
		d_printf(D_ERROR, "XScuGic: configuration lookup returns NULL");
 100fda8:	e30a1560 	movw	r1, #42336	; 0xa560
 100fdac:	e3a00004 	mov	r0, #4
 100fdb0:	e3401106 	movt	r1, #262	; 0x106
 100fdb4:	ebfffc94 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fdb8:	e3e00000 	mvn	r0, #0
 100fdbc:	fa002f9b 	blx	101bc30 <exit>
		d_printf(D_ERROR, "XGpioPs: returned error code: %d, unable to start", error);
 100fdc0:	e30a16d0 	movw	r1, #42704	; 0xa6d0
 100fdc4:	e3a00004 	mov	r0, #4
 100fdc8:	e1a02004 	mov	r2, r4
 100fdcc:	e3401106 	movt	r1, #262	; 0x106
 100fdd0:	ebfffc8d 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fdd4:	e3e00000 	mvn	r0, #0
 100fdd8:	fa002f94 	blx	101bc30 <exit>
		d_printf(D_ERROR, "XScuTimer: unable to connect interrupt handler: error code %d", error);
 100fddc:	e30a1678 	movw	r1, #42616	; 0xa678
 100fde0:	e1a02000 	mov	r2, r0
 100fde4:	e3401106 	movt	r1, #262	; 0x106
 100fde8:	e3a00004 	mov	r0, #4
 100fdec:	ebfffc86 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fdf0:	e3e00000 	mvn	r0, #0
 100fdf4:	fa002f8d 	blx	101bc30 <exit>
		d_printf(D_ERROR, "XScuTimer: self test failed with error %d", error);
 100fdf8:	e30a1638 	movw	r1, #42552	; 0xa638
 100fdfc:	e1a02000 	mov	r2, r0
 100fe00:	e3401106 	movt	r1, #262	; 0x106
 100fe04:	e3a00004 	mov	r0, #4
 100fe08:	ebfffc7f 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fe0c:	e3e00000 	mvn	r0, #0
 100fe10:	fa002f86 	blx	101bc30 <exit>
		d_printf(D_ERROR, "XScuTimer: returned error code: %d, unable to start", error);
 100fe14:	e30a1604 	movw	r1, #42500	; 0xa604
 100fe18:	e1a02000 	mov	r2, r0
 100fe1c:	e3401106 	movt	r1, #262	; 0x106
 100fe20:	e3a00004 	mov	r0, #4
 100fe24:	ebfffc78 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fe28:	e3e00000 	mvn	r0, #0
 100fe2c:	fa002f7f 	blx	101bc30 <exit>
		d_printf(D_ERROR, "XScuGic: self test failed error %d", error);
 100fe30:	e30a15bc 	movw	r1, #42428	; 0xa5bc
 100fe34:	e3a00004 	mov	r0, #4
 100fe38:	e1a02008 	mov	r2, r8
 100fe3c:	e3401106 	movt	r1, #262	; 0x106
 100fe40:	ebfffc71 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fe44:	e3e00000 	mvn	r0, #0
 100fe48:	fa002f78 	blx	101bc30 <exit>
		d_printf(D_ERROR, "XScuGic: configuration init returned error %d", error);
 100fe4c:	e30a158c 	movw	r1, #42380	; 0xa58c
 100fe50:	e1a02000 	mov	r2, r0
 100fe54:	e3401106 	movt	r1, #262	; 0x106
 100fe58:	e3a00004 	mov	r0, #4
 100fe5c:	ebfffc6a 	bl	100f00c <d_printf.constprop.10>
		exit(-1);
 100fe60:	e3e00000 	mvn	r0, #0
 100fe64:	fa002f71 	blx	101bc30 <exit>
 100fe68:	a17f0000 	.word	0xa17f0000
 100fe6c:	3f689374 	.word	0x3f689374
 100fe70:	47c35000 	.word	0x47c35000
 100fe74:	4331c71c 	.word	0x4331c71c
 100fe78:	010763e0 	.word	0x010763e0
 100fe7c:	01075ba4 	.word	0x01075ba4
 100fe80:	01076be0 	.word	0x01076be0

0100fe84 <d_trap_handle>:
/*
 * Die/trap handler point.  Prints debug, calls exit().
 */
void d_trap_handle()
{
	d_printf(D_ERROR, "d_trap_handle() - dying...");
 100fe84:	e30a1730 	movw	r1, #42800	; 0xa730
 100fe88:	e3a00004 	mov	r0, #4
{
 100fe8c:	e92d4010 	push	{r4, lr}
	d_printf(D_ERROR, "d_trap_handle() - dying...");
 100fe90:	e3401106 	movt	r1, #262	; 0x106
 100fe94:	ebfffc5c 	bl	100f00c <d_printf.constprop.10>
	d_dump_malloc_info();
 100fe98:	ebfffe7a 	bl	100f888 <d_dump_malloc_info>
	exit(-1);
 100fe9c:	e3e00000 	mvn	r0, #0
 100fea0:	fa002f62 	blx	101bc30 <exit>

0100fea4 <mipi_csi_generate_sg_list_for_waves.constprop.3>:
 * @param	wave_start		Starting wave index
 * @param	wave_end		Ending wave index - must be more than or equal to starting index
 *
 * @param	q_item			Item in queue for additional tag information
 */
int mipi_csi_generate_sg_list_for_waves(uint32_t wave_start, uint32_t wave_end, int flags, struct acq_buffer_t *base_wave, struct mipi_csi_stream_queue_item_t *q_item)
 100fea4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int iter = 0;
	int status, n_waves, bd_entries, i;
	// XAxiDma_Bd bd_template;
	struct acq_buffer_t *wave;
	struct acq_buffer_t *next;
	struct dma_bd_ring_t *ring = g_mipi_csi_state.bd_ring;
 100fea8:	e3065c78 	movw	r5, #27768	; 0x6c78
int mipi_csi_generate_sg_list_for_waves(uint32_t wave_start, uint32_t wave_end, int flags, struct acq_buffer_t *base_wave, struct mipi_csi_stream_queue_item_t *q_item)
 100feac:	e1a04000 	mov	r4, r0
 100feb0:	e1a08001 	mov	r8, r1
 100feb4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
	struct dma_bd_ring_t *ring = g_mipi_csi_state.bd_ring;
 100feb8:	e3405107 	movt	r5, #263	; 0x107
	struct acq_dma_addr_t addr_helper;
	uint32_t total_wave_sz, total_bytes = 0, expect_total_bytes, pad;

	d_start_timing(TMR_MIPI_SG_OVERALL);
 100febc:	e3a000f1 	mov	r0, #241	; 0xf1
int mipi_csi_generate_sg_list_for_waves(uint32_t wave_start, uint32_t wave_end, int flags, struct acq_buffer_t *base_wave, struct mipi_csi_stream_queue_item_t *q_item)
 100fec0:	e1a06002 	mov	r6, r2
 100fec4:	e1a0a003 	mov	sl, r3
	struct dma_bd_ring_t *ring = g_mipi_csi_state.bd_ring;
 100fec8:	e595b758 	ldr	fp, [r5, #1880]	; 0x758
	d_start_timing(TMR_MIPI_SG_OVERALL);
 100fecc:	ebfffdb8 	bl	100f5b4 <d_start_timing>

	D_ASSERT(wave_start <= wave_end);
 100fed0:	e1540008 	cmp	r4, r8
 100fed4:	8a000067 	bhi	1010078 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x1d4>
	n_waves = (wave_end - wave_start) + 1;
	q_item->ring = NULL;
 100fed8:	e3a03000 	mov	r3, #0
	q_item->calculated_size = 0;

	// Reset the DMA peripheral, terminating any existing transactions
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100fedc:	e2850004 	add	r0, r5, #4
	q_item->ring = NULL;
 100fee0:	e58a3020 	str	r3, [sl, #32]
	n_waves = (wave_end - wave_start) + 1;
 100fee4:	e2888001 	add	r8, r8, #1
	q_item->calculated_size = 0;
 100fee8:	e58a3014 	str	r3, [sl, #20]
	n_waves = (wave_end - wave_start) + 1;
 100feec:	e0488004 	sub	r8, r8, r4
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100fef0:	eb000f79 	bl	1013cdc <XAxiDma_Reset>
	 * that is needed to compute the BD list size.
	 *
	 * Wave bounds checking is handled gracefully elsewhere, so this assert shouldn't
	 * be harmful.
	 */
	D_ASSERT(acq_get_ll_pointer_in_base(wave_start, &wave, base_wave) == ACQRES_OK);
 100fef4:	e1a02006 	mov	r2, r6
 100fef8:	e1a00004 	mov	r0, r4
 100fefc:	e28d1010 	add	r1, sp, #16
 100ff00:	ebfff2ca 	bl	100ca30 <acq_get_ll_pointer_in_base>
 100ff04:	e2506000 	subs	r6, r0, #0
 100ff08:	1a000066 	bne	10100a8 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x204>
	total_wave_sz = wave->pre_sz + wave->post_sz;
 100ff0c:	e59d3010 	ldr	r3, [sp, #16]
	 *
	 * As soon as we meet an invalid wave (non-acquired) we assume that the rest
	 * of the waveforms are duff, and so end the streamout of waveforms and pad
	 * the packet with zero bytes.
	 */
	d_start_timing(TMR_MIPI_SG_BDFILL);
 100ff10:	e3a000f2 	mov	r0, #242	; 0xf2
	total_wave_sz = wave->pre_sz + wave->post_sz;
 100ff14:	e5939014 	ldr	r9, [r3, #20]
 100ff18:	e5933018 	ldr	r3, [r3, #24]
 100ff1c:	e0899003 	add	r9, r9, r3
	d_start_timing(TMR_MIPI_SG_BDFILL);
 100ff20:	ebfffda3 	bl	100f5b4 <d_start_timing>
	expect_total_bytes = n_waves * total_wave_sz;
 100ff24:	e0030899 	mul	r3, r9, r8

	// Rewind the ring to the beginning
	dma_bd_rewind(ring);
 100ff28:	e1a0000b 	mov	r0, fp
	expect_total_bytes = n_waves * total_wave_sz;
 100ff2c:	e58d300c 	str	r3, [sp, #12]
	dma_bd_rewind(ring);
 100ff30:	ebfff846 	bl	100e050 <dma_bd_rewind>

	for(i = 0; i < n_waves; i++) {
 100ff34:	e3580000 	cmp	r8, #0
 100ff38:	da00006a 	ble	10100e8 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x244>
 100ff3c:	e59d0010 	ldr	r0, [sp, #16]
	uint32_t total_wave_sz, total_bytes = 0, expect_total_bytes, pad;
 100ff40:	e1a07006 	mov	r7, r6
 100ff44:	ea000022 	b	100ffd4 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x130>
			break;
		}

		// acq_dma_address_helper_debug(wave, addr_helper);

		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_upper_start, addr_helper.pre_upper_end - addr_helper.pre_upper_start, 0, NULL);
 100ff48:	e59d2020 	ldr	r2, [sp, #32]
 100ff4c:	e1a03004 	mov	r3, r4
 100ff50:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_lower_start, addr_helper.pre_lower_end - addr_helper.pre_lower_start, 0, NULL);
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.post_start, addr_helper.post_end - addr_helper.post_start, 0, NULL);

		total_bytes += total_wave_sz;
 100ff54:	e0877009 	add	r7, r7, r9
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_upper_start, addr_helper.pre_upper_end - addr_helper.pre_upper_start, 0, NULL);
 100ff58:	e58d4000 	str	r4, [sp]
 100ff5c:	e1a01002 	mov	r1, r2
 100ff60:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 100ff64:	e04c2002 	sub	r2, ip, r2
 100ff68:	ebfff8a1 	bl	100e1f4 <dma_bd_add_large_sg_entry>
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_lower_start, addr_helper.pre_lower_end - addr_helper.pre_lower_start, 0, NULL);
 100ff6c:	e59d2018 	ldr	r2, [sp, #24]
 100ff70:	e1a03004 	mov	r3, r4
 100ff74:	e59dc01c 	ldr	ip, [sp, #28]
 100ff78:	e58d4000 	str	r4, [sp]
 100ff7c:	e1a01002 	mov	r1, r2
 100ff80:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 100ff84:	e04c2002 	sub	r2, ip, r2
 100ff88:	ebfff899 	bl	100e1f4 <dma_bd_add_large_sg_entry>
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.post_start, addr_helper.post_end - addr_helper.post_start, 0, NULL);
 100ff8c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
 100ff90:	e1a03004 	mov	r3, r4
 100ff94:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
 100ff98:	e58d4000 	str	r4, [sp]
 100ff9c:	e1a01002 	mov	r1, r2
 100ffa0:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 100ffa4:	e04c2002 	sub	r2, ip, r2
 100ffa8:	ebfff891 	bl	100e1f4 <dma_bd_add_large_sg_entry>

		// End of list?
		if(acq_next_ll_pointer(wave, &next) != ACQRES_OK) {
 100ffac:	e28d1014 	add	r1, sp, #20
 100ffb0:	e59d0010 	ldr	r0, [sp, #16]
 100ffb4:	ebfff2b6 	bl	100ca94 <acq_next_ll_pointer>
 100ffb8:	e3500000 	cmp	r0, #0
 100ffbc:	1a000008 	bne	100ffe4 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x140>
	for(i = 0; i < n_waves; i++) {
 100ffc0:	e2866001 	add	r6, r6, #1
			break;
		}

		wave = next;
 100ffc4:	e59d0014 	ldr	r0, [sp, #20]
	for(i = 0; i < n_waves; i++) {
 100ffc8:	e1580006 	cmp	r8, r6
		wave = next;
 100ffcc:	e58d0010 	str	r0, [sp, #16]
	for(i = 0; i < n_waves; i++) {
 100ffd0:	0a000003 	beq	100ffe4 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x140>
		if(acq_dma_address_helper(wave, &addr_helper) != ACQRES_OK) {
 100ffd4:	e28d1018 	add	r1, sp, #24
 100ffd8:	ebfff3f6 	bl	100cfb8 <acq_dma_address_helper>
 100ffdc:	e2504000 	subs	r4, r0, #0
 100ffe0:	0affffd8 	beq	100ff48 <mipi_csi_generate_sg_list_for_waves.constprop.3+0xa4>

	/*
	 * Pad data to meet the minimum buffer size and ensure it is a multiple of the
	 * CSI line length.
	 */
	D_ASSERT(expect_total_bytes >= total_bytes);
 100ffe4:	e59d300c 	ldr	r3, [sp, #12]
 100ffe8:	e1530007 	cmp	r3, r7
 100ffec:	3a000035 	bcc	10100c8 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x224>
 100fff0:	e7ea6057 	ubfx	r6, r7, #0, #11
	pad = (expect_total_bytes - total_bytes) + (MCSI_DEFAULT_LINE_WIDTH - (total_bytes % MCSI_DEFAULT_LINE_WIDTH));
 100fff4:	e2833b02 	add	r3, r3, #2048	; 0x800
 100fff8:	e0433007 	sub	r3, r3, r7

	//d_printf(D_INFO, "tb:%d eb:%d pad:%d", total_bytes, expect_total_bytes, pad);

	if(pad > 0) {
 100fffc:	e0536006 	subs	r6, r3, r6
 1010000:	1a000016 	bne	1010060 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x1bc>
		dma_bd_add_zero_sg_entry(g_mipi_csi_state.bd_ring, pad, 0, NULL);
	}

	d_stop_timing(TMR_MIPI_SG_BDFILL);
 1010004:	e3a000f2 	mov	r0, #242	; 0xf2
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 1010008:	e59f4100 	ldr	r4, [pc, #256]	; 1010110 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x26c>
	d_stop_timing(TMR_MIPI_SG_BDFILL);
 101000c:	ebfffd84 	bl	100f624 <d_stop_timing>
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 1010010:	e3a000f2 	mov	r0, #242	; 0xf2
 1010014:	ebfffdbd 	bl	100f710 <d_read_timing_us>

	// Pass the BD to hardware for transmission.
	status = dma_bd_start(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.bd_ring, BD_STFLAGS_TRANSMIT /* | BD_STFLAGS_DUMP_DEBUG*/);
 1010018:	e5951758 	ldr	r1, [r5, #1880]	; 0x758
 101001c:	e3a02001 	mov	r2, #1
 1010020:	e59f00ec 	ldr	r0, [pc, #236]	; 1010114 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x270>
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 1010024:	ed840a00 	vstr	s0, [r4]
	status = dma_bd_start(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.bd_ring, BD_STFLAGS_TRANSMIT /* | BD_STFLAGS_DUMP_DEBUG*/);
 1010028:	ebfff9cb 	bl	100e75c <dma_bd_start>
	} else {
		status = dma_bd_start(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.bd_ring, BD_STFLAGS_TRANSMIT);
	}
	*/

	if (status != BD_RES_OK) {
 101002c:	e2505000 	subs	r5, r0, #0
 1010030:	1a00002f 	bne	10100f4 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x250>
		exit(-1);
	}

	//d_printf(D_INFO, "mipi_csi: list sent to DMA...");

	q_item->calculated_size = total_bytes + pad;
 1010034:	e0877006 	add	r7, r7, r6
	q_item->ring = ring;
 1010038:	e58ab020 	str	fp, [sl, #32]
	q_item->calculated_size = total_bytes + pad;
 101003c:	e58a7014 	str	r7, [sl, #20]

	d_stop_timing(TMR_MIPI_SG_OVERALL);
 1010040:	e3a000f1 	mov	r0, #241	; 0xf1
 1010044:	ebfffd76 	bl	100f624 <d_stop_timing>
	g_mipi_csi_state.stats.last_sg_total_time_us = d_read_timing_us(TMR_MIPI_SG_OVERALL);
 1010048:	e3a000f1 	mov	r0, #241	; 0xf1
 101004c:	ebfffdaf 	bl	100f710 <d_read_timing_us>

	//d_dump_malloc_info();

	return CSIRES_OK;
}
 1010050:	e1a00005 	mov	r0, r5
	g_mipi_csi_state.stats.last_sg_total_time_us = d_read_timing_us(TMR_MIPI_SG_OVERALL);
 1010054:	ed040a01 	vstr	s0, [r4, #-4]
}
 1010058:	e28dd03c 	add	sp, sp, #60	; 0x3c
 101005c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dma_bd_add_zero_sg_entry(g_mipi_csi_state.bd_ring, pad, 0, NULL);
 1010060:	e3a03000 	mov	r3, #0
 1010064:	e1a01006 	mov	r1, r6
 1010068:	e1a02003 	mov	r2, r3
 101006c:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 1010070:	ebfff8cc 	bl	100e3a8 <dma_bd_add_zero_sg_entry>
 1010074:	eaffffe2 	b	1010004 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x160>
	D_ASSERT(wave_start <= wave_end);
 1010078:	e30a374c 	movw	r3, #42828	; 0xa74c
 101007c:	e30a2760 	movw	r2, #42848	; 0xa760
 1010080:	e308149c 	movw	r1, #33948	; 0x849c
 1010084:	e3403106 	movt	r3, #262	; 0x106
 1010088:	e3402106 	movt	r2, #262	; 0x106
 101008c:	e30001a1 	movw	r0, #417	; 0x1a1
 1010090:	e58d0000 	str	r0, [sp]
	D_ASSERT(acq_get_ll_pointer_in_base(wave_start, &wave, base_wave) == ACQRES_OK);
 1010094:	e3a00004 	mov	r0, #4
 1010098:	e3401106 	movt	r1, #262	; 0x106
 101009c:	ebfffcb1 	bl	100f368 <d_printf>
 10100a0:	e3e00062 	mvn	r0, #98	; 0x62
 10100a4:	fa002ee1 	blx	101bc30 <exit>
 10100a8:	e3a00e1b 	mov	r0, #432	; 0x1b0
 10100ac:	e30a374c 	movw	r3, #42828	; 0xa74c
 10100b0:	e30a2778 	movw	r2, #42872	; 0xa778
 10100b4:	e308149c 	movw	r1, #33948	; 0x849c
 10100b8:	e58d0000 	str	r0, [sp]
 10100bc:	e3403106 	movt	r3, #262	; 0x106
 10100c0:	e3402106 	movt	r2, #262	; 0x106
 10100c4:	eafffff2 	b	1010094 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x1f0>
	D_ASSERT(expect_total_bytes >= total_bytes);
 10100c8:	e30001db 	movw	r0, #475	; 0x1db
 10100cc:	e30a374c 	movw	r3, #42828	; 0xa74c
 10100d0:	e30a27c0 	movw	r2, #42944	; 0xa7c0
 10100d4:	e308149c 	movw	r1, #33948	; 0x849c
 10100d8:	e58d0000 	str	r0, [sp]
 10100dc:	e3403106 	movt	r3, #262	; 0x106
 10100e0:	e3402106 	movt	r2, #262	; 0x106
 10100e4:	eaffffea 	b	1010094 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x1f0>
	uint32_t total_wave_sz, total_bytes = 0, expect_total_bytes, pad;
 10100e8:	e1a07006 	mov	r7, r6
 10100ec:	e59d300c 	ldr	r3, [sp, #12]
 10100f0:	eaffffbf 	b	100fff4 <mipi_csi_generate_sg_list_for_waves.constprop.3+0x150>
		d_printf(D_ERROR, "mipi_csi: fatal error passing BD ring to hardware: %d", status);
 10100f4:	e30a17e4 	movw	r1, #42980	; 0xa7e4
 10100f8:	e3a00004 	mov	r0, #4
 10100fc:	e1a02005 	mov	r2, r5
 1010100:	e3401106 	movt	r1, #262	; 0x106
 1010104:	ebfffc97 	bl	100f368 <d_printf>
		exit(-1);
 1010108:	e3e00000 	mvn	r0, #0
 101010c:	fa002ec7 	blx	101bc30 <exit>
 1010110:	01077424 	.word	0x01077424
 1010114:	01076c7c 	.word	0x01076c7c

01010118 <mipi_csi_init>:
	d_printf(D_INFO, "mipi_csi: initialising...");
 1010118:	e30a181c 	movw	r1, #43036	; 0xa81c
{
 101011c:	e92d4030 	push	{r4, r5, lr}
	d_printf(D_INFO, "mipi_csi: initialising...");
 1010120:	e3401106 	movt	r1, #262	; 0x106
{
 1010124:	e24dd01c 	sub	sp, sp, #28
	d_printf(D_INFO, "mipi_csi: initialising...");
 1010128:	e3a00002 	mov	r0, #2
	status = queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) ;
 101012c:	e3064c78 	movw	r4, #27768	; 0x6c78
	d_printf(D_INFO, "mipi_csi: initialising...");
 1010130:	ebfffc8c 	bl	100f368 <d_printf>
	status = queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) ;
 1010134:	e3404107 	movt	r4, #263	; 0x107
	queue_conf_init(&q_conf);
 1010138:	e28d0008 	add	r0, sp, #8
 101013c:	ebffd9f2 	bl	100690c <queue_conf_init>
	q_conf.capacity = CSISTRM_QUEUE_SIZE;
 1010140:	e3a03040 	mov	r3, #64	; 0x40
	status = queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) ;
 1010144:	e28d0008 	add	r0, sp, #8
 1010148:	e1a01004 	mov	r1, r4
	q_conf.capacity = CSISTRM_QUEUE_SIZE;
 101014c:	e58d3008 	str	r3, [sp, #8]
	status = queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) ;
 1010150:	ebffda0e 	bl	1006990 <queue_new_conf>
	if(status != CC_OK) {
 1010154:	e2502000 	subs	r2, r0, #0
 1010158:	1a000047 	bne	101027c <mipi_csi_init+0x164>
	d_printf(D_INFO, "mipi_csi: queue initialised");
 101015c:	e30a1860 	movw	r1, #43104	; 0xa860
 1010160:	e3a00002 	mov	r0, #2
 1010164:	e3401106 	movt	r1, #262	; 0x106
 1010168:	ebfffc7e 	bl	100f368 <d_printf>
	g_mipi_csi_state.mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 101016c:	e3a00001 	mov	r0, #1
 1010170:	eb001120 	bl	10145f8 <XAxiDma_LookupConfig>
 1010174:	e1a03000 	mov	r3, r0
	status = XAxiDma_CfgInitialize(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.mipi_dma_config);
 1010178:	e2840004 	add	r0, r4, #4
 101017c:	e1a01003 	mov	r1, r3
	g_mipi_csi_state.mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 1010180:	e5843754 	str	r3, [r4, #1876]	; 0x754
	status = XAxiDma_CfgInitialize(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.mipi_dma_config);
 1010184:	eb000f2c 	bl	1013e3c <XAxiDma_CfgInitialize>
	if(status != XST_SUCCESS) {
 1010188:	e2502000 	subs	r2, r0, #0
 101018c:	1a000034 	bne	1010264 <mipi_csi_init+0x14c>
	status = XAxiDma_Selftest(&g_mipi_csi_state.mipi_dma);
 1010190:	e2840004 	add	r0, r4, #4
 1010194:	eb00112f 	bl	1014658 <XAxiDma_Selftest>
	if(status != XST_SUCCESS) {
 1010198:	e2505000 	subs	r5, r0, #0
 101019c:	1a00003c 	bne	1010294 <mipi_csi_init+0x17c>
	D_ASSERT(XAxiDma_HasSg(&g_mipi_csi_state.mipi_dma));
 10101a0:	e5943014 	ldr	r3, [r4, #20]
 10101a4:	e3530000 	cmp	r3, #0
 10101a8:	0a00003f 	beq	10102ac <mipi_csi_init+0x194>
	d_printf(D_INFO, "mipi_csi: DMA config: has_mm2s=%d, has_s2mm=%d", g_mipi_csi_state.mipi_dma.HasMm2S, g_mipi_csi_state.mipi_dma.HasS2Mm);
 10101ac:	e30a1900 	movw	r1, #43264	; 0xa900
 10101b0:	e594300c 	ldr	r3, [r4, #12]
 10101b4:	e5942008 	ldr	r2, [r4, #8]
 10101b8:	e3401106 	movt	r1, #262	; 0x106
 10101bc:	e3a00002 	mov	r0, #2
 10101c0:	ebfffc68 	bl	100f368 <d_printf>
	d_printf(D_INFO, "mipi_csi: DMA initialisation done");
 10101c4:	e30a1930 	movw	r1, #43312	; 0xa930
 10101c8:	e3a00002 	mov	r0, #2
 10101cc:	e3401106 	movt	r1, #262	; 0x106
 10101d0:	ebfffc64 	bl	100f368 <d_printf>
	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DMA_TO_DEVICE);
 10101d4:	e5943004 	ldr	r3, [r4, #4]
	g_mipi_csi_state.csi_bitclock = CSI_DEFAULT_BIT_CLOCK;
 10101d8:	e2841e7b 	add	r1, r4, #1968	; 0x7b0
 10101dc:	eddf7a3e 	vldr	s15, [pc, #248]	; 10102dc <mipi_csi_init+0x1c4>
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, g_mipi_csi_state.csi_bitclock);
 10101e0:	e59f00f8 	ldr	r0, [pc, #248]	; 10102e0 <mipi_csi_init+0x1c8>
 10101e4:	e5932000 	ldr	r2, [r3]
 10101e8:	eeb00a67 	vmov.f32	s0, s15
	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DMA_TO_DEVICE);
 10101ec:	e3c22a05 	bic	r2, r2, #20480	; 0x5000
	*LocalAddr = Value;
 10101f0:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 10101f4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DEVICE_TO_DMA);
 10101f8:	e3c22a05 	bic	r2, r2, #20480	; 0x5000
	*LocalAddr = Value;
 10101fc:	e5832030 	str	r2, [r3, #48]	; 0x30
	g_mipi_csi_state.csi_bitclock = CSI_DEFAULT_BIT_CLOCK;
 1010200:	edc17a00 	vstr	s15, [r1]
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, g_mipi_csi_state.csi_bitclock);
 1010204:	ebfff486 	bl	100d424 <clkwiz_change_mipi_freq>
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 1010208:	e3002762 	movw	r2, #1890	; 0x762
	g_mipi_csi_state.csi_data_type = data_type;
 101020c:	e3a0002a 	mov	r0, #42	; 0x2a
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 1010210:	e19430b2 	ldrh	r3, [r4, r2]
	g_mipi_csi_state.csi_line_size = MCSI_DEFAULT_LINE_WIDTH;
 1010214:	e3a0cb02 	mov	ip, #2048	; 0x800
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 1010218:	e30a1954 	movw	r1, #43348	; 0xa954
	g_mipi_csi_state.csi_line_size = MCSI_DEFAULT_LINE_WIDTH;
 101021c:	e340c800 	movt	ip, #2048	; 0x800
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 1010220:	e300e774 	movw	lr, #1908	; 0x774
	g_mipi_csi_state.csi_data_type = data_type;
 1010224:	e5c40776 	strb	r0, [r4, #1910]	; 0x776
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 1010228:	e3833901 	orr	r3, r3, #16384	; 0x4000
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 101022c:	e3401106 	movt	r1, #262	; 0x106
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 1010230:	e18430b2 	strh	r3, [r4, r2]
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 1010234:	e1a02000 	mov	r2, r0
 1010238:	e1a03005 	mov	r3, r5
 101023c:	e3a00002 	mov	r0, #2
	g_mipi_csi_state.state = MCSI_ST_IDLE;
 1010240:	e584575c 	str	r5, [r4, #1884]	; 0x75c
	g_mipi_csi_state.working = NULL;
 1010244:	e5845764 	str	r5, [r4, #1892]	; 0x764
	g_mipi_csi_state.csi_line_size = MCSI_DEFAULT_LINE_WIDTH;
 1010248:	e584c770 	str	ip, [r4, #1904]	; 0x770
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 101024c:	e18450be 	strh	r5, [r4, lr]
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 1010250:	ebfffc44 	bl	100f368 <d_printf>
	dma_bd_create_ring(&g_mipi_csi_state.bd_ring);
 1010254:	e59f0088 	ldr	r0, [pc, #136]	; 10102e4 <mipi_csi_init+0x1cc>
 1010258:	ebfff60d 	bl	100da94 <dma_bd_create_ring>
}
 101025c:	e28dd01c 	add	sp, sp, #28
 1010260:	e8bd8030 	pop	{r4, r5, pc}
		d_printf(D_ERROR, "mipi_csi: error initialising AXIDMA: %d", status);
 1010264:	e30a187c 	movw	r1, #43132	; 0xa87c
 1010268:	e3a00004 	mov	r0, #4
 101026c:	e3401106 	movt	r1, #262	; 0x106
 1010270:	ebfffc3c 	bl	100f368 <d_printf>
}
 1010274:	e28dd01c 	add	sp, sp, #28
 1010278:	e8bd8030 	pop	{r4, r5, pc}
		d_printf(D_ERROR, "mipi_csi: error initialising queue: %d", status);
 101027c:	e30a1838 	movw	r1, #43064	; 0xa838
 1010280:	e3a00004 	mov	r0, #4
 1010284:	e3401106 	movt	r1, #262	; 0x106
 1010288:	ebfffc36 	bl	100f368 <d_printf>
}
 101028c:	e28dd01c 	add	sp, sp, #28
 1010290:	e8bd8030 	pop	{r4, r5, pc}
		d_printf(D_ERROR, "mipi_csi: error during self test for AXIDMA: %d", status);
 1010294:	e30a18a4 	movw	r1, #43172	; 0xa8a4
 1010298:	e1a02005 	mov	r2, r5
 101029c:	e3401106 	movt	r1, #262	; 0x106
 10102a0:	e3a00004 	mov	r0, #4
 10102a4:	ebfffc2f 	bl	100f368 <d_printf>
		return;
 10102a8:	eaffffeb 	b	101025c <mipi_csi_init+0x144>
	D_ASSERT(XAxiDma_HasSg(&g_mipi_csi_state.mipi_dma));
 10102ac:	e3a00064 	mov	r0, #100	; 0x64
 10102b0:	e30a374c 	movw	r3, #42828	; 0xa74c
 10102b4:	e30a28d4 	movw	r2, #43220	; 0xa8d4
 10102b8:	e308149c 	movw	r1, #33948	; 0x849c
 10102bc:	e58d0000 	str	r0, [sp]
 10102c0:	e3403106 	movt	r3, #262	; 0x106
 10102c4:	e3a00004 	mov	r0, #4
 10102c8:	e3402106 	movt	r2, #262	; 0x106
 10102cc:	e3401106 	movt	r1, #262	; 0x106
 10102d0:	ebfffc24 	bl	100f368 <d_printf>
 10102d4:	e3e00062 	mvn	r0, #98	; 0x62
 10102d8:	fa002e54 	blx	101bc30 <exit>
 10102dc:	43960000 	.word	0x43960000
 10102e0:	01076be0 	.word	0x01076be0
 10102e4:	010773d0 	.word	0x010773d0

010102e8 <mipi_csi_alloc_item>:
{
 10102e8:	e92d4010 	push	{r4, lr}
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 10102ec:	e3a01001 	mov	r1, #1
 10102f0:	e3a00024 	mov	r0, #36	; 0x24
 10102f4:	fa002e2f 	blx	101bbb8 <calloc>
	if(item == NULL) {
 10102f8:	e2504000 	subs	r4, r0, #0
 10102fc:	0a000008 	beq	1010324 <mipi_csi_alloc_item+0x3c>
	g_mipi_csi_state.stats.items_alloc++;
 1010300:	e3063c78 	movw	r3, #27768	; 0x6c78
	item->item_type = CSISTRM_TYPE_ALLOC_UNDEF;
 1010304:	e3a02001 	mov	r2, #1
	g_mipi_csi_state.stats.items_alloc++;
 1010308:	e3403107 	movt	r3, #263	; 0x107
	item->item_type = CSISTRM_TYPE_ALLOC_UNDEF;
 101030c:	e5842000 	str	r2, [r4]
	g_mipi_csi_state.stats.items_alloc++;
 1010310:	e593277c 	ldr	r2, [r3, #1916]	; 0x77c
 1010314:	e2822001 	add	r2, r2, #1
 1010318:	e583277c 	str	r2, [r3, #1916]	; 0x77c
}
 101031c:	e1a00004 	mov	r0, r4
 1010320:	e8bd8010 	pop	{r4, pc}
		d_printf(D_ERROR, "mipi_csi: Unable to calloc %d bytes for queued item", sizeof(struct mipi_csi_stream_queue_item_t));
 1010324:	e30a197c 	movw	r1, #43388	; 0xa97c
 1010328:	e3a02024 	mov	r2, #36	; 0x24
 101032c:	e3401106 	movt	r1, #262	; 0x106
 1010330:	e3a00004 	mov	r0, #4
 1010334:	ebfffc0b 	bl	100f368 <d_printf>
		d_dump_malloc_info();
 1010338:	ebfffd52 	bl	100f888 <d_dump_malloc_info>
		return NULL;
 101033c:	eafffff6 	b	101031c <mipi_csi_alloc_item+0x34>

01010340 <mipi_csi_queue_buffer>:
	if(start_addr > end_addr) {
 1010340:	e1500001 	cmp	r0, r1
{
 1010344:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1010348:	e1a08002 	mov	r8, r2
	if(start_addr > end_addr) {
 101034c:	8a000030 	bhi	1010414 <mipi_csi_queue_buffer+0xd4>
	if((start_addr % 32) != 0 || (end_addr % 32) != 0) {
 1010350:	e1803001 	orr	r3, r0, r1
 1010354:	e1a05000 	mov	r5, r0
 1010358:	e313001f 	tst	r3, #31
 101035c:	e1a04001 	mov	r4, r1
 1010360:	0a00000e 	beq	10103a0 <mipi_csi_queue_buffer+0x60>
		d_printf(D_ERROR, "mipi_csi: buffer range misaligned (0x%08x 0x%08x, align 32), not queueing request", \
 1010364:	e30a19e8 	movw	r1, #43496	; 0xa9e8
 1010368:	e1a03004 	mov	r3, r4
 101036c:	e1a02000 	mov	r2, r0
 1010370:	e3401106 	movt	r1, #262	; 0x106
 1010374:	e3a00004 	mov	r0, #4
 1010378:	ebfffbfa 	bl	100f368 <d_printf>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 101037c:	e3063c78 	movw	r3, #27768	; 0x6c78
 1010380:	e3001762 	movw	r1, #1890	; 0x762
 1010384:	e3403107 	movt	r3, #263	; 0x107
		free(free_done);
 1010388:	e1a00008 	mov	r0, r8
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 101038c:	e19320b1 	ldrh	r2, [r3, r1]
}
 1010390:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 1010394:	e3822004 	orr	r2, r2, #4
 1010398:	e18320b1 	strh	r2, [r3, r1]
		free(free_done);
 101039c:	ea005d23 	b	1027830 <__free_from_arm>
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 10103a0:	e3a01001 	mov	r1, #1
 10103a4:	e3a00024 	mov	r0, #36	; 0x24
 10103a8:	fa002e02 	blx	101bbb8 <calloc>
	if(item == NULL) {
 10103ac:	e2507000 	subs	r7, r0, #0
 10103b0:	0a000030 	beq	1010478 <mipi_csi_queue_buffer+0x138>
	g_mipi_csi_state.stats.items_alloc++;
 10103b4:	e3066c78 	movw	r6, #27768	; 0x6c78
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 10103b8:	e3003774 	movw	r3, #1908	; 0x774
	g_mipi_csi_state.stats.items_alloc++;
 10103bc:	e3406107 	movt	r6, #263	; 0x107
	item->item_type = CSISTRM_TYPE_RAW_MEMORY;
 10103c0:	e3a02002 	mov	r2, #2
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 10103c4:	e19610b3 	ldrh	r1, [r6, r3]
	item->data_type = g_mipi_csi_state.csi_data_type;
 10103c8:	e5d60776 	ldrb	r0, [r6, #1910]	; 0x776
	g_mipi_csi_state.stats.items_alloc++;
 10103cc:	e596377c 	ldr	r3, [r6, #1916]	; 0x77c
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 10103d0:	e1c710b6 	strh	r1, [r7, #6]
	if(queue_enqueue(g_mipi_csi_state.item_queue, item) != CC_OK) {
 10103d4:	e1a01007 	mov	r1, r7
	item->data_type = g_mipi_csi_state.csi_data_type;
 10103d8:	e5c70004 	strb	r0, [r7, #4]
	g_mipi_csi_state.stats.items_alloc++;
 10103dc:	e2833001 	add	r3, r3, #1
	item->start_addr = start_addr;
 10103e0:	e587500c 	str	r5, [r7, #12]
	item->end_addr = end_addr;
 10103e4:	e5874010 	str	r4, [r7, #16]
	item->free_done = free_done;
 10103e8:	e5878018 	str	r8, [r7, #24]
	item->item_type = CSISTRM_TYPE_RAW_MEMORY;
 10103ec:	e5872000 	str	r2, [r7]
	if(queue_enqueue(g_mipi_csi_state.item_queue, item) != CC_OK) {
 10103f0:	e5960000 	ldr	r0, [r6]
	g_mipi_csi_state.stats.items_alloc++;
 10103f4:	e586377c 	str	r3, [r6, #1916]	; 0x77c
	if(queue_enqueue(g_mipi_csi_state.item_queue, item) != CC_OK) {
 10103f8:	ebffd995 	bl	1006a54 <queue_enqueue>
 10103fc:	e3500000 	cmp	r0, #0
 1010400:	1a000010 	bne	1010448 <mipi_csi_queue_buffer+0x108>
		g_mipi_csi_state.stats.items_queued++;
 1010404:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
 1010408:	e2833001 	add	r3, r3, #1
 101040c:	e5863778 	str	r3, [r6, #1912]	; 0x778
}
 1010410:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "mipi_csi: buffer range invalid, not queueing request");
 1010414:	e30a19b0 	movw	r1, #43440	; 0xa9b0
 1010418:	e3a00004 	mov	r0, #4
 101041c:	e3401106 	movt	r1, #262	; 0x106
 1010420:	ebfffbd0 	bl	100f368 <d_printf>
		free(free_done);
 1010424:	e1a00008 	mov	r0, r8
 1010428:	fa0030e6 	blx	101c7c8 <free>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 101042c:	e3063c78 	movw	r3, #27768	; 0x6c78
 1010430:	e3001762 	movw	r1, #1890	; 0x762
 1010434:	e3403107 	movt	r3, #263	; 0x107
 1010438:	e19320b1 	ldrh	r2, [r3, r1]
 101043c:	e3822004 	orr	r2, r2, #4
 1010440:	e18320b1 	strh	r2, [r3, r1]
		return;
 1010444:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "mipi_csi: failed to enqueue item into task queue: no space?");
 1010448:	e30a1a68 	movw	r1, #43624	; 0xaa68
 101044c:	e3a00004 	mov	r0, #4
 1010450:	e3401106 	movt	r1, #262	; 0x106
 1010454:	ebfffbc3 	bl	100f368 <d_printf>
	free(item->free_done);
 1010458:	e5970018 	ldr	r0, [r7, #24]
 101045c:	fa0030d9 	blx	101c7c8 <free>
	free(item);
 1010460:	e1a00007 	mov	r0, r7
 1010464:	fa0030d7 	blx	101c7c8 <free>
	g_mipi_csi_state.stats.items_freed++;
 1010468:	e5963780 	ldr	r3, [r6, #1920]	; 0x780
 101046c:	e2833001 	add	r3, r3, #1
 1010470:	e5863780 	str	r3, [r6, #1920]	; 0x780
 1010474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "mipi_csi: Unable to calloc %d bytes for queued item", sizeof(struct mipi_csi_stream_queue_item_t));
 1010478:	e30a197c 	movw	r1, #43388	; 0xa97c
 101047c:	e3a02024 	mov	r2, #36	; 0x24
 1010480:	e3401106 	movt	r1, #262	; 0x106
 1010484:	e3a00004 	mov	r0, #4
 1010488:	ebfffbb6 	bl	100f368 <d_printf>
		d_dump_malloc_info();
 101048c:	ebfffcfd 	bl	100f888 <d_dump_malloc_info>
		d_printf(D_ERROR, "mipi_csi: failed in mipi_csi_alloc_item()");
 1010490:	e30a1a3c 	movw	r1, #43580	; 0xaa3c
 1010494:	e3a00004 	mov	r0, #4
 1010498:	e3401106 	movt	r1, #262	; 0x106
 101049c:	ebfffbb1 	bl	100f368 <d_printf>
		free(free_done);
 10104a0:	e1a00008 	mov	r0, r8
}
 10104a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
		free(free_done);
 10104a8:	ea005ce0 	b	1027830 <__free_from_arm>

010104ac <mipi_csi_queue_waverange>:
{
 10104ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
/*
 * Return the number of waves configured for the currently active acquisition.
 */
inline int acq_get_nwaves_request()
{
	return g_acq_state.num_acq_request;
 10104b0:	e30572d8 	movw	r7, #21208	; 0x52d8
 10104b4:	e3407107 	movt	r7, #263	; 0x107
	if(start == CSISTRM_WAVE_ALL && end == CSISTRM_WAVE_ALL) {
 10104b8:	e0003001 	and	r3, r0, r1
 10104bc:	e3730001 	cmn	r3, #1
{
 10104c0:	e24dd008 	sub	sp, sp, #8
	uint32_t nmax = acq_get_nwaves_request() - 1;
 10104c4:	e5976774 	ldr	r6, [r7, #1908]	; 0x774
 10104c8:	e2466001 	sub	r6, r6, #1
	if(start == CSISTRM_WAVE_ALL && end == CSISTRM_WAVE_ALL) {
 10104cc:	0a000031 	beq	1010598 <mipi_csi_queue_waverange+0xec>
	if(start > nmax || end > nmax) {
 10104d0:	e1560001 	cmp	r6, r1
 10104d4:	21560000 	cmpcs	r6, r0
 10104d8:	e1a08000 	mov	r8, r0
 10104dc:	2a00000b 	bcs	1010510 <mipi_csi_queue_waverange+0x64>
		d_printf(D_ERROR, "mipi_csi: wave range OoB; not queueing request");
 10104e0:	e30a1aa4 	movw	r1, #43684	; 0xaaa4
 10104e4:	e3a00004 	mov	r0, #4
 10104e8:	e3401106 	movt	r1, #262	; 0x106
 10104ec:	ebfffb9d 	bl	100f368 <d_printf>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 10104f0:	e3063c78 	movw	r3, #27768	; 0x6c78
 10104f4:	e3001762 	movw	r1, #1890	; 0x762
 10104f8:	e3403107 	movt	r3, #263	; 0x107
 10104fc:	e19320b1 	ldrh	r2, [r3, r1]
 1010500:	e3822004 	orr	r2, r2, #4
 1010504:	e18320b1 	strh	r2, [r3, r1]
}
 1010508:	e28dd008 	add	sp, sp, #8
 101050c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1010510:	e1a06001 	mov	r6, r1
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 1010514:	e3a01001 	mov	r1, #1
 1010518:	e3a00024 	mov	r0, #36	; 0x24
 101051c:	fa002da5 	blx	101bbb8 <calloc>
	if(item == NULL) {
 1010520:	e2505000 	subs	r5, r0, #0
 1010524:	0a000029 	beq	10105d0 <mipi_csi_queue_waverange+0x124>
	item->wave_buffer_first = g_acq_state.acq_current;
 1010528:	e5973884 	ldr	r3, [r7, #2180]	; 0x884
	g_mipi_csi_state.stats.items_alloc++;
 101052c:	e3064c78 	movw	r4, #27768	; 0x6c78
 1010530:	e3404107 	movt	r4, #263	; 0x107
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 1010534:	e3002774 	movw	r2, #1908	; 0x774
 1010538:	e194c0b2 	ldrh	ip, [r4, r2]
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 101053c:	e3a01003 	mov	r1, #3
	item->data_type = g_mipi_csi_state.csi_data_type;
 1010540:	e5d40776 	ldrb	r0, [r4, #1910]	; 0x776
	item->free_done = NULL;
 1010544:	e3a02000 	mov	r2, #0
	item->wave_buffer_first = g_acq_state.acq_current;
 1010548:	e585301c 	str	r3, [r5, #28]
	g_mipi_csi_state.stats.items_alloc++;
 101054c:	e594377c 	ldr	r3, [r4, #1916]	; 0x77c
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 1010550:	e5851000 	str	r1, [r5]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 1010554:	e1a01005 	mov	r1, r5
	item->data_type = g_mipi_csi_state.csi_data_type;
 1010558:	e5c50004 	strb	r0, [r5, #4]
	g_mipi_csi_state.stats.items_alloc++;
 101055c:	e2833001 	add	r3, r3, #1
	item->start_addr = start;
 1010560:	e585800c 	str	r8, [r5, #12]
	item->end_addr = end;
 1010564:	e5856010 	str	r6, [r5, #16]
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 1010568:	e1c5c0b6 	strh	ip, [r5, #6]
	item->free_done = NULL;
 101056c:	e5852018 	str	r2, [r5, #24]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 1010570:	e5940000 	ldr	r0, [r4]
	g_mipi_csi_state.stats.items_alloc++;
 1010574:	e584377c 	str	r3, [r4, #1916]	; 0x77c
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 1010578:	ebffd935 	bl	1006a54 <queue_enqueue>
 101057c:	e3500000 	cmp	r0, #0
 1010580:	1a000006 	bne	10105a0 <mipi_csi_queue_waverange+0xf4>
	g_mipi_csi_state.stats.items_queued++;
 1010584:	e5943778 	ldr	r3, [r4, #1912]	; 0x778
 1010588:	e2833001 	add	r3, r3, #1
 101058c:	e5843778 	str	r3, [r4, #1912]	; 0x778
}
 1010590:	e28dd008 	add	sp, sp, #8
 1010594:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		start = 0;
 1010598:	e3a08000 	mov	r8, #0
 101059c:	eaffffdc 	b	1010514 <mipi_csi_queue_waverange+0x68>
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 10105a0:	e3a000e6 	mov	r0, #230	; 0xe6
 10105a4:	e30a374c 	movw	r3, #42828	; 0xa74c
 10105a8:	e30a2ad4 	movw	r2, #43732	; 0xaad4
 10105ac:	e308149c 	movw	r1, #33948	; 0x849c
 10105b0:	e58d0000 	str	r0, [sp]
 10105b4:	e3403106 	movt	r3, #262	; 0x106
 10105b8:	e3a00004 	mov	r0, #4
 10105bc:	e3402106 	movt	r2, #262	; 0x106
 10105c0:	e3401106 	movt	r1, #262	; 0x106
 10105c4:	ebfffb67 	bl	100f368 <d_printf>
 10105c8:	e3e00062 	mvn	r0, #98	; 0x62
 10105cc:	fa002d97 	blx	101bc30 <exit>
		d_printf(D_ERROR, "mipi_csi: Unable to calloc %d bytes for queued item", sizeof(struct mipi_csi_stream_queue_item_t));
 10105d0:	e30a197c 	movw	r1, #43388	; 0xa97c
 10105d4:	e3a02024 	mov	r2, #36	; 0x24
 10105d8:	e3401106 	movt	r1, #262	; 0x106
 10105dc:	e3a00004 	mov	r0, #4
 10105e0:	ebfffb60 	bl	100f368 <d_printf>
		d_dump_malloc_info();
 10105e4:	ebfffca7 	bl	100f888 <d_dump_malloc_info>
	item->data_type = g_mipi_csi_state.csi_data_type;
 10105e8:	e5c55004 	strb	r5, [r5, #4]
 10105ec:	e7f000f0 	udf	#0

010105f0 <mipi_csi_queue_all_waves>:
{
 10105f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10105f4:	e30562d8 	movw	r6, #21208	; 0x52d8
 10105f8:	e24dd00c 	sub	sp, sp, #12
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 10105fc:	e3a01001 	mov	r1, #1
 1010600:	e3406107 	movt	r6, #263	; 0x107
 1010604:	e3a00024 	mov	r0, #36	; 0x24
 1010608:	e5967774 	ldr	r7, [r6, #1908]	; 0x774
 101060c:	fa002d69 	blx	101bbb8 <calloc>
	if(item == NULL) {
 1010610:	e2505000 	subs	r5, r0, #0
 1010614:	0a000028 	beq	10106bc <mipi_csi_queue_all_waves+0xcc>
	g_mipi_csi_state.stats.items_alloc++;
 1010618:	e3064c78 	movw	r4, #27768	; 0x6c78
	item->wave_buffer_first = g_acq_state.acq_current;
 101061c:	e5962884 	ldr	r2, [r6, #2180]	; 0x884
	g_mipi_csi_state.stats.items_alloc++;
 1010620:	e3404107 	movt	r4, #263	; 0x107
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 1010624:	e3003774 	movw	r3, #1908	; 0x774
 1010628:	e194c0b3 	ldrh	ip, [r4, r3]
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 101062c:	e3a01003 	mov	r1, #3
	g_mipi_csi_state.stats.items_alloc++;
 1010630:	e594377c 	ldr	r3, [r4, #1916]	; 0x77c
	uint32_t nmax = acq_get_nwaves_request() - 1;
 1010634:	e2477001 	sub	r7, r7, #1
	item->data_type = g_mipi_csi_state.csi_data_type;
 1010638:	e5d40776 	ldrb	r0, [r4, #1910]	; 0x776
	item->wave_buffer_first = g_acq_state.acq_current;
 101063c:	e585201c 	str	r2, [r5, #28]
	item->start_addr = start;
 1010640:	e3a02000 	mov	r2, #0
	g_mipi_csi_state.stats.items_alloc++;
 1010644:	e2833001 	add	r3, r3, #1
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 1010648:	e5851000 	str	r1, [r5]
	item->data_type = g_mipi_csi_state.csi_data_type;
 101064c:	e5c50004 	strb	r0, [r5, #4]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 1010650:	e1a01005 	mov	r1, r5
	item->end_addr = end;
 1010654:	e5857010 	str	r7, [r5, #16]
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 1010658:	e1c5c0b6 	strh	ip, [r5, #6]
	item->start_addr = start;
 101065c:	e585200c 	str	r2, [r5, #12]
	item->free_done = NULL;
 1010660:	e5852018 	str	r2, [r5, #24]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 1010664:	e5940000 	ldr	r0, [r4]
	g_mipi_csi_state.stats.items_alloc++;
 1010668:	e584377c 	str	r3, [r4, #1916]	; 0x77c
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 101066c:	ebffd8f8 	bl	1006a54 <queue_enqueue>
 1010670:	e3500000 	cmp	r0, #0
 1010674:	1a000004 	bne	101068c <mipi_csi_queue_all_waves+0x9c>
	g_mipi_csi_state.stats.items_queued++;
 1010678:	e5943778 	ldr	r3, [r4, #1912]	; 0x778
 101067c:	e2833001 	add	r3, r3, #1
 1010680:	e5843778 	str	r3, [r4, #1912]	; 0x778
}
 1010684:	e28dd00c 	add	sp, sp, #12
 1010688:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 101068c:	e3a000e6 	mov	r0, #230	; 0xe6
 1010690:	e30a374c 	movw	r3, #42828	; 0xa74c
 1010694:	e30a2ad4 	movw	r2, #43732	; 0xaad4
 1010698:	e308149c 	movw	r1, #33948	; 0x849c
 101069c:	e58d0000 	str	r0, [sp]
 10106a0:	e3403106 	movt	r3, #262	; 0x106
 10106a4:	e3a00004 	mov	r0, #4
 10106a8:	e3402106 	movt	r2, #262	; 0x106
 10106ac:	e3401106 	movt	r1, #262	; 0x106
 10106b0:	ebfffb2c 	bl	100f368 <d_printf>
 10106b4:	e3e00062 	mvn	r0, #98	; 0x62
 10106b8:	fa002d5c 	blx	101bc30 <exit>
		d_printf(D_ERROR, "mipi_csi: Unable to calloc %d bytes for queued item", sizeof(struct mipi_csi_stream_queue_item_t));
 10106bc:	e30a197c 	movw	r1, #43388	; 0xa97c
 10106c0:	e3a02024 	mov	r2, #36	; 0x24
 10106c4:	e3401106 	movt	r1, #262	; 0x106
 10106c8:	e3a00004 	mov	r0, #4
 10106cc:	ebfffb25 	bl	100f368 <d_printf>
		d_dump_malloc_info();
 10106d0:	ebfffc6c 	bl	100f888 <d_dump_malloc_info>
	item->data_type = g_mipi_csi_state.csi_data_type;
 10106d4:	e5c55004 	strb	r5, [r5, #4]
 10106d8:	e7f000f0 	udf	#0

010106dc <mipi_csi_set_datatype_and_frame_wct>:
	if(COND_UNLIKELY(data_type >= 0x00 && data_type <= 0x03)) {
 10106dc:	e3500003 	cmp	r0, #3
{
 10106e0:	e92d4010 	push	{r4, lr}
	if(COND_UNLIKELY(data_type >= 0x00 && data_type <= 0x03)) {
 10106e4:	9a00000c 	bls	101071c <mipi_csi_set_datatype_and_frame_wct+0x40>
	g_mipi_csi_state.csi_data_type = data_type;
 10106e8:	e306cc78 	movw	ip, #27768	; 0x6c78
 10106ec:	e1a0e001 	mov	lr, r1
 10106f0:	e340c107 	movt	ip, #263	; 0x107
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 10106f4:	e3004774 	movw	r4, #1908	; 0x774
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 10106f8:	e30a1954 	movw	r1, #43348	; 0xa954
 10106fc:	e1a02000 	mov	r2, r0
	g_mipi_csi_state.csi_data_type = data_type;
 1010700:	e5cc0776 	strb	r0, [ip, #1910]	; 0x776
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 1010704:	e1a0300e 	mov	r3, lr
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 1010708:	e18ce0b4 	strh	lr, [ip, r4]
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 101070c:	e3401106 	movt	r1, #262	; 0x106
 1010710:	e3a00002 	mov	r0, #2
}
 1010714:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 1010718:	eafffb12 	b	100f368 <d_printf>
		d_printf(D_ERROR, "mipi_csi: attempt to use reserved datatype (0x00 ~ 0x03); ignoring request to change DT");
 101071c:	e30a1b10 	movw	r1, #43792	; 0xab10
 1010720:	e3a00004 	mov	r0, #4
 1010724:	e3401106 	movt	r1, #262	; 0x106
 1010728:	ebfffb0e 	bl	100f368 <d_printf>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 101072c:	e3063c78 	movw	r3, #27768	; 0x6c78
 1010730:	e3001762 	movw	r1, #1890	; 0x762
 1010734:	e3403107 	movt	r3, #263	; 0x107
 1010738:	e19320b1 	ldrh	r2, [r3, r1]
 101073c:	e3822004 	orr	r2, r2, #4
 1010740:	e18320b1 	strh	r2, [r3, r1]
}
 1010744:	e8bd8010 	pop	{r4, pc}

01010748 <mipi_csi_free_item>:
{
 1010748:	e92d4010 	push	{r4, lr}
	D_ASSERT(item != NULL);
 101074c:	e2504000 	subs	r4, r0, #0
{
 1010750:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(item != NULL);
 1010754:	0a00000a 	beq	1010784 <mipi_csi_free_item+0x3c>
	free(item->free_done);
 1010758:	e5940018 	ldr	r0, [r4, #24]
 101075c:	fa003019 	blx	101c7c8 <free>
	free(item);
 1010760:	e1a00004 	mov	r0, r4
 1010764:	fa003017 	blx	101c7c8 <free>
	g_mipi_csi_state.stats.items_freed++;
 1010768:	e3063c78 	movw	r3, #27768	; 0x6c78
 101076c:	e3403107 	movt	r3, #263	; 0x107
 1010770:	e5932780 	ldr	r2, [r3, #1920]	; 0x780
 1010774:	e2822001 	add	r2, r2, #1
 1010778:	e5832780 	str	r2, [r3, #1920]	; 0x780
}
 101077c:	e28dd008 	add	sp, sp, #8
 1010780:	e8bd8010 	pop	{r4, pc}
	D_ASSERT(item != NULL);
 1010784:	e300010b 	movw	r0, #267	; 0x10b
 1010788:	e30a374c 	movw	r3, #42828	; 0xa74c
 101078c:	e30a2b68 	movw	r2, #43880	; 0xab68
 1010790:	e308149c 	movw	r1, #33948	; 0x849c
 1010794:	e58d0000 	str	r0, [sp]
 1010798:	e3403106 	movt	r3, #262	; 0x106
 101079c:	e3a00004 	mov	r0, #4
 10107a0:	e3402106 	movt	r2, #262	; 0x106
 10107a4:	e3401106 	movt	r1, #262	; 0x106
 10107a8:	ebfffaee 	bl	100f368 <d_printf>
 10107ac:	e3e00062 	mvn	r0, #98	; 0x62
 10107b0:	fa002d1e 	blx	101bc30 <exit>

010107b4 <mipi_csi_generate_sg_list_for_buffer_range>:
}
 10107b4:	e12fff1e 	bx	lr

010107b8 <mipi_csi_generate_sg_list_for_waves>:
{
 10107b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct dma_bd_ring_t *ring = g_mipi_csi_state.bd_ring;
 10107bc:	e3065c78 	movw	r5, #27768	; 0x6c78
{
 10107c0:	e1a04000 	mov	r4, r0
 10107c4:	e1a08001 	mov	r8, r1
 10107c8:	e24dd034 	sub	sp, sp, #52	; 0x34
	struct dma_bd_ring_t *ring = g_mipi_csi_state.bd_ring;
 10107cc:	e3405107 	movt	r5, #263	; 0x107
	d_start_timing(TMR_MIPI_SG_OVERALL);
 10107d0:	e3a000f1 	mov	r0, #241	; 0xf1
{
 10107d4:	e1a06003 	mov	r6, r3
	struct dma_bd_ring_t *ring = g_mipi_csi_state.bd_ring;
 10107d8:	e595b758 	ldr	fp, [r5, #1880]	; 0x758
	d_start_timing(TMR_MIPI_SG_OVERALL);
 10107dc:	ebfffb74 	bl	100f5b4 <d_start_timing>
	D_ASSERT(wave_start <= wave_end);
 10107e0:	e1540008 	cmp	r4, r8
 10107e4:	8a000067 	bhi	1010988 <mipi_csi_generate_sg_list_for_waves+0x1d0>
	q_item->ring = NULL;
 10107e8:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
 10107ec:	e3a03000 	mov	r3, #0
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 10107f0:	e2850004 	add	r0, r5, #4
	n_waves = (wave_end - wave_start) + 1;
 10107f4:	e2888001 	add	r8, r8, #1
 10107f8:	e0488004 	sub	r8, r8, r4
	q_item->ring = NULL;
 10107fc:	e5823020 	str	r3, [r2, #32]
	q_item->calculated_size = 0;
 1010800:	e5823014 	str	r3, [r2, #20]
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 1010804:	eb000d34 	bl	1013cdc <XAxiDma_Reset>
	D_ASSERT(acq_get_ll_pointer_in_base(wave_start, &wave, base_wave) == ACQRES_OK);
 1010808:	e1a02006 	mov	r2, r6
 101080c:	e1a00004 	mov	r0, r4
 1010810:	e28d1008 	add	r1, sp, #8
 1010814:	ebfff085 	bl	100ca30 <acq_get_ll_pointer_in_base>
 1010818:	e2506000 	subs	r6, r0, #0
 101081c:	1a000065 	bne	10109b8 <mipi_csi_generate_sg_list_for_waves+0x200>
	total_wave_sz = wave->pre_sz + wave->post_sz;
 1010820:	e59d3008 	ldr	r3, [sp, #8]
	d_start_timing(TMR_MIPI_SG_BDFILL);
 1010824:	e3a000f2 	mov	r0, #242	; 0xf2
	total_wave_sz = wave->pre_sz + wave->post_sz;
 1010828:	e5939014 	ldr	r9, [r3, #20]
 101082c:	e5933018 	ldr	r3, [r3, #24]
 1010830:	e0899003 	add	r9, r9, r3
	d_start_timing(TMR_MIPI_SG_BDFILL);
 1010834:	ebfffb5e 	bl	100f5b4 <d_start_timing>
	dma_bd_rewind(ring);
 1010838:	e1a0000b 	mov	r0, fp
	expect_total_bytes = n_waves * total_wave_sz;
 101083c:	e00a0899 	mul	sl, r9, r8
	dma_bd_rewind(ring);
 1010840:	ebfff602 	bl	100e050 <dma_bd_rewind>
	for(i = 0; i < n_waves; i++) {
 1010844:	e3580000 	cmp	r8, #0
 1010848:	da00006a 	ble	10109f8 <mipi_csi_generate_sg_list_for_waves+0x240>
 101084c:	e59d0008 	ldr	r0, [sp, #8]
	uint32_t total_wave_sz, total_bytes = 0, expect_total_bytes, pad;
 1010850:	e1a07006 	mov	r7, r6
 1010854:	ea000022 	b	10108e4 <mipi_csi_generate_sg_list_for_waves+0x12c>
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_upper_start, addr_helper.pre_upper_end - addr_helper.pre_upper_start, 0, NULL);
 1010858:	e59d2018 	ldr	r2, [sp, #24]
 101085c:	e1a03004 	mov	r3, r4
 1010860:	e59dc01c 	ldr	ip, [sp, #28]
		total_bytes += total_wave_sz;
 1010864:	e0877009 	add	r7, r7, r9
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_upper_start, addr_helper.pre_upper_end - addr_helper.pre_upper_start, 0, NULL);
 1010868:	e58d4000 	str	r4, [sp]
 101086c:	e1a01002 	mov	r1, r2
 1010870:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 1010874:	e04c2002 	sub	r2, ip, r2
 1010878:	ebfff65d 	bl	100e1f4 <dma_bd_add_large_sg_entry>
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.pre_lower_start, addr_helper.pre_lower_end - addr_helper.pre_lower_start, 0, NULL);
 101087c:	e59d2010 	ldr	r2, [sp, #16]
 1010880:	e1a03004 	mov	r3, r4
 1010884:	e59dc014 	ldr	ip, [sp, #20]
 1010888:	e58d4000 	str	r4, [sp]
 101088c:	e1a01002 	mov	r1, r2
 1010890:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 1010894:	e04c2002 	sub	r2, ip, r2
 1010898:	ebfff655 	bl	100e1f4 <dma_bd_add_large_sg_entry>
		dma_bd_add_large_sg_entry(g_mipi_csi_state.bd_ring, addr_helper.post_start, addr_helper.post_end - addr_helper.post_start, 0, NULL);
 101089c:	e59d2020 	ldr	r2, [sp, #32]
 10108a0:	e1a03004 	mov	r3, r4
 10108a4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 10108a8:	e58d4000 	str	r4, [sp]
 10108ac:	e1a01002 	mov	r1, r2
 10108b0:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 10108b4:	e04c2002 	sub	r2, ip, r2
 10108b8:	ebfff64d 	bl	100e1f4 <dma_bd_add_large_sg_entry>
		if(acq_next_ll_pointer(wave, &next) != ACQRES_OK) {
 10108bc:	e28d100c 	add	r1, sp, #12
 10108c0:	e59d0008 	ldr	r0, [sp, #8]
 10108c4:	ebfff072 	bl	100ca94 <acq_next_ll_pointer>
 10108c8:	e3500000 	cmp	r0, #0
 10108cc:	1a000008 	bne	10108f4 <mipi_csi_generate_sg_list_for_waves+0x13c>
	for(i = 0; i < n_waves; i++) {
 10108d0:	e2866001 	add	r6, r6, #1
		wave = next;
 10108d4:	e59d000c 	ldr	r0, [sp, #12]
	for(i = 0; i < n_waves; i++) {
 10108d8:	e1580006 	cmp	r8, r6
		wave = next;
 10108dc:	e58d0008 	str	r0, [sp, #8]
	for(i = 0; i < n_waves; i++) {
 10108e0:	0a000003 	beq	10108f4 <mipi_csi_generate_sg_list_for_waves+0x13c>
		if(acq_dma_address_helper(wave, &addr_helper) != ACQRES_OK) {
 10108e4:	e28d1010 	add	r1, sp, #16
 10108e8:	ebfff1b2 	bl	100cfb8 <acq_dma_address_helper>
 10108ec:	e2504000 	subs	r4, r0, #0
 10108f0:	0affffd8 	beq	1010858 <mipi_csi_generate_sg_list_for_waves+0xa0>
	D_ASSERT(expect_total_bytes >= total_bytes);
 10108f4:	e157000a 	cmp	r7, sl
 10108f8:	8a000036 	bhi	10109d8 <mipi_csi_generate_sg_list_for_waves+0x220>
 10108fc:	e7ea6057 	ubfx	r6, r7, #0, #11
	pad = (expect_total_bytes - total_bytes) + (MCSI_DEFAULT_LINE_WIDTH - (total_bytes % MCSI_DEFAULT_LINE_WIDTH));
 1010900:	e28aab02 	add	sl, sl, #2048	; 0x800
 1010904:	e04aa007 	sub	sl, sl, r7
	if(pad > 0) {
 1010908:	e05a6006 	subs	r6, sl, r6
 101090c:	1a000017 	bne	1010970 <mipi_csi_generate_sg_list_for_waves+0x1b8>
	d_stop_timing(TMR_MIPI_SG_BDFILL);
 1010910:	e3a000f2 	mov	r0, #242	; 0xf2
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 1010914:	e59f4100 	ldr	r4, [pc, #256]	; 1010a1c <mipi_csi_generate_sg_list_for_waves+0x264>
	d_stop_timing(TMR_MIPI_SG_BDFILL);
 1010918:	ebfffb41 	bl	100f624 <d_stop_timing>
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 101091c:	e3a000f2 	mov	r0, #242	; 0xf2
 1010920:	ebfffb7a 	bl	100f710 <d_read_timing_us>
	status = dma_bd_start(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.bd_ring, BD_STFLAGS_TRANSMIT /* | BD_STFLAGS_DUMP_DEBUG*/);
 1010924:	e5951758 	ldr	r1, [r5, #1880]	; 0x758
 1010928:	e3a02001 	mov	r2, #1
 101092c:	e59f00ec 	ldr	r0, [pc, #236]	; 1010a20 <mipi_csi_generate_sg_list_for_waves+0x268>
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 1010930:	ed840a00 	vstr	s0, [r4]
	status = dma_bd_start(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.bd_ring, BD_STFLAGS_TRANSMIT /* | BD_STFLAGS_DUMP_DEBUG*/);
 1010934:	ebfff788 	bl	100e75c <dma_bd_start>
	if (status != BD_RES_OK) {
 1010938:	e2505000 	subs	r5, r0, #0
 101093c:	1a00002f 	bne	1010a00 <mipi_csi_generate_sg_list_for_waves+0x248>
	q_item->ring = ring;
 1010940:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
	q_item->calculated_size = total_bytes + pad;
 1010944:	e0877006 	add	r7, r7, r6
	d_stop_timing(TMR_MIPI_SG_OVERALL);
 1010948:	e3a000f1 	mov	r0, #241	; 0xf1
	q_item->ring = ring;
 101094c:	e583b020 	str	fp, [r3, #32]
	q_item->calculated_size = total_bytes + pad;
 1010950:	e5837014 	str	r7, [r3, #20]
	d_stop_timing(TMR_MIPI_SG_OVERALL);
 1010954:	ebfffb32 	bl	100f624 <d_stop_timing>
	g_mipi_csi_state.stats.last_sg_total_time_us = d_read_timing_us(TMR_MIPI_SG_OVERALL);
 1010958:	e3a000f1 	mov	r0, #241	; 0xf1
 101095c:	ebfffb6b 	bl	100f710 <d_read_timing_us>
}
 1010960:	e1a00005 	mov	r0, r5
	g_mipi_csi_state.stats.last_sg_total_time_us = d_read_timing_us(TMR_MIPI_SG_OVERALL);
 1010964:	ed040a01 	vstr	s0, [r4, #-4]
}
 1010968:	e28dd034 	add	sp, sp, #52	; 0x34
 101096c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dma_bd_add_zero_sg_entry(g_mipi_csi_state.bd_ring, pad, 0, NULL);
 1010970:	e3a03000 	mov	r3, #0
 1010974:	e1a01006 	mov	r1, r6
 1010978:	e1a02003 	mov	r2, r3
 101097c:	e5950758 	ldr	r0, [r5, #1880]	; 0x758
 1010980:	ebfff688 	bl	100e3a8 <dma_bd_add_zero_sg_entry>
 1010984:	eaffffe1 	b	1010910 <mipi_csi_generate_sg_list_for_waves+0x158>
	D_ASSERT(wave_start <= wave_end);
 1010988:	e30a374c 	movw	r3, #42828	; 0xa74c
 101098c:	e30a2760 	movw	r2, #42848	; 0xa760
 1010990:	e308149c 	movw	r1, #33948	; 0x849c
 1010994:	e3403106 	movt	r3, #262	; 0x106
 1010998:	e3402106 	movt	r2, #262	; 0x106
 101099c:	e30001a1 	movw	r0, #417	; 0x1a1
 10109a0:	e58d0000 	str	r0, [sp]
	D_ASSERT(acq_get_ll_pointer_in_base(wave_start, &wave, base_wave) == ACQRES_OK);
 10109a4:	e3a00004 	mov	r0, #4
 10109a8:	e3401106 	movt	r1, #262	; 0x106
 10109ac:	ebfffa6d 	bl	100f368 <d_printf>
 10109b0:	e3e00062 	mvn	r0, #98	; 0x62
 10109b4:	fa002c9d 	blx	101bc30 <exit>
 10109b8:	e3a00e1b 	mov	r0, #432	; 0x1b0
 10109bc:	e30a374c 	movw	r3, #42828	; 0xa74c
 10109c0:	e30a2778 	movw	r2, #42872	; 0xa778
 10109c4:	e308149c 	movw	r1, #33948	; 0x849c
 10109c8:	e58d0000 	str	r0, [sp]
 10109cc:	e3403106 	movt	r3, #262	; 0x106
 10109d0:	e3402106 	movt	r2, #262	; 0x106
 10109d4:	eafffff2 	b	10109a4 <mipi_csi_generate_sg_list_for_waves+0x1ec>
	D_ASSERT(expect_total_bytes >= total_bytes);
 10109d8:	e30001db 	movw	r0, #475	; 0x1db
 10109dc:	e30a374c 	movw	r3, #42828	; 0xa74c
 10109e0:	e30a27c0 	movw	r2, #42944	; 0xa7c0
 10109e4:	e308149c 	movw	r1, #33948	; 0x849c
 10109e8:	e58d0000 	str	r0, [sp]
 10109ec:	e3403106 	movt	r3, #262	; 0x106
 10109f0:	e3402106 	movt	r2, #262	; 0x106
 10109f4:	eaffffea 	b	10109a4 <mipi_csi_generate_sg_list_for_waves+0x1ec>
	uint32_t total_wave_sz, total_bytes = 0, expect_total_bytes, pad;
 10109f8:	e1a07006 	mov	r7, r6
 10109fc:	eaffffbf 	b	1010900 <mipi_csi_generate_sg_list_for_waves+0x148>
		d_printf(D_ERROR, "mipi_csi: fatal error passing BD ring to hardware: %d", status);
 1010a00:	e30a17e4 	movw	r1, #42980	; 0xa7e4
 1010a04:	e3a00004 	mov	r0, #4
 1010a08:	e1a02005 	mov	r2, r5
 1010a0c:	e3401106 	movt	r1, #262	; 0x106
 1010a10:	ebfffa54 	bl	100f368 <d_printf>
		exit(-1);
 1010a14:	e3e00000 	mvn	r0, #0
 1010a18:	fa002c84 	blx	101bc30 <exit>
 1010a1c:	01077424 	.word	0x01077424
 1010a20:	01076c7c 	.word	0x01076c7c

01010a24 <mipi_csi_clear_queue>:
 * Clear the queue of all working buffers, excluding any in progress.  The
 * transfer that is in progress will be removed once complete.  (The transfer
 * that is working is not on the queue.)
 */
void mipi_csi_clear_queue()
{
 1010a24:	e92d4030 	push	{r4, r5, lr}
	struct mipi_csi_stream_queue_item_t *q_item;

	// Free/dealloc all entries then delete queue
	queue_poll(g_mipi_csi_state.item_queue, (void*)&q_item);
 1010a28:	e3064c78 	movw	r4, #27768	; 0x6c78
{
 1010a2c:	e24dd00c 	sub	sp, sp, #12
	queue_poll(g_mipi_csi_state.item_queue, (void*)&q_item);
 1010a30:	e3404107 	movt	r4, #263	; 0x107
 1010a34:	e28d1004 	add	r1, sp, #4
 1010a38:	e5940000 	ldr	r0, [r4]
 1010a3c:	ebffd802 	bl	1006a4c <queue_poll>

	while(q_item != NULL) {
 1010a40:	e59d2004 	ldr	r2, [sp, #4]
 1010a44:	e3520000 	cmp	r2, #0
 1010a48:	0a00000c 	beq	1010a80 <mipi_csi_clear_queue+0x5c>
		d_printf(D_INFO, "free_clear 0x%08x", q_item);
 1010a4c:	e30a5b78 	movw	r5, #43896	; 0xab78
 1010a50:	e3405106 	movt	r5, #262	; 0x106
 1010a54:	e1a01005 	mov	r1, r5
 1010a58:	e3a00002 	mov	r0, #2
 1010a5c:	ebfffa41 	bl	100f368 <d_printf>
		free(q_item);
 1010a60:	e59d0004 	ldr	r0, [sp, #4]
 1010a64:	fa002f57 	blx	101c7c8 <free>
		queue_poll(g_mipi_csi_state.item_queue, (void*)&q_item);
 1010a68:	e28d1004 	add	r1, sp, #4
 1010a6c:	e5940000 	ldr	r0, [r4]
 1010a70:	ebffd7f5 	bl	1006a4c <queue_poll>
	while(q_item != NULL) {
 1010a74:	e59d2004 	ldr	r2, [sp, #4]
 1010a78:	e3520000 	cmp	r2, #0
 1010a7c:	1afffff4 	bne	1010a54 <mipi_csi_clear_queue+0x30>
	}
}
 1010a80:	e28dd00c 	add	sp, sp, #12
 1010a84:	e8bd8030 	pop	{r4, r5, pc}

01010a88 <mipi_csi_unpop_and_start>:
 * If there is a task running already, this has no effect and an error state is
 * set in the flags register.
 */
void mipi_csi_unpop_and_start()
{
	if(g_mipi_csi_state.working == NULL) {
 1010a88:	e3063c78 	movw	r3, #27768	; 0x6c78
 1010a8c:	e3403107 	movt	r3, #263	; 0x107
 1010a90:	e5932764 	ldr	r2, [r3, #1892]	; 0x764
 1010a94:	e3520000 	cmp	r2, #0
		g_mipi_csi_state.unpop_and_start = 1;
	} else {
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010a98:	13001762 	movwne	r1, #1890	; 0x762
		g_mipi_csi_state.unpop_and_start = 1;
 1010a9c:	05d32760 	ldrbeq	r2, [r3, #1888]	; 0x760
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010aa0:	119320b1 	ldrhne	r2, [r3, r1]
		g_mipi_csi_state.unpop_and_start = 1;
 1010aa4:	03822001 	orreq	r2, r2, #1
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010aa8:	13822002 	orrne	r2, r2, #2
		g_mipi_csi_state.unpop_and_start = 1;
 1010aac:	05c32760 	strbeq	r2, [r3, #1888]	; 0x760
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010ab0:	118320b1 	strhne	r2, [r3, r1]
	}
}
 1010ab4:	e12fff1e 	bx	lr

01010ab8 <mipi_csi_unpop_and_start_all>:
/*
 * Unpop ALL items from the queue and transmit them sequentially.
 */
void mipi_csi_unpop_and_start_all()
{
	if(!g_mipi_csi_state.unpop_and_start_all) {
 1010ab8:	e3063c78 	movw	r3, #27768	; 0x6c78
 1010abc:	e3403107 	movt	r3, #263	; 0x107
 1010ac0:	e5d32760 	ldrb	r2, [r3, #1888]	; 0x760
 1010ac4:	e3120002 	tst	r2, #2
		g_mipi_csi_state.unpop_and_start_all = 1;
		//d_printf(D_INFO, "unpop_and_start_all req");
	} else {
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010ac8:	13001762 	movwne	r1, #1890	; 0x762
		g_mipi_csi_state.unpop_and_start_all = 1;
 1010acc:	03822002 	orreq	r2, r2, #2
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010ad0:	119320b1 	ldrhne	r2, [r3, r1]
		g_mipi_csi_state.unpop_and_start_all = 1;
 1010ad4:	05c32760 	strbeq	r2, [r3, #1888]	; 0x760
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 1010ad8:	13822002 	orrne	r2, r2, #2
 1010adc:	118320b1 	strhne	r2, [r3, r1]
		//d_printf(D_INFO, "unpop_and_start_all not possible");
	}
}
 1010ae0:	e12fff1e 	bx	lr

01010ae4 <mipi_csi_process_queue_item>:
/*
 * Process an enqueued item and generate the required AXIDMA operations for it
 * to happen.
 */
void mipi_csi_process_queue_item(struct mipi_csi_stream_queue_item_t *q_item)
{
 1010ae4:	e92d4070 	push	{r4, r5, r6, lr}
	uint32_t status;
	int i, send_packet = 0;
	D_ASSERT(q_item != NULL);
 1010ae8:	e2505000 	subs	r5, r0, #0
{
 1010aec:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(q_item != NULL);
 1010af0:	0a000038 	beq	1010bd8 <mipi_csi_process_queue_item+0xf4>
	g_mipi_csi_state.working = q_item;

	//d_printf(D_INFO, "q_item=%08x, item_type=%d, q_size=%d", q_item, q_item->item_type, queue_size(g_mipi_csi_state.item_queue));

	switch(q_item->item_type) {
 1010af4:	e5953000 	ldr	r3, [r5]
	g_mipi_csi_state.working = q_item;
 1010af8:	e3064c78 	movw	r4, #27768	; 0x6c78
 1010afc:	e3404107 	movt	r4, #263	; 0x107
 1010b00:	e5845764 	str	r5, [r4, #1892]	; 0x764
	switch(q_item->item_type) {
 1010b04:	e3530002 	cmp	r3, #2
 1010b08:	0a00000c 	beq	1010b40 <mipi_csi_process_queue_item+0x5c>
 1010b0c:	e3530003 	cmp	r3, #3
 1010b10:	0a000001 	beq	1010b1c <mipi_csi_process_queue_item+0x38>
		GLOBAL_IRQ_DISABLE();
		g_mipi_csi_state.flags |= MCSI_FLAG_TRANSFER_RUNNING;
		g_mipi_csi_state.flags &= ~MCSI_FLAG_STOP_DONE;
		GLOBAL_IRQ_ENABLE();
	}
}
 1010b14:	e28dd008 	add	sp, sp, #8
 1010b18:	e8bd8070 	pop	{r4, r5, r6, pc}
			if(q_item->start_addr == CSISTRM_WAVE_ALL && q_item->end_addr == CSISTRM_WAVE_ALL) {
 1010b1c:	e1c500dc 	ldrd	r0, [r5, #12]
 1010b20:	e0013000 	and	r3, r1, r0
 1010b24:	e3730001 	cmn	r3, #1
 1010b28:	0a00001b 	beq	1010b9c <mipi_csi_process_queue_item+0xb8>
				if(mipi_csi_generate_sg_list_for_waves(q_item->start_addr, q_item->end_addr, 0, q_item->wave_buffer_first, q_item) == CSIRES_OK) {
 1010b2c:	e1a03005 	mov	r3, r5
 1010b30:	e595201c 	ldr	r2, [r5, #28]
 1010b34:	ebfffcda 	bl	100fea4 <mipi_csi_generate_sg_list_for_waves.constprop.3>
 1010b38:	e3500000 	cmp	r0, #0
 1010b3c:	1afffff4 	bne	1010b14 <mipi_csi_process_queue_item+0x30>
		D_ASSERT(q_item->calculated_size > 0);
 1010b40:	e5953014 	ldr	r3, [r5, #20]
 1010b44:	e3530000 	cmp	r3, #0
 1010b48:	0a000034 	beq	1010c20 <mipi_csi_process_queue_item+0x13c>
		D_ASSERT(q_item->ring != NULL);
 1010b4c:	e5951020 	ldr	r1, [r5, #32]
		g_mipi_csi_state.state = MCSI_ST_WAIT_FOR_XFER;
 1010b50:	e3a02001 	mov	r2, #1
		g_mipi_csi_state.transfer_size = q_item->calculated_size;
 1010b54:	e5843768 	str	r3, [r4, #1896]	; 0x768
 1010b58:	e584376c 	str	r3, [r4, #1900]	; 0x76c
		D_ASSERT(q_item->ring != NULL);
 1010b5c:	e3510000 	cmp	r1, #0
		g_mipi_csi_state.state = MCSI_ST_WAIT_FOR_XFER;
 1010b60:	e584275c 	str	r2, [r4, #1884]	; 0x75c
		D_ASSERT(q_item->ring != NULL);
 1010b64:	0a000035 	beq	1010c40 <mipi_csi_process_queue_item+0x15c>
		d_start_timing(TMR_MIPI_PERFORMANCE);
 1010b68:	e3a000f0 	mov	r0, #240	; 0xf0
 1010b6c:	ebfffa90 	bl	100f5b4 <d_start_timing>
		mipi_csi_transfer_packet(q_item);
 1010b70:	e1a00005 	mov	r0, r5
 1010b74:	eb00014d 	bl	10110b0 <mipi_csi_transfer_packet>
		GLOBAL_IRQ_DISABLE();
 1010b78:	f10c0080 	cpsid	i
		g_mipi_csi_state.flags &= ~MCSI_FLAG_STOP_DONE;
 1010b7c:	e3002762 	movw	r2, #1890	; 0x762
 1010b80:	e19430b2 	ldrh	r3, [r4, r2]
 1010b84:	e3c33b01 	bic	r3, r3, #1024	; 0x400
 1010b88:	e3833c01 	orr	r3, r3, #256	; 0x100
 1010b8c:	e18430b2 	strh	r3, [r4, r2]
		GLOBAL_IRQ_ENABLE();
 1010b90:	f1080080 	cpsie	i
}
 1010b94:	e28dd008 	add	sp, sp, #8
 1010b98:	e8bd8070 	pop	{r4, r5, r6, pc}
 * Return the number of waves done (have completed acquisition for.)  The number
 * of waves done is copied when the acquisition is stopped.
 */
inline int acq_get_nwaves_done()
{
	return g_acq_state.num_acq_made_done;
 1010b9c:	e30562d8 	movw	r6, #21208	; 0x52d8
 1010ba0:	e3406107 	movt	r6, #263	; 0x107
				if(acq_get_nwaves_done() > 0) {
 1010ba4:	e596377c 	ldr	r3, [r6, #1916]	; 0x77c
 1010ba8:	e3530000 	cmp	r3, #0
 1010bac:	da000015 	ble	1010c08 <mipi_csi_process_queue_item+0x124>
					mipi_csi_send_fifo_reset();  // Needed?
 1010bb0:	eb0000b9 	bl	1010e9c <mipi_csi_send_fifo_reset>
					if(mipi_csi_generate_sg_list_for_waves(0, acq_get_nwaves_done() - 1, 0, q_item->wave_buffer_first, q_item) == CSIRES_OK) {
 1010bb4:	e596177c 	ldr	r1, [r6, #1916]	; 0x77c
 1010bb8:	e1a03005 	mov	r3, r5
 1010bbc:	e595201c 	ldr	r2, [r5, #28]
 1010bc0:	e3a00000 	mov	r0, #0
 1010bc4:	e2411001 	sub	r1, r1, #1
 1010bc8:	ebfffcb5 	bl	100fea4 <mipi_csi_generate_sg_list_for_waves.constprop.3>
 1010bcc:	e3500000 	cmp	r0, #0
 1010bd0:	0affffda 	beq	1010b40 <mipi_csi_process_queue_item+0x5c>
 1010bd4:	eaffffce 	b	1010b14 <mipi_csi_process_queue_item+0x30>
	D_ASSERT(q_item != NULL);
 1010bd8:	e30a374c 	movw	r3, #42828	; 0xa74c
 1010bdc:	e30a2b8c 	movw	r2, #43916	; 0xab8c
 1010be0:	e308149c 	movw	r1, #33948	; 0x849c
 1010be4:	e3403106 	movt	r3, #262	; 0x106
 1010be8:	e3402106 	movt	r2, #262	; 0x106
 1010bec:	e300023d 	movw	r0, #573	; 0x23d
 1010bf0:	e58d0000 	str	r0, [sp]
		D_ASSERT(q_item->calculated_size > 0);
 1010bf4:	e3a00004 	mov	r0, #4
 1010bf8:	e3401106 	movt	r1, #262	; 0x106
 1010bfc:	ebfff9d9 	bl	100f368 <d_printf>
 1010c00:	e3e00062 	mvn	r0, #98	; 0x62
 1010c04:	fa002c09 	blx	101bc30 <exit>
					d_printf(D_ERROR, "No waves?");
 1010c08:	e30a1b9c 	movw	r1, #43932	; 0xab9c
 1010c0c:	e3a00004 	mov	r0, #4
 1010c10:	e3401106 	movt	r1, #262	; 0x106
}
 1010c14:	e28dd008 	add	sp, sp, #8
 1010c18:	e8bd4070 	pop	{r4, r5, r6, lr}
					d_printf(D_ERROR, "No waves?");
 1010c1c:	eafff9d1 	b	100f368 <d_printf>
		D_ASSERT(q_item->calculated_size > 0);
 1010c20:	e3a00e26 	mov	r0, #608	; 0x260
 1010c24:	e30a374c 	movw	r3, #42828	; 0xa74c
 1010c28:	e30a2ba8 	movw	r2, #43944	; 0xaba8
 1010c2c:	e308149c 	movw	r1, #33948	; 0x849c
 1010c30:	e58d0000 	str	r0, [sp]
 1010c34:	e3403106 	movt	r3, #262	; 0x106
 1010c38:	e3402106 	movt	r2, #262	; 0x106
 1010c3c:	eaffffec 	b	1010bf4 <mipi_csi_process_queue_item+0x110>
		D_ASSERT(q_item->ring != NULL);
 1010c40:	e3000267 	movw	r0, #615	; 0x267
 1010c44:	e30a374c 	movw	r3, #42828	; 0xa74c
 1010c48:	e30a2bc4 	movw	r2, #43972	; 0xabc4
 1010c4c:	e308149c 	movw	r1, #33948	; 0x849c
 1010c50:	e58d0000 	str	r0, [sp]
 1010c54:	e3403106 	movt	r3, #262	; 0x106
 1010c58:	e3402106 	movt	r2, #262	; 0x106
 1010c5c:	eaffffe4 	b	1010bf4 <mipi_csi_process_queue_item+0x110>

01010c60 <mipi_csi_tick>:
/*
 * Tick controller.  Should be run frequently to allow the controller to process all
 * queued requests promptly.
 */
void mipi_csi_tick()
{
 1010c60:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
			fabcfg_read(FAB_CFG_CSI_CTRL_C),
			fabcfg_read(FAB_CFG_CSI_STATUS_A),
			g_mipi_csi_state.csi_data_type);
	*/

	switch(g_mipi_csi_state.state) {
 1010c64:	e3064c78 	movw	r4, #27768	; 0x6c78
 1010c68:	e3404107 	movt	r4, #263	; 0x107
{
 1010c6c:	e24dd014 	sub	sp, sp, #20
	switch(g_mipi_csi_state.state) {
 1010c70:	e594375c 	ldr	r3, [r4, #1884]	; 0x75c
 1010c74:	e3530000 	cmp	r3, #0
 1010c78:	0a00000e 	beq	1010cb8 <mipi_csi_tick+0x58>
 1010c7c:	e3530001 	cmp	r3, #1
 1010c80:	1a00000a 	bne	1010cb0 <mipi_csi_tick+0x50>
	res = _FAB_CFG_ACCESS(reg);
 1010c84:	e3a03000 	mov	r3, #0
 1010c88:	e34433c0 	movt	r3, #17344	; 0x43c0
 1010c8c:	e593310c 	ldr	r3, [r3, #268]	; 0x10c
			}
			*/

			//dma_bd_debug_dump(g_mipi_csi_state.bd_ring);

			if(fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) {
 1010c90:	e3130001 	tst	r3, #1
 1010c94:	0a000005 	beq	1010cb0 <mipi_csi_tick+0x50>
				// Do we have any more data left?
				if(g_mipi_csi_state.transfer_rem > 0) {
 1010c98:	e594576c 	ldr	r5, [r4, #1900]	; 0x76c
 1010c9c:	e3550000 	cmp	r5, #0
 1010ca0:	0a000015 	beq	1010cfc <mipi_csi_tick+0x9c>
					// Data remains.  Process that data. (Frame ends, then we start a new frame immediately.)
					mipi_csi_send_eof();
 1010ca4:	eb0000b5 	bl	1010f80 <mipi_csi_send_eof>
					mipi_csi_transfer_packet(g_mipi_csi_state.working);
 1010ca8:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
 1010cac:	eb0000ff 	bl	10110b0 <mipi_csi_transfer_packet>
						XAxiDma_ReadReg(g_mipi_csi_state.mipi_dma.RegBase, XAXIDMA_SGCTL_OFFSET));
				*/
			}
			break;
	}
}
 1010cb0:	e28dd014 	add	sp, sp, #20
 1010cb4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
			if(g_mipi_csi_state.unpop_and_start || g_mipi_csi_state.unpop_and_start_all) {
 1010cb8:	e5d42760 	ldrb	r2, [r4, #1888]	; 0x760
 1010cbc:	e3120003 	tst	r2, #3
 1010cc0:	0afffffa 	beq	1010cb0 <mipi_csi_tick+0x50>
				g_mipi_csi_state.unpop_and_start = 0;
 1010cc4:	e7c02013 	bfi	r2, r3, #0, #1
				if(queue_size(g_mipi_csi_state.item_queue) > 0) {
 1010cc8:	e5940000 	ldr	r0, [r4]
				g_mipi_csi_state.unpop_and_start = 0;
 1010ccc:	e5c42760 	strb	r2, [r4, #1888]	; 0x760
				if(queue_size(g_mipi_csi_state.item_queue) > 0) {
 1010cd0:	ebffd761 	bl	1006a5c <queue_size>
 1010cd4:	e3500000 	cmp	r0, #0
 1010cd8:	1a00002a 	bne	1010d88 <mipi_csi_tick+0x128>
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 1010cdc:	e3002762 	movw	r2, #1890	; 0x762
					g_mipi_csi_state.unpop_and_start_all = 0;
 1010ce0:	e5d41760 	ldrb	r1, [r4, #1888]	; 0x760
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 1010ce4:	e19430b2 	ldrh	r3, [r4, r2]
					g_mipi_csi_state.unpop_and_start_all = 0;
 1010ce8:	e7c11090 	bfi	r1, r0, #1, #1
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 1010cec:	e3833c02 	orr	r3, r3, #512	; 0x200
					g_mipi_csi_state.unpop_and_start_all = 0;
 1010cf0:	e5c41760 	strb	r1, [r4, #1888]	; 0x760
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 1010cf4:	e18430b2 	strh	r3, [r4, r2]
					g_mipi_csi_state.unpop_and_start_all = 0;
 1010cf8:	eaffffec 	b	1010cb0 <mipi_csi_tick+0x50>
					d_stop_timing(TMR_MIPI_PERFORMANCE);
 1010cfc:	e3a000f0 	mov	r0, #240	; 0xf0
 1010d00:	ebfffa47 	bl	100f624 <d_stop_timing>
					g_mipi_csi_state.stats.last_transfer_time_us = d_read_timing_us(TMR_MIPI_PERFORMANCE);
 1010d04:	e3a000f0 	mov	r0, #240	; 0xf0
 1010d08:	ebfffa80 	bl	100f710 <d_read_timing_us>
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d0c:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d10:	e2841e7a 	add	r1, r4, #1952	; 0x7a0
 1010d14:	eefd7ac0 	vcvt.s32.f32	s15, s0
 1010d18:	e1c160d0 	ldrd	r6, [r1]
					g_mipi_csi_state.stats.last_transfer_time_us = d_read_timing_us(TMR_MIPI_PERFORMANCE);
 1010d1c:	ed010a02 	vstr	s0, [r1, #-8]
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d20:	ee17ca90 	vmov	ip, s15
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d24:	ee073a90 	vmov	s15, r3
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d28:	e096800c 	adds	r8, r6, ip
 1010d2c:	e0a79fcc 	adc	r9, r7, ip, asr #31
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d30:	eef87a67 	vcvt.f32.u32	s15, s15
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d34:	e1c180f0 	strd	r8, [r1]
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 1010d38:	ee877a80 	vdiv.f32	s14, s15, s0
 1010d3c:	ed017a01 	vstr	s14, [r1, #-4]
					mipi_csi_send_eof();
 1010d40:	eb00008e 	bl	1010f80 <mipi_csi_send_eof>
					mipi_csi_free_item(g_mipi_csi_state.working);
 1010d44:	e5946764 	ldr	r6, [r4, #1892]	; 0x764
	D_ASSERT(item != NULL);
 1010d48:	e3560000 	cmp	r6, #0
 1010d4c:	0a000013 	beq	1010da0 <mipi_csi_tick+0x140>
	free(item->free_done);
 1010d50:	e5960018 	ldr	r0, [r6, #24]
 1010d54:	fa002e9b 	blx	101c7c8 <free>
	free(item);
 1010d58:	e1a00006 	mov	r0, r6
 1010d5c:	fa002e99 	blx	101c7c8 <free>
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 1010d60:	e3001762 	movw	r1, #1890	; 0x762
	g_mipi_csi_state.stats.items_freed++;
 1010d64:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 1010d68:	e19430b1 	ldrh	r3, [r4, r1]
					g_mipi_csi_state.working = NULL;
 1010d6c:	e5845764 	str	r5, [r4, #1892]	; 0x764
	g_mipi_csi_state.stats.items_freed++;
 1010d70:	e2822001 	add	r2, r2, #1
					g_mipi_csi_state.state = MCSI_ST_IDLE;
 1010d74:	e584575c 	str	r5, [r4, #1884]	; 0x75c
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 1010d78:	e3c33c01 	bic	r3, r3, #256	; 0x100
	g_mipi_csi_state.stats.items_freed++;
 1010d7c:	e5842780 	str	r2, [r4, #1920]	; 0x780
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 1010d80:	e18430b1 	strh	r3, [r4, r1]
}
 1010d84:	eaffffc9 	b	1010cb0 <mipi_csi_tick+0x50>
					queue_poll(g_mipi_csi_state.item_queue, (void *)&q_item);
 1010d88:	e5940000 	ldr	r0, [r4]
 1010d8c:	e28d100c 	add	r1, sp, #12
 1010d90:	ebffd72d 	bl	1006a4c <queue_poll>
					mipi_csi_process_queue_item(q_item);
 1010d94:	e59d000c 	ldr	r0, [sp, #12]
 1010d98:	ebffff51 	bl	1010ae4 <mipi_csi_process_queue_item>
 1010d9c:	eaffffc3 	b	1010cb0 <mipi_csi_tick+0x50>
	D_ASSERT(item != NULL);
 1010da0:	e300010b 	movw	r0, #267	; 0x10b
 1010da4:	e30a374c 	movw	r3, #42828	; 0xa74c
 1010da8:	e30a2b68 	movw	r2, #43880	; 0xab68
 1010dac:	e308149c 	movw	r1, #33948	; 0x849c
 1010db0:	e58d0000 	str	r0, [sp]
 1010db4:	e3403106 	movt	r3, #262	; 0x106
 1010db8:	e3a00004 	mov	r0, #4
 1010dbc:	e3402106 	movt	r2, #262	; 0x106
 1010dc0:	e3401106 	movt	r1, #262	; 0x106
 1010dc4:	ebfff967 	bl	100f368 <d_printf>
 1010dc8:	e3e00062 	mvn	r0, #98	; 0x62
 1010dcc:	fa002b97 	blx	101bc30 <exit>

01010dd0 <mipi_csi_get_status>:

/*
 * Return a status report combining hardware (FPGA) and software state.
 */
void mipi_csi_get_status(struct mipi_csi_status_t *status)
{
 1010dd0:	e92d4070 	push	{r4, r5, r6, lr}
 1010dd4:	e1a05000 	mov	r5, r0
	uint32_t stat_a_reg;

	GLOBAL_IRQ_DISABLE();
 1010dd8:	f10c0080 	cpsid	i

	status->flags = g_mipi_csi_state.flags;
 1010ddc:	e3064c78 	movw	r4, #27768	; 0x6c78
 1010de0:	e3003762 	movw	r3, #1890	; 0x762
 1010de4:	e3404107 	movt	r4, #263	; 0x107
 1010de8:	e19420b3 	ldrh	r2, [r4, r3]
	status->data_rem = g_mipi_csi_state.transfer_rem;
 1010dec:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
	status->queue_size = queue_size(g_mipi_csi_state.item_queue);
 1010df0:	e5940000 	ldr	r0, [r4]
	status->flags = g_mipi_csi_state.flags;
 1010df4:	e1c520b0 	strh	r2, [r5]
	status->data_rem = g_mipi_csi_state.transfer_rem;
 1010df8:	e5853002 	str	r3, [r5, #2]
	status->queue_size = queue_size(g_mipi_csi_state.item_queue);
 1010dfc:	ebffd716 	bl	1006a5c <queue_size>
	res = _FAB_CFG_ACCESS(reg);
 1010e00:	e3a03000 	mov	r3, #0
 1010e04:	e1c500b6 	strh	r0, [r5, #6]
 1010e08:	e34433c0 	movt	r3, #17344	; 0x43c0
 1010e0c:	e593310c 	ldr	r3, [r3, #268]	; 0x10c

	stat_a_reg = fabcfg_read(FAB_CFG_CSI_STATUS_A);

	if(stat_a_reg & CSI_STATUS_A_DONE)
 1010e10:	e3130001 	tst	r3, #1
		status->flags |= MCSI_FLAG_SPECIAL_HW_DSTATE;
 1010e14:	11d520b0 	ldrhne	r2, [r5]
 1010e18:	13822901 	orrne	r2, r2, #16384	; 0x4000
 1010e1c:	11c520b0 	strhne	r2, [r5]

	if(stat_a_reg & CSI_STATUS_A_RUNNING)
 1010e20:	e3130004 	tst	r3, #4
		status->flags |= MCSI_FLAG_SPECIAL_HW_RSTATE;
 1010e24:	11d530b0 	ldrhne	r3, [r5]

	g_mipi_csi_state.flags &= ~MCSI_FLAG_ERROR_MASK;
 1010e28:	e3002762 	movw	r2, #1890	; 0x762
		status->flags |= MCSI_FLAG_SPECIAL_HW_RSTATE;
 1010e2c:	11e03883 	mvnne	r3, r3, lsl #17
 1010e30:	11e038a3 	mvnne	r3, r3, lsr #17
 1010e34:	11c530b0 	strhne	r3, [r5]
	g_mipi_csi_state.flags &= ~MCSI_FLAG_ERROR_MASK;
 1010e38:	e19430b2 	ldrh	r3, [r4, r2]
 1010e3c:	e3c3300e 	bic	r3, r3, #14
 1010e40:	e18430b2 	strh	r3, [r4, r2]

	GLOBAL_IRQ_ENABLE();
 1010e44:	f1080080 	cpsie	i
}
 1010e48:	e8bd8070 	pop	{r4, r5, r6, pc}

01010e4c <mipi_csi_get_size_report>:

/*
 * Return a size report.
 */
void mipi_csi_get_size_report(struct mipi_tx_size_resp_t *status)
{
 1010e4c:	e92d4070 	push	{r4, r5, r6, lr}
 1010e50:	e1a06000 	mov	r6, r0
	GLOBAL_IRQ_DISABLE();
 1010e54:	f10c0080 	cpsid	i
 1010e58:	e30552d8 	movw	r5, #21208	; 0x52d8

	status->all_waves_size = acq_get_nwaves_done() * acq_get_wave_size_bytes(ACQ_REGION_ALL);
 1010e5c:	e3a00003 	mov	r0, #3
 1010e60:	e3405107 	movt	r5, #263	; 0x107
 1010e64:	e595477c 	ldr	r4, [r5, #1916]	; 0x77c
 1010e68:	ebfff115 	bl	100d2c4 <acq_get_wave_size_bytes>
	status->trigger_data_size = acq_get_nwaves_done() * sizeof(struct acq_trigger_data_resp_t);
 1010e6c:	e595377c 	ldr	r3, [r5, #1916]	; 0x77c
	status->all_waves_size = acq_get_nwaves_done() * acq_get_wave_size_bytes(ACQ_REGION_ALL);
 1010e70:	e0040094 	mul	r4, r4, r0
	status->trigger_data_size = acq_get_nwaves_done() * sizeof(struct acq_trigger_data_resp_t);
 1010e74:	e1a03183 	lsl	r3, r3, #3
	status->all_waves_size = acq_get_nwaves_done() * acq_get_wave_size_bytes(ACQ_REGION_ALL);
 1010e78:	e5864000 	str	r4, [r6]
	status->trigger_data_size = acq_get_nwaves_done() * sizeof(struct acq_trigger_data_resp_t);
 1010e7c:	e5863004 	str	r3, [r6, #4]

	// 1 bit per sample, calculate sample size.  May need to be corrected for multi channel modes.
	status->bitpack_size = status->all_waves_size / acq_get_wave_bit_packed_depth();
 1010e80:	ebfff127 	bl	100d324 <acq_get_wave_bit_packed_depth>
 1010e84:	e1a01000 	mov	r1, r0
 1010e88:	e1a00004 	mov	r0, r4
 1010e8c:	fa00281d 	blx	101af08 <__udivsi3>
 1010e90:	e5860008 	str	r0, [r6, #8]

	GLOBAL_IRQ_ENABLE();
 1010e94:	f1080080 	cpsie	i
}
 1010e98:	e8bd8070 	pop	{r4, r5, r6, pc}

01010e9c <mipi_csi_send_fifo_reset>:
	_FAB_CFG_ACCESS(reg) |= data;
 1010e9c:	e3a03000 	mov	r3, #0
 1010ea0:	e34433c0 	movt	r3, #17344	; 0x43c0
 1010ea4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 1010ea8:	e3822040 	orr	r2, r2, #64	; 0x40
 1010eac:	e5832100 	str	r2, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~data;
 1010eb0:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 1010eb4:	e3c22040 	bic	r2, r2, #64	; 0x40
 1010eb8:	e5832100 	str	r2, [r3, #256]	; 0x100
{
	//outbyte('R');

	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_RESET_FIFO);
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_RESET_FIFO);
}
 1010ebc:	e12fff1e 	bx	lr

01010ec0 <mipi_csi_send_sof>:
	/*
	 * If clock idle flag #2 is set, then we turn off fabric clock idling so that clock goes active
	 * for the whole transaction until EoF.  If clock idle flag #1 is set, then enable clock idling
	 * now (it might not be enabled on the fabric before) but don't turn it off at EoF.
	 */
	if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_2) {
 1010ec0:	e3063c78 	movw	r3, #27768	; 0x6c78
 1010ec4:	e3002762 	movw	r2, #1890	; 0x762
 1010ec8:	e3403107 	movt	r3, #263	; 0x107
{
 1010ecc:	e92d4010 	push	{r4, lr}
	if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_2) {
 1010ed0:	e19320b2 	ldrh	r2, [r3, r2]
 1010ed4:	e3120901 	tst	r2, #16384	; 0x4000
 1010ed8:	0a000021 	beq	1010f64 <mipi_csi_send_sof+0xa4>
 1010edc:	e3a02000 	mov	r2, #0
 1010ee0:	e34423c0 	movt	r2, #17344	; 0x43c0
 1010ee4:	e5921100 	ldr	r1, [r2, #256]	; 0x100
 1010ee8:	e3c11020 	bic	r1, r1, #32
 1010eec:	e5821100 	str	r1, [r2, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 1010ef0:	e3a04000 	mov	r4, #0

	// Ensure system is stopped first by sending a stop pulse.
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP);
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP | CSI_CTRL_A_START_LINES | CSI_CTRL_A_START_FRAME);

	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, g_mipi_csi_state.csi_frame_wct, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 1010ef4:	e3002774 	movw	r2, #1908	; 0x774
 1010ef8:	e34443c0 	movt	r4, #17344	; 0x43c0
 1010efc:	e19320b2 	ldrh	r2, [r3, r2]
 1010f00:	e5943100 	ldr	r3, [r4, #256]	; 0x100

	// TODO: There is probably a better way to do this.
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_FRAME);
	//while( fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  // wait for DONE to go LOW - ack of command
	bogo_delay(1);
 1010f04:	e3a00001 	mov	r0, #1
 1010f08:	e3833008 	orr	r3, r3, #8
 1010f0c:	e5843100 	str	r3, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~data;
 1010f10:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 1010f14:	e3c3300b 	bic	r3, r3, #11
 1010f18:	e5843100 	str	r3, [r4, #256]	; 0x100
 */
static inline void fabcfg_write_masked(uint32_t reg, uint32_t data, uint32_t mask, int shift)
{
	reg &= FAB_CFG_ADDR_MASK;

	_FAB_CFG_ACCESS(reg) &= ~mask;
 1010f1c:	e5943108 	ldr	r3, [r4, #264]	; 0x108
 1010f20:	e1a03823 	lsr	r3, r3, #16
 1010f24:	e1a03803 	lsl	r3, r3, #16
 1010f28:	e5843108 	str	r3, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1010f2c:	e5943108 	ldr	r3, [r4, #264]	; 0x108
 1010f30:	e1823003 	orr	r3, r2, r3
 1010f34:	e5843108 	str	r3, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= data;
 1010f38:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 1010f3c:	e3833002 	orr	r3, r3, #2
 1010f40:	e5843100 	str	r3, [r4, #256]	; 0x100
 1010f44:	ebfff8ee 	bl	100f304 <bogo_delay>
	res = _FAB_CFG_ACCESS(reg);
 1010f48:	e594310c 	ldr	r3, [r4, #268]	; 0x10c
	while(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  // then wait for DONE to go HIGH - command done
 1010f4c:	e3130001 	tst	r3, #1
 1010f50:	0afffffc 	beq	1010f48 <mipi_csi_send_sof+0x88>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1010f54:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 1010f58:	e3c33002 	bic	r3, r3, #2
 1010f5c:	e5843100 	str	r3, [r4, #256]	; 0x100
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_FRAME);

	//outbyte(',');
}
 1010f60:	e8bd8010 	pop	{r4, pc}
	} else if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_1) {
 1010f64:	e3120902 	tst	r2, #32768	; 0x8000
	_FAB_CFG_ACCESS(reg) |= data;
 1010f68:	13a02000 	movne	r2, #0
 1010f6c:	134423c0 	movtne	r2, #17344	; 0x43c0
 1010f70:	15921100 	ldrne	r1, [r2, #256]	; 0x100
 1010f74:	13811020 	orrne	r1, r1, #32
 1010f78:	15821100 	strne	r1, [r2, #256]	; 0x100
 1010f7c:	eaffffdb 	b	1010ef0 <mipi_csi_send_sof+0x30>

01010f80 <mipi_csi_send_eof>:
/*
 * Send an end of frame signal and wait for the MIPI controller to transmit that
 * (should happen in less than 50 us.)
 */
void mipi_csi_send_eof()
{
 1010f80:	e92d4070 	push	{r4, r5, r6, lr}
	_FAB_CFG_ACCESS(reg) &= ~mask;
 1010f84:	e3a04000 	mov	r4, #0
 1010f88:	e34443c0 	movt	r4, #17344	; 0x43c0
	//outbyte('E');

	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, g_mipi_csi_state.csi_frame_wct, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 1010f8c:	e3065c78 	movw	r5, #27768	; 0x6c78
 1010f90:	e3405107 	movt	r5, #263	; 0x107
 1010f94:	e3002774 	movw	r2, #1908	; 0x774
 1010f98:	e5943108 	ldr	r3, [r4, #264]	; 0x108

	// TODO: There is probably a better way to do this.
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_LINES | CSI_CTRL_A_START_FRAME);
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_END_FRAME);
	bogo_delay(1);
 1010f9c:	e3a00001 	mov	r0, #1
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, g_mipi_csi_state.csi_frame_wct, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 1010fa0:	e19520b2 	ldrh	r2, [r5, r2]
 1010fa4:	e1a03823 	lsr	r3, r3, #16
 1010fa8:	e1a03803 	lsl	r3, r3, #16
 1010fac:	e5843108 	str	r3, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1010fb0:	e5943108 	ldr	r3, [r4, #264]	; 0x108
 1010fb4:	e1823003 	orr	r3, r2, r3
 1010fb8:	e5843108 	str	r3, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) &= ~data;
 1010fbc:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 1010fc0:	e3c33003 	bic	r3, r3, #3
 1010fc4:	e5843100 	str	r3, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 1010fc8:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 1010fcc:	e3833004 	orr	r3, r3, #4
 1010fd0:	e5843100 	str	r3, [r4, #256]	; 0x100
	bogo_delay(1);
 1010fd4:	ebfff8ca 	bl	100f304 <bogo_delay>
	res = _FAB_CFG_ACCESS(reg);
 1010fd8:	e1a03004 	mov	r3, r4
 1010fdc:	e593210c 	ldr	r2, [r3, #268]	; 0x10c
	while(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  //  wait for DONE to go HIGH - command done
 1010fe0:	e3120001 	tst	r2, #1
 1010fe4:	0afffffc 	beq	1010fdc <mipi_csi_send_eof+0x5c>

	/*
	 * If clock idle flag #2 is set, then we turn on fabric clock idling so that clock goes inactive
	 * until the next transaction
	 */
	if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_2) {
 1010fe8:	e3001762 	movw	r1, #1890	; 0x762
	_FAB_CFG_ACCESS(reg) &= ~data;
 1010fec:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 1010ff0:	e19510b1 	ldrh	r1, [r5, r1]
 1010ff4:	e3c22004 	bic	r2, r2, #4
 1010ff8:	e3110901 	tst	r1, #16384	; 0x4000
 1010ffc:	e5832100 	str	r2, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 1011000:	15932100 	ldrne	r2, [r3, #256]	; 0x100
 1011004:	13822020 	orrne	r2, r2, #32
 1011008:	15832100 	strne	r2, [r3, #256]	; 0x100
		fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_CLOCK_SLEEP_ENABLE);
	}
}
 101100c:	e8bd8070 	pop	{r4, r5, r6, pc}

01011010 <mipi_csi_stop>:
	res = _FAB_CFG_ACCESS(reg);
 1011010:	e3a02000 	mov	r2, #0
 1011014:	e34423c0 	movt	r2, #17344	; 0x43c0
 1011018:	e592310c 	ldr	r3, [r2, #268]	; 0x10c
void mipi_csi_stop()
{
	int timeout = CSI_TIMEOUT_STOP;

	// If not running don't bother stopping...
	if(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_RUNNING)) {
 101101c:	e3130004 	tst	r3, #4
 1011020:	012fff1e 	bxeq	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011024:	e5920100 	ldr	r0, [r2, #256]	; 0x100
	res = _FAB_CFG_ACCESS(reg);
 1011028:	e1a01002 	mov	r1, r2
	int timeout = CSI_TIMEOUT_STOP;
 101102c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011030:	e3c00017 	bic	r0, r0, #23
 1011034:	e5820100 	str	r0, [r2, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 1011038:	e5920100 	ldr	r0, [r2, #256]	; 0x100
 101103c:	e3800008 	orr	r0, r0, #8
 1011040:	e5820100 	str	r0, [r2, #256]	; 0x100
 1011044:	ea000001 	b	1011050 <mipi_csi_stop+0x40>

	// Send STOP and test for RUNNING - time out eventually
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_INIT_SIGNALS);
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP);

	while(fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_RUNNING) && timeout--) ;
 1011048:	e2533001 	subs	r3, r3, #1
 101104c:	3a000011 	bcc	1011098 <mipi_csi_stop+0x88>
	res = _FAB_CFG_ACCESS(reg);
 1011050:	e591210c 	ldr	r2, [r1, #268]	; 0x10c
 1011054:	e3120004 	tst	r2, #4
 1011058:	1afffffa 	bne	1011048 <mipi_csi_stop+0x38>

	if(timeout == 0) {
 101105c:	e3530000 	cmp	r3, #0
 1011060:	e3063c78 	movw	r3, #27768	; 0x6c78
 1011064:	e3403107 	movt	r3, #263	; 0x107
 1011068:	e3002762 	movw	r2, #1890	; 0x762
 101106c:	e19310b2 	ldrh	r1, [r3, r2]
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_STOP_TIMEOUT;
 1011070:	03811008 	orreq	r1, r1, #8
	if(timeout == 0) {
 1011074:	1a00000b 	bne	10110a8 <mipi_csi_stop+0x98>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011078:	e3a02000 	mov	r2, #0
 101107c:	e3000762 	movw	r0, #1890	; 0x762
 1011080:	e34423c0 	movt	r2, #17344	; 0x43c0
 1011084:	e18310b0 	strh	r1, [r3, r0]
 1011088:	e5923100 	ldr	r3, [r2, #256]	; 0x100
 101108c:	e3c33008 	bic	r3, r3, #8
 1011090:	e5823100 	str	r3, [r2, #256]	; 0x100
	} else {
		g_mipi_csi_state.flags |= MCSI_FLAG_STOP_DONE;
	}

	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP);
}
 1011094:	e12fff1e 	bx	lr
 1011098:	e3063c78 	movw	r3, #27768	; 0x6c78
 101109c:	e3002762 	movw	r2, #1890	; 0x762
 10110a0:	e3403107 	movt	r3, #263	; 0x107
 10110a4:	e19310b2 	ldrh	r1, [r3, r2]
		g_mipi_csi_state.flags |= MCSI_FLAG_STOP_DONE;
 10110a8:	e3811b01 	orr	r1, r1, #1024	; 0x400
 10110ac:	eafffff1 	b	1011078 <mipi_csi_stop+0x68>

010110b0 <mipi_csi_transfer_packet>:
 *
 * This function initiates a transfer: it doesn't wait for the transfer to complete.
 * The user should check the DONE state to see when to send the next packet.
 */
void mipi_csi_transfer_packet(struct mipi_csi_stream_queue_item_t *q_item)
{
 10110b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	uint32_t flags_a = 0;
	uint32_t lines = g_mipi_csi_state.csi_line_count;
 10110b4:	e3067c78 	movw	r7, #27768	; 0x6c78
 10110b8:	e3407107 	movt	r7, #263	; 0x107
 10110bc:	e3003772 	movw	r3, #1906	; 0x772
{
 10110c0:	e24dd00c 	sub	sp, sp, #12
 10110c4:	e1a09000 	mov	r9, r0
	uint32_t size;

	outbyte('x');
 10110c8:	e3a00078 	mov	r0, #120	; 0x78
	uint32_t lines = g_mipi_csi_state.csi_line_count;
 10110cc:	e19750b3 	ldrh	r5, [r7, r3]
	outbyte('x');
 10110d0:	eb00221a 	bl	1019940 <outbyte>

	size = lines * g_mipi_csi_state.csi_line_size;
 10110d4:	e2872e77 	add	r2, r7, #1904	; 0x770
 10110d8:	e3a03000 	mov	r3, #0
 10110dc:	e1d260b0 	ldrh	r6, [r2]
 10110e0:	e34433c0 	movt	r3, #17344	; 0x43c0
 10110e4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 10110e8:	e0080695 	mul	r8, r5, r6
 10110ec:	e3c22001 	bic	r2, r2, #1
 10110f0:	e5832100 	str	r2, [r3, #256]	; 0x100
	 * Adjust the line count near the end of the packet.
	 *
	 * Packets are rounded to a multiple of the line size with remaining data replaced
	 * with undefined values.
	 */
	if(size > g_mipi_csi_state.transfer_rem) {
 10110f4:	e597476c 	ldr	r4, [r7, #1900]	; 0x76c
 10110f8:	e1540008 	cmp	r4, r8
 10110fc:	2a000004 	bcs	1011114 <mipi_csi_transfer_packet+0x64>
		size = g_mipi_csi_state.transfer_rem;
		lines = size / g_mipi_csi_state.csi_line_size;
 1011100:	e1a01006 	mov	r1, r6
 1011104:	e1a00004 	mov	r0, r4
 1011108:	fa00277e 	blx	101af08 <__udivsi3>
 101110c:	e1a08004 	mov	r8, r4
 1011110:	e1a05000 	mov	r5, r0
	 * with the logic subtracting two on each 16-bit word xfer.)
	 *
	 * TODO: We could probably improve performance here by not writing these values on
	 * each iteration -- but this is a relatively light task compared to the DMA setup.
	 */
	D_ASSERT(INT_IS_EVEN(g_mipi_csi_state.csi_line_size)) ;
 1011114:	e3160001 	tst	r6, #1
 1011118:	1a00002e 	bne	10111d8 <mipi_csi_transfer_packet+0x128>
	_FAB_CFG_ACCESS(reg) &= ~mask;
 101111c:	e3a04000 	mov	r4, #0

	fabcfg_write_masked(FAB_CFG_CSI_CTRL_A, g_mipi_csi_state.csi_line_size - 2, CSI_CTRL_A_LINE_BYTE_COUNT_MSK, CSI_CTRL_A_LINE_BYTE_COUNT_SFT);
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, lines - 1, CSI_CTRL_B_LINE_COUNT_MSK, CSI_CTRL_B_LINE_COUNT_SFT);
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, q_item->data_type, CSI_CTRL_B_DATA_TYPE_MSK, CSI_CTRL_B_DATA_TYPE_SFT);
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, q_item->wct_header, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 1011120:	e1d930b6 	ldrh	r3, [r9, #6]
 1011124:	e34443c0 	movt	r4, #17344	; 0x43c0
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_A, g_mipi_csi_state.csi_line_size - 2, CSI_CTRL_A_LINE_BYTE_COUNT_MSK, CSI_CTRL_A_LINE_BYTE_COUNT_SFT);
 1011128:	e2466002 	sub	r6, r6, #2
 101112c:	e5942100 	ldr	r2, [r4, #256]	; 0x100
 1011130:	e3a0c000 	mov	ip, #0
 1011134:	e34fcfff 	movt	ip, #65535	; 0xffff
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, lines - 1, CSI_CTRL_B_LINE_COUNT_MSK, CSI_CTRL_B_LINE_COUNT_SFT);
 1011138:	e2455001 	sub	r5, r5, #1
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 101113c:	e6ff5075 	uxth	r5, r5
	_FAB_CFG_ACCESS(reg) &= ~mask;
 1011140:	e6ff2072 	uxth	r2, r2
 1011144:	e5842100 	str	r2, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1011148:	e5942100 	ldr	r2, [r4, #256]	; 0x100
 101114c:	e1826806 	orr	r6, r2, r6, lsl #16
 1011150:	e5846100 	str	r6, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~mask;
 1011154:	e5942104 	ldr	r2, [r4, #260]	; 0x104
 1011158:	e002200c 	and	r2, r2, ip
 101115c:	e5842104 	str	r2, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1011160:	e5942104 	ldr	r2, [r4, #260]	; 0x104
 1011164:	e1855002 	orr	r5, r5, r2
 1011168:	e5845104 	str	r5, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) &= ~mask;
 101116c:	e5940104 	ldr	r0, [r4, #260]	; 0x104
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, q_item->data_type, CSI_CTRL_B_DATA_TYPE_MSK, CSI_CTRL_B_DATA_TYPE_SFT);
 1011170:	e5d92004 	ldrb	r2, [r9, #4]
 1011174:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
 1011178:	e5840104 	str	r0, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 101117c:	e5941104 	ldr	r1, [r4, #260]	; 0x104
 1011180:	e1811c02 	orr	r1, r1, r2, lsl #24
 1011184:	e5841104 	str	r1, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) &= ~mask;
 1011188:	e5942108 	ldr	r2, [r4, #264]	; 0x108
 101118c:	e002200c 	and	r2, r2, ip
 1011190:	e5842108 	str	r2, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1011194:	e5942108 	ldr	r2, [r4, #264]	; 0x108
 1011198:	e1833002 	orr	r3, r3, r2
 101119c:	e5843108 	str	r3, [r4, #264]	; 0x108

	// Send the frame start signal first, then send the start lines signal.
	mipi_csi_send_sof();
 10111a0:	ebffff46 	bl	1010ec0 <mipi_csi_send_sof>
	_FAB_CFG_ACCESS(reg) |= data;
 10111a4:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_LINES);

	g_mipi_csi_state.transfer_rem -= size;
	g_mipi_csi_state.stats.data_xfer_bytes += size;
 10111a8:	e59f0058 	ldr	r0, [pc, #88]	; 1011208 <mipi_csi_transfer_packet+0x158>
 10111ac:	e3833001 	orr	r3, r3, #1
 10111b0:	e5843100 	str	r3, [r4, #256]	; 0x100
 10111b4:	e14020d8 	ldrd	r2, [r0, #-8]
	g_mipi_csi_state.transfer_rem -= size;
 10111b8:	e597176c 	ldr	r1, [r7, #1900]	; 0x76c
	g_mipi_csi_state.stats.data_xfer_bytes += size;
 10111bc:	e0924008 	adds	r4, r2, r8
 10111c0:	e2a35000 	adc	r5, r3, #0
	g_mipi_csi_state.transfer_rem -= size;
 10111c4:	e0418008 	sub	r8, r1, r8
	g_mipi_csi_state.stats.data_xfer_bytes += size;
 10111c8:	e14040f8 	strd	r4, [r0, #-8]
	g_mipi_csi_state.transfer_rem -= size;
 10111cc:	e587876c 	str	r8, [r7, #1900]	; 0x76c

	//d_printf(D_INFO, "mipi_csi: packet parameters: %d bytes remain", g_mipi_csi_state.transfer_rem);
}
 10111d0:	e28dd00c 	add	sp, sp, #12
 10111d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	D_ASSERT(INT_IS_EVEN(g_mipi_csi_state.csi_line_size)) ;
 10111d8:	e3a000ab 	mov	r0, #171	; 0xab
 10111dc:	e30a3bdc 	movw	r3, #43996	; 0xabdc
 10111e0:	e30a2bf4 	movw	r2, #44020	; 0xabf4
 10111e4:	e308149c 	movw	r1, #33948	; 0x849c
 10111e8:	e58d0000 	str	r0, [sp]
 10111ec:	e3403106 	movt	r3, #262	; 0x106
 10111f0:	e3a00004 	mov	r0, #4
 10111f4:	e3402106 	movt	r2, #262	; 0x106
 10111f8:	e3401106 	movt	r1, #262	; 0x106
 10111fc:	ebfff859 	bl	100f368 <d_printf>
 1011200:	e3e00062 	mvn	r0, #98	; 0x62
 1011204:	fa002a89 	blx	101bc30 <exit>
 1011208:	01077408 	.word	0x01077408

0101120c <mipi_csi_pack_padding>:

/*
 * Send a padding packet (N empty frames with no lines.)
 */
void mipi_csi_pack_padding(int frames)
{
 101120c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	_FAB_CFG_ACCESS(reg) &= ~mask;
 1011210:	e3a04000 	mov	r4, #0
 1011214:	e1a05004 	mov	r5, r4
 1011218:	e34443c0 	movt	r4, #17344	; 0x43c0
 101121c:	e34f5fff 	movt	r5, #65535	; 0xffff
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, 0, CSI_CTRL_B_LINE_COUNT_MSK, CSI_CTRL_B_LINE_COUNT_SFT);

	// Send the frame start signal first, then send the start lines signal.
	while(frames--) {
 1011220:	e3500000 	cmp	r0, #0
 1011224:	e5943104 	ldr	r3, [r4, #260]	; 0x104
 1011228:	e0033005 	and	r3, r3, r5
 101122c:	e5843104 	str	r3, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1011230:	e5943104 	ldr	r3, [r4, #260]	; 0x104
 1011234:	e5843104 	str	r3, [r4, #260]	; 0x104
 1011238:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 101123c:	e59f607c 	ldr	r6, [pc, #124]	; 10112c0 <mipi_csi_pack_padding+0xb4>
 1011240:	e2408001 	sub	r8, r0, #1
 1011244:	e2467012 	sub	r7, r6, #18
		//outbyte('0' + frames);
		mipi_csi_send_sof();
 1011248:	ebffff1c 	bl	1010ec0 <mipi_csi_send_sof>
	_FAB_CFG_ACCESS(reg) &= ~mask;
 101124c:	e5942108 	ldr	r2, [r4, #264]	; 0x108
	bogo_delay(1);
 1011250:	e3a00001 	mov	r0, #1
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, g_mipi_csi_state.csi_frame_wct, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 1011254:	e1d630b0 	ldrh	r3, [r6]
 1011258:	e0022005 	and	r2, r2, r5
 101125c:	e5842108 	str	r2, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 1011260:	e5942108 	ldr	r2, [r4, #264]	; 0x108
 1011264:	e1833002 	orr	r3, r3, r2
 1011268:	e5843108 	str	r3, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) &= ~data;
 101126c:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 1011270:	e3c33003 	bic	r3, r3, #3
 1011274:	e5843100 	str	r3, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 1011278:	e5943100 	ldr	r3, [r4, #256]	; 0x100
 101127c:	e3833004 	orr	r3, r3, #4
 1011280:	e5843100 	str	r3, [r4, #256]	; 0x100
	bogo_delay(1);
 1011284:	ebfff81e 	bl	100f304 <bogo_delay>
	res = _FAB_CFG_ACCESS(reg);
 1011288:	e594310c 	ldr	r3, [r4, #268]	; 0x10c
	while(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  //  wait for DONE to go HIGH - command done
 101128c:	e3130001 	tst	r3, #1
 1011290:	0afffffc 	beq	1011288 <mipi_csi_pack_padding+0x7c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011294:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_2) {
 1011298:	e1d720b0 	ldrh	r2, [r7]
 101129c:	e3c33004 	bic	r3, r3, #4
 10112a0:	e3120901 	tst	r2, #16384	; 0x4000
 10112a4:	e5843100 	str	r3, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 10112a8:	15943100 	ldrne	r3, [r4, #256]	; 0x100
 10112ac:	13833020 	orrne	r3, r3, #32
 10112b0:	15843100 	strne	r3, [r4, #256]	; 0x100
	while(frames--) {
 10112b4:	e2588001 	subs	r8, r8, #1
 10112b8:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
 10112bc:	eaffffe1 	b	1011248 <mipi_csi_pack_padding+0x3c>
 10112c0:	010773ec 	.word	0x010773ec

010112c4 <enable_caches>:
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
    Xil_DCacheEnable();
#endif
#endif
}
 10112c4:	e12fff1e 	bx	lr

010112c8 <disable_caches>:
 10112c8:	e12fff1e 	bx	lr

010112cc <init_uart>:
 10112cc:	e12fff1e 	bx	lr

010112d0 <init_platform>:
 10112d0:	e12fff1e 	bx	lr

010112d4 <cleanup_platform>:
 10112d4:	e12fff1e 	bx	lr

010112d8 <spi_isr_handler>:
/*
 * ISR context handler for SPI.  We do not use the XSpiPs interrupt
 * handler.
 */
void spi_isr_handler(void *unused)
{
 10112d8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10112dc:	e30f4348 	movw	r4, #62280	; 0xf348
 10112e0:	e3404107 	movt	r4, #263	; 0x107
 10112e4:	e2845e16 	add	r5, r4, #352	; 0x160
					g_spi_state.cmd_state = SPI_STATE_CHECKSUM;
				}
				break;

			case SPI_STATE_CHECKSUM:
				g_spi_state.stats.num_bytes_rx_valid++;
 10112e8:	e2846e17 	add	r6, r4, #368	; 0x170
						g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
					} else {
						spi_command_mark_slot_occupied(slot_idx);
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
						slot->cmd = g_spi_state.cmd_id;
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 10112ec:	e2849009 	add	r9, r4, #9
							g_spi_state.stats.num_command_lost_full_deque++;
							g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
							d_printf(D_ERROR, "spi: out of space for SPI commands");
						} else {
							g_spi_state.commands_queued++;
							g_spi_state.stats.num_command_accepted++;
 10112f0:	e2848e19 	add	r8, r4, #400	; 0x190
 * Receive a byte via the SPI port (without checking if it is available.)  May return
 * stale data if overrun occurs.
 */
inline uint8_t spi_receive_no_wait()
{
	return XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_RXD_OFFSET);
 10112f4:	e594e158 	ldr	lr, [r4, #344]	; 0x158
		g_spi_state.stats.num_bytes_rxtx++;
 10112f8:	e5953000 	ldr	r3, [r5]
 10112fc:	e5951004 	ldr	r1, [r5, #4]
 1011300:	e59ec004 	ldr	ip, [lr, #4]
		switch(g_spi_state.cmd_state) {
 1011304:	e5942004 	ldr	r2, [r4, #4]
		g_spi_state.stats.num_bytes_rxtx++;
 1011308:	e2933001 	adds	r3, r3, #1
 101130c:	e2a11000 	adc	r1, r1, #0
 1011310:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 1011314:	e59c0020 	ldr	r0, [ip, #32]
		switch(g_spi_state.cmd_state) {
 1011318:	e2423001 	sub	r3, r2, #1
		g_spi_state.stats.num_bytes_rxtx++;
 101131c:	e5851004 	str	r1, [r5, #4]
 1011320:	e6ef0070 	uxtb	r0, r0
		switch(g_spi_state.cmd_state) {
 1011324:	e3530003 	cmp	r3, #3
 1011328:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 101132c:	ea000008 	b	1011354 <spi_isr_handler+0x7c>
 1011330:	010113e8 	.word	0x010113e8
 1011334:	01011424 	.word	0x01011424
 1011338:	0101138c 	.word	0x0101138c
 101133c:	01011340 	.word	0x01011340
					// Acknowledge the response, then process another command
					g_spi_state.resp_done = 0;
					g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
				}
				*/
				g_spi_state.resp_done = 0;
 1011340:	e5d43000 	ldrb	r3, [r4]
				g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 1011344:	e3a02001 	mov	r2, #1
 1011348:	e5842004 	str	r2, [r4, #4]
				g_spi_state.resp_done = 0;
 101134c:	e7c1309f 	bfc	r3, #1, #1
 1011350:	e5c43000 	strb	r3, [r4]
 1011354:	e59c3004 	ldr	r3, [ip, #4]
inline uint32_t spi_read_sr_errata()
{
	uint32_t x, y;

	x = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
	asm("nop");
 1011358:	e320f000 	nop	{0}
	y = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
 101135c:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1011360:	e5933004 	ldr	r3, [r3, #4]
 1011364:	e5933004 	ldr	r3, [r3, #4]
	asm("nop");
 1011368:	e320f000 	nop	{0}
				break;
		}

		// Clear NEMPTY bit & TXUF
		//REG_SET_BIT(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_RXNEMPTY_MASK | XSPIPS_IXR_TXUF_MASK);
	} while(spi_read_sr_errata() & XSPIPS_IXR_RXNEMPTY_MASK) ;
 101136c:	e3130010 	tst	r3, #16
 1011370:	1affffdf 	bne	10112f4 <spi_isr_handler+0x1c>

	// Clear other ISR bits
	REG_SET_BIT(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_WR_TO_CLR_MASK);
 1011374:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1011378:	e5932004 	ldr	r2, [r3, #4]
 101137c:	e5923004 	ldr	r3, [r2, #4]
 1011380:	e3833043 	orr	r3, r3, #67	; 0x43
	*LocalAddr = Value;
 1011384:	e5823004 	str	r3, [r2, #4]

}
 1011388:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				g_spi_state.stats.num_bytes_rx_valid++;
 101138c:	e5962000 	ldr	r2, [r6]
 1011390:	e5961004 	ldr	r1, [r6, #4]
	unsigned int i;
	int bit;

	for(i = 0; i < SPI_QUEUE_ALLOC_BITMASK_SIZE; i++) {
		// Find first set bit by using __builtin_ffs
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1011394:	e59431c8 	ldr	r3, [r4, #456]	; 0x1c8
				g_spi_state.stats.num_bytes_rx_valid++;
 1011398:	e2922001 	adds	r2, r2, #1
 101139c:	e2a11000 	adc	r1, r1, #0
 10113a0:	e5862000 	str	r2, [r6]

		// Can this we done without a branch?
		if(free_mask != 0x00000000) {
 10113a4:	e3530000 	cmp	r3, #0
				g_spi_state.stats.num_bytes_rx_valid++;
 10113a8:	e5861004 	str	r1, [r6, #4]
		if(free_mask != 0x00000000) {
 10113ac:	1a000063 	bne	1011540 <spi_isr_handler+0x268>
		free_mask = g_spi_state.cmd_free_bitmask[i];
 10113b0:	e59431cc 	ldr	r3, [r4, #460]	; 0x1cc
		if(free_mask != 0x00000000) {
 10113b4:	e3530000 	cmp	r3, #0
 10113b8:	13a07020 	movne	r7, #32
 10113bc:	1a000060 	bne	1011544 <spi_isr_handler+0x26c>
						g_spi_state.stats.num_command_lost_full_alloc++;
 10113c0:	e59f22a8 	ldr	r2, [pc, #680]	; 1011670 <spi_isr_handler+0x398>
						g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 10113c4:	e3a03001 	mov	r3, #1
 10113c8:	e5843004 	str	r3, [r4, #4]
						g_spi_state.stats.num_command_lost_full_alloc++;
 10113cc:	e5923000 	ldr	r3, [r2]
 10113d0:	e5921004 	ldr	r1, [r2, #4]
 10113d4:	e2933001 	adds	r3, r3, #1
 10113d8:	e2a11000 	adc	r1, r1, #0
 10113dc:	e5823000 	str	r3, [r2]
 10113e0:	e5821004 	str	r1, [r2, #4]
						g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 10113e4:	eaffffda 	b	1011354 <spi_isr_handler+0x7c>
				if(byte_rx == 0x00) {
 10113e8:	e3500000 	cmp	r0, #0
 10113ec:	1a000047 	bne	1011510 <spi_isr_handler+0x238>
					g_spi_state.stats.num_command_nop++;
 10113f0:	e59f127c 	ldr	r1, [pc, #636]	; 1011674 <spi_isr_handler+0x39c>
					g_spi_state.stats.num_bytes_rx_valid++;
 10113f4:	e8964004 	ldm	r6, {r2, lr}
					g_spi_state.stats.num_command_nop++;
 10113f8:	e5913000 	ldr	r3, [r1]
 10113fc:	e5910004 	ldr	r0, [r1, #4]
					g_spi_state.stats.num_bytes_rx_valid++;
 1011400:	e2922001 	adds	r2, r2, #1
 1011404:	e2aee000 	adc	lr, lr, #0
 1011408:	e5862000 	str	r2, [r6]
					g_spi_state.stats.num_command_nop++;
 101140c:	e2933001 	adds	r3, r3, #1
					g_spi_state.stats.num_bytes_rx_valid++;
 1011410:	e586e004 	str	lr, [r6, #4]
					g_spi_state.stats.num_command_nop++;
 1011414:	e2a02000 	adc	r2, r0, #0
 1011418:	e5813000 	str	r3, [r1]
 101141c:	e5812004 	str	r2, [r1, #4]
 1011420:	eaffffcb 	b	1011354 <spi_isr_handler+0x7c>
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1011424:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
				g_spi_state.stats.num_bytes_rx_valid++;
 1011428:	e5961000 	ldr	r1, [r6]
				g_spi_state.cmd_argpop--;
 101142c:	e594c01c 	ldr	ip, [r4, #28]
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1011430:	e0233000 	eor	r3, r3, r0
				g_spi_state.stats.num_bytes_rx_valid++;
 1011434:	e5962004 	ldr	r2, [r6, #4]
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1011438:	e0843003 	add	r3, r4, r3
				g_spi_state.stats.num_bytes_rx_valid++;
 101143c:	e2911001 	adds	r1, r1, #1
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1011440:	e5d37025 	ldrb	r7, [r3, #37]	; 0x25
				g_spi_state.cmd_argpop--;
 1011444:	e24cc001 	sub	ip, ip, #1
				g_spi_state.cmd_argdata[g_spi_state.cmd_argidx] = byte_rx;
 1011448:	e5943020 	ldr	r3, [r4, #32]
				g_spi_state.stats.num_bytes_rx_valid++;
 101144c:	e2a22000 	adc	r2, r2, #0
				if(g_spi_state.cmd_argpop == 0) {
 1011450:	e35c0000 	cmp	ip, #0
				g_spi_state.stats.num_bytes_rx_valid++;
 1011454:	e8860006 	stm	r6, {r1, r2}
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1011458:	e5c47024 	strb	r7, [r4, #36]	; 0x24
				g_spi_state.cmd_argdata[g_spi_state.cmd_argidx] = byte_rx;
 101145c:	e0842003 	add	r2, r4, r3
				g_spi_state.cmd_argidx++;
 1011460:	e2833001 	add	r3, r3, #1
				g_spi_state.cmd_argpop--;
 1011464:	e584c01c 	str	ip, [r4, #28]
				g_spi_state.cmd_argdata[g_spi_state.cmd_argidx] = byte_rx;
 1011468:	e5c20009 	strb	r0, [r2, #9]
				g_spi_state.cmd_argidx++;
 101146c:	e5843020 	str	r3, [r4, #32]
				if(g_spi_state.cmd_argpop == 0) {
 1011470:	0a000022 	beq	1011500 <spi_isr_handler+0x228>
 1011474:	e59ec004 	ldr	ip, [lr, #4]
 1011478:	eaffffb5 	b	1011354 <spi_isr_handler+0x7c>
						g_spi_state.stats.num_command_ok++;
 101147c:	e59fc1f0 	ldr	ip, [pc, #496]	; 1011674 <spi_isr_handler+0x39c>
						g_spi_state.crc = g_spi_state.crc_table[byte_rx];
 1011480:	e0842000 	add	r2, r4, r0
						g_spi_state.stats.num_bytes_rx_valid++;
 1011484:	e5961000 	ldr	r1, [r6]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 1011488:	e0833280 	add	r3, r3, r0, lsl #5
						g_spi_state.crc = g_spi_state.crc_table[byte_rx];
 101148c:	e5d2a025 	ldrb	sl, [r2, #37]	; 0x25
						g_spi_state.stats.num_bytes_rx_valid++;
 1011490:	e5967004 	ldr	r7, [r6, #4]
 1011494:	e2911001 	adds	r1, r1, #1
						g_spi_state.stats.num_command_ok++;
 1011498:	e51c2008 	ldr	r2, [ip, #-8]
 101149c:	e51cb004 	ldr	fp, [ip, #-4]
						g_spi_state.cmd_id = byte_rx;
 10114a0:	e5c40008 	strb	r0, [r4, #8]
						g_spi_state.stats.num_bytes_rx_valid++;
 10114a4:	e2a77000 	adc	r7, r7, #0
						g_spi_state.cmd_argpop = g_spi_command_lut[byte_rx].nargs;
 10114a8:	e5930014 	ldr	r0, [r3, #20]
						g_spi_state.stats.num_command_ok++;
 10114ac:	e2922001 	adds	r2, r2, #1
						g_spi_state.stats.num_bytes_rx_valid++;
 10114b0:	e5861000 	str	r1, [r6]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10114b4:	e5d41000 	ldrb	r1, [r4]
						g_spi_state.crc = g_spi_state.crc_table[byte_rx];
 10114b8:	e5c4a024 	strb	sl, [r4, #36]	; 0x24
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10114bc:	e5d3a018 	ldrb	sl, [r3, #24]
						g_spi_state.stats.num_command_ok++;
 10114c0:	e2ab3000 	adc	r3, fp, #0
 10114c4:	e50c2008 	str	r2, [ip, #-8]
						if(g_spi_state.cmd_argpop == 0) {
 10114c8:	e3500000 	cmp	r0, #0
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10114cc:	e1a02001 	mov	r2, r1
						g_spi_state.stats.num_command_ok++;
 10114d0:	e50c3004 	str	r3, [ip, #-4]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10114d4:	e7c0201a 	bfi	r2, sl, #0, #1
						g_spi_state.cmd_argidx = 0;
 10114d8:	e3a03000 	mov	r3, #0
						g_spi_state.cmd_argpop = g_spi_command_lut[byte_rx].nargs;
 10114dc:	e584001c 	str	r0, [r4, #28]
						g_spi_state.cmd_argidx = 0;
 10114e0:	e5843020 	str	r3, [r4, #32]
						g_spi_state.stats.num_bytes_rx_valid++;
 10114e4:	e5867004 	str	r7, [r6, #4]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10114e8:	e5c42000 	strb	r2, [r4]
						memset(&g_spi_state.cmd_argdata, 0, SPI_COMMAND_MAX_ARGS);
 10114ec:	e5893000 	str	r3, [r9]
 10114f0:	e5893004 	str	r3, [r9, #4]
 10114f4:	e5893008 	str	r3, [r9, #8]
 10114f8:	e589300c 	str	r3, [r9, #12]
						if(g_spi_state.cmd_argpop == 0) {
 10114fc:	1a000057 	bne	1011660 <spi_isr_handler+0x388>
					g_spi_state.cmd_state = SPI_STATE_CHECKSUM;
 1011500:	e3a03003 	mov	r3, #3
 1011504:	e59ec004 	ldr	ip, [lr, #4]
 1011508:	e5843004 	str	r3, [r4, #4]
 101150c:	eaffff90 	b	1011354 <spi_isr_handler+0x7c>
					if(g_spi_command_lut[byte_rx].valid) {
 1011510:	e30f3f10 	movw	r3, #65296	; 0xff10
 1011514:	e3403107 	movt	r3, #263	; 0x107
 1011518:	e7d32280 	ldrb	r2, [r3, r0, lsl #5]
 101151c:	e3520000 	cmp	r2, #0
 1011520:	1affffd5 	bne	101147c <spi_isr_handler+0x1a4>
						g_spi_state.stats.num_command_errors++;
 1011524:	e5183008 	ldr	r3, [r8, #-8]
 1011528:	e5182004 	ldr	r2, [r8, #-4]
 101152c:	e2933001 	adds	r3, r3, #1
 1011530:	e2a22000 	adc	r2, r2, #0
 1011534:	e5083008 	str	r3, [r8, #-8]
 1011538:	e5082004 	str	r2, [r8, #-4]
 101153c:	eaffff84 	b	1011354 <spi_isr_handler+0x7c>
		if(free_mask != 0x00000000) {
 1011540:	e3a07000 	mov	r7, #0
			bit = __builtin_ffs(free_mask);
 1011544:	e3530000 	cmp	r3, #0
 1011548:	e6ff3f33 	rbit	r3, r3
 101154c:	e16f3f13 	clz	r3, r3
 1011550:	03e03000 	mvneq	r3, #0
			return (i * 32) + bit - 1;
 1011554:	e0877003 	add	r7, r7, r3
						slot->cmd = g_spi_state.cmd_id;
 1011558:	e5d4b008 	ldrb	fp, [r4, #8]
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 101155c:	e087e107 	add	lr, r7, r7, lsl #2
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 1011560:	e5990000 	ldr	r0, [r9]
 1011564:	e5991004 	ldr	r1, [r9, #4]
/*
 * Mark a slot as occupied in the bitmask.  Slots are occupied when their bit is zero.
 */
inline void spi_command_mark_slot_occupied(unsigned int slot)
{
	g_spi_state.cmd_free_bitmask[slot / 32] &= ~(1 << (slot % 32));
 1011568:	e1a0a2a7 	lsr	sl, r7, #5
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 101156c:	e1a0e18e 	lsl	lr, lr, #3
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 1011570:	e5992008 	ldr	r2, [r9, #8]
 1011574:	e599300c 	ldr	r3, [r9, #12]
 1011578:	e28aa072 	add	sl, sl, #114	; 0x72
						slot->cmd = g_spi_state.cmd_id;
 101157c:	e084c00e 	add	ip, r4, lr
 1011580:	e207701f 	and	r7, r7, #31
 1011584:	e5ccb1d8 	strb	fp, [ip, #472]	; 0x1d8
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 1011588:	e28ccf77 	add	ip, ip, #476	; 0x1dc
						slot->nargs = g_spi_state.cmd_argidx;
 101158c:	e594b020 	ldr	fp, [r4, #32]
 1011590:	e50cb008 	str	fp, [ip, #-8]
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 1011594:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 1011598:	e28ece1f 	add	ip, lr, #496	; 0x1f0
 101159c:	e794010a 	ldr	r0, [r4, sl, lsl #2]
 10115a0:	e084c00c 	add	ip, r4, ip
 10115a4:	e3a02001 	mov	r2, #1
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 10115a8:	e28eee1d 	add	lr, lr, #464	; 0x1d0
						slot->resp_ready = 0;
 10115ac:	e5dc3004 	ldrb	r3, [ip, #4]
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 10115b0:	e084b00e 	add	fp, r4, lr
						if(deque_add_last(g_spi_state.command_dq, slot) != CC_OK) {
 10115b4:	e1a0100b 	mov	r1, fp
 10115b8:	e1c07712 	bic	r7, r0, r2, lsl r7
 10115bc:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
						slot->resp_ready = 0;
 10115c0:	e3c33011 	bic	r3, r3, #17
 10115c4:	e3833010 	orr	r3, r3, #16
 10115c8:	e784710a 	str	r7, [r4, sl, lsl #2]
 10115cc:	e5cc3004 	strb	r3, [ip, #4]
						if(deque_add_last(g_spi_state.command_dq, slot) != CC_OK) {
 10115d0:	ebffc22e 	bl	1001e90 <deque_add_last>
 10115d4:	e3500000 	cmp	r0, #0
 10115d8:	e3a02001 	mov	r2, #1
 10115dc:	1a000010 	bne	1011624 <spi_isr_handler+0x34c>
							g_spi_state.stats.num_command_accepted++;
 10115e0:	e5983000 	ldr	r3, [r8]
 10115e4:	e5981004 	ldr	r1, [r8, #4]
							if(g_spi_state.has_response) {
 10115e8:	e5940000 	ldr	r0, [r4]
							g_spi_state.stats.num_command_accepted++;
 10115ec:	e2933001 	adds	r3, r3, #1
							g_spi_state.last_cmd = slot;
 10115f0:	e584bbac 	str	fp, [r4, #2988]	; 0xbac
							g_spi_state.stats.num_command_accepted++;
 10115f4:	e5883000 	str	r3, [r8]
 10115f8:	e2a11000 	adc	r1, r1, #0
							g_spi_state.commands_queued++;
 10115fc:	e5943ba8 	ldr	r3, [r4, #2984]	; 0xba8
							if(g_spi_state.has_response) {
 1011600:	e3100001 	tst	r0, #1
								g_spi_state.cmd_state = SPI_STATE_RESPONSE_WAIT;
 1011604:	13a02004 	movne	r2, #4
							g_spi_state.stats.num_command_accepted++;
 1011608:	e5881004 	str	r1, [r8, #4]
								g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101160c:	e5842004 	str	r2, [r4, #4]
							g_spi_state.commands_queued++;
 1011610:	e2833001 	add	r3, r3, #1
 1011614:	e5843ba8 	str	r3, [r4, #2984]	; 0xba8
							if(g_spi_state.has_response) {
 1011618:	e5943158 	ldr	r3, [r4, #344]	; 0x158
								g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101161c:	e593c004 	ldr	ip, [r3, #4]
 1011620:	eaffff4b 	b	1011354 <spi_isr_handler+0x7c>
							g_spi_state.stats.num_command_lost_full_deque++;
 1011624:	e59fc04c 	ldr	ip, [pc, #76]	; 1011678 <spi_isr_handler+0x3a0>
							d_printf(D_ERROR, "spi: out of space for SPI commands");
 1011628:	e30a1c20 	movw	r1, #44064	; 0xac20
							g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101162c:	e5842004 	str	r2, [r4, #4]
							d_printf(D_ERROR, "spi: out of space for SPI commands");
 1011630:	e3401106 	movt	r1, #262	; 0x106
 1011634:	e3a00004 	mov	r0, #4
							g_spi_state.stats.num_command_lost_full_deque++;
 1011638:	e51c3008 	ldr	r3, [ip, #-8]
 101163c:	e51c2004 	ldr	r2, [ip, #-4]
 1011640:	e2933001 	adds	r3, r3, #1
 1011644:	e2a22000 	adc	r2, r2, #0
 1011648:	e50c3008 	str	r3, [ip, #-8]
 101164c:	e50c2004 	str	r2, [ip, #-4]
							d_printf(D_ERROR, "spi: out of space for SPI commands");
 1011650:	ebfff744 	bl	100f368 <d_printf>
 1011654:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1011658:	e593c004 	ldr	ip, [r3, #4]
 101165c:	eaffff3c 	b	1011354 <spi_isr_handler+0x7c>
							g_spi_state.cmd_state = SPI_STATE_ARGS;
 1011660:	e3a03002 	mov	r3, #2
 1011664:	e59ec004 	ldr	ip, [lr, #4]
 1011668:	e5843004 	str	r3, [r4, #4]
 101166c:	eaffff38 	b	1011354 <spi_isr_handler+0x7c>
 1011670:	0107f4e8 	.word	0x0107f4e8
 1011674:	0107f4c8 	.word	0x0107f4c8
 1011678:	0107f4f8 	.word	0x0107f4f8

0101167c <spi_init>:
{
 101167c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_spi_state.spi_config = XSpiPs_LookupConfig(SPI_DEVICE_ID);
 1011680:	e3a00000 	mov	r0, #0
 1011684:	eb001dca 	bl	1018db4 <XSpiPs_LookupConfig>
 1011688:	e30f5348 	movw	r5, #62280	; 0xf348
	if(g_spi_state.spi_config == NULL) {
 101168c:	e3500000 	cmp	r0, #0
	g_spi_state.spi_config = XSpiPs_LookupConfig(SPI_DEVICE_ID);
 1011690:	e3405107 	movt	r5, #263	; 0x107
 1011694:	e5850158 	str	r0, [r5, #344]	; 0x158
	if(g_spi_state.spi_config == NULL) {
 1011698:	0a0000fd 	beq	1011a94 <spi_init+0x418>
	error = XSpiPs_CfgInitialize(&g_spi_state.spi, g_spi_state.spi_config, g_spi_state.spi_config->BaseAddress);
 101169c:	e5902004 	ldr	r2, [r0, #4]
 10116a0:	e1a01000 	mov	r1, r0
 10116a4:	e2850f4a 	add	r0, r5, #296	; 0x128
 10116a8:	eb001cea 	bl	1018a58 <XSpiPs_CfgInitialize>
	if(error != XST_SUCCESS) {
 10116ac:	e2502000 	subs	r2, r0, #0
 10116b0:	1a0000f1 	bne	1011a7c <spi_init+0x400>
	error = XSpiPs_SelfTest(&g_spi_state.spi);
 10116b4:	e2850f4a 	add	r0, r5, #296	; 0x128
 10116b8:	eb001dc4 	bl	1018dd0 <XSpiPs_SelfTest>
	if(error != XST_SUCCESS) {
 10116bc:	e2504000 	subs	r4, r0, #0
 10116c0:	1a0000e6 	bne	1011a60 <spi_init+0x3e4>
	return *(volatile u32 *) Addr;
 10116c4:	e3a0633e 	mov	r6, #-134217728	; 0xf8000000
	bogo_delay(10);
 10116c8:	e3a0000a 	mov	r0, #10
 10116cc:	e596321c 	ldr	r3, [r6, #540]	; 0x21c
	REG_SET_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 10116d0:	e3833005 	orr	r3, r3, #5
	*LocalAddr = Value;
 10116d4:	e586321c 	str	r3, [r6, #540]	; 0x21c
	bogo_delay(10);
 10116d8:	ebfff709 	bl	100f304 <bogo_delay>
	return *(volatile u32 *) Addr;
 10116dc:	e596321c 	ldr	r3, [r6, #540]	; 0x21c
	bogo_delay(10);
 10116e0:	e3a0000a 	mov	r0, #10
	REG_CLR_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 10116e4:	e3c33005 	bic	r3, r3, #5
	*LocalAddr = Value;
 10116e8:	e586321c 	str	r3, [r6, #540]	; 0x21c
	bogo_delay(10);
 10116ec:	ebfff704 	bl	100f304 <bogo_delay>
	XSpiPs_Reset(&g_spi_state.spi);
 10116f0:	e2850f4a 	add	r0, r5, #296	; 0x128
 10116f4:	eb001cb6 	bl	10189d4 <XSpiPs_Reset>
	return *(volatile u32 *) Addr;
 10116f8:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
	*LocalAddr = Value;
 10116fc:	e3a0c002 	mov	ip, #2
 1011700:	e3a0203f 	mov	r2, #63	; 0x3f
	d_printf(D_WARN, "spi: init SpiCR state: 0x%08x", XSpiPs_ReadReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET));
 1011704:	e30a1cc0 	movw	r1, #44224	; 0xacc0
 1011708:	e3401106 	movt	r1, #262	; 0x106
 101170c:	e3a00003 	mov	r0, #3
	return *(volatile u32 *) Addr;
 1011710:	e59e3000 	ldr	r3, [lr]
	REG_CLR_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_MODF_GEN_EN_MASK);
 1011714:	e3c33802 	bic	r3, r3, #131072	; 0x20000
	*LocalAddr = Value;
 1011718:	e58e3000 	str	r3, [lr]
	return *(volatile u32 *) Addr;
 101171c:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
 1011720:	e59e3000 	ldr	r3, [lr]
	REG_CLR_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_MSTREN_MASK);
 1011724:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 1011728:	e58e3000 	str	r3, [lr]
	return *(volatile u32 *) Addr;
 101172c:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
 1011730:	e59e3000 	ldr	r3, [lr]
	REG_CLR_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_CPOL_MASK);
 1011734:	e3c33002 	bic	r3, r3, #2
	*LocalAddr = Value;
 1011738:	e58e3000 	str	r3, [lr]
	return *(volatile u32 *) Addr;
 101173c:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
 1011740:	e59e3000 	ldr	r3, [lr]
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_CPHA_MASK);
 1011744:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 1011748:	e58e3000 	str	r3, [lr]
	XSpiPs_SetRXWatermark(&g_spi_state.spi, 2);
 101174c:	e595312c 	ldr	r3, [r5, #300]	; 0x12c
 1011750:	e583c02c 	str	ip, [r3, #44]	; 0x2c
	XSpiPs_SetTXWatermark(&g_spi_state.spi, SPI_RESPONSE_PACK_SIZE);
 1011754:	e595312c 	ldr	r3, [r5, #300]	; 0x12c
 1011758:	e5832028 	str	r2, [r3, #40]	; 0x28
	return *(volatile u32 *) Addr;
 101175c:	e595312c 	ldr	r3, [r5, #300]	; 0x12c
 1011760:	e5932000 	ldr	r2, [r3]
	d_printf(D_WARN, "spi: init SpiCR state: 0x%08x", XSpiPs_ReadReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET));
 1011764:	ebfff6ff 	bl	100f368 <d_printf>
	x = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
 1011768:	e5953158 	ldr	r3, [r5, #344]	; 0x158
 101176c:	e5933004 	ldr	r3, [r3, #4]
 1011770:	ea000003 	b	1011784 <spi_init+0x108>
	return XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_RXD_OFFSET);
 1011774:	e5953158 	ldr	r3, [r5, #344]	; 0x158
		garbage_bytes++;
 1011778:	e2844001 	add	r4, r4, #1
 101177c:	e5933004 	ldr	r3, [r3, #4]
 1011780:	e5932020 	ldr	r2, [r3, #32]
 1011784:	e5933004 	ldr	r3, [r3, #4]
	asm("nop");
 1011788:	e320f000 	nop	{0}
	y = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
 101178c:	e5953158 	ldr	r3, [r5, #344]	; 0x158
 1011790:	e5933004 	ldr	r3, [r3, #4]
 1011794:	e5933004 	ldr	r3, [r3, #4]
	asm("nop");
 1011798:	e320f000 	nop	{0}
	while(spi_read_sr_errata() & XSPIPS_IXR_RXNEMPTY_MASK) {
 101179c:	e3130010 	tst	r3, #16
 10117a0:	1afffff3 	bne	1011774 <spi_init+0xf8>
	d_printf(D_WARN, "spi: %d garbage RX bytes discarded", garbage_bytes);
 10117a4:	e30a1ce0 	movw	r1, #44256	; 0xace0
 10117a8:	e1a02004 	mov	r2, r4
 10117ac:	e3401106 	movt	r1, #262	; 0x106
 10117b0:	e3a00003 	mov	r0, #3
 10117b4:	ebfff6eb 	bl	100f368 <d_printf>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_XSPIPS_0_INTR, (Xil_ExceptionHandler)spi_isr_handler, NULL);
 10117b8:	e30122d8 	movw	r2, #4824	; 0x12d8
 10117bc:	e3050b80 	movw	r0, #23424	; 0x5b80
 10117c0:	e3402101 	movt	r2, #257	; 0x101
 10117c4:	e3400107 	movt	r0, #263	; 0x107
 10117c8:	e3a03000 	mov	r3, #0
 10117cc:	e3a0103a 	mov	r1, #58	; 0x3a
 10117d0:	eb0016f2 	bl	10173a0 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 10117d4:	e2506000 	subs	r6, r0, #0
 10117d8:	1a000099 	bne	1011a44 <spi_init+0x3c8>
	d_printf(D_INFO, "spi: peripheral initialised @ 0x%08x", g_spi_state.spi_config->BaseAddress);
 10117dc:	e5953158 	ldr	r3, [r5, #344]	; 0x158
	*LocalAddr = Value;
 10117e0:	e3a0c001 	mov	ip, #1
	XSpiPs_Enable(&g_spi_state.spi);
 10117e4:	e595212c 	ldr	r2, [r5, #300]	; 0x12c
	d_printf(D_INFO, "spi: peripheral initialised @ 0x%08x", g_spi_state.spi_config->BaseAddress);
 10117e8:	e30a1d2c 	movw	r1, #44332	; 0xad2c
 10117ec:	e3401106 	movt	r1, #262	; 0x106
 10117f0:	e3a00002 	mov	r0, #2
 10117f4:	e582c014 	str	ip, [r2, #20]
 10117f8:	e5932004 	ldr	r2, [r3, #4]
 10117fc:	ebfff6d9 	bl	100f368 <d_printf>
			if((k <<= 1) & 0x100) {
 1011800:	e59f12a4 	ldr	r1, [pc, #676]	; 1011aac <spi_init+0x430>
 1011804:	e1a03006 	mov	r3, r6
	d_printf(D_INFO, "spi: peripheral initialised @ 0x%08x", g_spi_state.spi_config->BaseAddress);
 1011808:	e3a02002 	mov	r2, #2
 101180c:	e2415024 	sub	r5, r1, #36	; 0x24
 1011810:	e1a04005 	mov	r4, r5
 1011814:	e2850f49 	add	r0, r5, #292	; 0x124
 1011818:	ea000003 	b	101182c <spi_init+0x1b0>
			if((k <<= 1) & 0x100) {
 101181c:	e3120c01 	tst	r2, #256	; 0x100
 1011820:	e1a03002 	mov	r3, r2
				k ^= SPI_CRC8_POLY;
 1011824:	12223031 	eorne	r3, r2, #49	; 0x31
 1011828:	e2822002 	add	r2, r2, #2
			if((k <<= 1) & 0x100) {
 101182c:	e1a03083 	lsl	r3, r3, #1
 1011830:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011834:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011838:	e1a03083 	lsl	r3, r3, #1
 101183c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011840:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011844:	e1a03083 	lsl	r3, r3, #1
 1011848:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 101184c:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011850:	e1a03083 	lsl	r3, r3, #1
 1011854:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011858:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 101185c:	e1a03083 	lsl	r3, r3, #1
 1011860:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011864:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011868:	e1a03083 	lsl	r3, r3, #1
 101186c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011870:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011874:	e1a03083 	lsl	r3, r3, #1
 1011878:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 101187c:	12233031 	eorne	r3, r3, #49	; 0x31
		g_spi_state.crc_table[i] = k;
 1011880:	e5e13001 	strb	r3, [r1, #1]!
	for(i = 0; i < 256; i++) {
 1011884:	e1500001 	cmp	r0, r1
 1011888:	1affffe3 	bne	101181c <spi_init+0x1a0>
 101188c:	e59f321c 	ldr	r3, [pc, #540]	; 1011ab0 <spi_init+0x434>
		memset(g_spi_command_lut[i].short_name, 0, SPI_COMMAND_SHORT_NAME_MAX + 1);
 1011890:	e3a02000 	mov	r2, #0
 1011894:	e2831a02 	add	r1, r3, #8192	; 0x2000
 1011898:	e5832000 	str	r2, [r3]
 101189c:	e2833020 	add	r3, r3, #32
 10118a0:	e503201c 	str	r2, [r3, #-28]	; 0xffffffe4
 10118a4:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
 10118a8:	e5032014 	str	r2, [r3, #-20]	; 0xffffffec
		g_spi_command_lut[i].valid = 0;
 10118ac:	e5432021 	strb	r2, [r3, #-33]	; 0xffffffdf
	for(i = 0; i < SPI_COMMAND_TOTAL_COUNT; i++) {
 10118b0:	e1510003 	cmp	r1, r3
 10118b4:	1afffff7 	bne	1011898 <spi_init+0x21c>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 10118b8:	e3077878 	movw	r7, #30840	; 0x7878
 10118bc:	e3407102 	movt	r7, #258	; 0x102
 10118c0:	e5d78000 	ldrb	r8, [r7]
 10118c4:	e35800ff 	cmp	r8, #255	; 0xff
 10118c8:	0a000055 	beq	1011a24 <spi_init+0x3a8>
 10118cc:	e30f9f10 	movw	r9, #65296	; 0xff10
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 10118d0:	e3a0a020 	mov	sl, #32
 10118d4:	e3409107 	movt	r9, #263	; 0x107
 10118d8:	e3a0b001 	mov	fp, #1
 10118dc:	e100b88a 	smlabb	r0, sl, r8, fp
 10118e0:	e5971004 	ldr	r1, [r7, #4]
 10118e4:	e3a0200f 	mov	r2, #15
		added++;
 10118e8:	e2866001 	add	r6, r6, #1
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 10118ec:	e0890000 	add	r0, r9, r0
 10118f0:	fa0033f9 	blx	101e8dc <strncpy>
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 10118f4:	e0893288 	add	r3, r9, r8, lsl #5
 10118f8:	e5970008 	ldr	r0, [r7, #8]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 10118fc:	e5971010 	ldr	r1, [r7, #16]
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1011900:	e5d7200c 	ldrb	r2, [r7, #12]
		g_spi_command_lut[spi_cmd->cmd_id].valid = 1;
 1011904:	e7c9b288 	strb	fp, [r9, r8, lsl #5]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011908:	e5f78014 	ldrb	r8, [r7, #20]!
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 101190c:	e5830014 	str	r0, [r3, #20]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 1011910:	e583101c 	str	r1, [r3, #28]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011914:	e35800ff 	cmp	r8, #255	; 0xff
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1011918:	e5c32018 	strb	r2, [r3, #24]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 101191c:	1affffee 	bne	10118dc <spi_init+0x260>
 1011920:	e2663c01 	rsb	r3, r6, #256	; 0x100
	d_printf(D_INFO, "spi: %d LUT entries filled, %d free", added, SPI_COMMAND_TOTAL_COUNT - added);
 1011924:	e30a1d54 	movw	r1, #44372	; 0xad54
 1011928:	e1a02006 	mov	r2, r6
 101192c:	e3401106 	movt	r1, #262	; 0x106
 1011930:	e3a00002 	mov	r0, #2
 1011934:	ebfff68b 	bl	100f368 <d_printf>
	d_printf(D_INFO, "spi: initialising deque");
 1011938:	e30a1d78 	movw	r1, #44408	; 0xad78
	g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101193c:	e3a03001 	mov	r3, #1
	d_printf(D_INFO, "spi: initialising deque");
 1011940:	e3401106 	movt	r1, #262	; 0x106
 1011944:	e3a00002 	mov	r0, #2
	g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 1011948:	e5853004 	str	r3, [r5, #4]
	g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 101194c:	e5853bc0 	str	r3, [r5, #3008]	; 0xbc0
	d_printf(D_INFO, "spi: initialising deque");
 1011950:	ebfff684 	bl	100f368 <d_printf>
	error = deque_new(&g_spi_state.command_dq);
 1011954:	e59f0158 	ldr	r0, [pc, #344]	; 1011ab4 <spi_init+0x438>
 1011958:	ebffc07b 	bl	1001b4c <deque_new>
	if(error != CC_OK) {
 101195c:	e2502000 	subs	r2, r0, #0
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 1011960:	01a03002 	moveq	r3, r2
		g_spi_state.cmd_alloc_table[i].cmd = 0;
 1011964:	01a01002 	moveq	r1, r2
	if(error != CC_OK) {
 1011968:	1a00002f 	bne	1011a2c <spi_init+0x3b0>
		g_spi_state.cmd_alloc_table[i].alloc_idx = i;
 101196c:	e58431d0 	str	r3, [r4, #464]	; 0x1d0
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 1011970:	e2833001 	add	r3, r3, #1
 1011974:	e353003f 	cmp	r3, #63	; 0x3f
		g_spi_state.cmd_alloc_table[i].cmd = 0;
 1011978:	e5c411d8 	strb	r1, [r4, #472]	; 0x1d8
		g_spi_state.cmd_alloc_table[i].nargs = 0;
 101197c:	e58411d4 	str	r1, [r4, #468]	; 0x1d4
 1011980:	e2844028 	add	r4, r4, #40	; 0x28
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 1011984:	1afffff8 	bne	101196c <spi_init+0x2f0>
/*
 * Free a slot in the bitmask.  Slots are free when their bit is set.
 */
inline void spi_command_mark_slot_free(unsigned int slot)
{
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1011988:	e3a0c001 	mov	ip, #1
 101198c:	e1a032a2 	lsr	r3, r2, #5
 1011990:	e202001f 	and	r0, r2, #31
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 1011994:	e2822001 	add	r2, r2, #1
 1011998:	e2833072 	add	r3, r3, #114	; 0x72
 101199c:	e352003f 	cmp	r2, #63	; 0x3f
 10119a0:	e7951103 	ldr	r1, [r5, r3, lsl #2]
 10119a4:	e181101c 	orr	r1, r1, ip, lsl r0
 10119a8:	e7851103 	str	r1, [r5, r3, lsl #2]
 10119ac:	1afffff6 	bne	101198c <spi_init+0x310>
	res = _FAB_CFG_ACCESS(reg);
 10119b0:	e3a02000 	mov	r2, #0
	g_version_resp.bitstream_id = fabcfg_read(FAB_CFG_VERSION);
 10119b4:	e3073438 	movw	r3, #29752	; 0x7438
 10119b8:	e34423c0 	movt	r2, #17344	; 0x43c0
 10119bc:	e3403107 	movt	r3, #263	; 0x107
 10119c0:	e592e00c 	ldr	lr, [r2, #12]
	g_version_resp.ps_app_id = PS_APP_VERSION_INT;
 10119c4:	e30002be 	movw	r0, #702	; 0x2be
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_WR_TO_CLR_MASK);
 10119c8:	e595c12c 	ldr	ip, [r5, #300]	; 0x12c
	g_version_resp.build_timestamp = 0x00000000; // TBD
 10119cc:	e3a01000 	mov	r1, #0
	g_version_resp.bitstream_id = fabcfg_read(FAB_CFG_VERSION);
 10119d0:	e583e000 	str	lr, [r3]
 10119d4:	e5922010 	ldr	r2, [r2, #16]
	g_version_resp.ps_app_id = PS_APP_VERSION_INT;
 10119d8:	e5830008 	str	r0, [r3, #8]
	SPI_SCUGIC_ENABLE();
 10119dc:	e3050b80 	movw	r0, #23424	; 0x5b80
	g_version_resp.build_timestamp = 0x00000000; // TBD
 10119e0:	e583100c 	str	r1, [r3, #12]
	SPI_SCUGIC_ENABLE();
 10119e4:	e3400107 	movt	r0, #263	; 0x107
	g_version_resp.usraccess = fabcfg_read(FAB_CFG_USRACCESS);
 10119e8:	e5832004 	str	r2, [r3, #4]
	SPI_SCUGIC_ENABLE();
 10119ec:	e3a0103a 	mov	r1, #58	; 0x3a
	return *(volatile u32 *) Addr;
 10119f0:	e59c3004 	ldr	r3, [ip, #4]
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_WR_TO_CLR_MASK);
 10119f4:	e3833043 	orr	r3, r3, #67	; 0x43
	*LocalAddr = Value;
 10119f8:	e58c3004 	str	r3, [ip, #4]
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_IER_OFFSET, XSPIPS_IXR_MODF_MASK | XSPIPS_IXR_TXUF_MASK | XSPIPS_IXR_RXNEMPTY_MASK);
 10119fc:	e595212c 	ldr	r2, [r5, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011a00:	e5923008 	ldr	r3, [r2, #8]
 1011a04:	e3833052 	orr	r3, r3, #82	; 0x52
	*LocalAddr = Value;
 1011a08:	e5823008 	str	r3, [r2, #8]
	SPI_SCUGIC_ENABLE();
 1011a0c:	eb0017ba 	bl	10178fc <XScuGic_Enable>
	d_printf(D_INFO, "spi: done init");
 1011a10:	e30a1dbc 	movw	r1, #44476	; 0xadbc
 1011a14:	e3a00002 	mov	r0, #2
 1011a18:	e3401106 	movt	r1, #262	; 0x106
}
 1011a1c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "spi: done init");
 1011a20:	eafff650 	b	100f368 <d_printf>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011a24:	e3a03c01 	mov	r3, #256	; 0x100
 1011a28:	eaffffbd 	b	1011924 <spi_init+0x2a8>
		d_printf(D_ERROR, "spi: unable to initialise deque: error %d", error);
 1011a2c:	e30a1d90 	movw	r1, #44432	; 0xad90
 1011a30:	e3a00004 	mov	r0, #4
 1011a34:	e3401106 	movt	r1, #262	; 0x106
 1011a38:	ebfff64a 	bl	100f368 <d_printf>
		exit(-1);
 1011a3c:	e3e00000 	mvn	r0, #0
 1011a40:	fa00287a 	blx	101bc30 <exit>
		d_printf(D_ERROR, "spi: unable to connect ScuGic: error %d", error);
 1011a44:	e30a1d04 	movw	r1, #44292	; 0xad04
 1011a48:	e3a00004 	mov	r0, #4
 1011a4c:	e1a02006 	mov	r2, r6
 1011a50:	e3401106 	movt	r1, #262	; 0x106
 1011a54:	ebfff643 	bl	100f368 <d_printf>
		exit(-1);
 1011a58:	e3e00000 	mvn	r0, #0
 1011a5c:	fa002873 	blx	101bc30 <exit>
		d_printf(D_ERROR, "spi: selftest failed: error %d", error);
 1011a60:	e30a1ca0 	movw	r1, #44192	; 0xaca0
 1011a64:	e3a00004 	mov	r0, #4
 1011a68:	e1a02004 	mov	r2, r4
 1011a6c:	e3401106 	movt	r1, #262	; 0x106
 1011a70:	ebfff63c 	bl	100f368 <d_printf>
		exit(-1);
 1011a74:	e3e00000 	mvn	r0, #0
 1011a78:	fa00286c 	blx	101bc30 <exit>
		d_printf(D_ERROR, "spi: unable to initialise SPI peripheral: error %d", error);
 1011a7c:	e30a1c6c 	movw	r1, #44140	; 0xac6c
 1011a80:	e3a00004 	mov	r0, #4
 1011a84:	e3401106 	movt	r1, #262	; 0x106
 1011a88:	ebfff636 	bl	100f368 <d_printf>
		exit(-1);
 1011a8c:	e3e00000 	mvn	r0, #0
 1011a90:	fa002866 	blx	101bc30 <exit>
		d_printf(D_ERROR, "spi: configuration lookup returns NULL");
 1011a94:	e30a1c44 	movw	r1, #44100	; 0xac44
 1011a98:	e3a00004 	mov	r0, #4
 1011a9c:	e3401106 	movt	r1, #262	; 0x106
 1011aa0:	ebfff630 	bl	100f368 <d_printf>
		exit(-1);
 1011aa4:	e3e00000 	mvn	r0, #0
 1011aa8:	fa002860 	blx	101bc30 <exit>
 1011aac:	0107f36c 	.word	0x0107f36c
 1011ab0:	0107ff11 	.word	0x0107ff11
 1011ab4:	0107ff00 	.word	0x0107ff00

01011ab8 <spi_reset_hw>:
{
 1011ab8:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 1011abc:	e3a0433e 	mov	r4, #-134217728	; 0xf8000000
 1011ac0:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	bogo_delay(10);
 1011ac4:	e3a0000a 	mov	r0, #10
	REG_SET_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 1011ac8:	e3833005 	orr	r3, r3, #5
	*LocalAddr = Value;
 1011acc:	e584321c 	str	r3, [r4, #540]	; 0x21c
	bogo_delay(10);
 1011ad0:	ebfff60b 	bl	100f304 <bogo_delay>
	return *(volatile u32 *) Addr;
 1011ad4:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	bogo_delay(10);
 1011ad8:	e3a0000a 	mov	r0, #10
	REG_CLR_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 1011adc:	e3c33005 	bic	r3, r3, #5
	*LocalAddr = Value;
 1011ae0:	e584321c 	str	r3, [r4, #540]	; 0x21c
}
 1011ae4:	e8bd4010 	pop	{r4, lr}
	bogo_delay(10);
 1011ae8:	eafff605 	b	100f304 <bogo_delay>

01011aec <spi_crc_lut_gen>:
			if((k <<= 1) & 0x100) {
 1011aec:	e59f107c 	ldr	r1, [pc, #124]	; 1011b70 <spi_crc_lut_gen+0x84>
{
 1011af0:	e3a02002 	mov	r2, #2
			if((k <<= 1) & 0x100) {
 1011af4:	e3a03000 	mov	r3, #0
 1011af8:	e2810c01 	add	r0, r1, #256	; 0x100
 1011afc:	e1a03083 	lsl	r3, r3, #1
 1011b00:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b04:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011b08:	e1a03083 	lsl	r3, r3, #1
 1011b0c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b10:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011b14:	e1a03083 	lsl	r3, r3, #1
 1011b18:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b1c:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011b20:	e1a03083 	lsl	r3, r3, #1
 1011b24:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b28:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011b2c:	e1a03083 	lsl	r3, r3, #1
 1011b30:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b34:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011b38:	e1a03083 	lsl	r3, r3, #1
 1011b3c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b40:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1011b44:	e1a03083 	lsl	r3, r3, #1
 1011b48:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1011b4c:	12233031 	eorne	r3, r3, #49	; 0x31
		g_spi_state.crc_table[i] = k;
 1011b50:	e5e13001 	strb	r3, [r1, #1]!
	for(i = 0; i < 256; i++) {
 1011b54:	e1500001 	cmp	r0, r1
 1011b58:	012fff1e 	bxeq	lr
			if((k <<= 1) & 0x100) {
 1011b5c:	e3120c01 	tst	r2, #256	; 0x100
 1011b60:	e1a03002 	mov	r3, r2
				k ^= SPI_CRC8_POLY;
 1011b64:	12223031 	eorne	r3, r2, #49	; 0x31
 1011b68:	e2822002 	add	r2, r2, #2
 1011b6c:	eaffffe2 	b	1011afc <spi_crc_lut_gen+0x10>
 1011b70:	0107f36c 	.word	0x0107f36c

01011b74 <spi_command_lut_gen>:
	for(i = 0; i < SPI_COMMAND_TOTAL_COUNT; i++) {
 1011b74:	e59f30bc 	ldr	r3, [pc, #188]	; 1011c38 <spi_command_lut_gen+0xc4>
		memset(g_spi_command_lut[i].short_name, 0, SPI_COMMAND_SHORT_NAME_MAX + 1);
 1011b78:	e3a02000 	mov	r2, #0
{
 1011b7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1011b80:	e2831a02 	add	r1, r3, #8192	; 0x2000
		memset(g_spi_command_lut[i].short_name, 0, SPI_COMMAND_SHORT_NAME_MAX + 1);
 1011b84:	e5832000 	str	r2, [r3]
 1011b88:	e2833020 	add	r3, r3, #32
 1011b8c:	e503201c 	str	r2, [r3, #-28]	; 0xffffffe4
 1011b90:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
 1011b94:	e5032014 	str	r2, [r3, #-20]	; 0xffffffec
		g_spi_command_lut[i].valid = 0;
 1011b98:	e5432021 	strb	r2, [r3, #-33]	; 0xffffffdf
	for(i = 0; i < SPI_COMMAND_TOTAL_COUNT; i++) {
 1011b9c:	e1510003 	cmp	r1, r3
 1011ba0:	1afffff7 	bne	1011b84 <spi_command_lut_gen+0x10>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011ba4:	e3074878 	movw	r4, #30840	; 0x7878
 1011ba8:	e3404102 	movt	r4, #258	; 0x102
 1011bac:	e5d45000 	ldrb	r5, [r4]
 1011bb0:	e35500ff 	cmp	r5, #255	; 0xff
 1011bb4:	0a00001c 	beq	1011c2c <spi_command_lut_gen+0xb8>
 1011bb8:	e30f6f10 	movw	r6, #65296	; 0xff10
 1011bbc:	e3a07000 	mov	r7, #0
 1011bc0:	e3406107 	movt	r6, #263	; 0x107
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 1011bc4:	e3a09020 	mov	r9, #32
 1011bc8:	e3a08001 	mov	r8, #1
 1011bcc:	e1008589 	smlabb	r0, r9, r5, r8
 1011bd0:	e5941004 	ldr	r1, [r4, #4]
 1011bd4:	e3a0200f 	mov	r2, #15
		added++;
 1011bd8:	e2877001 	add	r7, r7, #1
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 1011bdc:	e0860000 	add	r0, r6, r0
 1011be0:	fa00333d 	blx	101e8dc <strncpy>
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 1011be4:	e0863285 	add	r3, r6, r5, lsl #5
 1011be8:	e5940008 	ldr	r0, [r4, #8]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 1011bec:	e5941010 	ldr	r1, [r4, #16]
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1011bf0:	e5d4200c 	ldrb	r2, [r4, #12]
		g_spi_command_lut[spi_cmd->cmd_id].valid = 1;
 1011bf4:	e7c68285 	strb	r8, [r6, r5, lsl #5]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011bf8:	e5f45014 	ldrb	r5, [r4, #20]!
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 1011bfc:	e5830014 	str	r0, [r3, #20]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 1011c00:	e583101c 	str	r1, [r3, #28]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011c04:	e35500ff 	cmp	r5, #255	; 0xff
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1011c08:	e5c32018 	strb	r2, [r3, #24]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011c0c:	1affffee 	bne	1011bcc <spi_command_lut_gen+0x58>
 1011c10:	e2673c01 	rsb	r3, r7, #256	; 0x100
	d_printf(D_INFO, "spi: %d LUT entries filled, %d free", added, SPI_COMMAND_TOTAL_COUNT - added);
 1011c14:	e30a1d54 	movw	r1, #44372	; 0xad54
 1011c18:	e1a02007 	mov	r2, r7
 1011c1c:	e3401106 	movt	r1, #262	; 0x106
 1011c20:	e3a00002 	mov	r0, #2
}
 1011c24:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "spi: %d LUT entries filled, %d free", added, SPI_COMMAND_TOTAL_COUNT - added);
 1011c28:	eafff5ce 	b	100f368 <d_printf>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1011c2c:	e3a03c01 	mov	r3, #256	; 0x100
 1011c30:	e3a07000 	mov	r7, #0
 1011c34:	eafffff6 	b	1011c14 <spi_command_lut_gen+0xa0>
 1011c38:	0107ff11 	.word	0x0107ff11

01011c3c <spi_transmit_packet_nonblock>:
	D_ASSERT(bytes > 0);
 1011c3c:	e3510000 	cmp	r1, #0
{
 1011c40:	e92d4010 	push	{r4, lr}
 1011c44:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(bytes > 0);
 1011c48:	da000043 	ble	1011d5c <spi_transmit_packet_nonblock+0x120>
	if(SPI_IS_TX_OVERWATER()) {
 1011c4c:	e30fc348 	movw	ip, #62280	; 0xf348
 1011c50:	e340c107 	movt	ip, #263	; 0x107
 1011c54:	e59c412c 	ldr	r4, [ip, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011c58:	e5943004 	ldr	r3, [r4, #4]
 1011c5c:	e2133004 	ands	r3, r3, #4
 1011c60:	0a000037 	beq	1011d44 <spi_transmit_packet_nonblock+0x108>
	if(bytes < (SPI_RESPONSE_PACK_SIZE - 1)) {
 1011c64:	e351003d 	cmp	r1, #61	; 0x3d
 1011c68:	ca000018 	bgt	1011cd0 <spi_transmit_packet_nonblock+0x94>
 1011c6c:	e5943004 	ldr	r3, [r4, #4]
		return _spi_transmit_fill_fifo(pkt, bytes);
 1011c70:	e6ef2071 	uxtb	r2, r1
inline int _spi_transmit_fill_fifo(uint8_t *pkt, uint8_t bytes)
{
	int bytes_written = 0, i;

	do {
		if(!SPI_IS_TX_FULL()) {
 1011c74:	e3130008 	tst	r3, #8
 1011c78:	1a000031 	bne	1011d44 <spi_transmit_packet_nonblock+0x108>
			bytes_written++;
			bytes--;
		} else {
			break;
		}
	} while(bytes > 0);
 1011c7c:	e3520001 	cmp	r2, #1
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 1011c80:	e1a03000 	mov	r3, r0
 1011c84:	12422002 	subne	r2, r2, #2
 1011c88:	e4d31001 	ldrb	r1, [r3], #1
	*LocalAddr = Value;
 1011c8c:	16ef2072 	uxtbne	r2, r2
			bytes_written++;
 1011c90:	13a00001 	movne	r0, #1
 1011c94:	e584101c 	str	r1, [r4, #28]
			bytes--;
 1011c98:	12822002 	addne	r2, r2, #2
	} while(bytes > 0);
 1011c9c:	1a000005 	bne	1011cb8 <spi_transmit_packet_nonblock+0x7c>
 1011ca0:	ea00002a 	b	1011d50 <spi_transmit_packet_nonblock+0x114>
			bytes_written++;
 1011ca4:	e2800001 	add	r0, r0, #1
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 1011ca8:	e4d3e001 	ldrb	lr, [r3], #1
	} while(bytes > 0);
 1011cac:	e1500002 	cmp	r0, r2
 1011cb0:	e581e01c 	str	lr, [r1, #28]
 1011cb4:	0a000025 	beq	1011d50 <spi_transmit_packet_nonblock+0x114>
 1011cb8:	e59c112c 	ldr	r1, [ip, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011cbc:	e591e004 	ldr	lr, [r1, #4]
		if(!SPI_IS_TX_FULL()) {
 1011cc0:	e31e0008 	tst	lr, #8
 1011cc4:	0afffff6 	beq	1011ca4 <spi_transmit_packet_nonblock+0x68>
}
 1011cc8:	e28dd008 	add	sp, sp, #8
 1011ccc:	e8bd8010 	pop	{r4, pc}
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 1011cd0:	e1a0e000 	mov	lr, r0
 1011cd4:	e2803001 	add	r3, r0, #1
 1011cd8:	e4de203e 	ldrb	r2, [lr], #62	; 0x3e
	*LocalAddr = Value;
 1011cdc:	e584201c 	str	r2, [r4, #28]
 1011ce0:	e4d30001 	ldrb	r0, [r3], #1
 1011ce4:	e59c212c 	ldr	r2, [ip, #300]	; 0x12c
		for(i = 0; i < (SPI_RESPONSE_PACK_SIZE - 1); i++) {
 1011ce8:	e15e0003 	cmp	lr, r3
 1011cec:	e582001c 	str	r0, [r2, #28]
 1011cf0:	1afffffa 	bne	1011ce0 <spi_transmit_packet_nonblock+0xa4>
		if(bytes > 0) {
 1011cf4:	e351003e 	cmp	r1, #62	; 0x3e
		bytes_written += (SPI_RESPONSE_PACK_SIZE - 1);
 1011cf8:	03a0003e 	moveq	r0, #62	; 0x3e
		if(bytes > 0) {
 1011cfc:	0afffff1 	beq	1011cc8 <spi_transmit_packet_nonblock+0x8c>
	int bytes_written = 0, i;
 1011d00:	e241303f 	sub	r3, r1, #63	; 0x3f
 1011d04:	e3a00000 	mov	r0, #0
 1011d08:	e6ef3073 	uxtb	r3, r3
 1011d0c:	e2833001 	add	r3, r3, #1
 1011d10:	ea000004 	b	1011d28 <spi_transmit_packet_nonblock+0xec>
			bytes_written++;
 1011d14:	e2800001 	add	r0, r0, #1
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 1011d18:	e4de1001 	ldrb	r1, [lr], #1
	} while(bytes > 0);
 1011d1c:	e1500003 	cmp	r0, r3
 1011d20:	e582101c 	str	r1, [r2, #28]
 1011d24:	0a000003 	beq	1011d38 <spi_transmit_packet_nonblock+0xfc>
		if(!SPI_IS_TX_FULL()) {
 1011d28:	e59c212c 	ldr	r2, [ip, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011d2c:	e5921004 	ldr	r1, [r2, #4]
 1011d30:	e3110008 	tst	r1, #8
 1011d34:	0afffff6 	beq	1011d14 <spi_transmit_packet_nonblock+0xd8>
			bytes_written += _spi_transmit_fill_fifo(pkt, bytes);
 1011d38:	e280003e 	add	r0, r0, #62	; 0x3e
}
 1011d3c:	e28dd008 	add	sp, sp, #8
 1011d40:	e8bd8010 	pop	{r4, pc}
	int bytes_written = 0, i;
 1011d44:	e3a00000 	mov	r0, #0
 1011d48:	e28dd008 	add	sp, sp, #8
 1011d4c:	e8bd8010 	pop	{r4, pc}
			bytes_written++;
 1011d50:	e1a00002 	mov	r0, r2
 1011d54:	e28dd008 	add	sp, sp, #8
 1011d58:	e8bd8010 	pop	{r4, pc}
	D_ASSERT(bytes > 0);
 1011d5c:	e300019b 	movw	r0, #411	; 0x19b
 1011d60:	e30a3dcc 	movw	r3, #44492	; 0xadcc
 1011d64:	e30a2ddc 	movw	r2, #44508	; 0xaddc
 1011d68:	e308149c 	movw	r1, #33948	; 0x849c
 1011d6c:	e58d0000 	str	r0, [sp]
 1011d70:	e3403106 	movt	r3, #262	; 0x106
 1011d74:	e3a00004 	mov	r0, #4
 1011d78:	e3402106 	movt	r2, #262	; 0x106
 1011d7c:	e3401106 	movt	r1, #262	; 0x106
 1011d80:	ebfff578 	bl	100f368 <d_printf>
 1011d84:	e3e00062 	mvn	r0, #98	; 0x62
 1011d88:	fa0027a8 	blx	101bc30 <exit>

01011d8c <spi_command_find_free_slot>:
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1011d8c:	e30f3348 	movw	r3, #62280	; 0xf348
 1011d90:	e3403107 	movt	r3, #263	; 0x107
 1011d94:	e59321c8 	ldr	r2, [r3, #456]	; 0x1c8
		if(free_mask != 0x00000000) {
 1011d98:	e3520000 	cmp	r2, #0
 1011d9c:	1a000005 	bne	1011db8 <spi_command_find_free_slot+0x2c>
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1011da0:	e59321cc 	ldr	r2, [r3, #460]	; 0x1cc
		if(free_mask != 0x00000000) {
 1011da4:	e3520000 	cmp	r2, #0
 1011da8:	13a00020 	movne	r0, #32
 1011dac:	1a000002 	bne	1011dbc <spi_command_find_free_slot+0x30>
		}
	}

	return -1;
 1011db0:	e3e00000 	mvn	r0, #0
}
 1011db4:	e12fff1e 	bx	lr
		if(free_mask != 0x00000000) {
 1011db8:	e3a00000 	mov	r0, #0
			bit = __builtin_ffs(free_mask);
 1011dbc:	e3520000 	cmp	r2, #0
 1011dc0:	e6ff2f32 	rbit	r2, r2
 1011dc4:	e16f2f12 	clz	r2, r2
 1011dc8:	03e02000 	mvneq	r2, #0
			return (i * 32) + bit - 1;
 1011dcc:	e0800002 	add	r0, r0, r2
 1011dd0:	e12fff1e 	bx	lr

01011dd4 <spi_command_count_allocated>:

/*
 * Count the number of commands currently allocated.
 */
int spi_command_count_allocated()
{
 1011dd4:	e92d4070 	push	{r4, r5, r6, lr}
	uint32_t free_mask;
	unsigned int i;
	int count = 0;

	for(i = 0; i < SPI_QUEUE_ALLOC_BITMASK_SIZE; i++) {
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1011dd8:	e30f4348 	movw	r4, #62280	; 0xf348
 1011ddc:	e3404107 	movt	r4, #263	; 0x107
		count += __builtin_popcount(free_mask);
 1011de0:	e59401c8 	ldr	r0, [r4, #456]	; 0x1c8
 1011de4:	fa002703 	blx	101b9f8 <__popcountsi2>
 1011de8:	e1a05000 	mov	r5, r0
 1011dec:	e59401cc 	ldr	r0, [r4, #460]	; 0x1cc
 1011df0:	fa002700 	blx	101b9f8 <__popcountsi2>
 1011df4:	e0850000 	add	r0, r5, r0
	}

	return SPI_QUEUE_ALLOC_MAX - count;
}
 1011df8:	e260003f 	rsb	r0, r0, #63	; 0x3f
 1011dfc:	e8bd8070 	pop	{r4, r5, r6, pc}

01011e00 <spi_command_pack_response_simple>:
 * Pack a response for a command using a memory copy.  This isn't suitable for
 * large commands as it has relatively high overheads in the form of a memcpy
 * (in case the response was on the stack beforehand.)
 */
int spi_command_pack_response_simple(struct spi_command_alloc_t *cmd, void *resp, int respsz)
{
 1011e00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1011e04:	e1a04000 	mov	r4, r0
	int res;

	cmd->resp_data = malloc(respsz);  // Malloc the response buffer.  This'll be freed by the command tick once the response is done.
 1011e08:	e1a00002 	mov	r0, r2
{
 1011e0c:	e1a05002 	mov	r5, r2
 1011e10:	e1a07001 	mov	r7, r1
	cmd->resp_data = malloc(respsz);  // Malloc the response buffer.  This'll be freed by the command tick once the response is done.
 1011e14:	fa002a67 	blx	101c7b8 <malloc>

	if(cmd->resp_data == NULL) {
 1011e18:	e3500000 	cmp	r0, #0
	cmd->resp_data = malloc(respsz);  // Malloc the response buffer.  This'll be freed by the command tick once the response is done.
 1011e1c:	e5840020 	str	r0, [r4, #32]
	if(cmd->resp_data == NULL) {
 1011e20:	0a00000b 	beq	1011e54 <spi_command_pack_response_simple+0x54>
		cmd->resp_error = 1;
		GLOBAL_IRQ_ENABLE();

		res = SPIRET_MEM_ERROR;
	} else {
		memcpy(cmd->resp_data, resp, respsz);
 1011e24:	e1a01007 	mov	r1, r7
 1011e28:	e1a02005 	mov	r2, r5
 1011e2c:	eb002cf3 	bl	101d200 <memcpy>

		//d_printf(D_INFO, "resp_simple ptr=0x%08x src=0x%08x resp_size=%d", cmd->resp_data, resp, respsz);

		GLOBAL_IRQ_DISABLE();
 1011e30:	f10c0080 	cpsid	i
		cmd->resp_ready = 1;
 1011e34:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
		cmd->resp_size = respsz;
 1011e38:	e584501c 	str	r5, [r4, #28]
		cmd->resp_ready = 1;
 1011e3c:	e3c3300d 	bic	r3, r3, #13
 1011e40:	e3833009 	orr	r3, r3, #9
 1011e44:	e5c43024 	strb	r3, [r4, #36]	; 0x24
		cmd->resp_error = 0;
		cmd->free_resp_reqd = 1;
		GLOBAL_IRQ_ENABLE();
 1011e48:	f1080080 	cpsie	i

		res = SPIRET_OK;
 1011e4c:	e3a00000 	mov	r0, #0
	}

	return res;
}
 1011e50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "spi: error allocating %d bytes for command response - response failed", respsz);
 1011e54:	e30a1de8 	movw	r1, #44520	; 0xade8
 1011e58:	e1a06000 	mov	r6, r0
 1011e5c:	e1a02005 	mov	r2, r5
 1011e60:	e3401106 	movt	r1, #262	; 0x106
 1011e64:	e3a00004 	mov	r0, #4
 1011e68:	ebfff53e 	bl	100f368 <d_printf>
		GLOBAL_IRQ_DISABLE();
 1011e6c:	f10c0080 	cpsid	i
		cmd->resp_ready = 1;
 1011e70:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
		cmd->resp_size = 0;
 1011e74:	e584601c 	str	r6, [r4, #28]
		cmd->resp_ready = 1;
 1011e78:	e3c33005 	bic	r3, r3, #5
 1011e7c:	e3833005 	orr	r3, r3, #5
 1011e80:	e5c43024 	strb	r3, [r4, #36]	; 0x24
		GLOBAL_IRQ_ENABLE();
 1011e84:	f1080080 	cpsie	i
		res = SPIRET_MEM_ERROR;
 1011e88:	e3e00000 	mvn	r0, #0
 1011e8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01011e90 <spi_command_pack_response_pre_alloc>:
 * Pack a response for a command using a pointer copy.  The buffer must have been
 * allocated using malloc or friends, as it will be later freed using free().
 */
void spi_command_pack_response_pre_alloc(struct spi_command_alloc_t *cmd, void *resp, int respsz)
{
	D_ASSERT(resp != NULL);
 1011e90:	e3510000 	cmp	r1, #0
 1011e94:	0a000008 	beq	1011ebc <spi_command_pack_response_pre_alloc+0x2c>

	//d_printf(D_INFO, "resp_pre_alloc ptr=0x%08x resp_size=%d", resp, respsz);

	GLOBAL_IRQ_DISABLE();
 1011e98:	f10c0080 	cpsid	i
	cmd->resp_data = resp;
	cmd->resp_size = respsz;
	cmd->resp_ready = 1;
 1011e9c:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
	cmd->resp_data = resp;
 1011ea0:	e5801020 	str	r1, [r0, #32]
	cmd->resp_size = respsz;
 1011ea4:	e580201c 	str	r2, [r0, #28]
	cmd->resp_ready = 1;
 1011ea8:	e3c3300d 	bic	r3, r3, #13
 1011eac:	e3833009 	orr	r3, r3, #9
 1011eb0:	e5c03024 	strb	r3, [r0, #36]	; 0x24
	cmd->resp_error = 0;
	cmd->free_resp_reqd = 1;
	GLOBAL_IRQ_ENABLE();
 1011eb4:	f1080080 	cpsie	i
 1011eb8:	e12fff1e 	bx	lr
{
 1011ebc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(resp != NULL);
 1011ec0:	e3000212 	movw	r0, #530	; 0x212
{
 1011ec4:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(resp != NULL);
 1011ec8:	e30a3dcc 	movw	r3, #44492	; 0xadcc
 1011ecc:	e30a2e30 	movw	r2, #44592	; 0xae30
 1011ed0:	e308149c 	movw	r1, #33948	; 0x849c
 1011ed4:	e58d0000 	str	r0, [sp]
 1011ed8:	e3403106 	movt	r3, #262	; 0x106
 1011edc:	e3a00004 	mov	r0, #4
 1011ee0:	e3402106 	movt	r2, #262	; 0x106
 1011ee4:	e3401106 	movt	r1, #262	; 0x106
 1011ee8:	ebfff51e 	bl	100f368 <d_printf>
 1011eec:	e3e00062 	mvn	r0, #98	; 0x62
 1011ef0:	fa00274e 	blx	101bc30 <exit>

01011ef4 <spi_command_tick>:
/*
 * Process any commands in the command buffer.  Commands that are completed are popped
 * from the buffer.
 */
int spi_command_tick()
{
 1011ef4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int tx_bytes, sent_bytes, res, i;
	struct spi_command_alloc_t *cmd;
	struct spi_command_alloc_t *proc_cmd = g_spi_state.proc_cmd; // Shorthand
 1011ef8:	e30f4348 	movw	r4, #62280	; 0xf348
 1011efc:	e3404107 	movt	r4, #263	; 0x107
{
 1011f00:	e24dd014 	sub	sp, sp, #20
	static int iter = 0;
	int dqs = deque_size(g_spi_state.command_dq);
 1011f04:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
	struct spi_command_alloc_t *proc_cmd = g_spi_state.proc_cmd; // Shorthand
 1011f08:	e5946bbc 	ldr	r6, [r4, #3004]	; 0xbbc
	int dqs = deque_size(g_spi_state.command_dq);
 1011f0c:	ebffc2da 	bl	1002a7c <deque_size>
			iter = 0;
		}
	}
#endif

	if(d_getkey() == 'd') {
 1011f10:	ebfff595 	bl	100f56c <d_getkey>
 1011f14:	e3500064 	cmp	r0, #100	; 0x64
 1011f18:	0a00000a 	beq	1011f48 <spi_command_tick+0x54>
		d_waitkey();
	}

	res = SPIENGINE_IDLE;

	GLOBAL_IRQ_DISABLE();
 1011f1c:	f10c0080 	cpsid	i

	switch(g_spi_state.proc_state) {
 1011f20:	e5945bc0 	ldr	r5, [r4, #3008]	; 0xbc0
 1011f24:	e2453001 	sub	r3, r5, #1
 1011f28:	e3530004 	cmp	r3, #4
 1011f2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1011f30:	ea0001cc 	b	1012668 <spi_command_tick+0x774>
 1011f34:	01011fd8 	.word	0x01011fd8
 1011f38:	0101203c 	.word	0x0101203c
 1011f3c:	01012104 	.word	0x01012104
 1011f40:	010124d8 	.word	0x010124d8
 1011f44:	01011f60 	.word	0x01011f60
		d_printf(D_RAW, "\r\n\r\npause, press key to resume\r\n\r\n");
 1011f48:	e30a1e40 	movw	r1, #44608	; 0xae40
 1011f4c:	e3a00000 	mov	r0, #0
 1011f50:	e3401106 	movt	r1, #262	; 0x106
 1011f54:	ebfff503 	bl	100f368 <d_printf>
		d_waitkey();
 1011f58:	ebfff578 	bl	100f540 <d_waitkey>
 1011f5c:	eaffffee 	b	1011f1c <spi_command_tick+0x28>
		case SPIPROC_STATE_OUTPUT_DONE_WAIT:
			/*
			 * We have sent the command.  Free the slot, mark the command as done and
			 * wait for the FIFO to be empty.
			 */
			spi_command_mark_slot_free(proc_cmd->alloc_idx);
 1011f60:	e5963000 	ldr	r3, [r6]
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1011f64:	e3a07001 	mov	r7, #1
 * Free the buffer associated with a command and deallocate it.
 */
inline void spi_command_cleanup(struct spi_command_alloc_t *cmd)
{
	D_ASSERT(cmd != NULL);
	D_ASSERT(cmd->resp_data != NULL);
 1011f68:	e5960020 	ldr	r0, [r6, #32]
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1011f6c:	e203101f 	and	r1, r3, #31
 1011f70:	e1a032a3 	lsr	r3, r3, #5
	D_ASSERT(cmd->resp_data != NULL);
 1011f74:	e3500000 	cmp	r0, #0
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1011f78:	e2833072 	add	r3, r3, #114	; 0x72
 1011f7c:	e7942103 	ldr	r2, [r4, r3, lsl #2]
 1011f80:	e1822117 	orr	r2, r2, r7, lsl r1
 1011f84:	e7842103 	str	r2, [r4, r3, lsl #2]
	D_ASSERT(cmd->resp_data != NULL);
 1011f88:	0a0001ae 	beq	1012648 <spi_command_tick+0x754>

	cmd->resp_done = 0;
	cmd->resp_error = 0;
	cmd->resp_ready = 0;
 1011f8c:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24

			/*
			 * Tell outer task that we're still busy, while we wait for command to complete and
			 * go back to the idle state.
			 */
			res = SPIENGINE_WORKING;
 1011f90:	e3a05002 	mov	r5, #2
 1011f94:	e3c33007 	bic	r3, r3, #7
 1011f98:	e5c63024 	strb	r3, [r6, #36]	; 0x24
	//d_printf(D_INFO, "resp_free 0x%08x", cmd->resp_data);
	free(cmd->resp_data);
 1011f9c:	fa002a09 	blx	101c7c8 <free>
			g_spi_state.commands_queued--;
 1011fa0:	e5942ba8 	ldr	r2, [r4, #2984]	; 0xba8
	cmd->resp_data = NULL;
 1011fa4:	e3a01000 	mov	r1, #0
			g_spi_state.resp_done = 1;
 1011fa8:	e5d43000 	ldrb	r3, [r4]
 1011fac:	e5861020 	str	r1, [r6, #32]
			g_spi_state.commands_queued--;
 1011fb0:	e2422001 	sub	r2, r2, #1
			g_spi_state.proc_cmd = NULL;
 1011fb4:	e5841bbc 	str	r1, [r4, #3004]	; 0xbbc
			g_spi_state.resp_done = 1;
 1011fb8:	e1833005 	orr	r3, r3, r5
			g_spi_state.commands_queued--;
 1011fbc:	e5842ba8 	str	r2, [r4, #2984]	; 0xba8
			g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 1011fc0:	e5847bc0 	str	r7, [r4, #3008]	; 0xbc0
			g_spi_state.resp_done = 1;
 1011fc4:	e5c43000 	strb	r3, [r4]
			break;
	}

	GLOBAL_IRQ_ENABLE();
 1011fc8:	f1080080 	cpsie	i

	return res;
}
 1011fcc:	e1a00005 	mov	r0, r5
 1011fd0:	e28dd014 	add	sp, sp, #20
 1011fd4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		count += __builtin_popcount(free_mask);
 1011fd8:	e59401c8 	ldr	r0, [r4, #456]	; 0x1c8
 1011fdc:	fa002685 	blx	101b9f8 <__popcountsi2>
 1011fe0:	e1a06000 	mov	r6, r0
 1011fe4:	e59401cc 	ldr	r0, [r4, #460]	; 0x1cc
 1011fe8:	fa002682 	blx	101b9f8 <__popcountsi2>
 1011fec:	e0800006 	add	r0, r0, r6
	return SPI_QUEUE_ALLOC_MAX - count;
 1011ff0:	e260003f 	rsb	r0, r0, #63	; 0x3f
			if(spi_command_count_allocated() > 0) {
 1011ff4:	e3500000 	cmp	r0, #0
 1011ff8:	dafffff2 	ble	1011fc8 <spi_command_tick+0xd4>
				if(deque_size(g_spi_state.command_dq) > 0) {
 1011ffc:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
 1012000:	ebffc29d 	bl	1002a7c <deque_size>
 1012004:	e3500000 	cmp	r0, #0
 1012008:	0affffee 	beq	1011fc8 <spi_command_tick+0xd4>
					deque_remove_first(g_spi_state.command_dq, (void*)&cmd);
 101200c:	e28d100c 	add	r1, sp, #12
 1012010:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
 1012014:	ebffc109 	bl	1002440 <deque_remove_first>
					g_spi_state.resp_done = 0;
 1012018:	e5d43000 	ldrb	r3, [r4]
					g_spi_state.proc_state = SPIPROC_STATE_EXECUTE;
 101201c:	e3a02002 	mov	r2, #2
					g_spi_state.proc_cmd = cmd;
 1012020:	e59d100c 	ldr	r1, [sp, #12]
					res = SPIENGINE_WORKING;
 1012024:	e1a05002 	mov	r5, r2
					g_spi_state.proc_state = SPIPROC_STATE_EXECUTE;
 1012028:	e5842bc0 	str	r2, [r4, #3008]	; 0xbc0
					g_spi_state.resp_done = 0;
 101202c:	e7c1309f 	bfc	r3, #1, #1
					g_spi_state.proc_cmd = cmd;
 1012030:	e5841bbc 	str	r1, [r4, #3004]	; 0xbbc
					g_spi_state.resp_done = 0;
 1012034:	e5c43000 	strb	r3, [r4]
					res = SPIENGINE_WORKING;
 1012038:	eaffffe2 	b	1011fc8 <spi_command_tick+0xd4>
			if(g_spi_command_lut[proc_cmd->cmd].cmd_processor != NULL) {
 101203c:	e5d62008 	ldrb	r2, [r6, #8]
 1012040:	e30f3f10 	movw	r3, #65296	; 0xff10
 1012044:	e3403107 	movt	r3, #263	; 0x107
 1012048:	e0833282 	add	r3, r3, r2, lsl #5
 101204c:	e593301c 	ldr	r3, [r3, #28]
 1012050:	e3530000 	cmp	r3, #0
 1012054:	0a000001 	beq	1012060 <spi_command_tick+0x16c>
				g_spi_command_lut[proc_cmd->cmd].cmd_processor(proc_cmd);
 1012058:	e1a00006 	mov	r0, r6
 101205c:	e12fff33 	blx	r3
			if(proc_cmd->resp_ready && !proc_cmd->resp_error) {
 1012060:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24
 1012064:	e2032005 	and	r2, r3, #5
 1012068:	e3520001 	cmp	r2, #1
 101206c:	0a000161 	beq	10125f8 <spi_command_tick+0x704>
				if(proc_cmd->resp_error) {
 1012070:	e3130004 	tst	r3, #4
 1012074:	e5962000 	ldr	r2, [r6]
 1012078:	1a000158 	bne	10125e0 <spi_command_tick+0x6ec>
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 101207c:	e1a032a2 	lsr	r3, r2, #5
				if(proc_cmd->resp_data != NULL) {
 1012080:	e5960020 	ldr	r0, [r6, #32]
 1012084:	e202201f 	and	r2, r2, #31
 1012088:	e2833072 	add	r3, r3, #114	; 0x72
 101208c:	e3a0c001 	mov	ip, #1
 1012090:	e7941103 	ldr	r1, [r4, r3, lsl #2]
 1012094:	e3500000 	cmp	r0, #0
 1012098:	e181221c 	orr	r2, r1, ip, lsl r2
 101209c:	e7842103 	str	r2, [r4, r3, lsl #2]
 10120a0:	0a000005 	beq	10120bc <spi_command_tick+0x1c8>
	cmd->resp_error = 0;
 10120a4:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24
 10120a8:	e7c2311f 	bfc	r3, #2, #1
 10120ac:	e5c63024 	strb	r3, [r6, #36]	; 0x24
	free(cmd->resp_data);
 10120b0:	fa0029c4 	blx	101c7c8 <free>
	cmd->resp_data = NULL;
 10120b4:	e3a03000 	mov	r3, #0
 10120b8:	e5863020 	str	r3, [r6, #32]
				proc_cmd->resp_ready = 0;
 10120bc:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24
				g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 10120c0:	e3a01001 	mov	r1, #1
				g_spi_state.resp_done = 1; // Tell SPI ISR state machine that we're done
 10120c4:	e5d42000 	ldrb	r2, [r4]
				g_spi_state.proc_cmd = NULL;
 10120c8:	e3a00000 	mov	r0, #0
	res = SPIENGINE_IDLE;
 10120cc:	e1a05001 	mov	r5, r1
				proc_cmd->resp_ready = 0;
 10120d0:	e3c33003 	bic	r3, r3, #3
 10120d4:	e5c63024 	strb	r3, [r6, #36]	; 0x24
				g_spi_state.resp_done = 1; // Tell SPI ISR state machine that we're done
 10120d8:	e3822002 	orr	r2, r2, #2
				g_spi_state.commands_queued--;
 10120dc:	e5943ba8 	ldr	r3, [r4, #2984]	; 0xba8
				g_spi_state.resp_done = 1; // Tell SPI ISR state machine that we're done
 10120e0:	e5c42000 	strb	r2, [r4]
				g_spi_state.proc_cmd = NULL;
 10120e4:	e5840bbc 	str	r0, [r4, #3004]	; 0xbbc
				g_spi_state.commands_queued--;
 10120e8:	e2433001 	sub	r3, r3, #1
				g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 10120ec:	e5841bc0 	str	r1, [r4, #3008]	; 0xbc0
				g_spi_state.commands_queued--;
 10120f0:	e5843ba8 	str	r3, [r4, #2984]	; 0xba8
	GLOBAL_IRQ_ENABLE();
 10120f4:	f1080080 	cpsie	i
}
 10120f8:	e1a00005 	mov	r0, r5
 10120fc:	e28dd014 	add	sp, sp, #20
 1012100:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			D_ASSERT(g_spi_state.resp_bytes <= SPI_RESPONSE_2BYTE_MAX);
 1012104:	e3003bb4 	movw	r3, #2996	; 0xbb4
 1012108:	e19430b3 	ldrh	r3, [r4, r3]
 101210c:	e3530c7f 	cmp	r3, #32512	; 0x7f00
 1012110:	2a000140 	bcs	1012618 <spi_command_tick+0x724>
			SPI_SCUGIC_DISABLE();
 1012114:	e3050b80 	movw	r0, #23424	; 0x5b80
 1012118:	e3a0103a 	mov	r1, #58	; 0x3a
 101211c:	e3400107 	movt	r0, #263	; 0x107
 1012120:	eb001647 	bl	1017a44 <XScuGic_Disable>
			if(SPI_IS_TX_UNDERFLOW()) {
 1012124:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
 1012128:	e5932004 	ldr	r2, [r3, #4]
 101212c:	e2831004 	add	r1, r3, #4
 1012130:	e3120040 	tst	r2, #64	; 0x40
 1012134:	0a00009a 	beq	10123a4 <spi_command_tick+0x4b0>
 1012138:	e5931004 	ldr	r1, [r3, #4]
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 101213c:	e5942158 	ldr	r2, [r4, #344]	; 0x158
	if(!SPI_IS_TX_FULL()) {
 1012140:	e2111008 	ands	r1, r1, #8
 1012144:	1a000006 	bne	1012164 <spi_command_tick+0x270>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012148:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101214c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012150:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1012154:	e5913004 	ldr	r3, [r1, #4]
 1012158:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101215c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012160:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1012164:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012168:	e2111008 	ands	r1, r1, #8
 101216c:	1a000006 	bne	101218c <spi_command_tick+0x298>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012170:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1012174:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012178:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101217c:	e5913004 	ldr	r3, [r1, #4]
 1012180:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012184:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012188:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101218c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012190:	e2111008 	ands	r1, r1, #8
 1012194:	1a000006 	bne	10121b4 <spi_command_tick+0x2c0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012198:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101219c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10121a0:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 10121a4:	e5913004 	ldr	r3, [r1, #4]
 10121a8:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10121ac:	e5813004 	str	r3, [r1, #4]
		return 1;
 10121b0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10121b4:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10121b8:	e2111008 	ands	r1, r1, #8
 10121bc:	1a000006 	bne	10121dc <spi_command_tick+0x2e8>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10121c0:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 10121c4:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10121c8:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 10121cc:	e5913004 	ldr	r3, [r1, #4]
 10121d0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10121d4:	e5813004 	str	r3, [r1, #4]
		return 1;
 10121d8:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10121dc:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10121e0:	e2111008 	ands	r1, r1, #8
 10121e4:	1a000006 	bne	1012204 <spi_command_tick+0x310>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10121e8:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 10121ec:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10121f0:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 10121f4:	e5913004 	ldr	r3, [r1, #4]
 10121f8:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10121fc:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012200:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1012204:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012208:	e2111008 	ands	r1, r1, #8
 101220c:	1a000006 	bne	101222c <spi_command_tick+0x338>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012210:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1012214:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012218:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101221c:	e5913004 	ldr	r3, [r1, #4]
 1012220:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012224:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012228:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101222c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012230:	e2111008 	ands	r1, r1, #8
 1012234:	1a000006 	bne	1012254 <spi_command_tick+0x360>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012238:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101223c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012240:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1012244:	e5913004 	ldr	r3, [r1, #4]
 1012248:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101224c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012250:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1012254:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012258:	e2111008 	ands	r1, r1, #8
 101225c:	1a000006 	bne	101227c <spi_command_tick+0x388>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012260:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1012264:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012268:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101226c:	e5913004 	ldr	r3, [r1, #4]
 1012270:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012274:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012278:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101227c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012280:	e2111008 	ands	r1, r1, #8
 1012284:	1a000006 	bne	10122a4 <spi_command_tick+0x3b0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012288:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101228c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012290:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1012294:	e5913004 	ldr	r3, [r1, #4]
 1012298:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101229c:	e5813004 	str	r3, [r1, #4]
		return 1;
 10122a0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10122a4:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10122a8:	e2111008 	ands	r1, r1, #8
 10122ac:	1a000006 	bne	10122cc <spi_command_tick+0x3d8>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10122b0:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 10122b4:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10122b8:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 10122bc:	e5913004 	ldr	r3, [r1, #4]
 10122c0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10122c4:	e5813004 	str	r3, [r1, #4]
		return 1;
 10122c8:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10122cc:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10122d0:	e2111008 	ands	r1, r1, #8
 10122d4:	1a000006 	bne	10122f4 <spi_command_tick+0x400>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10122d8:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 10122dc:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10122e0:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 10122e4:	e5913004 	ldr	r3, [r1, #4]
 10122e8:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10122ec:	e5813004 	str	r3, [r1, #4]
		return 1;
 10122f0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10122f4:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10122f8:	e2111008 	ands	r1, r1, #8
 10122fc:	1a000006 	bne	101231c <spi_command_tick+0x428>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012300:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1012304:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012308:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101230c:	e5913004 	ldr	r3, [r1, #4]
 1012310:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012314:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012318:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101231c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012320:	e2111008 	ands	r1, r1, #8
 1012324:	1a000006 	bne	1012344 <spi_command_tick+0x450>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012328:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101232c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012330:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1012334:	e5913004 	ldr	r3, [r1, #4]
 1012338:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101233c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012340:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1012344:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012348:	e2111008 	ands	r1, r1, #8
 101234c:	1a000006 	bne	101236c <spi_command_tick+0x478>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012350:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1012354:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012358:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101235c:	e5913004 	ldr	r3, [r1, #4]
 1012360:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012364:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012368:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101236c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012370:	e2111008 	ands	r1, r1, #8
 1012374:	1a000006 	bne	1012394 <spi_command_tick+0x4a0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012378:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101237c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012380:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1012384:	e5913004 	ldr	r3, [r1, #4]
 1012388:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101238c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1012390:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1012394:	e5930004 	ldr	r0, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1012398:	e2831004 	add	r1, r3, #4
 101239c:	e2100008 	ands	r0, r0, #8
 10123a0:	0a000085 	beq	10125bc <spi_command_tick+0x6c8>
 10123a4:	e5913000 	ldr	r3, [r1]
 10123a8:	e2133008 	ands	r3, r3, #8
 10123ac:	1a000008 	bne	10123d4 <spi_command_tick+0x4e0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10123b0:	e5942158 	ldr	r2, [r4, #344]	; 0x158
 10123b4:	e5921004 	ldr	r1, [r2, #4]
	*LocalAddr = Value;
 10123b8:	e581301c 	str	r3, [r1, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10123bc:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 10123c0:	e5923004 	ldr	r3, [r2, #4]
 10123c4:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10123c8:	e5823004 	str	r3, [r2, #4]
		return 1;
 10123cc:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
 10123d0:	e2811004 	add	r1, r1, #4
	return *(volatile u32 *) Addr;
 10123d4:	e5913000 	ldr	r3, [r1]
	if(!SPI_IS_TX_FULL()) {
 10123d8:	e2133008 	ands	r3, r3, #8
 10123dc:	1a000008 	bne	1012404 <spi_command_tick+0x510>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10123e0:	e5942158 	ldr	r2, [r4, #344]	; 0x158
 10123e4:	e5921004 	ldr	r1, [r2, #4]
	*LocalAddr = Value;
 10123e8:	e581301c 	str	r3, [r1, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10123ec:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 10123f0:	e5923004 	ldr	r3, [r2, #4]
 10123f4:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10123f8:	e5823004 	str	r3, [r2, #4]
		return 1;
 10123fc:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
 1012400:	e2811004 	add	r1, r1, #4
	return *(volatile u32 *) Addr;
 1012404:	e5913000 	ldr	r3, [r1]
	if(!SPI_IS_TX_FULL()) {
 1012408:	e3130008 	tst	r3, #8
 101240c:	1a000007 	bne	1012430 <spi_command_tick+0x53c>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012410:	e5943158 	ldr	r3, [r4, #344]	; 0x158
	*LocalAddr = Value;
 1012414:	e3a010ff 	mov	r1, #255	; 0xff
 1012418:	e5932004 	ldr	r2, [r3, #4]
 101241c:	e582101c 	str	r1, [r2, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012420:	e5932004 	ldr	r2, [r3, #4]
	return *(volatile u32 *) Addr;
 1012424:	e5923004 	ldr	r3, [r2, #4]
 1012428:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101242c:	e5823004 	str	r3, [r2, #4]
			if(g_spi_state.resp_bytes <= SPI_RESPONSE_1BYTE_MAX) {
 1012430:	e3003bb4 	movw	r3, #2996	; 0xbb4
 1012434:	e19410b3 	ldrh	r1, [r4, r3]
 1012438:	e351007f 	cmp	r1, #127	; 0x7f
 101243c:	8a000040 	bhi	1012544 <spi_command_tick+0x650>
	if(!SPI_IS_TX_FULL()) {
 1012440:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1012444:	e5933004 	ldr	r3, [r3, #4]
 1012448:	e3130008 	tst	r3, #8
 101244c:	1a000006 	bne	101246c <spi_command_tick+0x578>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012450:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1012454:	e5932004 	ldr	r2, [r3, #4]
	*LocalAddr = Value;
 1012458:	e582101c 	str	r1, [r2, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 101245c:	e5932004 	ldr	r2, [r3, #4]
	return *(volatile u32 *) Addr;
 1012460:	e5923004 	ldr	r3, [r2, #4]
 1012464:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012468:	e5823004 	str	r3, [r2, #4]
			sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 101246c:	e351003f 	cmp	r1, #63	; 0x3f
			g_spi_state.resp_bytes -= sent_bytes;
 1012470:	e3005bb4 	movw	r5, #2996	; 0xbb4
			sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 1012474:	23a0103f 	movcs	r1, #63	; 0x3f
 1012478:	e5940bb0 	ldr	r0, [r4, #2992]	; 0xbb0
 101247c:	ebfffdee 	bl	1011c3c <spi_transmit_packet_nonblock>
			g_spi_state.resp_bytes -= sent_bytes;
 1012480:	e19420b5 	ldrh	r2, [r4, r5]
			sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 1012484:	e1a0c000 	mov	ip, r0
			g_spi_state.resp_data_ptr += sent_bytes;
 1012488:	e5943bb0 	ldr	r3, [r4, #2992]	; 0xbb0
			SPI_SCUGIC_ENABLE();
 101248c:	e3050b80 	movw	r0, #23424	; 0x5b80
 1012490:	e3400107 	movt	r0, #263	; 0x107
 1012494:	e3a0103a 	mov	r1, #58	; 0x3a
			g_spi_state.resp_bytes -= sent_bytes;
 1012498:	e042200c 	sub	r2, r2, ip
			g_spi_state.resp_data_ptr += sent_bytes;
 101249c:	e083300c 	add	r3, r3, ip
			g_spi_state.resp_bytes -= sent_bytes;
 10124a0:	e18420b5 	strh	r2, [r4, r5]
			g_spi_state.resp_data_ptr += sent_bytes;
 10124a4:	e5843bb0 	str	r3, [r4, #2992]	; 0xbb0
			SPI_SCUGIC_ENABLE();
 10124a8:	eb001513 	bl	10178fc <XScuGic_Enable>
			if(g_spi_state.resp_bytes > 0) {
 10124ac:	e19430b5 	ldrh	r3, [r4, r5]
 10124b0:	e3530000 	cmp	r3, #0
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_RESP_CONT;
 10124b4:	13a03004 	movne	r3, #4
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 10124b8:	03a03005 	moveq	r3, #5
				res = SPIENGINE_WORKING;  // Tell outer task that we're still busy
 10124bc:	13a05002 	movne	r5, #2
	res = SPIENGINE_IDLE;
 10124c0:	03a05001 	moveq	r5, #1
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 10124c4:	e5843bc0 	str	r3, [r4, #3008]	; 0xbc0
	GLOBAL_IRQ_ENABLE();
 10124c8:	f1080080 	cpsie	i
}
 10124cc:	e1a00005 	mov	r0, r5
 10124d0:	e28dd014 	add	sp, sp, #20
 10124d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			if(!SPI_IS_TX_OVERWATER()) {
 10124d8:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10124dc:	e5933004 	ldr	r3, [r3, #4]
 10124e0:	e3130004 	tst	r3, #4
 10124e4:	0a000011 	beq	1012530 <spi_command_tick+0x63c>
				tx_bytes = MIN(g_spi_state.resp_bytes, SPI_RESPONSE_PACK_SIZE);
 10124e8:	e3005bb4 	movw	r5, #2996	; 0xbb4
				sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 10124ec:	e5940bb0 	ldr	r0, [r4, #2992]	; 0xbb0
				tx_bytes = MIN(g_spi_state.resp_bytes, SPI_RESPONSE_PACK_SIZE);
 10124f0:	e19410b5 	ldrh	r1, [r4, r5]
				sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 10124f4:	e351003f 	cmp	r1, #63	; 0x3f
 10124f8:	23a0103f 	movcs	r1, #63	; 0x3f
 10124fc:	ebfffdce 	bl	1011c3c <spi_transmit_packet_nonblock>
				g_spi_state.resp_bytes -= sent_bytes;
 1012500:	e19430b5 	ldrh	r3, [r4, r5]
				g_spi_state.resp_data_ptr += sent_bytes;
 1012504:	e5942bb0 	ldr	r2, [r4, #2992]	; 0xbb0
				g_spi_state.resp_bytes -= sent_bytes;
 1012508:	e0433000 	sub	r3, r3, r0
 101250c:	e6ff3073 	uxth	r3, r3
				g_spi_state.resp_data_ptr += sent_bytes;
 1012510:	e0822000 	add	r2, r2, r0
 1012514:	e5842bb0 	str	r2, [r4, #2992]	; 0xbb0
				if(g_spi_state.resp_bytes <= 0) {
 1012518:	e3530000 	cmp	r3, #0
				g_spi_state.resp_bytes -= sent_bytes;
 101251c:	e18430b5 	strh	r3, [r4, r5]
					g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 1012520:	03a03005 	moveq	r3, #5
			res = SPIENGINE_WORKING;
 1012524:	03a05002 	moveq	r5, #2
					g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 1012528:	05843bc0 	streq	r3, [r4, #3008]	; 0xbc0
 101252c:	0afffea5 	beq	1011fc8 <spi_command_tick+0xd4>
			res = SPIENGINE_WORKING;
 1012530:	e3a05002 	mov	r5, #2
	GLOBAL_IRQ_ENABLE();
 1012534:	f1080080 	cpsie	i
}
 1012538:	e1a00005 	mov	r0, r5
 101253c:	e28dd014 	add	sp, sp, #20
 1012540:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			} else if(g_spi_state.resp_bytes <= SPI_RESPONSE_2BYTE_MAX) {
 1012544:	e3510c7f 	cmp	r1, #32512	; 0x7f00
 1012548:	2affffc7 	bcs	101246c <spi_command_tick+0x578>
	if(!SPI_IS_TX_FULL()) {
 101254c:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
 1012550:	e5932004 	ldr	r2, [r3, #4]
 1012554:	e2833004 	add	r3, r3, #4
 1012558:	e3120008 	tst	r2, #8
 101255c:	1a00000a 	bne	101258c <spi_command_tick+0x698>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012560:	e5942158 	ldr	r2, [r4, #344]	; 0x158
				spi_transmit(0x80 + (g_spi_state.resp_bytes / 256));
 1012564:	e1a03421 	lsr	r3, r1, #8
 1012568:	e2233080 	eor	r3, r3, #128	; 0x80
 101256c:	e5920004 	ldr	r0, [r2, #4]
	*LocalAddr = Value;
 1012570:	e580301c 	str	r3, [r0, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1012574:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 1012578:	e5923004 	ldr	r3, [r2, #4]
 101257c:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1012580:	e5823004 	str	r3, [r2, #4]
		return 1;
 1012584:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
 1012588:	e2833004 	add	r3, r3, #4
	return *(volatile u32 *) Addr;
 101258c:	e5933000 	ldr	r3, [r3]
	if(!SPI_IS_TX_FULL()) {
 1012590:	e3130008 	tst	r3, #8
 1012594:	1affffb4 	bne	101246c <spi_command_tick+0x578>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1012598:	e5942158 	ldr	r2, [r4, #344]	; 0x158
 101259c:	e6ef3071 	uxtb	r3, r1
 10125a0:	e5920004 	ldr	r0, [r2, #4]
	*LocalAddr = Value;
 10125a4:	e580301c 	str	r3, [r0, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10125a8:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 10125ac:	e5923004 	ldr	r3, [r2, #4]
 10125b0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10125b4:	e5823004 	str	r3, [r2, #4]
		return 1;
 10125b8:	eaffffab 	b	101246c <spi_command_tick+0x578>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10125bc:	e5923004 	ldr	r3, [r2, #4]
 10125c0:	e583001c 	str	r0, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10125c4:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 10125c8:	e5923004 	ldr	r3, [r2, #4]
 10125cc:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10125d0:	e5823004 	str	r3, [r2, #4]
		return 1;
 10125d4:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
 10125d8:	e2811004 	add	r1, r1, #4
 10125dc:	eaffff70 	b	10123a4 <spi_command_tick+0x4b0>
					d_printf(D_WARN, "spi: command idx %d has error", proc_cmd->alloc_idx);
 10125e0:	e30a1e64 	movw	r1, #44644	; 0xae64
 10125e4:	e3a00003 	mov	r0, #3
 10125e8:	e3401106 	movt	r1, #262	; 0x106
 10125ec:	ebfff35d 	bl	100f368 <d_printf>
 10125f0:	e5962000 	ldr	r2, [r6]
 10125f4:	eafffea0 	b	101207c <spi_command_tick+0x188>
				g_spi_state.resp_bytes = proc_cmd->resp_size;
 10125f8:	e596101c 	ldr	r1, [r6, #28]
 10125fc:	e3002bb4 	movw	r2, #2996	; 0xbb4
				g_spi_state.resp_data_ptr = proc_cmd->resp_data;
 1012600:	e5963020 	ldr	r3, [r6, #32]
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_RESP_INIT;
 1012604:	e3a00003 	mov	r0, #3
 1012608:	e5840bc0 	str	r0, [r4, #3008]	; 0xbc0
				g_spi_state.resp_bytes = proc_cmd->resp_size;
 101260c:	e18410b2 	strh	r1, [r4, r2]
				g_spi_state.resp_data_ptr = proc_cmd->resp_data;
 1012610:	e5843bb0 	str	r3, [r4, #2992]	; 0xbb0
				res = SPIENGINE_WORKING;  // Tell outer task that we're still busy
 1012614:	eafffe6b 	b	1011fc8 <spi_command_tick+0xd4>
			D_ASSERT(g_spi_state.resp_bytes <= SPI_RESPONSE_2BYTE_MAX);
 1012618:	e30a3dcc 	movw	r3, #44492	; 0xadcc
 101261c:	e30a2e84 	movw	r2, #44676	; 0xae84
 1012620:	e308149c 	movw	r1, #33948	; 0x849c
 1012624:	e3403106 	movt	r3, #262	; 0x106
 1012628:	e3402106 	movt	r2, #262	; 0x106
 101262c:	e3000281 	movw	r0, #641	; 0x281
 1012630:	e58d0000 	str	r0, [sp]
	D_ASSERT(cmd->resp_data != NULL);
 1012634:	e3a00004 	mov	r0, #4
 1012638:	e3401106 	movt	r1, #262	; 0x106
 101263c:	ebfff349 	bl	100f368 <d_printf>
 1012640:	e3e00062 	mvn	r0, #98	; 0x62
 1012644:	fa002579 	blx	101bc30 <exit>
 1012648:	e3000153 	movw	r0, #339	; 0x153
 101264c:	e30a3eb8 	movw	r3, #44728	; 0xaeb8
 1012650:	e30a2ec8 	movw	r2, #44744	; 0xaec8
 1012654:	e308149c 	movw	r1, #33948	; 0x849c
 1012658:	e58d0000 	str	r0, [sp]
 101265c:	e3403106 	movt	r3, #262	; 0x106
 1012660:	e3402106 	movt	r2, #262	; 0x106
 1012664:	eafffff2 	b	1012634 <spi_command_tick+0x740>
	res = SPIENGINE_IDLE;
 1012668:	e3a05001 	mov	r5, #1
 101266c:	eafffe55 	b	1011fc8 <spi_command_tick+0xd4>

01012670 <spicmd_csi_setup_wave_range>:
	mipi_csi_queue_buffer(start_addr, end_addr, NULL);
}

void spicmd_csi_setup_wave_range(struct spi_command_alloc_t *cmd)
{
}
 1012670:	e12fff1e 	bx	lr

01012674 <spicmd_hello>:
{
 1012674:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	spi_command_pack_response_simple(cmd, resp_buffer, 4);
 1012678:	e3a02004 	mov	r2, #4
	uint8_t resp_buffer[] = { 0x55, 0xcc, cmd->args[0], cmd->args[1] };
 101267c:	e1d0c0bc 	ldrh	ip, [r0, #12]
{
 1012680:	e24dd00c 	sub	sp, sp, #12
	uint8_t resp_buffer[] = { 0x55, 0xcc, cmd->args[0], cmd->args[1] };
 1012684:	e30c3c55 	movw	r3, #52309	; 0xcc55
	spi_command_pack_response_simple(cmd, resp_buffer, 4);
 1012688:	e08d1002 	add	r1, sp, r2
	uint8_t resp_buffer[] = { 0x55, 0xcc, cmd->args[0], cmd->args[1] };
 101268c:	e34f3fff 	movt	r3, #65535	; 0xffff
 1012690:	e1cd30b4 	strh	r3, [sp, #4]
 1012694:	e1cdc0b6 	strh	ip, [sp, #6]
	spi_command_pack_response_simple(cmd, resp_buffer, 4);
 1012698:	ebfffdd8 	bl	1011e00 <spi_command_pack_response_simple>
}
 101269c:	e28dd00c 	add	sp, sp, #12
 10126a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

010126a4 <spicmd_version>:
	spi_command_pack_response_simple(cmd, &g_version_resp, sizeof(g_version_resp));
 10126a4:	e3071438 	movw	r1, #29752	; 0x7438
 10126a8:	e3a02010 	mov	r2, #16
 10126ac:	e3401107 	movt	r1, #263	; 0x107
 10126b0:	eafffdd2 	b	1011e00 <spi_command_pack_response_simple>

010126b4 <spicmd_stats>:
{
 10126b4:	e92d4010 	push	{r4, lr}
 10126b8:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
	resp.spi_stats = g_spi_state.stats;
 10126bc:	e3a02068 	mov	r2, #104	; 0x68
 10126c0:	e59f104c 	ldr	r1, [pc, #76]	; 1012714 <spicmd_stats+0x60>
{
 10126c4:	e1a04000 	mov	r4, r0
	resp.spi_stats = g_spi_state.stats;
 10126c8:	e1a0000d 	mov	r0, sp
 10126cc:	eb002acb 	bl	101d200 <memcpy>
	resp.acq_stats = g_acq_state.stats;
 10126d0:	e3a02068 	mov	r2, #104	; 0x68
 10126d4:	e59f103c 	ldr	r1, [pc, #60]	; 1012718 <spicmd_stats+0x64>
 10126d8:	e08d0002 	add	r0, sp, r2
 10126dc:	eb002ac7 	bl	101d200 <memcpy>
	uint8_t *resp2 = (uint8_t*)&resp;
 10126e0:	e1a0100d 	mov	r1, sp
	for(i = 0; i < sizeof(resp); i++) {
 10126e4:	e3a02000 	mov	r2, #0
		*resp2++ = 'A' + (i & 31);
 10126e8:	e202301f 	and	r3, r2, #31
	for(i = 0; i < sizeof(resp); i++) {
 10126ec:	e2822001 	add	r2, r2, #1
 10126f0:	e35200d0 	cmp	r2, #208	; 0xd0
		*resp2++ = 'A' + (i & 31);
 10126f4:	e2833041 	add	r3, r3, #65	; 0x41
 10126f8:	e4c13001 	strb	r3, [r1], #1
	for(i = 0; i < sizeof(resp); i++) {
 10126fc:	1afffff9 	bne	10126e8 <spicmd_stats+0x34>
	spi_command_pack_response_simple(cmd, &resp, sizeof(struct spi_cmd_resp_stats_t));
 1012700:	e1a0100d 	mov	r1, sp
 1012704:	e1a00004 	mov	r0, r4
 1012708:	ebfffdbc 	bl	1011e00 <spi_command_pack_response_simple>
}
 101270c:	e28dd0d0 	add	sp, sp, #208	; 0xd0
 1012710:	e8bd8010 	pop	{r4, pc}
 1012714:	0107f4a8 	.word	0x0107f4a8
 1012718:	01075a80 	.word	0x01075a80

0101271c <spicmd_acq_setup_trigd>:
{
 101271c:	e1a0c000 	mov	ip, r0
 1012720:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1012724:	e28c500c 	add	r5, ip, #12
	mode = UINT16_UNPACK(cmd, 12); // cmd->args[12];
 1012728:	e5d03018 	ldrb	r3, [r0, #24]
{
 101272c:	e24dd00c 	sub	sp, sp, #12
	d_printf(D_INFO, "spi: new acquisition (pre:%d, post:%d, mode:0x%04x, wavect:%d)", pre_sz, post_sz, mode, wavect);
 1012730:	e30a1ee0 	movw	r1, #44768	; 0xaee0
	mode = UINT16_UNPACK(cmd, 12); // cmd->args[12];
 1012734:	e5d04019 	ldrb	r4, [r0, #25]
	d_printf(D_INFO, "spi: new acquisition (pre:%d, post:%d, mode:0x%04x, wavect:%d)", pre_sz, post_sz, mode, wavect);
 1012738:	e3401106 	movt	r1, #262	; 0x106
 101273c:	e89500e0 	ldm	r5, {r5, r6, r7}
 1012740:	e3a00002 	mov	r0, #2
	mode = UINT16_UNPACK(cmd, 12); // cmd->args[12];
 1012744:	e1844403 	orr	r4, r4, r3, lsl #8
 1012748:	e6bf5f35 	rev	r5, r5
	post_sz = UINT32_UNPACK(cmd, 4);
 101274c:	e6bf6f36 	rev	r6, r6
	wavect = UINT32_UNPACK(cmd, 8);
 1012750:	e6bf7f37 	rev	r7, r7
	d_printf(D_INFO, "spi: new acquisition (pre:%d, post:%d, mode:0x%04x, wavect:%d)", pre_sz, post_sz, mode, wavect);
 1012754:	e1a02005 	mov	r2, r5
 1012758:	e1a03006 	mov	r3, r6
 101275c:	e58d4000 	str	r4, [sp]
 1012760:	e58d7004 	str	r7, [sp, #4]
 1012764:	ebfff2ff 	bl	100f368 <d_printf>
	status = acq_prepare_triggered(mode, pre_sz, post_sz, wavect);
 1012768:	e1a02006 	mov	r2, r6
 101276c:	e1a01005 	mov	r1, r5
 1012770:	e1a03007 	mov	r3, r7
 1012774:	e1a00004 	mov	r0, r4
 1012778:	ebffe27b 	bl	100b16c <acq_prepare_triggered>
	d_printf(D_INFO, "spi: new acquisition status=%d", status);
 101277c:	e30a1f20 	movw	r1, #44832	; 0xaf20
 1012780:	e1a02000 	mov	r2, r0
 1012784:	e3401106 	movt	r1, #262	; 0x106
 1012788:	e3a00002 	mov	r0, #2
}
 101278c:	e28dd00c 	add	sp, sp, #12
 1012790:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "spi: new acquisition status=%d", status);
 1012794:	eafff2f3 	b	100f368 <d_printf>

01012798 <spicmd_acq_start>:
{
 1012798:	e92d4010 	push	{r4, lr}
	status = acq_start(cmd->args[0] & 0x01);
 101279c:	e5d0000c 	ldrb	r0, [r0, #12]
 10127a0:	e2000001 	and	r0, r0, #1
 10127a4:	ebffe3da 	bl	100b714 <acq_start>
	if(status != ACQRES_OK) {
 10127a8:	e2502000 	subs	r2, r0, #0
 10127ac:	08bd8010 	popeq	{r4, pc}
		d_printf(D_ERROR, "spi: acquistion unable to start: %d", status);
 10127b0:	e30a1f40 	movw	r1, #44864	; 0xaf40
 10127b4:	e3a00004 	mov	r0, #4
 10127b8:	e3401106 	movt	r1, #262	; 0x106
}
 10127bc:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "spi: acquistion unable to start: %d", status);
 10127c0:	eafff2e8 	b	100f368 <d_printf>

010127c4 <spicmd_acq_rewind>:
	acq_rewind();
 10127c4:	eaffe217 	b	100b028 <acq_rewind>

010127c8 <spicmd_acq_status>:
{
 10127c8:	e92d4010 	push	{r4, lr}
 10127cc:	e24dd008 	sub	sp, sp, #8
 10127d0:	e1a04000 	mov	r4, r0
	acq_make_status(&status_resp);
 10127d4:	e1a0000d 	mov	r0, sp
 10127d8:	ebffe455 	bl	100b934 <acq_make_status>
	spi_command_pack_response_simple(cmd, &status_resp, sizeof(struct acq_status_resp_t));
 10127dc:	e1a0100d 	mov	r1, sp
 10127e0:	e1a00004 	mov	r0, r4
 10127e4:	e3a02006 	mov	r2, #6
 10127e8:	ebfffd84 	bl	1011e00 <spi_command_pack_response_simple>
}
 10127ec:	e28dd008 	add	sp, sp, #8
 10127f0:	e8bd8010 	pop	{r4, pc}

010127f4 <spicmd_trig_configure_edge>:
{
 10127f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	hyst = UINT16_UNPACK(cmd, 4);
 10127f8:	e5d0e010 	ldrb	lr, [r0, #16]
 10127fc:	e5d02011 	ldrb	r2, [r0, #17]
	lvl = UINT16_UNPACK(cmd, 2);
 1012800:	e5d0c00e 	ldrb	ip, [r0, #14]
 1012804:	e5d0100f 	ldrb	r1, [r0, #15]
	trig_configure_edge(ch, lvl, hyst, edge);
 1012808:	e5d0300d 	ldrb	r3, [r0, #13]
 101280c:	e182240e 	orr	r2, r2, lr, lsl #8
 1012810:	e5d0000c 	ldrb	r0, [r0, #12]
}
 1012814:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	trig_configure_edge(ch, lvl, hyst, edge);
 1012818:	e181140c 	orr	r1, r1, ip, lsl #8
 101281c:	ea0003ce 	b	101375c <trig_configure_edge>

01012820 <spicmd_trig_configure_always>:
	trig_configure_always();
 1012820:	ea0003bd 	b	101371c <trig_configure_always>

01012824 <spicmd_trig_force>:
	trig_force();
 1012824:	ea000523 	b	1013cb8 <trig_force>

01012828 <spicmd_trig_arm>:
	trig_arm();
 1012828:	ea000516 	b	1013c88 <trig_arm>

0101282c <spicmd_trig_disarm>:
	trig_disarm();
 101282c:	ea00051b 	b	1013ca0 <trig_disarm>

01012830 <spicmd_csi_setup_addr_range>:
	start_addr = UINT32_UNPACK(cmd, 0);
 1012830:	e5901010 	ldr	r1, [r0, #16]
	mipi_csi_queue_buffer(start_addr, end_addr, NULL);
 1012834:	e3a02000 	mov	r2, #0
 1012838:	e590300c 	ldr	r3, [r0, #12]
 101283c:	e6bf1f31 	rev	r1, r1
 1012840:	e6bf0f33 	rev	r0, r3
 1012844:	eafff6bd 	b	1010340 <mipi_csi_queue_buffer>

01012848 <spicmd_csi_setup_testpatt>:
void spicmd_csi_setup_trigpos_all(struct spi_command_alloc_t *cmd)
{
}

void spicmd_csi_setup_testpatt(struct spi_command_alloc_t *cmd)
{
 1012848:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * 0x24 = Single bits set in each nybble
	 * 0xdb = Single bits clear in each nybble
	 * 0x04 = Single bit set in each byte
	 * 0xfe = Single bit clear in each byte
	 */
	const uint8_t ber_test[] = { 0xaa, 0xcc, 0x0f, 0x24, 0xdb, 0x04, 0xfe };
 101284c:	e30c2caa 	movw	r2, #52394	; 0xccaa
	uint8_t testpatt = cmd->args[8];
 1012850:	e5d07014 	ldrb	r7, [r0, #20]
{
 1012854:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	const uint8_t ber_test[] = { 0xaa, 0xcc, 0x0f, 0x24, 0xdb, 0x04, 0xfe };
 1012858:	e342240f 	movt	r2, #9231	; 0x240f
 101285c:	e30014db 	movw	r1, #1243	; 0x4db
 1012860:	e590400c 	ldr	r4, [r0, #12]
	 * doing a non-image transfer.  Only "Norway" (pattern #1) is image, so all
	 * other patterns require a buffer to be allocated.
	 *
	 * Buffer should be 32-byte aligned (cache line boundary).
	 */
	if(testpatt != 1) {
 1012864:	e3570001 	cmp	r7, #1
	const uint8_t ber_test[] = { 0xaa, 0xcc, 0x0f, 0x24, 0xdb, 0x04, 0xfe };
 1012868:	e58d2020 	str	r2, [sp, #32]
 101286c:	e3e02001 	mvn	r2, #1
 1012870:	e5903010 	ldr	r3, [r0, #16]
 1012874:	e6bf4f34 	rev	r4, r4
 1012878:	e1cd12b4 	strh	r1, [sp, #36]	; 0x24
 101287c:	e5cd2026 	strb	r2, [sp, #38]	; 0x26
	if(testpatt != 1) {
 1012880:	0a0001b1 	beq	1012f4c <spicmd_csi_setup_testpatt+0x704>
		size += 31;
 1012884:	e284401f 	add	r4, r4, #31
		size &= ~31;

		buffer = (uint8_t*)memalign(32, size);
 1012888:	e3a00020 	mov	r0, #32
		size &= ~31;
 101288c:	e3c4401f 	bic	r4, r4, #31
		buffer = (uint8_t*)memalign(32, size);
 1012890:	e6bf8f33 	rev	r8, r3
 1012894:	e1a01004 	mov	r1, r4
 1012898:	fa002784 	blx	101c6b0 <memalign>
		if(buffer == NULL) {
 101289c:	e2506000 	subs	r6, r0, #0
 10128a0:	0a0001a2 	beq	1012f30 <spicmd_csi_setup_testpatt+0x6e8>
		}

		base = (uint32_t)buffer;
	}

	d_printf(D_INFO, "spicmd: buffer 0x%08x size %d (0x%08x) bytes", base, size, size);
 10128a4:	e30a1f9c 	movw	r1, #44956	; 0xaf9c
 10128a8:	e1a03004 	mov	r3, r4
 10128ac:	e58d4000 	str	r4, [sp]
 10128b0:	e3401106 	movt	r1, #262	; 0x106
 10128b4:	e1a02006 	mov	r2, r6
 10128b8:	e3a00002 	mov	r0, #2
 10128bc:	ebfff2a9 	bl	100f368 <d_printf>

	/*
	 * Important: all test pattern buffers must be aligned to 4 byte boundaries
	 * Misaligned data will cause an AXIDMA exception.
	 */
	switch(testpatt) {
 10128c0:	e2473002 	sub	r3, r7, #2
 10128c4:	e1a05008 	mov	r5, r8
		base = (uint32_t)buffer;
 10128c8:	e1a07006 	mov	r7, r6
	switch(testpatt) {
 10128cc:	e3530006 	cmp	r3, #6
 10128d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 10128d4:	ea0001b6 	b	1012fb4 <spicmd_csi_setup_testpatt+0x76c>
 10128d8:	01012b30 	.word	0x01012b30
 10128dc:	01012af8 	.word	0x01012af8
 10128e0:	01012ed8 	.word	0x01012ed8
 10128e4:	01012b58 	.word	0x01012b58
 10128e8:	01012d34 	.word	0x01012d34
 10128ec:	010128f4 	.word	0x010128f4
 10128f0:	01012a50 	.word	0x01012a50
			}
			break;

		case 7:
			// 8-bit counter test:  Detects line sync issues/word loss issues.  Each byte increments by 1.
			for(i = 0, j = init_value; i < size; i++, j++) {
 10128f4:	e3540000 	cmp	r4, #0
 10128f8:	0a00019f 	beq	1012f7c <spicmd_csi_setup_testpatt+0x734>
 10128fc:	e3540020 	cmp	r4, #32
 1012900:	9a00019f 	bls	1012f84 <spicmd_csi_setup_testpatt+0x73c>
 1012904:	e244c020 	sub	ip, r4, #32
 1012908:	e1a01006 	mov	r1, r6
 101290c:	e3a03000 	mov	r3, #0
				*(buffer + i) = j & 0xff;
 1012910:	e6ef2075 	uxtb	r2, r5
 1012914:	e2833020 	add	r3, r3, #32
 1012918:	e153000c 	cmp	r3, ip
 101291c:	f5d1f022 	pld	[r1, #34]	; 0x22
 1012920:	e282e001 	add	lr, r2, #1
 1012924:	e2820002 	add	r0, r2, #2
 1012928:	e5c1e001 	strb	lr, [r1, #1]
 101292c:	e282e003 	add	lr, r2, #3
 1012930:	e5c10002 	strb	r0, [r1, #2]
 1012934:	e2820004 	add	r0, r2, #4
 1012938:	e5c1e003 	strb	lr, [r1, #3]
 101293c:	e282e005 	add	lr, r2, #5
 1012940:	e5c10004 	strb	r0, [r1, #4]
 1012944:	e2820006 	add	r0, r2, #6
 1012948:	e5c1e005 	strb	lr, [r1, #5]
 101294c:	e282e007 	add	lr, r2, #7
 1012950:	e5c10006 	strb	r0, [r1, #6]
 1012954:	e2820008 	add	r0, r2, #8
 1012958:	e5c1e007 	strb	lr, [r1, #7]
 101295c:	e282e009 	add	lr, r2, #9
 1012960:	e5c10008 	strb	r0, [r1, #8]
 1012964:	e282000a 	add	r0, r2, #10
 1012968:	e5c1e009 	strb	lr, [r1, #9]
 101296c:	e282e00b 	add	lr, r2, #11
 1012970:	e5c1000a 	strb	r0, [r1, #10]
 1012974:	e282000c 	add	r0, r2, #12
 1012978:	e5c1e00b 	strb	lr, [r1, #11]
 101297c:	e282e00d 	add	lr, r2, #13
 1012980:	e5c1000c 	strb	r0, [r1, #12]
 1012984:	e282000e 	add	r0, r2, #14
 1012988:	e5c1e00d 	strb	lr, [r1, #13]
 101298c:	e282e00f 	add	lr, r2, #15
 1012990:	e5c1000e 	strb	r0, [r1, #14]
 1012994:	e2820010 	add	r0, r2, #16
 1012998:	e5c1e00f 	strb	lr, [r1, #15]
 101299c:	e282e011 	add	lr, r2, #17
 10129a0:	e5c10010 	strb	r0, [r1, #16]
 10129a4:	e2820012 	add	r0, r2, #18
 10129a8:	e5c1e011 	strb	lr, [r1, #17]
 10129ac:	e282e013 	add	lr, r2, #19
 10129b0:	e5c10012 	strb	r0, [r1, #18]
 10129b4:	e2820014 	add	r0, r2, #20
 10129b8:	e5c1e013 	strb	lr, [r1, #19]
 10129bc:	e282e015 	add	lr, r2, #21
 10129c0:	e5c10014 	strb	r0, [r1, #20]
 10129c4:	e2820016 	add	r0, r2, #22
 10129c8:	e5c1e015 	strb	lr, [r1, #21]
 10129cc:	e282e017 	add	lr, r2, #23
 10129d0:	e5c10016 	strb	r0, [r1, #22]
 10129d4:	e2820018 	add	r0, r2, #24
 10129d8:	e5c1e017 	strb	lr, [r1, #23]
 10129dc:	e282e019 	add	lr, r2, #25
 10129e0:	e5c10018 	strb	r0, [r1, #24]
 10129e4:	e282001a 	add	r0, r2, #26
 10129e8:	e5c1e019 	strb	lr, [r1, #25]
 10129ec:	e282e01b 	add	lr, r2, #27
 10129f0:	e5c1001a 	strb	r0, [r1, #26]
 10129f4:	e282001c 	add	r0, r2, #28
 10129f8:	e5c1e01b 	strb	lr, [r1, #27]
 10129fc:	e282801d 	add	r8, r2, #29
 1012a00:	e5c1001c 	strb	r0, [r1, #28]
 1012a04:	e282e01e 	add	lr, r2, #30
 1012a08:	e282001f 	add	r0, r2, #31
 1012a0c:	e5c12000 	strb	r2, [r1]
 1012a10:	e5c1801d 	strb	r8, [r1, #29]
 1012a14:	e2855020 	add	r5, r5, #32
 1012a18:	e5c1e01e 	strb	lr, [r1, #30]
 1012a1c:	e1a02003 	mov	r2, r3
 1012a20:	e5c1001f 	strb	r0, [r1, #31]
 1012a24:	e2811020 	add	r1, r1, #32
 1012a28:	1affffb8 	bne	1012910 <spicmd_csi_setup_testpatt+0xc8>
 1012a2c:	e0455003 	sub	r5, r5, r3
 1012a30:	e0851003 	add	r1, r5, r3
			for(i = 0, j = init_value; i < size; i++, j++) {
 1012a34:	e2833001 	add	r3, r3, #1
 1012a38:	e1540003 	cmp	r4, r3
				*(buffer + i) = j & 0xff;
 1012a3c:	e7c61002 	strb	r1, [r6, r2]
 1012a40:	e1a02003 	mov	r2, r3
			for(i = 0, j = init_value; i < size; i++, j++) {
 1012a44:	8afffff9 	bhi	1012a30 <spicmd_csi_setup_testpatt+0x1e8>
			break;

		default:
			// Undefined; but we want to free the buffer to avoid a leak!
			d_printf(D_WARN, "spicmd: undefined testpatt!");
			break;
 1012a48:	e0861004 	add	r1, r6, r4
 1012a4c:	ea000032 	b	1012b1c <spicmd_csi_setup_testpatt+0x2d4>
			for(i = 0; i < size; i += 4) {
 1012a50:	e3540000 	cmp	r4, #0
 1012a54:	0a000148 	beq	1012f7c <spicmd_csi_setup_testpatt+0x734>
				*(buffer + i + 0) = (init_value >> 24) & 0xff;
 1012a58:	e1a03c28 	lsr	r3, r8, #24
 1012a5c:	e2440001 	sub	r0, r4, #1
 1012a60:	e3a01000 	mov	r1, #0
				*(buffer + i + 1) = (init_value >> 16) & 0xff;
 1012a64:	e1a02828 	lsr	r2, r8, #16
 1012a68:	e1a00120 	lsr	r0, r0, #2
 1012a6c:	e7c71013 	bfi	r1, r3, #0, #8
				*(buffer + i + 2) = (init_value >> 8) & 0xff;
 1012a70:	e1a03428 	lsr	r3, r8, #8
 1012a74:	e7cf1412 	bfi	r1, r2, #8, #8
 1012a78:	e7d71813 	bfi	r1, r3, #16, #8
 1012a7c:	e2403008 	sub	r3, r0, #8
 1012a80:	e373000a 	cmn	r3, #10
 1012a84:	e7df1c18 	bfi	r1, r8, #24, #8
 1012a88:	e2800001 	add	r0, r0, #1
 1012a8c:	8a000142 	bhi	1012f9c <spicmd_csi_setup_testpatt+0x754>
 1012a90:	e3c3c007 	bic	ip, r3, #7
 1012a94:	e3a0e000 	mov	lr, #0
 1012a98:	e1a03006 	mov	r3, r6
 1012a9c:	e28c2008 	add	r2, ip, #8
				*(buffer + i + 3) = init_value & 0xff;
 1012aa0:	e15e000c 	cmp	lr, ip
 1012aa4:	f5d3f0a0 	pld	[r3, #160]	; 0xa0
				*(buffer + i + 0) = (init_value >> 24) & 0xff;
 1012aa8:	e5831000 	str	r1, [r3]
				*(buffer + i + 3) = init_value & 0xff;
 1012aac:	e28ee008 	add	lr, lr, #8
				*(buffer + i + 0) = (init_value >> 24) & 0xff;
 1012ab0:	e5831004 	str	r1, [r3, #4]
				*(buffer + i + 3) = init_value & 0xff;
 1012ab4:	e2833020 	add	r3, r3, #32
				*(buffer + i + 0) = (init_value >> 24) & 0xff;
 1012ab8:	e5031018 	str	r1, [r3, #-24]	; 0xffffffe8
 1012abc:	e5031014 	str	r1, [r3, #-20]	; 0xffffffec
 1012ac0:	e5031010 	str	r1, [r3, #-16]
 1012ac4:	e503100c 	str	r1, [r3, #-12]
 1012ac8:	e5031008 	str	r1, [r3, #-8]
 1012acc:	e5031004 	str	r1, [r3, #-4]
 1012ad0:	1afffff2 	bne	1012aa0 <spicmd_csi_setup_testpatt+0x258>
				*(buffer + i + 3) = init_value & 0xff;
 1012ad4:	e2822001 	add	r2, r2, #1
				*(buffer + i + 0) = (init_value >> 24) & 0xff;
 1012ad8:	e4831004 	str	r1, [r3], #4
 1012adc:	e1500002 	cmp	r0, r2
 1012ae0:	9affffd8 	bls	1012a48 <spicmd_csi_setup_testpatt+0x200>
				*(buffer + i + 3) = init_value & 0xff;
 1012ae4:	e2822001 	add	r2, r2, #1
				*(buffer + i + 0) = (init_value >> 24) & 0xff;
 1012ae8:	e4831004 	str	r1, [r3], #4
 1012aec:	e1500002 	cmp	r0, r2
 1012af0:	8afffff7 	bhi	1012ad4 <spicmd_csi_setup_testpatt+0x28c>
 1012af4:	eaffffd3 	b	1012a48 <spicmd_csi_setup_testpatt+0x200>
			d_printf(D_INFO, "All Ones");
 1012af8:	e30a1fd8 	movw	r1, #45016	; 0xafd8
 1012afc:	e3a00002 	mov	r0, #2
 1012b00:	e3401106 	movt	r1, #262	; 0x106
 1012b04:	ebfff217 	bl	100f368 <d_printf>
			memset(buffer, 0xff, size);
 1012b08:	e3a010ff 	mov	r1, #255	; 0xff
 1012b0c:	e1a02004 	mov	r2, r4
 1012b10:	e1a00006 	mov	r0, r6
 1012b14:	fa002b65 	blx	101d8b0 <memset>
			break;
 1012b18:	e0861004 	add	r1, r6, r4
	}

	// `buffer` will be freed when the CSI operation is done
	//d_printf(D_INFO, "Base 0x%08x Base+Size 0x%08x", base, base + size);
	mipi_csi_queue_buffer(base, base + size, buffer);
 1012b1c:	e1a02006 	mov	r2, r6
 1012b20:	e1a00007 	mov	r0, r7
}
 1012b24:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1012b28:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mipi_csi_queue_buffer(base, base + size, buffer);
 1012b2c:	eafff603 	b	1010340 <mipi_csi_queue_buffer>
			d_printf(D_INFO, "All Zeroes");
 1012b30:	e30a1fcc 	movw	r1, #45004	; 0xafcc
 1012b34:	e3a00002 	mov	r0, #2
 1012b38:	e3401106 	movt	r1, #262	; 0x106
 1012b3c:	ebfff209 	bl	100f368 <d_printf>
			memset(buffer, 0x00, size);
 1012b40:	e3a01000 	mov	r1, #0
 1012b44:	e1a02004 	mov	r2, r4
 1012b48:	e1a00006 	mov	r0, r6
 1012b4c:	fa002b57 	blx	101d8b0 <memset>
			break;
 1012b50:	e0861004 	add	r1, r6, r4
 1012b54:	eafffff0 	b	1012b1c <spicmd_csi_setup_testpatt+0x2d4>
			for(i = 0, j = init_value; i < size; i += 4, j++) {
 1012b58:	e3540000 	cmp	r4, #0
 1012b5c:	0a000106 	beq	1012f7c <spicmd_csi_setup_testpatt+0x734>
 1012b60:	e3540020 	cmp	r4, #32
 1012b64:	9a000109 	bls	1012f90 <spicmd_csi_setup_testpatt+0x748>
 1012b68:	e2443040 	sub	r3, r4, #64	; 0x40
 1012b6c:	e2882008 	add	r2, r8, #8
 1012b70:	e0823123 	add	r3, r2, r3, lsr #2
 1012b74:	e2880002 	add	r0, r8, #2
 1012b78:	e288e003 	add	lr, r8, #3
 1012b7c:	e58d6014 	str	r6, [sp, #20]
 1012b80:	e58d300c 	str	r3, [sp, #12]
 1012b84:	e1a01006 	mov	r1, r6
 1012b88:	e58d4018 	str	r4, [sp, #24]
 1012b8c:	e288a001 	add	sl, r8, #1
 1012b90:	e58d601c 	str	r6, [sp, #28]
 1012b94:	e288b004 	add	fp, r8, #4
 1012b98:	e288c005 	add	ip, r8, #5
 1012b9c:	e2883006 	add	r3, r8, #6
 1012ba0:	e3a02000 	mov	r2, #0
 1012ba4:	e1a0400e 	mov	r4, lr
 1012ba8:	e1a06000 	mov	r6, r0
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012bac:	e1a09445 	asr	r9, r5, #8
 1012bb0:	e6ef0075 	uxtb	r0, r5
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012bb4:	e1a07c25 	lsr	r7, r5, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012bb8:	e1a08845 	asr	r8, r5, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012bbc:	e58d9010 	str	r9, [sp, #16]
 1012bc0:	e59d900c 	ldr	r9, [sp, #12]
 1012bc4:	e285e007 	add	lr, r5, #7
 1012bc8:	e2855008 	add	r5, r5, #8
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012bcc:	e5c17000 	strb	r7, [r1]
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012bd0:	e59d7010 	ldr	r7, [sp, #16]
 1012bd4:	e2822020 	add	r2, r2, #32
 1012bd8:	e1590005 	cmp	r9, r5
				*(buffer + i + 3) = j & 0xff;
 1012bdc:	e2809001 	add	r9, r0, #1
 1012be0:	e5c19007 	strb	r9, [r1, #7]
 1012be4:	e2809002 	add	r9, r0, #2
 1012be8:	e5c1900b 	strb	r9, [r1, #11]
 1012bec:	e2809003 	add	r9, r0, #3
 1012bf0:	e5c1900f 	strb	r9, [r1, #15]
 1012bf4:	e2809004 	add	r9, r0, #4
 1012bf8:	e5c19013 	strb	r9, [r1, #19]
 1012bfc:	e2809005 	add	r9, r0, #5
 1012c00:	e5c19017 	strb	r9, [r1, #23]
 1012c04:	e2809006 	add	r9, r0, #6
 1012c08:	e5c1901b 	strb	r9, [r1, #27]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c0c:	e1a09c2e 	lsr	r9, lr, #24
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c10:	e5c17002 	strb	r7, [r1, #2]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c14:	e1a0784e 	asr	r7, lr, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c18:	e1a0e44e 	asr	lr, lr, #8
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c1c:	e5c18001 	strb	r8, [r1, #1]
 1012c20:	e5c1701d 	strb	r7, [r1, #29]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c24:	e1a08c2a 	lsr	r8, sl, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c28:	e1a0784a 	asr	r7, sl, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c2c:	e5c1e01e 	strb	lr, [r1, #30]
 1012c30:	e1a0e44a 	asr	lr, sl, #8
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c34:	e5c18004 	strb	r8, [r1, #4]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c38:	e5c17005 	strb	r7, [r1, #5]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c3c:	e1a08c26 	lsr	r8, r6, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c40:	e1a07846 	asr	r7, r6, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c44:	e5c1e006 	strb	lr, [r1, #6]
 1012c48:	e1a0e446 	asr	lr, r6, #8
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c4c:	e5c18008 	strb	r8, [r1, #8]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c50:	e5c17009 	strb	r7, [r1, #9]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c54:	e1a08c24 	lsr	r8, r4, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c58:	e1a07844 	asr	r7, r4, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c5c:	e5c1e00a 	strb	lr, [r1, #10]
 1012c60:	e1a0e444 	asr	lr, r4, #8
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c64:	e5c1800c 	strb	r8, [r1, #12]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c68:	e5c1700d 	strb	r7, [r1, #13]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c6c:	e1a08c2b 	lsr	r8, fp, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c70:	e1a0784b 	asr	r7, fp, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c74:	e5c1e00e 	strb	lr, [r1, #14]
 1012c78:	e1a0e44b 	asr	lr, fp, #8
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c7c:	e5c18010 	strb	r8, [r1, #16]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c80:	e5c17011 	strb	r7, [r1, #17]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c84:	e1a08c2c 	lsr	r8, ip, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c88:	e1a0784c 	asr	r7, ip, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012c8c:	e5c1e012 	strb	lr, [r1, #18]
 1012c90:	e1a0e44c 	asr	lr, ip, #8
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c94:	e5c18014 	strb	r8, [r1, #20]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012c98:	e5c17015 	strb	r7, [r1, #21]
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012c9c:	e1a08c23 	lsr	r8, r3, #24
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012ca0:	e5c1e016 	strb	lr, [r1, #22]
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012ca4:	e1a07843 	asr	r7, r3, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012ca8:	e1a0e443 	asr	lr, r3, #8
				*(buffer + i + 3) = j & 0xff;
 1012cac:	e5c10003 	strb	r0, [r1, #3]
 1012cb0:	e2800007 	add	r0, r0, #7
 1012cb4:	f5d1f033 	pld	[r1, #51]	; 0x33
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012cb8:	e5c1901c 	strb	r9, [r1, #28]
 1012cbc:	e28aa008 	add	sl, sl, #8
 1012cc0:	e5c18018 	strb	r8, [r1, #24]
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012cc4:	e2866008 	add	r6, r6, #8
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012cc8:	e5c17019 	strb	r7, [r1, #25]
 1012ccc:	e2844008 	add	r4, r4, #8
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012cd0:	e5c1e01a 	strb	lr, [r1, #26]
 1012cd4:	e28bb008 	add	fp, fp, #8
				*(buffer + i + 3) = j & 0xff;
 1012cd8:	e5c1001f 	strb	r0, [r1, #31]
 1012cdc:	e28cc008 	add	ip, ip, #8
 1012ce0:	e1a08002 	mov	r8, r2
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012ce4:	e2833008 	add	r3, r3, #8
				*(buffer + i + 3) = j & 0xff;
 1012ce8:	e2811020 	add	r1, r1, #32
 1012cec:	1affffae 	bne	1012bac <spicmd_csi_setup_testpatt+0x364>
 1012cf0:	e59d7014 	ldr	r7, [sp, #20]
 1012cf4:	e59d4018 	ldr	r4, [sp, #24]
 1012cf8:	e59d601c 	ldr	r6, [sp, #28]
			for(i = 0, j = init_value; i < size; i += 4, j++) {
 1012cfc:	e2822004 	add	r2, r2, #4
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012d00:	e1a0cc25 	lsr	ip, r5, #24
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012d04:	e1a00845 	asr	r0, r5, #16
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012d08:	e1a01445 	asr	r1, r5, #8
			for(i = 0, j = init_value; i < size; i += 4, j++) {
 1012d0c:	e1540002 	cmp	r4, r2
				*(buffer + i + 0) = (j >> 24) & 0xff;
 1012d10:	e1a03006 	mov	r3, r6
 1012d14:	e7e3c008 	strb	ip, [r3, r8]!
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012d18:	e1a08002 	mov	r8, r2
				*(buffer + i + 3) = j & 0xff;
 1012d1c:	e5c35003 	strb	r5, [r3, #3]
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012d20:	e2855001 	add	r5, r5, #1
				*(buffer + i + 1) = (j >> 16) & 0xff;
 1012d24:	e5c30001 	strb	r0, [r3, #1]
				*(buffer + i + 2) = (j >> 8) & 0xff;
 1012d28:	e5c31002 	strb	r1, [r3, #2]
			for(i = 0, j = init_value; i < size; i += 4, j++) {
 1012d2c:	8afffff2 	bhi	1012cfc <spicmd_csi_setup_testpatt+0x4b4>
 1012d30:	eaffff44 	b	1012a48 <spicmd_csi_setup_testpatt+0x200>
			for(i = 0, j = init_value; i < size; i += 2, j++) {
 1012d34:	e3540000 	cmp	r4, #0
 1012d38:	0a00008f 	beq	1012f7c <spicmd_csi_setup_testpatt+0x734>
 1012d3c:	e3540020 	cmp	r4, #32
 1012d40:	9a000098 	bls	1012fa8 <spicmd_csi_setup_testpatt+0x760>
 1012d44:	e2883010 	add	r3, r8, #16
 1012d48:	e2448040 	sub	r8, r4, #64	; 0x40
 1012d4c:	e08330a8 	add	r3, r3, r8, lsr #1
 1012d50:	e1a00006 	mov	r0, r6
 1012d54:	e3a02000 	mov	r2, #0
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012d58:	e285c001 	add	ip, r5, #1
 1012d5c:	e6ef1075 	uxtb	r1, r5
 1012d60:	e1a0c44c 	asr	ip, ip, #8
 1012d64:	e285e002 	add	lr, r5, #2
				*(buffer + i + 0) = j & 0xff;
 1012d68:	e2818001 	add	r8, r1, #1
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012d6c:	e1a0e44e 	asr	lr, lr, #8
 1012d70:	e5c0c003 	strb	ip, [r0, #3]
				*(buffer + i + 0) = j & 0xff;
 1012d74:	e281c003 	add	ip, r1, #3
 1012d78:	e5c0c006 	strb	ip, [r0, #6]
 1012d7c:	e281c004 	add	ip, r1, #4
 1012d80:	e5c0c008 	strb	ip, [r0, #8]
 1012d84:	e281c005 	add	ip, r1, #5
 1012d88:	e5c0c00a 	strb	ip, [r0, #10]
 1012d8c:	e281c006 	add	ip, r1, #6
 1012d90:	e5c0c00c 	strb	ip, [r0, #12]
 1012d94:	e281c007 	add	ip, r1, #7
 1012d98:	e5c0c00e 	strb	ip, [r0, #14]
 1012d9c:	e281c008 	add	ip, r1, #8
 1012da0:	e5c08002 	strb	r8, [r0, #2]
 1012da4:	e2818002 	add	r8, r1, #2
 1012da8:	e5c0c010 	strb	ip, [r0, #16]
 1012dac:	e281c009 	add	ip, r1, #9
 1012db0:	e5c08004 	strb	r8, [r0, #4]
 1012db4:	e281800e 	add	r8, r1, #14
 1012db8:	e5c0c012 	strb	ip, [r0, #18]
 1012dbc:	e281c00a 	add	ip, r1, #10
 1012dc0:	e5c0c014 	strb	ip, [r0, #20]
 1012dc4:	e281c00b 	add	ip, r1, #11
 1012dc8:	e5c0801c 	strb	r8, [r0, #28]
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012dcc:	e2858004 	add	r8, r5, #4
				*(buffer + i + 0) = j & 0xff;
 1012dd0:	e5c0c016 	strb	ip, [r0, #22]
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012dd4:	e1a08448 	asr	r8, r8, #8
				*(buffer + i + 0) = j & 0xff;
 1012dd8:	e281c00c 	add	ip, r1, #12
 1012ddc:	e5c01000 	strb	r1, [r0]
 1012de0:	e5c0c018 	strb	ip, [r0, #24]
 1012de4:	e281c00d 	add	ip, r1, #13
 1012de8:	e5c0c01a 	strb	ip, [r0, #26]
 1012dec:	e281c00f 	add	ip, r1, #15
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012df0:	e5c0e005 	strb	lr, [r0, #5]
 1012df4:	e2851006 	add	r1, r5, #6
 1012df8:	e5c08009 	strb	r8, [r0, #9]
 1012dfc:	e285e005 	add	lr, r5, #5
 1012e00:	e2858007 	add	r8, r5, #7
 1012e04:	e1a0e44e 	asr	lr, lr, #8
 1012e08:	e1a01441 	asr	r1, r1, #8
 1012e0c:	e1a08448 	asr	r8, r8, #8
 1012e10:	e5c0e00b 	strb	lr, [r0, #11]
 1012e14:	e5c0100d 	strb	r1, [r0, #13]
 1012e18:	e285e008 	add	lr, r5, #8
 1012e1c:	e5c0800f 	strb	r8, [r0, #15]
 1012e20:	e2851009 	add	r1, r5, #9
 1012e24:	e285800a 	add	r8, r5, #10
 1012e28:	e1a0e44e 	asr	lr, lr, #8
 1012e2c:	e1a01441 	asr	r1, r1, #8
 1012e30:	e1a08448 	asr	r8, r8, #8
 1012e34:	e5c0e011 	strb	lr, [r0, #17]
 1012e38:	e5c01013 	strb	r1, [r0, #19]
 1012e3c:	e285e00b 	add	lr, r5, #11
 1012e40:	e5c08015 	strb	r8, [r0, #21]
 1012e44:	e285100c 	add	r1, r5, #12
 1012e48:	e285800d 	add	r8, r5, #13
 1012e4c:	e1a0e44e 	asr	lr, lr, #8
 1012e50:	e1a01441 	asr	r1, r1, #8
 1012e54:	e1a08448 	asr	r8, r8, #8
 1012e58:	e5c0e017 	strb	lr, [r0, #23]
 1012e5c:	e5c01019 	strb	r1, [r0, #25]
 1012e60:	e2859003 	add	r9, r5, #3
 1012e64:	e5c0801b 	strb	r8, [r0, #27]
 1012e68:	e285e00e 	add	lr, r5, #14
 1012e6c:	e285100f 	add	r1, r5, #15
 1012e70:	e1a08445 	asr	r8, r5, #8
 1012e74:	e2855010 	add	r5, r5, #16
 1012e78:	e1a01441 	asr	r1, r1, #8
 1012e7c:	e1a09449 	asr	r9, r9, #8
 1012e80:	e1a0e44e 	asr	lr, lr, #8
 1012e84:	e5c0101f 	strb	r1, [r0, #31]
 1012e88:	e1550003 	cmp	r5, r3
 1012e8c:	e2822020 	add	r2, r2, #32
 1012e90:	f5d0f029 	pld	[r0, #41]	; 0x29
 1012e94:	e1a01002 	mov	r1, r2
 1012e98:	e5c09007 	strb	r9, [r0, #7]
 1012e9c:	e2800020 	add	r0, r0, #32
 1012ea0:	e540e003 	strb	lr, [r0, #-3]
 1012ea4:	e540801f 	strb	r8, [r0, #-31]	; 0xffffffe1
				*(buffer + i + 0) = j & 0xff;
 1012ea8:	e540c002 	strb	ip, [r0, #-2]
 1012eac:	1affffa9 	bne	1012d58 <spicmd_csi_setup_testpatt+0x510>
			for(i = 0, j = init_value; i < size; i += 2, j++) {
 1012eb0:	e2822002 	add	r2, r2, #2
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012eb4:	e1a00445 	asr	r0, r5, #8
			for(i = 0, j = init_value; i < size; i += 2, j++) {
 1012eb8:	e1540002 	cmp	r4, r2
				*(buffer + i + 1) = (j >> 8) & 0xff;
 1012ebc:	e0863001 	add	r3, r6, r1
 1012ec0:	e5c30001 	strb	r0, [r3, #1]
				*(buffer + i + 0) = j & 0xff;
 1012ec4:	e7c65001 	strb	r5, [r6, r1]
			for(i = 0, j = init_value; i < size; i += 2, j++) {
 1012ec8:	e2855001 	add	r5, r5, #1
 1012ecc:	e1a01002 	mov	r1, r2
 1012ed0:	8afffff6 	bhi	1012eb0 <spicmd_csi_setup_testpatt+0x668>
 1012ed4:	eafffedb 	b	1012a48 <spicmd_csi_setup_testpatt+0x200>
			for(i = 0, j = 0; i < size; i++) {
 1012ed8:	e3540000 	cmp	r4, #0
 1012edc:	0a000026 	beq	1012f7c <spicmd_csi_setup_testpatt+0x734>
				*(buffer + i) = ber_test[j++ % sizeof(ber_test)];
 1012ee0:	e3040925 	movw	r0, #18725	; 0x4925
 1012ee4:	e3a02001 	mov	r2, #1
 1012ee8:	e3420492 	movt	r0, #9362	; 0x2492
 1012eec:	e3e03055 	mvn	r3, #85	; 0x55
 1012ef0:	e5c63000 	strb	r3, [r6]
 1012ef4:	e0831290 	umull	r1, r3, r0, r2
 1012ef8:	e0421003 	sub	r1, r2, r3
 1012efc:	e08330a1 	add	r3, r3, r1, lsr #1
 1012f00:	e28d1028 	add	r1, sp, #40	; 0x28
 1012f04:	e1a03123 	lsr	r3, r3, #2
 1012f08:	e0633183 	rsb	r3, r3, r3, lsl #3
 1012f0c:	e0423003 	sub	r3, r2, r3
 1012f10:	e2822001 	add	r2, r2, #1
 1012f14:	e0813003 	add	r3, r1, r3
			for(i = 0, j = 0; i < size; i++) {
 1012f18:	e1520004 	cmp	r2, r4
 1012f1c:	e5533008 	ldrb	r3, [r3, #-8]
				*(buffer + i) = ber_test[j++ % sizeof(ber_test)];
 1012f20:	e0861002 	add	r1, r6, r2
 1012f24:	e5413001 	strb	r3, [r1, #-1]
			for(i = 0, j = 0; i < size; i++) {
 1012f28:	1afffff1 	bne	1012ef4 <spicmd_csi_setup_testpatt+0x6ac>
 1012f2c:	eafffefa 	b	1012b1c <spicmd_csi_setup_testpatt+0x2d4>
			d_printf(D_ERROR, "spicmd: Unable to allocate %d bytes for test pattern", size);
 1012f30:	e30a1f64 	movw	r1, #44900	; 0xaf64
 1012f34:	e1a02004 	mov	r2, r4
 1012f38:	e3401106 	movt	r1, #262	; 0x106
 1012f3c:	e3a00004 	mov	r0, #4
}
 1012f40:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1012f44:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
			d_printf(D_ERROR, "spicmd: Unable to allocate %d bytes for test pattern", size);
 1012f48:	eafff106 	b	100f368 <d_printf>
	d_printf(D_INFO, "spicmd: buffer 0x%08x size %d (0x%08x) bytes", base, size, size);
 1012f4c:	e30a1f9c 	movw	r1, #44956	; 0xaf9c
			base = (uint32_t)&testpatt_norway_512x512_grey;
 1012f50:	e3077ba0 	movw	r7, #31648	; 0x7ba0
	d_printf(D_INFO, "spicmd: buffer 0x%08x size %d (0x%08x) bytes", base, size, size);
 1012f54:	e3401106 	movt	r1, #262	; 0x106
 1012f58:	e58d4000 	str	r4, [sp]
 1012f5c:	e1a03004 	mov	r3, r4
 1012f60:	e3a02000 	mov	r2, #0
 1012f64:	e3a00002 	mov	r0, #2
			base = (uint32_t)&testpatt_norway_512x512_grey;
 1012f68:	e3407102 	movt	r7, #258	; 0x102
	d_printf(D_INFO, "spicmd: buffer 0x%08x size %d (0x%08x) bytes", base, size, size);
 1012f6c:	ebfff0fd 	bl	100f368 <d_printf>
			break;
 1012f70:	e3a06000 	mov	r6, #0
 1012f74:	e2871701 	add	r1, r7, #262144	; 0x40000
 1012f78:	eafffee7 	b	1012b1c <spicmd_csi_setup_testpatt+0x2d4>
			for(i = 0, j = 0; i < size; i++) {
 1012f7c:	e1a01006 	mov	r1, r6
 1012f80:	eafffee5 	b	1012b1c <spicmd_csi_setup_testpatt+0x2d4>
			for(i = 0, j = init_value; i < size; i++, j++) {
 1012f84:	e3a03000 	mov	r3, #0
 1012f88:	e1a02003 	mov	r2, r3
 1012f8c:	eafffea6 	b	1012a2c <spicmd_csi_setup_testpatt+0x1e4>
			for(i = 0, j = init_value; i < size; i += 4, j++) {
 1012f90:	e3a02000 	mov	r2, #0
 1012f94:	e1a08002 	mov	r8, r2
 1012f98:	eaffff57 	b	1012cfc <spicmd_csi_setup_testpatt+0x4b4>
				*(buffer + i + 2) = (init_value >> 8) & 0xff;
 1012f9c:	e1a03006 	mov	r3, r6
 1012fa0:	e3a02000 	mov	r2, #0
 1012fa4:	eafffeca 	b	1012ad4 <spicmd_csi_setup_testpatt+0x28c>
			for(i = 0, j = init_value; i < size; i += 2, j++) {
 1012fa8:	e3a02000 	mov	r2, #0
 1012fac:	e1a01002 	mov	r1, r2
 1012fb0:	eaffffbe 	b	1012eb0 <spicmd_csi_setup_testpatt+0x668>
			d_printf(D_WARN, "spicmd: undefined testpatt!");
 1012fb4:	e30a1fe4 	movw	r1, #45028	; 0xafe4
 1012fb8:	e3a00003 	mov	r0, #3
 1012fbc:	e3401106 	movt	r1, #262	; 0x106
 1012fc0:	ebfff0e8 	bl	100f368 <d_printf>
 1012fc4:	eafffe9f 	b	1012a48 <spicmd_csi_setup_testpatt+0x200>

01012fc8 <spicmd_csi_set_params_queue>:
void spicmd_csi_setup_bitpack_wave(struct spi_command_alloc_t *cmd)
{
}

void spicmd_csi_set_params_queue(struct spi_command_alloc_t *cmd)
{
 1012fc8:	e92d4070 	push	{r4, r5, r6, lr}
 1012fcc:	e1a03000 	mov	r3, r0
	uint8_t data_type = cmd->args[2];
	uint16_t wct = UINT16_UNPACK(cmd, 0);
 1012fd0:	e5d0200c 	ldrb	r2, [r0, #12]

	d_printf(D_INFO, "spicmd_csi_set_params_queue: 0x%02x 0x%04x", data_type, wct);
 1012fd4:	e30b1000 	movw	r1, #45056	; 0xb000
 1012fd8:	e3401106 	movt	r1, #262	; 0x106
	uint16_t wct = UINT16_UNPACK(cmd, 0);
 1012fdc:	e5d0400d 	ldrb	r4, [r0, #13]
	d_printf(D_INFO, "spicmd_csi_set_params_queue: 0x%02x 0x%04x", data_type, wct);
 1012fe0:	e3a00002 	mov	r0, #2
	uint8_t data_type = cmd->args[2];
 1012fe4:	e5d3500e 	ldrb	r5, [r3, #14]
	uint16_t wct = UINT16_UNPACK(cmd, 0);
 1012fe8:	e1844402 	orr	r4, r4, r2, lsl #8
	d_printf(D_INFO, "spicmd_csi_set_params_queue: 0x%02x 0x%04x", data_type, wct);
 1012fec:	e1a02005 	mov	r2, r5
 1012ff0:	e1a03004 	mov	r3, r4
 1012ff4:	ebfff0db 	bl	100f368 <d_printf>
	mipi_csi_set_datatype_and_frame_wct(data_type, wct);
 1012ff8:	e1a01004 	mov	r1, r4
 1012ffc:	e1a00005 	mov	r0, r5
}
 1013000:	e8bd4070 	pop	{r4, r5, r6, lr}
	mipi_csi_set_datatype_and_frame_wct(data_type, wct);
 1013004:	eafff5b4 	b	10106dc <mipi_csi_set_datatype_and_frame_wct>

01013008 <spicmd_csi_stream_clear_queue>:

void spicmd_csi_stream_clear_queue(struct spi_command_alloc_t *cmd)
{
	mipi_csi_clear_queue();
 1013008:	eafff685 	b	1010a24 <mipi_csi_clear_queue>

0101300c <spicmd_csi_stream_unpop_start>:
}

void spicmd_csi_stream_unpop_start(struct spi_command_alloc_t *cmd)
{
	mipi_csi_unpop_and_start();
 101300c:	eafff69d 	b	1010a88 <mipi_csi_unpop_and_start>

01013010 <spicmd_csi_stream_unpop_start_all>:
}

void spicmd_csi_stream_unpop_start_all(struct spi_command_alloc_t *cmd)
{
	mipi_csi_unpop_and_start_all();
 1013010:	eafff6a8 	b	1010ab8 <mipi_csi_unpop_and_start_all>

01013014 <spicmd_csi_stream_stop>:
}

void spicmd_csi_stream_stop(struct spi_command_alloc_t *cmd)
{
	mipi_csi_stop();
 1013014:	eafff7fd 	b	1011010 <mipi_csi_stop>

01013018 <spicmd_csi_status>:
}

void spicmd_csi_status(struct spi_command_alloc_t *cmd)
{
 1013018:	e92d4010 	push	{r4, lr}
 101301c:	e24dd008 	sub	sp, sp, #8
 1013020:	e1a04000 	mov	r4, r0
	struct mipi_csi_status_t status_resp;

	//d_printf(D_INFO, "StaReq");

	mipi_csi_get_status(&status_resp);
 1013024:	e1a0000d 	mov	r0, sp
 1013028:	ebfff768 	bl	1010dd0 <mipi_csi_get_status>
	spi_command_pack_response_simple(cmd, &status_resp, sizeof(struct mipi_csi_status_t));
 101302c:	e1a0100d 	mov	r1, sp
 1013030:	e1a00004 	mov	r0, r4
 1013034:	e3a02008 	mov	r2, #8
 1013038:	ebfffb70 	bl	1011e00 <spi_command_pack_response_simple>
}
 101303c:	e28dd008 	add	sp, sp, #8
 1013040:	e8bd8010 	pop	{r4, pc}

01013044 <spicmd_comp0>:
/*
 * Composite command 0.  This command can control acquisition stop/start/rewind/swap,
 * as well as start streaming CSI data and return previously configured measurements.
 */
void spicmd_comp0(struct spi_command_alloc_t *cmd)
{
 1013044:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1013048:	e1a05000 	mov	r5, r0
								  sizeof(struct mipi_tx_size_resp_t) + 4;

	struct acq_status_resp_t acq_status_resp;
	struct mipi_tx_size_resp_t mipi_tx_size_resp;

	uint16_t func = UINT16_UNPACK(cmd, 0);
 101304c:	e5d0300c 	ldrb	r3, [r0, #12]
{
 1013050:	e24dd024 	sub	sp, sp, #36	; 0x24
	uint16_t func = UINT16_UNPACK(cmd, 0);
 1013054:	e5d0400d 	ldrb	r4, [r0, #13]
 1013058:	e1d070bc 	ldrh	r7, [r0, #12]
 101305c:	e1844403 	orr	r4, r4, r3, lsl #8
	void *resp_buffer_base;
	void *resp_buffer;
	int resp_size = 0, size = 0;

	// Commands below must be executed in order to create the right behaviour...
	if(func & SPICOMP0_ACQ_STOP) {
 1013060:	e3140001 	tst	r4, #1
 1013064:	0a000004 	beq	101307c <spicmd_comp0+0x38>
/*
 * Return the state of the engine.
 */
inline int acq_get_state()
{
	return g_acq_state.state;
 1013068:	e30532d8 	movw	r3, #21208	; 0x52d8
 101306c:	e3403107 	movt	r3, #263	; 0x107
		if(acq_get_state() != ACQSTATE_STOPPED) {
 1013070:	e5933000 	ldr	r3, [r3]
 1013074:	e3530001 	cmp	r3, #1
 1013078:	1a000037 	bne	101315c <spicmd_comp0+0x118>
			acq_stop();
		}
	}

	if(func & SPICOMP0_ACQ_GET_STATUS) {
 101307c:	e2146002 	ands	r6, r4, #2
 1013080:	1a000038 	bne	1013168 <spicmd_comp0+0x124>
		acq_make_status(&acq_status_resp);
	}

	//d_printf(D_INFO, "w:%d", acq_status_resp.waves_done);

	if(func & SPICOMP0_RESP_CSI_SIZE) {
 1013084:	e2148a01 	ands	r8, r4, #4096	; 0x1000
 1013088:	1a00003a 	bne	1013178 <spicmd_comp0+0x134>
		mipi_csi_get_size_report(&mipi_tx_size_resp);
	}

	if(func & SPICOMP0_ACQ_REWIND) {
 101308c:	e3140004 	tst	r4, #4
 1013090:	1a00003c 	bne	1013188 <spicmd_comp0+0x144>
	//d_printf(D_INFO, "Pfirstptr=0x%08x", g_acq_state.acq_first);

	//d_printf(D_INFO, "Swap_Ptrs=0x%08x 0x%08x", g_acq_state.acq_first, g_acq_state.acq_done_first);

	// for now, only stream if exact # waves available
	if(func & SPICOMP0_SEND_CSI_WAVES) {
 1013094:	e2149040 	ands	r9, r4, #64	; 0x40
 1013098:	1a00003d 	bne	1013194 <spicmd_comp0+0x150>
		//d_printf(D_INFO, "q_waves");
		mipi_csi_queue_all_waves();
		csi_to_send = 1;
	}

	if(func & SPICOMP0_ACQ_SWAP) {
 101309c:	e3140020 	tst	r4, #32
 10130a0:	1a00003f 	bne	10131a4 <spicmd_comp0+0x160>
		//d_printf(D_WARN, "SWAP");
		acq_swap();
	}

	if(func & SPICOMP0_ACQ_START_RESFIFO) {
 10130a4:	e2140008 	ands	r0, r4, #8
 10130a8:	1a000040 	bne	10131b0 <spicmd_comp0+0x16c>
		//d_printf(D_INFO, "ResFifo");
		acq_start(1);
	} else if(func & SPICOMP0_ACQ_START_NORESFIFO) {
 10130ac:	e3140010 	tst	r4, #16
 10130b0:	1a000044 	bne	10131c8 <spicmd_comp0+0x184>
		//d_printf(D_INFO, "NORESET");
		acq_start(0);
	}

	if(csi_to_send) {
 10130b4:	e3590000 	cmp	r9, #0
 10130b8:	1a000040 	bne	10131c0 <spicmd_comp0+0x17c>
	/*
	 * Check what we need to pack into the response buffer.  Malloc enough bytes for everything
	 * to be added, but calculate the actual size later.  free() will be called when the transmission
	 * is completed for this packet.
	 */
	resp_buffer_base = calloc(resp_buff_maxsize, 1);
 10130bc:	e3a01001 	mov	r1, #1
 10130c0:	e3a00016 	mov	r0, #22
 10130c4:	fa0022bb 	blx	101bbb8 <calloc>
	D_ASSERT(resp_buffer_base != NULL);
 10130c8:	e250c000 	subs	ip, r0, #0
 10130cc:	0a00003f 	beq	10131d0 <spicmd_comp0+0x18c>
	return g_acq_state.num_acq_request;
 10130d0:	e30532d8 	movw	r3, #21208	; 0x52d8
	//d_printf(D_INFO, "resp_buffer=0x%08x, resp_size=%d", resp_buffer, resp_buff_maxsize);

	// AWFUL HACK
	acq_status_resp.waves_done = acq_get_nwaves_request();

	if(func & SPICOMP0_ACQ_GET_STATUS) {
 10130d4:	e3560000 	cmp	r6, #0
 10130d8:	e3403107 	movt	r3, #263	; 0x107
		size = sizeof(struct acq_status_resp_t);
		memcpy(resp_buffer, &acq_status_resp, size);
 10130dc:	128d200c 	addne	r2, sp, #12
	acq_status_resp.waves_done = acq_get_nwaves_request();
 10130e0:	e5933774 	ldr	r3, [r3, #1908]	; 0x774
		resp_buffer += size;
		//d_printf(D_INFO, "resp_buffer=0x%08x acq_status_ptr=0x%08x size=%d", resp_buffer, &acq_status_resp, size);
		resp_size += size;
 10130e4:	13a06006 	movne	r6, #6
 10130e8:	03a0200c 	moveq	r2, #12
	acq_status_resp.waves_done = acq_get_nwaves_request();
 10130ec:	e58d300c 	str	r3, [sp, #12]
		resp_buffer += size;
 10130f0:	128c3006 	addne	r3, ip, #6
		memcpy(resp_buffer, &acq_status_resp, size);
 10130f4:	18920003 	ldmne	r2, {r0, r1}
 10130f8:	01a0300c 	moveq	r3, ip
		resp_buffer += size;
 10130fc:	13a02012 	movne	r2, #18
		memcpy(resp_buffer, &acq_status_resp, size);
 1013100:	158c0000 	strne	r0, [ip]
 1013104:	11cc10b4 	strhne	r1, [ip, #4]
	}

	if(func & SPICOMP0_RESP_CSI_SIZE) {
 1013108:	e3580000 	cmp	r8, #0
 101310c:	0a000006 	beq	101312c <spicmd_comp0+0xe8>
		size = sizeof(struct mipi_tx_size_resp_t);
		memcpy(resp_buffer, &mipi_tx_size_resp, size);
 1013110:	e28de014 	add	lr, sp, #20
		resp_buffer += size;
		//d_printf(D_INFO, "resp_buffer=0x%08x csi_status_ptr=0x%08x size=%d", resp_buffer, &mipi_tx_size_resp, size);
		resp_size += size;
 1013114:	e1a06002 	mov	r6, r2
		memcpy(resp_buffer, &mipi_tx_size_resp, size);
 1013118:	e8be0007 	ldm	lr!, {r0, r1, r2}
		resp_buffer += size;
 101311c:	e283300c 	add	r3, r3, #12
		memcpy(resp_buffer, &mipi_tx_size_resp, size);
 1013120:	e503000c 	str	r0, [r3, #-12]
 1013124:	e5031008 	str	r1, [r3, #-8]
 1013128:	e5032004 	str	r2, [r3, #-4]
	}

	// Add trailing bytes: copy of flags transmitted plus 0x55 0xcc
	*(uint8_t*)(resp_buffer + 0) = func >> 8;
	*(uint8_t*)(resp_buffer + 1) = func;
	*(uint8_t*)(resp_buffer + 2) = 0x55;
 101312c:	e30cec55 	movw	lr, #52309	; 0xcc55
	*(uint8_t*)(resp_buffer + 0) = func >> 8;
 1013130:	e1c370b0 	strh	r7, [r3]
	*(uint8_t*)(resp_buffer + 2) = 0x55;
 1013134:	e34fefff 	movt	lr, #65535	; 0xffff
	*(uint8_t*)(resp_buffer + 3) = 0xcc;

	//d_printf(D_INFO, "resp_buffer=0x%08x resp_size=%d", resp_buffer_base, resp_size);
	spi_command_pack_response_pre_alloc(cmd, resp_buffer_base, resp_size);
 1013138:	e1a02006 	mov	r2, r6
 101313c:	e1a0100c 	mov	r1, ip
 1013140:	e1a00005 	mov	r0, r5
	*(uint8_t*)(resp_buffer + 2) = 0x55;
 1013144:	e1c3e0b2 	strh	lr, [r3, #2]
	spi_command_pack_response_pre_alloc(cmd, resp_buffer_base, resp_size);
 1013148:	ebfffb50 	bl	1011e90 <spi_command_pack_response_pre_alloc>

	// Ugh.  HACK!
	bogo_delay(5000);
 101314c:	e3010388 	movw	r0, #5000	; 0x1388
 1013150:	ebfff06b 	bl	100f304 <bogo_delay>
	//free(resp_buffer);
	//d_printf(D_INFO, "done");

	//spi_command_pack_response_simple(cmd, &acq_status_resp, 1);
	//d_printf(D_INFO, "eof");
}
 1013154:	e28dd024 	add	sp, sp, #36	; 0x24
 1013158:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
			acq_stop();
 101315c:	ebffe1c9 	bl	100b888 <acq_stop>
	if(func & SPICOMP0_ACQ_GET_STATUS) {
 1013160:	e2146002 	ands	r6, r4, #2
 1013164:	0affffc6 	beq	1013084 <spicmd_comp0+0x40>
		acq_make_status(&acq_status_resp);
 1013168:	e28d000c 	add	r0, sp, #12
 101316c:	ebffe1f0 	bl	100b934 <acq_make_status>
	if(func & SPICOMP0_RESP_CSI_SIZE) {
 1013170:	e2148a01 	ands	r8, r4, #4096	; 0x1000
 1013174:	0affffc4 	beq	101308c <spicmd_comp0+0x48>
		mipi_csi_get_size_report(&mipi_tx_size_resp);
 1013178:	e28d0014 	add	r0, sp, #20
 101317c:	ebfff732 	bl	1010e4c <mipi_csi_get_size_report>
	if(func & SPICOMP0_ACQ_REWIND) {
 1013180:	e3140004 	tst	r4, #4
 1013184:	0affffc2 	beq	1013094 <spicmd_comp0+0x50>
		acq_rewind();
 1013188:	ebffdfa6 	bl	100b028 <acq_rewind>
	if(func & SPICOMP0_SEND_CSI_WAVES) {
 101318c:	e2149040 	ands	r9, r4, #64	; 0x40
 1013190:	0affffc1 	beq	101309c <spicmd_comp0+0x58>
		mipi_csi_queue_all_waves();
 1013194:	ebfff515 	bl	10105f0 <mipi_csi_queue_all_waves>
	if(func & SPICOMP0_ACQ_SWAP) {
 1013198:	e3140020 	tst	r4, #32
		csi_to_send = 1;
 101319c:	e3a09001 	mov	r9, #1
	if(func & SPICOMP0_ACQ_SWAP) {
 10131a0:	0affffbf 	beq	10130a4 <spicmd_comp0+0x60>
		acq_swap();
 10131a4:	ebffdfba 	bl	100b094 <acq_swap>
	if(func & SPICOMP0_ACQ_START_RESFIFO) {
 10131a8:	e2140008 	ands	r0, r4, #8
 10131ac:	0affffbe 	beq	10130ac <spicmd_comp0+0x68>
		acq_start(1);
 10131b0:	e3a00001 	mov	r0, #1
 10131b4:	ebffe156 	bl	100b714 <acq_start>
	if(csi_to_send) {
 10131b8:	e3590000 	cmp	r9, #0
 10131bc:	0affffbe 	beq	10130bc <spicmd_comp0+0x78>
		mipi_csi_unpop_and_start_all();
 10131c0:	ebfff63c 	bl	1010ab8 <mipi_csi_unpop_and_start_all>
 10131c4:	eaffffbc 	b	10130bc <spicmd_comp0+0x78>
		acq_start(0);
 10131c8:	ebffe151 	bl	100b714 <acq_start>
 10131cc:	eaffffb8 	b	10130b4 <spicmd_comp0+0x70>
	D_ASSERT(resp_buffer_base != NULL);
 10131d0:	e3000203 	movw	r0, #515	; 0x203
 10131d4:	e30b302c 	movw	r3, #45100	; 0xb02c
 10131d8:	e30b2044 	movw	r2, #45124	; 0xb044
 10131dc:	e308149c 	movw	r1, #33948	; 0x849c
 10131e0:	e58d0000 	str	r0, [sp]
 10131e4:	e3403106 	movt	r3, #262	; 0x106
 10131e8:	e3a00004 	mov	r0, #4
 10131ec:	e3402106 	movt	r2, #262	; 0x106
 10131f0:	e3401106 	movt	r1, #262	; 0x106
 10131f4:	ebfff05b 	bl	100f368 <d_printf>
 10131f8:	e3e00062 	mvn	r0, #98	; 0x62
 10131fc:	fa00228b 	blx	101bc30 <exit>

01013200 <spicmd_acq_stop>:
	if(g_acq_state.state != ACQSTATE_STOPPED) {
 1013200:	e30532d8 	movw	r3, #21208	; 0x52d8
 1013204:	e3403107 	movt	r3, #263	; 0x107
 1013208:	e5933000 	ldr	r3, [r3]
 101320c:	e3530001 	cmp	r3, #1
 1013210:	012fff1e 	bxeq	lr
{
 1013214:	e92d4010 	push	{r4, lr}
		status = acq_stop();
 1013218:	ebffe19a 	bl	100b888 <acq_stop>
		if(status != ACQRES_OK) {
 101321c:	e2502000 	subs	r2, r0, #0
 1013220:	08bd8010 	popeq	{r4, pc}
			d_printf(D_ERROR, "spi: acquistion unable to stop: %d", status);
 1013224:	e30b1060 	movw	r1, #45152	; 0xb060
 1013228:	e3a00004 	mov	r0, #4
 101322c:	e3401106 	movt	r1, #262	; 0x106
}
 1013230:	e8bd4010 	pop	{r4, lr}
			d_printf(D_ERROR, "spi: acquistion unable to stop: %d", status);
 1013234:	eafff04b 	b	100f368 <d_printf>

01013238 <spicmd_csi_setup_trigpos_all>:
 1013238:	e12fff1e 	bx	lr

0101323c <spicmd_csi_setup_bitpack_wave>:
 101323c:	e12fff1e 	bx	lr

01013240 <spicmd_csi_setup_wave_all>:
 1013240:	e12fff1e 	bx	lr

01013244 <spicmd_csi_setup_trigpos_range>:
 1013244:	e12fff1e 	bx	lr

01013248 <sysctrl_tick_irq>:
 */
void sysctrl_tick_irq(void *cb_ref)
{
	uint32_t status;

	status = XTtcPs_GetInterruptStatus((XTtcPs *)cb_ref);
 1013248:	e5903004 	ldr	r3, [r0, #4]
{
 101324c:	e92d4010 	push	{r4, lr}
	XTtcPs_ClearInterruptStatus((XTtcPs *)cb_ref, status);

	g_sysctrl_state.wakeup = 1;
 1013250:	e3014f20 	movw	r4, #7968	; 0x1f20
 1013254:	e340410c 	movt	r4, #268	; 0x10c
	return *(volatile u32 *) Addr;
 1013258:	e5932054 	ldr	r2, [r3, #84]	; 0x54
 101325c:	e5933054 	ldr	r3, [r3, #84]	; 0x54
 1013260:	e5d4301c 	ldrb	r3, [r4, #28]
	g_sysctrl_state.time_us += SYSCTRL_TIME_ADD_US;
 1013264:	e1c402d0 	ldrd	r0, [r4, #32]
	g_sysctrl_state.wakeup = 1;
 1013268:	e3833001 	orr	r3, r3, #1
 101326c:	e5c4301c 	strb	r3, [r4, #28]
	g_sysctrl_state.time_us += SYSCTRL_TIME_ADD_US;
 1013270:	fa002132 	blx	101b740 <__aeabi_ul2d>
 1013274:	eddf0b05 	vldr	d16, [pc, #20]	; 1013290 <sysctrl_tick_irq+0x48>
 1013278:	ec410b31 	vmov	d17, r0, r1
 101327c:	ee710ba0 	vadd.f64	d16, d17, d16
 1013280:	ec510b30 	vmov	r0, r1, d16
 1013284:	fa0021f5 	blx	101ba60 <__aeabi_d2ulz>
 1013288:	e1c402f0 	strd	r0, [r4, #32]
}
 101328c:	e8bd8010 	pop	{r4, pc}
 1013290:	00000000 	.word	0x00000000
 1013294:	40440000 	.word	0x40440000

01013298 <sysctrl_init>:
{
 1013298:	e92d4070 	push	{r4, r5, r6, lr}
	*LocalAddr = Value;
 101329c:	e3a03a0a 	mov	r3, #40960	; 0xa000
void sysctrl_led_mode(int mode)
{
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);

	// Set mode, reset LED to off.
	g_sysctrl_state.led_mode = mode;
 10132a0:	e3014f20 	movw	r4, #7968	; 0x1f20
 10132a4:	e3a02000 	mov	r2, #0
 10132a8:	e340410c 	movt	r4, #268	; 0x10c
 10132ac:	e3a01001 	mov	r1, #1
 10132b0:	e34e3000 	movt	r3, #57344	; 0xe000
 10132b4:	e34f2dff 	movt	r2, #65023	; 0xfdff
 10132b8:	e584102c 	str	r1, [r4, #44]	; 0x2c
{
 10132bc:	e24dd018 	sub	sp, sp, #24
	g_sysctrl_state.ttc_config = XTtcPs_LookupConfig(SYSCTRL_TTCPS_DEV_ID);
 10132c0:	e3a00000 	mov	r0, #0
 10132c4:	e5832000 	str	r2, [r3]
 10132c8:	eb001d00 	bl	101a6d0 <XTtcPs_LookupConfig>
	D_ASSERT(g_sysctrl_state.ttc_config != NULL) ;
 10132cc:	e3500000 	cmp	r0, #0
	g_sysctrl_state.ttc_config = XTtcPs_LookupConfig(SYSCTRL_TTCPS_DEV_ID);
 10132d0:	e5840018 	str	r0, [r4, #24]
	D_ASSERT(g_sysctrl_state.ttc_config != NULL) ;
 10132d4:	0a000035 	beq	10133b0 <sysctrl_init+0x118>
	XTtcPs_CfgInitialize(&g_sysctrl_state.ttc, g_sysctrl_state.ttc_config, g_sysctrl_state.ttc_config->BaseAddress);
 10132d8:	e5902004 	ldr	r2, [r0, #4]
 10132dc:	e1a01000 	mov	r1, r0
 10132e0:	e1a00004 	mov	r0, r4
 10132e4:	eb001b8e 	bl	101a124 <XTtcPs_CfgInitialize>
	XTtcPs_SetOptions(&g_sysctrl_state.ttc, options);
 10132e8:	e3a01024 	mov	r1, #36	; 0x24
 10132ec:	e1a00004 	mov	r0, r4
 10132f0:	eb001d06 	bl	101a710 <XTtcPs_SetOptions>
	XTtcPs_CalcIntervalFromFreq(&g_sysctrl_state.ttc, SYSCTRL_WAKE_FREQUENCY, &interval, &prescaler);
 10132f4:	e28d3015 	add	r3, sp, #21
 10132f8:	e28d2016 	add	r2, sp, #22
 10132fc:	e1a00004 	mov	r0, r4
 1013300:	e30611a8 	movw	r1, #25000	; 0x61a8
 1013304:	eb001c79 	bl	101a4f0 <XTtcPs_CalcIntervalFromFreq>
	XTtcPs_SetInterval(&g_sysctrl_state.ttc, interval);
 1013308:	e1dd21b6 	ldrh	r2, [sp, #22]
	XTtcPs_SetPrescaler(&g_sysctrl_state.ttc, prescaler);
 101330c:	e1a00004 	mov	r0, r4
	XTtcPs_SetInterval(&g_sysctrl_state.ttc, interval);
 1013310:	e5943004 	ldr	r3, [r4, #4]
 1013314:	e5832024 	str	r2, [r3, #36]	; 0x24
	XTtcPs_SetPrescaler(&g_sysctrl_state.ttc, prescaler);
 1013318:	e5dd1015 	ldrb	r1, [sp, #21]
 101331c:	eb001c21 	bl	101a3a8 <XTtcPs_SetPrescaler>
	d_printf(D_INFO, "sysctrl: ttc configured [input_clock:%d Hz, frequency:%d Hz, interval:%d, prescaler:%d, actual_freq:%d Hz]", \
 1013320:	e5946008 	ldr	r6, [r4, #8]
 1013324:	e1dd51b6 	ldrh	r5, [sp, #22]
 1013328:	e1a00006 	mov	r0, r6
 101332c:	e1a01005 	mov	r1, r5
 1013330:	fa001ef4 	blx	101af08 <__udivsi3>
 1013334:	e5dd3015 	ldrb	r3, [sp, #21]
 1013338:	e30b1348 	movw	r1, #45896	; 0xb348
 101333c:	e58d0008 	str	r0, [sp, #8]
 1013340:	e1a02006 	mov	r2, r6
 1013344:	e58d5000 	str	r5, [sp]
 1013348:	e3401106 	movt	r1, #262	; 0x106
 101334c:	e58d3004 	str	r3, [sp, #4]
 1013350:	e3a00002 	mov	r0, #2
 1013354:	e30631a8 	movw	r3, #25000	; 0x61a8
 1013358:	ebfff002 	bl	100f368 <d_printf>
	XScuGic_Connect(&g_hal.xscu_gic, XPAR_XTTCPS_0_INTR, (Xil_ExceptionHandler)sysctrl_tick_irq, &g_sysctrl_state.ttc);
 101335c:	e3032248 	movw	r2, #12872	; 0x3248
 1013360:	e3050b80 	movw	r0, #23424	; 0x5b80
 1013364:	e1a03004 	mov	r3, r4
 1013368:	e3402101 	movt	r2, #257	; 0x101
 101336c:	e3a0102a 	mov	r1, #42	; 0x2a
 1013370:	e3400107 	movt	r0, #263	; 0x107
 1013374:	eb001009 	bl	10173a0 <XScuGic_Connect>
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_XTTCPS_0_INTR);
 1013378:	e3050b80 	movw	r0, #23424	; 0x5b80
 101337c:	e3a0102a 	mov	r1, #42	; 0x2a
 1013380:	e3400107 	movt	r0, #263	; 0x107
 1013384:	eb00115c 	bl	10178fc <XScuGic_Enable>
	XTtcPs_EnableInterrupts(&g_sysctrl_state.ttc, XTTCPS_IXR_INTERVAL_MASK);
 1013388:	e5942004 	ldr	r2, [r4, #4]
	return *(volatile u32 *) Addr;
 101338c:	e5923060 	ldr	r3, [r2, #96]	; 0x60
 1013390:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1013394:	e5823060 	str	r3, [r2, #96]	; 0x60
	XTtcPs_Start(&g_sysctrl_state.ttc);
 1013398:	e5942004 	ldr	r2, [r4, #4]
	return *(volatile u32 *) Addr;
 101339c:	e592300c 	ldr	r3, [r2, #12]
 10133a0:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 10133a4:	e582300c 	str	r3, [r2, #12]
}
 10133a8:	e28dd018 	add	sp, sp, #24
 10133ac:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(g_sysctrl_state.ttc_config != NULL) ;
 10133b0:	e3a0002f 	mov	r0, #47	; 0x2f
 10133b4:	e30b330c 	movw	r3, #45836	; 0xb30c
 10133b8:	e30b2324 	movw	r2, #45860	; 0xb324
 10133bc:	e308149c 	movw	r1, #33948	; 0x849c
 10133c0:	e58d0000 	str	r0, [sp]
 10133c4:	e3403106 	movt	r3, #262	; 0x106
 10133c8:	e3a00004 	mov	r0, #4
 10133cc:	e3402106 	movt	r2, #262	; 0x106
 10133d0:	e3401106 	movt	r1, #262	; 0x106
 10133d4:	ebffefe3 	bl	100f368 <d_printf>
 10133d8:	e3e00062 	mvn	r0, #98	; 0x62
 10133dc:	fa002213 	blx	101bc30 <exit>

010133e0 <systick_get_time_us_nonirq>:
	GLOBAL_IRQ_DISABLE();
 10133e0:	f10c0080 	cpsid	i
	time = g_sysctrl_state.time_us;
 10133e4:	e3013f20 	movw	r3, #7968	; 0x1f20
 10133e8:	e340310c 	movt	r3, #268	; 0x10c
 10133ec:	e1c302d0 	ldrd	r0, [r3, #32]
	GLOBAL_IRQ_ENABLE();
 10133f0:	f1080080 	cpsie	i
}
 10133f4:	e12fff1e 	bx	lr

010133f8 <sysctrl_led_mode>:
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);
 10133f8:	e2403001 	sub	r3, r0, #1
 10133fc:	e3530001 	cmp	r3, #1
 1013400:	8a000008 	bhi	1013428 <sysctrl_led_mode+0x30>
	g_sysctrl_state.led_mode = mode;
 1013404:	e3013f20 	movw	r3, #7968	; 0x1f20
 1013408:	e3a02a0a 	mov	r2, #40960	; 0xa000
 101340c:	e3a01000 	mov	r1, #0
 1013410:	e340310c 	movt	r3, #268	; 0x10c
 1013414:	e34e2000 	movt	r2, #57344	; 0xe000
 1013418:	e34f1dff 	movt	r1, #65023	; 0xfdff
 101341c:	e583002c 	str	r0, [r3, #44]	; 0x2c
 1013420:	e5821000 	str	r1, [r2]
 1013424:	e12fff1e 	bx	lr
{
 1013428:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);
 101342c:	e3a0006f 	mov	r0, #111	; 0x6f
{
 1013430:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);
 1013434:	e30b330c 	movw	r3, #45836	; 0xb30c
 1013438:	e30b23b4 	movw	r2, #46004	; 0xb3b4
 101343c:	e308149c 	movw	r1, #33948	; 0x849c
 1013440:	e58d0000 	str	r0, [sp]
 1013444:	e3403106 	movt	r3, #262	; 0x106
 1013448:	e3a00004 	mov	r0, #4
 101344c:	e3402106 	movt	r2, #262	; 0x106
 1013450:	e3401106 	movt	r1, #262	; 0x106
 1013454:	ebffefc3 	bl	100f368 <d_printf>
 1013458:	e3e00062 	mvn	r0, #98	; 0x62
 101345c:	fa0021f3 	blx	101bc30 <exit>

01013460 <sysctrl_led_tick>:
 * Blinks the LED PS#0 periodically according to the LED counter.  Used as a diagnostic.
 * The LED blinks like a "pulse".
 */
void sysctrl_led_tick()
{
	g_sysctrl_state.led_ctr++;
 1013460:	e3013f20 	movw	r3, #7968	; 0x1f20
 1013464:	e340310c 	movt	r3, #268	; 0x10c
 1013468:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 101346c:	e593102c 	ldr	r1, [r3, #44]	; 0x2c
 1013470:	e2822001 	add	r2, r2, #1

	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 1013474:	e3520b19 	cmp	r2, #25600	; 0x6400
	g_sysctrl_state.led_ctr++;
 1013478:	e5832028 	str	r2, [r3, #40]	; 0x28
	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 101347c:	da000002 	ble	101348c <sysctrl_led_tick+0x2c>
		g_sysctrl_state.led_ctr = 0;
 1013480:	e3a02000 	mov	r2, #0
 1013484:	e5832028 	str	r2, [r3, #40]	; 0x28
	}

	// These values are similar to the values used by the STM32 system controller on Scopy MVP.
	if(g_sysctrl_state.led_mode == SYSCTRL_LED_MODE_HEARTBEAT) {
 1013488:	e12fff1e 	bx	lr
 101348c:	e3510001 	cmp	r1, #1
 1013490:	112fff1e 	bxne	lr
		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON2_SCALE) {
 1013494:	e3003cb2 	movw	r3, #3250	; 0xcb2
 1013498:	e301c932 	movw	ip, #6450	; 0x1932
 101349c:	e152000c 	cmp	r2, ip
 10134a0:	11520003 	cmpne	r2, r3
 10134a4:	e30118e7 	movw	r1, #6375	; 0x18e7
 10134a8:	e3000c67 	movw	r0, #3175	; 0xc67
 10134ac:	03a03001 	moveq	r3, #1
 10134b0:	13a03000 	movne	r3, #0
 10134b4:	e1520001 	cmp	r2, r1
 10134b8:	11520000 	cmpne	r2, r0
 10134bc:	03a02a0a 	moveq	r2, #40960	; 0xa000
 10134c0:	03a01c02 	moveq	r1, #512	; 0x200
 10134c4:	034e2000 	movteq	r2, #57344	; 0xe000
 10134c8:	034f1dff 	movteq	r1, #65023	; 0xfdff
 10134cc:	05821000 	streq	r1, [r2]
			gpio_led_write(0, 1);
		}

		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF2_SCALE) {
 10134d0:	e3530000 	cmp	r3, #0
 10134d4:	13a03a0a 	movne	r3, #40960	; 0xa000
 10134d8:	13a02000 	movne	r2, #0
 10134dc:	134e3000 	movtne	r3, #57344	; 0xe000
 10134e0:	134f2dff 	movtne	r2, #65023	; 0xfdff
 10134e4:	15832000 	strne	r2, [r3]
			gpio_led_write(0, 0);
		}
	}
}
 10134e8:	e12fff1e 	bx	lr

010134ec <sysctrl_xadc_tick>:
 * XADC iteration.
 */
void sysctrl_xadc_tick()
{
	// STUB
}
 10134ec:	e12fff1e 	bx	lr

010134f0 <sysctrl_main_loop>:
/*
 * Main system control loop.  The application never escapes this loop, except
 * by forceful termination.
 */
void sysctrl_main_loop()
{
 10134f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10134f4:	e3014f20 	movw	r4, #7968	; 0x1f20
 10134f8:	e3a05a0a 	mov	r5, #40960	; 0xa000
 10134fc:	e3a07000 	mov	r7, #0
 1013500:	e3a06c02 	mov	r6, #512	; 0x200
 1013504:	e340410c 	movt	r4, #268	; 0x10c
 1013508:	e34e5000 	movt	r5, #57344	; 0xe000
 101350c:	e34f7dff 	movt	r7, #65023	; 0xfdff
 1013510:	e34f6dff 	movt	r6, #65023	; 0xfdff
		}
	}
#endif

	while(1) {
		if(g_sysctrl_state.wakeup) {
 1013514:	e594301c 	ldr	r3, [r4, #28]
 1013518:	e7a03053 	sbfx	r3, r3, #0, #1
 101351c:	e31300ff 	tst	r3, #255	; 0xff
 1013520:	0a000019 	beq	101358c <sysctrl_main_loop+0x9c>
	g_sysctrl_state.led_ctr++;
 1013524:	e5943028 	ldr	r3, [r4, #40]	; 0x28
		g_sysctrl_state.led_ctr = 0;
 1013528:	e3a01000 	mov	r1, #0
 101352c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
	g_sysctrl_state.led_ctr++;
 1013530:	e2833001 	add	r3, r3, #1
	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 1013534:	e3530b19 	cmp	r3, #25600	; 0x6400
	g_sysctrl_state.led_ctr++;
 1013538:	e5843028 	str	r3, [r4, #40]	; 0x28
		g_sysctrl_state.led_ctr = 0;
 101353c:	c5841028 	strgt	r1, [r4, #40]	; 0x28
	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 1013540:	ca00000e 	bgt	1013580 <sysctrl_main_loop+0x90>
	if(g_sysctrl_state.led_mode == SYSCTRL_LED_MODE_HEARTBEAT) {
 1013544:	e3520001 	cmp	r2, #1
 1013548:	1a00000c 	bne	1013580 <sysctrl_main_loop+0x90>
 101354c:	e3002cb2 	movw	r2, #3250	; 0xcb2
 1013550:	e301c932 	movw	ip, #6450	; 0x1932
 1013554:	e153000c 	cmp	r3, ip
 1013558:	11530002 	cmpne	r3, r2
		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON2_SCALE) {
 101355c:	e3000c67 	movw	r0, #3175	; 0xc67
 1013560:	e30118e7 	movw	r1, #6375	; 0x18e7
 1013564:	03a02001 	moveq	r2, #1
 1013568:	13a02000 	movne	r2, #0
 101356c:	e1530001 	cmp	r3, r1
 1013570:	11530000 	cmpne	r3, r0
 1013574:	05856000 	streq	r6, [r5]
		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF2_SCALE) {
 1013578:	e3520000 	cmp	r2, #0
 101357c:	15857000 	strne	r7, [r5]
			sysctrl_led_tick();
			g_sysctrl_state.wakeup = 0;
 1013580:	e5d4301c 	ldrb	r3, [r4, #28]
 1013584:	e7c0301f 	bfc	r3, #0, #1
 1013588:	e5c4301c 	strb	r3, [r4, #28]
		}


		spi_command_tick();
 101358c:	ebfffa58 	bl	1011ef4 <spi_command_tick>
		mipi_csi_tick();
 1013590:	ebfff5b2 	bl	1010c60 <mipi_csi_tick>
		if(g_sysctrl_state.wakeup) {
 1013594:	eaffffde 	b	1013514 <sysctrl_main_loop+0x24>

01013598 <trig_zero_levels>:
	_FAB_CFG_ACCESS(reg) = data;
 1013598:	e3a03000 	mov	r3, #0
 101359c:	e1a02003 	mov	r2, r3
 10135a0:	e34433c0 	movt	r3, #17344	; 0x43c0
 10135a4:	e5832090 	str	r2, [r3, #144]	; 0x90
	fabcfg_write(FAB_CFG_TRIG_LEVEL5, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL6, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL7, 0x00000000);

	return TRIGRES_OK;
}
 10135a8:	e1a00002 	mov	r0, r2
 10135ac:	e5832094 	str	r2, [r3, #148]	; 0x94
 10135b0:	e5832098 	str	r2, [r3, #152]	; 0x98
 10135b4:	e583209c 	str	r2, [r3, #156]	; 0x9c
 10135b8:	e58320a0 	str	r2, [r3, #160]	; 0xa0
 10135bc:	e58320a4 	str	r2, [r3, #164]	; 0xa4
 10135c0:	e58320a8 	str	r2, [r3, #168]	; 0xa8
 10135c4:	e58320ac 	str	r2, [r3, #172]	; 0xac
 10135c8:	e12fff1e 	bx	lr

010135cc <trig_write_levels>:
int trig_write_levels(int comp_group, unsigned int chan_idx, uint8_t demux_mode, int comp_pol, uint16_t trig_lvl_high, uint16_t trig_lvl_low)
{
	uint32_t reg_base;
	uint32_t reg_write;

	if(comp_group == TRIG_COMP_A) {
 10135cc:	e3500000 	cmp	r0, #0
{
 10135d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10135d4:	e1ddc1b8 	ldrh	ip, [sp, #24]
 10135d8:	e1dde1bc 	ldrh	lr, [sp, #28]
	if(comp_group == TRIG_COMP_A) {
 10135dc:	0a00000b 	beq	1013610 <trig_write_levels+0x44>
		reg_base = FAB_CFG_TRIG_LEVEL_A_BASE;
	} else if(comp_group == TRIG_COMP_B) {
 10135e0:	e3500001 	cmp	r0, #1
 10135e4:	1a000048 	bne	101370c <trig_write_levels+0x140>
 10135e8:	e3a080a0 	mov	r8, #160	; 0xa0
 10135ec:	e3a070a4 	mov	r7, #164	; 0xa4
 10135f0:	e3a060a8 	mov	r6, #168	; 0xa8
 10135f4:	e3a050ac 	mov	r5, #172	; 0xac
 10135f8:	e34483c0 	movt	r8, #17344	; 0x43c0
 10135fc:	e34473c0 	movt	r7, #17344	; 0x43c0
 1013600:	e34463c0 	movt	r6, #17344	; 0x43c0
 1013604:	e34453c0 	movt	r5, #17344	; 0x43c0
		reg_base = FAB_CFG_TRIG_LEVEL_B_BASE;
 1013608:	e3a040a0 	mov	r4, #160	; 0xa0
 101360c:	ea000008 	b	1013634 <trig_write_levels+0x68>
 1013610:	e3a08090 	mov	r8, #144	; 0x90
 1013614:	e3a07094 	mov	r7, #148	; 0x94
 1013618:	e3a06098 	mov	r6, #152	; 0x98
 101361c:	e3a0509c 	mov	r5, #156	; 0x9c
 1013620:	e34483c0 	movt	r8, #17344	; 0x43c0
 1013624:	e34473c0 	movt	r7, #17344	; 0x43c0
 1013628:	e34463c0 	movt	r6, #17344	; 0x43c0
 101362c:	e34453c0 	movt	r5, #17344	; 0x43c0
		reg_base = FAB_CFG_TRIG_LEVEL_A_BASE;
 1013630:	e3a04090 	mov	r4, #144	; 0x90
	/*
	 * Compute the data that will be written to all of the registers that are relevant.
	 *
	 * The level high and low registers are packed along with the polarity and enable.
	 */
	if(trig_lvl_low > trig_lvl_high) {
 1013634:	e15e000c 	cmp	lr, ip
 1013638:	8a000033 	bhi	101370c <trig_write_levels+0x140>
		return TRIGRES_PARAM_FAIL;
	}

	if(demux_mode & (ADCDEMUX_12BIT | ADCDEMUX_14BIT)) {
 101363c:	e3120030 	tst	r2, #48	; 0x30
 1013640:	1a000015 	bne	101369c <trig_write_levels+0xd0>

		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
			trig_lvl_low = TRIG_LVL_MAX_PREC;
		}
	} else {
		if(trig_lvl_high > TRIG_LVL_MAX_8B) {
 1013644:	e35c00ff 	cmp	ip, #255	; 0xff
 1013648:	23a0c0ff 	movcs	ip, #255	; 0xff
			trig_lvl_high = TRIG_LVL_MAX_8B;
		}

		if(trig_lvl_low > TRIG_LVL_MAX_8B) {
 101364c:	e35e00ff 	cmp	lr, #255	; 0xff
 1013650:	23a0e0ff 	movcs	lr, #255	; 0xff
			trig_lvl_low = TRIG_LVL_MAX_8B;
		}
	}

	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1013654:	e1a0ca0c 	lsl	ip, ip, #20

	if(comp_pol == TRIG_COMP_POL_NORMAL) {
 1013658:	e3530000 	cmp	r3, #0
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 101365c:	e18cc20e 	orr	ip, ip, lr, lsl #4
 1013660:	e38ce001 	orr	lr, ip, #1
		reg_write |= TRIG_LVL_CH_POLARITY;
 1013664:	038ce003 	orreq	lr, ip, #3
	if(comp_pol == TRIG_COMP_POL_NORMAL) {
 1013668:	0a000001 	beq	1013674 <trig_write_levels+0xa8>
	} else if(comp_pol != TRIG_COMP_POL_INVERT) {
 101366c:	e3530001 	cmp	r3, #1
 1013670:	1a000025 	bne	101370c <trig_write_levels+0x140>
	 *               chan_idx of 1 writes to levels 1A and 3A or 1B and 3B.
	 * In 4 ch mode, chan_idx selects the sole level word that is written.
	 *
	 * Other registers are left unchanged.
	 */
	if(demux_mode & ADCDEMUX_1CH) {
 1013674:	e2120001 	ands	r0, r2, #1
 1013678:	0a00000d 	beq	10136b4 <trig_write_levels+0xe8>
		if(chan_idx == 0) {
 101367c:	e3510000 	cmp	r1, #0
 1013680:	1a000021 	bne	101370c <trig_write_levels+0x140>
 1013684:	e588e000 	str	lr, [r8]
		fabcfg_write(reg_base, reg_write);
	} else {
		return TRIGRES_NOT_IMPLEMENTED;
	}

	return TRIGRES_OK;
 1013688:	e1a00001 	mov	r0, r1
 101368c:	e587e000 	str	lr, [r7]
 1013690:	e586e000 	str	lr, [r6]
 1013694:	e585e000 	str	lr, [r5]
 1013698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		if(trig_lvl_high > TRIG_LVL_MAX_PREC) {
 101369c:	e30007ff 	movw	r0, #2047	; 0x7ff
 10136a0:	e15c0000 	cmp	ip, r0
 10136a4:	21a0c000 	movcs	ip, r0
		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
 10136a8:	e15e0000 	cmp	lr, r0
 10136ac:	21a0e000 	movcs	lr, r0
 10136b0:	eaffffe7 	b	1013654 <trig_write_levels+0x88>
	} else if(demux_mode & ADCDEMUX_2CH) {
 10136b4:	e212c002 	ands	ip, r2, #2
 10136b8:	0a000009 	beq	10136e4 <trig_write_levels+0x118>
		if(chan_idx == 0 || chan_idx == 1) {
 10136bc:	e3510001 	cmp	r1, #1
 10136c0:	8a000011 	bhi	101370c <trig_write_levels+0x140>
			reg_base += chan_idx * 4;
 10136c4:	e0844101 	add	r4, r4, r1, lsl #2
 10136c8:	e2843443 	add	r3, r4, #1124073472	; 0x43000000
 10136cc:	e2841121 	add	r1, r4, #1073741832	; 0x40000008
 10136d0:	e2833503 	add	r3, r3, #12582912	; 0xc00000
 10136d4:	e281150f 	add	r1, r1, #62914560	; 0x3c00000
 10136d8:	e583e000 	str	lr, [r3]
 10136dc:	e581e000 	str	lr, [r1]
 10136e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	} else if(demux_mode & ADCDEMUX_4CH) {
 10136e4:	e3120004 	tst	r2, #4
 10136e8:	0a000009 	beq	1013714 <trig_write_levels+0x148>
		if(chan_idx <= 3) {
 10136ec:	e3510003 	cmp	r1, #3
 10136f0:	8a000005 	bhi	101370c <trig_write_levels+0x140>
			reg_base += chan_idx * 4;
 10136f4:	e1a03101 	lsl	r3, r1, #2
	return TRIGRES_OK;
 10136f8:	e1a0000c 	mov	r0, ip
 10136fc:	e2831443 	add	r1, r3, #1124073472	; 0x43000000
 1013700:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 1013704:	e781e004 	str	lr, [r1, r4]
 1013708:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return TRIGRES_PARAM_FAIL;
 101370c:	e3e00002 	mvn	r0, #2
}
 1013710:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return TRIGRES_NOT_IMPLEMENTED;
 1013714:	e3e00006 	mvn	r0, #6
 1013718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0101371c <trig_configure_always>:
	_FAB_CFG_ACCESS(reg) &= ~data;
 101371c:	e3a03000 	mov	r3, #0
 1013720:	e1a02003 	mov	r2, r3
 1013724:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013728:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET | TRIG_CTRL_TRIG_MODE_ALWAYS);
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_GLOBAL_ENABLE | TRIG_CTRL_TRIGGER_ARM);

	return TRIGRES_OK;
}
 101372c:	e1a00002 	mov	r0, r2
 1013730:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1013734:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013738:	e38222c1 	orr	r2, r2, #268435468	; 0x1000000c
 101373c:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013740:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013744:	e3c2200c 	bic	r2, r2, #12
 1013748:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 101374c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013750:	e3822081 	orr	r2, r2, #129	; 0x81
 1013754:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 1013758:	e12fff1e 	bx	lr

0101375c <trig_configure_edge>:
int trig_configure_edge(unsigned int chan_idx, uint16_t trig_lvl, uint16_t trig_hyst, int edge_type)
{
	uint16_t trig_lo, trig_hi;
	int res;

	if(!(edge_type == TRIG_EDGE_FALLING || edge_type == TRIG_EDGE_RISING || edge_type == TRIG_EDGE_BOTH)) {
 101375c:	e243c001 	sub	ip, r3, #1
 1013760:	e35c0002 	cmp	ip, #2
 1013764:	8a000075 	bhi	1013940 <trig_configure_edge+0x1e4>
		return TRIGRES_PARAM_FAIL;
	}

	if((trig_hyst * 2) > trig_lvl) {
 1013768:	e1510082 	cmp	r1, r2, lsl #1
 101376c:	b3a0c001 	movlt	ip, #1
 1013770:	a3a0c000 	movge	ip, #0
		return TRIGRES_PARAM_FAIL;
	}

	if(chan_idx >= 4) {
 1013774:	e3500003 	cmp	r0, #3
 1013778:	838cc001 	orrhi	ip, ip, #1
 101377c:	e35c0000 	cmp	ip, #0
 1013780:	1a00006e 	bne	1013940 <trig_configure_edge+0x1e4>
		return TRIGRES_PARAM_FAIL;
	}

	trig_lo = trig_lvl - (trig_hyst / 2);
 1013784:	e1a020a2 	lsr	r2, r2, #1
{
 1013788:	e92d4010 	push	{r4, lr}
	trig_lo = trig_lvl - (trig_hyst / 2);
 101378c:	e041e002 	sub	lr, r1, r2
	trig_hi = trig_lvl + (trig_hyst / 2);
 1013790:	e0822001 	add	r2, r2, r1
	trig_lo = trig_lvl - (trig_hyst / 2);
 1013794:	e6ffe07e 	uxth	lr, lr
	trig_hi = trig_lvl + (trig_hyst / 2);
 1013798:	e6ff1072 	uxth	r1, r2

	// Disable interrupts while writing state
	asm("cpsid I");
 101379c:	f10c0080 	cpsid	i
	_FAB_CFG_ACCESS(reg) = data;
 10137a0:	e3a02000 	mov	r2, #0
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET | TRIG_CTRL_TRIG_MODE_EDGE);

	// Set the appropriate edge mode.
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_EDGEA_BITFIELD | TRIG_CTRL_EDGEB_BITFIELD);

	if(edge_type == TRIG_EDGE_FALLING) {
 10137a4:	e3530001 	cmp	r3, #1
 10137a8:	e34423c0 	movt	r2, #17344	; 0x43c0
 10137ac:	e582c090 	str	ip, [r2, #144]	; 0x90
 10137b0:	e582c094 	str	ip, [r2, #148]	; 0x94
 10137b4:	e582c098 	str	ip, [r2, #152]	; 0x98
 10137b8:	e582c09c 	str	ip, [r2, #156]	; 0x9c
 10137bc:	e582c0a0 	str	ip, [r2, #160]	; 0xa0
 10137c0:	e582c0a4 	str	ip, [r2, #164]	; 0xa4
 10137c4:	e582c0a8 	str	ip, [r2, #168]	; 0xa8
 10137c8:	e582c0ac 	str	ip, [r2, #172]	; 0xac
	_FAB_CFG_ACCESS(reg) &= ~data;
 10137cc:	e59240b0 	ldr	r4, [r2, #176]	; 0xb0
 10137d0:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 10137d4:	e592c0b0 	ldr	ip, [r2, #176]	; 0xb0
 10137d8:	e38cc2c2 	orr	ip, ip, #536870924	; 0x2000000c
 10137dc:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 10137e0:	e592c0b0 	ldr	ip, [r2, #176]	; 0xb0
 10137e4:	e3ccc40f 	bic	ip, ip, #251658240	; 0xf000000
 10137e8:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
 10137ec:	0a00003f 	beq	10138f0 <trig_configure_edge+0x194>
		fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_EDGEA_FALLING);
	} else if(edge_type == TRIG_EDGE_RISING) {
 10137f0:	e3530002 	cmp	r3, #2
	_FAB_CFG_ACCESS(reg) |= data;
 10137f4:	e59230b0 	ldr	r3, [r2, #176]	; 0xb0
 10137f8:	03833401 	orreq	r3, r3, #16777216	; 0x1000000
 10137fc:	13833403 	orrne	r3, r3, #50331648	; 0x3000000
 1013800:	e58230b0 	str	r3, [r2, #176]	; 0xb0
	} else if(edge_type == TRIG_EDGE_BOTH) {
		fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_EDGEA_BOTH);
	}

	// Write the levels for COMP_A (COMP_B is unused) and enable the trigger channels.
	res = trig_write_levels(TRIG_COMP_A, chan_idx, g_acq_state.demux_reg, TRIG_COMP_POL_NORMAL, trig_hi, trig_lo);
 1013804:	e30532d8 	movw	r3, #21208	; 0x52d8
	if(trig_lvl_low > trig_lvl_high) {
 1013808:	e15e0001 	cmp	lr, r1
	res = trig_write_levels(TRIG_COMP_A, chan_idx, g_acq_state.demux_reg, TRIG_COMP_POL_NORMAL, trig_hi, trig_lo);
 101380c:	e3403107 	movt	r3, #263	; 0x107
 1013810:	e5d33790 	ldrb	r3, [r3, #1936]	; 0x790
	if(trig_lvl_low > trig_lvl_high) {
 1013814:	8a00004b 	bhi	1013948 <trig_configure_edge+0x1ec>
	if(demux_mode & (ADCDEMUX_12BIT | ADCDEMUX_14BIT)) {
 1013818:	e3130030 	tst	r3, #48	; 0x30
 101381c:	1a000018 	bne	1013884 <trig_configure_edge+0x128>
		if(trig_lvl_high > TRIG_LVL_MAX_8B) {
 1013820:	e35100ff 	cmp	r1, #255	; 0xff
 1013824:	23a010ff 	movcs	r1, #255	; 0xff
		if(trig_lvl_low > TRIG_LVL_MAX_8B) {
 1013828:	e35e00ff 	cmp	lr, #255	; 0xff
 101382c:	23a0e0ff 	movcs	lr, #255	; 0xff
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1013830:	e1a01a01 	lsl	r1, r1, #20
	if(demux_mode & ADCDEMUX_1CH) {
 1013834:	e2132001 	ands	r2, r3, #1
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1013838:	e181120e 	orr	r1, r1, lr, lsl #4
		reg_write |= TRIG_LVL_CH_POLARITY;
 101383c:	e3811003 	orr	r1, r1, #3
	if(demux_mode & ADCDEMUX_1CH) {
 1013840:	0a000015 	beq	101389c <trig_configure_edge+0x140>
		if(chan_idx == 0) {
 1013844:	e3500000 	cmp	r0, #0
	_FAB_CFG_ACCESS(reg) = data;
 1013848:	e3a03000 	mov	r3, #0
 101384c:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013850:	1a00003e 	bne	1013950 <trig_configure_edge+0x1f4>
 1013854:	e5831090 	str	r1, [r3, #144]	; 0x90
 1013858:	e5831094 	str	r1, [r3, #148]	; 0x94
 101385c:	e5831098 	str	r1, [r3, #152]	; 0x98
 1013860:	e583109c 	str	r1, [r3, #156]	; 0x9c
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013864:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013868:	e3c2200c 	bic	r2, r2, #12
 101386c:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1013870:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013874:	e3822081 	orr	r2, r2, #129	; 0x81
 1013878:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	// Remove the resets, enable the trigger engine.
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_GLOBAL_ENABLE | TRIG_CTRL_TRIGGER_ARM);

	// Enable interrupts again
	asm("cpsie I");
 101387c:	f1080080 	cpsie	i

	// Check if level write succeeded
	if(res != TRIGRES_OK) {
 1013880:	e8bd8010 	pop	{r4, pc}
		if(trig_lvl_high > TRIG_LVL_MAX_PREC) {
 1013884:	e30027ff 	movw	r2, #2047	; 0x7ff
 1013888:	e1510002 	cmp	r1, r2
 101388c:	21a01002 	movcs	r1, r2
		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
 1013890:	e15e0002 	cmp	lr, r2
 1013894:	21a0e002 	movcs	lr, r2
 1013898:	eaffffe4 	b	1013830 <trig_configure_edge+0xd4>
	} else if(demux_mode & ADCDEMUX_2CH) {
 101389c:	e213c002 	ands	ip, r3, #2
 10138a0:	0a000016 	beq	1013900 <trig_configure_edge+0x1a4>
		if(chan_idx == 0 || chan_idx == 1) {
 10138a4:	e3500001 	cmp	r0, #1
 10138a8:	8a000026 	bhi	1013948 <trig_configure_edge+0x1ec>
	_FAB_CFG_ACCESS(reg) = data;
 10138ac:	e3a0e090 	mov	lr, #144	; 0x90
 10138b0:	e3a0c098 	mov	ip, #152	; 0x98
	_FAB_CFG_ACCESS(reg) &= ~data;
 10138b4:	e3a03000 	mov	r3, #0
	_FAB_CFG_ACCESS(reg) = data;
 10138b8:	e344e3c0 	movt	lr, #17344	; 0x43c0
	_FAB_CFG_ACCESS(reg) &= ~data;
 10138bc:	e34433c0 	movt	r3, #17344	; 0x43c0
	_FAB_CFG_ACCESS(reg) = data;
 10138c0:	e344c3c0 	movt	ip, #17344	; 0x43c0
 10138c4:	e78e1100 	str	r1, [lr, r0, lsl #2]
 10138c8:	e78c1100 	str	r1, [ip, r0, lsl #2]
	_FAB_CFG_ACCESS(reg) &= ~data;
 10138cc:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
 10138d0:	e3c1100c 	bic	r1, r1, #12
 10138d4:	e58310b0 	str	r1, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 10138d8:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
 10138dc:	e3811081 	orr	r1, r1, #129	; 0x81
 10138e0:	e58310b0 	str	r1, [r3, #176]	; 0xb0
	asm("cpsie I");
 10138e4:	f1080080 	cpsie	i
		return res;
	}

	return TRIGRES_OK;
 10138e8:	e1a00002 	mov	r0, r2
 10138ec:	e8bd8010 	pop	{r4, pc}
 10138f0:	e59230b0 	ldr	r3, [r2, #176]	; 0xb0
 10138f4:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
 10138f8:	e58230b0 	str	r3, [r2, #176]	; 0xb0
 10138fc:	eaffffc0 	b	1013804 <trig_configure_edge+0xa8>
	} else if(demux_mode & ADCDEMUX_4CH) {
 1013900:	e3130004 	tst	r3, #4
 1013904:	0a00001a 	beq	1013974 <trig_configure_edge+0x218>
	_FAB_CFG_ACCESS(reg) = data;
 1013908:	e3a02090 	mov	r2, #144	; 0x90
	_FAB_CFG_ACCESS(reg) &= ~data;
 101390c:	e3a03000 	mov	r3, #0
 1013910:	e34433c0 	movt	r3, #17344	; 0x43c0
	_FAB_CFG_ACCESS(reg) = data;
 1013914:	e34423c0 	movt	r2, #17344	; 0x43c0
 1013918:	e7821100 	str	r1, [r2, r0, lsl #2]
	_FAB_CFG_ACCESS(reg) &= ~data;
 101391c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013920:	e3c2200c 	bic	r2, r2, #12
 1013924:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1013928:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 101392c:	e3822081 	orr	r2, r2, #129	; 0x81
 1013930:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1013934:	f1080080 	cpsie	i
	return TRIGRES_OK;
 1013938:	e1a0000c 	mov	r0, ip
 101393c:	e8bd8010 	pop	{r4, pc}
		return TRIGRES_PARAM_FAIL;
 1013940:	e3e00002 	mvn	r0, #2
}
 1013944:	e12fff1e 	bx	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013948:	e3a03000 	mov	r3, #0
 101394c:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013950:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013954:	e3c2200c 	bic	r2, r2, #12
 1013958:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 101395c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013960:	e3822081 	orr	r2, r2, #129	; 0x81
 1013964:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1013968:	f1080080 	cpsie	i
		return TRIGRES_PARAM_FAIL;
 101396c:	e3e00002 	mvn	r0, #2
}
 1013970:	e8bd8010 	pop	{r4, pc}
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013974:	e3a03000 	mov	r3, #0
 1013978:	e34433c0 	movt	r3, #17344	; 0x43c0
 101397c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013980:	e3c2200c 	bic	r2, r2, #12
 1013984:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1013988:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 101398c:	e3822081 	orr	r2, r2, #129	; 0x81
 1013990:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1013994:	f1080080 	cpsie	i
		return TRIGRES_NOT_IMPLEMENTED;
 1013998:	e3e00006 	mvn	r0, #6
 101399c:	e8bd8010 	pop	{r4, pc}

010139a0 <trig_configure_holdoff>:
 */
int trig_configure_holdoff(uint64_t holdoff_time_ns)
{
	uint32_t holdoff_reg;

	if(holdoff_time_ns == 0) {
 10139a0:	e1903001 	orrs	r3, r0, r1
 10139a4:	0a000013 	beq	10139f8 <trig_configure_holdoff+0x58>
		fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_HOLDOFF_ENABLE);
		fabcfg_write(FAB_CFG_TRIG_HOLDOFF, 0x00000000);
		return TRIGRES_OK;
	}

	if(holdoff_time_ns < HOLDOFF_NS_MINIMUM) {
 10139a8:	e3a03000 	mov	r3, #0
 10139ac:	e3e0201f 	mvn	r2, #31
 10139b0:	e1510003 	cmp	r1, r3
 10139b4:	01500002 	cmpeq	r0, r2
 10139b8:	81a01003 	movhi	r1, r3
 10139bc:	81a00002 	movhi	r0, r2

	if(holdoff_time_ns > HOLDOFF_NS_MAXIMUM) {
		holdoff_time_ns = HOLDOFF_NS_MAXIMUM;
	}

	holdoff_reg = holdoff_time_ns / HOLDOFF_NS_PER_COUNT;
 10139c0:	e3510000 	cmp	r1, #0
	_FAB_CFG_ACCESS(reg) = data;
 10139c4:	e3a03000 	mov	r3, #0
 10139c8:	03500020 	cmpeq	r0, #32
 10139cc:	e34433c0 	movt	r3, #17344	; 0x43c0
 10139d0:	33a00020 	movcc	r0, #32
 10139d4:	33a01000 	movcc	r1, #0
 10139d8:	e1a021a0 	lsr	r2, r0, #3
	fabcfg_write(FAB_CFG_TRIG_HOLDOFF, holdoff_reg);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_HOLDOFF_ENABLE);

	return TRIGRES_OK;
}
 10139dc:	e3a00000 	mov	r0, #0
	holdoff_reg = holdoff_time_ns / HOLDOFF_NS_PER_COUNT;
 10139e0:	e1822e81 	orr	r2, r2, r1, lsl #29
 10139e4:	e58320c0 	str	r2, [r3, #192]	; 0xc0
	_FAB_CFG_ACCESS(reg) |= data;
 10139e8:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 10139ec:	e3822801 	orr	r2, r2, #65536	; 0x10000
 10139f0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
}
 10139f4:	e12fff1e 	bx	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 10139f8:	e3a03000 	mov	r3, #0
 10139fc:	e3a00000 	mov	r0, #0
	_FAB_CFG_ACCESS(reg) = data;
 1013a00:	e1a01003 	mov	r1, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013a04:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013a08:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013a0c:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 1013a10:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1013a14:	e58310c0 	str	r1, [r3, #192]	; 0xc0
 1013a18:	e12fff1e 	bx	lr

01013a1c <trig_dump_state>:
void trig_dump_state()
{
	uint32_t state_a;
	int i;

	d_printf(D_INFO, "");
 1013a1c:	e3091f80 	movw	r1, #40832	; 0x9f80
{
 1013a20:	e92d4070 	push	{r4, r5, r6, lr}
	d_printf(D_INFO, "");
 1013a24:	e3a00002 	mov	r0, #2
{
 1013a28:	e24dd028 	sub	sp, sp, #40	; 0x28
	d_printf(D_INFO, "");
 1013a2c:	e3401106 	movt	r1, #262	; 0x106

	d_printf(D_INFO, "** Trigger State (Fabric) **");
	d_printf(D_INFO, "");
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1013a30:	e3a05090 	mov	r5, #144	; 0x90
	d_printf(D_INFO, "");
 1013a34:	ebffee4b 	bl	100f368 <d_printf>
	d_printf(D_INFO, "** Trigger State (Fabric) **");
 1013a38:	e30b13f8 	movw	r1, #46072	; 0xb3f8
 1013a3c:	e3a00002 	mov	r0, #2
 1013a40:	e3401106 	movt	r1, #262	; 0x106

	for(i = 0; i < 8; i++) {
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1013a44:	e30b6434 	movw	r6, #46132	; 0xb434
	d_printf(D_INFO, "** Trigger State (Fabric) **");
 1013a48:	ebffee46 	bl	100f368 <d_printf>
	d_printf(D_INFO, "");
 1013a4c:	e3091f80 	movw	r1, #40832	; 0x9f80
 1013a50:	e3a00002 	mov	r0, #2
 1013a54:	e3401106 	movt	r1, #262	; 0x106
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1013a58:	e34453c0 	movt	r5, #17344	; 0x43c0
	d_printf(D_INFO, "");
 1013a5c:	ebffee41 	bl	100f368 <d_printf>
	res = _FAB_CFG_ACCESS(reg);
 1013a60:	e3a03000 	mov	r3, #0
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1013a64:	e30b1418 	movw	r1, #46104	; 0xb418
 1013a68:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013a6c:	e3401106 	movt	r1, #262	; 0x106
 1013a70:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013a74:	e3a00002 	mov	r0, #2
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1013a78:	e3406106 	movt	r6, #262	; 0x106
	for(i = 0; i < 8; i++) {
 1013a7c:	e3a04000 	mov	r4, #0
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1013a80:	ebffee38 	bl	100f368 <d_printf>
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1013a84:	e1a02004 	mov	r2, r4
 1013a88:	e4953004 	ldr	r3, [r5], #4
 1013a8c:	e1a01006 	mov	r1, r6
	for(i = 0; i < 8; i++) {
 1013a90:	e2844001 	add	r4, r4, #1
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1013a94:	e3a00002 	mov	r0, #2
 1013a98:	ebffee32 	bl	100f368 <d_printf>
	for(i = 0; i < 8; i++) {
 1013a9c:	e3540008 	cmp	r4, #8
 1013aa0:	1afffff7 	bne	1013a84 <trig_dump_state+0x68>
 1013aa4:	e3a04000 	mov	r4, #0
	}

	d_printf(D_INFO, "trig_holdoff       = 0x%08x", fabcfg_read(FAB_CFG_TRIG_HOLDOFF));
 1013aa8:	e30b1454 	movw	r1, #46164	; 0xb454
 1013aac:	e34443c0 	movt	r4, #17344	; 0x43c0
 1013ab0:	e3401106 	movt	r1, #262	; 0x106
 1013ab4:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
 1013ab8:	e3a00002 	mov	r0, #2
 1013abc:	ebffee29 	bl	100f368 <d_printf>
	d_printf(D_INFO, "trig_auto_timers   = 0x%08x", fabcfg_read(FAB_CFG_TRIG_AUTO_TIMERS));
 1013ac0:	e30b1470 	movw	r1, #46192	; 0xb470
 1013ac4:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
 1013ac8:	e3401106 	movt	r1, #262	; 0x106
 1013acc:	e3a00002 	mov	r0, #2
 1013ad0:	ebffee24 	bl	100f368 <d_printf>
	d_printf(D_INFO, "trig_delay_reg0    = 0x%08x", fabcfg_read(FAB_CFG_TRIG_DELAY_REG0));
 1013ad4:	e30b148c 	movw	r1, #46220	; 0xb48c
 1013ad8:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
 1013adc:	e3401106 	movt	r1, #262	; 0x106
 1013ae0:	e3a00002 	mov	r0, #2
 1013ae4:	ebffee1f 	bl	100f368 <d_printf>
	d_printf(D_INFO, "trig_delay_reg1    = 0x%08x", fabcfg_read(FAB_CFG_TRIG_DELAY_REG1));
 1013ae8:	e30b14a8 	movw	r1, #46248	; 0xb4a8
 1013aec:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
 1013af0:	e3401106 	movt	r1, #262	; 0x106
 1013af4:	e3a00002 	mov	r0, #2
 1013af8:	ebffee1a 	bl	100f368 <d_printf>
 1013afc:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8

	state_a = fabcfg_read(FAB_CFG_TRIG_STATE_A);

	d_printf(D_INFO, "trig_state_a       = 0x%08x [%c%c%c%c%c%c%c%c] [auto:%d] [trig:%d]",
 1013b00:	e30b14c4 	movw	r1, #46276	; 0xb4c4
 1013b04:	e3401106 	movt	r1, #262	; 0x106
 1013b08:	e3a00002 	mov	r0, #2
 1013b0c:	e3120001 	tst	r2, #1
 1013b10:	13a03054 	movne	r3, #84	; 0x54
 1013b14:	03a03020 	moveq	r3, #32
 1013b18:	e3120002 	tst	r2, #2
 1013b1c:	13a0c041 	movne	ip, #65	; 0x41
 1013b20:	03a0c020 	moveq	ip, #32
 1013b24:	e3120004 	tst	r2, #4
 1013b28:	e58dc000 	str	ip, [sp]
 1013b2c:	13a0e061 	movne	lr, #97	; 0x61
 1013b30:	03a0e020 	moveq	lr, #32
 1013b34:	e3120008 	tst	r2, #8
 1013b38:	e58de004 	str	lr, [sp, #4]
 1013b3c:	13a05073 	movne	r5, #115	; 0x73
 1013b40:	03a05020 	moveq	r5, #32
 1013b44:	e3120010 	tst	r2, #16
 1013b48:	e58d5008 	str	r5, [sp, #8]
 1013b4c:	13a0c072 	movne	ip, #114	; 0x72
 1013b50:	03a0c020 	moveq	ip, #32
 1013b54:	e3120020 	tst	r2, #32
 1013b58:	e58dc00c 	str	ip, [sp, #12]
 1013b5c:	13a0e048 	movne	lr, #72	; 0x48
 1013b60:	03a0e020 	moveq	lr, #32
 1013b64:	e3120040 	tst	r2, #64	; 0x40
 1013b68:	e58de010 	str	lr, [sp, #16]
 1013b6c:	13a0c057 	movne	ip, #87	; 0x57
 1013b70:	03a0c020 	moveq	ip, #32
 1013b74:	e3120080 	tst	r2, #128	; 0x80
 1013b78:	e58dc014 	str	ip, [sp, #20]
 1013b7c:	13a0c049 	movne	ip, #73	; 0x49
 1013b80:	03a0c020 	moveq	ip, #32
 1013b84:	e58dc018 	str	ip, [sp, #24]
 1013b88:	e7e3c652 	ubfx	ip, r2, #12, #4
 1013b8c:	e58dc020 	str	ip, [sp, #32]
 1013b90:	e7e2c4d2 	ubfx	ip, r2, #9, #3
 1013b94:	e58dc01c 	str	ip, [sp, #28]
 1013b98:	ebffedf2 	bl	100f368 <d_printf>
														(state_a & TRIG_STATE_A_ACQ_WAIT_HOLDOFF) 	? 'W' : ' ', \
														(state_a & TRIG_STATE_A_INT_ARM) 			? 'I' : ' ', \
														(state_a & TRIG_STATE_A_DBG_AU_STATE_MASK) >> TRIG_STATE_A_DBG_AU_STATE_SHIFT, \
														(state_a & TRIG_STATE_A_DBG_TRIG_STATE_MASK) >> TRIG_STATE_A_DBG_TRIG_STATE_SHIFT);

	d_printf(D_INFO, "trig_holdoff_debug = 0x%08x", fabcfg_read(FAB_CFG_TRIG_HOLDOFF_DEBUG));
 1013b9c:	e30b1508 	movw	r1, #46344	; 0xb508
 1013ba0:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
 1013ba4:	e3401106 	movt	r1, #262	; 0x106
 1013ba8:	e3a00002 	mov	r0, #2
 1013bac:	ebffeded 	bl	100f368 <d_printf>

	d_printf(D_INFO, "");
 1013bb0:	e3091f80 	movw	r1, #40832	; 0x9f80
 1013bb4:	e3a00002 	mov	r0, #2
 1013bb8:	e3401106 	movt	r1, #262	; 0x106

	//fabcfg_dump_state();
}
 1013bbc:	e28dd028 	add	sp, sp, #40	; 0x28
 1013bc0:	e8bd4070 	pop	{r4, r5, r6, lr}
	d_printf(D_INFO, "");
 1013bc4:	eaffede7 	b	100f368 <d_printf>

01013bc8 <trig_init>:
	_FAB_CFG_ACCESS(reg) = data;
 1013bc8:	e3a03000 	mov	r3, #0
 1013bcc:	e3a0200c 	mov	r2, #12
 1013bd0:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013bd4:	e3402040 	movt	r2, #64	; 0x40
{
 1013bd8:	e92d4010 	push	{r4, lr}
 1013bdc:	e3a0c001 	mov	ip, #1
 1013be0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 1013be4:	e3a02000 	mov	r2, #0
	d_printf(D_INFO, "trigger: defaults loaded");
 1013be8:	e30b1524 	movw	r1, #46372	; 0xb524
 1013bec:	e3a00002 	mov	r0, #2
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013bf0:	e593e0b0 	ldr	lr, [r3, #176]	; 0xb0
 1013bf4:	e3401106 	movt	r1, #262	; 0x106
 1013bf8:	e3cee00c 	bic	lr, lr, #12
 1013bfc:	e583e0b0 	str	lr, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1013c00:	e5832090 	str	r2, [r3, #144]	; 0x90
 1013c04:	e5832094 	str	r2, [r3, #148]	; 0x94
 1013c08:	e5832098 	str	r2, [r3, #152]	; 0x98
 1013c0c:	e583209c 	str	r2, [r3, #156]	; 0x9c
 1013c10:	e58320a0 	str	r2, [r3, #160]	; 0xa0
 1013c14:	e58320a4 	str	r2, [r3, #164]	; 0xa4
 1013c18:	e58320a8 	str	r2, [r3, #168]	; 0xa8
 1013c1c:	e58320ac 	str	r2, [r3, #172]	; 0xac
 1013c20:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
 1013c24:	e58320c0 	str	r2, [r3, #192]	; 0xc0
 1013c28:	e583c0c4 	str	ip, [r3, #196]	; 0xc4
 1013c2c:	e58320c4 	str	r2, [r3, #196]	; 0xc4
 1013c30:	e583c0c8 	str	ip, [r3, #200]	; 0xc8
 1013c34:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1013c38:	e583c0cc 	str	ip, [r3, #204]	; 0xcc
 1013c3c:	e58320cc 	str	r2, [r3, #204]	; 0xcc
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013c40:	e593c0b0 	ldr	ip, [r3, #176]	; 0xb0
 1013c44:	e3ccc801 	bic	ip, ip, #65536	; 0x10000
 1013c48:	e583c0b0 	str	ip, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1013c4c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
 1013c50:	ebffedc4 	bl	100f368 <d_printf>
}
 1013c54:	e8bd4010 	pop	{r4, lr}
	trig_dump_state();
 1013c58:	eaffff6f 	b	1013a1c <trig_dump_state>

01013c5c <trig_has_trigd>:
	res = _FAB_CFG_ACCESS(reg);
 1013c5c:	e3a03000 	mov	r3, #0
 1013c60:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013c64:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
	uint32_t state;

	state = fabcfg_read(FAB_CFG_TRIG_STATE_A);

	// Possible complication: what to do if we get a TRIG'D & AUTO event in same window?
	if(state & TRIG_STATE_A_TRIGD) {
 1013c68:	e3130001 	tst	r3, #1
 1013c6c:	1a000003 	bne	1013c80 <trig_has_trigd+0x24>
		res = TRIG_STATUS_TRIGD;
	} else if(state & (TRIG_STATE_A_AUTO_TRIGD | TRIG_STATE_A_AUTO_TRIG_REPD)) {
 1013c70:	e3130006 	tst	r3, #6
		res = TRIG_STATUS_AUTO;
 1013c74:	03a00000 	moveq	r0, #0
 1013c78:	13a00002 	movne	r0, #2
 1013c7c:	e12fff1e 	bx	lr
		res = TRIG_STATUS_TRIGD;
 1013c80:	e3a00001 	mov	r0, #1
	}

	return res;
}
 1013c84:	e12fff1e 	bx	lr

01013c88 <trig_arm>:
	_FAB_CFG_ACCESS(reg) |= data;
 1013c88:	e3a03000 	mov	r3, #0
 1013c8c:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013c90:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013c94:	e3822080 	orr	r2, r2, #128	; 0x80
 1013c98:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 * Arm the trigger.
 */
void trig_arm()
{
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_ARM);
}
 1013c9c:	e12fff1e 	bx	lr

01013ca0 <trig_disarm>:
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013ca0:	e3a03000 	mov	r3, #0
 1013ca4:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013ca8:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013cac:	e3c22080 	bic	r2, r2, #128	; 0x80
 1013cb0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 * Disarm the trigger.
 */
void trig_disarm()
{
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_ARM);
}
 1013cb4:	e12fff1e 	bx	lr

01013cb8 <trig_force>:
	_FAB_CFG_ACCESS(reg) |= data;
 1013cb8:	e3a03000 	mov	r3, #0
 1013cbc:	e34433c0 	movt	r3, #17344	; 0x43c0
 1013cc0:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013cc4:	e3822010 	orr	r2, r2, #16
 1013cc8:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1013ccc:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1013cd0:	e3c22010 	bic	r2, r2, #16
 1013cd4:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 */
void trig_force()
{
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_FORCE_TRIGGER);
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_FORCE_TRIGGER);
}
 1013cd8:	e12fff1e 	bx	lr

01013cdc <XAxiDma_Reset>:
	UINTPTR RegBase;
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_BdRing *RxRingPtr;
	int RingIndex;

	if (InstancePtr->HasMm2S) {
 1013cdc:	e5903004 	ldr	r3, [r0, #4]
{
 1013ce0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if (InstancePtr->HasMm2S) {
 1013ce4:	e3530000 	cmp	r3, #0
 1013ce8:	0a000019 	beq	1013d54 <XAxiDma_Reset+0x78>
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* Save the locations of current BDs both rings are working on
		 * before the reset so later we can resume the rings smoothly.
		 */
		if(XAxiDma_HasSg(InstancePtr)){
 1013cec:	e5903010 	ldr	r3, [r0, #16]
 1013cf0:	e3530000 	cmp	r3, #0
 1013cf4:	1a00001a 	bne	1013d64 <XAxiDma_Reset+0x88>
*
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1013cf8:	e5902000 	ldr	r2, [r0]
	*LocalAddr = Value;
 1013cfc:	e3a01004 	mov	r1, #4

	/* Set TX/RX Channel state */
	if (InstancePtr->HasMm2S) {
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1013d00:	e3a03002 	mov	r3, #2
 1013d04:	e5821000 	str	r1, [r2]
 1013d08:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 1013d0c:	e5903008 	ldr	r3, [r0, #8]
 1013d10:	e3530000 	cmp	r3, #0
 1013d14:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1013d18:	e5901744 	ldr	r1, [r0, #1860]	; 0x744
 1013d1c:	e3510000 	cmp	r1, #0
 1013d20:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
 1013d24:	e3a03000 	mov	r3, #0
						RingIndex++) {
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);
			if (InstancePtr->HasS2Mm) {
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1013d28:	e3a0e06c 	mov	lr, #108	; 0x6c
 1013d2c:	e3a0c002 	mov	ip, #2
 1013d30:	e022039e 	mla	r2, lr, r3, r0
						RingIndex++) {
 1013d34:	e2833001 	add	r3, r3, #1
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1013d38:	e1530001 	cmp	r3, r1
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1013d3c:	e582c088 	str	ip, [r2, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1013d40:	1afffffa 	bne	1013d30 <XAxiDma_Reset+0x54>
 1013d44:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	if (InstancePtr->HasMm2S) {
 1013d48:	e5903004 	ldr	r3, [r0, #4]
 1013d4c:	e3530000 	cmp	r3, #0
 1013d50:	1affffe8 	bne	1013cf8 <XAxiDma_Reset+0x1c>
		RegBase = InstancePtr->RegBase + XAXIDMA_RX_OFFSET;
 1013d54:	e5903000 	ldr	r3, [r0]
 1013d58:	e3a02004 	mov	r2, #4
 1013d5c:	e5832030 	str	r2, [r3, #48]	; 0x30
	if (InstancePtr->HasMm2S) {
 1013d60:	eaffffe9 	b	1013d0c <XAxiDma_Reset+0x30>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1013d64:	e1c021d4 	ldrd	r2, [r0, #20]
 1013d68:	e3530000 	cmp	r3, #0
 1013d6c:	1a000018 	bne	1013dd4 <XAxiDma_Reset+0xf8>
	return *(volatile u32 *) Addr;
 1013d70:	e5923008 	ldr	r3, [r2, #8]
 1013d74:	e580305c 	str	r3, [r0, #92]	; 0x5c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1013d78:	e590c744 	ldr	ip, [r0, #1860]	; 0x744
 1013d7c:	e35c0000 	cmp	ip, #0
 1013d80:	daffffdc 	ble	1013cf8 <XAxiDma_Reset+0x1c>
 1013d84:	e3a0206c 	mov	r2, #108	; 0x6c
 1013d88:	e1a03000 	mov	r3, r0
 1013d8c:	e02c0c92 	mla	ip, r2, ip, r0
 1013d90:	ea000008 	b	1013db8 <XAxiDma_Reset+0xdc>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1013d94:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
 1013d98:	e3520000 	cmp	r2, #0
 1013d9c:	e282e001 	add	lr, r2, #1
 1013da0:	0a000008 	beq	1013dc8 <XAxiDma_Reset+0xec>
 1013da4:	e791228e 	ldr	r2, [r1, lr, lsl #5]
 1013da8:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1013dac:	e283306c 	add	r3, r3, #108	; 0x6c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1013db0:	e15c0003 	cmp	ip, r3
 1013db4:	0affffe3 	beq	1013d48 <XAxiDma_Reset+0x6c>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1013db8:	e5932084 	ldr	r2, [r3, #132]	; 0x84
 1013dbc:	e5931080 	ldr	r1, [r3, #128]	; 0x80
 1013dc0:	e3520000 	cmp	r2, #0
 1013dc4:	1afffff2 	bne	1013d94 <XAxiDma_Reset+0xb8>
 1013dc8:	e5912008 	ldr	r2, [r1, #8]
 1013dcc:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1013dd0:	eafffff5 	b	1013dac <XAxiDma_Reset+0xd0>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1013dd4:	e5903078 	ldr	r3, [r0, #120]	; 0x78
 1013dd8:	e3530000 	cmp	r3, #0
 1013ddc:	0affffe3 	beq	1013d70 <XAxiDma_Reset+0x94>
 1013de0:	e2833001 	add	r3, r3, #1
 1013de4:	e7923283 	ldr	r3, [r2, r3, lsl #5]
 1013de8:	e580305c 	str	r3, [r0, #92]	; 0x5c
 1013dec:	eaffffe1 	b	1013d78 <XAxiDma_Reset+0x9c>

01013df0 <XAxiDma_ResetIsDone>:
	TxRingPtr = XAxiDma_GetTxRing(InstancePtr);
	RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

	/* Check transmit channel
	 */
	if (InstancePtr->HasMm2S) {
 1013df0:	e5903004 	ldr	r3, [r0, #4]
 1013df4:	e3530000 	cmp	r3, #0
 1013df8:	0a000003 	beq	1013e0c <XAxiDma_ResetIsDone+0x1c>
 1013dfc:	e5903014 	ldr	r3, [r0, #20]
 1013e00:	e5933000 	ldr	r3, [r3]
		RegisterValue = XAxiDma_ReadReg(TxRingPtr->ChanBase,
			XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1013e04:	e3130004 	tst	r3, #4
 1013e08:	1a000009 	bne	1013e34 <XAxiDma_ResetIsDone+0x44>
		}
	}

	/* Check receive channel
	 */
	if (InstancePtr->HasS2Mm) {
 1013e0c:	e5903008 	ldr	r3, [r0, #8]
 1013e10:	e3530000 	cmp	r3, #0
 1013e14:	0a000004 	beq	1013e2c <XAxiDma_ResetIsDone+0x3c>
 1013e18:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1013e1c:	e5930000 	ldr	r0, [r3]
		RegisterValue = XAxiDma_ReadReg(RxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1013e20:	e2200004 	eor	r0, r0, #4
 1013e24:	e7e00150 	ubfx	r0, r0, #2, #1
 1013e28:	e12fff1e 	bx	lr

			return 0;
		}
	}

	return 1;
 1013e2c:	e3a00001 	mov	r0, #1
}
 1013e30:	e12fff1e 	bx	lr
			return 0;
 1013e34:	e3a00000 	mov	r0, #0
 1013e38:	e12fff1e 	bx	lr

01013e3c <XAxiDma_CfgInitialize>:
{
 1013e3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!Config) {
 1013e40:	e2515000 	subs	r5, r1, #0
	InstancePtr->Initialized = 0;
 1013e44:	e3a01000 	mov	r1, #0
{
 1013e48:	e24dd00c 	sub	sp, sp, #12
	InstancePtr->Initialized = 0;
 1013e4c:	e580100c 	str	r1, [r0, #12]
		return XST_INVALID_PARAM;
 1013e50:	03a0000f 	moveq	r0, #15
	if(!Config) {
 1013e54:	0a000078 	beq	101403c <XAxiDma_CfgInitialize+0x200>
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1013e58:	e3a02e75 	mov	r2, #1872	; 0x750
 1013e5c:	e1a04000 	mov	r4, r0
	BaseAddr = Config->BaseAddr;
 1013e60:	e5956004 	ldr	r6, [r5, #4]
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1013e64:	fa002691 	blx	101d8b0 <memset>
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 1013e68:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 1013e6c:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
	InstancePtr->AddrWidth = Config->AddrWidth;
 1013e70:	e595103c 	ldr	r1, [r5, #60]	; 0x3c
	if (!InstancePtr->TxNumChannels)
 1013e74:	e3530000 	cmp	r3, #0
	InstancePtr->HasMm2S = Config->HasMm2S;
 1013e78:	e595b00c 	ldr	fp, [r5, #12]
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 1013e7c:	e595a018 	ldr	sl, [r5, #24]
	InstancePtr->HasSg = Config->HasSg;
 1013e80:	e5952024 	ldr	r2, [r5, #36]	; 0x24
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1013e84:	e5958038 	ldr	r8, [r5, #56]	; 0x38
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 1013e88:	e5843740 	str	r3, [r4, #1856]	; 0x740
		InstancePtr->TxNumChannels = 1;
 1013e8c:	03a03001 	moveq	r3, #1
 1013e90:	05843740 	streq	r3, [r4, #1856]	; 0x740
	if (!InstancePtr->RxNumChannels)
 1013e94:	e3500000 	cmp	r0, #0
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 1013e98:	e5840744 	str	r0, [r4, #1860]	; 0x744
		InstancePtr->RxNumChannels = 1;
 1013e9c:	03a00001 	moveq	r0, #1
	InstancePtr->AddrWidth = Config->AddrWidth;
 1013ea0:	e58d1004 	str	r1, [sp, #4]
	InstancePtr->HasMm2S = Config->HasMm2S;
 1013ea4:	e8840840 	stm	r4, {r6, fp}
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 1013ea8:	e584a008 	str	sl, [r4, #8]
	InstancePtr->HasSg = Config->HasSg;
 1013eac:	e5842010 	str	r2, [r4, #16]
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1013eb0:	e5848748 	str	r8, [r4, #1864]	; 0x748
	InstancePtr->AddrWidth = Config->AddrWidth;
 1013eb4:	e584174c 	str	r1, [r4, #1868]	; 0x74c
		InstancePtr->RxNumChannels = 1;
 1013eb8:	05840744 	streq	r0, [r4, #1860]	; 0x744
	if (!InstancePtr->RxNumChannels)
 1013ebc:	0a000060 	beq	1014044 <XAxiDma_CfgInitialize+0x208>
	if ((InstancePtr->RxNumChannels > 1) ||
 1013ec0:	e3500001 	cmp	r0, #1
 1013ec4:	da00005e 	ble	1014044 <XAxiDma_CfgInitialize+0x208>
		MaxTransferLen =
 1013ec8:	e30f9fff 	movw	r9, #65535	; 0xffff
	if (!InstancePtr->MicroDmaMode) {
 1013ecc:	e3580000 	cmp	r8, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1013ed0:	e3a02002 	mov	r2, #2
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1013ed4:	e3a03000 	mov	r3, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1013ed8:	e584201c 	str	r2, [r4, #28]
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1013edc:	e5843018 	str	r3, [r4, #24]
		InstancePtr->TxBdRing.MaxTransferLen = MaxTransferLen;
 1013ee0:	01a02009 	moveq	r2, r9
	if (!InstancePtr->MicroDmaMode) {
 1013ee4:	0a000006 	beq	1013f04 <XAxiDma_CfgInitialize+0xc8>
				((Config->Mm2SDataWidth / 4) *
 1013ee8:	e5953014 	ldr	r3, [r5, #20]
 1013eec:	e5952030 	ldr	r2, [r5, #48]	; 0x30
 1013ef0:	e2831003 	add	r1, r3, #3
 1013ef4:	e3530000 	cmp	r3, #0
 1013ef8:	b1a03001 	movlt	r3, r1
 1013efc:	e1a03143 	asr	r3, r3, #2
 1013f00:	e0020392 	mul	r2, r2, r3
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1013f04:	e3500000 	cmp	r0, #0
	InstancePtr->TxBdRing.RingIndex = 0;
 1013f08:	e3a03000 	mov	r3, #0
 1013f0c:	e5842030 	str	r2, [r4, #48]	; 0x30
						 = AXIDMA_CHANNEL_HALTED;
 1013f10:	c3a0706c 	movgt	r7, #108	; 0x6c
	InstancePtr->TxBdRing.RingIndex = 0;
 1013f14:	e5843078 	str	r3, [r4, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1013f18:	c1a02004 	movgt	r2, r4
						 = AXIDMA_CHANNEL_HALTED;
 1013f1c:	c3a0e002 	movgt	lr, #2
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1013f20:	c3a0c001 	movgt	ip, #1
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1013f24:	da000007 	ble	1013f48 <XAxiDma_CfgInitialize+0x10c>
						 = AXIDMA_CHANNEL_HALTED;
 1013f28:	e0214397 	mla	r1, r7, r3, r4
 1013f2c:	e282206c 	add	r2, r2, #108	; 0x6c
 1013f30:	e581e088 	str	lr, [r1, #136]	; 0x88
		InstancePtr->RxBdRing[Index].RingIndex = Index;
 1013f34:	e5823078 	str	r3, [r2, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1013f38:	e2833001 	add	r3, r3, #1
 1013f3c:	e1500003 	cmp	r0, r3
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1013f40:	e582c018 	str	ip, [r2, #24]
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1013f44:	1afffff7 	bne	1013f28 <XAxiDma_CfgInitialize+0xec>
	if (InstancePtr->HasMm2S) {
 1013f48:	e35b0000 	cmp	fp, #0
 1013f4c:	0a00000c 	beq	1013f84 <XAxiDma_CfgInitialize+0x148>
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1013f50:	e5953014 	ldr	r3, [r5, #20]
		if (InstancePtr->AddrWidth > 32)
 1013f54:	e59d2004 	ldr	r2, [sp, #4]
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1013f58:	e595c008 	ldr	ip, [r5, #8]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 1013f5c:	e5951010 	ldr	r1, [r5, #16]
		if (InstancePtr->AddrWidth > 32)
 1013f60:	e3520020 	cmp	r2, #32
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1013f64:	e1a031a3 	lsr	r3, r3, #3
		if (InstancePtr->AddrWidth > 32)
 1013f68:	d3a02000 	movle	r2, #0
		InstancePtr->TxBdRing.ChanBase =
 1013f6c:	e5846014 	str	r6, [r4, #20]
		if (InstancePtr->AddrWidth > 32)
 1013f70:	c3a02001 	movgt	r2, #1
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1013f74:	e584c020 	str	ip, [r4, #32]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 1013f78:	e5841024 	str	r1, [r4, #36]	; 0x24
		InstancePtr->TxBdRing.DataWidth =
 1013f7c:	e5843028 	str	r3, [r4, #40]	; 0x28
 1013f80:	e584202c 	str	r2, [r4, #44]	; 0x2c
	if (InstancePtr->HasS2Mm) {
 1013f84:	e35a0000 	cmp	sl, #0
 1013f88:	0a00001e 	beq	1014008 <XAxiDma_CfgInitialize+0x1cc>
		for (Index = 0;
 1013f8c:	e3500000 	cmp	r0, #0
 1013f90:	da00001c 	ble	1014008 <XAxiDma_CfgInitialize+0x1cc>
			((unsigned int)Config->S2MmDataWidth >> 3);
 1013f94:	e5951020 	ldr	r1, [r5, #32]
 1013f98:	e3a0306c 	mov	r3, #108	; 0x6c
 1013f9c:	e0204093 	mla	r0, r3, r0, r4
 1013fa0:	e59d3004 	ldr	r3, [sp, #4]
					Config->HasStsCntrlStrm;
 1013fa4:	e595e008 	ldr	lr, [r5, #8]
						((Config->S2MmDataWidth / 4) *
 1013fa8:	e3510000 	cmp	r1, #0
					Config->HasS2MmDRE;
 1013fac:	e595c01c 	ldr	ip, [r5, #28]
						((Config->S2MmDataWidth / 4) *
 1013fb0:	e2817003 	add	r7, r1, #3
 1013fb4:	a1a07001 	movge	r7, r1
 1013fb8:	e1a07147 	asr	r7, r7, #2
 1013fbc:	e3530020 	cmp	r3, #32
			((unsigned int)Config->S2MmDataWidth >> 3);
 1013fc0:	e1a011a1 	lsr	r1, r1, #3
 1013fc4:	e2866030 	add	r6, r6, #48	; 0x30
 1013fc8:	d3a0a000 	movle	sl, #0
 1013fcc:	c3a0a001 	movgt	sl, #1
 1013fd0:	e1a03004 	mov	r3, r4
			if (!InstancePtr->MicroDmaMode) {
 1013fd4:	e3580000 	cmp	r8, #0
				InstancePtr->RxBdRing[Index].MaxTransferLen =
 1013fd8:	e1a02009 	mov	r2, r9
			InstancePtr->RxBdRing[Index].ChanBase =
 1013fdc:	e5836080 	str	r6, [r3, #128]	; 0x80
			InstancePtr->RxBdRing[Index].HasStsCntrlStrm =
 1013fe0:	e283306c 	add	r3, r3, #108	; 0x6c
 1013fe4:	e583e020 	str	lr, [r3, #32]
			InstancePtr->RxBdRing[Index].HasDRE =
 1013fe8:	e583c024 	str	ip, [r3, #36]	; 0x24
			InstancePtr->RxBdRing[Index].DataWidth =
 1013fec:	e5831028 	str	r1, [r3, #40]	; 0x28
						((Config->S2MmDataWidth / 4) *
 1013ff0:	15952034 	ldrne	r2, [r5, #52]	; 0x34
 1013ff4:	e583a02c 	str	sl, [r3, #44]	; 0x2c
 1013ff8:	10020792 	mulne	r2, r2, r7
 1013ffc:	e5832030 	str	r2, [r3, #48]	; 0x30
		for (Index = 0;
 1014000:	e1530000 	cmp	r3, r0
 1014004:	1afffff2 	bne	1013fd4 <XAxiDma_CfgInitialize+0x198>
	XAxiDma_Reset(InstancePtr);
 1014008:	e1a00004 	mov	r0, r4
 101400c:	e3a05f7d 	mov	r5, #500	; 0x1f4
 1014010:	ebffff31 	bl	1013cdc <XAxiDma_Reset>
	while (TimeOut) {
 1014014:	ea000001 	b	1014020 <XAxiDma_CfgInitialize+0x1e4>
 1014018:	e2555001 	subs	r5, r5, #1
 101401c:	0a00000f 	beq	1014060 <XAxiDma_CfgInitialize+0x224>
		if(XAxiDma_ResetIsDone(InstancePtr)) {
 1014020:	e1a00004 	mov	r0, r4
 1014024:	ebffff71 	bl	1013df0 <XAxiDma_ResetIsDone>
 1014028:	e3500000 	cmp	r0, #0
 101402c:	0afffff9 	beq	1014018 <XAxiDma_CfgInitialize+0x1dc>
	return XST_SUCCESS;
 1014030:	e3a00000 	mov	r0, #0
	InstancePtr->Initialized = 1;
 1014034:	e3a03001 	mov	r3, #1
 1014038:	e584300c 	str	r3, [r4, #12]
}
 101403c:	e28dd00c 	add	sp, sp, #12
 1014040:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((InstancePtr->RxNumChannels > 1) ||
 1014044:	e5943740 	ldr	r3, [r4, #1856]	; 0x740
 1014048:	e3530001 	cmp	r3, #1
 101404c:	caffff9d 	bgt	1013ec8 <XAxiDma_CfgInitialize+0x8c>
		MaxTransferLen = (1U << Config->SgLengthWidth) - 1;
 1014050:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1014054:	e3e09000 	mvn	r9, #0
 1014058:	e1e09319 	mvn	r9, r9, lsl r3
 101405c:	eaffff9a 	b	1013ecc <XAxiDma_CfgInitialize+0x90>
		xdbg_printf(XDBG_DEBUG_ERROR, "Failed reset in"
 1014060:	e30b0540 	movw	r0, #46400	; 0xb540
 1014064:	e3400106 	movt	r0, #262	; 0x106
 1014068:	fa002688 	blx	101da90 <puts>
		InstancePtr->Initialized = 0;
 101406c:	e584500c 	str	r5, [r4, #12]
		return XST_DMA_ERROR;
 1014070:	e3a00009 	mov	r0, #9
 1014074:	eafffff0 	b	101403c <XAxiDma_CfgInitialize+0x200>

01014078 <XAxiDma_Pause>:
*
*****************************************************************************/
int XAxiDma_Pause(XAxiDma * InstancePtr)
{

	if (!InstancePtr->Initialized) {
 1014078:	e590100c 	ldr	r1, [r0, #12]
{
 101407c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 1014080:	e3510000 	cmp	r1, #0
 1014084:	0a000022 	beq	1014114 <XAxiDma_Pause+0x9c>
					" %d\r\n",InstancePtr->Initialized);

		return XST_NOT_SGDMA;
	}

	if (InstancePtr->HasMm2S) {
 1014088:	e5903004 	ldr	r3, [r0, #4]
 101408c:	e3530000 	cmp	r3, #0
 1014090:	0a000007 	beq	10140b4 <XAxiDma_Pause+0x3c>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* If channel is halted, then we do not need to do anything
		 */
		if(!XAxiDma_HasSg(InstancePtr)) {
 1014094:	e5903010 	ldr	r3, [r0, #16]
 1014098:	e3530000 	cmp	r3, #0
 101409c:	05902014 	ldreq	r2, [r0, #20]
 10140a0:	05923000 	ldreq	r3, [r2]
			XAxiDma_WriteReg(TxRingPtr->ChanBase,
 10140a4:	03c33001 	biceq	r3, r3, #1
	*LocalAddr = Value;
 10140a8:	05823000 	streq	r3, [r2]
				XAxiDma_ReadReg(TxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET)
				& ~XAXIDMA_CR_RUNSTOP_MASK);
		}

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10140ac:	e3a03002 	mov	r3, #2
 10140b0:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 10140b4:	e5903008 	ldr	r3, [r0, #8]
 10140b8:	e3530000 	cmp	r3, #0
 10140bc:	0a000012 	beq	101410c <XAxiDma_Pause+0x94>
		int RingIndex = 0;
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10140c0:	e5904744 	ldr	r4, [r0, #1860]	; 0x744
 10140c4:	e3540000 	cmp	r4, #0
 10140c8:	da00000f 	ble	101410c <XAxiDma_Pause+0x94>
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);

			/* If channel is halted, then we do not need to do anything
			 */

			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 10140cc:	e5907010 	ldr	r7, [r0, #16]
 10140d0:	e1a02000 	mov	r2, r0
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10140d4:	e3a03000 	mov	r3, #0
					XAxiDma_ReadReg(RxRingPtr->ChanBase,
					XAXIDMA_CR_OFFSET)
					& ~XAXIDMA_CR_RUNSTOP_MASK);
			}

			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10140d8:	e3a0606c 	mov	r6, #108	; 0x6c
 10140dc:	e3a05002 	mov	r5, #2
			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 10140e0:	e3570000 	cmp	r7, #0
 10140e4:	e282206c 	add	r2, r2, #108	; 0x6c
	return *(volatile u32 *) Addr;
 10140e8:	0592e014 	ldreq	lr, [r2, #20]
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10140ec:	e0210396 	mla	r1, r6, r3, r0
				RingIndex++) {
 10140f0:	e2833001 	add	r3, r3, #1
 10140f4:	059ec000 	ldreq	ip, [lr]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 10140f8:	03ccc001 	biceq	ip, ip, #1
	*LocalAddr = Value;
 10140fc:	058ec000 	streq	ip, [lr]
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1014100:	e1530004 	cmp	r3, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1014104:	e5815088 	str	r5, [r1, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1014108:	1afffff4 	bne	10140e0 <XAxiDma_Pause+0x68>
		}
	}

	return XST_SUCCESS;
 101410c:	e3a00000 	mov	r0, #0

}
 1014110:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Pause: Driver not initialized"
 1014114:	e30b055c 	movw	r0, #46428	; 0xb55c
 1014118:	e3400106 	movt	r0, #262	; 0x106
 101411c:	fa002636 	blx	101d9fc <printf>
		return XST_NOT_SGDMA;
 1014120:	e3a00010 	mov	r0, #16
 1014124:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01014128 <XAxiDma_Resume>:
*****************************************************************************/
int XAxiDma_Resume(XAxiDma * InstancePtr)
{
	int Status;

	if (!InstancePtr->Initialized) {
 1014128:	e590100c 	ldr	r1, [r0, #12]
{
 101412c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 1014130:	e3510000 	cmp	r1, #0
 1014134:	0a000032 	beq	1014204 <XAxiDma_Resume+0xdc>
		" %d\r\n",InstancePtr->Initialized);

		return 0;
	}

	if (InstancePtr->HasMm2S) {
 1014138:	e5903004 	ldr	r3, [r0, #4]
 101413c:	e1a04000 	mov	r4, r0
 1014140:	e3530000 	cmp	r3, #0
 1014144:	0a000028 	beq	10141ec <XAxiDma_Resume+0xc4>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(TxRingPtr)) {
 1014148:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 101414c:	e5933004 	ldr	r3, [r3, #4]
 1014150:	e3130001 	tst	r3, #1
 1014154:	1a000085 	bne	1014370 <XAxiDma_Resume+0x248>

			return 0;
		}
	}

	if (InstancePtr->HasS2Mm) {
 1014158:	e5903008 	ldr	r3, [r0, #8]
 101415c:	e3530000 	cmp	r3, #0
 1014160:	1a000044 	bne	1014278 <XAxiDma_Resume+0x150>
		if(XAxiDma_HasSg(InstancePtr)) {
 1014164:	e5943010 	ldr	r3, [r4, #16]
 1014168:	e3530000 	cmp	r3, #0
 101416c:	1a000048 	bne	1014294 <XAxiDma_Resume+0x16c>
		TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1014170:	e3a03001 	mov	r3, #1
 1014174:	e584301c 	str	r3, [r4, #28]
	if (InstancePtr->HasS2Mm) {
 1014178:	e5943008 	ldr	r3, [r4, #8]
 101417c:	e3530000 	cmp	r3, #0
 1014180:	0a00001c 	beq	10141f8 <XAxiDma_Resume+0xd0>
 1014184:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 1014188:	e3530000 	cmp	r3, #0
 101418c:	da000019 	ble	10141f8 <XAxiDma_Resume+0xd0>
 1014190:	e3a05000 	mov	r5, #0
				Status = XAxiDma_BdRingStart(RxRingPtr);
 1014194:	e2848080 	add	r8, r4, #128	; 0x80
 1014198:	e3a0606c 	mov	r6, #108	; 0x6c
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 101419c:	e3a07001 	mov	r7, #1
 10141a0:	ea000005 	b	10141bc <XAxiDma_Resume+0x94>
 10141a4:	e0234596 	mla	r3, r6, r5, r4
					RingIndex++) {
 10141a8:	e2855001 	add	r5, r5, #1
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10141ac:	e5837088 	str	r7, [r3, #136]	; 0x88
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 10141b0:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10141b4:	e1530005 	cmp	r3, r5
 10141b8:	da00000e 	ble	10141f8 <XAxiDma_Resume+0xd0>
			if(XAxiDma_HasSg(InstancePtr)) {
 10141bc:	e5943010 	ldr	r3, [r4, #16]
 10141c0:	e3530000 	cmp	r3, #0
 10141c4:	0afffff6 	beq	10141a4 <XAxiDma_Resume+0x7c>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 10141c8:	e0208596 	mla	r0, r6, r5, r8
 10141cc:	eb0002bf 	bl	1014cd0 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 10141d0:	e2501000 	subs	r1, r0, #0
 10141d4:	0afffff2 	beq	10141a4 <XAxiDma_Resume+0x7c>
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10141d8:	e30b0674 	movw	r0, #46708	; 0xb674
					return XST_DMA_ERROR;
 10141dc:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10141e0:	e3400106 	movt	r0, #262	; 0x106
 10141e4:	fa002604 	blx	101d9fc <printf>
					return XST_DMA_ERROR;
 10141e8:	ea000003 	b	10141fc <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasS2Mm) {
 10141ec:	e5903008 	ldr	r3, [r0, #8]
 10141f0:	e3530000 	cmp	r3, #0
 10141f4:	1a000008 	bne	101421c <XAxiDma_Resume+0xf4>
	return XST_SUCCESS;
 10141f8:	e3a04000 	mov	r4, #0
}
 10141fc:	e1a00004 	mov	r0, r4
 1014200:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 1014204:	e30b0580 	movw	r0, #46464	; 0xb580
		return XST_NOT_SGDMA;
 1014208:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 101420c:	e3400106 	movt	r0, #262	; 0x106
 1014210:	fa0025f9 	blx	101d9fc <printf>
}
 1014214:	e1a00004 	mov	r0, r4
 1014218:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		XAxiDma_BdRing *RxRingPtr;
		RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 101421c:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1014220:	e5933004 	ldr	r3, [r3, #4]
 1014224:	e3130001 	tst	r3, #1
 1014228:	0affffd5 	beq	1014184 <XAxiDma_Resume+0x5c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 101422c:	e30b05c4 	movw	r0, #46532	; 0xb5c4
 1014230:	e3400106 	movt	r0, #262	; 0x106
 1014234:	fa002615 	blx	101da90 <puts>
	if (!InstancePtr->Initialized) {
 1014238:	e594100c 	ldr	r1, [r4, #12]
 101423c:	e3510000 	cmp	r1, #0
 1014240:	0a000058 	beq	10143a8 <XAxiDma_Resume+0x280>
	if (InstancePtr->HasMm2S) {
 1014244:	e5943004 	ldr	r3, [r4, #4]
 1014248:	e3530000 	cmp	r3, #0
 101424c:	0a000002 	beq	101425c <XAxiDma_Resume+0x134>
		if (TxRingPtr->RunState == AXIDMA_CHANNEL_HALTED) {
 1014250:	e594301c 	ldr	r3, [r4, #28]
 1014254:	e3530002 	cmp	r3, #2
 1014258:	0a000048 	beq	1014380 <XAxiDma_Resume+0x258>
	if (InstancePtr->HasS2Mm) {
 101425c:	e5943008 	ldr	r3, [r4, #8]
 1014260:	e3530000 	cmp	r3, #0
 1014264:	1a000013 	bne	10142b8 <XAxiDma_Resume+0x190>
	if (InstancePtr->HasMm2S) {
 1014268:	e5943004 	ldr	r3, [r4, #4]
 101426c:	e3530000 	cmp	r3, #0
 1014270:	1affffbb 	bne	1014164 <XAxiDma_Resume+0x3c>
 1014274:	eaffffdf 	b	10141f8 <XAxiDma_Resume+0xd0>
		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 1014278:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 101427c:	e5933004 	ldr	r3, [r3, #4]
 1014280:	e3130001 	tst	r3, #1
 1014284:	1affffe8 	bne	101422c <XAxiDma_Resume+0x104>
		if(XAxiDma_HasSg(InstancePtr)) {
 1014288:	e5943010 	ldr	r3, [r4, #16]
 101428c:	e3530000 	cmp	r3, #0
 1014290:	0affffb6 	beq	1014170 <XAxiDma_Resume+0x48>
			Status = XAxiDma_BdRingStart(TxRingPtr);
 1014294:	e2840014 	add	r0, r4, #20
 1014298:	eb00028c 	bl	1014cd0 <XAxiDma_BdRingStart>
			if (Status != XST_SUCCESS) {
 101429c:	e2501000 	subs	r1, r0, #0
 10142a0:	0affffb2 	beq	1014170 <XAxiDma_Resume+0x48>
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10142a4:	e30b064c 	movw	r0, #46668	; 0xb64c
				return XST_DMA_ERROR;
 10142a8:	e3a04009 	mov	r4, #9
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10142ac:	e3400106 	movt	r0, #262	; 0x106
 10142b0:	fa0025d1 	blx	101d9fc <printf>
				return XST_DMA_ERROR;
 10142b4:	eaffffd0 	b	10141fc <XAxiDma_Resume+0xd4>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10142b8:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10142bc:	e3530000 	cmp	r3, #0
 10142c0:	da000042 	ble	10143d0 <XAxiDma_Resume+0x2a8>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10142c4:	e5942088 	ldr	r2, [r4, #136]	; 0x88
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr,
 10142c8:	e2846080 	add	r6, r4, #128	; 0x80
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10142cc:	e3520002 	cmp	r2, #2
 10142d0:	1a00003e 	bne	10143d0 <XAxiDma_Resume+0x2a8>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10142d4:	e3a05000 	mov	r5, #0
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10142d8:	e3a0706c 	mov	r7, #108	; 0x6c
 10142dc:	e3a08001 	mov	r8, #1
 10142e0:	ea00000e 	b	1014320 <XAxiDma_Resume+0x1f8>
 10142e4:	e5962000 	ldr	r2, [r6]
 10142e8:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 10142ec:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 10142f0:	e5823000 	str	r3, [r2]
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10142f4:	e0234597 	mla	r3, r7, r5, r4
						RingIndex++) {
 10142f8:	e2855001 	add	r5, r5, #1
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10142fc:	e0224597 	mla	r2, r7, r5, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1014300:	e5838088 	str	r8, [r3, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1014304:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1014308:	e286606c 	add	r6, r6, #108	; 0x6c
 101430c:	e1550003 	cmp	r5, r3
 1014310:	aa000012 	bge	1014360 <XAxiDma_Resume+0x238>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1014314:	e5923088 	ldr	r3, [r2, #136]	; 0x88
 1014318:	e3530002 	cmp	r3, #2
 101431c:	1a00000f 	bne	1014360 <XAxiDma_Resume+0x238>
			if(XAxiDma_HasSg(InstancePtr)) {
 1014320:	e5943010 	ldr	r3, [r4, #16]
 1014324:	e3530000 	cmp	r3, #0
 1014328:	0affffed 	beq	10142e4 <XAxiDma_Resume+0x1bc>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 101432c:	e1a00006 	mov	r0, r6
 1014330:	eb000266 	bl	1014cd0 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1014334:	e2501000 	subs	r1, r0, #0
 1014338:	0affffed 	beq	10142f4 <XAxiDma_Resume+0x1cc>
					xdbg_printf(XDBG_DEBUG_ERROR,
 101433c:	e30b0608 	movw	r0, #46600	; 0xb608
					return XST_DMA_ERROR;
 1014340:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR,
 1014344:	e3400106 	movt	r0, #262	; 0x106
 1014348:	fa0025ab 	blx	101d9fc <printf>
			xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed to start"
 101434c:	e30b0628 	movw	r0, #46632	; 0xb628
 1014350:	e1a01004 	mov	r1, r4
 1014354:	e3400106 	movt	r0, #262	; 0x106
 1014358:	fa0025a7 	blx	101d9fc <printf>
			return Status;
 101435c:	eaffffa6 	b	10141fc <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasMm2S) {
 1014360:	e5943004 	ldr	r3, [r4, #4]
 1014364:	e3530000 	cmp	r3, #0
 1014368:	0affff82 	beq	1014178 <XAxiDma_Resume+0x50>
 101436c:	eaffff7c 	b	1014164 <XAxiDma_Resume+0x3c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 1014370:	e30b05a4 	movw	r0, #46500	; 0xb5a4
 1014374:	e3400106 	movt	r0, #262	; 0x106
 1014378:	fa0025c4 	blx	101da90 <puts>
			return 0;
 101437c:	eaffffad 	b	1014238 <XAxiDma_Resume+0x110>
			if(XAxiDma_HasSg(InstancePtr)) {
 1014380:	e5943010 	ldr	r3, [r4, #16]
 1014384:	e3530000 	cmp	r3, #0
 1014388:	1a00000b 	bne	10143bc <XAxiDma_Resume+0x294>
	return *(volatile u32 *) Addr;
 101438c:	e5942014 	ldr	r2, [r4, #20]
 1014390:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(TxRingPtr->ChanBase,
 1014394:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1014398:	e5823000 	str	r3, [r2]
			TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 101439c:	e3a03001 	mov	r3, #1
 10143a0:	e584301c 	str	r3, [r4, #28]
 10143a4:	eaffffac 	b	101425c <XAxiDma_Resume+0x134>
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 10143a8:	e30b05e4 	movw	r0, #46564	; 0xb5e4
		return XST_NOT_SGDMA;
 10143ac:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 10143b0:	e3400106 	movt	r0, #262	; 0x106
 10143b4:	fa002590 	blx	101d9fc <printf>
		if (Status != XST_SUCCESS) {
 10143b8:	eaffffe3 	b	101434c <XAxiDma_Resume+0x224>
				Status = XAxiDma_BdRingStart(TxRingPtr);
 10143bc:	e2840014 	add	r0, r4, #20
 10143c0:	eb000242 	bl	1014cd0 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 10143c4:	e2501000 	subs	r1, r0, #0
 10143c8:	0afffff3 	beq	101439c <XAxiDma_Resume+0x274>
 10143cc:	eaffffda 	b	101433c <XAxiDma_Resume+0x214>
	if (InstancePtr->HasMm2S) {
 10143d0:	e5942004 	ldr	r2, [r4, #4]
 10143d4:	e3520000 	cmp	r2, #0
 10143d8:	1affff61 	bne	1014164 <XAxiDma_Resume+0x3c>
 10143dc:	eaffff69 	b	1014188 <XAxiDma_Resume+0x60>

010143e0 <XAxiDma_Busy>:
 *
 *****************************************************************************/
u32 XAxiDma_Busy(XAxiDma *InstancePtr, int Direction)
{

	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 10143e0:	e5903000 	ldr	r3, [r0]
 10143e4:	e0811081 	add	r1, r1, r1, lsl #1
 10143e8:	e0833201 	add	r3, r3, r1, lsl #4
	return *(volatile u32 *) Addr;
 10143ec:	e5930004 	ldr	r0, [r3, #4]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_SR_OFFSET) &
				XAXIDMA_IDLE_MASK) ? FALSE : TRUE);
 10143f0:	e2200002 	eor	r0, r0, #2
}
 10143f4:	e7e000d0 	ubfx	r0, r0, #1, #1
 10143f8:	e12fff1e 	bx	lr

010143fc <XAxiDma_SelectKeyHole>:
 *****************************************************************************/
int XAxiDma_SelectKeyHole(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10143fc:	e0811081 	add	r1, r1, r1, lsl #1
 1014400:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 1014404:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1014408:	e1a01201 	lsl	r1, r1, #4
 101440c:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_KEYHOLE_MASK;
 1014410:	13833008 	orrne	r3, r3, #8
	else
		Value &= ~XAXIDMA_CR_KEYHOLE_MASK;
 1014414:	03c33008 	biceq	r3, r3, #8
	*LocalAddr = Value;
 1014418:	e7813000 	str	r3, [r1, r0]
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;

}
 101441c:	e3a00000 	mov	r0, #0
 1014420:	e12fff1e 	bx	lr

01014424 <XAxiDma_SelectCyclicMode>:
 *****************************************************************************/
int XAxiDma_SelectCyclicMode(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1014424:	e0811081 	add	r1, r1, r1, lsl #1
 1014428:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 101442c:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1014430:	e1a01201 	lsl	r1, r1, #4
	return *(volatile u32 *) Addr;
 1014434:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_CYCLIC_MASK;
 1014438:	13833010 	orrne	r3, r3, #16
	else
		Value &= ~XAXIDMA_CR_CYCLIC_MASK;
 101443c:	03c33010 	biceq	r3, r3, #16
	*LocalAddr = Value;
 1014440:	e7813000 	str	r3, [r1, r0]
	XAxiDma_WriteReg(InstancePtr->RegBase +
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;
}
 1014444:	e3a00000 	mov	r0, #0
 1014448:	e12fff1e 	bx	lr

0101444c <XAxiDma_SimpleTransfer>:
	u32 WordBits;
	int RingIndex = 0;

	/* If Scatter Gather is included then, cannot submit
	 */
	if (XAxiDma_HasSg(InstancePtr)) {
 101444c:	e590c010 	ldr	ip, [r0, #16]
{
 1014450:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1014454:	e24dd00c 	sub	sp, sp, #12
	if (XAxiDma_HasSg(InstancePtr)) {
 1014458:	e35c0000 	cmp	ip, #0
 101445c:	1a00002f 	bne	1014520 <XAxiDma_SimpleTransfer+0xd4>
							" supported\r\n");

		return XST_FAILURE;
	}

	if(Direction == XAXIDMA_DMA_TO_DEVICE){
 1014460:	e3530000 	cmp	r3, #0
 1014464:	1a000025 	bne	1014500 <XAxiDma_SimpleTransfer+0xb4>
		if ((Length < 1) ||
 1014468:	e3520000 	cmp	r2, #0
 101446c:	0a000028 	beq	1014514 <XAxiDma_SimpleTransfer+0xc8>
 1014470:	e5903030 	ldr	r3, [r0, #48]	; 0x30
 1014474:	e1530002 	cmp	r3, r2
 1014478:	3a000025 	bcc	1014514 <XAxiDma_SimpleTransfer+0xc8>
			(Length > InstancePtr->TxBdRing.MaxTransferLen)) {
			return XST_INVALID_PARAM;
		}

		if (!InstancePtr->HasMm2S) {
 101447c:	e5903004 	ldr	r3, [r0, #4]
 1014480:	e3530000 	cmp	r3, #0
 1014484:	0a00004f 	beq	10145c8 <XAxiDma_SimpleTransfer+0x17c>
		}

		/* If the engine is doing transfer, cannot submit
		 */

		if(!(XAxiDma_ReadReg(InstancePtr->TxBdRing.ChanBase,
 1014488:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 101448c:	e593c004 	ldr	ip, [r3, #4]
 1014490:	e31c0001 	tst	ip, #1
 1014494:	1a000003 	bne	10144a8 <XAxiDma_SimpleTransfer+0x5c>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1014498:	e590c000 	ldr	ip, [r0]
 101449c:	e59cc004 	ldr	ip, [ip, #4]
				XAXIDMA_SR_OFFSET) & XAXIDMA_HALTED_MASK)) {
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 10144a0:	e31c0002 	tst	ip, #2
 10144a4:	0a000033 	beq	1014578 <XAxiDma_SimpleTransfer+0x12c>
							"Engine is busy\r\n");
				return XST_FAILURE;
			}
		}

		if (!InstancePtr->MicroDmaMode) {
 10144a8:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 10144ac:	e35c0000 	cmp	ip, #0
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 10144b0:	0590c028 	ldreq	ip, [r0, #40]	; 0x28
		}
		else {
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 10144b4:	1300cfff 	movwne	ip, #4095	; 0xfff
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 10144b8:	024cc001 	subeq	ip, ip, #1
		}

		if ((BuffAddr & WordBits)) {
 10144bc:	e11c0001 	tst	ip, r1
 10144c0:	0a000002 	beq	10144d0 <XAxiDma_SimpleTransfer+0x84>

			if (!InstancePtr->TxBdRing.HasDRE) {
 10144c4:	e590c024 	ldr	ip, [r0, #36]	; 0x24
 10144c8:	e35c0000 	cmp	ip, #0
 10144cc:	0a000038 	beq	10145b4 <XAxiDma_SimpleTransfer+0x168>
		}


		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
				 XAXIDMA_DESTADDR_OFFSET, LOWER_32_BITS(BuffAddr));
		if (InstancePtr->AddrWidth > 32)
 10144d0:	e590074c 	ldr	r0, [r0, #1868]	; 0x74c
	*LocalAddr = Value;
 10144d4:	e5831018 	str	r1, [r3, #24]
 10144d8:	e3500020 	cmp	r0, #32
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
					XAXIDMA_BUFFLEN_OFFSET, Length);

	}

	return XST_SUCCESS;
 10144dc:	e3a00000 	mov	r0, #0
 10144e0:	c3a01000 	movgt	r1, #0
 10144e4:	c583101c 	strgt	r1, [r3, #28]
	return *(volatile u32 *) Addr;
 10144e8:	e5931000 	ldr	r1, [r3]
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 10144ec:	e3811001 	orr	r1, r1, #1
	*LocalAddr = Value;
 10144f0:	e5831000 	str	r1, [r3]
 10144f4:	e5832028 	str	r2, [r3, #40]	; 0x28
}
 10144f8:	e28dd00c 	add	sp, sp, #12
 10144fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 1014500:	e3530001 	cmp	r3, #1
	return XST_SUCCESS;
 1014504:	11a0000c 	movne	r0, ip
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 1014508:	0a00000a 	beq	1014538 <XAxiDma_SimpleTransfer+0xec>
}
 101450c:	e28dd00c 	add	sp, sp, #12
 1014510:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
			return XST_INVALID_PARAM;
 1014514:	e3a0000f 	mov	r0, #15
}
 1014518:	e28dd00c 	add	sp, sp, #12
 101451c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "Simple DMA mode is not"
 1014520:	e30b0698 	movw	r0, #46744	; 0xb698
 1014524:	e3400106 	movt	r0, #262	; 0x106
 1014528:	fa002558 	blx	101da90 <puts>
		return XST_FAILURE;
 101452c:	e3a00001 	mov	r0, #1
}
 1014530:	e28dd00c 	add	sp, sp, #12
 1014534:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		if ((Length < 1) ||
 1014538:	e3520000 	cmp	r2, #0
 101453c:	0afffff4 	beq	1014514 <XAxiDma_SimpleTransfer+0xc8>
 1014540:	e590c09c 	ldr	ip, [r0, #156]	; 0x9c
 1014544:	e15c0002 	cmp	ip, r2
 1014548:	3afffff1 	bcc	1014514 <XAxiDma_SimpleTransfer+0xc8>
		if (!InstancePtr->HasS2Mm) {
 101454c:	e590c008 	ldr	ip, [r0, #8]
 1014550:	e35c0000 	cmp	ip, #0
 1014554:	0a000020 	beq	10145dc <XAxiDma_SimpleTransfer+0x190>
		if(!(XAxiDma_ReadReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 1014558:	e5903080 	ldr	r3, [r0, #128]	; 0x80
	return *(volatile u32 *) Addr;
 101455c:	e593c004 	ldr	ip, [r3, #4]
 1014560:	e31c0001 	tst	ip, #1
 1014564:	1a000008 	bne	101458c <XAxiDma_SimpleTransfer+0x140>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1014568:	e590c000 	ldr	ip, [r0]
 101456c:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 1014570:	e31c0002 	tst	ip, #2
 1014574:	1a000004 	bne	101458c <XAxiDma_SimpleTransfer+0x140>
				xdbg_printf(XDBG_DEBUG_ERROR,
 1014578:	e30b06dc 	movw	r0, #46812	; 0xb6dc
 101457c:	e3400106 	movt	r0, #262	; 0x106
 1014580:	fa002542 	blx	101da90 <puts>
				return XST_FAILURE;
 1014584:	e3a00001 	mov	r0, #1
 1014588:	eaffffdf 	b	101450c <XAxiDma_SimpleTransfer+0xc0>
		if (!InstancePtr->MicroDmaMode) {
 101458c:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 1014590:	e35c0000 	cmp	ip, #0
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 1014594:	0590c094 	ldreq	ip, [r0, #148]	; 0x94
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 1014598:	1300cfff 	movwne	ip, #4095	; 0xfff
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 101459c:	024cc001 	subeq	ip, ip, #1
		if ((BuffAddr & WordBits)) {
 10145a0:	e11c0001 	tst	ip, r1
 10145a4:	0affffc9 	beq	10144d0 <XAxiDma_SimpleTransfer+0x84>
			if (!InstancePtr->RxBdRing[RingIndex].HasDRE) {
 10145a8:	e590c090 	ldr	ip, [r0, #144]	; 0x90
 10145ac:	e35c0000 	cmp	ip, #0
 10145b0:	1affffc6 	bne	10144d0 <XAxiDma_SimpleTransfer+0x84>
				xdbg_printf(XDBG_DEBUG_ERROR,
 10145b4:	e30b06ec 	movw	r0, #46828	; 0xb6ec
 10145b8:	e3400106 	movt	r0, #262	; 0x106
 10145bc:	fa00250e 	blx	101d9fc <printf>
				return XST_INVALID_PARAM;
 10145c0:	e3a0000f 	mov	r0, #15
 10145c4:	eaffffd0 	b	101450c <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "MM2S channel is not"
 10145c8:	e30b06bc 	movw	r0, #46780	; 0xb6bc
 10145cc:	e3400106 	movt	r0, #262	; 0x106
 10145d0:	fa00252e 	blx	101da90 <puts>
			return XST_FAILURE;
 10145d4:	e3a00001 	mov	r0, #1
 10145d8:	eaffffcb 	b	101450c <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "S2MM channel is not"
 10145dc:	e30b0710 	movw	r0, #46864	; 0xb710
 10145e0:	e58d3004 	str	r3, [sp, #4]
 10145e4:	e3400106 	movt	r0, #262	; 0x106
 10145e8:	fa002528 	blx	101da90 <puts>
			return XST_FAILURE;
 10145ec:	e59d3004 	ldr	r3, [sp, #4]
 10145f0:	e1a00003 	mov	r0, r3
 10145f4:	eaffffc4 	b	101450c <XAxiDma_SimpleTransfer+0xc0>

010145f8 <XAxiDma_LookupConfig>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].DeviceId == DeviceId) {
 10145f8:	e30c3230 	movw	r3, #49712	; 0xc230
 10145fc:	e3403106 	movt	r3, #262	; 0x106
 1014600:	e5932000 	ldr	r2, [r3]
 1014604:	e1500002 	cmp	r0, r2
 1014608:	0a000004 	beq	1014620 <XAxiDma_LookupConfig+0x28>
 101460c:	e5b32044 	ldr	r2, [r3, #68]!	; 0x44
 1014610:	e1500002 	cmp	r0, r2
 1014614:	01a00003 	moveq	r0, r3
 1014618:	13a00000 	movne	r0, #0
 101461c:	e12fff1e 	bx	lr
 1014620:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 1014624:	e12fff1e 	bx	lr

01014628 <XAxiDma_LookupConfigBaseAddr>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].BaseAddr == Baseaddr) {
 1014628:	e30c3230 	movw	r3, #49712	; 0xc230
 101462c:	e3403106 	movt	r3, #262	; 0x106
 1014630:	e5932004 	ldr	r2, [r3, #4]
 1014634:	e1500002 	cmp	r0, r2
 1014638:	0a000004 	beq	1014650 <XAxiDma_LookupConfigBaseAddr+0x28>
 101463c:	e5932048 	ldr	r2, [r3, #72]	; 0x48
 1014640:	e1500002 	cmp	r0, r2
 1014644:	02830044 	addeq	r0, r3, #68	; 0x44
 1014648:	13a00000 	movne	r0, #0
 101464c:	e12fff1e 	bx	lr
 1014650:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 1014654:	e12fff1e 	bx	lr

01014658 <XAxiDma_Selftest>:
* @note
*     None.
*
******************************************************************************/
int XAxiDma_Selftest(XAxiDma * InstancePtr)
{
 1014658:	e92d4070 	push	{r4, r5, r6, lr}
	int TimeOut;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101465c:	e2505000 	subs	r5, r0, #0
 1014660:	0a00000e 	beq	10146a0 <XAxiDma_Selftest+0x48>
 1014664:	e3013f58 	movw	r3, #8024	; 0x1f58
 1014668:	e3a02000 	mov	r2, #0
 101466c:	e340310c 	movt	r3, #268	; 0x10c

	XAxiDma_Reset(InstancePtr);
 1014670:	e3a04f7d 	mov	r4, #500	; 0x1f4
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014674:	e5832000 	str	r2, [r3]
	XAxiDma_Reset(InstancePtr);
 1014678:	ebfffd97 	bl	1013cdc <XAxiDma_Reset>

	/* At the initialization time, hardware should finish reset quickly
	 */
	TimeOut = XAXIDMA_RESET_TIMEOUT;

	while (TimeOut) {
 101467c:	ea000001 	b	1014688 <XAxiDma_Selftest+0x30>
 1014680:	e2544001 	subs	r4, r4, #1
 1014684:	0a00000f 	beq	10146c8 <XAxiDma_Selftest+0x70>

		if(XAxiDma_ResetIsDone(InstancePtr)) {
 1014688:	e1a00005 	mov	r0, r5
 101468c:	ebfffdd7 	bl	1013df0 <XAxiDma_ResetIsDone>
 1014690:	e3500000 	cmp	r0, #0
 1014694:	0afffff9 	beq	1014680 <XAxiDma_Selftest+0x28>
	}

	if (!TimeOut)
		return XST_FAILURE;

	return XST_SUCCESS;
 1014698:	e3a00000 	mov	r0, #0
}
 101469c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10146a0:	e30b0730 	movw	r0, #46896	; 0xb730
 10146a4:	e3a01056 	mov	r1, #86	; 0x56
 10146a8:	e3400106 	movt	r0, #262	; 0x106
 10146ac:	eb001222 	bl	1018f3c <Xil_Assert>
 10146b0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10146b4:	e3a02001 	mov	r2, #1
 10146b8:	e340310c 	movt	r3, #268	; 0x10c
 10146bc:	e1a00005 	mov	r0, r5
 10146c0:	e5832000 	str	r2, [r3]
 10146c4:	e8bd8070 	pop	{r4, r5, r6, pc}
		return XST_FAILURE;
 10146c8:	e3a00001 	mov	r0, #1
 10146cc:	e8bd8070 	pop	{r4, r5, r6, pc}

010146d0 <XAxiDma_UpdateBdRingCDesc>:
	UINTPTR RegBase;
	UINTPTR BdPtr;
	int RingIndex = RingPtr->RingIndex;

	/* BD list has yet to be created for this channel */
	if (RingPtr->AllCnt == 0) {
 10146d0:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 10146d4:	e92d4010 	push	{r4, lr}
	if (RingPtr->AllCnt == 0) {
 10146d8:	e3520000 	cmp	r2, #0
 10146dc:	0a000043 	beq	10147f0 <XAxiDma_UpdateBdRingCDesc+0x120>

		return XST_DMA_SG_NO_LIST;
	}

	/* Do nothing if already started */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 10146e0:	e5902008 	ldr	r2, [r0, #8]
 10146e4:	e1a03000 	mov	r3, r0
 10146e8:	e3520001 	cmp	r2, #1
 10146ec:	0a000027 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
		 * transferring)
		 */
		return XST_SUCCESS;
	}

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10146f0:	e590c000 	ldr	ip, [r0]
 10146f4:	e59c2004 	ldr	r2, [ip, #4]
 10146f8:	e3120001 	tst	r2, #1
 10146fc:	0a000023 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
		RegBase = RingPtr->ChanBase;

		/* Put a valid BD pointer in the current BD pointer register
		 * So, the hardware is ready to go when tail BD pointer is updated
		 */
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 1014700:	e5901048 	ldr	r1, [r0, #72]	; 0x48
	int RingIndex = RingPtr->RingIndex;
 1014704:	e5904064 	ldr	r4, [r0, #100]	; 0x64

		if (!XAxiDma_BdHwCompleted(BdPtr)) {
 1014708:	e591201c 	ldr	r2, [r1, #28]
 101470c:	e3520000 	cmp	r2, #0
 1014710:	ba000025 	blt	10147ac <XAxiDma_UpdateBdRingCDesc+0xdc>
			if (RingPtr->IsRxChannel) {
 1014714:	e590e024 	ldr	lr, [r0, #36]	; 0x24
 1014718:	e5900004 	ldr	r0, [r0, #4]
 101471c:	e5932020 	ldr	r2, [r3, #32]
 1014720:	e041100e 	sub	r1, r1, lr
 1014724:	e5933018 	ldr	r3, [r3, #24]
 1014728:	e3500000 	cmp	r0, #0
 101472c:	e0811002 	add	r1, r1, r2
 1014730:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 1014734:	0a000017 	beq	1014798 <XAxiDma_UpdateBdRingCDesc+0xc8>
				if (!RingIndex) {
 1014738:	e3540000 	cmp	r4, #0
 101473c:	1a000030 	bne	1014804 <XAxiDma_UpdateBdRingCDesc+0x134>
					XAxiDma_WriteReg(RegBase,
							 XAXIDMA_CDESC_OFFSET,
							 (XAXIDMA_VIRT_TO_PHYS(BdPtr) & XAXIDMA_DESC_LSB_MASK));
					if (RingPtr->Addr_ext)
 1014740:	e3530000 	cmp	r3, #0
	*LocalAddr = Value;
 1014744:	e58c1008 	str	r1, [ip, #8]
 1014748:	0a000010 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
 101474c:	e58c400c 	str	r4, [ip, #12]
			}
		}

	}

	return XST_SUCCESS;
 1014750:	e1a00004 	mov	r0, r4
 1014754:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->IsRxChannel) {
 1014758:	e5931020 	ldr	r1, [r3, #32]
 101475c:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1014760:	e5930004 	ldr	r0, [r3, #4]
 1014764:	e5933018 	ldr	r3, [r3, #24]
 1014768:	e041100e 	sub	r1, r1, lr
 101476c:	e3500000 	cmp	r0, #0
 1014770:	e0812002 	add	r2, r1, r2
 1014774:	e3c2203f 	bic	r2, r2, #63	; 0x3f
 1014778:	0a00002b 	beq	101482c <XAxiDma_UpdateBdRingCDesc+0x15c>
						if (!RingIndex) {
 101477c:	e3540000 	cmp	r4, #0
 1014780:	1a00002d 	bne	101483c <XAxiDma_UpdateBdRingCDesc+0x16c>
							if (RingPtr->Addr_ext)
 1014784:	e3530000 	cmp	r3, #0
 1014788:	e58c2008 	str	r2, [ip, #8]
 101478c:	1affffee 	bne	101474c <XAxiDma_UpdateBdRingCDesc+0x7c>
		return XST_SUCCESS;
 1014790:	e3a00000 	mov	r0, #0
 1014794:	e8bd8010 	pop	{r4, pc}
				if (RingPtr->Addr_ext)
 1014798:	e3530000 	cmp	r3, #0
 101479c:	e58c1008 	str	r1, [ip, #8]
 10147a0:	0afffffa 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
 10147a4:	e58c000c 	str	r0, [ip, #12]
}
 10147a8:	e8bd8010 	pop	{r4, pc}
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 10147ac:	e590e028 	ldr	lr, [r0, #40]	; 0x28
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 10147b0:	e1a02001 	mov	r2, r1
 10147b4:	ea000002 	b	10147c4 <XAxiDma_UpdateBdRingCDesc+0xf4>
				if (!XAxiDma_BdHwCompleted(BdPtr)) {
 10147b8:	e592001c 	ldr	r0, [r2, #28]
 10147bc:	e3500000 	cmp	r0, #0
 10147c0:	aaffffe4 	bge	1014758 <XAxiDma_UpdateBdRingCDesc+0x88>
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 10147c4:	e15e0002 	cmp	lr, r2
 10147c8:	85930030 	ldrhi	r0, [r3, #48]	; 0x30
 10147cc:	95932024 	ldrls	r2, [r3, #36]	; 0x24
 10147d0:	80822000 	addhi	r2, r2, r0
				if ((UINTPTR)BdPtr == (UINTPTR) RingPtr->BdaRestart) {
 10147d4:	e1520001 	cmp	r2, r1
 10147d8:	1afffff6 	bne	10147b8 <XAxiDma_UpdateBdRingCDesc+0xe8>
					xdbg_printf(XDBG_DEBUG_ERROR,
 10147dc:	e30b075c 	movw	r0, #46940	; 0xb75c
 10147e0:	e3400106 	movt	r0, #262	; 0x106
 10147e4:	fa0024a9 	blx	101da90 <puts>
					return XST_DMA_ERROR;
 10147e8:	e3a00009 	mov	r0, #9
 10147ec:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: no bds\r\n");
 10147f0:	e30b0744 	movw	r0, #46916	; 0xb744
 10147f4:	e3400106 	movt	r0, #262	; 0x106
 10147f8:	fa0024a4 	blx	101da90 <puts>
		return XST_DMA_SG_NO_LIST;
 10147fc:	e300020b 	movw	r0, #523	; 0x20b
 1014800:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->Addr_ext)
 1014804:	e3530000 	cmp	r3, #0
					XAxiDma_WriteReg(RegBase,
 1014808:	e2844001 	add	r4, r4, #1
 101480c:	e78c1284 	str	r1, [ip, r4, lsl #5]
 1014810:	e1a04284 	lsl	r4, r4, #5
					if (RingPtr->Addr_ext)
 1014814:	0affffdd 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
								XAxiDma_WriteReg(RegBase,
 1014818:	e2444040 	sub	r4, r4, #64	; 0x40
 101481c:	e28cc044 	add	ip, ip, #68	; 0x44
 1014820:	e3a00000 	mov	r0, #0
 1014824:	e784000c 	str	r0, [r4, ip]
 1014828:	e8bd8010 	pop	{r4, pc}
						if (RingPtr->Addr_ext)
 101482c:	e3530000 	cmp	r3, #0
 1014830:	e58c2008 	str	r2, [ip, #8]
 1014834:	0affffd5 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1014838:	eaffffd9 	b	10147a4 <XAxiDma_UpdateBdRingCDesc+0xd4>
							if (RingPtr->Addr_ext)
 101483c:	e3530000 	cmp	r3, #0
							XAxiDma_WriteReg(RegBase,
 1014840:	e2844001 	add	r4, r4, #1
 1014844:	e78c2284 	str	r2, [ip, r4, lsl #5]
 1014848:	e1a04284 	lsl	r4, r4, #5
							if (RingPtr->Addr_ext)
 101484c:	0affffcf 	beq	1014790 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1014850:	eafffff0 	b	1014818 <XAxiDma_UpdateBdRingCDesc+0x148>

01014854 <XAxiDma_BdRingCreate>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdRingCreate(XAxiDma_BdRing *RingPtr, UINTPTR PhysAddr,
			UINTPTR VirtAddr, u32 Alignment, int BdCount)
{
 1014854:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1014858:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
	int i;
	UINTPTR BdVirtAddr;
	UINTPTR BdPhysAddr;

	if (BdCount <= 0) {
 101485c:	e3560000 	cmp	r6, #0
 1014860:	da000078 	ble	1014a48 <XAxiDma_BdRingCreate+0x1f4>
	RingPtr->PreCnt = 0;
	RingPtr->PostCnt = 0;
	RingPtr->Cyclic = 0;

	/* Make sure Alignment parameter meets minimum requirements */
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1014864:	e353003f 	cmp	r3, #63	; 0x3f
 1014868:	e1a05003 	mov	r5, r3
	RingPtr->AllCnt = 0;
 101486c:	e3a03000 	mov	r3, #0
 1014870:	e1a04000 	mov	r4, r0
 1014874:	e5803060 	str	r3, [r0, #96]	; 0x60
	RingPtr->FreeCnt = 0;
 1014878:	e5803050 	str	r3, [r0, #80]	; 0x50
	RingPtr->HwCnt = 0;
 101487c:	e5803058 	str	r3, [r0, #88]	; 0x58
	RingPtr->PreCnt = 0;
 1014880:	e5803054 	str	r3, [r0, #84]	; 0x54
	RingPtr->PostCnt = 0;
 1014884:	e580305c 	str	r3, [r0, #92]	; 0x5c
	RingPtr->Cyclic = 0;
 1014888:	e5803068 	str	r3, [r0, #104]	; 0x68
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 101488c:	9a000059 	bls	10149f8 <XAxiDma_BdRingCreate+0x1a4>

		return XST_INVALID_PARAM;
	}

	/* Make sure Alignment is a power of 2 */
	if ((Alignment - 1) & Alignment) {
 1014890:	e2453001 	sub	r3, r5, #1
 1014894:	e1130005 	tst	r3, r5
 1014898:	1a000064 	bne	1014a30 <XAxiDma_BdRingCreate+0x1dc>

		return XST_INVALID_PARAM;
	}

	/* Make sure PhysAddr and VirtAddr are on same Alignment */
	if ((PhysAddr % Alignment) || (VirtAddr % Alignment)) {
 101489c:	e1a09001 	mov	r9, r1
 10148a0:	e1a01005 	mov	r1, r5
 10148a4:	e1a00009 	mov	r0, r9
 10148a8:	e1a07002 	mov	r7, r2
 10148ac:	fa001a2c 	blx	101b164 <__aeabi_uidivmod>
 10148b0:	e3510000 	cmp	r1, #0
 10148b4:	1a000047 	bne	10149d8 <XAxiDma_BdRingCreate+0x184>
 10148b8:	e1a01005 	mov	r1, r5
 10148bc:	e1a00007 	mov	r0, r7
 10148c0:	fa001a27 	blx	101b164 <__aeabi_uidivmod>
 10148c4:	e2518000 	subs	r8, r1, #0
 10148c8:	1a000042 	bne	10149d8 <XAxiDma_BdRingCreate+0x184>
		return XST_INVALID_PARAM;
	}

	/* Compute how many bytes will be between the start of adjacent BDs */
	RingPtr->Separation =
		(sizeof(XAxiDma_Bd) + (Alignment - 1)) & ~(Alignment - 1);
 10148cc:	e285303f 	add	r3, r5, #63	; 0x3f
 10148d0:	e2655000 	rsb	r5, r5, #0
 10148d4:	e0055003 	and	r5, r5, r3

	/* Must make sure the ring doesn't span address 0x00000000. If it does,
	 * then the next/prev BD traversal macros will fail.
	 */
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 10148d8:	e2473001 	sub	r3, r7, #1
 10148dc:	e0020695 	mul	r2, r5, r6
	RingPtr->Separation =
 10148e0:	e5845030 	str	r5, [r4, #48]	; 0x30
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 10148e4:	e0833002 	add	r3, r3, r2
 10148e8:	e1530007 	cmp	r3, r7
 10148ec:	3a000049 	bcc	1014a18 <XAxiDma_BdRingCreate+0x1c4>
	 *  - Clear the entire space
	 *  - Setup each BD's next pointer with the physical address of the
	 *    next BD
	 *  - Put hardware information in each BD
	 */
	memset((void *) VirtAddr, 0, (RingPtr->Separation * BdCount));
 10148f0:	e1a00007 	mov	r0, r7
 10148f4:	fa0023ed 	blx	101d8b0 <memset>

	BdVirtAddr = VirtAddr;
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 10148f8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 10148fc:	e3560001 	cmp	r6, #1
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 1014900:	e083a009 	add	sl, r3, r9
	for (i = 1; i < BdCount; i++) {
 1014904:	0a000055 	beq	1014a60 <XAxiDma_BdRingCreate+0x20c>
 1014908:	e1a05007 	mov	r5, r7
 101490c:	e3a0b001 	mov	fp, #1
		/* Put hardware information in the BDs
		 */
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
				(u32)RingPtr->HasStsCntrlStrm);

		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1014910:	e5940010 	ldr	r0, [r4, #16]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1014914:	e3cac03f 	bic	ip, sl, #63	; 0x3f
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1014918:	e5943014 	ldr	r3, [r4, #20]
		    (((u32)(RingPtr->HasDRE)) << XAXIDMA_BD_HAS_DRE_SHIFT) |
		    RingPtr->DataWidth);

		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 101491c:	e3a01034 	mov	r1, #52	; 0x34
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1014920:	e594200c 	ldr	r2, [r4, #12]
	for (i = 1; i < BdCount; i++) {
 1014924:	e28bb001 	add	fp, fp, #1
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1014928:	e5858004 	str	r8, [r5, #4]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 101492c:	e585c000 	str	ip, [r5]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1014930:	e1833400 	orr	r3, r3, r0, lsl #8
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1014934:	e5852038 	str	r2, [r5, #56]	; 0x38
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1014938:	e1a00005 	mov	r0, r5
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 101493c:	e585303c 	str	r3, [r5, #60]	; 0x3c
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1014940:	eb0011fe 	bl	1019140 <Xil_DCacheFlushRange>
		BdVirtAddr += RingPtr->Separation;
 1014944:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 1014948:	e156000b 	cmp	r6, fp
		BdVirtAddr += RingPtr->Separation;
 101494c:	e0855003 	add	r5, r5, r3
		BdPhysAddr += RingPtr->Separation;
 1014950:	e08aa003 	add	sl, sl, r3
	for (i = 1; i < BdCount; i++) {
 1014954:	1affffed 	bne	1014910 <XAxiDma_BdRingCreate+0xbc>
 1014958:	e1a0e005 	mov	lr, r5

	/* Setup the last BD's hardware information */
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
		(u32)RingPtr->HasStsCntrlStrm);

	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 101495c:	e5941010 	ldr	r1, [r4, #16]
	/* Setup and initialize pointers and counters */
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
	RingPtr->FirstBdAddr = VirtAddr;
	RingPtr->FirstBdPhysAddr = PhysAddr;
	RingPtr->LastBdAddr = BdVirtAddr;
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1014960:	e0853003 	add	r3, r5, r3
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1014964:	e5942014 	ldr	r2, [r4, #20]
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1014968:	e0433007 	sub	r3, r3, r7
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 101496c:	e594000c 	ldr	r0, [r4, #12]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1014970:	e3c9c03f 	bic	ip, r9, #63	; 0x3f
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1014974:	e3a08000 	mov	r8, #0
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1014978:	e58ec000 	str	ip, [lr]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 101497c:	e5858004 	str	r8, [r5, #4]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1014980:	e1822401 	orr	r2, r2, r1, lsl #8
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1014984:	e3a01002 	mov	r1, #2
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1014988:	e5850038 	str	r0, [r5, #56]	; 0x38
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 101498c:	e3a00040 	mov	r0, #64	; 0x40
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1014990:	e585203c 	str	r2, [r5, #60]	; 0x3c
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1014994:	e584302c 	str	r3, [r4, #44]	; 0x2c
	RingPtr->FirstBdAddr = VirtAddr;
 1014998:	e5847024 	str	r7, [r4, #36]	; 0x24
	RingPtr->FirstBdPhysAddr = PhysAddr;
 101499c:	e5849020 	str	r9, [r4, #32]
	RingPtr->LastBdAddr = BdVirtAddr;
 10149a0:	e5845028 	str	r5, [r4, #40]	; 0x28
	RingPtr->AllCnt = BdCount;
 10149a4:	e5846060 	str	r6, [r4, #96]	; 0x60
	RingPtr->FreeCnt = BdCount;
 10149a8:	e5846050 	str	r6, [r4, #80]	; 0x50
	RingPtr->FreeHead = (XAxiDma_Bd *) VirtAddr;
 10149ac:	e5847034 	str	r7, [r4, #52]	; 0x34
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
 10149b0:	e5847038 	str	r7, [r4, #56]	; 0x38
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
 10149b4:	e584703c 	str	r7, [r4, #60]	; 0x3c
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
 10149b8:	e5847040 	str	r7, [r4, #64]	; 0x40
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
 10149bc:	e5847044 	str	r7, [r4, #68]	; 0x44
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
 10149c0:	e5847048 	str	r7, [r4, #72]	; 0x48
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10149c4:	e5841008 	str	r1, [r4, #8]
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 10149c8:	fa001f7a 	blx	101c7b8 <malloc>
 10149cc:	e584004c 	str	r0, [r4, #76]	; 0x4c

	return XST_SUCCESS;
}
 10149d0:	e1a00008 	mov	r0, r8
 10149d4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 10149d8:	e30b0818 	movw	r0, #47128	; 0xb818
 10149dc:	e1a02007 	mov	r2, r7
 10149e0:	e1a01009 	mov	r1, r9
		return XST_INVALID_PARAM;
 10149e4:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 10149e8:	e3400106 	movt	r0, #262	; 0x106
 10149ec:	fa002402 	blx	101d9fc <printf>
}
 10149f0:	e1a00008 	mov	r0, r8
 10149f4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 10149f8:	e30b07b0 	movw	r0, #47024	; 0xb7b0
 10149fc:	e1a01005 	mov	r1, r5
 1014a00:	e3a02040 	mov	r2, #64	; 0x40
		return XST_INVALID_PARAM;
 1014a04:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 1014a08:	e3400106 	movt	r0, #262	; 0x106
 1014a0c:	fa0023fa 	blx	101d9fc <printf>
}
 1014a10:	e1a00008 	mov	r0, r8
 1014a14:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1014a18:	e30b086c 	movw	r0, #47212	; 0xb86c
		return XST_DMA_SG_LIST_ERROR;
 1014a1c:	e300820e 	movw	r8, #526	; 0x20e
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1014a20:	e3400106 	movt	r0, #262	; 0x106
 1014a24:	fa002419 	blx	101da90 <puts>
}
 1014a28:	e1a00008 	mov	r0, r8
 1014a2c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1014a30:	e30b07f0 	movw	r0, #47088	; 0xb7f0
 1014a34:	e1a01005 	mov	r1, r5
 1014a38:	e3400106 	movt	r0, #262	; 0x106
		return XST_INVALID_PARAM;
 1014a3c:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1014a40:	fa0023ed 	blx	101d9fc <printf>
		return XST_INVALID_PARAM;
 1014a44:	eaffffe1 	b	10149d0 <XAxiDma_BdRingCreate+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 1014a48:	e30b0784 	movw	r0, #46980	; 0xb784
 1014a4c:	e1a01006 	mov	r1, r6
 1014a50:	e3400106 	movt	r0, #262	; 0x106
		return XST_INVALID_PARAM;
 1014a54:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 1014a58:	fa0023e7 	blx	101d9fc <printf>
		return XST_INVALID_PARAM;
 1014a5c:	eaffffdb 	b	10149d0 <XAxiDma_BdRingCreate+0x17c>
	for (i = 1; i < BdCount; i++) {
 1014a60:	e1a0e007 	mov	lr, r7
 1014a64:	e1a05007 	mov	r5, r7
 1014a68:	eaffffbb 	b	101495c <XAxiDma_BdRingCreate+0x108>

01014a6c <XAxiDma_BdRingClone>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingClone(XAxiDma_BdRing * RingPtr, XAxiDma_Bd * SrcBdPtr)
{
 1014a6c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1014a70:	e24dd044 	sub	sp, sp, #68	; 0x44
	UINTPTR CurBd;
	u32 Save;
	XAxiDma_Bd TmpBd;

	/* Can't do this function if there isn't a ring */
	if (RingPtr->AllCnt == 0) {
 1014a74:	e5905060 	ldr	r5, [r0, #96]	; 0x60
 1014a78:	e3550000 	cmp	r5, #0
 1014a7c:	0a00003d 	beq	1014b78 <XAxiDma_BdRingClone+0x10c>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't do this function with the channel running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1014a80:	e5903008 	ldr	r3, [r0, #8]
 1014a84:	e1a06000 	mov	r6, r0
 1014a88:	e3530001 	cmp	r3, #1
 1014a8c:	0a00003f 	beq	1014b90 <XAxiDma_BdRingClone+0x124>

		return XST_DEVICE_IS_STARTED;
	}

	/* Can't do this function with some of the BDs in use */
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1014a90:	e5903050 	ldr	r3, [r0, #80]	; 0x50
 1014a94:	e1550003 	cmp	r5, r3
	}

	/* Make a copy of the template then modify it by clearing
	 * the complete bit in status/control field
	 */
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 1014a98:	01a0c001 	moveq	ip, r1
 1014a9c:	01a0400d 	moveq	r4, sp
 1014aa0:	028c7040 	addeq	r7, ip, #64	; 0x40
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1014aa4:	1a00002b 	bne	1014b58 <XAxiDma_BdRingClone+0xec>
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 1014aa8:	e59c0000 	ldr	r0, [ip]
 1014aac:	e28cc010 	add	ip, ip, #16
 1014ab0:	e51c100c 	ldr	r1, [ip, #-12]
 1014ab4:	e1a0e004 	mov	lr, r4
 1014ab8:	e51c2008 	ldr	r2, [ip, #-8]
 1014abc:	e2844010 	add	r4, r4, #16
 1014ac0:	e51c3004 	ldr	r3, [ip, #-4]
 1014ac4:	e15c0007 	cmp	ip, r7
 1014ac8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 1014acc:	1afffff5 	bne	1014aa8 <XAxiDma_BdRingClone+0x3c>

	Save = XAxiDma_BdRead(&TmpBd, XAXIDMA_BD_STS_OFFSET);
 1014ad0:	e59d301c 	ldr	r3, [sp, #28]
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);

	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1014ad4:	e3550000 	cmp	r5, #0
 1014ad8:	c3a05000 	movgt	r5, #0
 1014adc:	c28d7038 	addgt	r7, sp, #56	; 0x38
 1014ae0:	e5964024 	ldr	r4, [r6, #36]	; 0x24
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1014ae4:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);
 1014ae8:	e58d301c 	str	r3, [sp, #28]
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1014aec:	da000016 	ble	1014b4c <XAxiDma_BdRingClone+0xe0>
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {

		memcpy((void *)((UINTPTR)CurBd + XAXIDMA_BD_START_CLEAR),
 1014af0:	e28d3008 	add	r3, sp, #8
 1014af4:	e2842008 	add	r2, r4, #8
 1014af8:	e593e000 	ldr	lr, [r3]
 1014afc:	e2833010 	add	r3, r3, #16
 1014b00:	e513c00c 	ldr	ip, [r3, #-12]
 1014b04:	e2822010 	add	r2, r2, #16
 1014b08:	e5130008 	ldr	r0, [r3, #-8]
 1014b0c:	e5131004 	ldr	r1, [r3, #-4]
 1014b10:	e1530007 	cmp	r3, r7
 1014b14:	e502e010 	str	lr, [r2, #-16]
 1014b18:	e502c00c 	str	ip, [r2, #-12]
 1014b1c:	e5020008 	str	r0, [r2, #-8]
 1014b20:	e5021004 	str	r1, [r2, #-4]
 1014b24:	1afffff3 	bne	1014af8 <XAxiDma_BdRingClone+0x8c>
		    (void *)((UINTPTR)(&TmpBd) + XAXIDMA_BD_START_CLEAR),
		    XAXIDMA_BD_BYTES_TO_CLEAR);

		XAXIDMA_CACHE_FLUSH(CurBd);
 1014b28:	e1a00004 	mov	r0, r4
 1014b2c:	e3a01034 	mov	r1, #52	; 0x34
 1014b30:	eb001182 	bl	1019140 <Xil_DCacheFlushRange>
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1014b34:	e5962060 	ldr	r2, [r6, #96]	; 0x60
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1014b38:	e2855001 	add	r5, r5, #1
 1014b3c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1014b40:	e1520005 	cmp	r2, r5
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1014b44:	e0844003 	add	r4, r4, r3
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1014b48:	caffffe8 	bgt	1014af0 <XAxiDma_BdRingClone+0x84>
	}

	return XST_SUCCESS;
 1014b4c:	e3a00000 	mov	r0, #0
}
 1014b50:	e28dd044 	add	sp, sp, #68	; 0x44
 1014b54:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: some bds already "
 1014b58:	e30b08dc 	movw	r0, #47324	; 0xb8dc
 1014b5c:	e1a02005 	mov	r2, r5
 1014b60:	e1a01003 	mov	r1, r3
 1014b64:	e3400106 	movt	r0, #262	; 0x106
 1014b68:	fa0023a3 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 1014b6c:	e300020e 	movw	r0, #526	; 0x20e
}
 1014b70:	e28dd044 	add	sp, sp, #68	; 0x44
 1014b74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: no bds\r\n");
 1014b78:	e30b0890 	movw	r0, #47248	; 0xb890
 1014b7c:	e3400106 	movt	r0, #262	; 0x106
 1014b80:	fa0023c2 	blx	101da90 <puts>
		return XST_DMA_SG_NO_LIST;
 1014b84:	e300020b 	movw	r0, #523	; 0x20b
}
 1014b88:	e28dd044 	add	sp, sp, #68	; 0x44
 1014b8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: bd ring started "
 1014b90:	e30b08a8 	movw	r0, #47272	; 0xb8a8
 1014b94:	e3400106 	movt	r0, #262	; 0x106
 1014b98:	fa0023bc 	blx	101da90 <puts>
		return XST_DEVICE_IS_STARTED;
 1014b9c:	e3a00005 	mov	r0, #5
 1014ba0:	eaffffea 	b	1014b50 <XAxiDma_BdRingClone+0xe4>

01014ba4 <XAxiDma_StartBdRingHw>:
int XAxiDma_StartBdRingHw(XAxiDma_BdRing * RingPtr)
{
	UINTPTR RegBase;
	int RingIndex = RingPtr->RingIndex;

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1014ba4:	e5903000 	ldr	r3, [r0]
{
 1014ba8:	e92d4070 	push	{r4, r5, r6, lr}
	int RingIndex = RingPtr->RingIndex;
 1014bac:	e5906064 	ldr	r6, [r0, #100]	; 0x64
	return *(volatile u32 *) Addr;
 1014bb0:	e5932004 	ldr	r2, [r3, #4]
	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1014bb4:	e3120001 	tst	r2, #1
 1014bb8:	15932000 	ldrne	r2, [r3]
		/* Start the hardware
		*/
		RegBase = RingPtr->ChanBase;
		XAxiDma_WriteReg(RegBase, XAXIDMA_CR_OFFSET,
 1014bbc:	13822001 	orrne	r2, r2, #1
	*LocalAddr = Value;
 1014bc0:	15832000 	strne	r2, [r3]
	return *(volatile u32 *) Addr;
 1014bc4:	e5933004 	ldr	r3, [r3, #4]
			XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET)
			| XAXIDMA_CR_RUNSTOP_MASK);
	}

	if (XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1014bc8:	e2135001 	ands	r5, r3, #1
 1014bcc:	1a000026 	bne	1014c6c <XAxiDma_StartBdRingHw+0xc8>
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;

		/* If there are unprocessed BDs then we want the channel to begin
		 * processing right away
		 */
		if (RingPtr->HwCnt > 0) {
 1014bd0:	e5903058 	ldr	r3, [r0, #88]	; 0x58
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1014bd4:	e3a02001 	mov	r2, #1
 1014bd8:	e5802008 	str	r2, [r0, #8]
		if (RingPtr->HwCnt > 0) {
 1014bdc:	e3530000 	cmp	r3, #0
 1014be0:	da00001f 	ble	1014c64 <XAxiDma_StartBdRingHw+0xc0>

			XAXIDMA_CACHE_INVALIDATE(RingPtr->HwTail);
 1014be4:	e1a04000 	mov	r4, r0
 1014be8:	e3a01034 	mov	r1, #52	; 0x34
 1014bec:	e5900040 	ldr	r0, [r0, #64]	; 0x40
 1014bf0:	eb001105 	bl	101900c <Xil_DCacheInvalidateRange>
			if (RingPtr->Cyclic) {
 1014bf4:	e5942068 	ldr	r2, [r4, #104]	; 0x68
 1014bf8:	e3520000 	cmp	r2, #0
 1014bfc:	1a00001c 	bne	1014c74 <XAxiDma_StartBdRingHw+0xd0>
							 XAXIDMA_TDESC_MSB_OFFSET,
							 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->CyclicBd)));
				return XST_SUCCESS;
			}

			if ((XAxiDma_BdRead(RingPtr->HwTail,
 1014c00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
 1014c04:	e593101c 	ldr	r1, [r3, #28]
 1014c08:	e3510000 	cmp	r1, #0
 1014c0c:	ba000014 	blt	1014c64 <XAxiDma_StartBdRingHw+0xc0>
				    XAXIDMA_BD_STS_OFFSET) &
				XAXIDMA_BD_STS_COMPLETE_MASK) == 0) {
				if (RingPtr->IsRxChannel) {
 1014c10:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1014c14:	e5940004 	ldr	r0, [r4, #4]
 1014c18:	e594c020 	ldr	ip, [r4, #32]
 1014c1c:	e0433001 	sub	r3, r3, r1
 1014c20:	e594e018 	ldr	lr, [r4, #24]
 1014c24:	e3500000 	cmp	r0, #0
 1014c28:	e5941000 	ldr	r1, [r4]
 1014c2c:	e083300c 	add	r3, r3, ip
 1014c30:	e3c3303f 	bic	r3, r3, #63	; 0x3f
 1014c34:	0a000007 	beq	1014c58 <XAxiDma_StartBdRingHw+0xb4>
					if (!RingIndex) {
 1014c38:	e3560000 	cmp	r6, #0
 1014c3c:	1a00001b 	bne	1014cb0 <XAxiDma_StartBdRingHw+0x10c>
						XAxiDma_WriteReg(RingPtr->ChanBase,
							XAXIDMA_TDESC_OFFSET, (XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail) & XAXIDMA_DESC_LSB_MASK));
						if (RingPtr->Addr_ext)
 1014c40:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1014c44:	e5813010 	str	r3, [r1, #16]
 1014c48:	0a000005 	beq	1014c64 <XAxiDma_StartBdRingHw+0xc0>
 1014c4c:	e5816014 	str	r6, [r1, #20]
								 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
				}
			}
		}

		return XST_SUCCESS;
 1014c50:	e1a00006 	mov	r0, r6
 1014c54:	e8bd8070 	pop	{r4, r5, r6, pc}
					if (RingPtr->Addr_ext)
 1014c58:	e35e0000 	cmp	lr, #0
 1014c5c:	e5813010 	str	r3, [r1, #16]
 1014c60:	1a000010 	bne	1014ca8 <XAxiDma_StartBdRingHw+0x104>
		return XST_SUCCESS;
 1014c64:	e3a00000 	mov	r0, #0
 1014c68:	e8bd8070 	pop	{r4, r5, r6, pc}
	}

	return XST_DMA_ERROR;
 1014c6c:	e3a00009 	mov	r0, #9
}
 1014c70:	e8bd8070 	pop	{r4, r5, r6, pc}
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1014c74:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
 1014c78:	e594c024 	ldr	ip, [r4, #36]	; 0x24
				if (RingPtr->Addr_ext)
 1014c7c:	e5940018 	ldr	r0, [r4, #24]
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1014c80:	e5941020 	ldr	r1, [r4, #32]
 1014c84:	e5942000 	ldr	r2, [r4]
 1014c88:	e043300c 	sub	r3, r3, ip
				if (RingPtr->Addr_ext)
 1014c8c:	e3500000 	cmp	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1014c90:	e0833001 	add	r3, r3, r1
 1014c94:	e5823010 	str	r3, [r2, #16]
				if (RingPtr->Addr_ext)
 1014c98:	0afffff1 	beq	1014c64 <XAxiDma_StartBdRingHw+0xc0>
 1014c9c:	e5825014 	str	r5, [r2, #20]
				return XST_SUCCESS;
 1014ca0:	e1a00005 	mov	r0, r5
 1014ca4:	e8bd8070 	pop	{r4, r5, r6, pc}
 1014ca8:	e5810014 	str	r0, [r1, #20]
 1014cac:	e8bd8070 	pop	{r4, r5, r6, pc}
						XAxiDma_WriteReg(RingPtr->ChanBase,
 1014cb0:	e2466001 	sub	r6, r6, #1
						if (RingPtr->Addr_ext)
 1014cb4:	e35e0000 	cmp	lr, #0
						XAxiDma_WriteReg(RingPtr->ChanBase,
 1014cb8:	e0816286 	add	r6, r1, r6, lsl #5
 1014cbc:	e5863048 	str	r3, [r6, #72]	; 0x48
						if (RingPtr->Addr_ext)
 1014cc0:	0affffe7 	beq	1014c64 <XAxiDma_StartBdRingHw+0xc0>
 1014cc4:	e586204c 	str	r2, [r6, #76]	; 0x4c
		return XST_SUCCESS;
 1014cc8:	e1a00002 	mov	r0, r2
 1014ccc:	e8bd8070 	pop	{r4, r5, r6, pc}

01014cd0 <XAxiDma_BdRingStart>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingStart(XAxiDma_BdRing * RingPtr)
{
 1014cd0:	e92d4070 	push	{r4, r5, r6, lr}
 1014cd4:	e1a05000 	mov	r5, r0
	int Status;

	Status = XAxiDma_UpdateBdRingCDesc(RingPtr);
 1014cd8:	ebfffe7c 	bl	10146d0 <XAxiDma_UpdateBdRingCDesc>
	if (Status != XST_SUCCESS) {
 1014cdc:	e2504000 	subs	r4, r0, #0
 1014ce0:	1a000005 	bne	1014cfc <XAxiDma_BdRingStart+0x2c>
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
			"Updating Current Descriptor Failed\n\r");
		return Status;
	}

	Status = XAxiDma_StartBdRingHw(RingPtr);
 1014ce4:	e1a00005 	mov	r0, r5
 1014ce8:	ebffffad 	bl	1014ba4 <XAxiDma_StartBdRingHw>
	if (Status != XST_SUCCESS) {
 1014cec:	e2504000 	subs	r4, r0, #0
 1014cf0:	1a000006 	bne	1014d10 <XAxiDma_BdRingStart+0x40>
			"Starting Hardware Failed\n\r");
		return Status;
	}

	return XST_SUCCESS;
}
 1014cf4:	e1a00004 	mov	r0, r4
 1014cf8:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1014cfc:	e30b090c 	movw	r0, #47372	; 0xb90c
 1014d00:	e3400106 	movt	r0, #262	; 0x106
 1014d04:	fa00233c 	blx	101d9fc <printf>
}
 1014d08:	e1a00004 	mov	r0, r4
 1014d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1014d10:	e30b0940 	movw	r0, #47424	; 0xb940
 1014d14:	e3400106 	movt	r0, #262	; 0x106
 1014d18:	fa002337 	blx	101d9fc <printf>
}
 1014d1c:	e1a00004 	mov	r0, r4
 1014d20:	e8bd8070 	pop	{r4, r5, r6, pc}

01014d24 <XAxiDma_BdRingSetCoalesce>:
	return *(volatile u32 *) Addr;
 1014d24:	e590c000 	ldr	ip, [r0]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	if (Counter != XAXIDMA_NO_CHANGE) {
 1014d28:	e3710001 	cmn	r1, #1
{
 1014d2c:	e92d4010 	push	{r4, lr}
 1014d30:	e59c3000 	ldr	r3, [ip]
	if (Counter != XAXIDMA_NO_CHANGE) {
 1014d34:	0a000004 	beq	1014d4c <XAxiDma_BdRingSetCoalesce+0x28>
		if ((Counter == 0) || (Counter > 0xFF)) {
 1014d38:	e241e001 	sub	lr, r1, #1
 1014d3c:	e35e00fe 	cmp	lr, #254	; 0xfe
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
			"invalid  coalescing threshold %d", (int)Counter);
			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_COALESCE_MASK) |
 1014d40:	93c338ff 	bicls	r3, r3, #16711680	; 0xff0000
 1014d44:	91833801 	orrls	r3, r3, r1, lsl #16
		if ((Counter == 0) || (Counter > 0xFF)) {
 1014d48:	8a00000d 	bhi	1014d84 <XAxiDma_BdRingSetCoalesce+0x60>
			(Counter << XAXIDMA_COALESCE_SHIFT);
	}

	if (Timer != XAXIDMA_NO_CHANGE) {
 1014d4c:	e3720001 	cmn	r2, #1
 1014d50:	0a000002 	beq	1014d60 <XAxiDma_BdRingSetCoalesce+0x3c>
		if (Timer > 0xFF) {
 1014d54:	e35200ff 	cmp	r2, #255	; 0xff
			"invalid  delay counter %d", (int)Timer);

			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_DELAY_MASK) |
 1014d58:	97df3c12 	bfils	r3, r2, #24, #8
		if (Timer > 0xFF) {
 1014d5c:	8a000002 	bhi	1014d6c <XAxiDma_BdRingSetCoalesce+0x48>
			(Timer << XAXIDMA_DELAY_SHIFT);
	}

	XAxiDma_WriteReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET, Cr);

	return XST_SUCCESS;
 1014d60:	e3a00000 	mov	r0, #0
	*LocalAddr = Value;
 1014d64:	e58c3000 	str	r3, [ip]
}
 1014d68:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1014d6c:	e30b099c 	movw	r0, #47516	; 0xb99c
 1014d70:	e1a01002 	mov	r1, r2
 1014d74:	e3400106 	movt	r0, #262	; 0x106
 1014d78:	fa00231f 	blx	101d9fc <printf>
			return XST_FAILURE;
 1014d7c:	e3a00001 	mov	r0, #1
 1014d80:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1014d84:	e30b0968 	movw	r0, #47464	; 0xb968
 1014d88:	e3400106 	movt	r0, #262	; 0x106
 1014d8c:	fa00231a 	blx	101d9fc <printf>
			return XST_FAILURE;
 1014d90:	e3a00001 	mov	r0, #1
 1014d94:	e8bd8010 	pop	{r4, pc}

01014d98 <XAxiDma_BdRingGetCoalesce>:
	return *(volatile u32 *) Addr;
 1014d98:	e5903000 	ldr	r3, [r0]
 1014d9c:	e5933000 	ldr	r3, [r3]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1014da0:	e7e70853 	ubfx	r0, r3, #16, #8
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1014da4:	e1a03c23 	lsr	r3, r3, #24
	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1014da8:	e5810000 	str	r0, [r1]
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1014dac:	e5823000 	str	r3, [r2]
}
 1014db0:	e12fff1e 	bx	lr

01014db4 <XAxiDma_BdRingAlloc>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd ** BdSetPtr)
{
 1014db4:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1014db8:	e251e000 	subs	lr, r1, #0
 1014dbc:	da00001f 	ble	1014e40 <XAxiDma_BdRingAlloc+0x8c>

		return XST_INVALID_PARAM;
	}

	/* Enough free BDs available for the request? */
	if (RingPtr->FreeCnt < NumBd) {
 1014dc0:	e590c050 	ldr	ip, [r0, #80]	; 0x50
 1014dc4:	e15c000e 	cmp	ip, lr
 1014dc8:	ba000015 	blt	1014e24 <XAxiDma_BdRingAlloc+0x70>
		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead forward */
	*BdSetPtr = RingPtr->FreeHead;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1014dcc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->FreeCnt -= NumBd;
 1014dd0:	e04cc00e 	sub	ip, ip, lr
	*BdSetPtr = RingPtr->FreeHead;
 1014dd4:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1014dd8:	e5904028 	ldr	r4, [r0, #40]	; 0x28
 1014ddc:	e0030e93 	mul	r3, r3, lr
	*BdSetPtr = RingPtr->FreeHead;
 1014de0:	e5821000 	str	r1, [r2]
	RingPtr->FreeCnt -= NumBd;
 1014de4:	e580c050 	str	ip, [r0, #80]	; 0x50
 1014de8:	e0933001 	adds	r3, r3, r1
	RingPtr->PreCnt += NumBd;

	return XST_SUCCESS;
 1014dec:	e3a01000 	mov	r1, #0
 1014df0:	23a02001 	movcs	r2, #1
 1014df4:	33a02000 	movcc	r2, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1014df8:	e1540003 	cmp	r4, r3
 1014dfc:	33822001 	orrcc	r2, r2, #1
 1014e00:	e3520000 	cmp	r2, #0
 1014e04:	1590202c 	ldrne	r2, [r0, #44]	; 0x2c
 1014e08:	10433002 	subne	r3, r3, r2
	RingPtr->PreCnt += NumBd;
 1014e0c:	e5902054 	ldr	r2, [r0, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1014e10:	e5803034 	str	r3, [r0, #52]	; 0x34
	RingPtr->PreCnt += NumBd;
 1014e14:	e082e00e 	add	lr, r2, lr
 1014e18:	e580e054 	str	lr, [r0, #84]	; 0x54
}
 1014e1c:	e1a00001 	mov	r0, r1
 1014e20:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1014e24:	e30b09f4 	movw	r0, #47604	; 0xb9f4
 1014e28:	e1a0200c 	mov	r2, ip
 1014e2c:	e3400106 	movt	r0, #262	; 0x106
 1014e30:	fa0022f1 	blx	101d9fc <printf>
		return XST_FAILURE;
 1014e34:	e3a01001 	mov	r1, #1
}
 1014e38:	e1a00001 	mov	r0, r1
 1014e3c:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingAlloc: negative BD "
 1014e40:	e30b09cc 	movw	r0, #47564	; 0xb9cc
 1014e44:	e3400106 	movt	r0, #262	; 0x106
 1014e48:	fa0022eb 	blx	101d9fc <printf>
		return XST_INVALID_PARAM;
 1014e4c:	e3a0100f 	mov	r1, #15
 1014e50:	eafffff1 	b	1014e1c <XAxiDma_BdRingAlloc+0x68>

01014e54 <XAxiDma_BdRingUnAlloc>:
int XAxiDma_BdRingUnAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
	XAxiDma_Bd *TmpBd;

	if (NumBd <= 0) {
 1014e54:	e251c000 	subs	ip, r1, #0
{
 1014e58:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1014e5c:	da00002d 	ble	1014f18 <XAxiDma_BdRingUnAlloc+0xc4>

		return XST_INVALID_PARAM;
	}

	/* Enough BDs in the preprocessing state for the request? */
	if (RingPtr->PreCnt < NumBd) {
 1014e60:	e5901054 	ldr	r1, [r0, #84]	; 0x54
 1014e64:	e1a03000 	mov	r3, r0
 1014e68:	e151000c 	cmp	r1, ip
 1014e6c:	ba000023 	blt	1014f00 <XAxiDma_BdRingUnAlloc+0xac>

	/* The last BD in the BD set must has the FreeHead as its next BD.
	 * Otherwise, this is not a valid operation.
	 */
	TmpBd = BdSetPtr;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, TmpBd, NumBd);
 1014e70:	e5900030 	ldr	r0, [r0, #48]	; 0x30
 1014e74:	e5934028 	ldr	r4, [r3, #40]	; 0x28
 1014e78:	e0000c90 	mul	r0, r0, ip
 1014e7c:	e0902002 	adds	r2, r0, r2
 1014e80:	23a0e001 	movcs	lr, #1
 1014e84:	33a0e000 	movcc	lr, #0
 1014e88:	e1540002 	cmp	r4, r2
 1014e8c:	338ee001 	orrcc	lr, lr, #1
 1014e90:	e35e0000 	cmp	lr, #0
 1014e94:	1593e02c 	ldrne	lr, [r3, #44]	; 0x2c
 1014e98:	1042200e 	subne	r2, r2, lr

	if (TmpBd != RingPtr->FreeHead) {
 1014e9c:	e593e034 	ldr	lr, [r3, #52]	; 0x34
 1014ea0:	e15e0002 	cmp	lr, r2
 1014ea4:	1a000010 	bne	1014eec <XAxiDma_BdRingUnAlloc+0x98>

		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead backward */
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1014ea8:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1014eac:	e0522000 	subs	r2, r2, r0
 1014eb0:	33a00001 	movcc	r0, #1
 1014eb4:	23a00000 	movcs	r0, #0
	RingPtr->FreeCnt += NumBd;
	RingPtr->PreCnt -= NumBd;
 1014eb8:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1014ebc:	e15e0002 	cmp	lr, r2
 1014ec0:	83800001 	orrhi	r0, r0, #1
	RingPtr->FreeCnt += NumBd;
 1014ec4:	e593e050 	ldr	lr, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1014ec8:	e3500000 	cmp	r0, #0
	RingPtr->PreCnt -= NumBd;
 1014ecc:	e5831054 	str	r1, [r3, #84]	; 0x54
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1014ed0:	1593002c 	ldrne	r0, [r3, #44]	; 0x2c
	RingPtr->FreeCnt += NumBd;
 1014ed4:	e08ec00c 	add	ip, lr, ip
 1014ed8:	e583c050 	str	ip, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1014edc:	10822000 	addne	r2, r2, r0

	return XST_SUCCESS;
 1014ee0:	e3a00000 	mov	r0, #0
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1014ee4:	e5832034 	str	r2, [r3, #52]	; 0x34
}
 1014ee8:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1014eec:	e30b0a6c 	movw	r0, #47724	; 0xba6c
 1014ef0:	e3400106 	movt	r0, #262	; 0x106
 1014ef4:	fa0022e5 	blx	101da90 <puts>
		return XST_FAILURE;
 1014ef8:	e3a00001 	mov	r0, #1
 1014efc:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1014f00:	e30b0a3c 	movw	r0, #47676	; 0xba3c
 1014f04:	e1a0200c 	mov	r2, ip
 1014f08:	e3400106 	movt	r0, #262	; 0x106
 1014f0c:	fa0022ba 	blx	101d9fc <printf>
		return XST_FAILURE;
 1014f10:	e3a00001 	mov	r0, #1
 1014f14:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingUnAlloc: negative BD"
 1014f18:	e30b0a14 	movw	r0, #47636	; 0xba14
 1014f1c:	e3400106 	movt	r0, #262	; 0x106
 1014f20:	fa0022b5 	blx	101d9fc <printf>
		return XST_INVALID_PARAM;
 1014f24:	e3a0000f 	mov	r0, #15
 1014f28:	e8bd8010 	pop	{r4, pc}

01014f2c <XAxiDma_BdRingToHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingToHw(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
 1014f2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	int i;
	u32 BdCr;
	u32 BdSts;
	int RingIndex = RingPtr->RingIndex;

	if (NumBd < 0) {
 1014f30:	e2516000 	subs	r6, r1, #0
{
 1014f34:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 1014f38:	ba000069 	blt	10150e4 <XAxiDma_BdRingToHw+0x1b8>

		return XST_INVALID_PARAM;
	}

	/* If the commit set is empty, do nothing */
	if (NumBd == 0) {
 1014f3c:	0a000052 	beq	101508c <XAxiDma_BdRingToHw+0x160>
		return XST_SUCCESS;
	}

	/* Make sure we are in sync with XAxiDma_BdRingAlloc() */
	if ((RingPtr->PreCnt < NumBd) || (RingPtr->PreHead != BdSetPtr)) {
 1014f40:	e5903054 	ldr	r3, [r0, #84]	; 0x54
 1014f44:	e1a05000 	mov	r5, r0
 1014f48:	e1530006 	cmp	r3, r6
 1014f4c:	ba000051 	blt	1015098 <XAxiDma_BdRingToHw+0x16c>
 1014f50:	e5903038 	ldr	r3, [r0, #56]	; 0x38
 1014f54:	e1530002 	cmp	r3, r2
 1014f58:	1a00004e 	bne	1015098 <XAxiDma_BdRingToHw+0x16c>
	BdSts = XAxiDma_BdGetSts(CurBdPtr);

	/* In case of Tx channel, the first BD should have been marked
	 * as start-of-frame
	 */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1014f5c:	e5901004 	ldr	r1, [r0, #4]
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1014f60:	e1a04002 	mov	r4, r2
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1014f64:	e592301c 	ldr	r3, [r2, #28]
	int RingIndex = RingPtr->RingIndex;
 1014f68:	e5907064 	ldr	r7, [r0, #100]	; 0x64
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1014f6c:	e3510000 	cmp	r1, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1014f70:	e5921018 	ldr	r1, [r2, #24]
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1014f74:	e203333f 	and	r3, r3, #-67108864	; 0xfc000000
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1014f78:	0a00004c 	beq	10150b0 <XAxiDma_BdRingToHw+0x184>
		return XST_FAILURE;
	}

	/* Clear the completed status bit
	 */
	for (i = 0; i < NumBd - 1; i++) {
 1014f7c:	e2468001 	sub	r8, r6, #1
 1014f80:	e3580000 	cmp	r8, #0
 1014f84:	da00001e 	ble	1015004 <XAxiDma_BdRingToHw+0xd8>

		/* Make sure the length value in the BD is non-zero. */
		if (XAxiDma_BdGetLength(CurBdPtr,
 1014f88:	e595001c 	ldr	r0, [r5, #28]
 1014f8c:	e1110000 	tst	r1, r0
 1014f90:	13a09000 	movne	r9, #0
 1014f94:	1a000003 	bne	1014fa8 <XAxiDma_BdRingToHw+0x7c>
 1014f98:	ea00004b 	b	10150cc <XAxiDma_BdRingToHw+0x1a0>
 1014f9c:	e595001c 	ldr	r0, [r5, #28]
 1014fa0:	e1110000 	tst	r1, r0
 1014fa4:	0a000048 	beq	10150cc <XAxiDma_BdRingToHw+0x1a0>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");

			return XST_FAILURE;
		}

		BdSts &=  ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1014fa8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

		/* Flush the current BD so DMA core could see the updates */
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1014fac:	e1a00002 	mov	r0, r2
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1014fb0:	e584301c 	str	r3, [r4, #28]
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1014fb4:	e3a01034 	mov	r1, #52	; 0x34
 1014fb8:	eb001060 	bl	1019140 <Xil_DCacheFlushRange>

		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1014fbc:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	for (i = 0; i < NumBd - 1; i++) {
 1014fc0:	e2899001 	add	r9, r9, #1
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1014fc4:	e1530004 	cmp	r3, r4
 1014fc8:	85953030 	ldrhi	r3, [r5, #48]	; 0x30
 1014fcc:	95954024 	ldrls	r4, [r5, #36]	; 0x24
 1014fd0:	80844003 	addhi	r4, r4, r3
	for (i = 0; i < NumBd - 1; i++) {
 1014fd4:	e1590008 	cmp	r9, r8
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1014fd8:	e1a02004 	mov	r2, r4
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1014fdc:	e5941018 	ldr	r1, [r4, #24]
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1014fe0:	e594301c 	ldr	r3, [r4, #28]
	for (i = 0; i < NumBd - 1; i++) {
 1014fe4:	baffffec 	blt	1014f9c <XAxiDma_BdRingToHw+0x70>
	}

	/* In case of Tx channel, the last BD should have EOF bit set */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) {
 1014fe8:	e5950004 	ldr	r0, [r5, #4]
 1014fec:	e3500000 	cmp	r0, #0
 1014ff0:	1a000003 	bne	1015004 <XAxiDma_BdRingToHw+0xd8>
 1014ff4:	e3110301 	tst	r1, #67108864	; 0x4000000
 1014ff8:	0a000058 	beq	1015160 <XAxiDma_BdRingToHw+0x234>
 1014ffc:	e5921018 	ldr	r1, [r2, #24]
 1015000:	e1a04002 	mov	r4, r2

		return XST_FAILURE;
	}

	/* Make sure the length value in the last BD is non-zero. */
	if (XAxiDma_BdGetLength(CurBdPtr,
 1015004:	e595001c 	ldr	r0, [r5, #28]
 1015008:	e1110000 	tst	r1, r0
 101500c:	0a00002e 	beq	10150cc <XAxiDma_BdRingToHw+0x1a0>
		return XST_FAILURE;
	}

	/* The last BD should also have the completed status bit cleared
	 */
	BdSts &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1015010:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

	/* Flush the last BD so DMA core could see the updates */
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1015014:	e3a01034 	mov	r1, #52	; 0x34
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1015018:	e584301c 	str	r3, [r4, #28]
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 101501c:	e1a00002 	mov	r0, r2
 1015020:	e58d2004 	str	r2, [sp, #4]
 1015024:	eb001045 	bl	1019140 <Xil_DCacheFlushRange>
	DATA_SYNC;
 1015028:	f57ff04f 	dsb	sy

	/* This set has completed pre-processing, adjust ring pointers and
	 * counters
	 */
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 101502c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1015030:	e5950038 	ldr	r0, [r5, #56]	; 0x38
 1015034:	e595c028 	ldr	ip, [r5, #40]	; 0x28
 1015038:	e59d2004 	ldr	r2, [sp, #4]
 101503c:	e0030693 	mul	r3, r3, r6
	RingPtr->PreCnt -= NumBd;
	RingPtr->HwTail = CurBdPtr;
 1015040:	e5852040 	str	r2, [r5, #64]	; 0x40
 1015044:	e0933000 	adds	r3, r3, r0
	RingPtr->HwCnt += NumBd;

	/* If it is running, signal the engine to begin processing */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1015048:	e5950008 	ldr	r0, [r5, #8]
 101504c:	23a01001 	movcs	r1, #1
 1015050:	33a01000 	movcc	r1, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1015054:	e15c0003 	cmp	ip, r3
 1015058:	33811001 	orrcc	r1, r1, #1
 101505c:	e3510000 	cmp	r1, #0
 1015060:	1595102c 	ldrne	r1, [r5, #44]	; 0x2c
 1015064:	10433001 	subne	r3, r3, r1
	RingPtr->PreCnt -= NumBd;
 1015068:	e5951054 	ldr	r1, [r5, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 101506c:	e5853038 	str	r3, [r5, #56]	; 0x38
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1015070:	e3500001 	cmp	r0, #1
	RingPtr->HwCnt += NumBd;
 1015074:	e5953058 	ldr	r3, [r5, #88]	; 0x58
	RingPtr->PreCnt -= NumBd;
 1015078:	e0411006 	sub	r1, r1, r6
 101507c:	e5851054 	str	r1, [r5, #84]	; 0x54
	RingPtr->HwCnt += NumBd;
 1015080:	e0836006 	add	r6, r3, r6
 1015084:	e5856058 	str	r6, [r5, #88]	; 0x58
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1015088:	0a00001a 	beq	10150f8 <XAxiDma_BdRingToHw+0x1cc>
		return XST_SUCCESS;
 101508c:	e3a00000 	mov	r0, #0
								UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
			}
	}

	return XST_SUCCESS;
}
 1015090:	e28dd00c 	add	sp, sp, #12
 1015094:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Bd ring has problems\r\n");
 1015098:	e30b0ab8 	movw	r0, #47800	; 0xbab8
 101509c:	e3400106 	movt	r0, #262	; 0x106
 10150a0:	fa00227a 	blx	101da90 <puts>
		return XST_DMA_SG_LIST_ERROR;
 10150a4:	e300020e 	movw	r0, #526	; 0x20e
}
 10150a8:	e28dd00c 	add	sp, sp, #12
 10150ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 10150b0:	e3110302 	tst	r1, #134217728	; 0x8000000
 10150b4:	0a000024 	beq	101514c <XAxiDma_BdRingToHw+0x220>
	for (i = 0; i < NumBd - 1; i++) {
 10150b8:	e2468001 	sub	r8, r6, #1
 10150bc:	e3580000 	cmp	r8, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 10150c0:	d2011303 	andle	r1, r1, #201326592	; 0xc000000
	for (i = 0; i < NumBd - 1; i++) {
 10150c4:	caffffaf 	bgt	1014f88 <XAxiDma_BdRingToHw+0x5c>
 10150c8:	eaffffc9 	b	1014ff4 <XAxiDma_BdRingToHw+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");
 10150cc:	e30b0af0 	movw	r0, #47856	; 0xbaf0
 10150d0:	e3400106 	movt	r0, #262	; 0x106
 10150d4:	fa00226d 	blx	101da90 <puts>
			return XST_FAILURE;
 10150d8:	e3a00001 	mov	r0, #1
}
 10150dc:	e28dd00c 	add	sp, sp, #12
 10150e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingToHw: negative BD number "
 10150e4:	e30b0a94 	movw	r0, #47764	; 0xba94
 10150e8:	e3400106 	movt	r0, #262	; 0x106
 10150ec:	fa002242 	blx	101d9fc <printf>
		return XST_INVALID_PARAM;
 10150f0:	e3a0000f 	mov	r0, #15
 10150f4:	eaffffeb 	b	10150a8 <XAxiDma_BdRingToHw+0x17c>
			if (RingPtr->Cyclic) {
 10150f8:	e5952068 	ldr	r2, [r5, #104]	; 0x68
 10150fc:	e5951000 	ldr	r1, [r5]
 1015100:	e5953020 	ldr	r3, [r5, #32]
 1015104:	e3520000 	cmp	r2, #0
 1015108:	e595c024 	ldr	ip, [r5, #36]	; 0x24
 101510c:	e595e018 	ldr	lr, [r5, #24]
 1015110:	1a000017 	bne	1015174 <XAxiDma_BdRingToHw+0x248>
			if (RingPtr->IsRxChannel) {
 1015114:	e5950004 	ldr	r0, [r5, #4]
 1015118:	e043300c 	sub	r3, r3, ip
 101511c:	e0834004 	add	r4, r3, r4
 1015120:	e3c4403f 	bic	r4, r4, #63	; 0x3f
 1015124:	e3500000 	cmp	r0, #0
 1015128:	0a00001a 	beq	1015198 <XAxiDma_BdRingToHw+0x26c>
				if (!RingIndex) {
 101512c:	e3570000 	cmp	r7, #0
 1015130:	1a00001d 	bne	10151ac <XAxiDma_BdRingToHw+0x280>
					if (RingPtr->Addr_ext)
 1015134:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1015138:	e5814010 	str	r4, [r1, #16]
	return XST_SUCCESS;
 101513c:	11a00007 	movne	r0, r7
 1015140:	15817014 	strne	r7, [r1, #20]
					if (RingPtr->Addr_ext)
 1015144:	1affffd7 	bne	10150a8 <XAxiDma_BdRingToHw+0x17c>
 1015148:	eaffffcf 	b	101508c <XAxiDma_BdRingToHw+0x160>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx first BD does not have "
 101514c:	e30b0ad0 	movw	r0, #47824	; 0xbad0
 1015150:	e3400106 	movt	r0, #262	; 0x106
 1015154:	fa00224d 	blx	101da90 <puts>
		return XST_FAILURE;
 1015158:	e3a00001 	mov	r0, #1
 101515c:	eaffffd1 	b	10150a8 <XAxiDma_BdRingToHw+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx last BD does not have "
 1015160:	e30b0b00 	movw	r0, #47872	; 0xbb00
 1015164:	e3400106 	movt	r0, #262	; 0x106
 1015168:	fa002248 	blx	101da90 <puts>
		return XST_FAILURE;
 101516c:	e3a00001 	mov	r0, #1
 1015170:	eaffffcc 	b	10150a8 <XAxiDma_BdRingToHw+0x17c>
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1015174:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
				if (RingPtr->Addr_ext)
 1015178:	e35e0000 	cmp	lr, #0
 101517c:	13a00000 	movne	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1015180:	e042c00c 	sub	ip, r2, ip
 1015184:	e08c3003 	add	r3, ip, r3
 1015188:	e5813010 	str	r3, [r1, #16]
 101518c:	15810014 	strne	r0, [r1, #20]
				if (RingPtr->Addr_ext)
 1015190:	1affffc4 	bne	10150a8 <XAxiDma_BdRingToHw+0x17c>
 1015194:	eaffffbc 	b	101508c <XAxiDma_BdRingToHw+0x160>
				if (RingPtr->Addr_ext)
 1015198:	e35e0000 	cmp	lr, #0
 101519c:	e5814010 	str	r4, [r1, #16]
 10151a0:	15810014 	strne	r0, [r1, #20]
 10151a4:	1affffbf 	bne	10150a8 <XAxiDma_BdRingToHw+0x17c>
 10151a8:	eaffffb7 	b	101508c <XAxiDma_BdRingToHw+0x160>
					XAxiDma_WriteReg(RingPtr->ChanBase,
 10151ac:	e2477001 	sub	r7, r7, #1
					if (RingPtr->Addr_ext)
 10151b0:	e35e0000 	cmp	lr, #0
					XAxiDma_WriteReg(RingPtr->ChanBase,
 10151b4:	e0811287 	add	r1, r1, r7, lsl #5
	return XST_SUCCESS;
 10151b8:	11a00002 	movne	r0, r2
 10151bc:	e5814048 	str	r4, [r1, #72]	; 0x48
 10151c0:	1581204c 	strne	r2, [r1, #76]	; 0x4c
					if (RingPtr->Addr_ext)
 10151c4:	1affffb7 	bne	10150a8 <XAxiDma_BdRingToHw+0x17c>
 10151c8:	eaffffaf 	b	101508c <XAxiDma_BdRingToHw+0x160>

010151cc <XAxiDma_BdRingFromHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingFromHw(XAxiDma_BdRing * RingPtr, int BdLimit,
			     XAxiDma_Bd ** BdSetPtr)
{
 10151cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10151d0:	e1a09002 	mov	r9, r2
	BdPartialCount = 0;
	BdSts = 0;
	BdCr = 0;

	/* If no BDs in work group, then there's nothing to search */
	if (RingPtr->HwCnt == 0) {
 10151d4:	e5908058 	ldr	r8, [r0, #88]	; 0x58
 10151d8:	e3580000 	cmp	r8, #0
 10151dc:	0a00004c 	beq	1015314 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}

	if (BdLimit > RingPtr->HwCnt) {
 10151e0:	e1580001 	cmp	r8, r1
 10151e4:	a1a08001 	movge	r8, r1
	 *    BD.
	 *  - RingPtr->HwTail is reached
	 *  - The number of requested BDs has been processed
	 */

	while (BdCount < BdLimit) {
 10151e8:	e3580000 	cmp	r8, #0
 10151ec:	da000048 	ble	1015314 <XAxiDma_BdRingFromHw+0x148>
	CurBdPtr = RingPtr->HwHead;
 10151f0:	e3a07000 	mov	r7, #0
 10151f4:	e1a05000 	mov	r5, r0
 10151f8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
 10151fc:	e1a06007 	mov	r6, r7
 1015200:	ea00000f 	b	1015244 <XAxiDma_BdRingFromHw+0x78>
		 * For tx BDs, EOF bit is in the control word
		 * For rx BDs, EOF bit is in the status word
		 */
		if (((!(RingPtr->IsRxChannel) &&
		(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) ||
		((RingPtr->IsRxChannel) && (BdSts &
 1015204:	e3130301 	tst	r3, #67108864	; 0x4000000
 1015208:	0a00001b 	beq	101527c <XAxiDma_BdRingFromHw+0xb0>
		}
		else {
			BdPartialCount++;
		}

		if (RingPtr->Cyclic) {
 101520c:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount = 0;
 1015210:	e3a07000 	mov	r7, #0
		if (RingPtr->Cyclic) {
 1015214:	e3520000 	cmp	r2, #0
 1015218:	1a00001b 	bne	101528c <XAxiDma_BdRingFromHw+0xc0>
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
		}

		/* Reached the end of the work group */
		if (CurBdPtr == RingPtr->HwTail) {
 101521c:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1015220:	e1530004 	cmp	r3, r4
 1015224:	0a000020 	beq	10152ac <XAxiDma_BdRingFromHw+0xe0>
			break;
		}

		/* Move on to the next BD in work group */
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1015228:	e5953028 	ldr	r3, [r5, #40]	; 0x28
 101522c:	e1540003 	cmp	r4, r3
 1015230:	35953030 	ldrcc	r3, [r5, #48]	; 0x30
 1015234:	25954024 	ldrcs	r4, [r5, #36]	; 0x24
 1015238:	30844003 	addcc	r4, r4, r3
	while (BdCount < BdLimit) {
 101523c:	e1580006 	cmp	r8, r6
 1015240:	0a000019 	beq	10152ac <XAxiDma_BdRingFromHw+0xe0>
		XAXIDMA_CACHE_INVALIDATE(CurBdPtr);
 1015244:	e3a01034 	mov	r1, #52	; 0x34
 1015248:	e1a00004 	mov	r0, r4
 101524c:	eb000f6e 	bl	101900c <Xil_DCacheInvalidateRange>
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1015250:	e594301c 	ldr	r3, [r4, #28]
 1015254:	e284001c 	add	r0, r4, #28
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1015258:	e5941018 	ldr	r1, [r4, #24]
		if (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)) {
 101525c:	e3530000 	cmp	r3, #0
 1015260:	aa000011 	bge	10152ac <XAxiDma_BdRingFromHw+0xe0>
		if (((!(RingPtr->IsRxChannel) &&
 1015264:	e5952004 	ldr	r2, [r5, #4]
		BdCount++;
 1015268:	e2866001 	add	r6, r6, #1
		if (((!(RingPtr->IsRxChannel) &&
 101526c:	e3520000 	cmp	r2, #0
 1015270:	1affffe3 	bne	1015204 <XAxiDma_BdRingFromHw+0x38>
 1015274:	e3110301 	tst	r1, #67108864	; 0x4000000
 1015278:	1affffe3 	bne	101520c <XAxiDma_BdRingFromHw+0x40>
		if (RingPtr->Cyclic) {
 101527c:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount++;
 1015280:	e2877001 	add	r7, r7, #1
		if (RingPtr->Cyclic) {
 1015284:	e3520000 	cmp	r2, #0
 1015288:	0affffe3 	beq	101521c <XAxiDma_BdRingFromHw+0x50>
			BdSts = BdSts & ~XAXIDMA_BD_STS_COMPLETE_MASK;
 101528c:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1015290:	e3a01034 	mov	r1, #52	; 0x34
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1015294:	e5803000 	str	r3, [r0]
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1015298:	e1a00004 	mov	r0, r4
 101529c:	eb000fa7 	bl	1019140 <Xil_DCacheFlushRange>
		if (CurBdPtr == RingPtr->HwTail) {
 10152a0:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 10152a4:	e1530004 	cmp	r3, r4
 10152a8:	1affffde 	bne	1015228 <XAxiDma_BdRingFromHw+0x5c>
	BdCount -= BdPartialCount;

	/* If BdCount is non-zero then BDs were found to return. Set return
	 * parameters, update pointers and counters, return success
	 */
	if (BdCount) {
 10152ac:	e0560007 	subs	r0, r6, r7
 10152b0:	0a000017 	beq	1015314 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = RingPtr->HwHead;
		if (!RingPtr->Cyclic) {
 10152b4:	e5953068 	ldr	r3, [r5, #104]	; 0x68
		*BdSetPtr = RingPtr->HwHead;
 10152b8:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
		if (!RingPtr->Cyclic) {
 10152bc:	e3530000 	cmp	r3, #0
		*BdSetPtr = RingPtr->HwHead;
 10152c0:	e5892000 	str	r2, [r9]
		if (!RingPtr->Cyclic) {
 10152c4:	1a000005 	bne	10152e0 <XAxiDma_BdRingFromHw+0x114>
			RingPtr->HwCnt -= BdCount;
 10152c8:	e5951058 	ldr	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 10152cc:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
			RingPtr->HwCnt -= BdCount;
 10152d0:	e0411000 	sub	r1, r1, r0
			RingPtr->PostCnt += BdCount;
 10152d4:	e0833000 	add	r3, r3, r0
			RingPtr->HwCnt -= BdCount;
 10152d8:	e5851058 	str	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 10152dc:	e585305c 	str	r3, [r5, #92]	; 0x5c
		}
		XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->HwHead, BdCount);
 10152e0:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 10152e4:	e5951028 	ldr	r1, [r5, #40]	; 0x28
 10152e8:	e0030093 	mul	r3, r3, r0
 10152ec:	e0933002 	adds	r3, r3, r2
 10152f0:	23a02001 	movcs	r2, #1
 10152f4:	33a02000 	movcc	r2, #0
 10152f8:	e1510003 	cmp	r1, r3
 10152fc:	33822001 	orrcc	r2, r2, #1
 1015300:	e3520000 	cmp	r2, #0
 1015304:	1595202c 	ldrne	r2, [r5, #44]	; 0x2c
 1015308:	10433002 	subne	r3, r3, r2
 101530c:	e585303c 	str	r3, [r5, #60]	; 0x3c
	else {
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}
}
 1015310:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*BdSetPtr = (XAxiDma_Bd *)NULL;
 1015314:	e3a00000 	mov	r0, #0
 1015318:	e5890000 	str	r0, [r9]
		return 0;
 101531c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01015320 <XAxiDma_BdRingFree>:
 *
 *****************************************************************************/
int XAxiDma_BdRingFree(XAxiDma_BdRing * RingPtr, int NumBd,
		      XAxiDma_Bd * BdSetPtr)
{
	if (NumBd < 0) {
 1015320:	e251c000 	subs	ip, r1, #0
{
 1015324:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1015328:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 101532c:	ba000023 	blt	10153c0 <XAxiDma_BdRingFree+0xa0>
	}

	/* If the BD Set to free is empty, do nothing
	 */
	if (NumBd == 0) {
		return XST_SUCCESS;
 1015330:	01a0000c 	moveq	r0, ip
	if (NumBd == 0) {
 1015334:	0a000017 	beq	1015398 <XAxiDma_BdRingFree+0x78>
	}

	/* Make sure we are in sync with XAxiDma_BdRingFromHw() */
	if ((RingPtr->PostCnt < NumBd) || (RingPtr->PostHead != BdSetPtr)) {
 1015338:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
 101533c:	e5903044 	ldr	r3, [r0, #68]	; 0x44
 1015340:	e151000c 	cmp	r1, ip
 1015344:	ba000015 	blt	10153a0 <XAxiDma_BdRingFree+0x80>
 1015348:	e1520003 	cmp	r2, r3
 101534c:	1a000013 	bne	10153a0 <XAxiDma_BdRingFree+0x80>
	}

	/* Update pointers and counters */
	RingPtr->FreeCnt += NumBd;
	RingPtr->PostCnt -= NumBd;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1015350:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->PostCnt -= NumBd;
 1015354:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1015358:	e590e028 	ldr	lr, [r0, #40]	; 0x28
	RingPtr->PostCnt -= NumBd;
 101535c:	e580105c 	str	r1, [r0, #92]	; 0x5c
	RingPtr->FreeCnt += NumBd;
 1015360:	e5901050 	ldr	r1, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1015364:	e0030c93 	mul	r3, r3, ip
	RingPtr->FreeCnt += NumBd;
 1015368:	e081c00c 	add	ip, r1, ip
 101536c:	e580c050 	str	ip, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1015370:	e0932002 	adds	r2, r3, r2
 1015374:	23a03001 	movcs	r3, #1
 1015378:	33a03000 	movcc	r3, #0
 101537c:	e15e0002 	cmp	lr, r2
 1015380:	33833001 	orrcc	r3, r3, #1
 1015384:	e3530000 	cmp	r3, #0
 1015388:	1590302c 	ldrne	r3, [r0, #44]	; 0x2c
 101538c:	10422003 	subne	r2, r2, r3
 1015390:	e5802044 	str	r2, [r0, #68]	; 0x44

	return XST_SUCCESS;
 1015394:	e3a00000 	mov	r0, #0
}
 1015398:	e28dd00c 	add	sp, sp, #12
 101539c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingFree: Error free BDs: "
 10153a0:	e30b0b40 	movw	r0, #47936	; 0xbb40
 10153a4:	e58d2000 	str	r2, [sp]
 10153a8:	e3400106 	movt	r0, #262	; 0x106
 10153ac:	e1a0200c 	mov	r2, ip
 10153b0:	fa002191 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 10153b4:	e300020e 	movw	r0, #526	; 0x20e
}
 10153b8:	e28dd00c 	add	sp, sp, #12
 10153bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR,
 10153c0:	e30b0b20 	movw	r0, #47904	; 0xbb20
 10153c4:	e3400106 	movt	r0, #262	; 0x106
 10153c8:	fa00218b 	blx	101d9fc <printf>
		return XST_INVALID_PARAM;
 10153cc:	e3a0000f 	mov	r0, #15
 10153d0:	eafffff0 	b	1015398 <XAxiDma_BdRingFree+0x78>

010153d4 <XAxiDma_BdRingCheck>:
	u32 AddrV;
	u32 AddrP;
	int i;

	/* Is the list created */
	if (RingPtr->AllCnt == 0) {
 10153d4:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 10153d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (RingPtr->AllCnt == 0) {
 10153dc:	e3520000 	cmp	r2, #0
 10153e0:	0a000058 	beq	1015548 <XAxiDma_BdRingCheck+0x174>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't check if channel is running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 10153e4:	e5903008 	ldr	r3, [r0, #8]
 10153e8:	e1a04000 	mov	r4, r0
 10153ec:	e3530001 	cmp	r3, #1
 10153f0:	0a00005f 	beq	1015574 <XAxiDma_BdRingCheck+0x1a0>

		return XST_IS_STARTED;
	}

	/* RunState doesn't make sense */
	else if (RingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10153f4:	e5903008 	ldr	r3, [r0, #8]
 10153f8:	e3530002 	cmp	r3, #2
 10153fc:	1a000045 	bne	1015518 <XAxiDma_BdRingCheck+0x144>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal pointers point to correct memory space */
	AddrV = (UINTPTR) RingPtr->FreeHead;
 1015400:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1015404:	e5905024 	ldr	r5, [r0, #36]	; 0x24
 1015408:	e5903028 	ldr	r3, [r0, #40]	; 0x28
 101540c:	e1550001 	cmp	r5, r1
 1015410:	8a000034 	bhi	10154e8 <XAxiDma_BdRingCheck+0x114>
 1015414:	e1510003 	cmp	r1, r3
 1015418:	8a000032 	bhi	10154e8 <XAxiDma_BdRingCheck+0x114>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PreHead;
 101541c:	e5901038 	ldr	r1, [r0, #56]	; 0x38
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1015420:	e1550001 	cmp	r5, r1
 1015424:	91510003 	cmpls	r1, r3
 1015428:	8a000040 	bhi	1015530 <XAxiDma_BdRingCheck+0x15c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwHead;
 101542c:	e590103c 	ldr	r1, [r0, #60]	; 0x3c
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1015430:	e1510003 	cmp	r1, r3
 1015434:	91550001 	cmpls	r5, r1
 1015438:	8a000047 	bhi	101555c <XAxiDma_BdRingCheck+0x188>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwTail;
 101543c:	e5901040 	ldr	r1, [r0, #64]	; 0x40
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1015440:	e1510003 	cmp	r1, r3
 1015444:	91550001 	cmpls	r5, r1
 1015448:	8a00002c 	bhi	1015500 <XAxiDma_BdRingCheck+0x12c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PostHead;
 101544c:	e5901044 	ldr	r1, [r0, #68]	; 0x44
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1015450:	e1510003 	cmp	r1, r3
 1015454:	91550001 	cmpls	r5, r1
 1015458:	8a00004a 	bhi	1015588 <XAxiDma_BdRingCheck+0x1b4>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal counters add up */
	if ((RingPtr->HwCnt + RingPtr->PreCnt + RingPtr->FreeCnt +
 101545c:	e5903058 	ldr	r3, [r0, #88]	; 0x58
 1015460:	e590c054 	ldr	ip, [r0, #84]	; 0x54
 1015464:	e5900050 	ldr	r0, [r0, #80]	; 0x50
 1015468:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
 101546c:	e083300c 	add	r3, r3, ip
 1015470:	e0833000 	add	r3, r3, r0
 1015474:	e0833001 	add	r3, r3, r1
 1015478:	e1520003 	cmp	r2, r3
 101547c:	1a000050 	bne	10155c4 <XAxiDma_BdRingCheck+0x1f0>
		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify BDs are linked correctly */
	AddrV = RingPtr->FirstBdAddr;
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 1015480:	e5946020 	ldr	r6, [r4, #32]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1015484:	e3520001 	cmp	r2, #1
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 1015488:	e5942030 	ldr	r2, [r4, #48]	; 0x30
 101548c:	e0866002 	add	r6, r6, r2
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1015490:	da000042 	ble	10155a0 <XAxiDma_BdRingCheck+0x1cc>
 1015494:	e3a07001 	mov	r7, #1
 1015498:	ea000005 	b	10154b4 <XAxiDma_BdRingCheck+0xe0>
 101549c:	e5942060 	ldr	r2, [r4, #96]	; 0x60

			return XST_DMA_SG_LIST_ERROR;
		}

		/* Move on to next BD */
		AddrV += RingPtr->Separation;
 10154a0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10154a4:	e1520007 	cmp	r2, r7
		AddrV += RingPtr->Separation;
 10154a8:	e0855003 	add	r5, r5, r3
		AddrP += RingPtr->Separation;
 10154ac:	e0866003 	add	r6, r6, r3
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10154b0:	da00003a 	ble	10155a0 <XAxiDma_BdRingCheck+0x1cc>
		XAXIDMA_CACHE_INVALIDATE(AddrV);
 10154b4:	e3a01034 	mov	r1, #52	; 0x34
 10154b8:	e1a00005 	mov	r0, r5
 10154bc:	eb000ed2 	bl	101900c <Xil_DCacheInvalidateRange>
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10154c0:	e5951000 	ldr	r1, [r5]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10154c4:	e2877001 	add	r7, r7, #1
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10154c8:	e1510006 	cmp	r1, r6
 10154cc:	0afffff2 	beq	101549c <XAxiDma_BdRingCheck+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Next Bd "
 10154d0:	e30b0d68 	movw	r0, #48488	; 0xbd68
 10154d4:	e1a02006 	mov	r2, r6
 10154d8:	e3400106 	movt	r0, #262	; 0x106
 10154dc:	fa002146 	blx	101d9fc <printf>
			return XST_DMA_SG_LIST_ERROR;
 10154e0:	e300020e 	movw	r0, #526	; 0x20e
 10154e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: FreeHead wrong "
 10154e8:	e30b0c08 	movw	r0, #48136	; 0xbc08
 10154ec:	e1a02005 	mov	r2, r5
 10154f0:	e3400106 	movt	r0, #262	; 0x106
 10154f4:	fa002140 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 10154f8:	e300020e 	movw	r0, #526	; 0x20e
 10154fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwTail wrong %x, "
 1015500:	e30b0cc4 	movw	r0, #48324	; 0xbcc4
 1015504:	e1a02005 	mov	r2, r5
 1015508:	e3400106 	movt	r0, #262	; 0x106
 101550c:	fa00213a 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 1015510:	e300020e 	movw	r0, #526	; 0x20e
 1015514:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: unknown BD ring "
 1015518:	e5901008 	ldr	r1, [r0, #8]
 101551c:	e30b0be0 	movw	r0, #48096	; 0xbbe0
 1015520:	e3400106 	movt	r0, #262	; 0x106
 1015524:	fa002134 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 1015528:	e300020e 	movw	r0, #526	; 0x20e
 101552c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PreHead wrong %x, "
 1015530:	e30b0c48 	movw	r0, #48200	; 0xbc48
 1015534:	e1a02005 	mov	r2, r5
 1015538:	e3400106 	movt	r0, #262	; 0x106
 101553c:	fa00212e 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 1015540:	e300020e 	movw	r0, #526	; 0x20e
 1015544:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: no BDs\r\n");
 1015548:	e30b0b94 	movw	r0, #48020	; 0xbb94
 101554c:	e3400106 	movt	r0, #262	; 0x106
 1015550:	fa00214e 	blx	101da90 <puts>
		return XST_DMA_SG_NO_LIST;
 1015554:	e300020b 	movw	r0, #523	; 0x20b
 1015558:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwHead wrong %x, "
 101555c:	e30b0c88 	movw	r0, #48264	; 0xbc88
 1015560:	e1a02005 	mov	r2, r5
 1015564:	e3400106 	movt	r0, #262	; 0x106
 1015568:	fa002123 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 101556c:	e300020e 	movw	r0, #526	; 0x20e
 1015570:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Bd ring is "
 1015574:	e30b0bac 	movw	r0, #48044	; 0xbbac
 1015578:	e3400106 	movt	r0, #262	; 0x106
 101557c:	fa002143 	blx	101da90 <puts>
		return XST_IS_STARTED;
 1015580:	e3a00017 	mov	r0, #23
 1015584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PostHead wrong "
 1015588:	e30b0d00 	movw	r0, #48384	; 0xbd00
 101558c:	e1a02005 	mov	r2, r5
 1015590:	e3400106 	movt	r0, #262	; 0x106
 1015594:	fa002118 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 1015598:	e300020e 	movw	r0, #526	; 0x20e
 101559c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	}

	XAXIDMA_CACHE_INVALIDATE(AddrV);
 10155a0:	e3a01034 	mov	r1, #52	; 0x34
 10155a4:	e1a00005 	mov	r0, r5
 10155a8:	eb000e97 	bl	101900c <Xil_DCacheInvalidateRange>
	/* Last BD should point back to the beginning of ring */
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 10155ac:	e5951000 	ldr	r1, [r5]
	    RingPtr->FirstBdPhysAddr) {
 10155b0:	e5942020 	ldr	r2, [r4, #32]
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 10155b4:	e1510002 	cmp	r1, r2
 10155b8:	1a000006 	bne	10155d8 <XAxiDma_BdRingCheck+0x204>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* No problems found */
	return XST_SUCCESS;
 10155bc:	e3a00000 	mov	r0, #0
}
 10155c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: internal counter "
 10155c4:	e30b0d40 	movw	r0, #48448	; 0xbd40
 10155c8:	e3400106 	movt	r0, #262	; 0x106
 10155cc:	fa00212f 	blx	101da90 <puts>
		return XST_DMA_SG_LIST_ERROR;
 10155d0:	e300020e 	movw	r0, #526	; 0x20e
 10155d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: last Bd Next BD "
 10155d8:	e30b0d98 	movw	r0, #48536	; 0xbd98
 10155dc:	e3400106 	movt	r0, #262	; 0x106
 10155e0:	fa002105 	blx	101d9fc <printf>
		return XST_DMA_SG_LIST_ERROR;
 10155e4:	e300020e 	movw	r0, #526	; 0x20e
 10155e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010155ec <XAxiDma_BdRingDumpRegs>:
 * @return	None
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_BdRingDumpRegs(XAxiDma_BdRing *RingPtr) {
 10155ec:	e1a03000 	mov	r3, r0
 10155f0:	e92d4070 	push	{r4, r5, r6, lr}
	UINTPTR RegBase = RingPtr->ChanBase;
 10155f4:	e5934000 	ldr	r4, [r3]
	int RingIndex = RingPtr->RingIndex;

	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 10155f8:	e30b0dd0 	movw	r0, #48592	; 0xbdd0
 10155fc:	e3400106 	movt	r0, #262	; 0x106
	int RingIndex = RingPtr->RingIndex;
 1015600:	e5935064 	ldr	r5, [r3, #100]	; 0x64
	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 1015604:	e1a01004 	mov	r1, r4
 1015608:	eb00115f 	bl	1019b8c <xil_printf>
	xil_printf("Control REG: %08x\r\n",
 101560c:	e30b0de8 	movw	r0, #48616	; 0xbde8
	return *(volatile u32 *) Addr;
 1015610:	e5941000 	ldr	r1, [r4]
 1015614:	e3400106 	movt	r0, #262	; 0x106
 1015618:	eb00115b 	bl	1019b8c <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET));
	xil_printf("Status REG: %08x\r\n",
 101561c:	e30b0dfc 	movw	r0, #48636	; 0xbdfc
 1015620:	e5941004 	ldr	r1, [r4, #4]
 1015624:	e3400106 	movt	r0, #262	; 0x106
 1015628:	eb001157 	bl	1019b8c <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_SR_OFFSET));

	if (RingIndex) {
 101562c:	e3550000 	cmp	r5, #0
 1015630:	0a00000f 	beq	1015674 <XAxiDma_BdRingDumpRegs+0x88>
	xil_printf("Cur BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1015634:	e2855001 	add	r5, r5, #1
	xil_printf("Cur BD REG: %08x\r\n",
 1015638:	e30b0e10 	movw	r0, #48656	; 0xbe10
 101563c:	e7941285 	ldr	r1, [r4, r5, lsl #5]
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1015640:	e1a05285 	lsl	r5, r5, #5
	xil_printf("Cur BD REG: %08x\r\n",
 1015644:	e3400106 	movt	r0, #262	; 0x106
 1015648:	eb00114f 	bl	1019b8c <xil_printf>
		XAXIDMA_RX_CDESC0_OFFSET + ((RingIndex - 1) *
		XAXIDMA_RX_NDESC_OFFSET)));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 101564c:	e2455040 	sub	r5, r5, #64	; 0x40
 1015650:	e2844048 	add	r4, r4, #72	; 0x48
	xil_printf("Tail BD REG: %08x\r\n",
 1015654:	e30b0e24 	movw	r0, #48676	; 0xbe24
 1015658:	e7951004 	ldr	r1, [r5, r4]
 101565c:	e3400106 	movt	r0, #262	; 0x106
 1015660:	eb001149 	bl	1019b8c <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CDESC_OFFSET));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_TDESC_OFFSET));
	}

	xil_printf("\r\n");
 1015664:	e3090fac 	movw	r0, #40876	; 0x9fac
}
 1015668:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 101566c:	e3400106 	movt	r0, #262	; 0x106
 1015670:	ea001145 	b	1019b8c <xil_printf>
	xil_printf("Cur BD REG: %08x\r\n",
 1015674:	e30b0e10 	movw	r0, #48656	; 0xbe10
 1015678:	e5941008 	ldr	r1, [r4, #8]
 101567c:	e3400106 	movt	r0, #262	; 0x106
 1015680:	eb001141 	bl	1019b8c <xil_printf>
	xil_printf("Tail BD REG: %08x\r\n",
 1015684:	e30b0e24 	movw	r0, #48676	; 0xbe24
 1015688:	e5941010 	ldr	r1, [r4, #16]
 101568c:	e3400106 	movt	r0, #262	; 0x106
 1015690:	eb00113d 	bl	1019b8c <xil_printf>
	xil_printf("\r\n");
 1015694:	e3090fac 	movw	r0, #40876	; 0x9fac
}
 1015698:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 101569c:	e3400106 	movt	r0, #262	; 0x106
 10156a0:	ea001139 	b	1019b8c <xil_printf>

010156a4 <StubErrCallBack>:
******************************************************************************/
static void StubErrCallBack(void *CallBackRef, u32 ErrorMask)
{
	(void) ((void *)CallBackRef);
	(void) ErrorMask;
	Xil_AssertVoidAlways();
 10156a4:	e30b0e38 	movw	r0, #48696	; 0xbe38
{
 10156a8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 10156ac:	e3a010a7 	mov	r1, #167	; 0xa7
 10156b0:	e3400106 	movt	r0, #262	; 0x106
 10156b4:	eb000e20 	bl	1018f3c <Xil_Assert>
 10156b8:	e3013f58 	movw	r3, #8024	; 0x1f58
 10156bc:	e3a02001 	mov	r2, #1
 10156c0:	e340310c 	movt	r3, #268	; 0x10c
 10156c4:	e5832000 	str	r2, [r3]
}
 10156c8:	e8bd8010 	pop	{r4, pc}

010156cc <XClk_Wiz_CfgInitialize>:
{
 10156cc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10156d0:	e2504000 	subs	r4, r0, #0
 10156d4:	0a00001e 	beq	1015754 <XClk_Wiz_CfgInitialize+0x88>
 10156d8:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertNonvoid(CfgPtr != NULL);
 10156dc:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 10156e0:	e340510c 	movt	r5, #268	; 0x10c
 10156e4:	e3a03000 	mov	r3, #0
 10156e8:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(CfgPtr != NULL);
 10156ec:	0a000021 	beq	1015778 <XClk_Wiz_CfgInitialize+0xac>
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 10156f0:	e3520000 	cmp	r2, #0
 10156f4:	e1a06002 	mov	r6, r2
 10156f8:	0a00000d 	beq	1015734 <XClk_Wiz_CfgInitialize+0x68>
	InstancePtr->Config = *CfgPtr;
 10156fc:	e3a02058 	mov	r2, #88	; 0x58
 1015700:	eb001ebe 	bl	101d200 <memcpy>
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1015704:	e30536a4 	movw	r3, #22180	; 0x56a4
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1015708:	e3012111 	movw	r2, #4369	; 0x1111
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 101570c:	e3403101 	movt	r3, #257	; 0x101
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1015710:	e3412111 	movt	r2, #4369	; 0x1111
	InstancePtr->Config.BaseAddr = EffectiveAddr;
 1015714:	e5846004 	str	r6, [r4, #4]
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1015718:	e5843060 	str	r3, [r4, #96]	; 0x60
	InstancePtr->ClkGlitchCallBack      = StubErrCallBack;
 101571c:	e5843068 	str	r3, [r4, #104]	; 0x68
	InstancePtr->ClkStopCallBack        = StubErrCallBack;
 1015720:	e5843070 	str	r3, [r4, #112]	; 0x70
	InstancePtr->ErrorCallBack = StubErrCallBack;
 1015724:	e5843078 	str	r3, [r4, #120]	; 0x78
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1015728:	e5842080 	str	r2, [r4, #128]	; 0x80
}
 101572c:	e3a00000 	mov	r0, #0
 1015730:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1015734:	e30b0e38 	movw	r0, #48696	; 0xbe38
 1015738:	e3a01065 	mov	r1, #101	; 0x65
 101573c:	e3400106 	movt	r0, #262	; 0x106
 1015740:	eb000dfd 	bl	1018f3c <Xil_Assert>
 1015744:	e3a03001 	mov	r3, #1
}
 1015748:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 101574c:	e5853000 	str	r3, [r5]
}
 1015750:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015754:	e30b0e38 	movw	r0, #48696	; 0xbe38
 1015758:	e3a01063 	mov	r1, #99	; 0x63
 101575c:	e3400106 	movt	r0, #262	; 0x106
 1015760:	eb000df5 	bl	1018f3c <Xil_Assert>
 1015764:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015768:	e3a02001 	mov	r2, #1
 101576c:	e340310c 	movt	r3, #268	; 0x10c
 1015770:	e5832000 	str	r2, [r3]
 1015774:	eaffffec 	b	101572c <XClk_Wiz_CfgInitialize+0x60>
	Xil_AssertNonvoid(CfgPtr != NULL);
 1015778:	e30b0e38 	movw	r0, #48696	; 0xbe38
 101577c:	e3a01064 	mov	r1, #100	; 0x64
 1015780:	e3400106 	movt	r0, #262	; 0x106
 1015784:	eb000dec 	bl	1018f3c <Xil_Assert>
 1015788:	e3a03001 	mov	r3, #1
 101578c:	e5853000 	str	r3, [r5]
 1015790:	eaffffe5 	b	101572c <XClk_Wiz_CfgInitialize+0x60>

01015794 <XClk_Wiz_GetInterruptSettings>:
	Xil_AssertVoid(InstancePtr != NULL);
 1015794:	e3500000 	cmp	r0, #0
 1015798:	0a00000b 	beq	10157cc <XClk_Wiz_GetInterruptSettings+0x38>
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 101579c:	e5902004 	ldr	r2, [r0, #4]
	Xil_AssertVoid(InstancePtr != NULL);
 10157a0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10157a4:	e340310c 	movt	r3, #268	; 0x10c
 10157a8:	e3a01000 	mov	r1, #0
 10157ac:	e5831000 	str	r1, [r3]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 10157b0:	e592300c 	ldr	r3, [r2, #12]
*
****************************************************************************/
static inline u32 XCLK_WIZ_GET_BITFIELD_VALUE(UINTPTR BaseAddress,
		u32 RegisterOffset, u32 BitMask, u32 BitShift) {
	return ((XClk_Wiz_ReadReg((BaseAddress), (RegisterOffset)) \
		  & (BitMask)) >> (BitShift));
 10157b4:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 10157b8:	e5803058 	str	r3, [r0, #88]	; 0x58
 10157bc:	e5923010 	ldr	r3, [r2, #16]
 10157c0:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkIntrEnable = XCLK_WIZ_GET_BITFIELD_VALUE
 10157c4:	e580305c 	str	r3, [r0, #92]	; 0x5c
 10157c8:	e12fff1e 	bx	lr
	Xil_AssertVoid(InstancePtr != NULL);
 10157cc:	e30b0e38 	movw	r0, #48696	; 0xbe38
{
 10157d0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10157d4:	e3a01086 	mov	r1, #134	; 0x86
 10157d8:	e3400106 	movt	r0, #262	; 0x106
 10157dc:	eb000dd6 	bl	1018f3c <Xil_Assert>
 10157e0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10157e4:	e3a02001 	mov	r2, #1
 10157e8:	e340310c 	movt	r3, #268	; 0x10c
 10157ec:	e5832000 	str	r2, [r3]
}
 10157f0:	e8bd8010 	pop	{r4, pc}

010157f4 <XClk_Wiz_LookupConfig>:
	extern XClk_Wiz_Config XClk_Wiz_ConfigTable[];
	XClk_Wiz_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0; Index < XPAR_XCLK_WIZ_NUM_INSTANCES; Index++) {
		if (XClk_Wiz_ConfigTable[Index].DeviceId == DeviceId) {
 10157f4:	e30c3358 	movw	r3, #50008	; 0xc358
 10157f8:	e3403106 	movt	r3, #262	; 0x106
 10157fc:	e5932000 	ldr	r2, [r3]
			break;
		}
	}

	return CfgPtr;
}
 1015800:	e1520000 	cmp	r2, r0
 1015804:	01a00003 	moveq	r0, r3
 1015808:	13a00000 	movne	r0, #0
 101580c:	e12fff1e 	bx	lr

01015810 <XGpioPs_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XGpioPs_CfgInitialize(XGpioPs *InstancePtr, const XGpioPs_Config *ConfigPtr,
				u32 EffectiveAddr)
{
 1015810:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status = XST_SUCCESS;
	u8 i;
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015814:	e2504000 	subs	r4, r0, #0
 1015818:	0a00004b 	beq	101594c <XGpioPs_CfgInitialize+0x13c>
 101581c:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1015820:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015824:	e340510c 	movt	r5, #268	; 0x10c
 1015828:	e3a03000 	mov	r3, #0
 101582c:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1015830:	0a00004e 	beq	1015970 <XGpioPs_CfgInitialize+0x160>
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1015834:	e3520000 	cmp	r2, #0
 1015838:	0a00002d 	beq	10158f4 <XGpioPs_CfgInitialize+0xe4>
	 * Set some default values for instance data, don't indicate the device
	 * is ready to use until everything has been initialized successfully.
	 */
	InstancePtr->IsReady = 0U;
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 101583c:	e1d100b0 	ldrh	r0, [r1]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1015840:	e30712b0 	movw	r1, #29360	; 0x72b0
 1015844:	e3401101 	movt	r1, #257	; 0x101
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
 1015848:	e1c420f4 	strd	r2, [r4, #4]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 101584c:	e584100c 	str	r1, [r4, #12]
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1015850:	e1c400b0 	strh	r0, [r4]
	InstancePtr->Platform = XGetPlatform_Info();
 1015854:	eb00103d 	bl	1019950 <XGetPlatform_Info>

	/* Initialize the Bank data based on platform */
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1015858:	e3500001 	cmp	r0, #1
	InstancePtr->Platform = XGetPlatform_Info();
 101585c:	e5840014 	str	r0, [r4, #20]
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1015860:	0a00002b 	beq	1015914 <XGpioPs_CfgInitialize+0x104>
		 *	142 - 173, Bank 5
		 */
		InstancePtr->MaxPinNum = (u32)174;
		InstancePtr->MaxBanks = (u8)6;
	}
        else if (InstancePtr->Platform == (u32)XPLAT_VERSAL)
 1015864:	e3500006 	cmp	r0, #6
 1015868:	0a00002e 	beq	1015928 <XGpioPs_CfgInitialize+0x118>
		 *	0 - 31,  Bank 0
		 *	32 - 53, Bank 1
		 *	54 - 85, Bank 2
		 *	86 - 117, Bank 3
		 */
		InstancePtr->MaxPinNum = (u32)118;
 101586c:	e3a02076 	mov	r2, #118	; 0x76
		InstancePtr->MaxBanks = (u8)4;
 1015870:	e3a03004 	mov	r3, #4
		InstancePtr->MaxPinNum = (u32)118;
 1015874:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)4;
 1015878:	e5c4301c 	strb	r3, [r4, #28]
{
 101587c:	e3a02000 	mov	r2, #0
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1015880:	e3e0c000 	mvn	ip, #0
 1015884:	e1a03002 	mov	r3, r2
 1015888:	ea000008 	b	10158b0 <XGpioPs_CfgInitialize+0xa0>

                       }
                }
                else
                {
		XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 101588c:	e5941004 	ldr	r1, [r4, #4]
 1015890:	e2811f85 	add	r1, r1, #532	; 0x214
 1015894:	e781c303 	str	ip, [r1, r3, lsl #6]
 1015898:	e2822001 	add	r2, r2, #1
	for (i=(u8)0U;i<InstancePtr->MaxBanks;i++) {
 101589c:	e5d4101c 	ldrb	r1, [r4, #28]
 10158a0:	e6ef3072 	uxtb	r3, r2
 10158a4:	e1510003 	cmp	r1, r3
 10158a8:	9a00000c 	bls	10158e0 <XGpioPs_CfgInitialize+0xd0>
 10158ac:	e5940014 	ldr	r0, [r4, #20]
                if (InstancePtr->Platform == XPLAT_VERSAL){
 10158b0:	e3500006 	cmp	r0, #6
 10158b4:	1afffff4 	bne	101588c <XGpioPs_CfgInitialize+0x7c>
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10158b8:	e5941020 	ldr	r1, [r4, #32]
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10158bc:	e2430001 	sub	r0, r3, #1
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10158c0:	e3510000 	cmp	r1, #0
 10158c4:	1a000002 	bne	10158d4 <XGpioPs_CfgInitialize+0xc4>
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10158c8:	e3500001 	cmp	r0, #1
 10158cc:	8affffee 	bhi	101588c <XGpioPs_CfgInitialize+0x7c>
 10158d0:	eafffff0 	b	1015898 <XGpioPs_CfgInitialize+0x88>
                                if(i==(u32)XGPIOPS_TWO)
 10158d4:	e3530002 	cmp	r3, #2
 10158d8:	1affffeb 	bne	101588c <XGpioPs_CfgInitialize+0x7c>
 10158dc:	eaffffed 	b	1015898 <XGpioPs_CfgInitialize+0x88>
					  XGPIOPS_INTDIS_OFFSET, 0xFFFFFFFFU);
                }
	}

	/* Indicate the component is now ready to use. */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10158e0:	e3013111 	movw	r3, #4369	; 0x1111
 10158e4:	e3413111 	movt	r3, #4369	; 0x1111
 10158e8:	e5843008 	str	r3, [r4, #8]

	return Status;
}
 10158ec:	e3a00000 	mov	r0, #0
 10158f0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 10158f4:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10158f8:	e3a01068 	mov	r1, #104	; 0x68
 10158fc:	e3400106 	movt	r0, #262	; 0x106
 1015900:	eb000d8d 	bl	1018f3c <Xil_Assert>
 1015904:	e3a03001 	mov	r3, #1
}
 1015908:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 101590c:	e5853000 	str	r3, [r5]
}
 1015910:	e8bd8070 	pop	{r4, r5, r6, pc}
		InstancePtr->MaxPinNum = (u32)174;
 1015914:	e3a020ae 	mov	r2, #174	; 0xae
		InstancePtr->MaxBanks = (u8)6;
 1015918:	e3a03006 	mov	r3, #6
		InstancePtr->MaxPinNum = (u32)174;
 101591c:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)6;
 1015920:	e5c4301c 	strb	r3, [r4, #28]
 1015924:	eaffffd4 	b	101587c <XGpioPs_CfgInitialize+0x6c>
                if(InstancePtr->PmcGpio == (u32)FALSE)
 1015928:	e5943020 	ldr	r3, [r4, #32]
 101592c:	e3530000 	cmp	r3, #0
                        InstancePtr->MaxPinNum = (u32)58;
 1015930:	03a0203a 	moveq	r2, #58	; 0x3a
                        InstancePtr->MaxBanks = (u8)4;
 1015934:	03a03004 	moveq	r3, #4
                        InstancePtr->MaxPinNum = (u32)116;
 1015938:	13a02074 	movne	r2, #116	; 0x74
                        InstancePtr->MaxBanks = (u8)5;
 101593c:	13a03005 	movne	r3, #5
                        InstancePtr->MaxPinNum = (u32)116;
 1015940:	e5842018 	str	r2, [r4, #24]
                        InstancePtr->MaxBanks = (u8)5;
 1015944:	e5c4301c 	strb	r3, [r4, #28]
 1015948:	eaffffcb 	b	101587c <XGpioPs_CfgInitialize+0x6c>
	Xil_AssertNonvoid(InstancePtr != NULL);
 101594c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015950:	e3a01066 	mov	r1, #102	; 0x66
 1015954:	e3400106 	movt	r0, #262	; 0x106
 1015958:	eb000d77 	bl	1018f3c <Xil_Assert>
 101595c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015960:	e3a02001 	mov	r2, #1
 1015964:	e340310c 	movt	r3, #268	; 0x10c
 1015968:	e5832000 	str	r2, [r3]
 101596c:	eaffffde 	b	10158ec <XGpioPs_CfgInitialize+0xdc>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1015970:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015974:	e3a01067 	mov	r1, #103	; 0x67
 1015978:	e3400106 	movt	r0, #262	; 0x106
 101597c:	eb000d6e 	bl	1018f3c <Xil_Assert>
 1015980:	e3a03001 	mov	r3, #1
 1015984:	e5853000 	str	r3, [r5]
 1015988:	eaffffd7 	b	10158ec <XGpioPs_CfgInitialize+0xdc>

0101598c <XGpioPs_Read>:
* @note		This function is used for reading the state of all the GPIO pins
*		of specified bank.
*
*****************************************************************************/
u32 XGpioPs_Read(const XGpioPs *InstancePtr, u8 Bank)
{
 101598c:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015990:	e2506000 	subs	r6, r0, #0
 1015994:	0a00001f 	beq	1015a18 <XGpioPs_Read+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015998:	e5962008 	ldr	r2, [r6, #8]
 101599c:	e3013111 	movw	r3, #4369	; 0x1111
 10159a0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10159a4:	e3015f58 	movw	r5, #8024	; 0x1f58
 10159a8:	e340510c 	movt	r5, #268	; 0x10c
 10159ac:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10159b0:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10159b4:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10159b8:	1a000006 	bne	10159d8 <XGpioPs_Read+0x4c>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10159bc:	e5d6301c 	ldrb	r3, [r6, #28]
 10159c0:	e1530001 	cmp	r3, r1
 10159c4:	9a00000b 	bls	10159f8 <XGpioPs_Read+0x6c>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10159c8:	e5963004 	ldr	r3, [r6, #4]
 10159cc:	e2811018 	add	r1, r1, #24
	return *(volatile u32 *) Addr;
 10159d0:	e7930101 	ldr	r0, [r3, r1, lsl #2]
 10159d4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10159d8:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10159dc:	e3a010e0 	mov	r1, #224	; 0xe0
 10159e0:	e3400106 	movt	r0, #262	; 0x106
 10159e4:	eb000d54 	bl	1018f3c <Xil_Assert>
 10159e8:	e3a03001 	mov	r3, #1
 10159ec:	e1a00004 	mov	r0, r4
 10159f0:	e5853000 	str	r3, [r5]
 10159f4:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10159f8:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10159fc:	e3a010e1 	mov	r1, #225	; 0xe1
 1015a00:	e3400106 	movt	r0, #262	; 0x106
 1015a04:	eb000d4c 	bl	1018f3c <Xil_Assert>
 1015a08:	e3a03001 	mov	r3, #1
 1015a0c:	e1a00004 	mov	r0, r4
 1015a10:	e5853000 	str	r3, [r5]
				 ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
				 XGPIOPS_DATA_RO_OFFSET);
}
 1015a14:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015a18:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015a1c:	e3a010df 	mov	r1, #223	; 0xdf
 1015a20:	e3400106 	movt	r0, #262	; 0x106
 1015a24:	eb000d44 	bl	1018f3c <Xil_Assert>
 1015a28:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015a2c:	e3a02001 	mov	r2, #1
 1015a30:	e340310c 	movt	r3, #268	; 0x10c
 1015a34:	e1a00006 	mov	r0, r6
 1015a38:	e5832000 	str	r2, [r3]
 1015a3c:	e8bd8070 	pop	{r4, r5, r6, pc}

01015a40 <XGpioPs_Write>:
*		the bank. The previous state of the pins is not maintained.
*
*****************************************************************************/
void XGpioPs_Write(const XGpioPs *InstancePtr, u8 Bank, u32 Data)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1015a40:	e3500000 	cmp	r0, #0
{
 1015a44:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015a48:	0a00001d 	beq	1015ac4 <XGpioPs_Write+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015a4c:	e590c008 	ldr	ip, [r0, #8]
 1015a50:	e3013111 	movw	r3, #4369	; 0x1111
 1015a54:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015a58:	e3014f58 	movw	r4, #8024	; 0x1f58
 1015a5c:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015a60:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1015a64:	e3a03000 	mov	r3, #0
 1015a68:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015a6c:	1a000006 	bne	1015a8c <XGpioPs_Write+0x4c>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015a70:	e5d0301c 	ldrb	r3, [r0, #28]
 1015a74:	e1530001 	cmp	r3, r1
 1015a78:	9a00000a 	bls	1015aa8 <XGpioPs_Write+0x68>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015a7c:	e5903004 	ldr	r3, [r0, #4]
 1015a80:	e2811010 	add	r1, r1, #16
	*LocalAddr = Value;
 1015a84:	e7832101 	str	r2, [r3, r1, lsl #2]
 1015a88:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015a8c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015a90:	e3001127 	movw	r1, #295	; 0x127
 1015a94:	e3400106 	movt	r0, #262	; 0x106
 1015a98:	eb000d27 	bl	1018f3c <Xil_Assert>
 1015a9c:	e3a03001 	mov	r3, #1
 1015aa0:	e5843000 	str	r3, [r4]
 1015aa4:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015aa8:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015aac:	e3a01f4a 	mov	r1, #296	; 0x128
 1015ab0:	e3400106 	movt	r0, #262	; 0x106
 1015ab4:	eb000d20 	bl	1018f3c <Xil_Assert>
 1015ab8:	e3a03001 	mov	r3, #1
 1015abc:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
			  XGPIOPS_DATA_OFFSET, Data);
}
 1015ac0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015ac4:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015ac8:	e3001126 	movw	r1, #294	; 0x126
 1015acc:	e3400106 	movt	r0, #262	; 0x106
 1015ad0:	eb000d19 	bl	1018f3c <Xil_Assert>
 1015ad4:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015ad8:	e3a02001 	mov	r2, #1
 1015adc:	e340310c 	movt	r3, #268	; 0x10c
 1015ae0:	e5832000 	str	r2, [r3]
 1015ae4:	e8bd8010 	pop	{r4, pc}

01015ae8 <XGpioPs_SetDirection>:
*		not maintained.
*
*****************************************************************************/
void XGpioPs_SetDirection(const XGpioPs *InstancePtr, u8 Bank, u32 Direction)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1015ae8:	e3500000 	cmp	r0, #0
{
 1015aec:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015af0:	0a00001e 	beq	1015b70 <XGpioPs_SetDirection+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015af4:	e590c008 	ldr	ip, [r0, #8]
 1015af8:	e3013111 	movw	r3, #4369	; 0x1111
 1015afc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015b00:	e3014f58 	movw	r4, #8024	; 0x1f58
 1015b04:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015b08:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1015b0c:	e3a03000 	mov	r3, #0
 1015b10:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015b14:	1a000007 	bne	1015b38 <XGpioPs_SetDirection+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015b18:	e5d0301c 	ldrb	r3, [r0, #28]
 1015b1c:	e1530001 	cmp	r3, r1
 1015b20:	9a00000b 	bls	1015b54 <XGpioPs_SetDirection+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015b24:	e5900004 	ldr	r0, [r0, #4]
 1015b28:	e3a03f81 	mov	r3, #516	; 0x204
 1015b2c:	e0831301 	add	r1, r3, r1, lsl #6
 1015b30:	e7812000 	str	r2, [r1, r0]
 1015b34:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015b38:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015b3c:	e3001186 	movw	r1, #390	; 0x186
 1015b40:	e3400106 	movt	r0, #262	; 0x106
 1015b44:	eb000cfc 	bl	1018f3c <Xil_Assert>
 1015b48:	e3a03001 	mov	r3, #1
 1015b4c:	e5843000 	str	r3, [r4]
 1015b50:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015b54:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015b58:	e3001187 	movw	r1, #391	; 0x187
 1015b5c:	e3400106 	movt	r0, #262	; 0x106
 1015b60:	eb000cf5 	bl	1018f3c <Xil_Assert>
 1015b64:	e3a03001 	mov	r3, #1
 1015b68:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_DIRM_OFFSET, Direction);
}
 1015b6c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015b70:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015b74:	e3001185 	movw	r1, #389	; 0x185
 1015b78:	e3400106 	movt	r0, #262	; 0x106
 1015b7c:	eb000cee 	bl	1018f3c <Xil_Assert>
 1015b80:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015b84:	e3a02001 	mov	r2, #1
 1015b88:	e340310c 	movt	r3, #268	; 0x10c
 1015b8c:	e5832000 	str	r2, [r3]
 1015b90:	e8bd8010 	pop	{r4, pc}

01015b94 <XGpioPs_GetDirection>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetDirection(const XGpioPs *InstancePtr, u8 Bank)
{
 1015b94:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015b98:	e2506000 	subs	r6, r0, #0
 1015b9c:	0a000020 	beq	1015c24 <XGpioPs_GetDirection+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015ba0:	e5962008 	ldr	r2, [r6, #8]
 1015ba4:	e3013111 	movw	r3, #4369	; 0x1111
 1015ba8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015bac:	e3015f58 	movw	r5, #8024	; 0x1f58
 1015bb0:	e340510c 	movt	r5, #268	; 0x10c
 1015bb4:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015bb8:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015bbc:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015bc0:	1a000007 	bne	1015be4 <XGpioPs_GetDirection+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1015bc4:	e5d6301c 	ldrb	r3, [r6, #28]
 1015bc8:	e1530001 	cmp	r3, r1
 1015bcc:	9a00000c 	bls	1015c04 <XGpioPs_GetDirection+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015bd0:	e5962004 	ldr	r2, [r6, #4]
 1015bd4:	e3a03f81 	mov	r3, #516	; 0x204
 1015bd8:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1015bdc:	e7910002 	ldr	r0, [r1, r2]
 1015be0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015be4:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015be8:	e30011d5 	movw	r1, #469	; 0x1d5
 1015bec:	e3400106 	movt	r0, #262	; 0x106
 1015bf0:	eb000cd1 	bl	1018f3c <Xil_Assert>
 1015bf4:	e3a03001 	mov	r3, #1
 1015bf8:	e1a00004 	mov	r0, r4
 1015bfc:	e5853000 	str	r3, [r5]
 1015c00:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1015c04:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015c08:	e30011d6 	movw	r1, #470	; 0x1d6
 1015c0c:	e3400106 	movt	r0, #262	; 0x106
 1015c10:	eb000cc9 	bl	1018f3c <Xil_Assert>
 1015c14:	e3a03001 	mov	r3, #1
 1015c18:	e1a00004 	mov	r0, r4
 1015c1c:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_DIRM_OFFSET);
}
 1015c20:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015c24:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015c28:	e3a01f75 	mov	r1, #468	; 0x1d4
 1015c2c:	e3400106 	movt	r0, #262	; 0x106
 1015c30:	eb000cc1 	bl	1018f3c <Xil_Assert>
 1015c34:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015c38:	e3a02001 	mov	r2, #1
 1015c3c:	e340310c 	movt	r3, #268	; 0x10c
 1015c40:	e1a00006 	mov	r0, r6
 1015c44:	e5832000 	str	r2, [r3]
 1015c48:	e8bd8070 	pop	{r4, r5, r6, pc}

01015c4c <XGpioPs_SetOutputEnable>:
*		Enables is not maintained.
*
*****************************************************************************/
void XGpioPs_SetOutputEnable(const XGpioPs *InstancePtr, u8 Bank, u32 OpEnable)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1015c4c:	e3500000 	cmp	r0, #0
{
 1015c50:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015c54:	0a00001e 	beq	1015cd4 <XGpioPs_SetOutputEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015c58:	e590c008 	ldr	ip, [r0, #8]
 1015c5c:	e3013111 	movw	r3, #4369	; 0x1111
 1015c60:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015c64:	e3014f58 	movw	r4, #8024	; 0x1f58
 1015c68:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015c6c:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1015c70:	e3a03000 	mov	r3, #0
 1015c74:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015c78:	1a000007 	bne	1015c9c <XGpioPs_SetOutputEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015c7c:	e5d0301c 	ldrb	r3, [r0, #28]
 1015c80:	e1530001 	cmp	r3, r1
 1015c84:	9a00000b 	bls	1015cb8 <XGpioPs_SetOutputEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015c88:	e5900004 	ldr	r0, [r0, #4]
 1015c8c:	e3a03f82 	mov	r3, #520	; 0x208
 1015c90:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1015c94:	e7812000 	str	r2, [r1, r0]
 1015c98:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015c9c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015ca0:	e3a01e22 	mov	r1, #544	; 0x220
 1015ca4:	e3400106 	movt	r0, #262	; 0x106
 1015ca8:	eb000ca3 	bl	1018f3c <Xil_Assert>
 1015cac:	e3a03001 	mov	r3, #1
 1015cb0:	e5843000 	str	r3, [r4]
 1015cb4:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015cb8:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015cbc:	e3001221 	movw	r1, #545	; 0x221
 1015cc0:	e3400106 	movt	r0, #262	; 0x106
 1015cc4:	eb000c9c 	bl	1018f3c <Xil_Assert>
 1015cc8:	e3a03001 	mov	r3, #1
 1015ccc:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_OUTEN_OFFSET, OpEnable);
}
 1015cd0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015cd4:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015cd8:	e300121f 	movw	r1, #543	; 0x21f
 1015cdc:	e3400106 	movt	r0, #262	; 0x106
 1015ce0:	eb000c95 	bl	1018f3c <Xil_Assert>
 1015ce4:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015ce8:	e3a02001 	mov	r2, #1
 1015cec:	e340310c 	movt	r3, #268	; 0x10c
 1015cf0:	e5832000 	str	r2, [r3]
 1015cf4:	e8bd8010 	pop	{r4, pc}

01015cf8 <XGpioPs_GetOutputEnable>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetOutputEnable(const XGpioPs *InstancePtr, u8 Bank)
{
 1015cf8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015cfc:	e2506000 	subs	r6, r0, #0
 1015d00:	0a000020 	beq	1015d88 <XGpioPs_GetOutputEnable+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d04:	e5962008 	ldr	r2, [r6, #8]
 1015d08:	e3013111 	movw	r3, #4369	; 0x1111
 1015d0c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d10:	e3015f58 	movw	r5, #8024	; 0x1f58
 1015d14:	e340510c 	movt	r5, #268	; 0x10c
 1015d18:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d1c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d20:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d24:	1a000007 	bne	1015d48 <XGpioPs_GetOutputEnable+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1015d28:	e5d6301c 	ldrb	r3, [r6, #28]
 1015d2c:	e1530001 	cmp	r3, r1
 1015d30:	9a00000c 	bls	1015d68 <XGpioPs_GetOutputEnable+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015d34:	e5962004 	ldr	r2, [r6, #4]
 1015d38:	e3a03f82 	mov	r3, #520	; 0x208
 1015d3c:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1015d40:	e7910002 	ldr	r0, [r1, r2]
 1015d44:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d48:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015d4c:	e3a01f9d 	mov	r1, #628	; 0x274
 1015d50:	e3400106 	movt	r0, #262	; 0x106
 1015d54:	eb000c78 	bl	1018f3c <Xil_Assert>
 1015d58:	e3a03001 	mov	r3, #1
 1015d5c:	e1a00004 	mov	r0, r4
 1015d60:	e5853000 	str	r3, [r5]
 1015d64:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1015d68:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015d6c:	e3001275 	movw	r1, #629	; 0x275
 1015d70:	e3400106 	movt	r0, #262	; 0x106
 1015d74:	eb000c70 	bl	1018f3c <Xil_Assert>
 1015d78:	e3a03001 	mov	r3, #1
 1015d7c:	e1a00004 	mov	r0, r4
 1015d80:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_OUTEN_OFFSET);
}
 1015d84:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d88:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015d8c:	e3001273 	movw	r1, #627	; 0x273
 1015d90:	e3400106 	movt	r0, #262	; 0x106
 1015d94:	eb000c68 	bl	1018f3c <Xil_Assert>
 1015d98:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015d9c:	e3a02001 	mov	r2, #1
 1015da0:	e340310c 	movt	r3, #268	; 0x10c
 1015da4:	e1a00006 	mov	r0, r6
 1015da8:	e5832000 	str	r2, [r3]
 1015dac:	e8bd8070 	pop	{r4, r5, r6, pc}

01015db0 <XGpioPs_GetBankPin>:
#ifdef versal
void XGpioPs_GetBankPin(const XGpioPs *InstancePtr,u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#else
void XGpioPs_GetBankPin(u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#endif
{
 1015db0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	u32 XGpioPsPinTable[6] = {0};
 1015db4:	e3a05000 	mov	r5, #0
{
 1015db8:	e24dd01c 	sub	sp, sp, #28
 1015dbc:	e1a04000 	mov	r4, r0
 1015dc0:	e1a06001 	mov	r6, r1
 1015dc4:	e1a07002 	mov	r7, r2
	u32 XGpioPsPinTable[6] = {0};
 1015dc8:	e58d5004 	str	r5, [sp, #4]
 1015dcc:	e58d5000 	str	r5, [sp]
 1015dd0:	e58d5008 	str	r5, [sp, #8]
 1015dd4:	e58d500c 	str	r5, [sp, #12]
 1015dd8:	e58d5010 	str	r5, [sp, #16]
 1015ddc:	e58d5014 	str	r5, [sp, #20]
#ifdef versal
        u8 i=(u8)0;
#endif
	u32 Platform = XGetPlatform_Info();
 1015de0:	eb000eda 	bl	1019950 <XGetPlatform_Info>

	if (Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1015de4:	e3500001 	cmp	r0, #1
 1015de8:	0a000022 	beq	1015e78 <XGpioPs_GetBankPin+0xc8>
                }

        }
#endif
        else {
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 1015dec:	e3a0201f 	mov	r2, #31
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 1015df0:	e3a03035 	mov	r3, #53	; 0x35
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */

		*BankNumber = 0U;
		while (*BankNumber < XGPIOPS_FOUR) {
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015df4:	e354001f 	cmp	r4, #31
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 1015df8:	e58d2000 	str	r2, [sp]
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 1015dfc:	e58d3004 	str	r3, [sp, #4]
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
 1015e00:	e3a02055 	mov	r2, #85	; 0x55
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */
 1015e04:	e3a03075 	mov	r3, #117	; 0x75
 1015e08:	e1cd20f8 	strd	r2, [sp, #8]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015e0c:	9a000034 	bls	1015ee4 <XGpioPs_GetBankPin+0x134>
 1015e10:	e3540035 	cmp	r4, #53	; 0x35
				break;
			}
			(*BankNumber)++;
 1015e14:	e3a03001 	mov	r3, #1
 1015e18:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015e1c:	9a000013 	bls	1015e70 <XGpioPs_GetBankPin+0xc0>
 1015e20:	e3540055 	cmp	r4, #85	; 0x55
			(*BankNumber)++;
 1015e24:	e3a03002 	mov	r3, #2
 1015e28:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015e2c:	9a00000f 	bls	1015e70 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1015e30:	e3a03003 	mov	r3, #3
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015e34:	e3540075 	cmp	r4, #117	; 0x75
			(*BankNumber)++;
 1015e38:	e5c63000 	strb	r3, [r6]
 1015e3c:	83a03004 	movhi	r3, #4
 1015e40:	85c63000 	strbhi	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015e44:	9a000009 	bls	1015e70 <XGpioPs_GetBankPin+0xc0>
        }
#endif

        else {
		*PinNumberInBank = (u8)((u32)PinNumber %
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1015e48:	e28d2018 	add	r2, sp, #24
		*PinNumberInBank = (u8)((u32)PinNumber %
 1015e4c:	e1a00004 	mov	r0, r4
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1015e50:	e0823103 	add	r3, r2, r3, lsl #2
 1015e54:	e513101c 	ldr	r1, [r3, #-28]	; 0xffffffe4
		*PinNumberInBank = (u8)((u32)PinNumber %
 1015e58:	e2811001 	add	r1, r1, #1
 1015e5c:	fa0014c0 	blx	101b164 <__aeabi_uidivmod>
 1015e60:	e6ef4071 	uxtb	r4, r1
 1015e64:	e5c74000 	strb	r4, [r7]
        }
}
 1015e68:	e28dd01c 	add	sp, sp, #28
 1015e6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1015e70:	e5d63000 	ldrb	r3, [r6]
 1015e74:	eafffff3 	b	1015e48 <XGpioPs_GetBankPin+0x98>
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015e78:	e3540019 	cmp	r4, #25
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1015e7c:	e3a01019 	mov	r1, #25
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1015e80:	e3a0304d 	mov	r3, #77	; 0x4d
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1015e84:	e3a02033 	mov	r2, #51	; 0x33
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1015e88:	e58d1000 	str	r1, [sp]
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1015e8c:	e3a0c06d 	mov	ip, #109	; 0x6d
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1015e90:	e3a0108d 	mov	r1, #141	; 0x8d
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1015e94:	e58d3008 	str	r3, [sp, #8]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1015e98:	e3a030ad 	mov	r3, #173	; 0xad
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1015e9c:	e58d1010 	str	r1, [sp, #16]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1015ea0:	e58d3014 	str	r3, [sp, #20]
 1015ea4:	828d1008 	addhi	r1, sp, #8
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1015ea8:	e58d2004 	str	r2, [sp, #4]
			(*BankNumber)++;
 1015eac:	83a03002 	movhi	r3, #2
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1015eb0:	e58dc00c 	str	ip, [sp, #12]
			(*BankNumber)++;
 1015eb4:	85c60000 	strbhi	r0, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1015eb8:	8a000001 	bhi	1015ec4 <XGpioPs_GetBankPin+0x114>
 1015ebc:	ea000008 	b	1015ee4 <XGpioPs_GetBankPin+0x134>
 1015ec0:	e4912004 	ldr	r2, [r1], #4
 1015ec4:	e1540002 	cmp	r4, r2
 1015ec8:	9affffe8 	bls	1015e70 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1015ecc:	e5c63000 	strb	r3, [r6]
 1015ed0:	e2833001 	add	r3, r3, #1
		while (*BankNumber < XGPIOPS_SIX) {
 1015ed4:	e3530007 	cmp	r3, #7
 1015ed8:	1afffff8 	bne	1015ec0 <XGpioPs_GetBankPin+0x110>
 1015edc:	e3a03006 	mov	r3, #6
 1015ee0:	eaffffd8 	b	1015e48 <XGpioPs_GetBankPin+0x98>
		*BankNumber = 0U;
 1015ee4:	e5c65000 	strb	r5, [r6]
	if (*BankNumber == (u8)0) {
 1015ee8:	eaffffdd 	b	1015e64 <XGpioPs_GetBankPin+0xb4>

01015eec <XGpioPs_ReadPin>:
{
 1015eec:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015ef0:	e2506000 	subs	r6, r0, #0
{
 1015ef4:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015ef8:	0a00002a 	beq	1015fa8 <XGpioPs_ReadPin+0xbc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015efc:	e5962008 	ldr	r2, [r6, #8]
 1015f00:	e3013111 	movw	r3, #4369	; 0x1111
 1015f04:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015f08:	e3015f58 	movw	r5, #8024	; 0x1f58
 1015f0c:	e340510c 	movt	r5, #268	; 0x10c
 1015f10:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015f14:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015f18:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015f1c:	1a000018 	bne	1015f84 <XGpioPs_ReadPin+0x98>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1015f20:	e5963018 	ldr	r3, [r6, #24]
 1015f24:	e1530001 	cmp	r3, r1
 1015f28:	9a00000c 	bls	1015f60 <XGpioPs_ReadPin+0x74>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1015f2c:	e6ef0071 	uxtb	r0, r1
 1015f30:	e28d2007 	add	r2, sp, #7
 1015f34:	e28d1006 	add	r1, sp, #6
 1015f38:	ebffff9c 	bl	1015db0 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015f3c:	e5dd3006 	ldrb	r3, [sp, #6]
 1015f40:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1015f44:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015f48:	e2833018 	add	r3, r3, #24
 1015f4c:	e7920103 	ldr	r0, [r2, r3, lsl #2]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1015f50:	e1a04430 	lsr	r4, r0, r4
 1015f54:	e2040001 	and	r0, r4, #1
}
 1015f58:	e28dd008 	add	sp, sp, #8
 1015f5c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1015f60:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015f64:	e3001106 	movw	r1, #262	; 0x106
 1015f68:	e3400106 	movt	r0, #262	; 0x106
 1015f6c:	eb000bf2 	bl	1018f3c <Xil_Assert>
 1015f70:	e3a03001 	mov	r3, #1
 1015f74:	e1a00004 	mov	r0, r4
 1015f78:	e5853000 	str	r3, [r5]
}
 1015f7c:	e28dd008 	add	sp, sp, #8
 1015f80:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015f84:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015f88:	e3001105 	movw	r1, #261	; 0x105
 1015f8c:	e3400106 	movt	r0, #262	; 0x106
 1015f90:	eb000be9 	bl	1018f3c <Xil_Assert>
 1015f94:	e3a03001 	mov	r3, #1
 1015f98:	e1a00004 	mov	r0, r4
 1015f9c:	e5853000 	str	r3, [r5]
}
 1015fa0:	e28dd008 	add	sp, sp, #8
 1015fa4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015fa8:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1015fac:	e3a01f41 	mov	r1, #260	; 0x104
 1015fb0:	e3400106 	movt	r0, #262	; 0x106
 1015fb4:	eb000be0 	bl	1018f3c <Xil_Assert>
 1015fb8:	e3013f58 	movw	r3, #8024	; 0x1f58
 1015fbc:	e3a02001 	mov	r2, #1
 1015fc0:	e340310c 	movt	r3, #268	; 0x10c
 1015fc4:	e1a00006 	mov	r0, r6
 1015fc8:	e5832000 	str	r2, [r3]
 1015fcc:	eaffffe1 	b	1015f58 <XGpioPs_ReadPin+0x6c>

01015fd0 <XGpioPs_WritePin>:
{
 1015fd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015fd4:	e2505000 	subs	r5, r0, #0
{
 1015fd8:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1015fdc:	0a000032 	beq	10160ac <XGpioPs_WritePin+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015fe0:	e5953008 	ldr	r3, [r5, #8]
 1015fe4:	e1a07002 	mov	r7, r2
 1015fe8:	e3012111 	movw	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015fec:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015ff0:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015ff4:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015ff8:	e1530002 	cmp	r3, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1015ffc:	e3a06000 	mov	r6, #0
 1016000:	e5846000 	str	r6, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016004:	1a000020 	bne	101608c <XGpioPs_WritePin+0xbc>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016008:	e5953018 	ldr	r3, [r5, #24]
 101600c:	e1530001 	cmp	r3, r1
 1016010:	9a000015 	bls	101606c <XGpioPs_WritePin+0x9c>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016014:	e6ef0071 	uxtb	r0, r1
 1016018:	e28d2007 	add	r2, sp, #7
 101601c:	e28d1006 	add	r1, sp, #6
 1016020:	ebffff62 	bl	1015db0 <XGpioPs_GetBankPin>
	if (PinNumber > 15U) {
 1016024:	e5dd3007 	ldrb	r3, [sp, #7]
 1016028:	e353000f 	cmp	r3, #15
		PinNumber -= (u8)16;
 101602c:	82433010 	subhi	r3, r3, #16
		RegOffset = XGPIOPS_DATA_MSW_OFFSET;
 1016030:	83a06004 	movhi	r6, #4
		PinNumber -= (u8)16;
 1016034:	86ef3073 	uxtbhi	r3, r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016038:	e5952004 	ldr	r2, [r5, #4]
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 101603c:	e3a01000 	mov	r1, #0
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016040:	e5dd0006 	ldrb	r0, [sp, #6]
	DataVar &= (u32)0x01;
 1016044:	e2077001 	and	r7, r7, #1
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1016048:	e34f1fff 	movt	r1, #65535	; 0xffff
 101604c:	e3a0c001 	mov	ip, #1
 1016050:	e1811317 	orr	r1, r1, r7, lsl r3
 1016054:	e2833010 	add	r3, r3, #16
 1016058:	e1c1331c 	bic	r3, r1, ip, lsl r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 101605c:	e0822180 	add	r2, r2, r0, lsl #3
	*LocalAddr = Value;
 1016060:	e7823006 	str	r3, [r2, r6]
}
 1016064:	e28dd00c 	add	sp, sp, #12
 1016068:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 101606c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016070:	e3001151 	movw	r1, #337	; 0x151
 1016074:	e3400106 	movt	r0, #262	; 0x106
 1016078:	eb000baf 	bl	1018f3c <Xil_Assert>
 101607c:	e3a03001 	mov	r3, #1
 1016080:	e5843000 	str	r3, [r4]
}
 1016084:	e28dd00c 	add	sp, sp, #12
 1016088:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101608c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016090:	e3a01e15 	mov	r1, #336	; 0x150
 1016094:	e3400106 	movt	r0, #262	; 0x106
 1016098:	eb000ba7 	bl	1018f3c <Xil_Assert>
 101609c:	e3a03001 	mov	r3, #1
 10160a0:	e5843000 	str	r3, [r4]
}
 10160a4:	e28dd00c 	add	sp, sp, #12
 10160a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10160ac:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10160b0:	e300114f 	movw	r1, #335	; 0x14f
 10160b4:	e3400106 	movt	r0, #262	; 0x106
 10160b8:	eb000b9f 	bl	1018f3c <Xil_Assert>
 10160bc:	e3013f58 	movw	r3, #8024	; 0x1f58
 10160c0:	e3a02001 	mov	r2, #1
 10160c4:	e340310c 	movt	r3, #268	; 0x10c
 10160c8:	e5832000 	str	r2, [r3]
 10160cc:	eaffffec 	b	1016084 <XGpioPs_WritePin+0xb4>

010160d0 <XGpioPs_SetDirectionPin>:
{
 10160d0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10160d4:	e2505000 	subs	r5, r0, #0
{
 10160d8:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 10160dc:	0a00003b 	beq	10161d0 <XGpioPs_SetDirectionPin+0x100>
 10160e0:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10160e4:	e5952008 	ldr	r2, [r5, #8]
 10160e8:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10160ec:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10160f0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10160f4:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10160f8:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10160fc:	e3a03000 	mov	r3, #0
 1016100:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016104:	1a000015 	bne	1016160 <XGpioPs_SetDirectionPin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016108:	e5953018 	ldr	r3, [r5, #24]
 101610c:	e1530001 	cmp	r3, r1
 1016110:	9a000026 	bls	10161b0 <XGpioPs_SetDirectionPin+0xe0>
	Xil_AssertVoid(Direction <= (u32)1);
 1016114:	e3560001 	cmp	r6, #1
 1016118:	8a000018 	bhi	1016180 <XGpioPs_SetDirectionPin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 101611c:	e6ef0071 	uxtb	r0, r1
 1016120:	e28d2007 	add	r2, sp, #7
 1016124:	e28d1006 	add	r1, sp, #6
 1016128:	ebffff20 	bl	1015db0 <XGpioPs_GetBankPin>
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 101612c:	e5dd2006 	ldrb	r2, [sp, #6]
 1016130:	e3a03f81 	mov	r3, #516	; 0x204
 1016134:	e5951004 	ldr	r1, [r5, #4]
	if (Direction!=(u32)0) { /*  Output Direction */
 1016138:	e3560000 	cmp	r6, #0
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 101613c:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1016140:	e7932001 	ldr	r2, [r3, r1]
	if (Direction!=(u32)0) { /*  Output Direction */
 1016144:	1a000015 	bne	10161a0 <XGpioPs_SetDirectionPin+0xd0>
		DirModeReg &= ~ ((u32)1 << (u32)PinNumber);
 1016148:	e5dd0007 	ldrb	r0, [sp, #7]
 101614c:	e3a0c001 	mov	ip, #1
 1016150:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1016154:	e7832001 	str	r2, [r3, r1]
}
 1016158:	e28dd008 	add	sp, sp, #8
 101615c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016160:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016164:	e30011aa 	movw	r1, #426	; 0x1aa
 1016168:	e3400106 	movt	r0, #262	; 0x106
 101616c:	eb000b72 	bl	1018f3c <Xil_Assert>
 1016170:	e3a03001 	mov	r3, #1
 1016174:	e5843000 	str	r3, [r4]
}
 1016178:	e28dd008 	add	sp, sp, #8
 101617c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Direction <= (u32)1);
 1016180:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016184:	e3a01f6b 	mov	r1, #428	; 0x1ac
 1016188:	e3400106 	movt	r0, #262	; 0x106
 101618c:	eb000b6a 	bl	1018f3c <Xil_Assert>
 1016190:	e3a03001 	mov	r3, #1
 1016194:	e5843000 	str	r3, [r4]
}
 1016198:	e28dd008 	add	sp, sp, #8
 101619c:	e8bd8070 	pop	{r4, r5, r6, pc}
		DirModeReg |= ((u32)1 << (u32)PinNumber);
 10161a0:	e5dd0007 	ldrb	r0, [sp, #7]
 10161a4:	e3a0c001 	mov	ip, #1
 10161a8:	e182201c 	orr	r2, r2, ip, lsl r0
 10161ac:	eaffffe8 	b	1016154 <XGpioPs_SetDirectionPin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10161b0:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10161b4:	e30011ab 	movw	r1, #427	; 0x1ab
 10161b8:	e3400106 	movt	r0, #262	; 0x106
 10161bc:	eb000b5e 	bl	1018f3c <Xil_Assert>
 10161c0:	e3a03001 	mov	r3, #1
 10161c4:	e5843000 	str	r3, [r4]
}
 10161c8:	e28dd008 	add	sp, sp, #8
 10161cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10161d0:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10161d4:	e30011a9 	movw	r1, #425	; 0x1a9
 10161d8:	e3400106 	movt	r0, #262	; 0x106
 10161dc:	eb000b56 	bl	1018f3c <Xil_Assert>
 10161e0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10161e4:	e3a02001 	mov	r2, #1
 10161e8:	e340310c 	movt	r3, #268	; 0x10c
 10161ec:	e5832000 	str	r2, [r3]
 10161f0:	eaffffe0 	b	1016178 <XGpioPs_SetDirectionPin+0xa8>

010161f4 <XGpioPs_GetDirectionPin>:
{
 10161f4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10161f8:	e2506000 	subs	r6, r0, #0
{
 10161fc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016200:	0a00002b 	beq	10162b4 <XGpioPs_GetDirectionPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016204:	e5962008 	ldr	r2, [r6, #8]
 1016208:	e3013111 	movw	r3, #4369	; 0x1111
 101620c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016210:	e3015f58 	movw	r5, #8024	; 0x1f58
 1016214:	e340510c 	movt	r5, #268	; 0x10c
 1016218:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101621c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016220:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016224:	1a000019 	bne	1016290 <XGpioPs_GetDirectionPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016228:	e5963018 	ldr	r3, [r6, #24]
 101622c:	e1530001 	cmp	r3, r1
 1016230:	9a00000d 	bls	101626c <XGpioPs_GetDirectionPin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016234:	e6ef0071 	uxtb	r0, r1
 1016238:	e28d2007 	add	r2, sp, #7
 101623c:	e28d1006 	add	r1, sp, #6
 1016240:	ebfffeda 	bl	1015db0 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016244:	e5dd1006 	ldrb	r1, [sp, #6]
 1016248:	e3a03f81 	mov	r3, #516	; 0x204
 101624c:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1016250:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016254:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1016258:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 101625c:	e1a04430 	lsr	r4, r0, r4
 1016260:	e2040001 	and	r0, r4, #1
}
 1016264:	e28dd008 	add	sp, sp, #8
 1016268:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 101626c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016270:	e3a01f7f 	mov	r1, #508	; 0x1fc
 1016274:	e3400106 	movt	r0, #262	; 0x106
 1016278:	eb000b2f 	bl	1018f3c <Xil_Assert>
 101627c:	e3a03001 	mov	r3, #1
 1016280:	e1a00004 	mov	r0, r4
 1016284:	e5853000 	str	r3, [r5]
}
 1016288:	e28dd008 	add	sp, sp, #8
 101628c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016290:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016294:	e30011fb 	movw	r1, #507	; 0x1fb
 1016298:	e3400106 	movt	r0, #262	; 0x106
 101629c:	eb000b26 	bl	1018f3c <Xil_Assert>
 10162a0:	e3a03001 	mov	r3, #1
 10162a4:	e1a00004 	mov	r0, r4
 10162a8:	e5853000 	str	r3, [r5]
}
 10162ac:	e28dd008 	add	sp, sp, #8
 10162b0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10162b4:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10162b8:	e30011fa 	movw	r1, #506	; 0x1fa
 10162bc:	e3400106 	movt	r0, #262	; 0x106
 10162c0:	eb000b1d 	bl	1018f3c <Xil_Assert>
 10162c4:	e3013f58 	movw	r3, #8024	; 0x1f58
 10162c8:	e3a02001 	mov	r2, #1
 10162cc:	e340310c 	movt	r3, #268	; 0x10c
 10162d0:	e1a00006 	mov	r0, r6
 10162d4:	e5832000 	str	r2, [r3]
 10162d8:	eaffffe1 	b	1016264 <XGpioPs_GetDirectionPin+0x70>

010162dc <XGpioPs_SetOutputEnablePin>:
{
 10162dc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10162e0:	e2505000 	subs	r5, r0, #0
{
 10162e4:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 10162e8:	0a00003b 	beq	10163dc <XGpioPs_SetOutputEnablePin+0x100>
 10162ec:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10162f0:	e5952008 	ldr	r2, [r5, #8]
 10162f4:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10162f8:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10162fc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016300:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016304:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016308:	e3a03000 	mov	r3, #0
 101630c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016310:	1a000015 	bne	101636c <XGpioPs_SetOutputEnablePin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016314:	e5953018 	ldr	r3, [r5, #24]
 1016318:	e1530001 	cmp	r3, r1
 101631c:	9a000026 	bls	10163bc <XGpioPs_SetOutputEnablePin+0xe0>
	Xil_AssertVoid(OpEnable <= (u32)1);
 1016320:	e3560001 	cmp	r6, #1
 1016324:	8a000018 	bhi	101638c <XGpioPs_SetOutputEnablePin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016328:	e6ef0071 	uxtb	r0, r1
 101632c:	e28d2007 	add	r2, sp, #7
 1016330:	e28d1006 	add	r1, sp, #6
 1016334:	ebfffe9d 	bl	1015db0 <XGpioPs_GetBankPin>
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016338:	e5dd2006 	ldrb	r2, [sp, #6]
 101633c:	e3a03f82 	mov	r3, #520	; 0x208
 1016340:	e5951004 	ldr	r1, [r5, #4]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1016344:	e3560000 	cmp	r6, #0
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016348:	e0833302 	add	r3, r3, r2, lsl #6
 101634c:	e7932001 	ldr	r2, [r3, r1]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1016350:	1a000015 	bne	10163ac <XGpioPs_SetOutputEnablePin+0xd0>
		OpEnableReg &= ~ ((u32)1 << (u32)PinNumber);
 1016354:	e5dd0007 	ldrb	r0, [sp, #7]
 1016358:	e3a0c001 	mov	ip, #1
 101635c:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1016360:	e7832001 	str	r2, [r3, r1]
}
 1016364:	e28dd008 	add	sp, sp, #8
 1016368:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101636c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016370:	e3a01f92 	mov	r1, #584	; 0x248
 1016374:	e3400106 	movt	r0, #262	; 0x106
 1016378:	eb000aef 	bl	1018f3c <Xil_Assert>
 101637c:	e3a03001 	mov	r3, #1
 1016380:	e5843000 	str	r3, [r4]
}
 1016384:	e28dd008 	add	sp, sp, #8
 1016388:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(OpEnable <= (u32)1);
 101638c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 1016390:	e300124a 	movw	r1, #586	; 0x24a
 1016394:	e3400106 	movt	r0, #262	; 0x106
 1016398:	eb000ae7 	bl	1018f3c <Xil_Assert>
 101639c:	e3a03001 	mov	r3, #1
 10163a0:	e5843000 	str	r3, [r4]
}
 10163a4:	e28dd008 	add	sp, sp, #8
 10163a8:	e8bd8070 	pop	{r4, r5, r6, pc}
		OpEnableReg |= ((u32)1 << (u32)PinNumber);
 10163ac:	e5dd0007 	ldrb	r0, [sp, #7]
 10163b0:	e3a0c001 	mov	ip, #1
 10163b4:	e182201c 	orr	r2, r2, ip, lsl r0
 10163b8:	eaffffe8 	b	1016360 <XGpioPs_SetOutputEnablePin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10163bc:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10163c0:	e3001249 	movw	r1, #585	; 0x249
 10163c4:	e3400106 	movt	r0, #262	; 0x106
 10163c8:	eb000adb 	bl	1018f3c <Xil_Assert>
 10163cc:	e3a03001 	mov	r3, #1
 10163d0:	e5843000 	str	r3, [r4]
}
 10163d4:	e28dd008 	add	sp, sp, #8
 10163d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10163dc:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10163e0:	e3001247 	movw	r1, #583	; 0x247
 10163e4:	e3400106 	movt	r0, #262	; 0x106
 10163e8:	eb000ad3 	bl	1018f3c <Xil_Assert>
 10163ec:	e3013f58 	movw	r3, #8024	; 0x1f58
 10163f0:	e3a02001 	mov	r2, #1
 10163f4:	e340310c 	movt	r3, #268	; 0x10c
 10163f8:	e5832000 	str	r2, [r3]
 10163fc:	eaffffe0 	b	1016384 <XGpioPs_SetOutputEnablePin+0xa8>

01016400 <XGpioPs_GetOutputEnablePin>:
{
 1016400:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016404:	e2506000 	subs	r6, r0, #0
{
 1016408:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 101640c:	0a00002b 	beq	10164c0 <XGpioPs_GetOutputEnablePin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016410:	e5962008 	ldr	r2, [r6, #8]
 1016414:	e3013111 	movw	r3, #4369	; 0x1111
 1016418:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101641c:	e3015f58 	movw	r5, #8024	; 0x1f58
 1016420:	e340510c 	movt	r5, #268	; 0x10c
 1016424:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016428:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101642c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016430:	1a000019 	bne	101649c <XGpioPs_GetOutputEnablePin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016434:	e5963018 	ldr	r3, [r6, #24]
 1016438:	e1530001 	cmp	r3, r1
 101643c:	9a00000d 	bls	1016478 <XGpioPs_GetOutputEnablePin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016440:	e6ef0071 	uxtb	r0, r1
 1016444:	e28d2007 	add	r2, sp, #7
 1016448:	e28d1006 	add	r1, sp, #6
 101644c:	ebfffe57 	bl	1015db0 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016450:	e5dd1006 	ldrb	r1, [sp, #6]
 1016454:	e3a03f82 	mov	r3, #520	; 0x208
 1016458:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 101645c:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016460:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1016464:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1016468:	e1a04430 	lsr	r4, r0, r4
 101646c:	e2040001 	and	r0, r4, #1
}
 1016470:	e28dd008 	add	sp, sp, #8
 1016474:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016478:	e30b0e44 	movw	r0, #48708	; 0xbe44
 101647c:	e300129b 	movw	r1, #667	; 0x29b
 1016480:	e3400106 	movt	r0, #262	; 0x106
 1016484:	eb000aac 	bl	1018f3c <Xil_Assert>
 1016488:	e3a03001 	mov	r3, #1
 101648c:	e1a00004 	mov	r0, r4
 1016490:	e5853000 	str	r3, [r5]
}
 1016494:	e28dd008 	add	sp, sp, #8
 1016498:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101649c:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10164a0:	e300129a 	movw	r1, #666	; 0x29a
 10164a4:	e3400106 	movt	r0, #262	; 0x106
 10164a8:	eb000aa3 	bl	1018f3c <Xil_Assert>
 10164ac:	e3a03001 	mov	r3, #1
 10164b0:	e1a00004 	mov	r0, r4
 10164b4:	e5853000 	str	r3, [r5]
}
 10164b8:	e28dd008 	add	sp, sp, #8
 10164bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10164c0:	e30b0e44 	movw	r0, #48708	; 0xbe44
 10164c4:	e3001299 	movw	r1, #665	; 0x299
 10164c8:	e3400106 	movt	r0, #262	; 0x106
 10164cc:	eb000a9a 	bl	1018f3c <Xil_Assert>
 10164d0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10164d4:	e3a02001 	mov	r2, #1
 10164d8:	e340310c 	movt	r3, #268	; 0x10c
 10164dc:	e1a00006 	mov	r0, r6
 10164e0:	e5832000 	str	r2, [r3]
 10164e4:	eaffffe1 	b	1016470 <XGpioPs_GetOutputEnablePin+0x70>

010164e8 <XGpioPs_LookupConfig>:
{
	XGpioPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XGPIOPS_NUM_INSTANCES; Index++) {
		if (XGpioPs_ConfigTable[Index].DeviceId == DeviceId) {
 10164e8:	e30c32b8 	movw	r3, #49848	; 0xc2b8
 10164ec:	e3403106 	movt	r3, #262	; 0x106
 10164f0:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XGpioPs_Config *)CfgPtr;
}
 10164f4:	e1520000 	cmp	r2, r0
 10164f8:	01a00003 	moveq	r0, r3
 10164fc:	13a00000 	movne	r0, #0
 1016500:	e12fff1e 	bx	lr

01016504 <XGpioPs_IntrEnable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1016504:	e3500000 	cmp	r0, #0
{
 1016508:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101650c:	0a00001e 	beq	101658c <XGpioPs_IntrEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016510:	e590c008 	ldr	ip, [r0, #8]
 1016514:	e3013111 	movw	r3, #4369	; 0x1111
 1016518:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101651c:	e3014f58 	movw	r4, #8024	; 0x1f58
 1016520:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016524:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016528:	e3a03000 	mov	r3, #0
 101652c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016530:	1a000007 	bne	1016554 <XGpioPs_IntrEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016534:	e5d0301c 	ldrb	r3, [r0, #28]
 1016538:	e1530001 	cmp	r3, r1
 101653c:	9a00000b 	bls	1016570 <XGpioPs_IntrEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016540:	e5900004 	ldr	r0, [r0, #4]
 1016544:	e3a03e21 	mov	r3, #528	; 0x210
 1016548:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 101654c:	e7812000 	str	r2, [r1, r0]
 1016550:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016554:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016558:	e3a01063 	mov	r1, #99	; 0x63
 101655c:	e3400106 	movt	r0, #262	; 0x106
 1016560:	eb000a75 	bl	1018f3c <Xil_Assert>
 1016564:	e3a03001 	mov	r3, #1
 1016568:	e5843000 	str	r3, [r4]
 101656c:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016570:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016574:	e3a01064 	mov	r1, #100	; 0x64
 1016578:	e3400106 	movt	r0, #262	; 0x106
 101657c:	eb000a6e 	bl	1018f3c <Xil_Assert>
 1016580:	e3a03001 	mov	r3, #1
 1016584:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, Mask);
}
 1016588:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101658c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016590:	e3a01062 	mov	r1, #98	; 0x62
 1016594:	e3400106 	movt	r0, #262	; 0x106
 1016598:	eb000a67 	bl	1018f3c <Xil_Assert>
 101659c:	e3013f58 	movw	r3, #8024	; 0x1f58
 10165a0:	e3a02001 	mov	r2, #1
 10165a4:	e340310c 	movt	r3, #268	; 0x10c
 10165a8:	e5832000 	str	r2, [r3]
 10165ac:	e8bd8010 	pop	{r4, pc}

010165b0 <XGpioPs_IntrEnablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 10165b0:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 10165b4:	e2505000 	subs	r5, r0, #0
{
 10165b8:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 10165bc:	0a000029 	beq	1016668 <XGpioPs_IntrEnablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10165c0:	e5950008 	ldr	r0, [r5, #8]
 10165c4:	e3013111 	movw	r3, #4369	; 0x1111
 10165c8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10165cc:	e3014f58 	movw	r4, #8024	; 0x1f58
 10165d0:	e340410c 	movt	r4, #268	; 0x10c
 10165d4:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10165d8:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10165dc:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10165e0:	1a000018 	bne	1016648 <XGpioPs_IntrEnablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10165e4:	e5953018 	ldr	r3, [r5, #24]
 10165e8:	e1530001 	cmp	r3, r1
 10165ec:	9a00000d 	bls	1016628 <XGpioPs_IntrEnablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10165f0:	e6ef0071 	uxtb	r0, r1
 10165f4:	e28d2007 	add	r2, sp, #7
 10165f8:	e28d1006 	add	r1, sp, #6
 10165fc:	ebfffdeb 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1016600:	e5ddc007 	ldrb	ip, [sp, #7]
 1016604:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016608:	e5dd0006 	ldrb	r0, [sp, #6]
 101660c:	e3a03e21 	mov	r3, #528	; 0x210
 1016610:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1016614:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016618:	e0833300 	add	r3, r3, r0, lsl #6
 101661c:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, IntrReg);
}
 1016620:	e28dd00c 	add	sp, sp, #12
 1016624:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016628:	e30b0e50 	movw	r0, #48720	; 0xbe50
 101662c:	e3a01088 	mov	r1, #136	; 0x88
 1016630:	e3400106 	movt	r0, #262	; 0x106
 1016634:	eb000a40 	bl	1018f3c <Xil_Assert>
 1016638:	e3a03001 	mov	r3, #1
 101663c:	e5843000 	str	r3, [r4]
}
 1016640:	e28dd00c 	add	sp, sp, #12
 1016644:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016648:	e30b0e50 	movw	r0, #48720	; 0xbe50
 101664c:	e3a01087 	mov	r1, #135	; 0x87
 1016650:	e3400106 	movt	r0, #262	; 0x106
 1016654:	eb000a38 	bl	1018f3c <Xil_Assert>
 1016658:	e3a03001 	mov	r3, #1
 101665c:	e5843000 	str	r3, [r4]
}
 1016660:	e28dd00c 	add	sp, sp, #12
 1016664:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016668:	e30b0e50 	movw	r0, #48720	; 0xbe50
 101666c:	e3a01086 	mov	r1, #134	; 0x86
 1016670:	e3400106 	movt	r0, #262	; 0x106
 1016674:	eb000a30 	bl	1018f3c <Xil_Assert>
 1016678:	e3013f58 	movw	r3, #8024	; 0x1f58
 101667c:	e3a02001 	mov	r2, #1
 1016680:	e340310c 	movt	r3, #268	; 0x10c
 1016684:	e5832000 	str	r2, [r3]
 1016688:	eaffffe4 	b	1016620 <XGpioPs_IntrEnablePin+0x70>

0101668c <XGpioPs_IntrDisable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 101668c:	e3500000 	cmp	r0, #0
{
 1016690:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1016694:	0a00001e 	beq	1016714 <XGpioPs_IntrDisable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016698:	e590c008 	ldr	ip, [r0, #8]
 101669c:	e3013111 	movw	r3, #4369	; 0x1111
 10166a0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10166a4:	e3014f58 	movw	r4, #8024	; 0x1f58
 10166a8:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10166ac:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10166b0:	e3a03000 	mov	r3, #0
 10166b4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10166b8:	1a000007 	bne	10166dc <XGpioPs_IntrDisable+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10166bc:	e5d0301c 	ldrb	r3, [r0, #28]
 10166c0:	e1530001 	cmp	r3, r1
 10166c4:	9a00000b 	bls	10166f8 <XGpioPs_IntrDisable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10166c8:	e5900004 	ldr	r0, [r0, #4]
 10166cc:	e3a03f85 	mov	r3, #532	; 0x214
 10166d0:	e0831301 	add	r1, r3, r1, lsl #6
 10166d4:	e7812000 	str	r2, [r1, r0]
 10166d8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10166dc:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10166e0:	e3a010ac 	mov	r1, #172	; 0xac
 10166e4:	e3400106 	movt	r0, #262	; 0x106
 10166e8:	eb000a13 	bl	1018f3c <Xil_Assert>
 10166ec:	e3a03001 	mov	r3, #1
 10166f0:	e5843000 	str	r3, [r4]
 10166f4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10166f8:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10166fc:	e3a010ad 	mov	r1, #173	; 0xad
 1016700:	e3400106 	movt	r0, #262	; 0x106
 1016704:	eb000a0c 	bl	1018f3c <Xil_Assert>
 1016708:	e3a03001 	mov	r3, #1
 101670c:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, Mask);
}
 1016710:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016714:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016718:	e3a010ab 	mov	r1, #171	; 0xab
 101671c:	e3400106 	movt	r0, #262	; 0x106
 1016720:	eb000a05 	bl	1018f3c <Xil_Assert>
 1016724:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016728:	e3a02001 	mov	r2, #1
 101672c:	e340310c 	movt	r3, #268	; 0x10c
 1016730:	e5832000 	str	r2, [r3]
 1016734:	e8bd8010 	pop	{r4, pc}

01016738 <XGpioPs_IntrDisablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1016738:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 101673c:	e2505000 	subs	r5, r0, #0
{
 1016740:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1016744:	0a000029 	beq	10167f0 <XGpioPs_IntrDisablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016748:	e5950008 	ldr	r0, [r5, #8]
 101674c:	e3013111 	movw	r3, #4369	; 0x1111
 1016750:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016754:	e3014f58 	movw	r4, #8024	; 0x1f58
 1016758:	e340410c 	movt	r4, #268	; 0x10c
 101675c:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016760:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016764:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016768:	1a000018 	bne	10167d0 <XGpioPs_IntrDisablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 101676c:	e5953018 	ldr	r3, [r5, #24]
 1016770:	e1530001 	cmp	r3, r1
 1016774:	9a00000d 	bls	10167b0 <XGpioPs_IntrDisablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016778:	e6ef0071 	uxtb	r0, r1
 101677c:	e28d2007 	add	r2, sp, #7
 1016780:	e28d1006 	add	r1, sp, #6
 1016784:	ebfffd89 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1016788:	e5ddc007 	ldrb	ip, [sp, #7]
 101678c:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016790:	e5dd0006 	ldrb	r0, [sp, #6]
 1016794:	e3a03f85 	mov	r3, #532	; 0x214
 1016798:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 101679c:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10167a0:	e0833300 	add	r3, r3, r0, lsl #6
 10167a4:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, IntrReg);
}
 10167a8:	e28dd00c 	add	sp, sp, #12
 10167ac:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10167b0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10167b4:	e3a010d1 	mov	r1, #209	; 0xd1
 10167b8:	e3400106 	movt	r0, #262	; 0x106
 10167bc:	eb0009de 	bl	1018f3c <Xil_Assert>
 10167c0:	e3a03001 	mov	r3, #1
 10167c4:	e5843000 	str	r3, [r4]
}
 10167c8:	e28dd00c 	add	sp, sp, #12
 10167cc:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10167d0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10167d4:	e3a010d0 	mov	r1, #208	; 0xd0
 10167d8:	e3400106 	movt	r0, #262	; 0x106
 10167dc:	eb0009d6 	bl	1018f3c <Xil_Assert>
 10167e0:	e3a03001 	mov	r3, #1
 10167e4:	e5843000 	str	r3, [r4]
}
 10167e8:	e28dd00c 	add	sp, sp, #12
 10167ec:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10167f0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10167f4:	e3a010cf 	mov	r1, #207	; 0xcf
 10167f8:	e3400106 	movt	r0, #262	; 0x106
 10167fc:	eb0009ce 	bl	1018f3c <Xil_Assert>
 1016800:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016804:	e3a02001 	mov	r2, #1
 1016808:	e340310c 	movt	r3, #268	; 0x10c
 101680c:	e5832000 	str	r2, [r3]
 1016810:	eaffffe4 	b	10167a8 <XGpioPs_IntrDisablePin+0x70>

01016814 <XGpioPs_IntrGetEnabled>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabled(const XGpioPs *InstancePtr, u8 Bank)
{
 1016814:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrMask;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1016818:	e2506000 	subs	r6, r0, #0
 101681c:	0a000021 	beq	10168a8 <XGpioPs_IntrGetEnabled+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016820:	e5962008 	ldr	r2, [r6, #8]
 1016824:	e3013111 	movw	r3, #4369	; 0x1111
 1016828:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101682c:	e3015f58 	movw	r5, #8024	; 0x1f58
 1016830:	e340510c 	movt	r5, #268	; 0x10c
 1016834:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016838:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101683c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016840:	1a000008 	bne	1016868 <XGpioPs_IntrGetEnabled+0x54>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1016844:	e5d6301c 	ldrb	r3, [r6, #28]
 1016848:	e1530001 	cmp	r3, r1
 101684c:	9a00000d 	bls	1016888 <XGpioPs_IntrGetEnabled+0x74>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	IntrMask = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016850:	e5962004 	ldr	r2, [r6, #4]
 1016854:	e3a03f83 	mov	r3, #524	; 0x20c
 1016858:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 101685c:	e7914002 	ldr	r4, [r1, r2]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);
	return (~IntrMask);
 1016860:	e1e00004 	mvn	r0, r4
 1016864:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016868:	e30b0e50 	movw	r0, #48720	; 0xbe50
 101686c:	e3a010f6 	mov	r1, #246	; 0xf6
 1016870:	e3400106 	movt	r0, #262	; 0x106
 1016874:	eb0009b0 	bl	1018f3c <Xil_Assert>
 1016878:	e3a03001 	mov	r3, #1
 101687c:	e1a00004 	mov	r0, r4
 1016880:	e5853000 	str	r3, [r5]
 1016884:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1016888:	e30b0e50 	movw	r0, #48720	; 0xbe50
 101688c:	e3a010f7 	mov	r1, #247	; 0xf7
 1016890:	e3400106 	movt	r0, #262	; 0x106
 1016894:	eb0009a8 	bl	1018f3c <Xil_Assert>
 1016898:	e3a03001 	mov	r3, #1
 101689c:	e1a00004 	mov	r0, r4
 10168a0:	e5853000 	str	r3, [r5]
}
 10168a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10168a8:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10168ac:	e3a010f5 	mov	r1, #245	; 0xf5
 10168b0:	e3400106 	movt	r0, #262	; 0x106
 10168b4:	eb0009a0 	bl	1018f3c <Xil_Assert>
 10168b8:	e3013f58 	movw	r3, #8024	; 0x1f58
 10168bc:	e3a02001 	mov	r2, #1
 10168c0:	e340310c 	movt	r3, #268	; 0x10c
 10168c4:	e1a00006 	mov	r0, r6
 10168c8:	e5832000 	str	r2, [r3]
 10168cc:	e8bd8070 	pop	{r4, r5, r6, pc}

010168d0 <XGpioPs_IntrGetEnabledPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabledPin(const XGpioPs *InstancePtr, u32 Pin)
{
 10168d0:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10168d4:	e2506000 	subs	r6, r0, #0
{
 10168d8:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10168dc:	0a00002b 	beq	1016990 <XGpioPs_IntrGetEnabledPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10168e0:	e5962008 	ldr	r2, [r6, #8]
 10168e4:	e3013111 	movw	r3, #4369	; 0x1111
 10168e8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10168ec:	e3015f58 	movw	r5, #8024	; 0x1f58
 10168f0:	e340510c 	movt	r5, #268	; 0x10c
 10168f4:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10168f8:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10168fc:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016900:	1a000019 	bne	101696c <XGpioPs_IntrGetEnabledPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016904:	e5963018 	ldr	r3, [r6, #24]
 1016908:	e1530001 	cmp	r3, r1
 101690c:	9a00000d 	bls	1016948 <XGpioPs_IntrGetEnabledPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016910:	e6ef0071 	uxtb	r0, r1
 1016914:	e28d2007 	add	r2, sp, #7
 1016918:	e28d1006 	add	r1, sp, #6
 101691c:	ebfffd23 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016920:	e5dd1006 	ldrb	r1, [sp, #6]
 1016924:	e3a03f83 	mov	r3, #524	; 0x20c
 1016928:	e5962004 	ldr	r2, [r6, #4]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 101692c:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016930:	e0833301 	add	r3, r3, r1, lsl #6
 1016934:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1016938:	e1e04430 	mvn	r4, r0, lsr r4
 101693c:	e2040001 	and	r0, r4, #1
}
 1016940:	e28dd008 	add	sp, sp, #8
 1016944:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016948:	e30b0e50 	movw	r0, #48720	; 0xbe50
 101694c:	e300111f 	movw	r1, #287	; 0x11f
 1016950:	e3400106 	movt	r0, #262	; 0x106
 1016954:	eb000978 	bl	1018f3c <Xil_Assert>
 1016958:	e3a03001 	mov	r3, #1
 101695c:	e1a00004 	mov	r0, r4
 1016960:	e5853000 	str	r3, [r5]
}
 1016964:	e28dd008 	add	sp, sp, #8
 1016968:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101696c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016970:	e300111e 	movw	r1, #286	; 0x11e
 1016974:	e3400106 	movt	r0, #262	; 0x106
 1016978:	eb00096f 	bl	1018f3c <Xil_Assert>
 101697c:	e3a03001 	mov	r3, #1
 1016980:	e1a00004 	mov	r0, r4
 1016984:	e5853000 	str	r3, [r5]
}
 1016988:	e28dd008 	add	sp, sp, #8
 101698c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016990:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016994:	e300111d 	movw	r1, #285	; 0x11d
 1016998:	e3400106 	movt	r0, #262	; 0x106
 101699c:	eb000966 	bl	1018f3c <Xil_Assert>
 10169a0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10169a4:	e3a02001 	mov	r2, #1
 10169a8:	e340310c 	movt	r3, #268	; 0x10c
 10169ac:	e1a00006 	mov	r0, r6
 10169b0:	e5832000 	str	r2, [r3]
 10169b4:	eaffffe1 	b	1016940 <XGpioPs_IntrGetEnabledPin+0x70>

010169b8 <XGpioPs_IntrGetStatus>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatus(const XGpioPs *InstancePtr, u8 Bank)
{
 10169b8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10169bc:	e2506000 	subs	r6, r0, #0
 10169c0:	0a000020 	beq	1016a48 <XGpioPs_IntrGetStatus+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10169c4:	e5962008 	ldr	r2, [r6, #8]
 10169c8:	e3013111 	movw	r3, #4369	; 0x1111
 10169cc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10169d0:	e3015f58 	movw	r5, #8024	; 0x1f58
 10169d4:	e340510c 	movt	r5, #268	; 0x10c
 10169d8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10169dc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10169e0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10169e4:	1a000007 	bne	1016a08 <XGpioPs_IntrGetStatus+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10169e8:	e5d6301c 	ldrb	r3, [r6, #28]
 10169ec:	e1530001 	cmp	r3, r1
 10169f0:	9a00000c 	bls	1016a28 <XGpioPs_IntrGetStatus+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10169f4:	e5962004 	ldr	r2, [r6, #4]
 10169f8:	e3a03f86 	mov	r3, #536	; 0x218
 10169fc:	e0831301 	add	r1, r3, r1, lsl #6
 1016a00:	e7910002 	ldr	r0, [r1, r2]
 1016a04:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016a08:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016a0c:	e3a01d05 	mov	r1, #320	; 0x140
 1016a10:	e3400106 	movt	r0, #262	; 0x106
 1016a14:	eb000948 	bl	1018f3c <Xil_Assert>
 1016a18:	e3a03001 	mov	r3, #1
 1016a1c:	e1a00004 	mov	r0, r4
 1016a20:	e5853000 	str	r3, [r5]
 1016a24:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1016a28:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016a2c:	e3001141 	movw	r1, #321	; 0x141
 1016a30:	e3400106 	movt	r0, #262	; 0x106
 1016a34:	eb000940 	bl	1018f3c <Xil_Assert>
 1016a38:	e3a03001 	mov	r3, #1
 1016a3c:	e1a00004 	mov	r0, r4
 1016a40:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_INTSTS_OFFSET);
}
 1016a44:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a48:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016a4c:	e300113f 	movw	r1, #319	; 0x13f
 1016a50:	e3400106 	movt	r0, #262	; 0x106
 1016a54:	eb000938 	bl	1018f3c <Xil_Assert>
 1016a58:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016a5c:	e3a02001 	mov	r2, #1
 1016a60:	e340310c 	movt	r3, #268	; 0x10c
 1016a64:	e1a00006 	mov	r0, r6
 1016a68:	e5832000 	str	r2, [r3]
 1016a6c:	e8bd8070 	pop	{r4, r5, r6, pc}

01016a70 <XGpioPs_IntrGetStatusPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatusPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1016a70:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a74:	e2506000 	subs	r6, r0, #0
{
 1016a78:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a7c:	0a00002b 	beq	1016b30 <XGpioPs_IntrGetStatusPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016a80:	e5962008 	ldr	r2, [r6, #8]
 1016a84:	e3013111 	movw	r3, #4369	; 0x1111
 1016a88:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a8c:	e3015f58 	movw	r5, #8024	; 0x1f58
 1016a90:	e340510c 	movt	r5, #268	; 0x10c
 1016a94:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016a98:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a9c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016aa0:	1a000019 	bne	1016b0c <XGpioPs_IntrGetStatusPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016aa4:	e5963018 	ldr	r3, [r6, #24]
 1016aa8:	e1530001 	cmp	r3, r1
 1016aac:	9a00000d 	bls	1016ae8 <XGpioPs_IntrGetStatusPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016ab0:	e6ef0071 	uxtb	r0, r1
 1016ab4:	e28d2007 	add	r2, sp, #7
 1016ab8:	e28d1006 	add	r1, sp, #6
 1016abc:	ebfffcbb 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016ac0:	e5dd1006 	ldrb	r1, [sp, #6]
 1016ac4:	e3a03f86 	mov	r3, #536	; 0x218
 1016ac8:	e5962004 	ldr	r2, [r6, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 1016acc:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016ad0:	e0833301 	add	r3, r3, r1, lsl #6
 1016ad4:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 1016ad8:	e1a04430 	lsr	r4, r0, r4
 1016adc:	e2040001 	and	r0, r4, #1
}
 1016ae0:	e28dd008 	add	sp, sp, #8
 1016ae4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1016ae8:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016aec:	e3a01f5a 	mov	r1, #360	; 0x168
 1016af0:	e3400106 	movt	r0, #262	; 0x106
 1016af4:	eb000910 	bl	1018f3c <Xil_Assert>
 1016af8:	e3a03001 	mov	r3, #1
 1016afc:	e1a00004 	mov	r0, r4
 1016b00:	e5853000 	str	r3, [r5]
}
 1016b04:	e28dd008 	add	sp, sp, #8
 1016b08:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016b0c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016b10:	e3001167 	movw	r1, #359	; 0x167
 1016b14:	e3400106 	movt	r0, #262	; 0x106
 1016b18:	eb000907 	bl	1018f3c <Xil_Assert>
 1016b1c:	e3a03001 	mov	r3, #1
 1016b20:	e1a00004 	mov	r0, r4
 1016b24:	e5853000 	str	r3, [r5]
}
 1016b28:	e28dd008 	add	sp, sp, #8
 1016b2c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016b30:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016b34:	e3001166 	movw	r1, #358	; 0x166
 1016b38:	e3400106 	movt	r0, #262	; 0x106
 1016b3c:	eb0008fe 	bl	1018f3c <Xil_Assert>
 1016b40:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016b44:	e3a02001 	mov	r2, #1
 1016b48:	e340310c 	movt	r3, #268	; 0x10c
 1016b4c:	e1a00006 	mov	r0, r6
 1016b50:	e5832000 	str	r2, [r3]
 1016b54:	eaffffe1 	b	1016ae0 <XGpioPs_IntrGetStatusPin+0x70>

01016b58 <XGpioPs_IntrClear>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClear(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1016b58:	e3500000 	cmp	r0, #0
{
 1016b5c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1016b60:	0a00001e 	beq	1016be0 <XGpioPs_IntrClear+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016b64:	e590c008 	ldr	ip, [r0, #8]
 1016b68:	e3013111 	movw	r3, #4369	; 0x1111
 1016b6c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016b70:	e3014f58 	movw	r4, #8024	; 0x1f58
 1016b74:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016b78:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016b7c:	e3a03000 	mov	r3, #0
 1016b80:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016b84:	1a000007 	bne	1016ba8 <XGpioPs_IntrClear+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016b88:	e5d0301c 	ldrb	r3, [r0, #28]
 1016b8c:	e1530001 	cmp	r3, r1
 1016b90:	9a00000b 	bls	1016bc4 <XGpioPs_IntrClear+0x6c>
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	/* Clear the currently pending interrupts. */
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016b94:	e5900004 	ldr	r0, [r0, #4]
 1016b98:	e3a03f86 	mov	r3, #536	; 0x218
 1016b9c:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1016ba0:	e7812000 	str	r2, [r1, r0]
 1016ba4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016ba8:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016bac:	e3a01f63 	mov	r1, #396	; 0x18c
 1016bb0:	e3400106 	movt	r0, #262	; 0x106
 1016bb4:	eb0008e0 	bl	1018f3c <Xil_Assert>
 1016bb8:	e3a03001 	mov	r3, #1
 1016bbc:	e5843000 	str	r3, [r4]
 1016bc0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016bc4:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016bc8:	e300118d 	movw	r1, #397	; 0x18d
 1016bcc:	e3400106 	movt	r0, #262	; 0x106
 1016bd0:	eb0008d9 	bl	1018f3c <Xil_Assert>
 1016bd4:	e3a03001 	mov	r3, #1
 1016bd8:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, Mask);
}
 1016bdc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016be0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016be4:	e300118b 	movw	r1, #395	; 0x18b
 1016be8:	e3400106 	movt	r0, #262	; 0x106
 1016bec:	eb0008d2 	bl	1018f3c <Xil_Assert>
 1016bf0:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016bf4:	e3a02001 	mov	r2, #1
 1016bf8:	e340310c 	movt	r3, #268	; 0x10c
 1016bfc:	e5832000 	str	r2, [r3]
 1016c00:	e8bd8010 	pop	{r4, pc}

01016c04 <XGpioPs_IntrClearPin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClearPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1016c04:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1016c08:	e2505000 	subs	r5, r0, #0
{
 1016c0c:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1016c10:	0a00002a 	beq	1016cc0 <XGpioPs_IntrClearPin+0xbc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016c14:	e5950008 	ldr	r0, [r5, #8]
 1016c18:	e3013111 	movw	r3, #4369	; 0x1111
 1016c1c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016c20:	e3014f58 	movw	r4, #8024	; 0x1f58
 1016c24:	e340410c 	movt	r4, #268	; 0x10c
 1016c28:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016c2c:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016c30:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016c34:	1a000019 	bne	1016ca0 <XGpioPs_IntrClearPin+0x9c>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016c38:	e5953018 	ldr	r3, [r5, #24]
 1016c3c:	e1530001 	cmp	r3, r1
 1016c40:	9a00000e 	bls	1016c80 <XGpioPs_IntrClearPin+0x7c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016c44:	e6ef0071 	uxtb	r0, r1
 1016c48:	e28d2007 	add	r2, sp, #7
 1016c4c:	e28d1006 	add	r1, sp, #6
 1016c50:	ebfffc56 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	/* Clear the specified pending interrupts. */
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016c54:	e5dd2006 	ldrb	r2, [sp, #6]
 1016c58:	e3a03f86 	mov	r3, #536	; 0x218
 1016c5c:	e5951004 	ldr	r1, [r5, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	IntrReg &= ((u32)1 << PinNumber);
 1016c60:	e3a0c001 	mov	ip, #1
 1016c64:	e5dd0007 	ldrb	r0, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016c68:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1016c6c:	e7932001 	ldr	r2, [r3, r1]
	IntrReg &= ((u32)1 << PinNumber);
 1016c70:	e002201c 	and	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1016c74:	e7832001 	str	r2, [r3, r1]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, IntrReg);
}
 1016c78:	e28dd00c 	add	sp, sp, #12
 1016c7c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016c80:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016c84:	e30011b1 	movw	r1, #433	; 0x1b1
 1016c88:	e3400106 	movt	r0, #262	; 0x106
 1016c8c:	eb0008aa 	bl	1018f3c <Xil_Assert>
 1016c90:	e3a03001 	mov	r3, #1
 1016c94:	e5843000 	str	r3, [r4]
}
 1016c98:	e28dd00c 	add	sp, sp, #12
 1016c9c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016ca0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016ca4:	e3a01e1b 	mov	r1, #432	; 0x1b0
 1016ca8:	e3400106 	movt	r0, #262	; 0x106
 1016cac:	eb0008a2 	bl	1018f3c <Xil_Assert>
 1016cb0:	e3a03001 	mov	r3, #1
 1016cb4:	e5843000 	str	r3, [r4]
}
 1016cb8:	e28dd00c 	add	sp, sp, #12
 1016cbc:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016cc0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016cc4:	e30011af 	movw	r1, #431	; 0x1af
 1016cc8:	e3400106 	movt	r0, #262	; 0x106
 1016ccc:	eb00089a 	bl	1018f3c <Xil_Assert>
 1016cd0:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016cd4:	e3a02001 	mov	r2, #1
 1016cd8:	e340310c 	movt	r3, #268	; 0x10c
 1016cdc:	e5832000 	str	r2, [r3]
 1016ce0:	eaffffe4 	b	1016c78 <XGpioPs_IntrClearPin+0x74>

01016ce4 <XGpioPs_SetIntrType>:
*
*****************************************************************************/
void XGpioPs_SetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 IntrType,
			  u32 IntrPolarity, u32 IntrOnAny)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1016ce4:	e3500000 	cmp	r0, #0
{
 1016ce8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1016cec:	0a000025 	beq	1016d88 <XGpioPs_SetIntrType+0xa4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016cf0:	e590e008 	ldr	lr, [r0, #8]
 1016cf4:	e301c111 	movw	ip, #4369	; 0x1111
 1016cf8:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016cfc:	e3014f58 	movw	r4, #8024	; 0x1f58
 1016d00:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016d04:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1016d08:	e3a0c000 	mov	ip, #0
 1016d0c:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016d10:	1a00000e 	bne	1016d50 <XGpioPs_SetIntrType+0x6c>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016d14:	e5d0c01c 	ldrb	ip, [r0, #28]
 1016d18:	e15c0001 	cmp	ip, r1
 1016d1c:	9a000012 	bls	1016d6c <XGpioPs_SetIntrType+0x88>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016d20:	e1a01301 	lsl	r1, r1, #6
 1016d24:	e590e004 	ldr	lr, [r0, #4]
 1016d28:	e2814f87 	add	r4, r1, #540	; 0x21c
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTTYPE_OFFSET, IntrType);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016d2c:	e281ce22 	add	ip, r1, #544	; 0x220
 1016d30:	e784200e 	str	r2, [r4, lr]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTPOL_OFFSET, IntrPolarity);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016d34:	e2811f89 	add	r1, r1, #548	; 0x224
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016d38:	e5902004 	ldr	r2, [r0, #4]
 1016d3c:	e78c3002 	str	r3, [ip, r2]
 1016d40:	e59d2008 	ldr	r2, [sp, #8]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016d44:	e5903004 	ldr	r3, [r0, #4]
 1016d48:	e7812003 	str	r2, [r1, r3]
 1016d4c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016d50:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016d54:	e30011e5 	movw	r1, #485	; 0x1e5
 1016d58:	e3400106 	movt	r0, #262	; 0x106
 1016d5c:	eb000876 	bl	1018f3c <Xil_Assert>
 1016d60:	e3a03001 	mov	r3, #1
 1016d64:	e5843000 	str	r3, [r4]
 1016d68:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016d6c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016d70:	e30011e6 	movw	r1, #486	; 0x1e6
 1016d74:	e3400106 	movt	r0, #262	; 0x106
 1016d78:	eb00086f 	bl	1018f3c <Xil_Assert>
 1016d7c:	e3a03001 	mov	r3, #1
 1016d80:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAny);
}
 1016d84:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016d88:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016d8c:	e3a01f79 	mov	r1, #484	; 0x1e4
 1016d90:	e3400106 	movt	r0, #262	; 0x106
 1016d94:	eb000868 	bl	1018f3c <Xil_Assert>
 1016d98:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016d9c:	e3a02001 	mov	r2, #1
 1016da0:	e340310c 	movt	r3, #268	; 0x10c
 1016da4:	e5832000 	str	r2, [r3]
 1016da8:	e8bd8010 	pop	{r4, pc}

01016dac <XGpioPs_GetIntrType>:
*****************************************************************************/
void XGpioPs_GetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 *IntrType,
			  u32 *IntrPolarity, u32 *IntrOnAny)

{
	Xil_AssertVoid(InstancePtr != NULL);
 1016dac:	e3500000 	cmp	r0, #0
{
 1016db0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1016db4:	0a000028 	beq	1016e5c <XGpioPs_GetIntrType+0xb0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016db8:	e590e008 	ldr	lr, [r0, #8]
 1016dbc:	e301c111 	movw	ip, #4369	; 0x1111
 1016dc0:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016dc4:	e3014f58 	movw	r4, #8024	; 0x1f58
 1016dc8:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016dcc:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1016dd0:	e3a0c000 	mov	ip, #0
 1016dd4:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016dd8:	1a000011 	bne	1016e24 <XGpioPs_GetIntrType+0x78>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016ddc:	e5d0c01c 	ldrb	ip, [r0, #28]
 1016de0:	e15c0001 	cmp	ip, r1
 1016de4:	9a000015 	bls	1016e40 <XGpioPs_GetIntrType+0x94>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016de8:	e590e004 	ldr	lr, [r0, #4]
 1016dec:	e1a01301 	lsl	r1, r1, #6
 1016df0:	e2814f87 	add	r4, r1, #540	; 0x21c
				     ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				     XGPIOPS_INTTYPE_OFFSET);

	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016df4:	e281ce22 	add	ip, r1, #544	; 0x220
	return *(volatile u32 *) Addr;
 1016df8:	e794e00e 	ldr	lr, [r4, lr]
					 ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					 XGPIOPS_INTPOL_OFFSET);

	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016dfc:	e2811f89 	add	r1, r1, #548	; 0x224
	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016e00:	e582e000 	str	lr, [r2]
	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016e04:	e5902004 	ldr	r2, [r0, #4]
 1016e08:	e79c2002 	ldr	r2, [ip, r2]
 1016e0c:	e5832000 	str	r2, [r3]
	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016e10:	e5903004 	ldr	r3, [r0, #4]
 1016e14:	e59d2008 	ldr	r2, [sp, #8]
 1016e18:	e7913003 	ldr	r3, [r1, r3]
 1016e1c:	e5823000 	str	r3, [r2]
 1016e20:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016e24:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016e28:	e3001219 	movw	r1, #537	; 0x219
 1016e2c:	e3400106 	movt	r0, #262	; 0x106
 1016e30:	eb000841 	bl	1018f3c <Xil_Assert>
 1016e34:	e3a03001 	mov	r3, #1
 1016e38:	e5843000 	str	r3, [r4]
 1016e3c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1016e40:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016e44:	e300121a 	movw	r1, #538	; 0x21a
 1016e48:	e3400106 	movt	r0, #262	; 0x106
 1016e4c:	eb00083a 	bl	1018f3c <Xil_Assert>
 1016e50:	e3a03001 	mov	r3, #1
 1016e54:	e5843000 	str	r3, [r4]
				      ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				      XGPIOPS_INTANY_OFFSET);
}
 1016e58:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016e5c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016e60:	e3a01f86 	mov	r1, #536	; 0x218
 1016e64:	e3400106 	movt	r0, #262	; 0x106
 1016e68:	eb000833 	bl	1018f3c <Xil_Assert>
 1016e6c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016e70:	e3a02001 	mov	r2, #1
 1016e74:	e340310c 	movt	r3, #268	; 0x10c
 1016e78:	e5832000 	str	r2, [r3]
 1016e7c:	e8bd8010 	pop	{r4, pc}

01016e80 <XGpioPs_SetIntrTypePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_SetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin, u8 IrqType)
{
 1016e80:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrPolReg;
	u32 IntrOnAnyReg;
	u8 Bank;
	u8 PinNumber;

	Xil_AssertVoid(InstancePtr != NULL);
 1016e84:	e2505000 	subs	r5, r0, #0
{
 1016e88:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1016e8c:	0a000055 	beq	1016fe8 <XGpioPs_SetIntrTypePin+0x168>
 1016e90:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016e94:	e5952008 	ldr	r2, [r5, #8]
 1016e98:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016e9c:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016ea0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016ea4:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016ea8:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016eac:	e3a03000 	mov	r3, #0
 1016eb0:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016eb4:	1a000019 	bne	1016f20 <XGpioPs_SetIntrTypePin+0xa0>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016eb8:	e5953018 	ldr	r3, [r5, #24]
 1016ebc:	e1530001 	cmp	r3, r1
 1016ec0:	9a00001e 	bls	1016f40 <XGpioPs_SetIntrTypePin+0xc0>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 1016ec4:	e3560004 	cmp	r6, #4
 1016ec8:	8a00003e 	bhi	1016fc8 <XGpioPs_SetIntrTypePin+0x148>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1016ecc:	e6ef0071 	uxtb	r0, r1
 1016ed0:	e28d2007 	add	r2, sp, #7
 1016ed4:	e28d1006 	add	r1, sp, #6
 1016ed8:	ebfffbb4 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016edc:	e5dd3006 	ldrb	r3, [sp, #6]

	IntrOnAnyReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
					((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					XGPIOPS_INTANY_OFFSET);

	switch (IrqType) {
 1016ee0:	e2466001 	sub	r6, r6, #1
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016ee4:	e5952004 	ldr	r2, [r5, #4]
		case XGPIOPS_IRQ_TYPE_LEVEL_HIGH:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
			break;
		case XGPIOPS_IRQ_TYPE_LEVEL_LOW:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1016ee8:	e3a0e001 	mov	lr, #1
 1016eec:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1016ef0:	e1a03303 	lsl	r3, r3, #6
 1016ef4:	e0832002 	add	r2, r3, r2
 1016ef8:	e592121c 	ldr	r1, [r2, #540]	; 0x21c
 1016efc:	e5920220 	ldr	r0, [r2, #544]	; 0x220
 1016f00:	e592c224 	ldr	ip, [r2, #548]	; 0x224
	switch (IrqType) {
 1016f04:	e3560003 	cmp	r6, #3
 1016f08:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
 1016f0c:	ea00003e 	b	101700c <XGpioPs_SetIntrTypePin+0x18c>
 1016f10:	01016fa0 	.word	0x01016fa0
 1016f14:	01016f90 	.word	0x01016f90
 1016f18:	01016f60 	.word	0x01016f60
 1016f1c:	01016fb8 	.word	0x01016fb8
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016f20:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016f24:	e3001249 	movw	r1, #585	; 0x249
 1016f28:	e3400106 	movt	r0, #262	; 0x106
 1016f2c:	eb000802 	bl	1018f3c <Xil_Assert>
 1016f30:	e3a03001 	mov	r3, #1
 1016f34:	e5843000 	str	r3, [r4]
			  XGPIOPS_INTPOL_OFFSET, IntrPolReg);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAnyReg);
}
 1016f38:	e28dd008 	add	sp, sp, #8
 1016f3c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1016f40:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016f44:	e300124a 	movw	r1, #586	; 0x24a
 1016f48:	e3400106 	movt	r0, #262	; 0x106
 1016f4c:	eb0007fa 	bl	1018f3c <Xil_Assert>
 1016f50:	e3a03001 	mov	r3, #1
 1016f54:	e5843000 	str	r3, [r4]
}
 1016f58:	e28dd008 	add	sp, sp, #8
 1016f5c:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1016f60:	e1a0e41e 	lsl	lr, lr, r4
 1016f64:	e1c1100e 	bic	r1, r1, lr
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1016f68:	e180000e 	orr	r0, r0, lr
	*LocalAddr = Value;
 1016f6c:	e582121c 	str	r1, [r2, #540]	; 0x21c
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016f70:	e2831e22 	add	r1, r3, #544	; 0x220
 1016f74:	e5952004 	ldr	r2, [r5, #4]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1016f78:	e2833f89 	add	r3, r3, #548	; 0x224
 1016f7c:	e7810002 	str	r0, [r1, r2]
 1016f80:	e5952004 	ldr	r2, [r5, #4]
 1016f84:	e783c002 	str	ip, [r3, r2]
}
 1016f88:	e28dd008 	add	sp, sp, #8
 1016f8c:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1016f90:	e1a0e41e 	lsl	lr, lr, r4
 1016f94:	e18e1001 	orr	r1, lr, r1
			IntrOnAnyReg |= ((u32)1 << (u32)PinNumber);
 1016f98:	e18cc00e 	orr	ip, ip, lr
			break;
 1016f9c:	eafffff2 	b	1016f6c <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1016fa0:	e1a0e41e 	lsl	lr, lr, r4
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1016fa4:	e1e0400e 	mvn	r4, lr
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1016fa8:	e18e1001 	orr	r1, lr, r1
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1016fac:	e0000004 	and	r0, r0, r4
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 1016fb0:	e00cc004 	and	ip, ip, r4
			break;
 1016fb4:	eaffffec 	b	1016f6c <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1016fb8:	e1e0e41e 	mvn	lr, lr, lsl r4
 1016fbc:	e001100e 	and	r1, r1, lr
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1016fc0:	e000000e 	and	r0, r0, lr
			break;
 1016fc4:	eaffffe8 	b	1016f6c <XGpioPs_SetIntrTypePin+0xec>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 1016fc8:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016fcc:	e300124b 	movw	r1, #587	; 0x24b
 1016fd0:	e3400106 	movt	r0, #262	; 0x106
 1016fd4:	eb0007d8 	bl	1018f3c <Xil_Assert>
 1016fd8:	e3a03001 	mov	r3, #1
 1016fdc:	e5843000 	str	r3, [r4]
}
 1016fe0:	e28dd008 	add	sp, sp, #8
 1016fe4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016fe8:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1016fec:	e3a01f92 	mov	r1, #584	; 0x248
 1016ff0:	e3400106 	movt	r0, #262	; 0x106
 1016ff4:	eb0007d0 	bl	1018f3c <Xil_Assert>
 1016ff8:	e3013f58 	movw	r3, #8024	; 0x1f58
 1016ffc:	e3a02001 	mov	r2, #1
 1017000:	e340310c 	movt	r3, #268	; 0x10c
 1017004:	e5832000 	str	r2, [r3]
 1017008:	eaffffca 	b	1016f38 <XGpioPs_SetIntrTypePin+0xb8>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 101700c:	e1a0e41e 	lsl	lr, lr, r4
 1017010:	e18e1001 	orr	r1, lr, r1
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1017014:	e180000e 	orr	r0, r0, lr
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 1017018:	e1ccc00e 	bic	ip, ip, lr
			break;
 101701c:	eaffffd2 	b	1016f6c <XGpioPs_SetIntrTypePin+0xec>

01017020 <XGpioPs_GetIntrTypePin>:
* @note		Use XGPIOPS_IRQ_TYPE_* defined in xgpiops.h for the IRQ type
*		returned by this function.
*
*****************************************************************************/
u8 XGpioPs_GetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1017020:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrOnAny;
	u8 Bank;
	u8 PinNumber;
	u8 IrqType;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1017024:	e2506000 	subs	r6, r0, #0
{
 1017028:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 101702c:	0a000034 	beq	1017104 <XGpioPs_GetIntrTypePin+0xe4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017030:	e5962008 	ldr	r2, [r6, #8]
 1017034:	e3013111 	movw	r3, #4369	; 0x1111
 1017038:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101703c:	e3015f58 	movw	r5, #8024	; 0x1f58
 1017040:	e340510c 	movt	r5, #268	; 0x10c
 1017044:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017048:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101704c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017050:	1a00001e 	bne	10170d0 <XGpioPs_GetIntrTypePin+0xb0>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1017054:	e5963018 	ldr	r3, [r6, #24]
 1017058:	e1530001 	cmp	r3, r1
 101705c:	9a000012 	bls	10170ac <XGpioPs_GetIntrTypePin+0x8c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1017060:	e6ef0071 	uxtb	r0, r1
 1017064:	e28d2007 	add	r2, sp, #7
 1017068:	e28d1006 	add	r1, sp, #6
 101706c:	ebfffb4f 	bl	1015db0 <XGpioPs_GetBankPin>
#endif

	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1017070:	e5dd2006 	ldrb	r2, [sp, #6]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1017074:	e3a00001 	mov	r0, #1
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1017078:	e5963004 	ldr	r3, [r6, #4]
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 101707c:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1017080:	e0833302 	add	r3, r3, r2, lsl #6
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1017084:	e1a04410 	lsl	r4, r0, r4
	return *(volatile u32 *) Addr;
 1017088:	e593221c 	ldr	r2, [r3, #540]	; 0x21c

	if (IntrType == ((u32)1 << PinNumber)) {
 101708c:	e1d42002 	bics	r2, r4, r2
 1017090:	0a000011 	beq	10170dc <XGpioPs_GetIntrTypePin+0xbc>
 1017094:	e5933220 	ldr	r3, [r3, #544]	; 0x220

		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTPOL_OFFSET) & ((u32)1 << PinNumber);

		if (IntrPol == ((u32)1 << PinNumber)) {
 1017098:	e1d43003 	bics	r3, r4, r3
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_HIGH;
		} else {
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_LOW;
 101709c:	03a00003 	moveq	r0, #3
 10170a0:	13a00004 	movne	r0, #4
		}
	}

	return IrqType;
}
 10170a4:	e28dd008 	add	sp, sp, #8
 10170a8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10170ac:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10170b0:	e30012a3 	movw	r1, #675	; 0x2a3
 10170b4:	e3400106 	movt	r0, #262	; 0x106
 10170b8:	eb00079f 	bl	1018f3c <Xil_Assert>
 10170bc:	e3a03001 	mov	r3, #1
 10170c0:	e1a00004 	mov	r0, r4
 10170c4:	e5853000 	str	r3, [r5]
}
 10170c8:	e28dd008 	add	sp, sp, #8
 10170cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10170d0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10170d4:	e30012a2 	movw	r1, #674	; 0x2a2
 10170d8:	eafffff5 	b	10170b4 <XGpioPs_GetIntrTypePin+0x94>
 10170dc:	e5932224 	ldr	r2, [r3, #548]	; 0x224
 10170e0:	e5930220 	ldr	r0, [r3, #544]	; 0x220
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 10170e4:	e1d43002 	bics	r3, r4, r2
		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10170e8:	e0000004 	and	r0, r0, r4
			IrqType = XGPIOPS_IRQ_TYPE_EDGE_BOTH;
 10170ec:	03a00002 	moveq	r0, #2
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 10170f0:	0affffeb 	beq	10170a4 <XGpioPs_GetIntrTypePin+0x84>
	Xil_AssertNonvoid(InstancePtr != NULL);
 10170f4:	e0540000 	subs	r0, r4, r0
 10170f8:	13a00001 	movne	r0, #1
}
 10170fc:	e28dd008 	add	sp, sp, #8
 1017100:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017104:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1017108:	e30012a1 	movw	r1, #673	; 0x2a1
 101710c:	e3400106 	movt	r0, #262	; 0x106
 1017110:	eb000789 	bl	1018f3c <Xil_Assert>
 1017114:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017118:	e3a02001 	mov	r2, #1
 101711c:	e340310c 	movt	r3, #268	; 0x10c
 1017120:	e1a00006 	mov	r0, r6
 1017124:	e5832000 	str	r2, [r3]
 1017128:	eaffffdd 	b	10170a4 <XGpioPs_GetIntrTypePin+0x84>

0101712c <XGpioPs_SetCallbackHandler>:
*
******************************************************************************/
void XGpioPs_SetCallbackHandler(XGpioPs *InstancePtr, void *CallBackRef,
				 XGpioPs_Handler FuncPointer)
{
	Xil_AssertVoid(InstancePtr != NULL);
 101712c:	e3500000 	cmp	r0, #0
{
 1017130:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1017134:	0a000014 	beq	101718c <XGpioPs_SetCallbackHandler+0x60>
 1017138:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(FuncPointer != NULL);
 101713c:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1017140:	e340410c 	movt	r4, #268	; 0x10c
 1017144:	e3a03000 	mov	r3, #0
 1017148:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 101714c:	0a000017 	beq	10171b0 <XGpioPs_SetCallbackHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017150:	e590c008 	ldr	ip, [r0, #8]
 1017154:	e3013111 	movw	r3, #4369	; 0x1111
 1017158:	e3413111 	movt	r3, #4369	; 0x1111
 101715c:	e15c0003 	cmp	ip, r3
 1017160:	1a000002 	bne	1017170 <XGpioPs_SetCallbackHandler+0x44>

	InstancePtr->Handler = FuncPointer;
 1017164:	e580200c 	str	r2, [r0, #12]
	InstancePtr->CallBackRef = CallBackRef;
 1017168:	e5801010 	str	r1, [r0, #16]
 101716c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017170:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1017174:	e30012ea 	movw	r1, #746	; 0x2ea
 1017178:	e3400106 	movt	r0, #262	; 0x106
 101717c:	eb00076e 	bl	1018f3c <Xil_Assert>
 1017180:	e3a03001 	mov	r3, #1
 1017184:	e5843000 	str	r3, [r4]
}
 1017188:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101718c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1017190:	e3a01fba 	mov	r1, #744	; 0x2e8
 1017194:	e3400106 	movt	r0, #262	; 0x106
 1017198:	eb000767 	bl	1018f3c <Xil_Assert>
 101719c:	e3013f58 	movw	r3, #8024	; 0x1f58
 10171a0:	e3a02001 	mov	r2, #1
 10171a4:	e340310c 	movt	r3, #268	; 0x10c
 10171a8:	e5832000 	str	r2, [r3]
 10171ac:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 10171b0:	e30b0e50 	movw	r0, #48720	; 0xbe50
 10171b4:	e30012e9 	movw	r1, #745	; 0x2e9
 10171b8:	e3400106 	movt	r0, #262	; 0x106
 10171bc:	eb00075e 	bl	1018f3c <Xil_Assert>
 10171c0:	e3a03001 	mov	r3, #1
 10171c4:	e5843000 	str	r3, [r4]
 10171c8:	e8bd8010 	pop	{r4, pc}

010171cc <XGpioPs_IntrHandler>:
* @note		This function does not save and restore the processor context
*		such that the user must provide this processing.
*
******************************************************************************/
void XGpioPs_IntrHandler(const XGpioPs *InstancePtr)
{
 10171cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	u8 Bank;
	u32 IntrStatus;
	u32 IntrEnabled;

	Xil_AssertVoid(InstancePtr != NULL);
 10171d0:	e2506000 	subs	r6, r0, #0
 10171d4:	0a00002c 	beq	101728c <XGpioPs_IntrHandler+0xc0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10171d8:	e5962008 	ldr	r2, [r6, #8]
 10171dc:	e3013111 	movw	r3, #4369	; 0x1111
 10171e0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10171e4:	e3014f58 	movw	r4, #8024	; 0x1f58
 10171e8:	e340410c 	movt	r4, #268	; 0x10c
 10171ec:	e3a07000 	mov	r7, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10171f0:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10171f4:	e5847000 	str	r7, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10171f8:	1a00001c 	bne	1017270 <XGpioPs_IntrHandler+0xa4>

	for (Bank = 0U; Bank < InstancePtr->MaxBanks; Bank++) {
 10171fc:	e5d6301c 	ldrb	r3, [r6, #28]
 1017200:	e1530007 	cmp	r3, r7
 1017204:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 1017208:	e1a04007 	mov	r4, r7
 101720c:	ea000003 	b	1017220 <XGpioPs_IntrHandler+0x54>
 1017210:	e5d6301c 	ldrb	r3, [r6, #28]
 1017214:	e6ef4077 	uxtb	r4, r7
 1017218:	e1530004 	cmp	r3, r4
 101721c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
			if((Bank == XGPIOPS_ONE) || (Bank == XGPIOPS_TWO)) {
				continue;
			}
		}
#endif
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1017220:	e1a01004 	mov	r1, r4
 1017224:	e1a00006 	mov	r0, r6
 1017228:	ebfffde2 	bl	10169b8 <XGpioPs_IntrGetStatus>
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 101722c:	e1a01004 	mov	r1, r4
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1017230:	e1a05000 	mov	r5, r0
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1017234:	e1a00006 	mov	r0, r6
 1017238:	e2877001 	add	r7, r7, #1
 101723c:	ebfffd74 	bl	1016814 <XGpioPs_IntrGetEnabled>
		if ((IntrStatus & IntrEnabled) != (u32)0) {
 1017240:	e0155000 	ands	r5, r5, r0
 1017244:	0afffff1 	beq	1017210 <XGpioPs_IntrHandler+0x44>
			XGpioPs_IntrClear(InstancePtr, Bank,
 1017248:	e1a02005 	mov	r2, r5
 101724c:	e1a01004 	mov	r1, r4
 1017250:	e1a00006 	mov	r0, r6
 1017254:	ebfffe3f 	bl	1016b58 <XGpioPs_IntrClear>
					(IntrStatus & IntrEnabled));
			InstancePtr->Handler(InstancePtr->
 1017258:	e1a02005 	mov	r2, r5
 101725c:	e1a01004 	mov	r1, r4
 1017260:	e596300c 	ldr	r3, [r6, #12]
 1017264:	e5960010 	ldr	r0, [r6, #16]
 1017268:	e12fff33 	blx	r3
 101726c:	eaffffe7 	b	1017210 <XGpioPs_IntrHandler+0x44>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017270:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1017274:	e3a01fc2 	mov	r1, #776	; 0x308
 1017278:	e3400106 	movt	r0, #262	; 0x106
 101727c:	eb00072e 	bl	1018f3c <Xil_Assert>
 1017280:	e3a03001 	mov	r3, #1
 1017284:	e5843000 	str	r3, [r4]
 1017288:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101728c:	e30b0e50 	movw	r0, #48720	; 0xbe50
 1017290:	e3001307 	movw	r1, #775	; 0x307
 1017294:	e3400106 	movt	r0, #262	; 0x106
 1017298:	eb000727 	bl	1018f3c <Xil_Assert>
 101729c:	e3013f58 	movw	r3, #8024	; 0x1f58
 10172a0:	e3a02001 	mov	r2, #1
 10172a4:	e340310c 	movt	r3, #268	; 0x10c
 10172a8:	e5832000 	str	r2, [r3]
 10172ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010172b0 <StubHandler>:
{
	(void) CallBackRef;
	(void) Bank;
	(void) Status;

	Xil_AssertVoidAlways();
 10172b0:	e30b0e50 	movw	r0, #48720	; 0xbe50
{
 10172b4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 10172b8:	e3001337 	movw	r1, #823	; 0x337
 10172bc:	e3400106 	movt	r0, #262	; 0x106
 10172c0:	eb00071d 	bl	1018f3c <Xil_Assert>
 10172c4:	e3013f58 	movw	r3, #8024	; 0x1f58
 10172c8:	e3a02001 	mov	r2, #1
 10172cc:	e340310c 	movt	r3, #268	; 0x10c
 10172d0:	e5832000 	str	r2, [r3]
}
 10172d4:	e8bd8010 	pop	{r4, pc}

010172d8 <XScuGic_InterruptHandler>:
*
* @note		None.
*
******************************************************************************/
void XScuGic_InterruptHandler(XScuGic *InstancePtr)
{
 10172d8:	e92d4070 	push	{r4, r5, r6, lr}
#endif
	    XScuGic_VectorTableEntry *TablePtr;

	    /* Assert that the pointer to the instance is valid
	     */
	    Xil_AssertVoid(InstancePtr != NULL);
 10172dc:	e2505000 	subs	r5, r0, #0
 10172e0:	0a000011 	beq	101732c <XScuGic_InterruptHandler+0x54>
	     * clear the interrupt in the GIC.
	     */
#if defined (GICv3)
	    InterruptID = XScuGic_get_IntID();
#else
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 10172e4:	e5953000 	ldr	r3, [r5]
	    Xil_AssertVoid(InstancePtr != NULL);
 10172e8:	e3012f58 	movw	r2, #8024	; 0x1f58
 10172ec:	e340210c 	movt	r2, #268	; 0x10c
 10172f0:	e3a01000 	mov	r1, #0
 10172f4:	e5821000 	str	r1, [r2]
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 10172f8:	e5932004 	ldr	r2, [r3, #4]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 10172fc:	e592400c 	ldr	r4, [r2, #12]
	    InterruptID = IntIDFull & XSCUGIC_ACK_INTID_MASK;
 1017300:	e7e91054 	ubfx	r1, r4, #0, #10
#endif
	    if (XSCUGIC_MAX_NUM_INTR_INPUTS <= InterruptID) {
 1017304:	e351005e 	cmp	r1, #94	; 0x5e
 1017308:	8a000005 	bhi	1017324 <XScuGic_InterruptHandler+0x4c>
	     * based on the IRQSource. A software trigger is cleared by
	     *.the ACK.
	     */
	    TablePtr = &(InstancePtr->Config->HandlerTable[InterruptID]);
		if (TablePtr != NULL) {
			TablePtr->Handler(TablePtr->CallBackRef);
 101730c:	e0833181 	add	r3, r3, r1, lsl #3
 1017310:	e593200c 	ldr	r2, [r3, #12]
 1017314:	e5930010 	ldr	r0, [r3, #16]
 1017318:	e12fff32 	blx	r2
 101731c:	e5953000 	ldr	r3, [r5]
 1017320:	e5932004 	ldr	r2, [r3, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1017324:	e5824010 	str	r4, [r2, #16]
#endif
	    /*
	     * Return from the interrupt. Change security domains
	     * could happen here.
	     */
}
 1017328:	e8bd8070 	pop	{r4, r5, r6, pc}
	    Xil_AssertVoid(InstancePtr != NULL);
 101732c:	e30b0e60 	movw	r0, #48736	; 0xbe60
 1017330:	e3a0107d 	mov	r1, #125	; 0x7d
 1017334:	e3400106 	movt	r0, #262	; 0x106
 1017338:	eb0006ff 	bl	1018f3c <Xil_Assert>
 101733c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017340:	e3a02001 	mov	r2, #1
 1017344:	e340310c 	movt	r3, #268	; 0x10c
 1017348:	e5832000 	str	r2, [r3]
 101734c:	e8bd8070 	pop	{r4, r5, r6, pc}

01017350 <StubHandler>:
static void StubHandler(void *CallBackRef)
{
	/*
	 * verify that the inputs are valid
	 */
	Xil_AssertVoid(CallBackRef != NULL);
 1017350:	e3500000 	cmp	r0, #0
 1017354:	0a000007 	beq	1017378 <StubHandler+0x28>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1017358:	e5903008 	ldr	r3, [r0, #8]
	Xil_AssertVoid(CallBackRef != NULL);
 101735c:	e3012f58 	movw	r2, #8024	; 0x1f58
 1017360:	e340210c 	movt	r2, #268	; 0x10c
 1017364:	e3a01000 	mov	r1, #0
 1017368:	e5821000 	str	r1, [r2]
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 101736c:	e2833001 	add	r3, r3, #1
 1017370:	e5803008 	str	r3, [r0, #8]
 1017374:	e12fff1e 	bx	lr
	Xil_AssertVoid(CallBackRef != NULL);
 1017378:	e30b0e70 	movw	r0, #48752	; 0xbe70
{
 101737c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CallBackRef != NULL);
 1017380:	e30012e5 	movw	r1, #741	; 0x2e5
 1017384:	e3400106 	movt	r0, #262	; 0x106
 1017388:	eb0006eb 	bl	1018f3c <Xil_Assert>
 101738c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017390:	e3a02001 	mov	r2, #1
 1017394:	e340310c 	movt	r3, #268	; 0x10c
 1017398:	e5832000 	str	r2, [r3]
}
 101739c:	e8bd8010 	pop	{r4, pc}

010173a0 <XScuGic_Connect>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 10173a0:	e3500000 	cmp	r0, #0
{
 10173a4:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10173a8:	0a000021 	beq	1017434 <XScuGic_Connect+0x94>
 10173ac:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10173b0:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertNonvoid(InstancePtr != NULL);
 10173b4:	e340410c 	movt	r4, #268	; 0x10c
 10173b8:	e3a0c000 	mov	ip, #0
 10173bc:	e584c000 	str	ip, [r4]
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10173c0:	8a000013 	bhi	1017414 <XScuGic_Connect+0x74>
	Xil_AssertNonvoid(Handler != NULL);
 10173c4:	e3520000 	cmp	r2, #0
 10173c8:	0a000022 	beq	1017458 <XScuGic_Connect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10173cc:	e590e004 	ldr	lr, [r0, #4]
 10173d0:	e301c111 	movw	ip, #4369	; 0x1111
 10173d4:	e341c111 	movt	ip, #4369	; 0x1111
 10173d8:	e15e000c 	cmp	lr, ip
 10173dc:	1a000004 	bne	10173f4 <XScuGic_Connect+0x54>
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)Handler;
 10173e0:	e5900000 	ldr	r0, [r0]
 10173e4:	e0801181 	add	r1, r0, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = CallBackRef;
 10173e8:	e1c120fc 	strd	r2, [r1, #12]
}
 10173ec:	e3a00000 	mov	r0, #0
 10173f0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10173f4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10173f8:	e30011e1 	movw	r1, #481	; 0x1e1
 10173fc:	e3400106 	movt	r0, #262	; 0x106
 1017400:	eb0006cd 	bl	1018f3c <Xil_Assert>
 1017404:	e3a03001 	mov	r3, #1
}
 1017408:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101740c:	e5843000 	str	r3, [r4]
}
 1017410:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017414:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017418:	e30011df 	movw	r1, #479	; 0x1df
 101741c:	e3400106 	movt	r0, #262	; 0x106
 1017420:	eb0006c5 	bl	1018f3c <Xil_Assert>
 1017424:	e3a03001 	mov	r3, #1
}
 1017428:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 101742c:	e5843000 	str	r3, [r4]
}
 1017430:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017434:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017438:	e30011de 	movw	r1, #478	; 0x1de
 101743c:	e3400106 	movt	r0, #262	; 0x106
 1017440:	eb0006bd 	bl	1018f3c <Xil_Assert>
 1017444:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017448:	e3a02001 	mov	r2, #1
 101744c:	e340310c 	movt	r3, #268	; 0x10c
 1017450:	e5832000 	str	r2, [r3]
 1017454:	eaffffe4 	b	10173ec <XScuGic_Connect+0x4c>
	Xil_AssertNonvoid(Handler != NULL);
 1017458:	e30b0e70 	movw	r0, #48752	; 0xbe70
 101745c:	e3a01e1e 	mov	r1, #480	; 0x1e0
 1017460:	e3400106 	movt	r0, #262	; 0x106
 1017464:	eb0006b4 	bl	1018f3c <Xil_Assert>
 1017468:	e3a03001 	mov	r3, #1
 101746c:	e5843000 	str	r3, [r4]
 1017470:	eaffffdd 	b	10173ec <XScuGic_Connect+0x4c>

01017474 <XScuGic_Disconnect>:
	Xil_AssertVoid(InstancePtr != NULL);
 1017474:	e3500000 	cmp	r0, #0
{
 1017478:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101747c:	0a000026 	beq	101751c <XScuGic_Disconnect+0xa8>
 1017480:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017484:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1017488:	e340410c 	movt	r4, #268	; 0x10c
 101748c:	e3a03000 	mov	r3, #0
 1017490:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017494:	8a000019 	bhi	1017500 <XScuGic_Disconnect+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017498:	e5902004 	ldr	r2, [r0, #4]
 101749c:	e3013111 	movw	r3, #4369	; 0x1111
 10174a0:	e3413111 	movt	r3, #4369	; 0x1111
 10174a4:	e1520003 	cmp	r2, r3
 10174a8:	1a00000d 	bne	10174e4 <XScuGic_Disconnect+0x70>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10174ac:	e5903000 	ldr	r3, [r0]
	Mask = 0x00000001U << (Int_Id % 32U);
 10174b0:	e201201f 	and	r2, r1, #31
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10174b4:	e1a0c2a1 	lsr	ip, r1, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 10174b8:	e3a0e001 	mov	lr, #1
 10174bc:	e1a0e21e 	lsl	lr, lr, r2
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10174c0:	e3072350 	movw	r2, #29520	; 0x7350
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10174c4:	e5934008 	ldr	r4, [r3, #8]
 10174c8:	e28cc060 	add	ip, ip, #96	; 0x60
 10174cc:	e0831181 	add	r1, r3, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10174d0:	e3402101 	movt	r2, #257	; 0x101
 10174d4:	e784e10c 	str	lr, [r4, ip, lsl #2]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 10174d8:	e5810010 	str	r0, [r1, #16]
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10174dc:	e581200c 	str	r2, [r1, #12]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 10174e0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10174e4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10174e8:	e3001206 	movw	r1, #518	; 0x206
 10174ec:	e3400106 	movt	r0, #262	; 0x106
 10174f0:	eb000691 	bl	1018f3c <Xil_Assert>
 10174f4:	e3a03001 	mov	r3, #1
 10174f8:	e5843000 	str	r3, [r4]
}
 10174fc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017500:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017504:	e3001205 	movw	r1, #517	; 0x205
 1017508:	e3400106 	movt	r0, #262	; 0x106
 101750c:	eb00068a 	bl	1018f3c <Xil_Assert>
 1017510:	e3a03001 	mov	r3, #1
 1017514:	e5843000 	str	r3, [r4]
 1017518:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101751c:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017520:	e3a01f81 	mov	r1, #516	; 0x204
 1017524:	e3400106 	movt	r0, #262	; 0x106
 1017528:	eb000683 	bl	1018f3c <Xil_Assert>
 101752c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017530:	e3a02001 	mov	r2, #1
 1017534:	e340310c 	movt	r3, #268	; 0x10c
 1017538:	e5832000 	str	r2, [r3]
 101753c:	e8bd8010 	pop	{r4, pc}

01017540 <XScuGic_SoftwareIntr>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017540:	e3500000 	cmp	r0, #0
{
 1017544:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017548:	0a000025 	beq	10175e4 <XScuGic_SoftwareIntr+0xa4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101754c:	e590c004 	ldr	ip, [r0, #4]
 1017550:	e3013111 	movw	r3, #4369	; 0x1111
 1017554:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017558:	e3014f58 	movw	r4, #8024	; 0x1f58
 101755c:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017560:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017564:	e3a03000 	mov	r3, #0
 1017568:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101756c:	1a00000c 	bne	10175a4 <XScuGic_SoftwareIntr+0x64>
	Xil_AssertNonvoid(Int_Id <= 15U);
 1017570:	e351000f 	cmp	r1, #15
 1017574:	8a000012 	bhi	10175c4 <XScuGic_SoftwareIntr+0x84>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1017578:	e35200ff 	cmp	r2, #255	; 0xff
 101757c:	8a000021 	bhi	1017608 <XScuGic_SoftwareIntr+0xc8>
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1017580:	e5900000 	ldr	r0, [r0]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 1017584:	e1811802 	orr	r1, r1, r2, lsl #16
 1017588:	e3a0300f 	mov	r3, #15
 101758c:	e34030ff 	movt	r3, #255	; 0xff
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1017590:	e5902008 	ldr	r2, [r0, #8]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 1017594:	e0033001 	and	r3, r3, r1
 1017598:	e5823f00 	str	r3, [r2, #3840]	; 0xf00
}
 101759c:	e3a00000 	mov	r0, #0
 10175a0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10175a4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10175a8:	e30012b3 	movw	r1, #691	; 0x2b3
 10175ac:	e3400106 	movt	r0, #262	; 0x106
 10175b0:	eb000661 	bl	1018f3c <Xil_Assert>
 10175b4:	e3a03001 	mov	r3, #1
}
 10175b8:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10175bc:	e5843000 	str	r3, [r4]
}
 10175c0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id <= 15U);
 10175c4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10175c8:	e3a01fad 	mov	r1, #692	; 0x2b4
 10175cc:	e3400106 	movt	r0, #262	; 0x106
 10175d0:	eb000659 	bl	1018f3c <Xil_Assert>
 10175d4:	e3a03001 	mov	r3, #1
}
 10175d8:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id <= 15U);
 10175dc:	e5843000 	str	r3, [r4]
}
 10175e0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10175e4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10175e8:	e30012b2 	movw	r1, #690	; 0x2b2
 10175ec:	e3400106 	movt	r0, #262	; 0x106
 10175f0:	eb000651 	bl	1018f3c <Xil_Assert>
 10175f4:	e3013f58 	movw	r3, #8024	; 0x1f58
 10175f8:	e3a02001 	mov	r2, #1
 10175fc:	e340310c 	movt	r3, #268	; 0x10c
 1017600:	e5832000 	str	r2, [r3]
 1017604:	eaffffe4 	b	101759c <XScuGic_SoftwareIntr+0x5c>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1017608:	e30b0e70 	movw	r0, #48752	; 0xbe70
 101760c:	e30012b5 	movw	r1, #693	; 0x2b5
 1017610:	e3400106 	movt	r0, #262	; 0x106
 1017614:	eb000648 	bl	1018f3c <Xil_Assert>
 1017618:	e3a03001 	mov	r3, #1
 101761c:	e5843000 	str	r3, [r4]
 1017620:	eaffffdd 	b	101759c <XScuGic_SoftwareIntr+0x5c>

01017624 <XScuGic_SetPriorityTriggerType>:
	u32 Index;
#endif
	u8 LocalPriority;
	LocalPriority = Priority;

	Xil_AssertVoid(InstancePtr != NULL);
 1017624:	e3500000 	cmp	r0, #0
{
 1017628:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101762c:	0a000033 	beq	1017700 <XScuGic_SetPriorityTriggerType+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017630:	e590e004 	ldr	lr, [r0, #4]
 1017634:	e301c111 	movw	ip, #4369	; 0x1111
 1017638:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101763c:	e3014f58 	movw	r4, #8024	; 0x1f58
 1017640:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017644:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1017648:	e3a0c000 	mov	ip, #0
 101764c:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017650:	1a00001c 	bne	10176c8 <XScuGic_SetPriorityTriggerType+0xa4>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017654:	e351005e 	cmp	r1, #94	; 0x5e
 1017658:	8a000021 	bhi	10176e4 <XScuGic_SetPriorityTriggerType+0xc0>
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 101765c:	e3530003 	cmp	r3, #3
 1017660:	8a00002f 	bhi	1017724 <XScuGic_SetPriorityTriggerType+0x100>
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1017664:	e35200f8 	cmp	r2, #248	; 0xf8
 1017668:	8a000034 	bhi	1017740 <XScuGic_SetPriorityTriggerType+0x11c>
#endif

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 101766c:	e5905000 	ldr	r5, [r0]
 1017670:	e3c1e003 	bic	lr, r1, #3
	LocalPriority = LocalPriority & (u8)XSCUGIC_INTR_PRIO_MASK;
	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1017674:	e2010003 	and	r0, r1, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1017678:	e28eeb01 	add	lr, lr, #1024	; 0x400
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 101767c:	e1a04180 	lsl	r4, r0, #3
 1017680:	e3a080ff 	mov	r8, #255	; 0xff
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1017684:	e5956008 	ldr	r6, [r5, #8]
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1017688:	e20220f8 	and	r2, r2, #248	; 0xf8
				RegValue);

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 101768c:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 1017690:	e201100f 	and	r1, r1, #15
 1017694:	e1a01081 	lsl	r1, r1, #1
 1017698:	e3a07003 	mov	r7, #3
	return *(volatile u32 *) Addr;
 101769c:	e79e0006 	ldr	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10176a0:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 10176a4:	e1c00418 	bic	r0, r0, r8, lsl r4
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 10176a8:	e1800412 	orr	r0, r0, r2, lsl r4
	*LocalAddr = Value;
 10176ac:	e78e0006 	str	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10176b0:	e5950008 	ldr	r0, [r5, #8]
	return *(volatile u32 *) Addr;
 10176b4:	e790210c 	ldr	r2, [r0, ip, lsl #2]
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 10176b8:	e1c22117 	bic	r2, r2, r7, lsl r1
	RegValue |= (u32)Trigger << ((Int_Id%16U)*2U);
 10176bc:	e1821113 	orr	r1, r2, r3, lsl r1
	*LocalAddr = Value;
 10176c0:	e780110c 	str	r1, [r0, ip, lsl #2]
 10176c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10176c8:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10176cc:	e3001312 	movw	r1, #786	; 0x312
 10176d0:	e3400106 	movt	r0, #262	; 0x106
 10176d4:	eb000618 	bl	1018f3c <Xil_Assert>
 10176d8:	e3a03001 	mov	r3, #1
 10176dc:	e5843000 	str	r3, [r4]
 10176e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10176e4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10176e8:	e3001313 	movw	r1, #787	; 0x313
 10176ec:	e3400106 	movt	r0, #262	; 0x106
 10176f0:	eb000611 	bl	1018f3c <Xil_Assert>
 10176f4:	e3a03001 	mov	r3, #1
 10176f8:	e5843000 	str	r3, [r4]
 10176fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1017700:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017704:	e3001311 	movw	r1, #785	; 0x311
 1017708:	e3400106 	movt	r0, #262	; 0x106
 101770c:	eb00060a 	bl	1018f3c <Xil_Assert>
 1017710:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017714:	e3a02001 	mov	r2, #1
 1017718:	e340310c 	movt	r3, #268	; 0x10c
 101771c:	e5832000 	str	r2, [r3]
 1017720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1017724:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017728:	e3a01fc5 	mov	r1, #788	; 0x314
 101772c:	e3400106 	movt	r0, #262	; 0x106
 1017730:	eb000601 	bl	1018f3c <Xil_Assert>
 1017734:	e3a03001 	mov	r3, #1
 1017738:	e5843000 	str	r3, [r4]
 101773c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1017740:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017744:	e3001315 	movw	r1, #789	; 0x315
 1017748:	e3400106 	movt	r0, #262	; 0x106
 101774c:	eb0005fa 	bl	1018f3c <Xil_Assert>
 1017750:	e3a03001 	mov	r3, #1
 1017754:	e5843000 	str	r3, [r4]
	 * Write the value back to the register.
	 */
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_INT_CFG_OFFSET_CALC(Int_Id),
				RegValue);

}
 1017758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0101775c <XScuGic_GetPriorityTriggerType>:
void XScuGic_GetPriorityTriggerType(XScuGic *InstancePtr, u32 Int_Id,
					u8 *Priority, u8 *Trigger)
{
	u32 RegValue;

	Xil_AssertVoid(InstancePtr != NULL);
 101775c:	e3500000 	cmp	r0, #0
{
 1017760:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1017764:	0a000030 	beq	101782c <XScuGic_GetPriorityTriggerType+0xd0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017768:	e590e004 	ldr	lr, [r0, #4]
 101776c:	e301c111 	movw	ip, #4369	; 0x1111
 1017770:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1017774:	e3014f58 	movw	r4, #8024	; 0x1f58
 1017778:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101777c:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1017780:	e3a0c000 	mov	ip, #0
 1017784:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017788:	1a000019 	bne	10177f4 <XScuGic_GetPriorityTriggerType+0x98>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 101778c:	e351005e 	cmp	r1, #94	; 0x5e
 1017790:	8a00001e 	bhi	1017810 <XScuGic_GetPriorityTriggerType+0xb4>
	Xil_AssertVoid(Priority != NULL);
 1017794:	e3520000 	cmp	r2, #0
 1017798:	0a00002c 	beq	1017850 <XScuGic_GetPriorityTriggerType+0xf4>
	Xil_AssertVoid(Trigger != NULL);
 101779c:	e3530000 	cmp	r3, #0
 10177a0:	0a000031 	beq	101786c <XScuGic_GetPriorityTriggerType+0x110>

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10177a4:	e590c000 	ldr	ip, [r0]

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 10177a8:	e201e003 	and	lr, r1, #3
 10177ac:	e1a0418e 	lsl	r4, lr, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10177b0:	e3c15003 	bic	r5, r1, #3
 10177b4:	e2855b01 	add	r5, r5, #1024	; 0x400
 10177b8:	e59ce008 	ldr	lr, [ip, #8]
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10177bc:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10177c0:	e201100f 	and	r1, r1, #15
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10177c4:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10177c8:	e1a01081 	lsl	r1, r1, #1
	return *(volatile u32 *) Addr;
 10177cc:	e795e00e 	ldr	lr, [r5, lr]
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 10177d0:	e1a0e43e 	lsr	lr, lr, r4
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);
 10177d4:	e5c2e000 	strb	lr, [r2]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10177d8:	e5902000 	ldr	r2, [r0]
 10177dc:	e5922008 	ldr	r2, [r2, #8]
 10177e0:	e792210c 	ldr	r2, [r2, ip, lsl #2]
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10177e4:	e1a01132 	lsr	r1, r2, r1

	*Trigger = (u8)(RegValue & XSCUGIC_INT_CFG_MASK);
 10177e8:	e2011003 	and	r1, r1, #3
 10177ec:	e5c31000 	strb	r1, [r3]
 10177f0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10177f4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10177f8:	e3001367 	movw	r1, #871	; 0x367
 10177fc:	e3400106 	movt	r0, #262	; 0x106
 1017800:	eb0005cd 	bl	1018f3c <Xil_Assert>
 1017804:	e3a03001 	mov	r3, #1
 1017808:	e5843000 	str	r3, [r4]
 101780c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017810:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017814:	e3a01fda 	mov	r1, #872	; 0x368
 1017818:	e3400106 	movt	r0, #262	; 0x106
 101781c:	eb0005c6 	bl	1018f3c <Xil_Assert>
 1017820:	e3a03001 	mov	r3, #1
 1017824:	e5843000 	str	r3, [r4]
 1017828:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101782c:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017830:	e3001366 	movw	r1, #870	; 0x366
 1017834:	e3400106 	movt	r0, #262	; 0x106
 1017838:	eb0005bf 	bl	1018f3c <Xil_Assert>
 101783c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017840:	e3a02001 	mov	r2, #1
 1017844:	e340310c 	movt	r3, #268	; 0x10c
 1017848:	e5832000 	str	r2, [r3]
 101784c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Priority != NULL);
 1017850:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017854:	e3001369 	movw	r1, #873	; 0x369
 1017858:	e3400106 	movt	r0, #262	; 0x106
 101785c:	eb0005b6 	bl	1018f3c <Xil_Assert>
 1017860:	e3a03001 	mov	r3, #1
 1017864:	e5843000 	str	r3, [r4]
 1017868:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Trigger != NULL);
 101786c:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017870:	e300136a 	movw	r1, #874	; 0x36a
 1017874:	e3400106 	movt	r0, #262	; 0x106
 1017878:	eb0005af 	bl	1018f3c <Xil_Assert>
 101787c:	e3a03001 	mov	r3, #1
 1017880:	e5843000 	str	r3, [r4]
}
 1017884:	e8bd8070 	pop	{r4, r5, r6, pc}

01017888 <XScuGic_InterruptMaptoCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 1017888:	e3500000 	cmp	r0, #0
{
 101788c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1017890:	0a000010 	beq	10178d8 <XScuGic_InterruptMaptoCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1017894:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1017898:	e301cf58 	movw	ip, #8024	; 0x1f58
	RegValue = XScuGic_DistReadReg(InstancePtr,
 101789c:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 10178a0:	e340c10c 	movt	ip, #268	; 0x10c
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10178a4:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 10178a8:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10178ac:	e593e008 	ldr	lr, [r3, #8]
			XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 10178b0:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 10178b4:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 10178b8:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 10178bc:	e2022003 	and	r2, r2, #3
 10178c0:	e790100e 	ldr	r1, [r0, lr]

	RegValue |= (Cpu_Id) << (Offset*8U);
 10178c4:	e1a02182 	lsl	r2, r2, #3
 10178c8:	e6ef3073 	uxtb	r3, r3
 10178cc:	e1813213 	orr	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 10178d0:	e780300e 	str	r3, [r0, lr]
 10178d4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10178d8:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10178dc:	e30013a5 	movw	r1, #933	; 0x3a5
 10178e0:	e3400106 	movt	r0, #262	; 0x106
 10178e4:	eb000594 	bl	1018f3c <Xil_Assert>
 10178e8:	e3013f58 	movw	r3, #8024	; 0x1f58
 10178ec:	e3a02001 	mov	r2, #1
 10178f0:	e340310c 	movt	r3, #268	; 0x10c
 10178f4:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
					XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
					RegValue);
#endif
}
 10178f8:	e8bd8010 	pop	{r4, pc}

010178fc <XScuGic_Enable>:
{
 10178fc:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1017900:	e3043048 	movw	r3, #16456	; 0x4048
	Xil_AssertVoid(InstancePtr != NULL);
 1017904:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1017908:	e3403107 	movt	r3, #263	; 0x107
{
 101790c:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1017910:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1017914:	0a000024 	beq	10179ac <XScuGic_Enable+0xb0>
 1017918:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 101791c:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1017920:	e340510c 	movt	r5, #268	; 0x10c
 1017924:	e3a03000 	mov	r3, #0
 1017928:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 101792c:	8a000017 	bhi	1017990 <XScuGic_Enable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017930:	e5962004 	ldr	r2, [r6, #4]
 1017934:	e3013111 	movw	r3, #4369	; 0x1111
 1017938:	e3413111 	movt	r3, #4369	; 0x1111
 101793c:	e1520003 	cmp	r2, r3
 1017940:	1a00000b 	bne	1017974 <XScuGic_Enable+0x78>
	XScuGic_InterruptMaptoCpu(InstancePtr, Cpu_Id, Int_Id);
 1017944:	e1a02004 	mov	r2, r4
 1017948:	e6ef1071 	uxtb	r1, r1
 101794c:	ebffffcd 	bl	1017888 <XScuGic_InterruptMaptoCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1017950:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1017954:	e204101f 	and	r1, r4, #31
 1017958:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 101795c:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1017960:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1017964:	e5922008 	ldr	r2, [r2, #8]
 1017968:	e2844040 	add	r4, r4, #64	; 0x40
 101796c:	e7823104 	str	r3, [r2, r4, lsl #2]
 1017970:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017974:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017978:	e300123d 	movw	r1, #573	; 0x23d
 101797c:	e3400106 	movt	r0, #262	; 0x106
 1017980:	eb00056d 	bl	1018f3c <Xil_Assert>
 1017984:	e3a03001 	mov	r3, #1
 1017988:	e5853000 	str	r3, [r5]
}
 101798c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017990:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017994:	e3a01f8f 	mov	r1, #572	; 0x23c
 1017998:	e3400106 	movt	r0, #262	; 0x106
 101799c:	eb000566 	bl	1018f3c <Xil_Assert>
 10179a0:	e3a03001 	mov	r3, #1
 10179a4:	e5853000 	str	r3, [r5]
 10179a8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10179ac:	e30b0e70 	movw	r0, #48752	; 0xbe70
 10179b0:	e300123b 	movw	r1, #571	; 0x23b
 10179b4:	e3400106 	movt	r0, #262	; 0x106
 10179b8:	eb00055f 	bl	1018f3c <Xil_Assert>
 10179bc:	e3013f58 	movw	r3, #8024	; 0x1f58
 10179c0:	e3a02001 	mov	r2, #1
 10179c4:	e340310c 	movt	r3, #268	; 0x10c
 10179c8:	e5832000 	str	r2, [r3]
 10179cc:	e8bd8070 	pop	{r4, r5, r6, pc}

010179d0 <XScuGic_InterruptUnmapFromCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 10179d0:	e3500000 	cmp	r0, #0
{
 10179d4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10179d8:	0a000010 	beq	1017a20 <XScuGic_InterruptUnmapFromCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10179dc:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 10179e0:	e301cf58 	movw	ip, #8024	; 0x1f58
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10179e4:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 10179e8:	e340c10c 	movt	ip, #268	; 0x10c
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10179ec:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 10179f0:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10179f4:	e593e008 	ldr	lr, [r3, #8]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 10179f8:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 10179fc:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 1017a00:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 1017a04:	e2022003 	and	r2, r2, #3
	return *(volatile u32 *) Addr;
 1017a08:	e790100e 	ldr	r1, [r0, lr]

	RegValue &= ~(Cpu_Id << (Offset*8U));
 1017a0c:	e1a02182 	lsl	r2, r2, #3
 1017a10:	e6ef3073 	uxtb	r3, r3
 1017a14:	e1c13213 	bic	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 1017a18:	e780300e 	str	r3, [r0, lr]
 1017a1c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1017a20:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017a24:	e30013d1 	movw	r1, #977	; 0x3d1
 1017a28:	e3400106 	movt	r0, #262	; 0x106
 1017a2c:	eb000542 	bl	1018f3c <Xil_Assert>
 1017a30:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017a34:	e3a02001 	mov	r2, #1
 1017a38:	e340310c 	movt	r3, #268	; 0x10c
 1017a3c:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
			RegValue);
#endif
}
 1017a40:	e8bd8010 	pop	{r4, pc}

01017a44 <XScuGic_Disable>:
{
 1017a44:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1017a48:	e3043048 	movw	r3, #16456	; 0x4048
	Xil_AssertVoid(InstancePtr != NULL);
 1017a4c:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1017a50:	e3403107 	movt	r3, #263	; 0x107
{
 1017a54:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1017a58:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1017a5c:	0a000024 	beq	1017af4 <XScuGic_Disable+0xb0>
 1017a60:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017a64:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1017a68:	e340510c 	movt	r5, #268	; 0x10c
 1017a6c:	e3a03000 	mov	r3, #0
 1017a70:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017a74:	8a000017 	bhi	1017ad8 <XScuGic_Disable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017a78:	e5962004 	ldr	r2, [r6, #4]
 1017a7c:	e3013111 	movw	r3, #4369	; 0x1111
 1017a80:	e3413111 	movt	r3, #4369	; 0x1111
 1017a84:	e1520003 	cmp	r2, r3
 1017a88:	1a00000b 	bne	1017abc <XScuGic_Disable+0x78>
	XScuGic_InterruptUnmapFromCpu(InstancePtr, Cpu_Id, Int_Id);
 1017a8c:	e1a02004 	mov	r2, r4
 1017a90:	e6ef1071 	uxtb	r1, r1
 1017a94:	ebffffcd 	bl	10179d0 <XScuGic_InterruptUnmapFromCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1017a98:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1017a9c:	e204101f 	and	r1, r4, #31
 1017aa0:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1017aa4:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1017aa8:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1017aac:	e5922008 	ldr	r2, [r2, #8]
 1017ab0:	e2844060 	add	r4, r4, #96	; 0x60
 1017ab4:	e7823104 	str	r3, [r2, r4, lsl #2]
 1017ab8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017abc:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017ac0:	e3a01f9e 	mov	r1, #632	; 0x278
 1017ac4:	e3400106 	movt	r0, #262	; 0x106
 1017ac8:	eb00051b 	bl	1018f3c <Xil_Assert>
 1017acc:	e3a03001 	mov	r3, #1
 1017ad0:	e5853000 	str	r3, [r5]
}
 1017ad4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1017ad8:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017adc:	e3001277 	movw	r1, #631	; 0x277
 1017ae0:	e3400106 	movt	r0, #262	; 0x106
 1017ae4:	eb000514 	bl	1018f3c <Xil_Assert>
 1017ae8:	e3a03001 	mov	r3, #1
 1017aec:	e5853000 	str	r3, [r5]
 1017af0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1017af4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017af8:	e3001276 	movw	r1, #630	; 0x276
 1017afc:	e3400106 	movt	r0, #262	; 0x106
 1017b00:	eb00050d 	bl	1018f3c <Xil_Assert>
 1017b04:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017b08:	e3a02001 	mov	r2, #1
 1017b0c:	e340310c 	movt	r3, #268	; 0x10c
 1017b10:	e5832000 	str	r2, [r3]
 1017b14:	e8bd8070 	pop	{r4, r5, r6, pc}

01017b18 <XScuGic_UnmapAllInterruptsFromCpu>:
{
	u32 Int_Id;
	u32 Target_Cpu;
	u32 LocalCpuID = (1U << Cpu_Id);

	Xil_AssertVoid(InstancePtr != NULL);
 1017b18:	e3500000 	cmp	r0, #0
{
 1017b1c:	e92d4010 	push	{r4, lr}
	u32 LocalCpuID = (1U << Cpu_Id);
 1017b20:	e3a04001 	mov	r4, #1
 1017b24:	e1a01114 	lsl	r1, r4, r1
	Xil_AssertVoid(InstancePtr != NULL);
 1017b28:	0a000011 	beq	1017b74 <XScuGic_UnmapAllInterruptsFromCpu+0x5c>

	LocalCpuID |= LocalCpuID << 8U;
 1017b2c:	e1811401 	orr	r1, r1, r1, lsl #8
	Xil_AssertVoid(InstancePtr != NULL);
 1017b30:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017b34:	e340310c 	movt	r3, #268	; 0x10c
	LocalCpuID |= LocalCpuID << 16U;

	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1017b38:	e590c000 	ldr	ip, [r0]
	LocalCpuID |= LocalCpuID << 16U;
 1017b3c:	e1811801 	orr	r1, r1, r1, lsl #16
	Xil_AssertVoid(InstancePtr != NULL);
 1017b40:	e3a02000 	mov	r2, #0
 1017b44:	e5832000 	str	r2, [r3]
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017b48:	e3a03020 	mov	r3, #32
 1017b4c:	e1e00001 	mvn	r0, r1
		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1017b50:	e59c2008 	ldr	r2, [ip, #8]
 1017b54:	e2822b02 	add	r2, r2, #2048	; 0x800
	return *(volatile u32 *) Addr;
 1017b58:	e7921003 	ldr	r1, [r2, r3]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));
		/* Remove LocalCpuID from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1017b5c:	e0011000 	and	r1, r1, r0
	*LocalAddr = Value;
 1017b60:	e7821003 	str	r1, [r2, r3]
			Int_Id = Int_Id+4U) {
 1017b64:	e2833004 	add	r3, r3, #4
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017b68:	e3530060 	cmp	r3, #96	; 0x60
 1017b6c:	1afffff7 	bne	1017b50 <XScuGic_UnmapAllInterruptsFromCpu+0x38>
 1017b70:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1017b74:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017b78:	e30013f1 	movw	r1, #1009	; 0x3f1
 1017b7c:	e3400106 	movt	r0, #262	; 0x106
 1017b80:	eb0004ed 	bl	1018f3c <Xil_Assert>
 1017b84:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017b88:	e340310c 	movt	r3, #268	; 0x10c
 1017b8c:	e5834000 	str	r4, [r3]
 1017b90:	e8bd8010 	pop	{r4, pc}

01017b94 <XScuGic_Stop>:
{
	u32 Int_Id;
	u32 RegValue;
	u32 Target_Cpu;
	u32 DistDisable = 1; /* Track distributor status*/
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1017b94:	e3043048 	movw	r3, #16456	; 0x4048

	Xil_AssertVoid(InstancePtr != NULL);
 1017b98:	e3500000 	cmp	r0, #0
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1017b9c:	e3403107 	movt	r3, #263	; 0x107
{
 1017ba0:	e92d4070 	push	{r4, r5, r6, lr}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1017ba4:	e593e000 	ldr	lr, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1017ba8:	0a000027 	beq	1017c4c <XScuGic_Stop+0xb8>
 1017bac:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017bb0:	e3a02000 	mov	r2, #0

	/* If distributor is already disabled, no need to do anything */
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1017bb4:	e5904000 	ldr	r4, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1017bb8:	e340310c 	movt	r3, #268	; 0x10c
 1017bbc:	e5832000 	str	r2, [r3]
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1017bc0:	e5941008 	ldr	r1, [r4, #8]
	return *(volatile u32 *) Addr;
 1017bc4:	e5913000 	ldr	r3, [r1]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 1017bc8:	e3130001 	tst	r3, #1
 1017bcc:	08bd8070 	popeq	{r4, r5, r6, pc}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1017bd0:	e3a0c001 	mov	ip, #1
	/*
	 * Check if the interrupt are targeted to current cpu only or not.
	 * Also remove current cpu from interrupt target register for all
	 * interrupts.
	 */
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017bd4:	e3a02020 	mov	r2, #32
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1017bd8:	e1a0ee1c 	lsl	lr, ip, lr
	LocalCpuID |= LocalCpuID << 8U;
 1017bdc:	e18ee40e 	orr	lr, lr, lr, lsl #8
	LocalCpuID |= LocalCpuID << 16U;
 1017be0:	e18ee80e 	orr	lr, lr, lr, lsl #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017be4:	e1e0500e 	mvn	r5, lr
 1017be8:	ea000000 	b	1017bf0 <XScuGic_Stop+0x5c>
 1017bec:	e5941008 	ldr	r1, [r4, #8]
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1017bf0:	e2820b02 	add	r0, r2, #2048	; 0x800
			Int_Id = Int_Id+4U) {
 1017bf4:	e2822004 	add	r2, r2, #4
 1017bf8:	e7903001 	ldr	r3, [r0, r1]
		if ((Target_Cpu != LocalCpuID) && (Target_Cpu != 0)) {
			/*
			 * If any other CPU is also programmed to target
			 * register, GIC distributor can not be disabled.
			 */
			DistDisable = 0;
 1017bfc:	e15e0003 	cmp	lr, r3
 1017c00:	13530000 	cmpne	r3, #0
		}

		/* Remove current CPU from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1017c04:	e0033005 	and	r3, r3, r5
			DistDisable = 0;
 1017c08:	13a0c000 	movne	ip, #0
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017c0c:	e3520060 	cmp	r2, #96	; 0x60
	*LocalAddr = Value;
 1017c10:	e7803001 	str	r3, [r0, r1]
 1017c14:	1afffff4 	bne	1017bec <XScuGic_Stop+0x58>

	/*
	 * If GIC distributor is safe to be disabled, disable all the interrupt
	 * and then disable distributor.
	 */
	if (DistDisable == 1) {
 1017c18:	e35c0001 	cmp	ip, #1
 1017c1c:	18bd8070 	popne	{r4, r5, r6, pc}
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
				Int_Id = Int_Id+32U) {
			/*
			 * Disable all the interrupts
			 */
			XScuGic_DistWriteReg(InstancePtr,
 1017c20:	e5941008 	ldr	r1, [r4, #8]
 1017c24:	e3e03000 	mvn	r3, #0
 1017c28:	e3a02000 	mov	r2, #0
 1017c2c:	e5813180 	str	r3, [r1, #384]	; 0x180
 1017c30:	e5941008 	ldr	r1, [r4, #8]
 1017c34:	e5813184 	str	r3, [r1, #388]	; 0x184
 1017c38:	e5941008 	ldr	r1, [r4, #8]
 1017c3c:	e5813188 	str	r3, [r1, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1017c40:	e5943008 	ldr	r3, [r4, #8]
	*LocalAddr = Value;
 1017c44:	e5832000 	str	r2, [r3]
							Int_Id),
			0xFFFFFFFFU);
		}
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET, 0U);
	}
}
 1017c48:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1017c4c:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017c50:	e3001419 	movw	r1, #1049	; 0x419
 1017c54:	e3400106 	movt	r0, #262	; 0x106
 1017c58:	eb0004b7 	bl	1018f3c <Xil_Assert>
 1017c5c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017c60:	e3a02001 	mov	r2, #1
 1017c64:	e340310c 	movt	r3, #268	; 0x10c
 1017c68:	e5832000 	str	r2, [r3]
 1017c6c:	e8bd8070 	pop	{r4, r5, r6, pc}

01017c70 <XScuGic_CfgInitialize>:
{
 1017c70:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017c74:	e2504000 	subs	r4, r0, #0
 1017c78:	0a000049 	beq	1017da4 <XScuGic_CfgInitialize+0x134>
 1017c7c:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017c80:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017c84:	e340510c 	movt	r5, #268	; 0x10c
 1017c88:	e3a02000 	mov	r2, #0
 1017c8c:	e5852000 	str	r2, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017c90:	0a00004c 	beq	1017dc8 <XScuGic_CfgInitialize+0x158>
	if(InstancePtr->IsReady != XIL_COMPONENT_IS_READY) {
 1017c94:	e5940004 	ldr	r0, [r4, #4]
 1017c98:	e3013111 	movw	r3, #4369	; 0x1111
 1017c9c:	e3413111 	movt	r3, #4369	; 0x1111
 1017ca0:	e1500003 	cmp	r0, r3
 1017ca4:	0a00001e 	beq	1017d24 <XScuGic_CfgInitialize+0xb4>
						= (Xil_InterruptHandler)StubHandler;
 1017ca8:	e307c350 	movw	ip, #29520	; 0x7350
 1017cac:	e1a03001 	mov	r3, r1
 1017cb0:	e340c101 	movt	ip, #257	; 0x101
 1017cb4:	e2810fbe 	add	r0, r1, #760	; 0x2f8
		InstancePtr->IsReady = 0U;
 1017cb8:	e5842004 	str	r2, [r4, #4]
		InstancePtr->Config = ConfigPtr;
 1017cbc:	e5841000 	str	r1, [r4]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 1017cc0:	e593200c 	ldr	r2, [r3, #12]
 1017cc4:	e2833008 	add	r3, r3, #8
			InstancePtr->Config->HandlerTable[Int_Id].CallBackRef =
 1017cc8:	e5834008 	str	r4, [r3, #8]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 1017ccc:	e3520000 	cmp	r2, #0
						= (Xil_InterruptHandler)StubHandler;
 1017cd0:	0583c004 	streq	ip, [r3, #4]
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017cd4:	e1500003 	cmp	r0, r3
 1017cd8:	1afffff8 	bne	1017cc0 <XScuGic_CfgInitialize+0x50>
		XScuGic_Stop(InstancePtr);
 1017cdc:	e1a00004 	mov	r0, r4
 1017ce0:	ebffffab 	bl	1017b94 <XScuGic_Stop>
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1017ce4:	e5941000 	ldr	r1, [r4]
	Xil_AssertVoid(InstancePtr != NULL);
 1017ce8:	e3a03000 	mov	r3, #0
 1017cec:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 1017cf0:	e5910008 	ldr	r0, [r1, #8]
 1017cf4:	e5903000 	ldr	r3, [r0]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 1017cf8:	e2133001 	ands	r3, r3, #1
 1017cfc:	0a00000a 	beq	1017d2c <XScuGic_CfgInitialize+0xbc>
	XScuGic_CPUWriteReg(InstancePtr, XSCUGIC_CPU_PRIOR_OFFSET, 0xF0U);
 1017d00:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1017d04:	e3a0c0f0 	mov	ip, #240	; 0xf0
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1017d08:	e3013111 	movw	r3, #4369	; 0x1111
 1017d0c:	e3a00007 	mov	r0, #7
 1017d10:	e3413111 	movt	r3, #4369	; 0x1111
 1017d14:	e582c004 	str	ip, [r2, #4]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1017d18:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1017d1c:	e5820000 	str	r0, [r2]
 1017d20:	e5843004 	str	r3, [r4, #4]
}
 1017d24:	e3a00000 	mov	r0, #0
 1017d28:	e8bd8070 	pop	{r4, r5, r6, pc}
 1017d2c:	e1a0c003 	mov	ip, r3
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017d30:	e3a02020 	mov	r2, #32
 1017d34:	e5803000 	str	r3, [r0]
		XScuGic_DistWriteReg(InstancePtr,
 1017d38:	e1a03222 	lsr	r3, r2, #4
 1017d3c:	e5910008 	ldr	r0, [r1, #8]
			Int_Id = Int_Id+16U) {
 1017d40:	e2822010 	add	r2, r2, #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017d44:	e3520060 	cmp	r2, #96	; 0x60
		XScuGic_DistWriteReg(InstancePtr,
 1017d48:	e2833c03 	add	r3, r3, #768	; 0x300
 1017d4c:	e780c103 	str	ip, [r0, r3, lsl #2]
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017d50:	1afffff8 	bne	1017d38 <XScuGic_CfgInitialize+0xc8>
 1017d54:	e30a00a0 	movw	r0, #41120	; 0xa0a0
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017d58:	e3a03000 	mov	r3, #0
 1017d5c:	e34a00a0 	movt	r0, #41120	; 0xa0a0
		XScuGic_DistWriteReg(InstancePtr,
 1017d60:	e5912008 	ldr	r2, [r1, #8]
 1017d64:	e2822b01 	add	r2, r2, #1024	; 0x400
 1017d68:	e7820003 	str	r0, [r2, r3]
			Int_Id = Int_Id+4U) {
 1017d6c:	e2833004 	add	r3, r3, #4
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1017d70:	e3530060 	cmp	r3, #96	; 0x60
 1017d74:	1afffff9 	bne	1017d60 <XScuGic_CfgInitialize+0xf0>
		XScuGic_DistWriteReg(InstancePtr,
 1017d78:	e5910008 	ldr	r0, [r1, #8]
 1017d7c:	e3e03000 	mvn	r3, #0
 1017d80:	e3a02001 	mov	r2, #1
 1017d84:	e5803180 	str	r3, [r0, #384]	; 0x180
 1017d88:	e5910008 	ldr	r0, [r1, #8]
 1017d8c:	e5803184 	str	r3, [r0, #388]	; 0x184
 1017d90:	e5910008 	ldr	r0, [r1, #8]
 1017d94:	e5803188 	str	r3, [r0, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1017d98:	e5913008 	ldr	r3, [r1, #8]
	*LocalAddr = Value;
 1017d9c:	e5832000 	str	r2, [r3]
 1017da0:	eaffffd6 	b	1017d00 <XScuGic_CfgInitialize+0x90>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017da4:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017da8:	e3001181 	movw	r1, #385	; 0x181
 1017dac:	e3400106 	movt	r0, #262	; 0x106
 1017db0:	eb000461 	bl	1018f3c <Xil_Assert>
 1017db4:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017db8:	e3a02001 	mov	r2, #1
 1017dbc:	e340310c 	movt	r3, #268	; 0x10c
 1017dc0:	e5832000 	str	r2, [r3]
 1017dc4:	eaffffd6 	b	1017d24 <XScuGic_CfgInitialize+0xb4>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017dc8:	e30b0e70 	movw	r0, #48752	; 0xbe70
 1017dcc:	e3001182 	movw	r1, #386	; 0x182
 1017dd0:	e3400106 	movt	r0, #262	; 0x106
 1017dd4:	eb000458 	bl	1018f3c <Xil_Assert>
 1017dd8:	e3a03001 	mov	r3, #1
 1017ddc:	e5853000 	str	r3, [r5]
 1017de0:	eaffffcf 	b	1017d24 <XScuGic_CfgInitialize+0xb4>

01017de4 <XScuGic_SetCpuID>:
* @note		None
*
*****************************************************************************/
void XScuGic_SetCpuID(u32 CpuCoreId)
{
	Xil_AssertVoid(CpuCoreId <= 1U);
 1017de4:	e3500001 	cmp	r0, #1
 1017de8:	8a000007 	bhi	1017e0c <XScuGic_SetCpuID+0x28>
 1017dec:	e3012f58 	movw	r2, #8024	; 0x1f58

	CpuId = CpuCoreId;
 1017df0:	e3043048 	movw	r3, #16456	; 0x4048
	Xil_AssertVoid(CpuCoreId <= 1U);
 1017df4:	e340210c 	movt	r2, #268	; 0x10c
 1017df8:	e3a01000 	mov	r1, #0
	CpuId = CpuCoreId;
 1017dfc:	e3403107 	movt	r3, #263	; 0x107
	Xil_AssertVoid(CpuCoreId <= 1U);
 1017e00:	e5821000 	str	r1, [r2]
	CpuId = CpuCoreId;
 1017e04:	e5830000 	str	r0, [r3]
 1017e08:	e12fff1e 	bx	lr
	Xil_AssertVoid(CpuCoreId <= 1U);
 1017e0c:	e30b0e70 	movw	r0, #48752	; 0xbe70
{
 1017e10:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CpuCoreId <= 1U);
 1017e14:	e300145d 	movw	r1, #1117	; 0x45d
 1017e18:	e3400106 	movt	r0, #262	; 0x106
 1017e1c:	eb000446 	bl	1018f3c <Xil_Assert>
 1017e20:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017e24:	e3a02001 	mov	r2, #1
 1017e28:	e340310c 	movt	r3, #268	; 0x10c
 1017e2c:	e5832000 	str	r2, [r3]
}
 1017e30:	e8bd8010 	pop	{r4, pc}

01017e34 <XScuGic_GetCpuID>:
* @note        None.
*
*****************************************************************************/
u32 XScuGic_GetCpuID(void)
{
	return CpuId;
 1017e34:	e3043048 	movw	r3, #16456	; 0x4048
 1017e38:	e3403107 	movt	r3, #263	; 0x107
}
 1017e3c:	e5930000 	ldr	r0, [r3]
 1017e40:	e12fff1e 	bx	lr

01017e44 <XScuGic_LookupConfig>:
{
	XScuGic_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_SCUGIC_NUM_INSTANCES; Index++) {
		if (XScuGic_ConfigTable[Index].DeviceId == DeviceId) {
 1017e44:	e30c33b0 	movw	r3, #50096	; 0xc3b0
 1017e48:	e3403106 	movt	r3, #262	; 0x106
 1017e4c:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuGic_Config *)CfgPtr;
}
 1017e50:	e1520000 	cmp	r2, r0
 1017e54:	01a00003 	moveq	r0, r3
 1017e58:	13a00000 	movne	r0, #0
 1017e5c:	e12fff1e 	bx	lr

01017e60 <XScuGic_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32  XScuGic_SelfTest(XScuGic *InstancePtr)
{
 1017e60:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;

	/*
	 * Assert the arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017e64:	e2506000 	subs	r6, r0, #0
 1017e68:	0a00001f 	beq	1017eec <XScuGic_SelfTest+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017e6c:	e5962004 	ldr	r2, [r6, #4]
 1017e70:	e3013111 	movw	r3, #4369	; 0x1111
 1017e74:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017e78:	e3015f58 	movw	r5, #8024	; 0x1f58
 1017e7c:	e340510c 	movt	r5, #268	; 0x10c
 1017e80:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017e84:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017e88:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017e8c:	1a00000e 	bne	1017ecc <XScuGic_SelfTest+0x6c>

	/*
	 * Read the ID registers.
	 */
	for (Index = 0U; Index <= 3U; Index++) {
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1017e90:	e5963000 	ldr	r3, [r6]
			((u32)XSCUGIC_PCELLID_OFFSET + (Index * 4U))) <<
			(Index * 8U);
	}

	if (XSCUGIC_PCELL_ID != RegValue1) {
 1017e94:	e30f400d 	movw	r4, #61453	; 0xf00d
 1017e98:	e34b4105 	movt	r4, #45317	; 0xb105
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1017e9c:	e5933008 	ldr	r3, [r3, #8]
	return *(volatile u32 *) Addr;
 1017ea0:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
 1017ea4:	e5931ff4 	ldr	r1, [r3, #4084]	; 0xff4
 1017ea8:	e5930ff8 	ldr	r0, [r3, #4088]	; 0xff8
 1017eac:	e5933ffc 	ldr	r3, [r3, #4092]	; 0xffc
			((u32)XSCUGIC_PCELLID_OFFSET + (Index * 4U))) <<
 1017eb0:	e1a00800 	lsl	r0, r0, #16
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1017eb4:	e1800401 	orr	r0, r0, r1, lsl #8
 1017eb8:	e1800c03 	orr	r0, r0, r3, lsl #24
 1017ebc:	e1800002 	orr	r0, r0, r2
	if (XSCUGIC_PCELL_ID != RegValue1) {
 1017ec0:	e0500004 	subs	r0, r0, r4
 1017ec4:	13a00001 	movne	r0, #1
		Status = XST_FAILURE;
	} else {
		Status = XST_SUCCESS;
	}
	return Status;
}
 1017ec8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017ecc:	e30b0e7c 	movw	r0, #48764	; 0xbe7c
 1017ed0:	e3a0105e 	mov	r1, #94	; 0x5e
 1017ed4:	e3400106 	movt	r0, #262	; 0x106
 1017ed8:	eb000417 	bl	1018f3c <Xil_Assert>
 1017edc:	e3a03001 	mov	r3, #1
 1017ee0:	e1a00004 	mov	r0, r4
 1017ee4:	e5853000 	str	r3, [r5]
 1017ee8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017eec:	e30b0e7c 	movw	r0, #48764	; 0xbe7c
 1017ef0:	e3a0105d 	mov	r1, #93	; 0x5d
 1017ef4:	e3400106 	movt	r0, #262	; 0x106
 1017ef8:	eb00040f 	bl	1018f3c <Xil_Assert>
 1017efc:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017f00:	e3a02001 	mov	r2, #1
 1017f04:	e340310c 	movt	r3, #268	; 0x10c
 1017f08:	e1a00006 	mov	r0, r6
 1017f0c:	e5832000 	str	r2, [r3]
 1017f10:	e8bd8070 	pop	{r4, r5, r6, pc}

01017f14 <XScuTimer_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XScuTimer_CfgInitialize(XScuTimer *InstancePtr,
			 XScuTimer_Config *ConfigPtr, u32 EffectiveAddress)
{
 1017f14:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017f18:	e2505000 	subs	r5, r0, #0
 1017f1c:	0a000016 	beq	1017f7c <XScuTimer_CfgInitialize+0x68>
 1017f20:	e3016f58 	movw	r6, #8024	; 0x1f58
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017f24:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017f28:	e340610c 	movt	r6, #268	; 0x10c
 1017f2c:	e3a03000 	mov	r3, #0
 1017f30:	e1a04001 	mov	r4, r1
 1017f34:	e5863000 	str	r3, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017f38:	0a000019 	beq	1017fa4 <XScuTimer_CfgInitialize+0x90>
	 * If the device is started, disallow the initialize and return a
	 * status indicating it is started. This allows the user to stop the
	 * device and reinitialize, but prevents a user from inadvertently
	 * initializing.
	 */
	if (InstancePtr->IsStarted != XIL_COMPONENT_IS_STARTED) {
 1017f3c:	e595000c 	ldr	r0, [r5, #12]
 1017f40:	e3021222 	movw	r1, #8738	; 0x2222
 1017f44:	e3421222 	movt	r1, #8738	; 0x2222
 1017f48:	e1500001 	cmp	r0, r1
 1017f4c:	0a000008 	beq	1017f74 <XScuTimer_CfgInitialize+0x60>
		/*
		 * Copy configuration into the instance structure.
		 */
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1017f50:	e1d4c0b0 	ldrh	ip, [r4]
		InstancePtr->IsStarted = (u32)0;

		/*
		 * Indicate the instance is ready to use, successfully initialized.
		 */
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1017f54:	e3011111 	movw	r1, #4369	; 0x1111
 1017f58:	e3411111 	movt	r1, #4369	; 0x1111

		Status =(s32)XST_SUCCESS;
 1017f5c:	e1a00003 	mov	r0, r3
		InstancePtr->Config.BaseAddr = EffectiveAddress;
 1017f60:	e5852004 	str	r2, [r5, #4]
		InstancePtr->IsStarted = (u32)0;
 1017f64:	e585300c 	str	r3, [r5, #12]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1017f68:	e1c5c0b0 	strh	ip, [r5]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1017f6c:	e5851008 	str	r1, [r5, #8]
	}
	else {
		Status = (s32)XST_DEVICE_IS_STARTED;
	}
	return Status;
}
 1017f70:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 1017f74:	e3a00005 	mov	r0, #5
 1017f78:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017f7c:	e30b0e90 	movw	r0, #48784	; 0xbe90
 1017f80:	e3a01054 	mov	r1, #84	; 0x54
 1017f84:	e3400106 	movt	r0, #262	; 0x106
 1017f88:	eb0003eb 	bl	1018f3c <Xil_Assert>
 1017f8c:	e3013f58 	movw	r3, #8024	; 0x1f58
 1017f90:	e3a02001 	mov	r2, #1
 1017f94:	e340310c 	movt	r3, #268	; 0x10c
 1017f98:	e1a00005 	mov	r0, r5
 1017f9c:	e5832000 	str	r2, [r3]
 1017fa0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017fa4:	e30b0e90 	movw	r0, #48784	; 0xbe90
 1017fa8:	e3a01055 	mov	r1, #85	; 0x55
 1017fac:	e3400106 	movt	r0, #262	; 0x106
 1017fb0:	eb0003e1 	bl	1018f3c <Xil_Assert>
 1017fb4:	e3a03001 	mov	r3, #1
 1017fb8:	e1a00004 	mov	r0, r4
 1017fbc:	e5863000 	str	r3, [r6]
 1017fc0:	e8bd8070 	pop	{r4, r5, r6, pc}

01017fc4 <XScuTimer_Start>:
******************************************************************************/
void XScuTimer_Start(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1017fc4:	e3500000 	cmp	r0, #0
{
 1017fc8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1017fcc:	0a000017 	beq	1018030 <XScuTimer_Start+0x6c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017fd0:	e5901008 	ldr	r1, [r0, #8]
 1017fd4:	e3013111 	movw	r3, #4369	; 0x1111
 1017fd8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1017fdc:	e3014f58 	movw	r4, #8024	; 0x1f58
 1017fe0:	e340410c 	movt	r4, #268	; 0x10c
 1017fe4:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017fe8:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1017fec:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017ff0:	1a000007 	bne	1018014 <XScuTimer_Start+0x50>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1017ff4:	e5901004 	ldr	r1, [r0, #4]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is started.
	 */
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 1017ff8:	e3022222 	movw	r2, #8738	; 0x2222
 1017ffc:	e3422222 	movt	r2, #8738	; 0x2222
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1018000:	e5913008 	ldr	r3, [r1, #8]
	Register |= XSCUTIMER_CONTROL_ENABLE_MASK;
 1018004:	e3833001 	orr	r3, r3, #1
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1018008:	e5813008 	str	r3, [r1, #8]
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 101800c:	e580200c 	str	r2, [r0, #12]
 1018010:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018014:	e30b0e90 	movw	r0, #48784	; 0xbe90
 1018018:	e3a01089 	mov	r1, #137	; 0x89
 101801c:	e3400106 	movt	r0, #262	; 0x106
 1018020:	eb0003c5 	bl	1018f3c <Xil_Assert>
 1018024:	e3a03001 	mov	r3, #1
 1018028:	e5843000 	str	r3, [r4]
}
 101802c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018030:	e30b0e90 	movw	r0, #48784	; 0xbe90
 1018034:	e3a01088 	mov	r1, #136	; 0x88
 1018038:	e3400106 	movt	r0, #262	; 0x106
 101803c:	eb0003be 	bl	1018f3c <Xil_Assert>
 1018040:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018044:	e3a02001 	mov	r2, #1
 1018048:	e340310c 	movt	r3, #268	; 0x10c
 101804c:	e5832000 	str	r2, [r3]
 1018050:	e8bd8010 	pop	{r4, pc}

01018054 <XScuTimer_Stop>:
******************************************************************************/
void XScuTimer_Stop(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1018054:	e3500000 	cmp	r0, #0
{
 1018058:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101805c:	0a000015 	beq	10180b8 <XScuTimer_Stop+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018060:	e5901008 	ldr	r1, [r0, #8]
 1018064:	e3013111 	movw	r3, #4369	; 0x1111
 1018068:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101806c:	e3014f58 	movw	r4, #8024	; 0x1f58
 1018070:	e340410c 	movt	r4, #268	; 0x10c
 1018074:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018078:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 101807c:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018080:	1a000005 	bne	101809c <XScuTimer_Stop+0x48>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1018084:	e5901004 	ldr	r1, [r0, #4]
	return *(volatile u32 *) Addr;
 1018088:	e5913008 	ldr	r3, [r1, #8]
				  XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear the 'timer enable' bit in the register.
	 */
	Register &= (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 101808c:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 1018090:	e5813008 	str	r3, [r1, #8]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is stopped.
	 */
	InstancePtr->IsStarted = (u32)0;
 1018094:	e580200c 	str	r2, [r0, #12]
 1018098:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101809c:	e30b0e90 	movw	r0, #48784	; 0xbe90
 10180a0:	e3a010b3 	mov	r1, #179	; 0xb3
 10180a4:	e3400106 	movt	r0, #262	; 0x106
 10180a8:	eb0003a3 	bl	1018f3c <Xil_Assert>
 10180ac:	e3a03001 	mov	r3, #1
 10180b0:	e5843000 	str	r3, [r4]
}
 10180b4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10180b8:	e30b0e90 	movw	r0, #48784	; 0xbe90
 10180bc:	e3a010b2 	mov	r1, #178	; 0xb2
 10180c0:	e3400106 	movt	r0, #262	; 0x106
 10180c4:	eb00039c 	bl	1018f3c <Xil_Assert>
 10180c8:	e3013f58 	movw	r3, #8024	; 0x1f58
 10180cc:	e3a02001 	mov	r2, #1
 10180d0:	e340310c 	movt	r3, #268	; 0x10c
 10180d4:	e5832000 	str	r2, [r3]
 10180d8:	e8bd8010 	pop	{r4, pc}

010180dc <XScuTimer_SetPrescaler>:
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
 10180dc:	e3500000 	cmp	r0, #0
{
 10180e0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10180e4:	0a000015 	beq	1018140 <XScuTimer_SetPrescaler+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10180e8:	e590e008 	ldr	lr, [r0, #8]
 10180ec:	e3012111 	movw	r2, #4369	; 0x1111
 10180f0:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10180f4:	e3014f58 	movw	r4, #8024	; 0x1f58
 10180f8:	e340410c 	movt	r4, #268	; 0x10c
 10180fc:	e3a0c000 	mov	ip, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018100:	e15e0002 	cmp	lr, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1018104:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018108:	1a000005 	bne	1018124 <XScuTimer_SetPrescaler+0x48>
	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 101810c:	e5902004 	ldr	r2, [r0, #4]
	return *(volatile u32 *) Addr;
 1018110:	e5923008 	ldr	r3, [r2, #8]
					XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear all of the prescaler control bits in the register.
	 */
	ControlReg &= (u32)(~XSCUTIMER_CONTROL_PRESCALER_MASK);
 1018114:	e3c33cff 	bic	r3, r3, #65280	; 0xff00

	/*
	 * Set the prescaler value.
	 */
	ControlReg |= (((u32)PrescalerValue) << XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 1018118:	e1833401 	orr	r3, r3, r1, lsl #8
	*LocalAddr = Value;
 101811c:	e5823008 	str	r3, [r2, #8]
 1018120:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018124:	e30b0e90 	movw	r0, #48784	; 0xbe90
 1018128:	e3a010e1 	mov	r1, #225	; 0xe1
 101812c:	e3400106 	movt	r0, #262	; 0x106
 1018130:	eb000381 	bl	1018f3c <Xil_Assert>
 1018134:	e3a03001 	mov	r3, #1
 1018138:	e5843000 	str	r3, [r4]
	/*
	 * Write the register with the new values.
	 */
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
			  XSCUTIMER_CONTROL_OFFSET, ControlReg);
}
 101813c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018140:	e30b0e90 	movw	r0, #48784	; 0xbe90
 1018144:	e3a010e0 	mov	r1, #224	; 0xe0
 1018148:	e3400106 	movt	r0, #262	; 0x106
 101814c:	eb00037a 	bl	1018f3c <Xil_Assert>
 1018150:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018154:	e3a02001 	mov	r2, #1
 1018158:	e340310c 	movt	r3, #268	; 0x10c
 101815c:	e5832000 	str	r2, [r3]
 1018160:	e8bd8010 	pop	{r4, pc}

01018164 <XScuTimer_GetPrescaler>:
*
* @note		None.
*
****************************************************************************/
u8 XScuTimer_GetPrescaler(XScuTimer *InstancePtr)
{
 1018164:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018168:	e2506000 	subs	r6, r0, #0
 101816c:	0a000014 	beq	10181c4 <XScuTimer_GetPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018170:	e5962008 	ldr	r2, [r6, #8]
 1018174:	e3013111 	movw	r3, #4369	; 0x1111
 1018178:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101817c:	e3015f58 	movw	r5, #8024	; 0x1f58
 1018180:	e340510c 	movt	r5, #268	; 0x10c
 1018184:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018188:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101818c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018190:	1a000003 	bne	10181a4 <XScuTimer_GetPrescaler+0x40>

	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1018194:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 1018198:	e5930008 	ldr	r0, [r3, #8]
				    XSCUTIMER_CONTROL_OFFSET);
	ControlReg &= XSCUTIMER_CONTROL_PRESCALER_MASK;

	return (u8)(ControlReg >> XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 101819c:	e7e70450 	ubfx	r0, r0, #8, #8
 10181a0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10181a4:	e30b0e90 	movw	r0, #48784	; 0xbe90
 10181a8:	e300110d 	movw	r1, #269	; 0x10d
 10181ac:	e3400106 	movt	r0, #262	; 0x106
 10181b0:	eb000361 	bl	1018f3c <Xil_Assert>
 10181b4:	e3a03001 	mov	r3, #1
 10181b8:	e1a00004 	mov	r0, r4
 10181bc:	e5853000 	str	r3, [r5]
}
 10181c0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10181c4:	e30b0e90 	movw	r0, #48784	; 0xbe90
 10181c8:	e3a01f43 	mov	r1, #268	; 0x10c
 10181cc:	e3400106 	movt	r0, #262	; 0x106
 10181d0:	eb000359 	bl	1018f3c <Xil_Assert>
 10181d4:	e3013f58 	movw	r3, #8024	; 0x1f58
 10181d8:	e3a02001 	mov	r2, #1
 10181dc:	e340310c 	movt	r3, #268	; 0x10c
 10181e0:	e1a00006 	mov	r0, r6
 10181e4:	e5832000 	str	r2, [r3]
 10181e8:	e8bd8070 	pop	{r4, r5, r6, pc}

010181ec <XScuTimer_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XScuTimer_SelfTest(XScuTimer *InstancePtr)
{
 10181ec:	e92d4070 	push	{r4, r5, r6, lr}

	/*
	 * Assert to ensure the inputs are valid and the instance has been
	 * initialized.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 10181f0:	e2505000 	subs	r5, r0, #0
 10181f4:	0a000021 	beq	1018280 <XScuTimer_SelfTest+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10181f8:	e5952008 	ldr	r2, [r5, #8]
 10181fc:	e3013111 	movw	r3, #4369	; 0x1111
 1018200:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018204:	e3016f58 	movw	r6, #8024	; 0x1f58
 1018208:	e340610c 	movt	r6, #268	; 0x10c
 101820c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018210:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018214:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018218:	1a000010 	bne	1018260 <XScuTimer_SelfTest+0x74>

	/*
	 * Save the contents of the Control Register and stop the timer.
	 */
	CtrlOrig = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 101821c:	e5952004 	ldr	r2, [r5, #4]
	*LocalAddr = Value;
 1018220:	e30f400f 	movw	r4, #61455	; 0xf00f
 1018224:	e34a455a 	movt	r4, #42330	; 0xa55a
	return *(volatile u32 *) Addr;
 1018228:	e5923008 	ldr	r3, [r2, #8]
				  XSCUTIMER_CONTROL_OFFSET);
	Register = CtrlOrig & (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 101822c:	e3c31001 	bic	r1, r3, #1
	*LocalAddr = Value;
 1018230:	e5821008 	str	r1, [r2, #8]
	return *(volatile u32 *) Addr;
 1018234:	e5952004 	ldr	r2, [r5, #4]
 1018238:	e5921000 	ldr	r1, [r2]
	*LocalAddr = Value;
 101823c:	e5824000 	str	r4, [r2]
	return *(volatile u32 *) Addr;
 1018240:	e5952004 	ldr	r2, [r5, #4]
 1018244:	e5920000 	ldr	r0, [r2]
	*LocalAddr = Value;
 1018248:	e5821000 	str	r1, [r2]

	/*
	 * Restore the contents of the Load Register and Control Register.
	 */
	XScuTimer_LoadTimer(InstancePtr, LoadOrig);
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
 101824c:	e5952004 	ldr	r2, [r5, #4]

	/*
	 * Return a Failure if the contents of the Load Register do not
	 * match with the value written to it.
	 */
	if (Register != XSCUTIMER_SELFTEST_VALUE) {
 1018250:	e0500004 	subs	r0, r0, r4
 1018254:	13a00001 	movne	r0, #1
 1018258:	e5823008 	str	r3, [r2, #8]
 101825c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018260:	e30b0e9c 	movw	r0, #48796	; 0xbe9c
 1018264:	e3a0105b 	mov	r1, #91	; 0x5b
 1018268:	e3400106 	movt	r0, #262	; 0x106
 101826c:	eb000332 	bl	1018f3c <Xil_Assert>
 1018270:	e3a03001 	mov	r3, #1
 1018274:	e1a00004 	mov	r0, r4
 1018278:	e5863000 	str	r3, [r6]
	else {
		Status = (s32)XST_SUCCESS;
	}

	return Status;
}
 101827c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018280:	e30b0e9c 	movw	r0, #48796	; 0xbe9c
 1018284:	e3a0105a 	mov	r1, #90	; 0x5a
 1018288:	e3400106 	movt	r0, #262	; 0x106
 101828c:	eb00032a 	bl	1018f3c <Xil_Assert>
 1018290:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018294:	e3a02001 	mov	r2, #1
 1018298:	e340310c 	movt	r3, #268	; 0x10c
 101829c:	e1a00005 	mov	r0, r5
 10182a0:	e5832000 	str	r2, [r3]
 10182a4:	e8bd8070 	pop	{r4, r5, r6, pc}

010182a8 <XScuTimer_LookupConfig>:
{
	XScuTimer_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < XPAR_XSCUTIMER_NUM_INSTANCES; Index++) {
		if (XScuTimer_ConfigTable[Index].DeviceId == DeviceId) {
 10182a8:	e30c32c0 	movw	r3, #49856	; 0xc2c0
 10182ac:	e3403106 	movt	r3, #262	; 0x106
 10182b0:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuTimer_Config *)CfgPtr;
}
 10182b4:	e1520000 	cmp	r2, r0
 10182b8:	01a00003 	moveq	r0, r3
 10182bc:	13a00000 	movne	r0, #0
 10182c0:	e12fff1e 	bx	lr

010182c4 <StubStatusHandler>:
{
	(const void) CallBackRef;
	(void) StatusEvent;
	(void) ByteCount;

	Xil_AssertVoidAlways();
 10182c4:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
{
 10182c8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 10182cc:	e300134b 	movw	r1, #843	; 0x34b
 10182d0:	e3400106 	movt	r0, #262	; 0x106
 10182d4:	eb000318 	bl	1018f3c <Xil_Assert>
 10182d8:	e3013f58 	movw	r3, #8024	; 0x1f58
 10182dc:	e3a02001 	mov	r2, #1
 10182e0:	e340310c 	movt	r3, #268	; 0x10c
 10182e4:	e5832000 	str	r2, [r3]
}
 10182e8:	e8bd8010 	pop	{r4, pc}

010182ec <XSpiPs_Transfer>:
{
 10182ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10182f0:	e2504000 	subs	r4, r0, #0
{
 10182f4:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertNonvoid(InstancePtr != NULL);
 10182f8:	0a000061 	beq	1018484 <XSpiPs_Transfer+0x198>
 10182fc:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1018300:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018304:	e340510c 	movt	r5, #268	; 0x10c
 1018308:	e3a06000 	mov	r6, #0
 101830c:	e1a07001 	mov	r7, r1
 1018310:	e5856000 	str	r6, [r5]
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1018314:	0a000064 	beq	10184ac <XSpiPs_Transfer+0x1c0>
	Xil_AssertNonvoid(ByteCount > 0U);
 1018318:	e3530000 	cmp	r3, #0
 101831c:	0a00004a 	beq	101844c <XSpiPs_Transfer+0x160>
	Xil_AssertNonvoid(InstancePtr->IsReady == (u32)XIL_COMPONENT_IS_READY);
 1018320:	e594c00c 	ldr	ip, [r4, #12]
 1018324:	e3011111 	movw	r1, #4369	; 0x1111
 1018328:	e3411111 	movt	r1, #4369	; 0x1111
 101832c:	e15c0001 	cmp	ip, r1
 1018330:	1a00002b 	bne	10183e4 <XSpiPs_Transfer+0xf8>
	if (InstancePtr->IsBusy == TRUE) {
 1018334:	e5941020 	ldr	r1, [r4, #32]
 1018338:	e3510001 	cmp	r1, #1
 101833c:	0a00004d 	beq	1018478 <XSpiPs_Transfer+0x18c>
		InstancePtr->IsBusy = TRUE;
 1018340:	e3a01001 	mov	r1, #1
		InstancePtr->SendBufferPtr = SendBufPtr;
 1018344:	e5847010 	str	r7, [r4, #16]
		InstancePtr->RequestedBytes = ByteCount;
 1018348:	e1c421f4 	strd	r2, [r4, #20]
		InstancePtr->RemainingBytes = ByteCount;
 101834c:	e584301c 	str	r3, [r4, #28]
		InstancePtr->IsBusy = TRUE;
 1018350:	e5841020 	str	r1, [r4, #32]
	if (XSpiPs_IsManualChipSelect(InstancePtr) != FALSE) {
 1018354:	eb0009bb 	bl	101aa48 <XSpiPs_GetOptions>
 1018358:	e3100010 	tst	r0, #16
 101835c:	1a000029 	bne	1018408 <XSpiPs_Transfer+0x11c>
		XSpiPs_Enable(InstancePtr);
 1018360:	e5943004 	ldr	r3, [r4, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1018364:	e3a01001 	mov	r1, #1
 1018368:	e3a02043 	mov	r2, #67	; 0x43
 101836c:	e5831014 	str	r1, [r3, #20]
		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress, XSPIPS_SR_OFFSET,
 1018370:	e5943004 	ldr	r3, [r4, #4]
 1018374:	e5832004 	str	r2, [r3, #4]
		while ((InstancePtr->RemainingBytes > 0U) &&
 1018378:	e594301c 	ldr	r3, [r4, #28]
 101837c:	e3530000 	cmp	r3, #0
 1018380:	15942010 	ldrne	r2, [r4, #16]
 1018384:	12820080 	addne	r0, r2, #128	; 0x80
 1018388:	1a000002 	bne	1018398 <XSpiPs_Transfer+0xac>
 101838c:	ea00000a 	b	10183bc <XSpiPs_Transfer+0xd0>
 1018390:	e1520000 	cmp	r2, r0
 1018394:	0a000008 	beq	10183bc <XSpiPs_Transfer+0xd0>
			XSpiPs_SendByte(InstancePtr->Config.BaseAddress,
 1018398:	e4d21001 	ldrb	r1, [r2], #1
 101839c:	e5943004 	ldr	r3, [r4, #4]
 10183a0:	e583101c 	str	r1, [r3, #28]
			InstancePtr->RemainingBytes--;
 10183a4:	e594301c 	ldr	r3, [r4, #28]
                  InstancePtr->SendBufferPtr += 1;
 10183a8:	e5842010 	str	r2, [r4, #16]
			InstancePtr->RemainingBytes--;
 10183ac:	e2433001 	sub	r3, r3, #1
		while ((InstancePtr->RemainingBytes > 0U) &&
 10183b0:	e3530000 	cmp	r3, #0
			InstancePtr->RemainingBytes--;
 10183b4:	e584301c 	str	r3, [r4, #28]
		while ((InstancePtr->RemainingBytes > 0U) &&
 10183b8:	1afffff4 	bne	1018390 <XSpiPs_Transfer+0xa4>
		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
 10183bc:	e5943004 	ldr	r3, [r4, #4]
 10183c0:	e3a02027 	mov	r2, #39	; 0x27
	     if ((XSpiPs_IsManualStart(InstancePtr) == TRUE)
 10183c4:	e1a00004 	mov	r0, r4
 10183c8:	e5832008 	str	r2, [r3, #8]
 10183cc:	eb00099d 	bl	101aa48 <XSpiPs_GetOptions>
 10183d0:	e3100020 	tst	r0, #32
 10183d4:	1a000012 	bne	1018424 <XSpiPs_Transfer+0x138>
		StatusTransfer = (s32)XST_SUCCESS;
 10183d8:	e3a00000 	mov	r0, #0
}
 10183dc:	e28dd00c 	add	sp, sp, #12
 10183e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == (u32)XIL_COMPONENT_IS_READY);
 10183e4:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10183e8:	e300114a 	movw	r1, #330	; 0x14a
 10183ec:	e3400106 	movt	r0, #262	; 0x106
 10183f0:	eb0002d1 	bl	1018f3c <Xil_Assert>
 10183f4:	e1a00006 	mov	r0, r6
 10183f8:	e3a03001 	mov	r3, #1
 10183fc:	e5853000 	str	r3, [r5]
}
 1018400:	e28dd00c 	add	sp, sp, #12
 1018404:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	return *(volatile u32 *) Addr;
 1018408:	e5942004 	ldr	r2, [r4, #4]
		ConfigReg |= InstancePtr->SlaveSelect;
 101840c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1018410:	e5923000 	ldr	r3, [r2]
		ConfigReg &= (u32)(~XSPIPS_CR_SSCTRL_MASK);
 1018414:	e3c33b0f 	bic	r3, r3, #15360	; 0x3c00
		ConfigReg |= InstancePtr->SlaveSelect;
 1018418:	e1833001 	orr	r3, r3, r1
	*LocalAddr = Value;
 101841c:	e5823000 	str	r3, [r2]
 1018420:	eaffffce 	b	1018360 <XSpiPs_Transfer+0x74>
		&& (XSpiPs_IsMaster(InstancePtr) == TRUE)) {
 1018424:	e1a00004 	mov	r0, r4
 1018428:	eb000986 	bl	101aa48 <XSpiPs_GetOptions>
 101842c:	e3100001 	tst	r0, #1
 1018430:	0affffe8 	beq	10183d8 <XSpiPs_Transfer+0xec>
	return *(volatile u32 *) Addr;
 1018434:	e5942004 	ldr	r2, [r4, #4]
		StatusTransfer = (s32)XST_SUCCESS;
 1018438:	e3a00000 	mov	r0, #0
 101843c:	e5923000 	ldr	r3, [r2]
				ConfigReg |= XSPIPS_CR_MANSTRT_MASK;
 1018440:	e3833801 	orr	r3, r3, #65536	; 0x10000
	*LocalAddr = Value;
 1018444:	e5823000 	str	r3, [r2]
 1018448:	eaffffec 	b	1018400 <XSpiPs_Transfer+0x114>
	Xil_AssertNonvoid(ByteCount > 0U);
 101844c:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018450:	e3001149 	movw	r1, #329	; 0x149
 1018454:	e3400106 	movt	r0, #262	; 0x106
 1018458:	e58d3004 	str	r3, [sp, #4]
 101845c:	eb0002b6 	bl	1018f3c <Xil_Assert>
 1018460:	e59d3004 	ldr	r3, [sp, #4]
 1018464:	e3a02001 	mov	r2, #1
 1018468:	e5852000 	str	r2, [r5]
 101846c:	e1a00003 	mov	r0, r3
}
 1018470:	e28dd00c 	add	sp, sp, #12
 1018474:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		StatusTransfer = (s32)XST_DEVICE_BUSY;
 1018478:	e3a00015 	mov	r0, #21
}
 101847c:	e28dd00c 	add	sp, sp, #12
 1018480:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018484:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018488:	e3001147 	movw	r1, #327	; 0x147
 101848c:	e3400106 	movt	r0, #262	; 0x106
 1018490:	eb0002a9 	bl	1018f3c <Xil_Assert>
 1018494:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018498:	e3a02001 	mov	r2, #1
 101849c:	e340310c 	movt	r3, #268	; 0x10c
 10184a0:	e1a00004 	mov	r0, r4
 10184a4:	e5832000 	str	r2, [r3]
 10184a8:	eaffffd4 	b	1018400 <XSpiPs_Transfer+0x114>
	Xil_AssertNonvoid(SendBufPtr != NULL);
 10184ac:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10184b0:	e3a01f52 	mov	r1, #328	; 0x148
 10184b4:	e3400106 	movt	r0, #262	; 0x106
 10184b8:	eb00029f 	bl	1018f3c <Xil_Assert>
 10184bc:	e3a03001 	mov	r3, #1
 10184c0:	e1a00007 	mov	r0, r7
 10184c4:	e5853000 	str	r3, [r5]
 10184c8:	eaffffcc 	b	1018400 <XSpiPs_Transfer+0x114>

010184cc <XSpiPs_PolledTransfer>:
{
 10184cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10184d0:	e2504000 	subs	r4, r0, #0
{
 10184d4:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertNonvoid(InstancePtr != NULL);
 10184d8:	0a00007d 	beq	10186d4 <XSpiPs_PolledTransfer+0x208>
 10184dc:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertNonvoid(SendBufPtr != NULL);
 10184e0:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 10184e4:	e340510c 	movt	r5, #268	; 0x10c
 10184e8:	e3a06000 	mov	r6, #0
 10184ec:	e1a07001 	mov	r7, r1
 10184f0:	e5856000 	str	r6, [r5]
	Xil_AssertNonvoid(SendBufPtr != NULL);
 10184f4:	0a000080 	beq	10186fc <XSpiPs_PolledTransfer+0x230>
	Xil_AssertNonvoid(ByteCount > 0U);
 10184f8:	e3530000 	cmp	r3, #0
 10184fc:	0a000066 	beq	101869c <XSpiPs_PolledTransfer+0x1d0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018500:	e594c00c 	ldr	ip, [r4, #12]
 1018504:	e3011111 	movw	r1, #4369	; 0x1111
 1018508:	e3411111 	movt	r1, #4369	; 0x1111
 101850c:	e15c0001 	cmp	ip, r1
 1018510:	1a00004c 	bne	1018648 <XSpiPs_PolledTransfer+0x17c>
	if (InstancePtr->IsBusy == TRUE) {
 1018514:	e5941020 	ldr	r1, [r4, #32]
 1018518:	e3510001 	cmp	r1, #1
 101851c:	0a000069 	beq	10186c8 <XSpiPs_PolledTransfer+0x1fc>
		InstancePtr->IsBusy = TRUE;
 1018520:	e3a01001 	mov	r1, #1
		InstancePtr->SendBufferPtr = SendBufPtr;
 1018524:	e5847010 	str	r7, [r4, #16]
		InstancePtr->RequestedBytes = ByteCount;
 1018528:	e1c421f4 	strd	r2, [r4, #20]
		InstancePtr->RemainingBytes = ByteCount;
 101852c:	e584301c 	str	r3, [r4, #28]
		InstancePtr->IsBusy = TRUE;
 1018530:	e5841020 	str	r1, [r4, #32]
	     if (XSpiPs_IsManualChipSelect(InstancePtr) == TRUE) {
 1018534:	eb000943 	bl	101aa48 <XSpiPs_GetOptions>
 1018538:	e3100010 	tst	r0, #16
 101853c:	1a00004f 	bne	1018680 <XSpiPs_PolledTransfer+0x1b4>
		XSpiPs_Enable(InstancePtr);
 1018540:	e5943004 	ldr	r3, [r4, #4]
 1018544:	e3a02001 	mov	r2, #1
 1018548:	e5832014 	str	r2, [r3, #20]
		while((InstancePtr->RemainingBytes > (u32)0U) ||
 101854c:	e594501c 	ldr	r5, [r4, #28]
 1018550:	e3550000 	cmp	r5, #0
 1018554:	1a000020 	bne	10185dc <XSpiPs_PolledTransfer+0x110>
 1018558:	e5943018 	ldr	r3, [r4, #24]
 101855c:	e3530000 	cmp	r3, #0
 1018560:	0a00006d 	beq	101871c <XSpiPs_PolledTransfer+0x250>
			if ((XSpiPs_IsManualStart(InstancePtr) == TRUE)
 1018564:	e1a00004 	mov	r0, r4
 1018568:	eb000936 	bl	101aa48 <XSpiPs_GetOptions>
 101856c:	e3100020 	tst	r0, #32
 1018570:	1a00002c 	bne	1018628 <XSpiPs_PolledTransfer+0x15c>
			StatusReg = XSpiPs_ReadReg(
 1018574:	e5941004 	ldr	r1, [r4, #4]
 1018578:	e2812004 	add	r2, r1, #4
	return *(volatile u32 *) Addr;
 101857c:	e5923000 	ldr	r3, [r2]
				if ( (StatusReg & XSPIPS_IXR_MODF_MASK) != 0U) {
 1018580:	e3130002 	tst	r3, #2
 1018584:	1a000038 	bne	101866c <XSpiPs_PolledTransfer+0x1a0>
	        while (CheckTransfer == 0U){
 1018588:	e3130004 	tst	r3, #4
 101858c:	0afffffa 	beq	101857c <XSpiPs_PolledTransfer+0xb0>
			while (TransCount != (u32)0U) {
 1018590:	e3550000 	cmp	r5, #0
 1018594:	0affffec 	beq	101854c <XSpiPs_PolledTransfer+0x80>
 1018598:	e5943014 	ldr	r3, [r4, #20]
 101859c:	ea000000 	b	10185a4 <XSpiPs_PolledTransfer+0xd8>
 10185a0:	e5941004 	ldr	r1, [r4, #4]
 10185a4:	e5912020 	ldr	r2, [r1, #32]
				if (InstancePtr->RecvBufferPtr != NULL) {
 10185a8:	e3530000 	cmp	r3, #0
				TempData = (u8)XSpiPs_RecvByte(
 10185ac:	15c32000 	strbne	r2, [r3]
					InstancePtr->RecvBufferPtr += 1;
 10185b0:	15943014 	ldrne	r3, [r4, #20]
				InstancePtr->RequestedBytes--;
 10185b4:	e5942018 	ldr	r2, [r4, #24]
					InstancePtr->RecvBufferPtr += 1;
 10185b8:	12833001 	addne	r3, r3, #1
 10185bc:	15843014 	strne	r3, [r4, #20]
			while (TransCount != (u32)0U) {
 10185c0:	e2555001 	subs	r5, r5, #1
				InstancePtr->RequestedBytes--;
 10185c4:	e2422001 	sub	r2, r2, #1
 10185c8:	e5842018 	str	r2, [r4, #24]
			while (TransCount != (u32)0U) {
 10185cc:	1afffff3 	bne	10185a0 <XSpiPs_PolledTransfer+0xd4>
		while((InstancePtr->RemainingBytes > (u32)0U) ||
 10185d0:	e594501c 	ldr	r5, [r4, #28]
 10185d4:	e3550000 	cmp	r5, #0
 10185d8:	0affffde 	beq	1018558 <XSpiPs_PolledTransfer+0x8c>
 10185dc:	e5942010 	ldr	r2, [r4, #16]
 10185e0:	e3a05000 	mov	r5, #0
 10185e4:	ea000001 	b	10185f0 <XSpiPs_PolledTransfer+0x124>
			while ((InstancePtr->RemainingBytes > (u32)0U) &&
 10185e8:	e3550080 	cmp	r5, #128	; 0x80
 10185ec:	0affffdc 	beq	1018564 <XSpiPs_PolledTransfer+0x98>
				XSpiPs_SendByte(InstancePtr->Config.BaseAddress,
 10185f0:	e4d21001 	ldrb	r1, [r2], #1
				++TransCount;
 10185f4:	e2855001 	add	r5, r5, #1
				XSpiPs_SendByte(InstancePtr->Config.BaseAddress,
 10185f8:	e5943004 	ldr	r3, [r4, #4]
	*LocalAddr = Value;
 10185fc:	e583101c 	str	r1, [r3, #28]
				InstancePtr->RemainingBytes--;
 1018600:	e594301c 	ldr	r3, [r4, #28]
				InstancePtr->SendBufferPtr += 1;
 1018604:	e5842010 	str	r2, [r4, #16]
				InstancePtr->RemainingBytes--;
 1018608:	e2433001 	sub	r3, r3, #1
			while ((InstancePtr->RemainingBytes > (u32)0U) &&
 101860c:	e3530000 	cmp	r3, #0
				InstancePtr->RemainingBytes--;
 1018610:	e584301c 	str	r3, [r4, #28]
			while ((InstancePtr->RemainingBytes > (u32)0U) &&
 1018614:	1afffff3 	bne	10185e8 <XSpiPs_PolledTransfer+0x11c>
			if ((XSpiPs_IsManualStart(InstancePtr) == TRUE)
 1018618:	e1a00004 	mov	r0, r4
 101861c:	eb000909 	bl	101aa48 <XSpiPs_GetOptions>
 1018620:	e3100020 	tst	r0, #32
 1018624:	0affffd2 	beq	1018574 <XSpiPs_PolledTransfer+0xa8>
				&& (XSpiPs_IsMaster(InstancePtr) == TRUE)) {
 1018628:	e1a00004 	mov	r0, r4
 101862c:	eb000905 	bl	101aa48 <XSpiPs_GetOptions>
 1018630:	e3100001 	tst	r0, #1
	return *(volatile u32 *) Addr;
 1018634:	15942004 	ldrne	r2, [r4, #4]
 1018638:	15923000 	ldrne	r3, [r2]
				ConfigReg |= XSPIPS_CR_MANSTRT_MASK;
 101863c:	13833801 	orrne	r3, r3, #65536	; 0x10000
	*LocalAddr = Value;
 1018640:	15823000 	strne	r3, [r2]
 1018644:	eaffffca 	b	1018574 <XSpiPs_PolledTransfer+0xa8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018648:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 101864c:	e30011e7 	movw	r1, #487	; 0x1e7
 1018650:	e3400106 	movt	r0, #262	; 0x106
 1018654:	eb000238 	bl	1018f3c <Xil_Assert>
 1018658:	e1a00006 	mov	r0, r6
 101865c:	e3a03001 	mov	r3, #1
 1018660:	e5853000 	str	r3, [r5]
}
 1018664:	e28dd00c 	add	sp, sp, #12
 1018668:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 101866c:	e3a03002 	mov	r3, #2
					Status_Polled = (s32)XST_SEND_ERROR;
 1018670:	e3a0001c 	mov	r0, #28
 1018674:	e5823000 	str	r3, [r2]
}
 1018678:	e28dd00c 	add	sp, sp, #12
 101867c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	return *(volatile u32 *) Addr;
 1018680:	e5942004 	ldr	r2, [r4, #4]
			ConfigReg |= InstancePtr->SlaveSelect;
 1018684:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1018688:	e5923000 	ldr	r3, [r2]
			ConfigReg &= (u32)(~XSPIPS_CR_SSCTRL_MASK);
 101868c:	e3c33b0f 	bic	r3, r3, #15360	; 0x3c00
			ConfigReg |= InstancePtr->SlaveSelect;
 1018690:	e1833001 	orr	r3, r3, r1
	*LocalAddr = Value;
 1018694:	e5823000 	str	r3, [r2]
 1018698:	eaffffa8 	b	1018540 <XSpiPs_PolledTransfer+0x74>
	Xil_AssertNonvoid(ByteCount > 0U);
 101869c:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10186a0:	e30011e6 	movw	r1, #486	; 0x1e6
 10186a4:	e3400106 	movt	r0, #262	; 0x106
 10186a8:	e58d3004 	str	r3, [sp, #4]
 10186ac:	eb000222 	bl	1018f3c <Xil_Assert>
 10186b0:	e59d3004 	ldr	r3, [sp, #4]
 10186b4:	e3a02001 	mov	r2, #1
 10186b8:	e5852000 	str	r2, [r5]
 10186bc:	e1a00003 	mov	r0, r3
}
 10186c0:	e28dd00c 	add	sp, sp, #12
 10186c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		Status_Polled = (s32)XST_DEVICE_BUSY;
 10186c8:	e3a00015 	mov	r0, #21
}
 10186cc:	e28dd00c 	add	sp, sp, #12
 10186d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10186d4:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10186d8:	e3a01f79 	mov	r1, #484	; 0x1e4
 10186dc:	e3400106 	movt	r0, #262	; 0x106
 10186e0:	eb000215 	bl	1018f3c <Xil_Assert>
 10186e4:	e3013f58 	movw	r3, #8024	; 0x1f58
 10186e8:	e3a02001 	mov	r2, #1
 10186ec:	e340310c 	movt	r3, #268	; 0x10c
 10186f0:	e1a00004 	mov	r0, r4
 10186f4:	e5832000 	str	r2, [r3]
 10186f8:	eaffffd9 	b	1018664 <XSpiPs_PolledTransfer+0x198>
	Xil_AssertNonvoid(SendBufPtr != NULL);
 10186fc:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018700:	e30011e5 	movw	r1, #485	; 0x1e5
 1018704:	e3400106 	movt	r0, #262	; 0x106
 1018708:	eb00020b 	bl	1018f3c <Xil_Assert>
 101870c:	e3a03001 	mov	r3, #1
 1018710:	e1a00007 	mov	r0, r7
 1018714:	e5853000 	str	r3, [r5]
 1018718:	eaffffd1 	b	1018664 <XSpiPs_PolledTransfer+0x198>
		if (XSpiPs_IsManualChipSelect(InstancePtr) == TRUE) {
 101871c:	e1a00004 	mov	r0, r4
 1018720:	eb0008c8 	bl	101aa48 <XSpiPs_GetOptions>
 1018724:	e3100010 	tst	r0, #16
	return *(volatile u32 *) Addr;
 1018728:	15942004 	ldrne	r2, [r4, #4]
 101872c:	15923000 	ldrne	r3, [r2]
			ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1018730:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 1018734:	15823000 	strne	r3, [r2]
		InstancePtr->IsBusy = FALSE;
 1018738:	e3a03000 	mov	r3, #0
		XSpiPs_Disable(InstancePtr);
 101873c:	e5942004 	ldr	r2, [r4, #4]
		Status_Polled = (s32)XST_SUCCESS;
 1018740:	e1a00003 	mov	r0, r3
		InstancePtr->IsBusy = FALSE;
 1018744:	e5843020 	str	r3, [r4, #32]
 1018748:	e5823014 	str	r3, [r2, #20]
		Status_Polled = (s32)XST_SUCCESS;
 101874c:	eaffffc4 	b	1018664 <XSpiPs_PolledTransfer+0x198>

01018750 <XSpiPs_SetSlaveSelect>:
{
 1018750:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018754:	e2506000 	subs	r6, r0, #0
 1018758:	0a00002a 	beq	1018808 <XSpiPs_SetSlaveSelect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101875c:	e596200c 	ldr	r2, [r6, #12]
 1018760:	e3013111 	movw	r3, #4369	; 0x1111
 1018764:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018768:	e3015f58 	movw	r5, #8024	; 0x1f58
 101876c:	e340510c 	movt	r5, #268	; 0x10c
 1018770:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018774:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018778:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101877c:	1a000014 	bne	10187d4 <XSpiPs_SetSlaveSelect+0x84>
	Xil_AssertNonvoid(SlaveSel <= XSPIPS_CR_SSCTRL_MAXIMUM);
 1018780:	e351000f 	cmp	r1, #15
 1018784:	e1a07001 	mov	r7, r1
 1018788:	8a000019 	bhi	10187f4 <XSpiPs_SetSlaveSelect+0xa4>
	if (InstancePtr->IsBusy == TRUE) {
 101878c:	e5963020 	ldr	r3, [r6, #32]
 1018790:	e3530001 	cmp	r3, #1
 1018794:	0a000019 	beq	1018800 <XSpiPs_SetSlaveSelect+0xb0>
		if ( XSpiPs_IsDecodeSSelect( InstancePtr ) == TRUE) {
 1018798:	eb0008aa 	bl	101aa48 <XSpiPs_GetOptions>
 101879c:	e3100008 	tst	r0, #8
	return *(volatile u32 *) Addr;
 10187a0:	e5963004 	ldr	r3, [r6, #4]
			InstancePtr->SlaveSelect = ((~(1U << SlaveSel)) & \
 10187a4:	03a01001 	moveq	r1, #1
			InstancePtr->SlaveSelect = ((u32)SlaveSel) << XSPIPS_CR_SSCTRL_SHIFT;
 10187a8:	11a01507 	lslne	r1, r7, #10
			InstancePtr->SlaveSelect = ((~(1U << SlaveSel)) & \
 10187ac:	01e07711 	mvneq	r7, r1, lsl r7
	    Status_Slave = (s32)XST_SUCCESS;
 10187b0:	e3a00000 	mov	r0, #0
				XSPIPS_CR_SSCTRL_MAXIMUM) << XSPIPS_CR_SSCTRL_SHIFT;
 10187b4:	01a07507 	lsleq	r7, r7, #10
 10187b8:	02071b0f 	andeq	r1, r7, #15360	; 0x3c00
 10187bc:	e5861024 	str	r1, [r6, #36]	; 0x24
 10187c0:	e5937000 	ldr	r7, [r3]
		ConfigReg &= (u32)(~XSPIPS_CR_SSCTRL_MASK);
 10187c4:	e3c77b0f 	bic	r7, r7, #15360	; 0x3c00
		ConfigReg |= InstancePtr->SlaveSelect;
 10187c8:	e1877001 	orr	r7, r7, r1
	*LocalAddr = Value;
 10187cc:	e5837000 	str	r7, [r3]
	    Status_Slave = (s32)XST_SUCCESS;
 10187d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10187d4:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10187d8:	e3a01e2a 	mov	r1, #672	; 0x2a0
	Xil_AssertNonvoid(SlaveSel <= XSPIPS_CR_SSCTRL_MAXIMUM);
 10187dc:	e3400106 	movt	r0, #262	; 0x106
 10187e0:	eb0001d5 	bl	1018f3c <Xil_Assert>
 10187e4:	e3a03001 	mov	r3, #1
 10187e8:	e1a00004 	mov	r0, r4
 10187ec:	e5853000 	str	r3, [r5]
 10187f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 10187f4:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10187f8:	e30012a1 	movw	r1, #673	; 0x2a1
 10187fc:	eafffff6 	b	10187dc <XSpiPs_SetSlaveSelect+0x8c>
		Status_Slave = (s32)XST_DEVICE_BUSY;
 1018800:	e3a00015 	mov	r0, #21
}
 1018804:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018808:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 101880c:	e300129f 	movw	r1, #671	; 0x29f
 1018810:	e3400106 	movt	r0, #262	; 0x106
 1018814:	eb0001c8 	bl	1018f3c <Xil_Assert>
 1018818:	e3013f58 	movw	r3, #8024	; 0x1f58
 101881c:	e3a02001 	mov	r2, #1
 1018820:	e340310c 	movt	r3, #268	; 0x10c
 1018824:	e1a00006 	mov	r0, r6
 1018828:	e5832000 	str	r2, [r3]
 101882c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01018830 <XSpiPs_GetSlaveSelect>:
{
 1018830:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018834:	e2506000 	subs	r6, r0, #0
 1018838:	0a00001c 	beq	10188b0 <XSpiPs_GetSlaveSelect+0x80>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101883c:	e596200c 	ldr	r2, [r6, #12]
 1018840:	e3013111 	movw	r3, #4369	; 0x1111
 1018844:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018848:	e3015f58 	movw	r5, #8024	; 0x1f58
 101884c:	e340510c 	movt	r5, #268	; 0x10c
 1018850:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018854:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018858:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101885c:	1a000007 	bne	1018880 <XSpiPs_GetSlaveSelect+0x50>
	ConfigReg >>= XSPIPS_CR_SSCTRL_SHIFT;
 1018860:	e5964024 	ldr	r4, [r6, #36]	; 0x24
	if ( XSpiPs_IsDecodeSSelect( InstancePtr ) == TRUE) {
 1018864:	eb000877 	bl	101aa48 <XSpiPs_GetOptions>
 1018868:	e3100008 	tst	r0, #8
 101886c:	e1a04524 	lsr	r4, r4, #10
	ConfigReg >>= XSPIPS_CR_SSCTRL_SHIFT;
 1018870:	e204000f 	and	r0, r4, #15
	if ( XSpiPs_IsDecodeSSelect( InstancePtr ) == TRUE) {
 1018874:	0a000009 	beq	10188a0 <XSpiPs_GetSlaveSelect+0x70>
 1018878:	e6ef0070 	uxtb	r0, r0
 101887c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018880:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018884:	e3a01fb7 	mov	r1, #732	; 0x2dc
 1018888:	e3400106 	movt	r0, #262	; 0x106
 101888c:	eb0001aa 	bl	1018f3c <Xil_Assert>
 1018890:	e3a03001 	mov	r3, #1
 1018894:	e1a00004 	mov	r0, r4
 1018898:	e5853000 	str	r3, [r5]
 101889c:	e8bd8070 	pop	{r4, r5, r6, pc}
		if(ConfigReg == 0x0FU) {
 10188a0:	e350000f 	cmp	r0, #15
			SlaveSel = ((~ConfigReg) & XSPIPS_CR_SSCTRL_MAXIMUM)/2U;
 10188a4:	11e04004 	mvnne	r4, r4
 10188a8:	17e200d4 	ubfxne	r0, r4, #1, #3
}
 10188ac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10188b0:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 10188b4:	e30012db 	movw	r1, #731	; 0x2db
 10188b8:	e3400106 	movt	r0, #262	; 0x106
 10188bc:	eb00019e 	bl	1018f3c <Xil_Assert>
 10188c0:	e3013f58 	movw	r3, #8024	; 0x1f58
 10188c4:	e3a02001 	mov	r2, #1
 10188c8:	e340310c 	movt	r3, #268	; 0x10c
 10188cc:	e1a00006 	mov	r0, r6
 10188d0:	e5832000 	str	r2, [r3]
 10188d4:	e8bd8070 	pop	{r4, r5, r6, pc}

010188d8 <XSpiPs_SetStatusHandler>:
	Xil_AssertVoid(InstancePtr != NULL);
 10188d8:	e3500000 	cmp	r0, #0
{
 10188dc:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10188e0:	0a000014 	beq	1018938 <XSpiPs_SetStatusHandler+0x60>
 10188e4:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(FunctionPtr != NULL);
 10188e8:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 10188ec:	e340410c 	movt	r4, #268	; 0x10c
 10188f0:	e3a03000 	mov	r3, #0
 10188f4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FunctionPtr != NULL);
 10188f8:	0a000017 	beq	101895c <XSpiPs_SetStatusHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10188fc:	e590c00c 	ldr	ip, [r0, #12]
 1018900:	e3013111 	movw	r3, #4369	; 0x1111
 1018904:	e3413111 	movt	r3, #4369	; 0x1111
 1018908:	e15c0003 	cmp	ip, r3
 101890c:	1a000002 	bne	101891c <XSpiPs_SetStatusHandler+0x44>
	InstancePtr->StatusHandler = FunctionPtr;
 1018910:	e5802028 	str	r2, [r0, #40]	; 0x28
	InstancePtr->StatusRef = CallBackRef;
 1018914:	e580102c 	str	r1, [r0, #44]	; 0x2c
 1018918:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101891c:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018920:	e300132e 	movw	r1, #814	; 0x32e
 1018924:	e3400106 	movt	r0, #262	; 0x106
 1018928:	eb000183 	bl	1018f3c <Xil_Assert>
 101892c:	e3a03001 	mov	r3, #1
 1018930:	e5843000 	str	r3, [r4]
}
 1018934:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018938:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 101893c:	e3a01fcb 	mov	r1, #812	; 0x32c
 1018940:	e3400106 	movt	r0, #262	; 0x106
 1018944:	eb00017c 	bl	1018f3c <Xil_Assert>
 1018948:	e3013f58 	movw	r3, #8024	; 0x1f58
 101894c:	e3a02001 	mov	r2, #1
 1018950:	e340310c 	movt	r3, #268	; 0x10c
 1018954:	e5832000 	str	r2, [r3]
 1018958:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FunctionPtr != NULL);
 101895c:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018960:	e300132d 	movw	r1, #813	; 0x32d
 1018964:	e3400106 	movt	r0, #262	; 0x106
 1018968:	eb000173 	bl	1018f3c <Xil_Assert>
 101896c:	e3a03001 	mov	r3, #1
 1018970:	e5843000 	str	r3, [r4]
 1018974:	e8bd8010 	pop	{r4, pc}

01018978 <XSpiPs_Abort>:
	u8 Temp;
	u32 Check;
#if !defined(versal)
	u32 Count;
#endif
	XSpiPs_Disable(InstancePtr);
 1018978:	e5903004 	ldr	r3, [r0, #4]
 101897c:	e3a02000 	mov	r2, #0
 1018980:	e5832014 	str	r2, [r3, #20]

	/*
	 * Clear the RX FIFO and drop any data.
	 */
	Check = (XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 1018984:	e590c004 	ldr	ip, [r0, #4]
	return *(volatile u32 *) Addr;
 1018988:	e59c3004 	ldr	r3, [ip, #4]
 101898c:	e28c1004 	add	r1, ip, #4
 1018990:	e28c2020 	add	r2, ip, #32
		XSPIPS_SR_OFFSET) & XSPIPS_IXR_RXNEMPTY_MASK);
	while (Check != (u32)0U) {
 1018994:	e3130010 	tst	r3, #16
 1018998:	0a000003 	beq	10189ac <XSpiPs_Abort+0x34>
 101899c:	e5923000 	ldr	r3, [r2]
 10189a0:	e5913000 	ldr	r3, [r1]
 10189a4:	e3130010 	tst	r3, #16
 10189a8:	1afffffb 	bne	101899c <XSpiPs_Abort+0x24>
{
 10189ac:	e3a03080 	mov	r3, #128	; 0x80

	/*
	 * Read all RX_FIFO entries
	 */
#if !defined(versal)
	for (Count = 0U; Count < XSPIPS_FIFO_DEPTH; Count++) {
 10189b0:	e2533001 	subs	r3, r3, #1
 10189b4:	e5921000 	ldr	r1, [r2]
 10189b8:	1afffffc 	bne	10189b0 <XSpiPs_Abort+0x38>
	*LocalAddr = Value;
 10189bc:	e3a02002 	mov	r2, #2
 10189c0:	e58c2004 	str	r2, [ip, #4]
	 */
	XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
			XSPIPS_SR_OFFSET,
			XSPIPS_IXR_MODF_MASK);

	InstancePtr->RemainingBytes = 0U;
 10189c4:	e580301c 	str	r3, [r0, #28]
	InstancePtr->RequestedBytes = 0U;
 10189c8:	e5803018 	str	r3, [r0, #24]
	InstancePtr->IsBusy = FALSE;
 10189cc:	e5803020 	str	r3, [r0, #32]
}
 10189d0:	e12fff1e 	bx	lr

010189d4 <XSpiPs_Reset>:
{
 10189d4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10189d8:	e2505000 	subs	r5, r0, #0
 10189dc:	0a000014 	beq	1018a34 <XSpiPs_Reset+0x60>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10189e0:	e595100c 	ldr	r1, [r5, #12]
 10189e4:	e3013111 	movw	r3, #4369	; 0x1111
 10189e8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10189ec:	e3014f58 	movw	r4, #8024	; 0x1f58
 10189f0:	e340410c 	movt	r4, #268	; 0x10c
 10189f4:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10189f8:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10189fc:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018a00:	1a000004 	bne	1018a18 <XSpiPs_Reset+0x44>
	XSpiPs_Abort(InstancePtr);
 1018a04:	ebffffdb 	bl	1018978 <XSpiPs_Abort>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1018a08:	e5953004 	ldr	r3, [r5, #4]
	*LocalAddr = Value;
 1018a0c:	e3a02802 	mov	r2, #131072	; 0x20000
 1018a10:	e5832000 	str	r2, [r3]
 1018a14:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018a18:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018a1c:	e3a010e9 	mov	r1, #233	; 0xe9
 1018a20:	e3400106 	movt	r0, #262	; 0x106
 1018a24:	eb000144 	bl	1018f3c <Xil_Assert>
 1018a28:	e3a03001 	mov	r3, #1
 1018a2c:	e5843000 	str	r3, [r4]
}
 1018a30:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018a34:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018a38:	e3a010e8 	mov	r1, #232	; 0xe8
 1018a3c:	e3400106 	movt	r0, #262	; 0x106
 1018a40:	eb00013d 	bl	1018f3c <Xil_Assert>
 1018a44:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018a48:	e3a02001 	mov	r2, #1
 1018a4c:	e340310c 	movt	r3, #268	; 0x10c
 1018a50:	e5832000 	str	r2, [r3]
 1018a54:	e8bd8070 	pop	{r4, r5, r6, pc}

01018a58 <XSpiPs_CfgInitialize>:
{
 1018a58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018a5c:	e2504000 	subs	r4, r0, #0
 1018a60:	0a00001e 	beq	1018ae0 <XSpiPs_CfgInitialize+0x88>
 1018a64:	e3016f58 	movw	r6, #8024	; 0x1f58
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1018a68:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018a6c:	e340610c 	movt	r6, #268	; 0x10c
 1018a70:	e3a05000 	mov	r5, #0
 1018a74:	e1a07001 	mov	r7, r1
 1018a78:	e5865000 	str	r5, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1018a7c:	0a000021 	beq	1018b08 <XSpiPs_CfgInitialize+0xb0>
	if (InstancePtr->IsBusy == TRUE) {
 1018a80:	e5943020 	ldr	r3, [r4, #32]
 1018a84:	e3530001 	cmp	r3, #1
 1018a88:	0a000012 	beq	1018ad8 <XSpiPs_CfgInitialize+0x80>
		InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 1018a8c:	e591e008 	ldr	lr, [r1, #8]
		InstancePtr->StatusHandler = StubStatusHandler;
 1018a90:	e30832c4 	movw	r3, #33476	; 0x82c4
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1018a94:	e1d1c0b0 	ldrh	ip, [r1]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1018a98:	e3011111 	movw	r1, #4369	; 0x1111
		InstancePtr->StatusHandler = StubStatusHandler;
 1018a9c:	e3403101 	movt	r3, #257	; 0x101
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1018aa0:	e3411111 	movt	r1, #4369	; 0x1111
		InstancePtr->IsBusy = FALSE;
 1018aa4:	e5845020 	str	r5, [r4, #32]
		InstancePtr->Config.BaseAddress = EffectiveAddr;
 1018aa8:	e5842004 	str	r2, [r4, #4]
		InstancePtr->StatusHandler = StubStatusHandler;
 1018aac:	e5843028 	str	r3, [r4, #40]	; 0x28
		InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 1018ab0:	e584e008 	str	lr, [r4, #8]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1018ab4:	e1c4c0b0 	strh	ip, [r4]
		InstancePtr->SendBufferPtr = NULL;
 1018ab8:	e5845010 	str	r5, [r4, #16]
		InstancePtr->RecvBufferPtr = NULL;
 1018abc:	e5845014 	str	r5, [r4, #20]
		InstancePtr->RequestedBytes = 0U;
 1018ac0:	e5845018 	str	r5, [r4, #24]
		InstancePtr->RemainingBytes = 0U;
 1018ac4:	e584501c 	str	r5, [r4, #28]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1018ac8:	e584100c 	str	r1, [r4, #12]
		XSpiPs_Reset(InstancePtr);
 1018acc:	ebffffc0 	bl	10189d4 <XSpiPs_Reset>
		Status = (s32)XST_SUCCESS;
 1018ad0:	e1a00005 	mov	r0, r5
 1018ad4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 1018ad8:	e3a00005 	mov	r0, #5
}
 1018adc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018ae0:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018ae4:	e3a010aa 	mov	r1, #170	; 0xaa
 1018ae8:	e3400106 	movt	r0, #262	; 0x106
 1018aec:	eb000112 	bl	1018f3c <Xil_Assert>
 1018af0:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018af4:	e3a02001 	mov	r2, #1
 1018af8:	e340310c 	movt	r3, #268	; 0x10c
 1018afc:	e1a00004 	mov	r0, r4
 1018b00:	e5832000 	str	r2, [r3]
 1018b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1018b08:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018b0c:	e3a010ab 	mov	r1, #171	; 0xab
 1018b10:	e3400106 	movt	r0, #262	; 0x106
 1018b14:	eb000108 	bl	1018f3c <Xil_Assert>
 1018b18:	e3a03001 	mov	r3, #1
 1018b1c:	e1a00007 	mov	r0, r7
 1018b20:	e5863000 	str	r3, [r6]
 1018b24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01018b28 <XSpiPs_InterruptHandler>:
{
 1018b28:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1018b2c:	e2504000 	subs	r4, r0, #0
 1018b30:	0a000083 	beq	1018d44 <XSpiPs_InterruptHandler+0x21c>
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1018b34:	e594100c 	ldr	r1, [r4, #12]
 1018b38:	e3013111 	movw	r3, #4369	; 0x1111
 1018b3c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1018b40:	e3015f58 	movw	r5, #8024	; 0x1f58
 1018b44:	e340510c 	movt	r5, #268	; 0x10c
 1018b48:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1018b4c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1018b50:	e5852000 	str	r2, [r5]
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1018b54:	1a000055 	bne	1018cb0 <XSpiPs_InterruptHandler+0x188>
		XSpiPs_ReadReg(SpiPtr->Config.BaseAddress, XSPIPS_SR_OFFSET);
 1018b58:	e5943004 	ldr	r3, [r4, #4]
 1018b5c:	e3a02004 	mov	r2, #4
	return *(volatile u32 *) Addr;
 1018b60:	e5935004 	ldr	r5, [r3, #4]
	XSpiPs_WriteReg(SpiPtr->Config.BaseAddress, XSPIPS_SR_OFFSET,
 1018b64:	e2051043 	and	r1, r5, #67	; 0x43
	if ((u32)XSPIPS_IXR_MODF_MASK == (u32)(IntrStatus & XSPIPS_IXR_MODF_MASK)) {
 1018b68:	e3150002 	tst	r5, #2
	*LocalAddr = Value;
 1018b6c:	e5831004 	str	r1, [r3, #4]
	XSpiPs_WriteReg(SpiPtr->Config.BaseAddress, XSPIPS_IDR_OFFSET,
 1018b70:	e5943004 	ldr	r3, [r4, #4]
 1018b74:	e583200c 	str	r2, [r3, #12]
	if ((u32)XSPIPS_IXR_MODF_MASK == (u32)(IntrStatus & XSPIPS_IXR_MODF_MASK)) {
 1018b78:	1a000053 	bne	1018ccc <XSpiPs_InterruptHandler+0x1a4>
	if ((IntrStatus & XSPIPS_IXR_TXOW_MASK) != 0U) {
 1018b7c:	e3150004 	tst	r5, #4
 1018b80:	0a000034 	beq	1018c58 <XSpiPs_InterruptHandler+0x130>
		TransCount = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018b84:	e594201c 	ldr	r2, [r4, #28]
 1018b88:	e5941018 	ldr	r1, [r4, #24]
		while (TransCount != 0U) {
 1018b8c:	e5943004 	ldr	r3, [r4, #4]
 1018b90:	e0510002 	subs	r0, r1, r2
 1018b94:	0a00000e 	beq	1018bd4 <XSpiPs_InterruptHandler+0xac>
 1018b98:	e5942014 	ldr	r2, [r4, #20]
			if (SpiPtr->RecvBufferPtr != NULL) {
 1018b9c:	e3520000 	cmp	r2, #0
	return *(volatile u32 *) Addr;
 1018ba0:	e593c020 	ldr	ip, [r3, #32]
 1018ba4:	0a000005 	beq	1018bc0 <XSpiPs_InterruptHandler+0x98>
			TempData = (u8)XSpiPs_RecvByte(SpiPtr->Config.BaseAddress);
 1018ba8:	e5c2c000 	strb	ip, [r2]
				SpiPtr->RecvBufferPtr += 1;
 1018bac:	e5942014 	ldr	r2, [r4, #20]
 1018bb0:	e5943004 	ldr	r3, [r4, #4]
 1018bb4:	e5941018 	ldr	r1, [r4, #24]
 1018bb8:	e2822001 	add	r2, r2, #1
 1018bbc:	e5842014 	str	r2, [r4, #20]
		while (TransCount != 0U) {
 1018bc0:	e2500001 	subs	r0, r0, #1
			SpiPtr->RequestedBytes--;
 1018bc4:	e2411001 	sub	r1, r1, #1
 1018bc8:	e5841018 	str	r1, [r4, #24]
		while (TransCount != 0U) {
 1018bcc:	1afffff2 	bne	1018b9c <XSpiPs_InterruptHandler+0x74>
 1018bd0:	e594201c 	ldr	r2, [r4, #28]
		while ((SpiPtr->RemainingBytes > 0U) &&
 1018bd4:	e3520000 	cmp	r2, #0
 1018bd8:	0a00000f 	beq	1018c1c <XSpiPs_InterruptHandler+0xf4>
 1018bdc:	e5942010 	ldr	r2, [r4, #16]
 1018be0:	e2820080 	add	r0, r2, #128	; 0x80
 1018be4:	ea000002 	b	1018bf4 <XSpiPs_InterruptHandler+0xcc>
 1018be8:	e1520000 	cmp	r2, r0
 1018bec:	e5943004 	ldr	r3, [r4, #4]
 1018bf0:	0a00000b 	beq	1018c24 <XSpiPs_InterruptHandler+0xfc>
			XSpiPs_SendByte(SpiPtr->Config.BaseAddress,
 1018bf4:	e4d21001 	ldrb	r1, [r2], #1
	*LocalAddr = Value;
 1018bf8:	e583101c 	str	r1, [r3, #28]
			SpiPtr->RemainingBytes--;
 1018bfc:	e594301c 	ldr	r3, [r4, #28]
			SpiPtr->SendBufferPtr += 1;
 1018c00:	e5842010 	str	r2, [r4, #16]
			SpiPtr->RemainingBytes--;
 1018c04:	e2433001 	sub	r3, r3, #1
		while ((SpiPtr->RemainingBytes > 0U) &&
 1018c08:	e3530000 	cmp	r3, #0
			SpiPtr->RemainingBytes--;
 1018c0c:	e584301c 	str	r3, [r4, #28]
		while ((SpiPtr->RemainingBytes > 0U) &&
 1018c10:	1afffff4 	bne	1018be8 <XSpiPs_InterruptHandler+0xc0>
 1018c14:	e5943004 	ldr	r3, [r4, #4]
 1018c18:	e5941018 	ldr	r1, [r4, #24]
		if ((SpiPtr->RemainingBytes == 0U) &&
 1018c1c:	e3510000 	cmp	r1, #0
 1018c20:	0a000050 	beq	1018d68 <XSpiPs_InterruptHandler+0x240>
 1018c24:	e3a02004 	mov	r2, #4
			if ((XSpiPs_IsManualStart(SpiPtr) == TRUE)
 1018c28:	e1a00004 	mov	r0, r4
 1018c2c:	e5832008 	str	r2, [r3, #8]
 1018c30:	eb000784 	bl	101aa48 <XSpiPs_GetOptions>
 1018c34:	e3100020 	tst	r0, #32
 1018c38:	0a000006 	beq	1018c58 <XSpiPs_InterruptHandler+0x130>
				&& (XSpiPs_IsMaster(SpiPtr) == TRUE)) {
 1018c3c:	e1a00004 	mov	r0, r4
 1018c40:	eb000780 	bl	101aa48 <XSpiPs_GetOptions>
 1018c44:	e3100001 	tst	r0, #1
	return *(volatile u32 *) Addr;
 1018c48:	15942004 	ldrne	r2, [r4, #4]
 1018c4c:	15923000 	ldrne	r3, [r2]
				ConfigReg |= XSPIPS_CR_MANSTRT_MASK;
 1018c50:	13833801 	orrne	r3, r3, #65536	; 0x10000
	*LocalAddr = Value;
 1018c54:	15823000 	strne	r3, [r2]
	if ((IntrStatus & XSPIPS_IXR_RXOVR_MASK) != 0U) {
 1018c58:	e3150001 	tst	r5, #1
 1018c5c:	1a000024 	bne	1018cf4 <XSpiPs_InterruptHandler+0x1cc>
	if ((IntrStatus & XSPIPS_IXR_TXUF_MASK) != 0U) {
 1018c60:	e3150040 	tst	r5, #64	; 0x40
 1018c64:	08bd8070 	popeq	{r4, r5, r6, pc}
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018c68:	e594201c 	ldr	r2, [r4, #28]
		SpiPtr->IsBusy = FALSE;
 1018c6c:	e3a03000 	mov	r3, #0
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018c70:	e5945018 	ldr	r5, [r4, #24]
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1018c74:	e1a00004 	mov	r0, r4
		SpiPtr->IsBusy = FALSE;
 1018c78:	e5843020 	str	r3, [r4, #32]
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018c7c:	e0455002 	sub	r5, r5, r2
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1018c80:	eb000770 	bl	101aa48 <XSpiPs_GetOptions>
 1018c84:	e3100010 	tst	r0, #16
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018c88:	e3001481 	movw	r1, #1153	; 0x481
	return *(volatile u32 *) Addr;
 1018c8c:	15942004 	ldrne	r2, [r4, #4]
 1018c90:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1018c94:	15923000 	ldrne	r3, [r2]
			ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1018c98:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 1018c9c:	15823000 	strne	r3, [r2]
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018ca0:	e1a02005 	mov	r2, r5
 1018ca4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
}
 1018ca8:	e8bd4070 	pop	{r4, r5, r6, lr}
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018cac:	e12fff13 	bx	r3
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1018cb0:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018cb4:	e3001382 	movw	r1, #898	; 0x382
 1018cb8:	e3400106 	movt	r0, #262	; 0x106
 1018cbc:	eb00009e 	bl	1018f3c <Xil_Assert>
 1018cc0:	e3a03001 	mov	r3, #1
 1018cc4:	e5853000 	str	r3, [r5]
 1018cc8:	e8bd8070 	pop	{r4, r5, r6, pc}
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018ccc:	e594201c 	ldr	r2, [r4, #28]
 1018cd0:	e5945018 	ldr	r5, [r4, #24]
 1018cd4:	e0455002 	sub	r5, r5, r2
		XSpiPs_Abort(SpiPtr);
 1018cd8:	ebffff26 	bl	1018978 <XSpiPs_Abort>
		SpiPtr->StatusHandler(SpiPtr->StatusRef, XST_SPI_MODE_FAULT,
 1018cdc:	e1a02005 	mov	r2, r5
 1018ce0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 1018ce4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1018ce8:	e300147f 	movw	r1, #1151	; 0x47f
}
 1018cec:	e8bd4070 	pop	{r4, r5, r6, lr}
		SpiPtr->StatusHandler(SpiPtr->StatusRef, XST_SPI_MODE_FAULT,
 1018cf0:	e12fff13 	bx	r3
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018cf4:	e594201c 	ldr	r2, [r4, #28]
		SpiPtr->IsBusy = FALSE;
 1018cf8:	e3a03000 	mov	r3, #0
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018cfc:	e5946018 	ldr	r6, [r4, #24]
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1018d00:	e1a00004 	mov	r0, r4
		SpiPtr->IsBusy = FALSE;
 1018d04:	e5843020 	str	r3, [r4, #32]
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1018d08:	e0466002 	sub	r6, r6, r2
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1018d0c:	eb00074d 	bl	101aa48 <XSpiPs_GetOptions>
 1018d10:	e3100010 	tst	r0, #16
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018d14:	e3001482 	movw	r1, #1154	; 0x482
	return *(volatile u32 *) Addr;
 1018d18:	15942004 	ldrne	r2, [r4, #4]
 1018d1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1018d20:	15923000 	ldrne	r3, [r2]
			ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1018d24:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 1018d28:	15823000 	strne	r3, [r2]
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018d2c:	e1a02006 	mov	r2, r6
 1018d30:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 1018d34:	e12fff33 	blx	r3
	if ((IntrStatus & XSPIPS_IXR_TXUF_MASK) != 0U) {
 1018d38:	e3150040 	tst	r5, #64	; 0x40
 1018d3c:	08bd8070 	popeq	{r4, r5, r6, pc}
 1018d40:	eaffffc8 	b	1018c68 <XSpiPs_InterruptHandler+0x140>
	Xil_AssertVoid(InstancePtr != NULL);
 1018d44:	e30b0eb4 	movw	r0, #48820	; 0xbeb4
 1018d48:	e3001381 	movw	r1, #897	; 0x381
 1018d4c:	e3400106 	movt	r0, #262	; 0x106
 1018d50:	eb000079 	bl	1018f3c <Xil_Assert>
 1018d54:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018d58:	e3a02001 	mov	r2, #1
 1018d5c:	e340310c 	movt	r3, #268	; 0x10c
 1018d60:	e5832000 	str	r2, [r3]
 1018d64:	e8bd8070 	pop	{r4, r5, r6, pc}
 1018d68:	e3a02027 	mov	r2, #39	; 0x27
			if (XSpiPs_IsManualChipSelect(InstancePtr) == TRUE) {
 1018d6c:	e1a00004 	mov	r0, r4
 1018d70:	e583200c 	str	r2, [r3, #12]
 1018d74:	eb000733 	bl	101aa48 <XSpiPs_GetOptions>
 1018d78:	e3100010 	tst	r0, #16
			SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018d7c:	e5946028 	ldr	r6, [r4, #40]	; 0x28
	return *(volatile u32 *) Addr;
 1018d80:	15942004 	ldrne	r2, [r4, #4]
 1018d84:	e3a01d12 	mov	r1, #1152	; 0x480
 1018d88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1018d8c:	15923000 	ldrne	r3, [r2]
				ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1018d90:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 1018d94:	15823000 	strne	r3, [r2]
			SpiPtr->IsBusy = FALSE;
 1018d98:	e3a03000 	mov	r3, #0
			XSpiPs_Disable(SpiPtr);
 1018d9c:	e5942004 	ldr	r2, [r4, #4]
			SpiPtr->IsBusy = FALSE;
 1018da0:	e5843020 	str	r3, [r4, #32]
 1018da4:	e5823014 	str	r3, [r2, #20]
			SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1018da8:	e5942018 	ldr	r2, [r4, #24]
 1018dac:	e12fff36 	blx	r6
 1018db0:	eaffffa8 	b	1018c58 <XSpiPs_InterruptHandler+0x130>

01018db4 <XSpiPs_LookupConfig>:
{
	XSpiPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XSPIPS_NUM_INSTANCES; Index++) {
		if (XSpiPs_ConfigTable[Index].DeviceId == DeviceId) {
 1018db4:	e30c32c8 	movw	r3, #49864	; 0xc2c8
 1018db8:	e3403106 	movt	r3, #262	; 0x106
 1018dbc:	e1d320b0 	ldrh	r2, [r3]
			CfgPtr = &XSpiPs_ConfigTable[Index];
			break;
		}
	}
	return (XSpiPs_Config *)CfgPtr;
}
 1018dc0:	e1520000 	cmp	r2, r0
 1018dc4:	01a00003 	moveq	r0, r3
 1018dc8:	13a00000 	movne	r0, #0
 1018dcc:	e12fff1e 	bx	lr

01018dd0 <XSpiPs_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XSpiPs_SelfTest(XSpiPs *InstancePtr)
{
 1018dd0:	e92d4070 	push	{r4, r5, r6, lr}
	u8 DelayTestNss;
	u8 DelayTestBtwn;
	u8 DelayTestAfter;
	u8 DelayTestInit;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1018dd4:	e2506000 	subs	r6, r0, #0
{
 1018dd8:	e24dd010 	sub	sp, sp, #16
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018ddc:	0a00004c 	beq	1018f14 <XSpiPs_SelfTest+0x144>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018de0:	e596100c 	ldr	r1, [r6, #12]
 1018de4:	e3012111 	movw	r2, #4369	; 0x1111
 1018de8:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018dec:	e3014f58 	movw	r4, #8024	; 0x1f58
 1018df0:	e340410c 	movt	r4, #268	; 0x10c
 1018df4:	e3a03000 	mov	r3, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018df8:	e1510002 	cmp	r1, r2
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018dfc:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018e00:	1a00000b 	bne	1018e34 <XSpiPs_SelfTest+0x64>

	/*
	 * Reset the SPI device to leave it in a known good state
	 */
	XSpiPs_Reset(InstancePtr);
 1018e04:	ebfffef2 	bl	10189d4 <XSpiPs_Reset>

	/*
	 * All the SPI registers should be in their default state right now.
	 */
	Register = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 1018e08:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 1018e0c:	e5932000 	ldr	r2, [r3]
				 XSPIPS_CR_OFFSET);
	if (Register != XSPIPS_CR_RESET_STATE) {
 1018e10:	e3520802 	cmp	r2, #131072	; 0x20000
 1018e14:	1a000002 	bne	1018e24 <XSpiPs_SelfTest+0x54>
 1018e18:	e5933004 	ldr	r3, [r3, #4]
		goto END;
	}

	Register = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
				 XSPIPS_SR_OFFSET);
	if (Register != XSPIPS_ISR_RESET_STATE) {
 1018e1c:	e3530004 	cmp	r3, #4
 1018e20:	0a00000d 	beq	1018e5c <XSpiPs_SelfTest+0x8c>
		Status = (s32)XST_REGISTER_ERROR;
 1018e24:	e3a0500e 	mov	r5, #14

	Status = (s32)XST_SUCCESS;

	END:
	return Status;
}
 1018e28:	e1a00005 	mov	r0, r5
 1018e2c:	e28dd010 	add	sp, sp, #16
 1018e30:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018e34:	e30b0ec0 	movw	r0, #48832	; 0xbec0
 1018e38:	e3a01063 	mov	r1, #99	; 0x63
 1018e3c:	e3400106 	movt	r0, #262	; 0x106
 1018e40:	e1a05003 	mov	r5, r3
 1018e44:	eb00003c 	bl	1018f3c <Xil_Assert>
 1018e48:	e3a03001 	mov	r3, #1
 1018e4c:	e5843000 	str	r3, [r4]
}
 1018e50:	e1a00005 	mov	r0, r5
 1018e54:	e28dd010 	add	sp, sp, #16
 1018e58:	e8bd8070 	pop	{r4, r5, r6, pc}
	DelayTestNss = 0x5AU;
 1018e5c:	e3a0305a 	mov	r3, #90	; 0x5a
	DelayTestInit = 0x55U;
 1018e60:	e3a02055 	mov	r2, #85	; 0x55
	DelayTestBtwn = 0xA5U;
 1018e64:	e3e0005a 	mvn	r0, #90	; 0x5a
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1018e68:	e1a01003 	mov	r1, r3
 1018e6c:	e58d2000 	str	r2, [sp]
	DelayTestAfter = 0xAAU;
 1018e70:	e3e0c055 	mvn	ip, #85	; 0x55
	DelayTestNss = 0x5AU;
 1018e74:	e5cd300c 	strb	r3, [sp, #12]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1018e78:	e3a030aa 	mov	r3, #170	; 0xaa
	DelayTestInit = 0x55U;
 1018e7c:	e5cd200f 	strb	r2, [sp, #15]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1018e80:	e3a020a5 	mov	r2, #165	; 0xa5
	DelayTestBtwn = 0xA5U;
 1018e84:	e5cd000d 	strb	r0, [sp, #13]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1018e88:	e1a00006 	mov	r0, r6
	DelayTestAfter = 0xAAU;
 1018e8c:	e5cdc00e 	strb	ip, [sp, #14]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1018e90:	eb00076b 	bl	101ac44 <XSpiPs_SetDelays>
	if (Status != (s32)XST_SUCCESS) {
 1018e94:	e2505000 	subs	r5, r0, #0
 1018e98:	1affffec 	bne	1018e50 <XSpiPs_SelfTest+0x80>
	XSpiPs_GetDelays(InstancePtr, &DelayTestNss, &DelayTestBtwn,
 1018e9c:	e28d200f 	add	r2, sp, #15
 1018ea0:	e28d300e 	add	r3, sp, #14
 1018ea4:	e58d2000 	str	r2, [sp]
 1018ea8:	e28d100c 	add	r1, sp, #12
 1018eac:	e28d200d 	add	r2, sp, #13
 1018eb0:	e1a00006 	mov	r0, r6
 1018eb4:	eb00078d 	bl	101acf0 <XSpiPs_GetDelays>
	if ((0x5AU != DelayTestNss) || (0xA5U != DelayTestBtwn) ||
 1018eb8:	e5dd300c 	ldrb	r3, [sp, #12]
 1018ebc:	e353005a 	cmp	r3, #90	; 0x5a
 1018ec0:	1affffd7 	bne	1018e24 <XSpiPs_SelfTest+0x54>
 1018ec4:	e5dd300d 	ldrb	r3, [sp, #13]
 1018ec8:	e35300a5 	cmp	r3, #165	; 0xa5
 1018ecc:	1affffd4 	bne	1018e24 <XSpiPs_SelfTest+0x54>
 1018ed0:	e5dd300e 	ldrb	r3, [sp, #14]
 1018ed4:	e35300aa 	cmp	r3, #170	; 0xaa
 1018ed8:	1affffd1 	bne	1018e24 <XSpiPs_SelfTest+0x54>
		(0xAAU != DelayTestAfter) || (0x55U != DelayTestInit)) {
 1018edc:	e5dd300f 	ldrb	r3, [sp, #15]
 1018ee0:	e3530055 	cmp	r3, #85	; 0x55
 1018ee4:	1affffce 	bne	1018e24 <XSpiPs_SelfTest+0x54>
	Status = XSpiPs_SetDelays(InstancePtr, 0U, 0U, 0U, 0U);
 1018ee8:	e58d5000 	str	r5, [sp]
 1018eec:	e1a03005 	mov	r3, r5
 1018ef0:	e1a02005 	mov	r2, r5
 1018ef4:	e1a01005 	mov	r1, r5
 1018ef8:	e1a00006 	mov	r0, r6
 1018efc:	eb000750 	bl	101ac44 <XSpiPs_SetDelays>
	if (Status != (s32)XST_SUCCESS) {
 1018f00:	e2505000 	subs	r5, r0, #0
 1018f04:	1affffd1 	bne	1018e50 <XSpiPs_SelfTest+0x80>
	XSpiPs_Reset(InstancePtr);
 1018f08:	e1a00006 	mov	r0, r6
 1018f0c:	ebfffeb0 	bl	10189d4 <XSpiPs_Reset>
	Status = (s32)XST_SUCCESS;
 1018f10:	eaffffce 	b	1018e50 <XSpiPs_SelfTest+0x80>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018f14:	e30b0ec0 	movw	r0, #48832	; 0xbec0
 1018f18:	e3a01062 	mov	r1, #98	; 0x62
 1018f1c:	e3400106 	movt	r0, #262	; 0x106
 1018f20:	e1a05006 	mov	r5, r6
 1018f24:	eb000004 	bl	1018f3c <Xil_Assert>
 1018f28:	e3013f58 	movw	r3, #8024	; 0x1f58
 1018f2c:	e3a02001 	mov	r2, #1
 1018f30:	e340310c 	movt	r3, #268	; 0x10c
 1018f34:	e5832000 	str	r2, [r3]
 1018f38:	eaffffc4 	b	1018e50 <XSpiPs_SelfTest+0x80>

01018f3c <Xil_Assert>:
*
******************************************************************************/
void Xil_Assert(const char8 *File, s32 Line)
{
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
 1018f3c:	e304304c 	movw	r3, #16460	; 0x404c
 1018f40:	e3403107 	movt	r3, #263	; 0x107
 1018f44:	e5933000 	ldr	r3, [r3]
 1018f48:	e3530000 	cmp	r3, #0
 1018f4c:	0a000009 	beq	1018f78 <Xil_Assert+0x3c>
{
 1018f50:	e92d4010 	push	{r4, lr}
		(*Xil_AssertCallbackRoutine)(File, Line);
 1018f54:	e12fff33 	blx	r3
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait != 0) {
 1018f58:	e30c32d4 	movw	r3, #49876	; 0xc2d4
 1018f5c:	e3403106 	movt	r3, #262	; 0x106
 1018f60:	e5933000 	ldr	r3, [r3]
 1018f64:	e3530000 	cmp	r3, #0
 1018f68:	08bd8010 	popeq	{r4, pc}
 1018f6c:	e3530000 	cmp	r3, #0
 1018f70:	1afffffb 	bne	1018f64 <Xil_Assert+0x28>
 1018f74:	e8bd8010 	pop	{r4, pc}
 1018f78:	e30c32d4 	movw	r3, #49876	; 0xc2d4
 1018f7c:	e3403106 	movt	r3, #262	; 0x106
 1018f80:	e5933000 	ldr	r3, [r3]
 1018f84:	e3530000 	cmp	r3, #0
 1018f88:	012fff1e 	bxeq	lr
 1018f8c:	e3530000 	cmp	r3, #0
 1018f90:	1afffffb 	bne	1018f84 <Xil_Assert+0x48>
 1018f94:	e12fff1e 	bx	lr

01018f98 <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
 1018f98:	e304304c 	movw	r3, #16460	; 0x404c
 1018f9c:	e3403107 	movt	r3, #263	; 0x107
 1018fa0:	e5830000 	str	r0, [r3]
}
 1018fa4:	e12fff1e 	bx	lr

01018fa8 <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
	(void) NullParameter;
}
 1018fa8:	e12fff1e 	bx	lr

01018fac <print>:
 * print -- do a raw print of a string
 */
#include "xil_printf.h"

void print(const char8 *ptr)
{
 1018fac:	e92d4010 	push	{r4, lr}
 1018fb0:	e1a04000 	mov	r4, r0
#if HYP_GUEST && EL1_NONSECURE && XEN_USE_PV_CONSOLE
	XPVXenConsole_Write(ptr);
#else
#ifdef STDOUT_BASEADDRESS
  while (*ptr != (char8)0) {
 1018fb4:	e5d00000 	ldrb	r0, [r0]
 1018fb8:	e3500000 	cmp	r0, #0
 1018fbc:	08bd8010 	popeq	{r4, pc}
    outbyte (*ptr);
 1018fc0:	eb00025e 	bl	1019940 <outbyte>
  while (*ptr != (char8)0) {
 1018fc4:	e5f40001 	ldrb	r0, [r4, #1]!
 1018fc8:	e3500000 	cmp	r0, #0
 1018fcc:	1afffffb 	bne	1018fc0 <print+0x14>
 1018fd0:	e8bd8010 	pop	{r4, pc}

01018fd4 <Xil_DCacheInvalidateLine>:
****************************************************************************/
void Xil_DCacheInvalidateLine(u32 adr)
{
	u32 currmask;

	currmask = mfcpsr();
 1018fd4:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1018fd8:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1018fdc:	e129f002 	msr	CPSR_fc, r2
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1018fe0:	e3a02a02 	mov	r2, #8192	; 0x2000
 1018fe4:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1018fe8:	e5820770 	str	r0, [r2, #1904]	; 0x770
****************************************************************************/
void Xil_L2CacheInvalidateLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, (u32)adr);
	/* synchronize the processor */
	dsb();
 1018fec:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1018ff0:	e3a02000 	mov	r2, #0
 1018ff4:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1018ff8:	e3c0001f 	bic	r0, r0, #31
 1018ffc:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 1019000:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019004:	e129f003 	msr	CPSR_fc, r3
}
 1019008:	e12fff1e 	bx	lr

0101900c <Xil_DCacheInvalidateRange>:
	currmask = mfcpsr();
 101900c:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019010:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1019014:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1019018:	e3510000 	cmp	r1, #0
 101901c:	0a000031 	beq	10190e8 <Xil_DCacheInvalidateRange+0xdc>
{
 1019020:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1019024:	e3a02000 	mov	r2, #0
		end = tempadr + len;
 1019028:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 101902c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		if ((tempadr & (cacheline-1U)) != 0U) {
 1019030:	e310001f 	tst	r0, #31
 1019034:	0a00000d 	beq	1019070 <Xil_DCacheInvalidateRange+0x64>
			tempadr &= (~(cacheline - 1U));
 1019038:	e3c0001f 	bic	r0, r0, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 101903c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1019040:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 1019044:	f57ff04f 	dsb	sy
 1019048:	e3a03a02 	mov	r3, #8192	; 0x2000
 101904c:	e3a0e003 	mov	lr, #3
 1019050:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019054:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1019058:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 101905c:	e5830770 	str	r0, [r3, #1904]	; 0x770
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, adr);
#endif
	/* synchronize the processor */
	dsb();
 1019060:	f57ff04f 	dsb	sy
			tempadr += cacheline;
 1019064:	e2800020 	add	r0, r0, #32
 1019068:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 101906c:	e5832730 	str	r2, [r3, #1840]	; 0x730
		if ((tempend & (cacheline-1U)) != 0U) {
 1019070:	e311001f 	tst	r1, #31
 1019074:	0a00000d 	beq	10190b0 <Xil_DCacheInvalidateRange+0xa4>
			tempend &= (~(cacheline - 1U));
 1019078:	e3c1101f 	bic	r1, r1, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 101907c:	e3a02000 	mov	r2, #0
 1019080:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1019084:	ee071f3e 	mcr	15, 0, r1, cr7, cr14, {1}
	dsb();
 1019088:	f57ff04f 	dsb	sy
 101908c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019090:	e3a0e003 	mov	lr, #3
 1019094:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019098:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 101909c:	e58317b0 	str	r1, [r3, #1968]	; 0x7b0
 10190a0:	e5831770 	str	r1, [r3, #1904]	; 0x770
	dsb();
 10190a4:	f57ff04f 	dsb	sy
 10190a8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10190ac:	e5832730 	str	r2, [r3, #1840]	; 0x730
		while (tempadr < tempend) {
 10190b0:	e1500001 	cmp	r0, r1
 10190b4:	2a000008 	bcs	10190dc <Xil_DCacheInvalidateRange+0xd0>
			*L2CCOffset = tempadr;
 10190b8:	e3a03a02 	mov	r3, #8192	; 0x2000
 10190bc:	e3a02000 	mov	r2, #0
 10190c0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10190c4:	e5830770 	str	r0, [r3, #1904]	; 0x770
 10190c8:	e5832730 	str	r2, [r3, #1840]	; 0x730
			asm_cp15_inval_dc_line_mva_poc(tempadr);
 10190cc:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			tempadr += cacheline;
 10190d0:	e2800020 	add	r0, r0, #32
		while (tempadr < tempend) {
 10190d4:	e1500001 	cmp	r0, r1
 10190d8:	3afffff9 	bcc	10190c4 <Xil_DCacheInvalidateRange+0xb8>
	dsb();
 10190dc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10190e0:	e129f00c 	msr	CPSR_fc, ip
}
 10190e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	dsb();
 10190e8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10190ec:	e129f00c 	msr	CPSR_fc, ip
 10190f0:	e12fff1e 	bx	lr

010190f4 <Xil_DCacheFlushLine>:
	currmask = mfcpsr();
 10190f4:	e10f1000 	mrs	r1, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10190f8:	e38130c0 	orr	r3, r1, #192	; 0xc0
 10190fc:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1019100:	e3a02000 	mov	r2, #0
 1019104:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1019108:	e3c0301f 	bic	r3, r0, #31
 101910c:	ee073f3e 	mcr	15, 0, r3, cr7, cr14, {1}
	dsb();
 1019110:	f57ff04f 	dsb	sy
 1019114:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019118:	e3a0c003 	mov	ip, #3
 101911c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019120:	e583cf40 	str	ip, [r3, #3904]	; 0xf40
 1019124:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1019128:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 101912c:	f57ff04f 	dsb	sy
 1019130:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1019134:	e5832730 	str	r2, [r3, #1840]	; 0x730
	mtcpsr(currmask);
 1019138:	e129f001 	msr	CPSR_fc, r1
}
 101913c:	e12fff1e 	bx	lr

01019140 <Xil_DCacheFlushRange>:
	currmask = mfcpsr();
 1019140:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019144:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1019148:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 101914c:	e3510000 	cmp	r1, #0
 1019150:	0a00000c 	beq	1019188 <Xil_DCacheFlushRange+0x48>
		end = LocalAddr + len;
 1019154:	e0801001 	add	r1, r0, r1
		LocalAddr &= ~(cacheline - 1U);
 1019158:	e3c0001f 	bic	r0, r0, #31
		while (LocalAddr < end) {
 101915c:	e1510000 	cmp	r1, r0
 1019160:	9a000008 	bls	1019188 <Xil_DCacheFlushRange+0x48>
			*L2CCOffset = LocalAddr;
 1019164:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019168:	e3a02000 	mov	r2, #0
 101916c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1019170:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			*L2CCOffset = LocalAddr;
 1019174:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1019178:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 101917c:	e1510000 	cmp	r1, r0
 1019180:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1019184:	8afffff9 	bhi	1019170 <Xil_DCacheFlushRange+0x30>
	dsb();
 1019188:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 101918c:	e129f00c 	msr	CPSR_fc, ip
}
 1019190:	e12fff1e 	bx	lr

01019194 <Xil_DCacheStoreLine>:
	currmask = mfcpsr();
 1019194:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019198:	e38320c0 	orr	r2, r3, #192	; 0xc0
 101919c:	e129f002 	msr	CPSR_fc, r2
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10191a0:	e3a02000 	mov	r2, #0
 10191a4:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10191a8:	e3c0201f 	bic	r2, r0, #31
 10191ac:	ee072f3a 	mcr	15, 0, r2, cr7, cr10, {1}
	dsb();
 10191b0:	f57ff04f 	dsb	sy
 10191b4:	e3a02a02 	mov	r2, #8192	; 0x2000
 10191b8:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 10191bc:	e58207b0 	str	r0, [r2, #1968]	; 0x7b0
****************************************************************************/
void Xil_L2CacheStoreLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
	/* synchronize the processor */
	dsb();
 10191c0:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10191c4:	e129f003 	msr	CPSR_fc, r3
}
 10191c8:	e12fff1e 	bx	lr

010191cc <Xil_ICacheInvalidateLine>:
	currmask = mfcpsr();
 10191cc:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10191d0:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10191d4:	e129f002 	msr	CPSR_fc, r2
 10191d8:	e3a02a02 	mov	r2, #8192	; 0x2000
 10191dc:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 10191e0:	e5820770 	str	r0, [r2, #1904]	; 0x770
	dsb();
 10191e4:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10191e8:	e3a02001 	mov	r2, #1
 10191ec:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 10191f0:	e3c0001f 	bic	r0, r0, #31
 10191f4:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 10191f8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10191fc:	e129f003 	msr	CPSR_fc, r3
}
 1019200:	e12fff1e 	bx	lr

01019204 <Xil_ICacheInvalidateRange>:
	currmask = mfcpsr();
 1019204:	e10f2000 	mrs	r2, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019208:	e38230c0 	orr	r3, r2, #192	; 0xc0
 101920c:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1019210:	e3510000 	cmp	r1, #0
 1019214:	0a00000d 	beq	1019250 <Xil_ICacheInvalidateRange+0x4c>
		end = LocalAddr + len;
 1019218:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 101921c:	e3a03001 	mov	r3, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1019220:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1019224:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
		while (LocalAddr < end) {
 1019228:	e1510000 	cmp	r1, r0
 101922c:	9a000007 	bls	1019250 <Xil_ICacheInvalidateRange+0x4c>
		*L2CCOffset = LocalAddr;
 1019230:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019234:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019238:	e5830770 	str	r0, [r3, #1904]	; 0x770
		dsb();
 101923c:	f57ff04f 	dsb	sy
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1019240:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 1019244:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1019248:	e1510000 	cmp	r1, r0
 101924c:	8afffff9 	bhi	1019238 <Xil_ICacheInvalidateRange+0x34>
	dsb();
 1019250:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019254:	e129f002 	msr	CPSR_fc, r2
}
 1019258:	e12fff1e 	bx	lr

0101925c <Xil_L1DCacheInvalidate>:
{
 101925c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1019260:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019264:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1019268:	e129f003 	msr	CPSR_fc, r3
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 101926c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 1019270:	e3130004 	tst	r3, #4
 1019274:	1a00001e 	bne	10192f4 <Xil_L1DCacheInvalidate+0x98>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1019278:	e3a04000 	mov	r4, #0
 101927c:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1019280:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1019284:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 1019288:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 101928c:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1019290:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1019294:	e1a00380 	lsl	r0, r0, #7
 1019298:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 101929c:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 10192a0:	fa000718 	blx	101af08 <__udivsi3>
			Set += (0x00000001U << LineSize);
 10192a4:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 10192a8:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 10192ac:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10192b0:	e3500000 	cmp	r0, #0
 10192b4:	e1a0cf04 	lsl	ip, r4, #30
 10192b8:	13a03000 	movne	r3, #0
 10192bc:	11a02003 	movne	r2, r3
 10192c0:	0a000005 	beq	10192dc <Xil_L1DCacheInvalidate+0x80>
			C7Reg = Way | Set;
 10192c4:	e182100c 	orr	r1, r2, ip
			asm_cp15_inval_dc_line_sw(C7Reg);
 10192c8:	ee071f56 	mcr	15, 0, r1, cr7, cr6, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10192cc:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 10192d0:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10192d4:	e1500003 	cmp	r0, r3
 10192d8:	1afffff9 	bne	10192c4 <Xil_L1DCacheInvalidate+0x68>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 10192dc:	e1550004 	cmp	r5, r4
 10192e0:	e2844001 	add	r4, r4, #1
 10192e4:	1afffff1 	bne	10192b0 <Xil_L1DCacheInvalidate+0x54>
	dsb();
 10192e8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10192ec:	e129f006 	msr	CPSR_fc, r6
}
 10192f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	stack_size=stack_start-stack_end;
 10192f4:	e3011800 	movw	r1, #6144	; 0x1800
 10192f8:	e3000000 	movw	r0, #0
 10192fc:	e3400000 	movt	r0, #0
 1019300:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1019304:	e0411000 	sub	r1, r1, r0
 1019308:	ebffff8c 	bl	1019140 <Xil_DCacheFlushRange>
 101930c:	eaffffd9 	b	1019278 <Xil_L1DCacheInvalidate+0x1c>

01019310 <Xil_L1DCacheEnable>:
{
 1019310:	e92d4010 	push	{r4, lr}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1019314:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 1019318:	e3140004 	tst	r4, #4
 101931c:	18bd8010 	popne	{r4, pc}
	Xil_L1DCacheInvalidate();
 1019320:	ebffffcd 	bl	101925c <Xil_L1DCacheInvalidate>
	CtrlReg |= (XREG_CP15_CONTROL_C_BIT);
 1019324:	e3844004 	orr	r4, r4, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1019328:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
}
 101932c:	e8bd8010 	pop	{r4, pc}

01019330 <Xil_L1DCacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1019330:	e3a03000 	mov	r3, #0
 1019334:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1019338:	e3c0001f 	bic	r0, r0, #31
 101933c:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 1019340:	f57ff04f 	dsb	sy
}
 1019344:	e12fff1e 	bx	lr

01019348 <Xil_L1DCacheInvalidateRange>:
	currmask = mfcpsr();
 1019348:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 101934c:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1019350:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1019354:	e3510000 	cmp	r1, #0
 1019358:	0a000009 	beq	1019384 <Xil_L1DCacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 101935c:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1019360:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1019364:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1019368:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 101936c:	e1510000 	cmp	r1, r0
 1019370:	9a000003 	bls	1019384 <Xil_L1DCacheInvalidateRange+0x3c>
			asm_cp15_inval_dc_line_mva_poc(LocalAddr);
 1019374:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			LocalAddr += cacheline;
 1019378:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 101937c:	e1510000 	cmp	r1, r0
 1019380:	8afffffb 	bhi	1019374 <Xil_L1DCacheInvalidateRange+0x2c>
	dsb();
 1019384:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019388:	e129f003 	msr	CPSR_fc, r3
}
 101938c:	e12fff1e 	bx	lr

01019390 <Xil_L1DCacheFlush>:
{
 1019390:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1019394:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019398:	e38630c0 	orr	r3, r6, #192	; 0xc0
 101939c:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 10193a0:	e3a04000 	mov	r4, #0
 10193a4:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 10193a8:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 10193ac:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 10193b0:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 10193b4:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 10193b8:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 10193bc:	e1a00380 	lsl	r0, r0, #7
 10193c0:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 10193c4:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 10193c8:	fa0006ce 	blx	101af08 <__udivsi3>
			Set += (0x00000001U << LineSize);
 10193cc:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 10193d0:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 10193d4:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10193d8:	e3500000 	cmp	r0, #0
 10193dc:	e1a0cf04 	lsl	ip, r4, #30
 10193e0:	13a03000 	movne	r3, #0
 10193e4:	11a02003 	movne	r2, r3
 10193e8:	0a000005 	beq	1019404 <Xil_L1DCacheFlush+0x74>
			C7Reg = Way | Set;
 10193ec:	e182100c 	orr	r1, r2, ip
			asm_cp15_clean_inval_dc_line_sw(C7Reg);
 10193f0:	ee071f5e 	mcr	15, 0, r1, cr7, cr14, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10193f4:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 10193f8:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10193fc:	e1500003 	cmp	r0, r3
 1019400:	1afffff9 	bne	10193ec <Xil_L1DCacheFlush+0x5c>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 1019404:	e1550004 	cmp	r5, r4
 1019408:	e2844001 	add	r4, r4, #1
 101940c:	1afffff1 	bne	10193d8 <Xil_L1DCacheFlush+0x48>
	dsb();
 1019410:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019414:	e129f006 	msr	CPSR_fc, r6
}
 1019418:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0101941c <Xil_L1DCacheDisable>:
{
 101941c:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheFlush();
 1019420:	ebffffda 	bl	1019390 <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1019424:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 1019428:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 101942c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1019430:	e8bd8010 	pop	{r4, pc}

01019434 <Xil_DCacheFlush>:
{
 1019434:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1019438:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 101943c:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1019440:	e129f003 	msr	CPSR_fc, r3
	Xil_L1DCacheFlush();
 1019444:	ebffffd1 	bl	1019390 <Xil_L1DCacheFlush>
 1019448:	e3a02a02 	mov	r2, #8192	; 0x2000
 101944c:	e3a01003 	mov	r1, #3
 1019450:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1019454:	e30f3fff 	movw	r3, #65535	; 0xffff
 1019458:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 101945c:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1019460:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1019464:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1019468:	e3530000 	cmp	r3, #0
 101946c:	1afffffb 	bne	1019460 <Xil_DCacheFlush+0x2c>
	*LocalAddr = Value;
 1019470:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019474:	e3a02000 	mov	r2, #0
 1019478:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101947c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1019480:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1019484:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019488:	e129f004 	msr	CPSR_fc, r4
}
 101948c:	e8bd8010 	pop	{r4, pc}

01019490 <Xil_L1DCacheFlushLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1019490:	e3a03000 	mov	r3, #0
 1019494:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1019498:	e3c0001f 	bic	r0, r0, #31
 101949c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 10194a0:	f57ff04f 	dsb	sy
}
 10194a4:	e12fff1e 	bx	lr

010194a8 <Xil_L1DCacheFlushRange>:
	currmask = mfcpsr();
 10194a8:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10194ac:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10194b0:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 10194b4:	e3510000 	cmp	r1, #0
 10194b8:	0a000009 	beq	10194e4 <Xil_L1DCacheFlushRange+0x3c>
		end = LocalAddr + len;
 10194bc:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10194c0:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 10194c4:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10194c8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 10194cc:	e1510000 	cmp	r1, r0
 10194d0:	9a000003 	bls	10194e4 <Xil_L1DCacheFlushRange+0x3c>
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 10194d4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			LocalAddr += cacheline;
 10194d8:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 10194dc:	e1510000 	cmp	r1, r0
 10194e0:	8afffffb 	bhi	10194d4 <Xil_L1DCacheFlushRange+0x2c>
	dsb();
 10194e4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10194e8:	e129f003 	msr	CPSR_fc, r3
}
 10194ec:	e12fff1e 	bx	lr

010194f0 <Xil_L1DCacheStoreLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10194f0:	e3a03000 	mov	r3, #0
 10194f4:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10194f8:	e3c0001f 	bic	r0, r0, #31
 10194fc:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
	dsb();
 1019500:	f57ff04f 	dsb	sy
}
 1019504:	e12fff1e 	bx	lr

01019508 <Xil_L1ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1019508:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 101950c:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1019510:	112fff1e 	bxne	lr
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1019514:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1019518:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 101951c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1019520:	e12fff1e 	bx	lr

01019524 <Xil_L1ICacheDisable>:
	dsb();
 1019524:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1019528:	e3a03000 	mov	r3, #0
 101952c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1019530:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1019534:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1019538:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 101953c:	e12fff1e 	bx	lr

01019540 <Xil_L1ICacheInvalidate>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1019540:	e3a03001 	mov	r3, #1
 1019544:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1019548:	e3a03000 	mov	r3, #0
 101954c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 1019550:	f57ff04f 	dsb	sy
}
 1019554:	e12fff1e 	bx	lr

01019558 <Xil_L1ICacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1019558:	e3a03001 	mov	r3, #1
 101955c:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 1019560:	e3c0001f 	bic	r0, r0, #31
 1019564:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 1019568:	f57ff04f 	dsb	sy
}
 101956c:	e12fff1e 	bx	lr

01019570 <Xil_L1ICacheInvalidateRange>:
	currmask = mfcpsr();
 1019570:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019574:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1019578:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 101957c:	e3510000 	cmp	r1, #0
 1019580:	0a000009 	beq	10195ac <Xil_L1ICacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1019584:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1019588:	e3a02001 	mov	r2, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 101958c:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1019590:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1019594:	e1510000 	cmp	r1, r0
 1019598:	9a000003 	bls	10195ac <Xil_L1ICacheInvalidateRange+0x3c>
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 101959c:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 10195a0:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 10195a4:	e1510000 	cmp	r1, r0
 10195a8:	8afffffb 	bhi	101959c <Xil_L1ICacheInvalidateRange+0x2c>
	dsb();
 10195ac:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10195b0:	e129f003 	msr	CPSR_fc, r3
}
 10195b4:	e12fff1e 	bx	lr

010195b8 <Xil_L2CacheDisable>:
	return *(volatile u32 *) Addr;
 10195b8:	e3a03a02 	mov	r3, #8192	; 0x2000
 10195bc:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10195c0:	e5932100 	ldr	r2, [r3, #256]	; 0x100
    if((L2CCReg & 0x1U) != 0U) {
 10195c4:	e3120001 	tst	r2, #1
 10195c8:	012fff1e 	bxeq	lr
	*LocalAddr = Value;
 10195cc:	e30f2fff 	movw	r2, #65535	; 0xffff
 10195d0:	e3a01003 	mov	r1, #3
 10195d4:	e5831f40 	str	r1, [r3, #3904]	; 0xf40
 10195d8:	e58327fc 	str	r2, [r3, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 10195dc:	e59327fc 	ldr	r2, [r3, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 10195e0:	e6ff2072 	uxth	r2, r2
	while(ResultL2Cache != (u32)0U) {
 10195e4:	e3520000 	cmp	r2, #0
 10195e8:	0a000004 	beq	1019600 <Xil_L2CacheDisable+0x48>
 10195ec:	e1a02003 	mov	r2, r3
 10195f0:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
		ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 10195f4:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 10195f8:	e3530000 	cmp	r3, #0
 10195fc:	1afffffb 	bne	10195f0 <Xil_L2CacheDisable+0x38>
	*LocalAddr = Value;
 1019600:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019604:	e3a02000 	mov	r2, #0
 1019608:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101960c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1019610:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1019614:	f57ff04f 	dsb	sy
	return *(volatile u32 *) Addr;
 1019618:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	    Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 101961c:	e3c22001 	bic	r2, r2, #1
	*LocalAddr = Value;
 1019620:	e5832100 	str	r2, [r3, #256]	; 0x100
		dsb();
 1019624:	f57ff04f 	dsb	sy
}
 1019628:	e12fff1e 	bx	lr

0101962c <Xil_DCacheDisable>:
{
 101962c:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 1019630:	ebffffe0 	bl	10195b8 <Xil_L2CacheDisable>
	Xil_L1DCacheFlush();
 1019634:	ebffff55 	bl	1019390 <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1019638:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 101963c:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1019640:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1019644:	e8bd8010 	pop	{r4, pc}

01019648 <Xil_ICacheDisable>:
{
 1019648:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 101964c:	ebffffd9 	bl	10195b8 <Xil_L2CacheDisable>
	dsb();
 1019650:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1019654:	e3a03000 	mov	r3, #0
 1019658:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 101965c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1019660:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1019664:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1019668:	e8bd8010 	pop	{r4, pc}

0101966c <Xil_L2CacheInvalidate>:
	return *(volatile u32 *) Addr;
 101966c:	e3a03a02 	mov	r3, #8192	; 0x2000
{
 1019670:	e92d4010 	push	{r4, lr}
 1019674:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019678:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) != 0U) {
 101967c:	e3130001 	tst	r3, #1
 1019680:	1a00000d 	bne	10196bc <Xil_L2CacheInvalidate+0x50>
	*LocalAddr = Value;
 1019684:	e3a02a02 	mov	r2, #8192	; 0x2000
 1019688:	e30f3fff 	movw	r3, #65535	; 0xffff
 101968c:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1019690:	e582377c 	str	r3, [r2, #1916]	; 0x77c
	return *(volatile u32 *) Addr;
 1019694:	e592377c 	ldr	r3, [r2, #1916]	; 0x77c
	ResultDCache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET)
 1019698:	e6ff3073 	uxth	r3, r3
	while(ResultDCache != (u32)0U) {
 101969c:	e3530000 	cmp	r3, #0
 10196a0:	1afffffb 	bne	1019694 <Xil_L2CacheInvalidate+0x28>
	*LocalAddr = Value;
 10196a4:	e3a03a02 	mov	r3, #8192	; 0x2000
 10196a8:	e3a02000 	mov	r2, #0
 10196ac:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10196b0:	e5832730 	str	r2, [r3, #1840]	; 0x730
	dsb();
 10196b4:	f57ff04f 	dsb	sy
}
 10196b8:	e8bd8010 	pop	{r4, pc}
	stack_size=stack_start-stack_end;
 10196bc:	e3011800 	movw	r1, #6144	; 0x1800
 10196c0:	e3000000 	movw	r0, #0
 10196c4:	e3400000 	movt	r0, #0
 10196c8:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 10196cc:	e0411000 	sub	r1, r1, r0
 10196d0:	ebfffe9a 	bl	1019140 <Xil_DCacheFlushRange>
 10196d4:	eaffffea 	b	1019684 <Xil_L2CacheInvalidate+0x18>

010196d8 <Xil_DCacheInvalidate>:
{
 10196d8:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 10196dc:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10196e0:	e38430c0 	orr	r3, r4, #192	; 0xc0
 10196e4:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 10196e8:	ebffffdf 	bl	101966c <Xil_L2CacheInvalidate>
	Xil_L1DCacheInvalidate();
 10196ec:	ebfffeda 	bl	101925c <Xil_L1DCacheInvalidate>
	mtcpsr(currmask);
 10196f0:	e129f004 	msr	CPSR_fc, r4
}
 10196f4:	e8bd8010 	pop	{r4, pc}

010196f8 <Xil_ICacheInvalidate>:
{
 10196f8:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 10196fc:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019700:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1019704:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1019708:	ebffffd7 	bl	101966c <Xil_L2CacheInvalidate>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 101970c:	e3a03001 	mov	r3, #1
 1019710:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1019714:	e3a03000 	mov	r3, #0
 1019718:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 101971c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019720:	e129f004 	msr	CPSR_fc, r4
}
 1019724:	e8bd8010 	pop	{r4, pc}

01019728 <Xil_L2CacheEnable.part.0>:
void Xil_L2CacheEnable(void)
 1019728:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 101972c:	e3a04a02 	mov	r4, #8192	; 0x2000
 1019730:	e34f48f0 	movt	r4, #63728	; 0xf8f0
	*LocalAddr = Value;
 1019734:	e3001111 	movw	r1, #273	; 0x111
 1019738:	e3002121 	movw	r2, #289	; 0x121
	return *(volatile u32 *) Addr;
 101973c:	e5943104 	ldr	r3, [r4, #260]	; 0x104
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
 1019740:	e3c3380e 	bic	r3, r3, #917504	; 0xe0000
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
 1019744:	e3833472 	orr	r3, r3, #1912602624	; 0x72000000
 1019748:	e3833836 	orr	r3, r3, #3538944	; 0x360000
	*LocalAddr = Value;
 101974c:	e5843104 	str	r3, [r4, #260]	; 0x104
 1019750:	e5841108 	str	r1, [r4, #264]	; 0x108
 1019754:	e584210c 	str	r2, [r4, #268]	; 0x10c
	return *(volatile u32 *) Addr;
 1019758:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	*LocalAddr = Value;
 101975c:	e5843220 	str	r3, [r4, #544]	; 0x220
		Xil_L2CacheInvalidate();
 1019760:	ebffffc1 	bl	101966c <Xil_L2CacheInvalidate>
	return *(volatile u32 *) Addr;
 1019764:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	*LocalAddr = Value;
 1019768:	e3a02000 	mov	r2, #0
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 101976c:	e3833001 	orr	r3, r3, #1
 1019770:	e5843100 	str	r3, [r4, #256]	; 0x100
 1019774:	e5842730 	str	r2, [r4, #1840]	; 0x730
	    dsb();
 1019778:	f57ff04f 	dsb	sy
}
 101977c:	e8bd8010 	pop	{r4, pc}

01019780 <Xil_L2CacheEnable>:
	return *(volatile u32 *) Addr;
 1019780:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019784:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019788:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 101978c:	e3130001 	tst	r3, #1
 1019790:	112fff1e 	bxne	lr
 1019794:	eaffffe3 	b	1019728 <Xil_L2CacheEnable.part.0>

01019798 <Xil_DCacheEnable>:
{
 1019798:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheEnable();
 101979c:	ebfffedb 	bl	1019310 <Xil_L1DCacheEnable>
 10197a0:	e3a03a02 	mov	r3, #8192	; 0x2000
 10197a4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10197a8:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 10197ac:	e3130001 	tst	r3, #1
 10197b0:	18bd8010 	popne	{r4, pc}
}
 10197b4:	e8bd4010 	pop	{r4, lr}
 10197b8:	eaffffda 	b	1019728 <Xil_L2CacheEnable.part.0>

010197bc <Xil_ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10197bc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 10197c0:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 10197c4:	1a000002 	bne	10197d4 <Xil_ICacheEnable+0x18>
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10197c8:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 10197cc:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10197d0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
 10197d4:	e3a03a02 	mov	r3, #8192	; 0x2000
 10197d8:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10197dc:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 10197e0:	e3130001 	tst	r3, #1
 10197e4:	112fff1e 	bxne	lr
 10197e8:	eaffffce 	b	1019728 <Xil_L2CacheEnable.part.0>

010197ec <Xil_L2CacheInvalidateLine>:
	*LocalAddr = Value;
 10197ec:	e3a03a02 	mov	r3, #8192	; 0x2000
 10197f0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10197f4:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 10197f8:	f57ff04f 	dsb	sy
}
 10197fc:	e12fff1e 	bx	lr

01019800 <Xil_L2CacheInvalidateRange>:
	currmask = mfcpsr();
 1019800:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1019804:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1019808:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 101980c:	e3510000 	cmp	r1, #0
 1019810:	0a000011 	beq	101985c <Xil_L2CacheInvalidateRange+0x5c>
		end = LocalAddr + len;
 1019814:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1019818:	e3c0001f 	bic	r0, r0, #31
 101981c:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 1019820:	e1510000 	cmp	r1, r0
 1019824:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019828:	e3a02003 	mov	r2, #3
 101982c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1019830:	9a000005 	bls	101984c <Xil_L2CacheInvalidateRange+0x4c>
 1019834:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 1019838:	e5830770 	str	r0, [r3, #1904]	; 0x770
			LocalAddr += cacheline;
 101983c:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1019840:	e1510000 	cmp	r1, r0
 1019844:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1019848:	8afffffa 	bhi	1019838 <Xil_L2CacheInvalidateRange+0x38>
 101984c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019850:	e3a02000 	mov	r2, #0
 1019854:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019858:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 101985c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019860:	e129f00c 	msr	CPSR_fc, ip
}
 1019864:	e12fff1e 	bx	lr

01019868 <Xil_L2CacheFlush>:
 1019868:	e3a02a02 	mov	r2, #8192	; 0x2000
 101986c:	e3a01003 	mov	r1, #3
 1019870:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1019874:	e30f3fff 	movw	r3, #65535	; 0xffff
 1019878:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 101987c:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1019880:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1019884:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1019888:	e3530000 	cmp	r3, #0
 101988c:	1afffffb 	bne	1019880 <Xil_L2CacheFlush+0x18>
	*LocalAddr = Value;
 1019890:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019894:	e3a02000 	mov	r2, #0
 1019898:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101989c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 10198a0:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 10198a4:	f57ff04f 	dsb	sy
}
 10198a8:	e12fff1e 	bx	lr

010198ac <Xil_L2CacheFlushLine>:
 10198ac:	e3a03a02 	mov	r3, #8192	; 0x2000
 10198b0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10198b4:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 10198b8:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 10198bc:	f57ff04f 	dsb	sy
}
 10198c0:	e12fff1e 	bx	lr

010198c4 <Xil_L2CacheFlushRange>:
	currmask = mfcpsr();
 10198c4:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10198c8:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10198cc:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10198d0:	e3510000 	cmp	r1, #0
 10198d4:	0a000011 	beq	1019920 <Xil_L2CacheFlushRange+0x5c>
		end = LocalAddr + len;
 10198d8:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 10198dc:	e3c0001f 	bic	r0, r0, #31
 10198e0:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 10198e4:	e1510000 	cmp	r1, r0
 10198e8:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10198ec:	e3a02003 	mov	r2, #3
 10198f0:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10198f4:	9a000005 	bls	1019910 <Xil_L2CacheFlushRange+0x4c>
 10198f8:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 10198fc:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1019900:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1019904:	e1510000 	cmp	r1, r0
 1019908:	e5832730 	str	r2, [r3, #1840]	; 0x730
 101990c:	8afffffa 	bhi	10198fc <Xil_L2CacheFlushRange+0x38>
 1019910:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019914:	e3a02000 	mov	r2, #0
 1019918:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101991c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1019920:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1019924:	e129f00c 	msr	CPSR_fc, ip
}
 1019928:	e12fff1e 	bx	lr

0101992c <Xil_L2CacheStoreLine>:
 101992c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1019930:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1019934:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
	dsb();
 1019938:	f57ff04f 	dsb	sy
}
 101993c:	e12fff1e 	bx	lr

01019940 <outbyte>:
#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
	 XUartPs_SendByte(STDOUT_BASEADDRESS, c);
 1019940:	e1a01000 	mov	r1, r0
 1019944:	e3a00a01 	mov	r0, #4096	; 0x1000
 1019948:	e34e0000 	movt	r0, #57344	; 0xe000
 101994c:	ea0003da 	b	101a8bc <XUartPs_SendByte>

01019950 <XGetPlatform_Info>:
#elif (__microblaze__)
	return XPLAT_MICROBLAZE;
#else
	return XPLAT_ZYNQ;
#endif
}
 1019950:	e3a00004 	mov	r0, #4
 1019954:	e12fff1e 	bx	lr

01019958 <getnum>:
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
static s32 getnum( charptr* linep)
{
 1019958:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 101995c:	e1a07000 	mov	r7, r0
    s32 n;
    s32 ResultIsDigit = 0;
    charptr cptr;
    n = 0;
    cptr = *linep;
 1019960:	e5906000 	ldr	r6, [r0]
	if(cptr != NULL){
 1019964:	e3560000 	cmp	r6, #0
 1019968:	0a00001b 	beq	10199dc <getnum+0x84>
		ResultIsDigit = isdigit(((s32)*cptr));
 101996c:	fa000b42 	blx	101c67c <__locale_ctype_ptr>
 1019970:	e5d63000 	ldrb	r3, [r6]
 1019974:	e0800003 	add	r0, r0, r3
	}
    while (ResultIsDigit != 0) {
 1019978:	e5d05001 	ldrb	r5, [r0, #1]
 101997c:	e2155004 	ands	r5, r5, #4
 1019980:	0a000012 	beq	10199d0 <getnum+0x78>
 1019984:	e2864001 	add	r4, r6, #1
 1019988:	e3a05000 	mov	r5, #0
		if(cptr != NULL){
 101998c:	e3540001 	cmp	r4, #1
 1019990:	0a000013 	beq	10199e4 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
			cptr += 1;
			if(cptr != NULL){
 1019994:	e3540000 	cmp	r4, #0
			cptr += 1;
 1019998:	e1a06004 	mov	r6, r4
			if(cptr != NULL){
 101999c:	0a000010 	beq	10199e4 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
 10199a0:	e5543001 	ldrb	r3, [r4, #-1]
 10199a4:	e0855105 	add	r5, r5, r5, lsl #2
 10199a8:	e2844001 	add	r4, r4, #1
 10199ac:	e2433030 	sub	r3, r3, #48	; 0x30
 10199b0:	e0835085 	add	r5, r3, r5, lsl #1
				ResultIsDigit = isdigit(((s32)*cptr));
 10199b4:	fa000b30 	blx	101c67c <__locale_ctype_ptr>
			}
		}
		ResultIsDigit = isdigit(((s32)*cptr));
 10199b8:	fa000b2f 	blx	101c67c <__locale_ctype_ptr>
 10199bc:	e5d63000 	ldrb	r3, [r6]
 10199c0:	e0800003 	add	r0, r0, r3
    while (ResultIsDigit != 0) {
 10199c4:	e5d03001 	ldrb	r3, [r0, #1]
 10199c8:	e3130004 	tst	r3, #4
 10199cc:	1affffee 	bne	101998c <getnum+0x34>
	}
    *linep = ((charptr )(cptr));
 10199d0:	e5876000 	str	r6, [r7]
    return(n);
}
 10199d4:	e1a00005 	mov	r0, r5
 10199d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 10199dc:	e1a05006 	mov	r5, r6
 10199e0:	eafffffa 	b	10199d0 <getnum+0x78>
		ResultIsDigit = isdigit(((s32)*cptr));
 10199e4:	fa000b24 	blx	101c67c <__locale_ctype_ptr>
 10199e8:	e3a03000 	mov	r3, #0
 10199ec:	e5d33000 	ldrb	r3, [r3]
 10199f0:	e7f000f0 	udf	#0

010199f4 <padding.part.0>:
static void padding( const s32 l_flag, const struct params_s *par)
 10199f4:	e92d4070 	push	{r4, r5, r6, lr}
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10199f8:	e5903004 	ldr	r3, [r0, #4]
 10199fc:	e5904000 	ldr	r4, [r0]
 1019a00:	e1540003 	cmp	r4, r3
 1019a04:	a8bd8070 	popge	{r4, r5, r6, pc}
 1019a08:	e1a05000 	mov	r5, r0
            outbyte( par->pad_character);
 1019a0c:	e5d5000c 	ldrb	r0, [r5, #12]
        for (; i<(par->num1); i++) {
 1019a10:	e2844001 	add	r4, r4, #1
            outbyte( par->pad_character);
 1019a14:	ebffffc9 	bl	1019940 <outbyte>
        for (; i<(par->num1); i++) {
 1019a18:	e5953004 	ldr	r3, [r5, #4]
 1019a1c:	e1540003 	cmp	r4, r3
 1019a20:	bafffff9 	blt	1019a0c <padding.part.0+0x18>
 1019a24:	e8bd8070 	pop	{r4, r5, r6, pc}

01019a28 <outnum>:
{
 1019a28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char8 digits[] = "0123456789ABCDEF";
 1019a2c:	e30b4ed4 	movw	r4, #48852	; 0xbed4
 1019a30:	e3404106 	movt	r4, #262	; 0x106
{
 1019a34:	e1a05000 	mov	r5, r0
 1019a38:	e1a08001 	mov	r8, r1
 1019a3c:	e1a07002 	mov	r7, r2
    const char8 digits[] = "0123456789ABCDEF";
 1019a40:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
{
 1019a44:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    const char8 digits[] = "0123456789ABCDEF";
 1019a48:	e28d9004 	add	r9, sp, #4
 1019a4c:	e28d6018 	add	r6, sp, #24
 1019a50:	e28dc017 	add	ip, sp, #23
 1019a54:	e28de037 	add	lr, sp, #55	; 0x37
 1019a58:	e5944000 	ldr	r4, [r4]
 1019a5c:	e8a9000f 	stmia	r9!, {r0, r1, r2, r3}
	outbuf[i] = '0';
 1019a60:	e3a03030 	mov	r3, #48	; 0x30
    const char8 digits[] = "0123456789ABCDEF";
 1019a64:	e5c94000 	strb	r4, [r9]
	outbuf[i] = '0';
 1019a68:	e5ec3001 	strb	r3, [ip, #1]!
    for(i = 0; i<32; i++) {
 1019a6c:	e15c000e 	cmp	ip, lr
 1019a70:	1afffffc 	bne	1019a68 <outnum+0x40>
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1019a74:	e5973018 	ldr	r3, [r7, #24]
 1019a78:	e3530000 	cmp	r3, #0
 1019a7c:	1a000039 	bne	1019b68 <outnum+0x140>
 1019a80:	e1a03fa5 	lsr	r3, r5, #31
 1019a84:	e358000a 	cmp	r8, #10
 1019a88:	13a03000 	movne	r3, #0
 1019a8c:	02033001 	andeq	r3, r3, #1
 1019a90:	e3530000 	cmp	r3, #0
		num =(-(n));
 1019a94:	12655000 	rsbne	r5, r5, #0
        negative = 1;
 1019a98:	13a0b001 	movne	fp, #1
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1019a9c:	0a000031 	beq	1019b68 <outnum+0x140>
        negative = 0;
 1019aa0:	e1a09006 	mov	r9, r6
    i = 0;
 1019aa4:	e3a0a000 	mov	sl, #0
 1019aa8:	ea000000 	b	1019ab0 <outnum+0x88>
		i++;
 1019aac:	e1a0a004 	mov	sl, r4
		outbuf[i] = digits[(num % base)];
 1019ab0:	e1a00005 	mov	r0, r5
 1019ab4:	e1a01008 	mov	r1, r8
 1019ab8:	fa0005a9 	blx	101b164 <__aeabi_uidivmod>
 1019abc:	e28d3038 	add	r3, sp, #56	; 0x38
    } while (num > 0);
 1019ac0:	e1550008 	cmp	r5, r8
		outbuf[i] = digits[(num % base)];
 1019ac4:	e0831001 	add	r1, r3, r1
		i++;
 1019ac8:	e28a4001 	add	r4, sl, #1
		outbuf[i] = digits[(num % base)];
 1019acc:	e5513034 	ldrb	r3, [r1, #-52]	; 0xffffffcc
		num /= base;
 1019ad0:	e1a05000 	mov	r5, r0
		i++;
 1019ad4:	e1a02004 	mov	r2, r4
		outbuf[i] = digits[(num % base)];
 1019ad8:	e4c93001 	strb	r3, [r9], #1
    } while (num > 0);
 1019adc:	2afffff2 	bcs	1019aac <outnum+0x84>
    if (negative != 0) {
 1019ae0:	e35b0000 	cmp	fp, #0
 1019ae4:	0a000005 	beq	1019b00 <outnum+0xd8>
		outbuf[i] = '-';
 1019ae8:	e28d3038 	add	r3, sp, #56	; 0x38
		i++;
 1019aec:	e28a2002 	add	r2, sl, #2
		outbuf[i] = '-';
 1019af0:	e0833004 	add	r3, r3, r4
 1019af4:	e2844001 	add	r4, r4, #1
 1019af8:	e3a0102d 	mov	r1, #45	; 0x2d
 1019afc:	e5431020 	strb	r1, [r3, #-32]	; 0xffffffe0
    outbuf[i] = '\0';
 1019b00:	e28d3038 	add	r3, sp, #56	; 0x38
    par->len = (s32)strlen(outbuf);
 1019b04:	e1a00006 	mov	r0, r6
    outbuf[i] = '\0';
 1019b08:	e0832002 	add	r2, r3, r2
 1019b0c:	e3a03000 	mov	r3, #0
 1019b10:	e5423020 	strb	r3, [r2, #-32]	; 0xffffffe0
    par->len = (s32)strlen(outbuf);
 1019b14:	fa0012f9 	blx	101e700 <strlen>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1019b18:	e1c721d0 	ldrd	r2, [r7, #16]
    par->len = (s32)strlen(outbuf);
 1019b1c:	e5870000 	str	r0, [r7]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1019b20:	e16f3f13 	clz	r3, r3
 1019b24:	e3520000 	cmp	r2, #0
 1019b28:	e1a032a3 	lsr	r3, r3, #5
 1019b2c:	03a03000 	moveq	r3, #0
 1019b30:	e3530000 	cmp	r3, #0
 1019b34:	1a00000d 	bne	1019b70 <outnum+0x148>
 1019b38:	e0864004 	add	r4, r6, r4
	outbyte( outbuf[i] );
 1019b3c:	e5740001 	ldrb	r0, [r4, #-1]!
 1019b40:	ebffff7e 	bl	1019940 <outbyte>
    while (&outbuf[i] >= outbuf) {
 1019b44:	e1540006 	cmp	r4, r6
 1019b48:	1afffffb 	bne	1019b3c <outnum+0x114>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1019b4c:	e5972014 	ldr	r2, [r7, #20]
 1019b50:	e5973010 	ldr	r3, [r7, #16]
 1019b54:	e3520000 	cmp	r2, #0
 1019b58:	13530000 	cmpne	r3, #0
 1019b5c:	1a000006 	bne	1019b7c <outnum+0x154>
}
 1019b60:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1019b64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        negative = 0;
 1019b68:	e3a0b000 	mov	fp, #0
 1019b6c:	eaffffcb 	b	1019aa0 <outnum+0x78>
 1019b70:	e1a00007 	mov	r0, r7
 1019b74:	ebffff9e 	bl	10199f4 <padding.part.0>
 1019b78:	eaffffee 	b	1019b38 <outnum+0x110>
 1019b7c:	e1a00007 	mov	r0, r7
}
 1019b80:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1019b84:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1019b88:	eaffff99 	b	10199f4 <padding.part.0>

01019b8c <xil_printf>:
void xil_printf( const char8 *ctrl1, ...){
	XPVXenConsole_Printf(ctrl1);
}
#else
void xil_printf( const char8 *ctrl1, ...)
{
 1019b8c:	e92d000f 	push	{r0, r1, r2, r3}
 1019b90:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1019b94:	e24dd02c 	sub	sp, sp, #44	; 0x2c
        /* initialize all the flags for this format.   */
        dot_flag = 0;
#if defined (__aarch64__) || defined (__arch64__)
		long_flag = 0;
#endif
        par.unsigned_flag = 0;
 1019b98:	e3a04000 	mov	r4, #0
		par.left_flag = 0;
		par.do_padding = 0;
        par.pad_character = ' ';
 1019b9c:	e3a06020 	mov	r6, #32
        par.num2=32767;
 1019ba0:	e3075fff 	movw	r5, #32767	; 0x7fff
    va_start( argp, ctrl1);
 1019ba4:	e28d204c 	add	r2, sp, #76	; 0x4c
{
 1019ba8:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    va_start( argp, ctrl1);
 1019bac:	e58d2004 	str	r2, [sp, #4]
    char8 *ctrl = (char8 *)ctrl1;
 1019bb0:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1019bb4:	e3530000 	cmp	r3, #0
 1019bb8:	0a00000a 	beq	1019be8 <xil_printf+0x5c>
 1019bbc:	e5d30000 	ldrb	r0, [r3]
 1019bc0:	e3500000 	cmp	r0, #0
 1019bc4:	0a000007 	beq	1019be8 <xil_printf+0x5c>
        if (*ctrl != '%') {
 1019bc8:	e3500025 	cmp	r0, #37	; 0x25
 1019bcc:	0a000009 	beq	1019bf8 <xil_printf+0x6c>
            outbyte(*ctrl);
 1019bd0:	ebffff5a 	bl	1019940 <outbyte>
			ctrl += 1;
 1019bd4:	e59d3008 	ldr	r3, [sp, #8]
 1019bd8:	e2833001 	add	r3, r3, #1
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1019bdc:	e3530000 	cmp	r3, #0
			ctrl += 1;
 1019be0:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1019be4:	1afffff4 	bne	1019bbc <xil_printf+0x30>
                continue;
        }
        goto try_next;
    }
    va_end( argp);
}
 1019be8:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1019bec:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 1019bf0:	e28dd010 	add	sp, sp, #16
 1019bf4:	e12fff1e 	bx	lr
        dot_flag = 0;
 1019bf8:	e3a08000 	mov	r8, #0
        par.unsigned_flag = 0;
 1019bfc:	e58d4024 	str	r4, [sp, #36]	; 0x24
		par.left_flag = 0;
 1019c00:	e58d4020 	str	r4, [sp, #32]
		par.do_padding = 0;
 1019c04:	e58d401c 	str	r4, [sp, #28]
        par.pad_character = ' ';
 1019c08:	e5cd6018 	strb	r6, [sp, #24]
		par.num1=0;
 1019c0c:	e1cd41f0 	strd	r4, [sp, #16]
		par.len=0;
 1019c10:	e58d400c 	str	r4, [sp, #12]
			ctrl += 1;
 1019c14:	e2832001 	add	r2, r3, #1
		if(ctrl != NULL) {
 1019c18:	e3520000 	cmp	r2, #0
			ctrl += 1;
 1019c1c:	e58d2008 	str	r2, [sp, #8]
		if(ctrl != NULL) {
 1019c20:	0afffff0 	beq	1019be8 <xil_printf+0x5c>
			ch = *ctrl;
 1019c24:	e5d37001 	ldrb	r7, [r3, #1]
        if (isdigit((s32)ch) != 0) {
 1019c28:	fa000a93 	blx	101c67c <__locale_ctype_ptr>
 1019c2c:	e2879001 	add	r9, r7, #1
 1019c30:	e7d03009 	ldrb	r3, [r0, r9]
 1019c34:	e3130004 	tst	r3, #4
 1019c38:	0a000016 	beq	1019c98 <xil_printf+0x10c>
            if (dot_flag != 0) {
 1019c3c:	e3580000 	cmp	r8, #0
 1019c40:	1a0000d9 	bne	1019fac <xil_printf+0x420>
				if(ctrl != NULL) {
 1019c44:	e59d3008 	ldr	r3, [sp, #8]
                if (ch == '0') {
 1019c48:	e3570030 	cmp	r7, #48	; 0x30
                    par.pad_character = '0';
 1019c4c:	05cd7018 	strbeq	r7, [sp, #24]
				if(ctrl != NULL) {
 1019c50:	e3530000 	cmp	r3, #0
 1019c54:	0affffe3 	beq	1019be8 <xil_printf+0x5c>
			par.num1 = getnum(&ctrl);
 1019c58:	e28d0008 	add	r0, sp, #8
 1019c5c:	ebffff3d 	bl	1019958 <getnum>
 1019c60:	e59d3008 	ldr	r3, [sp, #8]
                par.do_padding = 1;
 1019c64:	e3a02001 	mov	r2, #1
			par.num1 = getnum(&ctrl);
 1019c68:	e58d0010 	str	r0, [sp, #16]
                par.do_padding = 1;
 1019c6c:	e58d201c 	str	r2, [sp, #28]
            if(ctrl != NULL) {
 1019c70:	e3530000 	cmp	r3, #0
 1019c74:	0affffdb 	beq	1019be8 <xil_printf+0x5c>
			ctrl -= 1;
 1019c78:	e2433001 	sub	r3, r3, #1
 1019c7c:	e58d3008 	str	r3, [sp, #8]
		if(ctrl != NULL) {
 1019c80:	e3530000 	cmp	r3, #0
 1019c84:	1affffe2 	bne	1019c14 <xil_printf+0x88>
}
 1019c88:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1019c8c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 1019c90:	e28dd010 	add	sp, sp, #16
 1019c94:	e12fff1e 	bx	lr
        switch (tolower((s32)ch)) {
 1019c98:	fa000a77 	blx	101c67c <__locale_ctype_ptr>
 1019c9c:	e7d03009 	ldrb	r3, [r0, r9]
 1019ca0:	e2033003 	and	r3, r3, #3
 1019ca4:	e3530001 	cmp	r3, #1
 1019ca8:	02877020 	addeq	r7, r7, #32
 1019cac:	e2477025 	sub	r7, r7, #37	; 0x25
 1019cb0:	e3570053 	cmp	r7, #83	; 0x53
 1019cb4:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
 1019cb8:	ea00005c 	b	1019e30 <xil_printf+0x2a4>
 1019cbc:	01019ef4 	.word	0x01019ef4
 1019cc0:	01019e30 	.word	0x01019e30
 1019cc4:	01019e30 	.word	0x01019e30
 1019cc8:	01019e30 	.word	0x01019e30
 1019ccc:	01019e30 	.word	0x01019e30
 1019cd0:	01019e30 	.word	0x01019e30
 1019cd4:	01019e30 	.word	0x01019e30
 1019cd8:	01019e30 	.word	0x01019e30
 1019cdc:	01019f00 	.word	0x01019f00
 1019ce0:	01019ee8 	.word	0x01019ee8
 1019ce4:	01019e30 	.word	0x01019e30
 1019ce8:	01019e30 	.word	0x01019e30
 1019cec:	01019e30 	.word	0x01019e30
 1019cf0:	01019e30 	.word	0x01019e30
 1019cf4:	01019e30 	.word	0x01019e30
 1019cf8:	01019e30 	.word	0x01019e30
 1019cfc:	01019e30 	.word	0x01019e30
 1019d00:	01019e30 	.word	0x01019e30
 1019d04:	01019e30 	.word	0x01019e30
 1019d08:	01019e30 	.word	0x01019e30
 1019d0c:	01019e30 	.word	0x01019e30
 1019d10:	01019e30 	.word	0x01019e30
 1019d14:	01019e30 	.word	0x01019e30
 1019d18:	01019e30 	.word	0x01019e30
 1019d1c:	01019e30 	.word	0x01019e30
 1019d20:	01019e30 	.word	0x01019e30
 1019d24:	01019e30 	.word	0x01019e30
 1019d28:	01019e30 	.word	0x01019e30
 1019d2c:	01019e30 	.word	0x01019e30
 1019d30:	01019e30 	.word	0x01019e30
 1019d34:	01019e30 	.word	0x01019e30
 1019d38:	01019e30 	.word	0x01019e30
 1019d3c:	01019e30 	.word	0x01019e30
 1019d40:	01019e30 	.word	0x01019e30
 1019d44:	01019e30 	.word	0x01019e30
 1019d48:	01019e30 	.word	0x01019e30
 1019d4c:	01019e30 	.word	0x01019e30
 1019d50:	01019e30 	.word	0x01019e30
 1019d54:	01019e30 	.word	0x01019e30
 1019d58:	01019e30 	.word	0x01019e30
 1019d5c:	01019e30 	.word	0x01019e30
 1019d60:	01019e30 	.word	0x01019e30
 1019d64:	01019e30 	.word	0x01019e30
 1019d68:	01019e30 	.word	0x01019e30
 1019d6c:	01019e30 	.word	0x01019e30
 1019d70:	01019e30 	.word	0x01019e30
 1019d74:	01019e30 	.word	0x01019e30
 1019d78:	01019e30 	.word	0x01019e30
 1019d7c:	01019e30 	.word	0x01019e30
 1019d80:	01019e30 	.word	0x01019e30
 1019d84:	01019e30 	.word	0x01019e30
 1019d88:	01019ec0 	.word	0x01019ec0
 1019d8c:	01019e30 	.word	0x01019e30
 1019d90:	01019e30 	.word	0x01019e30
 1019d94:	01019e30 	.word	0x01019e30
 1019d98:	01019e60 	.word	0x01019e60
 1019d9c:	01019e30 	.word	0x01019e30
 1019da0:	01019e30 	.word	0x01019e30
 1019da4:	01019e30 	.word	0x01019e30
 1019da8:	01019e30 	.word	0x01019e30
 1019dac:	01019e30 	.word	0x01019e30
 1019db0:	01019e30 	.word	0x01019e30
 1019db4:	01019e48 	.word	0x01019e48
 1019db8:	01019e14 	.word	0x01019e14
 1019dbc:	01019e30 	.word	0x01019e30
 1019dc0:	01019e30 	.word	0x01019e30
 1019dc4:	01019e30 	.word	0x01019e30
 1019dc8:	01019e30 	.word	0x01019e30
 1019dcc:	01019e14 	.word	0x01019e14
 1019dd0:	01019e30 	.word	0x01019e30
 1019dd4:	01019e30 	.word	0x01019e30
 1019dd8:	01019fa4 	.word	0x01019fa4
 1019ddc:	01019e30 	.word	0x01019e30
 1019de0:	01019e30 	.word	0x01019e30
 1019de4:	01019e30 	.word	0x01019e30
 1019de8:	01019ec0 	.word	0x01019ec0
 1019dec:	01019e30 	.word	0x01019e30
 1019df0:	01019e30 	.word	0x01019e30
 1019df4:	01019f10 	.word	0x01019f10
 1019df8:	01019e30 	.word	0x01019e30
 1019dfc:	01019e0c 	.word	0x01019e0c
 1019e00:	01019e30 	.word	0x01019e30
 1019e04:	01019e30 	.word	0x01019e30
 1019e08:	01019ec0 	.word	0x01019ec0
                par.unsigned_flag = 1;
 1019e0c:	e3a03001 	mov	r3, #1
 1019e10:	e58d3024 	str	r3, [sp, #36]	; 0x24
                    outnum( va_arg(argp, s32), 10L, &par);
 1019e14:	e59d3004 	ldr	r3, [sp, #4]
 1019e18:	e28d200c 	add	r2, sp, #12
 1019e1c:	e3a0100a 	mov	r1, #10
 1019e20:	e283c004 	add	ip, r3, #4
 1019e24:	e5930000 	ldr	r0, [r3]
 1019e28:	e58dc004 	str	ip, [sp, #4]
 1019e2c:	ebfffefd 	bl	1019a28 <outnum>
			if(ctrl != NULL) {
 1019e30:	e59d3008 	ldr	r3, [sp, #8]
 1019e34:	e3530000 	cmp	r3, #0
 1019e38:	0affff6a 	beq	1019be8 <xil_printf+0x5c>
				ctrl += 1;
 1019e3c:	e2833001 	add	r3, r3, #1
 1019e40:	e58d3008 	str	r3, [sp, #8]
 1019e44:	eaffff5a 	b	1019bb4 <xil_printf+0x28>
                outbyte( va_arg( argp, s32));
 1019e48:	e59d3004 	ldr	r3, [sp, #4]
 1019e4c:	e2832004 	add	r2, r3, #4
 1019e50:	e5d30000 	ldrb	r0, [r3]
 1019e54:	e58d2004 	str	r2, [sp, #4]
 1019e58:	ebfffeb8 	bl	1019940 <outbyte>
        if(Check == 1) {
 1019e5c:	eafffff3 	b	1019e30 <xil_printf+0x2a4>
                switch (*ctrl) {
 1019e60:	e59d3008 	ldr	r3, [sp, #8]
 1019e64:	e5d30000 	ldrb	r0, [r3]
 1019e68:	e2403061 	sub	r3, r0, #97	; 0x61
 1019e6c:	e3530011 	cmp	r3, #17
 1019e70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1019e74:	ea000065 	b	101a010 <xil_printf+0x484>
 1019e78:	01019fe4 	.word	0x01019fe4
 1019e7c:	0101a010 	.word	0x0101a010
 1019e80:	0101a010 	.word	0x0101a010
 1019e84:	0101a010 	.word	0x0101a010
 1019e88:	0101a010 	.word	0x0101a010
 1019e8c:	0101a010 	.word	0x0101a010
 1019e90:	0101a010 	.word	0x0101a010
 1019e94:	01019ff0 	.word	0x01019ff0
 1019e98:	0101a010 	.word	0x0101a010
 1019e9c:	0101a010 	.word	0x0101a010
 1019ea0:	0101a010 	.word	0x0101a010
 1019ea4:	0101a010 	.word	0x0101a010
 1019ea8:	0101a010 	.word	0x0101a010
 1019eac:	01019ffc 	.word	0x01019ffc
 1019eb0:	0101a010 	.word	0x0101a010
 1019eb4:	0101a010 	.word	0x0101a010
 1019eb8:	0101a010 	.word	0x0101a010
 1019ebc:	01019fcc 	.word	0x01019fcc
                outnum((s32)va_arg(argp, s32), 16L, &par);
 1019ec0:	e59d3004 	ldr	r3, [sp, #4]
                par.unsigned_flag = 1;
 1019ec4:	e3a01001 	mov	r1, #1
 1019ec8:	e58d1024 	str	r1, [sp, #36]	; 0x24
                outnum((s32)va_arg(argp, s32), 16L, &par);
 1019ecc:	e28d200c 	add	r2, sp, #12
 1019ed0:	e3a01010 	mov	r1, #16
 1019ed4:	e283c004 	add	ip, r3, #4
 1019ed8:	e5930000 	ldr	r0, [r3]
 1019edc:	e58dc004 	str	ip, [sp, #4]
 1019ee0:	ebfffed0 	bl	1019a28 <outnum>
        if(Check == 1) {
 1019ee4:	eaffffd1 	b	1019e30 <xil_printf+0x2a4>
 1019ee8:	e59d3008 	ldr	r3, [sp, #8]
                dot_flag = 1;
 1019eec:	e3a08001 	mov	r8, #1
 1019ef0:	eaffff62 	b	1019c80 <xil_printf+0xf4>
                outbyte( '%');
 1019ef4:	e3a00025 	mov	r0, #37	; 0x25
 1019ef8:	ebfffe90 	bl	1019940 <outbyte>
        if(Check == 1) {
 1019efc:	eaffffcb 	b	1019e30 <xil_printf+0x2a4>
                par.left_flag = 1;
 1019f00:	e3a02001 	mov	r2, #1
 1019f04:	e59d3008 	ldr	r3, [sp, #8]
 1019f08:	e58d2020 	str	r2, [sp, #32]
        if(Check == 1) {
 1019f0c:	eaffff5b 	b	1019c80 <xil_printf+0xf4>
                outs( va_arg( argp, char *), &par);
 1019f10:	e59d3004 	ldr	r3, [sp, #4]
 1019f14:	e5937000 	ldr	r7, [r3]
 1019f18:	e2833004 	add	r3, r3, #4
 1019f1c:	e58d3004 	str	r3, [sp, #4]
	if(LocalPtr != NULL) {
 1019f20:	e3570000 	cmp	r7, #0
 1019f24:	0a000002 	beq	1019f34 <xil_printf+0x3a8>
		par->len = (s32)strlen( LocalPtr);
 1019f28:	e1a00007 	mov	r0, r7
 1019f2c:	fa0011f3 	blx	101e700 <strlen>
 1019f30:	e58d000c 	str	r0, [sp, #12]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1019f34:	e1cd21dc 	ldrd	r2, [sp, #28]
 1019f38:	e16f3f13 	clz	r3, r3
 1019f3c:	e3520000 	cmp	r2, #0
 1019f40:	e1a032a3 	lsr	r3, r3, #5
 1019f44:	03a03000 	moveq	r3, #0
 1019f48:	e3530000 	cmp	r3, #0
 1019f4c:	1a00001b 	bne	1019fc0 <xil_printf+0x434>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 1019f50:	e5d73000 	ldrb	r3, [r7]
 1019f54:	e3530000 	cmp	r3, #0
 1019f58:	1a000007 	bne	1019f7c <xil_printf+0x3f0>
 1019f5c:	ea000009 	b	1019f88 <xil_printf+0x3fc>
		(par->num2)--;
 1019f60:	e2433001 	sub	r3, r3, #1
 1019f64:	e58d3014 	str	r3, [sp, #20]
        outbyte(*LocalPtr);
 1019f68:	e5d70000 	ldrb	r0, [r7]
 1019f6c:	ebfffe73 	bl	1019940 <outbyte>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 1019f70:	e5f73001 	ldrb	r3, [r7, #1]!
 1019f74:	e3530000 	cmp	r3, #0
 1019f78:	0a000002 	beq	1019f88 <xil_printf+0x3fc>
 1019f7c:	e59d3014 	ldr	r3, [sp, #20]
 1019f80:	e3530000 	cmp	r3, #0
 1019f84:	1afffff5 	bne	1019f60 <xil_printf+0x3d4>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1019f88:	e1cd21dc 	ldrd	r2, [sp, #28]
 1019f8c:	e3520000 	cmp	r2, #0
 1019f90:	13530000 	cmpne	r3, #0
 1019f94:	0affffa5 	beq	1019e30 <xil_printf+0x2a4>
 1019f98:	e28d000c 	add	r0, sp, #12
 1019f9c:	ebfffe94 	bl	10199f4 <padding.part.0>
 1019fa0:	eaffffa2 	b	1019e30 <xil_printf+0x2a4>
 1019fa4:	e59d3008 	ldr	r3, [sp, #8]
 1019fa8:	eaffff34 	b	1019c80 <xil_printf+0xf4>
                par.num2 = getnum(&ctrl);
 1019fac:	e28d0008 	add	r0, sp, #8
 1019fb0:	ebfffe68 	bl	1019958 <getnum>
 1019fb4:	e59d3008 	ldr	r3, [sp, #8]
 1019fb8:	e58d0014 	str	r0, [sp, #20]
 1019fbc:	eaffff2b 	b	1019c70 <xil_printf+0xe4>
 1019fc0:	e28d000c 	add	r0, sp, #12
 1019fc4:	ebfffe8a 	bl	10199f4 <padding.part.0>
 1019fc8:	eaffffe0 	b	1019f50 <xil_printf+0x3c4>
                        outbyte( ((char8)0x0D));
 1019fcc:	e3a0000d 	mov	r0, #13
 1019fd0:	ebfffe5a 	bl	1019940 <outbyte>
                ctrl += 1;
 1019fd4:	e59d3008 	ldr	r3, [sp, #8]
 1019fd8:	e2833001 	add	r3, r3, #1
 1019fdc:	e58d3008 	str	r3, [sp, #8]
        if(Check == 1) {
 1019fe0:	eaffff26 	b	1019c80 <xil_printf+0xf4>
                        outbyte( ((char8)0x07));
 1019fe4:	e3a00007 	mov	r0, #7
 1019fe8:	ebfffe54 	bl	1019940 <outbyte>
                        break;
 1019fec:	eafffff8 	b	1019fd4 <xil_printf+0x448>
                        outbyte( ((char8)0x08));
 1019ff0:	e3a00008 	mov	r0, #8
 1019ff4:	ebfffe51 	bl	1019940 <outbyte>
                        break;
 1019ff8:	eafffff5 	b	1019fd4 <xil_printf+0x448>
                        outbyte( ((char8)0x0D));
 1019ffc:	e3a0000d 	mov	r0, #13
 101a000:	ebfffe4e 	bl	1019940 <outbyte>
                        outbyte( ((char8)0x0A));
 101a004:	e3a0000a 	mov	r0, #10
 101a008:	ebfffe4c 	bl	1019940 <outbyte>
                        break;
 101a00c:	eafffff0 	b	1019fd4 <xil_printf+0x448>
                        outbyte( *ctrl);
 101a010:	ebfffe4a 	bl	1019940 <outbyte>
                        break;
 101a014:	eaffffee 	b	1019fd4 <xil_printf+0x448>

0101a018 <Xil_ExceptionNullHandler>:
*
*****************************************************************************/
static void Xil_ExceptionNullHandler(void *Data)
{
	(void) Data;
DieLoop: goto DieLoop;
 101a018:	eafffffe 	b	101a018 <Xil_ExceptionNullHandler>

0101a01c <Xil_DataAbortHandler>:
*
* @note		None.
*
****************************************************************************/

void Xil_DataAbortHandler(void *CallBackRef){
 101a01c:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

        xdbg_printf(XDBG_DEBUG_ERROR, "Data abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_DATA_FAULT_STATUS);
 101a020:	ee151f10 	mrc	15, 0, r1, cr5, cr0, {0}
	        mfcp(XREG_CP15_DATA_FAULT_STATUS,FaultStatus);
	    #else
	        { volatile register u32 Reg __asm(XREG_CP15_DATA_FAULT_STATUS);
	        FaultStatus = Reg; }
	    #endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Data abort with Data Fault Status Register  %lx\n",FaultStatus);
 101a024:	e30b0ee8 	movw	r0, #48872	; 0xbee8
 101a028:	e3400106 	movt	r0, #262	; 0x106
 101a02c:	fa000e72 	blx	101d9fc <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Data abort %lx\n",DataAbortAddr);
 101a030:	e3013f64 	movw	r3, #8036	; 0x1f64
 101a034:	e30b0f1c 	movw	r0, #48924	; 0xbf1c
 101a038:	e340310c 	movt	r3, #268	; 0x10c
 101a03c:	e3400106 	movt	r0, #262	; 0x106
 101a040:	e5931000 	ldr	r1, [r3]
 101a044:	fa000e6c 	blx	101d9fc <printf>
#endif
	while(1) {
		;
 101a048:	eafffffe 	b	101a048 <Xil_DataAbortHandler+0x2c>

0101a04c <Xil_PrefetchAbortHandler>:
* @return	None.
*
* @note		None.
*
****************************************************************************/
void Xil_PrefetchAbortHandler(void *CallBackRef){
 101a04c:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

    xdbg_printf(XDBG_DEBUG_ERROR, "Prefetch abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_INST_FAULT_STATUS);
 101a050:	ee151f30 	mrc	15, 0, r1, cr5, cr0, {1}
			mfcp(XREG_CP15_INST_FAULT_STATUS,FaultStatus);
	    #else
			{ volatile register u32 Reg __asm(XREG_CP15_INST_FAULT_STATUS);
			FaultStatus = Reg; }
		#endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Prefetch abort with Instruction Fault Status Register  %lx\n",FaultStatus);
 101a054:	e30b0f4c 	movw	r0, #48972	; 0xbf4c
 101a058:	e3400106 	movt	r0, #262	; 0x106
 101a05c:	fa000e66 	blx	101d9fc <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Prefetch abort %lx\n",PrefetchAbortAddr);
 101a060:	e3013f60 	movw	r3, #8032	; 0x1f60
 101a064:	e30b0f88 	movw	r0, #49032	; 0xbf88
 101a068:	e340310c 	movt	r3, #268	; 0x10c
 101a06c:	e3400106 	movt	r0, #262	; 0x106
 101a070:	e5931000 	ldr	r1, [r3]
 101a074:	fa000e60 	blx	101d9fc <printf>
#endif
	while(1) {
		;
 101a078:	eafffffe 	b	101a078 <Xil_PrefetchAbortHandler+0x2c>

0101a07c <Xil_UndefinedExceptionHandler>:
* @note		None.
*
****************************************************************************/
void Xil_UndefinedExceptionHandler(void *CallBackRef){
	(void) CallBackRef;
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 101a07c:	e3013f5c 	movw	r3, #8028	; 0x1f5c
 101a080:	e30b0fbc 	movw	r0, #49084	; 0xbfbc
 101a084:	e340310c 	movt	r3, #268	; 0x10c
void Xil_UndefinedExceptionHandler(void *CallBackRef){
 101a088:	e92d4010 	push	{r4, lr}
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 101a08c:	e3400106 	movt	r0, #262	; 0x106
 101a090:	e5931000 	ldr	r1, [r3]
 101a094:	fa000e58 	blx	101d9fc <printf>
	while(1) {
		;
 101a098:	eafffffe 	b	101a098 <Xil_UndefinedExceptionHandler+0x1c>

0101a09c <Xil_ExceptionInit>:
}
 101a09c:	e12fff1e 	bx	lr

0101a0a0 <Xil_ExceptionRegisterHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 101a0a0:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101a0a4:	e3403106 	movt	r3, #262	; 0x106
	XExc_VectorTable[Exception_id].Data = Data;
 101a0a8:	e083c180 	add	ip, r3, r0, lsl #3
	XExc_VectorTable[Exception_id].Handler = Handler;
 101a0ac:	e7831180 	str	r1, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 101a0b0:	e58c2004 	str	r2, [ip, #4]
}
 101a0b4:	e12fff1e 	bx	lr

0101a0b8 <Xil_GetExceptionRegisterHandler>:
	*Handler = XExc_VectorTable[Exception_id].Handler;
 101a0b8:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101a0bc:	e3403106 	movt	r3, #262	; 0x106
 101a0c0:	e793c180 	ldr	ip, [r3, r0, lsl #3]
	*Data = XExc_VectorTable[Exception_id].Data;
 101a0c4:	e0833180 	add	r3, r3, r0, lsl #3
	*Handler = XExc_VectorTable[Exception_id].Handler;
 101a0c8:	e581c000 	str	ip, [r1]
	*Data = XExc_VectorTable[Exception_id].Data;
 101a0cc:	e5933004 	ldr	r3, [r3, #4]
 101a0d0:	e5823000 	str	r3, [r2]
}
 101a0d4:	e12fff1e 	bx	lr

0101a0d8 <Xil_ExceptionRemoveHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 101a0d8:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101a0dc:	e30a2018 	movw	r2, #40984	; 0xa018
 101a0e0:	e3403106 	movt	r3, #262	; 0x106
 101a0e4:	e3402101 	movt	r2, #257	; 0x101
	XExc_VectorTable[Exception_id].Data = Data;
 101a0e8:	e0831180 	add	r1, r3, r0, lsl #3
 101a0ec:	e3a0c000 	mov	ip, #0
	XExc_VectorTable[Exception_id].Handler = Handler;
 101a0f0:	e7832180 	str	r2, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 101a0f4:	e581c004 	str	ip, [r1, #4]
}
 101a0f8:	e12fff1e 	bx	lr

0101a0fc <StubStatusHandler>:
static void StubStatusHandler(const void *CallBackRef, u32 StatusEvent)
{
	(const void) CallBackRef;
	(void) StatusEvent;

	Xil_AssertVoidAlways();
 101a0fc:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
{
 101a100:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 101a104:	e3001229 	movw	r1, #553	; 0x229
 101a108:	e3400106 	movt	r0, #262	; 0x106
 101a10c:	ebfffb8a 	bl	1018f3c <Xil_Assert>
 101a110:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a114:	e3a02001 	mov	r2, #1
 101a118:	e340310c 	movt	r3, #268	; 0x10c
 101a11c:	e5832000 	str	r2, [r3]
}
 101a120:	e8bd8010 	pop	{r4, pc}

0101a124 <XTtcPs_CfgInitialize>:
{
 101a124:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a128:	e2504000 	subs	r4, r0, #0
 101a12c:	0a000031 	beq	101a1f8 <XTtcPs_CfgInitialize+0xd4>
 101a130:	e3015f58 	movw	r5, #8024	; 0x1f58
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101a134:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a138:	e340510c 	movt	r5, #268	; 0x10c
 101a13c:	e3a03000 	mov	r3, #0
 101a140:	e1a06001 	mov	r6, r1
 101a144:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101a148:	0a000034 	beq	101a220 <XTtcPs_CfgInitialize+0xfc>
	InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 101a14c:	e5910008 	ldr	r0, [r1, #8]
	InstancePtr->StatusHandler = StubStatusHandler;
 101a150:	e30a10fc 	movw	r1, #41212	; 0xa0fc
	InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 101a154:	e1d6c0b0 	ldrh	ip, [r6]
	InstancePtr->StatusHandler = StubStatusHandler;
 101a158:	e3401101 	movt	r1, #257	; 0x101
	InstancePtr->Config.BaseAddress = EffectiveAddr;
 101a15c:	e5842004 	str	r2, [r4, #4]
	InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 101a160:	e5840008 	str	r0, [r4, #8]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 101a164:	e592000c 	ldr	r0, [r2, #12]
	InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 101a168:	e1c4c0b0 	strh	ip, [r4]
	InstancePtr->StatusHandler = StubStatusHandler;
 101a16c:	e5841010 	str	r1, [r4, #16]
	if(IsStartResult == (u32)TRUE) {
 101a170:	e3100001 	tst	r0, #1
 101a174:	0a00001d 	beq	101a1f0 <XTtcPs_CfgInitialize+0xcc>
 101a178:	e592100c 	ldr	r1, [r2, #12]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 101a17c:	e3a05021 	mov	r5, #33	; 0x21
		Status = XST_SUCCESS;
 101a180:	e1a00003 	mov	r0, r3
 101a184:	e3a0e01f 	mov	lr, #31
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 101a188:	e301c111 	movw	ip, #4369	; 0x1111
		XTtcPs_Stop(InstancePtr);
 101a18c:	e3811001 	orr	r1, r1, #1
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 101a190:	e341c111 	movt	ip, #4369	; 0x1111
 101a194:	e582100c 	str	r1, [r2, #12]
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a198:	e5942004 	ldr	r2, [r4, #4]
 101a19c:	e582500c 	str	r5, [r2, #12]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 101a1a0:	e5942004 	ldr	r2, [r4, #4]
	*LocalAddr = Value;
 101a1a4:	e5823000 	str	r3, [r2]
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a1a8:	e5942004 	ldr	r2, [r4, #4]
 101a1ac:	e5823024 	str	r3, [r2, #36]	; 0x24
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a1b0:	e5942004 	ldr	r2, [r4, #4]
 101a1b4:	e5823030 	str	r3, [r2, #48]	; 0x30
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a1b8:	e5942004 	ldr	r2, [r4, #4]
 101a1bc:	e582303c 	str	r3, [r2, #60]	; 0x3c
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a1c0:	e5942004 	ldr	r2, [r4, #4]
 101a1c4:	e5823048 	str	r3, [r2, #72]	; 0x48
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a1c8:	e5942004 	ldr	r2, [r4, #4]
 101a1cc:	e5823060 	str	r3, [r2, #96]	; 0x60
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a1d0:	e5943004 	ldr	r3, [r4, #4]
 101a1d4:	e583e054 	str	lr, [r3, #84]	; 0x54
		XTtcPs_ResetCounterValue(InstancePtr);
 101a1d8:	e5942004 	ldr	r2, [r4, #4]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 101a1dc:	e584c00c 	str	ip, [r4, #12]
	return *(volatile u32 *) Addr;
 101a1e0:	e592300c 	ldr	r3, [r2, #12]
		XTtcPs_ResetCounterValue(InstancePtr);
 101a1e4:	e3833010 	orr	r3, r3, #16
	*LocalAddr = Value;
 101a1e8:	e582300c 	str	r3, [r2, #12]
		Status = XST_SUCCESS;
 101a1ec:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = XST_DEVICE_IS_STARTED;
 101a1f0:	e3a00005 	mov	r0, #5
}
 101a1f4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a1f8:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a1fc:	e3a0107e 	mov	r1, #126	; 0x7e
 101a200:	e3400106 	movt	r0, #262	; 0x106
 101a204:	ebfffb4c 	bl	1018f3c <Xil_Assert>
 101a208:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a20c:	e3a02001 	mov	r2, #1
 101a210:	e340310c 	movt	r3, #268	; 0x10c
 101a214:	e1a00004 	mov	r0, r4
 101a218:	e5832000 	str	r2, [r3]
 101a21c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101a220:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a224:	e3a0107f 	mov	r1, #127	; 0x7f
 101a228:	e3400106 	movt	r0, #262	; 0x106
 101a22c:	ebfffb42 	bl	1018f3c <Xil_Assert>
 101a230:	e3a03001 	mov	r3, #1
 101a234:	e1a00006 	mov	r0, r6
 101a238:	e5853000 	str	r3, [r5]
 101a23c:	e8bd8070 	pop	{r4, r5, r6, pc}

0101a240 <XTtcPs_SetMatchValue>:
	Xil_AssertVoid(InstancePtr != NULL);
 101a240:	e3500000 	cmp	r0, #0
{
 101a244:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101a248:	0a00001e 	beq	101a2c8 <XTtcPs_SetMatchValue+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a24c:	e590c00c 	ldr	ip, [r0, #12]
 101a250:	e3013111 	movw	r3, #4369	; 0x1111
 101a254:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101a258:	e3014f58 	movw	r4, #8024	; 0x1f58
 101a25c:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a260:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 101a264:	e3a03000 	mov	r3, #0
 101a268:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a26c:	1a000007 	bne	101a290 <XTtcPs_SetMatchValue+0x50>
	Xil_AssertVoid(MatchIndex < (u8)XTTCPS_NUM_MATCH_REG);
 101a270:	e3510002 	cmp	r1, #2
 101a274:	8a00000c 	bhi	101a2ac <XTtcPs_SetMatchValue+0x6c>
	XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a278:	e3a0300c 	mov	r3, #12
 101a27c:	e3a0c030 	mov	ip, #48	; 0x30
 101a280:	e5900004 	ldr	r0, [r0, #4]
 101a284:	e101c183 	smlabb	r1, r3, r1, ip
 101a288:	e7812000 	str	r2, [r1, r0]
 101a28c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a290:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a294:	e3a010d9 	mov	r1, #217	; 0xd9
 101a298:	e3400106 	movt	r0, #262	; 0x106
 101a29c:	ebfffb26 	bl	1018f3c <Xil_Assert>
 101a2a0:	e3a03001 	mov	r3, #1
 101a2a4:	e5843000 	str	r3, [r4]
 101a2a8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(MatchIndex < (u8)XTTCPS_NUM_MATCH_REG);
 101a2ac:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a2b0:	e3a010da 	mov	r1, #218	; 0xda
 101a2b4:	e3400106 	movt	r0, #262	; 0x106
 101a2b8:	ebfffb1f 	bl	1018f3c <Xil_Assert>
 101a2bc:	e3a03001 	mov	r3, #1
 101a2c0:	e5843000 	str	r3, [r4]
}
 101a2c4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101a2c8:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a2cc:	e3a010d8 	mov	r1, #216	; 0xd8
 101a2d0:	e3400106 	movt	r0, #262	; 0x106
 101a2d4:	ebfffb18 	bl	1018f3c <Xil_Assert>
 101a2d8:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a2dc:	e3a02001 	mov	r2, #1
 101a2e0:	e340310c 	movt	r3, #268	; 0x10c
 101a2e4:	e5832000 	str	r2, [r3]
 101a2e8:	e8bd8010 	pop	{r4, pc}

0101a2ec <XTtcPs_GetMatchValue>:
{
 101a2ec:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a2f0:	e2506000 	subs	r6, r0, #0
 101a2f4:	0a000021 	beq	101a380 <XTtcPs_GetMatchValue+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a2f8:	e596200c 	ldr	r2, [r6, #12]
 101a2fc:	e3013111 	movw	r3, #4369	; 0x1111
 101a300:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a304:	e3015f58 	movw	r5, #8024	; 0x1f58
 101a308:	e340510c 	movt	r5, #268	; 0x10c
 101a30c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a310:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a314:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a318:	1a000008 	bne	101a340 <XTtcPs_GetMatchValue+0x54>
	Xil_AssertNonvoid(MatchIndex < XTTCPS_NUM_MATCH_REG);
 101a31c:	e3510002 	cmp	r1, #2
 101a320:	8a00000e 	bhi	101a360 <XTtcPs_GetMatchValue+0x74>
	MatchReg = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 101a324:	e3a0300c 	mov	r3, #12
 101a328:	e3a00030 	mov	r0, #48	; 0x30
 101a32c:	e1010183 	smlabb	r1, r3, r1, r0
 101a330:	e5962004 	ldr	r2, [r6, #4]
	return *(volatile u32 *) Addr;
 101a334:	e7914002 	ldr	r4, [r1, r2]
	return (XMatchRegValue) MatchReg;
 101a338:	e6ff0074 	uxth	r0, r4
 101a33c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a340:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a344:	e3a010fb 	mov	r1, #251	; 0xfb
 101a348:	e3400106 	movt	r0, #262	; 0x106
 101a34c:	ebfffafa 	bl	1018f3c <Xil_Assert>
 101a350:	e3a03001 	mov	r3, #1
 101a354:	e1a00004 	mov	r0, r4
 101a358:	e5853000 	str	r3, [r5]
 101a35c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(MatchIndex < XTTCPS_NUM_MATCH_REG);
 101a360:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a364:	e3a010fc 	mov	r1, #252	; 0xfc
 101a368:	e3400106 	movt	r0, #262	; 0x106
 101a36c:	ebfffaf2 	bl	1018f3c <Xil_Assert>
 101a370:	e3a03001 	mov	r3, #1
 101a374:	e1a00004 	mov	r0, r4
 101a378:	e5853000 	str	r3, [r5]
}
 101a37c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a380:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a384:	e3a010fa 	mov	r1, #250	; 0xfa
 101a388:	e3400106 	movt	r0, #262	; 0x106
 101a38c:	ebfffaea 	bl	1018f3c <Xil_Assert>
 101a390:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a394:	e3a02001 	mov	r2, #1
 101a398:	e340310c 	movt	r3, #268	; 0x10c
 101a39c:	e1a00006 	mov	r0, r6
 101a3a0:	e5832000 	str	r2, [r3]
 101a3a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0101a3a8 <XTtcPs_SetPrescaler>:
	Xil_AssertVoid(InstancePtr != NULL);
 101a3a8:	e3500000 	cmp	r0, #0
{
 101a3ac:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101a3b0:	0a00001f 	beq	101a434 <XTtcPs_SetPrescaler+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a3b4:	e590c00c 	ldr	ip, [r0, #12]
 101a3b8:	e3012111 	movw	r2, #4369	; 0x1111
 101a3bc:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101a3c0:	e3014f58 	movw	r4, #8024	; 0x1f58
 101a3c4:	e340410c 	movt	r4, #268	; 0x10c
 101a3c8:	e3a03000 	mov	r3, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a3cc:	e15c0002 	cmp	ip, r2
	Xil_AssertVoid(InstancePtr != NULL);
 101a3d0:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a3d4:	1a000008 	bne	101a3fc <XTtcPs_SetPrescaler+0x54>
	Xil_AssertVoid(PrescalerValue <= XTTCPS_CLK_CNTRL_PS_DISABLE);
 101a3d8:	e3510010 	cmp	r1, #16
 101a3dc:	8a00000d 	bhi	101a418 <XTtcPs_SetPrescaler+0x70>
 101a3e0:	e5902004 	ldr	r2, [r0, #4]
 101a3e4:	e5923000 	ldr	r3, [r2]
	ClockReg &=
 101a3e8:	e3c3301f 	bic	r3, r3, #31
		ClockReg |= (u32)(((u32)PrescalerValue << (u32)XTTCPS_CLK_CNTRL_PS_VAL_SHIFT) &
 101a3ec:	11833081 	orrne	r3, r3, r1, lsl #1
		ClockReg |= (u32)XTTCPS_CLK_CNTRL_PS_EN_MASK;
 101a3f0:	13833001 	orrne	r3, r3, #1
	*LocalAddr = Value;
 101a3f4:	e5823000 	str	r3, [r2]
}
 101a3f8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a3fc:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a400:	e3001121 	movw	r1, #289	; 0x121
 101a404:	e3400106 	movt	r0, #262	; 0x106
 101a408:	ebfffacb 	bl	1018f3c <Xil_Assert>
 101a40c:	e3a03001 	mov	r3, #1
 101a410:	e5843000 	str	r3, [r4]
 101a414:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(PrescalerValue <= XTTCPS_CLK_CNTRL_PS_DISABLE);
 101a418:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a41c:	e3001122 	movw	r1, #290	; 0x122
 101a420:	e3400106 	movt	r0, #262	; 0x106
 101a424:	ebfffac4 	bl	1018f3c <Xil_Assert>
 101a428:	e3a03001 	mov	r3, #1
 101a42c:	e5843000 	str	r3, [r4]
 101a430:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101a434:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a438:	e3a01e12 	mov	r1, #288	; 0x120
 101a43c:	e3400106 	movt	r0, #262	; 0x106
 101a440:	ebfffabd 	bl	1018f3c <Xil_Assert>
 101a444:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a448:	e3a02001 	mov	r2, #1
 101a44c:	e340310c 	movt	r3, #268	; 0x10c
 101a450:	e5832000 	str	r2, [r3]
 101a454:	e8bd8010 	pop	{r4, pc}

0101a458 <XTtcPs_GetPrescaler>:
{
 101a458:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a45c:	e2506000 	subs	r6, r0, #0
 101a460:	0a000018 	beq	101a4c8 <XTtcPs_GetPrescaler+0x70>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a464:	e596200c 	ldr	r2, [r6, #12]
 101a468:	e3013111 	movw	r3, #4369	; 0x1111
 101a46c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a470:	e3015f58 	movw	r5, #8024	; 0x1f58
 101a474:	e340510c 	movt	r5, #268	; 0x10c
 101a478:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a47c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a480:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a484:	1a000007 	bne	101a4a8 <XTtcPs_GetPrescaler+0x50>
	return *(volatile u32 *) Addr;
 101a488:	e5963004 	ldr	r3, [r6, #4]
 101a48c:	e5930000 	ldr	r0, [r3]
	if (0 == (ClockReg & XTTCPS_CLK_CNTRL_PS_EN_MASK)) {
 101a490:	e3100001 	tst	r0, #1
 101a494:	0a000001 	beq	101a4a0 <XTtcPs_GetPrescaler+0x48>
		Status = (u8)((ClockReg & (u32)XTTCPS_CLK_CNTRL_PS_VAL_MASK) >>
 101a498:	e7e300d0 	ubfx	r0, r0, #1, #4
 101a49c:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (u8)XTTCPS_CLK_CNTRL_PS_DISABLE;
 101a4a0:	e3a00010 	mov	r0, #16
}
 101a4a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a4a8:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a4ac:	e3001161 	movw	r1, #353	; 0x161
 101a4b0:	e3400106 	movt	r0, #262	; 0x106
 101a4b4:	ebfffaa0 	bl	1018f3c <Xil_Assert>
 101a4b8:	e3a03001 	mov	r3, #1
 101a4bc:	e1a00004 	mov	r0, r4
 101a4c0:	e5853000 	str	r3, [r5]
 101a4c4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a4c8:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a4cc:	e3a01e16 	mov	r1, #352	; 0x160
 101a4d0:	e3400106 	movt	r0, #262	; 0x106
 101a4d4:	ebfffa98 	bl	1018f3c <Xil_Assert>
 101a4d8:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a4dc:	e3a02001 	mov	r2, #1
 101a4e0:	e340310c 	movt	r3, #268	; 0x10c
 101a4e4:	e1a00006 	mov	r0, r6
 101a4e8:	e5832000 	str	r2, [r3]
 101a4ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0101a4f0 <XTtcPs_CalcIntervalFromFreq>:
	Xil_AssertVoid(InstancePtr != NULL);
 101a4f0:	e3500000 	cmp	r0, #0
{
 101a4f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101a4f8:	0a00002b 	beq	101a5ac <XTtcPs_CalcIntervalFromFreq+0xbc>
 101a4fc:	e3016f58 	movw	r6, #8024	; 0x1f58
        Xil_AssertVoid(Freq > 0U);
 101a500:	e3510000 	cmp	r1, #0
	Xil_AssertVoid(InstancePtr != NULL);
 101a504:	e340610c 	movt	r6, #268	; 0x10c
 101a508:	e3a04000 	mov	r4, #0
 101a50c:	e1a05001 	mov	r5, r1
 101a510:	e5864000 	str	r4, [r6]
        Xil_AssertVoid(Freq > 0U);
 101a514:	0a000016 	beq	101a574 <XTtcPs_CalcIntervalFromFreq+0x84>
	InputClock = InstancePtr->Config.InputClockHz;
 101a518:	e5907008 	ldr	r7, [r0, #8]
 101a51c:	e1a08002 	mov	r8, r2
 101a520:	e1a09003 	mov	r9, r3
	TempValue = InputClock/ Freq;
 101a524:	e1a00007 	mov	r0, r7
 101a528:	fa000276 	blx	101af08 <__udivsi3>
	if (TempValue < 4U) {
 101a52c:	e3500003 	cmp	r0, #3
 101a530:	9a00000b 	bls	101a564 <XTtcPs_CalcIntervalFromFreq+0x74>
	if (((UINTPTR)XTTCPS_MAX_INTERVAL_COUNT) > TempValue) {
 101a534:	e30f6ffe 	movw	r6, #65534	; 0xfffe
 101a538:	e1500006 	cmp	r0, r6
 101a53c:	9a000013 	bls	101a590 <XTtcPs_CalcIntervalFromFreq+0xa0>
 101a540:	e6efa074 	uxtb	sl, r4
		TempValue =	InputClock/ (Freq * (1U << (TmpPrescaler + 1U)));
 101a544:	e2844001 	add	r4, r4, #1
 101a548:	e1a01415 	lsl	r1, r5, r4
 101a54c:	e1a00007 	mov	r0, r7
 101a550:	fa00026c 	blx	101af08 <__udivsi3>
		if (((UINTPTR)XTTCPS_MAX_INTERVAL_COUNT) > TempValue) {
 101a554:	e1500006 	cmp	r0, r6
 101a558:	9a000010 	bls	101a5a0 <XTtcPs_CalcIntervalFromFreq+0xb0>
	for (TmpPrescaler = 0U; TmpPrescaler < XTTCPS_CLK_CNTRL_PS_DISABLE;
 101a55c:	e3540010 	cmp	r4, #16
 101a560:	1afffff6 	bne	101a540 <XTtcPs_CalcIntervalFromFreq+0x50>
		*Interval = XTTCPS_MAX_INTERVAL_COUNT;
 101a564:	e3e03000 	mvn	r3, #0
 101a568:	e1c830b0 	strh	r3, [r8]
		*Prescaler = 0xFFU;
 101a56c:	e5c93000 	strb	r3, [r9]
		return;
 101a570:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        Xil_AssertVoid(Freq > 0U);
 101a574:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a578:	e300119a 	movw	r1, #410	; 0x19a
 101a57c:	e3400106 	movt	r0, #262	; 0x106
 101a580:	ebfffa6d 	bl	1018f3c <Xil_Assert>
 101a584:	e3a03001 	mov	r3, #1
 101a588:	e5863000 	str	r3, [r6]
 101a58c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*Prescaler = XTTCPS_CLK_CNTRL_PS_DISABLE;
 101a590:	e3a03010 	mov	r3, #16
		*Interval = (XInterval)TempValue;
 101a594:	e1c800b0 	strh	r0, [r8]
		*Prescaler = XTTCPS_CLK_CNTRL_PS_DISABLE;
 101a598:	e5c93000 	strb	r3, [r9]
		return;
 101a59c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
			*Interval = (XInterval)TempValue;
 101a5a0:	e1c800b0 	strh	r0, [r8]
			*Prescaler = TmpPrescaler;
 101a5a4:	e5c9a000 	strb	sl, [r9]
}
 101a5a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101a5ac:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a5b0:	e3001199 	movw	r1, #409	; 0x199
 101a5b4:	e3400106 	movt	r0, #262	; 0x106
 101a5b8:	ebfffa5f 	bl	1018f3c <Xil_Assert>
 101a5bc:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a5c0:	e3a02001 	mov	r2, #1
 101a5c4:	e340310c 	movt	r3, #268	; 0x10c
 101a5c8:	e5832000 	str	r2, [r3]
 101a5cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0101a5d0 <XTtcPs_InterruptHandler>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a5d0:	e3500000 	cmp	r0, #0
{
 101a5d4:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a5d8:	0a00000b 	beq	101a60c <XTtcPs_InterruptHandler+0x3c>
	XTtcPsStatusReg = XTtcPs_GetInterruptStatus(InstancePtr);
 101a5dc:	e5902004 	ldr	r2, [r0, #4]
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a5e0:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a5e4:	e340310c 	movt	r3, #268	; 0x10c
 101a5e8:	e3a01000 	mov	r1, #0
 101a5ec:	e5831000 	str	r1, [r3]
	InstancePtr->StatusHandler(InstancePtr->StatusRef,
 101a5f0:	e5903010 	ldr	r3, [r0, #16]
 101a5f4:	e5921054 	ldr	r1, [r2, #84]	; 0x54
 101a5f8:	e5900014 	ldr	r0, [r0, #20]
 101a5fc:	e5922054 	ldr	r2, [r2, #84]	; 0x54
 101a600:	e12fff33 	blx	r3
}
 101a604:	e3a00000 	mov	r0, #0
 101a608:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a60c:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a610:	e30011e7 	movw	r1, #487	; 0x1e7
 101a614:	e3400106 	movt	r0, #262	; 0x106
 101a618:	ebfffa47 	bl	1018f3c <Xil_Assert>
 101a61c:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a620:	e3a02001 	mov	r2, #1
 101a624:	e340310c 	movt	r3, #268	; 0x10c
 101a628:	e5832000 	str	r2, [r3]
 101a62c:	eafffff4 	b	101a604 <XTtcPs_InterruptHandler+0x34>

0101a630 <XTtcPs_SetStatusHandler>:
	Xil_AssertVoid(InstancePtr != NULL);
 101a630:	e3500000 	cmp	r0, #0
{
 101a634:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101a638:	0a000014 	beq	101a690 <XTtcPs_SetStatusHandler+0x60>
 101a63c:	e3014f58 	movw	r4, #8024	; 0x1f58
	Xil_AssertVoid(FuncPointer != NULL);
 101a640:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 101a644:	e340410c 	movt	r4, #268	; 0x10c
 101a648:	e3a03000 	mov	r3, #0
 101a64c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 101a650:	0a000017 	beq	101a6b4 <XTtcPs_SetStatusHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a654:	e590c00c 	ldr	ip, [r0, #12]
 101a658:	e3013111 	movw	r3, #4369	; 0x1111
 101a65c:	e3413111 	movt	r3, #4369	; 0x1111
 101a660:	e15c0003 	cmp	ip, r3
 101a664:	1a000002 	bne	101a674 <XTtcPs_SetStatusHandler+0x44>
	InstancePtr->StatusHandler = FuncPointer;
 101a668:	e5802010 	str	r2, [r0, #16]
	InstancePtr->StatusRef = CallBackRef;
 101a66c:	e5801014 	str	r1, [r0, #20]
 101a670:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a674:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a678:	e300120f 	movw	r1, #527	; 0x20f
 101a67c:	e3400106 	movt	r0, #262	; 0x106
 101a680:	ebfffa2d 	bl	1018f3c <Xil_Assert>
 101a684:	e3a03001 	mov	r3, #1
 101a688:	e5843000 	str	r3, [r4]
}
 101a68c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101a690:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a694:	e300120d 	movw	r1, #525	; 0x20d
 101a698:	e3400106 	movt	r0, #262	; 0x106
 101a69c:	ebfffa26 	bl	1018f3c <Xil_Assert>
 101a6a0:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a6a4:	e3a02001 	mov	r2, #1
 101a6a8:	e340310c 	movt	r3, #268	; 0x10c
 101a6ac:	e5832000 	str	r2, [r3]
 101a6b0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 101a6b4:	e30b0fe8 	movw	r0, #49128	; 0xbfe8
 101a6b8:	e300120e 	movw	r1, #526	; 0x20e
 101a6bc:	e3400106 	movt	r0, #262	; 0x106
 101a6c0:	ebfffa1d 	bl	1018f3c <Xil_Assert>
 101a6c4:	e3a03001 	mov	r3, #1
 101a6c8:	e5843000 	str	r3, [r4]
 101a6cc:	e8bd8010 	pop	{r4, pc}

0101a6d0 <XTtcPs_LookupConfig>:
XTtcPs_Config *XTtcPs_LookupConfig(u16 DeviceId)
{
	XTtcPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XTTCPS_NUM_INSTANCES; Index++) {
 101a6d0:	e30cc310 	movw	ip, #49936	; 0xc310
 101a6d4:	e3a03000 	mov	r3, #0
 101a6d8:	e340c106 	movt	ip, #262	; 0x106
 101a6dc:	e1a0200c 	mov	r2, ip
		if (XTtcPs_ConfigTable[Index].DeviceId == DeviceId) {
 101a6e0:	e1d210b0 	ldrh	r1, [r2]
 101a6e4:	e282200c 	add	r2, r2, #12
 101a6e8:	e1510000 	cmp	r1, r0
 101a6ec:	0a000004 	beq	101a704 <XTtcPs_LookupConfig+0x34>
	for (Index = 0U; Index < (u32)XPAR_XTTCPS_NUM_INSTANCES; Index++) {
 101a6f0:	e2833001 	add	r3, r3, #1
 101a6f4:	e3530006 	cmp	r3, #6
 101a6f8:	1afffff8 	bne	101a6e0 <XTtcPs_LookupConfig+0x10>
	XTtcPs_Config *CfgPtr = NULL;
 101a6fc:	e3a00000 	mov	r0, #0
			break;
		}
	}

	return (XTtcPs_Config *)CfgPtr;
}
 101a700:	e12fff1e 	bx	lr
			CfgPtr = &XTtcPs_ConfigTable[Index];
 101a704:	e0833083 	add	r3, r3, r3, lsl #1
 101a708:	e08c0103 	add	r0, ip, r3, lsl #2
			break;
 101a70c:	e12fff1e 	bx	lr

0101a710 <XTtcPs_SetOptions>:
	u32 CountReg;
	u32 ClockReg;
	u32 Index;
	s32 Status = XST_SUCCESS;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101a710:	e3500000 	cmp	r0, #0
{
 101a714:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a718:	0a00002f 	beq	101a7dc <XTtcPs_SetOptions+0xcc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a71c:	e590c00c 	ldr	ip, [r0, #12]
 101a720:	e3013111 	movw	r3, #4369	; 0x1111
 101a724:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a728:	e3014f58 	movw	r4, #8024	; 0x1f58
 101a72c:	e340410c 	movt	r4, #268	; 0x10c
 101a730:	e3a02000 	mov	r2, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a734:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a738:	e5842000 	str	r2, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a73c:	1a00001e 	bne	101a7bc <XTtcPs_SetOptions+0xac>

	ClockReg = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 101a740:	e5907004 	ldr	r7, [r0, #4]
 101a744:	e3a0c020 	mov	ip, #32
 101a748:	e59f30b0 	ldr	r3, [pc, #176]	; 101a800 <XTtcPs_SetOptions+0xf0>
 101a74c:	e3a0e001 	mov	lr, #1
 101a750:	e5975000 	ldr	r5, [r7]
 101a754:	e2836054 	add	r6, r3, #84	; 0x54
 101a758:	e597400c 	ldr	r4, [r7, #12]

	/*
	 * Loop through the options table, turning the option on or off
	 * depending on whether the bit is set in the incoming options flag.
	 */
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 101a75c:	ea000008 	b	101a784 <XTtcPs_SetOptions+0x74>
		if ((Options & TmrCtrOptionsTable[Index].Option) != (u32)0) {
			if(TmrCtrOptionsTable[Index].Register == XTTCPS_CLK_CNTRL_OFFSET) {
 101a760:	e3520000 	cmp	r2, #0
 101a764:	e283300c 	add	r3, r3, #12
				ClockReg |= TmrCtrOptionsTable[Index].Mask;
 101a768:	0185500c 	orreq	r5, r5, ip
			} else {
				CountReg |= TmrCtrOptionsTable[Index].Mask;
 101a76c:	1184400c 	orrne	r4, r4, ip
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 101a770:	e1530006 	cmp	r3, r6
 101a774:	0a00000b 	beq	101a7a8 <XTtcPs_SetOptions+0x98>
 101a778:	e513e00c 	ldr	lr, [r3, #-12]
 101a77c:	e513c008 	ldr	ip, [r3, #-8]
 101a780:	e5132004 	ldr	r2, [r3, #-4]
		if ((Options & TmrCtrOptionsTable[Index].Option) != (u32)0) {
 101a784:	e111000e 	tst	r1, lr
 101a788:	e1e0e00c 	mvn	lr, ip
 101a78c:	1afffff3 	bne	101a760 <XTtcPs_SetOptions+0x50>
			}
		} else {
			if(TmrCtrOptionsTable[Index].Register == XTTCPS_CLK_CNTRL_OFFSET) {
 101a790:	e3520000 	cmp	r2, #0
 101a794:	e283300c 	add	r3, r3, #12
				ClockReg &= ~TmrCtrOptionsTable[Index].Mask;
 101a798:	0005500e 	andeq	r5, r5, lr
			} else {
				CountReg &= ~TmrCtrOptionsTable[Index].Mask;
 101a79c:	1004400e 	andne	r4, r4, lr
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 101a7a0:	e1530006 	cmp	r3, r6
 101a7a4:	1afffff3 	bne	101a778 <XTtcPs_SetOptions+0x68>
	*LocalAddr = Value;
 101a7a8:	e5875000 	str	r5, [r7]
	 * device.
	 */
	if (Status != (s32)XST_FAILURE ) {
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
				  XTTCPS_CLK_CNTRL_OFFSET, ClockReg);
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101a7ac:	e5903004 	ldr	r3, [r0, #4]
 101a7b0:	e583400c 	str	r4, [r3, #12]
				  XTTCPS_CNT_CNTRL_OFFSET, CountReg);
	}

	return Status;
}
 101a7b4:	e3a00000 	mov	r0, #0
 101a7b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a7bc:	e30b0ff4 	movw	r0, #49140	; 0xbff4
 101a7c0:	e3a0107d 	mov	r1, #125	; 0x7d
 101a7c4:	e3400106 	movt	r0, #262	; 0x106
 101a7c8:	ebfff9db 	bl	1018f3c <Xil_Assert>
 101a7cc:	e3a03001 	mov	r3, #1
}
 101a7d0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a7d4:	e5843000 	str	r3, [r4]
}
 101a7d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a7dc:	e30b0ff4 	movw	r0, #49140	; 0xbff4
 101a7e0:	e3a0107c 	mov	r1, #124	; 0x7c
 101a7e4:	e3400106 	movt	r0, #262	; 0x106
 101a7e8:	ebfff9d3 	bl	1018f3c <Xil_Assert>
 101a7ec:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a7f0:	e3a02001 	mov	r2, #1
 101a7f4:	e340310c 	movt	r3, #268	; 0x10c
 101a7f8:	e5832000 	str	r2, [r3]
 101a7fc:	eaffffec 	b	101a7b4 <XTtcPs_SetOptions+0xa4>
 101a800:	01067bac 	.word	0x01067bac

0101a804 <XTtcPs_GetOptions>:
*
* @note		None.
*
******************************************************************************/
u32 XTtcPs_GetOptions(XTtcPs *InstancePtr)
{
 101a804:	e92d4070 	push	{r4, r5, r6, lr}
	u32 OptionsFlag = 0U;
	u32 Register;
	u32 Index;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101a808:	e2505000 	subs	r5, r0, #0
 101a80c:	0a000020 	beq	101a894 <XTtcPs_GetOptions+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a810:	e595200c 	ldr	r2, [r5, #12]
 101a814:	e3013111 	movw	r3, #4369	; 0x1111
 101a818:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a81c:	e3016f58 	movw	r6, #8024	; 0x1f58
 101a820:	e340610c 	movt	r6, #268	; 0x10c
 101a824:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a828:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a82c:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a830:	1a00000f 	bne	101a874 <XTtcPs_GetOptions+0x70>
 101a834:	e3073ba0 	movw	r3, #31648	; 0x7ba0
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
		/*
		 * Get the control register to determine which options are
		 * currently set.
		 */
		Register = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 101a838:	e595e004 	ldr	lr, [r5, #4]
 101a83c:	e3403106 	movt	r3, #262	; 0x106
 101a840:	e1a02004 	mov	r2, r4
 101a844:	e283c054 	add	ip, r3, #84	; 0x54
	u32 OptionsFlag = 0U;
 101a848:	e1a00004 	mov	r0, r4
		Register = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 101a84c:	e3a01020 	mov	r1, #32
	return *(volatile u32 *) Addr;
 101a850:	e79e2002 	ldr	r2, [lr, r2]
					      TmrCtrOptionsTable[Index].
					      Register);

		if ((Register & TmrCtrOptionsTable[Index].Mask) != (u32)0) {
 101a854:	e283300c 	add	r3, r3, #12
 101a858:	e1120001 	tst	r2, r1
			OptionsFlag |= TmrCtrOptionsTable[Index].Option;
 101a85c:	1513200c 	ldrne	r2, [r3, #-12]
 101a860:	11800002 	orrne	r0, r0, r2
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 101a864:	e153000c 	cmp	r3, ip
 101a868:	08bd8070 	popeq	{r4, r5, r6, pc}
 101a86c:	e9930006 	ldmib	r3, {r1, r2}
 101a870:	eafffff6 	b	101a850 <XTtcPs_GetOptions+0x4c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a874:	e30b0ff4 	movw	r0, #49140	; 0xbff4
 101a878:	e3a010be 	mov	r1, #190	; 0xbe
 101a87c:	e3400106 	movt	r0, #262	; 0x106
 101a880:	ebfff9ad 	bl	1018f3c <Xil_Assert>
 101a884:	e3a03001 	mov	r3, #1
 101a888:	e1a00004 	mov	r0, r4
 101a88c:	e5863000 	str	r3, [r6]
 101a890:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a894:	e30b0ff4 	movw	r0, #49140	; 0xbff4
 101a898:	e3a010bd 	mov	r1, #189	; 0xbd
 101a89c:	e3400106 	movt	r0, #262	; 0x106
 101a8a0:	ebfff9a5 	bl	1018f3c <Xil_Assert>
 101a8a4:	e3013f58 	movw	r3, #8024	; 0x1f58
 101a8a8:	e3a02001 	mov	r2, #1
 101a8ac:	e340310c 	movt	r3, #268	; 0x10c
 101a8b0:	e1a00005 	mov	r0, r5
 101a8b4:	e5832000 	str	r2, [r3]
 101a8b8:	e8bd8070 	pop	{r4, r5, r6, pc}

0101a8bc <XUartPs_SendByte>:
*
*****************************************************************************/
void XUartPs_SendByte(u32 BaseAddress, u8 Data)
{
	/* Wait until there is space in TX FIFO */
	while (XUartPs_IsTransmitFull(BaseAddress)) {
 101a8bc:	e280202c 	add	r2, r0, #44	; 0x2c
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 101a8c0:	e5923000 	ldr	r3, [r2]
 101a8c4:	e3130010 	tst	r3, #16
 101a8c8:	1afffffc 	bne	101a8c0 <XUartPs_SendByte+0x4>
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 101a8cc:	e5801030 	str	r1, [r0, #48]	; 0x30
		;
	}

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, (u32)Data);
}
 101a8d0:	e12fff1e 	bx	lr

0101a8d4 <XUartPs_RecvByte>:
*****************************************************************************/
u8 XUartPs_RecvByte(u32 BaseAddress)
{
	u32 RecievedByte;
	/* Wait until there is data */
	while (!XUartPs_IsReceiveData(BaseAddress)) {
 101a8d4:	e280202c 	add	r2, r0, #44	; 0x2c
	return *(volatile u32 *) Addr;
 101a8d8:	e5923000 	ldr	r3, [r2]
 101a8dc:	e3130002 	tst	r3, #2
 101a8e0:	1afffffc 	bne	101a8d8 <XUartPs_RecvByte+0x4>
 101a8e4:	e5900030 	ldr	r0, [r0, #48]	; 0x30
		;
	}
	RecievedByte = XUartPs_ReadReg(BaseAddress, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (u8)RecievedByte;
}
 101a8e8:	e6ef0070 	uxtb	r0, r0
 101a8ec:	e12fff1e 	bx	lr

0101a8f0 <XUartPs_ResetHw>:
*
* @note		None.
*
*****************************************************************************/
void XUartPs_ResetHw(u32 BaseAddress)
{
 101a8f0:	e92d4010 	push	{r4, lr}
	*LocalAddr = Value;
 101a8f4:	e3031fff 	movw	r1, #16383	; 0x3fff
 101a8f8:	e3a0e028 	mov	lr, #40	; 0x28
 101a8fc:	e3a0c003 	mov	ip, #3
 101a900:	e3a03000 	mov	r3, #0
 101a904:	e3a02020 	mov	r2, #32
 101a908:	e580100c 	str	r1, [r0, #12]
 101a90c:	e300428b 	movw	r4, #651	; 0x28b
 101a910:	e580e000 	str	lr, [r0]
 101a914:	e3a0e00f 	mov	lr, #15
 101a918:	e580c000 	str	ip, [r0]
 101a91c:	e3a0cf4a 	mov	ip, #296	; 0x128
 101a920:	e5801014 	str	r1, [r0, #20]
 101a924:	e5803004 	str	r3, [r0, #4]
 101a928:	e5802020 	str	r2, [r0, #32]
 101a92c:	e5802044 	str	r2, [r0, #68]	; 0x44
 101a930:	e580301c 	str	r3, [r0, #28]
 101a934:	e5804018 	str	r4, [r0, #24]
 101a938:	e580e034 	str	lr, [r0, #52]	; 0x34
 101a93c:	e580c000 	str	ip, [r0]
	 */
	XUartPs_WriteReg(BaseAddress, XUARTPS_CR_OFFSET,
				((u32)XUARTPS_CR_RX_DIS | (u32)XUARTPS_CR_TX_DIS |
						(u32)XUARTPS_CR_STOPBRK));

}
 101a940:	e8bd8010 	pop	{r4, pc}

0101a944 <XSpiPs_SetOptions>:
* @note
* This function is not thread-safe.
*
******************************************************************************/
s32 XSpiPs_SetOptions(const XSpiPs *InstancePtr, u32 Options)
{
 101a944:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ConfigReg;
	u32 Index;
	u32 CurrentConfigReg;
	s32 Status;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101a948:	e2505000 	subs	r5, r0, #0
 101a94c:	0a000033 	beq	101aa20 <XSpiPs_SetOptions+0xdc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a950:	e595200c 	ldr	r2, [r5, #12]
 101a954:	e3013111 	movw	r3, #4369	; 0x1111
 101a958:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a95c:	e3016f58 	movw	r6, #8024	; 0x1f58
 101a960:	e340610c 	movt	r6, #268	; 0x10c
 101a964:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a968:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101a96c:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a970:	1a00001e 	bne	101a9f0 <XSpiPs_SetOptions+0xac>

	/*
	 * Do not allow the slave select to change while a transfer is in
	 * progress. Not thread-safe.
	 */
	if (InstancePtr->IsBusy == TRUE) {
 101a974:	e5953020 	ldr	r3, [r5, #32]
 101a978:	e3530001 	cmp	r3, #1
 101a97c:	0a000025 	beq	101aa18 <XSpiPs_SetOptions+0xd4>
		Status = (s32)XST_DEVICE_BUSY;
	} else {

		ConfigReg = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 101a980:	e5956004 	ldr	r6, [r5, #4]
 101a984:	e3073bf4 	movw	r3, #31732	; 0x7bf4
 101a988:	e3403106 	movt	r3, #262	; 0x106
 101a98c:	e3a0c001 	mov	ip, #1
 101a990:	e2834028 	add	r4, r3, #40	; 0x28
 101a994:	e1a0e00c 	mov	lr, ip
 101a998:	e5960000 	ldr	r0, [r6]
 101a99c:	e1a02000 	mov	r2, r0
 101a9a0:	ea000002 	b	101a9b0 <XSpiPs_SetOptions+0x6c>
 101a9a4:	e593e008 	ldr	lr, [r3, #8]
 101a9a8:	e2833008 	add	r3, r3, #8
 101a9ac:	e593c004 	ldr	ip, [r3, #4]
		/*
		 * Loop through the options table, turning the option on or off
		 * depending on whether the bit is set in the incoming options flag.
		 */
		for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
			if ((Options & OptionsTable[Index].Option) != (u32)0U) {
 101a9b0:	e11e0001 	tst	lr, r1
				/* Turn it on */
				ConfigReg |= OptionsTable[Index].Mask;
 101a9b4:	1182200c 	orrne	r2, r2, ip
			}
			else {
				/* Turn it off */
				ConfigReg &= ~(OptionsTable[Index].Mask);
 101a9b8:	01c2200c 	biceq	r2, r2, ip
		for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
 101a9bc:	e1540003 	cmp	r4, r3
 101a9c0:	1afffff7 	bne	101a9a4 <XSpiPs_SetOptions+0x60>

		/*
		 * If CPOL-CPHA bits are toggled from previous state,
		 * disable before writing the configuration register and then enable.
		 */
		if( ((CurrentConfigReg & XSPIPS_CR_CPOL_MASK) !=
 101a9c4:	e0200002 	eor	r0, r0, r2
 101a9c8:	e2100006 	ands	r0, r0, #6
 101a9cc:	0a00000f 	beq	101aa10 <XSpiPs_SetOptions+0xcc>
	*LocalAddr = Value;
 101a9d0:	e3a00000 	mov	r0, #0
 101a9d4:	e3a01001 	mov	r1, #1
 101a9d8:	e5860014 	str	r0, [r6, #20]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 101a9dc:	e5953004 	ldr	r3, [r5, #4]
	*LocalAddr = Value;
 101a9e0:	e5832000 	str	r2, [r3]
		 */
		if( ((CurrentConfigReg & XSPIPS_CR_CPOL_MASK) !=
			(ConfigReg & XSPIPS_CR_CPOL_MASK)) ||
			((CurrentConfigReg & XSPIPS_CR_CPHA_MASK) !=
			(ConfigReg & XSPIPS_CR_CPHA_MASK)) ) {
				XSpiPs_Enable(InstancePtr);
 101a9e4:	e5953004 	ldr	r3, [r5, #4]
 101a9e8:	e5831014 	str	r1, [r3, #20]
 101a9ec:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101a9f0:	e30c0008 	movw	r0, #49160	; 0xc008
 101a9f4:	e3a0107d 	mov	r1, #125	; 0x7d
 101a9f8:	e3400106 	movt	r0, #262	; 0x106
 101a9fc:	ebfff94e 	bl	1018f3c <Xil_Assert>
 101aa00:	e3a03001 	mov	r3, #1
 101aa04:	e1a00004 	mov	r0, r4
 101aa08:	e5863000 	str	r3, [r6]
 101aa0c:	e8bd8070 	pop	{r4, r5, r6, pc}
 101aa10:	e5862000 	str	r2, [r6]
			}

		Status = (s32)XST_SUCCESS;
	}
	return Status;
}
 101aa14:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_BUSY;
 101aa18:	e3a00015 	mov	r0, #21
 101aa1c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101aa20:	e30c0008 	movw	r0, #49160	; 0xc008
 101aa24:	e3a0107c 	mov	r1, #124	; 0x7c
 101aa28:	e3400106 	movt	r0, #262	; 0x106
 101aa2c:	ebfff942 	bl	1018f3c <Xil_Assert>
 101aa30:	e3013f58 	movw	r3, #8024	; 0x1f58
 101aa34:	e3a02001 	mov	r2, #1
 101aa38:	e340310c 	movt	r3, #268	; 0x10c
 101aa3c:	e1a00005 	mov	r0, r5
 101aa40:	e5832000 	str	r2, [r3]
 101aa44:	e8bd8070 	pop	{r4, r5, r6, pc}

0101aa48 <XSpiPs_GetOptions>:
*
* @note		None.
*
******************************************************************************/
u32 XSpiPs_GetOptions(const XSpiPs *InstancePtr)
{
 101aa48:	e92d4070 	push	{r4, r5, r6, lr}
	u32 OptionsFlag = 0U;
	u32 ConfigReg;
	u32 Index;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101aa4c:	e2506000 	subs	r6, r0, #0
 101aa50:	0a00001e 	beq	101aad0 <XSpiPs_GetOptions+0x88>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101aa54:	e596200c 	ldr	r2, [r6, #12]
 101aa58:	e3013111 	movw	r3, #4369	; 0x1111
 101aa5c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101aa60:	e3015f58 	movw	r5, #8024	; 0x1f58
 101aa64:	e340510c 	movt	r5, #268	; 0x10c
 101aa68:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101aa6c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101aa70:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101aa74:	1a00000d 	bne	101aab0 <XSpiPs_GetOptions+0x68>
	return *(volatile u32 *) Addr;
 101aa78:	e5961004 	ldr	r1, [r6, #4]
	u32 OptionsFlag = 0U;
 101aa7c:	e1a00004 	mov	r0, r4
 101aa80:	e59f3070 	ldr	r3, [pc, #112]	; 101aaf8 <XSpiPs_GetOptions+0xb0>
 101aa84:	e3a02001 	mov	r2, #1
 101aa88:	e591c000 	ldr	ip, [r1]
				 XSPIPS_CR_OFFSET);

	/*
	 * Loop through the options table to grab options
	 */
	for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
 101aa8c:	e2831030 	add	r1, r3, #48	; 0x30
		if ((ConfigReg & OptionsTable[Index].Mask) != FALSE) {
 101aa90:	e112000c 	tst	r2, ip
 101aa94:	e2833008 	add	r3, r3, #8
			OptionsFlag |= OptionsTable[Index].Option;
 101aa98:	15132014 	ldrne	r2, [r3, #-20]	; 0xffffffec
 101aa9c:	11800002 	orrne	r0, r0, r2
	for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
 101aaa0:	e1530001 	cmp	r3, r1
 101aaa4:	08bd8070 	popeq	{r4, r5, r6, pc}
 101aaa8:	e5132008 	ldr	r2, [r3, #-8]
 101aaac:	eafffff7 	b	101aa90 <XSpiPs_GetOptions+0x48>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101aab0:	e30c0008 	movw	r0, #49160	; 0xc008
 101aab4:	e3a010d5 	mov	r1, #213	; 0xd5
 101aab8:	e3400106 	movt	r0, #262	; 0x106
 101aabc:	ebfff91e 	bl	1018f3c <Xil_Assert>
 101aac0:	e3a03001 	mov	r3, #1
 101aac4:	e1a00004 	mov	r0, r4
 101aac8:	e5853000 	str	r3, [r5]
 101aacc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101aad0:	e30c0008 	movw	r0, #49160	; 0xc008
 101aad4:	e3a010d4 	mov	r1, #212	; 0xd4
 101aad8:	e3400106 	movt	r0, #262	; 0x106
 101aadc:	ebfff916 	bl	1018f3c <Xil_Assert>
 101aae0:	e3013f58 	movw	r3, #8024	; 0x1f58
 101aae4:	e3a02001 	mov	r2, #1
 101aae8:	e340310c 	movt	r3, #268	; 0x10c
 101aaec:	e1a00006 	mov	r0, r6
 101aaf0:	e5832000 	str	r2, [r3]
 101aaf4:	e8bd8070 	pop	{r4, r5, r6, pc}
 101aaf8:	01067c00 	.word	0x01067c00

0101aafc <XSpiPs_SetClkPrescaler>:
* @note
* This function is not thread-safe.
*
******************************************************************************/
s32 XSpiPs_SetClkPrescaler(const XSpiPs *InstancePtr, u8 Prescaler)
{
 101aafc:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ConfigReg;
	s32 Status;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101ab00:	e2506000 	subs	r6, r0, #0
 101ab04:	0a000022 	beq	101ab94 <XSpiPs_SetClkPrescaler+0x98>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ab08:	e596200c 	ldr	r2, [r6, #12]
 101ab0c:	e3013111 	movw	r3, #4369	; 0x1111
 101ab10:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ab14:	e3015f58 	movw	r5, #8024	; 0x1f58
 101ab18:	e340510c 	movt	r5, #268	; 0x10c
 101ab1c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ab20:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ab24:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ab28:	1a00000c 	bne	101ab60 <XSpiPs_SetClkPrescaler+0x64>
	Xil_AssertNonvoid((Prescaler > 0U) && (Prescaler <= XSPIPS_CR_PRESC_MAXIMUM));
 101ab2c:	e2413001 	sub	r3, r1, #1
 101ab30:	e3530006 	cmp	r3, #6
 101ab34:	8a000011 	bhi	101ab80 <XSpiPs_SetClkPrescaler+0x84>

	/*
	 * Do not allow the prescaler to be changed while a transfer is in
	 * progress. Not thread-safe.
	 */
	if (InstancePtr->IsBusy == TRUE) {
 101ab38:	e5963020 	ldr	r3, [r6, #32]
 101ab3c:	e3530001 	cmp	r3, #1
 101ab40:	0a000011 	beq	101ab8c <XSpiPs_SetClkPrescaler+0x90>
 101ab44:	e5962004 	ldr	r2, [r6, #4]

		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
				XSPIPS_CR_OFFSET,
				ConfigReg);

		Status = (s32)XST_SUCCESS;
 101ab48:	e1a00004 	mov	r0, r4
 101ab4c:	e5923000 	ldr	r3, [r2]
		ConfigReg &= (u32)(~XSPIPS_CR_PRESC_MASK);
 101ab50:	e3c33038 	bic	r3, r3, #56	; 0x38
		ConfigReg |= (u32) ((u32)Prescaler & (u32)XSPIPS_CR_PRESC_MAXIMUM) <<
 101ab54:	e1833181 	orr	r3, r3, r1, lsl #3
	*LocalAddr = Value;
 101ab58:	e5823000 	str	r3, [r2]
		Status = (s32)XST_SUCCESS;
 101ab5c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ab60:	e30c0008 	movw	r0, #49160	; 0xc008
 101ab64:	e3001105 	movw	r1, #261	; 0x105
	Xil_AssertNonvoid((Prescaler > 0U) && (Prescaler <= XSPIPS_CR_PRESC_MAXIMUM));
 101ab68:	e3400106 	movt	r0, #262	; 0x106
 101ab6c:	ebfff8f2 	bl	1018f3c <Xil_Assert>
 101ab70:	e3a03001 	mov	r3, #1
 101ab74:	e1a00004 	mov	r0, r4
 101ab78:	e5853000 	str	r3, [r5]
 101ab7c:	e8bd8070 	pop	{r4, r5, r6, pc}
 101ab80:	e30c0008 	movw	r0, #49160	; 0xc008
 101ab84:	e3001106 	movw	r1, #262	; 0x106
 101ab88:	eafffff6 	b	101ab68 <XSpiPs_SetClkPrescaler+0x6c>
		Status = (s32)XST_DEVICE_BUSY;
 101ab8c:	e3a00015 	mov	r0, #21
	}
	return Status;
}
 101ab90:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ab94:	e30c0008 	movw	r0, #49160	; 0xc008
 101ab98:	e3a01f41 	mov	r1, #260	; 0x104
 101ab9c:	e3400106 	movt	r0, #262	; 0x106
 101aba0:	ebfff8e5 	bl	1018f3c <Xil_Assert>
 101aba4:	e3013f58 	movw	r3, #8024	; 0x1f58
 101aba8:	e3a02001 	mov	r2, #1
 101abac:	e340310c 	movt	r3, #268	; 0x10c
 101abb0:	e1a00006 	mov	r0, r6
 101abb4:	e5832000 	str	r2, [r3]
 101abb8:	e8bd8070 	pop	{r4, r5, r6, pc}

0101abbc <XSpiPs_GetClkPrescaler>:
* @note		None.
*
*
******************************************************************************/
u8 XSpiPs_GetClkPrescaler(const XSpiPs *InstancePtr)
{
 101abbc:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ConfigReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101abc0:	e2506000 	subs	r6, r0, #0
 101abc4:	0a000014 	beq	101ac1c <XSpiPs_GetClkPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101abc8:	e596200c 	ldr	r2, [r6, #12]
 101abcc:	e3013111 	movw	r3, #4369	; 0x1111
 101abd0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101abd4:	e3015f58 	movw	r5, #8024	; 0x1f58
 101abd8:	e340510c 	movt	r5, #268	; 0x10c
 101abdc:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101abe0:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101abe4:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101abe8:	1a000003 	bne	101abfc <XSpiPs_GetClkPrescaler+0x40>
	return *(volatile u32 *) Addr;
 101abec:	e5963004 	ldr	r3, [r6, #4]
 101abf0:	e5930000 	ldr	r0, [r3]
	ConfigReg = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
			XSPIPS_CR_OFFSET);

	ConfigReg &= XSPIPS_CR_PRESC_MASK;

	return (u8)(ConfigReg >> XSPIPS_CR_PRESC_SHIFT);
 101abf4:	e7e201d0 	ubfx	r0, r0, #3, #3
 101abf8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101abfc:	e30c0008 	movw	r0, #49160	; 0xc008
 101ac00:	e3001137 	movw	r1, #311	; 0x137
 101ac04:	e3400106 	movt	r0, #262	; 0x106
 101ac08:	ebfff8cb 	bl	1018f3c <Xil_Assert>
 101ac0c:	e3a03001 	mov	r3, #1
 101ac10:	e1a00004 	mov	r0, r4
 101ac14:	e5853000 	str	r3, [r5]

}
 101ac18:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ac1c:	e30c0008 	movw	r0, #49160	; 0xc008
 101ac20:	e3001136 	movw	r1, #310	; 0x136
 101ac24:	e3400106 	movt	r0, #262	; 0x106
 101ac28:	ebfff8c3 	bl	1018f3c <Xil_Assert>
 101ac2c:	e3013f58 	movw	r3, #8024	; 0x1f58
 101ac30:	e3a02001 	mov	r2, #1
 101ac34:	e340310c 	movt	r3, #268	; 0x10c
 101ac38:	e1a00006 	mov	r0, r6
 101ac3c:	e5832000 	str	r2, [r3]
 101ac40:	e8bd8070 	pop	{r4, r5, r6, pc}

0101ac44 <XSpiPs_SetDelays>:
* @note		None.
*
******************************************************************************/
s32 XSpiPs_SetDelays(const XSpiPs *InstancePtr, u8 DelayNss, u8 DelayBtwn,
			 u8 DelayAfter, u8 DelayInit)
{
 101ac44:	e92d4070 	push	{r4, r5, r6, lr}
	u32 DelayRegister;
	s32 Status;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101ac48:	e2506000 	subs	r6, r0, #0
{
 101ac4c:	e5dd0010 	ldrb	r0, [sp, #16]
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ac50:	0a00001c 	beq	101acc8 <XSpiPs_SetDelays+0x84>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ac54:	e596e00c 	ldr	lr, [r6, #12]
 101ac58:	e301c111 	movw	ip, #4369	; 0x1111
 101ac5c:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ac60:	e3015f58 	movw	r5, #8024	; 0x1f58
 101ac64:	e340510c 	movt	r5, #268	; 0x10c
 101ac68:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ac6c:	e15e000c 	cmp	lr, ip
	Xil_AssertNonvoid(InstancePtr != NULL);
 101ac70:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ac74:	1a000009 	bne	101aca0 <XSpiPs_SetDelays+0x5c>

	/*
	 * Do not allow the delays to change while a transfer is in
	 * progress. Not thread-safe.
	 */
	if (InstancePtr->IsBusy == TRUE) {
 101ac78:	e596c020 	ldr	ip, [r6, #32]
 101ac7c:	e35c0001 	cmp	ip, #1
 101ac80:	0a00000e 	beq	101acc0 <XSpiPs_SetDelays+0x7c>

		/* Shift, Mask and OR the values to build the register settings */
		DelayRegister = (u32) DelayNss << XSPIPS_DR_NSS_SHIFT;
		DelayRegister |= (u32) DelayBtwn << XSPIPS_DR_BTWN_SHIFT;
		DelayRegister |= (u32) DelayAfter << XSPIPS_DR_AFTER_SHIFT;
		DelayRegister |= (u32) DelayInit;
 101ac84:	e1803403 	orr	r3, r0, r3, lsl #8

		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
 101ac88:	e596c004 	ldr	ip, [r6, #4]
				XSPIPS_DR_OFFSET, DelayRegister);

		Status = (s32)XST_SUCCESS;
 101ac8c:	e1a00004 	mov	r0, r4
		DelayRegister |= (u32) DelayInit;
 101ac90:	e1833802 	orr	r3, r3, r2, lsl #16
 101ac94:	e1833c01 	orr	r3, r3, r1, lsl #24
	*LocalAddr = Value;
 101ac98:	e58c3018 	str	r3, [ip, #24]
		Status = (s32)XST_SUCCESS;
 101ac9c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101aca0:	e30c0008 	movw	r0, #49160	; 0xc008
 101aca4:	e3a01f5a 	mov	r1, #360	; 0x168
 101aca8:	e3400106 	movt	r0, #262	; 0x106
 101acac:	ebfff8a2 	bl	1018f3c <Xil_Assert>
 101acb0:	e3a03001 	mov	r3, #1
 101acb4:	e1a00004 	mov	r0, r4
 101acb8:	e5853000 	str	r3, [r5]
 101acbc:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_BUSY;
 101acc0:	e3a00015 	mov	r0, #21
	}
	return Status;
}
 101acc4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101acc8:	e30c0008 	movw	r0, #49160	; 0xc008
 101accc:	e3001167 	movw	r1, #359	; 0x167
 101acd0:	e3400106 	movt	r0, #262	; 0x106
 101acd4:	ebfff898 	bl	1018f3c <Xil_Assert>
 101acd8:	e3013f58 	movw	r3, #8024	; 0x1f58
 101acdc:	e3a02001 	mov	r2, #1
 101ace0:	e340310c 	movt	r3, #268	; 0x10c
 101ace4:	e1a00006 	mov	r0, r6
 101ace8:	e5832000 	str	r2, [r3]
 101acec:	e8bd8070 	pop	{r4, r5, r6, pc}

0101acf0 <XSpiPs_GetDelays>:
void XSpiPs_GetDelays(const XSpiPs *InstancePtr,u8 *DelayNss, u8 *DelayBtwn,
			u8 *DelayAfter, u8 *DelayInit)
{
	u32 DelayRegister;

	Xil_AssertVoid(InstancePtr != NULL);
 101acf0:	e3500000 	cmp	r0, #0
{
 101acf4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101acf8:	0a00001a 	beq	101ad68 <XSpiPs_GetDelays+0x78>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101acfc:	e590e00c 	ldr	lr, [r0, #12]
 101ad00:	e301c111 	movw	ip, #4369	; 0x1111
 101ad04:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101ad08:	e3014f58 	movw	r4, #8024	; 0x1f58
 101ad0c:	e340410c 	movt	r4, #268	; 0x10c
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ad10:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 101ad14:	e3a0c000 	mov	ip, #0
 101ad18:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ad1c:	1a00000a 	bne	101ad4c <XSpiPs_GetDelays+0x5c>

	DelayRegister = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 101ad20:	e5900004 	ldr	r0, [r0, #4]
					XSPIPS_DR_OFFSET);

	*DelayInit = (u8)(DelayRegister & XSPIPS_DR_INIT_MASK);
 101ad24:	e59dc008 	ldr	ip, [sp, #8]
	return *(volatile u32 *) Addr;
 101ad28:	e5900018 	ldr	r0, [r0, #24]
 101ad2c:	e5cc0000 	strb	r0, [ip]

	*DelayAfter = (u8)((DelayRegister & XSPIPS_DR_AFTER_MASK) >>
 101ad30:	e1a0e420 	lsr	lr, r0, #8
				 XSPIPS_DR_AFTER_SHIFT);

	*DelayBtwn = (u8)((DelayRegister & XSPIPS_DR_BTWN_MASK) >>
 101ad34:	e1a0c820 	lsr	ip, r0, #16
				XSPIPS_DR_BTWN_SHIFT);

	*DelayNss = (u8)((DelayRegister & XSPIPS_DR_NSS_MASK) >>
 101ad38:	e1a00c20 	lsr	r0, r0, #24
	*DelayAfter = (u8)((DelayRegister & XSPIPS_DR_AFTER_MASK) >>
 101ad3c:	e5c3e000 	strb	lr, [r3]
	*DelayBtwn = (u8)((DelayRegister & XSPIPS_DR_BTWN_MASK) >>
 101ad40:	e5c2c000 	strb	ip, [r2]
	*DelayNss = (u8)((DelayRegister & XSPIPS_DR_NSS_MASK) >>
 101ad44:	e5c10000 	strb	r0, [r1]
 101ad48:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101ad4c:	e30c0008 	movw	r0, #49160	; 0xc008
 101ad50:	e3a01f67 	mov	r1, #412	; 0x19c
 101ad54:	e3400106 	movt	r0, #262	; 0x106
 101ad58:	ebfff877 	bl	1018f3c <Xil_Assert>
 101ad5c:	e3a03001 	mov	r3, #1
 101ad60:	e5843000 	str	r3, [r4]
				XSPIPS_DR_NSS_SHIFT);

}
 101ad64:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101ad68:	e30c0008 	movw	r0, #49160	; 0xc008
 101ad6c:	e300119b 	movw	r1, #411	; 0x19b
 101ad70:	e3400106 	movt	r0, #262	; 0x106
 101ad74:	ebfff870 	bl	1018f3c <Xil_Assert>
 101ad78:	e3013f58 	movw	r3, #8024	; 0x1f58
 101ad7c:	e3a02001 	mov	r2, #1
 101ad80:	e340310c 	movt	r3, #268	; 0x10c
 101ad84:	e5832000 	str	r2, [r3]
 101ad88:	e8bd8010 	pop	{r4, pc}

0101ad8c <FIQInterrupt>:
* @note		None.
*
******************************************************************************/
void FIQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_FIQ_INT].Handler(XExc_VectorTable[
 101ad8c:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101ad90:	e3403106 	movt	r3, #262	; 0x106
 101ad94:	e5932030 	ldr	r2, [r3, #48]	; 0x30
 101ad98:	e5930034 	ldr	r0, [r3, #52]	; 0x34
 101ad9c:	e12fff12 	bx	r2

0101ada0 <IRQInterrupt>:
* @note		None.
*
******************************************************************************/
void IRQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_IRQ_INT].Handler(XExc_VectorTable[
 101ada0:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101ada4:	e3403106 	movt	r3, #262	; 0x106
 101ada8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 101adac:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
 101adb0:	e12fff12 	bx	r2

0101adb4 <UndefinedException>:
* @note		None.
*
******************************************************************************/
void UndefinedException(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_UNDEFINED_INT].Handler(XExc_VectorTable[
 101adb4:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101adb8:	e3403106 	movt	r3, #262	; 0x106
 101adbc:	e5932008 	ldr	r2, [r3, #8]
 101adc0:	e593000c 	ldr	r0, [r3, #12]
 101adc4:	e12fff12 	bx	r2

0101adc8 <SWInterrupt>:
* @note		None.
*
******************************************************************************/
void SWInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_SWI_INT].Handler(XExc_VectorTable[
 101adc8:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101adcc:	e3403106 	movt	r3, #262	; 0x106
 101add0:	e5932010 	ldr	r2, [r3, #16]
 101add4:	e5930014 	ldr	r0, [r3, #20]
 101add8:	e12fff12 	bx	r2

0101addc <DataAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void DataAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_DATA_ABORT_INT].Handler(
 101addc:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101ade0:	e3403106 	movt	r3, #262	; 0x106
 101ade4:	e5932020 	ldr	r2, [r3, #32]
 101ade8:	e5930024 	ldr	r0, [r3, #36]	; 0x24
 101adec:	e12fff12 	bx	r2

0101adf0 <PrefetchAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void PrefetchAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_PREFETCH_ABORT_INT].Handler(
 101adf0:	e30c32d8 	movw	r3, #49880	; 0xc2d8
 101adf4:	e3403106 	movt	r3, #262	; 0x106
 101adf8:	e5932018 	ldr	r2, [r3, #24]
 101adfc:	e593001c 	ldr	r0, [r3, #28]
 101ae00:	e12fff12 	bx	r2
 101ae04:	01074010 	.word	0x01074010
 101ae08:	01074010 	.word	0x01074010
 101ae0c:	01074020 	.word	0x01074020
 101ae10:	010c1f6c 	.word	0x010c1f6c
 101ae14:	00010000 	.word	0x00010000

0101ae18 <_start>:
	.long	__stack


	.globl	_start
_start:
	bl      __cpu_init		/* Initialize the CPU first (BSP provides this) */
 101ae18:	eb000017 	bl	101ae7c <__cpu_init>

	mov	r0, #0
 101ae1c:	e3a00000 	mov	r0, #0

	/* clear sbss */
	ldr 	r1,.Lsbss_start		/* calculate beginning of the SBSS */
 101ae20:	e51f1024 	ldr	r1, [pc, #-36]	; 101ae04 <PrefetchAbortInterrupt+0x14>
	ldr	r2,.Lsbss_end		/* calculate end of the SBSS */
 101ae24:	e51f2024 	ldr	r2, [pc, #-36]	; 101ae08 <PrefetchAbortInterrupt+0x18>

.Lloop_sbss:
	cmp	r1,r2
 101ae28:	e1510002 	cmp	r1, r2
	bge	.Lenclsbss		/* If no SBSS, no clearing required */
 101ae2c:	aa000001 	bge	101ae38 <_start+0x20>
	str	r0, [r1], #4
 101ae30:	e4810004 	str	r0, [r1], #4
	b	.Lloop_sbss
 101ae34:	eafffffb 	b	101ae28 <_start+0x10>

.Lenclsbss:
	/* clear bss */
	ldr	r1,.Lbss_start		/* calculate beginning of the BSS */
 101ae38:	e51f1034 	ldr	r1, [pc, #-52]	; 101ae0c <PrefetchAbortInterrupt+0x1c>
	ldr	r2,.Lbss_end		/* calculate end of the BSS */
 101ae3c:	e51f2034 	ldr	r2, [pc, #-52]	; 101ae10 <PrefetchAbortInterrupt+0x20>

.Lloop_bss:
	cmp	r1,r2
 101ae40:	e1510002 	cmp	r1, r2
	bge	.Lenclbss		/* If no BSS, no clearing required */
 101ae44:	aa000001 	bge	101ae50 <_start+0x38>
	str	r0, [r1], #4
 101ae48:	e4810004 	str	r0, [r1], #4
	b	.Lloop_bss
 101ae4c:	eafffffb 	b	101ae40 <_start+0x28>

.Lenclbss:

	/* set stack pointer */
	ldr	r13,.Lstack		/* stack address */
 101ae50:	e51fd044 	ldr	sp, [pc, #-68]	; 101ae14 <PrefetchAbortInterrupt+0x24>

    /* Reset and start Global Timer */
	mov	r0, #0x0
 101ae54:	e3a00000 	mov	r0, #0
	mov	r1, #0x0
 101ae58:	e3a01000 	mov	r1, #0
	#if defined SLEEP_TIMER_BASEADDR
	bl XTime_StartTTCTimer
	#endif

#if USE_AMP != 1
	bl XTime_SetTime
 101ae5c:	eb000015 	bl	101aeb8 <XTime_SetTime>
	/* Setup profiling stuff */
	bl	_profile_init
#endif /* PROFILING */

   /* run global constructors */
   bl __libc_init_array
 101ae60:	fa000386 	blx	101bc80 <__libc_init_array>

	/* make sure argc and argv are valid */
	mov	r0, #0
 101ae64:	e3a00000 	mov	r0, #0
	mov	r1, #0
 101ae68:	e3a01000 	mov	r1, #0

	/* Let her rip */
	bl	main
 101ae6c:	eb003261 	bl	10277f8 <main>

   /* Cleanup global constructors */
   bl __libc_fini_array
 101ae70:	fa000376 	blx	101bc50 <__libc_fini_array>
	/* Cleanup profiling stuff */
	bl	_profile_clean
#endif /* PROFILING */

        /* All done */
	bl	exit
 101ae74:	fa00036d 	blx	101bc30 <exit>

.Lexit:	/* should never get here */
	b .Lexit
 101ae78:	eafffffe 	b	101ae78 <_start+0x60>

0101ae7c <__cpu_init>:
	.global __cpu_init
	.align 2
__cpu_init:

/* Clear cp15 regs with unknown reset values */
	mov	r0, #0x0
 101ae7c:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c5, c0, 0	/* DFSR */
 101ae80:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
	mcr	p15, 0, r0, c5, c0, 1	/* IFSR */
 101ae84:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
	mcr	p15, 0, r0, c6, c0, 0	/* DFAR */
 101ae88:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
	mcr	p15, 0, r0, c6, c0, 2	/* IFAR */
 101ae8c:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
	mcr	p15, 0, r0, c9, c13, 2	/* PMXEVCNTR */
 101ae90:	ee090f5d 	mcr	15, 0, r0, cr9, cr13, {2}
	mcr	p15, 0, r0, c13, c0, 2	/* TPIDRURW */
 101ae94:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
	mcr	p15, 0, r0, c13, c0, 3	/* TPIDRURO */
 101ae98:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}

/* Reset and start Cycle Counter */
	mov	r2, #0x80000000		/* clear overflow */
 101ae9c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 3
 101aea0:	ee092f7c 	mcr	15, 0, r2, cr9, cr12, {3}
	mov	r2, #0xd		/* D, C, E */
 101aea4:	e3a0200d 	mov	r2, #13
	mcr	p15, 0, r2, c9, c12, 0
 101aea8:	ee092f1c 	mcr	15, 0, r2, cr9, cr12, {0}
	mov	r2, #0x80000000		/* enable cycle counter */
 101aeac:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 1
 101aeb0:	ee092f3c 	mcr	15, 0, r2, cr9, cr12, {1}

	bx	lr
 101aeb4:	e12fff1e 	bx	lr

0101aeb8 <XTime_SetTime>:
 101aeb8:	e3a03000 	mov	r3, #0
 101aebc:	e3a0c000 	mov	ip, #0
 101aec0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101aec4:	e3a02001 	mov	r2, #1
 101aec8:	e583c208 	str	ip, [r3, #520]	; 0x208
 101aecc:	e5830200 	str	r0, [r3, #512]	; 0x200
 101aed0:	e5831204 	str	r1, [r3, #516]	; 0x204
 101aed4:	e5832208 	str	r2, [r3, #520]	; 0x208
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_COUNTER_UPPER_OFFSET,
		(u32)((u32)(Xtime_Global>>32U)));

	/* Enable Global Timer */
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_CONTROL_OFFSET, (u32)0x1);
}
 101aed8:	e12fff1e 	bx	lr

0101aedc <XTime_GetTime>:
	return *(volatile u32 *) Addr;
 101aedc:	e3a03000 	mov	r3, #0
 101aee0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101aee4:	e5931204 	ldr	r1, [r3, #516]	; 0x204
 101aee8:	e593c200 	ldr	ip, [r3, #512]	; 0x200
 101aeec:	e5932204 	ldr	r2, [r3, #516]	; 0x204
	/* Reading Global Timer Counter Register */
	do
	{
		high = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET);
		low = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);
	} while(Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET) != high);
 101aef0:	e1520001 	cmp	r2, r1
 101aef4:	1afffffa 	bne	101aee4 <XTime_GetTime+0x8>

	*Xtime_Global = (((XTime) high) << 32U) | (XTime) low;
 101aef8:	e580c000 	str	ip, [r0]
 101aefc:	e5802004 	str	r2, [r0, #4]
}
 101af00:	e12fff1e 	bx	lr
 101af04:	00000000 	andeq	r0, r0, r0

0101af08 <__udivsi3>:
 101af08:	1e4a      	subs	r2, r1, #1
 101af0a:	bf08      	it	eq
 101af0c:	4770      	bxeq	lr
 101af0e:	f0c0 8124 	bcc.w	101b15a <__udivsi3+0x252>
 101af12:	4288      	cmp	r0, r1
 101af14:	f240 8116 	bls.w	101b144 <__udivsi3+0x23c>
 101af18:	4211      	tst	r1, r2
 101af1a:	f000 8117 	beq.w	101b14c <__udivsi3+0x244>
 101af1e:	fab0 f380 	clz	r3, r0
 101af22:	fab1 f281 	clz	r2, r1
 101af26:	eba2 0303 	sub.w	r3, r2, r3
 101af2a:	f1c3 031f 	rsb	r3, r3, #31
 101af2e:	a204      	add	r2, pc, #16	; (adr r2, 101af40 <__udivsi3+0x38>)
 101af30:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 101af34:	f04f 0200 	mov.w	r2, #0
 101af38:	469f      	mov	pc, r3
 101af3a:	bf00      	nop
 101af3c:	f3af 8000 	nop.w
 101af40:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 101af44:	bf00      	nop
 101af46:	eb42 0202 	adc.w	r2, r2, r2
 101af4a:	bf28      	it	cs
 101af4c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 101af50:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 101af54:	bf00      	nop
 101af56:	eb42 0202 	adc.w	r2, r2, r2
 101af5a:	bf28      	it	cs
 101af5c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 101af60:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 101af64:	bf00      	nop
 101af66:	eb42 0202 	adc.w	r2, r2, r2
 101af6a:	bf28      	it	cs
 101af6c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 101af70:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 101af74:	bf00      	nop
 101af76:	eb42 0202 	adc.w	r2, r2, r2
 101af7a:	bf28      	it	cs
 101af7c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 101af80:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 101af84:	bf00      	nop
 101af86:	eb42 0202 	adc.w	r2, r2, r2
 101af8a:	bf28      	it	cs
 101af8c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 101af90:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 101af94:	bf00      	nop
 101af96:	eb42 0202 	adc.w	r2, r2, r2
 101af9a:	bf28      	it	cs
 101af9c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 101afa0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 101afa4:	bf00      	nop
 101afa6:	eb42 0202 	adc.w	r2, r2, r2
 101afaa:	bf28      	it	cs
 101afac:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 101afb0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 101afb4:	bf00      	nop
 101afb6:	eb42 0202 	adc.w	r2, r2, r2
 101afba:	bf28      	it	cs
 101afbc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 101afc0:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 101afc4:	bf00      	nop
 101afc6:	eb42 0202 	adc.w	r2, r2, r2
 101afca:	bf28      	it	cs
 101afcc:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 101afd0:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 101afd4:	bf00      	nop
 101afd6:	eb42 0202 	adc.w	r2, r2, r2
 101afda:	bf28      	it	cs
 101afdc:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 101afe0:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 101afe4:	bf00      	nop
 101afe6:	eb42 0202 	adc.w	r2, r2, r2
 101afea:	bf28      	it	cs
 101afec:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 101aff0:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 101aff4:	bf00      	nop
 101aff6:	eb42 0202 	adc.w	r2, r2, r2
 101affa:	bf28      	it	cs
 101affc:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 101b000:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 101b004:	bf00      	nop
 101b006:	eb42 0202 	adc.w	r2, r2, r2
 101b00a:	bf28      	it	cs
 101b00c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 101b010:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 101b014:	bf00      	nop
 101b016:	eb42 0202 	adc.w	r2, r2, r2
 101b01a:	bf28      	it	cs
 101b01c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 101b020:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 101b024:	bf00      	nop
 101b026:	eb42 0202 	adc.w	r2, r2, r2
 101b02a:	bf28      	it	cs
 101b02c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 101b030:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 101b034:	bf00      	nop
 101b036:	eb42 0202 	adc.w	r2, r2, r2
 101b03a:	bf28      	it	cs
 101b03c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 101b040:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 101b044:	bf00      	nop
 101b046:	eb42 0202 	adc.w	r2, r2, r2
 101b04a:	bf28      	it	cs
 101b04c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 101b050:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 101b054:	bf00      	nop
 101b056:	eb42 0202 	adc.w	r2, r2, r2
 101b05a:	bf28      	it	cs
 101b05c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 101b060:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 101b064:	bf00      	nop
 101b066:	eb42 0202 	adc.w	r2, r2, r2
 101b06a:	bf28      	it	cs
 101b06c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 101b070:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 101b074:	bf00      	nop
 101b076:	eb42 0202 	adc.w	r2, r2, r2
 101b07a:	bf28      	it	cs
 101b07c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 101b080:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 101b084:	bf00      	nop
 101b086:	eb42 0202 	adc.w	r2, r2, r2
 101b08a:	bf28      	it	cs
 101b08c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 101b090:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 101b094:	bf00      	nop
 101b096:	eb42 0202 	adc.w	r2, r2, r2
 101b09a:	bf28      	it	cs
 101b09c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 101b0a0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 101b0a4:	bf00      	nop
 101b0a6:	eb42 0202 	adc.w	r2, r2, r2
 101b0aa:	bf28      	it	cs
 101b0ac:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 101b0b0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 101b0b4:	bf00      	nop
 101b0b6:	eb42 0202 	adc.w	r2, r2, r2
 101b0ba:	bf28      	it	cs
 101b0bc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 101b0c0:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 101b0c4:	bf00      	nop
 101b0c6:	eb42 0202 	adc.w	r2, r2, r2
 101b0ca:	bf28      	it	cs
 101b0cc:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 101b0d0:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 101b0d4:	bf00      	nop
 101b0d6:	eb42 0202 	adc.w	r2, r2, r2
 101b0da:	bf28      	it	cs
 101b0dc:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 101b0e0:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 101b0e4:	bf00      	nop
 101b0e6:	eb42 0202 	adc.w	r2, r2, r2
 101b0ea:	bf28      	it	cs
 101b0ec:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 101b0f0:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 101b0f4:	bf00      	nop
 101b0f6:	eb42 0202 	adc.w	r2, r2, r2
 101b0fa:	bf28      	it	cs
 101b0fc:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 101b100:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 101b104:	bf00      	nop
 101b106:	eb42 0202 	adc.w	r2, r2, r2
 101b10a:	bf28      	it	cs
 101b10c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 101b110:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 101b114:	bf00      	nop
 101b116:	eb42 0202 	adc.w	r2, r2, r2
 101b11a:	bf28      	it	cs
 101b11c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 101b120:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 101b124:	bf00      	nop
 101b126:	eb42 0202 	adc.w	r2, r2, r2
 101b12a:	bf28      	it	cs
 101b12c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 101b130:	ebb0 0f01 	cmp.w	r0, r1
 101b134:	bf00      	nop
 101b136:	eb42 0202 	adc.w	r2, r2, r2
 101b13a:	bf28      	it	cs
 101b13c:	eba0 0001 	subcs.w	r0, r0, r1
 101b140:	4610      	mov	r0, r2
 101b142:	4770      	bx	lr
 101b144:	bf0c      	ite	eq
 101b146:	2001      	moveq	r0, #1
 101b148:	2000      	movne	r0, #0
 101b14a:	4770      	bx	lr
 101b14c:	fab1 f281 	clz	r2, r1
 101b150:	f1c2 021f 	rsb	r2, r2, #31
 101b154:	fa20 f002 	lsr.w	r0, r0, r2
 101b158:	4770      	bx	lr
 101b15a:	b108      	cbz	r0, 101b160 <__udivsi3+0x258>
 101b15c:	f04f 30ff 	mov.w	r0, #4294967295
 101b160:	f000 b966 	b.w	101b430 <__aeabi_idiv0>

0101b164 <__aeabi_uidivmod>:
 101b164:	2900      	cmp	r1, #0
 101b166:	d0f8      	beq.n	101b15a <__udivsi3+0x252>
 101b168:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 101b16c:	f7ff fecc 	bl	101af08 <__udivsi3>
 101b170:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 101b174:	fb02 f300 	mul.w	r3, r2, r0
 101b178:	eba1 0103 	sub.w	r1, r1, r3
 101b17c:	4770      	bx	lr
 101b17e:	bf00      	nop

0101b180 <__divsi3>:
 101b180:	2900      	cmp	r1, #0
 101b182:	f000 813e 	beq.w	101b402 <.divsi3_skip_div0_test+0x27c>

0101b186 <.divsi3_skip_div0_test>:
 101b186:	ea80 0c01 	eor.w	ip, r0, r1
 101b18a:	bf48      	it	mi
 101b18c:	4249      	negmi	r1, r1
 101b18e:	1e4a      	subs	r2, r1, #1
 101b190:	f000 811f 	beq.w	101b3d2 <.divsi3_skip_div0_test+0x24c>
 101b194:	0003      	movs	r3, r0
 101b196:	bf48      	it	mi
 101b198:	4243      	negmi	r3, r0
 101b19a:	428b      	cmp	r3, r1
 101b19c:	f240 811e 	bls.w	101b3dc <.divsi3_skip_div0_test+0x256>
 101b1a0:	4211      	tst	r1, r2
 101b1a2:	f000 8123 	beq.w	101b3ec <.divsi3_skip_div0_test+0x266>
 101b1a6:	fab3 f283 	clz	r2, r3
 101b1aa:	fab1 f081 	clz	r0, r1
 101b1ae:	eba0 0202 	sub.w	r2, r0, r2
 101b1b2:	f1c2 021f 	rsb	r2, r2, #31
 101b1b6:	a004      	add	r0, pc, #16	; (adr r0, 101b1c8 <.divsi3_skip_div0_test+0x42>)
 101b1b8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 101b1bc:	f04f 0000 	mov.w	r0, #0
 101b1c0:	4697      	mov	pc, r2
 101b1c2:	bf00      	nop
 101b1c4:	f3af 8000 	nop.w
 101b1c8:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 101b1cc:	bf00      	nop
 101b1ce:	eb40 0000 	adc.w	r0, r0, r0
 101b1d2:	bf28      	it	cs
 101b1d4:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 101b1d8:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 101b1dc:	bf00      	nop
 101b1de:	eb40 0000 	adc.w	r0, r0, r0
 101b1e2:	bf28      	it	cs
 101b1e4:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 101b1e8:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 101b1ec:	bf00      	nop
 101b1ee:	eb40 0000 	adc.w	r0, r0, r0
 101b1f2:	bf28      	it	cs
 101b1f4:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 101b1f8:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 101b1fc:	bf00      	nop
 101b1fe:	eb40 0000 	adc.w	r0, r0, r0
 101b202:	bf28      	it	cs
 101b204:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 101b208:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 101b20c:	bf00      	nop
 101b20e:	eb40 0000 	adc.w	r0, r0, r0
 101b212:	bf28      	it	cs
 101b214:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 101b218:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 101b21c:	bf00      	nop
 101b21e:	eb40 0000 	adc.w	r0, r0, r0
 101b222:	bf28      	it	cs
 101b224:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 101b228:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 101b22c:	bf00      	nop
 101b22e:	eb40 0000 	adc.w	r0, r0, r0
 101b232:	bf28      	it	cs
 101b234:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 101b238:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 101b23c:	bf00      	nop
 101b23e:	eb40 0000 	adc.w	r0, r0, r0
 101b242:	bf28      	it	cs
 101b244:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 101b248:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 101b24c:	bf00      	nop
 101b24e:	eb40 0000 	adc.w	r0, r0, r0
 101b252:	bf28      	it	cs
 101b254:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 101b258:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 101b25c:	bf00      	nop
 101b25e:	eb40 0000 	adc.w	r0, r0, r0
 101b262:	bf28      	it	cs
 101b264:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 101b268:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 101b26c:	bf00      	nop
 101b26e:	eb40 0000 	adc.w	r0, r0, r0
 101b272:	bf28      	it	cs
 101b274:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 101b278:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 101b27c:	bf00      	nop
 101b27e:	eb40 0000 	adc.w	r0, r0, r0
 101b282:	bf28      	it	cs
 101b284:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 101b288:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 101b28c:	bf00      	nop
 101b28e:	eb40 0000 	adc.w	r0, r0, r0
 101b292:	bf28      	it	cs
 101b294:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 101b298:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 101b29c:	bf00      	nop
 101b29e:	eb40 0000 	adc.w	r0, r0, r0
 101b2a2:	bf28      	it	cs
 101b2a4:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 101b2a8:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 101b2ac:	bf00      	nop
 101b2ae:	eb40 0000 	adc.w	r0, r0, r0
 101b2b2:	bf28      	it	cs
 101b2b4:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 101b2b8:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 101b2bc:	bf00      	nop
 101b2be:	eb40 0000 	adc.w	r0, r0, r0
 101b2c2:	bf28      	it	cs
 101b2c4:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 101b2c8:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 101b2cc:	bf00      	nop
 101b2ce:	eb40 0000 	adc.w	r0, r0, r0
 101b2d2:	bf28      	it	cs
 101b2d4:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 101b2d8:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 101b2dc:	bf00      	nop
 101b2de:	eb40 0000 	adc.w	r0, r0, r0
 101b2e2:	bf28      	it	cs
 101b2e4:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 101b2e8:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 101b2ec:	bf00      	nop
 101b2ee:	eb40 0000 	adc.w	r0, r0, r0
 101b2f2:	bf28      	it	cs
 101b2f4:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 101b2f8:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 101b2fc:	bf00      	nop
 101b2fe:	eb40 0000 	adc.w	r0, r0, r0
 101b302:	bf28      	it	cs
 101b304:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 101b308:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 101b30c:	bf00      	nop
 101b30e:	eb40 0000 	adc.w	r0, r0, r0
 101b312:	bf28      	it	cs
 101b314:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 101b318:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 101b31c:	bf00      	nop
 101b31e:	eb40 0000 	adc.w	r0, r0, r0
 101b322:	bf28      	it	cs
 101b324:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 101b328:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 101b32c:	bf00      	nop
 101b32e:	eb40 0000 	adc.w	r0, r0, r0
 101b332:	bf28      	it	cs
 101b334:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 101b338:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 101b33c:	bf00      	nop
 101b33e:	eb40 0000 	adc.w	r0, r0, r0
 101b342:	bf28      	it	cs
 101b344:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 101b348:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 101b34c:	bf00      	nop
 101b34e:	eb40 0000 	adc.w	r0, r0, r0
 101b352:	bf28      	it	cs
 101b354:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 101b358:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 101b35c:	bf00      	nop
 101b35e:	eb40 0000 	adc.w	r0, r0, r0
 101b362:	bf28      	it	cs
 101b364:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 101b368:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 101b36c:	bf00      	nop
 101b36e:	eb40 0000 	adc.w	r0, r0, r0
 101b372:	bf28      	it	cs
 101b374:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 101b378:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 101b37c:	bf00      	nop
 101b37e:	eb40 0000 	adc.w	r0, r0, r0
 101b382:	bf28      	it	cs
 101b384:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 101b388:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 101b38c:	bf00      	nop
 101b38e:	eb40 0000 	adc.w	r0, r0, r0
 101b392:	bf28      	it	cs
 101b394:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 101b398:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 101b39c:	bf00      	nop
 101b39e:	eb40 0000 	adc.w	r0, r0, r0
 101b3a2:	bf28      	it	cs
 101b3a4:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 101b3a8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 101b3ac:	bf00      	nop
 101b3ae:	eb40 0000 	adc.w	r0, r0, r0
 101b3b2:	bf28      	it	cs
 101b3b4:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 101b3b8:	ebb3 0f01 	cmp.w	r3, r1
 101b3bc:	bf00      	nop
 101b3be:	eb40 0000 	adc.w	r0, r0, r0
 101b3c2:	bf28      	it	cs
 101b3c4:	eba3 0301 	subcs.w	r3, r3, r1
 101b3c8:	f1bc 0f00 	cmp.w	ip, #0
 101b3cc:	bf48      	it	mi
 101b3ce:	4240      	negmi	r0, r0
 101b3d0:	4770      	bx	lr
 101b3d2:	ea9c 0f00 	teq	ip, r0
 101b3d6:	bf48      	it	mi
 101b3d8:	4240      	negmi	r0, r0
 101b3da:	4770      	bx	lr
 101b3dc:	bf38      	it	cc
 101b3de:	2000      	movcc	r0, #0
 101b3e0:	bf04      	itt	eq
 101b3e2:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 101b3e6:	f040 0001 	orreq.w	r0, r0, #1
 101b3ea:	4770      	bx	lr
 101b3ec:	fab1 f281 	clz	r2, r1
 101b3f0:	f1c2 021f 	rsb	r2, r2, #31
 101b3f4:	f1bc 0f00 	cmp.w	ip, #0
 101b3f8:	fa23 f002 	lsr.w	r0, r3, r2
 101b3fc:	bf48      	it	mi
 101b3fe:	4240      	negmi	r0, r0
 101b400:	4770      	bx	lr
 101b402:	2800      	cmp	r0, #0
 101b404:	bfc8      	it	gt
 101b406:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 101b40a:	bfb8      	it	lt
 101b40c:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 101b410:	f000 b80e 	b.w	101b430 <__aeabi_idiv0>

0101b414 <__aeabi_idivmod>:
 101b414:	2900      	cmp	r1, #0
 101b416:	d0f4      	beq.n	101b402 <.divsi3_skip_div0_test+0x27c>
 101b418:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 101b41c:	f7ff feb3 	bl	101b186 <.divsi3_skip_div0_test>
 101b420:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 101b424:	fb02 f300 	mul.w	r3, r2, r0
 101b428:	eba1 0103 	sub.w	r1, r1, r3
 101b42c:	4770      	bx	lr
 101b42e:	bf00      	nop

0101b430 <__aeabi_idiv0>:
 101b430:	4770      	bx	lr
 101b432:	bf00      	nop

0101b434 <__aeabi_drsub>:
 101b434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 101b438:	e002      	b.n	101b440 <__adddf3>
 101b43a:	bf00      	nop

0101b43c <__aeabi_dsub>:
 101b43c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0101b440 <__adddf3>:
 101b440:	b530      	push	{r4, r5, lr}
 101b442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 101b446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 101b44a:	ea94 0f05 	teq	r4, r5
 101b44e:	bf08      	it	eq
 101b450:	ea90 0f02 	teqeq	r0, r2
 101b454:	bf1f      	itttt	ne
 101b456:	ea54 0c00 	orrsne.w	ip, r4, r0
 101b45a:	ea55 0c02 	orrsne.w	ip, r5, r2
 101b45e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 101b462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 101b466:	f000 80e2 	beq.w	101b62e <__adddf3+0x1ee>
 101b46a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 101b46e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 101b472:	bfb8      	it	lt
 101b474:	426d      	neglt	r5, r5
 101b476:	dd0c      	ble.n	101b492 <__adddf3+0x52>
 101b478:	442c      	add	r4, r5
 101b47a:	ea80 0202 	eor.w	r2, r0, r2
 101b47e:	ea81 0303 	eor.w	r3, r1, r3
 101b482:	ea82 0000 	eor.w	r0, r2, r0
 101b486:	ea83 0101 	eor.w	r1, r3, r1
 101b48a:	ea80 0202 	eor.w	r2, r0, r2
 101b48e:	ea81 0303 	eor.w	r3, r1, r3
 101b492:	2d36      	cmp	r5, #54	; 0x36
 101b494:	bf88      	it	hi
 101b496:	bd30      	pophi	{r4, r5, pc}
 101b498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 101b49c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 101b4a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 101b4a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 101b4a8:	d002      	beq.n	101b4b0 <__adddf3+0x70>
 101b4aa:	4240      	negs	r0, r0
 101b4ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 101b4b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 101b4b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 101b4b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 101b4bc:	d002      	beq.n	101b4c4 <__adddf3+0x84>
 101b4be:	4252      	negs	r2, r2
 101b4c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 101b4c4:	ea94 0f05 	teq	r4, r5
 101b4c8:	f000 80a7 	beq.w	101b61a <__adddf3+0x1da>
 101b4cc:	f1a4 0401 	sub.w	r4, r4, #1
 101b4d0:	f1d5 0e20 	rsbs	lr, r5, #32
 101b4d4:	db0d      	blt.n	101b4f2 <__adddf3+0xb2>
 101b4d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 101b4da:	fa22 f205 	lsr.w	r2, r2, r5
 101b4de:	1880      	adds	r0, r0, r2
 101b4e0:	f141 0100 	adc.w	r1, r1, #0
 101b4e4:	fa03 f20e 	lsl.w	r2, r3, lr
 101b4e8:	1880      	adds	r0, r0, r2
 101b4ea:	fa43 f305 	asr.w	r3, r3, r5
 101b4ee:	4159      	adcs	r1, r3
 101b4f0:	e00e      	b.n	101b510 <__adddf3+0xd0>
 101b4f2:	f1a5 0520 	sub.w	r5, r5, #32
 101b4f6:	f10e 0e20 	add.w	lr, lr, #32
 101b4fa:	2a01      	cmp	r2, #1
 101b4fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 101b500:	bf28      	it	cs
 101b502:	f04c 0c02 	orrcs.w	ip, ip, #2
 101b506:	fa43 f305 	asr.w	r3, r3, r5
 101b50a:	18c0      	adds	r0, r0, r3
 101b50c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 101b510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 101b514:	d507      	bpl.n	101b526 <__adddf3+0xe6>
 101b516:	f04f 0e00 	mov.w	lr, #0
 101b51a:	f1dc 0c00 	rsbs	ip, ip, #0
 101b51e:	eb7e 0000 	sbcs.w	r0, lr, r0
 101b522:	eb6e 0101 	sbc.w	r1, lr, r1
 101b526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 101b52a:	d31b      	bcc.n	101b564 <__adddf3+0x124>
 101b52c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 101b530:	d30c      	bcc.n	101b54c <__adddf3+0x10c>
 101b532:	0849      	lsrs	r1, r1, #1
 101b534:	ea5f 0030 	movs.w	r0, r0, rrx
 101b538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 101b53c:	f104 0401 	add.w	r4, r4, #1
 101b540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 101b544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 101b548:	f080 809a 	bcs.w	101b680 <__adddf3+0x240>
 101b54c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 101b550:	bf08      	it	eq
 101b552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 101b556:	f150 0000 	adcs.w	r0, r0, #0
 101b55a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 101b55e:	ea41 0105 	orr.w	r1, r1, r5
 101b562:	bd30      	pop	{r4, r5, pc}
 101b564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 101b568:	4140      	adcs	r0, r0
 101b56a:	eb41 0101 	adc.w	r1, r1, r1
 101b56e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 101b572:	f1a4 0401 	sub.w	r4, r4, #1
 101b576:	d1e9      	bne.n	101b54c <__adddf3+0x10c>
 101b578:	f091 0f00 	teq	r1, #0
 101b57c:	bf04      	itt	eq
 101b57e:	4601      	moveq	r1, r0
 101b580:	2000      	moveq	r0, #0
 101b582:	fab1 f381 	clz	r3, r1
 101b586:	bf08      	it	eq
 101b588:	3320      	addeq	r3, #32
 101b58a:	f1a3 030b 	sub.w	r3, r3, #11
 101b58e:	f1b3 0220 	subs.w	r2, r3, #32
 101b592:	da0c      	bge.n	101b5ae <__adddf3+0x16e>
 101b594:	320c      	adds	r2, #12
 101b596:	dd08      	ble.n	101b5aa <__adddf3+0x16a>
 101b598:	f102 0c14 	add.w	ip, r2, #20
 101b59c:	f1c2 020c 	rsb	r2, r2, #12
 101b5a0:	fa01 f00c 	lsl.w	r0, r1, ip
 101b5a4:	fa21 f102 	lsr.w	r1, r1, r2
 101b5a8:	e00c      	b.n	101b5c4 <__adddf3+0x184>
 101b5aa:	f102 0214 	add.w	r2, r2, #20
 101b5ae:	bfd8      	it	le
 101b5b0:	f1c2 0c20 	rsble	ip, r2, #32
 101b5b4:	fa01 f102 	lsl.w	r1, r1, r2
 101b5b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 101b5bc:	bfdc      	itt	le
 101b5be:	ea41 010c 	orrle.w	r1, r1, ip
 101b5c2:	4090      	lslle	r0, r2
 101b5c4:	1ae4      	subs	r4, r4, r3
 101b5c6:	bfa2      	ittt	ge
 101b5c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 101b5cc:	4329      	orrge	r1, r5
 101b5ce:	bd30      	popge	{r4, r5, pc}
 101b5d0:	ea6f 0404 	mvn.w	r4, r4
 101b5d4:	3c1f      	subs	r4, #31
 101b5d6:	da1c      	bge.n	101b612 <__adddf3+0x1d2>
 101b5d8:	340c      	adds	r4, #12
 101b5da:	dc0e      	bgt.n	101b5fa <__adddf3+0x1ba>
 101b5dc:	f104 0414 	add.w	r4, r4, #20
 101b5e0:	f1c4 0220 	rsb	r2, r4, #32
 101b5e4:	fa20 f004 	lsr.w	r0, r0, r4
 101b5e8:	fa01 f302 	lsl.w	r3, r1, r2
 101b5ec:	ea40 0003 	orr.w	r0, r0, r3
 101b5f0:	fa21 f304 	lsr.w	r3, r1, r4
 101b5f4:	ea45 0103 	orr.w	r1, r5, r3
 101b5f8:	bd30      	pop	{r4, r5, pc}
 101b5fa:	f1c4 040c 	rsb	r4, r4, #12
 101b5fe:	f1c4 0220 	rsb	r2, r4, #32
 101b602:	fa20 f002 	lsr.w	r0, r0, r2
 101b606:	fa01 f304 	lsl.w	r3, r1, r4
 101b60a:	ea40 0003 	orr.w	r0, r0, r3
 101b60e:	4629      	mov	r1, r5
 101b610:	bd30      	pop	{r4, r5, pc}
 101b612:	fa21 f004 	lsr.w	r0, r1, r4
 101b616:	4629      	mov	r1, r5
 101b618:	bd30      	pop	{r4, r5, pc}
 101b61a:	f094 0f00 	teq	r4, #0
 101b61e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 101b622:	bf06      	itte	eq
 101b624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 101b628:	3401      	addeq	r4, #1
 101b62a:	3d01      	subne	r5, #1
 101b62c:	e74e      	b.n	101b4cc <__adddf3+0x8c>
 101b62e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 101b632:	bf18      	it	ne
 101b634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 101b638:	d029      	beq.n	101b68e <__adddf3+0x24e>
 101b63a:	ea94 0f05 	teq	r4, r5
 101b63e:	bf08      	it	eq
 101b640:	ea90 0f02 	teqeq	r0, r2
 101b644:	d005      	beq.n	101b652 <__adddf3+0x212>
 101b646:	ea54 0c00 	orrs.w	ip, r4, r0
 101b64a:	bf04      	itt	eq
 101b64c:	4619      	moveq	r1, r3
 101b64e:	4610      	moveq	r0, r2
 101b650:	bd30      	pop	{r4, r5, pc}
 101b652:	ea91 0f03 	teq	r1, r3
 101b656:	bf1e      	ittt	ne
 101b658:	2100      	movne	r1, #0
 101b65a:	2000      	movne	r0, #0
 101b65c:	bd30      	popne	{r4, r5, pc}
 101b65e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 101b662:	d105      	bne.n	101b670 <__adddf3+0x230>
 101b664:	0040      	lsls	r0, r0, #1
 101b666:	4149      	adcs	r1, r1
 101b668:	bf28      	it	cs
 101b66a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 101b66e:	bd30      	pop	{r4, r5, pc}
 101b670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 101b674:	bf3c      	itt	cc
 101b676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 101b67a:	bd30      	popcc	{r4, r5, pc}
 101b67c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 101b680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 101b684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 101b688:	f04f 0000 	mov.w	r0, #0
 101b68c:	bd30      	pop	{r4, r5, pc}
 101b68e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 101b692:	bf1a      	itte	ne
 101b694:	4619      	movne	r1, r3
 101b696:	4610      	movne	r0, r2
 101b698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 101b69c:	bf1c      	itt	ne
 101b69e:	460b      	movne	r3, r1
 101b6a0:	4602      	movne	r2, r0
 101b6a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 101b6a6:	bf06      	itte	eq
 101b6a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 101b6ac:	ea91 0f03 	teqeq	r1, r3
 101b6b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 101b6b4:	bd30      	pop	{r4, r5, pc}
 101b6b6:	bf00      	nop

0101b6b8 <__aeabi_ui2d>:
 101b6b8:	f090 0f00 	teq	r0, #0
 101b6bc:	bf04      	itt	eq
 101b6be:	2100      	moveq	r1, #0
 101b6c0:	4770      	bxeq	lr
 101b6c2:	b530      	push	{r4, r5, lr}
 101b6c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 101b6c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 101b6cc:	f04f 0500 	mov.w	r5, #0
 101b6d0:	f04f 0100 	mov.w	r1, #0
 101b6d4:	e750      	b.n	101b578 <__adddf3+0x138>
 101b6d6:	bf00      	nop

0101b6d8 <__aeabi_i2d>:
 101b6d8:	f090 0f00 	teq	r0, #0
 101b6dc:	bf04      	itt	eq
 101b6de:	2100      	moveq	r1, #0
 101b6e0:	4770      	bxeq	lr
 101b6e2:	b530      	push	{r4, r5, lr}
 101b6e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 101b6e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 101b6ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 101b6f0:	bf48      	it	mi
 101b6f2:	4240      	negmi	r0, r0
 101b6f4:	f04f 0100 	mov.w	r1, #0
 101b6f8:	e73e      	b.n	101b578 <__adddf3+0x138>
 101b6fa:	bf00      	nop

0101b6fc <__aeabi_f2d>:
 101b6fc:	0042      	lsls	r2, r0, #1
 101b6fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 101b702:	ea4f 0131 	mov.w	r1, r1, rrx
 101b706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 101b70a:	bf1f      	itttt	ne
 101b70c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 101b710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 101b714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 101b718:	4770      	bxne	lr
 101b71a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 101b71e:	bf08      	it	eq
 101b720:	4770      	bxeq	lr
 101b722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 101b726:	bf04      	itt	eq
 101b728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 101b72c:	4770      	bxeq	lr
 101b72e:	b530      	push	{r4, r5, lr}
 101b730:	f44f 7460 	mov.w	r4, #896	; 0x380
 101b734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 101b738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 101b73c:	e71c      	b.n	101b578 <__adddf3+0x138>
 101b73e:	bf00      	nop

0101b740 <__aeabi_ul2d>:
 101b740:	ea50 0201 	orrs.w	r2, r0, r1
 101b744:	bf08      	it	eq
 101b746:	4770      	bxeq	lr
 101b748:	b530      	push	{r4, r5, lr}
 101b74a:	f04f 0500 	mov.w	r5, #0
 101b74e:	e00a      	b.n	101b766 <__aeabi_l2d+0x16>

0101b750 <__aeabi_l2d>:
 101b750:	ea50 0201 	orrs.w	r2, r0, r1
 101b754:	bf08      	it	eq
 101b756:	4770      	bxeq	lr
 101b758:	b530      	push	{r4, r5, lr}
 101b75a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 101b75e:	d502      	bpl.n	101b766 <__aeabi_l2d+0x16>
 101b760:	4240      	negs	r0, r0
 101b762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 101b766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 101b76a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 101b76e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 101b772:	f43f aed8 	beq.w	101b526 <__adddf3+0xe6>
 101b776:	f04f 0203 	mov.w	r2, #3
 101b77a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 101b77e:	bf18      	it	ne
 101b780:	3203      	addne	r2, #3
 101b782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 101b786:	bf18      	it	ne
 101b788:	3203      	addne	r2, #3
 101b78a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 101b78e:	f1c2 0320 	rsb	r3, r2, #32
 101b792:	fa00 fc03 	lsl.w	ip, r0, r3
 101b796:	fa20 f002 	lsr.w	r0, r0, r2
 101b79a:	fa01 fe03 	lsl.w	lr, r1, r3
 101b79e:	ea40 000e 	orr.w	r0, r0, lr
 101b7a2:	fa21 f102 	lsr.w	r1, r1, r2
 101b7a6:	4414      	add	r4, r2
 101b7a8:	e6bd      	b.n	101b526 <__adddf3+0xe6>
 101b7aa:	bf00      	nop

0101b7ac <__aeabi_frsub>:
 101b7ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 101b7b0:	e002      	b.n	101b7b8 <__addsf3>
 101b7b2:	bf00      	nop

0101b7b4 <__aeabi_fsub>:
 101b7b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0101b7b8 <__addsf3>:
 101b7b8:	0042      	lsls	r2, r0, #1
 101b7ba:	bf1f      	itttt	ne
 101b7bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 101b7c0:	ea92 0f03 	teqne	r2, r3
 101b7c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 101b7c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 101b7cc:	d06a      	beq.n	101b8a4 <__addsf3+0xec>
 101b7ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 101b7d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 101b7d6:	bfc1      	itttt	gt
 101b7d8:	18d2      	addgt	r2, r2, r3
 101b7da:	4041      	eorgt	r1, r0
 101b7dc:	4048      	eorgt	r0, r1
 101b7de:	4041      	eorgt	r1, r0
 101b7e0:	bfb8      	it	lt
 101b7e2:	425b      	neglt	r3, r3
 101b7e4:	2b19      	cmp	r3, #25
 101b7e6:	bf88      	it	hi
 101b7e8:	4770      	bxhi	lr
 101b7ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 101b7ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 101b7f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 101b7f6:	bf18      	it	ne
 101b7f8:	4240      	negne	r0, r0
 101b7fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 101b7fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 101b802:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 101b806:	bf18      	it	ne
 101b808:	4249      	negne	r1, r1
 101b80a:	ea92 0f03 	teq	r2, r3
 101b80e:	d03f      	beq.n	101b890 <__addsf3+0xd8>
 101b810:	f1a2 0201 	sub.w	r2, r2, #1
 101b814:	fa41 fc03 	asr.w	ip, r1, r3
 101b818:	eb10 000c 	adds.w	r0, r0, ip
 101b81c:	f1c3 0320 	rsb	r3, r3, #32
 101b820:	fa01 f103 	lsl.w	r1, r1, r3
 101b824:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 101b828:	d502      	bpl.n	101b830 <__addsf3+0x78>
 101b82a:	4249      	negs	r1, r1
 101b82c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 101b830:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 101b834:	d313      	bcc.n	101b85e <__addsf3+0xa6>
 101b836:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 101b83a:	d306      	bcc.n	101b84a <__addsf3+0x92>
 101b83c:	0840      	lsrs	r0, r0, #1
 101b83e:	ea4f 0131 	mov.w	r1, r1, rrx
 101b842:	f102 0201 	add.w	r2, r2, #1
 101b846:	2afe      	cmp	r2, #254	; 0xfe
 101b848:	d251      	bcs.n	101b8ee <__addsf3+0x136>
 101b84a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 101b84e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 101b852:	bf08      	it	eq
 101b854:	f020 0001 	biceq.w	r0, r0, #1
 101b858:	ea40 0003 	orr.w	r0, r0, r3
 101b85c:	4770      	bx	lr
 101b85e:	0049      	lsls	r1, r1, #1
 101b860:	eb40 0000 	adc.w	r0, r0, r0
 101b864:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 101b868:	f1a2 0201 	sub.w	r2, r2, #1
 101b86c:	d1ed      	bne.n	101b84a <__addsf3+0x92>
 101b86e:	fab0 fc80 	clz	ip, r0
 101b872:	f1ac 0c08 	sub.w	ip, ip, #8
 101b876:	ebb2 020c 	subs.w	r2, r2, ip
 101b87a:	fa00 f00c 	lsl.w	r0, r0, ip
 101b87e:	bfaa      	itet	ge
 101b880:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 101b884:	4252      	neglt	r2, r2
 101b886:	4318      	orrge	r0, r3
 101b888:	bfbc      	itt	lt
 101b88a:	40d0      	lsrlt	r0, r2
 101b88c:	4318      	orrlt	r0, r3
 101b88e:	4770      	bx	lr
 101b890:	f092 0f00 	teq	r2, #0
 101b894:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 101b898:	bf06      	itte	eq
 101b89a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 101b89e:	3201      	addeq	r2, #1
 101b8a0:	3b01      	subne	r3, #1
 101b8a2:	e7b5      	b.n	101b810 <__addsf3+0x58>
 101b8a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 101b8a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 101b8ac:	bf18      	it	ne
 101b8ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 101b8b2:	d021      	beq.n	101b8f8 <__addsf3+0x140>
 101b8b4:	ea92 0f03 	teq	r2, r3
 101b8b8:	d004      	beq.n	101b8c4 <__addsf3+0x10c>
 101b8ba:	f092 0f00 	teq	r2, #0
 101b8be:	bf08      	it	eq
 101b8c0:	4608      	moveq	r0, r1
 101b8c2:	4770      	bx	lr
 101b8c4:	ea90 0f01 	teq	r0, r1
 101b8c8:	bf1c      	itt	ne
 101b8ca:	2000      	movne	r0, #0
 101b8cc:	4770      	bxne	lr
 101b8ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 101b8d2:	d104      	bne.n	101b8de <__addsf3+0x126>
 101b8d4:	0040      	lsls	r0, r0, #1
 101b8d6:	bf28      	it	cs
 101b8d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 101b8dc:	4770      	bx	lr
 101b8de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 101b8e2:	bf3c      	itt	cc
 101b8e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 101b8e8:	4770      	bxcc	lr
 101b8ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 101b8ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 101b8f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 101b8f6:	4770      	bx	lr
 101b8f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 101b8fc:	bf16      	itet	ne
 101b8fe:	4608      	movne	r0, r1
 101b900:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 101b904:	4601      	movne	r1, r0
 101b906:	0242      	lsls	r2, r0, #9
 101b908:	bf06      	itte	eq
 101b90a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 101b90e:	ea90 0f01 	teqeq	r0, r1
 101b912:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 101b916:	4770      	bx	lr

0101b918 <__aeabi_ui2f>:
 101b918:	f04f 0300 	mov.w	r3, #0
 101b91c:	e004      	b.n	101b928 <__aeabi_i2f+0x8>
 101b91e:	bf00      	nop

0101b920 <__aeabi_i2f>:
 101b920:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 101b924:	bf48      	it	mi
 101b926:	4240      	negmi	r0, r0
 101b928:	ea5f 0c00 	movs.w	ip, r0
 101b92c:	bf08      	it	eq
 101b92e:	4770      	bxeq	lr
 101b930:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 101b934:	4601      	mov	r1, r0
 101b936:	f04f 0000 	mov.w	r0, #0
 101b93a:	e01c      	b.n	101b976 <__aeabi_l2f+0x2a>

0101b93c <__aeabi_ul2f>:
 101b93c:	ea50 0201 	orrs.w	r2, r0, r1
 101b940:	bf08      	it	eq
 101b942:	4770      	bxeq	lr
 101b944:	f04f 0300 	mov.w	r3, #0
 101b948:	e00a      	b.n	101b960 <__aeabi_l2f+0x14>
 101b94a:	bf00      	nop

0101b94c <__aeabi_l2f>:
 101b94c:	ea50 0201 	orrs.w	r2, r0, r1
 101b950:	bf08      	it	eq
 101b952:	4770      	bxeq	lr
 101b954:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 101b958:	d502      	bpl.n	101b960 <__aeabi_l2f+0x14>
 101b95a:	4240      	negs	r0, r0
 101b95c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 101b960:	ea5f 0c01 	movs.w	ip, r1
 101b964:	bf02      	ittt	eq
 101b966:	4684      	moveq	ip, r0
 101b968:	4601      	moveq	r1, r0
 101b96a:	2000      	moveq	r0, #0
 101b96c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 101b970:	bf08      	it	eq
 101b972:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 101b976:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 101b97a:	fabc f28c 	clz	r2, ip
 101b97e:	3a08      	subs	r2, #8
 101b980:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 101b984:	db10      	blt.n	101b9a8 <__aeabi_l2f+0x5c>
 101b986:	fa01 fc02 	lsl.w	ip, r1, r2
 101b98a:	4463      	add	r3, ip
 101b98c:	fa00 fc02 	lsl.w	ip, r0, r2
 101b990:	f1c2 0220 	rsb	r2, r2, #32
 101b994:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 101b998:	fa20 f202 	lsr.w	r2, r0, r2
 101b99c:	eb43 0002 	adc.w	r0, r3, r2
 101b9a0:	bf08      	it	eq
 101b9a2:	f020 0001 	biceq.w	r0, r0, #1
 101b9a6:	4770      	bx	lr
 101b9a8:	f102 0220 	add.w	r2, r2, #32
 101b9ac:	fa01 fc02 	lsl.w	ip, r1, r2
 101b9b0:	f1c2 0220 	rsb	r2, r2, #32
 101b9b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 101b9b8:	fa21 f202 	lsr.w	r2, r1, r2
 101b9bc:	eb43 0002 	adc.w	r0, r3, r2
 101b9c0:	bf08      	it	eq
 101b9c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 101b9c6:	4770      	bx	lr

0101b9c8 <__aeabi_uldivmod>:
 101b9c8:	b953      	cbnz	r3, 101b9e0 <__aeabi_uldivmod+0x18>
 101b9ca:	b94a      	cbnz	r2, 101b9e0 <__aeabi_uldivmod+0x18>
 101b9cc:	2900      	cmp	r1, #0
 101b9ce:	bf08      	it	eq
 101b9d0:	2800      	cmpeq	r0, #0
 101b9d2:	bf1c      	itt	ne
 101b9d4:	f04f 31ff 	movne.w	r1, #4294967295
 101b9d8:	f04f 30ff 	movne.w	r0, #4294967295
 101b9dc:	f7ff bd28 	b.w	101b430 <__aeabi_idiv0>
 101b9e0:	f1ad 0c08 	sub.w	ip, sp, #8
 101b9e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 101b9e8:	f000 f85a 	bl	101baa0 <__udivmoddi4>
 101b9ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 101b9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101b9f4:	b004      	add	sp, #16
 101b9f6:	4770      	bx	lr

0101b9f8 <__popcountsi2>:
 101b9f8:	0843      	lsrs	r3, r0, #1
 101b9fa:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 101b9fe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 101ba02:	1ac0      	subs	r0, r0, r3
 101ba04:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 101ba08:	0880      	lsrs	r0, r0, #2
 101ba0a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 101ba0e:	4418      	add	r0, r3
 101ba10:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 101ba14:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 101ba18:	fb02 f000 	mul.w	r0, r2, r0
 101ba1c:	0e00      	lsrs	r0, r0, #24
 101ba1e:	4770      	bx	lr

0101ba20 <__aeabi_f2ulz>:
 101ba20:	ee07 0a90 	vmov	s15, r0
 101ba24:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 101ba50 <__aeabi_f2ulz+0x30>
 101ba28:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 101ba2c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 101ba58 <__aeabi_f2ulz+0x38>
 101ba30:	ee26 7b07 	vmul.f64	d7, d6, d7
 101ba34:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 101ba38:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 101ba3c:	ee17 1a10 	vmov	r1, s14
 101ba40:	ee04 6b45 	vmls.f64	d6, d4, d5
 101ba44:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 101ba48:	ee17 0a90 	vmov	r0, s15
 101ba4c:	4770      	bx	lr
 101ba4e:	bf00      	nop
 101ba50:	00000000 	.word	0x00000000
 101ba54:	41f00000 	.word	0x41f00000
 101ba58:	00000000 	.word	0x00000000
 101ba5c:	3df00000 	.word	0x3df00000

0101ba60 <__aeabi_d2ulz>:
 101ba60:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 101ba90 <__aeabi_d2ulz+0x30>
 101ba64:	ec41 0b16 	vmov	d6, r0, r1
 101ba68:	ee26 7b07 	vmul.f64	d7, d6, d7
 101ba6c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 101ba98 <__aeabi_d2ulz+0x38>
 101ba70:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 101ba74:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 101ba78:	ee17 1a10 	vmov	r1, s14
 101ba7c:	ee04 6b45 	vmls.f64	d6, d4, d5
 101ba80:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 101ba84:	ee17 0a90 	vmov	r0, s15
 101ba88:	4770      	bx	lr
 101ba8a:	bf00      	nop
 101ba8c:	f3af 8000 	nop.w
 101ba90:	00000000 	.word	0x00000000
 101ba94:	3df00000 	.word	0x3df00000
 101ba98:	00000000 	.word	0x00000000
 101ba9c:	41f00000 	.word	0x41f00000

0101baa0 <__udivmoddi4>:
 101baa0:	4299      	cmp	r1, r3
 101baa2:	bf08      	it	eq
 101baa4:	4290      	cmpeq	r0, r2
 101baa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101baaa:	4604      	mov	r4, r0
 101baac:	bf38      	it	cc
 101baae:	2000      	movcc	r0, #0
 101bab0:	460d      	mov	r5, r1
 101bab2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 101bab4:	bf38      	it	cc
 101bab6:	4601      	movcc	r1, r0
 101bab8:	d36c      	bcc.n	101bb94 <__udivmoddi4+0xf4>
 101baba:	4690      	mov	r8, r2
 101babc:	4699      	mov	r9, r3
 101babe:	fab3 f683 	clz	r6, r3
 101bac2:	2b00      	cmp	r3, #0
 101bac4:	d06f      	beq.n	101bba6 <__udivmoddi4+0x106>
 101bac6:	fab5 f185 	clz	r1, r5
 101baca:	2d00      	cmp	r5, #0
 101bacc:	d067      	beq.n	101bb9e <__udivmoddi4+0xfe>
 101bace:	1a76      	subs	r6, r6, r1
 101bad0:	f1a6 0c20 	sub.w	ip, r6, #32
 101bad4:	fa09 fb06 	lsl.w	fp, r9, r6
 101bad8:	fa08 f30c 	lsl.w	r3, r8, ip
 101badc:	f1c6 0e20 	rsb	lr, r6, #32
 101bae0:	ea4b 0b03 	orr.w	fp, fp, r3
 101bae4:	fa28 f30e 	lsr.w	r3, r8, lr
 101bae8:	ea4b 0b03 	orr.w	fp, fp, r3
 101baec:	fa08 fa06 	lsl.w	sl, r8, r6
 101baf0:	455d      	cmp	r5, fp
 101baf2:	bf08      	it	eq
 101baf4:	4554      	cmpeq	r4, sl
 101baf6:	bf3c      	itt	cc
 101baf8:	2000      	movcc	r0, #0
 101bafa:	4601      	movcc	r1, r0
 101bafc:	d30a      	bcc.n	101bb14 <__udivmoddi4+0x74>
 101bafe:	2001      	movs	r0, #1
 101bb00:	ebb4 040a 	subs.w	r4, r4, sl
 101bb04:	fa00 f10c 	lsl.w	r1, r0, ip
 101bb08:	fa20 f30e 	lsr.w	r3, r0, lr
 101bb0c:	eb65 050b 	sbc.w	r5, r5, fp
 101bb10:	4319      	orrs	r1, r3
 101bb12:	40b0      	lsls	r0, r6
 101bb14:	2e00      	cmp	r6, #0
 101bb16:	d03d      	beq.n	101bb94 <__udivmoddi4+0xf4>
 101bb18:	ea4f 085a 	mov.w	r8, sl, lsr #1
 101bb1c:	4632      	mov	r2, r6
 101bb1e:	ea48 78cb 	orr.w	r8, r8, fp, lsl #31
 101bb22:	ea4f 095b 	mov.w	r9, fp, lsr #1
 101bb26:	e00b      	b.n	101bb40 <__udivmoddi4+0xa0>
 101bb28:	ebb4 0308 	subs.w	r3, r4, r8
 101bb2c:	eb65 0a09 	sbc.w	sl, r5, r9
 101bb30:	18db      	adds	r3, r3, r3
 101bb32:	eb4a 0a0a 	adc.w	sl, sl, sl
 101bb36:	1c5c      	adds	r4, r3, #1
 101bb38:	f14a 0500 	adc.w	r5, sl, #0
 101bb3c:	3a01      	subs	r2, #1
 101bb3e:	d007      	beq.n	101bb50 <__udivmoddi4+0xb0>
 101bb40:	454d      	cmp	r5, r9
 101bb42:	bf08      	it	eq
 101bb44:	4544      	cmpeq	r4, r8
 101bb46:	d2ef      	bcs.n	101bb28 <__udivmoddi4+0x88>
 101bb48:	1924      	adds	r4, r4, r4
 101bb4a:	416d      	adcs	r5, r5
 101bb4c:	3a01      	subs	r2, #1
 101bb4e:	d1f7      	bne.n	101bb40 <__udivmoddi4+0xa0>
 101bb50:	fa05 fe0e 	lsl.w	lr, r5, lr
 101bb54:	fa24 f306 	lsr.w	r3, r4, r6
 101bb58:	fa25 fc0c 	lsr.w	ip, r5, ip
 101bb5c:	ea43 030e 	orr.w	r3, r3, lr
 101bb60:	1900      	adds	r0, r0, r4
 101bb62:	fa25 fe06 	lsr.w	lr, r5, r6
 101bb66:	ea43 040c 	orr.w	r4, r3, ip
 101bb6a:	f1a6 0c20 	sub.w	ip, r6, #32
 101bb6e:	f1c6 0220 	rsb	r2, r6, #32
 101bb72:	fa0e f306 	lsl.w	r3, lr, r6
 101bb76:	fa04 fc0c 	lsl.w	ip, r4, ip
 101bb7a:	fa04 f606 	lsl.w	r6, r4, r6
 101bb7e:	ea43 030c 	orr.w	r3, r3, ip
 101bb82:	fa24 f202 	lsr.w	r2, r4, r2
 101bb86:	eb45 0101 	adc.w	r1, r5, r1
 101bb8a:	4313      	orrs	r3, r2
 101bb8c:	1b80      	subs	r0, r0, r6
 101bb8e:	4675      	mov	r5, lr
 101bb90:	eb61 0103 	sbc.w	r1, r1, r3
 101bb94:	b10f      	cbz	r7, 101bb9a <__udivmoddi4+0xfa>
 101bb96:	e9c7 4500 	strd	r4, r5, [r7]
 101bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101bb9e:	fab4 f184 	clz	r1, r4
 101bba2:	3120      	adds	r1, #32
 101bba4:	e793      	b.n	101bace <__udivmoddi4+0x2e>
 101bba6:	fab2 f682 	clz	r6, r2
 101bbaa:	fab5 f185 	clz	r1, r5
 101bbae:	3620      	adds	r6, #32
 101bbb0:	2d00      	cmp	r5, #0
 101bbb2:	d18c      	bne.n	101bace <__udivmoddi4+0x2e>
 101bbb4:	e7f3      	b.n	101bb9e <__udivmoddi4+0xfe>
 101bbb6:	bf00      	nop

0101bbb8 <calloc>:
 101bbb8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101bbbc:	f2c0 1306 	movt	r3, #262	; 0x106
 101bbc0:	460a      	mov	r2, r1
 101bbc2:	4601      	mov	r1, r0
 101bbc4:	6818      	ldr	r0, [r3, #0]
 101bbc6:	f000 b801 	b.w	101bbcc <_calloc_r>
 101bbca:	bf00      	nop

0101bbcc <_calloc_r>:
 101bbcc:	b510      	push	{r4, lr}
 101bbce:	fb02 f101 	mul.w	r1, r2, r1
 101bbd2:	f000 fe01 	bl	101c7d8 <_malloc_r>
 101bbd6:	4604      	mov	r4, r0
 101bbd8:	b170      	cbz	r0, 101bbf8 <_calloc_r+0x2c>
 101bbda:	f850 2c04 	ldr.w	r2, [r0, #-4]
 101bbde:	f022 0203 	bic.w	r2, r2, #3
 101bbe2:	3a04      	subs	r2, #4
 101bbe4:	2a24      	cmp	r2, #36	; 0x24
 101bbe6:	d81d      	bhi.n	101bc24 <_calloc_r+0x58>
 101bbe8:	2a13      	cmp	r2, #19
 101bbea:	bf98      	it	ls
 101bbec:	4602      	movls	r2, r0
 101bbee:	d805      	bhi.n	101bbfc <_calloc_r+0x30>
 101bbf0:	2300      	movs	r3, #0
 101bbf2:	e9c2 3300 	strd	r3, r3, [r2]
 101bbf6:	6093      	str	r3, [r2, #8]
 101bbf8:	4620      	mov	r0, r4
 101bbfa:	bd10      	pop	{r4, pc}
 101bbfc:	2a1b      	cmp	r2, #27
 101bbfe:	f04f 0300 	mov.w	r3, #0
 101bc02:	bf98      	it	ls
 101bc04:	f100 0208 	addls.w	r2, r0, #8
 101bc08:	e9c0 3300 	strd	r3, r3, [r0]
 101bc0c:	d9f0      	bls.n	101bbf0 <_calloc_r+0x24>
 101bc0e:	2a24      	cmp	r2, #36	; 0x24
 101bc10:	e9c0 3302 	strd	r3, r3, [r0, #8]
 101bc14:	bf11      	iteee	ne
 101bc16:	f100 0210 	addne.w	r2, r0, #16
 101bc1a:	6103      	streq	r3, [r0, #16]
 101bc1c:	f100 0218 	addeq.w	r2, r0, #24
 101bc20:	6143      	streq	r3, [r0, #20]
 101bc22:	e7e5      	b.n	101bbf0 <_calloc_r+0x24>
 101bc24:	2100      	movs	r1, #0
 101bc26:	f001 fe43 	bl	101d8b0 <memset>
 101bc2a:	4620      	mov	r0, r4
 101bc2c:	bd10      	pop	{r4, pc}
 101bc2e:	bf00      	nop

0101bc30 <exit>:
 101bc30:	b508      	push	{r3, lr}
 101bc32:	2100      	movs	r1, #0
 101bc34:	4604      	mov	r4, r0
 101bc36:	f006 fd4f 	bl	10226d8 <__call_exitprocs>
 101bc3a:	f647 4324 	movw	r3, #31780	; 0x7c24
 101bc3e:	f2c0 1306 	movt	r3, #262	; 0x106
 101bc42:	6818      	ldr	r0, [r3, #0]
 101bc44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 101bc46:	b103      	cbz	r3, 101bc4a <exit+0x1a>
 101bc48:	4798      	blx	r3
 101bc4a:	4620      	mov	r0, r4
 101bc4c:	f00b edc0 	blx	10277d0 <_exit>

0101bc50 <__libc_fini_array>:
 101bc50:	b538      	push	{r3, r4, r5, lr}
 101bc52:	f244 0410 	movw	r4, #16400	; 0x4010
 101bc56:	f244 050c 	movw	r5, #16396	; 0x400c
 101bc5a:	f2c0 1407 	movt	r4, #263	; 0x107
 101bc5e:	f2c0 1507 	movt	r5, #263	; 0x107
 101bc62:	1b64      	subs	r4, r4, r5
 101bc64:	10a4      	asrs	r4, r4, #2
 101bc66:	d007      	beq.n	101bc78 <__libc_fini_array+0x28>
 101bc68:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 101bc6c:	3c01      	subs	r4, #1
 101bc6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 101bc72:	4798      	blx	r3
 101bc74:	2c00      	cmp	r4, #0
 101bc76:	d1f9      	bne.n	101bc6c <__libc_fini_array+0x1c>
 101bc78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 101bc7c:	f00b bde6 	b.w	102784c <_fini>

0101bc80 <__libc_init_array>:
 101bc80:	b570      	push	{r4, r5, r6, lr}
 101bc82:	f244 0608 	movw	r6, #16392	; 0x4008
 101bc86:	f244 0508 	movw	r5, #16392	; 0x4008
 101bc8a:	f2c0 1607 	movt	r6, #263	; 0x107
 101bc8e:	f2c0 1507 	movt	r5, #263	; 0x107
 101bc92:	1b76      	subs	r6, r6, r5
 101bc94:	10b6      	asrs	r6, r6, #2
 101bc96:	d006      	beq.n	101bca6 <__libc_init_array+0x26>
 101bc98:	2400      	movs	r4, #0
 101bc9a:	3401      	adds	r4, #1
 101bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 101bca0:	4798      	blx	r3
 101bca2:	42a6      	cmp	r6, r4
 101bca4:	d1f9      	bne.n	101bc9a <__libc_init_array+0x1a>
 101bca6:	f244 060c 	movw	r6, #16396	; 0x400c
 101bcaa:	f244 0508 	movw	r5, #16392	; 0x4008
 101bcae:	f2c0 1607 	movt	r6, #263	; 0x107
 101bcb2:	f2c0 1507 	movt	r5, #263	; 0x107
 101bcb6:	1b76      	subs	r6, r6, r5
 101bcb8:	f00b fdc2 	bl	1027840 <_init>
 101bcbc:	10b6      	asrs	r6, r6, #2
 101bcbe:	d006      	beq.n	101bcce <__libc_init_array+0x4e>
 101bcc0:	2400      	movs	r4, #0
 101bcc2:	3401      	adds	r4, #1
 101bcc4:	f855 3b04 	ldr.w	r3, [r5], #4
 101bcc8:	4798      	blx	r3
 101bcca:	42a6      	cmp	r6, r4
 101bccc:	d1f9      	bne.n	101bcc2 <__libc_init_array+0x42>
 101bcce:	bd70      	pop	{r4, r5, r6, pc}

0101bcd0 <currentlocale>:
 101bcd0:	4919      	ldr	r1, [pc, #100]	; (101bd38 <currentlocale+0x68>)
 101bcd2:	f244 0050 	movw	r0, #16464	; 0x4050
 101bcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 101bcd8:	f2c0 1007 	movt	r0, #263	; 0x107
 101bcdc:	f101 0520 	add.w	r5, r1, #32
 101bce0:	f002 fc7c 	bl	101e5dc <strcpy>
 101bce4:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 101bce8:	f1a5 0720 	sub.w	r7, r5, #32
 101bcec:	462c      	mov	r4, r5
 101bcee:	4621      	mov	r1, r4
 101bcf0:	4638      	mov	r0, r7
 101bcf2:	f002 fb09 	bl	101e308 <strcmp>
 101bcf6:	3420      	adds	r4, #32
 101bcf8:	b930      	cbnz	r0, 101bd08 <currentlocale+0x38>
 101bcfa:	42b4      	cmp	r4, r6
 101bcfc:	d1f7      	bne.n	101bcee <currentlocale+0x1e>
 101bcfe:	f244 0050 	movw	r0, #16464	; 0x4050
 101bd02:	f2c0 1007 	movt	r0, #263	; 0x107
 101bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101bd08:	f24c 071c 	movw	r7, #49180	; 0xc01c
 101bd0c:	f244 0450 	movw	r4, #16464	; 0x4050
 101bd10:	f2c0 1706 	movt	r7, #262	; 0x106
 101bd14:	f2c0 1407 	movt	r4, #263	; 0x107
 101bd18:	4639      	mov	r1, r7
 101bd1a:	4620      	mov	r0, r4
 101bd1c:	f002 fa5a 	bl	101e1d4 <strcat>
 101bd20:	4629      	mov	r1, r5
 101bd22:	4620      	mov	r0, r4
 101bd24:	3520      	adds	r5, #32
 101bd26:	f002 fa55 	bl	101e1d4 <strcat>
 101bd2a:	42b5      	cmp	r5, r6
 101bd2c:	d1f4      	bne.n	101bd18 <currentlocale+0x48>
 101bd2e:	f244 0050 	movw	r0, #16464	; 0x4050
 101bd32:	f2c0 1007 	movt	r0, #263	; 0x107
 101bd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101bd38:	0106cb08 	.word	0x0106cb08

0101bd3c <__loadlocale>:
 101bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101bd40:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 101bd44:	b08d      	sub	sp, #52	; 0x34
 101bd46:	460f      	mov	r7, r1
 101bd48:	4606      	mov	r6, r0
 101bd4a:	4629      	mov	r1, r5
 101bd4c:	4610      	mov	r0, r2
 101bd4e:	4614      	mov	r4, r2
 101bd50:	f002 fada 	bl	101e308 <strcmp>
 101bd54:	b918      	cbnz	r0, 101bd5e <__loadlocale+0x22>
 101bd56:	4628      	mov	r0, r5
 101bd58:	b00d      	add	sp, #52	; 0x34
 101bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101bd5e:	f24c 0120 	movw	r1, #49184	; 0xc020
 101bd62:	4620      	mov	r0, r4
 101bd64:	f2c0 1106 	movt	r1, #262	; 0x106
 101bd68:	f002 face 	bl	101e308 <strcmp>
 101bd6c:	2800      	cmp	r0, #0
 101bd6e:	f000 809f 	beq.w	101beb0 <__loadlocale+0x174>
 101bd72:	f24c 0128 	movw	r1, #49192	; 0xc028
 101bd76:	4620      	mov	r0, r4
 101bd78:	f2c0 1106 	movt	r1, #262	; 0x106
 101bd7c:	f002 fac4 	bl	101e308 <strcmp>
 101bd80:	4680      	mov	r8, r0
 101bd82:	2800      	cmp	r0, #0
 101bd84:	f000 808a 	beq.w	101be9c <__loadlocale+0x160>
 101bd88:	7823      	ldrb	r3, [r4, #0]
 101bd8a:	2b43      	cmp	r3, #67	; 0x43
 101bd8c:	f000 8098 	beq.w	101bec0 <__loadlocale+0x184>
 101bd90:	3b61      	subs	r3, #97	; 0x61
 101bd92:	2b19      	cmp	r3, #25
 101bd94:	d87d      	bhi.n	101be92 <__loadlocale+0x156>
 101bd96:	7863      	ldrb	r3, [r4, #1]
 101bd98:	3b61      	subs	r3, #97	; 0x61
 101bd9a:	2b19      	cmp	r3, #25
 101bd9c:	d879      	bhi.n	101be92 <__loadlocale+0x156>
 101bd9e:	78a3      	ldrb	r3, [r4, #2]
 101bda0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 101bda4:	2a19      	cmp	r2, #25
 101bda6:	bf8e      	itee	hi
 101bda8:	f104 0802 	addhi.w	r8, r4, #2
 101bdac:	f104 0803 	addls.w	r8, r4, #3
 101bdb0:	78e3      	ldrbls	r3, [r4, #3]
 101bdb2:	2b5f      	cmp	r3, #95	; 0x5f
 101bdb4:	f000 80a0 	beq.w	101bef8 <__loadlocale+0x1bc>
 101bdb8:	2b2e      	cmp	r3, #46	; 0x2e
 101bdba:	f000 827c 	beq.w	101c2b6 <__loadlocale+0x57a>
 101bdbe:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 101bdc2:	d166      	bne.n	101be92 <__loadlocale+0x156>
 101bdc4:	f10d 0910 	add.w	r9, sp, #16
 101bdc8:	f24c 0134 	movw	r1, #49204	; 0xc034
 101bdcc:	f2c0 1106 	movt	r1, #262	; 0x106
 101bdd0:	4648      	mov	r0, r9
 101bdd2:	f002 fc03 	bl	101e5dc <strcpy>
 101bdd6:	f898 3000 	ldrb.w	r3, [r8]
 101bdda:	2b40      	cmp	r3, #64	; 0x40
 101bddc:	f000 828a 	beq.w	101c2f4 <__loadlocale+0x5b8>
 101bde0:	f04f 0800 	mov.w	r8, #0
 101bde4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 101bde8:	3b41      	subs	r3, #65	; 0x41
 101bdea:	2b34      	cmp	r3, #52	; 0x34
 101bdec:	d851      	bhi.n	101be92 <__loadlocale+0x156>
 101bdee:	e8df f013 	tbh	[pc, r3, lsl #1]
 101bdf2:	019c      	.short	0x019c
 101bdf4:	016f0050 	.word	0x016f0050
 101bdf8:	01d10050 	.word	0x01d10050
 101bdfc:	01ae0050 	.word	0x01ae0050
 101be00:	01fd0050 	.word	0x01fd0050
 101be04:	01330154 	.word	0x01330154
 101be08:	00500050 	.word	0x00500050
 101be0c:	00500050 	.word	0x00500050
 101be10:	00500121 	.word	0x00500121
 101be14:	01060050 	.word	0x01060050
 101be18:	009200c6 	.word	0x009200c6
 101be1c:	00500050 	.word	0x00500050
 101be20:	00500050 	.word	0x00500050
 101be24:	00500050 	.word	0x00500050
 101be28:	00500050 	.word	0x00500050
 101be2c:	00500050 	.word	0x00500050
 101be30:	019c0050 	.word	0x019c0050
 101be34:	016f0050 	.word	0x016f0050
 101be38:	01d10050 	.word	0x01d10050
 101be3c:	01ae0050 	.word	0x01ae0050
 101be40:	01fd0050 	.word	0x01fd0050
 101be44:	01330154 	.word	0x01330154
 101be48:	00500050 	.word	0x00500050
 101be4c:	00500050 	.word	0x00500050
 101be50:	00500121 	.word	0x00500121
 101be54:	01060050 	.word	0x01060050
 101be58:	009200c6 	.word	0x009200c6
 101be5c:	f5b0 7f56 	cmp.w	r0, #856	; 0x358
 101be60:	f300 80af 	bgt.w	101bfc2 <__loadlocale+0x286>
 101be64:	f240 3307 	movw	r3, #775	; 0x307
 101be68:	4298      	cmp	r0, r3
 101be6a:	f000 80aa 	beq.w	101bfc2 <__loadlocale+0x286>
 101be6e:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
 101be72:	f280 826a 	bge.w	101c34a <__loadlocale+0x60e>
 101be76:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 101be7a:	f000 80a2 	beq.w	101bfc2 <__loadlocale+0x286>
 101be7e:	f240 23e1 	movw	r3, #737	; 0x2e1
 101be82:	4298      	cmp	r0, r3
 101be84:	f000 809d 	beq.w	101bfc2 <__loadlocale+0x286>
 101be88:	f240 13b5 	movw	r3, #437	; 0x1b5
 101be8c:	4298      	cmp	r0, r3
 101be8e:	f000 8098 	beq.w	101bfc2 <__loadlocale+0x286>
 101be92:	2500      	movs	r5, #0
 101be94:	4628      	mov	r0, r5
 101be96:	b00d      	add	sp, #52	; 0x34
 101be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101be9c:	f10d 0910 	add.w	r9, sp, #16
 101bea0:	f24c 012c 	movw	r1, #49196	; 0xc02c
 101bea4:	f2c0 1106 	movt	r1, #262	; 0x106
 101bea8:	4648      	mov	r0, r9
 101beaa:	f002 fb97 	bl	101e5dc <strcpy>
 101beae:	e799      	b.n	101bde4 <__loadlocale+0xa8>
 101beb0:	f24c 0128 	movw	r1, #49192	; 0xc028
 101beb4:	4620      	mov	r0, r4
 101beb6:	f2c0 1106 	movt	r1, #262	; 0x106
 101beba:	f002 fb8f 	bl	101e5dc <strcpy>
 101bebe:	e758      	b.n	101bd72 <__loadlocale+0x36>
 101bec0:	7863      	ldrb	r3, [r4, #1]
 101bec2:	3b2d      	subs	r3, #45	; 0x2d
 101bec4:	2b01      	cmp	r3, #1
 101bec6:	d8e4      	bhi.n	101be92 <__loadlocale+0x156>
 101bec8:	f104 0802 	add.w	r8, r4, #2
 101becc:	f10d 0910 	add.w	r9, sp, #16
 101bed0:	4641      	mov	r1, r8
 101bed2:	4648      	mov	r0, r9
 101bed4:	f002 fb82 	bl	101e5dc <strcpy>
 101bed8:	4648      	mov	r0, r9
 101beda:	2140      	movs	r1, #64	; 0x40
 101bedc:	f002 f99a 	bl	101e214 <strchr>
 101bee0:	b108      	cbz	r0, 101bee6 <__loadlocale+0x1aa>
 101bee2:	2300      	movs	r3, #0
 101bee4:	7003      	strb	r3, [r0, #0]
 101bee6:	4648      	mov	r0, r9
 101bee8:	f002 fc0a 	bl	101e700 <strlen>
 101beec:	4480      	add	r8, r0
 101beee:	f1b8 0f00 	cmp.w	r8, #0
 101bef2:	f43f af75 	beq.w	101bde0 <__loadlocale+0xa4>
 101bef6:	e76e      	b.n	101bdd6 <__loadlocale+0x9a>
 101bef8:	f898 3001 	ldrb.w	r3, [r8, #1]
 101befc:	3b41      	subs	r3, #65	; 0x41
 101befe:	2b19      	cmp	r3, #25
 101bf00:	d8c7      	bhi.n	101be92 <__loadlocale+0x156>
 101bf02:	f898 3002 	ldrb.w	r3, [r8, #2]
 101bf06:	3b41      	subs	r3, #65	; 0x41
 101bf08:	2b19      	cmp	r3, #25
 101bf0a:	d8c2      	bhi.n	101be92 <__loadlocale+0x156>
 101bf0c:	f898 3003 	ldrb.w	r3, [r8, #3]
 101bf10:	f108 0803 	add.w	r8, r8, #3
 101bf14:	e750      	b.n	101bdb8 <__loadlocale+0x7c>
 101bf16:	f24c 014c 	movw	r1, #49228	; 0xc04c
 101bf1a:	4648      	mov	r0, r9
 101bf1c:	f2c0 1106 	movt	r1, #262	; 0x106
 101bf20:	f002 f936 	bl	101e190 <strcasecmp>
 101bf24:	b140      	cbz	r0, 101bf38 <__loadlocale+0x1fc>
 101bf26:	f24c 0154 	movw	r1, #49236	; 0xc054
 101bf2a:	4648      	mov	r0, r9
 101bf2c:	f2c0 1106 	movt	r1, #262	; 0x106
 101bf30:	f002 f92e 	bl	101e190 <strcasecmp>
 101bf34:	2800      	cmp	r0, #0
 101bf36:	d1ac      	bne.n	101be92 <__loadlocale+0x156>
 101bf38:	f24c 014c 	movw	r1, #49228	; 0xc04c
 101bf3c:	4648      	mov	r0, r9
 101bf3e:	f2c0 1106 	movt	r1, #262	; 0x106
 101bf42:	f64c 5a89 	movw	sl, #52617	; 0xcd89
 101bf46:	f242 4b25 	movw	fp, #9253	; 0x2425
 101bf4a:	f2c0 1a01 	movt	sl, #257	; 0x101
 101bf4e:	f2c0 1b02 	movt	fp, #258	; 0x102
 101bf52:	f002 fb43 	bl	101e5dc <strcpy>
 101bf56:	2306      	movs	r3, #6
 101bf58:	2f02      	cmp	r7, #2
 101bf5a:	f000 81af 	beq.w	101c2bc <__loadlocale+0x580>
 101bf5e:	2f06      	cmp	r7, #6
 101bf60:	d104      	bne.n	101bf6c <__loadlocale+0x230>
 101bf62:	4649      	mov	r1, r9
 101bf64:	f506 70a5 	add.w	r0, r6, #330	; 0x14a
 101bf68:	f002 fb38 	bl	101e5dc <strcpy>
 101bf6c:	4621      	mov	r1, r4
 101bf6e:	4628      	mov	r0, r5
 101bf70:	f002 fb34 	bl	101e5dc <strcpy>
 101bf74:	4605      	mov	r5, r0
 101bf76:	4628      	mov	r0, r5
 101bf78:	b00d      	add	sp, #52	; 0x34
 101bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101bf7e:	f24c 01d4 	movw	r1, #49364	; 0xc0d4
 101bf82:	2203      	movs	r2, #3
 101bf84:	f2c0 1106 	movt	r1, #262	; 0x106
 101bf88:	4648      	mov	r0, r9
 101bf8a:	f002 fc27 	bl	101e7dc <strncasecmp>
 101bf8e:	2800      	cmp	r0, #0
 101bf90:	f47f af7f 	bne.w	101be92 <__loadlocale+0x156>
 101bf94:	f89d 3013 	ldrb.w	r3, [sp, #19]
 101bf98:	f24c 01d8 	movw	r1, #49368	; 0xc0d8
 101bf9c:	f2c0 1106 	movt	r1, #262	; 0x106
 101bfa0:	2b2d      	cmp	r3, #45	; 0x2d
 101bfa2:	bf0c      	ite	eq
 101bfa4:	a805      	addeq	r0, sp, #20
 101bfa6:	f10d 0013 	addne.w	r0, sp, #19
 101bfaa:	f002 f8f1 	bl	101e190 <strcasecmp>
 101bfae:	2800      	cmp	r0, #0
 101bfb0:	f47f af6f 	bne.w	101be92 <__loadlocale+0x156>
 101bfb4:	f24c 01dc 	movw	r1, #49372	; 0xc0dc
 101bfb8:	4648      	mov	r0, r9
 101bfba:	f2c0 1106 	movt	r1, #262	; 0x106
 101bfbe:	f002 fb0d 	bl	101e5dc <strcpy>
 101bfc2:	2f02      	cmp	r7, #2
 101bfc4:	d1cb      	bne.n	101bf5e <__loadlocale+0x222>
 101bfc6:	4649      	mov	r1, r9
 101bfc8:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 101bfcc:	f002 fb06 	bl	101e5dc <strcpy>
 101bfd0:	4630      	mov	r0, r6
 101bfd2:	4649      	mov	r1, r9
 101bfd4:	f242 420d 	movw	r2, #9229	; 0x240d
 101bfd8:	f64c 5365 	movw	r3, #52581	; 0xcd65
 101bfdc:	f2c0 1202 	movt	r2, #258	; 0x102
 101bfe0:	f2c0 1301 	movt	r3, #257	; 0x101
 101bfe4:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 101bfe8:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 101bfec:	2201      	movs	r2, #1
 101bfee:	f886 2128 	strb.w	r2, [r6, #296]	; 0x128
 101bff2:	f006 fbdf 	bl	10227b4 <__set_ctype>
 101bff6:	2000      	movs	r0, #0
 101bff8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
 101bffc:	e7b6      	b.n	101bf6c <__loadlocale+0x230>
 101bffe:	f24c 0170 	movw	r1, #49264	; 0xc070
 101c002:	4648      	mov	r0, r9
 101c004:	f2c0 1106 	movt	r1, #262	; 0x106
 101c008:	f002 f8c2 	bl	101e190 <strcasecmp>
 101c00c:	2800      	cmp	r0, #0
 101c00e:	f47f af40 	bne.w	101be92 <__loadlocale+0x156>
 101c012:	f24c 0170 	movw	r1, #49264	; 0xc070
 101c016:	4648      	mov	r0, r9
 101c018:	f2c0 1106 	movt	r1, #262	; 0x106
 101c01c:	f64c 7a91 	movw	sl, #53137	; 0xcf91
 101c020:	f002 fadc 	bl	101e5dc <strcpy>
 101c024:	f242 4bc9 	movw	fp, #9417	; 0x24c9
 101c028:	f2c0 1a01 	movt	sl, #257	; 0x101
 101c02c:	2302      	movs	r3, #2
 101c02e:	f2c0 1b02 	movt	fp, #258	; 0x102
 101c032:	e791      	b.n	101bf58 <__loadlocale+0x21c>
 101c034:	f24c 01c4 	movw	r1, #49348	; 0xc0c4
 101c038:	4648      	mov	r0, r9
 101c03a:	f2c0 1106 	movt	r1, #262	; 0x106
 101c03e:	f002 f8a7 	bl	101e190 <strcasecmp>
 101c042:	2800      	cmp	r0, #0
 101c044:	f47f af25 	bne.w	101be92 <__loadlocale+0x156>
 101c048:	f24c 01cc 	movw	r1, #49356	; 0xc0cc
 101c04c:	4648      	mov	r0, r9
 101c04e:	f2c0 1106 	movt	r1, #262	; 0x106
 101c052:	f002 fac3 	bl	101e5dc <strcpy>
 101c056:	e7b4      	b.n	101bfc2 <__loadlocale+0x286>
 101c058:	f24c 0194 	movw	r1, #49300	; 0xc094
 101c05c:	2204      	movs	r2, #4
 101c05e:	f2c0 1106 	movt	r1, #262	; 0x106
 101c062:	4648      	mov	r0, r9
 101c064:	f002 fbba 	bl	101e7dc <strncasecmp>
 101c068:	2800      	cmp	r0, #0
 101c06a:	f47f af12 	bne.w	101be92 <__loadlocale+0x156>
 101c06e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 101c072:	2b2d      	cmp	r3, #45	; 0x2d
 101c074:	bf08      	it	eq
 101c076:	f89d 3015 	ldrbeq.w	r3, [sp, #21]
 101c07a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 101c07e:	2b52      	cmp	r3, #82	; 0x52
 101c080:	f000 8172 	beq.w	101c368 <__loadlocale+0x62c>
 101c084:	2b55      	cmp	r3, #85	; 0x55
 101c086:	f47f af04 	bne.w	101be92 <__loadlocale+0x156>
 101c08a:	f24c 01a4 	movw	r1, #49316	; 0xc0a4
 101c08e:	4648      	mov	r0, r9
 101c090:	f2c0 1106 	movt	r1, #262	; 0x106
 101c094:	f002 faa2 	bl	101e5dc <strcpy>
 101c098:	e793      	b.n	101bfc2 <__loadlocale+0x286>
 101c09a:	f24c 015c 	movw	r1, #49244	; 0xc05c
 101c09e:	4648      	mov	r0, r9
 101c0a0:	f2c0 1106 	movt	r1, #262	; 0x106
 101c0a4:	f002 f874 	bl	101e190 <strcasecmp>
 101c0a8:	2800      	cmp	r0, #0
 101c0aa:	f47f aef2 	bne.w	101be92 <__loadlocale+0x156>
 101c0ae:	f24c 015c 	movw	r1, #49244	; 0xc05c
 101c0b2:	4648      	mov	r0, r9
 101c0b4:	f2c0 1106 	movt	r1, #262	; 0x106
 101c0b8:	f24d 0acd 	movw	sl, #53453	; 0xd0cd
 101c0bc:	f002 fa8e 	bl	101e5dc <strcpy>
 101c0c0:	f242 5b8d 	movw	fp, #9613	; 0x258d
 101c0c4:	f2c0 1a01 	movt	sl, #257	; 0x101
 101c0c8:	2308      	movs	r3, #8
 101c0ca:	f2c0 1b02 	movt	fp, #258	; 0x102
 101c0ce:	e743      	b.n	101bf58 <__loadlocale+0x21c>
 101c0d0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 101c0d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 101c0d8:	2b50      	cmp	r3, #80	; 0x50
 101c0da:	f47f aeda 	bne.w	101be92 <__loadlocale+0x156>
 101c0de:	2202      	movs	r2, #2
 101c0e0:	f24c 0190 	movw	r1, #49296	; 0xc090
 101c0e4:	4648      	mov	r0, r9
 101c0e6:	f2c0 1106 	movt	r1, #262	; 0x106
 101c0ea:	f002 fbf7 	bl	101e8dc <strncpy>
 101c0ee:	220a      	movs	r2, #10
 101c0f0:	a903      	add	r1, sp, #12
 101c0f2:	f10d 0012 	add.w	r0, sp, #18
 101c0f6:	f002 fce5 	bl	101eac4 <strtol>
 101c0fa:	9b03      	ldr	r3, [sp, #12]
 101c0fc:	781b      	ldrb	r3, [r3, #0]
 101c0fe:	2b00      	cmp	r3, #0
 101c100:	f47f aec7 	bne.w	101be92 <__loadlocale+0x156>
 101c104:	f240 335a 	movw	r3, #858	; 0x35a
 101c108:	4298      	cmp	r0, r3
 101c10a:	f77f aea7 	ble.w	101be5c <__loadlocale+0x120>
 101c10e:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
 101c112:	f040 80fc 	bne.w	101c30e <__loadlocale+0x5d2>
 101c116:	f64c 7a91 	movw	sl, #53137	; 0xcf91
 101c11a:	f242 4bc9 	movw	fp, #9417	; 0x24c9
 101c11e:	f2c0 1a01 	movt	sl, #257	; 0x101
 101c122:	f2c0 1b02 	movt	fp, #258	; 0x102
 101c126:	2302      	movs	r3, #2
 101c128:	e716      	b.n	101bf58 <__loadlocale+0x21c>
 101c12a:	f24c 012c 	movw	r1, #49196	; 0xc02c
 101c12e:	4648      	mov	r0, r9
 101c130:	f2c0 1106 	movt	r1, #262	; 0x106
 101c134:	f002 f82c 	bl	101e190 <strcasecmp>
 101c138:	2800      	cmp	r0, #0
 101c13a:	f47f aeaa 	bne.w	101be92 <__loadlocale+0x156>
 101c13e:	f24c 012c 	movw	r1, #49196	; 0xc02c
 101c142:	4648      	mov	r0, r9
 101c144:	f2c0 1106 	movt	r1, #262	; 0x106
 101c148:	f002 fa48 	bl	101e5dc <strcpy>
 101c14c:	e739      	b.n	101bfc2 <__loadlocale+0x286>
 101c14e:	f24c 01ac 	movw	r1, #49324	; 0xc0ac
 101c152:	2208      	movs	r2, #8
 101c154:	f2c0 1106 	movt	r1, #262	; 0x106
 101c158:	4648      	mov	r0, r9
 101c15a:	f002 fb3f 	bl	101e7dc <strncasecmp>
 101c15e:	2800      	cmp	r0, #0
 101c160:	f47f ae97 	bne.w	101be92 <__loadlocale+0x156>
 101c164:	f89d 3018 	ldrb.w	r3, [sp, #24]
 101c168:	f24c 01b8 	movw	r1, #49336	; 0xc0b8
 101c16c:	f2c0 1106 	movt	r1, #262	; 0x106
 101c170:	2b2d      	cmp	r3, #45	; 0x2d
 101c172:	bf0c      	ite	eq
 101c174:	f10d 0019 	addeq.w	r0, sp, #25
 101c178:	a806      	addne	r0, sp, #24
 101c17a:	f002 f809 	bl	101e190 <strcasecmp>
 101c17e:	2800      	cmp	r0, #0
 101c180:	f47f ae87 	bne.w	101be92 <__loadlocale+0x156>
 101c184:	f24c 01bc 	movw	r1, #49340	; 0xc0bc
 101c188:	4648      	mov	r0, r9
 101c18a:	f2c0 1106 	movt	r1, #262	; 0x106
 101c18e:	f002 fa25 	bl	101e5dc <strcpy>
 101c192:	e716      	b.n	101bfc2 <__loadlocale+0x286>
 101c194:	f24c 0160 	movw	r1, #49248	; 0xc060
 101c198:	2203      	movs	r2, #3
 101c19a:	f2c0 1106 	movt	r1, #262	; 0x106
 101c19e:	4648      	mov	r0, r9
 101c1a0:	f002 fb1c 	bl	101e7dc <strncasecmp>
 101c1a4:	2800      	cmp	r0, #0
 101c1a6:	f47f ae74 	bne.w	101be92 <__loadlocale+0x156>
 101c1aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 101c1ae:	f24c 0164 	movw	r1, #49252	; 0xc064
 101c1b2:	f2c0 1106 	movt	r1, #262	; 0x106
 101c1b6:	2b2d      	cmp	r3, #45	; 0x2d
 101c1b8:	bf0c      	ite	eq
 101c1ba:	a805      	addeq	r0, sp, #20
 101c1bc:	f10d 0013 	addne.w	r0, sp, #19
 101c1c0:	f001 ffe6 	bl	101e190 <strcasecmp>
 101c1c4:	2800      	cmp	r0, #0
 101c1c6:	f47f ae64 	bne.w	101be92 <__loadlocale+0x156>
 101c1ca:	f24c 0168 	movw	r1, #49256	; 0xc068
 101c1ce:	4648      	mov	r0, r9
 101c1d0:	f2c0 1106 	movt	r1, #262	; 0x106
 101c1d4:	f24d 0a15 	movw	sl, #53269	; 0xd015
 101c1d8:	f002 fa00 	bl	101e5dc <strcpy>
 101c1dc:	f242 5b1d 	movw	fp, #9501	; 0x251d
 101c1e0:	f2c0 1a01 	movt	sl, #257	; 0x101
 101c1e4:	2303      	movs	r3, #3
 101c1e6:	f2c0 1b02 	movt	fp, #258	; 0x102
 101c1ea:	e6b5      	b.n	101bf58 <__loadlocale+0x21c>
 101c1ec:	f24c 0178 	movw	r1, #49272	; 0xc078
 101c1f0:	2203      	movs	r2, #3
 101c1f2:	f2c0 1106 	movt	r1, #262	; 0x106
 101c1f6:	4648      	mov	r0, r9
 101c1f8:	f002 faf0 	bl	101e7dc <strncasecmp>
 101c1fc:	2800      	cmp	r0, #0
 101c1fe:	f47f ae48 	bne.w	101be92 <__loadlocale+0x156>
 101c202:	f89d 3013 	ldrb.w	r3, [sp, #19]
 101c206:	f24c 017c 	movw	r1, #49276	; 0xc07c
 101c20a:	2204      	movs	r2, #4
 101c20c:	f2c0 1106 	movt	r1, #262	; 0x106
 101c210:	2b2d      	cmp	r3, #45	; 0x2d
 101c212:	bf0c      	ite	eq
 101c214:	f10d 0814 	addeq.w	r8, sp, #20
 101c218:	f10d 0813 	addne.w	r8, sp, #19
 101c21c:	4640      	mov	r0, r8
 101c21e:	f002 fadd 	bl	101e7dc <strncasecmp>
 101c222:	2800      	cmp	r0, #0
 101c224:	f47f ae35 	bne.w	101be92 <__loadlocale+0x156>
 101c228:	f898 3004 	ldrb.w	r3, [r8, #4]
 101c22c:	220a      	movs	r2, #10
 101c22e:	a903      	add	r1, sp, #12
 101c230:	2b2d      	cmp	r3, #45	; 0x2d
 101c232:	bf14      	ite	ne
 101c234:	f108 0004 	addne.w	r0, r8, #4
 101c238:	f108 0005 	addeq.w	r0, r8, #5
 101c23c:	f002 fc42 	bl	101eac4 <strtol>
 101c240:	f1a0 030c 	sub.w	r3, r0, #12
 101c244:	1e42      	subs	r2, r0, #1
 101c246:	fab3 f383 	clz	r3, r3
 101c24a:	4680      	mov	r8, r0
 101c24c:	095b      	lsrs	r3, r3, #5
 101c24e:	2a0f      	cmp	r2, #15
 101c250:	bf88      	it	hi
 101c252:	f043 0301 	orrhi.w	r3, r3, #1
 101c256:	2b00      	cmp	r3, #0
 101c258:	f47f ae1b 	bne.w	101be92 <__loadlocale+0x156>
 101c25c:	9b03      	ldr	r3, [sp, #12]
 101c25e:	781b      	ldrb	r3, [r3, #0]
 101c260:	2b00      	cmp	r3, #0
 101c262:	f47f ae16 	bne.w	101be92 <__loadlocale+0x156>
 101c266:	f24c 0184 	movw	r1, #49284	; 0xc084
 101c26a:	4648      	mov	r0, r9
 101c26c:	f2c0 1106 	movt	r1, #262	; 0x106
 101c270:	f002 f9b4 	bl	101e5dc <strcpy>
 101c274:	f246 6267 	movw	r2, #26215	; 0x6667
 101c278:	f2c6 6266 	movt	r2, #26214	; 0x6666
 101c27c:	f1b8 0f0a 	cmp.w	r8, #10
 101c280:	f04f 000a 	mov.w	r0, #10
 101c284:	bfc8      	it	gt
 101c286:	f10d 011a 	addgt.w	r1, sp, #26
 101c28a:	fb82 c208 	smull	ip, r2, r2, r8
 101c28e:	bfcc      	ite	gt
 101c290:	2331      	movgt	r3, #49	; 0x31
 101c292:	f10d 0119 	addle.w	r1, sp, #25
 101c296:	f04f 0c00 	mov.w	ip, #0
 101c29a:	bfc8      	it	gt
 101c29c:	f88d 3019 	strbgt.w	r3, [sp, #25]
 101c2a0:	ea4f 73e8 	mov.w	r3, r8, asr #31
 101c2a4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 101c2a8:	f881 c001 	strb.w	ip, [r1, #1]
 101c2ac:	fb00 8313 	mls	r3, r0, r3, r8
 101c2b0:	3330      	adds	r3, #48	; 0x30
 101c2b2:	700b      	strb	r3, [r1, #0]
 101c2b4:	e685      	b.n	101bfc2 <__loadlocale+0x286>
 101c2b6:	f108 0801 	add.w	r8, r8, #1
 101c2ba:	e607      	b.n	101becc <__loadlocale+0x190>
 101c2bc:	4649      	mov	r1, r9
 101c2be:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 101c2c2:	9301      	str	r3, [sp, #4]
 101c2c4:	f002 f98a 	bl	101e5dc <strcpy>
 101c2c8:	9b01      	ldr	r3, [sp, #4]
 101c2ca:	4649      	mov	r1, r9
 101c2cc:	f8c6 b0e0 	str.w	fp, [r6, #224]	; 0xe0
 101c2d0:	4630      	mov	r0, r6
 101c2d2:	f8c6 a0e4 	str.w	sl, [r6, #228]	; 0xe4
 101c2d6:	f088 0801 	eor.w	r8, r8, #1
 101c2da:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
 101c2de:	f006 fa69 	bl	10227b4 <__set_ctype>
 101c2e2:	f018 0801 	ands.w	r8, r8, #1
 101c2e6:	d067      	beq.n	101c3b8 <__loadlocale+0x67c>
 101c2e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 101c2ec:	2b55      	cmp	r3, #85	; 0x55
 101c2ee:	d043      	beq.n	101c378 <__loadlocale+0x63c>
 101c2f0:	2001      	movs	r0, #1
 101c2f2:	e681      	b.n	101bff8 <__loadlocale+0x2bc>
 101c2f4:	f108 0001 	add.w	r0, r8, #1
 101c2f8:	f24c 0140 	movw	r1, #49216	; 0xc040
 101c2fc:	f2c0 1106 	movt	r1, #262	; 0x106
 101c300:	f002 f802 	bl	101e308 <strcmp>
 101c304:	fab0 f880 	clz	r8, r0
 101c308:	ea4f 1858 	mov.w	r8, r8, lsr #5
 101c30c:	e56a      	b.n	101bde4 <__loadlocale+0xa8>
 101c30e:	dc0f      	bgt.n	101c330 <__loadlocale+0x5f4>
 101c310:	f240 3362 	movw	r3, #866	; 0x362
 101c314:	4298      	cmp	r0, r3
 101c316:	f43f ae54 	beq.w	101bfc2 <__loadlocale+0x286>
 101c31a:	f240 336a 	movw	r3, #874	; 0x36a
 101c31e:	4298      	cmp	r0, r3
 101c320:	f43f ae4f 	beq.w	101bfc2 <__loadlocale+0x286>
 101c324:	f240 335e 	movw	r3, #862	; 0x35e
 101c328:	4298      	cmp	r0, r3
 101c32a:	f47f adb2 	bne.w	101be92 <__loadlocale+0x156>
 101c32e:	e648      	b.n	101bfc2 <__loadlocale+0x286>
 101c330:	f240 4365 	movw	r3, #1125	; 0x465
 101c334:	4298      	cmp	r0, r3
 101c336:	f43f ae44 	beq.w	101bfc2 <__loadlocale+0x286>
 101c33a:	f6ff adaa 	blt.w	101be92 <__loadlocale+0x156>
 101c33e:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
 101c342:	2808      	cmp	r0, #8
 101c344:	f63f ada5 	bhi.w	101be92 <__loadlocale+0x156>
 101c348:	e63b      	b.n	101bfc2 <__loadlocale+0x286>
 101c34a:	f5b0 7f55 	cmp.w	r0, #852	; 0x354
 101c34e:	f43f ae38 	beq.w	101bfc2 <__loadlocale+0x286>
 101c352:	f240 3357 	movw	r3, #855	; 0x357
 101c356:	4298      	cmp	r0, r3
 101c358:	f43f ae33 	beq.w	101bfc2 <__loadlocale+0x286>
 101c35c:	f240 3352 	movw	r3, #850	; 0x352
 101c360:	4298      	cmp	r0, r3
 101c362:	f47f ad96 	bne.w	101be92 <__loadlocale+0x156>
 101c366:	e62c      	b.n	101bfc2 <__loadlocale+0x286>
 101c368:	f24c 019c 	movw	r1, #49308	; 0xc09c
 101c36c:	4648      	mov	r0, r9
 101c36e:	f2c0 1106 	movt	r1, #262	; 0x106
 101c372:	f002 f933 	bl	101e5dc <strcpy>
 101c376:	e624      	b.n	101bfc2 <__loadlocale+0x286>
 101c378:	f24c 01e4 	movw	r1, #49380	; 0xc0e4
 101c37c:	463a      	mov	r2, r7
 101c37e:	f2c0 1106 	movt	r1, #262	; 0x106
 101c382:	4620      	mov	r0, r4
 101c384:	f002 fa58 	bl	101e838 <strncmp>
 101c388:	2800      	cmp	r0, #0
 101c38a:	d0b1      	beq.n	101c2f0 <__loadlocale+0x5b4>
 101c38c:	f24c 01e8 	movw	r1, #49384	; 0xc0e8
 101c390:	463a      	mov	r2, r7
 101c392:	f2c0 1106 	movt	r1, #262	; 0x106
 101c396:	4620      	mov	r0, r4
 101c398:	f002 fa4e 	bl	101e838 <strncmp>
 101c39c:	2800      	cmp	r0, #0
 101c39e:	d0a7      	beq.n	101c2f0 <__loadlocale+0x5b4>
 101c3a0:	463a      	mov	r2, r7
 101c3a2:	f24c 01ec 	movw	r1, #49388	; 0xc0ec
 101c3a6:	4620      	mov	r0, r4
 101c3a8:	f2c0 1106 	movt	r1, #262	; 0x106
 101c3ac:	f002 fa44 	bl	101e838 <strncmp>
 101c3b0:	fab0 f080 	clz	r0, r0
 101c3b4:	0940      	lsrs	r0, r0, #5
 101c3b6:	e61f      	b.n	101bff8 <__loadlocale+0x2bc>
 101c3b8:	4640      	mov	r0, r8
 101c3ba:	e61d      	b.n	101bff8 <__loadlocale+0x2bc>

0101c3bc <__get_locale_env>:
 101c3bc:	b538      	push	{r3, r4, r5, lr}
 101c3be:	460d      	mov	r5, r1
 101c3c0:	f24c 01f0 	movw	r1, #49392	; 0xc0f0
 101c3c4:	f2c0 1106 	movt	r1, #262	; 0x106
 101c3c8:	4604      	mov	r4, r0
 101c3ca:	f007 fe9d 	bl	1024108 <_getenv_r>
 101c3ce:	b108      	cbz	r0, 101c3d4 <__get_locale_env+0x18>
 101c3d0:	7803      	ldrb	r3, [r0, #0]
 101c3d2:	b9a3      	cbnz	r3, 101c3fe <__get_locale_env+0x42>
 101c3d4:	f647 4328 	movw	r3, #31784	; 0x7c28
 101c3d8:	f2c0 1306 	movt	r3, #262	; 0x106
 101c3dc:	4620      	mov	r0, r4
 101c3de:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 101c3e2:	f007 fe91 	bl	1024108 <_getenv_r>
 101c3e6:	b108      	cbz	r0, 101c3ec <__get_locale_env+0x30>
 101c3e8:	7803      	ldrb	r3, [r0, #0]
 101c3ea:	b943      	cbnz	r3, 101c3fe <__get_locale_env+0x42>
 101c3ec:	f24c 01f8 	movw	r1, #49400	; 0xc0f8
 101c3f0:	4620      	mov	r0, r4
 101c3f2:	f2c0 1106 	movt	r1, #262	; 0x106
 101c3f6:	f007 fe87 	bl	1024108 <_getenv_r>
 101c3fa:	b908      	cbnz	r0, 101c400 <__get_locale_env+0x44>
 101c3fc:	4803      	ldr	r0, [pc, #12]	; (101c40c <__get_locale_env+0x50>)
 101c3fe:	bd38      	pop	{r3, r4, r5, pc}
 101c400:	7802      	ldrb	r2, [r0, #0]
 101c402:	4b02      	ldr	r3, [pc, #8]	; (101c40c <__get_locale_env+0x50>)
 101c404:	2a00      	cmp	r2, #0
 101c406:	bf08      	it	eq
 101c408:	4618      	moveq	r0, r3
 101c40a:	bd38      	pop	{r3, r4, r5, pc}
 101c40c:	0106cc54 	.word	0x0106cc54

0101c410 <_setlocale_r>:
 101c410:	2906      	cmp	r1, #6
 101c412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101c416:	4681      	mov	r9, r0
 101c418:	b083      	sub	sp, #12
 101c41a:	d868      	bhi.n	101c4ee <_setlocale_r+0xde>
 101c41c:	468b      	mov	fp, r1
 101c41e:	4692      	mov	sl, r2
 101c420:	2a00      	cmp	r2, #0
 101c422:	f000 80a3 	beq.w	101c56c <_setlocale_r+0x15c>
 101c426:	f8df 8228 	ldr.w	r8, [pc, #552]	; 101c650 <_setlocale_r+0x240>
 101c42a:	4e86      	ldr	r6, [pc, #536]	; (101c644 <_setlocale_r+0x234>)
 101c42c:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
 101c430:	4644      	mov	r4, r8
 101c432:	4635      	mov	r5, r6
 101c434:	4629      	mov	r1, r5
 101c436:	4620      	mov	r0, r4
 101c438:	3420      	adds	r4, #32
 101c43a:	f002 f8cf 	bl	101e5dc <strcpy>
 101c43e:	42bc      	cmp	r4, r7
 101c440:	f105 0520 	add.w	r5, r5, #32
 101c444:	d1f6      	bne.n	101c434 <_setlocale_r+0x24>
 101c446:	f89a 3000 	ldrb.w	r3, [sl]
 101c44a:	bbb3      	cbnz	r3, 101c4ba <_setlocale_r+0xaa>
 101c44c:	f1bb 0f00 	cmp.w	fp, #0
 101c450:	f040 8098 	bne.w	101c584 <_setlocale_r+0x174>
 101c454:	4645      	mov	r5, r8
 101c456:	2401      	movs	r4, #1
 101c458:	4621      	mov	r1, r4
 101c45a:	4648      	mov	r0, r9
 101c45c:	f7ff ffae 	bl	101c3bc <__get_locale_env>
 101c460:	3401      	adds	r4, #1
 101c462:	4607      	mov	r7, r0
 101c464:	f002 f94c 	bl	101e700 <strlen>
 101c468:	4639      	mov	r1, r7
 101c46a:	281f      	cmp	r0, #31
 101c46c:	4628      	mov	r0, r5
 101c46e:	f105 0520 	add.w	r5, r5, #32
 101c472:	d83c      	bhi.n	101c4ee <_setlocale_r+0xde>
 101c474:	f002 f8b2 	bl	101e5dc <strcpy>
 101c478:	2c07      	cmp	r4, #7
 101c47a:	d1ed      	bne.n	101c458 <_setlocale_r+0x48>
 101c47c:	4f72      	ldr	r7, [pc, #456]	; (101c648 <_setlocale_r+0x238>)
 101c47e:	f64c 2ae8 	movw	sl, #51944	; 0xcae8
 101c482:	f2c0 1a06 	movt	sl, #262	; 0x106
 101c486:	4645      	mov	r5, r8
 101c488:	2401      	movs	r4, #1
 101c48a:	46bb      	mov	fp, r7
 101c48c:	4631      	mov	r1, r6
 101c48e:	4658      	mov	r0, fp
 101c490:	f002 f8a4 	bl	101e5dc <strcpy>
 101c494:	462a      	mov	r2, r5
 101c496:	4621      	mov	r1, r4
 101c498:	4650      	mov	r0, sl
 101c49a:	f7ff fc4f 	bl	101bd3c <__loadlocale>
 101c49e:	f10b 0b20 	add.w	fp, fp, #32
 101c4a2:	3620      	adds	r6, #32
 101c4a4:	3520      	adds	r5, #32
 101c4a6:	4603      	mov	r3, r0
 101c4a8:	2800      	cmp	r0, #0
 101c4aa:	d07c      	beq.n	101c5a6 <_setlocale_r+0x196>
 101c4ac:	3401      	adds	r4, #1
 101c4ae:	2c07      	cmp	r4, #7
 101c4b0:	d1ec      	bne.n	101c48c <_setlocale_r+0x7c>
 101c4b2:	b003      	add	sp, #12
 101c4b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101c4b8:	e40a      	b.n	101bcd0 <currentlocale>
 101c4ba:	f1bb 0f00 	cmp.w	fp, #0
 101c4be:	d01e      	beq.n	101c4fe <_setlocale_r+0xee>
 101c4c0:	4650      	mov	r0, sl
 101c4c2:	f002 f91d 	bl	101e700 <strlen>
 101c4c6:	281f      	cmp	r0, #31
 101c4c8:	d811      	bhi.n	101c4ee <_setlocale_r+0xde>
 101c4ca:	4c60      	ldr	r4, [pc, #384]	; (101c64c <_setlocale_r+0x23c>)
 101c4cc:	4651      	mov	r1, sl
 101c4ce:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 101c4d2:	4620      	mov	r0, r4
 101c4d4:	f002 f882 	bl	101e5dc <strcpy>
 101c4d8:	4622      	mov	r2, r4
 101c4da:	4659      	mov	r1, fp
 101c4dc:	f64c 20e8 	movw	r0, #51944	; 0xcae8
 101c4e0:	f2c0 1006 	movt	r0, #262	; 0x106
 101c4e4:	b003      	add	sp, #12
 101c4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101c4ea:	f7ff bc27 	b.w	101bd3c <__loadlocale>
 101c4ee:	2300      	movs	r3, #0
 101c4f0:	2216      	movs	r2, #22
 101c4f2:	f8c9 2000 	str.w	r2, [r9]
 101c4f6:	4618      	mov	r0, r3
 101c4f8:	b003      	add	sp, #12
 101c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101c4fe:	212f      	movs	r1, #47	; 0x2f
 101c500:	4650      	mov	r0, sl
 101c502:	f001 fe87 	bl	101e214 <strchr>
 101c506:	4604      	mov	r4, r0
 101c508:	2800      	cmp	r0, #0
 101c50a:	f000 808b 	beq.w	101c624 <_setlocale_r+0x214>
 101c50e:	7842      	ldrb	r2, [r0, #1]
 101c510:	2a2f      	cmp	r2, #47	; 0x2f
 101c512:	bf08      	it	eq
 101c514:	1c43      	addeq	r3, r0, #1
 101c516:	d104      	bne.n	101c522 <_setlocale_r+0x112>
 101c518:	461c      	mov	r4, r3
 101c51a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 101c51e:	2a2f      	cmp	r2, #47	; 0x2f
 101c520:	d0fa      	beq.n	101c518 <_setlocale_r+0x108>
 101c522:	2a00      	cmp	r2, #0
 101c524:	d0e3      	beq.n	101c4ee <_setlocale_r+0xde>
 101c526:	46c3      	mov	fp, r8
 101c528:	2501      	movs	r5, #1
 101c52a:	eba4 020a 	sub.w	r2, r4, sl
 101c52e:	2a1f      	cmp	r2, #31
 101c530:	dcdd      	bgt.n	101c4ee <_setlocale_r+0xde>
 101c532:	3201      	adds	r2, #1
 101c534:	4651      	mov	r1, sl
 101c536:	4658      	mov	r0, fp
 101c538:	3501      	adds	r5, #1
 101c53a:	f002 f8b1 	bl	101e6a0 <strlcpy>
 101c53e:	7823      	ldrb	r3, [r4, #0]
 101c540:	2b2f      	cmp	r3, #47	; 0x2f
 101c542:	d103      	bne.n	101c54c <_setlocale_r+0x13c>
 101c544:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 101c548:	2b2f      	cmp	r3, #47	; 0x2f
 101c54a:	d0fb      	beq.n	101c544 <_setlocale_r+0x134>
 101c54c:	2b00      	cmp	r3, #0
 101c54e:	d059      	beq.n	101c604 <_setlocale_r+0x1f4>
 101c550:	4622      	mov	r2, r4
 101c552:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 101c556:	2b00      	cmp	r3, #0
 101c558:	bf18      	it	ne
 101c55a:	2b2f      	cmpne	r3, #47	; 0x2f
 101c55c:	d1f9      	bne.n	101c552 <_setlocale_r+0x142>
 101c55e:	2d07      	cmp	r5, #7
 101c560:	f10b 0b20 	add.w	fp, fp, #32
 101c564:	46a2      	mov	sl, r4
 101c566:	d089      	beq.n	101c47c <_setlocale_r+0x6c>
 101c568:	4614      	mov	r4, r2
 101c56a:	e7de      	b.n	101c52a <_setlocale_r+0x11a>
 101c56c:	2900      	cmp	r1, #0
 101c56e:	d0a0      	beq.n	101c4b2 <_setlocale_r+0xa2>
 101c570:	f64c 23e8 	movw	r3, #51944	; 0xcae8
 101c574:	f2c0 1306 	movt	r3, #262	; 0x106
 101c578:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 101c57c:	4618      	mov	r0, r3
 101c57e:	b003      	add	sp, #12
 101c580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101c584:	4659      	mov	r1, fp
 101c586:	4648      	mov	r0, r9
 101c588:	f7ff ff18 	bl	101c3bc <__get_locale_env>
 101c58c:	4605      	mov	r5, r0
 101c58e:	f002 f8b7 	bl	101e700 <strlen>
 101c592:	281f      	cmp	r0, #31
 101c594:	d8ab      	bhi.n	101c4ee <_setlocale_r+0xde>
 101c596:	4c2d      	ldr	r4, [pc, #180]	; (101c64c <_setlocale_r+0x23c>)
 101c598:	4629      	mov	r1, r5
 101c59a:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 101c59e:	4620      	mov	r0, r4
 101c5a0:	f002 f81c 	bl	101e5dc <strcpy>
 101c5a4:	e798      	b.n	101c4d8 <_setlocale_r+0xc8>
 101c5a6:	2c01      	cmp	r4, #1
 101c5a8:	f8d9 b000 	ldr.w	fp, [r9]
 101c5ac:	d027      	beq.n	101c5fe <_setlocale_r+0x1ee>
 101c5ae:	f64c 26e8 	movw	r6, #51944	; 0xcae8
 101c5b2:	f24c 0a28 	movw	sl, #49192	; 0xc028
 101c5b6:	f2c0 1606 	movt	r6, #262	; 0x106
 101c5ba:	f2c0 1a06 	movt	sl, #262	; 0x106
 101c5be:	2501      	movs	r5, #1
 101c5c0:	e004      	b.n	101c5cc <_setlocale_r+0x1bc>
 101c5c2:	3501      	adds	r5, #1
 101c5c4:	f108 0820 	add.w	r8, r8, #32
 101c5c8:	42a5      	cmp	r5, r4
 101c5ca:	d018      	beq.n	101c5fe <_setlocale_r+0x1ee>
 101c5cc:	4639      	mov	r1, r7
 101c5ce:	4640      	mov	r0, r8
 101c5d0:	9301      	str	r3, [sp, #4]
 101c5d2:	f002 f803 	bl	101e5dc <strcpy>
 101c5d6:	4642      	mov	r2, r8
 101c5d8:	4629      	mov	r1, r5
 101c5da:	4630      	mov	r0, r6
 101c5dc:	3720      	adds	r7, #32
 101c5de:	f7ff fbad 	bl	101bd3c <__loadlocale>
 101c5e2:	9b01      	ldr	r3, [sp, #4]
 101c5e4:	2800      	cmp	r0, #0
 101c5e6:	d1ec      	bne.n	101c5c2 <_setlocale_r+0x1b2>
 101c5e8:	4651      	mov	r1, sl
 101c5ea:	4640      	mov	r0, r8
 101c5ec:	f001 fff6 	bl	101e5dc <strcpy>
 101c5f0:	4642      	mov	r2, r8
 101c5f2:	4629      	mov	r1, r5
 101c5f4:	4630      	mov	r0, r6
 101c5f6:	f7ff fba1 	bl	101bd3c <__loadlocale>
 101c5fa:	9b01      	ldr	r3, [sp, #4]
 101c5fc:	e7e1      	b.n	101c5c2 <_setlocale_r+0x1b2>
 101c5fe:	f8c9 b000 	str.w	fp, [r9]
 101c602:	e778      	b.n	101c4f6 <_setlocale_r+0xe6>
 101c604:	2d07      	cmp	r5, #7
 101c606:	bf1c      	itt	ne
 101c608:	4b10      	ldrne	r3, [pc, #64]	; (101c64c <_setlocale_r+0x23c>)
 101c60a:	eb03 1545 	addne.w	r5, r3, r5, lsl #5
 101c60e:	f43f af35 	beq.w	101c47c <_setlocale_r+0x6c>
 101c612:	f1a5 0120 	sub.w	r1, r5, #32
 101c616:	4628      	mov	r0, r5
 101c618:	3520      	adds	r5, #32
 101c61a:	f001 ffdf 	bl	101e5dc <strcpy>
 101c61e:	42bd      	cmp	r5, r7
 101c620:	d1f7      	bne.n	101c612 <_setlocale_r+0x202>
 101c622:	e72b      	b.n	101c47c <_setlocale_r+0x6c>
 101c624:	4650      	mov	r0, sl
 101c626:	f002 f86b 	bl	101e700 <strlen>
 101c62a:	281f      	cmp	r0, #31
 101c62c:	f63f af5f 	bhi.w	101c4ee <_setlocale_r+0xde>
 101c630:	4644      	mov	r4, r8
 101c632:	4620      	mov	r0, r4
 101c634:	4651      	mov	r1, sl
 101c636:	3420      	adds	r4, #32
 101c638:	f001 ffd0 	bl	101e5dc <strcpy>
 101c63c:	42bc      	cmp	r4, r7
 101c63e:	d1f8      	bne.n	101c632 <_setlocale_r+0x222>
 101c640:	e71c      	b.n	101c47c <_setlocale_r+0x6c>
 101c642:	bf00      	nop
 101c644:	0106cb08 	.word	0x0106cb08
 101c648:	01074238 	.word	0x01074238
 101c64c:	01074138 	.word	0x01074138
 101c650:	01074158 	.word	0x01074158

0101c654 <__locale_mb_cur_max>:
 101c654:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101c658:	f2c0 1306 	movt	r3, #262	; 0x106
 101c65c:	f64c 22e8 	movw	r2, #51944	; 0xcae8
 101c660:	f2c0 1206 	movt	r2, #262	; 0x106
 101c664:	681b      	ldr	r3, [r3, #0]
 101c666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101c668:	2b00      	cmp	r3, #0
 101c66a:	bf08      	it	eq
 101c66c:	4613      	moveq	r3, r2
 101c66e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 101c672:	4770      	bx	lr

0101c674 <__locale_ctype_ptr_l>:
 101c674:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 101c678:	4770      	bx	lr
 101c67a:	bf00      	nop

0101c67c <__locale_ctype_ptr>:
 101c67c:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101c680:	f2c0 1306 	movt	r3, #262	; 0x106
 101c684:	f64c 22e8 	movw	r2, #51944	; 0xcae8
 101c688:	f2c0 1206 	movt	r2, #262	; 0x106
 101c68c:	681b      	ldr	r3, [r3, #0]
 101c68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101c690:	2b00      	cmp	r3, #0
 101c692:	bf08      	it	eq
 101c694:	4613      	moveq	r3, r2
 101c696:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 101c69a:	4770      	bx	lr

0101c69c <setlocale>:
 101c69c:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101c6a0:	f2c0 1306 	movt	r3, #262	; 0x106
 101c6a4:	460a      	mov	r2, r1
 101c6a6:	4601      	mov	r1, r0
 101c6a8:	6818      	ldr	r0, [r3, #0]
 101c6aa:	f7ff beb1 	b.w	101c410 <_setlocale_r>
 101c6ae:	bf00      	nop

0101c6b0 <memalign>:
 101c6b0:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101c6b4:	f2c0 1306 	movt	r3, #262	; 0x106
 101c6b8:	460a      	mov	r2, r1
 101c6ba:	4601      	mov	r1, r0
 101c6bc:	6818      	ldr	r0, [r3, #0]
 101c6be:	f000 b801 	b.w	101c6c4 <_memalign_r>
 101c6c2:	bf00      	nop

0101c6c4 <_memalign_r>:
 101c6c4:	2908      	cmp	r1, #8
 101c6c6:	d962      	bls.n	101c78e <_memalign_r+0xca>
 101c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101c6cc:	f102 050b 	add.w	r5, r2, #11
 101c6d0:	2d16      	cmp	r5, #22
 101c6d2:	4607      	mov	r7, r0
 101c6d4:	bf8d      	iteet	hi
 101c6d6:	f025 0507 	bichi.w	r5, r5, #7
 101c6da:	2300      	movls	r3, #0
 101c6dc:	2510      	movls	r5, #16
 101c6de:	0feb      	lsrhi	r3, r5, #31
 101c6e0:	4295      	cmp	r5, r2
 101c6e2:	bf2c      	ite	cs
 101c6e4:	461a      	movcs	r2, r3
 101c6e6:	f043 0201 	orrcc.w	r2, r3, #1
 101c6ea:	2a00      	cmp	r2, #0
 101c6ec:	d149      	bne.n	101c782 <_memalign_r+0xbe>
 101c6ee:	2910      	cmp	r1, #16
 101c6f0:	bf38      	it	cc
 101c6f2:	2110      	movcc	r1, #16
 101c6f4:	460c      	mov	r4, r1
 101c6f6:	3110      	adds	r1, #16
 101c6f8:	4429      	add	r1, r5
 101c6fa:	f000 f86d 	bl	101c7d8 <_malloc_r>
 101c6fe:	4606      	mov	r6, r0
 101c700:	b3e0      	cbz	r0, 101c77c <_memalign_r+0xb8>
 101c702:	4638      	mov	r0, r7
 101c704:	f1a6 0808 	sub.w	r8, r6, #8
 101c708:	f001 f922 	bl	101d950 <__malloc_lock>
 101c70c:	4621      	mov	r1, r4
 101c70e:	4630      	mov	r0, r6
 101c710:	f7fe fd28 	bl	101b164 <__aeabi_uidivmod>
 101c714:	b341      	cbz	r1, 101c768 <_memalign_r+0xa4>
 101c716:	1e63      	subs	r3, r4, #1
 101c718:	4261      	negs	r1, r4
 101c71a:	4433      	add	r3, r6
 101c71c:	4638      	mov	r0, r7
 101c71e:	4019      	ands	r1, r3
 101c720:	f856 3c04 	ldr.w	r3, [r6, #-4]
 101c724:	3908      	subs	r1, #8
 101c726:	eba1 0208 	sub.w	r2, r1, r8
 101c72a:	f023 0303 	bic.w	r3, r3, #3
 101c72e:	2a0f      	cmp	r2, #15
 101c730:	bfdc      	itt	le
 101c732:	1909      	addle	r1, r1, r4
 101c734:	eba1 0208 	suble.w	r2, r1, r8
 101c738:	1a9b      	subs	r3, r3, r2
 101c73a:	4688      	mov	r8, r1
 101c73c:	eb08 0403 	add.w	r4, r8, r3
 101c740:	f043 0301 	orr.w	r3, r3, #1
 101c744:	f8c8 3004 	str.w	r3, [r8, #4]
 101c748:	4631      	mov	r1, r6
 101c74a:	6863      	ldr	r3, [r4, #4]
 101c74c:	f043 0301 	orr.w	r3, r3, #1
 101c750:	6063      	str	r3, [r4, #4]
 101c752:	f856 3c04 	ldr.w	r3, [r6, #-4]
 101c756:	f003 0301 	and.w	r3, r3, #1
 101c75a:	431a      	orrs	r2, r3
 101c75c:	f846 2c04 	str.w	r2, [r6, #-4]
 101c760:	f007 f9b4 	bl	1023acc <_free_r>
 101c764:	f108 0608 	add.w	r6, r8, #8
 101c768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 101c76c:	f023 0303 	bic.w	r3, r3, #3
 101c770:	1b5b      	subs	r3, r3, r5
 101c772:	2b0f      	cmp	r3, #15
 101c774:	dc0e      	bgt.n	101c794 <_memalign_r+0xd0>
 101c776:	4638      	mov	r0, r7
 101c778:	f001 f8ec 	bl	101d954 <__malloc_unlock>
 101c77c:	4630      	mov	r0, r6
 101c77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101c782:	2600      	movs	r6, #0
 101c784:	230c      	movs	r3, #12
 101c786:	6003      	str	r3, [r0, #0]
 101c788:	4630      	mov	r0, r6
 101c78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101c78e:	4611      	mov	r1, r2
 101c790:	f000 b822 	b.w	101c7d8 <_malloc_r>
 101c794:	eb08 0205 	add.w	r2, r8, r5
 101c798:	f043 0301 	orr.w	r3, r3, #1
 101c79c:	f102 0108 	add.w	r1, r2, #8
 101c7a0:	4638      	mov	r0, r7
 101c7a2:	6053      	str	r3, [r2, #4]
 101c7a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 101c7a8:	f003 0301 	and.w	r3, r3, #1
 101c7ac:	431d      	orrs	r5, r3
 101c7ae:	f8c8 5004 	str.w	r5, [r8, #4]
 101c7b2:	f007 f98b 	bl	1023acc <_free_r>
 101c7b6:	e7de      	b.n	101c776 <_memalign_r+0xb2>

0101c7b8 <malloc>:
 101c7b8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101c7bc:	f2c0 1306 	movt	r3, #262	; 0x106
 101c7c0:	4601      	mov	r1, r0
 101c7c2:	6818      	ldr	r0, [r3, #0]
 101c7c4:	f000 b808 	b.w	101c7d8 <_malloc_r>

0101c7c8 <free>:
 101c7c8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101c7cc:	f2c0 1306 	movt	r3, #262	; 0x106
 101c7d0:	4601      	mov	r1, r0
 101c7d2:	6818      	ldr	r0, [r3, #0]
 101c7d4:	f007 b97a 	b.w	1023acc <_free_r>

0101c7d8 <_malloc_r>:
 101c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101c7dc:	f101 050b 	add.w	r5, r1, #11
 101c7e0:	2d16      	cmp	r5, #22
 101c7e2:	b083      	sub	sp, #12
 101c7e4:	4607      	mov	r7, r0
 101c7e6:	d82c      	bhi.n	101c842 <_malloc_r+0x6a>
 101c7e8:	2910      	cmp	r1, #16
 101c7ea:	d823      	bhi.n	101c834 <_malloc_r+0x5c>
 101c7ec:	f001 f8b0 	bl	101d950 <__malloc_lock>
 101c7f0:	2510      	movs	r5, #16
 101c7f2:	2002      	movs	r0, #2
 101c7f4:	2318      	movs	r3, #24
 101c7f6:	f64c 4674 	movw	r6, #52340	; 0xcc74
 101c7fa:	f2c0 1606 	movt	r6, #262	; 0x106
 101c7fe:	4433      	add	r3, r6
 101c800:	f1a3 0108 	sub.w	r1, r3, #8
 101c804:	685a      	ldr	r2, [r3, #4]
 101c806:	428a      	cmp	r2, r1
 101c808:	d04f      	beq.n	101c8aa <_malloc_r+0xd2>
 101c80a:	6853      	ldr	r3, [r2, #4]
 101c80c:	f102 0408 	add.w	r4, r2, #8
 101c810:	68d1      	ldr	r1, [r2, #12]
 101c812:	4638      	mov	r0, r7
 101c814:	f023 0303 	bic.w	r3, r3, #3
 101c818:	6895      	ldr	r5, [r2, #8]
 101c81a:	441a      	add	r2, r3
 101c81c:	6853      	ldr	r3, [r2, #4]
 101c81e:	60e9      	str	r1, [r5, #12]
 101c820:	f043 0301 	orr.w	r3, r3, #1
 101c824:	608d      	str	r5, [r1, #8]
 101c826:	6053      	str	r3, [r2, #4]
 101c828:	f001 f894 	bl	101d954 <__malloc_unlock>
 101c82c:	4620      	mov	r0, r4
 101c82e:	b003      	add	sp, #12
 101c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101c834:	2400      	movs	r4, #0
 101c836:	230c      	movs	r3, #12
 101c838:	4620      	mov	r0, r4
 101c83a:	603b      	str	r3, [r7, #0]
 101c83c:	b003      	add	sp, #12
 101c83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101c842:	f025 0507 	bic.w	r5, r5, #7
 101c846:	42a9      	cmp	r1, r5
 101c848:	bf94      	ite	ls
 101c84a:	2100      	movls	r1, #0
 101c84c:	2101      	movhi	r1, #1
 101c84e:	ea51 73d5 	orrs.w	r3, r1, r5, lsr #31
 101c852:	d1ef      	bne.n	101c834 <_malloc_r+0x5c>
 101c854:	f001 f87c 	bl	101d950 <__malloc_lock>
 101c858:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 101c85c:	f0c0 81c5 	bcc.w	101cbea <_malloc_r+0x412>
 101c860:	0a6b      	lsrs	r3, r5, #9
 101c862:	f000 8111 	beq.w	101ca88 <_malloc_r+0x2b0>
 101c866:	2b04      	cmp	r3, #4
 101c868:	f200 819b 	bhi.w	101cba2 <_malloc_r+0x3ca>
 101c86c:	09ab      	lsrs	r3, r5, #6
 101c86e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 101c872:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 101c876:	00c3      	lsls	r3, r0, #3
 101c878:	f64c 4674 	movw	r6, #52340	; 0xcc74
 101c87c:	f2c0 1606 	movt	r6, #262	; 0x106
 101c880:	4433      	add	r3, r6
 101c882:	f1a3 0408 	sub.w	r4, r3, #8
 101c886:	685b      	ldr	r3, [r3, #4]
 101c888:	429c      	cmp	r4, r3
 101c88a:	d106      	bne.n	101c89a <_malloc_r+0xc2>
 101c88c:	e012      	b.n	101c8b4 <_malloc_r+0xdc>
 101c88e:	2900      	cmp	r1, #0
 101c890:	f280 8155 	bge.w	101cb3e <_malloc_r+0x366>
 101c894:	68db      	ldr	r3, [r3, #12]
 101c896:	429c      	cmp	r4, r3
 101c898:	d00c      	beq.n	101c8b4 <_malloc_r+0xdc>
 101c89a:	685a      	ldr	r2, [r3, #4]
 101c89c:	f022 0203 	bic.w	r2, r2, #3
 101c8a0:	1b51      	subs	r1, r2, r5
 101c8a2:	290f      	cmp	r1, #15
 101c8a4:	ddf3      	ble.n	101c88e <_malloc_r+0xb6>
 101c8a6:	4660      	mov	r0, ip
 101c8a8:	e004      	b.n	101c8b4 <_malloc_r+0xdc>
 101c8aa:	68da      	ldr	r2, [r3, #12]
 101c8ac:	4293      	cmp	r3, r2
 101c8ae:	bf08      	it	eq
 101c8b0:	3002      	addeq	r0, #2
 101c8b2:	d1aa      	bne.n	101c80a <_malloc_r+0x32>
 101c8b4:	6932      	ldr	r2, [r6, #16]
 101c8b6:	f8df e480 	ldr.w	lr, [pc, #1152]	; 101cd38 <_malloc_r+0x560>
 101c8ba:	4572      	cmp	r2, lr
 101c8bc:	bf08      	it	eq
 101c8be:	6871      	ldreq	r1, [r6, #4]
 101c8c0:	d029      	beq.n	101c916 <_malloc_r+0x13e>
 101c8c2:	6853      	ldr	r3, [r2, #4]
 101c8c4:	f023 0c03 	bic.w	ip, r3, #3
 101c8c8:	ebac 0305 	sub.w	r3, ip, r5
 101c8cc:	2b0f      	cmp	r3, #15
 101c8ce:	f300 8190 	bgt.w	101cbf2 <_malloc_r+0x41a>
 101c8d2:	2b00      	cmp	r3, #0
 101c8d4:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 101c8d8:	f280 8114 	bge.w	101cb04 <_malloc_r+0x32c>
 101c8dc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 101c8e0:	f080 813f 	bcs.w	101cb62 <_malloc_r+0x38a>
 101c8e4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 101c8e8:	2101      	movs	r1, #1
 101c8ea:	eb0c 0401 	add.w	r4, ip, r1
 101c8ee:	6873      	ldr	r3, [r6, #4]
 101c8f0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 101c8f4:	f856 9034 	ldr.w	r9, [r6, r4, lsl #3]
 101c8f8:	fa01 fc0c 	lsl.w	ip, r1, ip
 101c8fc:	eb06 08c4 	add.w	r8, r6, r4, lsl #3
 101c900:	ea4c 0103 	orr.w	r1, ip, r3
 101c904:	f1a8 0308 	sub.w	r3, r8, #8
 101c908:	6071      	str	r1, [r6, #4]
 101c90a:	e9c2 9302 	strd	r9, r3, [r2, #8]
 101c90e:	f846 2034 	str.w	r2, [r6, r4, lsl #3]
 101c912:	f8c9 200c 	str.w	r2, [r9, #12]
 101c916:	1083      	asrs	r3, r0, #2
 101c918:	2401      	movs	r4, #1
 101c91a:	409c      	lsls	r4, r3
 101c91c:	428c      	cmp	r4, r1
 101c91e:	f240 80b9 	bls.w	101ca94 <_malloc_r+0x2bc>
 101c922:	68b4      	ldr	r4, [r6, #8]
 101c924:	6863      	ldr	r3, [r4, #4]
 101c926:	f023 0803 	bic.w	r8, r3, #3
 101c92a:	45a8      	cmp	r8, r5
 101c92c:	eba8 0205 	sub.w	r2, r8, r5
 101c930:	bf2c      	ite	cs
 101c932:	2300      	movcs	r3, #0
 101c934:	2301      	movcc	r3, #1
 101c936:	2a0f      	cmp	r2, #15
 101c938:	bfd8      	it	le
 101c93a:	f043 0301 	orrle.w	r3, r3, #1
 101c93e:	2b00      	cmp	r3, #0
 101c940:	f000 80ed 	beq.w	101cb1e <_malloc_r+0x346>
 101c944:	f244 29fc 	movw	r9, #17148	; 0x42fc
 101c948:	f2c0 1907 	movt	r9, #263	; 0x107
 101c94c:	f8d6 3408 	ldr.w	r3, [r6, #1032]	; 0x408
 101c950:	4638      	mov	r0, r7
 101c952:	f8d9 1000 	ldr.w	r1, [r9]
 101c956:	eb04 0b08 	add.w	fp, r4, r8
 101c95a:	3301      	adds	r3, #1
 101c95c:	4429      	add	r1, r5
 101c95e:	bf17      	itett	ne
 101c960:	f501 5180 	addne.w	r1, r1, #4096	; 0x1000
 101c964:	f101 0310 	addeq.w	r3, r1, #16
 101c968:	310f      	addne	r1, #15
 101c96a:	f421 637f 	bicne.w	r3, r1, #4080	; 0xff0
 101c96e:	bf18      	it	ne
 101c970:	f023 030f 	bicne.w	r3, r3, #15
 101c974:	9301      	str	r3, [sp, #4]
 101c976:	4619      	mov	r1, r3
 101c978:	f001 fb6c 	bl	101e054 <_sbrk_r>
 101c97c:	9b01      	ldr	r3, [sp, #4]
 101c97e:	f1b0 3fff 	cmp.w	r0, #4294967295
 101c982:	4682      	mov	sl, r0
 101c984:	f000 8181 	beq.w	101cc8a <_malloc_r+0x4b2>
 101c988:	42b4      	cmp	r4, r6
 101c98a:	bf18      	it	ne
 101c98c:	4583      	cmpne	fp, r0
 101c98e:	f200 817c 	bhi.w	101cc8a <_malloc_r+0x4b2>
 101c992:	f8d9 0004 	ldr.w	r0, [r9, #4]
 101c996:	45d3      	cmp	fp, sl
 101c998:	4418      	add	r0, r3
 101c99a:	f8c9 0004 	str.w	r0, [r9, #4]
 101c99e:	f000 8166 	beq.w	101cc6e <_malloc_r+0x496>
 101c9a2:	f8d6 2408 	ldr.w	r2, [r6, #1032]	; 0x408
 101c9a6:	3201      	adds	r2, #1
 101c9a8:	bf0f      	iteee	eq
 101c9aa:	f8c6 a408 	streq.w	sl, [r6, #1032]	; 0x408
 101c9ae:	ebaa 0b0b 	subne.w	fp, sl, fp
 101c9b2:	4458      	addne	r0, fp
 101c9b4:	f8c9 0004 	strne.w	r0, [r9, #4]
 101c9b8:	f01a 0b07 	ands.w	fp, sl, #7
 101c9bc:	4638      	mov	r0, r7
 101c9be:	bf1f      	itttt	ne
 101c9c0:	f1cb 0208 	rsbne	r2, fp, #8
 101c9c4:	f5cb 5b80 	rsbne	fp, fp, #4096	; 0x1000
 101c9c8:	4492      	addne	sl, r2
 101c9ca:	f10b 0b08 	addne.w	fp, fp, #8
 101c9ce:	4453      	add	r3, sl
 101c9d0:	bf08      	it	eq
 101c9d2:	f44f 5b80 	moveq.w	fp, #4096	; 0x1000
 101c9d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 101c9da:	ebab 0b03 	sub.w	fp, fp, r3
 101c9de:	4659      	mov	r1, fp
 101c9e0:	f001 fb38 	bl	101e054 <_sbrk_r>
 101c9e4:	f8c6 a008 	str.w	sl, [r6, #8]
 101c9e8:	1c43      	adds	r3, r0, #1
 101c9ea:	bf18      	it	ne
 101c9ec:	eba0 010a 	subne.w	r1, r0, sl
 101c9f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 101c9f4:	bf15      	itete	ne
 101c9f6:	4459      	addne	r1, fp
 101c9f8:	2101      	moveq	r1, #1
 101c9fa:	f041 0101 	orrne.w	r1, r1, #1
 101c9fe:	f04f 0b00 	moveq.w	fp, #0
 101ca02:	42b4      	cmp	r4, r6
 101ca04:	4458      	add	r0, fp
 101ca06:	f8ca 1004 	str.w	r1, [sl, #4]
 101ca0a:	f8c9 0004 	str.w	r0, [r9, #4]
 101ca0e:	f000 813a 	beq.w	101cc86 <_malloc_r+0x4ae>
 101ca12:	f1b8 0f0f 	cmp.w	r8, #15
 101ca16:	bf9c      	itt	ls
 101ca18:	2301      	movls	r3, #1
 101ca1a:	f8ca 3004 	strls.w	r3, [sl, #4]
 101ca1e:	d92e      	bls.n	101ca7e <_malloc_r+0x2a6>
 101ca20:	f1a8 030c 	sub.w	r3, r8, #12
 101ca24:	6862      	ldr	r2, [r4, #4]
 101ca26:	f023 0307 	bic.w	r3, r3, #7
 101ca2a:	f04f 0c05 	mov.w	ip, #5
 101ca2e:	18e1      	adds	r1, r4, r3
 101ca30:	2b0f      	cmp	r3, #15
 101ca32:	f002 0201 	and.w	r2, r2, #1
 101ca36:	ea42 0203 	orr.w	r2, r2, r3
 101ca3a:	6062      	str	r2, [r4, #4]
 101ca3c:	e9c1 cc01 	strd	ip, ip, [r1, #4]
 101ca40:	f200 8159 	bhi.w	101ccf6 <_malloc_r+0x51e>
 101ca44:	f8da 1004 	ldr.w	r1, [sl, #4]
 101ca48:	4654      	mov	r4, sl
 101ca4a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 101ca4e:	4283      	cmp	r3, r0
 101ca50:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 101ca54:	bf38      	it	cc
 101ca56:	f8c9 002c 	strcc.w	r0, [r9, #44]	; 0x2c
 101ca5a:	4283      	cmp	r3, r0
 101ca5c:	bf38      	it	cc
 101ca5e:	f8c9 0030 	strcc.w	r0, [r9, #48]	; 0x30
 101ca62:	f021 0103 	bic.w	r1, r1, #3
 101ca66:	1b4a      	subs	r2, r1, r5
 101ca68:	2a0f      	cmp	r2, #15
 101ca6a:	bfcc      	ite	gt
 101ca6c:	2300      	movgt	r3, #0
 101ca6e:	2301      	movle	r3, #1
 101ca70:	42a9      	cmp	r1, r5
 101ca72:	bf2c      	ite	cs
 101ca74:	4619      	movcs	r1, r3
 101ca76:	f043 0101 	orrcc.w	r1, r3, #1
 101ca7a:	2900      	cmp	r1, #0
 101ca7c:	d04f      	beq.n	101cb1e <_malloc_r+0x346>
 101ca7e:	4638      	mov	r0, r7
 101ca80:	2400      	movs	r4, #0
 101ca82:	f000 ff67 	bl	101d954 <__malloc_unlock>
 101ca86:	e6d1      	b.n	101c82c <_malloc_r+0x54>
 101ca88:	f44f 7300 	mov.w	r3, #512	; 0x200
 101ca8c:	2040      	movs	r0, #64	; 0x40
 101ca8e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 101ca92:	e6f1      	b.n	101c878 <_malloc_r+0xa0>
 101ca94:	420c      	tst	r4, r1
 101ca96:	d105      	bne.n	101caa4 <_malloc_r+0x2cc>
 101ca98:	f020 0003 	bic.w	r0, r0, #3
 101ca9c:	0064      	lsls	r4, r4, #1
 101ca9e:	3004      	adds	r0, #4
 101caa0:	420c      	tst	r4, r1
 101caa2:	d0fb      	beq.n	101ca9c <_malloc_r+0x2c4>
 101caa4:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 101caa8:	4680      	mov	r8, r0
 101caaa:	46cc      	mov	ip, r9
 101caac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 101cab0:	459c      	cmp	ip, r3
 101cab2:	d106      	bne.n	101cac2 <_malloc_r+0x2ea>
 101cab4:	e081      	b.n	101cbba <_malloc_r+0x3e2>
 101cab6:	2a00      	cmp	r2, #0
 101cab8:	f280 8088 	bge.w	101cbcc <_malloc_r+0x3f4>
 101cabc:	68db      	ldr	r3, [r3, #12]
 101cabe:	459c      	cmp	ip, r3
 101cac0:	d07b      	beq.n	101cbba <_malloc_r+0x3e2>
 101cac2:	6859      	ldr	r1, [r3, #4]
 101cac4:	f021 0103 	bic.w	r1, r1, #3
 101cac8:	1b4a      	subs	r2, r1, r5
 101caca:	2a0f      	cmp	r2, #15
 101cacc:	ddf3      	ble.n	101cab6 <_malloc_r+0x2de>
 101cace:	68dc      	ldr	r4, [r3, #12]
 101cad0:	eb03 0c05 	add.w	ip, r3, r5
 101cad4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 101cad8:	f045 0501 	orr.w	r5, r5, #1
 101cadc:	4638      	mov	r0, r7
 101cade:	605d      	str	r5, [r3, #4]
 101cae0:	f042 0501 	orr.w	r5, r2, #1
 101cae4:	f8c8 400c 	str.w	r4, [r8, #12]
 101cae8:	f8c4 8008 	str.w	r8, [r4, #8]
 101caec:	f103 0408 	add.w	r4, r3, #8
 101caf0:	e9c6 cc04 	strd	ip, ip, [r6, #16]
 101caf4:	e9cc ee02 	strd	lr, lr, [ip, #8]
 101caf8:	f8cc 5004 	str.w	r5, [ip, #4]
 101cafc:	505a      	str	r2, [r3, r1]
 101cafe:	f000 ff29 	bl	101d954 <__malloc_unlock>
 101cb02:	e693      	b.n	101c82c <_malloc_r+0x54>
 101cb04:	4494      	add	ip, r2
 101cb06:	4638      	mov	r0, r7
 101cb08:	f102 0408 	add.w	r4, r2, #8
 101cb0c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 101cb10:	f043 0301 	orr.w	r3, r3, #1
 101cb14:	f8cc 3004 	str.w	r3, [ip, #4]
 101cb18:	f000 ff1c 	bl	101d954 <__malloc_unlock>
 101cb1c:	e686      	b.n	101c82c <_malloc_r+0x54>
 101cb1e:	1963      	adds	r3, r4, r5
 101cb20:	f042 0201 	orr.w	r2, r2, #1
 101cb24:	4638      	mov	r0, r7
 101cb26:	f045 0501 	orr.w	r5, r5, #1
 101cb2a:	6065      	str	r5, [r4, #4]
 101cb2c:	3408      	adds	r4, #8
 101cb2e:	60b3      	str	r3, [r6, #8]
 101cb30:	605a      	str	r2, [r3, #4]
 101cb32:	f000 ff0f 	bl	101d954 <__malloc_unlock>
 101cb36:	4620      	mov	r0, r4
 101cb38:	b003      	add	sp, #12
 101cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101cb3e:	441a      	add	r2, r3
 101cb40:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
 101cb44:	4638      	mov	r0, r7
 101cb46:	f103 0408 	add.w	r4, r3, #8
 101cb4a:	6851      	ldr	r1, [r2, #4]
 101cb4c:	60f5      	str	r5, [r6, #12]
 101cb4e:	f041 0101 	orr.w	r1, r1, #1
 101cb52:	60ae      	str	r6, [r5, #8]
 101cb54:	6051      	str	r1, [r2, #4]
 101cb56:	f000 fefd 	bl	101d954 <__malloc_unlock>
 101cb5a:	4620      	mov	r0, r4
 101cb5c:	b003      	add	sp, #12
 101cb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101cb62:	ea4f 215c 	mov.w	r1, ip, lsr #9
 101cb66:	2904      	cmp	r1, #4
 101cb68:	d956      	bls.n	101cc18 <_malloc_r+0x440>
 101cb6a:	2914      	cmp	r1, #20
 101cb6c:	f200 809b 	bhi.w	101cca6 <_malloc_r+0x4ce>
 101cb70:	f101 035c 	add.w	r3, r1, #92	; 0x5c
 101cb74:	315b      	adds	r1, #91	; 0x5b
 101cb76:	00db      	lsls	r3, r3, #3
 101cb78:	18f4      	adds	r4, r6, r3
 101cb7a:	58f3      	ldr	r3, [r6, r3]
 101cb7c:	3c08      	subs	r4, #8
 101cb7e:	429c      	cmp	r4, r3
 101cb80:	f000 8086 	beq.w	101cc90 <_malloc_r+0x4b8>
 101cb84:	6859      	ldr	r1, [r3, #4]
 101cb86:	f021 0103 	bic.w	r1, r1, #3
 101cb8a:	4561      	cmp	r1, ip
 101cb8c:	d902      	bls.n	101cb94 <_malloc_r+0x3bc>
 101cb8e:	689b      	ldr	r3, [r3, #8]
 101cb90:	429c      	cmp	r4, r3
 101cb92:	d1f7      	bne.n	101cb84 <_malloc_r+0x3ac>
 101cb94:	68dc      	ldr	r4, [r3, #12]
 101cb96:	6871      	ldr	r1, [r6, #4]
 101cb98:	e9c2 3402 	strd	r3, r4, [r2, #8]
 101cb9c:	60a2      	str	r2, [r4, #8]
 101cb9e:	60da      	str	r2, [r3, #12]
 101cba0:	e6b9      	b.n	101c916 <_malloc_r+0x13e>
 101cba2:	2b14      	cmp	r3, #20
 101cba4:	d93f      	bls.n	101cc26 <_malloc_r+0x44e>
 101cba6:	2b54      	cmp	r3, #84	; 0x54
 101cba8:	f200 8086 	bhi.w	101ccb8 <_malloc_r+0x4e0>
 101cbac:	0b2b      	lsrs	r3, r5, #12
 101cbae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 101cbb2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 101cbb6:	00c3      	lsls	r3, r0, #3
 101cbb8:	e65e      	b.n	101c878 <_malloc_r+0xa0>
 101cbba:	f108 0801 	add.w	r8, r8, #1
 101cbbe:	f10c 0c08 	add.w	ip, ip, #8
 101cbc2:	f018 0f03 	tst.w	r8, #3
 101cbc6:	f47f af71 	bne.w	101caac <_malloc_r+0x2d4>
 101cbca:	e036      	b.n	101cc3a <_malloc_r+0x462>
 101cbcc:	4419      	add	r1, r3
 101cbce:	461c      	mov	r4, r3
 101cbd0:	68da      	ldr	r2, [r3, #12]
 101cbd2:	4638      	mov	r0, r7
 101cbd4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 101cbd8:	684b      	ldr	r3, [r1, #4]
 101cbda:	f043 0301 	orr.w	r3, r3, #1
 101cbde:	604b      	str	r3, [r1, #4]
 101cbe0:	60ea      	str	r2, [r5, #12]
 101cbe2:	6095      	str	r5, [r2, #8]
 101cbe4:	f000 feb6 	bl	101d954 <__malloc_unlock>
 101cbe8:	e620      	b.n	101c82c <_malloc_r+0x54>
 101cbea:	08e8      	lsrs	r0, r5, #3
 101cbec:	f105 0308 	add.w	r3, r5, #8
 101cbf0:	e601      	b.n	101c7f6 <_malloc_r+0x1e>
 101cbf2:	1951      	adds	r1, r2, r5
 101cbf4:	4638      	mov	r0, r7
 101cbf6:	f045 0501 	orr.w	r5, r5, #1
 101cbfa:	6055      	str	r5, [r2, #4]
 101cbfc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 101cc00:	f043 0501 	orr.w	r5, r3, #1
 101cc04:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 101cc08:	f102 0408 	add.w	r4, r2, #8
 101cc0c:	604d      	str	r5, [r1, #4]
 101cc0e:	f842 300c 	str.w	r3, [r2, ip]
 101cc12:	f000 fe9f 	bl	101d954 <__malloc_unlock>
 101cc16:	e609      	b.n	101c82c <_malloc_r+0x54>
 101cc18:	ea4f 119c 	mov.w	r1, ip, lsr #6
 101cc1c:	f101 0339 	add.w	r3, r1, #57	; 0x39
 101cc20:	3138      	adds	r1, #56	; 0x38
 101cc22:	00db      	lsls	r3, r3, #3
 101cc24:	e7a8      	b.n	101cb78 <_malloc_r+0x3a0>
 101cc26:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 101cc2a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 101cc2e:	00c3      	lsls	r3, r0, #3
 101cc30:	e622      	b.n	101c878 <_malloc_r+0xa0>
 101cc32:	f859 3908 	ldr.w	r3, [r9], #-8
 101cc36:	454b      	cmp	r3, r9
 101cc38:	d17c      	bne.n	101cd34 <_malloc_r+0x55c>
 101cc3a:	f010 0f03 	tst.w	r0, #3
 101cc3e:	f100 30ff 	add.w	r0, r0, #4294967295
 101cc42:	d1f6      	bne.n	101cc32 <_malloc_r+0x45a>
 101cc44:	6873      	ldr	r3, [r6, #4]
 101cc46:	ea23 0304 	bic.w	r3, r3, r4
 101cc4a:	6073      	str	r3, [r6, #4]
 101cc4c:	0064      	lsls	r4, r4, #1
 101cc4e:	429c      	cmp	r4, r3
 101cc50:	bf8c      	ite	hi
 101cc52:	2200      	movhi	r2, #0
 101cc54:	2201      	movls	r2, #1
 101cc56:	2c00      	cmp	r4, #0
 101cc58:	bf08      	it	eq
 101cc5a:	2200      	moveq	r2, #0
 101cc5c:	b91a      	cbnz	r2, 101cc66 <_malloc_r+0x48e>
 101cc5e:	e660      	b.n	101c922 <_malloc_r+0x14a>
 101cc60:	0064      	lsls	r4, r4, #1
 101cc62:	f108 0804 	add.w	r8, r8, #4
 101cc66:	421c      	tst	r4, r3
 101cc68:	d0fa      	beq.n	101cc60 <_malloc_r+0x488>
 101cc6a:	4640      	mov	r0, r8
 101cc6c:	e71a      	b.n	101caa4 <_malloc_r+0x2cc>
 101cc6e:	f3cb 020b 	ubfx	r2, fp, #0, #12
 101cc72:	2a00      	cmp	r2, #0
 101cc74:	f47f ae95 	bne.w	101c9a2 <_malloc_r+0x1ca>
 101cc78:	68b4      	ldr	r4, [r6, #8]
 101cc7a:	eb08 0103 	add.w	r1, r8, r3
 101cc7e:	f041 0101 	orr.w	r1, r1, #1
 101cc82:	6061      	str	r1, [r4, #4]
 101cc84:	e6e1      	b.n	101ca4a <_malloc_r+0x272>
 101cc86:	4654      	mov	r4, sl
 101cc88:	e6df      	b.n	101ca4a <_malloc_r+0x272>
 101cc8a:	68b4      	ldr	r4, [r6, #8]
 101cc8c:	6861      	ldr	r1, [r4, #4]
 101cc8e:	e6e8      	b.n	101ca62 <_malloc_r+0x28a>
 101cc90:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 101cc94:	f04f 0801 	mov.w	r8, #1
 101cc98:	6871      	ldr	r1, [r6, #4]
 101cc9a:	fa08 fc0c 	lsl.w	ip, r8, ip
 101cc9e:	ea4c 0101 	orr.w	r1, ip, r1
 101cca2:	6071      	str	r1, [r6, #4]
 101cca4:	e778      	b.n	101cb98 <_malloc_r+0x3c0>
 101cca6:	2954      	cmp	r1, #84	; 0x54
 101cca8:	d810      	bhi.n	101cccc <_malloc_r+0x4f4>
 101ccaa:	ea4f 311c 	mov.w	r1, ip, lsr #12
 101ccae:	f101 036f 	add.w	r3, r1, #111	; 0x6f
 101ccb2:	316e      	adds	r1, #110	; 0x6e
 101ccb4:	00db      	lsls	r3, r3, #3
 101ccb6:	e75f      	b.n	101cb78 <_malloc_r+0x3a0>
 101ccb8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 101ccbc:	d810      	bhi.n	101cce0 <_malloc_r+0x508>
 101ccbe:	0beb      	lsrs	r3, r5, #15
 101ccc0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 101ccc4:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 101ccc8:	00c3      	lsls	r3, r0, #3
 101ccca:	e5d5      	b.n	101c878 <_malloc_r+0xa0>
 101cccc:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 101ccd0:	d81b      	bhi.n	101cd0a <_malloc_r+0x532>
 101ccd2:	ea4f 31dc 	mov.w	r1, ip, lsr #15
 101ccd6:	f101 0378 	add.w	r3, r1, #120	; 0x78
 101ccda:	3177      	adds	r1, #119	; 0x77
 101ccdc:	00db      	lsls	r3, r3, #3
 101ccde:	e74b      	b.n	101cb78 <_malloc_r+0x3a0>
 101cce0:	f240 5254 	movw	r2, #1364	; 0x554
 101cce4:	4293      	cmp	r3, r2
 101cce6:	d81f      	bhi.n	101cd28 <_malloc_r+0x550>
 101cce8:	0cab      	lsrs	r3, r5, #18
 101ccea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 101ccee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 101ccf2:	00c3      	lsls	r3, r0, #3
 101ccf4:	e5c0      	b.n	101c878 <_malloc_r+0xa0>
 101ccf6:	f104 0108 	add.w	r1, r4, #8
 101ccfa:	4638      	mov	r0, r7
 101ccfc:	f006 fee6 	bl	1023acc <_free_r>
 101cd00:	68b4      	ldr	r4, [r6, #8]
 101cd02:	f8d9 0004 	ldr.w	r0, [r9, #4]
 101cd06:	6861      	ldr	r1, [r4, #4]
 101cd08:	e69f      	b.n	101ca4a <_malloc_r+0x272>
 101cd0a:	f240 5354 	movw	r3, #1364	; 0x554
 101cd0e:	4299      	cmp	r1, r3
 101cd10:	bf9b      	ittet	ls
 101cd12:	ea4f 419c 	movls.w	r1, ip, lsr #18
 101cd16:	f101 037d 	addls.w	r3, r1, #125	; 0x7d
 101cd1a:	f44f 737e 	movhi.w	r3, #1016	; 0x3f8
 101cd1e:	317c      	addls	r1, #124	; 0x7c
 101cd20:	bf8c      	ite	hi
 101cd22:	217e      	movhi	r1, #126	; 0x7e
 101cd24:	00db      	lslls	r3, r3, #3
 101cd26:	e727      	b.n	101cb78 <_malloc_r+0x3a0>
 101cd28:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 101cd2c:	207f      	movs	r0, #127	; 0x7f
 101cd2e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 101cd32:	e5a1      	b.n	101c878 <_malloc_r+0xa0>
 101cd34:	6873      	ldr	r3, [r6, #4]
 101cd36:	e789      	b.n	101cc4c <_malloc_r+0x474>
 101cd38:	0106cc7c 	.word	0x0106cc7c

0101cd3c <_mbtowc_r>:
 101cd3c:	b430      	push	{r4, r5}
 101cd3e:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 101cd42:	f2c0 1406 	movt	r4, #262	; 0x106
 101cd46:	f64c 25e8 	movw	r5, #51944	; 0xcae8
 101cd4a:	f2c0 1506 	movt	r5, #262	; 0x106
 101cd4e:	6824      	ldr	r4, [r4, #0]
 101cd50:	6b64      	ldr	r4, [r4, #52]	; 0x34
 101cd52:	2c00      	cmp	r4, #0
 101cd54:	bf08      	it	eq
 101cd56:	462c      	moveq	r4, r5
 101cd58:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 101cd5c:	46a4      	mov	ip, r4
 101cd5e:	bc30      	pop	{r4, r5}
 101cd60:	4760      	bx	ip
 101cd62:	bf00      	nop

0101cd64 <__ascii_mbtowc>:
 101cd64:	b082      	sub	sp, #8
 101cd66:	b151      	cbz	r1, 101cd7e <__ascii_mbtowc+0x1a>
 101cd68:	4610      	mov	r0, r2
 101cd6a:	b132      	cbz	r2, 101cd7a <__ascii_mbtowc+0x16>
 101cd6c:	b14b      	cbz	r3, 101cd82 <__ascii_mbtowc+0x1e>
 101cd6e:	7813      	ldrb	r3, [r2, #0]
 101cd70:	600b      	str	r3, [r1, #0]
 101cd72:	7812      	ldrb	r2, [r2, #0]
 101cd74:	1c10      	adds	r0, r2, #0
 101cd76:	bf18      	it	ne
 101cd78:	2001      	movne	r0, #1
 101cd7a:	b002      	add	sp, #8
 101cd7c:	4770      	bx	lr
 101cd7e:	a901      	add	r1, sp, #4
 101cd80:	e7f2      	b.n	101cd68 <__ascii_mbtowc+0x4>
 101cd82:	f06f 0001 	mvn.w	r0, #1
 101cd86:	e7f8      	b.n	101cd7a <__ascii_mbtowc+0x16>

0101cd88 <__utf8_mbtowc>:
 101cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 101cd8a:	b083      	sub	sp, #12
 101cd8c:	4607      	mov	r7, r0
 101cd8e:	9c08      	ldr	r4, [sp, #32]
 101cd90:	2900      	cmp	r1, #0
 101cd92:	d035      	beq.n	101ce00 <__utf8_mbtowc+0x78>
 101cd94:	4610      	mov	r0, r2
 101cd96:	b34a      	cbz	r2, 101cdec <__utf8_mbtowc+0x64>
 101cd98:	2b00      	cmp	r3, #0
 101cd9a:	f000 80db 	beq.w	101cf54 <__utf8_mbtowc+0x1cc>
 101cd9e:	6826      	ldr	r6, [r4, #0]
 101cda0:	bb36      	cbnz	r6, 101cdf0 <__utf8_mbtowc+0x68>
 101cda2:	7810      	ldrb	r0, [r2, #0]
 101cda4:	2501      	movs	r5, #1
 101cda6:	b338      	cbz	r0, 101cdf8 <__utf8_mbtowc+0x70>
 101cda8:	287f      	cmp	r0, #127	; 0x7f
 101cdaa:	dd66      	ble.n	101ce7a <__utf8_mbtowc+0xf2>
 101cdac:	f1a0 0cc0 	sub.w	ip, r0, #192	; 0xc0
 101cdb0:	f1bc 0f1f 	cmp.w	ip, #31
 101cdb4:	d826      	bhi.n	101ce04 <__utf8_mbtowc+0x7c>
 101cdb6:	7120      	strb	r0, [r4, #4]
 101cdb8:	b926      	cbnz	r6, 101cdc4 <__utf8_mbtowc+0x3c>
 101cdba:	2601      	movs	r6, #1
 101cdbc:	42b3      	cmp	r3, r6
 101cdbe:	6026      	str	r6, [r4, #0]
 101cdc0:	f240 80c8 	bls.w	101cf54 <__utf8_mbtowc+0x1cc>
 101cdc4:	5d52      	ldrb	r2, [r2, r5]
 101cdc6:	3501      	adds	r5, #1
 101cdc8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 101cdcc:	2b3f      	cmp	r3, #63	; 0x3f
 101cdce:	f200 80c7 	bhi.w	101cf60 <__utf8_mbtowc+0x1d8>
 101cdd2:	28c1      	cmp	r0, #193	; 0xc1
 101cdd4:	f340 80c4 	ble.w	101cf60 <__utf8_mbtowc+0x1d8>
 101cdd8:	0183      	lsls	r3, r0, #6
 101cdda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 101cdde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 101cde2:	4628      	mov	r0, r5
 101cde4:	4313      	orrs	r3, r2
 101cde6:	2200      	movs	r2, #0
 101cde8:	6022      	str	r2, [r4, #0]
 101cdea:	600b      	str	r3, [r1, #0]
 101cdec:	b003      	add	sp, #12
 101cdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101cdf0:	7920      	ldrb	r0, [r4, #4]
 101cdf2:	2500      	movs	r5, #0
 101cdf4:	2800      	cmp	r0, #0
 101cdf6:	d1d7      	bne.n	101cda8 <__utf8_mbtowc+0x20>
 101cdf8:	6008      	str	r0, [r1, #0]
 101cdfa:	6020      	str	r0, [r4, #0]
 101cdfc:	b003      	add	sp, #12
 101cdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101ce00:	a901      	add	r1, sp, #4
 101ce02:	e7c7      	b.n	101cd94 <__utf8_mbtowc+0xc>
 101ce04:	f1a0 0ce0 	sub.w	ip, r0, #224	; 0xe0
 101ce08:	f1bc 0f0f 	cmp.w	ip, #15
 101ce0c:	d83b      	bhi.n	101ce86 <__utf8_mbtowc+0xfe>
 101ce0e:	7120      	strb	r0, [r4, #4]
 101ce10:	2e00      	cmp	r6, #0
 101ce12:	f000 8088 	beq.w	101cf26 <__utf8_mbtowc+0x19e>
 101ce16:	f1b3 3fff 	cmp.w	r3, #4294967295
 101ce1a:	bf18      	it	ne
 101ce1c:	3301      	addne	r3, #1
 101ce1e:	2e01      	cmp	r6, #1
 101ce20:	bf18      	it	ne
 101ce22:	f894 c005 	ldrbne.w	ip, [r4, #5]
 101ce26:	f000 8082 	beq.w	101cf2e <__utf8_mbtowc+0x1a6>
 101ce2a:	f1bc 0f9f 	cmp.w	ip, #159	; 0x9f
 101ce2e:	bfd8      	it	le
 101ce30:	28e0      	cmple	r0, #224	; 0xe0
 101ce32:	f000 8095 	beq.w	101cf60 <__utf8_mbtowc+0x1d8>
 101ce36:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 101ce3a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 101ce3e:	f200 808f 	bhi.w	101cf60 <__utf8_mbtowc+0x1d8>
 101ce42:	2e01      	cmp	r6, #1
 101ce44:	f884 c005 	strb.w	ip, [r4, #5]
 101ce48:	d07f      	beq.n	101cf4a <__utf8_mbtowc+0x1c2>
 101ce4a:	5d53      	ldrb	r3, [r2, r5]
 101ce4c:	3501      	adds	r5, #1
 101ce4e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 101ce52:	2a3f      	cmp	r2, #63	; 0x3f
 101ce54:	f200 8084 	bhi.w	101cf60 <__utf8_mbtowc+0x1d8>
 101ce58:	0300      	lsls	r0, r0, #12
 101ce5a:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 101ce5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 101ce62:	f40c 6c7c 	and.w	ip, ip, #4032	; 0xfc0
 101ce66:	b283      	uxth	r3, r0
 101ce68:	4628      	mov	r0, r5
 101ce6a:	ea43 0c0c 	orr.w	ip, r3, ip
 101ce6e:	2500      	movs	r5, #0
 101ce70:	ea4c 0202 	orr.w	r2, ip, r2
 101ce74:	6025      	str	r5, [r4, #0]
 101ce76:	600a      	str	r2, [r1, #0]
 101ce78:	e7b8      	b.n	101cdec <__utf8_mbtowc+0x64>
 101ce7a:	2300      	movs	r3, #0
 101ce7c:	6023      	str	r3, [r4, #0]
 101ce7e:	6008      	str	r0, [r1, #0]
 101ce80:	2001      	movs	r0, #1
 101ce82:	b003      	add	sp, #12
 101ce84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101ce86:	f1a0 0cf0 	sub.w	ip, r0, #240	; 0xf0
 101ce8a:	f1bc 0f04 	cmp.w	ip, #4
 101ce8e:	d867      	bhi.n	101cf60 <__utf8_mbtowc+0x1d8>
 101ce90:	7120      	strb	r0, [r4, #4]
 101ce92:	2e00      	cmp	r6, #0
 101ce94:	d050      	beq.n	101cf38 <__utf8_mbtowc+0x1b0>
 101ce96:	f1b3 3fff 	cmp.w	r3, #4294967295
 101ce9a:	bf18      	it	ne
 101ce9c:	3301      	addne	r3, #1
 101ce9e:	2e01      	cmp	r6, #1
 101cea0:	bf18      	it	ne
 101cea2:	f894 c005 	ldrbne.w	ip, [r4, #5]
 101cea6:	d04b      	beq.n	101cf40 <__utf8_mbtowc+0x1b8>
 101cea8:	28f0      	cmp	r0, #240	; 0xf0
 101ceaa:	d056      	beq.n	101cf5a <__utf8_mbtowc+0x1d2>
 101ceac:	f1a0 0ef4 	sub.w	lr, r0, #244	; 0xf4
 101ceb0:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 101ceb4:	fabe fe8e 	clz	lr, lr
 101ceb8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 101cebc:	bfd8      	it	le
 101cebe:	f04f 0e00 	movle.w	lr, #0
 101cec2:	f1be 0f00 	cmp.w	lr, #0
 101cec6:	d14b      	bne.n	101cf60 <__utf8_mbtowc+0x1d8>
 101cec8:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 101cecc:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 101ced0:	d846      	bhi.n	101cf60 <__utf8_mbtowc+0x1d8>
 101ced2:	2e01      	cmp	r6, #1
 101ced4:	f884 c005 	strb.w	ip, [r4, #5]
 101ced8:	d047      	beq.n	101cf6a <__utf8_mbtowc+0x1e2>
 101ceda:	1c5e      	adds	r6, r3, #1
 101cedc:	6826      	ldr	r6, [r4, #0]
 101cede:	bf18      	it	ne
 101cee0:	3301      	addne	r3, #1
 101cee2:	2e02      	cmp	r6, #2
 101cee4:	d045      	beq.n	101cf72 <__utf8_mbtowc+0x1ea>
 101cee6:	79a6      	ldrb	r6, [r4, #6]
 101cee8:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
 101ceec:	2b3f      	cmp	r3, #63	; 0x3f
 101ceee:	d837      	bhi.n	101cf60 <__utf8_mbtowc+0x1d8>
 101cef0:	5d52      	ldrb	r2, [r2, r5]
 101cef2:	3501      	adds	r5, #1
 101cef4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 101cef8:	2b3f      	cmp	r3, #63	; 0x3f
 101cefa:	d831      	bhi.n	101cf60 <__utf8_mbtowc+0x1d8>
 101cefc:	0483      	lsls	r3, r0, #18
 101cefe:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
 101cf02:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 101cf06:	f40c 3c7c 	and.w	ip, ip, #258048	; 0x3f000
 101cf0a:	01b0      	lsls	r0, r6, #6
 101cf0c:	ea43 030c 	orr.w	r3, r3, ip
 101cf10:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
 101cf14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 101cf18:	4303      	orrs	r3, r0
 101cf1a:	4628      	mov	r0, r5
 101cf1c:	4313      	orrs	r3, r2
 101cf1e:	2200      	movs	r2, #0
 101cf20:	600b      	str	r3, [r1, #0]
 101cf22:	6022      	str	r2, [r4, #0]
 101cf24:	e762      	b.n	101cdec <__utf8_mbtowc+0x64>
 101cf26:	2601      	movs	r6, #1
 101cf28:	42b3      	cmp	r3, r6
 101cf2a:	6026      	str	r6, [r4, #0]
 101cf2c:	d912      	bls.n	101cf54 <__utf8_mbtowc+0x1cc>
 101cf2e:	f812 c005 	ldrb.w	ip, [r2, r5]
 101cf32:	2601      	movs	r6, #1
 101cf34:	4435      	add	r5, r6
 101cf36:	e778      	b.n	101ce2a <__utf8_mbtowc+0xa2>
 101cf38:	2601      	movs	r6, #1
 101cf3a:	42b3      	cmp	r3, r6
 101cf3c:	6026      	str	r6, [r4, #0]
 101cf3e:	d909      	bls.n	101cf54 <__utf8_mbtowc+0x1cc>
 101cf40:	f812 c005 	ldrb.w	ip, [r2, r5]
 101cf44:	2601      	movs	r6, #1
 101cf46:	4435      	add	r5, r6
 101cf48:	e7ae      	b.n	101cea8 <__utf8_mbtowc+0x120>
 101cf4a:	2602      	movs	r6, #2
 101cf4c:	42b3      	cmp	r3, r6
 101cf4e:	6026      	str	r6, [r4, #0]
 101cf50:	f47f af7b 	bne.w	101ce4a <__utf8_mbtowc+0xc2>
 101cf54:	f06f 0001 	mvn.w	r0, #1
 101cf58:	e748      	b.n	101cdec <__utf8_mbtowc+0x64>
 101cf5a:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 101cf5e:	dcb3      	bgt.n	101cec8 <__utf8_mbtowc+0x140>
 101cf60:	238a      	movs	r3, #138	; 0x8a
 101cf62:	f04f 30ff 	mov.w	r0, #4294967295
 101cf66:	603b      	str	r3, [r7, #0]
 101cf68:	e740      	b.n	101cdec <__utf8_mbtowc+0x64>
 101cf6a:	2602      	movs	r6, #2
 101cf6c:	42b3      	cmp	r3, r6
 101cf6e:	6026      	str	r6, [r4, #0]
 101cf70:	d0f0      	beq.n	101cf54 <__utf8_mbtowc+0x1cc>
 101cf72:	5d56      	ldrb	r6, [r2, r5]
 101cf74:	3501      	adds	r5, #1
 101cf76:	f1a6 0e80 	sub.w	lr, r6, #128	; 0x80
 101cf7a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 101cf7e:	d8ef      	bhi.n	101cf60 <__utf8_mbtowc+0x1d8>
 101cf80:	f04f 0e03 	mov.w	lr, #3
 101cf84:	4573      	cmp	r3, lr
 101cf86:	71a6      	strb	r6, [r4, #6]
 101cf88:	f8c4 e000 	str.w	lr, [r4]
 101cf8c:	d1b0      	bne.n	101cef0 <__utf8_mbtowc+0x168>
 101cf8e:	e7e1      	b.n	101cf54 <__utf8_mbtowc+0x1cc>

0101cf90 <__sjis_mbtowc>:
 101cf90:	b4f0      	push	{r4, r5, r6, r7}
 101cf92:	b082      	sub	sp, #8
 101cf94:	4606      	mov	r6, r0
 101cf96:	9f06      	ldr	r7, [sp, #24]
 101cf98:	2900      	cmp	r1, #0
 101cf9a:	d035      	beq.n	101d008 <__sjis_mbtowc+0x78>
 101cf9c:	4610      	mov	r0, r2
 101cf9e:	b332      	cbz	r2, 101cfee <__sjis_mbtowc+0x5e>
 101cfa0:	2b00      	cmp	r3, #0
 101cfa2:	d033      	beq.n	101d00c <__sjis_mbtowc+0x7c>
 101cfa4:	6838      	ldr	r0, [r7, #0]
 101cfa6:	7814      	ldrb	r4, [r2, #0]
 101cfa8:	bb20      	cbnz	r0, 101cff4 <__sjis_mbtowc+0x64>
 101cfaa:	f1a4 0581 	sub.w	r5, r4, #129	; 0x81
 101cfae:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
 101cfb2:	280f      	cmp	r0, #15
 101cfb4:	bf88      	it	hi
 101cfb6:	2d1e      	cmphi	r5, #30
 101cfb8:	d81e      	bhi.n	101cff8 <__sjis_mbtowc+0x68>
 101cfba:	2001      	movs	r0, #1
 101cfbc:	4283      	cmp	r3, r0
 101cfbe:	713c      	strb	r4, [r7, #4]
 101cfc0:	6038      	str	r0, [r7, #0]
 101cfc2:	d923      	bls.n	101d00c <__sjis_mbtowc+0x7c>
 101cfc4:	7854      	ldrb	r4, [r2, #1]
 101cfc6:	2002      	movs	r0, #2
 101cfc8:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 101cfcc:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
 101cfd0:	2a7c      	cmp	r2, #124	; 0x7c
 101cfd2:	bf88      	it	hi
 101cfd4:	2b3e      	cmphi	r3, #62	; 0x3e
 101cfd6:	bf95      	itete	ls
 101cfd8:	793a      	ldrbls	r2, [r7, #4]
 101cfda:	f04f 30ff 	movhi.w	r0, #4294967295
 101cfde:	2300      	movls	r3, #0
 101cfe0:	238a      	movhi	r3, #138	; 0x8a
 101cfe2:	bf8f      	iteee	hi
 101cfe4:	6033      	strhi	r3, [r6, #0]
 101cfe6:	eb04 2402 	addls.w	r4, r4, r2, lsl #8
 101cfea:	600c      	strls	r4, [r1, #0]
 101cfec:	603b      	strls	r3, [r7, #0]
 101cfee:	b002      	add	sp, #8
 101cff0:	bcf0      	pop	{r4, r5, r6, r7}
 101cff2:	4770      	bx	lr
 101cff4:	2801      	cmp	r0, #1
 101cff6:	d0e7      	beq.n	101cfc8 <__sjis_mbtowc+0x38>
 101cff8:	600c      	str	r4, [r1, #0]
 101cffa:	7810      	ldrb	r0, [r2, #0]
 101cffc:	3000      	adds	r0, #0
 101cffe:	bf18      	it	ne
 101d000:	2001      	movne	r0, #1
 101d002:	b002      	add	sp, #8
 101d004:	bcf0      	pop	{r4, r5, r6, r7}
 101d006:	4770      	bx	lr
 101d008:	a901      	add	r1, sp, #4
 101d00a:	e7c7      	b.n	101cf9c <__sjis_mbtowc+0xc>
 101d00c:	f06f 0001 	mvn.w	r0, #1
 101d010:	e7ed      	b.n	101cfee <__sjis_mbtowc+0x5e>
 101d012:	bf00      	nop

0101d014 <__eucjp_mbtowc>:
 101d014:	b4f0      	push	{r4, r5, r6, r7}
 101d016:	b082      	sub	sp, #8
 101d018:	4607      	mov	r7, r0
 101d01a:	9e06      	ldr	r6, [sp, #24]
 101d01c:	2900      	cmp	r1, #0
 101d01e:	d040      	beq.n	101d0a2 <__eucjp_mbtowc+0x8e>
 101d020:	4610      	mov	r0, r2
 101d022:	b37a      	cbz	r2, 101d084 <__eucjp_mbtowc+0x70>
 101d024:	2b00      	cmp	r3, #0
 101d026:	d048      	beq.n	101d0ba <__eucjp_mbtowc+0xa6>
 101d028:	6830      	ldr	r0, [r6, #0]
 101d02a:	7814      	ldrb	r4, [r2, #0]
 101d02c:	bb68      	cbnz	r0, 101d08a <__eucjp_mbtowc+0x76>
 101d02e:	f1a4 058e 	sub.w	r5, r4, #142	; 0x8e
 101d032:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
 101d036:	285d      	cmp	r0, #93	; 0x5d
 101d038:	bf88      	it	hi
 101d03a:	2d01      	cmphi	r5, #1
 101d03c:	d829      	bhi.n	101d092 <__eucjp_mbtowc+0x7e>
 101d03e:	2001      	movs	r0, #1
 101d040:	4283      	cmp	r3, r0
 101d042:	7134      	strb	r4, [r6, #4]
 101d044:	6030      	str	r0, [r6, #0]
 101d046:	d938      	bls.n	101d0ba <__eucjp_mbtowc+0xa6>
 101d048:	7854      	ldrb	r4, [r2, #1]
 101d04a:	2002      	movs	r0, #2
 101d04c:	f1a4 05a1 	sub.w	r5, r4, #161	; 0xa1
 101d050:	2d5d      	cmp	r5, #93	; 0x5d
 101d052:	d835      	bhi.n	101d0c0 <__eucjp_mbtowc+0xac>
 101d054:	7935      	ldrb	r5, [r6, #4]
 101d056:	2d8f      	cmp	r5, #143	; 0x8f
 101d058:	d125      	bne.n	101d0a6 <__eucjp_mbtowc+0x92>
 101d05a:	4298      	cmp	r0, r3
 101d05c:	7174      	strb	r4, [r6, #5]
 101d05e:	f04f 0402 	mov.w	r4, #2
 101d062:	6034      	str	r4, [r6, #0]
 101d064:	4604      	mov	r4, r0
 101d066:	d228      	bcs.n	101d0ba <__eucjp_mbtowc+0xa6>
 101d068:	5d14      	ldrb	r4, [r2, r4]
 101d06a:	3001      	adds	r0, #1
 101d06c:	f1a4 03a1 	sub.w	r3, r4, #161	; 0xa1
 101d070:	2b5d      	cmp	r3, #93	; 0x5d
 101d072:	d825      	bhi.n	101d0c0 <__eucjp_mbtowc+0xac>
 101d074:	7972      	ldrb	r2, [r6, #5]
 101d076:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 101d07a:	2300      	movs	r3, #0
 101d07c:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 101d080:	600c      	str	r4, [r1, #0]
 101d082:	6033      	str	r3, [r6, #0]
 101d084:	b002      	add	sp, #8
 101d086:	bcf0      	pop	{r4, r5, r6, r7}
 101d088:	4770      	bx	lr
 101d08a:	2801      	cmp	r0, #1
 101d08c:	d0de      	beq.n	101d04c <__eucjp_mbtowc+0x38>
 101d08e:	2802      	cmp	r0, #2
 101d090:	d011      	beq.n	101d0b6 <__eucjp_mbtowc+0xa2>
 101d092:	600c      	str	r4, [r1, #0]
 101d094:	7810      	ldrb	r0, [r2, #0]
 101d096:	3000      	adds	r0, #0
 101d098:	bf18      	it	ne
 101d09a:	2001      	movne	r0, #1
 101d09c:	b002      	add	sp, #8
 101d09e:	bcf0      	pop	{r4, r5, r6, r7}
 101d0a0:	4770      	bx	lr
 101d0a2:	a901      	add	r1, sp, #4
 101d0a4:	e7bc      	b.n	101d020 <__eucjp_mbtowc+0xc>
 101d0a6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 101d0aa:	2300      	movs	r3, #0
 101d0ac:	600c      	str	r4, [r1, #0]
 101d0ae:	6033      	str	r3, [r6, #0]
 101d0b0:	b002      	add	sp, #8
 101d0b2:	bcf0      	pop	{r4, r5, r6, r7}
 101d0b4:	4770      	bx	lr
 101d0b6:	2001      	movs	r0, #1
 101d0b8:	e7d8      	b.n	101d06c <__eucjp_mbtowc+0x58>
 101d0ba:	f06f 0001 	mvn.w	r0, #1
 101d0be:	e7e1      	b.n	101d084 <__eucjp_mbtowc+0x70>
 101d0c0:	238a      	movs	r3, #138	; 0x8a
 101d0c2:	f04f 30ff 	mov.w	r0, #4294967295
 101d0c6:	603b      	str	r3, [r7, #0]
 101d0c8:	e7dc      	b.n	101d084 <__eucjp_mbtowc+0x70>
 101d0ca:	bf00      	nop

0101d0cc <__jis_mbtowc>:
 101d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101d0d0:	b083      	sub	sp, #12
 101d0d2:	4682      	mov	sl, r0
 101d0d4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 101d0d8:	2900      	cmp	r1, #0
 101d0da:	d042      	beq.n	101d162 <__jis_mbtowc+0x96>
 101d0dc:	2a00      	cmp	r2, #0
 101d0de:	d043      	beq.n	101d168 <__jis_mbtowc+0x9c>
 101d0e0:	2b00      	cmp	r3, #0
 101d0e2:	d07d      	beq.n	101d1e0 <__jis_mbtowc+0x114>
 101d0e4:	f89e 4000 	ldrb.w	r4, [lr]
 101d0e8:	4610      	mov	r0, r2
 101d0ea:	f647 57b0 	movw	r7, #32176	; 0x7db0
 101d0ee:	3a01      	subs	r2, #1
 101d0f0:	f1c0 0801 	rsb	r8, r0, #1
 101d0f4:	f2c0 1706 	movt	r7, #262	; 0x106
 101d0f8:	7855      	ldrb	r5, [r2, #1]
 101d0fa:	eb02 0c08 	add.w	ip, r2, r8
 101d0fe:	f102 0b01 	add.w	fp, r2, #1
 101d102:	2d28      	cmp	r5, #40	; 0x28
 101d104:	d06a      	beq.n	101d1dc <__jis_mbtowc+0x110>
 101d106:	d81d      	bhi.n	101d144 <__jis_mbtowc+0x78>
 101d108:	2d1b      	cmp	r5, #27
 101d10a:	bf08      	it	eq
 101d10c:	2600      	moveq	r6, #0
 101d10e:	d00a      	beq.n	101d126 <__jis_mbtowc+0x5a>
 101d110:	2d24      	cmp	r5, #36	; 0x24
 101d112:	bf08      	it	eq
 101d114:	2601      	moveq	r6, #1
 101d116:	d006      	beq.n	101d126 <__jis_mbtowc+0x5a>
 101d118:	b30d      	cbz	r5, 101d15e <__jis_mbtowc+0x92>
 101d11a:	f1a5 0621 	sub.w	r6, r5, #33	; 0x21
 101d11e:	2e5e      	cmp	r6, #94	; 0x5e
 101d120:	bf34      	ite	cc
 101d122:	2607      	movcc	r6, #7
 101d124:	2608      	movcs	r6, #8
 101d126:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 101d12a:	443c      	add	r4, r7
 101d12c:	eb04 0906 	add.w	r9, r4, r6
 101d130:	5da4      	ldrb	r4, [r4, r6]
 101d132:	f899 6048 	ldrb.w	r6, [r9, #72]	; 0x48
 101d136:	2e05      	cmp	r6, #5
 101d138:	d855      	bhi.n	101d1e6 <__jis_mbtowc+0x11a>
 101d13a:	e8df f006 	tbb	[pc, r6]
 101d13e:	2d23      	.short	0x2d23
 101d140:	1b4c4839 	.word	0x1b4c4839
 101d144:	2d42      	cmp	r5, #66	; 0x42
 101d146:	bf08      	it	eq
 101d148:	2604      	moveq	r6, #4
 101d14a:	d0ec      	beq.n	101d126 <__jis_mbtowc+0x5a>
 101d14c:	2d4a      	cmp	r5, #74	; 0x4a
 101d14e:	bf08      	it	eq
 101d150:	2605      	moveq	r6, #5
 101d152:	d0e8      	beq.n	101d126 <__jis_mbtowc+0x5a>
 101d154:	2d40      	cmp	r5, #64	; 0x40
 101d156:	bf08      	it	eq
 101d158:	2603      	moveq	r6, #3
 101d15a:	d1de      	bne.n	101d11a <__jis_mbtowc+0x4e>
 101d15c:	e7e3      	b.n	101d126 <__jis_mbtowc+0x5a>
 101d15e:	2606      	movs	r6, #6
 101d160:	e7e1      	b.n	101d126 <__jis_mbtowc+0x5a>
 101d162:	a901      	add	r1, sp, #4
 101d164:	2a00      	cmp	r2, #0
 101d166:	d1bb      	bne.n	101d0e0 <__jis_mbtowc+0x14>
 101d168:	2001      	movs	r0, #1
 101d16a:	f8ce 2000 	str.w	r2, [lr]
 101d16e:	b003      	add	sp, #12
 101d170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101d174:	2300      	movs	r3, #0
 101d176:	f8ce 3000 	str.w	r3, [lr]
 101d17a:	4618      	mov	r0, r3
 101d17c:	600b      	str	r3, [r1, #0]
 101d17e:	b003      	add	sp, #12
 101d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101d184:	2300      	movs	r3, #0
 101d186:	f8ce 3000 	str.w	r3, [lr]
 101d18a:	7803      	ldrb	r3, [r0, #0]
 101d18c:	f10c 0001 	add.w	r0, ip, #1
 101d190:	600b      	str	r3, [r1, #0]
 101d192:	b003      	add	sp, #12
 101d194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101d198:	f88e 5004 	strb.w	r5, [lr, #4]
 101d19c:	eb0b 0508 	add.w	r5, fp, r8
 101d1a0:	429d      	cmp	r5, r3
 101d1a2:	465a      	mov	r2, fp
 101d1a4:	d3a8      	bcc.n	101d0f8 <__jis_mbtowc+0x2c>
 101d1a6:	f8ce 4000 	str.w	r4, [lr]
 101d1aa:	f06f 0001 	mvn.w	r0, #1
 101d1ae:	e7e6      	b.n	101d17e <__jis_mbtowc+0xb2>
 101d1b0:	f89e 2004 	ldrb.w	r2, [lr, #4]
 101d1b4:	2301      	movs	r3, #1
 101d1b6:	f8ce 3000 	str.w	r3, [lr]
 101d1ba:	eb0c 0003 	add.w	r0, ip, r3
 101d1be:	f89b 3000 	ldrb.w	r3, [fp]
 101d1c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 101d1c6:	600b      	str	r3, [r1, #0]
 101d1c8:	b003      	add	sp, #12
 101d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101d1ce:	1c90      	adds	r0, r2, #2
 101d1d0:	eb0b 0508 	add.w	r5, fp, r8
 101d1d4:	e7e4      	b.n	101d1a0 <__jis_mbtowc+0xd4>
 101d1d6:	eb0b 0508 	add.w	r5, fp, r8
 101d1da:	e7e1      	b.n	101d1a0 <__jis_mbtowc+0xd4>
 101d1dc:	2602      	movs	r6, #2
 101d1de:	e7a2      	b.n	101d126 <__jis_mbtowc+0x5a>
 101d1e0:	f06f 0001 	mvn.w	r0, #1
 101d1e4:	e7cb      	b.n	101d17e <__jis_mbtowc+0xb2>
 101d1e6:	238a      	movs	r3, #138	; 0x8a
 101d1e8:	f04f 30ff 	mov.w	r0, #4294967295
 101d1ec:	f8ca 3000 	str.w	r3, [sl]
 101d1f0:	e7c5      	b.n	101d17e <__jis_mbtowc+0xb2>
 101d1f2:	bf00      	nop
	...

0101d200 <memcpy>:
 101d200:	e1a0c000 	mov	ip, r0
 101d204:	e3520040 	cmp	r2, #64	; 0x40
 101d208:	aa000028 	bge	101d2b0 <memcpy+0xb0>
 101d20c:	e202303c 	and	r3, r2, #60	; 0x3c
 101d210:	e08cc003 	add	ip, ip, r3
 101d214:	e0811003 	add	r1, r1, r3
 101d218:	e263303a 	rsb	r3, r3, #58	; 0x3a
 101d21c:	e08ff083 	add	pc, pc, r3, lsl #1
 101d220:	e511303c 	ldr	r3, [r1, #-60]	; 0xffffffc4
 101d224:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
 101d228:	e5113038 	ldr	r3, [r1, #-56]	; 0xffffffc8
 101d22c:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
 101d230:	e5113034 	ldr	r3, [r1, #-52]	; 0xffffffcc
 101d234:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
 101d238:	e5113030 	ldr	r3, [r1, #-48]	; 0xffffffd0
 101d23c:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
 101d240:	e511302c 	ldr	r3, [r1, #-44]	; 0xffffffd4
 101d244:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
 101d248:	e5113028 	ldr	r3, [r1, #-40]	; 0xffffffd8
 101d24c:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
 101d250:	e5113024 	ldr	r3, [r1, #-36]	; 0xffffffdc
 101d254:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
 101d258:	e5113020 	ldr	r3, [r1, #-32]	; 0xffffffe0
 101d25c:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
 101d260:	e511301c 	ldr	r3, [r1, #-28]	; 0xffffffe4
 101d264:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
 101d268:	e5113018 	ldr	r3, [r1, #-24]	; 0xffffffe8
 101d26c:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
 101d270:	e5113014 	ldr	r3, [r1, #-20]	; 0xffffffec
 101d274:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
 101d278:	e5113010 	ldr	r3, [r1, #-16]
 101d27c:	e50c3010 	str	r3, [ip, #-16]
 101d280:	e511300c 	ldr	r3, [r1, #-12]
 101d284:	e50c300c 	str	r3, [ip, #-12]
 101d288:	e5113008 	ldr	r3, [r1, #-8]
 101d28c:	e50c3008 	str	r3, [ip, #-8]
 101d290:	e5113004 	ldr	r3, [r1, #-4]
 101d294:	e50c3004 	str	r3, [ip, #-4]
 101d298:	e1b02f82 	lsls	r2, r2, #31
 101d29c:	20d130b2 	ldrhcs	r3, [r1], #2
 101d2a0:	15d11000 	ldrbne	r1, [r1]
 101d2a4:	20cc30b2 	strhcs	r3, [ip], #2
 101d2a8:	15cc1000 	strbne	r1, [ip]
 101d2ac:	e12fff1e 	bx	lr
 101d2b0:	e52da020 	str	sl, [sp, #-32]!	; 0xffffffe0
 101d2b4:	e201a007 	and	sl, r1, #7
 101d2b8:	e20c3007 	and	r3, ip, #7
 101d2bc:	e153000a 	cmp	r3, sl
 101d2c0:	1a0000f1 	bne	101d68c <memcpy+0x48c>
 101d2c4:	eeb00a40 	vmov.f32	s0, s0
 101d2c8:	e1b0ae8c 	lsls	sl, ip, #29
 101d2cc:	0a000008 	beq	101d2f4 <memcpy+0xf4>
 101d2d0:	e27aa000 	rsbs	sl, sl, #0
 101d2d4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 101d2d8:	44913004 	ldrmi	r3, [r1], #4
 101d2dc:	448c3004 	strmi	r3, [ip], #4
 101d2e0:	e1b0a10a 	lsls	sl, sl, #2
 101d2e4:	20d130b2 	ldrhcs	r3, [r1], #2
 101d2e8:	14d1a001 	ldrbne	sl, [r1], #1
 101d2ec:	20cc30b2 	strhcs	r3, [ip], #2
 101d2f0:	14cca001 	strbne	sl, [ip], #1
 101d2f4:	e252a040 	subs	sl, r2, #64	; 0x40
 101d2f8:	ba000017 	blt	101d35c <memcpy+0x15c>
 101d2fc:	e35a0c02 	cmp	sl, #512	; 0x200
 101d300:	aa000032 	bge	101d3d0 <memcpy+0x1d0>
 101d304:	ed910b00 	vldr	d0, [r1]
 101d308:	e25aa040 	subs	sl, sl, #64	; 0x40
 101d30c:	ed911b02 	vldr	d1, [r1, #8]
 101d310:	ed8c0b00 	vstr	d0, [ip]
 101d314:	ed910b04 	vldr	d0, [r1, #16]
 101d318:	ed8c1b02 	vstr	d1, [ip, #8]
 101d31c:	ed911b06 	vldr	d1, [r1, #24]
 101d320:	ed8c0b04 	vstr	d0, [ip, #16]
 101d324:	ed910b08 	vldr	d0, [r1, #32]
 101d328:	ed8c1b06 	vstr	d1, [ip, #24]
 101d32c:	ed911b0a 	vldr	d1, [r1, #40]	; 0x28
 101d330:	ed8c0b08 	vstr	d0, [ip, #32]
 101d334:	ed910b0c 	vldr	d0, [r1, #48]	; 0x30
 101d338:	ed8c1b0a 	vstr	d1, [ip, #40]	; 0x28
 101d33c:	ed911b0e 	vldr	d1, [r1, #56]	; 0x38
 101d340:	ed8c0b0c 	vstr	d0, [ip, #48]	; 0x30
 101d344:	e2811040 	add	r1, r1, #64	; 0x40
 101d348:	ed8c1b0e 	vstr	d1, [ip, #56]	; 0x38
 101d34c:	e28cc040 	add	ip, ip, #64	; 0x40
 101d350:	aaffffeb 	bge	101d304 <memcpy+0x104>
 101d354:	e31a003f 	tst	sl, #63	; 0x3f
 101d358:	0a00001a 	beq	101d3c8 <memcpy+0x1c8>
 101d35c:	e20a3038 	and	r3, sl, #56	; 0x38
 101d360:	e08cc003 	add	ip, ip, r3
 101d364:	e0811003 	add	r1, r1, r3
 101d368:	e2633034 	rsb	r3, r3, #52	; 0x34
 101d36c:	e08ff003 	add	pc, pc, r3
 101d370:	ed110b0e 	vldr	d0, [r1, #-56]	; 0xffffffc8
 101d374:	ed0c0b0e 	vstr	d0, [ip, #-56]	; 0xffffffc8
 101d378:	ed110b0c 	vldr	d0, [r1, #-48]	; 0xffffffd0
 101d37c:	ed0c0b0c 	vstr	d0, [ip, #-48]	; 0xffffffd0
 101d380:	ed110b0a 	vldr	d0, [r1, #-40]	; 0xffffffd8
 101d384:	ed0c0b0a 	vstr	d0, [ip, #-40]	; 0xffffffd8
 101d388:	ed110b08 	vldr	d0, [r1, #-32]	; 0xffffffe0
 101d38c:	ed0c0b08 	vstr	d0, [ip, #-32]	; 0xffffffe0
 101d390:	ed110b06 	vldr	d0, [r1, #-24]	; 0xffffffe8
 101d394:	ed0c0b06 	vstr	d0, [ip, #-24]	; 0xffffffe8
 101d398:	ed110b04 	vldr	d0, [r1, #-16]
 101d39c:	ed0c0b04 	vstr	d0, [ip, #-16]
 101d3a0:	ed110b02 	vldr	d0, [r1, #-8]
 101d3a4:	ed0c0b02 	vstr	d0, [ip, #-8]
 101d3a8:	e31a0004 	tst	sl, #4
 101d3ac:	14913004 	ldrne	r3, [r1], #4
 101d3b0:	148c3004 	strne	r3, [ip], #4
 101d3b4:	e1b0af8a 	lsls	sl, sl, #31
 101d3b8:	20d130b2 	ldrhcs	r3, [r1], #2
 101d3bc:	15d1a000 	ldrbne	sl, [r1]
 101d3c0:	20cc30b2 	strhcs	r3, [ip], #2
 101d3c4:	15cca000 	strbne	sl, [ip]
 101d3c8:	e49da020 	ldr	sl, [sp], #32
 101d3cc:	e12fff1e 	bx	lr
 101d3d0:	ed913b00 	vldr	d3, [r1]
 101d3d4:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 101d3d8:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 101d3dc:	ed916b30 	vldr	d6, [r1, #192]	; 0xc0
 101d3e0:	ed917b40 	vldr	d7, [r1, #256]	; 0x100
 101d3e4:	ed910b02 	vldr	d0, [r1, #8]
 101d3e8:	ed911b04 	vldr	d1, [r1, #16]
 101d3ec:	ed912b06 	vldr	d2, [r1, #24]
 101d3f0:	e2811020 	add	r1, r1, #32
 101d3f4:	e25aad0a 	subs	sl, sl, #640	; 0x280
 101d3f8:	ba000055 	blt	101d554 <memcpy+0x354>
 101d3fc:	ed8c3b00 	vstr	d3, [ip]
 101d400:	ed913b00 	vldr	d3, [r1]
 101d404:	ed8c0b02 	vstr	d0, [ip, #8]
 101d408:	ed910b02 	vldr	d0, [r1, #8]
 101d40c:	ed8c1b04 	vstr	d1, [ip, #16]
 101d410:	ed911b04 	vldr	d1, [r1, #16]
 101d414:	ed8c2b06 	vstr	d2, [ip, #24]
 101d418:	ed912b06 	vldr	d2, [r1, #24]
 101d41c:	ed8c3b08 	vstr	d3, [ip, #32]
 101d420:	ed913b48 	vldr	d3, [r1, #288]	; 0x120
 101d424:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101d428:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101d42c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101d430:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101d434:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101d438:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101d43c:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 101d440:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 101d444:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101d448:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101d44c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101d450:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101d454:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101d458:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101d45c:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 101d460:	ed914b58 	vldr	d4, [r1, #352]	; 0x160
 101d464:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101d468:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 101d46c:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101d470:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 101d474:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101d478:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 101d47c:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 101d480:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 101d484:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 101d488:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 101d48c:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 101d490:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 101d494:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 101d498:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 101d49c:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 101d4a0:	ed915b68 	vldr	d5, [r1, #416]	; 0x1a0
 101d4a4:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 101d4a8:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 101d4ac:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 101d4b0:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 101d4b4:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 101d4b8:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 101d4bc:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 101d4c0:	e28110c0 	add	r1, r1, #192	; 0xc0
 101d4c4:	ed8c6b00 	vstr	d6, [ip]
 101d4c8:	ed916b00 	vldr	d6, [r1]
 101d4cc:	ed8c0b02 	vstr	d0, [ip, #8]
 101d4d0:	ed910b02 	vldr	d0, [r1, #8]
 101d4d4:	ed8c1b04 	vstr	d1, [ip, #16]
 101d4d8:	ed911b04 	vldr	d1, [r1, #16]
 101d4dc:	ed8c2b06 	vstr	d2, [ip, #24]
 101d4e0:	ed912b06 	vldr	d2, [r1, #24]
 101d4e4:	ed8c6b08 	vstr	d6, [ip, #32]
 101d4e8:	ed916b48 	vldr	d6, [r1, #288]	; 0x120
 101d4ec:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101d4f0:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101d4f4:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101d4f8:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101d4fc:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101d500:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101d504:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 101d508:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 101d50c:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101d510:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101d514:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101d518:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101d51c:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101d520:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101d524:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 101d528:	ed917b58 	vldr	d7, [r1, #352]	; 0x160
 101d52c:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101d530:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 101d534:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101d538:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 101d53c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101d540:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 101d544:	e28cc080 	add	ip, ip, #128	; 0x80
 101d548:	e2811080 	add	r1, r1, #128	; 0x80
 101d54c:	e25aad05 	subs	sl, sl, #320	; 0x140
 101d550:	aaffffa9 	bge	101d3fc <memcpy+0x1fc>
 101d554:	ed8c3b00 	vstr	d3, [ip]
 101d558:	ed913b00 	vldr	d3, [r1]
 101d55c:	ed8c0b02 	vstr	d0, [ip, #8]
 101d560:	ed910b02 	vldr	d0, [r1, #8]
 101d564:	ed8c1b04 	vstr	d1, [ip, #16]
 101d568:	ed911b04 	vldr	d1, [r1, #16]
 101d56c:	ed8c2b06 	vstr	d2, [ip, #24]
 101d570:	ed912b06 	vldr	d2, [r1, #24]
 101d574:	ed8c3b08 	vstr	d3, [ip, #32]
 101d578:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101d57c:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101d580:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101d584:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101d588:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101d58c:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101d590:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 101d594:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 101d598:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101d59c:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101d5a0:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101d5a4:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101d5a8:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101d5ac:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101d5b0:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 101d5b4:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101d5b8:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 101d5bc:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101d5c0:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 101d5c4:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101d5c8:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 101d5cc:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 101d5d0:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 101d5d4:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 101d5d8:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 101d5dc:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 101d5e0:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 101d5e4:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 101d5e8:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 101d5ec:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 101d5f0:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 101d5f4:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 101d5f8:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 101d5fc:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 101d600:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 101d604:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 101d608:	e28110c0 	add	r1, r1, #192	; 0xc0
 101d60c:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 101d610:	ed8c6b00 	vstr	d6, [ip]
 101d614:	ed916b00 	vldr	d6, [r1]
 101d618:	ed8c0b02 	vstr	d0, [ip, #8]
 101d61c:	ed910b02 	vldr	d0, [r1, #8]
 101d620:	ed8c1b04 	vstr	d1, [ip, #16]
 101d624:	ed911b04 	vldr	d1, [r1, #16]
 101d628:	ed8c2b06 	vstr	d2, [ip, #24]
 101d62c:	ed912b06 	vldr	d2, [r1, #24]
 101d630:	ed8c6b08 	vstr	d6, [ip, #32]
 101d634:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101d638:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101d63c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101d640:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101d644:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101d648:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101d64c:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 101d650:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 101d654:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101d658:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101d65c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101d660:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101d664:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101d668:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101d66c:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 101d670:	e2811060 	add	r1, r1, #96	; 0x60
 101d674:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101d678:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101d67c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101d680:	e28cc080 	add	ip, ip, #128	; 0x80
 101d684:	e28aad05 	add	sl, sl, #320	; 0x140
 101d688:	eaffff1d 	b	101d304 <memcpy+0x104>
 101d68c:	f5d1f000 	pld	[r1]
 101d690:	f5d1f040 	pld	[r1, #64]	; 0x40
 101d694:	e1b0ae8c 	lsls	sl, ip, #29
 101d698:	f5d1f080 	pld	[r1, #128]	; 0x80
 101d69c:	0a000008 	beq	101d6c4 <memcpy+0x4c4>
 101d6a0:	e27aa000 	rsbs	sl, sl, #0
 101d6a4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 101d6a8:	44913004 	ldrmi	r3, [r1], #4
 101d6ac:	448c3004 	strmi	r3, [ip], #4
 101d6b0:	e1b0a10a 	lsls	sl, sl, #2
 101d6b4:	14d13001 	ldrbne	r3, [r1], #1
 101d6b8:	20d1a0b2 	ldrhcs	sl, [r1], #2
 101d6bc:	14cc3001 	strbne	r3, [ip], #1
 101d6c0:	20cca0b2 	strhcs	sl, [ip], #2
 101d6c4:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
 101d6c8:	e2522040 	subs	r2, r2, #64	; 0x40
 101d6cc:	449da020 	ldrmi	sl, [sp], #32
 101d6d0:	4afffecd 	bmi	101d20c <memcpy+0xc>
 101d6d4:	f5d1f100 	pld	[r1, #256]	; 0x100
 101d6d8:	e2411004 	sub	r1, r1, #4
 101d6dc:	e24cc008 	sub	ip, ip, #8
 101d6e0:	e252a040 	subs	sl, r2, #64	; 0x40
 101d6e4:	e5912004 	ldr	r2, [r1, #4]
 101d6e8:	e5913008 	ldr	r3, [r1, #8]
 101d6ec:	e1cd40f8 	strd	r4, [sp, #8]
 101d6f0:	e591400c 	ldr	r4, [r1, #12]
 101d6f4:	e5915010 	ldr	r5, [r1, #16]
 101d6f8:	e1cd61f0 	strd	r6, [sp, #16]
 101d6fc:	e5916014 	ldr	r6, [r1, #20]
 101d700:	e5917018 	ldr	r7, [r1, #24]
 101d704:	e1cd81f8 	strd	r8, [sp, #24]
 101d708:	e591801c 	ldr	r8, [r1, #28]
 101d70c:	e5b19020 	ldr	r9, [r1, #32]!
 101d710:	ea000018 	b	101d778 <memcpy+0x578>
 101d714:	e1a00000 	nop			; (mov r0, r0)
 101d718:	e1a00000 	nop			; (mov r0, r0)
 101d71c:	e1a00000 	nop			; (mov r0, r0)
 101d720:	e1a00000 	nop			; (mov r0, r0)
 101d724:	e1a00000 	nop			; (mov r0, r0)
 101d728:	e1a00000 	nop			; (mov r0, r0)
 101d72c:	e1a00000 	nop			; (mov r0, r0)
 101d730:	e1a00000 	nop			; (mov r0, r0)
 101d734:	e1a00000 	nop			; (mov r0, r0)
 101d738:	e1a00000 	nop			; (mov r0, r0)
 101d73c:	e1a00000 	nop			; (mov r0, r0)
 101d740:	f5d1f124 	pld	[r1, #292]	; 0x124
 101d744:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 101d748:	e5912024 	ldr	r2, [r1, #36]	; 0x24
 101d74c:	e5913028 	ldr	r3, [r1, #40]	; 0x28
 101d750:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 101d754:	e591402c 	ldr	r4, [r1, #44]	; 0x2c
 101d758:	e5915030 	ldr	r5, [r1, #48]	; 0x30
 101d75c:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 101d760:	e5916034 	ldr	r6, [r1, #52]	; 0x34
 101d764:	e5917038 	ldr	r7, [r1, #56]	; 0x38
 101d768:	e1ec84f0 	strd	r8, [ip, #64]!	; 0x40
 101d76c:	e591803c 	ldr	r8, [r1, #60]	; 0x3c
 101d770:	e5b19040 	ldr	r9, [r1, #64]!	; 0x40
 101d774:	e25aa040 	subs	sl, sl, #64	; 0x40
 101d778:	e1cc20f8 	strd	r2, [ip, #8]
 101d77c:	e5912004 	ldr	r2, [r1, #4]
 101d780:	e5913008 	ldr	r3, [r1, #8]
 101d784:	e1cc41f0 	strd	r4, [ip, #16]
 101d788:	e591400c 	ldr	r4, [r1, #12]
 101d78c:	e5915010 	ldr	r5, [r1, #16]
 101d790:	e1cc61f8 	strd	r6, [ip, #24]
 101d794:	e5916014 	ldr	r6, [r1, #20]
 101d798:	e5917018 	ldr	r7, [r1, #24]
 101d79c:	e1cc82f0 	strd	r8, [ip, #32]
 101d7a0:	e591801c 	ldr	r8, [r1, #28]
 101d7a4:	e5919020 	ldr	r9, [r1, #32]
 101d7a8:	2affffe4 	bcs	101d740 <memcpy+0x540>
 101d7ac:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 101d7b0:	e2811024 	add	r1, r1, #36	; 0x24
 101d7b4:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 101d7b8:	e1cd40d8 	ldrd	r4, [sp, #8]
 101d7bc:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 101d7c0:	e1cd61d0 	ldrd	r6, [sp, #16]
 101d7c4:	e1cc84f0 	strd	r8, [ip, #64]	; 0x40
 101d7c8:	e1cd81d8 	ldrd	r8, [sp, #24]
 101d7cc:	e28cc048 	add	ip, ip, #72	; 0x48
 101d7d0:	e21a203f 	ands	r2, sl, #63	; 0x3f
 101d7d4:	e49da020 	ldr	sl, [sp], #32
 101d7d8:	1afffe8b 	bne	101d20c <memcpy+0xc>
 101d7dc:	e12fff1e 	bx	lr

0101d7e0 <memmove>:
 101d7e0:	4288      	cmp	r0, r1
 101d7e2:	b4f0      	push	{r4, r5, r6, r7}
 101d7e4:	d90d      	bls.n	101d802 <memmove+0x22>
 101d7e6:	188b      	adds	r3, r1, r2
 101d7e8:	4283      	cmp	r3, r0
 101d7ea:	d90a      	bls.n	101d802 <memmove+0x22>
 101d7ec:	1884      	adds	r4, r0, r2
 101d7ee:	b132      	cbz	r2, 101d7fe <memmove+0x1e>
 101d7f0:	4622      	mov	r2, r4
 101d7f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 101d7f6:	4299      	cmp	r1, r3
 101d7f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 101d7fc:	d1f9      	bne.n	101d7f2 <memmove+0x12>
 101d7fe:	bcf0      	pop	{r4, r5, r6, r7}
 101d800:	4770      	bx	lr
 101d802:	2a0f      	cmp	r2, #15
 101d804:	d80e      	bhi.n	101d824 <memmove+0x44>
 101d806:	4603      	mov	r3, r0
 101d808:	1e54      	subs	r4, r2, #1
 101d80a:	2a00      	cmp	r2, #0
 101d80c:	d0f7      	beq.n	101d7fe <memmove+0x1e>
 101d80e:	3401      	adds	r4, #1
 101d810:	3b01      	subs	r3, #1
 101d812:	440c      	add	r4, r1
 101d814:	f811 2b01 	ldrb.w	r2, [r1], #1
 101d818:	42a1      	cmp	r1, r4
 101d81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 101d81e:	d1f9      	bne.n	101d814 <memmove+0x34>
 101d820:	bcf0      	pop	{r4, r5, r6, r7}
 101d822:	4770      	bx	lr
 101d824:	ea40 0301 	orr.w	r3, r0, r1
 101d828:	079b      	lsls	r3, r3, #30
 101d82a:	d13d      	bne.n	101d8a8 <memmove+0xc8>
 101d82c:	f1a2 0510 	sub.w	r5, r2, #16
 101d830:	f101 0420 	add.w	r4, r1, #32
 101d834:	f101 0610 	add.w	r6, r1, #16
 101d838:	f100 0710 	add.w	r7, r0, #16
 101d83c:	092d      	lsrs	r5, r5, #4
 101d83e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 101d842:	f856 3c10 	ldr.w	r3, [r6, #-16]
 101d846:	3610      	adds	r6, #16
 101d848:	3710      	adds	r7, #16
 101d84a:	f847 3c20 	str.w	r3, [r7, #-32]
 101d84e:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 101d852:	f847 3c1c 	str.w	r3, [r7, #-28]
 101d856:	f856 3c18 	ldr.w	r3, [r6, #-24]
 101d85a:	f847 3c18 	str.w	r3, [r7, #-24]
 101d85e:	f856 3c14 	ldr.w	r3, [r6, #-20]
 101d862:	42a6      	cmp	r6, r4
 101d864:	f847 3c14 	str.w	r3, [r7, #-20]
 101d868:	d1eb      	bne.n	101d842 <memmove+0x62>
 101d86a:	1c6b      	adds	r3, r5, #1
 101d86c:	f012 0f0c 	tst.w	r2, #12
 101d870:	f002 050f 	and.w	r5, r2, #15
 101d874:	ea4f 1303 	mov.w	r3, r3, lsl #4
 101d878:	4419      	add	r1, r3
 101d87a:	bf08      	it	eq
 101d87c:	462a      	moveq	r2, r5
 101d87e:	4403      	add	r3, r0
 101d880:	d0c2      	beq.n	101d808 <memmove+0x28>
 101d882:	1f1f      	subs	r7, r3, #4
 101d884:	460e      	mov	r6, r1
 101d886:	f856 cb04 	ldr.w	ip, [r6], #4
 101d88a:	1bac      	subs	r4, r5, r6
 101d88c:	440c      	add	r4, r1
 101d88e:	f847 cf04 	str.w	ip, [r7, #4]!
 101d892:	2c03      	cmp	r4, #3
 101d894:	d8f7      	bhi.n	101d886 <memmove+0xa6>
 101d896:	1f2c      	subs	r4, r5, #4
 101d898:	f002 0203 	and.w	r2, r2, #3
 101d89c:	f024 0403 	bic.w	r4, r4, #3
 101d8a0:	3404      	adds	r4, #4
 101d8a2:	4423      	add	r3, r4
 101d8a4:	4421      	add	r1, r4
 101d8a6:	e7af      	b.n	101d808 <memmove+0x28>
 101d8a8:	1e54      	subs	r4, r2, #1
 101d8aa:	4603      	mov	r3, r0
 101d8ac:	e7af      	b.n	101d80e <memmove+0x2e>
 101d8ae:	bf00      	nop

0101d8b0 <memset>:
 101d8b0:	b4f0      	push	{r4, r5, r6, r7}
 101d8b2:	0786      	lsls	r6, r0, #30
 101d8b4:	d046      	beq.n	101d944 <memset+0x94>
 101d8b6:	1e54      	subs	r4, r2, #1
 101d8b8:	2a00      	cmp	r2, #0
 101d8ba:	d03c      	beq.n	101d936 <memset+0x86>
 101d8bc:	b2ca      	uxtb	r2, r1
 101d8be:	4603      	mov	r3, r0
 101d8c0:	e002      	b.n	101d8c8 <memset+0x18>
 101d8c2:	f114 34ff 	adds.w	r4, r4, #4294967295
 101d8c6:	d336      	bcc.n	101d936 <memset+0x86>
 101d8c8:	f803 2b01 	strb.w	r2, [r3], #1
 101d8cc:	079d      	lsls	r5, r3, #30
 101d8ce:	d1f8      	bne.n	101d8c2 <memset+0x12>
 101d8d0:	2c03      	cmp	r4, #3
 101d8d2:	d929      	bls.n	101d928 <memset+0x78>
 101d8d4:	b2cd      	uxtb	r5, r1
 101d8d6:	2c0f      	cmp	r4, #15
 101d8d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 101d8dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 101d8e0:	d933      	bls.n	101d94a <memset+0x9a>
 101d8e2:	f1a4 0610 	sub.w	r6, r4, #16
 101d8e6:	f103 0720 	add.w	r7, r3, #32
 101d8ea:	f103 0210 	add.w	r2, r3, #16
 101d8ee:	0936      	lsrs	r6, r6, #4
 101d8f0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 101d8f4:	e942 5504 	strd	r5, r5, [r2, #-16]
 101d8f8:	e942 5502 	strd	r5, r5, [r2, #-8]
 101d8fc:	3210      	adds	r2, #16
 101d8fe:	42ba      	cmp	r2, r7
 101d900:	d1f8      	bne.n	101d8f4 <memset+0x44>
 101d902:	1c72      	adds	r2, r6, #1
 101d904:	f014 0f0c 	tst.w	r4, #12
 101d908:	f004 060f 	and.w	r6, r4, #15
 101d90c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 101d910:	d013      	beq.n	101d93a <memset+0x8a>
 101d912:	1f33      	subs	r3, r6, #4
 101d914:	f023 0303 	bic.w	r3, r3, #3
 101d918:	3304      	adds	r3, #4
 101d91a:	4413      	add	r3, r2
 101d91c:	f842 5b04 	str.w	r5, [r2], #4
 101d920:	4293      	cmp	r3, r2
 101d922:	d1fb      	bne.n	101d91c <memset+0x6c>
 101d924:	f006 0403 	and.w	r4, r6, #3
 101d928:	b12c      	cbz	r4, 101d936 <memset+0x86>
 101d92a:	b2c9      	uxtb	r1, r1
 101d92c:	441c      	add	r4, r3
 101d92e:	f803 1b01 	strb.w	r1, [r3], #1
 101d932:	429c      	cmp	r4, r3
 101d934:	d1fb      	bne.n	101d92e <memset+0x7e>
 101d936:	bcf0      	pop	{r4, r5, r6, r7}
 101d938:	4770      	bx	lr
 101d93a:	4634      	mov	r4, r6
 101d93c:	4613      	mov	r3, r2
 101d93e:	2c00      	cmp	r4, #0
 101d940:	d1f3      	bne.n	101d92a <memset+0x7a>
 101d942:	e7f8      	b.n	101d936 <memset+0x86>
 101d944:	4614      	mov	r4, r2
 101d946:	4603      	mov	r3, r0
 101d948:	e7c2      	b.n	101d8d0 <memset+0x20>
 101d94a:	461a      	mov	r2, r3
 101d94c:	4626      	mov	r6, r4
 101d94e:	e7e0      	b.n	101d912 <memset+0x62>

0101d950 <__malloc_lock>:
 101d950:	4770      	bx	lr
 101d952:	bf00      	nop

0101d954 <__malloc_unlock>:
 101d954:	4770      	bx	lr
 101d956:	bf00      	nop

0101d958 <mallinfo>:
 101d958:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101d95c:	f2c0 1306 	movt	r3, #262	; 0x106
 101d960:	b510      	push	{r4, lr}
 101d962:	4604      	mov	r4, r0
 101d964:	6819      	ldr	r1, [r3, #0]
 101d966:	f006 fca1 	bl	10242ac <_mallinfo_r>
 101d96a:	4620      	mov	r0, r4
 101d96c:	bd10      	pop	{r4, pc}
 101d96e:	bf00      	nop

0101d970 <malloc_stats>:
 101d970:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101d974:	f2c0 1306 	movt	r3, #262	; 0x106
 101d978:	6818      	ldr	r0, [r3, #0]
 101d97a:	f006 bce3 	b.w	1024344 <_malloc_stats_r>
 101d97e:	bf00      	nop

0101d980 <mallopt>:
 101d980:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101d984:	f2c0 1306 	movt	r3, #262	; 0x106
 101d988:	460a      	mov	r2, r1
 101d98a:	4601      	mov	r1, r0
 101d98c:	6818      	ldr	r0, [r3, #0]
 101d98e:	f006 bca7 	b.w	10242e0 <_mallopt_r>
 101d992:	bf00      	nop

0101d994 <_mstats_r>:
 101d994:	b510      	push	{r4, lr}
 101d996:	460a      	mov	r2, r1
 101d998:	4604      	mov	r4, r0
 101d99a:	f24c 1144 	movw	r1, #49476	; 0xc144
 101d99e:	68c0      	ldr	r0, [r0, #12]
 101d9a0:	f2c0 1106 	movt	r1, #262	; 0x106
 101d9a4:	f006 f826 	bl	10239f4 <fiprintf>
 101d9a8:	4620      	mov	r0, r4
 101d9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 101d9ae:	f006 bcc9 	b.w	1024344 <_malloc_stats_r>
 101d9b2:	bf00      	nop

0101d9b4 <mstats>:
 101d9b4:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101d9b8:	f2c0 1306 	movt	r3, #262	; 0x106
 101d9bc:	b510      	push	{r4, lr}
 101d9be:	4602      	mov	r2, r0
 101d9c0:	681c      	ldr	r4, [r3, #0]
 101d9c2:	f24c 1144 	movw	r1, #49476	; 0xc144
 101d9c6:	f2c0 1106 	movt	r1, #262	; 0x106
 101d9ca:	68e0      	ldr	r0, [r4, #12]
 101d9cc:	f006 f812 	bl	10239f4 <fiprintf>
 101d9d0:	4620      	mov	r0, r4
 101d9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 101d9d6:	f006 bcb5 	b.w	1024344 <_malloc_stats_r>
 101d9da:	bf00      	nop

0101d9dc <_printf_r>:
 101d9dc:	b40e      	push	{r1, r2, r3}
 101d9de:	b510      	push	{r4, lr}
 101d9e0:	b083      	sub	sp, #12
 101d9e2:	ac05      	add	r4, sp, #20
 101d9e4:	6881      	ldr	r1, [r0, #8]
 101d9e6:	f854 2b04 	ldr.w	r2, [r4], #4
 101d9ea:	4623      	mov	r3, r4
 101d9ec:	9401      	str	r4, [sp, #4]
 101d9ee:	f002 fe2b 	bl	1020648 <_vfprintf_r>
 101d9f2:	b003      	add	sp, #12
 101d9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 101d9f8:	b003      	add	sp, #12
 101d9fa:	4770      	bx	lr

0101d9fc <printf>:
 101d9fc:	b40f      	push	{r0, r1, r2, r3}
 101d9fe:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101da02:	b510      	push	{r4, lr}
 101da04:	b082      	sub	sp, #8
 101da06:	ac04      	add	r4, sp, #16
 101da08:	f2c0 1306 	movt	r3, #262	; 0x106
 101da0c:	f854 2b04 	ldr.w	r2, [r4], #4
 101da10:	6818      	ldr	r0, [r3, #0]
 101da12:	4623      	mov	r3, r4
 101da14:	9401      	str	r4, [sp, #4]
 101da16:	6881      	ldr	r1, [r0, #8]
 101da18:	f002 fe16 	bl	1020648 <_vfprintf_r>
 101da1c:	b002      	add	sp, #8
 101da1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 101da22:	b004      	add	sp, #16
 101da24:	4770      	bx	lr
 101da26:	bf00      	nop

0101da28 <_puts_r>:
 101da28:	b530      	push	{r4, r5, lr}
 101da2a:	4605      	mov	r5, r0
 101da2c:	b089      	sub	sp, #36	; 0x24
 101da2e:	4608      	mov	r0, r1
 101da30:	460c      	mov	r4, r1
 101da32:	f000 fe65 	bl	101e700 <strlen>
 101da36:	6baa      	ldr	r2, [r5, #56]	; 0x38
 101da38:	f649 637c 	movw	r3, #40572	; 0x9e7c
 101da3c:	9404      	str	r4, [sp, #16]
 101da3e:	f2c0 1306 	movt	r3, #262	; 0x106
 101da42:	68ac      	ldr	r4, [r5, #8]
 101da44:	9306      	str	r3, [sp, #24]
 101da46:	2302      	movs	r3, #2
 101da48:	1c41      	adds	r1, r0, #1
 101da4a:	9005      	str	r0, [sp, #20]
 101da4c:	9103      	str	r1, [sp, #12]
 101da4e:	2001      	movs	r0, #1
 101da50:	a904      	add	r1, sp, #16
 101da52:	9007      	str	r0, [sp, #28]
 101da54:	e9cd 1301 	strd	r1, r3, [sp, #4]
 101da58:	b1b2      	cbz	r2, 101da88 <_puts_r+0x60>
 101da5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101da5e:	049a      	lsls	r2, r3, #18
 101da60:	d406      	bmi.n	101da70 <_puts_r+0x48>
 101da62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 101da64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 101da68:	81a3      	strh	r3, [r4, #12]
 101da6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 101da6e:	6662      	str	r2, [r4, #100]	; 0x64
 101da70:	4621      	mov	r1, r4
 101da72:	4628      	mov	r0, r5
 101da74:	aa01      	add	r2, sp, #4
 101da76:	f006 f921 	bl	1023cbc <__sfvwrite_r>
 101da7a:	2800      	cmp	r0, #0
 101da7c:	bf14      	ite	ne
 101da7e:	f04f 30ff 	movne.w	r0, #4294967295
 101da82:	200a      	moveq	r0, #10
 101da84:	b009      	add	sp, #36	; 0x24
 101da86:	bd30      	pop	{r4, r5, pc}
 101da88:	4628      	mov	r0, r5
 101da8a:	f005 ff7f 	bl	102398c <__sinit>
 101da8e:	e7e4      	b.n	101da5a <_puts_r+0x32>

0101da90 <puts>:
 101da90:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101da94:	f2c0 1306 	movt	r3, #262	; 0x106
 101da98:	4601      	mov	r1, r0
 101da9a:	6818      	ldr	r0, [r3, #0]
 101da9c:	f7ff bfc4 	b.w	101da28 <_puts_r>

0101daa0 <qsort>:
 101daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101daa4:	b089      	sub	sp, #36	; 0x24
 101daa6:	4680      	mov	r8, r0
 101daa8:	460f      	mov	r7, r1
 101daaa:	469a      	mov	sl, r3
 101daac:	9200      	str	r2, [sp, #0]
 101daae:	0892      	lsrs	r2, r2, #2
 101dab0:	9203      	str	r2, [sp, #12]
 101dab2:	9a00      	ldr	r2, [sp, #0]
 101dab4:	ea48 0302 	orr.w	r3, r8, r2
 101dab8:	079b      	lsls	r3, r3, #30
 101daba:	bf18      	it	ne
 101dabc:	f04f 0b02 	movne.w	fp, #2
 101dac0:	d104      	bne.n	101dacc <qsort+0x2c>
 101dac2:	f1b2 0b04 	subs.w	fp, r2, #4
 101dac6:	bf18      	it	ne
 101dac8:	f04f 0b01 	movne.w	fp, #1
 101dacc:	2f06      	cmp	r7, #6
 101dace:	f240 824c 	bls.w	101df6a <qsort+0x4ca>
 101dad2:	9a00      	ldr	r2, [sp, #0]
 101dad4:	1e7b      	subs	r3, r7, #1
 101dad6:	087c      	lsrs	r4, r7, #1
 101dad8:	2f07      	cmp	r7, #7
 101dada:	fb02 f303 	mul.w	r3, r2, r3
 101dade:	fb02 8404 	mla	r4, r2, r4, r8
 101dae2:	eb08 0903 	add.w	r9, r8, r3
 101dae6:	9306      	str	r3, [sp, #24]
 101dae8:	d010      	beq.n	101db0c <qsort+0x6c>
 101daea:	2f28      	cmp	r7, #40	; 0x28
 101daec:	bf9c      	itt	ls
 101daee:	464d      	movls	r5, r9
 101daf0:	4646      	movls	r6, r8
 101daf2:	f200 81a2 	bhi.w	101de3a <qsort+0x39a>
 101daf6:	4621      	mov	r1, r4
 101daf8:	4630      	mov	r0, r6
 101dafa:	47d0      	blx	sl
 101dafc:	4629      	mov	r1, r5
 101dafe:	2800      	cmp	r0, #0
 101db00:	4620      	mov	r0, r4
 101db02:	f2c0 817e 	blt.w	101de02 <qsort+0x362>
 101db06:	47d0      	blx	sl
 101db08:	2800      	cmp	r0, #0
 101db0a:	dd52      	ble.n	101dbb2 <qsort+0x112>
 101db0c:	f1bb 0f00 	cmp.w	fp, #0
 101db10:	d159      	bne.n	101dbc6 <qsort+0x126>
 101db12:	f8d8 2000 	ldr.w	r2, [r8]
 101db16:	6821      	ldr	r1, [r4, #0]
 101db18:	9b00      	ldr	r3, [sp, #0]
 101db1a:	f8c8 1000 	str.w	r1, [r8]
 101db1e:	4443      	add	r3, r8
 101db20:	6022      	str	r2, [r4, #0]
 101db22:	9305      	str	r3, [sp, #20]
 101db24:	9b05      	ldr	r3, [sp, #20]
 101db26:	4599      	cmp	r9, r3
 101db28:	9307      	str	r3, [sp, #28]
 101db2a:	d362      	bcc.n	101dbf2 <qsort+0x152>
 101db2c:	461d      	mov	r5, r3
 101db2e:	9304      	str	r3, [sp, #16]
 101db30:	2300      	movs	r3, #0
 101db32:	9301      	str	r3, [sp, #4]
 101db34:	9b00      	ldr	r3, [sp, #0]
 101db36:	464c      	mov	r4, r9
 101db38:	425f      	negs	r7, r3
 101db3a:	4641      	mov	r1, r8
 101db3c:	4628      	mov	r0, r5
 101db3e:	47d0      	blx	sl
 101db40:	462e      	mov	r6, r5
 101db42:	2800      	cmp	r0, #0
 101db44:	f340 80f7 	ble.w	101dd36 <qsort+0x296>
 101db48:	45a9      	cmp	r9, r5
 101db4a:	f0c0 80b9 	bcc.w	101dcc0 <qsort+0x220>
 101db4e:	4653      	mov	r3, sl
 101db50:	465e      	mov	r6, fp
 101db52:	46a2      	mov	sl, r4
 101db54:	9502      	str	r5, [sp, #8]
 101db56:	f8dd b004 	ldr.w	fp, [sp, #4]
 101db5a:	461c      	mov	r4, r3
 101db5c:	e00e      	b.n	101db7c <qsort+0xdc>
 101db5e:	f8d9 3000 	ldr.w	r3, [r9]
 101db62:	f8da 1000 	ldr.w	r1, [sl]
 101db66:	f8c9 1000 	str.w	r1, [r9]
 101db6a:	f8ca 3000 	str.w	r3, [sl]
 101db6e:	44ba      	add	sl, r7
 101db70:	f04f 0b01 	mov.w	fp, #1
 101db74:	44b9      	add	r9, r7
 101db76:	454d      	cmp	r5, r9
 101db78:	f200 8264 	bhi.w	101e044 <qsort+0x5a4>
 101db7c:	4641      	mov	r1, r8
 101db7e:	4648      	mov	r0, r9
 101db80:	47a0      	blx	r4
 101db82:	2800      	cmp	r0, #0
 101db84:	f2c0 8084 	blt.w	101dc90 <qsort+0x1f0>
 101db88:	d1f4      	bne.n	101db74 <qsort+0xd4>
 101db8a:	2e00      	cmp	r6, #0
 101db8c:	d0e7      	beq.n	101db5e <qsort+0xbe>
 101db8e:	2e01      	cmp	r6, #1
 101db90:	d070      	beq.n	101dc74 <qsort+0x1d4>
 101db92:	9b00      	ldr	r3, [sp, #0]
 101db94:	4651      	mov	r1, sl
 101db96:	eb09 0e03 	add.w	lr, r9, r3
 101db9a:	464b      	mov	r3, r9
 101db9c:	780a      	ldrb	r2, [r1, #0]
 101db9e:	7818      	ldrb	r0, [r3, #0]
 101dba0:	f803 2b01 	strb.w	r2, [r3], #1
 101dba4:	ebae 0203 	sub.w	r2, lr, r3
 101dba8:	2a00      	cmp	r2, #0
 101dbaa:	f801 0b01 	strb.w	r0, [r1], #1
 101dbae:	dcf5      	bgt.n	101db9c <qsort+0xfc>
 101dbb0:	e7dd      	b.n	101db6e <qsort+0xce>
 101dbb2:	4629      	mov	r1, r5
 101dbb4:	4630      	mov	r0, r6
 101dbb6:	47d0      	blx	sl
 101dbb8:	ea16 0420 	ands.w	r4, r6, r0, asr #32
 101dbbc:	bf38      	it	cc
 101dbbe:	462c      	movcc	r4, r5
 101dbc0:	f1bb 0f00 	cmp.w	fp, #0
 101dbc4:	d0a5      	beq.n	101db12 <qsort+0x72>
 101dbc6:	f1bb 0f01 	cmp.w	fp, #1
 101dbca:	f000 8188 	beq.w	101dede <qsort+0x43e>
 101dbce:	9b00      	ldr	r3, [sp, #0]
 101dbd0:	4642      	mov	r2, r8
 101dbd2:	eb08 0003 	add.w	r0, r8, r3
 101dbd6:	9005      	str	r0, [sp, #20]
 101dbd8:	7823      	ldrb	r3, [r4, #0]
 101dbda:	7811      	ldrb	r1, [r2, #0]
 101dbdc:	f802 3b01 	strb.w	r3, [r2], #1
 101dbe0:	1a83      	subs	r3, r0, r2
 101dbe2:	2b00      	cmp	r3, #0
 101dbe4:	f804 1b01 	strb.w	r1, [r4], #1
 101dbe8:	dcf6      	bgt.n	101dbd8 <qsort+0x138>
 101dbea:	9b05      	ldr	r3, [sp, #20]
 101dbec:	4599      	cmp	r9, r3
 101dbee:	9307      	str	r3, [sp, #28]
 101dbf0:	d29c      	bcs.n	101db2c <qsort+0x8c>
 101dbf2:	9b00      	ldr	r3, [sp, #0]
 101dbf4:	fb03 8507 	mla	r5, r3, r7, r8
 101dbf8:	9b05      	ldr	r3, [sp, #20]
 101dbfa:	42ab      	cmp	r3, r5
 101dbfc:	d237      	bcs.n	101dc6e <qsort+0x1ce>
 101dbfe:	9b00      	ldr	r3, [sp, #0]
 101dc00:	465f      	mov	r7, fp
 101dc02:	9501      	str	r5, [sp, #4]
 101dc04:	425c      	negs	r4, r3
 101dc06:	005e      	lsls	r6, r3, #1
 101dc08:	46a1      	mov	r9, r4
 101dc0a:	4654      	mov	r4, sl
 101dc0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 101dc10:	45d0      	cmp	r8, sl
 101dc12:	d227      	bcs.n	101dc64 <qsort+0x1c4>
 101dc14:	46d3      	mov	fp, sl
 101dc16:	e008      	b.n	101dc2a <qsort+0x18a>
 101dc18:	f8db 3000 	ldr.w	r3, [fp]
 101dc1c:	682a      	ldr	r2, [r5, #0]
 101dc1e:	f8cb 2000 	str.w	r2, [fp]
 101dc22:	602b      	str	r3, [r5, #0]
 101dc24:	4545      	cmp	r5, r8
 101dc26:	46ab      	mov	fp, r5
 101dc28:	d91c      	bls.n	101dc64 <qsort+0x1c4>
 101dc2a:	eb0b 0509 	add.w	r5, fp, r9
 101dc2e:	4659      	mov	r1, fp
 101dc30:	4628      	mov	r0, r5
 101dc32:	47a0      	blx	r4
 101dc34:	2800      	cmp	r0, #0
 101dc36:	dd15      	ble.n	101dc64 <qsort+0x1c4>
 101dc38:	2f00      	cmp	r7, #0
 101dc3a:	d0ed      	beq.n	101dc18 <qsort+0x178>
 101dc3c:	2f01      	cmp	r7, #1
 101dc3e:	bf1c      	itt	ne
 101dc40:	19a8      	addne	r0, r5, r6
 101dc42:	462b      	movne	r3, r5
 101dc44:	f000 8184 	beq.w	101df50 <qsort+0x4b0>
 101dc48:	781a      	ldrb	r2, [r3, #0]
 101dc4a:	f89b 1000 	ldrb.w	r1, [fp]
 101dc4e:	f80b 2b01 	strb.w	r2, [fp], #1
 101dc52:	eba0 020b 	sub.w	r2, r0, fp
 101dc56:	2a00      	cmp	r2, #0
 101dc58:	f803 1b01 	strb.w	r1, [r3], #1
 101dc5c:	dcf4      	bgt.n	101dc48 <qsort+0x1a8>
 101dc5e:	4545      	cmp	r5, r8
 101dc60:	46ab      	mov	fp, r5
 101dc62:	d8e2      	bhi.n	101dc2a <qsort+0x18a>
 101dc64:	9b00      	ldr	r3, [sp, #0]
 101dc66:	449a      	add	sl, r3
 101dc68:	9b01      	ldr	r3, [sp, #4]
 101dc6a:	459a      	cmp	sl, r3
 101dc6c:	d3d0      	bcc.n	101dc10 <qsort+0x170>
 101dc6e:	b009      	add	sp, #36	; 0x24
 101dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101dc74:	9b03      	ldr	r3, [sp, #12]
 101dc76:	46d4      	mov	ip, sl
 101dc78:	4648      	mov	r0, r9
 101dc7a:	6802      	ldr	r2, [r0, #0]
 101dc7c:	3b01      	subs	r3, #1
 101dc7e:	f8dc 1000 	ldr.w	r1, [ip]
 101dc82:	2b00      	cmp	r3, #0
 101dc84:	f840 1b04 	str.w	r1, [r0], #4
 101dc88:	f84c 2b04 	str.w	r2, [ip], #4
 101dc8c:	dcf5      	bgt.n	101dc7a <qsort+0x1da>
 101dc8e:	e76e      	b.n	101db6e <qsort+0xce>
 101dc90:	4623      	mov	r3, r4
 101dc92:	46b3      	mov	fp, r6
 101dc94:	4654      	mov	r4, sl
 101dc96:	9e02      	ldr	r6, [sp, #8]
 101dc98:	469a      	mov	sl, r3
 101dc9a:	f1bb 0f00 	cmp.w	fp, #0
 101dc9e:	d13a      	bne.n	101dd16 <qsort+0x276>
 101dca0:	9b00      	ldr	r3, [sp, #0]
 101dca2:	6829      	ldr	r1, [r5, #0]
 101dca4:	f8d9 0000 	ldr.w	r0, [r9]
 101dca8:	195a      	adds	r2, r3, r5
 101dcaa:	6028      	str	r0, [r5, #0]
 101dcac:	f8c9 1000 	str.w	r1, [r9]
 101dcb0:	44b9      	add	r9, r7
 101dcb2:	4616      	mov	r6, r2
 101dcb4:	2301      	movs	r3, #1
 101dcb6:	9301      	str	r3, [sp, #4]
 101dcb8:	454a      	cmp	r2, r9
 101dcba:	4615      	mov	r5, r2
 101dcbc:	f67f af3d 	bls.w	101db3a <qsort+0x9a>
 101dcc0:	9b06      	ldr	r3, [sp, #24]
 101dcc2:	9a00      	ldr	r2, [sp, #0]
 101dcc4:	4413      	add	r3, r2
 101dcc6:	461d      	mov	r5, r3
 101dcc8:	9b01      	ldr	r3, [sp, #4]
 101dcca:	4445      	add	r5, r8
 101dccc:	2b00      	cmp	r3, #0
 101dcce:	d093      	beq.n	101dbf8 <qsort+0x158>
 101dcd0:	9b04      	ldr	r3, [sp, #16]
 101dcd2:	1b2a      	subs	r2, r5, r4
 101dcd4:	eba4 0409 	sub.w	r4, r4, r9
 101dcd8:	1af0      	subs	r0, r6, r3
 101dcda:	eba3 0c08 	sub.w	ip, r3, r8
 101dcde:	9b00      	ldr	r3, [sp, #0]
 101dce0:	4584      	cmp	ip, r0
 101dce2:	4667      	mov	r7, ip
 101dce4:	eba2 0203 	sub.w	r2, r2, r3
 101dce8:	bfa8      	it	ge
 101dcea:	4607      	movge	r7, r0
 101dcec:	42a2      	cmp	r2, r4
 101dcee:	bf28      	it	cs
 101dcf0:	4622      	movcs	r2, r4
 101dcf2:	4611      	mov	r1, r2
 101dcf4:	2f00      	cmp	r7, #0
 101dcf6:	d159      	bne.n	101ddac <qsort+0x30c>
 101dcf8:	2a00      	cmp	r2, #0
 101dcfa:	d171      	bne.n	101dde0 <qsort+0x340>
 101dcfc:	9b00      	ldr	r3, [sp, #0]
 101dcfe:	4283      	cmp	r3, r0
 101dd00:	d349      	bcc.n	101dd96 <qsort+0x2f6>
 101dd02:	9900      	ldr	r1, [sp, #0]
 101dd04:	42a1      	cmp	r1, r4
 101dd06:	d2b2      	bcs.n	101dc6e <qsort+0x1ce>
 101dd08:	4620      	mov	r0, r4
 101dd0a:	eba5 0804 	sub.w	r8, r5, r4
 101dd0e:	f7fd f8fb 	bl	101af08 <__udivsi3>
 101dd12:	4607      	mov	r7, r0
 101dd14:	e6cd      	b.n	101dab2 <qsort+0x12>
 101dd16:	f1bb 0f01 	cmp.w	fp, #1
 101dd1a:	d01e      	beq.n	101dd5a <qsort+0x2ba>
 101dd1c:	9b00      	ldr	r3, [sp, #0]
 101dd1e:	4649      	mov	r1, r9
 101dd20:	195a      	adds	r2, r3, r5
 101dd22:	780b      	ldrb	r3, [r1, #0]
 101dd24:	7830      	ldrb	r0, [r6, #0]
 101dd26:	f806 3b01 	strb.w	r3, [r6], #1
 101dd2a:	1b93      	subs	r3, r2, r6
 101dd2c:	2b00      	cmp	r3, #0
 101dd2e:	f801 0b01 	strb.w	r0, [r1], #1
 101dd32:	dcf6      	bgt.n	101dd22 <qsort+0x282>
 101dd34:	e7bc      	b.n	101dcb0 <qsort+0x210>
 101dd36:	d10c      	bne.n	101dd52 <qsort+0x2b2>
 101dd38:	f1bb 0f00 	cmp.w	fp, #0
 101dd3c:	d11b      	bne.n	101dd76 <qsort+0x2d6>
 101dd3e:	9b04      	ldr	r3, [sp, #16]
 101dd40:	9900      	ldr	r1, [sp, #0]
 101dd42:	6828      	ldr	r0, [r5, #0]
 101dd44:	681a      	ldr	r2, [r3, #0]
 101dd46:	1859      	adds	r1, r3, r1
 101dd48:	6018      	str	r0, [r3, #0]
 101dd4a:	602a      	str	r2, [r5, #0]
 101dd4c:	2301      	movs	r3, #1
 101dd4e:	9104      	str	r1, [sp, #16]
 101dd50:	9301      	str	r3, [sp, #4]
 101dd52:	9b00      	ldr	r3, [sp, #0]
 101dd54:	195a      	adds	r2, r3, r5
 101dd56:	4616      	mov	r6, r2
 101dd58:	e7ae      	b.n	101dcb8 <qsort+0x218>
 101dd5a:	9a03      	ldr	r2, [sp, #12]
 101dd5c:	4649      	mov	r1, r9
 101dd5e:	6833      	ldr	r3, [r6, #0]
 101dd60:	3a01      	subs	r2, #1
 101dd62:	6808      	ldr	r0, [r1, #0]
 101dd64:	2a00      	cmp	r2, #0
 101dd66:	f846 0b04 	str.w	r0, [r6], #4
 101dd6a:	f841 3b04 	str.w	r3, [r1], #4
 101dd6e:	dcf6      	bgt.n	101dd5e <qsort+0x2be>
 101dd70:	9b00      	ldr	r3, [sp, #0]
 101dd72:	195a      	adds	r2, r3, r5
 101dd74:	e79c      	b.n	101dcb0 <qsort+0x210>
 101dd76:	f1bb 0f01 	cmp.w	fp, #1
 101dd7a:	d04e      	beq.n	101de1a <qsort+0x37a>
 101dd7c:	9a04      	ldr	r2, [sp, #16]
 101dd7e:	9b00      	ldr	r3, [sp, #0]
 101dd80:	18d1      	adds	r1, r2, r3
 101dd82:	7833      	ldrb	r3, [r6, #0]
 101dd84:	7810      	ldrb	r0, [r2, #0]
 101dd86:	f802 3b01 	strb.w	r3, [r2], #1
 101dd8a:	1a8b      	subs	r3, r1, r2
 101dd8c:	2b00      	cmp	r3, #0
 101dd8e:	f806 0b01 	strb.w	r0, [r6], #1
 101dd92:	dcf6      	bgt.n	101dd82 <qsort+0x2e2>
 101dd94:	e7da      	b.n	101dd4c <qsort+0x2ac>
 101dd96:	9e00      	ldr	r6, [sp, #0]
 101dd98:	4631      	mov	r1, r6
 101dd9a:	f7fd f8b5 	bl	101af08 <__udivsi3>
 101dd9e:	4653      	mov	r3, sl
 101dda0:	4632      	mov	r2, r6
 101dda2:	4601      	mov	r1, r0
 101dda4:	4640      	mov	r0, r8
 101dda6:	f7ff fe7b 	bl	101daa0 <qsort>
 101ddaa:	e7aa      	b.n	101dd02 <qsort+0x262>
 101ddac:	f1bb 0f02 	cmp.w	fp, #2
 101ddb0:	eba6 0307 	sub.w	r3, r6, r7
 101ddb4:	bf04      	itt	eq
 101ddb6:	4447      	addeq	r7, r8
 101ddb8:	4642      	moveq	r2, r8
 101ddba:	f040 809f 	bne.w	101defc <qsort+0x45c>
 101ddbe:	f893 c000 	ldrb.w	ip, [r3]
 101ddc2:	f892 e000 	ldrb.w	lr, [r2]
 101ddc6:	f802 cb01 	strb.w	ip, [r2], #1
 101ddca:	eba7 0c02 	sub.w	ip, r7, r2
 101ddce:	f1bc 0f00 	cmp.w	ip, #0
 101ddd2:	f803 eb01 	strb.w	lr, [r3], #1
 101ddd6:	dcf2      	bgt.n	101ddbe <qsort+0x31e>
 101ddd8:	2900      	cmp	r1, #0
 101ddda:	d08f      	beq.n	101dcfc <qsort+0x25c>
 101dddc:	1a6b      	subs	r3, r5, r1
 101ddde:	e005      	b.n	101ddec <qsort+0x34c>
 101dde0:	f1bb 0f02 	cmp.w	fp, #2
 101dde4:	eba5 0302 	sub.w	r3, r5, r2
 101dde8:	f040 809c 	bne.w	101df24 <qsort+0x484>
 101ddec:	1872      	adds	r2, r6, r1
 101ddee:	7819      	ldrb	r1, [r3, #0]
 101ddf0:	7837      	ldrb	r7, [r6, #0]
 101ddf2:	f806 1b01 	strb.w	r1, [r6], #1
 101ddf6:	1b91      	subs	r1, r2, r6
 101ddf8:	2900      	cmp	r1, #0
 101ddfa:	f803 7b01 	strb.w	r7, [r3], #1
 101ddfe:	dcf6      	bgt.n	101ddee <qsort+0x34e>
 101de00:	e77c      	b.n	101dcfc <qsort+0x25c>
 101de02:	47d0      	blx	sl
 101de04:	2800      	cmp	r0, #0
 101de06:	f6ff ae81 	blt.w	101db0c <qsort+0x6c>
 101de0a:	4629      	mov	r1, r5
 101de0c:	4630      	mov	r0, r6
 101de0e:	47d0      	blx	sl
 101de10:	ea15 0420 	ands.w	r4, r5, r0, asr #32
 101de14:	bf38      	it	cc
 101de16:	4634      	movcc	r4, r6
 101de18:	e678      	b.n	101db0c <qsort+0x6c>
 101de1a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 101de1e:	680b      	ldr	r3, [r1, #0]
 101de20:	3a01      	subs	r2, #1
 101de22:	6830      	ldr	r0, [r6, #0]
 101de24:	2a00      	cmp	r2, #0
 101de26:	f841 0b04 	str.w	r0, [r1], #4
 101de2a:	f846 3b04 	str.w	r3, [r6], #4
 101de2e:	dcf6      	bgt.n	101de1e <qsort+0x37e>
 101de30:	9b04      	ldr	r3, [sp, #16]
 101de32:	9a00      	ldr	r2, [sp, #0]
 101de34:	4413      	add	r3, r2
 101de36:	4619      	mov	r1, r3
 101de38:	e788      	b.n	101dd4c <qsort+0x2ac>
 101de3a:	08fd      	lsrs	r5, r7, #3
 101de3c:	4613      	mov	r3, r2
 101de3e:	4640      	mov	r0, r8
 101de40:	fb03 f305 	mul.w	r3, r3, r5
 101de44:	eb08 0603 	add.w	r6, r8, r3
 101de48:	18f5      	adds	r5, r6, r3
 101de4a:	4631      	mov	r1, r6
 101de4c:	9302      	str	r3, [sp, #8]
 101de4e:	005b      	lsls	r3, r3, #1
 101de50:	9304      	str	r3, [sp, #16]
 101de52:	47d0      	blx	sl
 101de54:	4629      	mov	r1, r5
 101de56:	2800      	cmp	r0, #0
 101de58:	4630      	mov	r0, r6
 101de5a:	db6e      	blt.n	101df3a <qsort+0x49a>
 101de5c:	47d0      	blx	sl
 101de5e:	2800      	cmp	r0, #0
 101de60:	dc06      	bgt.n	101de70 <qsort+0x3d0>
 101de62:	4629      	mov	r1, r5
 101de64:	4640      	mov	r0, r8
 101de66:	47d0      	blx	sl
 101de68:	ea18 0620 	ands.w	r6, r8, r0, asr #32
 101de6c:	bf38      	it	cc
 101de6e:	462e      	movcc	r6, r5
 101de70:	9a02      	ldr	r2, [sp, #8]
 101de72:	4621      	mov	r1, r4
 101de74:	1aa3      	subs	r3, r4, r2
 101de76:	18a5      	adds	r5, r4, r2
 101de78:	9301      	str	r3, [sp, #4]
 101de7a:	4618      	mov	r0, r3
 101de7c:	47d0      	blx	sl
 101de7e:	4629      	mov	r1, r5
 101de80:	2800      	cmp	r0, #0
 101de82:	4620      	mov	r0, r4
 101de84:	f2c0 80c0 	blt.w	101e008 <qsort+0x568>
 101de88:	47d0      	blx	sl
 101de8a:	2800      	cmp	r0, #0
 101de8c:	dc09      	bgt.n	101dea2 <qsort+0x402>
 101de8e:	9c01      	ldr	r4, [sp, #4]
 101de90:	4629      	mov	r1, r5
 101de92:	4620      	mov	r0, r4
 101de94:	47d0      	blx	sl
 101de96:	4623      	mov	r3, r4
 101de98:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 101de9c:	bf38      	it	cc
 101de9e:	462b      	movcc	r3, r5
 101dea0:	461c      	mov	r4, r3
 101dea2:	9b04      	ldr	r3, [sp, #16]
 101dea4:	9a02      	ldr	r2, [sp, #8]
 101dea6:	eba9 0303 	sub.w	r3, r9, r3
 101deaa:	9301      	str	r3, [sp, #4]
 101deac:	4615      	mov	r5, r2
 101deae:	441d      	add	r5, r3
 101deb0:	4618      	mov	r0, r3
 101deb2:	4629      	mov	r1, r5
 101deb4:	47d0      	blx	sl
 101deb6:	4649      	mov	r1, r9
 101deb8:	2800      	cmp	r0, #0
 101deba:	4628      	mov	r0, r5
 101debc:	f2c0 80b3 	blt.w	101e026 <qsort+0x586>
 101dec0:	47d0      	blx	sl
 101dec2:	2800      	cmp	r0, #0
 101dec4:	f73f ae17 	bgt.w	101daf6 <qsort+0x56>
 101dec8:	9d01      	ldr	r5, [sp, #4]
 101deca:	4649      	mov	r1, r9
 101decc:	4628      	mov	r0, r5
 101dece:	47d0      	blx	sl
 101ded0:	462b      	mov	r3, r5
 101ded2:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 101ded6:	bf38      	it	cc
 101ded8:	464b      	movcc	r3, r9
 101deda:	461d      	mov	r5, r3
 101dedc:	e60b      	b.n	101daf6 <qsort+0x56>
 101dede:	9a03      	ldr	r2, [sp, #12]
 101dee0:	4640      	mov	r0, r8
 101dee2:	6803      	ldr	r3, [r0, #0]
 101dee4:	3a01      	subs	r2, #1
 101dee6:	6821      	ldr	r1, [r4, #0]
 101dee8:	2a00      	cmp	r2, #0
 101deea:	f840 1b04 	str.w	r1, [r0], #4
 101deee:	f844 3b04 	str.w	r3, [r4], #4
 101def2:	dcf6      	bgt.n	101dee2 <qsort+0x442>
 101def4:	9b00      	ldr	r3, [sp, #0]
 101def6:	4443      	add	r3, r8
 101def8:	9305      	str	r3, [sp, #20]
 101defa:	e613      	b.n	101db24 <qsort+0x84>
 101defc:	ea4f 0c97 	mov.w	ip, r7, lsr #2
 101df00:	468e      	mov	lr, r1
 101df02:	4647      	mov	r7, r8
 101df04:	683a      	ldr	r2, [r7, #0]
 101df06:	f10c 3cff 	add.w	ip, ip, #4294967295
 101df0a:	6819      	ldr	r1, [r3, #0]
 101df0c:	f1bc 0f00 	cmp.w	ip, #0
 101df10:	f847 1b04 	str.w	r1, [r7], #4
 101df14:	f843 2b04 	str.w	r2, [r3], #4
 101df18:	dcf4      	bgt.n	101df04 <qsort+0x464>
 101df1a:	4671      	mov	r1, lr
 101df1c:	2900      	cmp	r1, #0
 101df1e:	f43f aeed 	beq.w	101dcfc <qsort+0x25c>
 101df22:	1a6b      	subs	r3, r5, r1
 101df24:	088a      	lsrs	r2, r1, #2
 101df26:	6831      	ldr	r1, [r6, #0]
 101df28:	3a01      	subs	r2, #1
 101df2a:	681f      	ldr	r7, [r3, #0]
 101df2c:	2a00      	cmp	r2, #0
 101df2e:	f846 7b04 	str.w	r7, [r6], #4
 101df32:	f843 1b04 	str.w	r1, [r3], #4
 101df36:	dcf6      	bgt.n	101df26 <qsort+0x486>
 101df38:	e6e0      	b.n	101dcfc <qsort+0x25c>
 101df3a:	47d0      	blx	sl
 101df3c:	2800      	cmp	r0, #0
 101df3e:	db97      	blt.n	101de70 <qsort+0x3d0>
 101df40:	4629      	mov	r1, r5
 101df42:	4640      	mov	r0, r8
 101df44:	47d0      	blx	sl
 101df46:	ea15 0620 	ands.w	r6, r5, r0, asr #32
 101df4a:	bf38      	it	cc
 101df4c:	4646      	movcc	r6, r8
 101df4e:	e78f      	b.n	101de70 <qsort+0x3d0>
 101df50:	9b03      	ldr	r3, [sp, #12]
 101df52:	4629      	mov	r1, r5
 101df54:	f8db 2000 	ldr.w	r2, [fp]
 101df58:	3b01      	subs	r3, #1
 101df5a:	6808      	ldr	r0, [r1, #0]
 101df5c:	2b00      	cmp	r3, #0
 101df5e:	f84b 0b04 	str.w	r0, [fp], #4
 101df62:	f841 2b04 	str.w	r2, [r1], #4
 101df66:	dcf5      	bgt.n	101df54 <qsort+0x4b4>
 101df68:	e65c      	b.n	101dc24 <qsort+0x184>
 101df6a:	9b00      	ldr	r3, [sp, #0]
 101df6c:	eb08 0503 	add.w	r5, r8, r3
 101df70:	fb03 8107 	mla	r1, r3, r7, r8
 101df74:	42a9      	cmp	r1, r5
 101df76:	9101      	str	r1, [sp, #4]
 101df78:	f67f ae79 	bls.w	101dc6e <qsort+0x1ce>
 101df7c:	425c      	negs	r4, r3
 101df7e:	005e      	lsls	r6, r3, #1
 101df80:	465f      	mov	r7, fp
 101df82:	46a1      	mov	r9, r4
 101df84:	4654      	mov	r4, sl
 101df86:	45a8      	cmp	r8, r5
 101df88:	d229      	bcs.n	101dfde <qsort+0x53e>
 101df8a:	46ab      	mov	fp, r5
 101df8c:	e00a      	b.n	101dfa4 <qsort+0x504>
 101df8e:	f8db 3000 	ldr.w	r3, [fp]
 101df92:	f8da 2000 	ldr.w	r2, [sl]
 101df96:	f8cb 2000 	str.w	r2, [fp]
 101df9a:	f8ca 3000 	str.w	r3, [sl]
 101df9e:	45c2      	cmp	sl, r8
 101dfa0:	46d3      	mov	fp, sl
 101dfa2:	d91c      	bls.n	101dfde <qsort+0x53e>
 101dfa4:	eb0b 0a09 	add.w	sl, fp, r9
 101dfa8:	4659      	mov	r1, fp
 101dfaa:	4650      	mov	r0, sl
 101dfac:	47a0      	blx	r4
 101dfae:	2800      	cmp	r0, #0
 101dfb0:	dd15      	ble.n	101dfde <qsort+0x53e>
 101dfb2:	2f00      	cmp	r7, #0
 101dfb4:	d0eb      	beq.n	101df8e <qsort+0x4ee>
 101dfb6:	2f01      	cmp	r7, #1
 101dfb8:	bf1c      	itt	ne
 101dfba:	eb0a 0006 	addne.w	r0, sl, r6
 101dfbe:	4653      	movne	r3, sl
 101dfc0:	d015      	beq.n	101dfee <qsort+0x54e>
 101dfc2:	781a      	ldrb	r2, [r3, #0]
 101dfc4:	f89b 1000 	ldrb.w	r1, [fp]
 101dfc8:	f80b 2b01 	strb.w	r2, [fp], #1
 101dfcc:	eba0 020b 	sub.w	r2, r0, fp
 101dfd0:	2a00      	cmp	r2, #0
 101dfd2:	f803 1b01 	strb.w	r1, [r3], #1
 101dfd6:	dcf4      	bgt.n	101dfc2 <qsort+0x522>
 101dfd8:	45c2      	cmp	sl, r8
 101dfda:	46d3      	mov	fp, sl
 101dfdc:	d8e2      	bhi.n	101dfa4 <qsort+0x504>
 101dfde:	9b00      	ldr	r3, [sp, #0]
 101dfe0:	441d      	add	r5, r3
 101dfe2:	9b01      	ldr	r3, [sp, #4]
 101dfe4:	42ab      	cmp	r3, r5
 101dfe6:	d8ce      	bhi.n	101df86 <qsort+0x4e6>
 101dfe8:	b009      	add	sp, #36	; 0x24
 101dfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101dfee:	9b03      	ldr	r3, [sp, #12]
 101dff0:	4651      	mov	r1, sl
 101dff2:	f8db 2000 	ldr.w	r2, [fp]
 101dff6:	3b01      	subs	r3, #1
 101dff8:	6808      	ldr	r0, [r1, #0]
 101dffa:	2b00      	cmp	r3, #0
 101dffc:	f84b 0b04 	str.w	r0, [fp], #4
 101e000:	f841 2b04 	str.w	r2, [r1], #4
 101e004:	dcf5      	bgt.n	101dff2 <qsort+0x552>
 101e006:	e7ca      	b.n	101df9e <qsort+0x4fe>
 101e008:	47d0      	blx	sl
 101e00a:	2800      	cmp	r0, #0
 101e00c:	f6ff af49 	blt.w	101dea2 <qsort+0x402>
 101e010:	9c01      	ldr	r4, [sp, #4]
 101e012:	4629      	mov	r1, r5
 101e014:	4620      	mov	r0, r4
 101e016:	47d0      	blx	sl
 101e018:	4623      	mov	r3, r4
 101e01a:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 101e01e:	bf28      	it	cs
 101e020:	462b      	movcs	r3, r5
 101e022:	461c      	mov	r4, r3
 101e024:	e73d      	b.n	101dea2 <qsort+0x402>
 101e026:	47d0      	blx	sl
 101e028:	2800      	cmp	r0, #0
 101e02a:	f6ff ad64 	blt.w	101daf6 <qsort+0x56>
 101e02e:	9d01      	ldr	r5, [sp, #4]
 101e030:	4649      	mov	r1, r9
 101e032:	4628      	mov	r0, r5
 101e034:	47d0      	blx	sl
 101e036:	462b      	mov	r3, r5
 101e038:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 101e03c:	bf28      	it	cs
 101e03e:	464b      	movcs	r3, r9
 101e040:	461d      	mov	r5, r3
 101e042:	e558      	b.n	101daf6 <qsort+0x56>
 101e044:	4623      	mov	r3, r4
 101e046:	f8cd b004 	str.w	fp, [sp, #4]
 101e04a:	4654      	mov	r4, sl
 101e04c:	46b3      	mov	fp, r6
 101e04e:	469a      	mov	sl, r3
 101e050:	9e02      	ldr	r6, [sp, #8]
 101e052:	e635      	b.n	101dcc0 <qsort+0x220>

0101e054 <_sbrk_r>:
 101e054:	b538      	push	{r3, r4, r5, lr}
 101e056:	f641 7468 	movw	r4, #8040	; 0x1f68
 101e05a:	f2c0 140c 	movt	r4, #268	; 0x10c
 101e05e:	4605      	mov	r5, r0
 101e060:	4608      	mov	r0, r1
 101e062:	2300      	movs	r3, #0
 101e064:	6023      	str	r3, [r4, #0]
 101e066:	f009 eb04 	blx	1027670 <_sbrk>
 101e06a:	1c43      	adds	r3, r0, #1
 101e06c:	d000      	beq.n	101e070 <_sbrk_r+0x1c>
 101e06e:	bd38      	pop	{r3, r4, r5, pc}
 101e070:	6823      	ldr	r3, [r4, #0]
 101e072:	2b00      	cmp	r3, #0
 101e074:	d0fb      	beq.n	101e06e <_sbrk_r+0x1a>
 101e076:	602b      	str	r3, [r5, #0]
 101e078:	bd38      	pop	{r3, r4, r5, pc}
 101e07a:	bf00      	nop

0101e07c <_snprintf_r>:
 101e07c:	b408      	push	{r3}
 101e07e:	b570      	push	{r4, r5, r6, lr}
 101e080:	1e14      	subs	r4, r2, #0
 101e082:	4605      	mov	r5, r0
 101e084:	b09d      	sub	sp, #116	; 0x74
 101e086:	bfbe      	ittt	lt
 101e088:	228b      	movlt	r2, #139	; 0x8b
 101e08a:	f04f 30ff 	movlt.w	r0, #4294967295
 101e08e:	602a      	strlt	r2, [r5, #0]
 101e090:	db17      	blt.n	101e0c2 <_snprintf_r+0x46>
 101e092:	f44f 7302 	mov.w	r3, #520	; 0x208
 101e096:	9102      	str	r1, [sp, #8]
 101e098:	9106      	str	r1, [sp, #24]
 101e09a:	f8ad 3014 	strh.w	r3, [sp, #20]
 101e09e:	d115      	bne.n	101e0cc <_snprintf_r+0x50>
 101e0a0:	ae22      	add	r6, sp, #136	; 0x88
 101e0a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101e0a4:	a902      	add	r1, sp, #8
 101e0a6:	9404      	str	r4, [sp, #16]
 101e0a8:	4633      	mov	r3, r6
 101e0aa:	9407      	str	r4, [sp, #28]
 101e0ac:	9601      	str	r6, [sp, #4]
 101e0ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101e0b2:	f8ad 4016 	strh.w	r4, [sp, #22]
 101e0b6:	f000 fd1f 	bl	101eaf8 <_svfprintf_r>
 101e0ba:	1c43      	adds	r3, r0, #1
 101e0bc:	da01      	bge.n	101e0c2 <_snprintf_r+0x46>
 101e0be:	238b      	movs	r3, #139	; 0x8b
 101e0c0:	602b      	str	r3, [r5, #0]
 101e0c2:	b01d      	add	sp, #116	; 0x74
 101e0c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101e0c8:	b001      	add	sp, #4
 101e0ca:	4770      	bx	lr
 101e0cc:	ab22      	add	r3, sp, #136	; 0x88
 101e0ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101e0d0:	a902      	add	r1, sp, #8
 101e0d2:	9301      	str	r3, [sp, #4]
 101e0d4:	3c01      	subs	r4, #1
 101e0d6:	9404      	str	r4, [sp, #16]
 101e0d8:	9407      	str	r4, [sp, #28]
 101e0da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101e0de:	f8ad 4016 	strh.w	r4, [sp, #22]
 101e0e2:	f000 fd09 	bl	101eaf8 <_svfprintf_r>
 101e0e6:	1c42      	adds	r2, r0, #1
 101e0e8:	f04f 0200 	mov.w	r2, #0
 101e0ec:	bfbc      	itt	lt
 101e0ee:	238b      	movlt	r3, #139	; 0x8b
 101e0f0:	602b      	strlt	r3, [r5, #0]
 101e0f2:	9b02      	ldr	r3, [sp, #8]
 101e0f4:	701a      	strb	r2, [r3, #0]
 101e0f6:	b01d      	add	sp, #116	; 0x74
 101e0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101e0fc:	b001      	add	sp, #4
 101e0fe:	4770      	bx	lr

0101e100 <snprintf>:
 101e100:	b40c      	push	{r2, r3}
 101e102:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101e106:	f2c0 1306 	movt	r3, #262	; 0x106
 101e10a:	b570      	push	{r4, r5, r6, lr}
 101e10c:	1e0c      	subs	r4, r1, #0
 101e10e:	681d      	ldr	r5, [r3, #0]
 101e110:	b09c      	sub	sp, #112	; 0x70
 101e112:	bfbe      	ittt	lt
 101e114:	238b      	movlt	r3, #139	; 0x8b
 101e116:	f04f 30ff 	movlt.w	r0, #4294967295
 101e11a:	602b      	strlt	r3, [r5, #0]
 101e11c:	db18      	blt.n	101e150 <snprintf+0x50>
 101e11e:	f44f 7302 	mov.w	r3, #520	; 0x208
 101e122:	9002      	str	r0, [sp, #8]
 101e124:	9006      	str	r0, [sp, #24]
 101e126:	f8ad 3014 	strh.w	r3, [sp, #20]
 101e12a:	d116      	bne.n	101e15a <snprintf+0x5a>
 101e12c:	ae21      	add	r6, sp, #132	; 0x84
 101e12e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101e130:	a902      	add	r1, sp, #8
 101e132:	4628      	mov	r0, r5
 101e134:	4633      	mov	r3, r6
 101e136:	9404      	str	r4, [sp, #16]
 101e138:	9407      	str	r4, [sp, #28]
 101e13a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101e13e:	9601      	str	r6, [sp, #4]
 101e140:	f8ad 4016 	strh.w	r4, [sp, #22]
 101e144:	f000 fcd8 	bl	101eaf8 <_svfprintf_r>
 101e148:	1c43      	adds	r3, r0, #1
 101e14a:	da01      	bge.n	101e150 <snprintf+0x50>
 101e14c:	238b      	movs	r3, #139	; 0x8b
 101e14e:	602b      	str	r3, [r5, #0]
 101e150:	b01c      	add	sp, #112	; 0x70
 101e152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101e156:	b002      	add	sp, #8
 101e158:	4770      	bx	lr
 101e15a:	ab21      	add	r3, sp, #132	; 0x84
 101e15c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101e15e:	a902      	add	r1, sp, #8
 101e160:	4628      	mov	r0, r5
 101e162:	9301      	str	r3, [sp, #4]
 101e164:	3c01      	subs	r4, #1
 101e166:	9404      	str	r4, [sp, #16]
 101e168:	9407      	str	r4, [sp, #28]
 101e16a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101e16e:	f8ad 4016 	strh.w	r4, [sp, #22]
 101e172:	f000 fcc1 	bl	101eaf8 <_svfprintf_r>
 101e176:	1c42      	adds	r2, r0, #1
 101e178:	f04f 0200 	mov.w	r2, #0
 101e17c:	bfbc      	itt	lt
 101e17e:	238b      	movlt	r3, #139	; 0x8b
 101e180:	602b      	strlt	r3, [r5, #0]
 101e182:	9b02      	ldr	r3, [sp, #8]
 101e184:	701a      	strb	r2, [r3, #0]
 101e186:	b01c      	add	sp, #112	; 0x70
 101e188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101e18c:	b002      	add	sp, #8
 101e18e:	4770      	bx	lr

0101e190 <strcasecmp>:
 101e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 101e192:	4607      	mov	r7, r0
 101e194:	460e      	mov	r6, r1
 101e196:	f817 4b01 	ldrb.w	r4, [r7], #1
 101e19a:	f7fe fa6f 	bl	101c67c <__locale_ctype_ptr>
 101e19e:	f816 5b01 	ldrb.w	r5, [r6], #1
 101e1a2:	4420      	add	r0, r4
 101e1a4:	7843      	ldrb	r3, [r0, #1]
 101e1a6:	f003 0303 	and.w	r3, r3, #3
 101e1aa:	2b01      	cmp	r3, #1
 101e1ac:	bf08      	it	eq
 101e1ae:	3420      	addeq	r4, #32
 101e1b0:	f7fe fa64 	bl	101c67c <__locale_ctype_ptr>
 101e1b4:	4428      	add	r0, r5
 101e1b6:	7843      	ldrb	r3, [r0, #1]
 101e1b8:	f003 0303 	and.w	r3, r3, #3
 101e1bc:	2b01      	cmp	r3, #1
 101e1be:	d004      	beq.n	101e1ca <strcasecmp+0x3a>
 101e1c0:	1b60      	subs	r0, r4, r5
 101e1c2:	d101      	bne.n	101e1c8 <strcasecmp+0x38>
 101e1c4:	2d00      	cmp	r5, #0
 101e1c6:	d1e6      	bne.n	101e196 <strcasecmp+0x6>
 101e1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101e1ca:	f105 0020 	add.w	r0, r5, #32
 101e1ce:	1a20      	subs	r0, r4, r0
 101e1d0:	d0e1      	beq.n	101e196 <strcasecmp+0x6>
 101e1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0101e1d4 <strcat>:
 101e1d4:	0783      	lsls	r3, r0, #30
 101e1d6:	b510      	push	{r4, lr}
 101e1d8:	4604      	mov	r4, r0
 101e1da:	d111      	bne.n	101e200 <strcat+0x2c>
 101e1dc:	6822      	ldr	r2, [r4, #0]
 101e1de:	4620      	mov	r0, r4
 101e1e0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101e1e4:	ea23 0302 	bic.w	r3, r3, r2
 101e1e8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101e1ec:	d108      	bne.n	101e200 <strcat+0x2c>
 101e1ee:	f850 2f04 	ldr.w	r2, [r0, #4]!
 101e1f2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101e1f6:	ea23 0302 	bic.w	r3, r3, r2
 101e1fa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101e1fe:	d0f6      	beq.n	101e1ee <strcat+0x1a>
 101e200:	7803      	ldrb	r3, [r0, #0]
 101e202:	b11b      	cbz	r3, 101e20c <strcat+0x38>
 101e204:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 101e208:	2b00      	cmp	r3, #0
 101e20a:	d1fb      	bne.n	101e204 <strcat+0x30>
 101e20c:	f000 f9e6 	bl	101e5dc <strcpy>
 101e210:	4620      	mov	r0, r4
 101e212:	bd10      	pop	{r4, pc}

0101e214 <strchr>:
 101e214:	b2c9      	uxtb	r1, r1
 101e216:	f000 0303 	and.w	r3, r0, #3
 101e21a:	2900      	cmp	r1, #0
 101e21c:	d042      	beq.n	101e2a4 <strchr+0x90>
 101e21e:	b17b      	cbz	r3, 101e240 <strchr+0x2c>
 101e220:	7803      	ldrb	r3, [r0, #0]
 101e222:	2b00      	cmp	r3, #0
 101e224:	d066      	beq.n	101e2f4 <strchr+0xe0>
 101e226:	4299      	cmp	r1, r3
 101e228:	d061      	beq.n	101e2ee <strchr+0xda>
 101e22a:	1c43      	adds	r3, r0, #1
 101e22c:	e005      	b.n	101e23a <strchr+0x26>
 101e22e:	f813 2b01 	ldrb.w	r2, [r3], #1
 101e232:	2a00      	cmp	r2, #0
 101e234:	d05c      	beq.n	101e2f0 <strchr+0xdc>
 101e236:	428a      	cmp	r2, r1
 101e238:	d059      	beq.n	101e2ee <strchr+0xda>
 101e23a:	079a      	lsls	r2, r3, #30
 101e23c:	4618      	mov	r0, r3
 101e23e:	d1f6      	bne.n	101e22e <strchr+0x1a>
 101e240:	b470      	push	{r4, r5, r6}
 101e242:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 101e246:	6804      	ldr	r4, [r0, #0]
 101e248:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 101e24c:	ea86 0504 	eor.w	r5, r6, r4
 101e250:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 101e254:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 101e258:	ea23 0304 	bic.w	r3, r3, r4
 101e25c:	ea22 0205 	bic.w	r2, r2, r5
 101e260:	4313      	orrs	r3, r2
 101e262:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101e266:	d10f      	bne.n	101e288 <strchr+0x74>
 101e268:	f850 4f04 	ldr.w	r4, [r0, #4]!
 101e26c:	ea84 0506 	eor.w	r5, r4, r6
 101e270:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 101e274:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 101e278:	ea23 0304 	bic.w	r3, r3, r4
 101e27c:	ea22 0205 	bic.w	r2, r2, r5
 101e280:	4313      	orrs	r3, r2
 101e282:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101e286:	d0ef      	beq.n	101e268 <strchr+0x54>
 101e288:	7803      	ldrb	r3, [r0, #0]
 101e28a:	b143      	cbz	r3, 101e29e <strchr+0x8a>
 101e28c:	4299      	cmp	r1, r3
 101e28e:	d102      	bne.n	101e296 <strchr+0x82>
 101e290:	e006      	b.n	101e2a0 <strchr+0x8c>
 101e292:	428b      	cmp	r3, r1
 101e294:	d004      	beq.n	101e2a0 <strchr+0x8c>
 101e296:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 101e29a:	2b00      	cmp	r3, #0
 101e29c:	d1f9      	bne.n	101e292 <strchr+0x7e>
 101e29e:	4618      	mov	r0, r3
 101e2a0:	bc70      	pop	{r4, r5, r6}
 101e2a2:	4770      	bx	lr
 101e2a4:	b15b      	cbz	r3, 101e2be <strchr+0xaa>
 101e2a6:	7803      	ldrb	r3, [r0, #0]
 101e2a8:	b30b      	cbz	r3, 101e2ee <strchr+0xda>
 101e2aa:	1c43      	adds	r3, r0, #1
 101e2ac:	e001      	b.n	101e2b2 <strchr+0x9e>
 101e2ae:	7802      	ldrb	r2, [r0, #0]
 101e2b0:	b1ea      	cbz	r2, 101e2ee <strchr+0xda>
 101e2b2:	f013 0f03 	tst.w	r3, #3
 101e2b6:	4618      	mov	r0, r3
 101e2b8:	f103 0301 	add.w	r3, r3, #1
 101e2bc:	d1f7      	bne.n	101e2ae <strchr+0x9a>
 101e2be:	6802      	ldr	r2, [r0, #0]
 101e2c0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101e2c4:	ea23 0302 	bic.w	r3, r3, r2
 101e2c8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101e2cc:	d108      	bne.n	101e2e0 <strchr+0xcc>
 101e2ce:	f850 2f04 	ldr.w	r2, [r0, #4]!
 101e2d2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101e2d6:	ea23 0302 	bic.w	r3, r3, r2
 101e2da:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101e2de:	d0f6      	beq.n	101e2ce <strchr+0xba>
 101e2e0:	7803      	ldrb	r3, [r0, #0]
 101e2e2:	b123      	cbz	r3, 101e2ee <strchr+0xda>
 101e2e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 101e2e8:	2b00      	cmp	r3, #0
 101e2ea:	d1fb      	bne.n	101e2e4 <strchr+0xd0>
 101e2ec:	4770      	bx	lr
 101e2ee:	4770      	bx	lr
 101e2f0:	4610      	mov	r0, r2
 101e2f2:	4770      	bx	lr
 101e2f4:	4618      	mov	r0, r3
 101e2f6:	4770      	bx	lr
	...
 101e300:	eba2 0003 	sub.w	r0, r2, r3
 101e304:	4770      	bx	lr
 101e306:	bf00      	nop

0101e308 <strcmp>:
 101e308:	7802      	ldrb	r2, [r0, #0]
 101e30a:	780b      	ldrb	r3, [r1, #0]
 101e30c:	2a01      	cmp	r2, #1
 101e30e:	bf28      	it	cs
 101e310:	429a      	cmpcs	r2, r3
 101e312:	d1f5      	bne.n	101e300 <strchr+0xec>
 101e314:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 101e318:	ea40 0401 	orr.w	r4, r0, r1
 101e31c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 101e320:	f06f 0c00 	mvn.w	ip, #0
 101e324:	ea4f 7244 	mov.w	r2, r4, lsl #29
 101e328:	b312      	cbz	r2, 101e370 <strcmp+0x68>
 101e32a:	ea80 0401 	eor.w	r4, r0, r1
 101e32e:	f014 0f07 	tst.w	r4, #7
 101e332:	d16a      	bne.n	101e40a <strcmp+0x102>
 101e334:	f000 0407 	and.w	r4, r0, #7
 101e338:	f020 0007 	bic.w	r0, r0, #7
 101e33c:	f004 0503 	and.w	r5, r4, #3
 101e340:	f021 0107 	bic.w	r1, r1, #7
 101e344:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 101e348:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 101e34c:	f014 0f04 	tst.w	r4, #4
 101e350:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 101e354:	fa0c f405 	lsl.w	r4, ip, r5
 101e358:	ea62 0204 	orn	r2, r2, r4
 101e35c:	ea66 0604 	orn	r6, r6, r4
 101e360:	d00a      	beq.n	101e378 <strcmp+0x70>
 101e362:	ea63 0304 	orn	r3, r3, r4
 101e366:	4662      	mov	r2, ip
 101e368:	ea67 0704 	orn	r7, r7, r4
 101e36c:	4666      	mov	r6, ip
 101e36e:	e003      	b.n	101e378 <strcmp+0x70>
 101e370:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 101e374:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 101e378:	fa82 f54c 	uadd8	r5, r2, ip
 101e37c:	ea82 0406 	eor.w	r4, r2, r6
 101e380:	faa4 f48c 	sel	r4, r4, ip
 101e384:	bb6c      	cbnz	r4, 101e3e2 <strcmp+0xda>
 101e386:	fa83 f54c 	uadd8	r5, r3, ip
 101e38a:	ea83 0507 	eor.w	r5, r3, r7
 101e38e:	faa5 f58c 	sel	r5, r5, ip
 101e392:	b995      	cbnz	r5, 101e3ba <strcmp+0xb2>
 101e394:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 101e398:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 101e39c:	fa82 f54c 	uadd8	r5, r2, ip
 101e3a0:	ea82 0406 	eor.w	r4, r2, r6
 101e3a4:	faa4 f48c 	sel	r4, r4, ip
 101e3a8:	fa83 f54c 	uadd8	r5, r3, ip
 101e3ac:	ea83 0507 	eor.w	r5, r3, r7
 101e3b0:	faa5 f58c 	sel	r5, r5, ip
 101e3b4:	4325      	orrs	r5, r4
 101e3b6:	d0db      	beq.n	101e370 <strcmp+0x68>
 101e3b8:	b99c      	cbnz	r4, 101e3e2 <strcmp+0xda>
 101e3ba:	ba2d      	rev	r5, r5
 101e3bc:	fab5 f485 	clz	r4, r5
 101e3c0:	f024 0407 	bic.w	r4, r4, #7
 101e3c4:	fa27 f104 	lsr.w	r1, r7, r4
 101e3c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 101e3cc:	fa23 f304 	lsr.w	r3, r3, r4
 101e3d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 101e3d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101e3d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101e3dc:	eba0 0001 	sub.w	r0, r0, r1
 101e3e0:	4770      	bx	lr
 101e3e2:	ba24      	rev	r4, r4
 101e3e4:	fab4 f484 	clz	r4, r4
 101e3e8:	f024 0407 	bic.w	r4, r4, #7
 101e3ec:	fa26 f104 	lsr.w	r1, r6, r4
 101e3f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 101e3f4:	fa22 f204 	lsr.w	r2, r2, r4
 101e3f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 101e3fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101e400:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101e404:	eba0 0001 	sub.w	r0, r0, r1
 101e408:	4770      	bx	lr
 101e40a:	f014 0f03 	tst.w	r4, #3
 101e40e:	d13c      	bne.n	101e48a <strcmp+0x182>
 101e410:	f010 0403 	ands.w	r4, r0, #3
 101e414:	d128      	bne.n	101e468 <strcmp+0x160>
 101e416:	f850 2b08 	ldr.w	r2, [r0], #8
 101e41a:	f851 3b08 	ldr.w	r3, [r1], #8
 101e41e:	fa82 f54c 	uadd8	r5, r2, ip
 101e422:	ea82 0503 	eor.w	r5, r2, r3
 101e426:	faa5 f58c 	sel	r5, r5, ip
 101e42a:	b95d      	cbnz	r5, 101e444 <strcmp+0x13c>
 101e42c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 101e430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 101e434:	fa82 f54c 	uadd8	r5, r2, ip
 101e438:	ea82 0503 	eor.w	r5, r2, r3
 101e43c:	faa5 f58c 	sel	r5, r5, ip
 101e440:	2d00      	cmp	r5, #0
 101e442:	d0e8      	beq.n	101e416 <strcmp+0x10e>
 101e444:	ba2d      	rev	r5, r5
 101e446:	fab5 f485 	clz	r4, r5
 101e44a:	f024 0407 	bic.w	r4, r4, #7
 101e44e:	fa23 f104 	lsr.w	r1, r3, r4
 101e452:	fa22 f204 	lsr.w	r2, r2, r4
 101e456:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 101e45a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101e45e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101e462:	eba0 0001 	sub.w	r0, r0, r1
 101e466:	4770      	bx	lr
 101e468:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 101e46c:	f020 0003 	bic.w	r0, r0, #3
 101e470:	f850 2b08 	ldr.w	r2, [r0], #8
 101e474:	f021 0103 	bic.w	r1, r1, #3
 101e478:	f851 3b08 	ldr.w	r3, [r1], #8
 101e47c:	fa0c f404 	lsl.w	r4, ip, r4
 101e480:	ea62 0204 	orn	r2, r2, r4
 101e484:	ea63 0304 	orn	r3, r3, r4
 101e488:	e7c9      	b.n	101e41e <strcmp+0x116>
 101e48a:	f010 0403 	ands.w	r4, r0, #3
 101e48e:	d01a      	beq.n	101e4c6 <strcmp+0x1be>
 101e490:	eba1 0104 	sub.w	r1, r1, r4
 101e494:	f020 0003 	bic.w	r0, r0, #3
 101e498:	07e4      	lsls	r4, r4, #31
 101e49a:	f850 2b04 	ldr.w	r2, [r0], #4
 101e49e:	d006      	beq.n	101e4ae <strcmp+0x1a6>
 101e4a0:	d20f      	bcs.n	101e4c2 <strcmp+0x1ba>
 101e4a2:	788b      	ldrb	r3, [r1, #2]
 101e4a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 101e4a8:	1ae4      	subs	r4, r4, r3
 101e4aa:	d106      	bne.n	101e4ba <strcmp+0x1b2>
 101e4ac:	b12b      	cbz	r3, 101e4ba <strcmp+0x1b2>
 101e4ae:	78cb      	ldrb	r3, [r1, #3]
 101e4b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 101e4b4:	1ae4      	subs	r4, r4, r3
 101e4b6:	d100      	bne.n	101e4ba <strcmp+0x1b2>
 101e4b8:	b91b      	cbnz	r3, 101e4c2 <strcmp+0x1ba>
 101e4ba:	4620      	mov	r0, r4
 101e4bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 101e4c0:	4770      	bx	lr
 101e4c2:	f101 0104 	add.w	r1, r1, #4
 101e4c6:	f850 2b04 	ldr.w	r2, [r0], #4
 101e4ca:	07cc      	lsls	r4, r1, #31
 101e4cc:	f021 0103 	bic.w	r1, r1, #3
 101e4d0:	f851 3b04 	ldr.w	r3, [r1], #4
 101e4d4:	d848      	bhi.n	101e568 <strcmp+0x260>
 101e4d6:	d224      	bcs.n	101e522 <strcmp+0x21a>
 101e4d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 101e4dc:	fa82 f54c 	uadd8	r5, r2, ip
 101e4e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 101e4e4:	faa5 f58c 	sel	r5, r5, ip
 101e4e8:	d10a      	bne.n	101e500 <strcmp+0x1f8>
 101e4ea:	b965      	cbnz	r5, 101e506 <strcmp+0x1fe>
 101e4ec:	f851 3b04 	ldr.w	r3, [r1], #4
 101e4f0:	ea84 0402 	eor.w	r4, r4, r2
 101e4f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 101e4f8:	d10e      	bne.n	101e518 <strcmp+0x210>
 101e4fa:	f850 2b04 	ldr.w	r2, [r0], #4
 101e4fe:	e7eb      	b.n	101e4d8 <strcmp+0x1d0>
 101e500:	ea4f 2313 	mov.w	r3, r3, lsr #8
 101e504:	e055      	b.n	101e5b2 <strcmp+0x2aa>
 101e506:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 101e50a:	d14d      	bne.n	101e5a8 <strcmp+0x2a0>
 101e50c:	7808      	ldrb	r0, [r1, #0]
 101e50e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101e512:	f1c0 0000 	rsb	r0, r0, #0
 101e516:	4770      	bx	lr
 101e518:	ea4f 6212 	mov.w	r2, r2, lsr #24
 101e51c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 101e520:	e047      	b.n	101e5b2 <strcmp+0x2aa>
 101e522:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 101e526:	fa82 f54c 	uadd8	r5, r2, ip
 101e52a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 101e52e:	faa5 f58c 	sel	r5, r5, ip
 101e532:	d10a      	bne.n	101e54a <strcmp+0x242>
 101e534:	b965      	cbnz	r5, 101e550 <strcmp+0x248>
 101e536:	f851 3b04 	ldr.w	r3, [r1], #4
 101e53a:	ea84 0402 	eor.w	r4, r4, r2
 101e53e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 101e542:	d10c      	bne.n	101e55e <strcmp+0x256>
 101e544:	f850 2b04 	ldr.w	r2, [r0], #4
 101e548:	e7eb      	b.n	101e522 <strcmp+0x21a>
 101e54a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 101e54e:	e030      	b.n	101e5b2 <strcmp+0x2aa>
 101e550:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 101e554:	d128      	bne.n	101e5a8 <strcmp+0x2a0>
 101e556:	880b      	ldrh	r3, [r1, #0]
 101e558:	ea4f 4212 	mov.w	r2, r2, lsr #16
 101e55c:	e029      	b.n	101e5b2 <strcmp+0x2aa>
 101e55e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 101e562:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 101e566:	e024      	b.n	101e5b2 <strcmp+0x2aa>
 101e568:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 101e56c:	fa82 f54c 	uadd8	r5, r2, ip
 101e570:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 101e574:	faa5 f58c 	sel	r5, r5, ip
 101e578:	d10a      	bne.n	101e590 <strcmp+0x288>
 101e57a:	b965      	cbnz	r5, 101e596 <strcmp+0x28e>
 101e57c:	f851 3b04 	ldr.w	r3, [r1], #4
 101e580:	ea84 0402 	eor.w	r4, r4, r2
 101e584:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 101e588:	d109      	bne.n	101e59e <strcmp+0x296>
 101e58a:	f850 2b04 	ldr.w	r2, [r0], #4
 101e58e:	e7eb      	b.n	101e568 <strcmp+0x260>
 101e590:	ea4f 6313 	mov.w	r3, r3, lsr #24
 101e594:	e00d      	b.n	101e5b2 <strcmp+0x2aa>
 101e596:	f015 0fff 	tst.w	r5, #255	; 0xff
 101e59a:	d105      	bne.n	101e5a8 <strcmp+0x2a0>
 101e59c:	680b      	ldr	r3, [r1, #0]
 101e59e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 101e5a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 101e5a6:	e004      	b.n	101e5b2 <strcmp+0x2aa>
 101e5a8:	f04f 0000 	mov.w	r0, #0
 101e5ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101e5b0:	4770      	bx	lr
 101e5b2:	ba12      	rev	r2, r2
 101e5b4:	ba1b      	rev	r3, r3
 101e5b6:	fa82 f44c 	uadd8	r4, r2, ip
 101e5ba:	ea82 0403 	eor.w	r4, r2, r3
 101e5be:	faa4 f58c 	sel	r5, r4, ip
 101e5c2:	fab5 f485 	clz	r4, r5
 101e5c6:	fa02 f204 	lsl.w	r2, r2, r4
 101e5ca:	fa03 f304 	lsl.w	r3, r3, r4
 101e5ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 101e5d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101e5d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 101e5da:	4770      	bx	lr

0101e5dc <strcpy>:
 101e5dc:	f891 f000 	pld	[r1]
 101e5e0:	ea80 0201 	eor.w	r2, r0, r1
 101e5e4:	4684      	mov	ip, r0
 101e5e6:	f012 0f03 	tst.w	r2, #3
 101e5ea:	d151      	bne.n	101e690 <strcpy+0xb4>
 101e5ec:	f011 0f03 	tst.w	r1, #3
 101e5f0:	d134      	bne.n	101e65c <strcpy+0x80>
 101e5f2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 101e5f6:	f011 0f04 	tst.w	r1, #4
 101e5fa:	f851 3b04 	ldr.w	r3, [r1], #4
 101e5fe:	d00b      	beq.n	101e618 <strcpy+0x3c>
 101e600:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 101e604:	439a      	bics	r2, r3
 101e606:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 101e60a:	bf04      	itt	eq
 101e60c:	f84c 3b04 	streq.w	r3, [ip], #4
 101e610:	f851 3b04 	ldreq.w	r3, [r1], #4
 101e614:	d118      	bne.n	101e648 <strcpy+0x6c>
 101e616:	bf00      	nop
 101e618:	f891 f008 	pld	[r1, #8]
 101e61c:	f851 4b04 	ldr.w	r4, [r1], #4
 101e620:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 101e624:	439a      	bics	r2, r3
 101e626:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 101e62a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 101e62e:	d10b      	bne.n	101e648 <strcpy+0x6c>
 101e630:	f84c 3b04 	str.w	r3, [ip], #4
 101e634:	43a2      	bics	r2, r4
 101e636:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 101e63a:	bf04      	itt	eq
 101e63c:	f851 3b04 	ldreq.w	r3, [r1], #4
 101e640:	f84c 4b04 	streq.w	r4, [ip], #4
 101e644:	d0e8      	beq.n	101e618 <strcpy+0x3c>
 101e646:	4623      	mov	r3, r4
 101e648:	f80c 3b01 	strb.w	r3, [ip], #1
 101e64c:	f013 0fff 	tst.w	r3, #255	; 0xff
 101e650:	ea4f 2333 	mov.w	r3, r3, ror #8
 101e654:	d1f8      	bne.n	101e648 <strcpy+0x6c>
 101e656:	f85d 4b04 	ldr.w	r4, [sp], #4
 101e65a:	4770      	bx	lr
 101e65c:	f011 0f01 	tst.w	r1, #1
 101e660:	d006      	beq.n	101e670 <strcpy+0x94>
 101e662:	f811 2b01 	ldrb.w	r2, [r1], #1
 101e666:	f80c 2b01 	strb.w	r2, [ip], #1
 101e66a:	2a00      	cmp	r2, #0
 101e66c:	bf08      	it	eq
 101e66e:	4770      	bxeq	lr
 101e670:	f011 0f02 	tst.w	r1, #2
 101e674:	d0bd      	beq.n	101e5f2 <strcpy+0x16>
 101e676:	f831 2b02 	ldrh.w	r2, [r1], #2
 101e67a:	f012 0fff 	tst.w	r2, #255	; 0xff
 101e67e:	bf16      	itet	ne
 101e680:	f82c 2b02 	strhne.w	r2, [ip], #2
 101e684:	f88c 2000 	strbeq.w	r2, [ip]
 101e688:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 101e68c:	d1b1      	bne.n	101e5f2 <strcpy+0x16>
 101e68e:	4770      	bx	lr
 101e690:	f811 2b01 	ldrb.w	r2, [r1], #1
 101e694:	f80c 2b01 	strb.w	r2, [ip], #1
 101e698:	2a00      	cmp	r2, #0
 101e69a:	d1f9      	bne.n	101e690 <strcpy+0xb4>
 101e69c:	4770      	bx	lr
 101e69e:	bf00      	nop

0101e6a0 <strlcpy>:
 101e6a0:	b19a      	cbz	r2, 101e6ca <strlcpy+0x2a>
 101e6a2:	2a01      	cmp	r2, #1
 101e6a4:	d019      	beq.n	101e6da <strlcpy+0x3a>
 101e6a6:	b470      	push	{r4, r5, r6}
 101e6a8:	460b      	mov	r3, r1
 101e6aa:	4605      	mov	r5, r0
 101e6ac:	e001      	b.n	101e6b2 <strlcpy+0x12>
 101e6ae:	42e0      	cmn	r0, r4
 101e6b0:	d017      	beq.n	101e6e2 <strlcpy+0x42>
 101e6b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 101e6b6:	f805 6b01 	strb.w	r6, [r5], #1
 101e6ba:	43ec      	mvns	r4, r5
 101e6bc:	4414      	add	r4, r2
 101e6be:	2e00      	cmp	r6, #0
 101e6c0:	d1f5      	bne.n	101e6ae <strlcpy+0xe>
 101e6c2:	1a58      	subs	r0, r3, r1
 101e6c4:	3801      	subs	r0, #1
 101e6c6:	bc70      	pop	{r4, r5, r6}
 101e6c8:	4770      	bx	lr
 101e6ca:	460b      	mov	r3, r1
 101e6cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 101e6d0:	2a00      	cmp	r2, #0
 101e6d2:	d1fb      	bne.n	101e6cc <strlcpy+0x2c>
 101e6d4:	1a58      	subs	r0, r3, r1
 101e6d6:	3801      	subs	r0, #1
 101e6d8:	4770      	bx	lr
 101e6da:	2200      	movs	r2, #0
 101e6dc:	460b      	mov	r3, r1
 101e6de:	7002      	strb	r2, [r0, #0]
 101e6e0:	e7f4      	b.n	101e6cc <strlcpy+0x2c>
 101e6e2:	2200      	movs	r2, #0
 101e6e4:	702a      	strb	r2, [r5, #0]
 101e6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 101e6ea:	2a00      	cmp	r2, #0
 101e6ec:	d1fb      	bne.n	101e6e6 <strlcpy+0x46>
 101e6ee:	1a58      	subs	r0, r3, r1
 101e6f0:	3801      	subs	r0, #1
 101e6f2:	bc70      	pop	{r4, r5, r6}
 101e6f4:	4770      	bx	lr
 101e6f6:	bf00      	nop
	...

0101e700 <strlen>:
 101e700:	f890 f000 	pld	[r0]
 101e704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 101e708:	f020 0107 	bic.w	r1, r0, #7
 101e70c:	f06f 0c00 	mvn.w	ip, #0
 101e710:	f010 0407 	ands.w	r4, r0, #7
 101e714:	f891 f020 	pld	[r1, #32]
 101e718:	f040 8049 	bne.w	101e7ae <strlen+0xae>
 101e71c:	f04f 0400 	mov.w	r4, #0
 101e720:	f06f 0007 	mvn.w	r0, #7
 101e724:	e9d1 2300 	ldrd	r2, r3, [r1]
 101e728:	f891 f040 	pld	[r1, #64]	; 0x40
 101e72c:	f100 0008 	add.w	r0, r0, #8
 101e730:	fa82 f24c 	uadd8	r2, r2, ip
 101e734:	faa4 f28c 	sel	r2, r4, ip
 101e738:	fa83 f34c 	uadd8	r3, r3, ip
 101e73c:	faa2 f38c 	sel	r3, r2, ip
 101e740:	bb4b      	cbnz	r3, 101e796 <strlen+0x96>
 101e742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 101e746:	fa82 f24c 	uadd8	r2, r2, ip
 101e74a:	f100 0008 	add.w	r0, r0, #8
 101e74e:	faa4 f28c 	sel	r2, r4, ip
 101e752:	fa83 f34c 	uadd8	r3, r3, ip
 101e756:	faa2 f38c 	sel	r3, r2, ip
 101e75a:	b9e3      	cbnz	r3, 101e796 <strlen+0x96>
 101e75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 101e760:	fa82 f24c 	uadd8	r2, r2, ip
 101e764:	f100 0008 	add.w	r0, r0, #8
 101e768:	faa4 f28c 	sel	r2, r4, ip
 101e76c:	fa83 f34c 	uadd8	r3, r3, ip
 101e770:	faa2 f38c 	sel	r3, r2, ip
 101e774:	b97b      	cbnz	r3, 101e796 <strlen+0x96>
 101e776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 101e77a:	f101 0120 	add.w	r1, r1, #32
 101e77e:	fa82 f24c 	uadd8	r2, r2, ip
 101e782:	f100 0008 	add.w	r0, r0, #8
 101e786:	faa4 f28c 	sel	r2, r4, ip
 101e78a:	fa83 f34c 	uadd8	r3, r3, ip
 101e78e:	faa2 f38c 	sel	r3, r2, ip
 101e792:	2b00      	cmp	r3, #0
 101e794:	d0c6      	beq.n	101e724 <strlen+0x24>
 101e796:	2a00      	cmp	r2, #0
 101e798:	bf04      	itt	eq
 101e79a:	3004      	addeq	r0, #4
 101e79c:	461a      	moveq	r2, r3
 101e79e:	ba12      	rev	r2, r2
 101e7a0:	fab2 f282 	clz	r2, r2
 101e7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 101e7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 101e7ac:	4770      	bx	lr
 101e7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 101e7b2:	f004 0503 	and.w	r5, r4, #3
 101e7b6:	f1c4 0000 	rsb	r0, r4, #0
 101e7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 101e7be:	f014 0f04 	tst.w	r4, #4
 101e7c2:	f891 f040 	pld	[r1, #64]	; 0x40
 101e7c6:	fa0c f505 	lsl.w	r5, ip, r5
 101e7ca:	ea62 0205 	orn	r2, r2, r5
 101e7ce:	bf1c      	itt	ne
 101e7d0:	ea63 0305 	ornne	r3, r3, r5
 101e7d4:	4662      	movne	r2, ip
 101e7d6:	f04f 0400 	mov.w	r4, #0
 101e7da:	e7a9      	b.n	101e730 <strlen+0x30>

0101e7dc <strncasecmp>:
 101e7dc:	b34a      	cbz	r2, 101e832 <strncasecmp+0x56>
 101e7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101e7e2:	4606      	mov	r6, r0
 101e7e4:	460f      	mov	r7, r1
 101e7e6:	eb00 0802 	add.w	r8, r0, r2
 101e7ea:	e004      	b.n	101e7f6 <strncasecmp+0x1a>
 101e7ec:	1b60      	subs	r0, r4, r5
 101e7ee:	d11b      	bne.n	101e828 <strncasecmp+0x4c>
 101e7f0:	b1e5      	cbz	r5, 101e82c <strncasecmp+0x50>
 101e7f2:	45b0      	cmp	r8, r6
 101e7f4:	d01a      	beq.n	101e82c <strncasecmp+0x50>
 101e7f6:	f816 4b01 	ldrb.w	r4, [r6], #1
 101e7fa:	f7fd ff3f 	bl	101c67c <__locale_ctype_ptr>
 101e7fe:	f817 5b01 	ldrb.w	r5, [r7], #1
 101e802:	4420      	add	r0, r4
 101e804:	7843      	ldrb	r3, [r0, #1]
 101e806:	f003 0303 	and.w	r3, r3, #3
 101e80a:	2b01      	cmp	r3, #1
 101e80c:	bf08      	it	eq
 101e80e:	3420      	addeq	r4, #32
 101e810:	f7fd ff34 	bl	101c67c <__locale_ctype_ptr>
 101e814:	4428      	add	r0, r5
 101e816:	7843      	ldrb	r3, [r0, #1]
 101e818:	f003 0303 	and.w	r3, r3, #3
 101e81c:	2b01      	cmp	r3, #1
 101e81e:	d1e5      	bne.n	101e7ec <strncasecmp+0x10>
 101e820:	f105 0020 	add.w	r0, r5, #32
 101e824:	1a20      	subs	r0, r4, r0
 101e826:	d0e4      	beq.n	101e7f2 <strncasecmp+0x16>
 101e828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101e82c:	2000      	movs	r0, #0
 101e82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101e832:	2000      	movs	r0, #0
 101e834:	4770      	bx	lr
 101e836:	bf00      	nop

0101e838 <strncmp>:
 101e838:	2a00      	cmp	r2, #0
 101e83a:	d049      	beq.n	101e8d0 <strncmp+0x98>
 101e83c:	ea40 0301 	orr.w	r3, r0, r1
 101e840:	f013 0303 	ands.w	r3, r3, #3
 101e844:	b4f0      	push	{r4, r5, r6, r7}
 101e846:	d125      	bne.n	101e894 <strncmp+0x5c>
 101e848:	2a03      	cmp	r2, #3
 101e84a:	d923      	bls.n	101e894 <strncmp+0x5c>
 101e84c:	6804      	ldr	r4, [r0, #0]
 101e84e:	680d      	ldr	r5, [r1, #0]
 101e850:	42ac      	cmp	r4, r5
 101e852:	d11f      	bne.n	101e894 <strncmp+0x5c>
 101e854:	3a04      	subs	r2, #4
 101e856:	d038      	beq.n	101e8ca <strncmp+0x92>
 101e858:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 101e85c:	ea25 0404 	bic.w	r4, r5, r4
 101e860:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 101e864:	d131      	bne.n	101e8ca <strncmp+0x92>
 101e866:	1d07      	adds	r7, r0, #4
 101e868:	1d0d      	adds	r5, r1, #4
 101e86a:	e00d      	b.n	101e888 <strncmp+0x50>
 101e86c:	f857 3b04 	ldr.w	r3, [r7], #4
 101e870:	680e      	ldr	r6, [r1, #0]
 101e872:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 101e876:	42b3      	cmp	r3, r6
 101e878:	ea24 0403 	bic.w	r4, r4, r3
 101e87c:	d10a      	bne.n	101e894 <strncmp+0x5c>
 101e87e:	3a04      	subs	r2, #4
 101e880:	d023      	beq.n	101e8ca <strncmp+0x92>
 101e882:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 101e886:	d120      	bne.n	101e8ca <strncmp+0x92>
 101e888:	2a03      	cmp	r2, #3
 101e88a:	4629      	mov	r1, r5
 101e88c:	4638      	mov	r0, r7
 101e88e:	f105 0504 	add.w	r5, r5, #4
 101e892:	d8eb      	bhi.n	101e86c <strncmp+0x34>
 101e894:	7804      	ldrb	r4, [r0, #0]
 101e896:	780e      	ldrb	r6, [r1, #0]
 101e898:	42a6      	cmp	r6, r4
 101e89a:	d11b      	bne.n	101e8d4 <strncmp+0x9c>
 101e89c:	2a01      	cmp	r2, #1
 101e89e:	bf18      	it	ne
 101e8a0:	2e00      	cmpne	r6, #0
 101e8a2:	d012      	beq.n	101e8ca <strncmp+0x92>
 101e8a4:	4605      	mov	r5, r0
 101e8a6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 101e8aa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 101e8ae:	42b4      	cmp	r4, r6
 101e8b0:	ea6f 0305 	mvn.w	r3, r5
 101e8b4:	4413      	add	r3, r2
 101e8b6:	d10d      	bne.n	101e8d4 <strncmp+0x9c>
 101e8b8:	42d8      	cmn	r0, r3
 101e8ba:	bf0c      	ite	eq
 101e8bc:	2301      	moveq	r3, #1
 101e8be:	2300      	movne	r3, #0
 101e8c0:	2c00      	cmp	r4, #0
 101e8c2:	bf08      	it	eq
 101e8c4:	2301      	moveq	r3, #1
 101e8c6:	2b00      	cmp	r3, #0
 101e8c8:	d0ed      	beq.n	101e8a6 <strncmp+0x6e>
 101e8ca:	2000      	movs	r0, #0
 101e8cc:	bcf0      	pop	{r4, r5, r6, r7}
 101e8ce:	4770      	bx	lr
 101e8d0:	4610      	mov	r0, r2
 101e8d2:	4770      	bx	lr
 101e8d4:	1ba0      	subs	r0, r4, r6
 101e8d6:	bcf0      	pop	{r4, r5, r6, r7}
 101e8d8:	4770      	bx	lr
 101e8da:	bf00      	nop

0101e8dc <strncpy>:
 101e8dc:	2a03      	cmp	r2, #3
 101e8de:	ea40 0301 	orr.w	r3, r0, r1
 101e8e2:	b470      	push	{r4, r5, r6}
 101e8e4:	f3c3 0401 	ubfx	r4, r3, #0, #2
 101e8e8:	bf94      	ite	ls
 101e8ea:	2500      	movls	r5, #0
 101e8ec:	2501      	movhi	r5, #1
 101e8ee:	2c00      	cmp	r4, #0
 101e8f0:	4606      	mov	r6, r0
 101e8f2:	bf18      	it	ne
 101e8f4:	2500      	movne	r5, #0
 101e8f6:	b9a5      	cbnz	r5, 101e922 <strncpy+0x46>
 101e8f8:	b18a      	cbz	r2, 101e91e <strncpy+0x42>
 101e8fa:	780c      	ldrb	r4, [r1, #0]
 101e8fc:	4633      	mov	r3, r6
 101e8fe:	1e55      	subs	r5, r2, #1
 101e900:	f803 4b01 	strb.w	r4, [r3], #1
 101e904:	b1fc      	cbz	r4, 101e946 <strncpy+0x6a>
 101e906:	4432      	add	r2, r6
 101e908:	442e      	add	r6, r5
 101e90a:	e004      	b.n	101e916 <strncpy+0x3a>
 101e90c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 101e910:	f803 4b01 	strb.w	r4, [r3], #1
 101e914:	b1bc      	cbz	r4, 101e946 <strncpy+0x6a>
 101e916:	429a      	cmp	r2, r3
 101e918:	eba6 0503 	sub.w	r5, r6, r3
 101e91c:	d1f6      	bne.n	101e90c <strncpy+0x30>
 101e91e:	bc70      	pop	{r4, r5, r6}
 101e920:	4770      	bx	lr
 101e922:	460b      	mov	r3, r1
 101e924:	4619      	mov	r1, r3
 101e926:	f853 5b04 	ldr.w	r5, [r3], #4
 101e92a:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 101e92e:	ea24 0405 	bic.w	r4, r4, r5
 101e932:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 101e936:	d1e0      	bne.n	101e8fa <strncpy+0x1e>
 101e938:	3a04      	subs	r2, #4
 101e93a:	f846 5b04 	str.w	r5, [r6], #4
 101e93e:	2a03      	cmp	r2, #3
 101e940:	4619      	mov	r1, r3
 101e942:	d8ef      	bhi.n	101e924 <strncpy+0x48>
 101e944:	e7d8      	b.n	101e8f8 <strncpy+0x1c>
 101e946:	2d00      	cmp	r5, #0
 101e948:	d0e9      	beq.n	101e91e <strncpy+0x42>
 101e94a:	441d      	add	r5, r3
 101e94c:	2200      	movs	r2, #0
 101e94e:	f803 2b01 	strb.w	r2, [r3], #1
 101e952:	42ab      	cmp	r3, r5
 101e954:	d1fb      	bne.n	101e94e <strncpy+0x72>
 101e956:	bc70      	pop	{r4, r5, r6}
 101e958:	4770      	bx	lr
 101e95a:	bf00      	nop

0101e95c <_strtol_l.isra.0>:
 101e95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101e960:	b083      	sub	sp, #12
 101e962:	460f      	mov	r7, r1
 101e964:	4690      	mov	r8, r2
 101e966:	9001      	str	r0, [sp, #4]
 101e968:	461e      	mov	r6, r3
 101e96a:	468b      	mov	fp, r1
 101e96c:	e000      	b.n	101e970 <_strtol_l.isra.0+0x14>
 101e96e:	46ab      	mov	fp, r5
 101e970:	465d      	mov	r5, fp
 101e972:	980c      	ldr	r0, [sp, #48]	; 0x30
 101e974:	f815 4b01 	ldrb.w	r4, [r5], #1
 101e978:	f7fd fe7c 	bl	101c674 <__locale_ctype_ptr_l>
 101e97c:	4420      	add	r0, r4
 101e97e:	7842      	ldrb	r2, [r0, #1]
 101e980:	f012 0208 	ands.w	r2, r2, #8
 101e984:	d1f3      	bne.n	101e96e <_strtol_l.isra.0+0x12>
 101e986:	2c2d      	cmp	r4, #45	; 0x2d
 101e988:	d061      	beq.n	101ea4e <_strtol_l.isra.0+0xf2>
 101e98a:	2c2b      	cmp	r4, #43	; 0x2b
 101e98c:	4692      	mov	sl, r2
 101e98e:	bf04      	itt	eq
 101e990:	782c      	ldrbeq	r4, [r5, #0]
 101e992:	f10b 0502 	addeq.w	r5, fp, #2
 101e996:	f036 0310 	bics.w	r3, r6, #16
 101e99a:	d103      	bne.n	101e9a4 <_strtol_l.isra.0+0x48>
 101e99c:	2c30      	cmp	r4, #48	; 0x30
 101e99e:	d05c      	beq.n	101ea5a <_strtol_l.isra.0+0xfe>
 101e9a0:	b906      	cbnz	r6, 101e9a4 <_strtol_l.isra.0+0x48>
 101e9a2:	260a      	movs	r6, #10
 101e9a4:	46b3      	mov	fp, r6
 101e9a6:	f1ba 0f00 	cmp.w	sl, #0
 101e9aa:	4659      	mov	r1, fp
 101e9ac:	bf14      	ite	ne
 101e9ae:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 101e9b2:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 101e9b6:	4648      	mov	r0, r9
 101e9b8:	f7fc fbd4 	bl	101b164 <__aeabi_uidivmod>
 101e9bc:	2200      	movs	r2, #0
 101e9be:	4686      	mov	lr, r0
 101e9c0:	4610      	mov	r0, r2
 101e9c2:	e00e      	b.n	101e9e2 <_strtol_l.isra.0+0x86>
 101e9c4:	ebae 0400 	sub.w	r4, lr, r0
 101e9c8:	4299      	cmp	r1, r3
 101e9ca:	fab4 f484 	clz	r4, r4
 101e9ce:	ea4f 1454 	mov.w	r4, r4, lsr #5
 101e9d2:	bfa8      	it	ge
 101e9d4:	2400      	movge	r4, #0
 101e9d6:	b9f4      	cbnz	r4, 101ea16 <_strtol_l.isra.0+0xba>
 101e9d8:	fb0b 3000 	mla	r0, fp, r0, r3
 101e9dc:	2201      	movs	r2, #1
 101e9de:	f815 4b01 	ldrb.w	r4, [r5], #1
 101e9e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 101e9e6:	2b09      	cmp	r3, #9
 101e9e8:	d90c      	bls.n	101ea04 <_strtol_l.isra.0+0xa8>
 101e9ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 101e9ee:	2b19      	cmp	r3, #25
 101e9f0:	bf98      	it	ls
 101e9f2:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
 101e9f6:	d905      	bls.n	101ea04 <_strtol_l.isra.0+0xa8>
 101e9f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 101e9fc:	2b19      	cmp	r3, #25
 101e9fe:	d80d      	bhi.n	101ea1c <_strtol_l.isra.0+0xc0>
 101ea00:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 101ea04:	429e      	cmp	r6, r3
 101ea06:	dd09      	ble.n	101ea1c <_strtol_l.isra.0+0xc0>
 101ea08:	4586      	cmp	lr, r0
 101ea0a:	bf2c      	ite	cs
 101ea0c:	2400      	movcs	r4, #0
 101ea0e:	2401      	movcc	r4, #1
 101ea10:	ea54 72d2 	orrs.w	r2, r4, r2, lsr #31
 101ea14:	d0d6      	beq.n	101e9c4 <_strtol_l.isra.0+0x68>
 101ea16:	f04f 32ff 	mov.w	r2, #4294967295
 101ea1a:	e7e0      	b.n	101e9de <_strtol_l.isra.0+0x82>
 101ea1c:	1c53      	adds	r3, r2, #1
 101ea1e:	d00c      	beq.n	101ea3a <_strtol_l.isra.0+0xde>
 101ea20:	f1ba 0f00 	cmp.w	sl, #0
 101ea24:	d000      	beq.n	101ea28 <_strtol_l.isra.0+0xcc>
 101ea26:	4240      	negs	r0, r0
 101ea28:	f1b8 0f00 	cmp.w	r8, #0
 101ea2c:	d002      	beq.n	101ea34 <_strtol_l.isra.0+0xd8>
 101ea2e:	bb1a      	cbnz	r2, 101ea78 <_strtol_l.isra.0+0x11c>
 101ea30:	f8c8 7000 	str.w	r7, [r8]
 101ea34:	b003      	add	sp, #12
 101ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101ea3a:	9a01      	ldr	r2, [sp, #4]
 101ea3c:	2322      	movs	r3, #34	; 0x22
 101ea3e:	4648      	mov	r0, r9
 101ea40:	6013      	str	r3, [r2, #0]
 101ea42:	f1b8 0f00 	cmp.w	r8, #0
 101ea46:	d0f5      	beq.n	101ea34 <_strtol_l.isra.0+0xd8>
 101ea48:	1e6f      	subs	r7, r5, #1
 101ea4a:	4648      	mov	r0, r9
 101ea4c:	e7f0      	b.n	101ea30 <_strtol_l.isra.0+0xd4>
 101ea4e:	782c      	ldrb	r4, [r5, #0]
 101ea50:	f04f 0a01 	mov.w	sl, #1
 101ea54:	f10b 0502 	add.w	r5, fp, #2
 101ea58:	e79d      	b.n	101e996 <_strtol_l.isra.0+0x3a>
 101ea5a:	782b      	ldrb	r3, [r5, #0]
 101ea5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 101ea60:	2b58      	cmp	r3, #88	; 0x58
 101ea62:	d104      	bne.n	101ea6e <_strtol_l.isra.0+0x112>
 101ea64:	2610      	movs	r6, #16
 101ea66:	786c      	ldrb	r4, [r5, #1]
 101ea68:	46b3      	mov	fp, r6
 101ea6a:	3502      	adds	r5, #2
 101ea6c:	e79b      	b.n	101e9a6 <_strtol_l.isra.0+0x4a>
 101ea6e:	2e00      	cmp	r6, #0
 101ea70:	d198      	bne.n	101e9a4 <_strtol_l.isra.0+0x48>
 101ea72:	2608      	movs	r6, #8
 101ea74:	46b3      	mov	fp, r6
 101ea76:	e796      	b.n	101e9a6 <_strtol_l.isra.0+0x4a>
 101ea78:	4681      	mov	r9, r0
 101ea7a:	e7e5      	b.n	101ea48 <_strtol_l.isra.0+0xec>

0101ea7c <_strtol_r>:
 101ea7c:	b530      	push	{r4, r5, lr}
 101ea7e:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 101ea82:	f2c0 1406 	movt	r4, #262	; 0x106
 101ea86:	b083      	sub	sp, #12
 101ea88:	f64c 25e8 	movw	r5, #51944	; 0xcae8
 101ea8c:	f2c0 1506 	movt	r5, #262	; 0x106
 101ea90:	6824      	ldr	r4, [r4, #0]
 101ea92:	6b64      	ldr	r4, [r4, #52]	; 0x34
 101ea94:	2c00      	cmp	r4, #0
 101ea96:	bf08      	it	eq
 101ea98:	462c      	moveq	r4, r5
 101ea9a:	9400      	str	r4, [sp, #0]
 101ea9c:	f7ff ff5e 	bl	101e95c <_strtol_l.isra.0>
 101eaa0:	b003      	add	sp, #12
 101eaa2:	bd30      	pop	{r4, r5, pc}

0101eaa4 <strtol_l>:
 101eaa4:	b510      	push	{r4, lr}
 101eaa6:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 101eaaa:	b082      	sub	sp, #8
 101eaac:	f2c0 1406 	movt	r4, #262	; 0x106
 101eab0:	9300      	str	r3, [sp, #0]
 101eab2:	4613      	mov	r3, r2
 101eab4:	460a      	mov	r2, r1
 101eab6:	4601      	mov	r1, r0
 101eab8:	6820      	ldr	r0, [r4, #0]
 101eaba:	f7ff ff4f 	bl	101e95c <_strtol_l.isra.0>
 101eabe:	b002      	add	sp, #8
 101eac0:	bd10      	pop	{r4, pc}
 101eac2:	bf00      	nop

0101eac4 <strtol>:
 101eac4:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 101eac8:	f2c0 1306 	movt	r3, #262	; 0x106
 101eacc:	b570      	push	{r4, r5, r6, lr}
 101eace:	b082      	sub	sp, #8
 101ead0:	681e      	ldr	r6, [r3, #0]
 101ead2:	f64c 25e8 	movw	r5, #51944	; 0xcae8
 101ead6:	f2c0 1506 	movt	r5, #262	; 0x106
 101eada:	4613      	mov	r3, r2
 101eadc:	460a      	mov	r2, r1
 101eade:	4601      	mov	r1, r0
 101eae0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 101eae2:	4630      	mov	r0, r6
 101eae4:	2c00      	cmp	r4, #0
 101eae6:	bf08      	it	eq
 101eae8:	462c      	moveq	r4, r5
 101eaea:	9400      	str	r4, [sp, #0]
 101eaec:	f7ff ff36 	bl	101e95c <_strtol_l.isra.0>
 101eaf0:	b002      	add	sp, #8
 101eaf2:	bd70      	pop	{r4, r5, r6, pc}
 101eaf4:	0000      	movs	r0, r0
	...

0101eaf8 <_svfprintf_r>:
 101eaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101eafc:	460c      	mov	r4, r1
 101eafe:	ed2d 8b0a 	vpush	{d8-d12}
 101eb02:	4615      	mov	r5, r2
 101eb04:	4682      	mov	sl, r0
 101eb06:	b0d5      	sub	sp, #340	; 0x154
 101eb08:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 101eb0c:	9108      	str	r1, [sp, #32]
 101eb0e:	9309      	str	r3, [sp, #36]	; 0x24
 101eb10:	f005 fb04 	bl	102411c <_localeconv_r>
 101eb14:	6803      	ldr	r3, [r0, #0]
 101eb16:	4618      	mov	r0, r3
 101eb18:	9317      	str	r3, [sp, #92]	; 0x5c
 101eb1a:	f7ff fdf1 	bl	101e700 <strlen>
 101eb1e:	2208      	movs	r2, #8
 101eb20:	2100      	movs	r1, #0
 101eb22:	9016      	str	r0, [sp, #88]	; 0x58
 101eb24:	4658      	mov	r0, fp
 101eb26:	f7fe fec3 	bl	101d8b0 <memset>
 101eb2a:	89a3      	ldrh	r3, [r4, #12]
 101eb2c:	061a      	lsls	r2, r3, #24
 101eb2e:	d503      	bpl.n	101eb38 <_svfprintf_r+0x40>
 101eb30:	6923      	ldr	r3, [r4, #16]
 101eb32:	2b00      	cmp	r3, #0
 101eb34:	f000 87d7 	beq.w	101fae6 <_svfprintf_r+0xfee>
 101eb38:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 101eb3c:	f24c 68b8 	movw	r8, #50872	; 0xc6b8
 101eb40:	ed9f 8b75 	vldr	d8, [pc, #468]	; 101ed18 <_svfprintf_r+0x220>
 101eb44:	f2c0 1806 	movt	r8, #262	; 0x106
 101eb48:	462f      	mov	r7, r5
 101eb4a:	2300      	movs	r3, #0
 101eb4c:	f64c 21e8 	movw	r1, #51944	; 0xcae8
 101eb50:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101eb54:	f2c0 1106 	movt	r1, #262	; 0x106
 101eb58:	9312      	str	r3, [sp, #72]	; 0x48
 101eb5a:	910f      	str	r1, [sp, #60]	; 0x3c
 101eb5c:	9315      	str	r3, [sp, #84]	; 0x54
 101eb5e:	9318      	str	r3, [sp, #96]	; 0x60
 101eb60:	9314      	str	r3, [sp, #80]	; 0x50
 101eb62:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 101eb66:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 101eb6a:	9305      	str	r3, [sp, #20]
 101eb6c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 101eb70:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 101eb74:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 101eb78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 101eb7a:	463c      	mov	r4, r7
 101eb7c:	f8d8 3000 	ldr.w	r3, [r8]
 101eb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101eb82:	2b00      	cmp	r3, #0
 101eb84:	bf08      	it	eq
 101eb86:	4633      	moveq	r3, r6
 101eb88:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 101eb8c:	f7fd fd62 	bl	101c654 <__locale_mb_cur_max>
 101eb90:	f8cd b000 	str.w	fp, [sp]
 101eb94:	4622      	mov	r2, r4
 101eb96:	a920      	add	r1, sp, #128	; 0x80
 101eb98:	4603      	mov	r3, r0
 101eb9a:	4650      	mov	r0, sl
 101eb9c:	47a8      	blx	r5
 101eb9e:	2800      	cmp	r0, #0
 101eba0:	4603      	mov	r3, r0
 101eba2:	f000 8083 	beq.w	101ecac <_svfprintf_r+0x1b4>
 101eba6:	db79      	blt.n	101ec9c <_svfprintf_r+0x1a4>
 101eba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101ebaa:	2a25      	cmp	r2, #37	; 0x25
 101ebac:	d001      	beq.n	101ebb2 <_svfprintf_r+0xba>
 101ebae:	441c      	add	r4, r3
 101ebb0:	e7e4      	b.n	101eb7c <_svfprintf_r+0x84>
 101ebb2:	1be6      	subs	r6, r4, r7
 101ebb4:	4605      	mov	r5, r0
 101ebb6:	d17c      	bne.n	101ecb2 <_svfprintf_r+0x1ba>
 101ebb8:	2300      	movs	r3, #0
 101ebba:	1c67      	adds	r7, r4, #1
 101ebbc:	461e      	mov	r6, r3
 101ebbe:	9306      	str	r3, [sp, #24]
 101ebc0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101ebc4:	f04f 32ff 	mov.w	r2, #4294967295
 101ebc8:	7863      	ldrb	r3, [r4, #1]
 101ebca:	240a      	movs	r4, #10
 101ebcc:	9204      	str	r2, [sp, #16]
 101ebce:	3701      	adds	r7, #1
 101ebd0:	f1a3 0220 	sub.w	r2, r3, #32
 101ebd4:	2a5a      	cmp	r2, #90	; 0x5a
 101ebd6:	f200 83b7 	bhi.w	101f348 <_svfprintf_r+0x850>
 101ebda:	e8df f012 	tbh	[pc, r2, lsl #1]
 101ebde:	01f3      	.short	0x01f3
 101ebe0:	03b503b5 	.word	0x03b503b5
 101ebe4:	03b501ef 	.word	0x03b501ef
 101ebe8:	03b503b5 	.word	0x03b503b5
 101ebec:	03b501d2 	.word	0x03b501d2
 101ebf0:	01c403b5 	.word	0x01c403b5
 101ebf4:	03b5037a 	.word	0x03b5037a
 101ebf8:	020f0229 	.word	0x020f0229
 101ebfc:	020b03b5 	.word	0x020b03b5
 101ec00:	01a201a2 	.word	0x01a201a2
 101ec04:	01a201a2 	.word	0x01a201a2
 101ec08:	01a201a2 	.word	0x01a201a2
 101ec0c:	01a201a2 	.word	0x01a201a2
 101ec10:	03b501a2 	.word	0x03b501a2
 101ec14:	03b503b5 	.word	0x03b503b5
 101ec18:	03b503b5 	.word	0x03b503b5
 101ec1c:	03b503b5 	.word	0x03b503b5
 101ec20:	03b5037f 	.word	0x03b5037f
 101ec24:	03100350 	.word	0x03100350
 101ec28:	037f037f 	.word	0x037f037f
 101ec2c:	03b5037f 	.word	0x03b5037f
 101ec30:	03b503b5 	.word	0x03b503b5
 101ec34:	02e603b5 	.word	0x02e603b5
 101ec38:	03b503b5 	.word	0x03b503b5
 101ec3c:	03b502da 	.word	0x03b502da
 101ec40:	03b503b5 	.word	0x03b503b5
 101ec44:	03b502aa 	.word	0x03b502aa
 101ec48:	03b5029b 	.word	0x03b5029b
 101ec4c:	026d03b5 	.word	0x026d03b5
 101ec50:	03b503b5 	.word	0x03b503b5
 101ec54:	03b503b5 	.word	0x03b503b5
 101ec58:	03b503b5 	.word	0x03b503b5
 101ec5c:	03b503b5 	.word	0x03b503b5
 101ec60:	03b5037f 	.word	0x03b5037f
 101ec64:	02410350 	.word	0x02410350
 101ec68:	037f037f 	.word	0x037f037f
 101ec6c:	0237037f 	.word	0x0237037f
 101ec70:	005b0241 	.word	0x005b0241
 101ec74:	022d03b5 	.word	0x022d03b5
 101ec78:	02fb03b5 	.word	0x02fb03b5
 101ec7c:	01af02ea 	.word	0x01af02ea
 101ec80:	03b5005b 	.word	0x03b5005b
 101ec84:	005d02aa 	.word	0x005d02aa
 101ec88:	03b501fd 	.word	0x03b501fd
 101ec8c:	00a103b5 	.word	0x00a103b5
 101ec90:	005d03b5 	.word	0x005d03b5
 101ec94:	f046 0620 	orr.w	r6, r6, #32
 101ec98:	783b      	ldrb	r3, [r7, #0]
 101ec9a:	e798      	b.n	101ebce <_svfprintf_r+0xd6>
 101ec9c:	2208      	movs	r2, #8
 101ec9e:	2100      	movs	r1, #0
 101eca0:	4658      	mov	r0, fp
 101eca2:	f7fe fe05 	bl	101d8b0 <memset>
 101eca6:	2301      	movs	r3, #1
 101eca8:	441c      	add	r4, r3
 101ecaa:	e767      	b.n	101eb7c <_svfprintf_r+0x84>
 101ecac:	1be6      	subs	r6, r4, r7
 101ecae:	4605      	mov	r5, r0
 101ecb0:	d012      	beq.n	101ecd8 <_svfprintf_r+0x1e0>
 101ecb2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101ecb6:	e9c9 7600 	strd	r7, r6, [r9]
 101ecba:	3301      	adds	r3, #1
 101ecbc:	4432      	add	r2, r6
 101ecbe:	2b07      	cmp	r3, #7
 101ecc0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101ecc4:	bfd8      	it	le
 101ecc6:	f109 0908 	addle.w	r9, r9, #8
 101ecca:	dc19      	bgt.n	101ed00 <_svfprintf_r+0x208>
 101eccc:	9b05      	ldr	r3, [sp, #20]
 101ecce:	4433      	add	r3, r6
 101ecd0:	9305      	str	r3, [sp, #20]
 101ecd2:	2d00      	cmp	r5, #0
 101ecd4:	f47f af70 	bne.w	101ebb8 <_svfprintf_r+0xc0>
 101ecd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 101ecda:	2b00      	cmp	r3, #0
 101ecdc:	f041 826d 	bne.w	10201ba <_svfprintf_r+0x16c2>
 101ece0:	9b08      	ldr	r3, [sp, #32]
 101ece2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 101ece6:	f013 0f40 	tst.w	r3, #64	; 0x40
 101ecea:	9b05      	ldr	r3, [sp, #20]
 101ecec:	bf18      	it	ne
 101ecee:	f04f 33ff 	movne.w	r3, #4294967295
 101ecf2:	9305      	str	r3, [sp, #20]
 101ecf4:	9805      	ldr	r0, [sp, #20]
 101ecf6:	b055      	add	sp, #340	; 0x154
 101ecf8:	ecbd 8b0a 	vpop	{d8-d12}
 101ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101ed00:	aa28      	add	r2, sp, #160	; 0xa0
 101ed02:	9908      	ldr	r1, [sp, #32]
 101ed04:	4650      	mov	r0, sl
 101ed06:	f006 fab7 	bl	1025278 <__ssprint_r>
 101ed0a:	2800      	cmp	r0, #0
 101ed0c:	d1e8      	bne.n	101ece0 <_svfprintf_r+0x1e8>
 101ed0e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ed12:	e7db      	b.n	101eccc <_svfprintf_r+0x1d4>
 101ed14:	f3af 8000 	nop.w
	...
 101ed20:	06b0      	lsls	r0, r6, #26
 101ed22:	930e      	str	r3, [sp, #56]	; 0x38
 101ed24:	f24c 1378 	movw	r3, #49528	; 0xc178
 101ed28:	f2c0 1306 	movt	r3, #262	; 0x106
 101ed2c:	9315      	str	r3, [sp, #84]	; 0x54
 101ed2e:	f140 81cc 	bpl.w	101f0ca <_svfprintf_r+0x5d2>
 101ed32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101ed34:	3507      	adds	r5, #7
 101ed36:	f025 0307 	bic.w	r3, r5, #7
 101ed3a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 101ed3e:	9309      	str	r3, [sp, #36]	; 0x24
 101ed40:	ea54 0305 	orrs.w	r3, r4, r5
 101ed44:	f006 0301 	and.w	r3, r6, #1
 101ed48:	bf08      	it	eq
 101ed4a:	2300      	moveq	r3, #0
 101ed4c:	2b00      	cmp	r3, #0
 101ed4e:	f040 81d8 	bne.w	101f102 <_svfprintf_r+0x60a>
 101ed52:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 101ed56:	9303      	str	r3, [sp, #12]
 101ed58:	2302      	movs	r3, #2
 101ed5a:	9904      	ldr	r1, [sp, #16]
 101ed5c:	2200      	movs	r2, #0
 101ed5e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 101ed62:	1c4a      	adds	r2, r1, #1
 101ed64:	f000 826c 	beq.w	101f240 <_svfprintf_r+0x748>
 101ed68:	ea54 0205 	orrs.w	r2, r4, r5
 101ed6c:	9a03      	ldr	r2, [sp, #12]
 101ed6e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 101ed72:	bf14      	ite	ne
 101ed74:	2201      	movne	r2, #1
 101ed76:	2200      	moveq	r2, #0
 101ed78:	2900      	cmp	r1, #0
 101ed7a:	bf18      	it	ne
 101ed7c:	2201      	movne	r2, #1
 101ed7e:	2a00      	cmp	r2, #0
 101ed80:	f040 873e 	bne.w	101fc00 <_svfprintf_r+0x1108>
 101ed84:	2b00      	cmp	r3, #0
 101ed86:	f040 84da 	bne.w	101f73e <_svfprintf_r+0xc46>
 101ed8a:	9a03      	ldr	r2, [sp, #12]
 101ed8c:	9304      	str	r3, [sp, #16]
 101ed8e:	f012 0201 	ands.w	r2, r2, #1
 101ed92:	9207      	str	r2, [sp, #28]
 101ed94:	bf04      	itt	eq
 101ed96:	ab54      	addeq	r3, sp, #336	; 0x150
 101ed98:	930b      	streq	r3, [sp, #44]	; 0x2c
 101ed9a:	d005      	beq.n	101eda8 <_svfprintf_r+0x2b0>
 101ed9c:	2330      	movs	r3, #48	; 0x30
 101ed9e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 101eda2:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 101eda6:	930b      	str	r3, [sp, #44]	; 0x2c
 101eda8:	2300      	movs	r3, #0
 101edaa:	9a04      	ldr	r2, [sp, #16]
 101edac:	930a      	str	r3, [sp, #40]	; 0x28
 101edae:	9313      	str	r3, [sp, #76]	; 0x4c
 101edb0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101edb4:	9b07      	ldr	r3, [sp, #28]
 101edb6:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101edba:	4293      	cmp	r3, r2
 101edbc:	bfb8      	it	lt
 101edbe:	4613      	movlt	r3, r2
 101edc0:	9303      	str	r3, [sp, #12]
 101edc2:	b111      	cbz	r1, 101edca <_svfprintf_r+0x2d2>
 101edc4:	9b03      	ldr	r3, [sp, #12]
 101edc6:	3301      	adds	r3, #1
 101edc8:	9303      	str	r3, [sp, #12]
 101edca:	f016 0302 	ands.w	r3, r6, #2
 101edce:	930c      	str	r3, [sp, #48]	; 0x30
 101edd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101edd2:	bf1e      	ittt	ne
 101edd4:	9b03      	ldrne	r3, [sp, #12]
 101edd6:	3302      	addne	r3, #2
 101edd8:	9303      	strne	r3, [sp, #12]
 101edda:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 101edde:	930d      	str	r3, [sp, #52]	; 0x34
 101ede0:	d104      	bne.n	101edec <_svfprintf_r+0x2f4>
 101ede2:	9b06      	ldr	r3, [sp, #24]
 101ede4:	9803      	ldr	r0, [sp, #12]
 101ede6:	1a1c      	subs	r4, r3, r0
 101ede8:	2c00      	cmp	r4, #0
 101edea:	dc60      	bgt.n	101eeae <_svfprintf_r+0x3b6>
 101edec:	b189      	cbz	r1, 101ee12 <_svfprintf_r+0x31a>
 101edee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101edf0:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 101edf4:	3201      	adds	r2, #1
 101edf6:	f8c9 0000 	str.w	r0, [r9]
 101edfa:	3101      	adds	r1, #1
 101edfc:	2001      	movs	r0, #1
 101edfe:	2907      	cmp	r1, #7
 101ee00:	f8c9 0004 	str.w	r0, [r9, #4]
 101ee04:	922a      	str	r2, [sp, #168]	; 0xa8
 101ee06:	bfd8      	it	le
 101ee08:	f109 0908 	addle.w	r9, r9, #8
 101ee0c:	9129      	str	r1, [sp, #164]	; 0xa4
 101ee0e:	f300 843e 	bgt.w	101f68e <_svfprintf_r+0xb96>
 101ee12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 101ee14:	b183      	cbz	r3, 101ee38 <_svfprintf_r+0x340>
 101ee16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101ee18:	a91e      	add	r1, sp, #120	; 0x78
 101ee1a:	3202      	adds	r2, #2
 101ee1c:	f8c9 1000 	str.w	r1, [r9]
 101ee20:	3301      	adds	r3, #1
 101ee22:	2102      	movs	r1, #2
 101ee24:	2b07      	cmp	r3, #7
 101ee26:	f8c9 1004 	str.w	r1, [r9, #4]
 101ee2a:	922a      	str	r2, [sp, #168]	; 0xa8
 101ee2c:	bfd8      	it	le
 101ee2e:	f109 0908 	addle.w	r9, r9, #8
 101ee32:	9329      	str	r3, [sp, #164]	; 0xa4
 101ee34:	f300 8437 	bgt.w	101f6a6 <_svfprintf_r+0xbae>
 101ee38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 101ee3a:	2b80      	cmp	r3, #128	; 0x80
 101ee3c:	f000 8309 	beq.w	101f452 <_svfprintf_r+0x95a>
 101ee40:	9b04      	ldr	r3, [sp, #16]
 101ee42:	9907      	ldr	r1, [sp, #28]
 101ee44:	1a5c      	subs	r4, r3, r1
 101ee46:	2c00      	cmp	r4, #0
 101ee48:	f300 8350 	bgt.w	101f4ec <_svfprintf_r+0x9f4>
 101ee4c:	05f5      	lsls	r5, r6, #23
 101ee4e:	f100 82a1 	bmi.w	101f394 <_svfprintf_r+0x89c>
 101ee52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101ee54:	9907      	ldr	r1, [sp, #28]
 101ee56:	3301      	adds	r3, #1
 101ee58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101ee5a:	2b07      	cmp	r3, #7
 101ee5c:	440a      	add	r2, r1
 101ee5e:	f8c9 1004 	str.w	r1, [r9, #4]
 101ee62:	f8c9 0000 	str.w	r0, [r9]
 101ee66:	922a      	str	r2, [sp, #168]	; 0xa8
 101ee68:	9329      	str	r3, [sp, #164]	; 0xa4
 101ee6a:	f300 8404 	bgt.w	101f676 <_svfprintf_r+0xb7e>
 101ee6e:	f109 0908 	add.w	r9, r9, #8
 101ee72:	0771      	lsls	r1, r6, #29
 101ee74:	d505      	bpl.n	101ee82 <_svfprintf_r+0x38a>
 101ee76:	9b06      	ldr	r3, [sp, #24]
 101ee78:	9903      	ldr	r1, [sp, #12]
 101ee7a:	1a5c      	subs	r4, r3, r1
 101ee7c:	2c00      	cmp	r4, #0
 101ee7e:	f300 841e 	bgt.w	101f6be <_svfprintf_r+0xbc6>
 101ee82:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 101ee86:	9803      	ldr	r0, [sp, #12]
 101ee88:	4281      	cmp	r1, r0
 101ee8a:	bfac      	ite	ge
 101ee8c:	185b      	addge	r3, r3, r1
 101ee8e:	181b      	addlt	r3, r3, r0
 101ee90:	9305      	str	r3, [sp, #20]
 101ee92:	2a00      	cmp	r2, #0
 101ee94:	f040 838b 	bne.w	101f5ae <_svfprintf_r+0xab6>
 101ee98:	2300      	movs	r3, #0
 101ee9a:	9329      	str	r3, [sp, #164]	; 0xa4
 101ee9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101ee9e:	b11b      	cbz	r3, 101eea8 <_svfprintf_r+0x3b0>
 101eea0:	990a      	ldr	r1, [sp, #40]	; 0x28
 101eea2:	4650      	mov	r0, sl
 101eea4:	f004 fe12 	bl	1023acc <_free_r>
 101eea8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101eeac:	e664      	b.n	101eb78 <_svfprintf_r+0x80>
 101eeae:	2c10      	cmp	r4, #16
 101eeb0:	f647 6540 	movw	r5, #32320	; 0x7e40
 101eeb4:	bfc8      	it	gt
 101eeb6:	961b      	strgt	r6, [sp, #108]	; 0x6c
 101eeb8:	f2c0 1506 	movt	r5, #262	; 0x106
 101eebc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101eebe:	bfc4      	itt	gt
 101eec0:	2310      	movgt	r3, #16
 101eec2:	9e08      	ldrgt	r6, [sp, #32]
 101eec4:	dc03      	bgt.n	101eece <_svfprintf_r+0x3d6>
 101eec6:	e01e      	b.n	101ef06 <_svfprintf_r+0x40e>
 101eec8:	3c10      	subs	r4, #16
 101eeca:	2c10      	cmp	r4, #16
 101eecc:	dd1a      	ble.n	101ef04 <_svfprintf_r+0x40c>
 101eece:	3101      	adds	r1, #1
 101eed0:	3210      	adds	r2, #16
 101eed2:	2907      	cmp	r1, #7
 101eed4:	e9c9 5300 	strd	r5, r3, [r9]
 101eed8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101eedc:	f109 0908 	add.w	r9, r9, #8
 101eee0:	ddf2      	ble.n	101eec8 <_svfprintf_r+0x3d0>
 101eee2:	aa28      	add	r2, sp, #160	; 0xa0
 101eee4:	4631      	mov	r1, r6
 101eee6:	4650      	mov	r0, sl
 101eee8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101eeec:	f006 f9c4 	bl	1025278 <__ssprint_r>
 101eef0:	2800      	cmp	r0, #0
 101eef2:	f040 8364 	bne.w	101f5be <_svfprintf_r+0xac6>
 101eef6:	3c10      	subs	r4, #16
 101eef8:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101eefc:	2c10      	cmp	r4, #16
 101eefe:	f04f 0310 	mov.w	r3, #16
 101ef02:	dce4      	bgt.n	101eece <_svfprintf_r+0x3d6>
 101ef04:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 101ef06:	3101      	adds	r1, #1
 101ef08:	4422      	add	r2, r4
 101ef0a:	2907      	cmp	r1, #7
 101ef0c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101ef10:	e9c9 5400 	strd	r5, r4, [r9]
 101ef14:	f300 86f5 	bgt.w	101fd02 <_svfprintf_r+0x120a>
 101ef18:	f109 0908 	add.w	r9, r9, #8
 101ef1c:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101ef20:	e764      	b.n	101edec <_svfprintf_r+0x2f4>
 101ef22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101ef26:	2100      	movs	r1, #0
 101ef28:	f817 3b01 	ldrb.w	r3, [r7], #1
 101ef2c:	fb04 2101 	mla	r1, r4, r1, r2
 101ef30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101ef34:	2a09      	cmp	r2, #9
 101ef36:	d9f7      	bls.n	101ef28 <_svfprintf_r+0x430>
 101ef38:	9106      	str	r1, [sp, #24]
 101ef3a:	e649      	b.n	101ebd0 <_svfprintf_r+0xd8>
 101ef3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101ef3e:	f046 0202 	orr.w	r2, r6, #2
 101ef42:	f24c 1178 	movw	r1, #49528	; 0xc178
 101ef46:	9203      	str	r2, [sp, #12]
 101ef48:	f2c0 1106 	movt	r1, #262	; 0x106
 101ef4c:	f647 0230 	movw	r2, #30768	; 0x7830
 101ef50:	f853 4b04 	ldr.w	r4, [r3], #4
 101ef54:	2500      	movs	r5, #0
 101ef56:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 101ef5a:	2278      	movs	r2, #120	; 0x78
 101ef5c:	9115      	str	r1, [sp, #84]	; 0x54
 101ef5e:	9309      	str	r3, [sp, #36]	; 0x24
 101ef60:	2302      	movs	r3, #2
 101ef62:	920e      	str	r2, [sp, #56]	; 0x38
 101ef64:	e6f9      	b.n	101ed5a <_svfprintf_r+0x262>
 101ef66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101ef68:	783b      	ldrb	r3, [r7, #0]
 101ef6a:	f852 1b04 	ldr.w	r1, [r2], #4
 101ef6e:	2900      	cmp	r1, #0
 101ef70:	9106      	str	r1, [sp, #24]
 101ef72:	bfa8      	it	ge
 101ef74:	9209      	strge	r2, [sp, #36]	; 0x24
 101ef76:	f6bf ae2a 	bge.w	101ebce <_svfprintf_r+0xd6>
 101ef7a:	4249      	negs	r1, r1
 101ef7c:	9209      	str	r2, [sp, #36]	; 0x24
 101ef7e:	9106      	str	r1, [sp, #24]
 101ef80:	e057      	b.n	101f032 <_svfprintf_r+0x53a>
 101ef82:	4650      	mov	r0, sl
 101ef84:	f005 f8ca 	bl	102411c <_localeconv_r>
 101ef88:	6843      	ldr	r3, [r0, #4]
 101ef8a:	4618      	mov	r0, r3
 101ef8c:	931a      	str	r3, [sp, #104]	; 0x68
 101ef8e:	f7ff fbb7 	bl	101e700 <strlen>
 101ef92:	4605      	mov	r5, r0
 101ef94:	9019      	str	r0, [sp, #100]	; 0x64
 101ef96:	4650      	mov	r0, sl
 101ef98:	f005 f8c0 	bl	102411c <_localeconv_r>
 101ef9c:	6883      	ldr	r3, [r0, #8]
 101ef9e:	2d00      	cmp	r5, #0
 101efa0:	bf18      	it	ne
 101efa2:	2b00      	cmpne	r3, #0
 101efa4:	9314      	str	r3, [sp, #80]	; 0x50
 101efa6:	f43f ae77 	beq.w	101ec98 <_svfprintf_r+0x1a0>
 101efaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101efac:	781a      	ldrb	r2, [r3, #0]
 101efae:	783b      	ldrb	r3, [r7, #0]
 101efb0:	2a00      	cmp	r2, #0
 101efb2:	f43f ae0c 	beq.w	101ebce <_svfprintf_r+0xd6>
 101efb6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 101efba:	e608      	b.n	101ebce <_svfprintf_r+0xd6>
 101efbc:	f046 0601 	orr.w	r6, r6, #1
 101efc0:	783b      	ldrb	r3, [r7, #0]
 101efc2:	e604      	b.n	101ebce <_svfprintf_r+0xd6>
 101efc4:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 101efc8:	783b      	ldrb	r3, [r7, #0]
 101efca:	2a00      	cmp	r2, #0
 101efcc:	f47f adff 	bne.w	101ebce <_svfprintf_r+0xd6>
 101efd0:	2220      	movs	r2, #32
 101efd2:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 101efd6:	e5fa      	b.n	101ebce <_svfprintf_r+0xd6>
 101efd8:	06b0      	lsls	r0, r6, #26
 101efda:	930e      	str	r3, [sp, #56]	; 0x38
 101efdc:	f140 8531 	bpl.w	101fa42 <_svfprintf_r+0xf4a>
 101efe0:	9603      	str	r6, [sp, #12]
 101efe2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101efe4:	2301      	movs	r3, #1
 101efe6:	3507      	adds	r5, #7
 101efe8:	f025 0207 	bic.w	r2, r5, #7
 101efec:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101eff0:	9209      	str	r2, [sp, #36]	; 0x24
 101eff2:	e6b2      	b.n	101ed5a <_svfprintf_r+0x262>
 101eff4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 101eff8:	783b      	ldrb	r3, [r7, #0]
 101effa:	e5e8      	b.n	101ebce <_svfprintf_r+0xd6>
 101effc:	4639      	mov	r1, r7
 101effe:	f811 3b01 	ldrb.w	r3, [r1], #1
 101f002:	2b2a      	cmp	r3, #42	; 0x2a
 101f004:	f001 82e5 	beq.w	10205d2 <_svfprintf_r+0x1ada>
 101f008:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101f00c:	460f      	mov	r7, r1
 101f00e:	2a09      	cmp	r2, #9
 101f010:	bf84      	itt	hi
 101f012:	2200      	movhi	r2, #0
 101f014:	9204      	strhi	r2, [sp, #16]
 101f016:	f63f addb 	bhi.w	101ebd0 <_svfprintf_r+0xd8>
 101f01a:	2100      	movs	r1, #0
 101f01c:	f817 3b01 	ldrb.w	r3, [r7], #1
 101f020:	fb04 2101 	mla	r1, r4, r1, r2
 101f024:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101f028:	2a09      	cmp	r2, #9
 101f02a:	d9f7      	bls.n	101f01c <_svfprintf_r+0x524>
 101f02c:	9104      	str	r1, [sp, #16]
 101f02e:	e5cf      	b.n	101ebd0 <_svfprintf_r+0xd8>
 101f030:	783b      	ldrb	r3, [r7, #0]
 101f032:	f046 0604 	orr.w	r6, r6, #4
 101f036:	e5ca      	b.n	101ebce <_svfprintf_r+0xd6>
 101f038:	783b      	ldrb	r3, [r7, #0]
 101f03a:	2b6c      	cmp	r3, #108	; 0x6c
 101f03c:	bf09      	itett	eq
 101f03e:	f046 0620 	orreq.w	r6, r6, #32
 101f042:	f046 0610 	orrne.w	r6, r6, #16
 101f046:	787b      	ldrbeq	r3, [r7, #1]
 101f048:	3701      	addeq	r7, #1
 101f04a:	e5c0      	b.n	101ebce <_svfprintf_r+0xd6>
 101f04c:	783b      	ldrb	r3, [r7, #0]
 101f04e:	2b68      	cmp	r3, #104	; 0x68
 101f050:	bf09      	itett	eq
 101f052:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 101f056:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 101f05a:	787b      	ldrbeq	r3, [r7, #1]
 101f05c:	3701      	addeq	r7, #1
 101f05e:	e5b6      	b.n	101ebce <_svfprintf_r+0xd6>
 101f060:	06b5      	lsls	r5, r6, #26
 101f062:	930e      	str	r3, [sp, #56]	; 0x38
 101f064:	f140 84d5 	bpl.w	101fa12 <_svfprintf_r+0xf1a>
 101f068:	9603      	str	r6, [sp, #12]
 101f06a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f06c:	3507      	adds	r5, #7
 101f06e:	f025 0307 	bic.w	r3, r5, #7
 101f072:	4619      	mov	r1, r3
 101f074:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 101f078:	4614      	mov	r4, r2
 101f07a:	461d      	mov	r5, r3
 101f07c:	9109      	str	r1, [sp, #36]	; 0x24
 101f07e:	2a00      	cmp	r2, #0
 101f080:	f173 0300 	sbcs.w	r3, r3, #0
 101f084:	f2c0 80cf 	blt.w	101f226 <_svfprintf_r+0x72e>
 101f088:	9b04      	ldr	r3, [sp, #16]
 101f08a:	3301      	adds	r3, #1
 101f08c:	f000 8173 	beq.w	101f376 <_svfprintf_r+0x87e>
 101f090:	ea54 0305 	orrs.w	r3, r4, r5
 101f094:	9a04      	ldr	r2, [sp, #16]
 101f096:	9b03      	ldr	r3, [sp, #12]
 101f098:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 101f09c:	bf14      	ite	ne
 101f09e:	2301      	movne	r3, #1
 101f0a0:	2300      	moveq	r3, #0
 101f0a2:	2a00      	cmp	r2, #0
 101f0a4:	bf18      	it	ne
 101f0a6:	2301      	movne	r3, #1
 101f0a8:	2b00      	cmp	r3, #0
 101f0aa:	f040 8163 	bne.w	101f374 <_svfprintf_r+0x87c>
 101f0ae:	aa54      	add	r2, sp, #336	; 0x150
 101f0b0:	9304      	str	r3, [sp, #16]
 101f0b2:	920b      	str	r2, [sp, #44]	; 0x2c
 101f0b4:	9307      	str	r3, [sp, #28]
 101f0b6:	e677      	b.n	101eda8 <_svfprintf_r+0x2b0>
 101f0b8:	06b0      	lsls	r0, r6, #26
 101f0ba:	930e      	str	r3, [sp, #56]	; 0x38
 101f0bc:	f64b 63d4 	movw	r3, #48852	; 0xbed4
 101f0c0:	f2c0 1306 	movt	r3, #262	; 0x106
 101f0c4:	9315      	str	r3, [sp, #84]	; 0x54
 101f0c6:	f53f ae34 	bmi.w	101ed32 <_svfprintf_r+0x23a>
 101f0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f0cc:	06f1      	lsls	r1, r6, #27
 101f0ce:	f853 4b04 	ldr.w	r4, [r3], #4
 101f0d2:	9309      	str	r3, [sp, #36]	; 0x24
 101f0d4:	d40b      	bmi.n	101f0ee <_svfprintf_r+0x5f6>
 101f0d6:	0672      	lsls	r2, r6, #25
 101f0d8:	bf44      	itt	mi
 101f0da:	b2a4      	uxthmi	r4, r4
 101f0dc:	2500      	movmi	r5, #0
 101f0de:	f53f ae2f 	bmi.w	101ed40 <_svfprintf_r+0x248>
 101f0e2:	05b3      	lsls	r3, r6, #22
 101f0e4:	bf44      	itt	mi
 101f0e6:	b2e4      	uxtbmi	r4, r4
 101f0e8:	2500      	movmi	r5, #0
 101f0ea:	f53f ae29 	bmi.w	101ed40 <_svfprintf_r+0x248>
 101f0ee:	2500      	movs	r5, #0
 101f0f0:	ea54 0305 	orrs.w	r3, r4, r5
 101f0f4:	f006 0301 	and.w	r3, r6, #1
 101f0f8:	bf08      	it	eq
 101f0fa:	2300      	moveq	r3, #0
 101f0fc:	2b00      	cmp	r3, #0
 101f0fe:	f43f ae28 	beq.w	101ed52 <_svfprintf_r+0x25a>
 101f102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f104:	f046 0602 	orr.w	r6, r6, #2
 101f108:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 101f10c:	2330      	movs	r3, #48	; 0x30
 101f10e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 101f112:	e61e      	b.n	101ed52 <_svfprintf_r+0x25a>
 101f114:	06b4      	lsls	r4, r6, #26
 101f116:	930e      	str	r3, [sp, #56]	; 0x38
 101f118:	f046 0310 	orr.w	r3, r6, #16
 101f11c:	9303      	str	r3, [sp, #12]
 101f11e:	f53f af60 	bmi.w	101efe2 <_svfprintf_r+0x4ea>
 101f122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f124:	1d1a      	adds	r2, r3, #4
 101f126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f128:	2500      	movs	r5, #0
 101f12a:	9209      	str	r2, [sp, #36]	; 0x24
 101f12c:	681c      	ldr	r4, [r3, #0]
 101f12e:	2301      	movs	r3, #1
 101f130:	e613      	b.n	101ed5a <_svfprintf_r+0x262>
 101f132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f134:	930e      	str	r3, [sp, #56]	; 0x38
 101f136:	2300      	movs	r3, #0
 101f138:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f13c:	f855 2b04 	ldr.w	r2, [r5], #4
 101f140:	920b      	str	r2, [sp, #44]	; 0x2c
 101f142:	2a00      	cmp	r2, #0
 101f144:	f000 84bb 	beq.w	101fabe <_svfprintf_r+0xfc6>
 101f148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f14a:	2b53      	cmp	r3, #83	; 0x53
 101f14c:	f000 8600 	beq.w	101fd50 <_svfprintf_r+0x1258>
 101f150:	f016 0310 	ands.w	r3, r6, #16
 101f154:	9310      	str	r3, [sp, #64]	; 0x40
 101f156:	f040 85fb 	bne.w	101fd50 <_svfprintf_r+0x1258>
 101f15a:	9a04      	ldr	r2, [sp, #16]
 101f15c:	1c53      	adds	r3, r2, #1
 101f15e:	f001 801b 	beq.w	1020198 <_svfprintf_r+0x16a0>
 101f162:	9910      	ldr	r1, [sp, #64]	; 0x40
 101f164:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101f166:	f005 f923 	bl	10243b0 <memchr>
 101f16a:	900a      	str	r0, [sp, #40]	; 0x28
 101f16c:	2800      	cmp	r0, #0
 101f16e:	f001 81dc 	beq.w	102052a <_svfprintf_r+0x1a32>
 101f172:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 101f176:	9509      	str	r5, [sp, #36]	; 0x24
 101f178:	1a9a      	subs	r2, r3, r2
 101f17a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101f17c:	9207      	str	r2, [sp, #28]
 101f17e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101f182:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 101f186:	9304      	str	r3, [sp, #16]
 101f188:	9313      	str	r3, [sp, #76]	; 0x4c
 101f18a:	9203      	str	r2, [sp, #12]
 101f18c:	9311      	str	r3, [sp, #68]	; 0x44
 101f18e:	930a      	str	r3, [sp, #40]	; 0x28
 101f190:	e617      	b.n	101edc2 <_svfprintf_r+0x2ca>
 101f192:	06b4      	lsls	r4, r6, #26
 101f194:	930e      	str	r3, [sp, #56]	; 0x38
 101f196:	f046 0310 	orr.w	r3, r6, #16
 101f19a:	d40f      	bmi.n	101f1bc <_svfprintf_r+0x6c4>
 101f19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f19e:	3204      	adds	r2, #4
 101f1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 101f1a2:	2500      	movs	r5, #0
 101f1a4:	9209      	str	r2, [sp, #36]	; 0x24
 101f1a6:	680c      	ldr	r4, [r1, #0]
 101f1a8:	e00f      	b.n	101f1ca <_svfprintf_r+0x6d2>
 101f1aa:	f046 0608 	orr.w	r6, r6, #8
 101f1ae:	783b      	ldrb	r3, [r7, #0]
 101f1b0:	e50d      	b.n	101ebce <_svfprintf_r+0xd6>
 101f1b2:	06b0      	lsls	r0, r6, #26
 101f1b4:	930e      	str	r3, [sp, #56]	; 0x38
 101f1b6:	f140 845e 	bpl.w	101fa76 <_svfprintf_r+0xf7e>
 101f1ba:	4633      	mov	r3, r6
 101f1bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f1be:	3507      	adds	r5, #7
 101f1c0:	f025 0207 	bic.w	r2, r5, #7
 101f1c4:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101f1c8:	9209      	str	r2, [sp, #36]	; 0x24
 101f1ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 101f1ce:	9303      	str	r3, [sp, #12]
 101f1d0:	2300      	movs	r3, #0
 101f1d2:	e5c2      	b.n	101ed5a <_svfprintf_r+0x262>
 101f1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f1d6:	06b0      	lsls	r0, r6, #26
 101f1d8:	f102 0304 	add.w	r3, r2, #4
 101f1dc:	f100 8441 	bmi.w	101fa62 <_svfprintf_r+0xf6a>
 101f1e0:	06f1      	lsls	r1, r6, #27
 101f1e2:	f100 8608 	bmi.w	101fdf6 <_svfprintf_r+0x12fe>
 101f1e6:	0672      	lsls	r2, r6, #25
 101f1e8:	f100 87c4 	bmi.w	1020174 <_svfprintf_r+0x167c>
 101f1ec:	05b5      	lsls	r5, r6, #22
 101f1ee:	f140 8602 	bpl.w	101fdf6 <_svfprintf_r+0x12fe>
 101f1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f1f4:	9309      	str	r3, [sp, #36]	; 0x24
 101f1f6:	9b05      	ldr	r3, [sp, #20]
 101f1f8:	6812      	ldr	r2, [r2, #0]
 101f1fa:	7013      	strb	r3, [r2, #0]
 101f1fc:	e4bc      	b.n	101eb78 <_svfprintf_r+0x80>
 101f1fe:	930e      	str	r3, [sp, #56]	; 0x38
 101f200:	f046 0310 	orr.w	r3, r6, #16
 101f204:	06b6      	lsls	r6, r6, #26
 101f206:	9303      	str	r3, [sp, #12]
 101f208:	f53f af2f 	bmi.w	101f06a <_svfprintf_r+0x572>
 101f20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f20e:	1d1a      	adds	r2, r3, #4
 101f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f212:	9209      	str	r2, [sp, #36]	; 0x24
 101f214:	681c      	ldr	r4, [r3, #0]
 101f216:	17e5      	asrs	r5, r4, #31
 101f218:	4622      	mov	r2, r4
 101f21a:	2a00      	cmp	r2, #0
 101f21c:	462b      	mov	r3, r5
 101f21e:	f173 0300 	sbcs.w	r3, r3, #0
 101f222:	f6bf af31 	bge.w	101f088 <_svfprintf_r+0x590>
 101f226:	4264      	negs	r4, r4
 101f228:	9904      	ldr	r1, [sp, #16]
 101f22a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 101f22e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f232:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 101f236:	1c4a      	adds	r2, r1, #1
 101f238:	f04f 0301 	mov.w	r3, #1
 101f23c:	f47f ad94 	bne.w	101ed68 <_svfprintf_r+0x270>
 101f240:	2b01      	cmp	r3, #1
 101f242:	f000 8098 	beq.w	101f376 <_svfprintf_r+0x87e>
 101f246:	2b02      	cmp	r3, #2
 101f248:	bf18      	it	ne
 101f24a:	a954      	addne	r1, sp, #336	; 0x150
 101f24c:	f040 818f 	bne.w	101f56e <_svfprintf_r+0xa76>
 101f250:	ab54      	add	r3, sp, #336	; 0x150
 101f252:	9e15      	ldr	r6, [sp, #84]	; 0x54
 101f254:	461a      	mov	r2, r3
 101f256:	f004 010f 	and.w	r1, r4, #15
 101f25a:	0923      	lsrs	r3, r4, #4
 101f25c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 101f260:	0928      	lsrs	r0, r5, #4
 101f262:	5c71      	ldrb	r1, [r6, r1]
 101f264:	461c      	mov	r4, r3
 101f266:	4605      	mov	r5, r0
 101f268:	ea54 0305 	orrs.w	r3, r4, r5
 101f26c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 101f270:	d1f1      	bne.n	101f256 <_svfprintf_r+0x75e>
 101f272:	ab54      	add	r3, sp, #336	; 0x150
 101f274:	920b      	str	r2, [sp, #44]	; 0x2c
 101f276:	1a9b      	subs	r3, r3, r2
 101f278:	9e03      	ldr	r6, [sp, #12]
 101f27a:	9307      	str	r3, [sp, #28]
 101f27c:	e594      	b.n	101eda8 <_svfprintf_r+0x2b0>
 101f27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f280:	2b43      	cmp	r3, #67	; 0x43
 101f282:	930e      	str	r3, [sp, #56]	; 0x38
 101f284:	f102 0504 	add.w	r5, r2, #4
 101f288:	d002      	beq.n	101f290 <_svfprintf_r+0x798>
 101f28a:	06f3      	lsls	r3, r6, #27
 101f28c:	f140 8402 	bpl.w	101fa94 <_svfprintf_r+0xf9c>
 101f290:	2208      	movs	r2, #8
 101f292:	2100      	movs	r1, #0
 101f294:	a826      	add	r0, sp, #152	; 0x98
 101f296:	ac3b      	add	r4, sp, #236	; 0xec
 101f298:	f7fe fb0a 	bl	101d8b0 <memset>
 101f29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f29e:	ab26      	add	r3, sp, #152	; 0x98
 101f2a0:	4621      	mov	r1, r4
 101f2a2:	4650      	mov	r0, sl
 101f2a4:	6812      	ldr	r2, [r2, #0]
 101f2a6:	f003 f829 	bl	10222fc <_wcrtomb_r>
 101f2aa:	1c43      	adds	r3, r0, #1
 101f2ac:	9007      	str	r0, [sp, #28]
 101f2ae:	f001 80eb 	beq.w	1020488 <_svfprintf_r+0x1990>
 101f2b2:	9b07      	ldr	r3, [sp, #28]
 101f2b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101f2b8:	9303      	str	r3, [sp, #12]
 101f2ba:	2300      	movs	r3, #0
 101f2bc:	9509      	str	r5, [sp, #36]	; 0x24
 101f2be:	4619      	mov	r1, r3
 101f2c0:	940b      	str	r4, [sp, #44]	; 0x2c
 101f2c2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f2c6:	930a      	str	r3, [sp, #40]	; 0x28
 101f2c8:	9304      	str	r3, [sp, #16]
 101f2ca:	9313      	str	r3, [sp, #76]	; 0x4c
 101f2cc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101f2d0:	e57b      	b.n	101edca <_svfprintf_r+0x2d2>
 101f2d2:	232b      	movs	r3, #43	; 0x2b
 101f2d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f2d8:	783b      	ldrb	r3, [r7, #0]
 101f2da:	e478      	b.n	101ebce <_svfprintf_r+0xd6>
 101f2dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f2de:	930e      	str	r3, [sp, #56]	; 0x38
 101f2e0:	3507      	adds	r5, #7
 101f2e2:	ed9f 7bbd 	vldr	d7, [pc, #756]	; 101f5d8 <_svfprintf_r+0xae0>
 101f2e6:	f025 0307 	bic.w	r3, r5, #7
 101f2ea:	ecb3 8b02 	vldmia	r3!, {d8}
 101f2ee:	eeb0 6bc8 	vabs.f64	d6, d8
 101f2f2:	9309      	str	r3, [sp, #36]	; 0x24
 101f2f4:	eeb4 6b47 	vcmp.f64	d6, d7
 101f2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f2fc:	f340 8309 	ble.w	101f912 <_svfprintf_r+0xe1a>
 101f300:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 101f304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f308:	bf58      	it	pl
 101f30a:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 101f30e:	d502      	bpl.n	101f316 <_svfprintf_r+0x81e>
 101f310:	212d      	movs	r1, #45	; 0x2d
 101f312:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 101f316:	f24c 1368 	movw	r3, #49512	; 0xc168
 101f31a:	f24c 146c 	movw	r4, #49516	; 0xc16c
 101f31e:	f2c0 1306 	movt	r3, #262	; 0x106
 101f322:	f2c0 1406 	movt	r4, #262	; 0x106
 101f326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 101f328:	2200      	movs	r2, #0
 101f32a:	2003      	movs	r0, #3
 101f32c:	920a      	str	r2, [sp, #40]	; 0x28
 101f32e:	2d47      	cmp	r5, #71	; 0x47
 101f330:	bfc8      	it	gt
 101f332:	4623      	movgt	r3, r4
 101f334:	9003      	str	r0, [sp, #12]
 101f336:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 101f33a:	930b      	str	r3, [sp, #44]	; 0x2c
 101f33c:	9007      	str	r0, [sp, #28]
 101f33e:	9204      	str	r2, [sp, #16]
 101f340:	9213      	str	r2, [sp, #76]	; 0x4c
 101f342:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101f346:	e53c      	b.n	101edc2 <_svfprintf_r+0x2ca>
 101f348:	461a      	mov	r2, r3
 101f34a:	930e      	str	r3, [sp, #56]	; 0x38
 101f34c:	2b00      	cmp	r3, #0
 101f34e:	f43f acc3 	beq.w	101ecd8 <_svfprintf_r+0x1e0>
 101f352:	2300      	movs	r3, #0
 101f354:	2001      	movs	r0, #1
 101f356:	4619      	mov	r1, r3
 101f358:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f35c:	930a      	str	r3, [sp, #40]	; 0x28
 101f35e:	9304      	str	r3, [sp, #16]
 101f360:	9313      	str	r3, [sp, #76]	; 0x4c
 101f362:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101f366:	ab3b      	add	r3, sp, #236	; 0xec
 101f368:	9003      	str	r0, [sp, #12]
 101f36a:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 101f36e:	9007      	str	r0, [sp, #28]
 101f370:	930b      	str	r3, [sp, #44]	; 0x2c
 101f372:	e52a      	b.n	101edca <_svfprintf_r+0x2d2>
 101f374:	9603      	str	r6, [sp, #12]
 101f376:	2d00      	cmp	r5, #0
 101f378:	bf08      	it	eq
 101f37a:	2c0a      	cmpeq	r4, #10
 101f37c:	f080 8544 	bcs.w	101fe08 <_svfprintf_r+0x1310>
 101f380:	2301      	movs	r3, #1
 101f382:	3430      	adds	r4, #48	; 0x30
 101f384:	9307      	str	r3, [sp, #28]
 101f386:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 101f38a:	9e03      	ldr	r6, [sp, #12]
 101f38c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 101f390:	930b      	str	r3, [sp, #44]	; 0x2c
 101f392:	e509      	b.n	101eda8 <_svfprintf_r+0x2b0>
 101f394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f396:	2b65      	cmp	r3, #101	; 0x65
 101f398:	f340 8124 	ble.w	101f5e4 <_svfprintf_r+0xaec>
 101f39c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101f3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f3a4:	f040 81d1 	bne.w	101f74a <_svfprintf_r+0xc52>
 101f3a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f3aa:	3201      	adds	r2, #1
 101f3ac:	2101      	movs	r1, #1
 101f3ae:	922a      	str	r2, [sp, #168]	; 0xa8
 101f3b0:	3301      	adds	r3, #1
 101f3b2:	f649 52e0 	movw	r2, #40416	; 0x9de0
 101f3b6:	2b07      	cmp	r3, #7
 101f3b8:	f2c0 1206 	movt	r2, #262	; 0x106
 101f3bc:	9329      	str	r3, [sp, #164]	; 0xa4
 101f3be:	e9c9 2100 	strd	r2, r1, [r9]
 101f3c2:	bfd8      	it	le
 101f3c4:	f109 0908 	addle.w	r9, r9, #8
 101f3c8:	f300 84b6 	bgt.w	101fd38 <_svfprintf_r+0x1240>
 101f3cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101f3ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 101f3d0:	4293      	cmp	r3, r2
 101f3d2:	f280 8298 	bge.w	101f906 <_svfprintf_r+0xe0e>
 101f3d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 101f3d8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101f3dc:	f8c9 1000 	str.w	r1, [r9]
 101f3e0:	3301      	adds	r3, #1
 101f3e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 101f3e4:	2b07      	cmp	r3, #7
 101f3e6:	440a      	add	r2, r1
 101f3e8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f3ec:	f8c9 1004 	str.w	r1, [r9, #4]
 101f3f0:	bfd8      	it	le
 101f3f2:	f109 0908 	addle.w	r9, r9, #8
 101f3f6:	f300 8356 	bgt.w	101faa6 <_svfprintf_r+0xfae>
 101f3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101f3fc:	1e5c      	subs	r4, r3, #1
 101f3fe:	2c00      	cmp	r4, #0
 101f400:	f77f ad37 	ble.w	101ee72 <_svfprintf_r+0x37a>
 101f404:	2c10      	cmp	r4, #16
 101f406:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f408:	f340 84d0 	ble.w	101fdac <_svfprintf_r+0x12b4>
 101f40c:	9604      	str	r6, [sp, #16]
 101f40e:	2510      	movs	r5, #16
 101f410:	4626      	mov	r6, r4
 101f412:	4619      	mov	r1, r3
 101f414:	9c08      	ldr	r4, [sp, #32]
 101f416:	e003      	b.n	101f420 <_svfprintf_r+0x928>
 101f418:	3e10      	subs	r6, #16
 101f41a:	2e10      	cmp	r6, #16
 101f41c:	f340 84c3 	ble.w	101fda6 <_svfprintf_r+0x12ae>
 101f420:	3101      	adds	r1, #1
 101f422:	4b6f      	ldr	r3, [pc, #444]	; (101f5e0 <_svfprintf_r+0xae8>)
 101f424:	2907      	cmp	r1, #7
 101f426:	f102 0210 	add.w	r2, r2, #16
 101f42a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f42e:	e9c9 3500 	strd	r3, r5, [r9]
 101f432:	f109 0908 	add.w	r9, r9, #8
 101f436:	ddef      	ble.n	101f418 <_svfprintf_r+0x920>
 101f438:	aa28      	add	r2, sp, #160	; 0xa0
 101f43a:	4621      	mov	r1, r4
 101f43c:	4650      	mov	r0, sl
 101f43e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f442:	f005 ff19 	bl	1025278 <__ssprint_r>
 101f446:	2800      	cmp	r0, #0
 101f448:	f040 80b9 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f44c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f450:	e7e2      	b.n	101f418 <_svfprintf_r+0x920>
 101f452:	9b06      	ldr	r3, [sp, #24]
 101f454:	9903      	ldr	r1, [sp, #12]
 101f456:	1a5c      	subs	r4, r3, r1
 101f458:	2c00      	cmp	r4, #0
 101f45a:	f77f acf1 	ble.w	101ee40 <_svfprintf_r+0x348>
 101f45e:	2c10      	cmp	r4, #16
 101f460:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f462:	dd26      	ble.n	101f4b2 <_svfprintf_r+0x9ba>
 101f464:	960c      	str	r6, [sp, #48]	; 0x30
 101f466:	2510      	movs	r5, #16
 101f468:	4626      	mov	r6, r4
 101f46a:	4619      	mov	r1, r3
 101f46c:	9c08      	ldr	r4, [sp, #32]
 101f46e:	e002      	b.n	101f476 <_svfprintf_r+0x97e>
 101f470:	3e10      	subs	r6, #16
 101f472:	2e10      	cmp	r6, #16
 101f474:	dd1a      	ble.n	101f4ac <_svfprintf_r+0x9b4>
 101f476:	3101      	adds	r1, #1
 101f478:	4b59      	ldr	r3, [pc, #356]	; (101f5e0 <_svfprintf_r+0xae8>)
 101f47a:	2907      	cmp	r1, #7
 101f47c:	f102 0210 	add.w	r2, r2, #16
 101f480:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f484:	e9c9 3500 	strd	r3, r5, [r9]
 101f488:	f109 0908 	add.w	r9, r9, #8
 101f48c:	ddf0      	ble.n	101f470 <_svfprintf_r+0x978>
 101f48e:	aa28      	add	r2, sp, #160	; 0xa0
 101f490:	4621      	mov	r1, r4
 101f492:	4650      	mov	r0, sl
 101f494:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f498:	f005 feee 	bl	1025278 <__ssprint_r>
 101f49c:	2800      	cmp	r0, #0
 101f49e:	f040 808e 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f4a2:	3e10      	subs	r6, #16
 101f4a4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f4a8:	2e10      	cmp	r6, #16
 101f4aa:	dce4      	bgt.n	101f476 <_svfprintf_r+0x97e>
 101f4ac:	4634      	mov	r4, r6
 101f4ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 101f4b0:	460b      	mov	r3, r1
 101f4b2:	3301      	adds	r3, #1
 101f4b4:	494a      	ldr	r1, [pc, #296]	; (101f5e0 <_svfprintf_r+0xae8>)
 101f4b6:	2b07      	cmp	r3, #7
 101f4b8:	4422      	add	r2, r4
 101f4ba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f4be:	e9c9 1400 	strd	r1, r4, [r9]
 101f4c2:	bfd8      	it	le
 101f4c4:	f109 0908 	addle.w	r9, r9, #8
 101f4c8:	f77f acba 	ble.w	101ee40 <_svfprintf_r+0x348>
 101f4cc:	aa28      	add	r2, sp, #160	; 0xa0
 101f4ce:	9908      	ldr	r1, [sp, #32]
 101f4d0:	4650      	mov	r0, sl
 101f4d2:	f005 fed1 	bl	1025278 <__ssprint_r>
 101f4d6:	2800      	cmp	r0, #0
 101f4d8:	d171      	bne.n	101f5be <_svfprintf_r+0xac6>
 101f4da:	9b04      	ldr	r3, [sp, #16]
 101f4dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f4e0:	9907      	ldr	r1, [sp, #28]
 101f4e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f4e4:	1a5c      	subs	r4, r3, r1
 101f4e6:	2c00      	cmp	r4, #0
 101f4e8:	f77f acb0 	ble.w	101ee4c <_svfprintf_r+0x354>
 101f4ec:	2c10      	cmp	r4, #16
 101f4ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f4f0:	dd25      	ble.n	101f53e <_svfprintf_r+0xa46>
 101f4f2:	9604      	str	r6, [sp, #16]
 101f4f4:	2510      	movs	r5, #16
 101f4f6:	4626      	mov	r6, r4
 101f4f8:	4619      	mov	r1, r3
 101f4fa:	9c08      	ldr	r4, [sp, #32]
 101f4fc:	e002      	b.n	101f504 <_svfprintf_r+0xa0c>
 101f4fe:	3e10      	subs	r6, #16
 101f500:	2e10      	cmp	r6, #16
 101f502:	dd19      	ble.n	101f538 <_svfprintf_r+0xa40>
 101f504:	3101      	adds	r1, #1
 101f506:	4b36      	ldr	r3, [pc, #216]	; (101f5e0 <_svfprintf_r+0xae8>)
 101f508:	2907      	cmp	r1, #7
 101f50a:	f102 0210 	add.w	r2, r2, #16
 101f50e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f512:	e9c9 3500 	strd	r3, r5, [r9]
 101f516:	f109 0908 	add.w	r9, r9, #8
 101f51a:	ddf0      	ble.n	101f4fe <_svfprintf_r+0xa06>
 101f51c:	aa28      	add	r2, sp, #160	; 0xa0
 101f51e:	4621      	mov	r1, r4
 101f520:	4650      	mov	r0, sl
 101f522:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f526:	f005 fea7 	bl	1025278 <__ssprint_r>
 101f52a:	2800      	cmp	r0, #0
 101f52c:	d147      	bne.n	101f5be <_svfprintf_r+0xac6>
 101f52e:	3e10      	subs	r6, #16
 101f530:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f534:	2e10      	cmp	r6, #16
 101f536:	dce5      	bgt.n	101f504 <_svfprintf_r+0xa0c>
 101f538:	4634      	mov	r4, r6
 101f53a:	9e04      	ldr	r6, [sp, #16]
 101f53c:	460b      	mov	r3, r1
 101f53e:	3301      	adds	r3, #1
 101f540:	4927      	ldr	r1, [pc, #156]	; (101f5e0 <_svfprintf_r+0xae8>)
 101f542:	2b07      	cmp	r3, #7
 101f544:	4422      	add	r2, r4
 101f546:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f54a:	e9c9 1400 	strd	r1, r4, [r9]
 101f54e:	bfd8      	it	le
 101f550:	f109 0908 	addle.w	r9, r9, #8
 101f554:	f77f ac7a 	ble.w	101ee4c <_svfprintf_r+0x354>
 101f558:	aa28      	add	r2, sp, #160	; 0xa0
 101f55a:	9908      	ldr	r1, [sp, #32]
 101f55c:	4650      	mov	r0, sl
 101f55e:	f005 fe8b 	bl	1025278 <__ssprint_r>
 101f562:	bb60      	cbnz	r0, 101f5be <_svfprintf_r+0xac6>
 101f564:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f566:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f56a:	e46f      	b.n	101ee4c <_svfprintf_r+0x354>
 101f56c:	4611      	mov	r1, r2
 101f56e:	08e2      	lsrs	r2, r4, #3
 101f570:	08e8      	lsrs	r0, r5, #3
 101f572:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 101f576:	f004 0307 	and.w	r3, r4, #7
 101f57a:	4605      	mov	r5, r0
 101f57c:	3330      	adds	r3, #48	; 0x30
 101f57e:	4614      	mov	r4, r2
 101f580:	ea54 0005 	orrs.w	r0, r4, r5
 101f584:	f801 3c01 	strb.w	r3, [r1, #-1]
 101f588:	f101 32ff 	add.w	r2, r1, #4294967295
 101f58c:	d1ee      	bne.n	101f56c <_svfprintf_r+0xa74>
 101f58e:	9e03      	ldr	r6, [sp, #12]
 101f590:	920b      	str	r2, [sp, #44]	; 0x2c
 101f592:	4630      	mov	r0, r6
 101f594:	2b30      	cmp	r3, #48	; 0x30
 101f596:	bf0c      	ite	eq
 101f598:	2000      	moveq	r0, #0
 101f59a:	f000 0001 	andne.w	r0, r0, #1
 101f59e:	2800      	cmp	r0, #0
 101f5a0:	f040 840f 	bne.w	101fdc2 <_svfprintf_r+0x12ca>
 101f5a4:	ab54      	add	r3, sp, #336	; 0x150
 101f5a6:	1a9b      	subs	r3, r3, r2
 101f5a8:	9307      	str	r3, [sp, #28]
 101f5aa:	f7ff bbfd 	b.w	101eda8 <_svfprintf_r+0x2b0>
 101f5ae:	aa28      	add	r2, sp, #160	; 0xa0
 101f5b0:	9908      	ldr	r1, [sp, #32]
 101f5b2:	4650      	mov	r0, sl
 101f5b4:	f005 fe60 	bl	1025278 <__ssprint_r>
 101f5b8:	2800      	cmp	r0, #0
 101f5ba:	f43f ac6d 	beq.w	101ee98 <_svfprintf_r+0x3a0>
 101f5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101f5c0:	2b00      	cmp	r3, #0
 101f5c2:	f43f ab8d 	beq.w	101ece0 <_svfprintf_r+0x1e8>
 101f5c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 101f5c8:	4650      	mov	r0, sl
 101f5ca:	f004 fa7f 	bl	1023acc <_free_r>
 101f5ce:	f7ff bb87 	b.w	101ece0 <_svfprintf_r+0x1e8>
 101f5d2:	bf00      	nop
 101f5d4:	f3af 8000 	nop.w
 101f5d8:	ffffffff 	.word	0xffffffff
 101f5dc:	7fefffff 	.word	0x7fefffff
 101f5e0:	01067e50 	.word	0x01067e50
 101f5e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 101f5e6:	3201      	adds	r2, #1
 101f5e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101f5ea:	f109 0308 	add.w	r3, r9, #8
 101f5ee:	2c01      	cmp	r4, #1
 101f5f0:	f100 0101 	add.w	r1, r0, #1
 101f5f4:	f340 8134 	ble.w	101f860 <_svfprintf_r+0xd68>
 101f5f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101f5fa:	2907      	cmp	r1, #7
 101f5fc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f600:	f8c9 0000 	str.w	r0, [r9]
 101f604:	f04f 0001 	mov.w	r0, #1
 101f608:	f8c9 0004 	str.w	r0, [r9, #4]
 101f60c:	f300 8163 	bgt.w	101f8d6 <_svfprintf_r+0xdde>
 101f610:	3101      	adds	r1, #1
 101f612:	9816      	ldr	r0, [sp, #88]	; 0x58
 101f614:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 101f616:	2907      	cmp	r1, #7
 101f618:	4402      	add	r2, r0
 101f61a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f61e:	e9c3 4000 	strd	r4, r0, [r3]
 101f622:	bfd8      	it	le
 101f624:	3308      	addle	r3, #8
 101f626:	f300 8162 	bgt.w	101f8ee <_svfprintf_r+0xdf6>
 101f62a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101f62e:	1c48      	adds	r0, r1, #1
 101f630:	9c12      	ldr	r4, [sp, #72]	; 0x48
 101f632:	f103 0908 	add.w	r9, r3, #8
 101f636:	4684      	mov	ip, r0
 101f638:	3c01      	subs	r4, #1
 101f63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f63e:	f000 8122 	beq.w	101f886 <_svfprintf_r+0xd8e>
 101f642:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101f644:	2807      	cmp	r0, #7
 101f646:	4422      	add	r2, r4
 101f648:	605c      	str	r4, [r3, #4]
 101f64a:	f105 0501 	add.w	r5, r5, #1
 101f64e:	922a      	str	r2, [sp, #168]	; 0xa8
 101f650:	601d      	str	r5, [r3, #0]
 101f652:	9029      	str	r0, [sp, #164]	; 0xa4
 101f654:	f300 82de 	bgt.w	101fc14 <_svfprintf_r+0x111c>
 101f658:	f103 0410 	add.w	r4, r3, #16
 101f65c:	1c88      	adds	r0, r1, #2
 101f65e:	464b      	mov	r3, r9
 101f660:	46a1      	mov	r9, r4
 101f662:	9918      	ldr	r1, [sp, #96]	; 0x60
 101f664:	2807      	cmp	r0, #7
 101f666:	9029      	str	r0, [sp, #164]	; 0xa4
 101f668:	440a      	add	r2, r1
 101f66a:	922a      	str	r2, [sp, #168]	; 0xa8
 101f66c:	6059      	str	r1, [r3, #4]
 101f66e:	a922      	add	r1, sp, #136	; 0x88
 101f670:	6019      	str	r1, [r3, #0]
 101f672:	f77f abfe 	ble.w	101ee72 <_svfprintf_r+0x37a>
 101f676:	aa28      	add	r2, sp, #160	; 0xa0
 101f678:	9908      	ldr	r1, [sp, #32]
 101f67a:	4650      	mov	r0, sl
 101f67c:	f005 fdfc 	bl	1025278 <__ssprint_r>
 101f680:	2800      	cmp	r0, #0
 101f682:	d19c      	bne.n	101f5be <_svfprintf_r+0xac6>
 101f684:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f686:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f68a:	f7ff bbf2 	b.w	101ee72 <_svfprintf_r+0x37a>
 101f68e:	aa28      	add	r2, sp, #160	; 0xa0
 101f690:	9908      	ldr	r1, [sp, #32]
 101f692:	4650      	mov	r0, sl
 101f694:	f005 fdf0 	bl	1025278 <__ssprint_r>
 101f698:	2800      	cmp	r0, #0
 101f69a:	d190      	bne.n	101f5be <_svfprintf_r+0xac6>
 101f69c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f69e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f6a2:	f7ff bbb6 	b.w	101ee12 <_svfprintf_r+0x31a>
 101f6a6:	aa28      	add	r2, sp, #160	; 0xa0
 101f6a8:	9908      	ldr	r1, [sp, #32]
 101f6aa:	4650      	mov	r0, sl
 101f6ac:	f005 fde4 	bl	1025278 <__ssprint_r>
 101f6b0:	2800      	cmp	r0, #0
 101f6b2:	d184      	bne.n	101f5be <_svfprintf_r+0xac6>
 101f6b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f6b6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f6ba:	f7ff bbbd 	b.w	101ee38 <_svfprintf_r+0x340>
 101f6be:	2c10      	cmp	r4, #16
 101f6c0:	f647 6540 	movw	r5, #32320	; 0x7e40
 101f6c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f6c6:	f2c0 1506 	movt	r5, #262	; 0x106
 101f6ca:	dd24      	ble.n	101f716 <_svfprintf_r+0xc1e>
 101f6cc:	9704      	str	r7, [sp, #16]
 101f6ce:	2610      	movs	r6, #16
 101f6d0:	462f      	mov	r7, r5
 101f6d2:	4619      	mov	r1, r3
 101f6d4:	9d08      	ldr	r5, [sp, #32]
 101f6d6:	e002      	b.n	101f6de <_svfprintf_r+0xbe6>
 101f6d8:	3c10      	subs	r4, #16
 101f6da:	2c10      	cmp	r4, #16
 101f6dc:	dd18      	ble.n	101f710 <_svfprintf_r+0xc18>
 101f6de:	3101      	adds	r1, #1
 101f6e0:	3210      	adds	r2, #16
 101f6e2:	2907      	cmp	r1, #7
 101f6e4:	e9c9 7600 	strd	r7, r6, [r9]
 101f6e8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f6ec:	f109 0908 	add.w	r9, r9, #8
 101f6f0:	ddf2      	ble.n	101f6d8 <_svfprintf_r+0xbe0>
 101f6f2:	aa28      	add	r2, sp, #160	; 0xa0
 101f6f4:	4629      	mov	r1, r5
 101f6f6:	4650      	mov	r0, sl
 101f6f8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f6fc:	f005 fdbc 	bl	1025278 <__ssprint_r>
 101f700:	2800      	cmp	r0, #0
 101f702:	f47f af5c 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f706:	3c10      	subs	r4, #16
 101f708:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f70c:	2c10      	cmp	r4, #16
 101f70e:	dce6      	bgt.n	101f6de <_svfprintf_r+0xbe6>
 101f710:	463d      	mov	r5, r7
 101f712:	9f04      	ldr	r7, [sp, #16]
 101f714:	460b      	mov	r3, r1
 101f716:	3301      	adds	r3, #1
 101f718:	4422      	add	r2, r4
 101f71a:	2b07      	cmp	r3, #7
 101f71c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f720:	e9c9 5400 	strd	r5, r4, [r9]
 101f724:	f77f abad 	ble.w	101ee82 <_svfprintf_r+0x38a>
 101f728:	aa28      	add	r2, sp, #160	; 0xa0
 101f72a:	9908      	ldr	r1, [sp, #32]
 101f72c:	4650      	mov	r0, sl
 101f72e:	f005 fda3 	bl	1025278 <__ssprint_r>
 101f732:	2800      	cmp	r0, #0
 101f734:	f47f af43 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f738:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f73a:	f7ff bba2 	b.w	101ee82 <_svfprintf_r+0x38a>
 101f73e:	ab54      	add	r3, sp, #336	; 0x150
 101f740:	9204      	str	r2, [sp, #16]
 101f742:	930b      	str	r3, [sp, #44]	; 0x2c
 101f744:	9207      	str	r2, [sp, #28]
 101f746:	f7ff bb2f 	b.w	101eda8 <_svfprintf_r+0x2b0>
 101f74a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 101f74c:	2900      	cmp	r1, #0
 101f74e:	f340 82a2 	ble.w	101fc96 <_svfprintf_r+0x119e>
 101f752:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101f754:	9912      	ldr	r1, [sp, #72]	; 0x48
 101f756:	428b      	cmp	r3, r1
 101f758:	bfa8      	it	ge
 101f75a:	460b      	movge	r3, r1
 101f75c:	2b00      	cmp	r3, #0
 101f75e:	461c      	mov	r4, r3
 101f760:	dd0f      	ble.n	101f782 <_svfprintf_r+0xc8a>
 101f762:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f764:	4422      	add	r2, r4
 101f766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101f768:	3301      	adds	r3, #1
 101f76a:	f8c9 4004 	str.w	r4, [r9, #4]
 101f76e:	2b07      	cmp	r3, #7
 101f770:	922a      	str	r2, [sp, #168]	; 0xa8
 101f772:	f8c9 1000 	str.w	r1, [r9]
 101f776:	bfd8      	it	le
 101f778:	f109 0908 	addle.w	r9, r9, #8
 101f77c:	9329      	str	r3, [sp, #164]	; 0xa4
 101f77e:	f300 84e1 	bgt.w	1020144 <_svfprintf_r+0x164c>
 101f782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101f784:	2c00      	cmp	r4, #0
 101f786:	bfa8      	it	ge
 101f788:	1b1b      	subge	r3, r3, r4
 101f78a:	2b00      	cmp	r3, #0
 101f78c:	461c      	mov	r4, r3
 101f78e:	f300 81b9 	bgt.w	101fb04 <_svfprintf_r+0x100c>
 101f792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101f794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101f796:	440b      	add	r3, r1
 101f798:	0571      	lsls	r1, r6, #21
 101f79a:	461d      	mov	r5, r3
 101f79c:	f100 81db 	bmi.w	101fb56 <_svfprintf_r+0x105e>
 101f7a0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 101f7a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101f7a4:	429c      	cmp	r4, r3
 101f7a6:	db02      	blt.n	101f7ae <_svfprintf_r+0xcb6>
 101f7a8:	07f3      	lsls	r3, r6, #31
 101f7aa:	f140 84d8 	bpl.w	102015e <_svfprintf_r+0x1666>
 101f7ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f7b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 101f7b2:	3301      	adds	r3, #1
 101f7b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 101f7b6:	2b07      	cmp	r3, #7
 101f7b8:	440a      	add	r2, r1
 101f7ba:	f8c9 1004 	str.w	r1, [r9, #4]
 101f7be:	f8c9 0000 	str.w	r0, [r9]
 101f7c2:	bfd8      	it	le
 101f7c4:	f109 0908 	addle.w	r9, r9, #8
 101f7c8:	922a      	str	r2, [sp, #168]	; 0xa8
 101f7ca:	9329      	str	r3, [sp, #164]	; 0xa4
 101f7cc:	f300 85c4 	bgt.w	1020358 <_svfprintf_r+0x1860>
 101f7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101f7d2:	4619      	mov	r1, r3
 101f7d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101f7d6:	4419      	add	r1, r3
 101f7d8:	1b1b      	subs	r3, r3, r4
 101f7da:	1b4c      	subs	r4, r1, r5
 101f7dc:	429c      	cmp	r4, r3
 101f7de:	bfa8      	it	ge
 101f7e0:	461c      	movge	r4, r3
 101f7e2:	2c00      	cmp	r4, #0
 101f7e4:	dd0e      	ble.n	101f804 <_svfprintf_r+0xd0c>
 101f7e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101f7e8:	4422      	add	r2, r4
 101f7ea:	f8c9 5000 	str.w	r5, [r9]
 101f7ee:	3101      	adds	r1, #1
 101f7f0:	f8c9 4004 	str.w	r4, [r9, #4]
 101f7f4:	2907      	cmp	r1, #7
 101f7f6:	922a      	str	r2, [sp, #168]	; 0xa8
 101f7f8:	9129      	str	r1, [sp, #164]	; 0xa4
 101f7fa:	bfd8      	it	le
 101f7fc:	f109 0908 	addle.w	r9, r9, #8
 101f800:	f300 85b8 	bgt.w	1020374 <_svfprintf_r+0x187c>
 101f804:	2c00      	cmp	r4, #0
 101f806:	bfac      	ite	ge
 101f808:	1b1c      	subge	r4, r3, r4
 101f80a:	461c      	movlt	r4, r3
 101f80c:	2c00      	cmp	r4, #0
 101f80e:	f77f ab30 	ble.w	101ee72 <_svfprintf_r+0x37a>
 101f812:	2c10      	cmp	r4, #16
 101f814:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f816:	f340 82c9 	ble.w	101fdac <_svfprintf_r+0x12b4>
 101f81a:	9604      	str	r6, [sp, #16]
 101f81c:	2510      	movs	r5, #16
 101f81e:	4626      	mov	r6, r4
 101f820:	4619      	mov	r1, r3
 101f822:	9c08      	ldr	r4, [sp, #32]
 101f824:	e003      	b.n	101f82e <_svfprintf_r+0xd36>
 101f826:	3e10      	subs	r6, #16
 101f828:	2e10      	cmp	r6, #16
 101f82a:	f340 82bc 	ble.w	101fda6 <_svfprintf_r+0x12ae>
 101f82e:	3101      	adds	r1, #1
 101f830:	4bb9      	ldr	r3, [pc, #740]	; (101fb18 <_svfprintf_r+0x1020>)
 101f832:	2907      	cmp	r1, #7
 101f834:	f102 0210 	add.w	r2, r2, #16
 101f838:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f83c:	e9c9 3500 	strd	r3, r5, [r9]
 101f840:	f109 0908 	add.w	r9, r9, #8
 101f844:	ddef      	ble.n	101f826 <_svfprintf_r+0xd2e>
 101f846:	aa28      	add	r2, sp, #160	; 0xa0
 101f848:	4621      	mov	r1, r4
 101f84a:	4650      	mov	r0, sl
 101f84c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f850:	f005 fd12 	bl	1025278 <__ssprint_r>
 101f854:	2800      	cmp	r0, #0
 101f856:	f47f aeb2 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f85a:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f85e:	e7e2      	b.n	101f826 <_svfprintf_r+0xd2e>
 101f860:	07f4      	lsls	r4, r6, #31
 101f862:	f53f aec9 	bmi.w	101f5f8 <_svfprintf_r+0xb00>
 101f866:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 101f868:	2907      	cmp	r1, #7
 101f86a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f86e:	f8c9 4000 	str.w	r4, [r9]
 101f872:	f04f 0401 	mov.w	r4, #1
 101f876:	f8c9 4004 	str.w	r4, [r9, #4]
 101f87a:	f300 81cb 	bgt.w	101fc14 <_svfprintf_r+0x111c>
 101f87e:	3002      	adds	r0, #2
 101f880:	f109 0910 	add.w	r9, r9, #16
 101f884:	e6ed      	b.n	101f662 <_svfprintf_r+0xb6a>
 101f886:	2c00      	cmp	r4, #0
 101f888:	f77f aeeb 	ble.w	101f662 <_svfprintf_r+0xb6a>
 101f88c:	2c10      	cmp	r4, #16
 101f88e:	f340 869e 	ble.w	10205ce <_svfprintf_r+0x1ad6>
 101f892:	2510      	movs	r5, #16
 101f894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 101f898:	e005      	b.n	101f8a6 <_svfprintf_r+0xdae>
 101f89a:	3c10      	subs	r4, #16
 101f89c:	f101 0c01 	add.w	ip, r1, #1
 101f8a0:	2c10      	cmp	r4, #16
 101f8a2:	f340 8302 	ble.w	101feaa <_svfprintf_r+0x13b2>
 101f8a6:	489c      	ldr	r0, [pc, #624]	; (101fb18 <_svfprintf_r+0x1020>)
 101f8a8:	4661      	mov	r1, ip
 101f8aa:	2907      	cmp	r1, #7
 101f8ac:	f102 0210 	add.w	r2, r2, #16
 101f8b0:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 101f8b4:	e9c3 0500 	strd	r0, r5, [r3]
 101f8b8:	f103 0308 	add.w	r3, r3, #8
 101f8bc:	dded      	ble.n	101f89a <_svfprintf_r+0xda2>
 101f8be:	aa28      	add	r2, sp, #160	; 0xa0
 101f8c0:	4649      	mov	r1, r9
 101f8c2:	4650      	mov	r0, sl
 101f8c4:	f005 fcd8 	bl	1025278 <__ssprint_r>
 101f8c8:	ab2b      	add	r3, sp, #172	; 0xac
 101f8ca:	2800      	cmp	r0, #0
 101f8cc:	f47f ae77 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f8d0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f8d4:	e7e1      	b.n	101f89a <_svfprintf_r+0xda2>
 101f8d6:	aa28      	add	r2, sp, #160	; 0xa0
 101f8d8:	9908      	ldr	r1, [sp, #32]
 101f8da:	4650      	mov	r0, sl
 101f8dc:	f005 fccc 	bl	1025278 <__ssprint_r>
 101f8e0:	2800      	cmp	r0, #0
 101f8e2:	f47f ae6c 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f8e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f8e8:	ab2b      	add	r3, sp, #172	; 0xac
 101f8ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101f8ec:	e690      	b.n	101f610 <_svfprintf_r+0xb18>
 101f8ee:	aa28      	add	r2, sp, #160	; 0xa0
 101f8f0:	9908      	ldr	r1, [sp, #32]
 101f8f2:	4650      	mov	r0, sl
 101f8f4:	f005 fcc0 	bl	1025278 <__ssprint_r>
 101f8f8:	2800      	cmp	r0, #0
 101f8fa:	f47f ae60 	bne.w	101f5be <_svfprintf_r+0xac6>
 101f8fe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f900:	ab2b      	add	r3, sp, #172	; 0xac
 101f902:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101f904:	e691      	b.n	101f62a <_svfprintf_r+0xb32>
 101f906:	07f4      	lsls	r4, r6, #31
 101f908:	bf58      	it	pl
 101f90a:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 101f90c:	f57f aab1 	bpl.w	101ee72 <_svfprintf_r+0x37a>
 101f910:	e561      	b.n	101f3d6 <_svfprintf_r+0x8de>
 101f912:	eeb4 8b48 	vcmp.f64	d8, d8
 101f916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f91a:	f180 862f 	bvs.w	102057c <_svfprintf_r+0x1a84>
 101f91e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f920:	f023 0420 	bic.w	r4, r3, #32
 101f924:	2c41      	cmp	r4, #65	; 0x41
 101f926:	f040 82e6 	bne.w	101fef6 <_svfprintf_r+0x13fe>
 101f92a:	2b61      	cmp	r3, #97	; 0x61
 101f92c:	f04f 0230 	mov.w	r2, #48	; 0x30
 101f930:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 101f934:	bf0c      	ite	eq
 101f936:	2378      	moveq	r3, #120	; 0x78
 101f938:	2358      	movne	r3, #88	; 0x58
 101f93a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 101f93e:	9b04      	ldr	r3, [sp, #16]
 101f940:	2b63      	cmp	r3, #99	; 0x63
 101f942:	f300 848e 	bgt.w	1020262 <_svfprintf_r+0x176a>
 101f946:	2300      	movs	r3, #0
 101f948:	930a      	str	r3, [sp, #40]	; 0x28
 101f94a:	ab3b      	add	r3, sp, #236	; 0xec
 101f94c:	930b      	str	r3, [sp, #44]	; 0x2c
 101f94e:	ee18 3a90 	vmov	r3, s17
 101f952:	2b00      	cmp	r3, #0
 101f954:	f280 855a 	bge.w	102040c <_svfprintf_r+0x1914>
 101f958:	eeb1 0b48 	vneg.f64	d0, d8
 101f95c:	232d      	movs	r3, #45	; 0x2d
 101f95e:	930c      	str	r3, [sp, #48]	; 0x30
 101f960:	a81f      	add	r0, sp, #124	; 0x7c
 101f962:	f005 fc01 	bl	1025168 <frexp>
 101f966:	9a04      	ldr	r2, [sp, #16]
 101f968:	990e      	ldr	r1, [sp, #56]	; 0x38
 101f96a:	f24c 1078 	movw	r0, #49528	; 0xc178
 101f96e:	f2c0 1006 	movt	r0, #262	; 0x106
 101f972:	3a01      	subs	r2, #1
 101f974:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101f976:	ee20 0b0b 	vmul.f64	d0, d0, d11
 101f97a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 101f97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f982:	bf04      	itt	eq
 101f984:	2301      	moveq	r3, #1
 101f986:	931f      	streq	r3, [sp, #124]	; 0x7c
 101f988:	f64b 63d4 	movw	r3, #48852	; 0xbed4
 101f98c:	f2c0 1306 	movt	r3, #262	; 0x106
 101f990:	2961      	cmp	r1, #97	; 0x61
 101f992:	bf18      	it	ne
 101f994:	4618      	movne	r0, r3
 101f996:	e005      	b.n	101f9a4 <_svfprintf_r+0xeac>
 101f998:	eeb5 0b40 	vcmp.f64	d0, #0.0
 101f99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f9a0:	d015      	beq.n	101f9ce <_svfprintf_r+0xed6>
 101f9a2:	461d      	mov	r5, r3
 101f9a4:	ee20 0b09 	vmul.f64	d0, d0, d9
 101f9a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 101f9ac:	462b      	mov	r3, r5
 101f9ae:	4611      	mov	r1, r2
 101f9b0:	f102 32ff 	add.w	r2, r2, #4294967295
 101f9b4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 101f9b8:	ee17 ca90 	vmov	ip, s15
 101f9bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 101f9c0:	ee30 0b46 	vsub.f64	d0, d0, d6
 101f9c4:	f810 c00c 	ldrb.w	ip, [r0, ip]
 101f9c8:	f803 cb01 	strb.w	ip, [r3], #1
 101f9cc:	d1e4      	bne.n	101f998 <_svfprintf_r+0xea0>
 101f9ce:	eeb4 0bca 	vcmpe.f64	d0, d10
 101f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f9d6:	f300 855f 	bgt.w	1020498 <_svfprintf_r+0x19a0>
 101f9da:	eeb4 0b4a 	vcmp.f64	d0, d10
 101f9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f9e2:	d104      	bne.n	101f9ee <_svfprintf_r+0xef6>
 101f9e4:	ee17 2a90 	vmov	r2, s15
 101f9e8:	07d2      	lsls	r2, r2, #31
 101f9ea:	f100 8555 	bmi.w	1020498 <_svfprintf_r+0x19a0>
 101f9ee:	2900      	cmp	r1, #0
 101f9f0:	bfa2      	ittt	ge
 101f9f2:	1c4a      	addge	r2, r1, #1
 101f9f4:	18d2      	addge	r2, r2, r3
 101f9f6:	2130      	movge	r1, #48	; 0x30
 101f9f8:	db03      	blt.n	101fa02 <_svfprintf_r+0xf0a>
 101f9fa:	f803 1b01 	strb.w	r1, [r3], #1
 101f9fe:	4293      	cmp	r3, r2
 101fa00:	d1fb      	bne.n	101f9fa <_svfprintf_r+0xf02>
 101fa02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101fa04:	f046 0602 	orr.w	r6, r6, #2
 101fa08:	1a9b      	subs	r3, r3, r2
 101fa0a:	9312      	str	r3, [sp, #72]	; 0x48
 101fa0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101fa0e:	9310      	str	r3, [sp, #64]	; 0x40
 101fa10:	e2b5      	b.n	101ff7e <_svfprintf_r+0x1486>
 101fa12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101fa14:	06f4      	lsls	r4, r6, #27
 101fa16:	f103 0204 	add.w	r2, r3, #4
 101fa1a:	f100 85ea 	bmi.w	10205f2 <_svfprintf_r+0x1afa>
 101fa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101fa20:	0670      	lsls	r0, r6, #25
 101fa22:	bf48      	it	mi
 101fa24:	f9b3 4000 	ldrshmi.w	r4, [r3]
 101fa28:	d404      	bmi.n	101fa34 <_svfprintf_r+0xf3c>
 101fa2a:	05b1      	lsls	r1, r6, #22
 101fa2c:	f140 83a9 	bpl.w	1020182 <_svfprintf_r+0x168a>
 101fa30:	f993 4000 	ldrsb.w	r4, [r3]
 101fa34:	17e5      	asrs	r5, r4, #31
 101fa36:	9209      	str	r2, [sp, #36]	; 0x24
 101fa38:	9603      	str	r6, [sp, #12]
 101fa3a:	4622      	mov	r2, r4
 101fa3c:	462b      	mov	r3, r5
 101fa3e:	f7ff bb1e 	b.w	101f07e <_svfprintf_r+0x586>
 101fa42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101fa44:	06f1      	lsls	r1, r6, #27
 101fa46:	f852 4b04 	ldr.w	r4, [r2], #4
 101fa4a:	f100 85d5 	bmi.w	10205f8 <_svfprintf_r+0x1b00>
 101fa4e:	0673      	lsls	r3, r6, #25
 101fa50:	9209      	str	r2, [sp, #36]	; 0x24
 101fa52:	9603      	str	r6, [sp, #12]
 101fa54:	f140 823b 	bpl.w	101fece <_svfprintf_r+0x13d6>
 101fa58:	b2a4      	uxth	r4, r4
 101fa5a:	2500      	movs	r5, #0
 101fa5c:	2301      	movs	r3, #1
 101fa5e:	f7ff b97c 	b.w	101ed5a <_svfprintf_r+0x262>
 101fa62:	9905      	ldr	r1, [sp, #20]
 101fa64:	6812      	ldr	r2, [r2, #0]
 101fa66:	9309      	str	r3, [sp, #36]	; 0x24
 101fa68:	17cd      	asrs	r5, r1, #31
 101fa6a:	4608      	mov	r0, r1
 101fa6c:	4629      	mov	r1, r5
 101fa6e:	e9c2 0100 	strd	r0, r1, [r2]
 101fa72:	f7ff b881 	b.w	101eb78 <_svfprintf_r+0x80>
 101fa76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101fa78:	06f1      	lsls	r1, r6, #27
 101fa7a:	f852 4b04 	ldr.w	r4, [r2], #4
 101fa7e:	f100 85db 	bmi.w	1020638 <_svfprintf_r+0x1b40>
 101fa82:	0673      	lsls	r3, r6, #25
 101fa84:	f140 822b 	bpl.w	101fede <_svfprintf_r+0x13e6>
 101fa88:	4633      	mov	r3, r6
 101fa8a:	9209      	str	r2, [sp, #36]	; 0x24
 101fa8c:	b2a4      	uxth	r4, r4
 101fa8e:	2500      	movs	r5, #0
 101fa90:	f7ff bb9b 	b.w	101f1ca <_svfprintf_r+0x6d2>
 101fa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101fa96:	2201      	movs	r2, #1
 101fa98:	ac3b      	add	r4, sp, #236	; 0xec
 101fa9a:	9203      	str	r2, [sp, #12]
 101fa9c:	9207      	str	r2, [sp, #28]
 101fa9e:	681b      	ldr	r3, [r3, #0]
 101faa0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 101faa4:	e409      	b.n	101f2ba <_svfprintf_r+0x7c2>
 101faa6:	aa28      	add	r2, sp, #160	; 0xa0
 101faa8:	9908      	ldr	r1, [sp, #32]
 101faaa:	4650      	mov	r0, sl
 101faac:	f005 fbe4 	bl	1025278 <__ssprint_r>
 101fab0:	2800      	cmp	r0, #0
 101fab2:	f47f ad84 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fab6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fab8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fabc:	e49d      	b.n	101f3fa <_svfprintf_r+0x902>
 101fabe:	9804      	ldr	r0, [sp, #16]
 101fac0:	f24c 138c 	movw	r3, #49548	; 0xc18c
 101fac4:	9204      	str	r2, [sp, #16]
 101fac6:	f2c0 1306 	movt	r3, #262	; 0x106
 101faca:	2806      	cmp	r0, #6
 101facc:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 101fad0:	4611      	mov	r1, r2
 101fad2:	9213      	str	r2, [sp, #76]	; 0x4c
 101fad4:	bf28      	it	cs
 101fad6:	2006      	movcs	r0, #6
 101fad8:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101fadc:	9003      	str	r0, [sp, #12]
 101fade:	9007      	str	r0, [sp, #28]
 101fae0:	930b      	str	r3, [sp, #44]	; 0x2c
 101fae2:	f7ff b96e 	b.w	101edc2 <_svfprintf_r+0x2ca>
 101fae6:	2140      	movs	r1, #64	; 0x40
 101fae8:	4650      	mov	r0, sl
 101faea:	f7fc fe75 	bl	101c7d8 <_malloc_r>
 101faee:	9b08      	ldr	r3, [sp, #32]
 101faf0:	6018      	str	r0, [r3, #0]
 101faf2:	6118      	str	r0, [r3, #16]
 101faf4:	2800      	cmp	r0, #0
 101faf6:	f000 8591 	beq.w	102061c <_svfprintf_r+0x1b24>
 101fafa:	9a08      	ldr	r2, [sp, #32]
 101fafc:	2340      	movs	r3, #64	; 0x40
 101fafe:	6153      	str	r3, [r2, #20]
 101fb00:	f7ff b81a 	b.w	101eb38 <_svfprintf_r+0x40>
 101fb04:	2c10      	cmp	r4, #16
 101fb06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fb08:	f340 82a9 	ble.w	102005e <_svfprintf_r+0x1566>
 101fb0c:	9604      	str	r6, [sp, #16]
 101fb0e:	2510      	movs	r5, #16
 101fb10:	4626      	mov	r6, r4
 101fb12:	4619      	mov	r1, r3
 101fb14:	9c08      	ldr	r4, [sp, #32]
 101fb16:	e005      	b.n	101fb24 <_svfprintf_r+0x102c>
 101fb18:	01067e50 	.word	0x01067e50
 101fb1c:	3e10      	subs	r6, #16
 101fb1e:	2e10      	cmp	r6, #16
 101fb20:	f340 829a 	ble.w	1020058 <_svfprintf_r+0x1560>
 101fb24:	3101      	adds	r1, #1
 101fb26:	4bb7      	ldr	r3, [pc, #732]	; (101fe04 <_svfprintf_r+0x130c>)
 101fb28:	2907      	cmp	r1, #7
 101fb2a:	f102 0210 	add.w	r2, r2, #16
 101fb2e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fb32:	e9c9 3500 	strd	r3, r5, [r9]
 101fb36:	f109 0908 	add.w	r9, r9, #8
 101fb3a:	ddef      	ble.n	101fb1c <_svfprintf_r+0x1024>
 101fb3c:	aa28      	add	r2, sp, #160	; 0xa0
 101fb3e:	4621      	mov	r1, r4
 101fb40:	4650      	mov	r0, sl
 101fb42:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fb46:	f005 fb97 	bl	1025278 <__ssprint_r>
 101fb4a:	2800      	cmp	r0, #0
 101fb4c:	f47f ad37 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fb50:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101fb54:	e7e2      	b.n	101fb1c <_svfprintf_r+0x1024>
 101fb56:	9911      	ldr	r1, [sp, #68]	; 0x44
 101fb58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 101fb5a:	2b00      	cmp	r3, #0
 101fb5c:	bfd8      	it	le
 101fb5e:	2900      	cmple	r1, #0
 101fb60:	f340 8556 	ble.w	1020610 <_svfprintf_r+0x1b18>
 101fb64:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 101fb68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 101fb6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101fb6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 101fb70:	960c      	str	r6, [sp, #48]	; 0x30
 101fb72:	461e      	mov	r6, r3
 101fb74:	4401      	add	r1, r0
 101fb76:	9107      	str	r1, [sp, #28]
 101fb78:	2e00      	cmp	r6, #0
 101fb7a:	d044      	beq.n	101fc06 <_svfprintf_r+0x110e>
 101fb7c:	3e01      	subs	r6, #1
 101fb7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fb80:	9919      	ldr	r1, [sp, #100]	; 0x64
 101fb82:	3301      	adds	r3, #1
 101fb84:	981a      	ldr	r0, [sp, #104]	; 0x68
 101fb86:	2b07      	cmp	r3, #7
 101fb88:	440a      	add	r2, r1
 101fb8a:	f8c9 1004 	str.w	r1, [r9, #4]
 101fb8e:	f8c9 0000 	str.w	r0, [r9]
 101fb92:	bfd8      	it	le
 101fb94:	f109 0908 	addle.w	r9, r9, #8
 101fb98:	922a      	str	r2, [sp, #168]	; 0xa8
 101fb9a:	9329      	str	r3, [sp, #164]	; 0xa4
 101fb9c:	f300 80c0 	bgt.w	101fd20 <_svfprintf_r+0x1228>
 101fba0:	9814      	ldr	r0, [sp, #80]	; 0x50
 101fba2:	9907      	ldr	r1, [sp, #28]
 101fba4:	7803      	ldrb	r3, [r0, #0]
 101fba6:	1b4c      	subs	r4, r1, r5
 101fba8:	9104      	str	r1, [sp, #16]
 101fbaa:	429c      	cmp	r4, r3
 101fbac:	bfa8      	it	ge
 101fbae:	461c      	movge	r4, r3
 101fbb0:	2c00      	cmp	r4, #0
 101fbb2:	dd0e      	ble.n	101fbd2 <_svfprintf_r+0x10da>
 101fbb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fbb6:	4422      	add	r2, r4
 101fbb8:	f8c9 5000 	str.w	r5, [r9]
 101fbbc:	3301      	adds	r3, #1
 101fbbe:	922a      	str	r2, [sp, #168]	; 0xa8
 101fbc0:	2b07      	cmp	r3, #7
 101fbc2:	f8c9 4004 	str.w	r4, [r9, #4]
 101fbc6:	9329      	str	r3, [sp, #164]	; 0xa4
 101fbc8:	f300 8107 	bgt.w	101fdda <_svfprintf_r+0x12e2>
 101fbcc:	7803      	ldrb	r3, [r0, #0]
 101fbce:	f109 0908 	add.w	r9, r9, #8
 101fbd2:	2c00      	cmp	r4, #0
 101fbd4:	bfac      	ite	ge
 101fbd6:	1b1c      	subge	r4, r3, r4
 101fbd8:	461c      	movlt	r4, r3
 101fbda:	2c00      	cmp	r4, #0
 101fbdc:	dc29      	bgt.n	101fc32 <_svfprintf_r+0x113a>
 101fbde:	441d      	add	r5, r3
 101fbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 101fbe2:	2e00      	cmp	r6, #0
 101fbe4:	bfd8      	it	le
 101fbe6:	2b00      	cmple	r3, #0
 101fbe8:	dcc6      	bgt.n	101fb78 <_svfprintf_r+0x1080>
 101fbea:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 101fbee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 101fbf2:	9904      	ldr	r1, [sp, #16]
 101fbf4:	462b      	mov	r3, r5
 101fbf6:	428d      	cmp	r5, r1
 101fbf8:	bf28      	it	cs
 101fbfa:	460b      	movcs	r3, r1
 101fbfc:	461d      	mov	r5, r3
 101fbfe:	e5cf      	b.n	101f7a0 <_svfprintf_r+0xca8>
 101fc00:	9603      	str	r6, [sp, #12]
 101fc02:	f7ff bb1d 	b.w	101f240 <_svfprintf_r+0x748>
 101fc06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101fc08:	3b01      	subs	r3, #1
 101fc0a:	9314      	str	r3, [sp, #80]	; 0x50
 101fc0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 101fc0e:	3b01      	subs	r3, #1
 101fc10:	9311      	str	r3, [sp, #68]	; 0x44
 101fc12:	e7b4      	b.n	101fb7e <_svfprintf_r+0x1086>
 101fc14:	aa28      	add	r2, sp, #160	; 0xa0
 101fc16:	9908      	ldr	r1, [sp, #32]
 101fc18:	4650      	mov	r0, sl
 101fc1a:	f005 fb2d 	bl	1025278 <__ssprint_r>
 101fc1e:	2800      	cmp	r0, #0
 101fc20:	f47f accd 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fc24:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101fc26:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 101fc2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fc2c:	ab2b      	add	r3, sp, #172	; 0xac
 101fc2e:	3001      	adds	r0, #1
 101fc30:	e517      	b.n	101f662 <_svfprintf_r+0xb6a>
 101fc32:	2c10      	cmp	r4, #16
 101fc34:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101fc36:	dd1f      	ble.n	101fc78 <_svfprintf_r+0x1180>
 101fc38:	2710      	movs	r7, #16
 101fc3a:	e002      	b.n	101fc42 <_svfprintf_r+0x114a>
 101fc3c:	3c10      	subs	r4, #16
 101fc3e:	2c10      	cmp	r4, #16
 101fc40:	dd1a      	ble.n	101fc78 <_svfprintf_r+0x1180>
 101fc42:	3101      	adds	r1, #1
 101fc44:	4b6f      	ldr	r3, [pc, #444]	; (101fe04 <_svfprintf_r+0x130c>)
 101fc46:	2907      	cmp	r1, #7
 101fc48:	f102 0210 	add.w	r2, r2, #16
 101fc4c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fc50:	e9c9 3700 	strd	r3, r7, [r9]
 101fc54:	f109 0908 	add.w	r9, r9, #8
 101fc58:	ddf0      	ble.n	101fc3c <_svfprintf_r+0x1144>
 101fc5a:	aa28      	add	r2, sp, #160	; 0xa0
 101fc5c:	4641      	mov	r1, r8
 101fc5e:	4650      	mov	r0, sl
 101fc60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fc64:	f005 fb08 	bl	1025278 <__ssprint_r>
 101fc68:	2800      	cmp	r0, #0
 101fc6a:	f47f aca8 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fc6e:	3c10      	subs	r4, #16
 101fc70:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101fc74:	2c10      	cmp	r4, #16
 101fc76:	dce4      	bgt.n	101fc42 <_svfprintf_r+0x114a>
 101fc78:	3101      	adds	r1, #1
 101fc7a:	4b62      	ldr	r3, [pc, #392]	; (101fe04 <_svfprintf_r+0x130c>)
 101fc7c:	2907      	cmp	r1, #7
 101fc7e:	4422      	add	r2, r4
 101fc80:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fc84:	e9c9 3400 	strd	r3, r4, [r9]
 101fc88:	f300 8337 	bgt.w	10202fa <_svfprintf_r+0x1802>
 101fc8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101fc8e:	f109 0908 	add.w	r9, r9, #8
 101fc92:	781b      	ldrb	r3, [r3, #0]
 101fc94:	e7a3      	b.n	101fbde <_svfprintf_r+0x10e6>
 101fc96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fc98:	3201      	adds	r2, #1
 101fc9a:	f649 50e0 	movw	r0, #40416	; 0x9de0
 101fc9e:	2401      	movs	r4, #1
 101fca0:	3301      	adds	r3, #1
 101fca2:	f2c0 1006 	movt	r0, #262	; 0x106
 101fca6:	2b07      	cmp	r3, #7
 101fca8:	e9c9 0400 	strd	r0, r4, [r9]
 101fcac:	922a      	str	r2, [sp, #168]	; 0xa8
 101fcae:	bfd8      	it	le
 101fcb0:	f109 0908 	addle.w	r9, r9, #8
 101fcb4:	9329      	str	r3, [sp, #164]	; 0xa4
 101fcb6:	f300 822c 	bgt.w	1020112 <_svfprintf_r+0x161a>
 101fcba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101fcbc:	430b      	orrs	r3, r1
 101fcbe:	f000 8338 	beq.w	1020332 <_svfprintf_r+0x183a>
 101fcc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fcc4:	9816      	ldr	r0, [sp, #88]	; 0x58
 101fcc6:	3301      	adds	r3, #1
 101fcc8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 101fcca:	2b07      	cmp	r3, #7
 101fccc:	4402      	add	r2, r0
 101fcce:	f8c9 0004 	str.w	r0, [r9, #4]
 101fcd2:	f8c9 4000 	str.w	r4, [r9]
 101fcd6:	bfd8      	it	le
 101fcd8:	f109 0908 	addle.w	r9, r9, #8
 101fcdc:	922a      	str	r2, [sp, #168]	; 0xa8
 101fcde:	9329      	str	r3, [sp, #164]	; 0xa4
 101fce0:	f300 8319 	bgt.w	1020316 <_svfprintf_r+0x181e>
 101fce4:	2900      	cmp	r1, #0
 101fce6:	f2c0 8397 	blt.w	1020418 <_svfprintf_r+0x1920>
 101fcea:	3301      	adds	r3, #1
 101fcec:	9912      	ldr	r1, [sp, #72]	; 0x48
 101fcee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101fcf0:	2b07      	cmp	r3, #7
 101fcf2:	440a      	add	r2, r1
 101fcf4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101fcf8:	e9c9 0100 	strd	r0, r1, [r9]
 101fcfc:	f77f a8b7 	ble.w	101ee6e <_svfprintf_r+0x376>
 101fd00:	e4b9      	b.n	101f676 <_svfprintf_r+0xb7e>
 101fd02:	aa28      	add	r2, sp, #160	; 0xa0
 101fd04:	9908      	ldr	r1, [sp, #32]
 101fd06:	4650      	mov	r0, sl
 101fd08:	f005 fab6 	bl	1025278 <__ssprint_r>
 101fd0c:	2800      	cmp	r0, #0
 101fd0e:	f47f ac56 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fd12:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101fd16:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fd1a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fd1c:	f7ff b866 	b.w	101edec <_svfprintf_r+0x2f4>
 101fd20:	aa28      	add	r2, sp, #160	; 0xa0
 101fd22:	4641      	mov	r1, r8
 101fd24:	4650      	mov	r0, sl
 101fd26:	f005 faa7 	bl	1025278 <__ssprint_r>
 101fd2a:	2800      	cmp	r0, #0
 101fd2c:	f47f ac47 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fd30:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fd32:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fd36:	e733      	b.n	101fba0 <_svfprintf_r+0x10a8>
 101fd38:	aa28      	add	r2, sp, #160	; 0xa0
 101fd3a:	9908      	ldr	r1, [sp, #32]
 101fd3c:	4650      	mov	r0, sl
 101fd3e:	f005 fa9b 	bl	1025278 <__ssprint_r>
 101fd42:	2800      	cmp	r0, #0
 101fd44:	f47f ac3b 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fd48:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fd4c:	f7ff bb3e 	b.w	101f3cc <_svfprintf_r+0x8d4>
 101fd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101fd52:	2208      	movs	r2, #8
 101fd54:	2100      	movs	r1, #0
 101fd56:	a826      	add	r0, sp, #152	; 0x98
 101fd58:	9321      	str	r3, [sp, #132]	; 0x84
 101fd5a:	f7fd fda9 	bl	101d8b0 <memset>
 101fd5e:	9b04      	ldr	r3, [sp, #16]
 101fd60:	1c5a      	adds	r2, r3, #1
 101fd62:	f000 8196 	beq.w	1020092 <_svfprintf_r+0x159a>
 101fd66:	2400      	movs	r4, #0
 101fd68:	9603      	str	r6, [sp, #12]
 101fd6a:	f8cd 9010 	str.w	r9, [sp, #16]
 101fd6e:	4626      	mov	r6, r4
 101fd70:	4699      	mov	r9, r3
 101fd72:	9509      	str	r5, [sp, #36]	; 0x24
 101fd74:	e009      	b.n	101fd8a <_svfprintf_r+0x1292>
 101fd76:	f002 fac1 	bl	10222fc <_wcrtomb_r>
 101fd7a:	1833      	adds	r3, r6, r0
 101fd7c:	3001      	adds	r0, #1
 101fd7e:	f000 8383 	beq.w	1020488 <_svfprintf_r+0x1990>
 101fd82:	454b      	cmp	r3, r9
 101fd84:	dc0a      	bgt.n	101fd9c <_svfprintf_r+0x12a4>
 101fd86:	461e      	mov	r6, r3
 101fd88:	d008      	beq.n	101fd9c <_svfprintf_r+0x12a4>
 101fd8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101fd8c:	ab26      	add	r3, sp, #152	; 0x98
 101fd8e:	a93b      	add	r1, sp, #236	; 0xec
 101fd90:	4650      	mov	r0, sl
 101fd92:	5915      	ldr	r5, [r2, r4]
 101fd94:	3404      	adds	r4, #4
 101fd96:	462a      	mov	r2, r5
 101fd98:	2d00      	cmp	r5, #0
 101fd9a:	d1ec      	bne.n	101fd76 <_svfprintf_r+0x127e>
 101fd9c:	9607      	str	r6, [sp, #28]
 101fd9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101fda0:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 101fda4:	e183      	b.n	10200ae <_svfprintf_r+0x15b6>
 101fda6:	4634      	mov	r4, r6
 101fda8:	9e04      	ldr	r6, [sp, #16]
 101fdaa:	460b      	mov	r3, r1
 101fdac:	3301      	adds	r3, #1
 101fdae:	4915      	ldr	r1, [pc, #84]	; (101fe04 <_svfprintf_r+0x130c>)
 101fdb0:	2b07      	cmp	r3, #7
 101fdb2:	4422      	add	r2, r4
 101fdb4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101fdb8:	e9c9 1400 	strd	r1, r4, [r9]
 101fdbc:	f77f a857 	ble.w	101ee6e <_svfprintf_r+0x376>
 101fdc0:	e459      	b.n	101f676 <_svfprintf_r+0xb7e>
 101fdc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101fdc4:	3902      	subs	r1, #2
 101fdc6:	2330      	movs	r3, #48	; 0x30
 101fdc8:	9e03      	ldr	r6, [sp, #12]
 101fdca:	910b      	str	r1, [sp, #44]	; 0x2c
 101fdcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 101fdd0:	ab54      	add	r3, sp, #336	; 0x150
 101fdd2:	1a5b      	subs	r3, r3, r1
 101fdd4:	9307      	str	r3, [sp, #28]
 101fdd6:	f7fe bfe7 	b.w	101eda8 <_svfprintf_r+0x2b0>
 101fdda:	aa28      	add	r2, sp, #160	; 0xa0
 101fddc:	4641      	mov	r1, r8
 101fdde:	4650      	mov	r0, sl
 101fde0:	f005 fa4a 	bl	1025278 <__ssprint_r>
 101fde4:	2800      	cmp	r0, #0
 101fde6:	f47f abea 	bne.w	101f5be <_svfprintf_r+0xac6>
 101fdea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101fdec:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fdf0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fdf2:	781b      	ldrb	r3, [r3, #0]
 101fdf4:	e6ed      	b.n	101fbd2 <_svfprintf_r+0x10da>
 101fdf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101fdf8:	6812      	ldr	r2, [r2, #0]
 101fdfa:	9309      	str	r3, [sp, #36]	; 0x24
 101fdfc:	9b05      	ldr	r3, [sp, #20]
 101fdfe:	6013      	str	r3, [r2, #0]
 101fe00:	f7fe beba 	b.w	101eb78 <_svfprintf_r+0x80>
 101fe04:	01067e50 	.word	0x01067e50
 101fe08:	9b03      	ldr	r3, [sp, #12]
 101fe0a:	2200      	movs	r2, #0
 101fe0c:	f8cd 901c 	str.w	r9, [sp, #28]
 101fe10:	ae54      	add	r6, sp, #336	; 0x150
 101fe12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 101fe16:	970c      	str	r7, [sp, #48]	; 0x30
 101fe18:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 101fe1c:	4691      	mov	r9, r2
 101fe1e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 101fe22:	461f      	mov	r7, r3
 101fe24:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 101fe28:	e008      	b.n	101fe3c <_svfprintf_r+0x1344>
 101fe2a:	f7fb fdcd 	bl	101b9c8 <__aeabi_uldivmod>
 101fe2e:	2d00      	cmp	r5, #0
 101fe30:	bf08      	it	eq
 101fe32:	2c0a      	cmpeq	r4, #10
 101fe34:	d329      	bcc.n	101fe8a <_svfprintf_r+0x1392>
 101fe36:	4604      	mov	r4, r0
 101fe38:	4656      	mov	r6, sl
 101fe3a:	460d      	mov	r5, r1
 101fe3c:	220a      	movs	r2, #10
 101fe3e:	2300      	movs	r3, #0
 101fe40:	4620      	mov	r0, r4
 101fe42:	4629      	mov	r1, r5
 101fe44:	f7fb fdc0 	bl	101b9c8 <__aeabi_uldivmod>
 101fe48:	f109 0901 	add.w	r9, r9, #1
 101fe4c:	4620      	mov	r0, r4
 101fe4e:	4629      	mov	r1, r5
 101fe50:	f106 3aff 	add.w	sl, r6, #4294967295
 101fe54:	2300      	movs	r3, #0
 101fe56:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 101fe5a:	220a      	movs	r2, #10
 101fe5c:	f806 cc01 	strb.w	ip, [r6, #-1]
 101fe60:	2f00      	cmp	r7, #0
 101fe62:	d0e2      	beq.n	101fe2a <_svfprintf_r+0x1332>
 101fe64:	f898 6000 	ldrb.w	r6, [r8]
 101fe68:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 101fe6c:	bf18      	it	ne
 101fe6e:	f04f 0c01 	movne.w	ip, #1
 101fe72:	454e      	cmp	r6, r9
 101fe74:	bf18      	it	ne
 101fe76:	f04f 0c00 	movne.w	ip, #0
 101fe7a:	f1bc 0f00 	cmp.w	ip, #0
 101fe7e:	d0d4      	beq.n	101fe2a <_svfprintf_r+0x1332>
 101fe80:	429d      	cmp	r5, r3
 101fe82:	bf08      	it	eq
 101fe84:	4294      	cmpeq	r4, r2
 101fe86:	f080 8285 	bcs.w	1020394 <_svfprintf_r+0x189c>
 101fe8a:	4652      	mov	r2, sl
 101fe8c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 101fe90:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 101fe94:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 101fe98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 101fe9c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 101fea0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 101fea4:	9e03      	ldr	r6, [sp, #12]
 101fea6:	f7ff bb7d 	b.w	101f5a4 <_svfprintf_r+0xaac>
 101feaa:	f103 0108 	add.w	r1, r3, #8
 101feae:	4660      	mov	r0, ip
 101feb0:	4db8      	ldr	r5, [pc, #736]	; (1020194 <_svfprintf_r+0x169c>)
 101feb2:	2807      	cmp	r0, #7
 101feb4:	4422      	add	r2, r4
 101feb6:	605c      	str	r4, [r3, #4]
 101feb8:	922a      	str	r2, [sp, #168]	; 0xa8
 101feba:	601d      	str	r5, [r3, #0]
 101febc:	9029      	str	r0, [sp, #164]	; 0xa4
 101febe:	f73f aea9 	bgt.w	101fc14 <_svfprintf_r+0x111c>
 101fec2:	3001      	adds	r0, #1
 101fec4:	f101 0908 	add.w	r9, r1, #8
 101fec8:	460b      	mov	r3, r1
 101feca:	f7ff bbca 	b.w	101f662 <_svfprintf_r+0xb6a>
 101fece:	05b5      	lsls	r5, r6, #22
 101fed0:	f04f 0301 	mov.w	r3, #1
 101fed4:	bf48      	it	mi
 101fed6:	b2e4      	uxtbmi	r4, r4
 101fed8:	2500      	movs	r5, #0
 101feda:	f7fe bf3e 	b.w	101ed5a <_svfprintf_r+0x262>
 101fede:	05b5      	lsls	r5, r6, #22
 101fee0:	bf45      	ittet	mi
 101fee2:	9209      	strmi	r2, [sp, #36]	; 0x24
 101fee4:	b2e4      	uxtbmi	r4, r4
 101fee6:	9209      	strpl	r2, [sp, #36]	; 0x24
 101fee8:	4633      	movmi	r3, r6
 101feea:	bf4e      	itee	mi
 101feec:	2500      	movmi	r5, #0
 101feee:	2500      	movpl	r5, #0
 101fef0:	4633      	movpl	r3, r6
 101fef2:	f7ff b96a 	b.w	101f1ca <_svfprintf_r+0x6d2>
 101fef6:	9b04      	ldr	r3, [sp, #16]
 101fef8:	1c5a      	adds	r2, r3, #1
 101fefa:	f000 816a 	beq.w	10201d2 <_svfprintf_r+0x16da>
 101fefe:	2b00      	cmp	r3, #0
 101ff00:	bf08      	it	eq
 101ff02:	2c47      	cmpeq	r4, #71	; 0x47
 101ff04:	f040 8167 	bne.w	10201d6 <_svfprintf_r+0x16de>
 101ff08:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 101ff0c:	930d      	str	r3, [sp, #52]	; 0x34
 101ff0e:	ee18 3a90 	vmov	r3, s17
 101ff12:	2b00      	cmp	r3, #0
 101ff14:	f04f 0301 	mov.w	r3, #1
 101ff18:	9304      	str	r3, [sp, #16]
 101ff1a:	f2c0 8311 	blt.w	1020540 <_svfprintf_r+0x1a48>
 101ff1e:	eeb0 cb48 	vmov.f64	d12, d8
 101ff22:	461d      	mov	r5, r3
 101ff24:	2300      	movs	r3, #0
 101ff26:	930c      	str	r3, [sp, #48]	; 0x30
 101ff28:	ab26      	add	r3, sp, #152	; 0x98
 101ff2a:	aa21      	add	r2, sp, #132	; 0x84
 101ff2c:	9301      	str	r3, [sp, #4]
 101ff2e:	2102      	movs	r1, #2
 101ff30:	9200      	str	r2, [sp, #0]
 101ff32:	ab1f      	add	r3, sp, #124	; 0x7c
 101ff34:	462a      	mov	r2, r5
 101ff36:	eeb0 0b4c 	vmov.f64	d0, d12
 101ff3a:	4650      	mov	r0, sl
 101ff3c:	f002 fce8 	bl	1022910 <_dtoa_r>
 101ff40:	2c47      	cmp	r4, #71	; 0x47
 101ff42:	900b      	str	r0, [sp, #44]	; 0x2c
 101ff44:	f040 8177 	bne.w	1020236 <_svfprintf_r+0x173e>
 101ff48:	07f3      	lsls	r3, r6, #31
 101ff4a:	f100 8174 	bmi.w	1020236 <_svfprintf_r+0x173e>
 101ff4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 101ff50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101ff52:	2c47      	cmp	r4, #71	; 0x47
 101ff54:	eba3 0302 	sub.w	r3, r3, r2
 101ff58:	9312      	str	r3, [sp, #72]	; 0x48
 101ff5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101ff5c:	9310      	str	r3, [sp, #64]	; 0x40
 101ff5e:	f040 81b1 	bne.w	10202c4 <_svfprintf_r+0x17cc>
 101ff62:	9a04      	ldr	r2, [sp, #16]
 101ff64:	f113 0f03 	cmn.w	r3, #3
 101ff68:	bfa8      	it	ge
 101ff6a:	429a      	cmpge	r2, r3
 101ff6c:	f280 8185 	bge.w	102027a <_svfprintf_r+0x1782>
 101ff70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101ff72:	2200      	movs	r2, #0
 101ff74:	920a      	str	r2, [sp, #40]	; 0x28
 101ff76:	3b02      	subs	r3, #2
 101ff78:	930e      	str	r3, [sp, #56]	; 0x38
 101ff7a:	f023 0420 	bic.w	r4, r3, #32
 101ff7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101ff80:	2c41      	cmp	r4, #65	; 0x41
 101ff82:	f103 32ff 	add.w	r2, r3, #4294967295
 101ff86:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 101ff8a:	921f      	str	r2, [sp, #124]	; 0x7c
 101ff8c:	bf04      	itt	eq
 101ff8e:	330f      	addeq	r3, #15
 101ff90:	b2db      	uxtbeq	r3, r3
 101ff92:	2a00      	cmp	r2, #0
 101ff94:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 101ff98:	bfb7      	itett	lt
 101ff9a:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 101ff9c:	232b      	movge	r3, #43	; 0x2b
 101ff9e:	f1c3 0201 	rsblt	r2, r3, #1
 101ffa2:	232d      	movlt	r3, #45	; 0x2d
 101ffa4:	2a09      	cmp	r2, #9
 101ffa6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 101ffaa:	f340 82d5 	ble.w	1020558 <_svfprintf_r+0x1a60>
 101ffae:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 101ffb2:	f246 6567 	movw	r5, #26215	; 0x6667
 101ffb6:	f04f 0e0a 	mov.w	lr, #10
 101ffba:	f2c6 6566 	movt	r5, #26214	; 0x6666
 101ffbe:	4664      	mov	r4, ip
 101ffc0:	e000      	b.n	101ffc4 <_svfprintf_r+0x14cc>
 101ffc2:	460c      	mov	r4, r1
 101ffc4:	fb85 3002 	smull	r3, r0, r5, r2
 101ffc8:	17d3      	asrs	r3, r2, #31
 101ffca:	2a63      	cmp	r2, #99	; 0x63
 101ffcc:	f104 31ff 	add.w	r1, r4, #4294967295
 101ffd0:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 101ffd4:	fb0e 2013 	mls	r0, lr, r3, r2
 101ffd8:	461a      	mov	r2, r3
 101ffda:	f100 0030 	add.w	r0, r0, #48	; 0x30
 101ffde:	f804 0c01 	strb.w	r0, [r4, #-1]
 101ffe2:	dcee      	bgt.n	101ffc2 <_svfprintf_r+0x14ca>
 101ffe4:	1ea2      	subs	r2, r4, #2
 101ffe6:	3330      	adds	r3, #48	; 0x30
 101ffe8:	4594      	cmp	ip, r2
 101ffea:	b2db      	uxtb	r3, r3
 101ffec:	f801 3c01 	strb.w	r3, [r1, #-1]
 101fff0:	f240 831f 	bls.w	1020632 <_svfprintf_r+0x1b3a>
 101fff4:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 101fff8:	e001      	b.n	101fffe <_svfprintf_r+0x1506>
 101fffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 101fffe:	458c      	cmp	ip, r1
 1020000:	f802 3b01 	strb.w	r3, [r2], #1
 1020004:	d1f9      	bne.n	101fffa <_svfprintf_r+0x1502>
 1020006:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 102000a:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 102000e:	1b1b      	subs	r3, r3, r4
 1020010:	aa22      	add	r2, sp, #136	; 0x88
 1020012:	440b      	add	r3, r1
 1020014:	1a9b      	subs	r3, r3, r2
 1020016:	9318      	str	r3, [sp, #96]	; 0x60
 1020018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 102001a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 102001c:	2b01      	cmp	r3, #1
 102001e:	441a      	add	r2, r3
 1020020:	9207      	str	r2, [sp, #28]
 1020022:	f340 82be 	ble.w	10205a2 <_svfprintf_r+0x1aaa>
 1020026:	9b07      	ldr	r3, [sp, #28]
 1020028:	9a16      	ldr	r2, [sp, #88]	; 0x58
 102002a:	4413      	add	r3, r2
 102002c:	9307      	str	r3, [sp, #28]
 102002e:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 1020032:	2200      	movs	r2, #0
 1020034:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 1020038:	9b07      	ldr	r3, [sp, #28]
 102003a:	9213      	str	r2, [sp, #76]	; 0x4c
 102003c:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 1020040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1020044:	9303      	str	r3, [sp, #12]
 1020046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1020048:	2b00      	cmp	r3, #0
 102004a:	f040 8134 	bne.w	10202b6 <_svfprintf_r+0x17be>
 102004e:	9304      	str	r3, [sp, #16]
 1020050:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1020054:	f7fe beb5 	b.w	101edc2 <_svfprintf_r+0x2ca>
 1020058:	4634      	mov	r4, r6
 102005a:	9e04      	ldr	r6, [sp, #16]
 102005c:	460b      	mov	r3, r1
 102005e:	3301      	adds	r3, #1
 1020060:	494c      	ldr	r1, [pc, #304]	; (1020194 <_svfprintf_r+0x169c>)
 1020062:	2b07      	cmp	r3, #7
 1020064:	4422      	add	r2, r4
 1020066:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 102006a:	e9c9 1400 	strd	r1, r4, [r9]
 102006e:	bfd8      	it	le
 1020070:	f109 0908 	addle.w	r9, r9, #8
 1020074:	f77f ab8d 	ble.w	101f792 <_svfprintf_r+0xc9a>
 1020078:	aa28      	add	r2, sp, #160	; 0xa0
 102007a:	9908      	ldr	r1, [sp, #32]
 102007c:	4650      	mov	r0, sl
 102007e:	f005 f8fb 	bl	1025278 <__ssprint_r>
 1020082:	2800      	cmp	r0, #0
 1020084:	f47f aa9b 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020088:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102008a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102008e:	f7ff bb80 	b.w	101f792 <_svfprintf_r+0xc9a>
 1020092:	2300      	movs	r3, #0
 1020094:	aa26      	add	r2, sp, #152	; 0x98
 1020096:	4619      	mov	r1, r3
 1020098:	9200      	str	r2, [sp, #0]
 102009a:	4650      	mov	r0, sl
 102009c:	aa21      	add	r2, sp, #132	; 0x84
 102009e:	f002 f983 	bl	10223a8 <_wcsrtombs_r>
 10200a2:	1c43      	adds	r3, r0, #1
 10200a4:	9007      	str	r0, [sp, #28]
 10200a6:	f000 81ef 	beq.w	1020488 <_svfprintf_r+0x1990>
 10200aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10200ac:	9321      	str	r3, [sp, #132]	; 0x84
 10200ae:	9b07      	ldr	r3, [sp, #28]
 10200b0:	2b00      	cmp	r3, #0
 10200b2:	d03b      	beq.n	102012c <_svfprintf_r+0x1634>
 10200b4:	2b63      	cmp	r3, #99	; 0x63
 10200b6:	f340 8087 	ble.w	10201c8 <_svfprintf_r+0x16d0>
 10200ba:	1c59      	adds	r1, r3, #1
 10200bc:	4650      	mov	r0, sl
 10200be:	f7fc fb8b 	bl	101c7d8 <_malloc_r>
 10200c2:	900b      	str	r0, [sp, #44]	; 0x2c
 10200c4:	2800      	cmp	r0, #0
 10200c6:	f000 81df 	beq.w	1020488 <_svfprintf_r+0x1990>
 10200ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10200cc:	930a      	str	r3, [sp, #40]	; 0x28
 10200ce:	2208      	movs	r2, #8
 10200d0:	2100      	movs	r1, #0
 10200d2:	a826      	add	r0, sp, #152	; 0x98
 10200d4:	f7fd fbec 	bl	101d8b0 <memset>
 10200d8:	9c07      	ldr	r4, [sp, #28]
 10200da:	ab26      	add	r3, sp, #152	; 0x98
 10200dc:	aa21      	add	r2, sp, #132	; 0x84
 10200de:	9300      	str	r3, [sp, #0]
 10200e0:	4650      	mov	r0, sl
 10200e2:	4623      	mov	r3, r4
 10200e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10200e6:	f002 f95f 	bl	10223a8 <_wcsrtombs_r>
 10200ea:	4284      	cmp	r4, r0
 10200ec:	f040 8287 	bne.w	10205fe <_svfprintf_r+0x1b06>
 10200f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 10200f2:	2300      	movs	r3, #0
 10200f4:	9509      	str	r5, [sp, #36]	; 0x24
 10200f6:	9304      	str	r3, [sp, #16]
 10200f8:	4614      	mov	r4, r2
 10200fa:	9a07      	ldr	r2, [sp, #28]
 10200fc:	9313      	str	r3, [sp, #76]	; 0x4c
 10200fe:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1020102:	54a3      	strb	r3, [r4, r2]
 1020104:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1020108:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 102010c:	9303      	str	r3, [sp, #12]
 102010e:	f7fe be58 	b.w	101edc2 <_svfprintf_r+0x2ca>
 1020112:	aa28      	add	r2, sp, #160	; 0xa0
 1020114:	9908      	ldr	r1, [sp, #32]
 1020116:	4650      	mov	r0, sl
 1020118:	f005 f8ae 	bl	1025278 <__ssprint_r>
 102011c:	2800      	cmp	r0, #0
 102011e:	f47f aa4e 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020122:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1020124:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020128:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102012a:	e5c6      	b.n	101fcba <_svfprintf_r+0x11c2>
 102012c:	9b07      	ldr	r3, [sp, #28]
 102012e:	9509      	str	r5, [sp, #36]	; 0x24
 1020130:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1020134:	e9cd 3303 	strd	r3, r3, [sp, #12]
 1020138:	9313      	str	r3, [sp, #76]	; 0x4c
 102013a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 102013e:	930a      	str	r3, [sp, #40]	; 0x28
 1020140:	f7fe be3f 	b.w	101edc2 <_svfprintf_r+0x2ca>
 1020144:	aa28      	add	r2, sp, #160	; 0xa0
 1020146:	9908      	ldr	r1, [sp, #32]
 1020148:	4650      	mov	r0, sl
 102014a:	f005 f895 	bl	1025278 <__ssprint_r>
 102014e:	2800      	cmp	r0, #0
 1020150:	f47f aa35 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020154:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020156:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102015a:	f7ff bb12 	b.w	101f782 <_svfprintf_r+0xc8a>
 102015e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1020160:	4619      	mov	r1, r3
 1020162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1020164:	4419      	add	r1, r3
 1020166:	1b1b      	subs	r3, r3, r4
 1020168:	1b4c      	subs	r4, r1, r5
 102016a:	429c      	cmp	r4, r3
 102016c:	bfa8      	it	ge
 102016e:	461c      	movge	r4, r3
 1020170:	f7ff bb48 	b.w	101f804 <_svfprintf_r+0xd0c>
 1020174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020176:	9309      	str	r3, [sp, #36]	; 0x24
 1020178:	9b05      	ldr	r3, [sp, #20]
 102017a:	6812      	ldr	r2, [r2, #0]
 102017c:	8013      	strh	r3, [r2, #0]
 102017e:	f7fe bcfb 	b.w	101eb78 <_svfprintf_r+0x80>
 1020182:	681c      	ldr	r4, [r3, #0]
 1020184:	9209      	str	r2, [sp, #36]	; 0x24
 1020186:	9603      	str	r6, [sp, #12]
 1020188:	17e5      	asrs	r5, r4, #31
 102018a:	4622      	mov	r2, r4
 102018c:	462b      	mov	r3, r5
 102018e:	f7fe bf76 	b.w	101f07e <_svfprintf_r+0x586>
 1020192:	bf00      	nop
 1020194:	01067e50 	.word	0x01067e50
 1020198:	9c10      	ldr	r4, [sp, #64]	; 0x40
 102019a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 102019c:	9404      	str	r4, [sp, #16]
 102019e:	f7fe faaf 	bl	101e700 <strlen>
 10201a2:	9509      	str	r5, [sp, #36]	; 0x24
 10201a4:	9413      	str	r4, [sp, #76]	; 0x4c
 10201a6:	9411      	str	r4, [sp, #68]	; 0x44
 10201a8:	940a      	str	r4, [sp, #40]	; 0x28
 10201aa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 10201ae:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 10201b2:	9007      	str	r0, [sp, #28]
 10201b4:	9303      	str	r3, [sp, #12]
 10201b6:	f7fe be04 	b.w	101edc2 <_svfprintf_r+0x2ca>
 10201ba:	4650      	mov	r0, sl
 10201bc:	aa28      	add	r2, sp, #160	; 0xa0
 10201be:	9908      	ldr	r1, [sp, #32]
 10201c0:	f005 f85a 	bl	1025278 <__ssprint_r>
 10201c4:	f7fe bd8c 	b.w	101ece0 <_svfprintf_r+0x1e8>
 10201c8:	2300      	movs	r3, #0
 10201ca:	930a      	str	r3, [sp, #40]	; 0x28
 10201cc:	ab3b      	add	r3, sp, #236	; 0xec
 10201ce:	930b      	str	r3, [sp, #44]	; 0x2c
 10201d0:	e77d      	b.n	10200ce <_svfprintf_r+0x15d6>
 10201d2:	2306      	movs	r3, #6
 10201d4:	9304      	str	r3, [sp, #16]
 10201d6:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 10201da:	930d      	str	r3, [sp, #52]	; 0x34
 10201dc:	ee18 3a90 	vmov	r3, s17
 10201e0:	2b00      	cmp	r3, #0
 10201e2:	f2c0 81ad 	blt.w	1020540 <_svfprintf_r+0x1a48>
 10201e6:	eeb0 cb48 	vmov.f64	d12, d8
 10201ea:	2300      	movs	r3, #0
 10201ec:	930c      	str	r3, [sp, #48]	; 0x30
 10201ee:	2c46      	cmp	r4, #70	; 0x46
 10201f0:	f040 80f9 	bne.w	10203e6 <_svfprintf_r+0x18ee>
 10201f4:	ab26      	add	r3, sp, #152	; 0x98
 10201f6:	aa21      	add	r2, sp, #132	; 0x84
 10201f8:	9301      	str	r3, [sp, #4]
 10201fa:	2103      	movs	r1, #3
 10201fc:	ab1f      	add	r3, sp, #124	; 0x7c
 10201fe:	9200      	str	r2, [sp, #0]
 1020200:	eeb0 0b4c 	vmov.f64	d0, d12
 1020204:	9a04      	ldr	r2, [sp, #16]
 1020206:	4650      	mov	r0, sl
 1020208:	f002 fb82 	bl	1022910 <_dtoa_r>
 102020c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 102020e:	eeb5 cb40 	vcmp.f64	d12, #0.0
 1020212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1020216:	7802      	ldrb	r2, [r0, #0]
 1020218:	4603      	mov	r3, r0
 102021a:	bf14      	ite	ne
 102021c:	2301      	movne	r3, #1
 102021e:	2300      	moveq	r3, #0
 1020220:	2a30      	cmp	r2, #48	; 0x30
 1020222:	bf14      	ite	ne
 1020224:	2300      	movne	r3, #0
 1020226:	f003 0301 	andeq.w	r3, r3, #1
 102022a:	900b      	str	r0, [sp, #44]	; 0x2c
 102022c:	2b00      	cmp	r3, #0
 102022e:	f040 81db 	bne.w	10205e8 <_svfprintf_r+0x1af0>
 1020232:	9b04      	ldr	r3, [sp, #16]
 1020234:	441d      	add	r5, r3
 1020236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1020238:	eeb5 cb40 	vcmp.f64	d12, #0.0
 102023c:	441d      	add	r5, r3
 102023e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1020242:	bf08      	it	eq
 1020244:	462b      	moveq	r3, r5
 1020246:	f43f ae83 	beq.w	101ff50 <_svfprintf_r+0x1458>
 102024a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 102024c:	42ab      	cmp	r3, r5
 102024e:	f4bf ae7f 	bcs.w	101ff50 <_svfprintf_r+0x1458>
 1020252:	2130      	movs	r1, #48	; 0x30
 1020254:	1c5a      	adds	r2, r3, #1
 1020256:	9226      	str	r2, [sp, #152]	; 0x98
 1020258:	7019      	strb	r1, [r3, #0]
 102025a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 102025c:	429d      	cmp	r5, r3
 102025e:	d8f9      	bhi.n	1020254 <_svfprintf_r+0x175c>
 1020260:	e676      	b.n	101ff50 <_svfprintf_r+0x1458>
 1020262:	1c59      	adds	r1, r3, #1
 1020264:	4650      	mov	r0, sl
 1020266:	f7fc fab7 	bl	101c7d8 <_malloc_r>
 102026a:	900b      	str	r0, [sp, #44]	; 0x2c
 102026c:	2800      	cmp	r0, #0
 102026e:	f000 810b 	beq.w	1020488 <_svfprintf_r+0x1990>
 1020272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1020274:	930a      	str	r3, [sp, #40]	; 0x28
 1020276:	f7ff bb6a 	b.w	101f94e <_svfprintf_r+0xe56>
 102027a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 102027c:	4619      	mov	r1, r3
 102027e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1020280:	4299      	cmp	r1, r3
 1020282:	f300 809c 	bgt.w	10203be <_svfprintf_r+0x18c6>
 1020286:	07f5      	lsls	r5, r6, #31
 1020288:	f140 814c 	bpl.w	1020524 <_svfprintf_r+0x1a2c>
 102028c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 102028e:	4413      	add	r3, r2
 1020290:	9307      	str	r3, [sp, #28]
 1020292:	0574      	lsls	r4, r6, #21
 1020294:	d503      	bpl.n	102029e <_svfprintf_r+0x17a6>
 1020296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1020298:	2b00      	cmp	r3, #0
 102029a:	f300 8118 	bgt.w	10204ce <_svfprintf_r+0x19d6>
 102029e:	9b07      	ldr	r3, [sp, #28]
 10202a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10202a4:	9303      	str	r3, [sp, #12]
 10202a6:	2367      	movs	r3, #103	; 0x67
 10202a8:	930e      	str	r3, [sp, #56]	; 0x38
 10202aa:	2300      	movs	r3, #0
 10202ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 10202ae:	930a      	str	r3, [sp, #40]	; 0x28
 10202b0:	9313      	str	r3, [sp, #76]	; 0x4c
 10202b2:	9311      	str	r3, [sp, #68]	; 0x44
 10202b4:	e6c7      	b.n	1020046 <_svfprintf_r+0x154e>
 10202b6:	212d      	movs	r1, #45	; 0x2d
 10202b8:	2300      	movs	r3, #0
 10202ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 10202be:	9304      	str	r3, [sp, #16]
 10202c0:	f7fe bd80 	b.w	101edc4 <_svfprintf_r+0x2cc>
 10202c4:	2c46      	cmp	r4, #70	; 0x46
 10202c6:	f040 81b1 	bne.w	102062c <_svfprintf_r+0x1b34>
 10202ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 10202cc:	f006 0301 	and.w	r3, r6, #1
 10202d0:	9a04      	ldr	r2, [sp, #16]
 10202d2:	2900      	cmp	r1, #0
 10202d4:	ea43 0302 	orr.w	r3, r3, r2
 10202d8:	f340 8167 	ble.w	10205aa <_svfprintf_r+0x1ab2>
 10202dc:	2b00      	cmp	r3, #0
 10202de:	f040 8134 	bne.w	102054a <_svfprintf_r+0x1a52>
 10202e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10202e4:	9307      	str	r3, [sp, #28]
 10202e6:	2366      	movs	r3, #102	; 0x66
 10202e8:	930e      	str	r3, [sp, #56]	; 0x38
 10202ea:	0572      	lsls	r2, r6, #21
 10202ec:	f100 80f1 	bmi.w	10204d2 <_svfprintf_r+0x19da>
 10202f0:	9b07      	ldr	r3, [sp, #28]
 10202f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10202f6:	9303      	str	r3, [sp, #12]
 10202f8:	e7d7      	b.n	10202aa <_svfprintf_r+0x17b2>
 10202fa:	aa28      	add	r2, sp, #160	; 0xa0
 10202fc:	4641      	mov	r1, r8
 10202fe:	4650      	mov	r0, sl
 1020300:	f004 ffba 	bl	1025278 <__ssprint_r>
 1020304:	2800      	cmp	r0, #0
 1020306:	f47f a95a 	bne.w	101f5be <_svfprintf_r+0xac6>
 102030a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 102030c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020310:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020312:	781b      	ldrb	r3, [r3, #0]
 1020314:	e463      	b.n	101fbde <_svfprintf_r+0x10e6>
 1020316:	aa28      	add	r2, sp, #160	; 0xa0
 1020318:	9908      	ldr	r1, [sp, #32]
 102031a:	4650      	mov	r0, sl
 102031c:	f004 ffac 	bl	1025278 <__ssprint_r>
 1020320:	2800      	cmp	r0, #0
 1020322:	f47f a94c 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020326:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1020328:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102032c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1020330:	e4d8      	b.n	101fce4 <_svfprintf_r+0x11ec>
 1020332:	07f0      	lsls	r0, r6, #31
 1020334:	f57e ad9d 	bpl.w	101ee72 <_svfprintf_r+0x37a>
 1020338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 102033a:	9916      	ldr	r1, [sp, #88]	; 0x58
 102033c:	3301      	adds	r3, #1
 102033e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 1020340:	2b07      	cmp	r3, #7
 1020342:	440a      	add	r2, r1
 1020344:	f8c9 1004 	str.w	r1, [r9, #4]
 1020348:	f8c9 0000 	str.w	r0, [r9]
 102034c:	922a      	str	r2, [sp, #168]	; 0xa8
 102034e:	9329      	str	r3, [sp, #164]	; 0xa4
 1020350:	dce1      	bgt.n	1020316 <_svfprintf_r+0x181e>
 1020352:	f109 0908 	add.w	r9, r9, #8
 1020356:	e4c8      	b.n	101fcea <_svfprintf_r+0x11f2>
 1020358:	aa28      	add	r2, sp, #160	; 0xa0
 102035a:	9908      	ldr	r1, [sp, #32]
 102035c:	4650      	mov	r0, sl
 102035e:	f004 ff8b 	bl	1025278 <__ssprint_r>
 1020362:	2800      	cmp	r0, #0
 1020364:	f47f a92b 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020368:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 102036a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102036e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020370:	f7ff ba2e 	b.w	101f7d0 <_svfprintf_r+0xcd8>
 1020374:	aa28      	add	r2, sp, #160	; 0xa0
 1020376:	9908      	ldr	r1, [sp, #32]
 1020378:	4650      	mov	r0, sl
 102037a:	f004 ff7d 	bl	1025278 <__ssprint_r>
 102037e:	2800      	cmp	r0, #0
 1020380:	f47f a91d 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020384:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1020386:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102038a:	9912      	ldr	r1, [sp, #72]	; 0x48
 102038c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102038e:	1acb      	subs	r3, r1, r3
 1020390:	f7ff ba38 	b.w	101f804 <_svfprintf_r+0xd0c>
 1020394:	9a19      	ldr	r2, [sp, #100]	; 0x64
 1020396:	991a      	ldr	r1, [sp, #104]	; 0x68
 1020398:	ebaa 0a02 	sub.w	sl, sl, r2
 102039c:	4650      	mov	r0, sl
 102039e:	f7fe fa9d 	bl	101e8dc <strncpy>
 10203a2:	f898 3001 	ldrb.w	r3, [r8, #1]
 10203a6:	b10b      	cbz	r3, 10203ac <_svfprintf_r+0x18b4>
 10203a8:	f108 0801 	add.w	r8, r8, #1
 10203ac:	4620      	mov	r0, r4
 10203ae:	4629      	mov	r1, r5
 10203b0:	220a      	movs	r2, #10
 10203b2:	2300      	movs	r3, #0
 10203b4:	f7fb fb08 	bl	101b9c8 <__aeabi_uldivmod>
 10203b8:	f04f 0900 	mov.w	r9, #0
 10203bc:	e53b      	b.n	101fe36 <_svfprintf_r+0x133e>
 10203be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10203c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 10203c2:	189a      	adds	r2, r3, r2
 10203c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10203c6:	9207      	str	r2, [sp, #28]
 10203c8:	2b00      	cmp	r3, #0
 10203ca:	bfc4      	itt	gt
 10203cc:	2367      	movgt	r3, #103	; 0x67
 10203ce:	930e      	strgt	r3, [sp, #56]	; 0x38
 10203d0:	dc8b      	bgt.n	10202ea <_svfprintf_r+0x17f2>
 10203d2:	f1c3 0301 	rsb	r3, r3, #1
 10203d6:	2167      	movs	r1, #103	; 0x67
 10203d8:	441a      	add	r2, r3
 10203da:	910e      	str	r1, [sp, #56]	; 0x38
 10203dc:	9207      	str	r2, [sp, #28]
 10203de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 10203e2:	9303      	str	r3, [sp, #12]
 10203e4:	e761      	b.n	10202aa <_svfprintf_r+0x17b2>
 10203e6:	2c45      	cmp	r4, #69	; 0x45
 10203e8:	f040 8110 	bne.w	102060c <_svfprintf_r+0x1b14>
 10203ec:	9b04      	ldr	r3, [sp, #16]
 10203ee:	aa26      	add	r2, sp, #152	; 0x98
 10203f0:	2102      	movs	r1, #2
 10203f2:	9201      	str	r2, [sp, #4]
 10203f4:	1c5d      	adds	r5, r3, #1
 10203f6:	eeb0 0b4c 	vmov.f64	d0, d12
 10203fa:	ab21      	add	r3, sp, #132	; 0x84
 10203fc:	4650      	mov	r0, sl
 10203fe:	9300      	str	r3, [sp, #0]
 1020400:	462a      	mov	r2, r5
 1020402:	ab1f      	add	r3, sp, #124	; 0x7c
 1020404:	f002 fa84 	bl	1022910 <_dtoa_r>
 1020408:	900b      	str	r0, [sp, #44]	; 0x2c
 102040a:	e714      	b.n	1020236 <_svfprintf_r+0x173e>
 102040c:	2300      	movs	r3, #0
 102040e:	eeb0 0b48 	vmov.f64	d0, d8
 1020412:	930c      	str	r3, [sp, #48]	; 0x30
 1020414:	f7ff baa4 	b.w	101f960 <_svfprintf_r+0xe68>
 1020418:	424c      	negs	r4, r1
 102041a:	3110      	adds	r1, #16
 102041c:	da1d      	bge.n	102045a <_svfprintf_r+0x1962>
 102041e:	2510      	movs	r5, #16
 1020420:	e002      	b.n	1020428 <_svfprintf_r+0x1930>
 1020422:	3c10      	subs	r4, #16
 1020424:	2c10      	cmp	r4, #16
 1020426:	dd18      	ble.n	102045a <_svfprintf_r+0x1962>
 1020428:	3301      	adds	r3, #1
 102042a:	4985      	ldr	r1, [pc, #532]	; (1020640 <_svfprintf_r+0x1b48>)
 102042c:	2b07      	cmp	r3, #7
 102042e:	f102 0210 	add.w	r2, r2, #16
 1020432:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1020436:	e9c9 1500 	strd	r1, r5, [r9]
 102043a:	f109 0908 	add.w	r9, r9, #8
 102043e:	ddf0      	ble.n	1020422 <_svfprintf_r+0x192a>
 1020440:	aa28      	add	r2, sp, #160	; 0xa0
 1020442:	9908      	ldr	r1, [sp, #32]
 1020444:	4650      	mov	r0, sl
 1020446:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102044a:	f004 ff15 	bl	1025278 <__ssprint_r>
 102044e:	2800      	cmp	r0, #0
 1020450:	f47f a8b5 	bne.w	101f5be <_svfprintf_r+0xac6>
 1020454:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1020458:	e7e3      	b.n	1020422 <_svfprintf_r+0x192a>
 102045a:	3301      	adds	r3, #1
 102045c:	4978      	ldr	r1, [pc, #480]	; (1020640 <_svfprintf_r+0x1b48>)
 102045e:	2b07      	cmp	r3, #7
 1020460:	4422      	add	r2, r4
 1020462:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1020466:	e9c9 1400 	strd	r1, r4, [r9]
 102046a:	f77f af72 	ble.w	1020352 <_svfprintf_r+0x185a>
 102046e:	aa28      	add	r2, sp, #160	; 0xa0
 1020470:	9908      	ldr	r1, [sp, #32]
 1020472:	4650      	mov	r0, sl
 1020474:	f004 ff00 	bl	1025278 <__ssprint_r>
 1020478:	2800      	cmp	r0, #0
 102047a:	f47f a8a0 	bne.w	101f5be <_svfprintf_r+0xac6>
 102047e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020480:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020484:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1020486:	e430      	b.n	101fcea <_svfprintf_r+0x11f2>
 1020488:	9a08      	ldr	r2, [sp, #32]
 102048a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 102048e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1020492:	8193      	strh	r3, [r2, #12]
 1020494:	f7fe bc27 	b.w	101ece6 <_svfprintf_r+0x1ee>
 1020498:	9526      	str	r5, [sp, #152]	; 0x98
 102049a:	4619      	mov	r1, r3
 102049c:	7bc5      	ldrb	r5, [r0, #15]
 102049e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 10204a2:	4295      	cmp	r5, r2
 10204a4:	d10a      	bne.n	10204bc <_svfprintf_r+0x19c4>
 10204a6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 10204aa:	f801 cc01 	strb.w	ip, [r1, #-1]
 10204ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 10204b0:	1e4a      	subs	r2, r1, #1
 10204b2:	9226      	str	r2, [sp, #152]	; 0x98
 10204b4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 10204b8:	4295      	cmp	r5, r2
 10204ba:	d0f6      	beq.n	10204aa <_svfprintf_r+0x19b2>
 10204bc:	2a39      	cmp	r2, #57	; 0x39
 10204be:	bf16      	itet	ne
 10204c0:	3201      	addne	r2, #1
 10204c2:	7a82      	ldrbeq	r2, [r0, #10]
 10204c4:	b2d2      	uxtbne	r2, r2
 10204c6:	f801 2c01 	strb.w	r2, [r1, #-1]
 10204ca:	f7ff ba9a 	b.w	101fa02 <_svfprintf_r+0xf0a>
 10204ce:	2367      	movs	r3, #103	; 0x67
 10204d0:	930e      	str	r3, [sp, #56]	; 0x38
 10204d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 10204d4:	2200      	movs	r2, #0
 10204d6:	9213      	str	r2, [sp, #76]	; 0x4c
 10204d8:	9211      	str	r2, [sp, #68]	; 0x44
 10204da:	7803      	ldrb	r3, [r0, #0]
 10204dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 10204de:	2bff      	cmp	r3, #255	; 0xff
 10204e0:	d00b      	beq.n	10204fa <_svfprintf_r+0x1a02>
 10204e2:	4293      	cmp	r3, r2
 10204e4:	da09      	bge.n	10204fa <_svfprintf_r+0x1a02>
 10204e6:	7841      	ldrb	r1, [r0, #1]
 10204e8:	1ad2      	subs	r2, r2, r3
 10204ea:	b1b9      	cbz	r1, 102051c <_svfprintf_r+0x1a24>
 10204ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10204ee:	3001      	adds	r0, #1
 10204f0:	3301      	adds	r3, #1
 10204f2:	9311      	str	r3, [sp, #68]	; 0x44
 10204f4:	460b      	mov	r3, r1
 10204f6:	2bff      	cmp	r3, #255	; 0xff
 10204f8:	d1f3      	bne.n	10204e2 <_svfprintf_r+0x19ea>
 10204fa:	9210      	str	r2, [sp, #64]	; 0x40
 10204fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10204fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 1020500:	9907      	ldr	r1, [sp, #28]
 1020502:	4413      	add	r3, r2
 1020504:	2200      	movs	r2, #0
 1020506:	920a      	str	r2, [sp, #40]	; 0x28
 1020508:	9a19      	ldr	r2, [sp, #100]	; 0x64
 102050a:	9014      	str	r0, [sp, #80]	; 0x50
 102050c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 102050e:	fb02 1303 	mla	r3, r2, r3, r1
 1020512:	9307      	str	r3, [sp, #28]
 1020514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1020518:	9303      	str	r3, [sp, #12]
 102051a:	e594      	b.n	1020046 <_svfprintf_r+0x154e>
 102051c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 102051e:	3101      	adds	r1, #1
 1020520:	9113      	str	r1, [sp, #76]	; 0x4c
 1020522:	e7dc      	b.n	10204de <_svfprintf_r+0x19e6>
 1020524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1020526:	9307      	str	r3, [sp, #28]
 1020528:	e6b3      	b.n	1020292 <_svfprintf_r+0x179a>
 102052a:	9b04      	ldr	r3, [sp, #16]
 102052c:	9509      	str	r5, [sp, #36]	; 0x24
 102052e:	9004      	str	r0, [sp, #16]
 1020530:	9303      	str	r3, [sp, #12]
 1020532:	9307      	str	r3, [sp, #28]
 1020534:	9013      	str	r0, [sp, #76]	; 0x4c
 1020536:	9011      	str	r0, [sp, #68]	; 0x44
 1020538:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 102053c:	f7fe bc41 	b.w	101edc2 <_svfprintf_r+0x2ca>
 1020540:	232d      	movs	r3, #45	; 0x2d
 1020542:	eeb1 cb48 	vneg.f64	d12, d8
 1020546:	930c      	str	r3, [sp, #48]	; 0x30
 1020548:	e651      	b.n	10201ee <_svfprintf_r+0x16f6>
 102054a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 102054c:	18cb      	adds	r3, r1, r3
 102054e:	2166      	movs	r1, #102	; 0x66
 1020550:	441a      	add	r2, r3
 1020552:	910e      	str	r1, [sp, #56]	; 0x38
 1020554:	9207      	str	r2, [sp, #28]
 1020556:	e6c8      	b.n	10202ea <_svfprintf_r+0x17f2>
 1020558:	2c41      	cmp	r4, #65	; 0x41
 102055a:	a922      	add	r1, sp, #136	; 0x88
 102055c:	bf08      	it	eq
 102055e:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 1020562:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1020566:	bf1e      	ittt	ne
 1020568:	2330      	movne	r3, #48	; 0x30
 102056a:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 102056e:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 1020572:	f803 2b01 	strb.w	r2, [r3], #1
 1020576:	1a5b      	subs	r3, r3, r1
 1020578:	9318      	str	r3, [sp, #96]	; 0x60
 102057a:	e54d      	b.n	1020018 <_svfprintf_r+0x1520>
 102057c:	ee18 3a90 	vmov	r3, s17
 1020580:	f24c 1474 	movw	r4, #49524	; 0xc174
 1020584:	f2c0 1406 	movt	r4, #262	; 0x106
 1020588:	2b00      	cmp	r3, #0
 102058a:	f24c 1370 	movw	r3, #49520	; 0xc170
 102058e:	f2c0 1306 	movt	r3, #262	; 0x106
 1020592:	bfb6      	itet	lt
 1020594:	212d      	movlt	r1, #45	; 0x2d
 1020596:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 102059a:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 102059e:	f7fe bec2 	b.w	101f326 <_svfprintf_r+0x82e>
 10205a2:	07f3      	lsls	r3, r6, #31
 10205a4:	f57f ad43 	bpl.w	102002e <_svfprintf_r+0x1536>
 10205a8:	e53d      	b.n	1020026 <_svfprintf_r+0x152e>
 10205aa:	b92b      	cbnz	r3, 10205b8 <_svfprintf_r+0x1ac0>
 10205ac:	2301      	movs	r3, #1
 10205ae:	2266      	movs	r2, #102	; 0x66
 10205b0:	9303      	str	r3, [sp, #12]
 10205b2:	920e      	str	r2, [sp, #56]	; 0x38
 10205b4:	9307      	str	r3, [sp, #28]
 10205b6:	e678      	b.n	10202aa <_svfprintf_r+0x17b2>
 10205b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 10205ba:	2266      	movs	r2, #102	; 0x66
 10205bc:	920e      	str	r2, [sp, #56]	; 0x38
 10205be:	9a04      	ldr	r2, [sp, #16]
 10205c0:	3301      	adds	r3, #1
 10205c2:	441a      	add	r2, r3
 10205c4:	9207      	str	r2, [sp, #28]
 10205c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 10205ca:	9303      	str	r3, [sp, #12]
 10205cc:	e66d      	b.n	10202aa <_svfprintf_r+0x17b2>
 10205ce:	4649      	mov	r1, r9
 10205d0:	e46e      	b.n	101feb0 <_svfprintf_r+0x13b8>
 10205d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10205d4:	787b      	ldrb	r3, [r7, #1]
 10205d6:	460f      	mov	r7, r1
 10205d8:	f852 0b04 	ldr.w	r0, [r2], #4
 10205dc:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 10205e0:	9209      	str	r2, [sp, #36]	; 0x24
 10205e2:	9104      	str	r1, [sp, #16]
 10205e4:	f7fe baf3 	b.w	101ebce <_svfprintf_r+0xd6>
 10205e8:	9b04      	ldr	r3, [sp, #16]
 10205ea:	f1c3 0501 	rsb	r5, r3, #1
 10205ee:	951f      	str	r5, [sp, #124]	; 0x7c
 10205f0:	e61f      	b.n	1020232 <_svfprintf_r+0x173a>
 10205f2:	9603      	str	r6, [sp, #12]
 10205f4:	f7fe be0c 	b.w	101f210 <_svfprintf_r+0x718>
 10205f8:	9603      	str	r6, [sp, #12]
 10205fa:	f7fe bd94 	b.w	101f126 <_svfprintf_r+0x62e>
 10205fe:	9a08      	ldr	r2, [sp, #32]
 1020600:	8993      	ldrh	r3, [r2, #12]
 1020602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1020606:	8193      	strh	r3, [r2, #12]
 1020608:	f7fe bfd9 	b.w	101f5be <_svfprintf_r+0xac6>
 102060c:	9d04      	ldr	r5, [sp, #16]
 102060e:	e48b      	b.n	101ff28 <_svfprintf_r+0x1430>
 1020610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1020612:	9912      	ldr	r1, [sp, #72]	; 0x48
 1020614:	440b      	add	r3, r1
 1020616:	9304      	str	r3, [sp, #16]
 1020618:	f7ff baeb 	b.w	101fbf2 <_svfprintf_r+0x10fa>
 102061c:	230c      	movs	r3, #12
 102061e:	f04f 32ff 	mov.w	r2, #4294967295
 1020622:	f8ca 3000 	str.w	r3, [sl]
 1020626:	9205      	str	r2, [sp, #20]
 1020628:	f7fe bb64 	b.w	101ecf4 <_svfprintf_r+0x1fc>
 102062c:	2300      	movs	r3, #0
 102062e:	930a      	str	r3, [sp, #40]	; 0x28
 1020630:	e4a5      	b.n	101ff7e <_svfprintf_r+0x1486>
 1020632:	2302      	movs	r3, #2
 1020634:	9318      	str	r3, [sp, #96]	; 0x60
 1020636:	e4ef      	b.n	1020018 <_svfprintf_r+0x1520>
 1020638:	4633      	mov	r3, r6
 102063a:	f7fe bdb1 	b.w	101f1a0 <_svfprintf_r+0x6a8>
 102063e:	bf00      	nop
 1020640:	01067e50 	.word	0x01067e50
 1020644:	00000000 	.word	0x00000000

01020648 <_vfprintf_r>:
 1020648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102064c:	4615      	mov	r5, r2
 102064e:	ed2d 8b0a 	vpush	{d8-d12}
 1020652:	461c      	mov	r4, r3
 1020654:	4682      	mov	sl, r0
 1020656:	b0d5      	sub	sp, #340	; 0x154
 1020658:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 102065c:	9105      	str	r1, [sp, #20]
 102065e:	f003 fd5d 	bl	102411c <_localeconv_r>
 1020662:	9409      	str	r4, [sp, #36]	; 0x24
 1020664:	6803      	ldr	r3, [r0, #0]
 1020666:	4618      	mov	r0, r3
 1020668:	9317      	str	r3, [sp, #92]	; 0x5c
 102066a:	f7fe f849 	bl	101e700 <strlen>
 102066e:	2208      	movs	r2, #8
 1020670:	2100      	movs	r1, #0
 1020672:	9015      	str	r0, [sp, #84]	; 0x54
 1020674:	4658      	mov	r0, fp
 1020676:	f7fd f91b 	bl	101d8b0 <memset>
 102067a:	f1ba 0f00 	cmp.w	sl, #0
 102067e:	d004      	beq.n	102068a <_vfprintf_r+0x42>
 1020680:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 1020684:	2b00      	cmp	r3, #0
 1020686:	f000 8440 	beq.w	1020f0a <_vfprintf_r+0x8c2>
 102068a:	9905      	ldr	r1, [sp, #20]
 102068c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 1020690:	b293      	uxth	r3, r2
 1020692:	0498      	lsls	r0, r3, #18
 1020694:	d407      	bmi.n	10206a6 <_vfprintf_r+0x5e>
 1020696:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 102069a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 102069c:	818b      	strh	r3, [r1, #12]
 102069e:	b29b      	uxth	r3, r3
 10206a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 10206a4:	664a      	str	r2, [r1, #100]	; 0x64
 10206a6:	071a      	lsls	r2, r3, #28
 10206a8:	f140 80be 	bpl.w	1020828 <_vfprintf_r+0x1e0>
 10206ac:	9a05      	ldr	r2, [sp, #20]
 10206ae:	6912      	ldr	r2, [r2, #16]
 10206b0:	2a00      	cmp	r2, #0
 10206b2:	f000 80b9 	beq.w	1020828 <_vfprintf_r+0x1e0>
 10206b6:	f003 031a 	and.w	r3, r3, #26
 10206ba:	2b0a      	cmp	r3, #10
 10206bc:	f000 80c2 	beq.w	1020844 <_vfprintf_r+0x1fc>
 10206c0:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 10206c4:	f24c 68b8 	movw	r8, #50872	; 0xc6b8
 10206c8:	ed9f 8b81 	vldr	d8, [pc, #516]	; 10208d0 <_vfprintf_r+0x288>
 10206cc:	f2c0 1806 	movt	r8, #262	; 0x106
 10206d0:	462f      	mov	r7, r5
 10206d2:	2300      	movs	r3, #0
 10206d4:	f64c 21e8 	movw	r1, #51944	; 0xcae8
 10206d8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10206dc:	f2c0 1106 	movt	r1, #262	; 0x106
 10206e0:	9312      	str	r3, [sp, #72]	; 0x48
 10206e2:	910f      	str	r1, [sp, #60]	; 0x3c
 10206e4:	9316      	str	r3, [sp, #88]	; 0x58
 10206e6:	9318      	str	r3, [sp, #96]	; 0x60
 10206e8:	9314      	str	r3, [sp, #80]	; 0x50
 10206ea:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 10206ee:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 10206f2:	9306      	str	r3, [sp, #24]
 10206f4:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 10206f8:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 10206fc:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 1020700:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 1020702:	463c      	mov	r4, r7
 1020704:	f8d8 3000 	ldr.w	r3, [r8]
 1020708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 102070a:	2b00      	cmp	r3, #0
 102070c:	bf08      	it	eq
 102070e:	4633      	moveq	r3, r6
 1020710:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 1020714:	f7fb ff9e 	bl	101c654 <__locale_mb_cur_max>
 1020718:	f8cd b000 	str.w	fp, [sp]
 102071c:	4622      	mov	r2, r4
 102071e:	a920      	add	r1, sp, #128	; 0x80
 1020720:	4603      	mov	r3, r0
 1020722:	4650      	mov	r0, sl
 1020724:	47a8      	blx	r5
 1020726:	2800      	cmp	r0, #0
 1020728:	4603      	mov	r3, r0
 102072a:	f000 80a1 	beq.w	1020870 <_vfprintf_r+0x228>
 102072e:	f2c0 8097 	blt.w	1020860 <_vfprintf_r+0x218>
 1020732:	9a20      	ldr	r2, [sp, #128]	; 0x80
 1020734:	2a25      	cmp	r2, #37	; 0x25
 1020736:	d001      	beq.n	102073c <_vfprintf_r+0xf4>
 1020738:	441c      	add	r4, r3
 102073a:	e7e3      	b.n	1020704 <_vfprintf_r+0xbc>
 102073c:	1be6      	subs	r6, r4, r7
 102073e:	4605      	mov	r5, r0
 1020740:	f040 8099 	bne.w	1020876 <_vfprintf_r+0x22e>
 1020744:	2300      	movs	r3, #0
 1020746:	1c67      	adds	r7, r4, #1
 1020748:	461e      	mov	r6, r3
 102074a:	9307      	str	r3, [sp, #28]
 102074c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 1020750:	f04f 32ff 	mov.w	r2, #4294967295
 1020754:	7863      	ldrb	r3, [r4, #1]
 1020756:	240a      	movs	r4, #10
 1020758:	9204      	str	r2, [sp, #16]
 102075a:	3701      	adds	r7, #1
 102075c:	f1a3 0220 	sub.w	r2, r3, #32
 1020760:	2a5a      	cmp	r2, #90	; 0x5a
 1020762:	f200 83d7 	bhi.w	1020f14 <_vfprintf_r+0x8cc>
 1020766:	e8df f012 	tbh	[pc, r2, lsl #1]
 102076a:	01de      	.short	0x01de
 102076c:	03d503d5 	.word	0x03d503d5
 1020770:	03d501da 	.word	0x03d501da
 1020774:	03d503d5 	.word	0x03d503d5
 1020778:	03d5020d 	.word	0x03d5020d
 102077c:	01ff03d5 	.word	0x01ff03d5
 1020780:	03d501fa 	.word	0x03d501fa
 1020784:	022e01f6 	.word	0x022e01f6
 1020788:	022a03d5 	.word	0x022a03d5
 102078c:	01b801b8 	.word	0x01b801b8
 1020790:	01b801b8 	.word	0x01b801b8
 1020794:	01b801b8 	.word	0x01b801b8
 1020798:	01b801b8 	.word	0x01b801b8
 102079c:	03d501b8 	.word	0x03d501b8
 10207a0:	03d503d5 	.word	0x03d503d5
 10207a4:	03d503d5 	.word	0x03d503d5
 10207a8:	03d503d5 	.word	0x03d503d5
 10207ac:	03d50248 	.word	0x03d50248
 10207b0:	03270367 	.word	0x03270367
 10207b4:	02480248 	.word	0x02480248
 10207b8:	03d50248 	.word	0x03d50248
 10207bc:	03d503d5 	.word	0x03d503d5
 10207c0:	032303d5 	.word	0x032303d5
 10207c4:	03d503d5 	.word	0x03d503d5
 10207c8:	03d50317 	.word	0x03d50317
 10207cc:	03d503d5 	.word	0x03d503d5
 10207d0:	03d502e7 	.word	0x03d502e7
 10207d4:	03d502d8 	.word	0x03d502d8
 10207d8:	02aa03d5 	.word	0x02aa03d5
 10207dc:	03d503d5 	.word	0x03d503d5
 10207e0:	03d503d5 	.word	0x03d503d5
 10207e4:	03d503d5 	.word	0x03d503d5
 10207e8:	03d503d5 	.word	0x03d503d5
 10207ec:	03d50248 	.word	0x03d50248
 10207f0:	027e0367 	.word	0x027e0367
 10207f4:	02480248 	.word	0x02480248
 10207f8:	03c60248 	.word	0x03c60248
 10207fc:	005b027e 	.word	0x005b027e
 1020800:	03bc03d5 	.word	0x03bc03d5
 1020804:	03a703d5 	.word	0x03a703d5
 1020808:	01c50391 	.word	0x01c50391
 102080c:	03d5005b 	.word	0x03d5005b
 1020810:	005d02e7 	.word	0x005d02e7
 1020814:	03d501e8 	.word	0x03d501e8
 1020818:	00b703d5 	.word	0x00b703d5
 102081c:	005d03d5 	.word	0x005d03d5
 1020820:	f046 0620 	orr.w	r6, r6, #32
 1020824:	783b      	ldrb	r3, [r7, #0]
 1020826:	e798      	b.n	102075a <_vfprintf_r+0x112>
 1020828:	9905      	ldr	r1, [sp, #20]
 102082a:	4650      	mov	r0, sl
 102082c:	f001 fef0 	bl	1022610 <__swsetup_r>
 1020830:	2800      	cmp	r0, #0
 1020832:	f041 83df 	bne.w	1021ff4 <_vfprintf_r+0x19ac>
 1020836:	9b05      	ldr	r3, [sp, #20]
 1020838:	899b      	ldrh	r3, [r3, #12]
 102083a:	f003 031a 	and.w	r3, r3, #26
 102083e:	2b0a      	cmp	r3, #10
 1020840:	f47f af3e 	bne.w	10206c0 <_vfprintf_r+0x78>
 1020844:	9b05      	ldr	r3, [sp, #20]
 1020846:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 102084a:	2b00      	cmp	r3, #0
 102084c:	f6ff af38 	blt.w	10206c0 <_vfprintf_r+0x78>
 1020850:	4623      	mov	r3, r4
 1020852:	462a      	mov	r2, r5
 1020854:	9905      	ldr	r1, [sp, #20]
 1020856:	4650      	mov	r0, sl
 1020858:	f001 fcd4 	bl	1022204 <__sbprintf>
 102085c:	9006      	str	r0, [sp, #24]
 102085e:	e027      	b.n	10208b0 <_vfprintf_r+0x268>
 1020860:	2208      	movs	r2, #8
 1020862:	2100      	movs	r1, #0
 1020864:	4658      	mov	r0, fp
 1020866:	f7fd f823 	bl	101d8b0 <memset>
 102086a:	2301      	movs	r3, #1
 102086c:	441c      	add	r4, r3
 102086e:	e749      	b.n	1020704 <_vfprintf_r+0xbc>
 1020870:	1be6      	subs	r6, r4, r7
 1020872:	4605      	mov	r5, r0
 1020874:	d012      	beq.n	102089c <_vfprintf_r+0x254>
 1020876:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 102087a:	e9c9 7600 	strd	r7, r6, [r9]
 102087e:	3301      	adds	r3, #1
 1020880:	4432      	add	r2, r6
 1020882:	2b07      	cmp	r3, #7
 1020884:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1020888:	bfd8      	it	le
 102088a:	f109 0908 	addle.w	r9, r9, #8
 102088e:	dc15      	bgt.n	10208bc <_vfprintf_r+0x274>
 1020890:	9b06      	ldr	r3, [sp, #24]
 1020892:	4433      	add	r3, r6
 1020894:	9306      	str	r3, [sp, #24]
 1020896:	2d00      	cmp	r5, #0
 1020898:	f47f af54 	bne.w	1020744 <_vfprintf_r+0xfc>
 102089c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 102089e:	2b00      	cmp	r3, #0
 10208a0:	f041 81fa 	bne.w	1021c98 <_vfprintf_r+0x1650>
 10208a4:	9b05      	ldr	r3, [sp, #20]
 10208a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 10208aa:	0659      	lsls	r1, r3, #25
 10208ac:	f101 83a2 	bmi.w	1021ff4 <_vfprintf_r+0x19ac>
 10208b0:	9806      	ldr	r0, [sp, #24]
 10208b2:	b055      	add	sp, #340	; 0x154
 10208b4:	ecbd 8b0a 	vpop	{d8-d12}
 10208b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10208bc:	aa28      	add	r2, sp, #160	; 0xa0
 10208be:	9905      	ldr	r1, [sp, #20]
 10208c0:	4650      	mov	r0, sl
 10208c2:	f005 fc5b 	bl	102617c <__sprint_r>
 10208c6:	2800      	cmp	r0, #0
 10208c8:	d1ec      	bne.n	10208a4 <_vfprintf_r+0x25c>
 10208ca:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10208ce:	e7df      	b.n	1020890 <_vfprintf_r+0x248>
	...
 10208d8:	06b0      	lsls	r0, r6, #26
 10208da:	930e      	str	r3, [sp, #56]	; 0x38
 10208dc:	f24c 1378 	movw	r3, #49528	; 0xc178
 10208e0:	f2c0 1306 	movt	r3, #262	; 0x106
 10208e4:	9316      	str	r3, [sp, #88]	; 0x58
 10208e6:	f140 81f3 	bpl.w	1020cd0 <_vfprintf_r+0x688>
 10208ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 10208ec:	3507      	adds	r5, #7
 10208ee:	f025 0307 	bic.w	r3, r5, #7
 10208f2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 10208f6:	9309      	str	r3, [sp, #36]	; 0x24
 10208f8:	ea54 0305 	orrs.w	r3, r4, r5
 10208fc:	f006 0301 	and.w	r3, r6, #1
 1020900:	bf08      	it	eq
 1020902:	2300      	moveq	r3, #0
 1020904:	2b00      	cmp	r3, #0
 1020906:	f040 81ff 	bne.w	1020d08 <_vfprintf_r+0x6c0>
 102090a:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 102090e:	9303      	str	r3, [sp, #12]
 1020910:	2302      	movs	r3, #2
 1020912:	9904      	ldr	r1, [sp, #16]
 1020914:	2200      	movs	r2, #0
 1020916:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 102091a:	1c4a      	adds	r2, r1, #1
 102091c:	f000 826d 	beq.w	1020dfa <_vfprintf_r+0x7b2>
 1020920:	ea54 0205 	orrs.w	r2, r4, r5
 1020924:	9a03      	ldr	r2, [sp, #12]
 1020926:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 102092a:	bf14      	ite	ne
 102092c:	2201      	movne	r2, #1
 102092e:	2200      	moveq	r2, #0
 1020930:	2900      	cmp	r1, #0
 1020932:	bf18      	it	ne
 1020934:	2201      	movne	r2, #1
 1020936:	2a00      	cmp	r2, #0
 1020938:	f040 8745 	bne.w	10217c6 <_vfprintf_r+0x117e>
 102093c:	2b00      	cmp	r3, #0
 102093e:	f040 8510 	bne.w	1021362 <_vfprintf_r+0xd1a>
 1020942:	9a03      	ldr	r2, [sp, #12]
 1020944:	9304      	str	r3, [sp, #16]
 1020946:	f012 0201 	ands.w	r2, r2, #1
 102094a:	9208      	str	r2, [sp, #32]
 102094c:	bf04      	itt	eq
 102094e:	ab54      	addeq	r3, sp, #336	; 0x150
 1020950:	930b      	streq	r3, [sp, #44]	; 0x2c
 1020952:	d005      	beq.n	1020960 <_vfprintf_r+0x318>
 1020954:	2330      	movs	r3, #48	; 0x30
 1020956:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 102095a:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 102095e:	930b      	str	r3, [sp, #44]	; 0x2c
 1020960:	2300      	movs	r3, #0
 1020962:	9a04      	ldr	r2, [sp, #16]
 1020964:	930a      	str	r3, [sp, #40]	; 0x28
 1020966:	9313      	str	r3, [sp, #76]	; 0x4c
 1020968:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 102096c:	9b08      	ldr	r3, [sp, #32]
 102096e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1020972:	4293      	cmp	r3, r2
 1020974:	bfb8      	it	lt
 1020976:	4613      	movlt	r3, r2
 1020978:	9303      	str	r3, [sp, #12]
 102097a:	b111      	cbz	r1, 1020982 <_vfprintf_r+0x33a>
 102097c:	9b03      	ldr	r3, [sp, #12]
 102097e:	3301      	adds	r3, #1
 1020980:	9303      	str	r3, [sp, #12]
 1020982:	f016 0302 	ands.w	r3, r6, #2
 1020986:	930c      	str	r3, [sp, #48]	; 0x30
 1020988:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102098a:	bf1e      	ittt	ne
 102098c:	9b03      	ldrne	r3, [sp, #12]
 102098e:	3302      	addne	r3, #2
 1020990:	9303      	strne	r3, [sp, #12]
 1020992:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 1020996:	930d      	str	r3, [sp, #52]	; 0x34
 1020998:	d104      	bne.n	10209a4 <_vfprintf_r+0x35c>
 102099a:	9b07      	ldr	r3, [sp, #28]
 102099c:	9803      	ldr	r0, [sp, #12]
 102099e:	1a1c      	subs	r4, r3, r0
 10209a0:	2c00      	cmp	r4, #0
 10209a2:	dc60      	bgt.n	1020a66 <_vfprintf_r+0x41e>
 10209a4:	b189      	cbz	r1, 10209ca <_vfprintf_r+0x382>
 10209a6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 10209a8:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 10209ac:	3201      	adds	r2, #1
 10209ae:	f8c9 0000 	str.w	r0, [r9]
 10209b2:	3101      	adds	r1, #1
 10209b4:	2001      	movs	r0, #1
 10209b6:	2907      	cmp	r1, #7
 10209b8:	f8c9 0004 	str.w	r0, [r9, #4]
 10209bc:	922a      	str	r2, [sp, #168]	; 0xa8
 10209be:	bfd8      	it	le
 10209c0:	f109 0908 	addle.w	r9, r9, #8
 10209c4:	9129      	str	r1, [sp, #164]	; 0xa4
 10209c6:	f300 846f 	bgt.w	10212a8 <_vfprintf_r+0xc60>
 10209ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 10209cc:	b183      	cbz	r3, 10209f0 <_vfprintf_r+0x3a8>
 10209ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10209d0:	a91e      	add	r1, sp, #120	; 0x78
 10209d2:	3202      	adds	r2, #2
 10209d4:	f8c9 1000 	str.w	r1, [r9]
 10209d8:	3301      	adds	r3, #1
 10209da:	2102      	movs	r1, #2
 10209dc:	2b07      	cmp	r3, #7
 10209de:	f8c9 1004 	str.w	r1, [r9, #4]
 10209e2:	922a      	str	r2, [sp, #168]	; 0xa8
 10209e4:	bfd8      	it	le
 10209e6:	f109 0908 	addle.w	r9, r9, #8
 10209ea:	9329      	str	r3, [sp, #164]	; 0xa4
 10209ec:	f300 8469 	bgt.w	10212c2 <_vfprintf_r+0xc7a>
 10209f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10209f2:	2b80      	cmp	r3, #128	; 0x80
 10209f4:	f000 8313 	beq.w	102101e <_vfprintf_r+0x9d6>
 10209f8:	9b04      	ldr	r3, [sp, #16]
 10209fa:	9908      	ldr	r1, [sp, #32]
 10209fc:	1a5c      	subs	r4, r3, r1
 10209fe:	2c00      	cmp	r4, #0
 1020a00:	f300 8355 	bgt.w	10210ae <_vfprintf_r+0xa66>
 1020a04:	05f5      	lsls	r5, r6, #23
 1020a06:	f100 82ab 	bmi.w	1020f60 <_vfprintf_r+0x918>
 1020a0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1020a0c:	9908      	ldr	r1, [sp, #32]
 1020a0e:	3301      	adds	r3, #1
 1020a10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1020a12:	2b07      	cmp	r3, #7
 1020a14:	440a      	add	r2, r1
 1020a16:	f8c9 1004 	str.w	r1, [r9, #4]
 1020a1a:	f8c9 0000 	str.w	r0, [r9]
 1020a1e:	922a      	str	r2, [sp, #168]	; 0xa8
 1020a20:	9329      	str	r3, [sp, #164]	; 0xa4
 1020a22:	f300 83ec 	bgt.w	10211fe <_vfprintf_r+0xbb6>
 1020a26:	f109 0908 	add.w	r9, r9, #8
 1020a2a:	0770      	lsls	r0, r6, #29
 1020a2c:	d505      	bpl.n	1020a3a <_vfprintf_r+0x3f2>
 1020a2e:	9b07      	ldr	r3, [sp, #28]
 1020a30:	9903      	ldr	r1, [sp, #12]
 1020a32:	1a5c      	subs	r4, r3, r1
 1020a34:	2c00      	cmp	r4, #0
 1020a36:	f300 8451 	bgt.w	10212dc <_vfprintf_r+0xc94>
 1020a3a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 1020a3e:	9803      	ldr	r0, [sp, #12]
 1020a40:	4281      	cmp	r1, r0
 1020a42:	bfac      	ite	ge
 1020a44:	185b      	addge	r3, r3, r1
 1020a46:	181b      	addlt	r3, r3, r0
 1020a48:	9306      	str	r3, [sp, #24]
 1020a4a:	2a00      	cmp	r2, #0
 1020a4c:	f040 8390 	bne.w	1021170 <_vfprintf_r+0xb28>
 1020a50:	2300      	movs	r3, #0
 1020a52:	9329      	str	r3, [sp, #164]	; 0xa4
 1020a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1020a56:	b11b      	cbz	r3, 1020a60 <_vfprintf_r+0x418>
 1020a58:	990a      	ldr	r1, [sp, #40]	; 0x28
 1020a5a:	4650      	mov	r0, sl
 1020a5c:	f003 f836 	bl	1023acc <_free_r>
 1020a60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020a64:	e64c      	b.n	1020700 <_vfprintf_r+0xb8>
 1020a66:	2c10      	cmp	r4, #16
 1020a68:	f647 6560 	movw	r5, #32352	; 0x7e60
 1020a6c:	bfc8      	it	gt
 1020a6e:	961b      	strgt	r6, [sp, #108]	; 0x6c
 1020a70:	f2c0 1506 	movt	r5, #262	; 0x106
 1020a74:	9929      	ldr	r1, [sp, #164]	; 0xa4
 1020a76:	bfc4      	itt	gt
 1020a78:	2310      	movgt	r3, #16
 1020a7a:	9e05      	ldrgt	r6, [sp, #20]
 1020a7c:	dc03      	bgt.n	1020a86 <_vfprintf_r+0x43e>
 1020a7e:	e01e      	b.n	1020abe <_vfprintf_r+0x476>
 1020a80:	3c10      	subs	r4, #16
 1020a82:	2c10      	cmp	r4, #16
 1020a84:	dd1a      	ble.n	1020abc <_vfprintf_r+0x474>
 1020a86:	3101      	adds	r1, #1
 1020a88:	3210      	adds	r2, #16
 1020a8a:	2907      	cmp	r1, #7
 1020a8c:	e9c9 5300 	strd	r5, r3, [r9]
 1020a90:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1020a94:	f109 0908 	add.w	r9, r9, #8
 1020a98:	ddf2      	ble.n	1020a80 <_vfprintf_r+0x438>
 1020a9a:	aa28      	add	r2, sp, #160	; 0xa0
 1020a9c:	4631      	mov	r1, r6
 1020a9e:	4650      	mov	r0, sl
 1020aa0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020aa4:	f005 fb6a 	bl	102617c <__sprint_r>
 1020aa8:	2800      	cmp	r0, #0
 1020aaa:	f040 8369 	bne.w	1021180 <_vfprintf_r+0xb38>
 1020aae:	3c10      	subs	r4, #16
 1020ab0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1020ab4:	2c10      	cmp	r4, #16
 1020ab6:	f04f 0310 	mov.w	r3, #16
 1020aba:	dce4      	bgt.n	1020a86 <_vfprintf_r+0x43e>
 1020abc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 1020abe:	3101      	adds	r1, #1
 1020ac0:	4422      	add	r2, r4
 1020ac2:	2907      	cmp	r1, #7
 1020ac4:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1020ac8:	e9c9 5400 	strd	r5, r4, [r9]
 1020acc:	f300 867e 	bgt.w	10217cc <_vfprintf_r+0x1184>
 1020ad0:	f109 0908 	add.w	r9, r9, #8
 1020ad4:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1020ad8:	e764      	b.n	10209a4 <_vfprintf_r+0x35c>
 1020ada:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1020ade:	2100      	movs	r1, #0
 1020ae0:	f817 3b01 	ldrb.w	r3, [r7], #1
 1020ae4:	fb04 2101 	mla	r1, r4, r1, r2
 1020ae8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1020aec:	2a09      	cmp	r2, #9
 1020aee:	d9f7      	bls.n	1020ae0 <_vfprintf_r+0x498>
 1020af0:	9107      	str	r1, [sp, #28]
 1020af2:	e633      	b.n	102075c <_vfprintf_r+0x114>
 1020af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1020af6:	f046 0202 	orr.w	r2, r6, #2
 1020afa:	f24c 1178 	movw	r1, #49528	; 0xc178
 1020afe:	9203      	str	r2, [sp, #12]
 1020b00:	f2c0 1106 	movt	r1, #262	; 0x106
 1020b04:	f647 0230 	movw	r2, #30768	; 0x7830
 1020b08:	f853 4b04 	ldr.w	r4, [r3], #4
 1020b0c:	2500      	movs	r5, #0
 1020b0e:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 1020b12:	2278      	movs	r2, #120	; 0x78
 1020b14:	9116      	str	r1, [sp, #88]	; 0x58
 1020b16:	9309      	str	r3, [sp, #36]	; 0x24
 1020b18:	2302      	movs	r3, #2
 1020b1a:	920e      	str	r2, [sp, #56]	; 0x38
 1020b1c:	e6f9      	b.n	1020912 <_vfprintf_r+0x2ca>
 1020b1e:	f046 0601 	orr.w	r6, r6, #1
 1020b22:	783b      	ldrb	r3, [r7, #0]
 1020b24:	e619      	b.n	102075a <_vfprintf_r+0x112>
 1020b26:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 1020b2a:	783b      	ldrb	r3, [r7, #0]
 1020b2c:	2a00      	cmp	r2, #0
 1020b2e:	f47f ae14 	bne.w	102075a <_vfprintf_r+0x112>
 1020b32:	2220      	movs	r2, #32
 1020b34:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 1020b38:	e60f      	b.n	102075a <_vfprintf_r+0x112>
 1020b3a:	06b0      	lsls	r0, r6, #26
 1020b3c:	930e      	str	r3, [sp, #56]	; 0x38
 1020b3e:	f140 857a 	bpl.w	1021636 <_vfprintf_r+0xfee>
 1020b42:	9603      	str	r6, [sp, #12]
 1020b44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1020b46:	2301      	movs	r3, #1
 1020b48:	3507      	adds	r5, #7
 1020b4a:	f025 0207 	bic.w	r2, r5, #7
 1020b4e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1020b52:	9209      	str	r2, [sp, #36]	; 0x24
 1020b54:	e6dd      	b.n	1020912 <_vfprintf_r+0x2ca>
 1020b56:	783b      	ldrb	r3, [r7, #0]
 1020b58:	f046 0604 	orr.w	r6, r6, #4
 1020b5c:	e5fd      	b.n	102075a <_vfprintf_r+0x112>
 1020b5e:	232b      	movs	r3, #43	; 0x2b
 1020b60:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 1020b64:	783b      	ldrb	r3, [r7, #0]
 1020b66:	e5f8      	b.n	102075a <_vfprintf_r+0x112>
 1020b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020b6a:	783b      	ldrb	r3, [r7, #0]
 1020b6c:	f852 1b04 	ldr.w	r1, [r2], #4
 1020b70:	2900      	cmp	r1, #0
 1020b72:	9107      	str	r1, [sp, #28]
 1020b74:	bfa8      	it	ge
 1020b76:	9209      	strge	r2, [sp, #36]	; 0x24
 1020b78:	f6bf adef 	bge.w	102075a <_vfprintf_r+0x112>
 1020b7c:	4249      	negs	r1, r1
 1020b7e:	9209      	str	r2, [sp, #36]	; 0x24
 1020b80:	9107      	str	r1, [sp, #28]
 1020b82:	e7e9      	b.n	1020b58 <_vfprintf_r+0x510>
 1020b84:	4650      	mov	r0, sl
 1020b86:	f003 fac9 	bl	102411c <_localeconv_r>
 1020b8a:	6843      	ldr	r3, [r0, #4]
 1020b8c:	4618      	mov	r0, r3
 1020b8e:	931a      	str	r3, [sp, #104]	; 0x68
 1020b90:	f7fd fdb6 	bl	101e700 <strlen>
 1020b94:	4605      	mov	r5, r0
 1020b96:	9019      	str	r0, [sp, #100]	; 0x64
 1020b98:	4650      	mov	r0, sl
 1020b9a:	f003 fabf 	bl	102411c <_localeconv_r>
 1020b9e:	6883      	ldr	r3, [r0, #8]
 1020ba0:	2d00      	cmp	r5, #0
 1020ba2:	bf18      	it	ne
 1020ba4:	2b00      	cmpne	r3, #0
 1020ba6:	9314      	str	r3, [sp, #80]	; 0x50
 1020ba8:	f43f ae3c 	beq.w	1020824 <_vfprintf_r+0x1dc>
 1020bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1020bae:	781a      	ldrb	r2, [r3, #0]
 1020bb0:	783b      	ldrb	r3, [r7, #0]
 1020bb2:	2a00      	cmp	r2, #0
 1020bb4:	f43f add1 	beq.w	102075a <_vfprintf_r+0x112>
 1020bb8:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 1020bbc:	e5cd      	b.n	102075a <_vfprintf_r+0x112>
 1020bbe:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 1020bc2:	783b      	ldrb	r3, [r7, #0]
 1020bc4:	e5c9      	b.n	102075a <_vfprintf_r+0x112>
 1020bc6:	4639      	mov	r1, r7
 1020bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 1020bcc:	2b2a      	cmp	r3, #42	; 0x2a
 1020bce:	f001 82d9 	beq.w	1022184 <_vfprintf_r+0x1b3c>
 1020bd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1020bd6:	460f      	mov	r7, r1
 1020bd8:	2a09      	cmp	r2, #9
 1020bda:	bf84      	itt	hi
 1020bdc:	2200      	movhi	r2, #0
 1020bde:	9204      	strhi	r2, [sp, #16]
 1020be0:	f63f adbc 	bhi.w	102075c <_vfprintf_r+0x114>
 1020be4:	2100      	movs	r1, #0
 1020be6:	f817 3b01 	ldrb.w	r3, [r7], #1
 1020bea:	fb04 2101 	mla	r1, r4, r1, r2
 1020bee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1020bf2:	2a09      	cmp	r2, #9
 1020bf4:	d9f7      	bls.n	1020be6 <_vfprintf_r+0x59e>
 1020bf6:	9104      	str	r1, [sp, #16]
 1020bf8:	e5b0      	b.n	102075c <_vfprintf_r+0x114>
 1020bfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1020bfc:	930e      	str	r3, [sp, #56]	; 0x38
 1020bfe:	3507      	adds	r5, #7
 1020c00:	ed9f 7bab 	vldr	d7, [pc, #684]	; 1020eb0 <_vfprintf_r+0x868>
 1020c04:	f025 0307 	bic.w	r3, r5, #7
 1020c08:	ecb3 8b02 	vldmia	r3!, {d8}
 1020c0c:	eeb0 6bc8 	vabs.f64	d6, d8
 1020c10:	9309      	str	r3, [sp, #36]	; 0x24
 1020c12:	eeb4 6b47 	vcmp.f64	d6, d7
 1020c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1020c1a:	f340 848c 	ble.w	1021536 <_vfprintf_r+0xeee>
 1020c1e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 1020c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1020c26:	bf58      	it	pl
 1020c28:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 1020c2c:	d502      	bpl.n	1020c34 <_vfprintf_r+0x5ec>
 1020c2e:	212d      	movs	r1, #45	; 0x2d
 1020c30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 1020c34:	f24c 1368 	movw	r3, #49512	; 0xc168
 1020c38:	f24c 146c 	movw	r4, #49516	; 0xc16c
 1020c3c:	f2c0 1306 	movt	r3, #262	; 0x106
 1020c40:	f2c0 1406 	movt	r4, #262	; 0x106
 1020c44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 1020c46:	2200      	movs	r2, #0
 1020c48:	2003      	movs	r0, #3
 1020c4a:	920a      	str	r2, [sp, #40]	; 0x28
 1020c4c:	2d47      	cmp	r5, #71	; 0x47
 1020c4e:	bfc8      	it	gt
 1020c50:	4623      	movgt	r3, r4
 1020c52:	9003      	str	r0, [sp, #12]
 1020c54:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 1020c58:	930b      	str	r3, [sp, #44]	; 0x2c
 1020c5a:	9008      	str	r0, [sp, #32]
 1020c5c:	9204      	str	r2, [sp, #16]
 1020c5e:	9213      	str	r2, [sp, #76]	; 0x4c
 1020c60:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 1020c64:	e689      	b.n	102097a <_vfprintf_r+0x332>
 1020c66:	06b5      	lsls	r5, r6, #26
 1020c68:	930e      	str	r3, [sp, #56]	; 0x38
 1020c6a:	f140 84f4 	bpl.w	1021656 <_vfprintf_r+0x100e>
 1020c6e:	9603      	str	r6, [sp, #12]
 1020c70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1020c72:	3507      	adds	r5, #7
 1020c74:	f025 0307 	bic.w	r3, r5, #7
 1020c78:	4619      	mov	r1, r3
 1020c7a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 1020c7e:	4614      	mov	r4, r2
 1020c80:	461d      	mov	r5, r3
 1020c82:	9109      	str	r1, [sp, #36]	; 0x24
 1020c84:	2a00      	cmp	r2, #0
 1020c86:	f173 0300 	sbcs.w	r3, r3, #0
 1020c8a:	f2c0 80a9 	blt.w	1020de0 <_vfprintf_r+0x798>
 1020c8e:	9b04      	ldr	r3, [sp, #16]
 1020c90:	3301      	adds	r3, #1
 1020c92:	f000 8156 	beq.w	1020f42 <_vfprintf_r+0x8fa>
 1020c96:	ea54 0305 	orrs.w	r3, r4, r5
 1020c9a:	9a04      	ldr	r2, [sp, #16]
 1020c9c:	9b03      	ldr	r3, [sp, #12]
 1020c9e:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 1020ca2:	bf14      	ite	ne
 1020ca4:	2301      	movne	r3, #1
 1020ca6:	2300      	moveq	r3, #0
 1020ca8:	2a00      	cmp	r2, #0
 1020caa:	bf18      	it	ne
 1020cac:	2301      	movne	r3, #1
 1020cae:	2b00      	cmp	r3, #0
 1020cb0:	f040 8146 	bne.w	1020f40 <_vfprintf_r+0x8f8>
 1020cb4:	aa54      	add	r2, sp, #336	; 0x150
 1020cb6:	9304      	str	r3, [sp, #16]
 1020cb8:	920b      	str	r2, [sp, #44]	; 0x2c
 1020cba:	9308      	str	r3, [sp, #32]
 1020cbc:	e650      	b.n	1020960 <_vfprintf_r+0x318>
 1020cbe:	06b0      	lsls	r0, r6, #26
 1020cc0:	930e      	str	r3, [sp, #56]	; 0x38
 1020cc2:	f64b 63d4 	movw	r3, #48852	; 0xbed4
 1020cc6:	f2c0 1306 	movt	r3, #262	; 0x106
 1020cca:	9316      	str	r3, [sp, #88]	; 0x58
 1020ccc:	f53f ae0d 	bmi.w	10208ea <_vfprintf_r+0x2a2>
 1020cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1020cd2:	06f1      	lsls	r1, r6, #27
 1020cd4:	f853 4b04 	ldr.w	r4, [r3], #4
 1020cd8:	9309      	str	r3, [sp, #36]	; 0x24
 1020cda:	d40b      	bmi.n	1020cf4 <_vfprintf_r+0x6ac>
 1020cdc:	0672      	lsls	r2, r6, #25
 1020cde:	bf44      	itt	mi
 1020ce0:	b2a4      	uxthmi	r4, r4
 1020ce2:	2500      	movmi	r5, #0
 1020ce4:	f53f ae08 	bmi.w	10208f8 <_vfprintf_r+0x2b0>
 1020ce8:	05b3      	lsls	r3, r6, #22
 1020cea:	bf44      	itt	mi
 1020cec:	b2e4      	uxtbmi	r4, r4
 1020cee:	2500      	movmi	r5, #0
 1020cf0:	f53f ae02 	bmi.w	10208f8 <_vfprintf_r+0x2b0>
 1020cf4:	2500      	movs	r5, #0
 1020cf6:	ea54 0305 	orrs.w	r3, r4, r5
 1020cfa:	f006 0301 	and.w	r3, r6, #1
 1020cfe:	bf08      	it	eq
 1020d00:	2300      	moveq	r3, #0
 1020d02:	2b00      	cmp	r3, #0
 1020d04:	f43f ae01 	beq.w	102090a <_vfprintf_r+0x2c2>
 1020d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1020d0a:	f046 0602 	orr.w	r6, r6, #2
 1020d0e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 1020d12:	2330      	movs	r3, #48	; 0x30
 1020d14:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 1020d18:	e5f7      	b.n	102090a <_vfprintf_r+0x2c2>
 1020d1a:	06b4      	lsls	r4, r6, #26
 1020d1c:	930e      	str	r3, [sp, #56]	; 0x38
 1020d1e:	f046 0310 	orr.w	r3, r6, #16
 1020d22:	9303      	str	r3, [sp, #12]
 1020d24:	f53f af0e 	bmi.w	1020b44 <_vfprintf_r+0x4fc>
 1020d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1020d2a:	1d1a      	adds	r2, r3, #4
 1020d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1020d2e:	2500      	movs	r5, #0
 1020d30:	9209      	str	r2, [sp, #36]	; 0x24
 1020d32:	681c      	ldr	r4, [r3, #0]
 1020d34:	2301      	movs	r3, #1
 1020d36:	e5ec      	b.n	1020912 <_vfprintf_r+0x2ca>
 1020d38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1020d3a:	930e      	str	r3, [sp, #56]	; 0x38
 1020d3c:	2300      	movs	r3, #0
 1020d3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 1020d42:	f855 2b04 	ldr.w	r2, [r5], #4
 1020d46:	920b      	str	r2, [sp, #44]	; 0x2c
 1020d48:	2a00      	cmp	r2, #0
 1020d4a:	f000 84d9 	beq.w	1021700 <_vfprintf_r+0x10b8>
 1020d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1020d50:	2b53      	cmp	r3, #83	; 0x53
 1020d52:	f000 8556 	beq.w	1021802 <_vfprintf_r+0x11ba>
 1020d56:	f016 0310 	ands.w	r3, r6, #16
 1020d5a:	9310      	str	r3, [sp, #64]	; 0x40
 1020d5c:	f040 8551 	bne.w	1021802 <_vfprintf_r+0x11ba>
 1020d60:	9a04      	ldr	r2, [sp, #16]
 1020d62:	1c53      	adds	r3, r2, #1
 1020d64:	f000 8787 	beq.w	1021c76 <_vfprintf_r+0x162e>
 1020d68:	9910      	ldr	r1, [sp, #64]	; 0x40
 1020d6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1020d6c:	f003 fb20 	bl	10243b0 <memchr>
 1020d70:	900a      	str	r0, [sp, #40]	; 0x28
 1020d72:	2800      	cmp	r0, #0
 1020d74:	f001 81e5 	beq.w	1022142 <_vfprintf_r+0x1afa>
 1020d78:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 1020d7c:	9509      	str	r5, [sp, #36]	; 0x24
 1020d7e:	1a9a      	subs	r2, r3, r2
 1020d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1020d82:	9208      	str	r2, [sp, #32]
 1020d84:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1020d88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 1020d8c:	9304      	str	r3, [sp, #16]
 1020d8e:	9313      	str	r3, [sp, #76]	; 0x4c
 1020d90:	9203      	str	r2, [sp, #12]
 1020d92:	9311      	str	r3, [sp, #68]	; 0x44
 1020d94:	930a      	str	r3, [sp, #40]	; 0x28
 1020d96:	e5f0      	b.n	102097a <_vfprintf_r+0x332>
 1020d98:	06b4      	lsls	r4, r6, #26
 1020d9a:	930e      	str	r3, [sp, #56]	; 0x38
 1020d9c:	f046 0310 	orr.w	r3, r6, #16
 1020da0:	d479      	bmi.n	1020e96 <_vfprintf_r+0x84e>
 1020da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020da4:	3204      	adds	r2, #4
 1020da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 1020da8:	2500      	movs	r5, #0
 1020daa:	9209      	str	r2, [sp, #36]	; 0x24
 1020dac:	680c      	ldr	r4, [r1, #0]
 1020dae:	e079      	b.n	1020ea4 <_vfprintf_r+0x85c>
 1020db0:	f046 0608 	orr.w	r6, r6, #8
 1020db4:	783b      	ldrb	r3, [r7, #0]
 1020db6:	e4d0      	b.n	102075a <_vfprintf_r+0x112>
 1020db8:	930e      	str	r3, [sp, #56]	; 0x38
 1020dba:	f046 0310 	orr.w	r3, r6, #16
 1020dbe:	06b6      	lsls	r6, r6, #26
 1020dc0:	9303      	str	r3, [sp, #12]
 1020dc2:	f53f af55 	bmi.w	1020c70 <_vfprintf_r+0x628>
 1020dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1020dc8:	1d1a      	adds	r2, r3, #4
 1020dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1020dcc:	9209      	str	r2, [sp, #36]	; 0x24
 1020dce:	681c      	ldr	r4, [r3, #0]
 1020dd0:	17e5      	asrs	r5, r4, #31
 1020dd2:	4622      	mov	r2, r4
 1020dd4:	2a00      	cmp	r2, #0
 1020dd6:	462b      	mov	r3, r5
 1020dd8:	f173 0300 	sbcs.w	r3, r3, #0
 1020ddc:	f6bf af57 	bge.w	1020c8e <_vfprintf_r+0x646>
 1020de0:	4264      	negs	r4, r4
 1020de2:	9904      	ldr	r1, [sp, #16]
 1020de4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1020de8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 1020dec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1020df0:	1c4a      	adds	r2, r1, #1
 1020df2:	f04f 0301 	mov.w	r3, #1
 1020df6:	f47f ad93 	bne.w	1020920 <_vfprintf_r+0x2d8>
 1020dfa:	2b01      	cmp	r3, #1
 1020dfc:	f000 80a1 	beq.w	1020f42 <_vfprintf_r+0x8fa>
 1020e00:	2b02      	cmp	r3, #2
 1020e02:	bf18      	it	ne
 1020e04:	a954      	addne	r1, sp, #336	; 0x150
 1020e06:	f040 8193 	bne.w	1021130 <_vfprintf_r+0xae8>
 1020e0a:	ab54      	add	r3, sp, #336	; 0x150
 1020e0c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 1020e0e:	461a      	mov	r2, r3
 1020e10:	f004 010f 	and.w	r1, r4, #15
 1020e14:	0923      	lsrs	r3, r4, #4
 1020e16:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 1020e1a:	0928      	lsrs	r0, r5, #4
 1020e1c:	5c71      	ldrb	r1, [r6, r1]
 1020e1e:	461c      	mov	r4, r3
 1020e20:	4605      	mov	r5, r0
 1020e22:	ea54 0305 	orrs.w	r3, r4, r5
 1020e26:	f802 1d01 	strb.w	r1, [r2, #-1]!
 1020e2a:	d1f1      	bne.n	1020e10 <_vfprintf_r+0x7c8>
 1020e2c:	ab54      	add	r3, sp, #336	; 0x150
 1020e2e:	920b      	str	r2, [sp, #44]	; 0x2c
 1020e30:	1a9b      	subs	r3, r3, r2
 1020e32:	9e03      	ldr	r6, [sp, #12]
 1020e34:	9308      	str	r3, [sp, #32]
 1020e36:	e593      	b.n	1020960 <_vfprintf_r+0x318>
 1020e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020e3a:	2b43      	cmp	r3, #67	; 0x43
 1020e3c:	930e      	str	r3, [sp, #56]	; 0x38
 1020e3e:	f102 0504 	add.w	r5, r2, #4
 1020e42:	d002      	beq.n	1020e4a <_vfprintf_r+0x802>
 1020e44:	06f3      	lsls	r3, r6, #27
 1020e46:	f140 841e 	bpl.w	1021686 <_vfprintf_r+0x103e>
 1020e4a:	2208      	movs	r2, #8
 1020e4c:	2100      	movs	r1, #0
 1020e4e:	a826      	add	r0, sp, #152	; 0x98
 1020e50:	ac3b      	add	r4, sp, #236	; 0xec
 1020e52:	f7fc fd2d 	bl	101d8b0 <memset>
 1020e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020e58:	ab26      	add	r3, sp, #152	; 0x98
 1020e5a:	4621      	mov	r1, r4
 1020e5c:	4650      	mov	r0, sl
 1020e5e:	6812      	ldr	r2, [r2, #0]
 1020e60:	f001 fa4c 	bl	10222fc <_wcrtomb_r>
 1020e64:	1c43      	adds	r3, r0, #1
 1020e66:	9008      	str	r0, [sp, #32]
 1020e68:	f001 80ce 	beq.w	1022008 <_vfprintf_r+0x19c0>
 1020e6c:	9b08      	ldr	r3, [sp, #32]
 1020e6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1020e72:	9303      	str	r3, [sp, #12]
 1020e74:	2300      	movs	r3, #0
 1020e76:	9509      	str	r5, [sp, #36]	; 0x24
 1020e78:	4619      	mov	r1, r3
 1020e7a:	940b      	str	r4, [sp, #44]	; 0x2c
 1020e7c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 1020e80:	930a      	str	r3, [sp, #40]	; 0x28
 1020e82:	9304      	str	r3, [sp, #16]
 1020e84:	9313      	str	r3, [sp, #76]	; 0x4c
 1020e86:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1020e8a:	e57a      	b.n	1020982 <_vfprintf_r+0x33a>
 1020e8c:	06b0      	lsls	r0, r6, #26
 1020e8e:	930e      	str	r3, [sp, #56]	; 0x38
 1020e90:	f140 8343 	bpl.w	102151a <_vfprintf_r+0xed2>
 1020e94:	4633      	mov	r3, r6
 1020e96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1020e98:	3507      	adds	r5, #7
 1020e9a:	f025 0207 	bic.w	r2, r5, #7
 1020e9e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1020ea2:	9209      	str	r2, [sp, #36]	; 0x24
 1020ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 1020ea8:	9303      	str	r3, [sp, #12]
 1020eaa:	2300      	movs	r3, #0
 1020eac:	e531      	b.n	1020912 <_vfprintf_r+0x2ca>
 1020eae:	bf00      	nop
 1020eb0:	ffffffff 	.word	0xffffffff
 1020eb4:	7fefffff 	.word	0x7fefffff
 1020eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020eba:	06b0      	lsls	r0, r6, #26
 1020ebc:	f102 0304 	add.w	r3, r2, #4
 1020ec0:	f100 8321 	bmi.w	1021506 <_vfprintf_r+0xebe>
 1020ec4:	06f1      	lsls	r1, r6, #27
 1020ec6:	f100 8517 	bmi.w	10218f8 <_vfprintf_r+0x12b0>
 1020eca:	0672      	lsls	r2, r6, #25
 1020ecc:	f100 86c4 	bmi.w	1021c58 <_vfprintf_r+0x1610>
 1020ed0:	05b5      	lsls	r5, r6, #22
 1020ed2:	f140 8511 	bpl.w	10218f8 <_vfprintf_r+0x12b0>
 1020ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020ed8:	9309      	str	r3, [sp, #36]	; 0x24
 1020eda:	9b06      	ldr	r3, [sp, #24]
 1020edc:	6812      	ldr	r2, [r2, #0]
 1020ede:	7013      	strb	r3, [r2, #0]
 1020ee0:	e40e      	b.n	1020700 <_vfprintf_r+0xb8>
 1020ee2:	783b      	ldrb	r3, [r7, #0]
 1020ee4:	2b6c      	cmp	r3, #108	; 0x6c
 1020ee6:	bf09      	itett	eq
 1020ee8:	f046 0620 	orreq.w	r6, r6, #32
 1020eec:	f046 0610 	orrne.w	r6, r6, #16
 1020ef0:	787b      	ldrbeq	r3, [r7, #1]
 1020ef2:	3701      	addeq	r7, #1
 1020ef4:	e431      	b.n	102075a <_vfprintf_r+0x112>
 1020ef6:	783b      	ldrb	r3, [r7, #0]
 1020ef8:	2b68      	cmp	r3, #104	; 0x68
 1020efa:	bf09      	itett	eq
 1020efc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 1020f00:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1020f04:	787b      	ldrbeq	r3, [r7, #1]
 1020f06:	3701      	addeq	r7, #1
 1020f08:	e427      	b.n	102075a <_vfprintf_r+0x112>
 1020f0a:	4650      	mov	r0, sl
 1020f0c:	f002 fd3e 	bl	102398c <__sinit>
 1020f10:	f7ff bbbb 	b.w	102068a <_vfprintf_r+0x42>
 1020f14:	461a      	mov	r2, r3
 1020f16:	930e      	str	r3, [sp, #56]	; 0x38
 1020f18:	2b00      	cmp	r3, #0
 1020f1a:	f43f acbf 	beq.w	102089c <_vfprintf_r+0x254>
 1020f1e:	2300      	movs	r3, #0
 1020f20:	2001      	movs	r0, #1
 1020f22:	4619      	mov	r1, r3
 1020f24:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 1020f28:	930a      	str	r3, [sp, #40]	; 0x28
 1020f2a:	9304      	str	r3, [sp, #16]
 1020f2c:	9313      	str	r3, [sp, #76]	; 0x4c
 1020f2e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1020f32:	ab3b      	add	r3, sp, #236	; 0xec
 1020f34:	9003      	str	r0, [sp, #12]
 1020f36:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 1020f3a:	9008      	str	r0, [sp, #32]
 1020f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 1020f3e:	e520      	b.n	1020982 <_vfprintf_r+0x33a>
 1020f40:	9603      	str	r6, [sp, #12]
 1020f42:	2d00      	cmp	r5, #0
 1020f44:	bf08      	it	eq
 1020f46:	2c0a      	cmpeq	r4, #10
 1020f48:	f080 8486 	bcs.w	1021858 <_vfprintf_r+0x1210>
 1020f4c:	2301      	movs	r3, #1
 1020f4e:	3430      	adds	r4, #48	; 0x30
 1020f50:	9308      	str	r3, [sp, #32]
 1020f52:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 1020f56:	9e03      	ldr	r6, [sp, #12]
 1020f58:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 1020f5c:	930b      	str	r3, [sp, #44]	; 0x2c
 1020f5e:	e4ff      	b.n	1020960 <_vfprintf_r+0x318>
 1020f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1020f62:	2b65      	cmp	r3, #101	; 0x65
 1020f64:	f340 8156 	ble.w	1021214 <_vfprintf_r+0xbcc>
 1020f68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 1020f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1020f70:	f040 81fd 	bne.w	102136e <_vfprintf_r+0xd26>
 1020f74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1020f76:	3201      	adds	r2, #1
 1020f78:	2101      	movs	r1, #1
 1020f7a:	922a      	str	r2, [sp, #168]	; 0xa8
 1020f7c:	3301      	adds	r3, #1
 1020f7e:	f649 52e0 	movw	r2, #40416	; 0x9de0
 1020f82:	2b07      	cmp	r3, #7
 1020f84:	f2c0 1206 	movt	r2, #262	; 0x106
 1020f88:	9329      	str	r3, [sp, #164]	; 0xa4
 1020f8a:	e9c9 2100 	strd	r2, r1, [r9]
 1020f8e:	bfd8      	it	le
 1020f90:	f109 0908 	addle.w	r9, r9, #8
 1020f94:	f300 8429 	bgt.w	10217ea <_vfprintf_r+0x11a2>
 1020f98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1020f9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 1020f9c:	4293      	cmp	r3, r2
 1020f9e:	f280 82ac 	bge.w	10214fa <_vfprintf_r+0xeb2>
 1020fa2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 1020fa4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1020fa8:	f8c9 1000 	str.w	r1, [r9]
 1020fac:	3301      	adds	r3, #1
 1020fae:	9915      	ldr	r1, [sp, #84]	; 0x54
 1020fb0:	2b07      	cmp	r3, #7
 1020fb2:	440a      	add	r2, r1
 1020fb4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1020fb8:	f8c9 1004 	str.w	r1, [r9, #4]
 1020fbc:	bfd8      	it	le
 1020fbe:	f109 0908 	addle.w	r9, r9, #8
 1020fc2:	f300 8391 	bgt.w	10216e8 <_vfprintf_r+0x10a0>
 1020fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1020fc8:	1e5c      	subs	r4, r3, #1
 1020fca:	2c00      	cmp	r4, #0
 1020fcc:	f77f ad2d 	ble.w	1020a2a <_vfprintf_r+0x3e2>
 1020fd0:	2c10      	cmp	r4, #16
 1020fd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1020fd4:	f340 83d4 	ble.w	1021780 <_vfprintf_r+0x1138>
 1020fd8:	9604      	str	r6, [sp, #16]
 1020fda:	2510      	movs	r5, #16
 1020fdc:	4626      	mov	r6, r4
 1020fde:	4619      	mov	r1, r3
 1020fe0:	9c05      	ldr	r4, [sp, #20]
 1020fe2:	e003      	b.n	1020fec <_vfprintf_r+0x9a4>
 1020fe4:	3e10      	subs	r6, #16
 1020fe6:	2e10      	cmp	r6, #16
 1020fe8:	f340 8495 	ble.w	1021916 <_vfprintf_r+0x12ce>
 1020fec:	3101      	adds	r1, #1
 1020fee:	4bc2      	ldr	r3, [pc, #776]	; (10212f8 <_vfprintf_r+0xcb0>)
 1020ff0:	2907      	cmp	r1, #7
 1020ff2:	f102 0210 	add.w	r2, r2, #16
 1020ff6:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1020ffa:	e9c9 3500 	strd	r3, r5, [r9]
 1020ffe:	f109 0908 	add.w	r9, r9, #8
 1021002:	ddef      	ble.n	1020fe4 <_vfprintf_r+0x99c>
 1021004:	aa28      	add	r2, sp, #160	; 0xa0
 1021006:	4621      	mov	r1, r4
 1021008:	4650      	mov	r0, sl
 102100a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102100e:	f005 f8b5 	bl	102617c <__sprint_r>
 1021012:	2800      	cmp	r0, #0
 1021014:	f040 80b4 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021018:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 102101c:	e7e2      	b.n	1020fe4 <_vfprintf_r+0x99c>
 102101e:	9b07      	ldr	r3, [sp, #28]
 1021020:	9903      	ldr	r1, [sp, #12]
 1021022:	1a5c      	subs	r4, r3, r1
 1021024:	2c00      	cmp	r4, #0
 1021026:	f77f ace7 	ble.w	10209f8 <_vfprintf_r+0x3b0>
 102102a:	2c10      	cmp	r4, #16
 102102c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 102102e:	dd26      	ble.n	102107e <_vfprintf_r+0xa36>
 1021030:	960c      	str	r6, [sp, #48]	; 0x30
 1021032:	2510      	movs	r5, #16
 1021034:	4626      	mov	r6, r4
 1021036:	4619      	mov	r1, r3
 1021038:	9c05      	ldr	r4, [sp, #20]
 102103a:	e002      	b.n	1021042 <_vfprintf_r+0x9fa>
 102103c:	3e10      	subs	r6, #16
 102103e:	2e10      	cmp	r6, #16
 1021040:	dd1a      	ble.n	1021078 <_vfprintf_r+0xa30>
 1021042:	3101      	adds	r1, #1
 1021044:	4bac      	ldr	r3, [pc, #688]	; (10212f8 <_vfprintf_r+0xcb0>)
 1021046:	2907      	cmp	r1, #7
 1021048:	f102 0210 	add.w	r2, r2, #16
 102104c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021050:	e9c9 3500 	strd	r3, r5, [r9]
 1021054:	f109 0908 	add.w	r9, r9, #8
 1021058:	ddf0      	ble.n	102103c <_vfprintf_r+0x9f4>
 102105a:	aa28      	add	r2, sp, #160	; 0xa0
 102105c:	4621      	mov	r1, r4
 102105e:	4650      	mov	r0, sl
 1021060:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021064:	f005 f88a 	bl	102617c <__sprint_r>
 1021068:	2800      	cmp	r0, #0
 102106a:	f040 8089 	bne.w	1021180 <_vfprintf_r+0xb38>
 102106e:	3e10      	subs	r6, #16
 1021070:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1021074:	2e10      	cmp	r6, #16
 1021076:	dce4      	bgt.n	1021042 <_vfprintf_r+0x9fa>
 1021078:	4634      	mov	r4, r6
 102107a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 102107c:	460b      	mov	r3, r1
 102107e:	3301      	adds	r3, #1
 1021080:	499d      	ldr	r1, [pc, #628]	; (10212f8 <_vfprintf_r+0xcb0>)
 1021082:	2b07      	cmp	r3, #7
 1021084:	4422      	add	r2, r4
 1021086:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 102108a:	e9c9 1400 	strd	r1, r4, [r9]
 102108e:	bfd8      	it	le
 1021090:	f109 0908 	addle.w	r9, r9, #8
 1021094:	f77f acb0 	ble.w	10209f8 <_vfprintf_r+0x3b0>
 1021098:	aa28      	add	r2, sp, #160	; 0xa0
 102109a:	9905      	ldr	r1, [sp, #20]
 102109c:	4650      	mov	r0, sl
 102109e:	f005 f86d 	bl	102617c <__sprint_r>
 10210a2:	2800      	cmp	r0, #0
 10210a4:	d16c      	bne.n	1021180 <_vfprintf_r+0xb38>
 10210a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10210a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10210ac:	e4a4      	b.n	10209f8 <_vfprintf_r+0x3b0>
 10210ae:	2c10      	cmp	r4, #16
 10210b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10210b2:	dd25      	ble.n	1021100 <_vfprintf_r+0xab8>
 10210b4:	9604      	str	r6, [sp, #16]
 10210b6:	2510      	movs	r5, #16
 10210b8:	4626      	mov	r6, r4
 10210ba:	4619      	mov	r1, r3
 10210bc:	9c05      	ldr	r4, [sp, #20]
 10210be:	e002      	b.n	10210c6 <_vfprintf_r+0xa7e>
 10210c0:	3e10      	subs	r6, #16
 10210c2:	2e10      	cmp	r6, #16
 10210c4:	dd19      	ble.n	10210fa <_vfprintf_r+0xab2>
 10210c6:	3101      	adds	r1, #1
 10210c8:	4b8b      	ldr	r3, [pc, #556]	; (10212f8 <_vfprintf_r+0xcb0>)
 10210ca:	2907      	cmp	r1, #7
 10210cc:	f102 0210 	add.w	r2, r2, #16
 10210d0:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 10210d4:	e9c9 3500 	strd	r3, r5, [r9]
 10210d8:	f109 0908 	add.w	r9, r9, #8
 10210dc:	ddf0      	ble.n	10210c0 <_vfprintf_r+0xa78>
 10210de:	aa28      	add	r2, sp, #160	; 0xa0
 10210e0:	4621      	mov	r1, r4
 10210e2:	4650      	mov	r0, sl
 10210e4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10210e8:	f005 f848 	bl	102617c <__sprint_r>
 10210ec:	2800      	cmp	r0, #0
 10210ee:	d147      	bne.n	1021180 <_vfprintf_r+0xb38>
 10210f0:	3e10      	subs	r6, #16
 10210f2:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 10210f6:	2e10      	cmp	r6, #16
 10210f8:	dce5      	bgt.n	10210c6 <_vfprintf_r+0xa7e>
 10210fa:	4634      	mov	r4, r6
 10210fc:	9e04      	ldr	r6, [sp, #16]
 10210fe:	460b      	mov	r3, r1
 1021100:	3301      	adds	r3, #1
 1021102:	497d      	ldr	r1, [pc, #500]	; (10212f8 <_vfprintf_r+0xcb0>)
 1021104:	2b07      	cmp	r3, #7
 1021106:	4422      	add	r2, r4
 1021108:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 102110c:	e9c9 1400 	strd	r1, r4, [r9]
 1021110:	bfd8      	it	le
 1021112:	f109 0908 	addle.w	r9, r9, #8
 1021116:	f77f ac75 	ble.w	1020a04 <_vfprintf_r+0x3bc>
 102111a:	aa28      	add	r2, sp, #160	; 0xa0
 102111c:	9905      	ldr	r1, [sp, #20]
 102111e:	4650      	mov	r0, sl
 1021120:	f005 f82c 	bl	102617c <__sprint_r>
 1021124:	bb60      	cbnz	r0, 1021180 <_vfprintf_r+0xb38>
 1021126:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021128:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102112c:	e46a      	b.n	1020a04 <_vfprintf_r+0x3bc>
 102112e:	4611      	mov	r1, r2
 1021130:	08e2      	lsrs	r2, r4, #3
 1021132:	08e8      	lsrs	r0, r5, #3
 1021134:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1021138:	f004 0307 	and.w	r3, r4, #7
 102113c:	4605      	mov	r5, r0
 102113e:	3330      	adds	r3, #48	; 0x30
 1021140:	4614      	mov	r4, r2
 1021142:	ea54 0005 	orrs.w	r0, r4, r5
 1021146:	f801 3c01 	strb.w	r3, [r1, #-1]
 102114a:	f101 32ff 	add.w	r2, r1, #4294967295
 102114e:	d1ee      	bne.n	102112e <_vfprintf_r+0xae6>
 1021150:	9e03      	ldr	r6, [sp, #12]
 1021152:	920b      	str	r2, [sp, #44]	; 0x2c
 1021154:	4630      	mov	r0, r6
 1021156:	2b30      	cmp	r3, #48	; 0x30
 1021158:	bf0c      	ite	eq
 102115a:	2000      	moveq	r0, #0
 102115c:	f000 0001 	andne.w	r0, r0, #1
 1021160:	2800      	cmp	r0, #0
 1021162:	f040 829a 	bne.w	102169a <_vfprintf_r+0x1052>
 1021166:	ab54      	add	r3, sp, #336	; 0x150
 1021168:	1a9b      	subs	r3, r3, r2
 102116a:	9308      	str	r3, [sp, #32]
 102116c:	f7ff bbf8 	b.w	1020960 <_vfprintf_r+0x318>
 1021170:	aa28      	add	r2, sp, #160	; 0xa0
 1021172:	9905      	ldr	r1, [sp, #20]
 1021174:	4650      	mov	r0, sl
 1021176:	f005 f801 	bl	102617c <__sprint_r>
 102117a:	2800      	cmp	r0, #0
 102117c:	f43f ac68 	beq.w	1020a50 <_vfprintf_r+0x408>
 1021180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1021182:	2b00      	cmp	r3, #0
 1021184:	f43f ab8e 	beq.w	10208a4 <_vfprintf_r+0x25c>
 1021188:	990a      	ldr	r1, [sp, #40]	; 0x28
 102118a:	4650      	mov	r0, sl
 102118c:	f002 fc9e 	bl	1023acc <_free_r>
 1021190:	f7ff bb88 	b.w	10208a4 <_vfprintf_r+0x25c>
 1021194:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1021196:	3201      	adds	r2, #1
 1021198:	f649 50e0 	movw	r0, #40416	; 0x9de0
 102119c:	2401      	movs	r4, #1
 102119e:	3301      	adds	r3, #1
 10211a0:	f2c0 1006 	movt	r0, #262	; 0x106
 10211a4:	2b07      	cmp	r3, #7
 10211a6:	e9c9 0400 	strd	r0, r4, [r9]
 10211aa:	922a      	str	r2, [sp, #168]	; 0xa8
 10211ac:	bfd8      	it	le
 10211ae:	f109 0908 	addle.w	r9, r9, #8
 10211b2:	9329      	str	r3, [sp, #164]	; 0xa4
 10211b4:	f300 865e 	bgt.w	1021e74 <_vfprintf_r+0x182c>
 10211b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10211ba:	430b      	orrs	r3, r1
 10211bc:	f000 8685 	beq.w	1021eca <_vfprintf_r+0x1882>
 10211c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10211c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 10211c4:	3301      	adds	r3, #1
 10211c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 10211c8:	2b07      	cmp	r3, #7
 10211ca:	4402      	add	r2, r0
 10211cc:	f8c9 0004 	str.w	r0, [r9, #4]
 10211d0:	f8c9 4000 	str.w	r4, [r9]
 10211d4:	bfd8      	it	le
 10211d6:	f109 0908 	addle.w	r9, r9, #8
 10211da:	922a      	str	r2, [sp, #168]	; 0xa8
 10211dc:	9329      	str	r3, [sp, #164]	; 0xa4
 10211de:	f300 8657 	bgt.w	1021e90 <_vfprintf_r+0x1848>
 10211e2:	2900      	cmp	r1, #0
 10211e4:	f2c0 86cc 	blt.w	1021f80 <_vfprintf_r+0x1938>
 10211e8:	3301      	adds	r3, #1
 10211ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 10211ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 10211ee:	2b07      	cmp	r3, #7
 10211f0:	440a      	add	r2, r1
 10211f2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 10211f6:	e9c9 0100 	strd	r0, r1, [r9]
 10211fa:	f77f ac14 	ble.w	1020a26 <_vfprintf_r+0x3de>
 10211fe:	aa28      	add	r2, sp, #160	; 0xa0
 1021200:	9905      	ldr	r1, [sp, #20]
 1021202:	4650      	mov	r0, sl
 1021204:	f004 ffba 	bl	102617c <__sprint_r>
 1021208:	2800      	cmp	r0, #0
 102120a:	d1b9      	bne.n	1021180 <_vfprintf_r+0xb38>
 102120c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102120e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021212:	e40a      	b.n	1020a2a <_vfprintf_r+0x3e2>
 1021214:	9c12      	ldr	r4, [sp, #72]	; 0x48
 1021216:	3201      	adds	r2, #1
 1021218:	9829      	ldr	r0, [sp, #164]	; 0xa4
 102121a:	f109 0308 	add.w	r3, r9, #8
 102121e:	2c01      	cmp	r4, #1
 1021220:	f100 0101 	add.w	r1, r0, #1
 1021224:	f340 812e 	ble.w	1021484 <_vfprintf_r+0xe3c>
 1021228:	980b      	ldr	r0, [sp, #44]	; 0x2c
 102122a:	2907      	cmp	r1, #7
 102122c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021230:	f8c9 0000 	str.w	r0, [r9]
 1021234:	f04f 0001 	mov.w	r0, #1
 1021238:	f8c9 0004 	str.w	r0, [r9, #4]
 102123c:	f300 82ab 	bgt.w	1021796 <_vfprintf_r+0x114e>
 1021240:	3101      	adds	r1, #1
 1021242:	9815      	ldr	r0, [sp, #84]	; 0x54
 1021244:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 1021246:	2907      	cmp	r1, #7
 1021248:	4402      	add	r2, r0
 102124a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 102124e:	e9c3 4000 	strd	r4, r0, [r3]
 1021252:	bfd8      	it	le
 1021254:	3308      	addle	r3, #8
 1021256:	f300 82aa 	bgt.w	10217ae <_vfprintf_r+0x1166>
 102125a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 102125e:	1c48      	adds	r0, r1, #1
 1021260:	9c12      	ldr	r4, [sp, #72]	; 0x48
 1021262:	f103 0908 	add.w	r9, r3, #8
 1021266:	4684      	mov	ip, r0
 1021268:	3c01      	subs	r4, #1
 102126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 102126e:	f000 811c 	beq.w	10214aa <_vfprintf_r+0xe62>
 1021272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 1021274:	2807      	cmp	r0, #7
 1021276:	4422      	add	r2, r4
 1021278:	605c      	str	r4, [r3, #4]
 102127a:	f105 0501 	add.w	r5, r5, #1
 102127e:	922a      	str	r2, [sp, #168]	; 0xa8
 1021280:	601d      	str	r5, [r3, #0]
 1021282:	9029      	str	r0, [sp, #164]	; 0xa4
 1021284:	f300 8221 	bgt.w	10216ca <_vfprintf_r+0x1082>
 1021288:	f103 0410 	add.w	r4, r3, #16
 102128c:	1c88      	adds	r0, r1, #2
 102128e:	464b      	mov	r3, r9
 1021290:	46a1      	mov	r9, r4
 1021292:	9918      	ldr	r1, [sp, #96]	; 0x60
 1021294:	2807      	cmp	r0, #7
 1021296:	9029      	str	r0, [sp, #164]	; 0xa4
 1021298:	440a      	add	r2, r1
 102129a:	922a      	str	r2, [sp, #168]	; 0xa8
 102129c:	6059      	str	r1, [r3, #4]
 102129e:	a922      	add	r1, sp, #136	; 0x88
 10212a0:	6019      	str	r1, [r3, #0]
 10212a2:	f77f abc2 	ble.w	1020a2a <_vfprintf_r+0x3e2>
 10212a6:	e7aa      	b.n	10211fe <_vfprintf_r+0xbb6>
 10212a8:	aa28      	add	r2, sp, #160	; 0xa0
 10212aa:	9905      	ldr	r1, [sp, #20]
 10212ac:	4650      	mov	r0, sl
 10212ae:	f004 ff65 	bl	102617c <__sprint_r>
 10212b2:	2800      	cmp	r0, #0
 10212b4:	f47f af64 	bne.w	1021180 <_vfprintf_r+0xb38>
 10212b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10212ba:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10212be:	f7ff bb84 	b.w	10209ca <_vfprintf_r+0x382>
 10212c2:	aa28      	add	r2, sp, #160	; 0xa0
 10212c4:	9905      	ldr	r1, [sp, #20]
 10212c6:	4650      	mov	r0, sl
 10212c8:	f004 ff58 	bl	102617c <__sprint_r>
 10212cc:	2800      	cmp	r0, #0
 10212ce:	f47f af57 	bne.w	1021180 <_vfprintf_r+0xb38>
 10212d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10212d4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10212d8:	f7ff bb8a 	b.w	10209f0 <_vfprintf_r+0x3a8>
 10212dc:	2c10      	cmp	r4, #16
 10212de:	f647 6560 	movw	r5, #32352	; 0x7e60
 10212e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10212e4:	f2c0 1506 	movt	r5, #262	; 0x106
 10212e8:	dd27      	ble.n	102133a <_vfprintf_r+0xcf2>
 10212ea:	9704      	str	r7, [sp, #16]
 10212ec:	2610      	movs	r6, #16
 10212ee:	462f      	mov	r7, r5
 10212f0:	4619      	mov	r1, r3
 10212f2:	9d05      	ldr	r5, [sp, #20]
 10212f4:	e005      	b.n	1021302 <_vfprintf_r+0xcba>
 10212f6:	bf00      	nop
 10212f8:	01067e70 	.word	0x01067e70
 10212fc:	3c10      	subs	r4, #16
 10212fe:	2c10      	cmp	r4, #16
 1021300:	dd18      	ble.n	1021334 <_vfprintf_r+0xcec>
 1021302:	3101      	adds	r1, #1
 1021304:	3210      	adds	r2, #16
 1021306:	2907      	cmp	r1, #7
 1021308:	e9c9 7600 	strd	r7, r6, [r9]
 102130c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021310:	f109 0908 	add.w	r9, r9, #8
 1021314:	ddf2      	ble.n	10212fc <_vfprintf_r+0xcb4>
 1021316:	aa28      	add	r2, sp, #160	; 0xa0
 1021318:	4629      	mov	r1, r5
 102131a:	4650      	mov	r0, sl
 102131c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021320:	f004 ff2c 	bl	102617c <__sprint_r>
 1021324:	2800      	cmp	r0, #0
 1021326:	f47f af2b 	bne.w	1021180 <_vfprintf_r+0xb38>
 102132a:	3c10      	subs	r4, #16
 102132c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1021330:	2c10      	cmp	r4, #16
 1021332:	dce6      	bgt.n	1021302 <_vfprintf_r+0xcba>
 1021334:	463d      	mov	r5, r7
 1021336:	9f04      	ldr	r7, [sp, #16]
 1021338:	460b      	mov	r3, r1
 102133a:	3301      	adds	r3, #1
 102133c:	4422      	add	r2, r4
 102133e:	2b07      	cmp	r3, #7
 1021340:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1021344:	e9c9 5400 	strd	r5, r4, [r9]
 1021348:	f77f ab77 	ble.w	1020a3a <_vfprintf_r+0x3f2>
 102134c:	aa28      	add	r2, sp, #160	; 0xa0
 102134e:	9905      	ldr	r1, [sp, #20]
 1021350:	4650      	mov	r0, sl
 1021352:	f004 ff13 	bl	102617c <__sprint_r>
 1021356:	2800      	cmp	r0, #0
 1021358:	f47f af12 	bne.w	1021180 <_vfprintf_r+0xb38>
 102135c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102135e:	f7ff bb6c 	b.w	1020a3a <_vfprintf_r+0x3f2>
 1021362:	ab54      	add	r3, sp, #336	; 0x150
 1021364:	9204      	str	r2, [sp, #16]
 1021366:	930b      	str	r3, [sp, #44]	; 0x2c
 1021368:	9208      	str	r2, [sp, #32]
 102136a:	f7ff baf9 	b.w	1020960 <_vfprintf_r+0x318>
 102136e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1021370:	2900      	cmp	r1, #0
 1021372:	f77f af0f 	ble.w	1021194 <_vfprintf_r+0xb4c>
 1021376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1021378:	9912      	ldr	r1, [sp, #72]	; 0x48
 102137a:	428b      	cmp	r3, r1
 102137c:	bfa8      	it	ge
 102137e:	460b      	movge	r3, r1
 1021380:	2b00      	cmp	r3, #0
 1021382:	461c      	mov	r4, r3
 1021384:	dd0f      	ble.n	10213a6 <_vfprintf_r+0xd5e>
 1021386:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1021388:	4422      	add	r2, r4
 102138a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 102138c:	3301      	adds	r3, #1
 102138e:	f8c9 4004 	str.w	r4, [r9, #4]
 1021392:	2b07      	cmp	r3, #7
 1021394:	922a      	str	r2, [sp, #168]	; 0xa8
 1021396:	f8c9 1000 	str.w	r1, [r9]
 102139a:	bfd8      	it	le
 102139c:	f109 0908 	addle.w	r9, r9, #8
 10213a0:	9329      	str	r3, [sp, #164]	; 0xa4
 10213a2:	f300 8441 	bgt.w	1021c28 <_vfprintf_r+0x15e0>
 10213a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10213a8:	2c00      	cmp	r4, #0
 10213aa:	bfa8      	it	ge
 10213ac:	1b1b      	subge	r3, r3, r4
 10213ae:	2b00      	cmp	r3, #0
 10213b0:	461c      	mov	r4, r3
 10213b2:	f300 81b9 	bgt.w	1021728 <_vfprintf_r+0x10e0>
 10213b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10213b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10213ba:	440b      	add	r3, r1
 10213bc:	0571      	lsls	r1, r6, #21
 10213be:	461d      	mov	r5, r3
 10213c0:	f100 8389 	bmi.w	1021ad6 <_vfprintf_r+0x148e>
 10213c4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 10213c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10213c8:	429c      	cmp	r4, r3
 10213ca:	db02      	blt.n	10213d2 <_vfprintf_r+0xd8a>
 10213cc:	07f3      	lsls	r3, r6, #31
 10213ce:	f140 8438 	bpl.w	1021c42 <_vfprintf_r+0x15fa>
 10213d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10213d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 10213d6:	3301      	adds	r3, #1
 10213d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 10213da:	2b07      	cmp	r3, #7
 10213dc:	440a      	add	r2, r1
 10213de:	f8c9 1004 	str.w	r1, [r9, #4]
 10213e2:	f8c9 0000 	str.w	r0, [r9]
 10213e6:	bfd8      	it	le
 10213e8:	f109 0908 	addle.w	r9, r9, #8
 10213ec:	922a      	str	r2, [sp, #168]	; 0xa8
 10213ee:	9329      	str	r3, [sp, #164]	; 0xa4
 10213f0:	f300 857f 	bgt.w	1021ef2 <_vfprintf_r+0x18aa>
 10213f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10213f6:	4619      	mov	r1, r3
 10213f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10213fa:	4419      	add	r1, r3
 10213fc:	1b1b      	subs	r3, r3, r4
 10213fe:	1b4c      	subs	r4, r1, r5
 1021400:	429c      	cmp	r4, r3
 1021402:	bfa8      	it	ge
 1021404:	461c      	movge	r4, r3
 1021406:	2c00      	cmp	r4, #0
 1021408:	dd0e      	ble.n	1021428 <_vfprintf_r+0xde0>
 102140a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 102140c:	4422      	add	r2, r4
 102140e:	f8c9 5000 	str.w	r5, [r9]
 1021412:	3101      	adds	r1, #1
 1021414:	f8c9 4004 	str.w	r4, [r9, #4]
 1021418:	2907      	cmp	r1, #7
 102141a:	922a      	str	r2, [sp, #168]	; 0xa8
 102141c:	9129      	str	r1, [sp, #164]	; 0xa4
 102141e:	bfd8      	it	le
 1021420:	f109 0908 	addle.w	r9, r9, #8
 1021424:	f300 8573 	bgt.w	1021f0e <_vfprintf_r+0x18c6>
 1021428:	2c00      	cmp	r4, #0
 102142a:	bfac      	ite	ge
 102142c:	1b1c      	subge	r4, r3, r4
 102142e:	461c      	movlt	r4, r3
 1021430:	2c00      	cmp	r4, #0
 1021432:	f77f aafa 	ble.w	1020a2a <_vfprintf_r+0x3e2>
 1021436:	2c10      	cmp	r4, #16
 1021438:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 102143a:	f340 81a1 	ble.w	1021780 <_vfprintf_r+0x1138>
 102143e:	9604      	str	r6, [sp, #16]
 1021440:	2510      	movs	r5, #16
 1021442:	4626      	mov	r6, r4
 1021444:	4619      	mov	r1, r3
 1021446:	9c05      	ldr	r4, [sp, #20]
 1021448:	e003      	b.n	1021452 <_vfprintf_r+0xe0a>
 102144a:	3e10      	subs	r6, #16
 102144c:	2e10      	cmp	r6, #16
 102144e:	f340 8194 	ble.w	102177a <_vfprintf_r+0x1132>
 1021452:	3101      	adds	r1, #1
 1021454:	4bb9      	ldr	r3, [pc, #740]	; (102173c <_vfprintf_r+0x10f4>)
 1021456:	2907      	cmp	r1, #7
 1021458:	f102 0210 	add.w	r2, r2, #16
 102145c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021460:	e9c9 3500 	strd	r3, r5, [r9]
 1021464:	f109 0908 	add.w	r9, r9, #8
 1021468:	ddef      	ble.n	102144a <_vfprintf_r+0xe02>
 102146a:	aa28      	add	r2, sp, #160	; 0xa0
 102146c:	4621      	mov	r1, r4
 102146e:	4650      	mov	r0, sl
 1021470:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021474:	f004 fe82 	bl	102617c <__sprint_r>
 1021478:	2800      	cmp	r0, #0
 102147a:	f47f ae81 	bne.w	1021180 <_vfprintf_r+0xb38>
 102147e:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1021482:	e7e2      	b.n	102144a <_vfprintf_r+0xe02>
 1021484:	07f4      	lsls	r4, r6, #31
 1021486:	f53f aecf 	bmi.w	1021228 <_vfprintf_r+0xbe0>
 102148a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 102148c:	2907      	cmp	r1, #7
 102148e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021492:	f8c9 4000 	str.w	r4, [r9]
 1021496:	f04f 0401 	mov.w	r4, #1
 102149a:	f8c9 4004 	str.w	r4, [r9, #4]
 102149e:	f300 8114 	bgt.w	10216ca <_vfprintf_r+0x1082>
 10214a2:	3002      	adds	r0, #2
 10214a4:	f109 0910 	add.w	r9, r9, #16
 10214a8:	e6f3      	b.n	1021292 <_vfprintf_r+0xc4a>
 10214aa:	2c00      	cmp	r4, #0
 10214ac:	f77f aef1 	ble.w	1021292 <_vfprintf_r+0xc4a>
 10214b0:	2c10      	cmp	r4, #16
 10214b2:	f340 8672 	ble.w	102219a <_vfprintf_r+0x1b52>
 10214b6:	2510      	movs	r5, #16
 10214b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 10214bc:	e005      	b.n	10214ca <_vfprintf_r+0xe82>
 10214be:	3c10      	subs	r4, #16
 10214c0:	f101 0c01 	add.w	ip, r1, #1
 10214c4:	2c10      	cmp	r4, #16
 10214c6:	f340 80f4 	ble.w	10216b2 <_vfprintf_r+0x106a>
 10214ca:	489c      	ldr	r0, [pc, #624]	; (102173c <_vfprintf_r+0x10f4>)
 10214cc:	4661      	mov	r1, ip
 10214ce:	2907      	cmp	r1, #7
 10214d0:	f102 0210 	add.w	r2, r2, #16
 10214d4:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 10214d8:	e9c3 0500 	strd	r0, r5, [r3]
 10214dc:	f103 0308 	add.w	r3, r3, #8
 10214e0:	dded      	ble.n	10214be <_vfprintf_r+0xe76>
 10214e2:	aa28      	add	r2, sp, #160	; 0xa0
 10214e4:	4649      	mov	r1, r9
 10214e6:	4650      	mov	r0, sl
 10214e8:	f004 fe48 	bl	102617c <__sprint_r>
 10214ec:	ab2b      	add	r3, sp, #172	; 0xac
 10214ee:	2800      	cmp	r0, #0
 10214f0:	f47f ae46 	bne.w	1021180 <_vfprintf_r+0xb38>
 10214f4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 10214f8:	e7e1      	b.n	10214be <_vfprintf_r+0xe76>
 10214fa:	07f4      	lsls	r4, r6, #31
 10214fc:	bf58      	it	pl
 10214fe:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 1021500:	f57f aa93 	bpl.w	1020a2a <_vfprintf_r+0x3e2>
 1021504:	e54d      	b.n	1020fa2 <_vfprintf_r+0x95a>
 1021506:	9906      	ldr	r1, [sp, #24]
 1021508:	6812      	ldr	r2, [r2, #0]
 102150a:	9309      	str	r3, [sp, #36]	; 0x24
 102150c:	17cd      	asrs	r5, r1, #31
 102150e:	4608      	mov	r0, r1
 1021510:	4629      	mov	r1, r5
 1021512:	e9c2 0100 	strd	r0, r1, [r2]
 1021516:	f7ff b8f3 	b.w	1020700 <_vfprintf_r+0xb8>
 102151a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102151c:	06f1      	lsls	r1, r6, #27
 102151e:	f852 4b04 	ldr.w	r4, [r2], #4
 1021522:	f100 865b 	bmi.w	10221dc <_vfprintf_r+0x1b94>
 1021526:	0673      	lsls	r3, r6, #25
 1021528:	f140 81f9 	bpl.w	102191e <_vfprintf_r+0x12d6>
 102152c:	4633      	mov	r3, r6
 102152e:	9209      	str	r2, [sp, #36]	; 0x24
 1021530:	b2a4      	uxth	r4, r4
 1021532:	2500      	movs	r5, #0
 1021534:	e4b6      	b.n	1020ea4 <_vfprintf_r+0x85c>
 1021536:	eeb4 8b48 	vcmp.f64	d8, d8
 102153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 102153e:	f180 85d6 	bvs.w	10220ee <_vfprintf_r+0x1aa6>
 1021542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1021544:	f023 0420 	bic.w	r4, r3, #32
 1021548:	2c41      	cmp	r4, #65	; 0x41
 102154a:	f040 81f4 	bne.w	1021936 <_vfprintf_r+0x12ee>
 102154e:	2b61      	cmp	r3, #97	; 0x61
 1021550:	f04f 0230 	mov.w	r2, #48	; 0x30
 1021554:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 1021558:	bf0c      	ite	eq
 102155a:	2378      	moveq	r3, #120	; 0x78
 102155c:	2358      	movne	r3, #88	; 0x58
 102155e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 1021562:	9b04      	ldr	r3, [sp, #16]
 1021564:	2b63      	cmp	r3, #99	; 0x63
 1021566:	f300 839e 	bgt.w	1021ca6 <_vfprintf_r+0x165e>
 102156a:	2300      	movs	r3, #0
 102156c:	930a      	str	r3, [sp, #40]	; 0x28
 102156e:	ab3b      	add	r3, sp, #236	; 0xec
 1021570:	930b      	str	r3, [sp, #44]	; 0x2c
 1021572:	ee18 3a90 	vmov	r3, s17
 1021576:	2b00      	cmp	r3, #0
 1021578:	f280 8523 	bge.w	1021fc2 <_vfprintf_r+0x197a>
 102157c:	eeb1 0b48 	vneg.f64	d0, d8
 1021580:	232d      	movs	r3, #45	; 0x2d
 1021582:	930c      	str	r3, [sp, #48]	; 0x30
 1021584:	a81f      	add	r0, sp, #124	; 0x7c
 1021586:	f003 fdef 	bl	1025168 <frexp>
 102158a:	9a04      	ldr	r2, [sp, #16]
 102158c:	990e      	ldr	r1, [sp, #56]	; 0x38
 102158e:	f24c 1078 	movw	r0, #49528	; 0xc178
 1021592:	f2c0 1006 	movt	r0, #262	; 0x106
 1021596:	3a01      	subs	r2, #1
 1021598:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 102159a:	ee20 0b0b 	vmul.f64	d0, d0, d11
 102159e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 10215a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10215a6:	bf04      	itt	eq
 10215a8:	2301      	moveq	r3, #1
 10215aa:	931f      	streq	r3, [sp, #124]	; 0x7c
 10215ac:	f64b 63d4 	movw	r3, #48852	; 0xbed4
 10215b0:	f2c0 1306 	movt	r3, #262	; 0x106
 10215b4:	2961      	cmp	r1, #97	; 0x61
 10215b6:	bf18      	it	ne
 10215b8:	4618      	movne	r0, r3
 10215ba:	e005      	b.n	10215c8 <_vfprintf_r+0xf80>
 10215bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 10215c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10215c4:	d015      	beq.n	10215f2 <_vfprintf_r+0xfaa>
 10215c6:	461d      	mov	r5, r3
 10215c8:	ee20 0b09 	vmul.f64	d0, d0, d9
 10215cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 10215d0:	462b      	mov	r3, r5
 10215d2:	4611      	mov	r1, r2
 10215d4:	f102 32ff 	add.w	r2, r2, #4294967295
 10215d8:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 10215dc:	ee17 ca90 	vmov	ip, s15
 10215e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 10215e4:	ee30 0b46 	vsub.f64	d0, d0, d6
 10215e8:	f810 c00c 	ldrb.w	ip, [r0, ip]
 10215ec:	f803 cb01 	strb.w	ip, [r3], #1
 10215f0:	d1e4      	bne.n	10215bc <_vfprintf_r+0xf74>
 10215f2:	eeb4 0bca 	vcmpe.f64	d0, d10
 10215f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10215fa:	f300 852b 	bgt.w	1022054 <_vfprintf_r+0x1a0c>
 10215fe:	eeb4 0b4a 	vcmp.f64	d0, d10
 1021602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021606:	d104      	bne.n	1021612 <_vfprintf_r+0xfca>
 1021608:	ee17 2a90 	vmov	r2, s15
 102160c:	07d2      	lsls	r2, r2, #31
 102160e:	f100 8521 	bmi.w	1022054 <_vfprintf_r+0x1a0c>
 1021612:	2900      	cmp	r1, #0
 1021614:	bfa2      	ittt	ge
 1021616:	1c4a      	addge	r2, r1, #1
 1021618:	18d2      	addge	r2, r2, r3
 102161a:	2130      	movge	r1, #48	; 0x30
 102161c:	db03      	blt.n	1021626 <_vfprintf_r+0xfde>
 102161e:	f803 1b01 	strb.w	r1, [r3], #1
 1021622:	4293      	cmp	r3, r2
 1021624:	d1fb      	bne.n	102161e <_vfprintf_r+0xfd6>
 1021626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1021628:	f046 0602 	orr.w	r6, r6, #2
 102162c:	1a9b      	subs	r3, r3, r2
 102162e:	9312      	str	r3, [sp, #72]	; 0x48
 1021630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1021632:	9310      	str	r3, [sp, #64]	; 0x40
 1021634:	e1c3      	b.n	10219be <_vfprintf_r+0x1376>
 1021636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1021638:	06f1      	lsls	r1, r6, #27
 102163a:	f852 4b04 	ldr.w	r4, [r2], #4
 102163e:	f100 85be 	bmi.w	10221be <_vfprintf_r+0x1b76>
 1021642:	0673      	lsls	r3, r6, #25
 1021644:	9209      	str	r2, [sp, #36]	; 0x24
 1021646:	9603      	str	r6, [sp, #12]
 1021648:	f140 815d 	bpl.w	1021906 <_vfprintf_r+0x12be>
 102164c:	b2a4      	uxth	r4, r4
 102164e:	2500      	movs	r5, #0
 1021650:	2301      	movs	r3, #1
 1021652:	f7ff b95e 	b.w	1020912 <_vfprintf_r+0x2ca>
 1021656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021658:	06f4      	lsls	r4, r6, #27
 102165a:	f103 0204 	add.w	r2, r3, #4
 102165e:	f100 85c0 	bmi.w	10221e2 <_vfprintf_r+0x1b9a>
 1021662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021664:	0670      	lsls	r0, r6, #25
 1021666:	bf48      	it	mi
 1021668:	f9b3 4000 	ldrshmi.w	r4, [r3]
 102166c:	d404      	bmi.n	1021678 <_vfprintf_r+0x1030>
 102166e:	05b1      	lsls	r1, r6, #22
 1021670:	f140 82f9 	bpl.w	1021c66 <_vfprintf_r+0x161e>
 1021674:	f993 4000 	ldrsb.w	r4, [r3]
 1021678:	17e5      	asrs	r5, r4, #31
 102167a:	9209      	str	r2, [sp, #36]	; 0x24
 102167c:	9603      	str	r6, [sp, #12]
 102167e:	4622      	mov	r2, r4
 1021680:	462b      	mov	r3, r5
 1021682:	f7ff baff 	b.w	1020c84 <_vfprintf_r+0x63c>
 1021686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021688:	2201      	movs	r2, #1
 102168a:	ac3b      	add	r4, sp, #236	; 0xec
 102168c:	9203      	str	r2, [sp, #12]
 102168e:	9208      	str	r2, [sp, #32]
 1021690:	681b      	ldr	r3, [r3, #0]
 1021692:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 1021696:	f7ff bbed 	b.w	1020e74 <_vfprintf_r+0x82c>
 102169a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 102169c:	3902      	subs	r1, #2
 102169e:	2330      	movs	r3, #48	; 0x30
 10216a0:	9e03      	ldr	r6, [sp, #12]
 10216a2:	910b      	str	r1, [sp, #44]	; 0x2c
 10216a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 10216a8:	ab54      	add	r3, sp, #336	; 0x150
 10216aa:	1a5b      	subs	r3, r3, r1
 10216ac:	9308      	str	r3, [sp, #32]
 10216ae:	f7ff b957 	b.w	1020960 <_vfprintf_r+0x318>
 10216b2:	f103 0108 	add.w	r1, r3, #8
 10216b6:	4660      	mov	r0, ip
 10216b8:	4d20      	ldr	r5, [pc, #128]	; (102173c <_vfprintf_r+0x10f4>)
 10216ba:	2807      	cmp	r0, #7
 10216bc:	4422      	add	r2, r4
 10216be:	605c      	str	r4, [r3, #4]
 10216c0:	922a      	str	r2, [sp, #168]	; 0xa8
 10216c2:	601d      	str	r5, [r3, #0]
 10216c4:	9029      	str	r0, [sp, #164]	; 0xa4
 10216c6:	f340 829d 	ble.w	1021c04 <_vfprintf_r+0x15bc>
 10216ca:	aa28      	add	r2, sp, #160	; 0xa0
 10216cc:	9905      	ldr	r1, [sp, #20]
 10216ce:	4650      	mov	r0, sl
 10216d0:	f004 fd54 	bl	102617c <__sprint_r>
 10216d4:	2800      	cmp	r0, #0
 10216d6:	f47f ad53 	bne.w	1021180 <_vfprintf_r+0xb38>
 10216da:	9829      	ldr	r0, [sp, #164]	; 0xa4
 10216dc:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 10216e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10216e2:	ab2b      	add	r3, sp, #172	; 0xac
 10216e4:	3001      	adds	r0, #1
 10216e6:	e5d4      	b.n	1021292 <_vfprintf_r+0xc4a>
 10216e8:	aa28      	add	r2, sp, #160	; 0xa0
 10216ea:	9905      	ldr	r1, [sp, #20]
 10216ec:	4650      	mov	r0, sl
 10216ee:	f004 fd45 	bl	102617c <__sprint_r>
 10216f2:	2800      	cmp	r0, #0
 10216f4:	f47f ad44 	bne.w	1021180 <_vfprintf_r+0xb38>
 10216f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10216fa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10216fe:	e462      	b.n	1020fc6 <_vfprintf_r+0x97e>
 1021700:	9804      	ldr	r0, [sp, #16]
 1021702:	f24c 138c 	movw	r3, #49548	; 0xc18c
 1021706:	9204      	str	r2, [sp, #16]
 1021708:	f2c0 1306 	movt	r3, #262	; 0x106
 102170c:	2806      	cmp	r0, #6
 102170e:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 1021712:	4611      	mov	r1, r2
 1021714:	9213      	str	r2, [sp, #76]	; 0x4c
 1021716:	bf28      	it	cs
 1021718:	2006      	movcs	r0, #6
 102171a:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 102171e:	9003      	str	r0, [sp, #12]
 1021720:	9008      	str	r0, [sp, #32]
 1021722:	930b      	str	r3, [sp, #44]	; 0x2c
 1021724:	f7ff b929 	b.w	102097a <_vfprintf_r+0x332>
 1021728:	2c10      	cmp	r4, #16
 102172a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 102172c:	f340 81ba 	ble.w	1021aa4 <_vfprintf_r+0x145c>
 1021730:	9604      	str	r6, [sp, #16]
 1021732:	2510      	movs	r5, #16
 1021734:	4626      	mov	r6, r4
 1021736:	4619      	mov	r1, r3
 1021738:	9c05      	ldr	r4, [sp, #20]
 102173a:	e005      	b.n	1021748 <_vfprintf_r+0x1100>
 102173c:	01067e70 	.word	0x01067e70
 1021740:	3e10      	subs	r6, #16
 1021742:	2e10      	cmp	r6, #16
 1021744:	f340 81ab 	ble.w	1021a9e <_vfprintf_r+0x1456>
 1021748:	3101      	adds	r1, #1
 102174a:	4bbc      	ldr	r3, [pc, #752]	; (1021a3c <_vfprintf_r+0x13f4>)
 102174c:	2907      	cmp	r1, #7
 102174e:	f102 0210 	add.w	r2, r2, #16
 1021752:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021756:	e9c9 3500 	strd	r3, r5, [r9]
 102175a:	f109 0908 	add.w	r9, r9, #8
 102175e:	ddef      	ble.n	1021740 <_vfprintf_r+0x10f8>
 1021760:	aa28      	add	r2, sp, #160	; 0xa0
 1021762:	4621      	mov	r1, r4
 1021764:	4650      	mov	r0, sl
 1021766:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102176a:	f004 fd07 	bl	102617c <__sprint_r>
 102176e:	2800      	cmp	r0, #0
 1021770:	f47f ad06 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021774:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1021778:	e7e2      	b.n	1021740 <_vfprintf_r+0x10f8>
 102177a:	4634      	mov	r4, r6
 102177c:	9e04      	ldr	r6, [sp, #16]
 102177e:	460b      	mov	r3, r1
 1021780:	3301      	adds	r3, #1
 1021782:	49ae      	ldr	r1, [pc, #696]	; (1021a3c <_vfprintf_r+0x13f4>)
 1021784:	2b07      	cmp	r3, #7
 1021786:	4422      	add	r2, r4
 1021788:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 102178c:	e9c9 1400 	strd	r1, r4, [r9]
 1021790:	f77f a949 	ble.w	1020a26 <_vfprintf_r+0x3de>
 1021794:	e533      	b.n	10211fe <_vfprintf_r+0xbb6>
 1021796:	aa28      	add	r2, sp, #160	; 0xa0
 1021798:	9905      	ldr	r1, [sp, #20]
 102179a:	4650      	mov	r0, sl
 102179c:	f004 fcee 	bl	102617c <__sprint_r>
 10217a0:	2800      	cmp	r0, #0
 10217a2:	f47f aced 	bne.w	1021180 <_vfprintf_r+0xb38>
 10217a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10217a8:	ab2b      	add	r3, sp, #172	; 0xac
 10217aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 10217ac:	e548      	b.n	1021240 <_vfprintf_r+0xbf8>
 10217ae:	aa28      	add	r2, sp, #160	; 0xa0
 10217b0:	9905      	ldr	r1, [sp, #20]
 10217b2:	4650      	mov	r0, sl
 10217b4:	f004 fce2 	bl	102617c <__sprint_r>
 10217b8:	2800      	cmp	r0, #0
 10217ba:	f47f ace1 	bne.w	1021180 <_vfprintf_r+0xb38>
 10217be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10217c0:	ab2b      	add	r3, sp, #172	; 0xac
 10217c2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 10217c4:	e549      	b.n	102125a <_vfprintf_r+0xc12>
 10217c6:	9603      	str	r6, [sp, #12]
 10217c8:	f7ff bb17 	b.w	1020dfa <_vfprintf_r+0x7b2>
 10217cc:	aa28      	add	r2, sp, #160	; 0xa0
 10217ce:	9905      	ldr	r1, [sp, #20]
 10217d0:	4650      	mov	r0, sl
 10217d2:	f004 fcd3 	bl	102617c <__sprint_r>
 10217d6:	2800      	cmp	r0, #0
 10217d8:	f47f acd2 	bne.w	1021180 <_vfprintf_r+0xb38>
 10217dc:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 10217e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10217e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10217e6:	f7ff b8dd 	b.w	10209a4 <_vfprintf_r+0x35c>
 10217ea:	aa28      	add	r2, sp, #160	; 0xa0
 10217ec:	9905      	ldr	r1, [sp, #20]
 10217ee:	4650      	mov	r0, sl
 10217f0:	f004 fcc4 	bl	102617c <__sprint_r>
 10217f4:	2800      	cmp	r0, #0
 10217f6:	f47f acc3 	bne.w	1021180 <_vfprintf_r+0xb38>
 10217fa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10217fe:	f7ff bbcb 	b.w	1020f98 <_vfprintf_r+0x950>
 1021802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021804:	2208      	movs	r2, #8
 1021806:	2100      	movs	r1, #0
 1021808:	a826      	add	r0, sp, #152	; 0x98
 102180a:	9321      	str	r3, [sp, #132]	; 0x84
 102180c:	f7fc f850 	bl	101d8b0 <memset>
 1021810:	9b04      	ldr	r3, [sp, #16]
 1021812:	1c5a      	adds	r2, r3, #1
 1021814:	f000 81b6 	beq.w	1021b84 <_vfprintf_r+0x153c>
 1021818:	2400      	movs	r4, #0
 102181a:	9603      	str	r6, [sp, #12]
 102181c:	f8cd 9010 	str.w	r9, [sp, #16]
 1021820:	4626      	mov	r6, r4
 1021822:	4699      	mov	r9, r3
 1021824:	9509      	str	r5, [sp, #36]	; 0x24
 1021826:	e009      	b.n	102183c <_vfprintf_r+0x11f4>
 1021828:	f000 fd68 	bl	10222fc <_wcrtomb_r>
 102182c:	1833      	adds	r3, r6, r0
 102182e:	3001      	adds	r0, #1
 1021830:	f000 83ea 	beq.w	1022008 <_vfprintf_r+0x19c0>
 1021834:	454b      	cmp	r3, r9
 1021836:	dc0a      	bgt.n	102184e <_vfprintf_r+0x1206>
 1021838:	461e      	mov	r6, r3
 102183a:	d008      	beq.n	102184e <_vfprintf_r+0x1206>
 102183c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 102183e:	ab26      	add	r3, sp, #152	; 0x98
 1021840:	a93b      	add	r1, sp, #236	; 0xec
 1021842:	4650      	mov	r0, sl
 1021844:	5915      	ldr	r5, [r2, r4]
 1021846:	3404      	adds	r4, #4
 1021848:	462a      	mov	r2, r5
 102184a:	2d00      	cmp	r5, #0
 102184c:	d1ec      	bne.n	1021828 <_vfprintf_r+0x11e0>
 102184e:	9608      	str	r6, [sp, #32]
 1021850:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1021852:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 1021856:	e1a3      	b.n	1021ba0 <_vfprintf_r+0x1558>
 1021858:	9b03      	ldr	r3, [sp, #12]
 102185a:	2200      	movs	r2, #0
 102185c:	f8cd 9020 	str.w	r9, [sp, #32]
 1021860:	ae54      	add	r6, sp, #336	; 0x150
 1021862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 1021866:	970c      	str	r7, [sp, #48]	; 0x30
 1021868:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 102186c:	4691      	mov	r9, r2
 102186e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1021872:	461f      	mov	r7, r3
 1021874:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 1021878:	e008      	b.n	102188c <_vfprintf_r+0x1244>
 102187a:	f7fa f8a5 	bl	101b9c8 <__aeabi_uldivmod>
 102187e:	2d00      	cmp	r5, #0
 1021880:	bf08      	it	eq
 1021882:	2c0a      	cmpeq	r4, #10
 1021884:	d329      	bcc.n	10218da <_vfprintf_r+0x1292>
 1021886:	4604      	mov	r4, r0
 1021888:	4656      	mov	r6, sl
 102188a:	460d      	mov	r5, r1
 102188c:	220a      	movs	r2, #10
 102188e:	2300      	movs	r3, #0
 1021890:	4620      	mov	r0, r4
 1021892:	4629      	mov	r1, r5
 1021894:	f7fa f898 	bl	101b9c8 <__aeabi_uldivmod>
 1021898:	f109 0901 	add.w	r9, r9, #1
 102189c:	4620      	mov	r0, r4
 102189e:	4629      	mov	r1, r5
 10218a0:	f106 3aff 	add.w	sl, r6, #4294967295
 10218a4:	2300      	movs	r3, #0
 10218a6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 10218aa:	220a      	movs	r2, #10
 10218ac:	f806 cc01 	strb.w	ip, [r6, #-1]
 10218b0:	2f00      	cmp	r7, #0
 10218b2:	d0e2      	beq.n	102187a <_vfprintf_r+0x1232>
 10218b4:	f898 6000 	ldrb.w	r6, [r8]
 10218b8:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 10218bc:	bf18      	it	ne
 10218be:	f04f 0c01 	movne.w	ip, #1
 10218c2:	454e      	cmp	r6, r9
 10218c4:	bf18      	it	ne
 10218c6:	f04f 0c00 	movne.w	ip, #0
 10218ca:	f1bc 0f00 	cmp.w	ip, #0
 10218ce:	d0d4      	beq.n	102187a <_vfprintf_r+0x1232>
 10218d0:	429d      	cmp	r5, r3
 10218d2:	bf08      	it	eq
 10218d4:	4294      	cmpeq	r4, r2
 10218d6:	f080 833e 	bcs.w	1021f56 <_vfprintf_r+0x190e>
 10218da:	4652      	mov	r2, sl
 10218dc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 10218e0:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 10218e4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 10218e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 10218ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 10218f0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 10218f4:	9e03      	ldr	r6, [sp, #12]
 10218f6:	e436      	b.n	1021166 <_vfprintf_r+0xb1e>
 10218f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10218fa:	6812      	ldr	r2, [r2, #0]
 10218fc:	9309      	str	r3, [sp, #36]	; 0x24
 10218fe:	9b06      	ldr	r3, [sp, #24]
 1021900:	6013      	str	r3, [r2, #0]
 1021902:	f7fe befd 	b.w	1020700 <_vfprintf_r+0xb8>
 1021906:	05b5      	lsls	r5, r6, #22
 1021908:	f04f 0301 	mov.w	r3, #1
 102190c:	bf48      	it	mi
 102190e:	b2e4      	uxtbmi	r4, r4
 1021910:	2500      	movs	r5, #0
 1021912:	f7fe bffe 	b.w	1020912 <_vfprintf_r+0x2ca>
 1021916:	4634      	mov	r4, r6
 1021918:	460b      	mov	r3, r1
 102191a:	9e04      	ldr	r6, [sp, #16]
 102191c:	e730      	b.n	1021780 <_vfprintf_r+0x1138>
 102191e:	05b5      	lsls	r5, r6, #22
 1021920:	bf45      	ittet	mi
 1021922:	9209      	strmi	r2, [sp, #36]	; 0x24
 1021924:	b2e4      	uxtbmi	r4, r4
 1021926:	9209      	strpl	r2, [sp, #36]	; 0x24
 1021928:	4633      	movmi	r3, r6
 102192a:	bf4e      	itee	mi
 102192c:	2500      	movmi	r5, #0
 102192e:	2500      	movpl	r5, #0
 1021930:	4633      	movpl	r3, r6
 1021932:	f7ff bab7 	b.w	1020ea4 <_vfprintf_r+0x85c>
 1021936:	9b04      	ldr	r3, [sp, #16]
 1021938:	1c5a      	adds	r2, r3, #1
 102193a:	f000 81bf 	beq.w	1021cbc <_vfprintf_r+0x1674>
 102193e:	2b00      	cmp	r3, #0
 1021940:	bf08      	it	eq
 1021942:	2c47      	cmpeq	r4, #71	; 0x47
 1021944:	f040 81bc 	bne.w	1021cc0 <_vfprintf_r+0x1678>
 1021948:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 102194c:	930d      	str	r3, [sp, #52]	; 0x34
 102194e:	ee18 3a90 	vmov	r3, s17
 1021952:	2b00      	cmp	r3, #0
 1021954:	f04f 0301 	mov.w	r3, #1
 1021958:	9304      	str	r3, [sp, #16]
 102195a:	f2c0 83ed 	blt.w	1022138 <_vfprintf_r+0x1af0>
 102195e:	eeb0 cb48 	vmov.f64	d12, d8
 1021962:	461d      	mov	r5, r3
 1021964:	2300      	movs	r3, #0
 1021966:	930c      	str	r3, [sp, #48]	; 0x30
 1021968:	ab26      	add	r3, sp, #152	; 0x98
 102196a:	aa21      	add	r2, sp, #132	; 0x84
 102196c:	9301      	str	r3, [sp, #4]
 102196e:	2102      	movs	r1, #2
 1021970:	9200      	str	r2, [sp, #0]
 1021972:	ab1f      	add	r3, sp, #124	; 0x7c
 1021974:	462a      	mov	r2, r5
 1021976:	eeb0 0b4c 	vmov.f64	d0, d12
 102197a:	4650      	mov	r0, sl
 102197c:	f000 ffc8 	bl	1022910 <_dtoa_r>
 1021980:	2c47      	cmp	r4, #71	; 0x47
 1021982:	900b      	str	r0, [sp, #44]	; 0x2c
 1021984:	f040 81cc 	bne.w	1021d20 <_vfprintf_r+0x16d8>
 1021988:	07f3      	lsls	r3, r6, #31
 102198a:	f100 81c9 	bmi.w	1021d20 <_vfprintf_r+0x16d8>
 102198e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1021990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1021992:	2c47      	cmp	r4, #71	; 0x47
 1021994:	eba3 0302 	sub.w	r3, r3, r2
 1021998:	9312      	str	r3, [sp, #72]	; 0x48
 102199a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 102199c:	9310      	str	r3, [sp, #64]	; 0x40
 102199e:	f040 8247 	bne.w	1021e30 <_vfprintf_r+0x17e8>
 10219a2:	9a04      	ldr	r2, [sp, #16]
 10219a4:	f113 0f03 	cmn.w	r3, #3
 10219a8:	bfa8      	it	ge
 10219aa:	429a      	cmpge	r2, r3
 10219ac:	f280 8222 	bge.w	1021df4 <_vfprintf_r+0x17ac>
 10219b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 10219b2:	2200      	movs	r2, #0
 10219b4:	920a      	str	r2, [sp, #40]	; 0x28
 10219b6:	3b02      	subs	r3, #2
 10219b8:	930e      	str	r3, [sp, #56]	; 0x38
 10219ba:	f023 0420 	bic.w	r4, r3, #32
 10219be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10219c0:	2c41      	cmp	r4, #65	; 0x41
 10219c2:	f103 32ff 	add.w	r2, r3, #4294967295
 10219c6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 10219ca:	921f      	str	r2, [sp, #124]	; 0x7c
 10219cc:	bf04      	itt	eq
 10219ce:	330f      	addeq	r3, #15
 10219d0:	b2db      	uxtbeq	r3, r3
 10219d2:	2a00      	cmp	r2, #0
 10219d4:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 10219d8:	bfb7      	itett	lt
 10219da:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 10219dc:	232b      	movge	r3, #43	; 0x2b
 10219de:	f1c3 0201 	rsblt	r2, r3, #1
 10219e2:	232d      	movlt	r3, #45	; 0x2d
 10219e4:	2a09      	cmp	r2, #9
 10219e6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 10219ea:	f340 8393 	ble.w	1022114 <_vfprintf_r+0x1acc>
 10219ee:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 10219f2:	f246 6567 	movw	r5, #26215	; 0x6667
 10219f6:	f04f 0e0a 	mov.w	lr, #10
 10219fa:	f2c6 6566 	movt	r5, #26214	; 0x6666
 10219fe:	4664      	mov	r4, ip
 1021a00:	e000      	b.n	1021a04 <_vfprintf_r+0x13bc>
 1021a02:	460c      	mov	r4, r1
 1021a04:	fb85 3002 	smull	r3, r0, r5, r2
 1021a08:	17d3      	asrs	r3, r2, #31
 1021a0a:	2a63      	cmp	r2, #99	; 0x63
 1021a0c:	f104 31ff 	add.w	r1, r4, #4294967295
 1021a10:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 1021a14:	fb0e 2013 	mls	r0, lr, r3, r2
 1021a18:	461a      	mov	r2, r3
 1021a1a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 1021a1e:	f804 0c01 	strb.w	r0, [r4, #-1]
 1021a22:	dcee      	bgt.n	1021a02 <_vfprintf_r+0x13ba>
 1021a24:	1ea2      	subs	r2, r4, #2
 1021a26:	3330      	adds	r3, #48	; 0x30
 1021a28:	4594      	cmp	ip, r2
 1021a2a:	b2db      	uxtb	r3, r3
 1021a2c:	f801 3c01 	strb.w	r3, [r1, #-1]
 1021a30:	f240 83c2 	bls.w	10221b8 <_vfprintf_r+0x1b70>
 1021a34:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 1021a38:	e004      	b.n	1021a44 <_vfprintf_r+0x13fc>
 1021a3a:	bf00      	nop
 1021a3c:	01067e70 	.word	0x01067e70
 1021a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 1021a44:	4561      	cmp	r1, ip
 1021a46:	f802 3b01 	strb.w	r3, [r2], #1
 1021a4a:	d1f9      	bne.n	1021a40 <_vfprintf_r+0x13f8>
 1021a4c:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 1021a50:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 1021a54:	1b1b      	subs	r3, r3, r4
 1021a56:	aa22      	add	r2, sp, #136	; 0x88
 1021a58:	440b      	add	r3, r1
 1021a5a:	1a9b      	subs	r3, r3, r2
 1021a5c:	9318      	str	r3, [sp, #96]	; 0x60
 1021a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1021a60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 1021a62:	2b01      	cmp	r3, #1
 1021a64:	441a      	add	r2, r3
 1021a66:	9208      	str	r2, [sp, #32]
 1021a68:	f340 8376 	ble.w	1022158 <_vfprintf_r+0x1b10>
 1021a6c:	9b08      	ldr	r3, [sp, #32]
 1021a6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1021a70:	4413      	add	r3, r2
 1021a72:	9308      	str	r3, [sp, #32]
 1021a74:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 1021a78:	2200      	movs	r2, #0
 1021a7a:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 1021a7e:	9b08      	ldr	r3, [sp, #32]
 1021a80:	9213      	str	r2, [sp, #76]	; 0x4c
 1021a82:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 1021a86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1021a8a:	9303      	str	r3, [sp, #12]
 1021a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1021a8e:	2b00      	cmp	r3, #0
 1021a90:	f040 81e9 	bne.w	1021e66 <_vfprintf_r+0x181e>
 1021a94:	9304      	str	r3, [sp, #16]
 1021a96:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1021a9a:	f7fe bf6e 	b.w	102097a <_vfprintf_r+0x332>
 1021a9e:	4634      	mov	r4, r6
 1021aa0:	9e04      	ldr	r6, [sp, #16]
 1021aa2:	460b      	mov	r3, r1
 1021aa4:	3301      	adds	r3, #1
 1021aa6:	49af      	ldr	r1, [pc, #700]	; (1021d64 <_vfprintf_r+0x171c>)
 1021aa8:	2b07      	cmp	r3, #7
 1021aaa:	4422      	add	r2, r4
 1021aac:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1021ab0:	e9c9 1400 	strd	r1, r4, [r9]
 1021ab4:	bfd8      	it	le
 1021ab6:	f109 0908 	addle.w	r9, r9, #8
 1021aba:	f77f ac7c 	ble.w	10213b6 <_vfprintf_r+0xd6e>
 1021abe:	aa28      	add	r2, sp, #160	; 0xa0
 1021ac0:	9905      	ldr	r1, [sp, #20]
 1021ac2:	4650      	mov	r0, sl
 1021ac4:	f004 fb5a 	bl	102617c <__sprint_r>
 1021ac8:	2800      	cmp	r0, #0
 1021aca:	f47f ab59 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021ace:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021ad0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021ad4:	e46f      	b.n	10213b6 <_vfprintf_r+0xd6e>
 1021ad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 1021ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 1021ada:	2b00      	cmp	r3, #0
 1021adc:	bfd8      	it	le
 1021ade:	2900      	cmple	r1, #0
 1021ae0:	f340 8370 	ble.w	10221c4 <_vfprintf_r+0x1b7c>
 1021ae4:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 1021ae8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 1021aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1021aee:	9812      	ldr	r0, [sp, #72]	; 0x48
 1021af0:	960c      	str	r6, [sp, #48]	; 0x30
 1021af2:	461e      	mov	r6, r3
 1021af4:	4401      	add	r1, r0
 1021af6:	9108      	str	r1, [sp, #32]
 1021af8:	2e00      	cmp	r6, #0
 1021afa:	f000 8127 	beq.w	1021d4c <_vfprintf_r+0x1704>
 1021afe:	3e01      	subs	r6, #1
 1021b00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1021b02:	9919      	ldr	r1, [sp, #100]	; 0x64
 1021b04:	3301      	adds	r3, #1
 1021b06:	981a      	ldr	r0, [sp, #104]	; 0x68
 1021b08:	2b07      	cmp	r3, #7
 1021b0a:	440a      	add	r2, r1
 1021b0c:	f8c9 1004 	str.w	r1, [r9, #4]
 1021b10:	f8c9 0000 	str.w	r0, [r9]
 1021b14:	bfd8      	it	le
 1021b16:	f109 0908 	addle.w	r9, r9, #8
 1021b1a:	922a      	str	r2, [sp, #168]	; 0xa8
 1021b1c:	9329      	str	r3, [sp, #164]	; 0xa4
 1021b1e:	f300 814f 	bgt.w	1021dc0 <_vfprintf_r+0x1778>
 1021b22:	9814      	ldr	r0, [sp, #80]	; 0x50
 1021b24:	9908      	ldr	r1, [sp, #32]
 1021b26:	7803      	ldrb	r3, [r0, #0]
 1021b28:	1b4c      	subs	r4, r1, r5
 1021b2a:	9104      	str	r1, [sp, #16]
 1021b2c:	429c      	cmp	r4, r3
 1021b2e:	bfa8      	it	ge
 1021b30:	461c      	movge	r4, r3
 1021b32:	2c00      	cmp	r4, #0
 1021b34:	dd0e      	ble.n	1021b54 <_vfprintf_r+0x150c>
 1021b36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1021b38:	4422      	add	r2, r4
 1021b3a:	f8c9 5000 	str.w	r5, [r9]
 1021b3e:	3301      	adds	r3, #1
 1021b40:	922a      	str	r2, [sp, #168]	; 0xa8
 1021b42:	2b07      	cmp	r3, #7
 1021b44:	f8c9 4004 	str.w	r4, [r9, #4]
 1021b48:	9329      	str	r3, [sp, #164]	; 0xa4
 1021b4a:	f300 8145 	bgt.w	1021dd8 <_vfprintf_r+0x1790>
 1021b4e:	7803      	ldrb	r3, [r0, #0]
 1021b50:	f109 0908 	add.w	r9, r9, #8
 1021b54:	2c00      	cmp	r4, #0
 1021b56:	bfac      	ite	ge
 1021b58:	1b1c      	subge	r4, r3, r4
 1021b5a:	461c      	movlt	r4, r3
 1021b5c:	2c00      	cmp	r4, #0
 1021b5e:	f300 80fc 	bgt.w	1021d5a <_vfprintf_r+0x1712>
 1021b62:	441d      	add	r5, r3
 1021b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1021b66:	2e00      	cmp	r6, #0
 1021b68:	bfd8      	it	le
 1021b6a:	2b00      	cmple	r3, #0
 1021b6c:	dcc4      	bgt.n	1021af8 <_vfprintf_r+0x14b0>
 1021b6e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 1021b72:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 1021b76:	9904      	ldr	r1, [sp, #16]
 1021b78:	462b      	mov	r3, r5
 1021b7a:	428d      	cmp	r5, r1
 1021b7c:	bf28      	it	cs
 1021b7e:	460b      	movcs	r3, r1
 1021b80:	461d      	mov	r5, r3
 1021b82:	e41f      	b.n	10213c4 <_vfprintf_r+0xd7c>
 1021b84:	2300      	movs	r3, #0
 1021b86:	aa26      	add	r2, sp, #152	; 0x98
 1021b88:	4619      	mov	r1, r3
 1021b8a:	9200      	str	r2, [sp, #0]
 1021b8c:	4650      	mov	r0, sl
 1021b8e:	aa21      	add	r2, sp, #132	; 0x84
 1021b90:	f000 fc0a 	bl	10223a8 <_wcsrtombs_r>
 1021b94:	1c43      	adds	r3, r0, #1
 1021b96:	9008      	str	r0, [sp, #32]
 1021b98:	f000 8236 	beq.w	1022008 <_vfprintf_r+0x19c0>
 1021b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021b9e:	9321      	str	r3, [sp, #132]	; 0x84
 1021ba0:	9b08      	ldr	r3, [sp, #32]
 1021ba2:	2b00      	cmp	r3, #0
 1021ba4:	d034      	beq.n	1021c10 <_vfprintf_r+0x15c8>
 1021ba6:	2b63      	cmp	r3, #99	; 0x63
 1021ba8:	f340 8229 	ble.w	1021ffe <_vfprintf_r+0x19b6>
 1021bac:	1c59      	adds	r1, r3, #1
 1021bae:	4650      	mov	r0, sl
 1021bb0:	f7fa fe12 	bl	101c7d8 <_malloc_r>
 1021bb4:	900b      	str	r0, [sp, #44]	; 0x2c
 1021bb6:	2800      	cmp	r0, #0
 1021bb8:	f000 8226 	beq.w	1022008 <_vfprintf_r+0x19c0>
 1021bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021bbe:	930a      	str	r3, [sp, #40]	; 0x28
 1021bc0:	2208      	movs	r2, #8
 1021bc2:	2100      	movs	r1, #0
 1021bc4:	a826      	add	r0, sp, #152	; 0x98
 1021bc6:	f7fb fe73 	bl	101d8b0 <memset>
 1021bca:	9c08      	ldr	r4, [sp, #32]
 1021bcc:	ab26      	add	r3, sp, #152	; 0x98
 1021bce:	aa21      	add	r2, sp, #132	; 0x84
 1021bd0:	9300      	str	r3, [sp, #0]
 1021bd2:	4650      	mov	r0, sl
 1021bd4:	4623      	mov	r3, r4
 1021bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1021bd8:	f000 fbe6 	bl	10223a8 <_wcsrtombs_r>
 1021bdc:	4284      	cmp	r4, r0
 1021bde:	f040 82e4 	bne.w	10221aa <_vfprintf_r+0x1b62>
 1021be2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1021be4:	2300      	movs	r3, #0
 1021be6:	9509      	str	r5, [sp, #36]	; 0x24
 1021be8:	9304      	str	r3, [sp, #16]
 1021bea:	4614      	mov	r4, r2
 1021bec:	9a08      	ldr	r2, [sp, #32]
 1021bee:	9313      	str	r3, [sp, #76]	; 0x4c
 1021bf0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1021bf4:	54a3      	strb	r3, [r4, r2]
 1021bf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1021bfa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1021bfe:	9303      	str	r3, [sp, #12]
 1021c00:	f7fe bebb 	b.w	102097a <_vfprintf_r+0x332>
 1021c04:	3001      	adds	r0, #1
 1021c06:	f101 0908 	add.w	r9, r1, #8
 1021c0a:	460b      	mov	r3, r1
 1021c0c:	f7ff bb41 	b.w	1021292 <_vfprintf_r+0xc4a>
 1021c10:	9b08      	ldr	r3, [sp, #32]
 1021c12:	9509      	str	r5, [sp, #36]	; 0x24
 1021c14:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1021c18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 1021c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 1021c1e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1021c22:	930a      	str	r3, [sp, #40]	; 0x28
 1021c24:	f7fe bea9 	b.w	102097a <_vfprintf_r+0x332>
 1021c28:	aa28      	add	r2, sp, #160	; 0xa0
 1021c2a:	9905      	ldr	r1, [sp, #20]
 1021c2c:	4650      	mov	r0, sl
 1021c2e:	f004 faa5 	bl	102617c <__sprint_r>
 1021c32:	2800      	cmp	r0, #0
 1021c34:	f47f aaa4 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021c38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021c3a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021c3e:	f7ff bbb2 	b.w	10213a6 <_vfprintf_r+0xd5e>
 1021c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021c44:	4619      	mov	r1, r3
 1021c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1021c48:	4419      	add	r1, r3
 1021c4a:	1b1b      	subs	r3, r3, r4
 1021c4c:	1b4c      	subs	r4, r1, r5
 1021c4e:	429c      	cmp	r4, r3
 1021c50:	bfa8      	it	ge
 1021c52:	461c      	movge	r4, r3
 1021c54:	f7ff bbe8 	b.w	1021428 <_vfprintf_r+0xde0>
 1021c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1021c5a:	9309      	str	r3, [sp, #36]	; 0x24
 1021c5c:	9b06      	ldr	r3, [sp, #24]
 1021c5e:	6812      	ldr	r2, [r2, #0]
 1021c60:	8013      	strh	r3, [r2, #0]
 1021c62:	f7fe bd4d 	b.w	1020700 <_vfprintf_r+0xb8>
 1021c66:	681c      	ldr	r4, [r3, #0]
 1021c68:	9209      	str	r2, [sp, #36]	; 0x24
 1021c6a:	9603      	str	r6, [sp, #12]
 1021c6c:	17e5      	asrs	r5, r4, #31
 1021c6e:	4622      	mov	r2, r4
 1021c70:	462b      	mov	r3, r5
 1021c72:	f7ff b807 	b.w	1020c84 <_vfprintf_r+0x63c>
 1021c76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 1021c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1021c7a:	9404      	str	r4, [sp, #16]
 1021c7c:	f7fc fd40 	bl	101e700 <strlen>
 1021c80:	9413      	str	r4, [sp, #76]	; 0x4c
 1021c82:	9411      	str	r4, [sp, #68]	; 0x44
 1021c84:	940a      	str	r4, [sp, #40]	; 0x28
 1021c86:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1021c8a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1021c8e:	e9cd 0508 	strd	r0, r5, [sp, #32]
 1021c92:	9303      	str	r3, [sp, #12]
 1021c94:	f7fe be71 	b.w	102097a <_vfprintf_r+0x332>
 1021c98:	4650      	mov	r0, sl
 1021c9a:	aa28      	add	r2, sp, #160	; 0xa0
 1021c9c:	9905      	ldr	r1, [sp, #20]
 1021c9e:	f004 fa6d 	bl	102617c <__sprint_r>
 1021ca2:	f7fe bdff 	b.w	10208a4 <_vfprintf_r+0x25c>
 1021ca6:	1c59      	adds	r1, r3, #1
 1021ca8:	4650      	mov	r0, sl
 1021caa:	f7fa fd95 	bl	101c7d8 <_malloc_r>
 1021cae:	900b      	str	r0, [sp, #44]	; 0x2c
 1021cb0:	2800      	cmp	r0, #0
 1021cb2:	f000 81a9 	beq.w	1022008 <_vfprintf_r+0x19c0>
 1021cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021cb8:	930a      	str	r3, [sp, #40]	; 0x28
 1021cba:	e45a      	b.n	1021572 <_vfprintf_r+0xf2a>
 1021cbc:	2306      	movs	r3, #6
 1021cbe:	9304      	str	r3, [sp, #16]
 1021cc0:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 1021cc4:	930d      	str	r3, [sp, #52]	; 0x34
 1021cc6:	ee18 3a90 	vmov	r3, s17
 1021cca:	2b00      	cmp	r3, #0
 1021ccc:	f2c0 8234 	blt.w	1022138 <_vfprintf_r+0x1af0>
 1021cd0:	eeb0 cb48 	vmov.f64	d12, d8
 1021cd4:	2300      	movs	r3, #0
 1021cd6:	930c      	str	r3, [sp, #48]	; 0x30
 1021cd8:	2c46      	cmp	r4, #70	; 0x46
 1021cda:	f040 8178 	bne.w	1021fce <_vfprintf_r+0x1986>
 1021cde:	ab26      	add	r3, sp, #152	; 0x98
 1021ce0:	aa21      	add	r2, sp, #132	; 0x84
 1021ce2:	9301      	str	r3, [sp, #4]
 1021ce4:	2103      	movs	r1, #3
 1021ce6:	ab1f      	add	r3, sp, #124	; 0x7c
 1021ce8:	9200      	str	r2, [sp, #0]
 1021cea:	eeb0 0b4c 	vmov.f64	d0, d12
 1021cee:	9a04      	ldr	r2, [sp, #16]
 1021cf0:	4650      	mov	r0, sl
 1021cf2:	f000 fe0d 	bl	1022910 <_dtoa_r>
 1021cf6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 1021cf8:	eeb5 cb40 	vcmp.f64	d12, #0.0
 1021cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021d00:	7802      	ldrb	r2, [r0, #0]
 1021d02:	4603      	mov	r3, r0
 1021d04:	bf14      	ite	ne
 1021d06:	2301      	movne	r3, #1
 1021d08:	2300      	moveq	r3, #0
 1021d0a:	2a30      	cmp	r2, #48	; 0x30
 1021d0c:	bf14      	ite	ne
 1021d0e:	2300      	movne	r3, #0
 1021d10:	f003 0301 	andeq.w	r3, r3, #1
 1021d14:	900b      	str	r0, [sp, #44]	; 0x2c
 1021d16:	2b00      	cmp	r3, #0
 1021d18:	f040 8242 	bne.w	10221a0 <_vfprintf_r+0x1b58>
 1021d1c:	9b04      	ldr	r3, [sp, #16]
 1021d1e:	441d      	add	r5, r3
 1021d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021d22:	eeb5 cb40 	vcmp.f64	d12, #0.0
 1021d26:	441d      	add	r5, r3
 1021d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021d2c:	bf08      	it	eq
 1021d2e:	462b      	moveq	r3, r5
 1021d30:	f43f ae2e 	beq.w	1021990 <_vfprintf_r+0x1348>
 1021d34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1021d36:	42ab      	cmp	r3, r5
 1021d38:	f4bf ae2a 	bcs.w	1021990 <_vfprintf_r+0x1348>
 1021d3c:	2130      	movs	r1, #48	; 0x30
 1021d3e:	1c5a      	adds	r2, r3, #1
 1021d40:	9226      	str	r2, [sp, #152]	; 0x98
 1021d42:	7019      	strb	r1, [r3, #0]
 1021d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1021d46:	429d      	cmp	r5, r3
 1021d48:	d8f9      	bhi.n	1021d3e <_vfprintf_r+0x16f6>
 1021d4a:	e621      	b.n	1021990 <_vfprintf_r+0x1348>
 1021d4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1021d4e:	3b01      	subs	r3, #1
 1021d50:	9314      	str	r3, [sp, #80]	; 0x50
 1021d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1021d54:	3b01      	subs	r3, #1
 1021d56:	9311      	str	r3, [sp, #68]	; 0x44
 1021d58:	e6d2      	b.n	1021b00 <_vfprintf_r+0x14b8>
 1021d5a:	2c10      	cmp	r4, #16
 1021d5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 1021d5e:	dd21      	ble.n	1021da4 <_vfprintf_r+0x175c>
 1021d60:	2710      	movs	r7, #16
 1021d62:	e004      	b.n	1021d6e <_vfprintf_r+0x1726>
 1021d64:	01067e70 	.word	0x01067e70
 1021d68:	3c10      	subs	r4, #16
 1021d6a:	2c10      	cmp	r4, #16
 1021d6c:	dd1a      	ble.n	1021da4 <_vfprintf_r+0x175c>
 1021d6e:	3101      	adds	r1, #1
 1021d70:	4bb7      	ldr	r3, [pc, #732]	; (1022050 <_vfprintf_r+0x1a08>)
 1021d72:	2907      	cmp	r1, #7
 1021d74:	f102 0210 	add.w	r2, r2, #16
 1021d78:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021d7c:	e9c9 3700 	strd	r3, r7, [r9]
 1021d80:	f109 0908 	add.w	r9, r9, #8
 1021d84:	ddf0      	ble.n	1021d68 <_vfprintf_r+0x1720>
 1021d86:	aa28      	add	r2, sp, #160	; 0xa0
 1021d88:	4641      	mov	r1, r8
 1021d8a:	4650      	mov	r0, sl
 1021d8c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021d90:	f004 f9f4 	bl	102617c <__sprint_r>
 1021d94:	2800      	cmp	r0, #0
 1021d96:	f47f a9f3 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021d9a:	3c10      	subs	r4, #16
 1021d9c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1021da0:	2c10      	cmp	r4, #16
 1021da2:	dce4      	bgt.n	1021d6e <_vfprintf_r+0x1726>
 1021da4:	3101      	adds	r1, #1
 1021da6:	4baa      	ldr	r3, [pc, #680]	; (1022050 <_vfprintf_r+0x1a08>)
 1021da8:	2907      	cmp	r1, #7
 1021daa:	4422      	add	r2, r4
 1021dac:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1021db0:	e9c9 3400 	strd	r3, r4, [r9]
 1021db4:	dc7b      	bgt.n	1021eae <_vfprintf_r+0x1866>
 1021db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1021db8:	f109 0908 	add.w	r9, r9, #8
 1021dbc:	781b      	ldrb	r3, [r3, #0]
 1021dbe:	e6d0      	b.n	1021b62 <_vfprintf_r+0x151a>
 1021dc0:	aa28      	add	r2, sp, #160	; 0xa0
 1021dc2:	4641      	mov	r1, r8
 1021dc4:	4650      	mov	r0, sl
 1021dc6:	f004 f9d9 	bl	102617c <__sprint_r>
 1021dca:	2800      	cmp	r0, #0
 1021dcc:	f47f a9d8 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021dd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021dd2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021dd6:	e6a4      	b.n	1021b22 <_vfprintf_r+0x14da>
 1021dd8:	aa28      	add	r2, sp, #160	; 0xa0
 1021dda:	4641      	mov	r1, r8
 1021ddc:	4650      	mov	r0, sl
 1021dde:	f004 f9cd 	bl	102617c <__sprint_r>
 1021de2:	2800      	cmp	r0, #0
 1021de4:	f47f a9cc 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1021dea:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021dee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021df0:	781b      	ldrb	r3, [r3, #0]
 1021df2:	e6af      	b.n	1021b54 <_vfprintf_r+0x150c>
 1021df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1021df6:	4619      	mov	r1, r3
 1021df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1021dfa:	4299      	cmp	r1, r3
 1021dfc:	f300 8097 	bgt.w	1021f2e <_vfprintf_r+0x18e6>
 1021e00:	07f5      	lsls	r5, r6, #31
 1021e02:	f140 8121 	bpl.w	1022048 <_vfprintf_r+0x1a00>
 1021e06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1021e08:	4413      	add	r3, r2
 1021e0a:	9308      	str	r3, [sp, #32]
 1021e0c:	0574      	lsls	r4, r6, #21
 1021e0e:	d503      	bpl.n	1021e18 <_vfprintf_r+0x17d0>
 1021e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1021e12:	2b00      	cmp	r3, #0
 1021e14:	f300 8139 	bgt.w	102208a <_vfprintf_r+0x1a42>
 1021e18:	9b08      	ldr	r3, [sp, #32]
 1021e1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1021e1e:	9303      	str	r3, [sp, #12]
 1021e20:	2367      	movs	r3, #103	; 0x67
 1021e22:	930e      	str	r3, [sp, #56]	; 0x38
 1021e24:	2300      	movs	r3, #0
 1021e26:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 1021e28:	930a      	str	r3, [sp, #40]	; 0x28
 1021e2a:	9313      	str	r3, [sp, #76]	; 0x4c
 1021e2c:	9311      	str	r3, [sp, #68]	; 0x44
 1021e2e:	e62d      	b.n	1021a8c <_vfprintf_r+0x1444>
 1021e30:	2c46      	cmp	r4, #70	; 0x46
 1021e32:	f040 81cf 	bne.w	10221d4 <_vfprintf_r+0x1b8c>
 1021e36:	9910      	ldr	r1, [sp, #64]	; 0x40
 1021e38:	f006 0301 	and.w	r3, r6, #1
 1021e3c:	9a04      	ldr	r2, [sp, #16]
 1021e3e:	2900      	cmp	r1, #0
 1021e40:	ea43 0302 	orr.w	r3, r3, r2
 1021e44:	f340 818c 	ble.w	1022160 <_vfprintf_r+0x1b18>
 1021e48:	2b00      	cmp	r3, #0
 1021e4a:	f040 8149 	bne.w	10220e0 <_vfprintf_r+0x1a98>
 1021e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1021e50:	9308      	str	r3, [sp, #32]
 1021e52:	2366      	movs	r3, #102	; 0x66
 1021e54:	930e      	str	r3, [sp, #56]	; 0x38
 1021e56:	0572      	lsls	r2, r6, #21
 1021e58:	f100 8119 	bmi.w	102208e <_vfprintf_r+0x1a46>
 1021e5c:	9b08      	ldr	r3, [sp, #32]
 1021e5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1021e62:	9303      	str	r3, [sp, #12]
 1021e64:	e7de      	b.n	1021e24 <_vfprintf_r+0x17dc>
 1021e66:	212d      	movs	r1, #45	; 0x2d
 1021e68:	2300      	movs	r3, #0
 1021e6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 1021e6e:	9304      	str	r3, [sp, #16]
 1021e70:	f7fe bd84 	b.w	102097c <_vfprintf_r+0x334>
 1021e74:	aa28      	add	r2, sp, #160	; 0xa0
 1021e76:	9905      	ldr	r1, [sp, #20]
 1021e78:	4650      	mov	r0, sl
 1021e7a:	f004 f97f 	bl	102617c <__sprint_r>
 1021e7e:	2800      	cmp	r0, #0
 1021e80:	f47f a97e 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021e84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021e86:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021e8a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1021e8c:	f7ff b994 	b.w	10211b8 <_vfprintf_r+0xb70>
 1021e90:	aa28      	add	r2, sp, #160	; 0xa0
 1021e92:	9905      	ldr	r1, [sp, #20]
 1021e94:	4650      	mov	r0, sl
 1021e96:	f004 f971 	bl	102617c <__sprint_r>
 1021e9a:	2800      	cmp	r0, #0
 1021e9c:	f47f a970 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021ea0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1021ea2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021ea6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1021eaa:	f7ff b99a 	b.w	10211e2 <_vfprintf_r+0xb9a>
 1021eae:	aa28      	add	r2, sp, #160	; 0xa0
 1021eb0:	4641      	mov	r1, r8
 1021eb2:	4650      	mov	r0, sl
 1021eb4:	f004 f962 	bl	102617c <__sprint_r>
 1021eb8:	2800      	cmp	r0, #0
 1021eba:	f47f a961 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1021ec0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021ec4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021ec6:	781b      	ldrb	r3, [r3, #0]
 1021ec8:	e64b      	b.n	1021b62 <_vfprintf_r+0x151a>
 1021eca:	07f0      	lsls	r0, r6, #31
 1021ecc:	f57e adad 	bpl.w	1020a2a <_vfprintf_r+0x3e2>
 1021ed0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1021ed2:	9915      	ldr	r1, [sp, #84]	; 0x54
 1021ed4:	3301      	adds	r3, #1
 1021ed6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 1021ed8:	2b07      	cmp	r3, #7
 1021eda:	440a      	add	r2, r1
 1021edc:	f8c9 1004 	str.w	r1, [r9, #4]
 1021ee0:	f8c9 0000 	str.w	r0, [r9]
 1021ee4:	922a      	str	r2, [sp, #168]	; 0xa8
 1021ee6:	9329      	str	r3, [sp, #164]	; 0xa4
 1021ee8:	dcd2      	bgt.n	1021e90 <_vfprintf_r+0x1848>
 1021eea:	f109 0908 	add.w	r9, r9, #8
 1021eee:	f7ff b97b 	b.w	10211e8 <_vfprintf_r+0xba0>
 1021ef2:	aa28      	add	r2, sp, #160	; 0xa0
 1021ef4:	9905      	ldr	r1, [sp, #20]
 1021ef6:	4650      	mov	r0, sl
 1021ef8:	f004 f940 	bl	102617c <__sprint_r>
 1021efc:	2800      	cmp	r0, #0
 1021efe:	f47f a93f 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021f02:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 1021f04:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021f08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021f0a:	f7ff ba73 	b.w	10213f4 <_vfprintf_r+0xdac>
 1021f0e:	aa28      	add	r2, sp, #160	; 0xa0
 1021f10:	9905      	ldr	r1, [sp, #20]
 1021f12:	4650      	mov	r0, sl
 1021f14:	f004 f932 	bl	102617c <__sprint_r>
 1021f18:	2800      	cmp	r0, #0
 1021f1a:	f47f a931 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1021f20:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021f24:	9912      	ldr	r1, [sp, #72]	; 0x48
 1021f26:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1021f28:	1acb      	subs	r3, r1, r3
 1021f2a:	f7ff ba7d 	b.w	1021428 <_vfprintf_r+0xde0>
 1021f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1021f30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1021f32:	189a      	adds	r2, r3, r2
 1021f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1021f36:	9208      	str	r2, [sp, #32]
 1021f38:	2b00      	cmp	r3, #0
 1021f3a:	bfc4      	itt	gt
 1021f3c:	2367      	movgt	r3, #103	; 0x67
 1021f3e:	930e      	strgt	r3, [sp, #56]	; 0x38
 1021f40:	dc89      	bgt.n	1021e56 <_vfprintf_r+0x180e>
 1021f42:	f1c3 0301 	rsb	r3, r3, #1
 1021f46:	2167      	movs	r1, #103	; 0x67
 1021f48:	441a      	add	r2, r3
 1021f4a:	910e      	str	r1, [sp, #56]	; 0x38
 1021f4c:	9208      	str	r2, [sp, #32]
 1021f4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1021f52:	9303      	str	r3, [sp, #12]
 1021f54:	e766      	b.n	1021e24 <_vfprintf_r+0x17dc>
 1021f56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 1021f58:	991a      	ldr	r1, [sp, #104]	; 0x68
 1021f5a:	ebaa 0a02 	sub.w	sl, sl, r2
 1021f5e:	4650      	mov	r0, sl
 1021f60:	f7fc fcbc 	bl	101e8dc <strncpy>
 1021f64:	f898 3001 	ldrb.w	r3, [r8, #1]
 1021f68:	b10b      	cbz	r3, 1021f6e <_vfprintf_r+0x1926>
 1021f6a:	f108 0801 	add.w	r8, r8, #1
 1021f6e:	4620      	mov	r0, r4
 1021f70:	4629      	mov	r1, r5
 1021f72:	220a      	movs	r2, #10
 1021f74:	2300      	movs	r3, #0
 1021f76:	f7f9 fd27 	bl	101b9c8 <__aeabi_uldivmod>
 1021f7a:	f04f 0900 	mov.w	r9, #0
 1021f7e:	e482      	b.n	1021886 <_vfprintf_r+0x123e>
 1021f80:	424c      	negs	r4, r1
 1021f82:	3110      	adds	r1, #16
 1021f84:	da48      	bge.n	1022018 <_vfprintf_r+0x19d0>
 1021f86:	2510      	movs	r5, #16
 1021f88:	e002      	b.n	1021f90 <_vfprintf_r+0x1948>
 1021f8a:	3c10      	subs	r4, #16
 1021f8c:	2c10      	cmp	r4, #16
 1021f8e:	dd43      	ble.n	1022018 <_vfprintf_r+0x19d0>
 1021f90:	3301      	adds	r3, #1
 1021f92:	492f      	ldr	r1, [pc, #188]	; (1022050 <_vfprintf_r+0x1a08>)
 1021f94:	2b07      	cmp	r3, #7
 1021f96:	f102 0210 	add.w	r2, r2, #16
 1021f9a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1021f9e:	e9c9 1500 	strd	r1, r5, [r9]
 1021fa2:	f109 0908 	add.w	r9, r9, #8
 1021fa6:	ddf0      	ble.n	1021f8a <_vfprintf_r+0x1942>
 1021fa8:	aa28      	add	r2, sp, #160	; 0xa0
 1021faa:	9905      	ldr	r1, [sp, #20]
 1021fac:	4650      	mov	r0, sl
 1021fae:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1021fb2:	f004 f8e3 	bl	102617c <__sprint_r>
 1021fb6:	2800      	cmp	r0, #0
 1021fb8:	f47f a8e2 	bne.w	1021180 <_vfprintf_r+0xb38>
 1021fbc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1021fc0:	e7e3      	b.n	1021f8a <_vfprintf_r+0x1942>
 1021fc2:	2300      	movs	r3, #0
 1021fc4:	eeb0 0b48 	vmov.f64	d0, d8
 1021fc8:	930c      	str	r3, [sp, #48]	; 0x30
 1021fca:	f7ff badb 	b.w	1021584 <_vfprintf_r+0xf3c>
 1021fce:	2c45      	cmp	r4, #69	; 0x45
 1021fd0:	f040 80fd 	bne.w	10221ce <_vfprintf_r+0x1b86>
 1021fd4:	9b04      	ldr	r3, [sp, #16]
 1021fd6:	aa26      	add	r2, sp, #152	; 0x98
 1021fd8:	2102      	movs	r1, #2
 1021fda:	9201      	str	r2, [sp, #4]
 1021fdc:	1c5d      	adds	r5, r3, #1
 1021fde:	eeb0 0b4c 	vmov.f64	d0, d12
 1021fe2:	ab21      	add	r3, sp, #132	; 0x84
 1021fe4:	4650      	mov	r0, sl
 1021fe6:	9300      	str	r3, [sp, #0]
 1021fe8:	462a      	mov	r2, r5
 1021fea:	ab1f      	add	r3, sp, #124	; 0x7c
 1021fec:	f000 fc90 	bl	1022910 <_dtoa_r>
 1021ff0:	900b      	str	r0, [sp, #44]	; 0x2c
 1021ff2:	e695      	b.n	1021d20 <_vfprintf_r+0x16d8>
 1021ff4:	f04f 33ff 	mov.w	r3, #4294967295
 1021ff8:	9306      	str	r3, [sp, #24]
 1021ffa:	f7fe bc59 	b.w	10208b0 <_vfprintf_r+0x268>
 1021ffe:	2300      	movs	r3, #0
 1022000:	930a      	str	r3, [sp, #40]	; 0x28
 1022002:	ab3b      	add	r3, sp, #236	; 0xec
 1022004:	930b      	str	r3, [sp, #44]	; 0x2c
 1022006:	e5db      	b.n	1021bc0 <_vfprintf_r+0x1578>
 1022008:	9a05      	ldr	r2, [sp, #20]
 102200a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 102200e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1022012:	8193      	strh	r3, [r2, #12]
 1022014:	f7fe bc49 	b.w	10208aa <_vfprintf_r+0x262>
 1022018:	3301      	adds	r3, #1
 102201a:	490d      	ldr	r1, [pc, #52]	; (1022050 <_vfprintf_r+0x1a08>)
 102201c:	2b07      	cmp	r3, #7
 102201e:	4422      	add	r2, r4
 1022020:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1022024:	e9c9 1400 	strd	r1, r4, [r9]
 1022028:	f77f af5f 	ble.w	1021eea <_vfprintf_r+0x18a2>
 102202c:	aa28      	add	r2, sp, #160	; 0xa0
 102202e:	9905      	ldr	r1, [sp, #20]
 1022030:	4650      	mov	r0, sl
 1022032:	f004 f8a3 	bl	102617c <__sprint_r>
 1022036:	2800      	cmp	r0, #0
 1022038:	f47f a8a2 	bne.w	1021180 <_vfprintf_r+0xb38>
 102203c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102203e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1022042:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1022044:	f7ff b8d0 	b.w	10211e8 <_vfprintf_r+0xba0>
 1022048:	9b10      	ldr	r3, [sp, #64]	; 0x40
 102204a:	9308      	str	r3, [sp, #32]
 102204c:	e6de      	b.n	1021e0c <_vfprintf_r+0x17c4>
 102204e:	bf00      	nop
 1022050:	01067e70 	.word	0x01067e70
 1022054:	9526      	str	r5, [sp, #152]	; 0x98
 1022056:	4619      	mov	r1, r3
 1022058:	7bc5      	ldrb	r5, [r0, #15]
 102205a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 102205e:	4295      	cmp	r5, r2
 1022060:	d10a      	bne.n	1022078 <_vfprintf_r+0x1a30>
 1022062:	f04f 0c30 	mov.w	ip, #48	; 0x30
 1022066:	f801 cc01 	strb.w	ip, [r1, #-1]
 102206a:	9926      	ldr	r1, [sp, #152]	; 0x98
 102206c:	1e4a      	subs	r2, r1, #1
 102206e:	9226      	str	r2, [sp, #152]	; 0x98
 1022070:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 1022074:	4295      	cmp	r5, r2
 1022076:	d0f6      	beq.n	1022066 <_vfprintf_r+0x1a1e>
 1022078:	2a39      	cmp	r2, #57	; 0x39
 102207a:	bf16      	itet	ne
 102207c:	3201      	addne	r2, #1
 102207e:	7a82      	ldrbeq	r2, [r0, #10]
 1022080:	b2d2      	uxtbne	r2, r2
 1022082:	f801 2c01 	strb.w	r2, [r1, #-1]
 1022086:	f7ff bace 	b.w	1021626 <_vfprintf_r+0xfde>
 102208a:	2367      	movs	r3, #103	; 0x67
 102208c:	930e      	str	r3, [sp, #56]	; 0x38
 102208e:	9814      	ldr	r0, [sp, #80]	; 0x50
 1022090:	2200      	movs	r2, #0
 1022092:	9213      	str	r2, [sp, #76]	; 0x4c
 1022094:	9211      	str	r2, [sp, #68]	; 0x44
 1022096:	7803      	ldrb	r3, [r0, #0]
 1022098:	9a10      	ldr	r2, [sp, #64]	; 0x40
 102209a:	2bff      	cmp	r3, #255	; 0xff
 102209c:	d00b      	beq.n	10220b6 <_vfprintf_r+0x1a6e>
 102209e:	4293      	cmp	r3, r2
 10220a0:	da09      	bge.n	10220b6 <_vfprintf_r+0x1a6e>
 10220a2:	7841      	ldrb	r1, [r0, #1]
 10220a4:	1ad2      	subs	r2, r2, r3
 10220a6:	b1b9      	cbz	r1, 10220d8 <_vfprintf_r+0x1a90>
 10220a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10220aa:	3001      	adds	r0, #1
 10220ac:	3301      	adds	r3, #1
 10220ae:	9311      	str	r3, [sp, #68]	; 0x44
 10220b0:	460b      	mov	r3, r1
 10220b2:	2bff      	cmp	r3, #255	; 0xff
 10220b4:	d1f3      	bne.n	102209e <_vfprintf_r+0x1a56>
 10220b6:	9210      	str	r2, [sp, #64]	; 0x40
 10220b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10220ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 10220bc:	9908      	ldr	r1, [sp, #32]
 10220be:	4413      	add	r3, r2
 10220c0:	2200      	movs	r2, #0
 10220c2:	920a      	str	r2, [sp, #40]	; 0x28
 10220c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 10220c6:	9014      	str	r0, [sp, #80]	; 0x50
 10220c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 10220ca:	fb02 1303 	mla	r3, r2, r3, r1
 10220ce:	9308      	str	r3, [sp, #32]
 10220d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10220d4:	9303      	str	r3, [sp, #12]
 10220d6:	e4d9      	b.n	1021a8c <_vfprintf_r+0x1444>
 10220d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 10220da:	3101      	adds	r1, #1
 10220dc:	9113      	str	r1, [sp, #76]	; 0x4c
 10220de:	e7dc      	b.n	102209a <_vfprintf_r+0x1a52>
 10220e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 10220e2:	18cb      	adds	r3, r1, r3
 10220e4:	2166      	movs	r1, #102	; 0x66
 10220e6:	441a      	add	r2, r3
 10220e8:	910e      	str	r1, [sp, #56]	; 0x38
 10220ea:	9208      	str	r2, [sp, #32]
 10220ec:	e6b3      	b.n	1021e56 <_vfprintf_r+0x180e>
 10220ee:	ee18 3a90 	vmov	r3, s17
 10220f2:	f24c 1474 	movw	r4, #49524	; 0xc174
 10220f6:	f2c0 1406 	movt	r4, #262	; 0x106
 10220fa:	2b00      	cmp	r3, #0
 10220fc:	f24c 1370 	movw	r3, #49520	; 0xc170
 1022100:	f2c0 1306 	movt	r3, #262	; 0x106
 1022104:	bfb6      	itet	lt
 1022106:	212d      	movlt	r1, #45	; 0x2d
 1022108:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 102210c:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 1022110:	f7fe bd98 	b.w	1020c44 <_vfprintf_r+0x5fc>
 1022114:	2c41      	cmp	r4, #65	; 0x41
 1022116:	a922      	add	r1, sp, #136	; 0x88
 1022118:	bf08      	it	eq
 102211a:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 102211e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1022122:	bf1e      	ittt	ne
 1022124:	2330      	movne	r3, #48	; 0x30
 1022126:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 102212a:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 102212e:	f803 2b01 	strb.w	r2, [r3], #1
 1022132:	1a5b      	subs	r3, r3, r1
 1022134:	9318      	str	r3, [sp, #96]	; 0x60
 1022136:	e492      	b.n	1021a5e <_vfprintf_r+0x1416>
 1022138:	232d      	movs	r3, #45	; 0x2d
 102213a:	eeb1 cb48 	vneg.f64	d12, d8
 102213e:	930c      	str	r3, [sp, #48]	; 0x30
 1022140:	e5ca      	b.n	1021cd8 <_vfprintf_r+0x1690>
 1022142:	9b04      	ldr	r3, [sp, #16]
 1022144:	9509      	str	r5, [sp, #36]	; 0x24
 1022146:	9004      	str	r0, [sp, #16]
 1022148:	9303      	str	r3, [sp, #12]
 102214a:	9308      	str	r3, [sp, #32]
 102214c:	9013      	str	r0, [sp, #76]	; 0x4c
 102214e:	9011      	str	r0, [sp, #68]	; 0x44
 1022150:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1022154:	f7fe bc11 	b.w	102097a <_vfprintf_r+0x332>
 1022158:	07f3      	lsls	r3, r6, #31
 102215a:	f57f ac8b 	bpl.w	1021a74 <_vfprintf_r+0x142c>
 102215e:	e485      	b.n	1021a6c <_vfprintf_r+0x1424>
 1022160:	b92b      	cbnz	r3, 102216e <_vfprintf_r+0x1b26>
 1022162:	2301      	movs	r3, #1
 1022164:	2266      	movs	r2, #102	; 0x66
 1022166:	9303      	str	r3, [sp, #12]
 1022168:	920e      	str	r2, [sp, #56]	; 0x38
 102216a:	9308      	str	r3, [sp, #32]
 102216c:	e65a      	b.n	1021e24 <_vfprintf_r+0x17dc>
 102216e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 1022170:	2266      	movs	r2, #102	; 0x66
 1022172:	920e      	str	r2, [sp, #56]	; 0x38
 1022174:	9a04      	ldr	r2, [sp, #16]
 1022176:	3301      	adds	r3, #1
 1022178:	441a      	add	r2, r3
 102217a:	9208      	str	r2, [sp, #32]
 102217c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1022180:	9303      	str	r3, [sp, #12]
 1022182:	e64f      	b.n	1021e24 <_vfprintf_r+0x17dc>
 1022184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1022186:	787b      	ldrb	r3, [r7, #1]
 1022188:	460f      	mov	r7, r1
 102218a:	f852 0b04 	ldr.w	r0, [r2], #4
 102218e:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1022192:	9209      	str	r2, [sp, #36]	; 0x24
 1022194:	9104      	str	r1, [sp, #16]
 1022196:	f7fe bae0 	b.w	102075a <_vfprintf_r+0x112>
 102219a:	4649      	mov	r1, r9
 102219c:	f7ff ba8c 	b.w	10216b8 <_vfprintf_r+0x1070>
 10221a0:	9b04      	ldr	r3, [sp, #16]
 10221a2:	f1c3 0501 	rsb	r5, r3, #1
 10221a6:	951f      	str	r5, [sp, #124]	; 0x7c
 10221a8:	e5b8      	b.n	1021d1c <_vfprintf_r+0x16d4>
 10221aa:	9a05      	ldr	r2, [sp, #20]
 10221ac:	8993      	ldrh	r3, [r2, #12]
 10221ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10221b2:	8193      	strh	r3, [r2, #12]
 10221b4:	f7fe bfe4 	b.w	1021180 <_vfprintf_r+0xb38>
 10221b8:	2302      	movs	r3, #2
 10221ba:	9318      	str	r3, [sp, #96]	; 0x60
 10221bc:	e44f      	b.n	1021a5e <_vfprintf_r+0x1416>
 10221be:	9603      	str	r6, [sp, #12]
 10221c0:	f7fe bdb4 	b.w	1020d2c <_vfprintf_r+0x6e4>
 10221c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10221c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 10221c8:	440b      	add	r3, r1
 10221ca:	9304      	str	r3, [sp, #16]
 10221cc:	e4d3      	b.n	1021b76 <_vfprintf_r+0x152e>
 10221ce:	9d04      	ldr	r5, [sp, #16]
 10221d0:	f7ff bbca 	b.w	1021968 <_vfprintf_r+0x1320>
 10221d4:	2300      	movs	r3, #0
 10221d6:	930a      	str	r3, [sp, #40]	; 0x28
 10221d8:	f7ff bbf1 	b.w	10219be <_vfprintf_r+0x1376>
 10221dc:	4633      	mov	r3, r6
 10221de:	f7fe bde2 	b.w	1020da6 <_vfprintf_r+0x75e>
 10221e2:	9603      	str	r6, [sp, #12]
 10221e4:	f7fe bdf1 	b.w	1020dca <_vfprintf_r+0x782>

010221e8 <vfprintf>:
 10221e8:	b410      	push	{r4}
 10221ea:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 10221ee:	f2c0 1406 	movt	r4, #262	; 0x106
 10221f2:	4613      	mov	r3, r2
 10221f4:	460a      	mov	r2, r1
 10221f6:	4601      	mov	r1, r0
 10221f8:	6820      	ldr	r0, [r4, #0]
 10221fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 10221fe:	f7fe ba23 	b.w	1020648 <_vfprintf_r>
 1022202:	bf00      	nop

01022204 <__sbprintf>:
 1022204:	b5f0      	push	{r4, r5, r6, r7, lr}
 1022206:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 102220a:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 102220c:	460c      	mov	r4, r1
 102220e:	898d      	ldrh	r5, [r1, #12]
 1022210:	2700      	movs	r7, #0
 1022212:	9706      	str	r7, [sp, #24]
 1022214:	4669      	mov	r1, sp
 1022216:	89e7      	ldrh	r7, [r4, #14]
 1022218:	f025 0502 	bic.w	r5, r5, #2
 102221c:	9619      	str	r6, [sp, #100]	; 0x64
 102221e:	f8ad 500c 	strh.w	r5, [sp, #12]
 1022222:	69e6      	ldr	r6, [r4, #28]
 1022224:	6a65      	ldr	r5, [r4, #36]	; 0x24
 1022226:	f8ad 700e 	strh.w	r7, [sp, #14]
 102222a:	9607      	str	r6, [sp, #28]
 102222c:	ae1a      	add	r6, sp, #104	; 0x68
 102222e:	9509      	str	r5, [sp, #36]	; 0x24
 1022230:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1022234:	9600      	str	r6, [sp, #0]
 1022236:	9604      	str	r6, [sp, #16]
 1022238:	4606      	mov	r6, r0
 102223a:	9502      	str	r5, [sp, #8]
 102223c:	9505      	str	r5, [sp, #20]
 102223e:	f7fe fa03 	bl	1020648 <_vfprintf_r>
 1022242:	1e05      	subs	r5, r0, #0
 1022244:	db07      	blt.n	1022256 <__sbprintf+0x52>
 1022246:	4630      	mov	r0, r6
 1022248:	4669      	mov	r1, sp
 102224a:	f001 fa8d 	bl	1023768 <_fflush_r>
 102224e:	2800      	cmp	r0, #0
 1022250:	bf18      	it	ne
 1022252:	f04f 35ff 	movne.w	r5, #4294967295
 1022256:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 102225a:	4628      	mov	r0, r5
 102225c:	065b      	lsls	r3, r3, #25
 102225e:	bf42      	ittt	mi
 1022260:	89a3      	ldrhmi	r3, [r4, #12]
 1022262:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 1022266:	81a3      	strhmi	r3, [r4, #12]
 1022268:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 102226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102226e:	bf00      	nop

01022270 <_vsnprintf_r>:
 1022270:	b530      	push	{r4, r5, lr}
 1022272:	1e14      	subs	r4, r2, #0
 1022274:	4605      	mov	r5, r0
 1022276:	b09b      	sub	sp, #108	; 0x6c
 1022278:	bfbe      	ittt	lt
 102227a:	238b      	movlt	r3, #139	; 0x8b
 102227c:	f04f 30ff 	movlt.w	r0, #4294967295
 1022280:	602b      	strlt	r3, [r5, #0]
 1022282:	db15      	blt.n	10222b0 <_vsnprintf_r+0x40>
 1022284:	461a      	mov	r2, r3
 1022286:	9100      	str	r1, [sp, #0]
 1022288:	f44f 7302 	mov.w	r3, #520	; 0x208
 102228c:	9104      	str	r1, [sp, #16]
 102228e:	f8ad 300c 	strh.w	r3, [sp, #12]
 1022292:	4669      	mov	r1, sp
 1022294:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 1022296:	d10d      	bne.n	10222b4 <_vsnprintf_r+0x44>
 1022298:	9402      	str	r4, [sp, #8]
 102229a:	9405      	str	r4, [sp, #20]
 102229c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10222a0:	f8ad 400e 	strh.w	r4, [sp, #14]
 10222a4:	f7fc fc28 	bl	101eaf8 <_svfprintf_r>
 10222a8:	1c43      	adds	r3, r0, #1
 10222aa:	da01      	bge.n	10222b0 <_vsnprintf_r+0x40>
 10222ac:	238b      	movs	r3, #139	; 0x8b
 10222ae:	602b      	str	r3, [r5, #0]
 10222b0:	b01b      	add	sp, #108	; 0x6c
 10222b2:	bd30      	pop	{r4, r5, pc}
 10222b4:	3c01      	subs	r4, #1
 10222b6:	9402      	str	r4, [sp, #8]
 10222b8:	9405      	str	r4, [sp, #20]
 10222ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10222be:	f8ad 400e 	strh.w	r4, [sp, #14]
 10222c2:	f7fc fc19 	bl	101eaf8 <_svfprintf_r>
 10222c6:	1c42      	adds	r2, r0, #1
 10222c8:	f04f 0200 	mov.w	r2, #0
 10222cc:	bfbc      	itt	lt
 10222ce:	238b      	movlt	r3, #139	; 0x8b
 10222d0:	602b      	strlt	r3, [r5, #0]
 10222d2:	9b00      	ldr	r3, [sp, #0]
 10222d4:	701a      	strb	r2, [r3, #0]
 10222d6:	b01b      	add	sp, #108	; 0x6c
 10222d8:	bd30      	pop	{r4, r5, pc}
 10222da:	bf00      	nop

010222dc <vsnprintf>:
 10222dc:	b510      	push	{r4, lr}
 10222de:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 10222e2:	b082      	sub	sp, #8
 10222e4:	f2c0 1406 	movt	r4, #262	; 0x106
 10222e8:	9300      	str	r3, [sp, #0]
 10222ea:	4613      	mov	r3, r2
 10222ec:	460a      	mov	r2, r1
 10222ee:	4601      	mov	r1, r0
 10222f0:	6820      	ldr	r0, [r4, #0]
 10222f2:	f7ff ffbd 	bl	1022270 <_vsnprintf_r>
 10222f6:	b002      	add	sp, #8
 10222f8:	bd10      	pop	{r4, pc}
 10222fa:	bf00      	nop

010222fc <_wcrtomb_r>:
 10222fc:	b570      	push	{r4, r5, r6, lr}
 10222fe:	4605      	mov	r5, r0
 1022300:	b084      	sub	sp, #16
 1022302:	f500 748a 	add.w	r4, r0, #276	; 0x114
 1022306:	b103      	cbz	r3, 102230a <_wcrtomb_r+0xe>
 1022308:	461c      	mov	r4, r3
 102230a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 102230e:	f2c0 1306 	movt	r3, #262	; 0x106
 1022312:	681b      	ldr	r3, [r3, #0]
 1022314:	6b58      	ldr	r0, [r3, #52]	; 0x34
 1022316:	f64c 23e8 	movw	r3, #51944	; 0xcae8
 102231a:	f2c0 1306 	movt	r3, #262	; 0x106
 102231e:	2800      	cmp	r0, #0
 1022320:	bf08      	it	eq
 1022322:	4618      	moveq	r0, r3
 1022324:	b161      	cbz	r1, 1022340 <_wcrtomb_r+0x44>
 1022326:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 102232a:	4623      	mov	r3, r4
 102232c:	4628      	mov	r0, r5
 102232e:	47b0      	blx	r6
 1022330:	1c43      	adds	r3, r0, #1
 1022332:	bf01      	itttt	eq
 1022334:	2200      	moveq	r2, #0
 1022336:	238a      	moveq	r3, #138	; 0x8a
 1022338:	6022      	streq	r2, [r4, #0]
 102233a:	602b      	streq	r3, [r5, #0]
 102233c:	b004      	add	sp, #16
 102233e:	bd70      	pop	{r4, r5, r6, pc}
 1022340:	460a      	mov	r2, r1
 1022342:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 1022346:	4623      	mov	r3, r4
 1022348:	a901      	add	r1, sp, #4
 102234a:	4628      	mov	r0, r5
 102234c:	47b0      	blx	r6
 102234e:	e7ef      	b.n	1022330 <_wcrtomb_r+0x34>

01022350 <wcrtomb>:
 1022350:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 1022354:	f2c0 1306 	movt	r3, #262	; 0x106
 1022358:	b570      	push	{r4, r5, r6, lr}
 102235a:	b084      	sub	sp, #16
 102235c:	681d      	ldr	r5, [r3, #0]
 102235e:	f505 768a 	add.w	r6, r5, #276	; 0x114
 1022362:	b102      	cbz	r2, 1022366 <wcrtomb+0x16>
 1022364:	4616      	mov	r6, r2
 1022366:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 1022368:	f64c 23e8 	movw	r3, #51944	; 0xcae8
 102236c:	f2c0 1306 	movt	r3, #262	; 0x106
 1022370:	2c00      	cmp	r4, #0
 1022372:	bf08      	it	eq
 1022374:	461c      	moveq	r4, r3
 1022376:	b170      	cbz	r0, 1022396 <wcrtomb+0x46>
 1022378:	460a      	mov	r2, r1
 102237a:	4633      	mov	r3, r6
 102237c:	4601      	mov	r1, r0
 102237e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1022382:	4628      	mov	r0, r5
 1022384:	47a0      	blx	r4
 1022386:	1c43      	adds	r3, r0, #1
 1022388:	bf01      	itttt	eq
 102238a:	2200      	moveq	r2, #0
 102238c:	238a      	moveq	r3, #138	; 0x8a
 102238e:	6032      	streq	r2, [r6, #0]
 1022390:	602b      	streq	r3, [r5, #0]
 1022392:	b004      	add	sp, #16
 1022394:	bd70      	pop	{r4, r5, r6, pc}
 1022396:	4602      	mov	r2, r0
 1022398:	4633      	mov	r3, r6
 102239a:	a901      	add	r1, sp, #4
 102239c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 10223a0:	4628      	mov	r0, r5
 10223a2:	47a0      	blx	r4
 10223a4:	e7ef      	b.n	1022386 <wcrtomb+0x36>
 10223a6:	bf00      	nop

010223a8 <_wcsrtombs_r>:
 10223a8:	b510      	push	{r4, lr}
 10223aa:	b082      	sub	sp, #8
 10223ac:	9c04      	ldr	r4, [sp, #16]
 10223ae:	9300      	str	r3, [sp, #0]
 10223b0:	f04f 33ff 	mov.w	r3, #4294967295
 10223b4:	9401      	str	r4, [sp, #4]
 10223b6:	f004 ff67 	bl	1027288 <_wcsnrtombs_r>
 10223ba:	b002      	add	sp, #8
 10223bc:	bd10      	pop	{r4, pc}
 10223be:	bf00      	nop

010223c0 <wcsrtombs>:
 10223c0:	b510      	push	{r4, lr}
 10223c2:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 10223c6:	b082      	sub	sp, #8
 10223c8:	f2c0 1406 	movt	r4, #262	; 0x106
 10223cc:	9200      	str	r2, [sp, #0]
 10223ce:	460a      	mov	r2, r1
 10223d0:	9301      	str	r3, [sp, #4]
 10223d2:	4601      	mov	r1, r0
 10223d4:	f04f 33ff 	mov.w	r3, #4294967295
 10223d8:	6820      	ldr	r0, [r4, #0]
 10223da:	f004 ff55 	bl	1027288 <_wcsnrtombs_r>
 10223de:	b002      	add	sp, #8
 10223e0:	bd10      	pop	{r4, pc}
 10223e2:	bf00      	nop

010223e4 <_wctomb_r>:
 10223e4:	b430      	push	{r4, r5}
 10223e6:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 10223ea:	f2c0 1406 	movt	r4, #262	; 0x106
 10223ee:	f64c 25e8 	movw	r5, #51944	; 0xcae8
 10223f2:	f2c0 1506 	movt	r5, #262	; 0x106
 10223f6:	6824      	ldr	r4, [r4, #0]
 10223f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 10223fa:	2c00      	cmp	r4, #0
 10223fc:	bf08      	it	eq
 10223fe:	462c      	moveq	r4, r5
 1022400:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1022404:	46a4      	mov	ip, r4
 1022406:	bc30      	pop	{r4, r5}
 1022408:	4760      	bx	ip
 102240a:	bf00      	nop

0102240c <__ascii_wctomb>:
 102240c:	b141      	cbz	r1, 1022420 <__ascii_wctomb+0x14>
 102240e:	2aff      	cmp	r2, #255	; 0xff
 1022410:	bf95      	itete	ls
 1022412:	700a      	strbls	r2, [r1, #0]
 1022414:	f04f 31ff 	movhi.w	r1, #4294967295
 1022418:	2101      	movls	r1, #1
 102241a:	238a      	movhi	r3, #138	; 0x8a
 102241c:	bf88      	it	hi
 102241e:	6003      	strhi	r3, [r0, #0]
 1022420:	4608      	mov	r0, r1
 1022422:	4770      	bx	lr

01022424 <__utf8_wctomb>:
 1022424:	b3c1      	cbz	r1, 1022498 <__utf8_wctomb+0x74>
 1022426:	2a7f      	cmp	r2, #127	; 0x7f
 1022428:	bf9c      	itt	ls
 102242a:	700a      	strbls	r2, [r1, #0]
 102242c:	2301      	movls	r3, #1
 102242e:	d931      	bls.n	1022494 <__utf8_wctomb+0x70>
 1022430:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 1022434:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 1022438:	d322      	bcc.n	1022480 <__utf8_wctomb+0x5c>
 102243a:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 102243e:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 1022442:	d32c      	bcc.n	102249e <__utf8_wctomb+0x7a>
 1022444:	f5a2 3380 	sub.w	r3, r2, #65536	; 0x10000
 1022448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 102244c:	d237      	bcs.n	10224be <__utf8_wctomb+0x9a>
 102244e:	f3c2 1385 	ubfx	r3, r2, #6, #6
 1022452:	f3c2 3005 	ubfx	r0, r2, #12, #6
 1022456:	b410      	push	{r4}
 1022458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 102245c:	0c94      	lsrs	r4, r2, #18
 102245e:	708b      	strb	r3, [r1, #2]
 1022460:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1022464:	2304      	movs	r3, #4
 1022466:	f064 040f 	orn	r4, r4, #15
 102246a:	f060 007f 	orn	r0, r0, #127	; 0x7f
 102246e:	700c      	strb	r4, [r1, #0]
 1022470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1022474:	7048      	strb	r0, [r1, #1]
 1022476:	4618      	mov	r0, r3
 1022478:	70ca      	strb	r2, [r1, #3]
 102247a:	f85d 4b04 	ldr.w	r4, [sp], #4
 102247e:	4770      	bx	lr
 1022480:	0993      	lsrs	r3, r2, #6
 1022482:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1022486:	f063 033f 	orn	r3, r3, #63	; 0x3f
 102248a:	700b      	strb	r3, [r1, #0]
 102248c:	2302      	movs	r3, #2
 102248e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1022492:	704a      	strb	r2, [r1, #1]
 1022494:	4618      	mov	r0, r3
 1022496:	4770      	bx	lr
 1022498:	460b      	mov	r3, r1
 102249a:	4618      	mov	r0, r3
 102249c:	4770      	bx	lr
 102249e:	0b10      	lsrs	r0, r2, #12
 10224a0:	f3c2 1385 	ubfx	r3, r2, #6, #6
 10224a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 10224a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10224ac:	f060 001f 	orn	r0, r0, #31
 10224b0:	704b      	strb	r3, [r1, #1]
 10224b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 10224b6:	7008      	strb	r0, [r1, #0]
 10224b8:	2303      	movs	r3, #3
 10224ba:	708a      	strb	r2, [r1, #2]
 10224bc:	e7ea      	b.n	1022494 <__utf8_wctomb+0x70>
 10224be:	228a      	movs	r2, #138	; 0x8a
 10224c0:	f04f 33ff 	mov.w	r3, #4294967295
 10224c4:	6002      	str	r2, [r0, #0]
 10224c6:	e7e5      	b.n	1022494 <__utf8_wctomb+0x70>

010224c8 <__sjis_wctomb>:
 10224c8:	b2d3      	uxtb	r3, r2
 10224ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 10224ce:	b1e9      	cbz	r1, 102250c <__sjis_wctomb+0x44>
 10224d0:	b1c2      	cbz	r2, 1022504 <__sjis_wctomb+0x3c>
 10224d2:	b430      	push	{r4, r5}
 10224d4:	f102 057f 	add.w	r5, r2, #127	; 0x7f
 10224d8:	f102 0420 	add.w	r4, r2, #32
 10224dc:	b2ed      	uxtb	r5, r5
 10224de:	b2e4      	uxtb	r4, r4
 10224e0:	2c0f      	cmp	r4, #15
 10224e2:	bf88      	it	hi
 10224e4:	2d1e      	cmphi	r5, #30
 10224e6:	d814      	bhi.n	1022512 <__sjis_wctomb+0x4a>
 10224e8:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 10224ec:	f083 0580 	eor.w	r5, r3, #128	; 0x80
 10224f0:	2d7c      	cmp	r5, #124	; 0x7c
 10224f2:	bf88      	it	hi
 10224f4:	2c3e      	cmphi	r4, #62	; 0x3e
 10224f6:	d80c      	bhi.n	1022512 <__sjis_wctomb+0x4a>
 10224f8:	700a      	strb	r2, [r1, #0]
 10224fa:	2202      	movs	r2, #2
 10224fc:	704b      	strb	r3, [r1, #1]
 10224fe:	4610      	mov	r0, r2
 1022500:	bc30      	pop	{r4, r5}
 1022502:	4770      	bx	lr
 1022504:	2201      	movs	r2, #1
 1022506:	700b      	strb	r3, [r1, #0]
 1022508:	4610      	mov	r0, r2
 102250a:	4770      	bx	lr
 102250c:	460a      	mov	r2, r1
 102250e:	4610      	mov	r0, r2
 1022510:	4770      	bx	lr
 1022512:	238a      	movs	r3, #138	; 0x8a
 1022514:	f04f 32ff 	mov.w	r2, #4294967295
 1022518:	6003      	str	r3, [r0, #0]
 102251a:	e7f0      	b.n	10224fe <__sjis_wctomb+0x36>

0102251c <__eucjp_wctomb>:
 102251c:	b2d3      	uxtb	r3, r2
 102251e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1022522:	b381      	cbz	r1, 1022586 <__eucjp_wctomb+0x6a>
 1022524:	b18a      	cbz	r2, 102254a <__eucjp_wctomb+0x2e>
 1022526:	b430      	push	{r4, r5}
 1022528:	f102 045f 	add.w	r4, r2, #95	; 0x5f
 102252c:	f102 0572 	add.w	r5, r2, #114	; 0x72
 1022530:	b2e4      	uxtb	r4, r4
 1022532:	b2ed      	uxtb	r5, r5
 1022534:	2c5d      	cmp	r4, #93	; 0x5d
 1022536:	bf88      	it	hi
 1022538:	2d01      	cmphi	r5, #1
 102253a:	d90a      	bls.n	1022552 <__eucjp_wctomb+0x36>
 102253c:	f04f 32ff 	mov.w	r2, #4294967295
 1022540:	238a      	movs	r3, #138	; 0x8a
 1022542:	6003      	str	r3, [r0, #0]
 1022544:	4610      	mov	r0, r2
 1022546:	bc30      	pop	{r4, r5}
 1022548:	4770      	bx	lr
 102254a:	2201      	movs	r2, #1
 102254c:	700b      	strb	r3, [r1, #0]
 102254e:	4610      	mov	r0, r2
 1022550:	4770      	bx	lr
 1022552:	f103 055f 	add.w	r5, r3, #95	; 0x5f
 1022556:	b2ed      	uxtb	r5, r5
 1022558:	2d5d      	cmp	r5, #93	; 0x5d
 102255a:	bf9e      	ittt	ls
 102255c:	700a      	strbls	r2, [r1, #0]
 102255e:	704b      	strbls	r3, [r1, #1]
 1022560:	2202      	movls	r2, #2
 1022562:	d9ef      	bls.n	1022544 <__eucjp_wctomb+0x28>
 1022564:	2c5d      	cmp	r4, #93	; 0x5d
 1022566:	d8e9      	bhi.n	102253c <__eucjp_wctomb+0x20>
 1022568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 102256c:	f103 045f 	add.w	r4, r3, #95	; 0x5f
 1022570:	b2e4      	uxtb	r4, r4
 1022572:	2c5d      	cmp	r4, #93	; 0x5d
 1022574:	d8e2      	bhi.n	102253c <__eucjp_wctomb+0x20>
 1022576:	704a      	strb	r2, [r1, #1]
 1022578:	2203      	movs	r2, #3
 102257a:	208f      	movs	r0, #143	; 0x8f
 102257c:	708b      	strb	r3, [r1, #2]
 102257e:	7008      	strb	r0, [r1, #0]
 1022580:	4610      	mov	r0, r2
 1022582:	bc30      	pop	{r4, r5}
 1022584:	4770      	bx	lr
 1022586:	460a      	mov	r2, r1
 1022588:	4610      	mov	r0, r2
 102258a:	4770      	bx	lr

0102258c <__jis_wctomb>:
 102258c:	b430      	push	{r4, r5}
 102258e:	b2d4      	uxtb	r4, r2
 1022590:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1022594:	b391      	cbz	r1, 10225fc <__jis_wctomb+0x70>
 1022596:	b17a      	cbz	r2, 10225b8 <__jis_wctomb+0x2c>
 1022598:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 102259c:	2d5d      	cmp	r5, #93	; 0x5d
 102259e:	d831      	bhi.n	1022604 <__jis_wctomb+0x78>
 10225a0:	f1a4 0521 	sub.w	r5, r4, #33	; 0x21
 10225a4:	2d5d      	cmp	r5, #93	; 0x5d
 10225a6:	d82d      	bhi.n	1022604 <__jis_wctomb+0x78>
 10225a8:	6818      	ldr	r0, [r3, #0]
 10225aa:	b1c8      	cbz	r0, 10225e0 <__jis_wctomb+0x54>
 10225ac:	2302      	movs	r3, #2
 10225ae:	704c      	strb	r4, [r1, #1]
 10225b0:	4618      	mov	r0, r3
 10225b2:	700a      	strb	r2, [r1, #0]
 10225b4:	bc30      	pop	{r4, r5}
 10225b6:	4770      	bx	lr
 10225b8:	6818      	ldr	r0, [r3, #0]
 10225ba:	b178      	cbz	r0, 10225dc <__jis_wctomb+0x50>
 10225bc:	601a      	str	r2, [r3, #0]
 10225be:	3103      	adds	r1, #3
 10225c0:	221b      	movs	r2, #27
 10225c2:	2328      	movs	r3, #40	; 0x28
 10225c4:	f801 2c03 	strb.w	r2, [r1, #-3]
 10225c8:	2242      	movs	r2, #66	; 0x42
 10225ca:	f801 3c02 	strb.w	r3, [r1, #-2]
 10225ce:	2304      	movs	r3, #4
 10225d0:	f801 2c01 	strb.w	r2, [r1, #-1]
 10225d4:	700c      	strb	r4, [r1, #0]
 10225d6:	4618      	mov	r0, r3
 10225d8:	bc30      	pop	{r4, r5}
 10225da:	4770      	bx	lr
 10225dc:	2301      	movs	r3, #1
 10225de:	e7f9      	b.n	10225d4 <__jis_wctomb+0x48>
 10225e0:	2001      	movs	r0, #1
 10225e2:	3103      	adds	r1, #3
 10225e4:	6018      	str	r0, [r3, #0]
 10225e6:	201b      	movs	r0, #27
 10225e8:	2324      	movs	r3, #36	; 0x24
 10225ea:	f801 0c03 	strb.w	r0, [r1, #-3]
 10225ee:	f801 3c02 	strb.w	r3, [r1, #-2]
 10225f2:	2042      	movs	r0, #66	; 0x42
 10225f4:	2305      	movs	r3, #5
 10225f6:	f801 0c01 	strb.w	r0, [r1, #-1]
 10225fa:	e7d8      	b.n	10225ae <__jis_wctomb+0x22>
 10225fc:	2301      	movs	r3, #1
 10225fe:	4618      	mov	r0, r3
 1022600:	bc30      	pop	{r4, r5}
 1022602:	4770      	bx	lr
 1022604:	228a      	movs	r2, #138	; 0x8a
 1022606:	f04f 33ff 	mov.w	r3, #4294967295
 102260a:	6002      	str	r2, [r0, #0]
 102260c:	e7e3      	b.n	10225d6 <__jis_wctomb+0x4a>
 102260e:	bf00      	nop

01022610 <__swsetup_r>:
 1022610:	b538      	push	{r3, r4, r5, lr}
 1022612:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 1022616:	f2c0 1306 	movt	r3, #262	; 0x106
 102261a:	4605      	mov	r5, r0
 102261c:	460c      	mov	r4, r1
 102261e:	6818      	ldr	r0, [r3, #0]
 1022620:	b110      	cbz	r0, 1022628 <__swsetup_r+0x18>
 1022622:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1022624:	2b00      	cmp	r3, #0
 1022626:	d03f      	beq.n	10226a8 <__swsetup_r+0x98>
 1022628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 102262c:	b293      	uxth	r3, r2
 102262e:	0718      	lsls	r0, r3, #28
 1022630:	bf48      	it	mi
 1022632:	6920      	ldrmi	r0, [r4, #16]
 1022634:	d41c      	bmi.n	1022670 <__swsetup_r+0x60>
 1022636:	06d9      	lsls	r1, r3, #27
 1022638:	d545      	bpl.n	10226c6 <__swsetup_r+0xb6>
 102263a:	0758      	lsls	r0, r3, #29
 102263c:	bf58      	it	pl
 102263e:	6920      	ldrpl	r0, [r4, #16]
 1022640:	d512      	bpl.n	1022668 <__swsetup_r+0x58>
 1022642:	6b21      	ldr	r1, [r4, #48]	; 0x30
 1022644:	b151      	cbz	r1, 102265c <__swsetup_r+0x4c>
 1022646:	f104 0340 	add.w	r3, r4, #64	; 0x40
 102264a:	4299      	cmp	r1, r3
 102264c:	d004      	beq.n	1022658 <__swsetup_r+0x48>
 102264e:	4628      	mov	r0, r5
 1022650:	f001 fa3c 	bl	1023acc <_free_r>
 1022654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1022658:	2300      	movs	r3, #0
 102265a:	6323      	str	r3, [r4, #48]	; 0x30
 102265c:	6920      	ldr	r0, [r4, #16]
 102265e:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 1022662:	2300      	movs	r3, #0
 1022664:	e9c4 0300 	strd	r0, r3, [r4]
 1022668:	f042 0308 	orr.w	r3, r2, #8
 102266c:	81a3      	strh	r3, [r4, #12]
 102266e:	b29b      	uxth	r3, r3
 1022670:	b1e8      	cbz	r0, 10226ae <__swsetup_r+0x9e>
 1022672:	f013 0201 	ands.w	r2, r3, #1
 1022676:	d007      	beq.n	1022688 <__swsetup_r+0x78>
 1022678:	6963      	ldr	r3, [r4, #20]
 102267a:	2200      	movs	r2, #0
 102267c:	60a2      	str	r2, [r4, #8]
 102267e:	425b      	negs	r3, r3
 1022680:	61a3      	str	r3, [r4, #24]
 1022682:	b138      	cbz	r0, 1022694 <__swsetup_r+0x84>
 1022684:	2000      	movs	r0, #0
 1022686:	bd38      	pop	{r3, r4, r5, pc}
 1022688:	0799      	lsls	r1, r3, #30
 102268a:	bf58      	it	pl
 102268c:	6962      	ldrpl	r2, [r4, #20]
 102268e:	60a2      	str	r2, [r4, #8]
 1022690:	2800      	cmp	r0, #0
 1022692:	d1f7      	bne.n	1022684 <__swsetup_r+0x74>
 1022694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1022698:	061a      	lsls	r2, r3, #24
 102269a:	bf42      	ittt	mi
 102269c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 10226a0:	81a3      	strhmi	r3, [r4, #12]
 10226a2:	f04f 30ff 	movmi.w	r0, #4294967295
 10226a6:	bd38      	pop	{r3, r4, r5, pc}
 10226a8:	f001 f970 	bl	102398c <__sinit>
 10226ac:	e7bc      	b.n	1022628 <__swsetup_r+0x18>
 10226ae:	f403 7220 	and.w	r2, r3, #640	; 0x280
 10226b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 10226b6:	d0dc      	beq.n	1022672 <__swsetup_r+0x62>
 10226b8:	4628      	mov	r0, r5
 10226ba:	4621      	mov	r1, r4
 10226bc:	f001 fd7c 	bl	10241b8 <__smakebuf_r>
 10226c0:	89a3      	ldrh	r3, [r4, #12]
 10226c2:	6920      	ldr	r0, [r4, #16]
 10226c4:	e7d5      	b.n	1022672 <__swsetup_r+0x62>
 10226c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 10226ca:	2309      	movs	r3, #9
 10226cc:	f04f 30ff 	mov.w	r0, #4294967295
 10226d0:	602b      	str	r3, [r5, #0]
 10226d2:	81a2      	strh	r2, [r4, #12]
 10226d4:	bd38      	pop	{r3, r4, r5, pc}
 10226d6:	bf00      	nop

010226d8 <__call_exitprocs>:
 10226d8:	f647 4324 	movw	r3, #31780	; 0x7c24
 10226dc:	f2c0 1306 	movt	r3, #262	; 0x106
 10226e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10226e4:	b085      	sub	sp, #20
 10226e6:	681b      	ldr	r3, [r3, #0]
 10226e8:	460f      	mov	r7, r1
 10226ea:	468a      	mov	sl, r1
 10226ec:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
 10226f0:	f2c0 1201 	movt	r2, #257	; 0x101
 10226f4:	9203      	str	r2, [sp, #12]
 10226f6:	e9cd 0300 	strd	r0, r3, [sp]
 10226fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 10226fe:	9302      	str	r3, [sp, #8]
 1022700:	9b01      	ldr	r3, [sp, #4]
 1022702:	f8dd b008 	ldr.w	fp, [sp, #8]
 1022706:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 102270a:	b32e      	cbz	r6, 1022758 <__call_exitprocs+0x80>
 102270c:	f04f 0801 	mov.w	r8, #1
 1022710:	6874      	ldr	r4, [r6, #4]
 1022712:	1e65      	subs	r5, r4, #1
 1022714:	bf5e      	ittt	pl
 1022716:	3401      	addpl	r4, #1
 1022718:	2700      	movpl	r7, #0
 102271a:	eb06 0484 	addpl.w	r4, r6, r4, lsl #2
 102271e:	d40a      	bmi.n	1022736 <__call_exitprocs+0x5e>
 1022720:	f1ba 0f00 	cmp.w	sl, #0
 1022724:	d01b      	beq.n	102275e <__call_exitprocs+0x86>
 1022726:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 102272a:	4553      	cmp	r3, sl
 102272c:	d017      	beq.n	102275e <__call_exitprocs+0x86>
 102272e:	3d01      	subs	r5, #1
 1022730:	3c04      	subs	r4, #4
 1022732:	1c6b      	adds	r3, r5, #1
 1022734:	d1f4      	bne.n	1022720 <__call_exitprocs+0x48>
 1022736:	9b03      	ldr	r3, [sp, #12]
 1022738:	b173      	cbz	r3, 1022758 <__call_exitprocs+0x80>
 102273a:	e9d6 3200 	ldrd	r3, r2, [r6]
 102273e:	2a00      	cmp	r2, #0
 1022740:	d133      	bne.n	10227aa <__call_exitprocs+0xd2>
 1022742:	2b00      	cmp	r3, #0
 1022744:	d031      	beq.n	10227aa <__call_exitprocs+0xd2>
 1022746:	4630      	mov	r0, r6
 1022748:	f8cb 3000 	str.w	r3, [fp]
 102274c:	f7fa f83c 	bl	101c7c8 <free>
 1022750:	f8db 6000 	ldr.w	r6, [fp]
 1022754:	2e00      	cmp	r6, #0
 1022756:	d1db      	bne.n	1022710 <__call_exitprocs+0x38>
 1022758:	b005      	add	sp, #20
 102275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102275e:	6873      	ldr	r3, [r6, #4]
 1022760:	6822      	ldr	r2, [r4, #0]
 1022762:	3b01      	subs	r3, #1
 1022764:	42ab      	cmp	r3, r5
 1022766:	bf0c      	ite	eq
 1022768:	6075      	streq	r5, [r6, #4]
 102276a:	6027      	strne	r7, [r4, #0]
 102276c:	2a00      	cmp	r2, #0
 102276e:	d0de      	beq.n	102272e <__call_exitprocs+0x56>
 1022770:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 1022774:	fa08 f305 	lsl.w	r3, r8, r5
 1022778:	f8d6 9004 	ldr.w	r9, [r6, #4]
 102277c:	420b      	tst	r3, r1
 102277e:	d108      	bne.n	1022792 <__call_exitprocs+0xba>
 1022780:	4790      	blx	r2
 1022782:	6873      	ldr	r3, [r6, #4]
 1022784:	454b      	cmp	r3, r9
 1022786:	d1bb      	bne.n	1022700 <__call_exitprocs+0x28>
 1022788:	f8db 3000 	ldr.w	r3, [fp]
 102278c:	42b3      	cmp	r3, r6
 102278e:	d0ce      	beq.n	102272e <__call_exitprocs+0x56>
 1022790:	e7b6      	b.n	1022700 <__call_exitprocs+0x28>
 1022792:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 1022796:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 102279a:	4203      	tst	r3, r0
 102279c:	d102      	bne.n	10227a4 <__call_exitprocs+0xcc>
 102279e:	9800      	ldr	r0, [sp, #0]
 10227a0:	4790      	blx	r2
 10227a2:	e7ee      	b.n	1022782 <__call_exitprocs+0xaa>
 10227a4:	4608      	mov	r0, r1
 10227a6:	4790      	blx	r2
 10227a8:	e7eb      	b.n	1022782 <__call_exitprocs+0xaa>
 10227aa:	46b3      	mov	fp, r6
 10227ac:	461e      	mov	r6, r3
 10227ae:	2e00      	cmp	r6, #0
 10227b0:	d1ae      	bne.n	1022710 <__call_exitprocs+0x38>
 10227b2:	e7d1      	b.n	1022758 <__call_exitprocs+0x80>

010227b4 <__set_ctype>:
 10227b4:	f647 6380 	movw	r3, #32384	; 0x7e80
 10227b8:	f2c0 1306 	movt	r3, #262	; 0x106
 10227bc:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 10227c0:	4770      	bx	lr
 10227c2:	bf00      	nop
 10227c4:	0000      	movs	r0, r0
	...

010227c8 <quorem>:
 10227c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10227cc:	b085      	sub	sp, #20
 10227ce:	6903      	ldr	r3, [r0, #16]
 10227d0:	690d      	ldr	r5, [r1, #16]
 10227d2:	42ab      	cmp	r3, r5
 10227d4:	bfb8      	it	lt
 10227d6:	2000      	movlt	r0, #0
 10227d8:	f2c0 8097 	blt.w	102290a <quorem+0x142>
 10227dc:	3d01      	subs	r5, #1
 10227de:	f101 0414 	add.w	r4, r1, #20
 10227e2:	f100 0914 	add.w	r9, r0, #20
 10227e6:	9101      	str	r1, [sp, #4]
 10227e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 10227ec:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 10227f0:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 10227f4:	4680      	mov	r8, r0
 10227f6:	f102 0b01 	add.w	fp, r2, #1
 10227fa:	eb09 020a 	add.w	r2, r9, sl
 10227fe:	9203      	str	r2, [sp, #12]
 1022800:	eb04 070a 	add.w	r7, r4, sl
 1022804:	4618      	mov	r0, r3
 1022806:	4659      	mov	r1, fp
 1022808:	9302      	str	r3, [sp, #8]
 102280a:	f7f8 fb7d 	bl	101af08 <__udivsi3>
 102280e:	9b02      	ldr	r3, [sp, #8]
 1022810:	455b      	cmp	r3, fp
 1022812:	4606      	mov	r6, r0
 1022814:	d33f      	bcc.n	1022896 <quorem+0xce>
 1022816:	2000      	movs	r0, #0
 1022818:	46a6      	mov	lr, r4
 102281a:	4602      	mov	r2, r0
 102281c:	46cc      	mov	ip, r9
 102281e:	f85e bb04 	ldr.w	fp, [lr], #4
 1022822:	f8dc 1000 	ldr.w	r1, [ip]
 1022826:	4577      	cmp	r7, lr
 1022828:	fa1f f38b 	uxth.w	r3, fp
 102282c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 1022830:	fb06 0303 	mla	r3, r6, r3, r0
 1022834:	ea4f 4013 	mov.w	r0, r3, lsr #16
 1022838:	b29b      	uxth	r3, r3
 102283a:	eba2 0303 	sub.w	r3, r2, r3
 102283e:	fb06 000b 	mla	r0, r6, fp, r0
 1022842:	fa13 f381 	uxtah	r3, r3, r1
 1022846:	fa1f fb83 	uxth.w	fp, r3
 102284a:	b282      	uxth	r2, r0
 102284c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1022850:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
 1022854:	eb02 4323 	add.w	r3, r2, r3, asr #16
 1022858:	ea4b 4103 	orr.w	r1, fp, r3, lsl #16
 102285c:	ea4f 4223 	mov.w	r2, r3, asr #16
 1022860:	f84c 1b04 	str.w	r1, [ip], #4
 1022864:	d2db      	bcs.n	102281e <quorem+0x56>
 1022866:	f859 300a 	ldr.w	r3, [r9, sl]
 102286a:	b9a3      	cbnz	r3, 1022896 <quorem+0xce>
 102286c:	9a03      	ldr	r2, [sp, #12]
 102286e:	1f13      	subs	r3, r2, #4
 1022870:	4599      	cmp	r9, r3
 1022872:	d20e      	bcs.n	1022892 <quorem+0xca>
 1022874:	f852 3c04 	ldr.w	r3, [r2, #-4]
 1022878:	b95b      	cbnz	r3, 1022892 <quorem+0xca>
 102287a:	f1a2 0308 	sub.w	r3, r2, #8
 102287e:	e001      	b.n	1022884 <quorem+0xbc>
 1022880:	6812      	ldr	r2, [r2, #0]
 1022882:	b932      	cbnz	r2, 1022892 <quorem+0xca>
 1022884:	4599      	cmp	r9, r3
 1022886:	461a      	mov	r2, r3
 1022888:	f105 35ff 	add.w	r5, r5, #4294967295
 102288c:	f1a3 0304 	sub.w	r3, r3, #4
 1022890:	d3f6      	bcc.n	1022880 <quorem+0xb8>
 1022892:	f8c8 5010 	str.w	r5, [r8, #16]
 1022896:	9901      	ldr	r1, [sp, #4]
 1022898:	4640      	mov	r0, r8
 102289a:	f002 f845 	bl	1024928 <__mcmp>
 102289e:	2800      	cmp	r0, #0
 10228a0:	db32      	blt.n	1022908 <quorem+0x140>
 10228a2:	3601      	adds	r6, #1
 10228a4:	4648      	mov	r0, r9
 10228a6:	f04f 0c00 	mov.w	ip, #0
 10228aa:	f854 2b04 	ldr.w	r2, [r4], #4
 10228ae:	6803      	ldr	r3, [r0, #0]
 10228b0:	42a7      	cmp	r7, r4
 10228b2:	b291      	uxth	r1, r2
 10228b4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 10228b8:	ebac 0101 	sub.w	r1, ip, r1
 10228bc:	ebc2 4c13 	rsb	ip, r2, r3, lsr #16
 10228c0:	fa11 f383 	uxtah	r3, r1, r3
 10228c4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
 10228c8:	b29b      	uxth	r3, r3
 10228ca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 10228ce:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 10228d2:	f840 3b04 	str.w	r3, [r0], #4
 10228d6:	d2e8      	bcs.n	10228aa <quorem+0xe2>
 10228d8:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 10228dc:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 10228e0:	b992      	cbnz	r2, 1022908 <quorem+0x140>
 10228e2:	1f1a      	subs	r2, r3, #4
 10228e4:	4591      	cmp	r9, r2
 10228e6:	d20d      	bcs.n	1022904 <quorem+0x13c>
 10228e8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 10228ec:	b952      	cbnz	r2, 1022904 <quorem+0x13c>
 10228ee:	3b08      	subs	r3, #8
 10228f0:	e001      	b.n	10228f6 <quorem+0x12e>
 10228f2:	6812      	ldr	r2, [r2, #0]
 10228f4:	b932      	cbnz	r2, 1022904 <quorem+0x13c>
 10228f6:	4599      	cmp	r9, r3
 10228f8:	461a      	mov	r2, r3
 10228fa:	f105 35ff 	add.w	r5, r5, #4294967295
 10228fe:	f1a3 0304 	sub.w	r3, r3, #4
 1022902:	d3f6      	bcc.n	10228f2 <quorem+0x12a>
 1022904:	f8c8 5010 	str.w	r5, [r8, #16]
 1022908:	4630      	mov	r0, r6
 102290a:	b005      	add	sp, #20
 102290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01022910 <_dtoa_r>:
 1022910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1022914:	b093      	sub	sp, #76	; 0x4c
 1022916:	ec57 6b10 	vmov	r6, r7, d0
 102291a:	4604      	mov	r4, r0
 102291c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 102291e:	468a      	mov	sl, r1
 1022920:	e9cd 3207 	strd	r3, r2, [sp, #28]
 1022924:	e9cd 6700 	strd	r6, r7, [sp]
 1022928:	b14d      	cbz	r5, 102293e <_dtoa_r+0x2e>
 102292a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 102292c:	2301      	movs	r3, #1
 102292e:	4629      	mov	r1, r5
 1022930:	4093      	lsls	r3, r2
 1022932:	e9c5 2301 	strd	r2, r3, [r5, #4]
 1022936:	f001 fdb1 	bl	102449c <_Bfree>
 102293a:	2300      	movs	r3, #0
 102293c:	6423      	str	r3, [r4, #64]	; 0x40
 102293e:	1e3e      	subs	r6, r7, #0
 1022940:	bfbf      	itttt	lt
 1022942:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 1022946:	9601      	strlt	r6, [sp, #4]
 1022948:	9a1c      	ldrlt	r2, [sp, #112]	; 0x70
 102294a:	2301      	movlt	r3, #1
 102294c:	bfa5      	ittet	ge
 102294e:	9a1c      	ldrge	r2, [sp, #112]	; 0x70
 1022950:	2300      	movge	r3, #0
 1022952:	6013      	strlt	r3, [r2, #0]
 1022954:	6013      	strge	r3, [r2, #0]
 1022956:	2300      	movs	r3, #0
 1022958:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 102295c:	43b3      	bics	r3, r6
 102295e:	f000 80b1 	beq.w	1022ac4 <_dtoa_r+0x1b4>
 1022962:	ed9d 7b00 	vldr	d7, [sp]
 1022966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 102296a:	ed8d 7b02 	vstr	d7, [sp, #8]
 102296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022972:	d10e      	bne.n	1022992 <_dtoa_r+0x82>
 1022974:	9a07      	ldr	r2, [sp, #28]
 1022976:	2301      	movs	r3, #1
 1022978:	6013      	str	r3, [r2, #0]
 102297a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 102297c:	2b00      	cmp	r3, #0
 102297e:	f000 8358 	beq.w	1023032 <_dtoa_r+0x722>
 1022982:	4bc3      	ldr	r3, [pc, #780]	; (1022c90 <_dtoa_r+0x380>)
 1022984:	1e5e      	subs	r6, r3, #1
 1022986:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 1022988:	6013      	str	r3, [r2, #0]
 102298a:	4630      	mov	r0, r6
 102298c:	b013      	add	sp, #76	; 0x4c
 102298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1022992:	aa10      	add	r2, sp, #64	; 0x40
 1022994:	a911      	add	r1, sp, #68	; 0x44
 1022996:	ed9d 0b02 	vldr	d0, [sp, #8]
 102299a:	4620      	mov	r0, r4
 102299c:	f002 f8e6 	bl	1024b6c <__d2b>
 10229a0:	ea5f 5b16 	movs.w	fp, r6, lsr #20
 10229a4:	4680      	mov	r8, r0
 10229a6:	f040 80a1 	bne.w	1022aec <_dtoa_r+0x1dc>
 10229aa:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
 10229ae:	eb01 0b03 	add.w	fp, r1, r3
 10229b2:	f20b 4332 	addw	r3, fp, #1074	; 0x432
 10229b6:	2b20      	cmp	r3, #32
 10229b8:	f340 8343 	ble.w	1023042 <_dtoa_r+0x732>
 10229bc:	f20b 4212 	addw	r2, fp, #1042	; 0x412
 10229c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 10229c4:	409e      	lsls	r6, r3
 10229c6:	4613      	mov	r3, r2
 10229c8:	9a00      	ldr	r2, [sp, #0]
 10229ca:	fa22 f303 	lsr.w	r3, r2, r3
 10229ce:	4333      	orrs	r3, r6
 10229d0:	ee07 3a90 	vmov	s15, r3
 10229d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 10229d8:	2301      	movs	r3, #1
 10229da:	f10b 3bff 	add.w	fp, fp, #4294967295
 10229de:	930c      	str	r3, [sp, #48]	; 0x30
 10229e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 10229e4:	9805      	ldr	r0, [sp, #20]
 10229e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 10229ea:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 10229ee:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 10229f2:	ec43 2b13 	vmov	d3, r2, r3
 10229f6:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 1022c78 <_dtoa_r+0x368>
 10229fa:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 1022c80 <_dtoa_r+0x370>
 10229fe:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 1022c88 <_dtoa_r+0x378>
 1022a02:	ee33 6b46 	vsub.f64	d6, d3, d6
 1022a06:	ee06 7b04 	vmla.f64	d7, d6, d4
 1022a0a:	ee06 ba90 	vmov	s13, fp
 1022a0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1022a12:	ee06 7b05 	vmla.f64	d7, d6, d5
 1022a16:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 1022a1a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 1022a1e:	ee16 5a90 	vmov	r5, s13
 1022a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022a26:	d508      	bpl.n	1022a3a <_dtoa_r+0x12a>
 1022a28:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1022a2c:	eeb4 6b47 	vcmp.f64	d6, d7
 1022a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022a34:	bf18      	it	ne
 1022a36:	f105 35ff 	addne.w	r5, r5, #4294967295
 1022a3a:	2d16      	cmp	r5, #22
 1022a3c:	eba1 0b0b 	sub.w	fp, r1, fp
 1022a40:	f10b 36ff 	add.w	r6, fp, #4294967295
 1022a44:	f200 82e7 	bhi.w	1023016 <_dtoa_r+0x706>
 1022a48:	f647 7398 	movw	r3, #32664	; 0x7f98
 1022a4c:	f2c0 1306 	movt	r3, #262	; 0x106
 1022a50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 1022a54:	ed9d 6b02 	vldr	d6, [sp, #8]
 1022a58:	ed93 7b00 	vldr	d7, [r3]
 1022a5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1022a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022a64:	d55b      	bpl.n	1022b1e <_dtoa_r+0x20e>
 1022a66:	2e00      	cmp	r6, #0
 1022a68:	f04f 0300 	mov.w	r3, #0
 1022a6c:	f105 35ff 	add.w	r5, r5, #4294967295
 1022a70:	930d      	str	r3, [sp, #52]	; 0x34
 1022a72:	bfa4      	itt	ge
 1022a74:	2300      	movge	r3, #0
 1022a76:	9309      	strge	r3, [sp, #36]	; 0x24
 1022a78:	f2c0 82d6 	blt.w	1023028 <_dtoa_r+0x718>
 1022a7c:	2d00      	cmp	r5, #0
 1022a7e:	da56      	bge.n	1022b2e <_dtoa_r+0x21e>
 1022a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1022a82:	f1ba 0f09 	cmp.w	sl, #9
 1022a86:	9504      	str	r5, [sp, #16]
 1022a88:	eba3 0305 	sub.w	r3, r3, r5
 1022a8c:	9309      	str	r3, [sp, #36]	; 0x24
 1022a8e:	f1c5 0300 	rsb	r3, r5, #0
 1022a92:	f04f 0500 	mov.w	r5, #0
 1022a96:	930b      	str	r3, [sp, #44]	; 0x2c
 1022a98:	d851      	bhi.n	1022b3e <_dtoa_r+0x22e>
 1022a9a:	f1ba 0f05 	cmp.w	sl, #5
 1022a9e:	bfc4      	itt	gt
 1022aa0:	f1aa 0a04 	subgt.w	sl, sl, #4
 1022aa4:	f04f 0900 	movgt.w	r9, #0
 1022aa8:	dc01      	bgt.n	1022aae <_dtoa_r+0x19e>
 1022aaa:	f04f 0901 	mov.w	r9, #1
 1022aae:	f1aa 0302 	sub.w	r3, sl, #2
 1022ab2:	2b03      	cmp	r3, #3
 1022ab4:	f200 8477 	bhi.w	10233a6 <_dtoa_r+0xa96>
 1022ab8:	e8df f013 	tbh	[pc, r3, lsl #1]
 1022abc:	0367036a 	.word	0x0367036a
 1022ac0:	035b033d 	.word	0x035b033d
 1022ac4:	9a07      	ldr	r2, [sp, #28]
 1022ac6:	f242 730f 	movw	r3, #9999	; 0x270f
 1022aca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 1022ace:	6013      	str	r3, [r2, #0]
 1022ad0:	9b00      	ldr	r3, [sp, #0]
 1022ad2:	4333      	orrs	r3, r6
 1022ad4:	d119      	bne.n	1022b0a <_dtoa_r+0x1fa>
 1022ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1022ad8:	f24c 1698 	movw	r6, #49560	; 0xc198
 1022adc:	f2c0 1606 	movt	r6, #262	; 0x106
 1022ae0:	2b00      	cmp	r3, #0
 1022ae2:	f43f af52 	beq.w	102298a <_dtoa_r+0x7a>
 1022ae6:	f106 0308 	add.w	r3, r6, #8
 1022aea:	e74c      	b.n	1022986 <_dtoa_r+0x76>
 1022aec:	9903      	ldr	r1, [sp, #12]
 1022aee:	2000      	movs	r0, #0
 1022af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1022af4:	f2ab 3bff 	subw	fp, fp, #1023	; 0x3ff
 1022af8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 1022afc:	900c      	str	r0, [sp, #48]	; 0x30
 1022afe:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1022b02:	9910      	ldr	r1, [sp, #64]	; 0x40
 1022b04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1022b08:	e771      	b.n	10229ee <_dtoa_r+0xde>
 1022b0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1022b0c:	f24c 1694 	movw	r6, #49556	; 0xc194
 1022b10:	f2c0 1606 	movt	r6, #262	; 0x106
 1022b14:	2b00      	cmp	r3, #0
 1022b16:	f43f af38 	beq.w	102298a <_dtoa_r+0x7a>
 1022b1a:	1cf3      	adds	r3, r6, #3
 1022b1c:	e733      	b.n	1022986 <_dtoa_r+0x76>
 1022b1e:	2e00      	cmp	r6, #0
 1022b20:	f04f 0300 	mov.w	r3, #0
 1022b24:	930d      	str	r3, [sp, #52]	; 0x34
 1022b26:	bfa8      	it	ge
 1022b28:	9309      	strge	r3, [sp, #36]	; 0x24
 1022b2a:	f2c0 827d 	blt.w	1023028 <_dtoa_r+0x718>
 1022b2e:	f1ba 0f09 	cmp.w	sl, #9
 1022b32:	f04f 0300 	mov.w	r3, #0
 1022b36:	442e      	add	r6, r5
 1022b38:	9504      	str	r5, [sp, #16]
 1022b3a:	930b      	str	r3, [sp, #44]	; 0x2c
 1022b3c:	d9ad      	bls.n	1022a9a <_dtoa_r+0x18a>
 1022b3e:	f04f 0a00 	mov.w	sl, #0
 1022b42:	f04f 37ff 	mov.w	r7, #4294967295
 1022b46:	46d1      	mov	r9, sl
 1022b48:	2301      	movs	r3, #1
 1022b4a:	f8cd a020 	str.w	sl, [sp, #32]
 1022b4e:	930a      	str	r3, [sp, #40]	; 0x28
 1022b50:	2100      	movs	r1, #0
 1022b52:	970e      	str	r7, [sp, #56]	; 0x38
 1022b54:	6461      	str	r1, [r4, #68]	; 0x44
 1022b56:	4620      	mov	r0, r4
 1022b58:	f001 fc7a 	bl	1024450 <_Balloc>
 1022b5c:	4683      	mov	fp, r0
 1022b5e:	6420      	str	r0, [r4, #64]	; 0x40
 1022b60:	f1b9 0f00 	cmp.w	r9, #0
 1022b64:	f000 80e2 	beq.w	1022d2c <_dtoa_r+0x41c>
 1022b68:	9a04      	ldr	r2, [sp, #16]
 1022b6a:	2a00      	cmp	r2, #0
 1022b6c:	f340 827a 	ble.w	1023064 <_dtoa_r+0x754>
 1022b70:	f002 010f 	and.w	r1, r2, #15
 1022b74:	f647 7398 	movw	r3, #32664	; 0x7f98
 1022b78:	f2c0 1306 	movt	r3, #262	; 0x106
 1022b7c:	1112      	asrs	r2, r2, #4
 1022b7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1022b82:	ed93 6b00 	vldr	d6, [r3]
 1022b86:	06d3      	lsls	r3, r2, #27
 1022b88:	f140 82d1 	bpl.w	102312e <_dtoa_r+0x81e>
 1022b8c:	f248 0388 	movw	r3, #32904	; 0x8088
 1022b90:	f2c0 1306 	movt	r3, #262	; 0x106
 1022b94:	ed9d 5b02 	vldr	d5, [sp, #8]
 1022b98:	f002 020f 	and.w	r2, r2, #15
 1022b9c:	2103      	movs	r1, #3
 1022b9e:	ed93 7b08 	vldr	d7, [r3, #32]
 1022ba2:	ee85 5b07 	vdiv.f64	d5, d5, d7
 1022ba6:	f248 0388 	movw	r3, #32904	; 0x8088
 1022baa:	f2c0 1306 	movt	r3, #262	; 0x106
 1022bae:	b152      	cbz	r2, 1022bc6 <_dtoa_r+0x2b6>
 1022bb0:	07d0      	lsls	r0, r2, #31
 1022bb2:	d504      	bpl.n	1022bbe <_dtoa_r+0x2ae>
 1022bb4:	ed93 7b00 	vldr	d7, [r3]
 1022bb8:	3101      	adds	r1, #1
 1022bba:	ee26 6b07 	vmul.f64	d6, d6, d7
 1022bbe:	1052      	asrs	r2, r2, #1
 1022bc0:	f103 0308 	add.w	r3, r3, #8
 1022bc4:	d1f4      	bne.n	1022bb0 <_dtoa_r+0x2a0>
 1022bc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 1022bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1022bcc:	b13b      	cbz	r3, 1022bde <_dtoa_r+0x2ce>
 1022bce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 1022bd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1022bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022bda:	f100 83b3 	bmi.w	1023344 <_dtoa_r+0xa34>
 1022bde:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 1022be2:	ee05 1a90 	vmov	s11, r1
 1022be6:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 1022bea:	ee05 6b07 	vmla.f64	d6, d5, d7
 1022bee:	ed8d 6b00 	vstr	d6, [sp]
 1022bf2:	9b01      	ldr	r3, [sp, #4]
 1022bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 1022bf8:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1022bfc:	2f00      	cmp	r7, #0
 1022bfe:	d07d      	beq.n	1022cfc <_dtoa_r+0x3ec>
 1022c00:	f8dd e010 	ldr.w	lr, [sp, #16]
 1022c04:	463a      	mov	r2, r7
 1022c06:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 1022c0a:	f647 7c98 	movw	ip, #32664	; 0x7f98
 1022c0e:	ec41 0b15 	vmov	d5, r0, r1
 1022c12:	f2c0 1c06 	movt	ip, #262	; 0x106
 1022c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 1022c18:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 1022c1c:	f10b 0301 	add.w	r3, fp, #1
 1022c20:	ed1c 3b02 	vldr	d3, [ip, #-8]
 1022c24:	ee16 1a90 	vmov	r1, s13
 1022c28:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 1022c2c:	ee37 7b44 	vsub.f64	d7, d7, d4
 1022c30:	3130      	adds	r1, #48	; 0x30
 1022c32:	b2c9      	uxtb	r1, r1
 1022c34:	2800      	cmp	r0, #0
 1022c36:	f000 82ae 	beq.w	1023196 <_dtoa_r+0x886>
 1022c3a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 1022c3e:	f88b 1000 	strb.w	r1, [fp]
 1022c42:	ee84 6b03 	vdiv.f64	d6, d4, d3
 1022c46:	ee36 6b45 	vsub.f64	d6, d6, d5
 1022c4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1022c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022c52:	dc3e      	bgt.n	1022cd2 <_dtoa_r+0x3c2>
 1022c54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 1022c58:	ee32 5b47 	vsub.f64	d5, d2, d7
 1022c5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 1022c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022c64:	f300 8473 	bgt.w	102354e <_dtoa_r+0xc3e>
 1022c68:	2a01      	cmp	r2, #1
 1022c6a:	d05b      	beq.n	1022d24 <_dtoa_r+0x414>
 1022c6c:	445a      	add	r2, fp
 1022c6e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 1022c72:	e019      	b.n	1022ca8 <_dtoa_r+0x398>
 1022c74:	f3af 8000 	nop.w
 1022c78:	636f4361 	.word	0x636f4361
 1022c7c:	3fd287a7 	.word	0x3fd287a7
 1022c80:	8b60c8b3 	.word	0x8b60c8b3
 1022c84:	3fc68a28 	.word	0x3fc68a28
 1022c88:	509f79fb 	.word	0x509f79fb
 1022c8c:	3fd34413 	.word	0x3fd34413
 1022c90:	01069de1 	.word	0x01069de1
 1022c94:	ee32 5b47 	vsub.f64	d5, d2, d7
 1022c98:	eeb4 5bc6 	vcmpe.f64	d5, d6
 1022c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022ca0:	f100 8455 	bmi.w	102354e <_dtoa_r+0xc3e>
 1022ca4:	4293      	cmp	r3, r2
 1022ca6:	d03d      	beq.n	1022d24 <_dtoa_r+0x414>
 1022ca8:	ee27 5b04 	vmul.f64	d5, d7, d4
 1022cac:	ee26 6b04 	vmul.f64	d6, d6, d4
 1022cb0:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 1022cb4:	ee17 1a90 	vmov	r1, s15
 1022cb8:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 1022cbc:	ee35 7b43 	vsub.f64	d7, d5, d3
 1022cc0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1022cc4:	3130      	adds	r1, #48	; 0x30
 1022cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022cca:	b2c9      	uxtb	r1, r1
 1022ccc:	f803 1b01 	strb.w	r1, [r3], #1
 1022cd0:	d5e0      	bpl.n	1022c94 <_dtoa_r+0x384>
 1022cd2:	465e      	mov	r6, fp
 1022cd4:	f10e 0201 	add.w	r2, lr, #1
 1022cd8:	469b      	mov	fp, r3
 1022cda:	9204      	str	r2, [sp, #16]
 1022cdc:	e0e3      	b.n	1022ea6 <_dtoa_r+0x596>
 1022cde:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 1022ce2:	ee06 1a90 	vmov	s13, r1
 1022ce6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1022cea:	ee06 5b07 	vmla.f64	d5, d6, d7
 1022cee:	ed8d 5b00 	vstr	d5, [sp]
 1022cf2:	9b01      	ldr	r3, [sp, #4]
 1022cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 1022cf8:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1022cfc:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 1022d00:	ec41 0b15 	vmov	d5, r0, r1
 1022d04:	ee37 7b46 	vsub.f64	d7, d7, d6
 1022d08:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1022d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022d10:	f300 8345 	bgt.w	102339e <_dtoa_r+0xa8e>
 1022d14:	eeb1 5b45 	vneg.f64	d5, d5
 1022d18:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1022d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1022d20:	f100 8171 	bmi.w	1023006 <_dtoa_r+0x6f6>
 1022d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1022d28:	e9cd 2300 	strd	r2, r3, [sp]
 1022d2c:	9a04      	ldr	r2, [sp, #16]
 1022d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1022d30:	4611      	mov	r1, r2
 1022d32:	290e      	cmp	r1, #14
 1022d34:	ea6f 0203 	mvn.w	r2, r3
 1022d38:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 1022d3c:	bfc8      	it	gt
 1022d3e:	2200      	movgt	r2, #0
 1022d40:	2a00      	cmp	r2, #0
 1022d42:	f040 814a 	bne.w	1022fda <_dtoa_r+0x6ca>
 1022d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 1022d48:	2a00      	cmp	r2, #0
 1022d4a:	f000 8182 	beq.w	1023052 <_dtoa_r+0x742>
 1022d4e:	f1ba 0f01 	cmp.w	sl, #1
 1022d52:	f340 8316 	ble.w	1023382 <_dtoa_r+0xa72>
 1022d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1022d58:	1e7a      	subs	r2, r7, #1
 1022d5a:	4293      	cmp	r3, r2
 1022d5c:	bfaf      	iteee	ge
 1022d5e:	1a9b      	subge	r3, r3, r2
 1022d60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 1022d62:	920b      	strlt	r2, [sp, #44]	; 0x2c
 1022d64:	1ad3      	sublt	r3, r2, r3
 1022d66:	bfbc      	itt	lt
 1022d68:	18ed      	addlt	r5, r5, r3
 1022d6a:	2300      	movlt	r3, #0
 1022d6c:	2f00      	cmp	r7, #0
 1022d6e:	9302      	str	r3, [sp, #8]
 1022d70:	bfa5      	ittet	ge
 1022d72:	19f6      	addge	r6, r6, r7
 1022d74:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 1022d76:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 1022d78:	930c      	strge	r3, [sp, #48]	; 0x30
 1022d7a:	bfb5      	itete	lt
 1022d7c:	1bdb      	sublt	r3, r3, r7
 1022d7e:	19db      	addge	r3, r3, r7
 1022d80:	930c      	strlt	r3, [sp, #48]	; 0x30
 1022d82:	9309      	strge	r3, [sp, #36]	; 0x24
 1022d84:	2101      	movs	r1, #1
 1022d86:	4620      	mov	r0, r4
 1022d88:	f001 fc74 	bl	1024674 <__i2b>
 1022d8c:	4681      	mov	r9, r0
 1022d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1022d90:	2a00      	cmp	r2, #0
 1022d92:	bfc8      	it	gt
 1022d94:	2e00      	cmpgt	r6, #0
 1022d96:	dd09      	ble.n	1022dac <_dtoa_r+0x49c>
 1022d98:	42b2      	cmp	r2, r6
 1022d9a:	4613      	mov	r3, r2
 1022d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 1022d9e:	bfa8      	it	ge
 1022da0:	4633      	movge	r3, r6
 1022da2:	1af6      	subs	r6, r6, r3
 1022da4:	1ac9      	subs	r1, r1, r3
 1022da6:	1ad2      	subs	r2, r2, r3
 1022da8:	9109      	str	r1, [sp, #36]	; 0x24
 1022daa:	920c      	str	r2, [sp, #48]	; 0x30
 1022dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1022dae:	b163      	cbz	r3, 1022dca <_dtoa_r+0x4ba>
 1022db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1022db2:	2b00      	cmp	r3, #0
 1022db4:	f000 810a 	beq.w	1022fcc <_dtoa_r+0x6bc>
 1022db8:	9b02      	ldr	r3, [sp, #8]
 1022dba:	2b00      	cmp	r3, #0
 1022dbc:	f300 8294 	bgt.w	10232e8 <_dtoa_r+0x9d8>
 1022dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1022dc2:	9a02      	ldr	r2, [sp, #8]
 1022dc4:	1a9a      	subs	r2, r3, r2
 1022dc6:	f040 8102 	bne.w	1022fce <_dtoa_r+0x6be>
 1022dca:	2101      	movs	r1, #1
 1022dcc:	4620      	mov	r0, r4
 1022dce:	f001 fc51 	bl	1024674 <__i2b>
 1022dd2:	2d00      	cmp	r5, #0
 1022dd4:	9002      	str	r0, [sp, #8]
 1022dd6:	f300 8174 	bgt.w	10230c2 <_dtoa_r+0x7b2>
 1022dda:	f1ba 0f01 	cmp.w	sl, #1
 1022dde:	f340 82a5 	ble.w	102332c <_dtoa_r+0xa1c>
 1022de2:	2300      	movs	r3, #0
 1022de4:	930b      	str	r3, [sp, #44]	; 0x2c
 1022de6:	2001      	movs	r0, #1
 1022de8:	2d00      	cmp	r5, #0
 1022dea:	f040 8176 	bne.w	10230da <_dtoa_r+0x7ca>
 1022dee:	4430      	add	r0, r6
 1022df0:	f010 001f 	ands.w	r0, r0, #31
 1022df4:	f000 8134 	beq.w	1023060 <_dtoa_r+0x750>
 1022df8:	f1c0 0320 	rsb	r3, r0, #32
 1022dfc:	2b04      	cmp	r3, #4
 1022dfe:	f340 83fe 	ble.w	10235fe <_dtoa_r+0xcee>
 1022e02:	f1c0 001c 	rsb	r0, r0, #28
 1022e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1022e08:	4406      	add	r6, r0
 1022e0a:	4403      	add	r3, r0
 1022e0c:	9309      	str	r3, [sp, #36]	; 0x24
 1022e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1022e10:	4403      	add	r3, r0
 1022e12:	930c      	str	r3, [sp, #48]	; 0x30
 1022e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1022e16:	2b00      	cmp	r3, #0
 1022e18:	dd05      	ble.n	1022e26 <_dtoa_r+0x516>
 1022e1a:	4641      	mov	r1, r8
 1022e1c:	461a      	mov	r2, r3
 1022e1e:	4620      	mov	r0, r4
 1022e20:	f001 fd24 	bl	102486c <__lshift>
 1022e24:	4680      	mov	r8, r0
 1022e26:	2e00      	cmp	r6, #0
 1022e28:	dd05      	ble.n	1022e36 <_dtoa_r+0x526>
 1022e2a:	4632      	mov	r2, r6
 1022e2c:	9902      	ldr	r1, [sp, #8]
 1022e2e:	4620      	mov	r0, r4
 1022e30:	f001 fd1c 	bl	102486c <__lshift>
 1022e34:	9002      	str	r0, [sp, #8]
 1022e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1022e38:	f1ba 0f02 	cmp.w	sl, #2
 1022e3c:	bfd4      	ite	le
 1022e3e:	2500      	movle	r5, #0
 1022e40:	2501      	movgt	r5, #1
 1022e42:	2b00      	cmp	r3, #0
 1022e44:	f040 8153 	bne.w	10230ee <_dtoa_r+0x7de>
 1022e48:	2f00      	cmp	r7, #0
 1022e4a:	bfcc      	ite	gt
 1022e4c:	2500      	movgt	r5, #0
 1022e4e:	f005 0501 	andle.w	r5, r5, #1
 1022e52:	2d00      	cmp	r5, #0
 1022e54:	d03c      	beq.n	1022ed0 <_dtoa_r+0x5c0>
 1022e56:	2f00      	cmp	r7, #0
 1022e58:	f040 80d8 	bne.w	102300c <_dtoa_r+0x6fc>
 1022e5c:	463b      	mov	r3, r7
 1022e5e:	9902      	ldr	r1, [sp, #8]
 1022e60:	2205      	movs	r2, #5
 1022e62:	4620      	mov	r0, r4
 1022e64:	f001 fb24 	bl	10244b0 <__multadd>
 1022e68:	4601      	mov	r1, r0
 1022e6a:	9002      	str	r0, [sp, #8]
 1022e6c:	4640      	mov	r0, r8
 1022e6e:	f001 fd5b 	bl	1024928 <__mcmp>
 1022e72:	2800      	cmp	r0, #0
 1022e74:	f340 80ca 	ble.w	102300c <_dtoa_r+0x6fc>
 1022e78:	9a04      	ldr	r2, [sp, #16]
 1022e7a:	465b      	mov	r3, fp
 1022e7c:	465e      	mov	r6, fp
 1022e7e:	f102 0a01 	add.w	sl, r2, #1
 1022e82:	2231      	movs	r2, #49	; 0x31
 1022e84:	f803 2b01 	strb.w	r2, [r3], #1
 1022e88:	469b      	mov	fp, r3
 1022e8a:	9902      	ldr	r1, [sp, #8]
 1022e8c:	4620      	mov	r0, r4
 1022e8e:	f10a 0301 	add.w	r3, sl, #1
 1022e92:	9304      	str	r3, [sp, #16]
 1022e94:	f001 fb02 	bl	102449c <_Bfree>
 1022e98:	f1b9 0f00 	cmp.w	r9, #0
 1022e9c:	d003      	beq.n	1022ea6 <_dtoa_r+0x596>
 1022e9e:	4649      	mov	r1, r9
 1022ea0:	4620      	mov	r0, r4
 1022ea2:	f001 fafb 	bl	102449c <_Bfree>
 1022ea6:	4641      	mov	r1, r8
 1022ea8:	4620      	mov	r0, r4
 1022eaa:	f001 faf7 	bl	102449c <_Bfree>
 1022eae:	2300      	movs	r3, #0
 1022eb0:	f88b 3000 	strb.w	r3, [fp]
 1022eb4:	9b07      	ldr	r3, [sp, #28]
 1022eb6:	461a      	mov	r2, r3
 1022eb8:	9b04      	ldr	r3, [sp, #16]
 1022eba:	6013      	str	r3, [r2, #0]
 1022ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1022ebe:	2b00      	cmp	r3, #0
 1022ec0:	f43f ad63 	beq.w	102298a <_dtoa_r+0x7a>
 1022ec4:	4630      	mov	r0, r6
 1022ec6:	f8c3 b000 	str.w	fp, [r3]
 1022eca:	b013      	add	sp, #76	; 0x4c
 1022ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1022ed0:	9b04      	ldr	r3, [sp, #16]
 1022ed2:	3301      	adds	r3, #1
 1022ed4:	9304      	str	r3, [sp, #16]
 1022ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1022ed8:	2b00      	cmp	r3, #0
 1022eda:	f000 818e 	beq.w	10231fa <_dtoa_r+0x8ea>
 1022ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1022ee0:	2b00      	cmp	r3, #0
 1022ee2:	dd05      	ble.n	1022ef0 <_dtoa_r+0x5e0>
 1022ee4:	4649      	mov	r1, r9
 1022ee6:	461a      	mov	r2, r3
 1022ee8:	4620      	mov	r0, r4
 1022eea:	f001 fcbf 	bl	102486c <__lshift>
 1022eee:	4681      	mov	r9, r0
 1022ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1022ef2:	2b00      	cmp	r3, #0
 1022ef4:	f040 8315 	bne.w	1023522 <_dtoa_r+0xc12>
 1022ef8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 1022efc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 1022f00:	f10b 33ff 	add.w	r3, fp, #4294967295
 1022f04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 1022f08:	443b      	add	r3, r7
 1022f0a:	9a00      	ldr	r2, [sp, #0]
 1022f0c:	465f      	mov	r7, fp
 1022f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 1022f10:	f002 0201 	and.w	r2, r2, #1
 1022f14:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 1022f18:	9208      	str	r2, [sp, #32]
 1022f1a:	9d02      	ldr	r5, [sp, #8]
 1022f1c:	4640      	mov	r0, r8
 1022f1e:	4629      	mov	r1, r5
 1022f20:	f7ff fc52 	bl	10227c8 <quorem>
 1022f24:	4649      	mov	r1, r9
 1022f26:	4683      	mov	fp, r0
 1022f28:	4640      	mov	r0, r8
 1022f2a:	f001 fcfd 	bl	1024928 <__mcmp>
 1022f2e:	4629      	mov	r1, r5
 1022f30:	4652      	mov	r2, sl
 1022f32:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 1022f36:	9300      	str	r3, [sp, #0]
 1022f38:	4606      	mov	r6, r0
 1022f3a:	4620      	mov	r0, r4
 1022f3c:	f001 fd12 	bl	1024964 <__mdiff>
 1022f40:	68c3      	ldr	r3, [r0, #12]
 1022f42:	4605      	mov	r5, r0
 1022f44:	4601      	mov	r1, r0
 1022f46:	2b00      	cmp	r3, #0
 1022f48:	f040 81e1 	bne.w	102330e <_dtoa_r+0x9fe>
 1022f4c:	4640      	mov	r0, r8
 1022f4e:	f001 fceb 	bl	1024928 <__mcmp>
 1022f52:	4629      	mov	r1, r5
 1022f54:	900a      	str	r0, [sp, #40]	; 0x28
 1022f56:	4620      	mov	r0, r4
 1022f58:	f001 faa0 	bl	102449c <_Bfree>
 1022f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1022f5e:	9908      	ldr	r1, [sp, #32]
 1022f60:	461a      	mov	r2, r3
 1022f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1022f64:	431a      	orrs	r2, r3
 1022f66:	430a      	orrs	r2, r1
 1022f68:	f000 8321 	beq.w	10235ae <_dtoa_r+0xc9e>
 1022f6c:	2e00      	cmp	r6, #0
 1022f6e:	f107 0501 	add.w	r5, r7, #1
 1022f72:	f2c0 82ae 	blt.w	10234d2 <_dtoa_r+0xbc2>
 1022f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1022f78:	4316      	orrs	r6, r2
 1022f7a:	9a08      	ldr	r2, [sp, #32]
 1022f7c:	4332      	orrs	r2, r6
 1022f7e:	f000 82a8 	beq.w	10234d2 <_dtoa_r+0xbc2>
 1022f82:	2b00      	cmp	r3, #0
 1022f84:	f300 82e8 	bgt.w	1023558 <_dtoa_r+0xc48>
 1022f88:	9b00      	ldr	r3, [sp, #0]
 1022f8a:	703b      	strb	r3, [r7, #0]
 1022f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1022f8e:	42bb      	cmp	r3, r7
 1022f90:	f000 82f0 	beq.w	1023574 <_dtoa_r+0xc64>
 1022f94:	4641      	mov	r1, r8
 1022f96:	2300      	movs	r3, #0
 1022f98:	220a      	movs	r2, #10
 1022f9a:	4620      	mov	r0, r4
 1022f9c:	f001 fa88 	bl	10244b0 <__multadd>
 1022fa0:	45d1      	cmp	r9, sl
 1022fa2:	4649      	mov	r1, r9
 1022fa4:	f04f 0300 	mov.w	r3, #0
 1022fa8:	f04f 020a 	mov.w	r2, #10
 1022fac:	4680      	mov	r8, r0
 1022fae:	4620      	mov	r0, r4
 1022fb0:	f000 81b2 	beq.w	1023318 <_dtoa_r+0xa08>
 1022fb4:	f001 fa7c 	bl	10244b0 <__multadd>
 1022fb8:	4651      	mov	r1, sl
 1022fba:	2300      	movs	r3, #0
 1022fbc:	220a      	movs	r2, #10
 1022fbe:	462f      	mov	r7, r5
 1022fc0:	4681      	mov	r9, r0
 1022fc2:	4620      	mov	r0, r4
 1022fc4:	f001 fa74 	bl	10244b0 <__multadd>
 1022fc8:	4682      	mov	sl, r0
 1022fca:	e7a6      	b.n	1022f1a <_dtoa_r+0x60a>
 1022fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1022fce:	4641      	mov	r1, r8
 1022fd0:	4620      	mov	r0, r4
 1022fd2:	f001 fbf9 	bl	10247c8 <__pow5mult>
 1022fd6:	4680      	mov	r8, r0
 1022fd8:	e6f7      	b.n	1022dca <_dtoa_r+0x4ba>
 1022fda:	f647 7398 	movw	r3, #32664	; 0x7f98
 1022fde:	f2c0 1306 	movt	r3, #262	; 0x106
 1022fe2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1022fe6:	2f00      	cmp	r7, #0
 1022fe8:	460a      	mov	r2, r1
 1022fea:	ed93 5b00 	vldr	d5, [r3]
 1022fee:	bfc8      	it	gt
 1022ff0:	2200      	movgt	r2, #0
 1022ff2:	9b08      	ldr	r3, [sp, #32]
 1022ff4:	bfd8      	it	le
 1022ff6:	2201      	movle	r2, #1
 1022ff8:	ea12 73d3 	ands.w	r3, r2, r3, lsr #31
 1022ffc:	f000 81ed 	beq.w	10233da <_dtoa_r+0xaca>
 1023000:	2f00      	cmp	r7, #0
 1023002:	f000 814a 	beq.w	102329a <_dtoa_r+0x98a>
 1023006:	2300      	movs	r3, #0
 1023008:	9302      	str	r3, [sp, #8]
 102300a:	4699      	mov	r9, r3
 102300c:	9b08      	ldr	r3, [sp, #32]
 102300e:	465e      	mov	r6, fp
 1023010:	ea6f 0a03 	mvn.w	sl, r3
 1023014:	e739      	b.n	1022e8a <_dtoa_r+0x57a>
 1023016:	2e00      	cmp	r6, #0
 1023018:	f04f 0301 	mov.w	r3, #1
 102301c:	930d      	str	r3, [sp, #52]	; 0x34
 102301e:	bfa4      	itt	ge
 1023020:	2300      	movge	r3, #0
 1023022:	9309      	strge	r3, [sp, #36]	; 0x24
 1023024:	f6bf ad2a 	bge.w	1022a7c <_dtoa_r+0x16c>
 1023028:	f1cb 0301 	rsb	r3, fp, #1
 102302c:	2600      	movs	r6, #0
 102302e:	9309      	str	r3, [sp, #36]	; 0x24
 1023030:	e524      	b.n	1022a7c <_dtoa_r+0x16c>
 1023032:	f649 56e0 	movw	r6, #40416	; 0x9de0
 1023036:	f2c0 1606 	movt	r6, #262	; 0x106
 102303a:	4630      	mov	r0, r6
 102303c:	b013      	add	sp, #76	; 0x4c
 102303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023042:	9a00      	ldr	r2, [sp, #0]
 1023044:	f1c3 0320 	rsb	r3, r3, #32
 1023048:	fa02 f303 	lsl.w	r3, r2, r3
 102304c:	ee07 3a90 	vmov	s15, r3
 1023050:	e4c0      	b.n	10229d4 <_dtoa_r+0xc4>
 1023052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1023054:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1023058:	9302      	str	r3, [sp, #8]
 102305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 102305c:	930c      	str	r3, [sp, #48]	; 0x30
 102305e:	e696      	b.n	1022d8e <_dtoa_r+0x47e>
 1023060:	201c      	movs	r0, #28
 1023062:	e6d0      	b.n	1022e06 <_dtoa_r+0x4f6>
 1023064:	f000 8115 	beq.w	1023292 <_dtoa_r+0x982>
 1023068:	9b04      	ldr	r3, [sp, #16]
 102306a:	f647 7298 	movw	r2, #32664	; 0x7f98
 102306e:	f2c0 1206 	movt	r2, #262	; 0x106
 1023072:	ed9d 7b02 	vldr	d7, [sp, #8]
 1023076:	425b      	negs	r3, r3
 1023078:	f003 010f 	and.w	r1, r3, #15
 102307c:	111b      	asrs	r3, r3, #4
 102307e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 1023082:	ed92 5b00 	vldr	d5, [r2]
 1023086:	ee27 5b05 	vmul.f64	d5, d7, d5
 102308a:	f000 82ad 	beq.w	10235e8 <_dtoa_r+0xcd8>
 102308e:	f248 0288 	movw	r2, #32904	; 0x8088
 1023092:	f2c0 1206 	movt	r2, #262	; 0x106
 1023096:	2000      	movs	r0, #0
 1023098:	2102      	movs	r1, #2
 102309a:	eeb0 7b45 	vmov.f64	d7, d5
 102309e:	f013 0f01 	tst.w	r3, #1
 10230a2:	d005      	beq.n	10230b0 <_dtoa_r+0x7a0>
 10230a4:	ed92 6b00 	vldr	d6, [r2]
 10230a8:	3101      	adds	r1, #1
 10230aa:	4648      	mov	r0, r9
 10230ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 10230b0:	105b      	asrs	r3, r3, #1
 10230b2:	f102 0208 	add.w	r2, r2, #8
 10230b6:	d1f2      	bne.n	102309e <_dtoa_r+0x78e>
 10230b8:	2800      	cmp	r0, #0
 10230ba:	bf08      	it	eq
 10230bc:	eeb0 7b45 	vmoveq.f64	d7, d5
 10230c0:	e583      	b.n	1022bca <_dtoa_r+0x2ba>
 10230c2:	4601      	mov	r1, r0
 10230c4:	462a      	mov	r2, r5
 10230c6:	4620      	mov	r0, r4
 10230c8:	f001 fb7e 	bl	10247c8 <__pow5mult>
 10230cc:	f1ba 0f01 	cmp.w	sl, #1
 10230d0:	9002      	str	r0, [sp, #8]
 10230d2:	f340 80f1 	ble.w	10232b8 <_dtoa_r+0x9a8>
 10230d6:	2300      	movs	r3, #0
 10230d8:	930b      	str	r3, [sp, #44]	; 0x2c
 10230da:	9a02      	ldr	r2, [sp, #8]
 10230dc:	6913      	ldr	r3, [r2, #16]
 10230de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 10230e2:	6918      	ldr	r0, [r3, #16]
 10230e4:	f001 fa78 	bl	10245d8 <__hi0bits>
 10230e8:	f1c0 0020 	rsb	r0, r0, #32
 10230ec:	e67f      	b.n	1022dee <_dtoa_r+0x4de>
 10230ee:	9902      	ldr	r1, [sp, #8]
 10230f0:	4640      	mov	r0, r8
 10230f2:	f001 fc19 	bl	1024928 <__mcmp>
 10230f6:	2800      	cmp	r0, #0
 10230f8:	f6bf aea6 	bge.w	1022e48 <_dtoa_r+0x538>
 10230fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 10230fe:	2300      	movs	r3, #0
 1023100:	4641      	mov	r1, r8
 1023102:	220a      	movs	r2, #10
 1023104:	4620      	mov	r0, r4
 1023106:	429e      	cmp	r6, r3
 1023108:	bfcc      	ite	gt
 102310a:	2500      	movgt	r5, #0
 102310c:	f005 0501 	andle.w	r5, r5, #1
 1023110:	f001 f9ce 	bl	10244b0 <__multadd>
 1023114:	9b04      	ldr	r3, [sp, #16]
 1023116:	1e5e      	subs	r6, r3, #1
 1023118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 102311a:	4680      	mov	r8, r0
 102311c:	2b00      	cmp	r3, #0
 102311e:	f040 8252 	bne.w	10235c6 <_dtoa_r+0xcb6>
 1023122:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 1023124:	2d00      	cmp	r5, #0
 1023126:	d068      	beq.n	10231fa <_dtoa_r+0x8ea>
 1023128:	9604      	str	r6, [sp, #16]
 102312a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 102312c:	e693      	b.n	1022e56 <_dtoa_r+0x546>
 102312e:	ed9d 5b00 	vldr	d5, [sp]
 1023132:	2102      	movs	r1, #2
 1023134:	e537      	b.n	1022ba6 <_dtoa_r+0x296>
 1023136:	2301      	movs	r3, #1
 1023138:	930a      	str	r3, [sp, #40]	; 0x28
 102313a:	9b08      	ldr	r3, [sp, #32]
 102313c:	2b00      	cmp	r3, #0
 102313e:	f340 80f1 	ble.w	1023324 <_dtoa_r+0xa14>
 1023142:	461f      	mov	r7, r3
 1023144:	461a      	mov	r2, r3
 1023146:	930e      	str	r3, [sp, #56]	; 0x38
 1023148:	2f0e      	cmp	r7, #14
 102314a:	bf8c      	ite	hi
 102314c:	f04f 0900 	movhi.w	r9, #0
 1023150:	f009 0901 	andls.w	r9, r9, #1
 1023154:	2a17      	cmp	r2, #23
 1023156:	f04f 0100 	mov.w	r1, #0
 102315a:	6461      	str	r1, [r4, #68]	; 0x44
 102315c:	f77f acfb 	ble.w	1022b56 <_dtoa_r+0x246>
 1023160:	2304      	movs	r3, #4
 1023162:	005b      	lsls	r3, r3, #1
 1023164:	3101      	adds	r1, #1
 1023166:	f103 0014 	add.w	r0, r3, #20
 102316a:	4290      	cmp	r0, r2
 102316c:	d9f9      	bls.n	1023162 <_dtoa_r+0x852>
 102316e:	6461      	str	r1, [r4, #68]	; 0x44
 1023170:	e4f1      	b.n	1022b56 <_dtoa_r+0x246>
 1023172:	2301      	movs	r3, #1
 1023174:	930a      	str	r3, [sp, #40]	; 0x28
 1023176:	9a04      	ldr	r2, [sp, #16]
 1023178:	9b08      	ldr	r3, [sp, #32]
 102317a:	4413      	add	r3, r2
 102317c:	930e      	str	r3, [sp, #56]	; 0x38
 102317e:	1c5f      	adds	r7, r3, #1
 1023180:	2f01      	cmp	r7, #1
 1023182:	463a      	mov	r2, r7
 1023184:	bfb8      	it	lt
 1023186:	2201      	movlt	r2, #1
 1023188:	e7de      	b.n	1023148 <_dtoa_r+0x838>
 102318a:	2300      	movs	r3, #0
 102318c:	930a      	str	r3, [sp, #40]	; 0x28
 102318e:	e7f2      	b.n	1023176 <_dtoa_r+0x866>
 1023190:	2300      	movs	r3, #0
 1023192:	930a      	str	r3, [sp, #40]	; 0x28
 1023194:	e7d1      	b.n	102313a <_dtoa_r+0x82a>
 1023196:	2a01      	cmp	r2, #1
 1023198:	ee25 3b03 	vmul.f64	d3, d5, d3
 102319c:	f88b 1000 	strb.w	r1, [fp]
 10231a0:	d011      	beq.n	10231c6 <_dtoa_r+0x8b6>
 10231a2:	445a      	add	r2, fp
 10231a4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 10231a8:	ee27 6b04 	vmul.f64	d6, d7, d4
 10231ac:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 10231b0:	ee17 1a90 	vmov	r1, s15
 10231b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 10231b8:	ee36 7b45 	vsub.f64	d7, d6, d5
 10231bc:	3130      	adds	r1, #48	; 0x30
 10231be:	f803 1b01 	strb.w	r1, [r3], #1
 10231c2:	4293      	cmp	r3, r2
 10231c4:	d1f0      	bne.n	10231a8 <_dtoa_r+0x898>
 10231c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 10231ca:	ee33 5b06 	vadd.f64	d5, d3, d6
 10231ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 10231d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10231d6:	f100 819d 	bmi.w	1023514 <_dtoa_r+0xc04>
 10231da:	ee36 6b43 	vsub.f64	d6, d6, d3
 10231de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 10231e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10231e6:	f77f ad9d 	ble.w	1022d24 <_dtoa_r+0x414>
 10231ea:	e000      	b.n	10231ee <_dtoa_r+0x8de>
 10231ec:	460b      	mov	r3, r1
 10231ee:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 10231f2:	1e59      	subs	r1, r3, #1
 10231f4:	2a30      	cmp	r2, #48	; 0x30
 10231f6:	d0f9      	beq.n	10231ec <_dtoa_r+0x8dc>
 10231f8:	e56b      	b.n	1022cd2 <_dtoa_r+0x3c2>
 10231fa:	465d      	mov	r5, fp
 10231fc:	2601      	movs	r6, #1
 10231fe:	f8dd a008 	ldr.w	sl, [sp, #8]
 1023202:	e002      	b.n	102320a <_dtoa_r+0x8fa>
 1023204:	f001 f954 	bl	10244b0 <__multadd>
 1023208:	4680      	mov	r8, r0
 102320a:	4651      	mov	r1, sl
 102320c:	4640      	mov	r0, r8
 102320e:	f7ff fadb 	bl	10227c8 <quorem>
 1023212:	42be      	cmp	r6, r7
 1023214:	f04f 0300 	mov.w	r3, #0
 1023218:	f04f 020a 	mov.w	r2, #10
 102321c:	4641      	mov	r1, r8
 102321e:	f106 0601 	add.w	r6, r6, #1
 1023222:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 1023226:	4620      	mov	r0, r4
 1023228:	f805 cb01 	strb.w	ip, [r5], #1
 102322c:	dbea      	blt.n	1023204 <_dtoa_r+0x8f4>
 102322e:	2600      	movs	r6, #0
 1023230:	f8cd c000 	str.w	ip, [sp]
 1023234:	4641      	mov	r1, r8
 1023236:	2201      	movs	r2, #1
 1023238:	4620      	mov	r0, r4
 102323a:	f001 fb17 	bl	102486c <__lshift>
 102323e:	9902      	ldr	r1, [sp, #8]
 1023240:	4680      	mov	r8, r0
 1023242:	f001 fb71 	bl	1024928 <__mcmp>
 1023246:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 102324a:	2800      	cmp	r0, #0
 102324c:	f340 8118 	ble.w	1023480 <_dtoa_r+0xb70>
 1023250:	1e6b      	subs	r3, r5, #1
 1023252:	e004      	b.n	102325e <_dtoa_r+0x94e>
 1023254:	459b      	cmp	fp, r3
 1023256:	f000 8124 	beq.w	10234a2 <_dtoa_r+0xb92>
 102325a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 102325e:	2a39      	cmp	r2, #57	; 0x39
 1023260:	f103 0501 	add.w	r5, r3, #1
 1023264:	d0f6      	beq.n	1023254 <_dtoa_r+0x944>
 1023266:	3201      	adds	r2, #1
 1023268:	701a      	strb	r2, [r3, #0]
 102326a:	9902      	ldr	r1, [sp, #8]
 102326c:	4620      	mov	r0, r4
 102326e:	f001 f915 	bl	102449c <_Bfree>
 1023272:	f1b9 0f00 	cmp.w	r9, #0
 1023276:	f000 8111 	beq.w	102349c <_dtoa_r+0xb8c>
 102327a:	2e00      	cmp	r6, #0
 102327c:	bf18      	it	ne
 102327e:	454e      	cmpne	r6, r9
 1023280:	f000 81b7 	beq.w	10235f2 <_dtoa_r+0xce2>
 1023284:	4631      	mov	r1, r6
 1023286:	4620      	mov	r0, r4
 1023288:	465e      	mov	r6, fp
 102328a:	f001 f907 	bl	102449c <_Bfree>
 102328e:	46ab      	mov	fp, r5
 1023290:	e605      	b.n	1022e9e <_dtoa_r+0x58e>
 1023292:	ed9d 7b00 	vldr	d7, [sp]
 1023296:	2102      	movs	r1, #2
 1023298:	e497      	b.n	1022bca <_dtoa_r+0x2ba>
 102329a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 102329e:	9702      	str	r7, [sp, #8]
 10232a0:	46b9      	mov	r9, r7
 10232a2:	ee25 5b07 	vmul.f64	d5, d5, d7
 10232a6:	ed9d 7b00 	vldr	d7, [sp]
 10232aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 10232ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10232b2:	f6bf aeab 	bge.w	102300c <_dtoa_r+0x6fc>
 10232b6:	e5df      	b.n	1022e78 <_dtoa_r+0x568>
 10232b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 10232bc:	2900      	cmp	r1, #0
 10232be:	f47f af0a 	bne.w	10230d6 <_dtoa_r+0x7c6>
 10232c2:	f3c2 0313 	ubfx	r3, r2, #0, #20
 10232c6:	2b00      	cmp	r3, #0
 10232c8:	f040 8196 	bne.w	10235f8 <_dtoa_r+0xce8>
 10232cc:	2300      	movs	r3, #0
 10232ce:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 10232d2:	4013      	ands	r3, r2
 10232d4:	2b00      	cmp	r3, #0
 10232d6:	f000 8152 	beq.w	102357e <_dtoa_r+0xc6e>
 10232da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10232dc:	3601      	adds	r6, #1
 10232de:	3301      	adds	r3, #1
 10232e0:	9309      	str	r3, [sp, #36]	; 0x24
 10232e2:	2301      	movs	r3, #1
 10232e4:	930b      	str	r3, [sp, #44]	; 0x2c
 10232e6:	e57e      	b.n	1022de6 <_dtoa_r+0x4d6>
 10232e8:	461a      	mov	r2, r3
 10232ea:	4649      	mov	r1, r9
 10232ec:	4620      	mov	r0, r4
 10232ee:	f001 fa6b 	bl	10247c8 <__pow5mult>
 10232f2:	4642      	mov	r2, r8
 10232f4:	4601      	mov	r1, r0
 10232f6:	4681      	mov	r9, r0
 10232f8:	4620      	mov	r0, r4
 10232fa:	f001 f9c5 	bl	1024688 <__multiply>
 10232fe:	4641      	mov	r1, r8
 1023300:	900f      	str	r0, [sp, #60]	; 0x3c
 1023302:	4620      	mov	r0, r4
 1023304:	f001 f8ca 	bl	102449c <_Bfree>
 1023308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 102330a:	4698      	mov	r8, r3
 102330c:	e558      	b.n	1022dc0 <_dtoa_r+0x4b0>
 102330e:	4620      	mov	r0, r4
 1023310:	f001 f8c4 	bl	102449c <_Bfree>
 1023314:	2301      	movs	r3, #1
 1023316:	e629      	b.n	1022f6c <_dtoa_r+0x65c>
 1023318:	f001 f8ca 	bl	10244b0 <__multadd>
 102331c:	462f      	mov	r7, r5
 102331e:	4681      	mov	r9, r0
 1023320:	4682      	mov	sl, r0
 1023322:	e5fa      	b.n	1022f1a <_dtoa_r+0x60a>
 1023324:	2301      	movs	r3, #1
 1023326:	9308      	str	r3, [sp, #32]
 1023328:	461f      	mov	r7, r3
 102332a:	e411      	b.n	1022b50 <_dtoa_r+0x240>
 102332c:	e9dd 1200 	ldrd	r1, r2, [sp]
 1023330:	2900      	cmp	r1, #0
 1023332:	f47f ad56 	bne.w	1022de2 <_dtoa_r+0x4d2>
 1023336:	f3c2 0313 	ubfx	r3, r2, #0, #20
 102333a:	2b00      	cmp	r3, #0
 102333c:	d0c6      	beq.n	10232cc <_dtoa_r+0x9bc>
 102333e:	9b00      	ldr	r3, [sp, #0]
 1023340:	930b      	str	r3, [sp, #44]	; 0x2c
 1023342:	e550      	b.n	1022de6 <_dtoa_r+0x4d6>
 1023344:	2f00      	cmp	r7, #0
 1023346:	f43f acca 	beq.w	1022cde <_dtoa_r+0x3ce>
 102334a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 102334c:	2a00      	cmp	r2, #0
 102334e:	f77f ace9 	ble.w	1022d24 <_dtoa_r+0x414>
 1023352:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 1023356:	3101      	adds	r1, #1
 1023358:	9b04      	ldr	r3, [sp, #16]
 102335a:	f103 3eff 	add.w	lr, r3, #4294967295
 102335e:	ee27 7b06 	vmul.f64	d7, d7, d6
 1023362:	ee06 1a90 	vmov	s13, r1
 1023366:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 102336a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 102336e:	ee06 5b07 	vmla.f64	d5, d6, d7
 1023372:	ed8d 5b00 	vstr	d5, [sp]
 1023376:	9b01      	ldr	r3, [sp, #4]
 1023378:	e9dd 0100 	ldrd	r0, r1, [sp]
 102337c:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1023380:	e441      	b.n	1022c06 <_dtoa_r+0x2f6>
 1023382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1023384:	2a00      	cmp	r2, #0
 1023386:	f000 8099 	beq.w	10234bc <_dtoa_r+0xbac>
 102338a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102338c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 1023390:	441e      	add	r6, r3
 1023392:	18d3      	adds	r3, r2, r3
 1023394:	9309      	str	r3, [sp, #36]	; 0x24
 1023396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1023398:	920c      	str	r2, [sp, #48]	; 0x30
 102339a:	9302      	str	r3, [sp, #8]
 102339c:	e4f2      	b.n	1022d84 <_dtoa_r+0x474>
 102339e:	2300      	movs	r3, #0
 10233a0:	9302      	str	r3, [sp, #8]
 10233a2:	4699      	mov	r9, r3
 10233a4:	e568      	b.n	1022e78 <_dtoa_r+0x568>
 10233a6:	2100      	movs	r1, #0
 10233a8:	4620      	mov	r0, r4
 10233aa:	6461      	str	r1, [r4, #68]	; 0x44
 10233ac:	f001 f850 	bl	1024450 <_Balloc>
 10233b0:	9a04      	ldr	r2, [sp, #16]
 10233b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10233b4:	2a0e      	cmp	r2, #14
 10233b6:	4683      	mov	fp, r0
 10233b8:	6420      	str	r0, [r4, #64]	; 0x40
 10233ba:	f300 8126 	bgt.w	102360a <_dtoa_r+0xcfa>
 10233be:	2b00      	cmp	r3, #0
 10233c0:	f2c0 8123 	blt.w	102360a <_dtoa_r+0xcfa>
 10233c4:	9a04      	ldr	r2, [sp, #16]
 10233c6:	f647 7398 	movw	r3, #32664	; 0x7f98
 10233ca:	f2c0 1306 	movt	r3, #262	; 0x106
 10233ce:	f04f 37ff 	mov.w	r7, #4294967295
 10233d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 10233d6:	ed93 5b00 	vldr	d5, [r3]
 10233da:	9a04      	ldr	r2, [sp, #16]
 10233dc:	2f01      	cmp	r7, #1
 10233de:	465b      	mov	r3, fp
 10233e0:	ed9d 7b00 	vldr	d7, [sp]
 10233e4:	f102 0201 	add.w	r2, r2, #1
 10233e8:	9204      	str	r2, [sp, #16]
 10233ea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 10233ee:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 10233f2:	ee16 2a10 	vmov	r2, s12
 10233f6:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 10233fa:	ee04 7b45 	vmls.f64	d7, d4, d5
 10233fe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1023402:	f803 2b01 	strb.w	r2, [r3], #1
 1023406:	d022      	beq.n	102344e <_dtoa_r+0xb3e>
 1023408:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 102340c:	ee27 7b03 	vmul.f64	d7, d7, d3
 1023410:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1023414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1023418:	d079      	beq.n	102350e <_dtoa_r+0xbfe>
 102341a:	2201      	movs	r2, #1
 102341c:	e006      	b.n	102342c <_dtoa_r+0xb1c>
 102341e:	ee27 7b03 	vmul.f64	d7, d7, d3
 1023422:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1023426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 102342a:	d070      	beq.n	102350e <_dtoa_r+0xbfe>
 102342c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 1023430:	3201      	adds	r2, #1
 1023432:	42ba      	cmp	r2, r7
 1023434:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 1023438:	ee16 1a10 	vmov	r1, s12
 102343c:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 1023440:	ee04 7b45 	vmls.f64	d7, d4, d5
 1023444:	f101 0130 	add.w	r1, r1, #48	; 0x30
 1023448:	f803 1b01 	strb.w	r1, [r3], #1
 102344c:	d1e7      	bne.n	102341e <_dtoa_r+0xb0e>
 102344e:	ee37 7b07 	vadd.f64	d7, d7, d7
 1023452:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1023456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 102345a:	f340 8098 	ble.w	102358e <_dtoa_r+0xc7e>
 102345e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1023462:	465e      	mov	r6, fp
 1023464:	3b01      	subs	r3, #1
 1023466:	e003      	b.n	1023470 <_dtoa_r+0xb60>
 1023468:	429e      	cmp	r6, r3
 102346a:	d021      	beq.n	10234b0 <_dtoa_r+0xba0>
 102346c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 1023470:	2939      	cmp	r1, #57	; 0x39
 1023472:	f103 0b01 	add.w	fp, r3, #1
 1023476:	d0f7      	beq.n	1023468 <_dtoa_r+0xb58>
 1023478:	1c4a      	adds	r2, r1, #1
 102347a:	b2d2      	uxtb	r2, r2
 102347c:	701a      	strb	r2, [r3, #0]
 102347e:	e512      	b.n	1022ea6 <_dtoa_r+0x596>
 1023480:	d103      	bne.n	102348a <_dtoa_r+0xb7a>
 1023482:	9b00      	ldr	r3, [sp, #0]
 1023484:	07db      	lsls	r3, r3, #31
 1023486:	f53f aee3 	bmi.w	1023250 <_dtoa_r+0x940>
 102348a:	1e6b      	subs	r3, r5, #1
 102348c:	e001      	b.n	1023492 <_dtoa_r+0xb82>
 102348e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 1023492:	2a30      	cmp	r2, #48	; 0x30
 1023494:	f103 0501 	add.w	r5, r3, #1
 1023498:	d0f9      	beq.n	102348e <_dtoa_r+0xb7e>
 102349a:	e6e6      	b.n	102326a <_dtoa_r+0x95a>
 102349c:	465e      	mov	r6, fp
 102349e:	46ab      	mov	fp, r5
 10234a0:	e501      	b.n	1022ea6 <_dtoa_r+0x596>
 10234a2:	9b04      	ldr	r3, [sp, #16]
 10234a4:	3301      	adds	r3, #1
 10234a6:	9304      	str	r3, [sp, #16]
 10234a8:	2331      	movs	r3, #49	; 0x31
 10234aa:	f88b 3000 	strb.w	r3, [fp]
 10234ae:	e6dc      	b.n	102326a <_dtoa_r+0x95a>
 10234b0:	9a04      	ldr	r2, [sp, #16]
 10234b2:	3201      	adds	r2, #1
 10234b4:	9204      	str	r2, [sp, #16]
 10234b6:	2231      	movs	r2, #49	; 0x31
 10234b8:	701a      	strb	r2, [r3, #0]
 10234ba:	e4f4      	b.n	1022ea6 <_dtoa_r+0x596>
 10234bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10234be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10234c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10234c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 10234c6:	920c      	str	r2, [sp, #48]	; 0x30
 10234c8:	441e      	add	r6, r3
 10234ca:	18d3      	adds	r3, r2, r3
 10234cc:	9102      	str	r1, [sp, #8]
 10234ce:	9309      	str	r3, [sp, #36]	; 0x24
 10234d0:	e458      	b.n	1022d84 <_dtoa_r+0x474>
 10234d2:	2b00      	cmp	r3, #0
 10234d4:	465e      	mov	r6, fp
 10234d6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 10234da:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 10234de:	dd10      	ble.n	1023502 <_dtoa_r+0xbf2>
 10234e0:	4641      	mov	r1, r8
 10234e2:	2201      	movs	r2, #1
 10234e4:	4620      	mov	r0, r4
 10234e6:	f001 f9c1 	bl	102486c <__lshift>
 10234ea:	9902      	ldr	r1, [sp, #8]
 10234ec:	4680      	mov	r8, r0
 10234ee:	f001 fa1b 	bl	1024928 <__mcmp>
 10234f2:	2800      	cmp	r0, #0
 10234f4:	dd73      	ble.n	10235de <_dtoa_r+0xcce>
 10234f6:	9b00      	ldr	r3, [sp, #0]
 10234f8:	2b39      	cmp	r3, #57	; 0x39
 10234fa:	d042      	beq.n	1023582 <_dtoa_r+0xc72>
 10234fc:	4633      	mov	r3, r6
 10234fe:	3331      	adds	r3, #49	; 0x31
 1023500:	9300      	str	r3, [sp, #0]
 1023502:	9b00      	ldr	r3, [sp, #0]
 1023504:	464e      	mov	r6, r9
 1023506:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 102350a:	703b      	strb	r3, [r7, #0]
 102350c:	e6ad      	b.n	102326a <_dtoa_r+0x95a>
 102350e:	465e      	mov	r6, fp
 1023510:	469b      	mov	fp, r3
 1023512:	e4c8      	b.n	1022ea6 <_dtoa_r+0x596>
 1023514:	f10e 0201 	add.w	r2, lr, #1
 1023518:	465e      	mov	r6, fp
 102351a:	9204      	str	r2, [sp, #16]
 102351c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1023520:	e7a0      	b.n	1023464 <_dtoa_r+0xb54>
 1023522:	f8d9 1004 	ldr.w	r1, [r9, #4]
 1023526:	4620      	mov	r0, r4
 1023528:	f000 ff92 	bl	1024450 <_Balloc>
 102352c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 1023530:	f109 010c 	add.w	r1, r9, #12
 1023534:	3302      	adds	r3, #2
 1023536:	009a      	lsls	r2, r3, #2
 1023538:	4605      	mov	r5, r0
 102353a:	300c      	adds	r0, #12
 102353c:	f7f9 ee60 	blx	101d200 <memcpy>
 1023540:	4629      	mov	r1, r5
 1023542:	2201      	movs	r2, #1
 1023544:	4620      	mov	r0, r4
 1023546:	f001 f991 	bl	102486c <__lshift>
 102354a:	900a      	str	r0, [sp, #40]	; 0x28
 102354c:	e4d6      	b.n	1022efc <_dtoa_r+0x5ec>
 102354e:	f10e 0201 	add.w	r2, lr, #1
 1023552:	465e      	mov	r6, fp
 1023554:	9204      	str	r2, [sp, #16]
 1023556:	e785      	b.n	1023464 <_dtoa_r+0xb54>
 1023558:	9b00      	ldr	r3, [sp, #0]
 102355a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 102355e:	2b39      	cmp	r3, #57	; 0x39
 1023560:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1023564:	d00d      	beq.n	1023582 <_dtoa_r+0xc72>
 1023566:	9b00      	ldr	r3, [sp, #0]
 1023568:	464e      	mov	r6, r9
 102356a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 102356e:	3301      	adds	r3, #1
 1023570:	703b      	strb	r3, [r7, #0]
 1023572:	e67a      	b.n	102326a <_dtoa_r+0x95a>
 1023574:	464e      	mov	r6, r9
 1023576:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 102357a:	46d1      	mov	r9, sl
 102357c:	e65a      	b.n	1023234 <_dtoa_r+0x924>
 102357e:	930b      	str	r3, [sp, #44]	; 0x2c
 1023580:	e431      	b.n	1022de6 <_dtoa_r+0x4d6>
 1023582:	2239      	movs	r2, #57	; 0x39
 1023584:	464e      	mov	r6, r9
 1023586:	703a      	strb	r2, [r7, #0]
 1023588:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 102358c:	e660      	b.n	1023250 <_dtoa_r+0x940>
 102358e:	eeb4 7b45 	vcmp.f64	d7, d5
 1023592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1023596:	d1ba      	bne.n	102350e <_dtoa_r+0xbfe>
 1023598:	ee16 2a10 	vmov	r2, s12
 102359c:	465e      	mov	r6, fp
 102359e:	07d1      	lsls	r1, r2, #31
 10235a0:	bf48      	it	mi
 10235a2:	f813 1c01 	ldrbmi.w	r1, [r3, #-1]
 10235a6:	f53f af5d 	bmi.w	1023464 <_dtoa_r+0xb54>
 10235aa:	469b      	mov	fp, r3
 10235ac:	e47b      	b.n	1022ea6 <_dtoa_r+0x596>
 10235ae:	9a00      	ldr	r2, [sp, #0]
 10235b0:	465b      	mov	r3, fp
 10235b2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 10235b6:	1c7d      	adds	r5, r7, #1
 10235b8:	2a39      	cmp	r2, #57	; 0x39
 10235ba:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 10235be:	d0e0      	beq.n	1023582 <_dtoa_r+0xc72>
 10235c0:	2e00      	cmp	r6, #0
 10235c2:	dc9c      	bgt.n	10234fe <_dtoa_r+0xbee>
 10235c4:	e79d      	b.n	1023502 <_dtoa_r+0xbf2>
 10235c6:	4649      	mov	r1, r9
 10235c8:	2300      	movs	r3, #0
 10235ca:	220a      	movs	r2, #10
 10235cc:	4620      	mov	r0, r4
 10235ce:	f000 ff6f 	bl	10244b0 <__multadd>
 10235d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 10235d4:	4681      	mov	r9, r0
 10235d6:	2d00      	cmp	r5, #0
 10235d8:	f43f ac81 	beq.w	1022ede <_dtoa_r+0x5ce>
 10235dc:	e5a4      	b.n	1023128 <_dtoa_r+0x818>
 10235de:	d190      	bne.n	1023502 <_dtoa_r+0xbf2>
 10235e0:	9b00      	ldr	r3, [sp, #0]
 10235e2:	07da      	lsls	r2, r3, #31
 10235e4:	d58d      	bpl.n	1023502 <_dtoa_r+0xbf2>
 10235e6:	e786      	b.n	10234f6 <_dtoa_r+0xbe6>
 10235e8:	eeb0 7b45 	vmov.f64	d7, d5
 10235ec:	2102      	movs	r1, #2
 10235ee:	f7ff baec 	b.w	1022bca <_dtoa_r+0x2ba>
 10235f2:	465e      	mov	r6, fp
 10235f4:	46ab      	mov	fp, r5
 10235f6:	e452      	b.n	1022e9e <_dtoa_r+0x58e>
 10235f8:	9b00      	ldr	r3, [sp, #0]
 10235fa:	930b      	str	r3, [sp, #44]	; 0x2c
 10235fc:	e56d      	b.n	10230da <_dtoa_r+0x7ca>
 10235fe:	f43f ac09 	beq.w	1022e14 <_dtoa_r+0x504>
 1023602:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 1023606:	f7ff bbfe 	b.w	1022e06 <_dtoa_r+0x4f6>
 102360a:	2200      	movs	r2, #0
 102360c:	f04f 37ff 	mov.w	r7, #4294967295
 1023610:	9208      	str	r2, [sp, #32]
 1023612:	2201      	movs	r2, #1
 1023614:	970e      	str	r7, [sp, #56]	; 0x38
 1023616:	920a      	str	r2, [sp, #40]	; 0x28
 1023618:	f7ff bb99 	b.w	1022d4e <_dtoa_r+0x43e>

0102361c <__sflush_r>:
 102361c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 1023620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1023624:	460c      	mov	r4, r1
 1023626:	b29a      	uxth	r2, r3
 1023628:	4680      	mov	r8, r0
 102362a:	0711      	lsls	r1, r2, #28
 102362c:	d446      	bmi.n	10236bc <__sflush_r+0xa0>
 102362e:	6862      	ldr	r2, [r4, #4]
 1023630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1023634:	81a3      	strh	r3, [r4, #12]
 1023636:	2a00      	cmp	r2, #0
 1023638:	dd5b      	ble.n	10236f2 <__sflush_r+0xd6>
 102363a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 102363c:	2d00      	cmp	r5, #0
 102363e:	d055      	beq.n	10236ec <__sflush_r+0xd0>
 1023640:	b29b      	uxth	r3, r3
 1023642:	2200      	movs	r2, #0
 1023644:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 1023648:	f8d8 6000 	ldr.w	r6, [r8]
 102364c:	69e1      	ldr	r1, [r4, #28]
 102364e:	f8c8 2000 	str.w	r2, [r8]
 1023652:	bf18      	it	ne
 1023654:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 1023656:	d109      	bne.n	102366c <__sflush_r+0x50>
 1023658:	2301      	movs	r3, #1
 102365a:	463a      	mov	r2, r7
 102365c:	4640      	mov	r0, r8
 102365e:	47a8      	blx	r5
 1023660:	1c43      	adds	r3, r0, #1
 1023662:	4602      	mov	r2, r0
 1023664:	d049      	beq.n	10236fa <__sflush_r+0xde>
 1023666:	89a3      	ldrh	r3, [r4, #12]
 1023668:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 102366a:	69e1      	ldr	r1, [r4, #28]
 102366c:	075f      	lsls	r7, r3, #29
 102366e:	d505      	bpl.n	102367c <__sflush_r+0x60>
 1023670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1023672:	6860      	ldr	r0, [r4, #4]
 1023674:	1a12      	subs	r2, r2, r0
 1023676:	b10b      	cbz	r3, 102367c <__sflush_r+0x60>
 1023678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 102367a:	1ad2      	subs	r2, r2, r3
 102367c:	2300      	movs	r3, #0
 102367e:	4640      	mov	r0, r8
 1023680:	47a8      	blx	r5
 1023682:	1c45      	adds	r5, r0, #1
 1023684:	d04d      	beq.n	1023722 <__sflush_r+0x106>
 1023686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 102368a:	2100      	movs	r1, #0
 102368c:	6922      	ldr	r2, [r4, #16]
 102368e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 1023692:	6061      	str	r1, [r4, #4]
 1023694:	81a3      	strh	r3, [r4, #12]
 1023696:	6022      	str	r2, [r4, #0]
 1023698:	04da      	lsls	r2, r3, #19
 102369a:	d500      	bpl.n	102369e <__sflush_r+0x82>
 102369c:	6520      	str	r0, [r4, #80]	; 0x50
 102369e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 10236a0:	f8c8 6000 	str.w	r6, [r8]
 10236a4:	b311      	cbz	r1, 10236ec <__sflush_r+0xd0>
 10236a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 10236aa:	4299      	cmp	r1, r3
 10236ac:	d002      	beq.n	10236b4 <__sflush_r+0x98>
 10236ae:	4640      	mov	r0, r8
 10236b0:	f000 fa0c 	bl	1023acc <_free_r>
 10236b4:	2000      	movs	r0, #0
 10236b6:	6320      	str	r0, [r4, #48]	; 0x30
 10236b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10236bc:	6926      	ldr	r6, [r4, #16]
 10236be:	b1ae      	cbz	r6, 10236ec <__sflush_r+0xd0>
 10236c0:	0791      	lsls	r1, r2, #30
 10236c2:	6825      	ldr	r5, [r4, #0]
 10236c4:	6026      	str	r6, [r4, #0]
 10236c6:	bf0c      	ite	eq
 10236c8:	6963      	ldreq	r3, [r4, #20]
 10236ca:	2300      	movne	r3, #0
 10236cc:	1bad      	subs	r5, r5, r6
 10236ce:	60a3      	str	r3, [r4, #8]
 10236d0:	e00a      	b.n	10236e8 <__sflush_r+0xcc>
 10236d2:	462b      	mov	r3, r5
 10236d4:	4632      	mov	r2, r6
 10236d6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 10236d8:	4640      	mov	r0, r8
 10236da:	69e1      	ldr	r1, [r4, #28]
 10236dc:	47b8      	blx	r7
 10236de:	2800      	cmp	r0, #0
 10236e0:	eba5 0500 	sub.w	r5, r5, r0
 10236e4:	4406      	add	r6, r0
 10236e6:	dd14      	ble.n	1023712 <__sflush_r+0xf6>
 10236e8:	2d00      	cmp	r5, #0
 10236ea:	dcf2      	bgt.n	10236d2 <__sflush_r+0xb6>
 10236ec:	2000      	movs	r0, #0
 10236ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10236f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 10236f4:	2a00      	cmp	r2, #0
 10236f6:	dca0      	bgt.n	102363a <__sflush_r+0x1e>
 10236f8:	e7f8      	b.n	10236ec <__sflush_r+0xd0>
 10236fa:	f8d8 3000 	ldr.w	r3, [r8]
 10236fe:	2b00      	cmp	r3, #0
 1023700:	d0b1      	beq.n	1023666 <__sflush_r+0x4a>
 1023702:	2b16      	cmp	r3, #22
 1023704:	bf18      	it	ne
 1023706:	2b1d      	cmpne	r3, #29
 1023708:	bf04      	itt	eq
 102370a:	f8c8 6000 	streq.w	r6, [r8]
 102370e:	4638      	moveq	r0, r7
 1023710:	d0ed      	beq.n	10236ee <__sflush_r+0xd2>
 1023712:	89a3      	ldrh	r3, [r4, #12]
 1023714:	f04f 30ff 	mov.w	r0, #4294967295
 1023718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 102371c:	81a3      	strh	r3, [r4, #12]
 102371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1023722:	f8d8 5000 	ldr.w	r5, [r8]
 1023726:	2d1d      	cmp	r5, #29
 1023728:	bf88      	it	hi
 102372a:	f9b4 200c 	ldrshhi.w	r2, [r4, #12]
 102372e:	d905      	bls.n	102373c <__sflush_r+0x120>
 1023730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1023734:	f04f 30ff 	mov.w	r0, #4294967295
 1023738:	81a2      	strh	r2, [r4, #12]
 102373a:	e7d8      	b.n	10236ee <__sflush_r+0xd2>
 102373c:	2301      	movs	r3, #1
 102373e:	f2c2 0340 	movt	r3, #8256	; 0x2040
 1023742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1023746:	40eb      	lsrs	r3, r5
 1023748:	43db      	mvns	r3, r3
 102374a:	f013 0301 	ands.w	r3, r3, #1
 102374e:	d1ef      	bne.n	1023730 <__sflush_r+0x114>
 1023750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 1023754:	6921      	ldr	r1, [r4, #16]
 1023756:	6063      	str	r3, [r4, #4]
 1023758:	04d3      	lsls	r3, r2, #19
 102375a:	81a2      	strh	r2, [r4, #12]
 102375c:	6021      	str	r1, [r4, #0]
 102375e:	d59e      	bpl.n	102369e <__sflush_r+0x82>
 1023760:	2d00      	cmp	r5, #0
 1023762:	d19c      	bne.n	102369e <__sflush_r+0x82>
 1023764:	e79a      	b.n	102369c <__sflush_r+0x80>
 1023766:	bf00      	nop

01023768 <_fflush_r>:
 1023768:	b510      	push	{r4, lr}
 102376a:	4604      	mov	r4, r0
 102376c:	b082      	sub	sp, #8
 102376e:	b108      	cbz	r0, 1023774 <_fflush_r+0xc>
 1023770:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1023772:	b123      	cbz	r3, 102377e <_fflush_r+0x16>
 1023774:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 1023778:	b948      	cbnz	r0, 102378e <_fflush_r+0x26>
 102377a:	b002      	add	sp, #8
 102377c:	bd10      	pop	{r4, pc}
 102377e:	9101      	str	r1, [sp, #4]
 1023780:	f000 f904 	bl	102398c <__sinit>
 1023784:	9901      	ldr	r1, [sp, #4]
 1023786:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 102378a:	2800      	cmp	r0, #0
 102378c:	d0f5      	beq.n	102377a <_fflush_r+0x12>
 102378e:	4620      	mov	r0, r4
 1023790:	b002      	add	sp, #8
 1023792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1023796:	f7ff bf41 	b.w	102361c <__sflush_r>
 102379a:	bf00      	nop

0102379c <fflush>:
 102379c:	b138      	cbz	r0, 10237ae <fflush+0x12>
 102379e:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10237a2:	f2c0 1306 	movt	r3, #262	; 0x106
 10237a6:	4601      	mov	r1, r0
 10237a8:	6818      	ldr	r0, [r3, #0]
 10237aa:	f7ff bfdd 	b.w	1023768 <_fflush_r>
 10237ae:	f647 4324 	movw	r3, #31780	; 0x7c24
 10237b2:	f2c0 1306 	movt	r3, #262	; 0x106
 10237b6:	f243 7169 	movw	r1, #14185	; 0x3769
 10237ba:	f2c0 1102 	movt	r1, #258	; 0x102
 10237be:	6818      	ldr	r0, [r3, #0]
 10237c0:	f000 bc36 	b.w	1024030 <_fwalk_reent>

010237c4 <__fp_lock>:
 10237c4:	2000      	movs	r0, #0
 10237c6:	4770      	bx	lr

010237c8 <_cleanup_r>:
 10237c8:	f247 314d 	movw	r1, #29517	; 0x734d
 10237cc:	f2c0 1102 	movt	r1, #258	; 0x102
 10237d0:	f000 bc2e 	b.w	1024030 <_fwalk_reent>

010237d4 <__sinit.part.0>:
 10237d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10237d8:	2400      	movs	r4, #0
 10237da:	6845      	ldr	r5, [r0, #4]
 10237dc:	4607      	mov	r7, r0
 10237de:	2203      	movs	r2, #3
 10237e0:	4621      	mov	r1, r4
 10237e2:	f8c0 22e4 	str.w	r2, [r0, #740]	; 0x2e4
 10237e6:	f243 73c9 	movw	r3, #14281	; 0x37c9
 10237ea:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 10237ee:	f2c0 1302 	movt	r3, #258	; 0x102
 10237f2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 10237f6:	2208      	movs	r2, #8
 10237f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 10237fa:	2304      	movs	r3, #4
 10237fc:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 1023800:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 1023804:	60eb      	str	r3, [r5, #12]
 1023806:	f245 1be9 	movw	fp, #20969	; 0x51e9
 102380a:	666c      	str	r4, [r5, #100]	; 0x64
 102380c:	f2c0 1b02 	movt	fp, #258	; 0x102
 1023810:	602c      	str	r4, [r5, #0]
 1023812:	f245 2a11 	movw	sl, #21009	; 0x5211
 1023816:	606c      	str	r4, [r5, #4]
 1023818:	f2c0 1a02 	movt	sl, #258	; 0x102
 102381c:	60ac      	str	r4, [r5, #8]
 102381e:	f245 2951 	movw	r9, #21073	; 0x5251
 1023822:	612c      	str	r4, [r5, #16]
 1023824:	f2c0 1902 	movt	r9, #258	; 0x102
 1023828:	616c      	str	r4, [r5, #20]
 102382a:	f245 2871 	movw	r8, #21105	; 0x5271
 102382e:	61ac      	str	r4, [r5, #24]
 1023830:	f2c0 1802 	movt	r8, #258	; 0x102
 1023834:	f7fa f83c 	bl	101d8b0 <memset>
 1023838:	68be      	ldr	r6, [r7, #8]
 102383a:	4621      	mov	r1, r4
 102383c:	61ed      	str	r5, [r5, #28]
 102383e:	f8c5 b020 	str.w	fp, [r5, #32]
 1023842:	2208      	movs	r2, #8
 1023844:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 1023848:	2309      	movs	r3, #9
 102384a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 102384e:	f2c0 0301 	movt	r3, #1
 1023852:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 1023856:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 102385a:	60f3      	str	r3, [r6, #12]
 102385c:	6674      	str	r4, [r6, #100]	; 0x64
 102385e:	e9c6 4400 	strd	r4, r4, [r6]
 1023862:	60b4      	str	r4, [r6, #8]
 1023864:	e9c6 4404 	strd	r4, r4, [r6, #16]
 1023868:	61b4      	str	r4, [r6, #24]
 102386a:	f7fa f821 	bl	101d8b0 <memset>
 102386e:	68fd      	ldr	r5, [r7, #12]
 1023870:	4621      	mov	r1, r4
 1023872:	61f6      	str	r6, [r6, #28]
 1023874:	f8c6 b020 	str.w	fp, [r6, #32]
 1023878:	2312      	movs	r3, #18
 102387a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 102387e:	f2c0 0302 	movt	r3, #2
 1023882:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 1023886:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 102388a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 102388e:	2208      	movs	r2, #8
 1023890:	60eb      	str	r3, [r5, #12]
 1023892:	666c      	str	r4, [r5, #100]	; 0x64
 1023894:	e9c5 4400 	strd	r4, r4, [r5]
 1023898:	60ac      	str	r4, [r5, #8]
 102389a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 102389e:	61ac      	str	r4, [r5, #24]
 10238a0:	f7fa f806 	bl	101d8b0 <memset>
 10238a4:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 10238a8:	2301      	movs	r3, #1
 10238aa:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 10238ae:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 10238b2:	63bb      	str	r3, [r7, #56]	; 0x38
 10238b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

010238b8 <__fp_unlock>:
 10238b8:	2000      	movs	r0, #0
 10238ba:	4770      	bx	lr

010238bc <__sfmoreglue>:
 10238bc:	1e4a      	subs	r2, r1, #1
 10238be:	b570      	push	{r4, r5, r6, lr}
 10238c0:	2568      	movs	r5, #104	; 0x68
 10238c2:	fb05 f502 	mul.w	r5, r5, r2
 10238c6:	460e      	mov	r6, r1
 10238c8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 10238cc:	f7f8 ff84 	bl	101c7d8 <_malloc_r>
 10238d0:	4604      	mov	r4, r0
 10238d2:	b140      	cbz	r0, 10238e6 <__sfmoreglue+0x2a>
 10238d4:	300c      	adds	r0, #12
 10238d6:	2100      	movs	r1, #0
 10238d8:	6066      	str	r6, [r4, #4]
 10238da:	f105 0268 	add.w	r2, r5, #104	; 0x68
 10238de:	60a0      	str	r0, [r4, #8]
 10238e0:	6021      	str	r1, [r4, #0]
 10238e2:	f7f9 ffe5 	bl	101d8b0 <memset>
 10238e6:	4620      	mov	r0, r4
 10238e8:	bd70      	pop	{r4, r5, r6, pc}
 10238ea:	bf00      	nop

010238ec <__sfp>:
 10238ec:	f647 4324 	movw	r3, #31780	; 0x7c24
 10238f0:	f2c0 1306 	movt	r3, #262	; 0x106
 10238f4:	b570      	push	{r4, r5, r6, lr}
 10238f6:	4606      	mov	r6, r0
 10238f8:	681d      	ldr	r5, [r3, #0]
 10238fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 10238fc:	b353      	cbz	r3, 1023954 <__sfp+0x68>
 10238fe:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 1023902:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 1023906:	3b01      	subs	r3, #1
 1023908:	d504      	bpl.n	1023914 <__sfp+0x28>
 102390a:	e01f      	b.n	102394c <__sfp+0x60>
 102390c:	3b01      	subs	r3, #1
 102390e:	3468      	adds	r4, #104	; 0x68
 1023910:	1c5a      	adds	r2, r3, #1
 1023912:	d01b      	beq.n	102394c <__sfp+0x60>
 1023914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1023918:	2a00      	cmp	r2, #0
 102391a:	d1f7      	bne.n	102390c <__sfp+0x20>
 102391c:	2500      	movs	r5, #0
 102391e:	2301      	movs	r3, #1
 1023920:	6665      	str	r5, [r4, #100]	; 0x64
 1023922:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 1023926:	6025      	str	r5, [r4, #0]
 1023928:	4629      	mov	r1, r5
 102392a:	60e3      	str	r3, [r4, #12]
 102392c:	2208      	movs	r2, #8
 102392e:	6065      	str	r5, [r4, #4]
 1023930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 1023934:	60a5      	str	r5, [r4, #8]
 1023936:	e9c4 5504 	strd	r5, r5, [r4, #16]
 102393a:	61a5      	str	r5, [r4, #24]
 102393c:	f7f9 ffb8 	bl	101d8b0 <memset>
 1023940:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 1023944:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 1023948:	4620      	mov	r0, r4
 102394a:	bd70      	pop	{r4, r5, r6, pc}
 102394c:	6828      	ldr	r0, [r5, #0]
 102394e:	b128      	cbz	r0, 102395c <__sfp+0x70>
 1023950:	4605      	mov	r5, r0
 1023952:	e7d6      	b.n	1023902 <__sfp+0x16>
 1023954:	4628      	mov	r0, r5
 1023956:	f7ff ff3d 	bl	10237d4 <__sinit.part.0>
 102395a:	e7d0      	b.n	10238fe <__sfp+0x12>
 102395c:	2104      	movs	r1, #4
 102395e:	4630      	mov	r0, r6
 1023960:	f7ff ffac 	bl	10238bc <__sfmoreglue>
 1023964:	6028      	str	r0, [r5, #0]
 1023966:	2800      	cmp	r0, #0
 1023968:	d1f2      	bne.n	1023950 <__sfp+0x64>
 102396a:	230c      	movs	r3, #12
 102396c:	4604      	mov	r4, r0
 102396e:	6033      	str	r3, [r6, #0]
 1023970:	e7ea      	b.n	1023948 <__sfp+0x5c>
 1023972:	bf00      	nop

01023974 <_cleanup>:
 1023974:	f647 4324 	movw	r3, #31780	; 0x7c24
 1023978:	f2c0 1306 	movt	r3, #262	; 0x106
 102397c:	f247 314d 	movw	r1, #29517	; 0x734d
 1023980:	f2c0 1102 	movt	r1, #258	; 0x102
 1023984:	6818      	ldr	r0, [r3, #0]
 1023986:	f000 bb53 	b.w	1024030 <_fwalk_reent>
 102398a:	bf00      	nop

0102398c <__sinit>:
 102398c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 102398e:	b103      	cbz	r3, 1023992 <__sinit+0x6>
 1023990:	4770      	bx	lr
 1023992:	e71f      	b.n	10237d4 <__sinit.part.0>

01023994 <__sfp_lock_acquire>:
 1023994:	4770      	bx	lr
 1023996:	bf00      	nop

01023998 <__sfp_lock_release>:
 1023998:	4770      	bx	lr
 102399a:	bf00      	nop

0102399c <__sinit_lock_acquire>:
 102399c:	4770      	bx	lr
 102399e:	bf00      	nop

010239a0 <__sinit_lock_release>:
 10239a0:	4770      	bx	lr
 10239a2:	bf00      	nop

010239a4 <__fp_lock_all>:
 10239a4:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10239a8:	f2c0 1306 	movt	r3, #262	; 0x106
 10239ac:	f243 71c5 	movw	r1, #14277	; 0x37c5
 10239b0:	f2c0 1102 	movt	r1, #258	; 0x102
 10239b4:	6818      	ldr	r0, [r3, #0]
 10239b6:	f000 bb17 	b.w	1023fe8 <_fwalk>
 10239ba:	bf00      	nop

010239bc <__fp_unlock_all>:
 10239bc:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10239c0:	f2c0 1306 	movt	r3, #262	; 0x106
 10239c4:	f643 01b9 	movw	r1, #14521	; 0x38b9
 10239c8:	f2c0 1102 	movt	r1, #258	; 0x102
 10239cc:	6818      	ldr	r0, [r3, #0]
 10239ce:	f000 bb0b 	b.w	1023fe8 <_fwalk>
 10239d2:	bf00      	nop

010239d4 <_fiprintf_r>:
 10239d4:	b40c      	push	{r2, r3}
 10239d6:	b510      	push	{r4, lr}
 10239d8:	b082      	sub	sp, #8
 10239da:	ac04      	add	r4, sp, #16
 10239dc:	f854 2b04 	ldr.w	r2, [r4], #4
 10239e0:	4623      	mov	r3, r4
 10239e2:	9401      	str	r4, [sp, #4]
 10239e4:	f002 fbd4 	bl	1026190 <_vfiprintf_r>
 10239e8:	b002      	add	sp, #8
 10239ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 10239ee:	b002      	add	sp, #8
 10239f0:	4770      	bx	lr
 10239f2:	bf00      	nop

010239f4 <fiprintf>:
 10239f4:	b40e      	push	{r1, r2, r3}
 10239f6:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10239fa:	b510      	push	{r4, lr}
 10239fc:	b083      	sub	sp, #12
 10239fe:	ac05      	add	r4, sp, #20
 1023a00:	f2c0 1306 	movt	r3, #262	; 0x106
 1023a04:	4601      	mov	r1, r0
 1023a06:	f854 2b04 	ldr.w	r2, [r4], #4
 1023a0a:	6818      	ldr	r0, [r3, #0]
 1023a0c:	4623      	mov	r3, r4
 1023a0e:	9401      	str	r4, [sp, #4]
 1023a10:	f002 fbbe 	bl	1026190 <_vfiprintf_r>
 1023a14:	b003      	add	sp, #12
 1023a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1023a1a:	b003      	add	sp, #12
 1023a1c:	4770      	bx	lr
 1023a1e:	bf00      	nop

01023a20 <_malloc_trim_r>:
 1023a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1023a22:	f64c 4774 	movw	r7, #52340	; 0xcc74
 1023a26:	f2c0 1706 	movt	r7, #262	; 0x106
 1023a2a:	460c      	mov	r4, r1
 1023a2c:	4606      	mov	r6, r0
 1023a2e:	f7f9 ff8f 	bl	101d950 <__malloc_lock>
 1023a32:	68bb      	ldr	r3, [r7, #8]
 1023a34:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 1023a38:	310f      	adds	r1, #15
 1023a3a:	685d      	ldr	r5, [r3, #4]
 1023a3c:	f025 0503 	bic.w	r5, r5, #3
 1023a40:	4429      	add	r1, r5
 1023a42:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 1023a46:	f021 010f 	bic.w	r1, r1, #15
 1023a4a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 1023a4e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 1023a52:	db07      	blt.n	1023a64 <_malloc_trim_r+0x44>
 1023a54:	2100      	movs	r1, #0
 1023a56:	4630      	mov	r0, r6
 1023a58:	f7fa fafc 	bl	101e054 <_sbrk_r>
 1023a5c:	68bb      	ldr	r3, [r7, #8]
 1023a5e:	442b      	add	r3, r5
 1023a60:	4298      	cmp	r0, r3
 1023a62:	d004      	beq.n	1023a6e <_malloc_trim_r+0x4e>
 1023a64:	4630      	mov	r0, r6
 1023a66:	f7f9 ff75 	bl	101d954 <__malloc_unlock>
 1023a6a:	2000      	movs	r0, #0
 1023a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1023a6e:	4261      	negs	r1, r4
 1023a70:	4630      	mov	r0, r6
 1023a72:	f7fa faef 	bl	101e054 <_sbrk_r>
 1023a76:	3001      	adds	r0, #1
 1023a78:	d010      	beq.n	1023a9c <_malloc_trim_r+0x7c>
 1023a7a:	68ba      	ldr	r2, [r7, #8]
 1023a7c:	f244 3300 	movw	r3, #17152	; 0x4300
 1023a80:	f2c0 1307 	movt	r3, #263	; 0x107
 1023a84:	1b2d      	subs	r5, r5, r4
 1023a86:	4630      	mov	r0, r6
 1023a88:	f045 0501 	orr.w	r5, r5, #1
 1023a8c:	6819      	ldr	r1, [r3, #0]
 1023a8e:	6055      	str	r5, [r2, #4]
 1023a90:	1b09      	subs	r1, r1, r4
 1023a92:	6019      	str	r1, [r3, #0]
 1023a94:	f7f9 ff5e 	bl	101d954 <__malloc_unlock>
 1023a98:	2001      	movs	r0, #1
 1023a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1023a9c:	2100      	movs	r1, #0
 1023a9e:	4630      	mov	r0, r6
 1023aa0:	f7fa fad8 	bl	101e054 <_sbrk_r>
 1023aa4:	68ba      	ldr	r2, [r7, #8]
 1023aa6:	1a83      	subs	r3, r0, r2
 1023aa8:	2b0f      	cmp	r3, #15
 1023aaa:	dddb      	ble.n	1023a64 <_malloc_trim_r+0x44>
 1023aac:	f24d 047c 	movw	r4, #53372	; 0xd07c
 1023ab0:	f2c0 1406 	movt	r4, #262	; 0x106
 1023ab4:	f244 3100 	movw	r1, #17152	; 0x4300
 1023ab8:	f2c0 1107 	movt	r1, #263	; 0x107
 1023abc:	6824      	ldr	r4, [r4, #0]
 1023abe:	f043 0301 	orr.w	r3, r3, #1
 1023ac2:	6053      	str	r3, [r2, #4]
 1023ac4:	1b00      	subs	r0, r0, r4
 1023ac6:	6008      	str	r0, [r1, #0]
 1023ac8:	e7cc      	b.n	1023a64 <_malloc_trim_r+0x44>
 1023aca:	bf00      	nop

01023acc <_free_r>:
 1023acc:	2900      	cmp	r1, #0
 1023ace:	d060      	beq.n	1023b92 <_free_r+0xc6>
 1023ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1023ad2:	460f      	mov	r7, r1
 1023ad4:	4606      	mov	r6, r0
 1023ad6:	f7f9 ff3b 	bl	101d950 <__malloc_lock>
 1023ada:	f857 cc04 	ldr.w	ip, [r7, #-4]
 1023ade:	f64c 4274 	movw	r2, #52340	; 0xcc74
 1023ae2:	f2c0 1206 	movt	r2, #262	; 0x106
 1023ae6:	f1a7 0008 	sub.w	r0, r7, #8
 1023aea:	f02c 0301 	bic.w	r3, ip, #1
 1023aee:	18c4      	adds	r4, r0, r3
 1023af0:	6891      	ldr	r1, [r2, #8]
 1023af2:	6865      	ldr	r5, [r4, #4]
 1023af4:	42a1      	cmp	r1, r4
 1023af6:	f025 0503 	bic.w	r5, r5, #3
 1023afa:	d07f      	beq.n	1023bfc <_free_r+0x130>
 1023afc:	f01c 0f01 	tst.w	ip, #1
 1023b00:	6065      	str	r5, [r4, #4]
 1023b02:	eb04 0105 	add.w	r1, r4, r5
 1023b06:	d133      	bne.n	1023b70 <_free_r+0xa4>
 1023b08:	f857 7c08 	ldr.w	r7, [r7, #-8]
 1023b0c:	f102 0c08 	add.w	ip, r2, #8
 1023b10:	6849      	ldr	r1, [r1, #4]
 1023b12:	1bc0      	subs	r0, r0, r7
 1023b14:	443b      	add	r3, r7
 1023b16:	f001 0101 	and.w	r1, r1, #1
 1023b1a:	6887      	ldr	r7, [r0, #8]
 1023b1c:	4567      	cmp	r7, ip
 1023b1e:	d061      	beq.n	1023be4 <_free_r+0x118>
 1023b20:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 1023b24:	f8c7 e00c 	str.w	lr, [r7, #12]
 1023b28:	f8ce 7008 	str.w	r7, [lr, #8]
 1023b2c:	2900      	cmp	r1, #0
 1023b2e:	f000 8090 	beq.w	1023c52 <_free_r+0x186>
 1023b32:	f043 0101 	orr.w	r1, r3, #1
 1023b36:	6041      	str	r1, [r0, #4]
 1023b38:	6023      	str	r3, [r4, #0]
 1023b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1023b3e:	d231      	bcs.n	1023ba4 <_free_r+0xd8>
 1023b40:	08db      	lsrs	r3, r3, #3
 1023b42:	2101      	movs	r1, #1
 1023b44:	185d      	adds	r5, r3, r1
 1023b46:	6854      	ldr	r4, [r2, #4]
 1023b48:	109b      	asrs	r3, r3, #2
 1023b4a:	f852 7035 	ldr.w	r7, [r2, r5, lsl #3]
 1023b4e:	fa01 f303 	lsl.w	r3, r1, r3
 1023b52:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 1023b56:	4323      	orrs	r3, r4
 1023b58:	3908      	subs	r1, #8
 1023b5a:	6053      	str	r3, [r2, #4]
 1023b5c:	e9c0 7102 	strd	r7, r1, [r0, #8]
 1023b60:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
 1023b64:	60f8      	str	r0, [r7, #12]
 1023b66:	4630      	mov	r0, r6
 1023b68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1023b6c:	f7f9 bef2 	b.w	101d954 <__malloc_unlock>
 1023b70:	6849      	ldr	r1, [r1, #4]
 1023b72:	07c9      	lsls	r1, r1, #31
 1023b74:	d40e      	bmi.n	1023b94 <_free_r+0xc8>
 1023b76:	442b      	add	r3, r5
 1023b78:	f102 0c08 	add.w	ip, r2, #8
 1023b7c:	68a1      	ldr	r1, [r4, #8]
 1023b7e:	f043 0501 	orr.w	r5, r3, #1
 1023b82:	4561      	cmp	r1, ip
 1023b84:	d06d      	beq.n	1023c62 <_free_r+0x196>
 1023b86:	68e4      	ldr	r4, [r4, #12]
 1023b88:	60cc      	str	r4, [r1, #12]
 1023b8a:	60a1      	str	r1, [r4, #8]
 1023b8c:	6045      	str	r5, [r0, #4]
 1023b8e:	50c3      	str	r3, [r0, r3]
 1023b90:	e7d3      	b.n	1023b3a <_free_r+0x6e>
 1023b92:	4770      	bx	lr
 1023b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1023b98:	f043 0101 	orr.w	r1, r3, #1
 1023b9c:	f847 1c04 	str.w	r1, [r7, #-4]
 1023ba0:	6023      	str	r3, [r4, #0]
 1023ba2:	d3cd      	bcc.n	1023b40 <_free_r+0x74>
 1023ba4:	0a59      	lsrs	r1, r3, #9
 1023ba6:	2904      	cmp	r1, #4
 1023ba8:	d848      	bhi.n	1023c3c <_free_r+0x170>
 1023baa:	0999      	lsrs	r1, r3, #6
 1023bac:	f101 0439 	add.w	r4, r1, #57	; 0x39
 1023bb0:	f101 0538 	add.w	r5, r1, #56	; 0x38
 1023bb4:	00e1      	lsls	r1, r4, #3
 1023bb6:	1854      	adds	r4, r2, r1
 1023bb8:	5851      	ldr	r1, [r2, r1]
 1023bba:	3c08      	subs	r4, #8
 1023bbc:	428c      	cmp	r4, r1
 1023bbe:	d057      	beq.n	1023c70 <_free_r+0x1a4>
 1023bc0:	684a      	ldr	r2, [r1, #4]
 1023bc2:	f022 0203 	bic.w	r2, r2, #3
 1023bc6:	429a      	cmp	r2, r3
 1023bc8:	d902      	bls.n	1023bd0 <_free_r+0x104>
 1023bca:	6889      	ldr	r1, [r1, #8]
 1023bcc:	428c      	cmp	r4, r1
 1023bce:	d1f7      	bne.n	1023bc0 <_free_r+0xf4>
 1023bd0:	68cc      	ldr	r4, [r1, #12]
 1023bd2:	e9c0 1402 	strd	r1, r4, [r0, #8]
 1023bd6:	60a0      	str	r0, [r4, #8]
 1023bd8:	60c8      	str	r0, [r1, #12]
 1023bda:	4630      	mov	r0, r6
 1023bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1023be0:	f7f9 beb8 	b.w	101d954 <__malloc_unlock>
 1023be4:	2900      	cmp	r1, #0
 1023be6:	d164      	bne.n	1023cb2 <_free_r+0x1e6>
 1023be8:	68a1      	ldr	r1, [r4, #8]
 1023bea:	442b      	add	r3, r5
 1023bec:	68e2      	ldr	r2, [r4, #12]
 1023bee:	f043 0401 	orr.w	r4, r3, #1
 1023bf2:	60ca      	str	r2, [r1, #12]
 1023bf4:	6091      	str	r1, [r2, #8]
 1023bf6:	6044      	str	r4, [r0, #4]
 1023bf8:	50c3      	str	r3, [r0, r3]
 1023bfa:	e7b4      	b.n	1023b66 <_free_r+0x9a>
 1023bfc:	f01c 0f01 	tst.w	ip, #1
 1023c00:	442b      	add	r3, r5
 1023c02:	d107      	bne.n	1023c14 <_free_r+0x148>
 1023c04:	f857 1c08 	ldr.w	r1, [r7, #-8]
 1023c08:	1a40      	subs	r0, r0, r1
 1023c0a:	440b      	add	r3, r1
 1023c0c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 1023c10:	60e1      	str	r1, [r4, #12]
 1023c12:	608c      	str	r4, [r1, #8]
 1023c14:	f24d 0180 	movw	r1, #53376	; 0xd080
 1023c18:	f2c0 1106 	movt	r1, #262	; 0x106
 1023c1c:	f043 0401 	orr.w	r4, r3, #1
 1023c20:	6044      	str	r4, [r0, #4]
 1023c22:	6809      	ldr	r1, [r1, #0]
 1023c24:	6090      	str	r0, [r2, #8]
 1023c26:	4299      	cmp	r1, r3
 1023c28:	d89d      	bhi.n	1023b66 <_free_r+0x9a>
 1023c2a:	f244 23fc 	movw	r3, #17148	; 0x42fc
 1023c2e:	f2c0 1307 	movt	r3, #263	; 0x107
 1023c32:	4630      	mov	r0, r6
 1023c34:	6819      	ldr	r1, [r3, #0]
 1023c36:	f7ff fef3 	bl	1023a20 <_malloc_trim_r>
 1023c3a:	e794      	b.n	1023b66 <_free_r+0x9a>
 1023c3c:	2914      	cmp	r1, #20
 1023c3e:	d90a      	bls.n	1023c56 <_free_r+0x18a>
 1023c40:	2954      	cmp	r1, #84	; 0x54
 1023c42:	d81d      	bhi.n	1023c80 <_free_r+0x1b4>
 1023c44:	0b19      	lsrs	r1, r3, #12
 1023c46:	f101 046f 	add.w	r4, r1, #111	; 0x6f
 1023c4a:	f101 056e 	add.w	r5, r1, #110	; 0x6e
 1023c4e:	00e1      	lsls	r1, r4, #3
 1023c50:	e7b1      	b.n	1023bb6 <_free_r+0xea>
 1023c52:	442b      	add	r3, r5
 1023c54:	e792      	b.n	1023b7c <_free_r+0xb0>
 1023c56:	f101 045c 	add.w	r4, r1, #92	; 0x5c
 1023c5a:	f101 055b 	add.w	r5, r1, #91	; 0x5b
 1023c5e:	00e1      	lsls	r1, r4, #3
 1023c60:	e7a9      	b.n	1023bb6 <_free_r+0xea>
 1023c62:	e9c2 0004 	strd	r0, r0, [r2, #16]
 1023c66:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 1023c6a:	6045      	str	r5, [r0, #4]
 1023c6c:	50c3      	str	r3, [r0, r3]
 1023c6e:	e77a      	b.n	1023b66 <_free_r+0x9a>
 1023c70:	6853      	ldr	r3, [r2, #4]
 1023c72:	10ad      	asrs	r5, r5, #2
 1023c74:	2701      	movs	r7, #1
 1023c76:	fa07 f505 	lsl.w	r5, r7, r5
 1023c7a:	431d      	orrs	r5, r3
 1023c7c:	6055      	str	r5, [r2, #4]
 1023c7e:	e7a8      	b.n	1023bd2 <_free_r+0x106>
 1023c80:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 1023c84:	d806      	bhi.n	1023c94 <_free_r+0x1c8>
 1023c86:	0bd9      	lsrs	r1, r3, #15
 1023c88:	f101 0478 	add.w	r4, r1, #120	; 0x78
 1023c8c:	f101 0577 	add.w	r5, r1, #119	; 0x77
 1023c90:	00e1      	lsls	r1, r4, #3
 1023c92:	e790      	b.n	1023bb6 <_free_r+0xea>
 1023c94:	f240 5454 	movw	r4, #1364	; 0x554
 1023c98:	42a1      	cmp	r1, r4
 1023c9a:	bf9d      	ittte	ls
 1023c9c:	0c99      	lsrls	r1, r3, #18
 1023c9e:	f101 047d 	addls.w	r4, r1, #125	; 0x7d
 1023ca2:	f101 057c 	addls.w	r5, r1, #124	; 0x7c
 1023ca6:	f44f 717e 	movhi.w	r1, #1016	; 0x3f8
 1023caa:	bf8c      	ite	hi
 1023cac:	257e      	movhi	r5, #126	; 0x7e
 1023cae:	00e1      	lslls	r1, r4, #3
 1023cb0:	e781      	b.n	1023bb6 <_free_r+0xea>
 1023cb2:	f043 0201 	orr.w	r2, r3, #1
 1023cb6:	6042      	str	r2, [r0, #4]
 1023cb8:	6023      	str	r3, [r4, #0]
 1023cba:	e754      	b.n	1023b66 <_free_r+0x9a>

01023cbc <__sfvwrite_r>:
 1023cbc:	6893      	ldr	r3, [r2, #8]
 1023cbe:	2b00      	cmp	r3, #0
 1023cc0:	f000 8114 	beq.w	1023eec <__sfvwrite_r+0x230>
 1023cc4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 1023cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1023ccc:	f01c 0f08 	tst.w	ip, #8
 1023cd0:	b083      	sub	sp, #12
 1023cd2:	460c      	mov	r4, r1
 1023cd4:	4681      	mov	r9, r0
 1023cd6:	4690      	mov	r8, r2
 1023cd8:	d038      	beq.n	1023d4c <__sfvwrite_r+0x90>
 1023cda:	690b      	ldr	r3, [r1, #16]
 1023cdc:	b3b3      	cbz	r3, 1023d4c <__sfvwrite_r+0x90>
 1023cde:	f01c 0302 	ands.w	r3, ip, #2
 1023ce2:	f8d8 6000 	ldr.w	r6, [r8]
 1023ce6:	d03f      	beq.n	1023d68 <__sfvwrite_r+0xac>
 1023ce8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1023cec:	2700      	movs	r7, #0
 1023cee:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1023cf2:	f44f 4a7c 	mov.w	sl, #64512	; 0xfc00
 1023cf6:	f6c7 7aff 	movt	sl, #32767	; 0x7fff
 1023cfa:	463d      	mov	r5, r7
 1023cfc:	4555      	cmp	r5, sl
 1023cfe:	462b      	mov	r3, r5
 1023d00:	463a      	mov	r2, r7
 1023d02:	4661      	mov	r1, ip
 1023d04:	bf28      	it	cs
 1023d06:	4653      	movcs	r3, sl
 1023d08:	4648      	mov	r0, r9
 1023d0a:	b1dd      	cbz	r5, 1023d44 <__sfvwrite_r+0x88>
 1023d0c:	47d8      	blx	fp
 1023d0e:	2800      	cmp	r0, #0
 1023d10:	4407      	add	r7, r0
 1023d12:	eba5 0500 	sub.w	r5, r5, r0
 1023d16:	f340 80df 	ble.w	1023ed8 <__sfvwrite_r+0x21c>
 1023d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 1023d1e:	1a18      	subs	r0, r3, r0
 1023d20:	f8c8 0008 	str.w	r0, [r8, #8]
 1023d24:	2800      	cmp	r0, #0
 1023d26:	f000 80c6 	beq.w	1023eb6 <__sfvwrite_r+0x1fa>
 1023d2a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1023d2e:	4555      	cmp	r5, sl
 1023d30:	462b      	mov	r3, r5
 1023d32:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1023d36:	bf28      	it	cs
 1023d38:	4653      	movcs	r3, sl
 1023d3a:	463a      	mov	r2, r7
 1023d3c:	4661      	mov	r1, ip
 1023d3e:	4648      	mov	r0, r9
 1023d40:	2d00      	cmp	r5, #0
 1023d42:	d1e3      	bne.n	1023d0c <__sfvwrite_r+0x50>
 1023d44:	e9d6 7500 	ldrd	r7, r5, [r6]
 1023d48:	3608      	adds	r6, #8
 1023d4a:	e7d7      	b.n	1023cfc <__sfvwrite_r+0x40>
 1023d4c:	4621      	mov	r1, r4
 1023d4e:	4648      	mov	r0, r9
 1023d50:	f7fe fc5e 	bl	1022610 <__swsetup_r>
 1023d54:	2800      	cmp	r0, #0
 1023d56:	f040 8144 	bne.w	1023fe2 <__sfvwrite_r+0x326>
 1023d5a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1023d5e:	f8d8 6000 	ldr.w	r6, [r8]
 1023d62:	f01c 0302 	ands.w	r3, ip, #2
 1023d66:	d1bf      	bne.n	1023ce8 <__sfvwrite_r+0x2c>
 1023d68:	f01c 0a01 	ands.w	sl, ip, #1
 1023d6c:	f040 80c0 	bne.w	1023ef0 <__sfvwrite_r+0x234>
 1023d70:	68a7      	ldr	r7, [r4, #8]
 1023d72:	4655      	mov	r5, sl
 1023d74:	6820      	ldr	r0, [r4, #0]
 1023d76:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 1023d7a:	f6c7 73ff 	movt	r3, #32767	; 0x7fff
 1023d7e:	9301      	str	r3, [sp, #4]
 1023d80:	2d00      	cmp	r5, #0
 1023d82:	d057      	beq.n	1023e34 <__sfvwrite_r+0x178>
 1023d84:	f41c 7f00 	tst.w	ip, #512	; 0x200
 1023d88:	f000 80c6 	beq.w	1023f18 <__sfvwrite_r+0x25c>
 1023d8c:	42af      	cmp	r7, r5
 1023d8e:	463b      	mov	r3, r7
 1023d90:	f200 80f6 	bhi.w	1023f80 <__sfvwrite_r+0x2c4>
 1023d94:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 1023d98:	d02f      	beq.n	1023dfa <__sfvwrite_r+0x13e>
 1023d9a:	6962      	ldr	r2, [r4, #20]
 1023d9c:	f105 0b01 	add.w	fp, r5, #1
 1023da0:	6921      	ldr	r1, [r4, #16]
 1023da2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1023da6:	1a47      	subs	r7, r0, r1
 1023da8:	44bb      	add	fp, r7
 1023daa:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 1023dae:	1052      	asrs	r2, r2, #1
 1023db0:	4593      	cmp	fp, r2
 1023db2:	bf94      	ite	ls
 1023db4:	4693      	movls	fp, r2
 1023db6:	465a      	movhi	r2, fp
 1023db8:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 1023dbc:	f000 80f8 	beq.w	1023fb0 <__sfvwrite_r+0x2f4>
 1023dc0:	4611      	mov	r1, r2
 1023dc2:	4648      	mov	r0, r9
 1023dc4:	f7f8 fd08 	bl	101c7d8 <_malloc_r>
 1023dc8:	2800      	cmp	r0, #0
 1023dca:	f000 8104 	beq.w	1023fd6 <__sfvwrite_r+0x31a>
 1023dce:	463a      	mov	r2, r7
 1023dd0:	6921      	ldr	r1, [r4, #16]
 1023dd2:	9000      	str	r0, [sp, #0]
 1023dd4:	f7f9 ea14 	blx	101d200 <memcpy>
 1023dd8:	89a2      	ldrh	r2, [r4, #12]
 1023dda:	9b00      	ldr	r3, [sp, #0]
 1023ddc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 1023de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1023de4:	81a2      	strh	r2, [r4, #12]
 1023de6:	19d8      	adds	r0, r3, r7
 1023de8:	6123      	str	r3, [r4, #16]
 1023dea:	ebab 0707 	sub.w	r7, fp, r7
 1023dee:	462b      	mov	r3, r5
 1023df0:	60a7      	str	r7, [r4, #8]
 1023df2:	462f      	mov	r7, r5
 1023df4:	6020      	str	r0, [r4, #0]
 1023df6:	f8c4 b014 	str.w	fp, [r4, #20]
 1023dfa:	461a      	mov	r2, r3
 1023dfc:	4651      	mov	r1, sl
 1023dfe:	9300      	str	r3, [sp, #0]
 1023e00:	f7f9 fcee 	bl	101d7e0 <memmove>
 1023e04:	68a1      	ldr	r1, [r4, #8]
 1023e06:	46ab      	mov	fp, r5
 1023e08:	6822      	ldr	r2, [r4, #0]
 1023e0a:	2500      	movs	r5, #0
 1023e0c:	9b00      	ldr	r3, [sp, #0]
 1023e0e:	1bcf      	subs	r7, r1, r7
 1023e10:	60a7      	str	r7, [r4, #8]
 1023e12:	4413      	add	r3, r2
 1023e14:	6023      	str	r3, [r4, #0]
 1023e16:	f8d8 0008 	ldr.w	r0, [r8, #8]
 1023e1a:	44da      	add	sl, fp
 1023e1c:	eba0 000b 	sub.w	r0, r0, fp
 1023e20:	f8c8 0008 	str.w	r0, [r8, #8]
 1023e24:	2800      	cmp	r0, #0
 1023e26:	d046      	beq.n	1023eb6 <__sfvwrite_r+0x1fa>
 1023e28:	68a7      	ldr	r7, [r4, #8]
 1023e2a:	6820      	ldr	r0, [r4, #0]
 1023e2c:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1023e30:	2d00      	cmp	r5, #0
 1023e32:	d1a7      	bne.n	1023d84 <__sfvwrite_r+0xc8>
 1023e34:	e9d6 a500 	ldrd	sl, r5, [r6]
 1023e38:	3608      	adds	r6, #8
 1023e3a:	e7a1      	b.n	1023d80 <__sfvwrite_r+0xc4>
 1023e3c:	f10b 0308 	add.w	r3, fp, #8
 1023e40:	f853 7c04 	ldr.w	r7, [r3, #-4]
 1023e44:	469b      	mov	fp, r3
 1023e46:	f853 6c08 	ldr.w	r6, [r3, #-8]
 1023e4a:	3308      	adds	r3, #8
 1023e4c:	2f00      	cmp	r7, #0
 1023e4e:	d0f7      	beq.n	1023e40 <__sfvwrite_r+0x184>
 1023e50:	463a      	mov	r2, r7
 1023e52:	210a      	movs	r1, #10
 1023e54:	4630      	mov	r0, r6
 1023e56:	f000 faab 	bl	10243b0 <memchr>
 1023e5a:	2800      	cmp	r0, #0
 1023e5c:	d059      	beq.n	1023f12 <__sfvwrite_r+0x256>
 1023e5e:	3001      	adds	r0, #1
 1023e60:	eba0 0a06 	sub.w	sl, r0, r6
 1023e64:	4653      	mov	r3, sl
 1023e66:	6922      	ldr	r2, [r4, #16]
 1023e68:	42bb      	cmp	r3, r7
 1023e6a:	6820      	ldr	r0, [r4, #0]
 1023e6c:	6961      	ldr	r1, [r4, #20]
 1023e6e:	bf28      	it	cs
 1023e70:	463b      	movcs	r3, r7
 1023e72:	68a5      	ldr	r5, [r4, #8]
 1023e74:	4290      	cmp	r0, r2
 1023e76:	440d      	add	r5, r1
 1023e78:	bf94      	ite	ls
 1023e7a:	2200      	movls	r2, #0
 1023e7c:	2201      	movhi	r2, #1
 1023e7e:	42ab      	cmp	r3, r5
 1023e80:	bfd8      	it	le
 1023e82:	2200      	movle	r2, #0
 1023e84:	b9da      	cbnz	r2, 1023ebe <__sfvwrite_r+0x202>
 1023e86:	4299      	cmp	r1, r3
 1023e88:	f300 8084 	bgt.w	1023f94 <__sfvwrite_r+0x2d8>
 1023e8c:	460b      	mov	r3, r1
 1023e8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 1023e90:	4632      	mov	r2, r6
 1023e92:	69e1      	ldr	r1, [r4, #28]
 1023e94:	4648      	mov	r0, r9
 1023e96:	47a8      	blx	r5
 1023e98:	1e05      	subs	r5, r0, #0
 1023e9a:	dd1d      	ble.n	1023ed8 <__sfvwrite_r+0x21c>
 1023e9c:	ebba 0a05 	subs.w	sl, sl, r5
 1023ea0:	bf18      	it	ne
 1023ea2:	2001      	movne	r0, #1
 1023ea4:	d06f      	beq.n	1023f86 <__sfvwrite_r+0x2ca>
 1023ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 1023eaa:	442e      	add	r6, r5
 1023eac:	1b7f      	subs	r7, r7, r5
 1023eae:	1b5d      	subs	r5, r3, r5
 1023eb0:	f8c8 5008 	str.w	r5, [r8, #8]
 1023eb4:	bb15      	cbnz	r5, 1023efc <__sfvwrite_r+0x240>
 1023eb6:	2000      	movs	r0, #0
 1023eb8:	b003      	add	sp, #12
 1023eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023ebe:	4631      	mov	r1, r6
 1023ec0:	462a      	mov	r2, r5
 1023ec2:	f7f9 fc8d 	bl	101d7e0 <memmove>
 1023ec6:	6823      	ldr	r3, [r4, #0]
 1023ec8:	4621      	mov	r1, r4
 1023eca:	4648      	mov	r0, r9
 1023ecc:	442b      	add	r3, r5
 1023ece:	6023      	str	r3, [r4, #0]
 1023ed0:	f7ff fc4a 	bl	1023768 <_fflush_r>
 1023ed4:	2800      	cmp	r0, #0
 1023ed6:	d0e1      	beq.n	1023e9c <__sfvwrite_r+0x1e0>
 1023ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1023edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1023ee0:	f04f 30ff 	mov.w	r0, #4294967295
 1023ee4:	81a3      	strh	r3, [r4, #12]
 1023ee6:	b003      	add	sp, #12
 1023ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023eec:	2000      	movs	r0, #0
 1023eee:	4770      	bx	lr
 1023ef0:	469a      	mov	sl, r3
 1023ef2:	4618      	mov	r0, r3
 1023ef4:	461f      	mov	r7, r3
 1023ef6:	4633      	mov	r3, r6
 1023ef8:	469b      	mov	fp, r3
 1023efa:	4656      	mov	r6, sl
 1023efc:	2f00      	cmp	r7, #0
 1023efe:	d09d      	beq.n	1023e3c <__sfvwrite_r+0x180>
 1023f00:	2800      	cmp	r0, #0
 1023f02:	d1af      	bne.n	1023e64 <__sfvwrite_r+0x1a8>
 1023f04:	463a      	mov	r2, r7
 1023f06:	210a      	movs	r1, #10
 1023f08:	4630      	mov	r0, r6
 1023f0a:	f000 fa51 	bl	10243b0 <memchr>
 1023f0e:	2800      	cmp	r0, #0
 1023f10:	d1a5      	bne.n	1023e5e <__sfvwrite_r+0x1a2>
 1023f12:	1c7b      	adds	r3, r7, #1
 1023f14:	469a      	mov	sl, r3
 1023f16:	e7a6      	b.n	1023e66 <__sfvwrite_r+0x1aa>
 1023f18:	6923      	ldr	r3, [r4, #16]
 1023f1a:	4283      	cmp	r3, r0
 1023f1c:	d319      	bcc.n	1023f52 <__sfvwrite_r+0x296>
 1023f1e:	f8d4 b014 	ldr.w	fp, [r4, #20]
 1023f22:	45ab      	cmp	fp, r5
 1023f24:	d815      	bhi.n	1023f52 <__sfvwrite_r+0x296>
 1023f26:	9b01      	ldr	r3, [sp, #4]
 1023f28:	4659      	mov	r1, fp
 1023f2a:	429d      	cmp	r5, r3
 1023f2c:	bf94      	ite	ls
 1023f2e:	4628      	movls	r0, r5
 1023f30:	f06f 4000 	mvnhi.w	r0, #2147483648	; 0x80000000
 1023f34:	f7f7 f924 	bl	101b180 <__divsi3>
 1023f38:	6a67      	ldr	r7, [r4, #36]	; 0x24
 1023f3a:	4652      	mov	r2, sl
 1023f3c:	69e1      	ldr	r1, [r4, #28]
 1023f3e:	fb0b f300 	mul.w	r3, fp, r0
 1023f42:	4648      	mov	r0, r9
 1023f44:	47b8      	blx	r7
 1023f46:	f1b0 0b00 	subs.w	fp, r0, #0
 1023f4a:	ddc5      	ble.n	1023ed8 <__sfvwrite_r+0x21c>
 1023f4c:	eba5 050b 	sub.w	r5, r5, fp
 1023f50:	e761      	b.n	1023e16 <__sfvwrite_r+0x15a>
 1023f52:	42af      	cmp	r7, r5
 1023f54:	4651      	mov	r1, sl
 1023f56:	bf28      	it	cs
 1023f58:	462f      	movcs	r7, r5
 1023f5a:	463a      	mov	r2, r7
 1023f5c:	46bb      	mov	fp, r7
 1023f5e:	f7f9 fc3f 	bl	101d7e0 <memmove>
 1023f62:	68a3      	ldr	r3, [r4, #8]
 1023f64:	6822      	ldr	r2, [r4, #0]
 1023f66:	1bdb      	subs	r3, r3, r7
 1023f68:	60a3      	str	r3, [r4, #8]
 1023f6a:	443a      	add	r2, r7
 1023f6c:	6022      	str	r2, [r4, #0]
 1023f6e:	2b00      	cmp	r3, #0
 1023f70:	d1ec      	bne.n	1023f4c <__sfvwrite_r+0x290>
 1023f72:	4621      	mov	r1, r4
 1023f74:	4648      	mov	r0, r9
 1023f76:	f7ff fbf7 	bl	1023768 <_fflush_r>
 1023f7a:	2800      	cmp	r0, #0
 1023f7c:	d0e6      	beq.n	1023f4c <__sfvwrite_r+0x290>
 1023f7e:	e7ab      	b.n	1023ed8 <__sfvwrite_r+0x21c>
 1023f80:	462f      	mov	r7, r5
 1023f82:	462b      	mov	r3, r5
 1023f84:	e739      	b.n	1023dfa <__sfvwrite_r+0x13e>
 1023f86:	4621      	mov	r1, r4
 1023f88:	4648      	mov	r0, r9
 1023f8a:	f7ff fbed 	bl	1023768 <_fflush_r>
 1023f8e:	2800      	cmp	r0, #0
 1023f90:	d089      	beq.n	1023ea6 <__sfvwrite_r+0x1ea>
 1023f92:	e7a1      	b.n	1023ed8 <__sfvwrite_r+0x21c>
 1023f94:	461a      	mov	r2, r3
 1023f96:	4631      	mov	r1, r6
 1023f98:	9300      	str	r3, [sp, #0]
 1023f9a:	461d      	mov	r5, r3
 1023f9c:	f7f9 fc20 	bl	101d7e0 <memmove>
 1023fa0:	68a1      	ldr	r1, [r4, #8]
 1023fa2:	6822      	ldr	r2, [r4, #0]
 1023fa4:	9b00      	ldr	r3, [sp, #0]
 1023fa6:	1ac9      	subs	r1, r1, r3
 1023fa8:	4413      	add	r3, r2
 1023faa:	60a1      	str	r1, [r4, #8]
 1023fac:	6023      	str	r3, [r4, #0]
 1023fae:	e775      	b.n	1023e9c <__sfvwrite_r+0x1e0>
 1023fb0:	4648      	mov	r0, r9
 1023fb2:	f000 fecb 	bl	1024d4c <_realloc_r>
 1023fb6:	4603      	mov	r3, r0
 1023fb8:	2800      	cmp	r0, #0
 1023fba:	f47f af14 	bne.w	1023de6 <__sfvwrite_r+0x12a>
 1023fbe:	6921      	ldr	r1, [r4, #16]
 1023fc0:	4648      	mov	r0, r9
 1023fc2:	f7ff fd83 	bl	1023acc <_free_r>
 1023fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1023fca:	220c      	movs	r2, #12
 1023fcc:	f8c9 2000 	str.w	r2, [r9]
 1023fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1023fd4:	e782      	b.n	1023edc <__sfvwrite_r+0x220>
 1023fd6:	220c      	movs	r2, #12
 1023fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1023fdc:	f8c9 2000 	str.w	r2, [r9]
 1023fe0:	e77c      	b.n	1023edc <__sfvwrite_r+0x220>
 1023fe2:	f04f 30ff 	mov.w	r0, #4294967295
 1023fe6:	e767      	b.n	1023eb8 <__sfvwrite_r+0x1fc>

01023fe8 <_fwalk>:
 1023fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1023fec:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 1023ff0:	d01a      	beq.n	1024028 <_fwalk+0x40>
 1023ff2:	4688      	mov	r8, r1
 1023ff4:	2600      	movs	r6, #0
 1023ff6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 1023ffa:	3d01      	subs	r5, #1
 1023ffc:	d40e      	bmi.n	102401c <_fwalk+0x34>
 1023ffe:	89a3      	ldrh	r3, [r4, #12]
 1024000:	3d01      	subs	r5, #1
 1024002:	2b01      	cmp	r3, #1
 1024004:	d906      	bls.n	1024014 <_fwalk+0x2c>
 1024006:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 102400a:	4620      	mov	r0, r4
 102400c:	3301      	adds	r3, #1
 102400e:	d001      	beq.n	1024014 <_fwalk+0x2c>
 1024010:	47c0      	blx	r8
 1024012:	4306      	orrs	r6, r0
 1024014:	1c6b      	adds	r3, r5, #1
 1024016:	f104 0468 	add.w	r4, r4, #104	; 0x68
 102401a:	d1f0      	bne.n	1023ffe <_fwalk+0x16>
 102401c:	683f      	ldr	r7, [r7, #0]
 102401e:	2f00      	cmp	r7, #0
 1024020:	d1e9      	bne.n	1023ff6 <_fwalk+0xe>
 1024022:	4630      	mov	r0, r6
 1024024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1024028:	463e      	mov	r6, r7
 102402a:	4630      	mov	r0, r6
 102402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01024030 <_fwalk_reent>:
 1024030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1024034:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 1024038:	d01e      	beq.n	1024078 <_fwalk_reent+0x48>
 102403a:	4688      	mov	r8, r1
 102403c:	4606      	mov	r6, r0
 102403e:	f04f 0900 	mov.w	r9, #0
 1024042:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 1024046:	3d01      	subs	r5, #1
 1024048:	d410      	bmi.n	102406c <_fwalk_reent+0x3c>
 102404a:	89a3      	ldrh	r3, [r4, #12]
 102404c:	3d01      	subs	r5, #1
 102404e:	2b01      	cmp	r3, #1
 1024050:	d908      	bls.n	1024064 <_fwalk_reent+0x34>
 1024052:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 1024056:	4621      	mov	r1, r4
 1024058:	4630      	mov	r0, r6
 102405a:	3301      	adds	r3, #1
 102405c:	d002      	beq.n	1024064 <_fwalk_reent+0x34>
 102405e:	47c0      	blx	r8
 1024060:	ea49 0900 	orr.w	r9, r9, r0
 1024064:	1c6b      	adds	r3, r5, #1
 1024066:	f104 0468 	add.w	r4, r4, #104	; 0x68
 102406a:	d1ee      	bne.n	102404a <_fwalk_reent+0x1a>
 102406c:	683f      	ldr	r7, [r7, #0]
 102406e:	2f00      	cmp	r7, #0
 1024070:	d1e7      	bne.n	1024042 <_fwalk_reent+0x12>
 1024072:	4648      	mov	r0, r9
 1024074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1024078:	46b9      	mov	r9, r7
 102407a:	4648      	mov	r0, r9
 102407c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

01024080 <_findenv_r>:
 1024080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1024084:	f24d 0784 	movw	r7, #53380	; 0xd084
 1024088:	f2c0 1706 	movt	r7, #262	; 0x106
 102408c:	460d      	mov	r5, r1
 102408e:	4616      	mov	r6, r2
 1024090:	4680      	mov	r8, r0
 1024092:	f003 f957 	bl	1027344 <__env_lock>
 1024096:	f8d7 9000 	ldr.w	r9, [r7]
 102409a:	f1b9 0f00 	cmp.w	r9, #0
 102409e:	d021      	beq.n	10240e4 <_findenv_r+0x64>
 10240a0:	782a      	ldrb	r2, [r5, #0]
 10240a2:	462c      	mov	r4, r5
 10240a4:	2a3d      	cmp	r2, #61	; 0x3d
 10240a6:	bf18      	it	ne
 10240a8:	2a00      	cmpne	r2, #0
 10240aa:	d005      	beq.n	10240b8 <_findenv_r+0x38>
 10240ac:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 10240b0:	2a00      	cmp	r2, #0
 10240b2:	bf18      	it	ne
 10240b4:	2a3d      	cmpne	r2, #61	; 0x3d
 10240b6:	d1f9      	bne.n	10240ac <_findenv_r+0x2c>
 10240b8:	2a3d      	cmp	r2, #61	; 0x3d
 10240ba:	d013      	beq.n	10240e4 <_findenv_r+0x64>
 10240bc:	f8d9 0000 	ldr.w	r0, [r9]
 10240c0:	1b64      	subs	r4, r4, r5
 10240c2:	b178      	cbz	r0, 10240e4 <_findenv_r+0x64>
 10240c4:	4622      	mov	r2, r4
 10240c6:	4629      	mov	r1, r5
 10240c8:	f7fa fbb6 	bl	101e838 <strncmp>
 10240cc:	b930      	cbnz	r0, 10240dc <_findenv_r+0x5c>
 10240ce:	f8d9 3000 	ldr.w	r3, [r9]
 10240d2:	eb03 0a04 	add.w	sl, r3, r4
 10240d6:	5d1b      	ldrb	r3, [r3, r4]
 10240d8:	2b3d      	cmp	r3, #61	; 0x3d
 10240da:	d009      	beq.n	10240f0 <_findenv_r+0x70>
 10240dc:	f859 0f04 	ldr.w	r0, [r9, #4]!
 10240e0:	2800      	cmp	r0, #0
 10240e2:	d1ef      	bne.n	10240c4 <_findenv_r+0x44>
 10240e4:	4640      	mov	r0, r8
 10240e6:	f003 f92f 	bl	1027348 <__env_unlock>
 10240ea:	2000      	movs	r0, #0
 10240ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10240f0:	683b      	ldr	r3, [r7, #0]
 10240f2:	4640      	mov	r0, r8
 10240f4:	eba9 0303 	sub.w	r3, r9, r3
 10240f8:	109b      	asrs	r3, r3, #2
 10240fa:	6033      	str	r3, [r6, #0]
 10240fc:	f003 f924 	bl	1027348 <__env_unlock>
 1024100:	f10a 0001 	add.w	r0, sl, #1
 1024104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

01024108 <_getenv_r>:
 1024108:	b500      	push	{lr}
 102410a:	b083      	sub	sp, #12
 102410c:	aa01      	add	r2, sp, #4
 102410e:	f7ff ffb7 	bl	1024080 <_findenv_r>
 1024112:	b003      	add	sp, #12
 1024114:	f85d fb04 	ldr.w	pc, [sp], #4

01024118 <__localeconv_l>:
 1024118:	30f0      	adds	r0, #240	; 0xf0
 102411a:	4770      	bx	lr

0102411c <_localeconv_r>:
 102411c:	f24c 62b8 	movw	r2, #50872	; 0xc6b8
 1024120:	f2c0 1206 	movt	r2, #262	; 0x106
 1024124:	f64c 23e8 	movw	r3, #51944	; 0xcae8
 1024128:	f2c0 1306 	movt	r3, #262	; 0x106
 102412c:	6812      	ldr	r2, [r2, #0]
 102412e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 1024130:	2800      	cmp	r0, #0
 1024132:	bf08      	it	eq
 1024134:	4618      	moveq	r0, r3
 1024136:	30f0      	adds	r0, #240	; 0xf0
 1024138:	4770      	bx	lr
 102413a:	bf00      	nop

0102413c <localeconv>:
 102413c:	f24c 62b8 	movw	r2, #50872	; 0xc6b8
 1024140:	f2c0 1206 	movt	r2, #262	; 0x106
 1024144:	f64c 23e8 	movw	r3, #51944	; 0xcae8
 1024148:	f2c0 1306 	movt	r3, #262	; 0x106
 102414c:	6812      	ldr	r2, [r2, #0]
 102414e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 1024150:	2800      	cmp	r0, #0
 1024152:	bf08      	it	eq
 1024154:	4618      	moveq	r0, r3
 1024156:	30f0      	adds	r0, #240	; 0xf0
 1024158:	4770      	bx	lr
 102415a:	bf00      	nop

0102415c <__swhatbuf_r>:
 102415c:	b570      	push	{r4, r5, r6, lr}
 102415e:	460c      	mov	r4, r1
 1024160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1024164:	b096      	sub	sp, #88	; 0x58
 1024166:	4615      	mov	r5, r2
 1024168:	461e      	mov	r6, r3
 102416a:	2900      	cmp	r1, #0
 102416c:	db14      	blt.n	1024198 <__swhatbuf_r+0x3c>
 102416e:	466a      	mov	r2, sp
 1024170:	f003 f9c6 	bl	1027500 <_fstat_r>
 1024174:	2800      	cmp	r0, #0
 1024176:	db0f      	blt.n	1024198 <__swhatbuf_r+0x3c>
 1024178:	9a01      	ldr	r2, [sp, #4]
 102417a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 102417e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 1024182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 1024186:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 102418a:	fab2 f282 	clz	r2, r2
 102418e:	0952      	lsrs	r2, r2, #5
 1024190:	6032      	str	r2, [r6, #0]
 1024192:	602b      	str	r3, [r5, #0]
 1024194:	b016      	add	sp, #88	; 0x58
 1024196:	bd70      	pop	{r4, r5, r6, pc}
 1024198:	89a2      	ldrh	r2, [r4, #12]
 102419a:	2300      	movs	r3, #0
 102419c:	6033      	str	r3, [r6, #0]
 102419e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 10241a2:	d004      	beq.n	10241ae <__swhatbuf_r+0x52>
 10241a4:	4618      	mov	r0, r3
 10241a6:	2340      	movs	r3, #64	; 0x40
 10241a8:	602b      	str	r3, [r5, #0]
 10241aa:	b016      	add	sp, #88	; 0x58
 10241ac:	bd70      	pop	{r4, r5, r6, pc}
 10241ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 10241b2:	602b      	str	r3, [r5, #0]
 10241b4:	b016      	add	sp, #88	; 0x58
 10241b6:	bd70      	pop	{r4, r5, r6, pc}

010241b8 <__smakebuf_r>:
 10241b8:	898a      	ldrh	r2, [r1, #12]
 10241ba:	460b      	mov	r3, r1
 10241bc:	0792      	lsls	r2, r2, #30
 10241be:	d506      	bpl.n	10241ce <__smakebuf_r+0x16>
 10241c0:	f101 0243 	add.w	r2, r1, #67	; 0x43
 10241c4:	2101      	movs	r1, #1
 10241c6:	601a      	str	r2, [r3, #0]
 10241c8:	e9c3 2104 	strd	r2, r1, [r3, #16]
 10241cc:	4770      	bx	lr
 10241ce:	b570      	push	{r4, r5, r6, lr}
 10241d0:	b082      	sub	sp, #8
 10241d2:	ab01      	add	r3, sp, #4
 10241d4:	4606      	mov	r6, r0
 10241d6:	466a      	mov	r2, sp
 10241d8:	460c      	mov	r4, r1
 10241da:	f7ff ffbf 	bl	102415c <__swhatbuf_r>
 10241de:	9900      	ldr	r1, [sp, #0]
 10241e0:	4605      	mov	r5, r0
 10241e2:	4630      	mov	r0, r6
 10241e4:	f7f8 faf8 	bl	101c7d8 <_malloc_r>
 10241e8:	b198      	cbz	r0, 1024212 <__smakebuf_r+0x5a>
 10241ea:	9900      	ldr	r1, [sp, #0]
 10241ec:	f243 73c9 	movw	r3, #14281	; 0x37c9
 10241f0:	9a01      	ldr	r2, [sp, #4]
 10241f2:	f2c0 1302 	movt	r3, #258	; 0x102
 10241f6:	63f3      	str	r3, [r6, #60]	; 0x3c
 10241f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10241fc:	6020      	str	r0, [r4, #0]
 10241fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 1024202:	6120      	str	r0, [r4, #16]
 1024204:	6161      	str	r1, [r4, #20]
 1024206:	81a3      	strh	r3, [r4, #12]
 1024208:	b99a      	cbnz	r2, 1024232 <__smakebuf_r+0x7a>
 102420a:	432b      	orrs	r3, r5
 102420c:	81a3      	strh	r3, [r4, #12]
 102420e:	b002      	add	sp, #8
 1024210:	bd70      	pop	{r4, r5, r6, pc}
 1024212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1024216:	059a      	lsls	r2, r3, #22
 1024218:	d4f9      	bmi.n	102420e <__smakebuf_r+0x56>
 102421a:	f023 0303 	bic.w	r3, r3, #3
 102421e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 1024222:	f043 0302 	orr.w	r3, r3, #2
 1024226:	6022      	str	r2, [r4, #0]
 1024228:	81a3      	strh	r3, [r4, #12]
 102422a:	2301      	movs	r3, #1
 102422c:	e9c4 2304 	strd	r2, r3, [r4, #16]
 1024230:	e7ed      	b.n	102420e <__smakebuf_r+0x56>
 1024232:	4630      	mov	r0, r6
 1024234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 1024238:	f003 f978 	bl	102752c <_isatty_r>
 102423c:	b910      	cbnz	r0, 1024244 <__smakebuf_r+0x8c>
 102423e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1024242:	e7e2      	b.n	102420a <__smakebuf_r+0x52>
 1024244:	89a3      	ldrh	r3, [r4, #12]
 1024246:	f023 0303 	bic.w	r3, r3, #3
 102424a:	f043 0301 	orr.w	r3, r3, #1
 102424e:	b21b      	sxth	r3, r3
 1024250:	e7db      	b.n	102420a <__smakebuf_r+0x52>
 1024252:	bf00      	nop

01024254 <__malloc_update_mallinfo>:
 1024254:	b470      	push	{r4, r5, r6}
 1024256:	f64c 4474 	movw	r4, #52340	; 0xcc74
 102425a:	f2c0 1406 	movt	r4, #262	; 0x106
 102425e:	f504 6580 	add.w	r5, r4, #1024	; 0x400
 1024262:	f854 3f08 	ldr.w	r3, [r4, #8]!
 1024266:	685e      	ldr	r6, [r3, #4]
 1024268:	f026 0603 	bic.w	r6, r6, #3
 102426c:	2e0f      	cmp	r6, #15
 102426e:	4631      	mov	r1, r6
 1024270:	bfd4      	ite	le
 1024272:	2000      	movle	r0, #0
 1024274:	2001      	movgt	r0, #1
 1024276:	68e3      	ldr	r3, [r4, #12]
 1024278:	42a3      	cmp	r3, r4
 102427a:	d007      	beq.n	102428c <__malloc_update_mallinfo+0x38>
 102427c:	685a      	ldr	r2, [r3, #4]
 102427e:	3001      	adds	r0, #1
 1024280:	68db      	ldr	r3, [r3, #12]
 1024282:	f022 0203 	bic.w	r2, r2, #3
 1024286:	42a3      	cmp	r3, r4
 1024288:	4411      	add	r1, r2
 102428a:	d1f7      	bne.n	102427c <__malloc_update_mallinfo+0x28>
 102428c:	3408      	adds	r4, #8
 102428e:	42a5      	cmp	r5, r4
 1024290:	d1f1      	bne.n	1024276 <__malloc_update_mallinfo+0x22>
 1024292:	f244 3300 	movw	r3, #17152	; 0x4300
 1024296:	f2c0 1307 	movt	r3, #263	; 0x107
 102429a:	681a      	ldr	r2, [r3, #0]
 102429c:	625e      	str	r6, [r3, #36]	; 0x24
 102429e:	1a52      	subs	r2, r2, r1
 10242a0:	6058      	str	r0, [r3, #4]
 10242a2:	6219      	str	r1, [r3, #32]
 10242a4:	61da      	str	r2, [r3, #28]
 10242a6:	bc70      	pop	{r4, r5, r6}
 10242a8:	4770      	bx	lr
 10242aa:	bf00      	nop

010242ac <_mallinfo_r>:
 10242ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10242ae:	f244 3400 	movw	r4, #17152	; 0x4300
 10242b2:	f2c0 1407 	movt	r4, #263	; 0x107
 10242b6:	4606      	mov	r6, r0
 10242b8:	4608      	mov	r0, r1
 10242ba:	460f      	mov	r7, r1
 10242bc:	f7f9 fb48 	bl	101d950 <__malloc_lock>
 10242c0:	4635      	mov	r5, r6
 10242c2:	f7ff ffc7 	bl	1024254 <__malloc_update_mallinfo>
 10242c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 10242c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 10242ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 10242cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 10242ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 10242d2:	e885 0003 	stmia.w	r5, {r0, r1}
 10242d6:	4638      	mov	r0, r7
 10242d8:	f7f9 fb3c 	bl	101d954 <__malloc_unlock>
 10242dc:	4630      	mov	r0, r6
 10242de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

010242e0 <_mallopt_r>:
 10242e0:	b570      	push	{r4, r5, r6, lr}
 10242e2:	460c      	mov	r4, r1
 10242e4:	4615      	mov	r5, r2
 10242e6:	4606      	mov	r6, r0
 10242e8:	f7f9 fb32 	bl	101d950 <__malloc_lock>
 10242ec:	1d21      	adds	r1, r4, #4
 10242ee:	2903      	cmp	r1, #3
 10242f0:	d823      	bhi.n	102433a <_mallopt_r+0x5a>
 10242f2:	e8df f001 	tbb	[pc, r1]
 10242f6:	1d16      	.short	0x1d16
 10242f8:	020c      	.short	0x020c
 10242fa:	f24d 0380 	movw	r3, #53376	; 0xd080
 10242fe:	f2c0 1306 	movt	r3, #262	; 0x106
 1024302:	4630      	mov	r0, r6
 1024304:	601d      	str	r5, [r3, #0]
 1024306:	f7f9 fb25 	bl	101d954 <__malloc_unlock>
 102430a:	2001      	movs	r0, #1
 102430c:	bd70      	pop	{r4, r5, r6, pc}
 102430e:	f244 23fc 	movw	r3, #17148	; 0x42fc
 1024312:	f2c0 1307 	movt	r3, #263	; 0x107
 1024316:	4630      	mov	r0, r6
 1024318:	601d      	str	r5, [r3, #0]
 102431a:	f7f9 fb1b 	bl	101d954 <__malloc_unlock>
 102431e:	2001      	movs	r0, #1
 1024320:	bd70      	pop	{r4, r5, r6, pc}
 1024322:	4630      	mov	r0, r6
 1024324:	f7f9 fb16 	bl	101d954 <__malloc_unlock>
 1024328:	fab5 f085 	clz	r0, r5
 102432c:	0940      	lsrs	r0, r0, #5
 102432e:	bd70      	pop	{r4, r5, r6, pc}
 1024330:	4630      	mov	r0, r6
 1024332:	f7f9 fb0f 	bl	101d954 <__malloc_unlock>
 1024336:	2001      	movs	r0, #1
 1024338:	bd70      	pop	{r4, r5, r6, pc}
 102433a:	4630      	mov	r0, r6
 102433c:	f7f9 fb0a 	bl	101d954 <__malloc_unlock>
 1024340:	2000      	movs	r0, #0
 1024342:	bd70      	pop	{r4, r5, r6, pc}

01024344 <_malloc_stats_r>:
 1024344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1024346:	4604      	mov	r4, r0
 1024348:	f7f9 fb02 	bl	101d950 <__malloc_lock>
 102434c:	f7ff ff82 	bl	1024254 <__malloc_update_mallinfo>
 1024350:	f244 322c 	movw	r2, #17196	; 0x432c
 1024354:	f244 3300 	movw	r3, #17152	; 0x4300
 1024358:	f2c0 1207 	movt	r2, #263	; 0x107
 102435c:	f2c0 1307 	movt	r3, #263	; 0x107
 1024360:	4620      	mov	r0, r4
 1024362:	6817      	ldr	r7, [r2, #0]
 1024364:	681e      	ldr	r6, [r3, #0]
 1024366:	69dd      	ldr	r5, [r3, #28]
 1024368:	f7f9 faf4 	bl	101d954 <__malloc_unlock>
 102436c:	68e4      	ldr	r4, [r4, #12]
 102436e:	463a      	mov	r2, r7
 1024370:	f24c 11a4 	movw	r1, #49572	; 0xc1a4
 1024374:	f2c0 1106 	movt	r1, #262	; 0x106
 1024378:	4620      	mov	r0, r4
 102437a:	f7ff fb3b 	bl	10239f4 <fiprintf>
 102437e:	4632      	mov	r2, r6
 1024380:	4620      	mov	r0, r4
 1024382:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
 1024386:	f2c0 1106 	movt	r1, #262	; 0x106
 102438a:	f7ff fb33 	bl	10239f4 <fiprintf>
 102438e:	462a      	mov	r2, r5
 1024390:	4620      	mov	r0, r4
 1024392:	f24c 11dc 	movw	r1, #49628	; 0xc1dc
 1024396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 102439a:	f2c0 1106 	movt	r1, #262	; 0x106
 102439e:	f7ff bb29 	b.w	10239f4 <fiprintf>
 10243a2:	bf00      	nop
	...

010243b0 <memchr>:
 10243b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 10243b4:	2a10      	cmp	r2, #16
 10243b6:	db2b      	blt.n	1024410 <memchr+0x60>
 10243b8:	f010 0f07 	tst.w	r0, #7
 10243bc:	d008      	beq.n	10243d0 <memchr+0x20>
 10243be:	f810 3b01 	ldrb.w	r3, [r0], #1
 10243c2:	3a01      	subs	r2, #1
 10243c4:	428b      	cmp	r3, r1
 10243c6:	d02d      	beq.n	1024424 <memchr+0x74>
 10243c8:	f010 0f07 	tst.w	r0, #7
 10243cc:	b342      	cbz	r2, 1024420 <memchr+0x70>
 10243ce:	d1f6      	bne.n	10243be <memchr+0xe>
 10243d0:	b4f0      	push	{r4, r5, r6, r7}
 10243d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 10243d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 10243da:	f022 0407 	bic.w	r4, r2, #7
 10243de:	f07f 0700 	mvns.w	r7, #0
 10243e2:	2300      	movs	r3, #0
 10243e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 10243e8:	3c08      	subs	r4, #8
 10243ea:	ea85 0501 	eor.w	r5, r5, r1
 10243ee:	ea86 0601 	eor.w	r6, r6, r1
 10243f2:	fa85 f547 	uadd8	r5, r5, r7
 10243f6:	faa3 f587 	sel	r5, r3, r7
 10243fa:	fa86 f647 	uadd8	r6, r6, r7
 10243fe:	faa5 f687 	sel	r6, r5, r7
 1024402:	b98e      	cbnz	r6, 1024428 <memchr+0x78>
 1024404:	d1ee      	bne.n	10243e4 <memchr+0x34>
 1024406:	bcf0      	pop	{r4, r5, r6, r7}
 1024408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 102440c:	f002 0207 	and.w	r2, r2, #7
 1024410:	b132      	cbz	r2, 1024420 <memchr+0x70>
 1024412:	f810 3b01 	ldrb.w	r3, [r0], #1
 1024416:	3a01      	subs	r2, #1
 1024418:	ea83 0301 	eor.w	r3, r3, r1
 102441c:	b113      	cbz	r3, 1024424 <memchr+0x74>
 102441e:	d1f8      	bne.n	1024412 <memchr+0x62>
 1024420:	2000      	movs	r0, #0
 1024422:	4770      	bx	lr
 1024424:	3801      	subs	r0, #1
 1024426:	4770      	bx	lr
 1024428:	2d00      	cmp	r5, #0
 102442a:	bf06      	itte	eq
 102442c:	4635      	moveq	r5, r6
 102442e:	3803      	subeq	r0, #3
 1024430:	3807      	subne	r0, #7
 1024432:	f015 0f01 	tst.w	r5, #1
 1024436:	d107      	bne.n	1024448 <memchr+0x98>
 1024438:	3001      	adds	r0, #1
 102443a:	f415 7f80 	tst.w	r5, #256	; 0x100
 102443e:	bf02      	ittt	eq
 1024440:	3001      	addeq	r0, #1
 1024442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 1024446:	3001      	addeq	r0, #1
 1024448:	bcf0      	pop	{r4, r5, r6, r7}
 102444a:	3801      	subs	r0, #1
 102444c:	4770      	bx	lr
 102444e:	bf00      	nop

01024450 <_Balloc>:
 1024450:	b538      	push	{r3, r4, r5, lr}
 1024452:	4605      	mov	r5, r0
 1024454:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 1024456:	460c      	mov	r4, r1
 1024458:	b14b      	cbz	r3, 102446e <_Balloc+0x1e>
 102445a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 102445e:	b180      	cbz	r0, 1024482 <_Balloc+0x32>
 1024460:	6802      	ldr	r2, [r0, #0]
 1024462:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 1024466:	2300      	movs	r3, #0
 1024468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 102446c:	bd38      	pop	{r3, r4, r5, pc}
 102446e:	2221      	movs	r2, #33	; 0x21
 1024470:	2104      	movs	r1, #4
 1024472:	f7f7 fbab 	bl	101bbcc <_calloc_r>
 1024476:	4603      	mov	r3, r0
 1024478:	64e8      	str	r0, [r5, #76]	; 0x4c
 102447a:	2800      	cmp	r0, #0
 102447c:	d1ed      	bne.n	102445a <_Balloc+0xa>
 102447e:	2000      	movs	r0, #0
 1024480:	bd38      	pop	{r3, r4, r5, pc}
 1024482:	2101      	movs	r1, #1
 1024484:	4628      	mov	r0, r5
 1024486:	fa01 f504 	lsl.w	r5, r1, r4
 102448a:	1d6a      	adds	r2, r5, #5
 102448c:	0092      	lsls	r2, r2, #2
 102448e:	f7f7 fb9d 	bl	101bbcc <_calloc_r>
 1024492:	2800      	cmp	r0, #0
 1024494:	d0f3      	beq.n	102447e <_Balloc+0x2e>
 1024496:	e9c0 4501 	strd	r4, r5, [r0, #4]
 102449a:	e7e4      	b.n	1024466 <_Balloc+0x16>

0102449c <_Bfree>:
 102449c:	b131      	cbz	r1, 10244ac <_Bfree+0x10>
 102449e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 10244a0:	684a      	ldr	r2, [r1, #4]
 10244a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 10244a6:	6008      	str	r0, [r1, #0]
 10244a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 10244ac:	4770      	bx	lr
 10244ae:	bf00      	nop

010244b0 <__multadd>:
 10244b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10244b2:	f101 0714 	add.w	r7, r1, #20
 10244b6:	690c      	ldr	r4, [r1, #16]
 10244b8:	b083      	sub	sp, #12
 10244ba:	460d      	mov	r5, r1
 10244bc:	4606      	mov	r6, r0
 10244be:	f04f 0c00 	mov.w	ip, #0
 10244c2:	6838      	ldr	r0, [r7, #0]
 10244c4:	f10c 0c01 	add.w	ip, ip, #1
 10244c8:	4564      	cmp	r4, ip
 10244ca:	b281      	uxth	r1, r0
 10244cc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 10244d0:	fb02 3301 	mla	r3, r2, r1, r3
 10244d4:	ea4f 4113 	mov.w	r1, r3, lsr #16
 10244d8:	b29b      	uxth	r3, r3
 10244da:	fb02 1000 	mla	r0, r2, r0, r1
 10244de:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 10244e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 10244e6:	f847 1b04 	str.w	r1, [r7], #4
 10244ea:	dcea      	bgt.n	10244c2 <__multadd+0x12>
 10244ec:	b13b      	cbz	r3, 10244fe <__multadd+0x4e>
 10244ee:	68aa      	ldr	r2, [r5, #8]
 10244f0:	42a2      	cmp	r2, r4
 10244f2:	dd07      	ble.n	1024504 <__multadd+0x54>
 10244f4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 10244f8:	3401      	adds	r4, #1
 10244fa:	6153      	str	r3, [r2, #20]
 10244fc:	612c      	str	r4, [r5, #16]
 10244fe:	4628      	mov	r0, r5
 1024500:	b003      	add	sp, #12
 1024502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1024504:	6869      	ldr	r1, [r5, #4]
 1024506:	4630      	mov	r0, r6
 1024508:	9301      	str	r3, [sp, #4]
 102450a:	3101      	adds	r1, #1
 102450c:	f7ff ffa0 	bl	1024450 <_Balloc>
 1024510:	692a      	ldr	r2, [r5, #16]
 1024512:	f105 010c 	add.w	r1, r5, #12
 1024516:	3202      	adds	r2, #2
 1024518:	0092      	lsls	r2, r2, #2
 102451a:	4607      	mov	r7, r0
 102451c:	300c      	adds	r0, #12
 102451e:	f7f8 ee70 	blx	101d200 <memcpy>
 1024522:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 1024524:	6869      	ldr	r1, [r5, #4]
 1024526:	9b01      	ldr	r3, [sp, #4]
 1024528:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 102452c:	6028      	str	r0, [r5, #0]
 102452e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 1024532:	463d      	mov	r5, r7
 1024534:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1024538:	3401      	adds	r4, #1
 102453a:	6153      	str	r3, [r2, #20]
 102453c:	612c      	str	r4, [r5, #16]
 102453e:	e7de      	b.n	10244fe <__multadd+0x4e>

01024540 <__s2b>:
 1024540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1024544:	461d      	mov	r5, r3
 1024546:	f648 6639 	movw	r6, #36409	; 0x8e39
 102454a:	3308      	adds	r3, #8
 102454c:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 1024550:	4607      	mov	r7, r0
 1024552:	460c      	mov	r4, r1
 1024554:	2d09      	cmp	r5, #9
 1024556:	fb86 0103 	smull	r0, r1, r6, r3
 102455a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 102455e:	4690      	mov	r8, r2
 1024560:	9e08      	ldr	r6, [sp, #32]
 1024562:	ebc3 0261 	rsb	r2, r3, r1, asr #1
 1024566:	dd35      	ble.n	10245d4 <__s2b+0x94>
 1024568:	2301      	movs	r3, #1
 102456a:	2100      	movs	r1, #0
 102456c:	005b      	lsls	r3, r3, #1
 102456e:	3101      	adds	r1, #1
 1024570:	429a      	cmp	r2, r3
 1024572:	dcfb      	bgt.n	102456c <__s2b+0x2c>
 1024574:	4638      	mov	r0, r7
 1024576:	f7ff ff6b 	bl	1024450 <_Balloc>
 102457a:	f1b8 0f09 	cmp.w	r8, #9
 102457e:	f04f 0301 	mov.w	r3, #1
 1024582:	bfdc      	itt	le
 1024584:	340a      	addle	r4, #10
 1024586:	f04f 0809 	movle.w	r8, #9
 102458a:	6146      	str	r6, [r0, #20]
 102458c:	6103      	str	r3, [r0, #16]
 102458e:	dd10      	ble.n	10245b2 <__s2b+0x72>
 1024590:	f104 0909 	add.w	r9, r4, #9
 1024594:	4444      	add	r4, r8
 1024596:	464e      	mov	r6, r9
 1024598:	f816 3b01 	ldrb.w	r3, [r6], #1
 102459c:	4601      	mov	r1, r0
 102459e:	220a      	movs	r2, #10
 10245a0:	4638      	mov	r0, r7
 10245a2:	3b30      	subs	r3, #48	; 0x30
 10245a4:	f7ff ff84 	bl	10244b0 <__multadd>
 10245a8:	42b4      	cmp	r4, r6
 10245aa:	d1f5      	bne.n	1024598 <__s2b+0x58>
 10245ac:	f1a8 0408 	sub.w	r4, r8, #8
 10245b0:	444c      	add	r4, r9
 10245b2:	4545      	cmp	r5, r8
 10245b4:	dd0c      	ble.n	10245d0 <__s2b+0x90>
 10245b6:	eba5 0508 	sub.w	r5, r5, r8
 10245ba:	4425      	add	r5, r4
 10245bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 10245c0:	4601      	mov	r1, r0
 10245c2:	220a      	movs	r2, #10
 10245c4:	4638      	mov	r0, r7
 10245c6:	3b30      	subs	r3, #48	; 0x30
 10245c8:	f7ff ff72 	bl	10244b0 <__multadd>
 10245cc:	42a5      	cmp	r5, r4
 10245ce:	d1f5      	bne.n	10245bc <__s2b+0x7c>
 10245d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 10245d4:	2100      	movs	r1, #0
 10245d6:	e7cd      	b.n	1024574 <__s2b+0x34>

010245d8 <__hi0bits>:
 10245d8:	0c02      	lsrs	r2, r0, #16
 10245da:	4603      	mov	r3, r0
 10245dc:	2000      	movs	r0, #0
 10245de:	0412      	lsls	r2, r2, #16
 10245e0:	b90a      	cbnz	r2, 10245e6 <__hi0bits+0xe>
 10245e2:	041b      	lsls	r3, r3, #16
 10245e4:	2010      	movs	r0, #16
 10245e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 10245ea:	bf04      	itt	eq
 10245ec:	021b      	lsleq	r3, r3, #8
 10245ee:	3008      	addeq	r0, #8
 10245f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 10245f4:	bf04      	itt	eq
 10245f6:	011b      	lsleq	r3, r3, #4
 10245f8:	3004      	addeq	r0, #4
 10245fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 10245fe:	bf04      	itt	eq
 1024600:	009b      	lsleq	r3, r3, #2
 1024602:	3002      	addeq	r0, #2
 1024604:	2b00      	cmp	r3, #0
 1024606:	db05      	blt.n	1024614 <__hi0bits+0x3c>
 1024608:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 102460c:	f100 0001 	add.w	r0, r0, #1
 1024610:	bf08      	it	eq
 1024612:	2020      	moveq	r0, #32
 1024614:	4770      	bx	lr
 1024616:	bf00      	nop

01024618 <__lo0bits>:
 1024618:	6803      	ldr	r3, [r0, #0]
 102461a:	4601      	mov	r1, r0
 102461c:	f013 0207 	ands.w	r2, r3, #7
 1024620:	d009      	beq.n	1024636 <__lo0bits+0x1e>
 1024622:	07da      	lsls	r2, r3, #31
 1024624:	d422      	bmi.n	102466c <__lo0bits+0x54>
 1024626:	0798      	lsls	r0, r3, #30
 1024628:	bf4b      	itete	mi
 102462a:	085b      	lsrmi	r3, r3, #1
 102462c:	089b      	lsrpl	r3, r3, #2
 102462e:	2001      	movmi	r0, #1
 1024630:	2002      	movpl	r0, #2
 1024632:	600b      	str	r3, [r1, #0]
 1024634:	4770      	bx	lr
 1024636:	b298      	uxth	r0, r3
 1024638:	b9b0      	cbnz	r0, 1024668 <__lo0bits+0x50>
 102463a:	0c1b      	lsrs	r3, r3, #16
 102463c:	2010      	movs	r0, #16
 102463e:	f013 0fff 	tst.w	r3, #255	; 0xff
 1024642:	bf04      	itt	eq
 1024644:	0a1b      	lsreq	r3, r3, #8
 1024646:	3008      	addeq	r0, #8
 1024648:	071a      	lsls	r2, r3, #28
 102464a:	bf04      	itt	eq
 102464c:	091b      	lsreq	r3, r3, #4
 102464e:	3004      	addeq	r0, #4
 1024650:	079a      	lsls	r2, r3, #30
 1024652:	bf04      	itt	eq
 1024654:	089b      	lsreq	r3, r3, #2
 1024656:	3002      	addeq	r0, #2
 1024658:	07da      	lsls	r2, r3, #31
 102465a:	d403      	bmi.n	1024664 <__lo0bits+0x4c>
 102465c:	085b      	lsrs	r3, r3, #1
 102465e:	f100 0001 	add.w	r0, r0, #1
 1024662:	d005      	beq.n	1024670 <__lo0bits+0x58>
 1024664:	600b      	str	r3, [r1, #0]
 1024666:	4770      	bx	lr
 1024668:	4610      	mov	r0, r2
 102466a:	e7e8      	b.n	102463e <__lo0bits+0x26>
 102466c:	2000      	movs	r0, #0
 102466e:	4770      	bx	lr
 1024670:	2020      	movs	r0, #32
 1024672:	4770      	bx	lr

01024674 <__i2b>:
 1024674:	b510      	push	{r4, lr}
 1024676:	460c      	mov	r4, r1
 1024678:	2101      	movs	r1, #1
 102467a:	f7ff fee9 	bl	1024450 <_Balloc>
 102467e:	2201      	movs	r2, #1
 1024680:	6144      	str	r4, [r0, #20]
 1024682:	6102      	str	r2, [r0, #16]
 1024684:	bd10      	pop	{r4, pc}
 1024686:	bf00      	nop

01024688 <__multiply>:
 1024688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102468c:	b083      	sub	sp, #12
 102468e:	690d      	ldr	r5, [r1, #16]
 1024690:	6913      	ldr	r3, [r2, #16]
 1024692:	429d      	cmp	r5, r3
 1024694:	bfb5      	itete	lt
 1024696:	4614      	movlt	r4, r2
 1024698:	460c      	movge	r4, r1
 102469a:	461f      	movlt	r7, r3
 102469c:	469b      	movge	fp, r3
 102469e:	68a3      	ldr	r3, [r4, #8]
 10246a0:	bfae      	itee	ge
 10246a2:	462f      	movge	r7, r5
 10246a4:	46ab      	movlt	fp, r5
 10246a6:	460d      	movlt	r5, r1
 10246a8:	eb07 080b 	add.w	r8, r7, fp
 10246ac:	6861      	ldr	r1, [r4, #4]
 10246ae:	bfa8      	it	ge
 10246b0:	4615      	movge	r5, r2
 10246b2:	4543      	cmp	r3, r8
 10246b4:	bfb8      	it	lt
 10246b6:	3101      	addlt	r1, #1
 10246b8:	f7ff feca 	bl	1024450 <_Balloc>
 10246bc:	f100 0a14 	add.w	sl, r0, #20
 10246c0:	4603      	mov	r3, r0
 10246c2:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 10246c6:	9000      	str	r0, [sp, #0]
 10246c8:	45ca      	cmp	sl, r9
 10246ca:	bf3c      	itt	cc
 10246cc:	4653      	movcc	r3, sl
 10246ce:	2000      	movcc	r0, #0
 10246d0:	d203      	bcs.n	10246da <__multiply+0x52>
 10246d2:	f843 0b04 	str.w	r0, [r3], #4
 10246d6:	4599      	cmp	r9, r3
 10246d8:	d8fb      	bhi.n	10246d2 <__multiply+0x4a>
 10246da:	f105 0e14 	add.w	lr, r5, #20
 10246de:	f104 0314 	add.w	r3, r4, #20
 10246e2:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 10246e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 10246ea:	45de      	cmp	lr, fp
 10246ec:	bf3c      	itt	cc
 10246ee:	f8cd 8004 	strcc.w	r8, [sp, #4]
 10246f2:	4698      	movcc	r8, r3
 10246f4:	d306      	bcc.n	1024704 <__multiply+0x7c>
 10246f6:	e051      	b.n	102479c <__multiply+0x114>
 10246f8:	0c24      	lsrs	r4, r4, #16
 10246fa:	d12a      	bne.n	1024752 <__multiply+0xca>
 10246fc:	45f3      	cmp	fp, lr
 10246fe:	f10a 0a04 	add.w	sl, sl, #4
 1024702:	d949      	bls.n	1024798 <__multiply+0x110>
 1024704:	f85e 4b04 	ldr.w	r4, [lr], #4
 1024708:	b2a6      	uxth	r6, r4
 102470a:	2e00      	cmp	r6, #0
 102470c:	d0f4      	beq.n	10246f8 <__multiply+0x70>
 102470e:	4645      	mov	r5, r8
 1024710:	4654      	mov	r4, sl
 1024712:	2300      	movs	r3, #0
 1024714:	f855 1b04 	ldr.w	r1, [r5], #4
 1024718:	6820      	ldr	r0, [r4, #0]
 102471a:	42af      	cmp	r7, r5
 102471c:	b28a      	uxth	r2, r1
 102471e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 1024722:	fa1f fc80 	uxth.w	ip, r0
 1024726:	ea4f 4010 	mov.w	r0, r0, lsr #16
 102472a:	fb06 c202 	mla	r2, r6, r2, ip
 102472e:	fb06 0101 	mla	r1, r6, r1, r0
 1024732:	4413      	add	r3, r2
 1024734:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 1024738:	b29b      	uxth	r3, r3
 102473a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 102473e:	ea4f 4311 	mov.w	r3, r1, lsr #16
 1024742:	f844 2b04 	str.w	r2, [r4], #4
 1024746:	d8e5      	bhi.n	1024714 <__multiply+0x8c>
 1024748:	6023      	str	r3, [r4, #0]
 102474a:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 102474e:	0c24      	lsrs	r4, r4, #16
 1024750:	d0d4      	beq.n	10246fc <__multiply+0x74>
 1024752:	f8da 3000 	ldr.w	r3, [sl]
 1024756:	4645      	mov	r5, r8
 1024758:	4656      	mov	r6, sl
 102475a:	2200      	movs	r2, #0
 102475c:	4618      	mov	r0, r3
 102475e:	8829      	ldrh	r1, [r5, #0]
 1024760:	0c00      	lsrs	r0, r0, #16
 1024762:	b29b      	uxth	r3, r3
 1024764:	fb04 0001 	mla	r0, r4, r1, r0
 1024768:	4402      	add	r2, r0
 102476a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 102476e:	f846 3b04 	str.w	r3, [r6], #4
 1024772:	f855 3b04 	ldr.w	r3, [r5], #4
 1024776:	6830      	ldr	r0, [r6, #0]
 1024778:	42af      	cmp	r7, r5
 102477a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 102477e:	b281      	uxth	r1, r0
 1024780:	fb04 1303 	mla	r3, r4, r3, r1
 1024784:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 1024788:	ea4f 4213 	mov.w	r2, r3, lsr #16
 102478c:	d8e7      	bhi.n	102475e <__multiply+0xd6>
 102478e:	45f3      	cmp	fp, lr
 1024790:	6033      	str	r3, [r6, #0]
 1024792:	f10a 0a04 	add.w	sl, sl, #4
 1024796:	d8b5      	bhi.n	1024704 <__multiply+0x7c>
 1024798:	f8dd 8004 	ldr.w	r8, [sp, #4]
 102479c:	f1b8 0f00 	cmp.w	r8, #0
 10247a0:	dd0b      	ble.n	10247ba <__multiply+0x132>
 10247a2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 10247a6:	f1a9 0904 	sub.w	r9, r9, #4
 10247aa:	b11b      	cbz	r3, 10247b4 <__multiply+0x12c>
 10247ac:	e005      	b.n	10247ba <__multiply+0x132>
 10247ae:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 10247b2:	b913      	cbnz	r3, 10247ba <__multiply+0x132>
 10247b4:	f1b8 0801 	subs.w	r8, r8, #1
 10247b8:	d1f9      	bne.n	10247ae <__multiply+0x126>
 10247ba:	9800      	ldr	r0, [sp, #0]
 10247bc:	f8c0 8010 	str.w	r8, [r0, #16]
 10247c0:	b003      	add	sp, #12
 10247c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10247c6:	bf00      	nop

010247c8 <__pow5mult>:
 10247c8:	f012 0303 	ands.w	r3, r2, #3
 10247cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10247d0:	4614      	mov	r4, r2
 10247d2:	4607      	mov	r7, r0
 10247d4:	bf08      	it	eq
 10247d6:	460d      	moveq	r5, r1
 10247d8:	d12d      	bne.n	1024836 <__pow5mult+0x6e>
 10247da:	10a4      	asrs	r4, r4, #2
 10247dc:	d01c      	beq.n	1024818 <__pow5mult+0x50>
 10247de:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 10247e0:	b3ae      	cbz	r6, 102484e <__pow5mult+0x86>
 10247e2:	07e3      	lsls	r3, r4, #31
 10247e4:	f04f 0800 	mov.w	r8, #0
 10247e8:	d406      	bmi.n	10247f8 <__pow5mult+0x30>
 10247ea:	1064      	asrs	r4, r4, #1
 10247ec:	d014      	beq.n	1024818 <__pow5mult+0x50>
 10247ee:	6830      	ldr	r0, [r6, #0]
 10247f0:	b1a8      	cbz	r0, 102481e <__pow5mult+0x56>
 10247f2:	4606      	mov	r6, r0
 10247f4:	07e3      	lsls	r3, r4, #31
 10247f6:	d5f8      	bpl.n	10247ea <__pow5mult+0x22>
 10247f8:	4632      	mov	r2, r6
 10247fa:	4629      	mov	r1, r5
 10247fc:	4638      	mov	r0, r7
 10247fe:	f7ff ff43 	bl	1024688 <__multiply>
 1024802:	b1b5      	cbz	r5, 1024832 <__pow5mult+0x6a>
 1024804:	686a      	ldr	r2, [r5, #4]
 1024806:	1064      	asrs	r4, r4, #1
 1024808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 102480a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 102480e:	6029      	str	r1, [r5, #0]
 1024810:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1024814:	4605      	mov	r5, r0
 1024816:	d1ea      	bne.n	10247ee <__pow5mult+0x26>
 1024818:	4628      	mov	r0, r5
 102481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102481e:	4632      	mov	r2, r6
 1024820:	4631      	mov	r1, r6
 1024822:	4638      	mov	r0, r7
 1024824:	f7ff ff30 	bl	1024688 <__multiply>
 1024828:	6030      	str	r0, [r6, #0]
 102482a:	4606      	mov	r6, r0
 102482c:	f8c0 8000 	str.w	r8, [r0]
 1024830:	e7e0      	b.n	10247f4 <__pow5mult+0x2c>
 1024832:	4605      	mov	r5, r0
 1024834:	e7d9      	b.n	10247ea <__pow5mult+0x22>
 1024836:	1e5a      	subs	r2, r3, #1
 1024838:	f647 7588 	movw	r5, #32648	; 0x7f88
 102483c:	f2c0 1506 	movt	r5, #262	; 0x106
 1024840:	2300      	movs	r3, #0
 1024842:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 1024846:	f7ff fe33 	bl	10244b0 <__multadd>
 102484a:	4605      	mov	r5, r0
 102484c:	e7c5      	b.n	10247da <__pow5mult+0x12>
 102484e:	2101      	movs	r1, #1
 1024850:	4638      	mov	r0, r7
 1024852:	f7ff fdfd 	bl	1024450 <_Balloc>
 1024856:	2301      	movs	r3, #1
 1024858:	f240 2271 	movw	r2, #625	; 0x271
 102485c:	4606      	mov	r6, r0
 102485e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 1024862:	2300      	movs	r3, #0
 1024864:	64b8      	str	r0, [r7, #72]	; 0x48
 1024866:	6003      	str	r3, [r0, #0]
 1024868:	e7bb      	b.n	10247e2 <__pow5mult+0x1a>
 102486a:	bf00      	nop

0102486c <__lshift>:
 102486c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1024870:	ea4f 1962 	mov.w	r9, r2, asr #5
 1024874:	690e      	ldr	r6, [r1, #16]
 1024876:	460d      	mov	r5, r1
 1024878:	688b      	ldr	r3, [r1, #8]
 102487a:	4690      	mov	r8, r2
 102487c:	444e      	add	r6, r9
 102487e:	4607      	mov	r7, r0
 1024880:	1c74      	adds	r4, r6, #1
 1024882:	6849      	ldr	r1, [r1, #4]
 1024884:	429c      	cmp	r4, r3
 1024886:	dd03      	ble.n	1024890 <__lshift+0x24>
 1024888:	005b      	lsls	r3, r3, #1
 102488a:	3101      	adds	r1, #1
 102488c:	429c      	cmp	r4, r3
 102488e:	dcfb      	bgt.n	1024888 <__lshift+0x1c>
 1024890:	4638      	mov	r0, r7
 1024892:	f7ff fddd 	bl	1024450 <_Balloc>
 1024896:	f1b9 0f00 	cmp.w	r9, #0
 102489a:	4684      	mov	ip, r0
 102489c:	f100 0014 	add.w	r0, r0, #20
 10248a0:	dd0e      	ble.n	10248c0 <__lshift+0x54>
 10248a2:	f109 0905 	add.w	r9, r9, #5
 10248a6:	4603      	mov	r3, r0
 10248a8:	2100      	movs	r1, #0
 10248aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
 10248ae:	eb0c 0209 	add.w	r2, ip, r9
 10248b2:	f843 1b04 	str.w	r1, [r3], #4
 10248b6:	4293      	cmp	r3, r2
 10248b8:	d1fb      	bne.n	10248b2 <__lshift+0x46>
 10248ba:	f1a9 0914 	sub.w	r9, r9, #20
 10248be:	4448      	add	r0, r9
 10248c0:	6929      	ldr	r1, [r5, #16]
 10248c2:	f018 081f 	ands.w	r8, r8, #31
 10248c6:	f105 0314 	add.w	r3, r5, #20
 10248ca:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 10248ce:	d022      	beq.n	1024916 <__lshift+0xaa>
 10248d0:	f1c8 0220 	rsb	r2, r8, #32
 10248d4:	f04f 0900 	mov.w	r9, #0
 10248d8:	6819      	ldr	r1, [r3, #0]
 10248da:	fa01 f108 	lsl.w	r1, r1, r8
 10248de:	ea41 0109 	orr.w	r1, r1, r9
 10248e2:	f840 1b04 	str.w	r1, [r0], #4
 10248e6:	f853 1b04 	ldr.w	r1, [r3], #4
 10248ea:	4573      	cmp	r3, lr
 10248ec:	fa21 f902 	lsr.w	r9, r1, r2
 10248f0:	d3f2      	bcc.n	10248d8 <__lshift+0x6c>
 10248f2:	f1b9 0f00 	cmp.w	r9, #0
 10248f6:	bf18      	it	ne
 10248f8:	4626      	movne	r6, r4
 10248fa:	f8c0 9000 	str.w	r9, [r0]
 10248fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1024900:	4660      	mov	r0, ip
 1024902:	686a      	ldr	r2, [r5, #4]
 1024904:	f8cc 6010 	str.w	r6, [ip, #16]
 1024908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 102490c:	6029      	str	r1, [r5, #0]
 102490e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1024912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1024916:	3804      	subs	r0, #4
 1024918:	f853 2b04 	ldr.w	r2, [r3], #4
 102491c:	459e      	cmp	lr, r3
 102491e:	f840 2f04 	str.w	r2, [r0, #4]!
 1024922:	d8f9      	bhi.n	1024918 <__lshift+0xac>
 1024924:	e7eb      	b.n	10248fe <__lshift+0x92>
 1024926:	bf00      	nop

01024928 <__mcmp>:
 1024928:	b430      	push	{r4, r5}
 102492a:	4605      	mov	r5, r0
 102492c:	690a      	ldr	r2, [r1, #16]
 102492e:	6900      	ldr	r0, [r0, #16]
 1024930:	1a80      	subs	r0, r0, r2
 1024932:	d110      	bne.n	1024956 <__mcmp+0x2e>
 1024934:	0092      	lsls	r2, r2, #2
 1024936:	3514      	adds	r5, #20
 1024938:	3114      	adds	r1, #20
 102493a:	18ab      	adds	r3, r5, r2
 102493c:	4411      	add	r1, r2
 102493e:	e001      	b.n	1024944 <__mcmp+0x1c>
 1024940:	429d      	cmp	r5, r3
 1024942:	d208      	bcs.n	1024956 <__mcmp+0x2e>
 1024944:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 1024948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 102494c:	4294      	cmp	r4, r2
 102494e:	d0f7      	beq.n	1024940 <__mcmp+0x18>
 1024950:	bf28      	it	cs
 1024952:	2001      	movcs	r0, #1
 1024954:	d301      	bcc.n	102495a <__mcmp+0x32>
 1024956:	bc30      	pop	{r4, r5}
 1024958:	4770      	bx	lr
 102495a:	f04f 30ff 	mov.w	r0, #4294967295
 102495e:	bc30      	pop	{r4, r5}
 1024960:	4770      	bx	lr
 1024962:	bf00      	nop

01024964 <__mdiff>:
 1024964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1024968:	460f      	mov	r7, r1
 102496a:	690d      	ldr	r5, [r1, #16]
 102496c:	4616      	mov	r6, r2
 102496e:	6911      	ldr	r1, [r2, #16]
 1024970:	4684      	mov	ip, r0
 1024972:	f107 0414 	add.w	r4, r7, #20
 1024976:	f102 0914 	add.w	r9, r2, #20
 102497a:	1a6d      	subs	r5, r5, r1
 102497c:	2d00      	cmp	r5, #0
 102497e:	d15f      	bne.n	1024a40 <__mdiff+0xdc>
 1024980:	0089      	lsls	r1, r1, #2
 1024982:	1863      	adds	r3, r4, r1
 1024984:	4449      	add	r1, r9
 1024986:	e001      	b.n	102498c <__mdiff+0x28>
 1024988:	42a3      	cmp	r3, r4
 102498a:	d964      	bls.n	1024a56 <__mdiff+0xf2>
 102498c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 1024990:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 1024994:	4290      	cmp	r0, r2
 1024996:	d0f7      	beq.n	1024988 <__mdiff+0x24>
 1024998:	d355      	bcc.n	1024a46 <__mdiff+0xe2>
 102499a:	4660      	mov	r0, ip
 102499c:	6879      	ldr	r1, [r7, #4]
 102499e:	f7ff fd57 	bl	1024450 <_Balloc>
 10249a2:	f8d7 8010 	ldr.w	r8, [r7, #16]
 10249a6:	6933      	ldr	r3, [r6, #16]
 10249a8:	46cc      	mov	ip, r9
 10249aa:	4627      	mov	r7, r4
 10249ac:	2200      	movs	r2, #0
 10249ae:	eb04 0e88 	add.w	lr, r4, r8, lsl #2
 10249b2:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 10249b6:	60c5      	str	r5, [r0, #12]
 10249b8:	f100 0514 	add.w	r5, r0, #20
 10249bc:	e000      	b.n	10249c0 <__mdiff+0x5c>
 10249be:	4625      	mov	r5, r4
 10249c0:	f857 ab04 	ldr.w	sl, [r7], #4
 10249c4:	462c      	mov	r4, r5
 10249c6:	f85c 1b04 	ldr.w	r1, [ip], #4
 10249ca:	fa12 f38a 	uxtah	r3, r2, sl
 10249ce:	45e1      	cmp	r9, ip
 10249d0:	fa1f fb81 	uxth.w	fp, r1
 10249d4:	ea4f 4211 	mov.w	r2, r1, lsr #16
 10249d8:	eba3 030b 	sub.w	r3, r3, fp
 10249dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 10249e0:	463e      	mov	r6, r7
 10249e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 10249e6:	b29b      	uxth	r3, r3
 10249e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 10249ec:	ea4f 4222 	mov.w	r2, r2, asr #16
 10249f0:	f844 3b04 	str.w	r3, [r4], #4
 10249f4:	d8e3      	bhi.n	10249be <__mdiff+0x5a>
 10249f6:	45be      	cmp	lr, r7
 10249f8:	d917      	bls.n	1024a2a <__mdiff+0xc6>
 10249fa:	4625      	mov	r5, r4
 10249fc:	f856 1b04 	ldr.w	r1, [r6], #4
 1024a00:	45b6      	cmp	lr, r6
 1024a02:	fa12 f381 	uxtah	r3, r2, r1
 1024a06:	ea4f 4223 	mov.w	r2, r3, asr #16
 1024a0a:	b29b      	uxth	r3, r3
 1024a0c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 1024a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1024a14:	ea4f 4222 	mov.w	r2, r2, asr #16
 1024a18:	f845 3b04 	str.w	r3, [r5], #4
 1024a1c:	d8ee      	bhi.n	10249fc <__mdiff+0x98>
 1024a1e:	f10e 35ff 	add.w	r5, lr, #4294967295
 1024a22:	1bed      	subs	r5, r5, r7
 1024a24:	f025 0503 	bic.w	r5, r5, #3
 1024a28:	4425      	add	r5, r4
 1024a2a:	b92b      	cbnz	r3, 1024a38 <__mdiff+0xd4>
 1024a2c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 1024a30:	f108 38ff 	add.w	r8, r8, #4294967295
 1024a34:	2b00      	cmp	r3, #0
 1024a36:	d0f9      	beq.n	1024a2c <__mdiff+0xc8>
 1024a38:	f8c0 8010 	str.w	r8, [r0, #16]
 1024a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1024a40:	bfa8      	it	ge
 1024a42:	2500      	movge	r5, #0
 1024a44:	daa9      	bge.n	102499a <__mdiff+0x36>
 1024a46:	4622      	mov	r2, r4
 1024a48:	463b      	mov	r3, r7
 1024a4a:	464c      	mov	r4, r9
 1024a4c:	4637      	mov	r7, r6
 1024a4e:	4691      	mov	r9, r2
 1024a50:	461e      	mov	r6, r3
 1024a52:	2501      	movs	r5, #1
 1024a54:	e7a1      	b.n	102499a <__mdiff+0x36>
 1024a56:	4660      	mov	r0, ip
 1024a58:	2100      	movs	r1, #0
 1024a5a:	f7ff fcf9 	bl	1024450 <_Balloc>
 1024a5e:	2201      	movs	r2, #1
 1024a60:	2300      	movs	r3, #0
 1024a62:	e9c0 2304 	strd	r2, r3, [r0, #16]
 1024a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1024a6a:	bf00      	nop

01024a6c <__ulp>:
 1024a6c:	ee10 2a90 	vmov	r2, s1
 1024a70:	2300      	movs	r3, #0
 1024a72:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 1024a76:	401a      	ands	r2, r3
 1024a78:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 1024a7c:	2b00      	cmp	r3, #0
 1024a7e:	dd04      	ble.n	1024a8a <__ulp+0x1e>
 1024a80:	2000      	movs	r0, #0
 1024a82:	4619      	mov	r1, r3
 1024a84:	ec41 0b10 	vmov	d0, r0, r1
 1024a88:	4770      	bx	lr
 1024a8a:	425b      	negs	r3, r3
 1024a8c:	151b      	asrs	r3, r3, #20
 1024a8e:	2b13      	cmp	r3, #19
 1024a90:	dc07      	bgt.n	1024aa2 <__ulp+0x36>
 1024a92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 1024a96:	2000      	movs	r0, #0
 1024a98:	fa42 f103 	asr.w	r1, r2, r3
 1024a9c:	ec41 0b10 	vmov	d0, r0, r1
 1024aa0:	4770      	bx	lr
 1024aa2:	3b14      	subs	r3, #20
 1024aa4:	2100      	movs	r1, #0
 1024aa6:	2b1e      	cmp	r3, #30
 1024aa8:	bfd6      	itet	le
 1024aaa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 1024aae:	2301      	movgt	r3, #1
 1024ab0:	fa22 f303 	lsrle.w	r3, r2, r3
 1024ab4:	4618      	mov	r0, r3
 1024ab6:	ec41 0b10 	vmov	d0, r0, r1
 1024aba:	4770      	bx	lr

01024abc <__b2d>:
 1024abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1024abe:	f100 0614 	add.w	r6, r0, #20
 1024ac2:	6904      	ldr	r4, [r0, #16]
 1024ac4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 1024ac8:	1f27      	subs	r7, r4, #4
 1024aca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 1024ace:	4628      	mov	r0, r5
 1024ad0:	f7ff fd82 	bl	10245d8 <__hi0bits>
 1024ad4:	280a      	cmp	r0, #10
 1024ad6:	f1c0 0320 	rsb	r3, r0, #32
 1024ada:	600b      	str	r3, [r1, #0]
 1024adc:	dd24      	ble.n	1024b28 <__b2d+0x6c>
 1024ade:	42be      	cmp	r6, r7
 1024ae0:	f1a0 000b 	sub.w	r0, r0, #11
 1024ae4:	d219      	bcs.n	1024b1a <__b2d+0x5e>
 1024ae6:	f854 1c08 	ldr.w	r1, [r4, #-8]
 1024aea:	b1c0      	cbz	r0, 1024b1e <__b2d+0x62>
 1024aec:	f1c0 0720 	rsb	r7, r0, #32
 1024af0:	4085      	lsls	r5, r0
 1024af2:	fa21 f307 	lsr.w	r3, r1, r7
 1024af6:	4081      	lsls	r1, r0
 1024af8:	431d      	orrs	r5, r3
 1024afa:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1024afe:	f1a4 0508 	sub.w	r5, r4, #8
 1024b02:	42ae      	cmp	r6, r5
 1024b04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1024b08:	d203      	bcs.n	1024b12 <__b2d+0x56>
 1024b0a:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 1024b0e:	40f8      	lsrs	r0, r7
 1024b10:	4301      	orrs	r1, r0
 1024b12:	460a      	mov	r2, r1
 1024b14:	ec43 2b10 	vmov	d0, r2, r3
 1024b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1024b1a:	4601      	mov	r1, r0
 1024b1c:	b9e8      	cbnz	r0, 1024b5a <__b2d+0x9e>
 1024b1e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1024b22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1024b26:	e7f4      	b.n	1024b12 <__b2d+0x56>
 1024b28:	f1c0 0c0b 	rsb	ip, r0, #11
 1024b2c:	42be      	cmp	r6, r7
 1024b2e:	fa25 f10c 	lsr.w	r1, r5, ip
 1024b32:	f100 0015 	add.w	r0, r0, #21
 1024b36:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1024b3a:	bf38      	it	cc
 1024b3c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 1024b40:	fa05 f000 	lsl.w	r0, r5, r0
 1024b44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1024b48:	bf2c      	ite	cs
 1024b4a:	2100      	movcs	r1, #0
 1024b4c:	fa21 f10c 	lsrcc.w	r1, r1, ip
 1024b50:	ea40 0201 	orr.w	r2, r0, r1
 1024b54:	ec43 2b10 	vmov	d0, r2, r3
 1024b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1024b5a:	fa05 f000 	lsl.w	r0, r5, r0
 1024b5e:	2100      	movs	r1, #0
 1024b60:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 1024b64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1024b68:	e7d3      	b.n	1024b12 <__b2d+0x56>
 1024b6a:	bf00      	nop

01024b6c <__d2b>:
 1024b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1024b70:	4688      	mov	r8, r1
 1024b72:	b083      	sub	sp, #12
 1024b74:	2101      	movs	r1, #1
 1024b76:	ec55 4b10 	vmov	r4, r5, d0
 1024b7a:	4617      	mov	r7, r2
 1024b7c:	f7ff fc68 	bl	1024450 <_Balloc>
 1024b80:	f3c5 560a 	ubfx	r6, r5, #20, #11
 1024b84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 1024b88:	4681      	mov	r9, r0
 1024b8a:	b10e      	cbz	r6, 1024b90 <__d2b+0x24>
 1024b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1024b90:	2c00      	cmp	r4, #0
 1024b92:	9301      	str	r3, [sp, #4]
 1024b94:	d029      	beq.n	1024bea <__d2b+0x7e>
 1024b96:	4668      	mov	r0, sp
 1024b98:	9400      	str	r4, [sp, #0]
 1024b9a:	f7ff fd3d 	bl	1024618 <__lo0bits>
 1024b9e:	b9c0      	cbnz	r0, 1024bd2 <__d2b+0x66>
 1024ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 1024ba4:	f8c9 2014 	str.w	r2, [r9, #20]
 1024ba8:	2b00      	cmp	r3, #0
 1024baa:	f8c9 3018 	str.w	r3, [r9, #24]
 1024bae:	bf14      	ite	ne
 1024bb0:	2102      	movne	r1, #2
 1024bb2:	2101      	moveq	r1, #1
 1024bb4:	f8c9 1010 	str.w	r1, [r9, #16]
 1024bb8:	b30e      	cbz	r6, 1024bfe <__d2b+0x92>
 1024bba:	f2a6 4633 	subw	r6, r6, #1075	; 0x433
 1024bbe:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 1024bc2:	4406      	add	r6, r0
 1024bc4:	4648      	mov	r0, r9
 1024bc6:	f8c8 6000 	str.w	r6, [r8]
 1024bca:	603b      	str	r3, [r7, #0]
 1024bcc:	b003      	add	sp, #12
 1024bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1024bd2:	9b01      	ldr	r3, [sp, #4]
 1024bd4:	f1c0 0220 	rsb	r2, r0, #32
 1024bd8:	9900      	ldr	r1, [sp, #0]
 1024bda:	fa03 f202 	lsl.w	r2, r3, r2
 1024bde:	40c3      	lsrs	r3, r0
 1024be0:	430a      	orrs	r2, r1
 1024be2:	9301      	str	r3, [sp, #4]
 1024be4:	f8c9 2014 	str.w	r2, [r9, #20]
 1024be8:	e7de      	b.n	1024ba8 <__d2b+0x3c>
 1024bea:	a801      	add	r0, sp, #4
 1024bec:	f7ff fd14 	bl	1024618 <__lo0bits>
 1024bf0:	9b01      	ldr	r3, [sp, #4]
 1024bf2:	2101      	movs	r1, #1
 1024bf4:	e9c9 1304 	strd	r1, r3, [r9, #16]
 1024bf8:	3020      	adds	r0, #32
 1024bfa:	2e00      	cmp	r6, #0
 1024bfc:	d1dd      	bne.n	1024bba <__d2b+0x4e>
 1024bfe:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 1024c02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 1024c06:	f8c8 0000 	str.w	r0, [r8]
 1024c0a:	6918      	ldr	r0, [r3, #16]
 1024c0c:	f7ff fce4 	bl	10245d8 <__hi0bits>
 1024c10:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 1024c14:	6038      	str	r0, [r7, #0]
 1024c16:	4648      	mov	r0, r9
 1024c18:	b003      	add	sp, #12
 1024c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1024c1e:	bf00      	nop

01024c20 <__ratio>:
 1024c20:	b530      	push	{r4, r5, lr}
 1024c22:	b087      	sub	sp, #28
 1024c24:	460c      	mov	r4, r1
 1024c26:	a904      	add	r1, sp, #16
 1024c28:	4605      	mov	r5, r0
 1024c2a:	f7ff ff47 	bl	1024abc <__b2d>
 1024c2e:	4620      	mov	r0, r4
 1024c30:	a905      	add	r1, sp, #20
 1024c32:	ed8d 0b00 	vstr	d0, [sp]
 1024c36:	f7ff ff41 	bl	1024abc <__b2d>
 1024c3a:	6920      	ldr	r0, [r4, #16]
 1024c3c:	6929      	ldr	r1, [r5, #16]
 1024c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 1024c42:	1a09      	subs	r1, r1, r0
 1024c44:	1ad3      	subs	r3, r2, r3
 1024c46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 1024c4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 1024c4e:	2b00      	cmp	r3, #0
 1024c50:	ed8d 0b02 	vstr	d0, [sp, #8]
 1024c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 1024c58:	dd0c      	ble.n	1024c74 <__ratio+0x54>
 1024c5a:	9a01      	ldr	r2, [sp, #4]
 1024c5c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 1024c60:	e9cd 0100 	strd	r0, r1, [sp]
 1024c64:	ed9d 7b00 	vldr	d7, [sp]
 1024c68:	ed9d 6b02 	vldr	d6, [sp, #8]
 1024c6c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 1024c70:	b007      	add	sp, #28
 1024c72:	bd30      	pop	{r4, r5, pc}
 1024c74:	9a03      	ldr	r2, [sp, #12]
 1024c76:	eba2 5503 	sub.w	r5, r2, r3, lsl #20
 1024c7a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 1024c7e:	e7f1      	b.n	1024c64 <__ratio+0x44>

01024c80 <_mprec_log10>:
 1024c80:	2817      	cmp	r0, #23
 1024c82:	dd08      	ble.n	1024c96 <_mprec_log10+0x16>
 1024c84:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 1024c88:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 1024c8c:	3801      	subs	r0, #1
 1024c8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 1024c92:	d1fb      	bne.n	1024c8c <_mprec_log10+0xc>
 1024c94:	4770      	bx	lr
 1024c96:	f647 7388 	movw	r3, #32648	; 0x7f88
 1024c9a:	f2c0 1306 	movt	r3, #262	; 0x106
 1024c9e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 1024ca2:	ed90 0b04 	vldr	d0, [r0, #16]
 1024ca6:	4770      	bx	lr

01024ca8 <__copybits>:
 1024ca8:	b470      	push	{r4, r5, r6}
 1024caa:	3901      	subs	r1, #1
 1024cac:	6914      	ldr	r4, [r2, #16]
 1024cae:	f102 0314 	add.w	r3, r2, #20
 1024cb2:	1149      	asrs	r1, r1, #5
 1024cb4:	1c4e      	adds	r6, r1, #1
 1024cb6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 1024cba:	428b      	cmp	r3, r1
 1024cbc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 1024cc0:	d20c      	bcs.n	1024cdc <__copybits+0x34>
 1024cc2:	1f04      	subs	r4, r0, #4
 1024cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 1024cc8:	4299      	cmp	r1, r3
 1024cca:	f844 5f04 	str.w	r5, [r4, #4]!
 1024cce:	d8f9      	bhi.n	1024cc4 <__copybits+0x1c>
 1024cd0:	1a8b      	subs	r3, r1, r2
 1024cd2:	3b15      	subs	r3, #21
 1024cd4:	f023 0303 	bic.w	r3, r3, #3
 1024cd8:	3304      	adds	r3, #4
 1024cda:	4418      	add	r0, r3
 1024cdc:	4286      	cmp	r6, r0
 1024cde:	d904      	bls.n	1024cea <__copybits+0x42>
 1024ce0:	2300      	movs	r3, #0
 1024ce2:	f840 3b04 	str.w	r3, [r0], #4
 1024ce6:	4286      	cmp	r6, r0
 1024ce8:	d8fb      	bhi.n	1024ce2 <__copybits+0x3a>
 1024cea:	bc70      	pop	{r4, r5, r6}
 1024cec:	4770      	bx	lr
 1024cee:	bf00      	nop

01024cf0 <__any_on>:
 1024cf0:	6903      	ldr	r3, [r0, #16]
 1024cf2:	114a      	asrs	r2, r1, #5
 1024cf4:	b410      	push	{r4}
 1024cf6:	4293      	cmp	r3, r2
 1024cf8:	f100 0414 	add.w	r4, r0, #20
 1024cfc:	bfb8      	it	lt
 1024cfe:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 1024d02:	db02      	blt.n	1024d0a <__any_on+0x1a>
 1024d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 1024d08:	dc0e      	bgt.n	1024d28 <__any_on+0x38>
 1024d0a:	429c      	cmp	r4, r3
 1024d0c:	d21b      	bcs.n	1024d46 <__any_on+0x56>
 1024d0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 1024d12:	3b04      	subs	r3, #4
 1024d14:	b118      	cbz	r0, 1024d1e <__any_on+0x2e>
 1024d16:	e012      	b.n	1024d3e <__any_on+0x4e>
 1024d18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 1024d1c:	b97a      	cbnz	r2, 1024d3e <__any_on+0x4e>
 1024d1e:	429c      	cmp	r4, r3
 1024d20:	d3fa      	bcc.n	1024d18 <__any_on+0x28>
 1024d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 1024d26:	4770      	bx	lr
 1024d28:	f011 011f 	ands.w	r1, r1, #31
 1024d2c:	d0ed      	beq.n	1024d0a <__any_on+0x1a>
 1024d2e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 1024d32:	fa20 f201 	lsr.w	r2, r0, r1
 1024d36:	fa02 f101 	lsl.w	r1, r2, r1
 1024d3a:	4288      	cmp	r0, r1
 1024d3c:	d0e5      	beq.n	1024d0a <__any_on+0x1a>
 1024d3e:	2001      	movs	r0, #1
 1024d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 1024d44:	4770      	bx	lr
 1024d46:	2000      	movs	r0, #0
 1024d48:	e7eb      	b.n	1024d22 <__any_on+0x32>
 1024d4a:	bf00      	nop

01024d4c <_realloc_r>:
 1024d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1024d50:	4692      	mov	sl, r2
 1024d52:	b083      	sub	sp, #12
 1024d54:	2900      	cmp	r1, #0
 1024d56:	f000 80df 	beq.w	1024f18 <_realloc_r+0x1cc>
 1024d5a:	460d      	mov	r5, r1
 1024d5c:	4680      	mov	r8, r0
 1024d5e:	f7f8 fdf7 	bl	101d950 <__malloc_lock>
 1024d62:	f10a 040b 	add.w	r4, sl, #11
 1024d66:	2c16      	cmp	r4, #22
 1024d68:	f855 1c04 	ldr.w	r1, [r5, #-4]
 1024d6c:	bf88      	it	hi
 1024d6e:	f024 0407 	bichi.w	r4, r4, #7
 1024d72:	f1a5 0708 	sub.w	r7, r5, #8
 1024d76:	bf99      	ittee	ls
 1024d78:	2210      	movls	r2, #16
 1024d7a:	2300      	movls	r3, #0
 1024d7c:	0fe3      	lsrhi	r3, r4, #31
 1024d7e:	4622      	movhi	r2, r4
 1024d80:	f021 0603 	bic.w	r6, r1, #3
 1024d84:	bf98      	it	ls
 1024d86:	4614      	movls	r4, r2
 1024d88:	4554      	cmp	r4, sl
 1024d8a:	bf38      	it	cc
 1024d8c:	f043 0301 	orrcc.w	r3, r3, #1
 1024d90:	2b00      	cmp	r3, #0
 1024d92:	f040 80c7 	bne.w	1024f24 <_realloc_r+0x1d8>
 1024d96:	4296      	cmp	r6, r2
 1024d98:	eb07 0906 	add.w	r9, r7, r6
 1024d9c:	f280 808b 	bge.w	1024eb6 <_realloc_r+0x16a>
 1024da0:	f64c 4b74 	movw	fp, #52340	; 0xcc74
 1024da4:	f2c0 1b06 	movt	fp, #262	; 0x106
 1024da8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 1024dac:	f8db 3008 	ldr.w	r3, [fp, #8]
 1024db0:	454b      	cmp	r3, r9
 1024db2:	f000 80c0 	beq.w	1024f36 <_realloc_r+0x1ea>
 1024db6:	f020 0301 	bic.w	r3, r0, #1
 1024dba:	444b      	add	r3, r9
 1024dbc:	685b      	ldr	r3, [r3, #4]
 1024dbe:	07db      	lsls	r3, r3, #31
 1024dc0:	f100 80a0 	bmi.w	1024f04 <_realloc_r+0x1b8>
 1024dc4:	f020 0003 	bic.w	r0, r0, #3
 1024dc8:	1833      	adds	r3, r6, r0
 1024dca:	4293      	cmp	r3, r2
 1024dcc:	f280 810c 	bge.w	1024fe8 <_realloc_r+0x29c>
 1024dd0:	07c9      	lsls	r1, r1, #31
 1024dd2:	d40f      	bmi.n	1024df4 <_realloc_r+0xa8>
 1024dd4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1024dd8:	1afb      	subs	r3, r7, r3
 1024dda:	6859      	ldr	r1, [r3, #4]
 1024ddc:	f021 0103 	bic.w	r1, r1, #3
 1024de0:	4408      	add	r0, r1
 1024de2:	eb00 0c06 	add.w	ip, r0, r6
 1024de6:	4594      	cmp	ip, r2
 1024de8:	f280 811f 	bge.w	102502a <_realloc_r+0x2de>
 1024dec:	eb06 0c01 	add.w	ip, r6, r1
 1024df0:	4594      	cmp	ip, r2
 1024df2:	da2a      	bge.n	1024e4a <_realloc_r+0xfe>
 1024df4:	4651      	mov	r1, sl
 1024df6:	4640      	mov	r0, r8
 1024df8:	f7f7 fcee 	bl	101c7d8 <_malloc_r>
 1024dfc:	4682      	mov	sl, r0
 1024dfe:	b1e8      	cbz	r0, 1024e3c <_realloc_r+0xf0>
 1024e00:	f855 3c04 	ldr.w	r3, [r5, #-4]
 1024e04:	f1a0 0208 	sub.w	r2, r0, #8
 1024e08:	f023 0301 	bic.w	r3, r3, #1
 1024e0c:	443b      	add	r3, r7
 1024e0e:	4293      	cmp	r3, r2
 1024e10:	f000 80f4 	beq.w	1024ffc <_realloc_r+0x2b0>
 1024e14:	1f32      	subs	r2, r6, #4
 1024e16:	2a24      	cmp	r2, #36	; 0x24
 1024e18:	f200 8103 	bhi.w	1025022 <_realloc_r+0x2d6>
 1024e1c:	2a13      	cmp	r2, #19
 1024e1e:	6829      	ldr	r1, [r5, #0]
 1024e20:	bf9c      	itt	ls
 1024e22:	4603      	movls	r3, r0
 1024e24:	462a      	movls	r2, r5
 1024e26:	f200 80f1 	bhi.w	102500c <_realloc_r+0x2c0>
 1024e2a:	6019      	str	r1, [r3, #0]
 1024e2c:	6851      	ldr	r1, [r2, #4]
 1024e2e:	6059      	str	r1, [r3, #4]
 1024e30:	6892      	ldr	r2, [r2, #8]
 1024e32:	609a      	str	r2, [r3, #8]
 1024e34:	4629      	mov	r1, r5
 1024e36:	4640      	mov	r0, r8
 1024e38:	f7fe fe48 	bl	1023acc <_free_r>
 1024e3c:	4640      	mov	r0, r8
 1024e3e:	f7f8 fd89 	bl	101d954 <__malloc_unlock>
 1024e42:	4650      	mov	r0, sl
 1024e44:	b003      	add	sp, #12
 1024e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1024e4a:	469a      	mov	sl, r3
 1024e4c:	68d9      	ldr	r1, [r3, #12]
 1024e4e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1024e52:	1f32      	subs	r2, r6, #4
 1024e54:	2a24      	cmp	r2, #36	; 0x24
 1024e56:	eb03 090c 	add.w	r9, r3, ip
 1024e5a:	60c1      	str	r1, [r0, #12]
 1024e5c:	6088      	str	r0, [r1, #8]
 1024e5e:	f200 80f6 	bhi.w	102504e <_realloc_r+0x302>
 1024e62:	2a13      	cmp	r2, #19
 1024e64:	6829      	ldr	r1, [r5, #0]
 1024e66:	bf98      	it	ls
 1024e68:	4652      	movls	r2, sl
 1024e6a:	d91c      	bls.n	1024ea6 <_realloc_r+0x15a>
 1024e6c:	6099      	str	r1, [r3, #8]
 1024e6e:	2a1b      	cmp	r2, #27
 1024e70:	6869      	ldr	r1, [r5, #4]
 1024e72:	bf98      	it	ls
 1024e74:	f103 0210 	addls.w	r2, r3, #16
 1024e78:	60d9      	str	r1, [r3, #12]
 1024e7a:	68a9      	ldr	r1, [r5, #8]
 1024e7c:	bf98      	it	ls
 1024e7e:	3508      	addls	r5, #8
 1024e80:	d911      	bls.n	1024ea6 <_realloc_r+0x15a>
 1024e82:	6119      	str	r1, [r3, #16]
 1024e84:	2a24      	cmp	r2, #36	; 0x24
 1024e86:	68e9      	ldr	r1, [r5, #12]
 1024e88:	bf14      	ite	ne
 1024e8a:	f103 0218 	addne.w	r2, r3, #24
 1024e8e:	f103 0220 	addeq.w	r2, r3, #32
 1024e92:	6159      	str	r1, [r3, #20]
 1024e94:	6929      	ldr	r1, [r5, #16]
 1024e96:	bf11      	iteee	ne
 1024e98:	3510      	addne	r5, #16
 1024e9a:	6199      	streq	r1, [r3, #24]
 1024e9c:	6969      	ldreq	r1, [r5, #20]
 1024e9e:	61d9      	streq	r1, [r3, #28]
 1024ea0:	bf04      	itt	eq
 1024ea2:	69a9      	ldreq	r1, [r5, #24]
 1024ea4:	3518      	addeq	r5, #24
 1024ea6:	6011      	str	r1, [r2, #0]
 1024ea8:	461f      	mov	r7, r3
 1024eaa:	6869      	ldr	r1, [r5, #4]
 1024eac:	4666      	mov	r6, ip
 1024eae:	6051      	str	r1, [r2, #4]
 1024eb0:	68ab      	ldr	r3, [r5, #8]
 1024eb2:	4655      	mov	r5, sl
 1024eb4:	6093      	str	r3, [r2, #8]
 1024eb6:	1b32      	subs	r2, r6, r4
 1024eb8:	687b      	ldr	r3, [r7, #4]
 1024eba:	2a0f      	cmp	r2, #15
 1024ebc:	f003 0301 	and.w	r3, r3, #1
 1024ec0:	d80f      	bhi.n	1024ee2 <_realloc_r+0x196>
 1024ec2:	4333      	orrs	r3, r6
 1024ec4:	607b      	str	r3, [r7, #4]
 1024ec6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1024eca:	f043 0301 	orr.w	r3, r3, #1
 1024ece:	f8c9 3004 	str.w	r3, [r9, #4]
 1024ed2:	4640      	mov	r0, r8
 1024ed4:	46aa      	mov	sl, r5
 1024ed6:	f7f8 fd3d 	bl	101d954 <__malloc_unlock>
 1024eda:	4650      	mov	r0, sl
 1024edc:	b003      	add	sp, #12
 1024ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1024ee2:	1939      	adds	r1, r7, r4
 1024ee4:	4323      	orrs	r3, r4
 1024ee6:	f042 0201 	orr.w	r2, r2, #1
 1024eea:	607b      	str	r3, [r7, #4]
 1024eec:	604a      	str	r2, [r1, #4]
 1024eee:	4640      	mov	r0, r8
 1024ef0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1024ef4:	3108      	adds	r1, #8
 1024ef6:	f043 0301 	orr.w	r3, r3, #1
 1024efa:	f8c9 3004 	str.w	r3, [r9, #4]
 1024efe:	f7fe fde5 	bl	1023acc <_free_r>
 1024f02:	e7e6      	b.n	1024ed2 <_realloc_r+0x186>
 1024f04:	07c8      	lsls	r0, r1, #31
 1024f06:	f53f af75 	bmi.w	1024df4 <_realloc_r+0xa8>
 1024f0a:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1024f0e:	1afb      	subs	r3, r7, r3
 1024f10:	6859      	ldr	r1, [r3, #4]
 1024f12:	f021 0103 	bic.w	r1, r1, #3
 1024f16:	e769      	b.n	1024dec <_realloc_r+0xa0>
 1024f18:	4611      	mov	r1, r2
 1024f1a:	b003      	add	sp, #12
 1024f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1024f20:	f7f7 bc5a 	b.w	101c7d8 <_malloc_r>
 1024f24:	f04f 0a00 	mov.w	sl, #0
 1024f28:	230c      	movs	r3, #12
 1024f2a:	4650      	mov	r0, sl
 1024f2c:	f8c8 3000 	str.w	r3, [r8]
 1024f30:	b003      	add	sp, #12
 1024f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1024f36:	f020 0003 	bic.w	r0, r0, #3
 1024f3a:	f104 0c10 	add.w	ip, r4, #16
 1024f3e:	1833      	adds	r3, r6, r0
 1024f40:	4563      	cmp	r3, ip
 1024f42:	f280 8098 	bge.w	1025076 <_realloc_r+0x32a>
 1024f46:	07cb      	lsls	r3, r1, #31
 1024f48:	f53f af54 	bmi.w	1024df4 <_realloc_r+0xa8>
 1024f4c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1024f50:	1afb      	subs	r3, r7, r3
 1024f52:	6859      	ldr	r1, [r3, #4]
 1024f54:	f021 0103 	bic.w	r1, r1, #3
 1024f58:	4408      	add	r0, r1
 1024f5a:	eb00 0906 	add.w	r9, r0, r6
 1024f5e:	45cc      	cmp	ip, r9
 1024f60:	f73f af44 	bgt.w	1024dec <_realloc_r+0xa0>
 1024f64:	469a      	mov	sl, r3
 1024f66:	68d9      	ldr	r1, [r3, #12]
 1024f68:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1024f6c:	1f32      	subs	r2, r6, #4
 1024f6e:	2a24      	cmp	r2, #36	; 0x24
 1024f70:	60c1      	str	r1, [r0, #12]
 1024f72:	6088      	str	r0, [r1, #8]
 1024f74:	f200 809c 	bhi.w	10250b0 <_realloc_r+0x364>
 1024f78:	2a13      	cmp	r2, #19
 1024f7a:	6829      	ldr	r1, [r5, #0]
 1024f7c:	bf98      	it	ls
 1024f7e:	4652      	movls	r2, sl
 1024f80:	d91c      	bls.n	1024fbc <_realloc_r+0x270>
 1024f82:	6099      	str	r1, [r3, #8]
 1024f84:	2a1b      	cmp	r2, #27
 1024f86:	6869      	ldr	r1, [r5, #4]
 1024f88:	bf98      	it	ls
 1024f8a:	f103 0210 	addls.w	r2, r3, #16
 1024f8e:	60d9      	str	r1, [r3, #12]
 1024f90:	68a9      	ldr	r1, [r5, #8]
 1024f92:	bf98      	it	ls
 1024f94:	3508      	addls	r5, #8
 1024f96:	d911      	bls.n	1024fbc <_realloc_r+0x270>
 1024f98:	6119      	str	r1, [r3, #16]
 1024f9a:	2a24      	cmp	r2, #36	; 0x24
 1024f9c:	68e9      	ldr	r1, [r5, #12]
 1024f9e:	bf14      	ite	ne
 1024fa0:	f103 0218 	addne.w	r2, r3, #24
 1024fa4:	f103 0220 	addeq.w	r2, r3, #32
 1024fa8:	6159      	str	r1, [r3, #20]
 1024faa:	6929      	ldr	r1, [r5, #16]
 1024fac:	bf11      	iteee	ne
 1024fae:	3510      	addne	r5, #16
 1024fb0:	6199      	streq	r1, [r3, #24]
 1024fb2:	6969      	ldreq	r1, [r5, #20]
 1024fb4:	61d9      	streq	r1, [r3, #28]
 1024fb6:	bf04      	itt	eq
 1024fb8:	69a9      	ldreq	r1, [r5, #24]
 1024fba:	3518      	addeq	r5, #24
 1024fbc:	6011      	str	r1, [r2, #0]
 1024fbe:	6869      	ldr	r1, [r5, #4]
 1024fc0:	6051      	str	r1, [r2, #4]
 1024fc2:	68a9      	ldr	r1, [r5, #8]
 1024fc4:	6091      	str	r1, [r2, #8]
 1024fc6:	1919      	adds	r1, r3, r4
 1024fc8:	eba9 0204 	sub.w	r2, r9, r4
 1024fcc:	f8cb 1008 	str.w	r1, [fp, #8]
 1024fd0:	f042 0201 	orr.w	r2, r2, #1
 1024fd4:	604a      	str	r2, [r1, #4]
 1024fd6:	4640      	mov	r0, r8
 1024fd8:	685a      	ldr	r2, [r3, #4]
 1024fda:	f002 0201 	and.w	r2, r2, #1
 1024fde:	4314      	orrs	r4, r2
 1024fe0:	605c      	str	r4, [r3, #4]
 1024fe2:	f7f8 fcb7 	bl	101d954 <__malloc_unlock>
 1024fe6:	e778      	b.n	1024eda <_realloc_r+0x18e>
 1024fe8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 1024fec:	461e      	mov	r6, r3
 1024fee:	f8d9 1008 	ldr.w	r1, [r9, #8]
 1024ff2:	eb07 0903 	add.w	r9, r7, r3
 1024ff6:	60ca      	str	r2, [r1, #12]
 1024ff8:	6091      	str	r1, [r2, #8]
 1024ffa:	e75c      	b.n	1024eb6 <_realloc_r+0x16a>
 1024ffc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 1025000:	f023 0303 	bic.w	r3, r3, #3
 1025004:	441e      	add	r6, r3
 1025006:	eb07 0906 	add.w	r9, r7, r6
 102500a:	e754      	b.n	1024eb6 <_realloc_r+0x16a>
 102500c:	6001      	str	r1, [r0, #0]
 102500e:	2a1b      	cmp	r2, #27
 1025010:	686b      	ldr	r3, [r5, #4]
 1025012:	6043      	str	r3, [r0, #4]
 1025014:	d823      	bhi.n	102505e <_realloc_r+0x312>
 1025016:	f105 0208 	add.w	r2, r5, #8
 102501a:	f100 0308 	add.w	r3, r0, #8
 102501e:	68a9      	ldr	r1, [r5, #8]
 1025020:	e703      	b.n	1024e2a <_realloc_r+0xde>
 1025022:	4629      	mov	r1, r5
 1025024:	f7f8 fbdc 	bl	101d7e0 <memmove>
 1025028:	e704      	b.n	1024e34 <_realloc_r+0xe8>
 102502a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 102502e:	469a      	mov	sl, r3
 1025030:	f8d9 0008 	ldr.w	r0, [r9, #8]
 1025034:	1f32      	subs	r2, r6, #4
 1025036:	2a24      	cmp	r2, #36	; 0x24
 1025038:	eb03 090c 	add.w	r9, r3, ip
 102503c:	60c1      	str	r1, [r0, #12]
 102503e:	6088      	str	r0, [r1, #8]
 1025040:	68d9      	ldr	r1, [r3, #12]
 1025042:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1025046:	60c1      	str	r1, [r0, #12]
 1025048:	6088      	str	r0, [r1, #8]
 102504a:	f67f af0a 	bls.w	1024e62 <_realloc_r+0x116>
 102504e:	4629      	mov	r1, r5
 1025050:	4650      	mov	r0, sl
 1025052:	4666      	mov	r6, ip
 1025054:	461f      	mov	r7, r3
 1025056:	4655      	mov	r5, sl
 1025058:	f7f8 fbc2 	bl	101d7e0 <memmove>
 102505c:	e72b      	b.n	1024eb6 <_realloc_r+0x16a>
 102505e:	68ab      	ldr	r3, [r5, #8]
 1025060:	2a24      	cmp	r2, #36	; 0x24
 1025062:	6083      	str	r3, [r0, #8]
 1025064:	68eb      	ldr	r3, [r5, #12]
 1025066:	60c3      	str	r3, [r0, #12]
 1025068:	d018      	beq.n	102509c <_realloc_r+0x350>
 102506a:	f105 0210 	add.w	r2, r5, #16
 102506e:	f100 0310 	add.w	r3, r0, #16
 1025072:	6929      	ldr	r1, [r5, #16]
 1025074:	e6d9      	b.n	1024e2a <_realloc_r+0xde>
 1025076:	4427      	add	r7, r4
 1025078:	1b1b      	subs	r3, r3, r4
 102507a:	f8cb 7008 	str.w	r7, [fp, #8]
 102507e:	f043 0301 	orr.w	r3, r3, #1
 1025082:	607b      	str	r3, [r7, #4]
 1025084:	4640      	mov	r0, r8
 1025086:	f855 3c04 	ldr.w	r3, [r5, #-4]
 102508a:	46aa      	mov	sl, r5
 102508c:	f003 0301 	and.w	r3, r3, #1
 1025090:	431c      	orrs	r4, r3
 1025092:	f845 4c04 	str.w	r4, [r5, #-4]
 1025096:	f7f8 fc5d 	bl	101d954 <__malloc_unlock>
 102509a:	e71e      	b.n	1024eda <_realloc_r+0x18e>
 102509c:	6929      	ldr	r1, [r5, #16]
 102509e:	f105 0218 	add.w	r2, r5, #24
 10250a2:	f100 0318 	add.w	r3, r0, #24
 10250a6:	6101      	str	r1, [r0, #16]
 10250a8:	6969      	ldr	r1, [r5, #20]
 10250aa:	6141      	str	r1, [r0, #20]
 10250ac:	69a9      	ldr	r1, [r5, #24]
 10250ae:	e6bc      	b.n	1024e2a <_realloc_r+0xde>
 10250b0:	4629      	mov	r1, r5
 10250b2:	4650      	mov	r0, sl
 10250b4:	9301      	str	r3, [sp, #4]
 10250b6:	f7f8 fb93 	bl	101d7e0 <memmove>
 10250ba:	9b01      	ldr	r3, [sp, #4]
 10250bc:	e783      	b.n	1024fc6 <_realloc_r+0x27a>
 10250be:	bf00      	nop

010250c0 <cleanup_glue>:
 10250c0:	b538      	push	{r3, r4, r5, lr}
 10250c2:	460c      	mov	r4, r1
 10250c4:	6809      	ldr	r1, [r1, #0]
 10250c6:	4605      	mov	r5, r0
 10250c8:	b109      	cbz	r1, 10250ce <cleanup_glue+0xe>
 10250ca:	f7ff fff9 	bl	10250c0 <cleanup_glue>
 10250ce:	4621      	mov	r1, r4
 10250d0:	4628      	mov	r0, r5
 10250d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 10250d6:	f7fe bcf9 	b.w	1023acc <_free_r>
 10250da:	bf00      	nop

010250dc <_reclaim_reent>:
 10250dc:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10250e0:	f2c0 1306 	movt	r3, #262	; 0x106
 10250e4:	681b      	ldr	r3, [r3, #0]
 10250e6:	4283      	cmp	r3, r0
 10250e8:	d03b      	beq.n	1025162 <_reclaim_reent+0x86>
 10250ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 10250ec:	b570      	push	{r4, r5, r6, lr}
 10250ee:	4605      	mov	r5, r0
 10250f0:	b18b      	cbz	r3, 1025116 <_reclaim_reent+0x3a>
 10250f2:	2600      	movs	r6, #0
 10250f4:	5999      	ldr	r1, [r3, r6]
 10250f6:	b139      	cbz	r1, 1025108 <_reclaim_reent+0x2c>
 10250f8:	680c      	ldr	r4, [r1, #0]
 10250fa:	4628      	mov	r0, r5
 10250fc:	f7fe fce6 	bl	1023acc <_free_r>
 1025100:	4621      	mov	r1, r4
 1025102:	2c00      	cmp	r4, #0
 1025104:	d1f8      	bne.n	10250f8 <_reclaim_reent+0x1c>
 1025106:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 1025108:	3604      	adds	r6, #4
 102510a:	2e80      	cmp	r6, #128	; 0x80
 102510c:	d1f2      	bne.n	10250f4 <_reclaim_reent+0x18>
 102510e:	4619      	mov	r1, r3
 1025110:	4628      	mov	r0, r5
 1025112:	f7fe fcdb 	bl	1023acc <_free_r>
 1025116:	6c29      	ldr	r1, [r5, #64]	; 0x40
 1025118:	b111      	cbz	r1, 1025120 <_reclaim_reent+0x44>
 102511a:	4628      	mov	r0, r5
 102511c:	f7fe fcd6 	bl	1023acc <_free_r>
 1025120:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 1025124:	b151      	cbz	r1, 102513c <_reclaim_reent+0x60>
 1025126:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 102512a:	42b1      	cmp	r1, r6
 102512c:	d006      	beq.n	102513c <_reclaim_reent+0x60>
 102512e:	680c      	ldr	r4, [r1, #0]
 1025130:	4628      	mov	r0, r5
 1025132:	f7fe fccb 	bl	1023acc <_free_r>
 1025136:	42a6      	cmp	r6, r4
 1025138:	4621      	mov	r1, r4
 102513a:	d1f8      	bne.n	102512e <_reclaim_reent+0x52>
 102513c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 102513e:	b111      	cbz	r1, 1025146 <_reclaim_reent+0x6a>
 1025140:	4628      	mov	r0, r5
 1025142:	f7fe fcc3 	bl	1023acc <_free_r>
 1025146:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1025148:	b153      	cbz	r3, 1025160 <_reclaim_reent+0x84>
 102514a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 102514c:	4628      	mov	r0, r5
 102514e:	4798      	blx	r3
 1025150:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 1025154:	b121      	cbz	r1, 1025160 <_reclaim_reent+0x84>
 1025156:	4628      	mov	r0, r5
 1025158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 102515c:	f7ff bfb0 	b.w	10250c0 <cleanup_glue>
 1025160:	bd70      	pop	{r4, r5, r6, pc}
 1025162:	4770      	bx	lr
 1025164:	0000      	movs	r0, r0
	...

01025168 <frexp>:
 1025168:	b430      	push	{r4, r5}
 102516a:	b082      	sub	sp, #8
 102516c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 1025170:	f6c7 74ef 	movt	r4, #32751	; 0x7fef
 1025174:	ed8d 0b00 	vstr	d0, [sp]
 1025178:	2500      	movs	r5, #0
 102517a:	9b01      	ldr	r3, [sp, #4]
 102517c:	6005      	str	r5, [r0, #0]
 102517e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 1025182:	42a1      	cmp	r1, r4
 1025184:	dc24      	bgt.n	10251d0 <frexp+0x68>
 1025186:	9c00      	ldr	r4, [sp, #0]
 1025188:	ea51 0204 	orrs.w	r2, r1, r4
 102518c:	d020      	beq.n	10251d0 <frexp+0x68>
 102518e:	462c      	mov	r4, r5
 1025190:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 1025194:	401c      	ands	r4, r3
 1025196:	b954      	cbnz	r4, 10251ae <frexp+0x46>
 1025198:	ed9f 7b11 	vldr	d7, [pc, #68]	; 10251e0 <frexp+0x78>
 102519c:	f06f 0535 	mvn.w	r5, #53	; 0x35
 10251a0:	ee20 7b07 	vmul.f64	d7, d0, d7
 10251a4:	ed8d 7b00 	vstr	d7, [sp]
 10251a8:	9b01      	ldr	r3, [sp, #4]
 10251aa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10251ae:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
 10251b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 10251b6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 10251ba:	1509      	asrs	r1, r1, #20
 10251bc:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 10251c0:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 10251c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 10251c8:	4429      	add	r1, r5
 10251ca:	e9cd 2300 	strd	r2, r3, [sp]
 10251ce:	6001      	str	r1, [r0, #0]
 10251d0:	ed9d 0b00 	vldr	d0, [sp]
 10251d4:	b002      	add	sp, #8
 10251d6:	bc30      	pop	{r4, r5}
 10251d8:	4770      	bx	lr
 10251da:	bf00      	nop
 10251dc:	f3af 8000 	nop.w
 10251e0:	00000000 	.word	0x00000000
 10251e4:	43500000 	.word	0x43500000

010251e8 <__sread>:
 10251e8:	b510      	push	{r4, lr}
 10251ea:	460c      	mov	r4, r1
 10251ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 10251f0:	f002 f9c6 	bl	1027580 <_read_r>
 10251f4:	2800      	cmp	r0, #0
 10251f6:	bfab      	itete	ge
 10251f8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 10251fa:	89a3      	ldrhlt	r3, [r4, #12]
 10251fc:	181b      	addge	r3, r3, r0
 10251fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 1025202:	bfac      	ite	ge
 1025204:	6523      	strge	r3, [r4, #80]	; 0x50
 1025206:	81a3      	strhlt	r3, [r4, #12]
 1025208:	bd10      	pop	{r4, pc}
 102520a:	bf00      	nop

0102520c <__seofread>:
 102520c:	2000      	movs	r0, #0
 102520e:	4770      	bx	lr

01025210 <__swrite>:
 1025210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1025214:	4616      	mov	r6, r2
 1025216:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 102521a:	461f      	mov	r7, r3
 102521c:	460c      	mov	r4, r1
 102521e:	4605      	mov	r5, r0
 1025220:	05d3      	lsls	r3, r2, #23
 1025222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1025226:	d409      	bmi.n	102523c <__swrite+0x2c>
 1025228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 102522c:	463b      	mov	r3, r7
 102522e:	81a2      	strh	r2, [r4, #12]
 1025230:	4628      	mov	r0, r5
 1025232:	4632      	mov	r2, r6
 1025234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1025238:	f002 b85a 	b.w	10272f0 <_write_r>
 102523c:	2200      	movs	r2, #0
 102523e:	2302      	movs	r3, #2
 1025240:	f002 f988 	bl	1027554 <_lseek_r>
 1025244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1025248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 102524c:	e7ec      	b.n	1025228 <__swrite+0x18>
 102524e:	bf00      	nop

01025250 <__sseek>:
 1025250:	b510      	push	{r4, lr}
 1025252:	460c      	mov	r4, r1
 1025254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1025258:	f002 f97c 	bl	1027554 <_lseek_r>
 102525c:	89a3      	ldrh	r3, [r4, #12]
 102525e:	1c42      	adds	r2, r0, #1
 1025260:	bf16      	itet	ne
 1025262:	6520      	strne	r0, [r4, #80]	; 0x50
 1025264:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 1025268:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 102526c:	81a3      	strh	r3, [r4, #12]
 102526e:	bd10      	pop	{r4, pc}

01025270 <__sclose>:
 1025270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1025274:	f002 b852 	b.w	102731c <_close_r>

01025278 <__ssprint_r>:
 1025278:	6893      	ldr	r3, [r2, #8]
 102527a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102527e:	4692      	mov	sl, r2
 1025280:	b083      	sub	sp, #12
 1025282:	2b00      	cmp	r3, #0
 1025284:	d06e      	beq.n	1025364 <__ssprint_r+0xec>
 1025286:	6817      	ldr	r7, [r2, #0]
 1025288:	4681      	mov	r9, r0
 102528a:	460c      	mov	r4, r1
 102528c:	6808      	ldr	r0, [r1, #0]
 102528e:	3708      	adds	r7, #8
 1025290:	688d      	ldr	r5, [r1, #8]
 1025292:	e042      	b.n	102531a <__ssprint_r+0xa2>
 1025294:	89a3      	ldrh	r3, [r4, #12]
 1025296:	f413 6f90 	tst.w	r3, #1152	; 0x480
 102529a:	d02d      	beq.n	10252f8 <__ssprint_r+0x80>
 102529c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 10252a0:	1a45      	subs	r5, r0, r1
 10252a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 10252a6:	eb05 0806 	add.w	r8, r5, r6
 10252aa:	f108 0801 	add.w	r8, r8, #1
 10252ae:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 10252b2:	1052      	asrs	r2, r2, #1
 10252b4:	4590      	cmp	r8, r2
 10252b6:	bf94      	ite	ls
 10252b8:	4690      	movls	r8, r2
 10252ba:	4642      	movhi	r2, r8
 10252bc:	055b      	lsls	r3, r3, #21
 10252be:	d538      	bpl.n	1025332 <__ssprint_r+0xba>
 10252c0:	4611      	mov	r1, r2
 10252c2:	4648      	mov	r0, r9
 10252c4:	f7f7 fa88 	bl	101c7d8 <_malloc_r>
 10252c8:	2800      	cmp	r0, #0
 10252ca:	d03c      	beq.n	1025346 <__ssprint_r+0xce>
 10252cc:	462a      	mov	r2, r5
 10252ce:	6921      	ldr	r1, [r4, #16]
 10252d0:	9001      	str	r0, [sp, #4]
 10252d2:	f7f7 ef96 	blx	101d200 <memcpy>
 10252d6:	89a2      	ldrh	r2, [r4, #12]
 10252d8:	9b01      	ldr	r3, [sp, #4]
 10252da:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 10252de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 10252e2:	81a2      	strh	r2, [r4, #12]
 10252e4:	1958      	adds	r0, r3, r5
 10252e6:	f8c4 8014 	str.w	r8, [r4, #20]
 10252ea:	eba8 0505 	sub.w	r5, r8, r5
 10252ee:	46b0      	mov	r8, r6
 10252f0:	60a5      	str	r5, [r4, #8]
 10252f2:	4635      	mov	r5, r6
 10252f4:	6123      	str	r3, [r4, #16]
 10252f6:	6020      	str	r0, [r4, #0]
 10252f8:	4642      	mov	r2, r8
 10252fa:	4659      	mov	r1, fp
 10252fc:	f7f8 fa70 	bl	101d7e0 <memmove>
 1025300:	f8da 2008 	ldr.w	r2, [sl, #8]
 1025304:	68a3      	ldr	r3, [r4, #8]
 1025306:	6820      	ldr	r0, [r4, #0]
 1025308:	1b96      	subs	r6, r2, r6
 102530a:	1b5d      	subs	r5, r3, r5
 102530c:	60a5      	str	r5, [r4, #8]
 102530e:	4440      	add	r0, r8
 1025310:	6020      	str	r0, [r4, #0]
 1025312:	f8ca 6008 	str.w	r6, [sl, #8]
 1025316:	b32e      	cbz	r6, 1025364 <__ssprint_r+0xec>
 1025318:	3708      	adds	r7, #8
 102531a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 102531e:	46a8      	mov	r8, r5
 1025320:	f857 bc08 	ldr.w	fp, [r7, #-8]
 1025324:	2e00      	cmp	r6, #0
 1025326:	d0f7      	beq.n	1025318 <__ssprint_r+0xa0>
 1025328:	42ae      	cmp	r6, r5
 102532a:	d2b3      	bcs.n	1025294 <__ssprint_r+0x1c>
 102532c:	4635      	mov	r5, r6
 102532e:	46b0      	mov	r8, r6
 1025330:	e7e2      	b.n	10252f8 <__ssprint_r+0x80>
 1025332:	4648      	mov	r0, r9
 1025334:	f7ff fd0a 	bl	1024d4c <_realloc_r>
 1025338:	4603      	mov	r3, r0
 102533a:	2800      	cmp	r0, #0
 102533c:	d1d2      	bne.n	10252e4 <__ssprint_r+0x6c>
 102533e:	6921      	ldr	r1, [r4, #16]
 1025340:	4648      	mov	r0, r9
 1025342:	f7fe fbc3 	bl	1023acc <_free_r>
 1025346:	230c      	movs	r3, #12
 1025348:	f8c9 3000 	str.w	r3, [r9]
 102534c:	89a3      	ldrh	r3, [r4, #12]
 102534e:	f04f 30ff 	mov.w	r0, #4294967295
 1025352:	2200      	movs	r2, #0
 1025354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1025358:	81a3      	strh	r3, [r4, #12]
 102535a:	e9ca 2201 	strd	r2, r2, [sl, #4]
 102535e:	b003      	add	sp, #12
 1025360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1025364:	2000      	movs	r0, #0
 1025366:	f8ca 0004 	str.w	r0, [sl, #4]
 102536a:	b003      	add	sp, #12
 102536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01025370 <_svfiprintf_r>:
 1025370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1025374:	b0c7      	sub	sp, #284	; 0x11c
 1025376:	460c      	mov	r4, r1
 1025378:	4683      	mov	fp, r0
 102537a:	9109      	str	r1, [sp, #36]	; 0x24
 102537c:	4615      	mov	r5, r2
 102537e:	a816      	add	r0, sp, #88	; 0x58
 1025380:	2208      	movs	r2, #8
 1025382:	2100      	movs	r1, #0
 1025384:	9307      	str	r3, [sp, #28]
 1025386:	f7f8 fa93 	bl	101d8b0 <memset>
 102538a:	89a3      	ldrh	r3, [r4, #12]
 102538c:	061b      	lsls	r3, r3, #24
 102538e:	d503      	bpl.n	1025398 <_svfiprintf_r+0x28>
 1025390:	6923      	ldr	r3, [r4, #16]
 1025392:	2b00      	cmp	r3, #0
 1025394:	f000 853f 	beq.w	1025e16 <_svfiprintf_r+0xaa6>
 1025398:	f24c 69b8 	movw	r9, #50872	; 0xc6b8
 102539c:	f2c0 1906 	movt	r9, #262	; 0x106
 10253a0:	46aa      	mov	sl, r5
 10253a2:	2300      	movs	r3, #0
 10253a4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10253a8:	930c      	str	r3, [sp, #48]	; 0x30
 10253aa:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 10253ae:	930f      	str	r3, [sp, #60]	; 0x3c
 10253b0:	9304      	str	r3, [sp, #16]
 10253b2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 10253b6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 10253ba:	f64c 26e8 	movw	r6, #51944	; 0xcae8
 10253be:	f2c0 1606 	movt	r6, #262	; 0x106
 10253c2:	4654      	mov	r4, sl
 10253c4:	f8d9 3000 	ldr.w	r3, [r9]
 10253c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 10253ca:	2b00      	cmp	r3, #0
 10253cc:	bf08      	it	eq
 10253ce:	4633      	moveq	r3, r6
 10253d0:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 10253d4:	f7f7 f93e 	bl	101c654 <__locale_mb_cur_max>
 10253d8:	ab16      	add	r3, sp, #88	; 0x58
 10253da:	4622      	mov	r2, r4
 10253dc:	9300      	str	r3, [sp, #0]
 10253de:	a914      	add	r1, sp, #80	; 0x50
 10253e0:	4603      	mov	r3, r0
 10253e2:	4658      	mov	r0, fp
 10253e4:	47a8      	blx	r5
 10253e6:	2800      	cmp	r0, #0
 10253e8:	4603      	mov	r3, r0
 10253ea:	f000 8086 	beq.w	10254fa <_svfiprintf_r+0x18a>
 10253ee:	db7c      	blt.n	10254ea <_svfiprintf_r+0x17a>
 10253f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 10253f2:	2a25      	cmp	r2, #37	; 0x25
 10253f4:	d001      	beq.n	10253fa <_svfiprintf_r+0x8a>
 10253f6:	441c      	add	r4, r3
 10253f8:	e7e4      	b.n	10253c4 <_svfiprintf_r+0x54>
 10253fa:	ebb4 060a 	subs.w	r6, r4, sl
 10253fe:	4605      	mov	r5, r0
 1025400:	d17f      	bne.n	1025502 <_svfiprintf_r+0x192>
 1025402:	2300      	movs	r3, #0
 1025404:	9306      	str	r3, [sp, #24]
 1025406:	461e      	mov	r6, r3
 1025408:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 102540c:	7863      	ldrb	r3, [r4, #1]
 102540e:	f104 0a01 	add.w	sl, r4, #1
 1025412:	f04f 32ff 	mov.w	r2, #4294967295
 1025416:	9203      	str	r2, [sp, #12]
 1025418:	f10a 0a01 	add.w	sl, sl, #1
 102541c:	f1a3 0220 	sub.w	r2, r3, #32
 1025420:	2a5a      	cmp	r2, #90	; 0x5a
 1025422:	f200 8322 	bhi.w	1025a6a <_svfiprintf_r+0x6fa>
 1025426:	e8df f012 	tbh	[pc, r2, lsl #1]
 102542a:	01d2      	.short	0x01d2
 102542c:	03200320 	.word	0x03200320
 1025430:	032001cd 	.word	0x032001cd
 1025434:	03200320 	.word	0x03200320
 1025438:	032001af 	.word	0x032001af
 102543c:	01a00320 	.word	0x01a00320
 1025440:	0320025e 	.word	0x0320025e
 1025444:	01f4020f 	.word	0x01f4020f
 1025448:	01ef0320 	.word	0x01ef0320
 102544c:	015e015e 	.word	0x015e015e
 1025450:	015e015e 	.word	0x015e015e
 1025454:	015e015e 	.word	0x015e015e
 1025458:	015e015e 	.word	0x015e015e
 102545c:	0320015e 	.word	0x0320015e
 1025460:	03200320 	.word	0x03200320
 1025464:	03200320 	.word	0x03200320
 1025468:	03200320 	.word	0x03200320
 102546c:	03200320 	.word	0x03200320
 1025470:	0220016c 	.word	0x0220016c
 1025474:	03200320 	.word	0x03200320
 1025478:	03200320 	.word	0x03200320
 102547c:	03200320 	.word	0x03200320
 1025480:	03200320 	.word	0x03200320
 1025484:	03200320 	.word	0x03200320
 1025488:	03200214 	.word	0x03200214
 102548c:	03200320 	.word	0x03200320
 1025490:	032002c9 	.word	0x032002c9
 1025494:	032002bc 	.word	0x032002bc
 1025498:	02900320 	.word	0x02900320
 102549c:	03200320 	.word	0x03200320
 10254a0:	03200320 	.word	0x03200320
 10254a4:	03200320 	.word	0x03200320
 10254a8:	03200320 	.word	0x03200320
 10254ac:	03200320 	.word	0x03200320
 10254b0:	0276016c 	.word	0x0276016c
 10254b4:	03200320 	.word	0x03200320
 10254b8:	02fe0320 	.word	0x02fe0320
 10254bc:	005b0276 	.word	0x005b0276
 10254c0:	02f10320 	.word	0x02f10320
 10254c4:	030b0320 	.word	0x030b0320
 10254c8:	0264018f 	.word	0x0264018f
 10254cc:	0320005b 	.word	0x0320005b
 10254d0:	005d02c9 	.word	0x005d02c9
 10254d4:	032001dd 	.word	0x032001dd
 10254d8:	009b0320 	.word	0x009b0320
 10254dc:	005d0320 	.word	0x005d0320
 10254e0:	f046 0620 	orr.w	r6, r6, #32
 10254e4:	f89a 3000 	ldrb.w	r3, [sl]
 10254e8:	e796      	b.n	1025418 <_svfiprintf_r+0xa8>
 10254ea:	2208      	movs	r2, #8
 10254ec:	2100      	movs	r1, #0
 10254ee:	a816      	add	r0, sp, #88	; 0x58
 10254f0:	f7f8 f9de 	bl	101d8b0 <memset>
 10254f4:	2301      	movs	r3, #1
 10254f6:	441c      	add	r4, r3
 10254f8:	e764      	b.n	10253c4 <_svfiprintf_r+0x54>
 10254fa:	ebb4 060a 	subs.w	r6, r4, sl
 10254fe:	4605      	mov	r5, r0
 1025500:	d012      	beq.n	1025528 <_svfiprintf_r+0x1b8>
 1025502:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1025506:	e9c8 a600 	strd	sl, r6, [r8]
 102550a:	3301      	adds	r3, #1
 102550c:	4432      	add	r2, r6
 102550e:	2b07      	cmp	r3, #7
 1025510:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1025514:	bfd8      	it	le
 1025516:	f108 0808 	addle.w	r8, r8, #8
 102551a:	dc17      	bgt.n	102554c <_svfiprintf_r+0x1dc>
 102551c:	9b04      	ldr	r3, [sp, #16]
 102551e:	4433      	add	r3, r6
 1025520:	9304      	str	r3, [sp, #16]
 1025522:	2d00      	cmp	r5, #0
 1025524:	f47f af6d 	bne.w	1025402 <_svfiprintf_r+0x92>
 1025528:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 102552a:	2b00      	cmp	r3, #0
 102552c:	f040 8586 	bne.w	102603c <_svfiprintf_r+0xccc>
 1025530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1025532:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 1025536:	f013 0f40 	tst.w	r3, #64	; 0x40
 102553a:	9b04      	ldr	r3, [sp, #16]
 102553c:	bf18      	it	ne
 102553e:	f04f 33ff 	movne.w	r3, #4294967295
 1025542:	9304      	str	r3, [sp, #16]
 1025544:	9804      	ldr	r0, [sp, #16]
 1025546:	b047      	add	sp, #284	; 0x11c
 1025548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102554c:	aa1a      	add	r2, sp, #104	; 0x68
 102554e:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025550:	4658      	mov	r0, fp
 1025552:	f7ff fe91 	bl	1025278 <__ssprint_r>
 1025556:	2800      	cmp	r0, #0
 1025558:	d1ea      	bne.n	1025530 <_svfiprintf_r+0x1c0>
 102555a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 102555e:	e7dd      	b.n	102551c <_svfiprintf_r+0x1ac>
 1025560:	06b4      	lsls	r4, r6, #26
 1025562:	f24c 1278 	movw	r2, #49528	; 0xc178
 1025566:	f2c0 1206 	movt	r2, #262	; 0x106
 102556a:	920c      	str	r2, [sp, #48]	; 0x30
 102556c:	f140 81f5 	bpl.w	102595a <_svfiprintf_r+0x5ea>
 1025570:	9d07      	ldr	r5, [sp, #28]
 1025572:	3507      	adds	r5, #7
 1025574:	f025 0207 	bic.w	r2, r5, #7
 1025578:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 102557c:	9207      	str	r2, [sp, #28]
 102557e:	ea54 0205 	orrs.w	r2, r4, r5
 1025582:	f006 0201 	and.w	r2, r6, #1
 1025586:	bf08      	it	eq
 1025588:	2200      	moveq	r2, #0
 102558a:	2a00      	cmp	r2, #0
 102558c:	f040 8201 	bne.w	1025992 <_svfiprintf_r+0x622>
 1025590:	f426 6780 	bic.w	r7, r6, #1024	; 0x400
 1025594:	2302      	movs	r3, #2
 1025596:	9903      	ldr	r1, [sp, #12]
 1025598:	2200      	movs	r2, #0
 102559a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 102559e:	1c4a      	adds	r2, r1, #1
 10255a0:	f000 8182 	beq.w	10258a8 <_svfiprintf_r+0x538>
 10255a4:	ea54 0205 	orrs.w	r2, r4, r5
 10255a8:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 10255ac:	bf14      	ite	ne
 10255ae:	2201      	movne	r2, #1
 10255b0:	2200      	moveq	r2, #0
 10255b2:	2900      	cmp	r1, #0
 10255b4:	bf18      	it	ne
 10255b6:	2201      	movne	r2, #1
 10255b8:	2a00      	cmp	r2, #0
 10255ba:	f040 8417 	bne.w	1025dec <_svfiprintf_r+0xa7c>
 10255be:	2b00      	cmp	r3, #0
 10255c0:	f040 83f0 	bne.w	1025da4 <_svfiprintf_r+0xa34>
 10255c4:	f017 0201 	ands.w	r2, r7, #1
 10255c8:	9303      	str	r3, [sp, #12]
 10255ca:	9205      	str	r2, [sp, #20]
 10255cc:	bf04      	itt	eq
 10255ce:	ab46      	addeq	r3, sp, #280	; 0x118
 10255d0:	930b      	streq	r3, [sp, #44]	; 0x2c
 10255d2:	d005      	beq.n	10255e0 <_svfiprintf_r+0x270>
 10255d4:	2330      	movs	r3, #48	; 0x30
 10255d6:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 10255da:	f20d 1317 	addw	r3, sp, #279	; 0x117
 10255de:	930b      	str	r3, [sp, #44]	; 0x2c
 10255e0:	9b05      	ldr	r3, [sp, #20]
 10255e2:	9a03      	ldr	r2, [sp, #12]
 10255e4:	4293      	cmp	r3, r2
 10255e6:	bfb8      	it	lt
 10255e8:	4613      	movlt	r3, r2
 10255ea:	9302      	str	r3, [sp, #8]
 10255ec:	2300      	movs	r3, #0
 10255ee:	9308      	str	r3, [sp, #32]
 10255f0:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 10255f4:	b113      	cbz	r3, 10255fc <_svfiprintf_r+0x28c>
 10255f6:	9b02      	ldr	r3, [sp, #8]
 10255f8:	3301      	adds	r3, #1
 10255fa:	9302      	str	r3, [sp, #8]
 10255fc:	f016 0302 	ands.w	r3, r6, #2
 1025600:	bf1e      	ittt	ne
 1025602:	9a02      	ldrne	r2, [sp, #8]
 1025604:	3202      	addne	r2, #2
 1025606:	9202      	strne	r2, [sp, #8]
 1025608:	f016 0084 	ands.w	r0, r6, #132	; 0x84
 102560c:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1025610:	900a      	str	r0, [sp, #40]	; 0x28
 1025612:	d105      	bne.n	1025620 <_svfiprintf_r+0x2b0>
 1025614:	9806      	ldr	r0, [sp, #24]
 1025616:	9c02      	ldr	r4, [sp, #8]
 1025618:	1b04      	subs	r4, r0, r4
 102561a:	2c00      	cmp	r4, #0
 102561c:	f300 8326 	bgt.w	1025c6c <_svfiprintf_r+0x8fc>
 1025620:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 1025624:	1c48      	adds	r0, r1, #1
 1025626:	f108 0708 	add.w	r7, r8, #8
 102562a:	b1ac      	cbz	r4, 1025658 <_svfiprintf_r+0x2e8>
 102562c:	2807      	cmp	r0, #7
 102562e:	f10d 044b 	add.w	r4, sp, #75	; 0x4b
 1025632:	f102 0201 	add.w	r2, r2, #1
 1025636:	f8c8 4000 	str.w	r4, [r8]
 102563a:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 102563e:	f04f 0401 	mov.w	r4, #1
 1025642:	f8c8 4004 	str.w	r4, [r8, #4]
 1025646:	f300 8355 	bgt.w	1025cf4 <_svfiprintf_r+0x984>
 102564a:	1c8d      	adds	r5, r1, #2
 102564c:	f108 0410 	add.w	r4, r8, #16
 1025650:	4601      	mov	r1, r0
 1025652:	46b8      	mov	r8, r7
 1025654:	4628      	mov	r0, r5
 1025656:	4627      	mov	r7, r4
 1025658:	b18b      	cbz	r3, 102567e <_svfiprintf_r+0x30e>
 102565a:	2807      	cmp	r0, #7
 102565c:	ab13      	add	r3, sp, #76	; 0x4c
 102565e:	f102 0202 	add.w	r2, r2, #2
 1025662:	f8c8 3000 	str.w	r3, [r8]
 1025666:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 102566a:	f04f 0302 	mov.w	r3, #2
 102566e:	f8c8 3004 	str.w	r3, [r8, #4]
 1025672:	f300 834f 	bgt.w	1025d14 <_svfiprintf_r+0x9a4>
 1025676:	4601      	mov	r1, r0
 1025678:	46b8      	mov	r8, r7
 102567a:	3001      	adds	r0, #1
 102567c:	3708      	adds	r7, #8
 102567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1025680:	2b80      	cmp	r3, #128	; 0x80
 1025682:	f000 825f 	beq.w	1025b44 <_svfiprintf_r+0x7d4>
 1025686:	9b03      	ldr	r3, [sp, #12]
 1025688:	9c05      	ldr	r4, [sp, #20]
 102568a:	1b1c      	subs	r4, r3, r4
 102568c:	2c00      	cmp	r4, #0
 102568e:	f300 829c 	bgt.w	1025bca <_svfiprintf_r+0x85a>
 1025692:	9b05      	ldr	r3, [sp, #20]
 1025694:	2807      	cmp	r0, #7
 1025696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1025698:	441a      	add	r2, r3
 102569a:	901b      	str	r0, [sp, #108]	; 0x6c
 102569c:	921c      	str	r2, [sp, #112]	; 0x70
 102569e:	f8c8 1000 	str.w	r1, [r8]
 10256a2:	f8c8 3004 	str.w	r3, [r8, #4]
 10256a6:	f300 82c7 	bgt.w	1025c38 <_svfiprintf_r+0x8c8>
 10256aa:	0773      	lsls	r3, r6, #29
 10256ac:	d505      	bpl.n	10256ba <_svfiprintf_r+0x34a>
 10256ae:	9b06      	ldr	r3, [sp, #24]
 10256b0:	9902      	ldr	r1, [sp, #8]
 10256b2:	1a5c      	subs	r4, r3, r1
 10256b4:	2c00      	cmp	r4, #0
 10256b6:	f300 833b 	bgt.w	1025d30 <_svfiprintf_r+0x9c0>
 10256ba:	9b04      	ldr	r3, [sp, #16]
 10256bc:	9906      	ldr	r1, [sp, #24]
 10256be:	9802      	ldr	r0, [sp, #8]
 10256c0:	4281      	cmp	r1, r0
 10256c2:	bfac      	ite	ge
 10256c4:	185b      	addge	r3, r3, r1
 10256c6:	181b      	addlt	r3, r3, r0
 10256c8:	9304      	str	r3, [sp, #16]
 10256ca:	2a00      	cmp	r2, #0
 10256cc:	f040 82bd 	bne.w	1025c4a <_svfiprintf_r+0x8da>
 10256d0:	2300      	movs	r3, #0
 10256d2:	931b      	str	r3, [sp, #108]	; 0x6c
 10256d4:	9b08      	ldr	r3, [sp, #32]
 10256d6:	b11b      	cbz	r3, 10256e0 <_svfiprintf_r+0x370>
 10256d8:	9908      	ldr	r1, [sp, #32]
 10256da:	4658      	mov	r0, fp
 10256dc:	f7fe f9f6 	bl	1023acc <_free_r>
 10256e0:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10256e4:	e669      	b.n	10253ba <_svfiprintf_r+0x4a>
 10256e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10256ea:	2100      	movs	r1, #0
 10256ec:	f81a 3b01 	ldrb.w	r3, [sl], #1
 10256f0:	200a      	movs	r0, #10
 10256f2:	fb00 2101 	mla	r1, r0, r1, r2
 10256f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10256fa:	2a09      	cmp	r2, #9
 10256fc:	d9f6      	bls.n	10256ec <_svfiprintf_r+0x37c>
 10256fe:	9106      	str	r1, [sp, #24]
 1025700:	e68c      	b.n	102541c <_svfiprintf_r+0xac>
 1025702:	9a07      	ldr	r2, [sp, #28]
 1025704:	2b43      	cmp	r3, #67	; 0x43
 1025706:	f102 0404 	add.w	r4, r2, #4
 102570a:	d002      	beq.n	1025712 <_svfiprintf_r+0x3a2>
 102570c:	06f7      	lsls	r7, r6, #27
 102570e:	f140 8379 	bpl.w	1025e04 <_svfiprintf_r+0xa94>
 1025712:	2208      	movs	r2, #8
 1025714:	2100      	movs	r1, #0
 1025716:	a818      	add	r0, sp, #96	; 0x60
 1025718:	ad2d      	add	r5, sp, #180	; 0xb4
 102571a:	f7f8 f8c9 	bl	101d8b0 <memset>
 102571e:	9a07      	ldr	r2, [sp, #28]
 1025720:	ab18      	add	r3, sp, #96	; 0x60
 1025722:	4629      	mov	r1, r5
 1025724:	4658      	mov	r0, fp
 1025726:	6812      	ldr	r2, [r2, #0]
 1025728:	f7fc fde8 	bl	10222fc <_wcrtomb_r>
 102572c:	1c43      	adds	r3, r0, #1
 102572e:	9005      	str	r0, [sp, #20]
 1025730:	f000 84bf 	beq.w	10260b2 <_svfiprintf_r+0xd42>
 1025734:	9b05      	ldr	r3, [sp, #20]
 1025736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 102573a:	9302      	str	r3, [sp, #8]
 102573c:	2300      	movs	r3, #0
 102573e:	9407      	str	r4, [sp, #28]
 1025740:	950b      	str	r5, [sp, #44]	; 0x2c
 1025742:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1025746:	e19d      	b.n	1025a84 <_svfiprintf_r+0x714>
 1025748:	06b2      	lsls	r2, r6, #26
 102574a:	f100 81d0 	bmi.w	1025aee <_svfiprintf_r+0x77e>
 102574e:	9a07      	ldr	r2, [sp, #28]
 1025750:	06f3      	lsls	r3, r6, #27
 1025752:	f852 4b04 	ldr.w	r4, [r2], #4
 1025756:	f100 84c3 	bmi.w	10260e0 <_svfiprintf_r+0xd70>
 102575a:	0677      	lsls	r7, r6, #25
 102575c:	f140 8436 	bpl.w	1025fcc <_svfiprintf_r+0xc5c>
 1025760:	4633      	mov	r3, r6
 1025762:	9207      	str	r2, [sp, #28]
 1025764:	b2a4      	uxth	r4, r4
 1025766:	2500      	movs	r5, #0
 1025768:	e1c9      	b.n	1025afe <_svfiprintf_r+0x78e>
 102576a:	9a07      	ldr	r2, [sp, #28]
 102576c:	f89a 3000 	ldrb.w	r3, [sl]
 1025770:	f852 1b04 	ldr.w	r1, [r2], #4
 1025774:	2900      	cmp	r1, #0
 1025776:	9106      	str	r1, [sp, #24]
 1025778:	bfa8      	it	ge
 102577a:	9207      	strge	r2, [sp, #28]
 102577c:	f6bf ae4c 	bge.w	1025418 <_svfiprintf_r+0xa8>
 1025780:	4249      	negs	r1, r1
 1025782:	e9cd 1206 	strd	r1, r2, [sp, #24]
 1025786:	e061      	b.n	102584c <_svfiprintf_r+0x4dc>
 1025788:	4658      	mov	r0, fp
 102578a:	f7fe fcc7 	bl	102411c <_localeconv_r>
 102578e:	6843      	ldr	r3, [r0, #4]
 1025790:	4618      	mov	r0, r3
 1025792:	930f      	str	r3, [sp, #60]	; 0x3c
 1025794:	f7f8 ffb4 	bl	101e700 <strlen>
 1025798:	4604      	mov	r4, r0
 102579a:	900e      	str	r0, [sp, #56]	; 0x38
 102579c:	4658      	mov	r0, fp
 102579e:	f7fe fcbd 	bl	102411c <_localeconv_r>
 10257a2:	6883      	ldr	r3, [r0, #8]
 10257a4:	2c00      	cmp	r4, #0
 10257a6:	bf18      	it	ne
 10257a8:	2b00      	cmpne	r3, #0
 10257aa:	930d      	str	r3, [sp, #52]	; 0x34
 10257ac:	f43f ae9a 	beq.w	10254e4 <_svfiprintf_r+0x174>
 10257b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10257b2:	781a      	ldrb	r2, [r3, #0]
 10257b4:	f89a 3000 	ldrb.w	r3, [sl]
 10257b8:	2a00      	cmp	r2, #0
 10257ba:	f43f ae2d 	beq.w	1025418 <_svfiprintf_r+0xa8>
 10257be:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 10257c2:	e629      	b.n	1025418 <_svfiprintf_r+0xa8>
 10257c4:	f046 0601 	orr.w	r6, r6, #1
 10257c8:	f89a 3000 	ldrb.w	r3, [sl]
 10257cc:	e624      	b.n	1025418 <_svfiprintf_r+0xa8>
 10257ce:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 10257d2:	f89a 3000 	ldrb.w	r3, [sl]
 10257d6:	2a00      	cmp	r2, #0
 10257d8:	f47f ae1e 	bne.w	1025418 <_svfiprintf_r+0xa8>
 10257dc:	2220      	movs	r2, #32
 10257de:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10257e2:	e619      	b.n	1025418 <_svfiprintf_r+0xa8>
 10257e4:	06b0      	lsls	r0, r6, #26
 10257e6:	f100 8178 	bmi.w	1025ada <_svfiprintf_r+0x76a>
 10257ea:	9a07      	ldr	r2, [sp, #28]
 10257ec:	06f1      	lsls	r1, r6, #27
 10257ee:	f852 4b04 	ldr.w	r4, [r2], #4
 10257f2:	f100 8478 	bmi.w	10260e6 <_svfiprintf_r+0xd76>
 10257f6:	0673      	lsls	r3, r6, #25
 10257f8:	9207      	str	r2, [sp, #28]
 10257fa:	4637      	mov	r7, r6
 10257fc:	f140 83f1 	bpl.w	1025fe2 <_svfiprintf_r+0xc72>
 1025800:	b2a4      	uxth	r4, r4
 1025802:	2500      	movs	r5, #0
 1025804:	2301      	movs	r3, #1
 1025806:	e6c6      	b.n	1025596 <_svfiprintf_r+0x226>
 1025808:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 102580c:	f89a 3000 	ldrb.w	r3, [sl]
 1025810:	e602      	b.n	1025418 <_svfiprintf_r+0xa8>
 1025812:	4651      	mov	r1, sl
 1025814:	f811 3b01 	ldrb.w	r3, [r1], #1
 1025818:	2b2a      	cmp	r3, #42	; 0x2a
 102581a:	f000 8452 	beq.w	10260c2 <_svfiprintf_r+0xd52>
 102581e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1025822:	468a      	mov	sl, r1
 1025824:	2a09      	cmp	r2, #9
 1025826:	bf84      	itt	hi
 1025828:	2200      	movhi	r2, #0
 102582a:	9203      	strhi	r2, [sp, #12]
 102582c:	f63f adf6 	bhi.w	102541c <_svfiprintf_r+0xac>
 1025830:	2100      	movs	r1, #0
 1025832:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1025836:	200a      	movs	r0, #10
 1025838:	fb00 2101 	mla	r1, r0, r1, r2
 102583c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1025840:	2a09      	cmp	r2, #9
 1025842:	d9f6      	bls.n	1025832 <_svfiprintf_r+0x4c2>
 1025844:	9103      	str	r1, [sp, #12]
 1025846:	e5e9      	b.n	102541c <_svfiprintf_r+0xac>
 1025848:	f89a 3000 	ldrb.w	r3, [sl]
 102584c:	f046 0604 	orr.w	r6, r6, #4
 1025850:	e5e2      	b.n	1025418 <_svfiprintf_r+0xa8>
 1025852:	06b1      	lsls	r1, r6, #26
 1025854:	f046 0310 	orr.w	r3, r6, #16
 1025858:	f100 814a 	bmi.w	1025af0 <_svfiprintf_r+0x780>
 102585c:	9a07      	ldr	r2, [sp, #28]
 102585e:	3204      	adds	r2, #4
 1025860:	9907      	ldr	r1, [sp, #28]
 1025862:	2500      	movs	r5, #0
 1025864:	9207      	str	r2, [sp, #28]
 1025866:	680c      	ldr	r4, [r1, #0]
 1025868:	e149      	b.n	1025afe <_svfiprintf_r+0x78e>
 102586a:	f046 0710 	orr.w	r7, r6, #16
 102586e:	06b6      	lsls	r6, r6, #26
 1025870:	f100 810d 	bmi.w	1025a8e <_svfiprintf_r+0x71e>
 1025874:	9b07      	ldr	r3, [sp, #28]
 1025876:	1d1a      	adds	r2, r3, #4
 1025878:	9b07      	ldr	r3, [sp, #28]
 102587a:	9207      	str	r2, [sp, #28]
 102587c:	681c      	ldr	r4, [r3, #0]
 102587e:	17e5      	asrs	r5, r4, #31
 1025880:	4622      	mov	r2, r4
 1025882:	2a00      	cmp	r2, #0
 1025884:	462b      	mov	r3, r5
 1025886:	f173 0300 	sbcs.w	r3, r3, #0
 102588a:	f280 810f 	bge.w	1025aac <_svfiprintf_r+0x73c>
 102588e:	4264      	negs	r4, r4
 1025890:	9903      	ldr	r1, [sp, #12]
 1025892:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1025896:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 102589a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 102589e:	1c4a      	adds	r2, r1, #1
 10258a0:	f04f 0301 	mov.w	r3, #1
 10258a4:	f47f ae7e 	bne.w	10255a4 <_svfiprintf_r+0x234>
 10258a8:	2b01      	cmp	r3, #1
 10258aa:	f000 8281 	beq.w	1025db0 <_svfiprintf_r+0xa40>
 10258ae:	2b02      	cmp	r3, #2
 10258b0:	bf18      	it	ne
 10258b2:	a946      	addne	r1, sp, #280	; 0x118
 10258b4:	f040 8128 	bne.w	1025b08 <_svfiprintf_r+0x798>
 10258b8:	ab46      	add	r3, sp, #280	; 0x118
 10258ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 10258bc:	461a      	mov	r2, r3
 10258be:	f004 010f 	and.w	r1, r4, #15
 10258c2:	0923      	lsrs	r3, r4, #4
 10258c4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 10258c8:	0928      	lsrs	r0, r5, #4
 10258ca:	5c71      	ldrb	r1, [r6, r1]
 10258cc:	461c      	mov	r4, r3
 10258ce:	4605      	mov	r5, r0
 10258d0:	ea54 0305 	orrs.w	r3, r4, r5
 10258d4:	f802 1d01 	strb.w	r1, [r2, #-1]!
 10258d8:	d1f1      	bne.n	10258be <_svfiprintf_r+0x54e>
 10258da:	ab46      	add	r3, sp, #280	; 0x118
 10258dc:	920b      	str	r2, [sp, #44]	; 0x2c
 10258de:	1a9b      	subs	r3, r3, r2
 10258e0:	463e      	mov	r6, r7
 10258e2:	9305      	str	r3, [sp, #20]
 10258e4:	e67c      	b.n	10255e0 <_svfiprintf_r+0x270>
 10258e6:	232b      	movs	r3, #43	; 0x2b
 10258e8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10258ec:	f89a 3000 	ldrb.w	r3, [sl]
 10258f0:	e592      	b.n	1025418 <_svfiprintf_r+0xa8>
 10258f2:	9b07      	ldr	r3, [sp, #28]
 10258f4:	f647 0230 	movw	r2, #30768	; 0x7830
 10258f8:	f24c 1178 	movw	r1, #49528	; 0xc178
 10258fc:	f046 0702 	orr.w	r7, r6, #2
 1025900:	f2c0 1106 	movt	r1, #262	; 0x106
 1025904:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 1025908:	f853 4b04 	ldr.w	r4, [r3], #4
 102590c:	2500      	movs	r5, #0
 102590e:	910c      	str	r1, [sp, #48]	; 0x30
 1025910:	9307      	str	r3, [sp, #28]
 1025912:	2302      	movs	r3, #2
 1025914:	e63f      	b.n	1025596 <_svfiprintf_r+0x226>
 1025916:	06b5      	lsls	r5, r6, #26
 1025918:	f100 80b8 	bmi.w	1025a8c <_svfiprintf_r+0x71c>
 102591c:	9b07      	ldr	r3, [sp, #28]
 102591e:	06f4      	lsls	r4, r6, #27
 1025920:	f103 0204 	add.w	r2, r3, #4
 1025924:	f100 83d9 	bmi.w	10260da <_svfiprintf_r+0xd6a>
 1025928:	9b07      	ldr	r3, [sp, #28]
 102592a:	0670      	lsls	r0, r6, #25
 102592c:	bf48      	it	mi
 102592e:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1025932:	d404      	bmi.n	102593e <_svfiprintf_r+0x5ce>
 1025934:	05b1      	lsls	r1, r6, #22
 1025936:	f140 837a 	bpl.w	102602e <_svfiprintf_r+0xcbe>
 102593a:	f993 4000 	ldrsb.w	r4, [r3]
 102593e:	17e5      	asrs	r5, r4, #31
 1025940:	9207      	str	r2, [sp, #28]
 1025942:	4637      	mov	r7, r6
 1025944:	4622      	mov	r2, r4
 1025946:	462b      	mov	r3, r5
 1025948:	e0ab      	b.n	1025aa2 <_svfiprintf_r+0x732>
 102594a:	06b4      	lsls	r4, r6, #26
 102594c:	f64b 62d4 	movw	r2, #48852	; 0xbed4
 1025950:	f2c0 1206 	movt	r2, #262	; 0x106
 1025954:	920c      	str	r2, [sp, #48]	; 0x30
 1025956:	f53f ae0b 	bmi.w	1025570 <_svfiprintf_r+0x200>
 102595a:	9a07      	ldr	r2, [sp, #28]
 102595c:	06f0      	lsls	r0, r6, #27
 102595e:	f852 4b04 	ldr.w	r4, [r2], #4
 1025962:	9207      	str	r2, [sp, #28]
 1025964:	d40b      	bmi.n	102597e <_svfiprintf_r+0x60e>
 1025966:	0671      	lsls	r1, r6, #25
 1025968:	bf44      	itt	mi
 102596a:	b2a4      	uxthmi	r4, r4
 102596c:	2500      	movmi	r5, #0
 102596e:	f53f ae06 	bmi.w	102557e <_svfiprintf_r+0x20e>
 1025972:	05b2      	lsls	r2, r6, #22
 1025974:	bf44      	itt	mi
 1025976:	b2e4      	uxtbmi	r4, r4
 1025978:	2500      	movmi	r5, #0
 102597a:	f53f ae00 	bmi.w	102557e <_svfiprintf_r+0x20e>
 102597e:	2500      	movs	r5, #0
 1025980:	ea54 0205 	orrs.w	r2, r4, r5
 1025984:	f006 0201 	and.w	r2, r6, #1
 1025988:	bf08      	it	eq
 102598a:	2200      	moveq	r2, #0
 102598c:	2a00      	cmp	r2, #0
 102598e:	f43f adff 	beq.w	1025590 <_svfiprintf_r+0x220>
 1025992:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 1025996:	f046 0602 	orr.w	r6, r6, #2
 102599a:	2330      	movs	r3, #48	; 0x30
 102599c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 10259a0:	e5f6      	b.n	1025590 <_svfiprintf_r+0x220>
 10259a2:	06b4      	lsls	r4, r6, #26
 10259a4:	f046 0710 	orr.w	r7, r6, #16
 10259a8:	f100 8098 	bmi.w	1025adc <_svfiprintf_r+0x76c>
 10259ac:	9b07      	ldr	r3, [sp, #28]
 10259ae:	1d1a      	adds	r2, r3, #4
 10259b0:	9b07      	ldr	r3, [sp, #28]
 10259b2:	2500      	movs	r5, #0
 10259b4:	9207      	str	r2, [sp, #28]
 10259b6:	681c      	ldr	r4, [r3, #0]
 10259b8:	2301      	movs	r3, #1
 10259ba:	e5ec      	b.n	1025596 <_svfiprintf_r+0x226>
 10259bc:	9d07      	ldr	r5, [sp, #28]
 10259be:	2200      	movs	r2, #0
 10259c0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10259c4:	f855 1b04 	ldr.w	r1, [r5], #4
 10259c8:	910b      	str	r1, [sp, #44]	; 0x2c
 10259ca:	2900      	cmp	r1, #0
 10259cc:	f000 82f1 	beq.w	1025fb2 <_svfiprintf_r+0xc42>
 10259d0:	2b53      	cmp	r3, #83	; 0x53
 10259d2:	f000 8231 	beq.w	1025e38 <_svfiprintf_r+0xac8>
 10259d6:	f016 0410 	ands.w	r4, r6, #16
 10259da:	f040 822d 	bne.w	1025e38 <_svfiprintf_r+0xac8>
 10259de:	9a03      	ldr	r2, [sp, #12]
 10259e0:	1c53      	adds	r3, r2, #1
 10259e2:	f000 8343 	beq.w	102606c <_svfiprintf_r+0xcfc>
 10259e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 10259e8:	4621      	mov	r1, r4
 10259ea:	4638      	mov	r0, r7
 10259ec:	f7fe fce0 	bl	10243b0 <memchr>
 10259f0:	9008      	str	r0, [sp, #32]
 10259f2:	2800      	cmp	r0, #0
 10259f4:	f000 8332 	beq.w	102605c <_svfiprintf_r+0xcec>
 10259f8:	1bc3      	subs	r3, r0, r7
 10259fa:	4622      	mov	r2, r4
 10259fc:	9305      	str	r3, [sp, #20]
 10259fe:	9403      	str	r4, [sp, #12]
 1025a00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1025a04:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1025a08:	9302      	str	r3, [sp, #8]
 1025a0a:	e5f1      	b.n	10255f0 <_svfiprintf_r+0x280>
 1025a0c:	f89a 3000 	ldrb.w	r3, [sl]
 1025a10:	2b6c      	cmp	r3, #108	; 0x6c
 1025a12:	bf09      	itett	eq
 1025a14:	f046 0620 	orreq.w	r6, r6, #32
 1025a18:	f046 0610 	orrne.w	r6, r6, #16
 1025a1c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1025a20:	f10a 0a01 	addeq.w	sl, sl, #1
 1025a24:	e4f8      	b.n	1025418 <_svfiprintf_r+0xa8>
 1025a26:	f89a 3000 	ldrb.w	r3, [sl]
 1025a2a:	2b68      	cmp	r3, #104	; 0x68
 1025a2c:	bf09      	itett	eq
 1025a2e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 1025a32:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1025a36:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1025a3a:	f10a 0a01 	addeq.w	sl, sl, #1
 1025a3e:	e4eb      	b.n	1025418 <_svfiprintf_r+0xa8>
 1025a40:	9a07      	ldr	r2, [sp, #28]
 1025a42:	06b7      	lsls	r7, r6, #26
 1025a44:	f102 0304 	add.w	r3, r2, #4
 1025a48:	f100 81d2 	bmi.w	1025df0 <_svfiprintf_r+0xa80>
 1025a4c:	06f5      	lsls	r5, r6, #27
 1025a4e:	f100 825d 	bmi.w	1025f0c <_svfiprintf_r+0xb9c>
 1025a52:	0674      	lsls	r4, r6, #25
 1025a54:	f100 82e4 	bmi.w	1026020 <_svfiprintf_r+0xcb0>
 1025a58:	05b0      	lsls	r0, r6, #22
 1025a5a:	f140 8257 	bpl.w	1025f0c <_svfiprintf_r+0xb9c>
 1025a5e:	9a07      	ldr	r2, [sp, #28]
 1025a60:	9307      	str	r3, [sp, #28]
 1025a62:	9b04      	ldr	r3, [sp, #16]
 1025a64:	6812      	ldr	r2, [r2, #0]
 1025a66:	7013      	strb	r3, [r2, #0]
 1025a68:	e4a7      	b.n	10253ba <_svfiprintf_r+0x4a>
 1025a6a:	2b00      	cmp	r3, #0
 1025a6c:	f43f ad5c 	beq.w	1025528 <_svfiprintf_r+0x1b8>
 1025a70:	2201      	movs	r2, #1
 1025a72:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1025a76:	9202      	str	r2, [sp, #8]
 1025a78:	2300      	movs	r3, #0
 1025a7a:	9205      	str	r2, [sp, #20]
 1025a7c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1025a80:	ab2d      	add	r3, sp, #180	; 0xb4
 1025a82:	930b      	str	r3, [sp, #44]	; 0x2c
 1025a84:	2300      	movs	r3, #0
 1025a86:	9308      	str	r3, [sp, #32]
 1025a88:	9303      	str	r3, [sp, #12]
 1025a8a:	e5b7      	b.n	10255fc <_svfiprintf_r+0x28c>
 1025a8c:	4637      	mov	r7, r6
 1025a8e:	9d07      	ldr	r5, [sp, #28]
 1025a90:	3507      	adds	r5, #7
 1025a92:	f025 0307 	bic.w	r3, r5, #7
 1025a96:	4619      	mov	r1, r3
 1025a98:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 1025a9c:	4614      	mov	r4, r2
 1025a9e:	461d      	mov	r5, r3
 1025aa0:	9107      	str	r1, [sp, #28]
 1025aa2:	2a00      	cmp	r2, #0
 1025aa4:	f173 0300 	sbcs.w	r3, r3, #0
 1025aa8:	f6ff aef1 	blt.w	102588e <_svfiprintf_r+0x51e>
 1025aac:	9b03      	ldr	r3, [sp, #12]
 1025aae:	3301      	adds	r3, #1
 1025ab0:	f000 817e 	beq.w	1025db0 <_svfiprintf_r+0xa40>
 1025ab4:	ea54 0305 	orrs.w	r3, r4, r5
 1025ab8:	9a03      	ldr	r2, [sp, #12]
 1025aba:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 1025abe:	bf14      	ite	ne
 1025ac0:	2301      	movne	r3, #1
 1025ac2:	2300      	moveq	r3, #0
 1025ac4:	2a00      	cmp	r2, #0
 1025ac6:	bf18      	it	ne
 1025ac8:	2301      	movne	r3, #1
 1025aca:	2b00      	cmp	r3, #0
 1025acc:	f040 816f 	bne.w	1025dae <_svfiprintf_r+0xa3e>
 1025ad0:	aa46      	add	r2, sp, #280	; 0x118
 1025ad2:	9303      	str	r3, [sp, #12]
 1025ad4:	920b      	str	r2, [sp, #44]	; 0x2c
 1025ad6:	9305      	str	r3, [sp, #20]
 1025ad8:	e582      	b.n	10255e0 <_svfiprintf_r+0x270>
 1025ada:	4637      	mov	r7, r6
 1025adc:	9d07      	ldr	r5, [sp, #28]
 1025ade:	2301      	movs	r3, #1
 1025ae0:	3507      	adds	r5, #7
 1025ae2:	f025 0207 	bic.w	r2, r5, #7
 1025ae6:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1025aea:	9207      	str	r2, [sp, #28]
 1025aec:	e553      	b.n	1025596 <_svfiprintf_r+0x226>
 1025aee:	4633      	mov	r3, r6
 1025af0:	9d07      	ldr	r5, [sp, #28]
 1025af2:	3507      	adds	r5, #7
 1025af4:	f025 0207 	bic.w	r2, r5, #7
 1025af8:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1025afc:	9207      	str	r2, [sp, #28]
 1025afe:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
 1025b02:	2300      	movs	r3, #0
 1025b04:	e547      	b.n	1025596 <_svfiprintf_r+0x226>
 1025b06:	4611      	mov	r1, r2
 1025b08:	08e2      	lsrs	r2, r4, #3
 1025b0a:	08e8      	lsrs	r0, r5, #3
 1025b0c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1025b10:	f004 0307 	and.w	r3, r4, #7
 1025b14:	4605      	mov	r5, r0
 1025b16:	3330      	adds	r3, #48	; 0x30
 1025b18:	4614      	mov	r4, r2
 1025b1a:	ea54 0005 	orrs.w	r0, r4, r5
 1025b1e:	f801 3c01 	strb.w	r3, [r1, #-1]
 1025b22:	f101 32ff 	add.w	r2, r1, #4294967295
 1025b26:	d1ee      	bne.n	1025b06 <_svfiprintf_r+0x796>
 1025b28:	2b30      	cmp	r3, #48	; 0x30
 1025b2a:	bf0c      	ite	eq
 1025b2c:	2300      	moveq	r3, #0
 1025b2e:	f007 0301 	andne.w	r3, r7, #1
 1025b32:	920b      	str	r2, [sp, #44]	; 0x2c
 1025b34:	2b00      	cmp	r3, #0
 1025b36:	f040 81cd 	bne.w	1025ed4 <_svfiprintf_r+0xb64>
 1025b3a:	ab46      	add	r3, sp, #280	; 0x118
 1025b3c:	463e      	mov	r6, r7
 1025b3e:	1a9b      	subs	r3, r3, r2
 1025b40:	9305      	str	r3, [sp, #20]
 1025b42:	e54d      	b.n	10255e0 <_svfiprintf_r+0x270>
 1025b44:	9b06      	ldr	r3, [sp, #24]
 1025b46:	9c02      	ldr	r4, [sp, #8]
 1025b48:	1b1c      	subs	r4, r3, r4
 1025b4a:	2c00      	cmp	r4, #0
 1025b4c:	f77f ad9b 	ble.w	1025686 <_svfiprintf_r+0x316>
 1025b50:	2c10      	cmp	r4, #16
 1025b52:	4db8      	ldr	r5, [pc, #736]	; (1025e34 <_svfiprintf_r+0xac4>)
 1025b54:	f340 82aa 	ble.w	10260ac <_svfiprintf_r+0xd3c>
 1025b58:	960a      	str	r6, [sp, #40]	; 0x28
 1025b5a:	2710      	movs	r7, #16
 1025b5c:	462e      	mov	r6, r5
 1025b5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1025b60:	e002      	b.n	1025b68 <_svfiprintf_r+0x7f8>
 1025b62:	3c10      	subs	r4, #16
 1025b64:	2c10      	cmp	r4, #16
 1025b66:	dd17      	ble.n	1025b98 <_svfiprintf_r+0x828>
 1025b68:	3101      	adds	r1, #1
 1025b6a:	3210      	adds	r2, #16
 1025b6c:	2907      	cmp	r1, #7
 1025b6e:	e9c8 6700 	strd	r6, r7, [r8]
 1025b72:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1025b76:	f108 0808 	add.w	r8, r8, #8
 1025b7a:	ddf2      	ble.n	1025b62 <_svfiprintf_r+0x7f2>
 1025b7c:	aa1a      	add	r2, sp, #104	; 0x68
 1025b7e:	4629      	mov	r1, r5
 1025b80:	4658      	mov	r0, fp
 1025b82:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025b86:	f7ff fb77 	bl	1025278 <__ssprint_r>
 1025b8a:	2800      	cmp	r0, #0
 1025b8c:	d165      	bne.n	1025c5a <_svfiprintf_r+0x8ea>
 1025b8e:	3c10      	subs	r4, #16
 1025b90:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1025b94:	2c10      	cmp	r4, #16
 1025b96:	dce7      	bgt.n	1025b68 <_svfiprintf_r+0x7f8>
 1025b98:	4635      	mov	r5, r6
 1025b9a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1025b9c:	3101      	adds	r1, #1
 1025b9e:	f108 0308 	add.w	r3, r8, #8
 1025ba2:	2907      	cmp	r1, #7
 1025ba4:	4422      	add	r2, r4
 1025ba6:	f8c8 5000 	str.w	r5, [r8]
 1025baa:	921c      	str	r2, [sp, #112]	; 0x70
 1025bac:	f8c8 4004 	str.w	r4, [r8, #4]
 1025bb0:	911b      	str	r1, [sp, #108]	; 0x6c
 1025bb2:	f300 819b 	bgt.w	1025eec <_svfiprintf_r+0xb7c>
 1025bb6:	f103 0708 	add.w	r7, r3, #8
 1025bba:	4698      	mov	r8, r3
 1025bbc:	9c05      	ldr	r4, [sp, #20]
 1025bbe:	1c48      	adds	r0, r1, #1
 1025bc0:	9b03      	ldr	r3, [sp, #12]
 1025bc2:	1b1c      	subs	r4, r3, r4
 1025bc4:	2c00      	cmp	r4, #0
 1025bc6:	f77f ad64 	ble.w	1025692 <_svfiprintf_r+0x322>
 1025bca:	2c10      	cmp	r4, #16
 1025bcc:	4d99      	ldr	r5, [pc, #612]	; (1025e34 <_svfiprintf_r+0xac4>)
 1025bce:	f340 8210 	ble.w	1025ff2 <_svfiprintf_r+0xc82>
 1025bd2:	9603      	str	r6, [sp, #12]
 1025bd4:	2710      	movs	r7, #16
 1025bd6:	462e      	mov	r6, r5
 1025bd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1025bda:	e002      	b.n	1025be2 <_svfiprintf_r+0x872>
 1025bdc:	3c10      	subs	r4, #16
 1025bde:	2c10      	cmp	r4, #16
 1025be0:	dd16      	ble.n	1025c10 <_svfiprintf_r+0x8a0>
 1025be2:	3101      	adds	r1, #1
 1025be4:	3210      	adds	r2, #16
 1025be6:	2907      	cmp	r1, #7
 1025be8:	e9c8 6700 	strd	r6, r7, [r8]
 1025bec:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1025bf0:	f108 0808 	add.w	r8, r8, #8
 1025bf4:	ddf2      	ble.n	1025bdc <_svfiprintf_r+0x86c>
 1025bf6:	aa1a      	add	r2, sp, #104	; 0x68
 1025bf8:	4629      	mov	r1, r5
 1025bfa:	4658      	mov	r0, fp
 1025bfc:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025c00:	f7ff fb3a 	bl	1025278 <__ssprint_r>
 1025c04:	bb48      	cbnz	r0, 1025c5a <_svfiprintf_r+0x8ea>
 1025c06:	3c10      	subs	r4, #16
 1025c08:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1025c0c:	2c10      	cmp	r4, #16
 1025c0e:	dce8      	bgt.n	1025be2 <_svfiprintf_r+0x872>
 1025c10:	4635      	mov	r5, r6
 1025c12:	9e03      	ldr	r6, [sp, #12]
 1025c14:	1c48      	adds	r0, r1, #1
 1025c16:	f108 0308 	add.w	r3, r8, #8
 1025c1a:	2807      	cmp	r0, #7
 1025c1c:	4422      	add	r2, r4
 1025c1e:	f8c8 5000 	str.w	r5, [r8]
 1025c22:	921c      	str	r2, [sp, #112]	; 0x70
 1025c24:	f8c8 4004 	str.w	r4, [r8, #4]
 1025c28:	901b      	str	r0, [sp, #108]	; 0x6c
 1025c2a:	f300 80d0 	bgt.w	1025dce <_svfiprintf_r+0xa5e>
 1025c2e:	3001      	adds	r0, #1
 1025c30:	f103 0708 	add.w	r7, r3, #8
 1025c34:	4698      	mov	r8, r3
 1025c36:	e52c      	b.n	1025692 <_svfiprintf_r+0x322>
 1025c38:	aa1a      	add	r2, sp, #104	; 0x68
 1025c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025c3c:	4658      	mov	r0, fp
 1025c3e:	f7ff fb1b 	bl	1025278 <__ssprint_r>
 1025c42:	b950      	cbnz	r0, 1025c5a <_svfiprintf_r+0x8ea>
 1025c44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025c46:	af1d      	add	r7, sp, #116	; 0x74
 1025c48:	e52f      	b.n	10256aa <_svfiprintf_r+0x33a>
 1025c4a:	aa1a      	add	r2, sp, #104	; 0x68
 1025c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025c4e:	4658      	mov	r0, fp
 1025c50:	f7ff fb12 	bl	1025278 <__ssprint_r>
 1025c54:	2800      	cmp	r0, #0
 1025c56:	f43f ad3b 	beq.w	10256d0 <_svfiprintf_r+0x360>
 1025c5a:	9b08      	ldr	r3, [sp, #32]
 1025c5c:	2b00      	cmp	r3, #0
 1025c5e:	f43f ac67 	beq.w	1025530 <_svfiprintf_r+0x1c0>
 1025c62:	9908      	ldr	r1, [sp, #32]
 1025c64:	4658      	mov	r0, fp
 1025c66:	f7fd ff31 	bl	1023acc <_free_r>
 1025c6a:	e461      	b.n	1025530 <_svfiprintf_r+0x1c0>
 1025c6c:	2c10      	cmp	r4, #16
 1025c6e:	f248 05b0 	movw	r5, #32944	; 0x80b0
 1025c72:	f2c0 1506 	movt	r5, #262	; 0x106
 1025c76:	dd23      	ble.n	1025cc0 <_svfiprintf_r+0x950>
 1025c78:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 1025c7c:	2710      	movs	r7, #16
 1025c7e:	462e      	mov	r6, r5
 1025c80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1025c82:	e002      	b.n	1025c8a <_svfiprintf_r+0x91a>
 1025c84:	3c10      	subs	r4, #16
 1025c86:	2c10      	cmp	r4, #16
 1025c88:	dd17      	ble.n	1025cba <_svfiprintf_r+0x94a>
 1025c8a:	3101      	adds	r1, #1
 1025c8c:	3210      	adds	r2, #16
 1025c8e:	2907      	cmp	r1, #7
 1025c90:	e9c8 6700 	strd	r6, r7, [r8]
 1025c94:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1025c98:	f108 0808 	add.w	r8, r8, #8
 1025c9c:	ddf2      	ble.n	1025c84 <_svfiprintf_r+0x914>
 1025c9e:	aa1a      	add	r2, sp, #104	; 0x68
 1025ca0:	4629      	mov	r1, r5
 1025ca2:	4658      	mov	r0, fp
 1025ca4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025ca8:	f7ff fae6 	bl	1025278 <__ssprint_r>
 1025cac:	2800      	cmp	r0, #0
 1025cae:	d1d4      	bne.n	1025c5a <_svfiprintf_r+0x8ea>
 1025cb0:	3c10      	subs	r4, #16
 1025cb2:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1025cb6:	2c10      	cmp	r4, #16
 1025cb8:	dce7      	bgt.n	1025c8a <_svfiprintf_r+0x91a>
 1025cba:	4635      	mov	r5, r6
 1025cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1025cbe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 1025cc0:	3101      	adds	r1, #1
 1025cc2:	4422      	add	r2, r4
 1025cc4:	2907      	cmp	r1, #7
 1025cc6:	e9c8 5400 	strd	r5, r4, [r8]
 1025cca:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1025cce:	bfd8      	it	le
 1025cd0:	f108 0808 	addle.w	r8, r8, #8
 1025cd4:	f77f aca4 	ble.w	1025620 <_svfiprintf_r+0x2b0>
 1025cd8:	aa1a      	add	r2, sp, #104	; 0x68
 1025cda:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025cdc:	4658      	mov	r0, fp
 1025cde:	9310      	str	r3, [sp, #64]	; 0x40
 1025ce0:	f7ff faca 	bl	1025278 <__ssprint_r>
 1025ce4:	2800      	cmp	r0, #0
 1025ce6:	d1b8      	bne.n	1025c5a <_svfiprintf_r+0x8ea>
 1025ce8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025cea:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025cee:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1025cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1025cf2:	e495      	b.n	1025620 <_svfiprintf_r+0x2b0>
 1025cf4:	aa1a      	add	r2, sp, #104	; 0x68
 1025cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025cf8:	4658      	mov	r0, fp
 1025cfa:	9310      	str	r3, [sp, #64]	; 0x40
 1025cfc:	f7ff fabc 	bl	1025278 <__ssprint_r>
 1025d00:	2800      	cmp	r0, #0
 1025d02:	d1aa      	bne.n	1025c5a <_svfiprintf_r+0x8ea>
 1025d04:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1025d06:	af1f      	add	r7, sp, #124	; 0x7c
 1025d08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025d0a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025d0e:	1c48      	adds	r0, r1, #1
 1025d10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1025d12:	e4a1      	b.n	1025658 <_svfiprintf_r+0x2e8>
 1025d14:	aa1a      	add	r2, sp, #104	; 0x68
 1025d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025d18:	4658      	mov	r0, fp
 1025d1a:	f7ff faad 	bl	1025278 <__ssprint_r>
 1025d1e:	2800      	cmp	r0, #0
 1025d20:	d19b      	bne.n	1025c5a <_svfiprintf_r+0x8ea>
 1025d22:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1025d24:	af1f      	add	r7, sp, #124	; 0x7c
 1025d26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025d28:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025d2c:	1c48      	adds	r0, r1, #1
 1025d2e:	e4a6      	b.n	102567e <_svfiprintf_r+0x30e>
 1025d30:	2c10      	cmp	r4, #16
 1025d32:	f248 05b0 	movw	r5, #32944	; 0x80b0
 1025d36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 1025d38:	f2c0 1506 	movt	r5, #262	; 0x106
 1025d3c:	bfc4      	itt	gt
 1025d3e:	2610      	movgt	r6, #16
 1025d40:	f8dd 8024 	ldrgt.w	r8, [sp, #36]	; 0x24
 1025d44:	dc03      	bgt.n	1025d4e <_svfiprintf_r+0x9de>
 1025d46:	e01a      	b.n	1025d7e <_svfiprintf_r+0xa0e>
 1025d48:	3c10      	subs	r4, #16
 1025d4a:	2c10      	cmp	r4, #16
 1025d4c:	dd17      	ble.n	1025d7e <_svfiprintf_r+0xa0e>
 1025d4e:	3301      	adds	r3, #1
 1025d50:	3210      	adds	r2, #16
 1025d52:	2b07      	cmp	r3, #7
 1025d54:	e9c7 5600 	strd	r5, r6, [r7]
 1025d58:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1025d5c:	f107 0708 	add.w	r7, r7, #8
 1025d60:	ddf2      	ble.n	1025d48 <_svfiprintf_r+0x9d8>
 1025d62:	aa1a      	add	r2, sp, #104	; 0x68
 1025d64:	4641      	mov	r1, r8
 1025d66:	4658      	mov	r0, fp
 1025d68:	af1d      	add	r7, sp, #116	; 0x74
 1025d6a:	f7ff fa85 	bl	1025278 <__ssprint_r>
 1025d6e:	2800      	cmp	r0, #0
 1025d70:	f47f af73 	bne.w	1025c5a <_svfiprintf_r+0x8ea>
 1025d74:	3c10      	subs	r4, #16
 1025d76:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1025d7a:	2c10      	cmp	r4, #16
 1025d7c:	dce7      	bgt.n	1025d4e <_svfiprintf_r+0x9de>
 1025d7e:	3301      	adds	r3, #1
 1025d80:	4422      	add	r2, r4
 1025d82:	2b07      	cmp	r3, #7
 1025d84:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1025d88:	e9c7 5400 	strd	r5, r4, [r7]
 1025d8c:	f77f ac95 	ble.w	10256ba <_svfiprintf_r+0x34a>
 1025d90:	aa1a      	add	r2, sp, #104	; 0x68
 1025d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025d94:	4658      	mov	r0, fp
 1025d96:	f7ff fa6f 	bl	1025278 <__ssprint_r>
 1025d9a:	2800      	cmp	r0, #0
 1025d9c:	f47f af5d 	bne.w	1025c5a <_svfiprintf_r+0x8ea>
 1025da0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025da2:	e48a      	b.n	10256ba <_svfiprintf_r+0x34a>
 1025da4:	ab46      	add	r3, sp, #280	; 0x118
 1025da6:	9203      	str	r2, [sp, #12]
 1025da8:	930b      	str	r3, [sp, #44]	; 0x2c
 1025daa:	9205      	str	r2, [sp, #20]
 1025dac:	e418      	b.n	10255e0 <_svfiprintf_r+0x270>
 1025dae:	4637      	mov	r7, r6
 1025db0:	2d00      	cmp	r5, #0
 1025db2:	bf08      	it	eq
 1025db4:	2c0a      	cmpeq	r4, #10
 1025db6:	f080 80b0 	bcs.w	1025f1a <_svfiprintf_r+0xbaa>
 1025dba:	2301      	movs	r3, #1
 1025dbc:	3430      	adds	r4, #48	; 0x30
 1025dbe:	9305      	str	r3, [sp, #20]
 1025dc0:	463e      	mov	r6, r7
 1025dc2:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1025dc6:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1025dca:	930b      	str	r3, [sp, #44]	; 0x2c
 1025dcc:	e408      	b.n	10255e0 <_svfiprintf_r+0x270>
 1025dce:	aa1a      	add	r2, sp, #104	; 0x68
 1025dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025dd2:	4658      	mov	r0, fp
 1025dd4:	f7ff fa50 	bl	1025278 <__ssprint_r>
 1025dd8:	2800      	cmp	r0, #0
 1025dda:	f47f af3e 	bne.w	1025c5a <_svfiprintf_r+0x8ea>
 1025dde:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1025de0:	af1f      	add	r7, sp, #124	; 0x7c
 1025de2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025de4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025de8:	3001      	adds	r0, #1
 1025dea:	e452      	b.n	1025692 <_svfiprintf_r+0x322>
 1025dec:	4637      	mov	r7, r6
 1025dee:	e55b      	b.n	10258a8 <_svfiprintf_r+0x538>
 1025df0:	9904      	ldr	r1, [sp, #16]
 1025df2:	6812      	ldr	r2, [r2, #0]
 1025df4:	9307      	str	r3, [sp, #28]
 1025df6:	17cd      	asrs	r5, r1, #31
 1025df8:	4608      	mov	r0, r1
 1025dfa:	4629      	mov	r1, r5
 1025dfc:	e9c2 0100 	strd	r0, r1, [r2]
 1025e00:	f7ff badb 	b.w	10253ba <_svfiprintf_r+0x4a>
 1025e04:	9b07      	ldr	r3, [sp, #28]
 1025e06:	2201      	movs	r2, #1
 1025e08:	ad2d      	add	r5, sp, #180	; 0xb4
 1025e0a:	9202      	str	r2, [sp, #8]
 1025e0c:	9205      	str	r2, [sp, #20]
 1025e0e:	681b      	ldr	r3, [r3, #0]
 1025e10:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1025e14:	e492      	b.n	102573c <_svfiprintf_r+0x3cc>
 1025e16:	2140      	movs	r1, #64	; 0x40
 1025e18:	4658      	mov	r0, fp
 1025e1a:	f7f6 fcdd 	bl	101c7d8 <_malloc_r>
 1025e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1025e20:	6018      	str	r0, [r3, #0]
 1025e22:	6118      	str	r0, [r3, #16]
 1025e24:	2800      	cmp	r0, #0
 1025e26:	f000 8160 	beq.w	10260ea <_svfiprintf_r+0xd7a>
 1025e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1025e2c:	2340      	movs	r3, #64	; 0x40
 1025e2e:	6153      	str	r3, [r2, #20]
 1025e30:	f7ff bab2 	b.w	1025398 <_svfiprintf_r+0x28>
 1025e34:	010680c0 	.word	0x010680c0
 1025e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1025e3a:	2208      	movs	r2, #8
 1025e3c:	2100      	movs	r1, #0
 1025e3e:	a818      	add	r0, sp, #96	; 0x60
 1025e40:	9315      	str	r3, [sp, #84]	; 0x54
 1025e42:	f7f7 fd35 	bl	101d8b0 <memset>
 1025e46:	9f03      	ldr	r7, [sp, #12]
 1025e48:	1c7b      	adds	r3, r7, #1
 1025e4a:	f000 80d4 	beq.w	1025ff6 <_svfiprintf_r+0xc86>
 1025e4e:	2400      	movs	r4, #0
 1025e50:	9602      	str	r6, [sp, #8]
 1025e52:	9503      	str	r5, [sp, #12]
 1025e54:	4626      	mov	r6, r4
 1025e56:	e009      	b.n	1025e6c <_svfiprintf_r+0xafc>
 1025e58:	f7fc fa50 	bl	10222fc <_wcrtomb_r>
 1025e5c:	1833      	adds	r3, r6, r0
 1025e5e:	3001      	adds	r0, #1
 1025e60:	f000 8127 	beq.w	10260b2 <_svfiprintf_r+0xd42>
 1025e64:	42bb      	cmp	r3, r7
 1025e66:	dc0a      	bgt.n	1025e7e <_svfiprintf_r+0xb0e>
 1025e68:	461e      	mov	r6, r3
 1025e6a:	d008      	beq.n	1025e7e <_svfiprintf_r+0xb0e>
 1025e6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1025e6e:	ab18      	add	r3, sp, #96	; 0x60
 1025e70:	a92d      	add	r1, sp, #180	; 0xb4
 1025e72:	4658      	mov	r0, fp
 1025e74:	5915      	ldr	r5, [r2, r4]
 1025e76:	3404      	adds	r4, #4
 1025e78:	462a      	mov	r2, r5
 1025e7a:	2d00      	cmp	r5, #0
 1025e7c:	d1ec      	bne.n	1025e58 <_svfiprintf_r+0xae8>
 1025e7e:	9605      	str	r6, [sp, #20]
 1025e80:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 1025e84:	9b05      	ldr	r3, [sp, #20]
 1025e86:	2b00      	cmp	r3, #0
 1025e88:	f000 80c3 	beq.w	1026012 <_svfiprintf_r+0xca2>
 1025e8c:	2b63      	cmp	r3, #99	; 0x63
 1025e8e:	f300 80dc 	bgt.w	102604a <_svfiprintf_r+0xcda>
 1025e92:	2300      	movs	r3, #0
 1025e94:	9308      	str	r3, [sp, #32]
 1025e96:	ab2d      	add	r3, sp, #180	; 0xb4
 1025e98:	930b      	str	r3, [sp, #44]	; 0x2c
 1025e9a:	2208      	movs	r2, #8
 1025e9c:	2100      	movs	r1, #0
 1025e9e:	a818      	add	r0, sp, #96	; 0x60
 1025ea0:	f7f7 fd06 	bl	101d8b0 <memset>
 1025ea4:	9c05      	ldr	r4, [sp, #20]
 1025ea6:	ab18      	add	r3, sp, #96	; 0x60
 1025ea8:	aa15      	add	r2, sp, #84	; 0x54
 1025eaa:	9300      	str	r3, [sp, #0]
 1025eac:	4658      	mov	r0, fp
 1025eae:	4623      	mov	r3, r4
 1025eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1025eb2:	f7fc fa79 	bl	10223a8 <_wcsrtombs_r>
 1025eb6:	4284      	cmp	r4, r0
 1025eb8:	f040 811f 	bne.w	10260fa <_svfiprintf_r+0xd8a>
 1025ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1025ebe:	2400      	movs	r4, #0
 1025ec0:	9507      	str	r5, [sp, #28]
 1025ec2:	9403      	str	r4, [sp, #12]
 1025ec4:	4619      	mov	r1, r3
 1025ec6:	9b05      	ldr	r3, [sp, #20]
 1025ec8:	54cc      	strb	r4, [r1, r3]
 1025eca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1025ece:	9302      	str	r3, [sp, #8]
 1025ed0:	f7ff bb8e 	b.w	10255f0 <_svfiprintf_r+0x280>
 1025ed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1025ed6:	3902      	subs	r1, #2
 1025ed8:	2330      	movs	r3, #48	; 0x30
 1025eda:	463e      	mov	r6, r7
 1025edc:	910b      	str	r1, [sp, #44]	; 0x2c
 1025ede:	f802 3c01 	strb.w	r3, [r2, #-1]
 1025ee2:	ab46      	add	r3, sp, #280	; 0x118
 1025ee4:	1a5b      	subs	r3, r3, r1
 1025ee6:	9305      	str	r3, [sp, #20]
 1025ee8:	f7ff bb7a 	b.w	10255e0 <_svfiprintf_r+0x270>
 1025eec:	aa1a      	add	r2, sp, #104	; 0x68
 1025eee:	9909      	ldr	r1, [sp, #36]	; 0x24
 1025ef0:	4658      	mov	r0, fp
 1025ef2:	f7ff f9c1 	bl	1025278 <__ssprint_r>
 1025ef6:	2800      	cmp	r0, #0
 1025ef8:	f47f aeaf 	bne.w	1025c5a <_svfiprintf_r+0x8ea>
 1025efc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1025efe:	af1f      	add	r7, sp, #124	; 0x7c
 1025f00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1025f02:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1025f06:	1c48      	adds	r0, r1, #1
 1025f08:	f7ff bbbd 	b.w	1025686 <_svfiprintf_r+0x316>
 1025f0c:	9a07      	ldr	r2, [sp, #28]
 1025f0e:	6812      	ldr	r2, [r2, #0]
 1025f10:	9307      	str	r3, [sp, #28]
 1025f12:	9b04      	ldr	r3, [sp, #16]
 1025f14:	6013      	str	r3, [r2, #0]
 1025f16:	f7ff ba50 	b.w	10253ba <_svfiprintf_r+0x4a>
 1025f1a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 1025f1e:	2200      	movs	r2, #0
 1025f20:	9702      	str	r7, [sp, #8]
 1025f22:	ae46      	add	r6, sp, #280	; 0x118
 1025f24:	f8cd a020 	str.w	sl, [sp, #32]
 1025f28:	4617      	mov	r7, r2
 1025f2a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 1025f2e:	4699      	mov	r9, r3
 1025f30:	f8cd 8014 	str.w	r8, [sp, #20]
 1025f34:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 1025f38:	e008      	b.n	1025f4c <_svfiprintf_r+0xbdc>
 1025f3a:	f7f5 fd45 	bl	101b9c8 <__aeabi_uldivmod>
 1025f3e:	2d00      	cmp	r5, #0
 1025f40:	bf08      	it	eq
 1025f42:	2c0a      	cmpeq	r4, #10
 1025f44:	d328      	bcc.n	1025f98 <_svfiprintf_r+0xc28>
 1025f46:	4604      	mov	r4, r0
 1025f48:	4646      	mov	r6, r8
 1025f4a:	460d      	mov	r5, r1
 1025f4c:	220a      	movs	r2, #10
 1025f4e:	2300      	movs	r3, #0
 1025f50:	4620      	mov	r0, r4
 1025f52:	4629      	mov	r1, r5
 1025f54:	f7f5 fd38 	bl	101b9c8 <__aeabi_uldivmod>
 1025f58:	3701      	adds	r7, #1
 1025f5a:	4620      	mov	r0, r4
 1025f5c:	4629      	mov	r1, r5
 1025f5e:	f106 38ff 	add.w	r8, r6, #4294967295
 1025f62:	2300      	movs	r3, #0
 1025f64:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1025f68:	220a      	movs	r2, #10
 1025f6a:	f806 cc01 	strb.w	ip, [r6, #-1]
 1025f6e:	f1b9 0f00 	cmp.w	r9, #0
 1025f72:	d0e2      	beq.n	1025f3a <_svfiprintf_r+0xbca>
 1025f74:	f89a 6000 	ldrb.w	r6, [sl]
 1025f78:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1025f7c:	bf18      	it	ne
 1025f7e:	f04f 0c01 	movne.w	ip, #1
 1025f82:	42be      	cmp	r6, r7
 1025f84:	bf18      	it	ne
 1025f86:	f04f 0c00 	movne.w	ip, #0
 1025f8a:	f1bc 0f00 	cmp.w	ip, #0
 1025f8e:	d0d4      	beq.n	1025f3a <_svfiprintf_r+0xbca>
 1025f90:	429d      	cmp	r5, r3
 1025f92:	bf08      	it	eq
 1025f94:	4294      	cmpeq	r4, r2
 1025f96:	d275      	bcs.n	1026084 <_svfiprintf_r+0xd14>
 1025f98:	4642      	mov	r2, r8
 1025f9a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 1025f9e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 1025fa2:	9f02      	ldr	r7, [sp, #8]
 1025fa4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 1025fa8:	f8dd a020 	ldr.w	sl, [sp, #32]
 1025fac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1025fb0:	e5c3      	b.n	1025b3a <_svfiprintf_r+0x7ca>
 1025fb2:	9b03      	ldr	r3, [sp, #12]
 1025fb4:	f24c 128c 	movw	r2, #49548	; 0xc18c
 1025fb8:	9507      	str	r5, [sp, #28]
 1025fba:	f2c0 1206 	movt	r2, #262	; 0x106
 1025fbe:	2b06      	cmp	r3, #6
 1025fc0:	920b      	str	r2, [sp, #44]	; 0x2c
 1025fc2:	bf28      	it	cs
 1025fc4:	2306      	movcs	r3, #6
 1025fc6:	9305      	str	r3, [sp, #20]
 1025fc8:	9302      	str	r3, [sp, #8]
 1025fca:	e55b      	b.n	1025a84 <_svfiprintf_r+0x714>
 1025fcc:	05b5      	lsls	r5, r6, #22
 1025fce:	bf45      	ittet	mi
 1025fd0:	9207      	strmi	r2, [sp, #28]
 1025fd2:	b2e4      	uxtbmi	r4, r4
 1025fd4:	9207      	strpl	r2, [sp, #28]
 1025fd6:	4633      	movmi	r3, r6
 1025fd8:	bf4e      	itee	mi
 1025fda:	2500      	movmi	r5, #0
 1025fdc:	2500      	movpl	r5, #0
 1025fde:	4633      	movpl	r3, r6
 1025fe0:	e58d      	b.n	1025afe <_svfiprintf_r+0x78e>
 1025fe2:	05b5      	lsls	r5, r6, #22
 1025fe4:	f04f 0301 	mov.w	r3, #1
 1025fe8:	bf48      	it	mi
 1025fea:	b2e4      	uxtbmi	r4, r4
 1025fec:	2500      	movs	r5, #0
 1025fee:	f7ff bad2 	b.w	1025596 <_svfiprintf_r+0x226>
 1025ff2:	463b      	mov	r3, r7
 1025ff4:	e611      	b.n	1025c1a <_svfiprintf_r+0x8aa>
 1025ff6:	2300      	movs	r3, #0
 1025ff8:	aa18      	add	r2, sp, #96	; 0x60
 1025ffa:	4619      	mov	r1, r3
 1025ffc:	9200      	str	r2, [sp, #0]
 1025ffe:	4658      	mov	r0, fp
 1026000:	aa15      	add	r2, sp, #84	; 0x54
 1026002:	f7fc f9d1 	bl	10223a8 <_wcsrtombs_r>
 1026006:	1c43      	adds	r3, r0, #1
 1026008:	9005      	str	r0, [sp, #20]
 102600a:	d052      	beq.n	10260b2 <_svfiprintf_r+0xd42>
 102600c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102600e:	9315      	str	r3, [sp, #84]	; 0x54
 1026010:	e738      	b.n	1025e84 <_svfiprintf_r+0xb14>
 1026012:	9b05      	ldr	r3, [sp, #20]
 1026014:	9507      	str	r5, [sp, #28]
 1026016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 102601a:	9308      	str	r3, [sp, #32]
 102601c:	f7ff bae8 	b.w	10255f0 <_svfiprintf_r+0x280>
 1026020:	9a07      	ldr	r2, [sp, #28]
 1026022:	9307      	str	r3, [sp, #28]
 1026024:	9b04      	ldr	r3, [sp, #16]
 1026026:	6812      	ldr	r2, [r2, #0]
 1026028:	8013      	strh	r3, [r2, #0]
 102602a:	f7ff b9c6 	b.w	10253ba <_svfiprintf_r+0x4a>
 102602e:	681c      	ldr	r4, [r3, #0]
 1026030:	4637      	mov	r7, r6
 1026032:	9207      	str	r2, [sp, #28]
 1026034:	17e5      	asrs	r5, r4, #31
 1026036:	4622      	mov	r2, r4
 1026038:	462b      	mov	r3, r5
 102603a:	e532      	b.n	1025aa2 <_svfiprintf_r+0x732>
 102603c:	4658      	mov	r0, fp
 102603e:	aa1a      	add	r2, sp, #104	; 0x68
 1026040:	9909      	ldr	r1, [sp, #36]	; 0x24
 1026042:	f7ff f919 	bl	1025278 <__ssprint_r>
 1026046:	f7ff ba73 	b.w	1025530 <_svfiprintf_r+0x1c0>
 102604a:	1c59      	adds	r1, r3, #1
 102604c:	4658      	mov	r0, fp
 102604e:	f7f6 fbc3 	bl	101c7d8 <_malloc_r>
 1026052:	900b      	str	r0, [sp, #44]	; 0x2c
 1026054:	b368      	cbz	r0, 10260b2 <_svfiprintf_r+0xd42>
 1026056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1026058:	9308      	str	r3, [sp, #32]
 102605a:	e71e      	b.n	1025e9a <_svfiprintf_r+0xb2a>
 102605c:	9b03      	ldr	r3, [sp, #12]
 102605e:	9507      	str	r5, [sp, #28]
 1026060:	9302      	str	r3, [sp, #8]
 1026062:	9305      	str	r3, [sp, #20]
 1026064:	9b08      	ldr	r3, [sp, #32]
 1026066:	9303      	str	r3, [sp, #12]
 1026068:	f7ff bac2 	b.w	10255f0 <_svfiprintf_r+0x280>
 102606c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 102606e:	9403      	str	r4, [sp, #12]
 1026070:	f7f8 fb46 	bl	101e700 <strlen>
 1026074:	9507      	str	r5, [sp, #28]
 1026076:	9408      	str	r4, [sp, #32]
 1026078:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 102607c:	9005      	str	r0, [sp, #20]
 102607e:	9302      	str	r3, [sp, #8]
 1026080:	f7ff bab6 	b.w	10255f0 <_svfiprintf_r+0x280>
 1026084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 1026086:	990f      	ldr	r1, [sp, #60]	; 0x3c
 1026088:	eba8 0802 	sub.w	r8, r8, r2
 102608c:	4640      	mov	r0, r8
 102608e:	f7f8 fc25 	bl	101e8dc <strncpy>
 1026092:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1026096:	b10b      	cbz	r3, 102609c <_svfiprintf_r+0xd2c>
 1026098:	f10a 0a01 	add.w	sl, sl, #1
 102609c:	4620      	mov	r0, r4
 102609e:	4629      	mov	r1, r5
 10260a0:	220a      	movs	r2, #10
 10260a2:	2300      	movs	r3, #0
 10260a4:	f7f5 fc90 	bl	101b9c8 <__aeabi_uldivmod>
 10260a8:	2700      	movs	r7, #0
 10260aa:	e74c      	b.n	1025f46 <_svfiprintf_r+0xbd6>
 10260ac:	463b      	mov	r3, r7
 10260ae:	4601      	mov	r1, r0
 10260b0:	e577      	b.n	1025ba2 <_svfiprintf_r+0x832>
 10260b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10260b4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 10260b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10260bc:	8193      	strh	r3, [r2, #12]
 10260be:	f7ff ba3a 	b.w	1025536 <_svfiprintf_r+0x1c6>
 10260c2:	9a07      	ldr	r2, [sp, #28]
 10260c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 10260c8:	468a      	mov	sl, r1
 10260ca:	f852 0b04 	ldr.w	r0, [r2], #4
 10260ce:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 10260d2:	9207      	str	r2, [sp, #28]
 10260d4:	9103      	str	r1, [sp, #12]
 10260d6:	f7ff b99f 	b.w	1025418 <_svfiprintf_r+0xa8>
 10260da:	4637      	mov	r7, r6
 10260dc:	f7ff bbcc 	b.w	1025878 <_svfiprintf_r+0x508>
 10260e0:	4633      	mov	r3, r6
 10260e2:	f7ff bbbd 	b.w	1025860 <_svfiprintf_r+0x4f0>
 10260e6:	4637      	mov	r7, r6
 10260e8:	e462      	b.n	10259b0 <_svfiprintf_r+0x640>
 10260ea:	230c      	movs	r3, #12
 10260ec:	f04f 32ff 	mov.w	r2, #4294967295
 10260f0:	f8cb 3000 	str.w	r3, [fp]
 10260f4:	9204      	str	r2, [sp, #16]
 10260f6:	f7ff ba25 	b.w	1025544 <_svfiprintf_r+0x1d4>
 10260fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10260fc:	8993      	ldrh	r3, [r2, #12]
 10260fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1026102:	8193      	strh	r3, [r2, #12]
 1026104:	e5a9      	b.n	1025c5a <_svfiprintf_r+0x8ea>
 1026106:	bf00      	nop

01026108 <__sprint_r.part.0>:
 1026108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102610c:	4693      	mov	fp, r2
 102610e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 1026110:	049c      	lsls	r4, r3, #18
 1026112:	d52c      	bpl.n	102616e <__sprint_r.part.0+0x66>
 1026114:	6893      	ldr	r3, [r2, #8]
 1026116:	460e      	mov	r6, r1
 1026118:	6812      	ldr	r2, [r2, #0]
 102611a:	4607      	mov	r7, r0
 102611c:	f102 0908 	add.w	r9, r2, #8
 1026120:	b31b      	cbz	r3, 102616a <__sprint_r.part.0+0x62>
 1026122:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 1026126:	ea5f 089a 	movs.w	r8, sl, lsr #2
 102612a:	d014      	beq.n	1026156 <__sprint_r.part.0+0x4e>
 102612c:	3d04      	subs	r5, #4
 102612e:	2400      	movs	r4, #0
 1026130:	e001      	b.n	1026136 <__sprint_r.part.0+0x2e>
 1026132:	45a0      	cmp	r8, r4
 1026134:	d00d      	beq.n	1026152 <__sprint_r.part.0+0x4a>
 1026136:	4632      	mov	r2, r6
 1026138:	f855 1f04 	ldr.w	r1, [r5, #4]!
 102613c:	4638      	mov	r0, r7
 102613e:	3401      	adds	r4, #1
 1026140:	f001 f9a8 	bl	1027494 <_fputwc_r>
 1026144:	1c43      	adds	r3, r0, #1
 1026146:	d1f4      	bne.n	1026132 <__sprint_r.part.0+0x2a>
 1026148:	2300      	movs	r3, #0
 102614a:	e9cb 3301 	strd	r3, r3, [fp, #4]
 102614e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1026152:	f8db 3008 	ldr.w	r3, [fp, #8]
 1026156:	f02a 0a03 	bic.w	sl, sl, #3
 102615a:	f109 0908 	add.w	r9, r9, #8
 102615e:	eba3 030a 	sub.w	r3, r3, sl
 1026162:	f8cb 3008 	str.w	r3, [fp, #8]
 1026166:	2b00      	cmp	r3, #0
 1026168:	d1db      	bne.n	1026122 <__sprint_r.part.0+0x1a>
 102616a:	2000      	movs	r0, #0
 102616c:	e7ec      	b.n	1026148 <__sprint_r.part.0+0x40>
 102616e:	f7fd fda5 	bl	1023cbc <__sfvwrite_r>
 1026172:	2300      	movs	r3, #0
 1026174:	e9cb 3301 	strd	r3, r3, [fp, #4]
 1026178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0102617c <__sprint_r>:
 102617c:	6893      	ldr	r3, [r2, #8]
 102617e:	b103      	cbz	r3, 1026182 <__sprint_r+0x6>
 1026180:	e7c2      	b.n	1026108 <__sprint_r.part.0>
 1026182:	b410      	push	{r4}
 1026184:	4618      	mov	r0, r3
 1026186:	6053      	str	r3, [r2, #4]
 1026188:	f85d 4b04 	ldr.w	r4, [sp], #4
 102618c:	4770      	bx	lr
 102618e:	bf00      	nop

01026190 <_vfiprintf_r>:
 1026190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1026194:	b0c7      	sub	sp, #284	; 0x11c
 1026196:	4683      	mov	fp, r0
 1026198:	4615      	mov	r5, r2
 102619a:	9106      	str	r1, [sp, #24]
 102619c:	a816      	add	r0, sp, #88	; 0x58
 102619e:	2208      	movs	r2, #8
 10261a0:	2100      	movs	r1, #0
 10261a2:	461c      	mov	r4, r3
 10261a4:	9307      	str	r3, [sp, #28]
 10261a6:	f7f7 fb83 	bl	101d8b0 <memset>
 10261aa:	f1bb 0f00 	cmp.w	fp, #0
 10261ae:	d004      	beq.n	10261ba <_vfiprintf_r+0x2a>
 10261b0:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 10261b4:	2b00      	cmp	r3, #0
 10261b6:	f000 83ac 	beq.w	1026912 <_vfiprintf_r+0x782>
 10261ba:	9906      	ldr	r1, [sp, #24]
 10261bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 10261c0:	b293      	uxth	r3, r2
 10261c2:	049e      	lsls	r6, r3, #18
 10261c4:	d407      	bmi.n	10261d6 <_vfiprintf_r+0x46>
 10261c6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 10261ca:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 10261cc:	818b      	strh	r3, [r1, #12]
 10261ce:	b29b      	uxth	r3, r3
 10261d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 10261d4:	664a      	str	r2, [r1, #100]	; 0x64
 10261d6:	0718      	lsls	r0, r3, #28
 10261d8:	f140 80af 	bpl.w	102633a <_vfiprintf_r+0x1aa>
 10261dc:	9a06      	ldr	r2, [sp, #24]
 10261de:	6912      	ldr	r2, [r2, #16]
 10261e0:	2a00      	cmp	r2, #0
 10261e2:	f000 80aa 	beq.w	102633a <_vfiprintf_r+0x1aa>
 10261e6:	f003 031a 	and.w	r3, r3, #26
 10261ea:	2b0a      	cmp	r3, #10
 10261ec:	f000 80b3 	beq.w	1026356 <_vfiprintf_r+0x1c6>
 10261f0:	2300      	movs	r3, #0
 10261f2:	930c      	str	r3, [sp, #48]	; 0x30
 10261f4:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 10261f8:	f24c 68b8 	movw	r8, #50872	; 0xc6b8
 10261fc:	930d      	str	r3, [sp, #52]	; 0x34
 10261fe:	f2c0 1806 	movt	r8, #262	; 0x106
 1026202:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 1026206:	462f      	mov	r7, r5
 1026208:	9303      	str	r3, [sp, #12]
 102620a:	ab1d      	add	r3, sp, #116	; 0x74
 102620c:	931a      	str	r3, [sp, #104]	; 0x68
 102620e:	4699      	mov	r9, r3
 1026210:	f64c 26e8 	movw	r6, #51944	; 0xcae8
 1026214:	f2c0 1606 	movt	r6, #262	; 0x106
 1026218:	463c      	mov	r4, r7
 102621a:	f8d8 3000 	ldr.w	r3, [r8]
 102621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 1026220:	2b00      	cmp	r3, #0
 1026222:	bf08      	it	eq
 1026224:	4633      	moveq	r3, r6
 1026226:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 102622a:	f7f6 fa13 	bl	101c654 <__locale_mb_cur_max>
 102622e:	ab16      	add	r3, sp, #88	; 0x58
 1026230:	4622      	mov	r2, r4
 1026232:	9300      	str	r3, [sp, #0]
 1026234:	a914      	add	r1, sp, #80	; 0x50
 1026236:	4603      	mov	r3, r0
 1026238:	4658      	mov	r0, fp
 102623a:	47a8      	blx	r5
 102623c:	2800      	cmp	r0, #0
 102623e:	4603      	mov	r3, r0
 1026240:	f000 809f 	beq.w	1026382 <_vfiprintf_r+0x1f2>
 1026244:	f2c0 8095 	blt.w	1026372 <_vfiprintf_r+0x1e2>
 1026248:	9a14      	ldr	r2, [sp, #80]	; 0x50
 102624a:	2a25      	cmp	r2, #37	; 0x25
 102624c:	d001      	beq.n	1026252 <_vfiprintf_r+0xc2>
 102624e:	441c      	add	r4, r3
 1026250:	e7e3      	b.n	102621a <_vfiprintf_r+0x8a>
 1026252:	1be6      	subs	r6, r4, r7
 1026254:	4605      	mov	r5, r0
 1026256:	f040 8097 	bne.w	1026388 <_vfiprintf_r+0x1f8>
 102625a:	2300      	movs	r3, #0
 102625c:	9305      	str	r3, [sp, #20]
 102625e:	461e      	mov	r6, r3
 1026260:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1026264:	7863      	ldrb	r3, [r4, #1]
 1026266:	1c67      	adds	r7, r4, #1
 1026268:	f04f 3aff 	mov.w	sl, #4294967295
 102626c:	3701      	adds	r7, #1
 102626e:	f1a3 0220 	sub.w	r2, r3, #32
 1026272:	2a5a      	cmp	r2, #90	; 0x5a
 1026274:	f200 8351 	bhi.w	102691a <_vfiprintf_r+0x78a>
 1026278:	e8df f012 	tbh	[pc, r2, lsl #1]
 102627c:	034f01bb 	.word	0x034f01bb
 1026280:	0207034f 	.word	0x0207034f
 1026284:	034f034f 	.word	0x034f034f
 1026288:	01ea034f 	.word	0x01ea034f
 102628c:	034f034f 	.word	0x034f034f
 1026290:	01d701dc 	.word	0x01d701dc
 1026294:	0223034f 	.word	0x0223034f
 1026298:	034f020b 	.word	0x034f020b
 102629c:	019a0227 	.word	0x019a0227
 10262a0:	019a019a 	.word	0x019a019a
 10262a4:	019a019a 	.word	0x019a019a
 10262a8:	019a019a 	.word	0x019a019a
 10262ac:	019a019a 	.word	0x019a019a
 10262b0:	034f034f 	.word	0x034f034f
 10262b4:	034f034f 	.word	0x034f034f
 10262b8:	034f034f 	.word	0x034f034f
 10262bc:	034f034f 	.word	0x034f034f
 10262c0:	02ee034f 	.word	0x02ee034f
 10262c4:	034f02e0 	.word	0x034f02e0
 10262c8:	034f034f 	.word	0x034f034f
 10262cc:	034f034f 	.word	0x034f034f
 10262d0:	034f034f 	.word	0x034f034f
 10262d4:	034f034f 	.word	0x034f034f
 10262d8:	0311034f 	.word	0x0311034f
 10262dc:	034f034f 	.word	0x034f034f
 10262e0:	02b8034f 	.word	0x02b8034f
 10262e4:	02aa034f 	.word	0x02aa034f
 10262e8:	034f034f 	.word	0x034f034f
 10262ec:	034f027e 	.word	0x034f027e
 10262f0:	034f034f 	.word	0x034f034f
 10262f4:	034f034f 	.word	0x034f034f
 10262f8:	034f034f 	.word	0x034f034f
 10262fc:	034f034f 	.word	0x034f034f
 1026300:	02ee034f 	.word	0x02ee034f
 1026304:	034f0235 	.word	0x034f0235
 1026308:	034f034f 	.word	0x034f034f
 102630c:	0235022b 	.word	0x0235022b
 1026310:	034f005b 	.word	0x034f005b
 1026314:	034f0341 	.word	0x034f0341
 1026318:	0331031c 	.word	0x0331031c
 102631c:	005b01a8 	.word	0x005b01a8
 1026320:	02b8034f 	.word	0x02b8034f
 1026324:	01c5005d 	.word	0x01c5005d
 1026328:	034f034f 	.word	0x034f034f
 102632c:	034f00b2 	.word	0x034f00b2
 1026330:	005d      	.short	0x005d
 1026332:	f046 0620 	orr.w	r6, r6, #32
 1026336:	783b      	ldrb	r3, [r7, #0]
 1026338:	e798      	b.n	102626c <_vfiprintf_r+0xdc>
 102633a:	9906      	ldr	r1, [sp, #24]
 102633c:	4658      	mov	r0, fp
 102633e:	f7fc f967 	bl	1022610 <__swsetup_r>
 1026342:	2800      	cmp	r0, #0
 1026344:	f040 86c4 	bne.w	10270d0 <_vfiprintf_r+0xf40>
 1026348:	9b06      	ldr	r3, [sp, #24]
 102634a:	899b      	ldrh	r3, [r3, #12]
 102634c:	f003 031a 	and.w	r3, r3, #26
 1026350:	2b0a      	cmp	r3, #10
 1026352:	f47f af4d 	bne.w	10261f0 <_vfiprintf_r+0x60>
 1026356:	9b06      	ldr	r3, [sp, #24]
 1026358:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 102635c:	2b00      	cmp	r3, #0
 102635e:	f6ff af47 	blt.w	10261f0 <_vfiprintf_r+0x60>
 1026362:	4623      	mov	r3, r4
 1026364:	462a      	mov	r2, r5
 1026366:	9906      	ldr	r1, [sp, #24]
 1026368:	4658      	mov	r0, fp
 102636a:	f000 fedd 	bl	1027128 <__sbprintf>
 102636e:	9003      	str	r0, [sp, #12]
 1026370:	e02f      	b.n	10263d2 <_vfiprintf_r+0x242>
 1026372:	2208      	movs	r2, #8
 1026374:	2100      	movs	r1, #0
 1026376:	a816      	add	r0, sp, #88	; 0x58
 1026378:	f7f7 fa9a 	bl	101d8b0 <memset>
 102637c:	2301      	movs	r3, #1
 102637e:	441c      	add	r4, r3
 1026380:	e74b      	b.n	102621a <_vfiprintf_r+0x8a>
 1026382:	1be6      	subs	r6, r4, r7
 1026384:	4605      	mov	r5, r0
 1026386:	d01a      	beq.n	10263be <_vfiprintf_r+0x22e>
 1026388:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 102638c:	e9c9 7600 	strd	r7, r6, [r9]
 1026390:	3301      	adds	r3, #1
 1026392:	4432      	add	r2, r6
 1026394:	2b07      	cmp	r3, #7
 1026396:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 102639a:	dd1e      	ble.n	10263da <_vfiprintf_r+0x24a>
 102639c:	2a00      	cmp	r2, #0
 102639e:	f000 84ce 	beq.w	1026d3e <_vfiprintf_r+0xbae>
 10263a2:	aa1a      	add	r2, sp, #104	; 0x68
 10263a4:	9906      	ldr	r1, [sp, #24]
 10263a6:	4658      	mov	r0, fp
 10263a8:	f7ff feae 	bl	1026108 <__sprint_r.part.0>
 10263ac:	b958      	cbnz	r0, 10263c6 <_vfiprintf_r+0x236>
 10263ae:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10263b2:	9b03      	ldr	r3, [sp, #12]
 10263b4:	4433      	add	r3, r6
 10263b6:	9303      	str	r3, [sp, #12]
 10263b8:	2d00      	cmp	r5, #0
 10263ba:	f47f af4e 	bne.w	102625a <_vfiprintf_r+0xca>
 10263be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 10263c0:	2b00      	cmp	r3, #0
 10263c2:	f040 8633 	bne.w	102702c <_vfiprintf_r+0xe9c>
 10263c6:	9b06      	ldr	r3, [sp, #24]
 10263c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 10263cc:	065b      	lsls	r3, r3, #25
 10263ce:	f100 867f 	bmi.w	10270d0 <_vfiprintf_r+0xf40>
 10263d2:	9803      	ldr	r0, [sp, #12]
 10263d4:	b047      	add	sp, #284	; 0x11c
 10263d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10263da:	f109 0908 	add.w	r9, r9, #8
 10263de:	e7e8      	b.n	10263b2 <_vfiprintf_r+0x222>
 10263e0:	06b1      	lsls	r1, r6, #26
 10263e2:	f24c 1278 	movw	r2, #49528	; 0xc178
 10263e6:	f2c0 1206 	movt	r2, #262	; 0x106
 10263ea:	920c      	str	r2, [sp, #48]	; 0x30
 10263ec:	f140 81cc 	bpl.w	1026788 <_vfiprintf_r+0x5f8>
 10263f0:	9d07      	ldr	r5, [sp, #28]
 10263f2:	3507      	adds	r5, #7
 10263f4:	f025 0207 	bic.w	r2, r5, #7
 10263f8:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10263fc:	9207      	str	r2, [sp, #28]
 10263fe:	ea54 0205 	orrs.w	r2, r4, r5
 1026402:	f006 0201 	and.w	r2, r6, #1
 1026406:	bf08      	it	eq
 1026408:	2200      	moveq	r2, #0
 102640a:	2a00      	cmp	r2, #0
 102640c:	f040 81d8 	bne.w	10267c0 <_vfiprintf_r+0x630>
 1026410:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 1026414:	9302      	str	r3, [sp, #8]
 1026416:	2302      	movs	r3, #2
 1026418:	f1ba 3fff 	cmp.w	sl, #4294967295
 102641c:	f04f 0200 	mov.w	r2, #0
 1026420:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1026424:	f000 818a 	beq.w	102673c <_vfiprintf_r+0x5ac>
 1026428:	ea54 0205 	orrs.w	r2, r4, r5
 102642c:	9a02      	ldr	r2, [sp, #8]
 102642e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 1026432:	bf14      	ite	ne
 1026434:	2201      	movne	r2, #1
 1026436:	2200      	moveq	r2, #0
 1026438:	f1ba 0f00 	cmp.w	sl, #0
 102643c:	bf18      	it	ne
 102643e:	2201      	movne	r2, #1
 1026440:	2a00      	cmp	r2, #0
 1026442:	f040 84ac 	bne.w	1026d9e <_vfiprintf_r+0xc0e>
 1026446:	2b00      	cmp	r3, #0
 1026448:	f040 845e 	bne.w	1026d08 <_vfiprintf_r+0xb78>
 102644c:	9a02      	ldr	r2, [sp, #8]
 102644e:	469a      	mov	sl, r3
 1026450:	f012 0201 	ands.w	r2, r2, #1
 1026454:	9204      	str	r2, [sp, #16]
 1026456:	bf04      	itt	eq
 1026458:	ab46      	addeq	r3, sp, #280	; 0x118
 102645a:	930b      	streq	r3, [sp, #44]	; 0x2c
 102645c:	d005      	beq.n	102646a <_vfiprintf_r+0x2da>
 102645e:	2330      	movs	r3, #48	; 0x30
 1026460:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 1026464:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1026468:	930b      	str	r3, [sp, #44]	; 0x2c
 102646a:	9b04      	ldr	r3, [sp, #16]
 102646c:	4553      	cmp	r3, sl
 102646e:	bfb8      	it	lt
 1026470:	4653      	movlt	r3, sl
 1026472:	9302      	str	r3, [sp, #8]
 1026474:	2300      	movs	r3, #0
 1026476:	9308      	str	r3, [sp, #32]
 1026478:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 102647c:	b113      	cbz	r3, 1026484 <_vfiprintf_r+0x2f4>
 102647e:	9b02      	ldr	r3, [sp, #8]
 1026480:	3301      	adds	r3, #1
 1026482:	9302      	str	r3, [sp, #8]
 1026484:	f016 0302 	ands.w	r3, r6, #2
 1026488:	9309      	str	r3, [sp, #36]	; 0x24
 102648a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	; 0x6c
 102648e:	bf18      	it	ne
 1026490:	9b02      	ldrne	r3, [sp, #8]
 1026492:	f102 0101 	add.w	r1, r2, #1
 1026496:	bf1c      	itt	ne
 1026498:	3302      	addne	r3, #2
 102649a:	9302      	strne	r3, [sp, #8]
 102649c:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 10264a0:	4608      	mov	r0, r1
 10264a2:	930a      	str	r3, [sp, #40]	; 0x28
 10264a4:	d105      	bne.n	10264b2 <_vfiprintf_r+0x322>
 10264a6:	9b05      	ldr	r3, [sp, #20]
 10264a8:	9c02      	ldr	r4, [sp, #8]
 10264aa:	1b1c      	subs	r4, r3, r4
 10264ac:	2c00      	cmp	r4, #0
 10264ae:	f300 8381 	bgt.w	1026bb4 <_vfiprintf_r+0xa24>
 10264b2:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 10264b6:	f109 0108 	add.w	r1, r9, #8
 10264ba:	b194      	cbz	r4, 10264e2 <_vfiprintf_r+0x352>
 10264bc:	2807      	cmp	r0, #7
 10264be:	f10d 024b 	add.w	r2, sp, #75	; 0x4b
 10264c2:	f10c 0c01 	add.w	ip, ip, #1
 10264c6:	f8c9 2000 	str.w	r2, [r9]
 10264ca:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 10264ce:	f04f 0201 	mov.w	r2, #1
 10264d2:	f8c9 2004 	str.w	r2, [r9, #4]
 10264d6:	f300 834b 	bgt.w	1026b70 <_vfiprintf_r+0x9e0>
 10264da:	4602      	mov	r2, r0
 10264dc:	4689      	mov	r9, r1
 10264de:	3001      	adds	r0, #1
 10264e0:	3108      	adds	r1, #8
 10264e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10264e4:	b303      	cbz	r3, 1026528 <_vfiprintf_r+0x398>
 10264e6:	2807      	cmp	r0, #7
 10264e8:	ab13      	add	r3, sp, #76	; 0x4c
 10264ea:	f10c 0c02 	add.w	ip, ip, #2
 10264ee:	f8c9 3000 	str.w	r3, [r9]
 10264f2:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 10264f6:	f04f 0302 	mov.w	r3, #2
 10264fa:	f8c9 3004 	str.w	r3, [r9, #4]
 10264fe:	f340 8354 	ble.w	1026baa <_vfiprintf_r+0xa1a>
 1026502:	f1bc 0f00 	cmp.w	ip, #0
 1026506:	f000 8430 	beq.w	1026d6a <_vfiprintf_r+0xbda>
 102650a:	aa1a      	add	r2, sp, #104	; 0x68
 102650c:	9906      	ldr	r1, [sp, #24]
 102650e:	4658      	mov	r0, fp
 1026510:	f7ff fdfa 	bl	1026108 <__sprint_r.part.0>
 1026514:	2800      	cmp	r0, #0
 1026516:	f040 8322 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 102651a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 102651c:	a91f      	add	r1, sp, #124	; 0x7c
 102651e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1026522:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026526:	1c50      	adds	r0, r2, #1
 1026528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 102652a:	2b80      	cmp	r3, #128	; 0x80
 102652c:	f000 8266 	beq.w	10269fc <_vfiprintf_r+0x86c>
 1026530:	9b04      	ldr	r3, [sp, #16]
 1026532:	ebaa 0403 	sub.w	r4, sl, r3
 1026536:	2c00      	cmp	r4, #0
 1026538:	f300 82c2 	bgt.w	1026ac0 <_vfiprintf_r+0x930>
 102653c:	9a04      	ldr	r2, [sp, #16]
 102653e:	2807      	cmp	r0, #7
 1026540:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 1026542:	901b      	str	r0, [sp, #108]	; 0x6c
 1026544:	4613      	mov	r3, r2
 1026546:	f8c9 2004 	str.w	r2, [r9, #4]
 102654a:	4463      	add	r3, ip
 102654c:	f8c9 4000 	str.w	r4, [r9]
 1026550:	931c      	str	r3, [sp, #112]	; 0x70
 1026552:	dd0c      	ble.n	102656e <_vfiprintf_r+0x3de>
 1026554:	2b00      	cmp	r3, #0
 1026556:	f000 837b 	beq.w	1026c50 <_vfiprintf_r+0xac0>
 102655a:	aa1a      	add	r2, sp, #104	; 0x68
 102655c:	9906      	ldr	r1, [sp, #24]
 102655e:	4658      	mov	r0, fp
 1026560:	f7ff fdd2 	bl	1026108 <__sprint_r.part.0>
 1026564:	2800      	cmp	r0, #0
 1026566:	f040 82fa 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 102656a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 102656c:	a91d      	add	r1, sp, #116	; 0x74
 102656e:	0772      	lsls	r2, r6, #29
 1026570:	d505      	bpl.n	102657e <_vfiprintf_r+0x3ee>
 1026572:	9a05      	ldr	r2, [sp, #20]
 1026574:	9802      	ldr	r0, [sp, #8]
 1026576:	1a14      	subs	r4, r2, r0
 1026578:	2c00      	cmp	r4, #0
 102657a:	f300 8372 	bgt.w	1026c62 <_vfiprintf_r+0xad2>
 102657e:	9a03      	ldr	r2, [sp, #12]
 1026580:	9905      	ldr	r1, [sp, #20]
 1026582:	9802      	ldr	r0, [sp, #8]
 1026584:	4281      	cmp	r1, r0
 1026586:	bfac      	ite	ge
 1026588:	1852      	addge	r2, r2, r1
 102658a:	1812      	addlt	r2, r2, r0
 102658c:	9203      	str	r2, [sp, #12]
 102658e:	2b00      	cmp	r3, #0
 1026590:	f040 82dd 	bne.w	1026b4e <_vfiprintf_r+0x9be>
 1026594:	9908      	ldr	r1, [sp, #32]
 1026596:	2300      	movs	r3, #0
 1026598:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 102659c:	931b      	str	r3, [sp, #108]	; 0x6c
 102659e:	2900      	cmp	r1, #0
 10265a0:	f43f ae36 	beq.w	1026210 <_vfiprintf_r+0x80>
 10265a4:	4658      	mov	r0, fp
 10265a6:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10265aa:	f7fd fa8f 	bl	1023acc <_free_r>
 10265ae:	e62f      	b.n	1026210 <_vfiprintf_r+0x80>
 10265b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10265b4:	2100      	movs	r1, #0
 10265b6:	f817 3b01 	ldrb.w	r3, [r7], #1
 10265ba:	200a      	movs	r0, #10
 10265bc:	fb00 2101 	mla	r1, r0, r1, r2
 10265c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10265c4:	2a09      	cmp	r2, #9
 10265c6:	d9f6      	bls.n	10265b6 <_vfiprintf_r+0x426>
 10265c8:	9105      	str	r1, [sp, #20]
 10265ca:	e650      	b.n	102626e <_vfiprintf_r+0xde>
 10265cc:	9b07      	ldr	r3, [sp, #28]
 10265ce:	f046 0202 	orr.w	r2, r6, #2
 10265d2:	f24c 1178 	movw	r1, #49528	; 0xc178
 10265d6:	9202      	str	r2, [sp, #8]
 10265d8:	f2c0 1106 	movt	r1, #262	; 0x106
 10265dc:	f647 0230 	movw	r2, #30768	; 0x7830
 10265e0:	f853 4b04 	ldr.w	r4, [r3], #4
 10265e4:	2500      	movs	r5, #0
 10265e6:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 10265ea:	910c      	str	r1, [sp, #48]	; 0x30
 10265ec:	9307      	str	r3, [sp, #28]
 10265ee:	2302      	movs	r3, #2
 10265f0:	e712      	b.n	1026418 <_vfiprintf_r+0x288>
 10265f2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 10265f6:	783b      	ldrb	r3, [r7, #0]
 10265f8:	2a00      	cmp	r2, #0
 10265fa:	f47f ae37 	bne.w	102626c <_vfiprintf_r+0xdc>
 10265fe:	2220      	movs	r2, #32
 1026600:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1026604:	e632      	b.n	102626c <_vfiprintf_r+0xdc>
 1026606:	06b2      	lsls	r2, r6, #26
 1026608:	f100 81c1 	bmi.w	102698e <_vfiprintf_r+0x7fe>
 102660c:	9a07      	ldr	r2, [sp, #28]
 102660e:	06f3      	lsls	r3, r6, #27
 1026610:	f852 4b04 	ldr.w	r4, [r2], #4
 1026614:	f100 8571 	bmi.w	10270fa <_vfiprintf_r+0xf6a>
 1026618:	0675      	lsls	r5, r6, #25
 102661a:	9207      	str	r2, [sp, #28]
 102661c:	9602      	str	r6, [sp, #8]
 102661e:	f140 84c7 	bpl.w	1026fb0 <_vfiprintf_r+0xe20>
 1026622:	b2a4      	uxth	r4, r4
 1026624:	2500      	movs	r5, #0
 1026626:	2301      	movs	r3, #1
 1026628:	e6f6      	b.n	1026418 <_vfiprintf_r+0x288>
 102662a:	232b      	movs	r3, #43	; 0x2b
 102662c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1026630:	783b      	ldrb	r3, [r7, #0]
 1026632:	e61b      	b.n	102626c <_vfiprintf_r+0xdc>
 1026634:	9a07      	ldr	r2, [sp, #28]
 1026636:	783b      	ldrb	r3, [r7, #0]
 1026638:	f852 1b04 	ldr.w	r1, [r2], #4
 102663c:	2900      	cmp	r1, #0
 102663e:	9105      	str	r1, [sp, #20]
 1026640:	bfa8      	it	ge
 1026642:	9207      	strge	r2, [sp, #28]
 1026644:	f6bf ae12 	bge.w	102626c <_vfiprintf_r+0xdc>
 1026648:	4249      	negs	r1, r1
 102664a:	9207      	str	r2, [sp, #28]
 102664c:	9105      	str	r1, [sp, #20]
 102664e:	e039      	b.n	10266c4 <_vfiprintf_r+0x534>
 1026650:	4658      	mov	r0, fp
 1026652:	f7fd fd63 	bl	102411c <_localeconv_r>
 1026656:	6843      	ldr	r3, [r0, #4]
 1026658:	4618      	mov	r0, r3
 102665a:	930e      	str	r3, [sp, #56]	; 0x38
 102665c:	f7f8 f850 	bl	101e700 <strlen>
 1026660:	4604      	mov	r4, r0
 1026662:	900f      	str	r0, [sp, #60]	; 0x3c
 1026664:	4658      	mov	r0, fp
 1026666:	f7fd fd59 	bl	102411c <_localeconv_r>
 102666a:	6883      	ldr	r3, [r0, #8]
 102666c:	2c00      	cmp	r4, #0
 102666e:	bf18      	it	ne
 1026670:	2b00      	cmpne	r3, #0
 1026672:	930d      	str	r3, [sp, #52]	; 0x34
 1026674:	f43f ae5f 	beq.w	1026336 <_vfiprintf_r+0x1a6>
 1026678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 102667a:	781a      	ldrb	r2, [r3, #0]
 102667c:	783b      	ldrb	r3, [r7, #0]
 102667e:	2a00      	cmp	r2, #0
 1026680:	f43f adf4 	beq.w	102626c <_vfiprintf_r+0xdc>
 1026684:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 1026688:	e5f0      	b.n	102626c <_vfiprintf_r+0xdc>
 102668a:	f046 0601 	orr.w	r6, r6, #1
 102668e:	783b      	ldrb	r3, [r7, #0]
 1026690:	e5ec      	b.n	102626c <_vfiprintf_r+0xdc>
 1026692:	4639      	mov	r1, r7
 1026694:	f811 3b01 	ldrb.w	r3, [r1], #1
 1026698:	2b2a      	cmp	r3, #42	; 0x2a
 102669a:	f000 851e 	beq.w	10270da <_vfiprintf_r+0xf4a>
 102669e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10266a2:	460f      	mov	r7, r1
 10266a4:	2a09      	cmp	r2, #9
 10266a6:	f04f 0a00 	mov.w	sl, #0
 10266aa:	f63f ade0 	bhi.w	102626e <_vfiprintf_r+0xde>
 10266ae:	f817 3b01 	ldrb.w	r3, [r7], #1
 10266b2:	210a      	movs	r1, #10
 10266b4:	fb01 2a0a 	mla	sl, r1, sl, r2
 10266b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10266bc:	2a09      	cmp	r2, #9
 10266be:	d9f6      	bls.n	10266ae <_vfiprintf_r+0x51e>
 10266c0:	e5d5      	b.n	102626e <_vfiprintf_r+0xde>
 10266c2:	783b      	ldrb	r3, [r7, #0]
 10266c4:	f046 0604 	orr.w	r6, r6, #4
 10266c8:	e5d0      	b.n	102626c <_vfiprintf_r+0xdc>
 10266ca:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 10266ce:	783b      	ldrb	r3, [r7, #0]
 10266d0:	e5cc      	b.n	102626c <_vfiprintf_r+0xdc>
 10266d2:	783b      	ldrb	r3, [r7, #0]
 10266d4:	2b68      	cmp	r3, #104	; 0x68
 10266d6:	bf09      	itett	eq
 10266d8:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 10266dc:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 10266e0:	787b      	ldrbeq	r3, [r7, #1]
 10266e2:	3701      	addeq	r7, #1
 10266e4:	e5c2      	b.n	102626c <_vfiprintf_r+0xdc>
 10266e6:	06b3      	lsls	r3, r6, #26
 10266e8:	f100 8128 	bmi.w	102693c <_vfiprintf_r+0x7ac>
 10266ec:	9b07      	ldr	r3, [sp, #28]
 10266ee:	06f5      	lsls	r5, r6, #27
 10266f0:	f103 0204 	add.w	r2, r3, #4
 10266f4:	f100 8504 	bmi.w	1027100 <_vfiprintf_r+0xf70>
 10266f8:	9b07      	ldr	r3, [sp, #28]
 10266fa:	0674      	lsls	r4, r6, #25
 10266fc:	bf48      	it	mi
 10266fe:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1026702:	d404      	bmi.n	102670e <_vfiprintf_r+0x57e>
 1026704:	05b0      	lsls	r0, r6, #22
 1026706:	f140 848a 	bpl.w	102701e <_vfiprintf_r+0xe8e>
 102670a:	f993 4000 	ldrsb.w	r4, [r3]
 102670e:	17e5      	asrs	r5, r4, #31
 1026710:	9207      	str	r2, [sp, #28]
 1026712:	4622      	mov	r2, r4
 1026714:	2a00      	cmp	r2, #0
 1026716:	462b      	mov	r3, r5
 1026718:	f173 0300 	sbcs.w	r3, r3, #0
 102671c:	9602      	str	r6, [sp, #8]
 102671e:	f280 811d 	bge.w	102695c <_vfiprintf_r+0x7cc>
 1026722:	4264      	negs	r4, r4
 1026724:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1026728:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 102672c:	f04f 0301 	mov.w	r3, #1
 1026730:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1026734:	f1ba 3fff 	cmp.w	sl, #4294967295
 1026738:	f47f ae76 	bne.w	1026428 <_vfiprintf_r+0x298>
 102673c:	2b01      	cmp	r3, #1
 102673e:	f000 8304 	beq.w	1026d4a <_vfiprintf_r+0xbba>
 1026742:	2b02      	cmp	r3, #2
 1026744:	bf18      	it	ne
 1026746:	a946      	addne	r1, sp, #280	; 0x118
 1026748:	f040 8139 	bne.w	10269be <_vfiprintf_r+0x82e>
 102674c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 102674e:	aa46      	add	r2, sp, #280	; 0x118
 1026750:	f004 010f 	and.w	r1, r4, #15
 1026754:	0923      	lsrs	r3, r4, #4
 1026756:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 102675a:	0928      	lsrs	r0, r5, #4
 102675c:	5c71      	ldrb	r1, [r6, r1]
 102675e:	461c      	mov	r4, r3
 1026760:	4605      	mov	r5, r0
 1026762:	ea54 0305 	orrs.w	r3, r4, r5
 1026766:	f802 1d01 	strb.w	r1, [r2, #-1]!
 102676a:	d1f1      	bne.n	1026750 <_vfiprintf_r+0x5c0>
 102676c:	ab46      	add	r3, sp, #280	; 0x118
 102676e:	920b      	str	r2, [sp, #44]	; 0x2c
 1026770:	1a9b      	subs	r3, r3, r2
 1026772:	9e02      	ldr	r6, [sp, #8]
 1026774:	9304      	str	r3, [sp, #16]
 1026776:	e678      	b.n	102646a <_vfiprintf_r+0x2da>
 1026778:	06b1      	lsls	r1, r6, #26
 102677a:	f64b 62d4 	movw	r2, #48852	; 0xbed4
 102677e:	f2c0 1206 	movt	r2, #262	; 0x106
 1026782:	920c      	str	r2, [sp, #48]	; 0x30
 1026784:	f53f ae34 	bmi.w	10263f0 <_vfiprintf_r+0x260>
 1026788:	9a07      	ldr	r2, [sp, #28]
 102678a:	f852 4b04 	ldr.w	r4, [r2], #4
 102678e:	9207      	str	r2, [sp, #28]
 1026790:	06f2      	lsls	r2, r6, #27
 1026792:	d40b      	bmi.n	10267ac <_vfiprintf_r+0x61c>
 1026794:	0675      	lsls	r5, r6, #25
 1026796:	bf44      	itt	mi
 1026798:	b2a4      	uxthmi	r4, r4
 102679a:	2500      	movmi	r5, #0
 102679c:	f53f ae2f 	bmi.w	10263fe <_vfiprintf_r+0x26e>
 10267a0:	05b0      	lsls	r0, r6, #22
 10267a2:	bf44      	itt	mi
 10267a4:	b2e4      	uxtbmi	r4, r4
 10267a6:	2500      	movmi	r5, #0
 10267a8:	f53f ae29 	bmi.w	10263fe <_vfiprintf_r+0x26e>
 10267ac:	2500      	movs	r5, #0
 10267ae:	ea54 0205 	orrs.w	r2, r4, r5
 10267b2:	f006 0201 	and.w	r2, r6, #1
 10267b6:	bf08      	it	eq
 10267b8:	2200      	moveq	r2, #0
 10267ba:	2a00      	cmp	r2, #0
 10267bc:	f43f ae28 	beq.w	1026410 <_vfiprintf_r+0x280>
 10267c0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 10267c4:	f046 0602 	orr.w	r6, r6, #2
 10267c8:	2330      	movs	r3, #48	; 0x30
 10267ca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 10267ce:	e61f      	b.n	1026410 <_vfiprintf_r+0x280>
 10267d0:	06b1      	lsls	r1, r6, #26
 10267d2:	f046 0310 	orr.w	r3, r6, #16
 10267d6:	9302      	str	r3, [sp, #8]
 10267d8:	f100 80da 	bmi.w	1026990 <_vfiprintf_r+0x800>
 10267dc:	9b07      	ldr	r3, [sp, #28]
 10267de:	1d1a      	adds	r2, r3, #4
 10267e0:	9b07      	ldr	r3, [sp, #28]
 10267e2:	2500      	movs	r5, #0
 10267e4:	9207      	str	r2, [sp, #28]
 10267e6:	681c      	ldr	r4, [r3, #0]
 10267e8:	2301      	movs	r3, #1
 10267ea:	e615      	b.n	1026418 <_vfiprintf_r+0x288>
 10267ec:	9d07      	ldr	r5, [sp, #28]
 10267ee:	2200      	movs	r2, #0
 10267f0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10267f4:	f855 1b04 	ldr.w	r1, [r5], #4
 10267f8:	910b      	str	r1, [sp, #44]	; 0x2c
 10267fa:	2900      	cmp	r1, #0
 10267fc:	f000 8373 	beq.w	1026ee6 <_vfiprintf_r+0xd56>
 1026800:	2b53      	cmp	r3, #83	; 0x53
 1026802:	f000 82ff 	beq.w	1026e04 <_vfiprintf_r+0xc74>
 1026806:	f016 0410 	ands.w	r4, r6, #16
 102680a:	f040 82fb 	bne.w	1026e04 <_vfiprintf_r+0xc74>
 102680e:	f1ba 3fff 	cmp.w	sl, #4294967295
 1026812:	f000 8420 	beq.w	1027056 <_vfiprintf_r+0xec6>
 1026816:	4652      	mov	r2, sl
 1026818:	4621      	mov	r1, r4
 102681a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 102681c:	f7fd fdc8 	bl	10243b0 <memchr>
 1026820:	9008      	str	r0, [sp, #32]
 1026822:	2800      	cmp	r0, #0
 1026824:	f000 840e 	beq.w	1027044 <_vfiprintf_r+0xeb4>
 1026828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 102682a:	46a2      	mov	sl, r4
 102682c:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1026830:	1a83      	subs	r3, r0, r2
 1026832:	9304      	str	r3, [sp, #16]
 1026834:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1026838:	9302      	str	r3, [sp, #8]
 102683a:	e61d      	b.n	1026478 <_vfiprintf_r+0x2e8>
 102683c:	06b2      	lsls	r2, r6, #26
 102683e:	f046 0310 	orr.w	r3, r6, #16
 1026842:	9302      	str	r3, [sp, #8]
 1026844:	d47b      	bmi.n	102693e <_vfiprintf_r+0x7ae>
 1026846:	9b07      	ldr	r3, [sp, #28]
 1026848:	1d1a      	adds	r2, r3, #4
 102684a:	9b07      	ldr	r3, [sp, #28]
 102684c:	9207      	str	r2, [sp, #28]
 102684e:	681c      	ldr	r4, [r3, #0]
 1026850:	17e5      	asrs	r5, r4, #31
 1026852:	4622      	mov	r2, r4
 1026854:	462b      	mov	r3, r5
 1026856:	e07c      	b.n	1026952 <_vfiprintf_r+0x7c2>
 1026858:	9a07      	ldr	r2, [sp, #28]
 102685a:	2b43      	cmp	r3, #67	; 0x43
 102685c:	f102 0404 	add.w	r4, r2, #4
 1026860:	d002      	beq.n	1026868 <_vfiprintf_r+0x6d8>
 1026862:	06f1      	lsls	r1, r6, #27
 1026864:	f140 82b5 	bpl.w	1026dd2 <_vfiprintf_r+0xc42>
 1026868:	2208      	movs	r2, #8
 102686a:	2100      	movs	r1, #0
 102686c:	a818      	add	r0, sp, #96	; 0x60
 102686e:	ad2d      	add	r5, sp, #180	; 0xb4
 1026870:	f7f7 f81e 	bl	101d8b0 <memset>
 1026874:	9a07      	ldr	r2, [sp, #28]
 1026876:	ab18      	add	r3, sp, #96	; 0x60
 1026878:	4629      	mov	r1, r5
 102687a:	4658      	mov	r0, fp
 102687c:	6812      	ldr	r2, [r2, #0]
 102687e:	f7fb fd3d 	bl	10222fc <_wcrtomb_r>
 1026882:	1c43      	adds	r3, r0, #1
 1026884:	9004      	str	r0, [sp, #16]
 1026886:	f000 8413 	beq.w	10270b0 <_vfiprintf_r+0xf20>
 102688a:	9b04      	ldr	r3, [sp, #16]
 102688c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1026890:	9302      	str	r3, [sp, #8]
 1026892:	2300      	movs	r3, #0
 1026894:	9407      	str	r4, [sp, #28]
 1026896:	950b      	str	r5, [sp, #44]	; 0x2c
 1026898:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 102689c:	e04a      	b.n	1026934 <_vfiprintf_r+0x7a4>
 102689e:	06b1      	lsls	r1, r6, #26
 10268a0:	f046 0310 	orr.w	r3, r6, #16
 10268a4:	d47e      	bmi.n	10269a4 <_vfiprintf_r+0x814>
 10268a6:	9a07      	ldr	r2, [sp, #28]
 10268a8:	3204      	adds	r2, #4
 10268aa:	9907      	ldr	r1, [sp, #28]
 10268ac:	2500      	movs	r5, #0
 10268ae:	9207      	str	r2, [sp, #28]
 10268b0:	680c      	ldr	r4, [r1, #0]
 10268b2:	e07e      	b.n	10269b2 <_vfiprintf_r+0x822>
 10268b4:	9a07      	ldr	r2, [sp, #28]
 10268b6:	06b1      	lsls	r1, r6, #26
 10268b8:	f102 0304 	add.w	r3, r2, #4
 10268bc:	f100 8278 	bmi.w	1026db0 <_vfiprintf_r+0xc20>
 10268c0:	06f5      	lsls	r5, r6, #27
 10268c2:	f100 8309 	bmi.w	1026ed8 <_vfiprintf_r+0xd48>
 10268c6:	0674      	lsls	r4, r6, #25
 10268c8:	f100 83a2 	bmi.w	1027010 <_vfiprintf_r+0xe80>
 10268cc:	05b0      	lsls	r0, r6, #22
 10268ce:	f140 8303 	bpl.w	1026ed8 <_vfiprintf_r+0xd48>
 10268d2:	9a07      	ldr	r2, [sp, #28]
 10268d4:	9307      	str	r3, [sp, #28]
 10268d6:	9b03      	ldr	r3, [sp, #12]
 10268d8:	6812      	ldr	r2, [r2, #0]
 10268da:	7013      	strb	r3, [r2, #0]
 10268dc:	e498      	b.n	1026210 <_vfiprintf_r+0x80>
 10268de:	06b2      	lsls	r2, r6, #26
 10268e0:	d45f      	bmi.n	10269a2 <_vfiprintf_r+0x812>
 10268e2:	9a07      	ldr	r2, [sp, #28]
 10268e4:	06f3      	lsls	r3, r6, #27
 10268e6:	f852 4b04 	ldr.w	r4, [r2], #4
 10268ea:	f100 840c 	bmi.w	1027106 <_vfiprintf_r+0xf76>
 10268ee:	0675      	lsls	r5, r6, #25
 10268f0:	f140 8353 	bpl.w	1026f9a <_vfiprintf_r+0xe0a>
 10268f4:	4633      	mov	r3, r6
 10268f6:	9207      	str	r2, [sp, #28]
 10268f8:	b2a4      	uxth	r4, r4
 10268fa:	2500      	movs	r5, #0
 10268fc:	e059      	b.n	10269b2 <_vfiprintf_r+0x822>
 10268fe:	783b      	ldrb	r3, [r7, #0]
 1026900:	2b6c      	cmp	r3, #108	; 0x6c
 1026902:	bf09      	itett	eq
 1026904:	f046 0620 	orreq.w	r6, r6, #32
 1026908:	f046 0610 	orrne.w	r6, r6, #16
 102690c:	787b      	ldrbeq	r3, [r7, #1]
 102690e:	3701      	addeq	r7, #1
 1026910:	e4ac      	b.n	102626c <_vfiprintf_r+0xdc>
 1026912:	4658      	mov	r0, fp
 1026914:	f7fd f83a 	bl	102398c <__sinit>
 1026918:	e44f      	b.n	10261ba <_vfiprintf_r+0x2a>
 102691a:	2b00      	cmp	r3, #0
 102691c:	f43f ad4f 	beq.w	10263be <_vfiprintf_r+0x22e>
 1026920:	2201      	movs	r2, #1
 1026922:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1026926:	9202      	str	r2, [sp, #8]
 1026928:	2300      	movs	r3, #0
 102692a:	9204      	str	r2, [sp, #16]
 102692c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1026930:	ab2d      	add	r3, sp, #180	; 0xb4
 1026932:	930b      	str	r3, [sp, #44]	; 0x2c
 1026934:	2300      	movs	r3, #0
 1026936:	9308      	str	r3, [sp, #32]
 1026938:	469a      	mov	sl, r3
 102693a:	e5a3      	b.n	1026484 <_vfiprintf_r+0x2f4>
 102693c:	9602      	str	r6, [sp, #8]
 102693e:	9d07      	ldr	r5, [sp, #28]
 1026940:	3507      	adds	r5, #7
 1026942:	f025 0307 	bic.w	r3, r5, #7
 1026946:	4619      	mov	r1, r3
 1026948:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 102694c:	4614      	mov	r4, r2
 102694e:	461d      	mov	r5, r3
 1026950:	9107      	str	r1, [sp, #28]
 1026952:	2a00      	cmp	r2, #0
 1026954:	f173 0300 	sbcs.w	r3, r3, #0
 1026958:	f6ff aee3 	blt.w	1026722 <_vfiprintf_r+0x592>
 102695c:	f1ba 3fff 	cmp.w	sl, #4294967295
 1026960:	f000 81f3 	beq.w	1026d4a <_vfiprintf_r+0xbba>
 1026964:	ea54 0305 	orrs.w	r3, r4, r5
 1026968:	9b02      	ldr	r3, [sp, #8]
 102696a:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 102696e:	bf14      	ite	ne
 1026970:	2301      	movne	r3, #1
 1026972:	2300      	moveq	r3, #0
 1026974:	f1ba 0f00 	cmp.w	sl, #0
 1026978:	bf18      	it	ne
 102697a:	2301      	movne	r3, #1
 102697c:	2b00      	cmp	r3, #0
 102697e:	f040 81e3 	bne.w	1026d48 <_vfiprintf_r+0xbb8>
 1026982:	469a      	mov	sl, r3
 1026984:	ab46      	add	r3, sp, #280	; 0x118
 1026986:	f8cd a010 	str.w	sl, [sp, #16]
 102698a:	930b      	str	r3, [sp, #44]	; 0x2c
 102698c:	e56d      	b.n	102646a <_vfiprintf_r+0x2da>
 102698e:	9602      	str	r6, [sp, #8]
 1026990:	9d07      	ldr	r5, [sp, #28]
 1026992:	2301      	movs	r3, #1
 1026994:	3507      	adds	r5, #7
 1026996:	f025 0207 	bic.w	r2, r5, #7
 102699a:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 102699e:	9207      	str	r2, [sp, #28]
 10269a0:	e53a      	b.n	1026418 <_vfiprintf_r+0x288>
 10269a2:	4633      	mov	r3, r6
 10269a4:	9d07      	ldr	r5, [sp, #28]
 10269a6:	3507      	adds	r5, #7
 10269a8:	f025 0207 	bic.w	r2, r5, #7
 10269ac:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10269b0:	9207      	str	r2, [sp, #28]
 10269b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 10269b6:	9302      	str	r3, [sp, #8]
 10269b8:	2300      	movs	r3, #0
 10269ba:	e52d      	b.n	1026418 <_vfiprintf_r+0x288>
 10269bc:	4611      	mov	r1, r2
 10269be:	08e2      	lsrs	r2, r4, #3
 10269c0:	08e8      	lsrs	r0, r5, #3
 10269c2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 10269c6:	f004 0307 	and.w	r3, r4, #7
 10269ca:	4605      	mov	r5, r0
 10269cc:	3330      	adds	r3, #48	; 0x30
 10269ce:	4614      	mov	r4, r2
 10269d0:	ea54 0005 	orrs.w	r0, r4, r5
 10269d4:	f801 3c01 	strb.w	r3, [r1, #-1]
 10269d8:	f101 32ff 	add.w	r2, r1, #4294967295
 10269dc:	d1ee      	bne.n	10269bc <_vfiprintf_r+0x82c>
 10269de:	9e02      	ldr	r6, [sp, #8]
 10269e0:	920b      	str	r2, [sp, #44]	; 0x2c
 10269e2:	4630      	mov	r0, r6
 10269e4:	2b30      	cmp	r3, #48	; 0x30
 10269e6:	bf0c      	ite	eq
 10269e8:	2000      	moveq	r0, #0
 10269ea:	f000 0001 	andne.w	r0, r0, #1
 10269ee:	2800      	cmp	r0, #0
 10269f0:	f040 8266 	bne.w	1026ec0 <_vfiprintf_r+0xd30>
 10269f4:	ab46      	add	r3, sp, #280	; 0x118
 10269f6:	1a9b      	subs	r3, r3, r2
 10269f8:	9304      	str	r3, [sp, #16]
 10269fa:	e536      	b.n	102646a <_vfiprintf_r+0x2da>
 10269fc:	9b05      	ldr	r3, [sp, #20]
 10269fe:	9c02      	ldr	r4, [sp, #8]
 1026a00:	1b1c      	subs	r4, r3, r4
 1026a02:	2c00      	cmp	r4, #0
 1026a04:	f77f ad94 	ble.w	1026530 <_vfiprintf_r+0x3a0>
 1026a08:	2c10      	cmp	r4, #16
 1026a0a:	4dbe      	ldr	r5, [pc, #760]	; (1026d04 <_vfiprintf_r+0xb74>)
 1026a0c:	f340 834d 	ble.w	10270aa <_vfiprintf_r+0xf1a>
 1026a10:	9609      	str	r6, [sp, #36]	; 0x24
 1026a12:	4666      	mov	r6, ip
 1026a14:	970a      	str	r7, [sp, #40]	; 0x28
 1026a16:	462f      	mov	r7, r5
 1026a18:	9d06      	ldr	r5, [sp, #24]
 1026a1a:	e00a      	b.n	1026a32 <_vfiprintf_r+0x8a2>
 1026a1c:	f7ff fb74 	bl	1026108 <__sprint_r.part.0>
 1026a20:	2800      	cmp	r0, #0
 1026a22:	f040 809c 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 1026a26:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1026a2a:	1c51      	adds	r1, r2, #1
 1026a2c:	3c10      	subs	r4, #16
 1026a2e:	2c10      	cmp	r4, #16
 1026a30:	dd1c      	ble.n	1026a6c <_vfiprintf_r+0x8dc>
 1026a32:	1c50      	adds	r0, r2, #1
 1026a34:	3610      	adds	r6, #16
 1026a36:	2807      	cmp	r0, #7
 1026a38:	f8c9 7000 	str.w	r7, [r9]
 1026a3c:	f102 0102 	add.w	r1, r2, #2
 1026a40:	f04f 0310 	mov.w	r3, #16
 1026a44:	961c      	str	r6, [sp, #112]	; 0x70
 1026a46:	4602      	mov	r2, r0
 1026a48:	f8c9 3004 	str.w	r3, [r9, #4]
 1026a4c:	f109 0908 	add.w	r9, r9, #8
 1026a50:	901b      	str	r0, [sp, #108]	; 0x6c
 1026a52:	ddeb      	ble.n	1026a2c <_vfiprintf_r+0x89c>
 1026a54:	aa1a      	add	r2, sp, #104	; 0x68
 1026a56:	4629      	mov	r1, r5
 1026a58:	4658      	mov	r0, fp
 1026a5a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026a5e:	2e00      	cmp	r6, #0
 1026a60:	d1dc      	bne.n	1026a1c <_vfiprintf_r+0x88c>
 1026a62:	3c10      	subs	r4, #16
 1026a64:	2101      	movs	r1, #1
 1026a66:	2c10      	cmp	r4, #16
 1026a68:	4632      	mov	r2, r6
 1026a6a:	dce2      	bgt.n	1026a32 <_vfiprintf_r+0x8a2>
 1026a6c:	46b4      	mov	ip, r6
 1026a6e:	463d      	mov	r5, r7
 1026a70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1026a72:	f109 0308 	add.w	r3, r9, #8
 1026a76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 1026a78:	2907      	cmp	r1, #7
 1026a7a:	44a4      	add	ip, r4
 1026a7c:	f8c9 5000 	str.w	r5, [r9]
 1026a80:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1026a84:	f8c9 4004 	str.w	r4, [r9, #4]
 1026a88:	911b      	str	r1, [sp, #108]	; 0x6c
 1026a8a:	f340 818a 	ble.w	1026da2 <_vfiprintf_r+0xc12>
 1026a8e:	f1bc 0f00 	cmp.w	ip, #0
 1026a92:	f000 82ac 	beq.w	1026fee <_vfiprintf_r+0xe5e>
 1026a96:	aa1a      	add	r2, sp, #104	; 0x68
 1026a98:	9906      	ldr	r1, [sp, #24]
 1026a9a:	4658      	mov	r0, fp
 1026a9c:	f7ff fb34 	bl	1026108 <__sprint_r.part.0>
 1026aa0:	2800      	cmp	r0, #0
 1026aa2:	d15c      	bne.n	1026b5e <_vfiprintf_r+0x9ce>
 1026aa4:	9b04      	ldr	r3, [sp, #16]
 1026aa6:	a91f      	add	r1, sp, #124	; 0x7c
 1026aa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1026aaa:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026aae:	ebaa 0403 	sub.w	r4, sl, r3
 1026ab2:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1026ab6:	2c00      	cmp	r4, #0
 1026ab8:	f102 0001 	add.w	r0, r2, #1
 1026abc:	f77f ad3e 	ble.w	102653c <_vfiprintf_r+0x3ac>
 1026ac0:	2c10      	cmp	r4, #16
 1026ac2:	4d90      	ldr	r5, [pc, #576]	; (1026d04 <_vfiprintf_r+0xb74>)
 1026ac4:	f340 827c 	ble.w	1026fc0 <_vfiprintf_r+0xe30>
 1026ac8:	9609      	str	r6, [sp, #36]	; 0x24
 1026aca:	f04f 0a10 	mov.w	sl, #16
 1026ace:	970a      	str	r7, [sp, #40]	; 0x28
 1026ad0:	4666      	mov	r6, ip
 1026ad2:	462f      	mov	r7, r5
 1026ad4:	9d06      	ldr	r5, [sp, #24]
 1026ad6:	e009      	b.n	1026aec <_vfiprintf_r+0x95c>
 1026ad8:	f7ff fb16 	bl	1026108 <__sprint_r.part.0>
 1026adc:	2800      	cmp	r0, #0
 1026ade:	d13e      	bne.n	1026b5e <_vfiprintf_r+0x9ce>
 1026ae0:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1026ae4:	1c50      	adds	r0, r2, #1
 1026ae6:	3c10      	subs	r4, #16
 1026ae8:	2c10      	cmp	r4, #16
 1026aea:	dd1a      	ble.n	1026b22 <_vfiprintf_r+0x992>
 1026aec:	1c51      	adds	r1, r2, #1
 1026aee:	3610      	adds	r6, #16
 1026af0:	2907      	cmp	r1, #7
 1026af2:	f8c9 7000 	str.w	r7, [r9]
 1026af6:	f102 0002 	add.w	r0, r2, #2
 1026afa:	f8c9 a004 	str.w	sl, [r9, #4]
 1026afe:	961c      	str	r6, [sp, #112]	; 0x70
 1026b00:	460a      	mov	r2, r1
 1026b02:	f109 0908 	add.w	r9, r9, #8
 1026b06:	911b      	str	r1, [sp, #108]	; 0x6c
 1026b08:	dded      	ble.n	1026ae6 <_vfiprintf_r+0x956>
 1026b0a:	aa1a      	add	r2, sp, #104	; 0x68
 1026b0c:	4629      	mov	r1, r5
 1026b0e:	4658      	mov	r0, fp
 1026b10:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026b14:	2e00      	cmp	r6, #0
 1026b16:	d1df      	bne.n	1026ad8 <_vfiprintf_r+0x948>
 1026b18:	3c10      	subs	r4, #16
 1026b1a:	2001      	movs	r0, #1
 1026b1c:	2c10      	cmp	r4, #16
 1026b1e:	4632      	mov	r2, r6
 1026b20:	dce4      	bgt.n	1026aec <_vfiprintf_r+0x95c>
 1026b22:	46b4      	mov	ip, r6
 1026b24:	463d      	mov	r5, r7
 1026b26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1026b28:	f109 0308 	add.w	r3, r9, #8
 1026b2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 1026b2e:	2807      	cmp	r0, #7
 1026b30:	44a4      	add	ip, r4
 1026b32:	f8c9 5000 	str.w	r5, [r9]
 1026b36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1026b3a:	f8c9 4004 	str.w	r4, [r9, #4]
 1026b3e:	901b      	str	r0, [sp, #108]	; 0x6c
 1026b40:	f300 80e8 	bgt.w	1026d14 <_vfiprintf_r+0xb84>
 1026b44:	3001      	adds	r0, #1
 1026b46:	f103 0108 	add.w	r1, r3, #8
 1026b4a:	4699      	mov	r9, r3
 1026b4c:	e4f6      	b.n	102653c <_vfiprintf_r+0x3ac>
 1026b4e:	aa1a      	add	r2, sp, #104	; 0x68
 1026b50:	9906      	ldr	r1, [sp, #24]
 1026b52:	4658      	mov	r0, fp
 1026b54:	f7ff fad8 	bl	1026108 <__sprint_r.part.0>
 1026b58:	2800      	cmp	r0, #0
 1026b5a:	f43f ad1b 	beq.w	1026594 <_vfiprintf_r+0x404>
 1026b5e:	9b08      	ldr	r3, [sp, #32]
 1026b60:	2b00      	cmp	r3, #0
 1026b62:	f43f ac30 	beq.w	10263c6 <_vfiprintf_r+0x236>
 1026b66:	9908      	ldr	r1, [sp, #32]
 1026b68:	4658      	mov	r0, fp
 1026b6a:	f7fc ffaf 	bl	1023acc <_free_r>
 1026b6e:	e42a      	b.n	10263c6 <_vfiprintf_r+0x236>
 1026b70:	f1bc 0f00 	cmp.w	ip, #0
 1026b74:	d00e      	beq.n	1026b94 <_vfiprintf_r+0xa04>
 1026b76:	aa1a      	add	r2, sp, #104	; 0x68
 1026b78:	9906      	ldr	r1, [sp, #24]
 1026b7a:	4658      	mov	r0, fp
 1026b7c:	f7ff fac4 	bl	1026108 <__sprint_r.part.0>
 1026b80:	2800      	cmp	r0, #0
 1026b82:	d1ec      	bne.n	1026b5e <_vfiprintf_r+0x9ce>
 1026b84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1026b86:	a91f      	add	r1, sp, #124	; 0x7c
 1026b88:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1026b8c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026b90:	1c50      	adds	r0, r2, #1
 1026b92:	e4a6      	b.n	10264e2 <_vfiprintf_r+0x352>
 1026b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1026b96:	2b00      	cmp	r3, #0
 1026b98:	f000 8114 	beq.w	1026dc4 <_vfiprintf_r+0xc34>
 1026b9c:	a91f      	add	r1, sp, #124	; 0x7c
 1026b9e:	2302      	movs	r3, #2
 1026ba0:	4610      	mov	r0, r2
 1026ba2:	931e      	str	r3, [sp, #120]	; 0x78
 1026ba4:	469c      	mov	ip, r3
 1026ba6:	ab13      	add	r3, sp, #76	; 0x4c
 1026ba8:	931d      	str	r3, [sp, #116]	; 0x74
 1026baa:	4602      	mov	r2, r0
 1026bac:	4689      	mov	r9, r1
 1026bae:	3001      	adds	r0, #1
 1026bb0:	3108      	adds	r1, #8
 1026bb2:	e4b9      	b.n	1026528 <_vfiprintf_r+0x398>
 1026bb4:	2c10      	cmp	r4, #16
 1026bb6:	f248 05d0 	movw	r5, #32976	; 0x80d0
 1026bba:	f2c0 1506 	movt	r5, #262	; 0x106
 1026bbe:	f340 8256 	ble.w	102706e <_vfiprintf_r+0xede>
 1026bc2:	9610      	str	r6, [sp, #64]	; 0x40
 1026bc4:	2310      	movs	r3, #16
 1026bc6:	9711      	str	r7, [sp, #68]	; 0x44
 1026bc8:	4666      	mov	r6, ip
 1026bca:	9f06      	ldr	r7, [sp, #24]
 1026bcc:	e00c      	b.n	1026be8 <_vfiprintf_r+0xa58>
 1026bce:	f7ff fa9b 	bl	1026108 <__sprint_r.part.0>
 1026bd2:	2800      	cmp	r0, #0
 1026bd4:	d1c3      	bne.n	1026b5e <_vfiprintf_r+0x9ce>
 1026bd6:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1026bda:	2310      	movs	r3, #16
 1026bdc:	f102 0e01 	add.w	lr, r2, #1
 1026be0:	3c10      	subs	r4, #16
 1026be2:	1c51      	adds	r1, r2, #1
 1026be4:	2c10      	cmp	r4, #16
 1026be6:	dd1d      	ble.n	1026c24 <_vfiprintf_r+0xa94>
 1026be8:	2907      	cmp	r1, #7
 1026bea:	f106 0610 	add.w	r6, r6, #16
 1026bee:	f8c9 5000 	str.w	r5, [r9]
 1026bf2:	f102 0e02 	add.w	lr, r2, #2
 1026bf6:	f8c9 3004 	str.w	r3, [r9, #4]
 1026bfa:	460a      	mov	r2, r1
 1026bfc:	961c      	str	r6, [sp, #112]	; 0x70
 1026bfe:	f109 0908 	add.w	r9, r9, #8
 1026c02:	911b      	str	r1, [sp, #108]	; 0x6c
 1026c04:	ddec      	ble.n	1026be0 <_vfiprintf_r+0xa50>
 1026c06:	aa1a      	add	r2, sp, #104	; 0x68
 1026c08:	4639      	mov	r1, r7
 1026c0a:	4658      	mov	r0, fp
 1026c0c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026c10:	2e00      	cmp	r6, #0
 1026c12:	d1dc      	bne.n	1026bce <_vfiprintf_r+0xa3e>
 1026c14:	3c10      	subs	r4, #16
 1026c16:	4632      	mov	r2, r6
 1026c18:	2c10      	cmp	r4, #16
 1026c1a:	f04f 0e01 	mov.w	lr, #1
 1026c1e:	f102 0101 	add.w	r1, r2, #1
 1026c22:	dce1      	bgt.n	1026be8 <_vfiprintf_r+0xa58>
 1026c24:	46b4      	mov	ip, r6
 1026c26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 1026c2a:	f1be 0f07 	cmp.w	lr, #7
 1026c2e:	44a4      	add	ip, r4
 1026c30:	f8c9 5000 	str.w	r5, [r9]
 1026c34:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1026c38:	f8c9 4004 	str.w	r4, [r9, #4]
 1026c3c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 1026c40:	f300 809a 	bgt.w	1026d78 <_vfiprintf_r+0xbe8>
 1026c44:	f109 0908 	add.w	r9, r9, #8
 1026c48:	f10e 0001 	add.w	r0, lr, #1
 1026c4c:	4672      	mov	r2, lr
 1026c4e:	e430      	b.n	10264b2 <_vfiprintf_r+0x322>
 1026c50:	0771      	lsls	r1, r6, #29
 1026c52:	931b      	str	r3, [sp, #108]	; 0x6c
 1026c54:	d54c      	bpl.n	1026cf0 <_vfiprintf_r+0xb60>
 1026c56:	9a05      	ldr	r2, [sp, #20]
 1026c58:	9902      	ldr	r1, [sp, #8]
 1026c5a:	1a54      	subs	r4, r2, r1
 1026c5c:	2c00      	cmp	r4, #0
 1026c5e:	dd47      	ble.n	1026cf0 <_vfiprintf_r+0xb60>
 1026c60:	a91d      	add	r1, sp, #116	; 0x74
 1026c62:	2c10      	cmp	r4, #16
 1026c64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1026c66:	f340 8204 	ble.w	1027072 <_vfiprintf_r+0xee2>
 1026c6a:	f248 05d0 	movw	r5, #32976	; 0x80d0
 1026c6e:	2610      	movs	r6, #16
 1026c70:	f2c0 1506 	movt	r5, #262	; 0x106
 1026c74:	f8dd 9018 	ldr.w	r9, [sp, #24]
 1026c78:	e00c      	b.n	1026c94 <_vfiprintf_r+0xb04>
 1026c7a:	f7ff fa45 	bl	1026108 <__sprint_r.part.0>
 1026c7e:	a91d      	add	r1, sp, #116	; 0x74
 1026c80:	2800      	cmp	r0, #0
 1026c82:	f47f af6c 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 1026c86:	e9dd 031b 	ldrd	r0, r3, [sp, #108]	; 0x6c
 1026c8a:	f100 0c01 	add.w	ip, r0, #1
 1026c8e:	3c10      	subs	r4, #16
 1026c90:	2c10      	cmp	r4, #16
 1026c92:	dd18      	ble.n	1026cc6 <_vfiprintf_r+0xb36>
 1026c94:	1c42      	adds	r2, r0, #1
 1026c96:	3310      	adds	r3, #16
 1026c98:	2a07      	cmp	r2, #7
 1026c9a:	600d      	str	r5, [r1, #0]
 1026c9c:	f100 0c02 	add.w	ip, r0, #2
 1026ca0:	604e      	str	r6, [r1, #4]
 1026ca2:	931c      	str	r3, [sp, #112]	; 0x70
 1026ca4:	4610      	mov	r0, r2
 1026ca6:	f101 0108 	add.w	r1, r1, #8
 1026caa:	921b      	str	r2, [sp, #108]	; 0x6c
 1026cac:	ddef      	ble.n	1026c8e <_vfiprintf_r+0xafe>
 1026cae:	aa1a      	add	r2, sp, #104	; 0x68
 1026cb0:	4649      	mov	r1, r9
 1026cb2:	4658      	mov	r0, fp
 1026cb4:	2b00      	cmp	r3, #0
 1026cb6:	d1e0      	bne.n	1026c7a <_vfiprintf_r+0xaea>
 1026cb8:	3c10      	subs	r4, #16
 1026cba:	f04f 0c01 	mov.w	ip, #1
 1026cbe:	2c10      	cmp	r4, #16
 1026cc0:	4618      	mov	r0, r3
 1026cc2:	a91d      	add	r1, sp, #116	; 0x74
 1026cc4:	dce6      	bgt.n	1026c94 <_vfiprintf_r+0xb04>
 1026cc6:	f1bc 0f07 	cmp.w	ip, #7
 1026cca:	4423      	add	r3, r4
 1026ccc:	600d      	str	r5, [r1, #0]
 1026cce:	931c      	str	r3, [sp, #112]	; 0x70
 1026cd0:	604c      	str	r4, [r1, #4]
 1026cd2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 1026cd6:	f77f ac52 	ble.w	102657e <_vfiprintf_r+0x3ee>
 1026cda:	b14b      	cbz	r3, 1026cf0 <_vfiprintf_r+0xb60>
 1026cdc:	aa1a      	add	r2, sp, #104	; 0x68
 1026cde:	9906      	ldr	r1, [sp, #24]
 1026ce0:	4658      	mov	r0, fp
 1026ce2:	f7ff fa11 	bl	1026108 <__sprint_r.part.0>
 1026ce6:	2800      	cmp	r0, #0
 1026ce8:	f47f af39 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 1026cec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 1026cee:	e446      	b.n	102657e <_vfiprintf_r+0x3ee>
 1026cf0:	9b03      	ldr	r3, [sp, #12]
 1026cf2:	9a05      	ldr	r2, [sp, #20]
 1026cf4:	9902      	ldr	r1, [sp, #8]
 1026cf6:	428a      	cmp	r2, r1
 1026cf8:	bfac      	ite	ge
 1026cfa:	189b      	addge	r3, r3, r2
 1026cfc:	185b      	addlt	r3, r3, r1
 1026cfe:	9303      	str	r3, [sp, #12]
 1026d00:	e448      	b.n	1026594 <_vfiprintf_r+0x404>
 1026d02:	bf00      	nop
 1026d04:	010680e0 	.word	0x010680e0
 1026d08:	ab46      	add	r3, sp, #280	; 0x118
 1026d0a:	4692      	mov	sl, r2
 1026d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 1026d0e:	9204      	str	r2, [sp, #16]
 1026d10:	f7ff bbab 	b.w	102646a <_vfiprintf_r+0x2da>
 1026d14:	f1bc 0f00 	cmp.w	ip, #0
 1026d18:	f000 80c8 	beq.w	1026eac <_vfiprintf_r+0xd1c>
 1026d1c:	aa1a      	add	r2, sp, #104	; 0x68
 1026d1e:	9906      	ldr	r1, [sp, #24]
 1026d20:	4658      	mov	r0, fp
 1026d22:	f7ff f9f1 	bl	1026108 <__sprint_r.part.0>
 1026d26:	2800      	cmp	r0, #0
 1026d28:	f47f af19 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 1026d2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1026d2e:	a91f      	add	r1, sp, #124	; 0x7c
 1026d30:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1026d34:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026d38:	3001      	adds	r0, #1
 1026d3a:	f7ff bbff 	b.w	102653c <_vfiprintf_r+0x3ac>
 1026d3e:	921b      	str	r2, [sp, #108]	; 0x6c
 1026d40:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026d44:	f7ff bb35 	b.w	10263b2 <_vfiprintf_r+0x222>
 1026d48:	9602      	str	r6, [sp, #8]
 1026d4a:	2d00      	cmp	r5, #0
 1026d4c:	bf08      	it	eq
 1026d4e:	2c0a      	cmpeq	r4, #10
 1026d50:	f080 80d6 	bcs.w	1026f00 <_vfiprintf_r+0xd70>
 1026d54:	2301      	movs	r3, #1
 1026d56:	3430      	adds	r4, #48	; 0x30
 1026d58:	9304      	str	r3, [sp, #16]
 1026d5a:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1026d5e:	9e02      	ldr	r6, [sp, #8]
 1026d60:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1026d64:	930b      	str	r3, [sp, #44]	; 0x2c
 1026d66:	f7ff bb80 	b.w	102646a <_vfiprintf_r+0x2da>
 1026d6a:	a91f      	add	r1, sp, #124	; 0x7c
 1026d6c:	2001      	movs	r0, #1
 1026d6e:	4662      	mov	r2, ip
 1026d70:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026d74:	f7ff bbd8 	b.w	1026528 <_vfiprintf_r+0x398>
 1026d78:	f1bc 0f00 	cmp.w	ip, #0
 1026d7c:	d032      	beq.n	1026de4 <_vfiprintf_r+0xc54>
 1026d7e:	aa1a      	add	r2, sp, #104	; 0x68
 1026d80:	9906      	ldr	r1, [sp, #24]
 1026d82:	4658      	mov	r0, fp
 1026d84:	f7ff f9c0 	bl	1026108 <__sprint_r.part.0>
 1026d88:	2800      	cmp	r0, #0
 1026d8a:	f47f aee8 	bne.w	1026b5e <_vfiprintf_r+0x9ce>
 1026d8e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1026d90:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026d94:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1026d98:	1c50      	adds	r0, r2, #1
 1026d9a:	f7ff bb8a 	b.w	10264b2 <_vfiprintf_r+0x322>
 1026d9e:	9602      	str	r6, [sp, #8]
 1026da0:	e4cc      	b.n	102673c <_vfiprintf_r+0x5ac>
 1026da2:	1c48      	adds	r0, r1, #1
 1026da4:	460a      	mov	r2, r1
 1026da6:	4699      	mov	r9, r3
 1026da8:	f103 0108 	add.w	r1, r3, #8
 1026dac:	f7ff bbc0 	b.w	1026530 <_vfiprintf_r+0x3a0>
 1026db0:	9903      	ldr	r1, [sp, #12]
 1026db2:	6812      	ldr	r2, [r2, #0]
 1026db4:	9307      	str	r3, [sp, #28]
 1026db6:	17cd      	asrs	r5, r1, #31
 1026db8:	4608      	mov	r0, r1
 1026dba:	4629      	mov	r1, r5
 1026dbc:	e9c2 0100 	strd	r0, r1, [r2]
 1026dc0:	f7ff ba26 	b.w	1026210 <_vfiprintf_r+0x80>
 1026dc4:	4610      	mov	r0, r2
 1026dc6:	a91f      	add	r1, sp, #124	; 0x7c
 1026dc8:	4662      	mov	r2, ip
 1026dca:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026dce:	f7ff bbab 	b.w	1026528 <_vfiprintf_r+0x398>
 1026dd2:	9b07      	ldr	r3, [sp, #28]
 1026dd4:	2201      	movs	r2, #1
 1026dd6:	ad2d      	add	r5, sp, #180	; 0xb4
 1026dd8:	9202      	str	r2, [sp, #8]
 1026dda:	9204      	str	r2, [sp, #16]
 1026ddc:	681b      	ldr	r3, [r3, #0]
 1026dde:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1026de2:	e556      	b.n	1026892 <_vfiprintf_r+0x702>
 1026de4:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1026de8:	2a00      	cmp	r2, #0
 1026dea:	f040 8107 	bne.w	1026ffc <_vfiprintf_r+0xe6c>
 1026dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1026df0:	2b00      	cmp	r3, #0
 1026df2:	f040 8165 	bne.w	10270c0 <_vfiprintf_r+0xf30>
 1026df6:	4662      	mov	r2, ip
 1026df8:	a91f      	add	r1, sp, #124	; 0x7c
 1026dfa:	2001      	movs	r0, #1
 1026dfc:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026e00:	f7ff bb96 	b.w	1026530 <_vfiprintf_r+0x3a0>
 1026e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1026e06:	2208      	movs	r2, #8
 1026e08:	2100      	movs	r1, #0
 1026e0a:	a818      	add	r0, sp, #96	; 0x60
 1026e0c:	9315      	str	r3, [sp, #84]	; 0x54
 1026e0e:	f7f6 fd4f 	bl	101d8b0 <memset>
 1026e12:	f1ba 3fff 	cmp.w	sl, #4294967295
 1026e16:	f000 80d5 	beq.w	1026fc4 <_vfiprintf_r+0xe34>
 1026e1a:	2400      	movs	r4, #0
 1026e1c:	9602      	str	r6, [sp, #8]
 1026e1e:	9507      	str	r5, [sp, #28]
 1026e20:	4626      	mov	r6, r4
 1026e22:	e009      	b.n	1026e38 <_vfiprintf_r+0xca8>
 1026e24:	f7fb fa6a 	bl	10222fc <_wcrtomb_r>
 1026e28:	1833      	adds	r3, r6, r0
 1026e2a:	3001      	adds	r0, #1
 1026e2c:	f000 8140 	beq.w	10270b0 <_vfiprintf_r+0xf20>
 1026e30:	4553      	cmp	r3, sl
 1026e32:	dc0a      	bgt.n	1026e4a <_vfiprintf_r+0xcba>
 1026e34:	461e      	mov	r6, r3
 1026e36:	d008      	beq.n	1026e4a <_vfiprintf_r+0xcba>
 1026e38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1026e3a:	ab18      	add	r3, sp, #96	; 0x60
 1026e3c:	a92d      	add	r1, sp, #180	; 0xb4
 1026e3e:	4658      	mov	r0, fp
 1026e40:	5915      	ldr	r5, [r2, r4]
 1026e42:	3404      	adds	r4, #4
 1026e44:	462a      	mov	r2, r5
 1026e46:	2d00      	cmp	r5, #0
 1026e48:	d1ec      	bne.n	1026e24 <_vfiprintf_r+0xc94>
 1026e4a:	9604      	str	r6, [sp, #16]
 1026e4c:	9d07      	ldr	r5, [sp, #28]
 1026e4e:	9e02      	ldr	r6, [sp, #8]
 1026e50:	9b04      	ldr	r3, [sp, #16]
 1026e52:	2b00      	cmp	r3, #0
 1026e54:	f000 80c4 	beq.w	1026fe0 <_vfiprintf_r+0xe50>
 1026e58:	2b63      	cmp	r3, #99	; 0x63
 1026e5a:	f340 80ee 	ble.w	102703a <_vfiprintf_r+0xeaa>
 1026e5e:	1c59      	adds	r1, r3, #1
 1026e60:	4658      	mov	r0, fp
 1026e62:	f7f5 fcb9 	bl	101c7d8 <_malloc_r>
 1026e66:	900b      	str	r0, [sp, #44]	; 0x2c
 1026e68:	2800      	cmp	r0, #0
 1026e6a:	f000 8121 	beq.w	10270b0 <_vfiprintf_r+0xf20>
 1026e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1026e70:	9308      	str	r3, [sp, #32]
 1026e72:	2208      	movs	r2, #8
 1026e74:	2100      	movs	r1, #0
 1026e76:	a818      	add	r0, sp, #96	; 0x60
 1026e78:	f7f6 fd1a 	bl	101d8b0 <memset>
 1026e7c:	9c04      	ldr	r4, [sp, #16]
 1026e7e:	ab18      	add	r3, sp, #96	; 0x60
 1026e80:	aa15      	add	r2, sp, #84	; 0x54
 1026e82:	9300      	str	r3, [sp, #0]
 1026e84:	4658      	mov	r0, fp
 1026e86:	4623      	mov	r3, r4
 1026e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1026e8a:	f7fb fa8d 	bl	10223a8 <_wcsrtombs_r>
 1026e8e:	4284      	cmp	r4, r0
 1026e90:	f040 812d 	bne.w	10270ee <_vfiprintf_r+0xf5e>
 1026e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1026e96:	2400      	movs	r4, #0
 1026e98:	9507      	str	r5, [sp, #28]
 1026e9a:	46a2      	mov	sl, r4
 1026e9c:	4619      	mov	r1, r3
 1026e9e:	9b04      	ldr	r3, [sp, #16]
 1026ea0:	54cc      	strb	r4, [r1, r3]
 1026ea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1026ea6:	9302      	str	r3, [sp, #8]
 1026ea8:	f7ff bae6 	b.w	1026478 <_vfiprintf_r+0x2e8>
 1026eac:	9b04      	ldr	r3, [sp, #16]
 1026eae:	a91f      	add	r1, sp, #124	; 0x7c
 1026eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1026eb2:	931c      	str	r3, [sp, #112]	; 0x70
 1026eb4:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
 1026eb8:	2201      	movs	r2, #1
 1026eba:	921b      	str	r2, [sp, #108]	; 0x6c
 1026ebc:	f7ff bb57 	b.w	102656e <_vfiprintf_r+0x3de>
 1026ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1026ec2:	3902      	subs	r1, #2
 1026ec4:	2330      	movs	r3, #48	; 0x30
 1026ec6:	9e02      	ldr	r6, [sp, #8]
 1026ec8:	910b      	str	r1, [sp, #44]	; 0x2c
 1026eca:	f802 3c01 	strb.w	r3, [r2, #-1]
 1026ece:	ab46      	add	r3, sp, #280	; 0x118
 1026ed0:	1a5b      	subs	r3, r3, r1
 1026ed2:	9304      	str	r3, [sp, #16]
 1026ed4:	f7ff bac9 	b.w	102646a <_vfiprintf_r+0x2da>
 1026ed8:	9a07      	ldr	r2, [sp, #28]
 1026eda:	6812      	ldr	r2, [r2, #0]
 1026edc:	9307      	str	r3, [sp, #28]
 1026ede:	9b03      	ldr	r3, [sp, #12]
 1026ee0:	6013      	str	r3, [r2, #0]
 1026ee2:	f7ff b995 	b.w	1026210 <_vfiprintf_r+0x80>
 1026ee6:	4653      	mov	r3, sl
 1026ee8:	2b06      	cmp	r3, #6
 1026eea:	f24c 128c 	movw	r2, #49548	; 0xc18c
 1026eee:	9507      	str	r5, [sp, #28]
 1026ef0:	bf28      	it	cs
 1026ef2:	2306      	movcs	r3, #6
 1026ef4:	f2c0 1206 	movt	r2, #262	; 0x106
 1026ef8:	9304      	str	r3, [sp, #16]
 1026efa:	920b      	str	r2, [sp, #44]	; 0x2c
 1026efc:	9302      	str	r3, [sp, #8]
 1026efe:	e519      	b.n	1026934 <_vfiprintf_r+0x7a4>
 1026f00:	9b02      	ldr	r3, [sp, #8]
 1026f02:	2200      	movs	r2, #0
 1026f04:	f8cd 9010 	str.w	r9, [sp, #16]
 1026f08:	ae46      	add	r6, sp, #280	; 0x118
 1026f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 1026f0e:	9709      	str	r7, [sp, #36]	; 0x24
 1026f10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 1026f14:	4691      	mov	r9, r2
 1026f16:	f8cd a020 	str.w	sl, [sp, #32]
 1026f1a:	461f      	mov	r7, r3
 1026f1c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 1026f20:	e008      	b.n	1026f34 <_vfiprintf_r+0xda4>
 1026f22:	f7f4 fd51 	bl	101b9c8 <__aeabi_uldivmod>
 1026f26:	2d00      	cmp	r5, #0
 1026f28:	bf08      	it	eq
 1026f2a:	2c0a      	cmpeq	r4, #10
 1026f2c:	d328      	bcc.n	1026f80 <_vfiprintf_r+0xdf0>
 1026f2e:	4604      	mov	r4, r0
 1026f30:	4656      	mov	r6, sl
 1026f32:	460d      	mov	r5, r1
 1026f34:	220a      	movs	r2, #10
 1026f36:	2300      	movs	r3, #0
 1026f38:	4620      	mov	r0, r4
 1026f3a:	4629      	mov	r1, r5
 1026f3c:	f7f4 fd44 	bl	101b9c8 <__aeabi_uldivmod>
 1026f40:	f109 0901 	add.w	r9, r9, #1
 1026f44:	4620      	mov	r0, r4
 1026f46:	4629      	mov	r1, r5
 1026f48:	f106 3aff 	add.w	sl, r6, #4294967295
 1026f4c:	2300      	movs	r3, #0
 1026f4e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1026f52:	220a      	movs	r2, #10
 1026f54:	f806 cc01 	strb.w	ip, [r6, #-1]
 1026f58:	2f00      	cmp	r7, #0
 1026f5a:	d0e2      	beq.n	1026f22 <_vfiprintf_r+0xd92>
 1026f5c:	f898 6000 	ldrb.w	r6, [r8]
 1026f60:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1026f64:	bf18      	it	ne
 1026f66:	f04f 0c01 	movne.w	ip, #1
 1026f6a:	454e      	cmp	r6, r9
 1026f6c:	bf18      	it	ne
 1026f6e:	f04f 0c00 	movne.w	ip, #0
 1026f72:	f1bc 0f00 	cmp.w	ip, #0
 1026f76:	d0d4      	beq.n	1026f22 <_vfiprintf_r+0xd92>
 1026f78:	429d      	cmp	r5, r3
 1026f7a:	bf08      	it	eq
 1026f7c:	4294      	cmpeq	r4, r2
 1026f7e:	d27f      	bcs.n	1027080 <_vfiprintf_r+0xef0>
 1026f80:	4652      	mov	r2, sl
 1026f82:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 1026f86:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 1026f8a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 1026f8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 1026f92:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 1026f96:	9e02      	ldr	r6, [sp, #8]
 1026f98:	e52c      	b.n	10269f4 <_vfiprintf_r+0x864>
 1026f9a:	05b0      	lsls	r0, r6, #22
 1026f9c:	bf45      	ittet	mi
 1026f9e:	9207      	strmi	r2, [sp, #28]
 1026fa0:	b2e4      	uxtbmi	r4, r4
 1026fa2:	9207      	strpl	r2, [sp, #28]
 1026fa4:	4633      	movmi	r3, r6
 1026fa6:	bf4e      	itee	mi
 1026fa8:	2500      	movmi	r5, #0
 1026faa:	2500      	movpl	r5, #0
 1026fac:	4633      	movpl	r3, r6
 1026fae:	e500      	b.n	10269b2 <_vfiprintf_r+0x822>
 1026fb0:	05b0      	lsls	r0, r6, #22
 1026fb2:	f04f 0500 	mov.w	r5, #0
 1026fb6:	bf48      	it	mi
 1026fb8:	b2e4      	uxtbmi	r4, r4
 1026fba:	2301      	movs	r3, #1
 1026fbc:	f7ff ba2c 	b.w	1026418 <_vfiprintf_r+0x288>
 1026fc0:	460b      	mov	r3, r1
 1026fc2:	e5b4      	b.n	1026b2e <_vfiprintf_r+0x99e>
 1026fc4:	2300      	movs	r3, #0
 1026fc6:	aa18      	add	r2, sp, #96	; 0x60
 1026fc8:	4619      	mov	r1, r3
 1026fca:	9200      	str	r2, [sp, #0]
 1026fcc:	4658      	mov	r0, fp
 1026fce:	aa15      	add	r2, sp, #84	; 0x54
 1026fd0:	f7fb f9ea 	bl	10223a8 <_wcsrtombs_r>
 1026fd4:	1c43      	adds	r3, r0, #1
 1026fd6:	9004      	str	r0, [sp, #16]
 1026fd8:	d06a      	beq.n	10270b0 <_vfiprintf_r+0xf20>
 1026fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1026fdc:	9315      	str	r3, [sp, #84]	; 0x54
 1026fde:	e737      	b.n	1026e50 <_vfiprintf_r+0xcc0>
 1026fe0:	9b04      	ldr	r3, [sp, #16]
 1026fe2:	9507      	str	r5, [sp, #28]
 1026fe4:	9302      	str	r3, [sp, #8]
 1026fe6:	469a      	mov	sl, r3
 1026fe8:	9308      	str	r3, [sp, #32]
 1026fea:	f7ff ba45 	b.w	1026478 <_vfiprintf_r+0x2e8>
 1026fee:	a91f      	add	r1, sp, #124	; 0x7c
 1026ff0:	2001      	movs	r0, #1
 1026ff2:	4662      	mov	r2, ip
 1026ff4:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1026ff8:	f7ff ba9a 	b.w	1026530 <_vfiprintf_r+0x3a0>
 1026ffc:	2201      	movs	r2, #1
 1026ffe:	f10d 014b 	add.w	r1, sp, #75	; 0x4b
 1027002:	4610      	mov	r0, r2
 1027004:	911d      	str	r1, [sp, #116]	; 0x74
 1027006:	921e      	str	r2, [sp, #120]	; 0x78
 1027008:	4694      	mov	ip, r2
 102700a:	a91f      	add	r1, sp, #124	; 0x7c
 102700c:	f7ff ba65 	b.w	10264da <_vfiprintf_r+0x34a>
 1027010:	9a07      	ldr	r2, [sp, #28]
 1027012:	9307      	str	r3, [sp, #28]
 1027014:	9b03      	ldr	r3, [sp, #12]
 1027016:	6812      	ldr	r2, [r2, #0]
 1027018:	8013      	strh	r3, [r2, #0]
 102701a:	f7ff b8f9 	b.w	1026210 <_vfiprintf_r+0x80>
 102701e:	681c      	ldr	r4, [r3, #0]
 1027020:	9207      	str	r2, [sp, #28]
 1027022:	9602      	str	r6, [sp, #8]
 1027024:	17e5      	asrs	r5, r4, #31
 1027026:	4622      	mov	r2, r4
 1027028:	462b      	mov	r3, r5
 102702a:	e492      	b.n	1026952 <_vfiprintf_r+0x7c2>
 102702c:	4658      	mov	r0, fp
 102702e:	aa1a      	add	r2, sp, #104	; 0x68
 1027030:	9906      	ldr	r1, [sp, #24]
 1027032:	f7ff f869 	bl	1026108 <__sprint_r.part.0>
 1027036:	f7ff b9c6 	b.w	10263c6 <_vfiprintf_r+0x236>
 102703a:	2300      	movs	r3, #0
 102703c:	9308      	str	r3, [sp, #32]
 102703e:	ab2d      	add	r3, sp, #180	; 0xb4
 1027040:	930b      	str	r3, [sp, #44]	; 0x2c
 1027042:	e716      	b.n	1026e72 <_vfiprintf_r+0xce2>
 1027044:	f8cd a008 	str.w	sl, [sp, #8]
 1027048:	f8cd a010 	str.w	sl, [sp, #16]
 102704c:	9507      	str	r5, [sp, #28]
 102704e:	f8dd a020 	ldr.w	sl, [sp, #32]
 1027052:	f7ff ba11 	b.w	1026478 <_vfiprintf_r+0x2e8>
 1027056:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1027058:	46a2      	mov	sl, r4
 102705a:	f7f7 fb51 	bl	101e700 <strlen>
 102705e:	9507      	str	r5, [sp, #28]
 1027060:	9408      	str	r4, [sp, #32]
 1027062:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1027066:	9004      	str	r0, [sp, #16]
 1027068:	9302      	str	r3, [sp, #8]
 102706a:	f7ff ba05 	b.w	1026478 <_vfiprintf_r+0x2e8>
 102706e:	468e      	mov	lr, r1
 1027070:	e5db      	b.n	1026c2a <_vfiprintf_r+0xa9a>
 1027072:	f248 05d0 	movw	r5, #32976	; 0x80d0
 1027076:	f100 0c01 	add.w	ip, r0, #1
 102707a:	f2c0 1506 	movt	r5, #262	; 0x106
 102707e:	e622      	b.n	1026cc6 <_vfiprintf_r+0xb36>
 1027080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 1027082:	990e      	ldr	r1, [sp, #56]	; 0x38
 1027084:	ebaa 0a02 	sub.w	sl, sl, r2
 1027088:	4650      	mov	r0, sl
 102708a:	f7f7 fc27 	bl	101e8dc <strncpy>
 102708e:	f898 3001 	ldrb.w	r3, [r8, #1]
 1027092:	b10b      	cbz	r3, 1027098 <_vfiprintf_r+0xf08>
 1027094:	f108 0801 	add.w	r8, r8, #1
 1027098:	4620      	mov	r0, r4
 102709a:	4629      	mov	r1, r5
 102709c:	220a      	movs	r2, #10
 102709e:	2300      	movs	r3, #0
 10270a0:	f7f4 fc92 	bl	101b9c8 <__aeabi_uldivmod>
 10270a4:	f04f 0900 	mov.w	r9, #0
 10270a8:	e741      	b.n	1026f2e <_vfiprintf_r+0xd9e>
 10270aa:	460b      	mov	r3, r1
 10270ac:	4601      	mov	r1, r0
 10270ae:	e4e3      	b.n	1026a78 <_vfiprintf_r+0x8e8>
 10270b0:	9a06      	ldr	r2, [sp, #24]
 10270b2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 10270b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10270ba:	8193      	strh	r3, [r2, #12]
 10270bc:	f7ff b986 	b.w	10263cc <_vfiprintf_r+0x23c>
 10270c0:	2302      	movs	r3, #2
 10270c2:	aa13      	add	r2, sp, #76	; 0x4c
 10270c4:	931e      	str	r3, [sp, #120]	; 0x78
 10270c6:	469c      	mov	ip, r3
 10270c8:	921d      	str	r2, [sp, #116]	; 0x74
 10270ca:	a91f      	add	r1, sp, #124	; 0x7c
 10270cc:	2001      	movs	r0, #1
 10270ce:	e56c      	b.n	1026baa <_vfiprintf_r+0xa1a>
 10270d0:	f04f 33ff 	mov.w	r3, #4294967295
 10270d4:	9303      	str	r3, [sp, #12]
 10270d6:	f7ff b97c 	b.w	10263d2 <_vfiprintf_r+0x242>
 10270da:	9a07      	ldr	r2, [sp, #28]
 10270dc:	787b      	ldrb	r3, [r7, #1]
 10270de:	460f      	mov	r7, r1
 10270e0:	f852 0b04 	ldr.w	r0, [r2], #4
 10270e4:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
 10270e8:	9207      	str	r2, [sp, #28]
 10270ea:	f7ff b8bf 	b.w	102626c <_vfiprintf_r+0xdc>
 10270ee:	9a06      	ldr	r2, [sp, #24]
 10270f0:	8993      	ldrh	r3, [r2, #12]
 10270f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10270f6:	8193      	strh	r3, [r2, #12]
 10270f8:	e531      	b.n	1026b5e <_vfiprintf_r+0x9ce>
 10270fa:	9602      	str	r6, [sp, #8]
 10270fc:	f7ff bb70 	b.w	10267e0 <_vfiprintf_r+0x650>
 1027100:	9602      	str	r6, [sp, #8]
 1027102:	f7ff bba2 	b.w	102684a <_vfiprintf_r+0x6ba>
 1027106:	4633      	mov	r3, r6
 1027108:	f7ff bbcf 	b.w	10268aa <_vfiprintf_r+0x71a>

0102710c <vfiprintf>:
 102710c:	b410      	push	{r4}
 102710e:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 1027112:	f2c0 1406 	movt	r4, #262	; 0x106
 1027116:	4613      	mov	r3, r2
 1027118:	460a      	mov	r2, r1
 102711a:	4601      	mov	r1, r0
 102711c:	6820      	ldr	r0, [r4, #0]
 102711e:	f85d 4b04 	ldr.w	r4, [sp], #4
 1027122:	f7ff b835 	b.w	1026190 <_vfiprintf_r>
 1027126:	bf00      	nop

01027128 <__sbprintf>:
 1027128:	b5f0      	push	{r4, r5, r6, r7, lr}
 102712a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 102712e:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 1027130:	460c      	mov	r4, r1
 1027132:	898d      	ldrh	r5, [r1, #12]
 1027134:	2700      	movs	r7, #0
 1027136:	9706      	str	r7, [sp, #24]
 1027138:	4669      	mov	r1, sp
 102713a:	89e7      	ldrh	r7, [r4, #14]
 102713c:	f025 0502 	bic.w	r5, r5, #2
 1027140:	9619      	str	r6, [sp, #100]	; 0x64
 1027142:	f8ad 500c 	strh.w	r5, [sp, #12]
 1027146:	69e6      	ldr	r6, [r4, #28]
 1027148:	6a65      	ldr	r5, [r4, #36]	; 0x24
 102714a:	f8ad 700e 	strh.w	r7, [sp, #14]
 102714e:	9607      	str	r6, [sp, #28]
 1027150:	ae1a      	add	r6, sp, #104	; 0x68
 1027152:	9509      	str	r5, [sp, #36]	; 0x24
 1027154:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1027158:	9600      	str	r6, [sp, #0]
 102715a:	9604      	str	r6, [sp, #16]
 102715c:	4606      	mov	r6, r0
 102715e:	9502      	str	r5, [sp, #8]
 1027160:	9505      	str	r5, [sp, #20]
 1027162:	f7ff f815 	bl	1026190 <_vfiprintf_r>
 1027166:	1e05      	subs	r5, r0, #0
 1027168:	db07      	blt.n	102717a <__sbprintf+0x52>
 102716a:	4630      	mov	r0, r6
 102716c:	4669      	mov	r1, sp
 102716e:	f7fc fafb 	bl	1023768 <_fflush_r>
 1027172:	2800      	cmp	r0, #0
 1027174:	bf18      	it	ne
 1027176:	f04f 35ff 	movne.w	r5, #4294967295
 102717a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 102717e:	4628      	mov	r0, r5
 1027180:	065b      	lsls	r3, r3, #25
 1027182:	bf42      	ittt	mi
 1027184:	89a3      	ldrhmi	r3, [r4, #12]
 1027186:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 102718a:	81a3      	strhmi	r3, [r4, #12]
 102718c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 1027190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1027192:	bf00      	nop

01027194 <_wcsnrtombs_l>:
 1027194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1027198:	b08b      	sub	sp, #44	; 0x2c
 102719a:	e9dd 9414 	ldrd	r9, r4, [sp, #80]	; 0x50
 102719e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 10271a2:	2c00      	cmp	r4, #0
 10271a4:	d058      	beq.n	1027258 <_wcsnrtombs_l+0xc4>
 10271a6:	6816      	ldr	r6, [r2, #0]
 10271a8:	2900      	cmp	r1, #0
 10271aa:	d05a      	beq.n	1027262 <_wcsnrtombs_l+0xce>
 10271ac:	f1b9 0f00 	cmp.w	r9, #0
 10271b0:	d064      	beq.n	102727c <_wcsnrtombs_l+0xe8>
 10271b2:	1e5d      	subs	r5, r3, #1
 10271b4:	2b00      	cmp	r3, #0
 10271b6:	d063      	beq.n	1027280 <_wcsnrtombs_l+0xec>
 10271b8:	9205      	str	r2, [sp, #20]
 10271ba:	3e04      	subs	r6, #4
 10271bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 10271c0:	f04f 0800 	mov.w	r8, #0
 10271c4:	9104      	str	r1, [sp, #16]
 10271c6:	46cb      	mov	fp, r9
 10271c8:	e00a      	b.n	10271e0 <_wcsnrtombs_l+0x4c>
 10271ca:	9b03      	ldr	r3, [sp, #12]
 10271cc:	bb13      	cbnz	r3, 1027214 <_wcsnrtombs_l+0x80>
 10271ce:	6833      	ldr	r3, [r6, #0]
 10271d0:	2b00      	cmp	r3, #0
 10271d2:	d035      	beq.n	1027240 <_wcsnrtombs_l+0xac>
 10271d4:	4559      	cmp	r1, fp
 10271d6:	d255      	bcs.n	1027284 <_wcsnrtombs_l+0xf0>
 10271d8:	3d01      	subs	r5, #1
 10271da:	4688      	mov	r8, r1
 10271dc:	1c6b      	adds	r3, r5, #1
 10271de:	d015      	beq.n	102720c <_wcsnrtombs_l+0x78>
 10271e0:	6827      	ldr	r7, [r4, #0]
 10271e2:	4623      	mov	r3, r4
 10271e4:	f856 2f04 	ldr.w	r2, [r6, #4]!
 10271e8:	a907      	add	r1, sp, #28
 10271ea:	9802      	ldr	r0, [sp, #8]
 10271ec:	9701      	str	r7, [sp, #4]
 10271ee:	f8da 70e0 	ldr.w	r7, [sl, #224]	; 0xe0
 10271f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 10271f6:	47b8      	blx	r7
 10271f8:	1c42      	adds	r2, r0, #1
 10271fa:	d035      	beq.n	1027268 <_wcsnrtombs_l+0xd4>
 10271fc:	eb00 0108 	add.w	r1, r0, r8
 1027200:	4559      	cmp	r1, fp
 1027202:	d9e2      	bls.n	10271ca <_wcsnrtombs_l+0x36>
 1027204:	f8dd b004 	ldr.w	fp, [sp, #4]
 1027208:	e9c4 b900 	strd	fp, r9, [r4]
 102720c:	4640      	mov	r0, r8
 102720e:	b00b      	add	sp, #44	; 0x2c
 1027210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1027214:	2800      	cmp	r0, #0
 1027216:	dd0c      	ble.n	1027232 <_wcsnrtombs_l+0x9e>
 1027218:	9b04      	ldr	r3, [sp, #16]
 102721a:	aa07      	add	r2, sp, #28
 102721c:	4418      	add	r0, r3
 102721e:	3b01      	subs	r3, #1
 1027220:	f100 3cff 	add.w	ip, r0, #4294967295
 1027224:	f812 7b01 	ldrb.w	r7, [r2], #1
 1027228:	f803 7f01 	strb.w	r7, [r3, #1]!
 102722c:	4563      	cmp	r3, ip
 102722e:	d1f9      	bne.n	1027224 <_wcsnrtombs_l+0x90>
 1027230:	9004      	str	r0, [sp, #16]
 1027232:	9a05      	ldr	r2, [sp, #20]
 1027234:	6813      	ldr	r3, [r2, #0]
 1027236:	3304      	adds	r3, #4
 1027238:	6013      	str	r3, [r2, #0]
 102723a:	6833      	ldr	r3, [r6, #0]
 102723c:	2b00      	cmp	r3, #0
 102723e:	d1c9      	bne.n	10271d4 <_wcsnrtombs_l+0x40>
 1027240:	9a03      	ldr	r2, [sp, #12]
 1027242:	b10a      	cbz	r2, 1027248 <_wcsnrtombs_l+0xb4>
 1027244:	9a05      	ldr	r2, [sp, #20]
 1027246:	6013      	str	r3, [r2, #0]
 1027248:	f101 38ff 	add.w	r8, r1, #4294967295
 102724c:	2300      	movs	r3, #0
 102724e:	6023      	str	r3, [r4, #0]
 1027250:	4640      	mov	r0, r8
 1027252:	b00b      	add	sp, #44	; 0x2c
 1027254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1027258:	f500 748e 	add.w	r4, r0, #284	; 0x11c
 102725c:	6816      	ldr	r6, [r2, #0]
 102725e:	2900      	cmp	r1, #0
 1027260:	d1a4      	bne.n	10271ac <_wcsnrtombs_l+0x18>
 1027262:	f04f 39ff 	mov.w	r9, #4294967295
 1027266:	e7a4      	b.n	10271b2 <_wcsnrtombs_l+0x1e>
 1027268:	9902      	ldr	r1, [sp, #8]
 102726a:	4680      	mov	r8, r0
 102726c:	228a      	movs	r2, #138	; 0x8a
 102726e:	2300      	movs	r3, #0
 1027270:	4640      	mov	r0, r8
 1027272:	600a      	str	r2, [r1, #0]
 1027274:	6023      	str	r3, [r4, #0]
 1027276:	b00b      	add	sp, #44	; 0x2c
 1027278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102727c:	46c8      	mov	r8, r9
 102727e:	e7c5      	b.n	102720c <_wcsnrtombs_l+0x78>
 1027280:	4698      	mov	r8, r3
 1027282:	e7c3      	b.n	102720c <_wcsnrtombs_l+0x78>
 1027284:	4688      	mov	r8, r1
 1027286:	e7c1      	b.n	102720c <_wcsnrtombs_l+0x78>

01027288 <_wcsnrtombs_r>:
 1027288:	f24c 60b8 	movw	r0, #50872	; 0xc6b8
 102728c:	f2c0 1006 	movt	r0, #262	; 0x106
 1027290:	b5f0      	push	{r4, r5, r6, r7, lr}
 1027292:	b085      	sub	sp, #20
 1027294:	6800      	ldr	r0, [r0, #0]
 1027296:	f64c 25e8 	movw	r5, #51944	; 0xcae8
 102729a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 102729e:	f2c0 1506 	movt	r5, #262	; 0x106
 10272a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 10272a4:	9700      	str	r7, [sp, #0]
 10272a6:	2c00      	cmp	r4, #0
 10272a8:	bf08      	it	eq
 10272aa:	462c      	moveq	r4, r5
 10272ac:	e9cd 6401 	strd	r6, r4, [sp, #4]
 10272b0:	f7ff ff70 	bl	1027194 <_wcsnrtombs_l>
 10272b4:	b005      	add	sp, #20
 10272b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

010272b8 <wcsnrtombs>:
 10272b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 10272ba:	f24c 64b8 	movw	r4, #50872	; 0xc6b8
 10272be:	f2c0 1406 	movt	r4, #262	; 0x106
 10272c2:	b085      	sub	sp, #20
 10272c4:	f64c 25e8 	movw	r5, #51944	; 0xcae8
 10272c8:	f2c0 1506 	movt	r5, #262	; 0x106
 10272cc:	6827      	ldr	r7, [r4, #0]
 10272ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 10272d0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 10272d2:	9300      	str	r3, [sp, #0]
 10272d4:	4613      	mov	r3, r2
 10272d6:	2c00      	cmp	r4, #0
 10272d8:	bf08      	it	eq
 10272da:	462c      	moveq	r4, r5
 10272dc:	460a      	mov	r2, r1
 10272de:	9402      	str	r4, [sp, #8]
 10272e0:	4601      	mov	r1, r0
 10272e2:	9601      	str	r6, [sp, #4]
 10272e4:	4638      	mov	r0, r7
 10272e6:	f7ff ff55 	bl	1027194 <_wcsnrtombs_l>
 10272ea:	b005      	add	sp, #20
 10272ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10272ee:	bf00      	nop

010272f0 <_write_r>:
 10272f0:	b570      	push	{r4, r5, r6, lr}
 10272f2:	460d      	mov	r5, r1
 10272f4:	f641 7468 	movw	r4, #8040	; 0x1f68
 10272f8:	f2c0 140c 	movt	r4, #268	; 0x10c
 10272fc:	4611      	mov	r1, r2
 10272fe:	4606      	mov	r6, r0
 1027300:	461a      	mov	r2, r3
 1027302:	4628      	mov	r0, r5
 1027304:	2300      	movs	r3, #0
 1027306:	6023      	str	r3, [r4, #0]
 1027308:	f000 ea20 	blx	102774c <_write>
 102730c:	1c43      	adds	r3, r0, #1
 102730e:	d000      	beq.n	1027312 <_write_r+0x22>
 1027310:	bd70      	pop	{r4, r5, r6, pc}
 1027312:	6823      	ldr	r3, [r4, #0]
 1027314:	2b00      	cmp	r3, #0
 1027316:	d0fb      	beq.n	1027310 <_write_r+0x20>
 1027318:	6033      	str	r3, [r6, #0]
 102731a:	bd70      	pop	{r4, r5, r6, pc}

0102731c <_close_r>:
 102731c:	b538      	push	{r3, r4, r5, lr}
 102731e:	f641 7468 	movw	r4, #8040	; 0x1f68
 1027322:	f2c0 140c 	movt	r4, #268	; 0x10c
 1027326:	4605      	mov	r5, r0
 1027328:	4608      	mov	r0, r1
 102732a:	2300      	movs	r3, #0
 102732c:	6023      	str	r3, [r4, #0]
 102732e:	f000 ea60 	blx	10277f0 <_close>
 1027332:	1c43      	adds	r3, r0, #1
 1027334:	d000      	beq.n	1027338 <_close_r+0x1c>
 1027336:	bd38      	pop	{r3, r4, r5, pc}
 1027338:	6823      	ldr	r3, [r4, #0]
 102733a:	2b00      	cmp	r3, #0
 102733c:	d0fb      	beq.n	1027336 <_close_r+0x1a>
 102733e:	602b      	str	r3, [r5, #0]
 1027340:	bd38      	pop	{r3, r4, r5, pc}
 1027342:	bf00      	nop

01027344 <__env_lock>:
 1027344:	4770      	bx	lr
 1027346:	bf00      	nop

01027348 <__env_unlock>:
 1027348:	4770      	bx	lr
 102734a:	bf00      	nop

0102734c <_fclose_r>:
 102734c:	b570      	push	{r4, r5, r6, lr}
 102734e:	b139      	cbz	r1, 1027360 <_fclose_r+0x14>
 1027350:	4605      	mov	r5, r0
 1027352:	460c      	mov	r4, r1
 1027354:	b108      	cbz	r0, 102735a <_fclose_r+0xe>
 1027356:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1027358:	b383      	cbz	r3, 10273bc <_fclose_r+0x70>
 102735a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 102735e:	b913      	cbnz	r3, 1027366 <_fclose_r+0x1a>
 1027360:	2600      	movs	r6, #0
 1027362:	4630      	mov	r0, r6
 1027364:	bd70      	pop	{r4, r5, r6, pc}
 1027366:	4621      	mov	r1, r4
 1027368:	4628      	mov	r0, r5
 102736a:	f7fc f957 	bl	102361c <__sflush_r>
 102736e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1027370:	4606      	mov	r6, r0
 1027372:	b133      	cbz	r3, 1027382 <_fclose_r+0x36>
 1027374:	69e1      	ldr	r1, [r4, #28]
 1027376:	4628      	mov	r0, r5
 1027378:	4798      	blx	r3
 102737a:	2800      	cmp	r0, #0
 102737c:	bfb8      	it	lt
 102737e:	f04f 36ff 	movlt.w	r6, #4294967295
 1027382:	89a3      	ldrh	r3, [r4, #12]
 1027384:	061b      	lsls	r3, r3, #24
 1027386:	d420      	bmi.n	10273ca <_fclose_r+0x7e>
 1027388:	6b21      	ldr	r1, [r4, #48]	; 0x30
 102738a:	b141      	cbz	r1, 102739e <_fclose_r+0x52>
 102738c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1027390:	4299      	cmp	r1, r3
 1027392:	d002      	beq.n	102739a <_fclose_r+0x4e>
 1027394:	4628      	mov	r0, r5
 1027396:	f7fc fb99 	bl	1023acc <_free_r>
 102739a:	2300      	movs	r3, #0
 102739c:	6323      	str	r3, [r4, #48]	; 0x30
 102739e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 10273a0:	b121      	cbz	r1, 10273ac <_fclose_r+0x60>
 10273a2:	4628      	mov	r0, r5
 10273a4:	f7fc fb92 	bl	1023acc <_free_r>
 10273a8:	2300      	movs	r3, #0
 10273aa:	6463      	str	r3, [r4, #68]	; 0x44
 10273ac:	f7fc faf2 	bl	1023994 <__sfp_lock_acquire>
 10273b0:	2300      	movs	r3, #0
 10273b2:	81a3      	strh	r3, [r4, #12]
 10273b4:	f7fc faf0 	bl	1023998 <__sfp_lock_release>
 10273b8:	4630      	mov	r0, r6
 10273ba:	bd70      	pop	{r4, r5, r6, pc}
 10273bc:	f7fc fae6 	bl	102398c <__sinit>
 10273c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10273c4:	2b00      	cmp	r3, #0
 10273c6:	d0cb      	beq.n	1027360 <_fclose_r+0x14>
 10273c8:	e7cd      	b.n	1027366 <_fclose_r+0x1a>
 10273ca:	6921      	ldr	r1, [r4, #16]
 10273cc:	4628      	mov	r0, r5
 10273ce:	f7fc fb7d 	bl	1023acc <_free_r>
 10273d2:	e7d9      	b.n	1027388 <_fclose_r+0x3c>

010273d4 <fclose>:
 10273d4:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10273d8:	f2c0 1306 	movt	r3, #262	; 0x106
 10273dc:	4601      	mov	r1, r0
 10273de:	6818      	ldr	r0, [r3, #0]
 10273e0:	f7ff bfb4 	b.w	102734c <_fclose_r>

010273e4 <__fputwc>:
 10273e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10273e8:	b082      	sub	sp, #8
 10273ea:	4680      	mov	r8, r0
 10273ec:	4689      	mov	r9, r1
 10273ee:	4614      	mov	r4, r2
 10273f0:	f7f5 f930 	bl	101c654 <__locale_mb_cur_max>
 10273f4:	2801      	cmp	r0, #1
 10273f6:	d103      	bne.n	1027400 <__fputwc+0x1c>
 10273f8:	f109 33ff 	add.w	r3, r9, #4294967295
 10273fc:	2bfe      	cmp	r3, #254	; 0xfe
 10273fe:	d938      	bls.n	1027472 <__fputwc+0x8e>
 1027400:	466d      	mov	r5, sp
 1027402:	464a      	mov	r2, r9
 1027404:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 1027408:	4640      	mov	r0, r8
 102740a:	4629      	mov	r1, r5
 102740c:	f7fa ff76 	bl	10222fc <_wcrtomb_r>
 1027410:	1c42      	adds	r2, r0, #1
 1027412:	4606      	mov	r6, r0
 1027414:	d038      	beq.n	1027488 <__fputwc+0xa4>
 1027416:	b398      	cbz	r0, 1027480 <__fputwc+0x9c>
 1027418:	f89d c000 	ldrb.w	ip, [sp]
 102741c:	f1c5 0a01 	rsb	sl, r5, #1
 1027420:	e00a      	b.n	1027438 <__fputwc+0x54>
 1027422:	6823      	ldr	r3, [r4, #0]
 1027424:	1c5a      	adds	r2, r3, #1
 1027426:	6022      	str	r2, [r4, #0]
 1027428:	f883 c000 	strb.w	ip, [r3]
 102742c:	eb0a 0305 	add.w	r3, sl, r5
 1027430:	429e      	cmp	r6, r3
 1027432:	d925      	bls.n	1027480 <__fputwc+0x9c>
 1027434:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 1027438:	68a3      	ldr	r3, [r4, #8]
 102743a:	f103 3eff 	add.w	lr, r3, #4294967295
 102743e:	f8c4 e008 	str.w	lr, [r4, #8]
 1027442:	f1be 0f00 	cmp.w	lr, #0
 1027446:	daec      	bge.n	1027422 <__fputwc+0x3e>
 1027448:	69a7      	ldr	r7, [r4, #24]
 102744a:	4661      	mov	r1, ip
 102744c:	4622      	mov	r2, r4
 102744e:	4640      	mov	r0, r8
 1027450:	45be      	cmp	lr, r7
 1027452:	bfb4      	ite	lt
 1027454:	2300      	movlt	r3, #0
 1027456:	2301      	movge	r3, #1
 1027458:	f1bc 0f0a 	cmp.w	ip, #10
 102745c:	bf08      	it	eq
 102745e:	2300      	moveq	r3, #0
 1027460:	2b00      	cmp	r3, #0
 1027462:	d1de      	bne.n	1027422 <__fputwc+0x3e>
 1027464:	f000 f8a2 	bl	10275ac <__swbuf_r>
 1027468:	1c43      	adds	r3, r0, #1
 102746a:	d1df      	bne.n	102742c <__fputwc+0x48>
 102746c:	b002      	add	sp, #8
 102746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1027472:	fa5f fc89 	uxtb.w	ip, r9
 1027476:	4606      	mov	r6, r0
 1027478:	466d      	mov	r5, sp
 102747a:	f88d c000 	strb.w	ip, [sp]
 102747e:	e7cd      	b.n	102741c <__fputwc+0x38>
 1027480:	4648      	mov	r0, r9
 1027482:	b002      	add	sp, #8
 1027484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1027488:	89a3      	ldrh	r3, [r4, #12]
 102748a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 102748e:	81a3      	strh	r3, [r4, #12]
 1027490:	e7ec      	b.n	102746c <__fputwc+0x88>
 1027492:	bf00      	nop

01027494 <_fputwc_r>:
 1027494:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1027498:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 102749c:	d10b      	bne.n	10274b6 <_fputwc_r+0x22>
 102749e:	b410      	push	{r4}
 10274a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 10274a4:	6e54      	ldr	r4, [r2, #100]	; 0x64
 10274a6:	8193      	strh	r3, [r2, #12]
 10274a8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 10274ac:	6654      	str	r4, [r2, #100]	; 0x64
 10274ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 10274b2:	f7ff bf97 	b.w	10273e4 <__fputwc>
 10274b6:	f7ff bf95 	b.w	10273e4 <__fputwc>
 10274ba:	bf00      	nop

010274bc <fputwc>:
 10274bc:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 10274c0:	f2c0 1306 	movt	r3, #262	; 0x106
 10274c4:	b570      	push	{r4, r5, r6, lr}
 10274c6:	4606      	mov	r6, r0
 10274c8:	681d      	ldr	r5, [r3, #0]
 10274ca:	460c      	mov	r4, r1
 10274cc:	b10d      	cbz	r5, 10274d2 <fputwc+0x16>
 10274ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 10274d0:	b18b      	cbz	r3, 10274f6 <fputwc+0x3a>
 10274d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10274d6:	049a      	lsls	r2, r3, #18
 10274d8:	d406      	bmi.n	10274e8 <fputwc+0x2c>
 10274da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 10274dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 10274e0:	81a3      	strh	r3, [r4, #12]
 10274e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 10274e6:	6662      	str	r2, [r4, #100]	; 0x64
 10274e8:	4622      	mov	r2, r4
 10274ea:	4631      	mov	r1, r6
 10274ec:	4628      	mov	r0, r5
 10274ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 10274f2:	f7ff bf77 	b.w	10273e4 <__fputwc>
 10274f6:	4628      	mov	r0, r5
 10274f8:	f7fc fa48 	bl	102398c <__sinit>
 10274fc:	e7e9      	b.n	10274d2 <fputwc+0x16>
 10274fe:	bf00      	nop

01027500 <_fstat_r>:
 1027500:	b538      	push	{r3, r4, r5, lr}
 1027502:	460b      	mov	r3, r1
 1027504:	f641 7468 	movw	r4, #8040	; 0x1f68
 1027508:	f2c0 140c 	movt	r4, #268	; 0x10c
 102750c:	4605      	mov	r5, r0
 102750e:	4611      	mov	r1, r2
 1027510:	4618      	mov	r0, r3
 1027512:	2300      	movs	r3, #0
 1027514:	6023      	str	r3, [r4, #0]
 1027516:	f000 e94c 	blx	10277b0 <_fstat>
 102751a:	1c43      	adds	r3, r0, #1
 102751c:	d000      	beq.n	1027520 <_fstat_r+0x20>
 102751e:	bd38      	pop	{r3, r4, r5, pc}
 1027520:	6823      	ldr	r3, [r4, #0]
 1027522:	2b00      	cmp	r3, #0
 1027524:	d0fb      	beq.n	102751e <_fstat_r+0x1e>
 1027526:	602b      	str	r3, [r5, #0]
 1027528:	bd38      	pop	{r3, r4, r5, pc}
 102752a:	bf00      	nop

0102752c <_isatty_r>:
 102752c:	b538      	push	{r3, r4, r5, lr}
 102752e:	f641 7468 	movw	r4, #8040	; 0x1f68
 1027532:	f2c0 140c 	movt	r4, #268	; 0x10c
 1027536:	4605      	mov	r5, r0
 1027538:	4608      	mov	r0, r1
 102753a:	2300      	movs	r3, #0
 102753c:	6023      	str	r3, [r4, #0]
 102753e:	f000 e94e 	blx	10277dc <_isatty>
 1027542:	1c43      	adds	r3, r0, #1
 1027544:	d000      	beq.n	1027548 <_isatty_r+0x1c>
 1027546:	bd38      	pop	{r3, r4, r5, pc}
 1027548:	6823      	ldr	r3, [r4, #0]
 102754a:	2b00      	cmp	r3, #0
 102754c:	d0fb      	beq.n	1027546 <_isatty_r+0x1a>
 102754e:	602b      	str	r3, [r5, #0]
 1027550:	bd38      	pop	{r3, r4, r5, pc}
 1027552:	bf00      	nop

01027554 <_lseek_r>:
 1027554:	b570      	push	{r4, r5, r6, lr}
 1027556:	460d      	mov	r5, r1
 1027558:	f641 7468 	movw	r4, #8040	; 0x1f68
 102755c:	f2c0 140c 	movt	r4, #268	; 0x10c
 1027560:	4611      	mov	r1, r2
 1027562:	4606      	mov	r6, r0
 1027564:	461a      	mov	r2, r3
 1027566:	4628      	mov	r0, r5
 1027568:	2300      	movs	r3, #0
 102756a:	6023      	str	r3, [r4, #0]
 102756c:	f000 e8ac 	blx	10276c8 <_lseek>
 1027570:	1c43      	adds	r3, r0, #1
 1027572:	d000      	beq.n	1027576 <_lseek_r+0x22>
 1027574:	bd70      	pop	{r4, r5, r6, pc}
 1027576:	6823      	ldr	r3, [r4, #0]
 1027578:	2b00      	cmp	r3, #0
 102757a:	d0fb      	beq.n	1027574 <_lseek_r+0x20>
 102757c:	6033      	str	r3, [r6, #0]
 102757e:	bd70      	pop	{r4, r5, r6, pc}

01027580 <_read_r>:
 1027580:	b570      	push	{r4, r5, r6, lr}
 1027582:	460d      	mov	r5, r1
 1027584:	f641 7468 	movw	r4, #8040	; 0x1f68
 1027588:	f2c0 140c 	movt	r4, #268	; 0x10c
 102758c:	4611      	mov	r1, r2
 102758e:	4606      	mov	r6, r0
 1027590:	461a      	mov	r2, r3
 1027592:	4628      	mov	r0, r5
 1027594:	2300      	movs	r3, #0
 1027596:	6023      	str	r3, [r4, #0]
 1027598:	f000 e908 	blx	10277ac <_read>
 102759c:	1c43      	adds	r3, r0, #1
 102759e:	d000      	beq.n	10275a2 <_read_r+0x22>
 10275a0:	bd70      	pop	{r4, r5, r6, pc}
 10275a2:	6823      	ldr	r3, [r4, #0]
 10275a4:	2b00      	cmp	r3, #0
 10275a6:	d0fb      	beq.n	10275a0 <_read_r+0x20>
 10275a8:	6033      	str	r3, [r6, #0]
 10275aa:	bd70      	pop	{r4, r5, r6, pc}

010275ac <__swbuf_r>:
 10275ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10275ae:	460d      	mov	r5, r1
 10275b0:	4614      	mov	r4, r2
 10275b2:	4606      	mov	r6, r0
 10275b4:	b110      	cbz	r0, 10275bc <__swbuf_r+0x10>
 10275b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 10275b8:	2b00      	cmp	r3, #0
 10275ba:	d03a      	beq.n	1027632 <__swbuf_r+0x86>
 10275bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 10275c0:	69a3      	ldr	r3, [r4, #24]
 10275c2:	b291      	uxth	r1, r2
 10275c4:	0708      	lsls	r0, r1, #28
 10275c6:	60a3      	str	r3, [r4, #8]
 10275c8:	d51e      	bpl.n	1027608 <__swbuf_r+0x5c>
 10275ca:	6923      	ldr	r3, [r4, #16]
 10275cc:	b1e3      	cbz	r3, 1027608 <__swbuf_r+0x5c>
 10275ce:	b2ed      	uxtb	r5, r5
 10275d0:	0489      	lsls	r1, r1, #18
 10275d2:	462f      	mov	r7, r5
 10275d4:	d525      	bpl.n	1027622 <__swbuf_r+0x76>
 10275d6:	6822      	ldr	r2, [r4, #0]
 10275d8:	6961      	ldr	r1, [r4, #20]
 10275da:	1ad3      	subs	r3, r2, r3
 10275dc:	4299      	cmp	r1, r3
 10275de:	bfc8      	it	gt
 10275e0:	3301      	addgt	r3, #1
 10275e2:	dd32      	ble.n	102764a <__swbuf_r+0x9e>
 10275e4:	68a1      	ldr	r1, [r4, #8]
 10275e6:	1c50      	adds	r0, r2, #1
 10275e8:	6020      	str	r0, [r4, #0]
 10275ea:	3901      	subs	r1, #1
 10275ec:	60a1      	str	r1, [r4, #8]
 10275ee:	7015      	strb	r5, [r2, #0]
 10275f0:	6962      	ldr	r2, [r4, #20]
 10275f2:	429a      	cmp	r2, r3
 10275f4:	d020      	beq.n	1027638 <__swbuf_r+0x8c>
 10275f6:	7b23      	ldrb	r3, [r4, #12]
 10275f8:	2d0a      	cmp	r5, #10
 10275fa:	bf14      	ite	ne
 10275fc:	2500      	movne	r5, #0
 10275fe:	f003 0501 	andeq.w	r5, r3, #1
 1027602:	b9cd      	cbnz	r5, 1027638 <__swbuf_r+0x8c>
 1027604:	4638      	mov	r0, r7
 1027606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1027608:	4621      	mov	r1, r4
 102760a:	4630      	mov	r0, r6
 102760c:	f7fb f800 	bl	1022610 <__swsetup_r>
 1027610:	b9c0      	cbnz	r0, 1027644 <__swbuf_r+0x98>
 1027612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1027616:	b2ed      	uxtb	r5, r5
 1027618:	6923      	ldr	r3, [r4, #16]
 102761a:	462f      	mov	r7, r5
 102761c:	b291      	uxth	r1, r2
 102761e:	0489      	lsls	r1, r1, #18
 1027620:	d4d9      	bmi.n	10275d6 <__swbuf_r+0x2a>
 1027622:	6e61      	ldr	r1, [r4, #100]	; 0x64
 1027624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 1027628:	81a2      	strh	r2, [r4, #12]
 102762a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 102762e:	6661      	str	r1, [r4, #100]	; 0x64
 1027630:	e7d1      	b.n	10275d6 <__swbuf_r+0x2a>
 1027632:	f7fc f9ab 	bl	102398c <__sinit>
 1027636:	e7c1      	b.n	10275bc <__swbuf_r+0x10>
 1027638:	4621      	mov	r1, r4
 102763a:	4630      	mov	r0, r6
 102763c:	f7fc f894 	bl	1023768 <_fflush_r>
 1027640:	2800      	cmp	r0, #0
 1027642:	d0df      	beq.n	1027604 <__swbuf_r+0x58>
 1027644:	f04f 37ff 	mov.w	r7, #4294967295
 1027648:	e7dc      	b.n	1027604 <__swbuf_r+0x58>
 102764a:	4621      	mov	r1, r4
 102764c:	4630      	mov	r0, r6
 102764e:	f7fc f88b 	bl	1023768 <_fflush_r>
 1027652:	2800      	cmp	r0, #0
 1027654:	d1f6      	bne.n	1027644 <__swbuf_r+0x98>
 1027656:	6822      	ldr	r2, [r4, #0]
 1027658:	2301      	movs	r3, #1
 102765a:	e7c3      	b.n	10275e4 <__swbuf_r+0x38>

0102765c <__swbuf>:
 102765c:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
 1027660:	f2c0 1306 	movt	r3, #262	; 0x106
 1027664:	460a      	mov	r2, r1
 1027666:	4601      	mov	r1, r0
 1027668:	6818      	ldr	r0, [r3, #0]
 102766a:	f7ff bf9f 	b.w	10275ac <__swbuf_r>
 102766e:	bf00      	nop

01027670 <_sbrk>:
  static u8 *heap = NULL;
  u8 *prev_heap;
  static u8 *HeapEndPtr = (u8 *)&_heap_end;
  caddr_t Status;

  if (heap == NULL) {
 1027670:	e3042334 	movw	r2, #17204	; 0x4334
 1027674:	e3402107 	movt	r2, #263	; 0x107
 1027678:	e5923000 	ldr	r3, [r2]
 102767c:	e3530000 	cmp	r3, #0
    heap = (u8 *)&_heap_start;
 1027680:	03011f70 	movweq	r1, #8048	; 0x1f70
 1027684:	0340110c 	movteq	r1, #268	; 0x10c
 1027688:	01a03001 	moveq	r3, r1
 102768c:	05821000 	streq	r1, [r2]
  }
  prev_heap = heap;

	if (((heap + incr) <= HeapEndPtr) && (prev_heap != NULL)) {
 1027690:	e3011f70 	movw	r1, #8048	; 0x1f70
 1027694:	e0830000 	add	r0, r3, r0
 1027698:	e3401e8c 	movt	r1, #3724	; 0xe8c
 102769c:	e1500001 	cmp	r0, r1
  heap += incr;
	  Status = (caddr_t) ((void *)prev_heap);
	} else {
	  Status = (caddr_t) -1;
 10276a0:	83e03000 	mvnhi	r3, #0
  heap += incr;
 10276a4:	95820000 	strls	r0, [r2]
  }

  return Status;
}
 10276a8:	e1a00003 	mov	r0, r3
 10276ac:	e12fff1e 	bx	lr

010276b0 <lseek>:
#endif
/*
 * lseek --  Since a serial port is non-seekable, we return an error.
 */
__attribute__((weak)) off_t lseek(s32 fd, off_t offset, s32 whence)
{
 10276b0:	e92d4010 	push	{r4, lr}
  (void)fd;
  (void)offset;
  (void)whence;
  errno = ESPIPE;
 10276b4:	eb000041 	bl	10277c0 <__errno>
 10276b8:	e3a0301d 	mov	r3, #29
 10276bc:	e5803000 	str	r3, [r0]
  return ((off_t)-1);
}
 10276c0:	e3e00000 	mvn	r0, #0
 10276c4:	e8bd8010 	pop	{r4, pc}

010276c8 <_lseek>:
 10276c8:	e92d4010 	push	{r4, lr}
 10276cc:	eb00003b 	bl	10277c0 <__errno>
 10276d0:	e3a0301d 	mov	r3, #29
 10276d4:	e5803000 	str	r3, [r0]
 10276d8:	e3e00000 	mvn	r0, #0
 10276dc:	e8bd8010 	pop	{r4, pc}

010276e0 <write>:
 *          open will only return an error.
 */
__attribute__((weak)) sint32
write (sint32 fd, char8* buf, sint32 nbytes)

{
 10276e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
#ifdef STDOUT_BASEADDRESS
  s32 i;
  char8* LocalBuf = buf;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
 10276e4:	e2526000 	subs	r6, r2, #0
 10276e8:	da000015 	ble	1027744 <write+0x64>
 10276ec:	e1a04001 	mov	r4, r1
 10276f0:	e3a03000 	mov	r3, #0
 10276f4:	ea000003 	b	1027708 <write+0x28>
	}
	if(LocalBuf != NULL) {
	    if (*LocalBuf == '\n') {
	      outbyte ('\r');
	    }
	    outbyte (*LocalBuf);
 10276f8:	ebffc890 	bl	1019940 <outbyte>
  for (i = 0; i < nbytes; i++) {
 10276fc:	e1560005 	cmp	r6, r5
 1027700:	e1a03005 	mov	r3, r5
 1027704:	da00000e 	ble	1027744 <write+0x64>
	if(LocalBuf != NULL) {
 1027708:	e3540000 	cmp	r4, #0
 102770c:	e2835001 	add	r5, r3, #1
 1027710:	0a00000b 	beq	1027744 <write+0x64>
	if(LocalBuf != NULL) {
 1027714:	e0947003 	adds	r7, r4, r3
 1027718:	0a000009 	beq	1027744 <write+0x64>
	    if (*LocalBuf == '\n') {
 102771c:	e7d40003 	ldrb	r0, [r4, r3]
 1027720:	e350000a 	cmp	r0, #10
 1027724:	1afffff3 	bne	10276f8 <write+0x18>
	      outbyte ('\r');
 1027728:	e3a0000d 	mov	r0, #13
 102772c:	ebffc883 	bl	1019940 <outbyte>
 1027730:	e5d70000 	ldrb	r0, [r7]
	    outbyte (*LocalBuf);
 1027734:	ebffc881 	bl	1019940 <outbyte>
  for (i = 0; i < nbytes; i++) {
 1027738:	e1560005 	cmp	r6, r5
 102773c:	e1a03005 	mov	r3, r5
 1027740:	cafffff0 	bgt	1027708 <write+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 1027744:	e1a00006 	mov	r0, r6
 1027748:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0102774c <_write>:
 102774c:	eaffffe3 	b	10276e0 <write>

01027750 <read>:
  s32 i;
  s32 numbytes = 0;
  char8* LocalBuf = buf;

  (void)fd;
  if(LocalBuf != NULL) {
 1027750:	e3510000 	cmp	r1, #0
 1027754:	0a000012 	beq	10277a4 <read+0x54>
	for (i = 0; i < nbytes; i++) {
 1027758:	e3520000 	cmp	r2, #0
 102775c:	da00000f 	ble	10277a0 <read+0x50>
 1027760:	e2422001 	sub	r2, r2, #1
{
 1027764:	e92d4070 	push	{r4, r5, r6, lr}
 1027768:	e2414001 	sub	r4, r1, #1
 102776c:	e0815002 	add	r5, r1, r2
 1027770:	e2616002 	rsb	r6, r1, #2
 1027774:	ea000001 	b	1027780 <read+0x30>
	for (i = 0; i < nbytes; i++) {
 1027778:	e1540005 	cmp	r4, r5
 102777c:	0a000005 	beq	1027798 <read+0x48>
		numbytes++;
		*(LocalBuf + i) = inbyte();
 1027780:	eb000017 	bl	10277e4 <inbyte>
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1027784:	e350000d 	cmp	r0, #13
 1027788:	1350000a 	cmpne	r0, #10
 102778c:	e0861004 	add	r1, r6, r4
		*(LocalBuf + i) = inbyte();
 1027790:	e5e40001 	strb	r0, [r4, #1]!
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1027794:	1afffff7 	bne	1027778 <read+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 1027798:	e1a00001 	mov	r0, r1
 102779c:	e8bd8070 	pop	{r4, r5, r6, pc}
  s32 numbytes = 0;
 10277a0:	e3a01000 	mov	r1, #0
}
 10277a4:	e1a00001 	mov	r0, r1
 10277a8:	e12fff1e 	bx	lr

010277ac <_read>:
 10277ac:	eaffffe7 	b	1027750 <read>

010277b0 <_fstat>:
 * fstat -- Since we have no file system, we just return an error.
 */
__attribute__((weak)) s32 _fstat(s32 fd, struct stat *buf)
{
  (void)fd;
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 10277b0:	e3a03a02 	mov	r3, #8192	; 0x2000

  return (0);
}
 10277b4:	e3a00000 	mov	r0, #0
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 10277b8:	e5813004 	str	r3, [r1, #4]
}
 10277bc:	e12fff1e 	bx	lr

010277c0 <__errno>:
#endif

__attribute__((weak)) sint32 *
__errno (void)
{
  return &_REENT->_errno;
 10277c0:	e30c36b8 	movw	r3, #50872	; 0xc6b8
 10277c4:	e3403106 	movt	r3, #262	; 0x106
}
 10277c8:	e5930000 	ldr	r0, [r3]
 10277cc:	e12fff1e 	bx	lr

010277d0 <_exit>:
*/
__attribute__((weak)) void _exit (sint32 status)
{
  (void)status;
  while (1) {
	;
 10277d0:	eafffffe 	b	10277d0 <_exit>

010277d4 <isatty>:
 */
__attribute__((weak)) sint32 isatty(sint32 fd)
{
  (void)fd;
  return (1);
}
 10277d4:	e3a00001 	mov	r0, #1
 10277d8:	e12fff1e 	bx	lr

010277dc <_isatty>:
 10277dc:	e3a00001 	mov	r0, #1
 10277e0:	e12fff1e 	bx	lr

010277e4 <inbyte>:
#ifdef __cplusplus
}
#endif 

char inbyte(void) {
	 return XUartPs_RecvByte(STDIN_BASEADDRESS);
 10277e4:	e3a00a01 	mov	r0, #4096	; 0x1000
 10277e8:	e34e0000 	movt	r0, #57344	; 0xe000
 10277ec:	eaffcc38 	b	101a8d4 <XUartPs_RecvByte>

010277f0 <_close>:

__attribute__((weak)) s32 _close(s32 fd)
{
  (void)fd;
  return (0);
}
 10277f0:	e3a00000 	mov	r0, #0
 10277f4:	e12fff1e 	bx	lr

010277f8 <main>:

//uint8_t src_buffer[16384] __attribute__((aligned(32)));
//uint8_t dest_buffer[16384] __attribute__((aligned(32)));

int main()
{
 10277f8:	e92d4010 	push	{r4, lr}
	int res, i = 0;

	Xil_DCacheDisable();
 10277fc:	ebffc78a 	bl	101962c <Xil_DCacheDisable>

	hal_init();
 1027800:	ebffa055 	bl	100f95c <hal_init>
	acq_init();
 1027804:	ebff8cc0 	bl	100ab0c <acq_init>
	spi_init();
 1027808:	ebffa79b 	bl	101167c <spi_init>
	mipi_csi_init();
 102780c:	ebffa241 	bl	1010118 <mipi_csi_init>
	sysctrl_init();
 1027810:	ebffaea0 	bl	1013298 <sysctrl_init>
	acq_hacks_init();
	acq_hacks_run();
#endif

	// Run system control main loop;  we never leave that function.
	sysctrl_main_loop();
 1027814:	ebffaf35 	bl	10134f0 <sysctrl_main_loop>

    cleanup_platform();
 1027818:	ebffa6ad 	bl	10112d4 <cleanup_platform>
}
 102781c:	e3a00000 	mov	r0, #0
 1027820:	e8bd8010 	pop	{r4, pc}
 1027824:	00000000 	andeq	r0, r0, r0

01027828 <__qsort_from_arm>:
 1027828:	e51ff004 	ldr	pc, [pc, #-4]	; 102782c <__qsort_from_arm+0x4>
 102782c:	0101daa1 	.word	0x0101daa1

01027830 <__free_from_arm>:
 1027830:	e51ff004 	ldr	pc, [pc, #-4]	; 1027834 <__free_from_arm+0x4>
 1027834:	0101c7c9 	.word	0x0101c7c9

01027838 <__strcmp_from_arm>:
 1027838:	e51ff004 	ldr	pc, [pc, #-4]	; 102783c <__strcmp_from_arm+0x4>
 102783c:	0101e309 	.word	0x0101e309

Disassembly of section .init:

01027840 <_init>:
 1027840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1027842:	bf00      	nop
 1027844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 1027846:	bc08      	pop	{r3}
 1027848:	469e      	mov	lr, r3
 102784a:	4770      	bx	lr

Disassembly of section .fini:

0102784c <_fini>:
 102784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 102784e:	bf00      	nop
 1027850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 1027852:	bc08      	pop	{r3}
 1027854:	469e      	mov	lr, r3
 1027856:	4770      	bx	lr
