
../Release/ps_app.elf:     file format elf32-littlearm

SYMBOL TABLE:
01000000 l    d  .text	00000000 .text
01025e20 l    d  .init	00000000 .init
01025e2c l    d  .fini	00000000 .fini
01025e38 l    d  .rodata	00000000 .rodata
0106a488 l    d  .data	00000000 .data
0106b318 l    d  .eh_frame	00000000 .eh_frame
0106c000 l    d  .mmu_tbl	00000000 .mmu_tbl
01070000 l    d  .ARM.exidx	00000000 .ARM.exidx
01070008 l    d  .init_array	00000000 .init_array
0107000c l    d  .fini_array	00000000 .fini_array
01070010 l    d  .ARM.attributes	00000000 .ARM.attributes
01070020 l    d  .bss	00000000 .bss
01465f54 l    d  .heap	00000000 .heap
00000000 l    d  .stack	00000000 .stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 asm_vectors.o
010000a0 l       .text	00000000 Undefined
010000bc l       .text	00000000 SVCHandler
01000100 l       .text	00000000 PrefetchAbortHandler
010000e0 l       .text	00000000 DataAbortHandler
01000020 l       .text	00000000 IRQHandler
01000060 l       .text	00000000 FIQHandler
0100007c l       .text	00000000 FIQLoop
00000000 l    df *ABS*	00000000 boot.o
f8f02000 l       *ABS*	00000000 PSS_L2CC_BASE_ADDR
f8000000 l       *ABS*	00000000 PSS_SLCR_BASE_ADDR
0fffff00 l       *ABS*	00000000 RESERVED
fe00000f l       *ABS*	00000000 LRemap
f8f0277c l       *ABS*	00000000 L2CCWay
f8f02730 l       *ABS*	00000000 L2CCSync
f8f02100 l       *ABS*	00000000 L2CCCrtl
f8f02104 l       *ABS*	00000000 L2CCAuxCrtl
f8f02108 l       *ABS*	00000000 L2CCTAGLatReg
f8f0210c l       *ABS*	00000000 L2CCDataLatReg
f8f02220 l       *ABS*	00000000 L2CCIntClear
f8f0221c l       *ABS*	00000000 L2CCIntRaw
f8000004 l       *ABS*	00000000 SLCRlockReg
f8000008 l       *ABS*	00000000 SLCRUnlockReg
f8000a1c l       *ABS*	00000000 SLCRL2cRamReg
f8000244 l       *ABS*	00000000 SLCRCPURSTReg
f800d010 l       *ABS*	00000000 EFUSEStaus
00001005 l       *ABS*	00000000 CRValMmuCac
00002000 l       *ABS*	00000000 CRValHiVectorAddr
72360000 l       *ABS*	00000000 L2CCAuxControl
00000001 l       *ABS*	00000000 L2CCControl
00000111 l       *ABS*	00000000 L2CCTAGLatency
00000121 l       *ABS*	00000000 L2CCDataLatency
0000767b l       *ABS*	00000000 SLCRlockKey
0000df0d l       *ABS*	00000000 SLCRUnlockKey
00020202 l       *ABS*	00000000 SLCRL2cRamConfig
40000000 l       *ABS*	00000000 FPEXC_EN
01000144 l       .text	00000000 CheckEFUSE
0100013c l       .text	00000000 EndlessLoop0
0100017c l       .text	00000000 OKToRun
010003c8 l       .text	00000000 invalidate_dcache
01000324 l       .text	00000000 Sync
01000444 l       .text	00000000 finished
010003dc l       .text	00000000 loop1
01000438 l       .text	00000000 skip
01000418 l       .text	00000000 loop2
0100041c l       .text	00000000 loop3
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
0106b318 l     O .eh_frame	00000000 
010004dc l     F .text	00000000 deregister_tm_clones
01000500 l     F .text	00000000 register_tm_clones
0100052c l     F .text	00000000 __do_global_dtors_aux
01070020 l       .bss	00000001 completed.10177
0107000c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0100055c l     F .text	00000000 frame_dummy
01070024 l       .bss	00000018 object.10182
01070008 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 array.c
00000000 l    df *ABS*	00000000 common.c
00000000 l    df *ABS*	00000000 deque.c
01001a94 l     F .text	000000b8 expand_capacity
00000000 l    df *ABS*	00000000 hashset.c
00000000 l    df *ABS*	00000000 hashtable.c
00000000 l    df *ABS*	00000000 list.c
010043c4 l     F .text	000001f0 split
010045b4 l     F .text	00000170 list_add_all_at.part.3
00000000 l    df *ABS*	00000000 pqueue.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 ring_buffer.c
00000000 l    df *ABS*	00000000 slist.c
00000000 l    df *ABS*	00000000 stack.c
00000000 l    df *ABS*	00000000 treeset.c
00000000 l    df *ABS*	00000000 treetable.c
01008788 l     F .text	00000434 remove_node
01008bbc l     F .text	00000104 treetable_test
01008cc0 l     F .text	00000048 tree_destroy.part.0
00000000 l    df *ABS*	00000000 acq_hacks.c
00000000 l    df *ABS*	00000000 acquire.c
00000000 l    df *ABS*	00000000 clkwiz_interface.c
00000000 l    df *ABS*	00000000 fabric_config.c
00000000 l    df *ABS*	00000000 hal.c
0100d86c l     F .text	0000012c d_printf.constprop.8
0100d998 l     F .text	0000000c d_printf.constprop.9
0100d9a4 l     F .text	0000012c d_printf.constprop.10
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mipi_csi.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 spi_commands.c
00000000 l    df *ABS*	00000000 system_control.c
00000000 l    df *ABS*	00000000 test_patterns.c
00000000 l    df *ABS*	00000000 trigger.c
00000000 l    df *ABS*	00000000 xaxidma.c
00000000 l    df *ABS*	00000000 xaxidma_sinit.c
00000000 l    df *ABS*	00000000 xaxidma_selftest.c
00000000 l    df *ABS*	00000000 xaxidma_bd.c
00000000 l    df *ABS*	00000000 xaxidma_bdring.c
00000000 l    df *ABS*	00000000 xaxidma_g.c
00000000 l    df *ABS*	00000000 xclk_wiz.c
01013ea8 l     F .text	00000028 StubErrCallBack
00000000 l    df *ABS*	00000000 xclk_wiz_sinit.c
00000000 l    df *ABS*	00000000 xgpiops.c
00000000 l    df *ABS*	00000000 xgpiops_sinit.c
00000000 l    df *ABS*	00000000 xgpiops_intr.c
00000000 l    df *ABS*	00000000 xgpiops_g.c
00000000 l    df *ABS*	00000000 xscugic_intr.c
00000000 l    df *ABS*	00000000 xscugic.c
01015b54 l     F .text	00000050 StubHandler
01070044 l     O .bss	00000004 CpuId
00000000 l    df *ABS*	00000000 xscugic_sinit.c
00000000 l    df *ABS*	00000000 xscugic_selftest.c
00000000 l    df *ABS*	00000000 xscutimer.c
00000000 l    df *ABS*	00000000 xscutimer_selftest.c
00000000 l    df *ABS*	00000000 xscutimer_sinit.c
00000000 l    df *ABS*	00000000 xscutimer_g.c
00000000 l    df *ABS*	00000000 xspips.c
01016ac8 l     F .text	00000028 StubStatusHandler
00000000 l    df *ABS*	00000000 xspips_sinit.c
00000000 l    df *ABS*	00000000 xspips_g.c
00000000 l    df *ABS*	00000000 xspips_selftest.c
00000000 l    df *ABS*	00000000 xil_assert.c
01070048 l     O .bss	00000004 Xil_AssertCallbackRoutine
00000000 l    df *ABS*	00000000 print.c
00000000 l    df *ABS*	00000000 xil_cache.c
01017f2c l     F .text	00000058 Xil_L2CacheEnable.part.0
00000000 l    df *ABS*	00000000 outbyte.c
00000000 l    df *ABS*	00000000 xplatform_info.c
00000000 l    df *ABS*	00000000 xil_printf.c
0101815c l     F .text	0000009c getnum
010181f8 l     F .text	00000034 padding.part.0
0101822c l     F .text	00000164 outnum
00000000 l    df *ABS*	00000000 xil_exception.c
0101881c l     F .text	00000004 Xil_ExceptionNullHandler
00000000 l    df *ABS*	00000000 xttcps.c
01018900 l     F .text	00000028 StubStatusHandler
00000000 l    df *ABS*	00000000 xttcps_sinit.c
00000000 l    df *ABS*	00000000 xttcps_g.c
00000000 l    df *ABS*	00000000 xttcps_options.c
01066148 l     O .rodata	00000054 TmrCtrOptionsTable
00000000 l    df *ABS*	00000000 xuartps_hw.c
00000000 l    df *ABS*	00000000 xclk_wiz_g.c
00000000 l    df *ABS*	00000000 xscugic_g.c
00000000 l    df *ABS*	00000000 xspips_options.c
0106619c l     O .rodata	00000030 OptionsTable
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 xil-crt0.S
00000000 l    df *ABS*	00000000 translation_table.o
00000000 l       *ABS*	00000000 SECT
00100000 l       *ABS*	00000000 DDR_START
0fffffff l       *ABS*	00000000 DDR_END
0ff00000 l       *ABS*	00000000 DDR_SIZE
000000ff l       *ABS*	00000000 DDR_REG
00000300 l       *ABS*	00000000 UNDEF_REG
00000000 l    df *ABS*	00000000 cpu_init.o
00000000 l    df *ABS*	00000000 xtime_l.c
00000000 l    df *ABS*	00000000 _udivsi3.o
01019708 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _divsi3.o
01019986 l       .text	00000000 .divsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
0106a950 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0101a4d0 l     F .text	0000006c currentlocale
010661d0 l     O .rodata	0000001c categories
0107004c l     O .bss	000000e7 global_locale_string
01070134 l     O .bss	000000e0 new_categories.6704
01070214 l     O .bss	000000e0 saved_categories.6705
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
01066358 l     O .rodata	00000048 JIS_state_table
010663a0 l     O .rodata	00000048 JIS_action_table
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 qsort.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncasecmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0101d0dc l     F .text	00000120 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
010663e8 l     O .rodata	00000010 blanks.8644
010663f8 l     O .rodata	00000010 zeroes.8645
00000000 l    df *ABS*	00000000 vfprintf.c
01020984 l     F .text	0000006a __sbprintf
01066408 l     O .rodata	00000010 blanks.8659
01066418 l     O .rodata	00000010 zeroes.8660
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 dtoa.c
01020f48 l     F .text	00000148 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01021f44 l     F .text	00000004 __fp_lock
01021f54 l     F .text	000000e4 __sinit.part.0
01022038 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
01066530 l     O .rodata	0000000c p05.7430
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
01066658 l     O .rodata	00000010 blanks.8623
01066668 l     O .rodata	00000010 zeroes.8624
00000000 l    df *ABS*	00000000 vfprintf.c
010246e8 l     F .text	00000074 __sprint_r.part.0
01025708 l     F .text	0000006a __sbprintf
01066678 l     O .rodata	00000010 blanks.8637
01066688 l     O .rodata	00000010 zeroes.8638
00000000 l    df *ABS*	00000000 wcsnrtombs.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
0107032c l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 envlock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 _sbrk.c
01070330 l     O .bss	00000004 heap.5714
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 write.c
01025cc0 l     F .text	0000006c write.localalias.0
00000000 l    df *ABS*	00000000 read.c
01025d30 l     F .text	0000005c read.localalias.0
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 inbyte.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 crtstuff.c
0106b318 l     O .eh_frame	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crtn.o
01025e08 l     F .text	00000008 __strcmp_from_arm
01025e10 l     F .text	00000008 __qsort_from_arm
01025e18 l     F .text	00000008 __free_from_arm
010079ac g     F .text	00000124 slist_copy_shallow
01016cd0 g     F .text	00000284 XSpiPs_PolledTransfer
010115c4 g     F .text	00000004 spicmd_csi_stream_unpop_start
010083c8 g     F .text	00000004 stack_conf_init
01023260 g     F .text	00000028 _mprec_log10
01004c80 g     F .text	00000038 list_add_all_at
00010400 g       .stack	00000000 _supervisor_stack_end
01000cac g     F .text	000000c4 array_subarray
01008110 g     F .text	00000030 slist_zip_iter_init
01003428 g     F .text	0000000c deque_zip_iter_index
010232d0 g     F .text	0000005a __any_on
01025b0c g     F .text	00000026 _isatty_r
01013bd8 g     F .text	00000218 XAxiDma_BdRingCheck
01066608 g     O .rodata	00000028 __mprec_tinytens
01017d74 g     F .text	00000048 Xil_L1ICacheInvalidateRange
0106a5e8 g     O .data	00000058 XClk_Wiz_ConfigTable
01005a90 g     F .text	00000050 list_contains_value
0101cd5c g     F .text	000000c2 strcpy
01009554 g     F .text	00000034 treetable_get_first_key
010021d8 g     F .text	000001fc deque_remove_at
010236a0 g     F .text	0000001a cleanup_glue
01013658 g     F .text	000000d8 XAxiDma_BdRingUnAlloc
01005c34 g     F .text	00000094 list_filter_mut
0101c1a4 g     F .text	00000068 _puts_r
010083cc g     F .text	00000088 stack_new
01010010 g     F .text	000003ac spi_isr_handler
010015d0 g     F .text	00000010 array_zip_iter_init
01025b34 g     F .text	0000002c _lseek_r
01000000 g       .text	00000000 _vector_table
01007bfc g     F .text	00000034 slist_contains
01017dbc g     F .text	00000074 Xil_L2CacheDisable
0106b31c g       .eh_frame	00000000 __eh_framehdr_start
0100a3a0 g     F .text	000000ac treetable_foreach_value
0106b318 g       .data	00000000 ___CTORS_LIST___
01005870 g     F .text	00000178 list_copy_deep
01011f5c g     F .text	000001ac trig_dump_state
01011798 g     F .text	00000004 spicmd_csi_setup_trigpos_range
01017a08 g     F .text	00000058 Xil_ICacheInvalidateRange
01006dfc g     F .text	00000098 slist_destroy_cb
01003574 g     F .text	00000008 hashset_remove
01017c20 g     F .text	00000018 Xil_L1DCacheDisable
00000400 g       *ABS*	00000000 _ABORT_STACK_SIZE
010177b0 g     F .text	00000028 print
01019f50 g     F .text	0000005a .hidden __floatdidf
01005b38 g     F .text	00000008 list_size
0100642c g     F .text	0000003c pqueue_conf_init
0101717c g     F .text	0000005c XSpiPs_Abort
01006a74 g     F .text	00000004 queue_iter_next
01006600 g     F .text	00000054 pqueue_destroy_cb
01006a28 g     F .text	0000001c queue_destroy_cb
0101c178 g     F .text	0000002a printf
010194f4 g     F .text	0000009c XSpiPs_GetDelays
01020a7c g     F .text	00000054 _wcrtomb_r
01001574 g     F .text	00000050 array_iter_replace
01023830 g     F .text	00000020 __sseek
0102210c g     F .text	00000008 __sinit
0100c764 g     F .text	000000b8 acq_get_ll_pointer
01013b24 g     F .text	000000b4 XAxiDma_BdRingFree
01025b8c g     F .text	000000b0 __swbuf_r
01013ed0 g     F .text	000000c8 XClk_Wiz_CfgInitialize
01018850 g     F .text	00000030 Xil_PrefetchAbortHandler
010146f0 g     F .text	000000e4 XGpioPs_ReadPin
0101ac10 g     F .text	00000244 _setlocale_r
0102203c g     F .text	0000002e __sfmoreglue
010040e4 g     F .text	00000014 hashtable_iter_remove
0145ac78 g     O .bss	000007b8 g_mipi_csi_state
01017ff0 g     F .text	00000014 Xil_L2CacheInvalidateLine
0101c154 g     F .text	00000002 __malloc_unlock
010144fc g     F .text	000000b8 XGpioPs_GetOutputEnable
01001db0 g     F .text	000000e0 deque_add_first
01012108 g     F .text	00000094 trig_init
010168e0 g     F .text	00000088 XScuTimer_SetPrescaler
01007c30 g     F .text	00000050 slist_contains_value
01017740 g     F .text	0000005c Xil_Assert
0100fa98 g     F .text	00000064 mipi_csi_clear_queue
0100a564 g     F .text	000000e4 treetable_assert_rb_rules
01000b84 g     F .text	00000038 array_remove_last
010165e8 g     F .text	00000050 XScuGic_SetCpuID
01016474 g     F .text	00000174 XScuGic_CfgInitialize
01020f34 g     F .text	0000000e __set_ctype
0100fffc g     F .text	00000004 enable_caches
0101bfe0 g     F .text	000000ce memmove
010220f4 g     F .text	00000016 _cleanup
00010c00 g       .stack	00000000 __supervisor_stack
0101c87c g     F .text	00000090 snprintf
0101ae7c g     F .text	00000020 __locale_ctype_ptr
010115cc g     F .text	0000002c spicmd_csi_status
0100b040 g     F .text	00000578 acq_prepare_triggered
01022a30 g     F .text	0000004c _Balloc
01004d7c g     F .text	00000188 list_splice_at
0101293c g     F .text	00000028 XAxiDma_SelectKeyHole
01070008 g       .ARM.exidx	00000000 __exidx_end
010148d4 g     F .text	00000124 XGpioPs_SetDirectionPin
010190c0 g     F .text	00000018 XUartPs_SendByte
01011508 g     F .text	00000024 spicmd_acq_stop
0100ce50 g     F .text	000000d4 clkwiz_init
01007cd0 g     F .text	00000064 slist_to_array
01015f60 g     F .text	0000012c XScuGic_GetPriorityTriggerType
00011400 g       .stack	00000000 _undef_stack_end
01018bac g     F .text	000000b0 XTtcPs_SetPrescaler
01006770 g     F .text	00000020 pqueue_top
010015e0 g     F .text	00000068 array_zip_iter_next
010051d0 g     F .text	00000108 list_remove_all_cb
010013d4 g     F .text	000001a0 array_iter_add
01025da0  w    F .text	00000010 __errno
0100f220 g     F .text	00000580 mipi_csi_generate_sg_list_for_waves
010188a0 g     F .text	00000004 Xil_ExceptionInit
010064f4 g     F .text	000000e8 pqueue_new_conf
01011c5c g     F .text	00000040 trig_configure_always
0101725c g     F .text	000000d0 XSpiPs_CfgInitialize
0102284c g     F .text	00000004 __localeconv_l
01465f08 g     O .bss	00000038 g_sysctrl_state
010114dc g     F .text	0000002c spicmd_acq_start
010085f4 g     F .text	00000088 treeset_new_conf
0100388c g     F .text	00000208 hashtable_add
0100dae8 g     F .text	000001b4 bogo_calibrate
01020c48 g     F .text	00000054 __sjis_wctomb
01009520 g     F .text	00000034 treetable_get_last_value
01006c00 g     F .text	00000010 rbuf_is_empty
0100073c g     F .text	00000054 array_destroy_cb
01070010 g       .ARM.attributes	00000000 __sbss_start
01025ae0 g     F .text	0000002a _fstat_r
010034c4 g     F .text	00000088 hashset_new_conf
010170dc g     F .text	000000a0 XSpiPs_SetStatusHandler
010065dc g     F .text	00000024 pqueue_destroy
010026cc g     F .text	00000144 deque_copy_deep
01465f50 g     O .bss	00000004 errno
01010b40 g     F .text	00000090 spi_command_pack_response_simple
010237ec g     F .text	00000004 __seofread
010195f4 g     F .text	00000014 PrefetchAbortInterrupt
01003434 g     F .text	00000004 hashset_conf_init
010190d8 g     F .text	0000001c XUartPs_RecvByte
01006bdc g     F .text	00000024 rbuf_destroy
010115ac g     F .text	00000014 spicmd_csi_set_params_queue
010060d4 g     F .text	00000044 list_diter_next
010024e0 g     F .text	00000014 deque_remove_all
01005ae0 g     F .text	00000058 list_index_of
0100cdc4 g     F .text	00000030 acq_get_wave_size_bytes
0100b724 g     F .text	00000070 acq_stop
01003148 g     F .text	0000000c deque_iter_index
01019fb8 g     F .text	00000160 .hidden __aeabi_fadd
01019fb4 g     F .text	00000164 .hidden __subsf3
01008e5c g     F .text	00000614 treetable_destroy
0100ea40 g     F .text	00000124 mipi_csi_queue_buffer
0106b318 g       .data	00000000 __fixup_start
01007f70 g     F .text	0000001c slist_iter_init
0100499c g     F .text	0000005c list_add
010094ec g     F .text	00000034 treetable_get_first_value
01018154 g     F .text	00000008 XGetPlatform_Info
01008140 g     F .text	0000007c slist_zip_iter_next
0101c21c g     F .text	000005b4 qsort
01017c38 g     F .text	0000005c Xil_DCacheFlush
01008104 g     F .text	0000000c slist_iter_index
0100012c g       .text	00000000 _boot
01017edc g     F .text	00000020 Xil_DCacheInvalidate
01000790 g     F .text	000000ac array_add
01015e28 g     F .text	00000138 XScuGic_SetPriorityTriggerType
010019e4 g     F .text	000000a0 array_zip_iter_replace
0101155c g     F .text	0000002c spicmd_trig_configure_edge
01001e90 g     F .text	00000064 deque_add_last
01008018 g     F .text	00000070 slist_iter_add
010151bc g     F .text	000000b8 XGpioPs_IntrGetStatus
01004360 g     F .text	00000064 hashtable_hash_ptr
01020c9c g     F .text	00000070 __eucjp_wctomb
01001218 g     F .text	00000008 array_capacity
0100ce24 g     F .text	00000028 acq_get_wave_bit_packed_depth
0100a648 g     F .text	00000184 _acq_irq_fifo_gen_rst
0106a550 g     O .data	00000008 XScuTimer_ConfigTable
01011590 g     F .text	00000004 spicmd_trig_arm
0106b318 g       .data	00000000 __fixup_end
01001744 g     F .text	000002a0 array_zip_iter_add
010012f0 g     F .text	00000010 array_iter_init
01007e14 g     F .text	000000d4 slist_filter
01012ed4 g     F .text	00000184 XAxiDma_UpdateBdRingCDesc
0101ba00 g     F .text	000005e0 memcpy
01014190 g     F .text	000000b4 XGpioPs_Read
01003dc0 g     F .text	000000c4 hashtable_get_values
010025f4 g     F .text	000000d8 deque_copy_shallow
01008d08 g     F .text	00000028 treetable_conf_init
010171d8 g     F .text	00000084 XSpiPs_Reset
0106b318 g     O .data	00000000 .hidden __TMC_END__
01008750 g     F .text	00000008 treeset_iter_init
0100ccf8 g     F .text	000000cc acq_dma_address_helper
01021f48 g     F .text	0000000c _cleanup_r
01001a84 g     F .text	0000000c array_zip_iter_index
0101d278 g     F .text	00001b4c _svfprintf_r
01019ed8 g     F .text	00000022 .hidden __floatsidf
01018880 g     F .text	00000020 Xil_UndefinedExceptionHandler
0100fbf8 g     F .text	0000007c mipi_csi_get_status
0100083c g     F .text	0000019c array_add_at
0106c000 g       .mmu_tbl	00000000 __mmu_tbl_start
010108b4 g     F .text	000000c8 spi_command_lut_gen
0100fcc4 g     F .text	000001a0 mipi_csi_process_queue_item
01070010 g       .ARM.attributes	00000000 __sdata_start
0106b318 g       .data	00000000 __DTOR_END__
0100c6c4 g     F .text	000000a0 acq_debug_dump_waveraw
0101a1c8 g     F .text	00000000 .hidden __aeabi_uldivmod
01017efc g     F .text	00000030 Xil_ICacheInvalidate
0101c20c g     F .text	00000010 puts
01010008 g     F .text	00000004 init_platform
010035a4 g     F .text	00000008 hashset_iter_init
01008d30 g     F .text	00000094 treetable_new
00011000 g       .stack	00000000 __abort_stack
01070010 g       .fini_array	00000000 __fini_array_end
01007520 g     F .text	000000a4 slist_remove_last
0106a488 g       .rodata	00000000 __rodata_end
01018928 g     F .text	0000011c XTtcPs_CfgInitialize
01008454 g     F .text	00000080 stack_new_conf
01002a7c g     F .text	00000008 deque_size
01023200 g     F .text	00000060 __ratio
01018004 g     F .text	00000068 Xil_L2CacheInvalidateRange
0100a44c g     F .text	00000030 treetable_iter_init
010096b4 g     F .text	000000f4 treetable_get_lesser_than
0100d214 g     F .text	00000278 clkwiz_dump_state
0101afb8 g     F .text	00000010 malloc
0101c158 g     F .text	00000020 _printf_r
01019708 g     F .text	0000025c .hidden __udivsi3
01025db4  w    F .text	00000008 isatty
010081bc g     F .text	000000d4 slist_zip_iter_add
0100a47c g     F .text	000000a4 treetable_iter_next
01025d90  w    F .text	00000010 _fstat
0106b318 g       .data	00000000 __data1_start
010103bc g     F .text	0000043c spi_init
0101a120 g     F .text	0000001c .hidden __aeabi_i2f
010037c0 g     F .text	00000060 hashtable_conf_init
01066540 g     O .rodata	000000c8 __mprec_tens
01002a84 g     F .text	00000008 deque_capacity
010115c0 g     F .text	00000004 spicmd_csi_stream_clear_queue
0106a488 g       .data	00000000 __sbss2_end
010050b4 g     F .text	00000074 list_remove_last
01011ad8 g     F .text	00000034 trig_zero_levels
01012c64 g     F .text	00000054 XAxiDma_BdSetBufAddr
01020a5c g     F .text	0000001e vsnprintf
01465f44 g     O .bss	00000004 UndefinedExceptionAddr
0101152c g     F .text	00000004 spicmd_acq_rewind
0100e6f0 g     F .text	00000040 d_dump_timing_ex
01005f14 g     F .text	0000000c list_iter_index
0101924c g     F .text	000000b4 XSpiPs_GetOptions
01003d3c g     F .text	00000008 hashtable_size
01008558 g     F .text	00000004 stack_zip_iter_replace
010702f8 g     O .bss	00000004 __malloc_top_pad
01009bd8 g     F .text	00000090 treetable_remove
0100dd00 g     F .text	000001d8 d_printf
0100869c g     F .text	00000008 treeset_add
0107003c g     O .bss	00000004 test_sizeptr
01001348 g     F .text	0000008c array_iter_remove
0106a488 g     O .data	00000000 .hidden __dso_handle
01019eb8 g     F .text	0000001e .hidden __aeabi_ui2d
00010400 g       .stack	00000000 __irq_stack
01022850 g     F .text	0000001e _localeconv_r
01002490 g     F .text	00000050 deque_remove_last
01005ee8 g     F .text	0000002c list_iter_replace
01022c54 g     F .text	00000012 __i2b
010223f0 g     F .text	0000032c __sfvwrite_r
01003594 g     F .text	00000008 hashset_capacity
010178f8 g     F .text	0000004c Xil_DCacheFlushLine
01010004 g     F .text	00000004 init_uart
01001110 g     F .text	00000078 array_trim_capacity
0101a2a0 g     F .text	00000116 .hidden __udivmoddi4
01019c34 g     F .text	00000000 .hidden __aeabi_drsub
0101c7d0 g     F .text	00000026 _sbrk_r
01015ab4 g     F .text	00000028 StubHandler
01001d4c g     F .text	00000064 deque_add
01019680 g       .text	00000000 __cpu_init
0106a640 g     O .data	00000304 XScuGic_ConfigTable
0100e438 g     F .text	00000028 d_read_global_timer
01025b60 g     F .text	0000002c _read_r
0101359c g     F .text	0000001c XAxiDma_BdRingGetCoalesce
01001bd8 g     F .text	000000b4 deque_new_conf
01000fac g     F .text	00000110 array_filter
0102592c g     F .text	00000088 _fclose_r
01004a58 g     F .text	0000005c list_add_last
01006118 g     F .text	00000030 list_zip_iter_init
01004894 g     F .text	00000108 list_destroy_cb
01017f84 g     F .text	00000018 Xil_L2CacheEnable
01012cf0 g     F .text	00000060 XAxiDma_BdSetAppWord
01008738 g     F .text	00000008 treeset_contains
01021f1c g     F .text	00000028 fflush
01070324 g     O .bss	00000004 __malloc_max_sbrked_mem
01012964 g     F .text	00000028 XAxiDma_SelectCyclicMode
01016638 g     F .text	00000010 XScuGic_GetCpuID
01019efc g     F .text	00000042 .hidden __extendsfdf2
0100550c g     F .text	000001f8 list_sublist
01019c40 g     F .text	00000276 .hidden __adddf3
0100e460 g     F .text	00000070 d_start_timing
00000800 g       *ABS*	00000000 _SUPERVISOR_STACK_SIZE
0d465f60 g       .heap	00000000 _heap_end
0102309c g     F .text	000000ae __b2d
01070000 g       .ARM.exidx	00000000 __exidx_start
01025c90  w    F .text	00000018 lseek
0100a8c0 g     F .text	00000028 _acq_fast_dma_start
01025dbc  w    F .text	00000008 _isatty
010195a4 g     F .text	00000014 IRQInterrupt
010125b8 g     F .text	000000b0 XAxiDma_Pause
010661cc g     O .rodata	00000004 _global_impure_ptr
01012b98 g     F .text	00000078 XAxiDma_Selftest
0102332c g     F .text	00000372 _realloc_r
01005cc8 g     F .text	000000dc list_filter
0101cf5c g     F .text	0000005a strncasecmp
0101a480 g     F .text	00000050 __libc_init_array
01465f54 g       .bss	00000000 __bss_end
01011ee0 g     F .text	0000007c trig_configure_holdoff
01000b10 g     F .text	00000074 array_remove_at
0101d224 g     F .text	0000001e strtol_l
01025898 g     F .text	00000036 wcsnrtombs
0106a488 g       .data	00000000 __rodata1_start
01017034 g     F .text	000000a8 XSpiPs_GetSlaveSelect
01014244 g     F .text	000000a8 XGpioPs_Write
010072b8 g     F .text	000000a0 slist_splice_at
01004cb8 g     F .text	000000c4 list_splice
01025a74 g     F .text	00000026 _fputwc_r
01066630 g     O .rodata	00000028 __mprec_bigtens
010115c8 g     F .text	00000004 spicmd_csi_stream_stop
01072012 g       .ARM.attributes	00000000 __ARM.attributes_end
01022b20 g     F .text	00000098 __s2b
010195cc g     F .text	00000014 SWInterrupt
01019eb8 g     F .text	0000001e .hidden __floatunsidf
01011770 g     F .text	0000001c spicmd_csi_setup_testpatt
01002a10 g     F .text	0000006c deque_index_of
01001a90 g     F .text	00000004 cc_common_cmp_str
01025c50  w    F .text	00000040 _sbrk
01022f08 g     F .text	0000003a __mcmp
01009cb4 g     F .text	00000038 treetable_remove_last
01070010 g       .ARM.attributes	00000000 __tbss_start
0100abbc g     F .text	000000b8 acq_get_next_alloc
0106a4c0 g     O .data	00000088 XAxiDma_ConfigTable
01022124 g     F .text	00000016 __fp_lock_all
01016648 g     F .text	0000001c XScuGic_LookupConfig
01025e20 g     F .init	00000000 _init
01006c80 g     F .text	00000058 rbuf_dequeue
0101806c g     F .text	00000044 Xil_L2CacheFlush
0101097c g     F .text	00000150 spi_transmit_packet_nonblock
0101d244 g     F .text	00000030 strtol
0100a520 g     F .text	00000044 treetable_iter_remove
01017944 g     F .text	00000054 Xil_DCacheFlushRange
01000c4c g     F .text	00000008 array_get_buffer
0100b870 g     F .text	00000698 acq_debug_dump
01004050 g     F .text	00000094 hashtable_iter_next
0100f8a0 g     F .text	0000009c mipi_csi_send_eof
01002eb4 g     F .text	00000210 deque_iter_remove
010049f8 g     F .text	00000060 list_add_first
0101a260 g     F .text	00000040 .hidden __aeabi_d2ulz
01019fb4 g     F .text	00000164 .hidden __aeabi_fsub
010062f4 g     F .text	000000dc list_zip_iter_remove
0101a450 g     F .text	00000030 __libc_fini_array
01002ae0 g     F .text	00000224 deque_filter_mut
01006ce8 g     F .text	00000020 slist_conf_init
01001cb4 g     F .text	00000024 deque_destroy
01020d0c g     F .text	00000082 __jis_wctomb
010154e8 g     F .text	000000c8 XGpioPs_SetIntrType
01016398 g     F .text	000000dc XScuGic_Stop
010161d4 g     F .text	00000074 XScuGic_InterruptUnmapFromCpu
01004744 g     F .text	00000054 list_new
010236bc g     F .text	00000088 _reclaim_reent
00011400 g       .stack	00000000 __fiq_stack
01012cb8 g     F .text	00000038 XAxiDma_BdSetBufAddrMicroMode
01022bb8 g     F .text	0000003e __hi0bits
010188a4 g     F .text	00000018 Xil_ExceptionRegisterHandler
01025e38 g     O .rodata	00000018 fabcfg_dummy_tests
01008740 g     F .text	00000008 treeset_size
0101a3b8 g     F .text	00000012 calloc
0106a564 g     O .data	00000004 Xil_AssertWait
01465f60 g       .heap	00000000 _heap_start
01014ae0 g     F .text	00000124 XGpioPs_SetOutputEnablePin
010175b8 g     F .text	0000001c XSpiPs_LookupConfig
00000400 g       *ABS*	00000000 _IRQ_STACK_SIZE
0101a14c g     F .text	0000007c .hidden __floatdisf
01070010 g       .ARM.attributes	00000000 __sbss_end
01017b34 g     F .text	00000018 Xil_L1DCacheInvalidateLine
01003ff0 g     F .text	00000060 hashtable_iter_init
01014f3c g     F .text	000000dc XGpioPs_IntrDisablePin
01003154 g     F .text	00000010 deque_zip_iter_init
01017c94 g     F .text	00000018 Xil_L1DCacheFlushLine
00000400 g       *ABS*	00000000 _FIQ_STACK_SIZE
010047dc g     F .text	000000b8 list_destroy
01025cc0  w    F .text	0000006c write
010024f4 g     F .text	0000005c deque_remove_all_cb
0100012c g       .text	00000000 _prestart
01006d08 g     F .text	00000054 slist_new
0101535c g     F .text	000000ac XGpioPs_IntrClear
0100ac74 g     F .text	00000138 acq_append_next_alloc
0106b314 g     O .data	00000004 environ
01003f9c g     F .text	00000054 hashtable_foreach_value
01013058 g     F .text	00000218 XAxiDma_BdRingCreate
01019c40 g     F .text	00000276 .hidden __aeabi_dadd
010177ac g     F .text	00000004 XNullHandler
01007724 g     F .text	00000020 slist_get_last
01006a08 g     F .text	00000020 queue_destroy
0101c950 g     F .text	00000040 strcat
0100354c g     F .text	00000020 hashset_destroy
01003f48 g     F .text	00000054 hashtable_foreach_key
01018390 g     F .text	0000048c xil_printf
0101a220 g     F .text	00000040 .hidden __aeabi_f2ulz
0100c81c g     F .text	0000005c acq_next_ll_pointer
01022da8 g     F .text	000000a2 __pow5mult
01019f40 g     F .text	0000006a .hidden __aeabi_ul2d
00011800 g       .stack	00000000 __undef_stack
0100b794 g     F .text	00000020 acq_abort_done
010083bc g     F .text	0000000c slist_zip_iter_index
0100a7cc g     F .text	00000084 _acq_irq_error_dma
0101a1f8 g     F .text	00000028 .hidden __popcountsi2
01013f98 g     F .text	00000060 XClk_Wiz_GetInterruptSettings
0100fc74 g     F .text	00000050 mipi_csi_get_size_report
01001220 g     F .text	00000018 array_sort
01009c68 g     F .text	0000004c treetable_remove_first
010084f4 g     F .text	0000001c stack_destroy_cb
01019980 g     F .text	00000000 .hidden __aeabi_idiv
01008dc4 g     F .text	00000098 treetable_new_conf
0100e3f8 g     F .text	00000020 d_iskeypress
01016858 g     F .text	00000088 XScuTimer_Stop
01026148 g     O .rodata	00040000 norway_512x512_grey
010661ec g     O .rodata	0000016c __C_locale
0100e970 g     F .text	00000070 mipi_csi_alloc_item
01009cec g     F .text	00000608 treetable_remove_all
01003820 g     F .text	0000006c hashtable_destroy
01015824 g     F .text	0000010c XGpioPs_GetIntrTypePin
010169f0 g     F .text	000000bc XScuTimer_SelfTest
0100e4d0 g     F .text	00000090 d_stop_timing
0100609c g     F .text	0000002c list_diter_replace
010035e4 g     F .text	00000034 hashtable_hash_string
01465f48 g     O .bss	00000004 PrefetchAbortAddr
01012920 g     F .text	0000001c XAxiDma_Busy
01015c78 g     F .text	000000cc XScuGic_Disconnect
010053a4 g     F .text	00000078 list_get_at
0106b318 g       .data	00000000 __CTOR_LIST__
010011bc g     F .text	00000054 array_contains_value
010023d4 g     F .text	0000006c deque_remove
01018af0 g     F .text	000000bc XTtcPs_GetMatchValue
01018dd4 g     F .text	00000060 XTtcPs_InterruptHandler
0106c000 g       .mmu_tbl	00000000 MMUTable
01006790 g     F .text	0000017c pqueue_pop
01005dc0 g     F .text	00000084 list_iter_remove
0101c7f8 g     F .text	00000084 _snprintf_r
0106a488 g       .data	00000000 __sbss2_start
01002900 g     F .text	0000005c deque_reverse
0101abbc g     F .text	00000054 __get_locale_env
01017d5c g     F .text	00000018 Xil_L1ICacheInvalidateLine
01022114 g     F .text	00000002 __sfp_lock_acquire
01022990 g     F .text	00000000 memchr
0101082c g     F .text	00000088 spi_crc_lut_gen
010121e0 g     F .text	00000018 trig_disarm
01022200 g     F .text	000001f0 _free_r
0101ae54 g     F .text	00000020 __locale_mb_cur_max
0100ed78 g     F .text	00000104 mipi_csi_setup_bdring_and_bd
01020b28 g     F .text	00000016 _wcsrtombs_r
01017d0c g     F .text	0000001c Xil_L1ICacheEnable
01011588 g     F .text	00000004 spicmd_trig_configure_always
0100a8a8 g     F .text	00000018 _acq_wait_for_ndone
01020e58 g     F .text	000000dc __call_exitprocs
0106a558 g     O .data	0000000c XSpiPs_ConfigTable
0100b7d0 g     F .text	000000a0 acq_make_status
01458340 g     O .bss	00000fa0 test_sizes
0100359c g     F .text	00000008 hashset_foreach
01019c3c g     F .text	0000027a .hidden __aeabi_dsub
010113b0 g     F .text	00000004 spicmd_csi_setup_wave_range
0106aee4 g     O .data	00000020 __default_locale
01011a2c g     F .text	00000004 sysctrl_xadc_tick
0100ec98 g     F .text	000000e0 mipi_csi_queue_all_waves
0106b30c g     O .data	00000004 __malloc_sbrk_base
0101961c g       .text	00000064 _start
01017810 g     F .text	000000e8 Xil_DCacheInvalidateRange
01001188 g     F .text	00000034 array_contains
010113b4 g     F .text	00000038 spicmd_hello
01010acc g     F .text	00000048 spi_command_find_free_slot
01019f40 g     F .text	0000006a .hidden __floatundidf
01025ca8  w    F .text	00000018 _lseek
010036d4 g     F .text	000000ec hashtable_new_conf
010086e4 g     F .text	0000001c treeset_get_last
01002180 g     F .text	00000058 deque_replace_at
01017d28 g     F .text	0000001c Xil_L1ICacheDisable
01007704 g     F .text	00000020 slist_get_first
01025e38 g       .rodata	00000000 __rodata_start
01009588 g     F .text	00000034 treetable_get_last_key
0106a4a8 g     O .data	00000018 acq_substate_to_str
0100836c g     F .text	00000050 slist_zip_iter_replace
01022e4c g     F .text	000000ba __lshift
01002440 g     F .text	00000050 deque_remove_first
01003210 g     F .text	000000bc deque_zip_iter_add
01025d30  w    F .text	0000005c read
01014c04 g     F .text	000000e8 XGpioPs_GetOutputEnablePin
0101a120 g     F .text	0000001c .hidden __floatsisf
0100358c g     F .text	00000008 hashset_size
01023858 g     F .text	000000f8 __ssprint_r
01012c10 g     F .text	00000054 XAxiDma_BdSetLength
0101219c g     F .text	0000002c trig_has_trigd
01008560 g     F .text	00000094 treeset_new
01000d70 g     F .text	000000a0 array_copy_shallow
01070010 g       *ABS*	00000000 _SDA_BASE_
01070340 g     O .bss	003e8000 buffer
0101b790 g     F .text	00000082 __sjis_mbtowc
0101ce20 g     F .text	00000056 strlcpy
01006fa0 g     F .text	000000b4 slist_add_at
0101cfb8 g     F .text	000000a2 strncmp
01004f88 g     F .text	000000b8 list_remove_at
010179d0 g     F .text	00000038 Xil_ICacheInvalidateLine
01020b40 g     F .text	00000022 wcsrtombs
0106b318 g       .data	00000000 __data_end
010155b0 g     F .text	000000d4 XGpioPs_GetIntrType
01000718 g     F .text	00000024 array_destroy
010142ec g     F .text	000000ac XGpioPs_SetDirection
01022c68 g     F .text	0000013e __multiply
01012d50 g     F .text	00000064 XAxiDma_BdGetAppWord
0100e638 g     F .text	000000b8 d_dump_timing
010145b4 g     F .text	0000013c XGpioPs_GetBankPin
01006a64 g     F .text	00000008 queue_foreach
01465f60 g       .heap	00000000 HeapBase
01005f20 g     F .text	00000044 list_iter_next
0101d05c g     F .text	0000007e strncpy
010702fc g     O .bss	00000028 __malloc_current_mallinfo
01003618 g     F .text	000000bc hashtable_new
0102314c g     F .text	000000b2 __d2b
0101c90c g     F .text	00000044 strcasecmp
0145b430 g     O .bss	00000010 g_version_resp
01016248 g     F .text	000000d4 XScuGic_Disable
01008554 g     F .text	00000004 stack_zip_iter_next
01004ab4 g     F .text	000000e8 list_add_at
0100e5bc g     F .text	0000007c d_read_timing_us
0100a940 g     F .text	000000b8 acq_write_training
01006148 g     F .text	0000006c list_zip_iter_next
01003a94 g     F .text	000000c0 hashtable_get
010030e8 g     F .text	00000060 deque_iter_replace
01011790 g     F .text	00000004 spicmd_csi_setup_bitpack_wave
01018c5c g     F .text	00000098 XTtcPs_GetPrescaler
01000a64 g     F .text	000000ac array_remove
01000608 g     F .text	000000d8 array_new_conf
010060c8 g     F .text	0000000c list_diter_index
01003d44 g     F .text	00000008 hashtable_capacity
01001648 g     F .text	000000fc array_zip_iter_remove
010258fc g     F .text	00000026 _close_r
0106a5a0 g     O .data	00000048 XTtcPs_ConfigTable
010195b8 g     F .text	00000014 UndefinedException
01465f4c g     O .bss	00000004 DataAbortAddr
01019ed8 g     F .text	00000022 .hidden __aeabi_i2d
01007358 g     F .text	000000c4 slist_remove
0100e730 g     F .text	000001d4 mipi_csi_init
01008528 g     F .text	00000008 stack_size
01013ff8 g     F .text	0000001c XClk_Wiz_LookupConfig
0101178c g     F .text	00000004 spicmd_csi_setup_trigpos_all
01006a6c g     F .text	00000008 queue_iter_init
01006654 g     F .text	0000011c pqueue_push
01016664 g     F .text	000000b4 XScuGic_SelfTest
01017e4c g     F .text	00000024 Xil_ICacheDisable
010080b4 g     F .text	00000050 slist_iter_next
01017e30 g     F .text	0000001c Xil_DCacheDisable
00010000 g       .stack	00000000 _irq_stack_end
0101a13c g     F .text	0000008c .hidden __floatundisf
01020d90 g     F .text	000000c6 __swsetup_r
01019c30  w    F .text	00000002 .hidden __aeabi_ldiv0
014592e0 g     O .bss	000008a0 g_acq_state
0102206c g     F .text	00000086 __sfp
01023288 g     F .text	00000046 __copybits
010097a8 g     F .text	00000008 treetable_size
01011598 g     F .text	00000014 spicmd_csi_setup_addr_range
0106af04 g     O .data	00000408 __malloc_av_
0101a118 g     F .text	00000024 .hidden __aeabi_ui2f
01009470 g     F .text	0000007c treetable_get
01022120 g     F .text	00000002 __sinit_lock_release
01000c54 g     F .text	00000058 array_index_of
010209f0 g     F .text	0000006a _vsnprintf_r
0106b31c g       .eh_frame	00000000 __eh_framehdr_end
010237c8 g     F .text	00000022 __sread
01018144 g     F .text	00000010 outbyte
0100cf24 g     F .text	000002f0 clkwiz_change_mipi_freq
01010c34 g     F .text	0000077c spi_command_tick
0100a2f4 g     F .text	000000ac treetable_foreach_key
0145b440 g     O .bss	00007f00 spi_resp_buffer
010193c0 g     F .text	00000088 XSpiPs_GetClkPrescaler
0101c150 g     F .text	00000002 __malloc_lock
0107000c g       .fini_array	00000000 __fini_array_start
010086c8 g     F .text	0000001c treeset_get_first
01021ee8 g     F .text	00000032 _fflush_r
0100e9e0 g     F .text	00000060 mipi_csi_free_item
0101b588 g     F .text	00000208 __utf8_mbtowc
01008758 g     F .text	0000002c treeset_iter_next
010035ac g     F .text	00000034 hashset_iter_next
0101a3cc g     F .text	00000062 _calloc_r
01017b14 g     F .text	00000020 Xil_L1DCacheEnable
01013730 g     F .text	000002a0 XAxiDma_BdRingToHw
01013270 g     F .text	00000138 XAxiDma_BdRingClone
0100f7d0 g     F .text	000000d0 mipi_csi_send_sof
01013df0 g     F .text	000000b8 XAxiDma_BdRingDumpRegs
0100cb48 g     F .text	000001b0 acq_copy_slow_mipi
01070020 g       .bss	00000000 __bss_start
00010000 g       *ABS*	00000000 _STACK_SIZE
01070010 g       .ARM.attributes	00000000 __tdata_start
01070010 g       .ARM.attributes	00000000 __tdata_end
0101c0b0 g     F .text	000000a0 memset
01025dd8 g     F .text	0000002c main
01006a44 g     F .text	00000008 queue_peek
0101298c g     F .text	000001ac XAxiDma_SimpleTransfer
0100e3ec g     F .text	0000000c d_waitkey
01070040 g     O .bss	00000004 test_counter
01070328 g     O .bss	00000004 __malloc_max_total_mem
0c000000 g       *ABS*	00000000 _HEAP_SIZE
010095bc g     F .text	000000f8 treetable_get_greater_than
01006018 g     F .text	00000084 list_diter_remove
0101a14c g     F .text	0000007c .hidden __aeabi_l2f
01025c3c g     F .text	00000012 __swbuf
01007620 g     F .text	00000098 slist_remove_all_cb
01000c08 g     F .text	00000020 array_get_at
0101b814 g     F .text	000000b6 __eucjp_mbtowc
010032cc g     F .text	00000090 deque_zip_iter_remove
01005e44 g     F .text	000000a4 list_iter_add
01019708 g     F .text	00000000 .hidden __aeabi_uidiv
01006b20 g     F .text	00000094 rbuf_conf_new
01016718 g     F .text	000000b0 XScuTimer_CfgInitialize
01010b14 g     F .text	0000002c spi_command_count_allocated
01023850 g     F .text	00000008 __sclose
010167c8 g     F .text	00000090 XScuTimer_Start
01005704 g     F .text	0000016c list_copy_shallow
010259b4 g     F .text	00000010 fclose
0100b7b4 g     F .text	0000001c acq_is_done
0101d1fc g     F .text	00000028 _strtol_r
01006eec g     F .text	0000005c slist_add_first
010227b4 g     F .text	00000088 _findenv_r
01008520 g     F .text	00000008 stack_pop
0107000c g       .init_array	00000000 __init_array_end
01010000 g     F .text	00000004 disable_caches
01021090 g     F .text	00000d0c _dtoa_r
0100fb58 g     F .text	000000a0 mipi_csi_stop
0101afd8 g     F .text	00000564 _malloc_r
01017a60 g     F .text	000000b4 Xil_L1DCacheInvalidate
01020b8c g     F .text	00000018 __ascii_wctomb
01019008 g     F .text	000000b8 XTtcPs_GetOptions
010097b0 g     F .text	00000074 treetable_contains_key
0100af74 g     F .text	000000cc acq_swap
01002e38 g     F .text	00000010 deque_iter_init
01002d04 g     F .text	00000134 deque_filter
01019f50 g     F .text	0000005a .hidden __aeabi_l2d
01020ba4 g     F .text	000000a4 __utf8_wctomb
01014db4 g     F .text	000000dc XGpioPs_IntrEnablePin
010147d4 g     F .text	00000100 XGpioPs_WritePin
01014e90 g     F .text	000000ac XGpioPs_IntrDisable
01018cf4 g     F .text	000000e0 XTtcPs_CalcIntervalFromFreq
01025928 g     F .text	00000002 __env_unlock
0102271c g     F .text	00000048 _fwalk
00000000 g       .stack	00000000 _stack_end
01465f40 g     O .bss	00000004 Xil_AssertStatus
0100a8e8 g     F .text	00000058 _acq_core_dma_start
01007de8 g     F .text	0000002c slist_foreach
010076b8 g     F .text	0000004c slist_replace_at
0101b53c g     F .text	00000026 _mbtowc_r
010119a0 g     F .text	0000008c sysctrl_led_tick
01025e50 g     O .rodata	000002f8 spi_command_defs
0101a13c g     F .text	0000008c .hidden __aeabi_ul2f
01004798 g     F .text	00000044 list_new_conf
0101a220 g     F .text	00000040 .hidden __fixunssfdi
01005384 g     F .text	00000020 list_get_last
010134d4 g     F .text	00000054 XAxiDma_BdRingStart
0106b318 g       .data	00000000 ___DTORS_END___
01019980 g     F .text	00000294 .hidden __divsi3
01017cac g     F .text	00000048 Xil_L1DCacheFlushRange
010196bc g     F .text	00000024 XTime_SetTime
01006a8c g     F .text	00000004 queue_zip_iter_replace
01070010 g       .ARM.attributes	00000000 __sdata_end
01022154 g     F .text	000000aa _malloc_trim_r
01025774 g     F .text	000000f4 _wcsnrtombs_l
0106a488 g       .data	00000000 __sdata2_start
0100855c g     F .text	00000004 treeset_conf_init
01005da4 g     F .text	0000001c list_iter_init
0106b318 g       .data	00000000 __CTOR_END__
0106b318 g       .data	00000000 ___DTORS_LIST___
0100d6e4 g     F .text	00000164 fabcfg_init
01005364 g     F .text	00000020 list_get_first
0101ca88 g     F .text	000002dc strcmp
01017cf4 g     F .text	00000018 Xil_L1DCacheStoreLine
0100e560 g     F .text	0000005c d_read_timing
01016aac g     F .text	0000001c XScuTimer_LookupConfig
010175d4 g     F .text	0000016c XSpiPs_SelfTest
01013528 g     F .text	00000074 XAxiDma_BdRingSetCoalesce
0106b318 g       .data	00000000 __DTOR_LIST__
01011594 g     F .text	00000004 spicmd_trig_disarm
010256ec g     F .text	0000001a vfiprintf
010113ec g     F .text	00000010 spicmd_version
01008784 g     F .text	00000004 treeset_iter_remove
01003d4c g     F .text	00000074 hashtable_contains_key
01006cd8 g     F .text	00000010 rbuf_peek
01006a5c g     F .text	00000008 queue_size
0101237c g     F .text	0000023c XAxiDma_CfgInitialize
0101a260 g     F .text	00000040 .hidden __fixunsdfdi
01006a4c g     F .text	00000008 queue_poll
01025e2c g     F .fini	00000000 _fini
01000edc g     F .text	000000d0 array_filter_mut
0100f93c g     F .text	0000015c mipi_csi_transfer_packet
01017fc0 g     F .text	00000030 Xil_ICacheEnable
0101aeb0 g     F .text	00000012 memalign
01008700 g     F .text	0000001c treeset_get_greater_than
01012668 g     F .text	000002b8 XAxiDma_Resume
01011938 g     F .text	00000068 sysctrl_led_mode
01018130 g     F .text	00000014 Xil_L2CacheStoreLine
010702f4 g     O .bss	00000004 _PathLocale
01002a8c g     F .text	00000008 deque_get_buffer
01004b9c g     F .text	000000e4 list_add_all
01008538 g     F .text	00000008 stack_iter_init
01010bd0 g     F .text	00000064 spi_command_pack_response_pre_alloc
00010c00 g       .stack	00000000 _abort_stack_end
01025868 g     F .text	00000030 _wcsnrtombs_r
010258d0 g     F .text	0000002c _write_r
0100bf08 g     F .text	000007bc _acq_irq_rx_handler
01007ee8 g     F .text	00000088 slist_filter_mut
0100d848 g     F .text	00000024 irq_xscutimer
010030c4 g     F .text	00000024 deque_iter_add
0101ae9c g     F .text	00000012 setlocale
0101221c g     F .text	00000114 XAxiDma_Reset
01008088 g     F .text	0000002c slist_iter_replace
01019fac g     F .text	0000016c .hidden __aeabi_frsub
01463340 g     O .bss	00000bc8 g_spi_state
010059e8 g     F .text	00000074 list_to_array
010015c4 g     F .text	0000000c array_iter_index
0100f7a0 g     F .text	00000030 mipi_csi_send_fifo_reset
010025bc g     F .text	00000038 deque_get_last
0100867c g     F .text	00000020 treeset_destroy
01008748 g     F .text	00000008 treeset_foreach
0106a948 g     O .data	00000004 _impure_ptr
010061b4 g     F .text	00000140 list_zip_iter_add
01006a7c g     F .text	0000000c queue_zip_iter_init
01021d9c g     F .text	0000014a __sflush_r
01008540 g     F .text	00000004 stack_iter_next
01016f54 g     F .text	000000e0 XSpiPs_SetSlaveSelect
01001ef4 g     F .text	0000028c deque_add_at
0100356c g     F .text	00000008 hashset_add
01007744 g     F .text	00000044 slist_get_at
01007260 g     F .text	00000058 slist_splice
01000e10 g     F .text	000000cc array_copy_deep
01070008 g       .init_array	00000000 __preinit_array_end
01005128 g     F .text	000000a8 list_remove_all
01023950 g     F .text	00000d96 _svfiprintf_r
0101a53c g     F .text	00000680 __loadlocale
0100e904 g     F .text	0000006c mipi_csi_set_datatype_and_frame_wct
0106a48c g     O .data	0000001c acq_state_to_str
01001300 g     F .text	00000048 array_iter_next
0106a488 g       .data	00000000 __sdata2_end
010006e0 g     F .text	00000038 array_conf_init
0100357c g     F .text	00000008 hashset_remove_all
01007790 g     F .text	00000044 slist_reverse
0101b564 g     F .text	00000024 __ascii_mbtowc
0102304c g     F .text	00000050 __ulp
0102213c g     F .text	00000016 __fp_unlock_all
01014450 g     F .text	000000ac XGpioPs_SetOutputEnable
01006990 g     F .text	00000078 queue_new_conf
0100fe64 g     F .text	00000198 mipi_csi_tick
0100c878 g     F .text	000002d0 acq_debug_dump_wave
010040f8 g     F .text	00000268 hashtable_hash
010098dc g     F .text	000002fc treetable_add
01005b40 g     F .text	000000b8 list_sort
01025dc4 g     F .text	0000000c inbyte
010117a0 g     F .text	00000050 sysctrl_tick_irq
0100fb2c g     F .text	0000002c mipi_csi_unpop_and_start_all
01011794 g     F .text	00000004 spicmd_csi_setup_wave_all
010107f8 g     F .text	00000034 spi_reset_hw
0100d520 g     F .text	000001c4 fabcfg_dump_state
0100690c g     F .text	00000004 queue_conf_init
01016100 g     F .text	000000d4 XScuGic_Enable
0106a568 g     O .data	00000038 XExc_VectorTable
0100295c g     F .text	0000004c deque_contains
01006bb4 g     F .text	00000028 rbuf_conf_init
01006a88 g     F .text	00000004 queue_zip_iter_next
01014cec g     F .text	0000001c XGpioPs_LookupConfig
01005f64 g     F .text	00000020 list_diter_init
01008518 g     F .text	00000008 stack_peek
01000c28 g     F .text	00000024 array_get_last
01022870 g     F .text	0000001e localeconv
01011a30 g     F .text	000000a8 sysctrl_main_loop
0106b318 g       .data	00000000 ___CTORS_END___
01022890 g     F .text	0000005c __swhatbuf_r
010077d4 g     F .text	000001d8 slist_sublist
00010000 g       .stack	00000000 __stack
01008290 g     F .text	000000dc slist_zip_iter_remove
01006468 g     F .text	0000008c pqueue_new
01019964 g     F .text	0000001a .hidden __aeabi_uidivmod
01005040 g     F .text	00000074 list_remove_first
010010bc g     F .text	00000054 array_reverse
010188dc g     F .text	00000024 Xil_ExceptionRemoveHandler
0d465f60 g       .heap	00000000 HeapLimit
01025d2c  w    F .text	00000004 _write
0100a87c g     F .text	0000002c _acq_reset_trigger
01002550 g     F .text	00000044 deque_get_at
00011800 g       .stack	00000000 _end
010035e0 g     F .text	00000004 hashset_iter_remove
01012dcc g     F .text	00000108 XAxiDma_DumpBd
01007f8c g     F .text	0000008c slist_iter_remove
010190f4 g     F .text	00000054 XUartPs_ResetHw
0106a548 g     O .data	00000008 XGpioPs_ConfigTable
0100fafc g     F .text	00000030 mipi_csi_unpop_and_start
0106a488 g       .data	00000000 __rodata1_end
0101000c g     F .text	00000004 cleanup_platform
010259c4 g     F .text	000000ae __fputwc
0101158c g     F .text	00000004 spicmd_trig_force
01015930 g     F .text	000000a0 XGpioPs_SetCallbackHandler
0106b318 g       .data	00000000 __data1_end
01007ad0 g     F .text	0000012c slist_copy_deep
01003cc8 g     F .text	00000074 hashtable_remove_all
010195e0 g     F .text	00000014 DataAbortInterrupt
010135b8 g     F .text	000000a0 XAxiDma_BdRingAlloc
01001210 g     F .text	00000008 array_size
01008548 g     F .text	0000000c stack_zip_iter_init
0100741c g     F .text	000000a4 slist_remove_at
010029a8 g     F .text	00000068 deque_contains_value
010009d8 g     F .text	00000044 array_replace_at
010159d0 g     F .text	000000e4 XGpioPs_IntrHandler
010149f8 g     F .text	000000e8 XGpioPs_GetDirectionPin
01005bf8 g     F .text	00000010 list_sort_in_place
010237f0 g     F .text	0000003e __swrite
01011b0c g     F .text	00000150 trig_write_levels
0106b310 g     O .data	00000004 __malloc_trim_threshold
010117f0 g     F .text	00000148 sysctrl_init
01003e84 g     F .text	000000c4 hashtable_get_keys
01465f60 g       .heap	00000000 _heap
0100335c g     F .text	000000cc deque_zip_iter_replace
0101a430 g     F .text	00000020 exit
01024770 g     F .text	00000f7c _vfiprintf_r
01459b80 g     O .bss	000010f8 g_hal
010074c0 g     F .text	00000060 slist_remove_first
01022764 g     F .text	00000050 _fwalk_reent
0101b8cc g     F .text	00000126 __jis_mbtowc
01007788 g     F .text	00000008 slist_size
01005c08 g     F .text	0000002c list_foreach
01003b54 g     F .text	00000174 hashtable_remove
0101a118 g     F .text	00000024 .hidden __floatunsisf
01022f44 g     F .text	00000106 __mdiff
01008544 g     F .text	00000004 stack_iter_replace
0100adac g     F .text	00000064 acq_free_all_alloc_core
01011530 g     F .text	0000002c spicmd_acq_status
01015408 g     F .text	000000e0 XGpioPs_IntrClearPin
01018f14 g     F .text	000000f4 XTtcPs_SetOptions
0101aec4 g     F .text	000000f4 _memalign_r
0101631c g     F .text	0000007c XScuGic_UnmapAllInterruptsFromCpu
01070010 g       .ARM.attributes	00000000 __tbss_end
01006f48 g     F .text	00000058 slist_add_last
01006d5c g     F .text	00000044 slist_new_conf
01022118 g     F .text	00000002 __sfp_lock_release
0100a850 g     F .text	0000002c _acq_reset_PL_fifo
01008510 g     F .text	00000008 stack_push
0100dc9c g     F .text	00000064 bogo_delay
01003584 g     F .text	00000008 hashset_contains
01066428 g     O .rodata	00000101 _ctype_
01019448 g     F .text	000000ac XSpiPs_SetDelays
010121c8 g     F .text	00000018 trig_arm
01007054 g     F .text	000000e4 slist_add_all
01025d8c  w    F .text	00000004 _read
01019c30  w    F .text	00000002 .hidden __aeabi_idiv0
01070008 g       .init_array	00000000 __init_array_start
01002a94 g     F .text	0000004c deque_foreach
0100ee7c g     F .text	000003a4 mipi_csi_generate_sg_list_for_buffer_range
01005f84 g     F .text	00000094 list_diter_add
01014014 g     F .text	0000017c XGpioPs_CfgInitialize
01005a5c g     F .text	00000034 list_contains
01016968 g     F .text	00000088 XScuTimer_GetPrescaler
01015684 g     F .text	000001a0 XGpioPs_SetIntrTypePin
01003438 g     F .text	0000008c hashset_new
010139d0 g     F .text	00000154 XAxiDma_BdRingFromHw
01025db0  w    F .text	00000004 _exit
01006a90 g     F .text	00000090 rbuf_new
010177d8 g     F .text	00000038 Xil_DCacheInvalidateLine
01006420 g     F .text	0000000c list_zip_iter_index
0100cdf4 g     F .text	00000030 acq_get_wave_bit_depth
01012b38 g     F .text	00000030 XAxiDma_LookupConfig
010113fc g     F .text	00000068 spicmd_stats
010228ec g     F .text	0000009a __smakebuf_r
01019590 g     F .text	00000014 FIQInterrupt
01015d44 g     F .text	000000e4 XScuGic_SoftwareIntr
0101ce80 g     F .text	000000dc strlen
01002810 g     F .text	000000f0 deque_trim_capacity
0100d48c g     F .text	00000094 clkwiz_commit
0100541c g     F .text	000000f0 list_reverse
0101ae74 g     F .text	00000006 __locale_ctype_ptr_l
01463f08 g     O .bss	00002000 g_spi_command_lut
01012db4 g     F .text	00000018 XAxiDma_BdSetCtrl
01000bc8 g     F .text	00000040 array_remove_all_free
0100af08 g     F .text	0000006c acq_rewind
00010000 g       .stack	00000000 _stack
01012330 g     F .text	0000004c XAxiDma_ResetIsDone
01019300 g     F .text	000000c0 XSpiPs_SetClkPrescaler
01000584 g     F .text	00000084 array_new
01004724 g     F .text	00000020 list_conf_init
01014398 g     F .text	000000b8 XGpioPs_GetDirection
010086c0 g     F .text	00000008 treeset_remove_all
0102475c g     F .text	00000012 __sprint_r
01016af0 g     F .text	000001e0 XSpiPs_Transfer
01006c10 g     F .text	00000008 rbuf_size
0101c990 g     F .text	000000e4 strchr
01003164 g     F .text	000000ac deque_zip_iter_next
0101779c g     F .text	00000010 Xil_AssertSetCallback
01019efc g     F .text	00000042 .hidden __aeabi_f2d
01015adc g     F .text	00000078 XScuGic_InterruptHandler
010086a4 g     F .text	0000001c treeset_remove
01008530 g     F .text	00000008 stack_map
0106a488 g       .data	00000000 __data_start
010180c8 g     F .text	00000068 Xil_L2CacheFlushRange
01015ba4 g     F .text	000000d4 XScuGic_Connect
01001274 g     F .text	0000007c array_reduce
01006a78 g     F .text	00000004 queue_iter_replace
010075c4 g     F .text	0000005c slist_remove_all
010052d8 g     F .text	0000008c list_replace_at
01017998 g     F .text	00000038 Xil_DCacheStoreLine
010133a8 g     F .text	0000012c XAxiDma_StartBdRingHw
01006910 g     F .text	00000080 queue_new
01006e94 g     F .text	00000058 slist_add
01017e70 g     F .text	0000006c Xil_L2CacheInvalidate
01020b64 g     F .text	00000026 _wctomb_r
01025924 g     F .text	00000002 __env_lock
0100eb64 g     F .text	00000134 mipi_csi_queue_waverange
00011000 g       .stack	00000000 _fiq_stack_end
01007138 g     F .text	00000128 slist_add_all_at
0100e418 g     F .text	00000020 d_getkey
01019c3c g     F .text	0000027a .hidden __subdf3
0101edc8 g     F .text	00001ba0 _vfprintf_r
01001c8c g     F .text	00000028 deque_conf_init
01018a44 g     F .text	000000ac XTtcPs_SetMatchValue
01017b94 g     F .text	0000008c Xil_L1DCacheFlush
01070008 g       .init_array	00000000 __preinit_array_start
00000400 g       *ABS*	00000000 _UNDEF_STACK_SIZE
01000a1c g     F .text	00000048 array_swap_at
010121f8 g     F .text	00000024 trig_force
01004f04 g     F .text	00000084 list_remove
01015274 g     F .text	000000e8 XGpioPs_IntrGetStatusPin
01000bbc g     F .text	0000000c array_remove_all
01017d44 g     F .text	00000018 Xil_L1ICacheInvalidate
01006c18 g     F .text	00000068 rbuf_enqueue
01006da0 g     F .text	0000005c slist_destroy
01022bf8 g     F .text	0000005c __lo0bits
01007c80 g     F .text	00000050 slist_index_of
01019c14 g     F .text	0000001a .hidden __aeabi_idivmod
0100a9f8 g     F .text	000001c4 acq_init
0101608c g     F .text	00000074 XScuGic_InterruptMaptoCpu
0100871c g     F .text	0000001c treeset_get_lesser_than
010180b0 g     F .text	00000018 Xil_L2CacheFlushLine
01018e34 g     F .text	000000a0 XTtcPs_SetStatusHandler
01012b68 g     F .text	00000030 XAxiDma_LookupConfigBaseAddr
01018820 g     F .text	00000030 Xil_DataAbortHandler
0106a488 g       *ABS*	00000000 _SDA2_BASE_
010196e0 g     F .text	00000028 XTime_GetTime
01002e48 g     F .text	0000006c deque_iter_next
01020ad0 g     F .text	00000056 wcrtomb
01007d34 g     F .text	000000b4 slist_sort
0100ae10 g     F .text	000000f8 acq_free_all_alloc
0100b5b8 g     F .text	0000016c acq_start
010188bc g     F .text	00000020 Xil_GetExceptionRegisterHandler
0100dad0 g     F .text	00000018 d_xilinx_assert
01023748 g     F .text	00000080 frexp
010084d4 g     F .text	00000020 stack_destroy
01014d08 g     F .text	000000ac XGpioPs_IntrEnable
01019fb8 g     F .text	00000160 .hidden __addsf3
010150d4 g     F .text	000000e8 XGpioPs_IntrGetEnabledPin
01070000 g       .mmu_tbl	00000000 __mmu_tbl_end
01011c9c g     F .text	00000244 trig_configure_edge
01006a54 g     F .text	00000008 queue_enqueue
01002594 g     F .text	00000028 deque_get_first
0106ad78 g     O .data	0000016c __global_locale
01015018 g     F .text	000000bc XGpioPs_IntrGetEnabled
01018ed4 g     F .text	00000040 XTtcPs_LookupConfig
01017f9c g     F .text	00000024 Xil_DCacheEnable
0100ded8 g     F .text	00000514 hal_init
0101732c g     F .text	0000028c XSpiPs_InterruptHandler
01009824 g     F .text	000000b8 treetable_contains_value
01070010 g       .ARM.attributes	00000000 __ARM.attributes_start
01020968 g     F .text	0000001a vfprintf
01001b4c g     F .text	0000008c deque_new
01001238 g     F .text	0000003c array_map
01017b4c g     F .text	00000048 Xil_L1DCacheInvalidateRange
010115f8 g     F .text	00000178 spicmd_comp0
01011464 g     F .text	00000078 spicmd_acq_setup_trigd
01025a9c g     F .text	00000042 fputwc
01025dd0  w    F .text	00000008 _close
0101afc8 g     F .text	00000010 free
0102211c g     F .text	00000002 __sinit_lock_acquire
010063d0 g     F .text	00000050 list_zip_iter_replace
01022a90 g     F .text	00000090 __multadd
01022a7c g     F .text	00000012 _Bfree
0102283c g     F .text	00000010 _getenv_r
01019148 g     F .text	00000104 XSpiPs_SetOptions
01001cd8 g     F .text	00000074 deque_destroy_cb



Disassembly of section .text:

01000000 <_vector_table>:

.globl _vector_table

.section .vectors
_vector_table:
	B	_boot
 1000000:	ea000049 	b	100012c <_boot>
	B	Undefined
 1000004:	ea000025 	b	10000a0 <Undefined>
	B	SVCHandler
 1000008:	ea00002b 	b	10000bc <SVCHandler>
	B	PrefetchAbortHandler
 100000c:	ea00003b 	b	1000100 <PrefetchAbortHandler>
	B	DataAbortHandler
 1000010:	ea000032 	b	10000e0 <DataAbortHandler>
	NOP	/* Placeholder for address exception vector*/
 1000014:	e320f000 	nop	{0}
	B	IRQHandler
 1000018:	ea000000 	b	1000020 <IRQHandler>
	B	FIQHandler
 100001c:	ea00000f 	b	1000060 <FIQHandler>

01000020 <IRQHandler>:


IRQHandler:					/* IRQ vector handler */

	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code*/
 1000020:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000024:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000028:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100002c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000030:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000034:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000038:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	ldr	r2, =prof_pc
	subs	r3, lr, #0
	str	r3, [r2]
#endif

	bl	IRQInterrupt			/* IRQ vector */
 100003c:	eb006558 	bl	10195a4 <IRQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000040:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000044:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000048:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100004c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000050:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000054:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000058:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}


	subs	pc, lr, #4			/* adjust return */
 100005c:	e25ef004 	subs	pc, lr, #4

01000060 <FIQHandler>:


FIQHandler:					/* FIQ vector handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000060:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000064:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000068:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100006c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000070:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000074:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000078:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)

0100007c <FIQLoop>:
#endif

FIQLoop:
	bl	FIQInterrupt			/* FIQ vector */
 100007c:	eb006543 	bl	1019590 <FIQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000080:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000084:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000088:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100008c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000090:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000094:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000098:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	subs	pc, lr, #4			/* adjust return */
 100009c:	e25ef004 	subs	pc, lr, #4

010000a0 <Undefined>:


Undefined:					/* Undefined handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000a0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =UndefinedExceptionAddr
 10000a4:	e59f0074 	ldr	r0, [pc, #116]	; 1000120 <PrefetchAbortHandler+0x20>
	sub     r1, lr, #4
 10000a8:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Store address of instruction causing undefined exception */
 10000ac:	e5801000 	str	r1, [r0]

	bl	UndefinedException		/* UndefinedException: call C function here */
 10000b0:	eb006540 	bl	10195b8 <UndefinedException>
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000b4:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	movs	pc, lr
 10000b8:	e1b0f00e 	movs	pc, lr

010000bc <SVCHandler>:

SVCHandler:					/* SWI handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000bc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	tst	r0, #0x20			/* check the T bit */
 10000c0:	e3100020 	tst	r0, #32
	ldrneh	r0, [lr,#-2]			/* Thumb mode */
 10000c4:	115e00b2 	ldrhne	r0, [lr, #-2]
	bicne	r0, r0, #0xff00			/* Thumb mode */
 10000c8:	13c00cff 	bicne	r0, r0, #65280	; 0xff00
	ldreq	r0, [lr,#-4]			/* ARM mode */
 10000cc:	051e0004 	ldreq	r0, [lr, #-4]
	biceq	r0, r0, #0xff000000		/* ARM mode */
 10000d0:	03c004ff 	biceq	r0, r0, #-16777216	; 0xff000000

	bl	SWInterrupt			/* SWInterrupt: call C function here */
 10000d4:	eb00653c 	bl	10195cc <SWInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000d8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	movs	pc, lr		/*return to the next instruction after the SWI instruction */
 10000dc:	e1b0f00e 	movs	pc, lr

010000e0 <DataAbortHandler>:


DataAbortHandler:				/* Data Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 10000e0:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000e4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =DataAbortAddr
 10000e8:	e59f0034 	ldr	r0, [pc, #52]	; 1000124 <PrefetchAbortHandler+0x24>
	sub     r1, lr, #8
 10000ec:	e24e1008 	sub	r1, lr, #8
	str     r1, [r0]            		/* Stores instruction causing data abort */
 10000f0:	e5801000 	str	r1, [r0]

	bl	DataAbortInterrupt		/*DataAbortInterrupt :call C function here */
 10000f4:	eb006539 	bl	10195e0 <DataAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000f8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #8			/* points to the instruction that caused the Data Abort exception */
 10000fc:	e25ef008 	subs	pc, lr, #8

01000100 <PrefetchAbortHandler>:

PrefetchAbortHandler:				/* Prefetch Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 1000100:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000104:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =PrefetchAbortAddr
 1000108:	e59f0018 	ldr	r0, [pc, #24]	; 1000128 <PrefetchAbortHandler+0x28>
	sub     r1, lr, #4
 100010c:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Stores instruction causing prefetch abort */
 1000110:	e5801000 	str	r1, [r0]

	bl	PrefetchAbortInterrupt		/* PrefetchAbortInterrupt: call C function here */
 1000114:	eb006536 	bl	10195f4 <PrefetchAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000118:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* points to the instruction that caused the Prefetch Abort exception */
 100011c:	e25ef004 	subs	pc, lr, #4
	ldr     r0, =UndefinedExceptionAddr
 1000120:	01465f44 	.word	0x01465f44
	ldr     r0, =DataAbortAddr
 1000124:	01465f4c 	.word	0x01465f4c
	ldr     r0, =PrefetchAbortAddr
 1000128:	01465f48 	.word	0x01465f48

0100012c <_boot>:
_prestart:
_boot:

#if XPAR_CPU_ID==0
        /* only allow cpu0 through */
	mrc	p15,0,r1,c0,c0,5
 100012c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
	and	r1, r1, #0xf
 1000130:	e201100f 	and	r1, r1, #15
        cmp	r1, #0
 1000134:	e3510000 	cmp	r1, #0
	beq	CheckEFUSE
 1000138:	0a000001 	beq	1000144 <CheckEFUSE>

0100013c <EndlessLoop0>:
	EndlessLoop0:
		wfe
 100013c:	e320f002 	wfe
	b	EndlessLoop0
 1000140:	eafffffd 	b	100013c <EndlessLoop0>

01000144 <CheckEFUSE>:

CheckEFUSE:
        ldr r0,=EFUSEStaus
 1000144:	e59f030c 	ldr	r0, [pc, #780]	; 1000458 <finished+0x14>
        ldr r1,[r0]                             /* Read eFuse setting */
 1000148:	e5901000 	ldr	r1, [r0]
        ands r1,r1,#0x80                        /* Check whether device is having single core */
 100014c:	e2111080 	ands	r1, r1, #128	; 0x80
	beq OKToRun
 1000150:	0a000009 	beq	100017c <OKToRun>

 /* single core device, reset cpu1 */
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 1000154:	e59f0300 	ldr	r0, [pc, #768]	; 100045c <finished+0x18>
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000158:	e59f1300 	ldr	r1, [pc, #768]	; 1000460 <finished+0x1c>
        str     r1, [r0]                        /* Unlock SLCR */
 100015c:	e5801000 	str	r1, [r0]

	ldr r0,=SLCRCPURSTReg
 1000160:	e59f02fc 	ldr	r0, [pc, #764]	; 1000464 <finished+0x20>
	ldr r1,[r0]                             /* Read CPU Software Reset Control register */
 1000164:	e5901000 	ldr	r1, [r0]
	orr r1,r1,#0x22
 1000168:	e3811022 	orr	r1, r1, #34	; 0x22
        str r1,[r0]                             /* Reset CPU1 */
 100016c:	e5801000 	str	r1, [r0]

        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000170:	e59f02f0 	ldr	r0, [pc, #752]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 1000174:	e59f12f0 	ldr	r1, [pc, #752]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000178:	e5801000 	str	r1, [r0]

0100017c <OKToRun>:
	        wfe
	b	EndlessLoop1
#endif

OKToRun:
	mrc     p15, 0, r0, c0, c0, 0		/* Get the revision */
 100017c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and     r5, r0, #0x00f00000
 1000180:	e200560f 	and	r5, r0, #15728640	; 0xf00000
	and     r6, r0, #0x0000000f
 1000184:	e200600f 	and	r6, r0, #15
	orr     r6, r6, r5, lsr #20-4
 1000188:	e1866825 	orr	r6, r6, r5, lsr #16

#ifdef CONFIG_ARM_ERRATA_742230
        cmp     r6, #0x22                       /* only present up to r2p2 */
 100018c:	e3560022 	cmp	r6, #34	; 0x22
        mrcle   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 1000190:	de1faf30 	mrcle	15, 0, sl, cr15, cr0, {1}
        orrle   r10, r10, #1 << 4               /* set bit #4 */
 1000194:	d38aa010 	orrle	sl, sl, #16
        mcrle   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 1000198:	de0faf30 	mcrle	15, 0, sl, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	teq     r5, #0x00200000                 /* only present in r2p* */
 100019c:	e3350602 	teq	r5, #2097152	; 0x200000
	mrceq   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 10001a0:	0e1faf30 	mrceq	15, 0, sl, cr15, cr0, {1}
	orreq   r10, r10, #1 << 6               /* set bit #6 */
 10001a4:	038aa040 	orreq	sl, sl, #64	; 0x40
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 10001a8:	0e0faf30 	mcreq	15, 0, sl, cr15, cr0, {1}
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
 10001ac:	e59f02bc 	ldr	r0, [pc, #700]	; 1000470 <finished+0x2c>
	mcr	p15, 0, r0, c12, c0, 0
 10001b0:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
 10001b4:	e59f72b8 	ldr	r7, [pc, #696]	; 1000474 <finished+0x30>
	ldr	r6, =0xffff
 10001b8:	e59f62b8 	ldr	r6, [pc, #696]	; 1000478 <finished+0x34>
	str	r6, [r7]
 10001bc:	e5876000 	str	r6, [r7]

	/* Invalidate caches and TLBs */
	mov	r0,#0				/* r0 = 0  */
 10001c0:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */
 10001c4:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */
 10001c8:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */
 10001cc:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	bl	invalidate_dcache		/* invalidate dcache */
 10001d0:	eb00007c 	bl	10003c8 <invalidate_dcache>

	/* Disable MMU, if enabled */
	mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */
 10001d4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x1			/* clear bit 0 */
 10001d8:	e3c00001 	bic	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 0		/* write value back */
 10001dc:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	add	r2, r2, #0x100000		/* next section */
	subs	r3, r3, #1
	bge	shareable_loop			/* loop till 1G is covered */
#endif

	mrs	r0, cpsr			/* get the current PSR */
 10001e0:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the irq stack pointer */
 10001e4:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 10001e8:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
 10001ec:	e3822012 	orr	r2, r2, #18
	msr	cpsr, r2
 10001f0:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 10001f4:	e59fd280 	ldr	sp, [pc, #640]	; 100047c <finished+0x38>
	bic r2, r2, #(0x1 << 9)    		 /* Set EE bit to little-endian */
 10001f8:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 10001fc:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000200:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
 1000204:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000208:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
 100020c:	e3822013 	orr	r2, r2, #19
	msr	cpsr, r2
 1000210:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000214:	e59fd264 	ldr	sp, [pc, #612]	; 1000480 <finished+0x3c>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000218:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100021c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000220:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
 1000224:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000228:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
 100022c:	e3822017 	orr	r2, r2, #23
	msr	cpsr, r2
 1000230:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000234:	e59fd248 	ldr	sp, [pc, #584]	; 1000484 <finished+0x40>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000238:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100023c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000240:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
 1000244:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000248:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
 100024c:	e3822011 	orr	r2, r2, #17
	msr	cpsr, r2
 1000250:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000254:	e59fd22c 	ldr	sp, [pc, #556]	; 1000488 <finished+0x44>
	bic r2, r2, #(0x1 << 9)    		/* Set EE bit to little-endian */
 1000258:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100025c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000260:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
 1000264:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000268:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
 100026c:	e382201b 	orr	r2, r2, #27
	msr	cpsr, r2
 1000270:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 1000274:	e59fd210 	ldr	sp, [pc, #528]	; 100048c <finished+0x48>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000278:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100027c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000280:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the system stack pointer */
 1000284:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000288:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
 100028c:	e382201f 	orr	r2, r2, #31
	msr	cpsr, r2
 1000290:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000294:	e59fd1f4 	ldr	sp, [pc, #500]	; 1000490 <finished+0x4c>

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
 1000298:	e59f71f4 	ldr	r7, [pc, #500]	; 1000494 <finished+0x50>
	ldr	r0, [r7]
 100029c:	e5970000 	ldr	r0, [r7]
	orr	r0, r0, #0x1
 10002a0:	e3800001 	orr	r0, r0, #1
	str	r0, [r7]
 10002a4:	e5870000 	str	r0, [r7]

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
 10002a8:	e59f01e8 	ldr	r0, [pc, #488]	; 1000498 <finished+0x54>
	orr	r0, r0, #0x5B			/* Outer-cacheable, WB */
 10002ac:	e380005b 	orr	r0, r0, #91	; 0x5b
	mcr	15, 0, r0, c2, c0, 0		/* TTB0 */
 10002b0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}

	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
 10002b4:	e3e00000 	mvn	r0, #0
	mcr	p15,0,r0,c3,c0,0
 10002b8:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
 10002bc:	e59f01d8 	ldr	r0, [pc, #472]	; 100049c <finished+0x58>
	mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */
 10002c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	dsb					/* dsb	allow the MMU to start up */
 10002c4:	f57ff04f 	dsb	sy
	isb					/* isb	flush prefetch buffer */
 10002c8:	f57ff06f 	isb	sy

	/* Write to ACTLR */
	mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/
 10002cc:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x01 << 6)		/* set SMP bit */
 10002d0:	e3800040 	orr	r0, r0, #64	; 0x40
	orr	r0, r0, #(0x01 )		/* Cache/TLB maintenance broadcast */
 10002d4:	e3800001 	orr	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/
 10002d8:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

/* Invalidate L2 Cache and enable L2 Cache*/
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10002dc:	e59f01bc 	ldr	r0, [pc, #444]	; 10004a0 <finished+0x5c>
	mov	r1, #0				/* force the disable bit */
 10002e0:	e3a01000 	mov	r1, #0
	str	r1, [r0]			/* disable the L2 Caches */
 10002e4:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10002e8:	e59f01b4 	ldr	r0, [pc, #436]	; 10004a4 <finished+0x60>
	ldr	r1,[r0]				/* read the register */
 10002ec:	e5901000 	ldr	r1, [r0]
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10002f0:	e59f21b0 	ldr	r2, [pc, #432]	; 10004a8 <finished+0x64>
	orr	r1,r1,r2
 10002f4:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* store the Aux Control Register */
 10002f8:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10002fc:	e59f01a8 	ldr	r0, [pc, #424]	; 10004ac <finished+0x68>
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 1000300:	e59f11a8 	ldr	r1, [pc, #424]	; 10004b0 <finished+0x6c>
	str	r1, [r0]			/* store the TAG Latency register Register */
 1000304:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 1000308:	e59f01a4 	ldr	r0, [pc, #420]	; 10004b4 <finished+0x70>
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 100030c:	e59f11a4 	ldr	r1, [pc, #420]	; 10004b8 <finished+0x74>
	str	r1, [r0]			/* store the Data Latency register Register */
 1000310:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 1000314:	e59f01a0 	ldr	r0, [pc, #416]	; 10004bc <finished+0x78>
	ldr	r2, =0xFFFF
 1000318:	e59f2158 	ldr	r2, [pc, #344]	; 1000478 <finished+0x34>
	str	r2, [r0]			/* force invalidate */
 100031c:	e5802000 	str	r2, [r0]

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 1000320:	e59f0198 	ldr	r0, [pc, #408]	; 10004c0 <finished+0x7c>

01000324 <Sync>:
						/* Load L2CC base address base + sync register*/
	/* poll for completion */
Sync:	ldr	r1, [r0]
 1000324:	e5901000 	ldr	r1, [r0]
	cmp	r1, #0
 1000328:	e3510000 	cmp	r1, #0
	bne	Sync
 100032c:	1afffffc 	bne	1000324 <Sync>

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 1000330:	e59f018c 	ldr	r0, [pc, #396]	; 10004c4 <finished+0x80>
	ldr	r1,[r0]
 1000334:	e5901000 	ldr	r1, [r0]
	ldr	r0,=L2CCIntClear
 1000338:	e59f0188 	ldr	r0, [pc, #392]	; 10004c8 <finished+0x84>
	str	r1,[r0]
 100033c:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
 1000340:	e59f0114 	ldr	r0, [pc, #276]	; 100045c <finished+0x18>
	ldr	r1,=SLCRUnlockKey	    	/* set unlock key */
 1000344:	e59f1114 	ldr	r1, [pc, #276]	; 1000460 <finished+0x1c>
	str	r1, [r0]		    	/* Unlock SLCR */
 1000348:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 100034c:	e59f0178 	ldr	r0, [pc, #376]	; 10004cc <finished+0x88>
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 1000350:	e59f1178 	ldr	r1, [pc, #376]	; 10004d0 <finished+0x8c>
	str	r1, [r0]	        	/* store the L2c Ram Control Register */
 1000354:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000358:	e59f0108 	ldr	r0, [pc, #264]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100035c:	e59f1108 	ldr	r1, [pc, #264]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000360:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 1000364:	e59f0134 	ldr	r0, [pc, #308]	; 10004a0 <finished+0x5c>
	ldr	r1,[r0]				/* read the register */
 1000368:	e5901000 	ldr	r1, [r0]
	mov	r2, #L2CCControl		/* set the enable bit */
 100036c:	e3a02001 	mov	r2, #1
	orr	r1,r1,r2
 1000370:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* enable the L2 Caches */
 1000374:	e5801000 	str	r1, [r0]
#endif

	mov	r0, r0
 1000378:	e1a00000 	nop			; (mov r0, r0)
	mrc	p15, 0, r1, c1, c0, 2		/* read cp access control register (CACR) into r1 */
 100037c:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr	r1, r1, #(0xf << 20)		/* enable full access for p10 & p11 */
 1000380:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr	p15, 0, r1, c1, c0, 2		/* write back into CACR */
 1000384:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}

	/* enable vfp */
	fmrx	r1, FPEXC			/* read the exception register */
 1000388:	eef81a10 	vmrs	r1, fpexc
	orr	r1,r1, #FPEXC_EN		/* set VFP enable bit, leave the others in orig state */
 100038c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
	fmxr	FPEXC, r1			/* write back the exception register */
 1000390:	eee81a10 	vmsr	fpexc, r1

	mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */
 1000394:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #(0x01 << 11)		/* #0x8000 */
 1000398:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15,0,r0,c1,c0,0
 100039c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */
 10003a0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */
 10003a4:	e3800004 	orr	r0, r0, #4
	orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */
 10003a8:	e3800002 	orr	r0, r0, #2
	mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */
 10003ac:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

	mrs	r0, cpsr			/* get the current PSR */
 10003b0:	e10f0000 	mrs	r0, CPSR
	bic	r0, r0, #0x100			/* enable asynchronous abort exception */
 10003b4:	e3c00c01 	bic	r0, r0, #256	; 0x100
	msr	cpsr_xsf, r0
 10003b8:	e12ef000 	msr	CPSR_fsx, r0


	b	_start				/* jump to C startup code */
 10003bc:	ea006496 	b	101961c <_start>
	and	r0, r0, r0			/* no op */
 10003c0:	e0000000 	and	r0, r0, r0

.Ldone:	b	.Ldone				/* Paranoia: we should never get here */
 10003c4:	eafffffe 	b	10003c4 <Sync+0xa0>

010003c8 <invalidate_dcache>:
 * the whole D-cache. Need to invalidate each line.
 *
 *************************************************************************
 */
invalidate_dcache:
	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */
 10003c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
	ands	r3, r0, #0x7000000
 10003cc:	e2103407 	ands	r3, r0, #117440512	; 0x7000000
	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */
 10003d0:	e1a03ba3 	lsr	r3, r3, #23
	beq	finished
 10003d4:	0a00001a 	beq	1000444 <finished>
	mov	r10, #0				/* start with level 0 */
 10003d8:	e3a0a000 	mov	sl, #0

010003dc <loop1>:
loop1:
	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */
 10003dc:	e08a20aa 	add	r2, sl, sl, lsr #1
	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */
 10003e0:	e1a01230 	lsr	r1, r0, r2
	and	r1, r1, #7			/* get those 3 bits alone */
 10003e4:	e2011007 	and	r1, r1, #7
	cmp	r1, #2
 10003e8:	e3510002 	cmp	r1, #2
	blt	skip				/* no cache or only instruction cache at this level */
 10003ec:	ba000011 	blt	1000438 <skip>
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
 10003f0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	isb					/* isb to sync the change to the CacheSizeID reg */
 10003f4:	f57ff06f 	isb	sy
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
 10003f8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
	and	r2, r1, #7			/* extract the line length field */
 10003fc:	e2012007 	and	r2, r1, #7
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
 1000400:	e2822004 	add	r2, r2, #4
	ldr	r4, =0x3ff
 1000404:	e59f40c8 	ldr	r4, [pc, #200]	; 10004d4 <finished+0x90>
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
 1000408:	e01441a1 	ands	r4, r4, r1, lsr #3
	clz	r5, r4				/* r5 is the bit position of the way size increment */
 100040c:	e16f5f14 	clz	r5, r4
	ldr	r7, =0x7fff
 1000410:	e59f70c0 	ldr	r7, [pc, #192]	; 10004d8 <finished+0x94>
	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */
 1000414:	e01776a1 	ands	r7, r7, r1, lsr #13

01000418 <loop2>:
loop2:
	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */
 1000418:	e1a09004 	mov	r9, r4

0100041c <loop3>:
loop3:
	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */
 100041c:	e18ab519 	orr	fp, sl, r9, lsl r5
	orr	r11, r11, r7, lsl r2		/* factor in the index number */
 1000420:	e18bb217 	orr	fp, fp, r7, lsl r2
	mcr	p15, 0, r11, c7, c6, 2		/* invalidate by set/way */
 1000424:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
	subs	r9, r9, #1			/* decrement the way number */
 1000428:	e2599001 	subs	r9, r9, #1
	bge	loop3
 100042c:	aafffffa 	bge	100041c <loop3>
	subs	r7, r7, #1			/* decrement the index */
 1000430:	e2577001 	subs	r7, r7, #1
	bge	loop2
 1000434:	aafffff7 	bge	1000418 <loop2>

01000438 <skip>:
skip:
	add	r10, r10, #2			/* increment the cache number */
 1000438:	e28aa002 	add	sl, sl, #2
	cmp	r3, r10
 100043c:	e153000a 	cmp	r3, sl
	bgt	loop1
 1000440:	caffffe5 	bgt	10003dc <loop1>

01000444 <finished>:

finished:
	mov	r10, #0				/* switch back to cache level 0 */
 1000444:	e3a0a000 	mov	sl, #0
	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */
 1000448:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	dsb
 100044c:	f57ff04f 	dsb	sy
	isb
 1000450:	f57ff06f 	isb	sy

	bx	lr
 1000454:	e12fff1e 	bx	lr
        ldr r0,=EFUSEStaus
 1000458:	f800d010 	.word	0xf800d010
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 100045c:	f8000008 	.word	0xf8000008
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000460:	0000df0d 	.word	0x0000df0d
	ldr r0,=SLCRCPURSTReg
 1000464:	f8000244 	.word	0xf8000244
        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000468:	f8000004 	.word	0xf8000004
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100046c:	0000767b 	.word	0x0000767b
	ldr	r0, =vector_base
 1000470:	01000000 	.word	0x01000000
	ldr	r7, =0xf8f0000c
 1000474:	f8f0000c 	.word	0xf8f0000c
	ldr	r6, =0xffff
 1000478:	0000ffff 	.word	0x0000ffff
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 100047c:	00010400 	.word	0x00010400
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000480:	00010c00 	.word	0x00010c00
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000484:	00011000 	.word	0x00011000
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000488:	00011400 	.word	0x00011400
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 100048c:	00011800 	.word	0x00011800
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000490:	00010000 	.word	0x00010000
	ldr	r7, =0xf8f00000
 1000494:	f8f00000 	.word	0xf8f00000
	ldr	r0,=TblBase			/* Load MMU translation table base */
 1000498:	0106c000 	.word	0x0106c000
	ldr	r0,=CRValMmuCac
 100049c:	00001005 	.word	0x00001005
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10004a0:	f8f02100 	.word	0xf8f02100
	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10004a4:	f8f02104 	.word	0xf8f02104
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10004a8:	72360000 	.word	0x72360000
	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10004ac:	f8f02108 	.word	0xf8f02108
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 10004b0:	00000111 	.word	0x00000111
	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 10004b4:	f8f0210c 	.word	0xf8f0210c
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 10004b8:	00000121 	.word	0x00000121
	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 10004bc:	f8f0277c 	.word	0xf8f0277c
	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 10004c0:	f8f02730 	.word	0xf8f02730
	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 10004c4:	f8f0221c 	.word	0xf8f0221c
	ldr	r0,=L2CCIntClear
 10004c8:	f8f02220 	.word	0xf8f02220
	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 10004cc:	f8000a1c 	.word	0xf8000a1c
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 10004d0:	00020202 	.word	0x00020202
	ldr	r4, =0x3ff
 10004d4:	000003ff 	.word	0x000003ff
	ldr	r7, =0x7fff
 10004d8:	00007fff 	.word	0x00007fff

010004dc <deregister_tm_clones>:
 10004dc:	f24b 3018 	movw	r0, #45848	; 0xb318
 10004e0:	f2c0 1006 	movt	r0, #262	; 0x106
 10004e4:	f24b 3318 	movw	r3, #45848	; 0xb318
 10004e8:	f2c0 1306 	movt	r3, #262	; 0x106
 10004ec:	4283      	cmp	r3, r0
 10004ee:	d005      	beq.n	10004fc <deregister_tm_clones+0x20>
 10004f0:	f240 0300 	movw	r3, #0
 10004f4:	f2c0 0300 	movt	r3, #0
 10004f8:	b103      	cbz	r3, 10004fc <deregister_tm_clones+0x20>
 10004fa:	4718      	bx	r3
 10004fc:	4770      	bx	lr
 10004fe:	bf00      	nop

01000500 <register_tm_clones>:
 1000500:	f24b 3018 	movw	r0, #45848	; 0xb318
 1000504:	f2c0 1006 	movt	r0, #262	; 0x106
 1000508:	f24b 3118 	movw	r1, #45848	; 0xb318
 100050c:	f2c0 1106 	movt	r1, #262	; 0x106
 1000510:	1a09      	subs	r1, r1, r0
 1000512:	1089      	asrs	r1, r1, #2
 1000514:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 1000518:	1049      	asrs	r1, r1, #1
 100051a:	d005      	beq.n	1000528 <register_tm_clones+0x28>
 100051c:	f240 0300 	movw	r3, #0
 1000520:	f2c0 0300 	movt	r3, #0
 1000524:	b103      	cbz	r3, 1000528 <register_tm_clones+0x28>
 1000526:	4718      	bx	r3
 1000528:	4770      	bx	lr
 100052a:	bf00      	nop

0100052c <__do_global_dtors_aux>:
 100052c:	b510      	push	{r4, lr}
 100052e:	f240 0420 	movw	r4, #32
 1000532:	f2c0 1407 	movt	r4, #263	; 0x107
 1000536:	7823      	ldrb	r3, [r4, #0]
 1000538:	b973      	cbnz	r3, 1000558 <__do_global_dtors_aux+0x2c>
 100053a:	f7ff ffcf 	bl	10004dc <deregister_tm_clones>
 100053e:	f240 0300 	movw	r3, #0
 1000542:	f2c0 0300 	movt	r3, #0
 1000546:	b12b      	cbz	r3, 1000554 <__do_global_dtors_aux+0x28>
 1000548:	f24b 3018 	movw	r0, #45848	; 0xb318
 100054c:	f2c0 1006 	movt	r0, #262	; 0x106
 1000550:	f3af 8000 	nop.w
 1000554:	2301      	movs	r3, #1
 1000556:	7023      	strb	r3, [r4, #0]
 1000558:	bd10      	pop	{r4, pc}
 100055a:	bf00      	nop

0100055c <frame_dummy>:
 100055c:	b508      	push	{r3, lr}
 100055e:	f240 0300 	movw	r3, #0
 1000562:	f2c0 0300 	movt	r3, #0
 1000566:	b14b      	cbz	r3, 100057c <frame_dummy+0x20>
 1000568:	f240 0124 	movw	r1, #36	; 0x24
 100056c:	f24b 3018 	movw	r0, #45848	; 0xb318
 1000570:	f2c0 1107 	movt	r1, #263	; 0x107
 1000574:	f2c0 1006 	movt	r0, #262	; 0x106
 1000578:	f3af 8000 	nop.w
 100057c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1000580:	e7be      	b.n	1000500 <register_tm_clones>
 1000582:	bf00      	nop

01000584 <array_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new Array structure failed.
 */
enum cc_stat array_new(Array **out)
{
 1000584:	e92d4070 	push	{r4, r5, r6, lr}
    /* Needed to avoid an integer overflow on the first resize and
     * to easily check for any future overflows. */
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
        return CC_ERR_INVALID_CAPACITY;

    Array *ar = conf->mem_calloc(1, sizeof(Array));
 1000588:	e3a0101c 	mov	r1, #28
{
 100058c:	e1a05000 	mov	r5, r0
    Array *ar = conf->mem_calloc(1, sizeof(Array));
 1000590:	e3a00001 	mov	r0, #1
 1000594:	fa006787 	blx	101a3b8 <calloc>

    if (!ar)
 1000598:	e2504000 	subs	r4, r0, #0
 100059c:	0a000017 	beq	1000600 <array_new+0x7c>
        return CC_ERR_ALLOC;

    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 10005a0:	e3a00020 	mov	r0, #32
 10005a4:	fa006a83 	blx	101afb8 <malloc>

    if (!buff) {
 10005a8:	e3500000 	cmp	r0, #0
 10005ac:	0a00000f 	beq	10005f0 <array_new+0x6c>
    }

    ar->buffer     = buff;
    ar->exp_factor = ex;
    ar->capacity   = conf->capacity;
    ar->mem_alloc  = conf->mem_alloc;
 10005b0:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    ar->mem_calloc = conf->mem_calloc;
 10005b4:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    ar->mem_alloc  = conf->mem_alloc;
 10005b8:	e3401101 	movt	r1, #257	; 0x101
    ar->mem_free   = conf->mem_free;
 10005bc:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    ar->mem_calloc = conf->mem_calloc;
 10005c0:	e3402101 	movt	r2, #257	; 0x101
    ar->mem_free   = conf->mem_free;
 10005c4:	e3403101 	movt	r3, #257	; 0x101
    ar->capacity   = conf->capacity;
 10005c8:	e3a0c008 	mov	ip, #8
    ar->mem_alloc  = conf->mem_alloc;
 10005cc:	e5841010 	str	r1, [r4, #16]
    ar->exp_factor = ex;
 10005d0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    ar->buffer     = buff;
 10005d4:	e584000c 	str	r0, [r4, #12]

    *out = ar;
 10005d8:	e5854000 	str	r4, [r5]
    return CC_OK;
 10005dc:	e3a00000 	mov	r0, #0
    ar->mem_free   = conf->mem_free;
 10005e0:	e1c421f4 	strd	r2, [r4, #20]
    ar->exp_factor = ex;
 10005e4:	e5841008 	str	r1, [r4, #8]
    ar->capacity   = conf->capacity;
 10005e8:	e584c004 	str	ip, [r4, #4]
    return CC_OK;
 10005ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(ar);
 10005f0:	e1a00004 	mov	r0, r4
 10005f4:	fa006a73 	blx	101afc8 <free>
        return CC_ERR_ALLOC;
 10005f8:	e3a00001 	mov	r0, #1
 10005fc:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1000600:	e3a00001 	mov	r0, #1
}
 1000604:	e8bd8070 	pop	{r4, r5, r6, pc}

01000608 <array_new_conf>:
{
 1000608:	e92d4070 	push	{r4, r5, r6, lr}
 100060c:	ed2d8b02 	vpush	{d8}
    if (conf->exp_factor <= 1)
 1000610:	ed908a01 	vldr	s16, [r0, #4]
 1000614:	eeb77a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 1000618:	e5903000 	ldr	r3, [r0]
        ex = DEFAULT_EXPANSION_FACTOR;
 100061c:	eef07a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 1000620:	eeb48a47 	vcmp.f32	s16, s14
 1000624:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1000628:	9eb08a67 	vmovls.f32	s16, s15
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 100062c:	e3530000 	cmp	r3, #0
 1000630:	0a000022 	beq	10006c0 <array_new_conf+0xb8>
 1000634:	e1a06001 	mov	r6, r1
 1000638:	e1a04000 	mov	r4, r0
 100063c:	e1a01003 	mov	r1, r3
 1000640:	e3e00001 	mvn	r0, #1
 1000644:	fa00642f 	blx	1019708 <__udivsi3>
 1000648:	ee070a90 	vmov	s15, r0
 100064c:	eef87a67 	vcvt.f32.u32	s15, s15
 1000650:	eef47ac8 	vcmpe.f32	s15, s16
 1000654:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1000658:	9a000018 	bls	10006c0 <array_new_conf+0xb8>
    Array *ar = conf->mem_calloc(1, sizeof(Array));
 100065c:	e594300c 	ldr	r3, [r4, #12]
 1000660:	e3a0101c 	mov	r1, #28
 1000664:	e3a00001 	mov	r0, #1
 1000668:	e12fff33 	blx	r3
    if (!ar)
 100066c:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 1000670:	03a00001 	moveq	r0, #1
    if (!ar)
 1000674:	0a00000f 	beq	10006b8 <array_new_conf+0xb0>
    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 1000678:	e5940000 	ldr	r0, [r4]
 100067c:	e5943008 	ldr	r3, [r4, #8]
 1000680:	e1a00100 	lsl	r0, r0, #2
 1000684:	e12fff33 	blx	r3
    if (!buff) {
 1000688:	e2503000 	subs	r3, r0, #0
 100068c:	0a00000e 	beq	10006cc <array_new_conf+0xc4>
    ar->capacity   = conf->capacity;
 1000690:	e5942000 	ldr	r2, [r4]
    ar->mem_alloc  = conf->mem_alloc;
 1000694:	e2841008 	add	r1, r4, #8
    ar->buffer     = buff;
 1000698:	e585300c 	str	r3, [r5, #12]
    return CC_OK;
 100069c:	e3a00000 	mov	r0, #0
    ar->exp_factor = ex;
 10006a0:	ed858a02 	vstr	s16, [r5, #8]
    ar->capacity   = conf->capacity;
 10006a4:	e5852004 	str	r2, [r5, #4]
    ar->mem_alloc  = conf->mem_alloc;
 10006a8:	e891000e 	ldm	r1, {r1, r2, r3}
 10006ac:	e5851010 	str	r1, [r5, #16]
 10006b0:	e1c521f4 	strd	r2, [r5, #20]
    *out = ar;
 10006b4:	e5865000 	str	r5, [r6]
}
 10006b8:	ecbd8b02 	vpop	{d8}
 10006bc:	e8bd8070 	pop	{r4, r5, r6, pc}
 10006c0:	ecbd8b02 	vpop	{d8}
        return CC_ERR_INVALID_CAPACITY;
 10006c4:	e3a00002 	mov	r0, #2
}
 10006c8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(ar);
 10006cc:	e1a00005 	mov	r0, r5
 10006d0:	e5943010 	ldr	r3, [r4, #16]
 10006d4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10006d8:	e3a00001 	mov	r0, #1
 10006dc:	eafffff5 	b	10006b8 <array_new_conf+0xb0>

010006e0 <array_conf_init>:
 */
void array_conf_init(ArrayConf *conf)
{
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
    conf->capacity   = DEFAULT_CAPACITY;
    conf->mem_alloc  = malloc;
 10006e0:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    conf->mem_calloc = calloc;
 10006e4:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 10006e8:	e30a3fc9 	movw	r3, #45001	; 0xafc9
{
 10006ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    conf->mem_alloc  = malloc;
 10006f0:	e3401101 	movt	r1, #257	; 0x101
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 10006f4:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
    conf->mem_calloc = calloc;
 10006f8:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 10006fc:	e3403101 	movt	r3, #257	; 0x101
    conf->capacity   = DEFAULT_CAPACITY;
 1000700:	e3a0c008 	mov	ip, #8
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 1000704:	e580e004 	str	lr, [r0, #4]
    conf->capacity   = DEFAULT_CAPACITY;
 1000708:	e580c000 	str	ip, [r0]
    conf->mem_alloc  = malloc;
 100070c:	e5801008 	str	r1, [r0, #8]
    conf->mem_free   = free;
 1000710:	e1c020fc 	strd	r2, [r0, #12]
}
 1000714:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01000718 <array_destroy>:
 * Destroys the Array structure, but leaves the data it used to hold intact.
 *
 * @param[in] ar the array that is to be destroyed
 */
void array_destroy(Array *ar)
{
 1000718:	e92d4010 	push	{r4, lr}
 100071c:	e1a04000 	mov	r4, r0
    ar->mem_free(ar->buffer);
 1000720:	e5903018 	ldr	r3, [r0, #24]
 1000724:	e590000c 	ldr	r0, [r0, #12]
 1000728:	e12fff33 	blx	r3
    ar->mem_free(ar);
 100072c:	e5943018 	ldr	r3, [r4, #24]
 1000730:	e1a00004 	mov	r0, r4
}
 1000734:	e8bd4010 	pop	{r4, lr}
    ar->mem_free(ar);
 1000738:	e12fff13 	bx	r3

0100073c <array_destroy_cb>:
 * @param[in] ar the array that is being destroyed
 */
void array_destroy_cb(Array *ar, void (*cb) (void*))
{
    size_t i;
    for (i = 0; i < ar->size; i++)
 100073c:	e5903000 	ldr	r3, [r0]
{
 1000740:	e92d4070 	push	{r4, r5, r6, lr}
 1000744:	e1a05000 	mov	r5, r0
    for (i = 0; i < ar->size; i++)
 1000748:	e3530000 	cmp	r3, #0
 100074c:	0a000008 	beq	1000774 <array_destroy_cb+0x38>
 1000750:	e1a06001 	mov	r6, r1
 1000754:	e3a04000 	mov	r4, #0
        cb(ar->buffer[i]);
 1000758:	e595300c 	ldr	r3, [r5, #12]
 100075c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++)
 1000760:	e2844001 	add	r4, r4, #1
        cb(ar->buffer[i]);
 1000764:	e12fff36 	blx	r6
    for (i = 0; i < ar->size; i++)
 1000768:	e5953000 	ldr	r3, [r5]
 100076c:	e1530004 	cmp	r3, r4
 1000770:	8afffff8 	bhi	1000758 <array_destroy_cb+0x1c>
    ar->mem_free(ar->buffer);
 1000774:	e5953018 	ldr	r3, [r5, #24]
 1000778:	e595000c 	ldr	r0, [r5, #12]
 100077c:	e12fff33 	blx	r3
    ar->mem_free(ar);
 1000780:	e5953018 	ldr	r3, [r5, #24]
 1000784:	e1a00005 	mov	r0, r5

    array_destroy(ar);
}
 1000788:	e8bd4070 	pop	{r4, r5, r6, lr}
    ar->mem_free(ar);
 100078c:	e12fff13 	bx	r3

01000790 <array_add>:
 * memory allocation for the new element failed, or CC_ERR_MAX_CAPACITY if the
 * array is already at maximum capacity.
 */
enum cc_stat array_add(Array *ar, void *element)
{
    if (ar->size >= ar->capacity) {
 1000790:	e5903000 	ldr	r3, [r0]
 1000794:	e5902004 	ldr	r2, [r0, #4]
{
 1000798:	e92d4070 	push	{r4, r5, r6, lr}
 100079c:	e1a04000 	mov	r4, r0
 10007a0:	e1a06001 	mov	r6, r1
    if (ar->size >= ar->capacity) {
 10007a4:	e1530002 	cmp	r3, r2
 10007a8:	2a000005 	bcs	10007c4 <array_add+0x34>
 10007ac:	e590500c 	ldr	r5, [r0, #12]
        if (status != CC_OK)
            return status;
    }

    ar->buffer[ar->size] = element;
    ar->size++;
 10007b0:	e2832001 	add	r2, r3, #1
    ar->buffer[ar->size] = element;
 10007b4:	e7856103 	str	r6, [r5, r3, lsl #2]

    return CC_OK;
 10007b8:	e3a00000 	mov	r0, #0
    ar->size++;
 10007bc:	e5842000 	str	r2, [r4]
    return CC_OK;
 10007c0:	e8bd8070 	pop	{r4, r5, r6, pc}
 * the memory allocation for the new buffer failed, or CC_ERR_MAX_CAPACITY
 * if the array is already at maximum capacity.
 */
static enum cc_stat expand_capacity(Array *ar)
{
    if (ar->capacity == CC_MAX_ELEMENTS)
 10007c4:	e3720002 	cmn	r2, #2
 10007c8:	0a000019 	beq	1000834 <array_add+0xa4>
        return CC_ERR_MAX_CAPACITY;

    size_t new_capacity = ar->capacity * ar->exp_factor;
 10007cc:	ee072a90 	vmov	s15, r2
 10007d0:	ed907a02 	vldr	s14, [r0, #8]
 10007d4:	eef87a67 	vcvt.f32.u32	s15, s15
    if (new_capacity <= ar->capacity)
        ar->capacity = CC_MAX_ELEMENTS;
    else
        ar->capacity = new_capacity;

    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10007d8:	e5901010 	ldr	r1, [r0, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10007dc:	ee677a87 	vmul.f32	s15, s15, s14
 10007e0:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10007e4:	ee173a90 	vmov	r3, s15
    if (new_capacity <= ar->capacity)
 10007e8:	e1520003 	cmp	r2, r3
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10007ec:	e1a00103 	lsl	r0, r3, #2
        ar->capacity = CC_MAX_ELEMENTS;
 10007f0:	23e03001 	mvncs	r3, #1
 10007f4:	e5843004 	str	r3, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10007f8:	e12fff31 	blx	r1

    if (!new_buff)
 10007fc:	e2505000 	subs	r5, r0, #0
 1000800:	0a000009 	beq	100082c <array_add+0x9c>
        return CC_ERR_ALLOC;

    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 1000804:	e5942000 	ldr	r2, [r4]
 1000808:	e594100c 	ldr	r1, [r4, #12]
 100080c:	e1a02102 	lsl	r2, r2, #2
 1000810:	eb006c7a 	bl	101ba00 <memcpy>

    ar->mem_free(ar->buffer);
 1000814:	e5943018 	ldr	r3, [r4, #24]
 1000818:	e594000c 	ldr	r0, [r4, #12]
 100081c:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1000820:	e5943000 	ldr	r3, [r4]
 1000824:	e584500c 	str	r5, [r4, #12]
        if (status != CC_OK)
 1000828:	eaffffe0 	b	10007b0 <array_add+0x20>
        return CC_ERR_ALLOC;
 100082c:	e3a00001 	mov	r0, #1
}
 1000830:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_MAX_CAPACITY;
 1000834:	e3a00004 	mov	r0, #4
 1000838:	e8bd8070 	pop	{r4, r5, r6, pc}

0100083c <array_add_at>:
{
 100083c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1000840:	e1a05002 	mov	r5, r2
    if (index == ar->size)
 1000844:	e5902000 	ldr	r2, [r0]
{
 1000848:	e1a04000 	mov	r4, r0
 100084c:	e1a06001 	mov	r6, r1
    if (index == ar->size)
 1000850:	e1520005 	cmp	r2, r5
 1000854:	0a00003a 	beq	1000944 <array_add_at+0x108>
    if ((ar->size == 0 && index != 0) || index > (ar->size - 1))
 1000858:	e2953000 	adds	r3, r5, #0
 100085c:	13a03001 	movne	r3, #1
 1000860:	e3520000 	cmp	r2, #0
 1000864:	13a03000 	movne	r3, #0
 1000868:	e3530000 	cmp	r3, #0
 100086c:	1a000030 	bne	1000934 <array_add_at+0xf8>
 1000870:	e2423001 	sub	r3, r2, #1
 1000874:	e1530005 	cmp	r3, r5
 1000878:	3a00002d 	bcc	1000934 <array_add_at+0xf8>
    if (ar->size >= ar->capacity) {
 100087c:	e5903004 	ldr	r3, [r0, #4]
 1000880:	e1520003 	cmp	r2, r3
 1000884:	3a00001a 	bcc	10008f4 <array_add_at+0xb8>
    if (ar->capacity == CC_MAX_ELEMENTS)
 1000888:	e3730002 	cmn	r3, #2
 100088c:	0a000035 	beq	1000968 <array_add_at+0x12c>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1000890:	ee073a90 	vmov	s15, r3
 1000894:	ed907a02 	vldr	s14, [r0, #8]
 1000898:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 100089c:	e5902010 	ldr	r2, [r0, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10008a0:	ee677a87 	vmul.f32	s15, s15, s14
 10008a4:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10008a8:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10008ac:	e1530000 	cmp	r3, r0
 10008b0:	31a03000 	movcc	r3, r0
 10008b4:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10008b8:	e1a00100 	lsl	r0, r0, #2
 10008bc:	e5843004 	str	r3, [r4, #4]
 10008c0:	e12fff32 	blx	r2
    if (!new_buff)
 10008c4:	e2507000 	subs	r7, r0, #0
 10008c8:	0a00001b 	beq	100093c <array_add_at+0x100>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10008cc:	e5942000 	ldr	r2, [r4]
 10008d0:	e594100c 	ldr	r1, [r4, #12]
 10008d4:	e1a02102 	lsl	r2, r2, #2
 10008d8:	eb006c48 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 10008dc:	e5943018 	ldr	r3, [r4, #24]
 10008e0:	e594000c 	ldr	r0, [r4, #12]
 10008e4:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10008e8:	e5942000 	ldr	r2, [r4]
 10008ec:	e584700c 	str	r7, [r4, #12]
        if (status != CC_OK)
 10008f0:	ea000000 	b	10008f8 <array_add_at+0xbc>
 10008f4:	e590700c 	ldr	r7, [r0, #12]
    memmove(&(ar->buffer[index + 1]),
 10008f8:	e2850001 	add	r0, r5, #1
    size_t shift = (ar->size - index) * sizeof(void*);
 10008fc:	e0422005 	sub	r2, r2, r5
    memmove(&(ar->buffer[index + 1]),
 1000900:	e1a00100 	lsl	r0, r0, #2
 1000904:	e1a02102 	lsl	r2, r2, #2
            &(ar->buffer[index]),
 1000908:	e2405004 	sub	r5, r0, #4
    memmove(&(ar->buffer[index + 1]),
 100090c:	e0870000 	add	r0, r7, r0
 1000910:	e0871005 	add	r1, r7, r5
 1000914:	fa006db1 	blx	101bfe0 <memmove>
    ar->size++;
 1000918:	e5943000 	ldr	r3, [r4]
 100091c:	e3a00000 	mov	r0, #0
    ar->buffer[index] = element;
 1000920:	e594200c 	ldr	r2, [r4, #12]
    ar->size++;
 1000924:	e2833001 	add	r3, r3, #1
    ar->buffer[index] = element;
 1000928:	e7826005 	str	r6, [r2, r5]
    ar->size++;
 100092c:	e5843000 	str	r3, [r4]
    return CC_OK;
 1000930:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000934:	e3a00008 	mov	r0, #8
 1000938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 100093c:	e3a00001 	mov	r0, #1
 1000940:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->size >= ar->capacity) {
 1000944:	e5903004 	ldr	r3, [r0, #4]
 1000948:	e1550003 	cmp	r5, r3
 100094c:	2a000007 	bcs	1000970 <array_add_at+0x134>
 1000950:	e590700c 	ldr	r7, [r0, #12]
    ar->size++;
 1000954:	e2853001 	add	r3, r5, #1
    ar->buffer[ar->size] = element;
 1000958:	e7876105 	str	r6, [r7, r5, lsl #2]
    return CC_OK;
 100095c:	e3a00000 	mov	r0, #0
    ar->size++;
 1000960:	e5843000 	str	r3, [r4]
    return CC_OK;
 1000964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1000968:	e3a00004 	mov	r0, #4
}
 100096c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 1000970:	e3730002 	cmn	r3, #2
 1000974:	0afffffb 	beq	1000968 <array_add_at+0x12c>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1000978:	ee073a90 	vmov	s15, r3
 100097c:	ed907a02 	vldr	s14, [r0, #8]
 1000980:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1000984:	e5901010 	ldr	r1, [r0, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1000988:	ee677a87 	vmul.f32	s15, s15, s14
 100098c:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1000990:	ee172a90 	vmov	r2, s15
        ar->capacity = CC_MAX_ELEMENTS;
 1000994:	e1530002 	cmp	r3, r2
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1000998:	e1a00102 	lsl	r0, r2, #2
        ar->capacity = CC_MAX_ELEMENTS;
 100099c:	23e02001 	mvncs	r2, #1
 10009a0:	e5842004 	str	r2, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10009a4:	e12fff31 	blx	r1
    if (!new_buff)
 10009a8:	e2507000 	subs	r7, r0, #0
 10009ac:	0affffe2 	beq	100093c <array_add_at+0x100>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10009b0:	e5942000 	ldr	r2, [r4]
 10009b4:	e594100c 	ldr	r1, [r4, #12]
 10009b8:	e1a02102 	lsl	r2, r2, #2
 10009bc:	eb006c0f 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 10009c0:	e5943018 	ldr	r3, [r4, #24]
 10009c4:	e594000c 	ldr	r0, [r4, #12]
 10009c8:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10009cc:	e5945000 	ldr	r5, [r4]
 10009d0:	e584700c 	str	r7, [r4, #12]
        if (status != CC_OK)
 10009d4:	eaffffde 	b	1000954 <array_add_at+0x118>

010009d8 <array_replace_at>:
    if (index >= ar->size)
 10009d8:	e590c000 	ldr	ip, [r0]
 10009dc:	e15c0002 	cmp	ip, r2
 10009e0:	9a00000b 	bls	1000a14 <array_replace_at+0x3c>
{
 10009e4:	e92d4010 	push	{r4, lr}
    if (out)
 10009e8:	e3530000 	cmp	r3, #0
 10009ec:	e590400c 	ldr	r4, [r0, #12]
 10009f0:	e1a0e102 	lsl	lr, r2, #2
        *out = ar->buffer[index];
 10009f4:	17942102 	ldrne	r2, [r4, r2, lsl #2]
 10009f8:	e084c00e 	add	ip, r4, lr
 10009fc:	15832000 	strne	r2, [r3]
 1000a00:	1590c00c 	ldrne	ip, [r0, #12]
    return CC_OK;
 1000a04:	e3a00000 	mov	r0, #0
 1000a08:	108cc00e 	addne	ip, ip, lr
    ar->buffer[index] = element;
 1000a0c:	e58c1000 	str	r1, [ip]
}
 1000a10:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000a14:	e3a00008 	mov	r0, #8
}
 1000a18:	e12fff1e 	bx	lr

01000a1c <array_swap_at>:
    if(index1 >= ar->size || index2 >= ar->size)
 1000a1c:	e5903000 	ldr	r3, [r0]
 1000a20:	e1530001 	cmp	r3, r1
 1000a24:	81530002 	cmphi	r3, r2
 1000a28:	93a03001 	movls	r3, #1
 1000a2c:	83a03000 	movhi	r3, #0
 1000a30:	9a000008 	bls	1000a58 <array_swap_at+0x3c>
    tmp = ar->buffer[index1];
 1000a34:	e590c00c 	ldr	ip, [r0, #12]
{
 1000a38:	e92d4010 	push	{r4, lr}
    ar->buffer[index1] = ar->buffer[index2];
 1000a3c:	e79c4102 	ldr	r4, [ip, r2, lsl #2]
    tmp = ar->buffer[index1];
 1000a40:	e79ce101 	ldr	lr, [ip, r1, lsl #2]
    ar->buffer[index1] = ar->buffer[index2];
 1000a44:	e78c4101 	str	r4, [ip, r1, lsl #2]
    ar->buffer[index2] = tmp;
 1000a48:	e590100c 	ldr	r1, [r0, #12]
}
 1000a4c:	e1a00003 	mov	r0, r3
    ar->buffer[index2] = tmp;
 1000a50:	e781e102 	str	lr, [r1, r2, lsl #2]
}
 1000a54:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000a58:	e3a03008 	mov	r3, #8
}
 1000a5c:	e1a00003 	mov	r0, r3
 1000a60:	e12fff1e 	bx	lr

01000a64 <array_remove>:
{
 1000a64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < ar->size; i++) {
 1000a68:	e5905000 	ldr	r5, [r0]
 1000a6c:	e3550000 	cmp	r5, #0
 1000a70:	0a00000e 	beq	1000ab0 <array_remove+0x4c>
        if (ar->buffer[i] == element) {
 1000a74:	e590800c 	ldr	r8, [r0, #12]
 1000a78:	e5983000 	ldr	r3, [r8]
 1000a7c:	e1510003 	cmp	r1, r3
 1000a80:	1288c004 	addne	ip, r8, #4
    for (i = 0; i < ar->size; i++) {
 1000a84:	13a03000 	movne	r3, #0
        if (ar->buffer[i] == element) {
 1000a88:	1a000003 	bne	1000a9c <array_remove+0x38>
 1000a8c:	ea000009 	b	1000ab8 <array_remove+0x54>
 1000a90:	e59e4000 	ldr	r4, [lr]
 1000a94:	e1510004 	cmp	r1, r4
 1000a98:	0a000008 	beq	1000ac0 <array_remove+0x5c>
    for (i = 0; i < ar->size; i++) {
 1000a9c:	e2833001 	add	r3, r3, #1
        if (ar->buffer[i] == element) {
 1000aa0:	e1a0e00c 	mov	lr, ip
    for (i = 0; i < ar->size; i++) {
 1000aa4:	e1550003 	cmp	r5, r3
 1000aa8:	e28cc004 	add	ip, ip, #4
 1000aac:	1afffff7 	bne	1000a90 <array_remove+0x2c>
        return CC_ERR_VALUE_NOT_FOUND;
 1000ab0:	e3a00007 	mov	r0, #7
 1000ab4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (ar->buffer[i] == element) {
 1000ab8:	e1a0e008 	mov	lr, r8
    for (i = 0; i < ar->size; i++) {
 1000abc:	e3a03000 	mov	r3, #0
 1000ac0:	e1a06002 	mov	r6, r2
    if (index != ar->size - 1) {
 1000ac4:	e2452001 	sub	r2, r5, #1
 1000ac8:	e1520003 	cmp	r2, r3
 1000acc:	e1a04001 	mov	r4, r1
 1000ad0:	e1a07000 	mov	r7, r0
 1000ad4:	0a000008 	beq	1000afc <array_remove+0x98>
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1000ad8:	e2455107 	sub	r5, r5, #-1073741823	; 0xc0000001
        memmove(&(ar->buffer[index]),
 1000adc:	e2831001 	add	r1, r3, #1
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1000ae0:	e0453003 	sub	r3, r5, r3
        memmove(&(ar->buffer[index]),
 1000ae4:	e0881101 	add	r1, r8, r1, lsl #2
 1000ae8:	e1a02103 	lsl	r2, r3, #2
 1000aec:	e1a0000e 	mov	r0, lr
 1000af0:	fa006d3a 	blx	101bfe0 <memmove>
 1000af4:	e5973000 	ldr	r3, [r7]
 1000af8:	e2433001 	sub	r3, r3, #1
    if (out)
 1000afc:	e3560000 	cmp	r6, #0
    ar->size--;
 1000b00:	e5873000 	str	r3, [r7]
    return CC_OK;
 1000b04:	e3a00000 	mov	r0, #0
        *out = element;
 1000b08:	15864000 	strne	r4, [r6]
 1000b0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01000b10 <array_remove_at>:
    if (index >= ar->size)
 1000b10:	e5903000 	ldr	r3, [r0]
 1000b14:	e1530001 	cmp	r3, r1
 1000b18:	9a000017 	bls	1000b7c <array_remove_at+0x6c>
    if (out)
 1000b1c:	e3520000 	cmp	r2, #0
{
 1000b20:	e92d4010 	push	{r4, lr}
 1000b24:	e1a04000 	mov	r4, r0
        *out = ar->buffer[index];
 1000b28:	1590000c 	ldrne	r0, [r0, #12]
 1000b2c:	17900101 	ldrne	r0, [r0, r1, lsl #2]
 1000b30:	15820000 	strne	r0, [r2]
    if (index != ar->size - 1) {
 1000b34:	e2432001 	sub	r2, r3, #1
 1000b38:	e1520001 	cmp	r2, r1
 1000b3c:	1a000002 	bne	1000b4c <array_remove_at+0x3c>
    ar->size--;
 1000b40:	e5841000 	str	r1, [r4]
    return CC_OK;
 1000b44:	e3a00000 	mov	r0, #0
}
 1000b48:	e8bd8010 	pop	{r4, pc}
        memmove(&(ar->buffer[index]),
 1000b4c:	e1a00101 	lsl	r0, r1, #2
 1000b50:	e594c00c 	ldr	ip, [r4, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1000b54:	e0431001 	sub	r1, r3, r1
 1000b58:	e2412107 	sub	r2, r1, #-1073741823	; 0xc0000001
        memmove(&(ar->buffer[index]),
 1000b5c:	e2801004 	add	r1, r0, #4
 1000b60:	e08c1001 	add	r1, ip, r1
 1000b64:	e1a02102 	lsl	r2, r2, #2
 1000b68:	e08c0000 	add	r0, ip, r0
 1000b6c:	fa006d1b 	blx	101bfe0 <memmove>
 1000b70:	e5941000 	ldr	r1, [r4]
 1000b74:	e2411001 	sub	r1, r1, #1
 1000b78:	eafffff0 	b	1000b40 <array_remove_at+0x30>
        return CC_ERR_OUT_OF_RANGE;
 1000b7c:	e3a00008 	mov	r0, #8
}
 1000b80:	e12fff1e 	bx	lr

01000b84 <array_remove_last>:
    return array_remove_at(ar, ar->size - 1, out);
 1000b84:	e5903000 	ldr	r3, [r0]
 1000b88:	e3e02000 	mvn	r2, #0
 1000b8c:	e0933002 	adds	r3, r3, r2
 1000b90:	2a000002 	bcs	1000ba0 <array_remove_last+0x1c>
        return CC_ERR_OUT_OF_RANGE;
 1000b94:	e3a02008 	mov	r2, #8
}
 1000b98:	e1a00002 	mov	r0, r2
 1000b9c:	e12fff1e 	bx	lr
    if (out)
 1000ba0:	e3510000 	cmp	r1, #0
        *out = ar->buffer[index];
 1000ba4:	1590200c 	ldrne	r2, [r0, #12]
 1000ba8:	17922103 	ldrne	r2, [r2, r3, lsl #2]
 1000bac:	15812000 	strne	r2, [r1]
    return CC_OK;
 1000bb0:	e3a02000 	mov	r2, #0
    ar->size--;
 1000bb4:	e5803000 	str	r3, [r0]
    return CC_OK;
 1000bb8:	eafffff6 	b	1000b98 <array_remove_last+0x14>

01000bbc <array_remove_all>:
    ar->size = 0;
 1000bbc:	e3a03000 	mov	r3, #0
 1000bc0:	e5803000 	str	r3, [r0]
}
 1000bc4:	e12fff1e 	bx	lr

01000bc8 <array_remove_all_free>:
    for (i = 0; i < ar->size; i++)
 1000bc8:	e5903000 	ldr	r3, [r0]
{
 1000bcc:	e92d4070 	push	{r4, r5, r6, lr}
 1000bd0:	e1a05000 	mov	r5, r0
    for (i = 0; i < ar->size; i++)
 1000bd4:	e3530000 	cmp	r3, #0
 1000bd8:	0a000007 	beq	1000bfc <array_remove_all_free+0x34>
 1000bdc:	e3a04000 	mov	r4, #0
        free(ar->buffer[i]);
 1000be0:	e595300c 	ldr	r3, [r5, #12]
 1000be4:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++)
 1000be8:	e2844001 	add	r4, r4, #1
        free(ar->buffer[i]);
 1000bec:	fa0068f5 	blx	101afc8 <free>
    for (i = 0; i < ar->size; i++)
 1000bf0:	e5953000 	ldr	r3, [r5]
 1000bf4:	e1530004 	cmp	r3, r4
 1000bf8:	8afffff8 	bhi	1000be0 <array_remove_all_free+0x18>
    ar->size = 0;
 1000bfc:	e3a03000 	mov	r3, #0
 1000c00:	e5853000 	str	r3, [r5]
}
 1000c04:	e8bd8070 	pop	{r4, r5, r6, pc}

01000c08 <array_get_at>:
    if (index >= ar->size)
 1000c08:	e5903000 	ldr	r3, [r0]
 1000c0c:	e1530001 	cmp	r3, r1
    *out = ar->buffer[index];
 1000c10:	8590300c 	ldrhi	r3, [r0, #12]
    return CC_OK;
 1000c14:	83a00000 	movhi	r0, #0
        return CC_ERR_OUT_OF_RANGE;
 1000c18:	93a00008 	movls	r0, #8
    *out = ar->buffer[index];
 1000c1c:	87933101 	ldrhi	r3, [r3, r1, lsl #2]
 1000c20:	85823000 	strhi	r3, [r2]
}
 1000c24:	e12fff1e 	bx	lr

01000c28 <array_get_last>:
    if (ar->size == 0)
 1000c28:	e5903000 	ldr	r3, [r0]
 1000c2c:	e3530000 	cmp	r3, #0
    *out = ar->buffer[index];
 1000c30:	1590200c 	ldrne	r2, [r0, #12]
 1000c34:	12433001 	subne	r3, r3, #1
    return array_get_at(ar, ar->size - 1, out);
 1000c38:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1000c3c:	03a00007 	moveq	r0, #7
    *out = ar->buffer[index];
 1000c40:	17923103 	ldrne	r3, [r2, r3, lsl #2]
 1000c44:	15813000 	strne	r3, [r1]
}
 1000c48:	e12fff1e 	bx	lr

01000c4c <array_get_buffer>:
}
 1000c4c:	e590000c 	ldr	r0, [r0, #12]
 1000c50:	e12fff1e 	bx	lr

01000c54 <array_index_of>:
{
 1000c54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    for (i = 0; i < ar->size; i++) {
 1000c58:	e590e000 	ldr	lr, [r0]
 1000c5c:	e35e0000 	cmp	lr, #0
 1000c60:	0a00000b 	beq	1000c94 <array_index_of+0x40>
        if (ar->buffer[i] == element) {
 1000c64:	e590000c 	ldr	r0, [r0, #12]
 1000c68:	e5903000 	ldr	r3, [r0]
 1000c6c:	e1510003 	cmp	r1, r3
    for (i = 0; i < ar->size; i++) {
 1000c70:	13a03000 	movne	r3, #0
        if (ar->buffer[i] == element) {
 1000c74:	1a000003 	bne	1000c88 <array_index_of+0x34>
 1000c78:	ea000007 	b	1000c9c <array_index_of+0x48>
 1000c7c:	e5b0c004 	ldr	ip, [r0, #4]!
 1000c80:	e15c0001 	cmp	ip, r1
 1000c84:	0a000005 	beq	1000ca0 <array_index_of+0x4c>
    for (i = 0; i < ar->size; i++) {
 1000c88:	e2833001 	add	r3, r3, #1
 1000c8c:	e153000e 	cmp	r3, lr
 1000c90:	1afffff9 	bne	1000c7c <array_index_of+0x28>
    return CC_ERR_OUT_OF_RANGE;
 1000c94:	e3a00008 	mov	r0, #8
}
 1000c98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    for (i = 0; i < ar->size; i++) {
 1000c9c:	e3a03000 	mov	r3, #0
            *index = i;
 1000ca0:	e5823000 	str	r3, [r2]
            return CC_OK;
 1000ca4:	e3a00000 	mov	r0, #0
 1000ca8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01000cac <array_subarray>:
    if (b > e || e >= ar->size)
 1000cac:	e1510002 	cmp	r1, r2
 1000cb0:	8a000025 	bhi	1000d4c <array_subarray+0xa0>
 1000cb4:	e590c000 	ldr	ip, [r0]
 1000cb8:	e15c0002 	cmp	ip, r2
 1000cbc:	9a000022 	bls	1000d4c <array_subarray+0xa0>
{
 1000cc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1000cc4:	e1a07003 	mov	r7, r3
 1000cc8:	e1a06000 	mov	r6, r0
    Array *sub_ar = ar->mem_calloc(1, sizeof(Array));
 1000ccc:	e5903014 	ldr	r3, [r0, #20]
 1000cd0:	e1a08001 	mov	r8, r1
 1000cd4:	e3a00001 	mov	r0, #1
 1000cd8:	e3a0101c 	mov	r1, #28
 1000cdc:	e1a05002 	mov	r5, r2
 1000ce0:	e12fff33 	blx	r3
    if (!sub_ar)
 1000ce4:	e2504000 	subs	r4, r0, #0
 1000ce8:	0a00001e 	beq	1000d68 <array_subarray+0xbc>
    if (!(sub_ar->buffer = ar->mem_alloc(ar->capacity * sizeof(void*)))) {
 1000cec:	e5960004 	ldr	r0, [r6, #4]
 1000cf0:	e5963010 	ldr	r3, [r6, #16]
 1000cf4:	e1a00100 	lsl	r0, r0, #2
 1000cf8:	e12fff33 	blx	r3
 1000cfc:	e3500000 	cmp	r0, #0
 1000d00:	e584000c 	str	r0, [r4, #12]
 1000d04:	0a000012 	beq	1000d54 <array_subarray+0xa8>
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d08:	e5961014 	ldr	r1, [r6, #20]
    sub_ar->size       = e - b + 1;
 1000d0c:	e2852001 	add	r2, r5, #1
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d10:	e596e010 	ldr	lr, [r6, #16]
    sub_ar->size       = e - b + 1;
 1000d14:	e042c008 	sub	ip, r2, r8
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d18:	e5963018 	ldr	r3, [r6, #24]
    memcpy(sub_ar->buffer,
 1000d1c:	e1a0210c 	lsl	r2, ip, #2
    sub_ar->mem_alloc  = ar->mem_alloc;
 1000d20:	e5841014 	str	r1, [r4, #20]
 1000d24:	e584e010 	str	lr, [r4, #16]
 1000d28:	e5843018 	str	r3, [r4, #24]
           &(ar->buffer[b]),
 1000d2c:	e596100c 	ldr	r1, [r6, #12]
    sub_ar->size       = e - b + 1;
 1000d30:	e584c000 	str	ip, [r4]
    sub_ar->capacity   = sub_ar->size;
 1000d34:	e584c004 	str	ip, [r4, #4]
    memcpy(sub_ar->buffer,
 1000d38:	e0811108 	add	r1, r1, r8, lsl #2
 1000d3c:	eb006b2f 	bl	101ba00 <memcpy>
    *out = sub_ar;
 1000d40:	e5874000 	str	r4, [r7]
    return CC_OK;
 1000d44:	e3a00000 	mov	r0, #0
 1000d48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_INVALID_RANGE;
 1000d4c:	e3a00003 	mov	r0, #3
}
 1000d50:	e12fff1e 	bx	lr
        ar->mem_free(sub_ar);
 1000d54:	e1a00004 	mov	r0, r4
 1000d58:	e5963018 	ldr	r3, [r6, #24]
 1000d5c:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1000d60:	e3a00001 	mov	r0, #1
 1000d64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1000d68:	e3a00001 	mov	r0, #1
}
 1000d6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01000d70 <array_copy_shallow>:
{
 1000d70:	e92d4070 	push	{r4, r5, r6, lr}
 1000d74:	e1a04000 	mov	r4, r0
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000d78:	e5943010 	ldr	r3, [r4, #16]
 1000d7c:	e3a0001c 	mov	r0, #28
{
 1000d80:	e1a06001 	mov	r6, r1
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000d84:	e12fff33 	blx	r3
    if (!copy)
 1000d88:	e2505000 	subs	r5, r0, #0
 1000d8c:	0a00001d 	beq	1000e08 <array_copy_shallow+0x98>
    if (!(copy->buffer = ar->mem_calloc(ar->capacity, sizeof(void*)))) {
 1000d90:	e5943014 	ldr	r3, [r4, #20]
 1000d94:	e3a01004 	mov	r1, #4
 1000d98:	e5940004 	ldr	r0, [r4, #4]
 1000d9c:	e12fff33 	blx	r3
 1000da0:	e3500000 	cmp	r0, #0
 1000da4:	e585000c 	str	r0, [r5, #12]
 1000da8:	0a000011 	beq	1000df4 <array_copy_shallow+0x84>
    copy->exp_factor = ar->exp_factor;
 1000dac:	e5941008 	ldr	r1, [r4, #8]
    copy->capacity   = ar->capacity;
 1000db0:	e5943004 	ldr	r3, [r4, #4]
    copy->size       = ar->size;
 1000db4:	e5942000 	ldr	r2, [r4]
    copy->mem_alloc  = ar->mem_alloc;
 1000db8:	e594c010 	ldr	ip, [r4, #16]
    copy->exp_factor = ar->exp_factor;
 1000dbc:	e5851008 	str	r1, [r5, #8]
    copy->mem_calloc = ar->mem_calloc;
 1000dc0:	e5941014 	ldr	r1, [r4, #20]
    copy->capacity   = ar->capacity;
 1000dc4:	e5853004 	str	r3, [r5, #4]
    copy->mem_free   = ar->mem_free;
 1000dc8:	e5943018 	ldr	r3, [r4, #24]
    copy->size       = ar->size;
 1000dcc:	e5852000 	str	r2, [r5]
    memcpy(copy->buffer,
 1000dd0:	e1a02102 	lsl	r2, r2, #2
    copy->mem_calloc = ar->mem_calloc;
 1000dd4:	e5851014 	str	r1, [r5, #20]
    copy->mem_alloc  = ar->mem_alloc;
 1000dd8:	e585c010 	str	ip, [r5, #16]
    copy->mem_free   = ar->mem_free;
 1000ddc:	e5853018 	str	r3, [r5, #24]
    memcpy(copy->buffer,
 1000de0:	e594100c 	ldr	r1, [r4, #12]
 1000de4:	eb006b05 	bl	101ba00 <memcpy>
    *out = copy;
 1000de8:	e5865000 	str	r5, [r6]
    return CC_OK;
 1000dec:	e3a00000 	mov	r0, #0
 1000df0:	e8bd8070 	pop	{r4, r5, r6, pc}
        ar->mem_free(copy);
 1000df4:	e1a00005 	mov	r0, r5
 1000df8:	e5943018 	ldr	r3, [r4, #24]
 1000dfc:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1000e00:	e3a00001 	mov	r0, #1
 1000e04:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1000e08:	e3a00001 	mov	r0, #1
}
 1000e0c:	e8bd8070 	pop	{r4, r5, r6, pc}

01000e10 <array_copy_deep>:
{
 1000e10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1000e14:	e1a06000 	mov	r6, r0
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000e18:	e5963010 	ldr	r3, [r6, #16]
 1000e1c:	e3a0001c 	mov	r0, #28
{
 1000e20:	e1a08001 	mov	r8, r1
 1000e24:	e1a09002 	mov	r9, r2
    Array *copy = ar->mem_alloc(sizeof(Array));
 1000e28:	e12fff33 	blx	r3
    if (!copy)
 1000e2c:	e2505000 	subs	r5, r0, #0
 1000e30:	0a000022 	beq	1000ec0 <array_copy_deep+0xb0>
    if (!(copy->buffer = ar->mem_calloc(ar->capacity, sizeof(void*)))) {
 1000e34:	e5963014 	ldr	r3, [r6, #20]
 1000e38:	e3a01004 	mov	r1, #4
 1000e3c:	e5960004 	ldr	r0, [r6, #4]
 1000e40:	e12fff33 	blx	r3
 1000e44:	e3500000 	cmp	r0, #0
 1000e48:	e1a07000 	mov	r7, r0
 1000e4c:	e585000c 	str	r0, [r5, #12]
 1000e50:	0a00001c 	beq	1000ec8 <array_copy_deep+0xb8>
    copy->size       = ar->size;
 1000e54:	e5963000 	ldr	r3, [r6]
    copy->exp_factor = ar->exp_factor;
 1000e58:	e596c008 	ldr	ip, [r6, #8]
    copy->capacity   = ar->capacity;
 1000e5c:	e5960004 	ldr	r0, [r6, #4]
    copy->mem_alloc  = ar->mem_alloc;
 1000e60:	e5961010 	ldr	r1, [r6, #16]
    for (i = 0; i < copy->size; i++)
 1000e64:	e3530000 	cmp	r3, #0
    copy->mem_calloc = ar->mem_calloc;
 1000e68:	e5962014 	ldr	r2, [r6, #20]
    copy->size       = ar->size;
 1000e6c:	e5853000 	str	r3, [r5]
    copy->mem_free   = ar->mem_free;
 1000e70:	e5963018 	ldr	r3, [r6, #24]
    copy->exp_factor = ar->exp_factor;
 1000e74:	e585c008 	str	ip, [r5, #8]
    copy->capacity   = ar->capacity;
 1000e78:	e5850004 	str	r0, [r5, #4]
    copy->mem_alloc  = ar->mem_alloc;
 1000e7c:	e5851010 	str	r1, [r5, #16]
    copy->mem_free   = ar->mem_free;
 1000e80:	e1c521f4 	strd	r2, [r5, #20]
    for (i = 0; i < copy->size; i++)
 1000e84:	0a00000a 	beq	1000eb4 <array_copy_deep+0xa4>
 1000e88:	e3a04000 	mov	r4, #0
 1000e8c:	ea000000 	b	1000e94 <array_copy_deep+0x84>
 1000e90:	e595700c 	ldr	r7, [r5, #12]
        copy->buffer[i] = cp(ar->buffer[i]);
 1000e94:	e596300c 	ldr	r3, [r6, #12]
 1000e98:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 1000e9c:	e12fff38 	blx	r8
    for (i = 0; i < copy->size; i++)
 1000ea0:	e5953000 	ldr	r3, [r5]
        copy->buffer[i] = cp(ar->buffer[i]);
 1000ea4:	e7870104 	str	r0, [r7, r4, lsl #2]
    for (i = 0; i < copy->size; i++)
 1000ea8:	e2844001 	add	r4, r4, #1
 1000eac:	e1530004 	cmp	r3, r4
 1000eb0:	8afffff6 	bhi	1000e90 <array_copy_deep+0x80>
    *out = copy;
 1000eb4:	e5895000 	str	r5, [r9]
    return CC_OK;
 1000eb8:	e3a00000 	mov	r0, #0
 1000ebc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1000ec0:	e3a00001 	mov	r0, #1
}
 1000ec4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        ar->mem_free(copy);
 1000ec8:	e1a00005 	mov	r0, r5
 1000ecc:	e5963018 	ldr	r3, [r6, #24]
 1000ed0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1000ed4:	e3a00001 	mov	r0, #1
 1000ed8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01000edc <array_filter_mut>:
{
 1000edc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (ar->size == 0)
 1000ee0:	e5904000 	ldr	r4, [r0]
 1000ee4:	e3540000 	cmp	r4, #0
 1000ee8:	0a00002d 	beq	1000fa4 <array_filter_mut+0xc8>
    size_t keep = 0;
 1000eec:	e3a07000 	mov	r7, #0
 1000ef0:	e1a08001 	mov	r8, r1
 1000ef4:	e1a06000 	mov	r6, r0
    for (size_t i = ar->size - 1; i != ((size_t) - 1); i--) {
 1000ef8:	e2444001 	sub	r4, r4, #1
    size_t rm   = 0;
 1000efc:	e1a05007 	mov	r5, r7
        if (!pred(ar->buffer[i])) {
 1000f00:	e596300c 	ldr	r3, [r6, #12]
 1000f04:	e1a09104 	lsl	r9, r4, #2
 1000f08:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 1000f0c:	e12fff38 	blx	r8
 1000f10:	e3500000 	cmp	r0, #0
            rm++;
 1000f14:	02855001 	addeq	r5, r5, #1
        if (!pred(ar->buffer[i])) {
 1000f18:	0a000008 	beq	1000f40 <array_filter_mut+0x64>
        if (rm > 0) {
 1000f1c:	e3550000 	cmp	r5, #0
 1000f20:	0a000004 	beq	1000f38 <array_filter_mut+0x5c>
            if (keep > 0) {
 1000f24:	e3570000 	cmp	r7, #0
 1000f28:	1a00000a 	bne	1000f58 <array_filter_mut+0x7c>
            ar->size -= rm;
 1000f2c:	e5963000 	ldr	r3, [r6]
 1000f30:	e0435005 	sub	r5, r3, r5
 1000f34:	e5865000 	str	r5, [r6]
        keep++;
 1000f38:	e2877001 	add	r7, r7, #1
 1000f3c:	e3a05000 	mov	r5, #0
    for (size_t i = ar->size - 1; i != ((size_t) - 1); i--) {
 1000f40:	e2544001 	subs	r4, r4, #1
 1000f44:	2affffed 	bcs	1000f00 <array_filter_mut+0x24>
    if (rm > 0) {
 1000f48:	e3550000 	cmp	r5, #0
 1000f4c:	1a00000a 	bne	1000f7c <array_filter_mut+0xa0>
    return CC_OK;
 1000f50:	e1a00005 	mov	r0, r5
}
 1000f54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                memmove(&(ar->buffer[i + 1]),
 1000f58:	e596100c 	ldr	r1, [r6, #12]
                        &(ar->buffer[i + 1 + rm]),
 1000f5c:	e0853004 	add	r3, r5, r4
                memmove(&(ar->buffer[i + 1]),
 1000f60:	e2890004 	add	r0, r9, #4
                        &(ar->buffer[i + 1 + rm]),
 1000f64:	e2833001 	add	r3, r3, #1
                memmove(&(ar->buffer[i + 1]),
 1000f68:	e1a02107 	lsl	r2, r7, #2
 1000f6c:	e0810000 	add	r0, r1, r0
 1000f70:	e0811103 	add	r1, r1, r3, lsl #2
 1000f74:	fa006c19 	blx	101bfe0 <memmove>
 1000f78:	eaffffeb 	b	1000f2c <array_filter_mut+0x50>
        memmove(&(ar->buffer[0]),
 1000f7c:	e596100c 	ldr	r1, [r6, #12]
 1000f80:	e1a02107 	lsl	r2, r7, #2
 1000f84:	e1a00001 	mov	r0, r1
 1000f88:	e0811105 	add	r1, r1, r5, lsl #2
 1000f8c:	fa006c13 	blx	101bfe0 <memmove>
        ar->size -= rm;
 1000f90:	e5963000 	ldr	r3, [r6]
    return CC_OK;
 1000f94:	e3a00000 	mov	r0, #0
        ar->size -= rm;
 1000f98:	e0435005 	sub	r5, r3, r5
 1000f9c:	e5865000 	str	r5, [r6]
 1000fa0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_OUT_OF_RANGE;
 1000fa4:	e3a00008 	mov	r0, #8
 1000fa8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01000fac <array_filter>:
    if (ar->size == 0)
 1000fac:	e5903000 	ldr	r3, [r0]
 1000fb0:	e3530000 	cmp	r3, #0
 1000fb4:	0a000037 	beq	1001098 <array_filter+0xec>
{
 1000fb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1000fbc:	e1a05000 	mov	r5, r0
    Array *filtered = ar->mem_alloc(sizeof(Array));
 1000fc0:	e5903010 	ldr	r3, [r0, #16]
 1000fc4:	e3a0001c 	mov	r0, #28
 1000fc8:	e1a09002 	mov	r9, r2
 1000fcc:	e1a08001 	mov	r8, r1
 1000fd0:	e12fff33 	blx	r3
    if (!filtered)
 1000fd4:	e2506000 	subs	r6, r0, #0
 1000fd8:	0a000030 	beq	10010a0 <array_filter+0xf4>
    if (!(filtered->buffer = ar->mem_calloc(ar->capacity, sizeof(void*)))) {
 1000fdc:	e5953014 	ldr	r3, [r5, #20]
 1000fe0:	e3a01004 	mov	r1, #4
 1000fe4:	e5950004 	ldr	r0, [r5, #4]
 1000fe8:	e12fff33 	blx	r3
 1000fec:	e3500000 	cmp	r0, #0
 1000ff0:	e586000c 	str	r0, [r6, #12]
 1000ff4:	0a00002b 	beq	10010a8 <array_filter+0xfc>
    filtered->size       = 0;
 1000ff8:	e3a04000 	mov	r4, #0
    filtered->exp_factor = ar->exp_factor;
 1000ffc:	e5951008 	ldr	r1, [r5, #8]
    filtered->size       = 0;
 1001000:	e5864000 	str	r4, [r6]
    filtered->capacity   = ar->capacity;
 1001004:	e1c520d0 	ldrd	r2, [r5]
    filtered->exp_factor = ar->exp_factor;
 1001008:	e5861008 	str	r1, [r6, #8]
    filtered->mem_alloc  = ar->mem_alloc;
 100100c:	e5951010 	ldr	r1, [r5, #16]
    for (size_t i = 0; i < ar->size; i++) {
 1001010:	e1520004 	cmp	r2, r4
    filtered->mem_calloc = ar->mem_calloc;
 1001014:	e5952014 	ldr	r2, [r5, #20]
    filtered->capacity   = ar->capacity;
 1001018:	e5863004 	str	r3, [r6, #4]
    filtered->mem_free   = ar->mem_free;
 100101c:	e5953018 	ldr	r3, [r5, #24]
    filtered->mem_alloc  = ar->mem_alloc;
 1001020:	e5861010 	str	r1, [r6, #16]
    filtered->mem_free   = ar->mem_free;
 1001024:	e1c621f4 	strd	r2, [r6, #20]
    for (size_t i = 0; i < ar->size; i++) {
 1001028:	0a000012 	beq	1001078 <array_filter+0xcc>
    size_t f = 0;
 100102c:	e1a07004 	mov	r7, r4
        if (pred(ar->buffer[i])) {
 1001030:	e595300c 	ldr	r3, [r5, #12]
 1001034:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 1001038:	e12fff38 	blx	r8
 100103c:	e3500000 	cmp	r0, #0
            filtered->buffer[f++] = ar->buffer[i];
 1001040:	e2872001 	add	r2, r7, #1
        if (pred(ar->buffer[i])) {
 1001044:	0a00000e 	beq	1001084 <array_filter+0xd8>
            filtered->buffer[f++] = ar->buffer[i];
 1001048:	e595000c 	ldr	r0, [r5, #12]
            filtered->size++;
 100104c:	e5963000 	ldr	r3, [r6]
            filtered->buffer[f++] = ar->buffer[i];
 1001050:	e596100c 	ldr	r1, [r6, #12]
 1001054:	e7900104 	ldr	r0, [r0, r4, lsl #2]
    for (size_t i = 0; i < ar->size; i++) {
 1001058:	e2844001 	add	r4, r4, #1
            filtered->size++;
 100105c:	e2833001 	add	r3, r3, #1
            filtered->buffer[f++] = ar->buffer[i];
 1001060:	e7810107 	str	r0, [r1, r7, lsl #2]
 1001064:	e1a07002 	mov	r7, r2
            filtered->size++;
 1001068:	e5863000 	str	r3, [r6]
    for (size_t i = 0; i < ar->size; i++) {
 100106c:	e5953000 	ldr	r3, [r5]
 1001070:	e1530004 	cmp	r3, r4
 1001074:	8affffed 	bhi	1001030 <array_filter+0x84>
    *out = filtered;
 1001078:	e5896000 	str	r6, [r9]
    return CC_OK;
 100107c:	e3a00000 	mov	r0, #0
 1001080:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for (size_t i = 0; i < ar->size; i++) {
 1001084:	e5953000 	ldr	r3, [r5]
 1001088:	e2844001 	add	r4, r4, #1
 100108c:	e1530004 	cmp	r3, r4
 1001090:	8affffe6 	bhi	1001030 <array_filter+0x84>
 1001094:	eafffff7 	b	1001078 <array_filter+0xcc>
        return CC_ERR_OUT_OF_RANGE;
 1001098:	e3a00008 	mov	r0, #8
}
 100109c:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 10010a0:	e3a00001 	mov	r0, #1
}
 10010a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        ar->mem_free(filtered);
 10010a8:	e1a00006 	mov	r0, r6
 10010ac:	e5953018 	ldr	r3, [r5, #24]
 10010b0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10010b4:	e3a00001 	mov	r0, #1
 10010b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010010bc <array_reverse>:
    if (ar->size == 0)
 10010bc:	e5902000 	ldr	r2, [r0]
 10010c0:	e3520000 	cmp	r2, #0
 10010c4:	012fff1e 	bxeq	lr
{
 10010c8:	e92d4010 	push	{r4, lr}
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 10010cc:	e2424001 	sub	r4, r2, #1
 10010d0:	e1b040a4 	lsrs	r4, r4, #1
 10010d4:	08bd8010 	popeq	{r4, pc}
 10010d8:	e2422107 	sub	r2, r2, #-1073741823	; 0xc0000001
 10010dc:	e3a03000 	mov	r3, #0
 10010e0:	e1a02102 	lsl	r2, r2, #2
        void *tmp = ar->buffer[i];
 10010e4:	e590100c 	ldr	r1, [r0, #12]
        ar->buffer[i] = ar->buffer[j];
 10010e8:	e791e002 	ldr	lr, [r1, r2]
        void *tmp = ar->buffer[i];
 10010ec:	e791c103 	ldr	ip, [r1, r3, lsl #2]
        ar->buffer[i] = ar->buffer[j];
 10010f0:	e781e103 	str	lr, [r1, r3, lsl #2]
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 10010f4:	e2833001 	add	r3, r3, #1
        ar->buffer[j] = tmp;
 10010f8:	e590100c 	ldr	r1, [r0, #12]
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 10010fc:	e1530004 	cmp	r3, r4
        ar->buffer[j] = tmp;
 1001100:	e781c002 	str	ip, [r1, r2]
 1001104:	e2422004 	sub	r2, r2, #4
    for (i = 0, j = ar->size - 1; i < (ar->size - 1) / 2; i++, j--) {
 1001108:	1afffff5 	bne	10010e4 <array_reverse+0x28>
 100110c:	e8bd8010 	pop	{r4, pc}

01001110 <array_trim_capacity>:
{
 1001110:	e92d4070 	push	{r4, r5, r6, lr}
 1001114:	e1a04000 	mov	r4, r0
    if (ar->size == ar->capacity)
 1001118:	e5943004 	ldr	r3, [r4, #4]
 100111c:	e5900000 	ldr	r0, [r0]
 1001120:	e1500003 	cmp	r0, r3
 1001124:	0a000013 	beq	1001178 <array_trim_capacity+0x68>
    void **new_buff = ar->mem_calloc(ar->size, sizeof(void*));
 1001128:	e5943014 	ldr	r3, [r4, #20]
 100112c:	e3a01004 	mov	r1, #4
 1001130:	e12fff33 	blx	r3
    if (!new_buff)
 1001134:	e2505000 	subs	r5, r0, #0
 1001138:	0a000010 	beq	1001180 <array_trim_capacity+0x70>
    size_t size = ar->size < 1 ? 1 : ar->size;
 100113c:	e5942000 	ldr	r2, [r4]
    memcpy(new_buff, ar->buffer, size * sizeof(void*));
 1001140:	e1a00005 	mov	r0, r5
 1001144:	e594100c 	ldr	r1, [r4, #12]
    size_t size = ar->size < 1 ? 1 : ar->size;
 1001148:	e3520000 	cmp	r2, #0
 100114c:	11a02102 	lslne	r2, r2, #2
 1001150:	03a02004 	moveq	r2, #4
    memcpy(new_buff, ar->buffer, size * sizeof(void*));
 1001154:	eb006a29 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 1001158:	e5943018 	ldr	r3, [r4, #24]
 100115c:	e594000c 	ldr	r0, [r4, #12]
 1001160:	e12fff33 	blx	r3
    ar->capacity = ar->size;
 1001164:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1001168:	e3a00000 	mov	r0, #0
    ar->buffer   = new_buff;
 100116c:	e584500c 	str	r5, [r4, #12]
    ar->capacity = ar->size;
 1001170:	e5843004 	str	r3, [r4, #4]
    return CC_OK;
 1001174:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_OK;
 1001178:	e3a00000 	mov	r0, #0
 100117c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1001180:	e3a00001 	mov	r0, #1
}
 1001184:	e8bd8070 	pop	{r4, r5, r6, pc}

01001188 <array_contains>:
{
 1001188:	e1a03000 	mov	r3, r0
    for (i = 0; i < ar->size; i++) {
 100118c:	e5900000 	ldr	r0, [r0]
 1001190:	e3500000 	cmp	r0, #0
 1001194:	012fff1e 	bxeq	lr
 1001198:	e593300c 	ldr	r3, [r3, #12]
 100119c:	e083c100 	add	ip, r3, r0, lsl #2
    size_t o = 0;
 10011a0:	e3a00000 	mov	r0, #0
        if (ar->buffer[i] == element)
 10011a4:	e4932004 	ldr	r2, [r3], #4
 10011a8:	e1510002 	cmp	r1, r2
            o++;
 10011ac:	02800001 	addeq	r0, r0, #1
    for (i = 0; i < ar->size; i++) {
 10011b0:	e153000c 	cmp	r3, ip
 10011b4:	1afffffa 	bne	10011a4 <array_contains+0x1c>
 10011b8:	e12fff1e 	bx	lr

010011bc <array_contains_value>:
{
 10011bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < ar->size; i++) {
 10011c0:	e5906000 	ldr	r6, [r0]
 10011c4:	e3560000 	cmp	r6, #0
 10011c8:	0a00000e 	beq	1001208 <array_contains_value+0x4c>
 10011cc:	e3a04000 	mov	r4, #0
 10011d0:	e1a08002 	mov	r8, r2
 10011d4:	e1a07001 	mov	r7, r1
 10011d8:	e1a05000 	mov	r5, r0
    size_t o = 0;
 10011dc:	e1a06004 	mov	r6, r4
        if (cmp(element, ar->buffer[i]) == 0)
 10011e0:	e595300c 	ldr	r3, [r5, #12]
 10011e4:	e1a00007 	mov	r0, r7
 10011e8:	e7931104 	ldr	r1, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++) {
 10011ec:	e2844001 	add	r4, r4, #1
        if (cmp(element, ar->buffer[i]) == 0)
 10011f0:	e12fff38 	blx	r8
    for (i = 0; i < ar->size; i++) {
 10011f4:	e5953000 	ldr	r3, [r5]
        if (cmp(element, ar->buffer[i]) == 0)
 10011f8:	e3500000 	cmp	r0, #0
            o++;
 10011fc:	02866001 	addeq	r6, r6, #1
    for (i = 0; i < ar->size; i++) {
 1001200:	e1530004 	cmp	r3, r4
 1001204:	8afffff5 	bhi	10011e0 <array_contains_value+0x24>
}
 1001208:	e1a00006 	mov	r0, r6
 100120c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01001210 <array_size>:
}
 1001210:	e5900000 	ldr	r0, [r0]
 1001214:	e12fff1e 	bx	lr

01001218 <array_capacity>:
}
 1001218:	e5900004 	ldr	r0, [r0, #4]
 100121c:	e12fff1e 	bx	lr

01001220 <array_sort>:
{
 1001220:	e1a0c000 	mov	ip, r0
    qsort(ar->buffer, ar->size, sizeof(void*), cmp);
 1001224:	e1a03001 	mov	r3, r1
 1001228:	e590000c 	ldr	r0, [r0, #12]
 100122c:	e3a02004 	mov	r2, #4
 1001230:	e59c1000 	ldr	r1, [ip]
 1001234:	ea0092f5 	b	1025e10 <__qsort_from_arm>

01001238 <array_map>:
 *               element
 */
void array_map(Array *ar, void (*fn) (void *e))
{
    size_t i;
    for (i = 0; i < ar->size; i++)
 1001238:	e5903000 	ldr	r3, [r0]
 100123c:	e3530000 	cmp	r3, #0
 1001240:	012fff1e 	bxeq	lr
{
 1001244:	e92d4070 	push	{r4, r5, r6, lr}
 1001248:	e1a06001 	mov	r6, r1
 100124c:	e1a05000 	mov	r5, r0
    for (i = 0; i < ar->size; i++)
 1001250:	e3a04000 	mov	r4, #0
        fn(ar->buffer[i]);
 1001254:	e595300c 	ldr	r3, [r5, #12]
 1001258:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < ar->size; i++)
 100125c:	e2844001 	add	r4, r4, #1
        fn(ar->buffer[i]);
 1001260:	e12fff36 	blx	r6
    for (i = 0; i < ar->size; i++)
 1001264:	e5953000 	ldr	r3, [r5]
 1001268:	e1530004 	cmp	r3, r4
 100126c:	8afffff8 	bhi	1001254 <array_map+0x1c>
 1001270:	e8bd8070 	pop	{r4, r5, r6, pc}

01001274 <array_reduce>:
 *               element
 * @param[in] result the pointer which will collect the end result
 */
void array_reduce(Array *ar, void (*fn) (void*, void*, void*), void *result)
{
    if (ar->size == 1) {
 1001274:	e5903000 	ldr	r3, [r0]
{
 1001278:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100127c:	e1a07001 	mov	r7, r1
    if (ar->size == 1) {
 1001280:	e3530001 	cmp	r3, #1
 1001284:	0a000013 	beq	10012d8 <array_reduce+0x64>
        fn(ar->buffer[0], NULL, result);
        return;
    }
    if (ar->size > 1)
 1001288:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
        fn(ar->buffer[0], ar->buffer[1], result);
 100128c:	e590300c 	ldr	r3, [r0, #12]
 1001290:	e1a05000 	mov	r5, r0
 1001294:	e1a06002 	mov	r6, r2
 1001298:	e1c300d0 	ldrd	r0, [r3]
 100129c:	e12fff37 	blx	r7

    for (size_t i = 2; i < ar->size; i++)
 10012a0:	e5953000 	ldr	r3, [r5]
 10012a4:	e3530002 	cmp	r3, #2
 10012a8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
 10012ac:	e3a04002 	mov	r4, #2
        fn(result, ar->buffer[i], result);
 10012b0:	e595300c 	ldr	r3, [r5, #12]
 10012b4:	e1a02006 	mov	r2, r6
 10012b8:	e1a00006 	mov	r0, r6
 10012bc:	e7931104 	ldr	r1, [r3, r4, lsl #2]
    for (size_t i = 2; i < ar->size; i++)
 10012c0:	e2844001 	add	r4, r4, #1
        fn(result, ar->buffer[i], result);
 10012c4:	e12fff37 	blx	r7
    for (size_t i = 2; i < ar->size; i++)
 10012c8:	e5953000 	ldr	r3, [r5]
 10012cc:	e1530004 	cmp	r3, r4
 10012d0:	8afffff6 	bhi	10012b0 <array_reduce+0x3c>
 10012d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        fn(ar->buffer[0], NULL, result);
 10012d8:	e590300c 	ldr	r3, [r0, #12]
 10012dc:	e3a01000 	mov	r1, #0
 10012e0:	e5930000 	ldr	r0, [r3]
 10012e4:	e1a03007 	mov	r3, r7
}
 10012e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        fn(ar->buffer[0], NULL, result);
 10012ec:	e12fff13 	bx	r3

010012f0 <array_iter_init>:
 * @param[in] ar the array to iterate over
 */
void array_iter_init(ArrayIter *iter, Array *ar)
{
    iter->ar    = ar;
    iter->index = 0;
 10012f0:	e3a03000 	mov	r3, #0
 10012f4:	e880000a 	stm	r0, {r1, r3}
    iter->last_removed = false;
 10012f8:	e5c03008 	strb	r3, [r0, #8]
}
 10012fc:	e12fff1e 	bx	lr

01001300 <array_iter_next>:
 *
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Array has been reached.
 */
enum cc_stat array_iter_next(ArrayIter *iter, void **out)
{
 1001300:	e1a03000 	mov	r3, r0
    if (iter->index >= iter->ar->size)
 1001304:	e5900000 	ldr	r0, [r0]
 1001308:	e5932004 	ldr	r2, [r3, #4]
 100130c:	e590c000 	ldr	ip, [r0]
 1001310:	e152000c 	cmp	r2, ip
 1001314:	2a000009 	bcs	1001340 <array_iter_next+0x40>
        return CC_ITER_END;

    *out = iter->ar->buffer[iter->index];
 1001318:	e590000c 	ldr	r0, [r0, #12]

    iter->index++;
    iter->last_removed = false;
 100131c:	e3a0c000 	mov	ip, #0
{
 1001320:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    iter->index++;
 1001324:	e282e001 	add	lr, r2, #1
    *out = iter->ar->buffer[iter->index];
 1001328:	e7902102 	ldr	r2, [r0, r2, lsl #2]

    return CC_OK;
 100132c:	e1a0000c 	mov	r0, ip
    *out = iter->ar->buffer[iter->index];
 1001330:	e5812000 	str	r2, [r1]
    iter->index++;
 1001334:	e583e004 	str	lr, [r3, #4]
    iter->last_removed = false;
 1001338:	e5c3c008 	strb	ip, [r3, #8]
}
 100133c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_ITER_END;
 1001340:	e3a00009 	mov	r0, #9
}
 1001344:	e12fff1e 	bx	lr

01001348 <array_iter_remove>:
 */
enum cc_stat array_iter_remove(ArrayIter *iter, void **out)
{
    enum cc_stat status = CC_ERR_VALUE_NOT_FOUND;

    if (!iter->last_removed) {
 1001348:	e5d03008 	ldrb	r3, [r0, #8]
 100134c:	e3530000 	cmp	r3, #0
 1001350:	0a000001 	beq	100135c <array_iter_remove+0x14>
    enum cc_stat status = CC_ERR_VALUE_NOT_FOUND;
 1001354:	e3a00007 	mov	r0, #7
        status = array_remove_at(iter->ar, iter->index - 1, out);
        if (status == CC_OK)
            iter->last_removed = true;
    }
    return status;
}
 1001358:	e12fff1e 	bx	lr
{
 100135c:	e92d4070 	push	{r4, r5, r6, lr}
        status = array_remove_at(iter->ar, iter->index - 1, out);
 1001360:	e8901020 	ldm	r0, {r5, ip}
    if (index >= ar->size)
 1001364:	e5952000 	ldr	r2, [r5]
        status = array_remove_at(iter->ar, iter->index - 1, out);
 1001368:	e24c3001 	sub	r3, ip, #1
    if (index >= ar->size)
 100136c:	e1530002 	cmp	r3, r2
 1001370:	2a000015 	bcs	10013cc <array_iter_remove+0x84>
    if (out)
 1001374:	e3510000 	cmp	r1, #0
        *out = ar->buffer[index];
 1001378:	e1a04000 	mov	r4, r0
 100137c:	1595e00c 	ldrne	lr, [r5, #12]
 1001380:	179ee103 	ldrne	lr, [lr, r3, lsl #2]
 1001384:	1581e000 	strne	lr, [r1]
    if (index != ar->size - 1) {
 1001388:	e15c0002 	cmp	ip, r2
 100138c:	1a000005 	bne	10013a8 <array_iter_remove+0x60>
    ar->size--;
 1001390:	e2422001 	sub	r2, r2, #1
            iter->last_removed = true;
 1001394:	e3a03001 	mov	r3, #1
    ar->size--;
 1001398:	e5852000 	str	r2, [r5]
        status = array_remove_at(iter->ar, iter->index - 1, out);
 100139c:	e3a00000 	mov	r0, #0
            iter->last_removed = true;
 10013a0:	e5c43008 	strb	r3, [r4, #8]
 10013a4:	e8bd8070 	pop	{r4, r5, r6, pc}
        memmove(&(ar->buffer[index]),
 10013a8:	e595000c 	ldr	r0, [r5, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 10013ac:	e2422107 	sub	r2, r2, #-1073741823	; 0xc0000001
 10013b0:	e0422003 	sub	r2, r2, r3
        memmove(&(ar->buffer[index]),
 10013b4:	e1a02102 	lsl	r2, r2, #2
 10013b8:	e080110c 	add	r1, r0, ip, lsl #2
 10013bc:	e0800103 	add	r0, r0, r3, lsl #2
 10013c0:	fa006b06 	blx	101bfe0 <memmove>
 10013c4:	e5952000 	ldr	r2, [r5]
 10013c8:	eafffff0 	b	1001390 <array_iter_remove+0x48>
        return CC_ERR_OUT_OF_RANGE;
 10013cc:	e3a00008 	mov	r0, #8
}
 10013d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010013d4 <array_iter_add>:
 * @return CC_OK if the element was successfully added, CC_ERR_ALLOC if the
 * memory allocation for the new element failed, or CC_ERR_MAX_CAPACITY if
 * the array is already at maximum capacity.
 */
enum cc_stat array_iter_add(ArrayIter *iter, void *element)
{
 10013d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10013d8:	e1a07001 	mov	r7, r1
    return array_add_at(iter->ar, element, iter->index++);
 10013dc:	e1c040d0 	ldrd	r4, [r0]
    if (index == ar->size)
 10013e0:	e5943000 	ldr	r3, [r4]
    return array_add_at(iter->ar, element, iter->index++);
 10013e4:	e2856001 	add	r6, r5, #1
 10013e8:	e5806004 	str	r6, [r0, #4]
    if (index == ar->size)
 10013ec:	e1550003 	cmp	r5, r3
 10013f0:	0a00003a 	beq	10014e0 <array_iter_add+0x10c>
    if ((ar->size == 0 && index != 0) || index > (ar->size - 1))
 10013f4:	e1a02003 	mov	r2, r3
 10013f8:	e2953000 	adds	r3, r5, #0
 10013fc:	13a03001 	movne	r3, #1
 1001400:	e3520000 	cmp	r2, #0
 1001404:	13a03000 	movne	r3, #0
 1001408:	e3530000 	cmp	r3, #0
 100140c:	1a00002f 	bne	10014d0 <array_iter_add+0xfc>
 1001410:	e2423001 	sub	r3, r2, #1
 1001414:	e1550003 	cmp	r5, r3
 1001418:	8a00002c 	bhi	10014d0 <array_iter_add+0xfc>
    if (ar->size >= ar->capacity) {
 100141c:	e5943004 	ldr	r3, [r4, #4]
 1001420:	e1520003 	cmp	r2, r3
 1001424:	3a00001a 	bcc	1001494 <array_iter_add+0xc0>
    if (ar->capacity == CC_MAX_ELEMENTS)
 1001428:	e3730002 	cmn	r3, #2
 100142c:	0a000034 	beq	1001504 <array_iter_add+0x130>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001430:	ee073a90 	vmov	s15, r3
 1001434:	ed947a02 	vldr	s14, [r4, #8]
 1001438:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 100143c:	e5942010 	ldr	r2, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001440:	ee677a87 	vmul.f32	s15, s15, s14
 1001444:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1001448:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 100144c:	e1530000 	cmp	r3, r0
 1001450:	31a03000 	movcc	r3, r0
 1001454:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001458:	e1a00100 	lsl	r0, r0, #2
 100145c:	e5843004 	str	r3, [r4, #4]
 1001460:	e12fff32 	blx	r2
    if (!new_buff)
 1001464:	e2508000 	subs	r8, r0, #0
 1001468:	0a00001a 	beq	10014d8 <array_iter_add+0x104>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 100146c:	e5942000 	ldr	r2, [r4]
 1001470:	e594100c 	ldr	r1, [r4, #12]
 1001474:	e1a02102 	lsl	r2, r2, #2
 1001478:	eb006960 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 100147c:	e5943018 	ldr	r3, [r4, #24]
 1001480:	e594000c 	ldr	r0, [r4, #12]
 1001484:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001488:	e5942000 	ldr	r2, [r4]
 100148c:	e584800c 	str	r8, [r4, #12]
        if (status != CC_OK)
 1001490:	ea000000 	b	1001498 <array_iter_add+0xc4>
 1001494:	e594800c 	ldr	r8, [r4, #12]
    memmove(&(ar->buffer[index + 1]),
 1001498:	e1a00106 	lsl	r0, r6, #2
    size_t shift = (ar->size - index) * sizeof(void*);
 100149c:	e0422005 	sub	r2, r2, r5
    memmove(&(ar->buffer[index + 1]),
 10014a0:	e1a02102 	lsl	r2, r2, #2
            &(ar->buffer[index]),
 10014a4:	e2405004 	sub	r5, r0, #4
    memmove(&(ar->buffer[index + 1]),
 10014a8:	e0881005 	add	r1, r8, r5
 10014ac:	e0880000 	add	r0, r8, r0
 10014b0:	fa006aca 	blx	101bfe0 <memmove>
    ar->size++;
 10014b4:	e5943000 	ldr	r3, [r4]
 10014b8:	e3a00000 	mov	r0, #0
    ar->buffer[index] = element;
 10014bc:	e594200c 	ldr	r2, [r4, #12]
    ar->size++;
 10014c0:	e2833001 	add	r3, r3, #1
    ar->buffer[index] = element;
 10014c4:	e7827005 	str	r7, [r2, r5]
    ar->size++;
 10014c8:	e5843000 	str	r3, [r4]
    return CC_OK;
 10014cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 10014d0:	e3a00008 	mov	r0, #8
 10014d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 10014d8:	e3a00001 	mov	r0, #1
 10014dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->size >= ar->capacity) {
 10014e0:	e5942004 	ldr	r2, [r4, #4]
 10014e4:	e1530002 	cmp	r3, r2
 10014e8:	2a000007 	bcs	100150c <array_iter_add+0x138>
    ar->buffer[ar->size] = element;
 10014ec:	e594100c 	ldr	r1, [r4, #12]
    ar->size++;
 10014f0:	e2832001 	add	r2, r3, #1
    return CC_OK;
 10014f4:	e3a00000 	mov	r0, #0
    ar->buffer[ar->size] = element;
 10014f8:	e7817103 	str	r7, [r1, r3, lsl #2]
    ar->size++;
 10014fc:	e5842000 	str	r2, [r4]
    return CC_OK;
 1001500:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1001504:	e3a00004 	mov	r0, #4
}
 1001508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 100150c:	e3720002 	cmn	r2, #2
 1001510:	0afffffb 	beq	1001504 <array_iter_add+0x130>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001514:	ee072a90 	vmov	s15, r2
 1001518:	ed947a02 	vldr	s14, [r4, #8]
 100151c:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001520:	e5941010 	ldr	r1, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001524:	ee677a87 	vmul.f32	s15, s15, s14
 1001528:	eefc7ae7 	vcvt.u32.f32	s15, s15
 100152c:	ee173a90 	vmov	r3, s15
        ar->capacity = CC_MAX_ELEMENTS;
 1001530:	e1520003 	cmp	r2, r3
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001534:	e1a00103 	lsl	r0, r3, #2
        ar->capacity = CC_MAX_ELEMENTS;
 1001538:	23e03001 	mvncs	r3, #1
 100153c:	e5843004 	str	r3, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001540:	e12fff31 	blx	r1
    if (!new_buff)
 1001544:	e2505000 	subs	r5, r0, #0
 1001548:	0affffe2 	beq	10014d8 <array_iter_add+0x104>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 100154c:	e5942000 	ldr	r2, [r4]
 1001550:	e594100c 	ldr	r1, [r4, #12]
 1001554:	e1a02102 	lsl	r2, r2, #2
 1001558:	eb006928 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 100155c:	e5943018 	ldr	r3, [r4, #24]
 1001560:	e594000c 	ldr	r0, [r4, #12]
 1001564:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001568:	e5943000 	ldr	r3, [r4]
 100156c:	e584500c 	str	r5, [r4, #12]
        if (status != CC_OK)
 1001570:	eaffffdd 	b	10014ec <array_iter_add+0x118>

01001574 <array_iter_replace>:
 * @return CC_OK if the element was replaced successfully, or
 * CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat array_iter_replace(ArrayIter *iter, void *element, void **out)
{
    return array_replace_at(iter->ar, element, iter->index - 1, out);
 1001574:	e590c000 	ldr	ip, [r0]
 1001578:	e5903004 	ldr	r3, [r0, #4]
    if (index >= ar->size)
 100157c:	e59c0000 	ldr	r0, [ip]
    return array_replace_at(iter->ar, element, iter->index - 1, out);
 1001580:	e2433001 	sub	r3, r3, #1
    if (index >= ar->size)
 1001584:	e1530000 	cmp	r3, r0
 1001588:	2a00000b 	bcs	10015bc <array_iter_replace+0x48>
{
 100158c:	e92d4010 	push	{r4, lr}
    if (out)
 1001590:	e3520000 	cmp	r2, #0
 1001594:	e59c400c 	ldr	r4, [ip, #12]
 1001598:	e1a0e103 	lsl	lr, r3, #2
        *out = ar->buffer[index];
 100159c:	17943103 	ldrne	r3, [r4, r3, lsl #2]
 10015a0:	e084000e 	add	r0, r4, lr
 10015a4:	15823000 	strne	r3, [r2]
 10015a8:	159c000c 	ldrne	r0, [ip, #12]
 10015ac:	1080000e 	addne	r0, r0, lr
    ar->buffer[index] = element;
 10015b0:	e5801000 	str	r1, [r0]
    return CC_OK;
 10015b4:	e3a00000 	mov	r0, #0
}
 10015b8:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 10015bc:	e3a00008 	mov	r0, #8
}
 10015c0:	e12fff1e 	bx	lr

010015c4 <array_iter_index>:
 *
 * @return the index.
 */
size_t array_iter_index(ArrayIter *iter)
{
    return iter->index - 1;
 10015c4:	e5900004 	ldr	r0, [r0, #4]
}
 10015c8:	e2400001 	sub	r0, r0, #1
 10015cc:	e12fff1e 	bx	lr

010015d0 <array_zip_iter_init>:
 */
void array_zip_iter_init(ArrayZipIter *iter, Array *ar1, Array *ar2)
{
    iter->ar1 = ar1;
    iter->ar2 = ar2;
    iter->index = 0;
 10015d0:	e3a03000 	mov	r3, #0
 10015d4:	e880000e 	stm	r0, {r1, r2, r3}
    iter->last_removed = false;
 10015d8:	e5c0300c 	strb	r3, [r0, #12]
}
 10015dc:	e12fff1e 	bx	lr

010015e0 <array_zip_iter_next>:
 *
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end of one
 * of the arrays has been reached.
 */
enum cc_stat array_zip_iter_next(ArrayZipIter *iter, void **out1, void **out2)
{
 10015e0:	e1a03000 	mov	r3, r0
    if (iter->index >= iter->ar1->size || iter->index >= iter->ar2->size)
 10015e4:	e5900000 	ldr	r0, [r0]
{
 10015e8:	e92d4030 	push	{r4, r5, lr}
    if (iter->index >= iter->ar1->size || iter->index >= iter->ar2->size)
 10015ec:	e593c008 	ldr	ip, [r3, #8]
 10015f0:	e590e000 	ldr	lr, [r0]
 10015f4:	e15c000e 	cmp	ip, lr
 10015f8:	2a000010 	bcs	1001640 <array_zip_iter_next+0x60>
 10015fc:	e593e004 	ldr	lr, [r3, #4]
 1001600:	e59ee000 	ldr	lr, [lr]
 1001604:	e15c000e 	cmp	ip, lr
 1001608:	2a00000c 	bcs	1001640 <array_zip_iter_next+0x60>
        return CC_ITER_END;

    *out1 = iter->ar1->buffer[iter->index];
 100160c:	e590000c 	ldr	r0, [r0, #12]
    *out2 = iter->ar2->buffer[iter->index];

    iter->index++;
    iter->last_removed = false;
 1001610:	e3a0e000 	mov	lr, #0
    iter->index++;
 1001614:	e28c4001 	add	r4, ip, #1
    *out1 = iter->ar1->buffer[iter->index];
 1001618:	e790510c 	ldr	r5, [r0, ip, lsl #2]

    return CC_OK;
 100161c:	e1a0000e 	mov	r0, lr
    *out1 = iter->ar1->buffer[iter->index];
 1001620:	e5815000 	str	r5, [r1]
    *out2 = iter->ar2->buffer[iter->index];
 1001624:	e5931004 	ldr	r1, [r3, #4]
 1001628:	e591100c 	ldr	r1, [r1, #12]
 100162c:	e791110c 	ldr	r1, [r1, ip, lsl #2]
 1001630:	e5821000 	str	r1, [r2]
    iter->index++;
 1001634:	e5834008 	str	r4, [r3, #8]
    iter->last_removed = false;
 1001638:	e5c3e00c 	strb	lr, [r3, #12]
    return CC_OK;
 100163c:	e8bd8030 	pop	{r4, r5, pc}
        return CC_ITER_END;
 1001640:	e3a00009 	mov	r0, #9
}
 1001644:	e8bd8030 	pop	{r4, r5, pc}

01001648 <array_zip_iter_remove>:
 * @return CC_OK if the element was successfully removed, CC_ERR_OUT_OF_RANGE if the
 * state of the iterator is invalid, or CC_ERR_VALUE_NOT_FOUND if the element was
 * already removed.
 */
enum cc_stat array_zip_iter_remove(ArrayZipIter *iter, void **out1, void **out2)
{
 1001648:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if ((iter->index - 1) >= iter->ar1->size || (iter->index - 1) >= iter->ar2->size)
 100164c:	e5905000 	ldr	r5, [r0]
 1001650:	e590e008 	ldr	lr, [r0, #8]
 1001654:	e595c000 	ldr	ip, [r5]
 1001658:	e24e3001 	sub	r3, lr, #1
 100165c:	e153000c 	cmp	r3, ip
 1001660:	2a000008 	bcs	1001688 <array_zip_iter_remove+0x40>
 1001664:	e5904004 	ldr	r4, [r0, #4]
 1001668:	e5944000 	ldr	r4, [r4]
 100166c:	e1530004 	cmp	r3, r4
 1001670:	2a000004 	bcs	1001688 <array_zip_iter_remove+0x40>
        return CC_ERR_OUT_OF_RANGE;

    if (!iter->last_removed) {
 1001674:	e5d0400c 	ldrb	r4, [r0, #12]
 1001678:	e3540000 	cmp	r4, #0
 100167c:	0a000003 	beq	1001690 <array_zip_iter_remove+0x48>
        array_remove_at(iter->ar1, iter->index - 1, out1);
        array_remove_at(iter->ar2, iter->index - 1, out2);
        iter->last_removed = true;
        return CC_OK;
    }
    return CC_ERR_VALUE_NOT_FOUND;
 1001680:	e3a00007 	mov	r0, #7
}
 1001684:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1001688:	e3a00008 	mov	r0, #8
 100168c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (out)
 1001690:	e3510000 	cmp	r1, #0
        *out = ar->buffer[index];
 1001694:	e1a06002 	mov	r6, r2
 1001698:	1595400c 	ldrne	r4, [r5, #12]
 100169c:	17944103 	ldrne	r4, [r4, r3, lsl #2]
 10016a0:	15814000 	strne	r4, [r1]
    if (index != ar->size - 1) {
 10016a4:	e15e000c 	cmp	lr, ip
 10016a8:	e1a04000 	mov	r4, r0
 10016ac:	01a0200c 	moveq	r2, ip
 10016b0:	0a000009 	beq	10016dc <array_zip_iter_remove+0x94>
        memmove(&(ar->buffer[index]),
 10016b4:	e595000c 	ldr	r0, [r5, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 10016b8:	e24c2107 	sub	r2, ip, #-1073741823	; 0xc0000001
 10016bc:	e0422003 	sub	r2, r2, r3
        memmove(&(ar->buffer[index]),
 10016c0:	e1a02102 	lsl	r2, r2, #2
 10016c4:	e080110e 	add	r1, r0, lr, lsl #2
 10016c8:	e0800103 	add	r0, r0, r3, lsl #2
 10016cc:	fa006a43 	blx	101bfe0 <memmove>
 10016d0:	e594c008 	ldr	ip, [r4, #8]
 10016d4:	e5952000 	ldr	r2, [r5]
 10016d8:	e24c3001 	sub	r3, ip, #1
        array_remove_at(iter->ar2, iter->index - 1, out2);
 10016dc:	e5947004 	ldr	r7, [r4, #4]
    ar->size--;
 10016e0:	e2422001 	sub	r2, r2, #1
 10016e4:	e5852000 	str	r2, [r5]
    if (index >= ar->size)
 10016e8:	e5972000 	ldr	r2, [r7]
 10016ec:	e1520003 	cmp	r2, r3
 10016f0:	9a00000f 	bls	1001734 <array_zip_iter_remove+0xec>
    if (out)
 10016f4:	e3560000 	cmp	r6, #0
        *out = ar->buffer[index];
 10016f8:	1597100c 	ldrne	r1, [r7, #12]
 10016fc:	17911103 	ldrne	r1, [r1, r3, lsl #2]
 1001700:	15861000 	strne	r1, [r6]
    if (index != ar->size - 1) {
 1001704:	e152000c 	cmp	r2, ip
 1001708:	0a000007 	beq	100172c <array_zip_iter_remove+0xe4>
        memmove(&(ar->buffer[index]),
 100170c:	e597000c 	ldr	r0, [r7, #12]
        size_t block_size = (ar->size - 1 - index) * sizeof(void*);
 1001710:	e2422107 	sub	r2, r2, #-1073741823	; 0xc0000001
 1001714:	e0422003 	sub	r2, r2, r3
        memmove(&(ar->buffer[index]),
 1001718:	e1a02102 	lsl	r2, r2, #2
 100171c:	e080110c 	add	r1, r0, ip, lsl #2
 1001720:	e0800103 	add	r0, r0, r3, lsl #2
 1001724:	fa006a2d 	blx	101bfe0 <memmove>
 1001728:	e597c000 	ldr	ip, [r7]
    ar->size--;
 100172c:	e24cc001 	sub	ip, ip, #1
 1001730:	e587c000 	str	ip, [r7]
        iter->last_removed = true;
 1001734:	e3a03001 	mov	r3, #1
        return CC_OK;
 1001738:	e3a00000 	mov	r0, #0
        iter->last_removed = true;
 100173c:	e5c4300c 	strb	r3, [r4, #12]
        return CC_OK;
 1001740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01001744 <array_zip_iter_add>:
 *
 * @return CC_OK if the element pair was successfully added to the arrays, or
 * CC_ERR_ALLOC if the memory allocation for the new elements failed.
 */
enum cc_stat array_zip_iter_add(ArrayZipIter *iter, void *e1, void *e2)
{
 1001744:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1001748:	e1a08002 	mov	r8, r2
    size_t index = iter->index++;
    Array  *ar1  = iter->ar1;
 100174c:	e5906000 	ldr	r6, [r0]
{
 1001750:	e1a09001 	mov	r9, r1
    Array  *ar2  = iter->ar2;
 1001754:	e1c040d4 	ldrd	r4, [r0, #4]

    /* Make sure both array buffers have room */
    if ((ar1->size == ar1->capacity && (expand_capacity(ar1) != CC_OK)) ||
 1001758:	e5962004 	ldr	r2, [r6, #4]
 100175c:	e5963000 	ldr	r3, [r6]
    size_t index = iter->index++;
 1001760:	e2857001 	add	r7, r5, #1
 1001764:	e5807008 	str	r7, [r0, #8]
    if ((ar1->size == ar1->capacity && (expand_capacity(ar1) != CC_OK)) ||
 1001768:	e1530002 	cmp	r3, r2
 100176c:	0a00005d 	beq	10018e8 <array_zip_iter_add+0x1a4>
            (ar2->size == ar2->capacity && (expand_capacity(ar2) != CC_OK)))
 1001770:	e5942004 	ldr	r2, [r4, #4]
    if ((ar1->size == ar1->capacity && (expand_capacity(ar1) != CC_OK)) ||
 1001774:	e5943000 	ldr	r3, [r4]
 1001778:	e1530002 	cmp	r3, r2
 100177c:	0a00003f 	beq	1001880 <array_zip_iter_add+0x13c>
        return CC_ERR_ALLOC;

    array_add_at(ar1, e1, index);
 1001780:	e1a02005 	mov	r2, r5
 1001784:	e1a01009 	mov	r1, r9
 1001788:	e1a00006 	mov	r0, r6
 100178c:	ebfffc2a 	bl	100083c <array_add_at>
    if (index == ar->size)
 1001790:	e5943000 	ldr	r3, [r4]
 1001794:	e1550003 	cmp	r5, r3
 1001798:	e1a02003 	mov	r2, r3
 100179c:	0a00006d 	beq	1001958 <array_zip_iter_add+0x214>
    if ((ar->size == 0 && index != 0) || index > (ar->size - 1))
 10017a0:	e2953000 	adds	r3, r5, #0
 10017a4:	13a03001 	movne	r3, #1
 10017a8:	e3520000 	cmp	r2, #0
 10017ac:	13a03000 	movne	r3, #0
 10017b0:	e3530000 	cmp	r3, #0
 10017b4:	1a00002f 	bne	1001878 <array_zip_iter_add+0x134>
 10017b8:	e2423001 	sub	r3, r2, #1
 10017bc:	e1550003 	cmp	r5, r3
 10017c0:	8a00002c 	bhi	1001878 <array_zip_iter_add+0x134>
    if (ar->size >= ar->capacity) {
 10017c4:	e5943004 	ldr	r3, [r4, #4]
 10017c8:	e1520003 	cmp	r2, r3
 10017cc:	3a00001a 	bcc	100183c <array_zip_iter_add+0xf8>
    if (ar->capacity == CC_MAX_ELEMENTS)
 10017d0:	e3730002 	cmn	r3, #2
 10017d4:	0a000027 	beq	1001878 <array_zip_iter_add+0x134>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10017d8:	ee073a90 	vmov	s15, r3
 10017dc:	ed947a02 	vldr	s14, [r4, #8]
 10017e0:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10017e4:	e5942010 	ldr	r2, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10017e8:	ee677a87 	vmul.f32	s15, s15, s14
 10017ec:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10017f0:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10017f4:	e1530000 	cmp	r3, r0
 10017f8:	31a03000 	movcc	r3, r0
 10017fc:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001800:	e1a00100 	lsl	r0, r0, #2
 1001804:	e5843004 	str	r3, [r4, #4]
 1001808:	e12fff32 	blx	r2
    if (!new_buff)
 100180c:	e2506000 	subs	r6, r0, #0
 1001810:	0a000018 	beq	1001878 <array_zip_iter_add+0x134>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 1001814:	e5942000 	ldr	r2, [r4]
 1001818:	e594100c 	ldr	r1, [r4, #12]
 100181c:	e1a02102 	lsl	r2, r2, #2
 1001820:	eb006876 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 1001824:	e5943018 	ldr	r3, [r4, #24]
 1001828:	e594000c 	ldr	r0, [r4, #12]
 100182c:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001830:	e5942000 	ldr	r2, [r4]
 1001834:	e584600c 	str	r6, [r4, #12]
        if (status != CC_OK)
 1001838:	ea000000 	b	1001840 <array_zip_iter_add+0xfc>
 100183c:	e594600c 	ldr	r6, [r4, #12]
    memmove(&(ar->buffer[index + 1]),
 1001840:	e1a00107 	lsl	r0, r7, #2
    size_t shift = (ar->size - index) * sizeof(void*);
 1001844:	e0422005 	sub	r2, r2, r5
    memmove(&(ar->buffer[index + 1]),
 1001848:	e1a02102 	lsl	r2, r2, #2
            &(ar->buffer[index]),
 100184c:	e2405004 	sub	r5, r0, #4
    memmove(&(ar->buffer[index + 1]),
 1001850:	e0861005 	add	r1, r6, r5
 1001854:	e0860000 	add	r0, r6, r0
 1001858:	fa0069e0 	blx	101bfe0 <memmove>
    ar->size++;
 100185c:	e5943000 	ldr	r3, [r4]
    array_add_at(ar2, e2, index);

    return CC_OK;
 1001860:	e3a00000 	mov	r0, #0
    ar->buffer[index] = element;
 1001864:	e594200c 	ldr	r2, [r4, #12]
    ar->size++;
 1001868:	e2833001 	add	r3, r3, #1
    ar->buffer[index] = element;
 100186c:	e7828005 	str	r8, [r2, r5]
    ar->size++;
 1001870:	e5843000 	str	r3, [r4]
}
 1001874:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    return CC_OK;
 1001878:	e3a00000 	mov	r0, #0
 100187c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 1001880:	e3730002 	cmn	r3, #2
 1001884:	0a000019 	beq	10018f0 <array_zip_iter_add+0x1ac>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001888:	ee073a90 	vmov	s15, r3
 100188c:	ed947a02 	vldr	s14, [r4, #8]
 1001890:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001894:	e5942010 	ldr	r2, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001898:	ee677a87 	vmul.f32	s15, s15, s14
 100189c:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10018a0:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10018a4:	e1530000 	cmp	r3, r0
 10018a8:	31a03000 	movcc	r3, r0
 10018ac:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10018b0:	e1a00100 	lsl	r0, r0, #2
 10018b4:	e5843004 	str	r3, [r4, #4]
 10018b8:	e12fff32 	blx	r2
    if (!new_buff)
 10018bc:	e250a000 	subs	sl, r0, #0
 10018c0:	0a00000a 	beq	10018f0 <array_zip_iter_add+0x1ac>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10018c4:	e5942000 	ldr	r2, [r4]
 10018c8:	e594100c 	ldr	r1, [r4, #12]
 10018cc:	e1a02102 	lsl	r2, r2, #2
 10018d0:	eb00684a 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 10018d4:	e5943018 	ldr	r3, [r4, #24]
 10018d8:	e594000c 	ldr	r0, [r4, #12]
 10018dc:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10018e0:	e584a00c 	str	sl, [r4, #12]
    return CC_OK;
 10018e4:	eaffffa5 	b	1001780 <array_zip_iter_add+0x3c>
    if (ar->capacity == CC_MAX_ELEMENTS)
 10018e8:	e3730002 	cmn	r3, #2
 10018ec:	1a000001 	bne	10018f8 <array_zip_iter_add+0x1b4>
        return CC_ERR_ALLOC;
 10018f0:	e3a00001 	mov	r0, #1
 10018f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    size_t new_capacity = ar->capacity * ar->exp_factor;
 10018f8:	ee073a90 	vmov	s15, r3
 10018fc:	ed967a02 	vldr	s14, [r6, #8]
 1001900:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001904:	e5962010 	ldr	r2, [r6, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001908:	ee677a87 	vmul.f32	s15, s15, s14
 100190c:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1001910:	ee170a90 	vmov	r0, s15
        ar->capacity = CC_MAX_ELEMENTS;
 1001914:	e1530000 	cmp	r3, r0
 1001918:	31a03000 	movcc	r3, r0
 100191c:	23e03001 	mvncs	r3, #1
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001920:	e1a00100 	lsl	r0, r0, #2
 1001924:	e5863004 	str	r3, [r6, #4]
 1001928:	e12fff32 	blx	r2
    if (!new_buff)
 100192c:	e250a000 	subs	sl, r0, #0
 1001930:	0affffee 	beq	10018f0 <array_zip_iter_add+0x1ac>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 1001934:	e5962000 	ldr	r2, [r6]
 1001938:	e596100c 	ldr	r1, [r6, #12]
 100193c:	e1a02102 	lsl	r2, r2, #2
 1001940:	eb00682e 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 1001944:	e5963018 	ldr	r3, [r6, #24]
 1001948:	e596000c 	ldr	r0, [r6, #12]
 100194c:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 1001950:	e586a00c 	str	sl, [r6, #12]
    return CC_OK;
 1001954:	eaffff85 	b	1001770 <array_zip_iter_add+0x2c>
    if (ar->size >= ar->capacity) {
 1001958:	e5942004 	ldr	r2, [r4, #4]
 100195c:	e1530002 	cmp	r3, r2
 1001960:	2a000005 	bcs	100197c <array_zip_iter_add+0x238>
    ar->buffer[ar->size] = element;
 1001964:	e594100c 	ldr	r1, [r4, #12]
    ar->size++;
 1001968:	e2832001 	add	r2, r3, #1
    return CC_OK;
 100196c:	e3a00000 	mov	r0, #0
    ar->buffer[ar->size] = element;
 1001970:	e7818103 	str	r8, [r1, r3, lsl #2]
    ar->size++;
 1001974:	e5842000 	str	r2, [r4]
    return CC_OK;
 1001978:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (ar->capacity == CC_MAX_ELEMENTS)
 100197c:	e3720002 	cmn	r2, #2
 1001980:	0affffbc 	beq	1001878 <array_zip_iter_add+0x134>
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001984:	ee072a90 	vmov	s15, r2
 1001988:	ed947a02 	vldr	s14, [r4, #8]
 100198c:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 1001990:	e5941010 	ldr	r1, [r4, #16]
    size_t new_capacity = ar->capacity * ar->exp_factor;
 1001994:	ee677a87 	vmul.f32	s15, s15, s14
 1001998:	eefc7ae7 	vcvt.u32.f32	s15, s15
 100199c:	ee173a90 	vmov	r3, s15
        ar->capacity = CC_MAX_ELEMENTS;
 10019a0:	e1520003 	cmp	r2, r3
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10019a4:	e1a00103 	lsl	r0, r3, #2
        ar->capacity = CC_MAX_ELEMENTS;
 10019a8:	23e03001 	mvncs	r3, #1
 10019ac:	e5843004 	str	r3, [r4, #4]
    void **new_buff = ar->mem_alloc(new_capacity * sizeof(void*));
 10019b0:	e12fff31 	blx	r1
    if (!new_buff)
 10019b4:	e2505000 	subs	r5, r0, #0
 10019b8:	0affffae 	beq	1001878 <array_zip_iter_add+0x134>
    memcpy(new_buff, ar->buffer, ar->size * sizeof(void*));
 10019bc:	e5942000 	ldr	r2, [r4]
 10019c0:	e594100c 	ldr	r1, [r4, #12]
 10019c4:	e1a02102 	lsl	r2, r2, #2
 10019c8:	eb00680c 	bl	101ba00 <memcpy>
    ar->mem_free(ar->buffer);
 10019cc:	e5943018 	ldr	r3, [r4, #24]
 10019d0:	e594000c 	ldr	r0, [r4, #12]
 10019d4:	e12fff33 	blx	r3
    ar->buffer = new_buff;
 10019d8:	e5943000 	ldr	r3, [r4]
 10019dc:	e584500c 	str	r5, [r4, #12]
        if (status != CC_OK)
 10019e0:	eaffffdf 	b	1001964 <array_zip_iter_add+0x220>

010019e4 <array_zip_iter_replace>:
 * @param[out] out2 output of the replaced element from the second array
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat array_zip_iter_replace(ArrayZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
 10019e4:	e92d4070 	push	{r4, r5, r6, lr}
    if ((iter->index - 1) >= iter->ar1->size || (iter->index - 1) >= iter->ar2->size)
 10019e8:	e5905000 	ldr	r5, [r0]
 10019ec:	e590c008 	ldr	ip, [r0, #8]
 10019f0:	e595e000 	ldr	lr, [r5]
 10019f4:	e24cc001 	sub	ip, ip, #1
 10019f8:	e15c000e 	cmp	ip, lr
 10019fc:	2a00001c 	bcs	1001a74 <array_zip_iter_replace+0x90>
 1001a00:	e590e004 	ldr	lr, [r0, #4]
 1001a04:	e59ee000 	ldr	lr, [lr]
 1001a08:	e15c000e 	cmp	ip, lr
 1001a0c:	2a000018 	bcs	1001a74 <array_zip_iter_replace+0x90>
    if (out)
 1001a10:	e595600c 	ldr	r6, [r5, #12]
 1001a14:	e1a0410c 	lsl	r4, ip, #2
 1001a18:	e3530000 	cmp	r3, #0
 1001a1c:	e086e004 	add	lr, r6, r4
        *out = ar->buffer[index];
 1001a20:	1796e10c 	ldrne	lr, [r6, ip, lsl #2]
 1001a24:	1583e000 	strne	lr, [r3]
 1001a28:	1595e00c 	ldrne	lr, [r5, #12]
 1001a2c:	108ee004 	addne	lr, lr, r4
    ar->buffer[index] = element;
 1001a30:	e58e1000 	str	r1, [lr]
        return CC_ERR_OUT_OF_RANGE;

    array_replace_at(iter->ar1, e1, iter->index - 1, out1);
    array_replace_at(iter->ar2, e2, iter->index - 1, out2);
 1001a34:	e5903004 	ldr	r3, [r0, #4]
    if (index >= ar->size)
 1001a38:	e5931000 	ldr	r1, [r3]
 1001a3c:	e15c0001 	cmp	ip, r1
 1001a40:	2a00000d 	bcs	1001a7c <array_zip_iter_replace+0x98>
    if (out)
 1001a44:	e59d1010 	ldr	r1, [sp, #16]
 1001a48:	e593000c 	ldr	r0, [r3, #12]
 1001a4c:	e3510000 	cmp	r1, #0
 1001a50:	e0801004 	add	r1, r0, r4
        *out = ar->buffer[index];
 1001a54:	1790110c 	ldrne	r1, [r0, ip, lsl #2]
 1001a58:	159d0010 	ldrne	r0, [sp, #16]
 1001a5c:	15801000 	strne	r1, [r0]

    return CC_OK;
 1001a60:	e3a00000 	mov	r0, #0
 1001a64:	1593100c 	ldrne	r1, [r3, #12]
 1001a68:	10811004 	addne	r1, r1, r4
    ar->buffer[index] = element;
 1001a6c:	e5812000 	str	r2, [r1]
    return CC_OK;
 1001a70:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_OUT_OF_RANGE;
 1001a74:	e3a00008 	mov	r0, #8
 1001a78:	e8bd8070 	pop	{r4, r5, r6, pc}
    return CC_OK;
 1001a7c:	e3a00000 	mov	r0, #0
}
 1001a80:	e8bd8070 	pop	{r4, r5, r6, pc}

01001a84 <array_zip_iter_index>:
 *
 * @return current iterator index.
 */
size_t array_zip_iter_index(ArrayZipIter *iter)
{
    return iter->index - 1;
 1001a84:	e5900008 	ldr	r0, [r0, #8]
}
 1001a88:	e2400001 	sub	r0, r0, #1
 1001a8c:	e12fff1e 	bx	lr

01001a90 <cc_common_cmp_str>:
 *
 * @return
 */
int cc_common_cmp_str(const void *str1, const void *str2)
{
    return strcmp((const char*) str1, (const char*) str2);
 1001a90:	ea0090dc 	b	1025e08 <__strcmp_from_arm>

01001a94 <expand_capacity>:
 * the memory allocation for the new buffer failed, or CC_ERR_MAX_CAPACITY
 * if the Deque is already at maximum capacity.
 */
static enum cc_stat expand_capacity(Deque *deque)
{
    if (deque->capacity == MAX_POW_TWO)
 1001a94:	e5903004 	ldr	r3, [r0, #4]
 1001a98:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
 1001a9c:	0a000028 	beq	1001b44 <expand_capacity+0xb0>
{
 1001aa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
        return CC_ERR_MAX_CAPACITY;

    size_t new_capacity = deque->capacity << 1;
 1001aa4:	e1a05083 	lsl	r5, r3, #1
    void **new_buffer = deque->mem_calloc(new_capacity, sizeof(void*));
 1001aa8:	e1a04000 	mov	r4, r0
 1001aac:	e5903018 	ldr	r3, [r0, #24]
 1001ab0:	e3a01004 	mov	r1, #4
 1001ab4:	e1a00005 	mov	r0, r5
 1001ab8:	e12fff33 	blx	r3

    if (!new_buffer)
 1001abc:	e2507000 	subs	r7, r0, #0
 1001ac0:	0a00001d 	beq	1001b3c <expand_capacity+0xa8>
        if (deque->last > deque->first) {
 1001ac4:	e5943008 	ldr	r3, [r4, #8]
 1001ac8:	e594800c 	ldr	r8, [r4, #12]
 1001acc:	e5941010 	ldr	r1, [r4, #16]
 1001ad0:	e1580003 	cmp	r8, r3
 1001ad4:	e0811103 	add	r1, r1, r3, lsl #2
 1001ad8:	8a000013 	bhi	1001b2c <expand_capacity+0x98>
            size_t e = deque->capacity - deque->first;
 1001adc:	e5946004 	ldr	r6, [r4, #4]
 1001ae0:	e0466003 	sub	r6, r6, r3
            memcpy(buff,
 1001ae4:	e1a06106 	lsl	r6, r6, #2
 1001ae8:	e1a02006 	mov	r2, r6
 1001aec:	eb0067c3 	bl	101ba00 <memcpy>
            memcpy(&(buff[e]),
 1001af0:	e0870006 	add	r0, r7, r6
 1001af4:	e1a02108 	lsl	r2, r8, #2
 1001af8:	e5941010 	ldr	r1, [r4, #16]
 1001afc:	eb0067bf 	bl	101ba00 <memcpy>
        return CC_ERR_ALLOC;

    copy_buffer(deque, new_buffer, NULL);
    deque->mem_free(deque->buffer);
 1001b00:	e594301c 	ldr	r3, [r4, #28]
 1001b04:	e5940010 	ldr	r0, [r4, #16]
 1001b08:	e12fff33 	blx	r3

    deque->first    = 0;
    deque->last     = deque->size;
 1001b0c:	e5942000 	ldr	r2, [r4]
    deque->first    = 0;
 1001b10:	e3a03000 	mov	r3, #0
    deque->capacity = new_capacity;
 1001b14:	e5845004 	str	r5, [r4, #4]
    deque->buffer   = new_buffer;

    return CC_OK;
 1001b18:	e1a00003 	mov	r0, r3
    deque->buffer   = new_buffer;
 1001b1c:	e5847010 	str	r7, [r4, #16]
    deque->last     = deque->size;
 1001b20:	e584200c 	str	r2, [r4, #12]
    deque->first    = 0;
 1001b24:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 1001b28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            memcpy(buff,
 1001b2c:	e5942000 	ldr	r2, [r4]
 1001b30:	e1a02102 	lsl	r2, r2, #2
 1001b34:	eb0067b1 	bl	101ba00 <memcpy>
 1001b38:	eafffff0 	b	1001b00 <expand_capacity+0x6c>
        return CC_ERR_ALLOC;
 1001b3c:	e3a00001 	mov	r0, #1
}
 1001b40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1001b44:	e3a00004 	mov	r0, #4
}
 1001b48:	e12fff1e 	bx	lr

01001b4c <deque_new>:
{
 1001b4c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001b50:	e3a01020 	mov	r1, #32
{
 1001b54:	e1a05000 	mov	r5, r0
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001b58:	e3a00001 	mov	r0, #1
 1001b5c:	fa006215 	blx	101a3b8 <calloc>
    if (!deque)
 1001b60:	e2504000 	subs	r4, r0, #0
 1001b64:	0a000015 	beq	1001bc0 <deque_new+0x74>
    if (!(deque->buffer = conf->mem_alloc(conf->capacity * sizeof(void*)))) {
 1001b68:	e3a00020 	mov	r0, #32
 1001b6c:	fa006511 	blx	101afb8 <malloc>
 1001b70:	e3500000 	cmp	r0, #0
 1001b74:	e5840010 	str	r0, [r4, #16]
 1001b78:	0a000012 	beq	1001bc8 <deque_new+0x7c>
    deque->mem_alloc  = conf->mem_alloc;
 1001b7c:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    deque->mem_calloc = conf->mem_calloc;
 1001b80:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    deque->mem_free   = conf->mem_free;
 1001b84:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    deque->mem_alloc  = conf->mem_alloc;
 1001b88:	e3401101 	movt	r1, #257	; 0x101
    deque->mem_calloc = conf->mem_calloc;
 1001b8c:	e3402101 	movt	r2, #257	; 0x101
    deque->mem_free   = conf->mem_free;
 1001b90:	e3403101 	movt	r3, #257	; 0x101
    deque->size       = 0;
 1001b94:	e3a06000 	mov	r6, #0
 1001b98:	e3a07008 	mov	r7, #8
 1001b9c:	e3a08000 	mov	r8, #0
 1001ba0:	e3a09000 	mov	r9, #0
    *d = deque;
 1001ba4:	e5854000 	str	r4, [r5]
    return CC_OK;
 1001ba8:	e3a00000 	mov	r0, #0
    deque->mem_alloc  = conf->mem_alloc;
 1001bac:	e5841014 	str	r1, [r4, #20]
    deque->mem_free   = conf->mem_free;
 1001bb0:	e1c421f8 	strd	r2, [r4, #24]
    deque->size       = 0;
 1001bb4:	e1c460f0 	strd	r6, [r4]
 1001bb8:	e1c480f8 	strd	r8, [r4, #8]
    return CC_OK;
 1001bbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1001bc0:	e3a00001 	mov	r0, #1
}
 1001bc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        conf->mem_free(deque);
 1001bc8:	e1a00004 	mov	r0, r4
 1001bcc:	fa0064fd 	blx	101afc8 <free>
        return CC_ERR_ALLOC;
 1001bd0:	e3a00001 	mov	r0, #1
 1001bd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01001bd8 <deque_new_conf>:
{
 1001bd8:	e92d4070 	push	{r4, r5, r6, lr}
 1001bdc:	e1a06000 	mov	r6, r0
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001be0:	e5903008 	ldr	r3, [r0, #8]
{
 1001be4:	e1a04001 	mov	r4, r1
    Deque *deque = conf->mem_calloc(1, sizeof(Deque));
 1001be8:	e3a00001 	mov	r0, #1
 1001bec:	e3a01020 	mov	r1, #32
 1001bf0:	e12fff33 	blx	r3
    if (!deque)
 1001bf4:	e2505000 	subs	r5, r0, #0
 1001bf8:	0a00001c 	beq	1001c70 <deque_new_conf+0x98>
    if (!(deque->buffer = conf->mem_alloc(conf->capacity * sizeof(void*)))) {
 1001bfc:	e8960009 	ldm	r6, {r0, r3}
 1001c00:	e1a00100 	lsl	r0, r0, #2
 1001c04:	e12fff33 	blx	r3
 1001c08:	e3500000 	cmp	r0, #0
 1001c0c:	e5850010 	str	r0, [r5, #16]
 1001c10:	0a000018 	beq	1001c78 <deque_new_conf+0xa0>
    deque->mem_alloc  = conf->mem_alloc;
 1001c14:	e996000e 	ldmib	r6, {r1, r2, r3}
 1001c18:	e5851014 	str	r1, [r5, #20]
 1001c1c:	e1c521f8 	strd	r2, [r5, #24]
    deque->capacity   = upper_pow_two(conf->capacity);
 1001c20:	e5963000 	ldr	r3, [r6]
 *
 * @return the nearest upper power of two
 */
static INLINE size_t upper_pow_two(size_t n)
{
    if (n >= MAX_POW_TWO)
 1001c24:	e3530000 	cmp	r3, #0
        return MAX_POW_TWO;
 1001c28:	b3a03102 	movlt	r3, #-2147483648	; 0x80000000
    if (n >= MAX_POW_TWO)
 1001c2c:	ba000007 	blt	1001c50 <deque_new_conf+0x78>
    /**
     * taken from:
     * http://graphics.stanford.edu/~seander/
     * bithacks.html#RoundUpPowerOf2Float
     */
    n--;
 1001c30:	12433001 	subne	r3, r3, #1
        return 2;
 1001c34:	03a03002 	moveq	r3, #2
    n |= n >> 1;
 1001c38:	118330a3 	orrne	r3, r3, r3, lsr #1
    n |= n >> 2;
 1001c3c:	11833123 	orrne	r3, r3, r3, lsr #2
    n |= n >> 4;
 1001c40:	11833223 	orrne	r3, r3, r3, lsr #4
    n |= n >> 8;
 1001c44:	11833423 	orrne	r3, r3, r3, lsr #8
    n |= n >> 16;
 1001c48:	11833823 	orrne	r3, r3, r3, lsr #16
    n++;
 1001c4c:	12833001 	addne	r3, r3, #1
    deque->first      = 0;
 1001c50:	e3a02000 	mov	r2, #0
    deque->capacity   = upper_pow_two(conf->capacity);
 1001c54:	e5853004 	str	r3, [r5, #4]
    deque->first      = 0;
 1001c58:	e5852008 	str	r2, [r5, #8]
    return CC_OK;
 1001c5c:	e1a00002 	mov	r0, r2
    deque->last       = 0;
 1001c60:	e585200c 	str	r2, [r5, #12]
    deque->size       = 0;
 1001c64:	e5852000 	str	r2, [r5]
    *d = deque;
 1001c68:	e5845000 	str	r5, [r4]
    return CC_OK;
 1001c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1001c70:	e3a00001 	mov	r0, #1
}
 1001c74:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(deque);
 1001c78:	e1a00005 	mov	r0, r5
 1001c7c:	e596300c 	ldr	r3, [r6, #12]
 1001c80:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1001c84:	e3a00001 	mov	r0, #1
 1001c88:	e8bd8070 	pop	{r4, r5, r6, pc}

01001c8c <deque_conf_init>:
    conf->mem_alloc  = malloc;
 1001c8c:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    conf->mem_calloc = calloc;
 1001c90:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 1001c94:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    conf->capacity   = DEFAULT_CAPACITY;
 1001c98:	e3a0c008 	mov	ip, #8
    conf->mem_alloc  = malloc;
 1001c9c:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1001ca0:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1001ca4:	e3403101 	movt	r3, #257	; 0x101
    conf->capacity   = DEFAULT_CAPACITY;
 1001ca8:	e580c000 	str	ip, [r0]
    conf->mem_free   = free;
 1001cac:	e980000e 	stmib	r0, {r1, r2, r3}
}
 1001cb0:	e12fff1e 	bx	lr

01001cb4 <deque_destroy>:
{
 1001cb4:	e92d4010 	push	{r4, lr}
 1001cb8:	e1a04000 	mov	r4, r0
    deque->mem_free(deque->buffer);
 1001cbc:	e590301c 	ldr	r3, [r0, #28]
 1001cc0:	e5900010 	ldr	r0, [r0, #16]
 1001cc4:	e12fff33 	blx	r3
    deque->mem_free(deque);
 1001cc8:	e594301c 	ldr	r3, [r4, #28]
 1001ccc:	e1a00004 	mov	r0, r4
}
 1001cd0:	e8bd4010 	pop	{r4, lr}
    deque->mem_free(deque);
 1001cd4:	e12fff13 	bx	r3

01001cd8 <deque_destroy_cb>:
    for (i = 0; i < deque->size; i++) {
 1001cd8:	e5903000 	ldr	r3, [r0]
{
 1001cdc:	e92d4070 	push	{r4, r5, r6, lr}
 1001ce0:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 1001ce4:	e3530000 	cmp	r3, #0
 1001ce8:	0a00000c 	beq	1001d20 <deque_destroy_cb+0x48>
 1001cec:	e1a06001 	mov	r6, r1
 1001cf0:	e3a05000 	mov	r5, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1001cf4:	e1c420d4 	ldrd	r2, [r4, #4]
        fn(deque->buffer[p]);
 1001cf8:	e5941010 	ldr	r1, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1001cfc:	e0853003 	add	r3, r5, r3
 1001d00:	e2422001 	sub	r2, r2, #1
 1001d04:	e0033002 	and	r3, r3, r2
    for (i = 0; i < deque->size; i++) {
 1001d08:	e2855001 	add	r5, r5, #1
        fn(deque->buffer[p]);
 1001d0c:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 1001d10:	e12fff36 	blx	r6
    for (i = 0; i < deque->size; i++) {
 1001d14:	e5943000 	ldr	r3, [r4]
 1001d18:	e1550003 	cmp	r5, r3
 1001d1c:	3afffff4 	bcc	1001cf4 <deque_destroy_cb+0x1c>
    deque->first = 0;
 1001d20:	e3a03000 	mov	r3, #0
    deque->mem_free(deque->buffer);
 1001d24:	e5940010 	ldr	r0, [r4, #16]
    deque->first = 0;
 1001d28:	e5843008 	str	r3, [r4, #8]
    deque->last  = 0;
 1001d2c:	e584300c 	str	r3, [r4, #12]
    deque->size  = 0;
 1001d30:	e5843000 	str	r3, [r4]
    deque->mem_free(deque->buffer);
 1001d34:	e594201c 	ldr	r2, [r4, #28]
 1001d38:	e12fff32 	blx	r2
    deque->mem_free(deque);
 1001d3c:	e594301c 	ldr	r3, [r4, #28]
 1001d40:	e1a00004 	mov	r0, r4
}
 1001d44:	e8bd4070 	pop	{r4, r5, r6, lr}
    deque->mem_free(deque);
 1001d48:	e12fff13 	bx	r3

01001d4c <deque_add>:
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001d4c:	e5902004 	ldr	r2, [r0, #4]
 1001d50:	e5903000 	ldr	r3, [r0]
{
 1001d54:	e92d4070 	push	{r4, r5, r6, lr}
 1001d58:	e1a04000 	mov	r4, r0
 1001d5c:	e1a05001 	mov	r5, r1
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001d60:	e1520003 	cmp	r2, r3
 1001d64:	0a00000a 	beq	1001d94 <deque_add+0x48>
    deque->buffer[deque->last] = element;
 1001d68:	e594c00c 	ldr	ip, [r4, #12]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001d6c:	e2422001 	sub	r2, r2, #1
    deque->buffer[deque->last] = element;
 1001d70:	e5941010 	ldr	r1, [r4, #16]
    deque->size++;
 1001d74:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001d78:	e28c0001 	add	r0, ip, #1
 1001d7c:	e0022000 	and	r2, r2, r0
    deque->buffer[deque->last] = element;
 1001d80:	e781510c 	str	r5, [r1, ip, lsl #2]
    return CC_OK;
 1001d84:	e3a00000 	mov	r0, #0
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001d88:	e584200c 	str	r2, [r4, #12]
    deque->size++;
 1001d8c:	e5843000 	str	r3, [r4]
    return CC_OK;
 1001d90:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001d94:	ebffff3e 	bl	1001a94 <expand_capacity>
 1001d98:	e3500000 	cmp	r0, #0
 1001d9c:	05942004 	ldreq	r2, [r4, #4]
 1001da0:	05943000 	ldreq	r3, [r4]
 1001da4:	0affffef 	beq	1001d68 <deque_add+0x1c>
        return CC_ERR_ALLOC;
 1001da8:	e3a00001 	mov	r0, #1
}
 1001dac:	e8bd8070 	pop	{r4, r5, r6, pc}

01001db0 <deque_add_first>:
{
 1001db0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1001db4:	e1a05000 	mov	r5, r0
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 1001db8:	e8900018 	ldm	r0, {r3, r4}
{
 1001dbc:	e1a07001 	mov	r7, r1
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 1001dc0:	e1530004 	cmp	r3, r4
 1001dc4:	2a00000a 	bcs	1001df4 <deque_add_first+0x44>
 1001dc8:	e5902008 	ldr	r2, [r0, #8]
 1001dcc:	e5906010 	ldr	r6, [r0, #16]
 1001dd0:	e2422001 	sub	r2, r2, #1
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 1001dd4:	e2444001 	sub	r4, r4, #1
    deque->size++;
 1001dd8:	e2833001 	add	r3, r3, #1
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 1001ddc:	e0044002 	and	r4, r4, r2
    return CC_OK;
 1001de0:	e3a00000 	mov	r0, #0
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 1001de4:	e5854008 	str	r4, [r5, #8]
    deque->buffer[deque->first] = element;
 1001de8:	e7867104 	str	r7, [r6, r4, lsl #2]
    deque->size++;
 1001dec:	e5853000 	str	r3, [r5]
}
 1001df0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (deque->capacity == MAX_POW_TWO)
 1001df4:	e3540102 	cmp	r4, #-2147483648	; 0x80000000
 1001df8:	0a000018 	beq	1001e60 <deque_add_first+0xb0>
    size_t new_capacity = deque->capacity << 1;
 1001dfc:	e1a04084 	lsl	r4, r4, #1
    void **new_buffer = deque->mem_calloc(new_capacity, sizeof(void*));
 1001e00:	e5903018 	ldr	r3, [r0, #24]
 1001e04:	e3a01004 	mov	r1, #4
 1001e08:	e1a00004 	mov	r0, r4
 1001e0c:	e12fff33 	blx	r3
    if (!new_buffer)
 1001e10:	e2506000 	subs	r6, r0, #0
 1001e14:	0a000011 	beq	1001e60 <deque_add_first+0xb0>
        if (deque->last > deque->first) {
 1001e18:	e5953008 	ldr	r3, [r5, #8]
 1001e1c:	e595900c 	ldr	r9, [r5, #12]
 1001e20:	e5951010 	ldr	r1, [r5, #16]
 1001e24:	e1590003 	cmp	r9, r3
 1001e28:	e0811103 	add	r1, r1, r3, lsl #2
 1001e2c:	9a00000d 	bls	1001e68 <deque_add_first+0xb8>
            memcpy(buff,
 1001e30:	e5952000 	ldr	r2, [r5]
 1001e34:	e1a02102 	lsl	r2, r2, #2
 1001e38:	eb0066f0 	bl	101ba00 <memcpy>
    deque->mem_free(deque->buffer);
 1001e3c:	e595301c 	ldr	r3, [r5, #28]
 1001e40:	e5950010 	ldr	r0, [r5, #16]
 1001e44:	e12fff33 	blx	r3
    deque->last     = deque->size;
 1001e48:	e5953000 	ldr	r3, [r5]
    deque->buffer   = new_buffer;
 1001e4c:	e3e02000 	mvn	r2, #0
    deque->capacity = new_capacity;
 1001e50:	e5854004 	str	r4, [r5, #4]
    deque->buffer   = new_buffer;
 1001e54:	e5856010 	str	r6, [r5, #16]
    deque->last     = deque->size;
 1001e58:	e585300c 	str	r3, [r5, #12]
    return CC_OK;
 1001e5c:	eaffffdc 	b	1001dd4 <deque_add_first+0x24>
        return CC_ERR_ALLOC;
 1001e60:	e3a00001 	mov	r0, #1
 1001e64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            size_t e = deque->capacity - deque->first;
 1001e68:	e5958004 	ldr	r8, [r5, #4]
 1001e6c:	e0488003 	sub	r8, r8, r3
            memcpy(buff,
 1001e70:	e1a08108 	lsl	r8, r8, #2
 1001e74:	e1a02008 	mov	r2, r8
 1001e78:	eb0066e0 	bl	101ba00 <memcpy>
            memcpy(&(buff[e]),
 1001e7c:	e0860008 	add	r0, r6, r8
 1001e80:	e1a02109 	lsl	r2, r9, #2
 1001e84:	e5951010 	ldr	r1, [r5, #16]
 1001e88:	eb0066dc 	bl	101ba00 <memcpy>
 1001e8c:	eaffffea 	b	1001e3c <deque_add_first+0x8c>

01001e90 <deque_add_last>:
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001e90:	e5902004 	ldr	r2, [r0, #4]
 1001e94:	e5903000 	ldr	r3, [r0]
{
 1001e98:	e92d4070 	push	{r4, r5, r6, lr}
 1001e9c:	e1a04000 	mov	r4, r0
 1001ea0:	e1a05001 	mov	r5, r1
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001ea4:	e1520003 	cmp	r2, r3
 1001ea8:	0a00000a 	beq	1001ed8 <deque_add_last+0x48>
    deque->buffer[deque->last] = element;
 1001eac:	e594c00c 	ldr	ip, [r4, #12]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001eb0:	e2422001 	sub	r2, r2, #1
    deque->buffer[deque->last] = element;
 1001eb4:	e5941010 	ldr	r1, [r4, #16]
    deque->size++;
 1001eb8:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001ebc:	e28c0001 	add	r0, ip, #1
 1001ec0:	e0022000 	and	r2, r2, r0
    deque->buffer[deque->last] = element;
 1001ec4:	e781510c 	str	r5, [r1, ip, lsl #2]
    return CC_OK;
 1001ec8:	e3a00000 	mov	r0, #0
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1001ecc:	e584200c 	str	r2, [r4, #12]
    deque->size++;
 1001ed0:	e5843000 	str	r3, [r4]
    return CC_OK;
 1001ed4:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001ed8:	ebfffeed 	bl	1001a94 <expand_capacity>
 1001edc:	e3500000 	cmp	r0, #0
 1001ee0:	05942004 	ldreq	r2, [r4, #4]
 1001ee4:	05943000 	ldreq	r3, [r4]
 1001ee8:	0affffef 	beq	1001eac <deque_add_last+0x1c>
        return CC_ERR_ALLOC;
 1001eec:	e3a00001 	mov	r0, #1
}
 1001ef0:	e8bd8070 	pop	{r4, r5, r6, pc}

01001ef4 <deque_add_at>:
    if (index >= deque->size)
 1001ef4:	e5903000 	ldr	r3, [r0]
 1001ef8:	e1530002 	cmp	r3, r2
 1001efc:	9a000056 	bls	100205c <deque_add_at+0x168>
{
 1001f00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1001f04:	e1a04000 	mov	r4, r0
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1001f08:	e590e004 	ldr	lr, [r0, #4]
 1001f0c:	e1a08001 	mov	r8, r1
 1001f10:	e1a05002 	mov	r5, r2
 1001f14:	e153000e 	cmp	r3, lr
 1001f18:	0a000060 	beq	10020a0 <deque_add_at+0x1ac>
    if (index == 0)
 1001f1c:	e3550000 	cmp	r5, #0
    const size_t c = deque->capacity - 1;
 1001f20:	e24e6001 	sub	r6, lr, #1
    const size_t f = deque->first & c;
 1001f24:	e5942008 	ldr	r2, [r4, #8]
    if (index == 0)
 1001f28:	0a000064 	beq	10020c0 <deque_add_at+0x1cc>
    if (index == c)
 1001f2c:	e1550006 	cmp	r5, r6
    const size_t l = deque->last & c;
 1001f30:	e594a00c 	ldr	sl, [r4, #12]
    if (index == c)
 1001f34:	0a00006e 	beq	10020f4 <deque_add_at+0x200>
    if (index <= (deque->size / 2) - 1) {
 1001f38:	e1a010a3 	lsr	r1, r3, #1
    const size_t p = (deque->first + index) & c;
 1001f3c:	e0827005 	add	r7, r2, r5
 1001f40:	e0077006 	and	r7, r7, r6
    if (index <= (deque->size / 2) - 1) {
 1001f44:	e594c010 	ldr	ip, [r4, #16]
 1001f48:	e2411001 	sub	r1, r1, #1
 1001f4c:	e1a09107 	lsl	r9, r7, #2
 1001f50:	e1510005 	cmp	r1, r5
 1001f54:	3a000020 	bcc	1001fdc <deque_add_at+0xe8>
    const size_t f = deque->first & c;
 1001f58:	e0022006 	and	r2, r2, r6
        if (p < f || f == 0) {
 1001f5c:	e16f3f12 	clz	r3, r2
 1001f60:	e1a032a3 	lsr	r3, r3, #5
 1001f64:	e1520007 	cmp	r2, r7
 1001f68:	83833001 	orrhi	r3, r3, #1
 1001f6c:	e3530000 	cmp	r3, #0
 1001f70:	0a000042 	beq	1002080 <deque_add_at+0x18c>
            const size_t r_move = (f != 0) ? c - f + 1 : 0;
 1001f74:	e3520000 	cmp	r2, #0
 1001f78:	e59c5000 	ldr	r5, [ip]
 1001f7c:	0a000008 	beq	1001fa4 <deque_add_at+0xb0>
                memmove(&(deque->buffer[f - 1]),
 1001f80:	e2420107 	sub	r0, r2, #-1073741823	; 0xc0000001
            const size_t r_move = (f != 0) ? c - f + 1 : 0;
 1001f84:	e04e2002 	sub	r2, lr, r2
                memmove(&(deque->buffer[f - 1]),
 1001f88:	e1a00100 	lsl	r0, r0, #2
 1001f8c:	e1a02102 	lsl	r2, r2, #2
                        &(deque->buffer[f]),
 1001f90:	e2801004 	add	r1, r0, #4
                memmove(&(deque->buffer[f - 1]),
 1001f94:	e08c0000 	add	r0, ip, r0
 1001f98:	e08c1001 	add	r1, ip, r1
 1001f9c:	fa00680f 	blx	101bfe0 <memmove>
 1001fa0:	e594c010 	ldr	ip, [r4, #16]
            if (p != 0) {
 1001fa4:	e3570000 	cmp	r7, #0
 1001fa8:	1a00005c 	bne	1002120 <deque_add_at+0x22c>
            deque->buffer[c] = e_first;
 1001fac:	e78c5106 	str	r5, [ip, r6, lsl #2]
        deque->first = (deque->first - 1) & c;
 1001fb0:	e5943008 	ldr	r3, [r4, #8]
 1001fb4:	e2433001 	sub	r3, r3, #1
 1001fb8:	e0066003 	and	r6, r6, r3
 1001fbc:	e5846008 	str	r6, [r4, #8]
    deque->size++;
 1001fc0:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1001fc4:	e3a00000 	mov	r0, #0
    deque->buffer[p] = element;
 1001fc8:	e5942010 	ldr	r2, [r4, #16]
    deque->size++;
 1001fcc:	e2833001 	add	r3, r3, #1
    deque->buffer[p] = element;
 1001fd0:	e7828107 	str	r8, [r2, r7, lsl #2]
    deque->size++;
 1001fd4:	e5843000 	str	r3, [r4]
}
 1001fd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    const size_t l = deque->last & c;
 1001fdc:	e00aa006 	and	sl, sl, r6
        if (p > l || l == c) {
 1001fe0:	e046200a 	sub	r2, r6, sl
 1001fe4:	e16f2f12 	clz	r2, r2
 1001fe8:	e1a022a2 	lsr	r2, r2, #5
 1001fec:	e15a0007 	cmp	sl, r7
 1001ff0:	33822001 	orrcc	r2, r2, #1
 1001ff4:	e3520000 	cmp	r2, #0
 1001ff8:	0a000019 	beq	1002064 <deque_add_at+0x170>
            if (p != c) {
 1001ffc:	e1560007 	cmp	r6, r7
            void* e_last = deque->buffer[c];
 1002000:	e79c5106 	ldr	r5, [ip, r6, lsl #2]
            if (p != c) {
 1002004:	0a000006 	beq	1002024 <deque_add_at+0x130>
                        (c - p) * sizeof(void*));
 1002008:	e0462007 	sub	r2, r6, r7
                memmove(&(deque->buffer[p + 1]),
 100200c:	e2890004 	add	r0, r9, #4
 1002010:	e08c0000 	add	r0, ip, r0
 1002014:	e08c1009 	add	r1, ip, r9
 1002018:	e1a02102 	lsl	r2, r2, #2
 100201c:	fa0067ef 	blx	101bfe0 <memmove>
 1002020:	e594c010 	ldr	ip, [r4, #16]
            if (l != c) {
 1002024:	e156000a 	cmp	r6, sl
 1002028:	0a000005 	beq	1002044 <deque_add_at+0x150>
                memmove(&(deque->buffer[1]),
 100202c:	e28aa001 	add	sl, sl, #1
 1002030:	e1a0100c 	mov	r1, ip
 1002034:	e28c0004 	add	r0, ip, #4
 1002038:	e1a0210a 	lsl	r2, sl, #2
 100203c:	fa0067e7 	blx	101bfe0 <memmove>
 1002040:	e594c010 	ldr	ip, [r4, #16]
            deque->buffer[0] = e_last;
 1002044:	e58c5000 	str	r5, [ip]
        deque->last = (deque->last + 1) & c;
 1002048:	e594300c 	ldr	r3, [r4, #12]
 100204c:	e2833001 	add	r3, r3, #1
 1002050:	e0066003 	and	r6, r6, r3
 1002054:	e584600c 	str	r6, [r4, #12]
 1002058:	eaffffd8 	b	1001fc0 <deque_add_at+0xcc>
        return CC_ERR_OUT_OF_RANGE;
 100205c:	e3a00008 	mov	r0, #8
}
 1002060:	e12fff1e 	bx	lr
                    (deque->size - index) * sizeof(void*));
 1002064:	e0432005 	sub	r2, r3, r5
            memmove(&(deque->buffer[p + 1]),
 1002068:	e2890004 	add	r0, r9, #4
 100206c:	e1a02102 	lsl	r2, r2, #2
 1002070:	e08c0000 	add	r0, ip, r0
 1002074:	e08c1009 	add	r1, ip, r9
 1002078:	fa0067d8 	blx	101bfe0 <memmove>
 100207c:	eafffff1 	b	1002048 <deque_add_at+0x154>
            memmove(&(deque->buffer[f - 1]),
 1002080:	e2420107 	sub	r0, r2, #-1073741823	; 0xc0000001
 1002084:	e1a02105 	lsl	r2, r5, #2
 1002088:	e1a00100 	lsl	r0, r0, #2
                    &(deque->buffer[f]),
 100208c:	e2801004 	add	r1, r0, #4
            memmove(&(deque->buffer[f - 1]),
 1002090:	e08c0000 	add	r0, ip, r0
 1002094:	e08c1001 	add	r1, ip, r1
 1002098:	fa0067d0 	blx	101bfe0 <memmove>
 100209c:	eaffffc3 	b	1001fb0 <deque_add_at+0xbc>
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 10020a0:	ebfffe7b 	bl	1001a94 <expand_capacity>
 10020a4:	e3500000 	cmp	r0, #0
 10020a8:	1a00000f 	bne	10020ec <deque_add_at+0x1f8>
 10020ac:	e8944008 	ldm	r4, {r3, lr}
    if (index == 0)
 10020b0:	e3550000 	cmp	r5, #0
    const size_t f = deque->first & c;
 10020b4:	e5942008 	ldr	r2, [r4, #8]
    const size_t c = deque->capacity - 1;
 10020b8:	e24e6001 	sub	r6, lr, #1
    if (index == 0)
 10020bc:	1affff9a 	bne	1001f2c <deque_add_at+0x38>
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 10020c0:	e15e0003 	cmp	lr, r3
 10020c4:	9a00001b 	bls	1002138 <deque_add_at+0x244>
    deque->buffer[deque->first] = element;
 10020c8:	e5941010 	ldr	r1, [r4, #16]
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 10020cc:	e2422001 	sub	r2, r2, #1
 10020d0:	e0066002 	and	r6, r6, r2
    deque->size++;
 10020d4:	e2833001 	add	r3, r3, #1
    deque->first = (deque->first - 1) & (deque->capacity - 1);
 10020d8:	e5846008 	str	r6, [r4, #8]
    return CC_OK;
 10020dc:	e3a00000 	mov	r0, #0
    deque->buffer[deque->first] = element;
 10020e0:	e7818106 	str	r8, [r1, r6, lsl #2]
    deque->size++;
 10020e4:	e5843000 	str	r3, [r4]
    return CC_OK;
 10020e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 10020ec:	e3a00001 	mov	r0, #1
 10020f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 10020f4:	e15e0003 	cmp	lr, r3
 10020f8:	0a000017 	beq	100215c <deque_add_at+0x268>
    deque->buffer[deque->last] = element;
 10020fc:	e5942010 	ldr	r2, [r4, #16]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002100:	e28a1001 	add	r1, sl, #1
    deque->size++;
 1002104:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002108:	e0066001 	and	r6, r6, r1
    return CC_OK;
 100210c:	e3a00000 	mov	r0, #0
    deque->buffer[deque->last] = element;
 1002110:	e782810a 	str	r8, [r2, sl, lsl #2]
    deque->size++;
 1002114:	e5843000 	str	r3, [r4]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002118:	e584600c 	str	r6, [r4, #12]
    return CC_OK;
 100211c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                memmove(&(deque->buffer[0]),
 1002120:	e28c1004 	add	r1, ip, #4
 1002124:	e1a0000c 	mov	r0, ip
 1002128:	e1a02009 	mov	r2, r9
 100212c:	fa0067ab 	blx	101bfe0 <memmove>
 1002130:	e594c010 	ldr	ip, [r4, #16]
 1002134:	eaffff9c 	b	1001fac <deque_add_at+0xb8>
    if (deque->size >= deque->capacity && expand_capacity(deque) != CC_OK)
 1002138:	e1a00004 	mov	r0, r4
 100213c:	ebfffe54 	bl	1001a94 <expand_capacity>
 1002140:	e3500000 	cmp	r0, #0
 1002144:	1affffe8 	bne	10020ec <deque_add_at+0x1f8>
 1002148:	e5946004 	ldr	r6, [r4, #4]
 100214c:	e5942008 	ldr	r2, [r4, #8]
 1002150:	e5943000 	ldr	r3, [r4]
 1002154:	e2466001 	sub	r6, r6, #1
 1002158:	eaffffda 	b	10020c8 <deque_add_at+0x1d4>
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 100215c:	e1a00004 	mov	r0, r4
 1002160:	ebfffe4b 	bl	1001a94 <expand_capacity>
 1002164:	e3500000 	cmp	r0, #0
 1002168:	1affffdf 	bne	10020ec <deque_add_at+0x1f8>
 100216c:	e5946004 	ldr	r6, [r4, #4]
 1002170:	e594a00c 	ldr	sl, [r4, #12]
 1002174:	e5943000 	ldr	r3, [r4]
 1002178:	e2466001 	sub	r6, r6, #1
 100217c:	eaffffde 	b	10020fc <deque_add_at+0x208>

01002180 <deque_replace_at>:
    if (index >= deque->size)
 1002180:	e590c000 	ldr	ip, [r0]
 1002184:	e15c0002 	cmp	ip, r2
 1002188:	9a000010 	bls	10021d0 <deque_replace_at+0x50>
    size_t i = (deque->first + index) & (deque->capacity - 1);
 100218c:	e590c004 	ldr	ip, [r0, #4]
    if (out)
 1002190:	e3530000 	cmp	r3, #0
{
 1002194:	e92d4010 	push	{r4, lr}
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1002198:	e590e008 	ldr	lr, [r0, #8]
 100219c:	e24cc001 	sub	ip, ip, #1
 10021a0:	e5904010 	ldr	r4, [r0, #16]
 10021a4:	e082200e 	add	r2, r2, lr
 10021a8:	e002200c 	and	r2, r2, ip
 10021ac:	e1a0e102 	lsl	lr, r2, #2
        *out = deque->buffer[i];
 10021b0:	17942102 	ldrne	r2, [r4, r2, lsl #2]
 10021b4:	e084c00e 	add	ip, r4, lr
 10021b8:	15832000 	strne	r2, [r3]
 10021bc:	1590c010 	ldrne	ip, [r0, #16]
    return CC_OK;
 10021c0:	e3a00000 	mov	r0, #0
 10021c4:	108cc00e 	addne	ip, ip, lr
    deque->buffer[i] = element;
 10021c8:	e58c1000 	str	r1, [ip]
}
 10021cc:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 10021d0:	e3a00008 	mov	r0, #8
}
 10021d4:	e12fff1e 	bx	lr

010021d8 <deque_remove_at>:
    if (index >= deque->size)
 10021d8:	e5903000 	ldr	r3, [r0]
 10021dc:	e1530001 	cmp	r3, r1
 10021e0:	9a000037 	bls	10022c4 <deque_remove_at+0xec>
{
 10021e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (index == 0)
 10021e8:	e3510000 	cmp	r1, #0
    const size_t c = deque->capacity - 1;
 10021ec:	e5905004 	ldr	r5, [r0, #4]
    const size_t f = deque->first & c;
 10021f0:	e590c008 	ldr	ip, [r0, #8]
    void *removed  = deque->buffer[index];
 10021f4:	e590e010 	ldr	lr, [r0, #16]
    const size_t c = deque->capacity - 1;
 10021f8:	e2455001 	sub	r5, r5, #1
    if (index == 0)
 10021fc:	0a000023 	beq	1002290 <deque_remove_at+0xb8>
    if (index == c)
 1002200:	e1510005 	cmp	r1, r5
    const size_t l = deque->last & c;
 1002204:	e590900c 	ldr	r9, [r0, #12]
    if (index == c)
 1002208:	0a00004f 	beq	100234c <deque_remove_at+0x174>
    if (index <= (deque->size / 2) - 1) {
 100220c:	e1a030a3 	lsr	r3, r3, #1
    const size_t p = (deque->first + index) & c;
 1002210:	e08c7001 	add	r7, ip, r1
 1002214:	e1a06002 	mov	r6, r2
    void *removed  = deque->buffer[index];
 1002218:	e79e8101 	ldr	r8, [lr, r1, lsl #2]
    if (index <= (deque->size / 2) - 1) {
 100221c:	e2433001 	sub	r3, r3, #1
 1002220:	e1a04000 	mov	r4, r0
 1002224:	e1530001 	cmp	r3, r1
    const size_t p = (deque->first + index) & c;
 1002228:	e0077005 	and	r7, r7, r5
    void *removed  = deque->buffer[index];
 100222c:	e1a02101 	lsl	r2, r1, #2
    if (index <= (deque->size / 2) - 1) {
 1002230:	3a000025 	bcc	10022cc <deque_remove_at+0xf4>
    const size_t f = deque->first & c;
 1002234:	e00cc005 	and	ip, ip, r5
        if (p < f) {
 1002238:	e15c0007 	cmp	ip, r7
 100223c:	9a00004d 	bls	1002378 <deque_remove_at+0x1a0>
            if (f != c) {
 1002240:	e155000c 	cmp	r5, ip
            void *e = deque->buffer[c];
 1002244:	e79e9105 	ldr	r9, [lr, r5, lsl #2]
            if (f != c) {
 1002248:	0a000008 	beq	1002270 <deque_remove_at+0x98>
                memmove(&(deque->buffer[f + 1]),
 100224c:	e28c0001 	add	r0, ip, #1
                        (c - f) * sizeof(void*));
 1002250:	e045c00c 	sub	ip, r5, ip
                memmove(&(deque->buffer[f + 1]),
 1002254:	e1a00100 	lsl	r0, r0, #2
 1002258:	e1a0210c 	lsl	r2, ip, #2
                        &(deque->buffer[f]),
 100225c:	e2401004 	sub	r1, r0, #4
                memmove(&(deque->buffer[f + 1]),
 1002260:	e08e0000 	add	r0, lr, r0
 1002264:	e08e1001 	add	r1, lr, r1
 1002268:	fa00675c 	blx	101bfe0 <memmove>
 100226c:	e594e010 	ldr	lr, [r4, #16]
            if (p != 0) {
 1002270:	e3570000 	cmp	r7, #0
 1002274:	1a000050 	bne	10023bc <deque_remove_at+0x1e4>
            deque->buffer[0] = e;
 1002278:	e58e9000 	str	r9, [lr]
        deque->first = (deque->first + 1) & c;
 100227c:	e5943008 	ldr	r3, [r4, #8]
 1002280:	e2833001 	add	r3, r3, #1
 1002284:	e0055003 	and	r5, r5, r3
 1002288:	e5845008 	str	r5, [r4, #8]
 100228c:	ea000026 	b	100232c <deque_remove_at+0x154>
    if (deque->size == 0)
 1002290:	e3530000 	cmp	r3, #0
 1002294:	0a000046 	beq	10023b4 <deque_remove_at+0x1dc>
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002298:	e28c4001 	add	r4, ip, #1
    if (out)
 100229c:	e3520000 	cmp	r2, #0
    deque->size--;
 10022a0:	e2433001 	sub	r3, r3, #1
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 10022a4:	e0055004 	and	r5, r5, r4
    void *element = deque->buffer[deque->first];
 10022a8:	e79ec10c 	ldr	ip, [lr, ip, lsl #2]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 10022ac:	e5805008 	str	r5, [r0, #8]
    deque->size--;
 10022b0:	e5803000 	str	r3, [r0]
    if (out)
 10022b4:	0a000000 	beq	10022bc <deque_remove_at+0xe4>
        *out = element;
 10022b8:	e582c000 	str	ip, [r2]
    return CC_OK;
 10022bc:	e3a00000 	mov	r0, #0
 10022c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_OUT_OF_RANGE;
 10022c4:	e3a00008 	mov	r0, #8
}
 10022c8:	e12fff1e 	bx	lr
    const size_t l = deque->last & c;
 10022cc:	e0099005 	and	r9, r9, r5
        if (p > l) {
 10022d0:	e1590007 	cmp	r9, r7
 10022d4:	2a00002e 	bcs	1002394 <deque_remove_at+0x1bc>
            if (p != c) {
 10022d8:	e1550007 	cmp	r5, r7
            void *e = deque->buffer[0];
 10022dc:	e59ea000 	ldr	sl, [lr]
            if (p != c) {
 10022e0:	0a000007 	beq	1002304 <deque_remove_at+0x12c>
                memmove(&(deque->buffer[p]),
 10022e4:	e1a00107 	lsl	r0, r7, #2
                        (c - p) * sizeof(void*));
 10022e8:	e0452007 	sub	r2, r5, r7
                memmove(&(deque->buffer[p]),
 10022ec:	e1a02102 	lsl	r2, r2, #2
 10022f0:	e2801004 	add	r1, r0, #4
 10022f4:	e08e1001 	add	r1, lr, r1
 10022f8:	e08e0000 	add	r0, lr, r0
 10022fc:	fa006737 	blx	101bfe0 <memmove>
 1002300:	e594e010 	ldr	lr, [r4, #16]
                memmove(&(deque->buffer[1]),
 1002304:	e1a02109 	lsl	r2, r9, #2
 1002308:	e1a0100e 	mov	r1, lr
 100230c:	e28e0004 	add	r0, lr, #4
 1002310:	fa006732 	blx	101bfe0 <memmove>
            deque->buffer[c] = e;
 1002314:	e5943010 	ldr	r3, [r4, #16]
 1002318:	e783a105 	str	sl, [r3, r5, lsl #2]
        deque->last = (deque->last- 1) & c;
 100231c:	e594300c 	ldr	r3, [r4, #12]
 1002320:	e2433001 	sub	r3, r3, #1
 1002324:	e0055003 	and	r5, r5, r3
 1002328:	e584500c 	str	r5, [r4, #12]
    deque->size--;
 100232c:	e5943000 	ldr	r3, [r4]
    if (out)
 1002330:	e3560000 	cmp	r6, #0
    deque->size--;
 1002334:	e2433001 	sub	r3, r3, #1
 1002338:	e5843000 	str	r3, [r4]
    if (out)
 100233c:	0affffde 	beq	10022bc <deque_remove_at+0xe4>
        *out = removed;
 1002340:	e5868000 	str	r8, [r6]
    return CC_OK;
 1002344:	e3a00000 	mov	r0, #0
 1002348:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (deque->size == 0)
 100234c:	e3530000 	cmp	r3, #0
 1002350:	0a000017 	beq	10023b4 <deque_remove_at+0x1dc>
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1002354:	e2499001 	sub	r9, r9, #1
    if (out)
 1002358:	e3520000 	cmp	r2, #0
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 100235c:	e0011009 	and	r1, r1, r9
    deque->size--;
 1002360:	e2433001 	sub	r3, r3, #1
    void   *element = deque->buffer[last];
 1002364:	e79ec101 	ldr	ip, [lr, r1, lsl #2]
    deque->last = last;
 1002368:	e580100c 	str	r1, [r0, #12]
    deque->size--;
 100236c:	e5803000 	str	r3, [r0]
    if (out)
 1002370:	1affffd0 	bne	10022b8 <deque_remove_at+0xe0>
 1002374:	eaffffd0 	b	10022bc <deque_remove_at+0xe4>
            memmove(&(deque->buffer[f + 1]),
 1002378:	e28cc001 	add	ip, ip, #1
 100237c:	e1a0010c 	lsl	r0, ip, #2
                    &(deque->buffer[f]),
 1002380:	e2401004 	sub	r1, r0, #4
            memmove(&(deque->buffer[f + 1]),
 1002384:	e08e0000 	add	r0, lr, r0
 1002388:	e08e1001 	add	r1, lr, r1
 100238c:	fa006713 	blx	101bfe0 <memmove>
 1002390:	eaffffb9 	b	100227c <deque_remove_at+0xa4>
            memmove(&(deque->buffer[p]),
 1002394:	e1a00107 	lsl	r0, r7, #2
                    (l - p) * sizeof(void*));
 1002398:	e0499007 	sub	r9, r9, r7
            memmove(&(deque->buffer[p]),
 100239c:	e1a02109 	lsl	r2, r9, #2
 10023a0:	e2801004 	add	r1, r0, #4
 10023a4:	e08e1001 	add	r1, lr, r1
 10023a8:	e08e0000 	add	r0, lr, r0
 10023ac:	fa00670b 	blx	101bfe0 <memmove>
 10023b0:	eaffffd9 	b	100231c <deque_remove_at+0x144>
        return CC_ERR_OUT_OF_RANGE;
 10023b4:	e3a00008 	mov	r0, #8
}
 10023b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                memmove(&(deque->buffer[1]),
 10023bc:	e1a0100e 	mov	r1, lr
 10023c0:	e28e0004 	add	r0, lr, #4
 10023c4:	e1a02107 	lsl	r2, r7, #2
 10023c8:	fa006704 	blx	101bfe0 <memmove>
 10023cc:	e594e010 	ldr	lr, [r4, #16]
 10023d0:	eaffffa8 	b	1002278 <deque_remove_at+0xa0>

010023d4 <deque_remove>:
{
 10023d4:	e92d4070 	push	{r4, r5, r6, lr}
    for (i = 0; i < deque->size; i++) {
 10023d8:	e5904000 	ldr	r4, [r0]
 10023dc:	e3540000 	cmp	r4, #0
 10023e0:	0a000011 	beq	100242c <deque_remove+0x58>
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10023e4:	e590e004 	ldr	lr, [r0, #4]
 10023e8:	e5905008 	ldr	r5, [r0, #8]
        if (deque->buffer[p] == element) {
 10023ec:	e5906010 	ldr	r6, [r0, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10023f0:	e24ee001 	sub	lr, lr, #1
 10023f4:	e005300e 	and	r3, r5, lr
        if (deque->buffer[p] == element) {
 10023f8:	e7963103 	ldr	r3, [r6, r3, lsl #2]
 10023fc:	e1510003 	cmp	r1, r3
    for (i = 0; i < deque->size; i++) {
 1002400:	e3a03000 	mov	r3, #0
        if (deque->buffer[p] == element) {
 1002404:	1a000003 	bne	1002418 <deque_remove+0x44>
 1002408:	ea000009 	b	1002434 <deque_remove+0x60>
 100240c:	e796c10c 	ldr	ip, [r6, ip, lsl #2]
 1002410:	e151000c 	cmp	r1, ip
 1002414:	0a000006 	beq	1002434 <deque_remove+0x60>
    for (i = 0; i < deque->size; i++) {
 1002418:	e2833001 	add	r3, r3, #1
 100241c:	e1530004 	cmp	r3, r4
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002420:	e083c005 	add	ip, r3, r5
 1002424:	e00cc00e 	and	ip, ip, lr
    for (i = 0; i < deque->size; i++) {
 1002428:	1afffff7 	bne	100240c <deque_remove+0x38>
}
 100242c:	e3a00008 	mov	r0, #8
 1002430:	e8bd8070 	pop	{r4, r5, r6, pc}
    return deque_remove_at(deque, index, out);
 1002434:	e1a01003 	mov	r1, r3
}
 1002438:	e8bd4070 	pop	{r4, r5, r6, lr}
    return deque_remove_at(deque, index, out);
 100243c:	eaffff65 	b	10021d8 <deque_remove_at>

01002440 <deque_remove_first>:
    if (deque->size == 0)
 1002440:	e5902000 	ldr	r2, [r0]
 1002444:	e3520000 	cmp	r2, #0
 1002448:	0a00000e 	beq	1002488 <deque_remove_first+0x48>
    void *element = deque->buffer[deque->first];
 100244c:	e590c008 	ldr	ip, [r0, #8]
    if (out)
 1002450:	e3510000 	cmp	r1, #0
{
 1002454:	e92d4010 	push	{r4, lr}
    deque->size--;
 1002458:	e2422001 	sub	r2, r2, #1
    void *element = deque->buffer[deque->first];
 100245c:	e590e010 	ldr	lr, [r0, #16]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002460:	e28c4001 	add	r4, ip, #1
 1002464:	e5903004 	ldr	r3, [r0, #4]
    void *element = deque->buffer[deque->first];
 1002468:	e79ec10c 	ldr	ip, [lr, ip, lsl #2]
    deque->size--;
 100246c:	e5802000 	str	r2, [r0]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002470:	e2433001 	sub	r3, r3, #1
 1002474:	e0033004 	and	r3, r3, r4
 1002478:	e5803008 	str	r3, [r0, #8]
    return CC_OK;
 100247c:	e3a00000 	mov	r0, #0
        *out = element;
 1002480:	1581c000 	strne	ip, [r1]
 1002484:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1002488:	e3a00008 	mov	r0, #8
}
 100248c:	e12fff1e 	bx	lr

01002490 <deque_remove_last>:
    if (deque->size == 0)
 1002490:	e5902000 	ldr	r2, [r0]
 1002494:	e3520000 	cmp	r2, #0
 1002498:	0a00000e 	beq	10024d8 <deque_remove_last+0x48>
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 100249c:	e590300c 	ldr	r3, [r0, #12]
    if (out)
 10024a0:	e3510000 	cmp	r1, #0
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 10024a4:	e590c004 	ldr	ip, [r0, #4]
    deque->size--;
 10024a8:	e2422001 	sub	r2, r2, #1
{
 10024ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    void   *element = deque->buffer[last];
 10024b0:	e590e010 	ldr	lr, [r0, #16]
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 10024b4:	e2433001 	sub	r3, r3, #1
 10024b8:	e24cc001 	sub	ip, ip, #1
 10024bc:	e003300c 	and	r3, r3, ip
    void   *element = deque->buffer[last];
 10024c0:	e79ec103 	ldr	ip, [lr, r3, lsl #2]
    deque->size--;
 10024c4:	e5802000 	str	r2, [r0]
    deque->last = last;
 10024c8:	e580300c 	str	r3, [r0, #12]
    return CC_OK;
 10024cc:	e3a00000 	mov	r0, #0
        *out = element;
 10024d0:	1581c000 	strne	ip, [r1]
 10024d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_ERR_OUT_OF_RANGE;
 10024d8:	e3a00008 	mov	r0, #8
}
 10024dc:	e12fff1e 	bx	lr

010024e0 <deque_remove_all>:
    deque->first = 0;
 10024e0:	e3a03000 	mov	r3, #0
 10024e4:	e5803008 	str	r3, [r0, #8]
    deque->last  = 0;
 10024e8:	e580300c 	str	r3, [r0, #12]
    deque->size  = 0;
 10024ec:	e5803000 	str	r3, [r0]
}
 10024f0:	e12fff1e 	bx	lr

010024f4 <deque_remove_all_cb>:
    for (i = 0; i < deque->size; i++) {
 10024f4:	e5903000 	ldr	r3, [r0]
{
 10024f8:	e92d4070 	push	{r4, r5, r6, lr}
 10024fc:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 1002500:	e3530000 	cmp	r3, #0
 1002504:	0a00000c 	beq	100253c <deque_remove_all_cb+0x48>
 1002508:	e1a06001 	mov	r6, r1
 100250c:	e3a05000 	mov	r5, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002510:	e1c420d4 	ldrd	r2, [r4, #4]
        fn(deque->buffer[p]);
 1002514:	e5941010 	ldr	r1, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002518:	e0853003 	add	r3, r5, r3
 100251c:	e2422001 	sub	r2, r2, #1
 1002520:	e0033002 	and	r3, r3, r2
    for (i = 0; i < deque->size; i++) {
 1002524:	e2855001 	add	r5, r5, #1
        fn(deque->buffer[p]);
 1002528:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 100252c:	e12fff36 	blx	r6
    for (i = 0; i < deque->size; i++) {
 1002530:	e5943000 	ldr	r3, [r4]
 1002534:	e1550003 	cmp	r5, r3
 1002538:	3afffff4 	bcc	1002510 <deque_remove_all_cb+0x1c>
    deque->first = 0;
 100253c:	e3a03000 	mov	r3, #0
 1002540:	e5843008 	str	r3, [r4, #8]
    deque->last  = 0;
 1002544:	e584300c 	str	r3, [r4, #12]
    deque->size  = 0;
 1002548:	e5843000 	str	r3, [r4]
}
 100254c:	e8bd8070 	pop	{r4, r5, r6, pc}

01002550 <deque_get_at>:
{
 1002550:	e1a03000 	mov	r3, r0
    if (index > deque->size)
 1002554:	e5900000 	ldr	r0, [r0]
 1002558:	e1500001 	cmp	r0, r1
 100255c:	3a00000a 	bcc	100258c <deque_get_at+0x3c>
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1002560:	e593c004 	ldr	ip, [r3, #4]
    return CC_OK;
 1002564:	e3a00000 	mov	r0, #0
{
 1002568:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    size_t i = (deque->first + index) & (deque->capacity - 1);
 100256c:	e593e008 	ldr	lr, [r3, #8]
 1002570:	e24cc001 	sub	ip, ip, #1
    *out = deque->buffer[i];
 1002574:	e5933010 	ldr	r3, [r3, #16]
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1002578:	e081100e 	add	r1, r1, lr
 100257c:	e001100c 	and	r1, r1, ip
    *out = deque->buffer[i];
 1002580:	e7933101 	ldr	r3, [r3, r1, lsl #2]
 1002584:	e5823000 	str	r3, [r2]
}
 1002588:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_ERR_OUT_OF_RANGE;
 100258c:	e3a00008 	mov	r0, #8
}
 1002590:	e12fff1e 	bx	lr

01002594 <deque_get_first>:
    if (deque->size == 0)
 1002594:	e5902000 	ldr	r2, [r0]
{
 1002598:	e1a03000 	mov	r3, r0
    if (deque->size == 0)
 100259c:	e3520000 	cmp	r2, #0
    *out = deque->buffer[deque->first];
 10025a0:	15902008 	ldrne	r2, [r0, #8]
    return CC_OK;
 10025a4:	13a00000 	movne	r0, #0
    *out = deque->buffer[deque->first];
 10025a8:	15933010 	ldrne	r3, [r3, #16]
        return CC_ERR_OUT_OF_RANGE;
 10025ac:	03a00008 	moveq	r0, #8
    *out = deque->buffer[deque->first];
 10025b0:	17933102 	ldrne	r3, [r3, r2, lsl #2]
 10025b4:	15813000 	strne	r3, [r1]
}
 10025b8:	e12fff1e 	bx	lr

010025bc <deque_get_last>:
    if (deque->size == 0)
 10025bc:	e5903000 	ldr	r3, [r0]
{
 10025c0:	e1a02000 	mov	r2, r0
    if (deque->size == 0)
 10025c4:	e3530000 	cmp	r3, #0
    size_t last = (deque->last - 1) & (deque->capacity - 1);
 10025c8:	1590300c 	ldrne	r3, [r0, #12]
    return CC_OK;
 10025cc:	13a00000 	movne	r0, #0
    size_t last = (deque->last - 1) & (deque->capacity - 1);
 10025d0:	1592c004 	ldrne	ip, [r2, #4]
        return CC_ERR_OUT_OF_RANGE;
 10025d4:	03a00008 	moveq	r0, #8
    *out = deque->buffer[last];
 10025d8:	15922010 	ldrne	r2, [r2, #16]
    size_t last = (deque->last - 1) & (deque->capacity - 1);
 10025dc:	12433001 	subne	r3, r3, #1
 10025e0:	124cc001 	subne	ip, ip, #1
 10025e4:	1003300c 	andne	r3, r3, ip
    *out = deque->buffer[last];
 10025e8:	17923103 	ldrne	r3, [r2, r3, lsl #2]
 10025ec:	15813000 	strne	r3, [r1]
}
 10025f0:	e12fff1e 	bx	lr

010025f4 <deque_copy_shallow>:
{
 10025f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10025f8:	e1a04000 	mov	r4, r0
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 10025fc:	e5943014 	ldr	r3, [r4, #20]
 1002600:	e3a00020 	mov	r0, #32
{
 1002604:	e1a07001 	mov	r7, r1
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 1002608:	e12fff33 	blx	r3
    if (!copy)
 100260c:	e2505000 	subs	r5, r0, #0
 1002610:	0a00002b 	beq	10026c4 <deque_copy_shallow+0xd0>
    if (!(copy->buffer = deque->mem_alloc(deque->capacity * sizeof(void*)))) {
 1002614:	e5940004 	ldr	r0, [r4, #4]
 1002618:	e5943014 	ldr	r3, [r4, #20]
 100261c:	e1a00100 	lsl	r0, r0, #2
 1002620:	e12fff33 	blx	r3
 1002624:	e3500000 	cmp	r0, #0
 1002628:	e1a06000 	mov	r6, r0
 100262c:	e5850010 	str	r0, [r5, #16]
 1002630:	0a00001e 	beq	10026b0 <deque_copy_shallow+0xbc>
    copy->size       = deque->size;
 1002634:	e1c420d0 	ldrd	r2, [r4]
    copy->mem_alloc  = deque->mem_alloc;
 1002638:	e2841014 	add	r1, r4, #20
    copy->size       = deque->size;
 100263c:	e1c520f0 	strd	r2, [r5]
    copy->mem_alloc  = deque->mem_alloc;
 1002640:	e891000e 	ldm	r1, {r1, r2, r3}
 1002644:	e5851014 	str	r1, [r5, #20]
 1002648:	e1c521f8 	strd	r2, [r5, #24]
        if (deque->last > deque->first) {
 100264c:	e5943008 	ldr	r3, [r4, #8]
 1002650:	e594900c 	ldr	r9, [r4, #12]
 1002654:	e5941010 	ldr	r1, [r4, #16]
 1002658:	e1590003 	cmp	r9, r3
 100265c:	e0811103 	add	r1, r1, r3, lsl #2
 1002660:	8a00000e 	bhi	10026a0 <deque_copy_shallow+0xac>
            size_t e = deque->capacity - deque->first;
 1002664:	e5948004 	ldr	r8, [r4, #4]
 1002668:	e0488003 	sub	r8, r8, r3
            memcpy(buff,
 100266c:	e1a08108 	lsl	r8, r8, #2
 1002670:	e1a02008 	mov	r2, r8
 1002674:	eb0064e1 	bl	101ba00 <memcpy>
            memcpy(&(buff[e]),
 1002678:	e0860008 	add	r0, r6, r8
 100267c:	e1a02109 	lsl	r2, r9, #2
 1002680:	e5941010 	ldr	r1, [r4, #16]
 1002684:	eb0064dd 	bl	101ba00 <memcpy>
    copy->last  = copy->size;
 1002688:	e5953000 	ldr	r3, [r5]
    copy->first = 0;
 100268c:	e3a00000 	mov	r0, #0
 1002690:	e5850008 	str	r0, [r5, #8]
    copy->last  = copy->size;
 1002694:	e585300c 	str	r3, [r5, #12]
    *out = copy;
 1002698:	e5875000 	str	r5, [r7]
    return CC_OK;
 100269c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            memcpy(buff,
 10026a0:	e5942000 	ldr	r2, [r4]
 10026a4:	e1a02102 	lsl	r2, r2, #2
 10026a8:	eb0064d4 	bl	101ba00 <memcpy>
 10026ac:	eafffff5 	b	1002688 <deque_copy_shallow+0x94>
        deque->mem_free(copy);
 10026b0:	e1a00005 	mov	r0, r5
 10026b4:	e594301c 	ldr	r3, [r4, #28]
 10026b8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10026bc:	e3a00001 	mov	r0, #1
 10026c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 10026c4:	e3a00001 	mov	r0, #1
}
 10026c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010026cc <deque_copy_deep>:
{
 10026cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10026d0:	e1a04000 	mov	r4, r0
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 10026d4:	e5943014 	ldr	r3, [r4, #20]
 10026d8:	e3a00020 	mov	r0, #32
{
 10026dc:	e1a07001 	mov	r7, r1
 10026e0:	e1a08002 	mov	r8, r2
    Deque *copy = deque->mem_alloc(sizeof(Deque));
 10026e4:	e12fff33 	blx	r3
    if (!copy)
 10026e8:	e2505000 	subs	r5, r0, #0
 10026ec:	0a00003a 	beq	10027dc <deque_copy_deep+0x110>
    if (!(copy->buffer = deque->mem_alloc(deque->capacity * sizeof(void*)))) {
 10026f0:	e5940004 	ldr	r0, [r4, #4]
 10026f4:	e5943014 	ldr	r3, [r4, #20]
 10026f8:	e1a00100 	lsl	r0, r0, #2
 10026fc:	e12fff33 	blx	r3
 1002700:	e3500000 	cmp	r0, #0
 1002704:	e1a06000 	mov	r6, r0
 1002708:	e5850010 	str	r0, [r5, #16]
 100270c:	0a000022 	beq	100279c <deque_copy_deep+0xd0>
    copy->capacity   = deque->capacity;
 1002710:	e5942004 	ldr	r2, [r4, #4]
    if (cp == NULL) {
 1002714:	e3570000 	cmp	r7, #0
    copy->size       = deque->size;
 1002718:	e5943000 	ldr	r3, [r4]
    copy->mem_alloc  = deque->mem_alloc;
 100271c:	e594c014 	ldr	ip, [r4, #20]
    copy->mem_calloc = deque->mem_calloc;
 1002720:	e5941018 	ldr	r1, [r4, #24]
    copy->capacity   = deque->capacity;
 1002724:	e5852004 	str	r2, [r5, #4]
    copy->mem_free   = deque->mem_free;
 1002728:	e594201c 	ldr	r2, [r4, #28]
    copy->size       = deque->size;
 100272c:	e5853000 	str	r3, [r5]
    copy->mem_alloc  = deque->mem_alloc;
 1002730:	e585c014 	str	ip, [r5, #20]
    copy->mem_calloc = deque->mem_calloc;
 1002734:	e5851018 	str	r1, [r5, #24]
    copy->mem_free   = deque->mem_free;
 1002738:	e585201c 	str	r2, [r5, #28]
    if (cp == NULL) {
 100273c:	0a00001b 	beq	10027b0 <deque_copy_deep+0xe4>
        for (i = 0; i < deque->size; i++) {
 1002740:	e5942000 	ldr	r2, [r4]
 1002744:	e3520000 	cmp	r2, #0
 1002748:	12409004 	subne	r9, r0, #4
 100274c:	13a06000 	movne	r6, #0
 1002750:	0a00000c 	beq	1002788 <deque_copy_deep+0xbc>
            size_t p = (deque->first + i) & (deque->capacity - 1);
 1002754:	e1c420d4 	ldrd	r2, [r4, #4]
            buff[i]  = cp(deque->buffer[p]);
 1002758:	e5941010 	ldr	r1, [r4, #16]
            size_t p = (deque->first + i) & (deque->capacity - 1);
 100275c:	e0863003 	add	r3, r6, r3
 1002760:	e2422001 	sub	r2, r2, #1
 1002764:	e0033002 	and	r3, r3, r2
        for (i = 0; i < deque->size; i++) {
 1002768:	e2866001 	add	r6, r6, #1
            buff[i]  = cp(deque->buffer[p]);
 100276c:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 1002770:	e12fff37 	blx	r7
        for (i = 0; i < deque->size; i++) {
 1002774:	e5943000 	ldr	r3, [r4]
            buff[i]  = cp(deque->buffer[p]);
 1002778:	e5a90004 	str	r0, [r9, #4]!
        for (i = 0; i < deque->size; i++) {
 100277c:	e1560003 	cmp	r6, r3
 1002780:	3afffff3 	bcc	1002754 <deque_copy_deep+0x88>
 1002784:	e5953000 	ldr	r3, [r5]
    copy->first = 0;
 1002788:	e3a00000 	mov	r0, #0
    copy->last  = copy->size;
 100278c:	e585300c 	str	r3, [r5, #12]
    copy->first = 0;
 1002790:	e5850008 	str	r0, [r5, #8]
    *out = copy;
 1002794:	e5885000 	str	r5, [r8]
    return CC_OK;
 1002798:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        deque->mem_free(copy);
 100279c:	e1a00005 	mov	r0, r5
 10027a0:	e594301c 	ldr	r3, [r4, #28]
 10027a4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10027a8:	e3a00001 	mov	r0, #1
 10027ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        if (deque->last > deque->first) {
 10027b0:	e5943008 	ldr	r3, [r4, #8]
 10027b4:	e594900c 	ldr	r9, [r4, #12]
 10027b8:	e5941010 	ldr	r1, [r4, #16]
 10027bc:	e1590003 	cmp	r9, r3
 10027c0:	e0811103 	add	r1, r1, r3, lsl #2
 10027c4:	9a000006 	bls	10027e4 <deque_copy_deep+0x118>
            memcpy(buff,
 10027c8:	e5942000 	ldr	r2, [r4]
 10027cc:	e1a02102 	lsl	r2, r2, #2
 10027d0:	eb00648a 	bl	101ba00 <memcpy>
 10027d4:	e5953000 	ldr	r3, [r5]
 10027d8:	eaffffea 	b	1002788 <deque_copy_deep+0xbc>
        return CC_ERR_ALLOC;
 10027dc:	e3a00001 	mov	r0, #1
}
 10027e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            size_t e = deque->capacity - deque->first;
 10027e4:	e5947004 	ldr	r7, [r4, #4]
 10027e8:	e0477003 	sub	r7, r7, r3
            memcpy(buff,
 10027ec:	e1a07107 	lsl	r7, r7, #2
 10027f0:	e1a02007 	mov	r2, r7
 10027f4:	eb006481 	bl	101ba00 <memcpy>
            memcpy(&(buff[e]),
 10027f8:	e0860007 	add	r0, r6, r7
 10027fc:	e1a02109 	lsl	r2, r9, #2
 1002800:	e5941010 	ldr	r1, [r4, #16]
 1002804:	eb00647d 	bl	101ba00 <memcpy>
 1002808:	e5953000 	ldr	r3, [r5]
 100280c:	eaffffdd 	b	1002788 <deque_copy_deep+0xbc>

01002810 <deque_trim_capacity>:
    if (deque->capacity == deque->size)
 1002810:	e5902004 	ldr	r2, [r0, #4]
 1002814:	e5903000 	ldr	r3, [r0]
 1002818:	e1520003 	cmp	r2, r3
 100281c:	0a000031 	beq	10028e8 <deque_trim_capacity+0xd8>
    if (n >= MAX_POW_TWO)
 1002820:	e3530000 	cmp	r3, #0
{
 1002824:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
        return MAX_POW_TWO;
 1002828:	b3a04102 	movlt	r4, #-2147483648	; 0x80000000
    if (n >= MAX_POW_TWO)
 100282c:	ba000007 	blt	1002850 <deque_trim_capacity+0x40>
    n--;
 1002830:	12434001 	subne	r4, r3, #1
        return 2;
 1002834:	03a04002 	moveq	r4, #2
    n |= n >> 1;
 1002838:	118440a4 	orrne	r4, r4, r4, lsr #1
    n |= n >> 2;
 100283c:	11844124 	orrne	r4, r4, r4, lsr #2
    n |= n >> 4;
 1002840:	11844224 	orrne	r4, r4, r4, lsr #4
    n |= n >> 8;
 1002844:	11844424 	orrne	r4, r4, r4, lsr #8
    n |= n >> 16;
 1002848:	11844824 	orrne	r4, r4, r4, lsr #16
    n++;
 100284c:	12844001 	addne	r4, r4, #1
    if (new_size == deque->capacity)
 1002850:	e1520004 	cmp	r2, r4
 1002854:	0a000027 	beq	10028f8 <deque_trim_capacity+0xe8>
    void **new_buff = deque->mem_alloc(sizeof(void*) * new_size);
 1002858:	e5903014 	ldr	r3, [r0, #20]
 100285c:	e1a05000 	mov	r5, r0
 1002860:	e1a00104 	lsl	r0, r4, #2
 1002864:	e12fff33 	blx	r3
    if (!new_buff)
 1002868:	e2507000 	subs	r7, r0, #0
 100286c:	0a00001f 	beq	10028f0 <deque_trim_capacity+0xe0>
        if (deque->last > deque->first) {
 1002870:	e5953008 	ldr	r3, [r5, #8]
 1002874:	e595800c 	ldr	r8, [r5, #12]
 1002878:	e5951010 	ldr	r1, [r5, #16]
 100287c:	e1580003 	cmp	r8, r3
 1002880:	e0811103 	add	r1, r1, r3, lsl #2
 1002884:	9a00000d 	bls	10028c0 <deque_trim_capacity+0xb0>
            memcpy(buff,
 1002888:	e5952000 	ldr	r2, [r5]
 100288c:	e1a02102 	lsl	r2, r2, #2
 1002890:	eb00645a 	bl	101ba00 <memcpy>
    deque->mem_free(deque->buffer);
 1002894:	e595301c 	ldr	r3, [r5, #28]
 1002898:	e5950010 	ldr	r0, [r5, #16]
 100289c:	e12fff33 	blx	r3
    deque->last     = deque->size;
 10028a0:	e5952000 	ldr	r2, [r5]
    deque->first    = 0;
 10028a4:	e3a03000 	mov	r3, #0
    deque->buffer   = new_buff;
 10028a8:	e5857010 	str	r7, [r5, #16]
    return CC_OK;
 10028ac:	e1a00003 	mov	r0, r3
    deque->capacity = new_size;
 10028b0:	e5854004 	str	r4, [r5, #4]
    deque->last     = deque->size;
 10028b4:	e585200c 	str	r2, [r5, #12]
    deque->first    = 0;
 10028b8:	e5853008 	str	r3, [r5, #8]
    return CC_OK;
 10028bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            size_t e = deque->capacity - deque->first;
 10028c0:	e5956004 	ldr	r6, [r5, #4]
 10028c4:	e0466003 	sub	r6, r6, r3
            memcpy(buff,
 10028c8:	e1a06106 	lsl	r6, r6, #2
 10028cc:	e1a02006 	mov	r2, r6
 10028d0:	eb00644a 	bl	101ba00 <memcpy>
            memcpy(&(buff[e]),
 10028d4:	e0870006 	add	r0, r7, r6
 10028d8:	e1a02108 	lsl	r2, r8, #2
 10028dc:	e5951010 	ldr	r1, [r5, #16]
 10028e0:	eb006446 	bl	101ba00 <memcpy>
 10028e4:	eaffffea 	b	1002894 <deque_trim_capacity+0x84>
        return CC_OK;
 10028e8:	e3a00000 	mov	r0, #0
}
 10028ec:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 10028f0:	e3a00001 	mov	r0, #1
}
 10028f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_OK;
 10028f8:	e3a00000 	mov	r0, #0
 10028fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01002900 <deque_reverse>:
{
 1002900:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    size_t c = deque->capacity - 1;
 1002904:	e8904080 	ldm	r0, {r7, lr}
    size_t first = deque->first;
 1002908:	e5903008 	ldr	r3, [r0, #8]
    for (i = 0, j = s - 1; i < (s - 1) / 2; i++, j--) {
 100290c:	e2476001 	sub	r6, r7, #1
 1002910:	e1b060a6 	lsrs	r6, r6, #1
 1002914:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
 1002918:	e0877083 	add	r7, r7, r3, lsl #1
 100291c:	e24ee001 	sub	lr, lr, #1
 1002920:	e0836006 	add	r6, r3, r6
 1002924:	e2477001 	sub	r7, r7, #1
        void *tmp = deque->buffer[f];
 1002928:	e5901010 	ldr	r1, [r0, #16]
        size_t l = (first + j) & c;
 100292c:	e0472003 	sub	r2, r7, r3
 1002930:	e002200e 	and	r2, r2, lr
        size_t f = (first + i) & c;
 1002934:	e00ec003 	and	ip, lr, r3
 1002938:	e2833001 	add	r3, r3, #1
        deque->buffer[f] = deque->buffer[l];
 100293c:	e7915102 	ldr	r5, [r1, r2, lsl #2]
    for (i = 0, j = s - 1; i < (s - 1) / 2; i++, j--) {
 1002940:	e1560003 	cmp	r6, r3
        void *tmp = deque->buffer[f];
 1002944:	e791410c 	ldr	r4, [r1, ip, lsl #2]
        deque->buffer[f] = deque->buffer[l];
 1002948:	e781510c 	str	r5, [r1, ip, lsl #2]
        deque->buffer[l] = tmp;
 100294c:	e5901010 	ldr	r1, [r0, #16]
 1002950:	e7814102 	str	r4, [r1, r2, lsl #2]
    for (i = 0, j = s - 1; i < (s - 1) / 2; i++, j--) {
 1002954:	1afffff3 	bne	1002928 <deque_reverse+0x28>
 1002958:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0100295c <deque_contains>:
{
 100295c:	e1a02000 	mov	r2, r0
    for (i = 0; i < deque->size; i++) {
 1002960:	e5900000 	ldr	r0, [r0]
 1002964:	e3500000 	cmp	r0, #0
 1002968:	012fff1e 	bxeq	lr
        size_t p = (deque->first + i) & (deque->capacity - 1);
 100296c:	e5923008 	ldr	r3, [r2, #8]
 1002970:	e592c004 	ldr	ip, [r2, #4]
{
 1002974:	e92d4010 	push	{r4, lr}
        if (deque->buffer[p] == element)
 1002978:	e5924010 	ldr	r4, [r2, #16]
 100297c:	e083e000 	add	lr, r3, r0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002980:	e24cc001 	sub	ip, ip, #1
    size_t o = 0;
 1002984:	e3a00000 	mov	r0, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002988:	e00c2003 	and	r2, ip, r3
        if (deque->buffer[p] == element)
 100298c:	e2833001 	add	r3, r3, #1
 1002990:	e7942102 	ldr	r2, [r4, r2, lsl #2]
 1002994:	e1510002 	cmp	r1, r2
            o++;
 1002998:	02800001 	addeq	r0, r0, #1
    for (i = 0; i < deque->size; i++) {
 100299c:	e15e0003 	cmp	lr, r3
 10029a0:	1afffff8 	bne	1002988 <deque_contains+0x2c>
 10029a4:	e8bd8010 	pop	{r4, pc}

010029a8 <deque_contains_value>:
{
 10029a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < deque->size; i++) {
 10029ac:	e5906000 	ldr	r6, [r0]
 10029b0:	e3560000 	cmp	r6, #0
 10029b4:	0a000013 	beq	1002a08 <deque_contains_value+0x60>
    size_t o = 0;
 10029b8:	e3a06000 	mov	r6, #0
 10029bc:	e1a08002 	mov	r8, r2
 10029c0:	e1a07001 	mov	r7, r1
 10029c4:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 10029c8:	e1a05006 	mov	r5, r6
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10029cc:	e5943008 	ldr	r3, [r4, #8]
        if (cmp(deque->buffer[p], element) == 0)
 10029d0:	e1a01007 	mov	r1, r7
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10029d4:	e5942004 	ldr	r2, [r4, #4]
        if (cmp(deque->buffer[p], element) == 0)
 10029d8:	e5940010 	ldr	r0, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 10029dc:	e0853003 	add	r3, r5, r3
 10029e0:	e2855001 	add	r5, r5, #1
 10029e4:	e2422001 	sub	r2, r2, #1
 10029e8:	e0033002 	and	r3, r3, r2
        if (cmp(deque->buffer[p], element) == 0)
 10029ec:	e7900103 	ldr	r0, [r0, r3, lsl #2]
 10029f0:	e12fff38 	blx	r8
    for (i = 0; i < deque->size; i++) {
 10029f4:	e5943000 	ldr	r3, [r4]
        if (cmp(deque->buffer[p], element) == 0)
 10029f8:	e3500000 	cmp	r0, #0
            o++;
 10029fc:	02866001 	addeq	r6, r6, #1
    for (i = 0; i < deque->size; i++) {
 1002a00:	e1530005 	cmp	r3, r5
 1002a04:	8afffff0 	bhi	10029cc <deque_contains_value+0x24>
}
 1002a08:	e1a00006 	mov	r0, r6
 1002a0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01002a10 <deque_index_of>:
{
 1002a10:	e92d4030 	push	{r4, r5, lr}
    for (i = 0; i < deque->size; i++) {
 1002a14:	e590e000 	ldr	lr, [r0]
 1002a18:	e35e0000 	cmp	lr, #0
 1002a1c:	0a000011 	beq	1002a68 <deque_index_of+0x58>
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002a20:	e590c004 	ldr	ip, [r0, #4]
 1002a24:	e5904008 	ldr	r4, [r0, #8]
        if (deque->buffer[p] == element) {
 1002a28:	e5905010 	ldr	r5, [r0, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002a2c:	e24cc001 	sub	ip, ip, #1
 1002a30:	e004300c 	and	r3, r4, ip
        if (deque->buffer[p] == element) {
 1002a34:	e7953103 	ldr	r3, [r5, r3, lsl #2]
 1002a38:	e1510003 	cmp	r1, r3
    for (i = 0; i < deque->size; i++) {
 1002a3c:	e3a03000 	mov	r3, #0
        if (deque->buffer[p] == element) {
 1002a40:	1a000003 	bne	1002a54 <deque_index_of+0x44>
 1002a44:	ea000009 	b	1002a70 <deque_index_of+0x60>
 1002a48:	e7950100 	ldr	r0, [r5, r0, lsl #2]
 1002a4c:	e1500001 	cmp	r0, r1
 1002a50:	0a000006 	beq	1002a70 <deque_index_of+0x60>
    for (i = 0; i < deque->size; i++) {
 1002a54:	e2833001 	add	r3, r3, #1
 1002a58:	e153000e 	cmp	r3, lr
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002a5c:	e0830004 	add	r0, r3, r4
 1002a60:	e000000c 	and	r0, r0, ip
    for (i = 0; i < deque->size; i++) {
 1002a64:	1afffff7 	bne	1002a48 <deque_index_of+0x38>
    return CC_ERR_OUT_OF_RANGE;
 1002a68:	e3a00008 	mov	r0, #8
}
 1002a6c:	e8bd8030 	pop	{r4, r5, pc}
            *index = i;
 1002a70:	e5823000 	str	r3, [r2]
            return CC_OK;
 1002a74:	e3a00000 	mov	r0, #0
 1002a78:	e8bd8030 	pop	{r4, r5, pc}

01002a7c <deque_size>:
}
 1002a7c:	e5900000 	ldr	r0, [r0]
 1002a80:	e12fff1e 	bx	lr

01002a84 <deque_capacity>:
}
 1002a84:	e5900004 	ldr	r0, [r0, #4]
 1002a88:	e12fff1e 	bx	lr

01002a8c <deque_get_buffer>:
}
 1002a8c:	e5900010 	ldr	r0, [r0, #16]
 1002a90:	e12fff1e 	bx	lr

01002a94 <deque_foreach>:
    for (i = 0; i < deque->size; i++) {
 1002a94:	e5903000 	ldr	r3, [r0]
 1002a98:	e3530000 	cmp	r3, #0
 1002a9c:	012fff1e 	bxeq	lr
{
 1002aa0:	e92d4070 	push	{r4, r5, r6, lr}
 1002aa4:	e1a06001 	mov	r6, r1
 1002aa8:	e1a04000 	mov	r4, r0
    for (i = 0; i < deque->size; i++) {
 1002aac:	e3a05000 	mov	r5, #0
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002ab0:	e1c420d4 	ldrd	r2, [r4, #4]
        fn(deque->buffer[p]);
 1002ab4:	e5941010 	ldr	r1, [r4, #16]
        size_t p = (deque->first + i) & (deque->capacity - 1);
 1002ab8:	e0853003 	add	r3, r5, r3
 1002abc:	e2422001 	sub	r2, r2, #1
 1002ac0:	e0033002 	and	r3, r3, r2
    for (i = 0; i < deque->size; i++) {
 1002ac4:	e2855001 	add	r5, r5, #1
        fn(deque->buffer[p]);
 1002ac8:	e7910103 	ldr	r0, [r1, r3, lsl #2]
 1002acc:	e12fff36 	blx	r6
    for (i = 0; i < deque->size; i++) {
 1002ad0:	e5943000 	ldr	r3, [r4]
 1002ad4:	e1530005 	cmp	r3, r5
 1002ad8:	8afffff4 	bhi	1002ab0 <deque_foreach+0x1c>
 1002adc:	e8bd8070 	pop	{r4, r5, r6, pc}

01002ae0 <deque_filter_mut>:
{
 1002ae0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (deque_size(deque) == 0)
 1002ae4:	e5903000 	ldr	r3, [r0]
 1002ae8:	e3530000 	cmp	r3, #0
 1002aec:	0a000051 	beq	1002c38 <deque_filter_mut+0x158>
    size_t i = 0, c = deque->capacity - 1;
 1002af0:	e5907004 	ldr	r7, [r0, #4]
 1002af4:	e1a06001 	mov	r6, r1
 1002af8:	e1a04000 	mov	r4, r0
 1002afc:	e3a05000 	mov	r5, #0
 1002b00:	e2477001 	sub	r7, r7, #1
    return deque->size;
 1002b04:	ea000003 	b	1002b18 <deque_filter_mut+0x38>
            i++;
 1002b08:	e5940000 	ldr	r0, [r4]
 1002b0c:	e2855001 	add	r5, r5, #1
    while (i < deque_size(deque)) {
 1002b10:	e1550000 	cmp	r5, r0
 1002b14:	2a000045 	bcs	1002c30 <deque_filter_mut+0x150>
        size_t d_index = (deque->first + i) & c;
 1002b18:	e5943008 	ldr	r3, [r4, #8]
        if (!pred(deque->buffer[d_index])) {
 1002b1c:	e5942010 	ldr	r2, [r4, #16]
        size_t d_index = (deque->first + i) & c;
 1002b20:	e0853003 	add	r3, r5, r3
 1002b24:	e0033007 	and	r3, r3, r7
        if (!pred(deque->buffer[d_index])) {
 1002b28:	e7920103 	ldr	r0, [r2, r3, lsl #2]
 1002b2c:	e12fff36 	blx	r6
 1002b30:	e3500000 	cmp	r0, #0
 1002b34:	1afffff3 	bne	1002b08 <deque_filter_mut+0x28>
    if (index >= deque->size)
 1002b38:	e5943000 	ldr	r3, [r4]
 1002b3c:	e1530005 	cmp	r3, r5
 1002b40:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const size_t c = deque->capacity - 1;
 1002b44:	e5948004 	ldr	r8, [r4, #4]
    if (index == 0)
 1002b48:	e3550000 	cmp	r5, #0
    const size_t f = deque->first & c;
 1002b4c:	e5942008 	ldr	r2, [r4, #8]
    const size_t c = deque->capacity - 1;
 1002b50:	e2488001 	sub	r8, r8, #1
    if (index == 0)
 1002b54:	0a00001a 	beq	1002bc4 <deque_filter_mut+0xe4>
    if (index == c)
 1002b58:	e1580005 	cmp	r8, r5
    const size_t l = deque->last & c;
 1002b5c:	e594100c 	ldr	r1, [r4, #12]
    if (index == c)
 1002b60:	0a000030 	beq	1002c28 <deque_filter_mut+0x148>
    if (index <= (deque->size / 2) - 1) {
 1002b64:	e1a000a3 	lsr	r0, r3, #1
    const size_t p = (deque->first + index) & c;
 1002b68:	e0829005 	add	r9, r2, r5
 1002b6c:	e0099008 	and	r9, r9, r8
    void *removed  = deque->buffer[index];
 1002b70:	e5943010 	ldr	r3, [r4, #16]
    if (index <= (deque->size / 2) - 1) {
 1002b74:	e2400001 	sub	r0, r0, #1
 1002b78:	e1500005 	cmp	r0, r5
 1002b7c:	3a000018 	bcc	1002be4 <deque_filter_mut+0x104>
    const size_t f = deque->first & c;
 1002b80:	e0022008 	and	r2, r2, r8
        if (p < f) {
 1002b84:	e1520009 	cmp	r2, r9
 1002b88:	9a000055 	bls	1002ce4 <deque_filter_mut+0x204>
            if (f != c) {
 1002b8c:	e1580002 	cmp	r8, r2
            void *e = deque->buffer[c];
 1002b90:	e793a108 	ldr	sl, [r3, r8, lsl #2]
            if (f != c) {
 1002b94:	1a00002f 	bne	1002c58 <deque_filter_mut+0x178>
            if (p != 0) {
 1002b98:	e3590000 	cmp	r9, #0
 1002b9c:	1a000042 	bne	1002cac <deque_filter_mut+0x1cc>
            deque->buffer[0] = e;
 1002ba0:	e583a000 	str	sl, [r3]
        deque->first = (deque->first + 1) & c;
 1002ba4:	e5943008 	ldr	r3, [r4, #8]
 1002ba8:	e2833001 	add	r3, r3, #1
 1002bac:	e0088003 	and	r8, r8, r3
 1002bb0:	e5848008 	str	r8, [r4, #8]
    deque->size--;
 1002bb4:	e5940000 	ldr	r0, [r4]
 1002bb8:	e2400001 	sub	r0, r0, #1
 1002bbc:	e5840000 	str	r0, [r4]
    if (out)
 1002bc0:	eaffffd2 	b	1002b10 <deque_filter_mut+0x30>
    if (deque->size == 0)
 1002bc4:	e3530000 	cmp	r3, #0
 1002bc8:	0a000018 	beq	1002c30 <deque_filter_mut+0x150>
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002bcc:	e2822001 	add	r2, r2, #1
    deque->size--;
 1002bd0:	e2430001 	sub	r0, r3, #1
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002bd4:	e0088002 	and	r8, r8, r2
    deque->size--;
 1002bd8:	e5840000 	str	r0, [r4]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002bdc:	e5848008 	str	r8, [r4, #8]
    if (out)
 1002be0:	eaffffca 	b	1002b10 <deque_filter_mut+0x30>
    const size_t l = deque->last & c;
 1002be4:	e008b001 	and	fp, r8, r1
        if (p > l) {
 1002be8:	e15b0009 	cmp	fp, r9
 1002bec:	2a000034 	bcs	1002cc4 <deque_filter_mut+0x1e4>
            if (p != c) {
 1002bf0:	e1580009 	cmp	r8, r9
            void *e = deque->buffer[0];
 1002bf4:	e593a000 	ldr	sl, [r3]
            if (p != c) {
 1002bf8:	1a000022 	bne	1002c88 <deque_filter_mut+0x1a8>
                memmove(&(deque->buffer[1]),
 1002bfc:	e1a01003 	mov	r1, r3
 1002c00:	e2830004 	add	r0, r3, #4
 1002c04:	e1a0210b 	lsl	r2, fp, #2
 1002c08:	fa0064f4 	blx	101bfe0 <memmove>
            deque->buffer[c] = e;
 1002c0c:	e5943010 	ldr	r3, [r4, #16]
 1002c10:	e783a108 	str	sl, [r3, r8, lsl #2]
        deque->last = (deque->last- 1) & c;
 1002c14:	e594300c 	ldr	r3, [r4, #12]
 1002c18:	e2433001 	sub	r3, r3, #1
 1002c1c:	e0088003 	and	r8, r8, r3
 1002c20:	e584800c 	str	r8, [r4, #12]
 1002c24:	eaffffe2 	b	1002bb4 <deque_filter_mut+0xd4>
    if (deque->size == 0)
 1002c28:	e3530000 	cmp	r3, #0
 1002c2c:	1a000003 	bne	1002c40 <deque_filter_mut+0x160>
    return CC_OK;
 1002c30:	e3a00000 	mov	r0, #0
 1002c34:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_ERR_OUT_OF_RANGE;
 1002c38:	e3a00008 	mov	r0, #8
 1002c3c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1002c40:	e2411001 	sub	r1, r1, #1
    deque->size--;
 1002c44:	e2430001 	sub	r0, r3, #1
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1002c48:	e0011005 	and	r1, r1, r5
    deque->size--;
 1002c4c:	e5840000 	str	r0, [r4]
    deque->last = last;
 1002c50:	e584100c 	str	r1, [r4, #12]
    if (out)
 1002c54:	eaffffad 	b	1002b10 <deque_filter_mut+0x30>
                memmove(&(deque->buffer[f + 1]),
 1002c58:	e2820001 	add	r0, r2, #1
                        (c - f) * sizeof(void*));
 1002c5c:	e0482002 	sub	r2, r8, r2
                memmove(&(deque->buffer[f + 1]),
 1002c60:	e1a00100 	lsl	r0, r0, #2
 1002c64:	e1a02102 	lsl	r2, r2, #2
                        &(deque->buffer[f]),
 1002c68:	e2401004 	sub	r1, r0, #4
                memmove(&(deque->buffer[f + 1]),
 1002c6c:	e0830000 	add	r0, r3, r0
 1002c70:	e0831001 	add	r1, r3, r1
 1002c74:	fa0064d9 	blx	101bfe0 <memmove>
            if (p != 0) {
 1002c78:	e3590000 	cmp	r9, #0
 1002c7c:	e5943010 	ldr	r3, [r4, #16]
 1002c80:	0affffc6 	beq	1002ba0 <deque_filter_mut+0xc0>
 1002c84:	ea000008 	b	1002cac <deque_filter_mut+0x1cc>
                memmove(&(deque->buffer[p]),
 1002c88:	e1a00109 	lsl	r0, r9, #2
                        (c - p) * sizeof(void*));
 1002c8c:	e0482009 	sub	r2, r8, r9
                memmove(&(deque->buffer[p]),
 1002c90:	e1a02102 	lsl	r2, r2, #2
 1002c94:	e2801004 	add	r1, r0, #4
 1002c98:	e0831001 	add	r1, r3, r1
 1002c9c:	e0830000 	add	r0, r3, r0
 1002ca0:	fa0064ce 	blx	101bfe0 <memmove>
 1002ca4:	e5943010 	ldr	r3, [r4, #16]
 1002ca8:	eaffffd3 	b	1002bfc <deque_filter_mut+0x11c>
                memmove(&(deque->buffer[1]),
 1002cac:	e1a01003 	mov	r1, r3
 1002cb0:	e2830004 	add	r0, r3, #4
 1002cb4:	e1a02109 	lsl	r2, r9, #2
 1002cb8:	fa0064c8 	blx	101bfe0 <memmove>
 1002cbc:	e5943010 	ldr	r3, [r4, #16]
 1002cc0:	eaffffb6 	b	1002ba0 <deque_filter_mut+0xc0>
            memmove(&(deque->buffer[p]),
 1002cc4:	e1a00109 	lsl	r0, r9, #2
                    (l - p) * sizeof(void*));
 1002cc8:	e04b2009 	sub	r2, fp, r9
            memmove(&(deque->buffer[p]),
 1002ccc:	e1a02102 	lsl	r2, r2, #2
 1002cd0:	e2801004 	add	r1, r0, #4
 1002cd4:	e0831001 	add	r1, r3, r1
 1002cd8:	e0830000 	add	r0, r3, r0
 1002cdc:	fa0064bf 	blx	101bfe0 <memmove>
 1002ce0:	eaffffcb 	b	1002c14 <deque_filter_mut+0x134>
            memmove(&(deque->buffer[f + 1]),
 1002ce4:	e2820001 	add	r0, r2, #1
 1002ce8:	e1a02105 	lsl	r2, r5, #2
 1002cec:	e1a00100 	lsl	r0, r0, #2
                    &(deque->buffer[f]),
 1002cf0:	e2401004 	sub	r1, r0, #4
            memmove(&(deque->buffer[f + 1]),
 1002cf4:	e0830000 	add	r0, r3, r0
 1002cf8:	e0831001 	add	r1, r3, r1
 1002cfc:	fa0064b7 	blx	101bfe0 <memmove>
 1002d00:	eaffffa7 	b	1002ba4 <deque_filter_mut+0xc4>

01002d04 <deque_filter>:
    if (deque_size(deque) == 0)
 1002d04:	e5903000 	ldr	r3, [r0]
 1002d08:	e3530000 	cmp	r3, #0
 1002d0c:	0a000040 	beq	1002e14 <deque_filter+0x110>
{
 1002d10:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1002d14:	e1a07001 	mov	r7, r1
    conf->mem_alloc  = malloc;
 1002d18:	e30a1fb9 	movw	r1, #44985	; 0xafb9
{
 1002d1c:	e24dd01c 	sub	sp, sp, #28
    conf->capacity   = DEFAULT_CAPACITY;
 1002d20:	e3a0c008 	mov	ip, #8
    conf->mem_alloc  = malloc;
 1002d24:	e3401101 	movt	r1, #257	; 0x101
 1002d28:	e1a08002 	mov	r8, r2
    conf->mem_free   = free;
 1002d2c:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    conf->mem_calloc = calloc;
 1002d30:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 1002d34:	e3403101 	movt	r3, #257	; 0x101
    conf->mem_calloc = calloc;
 1002d38:	e3402101 	movt	r2, #257	; 0x101
    Deque *filtered = NULL;
 1002d3c:	e3a06000 	mov	r6, #0
    conf->mem_alloc  = malloc;
 1002d40:	e58d100c 	str	r1, [sp, #12]
 1002d44:	e1a05000 	mov	r5, r0
    return deque_new_conf(&conf, deque);
 1002d48:	e28d1004 	add	r1, sp, #4
 1002d4c:	e08d000c 	add	r0, sp, ip
    conf->mem_free   = free;
 1002d50:	e58d3014 	str	r3, [sp, #20]
    conf->mem_calloc = calloc;
 1002d54:	e58d2010 	str	r2, [sp, #16]
    conf->capacity   = DEFAULT_CAPACITY;
 1002d58:	e98d1040 	stmib	sp, {r6, ip}
    return deque_new_conf(&conf, deque);
 1002d5c:	ebfffb9d 	bl	1001bd8 <deque_new_conf>
    if (!filtered)
 1002d60:	e59d3004 	ldr	r3, [sp, #4]
 1002d64:	e1530006 	cmp	r3, r6
        return CC_ERR_ALLOC;
 1002d68:	03a00001 	moveq	r0, #1
    if (!filtered)
 1002d6c:	0a000004 	beq	1002d84 <deque_filter+0x80>
    for (i = 0; i < deque->size; i++) {
 1002d70:	e5952000 	ldr	r2, [r5]
 1002d74:	e1520006 	cmp	r2, r6
 1002d78:	1a000016 	bne	1002dd8 <deque_filter+0xd4>
    return CC_OK;
 1002d7c:	e3a00000 	mov	r0, #0
    *out = filtered;
 1002d80:	e5883000 	str	r3, [r8]
}
 1002d84:	e28dd01c 	add	sp, sp, #28
 1002d88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            deque_add(filtered, deque->buffer[d_index]);
 1002d8c:	e59d9004 	ldr	r9, [sp, #4]
 1002d90:	e5951010 	ldr	r1, [r5, #16]
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1002d94:	e5992004 	ldr	r2, [r9, #4]
 1002d98:	e5993000 	ldr	r3, [r9]
            deque_add(filtered, deque->buffer[d_index]);
 1002d9c:	e7914104 	ldr	r4, [r1, r4, lsl #2]
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1002da0:	e1520003 	cmp	r2, r3
 1002da4:	0a00001c 	beq	1002e1c <deque_filter+0x118>
    deque->buffer[deque->last] = element;
 1002da8:	e599000c 	ldr	r0, [r9, #12]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002dac:	e2422001 	sub	r2, r2, #1
    deque->buffer[deque->last] = element;
 1002db0:	e599c010 	ldr	ip, [r9, #16]
    deque->size++;
 1002db4:	e2833001 	add	r3, r3, #1
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002db8:	e2801001 	add	r1, r0, #1
 1002dbc:	e0022001 	and	r2, r2, r1
    deque->buffer[deque->last] = element;
 1002dc0:	e78c4100 	str	r4, [ip, r0, lsl #2]
    deque->last = (deque->last + 1) & (deque->capacity - 1);
 1002dc4:	e589200c 	str	r2, [r9, #12]
    deque->size++;
 1002dc8:	e5893000 	str	r3, [r9]
    for (i = 0; i < deque->size; i++) {
 1002dcc:	e5953000 	ldr	r3, [r5]
 1002dd0:	e1530006 	cmp	r3, r6
 1002dd4:	9a00000c 	bls	1002e0c <deque_filter+0x108>
        size_t d_index = (deque->first + i) & (deque->capacity - 1);
 1002dd8:	e9950018 	ldmib	r5, {r3, r4}
        if (pred(deque->buffer[d_index])) {
 1002ddc:	e5952010 	ldr	r2, [r5, #16]
        size_t d_index = (deque->first + i) & (deque->capacity - 1);
 1002de0:	e0864004 	add	r4, r6, r4
 1002de4:	e2433001 	sub	r3, r3, #1
 1002de8:	e0044003 	and	r4, r4, r3
 1002dec:	e2866001 	add	r6, r6, #1
        if (pred(deque->buffer[d_index])) {
 1002df0:	e7920104 	ldr	r0, [r2, r4, lsl #2]
 1002df4:	e12fff37 	blx	r7
 1002df8:	e3500000 	cmp	r0, #0
 1002dfc:	1affffe2 	bne	1002d8c <deque_filter+0x88>
    for (i = 0; i < deque->size; i++) {
 1002e00:	e5953000 	ldr	r3, [r5]
 1002e04:	e1530006 	cmp	r3, r6
 1002e08:	8afffff2 	bhi	1002dd8 <deque_filter+0xd4>
 1002e0c:	e59d3004 	ldr	r3, [sp, #4]
 1002e10:	eaffffd9 	b	1002d7c <deque_filter+0x78>
        return CC_ERR_OUT_OF_RANGE;
 1002e14:	e3a00008 	mov	r0, #8
}
 1002e18:	e12fff1e 	bx	lr
    if (deque->capacity == deque->size && expand_capacity(deque) != CC_OK)
 1002e1c:	e1a00009 	mov	r0, r9
 1002e20:	ebfffb1b 	bl	1001a94 <expand_capacity>
 1002e24:	e3500000 	cmp	r0, #0
 1002e28:	1affffe7 	bne	1002dcc <deque_filter+0xc8>
 1002e2c:	e5992004 	ldr	r2, [r9, #4]
 1002e30:	e5993000 	ldr	r3, [r9]
 1002e34:	eaffffdb 	b	1002da8 <deque_filter+0xa4>

01002e38 <deque_iter_init>:
 * @param[in] deque the vector to iterate over
 */
void deque_iter_init(DequeIter *iter, Deque *deque)
{
    iter->deque = deque;
    iter->index = 0;
 1002e38:	e3a03000 	mov	r3, #0
 1002e3c:	e880000a 	stm	r0, {r1, r3}
    iter->last_removed = false;
 1002e40:	e5c03008 	strb	r3, [r0, #8]
}
 1002e44:	e12fff1e 	bx	lr

01002e48 <deque_iter_next>:
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Deque has been reached.
 */
enum cc_stat deque_iter_next(DequeIter *iter, void **out)
{
    const size_t c     = (iter->deque->capacity - 1);
 1002e48:	e5902000 	ldr	r2, [r0]
{
 1002e4c:	e92d4010 	push	{r4, lr}
    const size_t last  = (iter->deque->last) & c;
    const size_t first = (iter->deque->first) & c;
 1002e50:	e9925008 	ldmib	r2, {r3, ip, lr}
    const size_t c     = (iter->deque->capacity - 1);
 1002e54:	e2433001 	sub	r3, r3, #1
    const size_t last  = (iter->deque->last) & c;
 1002e58:	e00ee003 	and	lr, lr, r3
    const size_t first = (iter->deque->first) & c;
 1002e5c:	e00c4003 	and	r4, ip, r3

    if (last == first || iter->index >= iter->deque->size)
 1002e60:	e15e0004 	cmp	lr, r4
 1002e64:	0a00000f 	beq	1002ea8 <deque_iter_next+0x60>
 1002e68:	e590e004 	ldr	lr, [r0, #4]
 1002e6c:	e5924000 	ldr	r4, [r2]
 1002e70:	e15e0004 	cmp	lr, r4
 1002e74:	2a00000b 	bcs	1002ea8 <deque_iter_next+0x60>

    const size_t i = (iter->deque->first + iter->index) & c;

    iter->index++;
    iter->last_removed = false;
    *out = iter->deque->buffer[i];
 1002e78:	e5924010 	ldr	r4, [r2, #16]
    const size_t i = (iter->deque->first + iter->index) & c;
 1002e7c:	e08cc00e 	add	ip, ip, lr
 1002e80:	e003300c 	and	r3, r3, ip
    iter->last_removed = false;
 1002e84:	e3a02000 	mov	r2, #0
    iter->index++;
 1002e88:	e28ee001 	add	lr, lr, #1
    *out = iter->deque->buffer[i];
 1002e8c:	e794c103 	ldr	ip, [r4, r3, lsl #2]

    return CC_OK;
 1002e90:	e1a03002 	mov	r3, r2
    iter->index++;
 1002e94:	e580e004 	str	lr, [r0, #4]
    iter->last_removed = false;
 1002e98:	e5c02008 	strb	r2, [r0, #8]
}
 1002e9c:	e1a00003 	mov	r0, r3
    *out = iter->deque->buffer[i];
 1002ea0:	e581c000 	str	ip, [r1]
}
 1002ea4:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 1002ea8:	e3a03009 	mov	r3, #9
}
 1002eac:	e1a00003 	mov	r0, r3
 1002eb0:	e8bd8010 	pop	{r4, pc}

01002eb4 <deque_iter_remove>:
 * @return CC_OK if the element was successfully removed, CC_ERR_OUT_OF_RANGE
 * if the iterator state is invalid, or CC_ERR_VALUE_NOT_FOUND if the value
 * was already removed.
 */
enum cc_stat deque_iter_remove(DequeIter *iter, void **out)
{
 1002eb4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (iter->last_removed)
 1002eb8:	e5d03008 	ldrb	r3, [r0, #8]
 1002ebc:	e3530000 	cmp	r3, #0
 1002ec0:	1a000029 	bne	1002f6c <deque_iter_remove+0xb8>
        return CC_ERR_VALUE_NOT_FOUND;

    void *rm;
    enum cc_stat status = deque_remove_at(iter->deque, iter->index, &rm);
 1002ec4:	e5905000 	ldr	r5, [r0]
 1002ec8:	e5903004 	ldr	r3, [r0, #4]
    if (index >= deque->size)
 1002ecc:	e5952000 	ldr	r2, [r5]
 1002ed0:	e1530002 	cmp	r3, r2
 1002ed4:	2a000047 	bcs	1002ff8 <deque_iter_remove+0x144>
    const size_t c = deque->capacity - 1;
 1002ed8:	e5957004 	ldr	r7, [r5, #4]
    if (index == 0)
 1002edc:	e3530000 	cmp	r3, #0
 1002ee0:	e1a04000 	mov	r4, r0
    const size_t c = deque->capacity - 1;
 1002ee4:	e1a06001 	mov	r6, r1
    const size_t f = deque->first & c;
 1002ee8:	e5950008 	ldr	r0, [r5, #8]
    void *removed  = deque->buffer[index];
 1002eec:	e595c010 	ldr	ip, [r5, #16]
    const size_t c = deque->capacity - 1;
 1002ef0:	e2477001 	sub	r7, r7, #1
    if (index == 0)
 1002ef4:	0a00001e 	beq	1002f74 <deque_iter_remove+0xc0>
    if (index == c)
 1002ef8:	e1530007 	cmp	r3, r7
    const size_t l = deque->last & c;
 1002efc:	e595e00c 	ldr	lr, [r5, #12]
    if (index == c)
 1002f00:	0a00003e 	beq	1003000 <deque_iter_remove+0x14c>
    if (index <= (deque->size / 2) - 1) {
 1002f04:	e1a010a2 	lsr	r1, r2, #1
    const size_t p = (deque->first + index) & c;
 1002f08:	e0838000 	add	r8, r3, r0
 1002f0c:	e0088007 	and	r8, r8, r7
    void *removed  = deque->buffer[index];
 1002f10:	e1a02103 	lsl	r2, r3, #2
    if (index <= (deque->size / 2) - 1) {
 1002f14:	e2411001 	sub	r1, r1, #1
    void *removed  = deque->buffer[index];
 1002f18:	e79c9103 	ldr	r9, [ip, r3, lsl #2]
    if (index <= (deque->size / 2) - 1) {
 1002f1c:	e1530001 	cmp	r3, r1
 1002f20:	8a000023 	bhi	1002fb4 <deque_iter_remove+0x100>
    const size_t f = deque->first & c;
 1002f24:	e0000007 	and	r0, r0, r7
        if (p < f) {
 1002f28:	e1500008 	cmp	r0, r8
 1002f2c:	9a00004f 	bls	1003070 <deque_iter_remove+0x1bc>
            if (f != c) {
 1002f30:	e1570000 	cmp	r7, r0
            void *e = deque->buffer[c];
 1002f34:	e79ca107 	ldr	sl, [ip, r7, lsl #2]
            if (f != c) {
 1002f38:	1a000039 	bne	1003024 <deque_iter_remove+0x170>
            if (p != 0) {
 1002f3c:	e3580000 	cmp	r8, #0
 1002f40:	1a000059 	bne	10030ac <deque_iter_remove+0x1f8>
            deque->buffer[0] = e;
 1002f44:	e58ca000 	str	sl, [ip]
        deque->first = (deque->first + 1) & c;
 1002f48:	e5953008 	ldr	r3, [r5, #8]
 1002f4c:	e2833001 	add	r3, r3, #1
 1002f50:	e0077003 	and	r7, r7, r3
 1002f54:	e5857008 	str	r7, [r5, #8]
    deque->size--;
 1002f58:	e5952000 	ldr	r2, [r5]
 1002f5c:	e5943004 	ldr	r3, [r4, #4]
 1002f60:	e2422001 	sub	r2, r2, #1
 1002f64:	e5852000 	str	r2, [r5]
    if (status == CC_OK) {
 1002f68:	ea000009 	b	1002f94 <deque_iter_remove+0xe0>
        return CC_ERR_VALUE_NOT_FOUND;
 1002f6c:	e3a00007 	mov	r0, #7
 1002f70:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (deque->size == 0)
 1002f74:	e3520000 	cmp	r2, #0
 1002f78:	0a00001e 	beq	1002ff8 <deque_iter_remove+0x144>
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002f7c:	e2801001 	add	r1, r0, #1
    deque->size--;
 1002f80:	e2422001 	sub	r2, r2, #1
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002f84:	e0077001 	and	r7, r7, r1
    void *element = deque->buffer[deque->first];
 1002f88:	e79c9100 	ldr	r9, [ip, r0, lsl #2]
    deque->first = (deque->first + 1) & (deque->capacity - 1);
 1002f8c:	e5857008 	str	r7, [r5, #8]
    deque->size--;
 1002f90:	e5852000 	str	r2, [r5]
        iter->index--;
        iter->last_removed = true;
        if (out)
 1002f94:	e3560000 	cmp	r6, #0
        iter->index--;
 1002f98:	e2433001 	sub	r3, r3, #1
        iter->last_removed = true;
 1002f9c:	e3a02001 	mov	r2, #1
        iter->index--;
 1002fa0:	e5843004 	str	r3, [r4, #4]
        iter->last_removed = true;
 1002fa4:	e5c42008 	strb	r2, [r4, #8]
            *out = rm;
 1002fa8:	e3a00000 	mov	r0, #0
 1002fac:	15869000 	strne	r9, [r6]
 1002fb0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const size_t l = deque->last & c;
 1002fb4:	e007b00e 	and	fp, r7, lr
        if (p > l) {
 1002fb8:	e15b0008 	cmp	fp, r8
 1002fbc:	2a000032 	bcs	100308c <deque_iter_remove+0x1d8>
            if (p != c) {
 1002fc0:	e1570008 	cmp	r7, r8
            void *e = deque->buffer[0];
 1002fc4:	e59ca000 	ldr	sl, [ip]
            if (p != c) {
 1002fc8:	1a00001f 	bne	100304c <deque_iter_remove+0x198>
                memmove(&(deque->buffer[1]),
 1002fcc:	e1a0210b 	lsl	r2, fp, #2
 1002fd0:	e1a0100c 	mov	r1, ip
 1002fd4:	e28c0004 	add	r0, ip, #4
 1002fd8:	fa006400 	blx	101bfe0 <memmove>
            deque->buffer[c] = e;
 1002fdc:	e5953010 	ldr	r3, [r5, #16]
 1002fe0:	e783a107 	str	sl, [r3, r7, lsl #2]
        deque->last = (deque->last- 1) & c;
 1002fe4:	e595300c 	ldr	r3, [r5, #12]
 1002fe8:	e2433001 	sub	r3, r3, #1
 1002fec:	e0077003 	and	r7, r7, r3
 1002ff0:	e585700c 	str	r7, [r5, #12]
 1002ff4:	eaffffd7 	b	1002f58 <deque_iter_remove+0xa4>
        return CC_ERR_OUT_OF_RANGE;
 1002ff8:	e3a00008 	mov	r0, #8
 1002ffc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (deque->size == 0)
 1003000:	e3520000 	cmp	r2, #0
 1003004:	0afffffb 	beq	1002ff8 <deque_iter_remove+0x144>
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1003008:	e24ee001 	sub	lr, lr, #1
    deque->size--;
 100300c:	e2422001 	sub	r2, r2, #1
    size_t  last    = (deque->last - 1) & (deque->capacity - 1);
 1003010:	e00ee003 	and	lr, lr, r3
    void   *element = deque->buffer[last];
 1003014:	e79c910e 	ldr	r9, [ip, lr, lsl #2]
    deque->last = last;
 1003018:	e585e00c 	str	lr, [r5, #12]
    deque->size--;
 100301c:	e5852000 	str	r2, [r5]
    if (status == CC_OK) {
 1003020:	eaffffdb 	b	1002f94 <deque_iter_remove+0xe0>
                memmove(&(deque->buffer[f + 1]),
 1003024:	e2803001 	add	r3, r0, #1
                        (c - f) * sizeof(void*));
 1003028:	e0472000 	sub	r2, r7, r0
                memmove(&(deque->buffer[f + 1]),
 100302c:	e1a00103 	lsl	r0, r3, #2
 1003030:	e1a02102 	lsl	r2, r2, #2
                        &(deque->buffer[f]),
 1003034:	e2401004 	sub	r1, r0, #4
                memmove(&(deque->buffer[f + 1]),
 1003038:	e08c0000 	add	r0, ip, r0
 100303c:	e08c1001 	add	r1, ip, r1
 1003040:	fa0063e6 	blx	101bfe0 <memmove>
 1003044:	e595c010 	ldr	ip, [r5, #16]
 1003048:	eaffffbb 	b	1002f3c <deque_iter_remove+0x88>
                memmove(&(deque->buffer[p]),
 100304c:	e1a00108 	lsl	r0, r8, #2
                        (c - p) * sizeof(void*));
 1003050:	e0472008 	sub	r2, r7, r8
                memmove(&(deque->buffer[p]),
 1003054:	e1a02102 	lsl	r2, r2, #2
 1003058:	e2801004 	add	r1, r0, #4
 100305c:	e08c1001 	add	r1, ip, r1
 1003060:	e08c0000 	add	r0, ip, r0
 1003064:	fa0063dd 	blx	101bfe0 <memmove>
 1003068:	e595c010 	ldr	ip, [r5, #16]
 100306c:	eaffffd6 	b	1002fcc <deque_iter_remove+0x118>
            memmove(&(deque->buffer[f + 1]),
 1003070:	e2800001 	add	r0, r0, #1
 1003074:	e1a00100 	lsl	r0, r0, #2
                    &(deque->buffer[f]),
 1003078:	e2401004 	sub	r1, r0, #4
            memmove(&(deque->buffer[f + 1]),
 100307c:	e08c0000 	add	r0, ip, r0
 1003080:	e08c1001 	add	r1, ip, r1
 1003084:	fa0063d5 	blx	101bfe0 <memmove>
 1003088:	eaffffae 	b	1002f48 <deque_iter_remove+0x94>
            memmove(&(deque->buffer[p]),
 100308c:	e1a00108 	lsl	r0, r8, #2
                    (l - p) * sizeof(void*));
 1003090:	e04b2008 	sub	r2, fp, r8
            memmove(&(deque->buffer[p]),
 1003094:	e1a02102 	lsl	r2, r2, #2
 1003098:	e2801004 	add	r1, r0, #4
 100309c:	e08c1001 	add	r1, ip, r1
 10030a0:	e08c0000 	add	r0, ip, r0
 10030a4:	fa0063cd 	blx	101bfe0 <memmove>
 10030a8:	eaffffcd 	b	1002fe4 <deque_iter_remove+0x130>
                memmove(&(deque->buffer[1]),
 10030ac:	e1a0100c 	mov	r1, ip
 10030b0:	e28c0004 	add	r0, ip, #4
 10030b4:	e1a02108 	lsl	r2, r8, #2
 10030b8:	fa0063c8 	blx	101bfe0 <memmove>
 10030bc:	e595c010 	ldr	ip, [r5, #16]
 10030c0:	eaffff9f 	b	1002f44 <deque_iter_remove+0x90>

010030c4 <deque_iter_add>:
 *
 * @return CC_OK if the element was successfully added, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat deque_iter_add(DequeIter *iter, void *element)
{
 10030c4:	e92d4010 	push	{r4, lr}
 10030c8:	e1a04000 	mov	r4, r0
    enum cc_stat status = deque_add_at(iter->deque, element, iter->index);
 10030cc:	e8900005 	ldm	r0, {r0, r2}
 10030d0:	ebfffb87 	bl	1001ef4 <deque_add_at>
    if (status == CC_OK)
 10030d4:	e3500000 	cmp	r0, #0
        iter->index++;
 10030d8:	05943004 	ldreq	r3, [r4, #4]
 10030dc:	02833001 	addeq	r3, r3, #1
 10030e0:	05843004 	streq	r3, [r4, #4]

    return status;
}
 10030e4:	e8bd8010 	pop	{r4, pc}

010030e8 <deque_iter_replace>:
 * @return  CC_OK if the element was replaced successfully, or
 * CC_ERR_VALUE_NOT_FOUND.
 */
enum cc_stat deque_iter_replace(DequeIter *iter, void *replacement, void **out)
{
    return deque_replace_at(iter->deque, replacement, iter->index, out);
 10030e8:	e590c000 	ldr	ip, [r0]
 10030ec:	e5903004 	ldr	r3, [r0, #4]
    if (index >= deque->size)
 10030f0:	e59c0000 	ldr	r0, [ip]
 10030f4:	e1530000 	cmp	r3, r0
 10030f8:	2a000010 	bcs	1003140 <deque_iter_replace+0x58>
{
 10030fc:	e92d4010 	push	{r4, lr}
    if (out)
 1003100:	e3520000 	cmp	r2, #0
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1003104:	e59ce008 	ldr	lr, [ip, #8]
 1003108:	e59c0004 	ldr	r0, [ip, #4]
 100310c:	e59c4010 	ldr	r4, [ip, #16]
 1003110:	e083300e 	add	r3, r3, lr
 1003114:	e2400001 	sub	r0, r0, #1
 1003118:	e0033000 	and	r3, r3, r0
 100311c:	e1a0e103 	lsl	lr, r3, #2
        *out = deque->buffer[i];
 1003120:	17943103 	ldrne	r3, [r4, r3, lsl #2]
 1003124:	e084000e 	add	r0, r4, lr
 1003128:	15823000 	strne	r3, [r2]
 100312c:	159c0010 	ldrne	r0, [ip, #16]
 1003130:	1080000e 	addne	r0, r0, lr
    deque->buffer[i] = element;
 1003134:	e5801000 	str	r1, [r0]
    return CC_OK;
 1003138:	e3a00000 	mov	r0, #0
}
 100313c:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_OUT_OF_RANGE;
 1003140:	e3a00008 	mov	r0, #8
}
 1003144:	e12fff1e 	bx	lr

01003148 <deque_iter_index>:
 *
 * @return the index
 */
size_t deque_iter_index(DequeIter *iter)
{
    return iter->index - 1;
 1003148:	e5900004 	ldr	r0, [r0, #4]
}
 100314c:	e2400001 	sub	r0, r0, #1
 1003150:	e12fff1e 	bx	lr

01003154 <deque_zip_iter_init>:
 */
void deque_zip_iter_init(DequeZipIter *iter, Deque *d1, Deque *d2)
{
    iter->d1    = d1;
    iter->d2    = d2;
    iter->index = 0;
 1003154:	e3a03000 	mov	r3, #0
 1003158:	e880000e 	stm	r0, {r1, r2, r3}
    iter->last_removed = false;
 100315c:	e5c0300c 	strb	r3, [r0, #12]
}
 1003160:	e12fff1e 	bx	lr

01003164 <deque_zip_iter_next>:
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end of one
 * of the deques has been reached.
 */
enum cc_stat deque_zip_iter_next(DequeZipIter *iter, void **out1, void **out2)
{
    const size_t d1_capacity = (iter->d1->capacity - 1);
 1003164:	e590c000 	ldr	ip, [r0]
{
 1003168:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    const size_t d1_last     = (iter->d1->last) & d1_capacity;
    const size_t d1_first    = (iter->d1->first) & d1_capacity;
 100316c:	e99c4018 	ldmib	ip, {r3, r4, lr}
    const size_t d1_capacity = (iter->d1->capacity - 1);
 1003170:	e2433001 	sub	r3, r3, #1
    const size_t d1_last     = (iter->d1->last) & d1_capacity;
 1003174:	e00ee003 	and	lr, lr, r3
    const size_t d1_first    = (iter->d1->first) & d1_capacity;
 1003178:	e0045003 	and	r5, r4, r3

    if (d1_last == d1_first || iter->index >= iter->d1->size)
 100317c:	e15e0005 	cmp	lr, r5
 1003180:	0a00001f 	beq	1003204 <deque_zip_iter_next+0xa0>
 1003184:	e590e008 	ldr	lr, [r0, #8]
 1003188:	e59c5000 	ldr	r5, [ip]
 100318c:	e15e0005 	cmp	lr, r5
 1003190:	2a00001b 	bcs	1003204 <deque_zip_iter_next+0xa0>
        return CC_ITER_END;

    const size_t d2_capacity = (iter->d2->capacity - 1);
 1003194:	e5907004 	ldr	r7, [r0, #4]
    const size_t d2_last     = (iter->d2->last) & d2_capacity;
    const size_t d2_first    = (iter->d2->first) & d2_capacity;
 1003198:	e9970160 	ldmib	r7, {r5, r6, r8}
    const size_t d2_capacity = (iter->d2->capacity - 1);
 100319c:	e2455001 	sub	r5, r5, #1
    const size_t d2_last     = (iter->d2->last) & d2_capacity;
 10031a0:	e0088005 	and	r8, r8, r5
    const size_t d2_first    = (iter->d2->first) & d2_capacity;
 10031a4:	e0069005 	and	r9, r6, r5

    if (d2_last == d2_first || iter->index >= iter->d2->size)
 10031a8:	e1580009 	cmp	r8, r9
 10031ac:	0a000014 	beq	1003204 <deque_zip_iter_next+0xa0>
 10031b0:	e5977000 	ldr	r7, [r7]
 10031b4:	e15e0007 	cmp	lr, r7
 10031b8:	2a000011 	bcs	1003204 <deque_zip_iter_next+0xa0>
         return CC_ITER_END;

    const size_t d1_index = (iter->d1->first + iter->index) & d1_capacity;
    const size_t d2_index = (iter->d2->first + iter->index) & d2_capacity;

    *out1 = iter->d1->buffer[d1_index];
 10031bc:	e59cc010 	ldr	ip, [ip, #16]
    const size_t d1_index = (iter->d1->first + iter->index) & d1_capacity;
 10031c0:	e084400e 	add	r4, r4, lr
 10031c4:	e0033004 	and	r3, r3, r4
    const size_t d2_index = (iter->d2->first + iter->index) & d2_capacity;
 10031c8:	e08e6006 	add	r6, lr, r6
 10031cc:	e0055006 	and	r5, r5, r6
    *out2 = iter->d2->buffer[d2_index];

    iter->index++;
 10031d0:	e28ee001 	add	lr, lr, #1
    *out1 = iter->d1->buffer[d1_index];
 10031d4:	e79c4103 	ldr	r4, [ip, r3, lsl #2]
    iter->last_removed = false;
 10031d8:	e3a0c000 	mov	ip, #0

    return CC_OK;
 10031dc:	e1a0300c 	mov	r3, ip
    *out1 = iter->d1->buffer[d1_index];
 10031e0:	e5814000 	str	r4, [r1]
    *out2 = iter->d2->buffer[d2_index];
 10031e4:	e5901004 	ldr	r1, [r0, #4]
 10031e8:	e5911010 	ldr	r1, [r1, #16]
 10031ec:	e7911105 	ldr	r1, [r1, r5, lsl #2]
 10031f0:	e5821000 	str	r1, [r2]
    iter->index++;
 10031f4:	e580e008 	str	lr, [r0, #8]
    iter->last_removed = false;
 10031f8:	e5c0c00c 	strb	ip, [r0, #12]
}
 10031fc:	e1a00003 	mov	r0, r3
 1003200:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        return CC_ITER_END;
 1003204:	e3a03009 	mov	r3, #9
}
 1003208:	e1a00003 	mov	r0, r3
 100320c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

01003210 <deque_zip_iter_add>:
 * @return CC_OK if the element pair was successfully added to the deques, or
 * CC_ERR_ALLOC if the memory allocation for the new elements failed.
 */
enum cc_stat deque_zip_iter_add(DequeZipIter *iter, void *e1, void *e2)
{
    if (iter->index >= iter->d1->size || iter->index >= iter->d2->size)
 1003210:	e5903000 	ldr	r3, [r0]
{
 1003214:	e92d4070 	push	{r4, r5, r6, lr}
    if (iter->index >= iter->d1->size || iter->index >= iter->d2->size)
 1003218:	e590c008 	ldr	ip, [r0, #8]
 100321c:	e593e000 	ldr	lr, [r3]
 1003220:	e15c000e 	cmp	ip, lr
 1003224:	2a000021 	bcs	10032b0 <deque_zip_iter_add+0xa0>
 1003228:	e5904004 	ldr	r4, [r0, #4]
 100322c:	e5944000 	ldr	r4, [r4]
 1003230:	e15c0004 	cmp	ip, r4
 1003234:	2a00001d 	bcs	10032b0 <deque_zip_iter_add+0xa0>
 1003238:	e1a06002 	mov	r6, r2
        return CC_ERR_OUT_OF_RANGE;

    /* While this check is performed by a call to deque_add_at, it is necessary to know
       in advance whether both deque buffers have enough room before inserting new elements
       because this operation must insert either both elements, or none.*/
    if ((iter->d1->capacity == iter->d1->size && expand_capacity(iter->d1) != CC_OK) &&
 100323c:	e5932004 	ldr	r2, [r3, #4]
 1003240:	e1a05001 	mov	r5, r1
 1003244:	e1a04000 	mov	r4, r0
 1003248:	e15e0002 	cmp	lr, r2
 100324c:	0a00000b 	beq	1003280 <deque_zip_iter_add+0x70>
        (iter->d2->capacity == iter->d2->size && expand_capacity(iter->d2) != CC_OK)) {
        return CC_ERR_ALLOC;
    }

    /* The retun status can be ignored since the checks have already been made. */
    deque_add_at(iter->d1, e1, iter->index);
 1003250:	e1a0200c 	mov	r2, ip
 1003254:	e1a01005 	mov	r1, r5
 1003258:	e1a00003 	mov	r0, r3
 100325c:	ebfffb24 	bl	1001ef4 <deque_add_at>
    deque_add_at(iter->d2, e2, iter->index);
 1003260:	e1a01006 	mov	r1, r6
 1003264:	e9940005 	ldmib	r4, {r0, r2}
 1003268:	ebfffb21 	bl	1001ef4 <deque_add_at>

    iter->index++;
 100326c:	e5943008 	ldr	r3, [r4, #8]
    return CC_OK;
 1003270:	e3a00000 	mov	r0, #0
    iter->index++;
 1003274:	e2833001 	add	r3, r3, #1
 1003278:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 100327c:	e8bd8070 	pop	{r4, r5, r6, pc}
    if ((iter->d1->capacity == iter->d1->size && expand_capacity(iter->d1) != CC_OK) &&
 1003280:	e1a00003 	mov	r0, r3
 1003284:	ebfffa02 	bl	1001a94 <expand_capacity>
 1003288:	e3500000 	cmp	r0, #0
 100328c:	0a000004 	beq	10032a4 <deque_zip_iter_add+0x94>
        (iter->d2->capacity == iter->d2->size && expand_capacity(iter->d2) != CC_OK)) {
 1003290:	e5940004 	ldr	r0, [r4, #4]
    if ((iter->d1->capacity == iter->d1->size && expand_capacity(iter->d1) != CC_OK) &&
 1003294:	e5902004 	ldr	r2, [r0, #4]
 1003298:	e5903000 	ldr	r3, [r0]
 100329c:	e1520003 	cmp	r2, r3
 10032a0:	0a000004 	beq	10032b8 <deque_zip_iter_add+0xa8>
 10032a4:	e5943000 	ldr	r3, [r4]
 10032a8:	e594c008 	ldr	ip, [r4, #8]
 10032ac:	eaffffe7 	b	1003250 <deque_zip_iter_add+0x40>
        return CC_ERR_OUT_OF_RANGE;
 10032b0:	e3a00008 	mov	r0, #8
 10032b4:	e8bd8070 	pop	{r4, r5, r6, pc}
        (iter->d2->capacity == iter->d2->size && expand_capacity(iter->d2) != CC_OK)) {
 10032b8:	ebfff9f5 	bl	1001a94 <expand_capacity>
 10032bc:	e3500000 	cmp	r0, #0
 10032c0:	0afffff7 	beq	10032a4 <deque_zip_iter_add+0x94>
        return CC_ERR_ALLOC;
 10032c4:	e3a00001 	mov	r0, #1
}
 10032c8:	e8bd8070 	pop	{r4, r5, r6, pc}

010032cc <deque_zip_iter_remove>:
 * @return CC_OK if the element was successfully removed, CC_ERR_OUT_OF_RANGE if the
 * iterator is in an invalid state, or CC_ERR_VALUE_NOT_FOUND if the value was already
 * removed.
 */
enum cc_stat deque_zip_iter_remove(DequeZipIter *iter, void **out1, void **out2)
{
 10032cc:	e92d4070 	push	{r4, r5, r6, lr}
    if (iter->last_removed)
 10032d0:	e5d0500c 	ldrb	r5, [r0, #12]
 10032d4:	e3550000 	cmp	r5, #0
 10032d8:	1a00001d 	bne	1003354 <deque_zip_iter_remove+0x88>
        return CC_ERR_VALUE_NOT_FOUND;

    if ((iter->index - 1) >= iter->d1->size || (iter->index - 1) >= iter->d2->size)
 10032dc:	e590c000 	ldr	ip, [r0]
 10032e0:	e5903008 	ldr	r3, [r0, #8]
 10032e4:	e59ce000 	ldr	lr, [ip]
 10032e8:	e2433001 	sub	r3, r3, #1
 10032ec:	e153000e 	cmp	r3, lr
 10032f0:	2a000015 	bcs	100334c <deque_zip_iter_remove+0x80>
 10032f4:	e590e004 	ldr	lr, [r0, #4]
 10032f8:	e59ee000 	ldr	lr, [lr]
 10032fc:	e153000e 	cmp	r3, lr
 1003300:	2a000011 	bcs	100334c <deque_zip_iter_remove+0x80>
        return CC_ERR_OUT_OF_RANGE;

    deque_remove_at(iter->d1, iter->index - 1, out1);
 1003304:	e1a04000 	mov	r4, r0
 1003308:	e1a06002 	mov	r6, r2
 100330c:	e1a0000c 	mov	r0, ip
 1003310:	e1a02001 	mov	r2, r1
 1003314:	e1a01003 	mov	r1, r3
 1003318:	ebfffbae 	bl	10021d8 <deque_remove_at>
    deque_remove_at(iter->d2, iter->index - 1, out2);
 100331c:	e5941008 	ldr	r1, [r4, #8]
 1003320:	e1a02006 	mov	r2, r6
 1003324:	e5940004 	ldr	r0, [r4, #4]
 1003328:	e2411001 	sub	r1, r1, #1
 100332c:	ebfffba9 	bl	10021d8 <deque_remove_at>

    iter->index--;
 1003330:	e5943008 	ldr	r3, [r4, #8]
    iter->last_removed = true;
 1003334:	e3a02001 	mov	r2, #1

    return CC_OK;
 1003338:	e1a00005 	mov	r0, r5
    iter->last_removed = true;
 100333c:	e5c4200c 	strb	r2, [r4, #12]
    iter->index--;
 1003340:	e2433001 	sub	r3, r3, #1
 1003344:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 1003348:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_OUT_OF_RANGE;
 100334c:	e3a00008 	mov	r0, #8
}
 1003350:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1003354:	e3a00007 	mov	r0, #7
 1003358:	e8bd8070 	pop	{r4, r5, r6, pc}

0100335c <deque_zip_iter_replace>:
 * @param[out] out2 Output of the replaced element from the second deque
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat deque_zip_iter_replace(DequeZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
 100335c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if ((iter->index - 1) >= iter->d1->size || (iter->index - 1) >= iter->d2->size)
 1003360:	e590e000 	ldr	lr, [r0]
 1003364:	e590c008 	ldr	ip, [r0, #8]
 1003368:	e59e4000 	ldr	r4, [lr]
 100336c:	e24cc001 	sub	ip, ip, #1
 1003370:	e15c0004 	cmp	ip, r4
 1003374:	2a000027 	bcs	1003418 <deque_zip_iter_replace+0xbc>
 1003378:	e5904004 	ldr	r4, [r0, #4]
 100337c:	e5944000 	ldr	r4, [r4]
 1003380:	e15c0004 	cmp	ip, r4
 1003384:	2a000023 	bcs	1003418 <deque_zip_iter_replace+0xbc>
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1003388:	e59e4008 	ldr	r4, [lr, #8]
    if (out)
 100338c:	e3530000 	cmp	r3, #0
    size_t i = (deque->first + index) & (deque->capacity - 1);
 1003390:	e59e5004 	ldr	r5, [lr, #4]
 1003394:	e59e7010 	ldr	r7, [lr, #16]
 1003398:	e08c4004 	add	r4, ip, r4
 100339c:	e2455001 	sub	r5, r5, #1
 10033a0:	e0044005 	and	r4, r4, r5
 10033a4:	e1a06104 	lsl	r6, r4, #2
        *out = deque->buffer[i];
 10033a8:	17974104 	ldrne	r4, [r7, r4, lsl #2]
 10033ac:	e0875006 	add	r5, r7, r6
 10033b0:	15834000 	strne	r4, [r3]
 10033b4:	159e5010 	ldrne	r5, [lr, #16]
 10033b8:	10855006 	addne	r5, r5, r6
    deque->buffer[i] = element;
 10033bc:	e5851000 	str	r1, [r5]
        return CC_ERR_OUT_OF_RANGE;

    deque_replace_at(iter->d1, e1, iter->index - 1, out1);
    deque_replace_at(iter->d2, e2, iter->index - 1, out2);
 10033c0:	e5903004 	ldr	r3, [r0, #4]
    if (index >= deque->size)
 10033c4:	e5931000 	ldr	r1, [r3]
 10033c8:	e15c0001 	cmp	ip, r1
 10033cc:	2a000013 	bcs	1003420 <deque_zip_iter_replace+0xc4>
    if (out)
 10033d0:	e59d1014 	ldr	r1, [sp, #20]
    size_t i = (deque->first + index) & (deque->capacity - 1);
 10033d4:	e5930008 	ldr	r0, [r3, #8]
 10033d8:	e593e010 	ldr	lr, [r3, #16]
    if (out)
 10033dc:	e3510000 	cmp	r1, #0
    size_t i = (deque->first + index) & (deque->capacity - 1);
 10033e0:	e5931004 	ldr	r1, [r3, #4]
 10033e4:	e08cc000 	add	ip, ip, r0
 10033e8:	e2411001 	sub	r1, r1, #1
 10033ec:	e00cc001 	and	ip, ip, r1
 10033f0:	e1a0010c 	lsl	r0, ip, #2
 10033f4:	e08e1000 	add	r1, lr, r0
        *out = deque->buffer[i];
 10033f8:	179e110c 	ldrne	r1, [lr, ip, lsl #2]
 10033fc:	159dc014 	ldrne	ip, [sp, #20]
 1003400:	158c1000 	strne	r1, [ip]
 1003404:	15931010 	ldrne	r1, [r3, #16]
 1003408:	10811000 	addne	r1, r1, r0

    return CC_OK;
 100340c:	e3a00000 	mov	r0, #0
    deque->buffer[i] = element;
 1003410:	e5812000 	str	r2, [r1]
    return CC_OK;
 1003414:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ERR_OUT_OF_RANGE;
 1003418:	e3a00008 	mov	r0, #8
 100341c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    return CC_OK;
 1003420:	e3a00000 	mov	r0, #0
}
 1003424:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

01003428 <deque_zip_iter_index>:
 *
 * @return current iterator index
 */
size_t deque_zip_iter_index(DequeZipIter *iter)
{
    return iter->index - 1;
 1003428:	e5900008 	ldr	r0, [r0, #8]
}
 100342c:	e2400001 	sub	r0, r0, #1
 1003430:	e12fff1e 	bx	lr

01003434 <hashset_conf_init>:
 *
 * @param[in, out] conf the configuration struct that is being initialized
 */
void hashset_conf_init(HashSetConf *conf)
{
    hashtable_conf_init(conf);
 1003434:	ea0000e1 	b	10037c0 <hashtable_conf_init>

01003438 <hashset_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new HashSet failed.
 */
enum cc_stat hashset_new(HashSet **hs)
{
 1003438:	e92d4070 	push	{r4, r5, r6, lr}
 100343c:	e24dd028 	sub	sp, sp, #40	; 0x28
 1003440:	e1a06000 	mov	r6, r0
    hashtable_conf_init(conf);
 1003444:	e28d0004 	add	r0, sp, #4
 1003448:	eb0000dc 	bl	10037c0 <hashtable_conf_init>
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new HashSet structure failed.
 */
enum cc_stat hashset_new_conf(HashSetConf const * const conf, HashSet **hs)
{
    HashSet *set = conf->mem_calloc(1, sizeof(HashSet));
 100344c:	e59d3020 	ldr	r3, [sp, #32]
 1003450:	e3a01014 	mov	r1, #20
 1003454:	e3a00001 	mov	r0, #1
 1003458:	e12fff33 	blx	r3

    if (!set)
 100345c:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 1003460:	03a05001 	moveq	r5, #1
    if (!set)
 1003464:	0a00000d 	beq	10034a0 <hashset_new+0x68>

    HashTable *table;
    enum cc_stat stat = hashtable_new_conf(conf, &table);
 1003468:	e28d0004 	add	r0, sp, #4
 100346c:	e1a0100d 	mov	r1, sp
 1003470:	eb000097 	bl	10036d4 <hashtable_new_conf>

    if (stat != CC_OK) {
 1003474:	e2505000 	subs	r5, r0, #0
 1003478:	1a00000b 	bne	10034ac <hashset_new+0x74>
        conf->mem_free(set);
        return stat;
    }

    set->table      = table;
 100347c:	e59d2000 	ldr	r2, [sp]
    set->mem_calloc = conf->mem_calloc;
    set->mem_free   = conf->mem_free;

    /* A dummy pointer that is never actually dereferenced
    *  that must not be null.*/
    set->dummy = (int*) 1;
 1003480:	e3a03001 	mov	r3, #1
    set->mem_calloc = conf->mem_calloc;
 1003484:	e1cd01dc 	ldrd	r0, [sp, #28]
    set->table      = table;
 1003488:	e5842000 	str	r2, [r4]
    set->mem_free   = conf->mem_free;
 100348c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    set->mem_calloc = conf->mem_calloc;
 1003490:	e1c400f8 	strd	r0, [r4, #8]
    set->dummy = (int*) 1;
 1003494:	e5843004 	str	r3, [r4, #4]
    set->mem_free   = conf->mem_free;
 1003498:	e5842010 	str	r2, [r4, #16]
    *hs = set;
 100349c:	e5864000 	str	r4, [r6]
}
 10034a0:	e1a00005 	mov	r0, r5
 10034a4:	e28dd028 	add	sp, sp, #40	; 0x28
 10034a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(set);
 10034ac:	e1a00004 	mov	r0, r4
 10034b0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 10034b4:	e12fff33 	blx	r3
}
 10034b8:	e1a00005 	mov	r0, r5
 10034bc:	e28dd028 	add	sp, sp, #40	; 0x28
 10034c0:	e8bd8070 	pop	{r4, r5, r6, pc}

010034c4 <hashset_new_conf>:
{
 10034c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10034c8:	e1a04000 	mov	r4, r0
    HashSet *set = conf->mem_calloc(1, sizeof(HashSet));
 10034cc:	e590301c 	ldr	r3, [r0, #28]
{
 10034d0:	e24dd00c 	sub	sp, sp, #12
 10034d4:	e1a07001 	mov	r7, r1
    HashSet *set = conf->mem_calloc(1, sizeof(HashSet));
 10034d8:	e3a00001 	mov	r0, #1
 10034dc:	e3a01014 	mov	r1, #20
 10034e0:	e12fff33 	blx	r3
    if (!set)
 10034e4:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 10034e8:	03a06001 	moveq	r6, #1
    if (!set)
 10034ec:	0a00000d 	beq	1003528 <hashset_new_conf+0x64>
    enum cc_stat stat = hashtable_new_conf(conf, &table);
 10034f0:	e28d1004 	add	r1, sp, #4
 10034f4:	e1a00004 	mov	r0, r4
 10034f8:	eb000075 	bl	10036d4 <hashtable_new_conf>
    if (stat != CC_OK) {
 10034fc:	e2506000 	subs	r6, r0, #0
 1003500:	1a00000b 	bne	1003534 <hashset_new_conf+0x70>
    set->mem_calloc = conf->mem_calloc;
 1003504:	e1c401d8 	ldrd	r0, [r4, #24]
    set->dummy = (int*) 1;
 1003508:	e3a03001 	mov	r3, #1
    set->mem_free   = conf->mem_free;
 100350c:	e5942020 	ldr	r2, [r4, #32]
    set->table      = table;
 1003510:	e59dc004 	ldr	ip, [sp, #4]
    set->mem_calloc = conf->mem_calloc;
 1003514:	e1c500f8 	strd	r0, [r5, #8]
    set->mem_free   = conf->mem_free;
 1003518:	e5852010 	str	r2, [r5, #16]
    set->table      = table;
 100351c:	e585c000 	str	ip, [r5]
    set->dummy = (int*) 1;
 1003520:	e5853004 	str	r3, [r5, #4]
    *hs = set;
 1003524:	e5875000 	str	r5, [r7]
    return CC_OK;
}
 1003528:	e1a00006 	mov	r0, r6
 100352c:	e28dd00c 	add	sp, sp, #12
 1003530:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        conf->mem_free(set);
 1003534:	e1a00005 	mov	r0, r5
 1003538:	e5943020 	ldr	r3, [r4, #32]
 100353c:	e12fff33 	blx	r3
}
 1003540:	e1a00006 	mov	r0, r6
 1003544:	e28dd00c 	add	sp, sp, #12
 1003548:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0100354c <hashset_destroy>:
 * it holds.
 *
 * @param[in] table HashSet to be destroyed.
 */
void hashset_destroy(HashSet *set)
{
 100354c:	e92d4010 	push	{r4, lr}
 1003550:	e1a04000 	mov	r4, r0
    hashtable_destroy(set->table);
 1003554:	e5900000 	ldr	r0, [r0]
 1003558:	eb0000b0 	bl	1003820 <hashtable_destroy>
    set->mem_free(set);
 100355c:	e5943010 	ldr	r3, [r4, #16]
 1003560:	e1a00004 	mov	r0, r4
}
 1003564:	e8bd4010 	pop	{r4, lr}
    set->mem_free(set);
 1003568:	e12fff13 	bx	r3

0100356c <hashset_add>:
 * @return CC_OK if the element was successfully added, or CC_ERR_ALLOC
 * if the memory allocation failed.
 */
enum cc_stat hashset_add(HashSet *set, void *element)
{
    return hashtable_add(set->table, element, set->dummy);
 100356c:	e8900005 	ldm	r0, {r0, r2}
 1003570:	ea0000c5 	b	100388c <hashtable_add>

01003574 <hashset_remove>:
 * @return CC_OK if the element was successfully removed, or CC_ERR_VALUE_NOT_FOUND
 * if the value was not found.
 */
enum cc_stat hashset_remove(HashSet *set, void *element, void **out)
{
    return hashtable_remove(set->table, element, out);
 1003574:	e5900000 	ldr	r0, [r0]
 1003578:	ea000175 	b	1003b54 <hashtable_remove>

0100357c <hashset_remove_all>:
 *
 * @param set the set from which all elements are being removed
 */
void hashset_remove_all(HashSet *set)
{
    hashtable_remove_all(set->table);
 100357c:	e5900000 	ldr	r0, [r0]
 1003580:	ea0001d0 	b	1003cc8 <hashtable_remove_all>

01003584 <hashset_contains>:
 *
 * @return true if the specified element is an element of the set
 */
bool hashset_contains(HashSet *set, void *element)
{
    return hashtable_contains_key(set->table, element);
 1003584:	e5900000 	ldr	r0, [r0]
 1003588:	ea0001ef 	b	1003d4c <hashtable_contains_key>

0100358c <hashset_size>:
 *
 * @return the size of the set
 */
size_t hashset_size(HashSet *set)
{
    return hashtable_size(set->table);
 100358c:	e5900000 	ldr	r0, [r0]
 1003590:	ea0001e9 	b	1003d3c <hashtable_size>

01003594 <hashset_capacity>:
 *
 * @return the capacity of the set
 */
size_t hashset_capacity(HashSet *set)
{
    return hashtable_capacity(set->table);
 1003594:	e5900000 	ldr	r0, [r0]
 1003598:	ea0001e9 	b	1003d44 <hashtable_capacity>

0100359c <hashset_foreach>:
 * @param[in] fn the operation function that is invoked on each element of the
 *               set
 */
void hashset_foreach(HashSet *set, void (*fn) (const void *e))
{
    hashtable_foreach_key(set->table, fn);
 100359c:	e5900000 	ldr	r0, [r0]
 10035a0:	ea000268 	b	1003f48 <hashtable_foreach_key>

010035a4 <hashset_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] set the set on which this iterator will operate
 */
void hashset_iter_init(HashSetIter *iter, HashSet *set)
{
    hashtable_iter_init(&(iter->iter), set->table);
 10035a4:	e5911000 	ldr	r1, [r1]
 10035a8:	ea000290 	b	1003ff0 <hashtable_iter_init>

010035ac <hashset_iter_next>:
 *
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the HashSet has been reached.
 */
enum cc_stat hashset_iter_next(HashSetIter *iter, void **out)
{
 10035ac:	e92d4010 	push	{r4, lr}
 10035b0:	e24dd008 	sub	sp, sp, #8
 10035b4:	e1a04001 	mov	r4, r1
    TableEntry *entry;
    enum cc_stat status = hashtable_iter_next(&(iter->iter), &entry);
 10035b8:	e28d1004 	add	r1, sp, #4
 10035bc:	eb0002a3 	bl	1004050 <hashtable_iter_next>

    if (status != CC_OK)
 10035c0:	e3500000 	cmp	r0, #0
 10035c4:	1a000003 	bne	10035d8 <hashset_iter_next+0x2c>
        return status;

    if (out)
 10035c8:	e3540000 	cmp	r4, #0
        *out = entry->key;
 10035cc:	159d3004 	ldrne	r3, [sp, #4]
 10035d0:	15933000 	ldrne	r3, [r3]
 10035d4:	15843000 	strne	r3, [r4]

    return CC_OK;
}
 10035d8:	e28dd008 	add	sp, sp, #8
 10035dc:	e8bd8010 	pop	{r4, pc}

010035e0 <hashset_iter_remove>:
 * @return CC_OK if the entry was successfully removed, or
 * CC_ERR_VALUE_NOT_FOUND.
 */
enum cc_stat hashset_iter_remove(HashSetIter *iter, void **out)
{
    return hashtable_iter_remove(&(iter->iter), out);
 10035e0:	ea0002bf 	b	10040e4 <hashtable_iter_remove>

010035e4 <hashtable_hash_string>:
{
    const    char   *str  = key;
    register size_t  hash = seed + 5381 + len + 1; /* Suppress the unused param warning */

    int c;
    while ((c = *str++))
 10035e4:	e4d03001 	ldrb	r3, [r0], #1
    register size_t  hash = seed + 5381 + len + 1; /* Suppress the unused param warning */
 10035e8:	e2822c15 	add	r2, r2, #5376	; 0x1500
 10035ec:	e2822006 	add	r2, r2, #6
 10035f0:	e0821001 	add	r1, r2, r1
    while ((c = *str++))
 10035f4:	e3530000 	cmp	r3, #0
 10035f8:	0a000004 	beq	1003610 <hashtable_hash_string+0x2c>
        hash = ((hash << 5) + hash) ^ c;
 10035fc:	e0811281 	add	r1, r1, r1, lsl #5
 1003600:	e0211003 	eor	r1, r1, r3
    while ((c = *str++))
 1003604:	e4d03001 	ldrb	r3, [r0], #1
 1003608:	e3530000 	cmp	r3, #0
 100360c:	1afffffa 	bne	10035fc <hashtable_hash_string+0x18>

    return hash;
}
 1003610:	e1a00001 	mov	r0, r1
 1003614:	e12fff1e 	bx	lr

01003618 <hashtable_new>:
{
 1003618:	e92d4070 	push	{r4, r5, r6, lr}
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 100361c:	e3a01030 	mov	r1, #48	; 0x30
{
 1003620:	e1a05000 	mov	r5, r0
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 1003624:	e3a00001 	mov	r0, #1
 1003628:	fa005b62 	blx	101a3b8 <calloc>
    if (!table)
 100362c:	e2504000 	subs	r4, r0, #0
 1003630:	0a000021 	beq	10036bc <hashtable_new+0xa4>
    table->capacity = round_pow_two(conf->initial_capacity);
 1003634:	e3a01010 	mov	r1, #16
 1003638:	e5841000 	str	r1, [r4]
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 100363c:	e1a00001 	mov	r0, r1
 1003640:	fa005b5c 	blx	101a3b8 <calloc>
    if (!table->buckets) {
 1003644:	e3500000 	cmp	r0, #0
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 1003648:	e5840018 	str	r0, [r4, #24]
    if (!table->buckets) {
 100364c:	0a00001c 	beq	10036c4 <hashtable_new+0xac>
    table->hash        = conf->hash;
 1003650:	e30335e4 	movw	r3, #13796	; 0x35e4
    table->key_cmp     = conf->key_compare;
 1003654:	e301ca90 	movw	ip, #6800	; 0x1a90
    table->hash        = conf->hash;
 1003658:	e3403100 	movt	r3, #256	; 0x100
    table->key_cmp     = conf->key_compare;
 100365c:	e340c100 	movt	ip, #256	; 0x100
    table->mem_alloc   = conf->mem_alloc;
 1003660:	e30a0fb9 	movw	r0, #44985	; 0xafb9
    table->mem_calloc  = conf->mem_calloc;
 1003664:	e30a13b9 	movw	r1, #41913	; 0xa3b9
    table->mem_free    = conf->mem_free;
 1003668:	e30a2fc9 	movw	r2, #45001	; 0xafc9
    table->mem_alloc   = conf->mem_alloc;
 100366c:	e3400101 	movt	r0, #257	; 0x101
    table->mem_calloc  = conf->mem_calloc;
 1003670:	e3401101 	movt	r1, #257	; 0x101
    *out = table;
 1003674:	e5854000 	str	r4, [r5]
    table->mem_free    = conf->mem_free;
 1003678:	e3402101 	movt	r2, #257	; 0x101
    table->hash        = conf->hash;
 100367c:	e584301c 	str	r3, [r4, #28]
    table->load_factor = conf->load_factor;
 1003680:	e3a055fd 	mov	r5, #1061158912	; 0x3f400000
    table->hash_seed   = conf->hash_seed;
 1003684:	e3a03000 	mov	r3, #0
    table->key_cmp     = conf->key_compare;
 1003688:	e584c020 	str	ip, [r4, #32]
    table->key_len     = conf->key_length;
 100368c:	e3e0e000 	mvn	lr, #0
    table->threshold   = table->capacity * table->load_factor;
 1003690:	e3a0c00c 	mov	ip, #12
    table->mem_alloc   = conf->mem_alloc;
 1003694:	e5840024 	str	r0, [r4, #36]	; 0x24
    table->mem_calloc  = conf->mem_calloc;
 1003698:	e5841028 	str	r1, [r4, #40]	; 0x28
    return CC_OK;
 100369c:	e1a00003 	mov	r0, r3
    table->mem_free    = conf->mem_free;
 10036a0:	e584202c 	str	r2, [r4, #44]	; 0x2c
    table->load_factor = conf->load_factor;
 10036a4:	e5845014 	str	r5, [r4, #20]
    table->hash_seed   = conf->hash_seed;
 10036a8:	e584300c 	str	r3, [r4, #12]
    table->size        = 0;
 10036ac:	e5843004 	str	r3, [r4, #4]
    table->key_len     = conf->key_length;
 10036b0:	e584e010 	str	lr, [r4, #16]
    table->threshold   = table->capacity * table->load_factor;
 10036b4:	e584c008 	str	ip, [r4, #8]
    return CC_OK;
 10036b8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10036bc:	e3a00001 	mov	r0, #1
}
 10036c0:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 10036c4:	e1a00004 	mov	r0, r4
 10036c8:	fa005e3e 	blx	101afc8 <free>
        return CC_ERR_ALLOC;
 10036cc:	e3a00001 	mov	r0, #1
 10036d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010036d4 <hashtable_new_conf>:
{
 10036d4:	e92d4070 	push	{r4, r5, r6, lr}
 10036d8:	e1a06000 	mov	r6, r0
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 10036dc:	e590301c 	ldr	r3, [r0, #28]
{
 10036e0:	e1a04001 	mov	r4, r1
    HashTable *table = conf->mem_calloc(1, sizeof(HashTable));
 10036e4:	e3a00001 	mov	r0, #1
 10036e8:	e3a01030 	mov	r1, #48	; 0x30
 10036ec:	e12fff33 	blx	r3
    if (!table)
 10036f0:	e2505000 	subs	r5, r0, #0
 10036f4:	0a00002a 	beq	10037a4 <hashtable_new_conf+0xd0>
    table->capacity = round_pow_two(conf->initial_capacity);
 10036f8:	e5963004 	ldr	r3, [r6, #4]
    if (n >= MAX_POW_TWO)
 10036fc:	e3530000 	cmp	r3, #0
        return MAX_POW_TWO;
 1003700:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    if (n >= MAX_POW_TWO)
 1003704:	ba000007 	blt	1003728 <hashtable_new_conf+0x54>
    n--;
 1003708:	12430001 	subne	r0, r3, #1
        return 2;
 100370c:	03a00002 	moveq	r0, #2
    n |= n >> 1;
 1003710:	118000a0 	orrne	r0, r0, r0, lsr #1
    n |= n >> 2;
 1003714:	11800120 	orrne	r0, r0, r0, lsr #2
    n |= n >> 4;
 1003718:	11800220 	orrne	r0, r0, r0, lsr #4
    n |= n >> 8;
 100371c:	11800420 	orrne	r0, r0, r0, lsr #8
    n |= n >> 16;
 1003720:	11800820 	orrne	r0, r0, r0, lsr #16
    n++;
 1003724:	12800001 	addne	r0, r0, #1
    table->capacity = round_pow_two(conf->initial_capacity);
 1003728:	e5850000 	str	r0, [r5]
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 100372c:	e3a01010 	mov	r1, #16
 1003730:	e596301c 	ldr	r3, [r6, #28]
 1003734:	e12fff33 	blx	r3
    if (!table->buckets) {
 1003738:	e3500000 	cmp	r0, #0
    table->buckets  = conf->mem_calloc(table->capacity, sizeof(TableEntry));
 100373c:	e5850018 	str	r0, [r5, #24]
    if (!table->buckets) {
 1003740:	0a000019 	beq	10037ac <hashtable_new_conf+0xd8>
    table->threshold   = table->capacity * table->load_factor;
 1003744:	edd57a00 	vldr	s15, [r5]
    table->size        = 0;
 1003748:	e3a03000 	mov	r3, #0
    table->load_factor = conf->load_factor;
 100374c:	ed967a00 	vldr	s14, [r6]
    return CC_OK;
 1003750:	e1a00003 	mov	r0, r3
    table->hash        = conf->hash;
 1003754:	e5962010 	ldr	r2, [r6, #16]
    table->key_cmp     = conf->key_compare;
 1003758:	e5961014 	ldr	r1, [r6, #20]
    table->threshold   = table->capacity * table->load_factor;
 100375c:	eef87a67 	vcvt.f32.u32	s15, s15
    table->hash        = conf->hash;
 1003760:	e585201c 	str	r2, [r5, #28]
    table->hash_seed   = conf->hash_seed;
 1003764:	e596200c 	ldr	r2, [r6, #12]
    table->key_cmp     = conf->key_compare;
 1003768:	e5851020 	str	r1, [r5, #32]
    table->threshold   = table->capacity * table->load_factor;
 100376c:	ee677a87 	vmul.f32	s15, s15, s14
    table->hash_seed   = conf->hash_seed;
 1003770:	e585200c 	str	r2, [r5, #12]
    table->key_len     = conf->key_length;
 1003774:	e5962008 	ldr	r2, [r6, #8]
    table->mem_alloc   = conf->mem_alloc;
 1003778:	e5961018 	ldr	r1, [r6, #24]
    table->threshold   = table->capacity * table->load_factor;
 100377c:	eefc7ae7 	vcvt.u32.f32	s15, s15
    table->size        = 0;
 1003780:	e5853004 	str	r3, [r5, #4]
    table->key_len     = conf->key_length;
 1003784:	e5852010 	str	r2, [r5, #16]
    table->mem_free    = conf->mem_free;
 1003788:	e1c621dc 	ldrd	r2, [r6, #28]
    table->load_factor = conf->load_factor;
 100378c:	ed857a05 	vstr	s14, [r5, #20]
    table->mem_alloc   = conf->mem_alloc;
 1003790:	e5851024 	str	r1, [r5, #36]	; 0x24
    table->threshold   = table->capacity * table->load_factor;
 1003794:	edc57a02 	vstr	s15, [r5, #8]
    table->mem_free    = conf->mem_free;
 1003798:	e1c522f8 	strd	r2, [r5, #40]	; 0x28
    *out = table;
 100379c:	e5845000 	str	r5, [r4]
    return CC_OK;
 10037a0:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10037a4:	e3a00001 	mov	r0, #1
}
 10037a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 10037ac:	e1a00005 	mov	r0, r5
 10037b0:	e5963020 	ldr	r3, [r6, #32]
 10037b4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10037b8:	e3a00001 	mov	r0, #1
 10037bc:	e8bd8070 	pop	{r4, r5, r6, pc}

010037c0 <hashtable_conf_init>:
    conf->hash             = STRING_HASH;
 10037c0:	e30335e4 	movw	r3, #13796	; 0x35e4
    conf->key_compare      = cc_common_cmp_str;
 10037c4:	e301ca90 	movw	ip, #6800	; 0x1a90
    conf->hash             = STRING_HASH;
 10037c8:	e3403100 	movt	r3, #256	; 0x100
    conf->key_compare      = cc_common_cmp_str;
 10037cc:	e340c100 	movt	ip, #256	; 0x100
{
 10037d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    conf->mem_alloc        = malloc;
 10037d4:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    conf->load_factor      = DEFAULT_LOAD_FACTOR;
 10037d8:	e3a0e5fd 	mov	lr, #1061158912	; 0x3f400000
    conf->mem_calloc       = calloc;
 10037dc:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_alloc        = malloc;
 10037e0:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc       = calloc;
 10037e4:	e3402101 	movt	r2, #257	; 0x101
    conf->hash             = STRING_HASH;
 10037e8:	e5803010 	str	r3, [r0, #16]
    conf->mem_free         = free;
 10037ec:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    conf->key_compare      = cc_common_cmp_str;
 10037f0:	e580c014 	str	ip, [r0, #20]
    conf->initial_capacity = DEFAULT_CAPACITY;
 10037f4:	e3a0c010 	mov	ip, #16
    conf->mem_free         = free;
 10037f8:	e3403101 	movt	r3, #257	; 0x101
    conf->load_factor      = DEFAULT_LOAD_FACTOR;
 10037fc:	e580e000 	str	lr, [r0]
    conf->initial_capacity = DEFAULT_CAPACITY;
 1003800:	e580c004 	str	ip, [r0, #4]
    conf->key_length       = KEY_LENGTH_VARIABLE;
 1003804:	e3e0e000 	mvn	lr, #0
    conf->hash_seed        = 0;
 1003808:	e3a0c000 	mov	ip, #0
    conf->key_length       = KEY_LENGTH_VARIABLE;
 100380c:	e580e008 	str	lr, [r0, #8]
    conf->hash_seed        = 0;
 1003810:	e580c00c 	str	ip, [r0, #12]
    conf->mem_alloc        = malloc;
 1003814:	e5801018 	str	r1, [r0, #24]
    conf->mem_free         = free;
 1003818:	e1c021fc 	strd	r2, [r0, #28]
}
 100381c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01003820 <hashtable_destroy>:
    for (i = 0; i < table->capacity; i++) {
 1003820:	e5902000 	ldr	r2, [r0]
{
 1003824:	e92d4070 	push	{r4, r5, r6, lr}
 1003828:	e1a05000 	mov	r5, r0
 100382c:	e5903018 	ldr	r3, [r0, #24]
    for (i = 0; i < table->capacity; i++) {
 1003830:	e3520000 	cmp	r2, #0
 1003834:	0a00000d 	beq	1003870 <hashtable_destroy+0x50>
 1003838:	e3a06000 	mov	r6, #0
        TableEntry *next = table->buckets[i];
 100383c:	e7930106 	ldr	r0, [r3, r6, lsl #2]
        while (next) {
 1003840:	e3500000 	cmp	r0, #0
 1003844:	0a000006 	beq	1003864 <hashtable_destroy+0x44>
            TableEntry *tmp = next->next;
 1003848:	e590400c 	ldr	r4, [r0, #12]
            table->mem_free(next);
 100384c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
 1003850:	e12fff33 	blx	r3
        while (next) {
 1003854:	e2540000 	subs	r0, r4, #0
 1003858:	1afffffa 	bne	1003848 <hashtable_destroy+0x28>
 100385c:	e5952000 	ldr	r2, [r5]
 1003860:	e5953018 	ldr	r3, [r5, #24]
    for (i = 0; i < table->capacity; i++) {
 1003864:	e2866001 	add	r6, r6, #1
 1003868:	e1560002 	cmp	r6, r2
 100386c:	3afffff2 	bcc	100383c <hashtable_destroy+0x1c>
    table->mem_free(table->buckets);
 1003870:	e1a00003 	mov	r0, r3
 1003874:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
 1003878:	e12fff33 	blx	r3
    table->mem_free(table);
 100387c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
 1003880:	e1a00005 	mov	r0, r5
}
 1003884:	e8bd4070 	pop	{r4, r5, r6, lr}
    table->mem_free(table);
 1003888:	e12fff13 	bx	r3

0100388c <hashtable_add>:
{
 100388c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1003890:	e1a05001 	mov	r5, r1
    if (table->size >= table->threshold) {
 1003894:	e5903008 	ldr	r3, [r0, #8]
{
 1003898:	e1a07000 	mov	r7, r0
 100389c:	e1a06002 	mov	r6, r2
    if (table->size >= table->threshold) {
 10038a0:	e5901004 	ldr	r1, [r0, #4]
 10038a4:	e1510003 	cmp	r1, r3
 10038a8:	2a00002a 	bcs	1003958 <hashtable_add+0xcc>
    if (!key)
 10038ac:	e3550000 	cmp	r5, #0
 10038b0:	0a000055 	beq	1003a0c <hashtable_add+0x180>
    const size_t hash = table->hash(key, table->key_len, table->hash_seed);
 10038b4:	e597301c 	ldr	r3, [r7, #28]
 10038b8:	e1a00005 	mov	r0, r5
 10038bc:	e597200c 	ldr	r2, [r7, #12]
 10038c0:	e5971010 	ldr	r1, [r7, #16]
 10038c4:	e12fff33 	blx	r3
    const size_t i    = hash & (table->capacity - 1);
 10038c8:	e5978000 	ldr	r8, [r7]
    const size_t hash = table->hash(key, table->key_len, table->hash_seed);
 10038cc:	e1a09000 	mov	r9, r0
    TableEntry *replace = table->buckets[i];
 10038d0:	e5973018 	ldr	r3, [r7, #24]
    const size_t i    = hash & (table->capacity - 1);
 10038d4:	e2488001 	sub	r8, r8, #1
 10038d8:	e0088000 	and	r8, r8, r0
    TableEntry *replace = table->buckets[i];
 10038dc:	e7934108 	ldr	r4, [r3, r8, lsl #2]
    while (replace) {
 10038e0:	e3540000 	cmp	r4, #0
 10038e4:	0a00000a 	beq	1003914 <hashtable_add+0x88>
        void *rk = replace->key;
 10038e8:	e5943000 	ldr	r3, [r4]
        if (rk && table->key_cmp(rk, key) == 0) {
 10038ec:	e1a01005 	mov	r1, r5
 10038f0:	e2530000 	subs	r0, r3, #0
 10038f4:	0a000003 	beq	1003908 <hashtable_add+0x7c>
 10038f8:	e5973020 	ldr	r3, [r7, #32]
 10038fc:	e12fff33 	blx	r3
 1003900:	e3500000 	cmp	r0, #0
 1003904:	0a00003c 	beq	10039fc <hashtable_add+0x170>
        replace = replace->next;
 1003908:	e594400c 	ldr	r4, [r4, #12]
    while (replace) {
 100390c:	e3540000 	cmp	r4, #0
 1003910:	1afffff4 	bne	10038e8 <hashtable_add+0x5c>
    TableEntry *new_entry = table->mem_alloc(sizeof(TableEntry));
 1003914:	e5973024 	ldr	r3, [r7, #36]	; 0x24
 1003918:	e3a00010 	mov	r0, #16
 100391c:	e12fff33 	blx	r3
    if (!new_entry)
 1003920:	e2503000 	subs	r3, r0, #0
 1003924:	0a000036 	beq	1003a04 <hashtable_add+0x178>
    new_entry->next  = table->buckets[i];
 1003928:	e5971018 	ldr	r1, [r7, #24]
    return CC_OK;
 100392c:	e3a00000 	mov	r0, #0
    table->size++;
 1003930:	e5972004 	ldr	r2, [r7, #4]
    new_entry->key   = key;
 1003934:	e5835000 	str	r5, [r3]
    new_entry->value = val;
 1003938:	e5836004 	str	r6, [r3, #4]
    new_entry->next  = table->buckets[i];
 100393c:	e791c108 	ldr	ip, [r1, r8, lsl #2]
    table->size++;
 1003940:	e2822001 	add	r2, r2, #1
    new_entry->hash  = hash;
 1003944:	e5839008 	str	r9, [r3, #8]
    new_entry->next  = table->buckets[i];
 1003948:	e583c00c 	str	ip, [r3, #12]
    table->buckets[i] = new_entry;
 100394c:	e7813108 	str	r3, [r1, r8, lsl #2]
    table->size++;
 1003950:	e5872004 	str	r2, [r7, #4]
    return CC_OK;
 1003954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        if ((stat = resize(table, table->capacity << 1)) != CC_OK)
 1003958:	e5904000 	ldr	r4, [r0]
    if (t->capacity == MAX_POW_TWO)
 100395c:	e3540102 	cmp	r4, #-2147483648	; 0x80000000
        if ((stat = resize(table, table->capacity << 1)) != CC_OK)
 1003960:	e1a04084 	lsl	r4, r4, #1
    if (t->capacity == MAX_POW_TWO)
 1003964:	0a000048 	beq	1003a8c <hashtable_add+0x200>
    TableEntry **new_buckets = t->mem_calloc(new_capacity, sizeof(TableEntry));
 1003968:	e5903028 	ldr	r3, [r0, #40]	; 0x28
 100396c:	e3a01010 	mov	r1, #16
 1003970:	e1a00004 	mov	r0, r4
 1003974:	e12fff33 	blx	r3
    if (!new_buckets)
 1003978:	e250c000 	subs	ip, r0, #0
 100397c:	0a000020 	beq	1003a04 <hashtable_add+0x178>
    move_entries(old_buckets, new_buckets, t->capacity, new_capacity);
 1003980:	e597a000 	ldr	sl, [r7]
    TableEntry **old_buckets = t->buckets;
 1003984:	e5970018 	ldr	r0, [r7, #24]
    for (i = 0; i < src_size; i++) {
 1003988:	e35a0000 	cmp	sl, #0
 100398c:	11a09000 	movne	r9, r0
 1003990:	12448001 	subne	r8, r4, #1
 1003994:	1080a10a 	addne	sl, r0, sl, lsl #2
 1003998:	0a00000c 	beq	10039d0 <hashtable_add+0x144>
        TableEntry *entry = src_bucket[i];
 100399c:	e4993004 	ldr	r3, [r9], #4
        while (entry) {
 10039a0:	e3530000 	cmp	r3, #0
 10039a4:	0a000007 	beq	10039c8 <hashtable_add+0x13c>
            size_t      index = entry->hash & (dest_size - 1);
 10039a8:	e5932008 	ldr	r2, [r3, #8]
            TableEntry *next  = entry->next;
 10039ac:	e593100c 	ldr	r1, [r3, #12]
            size_t      index = entry->hash & (dest_size - 1);
 10039b0:	e0022008 	and	r2, r2, r8
            entry->next = dest_bucket[index];
 10039b4:	e79ce102 	ldr	lr, [ip, r2, lsl #2]
 10039b8:	e583e00c 	str	lr, [r3, #12]
            dest_bucket[index] = entry;
 10039bc:	e78c3102 	str	r3, [ip, r2, lsl #2]
        while (entry) {
 10039c0:	e2513000 	subs	r3, r1, #0
 10039c4:	1afffff7 	bne	10039a8 <hashtable_add+0x11c>
    for (i = 0; i < src_size; i++) {
 10039c8:	e159000a 	cmp	r9, sl
 10039cc:	1afffff2 	bne	100399c <hashtable_add+0x110>
    t->threshold = t->load_factor * new_capacity;
 10039d0:	ee074a90 	vmov	s15, r4
 10039d4:	ed977a05 	vldr	s14, [r7, #20]
 10039d8:	eef87a67 	vcvt.f32.u32	s15, s15
    t->buckets   = new_buckets;
 10039dc:	e587c018 	str	ip, [r7, #24]
    t->capacity  = new_capacity;
 10039e0:	e5874000 	str	r4, [r7]
    t->mem_free(old_buckets);
 10039e4:	e597302c 	ldr	r3, [r7, #44]	; 0x2c
    t->threshold = t->load_factor * new_capacity;
 10039e8:	ee677a87 	vmul.f32	s15, s15, s14
 10039ec:	eefc7ae7 	vcvt.u32.f32	s15, s15
 10039f0:	edc77a02 	vstr	s15, [r7, #8]
    t->mem_free(old_buckets);
 10039f4:	e12fff33 	blx	r3
    return CC_OK;
 10039f8:	eaffffab 	b	10038ac <hashtable_add+0x20>
            replace->value = val;
 10039fc:	e5846004 	str	r6, [r4, #4]
            return CC_OK;
 1003a00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1003a04:	e3a00001 	mov	r0, #1
 1003a08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    TableEntry *replace = table->buckets[0];
 1003a0c:	e5973018 	ldr	r3, [r7, #24]
 1003a10:	e5933000 	ldr	r3, [r3]
    while (replace) {
 1003a14:	e3530000 	cmp	r3, #0
 1003a18:	1a000003 	bne	1003a2c <hashtable_add+0x1a0>
 1003a1c:	ea000008 	b	1003a44 <hashtable_add+0x1b8>
        replace = replace->next;
 1003a20:	e593300c 	ldr	r3, [r3, #12]
    while (replace) {
 1003a24:	e3530000 	cmp	r3, #0
 1003a28:	0a000005 	beq	1003a44 <hashtable_add+0x1b8>
        if (!replace->key) {
 1003a2c:	e5932000 	ldr	r2, [r3]
 1003a30:	e3520000 	cmp	r2, #0
 1003a34:	1afffff9 	bne	1003a20 <hashtable_add+0x194>
            replace->value = val;
 1003a38:	e5836004 	str	r6, [r3, #4]
            return CC_OK;
 1003a3c:	e3a00000 	mov	r0, #0
 1003a40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    TableEntry *new_entry = table->mem_alloc(sizeof(TableEntry));
 1003a44:	e5973024 	ldr	r3, [r7, #36]	; 0x24
 1003a48:	e3a00010 	mov	r0, #16
 1003a4c:	e12fff33 	blx	r3
    if (!new_entry)
 1003a50:	e2503000 	subs	r3, r0, #0
 1003a54:	0affffea 	beq	1003a04 <hashtable_add+0x178>
    new_entry->next  = table->buckets[0];
 1003a58:	e597c018 	ldr	ip, [r7, #24]
    new_entry->key   = NULL;
 1003a5c:	e3a01000 	mov	r1, #0
    table->size++;
 1003a60:	e5972004 	ldr	r2, [r7, #4]
    return CC_OK;
 1003a64:	e1a00001 	mov	r0, r1
    new_entry->value = val;
 1003a68:	e5836004 	str	r6, [r3, #4]
    new_entry->key   = NULL;
 1003a6c:	e5831000 	str	r1, [r3]
    new_entry->next  = table->buckets[0];
 1003a70:	e59ce000 	ldr	lr, [ip]
    table->size++;
 1003a74:	e2822001 	add	r2, r2, #1
    new_entry->hash  = 0;
 1003a78:	e5831008 	str	r1, [r3, #8]
    new_entry->next  = table->buckets[0];
 1003a7c:	e583e00c 	str	lr, [r3, #12]
    table->buckets[0] = new_entry;
 1003a80:	e58c3000 	str	r3, [ip]
    table->size++;
 1003a84:	e5872004 	str	r2, [r7, #4]
    return CC_OK;
 1003a88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_MAX_CAPACITY;
 1003a8c:	e3a00004 	mov	r0, #4
}
 1003a90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01003a94 <hashtable_get>:
{
 1003a94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (!key)
 1003a98:	e2516000 	subs	r6, r1, #0
 1003a9c:	0a00001d 	beq	1003b18 <hashtable_get+0x84>
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003aa0:	e1a05000 	mov	r5, r0
 1003aa4:	e590301c 	ldr	r3, [r0, #28]
 1003aa8:	e1a07002 	mov	r7, r2
 1003aac:	e1a00006 	mov	r0, r6
 1003ab0:	e595200c 	ldr	r2, [r5, #12]
 1003ab4:	e5951010 	ldr	r1, [r5, #16]
 1003ab8:	e12fff33 	blx	r3
    return hash & (table->capacity - 1);
 1003abc:	e5953000 	ldr	r3, [r5]
    TableEntry *bucket = table->buckets[index];
 1003ac0:	e5952018 	ldr	r2, [r5, #24]
    return hash & (table->capacity - 1);
 1003ac4:	e2433001 	sub	r3, r3, #1
 1003ac8:	e0000003 	and	r0, r0, r3
    TableEntry *bucket = table->buckets[index];
 1003acc:	e7924100 	ldr	r4, [r2, r0, lsl #2]
    while (bucket) {
 1003ad0:	e3540000 	cmp	r4, #0
 1003ad4:	0a00000a 	beq	1003b04 <hashtable_get+0x70>
        if (bucket->key && table->key_cmp(bucket->key, key) == 0) {
 1003ad8:	e5943000 	ldr	r3, [r4]
 1003adc:	e1a01006 	mov	r1, r6
 1003ae0:	e2530000 	subs	r0, r3, #0
 1003ae4:	0a000003 	beq	1003af8 <hashtable_get+0x64>
 1003ae8:	e5953020 	ldr	r3, [r5, #32]
 1003aec:	e12fff33 	blx	r3
 1003af0:	e3500000 	cmp	r0, #0
 1003af4:	0a000004 	beq	1003b0c <hashtable_get+0x78>
        bucket = bucket->next;
 1003af8:	e594400c 	ldr	r4, [r4, #12]
    while (bucket) {
 1003afc:	e3540000 	cmp	r4, #0
 1003b00:	1afffff4 	bne	1003ad8 <hashtable_get+0x44>
    return CC_ERR_KEY_NOT_FOUND;
 1003b04:	e3a00006 	mov	r0, #6
}
 1003b08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            *out = bucket->value;
 1003b0c:	e5943004 	ldr	r3, [r4, #4]
 1003b10:	e5873000 	str	r3, [r7]
            return CC_OK;
 1003b14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    TableEntry *bucket = table->buckets[0];
 1003b18:	e5903018 	ldr	r3, [r0, #24]
 1003b1c:	e5933000 	ldr	r3, [r3]
    while (bucket) {
 1003b20:	e3530000 	cmp	r3, #0
 1003b24:	1a000003 	bne	1003b38 <hashtable_get+0xa4>
 1003b28:	eafffff5 	b	1003b04 <hashtable_get+0x70>
        bucket = bucket->next;
 1003b2c:	e593300c 	ldr	r3, [r3, #12]
    while (bucket) {
 1003b30:	e3530000 	cmp	r3, #0
 1003b34:	0afffff2 	beq	1003b04 <hashtable_get+0x70>
        if (bucket->key == NULL) {
 1003b38:	e5931000 	ldr	r1, [r3]
 1003b3c:	e3510000 	cmp	r1, #0
 1003b40:	1afffff9 	bne	1003b2c <hashtable_get+0x98>
            *out = bucket->value;
 1003b44:	e5933004 	ldr	r3, [r3, #4]
            return CC_OK;
 1003b48:	e3a00000 	mov	r0, #0
            *out = bucket->value;
 1003b4c:	e5823000 	str	r3, [r2]
            return CC_OK;
 1003b50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003b54 <hashtable_remove>:
{
 1003b54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (!key)
 1003b58:	e2517000 	subs	r7, r1, #0
{
 1003b5c:	e1a06000 	mov	r6, r0
 1003b60:	e1a0a002 	mov	sl, r2
    if (!key)
 1003b64:	0a000036 	beq	1003c44 <hashtable_remove+0xf0>
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003b68:	e590301c 	ldr	r3, [r0, #28]
 1003b6c:	e1a00007 	mov	r0, r7
 1003b70:	e596200c 	ldr	r2, [r6, #12]
 1003b74:	e5961010 	ldr	r1, [r6, #16]
 1003b78:	e12fff33 	blx	r3
    return hash & (table->capacity - 1);
 1003b7c:	e5969000 	ldr	r9, [r6]
    TableEntry *e    = table->buckets[i];
 1003b80:	e5963018 	ldr	r3, [r6, #24]
    return hash & (table->capacity - 1);
 1003b84:	e2499001 	sub	r9, r9, #1
 1003b88:	e0099000 	and	r9, r9, r0
    TableEntry *e    = table->buckets[i];
 1003b8c:	e7934109 	ldr	r4, [r3, r9, lsl #2]
    while (e) {
 1003b90:	e3540000 	cmp	r4, #0
 1003b94:	0a00000d 	beq	1003bd0 <hashtable_remove+0x7c>
    TableEntry *prev = NULL;
 1003b98:	e3a08000 	mov	r8, #0
        if (e->key && table->key_cmp(key, e->key) == 0) {
 1003b9c:	e5943000 	ldr	r3, [r4]
 1003ba0:	e1a00007 	mov	r0, r7
        next = e->next;
 1003ba4:	e594500c 	ldr	r5, [r4, #12]
        if (e->key && table->key_cmp(key, e->key) == 0) {
 1003ba8:	e2531000 	subs	r1, r3, #0
 1003bac:	0a000003 	beq	1003bc0 <hashtable_remove+0x6c>
 1003bb0:	e5963020 	ldr	r3, [r6, #32]
 1003bb4:	e12fff33 	blx	r3
 1003bb8:	e3500000 	cmp	r0, #0
 1003bbc:	0a000005 	beq	1003bd8 <hashtable_remove+0x84>
    while (e) {
 1003bc0:	e3550000 	cmp	r5, #0
 1003bc4:	e1a08004 	mov	r8, r4
 1003bc8:	e1a04005 	mov	r4, r5
 1003bcc:	1afffff2 	bne	1003b9c <hashtable_remove+0x48>
    return CC_ERR_KEY_NOT_FOUND;
 1003bd0:	e3a00006 	mov	r0, #6
}
 1003bd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            if (!prev)
 1003bd8:	e3580000 	cmp	r8, #0
            void *value = e->value;
 1003bdc:	e5947004 	ldr	r7, [r4, #4]
                table->buckets[i] = next;
 1003be0:	05963018 	ldreq	r3, [r6, #24]
            table->mem_free(e);
 1003be4:	e1a00004 	mov	r0, r4
                prev->next = next;
 1003be8:	1588500c 	strne	r5, [r8, #12]
                table->buckets[i] = next;
 1003bec:	07835109 	streq	r5, [r3, r9, lsl #2]
            table->mem_free(e);
 1003bf0:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
 1003bf4:	e12fff33 	blx	r3
            table->size--;
 1003bf8:	e5963004 	ldr	r3, [r6, #4]
            if (out)
 1003bfc:	e35a0000 	cmp	sl, #0
            table->size--;
 1003c00:	e2433001 	sub	r3, r3, #1
 1003c04:	e5863004 	str	r3, [r6, #4]
            if (out)
 1003c08:	0a00000b 	beq	1003c3c <hashtable_remove+0xe8>
                *out = value;
 1003c0c:	e58a7000 	str	r7, [sl]
            return CC_OK;
 1003c10:	e3a00000 	mov	r0, #0
 1003c14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            void *value = e->value;
 1003c18:	e5904004 	ldr	r4, [r0, #4]
                prev->next = next;
 1003c1c:	e581300c 	str	r3, [r1, #12]
            table->mem_free(e);
 1003c20:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
 1003c24:	e12fff33 	blx	r3
            table->size--;
 1003c28:	e5963004 	ldr	r3, [r6, #4]
            if (out)
 1003c2c:	e35a0000 	cmp	sl, #0
            table->size--;
 1003c30:	e2433001 	sub	r3, r3, #1
 1003c34:	e5863004 	str	r3, [r6, #4]
                *out = value;
 1003c38:	158a4000 	strne	r4, [sl]
            return CC_OK;
 1003c3c:	e3a00000 	mov	r0, #0
 1003c40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    TableEntry *e = table->buckets[0];
 1003c44:	e5903018 	ldr	r3, [r0, #24]
 1003c48:	e5932000 	ldr	r2, [r3]
    while (e) {
 1003c4c:	e3520000 	cmp	r2, #0
 1003c50:	0affffde 	beq	1003bd0 <hashtable_remove+0x7c>
        if (e->key == NULL) {
 1003c54:	e5920000 	ldr	r0, [r2]
        next = e->next;
 1003c58:	e592100c 	ldr	r1, [r2, #12]
        if (e->key == NULL) {
 1003c5c:	e3500000 	cmp	r0, #0
 1003c60:	0a00000f 	beq	1003ca4 <hashtable_remove+0x150>
    while (e) {
 1003c64:	e3510000 	cmp	r1, #0
 1003c68:	0affffd8 	beq	1003bd0 <hashtable_remove+0x7c>
        if (e->key == NULL) {
 1003c6c:	e5913000 	ldr	r3, [r1]
        next = e->next;
 1003c70:	e591000c 	ldr	r0, [r1, #12]
        if (e->key == NULL) {
 1003c74:	e3530000 	cmp	r3, #0
 1003c78:	1a000006 	bne	1003c98 <hashtable_remove+0x144>
 1003c7c:	ea00000c 	b	1003cb4 <hashtable_remove+0x160>
 1003c80:	e5902000 	ldr	r2, [r0]
        next = e->next;
 1003c84:	e590300c 	ldr	r3, [r0, #12]
        if (e->key == NULL) {
 1003c88:	e3520000 	cmp	r2, #0
 1003c8c:	0affffe1 	beq	1003c18 <hashtable_remove+0xc4>
 1003c90:	e1a01000 	mov	r1, r0
        next = e->next;
 1003c94:	e1a00003 	mov	r0, r3
    while (e) {
 1003c98:	e3500000 	cmp	r0, #0
 1003c9c:	1afffff7 	bne	1003c80 <hashtable_remove+0x12c>
 1003ca0:	eaffffca 	b	1003bd0 <hashtable_remove+0x7c>
            void *value = e->value;
 1003ca4:	e5924004 	ldr	r4, [r2, #4]
                table->buckets[0] = next;
 1003ca8:	e1a00002 	mov	r0, r2
 1003cac:	e5831000 	str	r1, [r3]
 1003cb0:	eaffffda 	b	1003c20 <hashtable_remove+0xcc>
        next = e->next;
 1003cb4:	e1a03000 	mov	r3, r0
            void *value = e->value;
 1003cb8:	e5914004 	ldr	r4, [r1, #4]
 1003cbc:	e1a00001 	mov	r0, r1
    TableEntry *e = table->buckets[0];
 1003cc0:	e1a01002 	mov	r1, r2
 1003cc4:	eaffffd4 	b	1003c1c <hashtable_remove+0xc8>

01003cc8 <hashtable_remove_all>:
    for (i = 0; i < table->capacity; i++) {
 1003cc8:	e5901000 	ldr	r1, [r0]
 1003ccc:	e3510000 	cmp	r1, #0
 1003cd0:	012fff1e 	bxeq	lr
 1003cd4:	e5903018 	ldr	r3, [r0, #24]
{
 1003cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (i = 0; i < table->capacity; i++) {
 1003cdc:	e3a06000 	mov	r6, #0
 1003ce0:	e1a04000 	mov	r4, r0
        table->buckets[i] = NULL;
 1003ce4:	e1a08006 	mov	r8, r6
        TableEntry *entry = table->buckets[i];
 1003ce8:	e1a07106 	lsl	r7, r6, #2
 1003cec:	e7930106 	ldr	r0, [r3, r6, lsl #2]
 1003cf0:	e0832007 	add	r2, r3, r7
        while (entry) {
 1003cf4:	e3500000 	cmp	r0, #0
 1003cf8:	0a00000a 	beq	1003d28 <hashtable_remove_all+0x60>
            TableEntry *next = entry->next;
 1003cfc:	e590500c 	ldr	r5, [r0, #12]
            table->mem_free(entry);
 1003d00:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
 1003d04:	e12fff33 	blx	r3
            table->size--;
 1003d08:	e5943004 	ldr	r3, [r4, #4]
        while (entry) {
 1003d0c:	e2550000 	subs	r0, r5, #0
            table->size--;
 1003d10:	e2433001 	sub	r3, r3, #1
 1003d14:	e5843004 	str	r3, [r4, #4]
        while (entry) {
 1003d18:	1afffff7 	bne	1003cfc <hashtable_remove_all+0x34>
 1003d1c:	e5943018 	ldr	r3, [r4, #24]
 1003d20:	e5941000 	ldr	r1, [r4]
 1003d24:	e0832007 	add	r2, r3, r7
    for (i = 0; i < table->capacity; i++) {
 1003d28:	e2866001 	add	r6, r6, #1
        table->buckets[i] = NULL;
 1003d2c:	e5828000 	str	r8, [r2]
    for (i = 0; i < table->capacity; i++) {
 1003d30:	e1560001 	cmp	r6, r1
 1003d34:	3affffeb 	bcc	1003ce8 <hashtable_remove_all+0x20>
 1003d38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003d3c <hashtable_size>:
}
 1003d3c:	e5900004 	ldr	r0, [r0, #4]
 1003d40:	e12fff1e 	bx	lr

01003d44 <hashtable_capacity>:
}
 1003d44:	e5900000 	ldr	r0, [r0]
 1003d48:	e12fff1e 	bx	lr

01003d4c <hashtable_contains_key>:
{
 1003d4c:	e92d4070 	push	{r4, r5, r6, lr}
 1003d50:	e1a05000 	mov	r5, r0
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003d54:	e590301c 	ldr	r3, [r0, #28]
{
 1003d58:	e1a06001 	mov	r6, r1
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003d5c:	e1a00001 	mov	r0, r1
 1003d60:	e595200c 	ldr	r2, [r5, #12]
 1003d64:	e5951010 	ldr	r1, [r5, #16]
    TableEntry *entry = table->buckets[get_table_index(table, key)];
 1003d68:	e5954018 	ldr	r4, [r5, #24]
    size_t hash = table->hash(key, table->key_len, table->hash_seed);
 1003d6c:	e12fff33 	blx	r3
    return hash & (table->capacity - 1);
 1003d70:	e5953000 	ldr	r3, [r5]
 1003d74:	e2433001 	sub	r3, r3, #1
 1003d78:	e0000003 	and	r0, r0, r3
    TableEntry *entry = table->buckets[get_table_index(table, key)];
 1003d7c:	e7944100 	ldr	r4, [r4, r0, lsl #2]
    while (entry) {
 1003d80:	e3540000 	cmp	r4, #0
 1003d84:	1a000003 	bne	1003d98 <hashtable_contains_key+0x4c>
 1003d88:	ea00000a 	b	1003db8 <hashtable_contains_key+0x6c>
        entry = entry->next;
 1003d8c:	e594400c 	ldr	r4, [r4, #12]
    while (entry) {
 1003d90:	e3540000 	cmp	r4, #0
 1003d94:	0a000007 	beq	1003db8 <hashtable_contains_key+0x6c>
        if (table->key_cmp(key, entry->key) == 0)
 1003d98:	e5953020 	ldr	r3, [r5, #32]
 1003d9c:	e1a00006 	mov	r0, r6
 1003da0:	e5941000 	ldr	r1, [r4]
 1003da4:	e12fff33 	blx	r3
 1003da8:	e3500000 	cmp	r0, #0
 1003dac:	1afffff6 	bne	1003d8c <hashtable_contains_key+0x40>
            return true;
 1003db0:	e3a00001 	mov	r0, #1
}
 1003db4:	e8bd8070 	pop	{r4, r5, r6, pc}
    return false;
 1003db8:	e3a00000 	mov	r0, #0
 1003dbc:	e8bd8070 	pop	{r4, r5, r6, pc}

01003dc0 <hashtable_get_values>:
{
 1003dc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003dc4:	e24dd018 	sub	sp, sp, #24
 1003dc8:	e1a05000 	mov	r5, r0
    array_conf_init(&ac);
 1003dcc:	e28d0004 	add	r0, sp, #4
{
 1003dd0:	e1a08001 	mov	r8, r1
    array_conf_init(&ac);
 1003dd4:	ebfff241 	bl	10006e0 <array_conf_init>
    ac.capacity   = table->size;
 1003dd8:	e5953004 	ldr	r3, [r5, #4]
    enum cc_stat stat = array_new_conf(&ac, &values);
 1003ddc:	e28d0004 	add	r0, sp, #4
    ac.mem_alloc  = table->mem_alloc;
 1003de0:	e595c028 	ldr	ip, [r5, #40]	; 0x28
    enum cc_stat stat = array_new_conf(&ac, &values);
 1003de4:	e1a0100d 	mov	r1, sp
    ac.mem_alloc  = table->mem_alloc;
 1003de8:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    ac.capacity   = table->size;
 1003dec:	e58d3004 	str	r3, [sp, #4]
    ac.mem_alloc  = table->mem_alloc;
 1003df0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
 1003df4:	e58dc010 	str	ip, [sp, #16]
 1003df8:	e58d2014 	str	r2, [sp, #20]
 1003dfc:	e58d300c 	str	r3, [sp, #12]
    enum cc_stat stat = array_new_conf(&ac, &values);
 1003e00:	ebfff200 	bl	1000608 <array_new_conf>
    if (stat != CC_OK)
 1003e04:	e2507000 	subs	r7, r0, #0
 1003e08:	1a000013 	bne	1003e5c <hashtable_get_values+0x9c>
    for (i = 0; i <table->capacity; i++) {
 1003e0c:	e5953000 	ldr	r3, [r5]
 1003e10:	e3530000 	cmp	r3, #0
 1003e14:	11a06007 	movne	r6, r7
 1003e18:	0a000016 	beq	1003e78 <hashtable_get_values+0xb8>
        TableEntry *entry = table->buckets[i];
 1003e1c:	e5952018 	ldr	r2, [r5, #24]
 1003e20:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003e24:	e3540000 	cmp	r4, #0
 1003e28:	1a000003 	bne	1003e3c <hashtable_get_values+0x7c>
 1003e2c:	ea00000e 	b	1003e6c <hashtable_get_values+0xac>
                entry = entry->next;
 1003e30:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003e34:	e3540000 	cmp	r4, #0
 1003e38:	0a00000a 	beq	1003e68 <hashtable_get_values+0xa8>
            if ((stat = array_add(values, entry->value)) == CC_OK) {
 1003e3c:	e5941004 	ldr	r1, [r4, #4]
 1003e40:	e59d0000 	ldr	r0, [sp]
 1003e44:	ebfff251 	bl	1000790 <array_add>
 1003e48:	e2503000 	subs	r3, r0, #0
 1003e4c:	0afffff7 	beq	1003e30 <hashtable_get_values+0x70>
                array_destroy(values);
 1003e50:	e59d0000 	ldr	r0, [sp]
            if ((stat = array_add(values, entry->value)) == CC_OK) {
 1003e54:	e1a07003 	mov	r7, r3
                array_destroy(values);
 1003e58:	ebfff22e 	bl	1000718 <array_destroy>
}
 1003e5c:	e1a00007 	mov	r0, r7
 1003e60:	e28dd018 	add	sp, sp, #24
 1003e64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1003e68:	e5953000 	ldr	r3, [r5]
    for (i = 0; i <table->capacity; i++) {
 1003e6c:	e2866001 	add	r6, r6, #1
 1003e70:	e1560003 	cmp	r6, r3
 1003e74:	3affffe8 	bcc	1003e1c <hashtable_get_values+0x5c>
    *out = values;
 1003e78:	e59d3000 	ldr	r3, [sp]
 1003e7c:	e5883000 	str	r3, [r8]
    return CC_OK;
 1003e80:	eafffff5 	b	1003e5c <hashtable_get_values+0x9c>

01003e84 <hashtable_get_keys>:
{
 1003e84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003e88:	e24dd018 	sub	sp, sp, #24
 1003e8c:	e1a05000 	mov	r5, r0
    array_conf_init(&vc);
 1003e90:	e28d0004 	add	r0, sp, #4
{
 1003e94:	e1a08001 	mov	r8, r1
    array_conf_init(&vc);
 1003e98:	ebfff210 	bl	10006e0 <array_conf_init>
    vc.capacity   = table->size;
 1003e9c:	e5953004 	ldr	r3, [r5, #4]
    enum cc_stat stat = array_new_conf(&vc, &keys);
 1003ea0:	e28d0004 	add	r0, sp, #4
    vc.mem_alloc  = table->mem_alloc;
 1003ea4:	e595c028 	ldr	ip, [r5, #40]	; 0x28
    enum cc_stat stat = array_new_conf(&vc, &keys);
 1003ea8:	e1a0100d 	mov	r1, sp
    vc.mem_alloc  = table->mem_alloc;
 1003eac:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    vc.capacity   = table->size;
 1003eb0:	e58d3004 	str	r3, [sp, #4]
    vc.mem_alloc  = table->mem_alloc;
 1003eb4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
 1003eb8:	e58dc010 	str	ip, [sp, #16]
 1003ebc:	e58d2014 	str	r2, [sp, #20]
 1003ec0:	e58d300c 	str	r3, [sp, #12]
    enum cc_stat stat = array_new_conf(&vc, &keys);
 1003ec4:	ebfff1cf 	bl	1000608 <array_new_conf>
    if (stat != CC_OK)
 1003ec8:	e2507000 	subs	r7, r0, #0
 1003ecc:	1a000013 	bne	1003f20 <hashtable_get_keys+0x9c>
    for (i = 0; i < table->capacity; i++) {
 1003ed0:	e5953000 	ldr	r3, [r5]
 1003ed4:	e3530000 	cmp	r3, #0
 1003ed8:	11a06007 	movne	r6, r7
 1003edc:	0a000016 	beq	1003f3c <hashtable_get_keys+0xb8>
        TableEntry *entry = table->buckets[i];
 1003ee0:	e5952018 	ldr	r2, [r5, #24]
 1003ee4:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003ee8:	e3540000 	cmp	r4, #0
 1003eec:	1a000003 	bne	1003f00 <hashtable_get_keys+0x7c>
 1003ef0:	ea00000e 	b	1003f30 <hashtable_get_keys+0xac>
                entry = entry->next;
 1003ef4:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003ef8:	e3540000 	cmp	r4, #0
 1003efc:	0a00000a 	beq	1003f2c <hashtable_get_keys+0xa8>
            if ((stat = array_add(keys, entry->key)) == CC_OK) {
 1003f00:	e5941000 	ldr	r1, [r4]
 1003f04:	e59d0000 	ldr	r0, [sp]
 1003f08:	ebfff220 	bl	1000790 <array_add>
 1003f0c:	e2503000 	subs	r3, r0, #0
 1003f10:	0afffff7 	beq	1003ef4 <hashtable_get_keys+0x70>
                array_destroy(keys);
 1003f14:	e59d0000 	ldr	r0, [sp]
            if ((stat = array_add(keys, entry->key)) == CC_OK) {
 1003f18:	e1a07003 	mov	r7, r3
                array_destroy(keys);
 1003f1c:	ebfff1fd 	bl	1000718 <array_destroy>
}
 1003f20:	e1a00007 	mov	r0, r7
 1003f24:	e28dd018 	add	sp, sp, #24
 1003f28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1003f2c:	e5953000 	ldr	r3, [r5]
    for (i = 0; i < table->capacity; i++) {
 1003f30:	e2866001 	add	r6, r6, #1
 1003f34:	e1560003 	cmp	r6, r3
 1003f38:	3affffe8 	bcc	1003ee0 <hashtable_get_keys+0x5c>
    *out = keys;
 1003f3c:	e59d3000 	ldr	r3, [sp]
 1003f40:	e5883000 	str	r3, [r8]
    return CC_OK;
 1003f44:	eafffff5 	b	1003f20 <hashtable_get_keys+0x9c>

01003f48 <hashtable_foreach_key>:
    for (i = 0; i <table->capacity; i++) {
 1003f48:	e5903000 	ldr	r3, [r0]
 1003f4c:	e3530000 	cmp	r3, #0
 1003f50:	012fff1e 	bxeq	lr
{
 1003f54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003f58:	e1a05001 	mov	r5, r1
 1003f5c:	e1a07000 	mov	r7, r0
    for (i = 0; i <table->capacity; i++) {
 1003f60:	e3a06000 	mov	r6, #0
        TableEntry *entry = table->buckets[i];
 1003f64:	e5972018 	ldr	r2, [r7, #24]
 1003f68:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003f6c:	e3540000 	cmp	r4, #0
 1003f70:	0a000005 	beq	1003f8c <hashtable_foreach_key+0x44>
            fn(entry->key);
 1003f74:	e5940000 	ldr	r0, [r4]
 1003f78:	e12fff35 	blx	r5
            entry = entry->next;
 1003f7c:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003f80:	e3540000 	cmp	r4, #0
 1003f84:	1afffffa 	bne	1003f74 <hashtable_foreach_key+0x2c>
 1003f88:	e5973000 	ldr	r3, [r7]
    for (i = 0; i <table->capacity; i++) {
 1003f8c:	e2866001 	add	r6, r6, #1
 1003f90:	e1560003 	cmp	r6, r3
 1003f94:	3afffff2 	bcc	1003f64 <hashtable_foreach_key+0x1c>
 1003f98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003f9c <hashtable_foreach_value>:
    for (i = 0; i <table->capacity; i++) {
 1003f9c:	e5903000 	ldr	r3, [r0]
 1003fa0:	e3530000 	cmp	r3, #0
 1003fa4:	012fff1e 	bxeq	lr
{
 1003fa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1003fac:	e1a05001 	mov	r5, r1
 1003fb0:	e1a07000 	mov	r7, r0
    for (i = 0; i <table->capacity; i++) {
 1003fb4:	e3a06000 	mov	r6, #0
        TableEntry *entry = table->buckets[i];
 1003fb8:	e5972018 	ldr	r2, [r7, #24]
 1003fbc:	e7924106 	ldr	r4, [r2, r6, lsl #2]
        while (entry) {
 1003fc0:	e3540000 	cmp	r4, #0
 1003fc4:	0a000005 	beq	1003fe0 <hashtable_foreach_value+0x44>
            fn(entry->value);
 1003fc8:	e5940004 	ldr	r0, [r4, #4]
 1003fcc:	e12fff35 	blx	r5
            entry = entry->next;
 1003fd0:	e594400c 	ldr	r4, [r4, #12]
        while (entry) {
 1003fd4:	e3540000 	cmp	r4, #0
 1003fd8:	1afffffa 	bne	1003fc8 <hashtable_foreach_value+0x2c>
 1003fdc:	e5973000 	ldr	r3, [r7]
    for (i = 0; i <table->capacity; i++) {
 1003fe0:	e2866001 	add	r6, r6, #1
 1003fe4:	e1560003 	cmp	r6, r3
 1003fe8:	3afffff2 	bcc	1003fb8 <hashtable_foreach_value+0x1c>
 1003fec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01003ff0 <hashtable_iter_init>:
    memset(iter, 0, sizeof(HashTableIter));
 1003ff0:	e3a03000 	mov	r3, #0
 1003ff4:	e5803004 	str	r3, [r0, #4]
 1003ff8:	e5803008 	str	r3, [r0, #8]
 1003ffc:	e580300c 	str	r3, [r0, #12]
    for (i = 0; i < table->capacity; i++) {
 1004000:	e591c000 	ldr	ip, [r1]
    iter->table = table;
 1004004:	e5801000 	str	r1, [r0]
    for (i = 0; i < table->capacity; i++) {
 1004008:	e15c0003 	cmp	ip, r3
 100400c:	012fff1e 	bxeq	lr
        TableEntry *e = table->buckets[i];
 1004010:	e5912018 	ldr	r2, [r1, #24]
 1004014:	e5921000 	ldr	r1, [r2]
        if (e) {
 1004018:	e1510003 	cmp	r1, r3
    for (i = 0; i < table->capacity; i++) {
 100401c:	01a03001 	moveq	r3, r1
        if (e) {
 1004020:	1a000005 	bne	100403c <hashtable_iter_init+0x4c>
    for (i = 0; i < table->capacity; i++) {
 1004024:	e2833001 	add	r3, r3, #1
 1004028:	e153000c 	cmp	r3, ip
 100402c:	012fff1e 	bxeq	lr
        TableEntry *e = table->buckets[i];
 1004030:	e5b21004 	ldr	r1, [r2, #4]!
        if (e) {
 1004034:	e3510000 	cmp	r1, #0
 1004038:	0afffff9 	beq	1004024 <hashtable_iter_init+0x34>
            iter->prev_entry   = NULL;
 100403c:	e3a02000 	mov	r2, #0
            iter->bucket_index = i;
 1004040:	e5803004 	str	r3, [r0, #4]
            iter->next_entry   = e;
 1004044:	e580100c 	str	r1, [r0, #12]
            iter->prev_entry   = NULL;
 1004048:	e5802008 	str	r2, [r0, #8]
            break;
 100404c:	e12fff1e 	bx	lr

01004050 <hashtable_iter_next>:
    if (!iter->next_entry)
 1004050:	e590c00c 	ldr	ip, [r0, #12]
 1004054:	e35c0000 	cmp	ip, #0
 1004058:	0a00001f 	beq	10040dc <hashtable_iter_next+0x8c>
    iter->next_entry = iter->next_entry->next;
 100405c:	e59c300c 	ldr	r3, [ip, #12]
    iter->prev_entry = iter->next_entry;
 1004060:	e580c008 	str	ip, [r0, #8]
    if (iter->next_entry) {
 1004064:	e3530000 	cmp	r3, #0
    iter->next_entry = iter->next_entry->next;
 1004068:	e580300c 	str	r3, [r0, #12]
    if (iter->next_entry) {
 100406c:	0a000002 	beq	100407c <hashtable_iter_next+0x2c>
        *te = iter->prev_entry;
 1004070:	e581c000 	str	ip, [r1]
        return CC_OK;
 1004074:	e3a00000 	mov	r0, #0
 1004078:	e12fff1e 	bx	lr
    for (i = iter->bucket_index + 1; i < iter->table->capacity; i++) {
 100407c:	e1c020d0 	ldrd	r2, [r0]
{
 1004080:	e92d4010 	push	{r4, lr}
    for (i = iter->bucket_index + 1; i < iter->table->capacity; i++) {
 1004084:	e2833001 	add	r3, r3, #1
 1004088:	e592e000 	ldr	lr, [r2]
 100408c:	e153000e 	cmp	r3, lr
 1004090:	2a00000c 	bcs	10040c8 <hashtable_iter_next+0x78>
        iter->next_entry = iter->table->buckets[i];
 1004094:	e5924018 	ldr	r4, [r2, #24]
 1004098:	e7942103 	ldr	r2, [r4, r3, lsl #2]
        if (iter->next_entry) {
 100409c:	e3520000 	cmp	r2, #0
        iter->next_entry = iter->table->buckets[i];
 10040a0:	e580200c 	str	r2, [r0, #12]
        if (iter->next_entry) {
 10040a4:	0a000004 	beq	10040bc <hashtable_iter_next+0x6c>
 10040a8:	ea000009 	b	10040d4 <hashtable_iter_next+0x84>
        iter->next_entry = iter->table->buckets[i];
 10040ac:	e7942103 	ldr	r2, [r4, r3, lsl #2]
        if (iter->next_entry) {
 10040b0:	e3520000 	cmp	r2, #0
        iter->next_entry = iter->table->buckets[i];
 10040b4:	e580200c 	str	r2, [r0, #12]
        if (iter->next_entry) {
 10040b8:	1a000005 	bne	10040d4 <hashtable_iter_next+0x84>
    for (i = iter->bucket_index + 1; i < iter->table->capacity; i++) {
 10040bc:	e2833001 	add	r3, r3, #1
 10040c0:	e153000e 	cmp	r3, lr
 10040c4:	3afffff8 	bcc	10040ac <hashtable_iter_next+0x5c>
    *te = iter->prev_entry;
 10040c8:	e581c000 	str	ip, [r1]
    return CC_OK;
 10040cc:	e3a00000 	mov	r0, #0
}
 10040d0:	e8bd8010 	pop	{r4, pc}
            iter->bucket_index = i;
 10040d4:	e5803004 	str	r3, [r0, #4]
            break;
 10040d8:	eafffffa 	b	10040c8 <hashtable_iter_next+0x78>
        return CC_ITER_END;
 10040dc:	e3a00009 	mov	r0, #9
}
 10040e0:	e12fff1e 	bx	lr

010040e4 <hashtable_iter_remove>:
    return hashtable_remove(iter->table, iter->prev_entry->key, out);
 10040e4:	e5903008 	ldr	r3, [r0, #8]
 10040e8:	e1a02001 	mov	r2, r1
 10040ec:	e5900000 	ldr	r0, [r0]
 10040f0:	e5931000 	ldr	r1, [r3]
 10040f4:	eafffe96 	b	1003b54 <hashtable_remove>

010040f8 <hashtable_hash>:
 * MurmurHash3 the 32bit variant.
 */
size_t hashtable_hash(const void *key, int len, uint32_t seed)
{
    const uint8_t *data    = (const uint8_t*)key;
    const int      nblocks = len / 4;
 10040f8:	e3510000 	cmp	r1, #0
 10040fc:	e281c003 	add	ip, r1, #3
 1004100:	a1a0c001 	movge	ip, r1
{
 1004104:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int      nblocks = len / 4;
 1004108:	e1a0c14c 	asr	ip, ip, #2
{
 100410c:	e24dd00c 	sub	sp, sp, #12
    uint32_t h1 = seed;

    const uint32_t c1 = 0xcc9e2d51;
    const uint32_t c2 = 0x1b873593;

    const uint32_t *blocks = (const uint32_t *)(data + nblocks*4);
 1004110:	e1a0810c 	lsl	r8, ip, #2

    int i;
    for (i = -nblocks; i; i++) {
 1004114:	e35c0000 	cmp	ip, #0
    const uint32_t *blocks = (const uint32_t *)(data + nblocks*4);
 1004118:	e0809008 	add	r9, r0, r8
    for (i = -nblocks; i; i++) {
 100411c:	0a000069 	beq	10042c8 <hashtable_hash+0x1d0>
 1004120:	e3510023 	cmp	r1, #35	; 0x23
 1004124:	e26c7000 	rsb	r7, ip, #0
 1004128:	da000051 	ble	1004274 <hashtable_hash+0x17c>
 100412c:	e24c3009 	sub	r3, ip, #9
 1004130:	e26ce008 	rsb	lr, ip, #8
 1004134:	e3c33007 	bic	r3, r3, #7
        uint32_t k1 = blocks[i];

        k1 *= c1;
 1004138:	e3026d51 	movw	r6, #11601	; 0x2d51
        k1 = ROTL32(k1,15);
        k1 *= c2;
 100413c:	e3035593 	movw	r5, #13715	; 0x3593

        h1 ^= k1;
        h1 = ROTL32(h1,13);
        h1 = h1*5+0xe6546b64;
 1004140:	e3064b64 	movw	r4, #27492	; 0x6b64
 1004144:	e083300e 	add	r3, r3, lr
        k1 *= c1;
 1004148:	e34c6c9e 	movt	r6, #52382	; 0xcc9e
        k1 *= c2;
 100414c:	e3415b87 	movt	r5, #7047	; 0x1b87
        h1 = h1*5+0xe6546b64;
 1004150:	e34e4654 	movt	r4, #58964	; 0xe654
 1004154:	e280e03c 	add	lr, r0, #60	; 0x3c
 1004158:	e58d3004 	str	r3, [sp, #4]
        uint32_t k1 = blocks[i];
 100415c:	e51ea03c 	ldr	sl, [lr, #-60]	; 0xffffffc4
    return (x << r) | (x >> (32 - r));
 1004160:	e2877008 	add	r7, r7, #8
        uint32_t k1 = blocks[i];
 1004164:	e51e3038 	ldr	r3, [lr, #-56]	; 0xffffffc8
 1004168:	e59db004 	ldr	fp, [sp, #4]
 100416c:	f5def000 	pld	[lr]
 1004170:	e28ee020 	add	lr, lr, #32
        k1 *= c1;
 1004174:	e00a0a96 	mul	sl, r6, sl
 1004178:	e157000b 	cmp	r7, fp
        uint32_t k1 = blocks[i];
 100417c:	e51eb054 	ldr	fp, [lr, #-84]	; 0xffffffac
        k1 *= c1;
 1004180:	e0030396 	mul	r3, r6, r3
    return (x << r) | (x >> (32 - r));
 1004184:	e1a0a8ea 	ror	sl, sl, #17
        k1 *= c1;
 1004188:	e00b0b96 	mul	fp, r6, fp
    return (x << r) | (x >> (32 - r));
 100418c:	e1a038e3 	ror	r3, r3, #17
        k1 *= c2;
 1004190:	e00a0a95 	mul	sl, r5, sl
 1004194:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 1004198:	e1a0b8eb 	ror	fp, fp, #17
        h1 ^= k1;
 100419c:	e022200a 	eor	r2, r2, sl
        uint32_t k1 = blocks[i];
 10041a0:	e51ea050 	ldr	sl, [lr, #-80]	; 0xffffffb0
    return (x << r) | (x >> (32 - r));
 10041a4:	e1a029e2 	ror	r2, r2, #19
        k1 *= c2;
 10041a8:	e00b0b95 	mul	fp, r5, fp
        h1 = h1*5+0xe6546b64;
 10041ac:	e0822102 	add	r2, r2, r2, lsl #2
 10041b0:	e0822004 	add	r2, r2, r4
        h1 ^= k1;
 10041b4:	e0233002 	eor	r3, r3, r2
        k1 *= c1;
 10041b8:	e0020a96 	mul	r2, r6, sl
    return (x << r) | (x >> (32 - r));
 10041bc:	e1a0a9e3 	ror	sl, r3, #19
        uint32_t k1 = blocks[i];
 10041c0:	e51e304c 	ldr	r3, [lr, #-76]	; 0xffffffb4
        h1 = h1*5+0xe6546b64;
 10041c4:	e08aa10a 	add	sl, sl, sl, lsl #2
    return (x << r) | (x >> (32 - r));
 10041c8:	e1a028e2 	ror	r2, r2, #17
        h1 = h1*5+0xe6546b64;
 10041cc:	e08aa004 	add	sl, sl, r4
        k1 *= c1;
 10041d0:	e0030396 	mul	r3, r6, r3
        h1 ^= k1;
 10041d4:	e02bb00a 	eor	fp, fp, sl
        uint32_t k1 = blocks[i];
 10041d8:	e51ea048 	ldr	sl, [lr, #-72]	; 0xffffffb8
    return (x << r) | (x >> (32 - r));
 10041dc:	e1a0b9eb 	ror	fp, fp, #19
        k1 *= c2;
 10041e0:	e0020295 	mul	r2, r5, r2
        h1 = h1*5+0xe6546b64;
 10041e4:	e08bb10b 	add	fp, fp, fp, lsl #2
    return (x << r) | (x >> (32 - r));
 10041e8:	e1a038e3 	ror	r3, r3, #17
        k1 *= c1;
 10041ec:	e00a0a96 	mul	sl, r6, sl
        h1 = h1*5+0xe6546b64;
 10041f0:	e08bb004 	add	fp, fp, r4
        h1 ^= k1;
 10041f4:	e022200b 	eor	r2, r2, fp
        k1 *= c2;
 10041f8:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 10041fc:	e1a029e2 	ror	r2, r2, #19
 1004200:	e1a0a8ea 	ror	sl, sl, #17
        h1 = h1*5+0xe6546b64;
 1004204:	e0822102 	add	r2, r2, r2, lsl #2
        k1 *= c2;
 1004208:	e00a0a95 	mul	sl, r5, sl
        h1 = h1*5+0xe6546b64;
 100420c:	e082b004 	add	fp, r2, r4
        h1 ^= k1;
 1004210:	e02bb003 	eor	fp, fp, r3
        k1 *= c1;
 1004214:	e51e3044 	ldr	r3, [lr, #-68]	; 0xffffffbc
    return (x << r) | (x >> (32 - r));
 1004218:	e1a0b9eb 	ror	fp, fp, #19
        h1 = h1*5+0xe6546b64;
 100421c:	e08bb10b 	add	fp, fp, fp, lsl #2
        k1 *= c1;
 1004220:	e0020396 	mul	r2, r6, r3
        uint32_t k1 = blocks[i];
 1004224:	e51e3040 	ldr	r3, [lr, #-64]	; 0xffffffc0
        h1 = h1*5+0xe6546b64;
 1004228:	e08bb004 	add	fp, fp, r4
        h1 ^= k1;
 100422c:	e02aa00b 	eor	sl, sl, fp
    return (x << r) | (x >> (32 - r));
 1004230:	e1a0a9ea 	ror	sl, sl, #19
 1004234:	e1a028e2 	ror	r2, r2, #17
        k1 *= c1;
 1004238:	e0030396 	mul	r3, r6, r3
        h1 = h1*5+0xe6546b64;
 100423c:	e08aa10a 	add	sl, sl, sl, lsl #2
        k1 *= c2;
 1004240:	e0020295 	mul	r2, r5, r2
        h1 = h1*5+0xe6546b64;
 1004244:	e08aa004 	add	sl, sl, r4
    return (x << r) | (x >> (32 - r));
 1004248:	e1a038e3 	ror	r3, r3, #17
        h1 ^= k1;
 100424c:	e022200a 	eor	r2, r2, sl
        k1 *= c2;
 1004250:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 1004254:	e1a029e2 	ror	r2, r2, #19
        h1 = h1*5+0xe6546b64;
 1004258:	e0822102 	add	r2, r2, r2, lsl #2
 100425c:	e0822004 	add	r2, r2, r4
        h1 ^= k1;
 1004260:	e0233002 	eor	r3, r3, r2
    return (x << r) | (x >> (32 - r));
 1004264:	e1a039e3 	ror	r3, r3, #19
        h1 = h1*5+0xe6546b64;
 1004268:	e0833103 	add	r3, r3, r3, lsl #2
 100426c:	e0832004 	add	r2, r3, r4
 1004270:	1affffb9 	bne	100415c <hashtable_hash+0x64>
 1004274:	e248e004 	sub	lr, r8, #4
 1004278:	e2403004 	sub	r3, r0, #4
 100427c:	e08e7107 	add	r7, lr, r7, lsl #2
        k1 *= c1;
 1004280:	e3025d51 	movw	r5, #11601	; 0x2d51
        k1 *= c2;
 1004284:	e3034593 	movw	r4, #13715	; 0x3593
        h1 = h1*5+0xe6546b64;
 1004288:	e306eb64 	movw	lr, #27492	; 0x6b64
 100428c:	e0807007 	add	r7, r0, r7
 1004290:	e0838008 	add	r8, r3, r8
        k1 *= c1;
 1004294:	e34c5c9e 	movt	r5, #52382	; 0xcc9e
        k1 *= c2;
 1004298:	e3414b87 	movt	r4, #7047	; 0x1b87
        h1 = h1*5+0xe6546b64;
 100429c:	e34ee654 	movt	lr, #58964	; 0xe654
        uint32_t k1 = blocks[i];
 10042a0:	e5b73004 	ldr	r3, [r7, #4]!
    for (i = -nblocks; i; i++) {
 10042a4:	e1570008 	cmp	r7, r8
        k1 *= c1;
 10042a8:	e0030395 	mul	r3, r5, r3
    return (x << r) | (x >> (32 - r));
 10042ac:	e1a038e3 	ror	r3, r3, #17
        k1 *= c2;
 10042b0:	e0030394 	mul	r3, r4, r3
        h1 ^= k1;
 10042b4:	e0233002 	eor	r3, r3, r2
    return (x << r) | (x >> (32 - r));
 10042b8:	e1a039e3 	ror	r3, r3, #19
        h1 = h1*5+0xe6546b64;
 10042bc:	e0833103 	add	r3, r3, r3, lsl #2
 10042c0:	e083200e 	add	r2, r3, lr
    for (i = -nblocks; i; i++) {
 10042c4:	1afffff5 	bne	10042a0 <hashtable_hash+0x1a8>

    const uint8_t * tail = (const uint8_t*)(data + nblocks*4);

    uint32_t k1 = 0;

    switch(len & 3) {
 10042c8:	e2013003 	and	r3, r1, #3
 10042cc:	e3530002 	cmp	r3, #2
 10042d0:	0a000020 	beq	1004358 <hashtable_hash+0x260>
 10042d4:	e3530003 	cmp	r3, #3
 10042d8:	0a000019 	beq	1004344 <hashtable_hash+0x24c>
 10042dc:	e3530001 	cmp	r3, #1
 10042e0:	0a00000b 	beq	1004314 <hashtable_hash+0x21c>
            k1  = ROTL32(k1,15);
            k1 *= c2;
            h1 ^= k1;
    };

    h1 ^= len;
 10042e4:	e0222001 	eor	r2, r2, r1
    h *= 0x85ebca6b;
 10042e8:	e30c1a6b 	movw	r1, #51819	; 0xca6b
    h ^= h >> 16;
 10042ec:	e0222822 	eor	r2, r2, r2, lsr #16
    h *= 0x85ebca6b;
 10042f0:	e34815eb 	movt	r1, #34283	; 0x85eb
    h *= 0xc2b2ae35;
 10042f4:	e30a0e35 	movw	r0, #44597	; 0xae35
    h *= 0x85ebca6b;
 10042f8:	e0020291 	mul	r2, r1, r2
    h *= 0xc2b2ae35;
 10042fc:	e34c02b2 	movt	r0, #49842	; 0xc2b2
    h ^= h >> 13;
 1004300:	e02226a2 	eor	r2, r2, r2, lsr #13
    h *= 0xc2b2ae35;
 1004304:	e0000290 	mul	r0, r0, r2
    h1  = fmix32(h1);

    return (size_t) h1;
}
 1004308:	e0200820 	eor	r0, r0, r0, lsr #16
 100430c:	e28dd00c 	add	sp, sp, #12
 1004310:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t k1 = 0;
 1004314:	e3a0e000 	mov	lr, #0
    case 1: k1 ^= tail[0];
 1004318:	e7d0c10c 	ldrb	ip, [r0, ip, lsl #2]
            k1 *= c1;
 100431c:	e3023d51 	movw	r3, #11601	; 0x2d51
 1004320:	e34c3c9e 	movt	r3, #52382	; 0xcc9e
            k1 *= c2;
 1004324:	e3030593 	movw	r0, #13715	; 0x3593
 1004328:	e3410b87 	movt	r0, #7047	; 0x1b87
    case 1: k1 ^= tail[0];
 100432c:	e02ee00c 	eor	lr, lr, ip
            k1 *= c1;
 1004330:	e0030e93 	mul	r3, r3, lr
    return (x << r) | (x >> (32 - r));
 1004334:	e1a038e3 	ror	r3, r3, #17
            k1 *= c2;
 1004338:	e0030390 	mul	r3, r0, r3
            h1 ^= k1;
 100433c:	e0222003 	eor	r2, r2, r3
 1004340:	eaffffe7 	b	10042e4 <hashtable_hash+0x1ec>
    case 3: k1 ^= tail[2] << 16;
 1004344:	e5d9e002 	ldrb	lr, [r9, #2]
 1004348:	e1a0e80e 	lsl	lr, lr, #16
    case 2: k1 ^= tail[1] << 8;
 100434c:	e5d93001 	ldrb	r3, [r9, #1]
 1004350:	e18ee403 	orr	lr, lr, r3, lsl #8
 1004354:	eaffffef 	b	1004318 <hashtable_hash+0x220>
    uint32_t k1 = 0;
 1004358:	e3a0e000 	mov	lr, #0
 100435c:	eafffffa 	b	100434c <hashtable_hash+0x254>

01004360 <hashtable_hash_ptr>:
    const uint32_t c1 = 0xcc9e2d51;
    const uint32_t c2 = 0x1b873593;

    uint32_t k1 = (uint32_t) (uintptr_t) key;

    k1 *= c1;
 1004360:	e302cd51 	movw	ip, #11601	; 0x2d51
{
 1004364:	e92d4010 	push	{r4, lr}
    k1 *= c1;
 1004368:	e34ccc9e 	movt	ip, #52382	; 0xcc9e
    k1 = ROTL32(k1,15);
    k1 *= c2;
 100436c:	e3033593 	movw	r3, #13715	; 0x3593
    k1 *= c1;
 1004370:	e000009c 	mul	r0, ip, r0
    k1 *= c2;
 1004374:	e3413b87 	movt	r3, #7047	; 0x1b87

    h1 ^= k1;
    h1 = ROTL32(h1,13);
    h1 = h1*5+0xe6546b64;
 1004378:	e306cb64 	movw	ip, #27492	; 0x6b64
    h *= 0x85ebca6b;
 100437c:	e30cea6b 	movw	lr, #51819	; 0xca6b
    h1 = h1*5+0xe6546b64;
 1004380:	e34ec654 	movt	ip, #58964	; 0xe654
    h *= 0x85ebca6b;
 1004384:	e348e5eb 	movt	lr, #34283	; 0x85eb
    return (x << r) | (x >> (32 - r));
 1004388:	e1a048e0 	ror	r4, r0, #17
    h *= 0xc2b2ae35;
 100438c:	e30a0e35 	movw	r0, #44597	; 0xae35
 1004390:	e34c02b2 	movt	r0, #49842	; 0xc2b2
    k1 *= c2;
 1004394:	e0030493 	mul	r3, r3, r4
    h1 ^= k1;
 1004398:	e0222003 	eor	r2, r2, r3
    return (x << r) | (x >> (32 - r));
 100439c:	e1a029e2 	ror	r2, r2, #19
    h1 = h1*5+0xe6546b64;
 10043a0:	e0822102 	add	r2, r2, r2, lsl #2
 10043a4:	e082c00c 	add	ip, r2, ip

    /* Since the pointers are power of two length
     * we don't need a tail mix */

    h1 ^= len;
 10043a8:	e021100c 	eor	r1, r1, ip
    h ^= h >> 16;
 10043ac:	e0211821 	eor	r1, r1, r1, lsr #16
    h *= 0x85ebca6b;
 10043b0:	e001019e 	mul	r1, lr, r1
    h ^= h >> 13;
 10043b4:	e02116a1 	eor	r1, r1, r1, lsr #13
    h *= 0xc2b2ae35;
 10043b8:	e0000190 	mul	r0, r0, r1
    h1  = fmix32(h1);

    return (size_t) h1;
}
 10043bc:	e0200820 	eor	r0, r0, r0, lsr #16
 10043c0:	e8bd8010 	pop	{r4, pc}

010043c4 <split>:
 *
 * @return
 */
static Node *split(List *list, Node *b, size_t size, int (*cmp) (void const*, void const*))
{
    if (size < 2)
 10043c4:	e3520001 	cmp	r2, #1
{
 10043c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10043cc:	e24dd01c 	sub	sp, sp, #28
        return b;
 10043d0:	958d100c 	strls	r1, [sp, #12]
    if (size < 2)
 10043d4:	9a000055 	bls	1004530 <split+0x16c>

    size_t l_size = size / 2;
 10043d8:	e1a070a2 	lsr	r7, r2, #1
    size_t r_size = size / 2 + (size % 2);
 10043dc:	e2022001 	and	r2, r2, #1

    Node *center = b;
 10043e0:	e1a04001 	mov	r4, r1
    size_t r_size = size / 2 + (size % 2);
 10043e4:	e0828007 	add	r8, r2, r7

    size_t i;
    for (i = 0; i < l_size; i++)
 10043e8:	e3a02000 	mov	r2, #0
 10043ec:	e2822001 	add	r2, r2, #1
        center = center->next;
 10043f0:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < l_size; i++)
 10043f4:	e1570002 	cmp	r7, r2
 10043f8:	1afffffb 	bne	10043ec <split+0x28>

    Node *l_head = split(list, b, l_size, cmp);
 10043fc:	e1a09003 	mov	r9, r3
 1004400:	e1a06000 	mov	r6, r0
 1004404:	e1a02007 	mov	r2, r7
 1004408:	e58d0014 	str	r0, [sp, #20]
 100440c:	ebffffec 	bl	10043c4 <split>
    Node *r_head = split(list, center, r_size, cmp);
 1004410:	e1a03009 	mov	r3, r9
 1004414:	e1a02008 	mov	r2, r8
    Node *l_head = split(list, b, l_size, cmp);
 1004418:	e1a05000 	mov	r5, r0
    Node *r_head = split(list, center, r_size, cmp);
 100441c:	e1a01004 	mov	r1, r4
 1004420:	e1a00006 	mov	r0, r6
 *@param[in]      cmp    the comparator function
 */
static INLINE void merge(Node **left, Node **right, size_t l_size,
                        size_t r_size, int (*cmp) (void const*, void const*))
{
    size_t size = r_size + l_size;
 1004424:	e0876008 	add	r6, r7, r8
    Node *r_head = split(list, center, r_size, cmp);
 1004428:	ebffffe5 	bl	10043c4 <split>
 100442c:	e2462002 	sub	r2, r6, #2
    size_t l    = 0; /* Number of processed elements from the left partition */
    size_t r    = 0; /* NUmber of processed elements from the right partition. */
 1004430:	e3a0a000 	mov	sl, #0
 1004434:	e16f2f12 	clz	r2, r2
 1004438:	e1a03006 	mov	r3, r6
 100443c:	e1a022a2 	lsr	r2, r2, #5
    size_t l    = 0; /* Number of processed elements from the left partition */
 1004440:	e1a0b00a 	mov	fp, sl
 1004444:	e58d7008 	str	r7, [sp, #8]

    Node *l_part = *left;
    Node *r_part = *right;
 1004448:	e1a04000 	mov	r4, r0
 100444c:	e1a07008 	mov	r7, r8
    Node *r_head = split(list, center, r_size, cmp);
 1004450:	e58d0010 	str	r0, [sp, #16]

    size_t i;
    for (i = 0; i < size; i++) {
 1004454:	e1a0800a 	mov	r8, sl
    Node *l_head = split(list, b, l_size, cmp);
 1004458:	e58d500c 	str	r5, [sp, #12]
 100445c:	e1a0a009 	mov	sl, r9
 1004460:	e58d2004 	str	r2, [sp, #4]
    size_t size = r_size + l_size;
 1004464:	e3a06001 	mov	r6, #1
 1004468:	e1a09003 	mov	r9, r3
 100446c:	ea000017 	b	10044d0 <split+0x10c>
                break;
            }
            l_part = l_part->next;
            l++;
        } else {
            Node *tmp = (r_part)->next;
 1004470:	e5941004 	ldr	r1, [r4, #4]
 *                 node
 */
static void link_behind(Node *const base, Node *ins)
{
    /* link the gap */
    if (ins->next != NULL)
 1004474:	e5940008 	ldr	r0, [r4, #8]
 1004478:	e3510000 	cmp	r1, #0
        ins->next->prev = ins->prev;
 100447c:	15810008 	strne	r0, [r1, #8]
 1004480:	15940008 	ldrne	r0, [r4, #8]

    if (ins->prev != NULL)
 1004484:	e3500000 	cmp	r0, #0
        ins->prev->next = ins->next;
 1004488:	15801004 	strne	r1, [r0, #4]

    /* link behind */
    if (base->prev == NULL) {
 100448c:	e5950008 	ldr	r0, [r5, #8]
 1004490:	e3500000 	cmp	r0, #0
        ins->prev       = NULL;
 1004494:	e5840008 	str	r0, [r4, #8]
        ins->next       = base;
        base->prev      = ins;
    } else {
        ins->prev       = base->prev;
        ins->prev->next = ins;
 1004498:	15804004 	strne	r4, [r0, #4]
            if (i == 0 && size == 2) {
 100449c:	e35c0000 	cmp	ip, #0
        ins->next       = base;
 10044a0:	e5845004 	str	r5, [r4, #4]
        base->prev      = ins;
 10044a4:	e5854008 	str	r4, [r5, #8]
            if (i == 0 && size == 2) {
 10044a8:	1a000025 	bne	1004544 <split+0x180>
            r++;
 10044ac:	e28bb001 	add	fp, fp, #1
            if (r == r_size) {
 10044b0:	e157000b 	cmp	r7, fp
 10044b4:	0a000024 	beq	100454c <split+0x188>
            if (i == 0) {
 10044b8:	e3560001 	cmp	r6, #1
 10044bc:	0a00001e 	beq	100453c <split+0x178>
    for (i = 0; i < size; i++) {
 10044c0:	e1590006 	cmp	r9, r6
 10044c4:	9a000014 	bls	100451c <split+0x158>
 10044c8:	e2866001 	add	r6, r6, #1
            if (i == 0) {
 10044cc:	e1a04001 	mov	r4, r1
        int c = cmp(&(l_part->data), &(r_part->data));
 10044d0:	e1a01004 	mov	r1, r4
 10044d4:	e1a00005 	mov	r0, r5
 10044d8:	e12fff3a 	blx	sl
        if ((c < 0 || c == 0)) {
 10044dc:	e59dc004 	ldr	ip, [sp, #4]
 10044e0:	e3560001 	cmp	r6, #1
 10044e4:	13a0c000 	movne	ip, #0
 10044e8:	020cc001 	andeq	ip, ip, #1
 10044ec:	e3500000 	cmp	r0, #0
 10044f0:	caffffde 	bgt	1004470 <split+0xac>
            if (i == 0 && size == 2) {
 10044f4:	e35c0000 	cmp	ip, #0
 10044f8:	1a000007 	bne	100451c <split+0x158>
            if (l == l_size) {
 10044fc:	e59d3008 	ldr	r3, [sp, #8]
 1004500:	e1530008 	cmp	r3, r8
 1004504:	0a00001c 	beq	100457c <split+0x1b8>
    for (i = 0; i < size; i++) {
 1004508:	e1590006 	cmp	r9, r6
            l_part = l_part->next;
 100450c:	e5955004 	ldr	r5, [r5, #4]
            l++;
 1004510:	e2888001 	add	r8, r8, #1
 1004514:	e1a01004 	mov	r1, r4
    for (i = 0; i < size; i++) {
 1004518:	8affffea 	bhi	10044c8 <split+0x104>
    list->head = l_head;
 100451c:	e59d3014 	ldr	r3, [sp, #20]
 1004520:	e59d200c 	ldr	r2, [sp, #12]
 1004524:	e5832004 	str	r2, [r3, #4]
    list->tail = r_head;
 1004528:	e59d2010 	ldr	r2, [sp, #16]
 100452c:	e5832008 	str	r2, [r3, #8]
}
 1004530:	e59d000c 	ldr	r0, [sp, #12]
 1004534:	e28dd01c 	add	sp, sp, #28
 1004538:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (i == 0) {
 100453c:	e58d400c 	str	r4, [sp, #12]
 1004540:	eaffffe0 	b	10044c8 <split+0x104>
            if (i == 0 && size == 2) {
 1004544:	e1cd40fc 	strd	r4, [sp, #12]
 1004548:	eafffff3 	b	100451c <split+0x158>
 100454c:	e59d7008 	ldr	r7, [sp, #8]
 1004550:	e1a0b008 	mov	fp, r8
                for (;l < l_size - 1; l++)
 1004554:	e2477001 	sub	r7, r7, #1
 1004558:	e1570008 	cmp	r7, r8
 100455c:	9a000010 	bls	10045a4 <split+0x1e0>
 1004560:	e1a03005 	mov	r3, r5
 1004564:	e28bb001 	add	fp, fp, #1
                    l_part = l_part->next;
 1004568:	e5933004 	ldr	r3, [r3, #4]
                for (;l < l_size - 1; l++)
 100456c:	e157000b 	cmp	r7, fp
 1004570:	1afffffb 	bne	1004564 <split+0x1a0>
 1004574:	e58d3010 	str	r3, [sp, #16]
 1004578:	eaffffe7 	b	100451c <split+0x158>
                for (;r < r_size - 1; r++)
 100457c:	e2478001 	sub	r8, r7, #1
 1004580:	e1a0a00b 	mov	sl, fp
 1004584:	e158000b 	cmp	r8, fp
 1004588:	9a000007 	bls	10045ac <split+0x1e8>
 100458c:	e1a03004 	mov	r3, r4
 1004590:	e28aa001 	add	sl, sl, #1
                    r_part = r_part->next;
 1004594:	e5933004 	ldr	r3, [r3, #4]
                for (;r < r_size - 1; r++)
 1004598:	e15a0008 	cmp	sl, r8
 100459c:	1afffffb 	bne	1004590 <split+0x1cc>
 10045a0:	eafffff3 	b	1004574 <split+0x1b0>
                for (;l < l_size - 1; l++)
 10045a4:	e58d5010 	str	r5, [sp, #16]
 10045a8:	eaffffdb 	b	100451c <split+0x158>
                for (;r < r_size - 1; r++)
 10045ac:	e58d4010 	str	r4, [sp, #16]
 10045b0:	eaffffd9 	b	100451c <split+0x158>

010045b4 <list_add_all_at.part.3>:
    for (i = 0; i < list->size; i++) {
 10045b4:	e5913000 	ldr	r3, [r1]
enum cc_stat list_add_all_at(List *list1, List *list2, size_t index)
 10045b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10045bc:	e1a08000 	mov	r8, r0
 10045c0:	e1a0a002 	mov	sl, r2
    Node *insert = list->head;
 10045c4:	e5916004 	ldr	r6, [r1, #4]
    for (i = 0; i < list->size; i++) {
 10045c8:	e3530000 	cmp	r3, #0
    Node *tail = NULL;
 10045cc:	01a00003 	moveq	r0, r3
    Node *head = NULL;
 10045d0:	01a05003 	moveq	r5, r3
    for (i = 0; i < list->size; i++) {
 10045d4:	0a00001a 	beq	1004644 <list_add_all_at.part.3+0x90>
    Node *tail = NULL;
 10045d8:	e3a09000 	mov	r9, #0
 10045dc:	e1a07001 	mov	r7, r1
    Node *head = NULL;
 10045e0:	e1a05009 	mov	r5, r9
    for (i = 0; i < list->size; i++) {
 10045e4:	e1a04009 	mov	r4, r9
 10045e8:	ea000005 	b	1004604 <list_add_all_at.part.3+0x50>
 10045ec:	e1530004 	cmp	r3, r4
            (*t)->next = new;
 10045f0:	e5890004 	str	r0, [r9, #4]
            new->prev  = *t;
 10045f4:	e5809008 	str	r9, [r0, #8]
        insert = insert->next;
 10045f8:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 10045fc:	9a000010 	bls	1004644 <list_add_all_at.part.3+0x90>
 1004600:	e1a09000 	mov	r9, r0
        Node *new = list->mem_calloc(1, sizeof(Node));
 1004604:	e5973010 	ldr	r3, [r7, #16]
 1004608:	e3a0100c 	mov	r1, #12
 100460c:	e3a00001 	mov	r0, #1
 1004610:	e12fff33 	blx	r3
        if (!new) {
 1004614:	e3500000 	cmp	r0, #0
 1004618:	0a000032 	beq	10046e8 <list_add_all_at.part.3+0x134>
        new->data = insert->data;
 100461c:	e5963000 	ldr	r3, [r6]
        if (!*h) {
 1004620:	e3550000 	cmp	r5, #0
    for (i = 0; i < list->size; i++) {
 1004624:	e2844001 	add	r4, r4, #1
        new->data = insert->data;
 1004628:	e5803000 	str	r3, [r0]
    for (i = 0; i < list->size; i++) {
 100462c:	e5973000 	ldr	r3, [r7]
        if (!*h) {
 1004630:	1affffed 	bne	10045ec <list_add_all_at.part.3+0x38>
    for (i = 0; i < list->size; i++) {
 1004634:	e1540003 	cmp	r4, r3
 1004638:	e1a05000 	mov	r5, r0
        insert = insert->next;
 100463c:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 1004640:	3affffee 	bcc	1004600 <list_add_all_at.part.3+0x4c>
 *
 * @return CC_OK if the node was found, or CC_ERR_OUT_OF_RANGE if not.
 */
static enum cc_stat get_node_at(List *list, size_t index, Node **out)
{
    if (!list || index >= list->size)
 1004644:	e598c000 	ldr	ip, [r8]
 1004648:	e15c000a 	cmp	ip, sl
 100464c:	9a000020 	bls	10046d4 <list_add_all_at.part.3+0x120>
        return CC_ERR_OUT_OF_RANGE;

    size_t i;
    Node *node = NULL;

    if (index < list->size / 2) {
 1004650:	e15a00ac 	cmp	sl, ip, lsr #1
 1004654:	2a000014 	bcs	10046ac <list_add_all_at.part.3+0xf8>
        node = list->head;
        for (i = 0; i < index; i++)
 1004658:	e35a0000 	cmp	sl, #0
        node = list->head;
 100465c:	e5981004 	ldr	r1, [r8, #4]
        for (i = 0; i < index; i++)
 1004660:	0a000004 	beq	1004678 <list_add_all_at.part.3+0xc4>
 1004664:	e3a02000 	mov	r2, #0
 1004668:	e2822001 	add	r2, r2, #1
            node = node->next;
 100466c:	e5911004 	ldr	r1, [r1, #4]
        for (i = 0; i < index; i++)
 1004670:	e15a0002 	cmp	sl, r2
 1004674:	1afffffb 	bne	1004668 <list_add_all_at.part.3+0xb4>
    if (end)
 1004678:	e3510000 	cmp	r1, #0
 100467c:	0a000014 	beq	10046d4 <list_add_all_at.part.3+0x120>
        base = end->prev;
 1004680:	e5912008 	ldr	r2, [r1, #8]
    } else if (!base) {
 1004684:	e3520000 	cmp	r2, #0
 1004688:	0a000020 	beq	1004710 <list_add_all_at.part.3+0x15c>
        head->prev        = base;
 100468c:	e5852008 	str	r2, [r5, #8]
        base->next        = head;
 1004690:	e5825004 	str	r5, [r2, #4]
        tail->next        = end;
 1004694:	e5801004 	str	r1, [r0, #4]
        end->prev         = tail;
 1004698:	e5810008 	str	r0, [r1, #8]
    list1->size += list2->size;
 100469c:	e083300c 	add	r3, r3, ip
    return CC_OK;
 10046a0:	e3a00000 	mov	r0, #0
    list1->size += list2->size;
 10046a4:	e5883000 	str	r3, [r8]
}
 10046a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    } else {
        node = list->tail;
        for (i = list->size - 1; i > index; i--)
 10046ac:	e24c2001 	sub	r2, ip, #1
        node = list->tail;
 10046b0:	e5981008 	ldr	r1, [r8, #8]
        for (i = list->size - 1; i > index; i--)
 10046b4:	e15a0002 	cmp	sl, r2
 10046b8:	2affffee 	bcs	1004678 <list_add_all_at.part.3+0xc4>
 10046bc:	e2422001 	sub	r2, r2, #1
            node = node->prev;
 10046c0:	e5911008 	ldr	r1, [r1, #8]
        for (i = list->size - 1; i > index; i--)
 10046c4:	e15a0002 	cmp	sl, r2
 10046c8:	1afffffb 	bne	10046bc <list_add_all_at.part.3+0x108>
    if (end)
 10046cc:	e3510000 	cmp	r1, #0
 10046d0:	1affffea 	bne	1004680 <list_add_all_at.part.3+0xcc>
        list1->tail->next = head;
 10046d4:	e5982008 	ldr	r2, [r8, #8]
 10046d8:	e5825004 	str	r5, [r2, #4]
        head->prev        = list1->tail;
 10046dc:	e5852008 	str	r2, [r5, #8]
        list1->tail       = tail;
 10046e0:	e5880008 	str	r0, [r8, #8]
 10046e4:	eaffffec 	b	100469c <list_add_all_at.part.3+0xe8>
            while (*h) {
 10046e8:	e3550000 	cmp	r5, #0
 10046ec:	0a000005 	beq	1004708 <list_add_all_at.part.3+0x154>
                Node *tmp = (*h)->next;
 10046f0:	e5954004 	ldr	r4, [r5, #4]
                list->mem_free(*h);
 10046f4:	e1a00005 	mov	r0, r5
 10046f8:	e5973014 	ldr	r3, [r7, #20]
 10046fc:	e12fff33 	blx	r3
            while (*h) {
 1004700:	e2545000 	subs	r5, r4, #0
 1004704:	1afffff9 	bne	10046f0 <list_add_all_at.part.3+0x13c>
        return CC_ERR_ALLOC;
 1004708:	e3a00001 	mov	r0, #1
 100470c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list1->head->prev = tail;
 1004710:	e5982004 	ldr	r2, [r8, #4]
 1004714:	e5820008 	str	r0, [r2, #8]
        tail->next        = list1->head;
 1004718:	e5802004 	str	r2, [r0, #4]
        list1->head       = head;
 100471c:	e5885004 	str	r5, [r8, #4]
 1004720:	eaffffdd 	b	100469c <list_add_all_at.part.3+0xe8>

01004724 <list_conf_init>:
    conf->mem_alloc  = malloc;
 1004724:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    conf->mem_calloc = calloc;
 1004728:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 100472c:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    conf->mem_alloc  = malloc;
 1004730:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1004734:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1004738:	e3403101 	movt	r3, #257	; 0x101
 100473c:	e880000e 	stm	r0, {r1, r2, r3}
}
 1004740:	e12fff1e 	bx	lr

01004744 <list_new>:
{
 1004744:	e92d4010 	push	{r4, lr}
    List *list = conf->mem_calloc(1, sizeof(List));
 1004748:	e3a01018 	mov	r1, #24
{
 100474c:	e1a04000 	mov	r4, r0
    List *list = conf->mem_calloc(1, sizeof(List));
 1004750:	e3a00001 	mov	r0, #1
 1004754:	fa005717 	blx	101a3b8 <calloc>
    if (!list)
 1004758:	e2503000 	subs	r3, r0, #0
 100475c:	0a00000b 	beq	1004790 <list_new+0x4c>
    list->mem_alloc  = conf->mem_alloc;
 1004760:	e30acfb9 	movw	ip, #44985	; 0xafb9
    list->mem_calloc = conf->mem_calloc;
 1004764:	e30a13b9 	movw	r1, #41913	; 0xa3b9
    list->mem_free   = conf->mem_free;
 1004768:	e30a2fc9 	movw	r2, #45001	; 0xafc9
    list->mem_alloc  = conf->mem_alloc;
 100476c:	e340c101 	movt	ip, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1004770:	e3401101 	movt	r1, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1004774:	e3402101 	movt	r2, #257	; 0x101
    *out = list;
 1004778:	e5843000 	str	r3, [r4]
    return CC_OK;
 100477c:	e3a00000 	mov	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1004780:	e583c00c 	str	ip, [r3, #12]
    list->mem_calloc = conf->mem_calloc;
 1004784:	e5831010 	str	r1, [r3, #16]
    list->mem_free   = conf->mem_free;
 1004788:	e5832014 	str	r2, [r3, #20]
    return CC_OK;
 100478c:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_ALLOC;
 1004790:	e3a00001 	mov	r0, #1
}
 1004794:	e8bd8010 	pop	{r4, pc}

01004798 <list_new_conf>:
{
 1004798:	e92d4070 	push	{r4, r5, r6, lr}
 100479c:	e1a04000 	mov	r4, r0
 10047a0:	e1a05001 	mov	r5, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 10047a4:	e5903004 	ldr	r3, [r0, #4]
 10047a8:	e3a01018 	mov	r1, #24
 10047ac:	e3a00001 	mov	r0, #1
 10047b0:	e12fff33 	blx	r3
    if (!list)
 10047b4:	e2503000 	subs	r3, r0, #0
    list->mem_alloc  = conf->mem_alloc;
 10047b8:	1594c000 	ldrne	ip, [r4]
    return CC_OK;
 10047bc:	13a00000 	movne	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 10047c0:	19940006 	ldmibne	r4, {r1, r2}
        return CC_ERR_ALLOC;
 10047c4:	03a00001 	moveq	r0, #1
    list->mem_alloc  = conf->mem_alloc;
 10047c8:	1583c00c 	strne	ip, [r3, #12]
 10047cc:	15831010 	strne	r1, [r3, #16]
 10047d0:	15832014 	strne	r2, [r3, #20]
    *out = list;
 10047d4:	15853000 	strne	r3, [r5]
}
 10047d8:	e8bd8070 	pop	{r4, r5, r6, pc}

010047dc <list_destroy>:
    if (list->size > 0)
 10047dc:	e5903000 	ldr	r3, [r0]
{
 10047e0:	e92d4070 	push	{r4, r5, r6, lr}
 10047e4:	e1a04000 	mov	r4, r0
    if (list->size > 0)
 10047e8:	e3530000 	cmp	r3, #0
 10047ec:	1a000003 	bne	1004800 <list_destroy+0x24>
    list->mem_free(list);
 10047f0:	e5943014 	ldr	r3, [r4, #20]
 10047f4:	e1a00004 	mov	r0, r4
}
 10047f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    list->mem_free(list);
 10047fc:	e12fff13 	bx	r3
    Node *node = list->head;
 1004800:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1004804:	e3530000 	cmp	r3, #0
 1004808:	1a00000e 	bne	1004848 <list_destroy+0x6c>
 100480c:	ea000019 	b	1004878 <list_destroy+0x9c>
        node->prev->next = node->next;
 1004810:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 1004814:	e1a00003 	mov	r0, r3
 1004818:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 100481c:	e3510000 	cmp	r1, #0
 1004820:	0a000011 	beq	100486c <list_destroy+0x90>
    list->mem_free(node);
 1004824:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1004828:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 100482c:	e12fff33 	blx	r3
    list->size--;
 1004830:	e5943000 	ldr	r3, [r4]
    while (node) {
 1004834:	e3550000 	cmp	r5, #0
    list->size--;
 1004838:	e2433001 	sub	r3, r3, #1
 100483c:	e5843000 	str	r3, [r4]
    while (node) {
 1004840:	0a00000c 	beq	1004878 <list_destroy+0x9c>
{
 1004844:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 1004848:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 100484c:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 1004850:	e3520000 	cmp	r2, #0
 1004854:	1affffed 	bne	1004810 <list_destroy+0x34>
        Node *tmp = node->next;
 1004858:	e1a01005 	mov	r1, r5
        list->head = node->next;
 100485c:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 1004860:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 1004864:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 1004868:	1affffed 	bne	1004824 <list_destroy+0x48>
        list->tail = node->prev;
 100486c:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 1004870:	e5943014 	ldr	r3, [r4, #20]
 1004874:	eaffffec 	b	100482c <list_destroy+0x50>
        list->head = NULL;
 1004878:	e3a03000 	mov	r3, #0
    list->mem_free(list);
 100487c:	e1a00004 	mov	r0, r4
        list->head = NULL;
 1004880:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1004884:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1004888:	e5943014 	ldr	r3, [r4, #20]
}
 100488c:	e8bd4070 	pop	{r4, r5, r6, lr}
    list->mem_free(list);
 1004890:	e12fff13 	bx	r3

01004894 <list_destroy_cb>:
    if (list->size == 0)
 1004894:	e5903000 	ldr	r3, [r0]
{
 1004898:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100489c:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 10048a0:	e3530000 	cmp	r3, #0
 10048a4:	0a000038 	beq	100498c <list_destroy_cb+0xf8>
    Node *node = list->head;
 10048a8:	e5905004 	ldr	r5, [r0, #4]
    while (node) {
 10048ac:	e3550000 	cmp	r5, #0
 10048b0:	0a000032 	beq	1004980 <list_destroy_cb+0xec>
 10048b4:	e3510000 	cmp	r1, #0
 10048b8:	e1a07001 	mov	r7, r1
 10048bc:	1a000020 	bne	1004944 <list_destroy_cb+0xb0>
 10048c0:	ea000008 	b	10048e8 <list_destroy_cb+0x54>
    list->mem_free(node);
 10048c4:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 10048c8:	e5823008 	str	r3, [r2, #8]
    list->mem_free(node);
 10048cc:	e12fff31 	blx	r1
    list->size--;
 10048d0:	e5943000 	ldr	r3, [r4]
    while (node) {
 10048d4:	e3560000 	cmp	r6, #0
    list->size--;
 10048d8:	e2433001 	sub	r3, r3, #1
 10048dc:	e5843000 	str	r3, [r4]
    while (node) {
 10048e0:	0a000026 	beq	1004980 <list_destroy_cb+0xec>
{
 10048e4:	e1a05006 	mov	r5, r6
    if (node->prev != NULL)
 10048e8:	e5953008 	ldr	r3, [r5, #8]
    list->mem_free(node);
 10048ec:	e1a00005 	mov	r0, r5
        Node *tmp = node->next;
 10048f0:	e5956004 	ldr	r6, [r5, #4]
    if (node->prev != NULL)
 10048f4:	e3530000 	cmp	r3, #0
        node->prev->next = node->next;
 10048f8:	15836004 	strne	r6, [r3, #4]
        Node *tmp = node->next;
 10048fc:	01a02006 	moveq	r2, r6
 1004900:	15952004 	ldrne	r2, [r5, #4]
        list->head = node->next;
 1004904:	05846004 	streq	r6, [r4, #4]
    if (node->next == NULL)
 1004908:	e3520000 	cmp	r2, #0
 100490c:	1affffec 	bne	10048c4 <list_destroy_cb+0x30>
        list->tail = node->prev;
 1004910:	e5843008 	str	r3, [r4, #8]
    list->mem_free(node);
 1004914:	e5943014 	ldr	r3, [r4, #20]
 1004918:	e12fff33 	blx	r3
 100491c:	eaffffeb 	b	10048d0 <list_destroy_cb+0x3c>
 1004920:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 1004924:	e5832008 	str	r2, [r3, #8]
    list->mem_free(node);
 1004928:	e12fff31 	blx	r1
    list->size--;
 100492c:	e5943000 	ldr	r3, [r4]
    while (node) {
 1004930:	e3560000 	cmp	r6, #0
    list->size--;
 1004934:	e2433001 	sub	r3, r3, #1
 1004938:	e5843000 	str	r3, [r4]
    while (node) {
 100493c:	0a00000f 	beq	1004980 <list_destroy_cb+0xec>
        Node *tmp = node->next;
 1004940:	e1a05006 	mov	r5, r6
 1004944:	e8950041 	ldm	r5, {r0, r6}
            cb(node->data);
 1004948:	e12fff37 	blx	r7
    if (node->prev != NULL)
 100494c:	e5952008 	ldr	r2, [r5, #8]
    list->mem_free(node);
 1004950:	e1a00005 	mov	r0, r5
 1004954:	e5953004 	ldr	r3, [r5, #4]
    if (node->prev != NULL)
 1004958:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 100495c:	15823004 	strne	r3, [r2, #4]
    if (node->prev == NULL)
 1004960:	15953004 	ldrne	r3, [r5, #4]
        list->head = node->next;
 1004964:	05843004 	streq	r3, [r4, #4]
    if (node->next == NULL)
 1004968:	e3530000 	cmp	r3, #0
 100496c:	1affffeb 	bne	1004920 <list_destroy_cb+0x8c>
        list->tail = node->prev;
 1004970:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 1004974:	e5943014 	ldr	r3, [r4, #20]
 1004978:	e12fff33 	blx	r3
    list->size--;
 100497c:	eaffffea 	b	100492c <list_destroy_cb+0x98>
        list->head = NULL;
 1004980:	e3a03000 	mov	r3, #0
 1004984:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1004988:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 100498c:	e5943014 	ldr	r3, [r4, #20]
 1004990:	e1a00004 	mov	r0, r4
}
 1004994:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    list->mem_free(list);
 1004998:	e12fff13 	bx	r3

0100499c <list_add>:
{
 100499c:	e92d4070 	push	{r4, r5, r6, lr}
 10049a0:	e1a04000 	mov	r4, r0
    Node *node = list->mem_calloc(1, sizeof(Node));
 10049a4:	e5903010 	ldr	r3, [r0, #16]
{
 10049a8:	e1a05001 	mov	r5, r1
    Node *node = list->mem_calloc(1, sizeof(Node));
 10049ac:	e3a00001 	mov	r0, #1
 10049b0:	e3a0100c 	mov	r1, #12
 10049b4:	e12fff33 	blx	r3
    if (node == NULL)
 10049b8:	e3500000 	cmp	r0, #0
 10049bc:	0a00000b 	beq	10049f0 <list_add+0x54>
    if (list->size == 0) {
 10049c0:	e5943000 	ldr	r3, [r4]
    node->data = element;
 10049c4:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 10049c8:	e3530000 	cmp	r3, #0
    list->size++;
 10049cc:	e2833001 	add	r3, r3, #1
        node->prev = list->tail;
 10049d0:	15942008 	ldrne	r2, [r4, #8]
        list->head = node;
 10049d4:	05840004 	streq	r0, [r4, #4]
        node->prev = list->tail;
 10049d8:	15802008 	strne	r2, [r0, #8]
        list->tail->next = node;
 10049dc:	15820004 	strne	r0, [r2, #4]
        list->tail = node;
 10049e0:	e5840008 	str	r0, [r4, #8]
    return CC_OK;
 10049e4:	e3a00000 	mov	r0, #0
    list->size++;
 10049e8:	e5843000 	str	r3, [r4]
    return CC_OK;
 10049ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10049f0:	e3a00001 	mov	r0, #1
}
 10049f4:	e8bd8070 	pop	{r4, r5, r6, pc}

010049f8 <list_add_first>:
{
 10049f8:	e92d4070 	push	{r4, r5, r6, lr}
 10049fc:	e1a04000 	mov	r4, r0
    Node *node = list->mem_calloc(1, sizeof(Node));
 1004a00:	e5903010 	ldr	r3, [r0, #16]
{
 1004a04:	e1a05001 	mov	r5, r1
    Node *node = list->mem_calloc(1, sizeof(Node));
 1004a08:	e3a00001 	mov	r0, #1
 1004a0c:	e3a0100c 	mov	r1, #12
 1004a10:	e12fff33 	blx	r3
    if (node == NULL)
 1004a14:	e3500000 	cmp	r0, #0
 1004a18:	0a00000c 	beq	1004a50 <list_add_first+0x58>
    if (list->size == 0) {
 1004a1c:	e5943000 	ldr	r3, [r4]
    node->data = element;
 1004a20:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 1004a24:	e3530000 	cmp	r3, #0
    list->size++;
 1004a28:	e2833001 	add	r3, r3, #1
        node->next = list->head;
 1004a2c:	15942004 	ldrne	r2, [r4, #4]
        list->head = node;
 1004a30:	05840004 	streq	r0, [r4, #4]
        list->tail = node;
 1004a34:	05840008 	streq	r0, [r4, #8]
        node->next = list->head;
 1004a38:	15802004 	strne	r2, [r0, #4]
        list->head->prev = node;
 1004a3c:	15820008 	strne	r0, [r2, #8]
        list->head = node;
 1004a40:	15840004 	strne	r0, [r4, #4]
    return CC_OK;
 1004a44:	e3a00000 	mov	r0, #0
    list->size++;
 1004a48:	e5843000 	str	r3, [r4]
    return CC_OK;
 1004a4c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1004a50:	e3a00001 	mov	r0, #1
}
 1004a54:	e8bd8070 	pop	{r4, r5, r6, pc}

01004a58 <list_add_last>:
 1004a58:	e92d4070 	push	{r4, r5, r6, lr}
 1004a5c:	e1a04000 	mov	r4, r0
 1004a60:	e5903010 	ldr	r3, [r0, #16]
 1004a64:	e1a05001 	mov	r5, r1
 1004a68:	e3a00001 	mov	r0, #1
 1004a6c:	e3a0100c 	mov	r1, #12
 1004a70:	e12fff33 	blx	r3
 1004a74:	e3500000 	cmp	r0, #0
 1004a78:	0a00000b 	beq	1004aac <list_add_last+0x54>
 1004a7c:	e5943000 	ldr	r3, [r4]
 1004a80:	e5805000 	str	r5, [r0]
 1004a84:	e3530000 	cmp	r3, #0
 1004a88:	e2833001 	add	r3, r3, #1
 1004a8c:	15942008 	ldrne	r2, [r4, #8]
 1004a90:	05840004 	streq	r0, [r4, #4]
 1004a94:	15802008 	strne	r2, [r0, #8]
 1004a98:	15820004 	strne	r0, [r2, #4]
 1004a9c:	e5840008 	str	r0, [r4, #8]
 1004aa0:	e3a00000 	mov	r0, #0
 1004aa4:	e5843000 	str	r3, [r4]
 1004aa8:	e8bd8070 	pop	{r4, r5, r6, pc}
 1004aac:	e3a00001 	mov	r0, #1
 1004ab0:	e8bd8070 	pop	{r4, r5, r6, pc}

01004ab4 <list_add_at>:
{
 1004ab4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (!list || index >= list->size)
 1004ab8:	e2506000 	subs	r6, r0, #0
 1004abc:	0a000032 	beq	1004b8c <list_add_at+0xd8>
 1004ac0:	e5963000 	ldr	r3, [r6]
 1004ac4:	e1520003 	cmp	r2, r3
 1004ac8:	2a00002f 	bcs	1004b8c <list_add_at+0xd8>
    if (index < list->size / 2) {
 1004acc:	e15200a3 	cmp	r2, r3, lsr #1
 1004ad0:	2a000024 	bcs	1004b68 <list_add_at+0xb4>
        for (i = 0; i < index; i++)
 1004ad4:	e3520000 	cmp	r2, #0
        node = list->head;
 1004ad8:	e5964004 	ldr	r4, [r6, #4]
        for (i = 0; i < index; i++)
 1004adc:	0a000004 	beq	1004af4 <list_add_at+0x40>
 1004ae0:	e3a03000 	mov	r3, #0
 1004ae4:	e2833001 	add	r3, r3, #1
            node = node->next;
 1004ae8:	e5944004 	ldr	r4, [r4, #4]
        for (i = 0; i < index; i++)
 1004aec:	e1520003 	cmp	r2, r3
 1004af0:	1afffffb 	bne	1004ae4 <list_add_at+0x30>
    Node *new = list->mem_calloc(1, sizeof(Node));
 1004af4:	e1a07001 	mov	r7, r1
 1004af8:	e5963010 	ldr	r3, [r6, #16]
 1004afc:	e3a0100c 	mov	r1, #12
 1004b00:	e3a00001 	mov	r0, #1
 1004b04:	e1a05002 	mov	r5, r2
 1004b08:	e12fff33 	blx	r3
    if (!new)
 1004b0c:	e3500000 	cmp	r0, #0
 1004b10:	0a00001f 	beq	1004b94 <list_add_at+0xe0>
    if (ins->next != NULL)
 1004b14:	e5902004 	ldr	r2, [r0, #4]
 1004b18:	e5903008 	ldr	r3, [r0, #8]
    new->data = element;
 1004b1c:	e5807000 	str	r7, [r0]
    if (ins->next != NULL)
 1004b20:	e3520000 	cmp	r2, #0
        ins->next->prev = ins->prev;
 1004b24:	15823008 	strne	r3, [r2, #8]
 1004b28:	15903008 	ldrne	r3, [r0, #8]
    if (ins->prev != NULL)
 1004b2c:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1004b30:	15832004 	strne	r2, [r3, #4]
    if (base->prev == NULL) {
 1004b34:	e5943008 	ldr	r3, [r4, #8]
 1004b38:	e3530000 	cmp	r3, #0
        ins->prev       = NULL;
 1004b3c:	e5803008 	str	r3, [r0, #8]
        ins->prev->next = ins;
 1004b40:	15830004 	strne	r0, [r3, #4]
    if (index == 0)
 1004b44:	e3550000 	cmp	r5, #0
    list->size++;
 1004b48:	e5963000 	ldr	r3, [r6]
        ins->next       = base;
 1004b4c:	e5804004 	str	r4, [r0, #4]
        base->prev      = ins;
 1004b50:	e5840008 	str	r0, [r4, #8]
    list->size++;
 1004b54:	e2833001 	add	r3, r3, #1
        list->head = new;
 1004b58:	05860004 	streq	r0, [r6, #4]
    list->size++;
 1004b5c:	e5863000 	str	r3, [r6]
    return CC_OK;
 1004b60:	e3a00000 	mov	r0, #0
 1004b64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        for (i = list->size - 1; i > index; i--)
 1004b68:	e2433001 	sub	r3, r3, #1
        node = list->tail;
 1004b6c:	e5964008 	ldr	r4, [r6, #8]
        for (i = list->size - 1; i > index; i--)
 1004b70:	e1520003 	cmp	r2, r3
 1004b74:	2affffde 	bcs	1004af4 <list_add_at+0x40>
 1004b78:	e2433001 	sub	r3, r3, #1
            node = node->prev;
 1004b7c:	e5944008 	ldr	r4, [r4, #8]
        for (i = list->size - 1; i > index; i--)
 1004b80:	e1520003 	cmp	r2, r3
 1004b84:	1afffffb 	bne	1004b78 <list_add_at+0xc4>
 1004b88:	eaffffd9 	b	1004af4 <list_add_at+0x40>
    if (!list || index >= list->size)
 1004b8c:	e3a00008 	mov	r0, #8
 1004b90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1004b94:	e3a00001 	mov	r0, #1
}
 1004b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01004b9c <list_add_all>:
{
 1004b9c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (list1->size == 0)
 1004ba0:	e5904000 	ldr	r4, [r0]
 1004ba4:	e5913000 	ldr	r3, [r1]
 1004ba8:	e3540000 	cmp	r4, #0
 1004bac:	0a000004 	beq	1004bc4 <list_add_all+0x28>
    if (list2->size == 0)
 1004bb0:	e3530000 	cmp	r3, #0
 1004bb4:	0a000004 	beq	1004bcc <list_add_all+0x30>
    if (index > list1->size)
 1004bb8:	e1a02004 	mov	r2, r4
}
 1004bbc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 1004bc0:	eafffe7b 	b	10045b4 <list_add_all_at.part.3>
    if (list2->size == 0)
 1004bc4:	e3530000 	cmp	r3, #0
 1004bc8:	1a000001 	bne	1004bd4 <list_add_all+0x38>
        return CC_OK;
 1004bcc:	e1a00003 	mov	r0, r3
 1004bd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1004bd4:	e1a08000 	mov	r8, r0
 1004bd8:	e1a05001 	mov	r5, r1
    Node *insert = list->head;
 1004bdc:	e5916004 	ldr	r6, [r1, #4]
    Node *tail = NULL;
 1004be0:	e1a09004 	mov	r9, r4
    Node *head = NULL;
 1004be4:	e1a07004 	mov	r7, r4
 1004be8:	ea000005 	b	1004c04 <list_add_all+0x68>
    for (i = 0; i < list->size; i++) {
 1004bec:	e1520004 	cmp	r2, r4
            (*t)->next = new;
 1004bf0:	e5893004 	str	r3, [r9, #4]
            new->prev  = *t;
 1004bf4:	e5839008 	str	r9, [r3, #8]
        insert = insert->next;
 1004bf8:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 1004bfc:	9a000010 	bls	1004c44 <list_add_all+0xa8>
 1004c00:	e1a09003 	mov	r9, r3
        Node *new = list->mem_calloc(1, sizeof(Node));
 1004c04:	e5953010 	ldr	r3, [r5, #16]
 1004c08:	e3a0100c 	mov	r1, #12
 1004c0c:	e3a00001 	mov	r0, #1
 1004c10:	e12fff33 	blx	r3
        if (!new) {
 1004c14:	e2503000 	subs	r3, r0, #0
 1004c18:	0a00000e 	beq	1004c58 <list_add_all+0xbc>
        new->data = insert->data;
 1004c1c:	e5962000 	ldr	r2, [r6]
        if (!*h) {
 1004c20:	e3570000 	cmp	r7, #0
    for (i = 0; i < list->size; i++) {
 1004c24:	e2844001 	add	r4, r4, #1
        new->data = insert->data;
 1004c28:	e5832000 	str	r2, [r3]
    for (i = 0; i < list->size; i++) {
 1004c2c:	e5952000 	ldr	r2, [r5]
        if (!*h) {
 1004c30:	1affffed 	bne	1004bec <list_add_all+0x50>
    for (i = 0; i < list->size; i++) {
 1004c34:	e1540002 	cmp	r4, r2
 1004c38:	e1a07003 	mov	r7, r3
        insert = insert->next;
 1004c3c:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < list->size; i++) {
 1004c40:	3affffee 	bcc	1004c00 <list_add_all+0x64>
    return CC_OK;
 1004c44:	e3a00000 	mov	r0, #0
    list1->head = head;
 1004c48:	e5887004 	str	r7, [r8, #4]
    list1->tail = tail;
 1004c4c:	e5883008 	str	r3, [r8, #8]
    list1->size = list2->size;
 1004c50:	e5882000 	str	r2, [r8]
}
 1004c54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            while (*h) {
 1004c58:	e3570000 	cmp	r7, #0
 1004c5c:	0a000005 	beq	1004c78 <list_add_all+0xdc>
                Node *tmp = (*h)->next;
 1004c60:	e5974004 	ldr	r4, [r7, #4]
                list->mem_free(*h);
 1004c64:	e1a00007 	mov	r0, r7
 1004c68:	e5953014 	ldr	r3, [r5, #20]
 1004c6c:	e12fff33 	blx	r3
            while (*h) {
 1004c70:	e2547000 	subs	r7, r4, #0
 1004c74:	1afffff9 	bne	1004c60 <list_add_all+0xc4>
        return CC_ERR_ALLOC;
 1004c78:	e3a00001 	mov	r0, #1
 1004c7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01004c80 <list_add_all_at>:
    if (list2->size == 0)
 1004c80:	e5913000 	ldr	r3, [r1]
 1004c84:	e3530000 	cmp	r3, #0
 1004c88:	0a000008 	beq	1004cb0 <list_add_all_at+0x30>
    if (index > list1->size)
 1004c8c:	e5903000 	ldr	r3, [r0]
{
 1004c90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1004c94:	e1a0e000 	mov	lr, r0
    if (index > list1->size)
 1004c98:	e1530002 	cmp	r3, r2
 1004c9c:	3a000001 	bcc	1004ca8 <list_add_all_at+0x28>
}
 1004ca0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
 1004ca4:	eafffe42 	b	10045b4 <list_add_all_at.part.3>
        return CC_ERR_OUT_OF_RANGE;
 1004ca8:	e3a00008 	mov	r0, #8
}
 1004cac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return CC_OK;
 1004cb0:	e1a00003 	mov	r0, r3
}
 1004cb4:	e12fff1e 	bx	lr

01004cb8 <list_splice>:
    if (list2->size == 0)
 1004cb8:	e5912000 	ldr	r2, [r1]
 1004cbc:	e3520000 	cmp	r2, #0
 1004cc0:	0a000021 	beq	1004d4c <list_splice+0x94>
    return list_splice_at(list1, list2, list1->size);
 1004cc4:	e5903000 	ldr	r3, [r0]
{
 1004cc8:	e92d4070 	push	{r4, r5, r6, lr}
 1004ccc:	e5915004 	ldr	r5, [r1, #4]
    if (list1->size == 0) {
 1004cd0:	e3530000 	cmp	r3, #0
 1004cd4:	e5914008 	ldr	r4, [r1, #8]
 1004cd8:	0a00001d 	beq	1004d54 <list_splice+0x9c>
        get_node_at(list1, index - 1, &base);
 1004cdc:	e2436001 	sub	r6, r3, #1
    if (index < list->size / 2) {
 1004ce0:	e15600a3 	cmp	r6, r3, lsr #1
 1004ce4:	2a000022 	bcs	1004d74 <list_splice+0xbc>
        for (i = 0; i < index; i++)
 1004ce8:	e3560000 	cmp	r6, #0
        node = list->head;
 1004cec:	e590e004 	ldr	lr, [r0, #4]
        for (i = 0; i < index; i++)
 1004cf0:	0a000004 	beq	1004d08 <list_splice+0x50>
 1004cf4:	e3a0c000 	mov	ip, #0
 1004cf8:	e28cc001 	add	ip, ip, #1
            node = node->next;
 1004cfc:	e59ee004 	ldr	lr, [lr, #4]
        for (i = 0; i < index; i++)
 1004d00:	e156000c 	cmp	r6, ip
 1004d04:	1afffffb 	bne	1004cf8 <list_splice+0x40>
    if (!left) {
 1004d08:	e35e0000 	cmp	lr, #0
    l1->size += l2->size;
 1004d0c:	e0833002 	add	r3, r3, r2
        l1->head->prev = l2->tail;
 1004d10:	0590c004 	ldreq	ip, [r0, #4]
    l2->head = NULL;
 1004d14:	e3a02000 	mov	r2, #0
        l1->tail->next = l2->head;
 1004d18:	1590c008 	ldrne	ip, [r0, #8]
        l1->head->prev = l2->tail;
 1004d1c:	058c4008 	streq	r4, [ip, #8]
        l1->tail->next = l2->head;
 1004d20:	158c5004 	strne	r5, [ip, #4]
        l2->tail->next = l1->head;
 1004d24:	0584c004 	streq	ip, [r4, #4]
        l2->head->prev = l1->tail;
 1004d28:	1585c008 	strne	ip, [r5, #8]
        l1->head       = l2->head;
 1004d2c:	05805004 	streq	r5, [r0, #4]
        l1->tail       = l2->tail;
 1004d30:	15804008 	strne	r4, [r0, #8]
    l1->size += l2->size;
 1004d34:	e5803000 	str	r3, [r0]
}
 1004d38:	e3a00000 	mov	r0, #0
    l2->head = NULL;
 1004d3c:	e5812004 	str	r2, [r1, #4]
    l2->tail = NULL;
 1004d40:	e5812008 	str	r2, [r1, #8]
    l2->size = 0;
 1004d44:	e5812000 	str	r2, [r1]
}
 1004d48:	e8bd8070 	pop	{r4, r5, r6, pc}
 1004d4c:	e3a00000 	mov	r0, #0
 1004d50:	e12fff1e 	bx	lr
        list1->head = list2->head;
 1004d54:	e5805004 	str	r5, [r0, #4]
        list1->tail = list2->tail;
 1004d58:	e5804008 	str	r4, [r0, #8]
        list1->size = list2->size;
 1004d5c:	e5802000 	str	r2, [r0]
}
 1004d60:	e3a00000 	mov	r0, #0
        list2->head = NULL;
 1004d64:	e5813004 	str	r3, [r1, #4]
        list2->tail = NULL;
 1004d68:	e5813008 	str	r3, [r1, #8]
        list2->size = 0;
 1004d6c:	e5813000 	str	r3, [r1]
}
 1004d70:	e8bd8070 	pop	{r4, r5, r6, pc}
        node = list->tail;
 1004d74:	e590e008 	ldr	lr, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1004d78:	eaffffe2 	b	1004d08 <list_splice+0x50>

01004d7c <list_splice_at>:
{
 1004d7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if (list2->size == 0)
 1004d80:	e5914000 	ldr	r4, [r1]
 1004d84:	e3540000 	cmp	r4, #0
        return CC_OK;
 1004d88:	01a03004 	moveq	r3, r4
    if (list2->size == 0)
 1004d8c:	0a000023 	beq	1004e20 <list_splice_at+0xa4>
    if (index > list1->size)
 1004d90:	e590c000 	ldr	ip, [r0]
 1004d94:	e15c0002 	cmp	ip, r2
        return CC_ERR_OUT_OF_RANGE;
 1004d98:	33a03008 	movcc	r3, #8
    if (index > list1->size)
 1004d9c:	3a00001f 	bcc	1004e20 <list_splice_at+0xa4>
    if (list1->size == 0) {
 1004da0:	e35c0000 	cmp	ip, #0
 1004da4:	e5916004 	ldr	r6, [r1, #4]
 1004da8:	e5915008 	ldr	r5, [r1, #8]
 1004dac:	0a00001d 	beq	1004e28 <list_splice_at+0xac>
    if (!list || index >= list->size)
 1004db0:	e15c0002 	cmp	ip, r2
 1004db4:	0a00002d 	beq	1004e70 <list_splice_at+0xf4>
    if (index < list->size / 2) {
 1004db8:	e15200ac 	cmp	r2, ip, lsr #1
 1004dbc:	2a000022 	bcs	1004e4c <list_splice_at+0xd0>
        for (i = 0; i < index; i++)
 1004dc0:	e3520000 	cmp	r2, #0
        node = list->head;
 1004dc4:	e5903004 	ldr	r3, [r0, #4]
        for (i = 0; i < index; i++)
 1004dc8:	0a00004a 	beq	1004ef8 <list_splice_at+0x17c>
 1004dcc:	e3a0e000 	mov	lr, #0
 1004dd0:	e28ee001 	add	lr, lr, #1
            node = node->next;
 1004dd4:	e5933004 	ldr	r3, [r3, #4]
        for (i = 0; i < index; i++)
 1004dd8:	e152000e 	cmp	r2, lr
 1004ddc:	1afffffb 	bne	1004dd0 <list_splice_at+0x54>
    if (end)
 1004de0:	e3530000 	cmp	r3, #0
 1004de4:	0a000021 	beq	1004e70 <list_splice_at+0xf4>
        base = end->prev;
 1004de8:	e5932008 	ldr	r2, [r3, #8]
    if (!left) {
 1004dec:	e3520000 	cmp	r2, #0
        left->next     = l2->head;
 1004df0:	15826004 	strne	r6, [r2, #4]
        l2->head->prev = left;
 1004df4:	15862008 	strne	r2, [r6, #8]
        right->prev    = l2->tail;
 1004df8:	15835008 	strne	r5, [r3, #8]
        l2->tail->next = right;
 1004dfc:	15853004 	strne	r3, [r5, #4]
    if (!left) {
 1004e00:	0a00002e 	beq	1004ec0 <list_splice_at+0x144>
    l2->head = NULL;
 1004e04:	e3a02000 	mov	r2, #0
    l1->size += l2->size;
 1004e08:	e084c00c 	add	ip, r4, ip
    return CC_OK;
 1004e0c:	e1a03002 	mov	r3, r2
    l1->size += l2->size;
 1004e10:	e580c000 	str	ip, [r0]
    l2->head = NULL;
 1004e14:	e5812004 	str	r2, [r1, #4]
    l2->tail = NULL;
 1004e18:	e5812008 	str	r2, [r1, #8]
    l2->size = 0;
 1004e1c:	e5812000 	str	r2, [r1]
}
 1004e20:	e1a00003 	mov	r0, r3
 1004e24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_OK;
 1004e28:	e1a0300c 	mov	r3, ip
        list1->head = list2->head;
 1004e2c:	e5806004 	str	r6, [r0, #4]
        list1->tail = list2->tail;
 1004e30:	e5805008 	str	r5, [r0, #8]
        list1->size = list2->size;
 1004e34:	e5804000 	str	r4, [r0]
}
 1004e38:	e1a00003 	mov	r0, r3
        list2->head = NULL;
 1004e3c:	e581c004 	str	ip, [r1, #4]
        list2->tail = NULL;
 1004e40:	e581c008 	str	ip, [r1, #8]
        list2->size = 0;
 1004e44:	e581c000 	str	ip, [r1]
}
 1004e48:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        for (i = list->size - 1; i > index; i--)
 1004e4c:	e24ce001 	sub	lr, ip, #1
        node = list->tail;
 1004e50:	e5903008 	ldr	r3, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1004e54:	e152000e 	cmp	r2, lr
 1004e58:	2affffe0 	bcs	1004de0 <list_splice_at+0x64>
 1004e5c:	e24ee001 	sub	lr, lr, #1
            node = node->prev;
 1004e60:	e5933008 	ldr	r3, [r3, #8]
        for (i = list->size - 1; i > index; i--)
 1004e64:	e152000e 	cmp	r2, lr
 1004e68:	1afffffb 	bne	1004e5c <list_splice_at+0xe0>
 1004e6c:	eaffffdb 	b	1004de0 <list_splice_at+0x64>
        get_node_at(list1, index - 1, &base);
 1004e70:	e2427001 	sub	r7, r2, #1
    if (!list || index >= list->size)
 1004e74:	e15c0007 	cmp	ip, r7
 1004e78:	9a000010 	bls	1004ec0 <list_splice_at+0x144>
    if (index < list->size / 2) {
 1004e7c:	e15700ac 	cmp	r7, ip, lsr #1
 1004e80:	2a000013 	bcs	1004ed4 <list_splice_at+0x158>
        for (i = 0; i < index; i++)
 1004e84:	e3570000 	cmp	r7, #0
        node = list->head;
 1004e88:	e590e004 	ldr	lr, [r0, #4]
        for (i = 0; i < index; i++)
 1004e8c:	0a000004 	beq	1004ea4 <list_splice_at+0x128>
 1004e90:	e3a03000 	mov	r3, #0
 1004e94:	e2833001 	add	r3, r3, #1
            node = node->next;
 1004e98:	e59ee004 	ldr	lr, [lr, #4]
        for (i = 0; i < index; i++)
 1004e9c:	e1570003 	cmp	r7, r3
 1004ea0:	1afffffb 	bne	1004e94 <list_splice_at+0x118>
    if (!left) {
 1004ea4:	e35e0000 	cmp	lr, #0
 1004ea8:	0a000004 	beq	1004ec0 <list_splice_at+0x144>
        l1->tail->next = l2->head;
 1004eac:	e5903008 	ldr	r3, [r0, #8]
 1004eb0:	e5836004 	str	r6, [r3, #4]
        l2->head->prev = l1->tail;
 1004eb4:	e5863008 	str	r3, [r6, #8]
        l1->tail       = l2->tail;
 1004eb8:	e5805008 	str	r5, [r0, #8]
 1004ebc:	eaffffd0 	b	1004e04 <list_splice_at+0x88>
 1004ec0:	e5903004 	ldr	r3, [r0, #4]
        l1->head->prev = l2->tail;
 1004ec4:	e5835008 	str	r5, [r3, #8]
        l2->tail->next = l1->head;
 1004ec8:	e5853004 	str	r3, [r5, #4]
        l1->head       = l2->head;
 1004ecc:	e5806004 	str	r6, [r0, #4]
 1004ed0:	eaffffcb 	b	1004e04 <list_splice_at+0x88>
        for (i = list->size - 1; i > index; i--)
 1004ed4:	e24c3001 	sub	r3, ip, #1
        node = list->tail;
 1004ed8:	e590e008 	ldr	lr, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1004edc:	e1570003 	cmp	r7, r3
 1004ee0:	2affffef 	bcs	1004ea4 <list_splice_at+0x128>
 1004ee4:	e1520003 	cmp	r2, r3
            node = node->prev;
 1004ee8:	e59ee008 	ldr	lr, [lr, #8]
        for (i = list->size - 1; i > index; i--)
 1004eec:	e2433001 	sub	r3, r3, #1
 1004ef0:	1afffffb 	bne	1004ee4 <list_splice_at+0x168>
 1004ef4:	eaffffea 	b	1004ea4 <list_splice_at+0x128>
    if (end)
 1004ef8:	e3530000 	cmp	r3, #0
 1004efc:	1affffb9 	bne	1004de8 <list_splice_at+0x6c>
 1004f00:	eaffffef 	b	1004ec4 <list_splice_at+0x148>

01004f04 <list_remove>:
    Node *node = get_node(list, element);
 1004f04:	e5903004 	ldr	r3, [r0, #4]
 * @return the node associated with the specified element.
 */
static Node *get_node(List *list, void *element)
{
    Node *node = list->head;
    while (node) {
 1004f08:	e3530000 	cmp	r3, #0
 1004f0c:	1a000003 	bne	1004f20 <list_remove+0x1c>
 1004f10:	ea00001a 	b	1004f80 <list_remove+0x7c>
        if (node->data == element)
            return node;
        node = node->next;
 1004f14:	e5933004 	ldr	r3, [r3, #4]
    while (node) {
 1004f18:	e3530000 	cmp	r3, #0
 1004f1c:	0a000017 	beq	1004f80 <list_remove+0x7c>
        if (node->data == element)
 1004f20:	e593c000 	ldr	ip, [r3]
 1004f24:	e151000c 	cmp	r1, ip
 1004f28:	1afffff9 	bne	1004f14 <list_remove+0x10>
    if (out)
 1004f2c:	e3520000 	cmp	r2, #0
{
 1004f30:	e92d4010 	push	{r4, lr}
        *out = node->data;
 1004f34:	1582c000 	strne	ip, [r2]
    if (node->prev != NULL)
 1004f38:	e1a04000 	mov	r4, r0
 1004f3c:	e5931008 	ldr	r1, [r3, #8]
 1004f40:	e5932004 	ldr	r2, [r3, #4]
 1004f44:	e3510000 	cmp	r1, #0
        node->prev->next = node->next;
 1004f48:	15812004 	strne	r2, [r1, #4]
 1004f4c:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1004f50:	05802004 	streq	r2, [r0, #4]
    if (node->next == NULL)
 1004f54:	e3520000 	cmp	r2, #0
        list->tail = node->prev;
 1004f58:	05801008 	streq	r1, [r0, #8]
    list->mem_free(node);
 1004f5c:	e1a00003 	mov	r0, r3
        node->next->prev = node->prev;
 1004f60:	15821008 	strne	r1, [r2, #8]
    list->mem_free(node);
 1004f64:	e5943014 	ldr	r3, [r4, #20]
 1004f68:	e12fff33 	blx	r3
    list->size--;
 1004f6c:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1004f70:	e3a00000 	mov	r0, #0
    list->size--;
 1004f74:	e2433001 	sub	r3, r3, #1
 1004f78:	e5843000 	str	r3, [r4]
}
 1004f7c:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1004f80:	e3a00007 	mov	r0, #7
}
 1004f84:	e12fff1e 	bx	lr

01004f88 <list_remove_at>:
{
 1004f88:	e92d4010 	push	{r4, lr}
    if (!list || index >= list->size)
 1004f8c:	e2504000 	subs	r4, r0, #0
 1004f90:	0a000028 	beq	1005038 <list_remove_at+0xb0>
 1004f94:	e5943000 	ldr	r3, [r4]
 1004f98:	e1510003 	cmp	r1, r3
 1004f9c:	2a000025 	bcs	1005038 <list_remove_at+0xb0>
    if (index < list->size / 2) {
 1004fa0:	e15100a3 	cmp	r1, r3, lsr #1
 1004fa4:	2a00001a 	bcs	1005014 <list_remove_at+0x8c>
        for (i = 0; i < index; i++)
 1004fa8:	e3510000 	cmp	r1, #0
        node = list->head;
 1004fac:	e5940004 	ldr	r0, [r4, #4]
        for (i = 0; i < index; i++)
 1004fb0:	0a000004 	beq	1004fc8 <list_remove_at+0x40>
 1004fb4:	e3a03000 	mov	r3, #0
 1004fb8:	e2833001 	add	r3, r3, #1
            node = node->next;
 1004fbc:	e5900004 	ldr	r0, [r0, #4]
        for (i = 0; i < index; i++)
 1004fc0:	e1510003 	cmp	r1, r3
 1004fc4:	1afffffb 	bne	1004fb8 <list_remove_at+0x30>
    if (out)
 1004fc8:	e3520000 	cmp	r2, #0
        *out = node->data;
 1004fcc:	15903000 	ldrne	r3, [r0]
 1004fd0:	15823000 	strne	r3, [r2]
    if (node->prev != NULL)
 1004fd4:	e5902008 	ldr	r2, [r0, #8]
 1004fd8:	e5903004 	ldr	r3, [r0, #4]
 1004fdc:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 1004fe0:	15823004 	strne	r3, [r2, #4]
 1004fe4:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 1004fe8:	05843004 	streq	r3, [r4, #4]
    if (node->next == NULL)
 1004fec:	e3530000 	cmp	r3, #0
        node->next->prev = node->prev;
 1004ff0:	15832008 	strne	r2, [r3, #8]
        list->tail = node->prev;
 1004ff4:	05842008 	streq	r2, [r4, #8]
    list->mem_free(node);
 1004ff8:	e5943014 	ldr	r3, [r4, #20]
 1004ffc:	e12fff33 	blx	r3
    list->size--;
 1005000:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 1005004:	e3a00000 	mov	r0, #0
    list->size--;
 1005008:	e2433001 	sub	r3, r3, #1
 100500c:	e5843000 	str	r3, [r4]
    return data;
 1005010:	e8bd8010 	pop	{r4, pc}
        for (i = list->size - 1; i > index; i--)
 1005014:	e2433001 	sub	r3, r3, #1
        node = list->tail;
 1005018:	e5940008 	ldr	r0, [r4, #8]
        for (i = list->size - 1; i > index; i--)
 100501c:	e1510003 	cmp	r1, r3
 1005020:	2affffe8 	bcs	1004fc8 <list_remove_at+0x40>
 1005024:	e2433001 	sub	r3, r3, #1
            node = node->prev;
 1005028:	e5900008 	ldr	r0, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 100502c:	e1510003 	cmp	r1, r3
 1005030:	1afffffb 	bne	1005024 <list_remove_at+0x9c>
 1005034:	eaffffe3 	b	1004fc8 <list_remove_at+0x40>
    if (!list || index >= list->size)
 1005038:	e3a00008 	mov	r0, #8
}
 100503c:	e8bd8010 	pop	{r4, pc}

01005040 <list_remove_first>:
    if (!list->size)
 1005040:	e5903000 	ldr	r3, [r0]
 1005044:	e3530000 	cmp	r3, #0
 1005048:	0a000017 	beq	10050ac <list_remove_first+0x6c>
    void *e = unlinkn(list, list->head);
 100504c:	e5903004 	ldr	r3, [r0, #4]
{
 1005050:	e92d4070 	push	{r4, r5, r6, lr}
 1005054:	e1a04000 	mov	r4, r0
 1005058:	e1a05001 	mov	r5, r1
    if (node->prev != NULL)
 100505c:	e593c008 	ldr	ip, [r3, #8]
 1005060:	e5932004 	ldr	r2, [r3, #4]
    void *data = node->data;
 1005064:	e5936000 	ldr	r6, [r3]
    if (node->prev != NULL)
 1005068:	e35c0000 	cmp	ip, #0
        node->prev->next = node->next;
 100506c:	158c2004 	strne	r2, [ip, #4]
 1005070:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1005074:	05802004 	streq	r2, [r0, #4]
    if (node->next == NULL)
 1005078:	e3520000 	cmp	r2, #0
        list->tail = node->prev;
 100507c:	0580c008 	streq	ip, [r0, #8]
    list->mem_free(node);
 1005080:	e1a00003 	mov	r0, r3
        node->next->prev = node->prev;
 1005084:	1582c008 	strne	ip, [r2, #8]
    list->mem_free(node);
 1005088:	e5943014 	ldr	r3, [r4, #20]
 100508c:	e12fff33 	blx	r3
    list->size--;
 1005090:	e5943000 	ldr	r3, [r4]
    if (out)
 1005094:	e3550000 	cmp	r5, #0
    return CC_OK;
 1005098:	e3a00000 	mov	r0, #0
    list->size--;
 100509c:	e2433001 	sub	r3, r3, #1
 10050a0:	e5843000 	str	r3, [r4]
        *out = e;
 10050a4:	15856000 	strne	r6, [r5]
 10050a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10050ac:	e3a00007 	mov	r0, #7
}
 10050b0:	e12fff1e 	bx	lr

010050b4 <list_remove_last>:
    if (!list->size)
 10050b4:	e5903000 	ldr	r3, [r0]
 10050b8:	e3530000 	cmp	r3, #0
 10050bc:	0a000017 	beq	1005120 <list_remove_last+0x6c>
    void *e = unlinkn(list, list->tail);
 10050c0:	e5903008 	ldr	r3, [r0, #8]
{
 10050c4:	e92d4070 	push	{r4, r5, r6, lr}
 10050c8:	e1a04000 	mov	r4, r0
 10050cc:	e1a05001 	mov	r5, r1
    if (node->prev != NULL)
 10050d0:	e593c008 	ldr	ip, [r3, #8]
 10050d4:	e5932004 	ldr	r2, [r3, #4]
    void *data = node->data;
 10050d8:	e5936000 	ldr	r6, [r3]
    if (node->prev != NULL)
 10050dc:	e35c0000 	cmp	ip, #0
        node->prev->next = node->next;
 10050e0:	158c2004 	strne	r2, [ip, #4]
 10050e4:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 10050e8:	05802004 	streq	r2, [r0, #4]
    if (node->next == NULL)
 10050ec:	e3520000 	cmp	r2, #0
        list->tail = node->prev;
 10050f0:	0580c008 	streq	ip, [r0, #8]
    list->mem_free(node);
 10050f4:	e1a00003 	mov	r0, r3
        node->next->prev = node->prev;
 10050f8:	1582c008 	strne	ip, [r2, #8]
    list->mem_free(node);
 10050fc:	e5943014 	ldr	r3, [r4, #20]
 1005100:	e12fff33 	blx	r3
    list->size--;
 1005104:	e5943000 	ldr	r3, [r4]
    if (out)
 1005108:	e3550000 	cmp	r5, #0
    return CC_OK;
 100510c:	e3a00000 	mov	r0, #0
    list->size--;
 1005110:	e2433001 	sub	r3, r3, #1
 1005114:	e5843000 	str	r3, [r4]
        *out = e;
 1005118:	15856000 	strne	r6, [r5]
 100511c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1005120:	e3a00007 	mov	r0, #7
}
 1005124:	e12fff1e 	bx	lr

01005128 <list_remove_all>:
    if (list->size == 0)
 1005128:	e5903000 	ldr	r3, [r0]
 100512c:	e3530000 	cmp	r3, #0
 1005130:	0a000024 	beq	10051c8 <list_remove_all+0xa0>
    Node *node = list->head;
 1005134:	e5903004 	ldr	r3, [r0, #4]
{
 1005138:	e92d4070 	push	{r4, r5, r6, lr}
 100513c:	e1a04000 	mov	r4, r0
    while (node) {
 1005140:	e3530000 	cmp	r3, #0
 1005144:	1a00000e 	bne	1005184 <list_remove_all+0x5c>
 1005148:	ea000019 	b	10051b4 <list_remove_all+0x8c>
        node->prev->next = node->next;
 100514c:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 1005150:	e1a00003 	mov	r0, r3
 1005154:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 1005158:	e3510000 	cmp	r1, #0
 100515c:	0a000011 	beq	10051a8 <list_remove_all+0x80>
    list->mem_free(node);
 1005160:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1005164:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 1005168:	e12fff33 	blx	r3
    list->size--;
 100516c:	e5943000 	ldr	r3, [r4]
    while (node) {
 1005170:	e3550000 	cmp	r5, #0
    list->size--;
 1005174:	e2433001 	sub	r3, r3, #1
 1005178:	e5843000 	str	r3, [r4]
    while (node) {
 100517c:	0a00000c 	beq	10051b4 <list_remove_all+0x8c>
{
 1005180:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 1005184:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 1005188:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 100518c:	e3520000 	cmp	r2, #0
 1005190:	1affffed 	bne	100514c <list_remove_all+0x24>
        Node *tmp = node->next;
 1005194:	e1a01005 	mov	r1, r5
        list->head = node->next;
 1005198:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 100519c:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 10051a0:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 10051a4:	1affffed 	bne	1005160 <list_remove_all+0x38>
        list->tail = node->prev;
 10051a8:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 10051ac:	e5943014 	ldr	r3, [r4, #20]
 10051b0:	eaffffec 	b	1005168 <list_remove_all+0x40>
        list->head = NULL;
 10051b4:	e3a03000 	mov	r3, #0
 10051b8:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 10051bc:	e1a00003 	mov	r0, r3
 10051c0:	e5843008 	str	r3, [r4, #8]
}
 10051c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    return CC_ERR_VALUE_NOT_FOUND;
 10051c8:	e3a00007 	mov	r0, #7
}
 10051cc:	e12fff1e 	bx	lr

010051d0 <list_remove_all_cb>:
    if (list->size == 0)
 10051d0:	e5903000 	ldr	r3, [r0]
 10051d4:	e3530000 	cmp	r3, #0
 10051d8:	0a00003c 	beq	10052d0 <list_remove_all_cb+0x100>
{
 10051dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10051e0:	e1a07001 	mov	r7, r1
    Node *node = list->head;
 10051e4:	e5905004 	ldr	r5, [r0, #4]
 10051e8:	e1a04000 	mov	r4, r0
    while (node) {
 10051ec:	e3550000 	cmp	r5, #0
 10051f0:	0a000031 	beq	10052bc <list_remove_all_cb+0xec>
 10051f4:	e3510000 	cmp	r1, #0
 10051f8:	1a000020 	bne	1005280 <list_remove_all_cb+0xb0>
 10051fc:	ea000008 	b	1005224 <list_remove_all_cb+0x54>
    list->mem_free(node);
 1005200:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 1005204:	e5823008 	str	r3, [r2, #8]
    list->mem_free(node);
 1005208:	e12fff31 	blx	r1
    list->size--;
 100520c:	e5943000 	ldr	r3, [r4]
    while (node) {
 1005210:	e3560000 	cmp	r6, #0
    list->size--;
 1005214:	e2433001 	sub	r3, r3, #1
 1005218:	e5843000 	str	r3, [r4]
    while (node) {
 100521c:	0a000026 	beq	10052bc <list_remove_all_cb+0xec>
{
 1005220:	e1a05006 	mov	r5, r6
    if (node->prev != NULL)
 1005224:	e5953008 	ldr	r3, [r5, #8]
    list->mem_free(node);
 1005228:	e1a00005 	mov	r0, r5
        Node *tmp = node->next;
 100522c:	e5956004 	ldr	r6, [r5, #4]
    if (node->prev != NULL)
 1005230:	e3530000 	cmp	r3, #0
        node->prev->next = node->next;
 1005234:	15836004 	strne	r6, [r3, #4]
        Node *tmp = node->next;
 1005238:	01a02006 	moveq	r2, r6
 100523c:	15952004 	ldrne	r2, [r5, #4]
        list->head = node->next;
 1005240:	05846004 	streq	r6, [r4, #4]
    if (node->next == NULL)
 1005244:	e3520000 	cmp	r2, #0
 1005248:	1affffec 	bne	1005200 <list_remove_all_cb+0x30>
        list->tail = node->prev;
 100524c:	e5843008 	str	r3, [r4, #8]
    list->mem_free(node);
 1005250:	e5943014 	ldr	r3, [r4, #20]
 1005254:	e12fff33 	blx	r3
 1005258:	eaffffeb 	b	100520c <list_remove_all_cb+0x3c>
 100525c:	e5941014 	ldr	r1, [r4, #20]
        node->next->prev = node->prev;
 1005260:	e5832008 	str	r2, [r3, #8]
    list->mem_free(node);
 1005264:	e12fff31 	blx	r1
    list->size--;
 1005268:	e5943000 	ldr	r3, [r4]
    while (node) {
 100526c:	e3560000 	cmp	r6, #0
    list->size--;
 1005270:	e2433001 	sub	r3, r3, #1
 1005274:	e5843000 	str	r3, [r4]
    while (node) {
 1005278:	0a00000f 	beq	10052bc <list_remove_all_cb+0xec>
        Node *tmp = node->next;
 100527c:	e1a05006 	mov	r5, r6
 1005280:	e8950041 	ldm	r5, {r0, r6}
            cb(node->data);
 1005284:	e12fff37 	blx	r7
    if (node->prev != NULL)
 1005288:	e5952008 	ldr	r2, [r5, #8]
    list->mem_free(node);
 100528c:	e1a00005 	mov	r0, r5
 1005290:	e5953004 	ldr	r3, [r5, #4]
    if (node->prev != NULL)
 1005294:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 1005298:	15823004 	strne	r3, [r2, #4]
    if (node->prev == NULL)
 100529c:	15953004 	ldrne	r3, [r5, #4]
        list->head = node->next;
 10052a0:	05843004 	streq	r3, [r4, #4]
    if (node->next == NULL)
 10052a4:	e3530000 	cmp	r3, #0
 10052a8:	1affffeb 	bne	100525c <list_remove_all_cb+0x8c>
        list->tail = node->prev;
 10052ac:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 10052b0:	e5943014 	ldr	r3, [r4, #20]
 10052b4:	e12fff33 	blx	r3
    list->size--;
 10052b8:	eaffffea 	b	1005268 <list_remove_all_cb+0x98>
        list->head = NULL;
 10052bc:	e3a03000 	mov	r3, #0
 10052c0:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 10052c4:	e1a00003 	mov	r0, r3
 10052c8:	e5843008 	str	r3, [r4, #8]
}
 10052cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_ERR_VALUE_NOT_FOUND;
 10052d0:	e3a00007 	mov	r0, #7
}
 10052d4:	e12fff1e 	bx	lr

010052d8 <list_replace_at>:
    if (!list || index >= list->size)
 10052d8:	e3500000 	cmp	r0, #0
 10052dc:	0a00001e 	beq	100535c <list_replace_at+0x84>
{
 10052e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (!list || index >= list->size)
 10052e4:	e590e000 	ldr	lr, [r0]
 10052e8:	e152000e 	cmp	r2, lr
 10052ec:	2a000018 	bcs	1005354 <list_replace_at+0x7c>
    if (index < list->size / 2) {
 10052f0:	e15200ae 	cmp	r2, lr, lsr #1
 10052f4:	2a00000d 	bcs	1005330 <list_replace_at+0x58>
        for (i = 0; i < index; i++)
 10052f8:	e3520000 	cmp	r2, #0
        node = list->head;
 10052fc:	e590c004 	ldr	ip, [r0, #4]
        for (i = 0; i < index; i++)
 1005300:	0a000004 	beq	1005318 <list_replace_at+0x40>
 1005304:	e3a0e000 	mov	lr, #0
 1005308:	e28ee001 	add	lr, lr, #1
            node = node->next;
 100530c:	e59cc004 	ldr	ip, [ip, #4]
        for (i = 0; i < index; i++)
 1005310:	e152000e 	cmp	r2, lr
 1005314:	1afffffb 	bne	1005308 <list_replace_at+0x30>
        void *old  = node->data;
 1005318:	e59c2000 	ldr	r2, [ip]
        if (out)
 100531c:	e3530000 	cmp	r3, #0
        node->data = element;
 1005320:	e58c1000 	str	r1, [ip]
    return CC_OK;
 1005324:	e3a00000 	mov	r0, #0
            *out = old;
 1005328:	15832000 	strne	r2, [r3]
 100532c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        for (i = list->size - 1; i > index; i--)
 1005330:	e24ee001 	sub	lr, lr, #1
        node = list->tail;
 1005334:	e590c008 	ldr	ip, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 1005338:	e152000e 	cmp	r2, lr
 100533c:	2afffff5 	bcs	1005318 <list_replace_at+0x40>
 1005340:	e24ee001 	sub	lr, lr, #1
            node = node->prev;
 1005344:	e59cc008 	ldr	ip, [ip, #8]
        for (i = list->size - 1; i > index; i--)
 1005348:	e152000e 	cmp	r2, lr
 100534c:	1afffffb 	bne	1005340 <list_replace_at+0x68>
 1005350:	eafffff0 	b	1005318 <list_replace_at+0x40>
        return CC_ERR_OUT_OF_RANGE;
 1005354:	e3a00008 	mov	r0, #8
 1005358:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 100535c:	e3a00008 	mov	r0, #8
}
 1005360:	e12fff1e 	bx	lr

01005364 <list_get_first>:
    if (list->size == 0)
 1005364:	e5903000 	ldr	r3, [r0]
 1005368:	e3530000 	cmp	r3, #0
    *out = list->head->data;
 100536c:	15903004 	ldrne	r3, [r0, #4]
    return CC_OK;
 1005370:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1005374:	03a00007 	moveq	r0, #7
    *out = list->head->data;
 1005378:	15933000 	ldrne	r3, [r3]
 100537c:	15813000 	strne	r3, [r1]
}
 1005380:	e12fff1e 	bx	lr

01005384 <list_get_last>:
    if (list->size == 0)
 1005384:	e5903000 	ldr	r3, [r0]
 1005388:	e3530000 	cmp	r3, #0
    *out = list->tail->data;
 100538c:	15903008 	ldrne	r3, [r0, #8]
    return CC_OK;
 1005390:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1005394:	03a00007 	moveq	r0, #7
    *out = list->tail->data;
 1005398:	15933000 	ldrne	r3, [r3]
 100539c:	15813000 	strne	r3, [r1]
}
 10053a0:	e12fff1e 	bx	lr

010053a4 <list_get_at>:
    if (!list || index >= list->size)
 10053a4:	e3500000 	cmp	r0, #0
 10053a8:	0a000019 	beq	1005414 <list_get_at+0x70>
 10053ac:	e590c000 	ldr	ip, [r0]
 10053b0:	e151000c 	cmp	r1, ip
 10053b4:	2a000016 	bcs	1005414 <list_get_at+0x70>
    if (index < list->size / 2) {
 10053b8:	e15100ac 	cmp	r1, ip, lsr #1
 10053bc:	2a00000b 	bcs	10053f0 <list_get_at+0x4c>
        for (i = 0; i < index; i++)
 10053c0:	e3510000 	cmp	r1, #0
        node = list->head;
 10053c4:	e5903004 	ldr	r3, [r0, #4]
        for (i = 0; i < index; i++)
 10053c8:	0a000004 	beq	10053e0 <list_get_at+0x3c>
 10053cc:	e3a00000 	mov	r0, #0
 10053d0:	e2800001 	add	r0, r0, #1
            node = node->next;
 10053d4:	e5933004 	ldr	r3, [r3, #4]
        for (i = 0; i < index; i++)
 10053d8:	e1510000 	cmp	r1, r0
 10053dc:	1afffffb 	bne	10053d0 <list_get_at+0x2c>
        *out = node->data;
 10053e0:	e5933000 	ldr	r3, [r3]
    return CC_OK;
 10053e4:	e3a00000 	mov	r0, #0
        *out = node->data;
 10053e8:	e5823000 	str	r3, [r2]
 10053ec:	e12fff1e 	bx	lr
        for (i = list->size - 1; i > index; i--)
 10053f0:	e24cc001 	sub	ip, ip, #1
        node = list->tail;
 10053f4:	e5903008 	ldr	r3, [r0, #8]
        for (i = list->size - 1; i > index; i--)
 10053f8:	e151000c 	cmp	r1, ip
 10053fc:	2afffff7 	bcs	10053e0 <list_get_at+0x3c>
 1005400:	e24cc001 	sub	ip, ip, #1
            node = node->prev;
 1005404:	e5933008 	ldr	r3, [r3, #8]
        for (i = list->size - 1; i > index; i--)
 1005408:	e151000c 	cmp	r1, ip
 100540c:	1afffffb 	bne	1005400 <list_get_at+0x5c>
 1005410:	eafffff2 	b	10053e0 <list_get_at+0x3c>
        return CC_ERR_OUT_OF_RANGE;
 1005414:	e3a00008 	mov	r0, #8
}
 1005418:	e12fff1e 	bx	lr

0100541c <list_reverse>:
{
 100541c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (list->size == 0 || list->size == 1)
 1005420:	e5906000 	ldr	r6, [r0]
 1005424:	e3560001 	cmp	r6, #1
 1005428:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    Node *head_old = list->head;
 100542c:	e5907004 	ldr	r7, [r0, #4]
    for (i = 0; i < list->size / 2; i++) {
 1005430:	e1a060a6 	lsr	r6, r6, #1
    Node *tail_old = list->tail;
 1005434:	e5908008 	ldr	r8, [r0, #8]
    for (i = 0; i < list->size / 2; i++) {
 1005438:	e3a04000 	mov	r4, #0
    Node *left  = list->head;
 100543c:	e1a02007 	mov	r2, r7
    Node *right = list->tail;
 1005440:	e1a03008 	mov	r3, r8
 1005444:	ea000011 	b	1005490 <list_reverse+0x74>
    Node *n1_left  = n1->prev;
 1005448:	e5925008 	ldr	r5, [r2, #8]
    if (n1_left)
 100544c:	e3550000 	cmp	r5, #0
        n1_left->next = n2;
 1005450:	15853004 	strne	r3, [r5, #4]
    if (n1_right)
 1005454:	e3510000 	cmp	r1, #0
    n2->prev = n1_left;
 1005458:	e5835008 	str	r5, [r3, #8]
        n1_right->prev = n2;
 100545c:	15813008 	strne	r3, [r1, #8]
    if (n2_left)
 1005460:	e35c0000 	cmp	ip, #0
    n2->next = n1_right;
 1005464:	e5831004 	str	r1, [r3, #4]
        n2_left->next = n1;
 1005468:	158c2004 	strne	r2, [ip, #4]
    if (n2_right)
 100546c:	e35e0000 	cmp	lr, #0
    n1->prev = n2_left;
 1005470:	e582c008 	str	ip, [r2, #8]
        n2_right->prev = n1;
 1005474:	158e2008 	strne	r2, [lr, #8]
    n1->next = n2_right;
 1005478:	e582e004 	str	lr, [r2, #4]
    for (i = 0; i < list->size / 2; i++) {
 100547c:	e2844001 	add	r4, r4, #1
        Node *tmpl = left->next;
 1005480:	e1a02001 	mov	r2, r1
    for (i = 0; i < list->size / 2; i++) {
 1005484:	e1540006 	cmp	r4, r6
        Node *tmpr = right->prev;
 1005488:	e1a0300c 	mov	r3, ip
    for (i = 0; i < list->size / 2; i++) {
 100548c:	0a000011 	beq	10054d8 <list_reverse+0xbc>
        Node *tmpl = left->next;
 1005490:	e5921004 	ldr	r1, [r2, #4]
        Node *tmpr = right->prev;
 1005494:	e593c008 	ldr	ip, [r3, #8]
    if (n1->next == n2 || n2->next == n1) {
 1005498:	e593e004 	ldr	lr, [r3, #4]
 100549c:	e1510003 	cmp	r1, r3
 10054a0:	0a00000f 	beq	10054e4 <list_reverse+0xc8>
 10054a4:	e15e0002 	cmp	lr, r2
 10054a8:	1affffe6 	bne	1005448 <list_reverse+0x2c>
        if (n1->next)
 10054ac:	e3510000 	cmp	r1, #0
            n1->next->prev = n2;
 10054b0:	15813008 	strne	r3, [r1, #8]
        Node *tmpr = right->prev;
 10054b4:	01a0e00c 	moveq	lr, ip
        n2->next = n1->next;
 10054b8:	1593e008 	ldrne	lr, [r3, #8]
 10054bc:	e5831004 	str	r1, [r3, #4]
        if (n2->prev)
 10054c0:	e35e0000 	cmp	lr, #0
            n2->prev->next = n1;
 10054c4:	158e2004 	strne	r2, [lr, #4]
        n1->prev = n2->prev;
 10054c8:	e582e008 	str	lr, [r2, #8]
        n2->prev = n1;
 10054cc:	e5832008 	str	r2, [r3, #8]
        n1->next = n2;
 10054d0:	e5823004 	str	r3, [r2, #4]
        return;
 10054d4:	eaffffe8 	b	100547c <list_reverse+0x60>
    list->head = tail_old;
 10054d8:	e5808004 	str	r8, [r0, #4]
    list->tail = head_old;
 10054dc:	e5807008 	str	r7, [r0, #8]
}
 10054e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (n2->next)
 10054e4:	e35e0000 	cmp	lr, #0
            n2->next->prev = n1;
 10054e8:	158e2008 	strne	r2, [lr, #8]
        if (n1->prev)
 10054ec:	e5925008 	ldr	r5, [r2, #8]
        n1->next = n2->next;
 10054f0:	e582e004 	str	lr, [r2, #4]
        if (n1->prev)
 10054f4:	e3550000 	cmp	r5, #0
            n1->prev->next = n2;
 10054f8:	15853004 	strne	r3, [r5, #4]
        n2->prev = n1->prev;
 10054fc:	e5835008 	str	r5, [r3, #8]
        n1->prev = n2;
 1005500:	e5823008 	str	r3, [r2, #8]
        n2->next = n1;
 1005504:	e5832004 	str	r2, [r3, #4]
        return;
 1005508:	eaffffdb 	b	100547c <list_reverse+0x60>

0100550c <list_sublist>:
    if (b > e || e >= list->size)
 100550c:	e1510002 	cmp	r1, r2
 1005510:	8a000034 	bhi	10055e8 <list_sublist+0xdc>
 1005514:	e590c000 	ldr	ip, [r0]
 1005518:	e15c0002 	cmp	ip, r2
 100551c:	9a000031 	bls	10055e8 <list_sublist+0xdc>
{
 1005520:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1005524:	e1a06000 	mov	r6, r0
    conf.mem_calloc = list->mem_calloc;
 1005528:	e590b010 	ldr	fp, [r0, #16]
 100552c:	e1a07001 	mov	r7, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 1005530:	e3a00001 	mov	r0, #1
 1005534:	e3a01018 	mov	r1, #24
 1005538:	e1a09003 	mov	r9, r3
 100553c:	e1a08002 	mov	r8, r2
    conf.mem_alloc  = list->mem_alloc;
 1005540:	e596400c 	ldr	r4, [r6, #12]
    conf.mem_free   = list->mem_free;
 1005544:	e596a014 	ldr	sl, [r6, #20]
    List *list = conf->mem_calloc(1, sizeof(List));
 1005548:	e12fff3b 	blx	fp
    if (!list)
 100554c:	e2505000 	subs	r5, r0, #0
 1005550:	0a000045 	beq	100566c <list_sublist+0x160>
    if (!list || index >= list->size)
 1005554:	e5963000 	ldr	r3, [r6]
    list->mem_alloc  = conf->mem_alloc;
 1005558:	e585400c 	str	r4, [r5, #12]
    list->mem_calloc = conf->mem_calloc;
 100555c:	e585b010 	str	fp, [r5, #16]
    if (!list || index >= list->size)
 1005560:	e1570003 	cmp	r7, r3
    list->mem_free   = conf->mem_free;
 1005564:	e585a014 	str	sl, [r5, #20]
    if (!list || index >= list->size)
 1005568:	2a000029 	bcs	1005614 <list_sublist+0x108>
    if (index < list->size / 2) {
 100556c:	e15700a3 	cmp	r7, r3, lsr #1
 1005570:	2a00001e 	bcs	10055f0 <list_sublist+0xe4>
        for (i = 0; i < index; i++)
 1005574:	e3570000 	cmp	r7, #0
        node = list->head;
 1005578:	e5966004 	ldr	r6, [r6, #4]
        for (i = 0; i < index; i++)
 100557c:	0a00005e 	beq	10056fc <list_sublist+0x1f0>
 1005580:	e3a04000 	mov	r4, #0
 1005584:	e2844001 	add	r4, r4, #1
            node = node->next;
 1005588:	e5966004 	ldr	r6, [r6, #4]
        for (i = 0; i < index; i++)
 100558c:	e1570004 	cmp	r7, r4
 1005590:	1afffffb 	bne	1005584 <list_sublist+0x78>
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005594:	e3a0a001 	mov	sl, #1
 1005598:	e3a0100c 	mov	r1, #12
 100559c:	e3a00001 	mov	r0, #1
        status = list_add(sub, node->data);
 10055a0:	e5967000 	ldr	r7, [r6]
    Node *node = list->mem_calloc(1, sizeof(Node));
 10055a4:	e12fff3b 	blx	fp
    if (node == NULL)
 10055a8:	e3500000 	cmp	r0, #0
    if (list->size > 0)
 10055ac:	e5953000 	ldr	r3, [r5]
    if (node == NULL)
 10055b0:	0a000026 	beq	1005650 <list_sublist+0x144>
    if (list->size == 0) {
 10055b4:	e3530000 	cmp	r3, #0
    node->data = element;
 10055b8:	e5807000 	str	r7, [r0]
    for (i = b; i <= e; i++) {
 10055bc:	e2844001 	add	r4, r4, #1
    list->size++;
 10055c0:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 10055c4:	1a000016 	bne	1005624 <list_sublist+0x118>
    for (i = b; i <= e; i++) {
 10055c8:	e1580004 	cmp	r8, r4
        list->head = node;
 10055cc:	e5850004 	str	r0, [r5, #4]
        list->tail = node;
 10055d0:	e5850008 	str	r0, [r5, #8]
    list->size++;
 10055d4:	e585a000 	str	sl, [r5]
        node = node->next;
 10055d8:	e5966004 	ldr	r6, [r6, #4]
    for (i = b; i <= e; i++) {
 10055dc:	3a000018 	bcc	1005644 <list_sublist+0x138>
 10055e0:	e595b010 	ldr	fp, [r5, #16]
 10055e4:	eaffffeb 	b	1005598 <list_sublist+0x8c>
        return CC_ERR_INVALID_RANGE;
 10055e8:	e3a00003 	mov	r0, #3
}
 10055ec:	e12fff1e 	bx	lr
        for (i = list->size - 1; i > index; i--)
 10055f0:	e2434001 	sub	r4, r3, #1
        node = list->tail;
 10055f4:	e5966008 	ldr	r6, [r6, #8]
        for (i = list->size - 1; i > index; i--)
 10055f8:	e1570004 	cmp	r7, r4
 10055fc:	2a00003e 	bcs	10056fc <list_sublist+0x1f0>
 1005600:	e2444001 	sub	r4, r4, #1
            node = node->prev;
 1005604:	e5966008 	ldr	r6, [r6, #8]
        for (i = list->size - 1; i > index; i--)
 1005608:	e1570004 	cmp	r7, r4
 100560c:	1afffffb 	bne	1005600 <list_sublist+0xf4>
 1005610:	eaffffdf 	b	1005594 <list_sublist+0x88>
        list->mem_free(sub);
 1005614:	e5963014 	ldr	r3, [r6, #20]
 1005618:	e12fff33 	blx	r3
        return status;
 100561c:	e3a00008 	mov	r0, #8
 1005620:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        node->prev = list->tail;
 1005624:	e5952008 	ldr	r2, [r5, #8]
    for (i = b; i <= e; i++) {
 1005628:	e1580004 	cmp	r8, r4
        node->prev = list->tail;
 100562c:	e5802008 	str	r2, [r0, #8]
        list->tail->next = node;
 1005630:	e5820004 	str	r0, [r2, #4]
        list->tail = node;
 1005634:	e5850008 	str	r0, [r5, #8]
        node = node->next;
 1005638:	e5966004 	ldr	r6, [r6, #4]
    list->size++;
 100563c:	e5853000 	str	r3, [r5]
    for (i = b; i <= e; i++) {
 1005640:	2affffe6 	bcs	10055e0 <list_sublist+0xd4>
    *out = sub;
 1005644:	e5895000 	str	r5, [r9]
    return CC_OK;
 1005648:	e3a00000 	mov	r0, #0
 100564c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (list->size > 0)
 1005650:	e3530000 	cmp	r3, #0
 1005654:	1a000006 	bne	1005674 <list_sublist+0x168>
    list->mem_free(list);
 1005658:	e1a00005 	mov	r0, r5
 100565c:	e5953014 	ldr	r3, [r5, #20]
 1005660:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1005664:	e3a00001 	mov	r0, #1
            return status;
 1005668:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_ERR_ALLOC;
 100566c:	e3a00001 	mov	r0, #1
}
 1005670:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Node *node = list->head;
 1005674:	e5953004 	ldr	r3, [r5, #4]
    while (node) {
 1005678:	e3530000 	cmp	r3, #0
 100567c:	1a00000e 	bne	10056bc <list_sublist+0x1b0>
 1005680:	ea000019 	b	10056ec <list_sublist+0x1e0>
        node->prev->next = node->next;
 1005684:	e5824004 	str	r4, [r2, #4]
    list->mem_free(node);
 1005688:	e1a00003 	mov	r0, r3
 100568c:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 1005690:	e3510000 	cmp	r1, #0
 1005694:	0a000011 	beq	10056e0 <list_sublist+0x1d4>
    list->mem_free(node);
 1005698:	e5953014 	ldr	r3, [r5, #20]
        node->next->prev = node->prev;
 100569c:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 10056a0:	e12fff33 	blx	r3
    list->size--;
 10056a4:	e5953000 	ldr	r3, [r5]
    while (node) {
 10056a8:	e3540000 	cmp	r4, #0
    list->size--;
 10056ac:	e2433001 	sub	r3, r3, #1
 10056b0:	e5853000 	str	r3, [r5]
    while (node) {
 10056b4:	0a00000c 	beq	10056ec <list_sublist+0x1e0>
        for (i = 0; i < index; i++)
 10056b8:	e1a03004 	mov	r3, r4
    if (node->prev != NULL)
 10056bc:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 10056c0:	e5934004 	ldr	r4, [r3, #4]
    if (node->prev != NULL)
 10056c4:	e3520000 	cmp	r2, #0
 10056c8:	1affffed 	bne	1005684 <list_sublist+0x178>
        Node *tmp = node->next;
 10056cc:	e1a01004 	mov	r1, r4
        list->head = node->next;
 10056d0:	e5854004 	str	r4, [r5, #4]
    if (node->next == NULL)
 10056d4:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 10056d8:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 10056dc:	1affffed 	bne	1005698 <list_sublist+0x18c>
        list->tail = node->prev;
 10056e0:	e5852008 	str	r2, [r5, #8]
    list->mem_free(node);
 10056e4:	e5953014 	ldr	r3, [r5, #20]
 10056e8:	eaffffec 	b	10056a0 <list_sublist+0x194>
        list->head = NULL;
 10056ec:	e3a03000 	mov	r3, #0
 10056f0:	e5853004 	str	r3, [r5, #4]
        list->tail = NULL;
 10056f4:	e5853008 	str	r3, [r5, #8]
        return CC_OK;
 10056f8:	eaffffd6 	b	1005658 <list_sublist+0x14c>
        for (i = list->size - 1; i > index; i--)
 10056fc:	e1a04007 	mov	r4, r7
 1005700:	eaffffa3 	b	1005594 <list_sublist+0x88>

01005704 <list_copy_shallow>:
{
 1005704:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1005708:	e1a05000 	mov	r5, r0
    conf.mem_calloc = list->mem_calloc;
 100570c:	e5906010 	ldr	r6, [r0, #16]
{
 1005710:	e1a08001 	mov	r8, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 1005714:	e3a00001 	mov	r0, #1
 1005718:	e3a01018 	mov	r1, #24
    conf.mem_alloc  = list->mem_alloc;
 100571c:	e595900c 	ldr	r9, [r5, #12]
    conf.mem_free   = list->mem_free;
 1005720:	e5957014 	ldr	r7, [r5, #20]
    List *list = conf->mem_calloc(1, sizeof(List));
 1005724:	e12fff36 	blx	r6
    if (!list)
 1005728:	e2504000 	subs	r4, r0, #0
 100572c:	0a000049 	beq	1005858 <list_copy_shallow+0x154>
    Node *node = list->head;
 1005730:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 1005734:	e584900c 	str	r9, [r4, #12]
    list->mem_calloc = conf->mem_calloc;
 1005738:	e5846010 	str	r6, [r4, #16]
    if (!node) {
 100573c:	e3550000 	cmp	r5, #0
    list->mem_free   = conf->mem_free;
 1005740:	e5847014 	str	r7, [r4, #20]
    if (!node) {
 1005744:	0a00001b 	beq	10057b8 <list_copy_shallow+0xb4>
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005748:	e3a07001 	mov	r7, #1
 100574c:	e3a0100c 	mov	r1, #12
 1005750:	e3a00001 	mov	r0, #1
        status = list_add(copy, node->data);
 1005754:	e5959000 	ldr	r9, [r5]
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005758:	e12fff36 	blx	r6
    if (node == NULL)
 100575c:	e3500000 	cmp	r0, #0
    if (list->size > 0)
 1005760:	e5943000 	ldr	r3, [r4]
    if (node == NULL)
 1005764:	0a000016 	beq	10057c4 <list_copy_shallow+0xc0>
    if (list->size == 0) {
 1005768:	e3530000 	cmp	r3, #0
    node->data = element;
 100576c:	e5809000 	str	r9, [r0]
    list->size++;
 1005770:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1005774:	1a000007 	bne	1005798 <list_copy_shallow+0x94>
        node = node->next;
 1005778:	e5955004 	ldr	r5, [r5, #4]
        list->head = node;
 100577c:	e5840004 	str	r0, [r4, #4]
        list->tail = node;
 1005780:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1005784:	e3550000 	cmp	r5, #0
    list->size++;
 1005788:	e5847000 	str	r7, [r4]
    while (node) {
 100578c:	0a000009 	beq	10057b8 <list_copy_shallow+0xb4>
 1005790:	e5946010 	ldr	r6, [r4, #16]
 1005794:	eaffffec 	b	100574c <list_copy_shallow+0x48>
        node->prev = list->tail;
 1005798:	e5942008 	ldr	r2, [r4, #8]
 100579c:	e5802008 	str	r2, [r0, #8]
        list->tail->next = node;
 10057a0:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 10057a4:	e5955004 	ldr	r5, [r5, #4]
        list->tail = node;
 10057a8:	e5840008 	str	r0, [r4, #8]
    list->size++;
 10057ac:	e5843000 	str	r3, [r4]
    while (node) {
 10057b0:	e3550000 	cmp	r5, #0
 10057b4:	1afffff5 	bne	1005790 <list_copy_shallow+0x8c>
    *out = copy;
 10057b8:	e5884000 	str	r4, [r8]
    return CC_OK;
 10057bc:	e3a00000 	mov	r0, #0
 10057c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (list->size > 0)
 10057c4:	e3530000 	cmp	r3, #0
 10057c8:	1a000004 	bne	10057e0 <list_copy_shallow+0xdc>
    list->mem_free(list);
 10057cc:	e1a00004 	mov	r0, r4
 10057d0:	e5943014 	ldr	r3, [r4, #20]
 10057d4:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10057d8:	e3a00001 	mov	r0, #1
            return status;
 10057dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    Node *node = list->head;
 10057e0:	e5943004 	ldr	r3, [r4, #4]
    while (node) {
 10057e4:	e3530000 	cmp	r3, #0
 10057e8:	1a00000e 	bne	1005828 <list_copy_shallow+0x124>
 10057ec:	ea00001b 	b	1005860 <list_copy_shallow+0x15c>
        node->prev->next = node->next;
 10057f0:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 10057f4:	e1a00003 	mov	r0, r3
 10057f8:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 10057fc:	e3510000 	cmp	r1, #0
 1005800:	0a000011 	beq	100584c <list_copy_shallow+0x148>
    list->mem_free(node);
 1005804:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1005808:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 100580c:	e12fff33 	blx	r3
    list->size--;
 1005810:	e5943000 	ldr	r3, [r4]
    while (node) {
 1005814:	e3550000 	cmp	r5, #0
    list->size--;
 1005818:	e2433001 	sub	r3, r3, #1
 100581c:	e5843000 	str	r3, [r4]
    while (node) {
 1005820:	0a00000e 	beq	1005860 <list_copy_shallow+0x15c>
{
 1005824:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 1005828:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 100582c:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 1005830:	e3520000 	cmp	r2, #0
 1005834:	1affffed 	bne	10057f0 <list_copy_shallow+0xec>
        Node *tmp = node->next;
 1005838:	e1a01005 	mov	r1, r5
        list->head = node->next;
 100583c:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 1005840:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 1005844:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 1005848:	1affffed 	bne	1005804 <list_copy_shallow+0x100>
        list->tail = node->prev;
 100584c:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 1005850:	e5943014 	ldr	r3, [r4, #20]
 1005854:	eaffffec 	b	100580c <list_copy_shallow+0x108>
        return CC_ERR_ALLOC;
 1005858:	e3a00001 	mov	r0, #1
}
 100585c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list->head = NULL;
 1005860:	e3a03000 	mov	r3, #0
 1005864:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1005868:	e5843008 	str	r3, [r4, #8]
        return CC_OK;
 100586c:	eaffffd6 	b	10057cc <list_copy_shallow+0xc8>

01005870 <list_copy_deep>:
{
 1005870:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1005874:	e1a05000 	mov	r5, r0
    conf.mem_calloc = list->mem_calloc;
 1005878:	e5907010 	ldr	r7, [r0, #16]
{
 100587c:	e1a06001 	mov	r6, r1
    List *list = conf->mem_calloc(1, sizeof(List));
 1005880:	e3a00001 	mov	r0, #1
 1005884:	e3a01018 	mov	r1, #24
{
 1005888:	e1a08002 	mov	r8, r2
    conf.mem_alloc  = list->mem_alloc;
 100588c:	e595a00c 	ldr	sl, [r5, #12]
    conf.mem_free   = list->mem_free;
 1005890:	e5959014 	ldr	r9, [r5, #20]
    List *list = conf->mem_calloc(1, sizeof(List));
 1005894:	e12fff37 	blx	r7
    if (!list)
 1005898:	e2504000 	subs	r4, r0, #0
 100589c:	0a00004b 	beq	10059d0 <list_copy_deep+0x160>
    Node *node = list->head;
 10058a0:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 10058a4:	e584a00c 	str	sl, [r4, #12]
    list->mem_calloc = conf->mem_calloc;
 10058a8:	e5847010 	str	r7, [r4, #16]
    if (!node) {
 10058ac:	e3550000 	cmp	r5, #0
    list->mem_free   = conf->mem_free;
 10058b0:	e5849014 	str	r9, [r4, #20]
    if (!node) {
 10058b4:	0a000014 	beq	100590c <list_copy_deep+0x9c>
    Node *node = list->mem_calloc(1, sizeof(Node));
 10058b8:	e3a07001 	mov	r7, #1
        status = list_add(copy, cp(node->data));
 10058bc:	e5950000 	ldr	r0, [r5]
 10058c0:	e12fff36 	blx	r6
    Node *node = list->mem_calloc(1, sizeof(Node));
 10058c4:	e5943010 	ldr	r3, [r4, #16]
        status = list_add(copy, cp(node->data));
 10058c8:	e1a09000 	mov	r9, r0
    Node *node = list->mem_calloc(1, sizeof(Node));
 10058cc:	e3a0100c 	mov	r1, #12
 10058d0:	e3a00001 	mov	r0, #1
 10058d4:	e12fff33 	blx	r3
    if (node == NULL)
 10058d8:	e3500000 	cmp	r0, #0
    if (list->size > 0)
 10058dc:	e5943000 	ldr	r3, [r4]
    if (node == NULL)
 10058e0:	0a000015 	beq	100593c <list_copy_deep+0xcc>
    if (list->size == 0) {
 10058e4:	e3530000 	cmp	r3, #0
    node->data = element;
 10058e8:	e5809000 	str	r9, [r0]
    list->size++;
 10058ec:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 10058f0:	1a000008 	bne	1005918 <list_copy_deep+0xa8>
        node = node->next;
 10058f4:	e5955004 	ldr	r5, [r5, #4]
        list->head = node;
 10058f8:	e5840004 	str	r0, [r4, #4]
        list->tail = node;
 10058fc:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1005900:	e3550000 	cmp	r5, #0
    list->size++;
 1005904:	e5847000 	str	r7, [r4]
    while (node) {
 1005908:	1affffeb 	bne	10058bc <list_copy_deep+0x4c>
    *out = copy;
 100590c:	e5884000 	str	r4, [r8]
    return CC_OK;
 1005910:	e3a00000 	mov	r0, #0
 1005914:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        node->prev = list->tail;
 1005918:	e5942008 	ldr	r2, [r4, #8]
 100591c:	e5802008 	str	r2, [r0, #8]
        list->tail->next = node;
 1005920:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 1005924:	e5955004 	ldr	r5, [r5, #4]
        list->tail = node;
 1005928:	e5840008 	str	r0, [r4, #8]
    list->size++;
 100592c:	e5843000 	str	r3, [r4]
    while (node) {
 1005930:	e3550000 	cmp	r5, #0
 1005934:	1affffe0 	bne	10058bc <list_copy_deep+0x4c>
 1005938:	eafffff3 	b	100590c <list_copy_deep+0x9c>
    if (list->size > 0)
 100593c:	e3530000 	cmp	r3, #0
 1005940:	1a000004 	bne	1005958 <list_copy_deep+0xe8>
    list->mem_free(list);
 1005944:	e1a00004 	mov	r0, r4
 1005948:	e5943014 	ldr	r3, [r4, #20]
 100594c:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1005950:	e3a00001 	mov	r0, #1
            return status;
 1005954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    Node *node = list->head;
 1005958:	e5943004 	ldr	r3, [r4, #4]
    while (node) {
 100595c:	e3530000 	cmp	r3, #0
 1005960:	1a00000e 	bne	10059a0 <list_copy_deep+0x130>
 1005964:	ea00001b 	b	10059d8 <list_copy_deep+0x168>
        node->prev->next = node->next;
 1005968:	e5825004 	str	r5, [r2, #4]
    list->mem_free(node);
 100596c:	e1a00003 	mov	r0, r3
 1005970:	e5931004 	ldr	r1, [r3, #4]
    if (node->next == NULL)
 1005974:	e3510000 	cmp	r1, #0
 1005978:	0a000011 	beq	10059c4 <list_copy_deep+0x154>
    list->mem_free(node);
 100597c:	e5943014 	ldr	r3, [r4, #20]
        node->next->prev = node->prev;
 1005980:	e5812008 	str	r2, [r1, #8]
    list->mem_free(node);
 1005984:	e12fff33 	blx	r3
    list->size--;
 1005988:	e5943000 	ldr	r3, [r4]
    while (node) {
 100598c:	e3550000 	cmp	r5, #0
    list->size--;
 1005990:	e2433001 	sub	r3, r3, #1
 1005994:	e5843000 	str	r3, [r4]
    while (node) {
 1005998:	0a00000e 	beq	10059d8 <list_copy_deep+0x168>
{
 100599c:	e1a03005 	mov	r3, r5
    if (node->prev != NULL)
 10059a0:	e5932008 	ldr	r2, [r3, #8]
        Node *tmp = node->next;
 10059a4:	e5935004 	ldr	r5, [r3, #4]
    if (node->prev != NULL)
 10059a8:	e3520000 	cmp	r2, #0
 10059ac:	1affffed 	bne	1005968 <list_copy_deep+0xf8>
        Node *tmp = node->next;
 10059b0:	e1a01005 	mov	r1, r5
        list->head = node->next;
 10059b4:	e5845004 	str	r5, [r4, #4]
    if (node->next == NULL)
 10059b8:	e3510000 	cmp	r1, #0
    list->mem_free(node);
 10059bc:	e1a00003 	mov	r0, r3
    if (node->next == NULL)
 10059c0:	1affffed 	bne	100597c <list_copy_deep+0x10c>
        list->tail = node->prev;
 10059c4:	e5842008 	str	r2, [r4, #8]
    list->mem_free(node);
 10059c8:	e5943014 	ldr	r3, [r4, #20]
 10059cc:	eaffffec 	b	1005984 <list_copy_deep+0x114>
        return CC_ERR_ALLOC;
 10059d0:	e3a00001 	mov	r0, #1
}
 10059d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list->head = NULL;
 10059d8:	e3a03000 	mov	r3, #0
 10059dc:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 10059e0:	e5843008 	str	r3, [r4, #8]
        return CC_OK;
 10059e4:	eaffffd6 	b	1005944 <list_copy_deep+0xd4>

010059e8 <list_to_array>:
{
 10059e8:	e92d4070 	push	{r4, r5, r6, lr}
 10059ec:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 10059f0:	e5900000 	ldr	r0, [r0]
 10059f4:	e3500000 	cmp	r0, #0
 10059f8:	0a000013 	beq	1005a4c <list_to_array+0x64>
    void **array = list->mem_calloc(list->size, sizeof(void*));
 10059fc:	e1a05001 	mov	r5, r1
 1005a00:	e5943010 	ldr	r3, [r4, #16]
 1005a04:	e3a01004 	mov	r1, #4
 1005a08:	e12fff33 	blx	r3
    if (!array)
 1005a0c:	e3500000 	cmp	r0, #0
 1005a10:	0a00000f 	beq	1005a54 <list_to_array+0x6c>
    for (i = 0; i < list->size; i++) {
 1005a14:	e594e000 	ldr	lr, [r4]
    Node *node = list->head;
 1005a18:	e5943004 	ldr	r3, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1005a1c:	e35e0000 	cmp	lr, #0
 1005a20:	0a000006 	beq	1005a40 <list_to_array+0x58>
 1005a24:	e080e10e 	add	lr, r0, lr, lsl #2
 1005a28:	e1a02000 	mov	r2, r0
        array[i] = node->data;
 1005a2c:	e593c000 	ldr	ip, [r3]
 1005a30:	e482c004 	str	ip, [r2], #4
    for (i = 0; i < list->size; i++) {
 1005a34:	e152000e 	cmp	r2, lr
        node     = node->next;
 1005a38:	e5933004 	ldr	r3, [r3, #4]
    for (i = 0; i < list->size; i++) {
 1005a3c:	1afffffa 	bne	1005a2c <list_to_array+0x44>
    *out = array;
 1005a40:	e5850000 	str	r0, [r5]
    return CC_OK;
 1005a44:	e3a00000 	mov	r0, #0
 1005a48:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_INVALID_RANGE;
 1005a4c:	e3a00003 	mov	r0, #3
 1005a50:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1005a54:	e3a00001 	mov	r0, #1
}
 1005a58:	e8bd8070 	pop	{r4, r5, r6, pc}

01005a5c <list_contains>:
    Node *node = list->head;
 1005a5c:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1005a60:	e3530000 	cmp	r3, #0
 1005a64:	0a000007 	beq	1005a88 <list_contains+0x2c>
    size_t e_count = 0;
 1005a68:	e3a00000 	mov	r0, #0
        if (node->data == element)
 1005a6c:	e5932000 	ldr	r2, [r3]
        node = node->next;
 1005a70:	e5933004 	ldr	r3, [r3, #4]
        if (node->data == element)
 1005a74:	e1510002 	cmp	r1, r2
            e_count++;
 1005a78:	02800001 	addeq	r0, r0, #1
    while (node) {
 1005a7c:	e3530000 	cmp	r3, #0
 1005a80:	1afffff9 	bne	1005a6c <list_contains+0x10>
 1005a84:	e12fff1e 	bx	lr
    size_t e_count = 0;
 1005a88:	e1a00003 	mov	r0, r3
}
 1005a8c:	e12fff1e 	bx	lr

01005a90 <list_contains_value>:
{
 1005a90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    Node *node = list->head;
 1005a94:	e5904004 	ldr	r4, [r0, #4]
    while (node) {
 1005a98:	e3540000 	cmp	r4, #0
 1005a9c:	0a00000c 	beq	1005ad4 <list_contains_value+0x44>
 1005aa0:	e1a06002 	mov	r6, r2
 1005aa4:	e1a05001 	mov	r5, r1
    size_t e_count = 0;
 1005aa8:	e3a07000 	mov	r7, #0
        if (cmp(node->data, element) == 0)
 1005aac:	e5940000 	ldr	r0, [r4]
 1005ab0:	e1a01005 	mov	r1, r5
 1005ab4:	e12fff36 	blx	r6
        node = node->next;
 1005ab8:	e5944004 	ldr	r4, [r4, #4]
        if (cmp(node->data, element) == 0)
 1005abc:	e3500000 	cmp	r0, #0
            e_count++;
 1005ac0:	02877001 	addeq	r7, r7, #1
    while (node) {
 1005ac4:	e3540000 	cmp	r4, #0
 1005ac8:	1afffff7 	bne	1005aac <list_contains_value+0x1c>
}
 1005acc:	e1a00007 	mov	r0, r7
 1005ad0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    size_t e_count = 0;
 1005ad4:	e1a07004 	mov	r7, r4
}
 1005ad8:	e1a00007 	mov	r0, r7
 1005adc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005ae0 <list_index_of>:
{
 1005ae0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    Node   *node = list->head;
 1005ae4:	e5904004 	ldr	r4, [r0, #4]
    while (node) {
 1005ae8:	e3540000 	cmp	r4, #0
 1005aec:	0a00000f 	beq	1005b30 <list_index_of+0x50>
 1005af0:	e1a08003 	mov	r8, r3
 1005af4:	e1a07002 	mov	r7, r2
 1005af8:	e1a06001 	mov	r6, r1
    size_t  i    = 0;
 1005afc:	e3a05000 	mov	r5, #0
 1005b00:	ea000003 	b	1005b14 <list_index_of+0x34>
        node = node->next;
 1005b04:	e5944004 	ldr	r4, [r4, #4]
        i++;
 1005b08:	e2855001 	add	r5, r5, #1
    while (node) {
 1005b0c:	e3540000 	cmp	r4, #0
 1005b10:	0a000006 	beq	1005b30 <list_index_of+0x50>
        if (cmp(node->data, element) == 0) {
 1005b14:	e1a01006 	mov	r1, r6
 1005b18:	e5940000 	ldr	r0, [r4]
 1005b1c:	e12fff37 	blx	r7
 1005b20:	e3500000 	cmp	r0, #0
 1005b24:	1afffff6 	bne	1005b04 <list_index_of+0x24>
            *index = i;
 1005b28:	e5885000 	str	r5, [r8]
            return CC_OK;
 1005b2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_ERR_OUT_OF_RANGE;
 1005b30:	e3a00008 	mov	r0, #8
}
 1005b34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005b38 <list_size>:
}
 1005b38:	e5900000 	ldr	r0, [r0]
 1005b3c:	e12fff1e 	bx	lr

01005b40 <list_sort>:
    if (list->size == 0)
 1005b40:	e5902000 	ldr	r2, [r0]
 1005b44:	e3520000 	cmp	r2, #0
 1005b48:	0a000026 	beq	1005be8 <list_sort+0xa8>
{
 1005b4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005b50:	e1a05000 	mov	r5, r0
 1005b54:	e1a07001 	mov	r7, r1
    void **array = list->mem_calloc(list->size, sizeof(void*));
 1005b58:	e1a00002 	mov	r0, r2
 1005b5c:	e3a01004 	mov	r1, #4
 1005b60:	e5953010 	ldr	r3, [r5, #16]
 1005b64:	e12fff33 	blx	r3
    if (!array)
 1005b68:	e2506000 	subs	r6, r0, #0
 1005b6c:	0a00001f 	beq	1005bf0 <list_sort+0xb0>
    Node *node = list->head;
 1005b70:	e8950012 	ldm	r5, {r1, r4}
    for (i = 0; i < list->size; i++) {
 1005b74:	e3510000 	cmp	r1, #0
 1005b78:	0a000007 	beq	1005b9c <list_sort+0x5c>
 1005b7c:	e0860101 	add	r0, r6, r1, lsl #2
 1005b80:	e1a02006 	mov	r2, r6
        array[i] = node->data;
 1005b84:	e594c000 	ldr	ip, [r4]
 1005b88:	e482c004 	str	ip, [r2], #4
    for (i = 0; i < list->size; i++) {
 1005b8c:	e1520000 	cmp	r2, r0
        node     = node->next;
 1005b90:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1005b94:	1afffffa 	bne	1005b84 <list_sort+0x44>
 1005b98:	e5954004 	ldr	r4, [r5, #4]
    qsort(elements, list->size, sizeof(void*), cmp);
 1005b9c:	e1a03007 	mov	r3, r7
 1005ba0:	e3a02004 	mov	r2, #4
 1005ba4:	e1a00006 	mov	r0, r6
 1005ba8:	fa00599b 	blx	101c21c <qsort>
    for (i = 0; i < list->size; i++) {
 1005bac:	e5951000 	ldr	r1, [r5]
 1005bb0:	e3510000 	cmp	r1, #0
 1005bb4:	10861101 	addne	r1, r6, r1, lsl #2
 1005bb8:	11a03006 	movne	r3, r6
 1005bbc:	0a000004 	beq	1005bd4 <list_sort+0x94>
        node->data = elements[i];
 1005bc0:	e4932004 	ldr	r2, [r3], #4
    for (i = 0; i < list->size; i++) {
 1005bc4:	e1530001 	cmp	r3, r1
        node->data = elements[i];
 1005bc8:	e5842000 	str	r2, [r4]
        node       = node->next;
 1005bcc:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1005bd0:	1afffffa 	bne	1005bc0 <list_sort+0x80>
    list->mem_free(elements);
 1005bd4:	e1a00006 	mov	r0, r6
 1005bd8:	e5953014 	ldr	r3, [r5, #20]
 1005bdc:	e12fff33 	blx	r3
    return CC_OK;
 1005be0:	e3a00000 	mov	r0, #0
 1005be4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_INVALID_RANGE;
 1005be8:	e3a00003 	mov	r0, #3
}
 1005bec:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1005bf0:	e3a00001 	mov	r0, #1
}
 1005bf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005bf8 <list_sort_in_place>:
    split(list, list->head, list->size, cmp);
 1005bf8:	e1a03001 	mov	r3, r1
 1005bfc:	e5902000 	ldr	r2, [r0]
 1005c00:	e5901004 	ldr	r1, [r0, #4]
 1005c04:	eafff9ee 	b	10043c4 <split>

01005c08 <list_foreach>:
{
 1005c08:	e92d4070 	push	{r4, r5, r6, lr}
    Node *n = list->head;
 1005c0c:	e5904004 	ldr	r4, [r0, #4]
    while (n) {
 1005c10:	e3540000 	cmp	r4, #0
 1005c14:	08bd8070 	popeq	{r4, r5, r6, pc}
 1005c18:	e1a05001 	mov	r5, r1
        op(n->data);
 1005c1c:	e5940000 	ldr	r0, [r4]
 1005c20:	e12fff35 	blx	r5
        n = n->next;
 1005c24:	e5944004 	ldr	r4, [r4, #4]
    while (n) {
 1005c28:	e3540000 	cmp	r4, #0
 1005c2c:	1afffffa 	bne	1005c1c <list_foreach+0x14>
 1005c30:	e8bd8070 	pop	{r4, r5, r6, pc}

01005c34 <list_filter_mut>:
    if (list_size(list) == 0)
 1005c34:	e5903000 	ldr	r3, [r0]
 1005c38:	e3530000 	cmp	r3, #0
 1005c3c:	0a00001f 	beq	1005cc0 <list_filter_mut+0x8c>
{
 1005c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005c44:	e1a07001 	mov	r7, r1
    Node *curr = list->head;
 1005c48:	e5904004 	ldr	r4, [r0, #4]
 1005c4c:	e1a06000 	mov	r6, r0
    while (curr) {
 1005c50:	e3540000 	cmp	r4, #0
 1005c54:	1a000002 	bne	1005c64 <list_filter_mut+0x30>
 1005c58:	ea000016 	b	1005cb8 <list_filter_mut+0x84>
 1005c5c:	e2554000 	subs	r4, r5, #0
 1005c60:	0a000014 	beq	1005cb8 <list_filter_mut+0x84>
        next = curr->next;
 1005c64:	e8940021 	ldm	r4, {r0, r5}
        if (!pred(curr->data)) {
 1005c68:	e12fff37 	blx	r7
 1005c6c:	e3500000 	cmp	r0, #0
 1005c70:	1afffff9 	bne	1005c5c <list_filter_mut+0x28>
    if (node->prev != NULL)
 1005c74:	e5942008 	ldr	r2, [r4, #8]
    list->mem_free(node);
 1005c78:	e1a00004 	mov	r0, r4
 1005c7c:	e5943004 	ldr	r3, [r4, #4]
    if (node->prev != NULL)
 1005c80:	e3520000 	cmp	r2, #0
        node->prev->next = node->next;
 1005c84:	15823004 	strne	r3, [r2, #4]
    if (node->prev == NULL)
 1005c88:	15943004 	ldrne	r3, [r4, #4]
        list->head = node->next;
 1005c8c:	05863004 	streq	r3, [r6, #4]
    if (node->next == NULL)
 1005c90:	e3530000 	cmp	r3, #0
        node->next->prev = node->prev;
 1005c94:	15832008 	strne	r2, [r3, #8]
        list->tail = node->prev;
 1005c98:	05862008 	streq	r2, [r6, #8]
    list->mem_free(node);
 1005c9c:	e5963014 	ldr	r3, [r6, #20]
 1005ca0:	e12fff33 	blx	r3
    list->size--;
 1005ca4:	e5963000 	ldr	r3, [r6]
    while (curr) {
 1005ca8:	e2554000 	subs	r4, r5, #0
    list->size--;
 1005cac:	e2433001 	sub	r3, r3, #1
 1005cb0:	e5863000 	str	r3, [r6]
    while (curr) {
 1005cb4:	1affffea 	bne	1005c64 <list_filter_mut+0x30>
    return CC_OK;
 1005cb8:	e3a00000 	mov	r0, #0
}
 1005cbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1005cc0:	e3a00008 	mov	r0, #8
}
 1005cc4:	e12fff1e 	bx	lr

01005cc8 <list_filter>:
    if (list_size(list) == 0)
 1005cc8:	e5903000 	ldr	r3, [r0]
 1005ccc:	e3530000 	cmp	r3, #0
 1005cd0:	0a00002f 	beq	1005d94 <list_filter+0xcc>
{
 1005cd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005cd8:	e1a06001 	mov	r6, r1
 1005cdc:	e1a04000 	mov	r4, r0
    List *list = conf->mem_calloc(1, sizeof(List));
 1005ce0:	e3a01018 	mov	r1, #24
 1005ce4:	e3a00001 	mov	r0, #1
 1005ce8:	e1a07002 	mov	r7, r2
 1005cec:	fa0051b1 	blx	101a3b8 <calloc>
    if (!list)
 1005cf0:	e2505000 	subs	r5, r0, #0
 1005cf4:	0a000028 	beq	1005d9c <list_filter+0xd4>
    Node *curr = list->head;
 1005cf8:	e5944004 	ldr	r4, [r4, #4]
    list->mem_alloc  = conf->mem_alloc;
 1005cfc:	e30a3fb9 	movw	r3, #44985	; 0xafb9
 1005d00:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1005d04:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    list->mem_alloc  = conf->mem_alloc;
 1005d08:	e585300c 	str	r3, [r5, #12]
    list->mem_free   = conf->mem_free;
 1005d0c:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    while (curr) {
 1005d10:	e3540000 	cmp	r4, #0
    list->mem_calloc = conf->mem_calloc;
 1005d14:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1005d18:	e3403101 	movt	r3, #257	; 0x101
 1005d1c:	e1c521f0 	strd	r2, [r5, #16]
    while (curr) {
 1005d20:	1a000016 	bne	1005d80 <list_filter+0xb8>
    *out = filtered;
 1005d24:	e5875000 	str	r5, [r7]
    return CC_OK;
 1005d28:	e3a00000 	mov	r0, #0
 1005d2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005d30:	e5953010 	ldr	r3, [r5, #16]
 1005d34:	e3a0100c 	mov	r1, #12
 1005d38:	e3a00001 	mov	r0, #1
            list_add(filtered, curr->data);
 1005d3c:	e5948000 	ldr	r8, [r4]
    Node *node = list->mem_calloc(1, sizeof(Node));
 1005d40:	e12fff33 	blx	r3
    if (node == NULL)
 1005d44:	e3500000 	cmp	r0, #0
 1005d48:	0a000009 	beq	1005d74 <list_filter+0xac>
    if (list->size == 0) {
 1005d4c:	e5953000 	ldr	r3, [r5]
    node->data = element;
 1005d50:	e5808000 	str	r8, [r0]
    if (list->size == 0) {
 1005d54:	e3530000 	cmp	r3, #0
    list->size++;
 1005d58:	e2833001 	add	r3, r3, #1
        node->prev = list->tail;
 1005d5c:	15952008 	ldrne	r2, [r5, #8]
        list->head = node;
 1005d60:	05850004 	streq	r0, [r5, #4]
        node->prev = list->tail;
 1005d64:	15802008 	strne	r2, [r0, #8]
        list->tail->next = node;
 1005d68:	15820004 	strne	r0, [r2, #4]
        list->tail = node;
 1005d6c:	e5850008 	str	r0, [r5, #8]
    list->size++;
 1005d70:	e5853000 	str	r3, [r5]
        curr = curr->next;
 1005d74:	e5944004 	ldr	r4, [r4, #4]
    while (curr) {
 1005d78:	e3540000 	cmp	r4, #0
 1005d7c:	0affffe8 	beq	1005d24 <list_filter+0x5c>
        if (pred(curr->data)) {
 1005d80:	e5940000 	ldr	r0, [r4]
 1005d84:	e12fff36 	blx	r6
 1005d88:	e3500000 	cmp	r0, #0
 1005d8c:	0afffff8 	beq	1005d74 <list_filter+0xac>
 1005d90:	eaffffe6 	b	1005d30 <list_filter+0x68>
        return CC_ERR_OUT_OF_RANGE;
 1005d94:	e3a00008 	mov	r0, #8
}
 1005d98:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1005d9c:	e3a00001 	mov	r0, #1
}
 1005da0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01005da4 <list_iter_init>:
    iter->next  = list->head;
 1005da4:	e5912004 	ldr	r2, [r1, #4]
    iter->index = 0;
 1005da8:	e3a03000 	mov	r3, #0
    iter->list  = list;
 1005dac:	e5801004 	str	r1, [r0, #4]
    iter->index = 0;
 1005db0:	e5803000 	str	r3, [r0]
    iter->next  = list->head;
 1005db4:	e580200c 	str	r2, [r0, #12]
    iter->last  = NULL;
 1005db8:	e5803008 	str	r3, [r0, #8]
}
 1005dbc:	e12fff1e 	bx	lr

01005dc0 <list_iter_remove>:
    if (!iter->last)
 1005dc0:	e5903008 	ldr	r3, [r0, #8]
 1005dc4:	e3530000 	cmp	r3, #0
 1005dc8:	0a00001b 	beq	1005e3c <list_iter_remove+0x7c>
    if (node->prev != NULL)
 1005dcc:	e593c008 	ldr	ip, [r3, #8]
 1005dd0:	e5932004 	ldr	r2, [r3, #4]
{
 1005dd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1005dd8:	e1a04000 	mov	r4, r0
    if (node->prev != NULL)
 1005ddc:	e35c0000 	cmp	ip, #0
    void *e = unlinkn(iter->list, iter->last);
 1005de0:	e5906004 	ldr	r6, [r0, #4]
    list->mem_free(node);
 1005de4:	e1a00003 	mov	r0, r3
 1005de8:	e1a05001 	mov	r5, r1
    void *data = node->data;
 1005dec:	e5937000 	ldr	r7, [r3]
        node->prev->next = node->next;
 1005df0:	158c2004 	strne	r2, [ip, #4]
 1005df4:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1005df8:	05862004 	streq	r2, [r6, #4]
    list->mem_free(node);
 1005dfc:	e5963014 	ldr	r3, [r6, #20]
    if (node->next == NULL)
 1005e00:	e3520000 	cmp	r2, #0
        node->next->prev = node->prev;
 1005e04:	1582c008 	strne	ip, [r2, #8]
        list->tail = node->prev;
 1005e08:	0586c008 	streq	ip, [r6, #8]
    list->mem_free(node);
 1005e0c:	e12fff33 	blx	r3
    list->size--;
 1005e10:	e5963000 	ldr	r3, [r6]
    if (out)
 1005e14:	e3550000 	cmp	r5, #0
    iter->last = NULL;
 1005e18:	e3a00000 	mov	r0, #0
    list->size--;
 1005e1c:	e2433001 	sub	r3, r3, #1
 1005e20:	e5863000 	str	r3, [r6]
    iter->last = NULL;
 1005e24:	e5840008 	str	r0, [r4, #8]
    if (out)
 1005e28:	0a000001 	beq	1005e34 <list_iter_remove+0x74>
        *out = e;
 1005e2c:	e5857000 	str	r7, [r5]
 1005e30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_OK;
 1005e34:	e1a00005 	mov	r0, r5
}
 1005e38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1005e3c:	e3a00007 	mov	r0, #7
}
 1005e40:	e12fff1e 	bx	lr

01005e44 <list_iter_add>:
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005e44:	e5903004 	ldr	r3, [r0, #4]
{
 1005e48:	e92d4070 	push	{r4, r5, r6, lr}
 1005e4c:	e1a04000 	mov	r4, r0
 1005e50:	e1a05001 	mov	r5, r1
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005e54:	e3a00001 	mov	r0, #1
 1005e58:	e3a0100c 	mov	r1, #12
 1005e5c:	e5933010 	ldr	r3, [r3, #16]
 1005e60:	e12fff33 	blx	r3
    if (!new_node)
 1005e64:	e3500000 	cmp	r0, #0
 1005e68:	0a00001c 	beq	1005ee0 <list_iter_add+0x9c>
    if (ins->next)
 1005e6c:	e5901004 	ldr	r1, [r0, #4]
 1005e70:	e5903008 	ldr	r3, [r0, #8]
    link_after(iter->last, new_node);
 1005e74:	e5942008 	ldr	r2, [r4, #8]
    if (ins->next)
 1005e78:	e3510000 	cmp	r1, #0
    new_node->data = element;
 1005e7c:	e5805000 	str	r5, [r0]
        ins->next->prev = ins->prev;
 1005e80:	15813008 	strne	r3, [r1, #8]
 1005e84:	15903008 	ldrne	r3, [r0, #8]
    if (ins->prev)
 1005e88:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1005e8c:	15831004 	strne	r1, [r3, #4]
    if (!base->next) {
 1005e90:	e5923004 	ldr	r3, [r2, #4]
    if (iter->index == iter->list->size)
 1005e94:	e5941004 	ldr	r1, [r4, #4]
    if (!base->next) {
 1005e98:	e3530000 	cmp	r3, #0
        ins->prev       = base;
 1005e9c:	05802008 	streq	r2, [r0, #8]
        ins->next       = base->next;
 1005ea0:	15803004 	strne	r3, [r0, #4]
        base->next      = ins;
 1005ea4:	05820004 	streq	r0, [r2, #4]
        ins->next->prev = ins;
 1005ea8:	15830008 	strne	r0, [r3, #8]
        ins->next       = NULL;
 1005eac:	05803004 	streq	r3, [r0, #4]
        ins->prev       = base;
 1005eb0:	15802008 	strne	r2, [r0, #8]
    if (iter->index == iter->list->size)
 1005eb4:	e5943000 	ldr	r3, [r4]
        base->next      = ins;
 1005eb8:	15820004 	strne	r0, [r2, #4]
    if (iter->index == iter->list->size)
 1005ebc:	e5912000 	ldr	r2, [r1]
 1005ec0:	e1530002 	cmp	r3, r2
    iter->list->size++;
 1005ec4:	e2822001 	add	r2, r2, #1
    iter->index++;
 1005ec8:	e2833001 	add	r3, r3, #1
        iter->list->tail = new_node;
 1005ecc:	05810008 	streq	r0, [r1, #8]
    iter->list->size++;
 1005ed0:	e5812000 	str	r2, [r1]
    return CC_OK;
 1005ed4:	e3a00000 	mov	r0, #0
    iter->index++;
 1005ed8:	e5843000 	str	r3, [r4]
    return CC_OK;
 1005edc:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1005ee0:	e3a00001 	mov	r0, #1
}
 1005ee4:	e8bd8070 	pop	{r4, r5, r6, pc}

01005ee8 <list_iter_replace>:
    if (!iter->last)
 1005ee8:	e5903008 	ldr	r3, [r0, #8]
 1005eec:	e3530000 	cmp	r3, #0
 1005ef0:	0a000005 	beq	1005f0c <list_iter_replace+0x24>
    void *old = iter->last->data;
 1005ef4:	e5930000 	ldr	r0, [r3]
    if (out)
 1005ef8:	e3520000 	cmp	r2, #0
    iter->last->data = element;
 1005efc:	e5831000 	str	r1, [r3]
        *out = old;
 1005f00:	15820000 	strne	r0, [r2]
    return CC_OK;
 1005f04:	e3a00000 	mov	r0, #0
 1005f08:	e12fff1e 	bx	lr
        return CC_ERR_VALUE_NOT_FOUND;
 1005f0c:	e3a00007 	mov	r0, #7
 1005f10:	e12fff1e 	bx	lr

01005f14 <list_iter_index>:
    return iter->index - 1;
 1005f14:	e5900000 	ldr	r0, [r0]
}
 1005f18:	e2400001 	sub	r0, r0, #1
 1005f1c:	e12fff1e 	bx	lr

01005f20 <list_iter_next>:
    if (!iter->next)
 1005f20:	e590200c 	ldr	r2, [r0, #12]
 1005f24:	e3520000 	cmp	r2, #0
 1005f28:	0a00000b 	beq	1005f5c <list_iter_next+0x3c>
    iter->index++;
 1005f2c:	e590c000 	ldr	ip, [r0]
 1005f30:	e1a03000 	mov	r3, r0
{
 1005f34:	e92d4010 	push	{r4, lr}
    return CC_OK;
 1005f38:	e3a00000 	mov	r0, #0
    void *data = iter->next->data;
 1005f3c:	e592e000 	ldr	lr, [r2]
    iter->index++;
 1005f40:	e28cc001 	add	ip, ip, #1
    iter->next = iter->next->next;
 1005f44:	e5924004 	ldr	r4, [r2, #4]
    iter->last = iter->next;
 1005f48:	e5832008 	str	r2, [r3, #8]
    iter->index++;
 1005f4c:	e583c000 	str	ip, [r3]
    iter->next = iter->next->next;
 1005f50:	e583400c 	str	r4, [r3, #12]
    *out = data;
 1005f54:	e581e000 	str	lr, [r1]
}
 1005f58:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 1005f5c:	e3a00009 	mov	r0, #9
}
 1005f60:	e12fff1e 	bx	lr

01005f64 <list_diter_init>:
    iter->index = list->size;
 1005f64:	e591c000 	ldr	ip, [r1]
    iter->last  = NULL;
 1005f68:	e3a03000 	mov	r3, #0
    iter->next  = list->tail;
 1005f6c:	e5912008 	ldr	r2, [r1, #8]
    iter->list  = list;
 1005f70:	e5801004 	str	r1, [r0, #4]
    iter->index = list->size;
 1005f74:	e580c000 	str	ip, [r0]
    iter->next  = list->tail;
 1005f78:	e580200c 	str	r2, [r0, #12]
    iter->last  = NULL;
 1005f7c:	e5803008 	str	r3, [r0, #8]
}
 1005f80:	e12fff1e 	bx	lr

01005f84 <list_diter_add>:
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005f84:	e5903004 	ldr	r3, [r0, #4]
{
 1005f88:	e92d4070 	push	{r4, r5, r6, lr}
 1005f8c:	e1a04000 	mov	r4, r0
 1005f90:	e1a05001 	mov	r5, r1
    Node *new_node = iter->list->mem_calloc(1, sizeof(Node));
 1005f94:	e3a00001 	mov	r0, #1
 1005f98:	e3a0100c 	mov	r1, #12
 1005f9c:	e5933010 	ldr	r3, [r3, #16]
 1005fa0:	e12fff33 	blx	r3
    if (!new_node)
 1005fa4:	e2503000 	subs	r3, r0, #0
 1005fa8:	0a000018 	beq	1006010 <list_diter_add+0x8c>
    if (iter->index == 0)
 1005fac:	e5942000 	ldr	r2, [r4]
 1005fb0:	e594c004 	ldr	ip, [r4, #4]
    if (ins->next != NULL)
 1005fb4:	e5930004 	ldr	r0, [r3, #4]
    if (iter->index == 0)
 1005fb8:	e3520000 	cmp	r2, #0
 1005fbc:	e5932008 	ldr	r2, [r3, #8]
    new_node->data = element;
 1005fc0:	e5835000 	str	r5, [r3]
        iter->list->head = new_node;
 1005fc4:	058c3004 	streq	r3, [ip, #4]
    if (ins->next != NULL)
 1005fc8:	e3500000 	cmp	r0, #0
    link_behind(iter->last, new_node);
 1005fcc:	e5941008 	ldr	r1, [r4, #8]
        ins->next->prev = ins->prev;
 1005fd0:	15802008 	strne	r2, [r0, #8]
 1005fd4:	15932008 	ldrne	r2, [r3, #8]
    if (ins->prev != NULL)
 1005fd8:	e3520000 	cmp	r2, #0
        ins->prev->next = ins->next;
 1005fdc:	15820004 	strne	r0, [r2, #4]
    return CC_OK;
 1005fe0:	e3a00000 	mov	r0, #0
    if (base->prev == NULL) {
 1005fe4:	e5912008 	ldr	r2, [r1, #8]
 1005fe8:	e3520000 	cmp	r2, #0
        ins->prev       = NULL;
 1005fec:	e5832008 	str	r2, [r3, #8]
        ins->prev->next = ins;
 1005ff0:	15823004 	strne	r3, [r2, #4]
    iter->list->size++;
 1005ff4:	e59c2000 	ldr	r2, [ip]
        ins->next       = base;
 1005ff8:	e5831004 	str	r1, [r3, #4]
        base->prev      = ins;
 1005ffc:	e5813008 	str	r3, [r1, #8]
    iter->list->size++;
 1006000:	e2822001 	add	r2, r2, #1
 1006004:	e58c2000 	str	r2, [ip]
    iter->last = new_node;
 1006008:	e5843008 	str	r3, [r4, #8]
    return CC_OK;
 100600c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1006010:	e3a00001 	mov	r0, #1
}
 1006014:	e8bd8070 	pop	{r4, r5, r6, pc}

01006018 <list_diter_remove>:
 1006018:	e5903008 	ldr	r3, [r0, #8]
 100601c:	e3530000 	cmp	r3, #0
 1006020:	0a00001b 	beq	1006094 <list_diter_remove+0x7c>
 1006024:	e593c008 	ldr	ip, [r3, #8]
 1006028:	e5932004 	ldr	r2, [r3, #4]
 100602c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006030:	e1a04000 	mov	r4, r0
 1006034:	e35c0000 	cmp	ip, #0
 1006038:	e5906004 	ldr	r6, [r0, #4]
 100603c:	e1a00003 	mov	r0, r3
 1006040:	e1a05001 	mov	r5, r1
 1006044:	e5937000 	ldr	r7, [r3]
 1006048:	158c2004 	strne	r2, [ip, #4]
 100604c:	15932004 	ldrne	r2, [r3, #4]
 1006050:	05862004 	streq	r2, [r6, #4]
 1006054:	e5963014 	ldr	r3, [r6, #20]
 1006058:	e3520000 	cmp	r2, #0
 100605c:	1582c008 	strne	ip, [r2, #8]
 1006060:	0586c008 	streq	ip, [r6, #8]
 1006064:	e12fff33 	blx	r3
 1006068:	e5963000 	ldr	r3, [r6]
 100606c:	e3550000 	cmp	r5, #0
 1006070:	e3a00000 	mov	r0, #0
 1006074:	e2433001 	sub	r3, r3, #1
 1006078:	e5863000 	str	r3, [r6]
 100607c:	e5840008 	str	r0, [r4, #8]
 1006080:	0a000001 	beq	100608c <list_diter_remove+0x74>
 1006084:	e5857000 	str	r7, [r5]
 1006088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 100608c:	e1a00005 	mov	r0, r5
 1006090:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1006094:	e3a00007 	mov	r0, #7
 1006098:	e12fff1e 	bx	lr

0100609c <list_diter_replace>:
 100609c:	e5903008 	ldr	r3, [r0, #8]
 10060a0:	e3530000 	cmp	r3, #0
 10060a4:	0a000005 	beq	10060c0 <list_diter_replace+0x24>
 10060a8:	e5930000 	ldr	r0, [r3]
 10060ac:	e3520000 	cmp	r2, #0
 10060b0:	e5831000 	str	r1, [r3]
 10060b4:	15820000 	strne	r0, [r2]
 10060b8:	e3a00000 	mov	r0, #0
 10060bc:	e12fff1e 	bx	lr
 10060c0:	e3a00007 	mov	r0, #7
 10060c4:	e12fff1e 	bx	lr

010060c8 <list_diter_index>:
 10060c8:	e5900000 	ldr	r0, [r0]
 10060cc:	e2400001 	sub	r0, r0, #1
 10060d0:	e12fff1e 	bx	lr

010060d4 <list_diter_next>:
    if (!iter->next)
 10060d4:	e590200c 	ldr	r2, [r0, #12]
 10060d8:	e3520000 	cmp	r2, #0
 10060dc:	0a00000b 	beq	1006110 <list_diter_next+0x3c>
    iter->index--;
 10060e0:	e590c000 	ldr	ip, [r0]
 10060e4:	e1a03000 	mov	r3, r0
{
 10060e8:	e92d4010 	push	{r4, lr}
    return CC_OK;
 10060ec:	e3a00000 	mov	r0, #0
    void *data = iter->next->data;
 10060f0:	e592e000 	ldr	lr, [r2]
    iter->index--;
 10060f4:	e24cc001 	sub	ip, ip, #1
    iter->next = iter->next->prev;
 10060f8:	e5924008 	ldr	r4, [r2, #8]
    iter->last = iter->next;
 10060fc:	e5832008 	str	r2, [r3, #8]
    iter->index--;
 1006100:	e583c000 	str	ip, [r3]
    iter->next = iter->next->prev;
 1006104:	e583400c 	str	r4, [r3, #12]
    *out = data;
 1006108:	e581e000 	str	lr, [r1]
}
 100610c:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 1006110:	e3a00009 	mov	r0, #9
}
 1006114:	e12fff1e 	bx	lr

01006118 <list_zip_iter_init>:
    iter->l2_next = l2->head;
 1006118:	e592c004 	ldr	ip, [r2, #4]
    iter->index   = 0;
 100611c:	e3a03000 	mov	r3, #0
{
 1006120:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    iter->l1_next = l1->head;
 1006124:	e591e004 	ldr	lr, [r1, #4]
    iter->l1      = l1;
 1006128:	e5801000 	str	r1, [r0]
    iter->l1_next = l1->head;
 100612c:	e580e010 	str	lr, [r0, #16]
    iter->l2      = l2;
 1006130:	e5802004 	str	r2, [r0, #4]
    iter->l2_next = l2->head;
 1006134:	e580c014 	str	ip, [r0, #20]
    iter->index   = 0;
 1006138:	e5803018 	str	r3, [r0, #24]
    iter->l1_last = NULL;
 100613c:	e5803008 	str	r3, [r0, #8]
    iter->l2_last = NULL;
 1006140:	e580300c 	str	r3, [r0, #12]
}
 1006144:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01006148 <list_zip_iter_next>:
    if (!iter->l1_next || !iter->l2_next)
 1006148:	e590c010 	ldr	ip, [r0, #16]
 100614c:	e35c0000 	cmp	ip, #0
 1006150:	0a000013 	beq	10061a4 <list_zip_iter_next+0x5c>
{
 1006154:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1006158:	e1a03000 	mov	r3, r0
    if (!iter->l1_next || !iter->l2_next)
 100615c:	e590e014 	ldr	lr, [r0, #20]
 1006160:	e35e0000 	cmp	lr, #0
 1006164:	0a000010 	beq	10061ac <list_zip_iter_next+0x64>
    iter->index++;
 1006168:	e5904018 	ldr	r4, [r0, #24]
    return CC_OK;
 100616c:	e3a00000 	mov	r0, #0
    void *data1 = iter->l1_next->data;
 1006170:	e59c6000 	ldr	r6, [ip]
    iter->l1_next = iter->l1_next->next;
 1006174:	e59c7004 	ldr	r7, [ip, #4]
    void *data2 = iter->l2_next->data;
 1006178:	e59e5000 	ldr	r5, [lr]
    iter->index++;
 100617c:	e2844001 	add	r4, r4, #1
    iter->l1_last = iter->l1_next;
 1006180:	e583c008 	str	ip, [r3, #8]
    iter->l2_next = iter->l2_next->next;
 1006184:	e59ec004 	ldr	ip, [lr, #4]
    iter->l1_next = iter->l1_next->next;
 1006188:	e5837010 	str	r7, [r3, #16]
    iter->l2_last = iter->l2_next;
 100618c:	e583e00c 	str	lr, [r3, #12]
    iter->index++;
 1006190:	e5834018 	str	r4, [r3, #24]
    iter->l2_next = iter->l2_next->next;
 1006194:	e583c014 	str	ip, [r3, #20]
    *out1 = data1;
 1006198:	e5816000 	str	r6, [r1]
    *out2 = data2;
 100619c:	e5825000 	str	r5, [r2]
    return CC_OK;
 10061a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ITER_END;
 10061a4:	e3a00009 	mov	r0, #9
}
 10061a8:	e12fff1e 	bx	lr
        return CC_ITER_END;
 10061ac:	e3a00009 	mov	r0, #9
}
 10061b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

010061b4 <list_zip_iter_add>:
    Node *new_node1 = iter->l1->mem_calloc(1, sizeof(Node));
 10061b4:	e5903000 	ldr	r3, [r0]
{
 10061b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10061bc:	e1a04000 	mov	r4, r0
 10061c0:	e1a07001 	mov	r7, r1
    Node *new_node1 = iter->l1->mem_calloc(1, sizeof(Node));
 10061c4:	e3a00001 	mov	r0, #1
 10061c8:	e3a0100c 	mov	r1, #12
{
 10061cc:	e1a06002 	mov	r6, r2
    Node *new_node1 = iter->l1->mem_calloc(1, sizeof(Node));
 10061d0:	e5933010 	ldr	r3, [r3, #16]
 10061d4:	e12fff33 	blx	r3
    if (!new_node1)
 10061d8:	e2505000 	subs	r5, r0, #0
 10061dc:	0a00003c 	beq	10062d4 <list_zip_iter_add+0x120>
    Node *new_node2 = iter->l2->mem_calloc(1, sizeof(Node));
 10061e0:	e5943004 	ldr	r3, [r4, #4]
 10061e4:	e3a0100c 	mov	r1, #12
 10061e8:	e3a00001 	mov	r0, #1
 10061ec:	e5933010 	ldr	r3, [r3, #16]
 10061f0:	e12fff33 	blx	r3
    if (!new_node2) {
 10061f4:	e3500000 	cmp	r0, #0
 10061f8:	0a000037 	beq	10062dc <list_zip_iter_add+0x128>
    if (ins->next)
 10061fc:	e5951004 	ldr	r1, [r5, #4]
 1006200:	e5953008 	ldr	r3, [r5, #8]
    link_after(iter->l1_last, new_node1);
 1006204:	e5942008 	ldr	r2, [r4, #8]
    if (ins->next)
 1006208:	e3510000 	cmp	r1, #0
    new_node1->data = e1;
 100620c:	e5857000 	str	r7, [r5]
    new_node2->data = e2;
 1006210:	e5806000 	str	r6, [r0]
        ins->next->prev = ins->prev;
 1006214:	15813008 	strne	r3, [r1, #8]
 1006218:	15953008 	ldrne	r3, [r5, #8]
    if (iter->index == iter->l1->size)
 100621c:	e594c000 	ldr	ip, [r4]
    if (ins->prev)
 1006220:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1006224:	15831004 	strne	r1, [r3, #4]
    if (!base->next) {
 1006228:	e5923004 	ldr	r3, [r2, #4]
 100622c:	e3530000 	cmp	r3, #0
        ins->next       = base->next;
 1006230:	15853004 	strne	r3, [r5, #4]
        ins->prev       = base;
 1006234:	05852008 	streq	r2, [r5, #8]
        ins->next->prev = ins;
 1006238:	15835008 	strne	r5, [r3, #8]
        base->next      = ins;
 100623c:	05825004 	streq	r5, [r2, #4]
        ins->prev       = base;
 1006240:	15852008 	strne	r2, [r5, #8]
        ins->next       = NULL;
 1006244:	05853004 	streq	r3, [r5, #4]
        base->next      = ins;
 1006248:	15825004 	strne	r5, [r2, #4]
    if (ins->next)
 100624c:	e5901004 	ldr	r1, [r0, #4]
 1006250:	e5903008 	ldr	r3, [r0, #8]
    link_after(iter->l2_last, new_node2);
 1006254:	e594200c 	ldr	r2, [r4, #12]
    if (ins->next)
 1006258:	e3510000 	cmp	r1, #0
        ins->next->prev = ins->prev;
 100625c:	15813008 	strne	r3, [r1, #8]
 1006260:	15903008 	ldrne	r3, [r0, #8]
    if (ins->prev)
 1006264:	e3530000 	cmp	r3, #0
        ins->prev->next = ins->next;
 1006268:	15831004 	strne	r1, [r3, #4]
    if (!base->next) {
 100626c:	e5923004 	ldr	r3, [r2, #4]
 1006270:	e3530000 	cmp	r3, #0
        ins->next       = base->next;
 1006274:	15803004 	strne	r3, [r0, #4]
        ins->prev       = base;
 1006278:	05802008 	streq	r2, [r0, #8]
        ins->next->prev = ins;
 100627c:	15830008 	strne	r0, [r3, #8]
        base->next      = ins;
 1006280:	05820004 	streq	r0, [r2, #4]
        ins->prev       = base;
 1006284:	15802008 	strne	r2, [r0, #8]
        ins->next       = NULL;
 1006288:	05803004 	streq	r3, [r0, #4]
        base->next      = ins;
 100628c:	15820004 	strne	r0, [r2, #4]
    if (iter->index == iter->l1->size)
 1006290:	e5943018 	ldr	r3, [r4, #24]
 1006294:	e59c2000 	ldr	r2, [ip]
    if (iter->index == iter->l2->size)
 1006298:	e5941004 	ldr	r1, [r4, #4]
    if (iter->index == iter->l1->size)
 100629c:	e1530002 	cmp	r3, r2
    iter->l1->size++;
 10062a0:	e2822001 	add	r2, r2, #1
    if (iter->index == iter->l2->size)
 10062a4:	e591e000 	ldr	lr, [r1]
        iter->l1->tail = new_node1;
 10062a8:	058c5008 	streq	r5, [ip, #8]
    if (iter->index == iter->l2->size)
 10062ac:	e153000e 	cmp	r3, lr
    iter->index++;
 10062b0:	e2833001 	add	r3, r3, #1
        iter->l2->tail = new_node2;
 10062b4:	05810008 	streq	r0, [r1, #8]
    return CC_OK;
 10062b8:	e3a00000 	mov	r0, #0
    iter->l1->size++;
 10062bc:	e58c2000 	str	r2, [ip]
    iter->l2->size++;
 10062c0:	e5912000 	ldr	r2, [r1]
 10062c4:	e2822001 	add	r2, r2, #1
 10062c8:	e5812000 	str	r2, [r1]
    iter->index++;
 10062cc:	e5843018 	str	r3, [r4, #24]
    return CC_OK;
 10062d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 10062d4:	e3a00001 	mov	r0, #1
}
 10062d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        iter->l1->mem_free(new_node1);
 10062dc:	e5943000 	ldr	r3, [r4]
 10062e0:	e1a00005 	mov	r0, r5
 10062e4:	e5933014 	ldr	r3, [r3, #20]
 10062e8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10062ec:	e3a00001 	mov	r0, #1
 10062f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010062f4 <list_zip_iter_remove>:
    if (!iter->l1_last || !iter->l2_last)
 10062f4:	e5903008 	ldr	r3, [r0, #8]
 10062f8:	e3530000 	cmp	r3, #0
 10062fc:	0a000031 	beq	10063c8 <list_zip_iter_remove+0xd4>
 1006300:	e590c00c 	ldr	ip, [r0, #12]
 1006304:	e35c0000 	cmp	ip, #0
 1006308:	0a00002e 	beq	10063c8 <list_zip_iter_remove+0xd4>
{
 100630c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1006310:	e1a04000 	mov	r4, r0
    if (node->prev != NULL)
 1006314:	e593e008 	ldr	lr, [r3, #8]
 1006318:	e1a05002 	mov	r5, r2
 100631c:	e1a06001 	mov	r6, r1
 1006320:	e593c004 	ldr	ip, [r3, #4]
 1006324:	e35e0000 	cmp	lr, #0
    void *e1 = unlinkn(iter->l1, iter->l1_last);
 1006328:	e5908000 	ldr	r8, [r0]
    void *data = node->data;
 100632c:	e5937000 	ldr	r7, [r3]
    list->mem_free(node);
 1006330:	e1a00003 	mov	r0, r3
        node->prev->next = node->next;
 1006334:	158ec004 	strne	ip, [lr, #4]
 1006338:	1593c004 	ldrne	ip, [r3, #4]
        list->head = node->next;
 100633c:	0588c004 	streq	ip, [r8, #4]
    list->mem_free(node);
 1006340:	e5983014 	ldr	r3, [r8, #20]
    if (node->next == NULL)
 1006344:	e35c0000 	cmp	ip, #0
        list->tail = node->prev;
 1006348:	0588e008 	streq	lr, [r8, #8]
        node->next->prev = node->prev;
 100634c:	158ce008 	strne	lr, [ip, #8]
    list->mem_free(node);
 1006350:	e12fff33 	blx	r3
    void *e2 = unlinkn(iter->l2, iter->l2_last);
 1006354:	e594000c 	ldr	r0, [r4, #12]
    list->size--;
 1006358:	e5983000 	ldr	r3, [r8]
    void *e2 = unlinkn(iter->l2, iter->l2_last);
 100635c:	e5949004 	ldr	r9, [r4, #4]
    if (node->prev != NULL)
 1006360:	e5902008 	ldr	r2, [r0, #8]
    list->size--;
 1006364:	e2433001 	sub	r3, r3, #1
 1006368:	e5883000 	str	r3, [r8]
        node->prev->next = node->next;
 100636c:	e5903004 	ldr	r3, [r0, #4]
    if (node->prev != NULL)
 1006370:	e3520000 	cmp	r2, #0
    void *data = node->data;
 1006374:	e5908000 	ldr	r8, [r0]
        node->prev->next = node->next;
 1006378:	15823004 	strne	r3, [r2, #4]
 100637c:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 1006380:	05893004 	streq	r3, [r9, #4]
    if (node->next == NULL)
 1006384:	e3530000 	cmp	r3, #0
        node->next->prev = node->prev;
 1006388:	15832008 	strne	r2, [r3, #8]
        list->tail = node->prev;
 100638c:	05892008 	streq	r2, [r9, #8]
    list->mem_free(node);
 1006390:	e5993014 	ldr	r3, [r9, #20]
 1006394:	e12fff33 	blx	r3
    list->size--;
 1006398:	e5993000 	ldr	r3, [r9]
    if (out1)
 100639c:	e3560000 	cmp	r6, #0
    iter->l1_last = NULL;
 10063a0:	e3a02000 	mov	r2, #0
    return CC_OK;
 10063a4:	e3a00000 	mov	r0, #0
    list->size--;
 10063a8:	e2433001 	sub	r3, r3, #1
 10063ac:	e5893000 	str	r3, [r9]
    iter->l1_last = NULL;
 10063b0:	e5842008 	str	r2, [r4, #8]
    iter->l2_last = NULL;
 10063b4:	e584200c 	str	r2, [r4, #12]
        *out1 = e1;
 10063b8:	15867000 	strne	r7, [r6]
    if (out2)
 10063bc:	e3550000 	cmp	r5, #0
        *out2 = e2;
 10063c0:	15858000 	strne	r8, [r5]
 10063c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10063c8:	e3a00007 	mov	r0, #7
}
 10063cc:	e12fff1e 	bx	lr

010063d0 <list_zip_iter_replace>:
{
 10063d0:	e92d4030 	push	{r4, r5, lr}
    if (!iter->l1_last || !iter->l2_last)
 10063d4:	e590e008 	ldr	lr, [r0, #8]
{
 10063d8:	e59dc00c 	ldr	ip, [sp, #12]
    if (!iter->l1_last || !iter->l2_last)
 10063dc:	e35e0000 	cmp	lr, #0
 10063e0:	0a00000c 	beq	1006418 <list_zip_iter_replace+0x48>
 10063e4:	e590000c 	ldr	r0, [r0, #12]
 10063e8:	e3500000 	cmp	r0, #0
 10063ec:	0a000009 	beq	1006418 <list_zip_iter_replace+0x48>
    void *old1 = iter->l1_last->data;
 10063f0:	e59e5000 	ldr	r5, [lr]
    if (out1)
 10063f4:	e3530000 	cmp	r3, #0
    void *old2 = iter->l2_last->data;
 10063f8:	e5904000 	ldr	r4, [r0]
    iter->l1_last->data = e1;
 10063fc:	e58e1000 	str	r1, [lr]
    iter->l2_last->data = e2;
 1006400:	e5802000 	str	r2, [r0]
    return CC_OK;
 1006404:	e3a00000 	mov	r0, #0
        *out1 = old1;
 1006408:	15835000 	strne	r5, [r3]
    if (out2)
 100640c:	e35c0000 	cmp	ip, #0
        *out2 = old2;
 1006410:	158c4000 	strne	r4, [ip]
 1006414:	e8bd8030 	pop	{r4, r5, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1006418:	e3a00007 	mov	r0, #7
 100641c:	e8bd8030 	pop	{r4, r5, pc}

01006420 <list_zip_iter_index>:
    return iter->index - 1;
 1006420:	e5900018 	ldr	r0, [r0, #24]
}
 1006424:	e2400001 	sub	r0, r0, #1
 1006428:	e12fff1e 	bx	lr

0100642c <pqueue_conf_init>:
 * @param[in, out] conf PQueueConf structure that is being initialized
 * @param[in] comp The comparator function required for PQueue
 */
void pqueue_conf_init(PQueueConf *conf, int (*cmp)(const void *, const void *))
{
    conf->mem_alloc  = malloc;
 100642c:	e30acfb9 	movw	ip, #44985	; 0xafb9
    conf->mem_calloc = calloc;
 1006430:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 1006434:	e30a3fc9 	movw	r3, #45001	; 0xafc9
{
 1006438:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    conf->mem_alloc  = malloc;
 100643c:	e340c101 	movt	ip, #257	; 0x101
    conf->cmp        = cmp;
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 1006440:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
    conf->mem_calloc = calloc;
 1006444:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1006448:	e3403101 	movt	r3, #257	; 0x101
    conf->cmp        = cmp;
 100644c:	e5801008 	str	r1, [r0, #8]
    conf->capacity   = DEFAULT_CAPACITY;
 1006450:	e3a01008 	mov	r1, #8
    conf->mem_alloc  = malloc;
 1006454:	e580c00c 	str	ip, [r0, #12]
    conf->mem_free   = free;
 1006458:	e1c021f0 	strd	r2, [r0, #16]
    conf->exp_factor = DEFAULT_EXPANSION_FACTOR;
 100645c:	e580e004 	str	lr, [r0, #4]
    conf->capacity   = DEFAULT_CAPACITY;
 1006460:	e5801000 	str	r1, [r0]
}
 1006464:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01006468 <pqueue_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new PQueue structure failed.
 */
enum cc_stat pqueue_new(PQueue **out, int (*cmp)(const void*, const void*))
{
 1006468:	e92d4070 	push	{r4, r5, r6, lr}
 100646c:	e1a05000 	mov	r5, r0
 1006470:	e1a06001 	mov	r6, r1
    /* Needed to avoid an integer overflow on the first resize and
     * to easily check for any future overflows. */
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
        return CC_ERR_INVALID_CAPACITY;

    PQueue *pq = conf->mem_calloc(1, sizeof(PQueue));
 1006474:	e3a00001 	mov	r0, #1
 1006478:	e3a01020 	mov	r1, #32
 100647c:	fa004fcd 	blx	101a3b8 <calloc>

    if (!pq)
 1006480:	e2504000 	subs	r4, r0, #0
 1006484:	0a000018 	beq	10064ec <pqueue_new+0x84>
        return CC_ERR_ALLOC;

    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 1006488:	e3a00020 	mov	r0, #32
 100648c:	fa0052c9 	blx	101afb8 <malloc>

    if (!buff) {
 1006490:	e3500000 	cmp	r0, #0
 1006494:	0a000010 	beq	10064dc <pqueue_new+0x74>
        conf->mem_free(pq);
        return CC_ERR_ALLOC;
    }

    pq->mem_alloc  = conf->mem_alloc;
 1006498:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    pq->mem_calloc = conf->mem_calloc;
 100649c:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    pq->mem_free   = conf->mem_free;
 10064a0:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    pq->mem_alloc  = conf->mem_alloc;
 10064a4:	e3401101 	movt	r1, #257	; 0x101
    pq->mem_calloc = conf->mem_calloc;
 10064a8:	e3402101 	movt	r2, #257	; 0x101
    pq->mem_free   = conf->mem_free;
 10064ac:	e3403101 	movt	r3, #257	; 0x101
    pq->cmp        = conf->cmp;
    pq->buffer     = buff;
    pq->exp_factor = ex;
 10064b0:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
    pq->capacity   = conf->capacity;
 10064b4:	e3a0c008 	mov	ip, #8
    pq->buffer     = buff;
 10064b8:	e584000c 	str	r0, [r4, #12]

    *out = pq;
    return CC_OK;
 10064bc:	e3a00000 	mov	r0, #0
    pq->cmp        = conf->cmp;
 10064c0:	e584601c 	str	r6, [r4, #28]
    *out = pq;
 10064c4:	e5854000 	str	r4, [r5]
    pq->mem_alloc  = conf->mem_alloc;
 10064c8:	e5841010 	str	r1, [r4, #16]
    pq->mem_free   = conf->mem_free;
 10064cc:	e1c421f4 	strd	r2, [r4, #20]
    pq->exp_factor = ex;
 10064d0:	e584e008 	str	lr, [r4, #8]
    pq->capacity   = conf->capacity;
 10064d4:	e584c004 	str	ip, [r4, #4]
    return CC_OK;
 10064d8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(pq);
 10064dc:	e1a00004 	mov	r0, r4
 10064e0:	fa0052b8 	blx	101afc8 <free>
        return CC_ERR_ALLOC;
 10064e4:	e3a00001 	mov	r0, #1
 10064e8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 10064ec:	e3a00001 	mov	r0, #1
}
 10064f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010064f4 <pqueue_new_conf>:
{
 10064f4:	e92d4070 	push	{r4, r5, r6, lr}
 10064f8:	ed2d8b02 	vpush	{d8}
    if (conf->exp_factor <= 1)
 10064fc:	ed908a01 	vldr	s16, [r0, #4]
 1006500:	eeb77a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 1006504:	e5903000 	ldr	r3, [r0]
        ex = DEFAULT_EXPANSION_FACTOR;
 1006508:	eef07a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 100650c:	eeb48a47 	vcmp.f32	s16, s14
 1006510:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1006514:	9eb08a67 	vmovls.f32	s16, s15
    if (!conf->capacity || ex >= CC_MAX_ELEMENTS / conf->capacity)
 1006518:	e3530000 	cmp	r3, #0
 100651c:	0a000026 	beq	10065bc <pqueue_new_conf+0xc8>
 1006520:	e1a06001 	mov	r6, r1
 1006524:	e1a04000 	mov	r4, r0
 1006528:	e1a01003 	mov	r1, r3
 100652c:	e3e00001 	mvn	r0, #1
 1006530:	fa004c74 	blx	1019708 <__udivsi3>
 1006534:	ee070a90 	vmov	s15, r0
 1006538:	eef87a67 	vcvt.f32.u32	s15, s15
 100653c:	eef47ac8 	vcmpe.f32	s15, s16
 1006540:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1006544:	9a00001c 	bls	10065bc <pqueue_new_conf+0xc8>
    PQueue *pq = conf->mem_calloc(1, sizeof(PQueue));
 1006548:	e5943010 	ldr	r3, [r4, #16]
 100654c:	e3a01020 	mov	r1, #32
 1006550:	e3a00001 	mov	r0, #1
 1006554:	e12fff33 	blx	r3
    if (!pq)
 1006558:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 100655c:	03a00001 	moveq	r0, #1
    if (!pq)
 1006560:	0a000013 	beq	10065b4 <pqueue_new_conf+0xc0>
    void **buff = conf->mem_alloc(conf->capacity * sizeof(void*));
 1006564:	e5940000 	ldr	r0, [r4]
 1006568:	e594300c 	ldr	r3, [r4, #12]
 100656c:	e1a00100 	lsl	r0, r0, #2
 1006570:	e12fff33 	blx	r3
    if (!buff) {
 1006574:	e2503000 	subs	r3, r0, #0
 1006578:	0a000012 	beq	10065c8 <pqueue_new_conf+0xd4>
    pq->mem_alloc  = conf->mem_alloc;
 100657c:	e5942014 	ldr	r2, [r4, #20]
    return CC_OK;
 1006580:	e3a00000 	mov	r0, #0
    pq->mem_alloc  = conf->mem_alloc;
 1006584:	e594e008 	ldr	lr, [r4, #8]
 1006588:	e594c00c 	ldr	ip, [r4, #12]
 100658c:	e5941010 	ldr	r1, [r4, #16]
 1006590:	e585e01c 	str	lr, [r5, #28]
 1006594:	e585c010 	str	ip, [r5, #16]
 1006598:	e5851014 	str	r1, [r5, #20]
 100659c:	e5852018 	str	r2, [r5, #24]
    pq->capacity   = conf->capacity;
 10065a0:	e5942000 	ldr	r2, [r4]
    pq->buffer     = buff;
 10065a4:	e585300c 	str	r3, [r5, #12]
    pq->exp_factor = ex;
 10065a8:	ed858a02 	vstr	s16, [r5, #8]
    pq->capacity   = conf->capacity;
 10065ac:	e5852004 	str	r2, [r5, #4]
    *out = pq;
 10065b0:	e5865000 	str	r5, [r6]
}
 10065b4:	ecbd8b02 	vpop	{d8}
 10065b8:	e8bd8070 	pop	{r4, r5, r6, pc}
 10065bc:	ecbd8b02 	vpop	{d8}
        return CC_ERR_INVALID_CAPACITY;
 10065c0:	e3a00002 	mov	r0, #2
}
 10065c4:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(pq);
 10065c8:	e1a00005 	mov	r0, r5
 10065cc:	e5943014 	ldr	r3, [r4, #20]
 10065d0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10065d4:	e3a00001 	mov	r0, #1
 10065d8:	eafffff5 	b	10065b4 <pqueue_new_conf+0xc0>

010065dc <pqueue_destroy>:
 * intact.
 *
 * @param[in] pq the PQueue to be destroyed
 */
void pqueue_destroy(PQueue *pq)
{
 10065dc:	e92d4010 	push	{r4, lr}
 10065e0:	e1a04000 	mov	r4, r0
    pq->mem_free(pq->buffer);
 10065e4:	e5903018 	ldr	r3, [r0, #24]
 10065e8:	e590000c 	ldr	r0, [r0, #12]
 10065ec:	e12fff33 	blx	r3
    pq->mem_free(pq);
 10065f0:	e5943018 	ldr	r3, [r4, #24]
 10065f4:	e1a00004 	mov	r0, r4
}
 10065f8:	e8bd4010 	pop	{r4, lr}
    pq->mem_free(pq);
 10065fc:	e12fff13 	bx	r3

01006600 <pqueue_destroy_cb>:
 * @param[in] pq the Priority Queue to be destroyed
 */
void pqueue_destroy_cb(PQueue *pq, void (*cb) (void*))
{
    size_t i;
    for (i = 0; i < pq->size; i++)
 1006600:	e5903000 	ldr	r3, [r0]
{
 1006604:	e92d4070 	push	{r4, r5, r6, lr}
 1006608:	e1a05000 	mov	r5, r0
    for (i = 0; i < pq->size; i++)
 100660c:	e3530000 	cmp	r3, #0
 1006610:	0a000008 	beq	1006638 <pqueue_destroy_cb+0x38>
 1006614:	e1a06001 	mov	r6, r1
 1006618:	e3a04000 	mov	r4, #0
        cb(pq->buffer[i]);
 100661c:	e595300c 	ldr	r3, [r5, #12]
 1006620:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    for (i = 0; i < pq->size; i++)
 1006624:	e2844001 	add	r4, r4, #1
        cb(pq->buffer[i]);
 1006628:	e12fff36 	blx	r6
    for (i = 0; i < pq->size; i++)
 100662c:	e5953000 	ldr	r3, [r5]
 1006630:	e1530004 	cmp	r3, r4
 1006634:	8afffff8 	bhi	100661c <pqueue_destroy_cb+0x1c>
    pq->mem_free(pq->buffer);
 1006638:	e5953018 	ldr	r3, [r5, #24]
 100663c:	e595000c 	ldr	r0, [r5, #12]
 1006640:	e12fff33 	blx	r3
    pq->mem_free(pq);
 1006644:	e5953018 	ldr	r3, [r5, #24]
 1006648:	e1a00005 	mov	r0, r5

    pqueue_destroy(pq);
}
 100664c:	e8bd4070 	pop	{r4, r5, r6, lr}
    pq->mem_free(pq);
 1006650:	e12fff13 	bx	r3

01006654 <pqueue_push>:
 *
 * @return CC_OK if the element was successfully pushed, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat pqueue_push(PQueue *pq, void *element)
{
 1006654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006658:	e1a05000 	mov	r5, r0
    size_t i = pq->size;
 100665c:	e5904000 	ldr	r4, [r0]
{
 1006660:	e1a07001 	mov	r7, r1

    if (i >= pq->capacity) {
 1006664:	e5903004 	ldr	r3, [r0, #4]
 1006668:	e1530004 	cmp	r3, r4
 100666c:	9a000020 	bls	10066f4 <pqueue_push+0xa0>
 1006670:	e590600c 	ldr	r6, [r0, #12]
 1006674:	e1a03004 	mov	r3, r4
    }

    pq->buffer[i] = element;
    pq->size++;

    if (i == 0)
 1006678:	e3540000 	cmp	r4, #0
    pq->size++;
 100667c:	e2833001 	add	r3, r3, #1
    pq->buffer[i] = element;
 1006680:	e7867104 	str	r7, [r6, r4, lsl #2]
    pq->size++;
 1006684:	e5853000 	str	r3, [r5]
    if (i == 0)
 1006688:	0a000017 	beq	10066ec <pqueue_push+0x98>
        return CC_OK;

    void *child  = pq->buffer[i];
 100668c:	e595300c 	ldr	r3, [r5, #12]
    void *parent = pq->buffer[CC_PARENT(i)];
 1006690:	e2446001 	sub	r6, r4, #1
 1006694:	e1a020a6 	lsr	r2, r6, #1
    void *child  = pq->buffer[i];
 1006698:	e7930104 	ldr	r0, [r3, r4, lsl #2]
    void *parent = pq->buffer[CC_PARENT(i)];
 100669c:	e7931102 	ldr	r1, [r3, r2, lsl #2]

    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066a0:	e595301c 	ldr	r3, [r5, #28]
 10066a4:	e12fff33 	blx	r3
 10066a8:	e3500000 	cmp	r0, #0
        void *tmp = pq->buffer[i];
 10066ac:	e1a02104 	lsl	r2, r4, #2
    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066b0:	da00000d 	ble	10066ec <pqueue_push+0x98>
        void *tmp = pq->buffer[i];
 10066b4:	e595300c 	ldr	r3, [r5, #12]
 10066b8:	e7930104 	ldr	r0, [r3, r4, lsl #2]
        pq->buffer[i] = pq->buffer[CC_PARENT(i)];
 10066bc:	e1a040a6 	lsr	r4, r6, #1
 10066c0:	e793c104 	ldr	ip, [r3, r4, lsl #2]
        pq->buffer[CC_PARENT(i)] = tmp;

        i      = CC_PARENT(i);
        child  = pq->buffer[i];
        parent = pq->buffer[CC_PARENT(i)];
 10066c4:	e2446001 	sub	r6, r4, #1
 10066c8:	e1a010a6 	lsr	r1, r6, #1
    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066cc:	e3540000 	cmp	r4, #0
        pq->buffer[i] = pq->buffer[CC_PARENT(i)];
 10066d0:	e783c002 	str	ip, [r3, r2]
        pq->buffer[CC_PARENT(i)] = tmp;
 10066d4:	e595300c 	ldr	r3, [r5, #12]
 10066d8:	e7830104 	str	r0, [r3, r4, lsl #2]
        child  = pq->buffer[i];
 10066dc:	e595300c 	ldr	r3, [r5, #12]
 10066e0:	e7930104 	ldr	r0, [r3, r4, lsl #2]
        parent = pq->buffer[CC_PARENT(i)];
 10066e4:	e7931101 	ldr	r1, [r3, r1, lsl #2]
    while (i != 0 && pq->cmp(child, parent) > 0) {
 10066e8:	1affffec 	bne	10066a0 <pqueue_push+0x4c>
        return CC_OK;
 10066ec:	e3a00000 	mov	r0, #0
 10066f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (pq->capacity == CC_MAX_ELEMENTS)
 10066f4:	e3730002 	cmn	r3, #2
 10066f8:	0a00001a 	beq	1006768 <pqueue_push+0x114>
    size_t new_capacity = pq->capacity * pq->exp_factor;
 10066fc:	ee073a90 	vmov	s15, r3
 1006700:	ed907a02 	vldr	s14, [r0, #8]
 1006704:	eef87a67 	vcvt.f32.u32	s15, s15
    void **new_buff = pq->mem_alloc(new_capacity * sizeof(void*));
 1006708:	e5902010 	ldr	r2, [r0, #16]
    size_t new_capacity = pq->capacity * pq->exp_factor;
 100670c:	ee677a87 	vmul.f32	s15, s15, s14
 1006710:	eefc7ae7 	vcvt.u32.f32	s15, s15
 1006714:	ee170a90 	vmov	r0, s15
        pq->capacity = CC_MAX_ELEMENTS;
 1006718:	e1530000 	cmp	r3, r0
 100671c:	31a03000 	movcc	r3, r0
 1006720:	23e03001 	mvncs	r3, #1
    void **new_buff = pq->mem_alloc(new_capacity * sizeof(void*));
 1006724:	e1a00100 	lsl	r0, r0, #2
 1006728:	e5853004 	str	r3, [r5, #4]
 100672c:	e12fff32 	blx	r2
    if (!new_buff)
 1006730:	e2506000 	subs	r6, r0, #0
 1006734:	0a000009 	beq	1006760 <pqueue_push+0x10c>
    memcpy(new_buff, pq->buffer, pq->size * sizeof(void*));
 1006738:	e5952000 	ldr	r2, [r5]
 100673c:	e595100c 	ldr	r1, [r5, #12]
 1006740:	e1a02102 	lsl	r2, r2, #2
 1006744:	eb0054ad 	bl	101ba00 <memcpy>
    pq->mem_free(pq->buffer);
 1006748:	e5953018 	ldr	r3, [r5, #24]
 100674c:	e595000c 	ldr	r0, [r5, #12]
 1006750:	e12fff33 	blx	r3
    pq->buffer = new_buff;
 1006754:	e5953000 	ldr	r3, [r5]
 1006758:	e585600c 	str	r6, [r5, #12]
        if (status != CC_OK)
 100675c:	eaffffc5 	b	1006678 <pqueue_push+0x24>
        return CC_ERR_ALLOC;
 1006760:	e3a00001 	mov	r0, #1
    }
    return CC_OK;
}
 1006764:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_MAX_CAPACITY;
 1006768:	e3a00004 	mov	r0, #4
 100676c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01006770 <pqueue_top>:
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if the
 * PQueue is empty.
 */
enum cc_stat pqueue_top(PQueue *pq, void **out)
{
    if (pq->size == 0)
 1006770:	e5903000 	ldr	r3, [r0]
 1006774:	e3530000 	cmp	r3, #0
        return CC_ERR_OUT_OF_RANGE;

    *out = pq->buffer[0];
 1006778:	1590300c 	ldrne	r3, [r0, #12]
    return CC_OK;
 100677c:	13a00000 	movne	r0, #0
        return CC_ERR_OUT_OF_RANGE;
 1006780:	03a00008 	moveq	r0, #8
    *out = pq->buffer[0];
 1006784:	15933000 	ldrne	r3, [r3]
 1006788:	15813000 	strne	r3, [r1]
}
 100678c:	e12fff1e 	bx	lr

01006790 <pqueue_pop>:
 * return CC_OK if the element was popped successfully, or CC_ERR_OUT_OF_RANGE
 * if pqueue was empty
 */
enum cc_stat pqueue_pop(PQueue *pq, void **out)
{
    if (pq->size == 0)
 1006790:	e5903000 	ldr	r3, [r0]
 1006794:	e3530000 	cmp	r3, #0
 1006798:	0a000059 	beq	1006904 <pqueue_pop+0x174>
        return CC_ERR_OUT_OF_RANGE;

    void *tmp = pq->buffer[0];
 100679c:	e590200c 	ldr	r2, [r0, #12]
{
 10067a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10067a4:	e24dd014 	sub	sp, sp, #20
 10067a8:	e58d1008 	str	r1, [sp, #8]
    pq->buffer[0] = pq->buffer[pq->size - 1];
 10067ac:	e2431107 	sub	r1, r3, #-1073741823	; 0xc0000001
 10067b0:	e1a04000 	mov	r4, r0
    pq->buffer[pq->size - 1] = tmp;

    tmp = pq->buffer[pq->size - 1];
    pq->size--;
 10067b4:	e2433001 	sub	r3, r3, #1
    pq->buffer[0] = pq->buffer[pq->size - 1];
 10067b8:	e792c101 	ldr	ip, [r2, r1, lsl #2]
 * @param[in] pq the PQueue structure whose heap property is to be maintained
 * @param[in] index the index from where we need to apply this operation
 */
static void pqueue_heapify(PQueue *pq, size_t index)
{
    if (pq->size <= 1)
 10067bc:	e3530001 	cmp	r3, #1
    void *tmp = pq->buffer[0];
 10067c0:	e5920000 	ldr	r0, [r2]
    pq->buffer[0] = pq->buffer[pq->size - 1];
 10067c4:	e582c000 	str	ip, [r2]
    pq->buffer[pq->size - 1] = tmp;
 10067c8:	e594200c 	ldr	r2, [r4, #12]
 10067cc:	e7820101 	str	r0, [r2, r1, lsl #2]
    tmp = pq->buffer[pq->size - 1];
 10067d0:	e594200c 	ldr	r2, [r4, #12]
 10067d4:	e7921101 	ldr	r1, [r2, r1, lsl #2]
    pq->size--;
 10067d8:	e5843000 	str	r3, [r4]
    tmp = pq->buffer[pq->size - 1];
 10067dc:	e58d100c 	str	r1, [sp, #12]
    if (pq->size <= 1)
 10067e0:	9a00003f 	bls	10068e4 <pqueue_pop+0x154>

    void *left     = pq->buffer[L];
    void *right    = pq->buffer[R];
    void *indexPtr = pq->buffer[index];

    if (L >= pq->size || R >= pq->size)
 10067e4:	e3530002 	cmp	r3, #2
    void *left     = pq->buffer[L];
 10067e8:	e5929004 	ldr	r9, [r2, #4]
    void *right    = pq->buffer[R];
 10067ec:	e5923008 	ldr	r3, [r2, #8]
    void *indexPtr = pq->buffer[index];
 10067f0:	e5928000 	ldr	r8, [r2]
    if (L >= pq->size || R >= pq->size)
 10067f4:	9a00003a 	bls	10068e4 <pqueue_pop+0x154>
 10067f8:	e3a0b000 	mov	fp, #0
    void *left     = pq->buffer[L];
 10067fc:	e3a02004 	mov	r2, #4
    void *right    = pq->buffer[R];
 1006800:	e3a07008 	mov	r7, #8
    void *indexPtr = pq->buffer[index];
 1006804:	e1a0a00b 	mov	sl, fp
    void *left     = pq->buffer[L];
 1006808:	e58d2000 	str	r2, [sp]
    size_t R   = CC_RIGHT(index);
 100680c:	e3a05002 	mov	r5, #2
    size_t L   = CC_LEFT(index);
 1006810:	e3a06001 	mov	r6, #1
 1006814:	ea000020 	b	100689c <pqueue_pop+0x10c>
    if (pq->cmp(indexPtr, left) < 0) {
        indexPtr = left;
        index = L;
    }

    if (pq->cmp(indexPtr, right) < 0) {
 1006818:	e1a00008 	mov	r0, r8
 100681c:	e594301c 	ldr	r3, [r4, #28]
 1006820:	e12fff33 	blx	r3
 1006824:	e3500000 	cmp	r0, #0
 1006828:	aa00002d 	bge	10068e4 <pqueue_pop+0x154>
    size_t L   = CC_LEFT(index);
 100682c:	e1a03085 	lsl	r3, r5, #1
        indexPtr = right;
        index = R;
    }

    if (index != tmp) {
 1006830:	e15b0005 	cmp	fp, r5
    size_t R   = CC_RIGHT(index);
 1006834:	e2850001 	add	r0, r5, #1
    size_t L   = CC_LEFT(index);
 1006838:	e2836001 	add	r6, r3, #1
    if (L >= pq->size || R >= pq->size)
 100683c:	e1a0b005 	mov	fp, r5
    size_t R   = CC_RIGHT(index);
 1006840:	e2833002 	add	r3, r3, #2
    if (index != tmp) {
 1006844:	0a000026 	beq	10068e4 <pqueue_pop+0x154>
        void *swap_tmp = pq->buffer[tmp];
 1006848:	e594200c 	ldr	r2, [r4, #12]
    void *left     = pq->buffer[L];
 100684c:	e1a01106 	lsl	r1, r6, #2
 1006850:	e58d1000 	str	r1, [sp]
        pq->buffer[tmp] = pq->buffer[index];
 1006854:	e792e007 	ldr	lr, [r2, r7]
    if (pq->size <= 1)
 1006858:	e5941000 	ldr	r1, [r4]
        void *swap_tmp = pq->buffer[tmp];
 100685c:	e792c00a 	ldr	ip, [r2, sl]
        pq->buffer[tmp] = pq->buffer[index];
 1006860:	e782e00a 	str	lr, [r2, sl]
    void *indexPtr = pq->buffer[index];
 1006864:	e1a0a105 	lsl	sl, r5, #2
        pq->buffer[index] = swap_tmp;
 1006868:	e594200c 	ldr	r2, [r4, #12]
    if (pq->size <= 1)
 100686c:	e3510001 	cmp	r1, #1
        pq->buffer[index] = swap_tmp;
 1006870:	e782c007 	str	ip, [r2, r7]
    if (pq->size <= 1)
 1006874:	9a00001a 	bls	10068e4 <pqueue_pop+0x154>
 1006878:	e594200c 	ldr	r2, [r4, #12]
    if (L >= pq->size || R >= pq->size)
 100687c:	e1510003 	cmp	r1, r3
 1006880:	81510006 	cmphi	r1, r6
    void *right    = pq->buffer[R];
 1006884:	e1a07180 	lsl	r7, r0, #3
    void *indexPtr = pq->buffer[index];
 1006888:	e7928105 	ldr	r8, [r2, r5, lsl #2]
    if (L >= pq->size || R >= pq->size)
 100688c:	e1a05003 	mov	r5, r3
    void *left     = pq->buffer[L];
 1006890:	e7929106 	ldr	r9, [r2, r6, lsl #2]
    void *right    = pq->buffer[R];
 1006894:	e7923180 	ldr	r3, [r2, r0, lsl #3]
    if (L >= pq->size || R >= pq->size)
 1006898:	9a000011 	bls	10068e4 <pqueue_pop+0x154>
    if (pq->cmp(indexPtr, left) < 0) {
 100689c:	e1a01009 	mov	r1, r9
 10068a0:	e594201c 	ldr	r2, [r4, #28]
 10068a4:	e1a00008 	mov	r0, r8
 10068a8:	e58d3004 	str	r3, [sp, #4]
 10068ac:	e12fff32 	blx	r2
    if (pq->cmp(indexPtr, right) < 0) {
 10068b0:	e59d3004 	ldr	r3, [sp, #4]
    if (pq->cmp(indexPtr, left) < 0) {
 10068b4:	e3500000 	cmp	r0, #0
    if (pq->cmp(indexPtr, right) < 0) {
 10068b8:	e1a00009 	mov	r0, r9
 10068bc:	e1a01003 	mov	r1, r3
    if (pq->cmp(indexPtr, left) < 0) {
 10068c0:	aaffffd4 	bge	1006818 <pqueue_pop+0x88>
    if (pq->cmp(indexPtr, right) < 0) {
 10068c4:	e594301c 	ldr	r3, [r4, #28]
 10068c8:	e12fff33 	blx	r3
 10068cc:	e59d3000 	ldr	r3, [sp]
 10068d0:	e3500000 	cmp	r0, #0
 10068d4:	b1a03007 	movlt	r3, r7
 10068d8:	a1a05006 	movge	r5, r6
 10068dc:	e1a07003 	mov	r7, r3
 10068e0:	eaffffd1 	b	100682c <pqueue_pop+0x9c>
    if (out)
 10068e4:	e59d3008 	ldr	r3, [sp, #8]
 10068e8:	e3530000 	cmp	r3, #0
 10068ec:	01a00003 	moveq	r0, r3
        *out = tmp;
 10068f0:	159d200c 	ldrne	r2, [sp, #12]
    return CC_OK;
 10068f4:	13a00000 	movne	r0, #0
        *out = tmp;
 10068f8:	15832000 	strne	r2, [r3]
}
 10068fc:	e28dd014 	add	sp, sp, #20
 1006900:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_ERR_OUT_OF_RANGE;
 1006904:	e3a00008 	mov	r0, #8
}
 1006908:	e12fff1e 	bx	lr

0100690c <queue_conf_init>:
 *
 * @param[in, out] conf the configuration struct that is being initialized
 */
void queue_conf_init(QueueConf *conf)
{
    deque_conf_init(conf);
 100690c:	eaffecde 	b	1001c8c <deque_conf_init>

01006910 <queue_new>:
 *
 * @return  CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new Queue structure failed.
 */
enum cc_stat queue_new(Queue **queue)
{
 1006910:	e92d4030 	push	{r4, r5, lr}
 1006914:	e24dd01c 	sub	sp, sp, #28
 1006918:	e1a05000 	mov	r5, r0
    deque_conf_init(conf);
 100691c:	e28d0008 	add	r0, sp, #8
 1006920:	ebffecd9 	bl	1001c8c <deque_conf_init>
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new Queue structure failed.
 */
enum cc_stat queue_new_conf(QueueConf const * const conf, Queue **q)
{
    Queue *queue = conf->mem_calloc(1, sizeof(Queue));
 1006924:	e59d3010 	ldr	r3, [sp, #16]
 1006928:	e3a01010 	mov	r1, #16
 100692c:	e3a00001 	mov	r0, #1
 1006930:	e12fff33 	blx	r3

    if (!queue)
 1006934:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 1006938:	03a00001 	moveq	r0, #1
    if (!queue)
 100693c:	0a00000b 	beq	1006970 <queue_new+0x60>

    Deque *deque;
    deque_new_conf(conf, &deque);
 1006940:	e28d0008 	add	r0, sp, #8
 1006944:	e28d1004 	add	r1, sp, #4
 1006948:	ebffeca2 	bl	1001bd8 <deque_new_conf>

    if (!deque) {
 100694c:	e59d3004 	ldr	r3, [sp, #4]
 1006950:	e3530000 	cmp	r3, #0
 1006954:	0a000007 	beq	1006978 <queue_new+0x68>
        conf->mem_free(queue);
        return CC_ERR_ALLOC;
    }

    queue->d          = deque;
    queue->mem_alloc  = conf->mem_alloc;
 1006958:	e28d100c 	add	r1, sp, #12
    queue->d          = deque;
 100695c:	e5843000 	str	r3, [r4]
    queue->mem_alloc  = conf->mem_alloc;
 1006960:	e891000e 	ldm	r1, {r1, r2, r3}
    queue->mem_calloc = conf->mem_calloc;
    queue->mem_free   = conf->mem_free;

    *q = queue;

    return CC_OK;
 1006964:	e3a00000 	mov	r0, #0
    queue->mem_alloc  = conf->mem_alloc;
 1006968:	e984000e 	stmib	r4, {r1, r2, r3}
    *q = queue;
 100696c:	e5854000 	str	r4, [r5]
}
 1006970:	e28dd01c 	add	sp, sp, #28
 1006974:	e8bd8030 	pop	{r4, r5, pc}
        conf->mem_free(queue);
 1006978:	e1a00004 	mov	r0, r4
 100697c:	e59d3014 	ldr	r3, [sp, #20]
 1006980:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1006984:	e3a00001 	mov	r0, #1
}
 1006988:	e28dd01c 	add	sp, sp, #28
 100698c:	e8bd8030 	pop	{r4, r5, pc}

01006990 <queue_new_conf>:
{
 1006990:	e92d4070 	push	{r4, r5, r6, lr}
 1006994:	e1a04000 	mov	r4, r0
    Queue *queue = conf->mem_calloc(1, sizeof(Queue));
 1006998:	e5903008 	ldr	r3, [r0, #8]
{
 100699c:	e24dd008 	sub	sp, sp, #8
 10069a0:	e1a06001 	mov	r6, r1
    Queue *queue = conf->mem_calloc(1, sizeof(Queue));
 10069a4:	e3a00001 	mov	r0, #1
 10069a8:	e3a01010 	mov	r1, #16
 10069ac:	e12fff33 	blx	r3
    if (!queue)
 10069b0:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 10069b4:	03a00001 	moveq	r0, #1
    if (!queue)
 10069b8:	0a00000a 	beq	10069e8 <queue_new_conf+0x58>
    deque_new_conf(conf, &deque);
 10069bc:	e28d1004 	add	r1, sp, #4
 10069c0:	e1a00004 	mov	r0, r4
 10069c4:	ebffec83 	bl	1001bd8 <deque_new_conf>
    if (!deque) {
 10069c8:	e59d3004 	ldr	r3, [sp, #4]
 10069cc:	e3530000 	cmp	r3, #0
 10069d0:	0a000006 	beq	10069f0 <queue_new_conf+0x60>
    queue->d          = deque;
 10069d4:	e5853000 	str	r3, [r5]
    return CC_OK;
 10069d8:	e3a00000 	mov	r0, #0
    queue->mem_alloc  = conf->mem_alloc;
 10069dc:	e994000e 	ldmib	r4, {r1, r2, r3}
 10069e0:	e985000e 	stmib	r5, {r1, r2, r3}
    *q = queue;
 10069e4:	e5865000 	str	r5, [r6]
}
 10069e8:	e28dd008 	add	sp, sp, #8
 10069ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(queue);
 10069f0:	e1a00005 	mov	r0, r5
 10069f4:	e594300c 	ldr	r3, [r4, #12]
 10069f8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10069fc:	e3a00001 	mov	r0, #1
}
 1006a00:	e28dd008 	add	sp, sp, #8
 1006a04:	e8bd8070 	pop	{r4, r5, r6, pc}

01006a08 <queue_destroy>:
 * Destroys the queue structure, but leaves the data it used to hold intact.
 *
 * @param[in] queue the queue that is to be destroyed
 */
void queue_destroy(Queue *queue)
{
 1006a08:	e92d4010 	push	{r4, lr}
 1006a0c:	e1a04000 	mov	r4, r0
    deque_destroy(queue->d);
 1006a10:	e5900000 	ldr	r0, [r0]
 1006a14:	ebffeca6 	bl	1001cb4 <deque_destroy>
    queue->mem_free(queue);
 1006a18:	e594300c 	ldr	r3, [r4, #12]
 1006a1c:	e1a00004 	mov	r0, r4
}
 1006a20:	e8bd4010 	pop	{r4, lr}
    queue->mem_free(queue);
 1006a24:	e12fff13 	bx	r3

01006a28 <queue_destroy_cb>:
 *       elements allocated on the stack.
 *
 * @param[in] queue the queue that is to be destroyed
 */
void queue_destroy_cb(Queue *queue, void (*cb) (void*))
{
 1006a28:	e92d4010 	push	{r4, lr}
 1006a2c:	e1a04000 	mov	r4, r0
    deque_destroy_cb(queue->d, cb);
 1006a30:	e5900000 	ldr	r0, [r0]
 1006a34:	ebffeca7 	bl	1001cd8 <deque_destroy_cb>
    free(queue);
 1006a38:	e1a00004 	mov	r0, r4
}
 1006a3c:	e8bd4010 	pop	{r4, lr}
    free(queue);
 1006a40:	ea007cf4 	b	1025e18 <__free_from_arm>

01006a44 <queue_peek>:
 * @return CC_OK if the element was found, or CC_ERR_OUT_OF_RANGE if the
 * Queue is empty.
 */
enum cc_stat queue_peek(Queue const * const queue, void **out)
{
    return deque_get_last(queue->d, out);
 1006a44:	e5900000 	ldr	r0, [r0]
 1006a48:	eaffeedb 	b	10025bc <deque_get_last>

01006a4c <queue_poll>:
 * @return CC_OK if the element was found, or CC_ERR_OUT_OF_RANGE if the
 * Queue is empty.
 */
enum cc_stat queue_poll(Queue *queue, void **out)
{
    return deque_remove_last(queue->d, out);
 1006a4c:	e5900000 	ldr	r0, [r0]
 1006a50:	eaffee8e 	b	1002490 <deque_remove_last>

01006a54 <queue_enqueue>:
 * @return CC_OK if the element was successfully added, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat queue_enqueue(Queue *queue, void *element)
{
    return deque_add_first(queue->d, element);
 1006a54:	e5900000 	ldr	r0, [r0]
 1006a58:	eaffecd4 	b	1001db0 <deque_add_first>

01006a5c <queue_size>:
 *
 * @return the number of elements within the queue.
 */
size_t queue_size(Queue const * const queue)
{
    return deque_size(queue->d);
 1006a5c:	e5900000 	ldr	r0, [r0]
 1006a60:	eafff005 	b	1002a7c <deque_size>

01006a64 <queue_foreach>:
 * @param[in] queue the queue on which this operation is performed
 * @param[in] fn the operation function that is to be invoked on each queue element
 */
void queue_foreach(Queue *queue, void (*fn) (void*))
{
    deque_foreach(queue->d, fn);
 1006a64:	e5900000 	ldr	r0, [r0]
 1006a68:	eafff009 	b	1002a94 <deque_foreach>

01006a6c <queue_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] queue the queue to iterate over
 */
void queue_iter_init(QueueIter *iter, Queue *queue)
{
    deque_iter_init(&(iter->i), queue->d);
 1006a6c:	e5911000 	ldr	r1, [r1]
 1006a70:	eafff0f0 	b	1002e38 <deque_iter_init>

01006a74 <queue_iter_next>:
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Queue has been reached.
 */
enum cc_stat queue_iter_next(QueueIter *iter, void **out)
{
    return deque_iter_next(&(iter->i), out);
 1006a74:	eafff0f3 	b	1002e48 <deque_iter_next>

01006a78 <queue_iter_replace>:
 * @return  CC_OK if the element was replaced successfully, or
 * CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat queue_iter_replace(QueueIter *iter, void *replacement, void **out)
{
    return deque_iter_replace(&(iter->i), replacement, out);
 1006a78:	eafff19a 	b	10030e8 <deque_iter_replace>

01006a7c <queue_zip_iter_init>:
 * @param[in] q1   first queue
 * @param[in] q2   second queue
 */
void queue_zip_iter_init(QueueZipIter *iter, Queue *q1, Queue *q2)
{
    deque_zip_iter_init(&(iter->i), q1->d, q2->d);
 1006a7c:	e5922000 	ldr	r2, [r2]
 1006a80:	e5911000 	ldr	r1, [r1]
 1006a84:	eafff1b2 	b	1003154 <deque_zip_iter_init>

01006a88 <queue_zip_iter_next>:
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end
 * of one of the queues has been reached.
 */
enum cc_stat queue_zip_iter_next(QueueZipIter *iter, void **out1, void **out2)
{
    return deque_zip_iter_next(&(iter->i), out1, out2);
 1006a88:	eafff1b5 	b	1003164 <deque_zip_iter_next>

01006a8c <queue_zip_iter_replace>:
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat queue_zip_iter_replace(QueueZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
    return deque_zip_iter_replace(&(iter->i), e1, e2, out1, out2);
 1006a8c:	eafff232 	b	100335c <deque_zip_iter_replace>

01006a90 <rbuf_new>:
    void  (*mem_free)   (void *block);

};

enum cc_stat rbuf_new(Rbuf **rbuf)
{
 1006a90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    return rbuf_conf_new(&conf, rbuf);
}

enum cc_stat rbuf_conf_new(RbufConf *rconf, Rbuf **rbuf)
{
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006a94:	e3a01020 	mov	r1, #32
{
 1006a98:	e1a05000 	mov	r5, r0
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006a9c:	e3a00001 	mov	r0, #1
 1006aa0:	fa004e44 	blx	101a3b8 <calloc>
    if (!ringbuf)
 1006aa4:	e2504000 	subs	r4, r0, #0
 1006aa8:	0a000016 	beq	1006b08 <rbuf_new+0x78>
       return CC_ERR_ALLOC;
    if (!(ringbuf->buf = rconf->mem_calloc(rconf->capacity, sizeof(uint64_t)))) {
 1006aac:	e3a01008 	mov	r1, #8
 1006ab0:	e3a0000a 	mov	r0, #10
 1006ab4:	fa004e3f 	blx	101a3b8 <calloc>
 1006ab8:	e3500000 	cmp	r0, #0
 1006abc:	e5840010 	str	r0, [r4, #16]
 1006ac0:	0a000012 	beq	1006b10 <rbuf_new+0x80>
      rconf->mem_free(ringbuf);
      return CC_ERR_ALLOC;
    }

    ringbuf->mem_alloc = rconf->mem_alloc;
 1006ac4:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    ringbuf->mem_calloc = rconf->mem_calloc;
 1006ac8:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    ringbuf->mem_free = rconf->mem_free;
 1006acc:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006ad0:	e3401101 	movt	r1, #257	; 0x101
    ringbuf->mem_calloc = rconf->mem_calloc;
 1006ad4:	e3402101 	movt	r2, #257	; 0x101
    ringbuf->mem_free = rconf->mem_free;
 1006ad8:	e3403101 	movt	r3, #257	; 0x101
    ringbuf->capacity = rconf->capacity;
    ringbuf->size = 0;
 1006adc:	e3a06000 	mov	r6, #0
 1006ae0:	e3a0700a 	mov	r7, #10
 1006ae4:	e3a08000 	mov	r8, #0
 1006ae8:	e3a09000 	mov	r9, #0
    ringbuf->head = 0, ringbuf->tail = 0;
    *rbuf = ringbuf;
 1006aec:	e5854000 	str	r4, [r5]
    return CC_OK;
 1006af0:	e3a00000 	mov	r0, #0
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006af4:	e5841014 	str	r1, [r4, #20]
    ringbuf->mem_free = rconf->mem_free;
 1006af8:	e1c421f8 	strd	r2, [r4, #24]
    ringbuf->size = 0;
 1006afc:	e1c460f0 	strd	r6, [r4]
 1006b00:	e1c480f8 	strd	r8, [r4, #8]
    return CC_OK;
 1006b04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
       return CC_ERR_ALLOC;
 1006b08:	e3a00001 	mov	r0, #1
}
 1006b0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      rconf->mem_free(ringbuf);
 1006b10:	e1a00004 	mov	r0, r4
 1006b14:	fa00512b 	blx	101afc8 <free>
      return CC_ERR_ALLOC;
 1006b18:	e3a00001 	mov	r0, #1
 1006b1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01006b20 <rbuf_conf_new>:
{
 1006b20:	e92d4070 	push	{r4, r5, r6, lr}
 1006b24:	e1a05000 	mov	r5, r0
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006b28:	e5903008 	ldr	r3, [r0, #8]
{
 1006b2c:	e1a06001 	mov	r6, r1
    Rbuf *ringbuf = rconf->mem_calloc(1, sizeof(Rbuf));
 1006b30:	e3a00001 	mov	r0, #1
 1006b34:	e3a01020 	mov	r1, #32
 1006b38:	e12fff33 	blx	r3
    if (!ringbuf)
 1006b3c:	e2504000 	subs	r4, r0, #0
 1006b40:	0a000014 	beq	1006b98 <rbuf_conf_new+0x78>
    if (!(ringbuf->buf = rconf->mem_calloc(rconf->capacity, sizeof(uint64_t)))) {
 1006b44:	e5953008 	ldr	r3, [r5, #8]
 1006b48:	e3a01008 	mov	r1, #8
 1006b4c:	e5950000 	ldr	r0, [r5]
 1006b50:	e12fff33 	blx	r3
 1006b54:	e3500000 	cmp	r0, #0
 1006b58:	e5840010 	str	r0, [r4, #16]
 1006b5c:	0a00000f 	beq	1006ba0 <rbuf_conf_new+0x80>
    ringbuf->mem_free = rconf->mem_free;
 1006b60:	e1c500d8 	ldrd	r0, [r5, #8]
    ringbuf->size = 0;
 1006b64:	e3a03000 	mov	r3, #0
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006b68:	e595c004 	ldr	ip, [r5, #4]
    ringbuf->capacity = rconf->capacity;
 1006b6c:	e5952000 	ldr	r2, [r5]
    ringbuf->mem_calloc = rconf->mem_calloc;
 1006b70:	e5840018 	str	r0, [r4, #24]
    return CC_OK;
 1006b74:	e1a00003 	mov	r0, r3
    ringbuf->mem_alloc = rconf->mem_alloc;
 1006b78:	e584c014 	str	ip, [r4, #20]
    ringbuf->mem_free = rconf->mem_free;
 1006b7c:	e584101c 	str	r1, [r4, #28]
    ringbuf->capacity = rconf->capacity;
 1006b80:	e5842004 	str	r2, [r4, #4]
    ringbuf->size = 0;
 1006b84:	e5843000 	str	r3, [r4]
    ringbuf->head = 0, ringbuf->tail = 0;
 1006b88:	e5843008 	str	r3, [r4, #8]
 1006b8c:	e584300c 	str	r3, [r4, #12]
    *rbuf = ringbuf;
 1006b90:	e5864000 	str	r4, [r6]
    return CC_OK;
 1006b94:	e8bd8070 	pop	{r4, r5, r6, pc}
       return CC_ERR_ALLOC;
 1006b98:	e3a00001 	mov	r0, #1
}
 1006b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
      rconf->mem_free(ringbuf);
 1006ba0:	e1a00004 	mov	r0, r4
 1006ba4:	e595300c 	ldr	r3, [r5, #12]
 1006ba8:	e12fff33 	blx	r3
      return CC_ERR_ALLOC;
 1006bac:	e3a00001 	mov	r0, #1
 1006bb0:	e8bd8070 	pop	{r4, r5, r6, pc}

01006bb4 <rbuf_conf_init>:

void rbuf_conf_init(RbufConf *rconf)
{
    rconf->capacity = DEFAULT_RBUF_CAPACITY;
    rconf->mem_alloc = malloc;
 1006bb4:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    rconf->mem_calloc = calloc;
 1006bb8:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    rconf->mem_free = free;
 1006bbc:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    rconf->capacity = DEFAULT_RBUF_CAPACITY;
 1006bc0:	e3a0c00a 	mov	ip, #10
    rconf->mem_alloc = malloc;
 1006bc4:	e3401101 	movt	r1, #257	; 0x101
    rconf->mem_calloc = calloc;
 1006bc8:	e3402101 	movt	r2, #257	; 0x101
    rconf->mem_free = free;
 1006bcc:	e3403101 	movt	r3, #257	; 0x101
    rconf->capacity = DEFAULT_RBUF_CAPACITY;
 1006bd0:	e580c000 	str	ip, [r0]
    rconf->mem_free = free;
 1006bd4:	e980000e 	stmib	r0, {r1, r2, r3}
}
 1006bd8:	e12fff1e 	bx	lr

01006bdc <rbuf_destroy>:

void rbuf_destroy(Rbuf *rbuf)
{
 1006bdc:	e92d4010 	push	{r4, lr}
 1006be0:	e1a04000 	mov	r4, r0
    rbuf->mem_free(rbuf->buf);
 1006be4:	e590301c 	ldr	r3, [r0, #28]
 1006be8:	e5900010 	ldr	r0, [r0, #16]
 1006bec:	e12fff33 	blx	r3
    rbuf->mem_free(rbuf);
 1006bf0:	e594301c 	ldr	r3, [r4, #28]
 1006bf4:	e1a00004 	mov	r0, r4
}
 1006bf8:	e8bd4010 	pop	{r4, lr}
    rbuf->mem_free(rbuf);
 1006bfc:	e12fff13 	bx	r3

01006c00 <rbuf_is_empty>:

bool rbuf_is_empty(Rbuf *rbuf)
{
    return (rbuf->size == 0);
 1006c00:	e5900000 	ldr	r0, [r0]
}
 1006c04:	e16f0f10 	clz	r0, r0
 1006c08:	e1a002a0 	lsr	r0, r0, #5
 1006c0c:	e12fff1e 	bx	lr

01006c10 <rbuf_size>:

size_t rbuf_size(Rbuf *rbuf)
{
  return rbuf->size;
}
 1006c10:	e5900000 	ldr	r0, [r0]
 1006c14:	e12fff1e 	bx	lr

01006c18 <rbuf_enqueue>:

void rbuf_enqueue(Rbuf *rbuf, uint64_t item)
{
 1006c18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1006c1c:	e1a09003 	mov	r9, r3
    if (rbuf->head == rbuf->tail)
 1006c20:	e5905008 	ldr	r5, [r0, #8]
{
 1006c24:	e1a04000 	mov	r4, r0
 1006c28:	e1a08002 	mov	r8, r2
    if (rbuf->head == rbuf->tail)
 1006c2c:	e590300c 	ldr	r3, [r0, #12]
 1006c30:	e5906004 	ldr	r6, [r0, #4]
       rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006c34:	e2857001 	add	r7, r5, #1
    if (rbuf->head == rbuf->tail)
 1006c38:	e1550003 	cmp	r5, r3
 1006c3c:	1a000003 	bne	1006c50 <rbuf_enqueue+0x38>
       rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006c40:	e1a01006 	mov	r1, r6
 1006c44:	e1a00007 	mov	r0, r7
 1006c48:	fa004b45 	blx	1019964 <__aeabi_uidivmod>
 1006c4c:	e584100c 	str	r1, [r4, #12]
    rbuf->buf[rbuf->head] = item;
 1006c50:	e5943010 	ldr	r3, [r4, #16]
 1006c54:	e1a05185 	lsl	r5, r5, #3
    rbuf->head = (rbuf->head + 1) % rbuf->capacity;
 1006c58:	e1a00007 	mov	r0, r7
 1006c5c:	e1a01006 	mov	r1, r6
    rbuf->buf[rbuf->head] = item;
 1006c60:	e18380f5 	strd	r8, [r3, r5]
    rbuf->head = (rbuf->head + 1) % rbuf->capacity;
 1006c64:	fa004b3e 	blx	1019964 <__aeabi_uidivmod>
    if (rbuf->size < rbuf->capacity)
 1006c68:	e5943000 	ldr	r3, [r4]
    rbuf->head = (rbuf->head + 1) % rbuf->capacity;
 1006c6c:	e5841008 	str	r1, [r4, #8]
    if (rbuf->size < rbuf->capacity)
 1006c70:	e1530006 	cmp	r3, r6
       ++rbuf->size;
 1006c74:	32833001 	addcc	r3, r3, #1
 1006c78:	35843000 	strcc	r3, [r4]
}
 1006c7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01006c80 <rbuf_dequeue>:

enum cc_stat rbuf_dequeue(Rbuf *rbuf, uint64_t *out)
{
 1006c80:	e92d4070 	push	{r4, r5, r6, lr}
    return (rbuf->size == 0);
 1006c84:	e5905000 	ldr	r5, [r0]
    if (rbuf_is_empty(rbuf))
 1006c88:	e3550000 	cmp	r5, #0
 1006c8c:	0a00000f 	beq	1006cd0 <rbuf_dequeue+0x50>
       return CC_ERR_OUT_OF_RANGE;
    *out = rbuf->buf[rbuf->tail];
 1006c90:	e590300c 	ldr	r3, [r0, #12]
 1006c94:	e1a0c001 	mov	ip, r1
 1006c98:	e5902010 	ldr	r2, [r0, #16]
 1006c9c:	e1a04000 	mov	r4, r0
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006ca0:	e5901004 	ldr	r1, [r0, #4]
    --rbuf->size;
 1006ca4:	e2455001 	sub	r5, r5, #1
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006ca8:	e2830001 	add	r0, r3, #1
    *out = rbuf->buf[rbuf->tail];
 1006cac:	e1a03183 	lsl	r3, r3, #3
 1006cb0:	e0822003 	add	r2, r2, r3
 1006cb4:	e1c220d0 	ldrd	r2, [r2]
 1006cb8:	e1cc20f0 	strd	r2, [ip]
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006cbc:	fa004b28 	blx	1019964 <__aeabi_uidivmod>
    --rbuf->size;
 1006cc0:	e5845000 	str	r5, [r4]
    return CC_OK;
 1006cc4:	e3a00000 	mov	r0, #0
    rbuf->tail = (rbuf->tail + 1) % rbuf->capacity;
 1006cc8:	e584100c 	str	r1, [r4, #12]
    return CC_OK;
 1006ccc:	e8bd8070 	pop	{r4, r5, r6, pc}
       return CC_ERR_OUT_OF_RANGE;
 1006cd0:	e3a00008 	mov	r0, #8
}
 1006cd4:	e8bd8070 	pop	{r4, r5, r6, pc}

01006cd8 <rbuf_peek>:

uint64_t rbuf_peek(Rbuf *rbuf, int index)
{
    return rbuf->buf[index];
 1006cd8:	e5903010 	ldr	r3, [r0, #16]
 1006cdc:	e1a01181 	lsl	r1, r1, #3
}
 1006ce0:	e18100d3 	ldrd	r0, [r1, r3]
 1006ce4:	e12fff1e 	bx	lr

01006ce8 <slist_conf_init>:
 *
 * @param[in] conf the SListConf struct that is being initialized.
 */
void slist_conf_init(SListConf *conf)
{
    conf->mem_alloc  = malloc;
 1006ce8:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    conf->mem_calloc = calloc;
 1006cec:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 1006cf0:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    conf->mem_alloc  = malloc;
 1006cf4:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1006cf8:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1006cfc:	e3403101 	movt	r3, #257	; 0x101
 1006d00:	e880000e 	stm	r0, {r1, r2, r3}
}
 1006d04:	e12fff1e 	bx	lr

01006d08 <slist_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new SList structure failed.
 */
enum cc_stat slist_new(SList **out)
{
 1006d08:	e92d4010 	push	{r4, lr}
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new SList structure failed.
 */
enum cc_stat slist_new_conf(SListConf const * const conf, SList **out)
{
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1006d0c:	e3a01018 	mov	r1, #24
{
 1006d10:	e1a04000 	mov	r4, r0
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1006d14:	e3a00001 	mov	r0, #1
 1006d18:	fa004da6 	blx	101a3b8 <calloc>

    if (!list)
 1006d1c:	e2503000 	subs	r3, r0, #0
 1006d20:	0a00000b 	beq	1006d54 <slist_new+0x4c>
        return CC_ERR_ALLOC;

    list->mem_alloc  = conf->mem_alloc;
 1006d24:	e30acfb9 	movw	ip, #44985	; 0xafb9
    list->mem_calloc = conf->mem_calloc;
 1006d28:	e30a13b9 	movw	r1, #41913	; 0xa3b9
    list->mem_free   = conf->mem_free;
 1006d2c:	e30a2fc9 	movw	r2, #45001	; 0xafc9
    list->mem_alloc  = conf->mem_alloc;
 1006d30:	e340c101 	movt	ip, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1006d34:	e3401101 	movt	r1, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1006d38:	e3402101 	movt	r2, #257	; 0x101

    *out = list;
 1006d3c:	e5843000 	str	r3, [r4]
    return CC_OK;
 1006d40:	e3a00000 	mov	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1006d44:	e583c00c 	str	ip, [r3, #12]
    list->mem_calloc = conf->mem_calloc;
 1006d48:	e5831010 	str	r1, [r3, #16]
    list->mem_free   = conf->mem_free;
 1006d4c:	e5832014 	str	r2, [r3, #20]
    return CC_OK;
 1006d50:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_ALLOC;
 1006d54:	e3a00001 	mov	r0, #1
}
 1006d58:	e8bd8010 	pop	{r4, pc}

01006d5c <slist_new_conf>:
{
 1006d5c:	e92d4070 	push	{r4, r5, r6, lr}
 1006d60:	e1a04000 	mov	r4, r0
 1006d64:	e1a05001 	mov	r5, r1
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1006d68:	e5903004 	ldr	r3, [r0, #4]
 1006d6c:	e3a01018 	mov	r1, #24
 1006d70:	e3a00001 	mov	r0, #1
 1006d74:	e12fff33 	blx	r3
    if (!list)
 1006d78:	e2503000 	subs	r3, r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1006d7c:	1594c000 	ldrne	ip, [r4]
    return CC_OK;
 1006d80:	13a00000 	movne	r0, #0
    list->mem_alloc  = conf->mem_alloc;
 1006d84:	19940006 	ldmibne	r4, {r1, r2}
        return CC_ERR_ALLOC;
 1006d88:	03a00001 	moveq	r0, #1
    list->mem_alloc  = conf->mem_alloc;
 1006d8c:	1583c00c 	strne	ip, [r3, #12]
 1006d90:	15831010 	strne	r1, [r3, #16]
 1006d94:	15832014 	strne	r2, [r3, #20]
    *out = list;
 1006d98:	15853000 	strne	r3, [r5]
}
 1006d9c:	e8bd8070 	pop	{r4, r5, r6, pc}

01006da0 <slist_destroy>:
 *
 * @return false if the list is already y empty, otherwise returns true
 */
static bool unlinkn_all(SList *list, void (*cb) (void*))
{
    if (list->size == 0)
 1006da0:	e5903000 	ldr	r3, [r0]
{
 1006da4:	e92d4070 	push	{r4, r5, r6, lr}
 1006da8:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 1006dac:	e3530000 	cmp	r3, #0
 1006db0:	0a00000d 	beq	1006dec <slist_destroy+0x4c>
        return false;

    SNode *n = list->head;
 1006db4:	e5900004 	ldr	r0, [r0, #4]

    while (n) {
 1006db8:	e3500000 	cmp	r0, #0
 1006dbc:	0a000007 	beq	1006de0 <slist_destroy+0x40>
        SNode *tmp = n->next;
 1006dc0:	e5905004 	ldr	r5, [r0, #4]

        if (cb)
            cb(n->data);

        list->mem_free(n);
 1006dc4:	e5943014 	ldr	r3, [r4, #20]
 1006dc8:	e12fff33 	blx	r3
        n = tmp;
        list->size--;
 1006dcc:	e5943000 	ldr	r3, [r4]
    while (n) {
 1006dd0:	e2550000 	subs	r0, r5, #0
        list->size--;
 1006dd4:	e2433001 	sub	r3, r3, #1
 1006dd8:	e5843000 	str	r3, [r4]
    while (n) {
 1006ddc:	1afffff7 	bne	1006dc0 <slist_destroy+0x20>
        list->head = NULL;
 1006de0:	e3a03000 	mov	r3, #0
 1006de4:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1006de8:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1006dec:	e5943014 	ldr	r3, [r4, #20]
 1006df0:	e1a00004 	mov	r0, r4
}
 1006df4:	e8bd4070 	pop	{r4, r5, r6, lr}
    list->mem_free(list);
 1006df8:	e12fff13 	bx	r3

01006dfc <slist_destroy_cb>:
    if (list->size == 0)
 1006dfc:	e5903000 	ldr	r3, [r0]
{
 1006e00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006e04:	e1a04000 	mov	r4, r0
    if (list->size == 0)
 1006e08:	e3530000 	cmp	r3, #0
 1006e0c:	0a000012 	beq	1006e5c <slist_destroy_cb+0x60>
    SNode *n = list->head;
 1006e10:	e5905004 	ldr	r5, [r0, #4]
    while (n) {
 1006e14:	e3550000 	cmp	r5, #0
 1006e18:	0a00000c 	beq	1006e50 <slist_destroy_cb+0x54>
 1006e1c:	e3510000 	cmp	r1, #0
 1006e20:	e1a07001 	mov	r7, r1
 1006e24:	0a000010 	beq	1006e6c <slist_destroy_cb+0x70>
        SNode *tmp = n->next;
 1006e28:	e8950041 	ldm	r5, {r0, r6}
            cb(n->data);
 1006e2c:	e12fff37 	blx	r7
        list->mem_free(n);
 1006e30:	e1a00005 	mov	r0, r5
 1006e34:	e5943014 	ldr	r3, [r4, #20]
 1006e38:	e12fff33 	blx	r3
        list->size--;
 1006e3c:	e5943000 	ldr	r3, [r4]
    while (n) {
 1006e40:	e2565000 	subs	r5, r6, #0
        list->size--;
 1006e44:	e2433001 	sub	r3, r3, #1
 1006e48:	e5843000 	str	r3, [r4]
    while (n) {
 1006e4c:	1afffff5 	bne	1006e28 <slist_destroy_cb+0x2c>
        list->head = NULL;
 1006e50:	e3a03000 	mov	r3, #0
 1006e54:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1006e58:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1006e5c:	e5943014 	ldr	r3, [r4, #20]
 1006e60:	e1a00004 	mov	r0, r4
}
 1006e64:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    list->mem_free(list);
 1006e68:	e12fff13 	bx	r3
        SNode *tmp = n->next;
 1006e6c:	e5956004 	ldr	r6, [r5, #4]
        list->mem_free(n);
 1006e70:	e1a00005 	mov	r0, r5
 1006e74:	e5943014 	ldr	r3, [r4, #20]
 1006e78:	e12fff33 	blx	r3
        list->size--;
 1006e7c:	e5943000 	ldr	r3, [r4]
    while (n) {
 1006e80:	e2565000 	subs	r5, r6, #0
        list->size--;
 1006e84:	e2433001 	sub	r3, r3, #1
 1006e88:	e5843000 	str	r3, [r4]
    while (n) {
 1006e8c:	1afffff6 	bne	1006e6c <slist_destroy_cb+0x70>
 1006e90:	eaffffee 	b	1006e50 <slist_destroy_cb+0x54>

01006e94 <slist_add>:
{
 1006e94:	e92d4070 	push	{r4, r5, r6, lr}
 1006e98:	e1a04000 	mov	r4, r0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006e9c:	e5903010 	ldr	r3, [r0, #16]
{
 1006ea0:	e1a05001 	mov	r5, r1
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006ea4:	e3a00001 	mov	r0, #1
 1006ea8:	e3a01008 	mov	r1, #8
 1006eac:	e12fff33 	blx	r3
    if (!node)
 1006eb0:	e3500000 	cmp	r0, #0
 1006eb4:	0a00000a 	beq	1006ee4 <slist_add+0x50>
    if (list->size == 0) {
 1006eb8:	e5943000 	ldr	r3, [r4]
    node->data = element;
 1006ebc:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 1006ec0:	e3530000 	cmp	r3, #0
    list->size++;
 1006ec4:	e2833001 	add	r3, r3, #1
        list->tail->next = node;
 1006ec8:	15942008 	ldrne	r2, [r4, #8]
        list->head       = node;
 1006ecc:	05840004 	streq	r0, [r4, #4]
        list->tail->next = node;
 1006ed0:	15820004 	strne	r0, [r2, #4]
        list->tail       = node;
 1006ed4:	e5840008 	str	r0, [r4, #8]
    return CC_OK;
 1006ed8:	e3a00000 	mov	r0, #0
    list->size++;
 1006edc:	e5843000 	str	r3, [r4]
    return CC_OK;
 1006ee0:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1006ee4:	e3a00001 	mov	r0, #1
}
 1006ee8:	e8bd8070 	pop	{r4, r5, r6, pc}

01006eec <slist_add_first>:
{
 1006eec:	e92d4070 	push	{r4, r5, r6, lr}
 1006ef0:	e1a04000 	mov	r4, r0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006ef4:	e5903010 	ldr	r3, [r0, #16]
{
 1006ef8:	e1a05001 	mov	r5, r1
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1006efc:	e3a00001 	mov	r0, #1
 1006f00:	e3a01008 	mov	r1, #8
 1006f04:	e12fff33 	blx	r3
    if (!node)
 1006f08:	e3500000 	cmp	r0, #0
 1006f0c:	0a00000b 	beq	1006f40 <slist_add_first+0x54>
    if (list->size == 0) {
 1006f10:	e5943000 	ldr	r3, [r4]
    node->data = element;
 1006f14:	e5805000 	str	r5, [r0]
    if (list->size == 0) {
 1006f18:	e3530000 	cmp	r3, #0
    list->size++;
 1006f1c:	e2833001 	add	r3, r3, #1
        node->next = list->head;
 1006f20:	15942004 	ldrne	r2, [r4, #4]
        list->head = node;
 1006f24:	05840004 	streq	r0, [r4, #4]
        list->tail = node;
 1006f28:	05840008 	streq	r0, [r4, #8]
        node->next = list->head;
 1006f2c:	15802004 	strne	r2, [r0, #4]
        list->head = node;
 1006f30:	15840004 	strne	r0, [r4, #4]
    return CC_OK;
 1006f34:	e3a00000 	mov	r0, #0
    list->size++;
 1006f38:	e5843000 	str	r3, [r4]
    return CC_OK;
 1006f3c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1006f40:	e3a00001 	mov	r0, #1
}
 1006f44:	e8bd8070 	pop	{r4, r5, r6, pc}

01006f48 <slist_add_last>:
 1006f48:	e92d4070 	push	{r4, r5, r6, lr}
 1006f4c:	e1a04000 	mov	r4, r0
 1006f50:	e5903010 	ldr	r3, [r0, #16]
 1006f54:	e1a05001 	mov	r5, r1
 1006f58:	e3a00001 	mov	r0, #1
 1006f5c:	e3a01008 	mov	r1, #8
 1006f60:	e12fff33 	blx	r3
 1006f64:	e3500000 	cmp	r0, #0
 1006f68:	0a00000a 	beq	1006f98 <slist_add_last+0x50>
 1006f6c:	e5943000 	ldr	r3, [r4]
 1006f70:	e5805000 	str	r5, [r0]
 1006f74:	e3530000 	cmp	r3, #0
 1006f78:	e2833001 	add	r3, r3, #1
 1006f7c:	15942008 	ldrne	r2, [r4, #8]
 1006f80:	05840004 	streq	r0, [r4, #4]
 1006f84:	15820004 	strne	r0, [r2, #4]
 1006f88:	e5840008 	str	r0, [r4, #8]
 1006f8c:	e3a00000 	mov	r0, #0
 1006f90:	e5843000 	str	r3, [r4]
 1006f94:	e8bd8070 	pop	{r4, r5, r6, pc}
 1006f98:	e3a00001 	mov	r0, #1
 1006f9c:	e8bd8070 	pop	{r4, r5, r6, pc}

01006fa0 <slist_add_at>:
 * was out of range.
 */
static enum cc_stat
get_node_at(SList *list, size_t index, SNode **node, SNode **prev)
{
    if (index >= list->size)
 1006fa0:	e5903000 	ldr	r3, [r0]
 1006fa4:	e1520003 	cmp	r2, r3
 1006fa8:	2a00001d 	bcs	1007024 <slist_add_at+0x84>

    *node = list->head;
    *prev = NULL;

    size_t i;
    for (i = 0; i < index; i++) {
 1006fac:	e3520000 	cmp	r2, #0
{
 1006fb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1006fb4:	e1a06001 	mov	r6, r1
 1006fb8:	e1a04000 	mov	r4, r0
    *node = list->head;
 1006fbc:	e5905004 	ldr	r5, [r0, #4]
    for (i = 0; i < index; i++) {
 1006fc0:	e5907010 	ldr	r7, [r0, #16]
 1006fc4:	0a000018 	beq	100702c <slist_add_at+0x8c>
 1006fc8:	e3a03000 	mov	r3, #0
 1006fcc:	ea000000 	b	1006fd4 <slist_add_at+0x34>
        *prev = *node;
        *node = (*node)->next;
 1006fd0:	e1a05000 	mov	r5, r0
    for (i = 0; i < index; i++) {
 1006fd4:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1006fd8:	e5950004 	ldr	r0, [r5, #4]
    for (i = 0; i < index; i++) {
 1006fdc:	e1520003 	cmp	r2, r3
 1006fe0:	1afffffa 	bne	1006fd0 <slist_add_at+0x30>
    SNode *new = list->mem_calloc(1, sizeof(SNode));
 1006fe4:	e3a01008 	mov	r1, #8
 1006fe8:	e3a00001 	mov	r0, #1
 1006fec:	e12fff37 	blx	r7
    if (!new)
 1006ff0:	e3500000 	cmp	r0, #0
 1006ff4:	0a000008 	beq	100701c <slist_add_at+0x7c>
        SNode *tmp = prev->next;
 1006ff8:	e5953004 	ldr	r3, [r5, #4]
    new->data = element;
 1006ffc:	e5806000 	str	r6, [r0]
        prev->next = new;
 1007000:	e5850004 	str	r0, [r5, #4]
        new->next  = tmp;
 1007004:	e5803004 	str	r3, [r0, #4]
    list->size++;
 1007008:	e5943000 	ldr	r3, [r4]
    return CC_OK;
 100700c:	e3a00000 	mov	r0, #0
    list->size++;
 1007010:	e2833001 	add	r3, r3, #1
 1007014:	e5843000 	str	r3, [r4]
    return CC_OK;
 1007018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 100701c:	e3a00001 	mov	r0, #1
}
 1007020:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (index >= list->size)
 1007024:	e3a00008 	mov	r0, #8
}
 1007028:	e12fff1e 	bx	lr
    SNode *new = list->mem_calloc(1, sizeof(SNode));
 100702c:	e3a01008 	mov	r1, #8
 1007030:	e3a00001 	mov	r0, #1
 1007034:	e12fff37 	blx	r7
    if (!new)
 1007038:	e3500000 	cmp	r0, #0
 100703c:	0afffff6 	beq	100701c <slist_add_at+0x7c>
        new->next  = list->head;
 1007040:	e5943004 	ldr	r3, [r4, #4]
    new->data = element;
 1007044:	e5806000 	str	r6, [r0]
        new->next  = list->head;
 1007048:	e5803004 	str	r3, [r0, #4]
        list->head = new;
 100704c:	e5840004 	str	r0, [r4, #4]
 1007050:	eaffffec 	b	1007008 <slist_add_at+0x68>

01007054 <slist_add_all>:
    if (list2->size == 0)
 1007054:	e5913000 	ldr	r3, [r1]
 1007058:	e3530000 	cmp	r3, #0
 100705c:	1a000001 	bne	1007068 <slist_add_all+0x14>
        return CC_OK;
 1007060:	e1a00003 	mov	r0, r3
}
 1007064:	e12fff1e 	bx	lr
{
 1007068:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    SNode *tail = NULL;
 100706c:	e3a09000 	mov	r9, #0
 1007070:	e1a08000 	mov	r8, r0
 1007074:	e1a04001 	mov	r4, r1
    SNode *head = NULL;
 1007078:	e1a06009 	mov	r6, r9
    for (i = 0; i < list->size; i++) {
 100707c:	e1a05009 	mov	r5, r9
    SNode *ins = list->head;
 1007080:	e5917004 	ldr	r7, [r1, #4]
    for (i = 0; i < list->size; i++) {
 1007084:	ea000004 	b	100709c <slist_add_all+0x48>
 1007088:	e1520005 	cmp	r2, r5
            (*t)->next = new;
 100708c:	e5890004 	str	r0, [r9, #4]
        ins = ins->next;
 1007090:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 1007094:	9a000010 	bls	10070dc <slist_add_all+0x88>
 1007098:	e1a09000 	mov	r9, r0
        SNode *new = list->mem_calloc(1, sizeof(SNode));
 100709c:	e5943010 	ldr	r3, [r4, #16]
 10070a0:	e3a01008 	mov	r1, #8
 10070a4:	e3a00001 	mov	r0, #1
 10070a8:	e12fff33 	blx	r3
        if (!new) {
 10070ac:	e3500000 	cmp	r0, #0
 10070b0:	0a000012 	beq	1007100 <slist_add_all+0xac>
        new->data = ins->data;
 10070b4:	e5972000 	ldr	r2, [r7]
        if (!*h) {
 10070b8:	e3560000 	cmp	r6, #0
    for (i = 0; i < list->size; i++) {
 10070bc:	e2855001 	add	r5, r5, #1
        new->data = ins->data;
 10070c0:	e5802000 	str	r2, [r0]
    for (i = 0; i < list->size; i++) {
 10070c4:	e5942000 	ldr	r2, [r4]
        if (!*h) {
 10070c8:	1affffee 	bne	1007088 <slist_add_all+0x34>
    for (i = 0; i < list->size; i++) {
 10070cc:	e1550002 	cmp	r5, r2
 10070d0:	e1a06000 	mov	r6, r0
        ins = ins->next;
 10070d4:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 10070d8:	3affffee 	bcc	1007098 <slist_add_all+0x44>
    if (list1->size == 0) {
 10070dc:	e5981000 	ldr	r1, [r8]
 10070e0:	e3510000 	cmp	r1, #0
        list1->head = head;
 10070e4:	05886004 	streq	r6, [r8, #4]
        list1->tail = tail;
 10070e8:	05880008 	streq	r0, [r8, #8]
    if (list1->size == 0) {
 10070ec:	1a00000d 	bne	1007128 <slist_add_all+0xd4>
    list1->size += list2->size;
 10070f0:	e0812002 	add	r2, r1, r2
    return CC_OK;
 10070f4:	e3a00000 	mov	r0, #0
    list1->size += list2->size;
 10070f8:	e5882000 	str	r2, [r8]
}
 10070fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            while (*h) {
 1007100:	e3560000 	cmp	r6, #0
 1007104:	0a000005 	beq	1007120 <slist_add_all+0xcc>
                SNode *tmp = (*h)->next;
 1007108:	e5965004 	ldr	r5, [r6, #4]
                list->mem_free(*h);
 100710c:	e1a00006 	mov	r0, r6
 1007110:	e5943014 	ldr	r3, [r4, #20]
 1007114:	e12fff33 	blx	r3
            while (*h) {
 1007118:	e2556000 	subs	r6, r5, #0
 100711c:	1afffff9 	bne	1007108 <slist_add_all+0xb4>
        return CC_ERR_ALLOC;
 1007120:	e3a00001 	mov	r0, #1
 1007124:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list1->tail->next = head;
 1007128:	e5983008 	ldr	r3, [r8, #8]
 100712c:	e5836004 	str	r6, [r3, #4]
        list1->tail = tail;
 1007130:	e5880008 	str	r0, [r8, #8]
 1007134:	eaffffed 	b	10070f0 <slist_add_all+0x9c>

01007138 <slist_add_all_at>:
{
 1007138:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (list2->size == 0)
 100713c:	e5913000 	ldr	r3, [r1]
 1007140:	e3530000 	cmp	r3, #0
 1007144:	0a000031 	beq	1007210 <slist_add_all_at+0xd8>
    if (index >= list->size)
 1007148:	e5903000 	ldr	r3, [r0]
 100714c:	e1520003 	cmp	r2, r3
 1007150:	2a000033 	bcs	1007224 <slist_add_all_at+0xec>
    for (i = 0; i < index; i++) {
 1007154:	e3520000 	cmp	r2, #0
    *node = list->head;
 1007158:	e5909004 	ldr	r9, [r0, #4]
    for (i = 0; i < index; i++) {
 100715c:	0a00002d 	beq	1007218 <slist_add_all_at+0xe0>
 1007160:	e3a03000 	mov	r3, #0
 1007164:	ea000000 	b	100716c <slist_add_all_at+0x34>
        *node = (*node)->next;
 1007168:	e1a0900a 	mov	r9, sl
    for (i = 0; i < index; i++) {
 100716c:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1007170:	e599a004 	ldr	sl, [r9, #4]
    for (i = 0; i < index; i++) {
 1007174:	e1520003 	cmp	r2, r3
 1007178:	1afffffa 	bne	1007168 <slist_add_all_at+0x30>
    for (i = 0; i < list->size; i++) {
 100717c:	e3a0b000 	mov	fp, #0
 1007180:	e1a08000 	mov	r8, r0
 1007184:	e1a04001 	mov	r4, r1
 1007188:	e5917004 	ldr	r7, [r1, #4]
 100718c:	e1a0500b 	mov	r5, fp
 1007190:	e1a0600b 	mov	r6, fp
 1007194:	ea000004 	b	10071ac <slist_add_all_at+0x74>
 1007198:	e1560003 	cmp	r6, r3
            (*t)->next = new;
 100719c:	e58b0004 	str	r0, [fp, #4]
        ins = ins->next;
 10071a0:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 10071a4:	2a000010 	bcs	10071ec <slist_add_all_at+0xb4>
 10071a8:	e1a0b000 	mov	fp, r0
        SNode *new = list->mem_calloc(1, sizeof(SNode));
 10071ac:	e5943010 	ldr	r3, [r4, #16]
 10071b0:	e3a01008 	mov	r1, #8
 10071b4:	e3a00001 	mov	r0, #1
 10071b8:	e12fff33 	blx	r3
        if (!new) {
 10071bc:	e3500000 	cmp	r0, #0
 10071c0:	0a000019 	beq	100722c <slist_add_all_at+0xf4>
        new->data = ins->data;
 10071c4:	e5973000 	ldr	r3, [r7]
        if (!*h) {
 10071c8:	e3550000 	cmp	r5, #0
    for (i = 0; i < list->size; i++) {
 10071cc:	e2866001 	add	r6, r6, #1
        new->data = ins->data;
 10071d0:	e5803000 	str	r3, [r0]
    for (i = 0; i < list->size; i++) {
 10071d4:	e5943000 	ldr	r3, [r4]
        if (!*h) {
 10071d8:	1affffee 	bne	1007198 <slist_add_all_at+0x60>
    for (i = 0; i < list->size; i++) {
 10071dc:	e1560003 	cmp	r6, r3
 10071e0:	e1a05000 	mov	r5, r0
        ins = ins->next;
 10071e4:	e5977004 	ldr	r7, [r7, #4]
    for (i = 0; i < list->size; i++) {
 10071e8:	3affffee 	bcc	10071a8 <slist_add_all_at+0x70>
    if (!prev) {
 10071ec:	e3590000 	cmp	r9, #0
        prev->next = head;
 10071f0:	15895004 	strne	r5, [r9, #4]
        tail->next = node;
 10071f4:	1580a004 	strne	sl, [r0, #4]
    if (!prev) {
 10071f8:	0a000015 	beq	1007254 <slist_add_all_at+0x11c>
    list1->size += list2->size;
 10071fc:	e5982000 	ldr	r2, [r8]
    return CC_OK;
 1007200:	e3a00000 	mov	r0, #0
    list1->size += list2->size;
 1007204:	e0823003 	add	r3, r2, r3
 1007208:	e5883000 	str	r3, [r8]
    return CC_OK;
 100720c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CC_OK;
 1007210:	e1a00003 	mov	r0, r3
 1007214:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *node = list->head;
 1007218:	e1a0a009 	mov	sl, r9
    SNode *prev = NULL;
 100721c:	e1a09002 	mov	r9, r2
 1007220:	eaffffd5 	b	100717c <slist_add_all_at+0x44>
    if (index >= list->size)
 1007224:	e3a00008 	mov	r0, #8
}
 1007228:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while (*h) {
 100722c:	e3550000 	cmp	r5, #0
 1007230:	0a000005 	beq	100724c <slist_add_all_at+0x114>
                SNode *tmp = (*h)->next;
 1007234:	e5956004 	ldr	r6, [r5, #4]
                list->mem_free(*h);
 1007238:	e1a00005 	mov	r0, r5
 100723c:	e5943014 	ldr	r3, [r4, #20]
 1007240:	e12fff33 	blx	r3
            while (*h) {
 1007244:	e2565000 	subs	r5, r6, #0
 1007248:	1afffff9 	bne	1007234 <slist_add_all_at+0xfc>
        return CC_ERR_ALLOC;
 100724c:	e3a00001 	mov	r0, #1
 1007250:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tail->next  = node;
 1007254:	e580a004 	str	sl, [r0, #4]
        list1->head = head;
 1007258:	e5885004 	str	r5, [r8, #4]
 100725c:	eaffffe6 	b	10071fc <slist_add_all_at+0xc4>

01007260 <slist_splice>:
    if (list2->size == 0)
 1007260:	e5913000 	ldr	r3, [r1]
 1007264:	e3530000 	cmp	r3, #0
 1007268:	0a000010 	beq	10072b0 <slist_splice+0x50>
    if (list1->size == 0) {
 100726c:	e5902000 	ldr	r2, [r0]
{
 1007270:	e92d4010 	push	{r4, lr}
 1007274:	e591c008 	ldr	ip, [r1, #8]
    if (list1->size == 0) {
 1007278:	e3520000 	cmp	r2, #0
    list1->size += list2->size;
 100727c:	e0833002 	add	r3, r3, r2
        list1->tail->next = list2->head;
 1007280:	15904008 	ldrne	r4, [r0, #8]
    list2->head = NULL;
 1007284:	e3a02000 	mov	r2, #0
 1007288:	e591e004 	ldr	lr, [r1, #4]
        list1->tail->next = list2->head;
 100728c:	1584e004 	strne	lr, [r4, #4]
        list1->head = list2->head;
 1007290:	0580e004 	streq	lr, [r0, #4]
        list1->tail = list2->tail;
 1007294:	e580c008 	str	ip, [r0, #8]
    list1->size += list2->size;
 1007298:	e5803000 	str	r3, [r0]
}
 100729c:	e3a00000 	mov	r0, #0
    list2->head = NULL;
 10072a0:	e5812004 	str	r2, [r1, #4]
    list2->tail = NULL;
 10072a4:	e5812008 	str	r2, [r1, #8]
    list2->size = 0;
 10072a8:	e5812000 	str	r2, [r1]
}
 10072ac:	e8bd8010 	pop	{r4, pc}
 10072b0:	e3a00000 	mov	r0, #0
 10072b4:	e12fff1e 	bx	lr

010072b8 <slist_splice_at>:
    if (list2->size == 0)
 10072b8:	e5913000 	ldr	r3, [r1]
 10072bc:	e3530000 	cmp	r3, #0
 10072c0:	0a00001f 	beq	1007344 <slist_splice_at+0x8c>
{
 10072c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if (index >= list1->size)
 10072c8:	e5905000 	ldr	r5, [r0]
 10072cc:	e1550002 	cmp	r5, r2
 10072d0:	9a000019 	bls	100733c <slist_splice_at+0x84>
    for (i = 0; i < index; i++) {
 10072d4:	e3520000 	cmp	r2, #0
    *node = list->head;
 10072d8:	e590e004 	ldr	lr, [r0, #4]
    for (i = 0; i < index; i++) {
 10072dc:	e5916008 	ldr	r6, [r1, #8]
 10072e0:	e5917004 	ldr	r7, [r1, #4]
 10072e4:	0a000018 	beq	100734c <slist_splice_at+0x94>
 10072e8:	e3a0c000 	mov	ip, #0
 10072ec:	ea000000 	b	10072f4 <slist_splice_at+0x3c>
        *node = (*node)->next;
 10072f0:	e1a0e004 	mov	lr, r4
    for (i = 0; i < index; i++) {
 10072f4:	e28cc001 	add	ip, ip, #1
        *node = (*node)->next;
 10072f8:	e59e4004 	ldr	r4, [lr, #4]
    for (i = 0; i < index; i++) {
 10072fc:	e152000c 	cmp	r2, ip
 1007300:	1afffffa 	bne	10072f0 <slist_splice_at+0x38>
    } else if (!end) {
 1007304:	e3540000 	cmp	r4, #0
        l1->tail->next = l2->head;
 1007308:	05902008 	ldreq	r2, [r0, #8]
        base->next = l2->head;
 100730c:	158e7004 	strne	r7, [lr, #4]
        l2->tail->next = end;
 1007310:	15864004 	strne	r4, [r6, #4]
        l1->tail->next = l2->head;
 1007314:	05827004 	streq	r7, [r2, #4]
        l1->tail = l2->tail;
 1007318:	05806008 	streq	r6, [r0, #8]
    l2->head = NULL;
 100731c:	e3a02000 	mov	r2, #0
    l1->size += l2->size;
 1007320:	e0833005 	add	r3, r3, r5
 1007324:	e5803000 	str	r3, [r0]
    return CC_OK;
 1007328:	e1a00002 	mov	r0, r2
    l2->head = NULL;
 100732c:	e5812004 	str	r2, [r1, #4]
    l2->tail = NULL;
 1007330:	e5812008 	str	r2, [r1, #8]
    l2->size = 0;
 1007334:	e5812000 	str	r2, [r1]
    return CC_OK;
 1007338:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ERR_OUT_OF_RANGE;
 100733c:	e3a00008 	mov	r0, #8
}
 1007340:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_OK;
 1007344:	e1a00003 	mov	r0, r3
}
 1007348:	e12fff1e 	bx	lr
        l2->tail->next = l1->head;
 100734c:	e586e004 	str	lr, [r6, #4]
        l1->head = l2->head;
 1007350:	e5807004 	str	r7, [r0, #4]
 1007354:	eafffff0 	b	100731c <slist_splice_at+0x64>

01007358 <slist_remove>:
{
 1007358:	e92d4070 	push	{r4, r5, r6, lr}
    enum cc_stat status = get_node(list, element, &node, &prev);
 100735c:	e590e004 	ldr	lr, [r0, #4]
get_node(SList *list, void *element, SNode **node, SNode **prev)
{
   *node = list->head;
   *prev = NULL;

    while (*node) {
 1007360:	e35e0000 	cmp	lr, #0
 1007364:	0a000011 	beq	10073b0 <slist_remove+0x58>
        if ((*node)->data == element)
 1007368:	e89e0018 	ldm	lr, {r3, r4}
 100736c:	e1510003 	cmp	r1, r3
 1007370:	0a000024 	beq	1007408 <slist_remove+0xb0>
    while (*node) {
 1007374:	e3540000 	cmp	r4, #0
 1007378:	0a00000c 	beq	10073b0 <slist_remove+0x58>
        if ((*node)->data == element)
 100737c:	e594c000 	ldr	ip, [r4]
 1007380:	e5943004 	ldr	r3, [r4, #4]
 1007384:	e151000c 	cmp	r1, ip
 1007388:	1a000006 	bne	10073a8 <slist_remove+0x50>
 100738c:	ea000009 	b	10073b8 <slist_remove+0x60>
 1007390:	e593e000 	ldr	lr, [r3]
 1007394:	e593c004 	ldr	ip, [r3, #4]
 1007398:	e151000e 	cmp	r1, lr
 100739c:	0a000008 	beq	10073c4 <slist_remove+0x6c>
 10073a0:	e1a04003 	mov	r4, r3
 10073a4:	e1a0300c 	mov	r3, ip
    while (*node) {
 10073a8:	e3530000 	cmp	r3, #0
 10073ac:	1afffff7 	bne	1007390 <slist_remove+0x38>
            return CC_OK;

        *prev = *node;
        *node = (*node)->next;
    }
    return CC_ERR_VALUE_NOT_FOUND;
 10073b0:	e3a00007 	mov	r0, #7
 10073b4:	e8bd8070 	pop	{r4, r5, r6, pc}
        if ((*node)->data == element)
 10073b8:	e1a0c003 	mov	ip, r3
 10073bc:	e1a03004 	mov	r3, r4
 10073c0:	e1a0400e 	mov	r4, lr
        prev->next = node->next;
 10073c4:	e584c004 	str	ip, [r4, #4]
 10073c8:	e593c004 	ldr	ip, [r3, #4]
    if (!node->next)
 10073cc:	e1a06000 	mov	r6, r0
 10073d0:	e35c0000 	cmp	ip, #0
        list->tail = prev;
 10073d4:	05804008 	streq	r4, [r0, #8]
    list->mem_free(node);
 10073d8:	e1a00003 	mov	r0, r3
 10073dc:	e5963014 	ldr	r3, [r6, #20]
 10073e0:	e1a05002 	mov	r5, r2
 10073e4:	e1a04001 	mov	r4, r1
 10073e8:	e12fff33 	blx	r3
    list->size--;
 10073ec:	e5963000 	ldr	r3, [r6]
    if (out)
 10073f0:	e3550000 	cmp	r5, #0
    return CC_OK;
 10073f4:	e3a00000 	mov	r0, #0
    list->size--;
 10073f8:	e2433001 	sub	r3, r3, #1
 10073fc:	e5863000 	str	r3, [r6]
        *out = val;
 1007400:	15854000 	strne	r4, [r5]
 1007404:	e8bd8070 	pop	{r4, r5, r6, pc}
        list->head = node->next;
 1007408:	e5804004 	str	r4, [r0, #4]
 100740c:	e1a0c004 	mov	ip, r4
 1007410:	e1a0300e 	mov	r3, lr
 1007414:	e3a04000 	mov	r4, #0
 1007418:	eaffffeb 	b	10073cc <slist_remove+0x74>

0100741c <slist_remove_at>:
    if (index >= list->size)
 100741c:	e5903000 	ldr	r3, [r0]
 1007420:	e1510003 	cmp	r1, r3
 1007424:	2a00001d 	bcs	10074a0 <slist_remove_at+0x84>
{
 1007428:	e92d4070 	push	{r4, r5, r6, lr}
    for (i = 0; i < index; i++) {
 100742c:	e3510000 	cmp	r1, #0
    *node = list->head;
 1007430:	e590e004 	ldr	lr, [r0, #4]
    for (i = 0; i < index; i++) {
 1007434:	e59e3004 	ldr	r3, [lr, #4]
 1007438:	0a00001a 	beq	10074a8 <slist_remove_at+0x8c>
 100743c:	e3a0c000 	mov	ip, #0
 1007440:	ea000001 	b	100744c <slist_remove_at+0x30>
 1007444:	e1a0e003 	mov	lr, r3
 1007448:	e1a03004 	mov	r3, r4
 100744c:	e28cc001 	add	ip, ip, #1
 1007450:	e5934004 	ldr	r4, [r3, #4]
 1007454:	e151000c 	cmp	r1, ip
 1007458:	1afffff9 	bne	1007444 <slist_remove_at+0x28>
    void *data = node->data;
 100745c:	e5936000 	ldr	r6, [r3]
        prev->next = node->next;
 1007460:	e58e4004 	str	r4, [lr, #4]
 1007464:	e593c004 	ldr	ip, [r3, #4]
    if (!node->next)
 1007468:	e1a04000 	mov	r4, r0
 100746c:	e35c0000 	cmp	ip, #0
        list->tail = prev;
 1007470:	0580e008 	streq	lr, [r0, #8]
    list->mem_free(node);
 1007474:	e1a00003 	mov	r0, r3
 1007478:	e5943014 	ldr	r3, [r4, #20]
 100747c:	e1a05002 	mov	r5, r2
 1007480:	e12fff33 	blx	r3
    list->size--;
 1007484:	e5943000 	ldr	r3, [r4]
    if (out)
 1007488:	e3550000 	cmp	r5, #0
    return CC_OK;
 100748c:	e3a00000 	mov	r0, #0
    list->size--;
 1007490:	e2433001 	sub	r3, r3, #1
 1007494:	e5843000 	str	r3, [r4]
        *out = e;
 1007498:	15856000 	strne	r6, [r5]
 100749c:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (index >= list->size)
 10074a0:	e3a00008 	mov	r0, #8
}
 10074a4:	e12fff1e 	bx	lr
    void *data = node->data;
 10074a8:	e59e6000 	ldr	r6, [lr]
        list->head = node->next;
 10074ac:	e1a0c003 	mov	ip, r3
 10074b0:	e5803004 	str	r3, [r0, #4]
 10074b4:	e1a0300e 	mov	r3, lr
 10074b8:	e1a0e001 	mov	lr, r1
 10074bc:	eaffffe9 	b	1007468 <slist_remove_at+0x4c>

010074c0 <slist_remove_first>:
    if (list->size == 0)
 10074c0:	e5903000 	ldr	r3, [r0]
 10074c4:	e3530000 	cmp	r3, #0
 10074c8:	0a000012 	beq	1007518 <slist_remove_first+0x58>
    void *e = unlinkn(list, list->head, NULL);
 10074cc:	e5903004 	ldr	r3, [r0, #4]
{
 10074d0:	e92d4070 	push	{r4, r5, r6, lr}
 10074d4:	e1a04000 	mov	r4, r0
 10074d8:	e1a05001 	mov	r5, r1
        list->head = node->next;
 10074dc:	e5932004 	ldr	r2, [r3, #4]
    void *data = node->data;
 10074e0:	e5936000 	ldr	r6, [r3]
    if (!node->next)
 10074e4:	e3520000 	cmp	r2, #0
        list->head = node->next;
 10074e8:	e5802004 	str	r2, [r0, #4]
        list->tail = prev;
 10074ec:	05802008 	streq	r2, [r0, #8]
    list->mem_free(node);
 10074f0:	e1a00003 	mov	r0, r3
 10074f4:	e5943014 	ldr	r3, [r4, #20]
 10074f8:	e12fff33 	blx	r3
    list->size--;
 10074fc:	e5943000 	ldr	r3, [r4]
    if (out)
 1007500:	e3550000 	cmp	r5, #0
    return CC_OK;
 1007504:	e3a00000 	mov	r0, #0
    list->size--;
 1007508:	e2433001 	sub	r3, r3, #1
 100750c:	e5843000 	str	r3, [r4]
        *out = e;
 1007510:	15856000 	strne	r6, [r5]
 1007514:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1007518:	e3a00007 	mov	r0, #7
}
 100751c:	e12fff1e 	bx	lr

01007520 <slist_remove_last>:
    if (list->size == 0)
 1007520:	e5903000 	ldr	r3, [r0]
 1007524:	e3530000 	cmp	r3, #0
 1007528:	0a00001d 	beq	10075a4 <slist_remove_last+0x84>
{
 100752c:	e92d4070 	push	{r4, r5, r6, lr}
    for (i = 0; i < index; i++) {
 1007530:	e2532001 	subs	r2, r3, #1
    *node = list->head;
 1007534:	e590e004 	ldr	lr, [r0, #4]
    for (i = 0; i < index; i++) {
 1007538:	e59e3004 	ldr	r3, [lr, #4]
 100753c:	0a00001a 	beq	10075ac <slist_remove_last+0x8c>
 1007540:	e3a0c000 	mov	ip, #0
 1007544:	ea000001 	b	1007550 <slist_remove_last+0x30>
 1007548:	e1a0e003 	mov	lr, r3
 100754c:	e1a03004 	mov	r3, r4
 1007550:	e28cc001 	add	ip, ip, #1
 1007554:	e5934004 	ldr	r4, [r3, #4]
 1007558:	e152000c 	cmp	r2, ip
 100755c:	1afffff9 	bne	1007548 <slist_remove_last+0x28>
    void *data = node->data;
 1007560:	e5936000 	ldr	r6, [r3]
        prev->next = node->next;
 1007564:	e58e4004 	str	r4, [lr, #4]
 1007568:	e593c004 	ldr	ip, [r3, #4]
    if (!node->next)
 100756c:	e1a04000 	mov	r4, r0
 1007570:	e35c0000 	cmp	ip, #0
        list->tail = prev;
 1007574:	0580e008 	streq	lr, [r0, #8]
    list->mem_free(node);
 1007578:	e1a00003 	mov	r0, r3
 100757c:	e5943014 	ldr	r3, [r4, #20]
 1007580:	e1a05001 	mov	r5, r1
 1007584:	e12fff33 	blx	r3
    list->size--;
 1007588:	e5943000 	ldr	r3, [r4]
    if (out)
 100758c:	e3550000 	cmp	r5, #0
    return CC_OK;
 1007590:	e3a00000 	mov	r0, #0
    list->size--;
 1007594:	e2433001 	sub	r3, r3, #1
 1007598:	e5843000 	str	r3, [r4]
        *out = e;
 100759c:	15856000 	strne	r6, [r5]
 10075a0:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10075a4:	e3a00007 	mov	r0, #7
}
 10075a8:	e12fff1e 	bx	lr
    void *data = node->data;
 10075ac:	e59e6000 	ldr	r6, [lr]
        list->head = node->next;
 10075b0:	e1a0c003 	mov	ip, r3
 10075b4:	e5803004 	str	r3, [r0, #4]
 10075b8:	e1a0300e 	mov	r3, lr
 10075bc:	e1a0e002 	mov	lr, r2
 10075c0:	eaffffe9 	b	100756c <slist_remove_last+0x4c>

010075c4 <slist_remove_all>:
    if (list->size == 0)
 10075c4:	e5903000 	ldr	r3, [r0]
 10075c8:	e3530000 	cmp	r3, #0
 10075cc:	0a000011 	beq	1007618 <slist_remove_all+0x54>
{
 10075d0:	e92d4070 	push	{r4, r5, r6, lr}
 10075d4:	e1a04000 	mov	r4, r0
    SNode *n = list->head;
 10075d8:	e5900004 	ldr	r0, [r0, #4]
    while (n) {
 10075dc:	e3500000 	cmp	r0, #0
 10075e0:	0a000007 	beq	1007604 <slist_remove_all+0x40>
        SNode *tmp = n->next;
 10075e4:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 10075e8:	e5943014 	ldr	r3, [r4, #20]
 10075ec:	e12fff33 	blx	r3
        list->size--;
 10075f0:	e5943000 	ldr	r3, [r4]
    while (n) {
 10075f4:	e2550000 	subs	r0, r5, #0
        list->size--;
 10075f8:	e2433001 	sub	r3, r3, #1
 10075fc:	e5843000 	str	r3, [r4]
    while (n) {
 1007600:	1afffff7 	bne	10075e4 <slist_remove_all+0x20>
        list->head = NULL;
 1007604:	e3a03000 	mov	r3, #0
 1007608:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 100760c:	e1a00003 	mov	r0, r3
 1007610:	e5843008 	str	r3, [r4, #8]
}
 1007614:	e8bd8070 	pop	{r4, r5, r6, pc}
    return CC_ERR_VALUE_NOT_FOUND;
 1007618:	e3a00007 	mov	r0, #7
}
 100761c:	e12fff1e 	bx	lr

01007620 <slist_remove_all_cb>:
    if (list->size == 0)
 1007620:	e5903000 	ldr	r3, [r0]
 1007624:	e3530000 	cmp	r3, #0
 1007628:	0a000020 	beq	10076b0 <slist_remove_all_cb+0x90>
{
 100762c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007630:	e1a06001 	mov	r6, r1
    SNode *n = list->head;
 1007634:	e5905004 	ldr	r5, [r0, #4]
 1007638:	e1a04000 	mov	r4, r0
    while (n) {
 100763c:	e3550000 	cmp	r5, #0
 1007640:	0a00000b 	beq	1007674 <slist_remove_all_cb+0x54>
 1007644:	e3510000 	cmp	r1, #0
 1007648:	0a00000e 	beq	1007688 <slist_remove_all_cb+0x68>
        SNode *tmp = n->next;
 100764c:	e8950081 	ldm	r5, {r0, r7}
            cb(n->data);
 1007650:	e12fff36 	blx	r6
        list->mem_free(n);
 1007654:	e1a00005 	mov	r0, r5
 1007658:	e5943014 	ldr	r3, [r4, #20]
 100765c:	e12fff33 	blx	r3
        list->size--;
 1007660:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007664:	e2575000 	subs	r5, r7, #0
        list->size--;
 1007668:	e2433001 	sub	r3, r3, #1
 100766c:	e5843000 	str	r3, [r4]
    while (n) {
 1007670:	1afffff5 	bne	100764c <slist_remove_all_cb+0x2c>
        list->head = NULL;
 1007674:	e3a03000 	mov	r3, #0
 1007678:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 100767c:	e1a00003 	mov	r0, r3
 1007680:	e5843008 	str	r3, [r4, #8]
}
 1007684:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        SNode *tmp = n->next;
 1007688:	e5956004 	ldr	r6, [r5, #4]
        list->mem_free(n);
 100768c:	e1a00005 	mov	r0, r5
 1007690:	e5943014 	ldr	r3, [r4, #20]
 1007694:	e12fff33 	blx	r3
        list->size--;
 1007698:	e5943000 	ldr	r3, [r4]
    while (n) {
 100769c:	e2565000 	subs	r5, r6, #0
        list->size--;
 10076a0:	e2433001 	sub	r3, r3, #1
 10076a4:	e5843000 	str	r3, [r4]
    while (n) {
 10076a8:	1afffff6 	bne	1007688 <slist_remove_all_cb+0x68>
 10076ac:	eafffff0 	b	1007674 <slist_remove_all_cb+0x54>
    return CC_ERR_VALUE_NOT_FOUND;
 10076b0:	e3a00007 	mov	r0, #7
}
 10076b4:	e12fff1e 	bx	lr

010076b8 <slist_replace_at>:
    if (index >= list->size)
 10076b8:	e590c000 	ldr	ip, [r0]
 10076bc:	e152000c 	cmp	r2, ip
 10076c0:	2a00000d 	bcs	10076fc <slist_replace_at+0x44>
    for (i = 0; i < index; i++) {
 10076c4:	e3520000 	cmp	r2, #0
    *node = list->head;
 10076c8:	e590c004 	ldr	ip, [r0, #4]
    for (i = 0; i < index; i++) {
 10076cc:	0a000004 	beq	10076e4 <slist_replace_at+0x2c>
 10076d0:	e3a00000 	mov	r0, #0
 10076d4:	e2800001 	add	r0, r0, #1
        *node = (*node)->next;
 10076d8:	e59cc004 	ldr	ip, [ip, #4]
    for (i = 0; i < index; i++) {
 10076dc:	e1520000 	cmp	r2, r0
 10076e0:	1afffffb 	bne	10076d4 <slist_replace_at+0x1c>
    void *old = node->data;
 10076e4:	e59c2000 	ldr	r2, [ip]
    if (out)
 10076e8:	e3530000 	cmp	r3, #0
    node->data = element;
 10076ec:	e58c1000 	str	r1, [ip]
    return CC_OK;
 10076f0:	e3a00000 	mov	r0, #0
        *out = old;
 10076f4:	15832000 	strne	r2, [r3]
 10076f8:	e12fff1e 	bx	lr
    if (index >= list->size)
 10076fc:	e3a00008 	mov	r0, #8
 1007700:	e12fff1e 	bx	lr

01007704 <slist_get_first>:
    if (list->size == 0)
 1007704:	e5903000 	ldr	r3, [r0]
 1007708:	e3530000 	cmp	r3, #0
    *out = list->head->data;
 100770c:	15903004 	ldrne	r3, [r0, #4]
    return CC_OK;
 1007710:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1007714:	03a00007 	moveq	r0, #7
    *out = list->head->data;
 1007718:	15933000 	ldrne	r3, [r3]
 100771c:	15813000 	strne	r3, [r1]
}
 1007720:	e12fff1e 	bx	lr

01007724 <slist_get_last>:
    if (list->size == 0)
 1007724:	e5903000 	ldr	r3, [r0]
 1007728:	e3530000 	cmp	r3, #0
    *out = list->tail->data;
 100772c:	15903008 	ldrne	r3, [r0, #8]
    return CC_OK;
 1007730:	13a00000 	movne	r0, #0
        return CC_ERR_VALUE_NOT_FOUND;
 1007734:	03a00007 	moveq	r0, #7
    *out = list->tail->data;
 1007738:	15933000 	ldrne	r3, [r3]
 100773c:	15813000 	strne	r3, [r1]
}
 1007740:	e12fff1e 	bx	lr

01007744 <slist_get_at>:
    if (index >= list->size)
 1007744:	e5903000 	ldr	r3, [r0]
 1007748:	e1510003 	cmp	r1, r3
 100774c:	2a00000b 	bcs	1007780 <slist_get_at+0x3c>
    for (i = 0; i < index; i++) {
 1007750:	e3510000 	cmp	r1, #0
    *node = list->head;
 1007754:	e5900004 	ldr	r0, [r0, #4]
    for (i = 0; i < index; i++) {
 1007758:	0a000004 	beq	1007770 <slist_get_at+0x2c>
 100775c:	e3a03000 	mov	r3, #0
 1007760:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1007764:	e5900004 	ldr	r0, [r0, #4]
    for (i = 0; i < index; i++) {
 1007768:	e1510003 	cmp	r1, r3
 100776c:	1afffffb 	bne	1007760 <slist_get_at+0x1c>
    *out = node->data;
 1007770:	e5903000 	ldr	r3, [r0]
    return CC_OK;
 1007774:	e3a00000 	mov	r0, #0
    *out = node->data;
 1007778:	e5823000 	str	r3, [r2]
    return CC_OK;
 100777c:	e12fff1e 	bx	lr
    if (index >= list->size)
 1007780:	e3a00008 	mov	r0, #8
}
 1007784:	e12fff1e 	bx	lr

01007788 <slist_size>:
}
 1007788:	e5900000 	ldr	r0, [r0]
 100778c:	e12fff1e 	bx	lr

01007790 <slist_reverse>:
    if (list->size == 0 || list->size == 1)
 1007790:	e5903000 	ldr	r3, [r0]
 1007794:	e3530001 	cmp	r3, #1
 1007798:	912fff1e 	bxls	lr
    SNode *flip = list->head;
 100779c:	e5903004 	ldr	r3, [r0, #4]
    while (flip) {
 10077a0:	e3530000 	cmp	r3, #0
    list->tail = list->head;
 10077a4:	e5803008 	str	r3, [r0, #8]
    while (flip) {
 10077a8:	0a000007 	beq	10077cc <slist_reverse+0x3c>
    SNode *prev = NULL;
 10077ac:	e3a01000 	mov	r1, #0
 10077b0:	ea000000 	b	10077b8 <slist_reverse+0x28>
 10077b4:	e1a03002 	mov	r3, r2
        next = flip->next;
 10077b8:	e5932004 	ldr	r2, [r3, #4]
        flip->next = prev;
 10077bc:	e5831004 	str	r1, [r3, #4]
        flip = next;
 10077c0:	e1a01003 	mov	r1, r3
    while (flip) {
 10077c4:	e3520000 	cmp	r2, #0
 10077c8:	1afffff9 	bne	10077b4 <slist_reverse+0x24>
    list->head = prev;
 10077cc:	e5803004 	str	r3, [r0, #4]
}
 10077d0:	e12fff1e 	bx	lr

010077d4 <slist_sublist>:
    if (from > to || to >= list->size)
 10077d4:	e1510002 	cmp	r1, r2
 10077d8:	8a000044 	bhi	10078f0 <slist_sublist+0x11c>
{
 10077dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10077e0:	e1a07002 	mov	r7, r2
    if (from > to || to >= list->size)
 10077e4:	e5909000 	ldr	r9, [r0]
 10077e8:	e1a06000 	mov	r6, r0
 10077ec:	e1590002 	cmp	r9, r2
 10077f0:	9a00003c 	bls	10078e8 <slist_sublist+0x114>
    SList *list = conf->mem_calloc(1, sizeof(SList));
 10077f4:	e1a05001 	mov	r5, r1
 10077f8:	e3a00001 	mov	r0, #1
 10077fc:	e3a01018 	mov	r1, #24
 1007800:	e1a08003 	mov	r8, r3
 1007804:	fa004aeb 	blx	101a3b8 <calloc>
    if (!list)
 1007808:	e2504000 	subs	r4, r0, #0
 100780c:	0a000039 	beq	10078f8 <slist_sublist+0x124>
    list->mem_alloc  = conf->mem_alloc;
 1007810:	e30a3fb9 	movw	r3, #44985	; 0xafb9
    list->mem_calloc = conf->mem_calloc;
 1007814:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    list->mem_alloc  = conf->mem_alloc;
 1007818:	e3403101 	movt	r3, #257	; 0x101
    if (index >= list->size)
 100781c:	e1590005 	cmp	r9, r5
    list->mem_alloc  = conf->mem_alloc;
 1007820:	e584300c 	str	r3, [r4, #12]
    list->mem_free   = conf->mem_free;
 1007824:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    list->mem_calloc = conf->mem_calloc;
 1007828:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 100782c:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1007830:	e5842010 	str	r2, [r4, #16]
    list->mem_free   = conf->mem_free;
 1007834:	e5843014 	str	r3, [r4, #20]
    if (index >= list->size)
 1007838:	9a000030 	bls	1007900 <slist_sublist+0x12c>
    for (i = 0; i < index; i++) {
 100783c:	e3550000 	cmp	r5, #0
    *node = list->head;
 1007840:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < index; i++) {
 1007844:	0a000004 	beq	100785c <slist_sublist+0x88>
 1007848:	e3a03000 	mov	r3, #0
 100784c:	e2833001 	add	r3, r3, #1
        *node = (*node)->next;
 1007850:	e5966004 	ldr	r6, [r6, #4]
    for (i = 0; i < index; i++) {
 1007854:	e1550003 	cmp	r5, r3
 1007858:	1afffffb 	bne	100784c <slist_sublist+0x78>
    if (list->size == 0)
 100785c:	e30a33b9 	movw	r3, #41913	; 0xa3b9
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007860:	e3a09001 	mov	r9, #1
    if (list->size == 0)
 1007864:	e3403101 	movt	r3, #257	; 0x101
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007868:	e3a01008 	mov	r1, #8
 100786c:	e3a00001 	mov	r0, #1
        status = slist_add(sub, node->data);
 1007870:	e596a000 	ldr	sl, [r6]
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007874:	e12fff33 	blx	r3
    if (!node)
 1007878:	e3500000 	cmp	r0, #0
    if (list->size == 0)
 100787c:	e5943000 	ldr	r3, [r4]
    for (i = from; i <= to; i++) {
 1007880:	e2852001 	add	r2, r5, #1
    if (!node)
 1007884:	0a000033 	beq	1007958 <slist_sublist+0x184>
    if (list->size == 0) {
 1007888:	e3530000 	cmp	r3, #0
    node->data = element;
 100788c:	e580a000 	str	sl, [r0]
    list->size++;
 1007890:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1007894:	1a000008 	bne	10078bc <slist_sublist+0xe8>
    for (i = from; i <= to; i++) {
 1007898:	e1570005 	cmp	r7, r5
        list->head       = node;
 100789c:	e5840004 	str	r0, [r4, #4]
        list->tail       = node;
 10078a0:	e5840008 	str	r0, [r4, #8]
    list->size++;
 10078a4:	e5849000 	str	r9, [r4]
        node = node->next;
 10078a8:	e5966004 	ldr	r6, [r6, #4]
    for (i = from; i <= to; i++) {
 10078ac:	0a00000a 	beq	10078dc <slist_sublist+0x108>
    if (list->size == 0)
 10078b0:	e1a05002 	mov	r5, r2
 10078b4:	e5943010 	ldr	r3, [r4, #16]
 10078b8:	eaffffea 	b	1007868 <slist_sublist+0x94>
        list->tail->next = node;
 10078bc:	e5941008 	ldr	r1, [r4, #8]
    for (i = from; i <= to; i++) {
 10078c0:	e1570005 	cmp	r7, r5
 10078c4:	e2852001 	add	r2, r5, #1
        list->tail->next = node;
 10078c8:	e5810004 	str	r0, [r1, #4]
        list->tail       = node;
 10078cc:	e5840008 	str	r0, [r4, #8]
        node = node->next;
 10078d0:	e5966004 	ldr	r6, [r6, #4]
    list->size++;
 10078d4:	e5843000 	str	r3, [r4]
    for (i = from; i <= to; i++) {
 10078d8:	1afffff4 	bne	10078b0 <slist_sublist+0xdc>
    *out = sub;
 10078dc:	e5884000 	str	r4, [r8]
    return CC_OK;
 10078e0:	e3a00000 	mov	r0, #0
 10078e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_INVALID_RANGE;
 10078e8:	e3a00003 	mov	r0, #3
 10078ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 10078f0:	e3a00003 	mov	r0, #3
}
 10078f4:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 10078f8:	e3a00001 	mov	r0, #1
}
 10078fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (list->size == 0)
 1007900:	e5942000 	ldr	r2, [r4]
 1007904:	e3520000 	cmp	r2, #0
 1007908:	0a00000e 	beq	1007948 <slist_sublist+0x174>
    SNode *n = list->head;
 100790c:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007910:	e3500000 	cmp	r0, #0
 1007914:	0a000008 	beq	100793c <slist_sublist+0x168>
        SNode *tmp = n->next;
 1007918:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 100791c:	e12fff33 	blx	r3
        list->size--;
 1007920:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007924:	e3550000 	cmp	r5, #0
 1007928:	e1a00005 	mov	r0, r5
        list->size--;
 100792c:	e2433001 	sub	r3, r3, #1
 1007930:	e5843000 	str	r3, [r4]
 1007934:	e5943014 	ldr	r3, [r4, #20]
    while (n) {
 1007938:	1afffff6 	bne	1007918 <slist_sublist+0x144>
        list->head = NULL;
 100793c:	e3a02000 	mov	r2, #0
 1007940:	e5842004 	str	r2, [r4, #4]
        list->tail = NULL;
 1007944:	e5842008 	str	r2, [r4, #8]
    list->mem_free(list);
 1007948:	e1a00004 	mov	r0, r4
 100794c:	e12fff33 	blx	r3
        return status;
 1007950:	e3a00008 	mov	r0, #8
 1007954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (list->size == 0)
 1007958:	e3530000 	cmp	r3, #0
 100795c:	0a00000d 	beq	1007998 <slist_sublist+0x1c4>
    SNode *n = list->head;
 1007960:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007964:	e3500000 	cmp	r0, #0
 1007968:	0a000007 	beq	100798c <slist_sublist+0x1b8>
        SNode *tmp = n->next;
 100796c:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 1007970:	e5943014 	ldr	r3, [r4, #20]
 1007974:	e12fff33 	blx	r3
        list->size--;
 1007978:	e5943000 	ldr	r3, [r4]
    while (n) {
 100797c:	e2550000 	subs	r0, r5, #0
        list->size--;
 1007980:	e2433001 	sub	r3, r3, #1
 1007984:	e5843000 	str	r3, [r4]
    while (n) {
 1007988:	1afffff7 	bne	100796c <slist_sublist+0x198>
        list->head = NULL;
 100798c:	e3a03000 	mov	r3, #0
 1007990:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1007994:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1007998:	e1a00004 	mov	r0, r4
 100799c:	e5943014 	ldr	r3, [r4, #20]
 10079a0:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 10079a4:	e3a00001 	mov	r0, #1
            return status;
 10079a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010079ac <slist_copy_shallow>:
{
 10079ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10079b0:	e1a05000 	mov	r5, r0
 10079b4:	e1a06001 	mov	r6, r1
    SList *list = conf->mem_calloc(1, sizeof(SList));
 10079b8:	e3a00001 	mov	r0, #1
 10079bc:	e3a01018 	mov	r1, #24
 10079c0:	fa004a7c 	blx	101a3b8 <calloc>
    if (!list)
 10079c4:	e2504000 	subs	r4, r0, #0
 10079c8:	0a00003e 	beq	1007ac8 <slist_copy_shallow+0x11c>
    SNode *node = list->head;
 10079cc:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 10079d0:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    list->mem_calloc = conf->mem_calloc;
 10079d4:	e30a33b9 	movw	r3, #41913	; 0xa3b9
    list->mem_free   = conf->mem_free;
 10079d8:	e30a2fc9 	movw	r2, #45001	; 0xafc9
    list->mem_alloc  = conf->mem_alloc;
 10079dc:	e3401101 	movt	r1, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 10079e0:	e3403101 	movt	r3, #257	; 0x101
    while (node) {
 10079e4:	e3550000 	cmp	r5, #0
    list->mem_free   = conf->mem_free;
 10079e8:	e3402101 	movt	r2, #257	; 0x101
    list->mem_alloc  = conf->mem_alloc;
 10079ec:	e584100c 	str	r1, [r4, #12]
    list->mem_calloc = conf->mem_calloc;
 10079f0:	e5843010 	str	r3, [r4, #16]
    list->mem_free   = conf->mem_free;
 10079f4:	e5842014 	str	r2, [r4, #20]
    while (node) {
 10079f8:	0a00001a 	beq	1007a68 <slist_copy_shallow+0xbc>
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 10079fc:	e3a07001 	mov	r7, #1
 1007a00:	e3a01008 	mov	r1, #8
 1007a04:	e3a00001 	mov	r0, #1
        status = slist_add(copy, node->data);
 1007a08:	e5958000 	ldr	r8, [r5]
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007a0c:	e12fff33 	blx	r3
    if (!node)
 1007a10:	e3500000 	cmp	r0, #0
    if (list->size == 0)
 1007a14:	e5943000 	ldr	r3, [r4]
    if (!node)
 1007a18:	0a000015 	beq	1007a74 <slist_copy_shallow+0xc8>
    if (list->size == 0) {
 1007a1c:	e3530000 	cmp	r3, #0
    node->data = element;
 1007a20:	e5808000 	str	r8, [r0]
    list->size++;
 1007a24:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1007a28:	1a000007 	bne	1007a4c <slist_copy_shallow+0xa0>
        node = node->next;
 1007a2c:	e5955004 	ldr	r5, [r5, #4]
        list->head       = node;
 1007a30:	e5840004 	str	r0, [r4, #4]
        list->tail       = node;
 1007a34:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1007a38:	e3550000 	cmp	r5, #0
    list->size++;
 1007a3c:	e5847000 	str	r7, [r4]
    while (node) {
 1007a40:	0a000008 	beq	1007a68 <slist_copy_shallow+0xbc>
 1007a44:	e5943010 	ldr	r3, [r4, #16]
 1007a48:	eaffffec 	b	1007a00 <slist_copy_shallow+0x54>
        list->tail->next = node;
 1007a4c:	e5942008 	ldr	r2, [r4, #8]
 1007a50:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 1007a54:	e5955004 	ldr	r5, [r5, #4]
        list->tail       = node;
 1007a58:	e5840008 	str	r0, [r4, #8]
    list->size++;
 1007a5c:	e5843000 	str	r3, [r4]
    while (node) {
 1007a60:	e3550000 	cmp	r5, #0
 1007a64:	1afffff6 	bne	1007a44 <slist_copy_shallow+0x98>
    *out = copy;
 1007a68:	e5864000 	str	r4, [r6]
    return CC_OK;
 1007a6c:	e3a00000 	mov	r0, #0
 1007a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (list->size == 0)
 1007a74:	e3530000 	cmp	r3, #0
 1007a78:	0a00000d 	beq	1007ab4 <slist_copy_shallow+0x108>
    SNode *n = list->head;
 1007a7c:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007a80:	e3500000 	cmp	r0, #0
 1007a84:	0a000007 	beq	1007aa8 <slist_copy_shallow+0xfc>
        SNode *tmp = n->next;
 1007a88:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 1007a8c:	e5943014 	ldr	r3, [r4, #20]
 1007a90:	e12fff33 	blx	r3
        list->size--;
 1007a94:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007a98:	e2550000 	subs	r0, r5, #0
        list->size--;
 1007a9c:	e2433001 	sub	r3, r3, #1
 1007aa0:	e5843000 	str	r3, [r4]
    while (n) {
 1007aa4:	1afffff7 	bne	1007a88 <slist_copy_shallow+0xdc>
        list->head = NULL;
 1007aa8:	e3a03000 	mov	r3, #0
 1007aac:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1007ab0:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1007ab4:	e1a00004 	mov	r0, r4
 1007ab8:	e5943014 	ldr	r3, [r4, #20]
 1007abc:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1007ac0:	e3a00001 	mov	r0, #1
            return status;
 1007ac4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1007ac8:	e3a00001 	mov	r0, #1
}
 1007acc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007ad0 <slist_copy_deep>:
{
 1007ad0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1007ad4:	e1a05000 	mov	r5, r0
 1007ad8:	e1a06001 	mov	r6, r1
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1007adc:	e3a00001 	mov	r0, #1
 1007ae0:	e3a01018 	mov	r1, #24
{
 1007ae4:	e1a08002 	mov	r8, r2
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1007ae8:	fa004a32 	blx	101a3b8 <calloc>
    if (!list)
 1007aec:	e2504000 	subs	r4, r0, #0
 1007af0:	0a00003f 	beq	1007bf4 <slist_copy_deep+0x124>
    SNode *node = list->head;
 1007af4:	e5955004 	ldr	r5, [r5, #4]
    list->mem_alloc  = conf->mem_alloc;
 1007af8:	e30a3fb9 	movw	r3, #44985	; 0xafb9
 1007afc:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1007b00:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    list->mem_alloc  = conf->mem_alloc;
 1007b04:	e584300c 	str	r3, [r4, #12]
    list->mem_free   = conf->mem_free;
 1007b08:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    while (node) {
 1007b0c:	e3550000 	cmp	r5, #0
    list->mem_calloc = conf->mem_calloc;
 1007b10:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1007b14:	e3403101 	movt	r3, #257	; 0x101
 1007b18:	e1c421f0 	strd	r2, [r4, #16]
    while (node) {
 1007b1c:	0a000014 	beq	1007b74 <slist_copy_deep+0xa4>
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007b20:	e3a07001 	mov	r7, #1
        status = slist_add(copy, cp(node->data));
 1007b24:	e5950000 	ldr	r0, [r5]
 1007b28:	e12fff36 	blx	r6
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007b2c:	e5943010 	ldr	r3, [r4, #16]
        status = slist_add(copy, cp(node->data));
 1007b30:	e1a09000 	mov	r9, r0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007b34:	e3a01008 	mov	r1, #8
 1007b38:	e3a00001 	mov	r0, #1
 1007b3c:	e12fff33 	blx	r3
    if (!node)
 1007b40:	e3500000 	cmp	r0, #0
    if (list->size == 0)
 1007b44:	e5943000 	ldr	r3, [r4]
    if (!node)
 1007b48:	0a000014 	beq	1007ba0 <slist_copy_deep+0xd0>
    if (list->size == 0) {
 1007b4c:	e3530000 	cmp	r3, #0
    node->data = element;
 1007b50:	e5809000 	str	r9, [r0]
    list->size++;
 1007b54:	e2833001 	add	r3, r3, #1
    if (list->size == 0) {
 1007b58:	1a000008 	bne	1007b80 <slist_copy_deep+0xb0>
        node = node->next;
 1007b5c:	e5955004 	ldr	r5, [r5, #4]
        list->head       = node;
 1007b60:	e5840004 	str	r0, [r4, #4]
        list->tail       = node;
 1007b64:	e5840008 	str	r0, [r4, #8]
    while (node) {
 1007b68:	e3550000 	cmp	r5, #0
    list->size++;
 1007b6c:	e5847000 	str	r7, [r4]
    while (node) {
 1007b70:	1affffeb 	bne	1007b24 <slist_copy_deep+0x54>
    *out = copy;
 1007b74:	e5884000 	str	r4, [r8]
    return CC_OK;
 1007b78:	e3a00000 	mov	r0, #0
 1007b7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        list->tail->next = node;
 1007b80:	e5942008 	ldr	r2, [r4, #8]
 1007b84:	e5820004 	str	r0, [r2, #4]
        node = node->next;
 1007b88:	e5955004 	ldr	r5, [r5, #4]
        list->tail       = node;
 1007b8c:	e5840008 	str	r0, [r4, #8]
    list->size++;
 1007b90:	e5843000 	str	r3, [r4]
    while (node) {
 1007b94:	e3550000 	cmp	r5, #0
 1007b98:	1affffe1 	bne	1007b24 <slist_copy_deep+0x54>
 1007b9c:	eafffff4 	b	1007b74 <slist_copy_deep+0xa4>
    if (list->size == 0)
 1007ba0:	e3530000 	cmp	r3, #0
 1007ba4:	0a00000d 	beq	1007be0 <slist_copy_deep+0x110>
    SNode *n = list->head;
 1007ba8:	e5940004 	ldr	r0, [r4, #4]
    while (n) {
 1007bac:	e3500000 	cmp	r0, #0
 1007bb0:	0a000007 	beq	1007bd4 <slist_copy_deep+0x104>
        SNode *tmp = n->next;
 1007bb4:	e5905004 	ldr	r5, [r0, #4]
        list->mem_free(n);
 1007bb8:	e5943014 	ldr	r3, [r4, #20]
 1007bbc:	e12fff33 	blx	r3
        list->size--;
 1007bc0:	e5943000 	ldr	r3, [r4]
    while (n) {
 1007bc4:	e2550000 	subs	r0, r5, #0
        list->size--;
 1007bc8:	e2433001 	sub	r3, r3, #1
 1007bcc:	e5843000 	str	r3, [r4]
    while (n) {
 1007bd0:	1afffff7 	bne	1007bb4 <slist_copy_deep+0xe4>
        list->head = NULL;
 1007bd4:	e3a03000 	mov	r3, #0
 1007bd8:	e5843004 	str	r3, [r4, #4]
        list->tail = NULL;
 1007bdc:	e5843008 	str	r3, [r4, #8]
    list->mem_free(list);
 1007be0:	e1a00004 	mov	r0, r4
 1007be4:	e5943014 	ldr	r3, [r4, #20]
 1007be8:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1007bec:	e3a00001 	mov	r0, #1
            return status;
 1007bf0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_ALLOC;
 1007bf4:	e3a00001 	mov	r0, #1
}
 1007bf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01007bfc <slist_contains>:
    SNode *node = list->head;
 1007bfc:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1007c00:	e3530000 	cmp	r3, #0
 1007c04:	0a000007 	beq	1007c28 <slist_contains+0x2c>
    size_t e_count = 0;
 1007c08:	e3a00000 	mov	r0, #0
        if (node->data == element)
 1007c0c:	e5932000 	ldr	r2, [r3]
        node = node->next;
 1007c10:	e5933004 	ldr	r3, [r3, #4]
        if (node->data == element)
 1007c14:	e1510002 	cmp	r1, r2
            e_count++;
 1007c18:	02800001 	addeq	r0, r0, #1
    while (node) {
 1007c1c:	e3530000 	cmp	r3, #0
 1007c20:	1afffff9 	bne	1007c0c <slist_contains+0x10>
 1007c24:	e12fff1e 	bx	lr
    size_t e_count = 0;
 1007c28:	e1a00003 	mov	r0, r3
}
 1007c2c:	e12fff1e 	bx	lr

01007c30 <slist_contains_value>:
{
 1007c30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    SNode *node = list->head;
 1007c34:	e5904004 	ldr	r4, [r0, #4]
    while (node) {
 1007c38:	e3540000 	cmp	r4, #0
 1007c3c:	0a00000c 	beq	1007c74 <slist_contains_value+0x44>
 1007c40:	e1a06002 	mov	r6, r2
 1007c44:	e1a05001 	mov	r5, r1
    size_t e_count = 0;
 1007c48:	e3a07000 	mov	r7, #0
        if (cmp(node->data, element) == 0)
 1007c4c:	e5940000 	ldr	r0, [r4]
 1007c50:	e1a01005 	mov	r1, r5
 1007c54:	e12fff36 	blx	r6
        node = node->next;
 1007c58:	e5944004 	ldr	r4, [r4, #4]
        if (cmp(node->data, element) == 0)
 1007c5c:	e3500000 	cmp	r0, #0
            e_count++;
 1007c60:	02877001 	addeq	r7, r7, #1
    while (node) {
 1007c64:	e3540000 	cmp	r4, #0
 1007c68:	1afffff7 	bne	1007c4c <slist_contains_value+0x1c>
}
 1007c6c:	e1a00007 	mov	r0, r7
 1007c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    size_t e_count = 0;
 1007c74:	e1a07004 	mov	r7, r4
}
 1007c78:	e1a00007 	mov	r0, r7
 1007c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007c80 <slist_index_of>:
    SNode *node = list->head;
 1007c80:	e5903004 	ldr	r3, [r0, #4]
    while (node) {
 1007c84:	e3530000 	cmp	r3, #0
 1007c88:	0a00000b 	beq	1007cbc <slist_index_of+0x3c>
        if (node->data == element) {
 1007c8c:	e5930000 	ldr	r0, [r3]
 1007c90:	e1510000 	cmp	r1, r0
    size_t i = 0;
 1007c94:	e3a00000 	mov	r0, #0
        if (node->data == element) {
 1007c98:	1a000003 	bne	1007cac <slist_index_of+0x2c>
 1007c9c:	ea000008 	b	1007cc4 <slist_index_of+0x44>
 1007ca0:	e593c000 	ldr	ip, [r3]
 1007ca4:	e15c0001 	cmp	ip, r1
 1007ca8:	0a000005 	beq	1007cc4 <slist_index_of+0x44>
        node = node->next;
 1007cac:	e5933004 	ldr	r3, [r3, #4]
        i++;
 1007cb0:	e2800001 	add	r0, r0, #1
    while (node) {
 1007cb4:	e3530000 	cmp	r3, #0
 1007cb8:	1afffff8 	bne	1007ca0 <slist_index_of+0x20>
    return CC_ERR_OUT_OF_RANGE;
 1007cbc:	e3a00008 	mov	r0, #8
}
 1007cc0:	e12fff1e 	bx	lr
            *index = i;
 1007cc4:	e5820000 	str	r0, [r2]
            return CC_OK;
 1007cc8:	e3a00000 	mov	r0, #0
 1007ccc:	e12fff1e 	bx	lr

01007cd0 <slist_to_array>:
{
 1007cd0:	e92d4070 	push	{r4, r5, r6, lr}
 1007cd4:	e1a04000 	mov	r4, r0
    void **array = list->mem_alloc(list->size * sizeof(void*));
 1007cd8:	e5900000 	ldr	r0, [r0]
{
 1007cdc:	e1a05001 	mov	r5, r1
    void **array = list->mem_alloc(list->size * sizeof(void*));
 1007ce0:	e594300c 	ldr	r3, [r4, #12]
 1007ce4:	e1a00100 	lsl	r0, r0, #2
 1007ce8:	e12fff33 	blx	r3
    if (!array)
 1007cec:	e3500000 	cmp	r0, #0
 1007cf0:	0a00000d 	beq	1007d2c <slist_to_array+0x5c>
    for (i = 0; i < list->size; i++) {
 1007cf4:	e594e000 	ldr	lr, [r4]
    SNode *node = list->head;
 1007cf8:	e5943004 	ldr	r3, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1007cfc:	e35e0000 	cmp	lr, #0
 1007d00:	0a000006 	beq	1007d20 <slist_to_array+0x50>
 1007d04:	e080e10e 	add	lr, r0, lr, lsl #2
 1007d08:	e1a02000 	mov	r2, r0
        array[i] = node->data;
 1007d0c:	e593c000 	ldr	ip, [r3]
 1007d10:	e482c004 	str	ip, [r2], #4
    for (i = 0; i < list->size; i++) {
 1007d14:	e152000e 	cmp	r2, lr
        node = node->next;
 1007d18:	e5933004 	ldr	r3, [r3, #4]
    for (i = 0; i < list->size; i++) {
 1007d1c:	1afffffa 	bne	1007d0c <slist_to_array+0x3c>
    *out = array;
 1007d20:	e5850000 	str	r0, [r5]
    return CC_OK;
 1007d24:	e3a00000 	mov	r0, #0
 1007d28:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1007d2c:	e3a00001 	mov	r0, #1
}
 1007d30:	e8bd8070 	pop	{r4, r5, r6, pc}

01007d34 <slist_sort>:
    if (list->size == 1)
 1007d34:	e5902000 	ldr	r2, [r0]
 1007d38:	e3520001 	cmp	r2, #1
 1007d3c:	0a000025 	beq	1007dd8 <slist_sort+0xa4>
{
 1007d40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007d44:	e1a05000 	mov	r5, r0
    void **array = list->mem_alloc(list->size * sizeof(void*));
 1007d48:	e595300c 	ldr	r3, [r5, #12]
 1007d4c:	e1a00102 	lsl	r0, r2, #2
 1007d50:	e1a07001 	mov	r7, r1
 1007d54:	e12fff33 	blx	r3
    if (!array)
 1007d58:	e2506000 	subs	r6, r0, #0
 1007d5c:	0a00001f 	beq	1007de0 <slist_sort+0xac>
    SNode *node = list->head;
 1007d60:	e8950012 	ldm	r5, {r1, r4}
    for (i = 0; i < list->size; i++) {
 1007d64:	e3510000 	cmp	r1, #0
 1007d68:	0a000007 	beq	1007d8c <slist_sort+0x58>
 1007d6c:	e086c101 	add	ip, r6, r1, lsl #2
 1007d70:	e1a02006 	mov	r2, r6
        array[i] = node->data;
 1007d74:	e5940000 	ldr	r0, [r4]
 1007d78:	e4820004 	str	r0, [r2], #4
    for (i = 0; i < list->size; i++) {
 1007d7c:	e15c0002 	cmp	ip, r2
        node = node->next;
 1007d80:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1007d84:	1afffffa 	bne	1007d74 <slist_sort+0x40>
 1007d88:	e5954004 	ldr	r4, [r5, #4]
    qsort(elements, list->size, sizeof(void*), cmp);
 1007d8c:	e1a03007 	mov	r3, r7
 1007d90:	e3a02004 	mov	r2, #4
 1007d94:	e1a00006 	mov	r0, r6
 1007d98:	fa00511f 	blx	101c21c <qsort>
    for (i = 0; i < list->size; i++) {
 1007d9c:	e5951000 	ldr	r1, [r5]
 1007da0:	e3510000 	cmp	r1, #0
 1007da4:	10861101 	addne	r1, r6, r1, lsl #2
 1007da8:	11a03006 	movne	r3, r6
 1007dac:	0a000004 	beq	1007dc4 <slist_sort+0x90>
        node->data = elements[i];
 1007db0:	e4932004 	ldr	r2, [r3], #4
    for (i = 0; i < list->size; i++) {
 1007db4:	e1530001 	cmp	r3, r1
        node->data = elements[i];
 1007db8:	e5842000 	str	r2, [r4]
        node       = node->next;
 1007dbc:	e5944004 	ldr	r4, [r4, #4]
    for (i = 0; i < list->size; i++) {
 1007dc0:	1afffffa 	bne	1007db0 <slist_sort+0x7c>
    list->mem_free(elements);
 1007dc4:	e1a00006 	mov	r0, r6
 1007dc8:	e5953014 	ldr	r3, [r5, #20]
 1007dcc:	e12fff33 	blx	r3
    return CC_OK;
 1007dd0:	e3a00000 	mov	r0, #0
 1007dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_OK;
 1007dd8:	e3a00000 	mov	r0, #0
}
 1007ddc:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1007de0:	e3a00001 	mov	r0, #1
}
 1007de4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007de8 <slist_foreach>:
{
 1007de8:	e92d4070 	push	{r4, r5, r6, lr}
    SNode *n = list->head;
 1007dec:	e5904004 	ldr	r4, [r0, #4]
    while (n) {
 1007df0:	e3540000 	cmp	r4, #0
 1007df4:	08bd8070 	popeq	{r4, r5, r6, pc}
 1007df8:	e1a05001 	mov	r5, r1
        op(n->data);
 1007dfc:	e5940000 	ldr	r0, [r4]
 1007e00:	e12fff35 	blx	r5
        n = n->next;
 1007e04:	e5944004 	ldr	r4, [r4, #4]
    while (n) {
 1007e08:	e3540000 	cmp	r4, #0
 1007e0c:	1afffffa 	bne	1007dfc <slist_foreach+0x14>
 1007e10:	e8bd8070 	pop	{r4, r5, r6, pc}

01007e14 <slist_filter>:
  if (slist_size(list) == 0)
 1007e14:	e5903000 	ldr	r3, [r0]
 1007e18:	e3530000 	cmp	r3, #0
 1007e1c:	0a00002d 	beq	1007ed8 <slist_filter+0xc4>
{
 1007e20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007e24:	e1a06001 	mov	r6, r1
 1007e28:	e1a04000 	mov	r4, r0
    SList *list = conf->mem_calloc(1, sizeof(SList));
 1007e2c:	e3a01018 	mov	r1, #24
 1007e30:	e3a00001 	mov	r0, #1
 1007e34:	e1a07002 	mov	r7, r2
 1007e38:	fa00495e 	blx	101a3b8 <calloc>
    if (!list)
 1007e3c:	e2505000 	subs	r5, r0, #0
 1007e40:	0a000026 	beq	1007ee0 <slist_filter+0xcc>
    SNode *curr = list->head;
 1007e44:	e5944004 	ldr	r4, [r4, #4]
    list->mem_alloc  = conf->mem_alloc;
 1007e48:	e30a3fb9 	movw	r3, #44985	; 0xafb9
 1007e4c:	e3403101 	movt	r3, #257	; 0x101
    list->mem_calloc = conf->mem_calloc;
 1007e50:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    list->mem_alloc  = conf->mem_alloc;
 1007e54:	e585300c 	str	r3, [r5, #12]
    list->mem_free   = conf->mem_free;
 1007e58:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    while (curr) {
 1007e5c:	e3540000 	cmp	r4, #0
    list->mem_calloc = conf->mem_calloc;
 1007e60:	e3402101 	movt	r2, #257	; 0x101
    list->mem_free   = conf->mem_free;
 1007e64:	e3403101 	movt	r3, #257	; 0x101
 1007e68:	e1c521f0 	strd	r2, [r5, #16]
    while (curr) {
 1007e6c:	0a000016 	beq	1007ecc <slist_filter+0xb8>
        if (pred(curr->data)) {
 1007e70:	e5940000 	ldr	r0, [r4]
 1007e74:	e12fff36 	blx	r6
 1007e78:	e3500000 	cmp	r0, #0
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007e7c:	e3a01008 	mov	r1, #8
 1007e80:	e3a00001 	mov	r0, #1
        if (pred(curr->data)) {
 1007e84:	0a00000d 	beq	1007ec0 <slist_filter+0xac>
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007e88:	e5953010 	ldr	r3, [r5, #16]
	  slist_add(filtered, curr->data);
 1007e8c:	e5948000 	ldr	r8, [r4]
    SNode *node = list->mem_calloc(1, sizeof(SNode));
 1007e90:	e12fff33 	blx	r3
    if (!node)
 1007e94:	e3500000 	cmp	r0, #0
 1007e98:	0a000008 	beq	1007ec0 <slist_filter+0xac>
    if (list->size == 0) {
 1007e9c:	e5953000 	ldr	r3, [r5]
    node->data = element;
 1007ea0:	e5808000 	str	r8, [r0]
    if (list->size == 0) {
 1007ea4:	e3530000 	cmp	r3, #0
    list->size++;
 1007ea8:	e2833001 	add	r3, r3, #1
        list->tail->next = node;
 1007eac:	15952008 	ldrne	r2, [r5, #8]
        list->head       = node;
 1007eb0:	05850004 	streq	r0, [r5, #4]
        list->tail->next = node;
 1007eb4:	15820004 	strne	r0, [r2, #4]
        list->tail       = node;
 1007eb8:	e5850008 	str	r0, [r5, #8]
    list->size++;
 1007ebc:	e5853000 	str	r3, [r5]
        curr = curr->next;
 1007ec0:	e5944004 	ldr	r4, [r4, #4]
    while (curr) {
 1007ec4:	e3540000 	cmp	r4, #0
 1007ec8:	1affffe8 	bne	1007e70 <slist_filter+0x5c>
    *out = filtered;
 1007ecc:	e5875000 	str	r5, [r7]
    return CC_OK;
 1007ed0:	e3a00000 	mov	r0, #0
 1007ed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1007ed8:	e3a00008 	mov	r0, #8
}
 1007edc:	e12fff1e 	bx	lr
        return CC_ERR_ALLOC;
 1007ee0:	e3a00001 	mov	r0, #1
}
 1007ee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007ee8 <slist_filter_mut>:
    if (slist_size(list) == 0)
 1007ee8:	e5903000 	ldr	r3, [r0]
 1007eec:	e3530000 	cmp	r3, #0
 1007ef0:	0a00001c 	beq	1007f68 <slist_filter_mut+0x80>
{
 1007ef4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    SNode *curr = list->head;
 1007ef8:	e5904004 	ldr	r4, [r0, #4]
    while (curr) {
 1007efc:	e3540000 	cmp	r4, #0
 1007f00:	11a08001 	movne	r8, r1
 1007f04:	11a06000 	movne	r6, r0
    SNode *next = NULL, *prev =NULL;
 1007f08:	13a07000 	movne	r7, #0
    while (curr) {
 1007f0c:	0a000013 	beq	1007f60 <slist_filter_mut+0x78>
        next = curr->next;
 1007f10:	e8940021 	ldm	r4, {r0, r5}
        if (!pred(curr->data)) {
 1007f14:	e12fff38 	blx	r8
 1007f18:	e3500000 	cmp	r0, #0
 1007f1c:	11a07004 	movne	r7, r4
 1007f20:	1a00000c 	bne	1007f58 <slist_filter_mut+0x70>
        prev->next = node->next;
 1007f24:	e5943004 	ldr	r3, [r4, #4]
    if (prev)
 1007f28:	e3570000 	cmp	r7, #0
    list->mem_free(node);
 1007f2c:	e1a00004 	mov	r0, r4
        prev->next = node->next;
 1007f30:	15873004 	strne	r3, [r7, #4]
 1007f34:	15943004 	ldrne	r3, [r4, #4]
        list->head = node->next;
 1007f38:	05863004 	streq	r3, [r6, #4]
    if (!node->next)
 1007f3c:	e3530000 	cmp	r3, #0
    list->mem_free(node);
 1007f40:	e5963014 	ldr	r3, [r6, #20]
        list->tail = prev;
 1007f44:	05867008 	streq	r7, [r6, #8]
    list->mem_free(node);
 1007f48:	e12fff33 	blx	r3
    list->size--;
 1007f4c:	e5963000 	ldr	r3, [r6]
 1007f50:	e2433001 	sub	r3, r3, #1
 1007f54:	e5863000 	str	r3, [r6]
    while (curr) {
 1007f58:	e2554000 	subs	r4, r5, #0
 1007f5c:	1affffeb 	bne	1007f10 <slist_filter_mut+0x28>
    return CC_OK;
 1007f60:	e3a00000 	mov	r0, #0
}
 1007f64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_OUT_OF_RANGE;
 1007f68:	e3a00008 	mov	r0, #8
}
 1007f6c:	e12fff1e 	bx	lr

01007f70 <slist_iter_init>:
    iter->next    = list->head;
 1007f70:	e5912004 	ldr	r2, [r1, #4]
    iter->index   = 0;
 1007f74:	e3a03000 	mov	r3, #0
    iter->list    = list;
 1007f78:	e5801004 	str	r1, [r0, #4]
    iter->index   = 0;
 1007f7c:	e5803000 	str	r3, [r0]
    iter->current = NULL;
 1007f80:	e1c020f8 	strd	r2, [r0, #8]
    iter->prev    = NULL;
 1007f84:	e5803010 	str	r3, [r0, #16]
}
 1007f88:	e12fff1e 	bx	lr

01007f8c <slist_iter_remove>:
    if (!iter->current)
 1007f8c:	e590300c 	ldr	r3, [r0, #12]
 1007f90:	e3530000 	cmp	r3, #0
 1007f94:	0a00001d 	beq	1008010 <slist_iter_remove+0x84>
    void *e = unlinkn(iter->list, iter->current, iter->prev);
 1007f98:	e590c010 	ldr	ip, [r0, #16]
 1007f9c:	e5932004 	ldr	r2, [r3, #4]
{
 1007fa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1007fa4:	e1a04000 	mov	r4, r0
    if (prev)
 1007fa8:	e35c0000 	cmp	ip, #0
    void *e = unlinkn(iter->list, iter->current, iter->prev);
 1007fac:	e5906004 	ldr	r6, [r0, #4]
    list->mem_free(node);
 1007fb0:	e1a00003 	mov	r0, r3
 1007fb4:	e1a05001 	mov	r5, r1
    void *data = node->data;
 1007fb8:	e5937000 	ldr	r7, [r3]
        prev->next = node->next;
 1007fbc:	158c2004 	strne	r2, [ip, #4]
 1007fc0:	15932004 	ldrne	r2, [r3, #4]
        list->head = node->next;
 1007fc4:	05862004 	streq	r2, [r6, #4]
    list->mem_free(node);
 1007fc8:	e5963014 	ldr	r3, [r6, #20]
    if (!node->next)
 1007fcc:	e3520000 	cmp	r2, #0
        list->tail = prev;
 1007fd0:	0586c008 	streq	ip, [r6, #8]
    list->mem_free(node);
 1007fd4:	e12fff33 	blx	r3
    list->size--;
 1007fd8:	e5962000 	ldr	r2, [r6]
    if (out)
 1007fdc:	e3550000 	cmp	r5, #0
    iter->index--;
 1007fe0:	e5943000 	ldr	r3, [r4]
    iter->current = NULL;
 1007fe4:	e3a00000 	mov	r0, #0
    list->size--;
 1007fe8:	e2422001 	sub	r2, r2, #1
    iter->index--;
 1007fec:	e2433001 	sub	r3, r3, #1
    list->size--;
 1007ff0:	e5862000 	str	r2, [r6]
    iter->index--;
 1007ff4:	e5843000 	str	r3, [r4]
    iter->current = NULL;
 1007ff8:	e584000c 	str	r0, [r4, #12]
    if (out)
 1007ffc:	0a000001 	beq	1008008 <slist_iter_remove+0x7c>
        *out = e;
 1008000:	e5857000 	str	r7, [r5]
 1008004:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return CC_OK;
 1008008:	e1a00005 	mov	r0, r5
}
 100800c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1008010:	e3a00007 	mov	r0, #7
}
 1008014:	e12fff1e 	bx	lr

01008018 <slist_iter_add>:
    SNode *new_node = iter->list->mem_calloc(1, sizeof(SNode));
 1008018:	e5903004 	ldr	r3, [r0, #4]
{
 100801c:	e92d4070 	push	{r4, r5, r6, lr}
 1008020:	e1a04000 	mov	r4, r0
 1008024:	e1a05001 	mov	r5, r1
    SNode *new_node = iter->list->mem_calloc(1, sizeof(SNode));
 1008028:	e3a00001 	mov	r0, #1
 100802c:	e3a01008 	mov	r1, #8
 1008030:	e5933010 	ldr	r3, [r3, #16]
 1008034:	e12fff33 	blx	r3
    if (!new_node)
 1008038:	e3500000 	cmp	r0, #0
 100803c:	0a00000f 	beq	1008080 <slist_iter_add+0x68>
    if (iter->index == iter->list->size)
 1008040:	e5941004 	ldr	r1, [r4, #4]
 1008044:	e5942000 	ldr	r2, [r4]
    new_node->next = iter->next;
 1008048:	e594e008 	ldr	lr, [r4, #8]
    if (iter->index == iter->list->size)
 100804c:	e5913000 	ldr	r3, [r1]
    iter->current->next = new_node;
 1008050:	e594c00c 	ldr	ip, [r4, #12]
    new_node->data = element;
 1008054:	e5805000 	str	r5, [r0]
    if (iter->index == iter->list->size)
 1008058:	e1520003 	cmp	r2, r3
    iter->index++;
 100805c:	e2822001 	add	r2, r2, #1
    iter->list->size++;
 1008060:	e2833001 	add	r3, r3, #1
    new_node->next = iter->next;
 1008064:	e580e004 	str	lr, [r0, #4]
    iter->current->next = new_node;
 1008068:	e58c0004 	str	r0, [ip, #4]
        iter->list->tail = new_node;
 100806c:	05810008 	streq	r0, [r1, #8]
    return CC_OK;
 1008070:	e3a00000 	mov	r0, #0
    iter->index++;
 1008074:	e5842000 	str	r2, [r4]
    iter->list->size++;
 1008078:	e5813000 	str	r3, [r1]
    return CC_OK;
 100807c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1008080:	e3a00001 	mov	r0, #1
}
 1008084:	e8bd8070 	pop	{r4, r5, r6, pc}

01008088 <slist_iter_replace>:
    if (!iter->current)
 1008088:	e590300c 	ldr	r3, [r0, #12]
 100808c:	e3530000 	cmp	r3, #0
 1008090:	0a000005 	beq	10080ac <slist_iter_replace+0x24>
    void *old = iter->current->data;
 1008094:	e5930000 	ldr	r0, [r3]
    if (out)
 1008098:	e3520000 	cmp	r2, #0
    iter->current->data = element;
 100809c:	e5831000 	str	r1, [r3]
        *out = old;
 10080a0:	15820000 	strne	r0, [r2]
    return CC_OK;
 10080a4:	e3a00000 	mov	r0, #0
 10080a8:	e12fff1e 	bx	lr
        return CC_ERR_VALUE_NOT_FOUND;
 10080ac:	e3a00007 	mov	r0, #7
 10080b0:	e12fff1e 	bx	lr

010080b4 <slist_iter_next>:
    if (!iter->next)
 10080b4:	e5902008 	ldr	r2, [r0, #8]
 10080b8:	e3520000 	cmp	r2, #0
 10080bc:	0a00000e 	beq	10080fc <slist_iter_next+0x48>
 10080c0:	e1a03000 	mov	r3, r0
    if (iter->current)
 10080c4:	e590000c 	ldr	r0, [r0, #12]
    iter->index++;
 10080c8:	e593c000 	ldr	ip, [r3]
{
 10080cc:	e92d4010 	push	{r4, lr}
    void *data = iter->next->data;
 10080d0:	e592e000 	ldr	lr, [r2]
    if (iter->current)
 10080d4:	e3500000 	cmp	r0, #0
    iter->next = iter->next->next;
 10080d8:	e5924004 	ldr	r4, [r2, #4]
    iter->current = iter->next;
 10080dc:	e583200c 	str	r2, [r3, #12]
    iter->index++;
 10080e0:	e28c2001 	add	r2, ip, #1
        iter->prev = iter->current;
 10080e4:	15830010 	strne	r0, [r3, #16]
    return CC_OK;
 10080e8:	e3a00000 	mov	r0, #0
    iter->next = iter->next->next;
 10080ec:	e5834008 	str	r4, [r3, #8]
    iter->index++;
 10080f0:	e5832000 	str	r2, [r3]
    *out = data;
 10080f4:	e581e000 	str	lr, [r1]
}
 10080f8:	e8bd8010 	pop	{r4, pc}
        return CC_ITER_END;
 10080fc:	e3a00009 	mov	r0, #9
}
 1008100:	e12fff1e 	bx	lr

01008104 <slist_iter_index>:
    return iter->index - 1;
 1008104:	e5900000 	ldr	r0, [r0]
}
 1008108:	e2400001 	sub	r0, r0, #1
 100810c:	e12fff1e 	bx	lr

01008110 <slist_zip_iter_init>:
    iter->l2_next    = l2->head;
 1008110:	e592c004 	ldr	ip, [r2, #4]
    iter->index      = 0;
 1008114:	e3a03000 	mov	r3, #0
{
 1008118:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    iter->l1_next    = l1->head;
 100811c:	e591e004 	ldr	lr, [r1, #4]
    iter->l2_next    = l2->head;
 1008120:	e580c010 	str	ip, [r0, #16]
    iter->l2         = l2;
 1008124:	e9804006 	stmib	r0, {r1, r2, lr}
    iter->index      = 0;
 1008128:	e5803000 	str	r3, [r0]
    iter->l1_current = NULL;
 100812c:	e5803014 	str	r3, [r0, #20]
    iter->l2_current = NULL;
 1008130:	e5803018 	str	r3, [r0, #24]
    iter->l1_prev    = NULL;
 1008134:	e580301c 	str	r3, [r0, #28]
    iter->l2_prev    = NULL;
 1008138:	e5803020 	str	r3, [r0, #32]
}
 100813c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

01008140 <slist_zip_iter_next>:
{
 1008140:	e1a03000 	mov	r3, r0
    if (!iter->l1_next || !iter->l2_next)
 1008144:	e590000c 	ldr	r0, [r0, #12]
 1008148:	e3500000 	cmp	r0, #0
 100814c:	0a000018 	beq	10081b4 <slist_zip_iter_next+0x74>
 1008150:	e593c010 	ldr	ip, [r3, #16]
 1008154:	e35c0000 	cmp	ip, #0
 1008158:	0a000015 	beq	10081b4 <slist_zip_iter_next+0x74>
{
 100815c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if (iter->l1_current)
 1008160:	e593e014 	ldr	lr, [r3, #20]
    void *data1 = iter->l1_next->data;
 1008164:	e5905000 	ldr	r5, [r0]
    if (iter->l1_current)
 1008168:	e35e0000 	cmp	lr, #0
    void *data2 = iter->l2_next->data;
 100816c:	e59c4000 	ldr	r4, [ip]
        iter->l1_prev = iter->l1_current;
 1008170:	1583e01c 	strne	lr, [r3, #28]
    if (iter->l2_current)
 1008174:	e593e018 	ldr	lr, [r3, #24]
    iter->l1_next    = iter->l1_next->next;
 1008178:	e5907004 	ldr	r7, [r0, #4]
    iter->l2_next    = iter->l2_next->next;
 100817c:	e59c6004 	ldr	r6, [ip, #4]
    if (iter->l2_current)
 1008180:	e35e0000 	cmp	lr, #0
    iter->l1_current = iter->l1_next;
 1008184:	e5830014 	str	r0, [r3, #20]
        iter->l2_prev = iter->l2_current;
 1008188:	1583e020 	strne	lr, [r3, #32]
    return CC_OK;
 100818c:	e3a00000 	mov	r0, #0
    iter->index++;
 1008190:	e593e000 	ldr	lr, [r3]
    iter->l1_next    = iter->l1_next->next;
 1008194:	e583700c 	str	r7, [r3, #12]
    iter->l2_current = iter->l2_next;
 1008198:	e583c018 	str	ip, [r3, #24]
    iter->index++;
 100819c:	e28ee001 	add	lr, lr, #1
    iter->l2_next    = iter->l2_next->next;
 10081a0:	e5836010 	str	r6, [r3, #16]
    iter->index++;
 10081a4:	e583e000 	str	lr, [r3]
    *out1 = data1;
 10081a8:	e5815000 	str	r5, [r1]
    *out2 = data2;
 10081ac:	e5824000 	str	r4, [r2]
}
 10081b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return CC_ITER_END;
 10081b4:	e3a00009 	mov	r0, #9
}
 10081b8:	e12fff1e 	bx	lr

010081bc <slist_zip_iter_add>:
    SNode *new_node1 = iter->l1->mem_calloc(1, sizeof(SNode));
 10081bc:	e5903004 	ldr	r3, [r0, #4]
{
 10081c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10081c4:	e1a04000 	mov	r4, r0
 10081c8:	e1a07001 	mov	r7, r1
    SNode *new_node1 = iter->l1->mem_calloc(1, sizeof(SNode));
 10081cc:	e3a00001 	mov	r0, #1
 10081d0:	e3a01008 	mov	r1, #8
{
 10081d4:	e1a06002 	mov	r6, r2
    SNode *new_node1 = iter->l1->mem_calloc(1, sizeof(SNode));
 10081d8:	e5933010 	ldr	r3, [r3, #16]
 10081dc:	e12fff33 	blx	r3
    if (!new_node1)
 10081e0:	e2505000 	subs	r5, r0, #0
 10081e4:	0a000021 	beq	1008270 <slist_zip_iter_add+0xb4>
    SNode *new_node2 = iter->l2->mem_calloc(1, sizeof(SNode));
 10081e8:	e5943008 	ldr	r3, [r4, #8]
 10081ec:	e3a01008 	mov	r1, #8
 10081f0:	e3a00001 	mov	r0, #1
 10081f4:	e5933010 	ldr	r3, [r3, #16]
 10081f8:	e12fff33 	blx	r3
    if (!new_node2) {
 10081fc:	e3500000 	cmp	r0, #0
 1008200:	0a00001c 	beq	1008278 <slist_zip_iter_add+0xbc>
    if (iter->index == iter->l1->size)
 1008204:	e8941008 	ldm	r4, {r3, ip}
    new_node1->next = iter->l1_next;
 1008208:	e594100c 	ldr	r1, [r4, #12]
    iter->l1_current->next = new_node1;
 100820c:	e594e014 	ldr	lr, [r4, #20]
    if (iter->index == iter->l1->size)
 1008210:	e59c2000 	ldr	r2, [ip]
    new_node1->data = e1;
 1008214:	e5857000 	str	r7, [r5]
    new_node2->next = iter->l2_next;
 1008218:	e5947010 	ldr	r7, [r4, #16]
    new_node2->data = e2;
 100821c:	e5806000 	str	r6, [r0]
    if (iter->index == iter->l1->size)
 1008220:	e1530002 	cmp	r3, r2
    new_node1->next = iter->l1_next;
 1008224:	e5851004 	str	r1, [r5, #4]
    iter->l1->size++;
 1008228:	e2822001 	add	r2, r2, #1
    iter->l2_current->next = new_node2;
 100822c:	e5941018 	ldr	r1, [r4, #24]
    new_node2->next = iter->l2_next;
 1008230:	e5807004 	str	r7, [r0, #4]
    iter->l1_current->next = new_node1;
 1008234:	e58e5004 	str	r5, [lr, #4]
    iter->l2_current->next = new_node2;
 1008238:	e5810004 	str	r0, [r1, #4]
    if (iter->index == iter->l2->size)
 100823c:	e5941008 	ldr	r1, [r4, #8]
        iter->l1->tail = new_node1;
 1008240:	058c5008 	streq	r5, [ip, #8]
    if (iter->index == iter->l2->size)
 1008244:	e591e000 	ldr	lr, [r1]
 1008248:	e153000e 	cmp	r3, lr
    iter->index++;
 100824c:	e2833001 	add	r3, r3, #1
        iter->l2->tail = new_node2;
 1008250:	05810008 	streq	r0, [r1, #8]
    return CC_OK;
 1008254:	e3a00000 	mov	r0, #0
    iter->index++;
 1008258:	e5843000 	str	r3, [r4]
    iter->l1->size++;
 100825c:	e58c2000 	str	r2, [ip]
    iter->l2->size++;
 1008260:	e5913000 	ldr	r3, [r1]
 1008264:	e2833001 	add	r3, r3, #1
 1008268:	e5813000 	str	r3, [r1]
    return CC_OK;
 100826c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_ALLOC;
 1008270:	e3a00001 	mov	r0, #1
}
 1008274:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        iter->l1->mem_free(new_node1);
 1008278:	e5943004 	ldr	r3, [r4, #4]
 100827c:	e1a00005 	mov	r0, r5
 1008280:	e5933014 	ldr	r3, [r3, #20]
 1008284:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1008288:	e3a00001 	mov	r0, #1
 100828c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01008290 <slist_zip_iter_remove>:
{
 1008290:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1008294:	e1a04000 	mov	r4, r0
    if (!iter->l1_current || !iter->l2_current)
 1008298:	e5900014 	ldr	r0, [r0, #20]
 100829c:	e3500000 	cmp	r0, #0
 10082a0:	0a00002f 	beq	1008364 <slist_zip_iter_remove+0xd4>
 10082a4:	e5943018 	ldr	r3, [r4, #24]
 10082a8:	e3530000 	cmp	r3, #0
 10082ac:	0a00002c 	beq	1008364 <slist_zip_iter_remove+0xd4>
    void *e1 = unlinkn(iter->l1, iter->l1_current, iter->l1_prev);
 10082b0:	e594c01c 	ldr	ip, [r4, #28]
 10082b4:	e1a06001 	mov	r6, r1
 10082b8:	e5903004 	ldr	r3, [r0, #4]
 10082bc:	e1a05002 	mov	r5, r2
 10082c0:	e5949004 	ldr	r9, [r4, #4]
    if (prev)
 10082c4:	e35c0000 	cmp	ip, #0
    void *data = node->data;
 10082c8:	e5908000 	ldr	r8, [r0]
        prev->next = node->next;
 10082cc:	158c3004 	strne	r3, [ip, #4]
 10082d0:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 10082d4:	05893004 	streq	r3, [r9, #4]
    if (!node->next)
 10082d8:	e3530000 	cmp	r3, #0
    list->mem_free(node);
 10082dc:	e5993014 	ldr	r3, [r9, #20]
        list->tail = prev;
 10082e0:	0589c008 	streq	ip, [r9, #8]
    list->mem_free(node);
 10082e4:	e12fff33 	blx	r3
    list->size--;
 10082e8:	e5993000 	ldr	r3, [r9]
    void *e2 = unlinkn(iter->l2, iter->l2_current, iter->l2_prev);
 10082ec:	e5940018 	ldr	r0, [r4, #24]
 10082f0:	e5942020 	ldr	r2, [r4, #32]
    list->size--;
 10082f4:	e2433001 	sub	r3, r3, #1
    void *e2 = unlinkn(iter->l2, iter->l2_current, iter->l2_prev);
 10082f8:	e5947008 	ldr	r7, [r4, #8]
    list->size--;
 10082fc:	e5893000 	str	r3, [r9]
        prev->next = node->next;
 1008300:	e5903004 	ldr	r3, [r0, #4]
    if (prev)
 1008304:	e3520000 	cmp	r2, #0
    void *data = node->data;
 1008308:	e5909000 	ldr	r9, [r0]
        prev->next = node->next;
 100830c:	15823004 	strne	r3, [r2, #4]
 1008310:	15903004 	ldrne	r3, [r0, #4]
        list->head = node->next;
 1008314:	05873004 	streq	r3, [r7, #4]
    if (!node->next)
 1008318:	e3530000 	cmp	r3, #0
    list->mem_free(node);
 100831c:	e5973014 	ldr	r3, [r7, #20]
        list->tail = prev;
 1008320:	05872008 	streq	r2, [r7, #8]
    list->mem_free(node);
 1008324:	e12fff33 	blx	r3
    list->size--;
 1008328:	e5972000 	ldr	r2, [r7]
    if (out1)
 100832c:	e3560000 	cmp	r6, #0
    iter->index--;
 1008330:	e5943000 	ldr	r3, [r4]
    iter->l1_current = NULL;
 1008334:	e3a01000 	mov	r1, #0
    return CC_OK;
 1008338:	e3a00000 	mov	r0, #0
    list->size--;
 100833c:	e2422001 	sub	r2, r2, #1
    iter->index--;
 1008340:	e2433001 	sub	r3, r3, #1
    list->size--;
 1008344:	e5872000 	str	r2, [r7]
    iter->index--;
 1008348:	e5843000 	str	r3, [r4]
    iter->l1_current = NULL;
 100834c:	e5841014 	str	r1, [r4, #20]
    iter->l2_current = NULL;
 1008350:	e5841018 	str	r1, [r4, #24]
        *out1 = e1;
 1008354:	15868000 	strne	r8, [r6]
    if (out2)
 1008358:	e3550000 	cmp	r5, #0
        *out2 = e2;
 100835c:	15859000 	strne	r9, [r5]
 1008360:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 1008364:	e3a00007 	mov	r0, #7
 1008368:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0100836c <slist_zip_iter_replace>:
{
 100836c:	e92d4030 	push	{r4, r5, lr}
    if (!iter->l1_current || !iter->l2_current)
 1008370:	e590e014 	ldr	lr, [r0, #20]
{
 1008374:	e59dc00c 	ldr	ip, [sp, #12]
    if (!iter->l1_current || !iter->l2_current)
 1008378:	e35e0000 	cmp	lr, #0
 100837c:	0a00000c 	beq	10083b4 <slist_zip_iter_replace+0x48>
 1008380:	e5900018 	ldr	r0, [r0, #24]
 1008384:	e3500000 	cmp	r0, #0
 1008388:	0a000009 	beq	10083b4 <slist_zip_iter_replace+0x48>
    void *old1 = iter->l1_current->data;
 100838c:	e59e5000 	ldr	r5, [lr]
    if (out1)
 1008390:	e3530000 	cmp	r3, #0
    void *old2 = iter->l2_current->data;
 1008394:	e5904000 	ldr	r4, [r0]
    iter->l1_current->data = e1;
 1008398:	e58e1000 	str	r1, [lr]
    iter->l2_current->data = e2;
 100839c:	e5802000 	str	r2, [r0]
    return CC_OK;
 10083a0:	e3a00000 	mov	r0, #0
        *out1 = old1;
 10083a4:	15835000 	strne	r5, [r3]
    if (out2)
 10083a8:	e35c0000 	cmp	ip, #0
        *out2 = old2;
 10083ac:	158c4000 	strne	r4, [ip]
 10083b0:	e8bd8030 	pop	{r4, r5, pc}
        return CC_ERR_VALUE_NOT_FOUND;
 10083b4:	e3a00007 	mov	r0, #7
 10083b8:	e8bd8030 	pop	{r4, r5, pc}

010083bc <slist_zip_iter_index>:
    return iter->index - 1;
 10083bc:	e5900000 	ldr	r0, [r0]
}
 10083c0:	e2400001 	sub	r0, r0, #1
 10083c4:	e12fff1e 	bx	lr

010083c8 <stack_conf_init>:
 *
 * @param[in, out] conf StackConf structure that is being initialized
 */
void stack_conf_init(StackConf *conf)
{
    array_conf_init(conf);
 10083c8:	eaffe0c4 	b	10006e0 <array_conf_init>

010083cc <stack_new>:
 *
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new Stack structure failed.
 */
enum cc_stat stack_new(Stack **out)
{
 10083cc:	e92d4070 	push	{r4, r5, r6, lr}
 10083d0:	e24dd018 	sub	sp, sp, #24
 10083d4:	e1a06000 	mov	r6, r0
    array_conf_init(conf);
 10083d8:	e28d0004 	add	r0, sp, #4
 10083dc:	ebffe0bf 	bl	10006e0 <array_conf_init>
 * the above mentioned condition is not met, or CC_ERR_ALLOC if the memory
 * allocation for the new Stack structure failed.
 */
enum cc_stat stack_new_conf(StackConf const * const conf, Stack **out)
{
    Stack *stack = conf->mem_calloc(1, sizeof(Stack));
 10083e0:	e59d3010 	ldr	r3, [sp, #16]
 10083e4:	e3a01010 	mov	r1, #16
 10083e8:	e3a00001 	mov	r0, #1
 10083ec:	e12fff33 	blx	r3

    if (!stack)
 10083f0:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 10083f4:	03a05001 	moveq	r5, #1
    if (!stack)
 10083f8:	0a00000c 	beq	1008430 <stack_new+0x64>

    stack->mem_alloc  = conf->mem_alloc;
 10083fc:	e59dc00c 	ldr	ip, [sp, #12]
    stack->mem_calloc = conf->mem_calloc;
    stack->mem_free   = conf->mem_free;

    Array *array;
    enum cc_stat status;
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008400:	e28d0004 	add	r0, sp, #4
    stack->mem_alloc  = conf->mem_alloc;
 1008404:	e59d2010 	ldr	r2, [sp, #16]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008408:	e1a0100d 	mov	r1, sp
    stack->mem_alloc  = conf->mem_alloc;
 100840c:	e59d3014 	ldr	r3, [sp, #20]
 1008410:	e584c004 	str	ip, [r4, #4]
 1008414:	e1c420f8 	strd	r2, [r4, #8]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008418:	ebffe07a 	bl	1000608 <array_new_conf>
 100841c:	e2505000 	subs	r5, r0, #0
 1008420:	1a000005 	bne	100843c <stack_new+0x70>
        stack->v = array;
 1008424:	e59d3000 	ldr	r3, [sp]
 1008428:	e5843000 	str	r3, [r4]
    } else {
        conf->mem_free(stack);
        return status;
    }
    *out = stack;
 100842c:	e5864000 	str	r4, [r6]
}
 1008430:	e1a00005 	mov	r0, r5
 1008434:	e28dd018 	add	sp, sp, #24
 1008438:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(stack);
 100843c:	e1a00004 	mov	r0, r4
 1008440:	e59d3014 	ldr	r3, [sp, #20]
 1008444:	e12fff33 	blx	r3
}
 1008448:	e1a00005 	mov	r0, r5
 100844c:	e28dd018 	add	sp, sp, #24
 1008450:	e8bd8070 	pop	{r4, r5, r6, pc}

01008454 <stack_new_conf>:
{
 1008454:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1008458:	e1a04000 	mov	r4, r0
    Stack *stack = conf->mem_calloc(1, sizeof(Stack));
 100845c:	e590300c 	ldr	r3, [r0, #12]
{
 1008460:	e24dd00c 	sub	sp, sp, #12
 1008464:	e1a07001 	mov	r7, r1
    Stack *stack = conf->mem_calloc(1, sizeof(Stack));
 1008468:	e3a00001 	mov	r0, #1
 100846c:	e3a01010 	mov	r1, #16
 1008470:	e12fff33 	blx	r3
    if (!stack)
 1008474:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 1008478:	03a06001 	moveq	r6, #1
    if (!stack)
 100847c:	0a00000b 	beq	10084b0 <stack_new_conf+0x5c>
    stack->mem_alloc  = conf->mem_alloc;
 1008480:	e5940008 	ldr	r0, [r4, #8]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008484:	e28d1004 	add	r1, sp, #4
    stack->mem_alloc  = conf->mem_alloc;
 1008488:	e1c420dc 	ldrd	r2, [r4, #12]
 100848c:	e5850004 	str	r0, [r5, #4]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008490:	e1a00004 	mov	r0, r4
    stack->mem_alloc  = conf->mem_alloc;
 1008494:	e1c520f8 	strd	r2, [r5, #8]
    if ((status = array_new_conf(conf, &array)) == CC_OK) {
 1008498:	ebffe05a 	bl	1000608 <array_new_conf>
 100849c:	e2506000 	subs	r6, r0, #0
 10084a0:	1a000005 	bne	10084bc <stack_new_conf+0x68>
        stack->v = array;
 10084a4:	e59d3004 	ldr	r3, [sp, #4]
 10084a8:	e5853000 	str	r3, [r5]
    *out = stack;
 10084ac:	e5875000 	str	r5, [r7]
    return CC_OK;
}
 10084b0:	e1a00006 	mov	r0, r6
 10084b4:	e28dd00c 	add	sp, sp, #12
 10084b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        conf->mem_free(stack);
 10084bc:	e1a00005 	mov	r0, r5
 10084c0:	e5943010 	ldr	r3, [r4, #16]
 10084c4:	e12fff33 	blx	r3
}
 10084c8:	e1a00006 	mov	r0, r6
 10084cc:	e28dd00c 	add	sp, sp, #12
 10084d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

010084d4 <stack_destroy>:
 * intact.
 *
 * @param[in] stack the Stack to be destroyed
 */
void stack_destroy(Stack *stack)
{
 10084d4:	e92d4010 	push	{r4, lr}
 10084d8:	e1a04000 	mov	r4, r0
    array_destroy(stack->v);
 10084dc:	e5900000 	ldr	r0, [r0]
 10084e0:	ebffe08c 	bl	1000718 <array_destroy>
    stack->mem_free(stack);
 10084e4:	e594300c 	ldr	r3, [r4, #12]
 10084e8:	e1a00004 	mov	r0, r4
}
 10084ec:	e8bd4010 	pop	{r4, lr}
    stack->mem_free(stack);
 10084f0:	e12fff13 	bx	r3

010084f4 <stack_destroy_cb>:
 * elements allocated on the stack (stack memory).
 *
 * @param[in] stack the stack to be destroyed
 */
void stack_destroy_cb(Stack *stack, void (*cb) (void*))
{
 10084f4:	e92d4010 	push	{r4, lr}
 10084f8:	e1a04000 	mov	r4, r0
    array_destroy_cb(stack->v, cb);
 10084fc:	e5900000 	ldr	r0, [r0]
 1008500:	ebffe08d 	bl	100073c <array_destroy_cb>
    free(stack);
 1008504:	e1a00004 	mov	r0, r4
}
 1008508:	e8bd4010 	pop	{r4, lr}
    free(stack);
 100850c:	ea007641 	b	1025e18 <__free_from_arm>

01008510 <stack_push>:
 * @return CC_OK if the element was successfully pushed, or CC_ERR_ALLOC
 * if the memory allocation for the new element failed.
 */
enum cc_stat stack_push(Stack *stack, void *element)
{
    return array_add(stack->v, element);
 1008510:	e5900000 	ldr	r0, [r0]
 1008514:	eaffe09d 	b	1000790 <array_add>

01008518 <stack_peek>:
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if the
 * Stack is empty.
 */
enum cc_stat stack_peek(Stack *stack, void **out)
{
    return array_get_last(stack->v, out);
 1008518:	e5900000 	ldr	r0, [r0]
 100851c:	eaffe1c1 	b	1000c28 <array_get_last>

01008520 <stack_pop>:
 * @return CC_OK if the element was successfully popped, or CC_ERR_OUT_OF_RANGE
 * if the Stack is already empty.
 */
enum cc_stat stack_pop(Stack *stack, void **out)
{
    return array_remove_last(stack->v, out);
 1008520:	e5900000 	ldr	r0, [r0]
 1008524:	eaffe196 	b	1000b84 <array_remove_last>

01008528 <stack_size>:
 *
 * @return the number of Stack elements.
 */
size_t stack_size(Stack *stack)
{
    return array_size(stack->v);
 1008528:	e5900000 	ldr	r0, [r0]
 100852c:	eaffe337 	b	1001210 <array_size>

01008530 <stack_map>:
 * @param[in] fn the operation function that is to be invoked on each
 *               element of the Stack
 */
void stack_map(Stack *stack, void (*fn) (void *))
{
    array_map(stack->v, fn);
 1008530:	e5900000 	ldr	r0, [r0]
 1008534:	eaffe33f 	b	1001238 <array_map>

01008538 <stack_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] s the stack to iterate over
 */
void stack_iter_init(StackIter *iter, Stack *s)
{
    array_iter_init(&(iter->i), s->v);
 1008538:	e5911000 	ldr	r1, [r1]
 100853c:	eaffe36b 	b	10012f0 <array_iter_init>

01008540 <stack_iter_next>:
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the Stack has been reached.
 */
enum cc_stat stack_iter_next(StackIter *iter, void **out)
{
    return array_iter_next(&(iter->i), out);
 1008540:	eaffe36e 	b	1001300 <array_iter_next>

01008544 <stack_iter_replace>:
 * @return  CC_OK if the element was replaced successfully, or
 * CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat stack_iter_replace(StackIter *iter, void *element, void **out)
{
    return array_iter_replace(&(iter->i), element, out);
 1008544:	eaffe40a 	b	1001574 <array_iter_replace>

01008548 <stack_zip_iter_init>:
 * @param[in] s1   first Stack
 * @param[in] s2   second Stack
 */
void stack_zip_iter_init(StackZipIter *iter, Stack *s1, Stack *s2)
{
    array_zip_iter_init(&(iter->i), s1->v, s2->v);
 1008548:	e5922000 	ldr	r2, [r2]
 100854c:	e5911000 	ldr	r1, [r1]
 1008550:	eaffe41e 	b	10015d0 <array_zip_iter_init>

01008554 <stack_zip_iter_next>:
 * @return CC_OK if a next element pair is returned, or CC_ITER_END if the end
 * of one of the stacks has been reached.
 */
enum cc_stat stack_zip_iter_next(StackZipIter *iter, void **out1, void **out2)
{
    return array_zip_iter_next(&(iter->i), out1, out2);
 1008554:	eaffe421 	b	10015e0 <array_zip_iter_next>

01008558 <stack_zip_iter_replace>:
 *
 * @return CC_OK if the element was successfully replaced, or CC_ERR_OUT_OF_RANGE.
 */
enum cc_stat stack_zip_iter_replace(StackZipIter *iter, void *e1, void *e2, void **out1, void **out2)
{
    return array_zip_iter_replace(&(iter->i), e1, e2, out1, out2);
 1008558:	eaffe521 	b	10019e4 <array_zip_iter_replace>

0100855c <treeset_conf_init>:
 *
 * @param[in, out] conf the configuration struct that is being initialized
 */
void treeset_conf_init(TreeSetConf *conf)
{
    treetable_conf_init(conf);
 100855c:	ea0001e9 	b	1008d08 <treetable_conf_init>

01008560 <treeset_new>:
 *
 * @return  CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new TreeSet failed.
 */
enum cc_stat treeset_new(int (*cmp) (const void*, const void*), TreeSet **set)
{
 1008560:	e92d4070 	push	{r4, r5, r6, lr}
 1008564:	e24dd018 	sub	sp, sp, #24
 1008568:	e1a04000 	mov	r4, r0
    treetable_conf_init(conf);
 100856c:	e28d0008 	add	r0, sp, #8
{
 1008570:	e1a06001 	mov	r6, r1
    treetable_conf_init(conf);
 1008574:	eb0001e3 	bl	1008d08 <treetable_conf_init>
    TreeSetConf conf;
    treeset_conf_init(&conf);
    conf.cmp = cmp;
 1008578:	e58d4008 	str	r4, [sp, #8]
 * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
 * allocation for the new TreeSet structure failed.
 */
enum cc_stat treeset_new_conf(TreeSetConf const * const conf, TreeSet **tset)
{
    TreeSet *set = conf->mem_calloc(1, sizeof(TreeSet));
 100857c:	e3a01014 	mov	r1, #20
 1008580:	e59d3010 	ldr	r3, [sp, #16]
 1008584:	e3a00001 	mov	r0, #1
 1008588:	e12fff33 	blx	r3

    if (!set)
 100858c:	e2504000 	subs	r4, r0, #0
        return CC_ERR_ALLOC;
 1008590:	03a05001 	moveq	r5, #1
    if (!set)
 1008594:	0a00000d 	beq	10085d0 <treeset_new+0x70>

    TreeTable *table;
    enum cc_stat s = treetable_new_conf(conf, &table);
 1008598:	e28d0008 	add	r0, sp, #8
 100859c:	e28d1004 	add	r1, sp, #4
 10085a0:	eb000207 	bl	1008dc4 <treetable_new_conf>

    if (s != CC_OK) {
 10085a4:	e2505000 	subs	r5, r0, #0
 10085a8:	1a00000b 	bne	10085dc <treeset_new+0x7c>
        conf->mem_free(set);
        return s;
    }
    set->t          = table;
 10085ac:	e59d2004 	ldr	r2, [sp, #4]
    set->dummy      = (int*) 1;
 10085b0:	e3a03001 	mov	r3, #1
    set->mem_alloc  = conf->mem_alloc;
    set->mem_calloc = conf->mem_calloc;
 10085b4:	e1cd00dc 	ldrd	r0, [sp, #12]
    set->t          = table;
 10085b8:	e5842000 	str	r2, [r4]
    set->mem_free   = conf->mem_free;
 10085bc:	e59d2014 	ldr	r2, [sp, #20]
    set->mem_calloc = conf->mem_calloc;
 10085c0:	e1c400f8 	strd	r0, [r4, #8]
    set->dummy      = (int*) 1;
 10085c4:	e5843004 	str	r3, [r4, #4]
    set->mem_free   = conf->mem_free;
 10085c8:	e5842010 	str	r2, [r4, #16]

    *tset = set;
 10085cc:	e5864000 	str	r4, [r6]
}
 10085d0:	e1a00005 	mov	r0, r5
 10085d4:	e28dd018 	add	sp, sp, #24
 10085d8:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(set);
 10085dc:	e1a00004 	mov	r0, r4
 10085e0:	e59d3014 	ldr	r3, [sp, #20]
 10085e4:	e12fff33 	blx	r3
}
 10085e8:	e1a00005 	mov	r0, r5
 10085ec:	e28dd018 	add	sp, sp, #24
 10085f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010085f4 <treeset_new_conf>:
{
 10085f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10085f8:	e1a04000 	mov	r4, r0
    TreeSet *set = conf->mem_calloc(1, sizeof(TreeSet));
 10085fc:	e5903008 	ldr	r3, [r0, #8]
{
 1008600:	e24dd00c 	sub	sp, sp, #12
 1008604:	e1a07001 	mov	r7, r1
    TreeSet *set = conf->mem_calloc(1, sizeof(TreeSet));
 1008608:	e3a00001 	mov	r0, #1
 100860c:	e3a01014 	mov	r1, #20
 1008610:	e12fff33 	blx	r3
    if (!set)
 1008614:	e2505000 	subs	r5, r0, #0
        return CC_ERR_ALLOC;
 1008618:	03a06001 	moveq	r6, #1
    if (!set)
 100861c:	0a00000d 	beq	1008658 <treeset_new_conf+0x64>
    enum cc_stat s = treetable_new_conf(conf, &table);
 1008620:	e28d1004 	add	r1, sp, #4
 1008624:	e1a00004 	mov	r0, r4
 1008628:	eb0001e5 	bl	1008dc4 <treetable_new_conf>
    if (s != CC_OK) {
 100862c:	e2506000 	subs	r6, r0, #0
 1008630:	1a00000b 	bne	1008664 <treeset_new_conf+0x70>
    set->dummy      = (int*) 1;
 1008634:	e3a03001 	mov	r3, #1
    set->mem_alloc  = conf->mem_alloc;
 1008638:	e5941004 	ldr	r1, [r4, #4]
    set->t          = table;
 100863c:	e59d0004 	ldr	r0, [sp, #4]
    set->dummy      = (int*) 1;
 1008640:	e5853004 	str	r3, [r5, #4]
    set->mem_free   = conf->mem_free;
 1008644:	e1c420d8 	ldrd	r2, [r4, #8]
    set->t          = table;
 1008648:	e5850000 	str	r0, [r5]
    set->mem_alloc  = conf->mem_alloc;
 100864c:	e5851008 	str	r1, [r5, #8]
    set->mem_free   = conf->mem_free;
 1008650:	e1c520fc 	strd	r2, [r5, #12]
    *tset = set;
 1008654:	e5875000 	str	r5, [r7]
    return CC_OK;
}
 1008658:	e1a00006 	mov	r0, r6
 100865c:	e28dd00c 	add	sp, sp, #12
 1008660:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        conf->mem_free(set);
 1008664:	e1a00005 	mov	r0, r5
 1008668:	e594300c 	ldr	r3, [r4, #12]
 100866c:	e12fff33 	blx	r3
}
 1008670:	e1a00006 	mov	r0, r6
 1008674:	e28dd00c 	add	sp, sp, #12
 1008678:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0100867c <treeset_destroy>:
 * Destroys the specified TreeSet.
 *
 * @param[in] set the TreeSet to be destroyed
 */
void treeset_destroy(TreeSet *set)
{
 100867c:	e92d4010 	push	{r4, lr}
 1008680:	e1a04000 	mov	r4, r0
    treetable_destroy(set->t);
 1008684:	e5900000 	ldr	r0, [r0]
 1008688:	eb0001f3 	bl	1008e5c <treetable_destroy>
    set->mem_free(set);
 100868c:	e5943010 	ldr	r3, [r4, #16]
 1008690:	e1a00004 	mov	r0, r4
}
 1008694:	e8bd4010 	pop	{r4, lr}
    set->mem_free(set);
 1008698:	e12fff13 	bx	r3

0100869c <treeset_add>:
 * @return CC_OK if the operation was successful, or CC_ERR_ALLOC if the
 * memory allocation for the new element failed.
 */
enum cc_stat treeset_add(TreeSet *set, void *element)
{
    return treetable_add(set->t, element, set->dummy);
 100869c:	e8900005 	ldm	r0, {r0, r2}
 10086a0:	ea00048d 	b	10098dc <treetable_add>

010086a4 <treeset_remove>:
 *
 * @return CC_OK if the mapping was successfully removed, or CC_ERR_VALUE_NOT_FOUND
 * if the value was not found.
 */
enum cc_stat treeset_remove(TreeSet *set, void *element, void **out)
{
 10086a4:	e92d4010 	push	{r4, lr}
    if (treetable_remove(set->t, element, out) == CC_ERR_KEY_NOT_FOUND)
 10086a8:	e5900000 	ldr	r0, [r0]
 10086ac:	eb000549 	bl	1009bd8 <treetable_remove>
 10086b0:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 10086b4:	03a00007 	moveq	r0, #7
 10086b8:	13a00000 	movne	r0, #0
 10086bc:	e8bd8010 	pop	{r4, pc}

010086c0 <treeset_remove_all>:
 *
 * @param set the set from which all elements are being removed
 */
void treeset_remove_all(TreeSet *set)
{
    treetable_remove_all(set->t);
 10086c0:	e5900000 	ldr	r0, [r0]
 10086c4:	ea000588 	b	1009cec <treetable_remove_all>

010086c8 <treeset_get_first>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_first(TreeSet *set, void **out)
{
 10086c8:	e92d4010 	push	{r4, lr}
    if (treetable_get_first_key(set->t, out) == CC_ERR_KEY_NOT_FOUND)
 10086cc:	e5900000 	ldr	r0, [r0]
 10086d0:	eb00039f 	bl	1009554 <treetable_get_first_key>
 10086d4:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 10086d8:	03a00007 	moveq	r0, #7
 10086dc:	13a00000 	movne	r0, #0
 10086e0:	e8bd8010 	pop	{r4, pc}

010086e4 <treeset_get_last>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_last(TreeSet *set, void **out)
{
 10086e4:	e92d4010 	push	{r4, lr}
    if (treetable_get_last_key(set->t, out) == CC_ERR_KEY_NOT_FOUND)
 10086e8:	e5900000 	ldr	r0, [r0]
 10086ec:	eb0003a5 	bl	1009588 <treetable_get_last_key>
 10086f0:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 10086f4:	03a00007 	moveq	r0, #7
 10086f8:	13a00000 	movne	r0, #0
 10086fc:	e8bd8010 	pop	{r4, pc}

01008700 <treeset_get_greater_than>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_greater_than(TreeSet *set, void *element, void **out)
{
 1008700:	e92d4010 	push	{r4, lr}
    if (treetable_get_greater_than(set->t, element, out) == CC_ERR_KEY_NOT_FOUND)
 1008704:	e5900000 	ldr	r0, [r0]
 1008708:	eb0003ab 	bl	10095bc <treetable_get_greater_than>
 100870c:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 1008710:	03a00007 	moveq	r0, #7
 1008714:	13a00000 	movne	r0, #0
 1008718:	e8bd8010 	pop	{r4, pc}

0100871c <treeset_get_lesser_than>:
 * @param[out] out pointer to where the returned element is stored
 *
 * @return CC_OK if the element was found, or CC_ERR_VALUE_NOT_FOUND if not.
 */
enum cc_stat treeset_get_lesser_than(TreeSet *set, void *element, void **out)
{
 100871c:	e92d4010 	push	{r4, lr}
    if (treetable_get_lesser_than(set->t, element, out) == CC_ERR_KEY_NOT_FOUND)
 1008720:	e5900000 	ldr	r0, [r0]
 1008724:	eb0003e2 	bl	10096b4 <treetable_get_lesser_than>
 1008728:	e3500006 	cmp	r0, #6
        return CC_ERR_VALUE_NOT_FOUND;

    return CC_OK;
}
 100872c:	03a00007 	moveq	r0, #7
 1008730:	13a00000 	movne	r0, #0
 1008734:	e8bd8010 	pop	{r4, pc}

01008738 <treeset_contains>:
 *
 * @return true if the specified element is an element of the set.
 */
bool treeset_contains(TreeSet *set, void *element)
{
    return treetable_contains_key(set->t, element);
 1008738:	e5900000 	ldr	r0, [r0]
 100873c:	ea00041b 	b	10097b0 <treetable_contains_key>

01008740 <treeset_size>:
 *
 * @return the size of the set.
 */
size_t treeset_size(TreeSet *set)
{
    return treetable_size(set->t);
 1008740:	e5900000 	ldr	r0, [r0]
 1008744:	ea000417 	b	10097a8 <treetable_size>

01008748 <treeset_foreach>:
 * @param[in] fn the operation function that is invoked on each element
 *               of the set
 */
void treeset_foreach(TreeSet *set, void (*fn) (const void*))
{
    treetable_foreach_key(set->t, fn);
 1008748:	e5900000 	ldr	r0, [r0]
 100874c:	ea0006e8 	b	100a2f4 <treetable_foreach_key>

01008750 <treeset_iter_init>:
 * @param[in] iter the iterator that is being initialized
 * @param[in] set the set on which this iterator will operate
 */
void treeset_iter_init(TreeSetIter *iter, TreeSet *set)
{
    treetable_iter_init(&(iter->i), set->t);
 1008750:	e5911000 	ldr	r1, [r1]
 1008754:	ea00073c 	b	100a44c <treetable_iter_init>

01008758 <treeset_iter_next>:
 *
 * @return CC_OK if the iterator was advanced, or CC_ITER_END if the
 * end of the TreeSet has been reached.
 */
enum cc_stat treeset_iter_next(TreeSetIter *iter, void **element)
{
 1008758:	e92d4010 	push	{r4, lr}
 100875c:	e24dd008 	sub	sp, sp, #8
 1008760:	e1a04001 	mov	r4, r1
    TreeTableEntry entry;

    if (treetable_iter_next(&(iter->i), &entry) != CC_OK)
 1008764:	e1a0100d 	mov	r1, sp
 1008768:	eb000743 	bl	100a47c <treetable_iter_next>
 100876c:	e3500000 	cmp	r0, #0
        return CC_ITER_END;

    *element = entry.key;
 1008770:	059d3000 	ldreq	r3, [sp]
        return CC_ITER_END;
 1008774:	13a00009 	movne	r0, #9
    *element = entry.key;
 1008778:	05843000 	streq	r3, [r4]
    return CC_OK;
}
 100877c:	e28dd008 	add	sp, sp, #8
 1008780:	e8bd8010 	pop	{r4, pc}

01008784 <treeset_iter_remove>:
 * @return CC_OK if the element was successfully removed, or
 * CC_ERR_KEY_NOT_FOUND.
 */
enum cc_stat treeset_iter_remove(TreeSetIter *iter, void **out)
{
    return treetable_iter_remove(&(iter->i), out);
 1008784:	ea000765 	b	100a520 <treetable_iter_remove>

01008788 <remove_node>:
 *
 * @param[in] table the table on which this operation is performed
 * @param[in] z the node that is being removed
 */
static void remove_node(TreeTable *table, RBNode *z)
{
 1008788:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100878c:	e1a04000 	mov	r4, r0
    RBNode *x;
    RBNode *y = z;

    int y_color = y->color;

    if (z->left == table->sentinel) {
 1008790:	e591c010 	ldr	ip, [r1, #16]
 1008794:	e5900004 	ldr	r0, [r0, #4]
    int y_color = y->color;
 1008798:	e5d12008 	ldrb	r2, [r1, #8]
    if (z->left == table->sentinel) {
 100879c:	e591e014 	ldr	lr, [r1, #20]
 10087a0:	e15c0000 	cmp	ip, r0
 10087a4:	0a00007e 	beq	10089a4 <remove_node+0x21c>
        x = z->right;
        transplant(table, z, z->right);
    } else if (z->right == table->sentinel) {
 10087a8:	e150000e 	cmp	r0, lr
 10087ac:	11a0300e 	movne	r3, lr
 10087b0:	1a000050 	bne	10088f8 <remove_node+0x170>
    if (u->parent == table->sentinel)
 10087b4:	e591300c 	ldr	r3, [r1, #12]
 10087b8:	e1500003 	cmp	r0, r3
        table->root = v;
 10087bc:	0584c000 	streq	ip, [r4]
    if (u->parent == table->sentinel)
 10087c0:	0a000003 	beq	10087d4 <remove_node+0x4c>
    else if (u == u->parent->left)
 10087c4:	e5930010 	ldr	r0, [r3, #16]
 10087c8:	e1510000 	cmp	r1, r0
        u->parent->left = v;
 10087cc:	0583c010 	streq	ip, [r3, #16]
        u->parent->right = v;
 10087d0:	1583c014 	strne	ip, [r3, #20]
        transplant(table, z, y);
        y->left = z->left;
        y->left->parent = y;
        y->color = z->color;
    }
    if (y_color == RB_BLACK)
 10087d4:	e3520001 	cmp	r2, #1
    v->parent = u->parent;
 10087d8:	e58c300c 	str	r3, [ip, #12]
    if (y_color == RB_BLACK)
 10087dc:	1a000069 	bne	1008988 <remove_node+0x200>
 10087e0:	e5943000 	ldr	r3, [r4]
    while (x != table->root && x->color == RB_BLACK) {
 10087e4:	e15c0003 	cmp	ip, r3
 10087e8:	0a00003e 	beq	10088e8 <remove_node+0x160>
 10087ec:	e5dc3008 	ldrb	r3, [ip, #8]
 10087f0:	e3530001 	cmp	r3, #1
 10087f4:	1a00003b 	bne	10088e8 <remove_node+0x160>
                w->color = RB_BLACK;
 10087f8:	e1a06002 	mov	r6, r2
                w->color = RB_RED;
 10087fc:	e3a07000 	mov	r7, #0
        if (x == x->parent->left) {
 1008800:	e59c300c 	ldr	r3, [ip, #12]
 1008804:	e5932010 	ldr	r2, [r3, #16]
 1008808:	e152000c 	cmp	r2, ip
 100880c:	0a00006f 	beq	10089d0 <remove_node+0x248>
            if (w->color == RB_RED) {
 1008810:	e5d20008 	ldrb	r0, [r2, #8]
 1008814:	e592e014 	ldr	lr, [r2, #20]
 1008818:	e3500000 	cmp	r0, #0
 100881c:	1a000013 	bne	1008870 <remove_node+0xe8>
                w->color = RB_BLACK;
 1008820:	e5c26008 	strb	r6, [r2, #8]
                x->parent->color = RB_RED;
 1008824:	e5c30008 	strb	r0, [r3, #8]
                rotate_right(table, x->parent);
 1008828:	e5945004 	ldr	r5, [r4, #4]
 */
static void rotate_right(TreeTable *table, RBNode *x)
{
    RBNode *y = x->left;

    x->left = y->right;
 100882c:	e583e010 	str	lr, [r3, #16]

    if (y->right != table->sentinel)
 1008830:	e155000e 	cmp	r5, lr
        y->right->parent = x;
 1008834:	158e300c 	strne	r3, [lr, #12]

    y->parent = x->parent;
 1008838:	e593000c 	ldr	r0, [r3, #12]

    if (x->parent == table->sentinel)
 100883c:	e1550000 	cmp	r5, r0
    y->parent = x->parent;
 1008840:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 1008844:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 1008848:	0a000003 	beq	100885c <remove_node+0xd4>
    else if (x == x->parent->right)
 100884c:	e590e014 	ldr	lr, [r0, #20]
 1008850:	e153000e 	cmp	r3, lr
        x->parent->right = y;
 1008854:	05802014 	streq	r2, [r0, #20]
    else
        x->parent->left = y;
 1008858:	15802010 	strne	r2, [r0, #16]

    y->right  = x;
 100885c:	e5823014 	str	r3, [r2, #20]
    x->parent = y;
 1008860:	e583200c 	str	r2, [r3, #12]
                w = x->parent->left;
 1008864:	e59c300c 	ldr	r3, [ip, #12]
 1008868:	e5932010 	ldr	r2, [r3, #16]
 100886c:	e592e014 	ldr	lr, [r2, #20]
            if (w->right->color == RB_BLACK && w->left->color == RB_BLACK) {
 1008870:	e5de5008 	ldrb	r5, [lr, #8]
 1008874:	e5920010 	ldr	r0, [r2, #16]
 1008878:	e3550001 	cmp	r5, #1
 100887c:	e5d05008 	ldrb	r5, [r0, #8]
 1008880:	0a00008c 	beq	1008ab8 <remove_node+0x330>
                if (w->left->color == RB_BLACK) {
 1008884:	e3550001 	cmp	r5, #1
 1008888:	0a000095 	beq	1008ae4 <remove_node+0x35c>
                w->color = x->parent->color;
 100888c:	e5d35008 	ldrb	r5, [r3, #8]
                x->parent->color = RB_BLACK;
 1008890:	e3a0c001 	mov	ip, #1
                w->color = x->parent->color;
 1008894:	e5c25008 	strb	r5, [r2, #8]
                x->parent->color = RB_BLACK;
 1008898:	e5c3c008 	strb	ip, [r3, #8]
                w->left->color = RB_BLACK;
 100889c:	e5c0c008 	strb	ip, [r0, #8]
                rotate_right(table, x->parent);
 10088a0:	e594c004 	ldr	ip, [r4, #4]
    x->left = y->right;
 10088a4:	e583e010 	str	lr, [r3, #16]
    if (y->right != table->sentinel)
 10088a8:	e15c000e 	cmp	ip, lr
        y->right->parent = x;
 10088ac:	158e300c 	strne	r3, [lr, #12]
    y->parent = x->parent;
 10088b0:	e593000c 	ldr	r0, [r3, #12]
    if (x->parent == table->sentinel)
 10088b4:	e15c0000 	cmp	ip, r0
    y->parent = x->parent;
 10088b8:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 10088bc:	01a0c002 	moveq	ip, r2
 10088c0:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 10088c4:	0a000005 	beq	10088e0 <remove_node+0x158>
    else if (x == x->parent->right)
 10088c8:	e590c014 	ldr	ip, [r0, #20]
 10088cc:	e15c0003 	cmp	ip, r3
        x->parent->right = y;
 10088d0:	0594c000 	ldreq	ip, [r4]
 10088d4:	1594c000 	ldrne	ip, [r4]
 10088d8:	05802014 	streq	r2, [r0, #20]
        x->parent->left = y;
 10088dc:	15802010 	strne	r2, [r0, #16]
    y->right  = x;
 10088e0:	e5823014 	str	r3, [r2, #20]
    x->parent = y;
 10088e4:	e583200c 	str	r2, [r3, #12]
    x->color = RB_BLACK;
 10088e8:	e3a03001 	mov	r3, #1
 10088ec:	e5cc3008 	strb	r3, [ip, #8]
 10088f0:	ea000024 	b	1008988 <remove_node+0x200>
    while (n->left != s)
 10088f4:	e1a03002 	mov	r3, r2
 10088f8:	e5932010 	ldr	r2, [r3, #16]
 10088fc:	e1500002 	cmp	r0, r2
 1008900:	1afffffb 	bne	10088f4 <remove_node+0x16c>
        if (y->parent == z) {
 1008904:	e593500c 	ldr	r5, [r3, #12]
        x = y->right;
 1008908:	e593c014 	ldr	ip, [r3, #20]
        y_color = y->color;
 100890c:	e5d32008 	ldrb	r2, [r3, #8]
        if (y->parent == z) {
 1008910:	e1550001 	cmp	r5, r1
            x->parent = y;
 1008914:	058c300c 	streq	r3, [ip, #12]
        if (y->parent == z) {
 1008918:	0a000009 	beq	1008944 <remove_node+0x1bc>
    if (u->parent == table->sentinel)
 100891c:	e1500005 	cmp	r0, r5
 1008920:	0a0000a2 	beq	1008bb0 <remove_node+0x428>
    else if (u == u->parent->left)
 1008924:	e5950010 	ldr	r0, [r5, #16]
 1008928:	e1530000 	cmp	r3, r0
        u->parent->right = v;
 100892c:	1585c014 	strne	ip, [r5, #20]
 1008930:	1591e014 	ldrne	lr, [r1, #20]
        u->parent->left = v;
 1008934:	0585c010 	streq	ip, [r5, #16]
    v->parent = u->parent;
 1008938:	e58c500c 	str	r5, [ip, #12]
            y->right = z->right;
 100893c:	e583e014 	str	lr, [r3, #20]
            y->right->parent = y;
 1008940:	e58e300c 	str	r3, [lr, #12]
    if (u->parent == table->sentinel)
 1008944:	e591000c 	ldr	r0, [r1, #12]
 1008948:	e594e004 	ldr	lr, [r4, #4]
 100894c:	e15e0000 	cmp	lr, r0
        table->root = v;
 1008950:	05843000 	streq	r3, [r4]
    if (u->parent == table->sentinel)
 1008954:	0a000003 	beq	1008968 <remove_node+0x1e0>
    else if (u == u->parent->left)
 1008958:	e590e010 	ldr	lr, [r0, #16]
 100895c:	e151000e 	cmp	r1, lr
        u->parent->left = v;
 1008960:	05803010 	streq	r3, [r0, #16]
        u->parent->right = v;
 1008964:	15803014 	strne	r3, [r0, #20]
        y->left = z->left;
 1008968:	e591e010 	ldr	lr, [r1, #16]
    v->parent = u->parent;
 100896c:	e583000c 	str	r0, [r3, #12]
        y->left = z->left;
 1008970:	e583e010 	str	lr, [r3, #16]
        y->left->parent = y;
 1008974:	e58e300c 	str	r3, [lr, #12]
        y->color = z->color;
 1008978:	e5d10008 	ldrb	r0, [r1, #8]
 100897c:	e5c30008 	strb	r0, [r3, #8]
    if (y_color == RB_BLACK)
 1008980:	e3520001 	cmp	r2, #1
 1008984:	0affff95 	beq	10087e0 <remove_node+0x58>
    table->mem_free(z);
 1008988:	e5943018 	ldr	r3, [r4, #24]
 100898c:	e1a00001 	mov	r0, r1
 1008990:	e12fff33 	blx	r3
    table->size--;
 1008994:	e5943008 	ldr	r3, [r4, #8]
 1008998:	e2433001 	sub	r3, r3, #1
 100899c:	e5843008 	str	r3, [r4, #8]
}
 10089a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (u->parent == table->sentinel)
 10089a4:	e591300c 	ldr	r3, [r1, #12]
 10089a8:	e15c0003 	cmp	ip, r3
        table->root = v;
 10089ac:	0584e000 	streq	lr, [r4]
    if (u->parent == table->sentinel)
 10089b0:	0a000003 	beq	10089c4 <remove_node+0x23c>
    else if (u == u->parent->left)
 10089b4:	e5930010 	ldr	r0, [r3, #16]
 10089b8:	e1510000 	cmp	r1, r0
        u->parent->left = v;
 10089bc:	0583e010 	streq	lr, [r3, #16]
        u->parent->right = v;
 10089c0:	1583e014 	strne	lr, [r3, #20]
    v->parent = u->parent;
 10089c4:	e58e300c 	str	r3, [lr, #12]
 10089c8:	e1a0c00e 	mov	ip, lr
 10089cc:	eaffffeb 	b	1008980 <remove_node+0x1f8>
            w = x->parent->right;
 10089d0:	e5932014 	ldr	r2, [r3, #20]
            if (w->color == RB_RED) {
 10089d4:	e5d2e008 	ldrb	lr, [r2, #8]
 10089d8:	e5920010 	ldr	r0, [r2, #16]
 10089dc:	e35e0000 	cmp	lr, #0
 10089e0:	1a000013 	bne	1008a34 <remove_node+0x2ac>
                w->color = RB_BLACK;
 10089e4:	e5c26008 	strb	r6, [r2, #8]
                x->parent->color = RB_RED;
 10089e8:	e5c3e008 	strb	lr, [r3, #8]
                rotate_left(table, x->parent);
 10089ec:	e594e004 	ldr	lr, [r4, #4]
 */
static void rotate_left(TreeTable *table, RBNode *x)
{
    RBNode *y = x->right;

    x->right = y->left;
 10089f0:	e5830014 	str	r0, [r3, #20]

    if (y->left != table->sentinel)
 10089f4:	e15e0000 	cmp	lr, r0
        y->left->parent = x;
 10089f8:	1580300c 	strne	r3, [r0, #12]

    y->parent = x->parent;
 10089fc:	e593000c 	ldr	r0, [r3, #12]

    if (x->parent == table->sentinel)
 1008a00:	e15e0000 	cmp	lr, r0
    y->parent = x->parent;
 1008a04:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 1008a08:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 1008a0c:	0a000003 	beq	1008a20 <remove_node+0x298>
    else if (x == x->parent->left)
 1008a10:	e590e010 	ldr	lr, [r0, #16]
 1008a14:	e153000e 	cmp	r3, lr
        x->parent->left = y;
 1008a18:	05802010 	streq	r2, [r0, #16]
    else
        x->parent->right = y;
 1008a1c:	15802014 	strne	r2, [r0, #20]

    y->left   = x;
 1008a20:	e5823010 	str	r3, [r2, #16]
    x->parent = y;
 1008a24:	e583200c 	str	r2, [r3, #12]
                w = x->parent->right;
 1008a28:	e59c300c 	ldr	r3, [ip, #12]
 1008a2c:	e5932014 	ldr	r2, [r3, #20]
 1008a30:	e5920010 	ldr	r0, [r2, #16]
            if (w->left->color == RB_BLACK && w->right->color == RB_BLACK) {
 1008a34:	e5d05008 	ldrb	r5, [r0, #8]
 1008a38:	e592e014 	ldr	lr, [r2, #20]
 1008a3c:	e3550001 	cmp	r5, #1
 1008a40:	e5de5008 	ldrb	r5, [lr, #8]
 1008a44:	0a00003e 	beq	1008b44 <remove_node+0x3bc>
                if (w->right->color == RB_BLACK) {
 1008a48:	e3550001 	cmp	r5, #1
 1008a4c:	0a00003f 	beq	1008b50 <remove_node+0x3c8>
                w->color = x->parent->color;
 1008a50:	e5d35008 	ldrb	r5, [r3, #8]
                x->parent->color = RB_BLACK;
 1008a54:	e3a0c001 	mov	ip, #1
                w->color = x->parent->color;
 1008a58:	e5c25008 	strb	r5, [r2, #8]
                x->parent->color = RB_BLACK;
 1008a5c:	e5c3c008 	strb	ip, [r3, #8]
                w->right->color = RB_BLACK;
 1008a60:	e5cec008 	strb	ip, [lr, #8]
                rotate_left(table, x->parent);
 1008a64:	e594c004 	ldr	ip, [r4, #4]
    x->right = y->left;
 1008a68:	e5830014 	str	r0, [r3, #20]
    if (y->left != table->sentinel)
 1008a6c:	e15c0000 	cmp	ip, r0
        y->left->parent = x;
 1008a70:	1580300c 	strne	r3, [r0, #12]
    y->parent = x->parent;
 1008a74:	e593000c 	ldr	r0, [r3, #12]
    if (x->parent == table->sentinel)
 1008a78:	e15c0000 	cmp	ip, r0
    y->parent = x->parent;
 1008a7c:	e582000c 	str	r0, [r2, #12]
        table->root = y;
 1008a80:	01a0c002 	moveq	ip, r2
 1008a84:	05842000 	streq	r2, [r4]
    if (x->parent == table->sentinel)
 1008a88:	0a000005 	beq	1008aa4 <remove_node+0x31c>
    else if (x == x->parent->left)
 1008a8c:	e590c010 	ldr	ip, [r0, #16]
 1008a90:	e15c0003 	cmp	ip, r3
        x->parent->left = y;
 1008a94:	0594c000 	ldreq	ip, [r4]
 1008a98:	1594c000 	ldrne	ip, [r4]
 1008a9c:	05802010 	streq	r2, [r0, #16]
        x->parent->right = y;
 1008aa0:	15802014 	strne	r2, [r0, #20]
    y->left   = x;
 1008aa4:	e5823010 	str	r3, [r2, #16]
    x->parent = y;
 1008aa8:	e583200c 	str	r2, [r3, #12]
    x->color = RB_BLACK;
 1008aac:	e3a03001 	mov	r3, #1
 1008ab0:	e5cc3008 	strb	r3, [ip, #8]
 1008ab4:	eaffffb3 	b	1008988 <remove_node+0x200>
            if (w->right->color == RB_BLACK && w->left->color == RB_BLACK) {
 1008ab8:	e3550001 	cmp	r5, #1
 1008abc:	1affff72 	bne	100888c <remove_node+0x104>
                w->color = RB_RED;
 1008ac0:	e5c27008 	strb	r7, [r2, #8]
 1008ac4:	e1a0c003 	mov	ip, r3
 1008ac8:	e5942000 	ldr	r2, [r4]
    while (x != table->root && x->color == RB_BLACK) {
 1008acc:	e1530002 	cmp	r3, r2
 1008ad0:	0affff84 	beq	10088e8 <remove_node+0x160>
 1008ad4:	e5d33008 	ldrb	r3, [r3, #8]
 1008ad8:	e3530001 	cmp	r3, #1
 1008adc:	0affff47 	beq	1008800 <remove_node+0x78>
 1008ae0:	eaffff80 	b	10088e8 <remove_node+0x160>
                    w->color = RB_RED;
 1008ae4:	e3a03000 	mov	r3, #0
                    w->right->color = RB_BLACK;
 1008ae8:	e5ce5008 	strb	r5, [lr, #8]
                    w->color = RB_RED;
 1008aec:	e5c23008 	strb	r3, [r2, #8]
                    rotate_left(table, w);
 1008af0:	e5940004 	ldr	r0, [r4, #4]
    x->right = y->left;
 1008af4:	e59e3010 	ldr	r3, [lr, #16]
    if (y->left != table->sentinel)
 1008af8:	e1500003 	cmp	r0, r3
    x->right = y->left;
 1008afc:	e5823014 	str	r3, [r2, #20]
        y->left->parent = x;
 1008b00:	1583200c 	strne	r2, [r3, #12]
    y->parent = x->parent;
 1008b04:	e592300c 	ldr	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1008b08:	e1500003 	cmp	r0, r3
    y->parent = x->parent;
 1008b0c:	e58e300c 	str	r3, [lr, #12]
        table->root = y;
 1008b10:	0584e000 	streq	lr, [r4]
    if (x->parent == table->sentinel)
 1008b14:	0a000003 	beq	1008b28 <remove_node+0x3a0>
    else if (x == x->parent->left)
 1008b18:	e5930010 	ldr	r0, [r3, #16]
 1008b1c:	e1520000 	cmp	r2, r0
        x->parent->left = y;
 1008b20:	0583e010 	streq	lr, [r3, #16]
        x->parent->right = y;
 1008b24:	1583e014 	strne	lr, [r3, #20]
    y->left   = x;
 1008b28:	e58e2010 	str	r2, [lr, #16]
    x->parent = y;
 1008b2c:	e582e00c 	str	lr, [r2, #12]
                    w = x->parent->left;
 1008b30:	e59c300c 	ldr	r3, [ip, #12]
 1008b34:	e5932010 	ldr	r2, [r3, #16]
 1008b38:	e5920010 	ldr	r0, [r2, #16]
 1008b3c:	e592e014 	ldr	lr, [r2, #20]
 1008b40:	eaffff51 	b	100888c <remove_node+0x104>
            if (w->left->color == RB_BLACK && w->right->color == RB_BLACK) {
 1008b44:	e3550001 	cmp	r5, #1
 1008b48:	1affffc0 	bne	1008a50 <remove_node+0x2c8>
 1008b4c:	eaffffdb 	b	1008ac0 <remove_node+0x338>
                    w->color = RB_RED;
 1008b50:	e3a03000 	mov	r3, #0
                    w->left->color = RB_BLACK;
 1008b54:	e5c05008 	strb	r5, [r0, #8]
                    w->color = RB_RED;
 1008b58:	e5c23008 	strb	r3, [r2, #8]
                    rotate_right(table, w);
 1008b5c:	e594e004 	ldr	lr, [r4, #4]
    x->left = y->right;
 1008b60:	e5903014 	ldr	r3, [r0, #20]
    if (y->right != table->sentinel)
 1008b64:	e15e0003 	cmp	lr, r3
    x->left = y->right;
 1008b68:	e5823010 	str	r3, [r2, #16]
        y->right->parent = x;
 1008b6c:	1583200c 	strne	r2, [r3, #12]
    y->parent = x->parent;
 1008b70:	e592300c 	ldr	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1008b74:	e15e0003 	cmp	lr, r3
    y->parent = x->parent;
 1008b78:	e580300c 	str	r3, [r0, #12]
        table->root = y;
 1008b7c:	05840000 	streq	r0, [r4]
    if (x->parent == table->sentinel)
 1008b80:	0a000003 	beq	1008b94 <remove_node+0x40c>
    else if (x == x->parent->right)
 1008b84:	e593e014 	ldr	lr, [r3, #20]
 1008b88:	e152000e 	cmp	r2, lr
        x->parent->right = y;
 1008b8c:	05830014 	streq	r0, [r3, #20]
        x->parent->left = y;
 1008b90:	15830010 	strne	r0, [r3, #16]
    y->right  = x;
 1008b94:	e5802014 	str	r2, [r0, #20]
    x->parent = y;
 1008b98:	e582000c 	str	r0, [r2, #12]
                    w = x->parent->right;
 1008b9c:	e59c300c 	ldr	r3, [ip, #12]
 1008ba0:	e5932014 	ldr	r2, [r3, #20]
 1008ba4:	e592e014 	ldr	lr, [r2, #20]
 1008ba8:	e5920010 	ldr	r0, [r2, #16]
 1008bac:	eaffffa7 	b	1008a50 <remove_node+0x2c8>
        table->root = v;
 1008bb0:	e584c000 	str	ip, [r4]
 1008bb4:	e591e014 	ldr	lr, [r1, #20]
 1008bb8:	eaffff5e 	b	1008938 <remove_node+0x1b0>

01008bbc <treetable_test>:


#ifdef DEBUG
static int treetable_test(TreeTable *table, RBNode *node, int *nb)
{
    if (node == table->sentinel) {
 1008bbc:	e590c004 	ldr	ip, [r0, #4]
 1008bc0:	e15c0001 	cmp	ip, r1
 1008bc4:	0a000039 	beq	1008cb0 <treetable_test+0xf4>
        *nb = 1;
        return RB_ERROR_OK;
    }
    /* check tree order */
    if (node->left != table->sentinel) {
 1008bc8:	e5913010 	ldr	r3, [r1, #16]
{
 1008bcc:	e92d4070 	push	{r4, r5, r6, lr}
 1008bd0:	e1a06002 	mov	r6, r2
 1008bd4:	e24dd008 	sub	sp, sp, #8
 1008bd8:	e1a04001 	mov	r4, r1
    if (node->left != table->sentinel) {
 1008bdc:	e15c0003 	cmp	ip, r3
 1008be0:	e1a05000 	mov	r5, r0
 1008be4:	0a000006 	beq	1008c04 <treetable_test+0x48>
        int cmp = table->cmp(node->left->key, node->key);
 1008be8:	e5930000 	ldr	r0, [r3]
 1008bec:	e5911000 	ldr	r1, [r1]
 1008bf0:	e595300c 	ldr	r3, [r5, #12]
 1008bf4:	e12fff33 	blx	r3
        if (cmp >= 0)
 1008bf8:	e3500000 	cmp	r0, #0
 1008bfc:	b5953004 	ldrlt	r3, [r5, #4]
 1008c00:	aa000017 	bge	1008c64 <treetable_test+0xa8>
            return RB_ERROR_TREE_STRUCTURE;
    }
    if (node->right != table->sentinel) {
 1008c04:	e5942014 	ldr	r2, [r4, #20]
 1008c08:	e1520003 	cmp	r2, r3
 1008c0c:	0a000005 	beq	1008c28 <treetable_test+0x6c>
        int cmp = table->cmp(node->right->key, node->key);
 1008c10:	e5920000 	ldr	r0, [r2]
 1008c14:	e595300c 	ldr	r3, [r5, #12]
 1008c18:	e5941000 	ldr	r1, [r4]
 1008c1c:	e12fff33 	blx	r3
        if (cmp <= 0)
 1008c20:	e3500000 	cmp	r0, #0
 1008c24:	da00000e 	ble	1008c64 <treetable_test+0xa8>
            return RB_ERROR_TREE_STRUCTURE;
    }

    /* check red rule */
    if (node->color == RB_RED && node->parent->color == RB_RED) {
 1008c28:	e5d43008 	ldrb	r3, [r4, #8]
 1008c2c:	e3530000 	cmp	r3, #0
 1008c30:	1a000003 	bne	1008c44 <treetable_test+0x88>
 1008c34:	e594300c 	ldr	r3, [r4, #12]
 1008c38:	e5d30008 	ldrb	r0, [r3, #8]
 1008c3c:	e3500000 	cmp	r0, #0
 1008c40:	0a000005 	beq	1008c5c <treetable_test+0xa0>
    }

    int nb_left;
    int nb_right;

    int left_err = treetable_test(table, node->left, &nb_left);
 1008c44:	e1a0200d 	mov	r2, sp
 1008c48:	e5941010 	ldr	r1, [r4, #16]
 1008c4c:	e1a00005 	mov	r0, r5
 1008c50:	ebffffd9 	bl	1008bbc <treetable_test>

    /* propagate the descendant errors all the way up */
    if (left_err != RB_ERROR_OK)
 1008c54:	e3500004 	cmp	r0, #4
 1008c58:	0a000004 	beq	1008c70 <treetable_test+0xb4>
        *nb = nb_left + 1;
    else
        *nb = nb_left;

    return RB_ERROR_OK;
}
 1008c5c:	e28dd008 	add	sp, sp, #8
 1008c60:	e8bd8070 	pop	{r4, r5, r6, pc}
            return RB_ERROR_TREE_STRUCTURE;
 1008c64:	e3a00002 	mov	r0, #2
}
 1008c68:	e28dd008 	add	sp, sp, #8
 1008c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    int right_err = treetable_test(table, node->right, &nb_right);
 1008c70:	e1a00005 	mov	r0, r5
 1008c74:	e28d2004 	add	r2, sp, #4
 1008c78:	e5941014 	ldr	r1, [r4, #20]
 1008c7c:	ebffffce 	bl	1008bbc <treetable_test>
    if (right_err != RB_ERROR_OK)
 1008c80:	e3500004 	cmp	r0, #4
 1008c84:	1afffff4 	bne	1008c5c <treetable_test+0xa0>
    if (nb_left != nb_right)
 1008c88:	e59d3000 	ldr	r3, [sp]
 1008c8c:	e59d2004 	ldr	r2, [sp, #4]
 1008c90:	e1530002 	cmp	r3, r2
        return RB_ERROR_BLACK_HEIGHT;
 1008c94:	13a00001 	movne	r0, #1
    if (nb_left != nb_right)
 1008c98:	1affffef 	bne	1008c5c <treetable_test+0xa0>
    if (node->color == RB_BLACK)
 1008c9c:	e5d42008 	ldrb	r2, [r4, #8]
 1008ca0:	e3520001 	cmp	r2, #1
        *nb = nb_left + 1;
 1008ca4:	02833001 	addeq	r3, r3, #1
        *nb = nb_left;
 1008ca8:	e5863000 	str	r3, [r6]
 1008cac:	eaffffea 	b	1008c5c <treetable_test+0xa0>
        *nb = 1;
 1008cb0:	e3a03001 	mov	r3, #1
        return RB_ERROR_OK;
 1008cb4:	e3a00004 	mov	r0, #4
        *nb = 1;
 1008cb8:	e5823000 	str	r3, [r2]
}
 1008cbc:	e12fff1e 	bx	lr

01008cc0 <tree_destroy.part.0>:
static void tree_destroy(TreeTable *table, RBNode *n)
 1008cc0:	e92d4070 	push	{r4, r5, r6, lr}
 1008cc4:	e1a05001 	mov	r5, r1
    if (n == table->sentinel)
 1008cc8:	e5903004 	ldr	r3, [r0, #4]
static void tree_destroy(TreeTable *table, RBNode *n)
 1008ccc:	e1a04000 	mov	r4, r0
    tree_destroy(table, n->left);
 1008cd0:	e5911010 	ldr	r1, [r1, #16]
    if (n == table->sentinel)
 1008cd4:	e1510003 	cmp	r1, r3
 1008cd8:	0a000001 	beq	1008ce4 <tree_destroy.part.0+0x24>
 1008cdc:	ebfffff7 	bl	1008cc0 <tree_destroy.part.0>
 1008ce0:	e5943004 	ldr	r3, [r4, #4]
    tree_destroy(table, n->right);
 1008ce4:	e5951014 	ldr	r1, [r5, #20]
    if (n == table->sentinel)
 1008ce8:	e1510003 	cmp	r1, r3
 1008cec:	0a000001 	beq	1008cf8 <tree_destroy.part.0+0x38>
 1008cf0:	e1a00004 	mov	r0, r4
 1008cf4:	ebfffff1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008cf8:	e5943018 	ldr	r3, [r4, #24]
 1008cfc:	e1a00005 	mov	r0, r5
}
 1008d00:	e8bd4070 	pop	{r4, r5, r6, lr}
    table->mem_free(n);
 1008d04:	e12fff13 	bx	r3

01008d08 <treetable_conf_init>:
    conf->mem_alloc  = malloc;
 1008d08:	e30a1fb9 	movw	r1, #44985	; 0xafb9
    conf->mem_calloc = calloc;
 1008d0c:	e30a23b9 	movw	r2, #41913	; 0xa3b9
    conf->mem_free   = free;
 1008d10:	e30a3fc9 	movw	r3, #45001	; 0xafc9
    conf->mem_alloc  = malloc;
 1008d14:	e3401101 	movt	r1, #257	; 0x101
    conf->mem_calloc = calloc;
 1008d18:	e3402101 	movt	r2, #257	; 0x101
    conf->mem_free   = free;
 1008d1c:	e3403101 	movt	r3, #257	; 0x101
    conf->cmp        = NULL;
 1008d20:	e3a0c000 	mov	ip, #0
    conf->mem_free   = free;
 1008d24:	e980000e 	stmib	r0, {r1, r2, r3}
    conf->cmp        = NULL;
 1008d28:	e580c000 	str	ip, [r0]
}
 1008d2c:	e12fff1e 	bx	lr

01008d30 <treetable_new>:
{
 1008d30:	e92d4070 	push	{r4, r5, r6, lr}
 1008d34:	e1a06000 	mov	r6, r0
 1008d38:	e1a05001 	mov	r5, r1
    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
 1008d3c:	e3a00001 	mov	r0, #1
 1008d40:	e3a0101c 	mov	r1, #28
 1008d44:	fa00459b 	blx	101a3b8 <calloc>
    if (!table)
 1008d48:	e2504000 	subs	r4, r0, #0
 1008d4c:	0a000016 	beq	1008dac <treetable_new+0x7c>
    RBNode *sentinel = conf->mem_calloc(1, sizeof(RBNode));
 1008d50:	e3a01018 	mov	r1, #24
 1008d54:	e3a00001 	mov	r0, #1
 1008d58:	fa004596 	blx	101a3b8 <calloc>
    if (!sentinel) {
 1008d5c:	e2503000 	subs	r3, r0, #0
 1008d60:	0a000013 	beq	1008db4 <treetable_new+0x84>
    table->mem_alloc  = conf->mem_alloc;
 1008d64:	e30a0fb9 	movw	r0, #44985	; 0xafb9
    table->mem_calloc = conf->mem_calloc;
 1008d68:	e30a13b9 	movw	r1, #41913	; 0xa3b9
    table->mem_free   = conf->mem_free;
 1008d6c:	e30a2fc9 	movw	r2, #45001	; 0xafc9
    table->size       = 0;
 1008d70:	e3a0c000 	mov	ip, #0
    table->mem_alloc  = conf->mem_alloc;
 1008d74:	e3400101 	movt	r0, #257	; 0x101
    table->mem_calloc = conf->mem_calloc;
 1008d78:	e3401101 	movt	r1, #257	; 0x101
    table->mem_free   = conf->mem_free;
 1008d7c:	e3402101 	movt	r2, #257	; 0x101
    sentinel->color   = RB_BLACK;
 1008d80:	e3a0e001 	mov	lr, #1
    table->mem_calloc = conf->mem_calloc;
 1008d84:	e1c401f0 	strd	r0, [r4, #16]
    return CC_OK;
 1008d88:	e1a0000c 	mov	r0, ip
    table->cmp        = conf->cmp;
 1008d8c:	e584600c 	str	r6, [r4, #12]
    table->root       = sentinel;
 1008d90:	e5843000 	str	r3, [r4]
 1008d94:	e5843004 	str	r3, [r4, #4]
    *tt = table;
 1008d98:	e5854000 	str	r4, [r5]
    table->mem_free   = conf->mem_free;
 1008d9c:	e5842018 	str	r2, [r4, #24]
    sentinel->color   = RB_BLACK;
 1008da0:	e5c3e008 	strb	lr, [r3, #8]
    table->size       = 0;
 1008da4:	e584c008 	str	ip, [r4, #8]
    return CC_OK;
 1008da8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1008dac:	e3a00001 	mov	r0, #1
}
 1008db0:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 1008db4:	e1a00004 	mov	r0, r4
 1008db8:	fa004882 	blx	101afc8 <free>
        return CC_ERR_ALLOC;
 1008dbc:	e3a00001 	mov	r0, #1
 1008dc0:	e8bd8070 	pop	{r4, r5, r6, pc}

01008dc4 <treetable_new_conf>:
{
 1008dc4:	e92d4070 	push	{r4, r5, r6, lr}
 1008dc8:	e1a05000 	mov	r5, r0
    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
 1008dcc:	e5903008 	ldr	r3, [r0, #8]
{
 1008dd0:	e1a06001 	mov	r6, r1
    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
 1008dd4:	e3a00001 	mov	r0, #1
 1008dd8:	e3a0101c 	mov	r1, #28
 1008ddc:	e12fff33 	blx	r3
    if (!table)
 1008de0:	e2504000 	subs	r4, r0, #0
 1008de4:	0a000015 	beq	1008e40 <treetable_new_conf+0x7c>
    RBNode *sentinel = conf->mem_calloc(1, sizeof(RBNode));
 1008de8:	e5953008 	ldr	r3, [r5, #8]
 1008dec:	e3a01018 	mov	r1, #24
 1008df0:	e3a00001 	mov	r0, #1
 1008df4:	e12fff33 	blx	r3
    if (!sentinel) {
 1008df8:	e2503000 	subs	r3, r0, #0
 1008dfc:	0a000011 	beq	1008e48 <treetable_new_conf+0x84>
    sentinel->color   = RB_BLACK;
 1008e00:	e3a01001 	mov	r1, #1
    table->size       = 0;
 1008e04:	e3a02000 	mov	r2, #0
    sentinel->color   = RB_BLACK;
 1008e08:	e5c31008 	strb	r1, [r3, #8]
    table->mem_free   = conf->mem_free;
 1008e0c:	e1c500d8 	ldrd	r0, [r5, #8]
    table->cmp        = conf->cmp;
 1008e10:	e595e000 	ldr	lr, [r5]
    table->mem_alloc  = conf->mem_alloc;
 1008e14:	e595c004 	ldr	ip, [r5, #4]
    table->mem_calloc = conf->mem_calloc;
 1008e18:	e5840014 	str	r0, [r4, #20]
    return CC_OK;
 1008e1c:	e1a00002 	mov	r0, r2
    table->cmp        = conf->cmp;
 1008e20:	e584e00c 	str	lr, [r4, #12]
    table->mem_alloc  = conf->mem_alloc;
 1008e24:	e584c010 	str	ip, [r4, #16]
    table->mem_free   = conf->mem_free;
 1008e28:	e5841018 	str	r1, [r4, #24]
    table->root       = sentinel;
 1008e2c:	e5843000 	str	r3, [r4]
    table->sentinel   = sentinel;
 1008e30:	e5843004 	str	r3, [r4, #4]
    table->size       = 0;
 1008e34:	e5842008 	str	r2, [r4, #8]
    *tt = table;
 1008e38:	e5864000 	str	r4, [r6]
    return CC_OK;
 1008e3c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return CC_ERR_ALLOC;
 1008e40:	e3a00001 	mov	r0, #1
}
 1008e44:	e8bd8070 	pop	{r4, r5, r6, pc}
        conf->mem_free(table);
 1008e48:	e1a00004 	mov	r0, r4
 1008e4c:	e595300c 	ldr	r3, [r5, #12]
 1008e50:	e12fff33 	blx	r3
        return CC_ERR_ALLOC;
 1008e54:	e3a00001 	mov	r0, #1
 1008e58:	e8bd8070 	pop	{r4, r5, r6, pc}

01008e5c <treetable_destroy>:
{
 1008e5c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1008e60:	e1a04000 	mov	r4, r0
    tree_destroy(table, table->root);
 1008e64:	e5907000 	ldr	r7, [r0]
    if (n == table->sentinel)
 1008e68:	e5903004 	ldr	r3, [r0, #4]
 1008e6c:	e1570003 	cmp	r7, r3
 1008e70:	0a000177 	beq	1009454 <treetable_destroy+0x5f8>
    tree_destroy(table, n->left);
 1008e74:	e5975010 	ldr	r5, [r7, #16]
    if (n == table->sentinel)
 1008e78:	e1530005 	cmp	r3, r5
 1008e7c:	0a0000b6 	beq	100915c <treetable_destroy+0x300>
    tree_destroy(table, n->left);
 1008e80:	e5956010 	ldr	r6, [r5, #16]
    if (n == table->sentinel)
 1008e84:	e1530006 	cmp	r3, r6
 1008e88:	0a000056 	beq	1008fe8 <treetable_destroy+0x18c>
    tree_destroy(table, n->left);
 1008e8c:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 1008e90:	e1530008 	cmp	r3, r8
 1008e94:	0a000026 	beq	1008f34 <treetable_destroy+0xd8>
    tree_destroy(table, n->left);
 1008e98:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1008e9c:	e1530009 	cmp	r3, r9
 1008ea0:	0a00000e 	beq	1008ee0 <treetable_destroy+0x84>
    tree_destroy(table, n->left);
 1008ea4:	e5992010 	ldr	r2, [r9, #16]
    if (n == table->sentinel)
 1008ea8:	e1530002 	cmp	r3, r2
 1008eac:	0a000002 	beq	1008ebc <treetable_destroy+0x60>
 1008eb0:	e1a01002 	mov	r1, r2
 1008eb4:	ebffff81 	bl	1008cc0 <tree_destroy.part.0>
 1008eb8:	e5942004 	ldr	r2, [r4, #4]
    tree_destroy(table, n->right);
 1008ebc:	e5991014 	ldr	r1, [r9, #20]
    if (n == table->sentinel)
 1008ec0:	e1510002 	cmp	r1, r2
 1008ec4:	0a000001 	beq	1008ed0 <treetable_destroy+0x74>
 1008ec8:	e1a00004 	mov	r0, r4
 1008ecc:	ebffff7b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008ed0:	e1a00009 	mov	r0, r9
 1008ed4:	e5943018 	ldr	r3, [r4, #24]
 1008ed8:	e12fff33 	blx	r3
 1008edc:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1008ee0:	e598a014 	ldr	sl, [r8, #20]
    if (n == table->sentinel)
 1008ee4:	e15a0009 	cmp	sl, r9
 1008ee8:	0a00000d 	beq	1008f24 <treetable_destroy+0xc8>
    tree_destroy(table, n->left);
 1008eec:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1008ef0:	e1510009 	cmp	r1, r9
 1008ef4:	0a000002 	beq	1008f04 <treetable_destroy+0xa8>
 1008ef8:	e1a00004 	mov	r0, r4
 1008efc:	ebffff6f 	bl	1008cc0 <tree_destroy.part.0>
 1008f00:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1008f04:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1008f08:	e1510009 	cmp	r1, r9
 1008f0c:	0a000001 	beq	1008f18 <treetable_destroy+0xbc>
 1008f10:	e1a00004 	mov	r0, r4
 1008f14:	ebffff69 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008f18:	e1a0000a 	mov	r0, sl
 1008f1c:	e5943018 	ldr	r3, [r4, #24]
 1008f20:	e12fff33 	blx	r3
 1008f24:	e1a00008 	mov	r0, r8
 1008f28:	e5943018 	ldr	r3, [r4, #24]
 1008f2c:	e12fff33 	blx	r3
 1008f30:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008f34:	e5969014 	ldr	r9, [r6, #20]
    if (n == table->sentinel)
 1008f38:	e1590008 	cmp	r9, r8
 1008f3c:	0a000025 	beq	1008fd8 <treetable_destroy+0x17c>
    tree_destroy(table, n->left);
 1008f40:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1008f44:	e15a0008 	cmp	sl, r8
 1008f48:	0a00000e 	beq	1008f88 <treetable_destroy+0x12c>
    tree_destroy(table, n->left);
 1008f4c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1008f50:	e1510008 	cmp	r1, r8
 1008f54:	0a000002 	beq	1008f64 <treetable_destroy+0x108>
 1008f58:	e1a00004 	mov	r0, r4
 1008f5c:	ebffff57 	bl	1008cc0 <tree_destroy.part.0>
 1008f60:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008f64:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1008f68:	e1510008 	cmp	r1, r8
 1008f6c:	0a000001 	beq	1008f78 <treetable_destroy+0x11c>
 1008f70:	e1a00004 	mov	r0, r4
 1008f74:	ebffff51 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008f78:	e1a0000a 	mov	r0, sl
 1008f7c:	e5943018 	ldr	r3, [r4, #24]
 1008f80:	e12fff33 	blx	r3
 1008f84:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008f88:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1008f8c:	e15a0008 	cmp	sl, r8
 1008f90:	0a00000d 	beq	1008fcc <treetable_destroy+0x170>
    tree_destroy(table, n->left);
 1008f94:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1008f98:	e1510008 	cmp	r1, r8
 1008f9c:	0a000002 	beq	1008fac <treetable_destroy+0x150>
 1008fa0:	e1a00004 	mov	r0, r4
 1008fa4:	ebffff45 	bl	1008cc0 <tree_destroy.part.0>
 1008fa8:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1008fac:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1008fb0:	e1510008 	cmp	r1, r8
 1008fb4:	0a000001 	beq	1008fc0 <treetable_destroy+0x164>
 1008fb8:	e1a00004 	mov	r0, r4
 1008fbc:	ebffff3f 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1008fc0:	e1a0000a 	mov	r0, sl
 1008fc4:	e5943018 	ldr	r3, [r4, #24]
 1008fc8:	e12fff33 	blx	r3
 1008fcc:	e1a00009 	mov	r0, r9
 1008fd0:	e5943018 	ldr	r3, [r4, #24]
 1008fd4:	e12fff33 	blx	r3
 1008fd8:	e1a00006 	mov	r0, r6
 1008fdc:	e5943018 	ldr	r3, [r4, #24]
 1008fe0:	e12fff33 	blx	r3
 1008fe4:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1008fe8:	e5958014 	ldr	r8, [r5, #20]
    if (n == table->sentinel)
 1008fec:	e1580006 	cmp	r8, r6
 1008ff0:	0a000055 	beq	100914c <treetable_destroy+0x2f0>
    tree_destroy(table, n->left);
 1008ff4:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1008ff8:	e1590006 	cmp	r9, r6
 1008ffc:	0a000026 	beq	100909c <treetable_destroy+0x240>
    tree_destroy(table, n->left);
 1009000:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009004:	e15a0006 	cmp	sl, r6
 1009008:	0a00000e 	beq	1009048 <treetable_destroy+0x1ec>
    tree_destroy(table, n->left);
 100900c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009010:	e1510006 	cmp	r1, r6
 1009014:	0a000002 	beq	1009024 <treetable_destroy+0x1c8>
 1009018:	e1a00004 	mov	r0, r4
 100901c:	ebffff27 	bl	1008cc0 <tree_destroy.part.0>
 1009020:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009024:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009028:	e1510006 	cmp	r1, r6
 100902c:	0a000001 	beq	1009038 <treetable_destroy+0x1dc>
 1009030:	e1a00004 	mov	r0, r4
 1009034:	ebffff21 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009038:	e1a0000a 	mov	r0, sl
 100903c:	e5943018 	ldr	r3, [r4, #24]
 1009040:	e12fff33 	blx	r3
 1009044:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009048:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100904c:	e15a0006 	cmp	sl, r6
 1009050:	0a00000d 	beq	100908c <treetable_destroy+0x230>
    tree_destroy(table, n->left);
 1009054:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009058:	e1510006 	cmp	r1, r6
 100905c:	0a000002 	beq	100906c <treetable_destroy+0x210>
 1009060:	e1a00004 	mov	r0, r4
 1009064:	ebffff15 	bl	1008cc0 <tree_destroy.part.0>
 1009068:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 100906c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009070:	e1510006 	cmp	r1, r6
 1009074:	0a000001 	beq	1009080 <treetable_destroy+0x224>
 1009078:	e1a00004 	mov	r0, r4
 100907c:	ebffff0f 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009080:	e1a0000a 	mov	r0, sl
 1009084:	e5943018 	ldr	r3, [r4, #24]
 1009088:	e12fff33 	blx	r3
 100908c:	e1a00009 	mov	r0, r9
 1009090:	e5943018 	ldr	r3, [r4, #24]
 1009094:	e12fff33 	blx	r3
 1009098:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 100909c:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 10090a0:	e1590006 	cmp	r9, r6
 10090a4:	0a000025 	beq	1009140 <treetable_destroy+0x2e4>
    tree_destroy(table, n->left);
 10090a8:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 10090ac:	e15a0006 	cmp	sl, r6
 10090b0:	0a00000e 	beq	10090f0 <treetable_destroy+0x294>
    tree_destroy(table, n->left);
 10090b4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10090b8:	e1510006 	cmp	r1, r6
 10090bc:	0a000002 	beq	10090cc <treetable_destroy+0x270>
 10090c0:	e1a00004 	mov	r0, r4
 10090c4:	ebfffefd 	bl	1008cc0 <tree_destroy.part.0>
 10090c8:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 10090cc:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10090d0:	e1510006 	cmp	r1, r6
 10090d4:	0a000001 	beq	10090e0 <treetable_destroy+0x284>
 10090d8:	e1a00004 	mov	r0, r4
 10090dc:	ebfffef7 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10090e0:	e1a0000a 	mov	r0, sl
 10090e4:	e5943018 	ldr	r3, [r4, #24]
 10090e8:	e12fff33 	blx	r3
 10090ec:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 10090f0:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 10090f4:	e15a0006 	cmp	sl, r6
 10090f8:	0a00000d 	beq	1009134 <treetable_destroy+0x2d8>
    tree_destroy(table, n->left);
 10090fc:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009100:	e1510006 	cmp	r1, r6
 1009104:	0a000002 	beq	1009114 <treetable_destroy+0x2b8>
 1009108:	e1a00004 	mov	r0, r4
 100910c:	ebfffeeb 	bl	1008cc0 <tree_destroy.part.0>
 1009110:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009114:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009118:	e1510006 	cmp	r1, r6
 100911c:	0a000001 	beq	1009128 <treetable_destroy+0x2cc>
 1009120:	e1a00004 	mov	r0, r4
 1009124:	ebfffee5 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009128:	e1a0000a 	mov	r0, sl
 100912c:	e5943018 	ldr	r3, [r4, #24]
 1009130:	e12fff33 	blx	r3
 1009134:	e1a00009 	mov	r0, r9
 1009138:	e5943018 	ldr	r3, [r4, #24]
 100913c:	e12fff33 	blx	r3
 1009140:	e1a00008 	mov	r0, r8
 1009144:	e5943018 	ldr	r3, [r4, #24]
 1009148:	e12fff33 	blx	r3
 100914c:	e1a00005 	mov	r0, r5
 1009150:	e5943018 	ldr	r3, [r4, #24]
 1009154:	e12fff33 	blx	r3
 1009158:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100915c:	e5976014 	ldr	r6, [r7, #20]
    if (n == table->sentinel)
 1009160:	e1560005 	cmp	r6, r5
 1009164:	0a0000b6 	beq	1009444 <treetable_destroy+0x5e8>
    tree_destroy(table, n->left);
 1009168:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 100916c:	e1580005 	cmp	r8, r5
 1009170:	0a000056 	beq	10092d0 <treetable_destroy+0x474>
    tree_destroy(table, n->left);
 1009174:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1009178:	e1590005 	cmp	r9, r5
 100917c:	0a000026 	beq	100921c <treetable_destroy+0x3c0>
    tree_destroy(table, n->left);
 1009180:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009184:	e15a0005 	cmp	sl, r5
 1009188:	0a00000e 	beq	10091c8 <treetable_destroy+0x36c>
    tree_destroy(table, n->left);
 100918c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009190:	e1510005 	cmp	r1, r5
 1009194:	0a000002 	beq	10091a4 <treetable_destroy+0x348>
 1009198:	e1a00004 	mov	r0, r4
 100919c:	ebfffec7 	bl	1008cc0 <tree_destroy.part.0>
 10091a0:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10091a4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10091a8:	e1510005 	cmp	r1, r5
 10091ac:	0a000001 	beq	10091b8 <treetable_destroy+0x35c>
 10091b0:	e1a00004 	mov	r0, r4
 10091b4:	ebfffec1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10091b8:	e1a0000a 	mov	r0, sl
 10091bc:	e5943018 	ldr	r3, [r4, #24]
 10091c0:	e12fff33 	blx	r3
 10091c4:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10091c8:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 10091cc:	e15a0005 	cmp	sl, r5
 10091d0:	0a00000d 	beq	100920c <treetable_destroy+0x3b0>
    tree_destroy(table, n->left);
 10091d4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10091d8:	e1510005 	cmp	r1, r5
 10091dc:	0a000002 	beq	10091ec <treetable_destroy+0x390>
 10091e0:	e1a00004 	mov	r0, r4
 10091e4:	ebfffeb5 	bl	1008cc0 <tree_destroy.part.0>
 10091e8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10091ec:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10091f0:	e1510005 	cmp	r1, r5
 10091f4:	0a000001 	beq	1009200 <treetable_destroy+0x3a4>
 10091f8:	e1a00004 	mov	r0, r4
 10091fc:	ebfffeaf 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009200:	e1a0000a 	mov	r0, sl
 1009204:	e5943018 	ldr	r3, [r4, #24]
 1009208:	e12fff33 	blx	r3
 100920c:	e1a00009 	mov	r0, r9
 1009210:	e5943018 	ldr	r3, [r4, #24]
 1009214:	e12fff33 	blx	r3
 1009218:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100921c:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 1009220:	e1590005 	cmp	r9, r5
 1009224:	0a000025 	beq	10092c0 <treetable_destroy+0x464>
    tree_destroy(table, n->left);
 1009228:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100922c:	e15a0005 	cmp	sl, r5
 1009230:	0a00000e 	beq	1009270 <treetable_destroy+0x414>
    tree_destroy(table, n->left);
 1009234:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009238:	e1510005 	cmp	r1, r5
 100923c:	0a000002 	beq	100924c <treetable_destroy+0x3f0>
 1009240:	e1a00004 	mov	r0, r4
 1009244:	ebfffe9d 	bl	1008cc0 <tree_destroy.part.0>
 1009248:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100924c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009250:	e1510005 	cmp	r1, r5
 1009254:	0a000001 	beq	1009260 <treetable_destroy+0x404>
 1009258:	e1a00004 	mov	r0, r4
 100925c:	ebfffe97 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009260:	e1a0000a 	mov	r0, sl
 1009264:	e5943018 	ldr	r3, [r4, #24]
 1009268:	e12fff33 	blx	r3
 100926c:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009270:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009274:	e15a0005 	cmp	sl, r5
 1009278:	0a00000d 	beq	10092b4 <treetable_destroy+0x458>
    tree_destroy(table, n->left);
 100927c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009280:	e1510005 	cmp	r1, r5
 1009284:	0a000002 	beq	1009294 <treetable_destroy+0x438>
 1009288:	e1a00004 	mov	r0, r4
 100928c:	ebfffe8b 	bl	1008cc0 <tree_destroy.part.0>
 1009290:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009294:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009298:	e1510005 	cmp	r1, r5
 100929c:	0a000001 	beq	10092a8 <treetable_destroy+0x44c>
 10092a0:	e1a00004 	mov	r0, r4
 10092a4:	ebfffe85 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10092a8:	e1a0000a 	mov	r0, sl
 10092ac:	e5943018 	ldr	r3, [r4, #24]
 10092b0:	e12fff33 	blx	r3
 10092b4:	e1a00009 	mov	r0, r9
 10092b8:	e5943018 	ldr	r3, [r4, #24]
 10092bc:	e12fff33 	blx	r3
 10092c0:	e1a00008 	mov	r0, r8
 10092c4:	e5943018 	ldr	r3, [r4, #24]
 10092c8:	e12fff33 	blx	r3
 10092cc:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10092d0:	e5968014 	ldr	r8, [r6, #20]
    if (n == table->sentinel)
 10092d4:	e1580005 	cmp	r8, r5
 10092d8:	0a000056 	beq	1009438 <treetable_destroy+0x5dc>
    tree_destroy(table, n->left);
 10092dc:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 10092e0:	e1590005 	cmp	r9, r5
 10092e4:	0a000026 	beq	1009384 <treetable_destroy+0x528>
    tree_destroy(table, n->left);
 10092e8:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 10092ec:	e15a0005 	cmp	sl, r5
 10092f0:	0a00000e 	beq	1009330 <treetable_destroy+0x4d4>
    tree_destroy(table, n->left);
 10092f4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10092f8:	e1510005 	cmp	r1, r5
 10092fc:	0a000002 	beq	100930c <treetable_destroy+0x4b0>
 1009300:	e1a00004 	mov	r0, r4
 1009304:	ebfffe6d 	bl	1008cc0 <tree_destroy.part.0>
 1009308:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100930c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009310:	e1510005 	cmp	r1, r5
 1009314:	0a000001 	beq	1009320 <treetable_destroy+0x4c4>
 1009318:	e1a00004 	mov	r0, r4
 100931c:	ebfffe67 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009320:	e1a0000a 	mov	r0, sl
 1009324:	e5943018 	ldr	r3, [r4, #24]
 1009328:	e12fff33 	blx	r3
 100932c:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009330:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009334:	e15a0005 	cmp	sl, r5
 1009338:	0a00000d 	beq	1009374 <treetable_destroy+0x518>
    tree_destroy(table, n->left);
 100933c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009340:	e1510005 	cmp	r1, r5
 1009344:	0a000002 	beq	1009354 <treetable_destroy+0x4f8>
 1009348:	e1a00004 	mov	r0, r4
 100934c:	ebfffe5b 	bl	1008cc0 <tree_destroy.part.0>
 1009350:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009354:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009358:	e1510005 	cmp	r1, r5
 100935c:	0a000001 	beq	1009368 <treetable_destroy+0x50c>
 1009360:	e1a00004 	mov	r0, r4
 1009364:	ebfffe55 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009368:	e1a0000a 	mov	r0, sl
 100936c:	e5943018 	ldr	r3, [r4, #24]
 1009370:	e12fff33 	blx	r3
 1009374:	e1a00009 	mov	r0, r9
 1009378:	e5943018 	ldr	r3, [r4, #24]
 100937c:	e12fff33 	blx	r3
 1009380:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009384:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 1009388:	e1590005 	cmp	r9, r5
 100938c:	0a000026 	beq	100942c <treetable_destroy+0x5d0>
    tree_destroy(table, n->left);
 1009390:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009394:	e15a0005 	cmp	sl, r5
 1009398:	0a00000e 	beq	10093d8 <treetable_destroy+0x57c>
    tree_destroy(table, n->left);
 100939c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 10093a0:	e1510005 	cmp	r1, r5
 10093a4:	0a000002 	beq	10093b4 <treetable_destroy+0x558>
 10093a8:	e1a00004 	mov	r0, r4
 10093ac:	ebfffe43 	bl	1008cc0 <tree_destroy.part.0>
 10093b0:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10093b4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 10093b8:	e1550001 	cmp	r5, r1
 10093bc:	0a000001 	beq	10093c8 <treetable_destroy+0x56c>
 10093c0:	e1a00004 	mov	r0, r4
 10093c4:	ebfffe3d 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 10093c8:	e1a0000a 	mov	r0, sl
 10093cc:	e5943018 	ldr	r3, [r4, #24]
 10093d0:	e12fff33 	blx	r3
 10093d4:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 10093d8:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 10093dc:	e15a0005 	cmp	sl, r5
 10093e0:	0a00000e 	beq	1009420 <treetable_destroy+0x5c4>
    tree_destroy(table, n->left);
 10093e4:	e59a3010 	ldr	r3, [sl, #16]
    if (n == table->sentinel)
 10093e8:	e1550003 	cmp	r5, r3
 10093ec:	0a000003 	beq	1009400 <treetable_destroy+0x5a4>
 10093f0:	e1a01003 	mov	r1, r3
 10093f4:	e1a00004 	mov	r0, r4
 10093f8:	ebfffe30 	bl	1008cc0 <tree_destroy.part.0>
 10093fc:	e5943004 	ldr	r3, [r4, #4]
    tree_destroy(table, n->right);
 1009400:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009404:	e1510003 	cmp	r1, r3
 1009408:	0a000001 	beq	1009414 <treetable_destroy+0x5b8>
 100940c:	e1a00004 	mov	r0, r4
 1009410:	ebfffe2a 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009414:	e1a0000a 	mov	r0, sl
 1009418:	e5943018 	ldr	r3, [r4, #24]
 100941c:	e12fff33 	blx	r3
 1009420:	e1a00009 	mov	r0, r9
 1009424:	e5943018 	ldr	r3, [r4, #24]
 1009428:	e12fff33 	blx	r3
 100942c:	e1a00008 	mov	r0, r8
 1009430:	e5943018 	ldr	r3, [r4, #24]
 1009434:	e12fff33 	blx	r3
 1009438:	e1a00006 	mov	r0, r6
 100943c:	e5943018 	ldr	r3, [r4, #24]
 1009440:	e12fff33 	blx	r3
 1009444:	e5943018 	ldr	r3, [r4, #24]
 1009448:	e1a00007 	mov	r0, r7
 100944c:	e12fff33 	blx	r3
 1009450:	e5943004 	ldr	r3, [r4, #4]
    table->mem_free(table->sentinel);
 1009454:	e1a00003 	mov	r0, r3
 1009458:	e5943018 	ldr	r3, [r4, #24]
 100945c:	e12fff33 	blx	r3
    table->mem_free(table);
 1009460:	e5943018 	ldr	r3, [r4, #24]
 1009464:	e1a00004 	mov	r0, r4
}
 1009468:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    table->mem_free(table);
 100946c:	e12fff13 	bx	r3

01009470 <treetable_get>:
    if (table->size == 0)
 1009470:	e5903008 	ldr	r3, [r0, #8]
 1009474:	e3530000 	cmp	r3, #0
 1009478:	0a000019 	beq	10094e4 <treetable_get+0x74>
{
 100947c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1009480:	e1a07002 	mov	r7, r2
 1009484:	e1a06001 	mov	r6, r1
 1009488:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 100948c:	e8900110 	ldm	r0, {r4, r8}
 1009490:	ea000004 	b	10094a8 <treetable_get+0x38>
        else if (cmp > 0)
 1009494:	0a00000f 	beq	10094d8 <treetable_get+0x68>
            n = n->right;
 1009498:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 100949c:	e1580004 	cmp	r8, r4
 10094a0:	13500000 	cmpne	r0, #0
 10094a4:	0a000009 	beq	10094d0 <treetable_get+0x60>
        cmp = table->cmp(key, n->key);
 10094a8:	e595300c 	ldr	r3, [r5, #12]
 10094ac:	e1a00006 	mov	r0, r6
 10094b0:	e5941000 	ldr	r1, [r4]
 10094b4:	e12fff33 	blx	r3
        if (cmp < 0)
 10094b8:	e3500000 	cmp	r0, #0
 10094bc:	aafffff4 	bge	1009494 <treetable_get+0x24>
            n = n->left;
 10094c0:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 10094c4:	e1580004 	cmp	r8, r4
 10094c8:	13500000 	cmpne	r0, #0
 10094cc:	1afffff5 	bne	10094a8 <treetable_get+0x38>
        return CC_ERR_KEY_NOT_FOUND;
 10094d0:	e3a00006 	mov	r0, #6
 10094d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    *out = node->value;
 10094d8:	e5943004 	ldr	r3, [r4, #4]
 10094dc:	e5873000 	str	r3, [r7]
}
 10094e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_KEY_NOT_FOUND;
 10094e4:	e3a00006 	mov	r0, #6
}
 10094e8:	e12fff1e 	bx	lr

010094ec <treetable_get_first_value>:
    RBNode *node = tree_min(table, table->root);
 10094ec:	e5902000 	ldr	r2, [r0]
 10094f0:	e5900004 	ldr	r0, [r0, #4]
    while (n->left != s)
 10094f4:	ea000000 	b	10094fc <treetable_get_first_value+0x10>
 10094f8:	e1a02003 	mov	r2, r3
 10094fc:	e5923010 	ldr	r3, [r2, #16]
 1009500:	e1500003 	cmp	r0, r3
 1009504:	1afffffb 	bne	10094f8 <treetable_get_first_value+0xc>
    if (node != table->sentinel) {
 1009508:	e1500002 	cmp	r0, r2
        *out = node->value;
 100950c:	15923004 	ldrne	r3, [r2, #4]
        return CC_OK;
 1009510:	13a00000 	movne	r0, #0
    return CC_ERR_VALUE_NOT_FOUND;
 1009514:	03a00007 	moveq	r0, #7
        *out = node->value;
 1009518:	15813000 	strne	r3, [r1]
}
 100951c:	e12fff1e 	bx	lr

01009520 <treetable_get_last_value>:
    RBNode *node = tree_max(table, table->root);
 1009520:	e5902000 	ldr	r2, [r0]
 1009524:	e5900004 	ldr	r0, [r0, #4]
    while (n->right != s)
 1009528:	ea000000 	b	1009530 <treetable_get_last_value+0x10>
 100952c:	e1a02003 	mov	r2, r3
 1009530:	e5923014 	ldr	r3, [r2, #20]
 1009534:	e1500003 	cmp	r0, r3
 1009538:	1afffffb 	bne	100952c <treetable_get_last_value+0xc>
    if (node != table->sentinel) {
 100953c:	e1500002 	cmp	r0, r2
        *out = node->value;
 1009540:	15923004 	ldrne	r3, [r2, #4]
        return CC_OK;
 1009544:	13a00000 	movne	r0, #0
    return CC_ERR_VALUE_NOT_FOUND;
 1009548:	03a00007 	moveq	r0, #7
        *out = node->value;
 100954c:	15813000 	strne	r3, [r1]
}
 1009550:	e12fff1e 	bx	lr

01009554 <treetable_get_first_key>:
    RBNode *node = tree_min(table, table->root);
 1009554:	e5902000 	ldr	r2, [r0]
 1009558:	e5900004 	ldr	r0, [r0, #4]
    while (n->left != s)
 100955c:	ea000000 	b	1009564 <treetable_get_first_key+0x10>
 1009560:	e1a02003 	mov	r2, r3
 1009564:	e5923010 	ldr	r3, [r2, #16]
 1009568:	e1500003 	cmp	r0, r3
 100956c:	1afffffb 	bne	1009560 <treetable_get_first_key+0xc>
    if (node != table->sentinel) {
 1009570:	e1500002 	cmp	r0, r2
        *out = node->key;
 1009574:	15923000 	ldrne	r3, [r2]
        return CC_OK;
 1009578:	13a00000 	movne	r0, #0
    return CC_ERR_KEY_NOT_FOUND;
 100957c:	03a00006 	moveq	r0, #6
        *out = node->key;
 1009580:	15813000 	strne	r3, [r1]
}
 1009584:	e12fff1e 	bx	lr

01009588 <treetable_get_last_key>:
    RBNode *node = tree_max(table, table->root);
 1009588:	e5902000 	ldr	r2, [r0]
 100958c:	e5900004 	ldr	r0, [r0, #4]
    while (n->right != s)
 1009590:	ea000000 	b	1009598 <treetable_get_last_key+0x10>
 1009594:	e1a02003 	mov	r2, r3
 1009598:	e5923014 	ldr	r3, [r2, #20]
 100959c:	e1500003 	cmp	r0, r3
 10095a0:	1afffffb 	bne	1009594 <treetable_get_last_key+0xc>
    if (node != table->sentinel) {
 10095a4:	e1500002 	cmp	r0, r2
        *out = node->key;
 10095a8:	15923000 	ldrne	r3, [r2]
        return CC_OK;
 10095ac:	13a00000 	movne	r0, #0
    return CC_ERR_KEY_NOT_FOUND;
 10095b0:	03a00006 	moveq	r0, #6
        *out = node->key;
 10095b4:	15813000 	strne	r3, [r1]
}
 10095b8:	e12fff1e 	bx	lr

010095bc <treetable_get_greater_than>:
    if (table->size == 0)
 10095bc:	e5903008 	ldr	r3, [r0, #8]
 10095c0:	e3530000 	cmp	r3, #0
 10095c4:	0a000036 	beq	10096a4 <treetable_get_greater_than+0xe8>
{
 10095c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10095cc:	e1a06002 	mov	r6, r2
 10095d0:	e1a07001 	mov	r7, r1
 10095d4:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 10095d8:	e8900110 	ldm	r0, {r4, r8}
 10095dc:	ea000005 	b	10095f8 <treetable_get_greater_than+0x3c>
 10095e0:	e5943014 	ldr	r3, [r4, #20]
        else if (cmp > 0)
 10095e4:	0a000010 	beq	100962c <treetable_get_greater_than+0x70>
    } while (n != s && cmp != 0);
 10095e8:	e1580003 	cmp	r8, r3
 10095ec:	13500000 	cmpne	r0, #0
 10095f0:	e1a04003 	mov	r4, r3
 10095f4:	0a00000a 	beq	1009624 <treetable_get_greater_than+0x68>
        cmp = table->cmp(key, n->key);
 10095f8:	e595300c 	ldr	r3, [r5, #12]
 10095fc:	e1a00007 	mov	r0, r7
 1009600:	e5941000 	ldr	r1, [r4]
 1009604:	e12fff33 	blx	r3
        if (cmp < 0)
 1009608:	e3500000 	cmp	r0, #0
 100960c:	aafffff3 	bge	10095e0 <treetable_get_greater_than+0x24>
            n = n->left;
 1009610:	e5943010 	ldr	r3, [r4, #16]
    } while (n != s && cmp != 0);
 1009614:	e1580003 	cmp	r8, r3
 1009618:	13500000 	cmpne	r0, #0
 100961c:	e1a04003 	mov	r4, r3
 1009620:	1afffff4 	bne	10095f8 <treetable_get_greater_than+0x3c>
    return CC_ERR_KEY_NOT_FOUND;
 1009624:	e3a00006 	mov	r0, #6
 1009628:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (x->right != table->sentinel)
 100962c:	e5950004 	ldr	r0, [r5, #4]
 1009630:	e1500003 	cmp	r0, r3
 1009634:	1a000001 	bne	1009640 <treetable_get_greater_than+0x84>
 1009638:	ea000007 	b	100965c <treetable_get_greater_than+0xa0>
    while (n->left != s)
 100963c:	e1a03001 	mov	r3, r1
 1009640:	e5931010 	ldr	r1, [r3, #16]
 1009644:	e1500001 	cmp	r0, r1
 1009648:	1afffffb 	bne	100963c <treetable_get_greater_than+0x80>
        *out = s->key;
 100964c:	e5933000 	ldr	r3, [r3]
        return CC_OK;
 1009650:	e3a00000 	mov	r0, #0
        *out = s->key;
 1009654:	e5863000 	str	r3, [r6]
}
 1009658:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RBNode *y = x->parent;
 100965c:	e594100c 	ldr	r1, [r4, #12]
    while (y != table->sentinel && x == y->right) {
 1009660:	e1530001 	cmp	r3, r1
 1009664:	0a00000a 	beq	1009694 <treetable_get_greater_than+0xd8>
 1009668:	e5913014 	ldr	r3, [r1, #20]
 100966c:	e1540003 	cmp	r4, r3
 1009670:	0a000004 	beq	1009688 <treetable_get_greater_than+0xcc>
 1009674:	ea00000c 	b	10096ac <treetable_get_greater_than+0xf0>
 1009678:	e5932014 	ldr	r2, [r3, #20]
 100967c:	e1520001 	cmp	r2, r1
 1009680:	e1a01003 	mov	r1, r3
 1009684:	1afffff0 	bne	100964c <treetable_get_greater_than+0x90>
        y = y->parent;
 1009688:	e591300c 	ldr	r3, [r1, #12]
    while (y != table->sentinel && x == y->right) {
 100968c:	e1500003 	cmp	r0, r3
 1009690:	1afffff8 	bne	1009678 <treetable_get_greater_than+0xbc>
    if (n && s) {
 1009694:	e3530000 	cmp	r3, #0
 1009698:	1affffeb 	bne	100964c <treetable_get_greater_than+0x90>
    return CC_ERR_KEY_NOT_FOUND;
 100969c:	e3a00006 	mov	r0, #6
 10096a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 10096a4:	e3a00006 	mov	r0, #6
}
 10096a8:	e12fff1e 	bx	lr
    while (y != table->sentinel && x == y->right) {
 10096ac:	e1a03001 	mov	r3, r1
 10096b0:	eaffffe5 	b	100964c <treetable_get_greater_than+0x90>

010096b4 <treetable_get_lesser_than>:
    if (table->size == 0)
 10096b4:	e5903008 	ldr	r3, [r0, #8]
 10096b8:	e3530000 	cmp	r3, #0
 10096bc:	0a000035 	beq	1009798 <treetable_get_lesser_than+0xe4>
{
 10096c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10096c4:	e1a06002 	mov	r6, r2
 10096c8:	e1a07001 	mov	r7, r1
 10096cc:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 10096d0:	e8900110 	ldm	r0, {r4, r8}
 10096d4:	ea000004 	b	10096ec <treetable_get_lesser_than+0x38>
        else if (cmp > 0)
 10096d8:	0a00000f 	beq	100971c <treetable_get_lesser_than+0x68>
            n = n->right;
 10096dc:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 10096e0:	e1580004 	cmp	r8, r4
 10096e4:	13500000 	cmpne	r0, #0
 10096e8:	0a000009 	beq	1009714 <treetable_get_lesser_than+0x60>
        cmp = table->cmp(key, n->key);
 10096ec:	e595300c 	ldr	r3, [r5, #12]
 10096f0:	e1a00007 	mov	r0, r7
 10096f4:	e5941000 	ldr	r1, [r4]
 10096f8:	e12fff33 	blx	r3
        if (cmp < 0)
 10096fc:	e3500000 	cmp	r0, #0
 1009700:	aafffff4 	bge	10096d8 <treetable_get_lesser_than+0x24>
            n = n->left;
 1009704:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 1009708:	e1580004 	cmp	r8, r4
 100970c:	13500000 	cmpne	r0, #0
 1009710:	1afffff5 	bne	10096ec <treetable_get_lesser_than+0x38>
    return CC_ERR_KEY_NOT_FOUND;
 1009714:	e3a00006 	mov	r0, #6
 1009718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (x->left != table->sentinel)
 100971c:	e5950004 	ldr	r0, [r5, #4]
 1009720:	e5943010 	ldr	r3, [r4, #16]
 1009724:	e1530000 	cmp	r3, r0
 1009728:	1a000001 	bne	1009734 <treetable_get_lesser_than+0x80>
 100972c:	ea000007 	b	1009750 <treetable_get_lesser_than+0x9c>
    while (n->right != s)
 1009730:	e1a03001 	mov	r3, r1
 1009734:	e5931014 	ldr	r1, [r3, #20]
 1009738:	e1500001 	cmp	r0, r1
 100973c:	1afffffb 	bne	1009730 <treetable_get_lesser_than+0x7c>
        *out = s->key;
 1009740:	e5933000 	ldr	r3, [r3]
        return CC_OK;
 1009744:	e3a00000 	mov	r0, #0
        *out = s->key;
 1009748:	e5863000 	str	r3, [r6]
}
 100974c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RBNode *y = x->parent;
 1009750:	e594100c 	ldr	r1, [r4, #12]
    while (y != table->sentinel && x == y->left) {
 1009754:	e1530001 	cmp	r3, r1
 1009758:	0a00000a 	beq	1009788 <treetable_get_lesser_than+0xd4>
 100975c:	e5913010 	ldr	r3, [r1, #16]
 1009760:	e1540003 	cmp	r4, r3
 1009764:	0a000004 	beq	100977c <treetable_get_lesser_than+0xc8>
 1009768:	ea00000c 	b	10097a0 <treetable_get_lesser_than+0xec>
 100976c:	e5932010 	ldr	r2, [r3, #16]
 1009770:	e1520001 	cmp	r2, r1
 1009774:	e1a01003 	mov	r1, r3
 1009778:	1afffff0 	bne	1009740 <treetable_get_lesser_than+0x8c>
        y = y->parent;
 100977c:	e591300c 	ldr	r3, [r1, #12]
    while (y != table->sentinel && x == y->left) {
 1009780:	e1500003 	cmp	r0, r3
 1009784:	1afffff8 	bne	100976c <treetable_get_lesser_than+0xb8>
    if (n && s) {
 1009788:	e3530000 	cmp	r3, #0
 100978c:	1affffeb 	bne	1009740 <treetable_get_lesser_than+0x8c>
    return CC_ERR_KEY_NOT_FOUND;
 1009790:	e3a00006 	mov	r0, #6
 1009794:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1009798:	e3a00006 	mov	r0, #6
}
 100979c:	e12fff1e 	bx	lr
    while (y != table->sentinel && x == y->left) {
 10097a0:	e1a03001 	mov	r3, r1
 10097a4:	eaffffe5 	b	1009740 <treetable_get_lesser_than+0x8c>

010097a8 <treetable_size>:
}
 10097a8:	e5900008 	ldr	r0, [r0, #8]
 10097ac:	e12fff1e 	bx	lr

010097b0 <treetable_contains_key>:
    if (table->size == 0)
 10097b0:	e5903008 	ldr	r3, [r0, #8]
 10097b4:	e3530000 	cmp	r3, #0
 10097b8:	0a000017 	beq	100981c <treetable_contains_key+0x6c>
{
 10097bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10097c0:	e1a06001 	mov	r6, r1
 10097c4:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 10097c8:	e8900090 	ldm	r0, {r4, r7}
 10097cc:	ea000004 	b	10097e4 <treetable_contains_key+0x34>
        else if (cmp > 0)
 10097d0:	0a00000f 	beq	1009814 <treetable_contains_key+0x64>
            n = n->right;
 10097d4:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 10097d8:	e1570004 	cmp	r7, r4
 10097dc:	13500000 	cmpne	r0, #0
 10097e0:	0a000009 	beq	100980c <treetable_contains_key+0x5c>
        cmp = table->cmp(key, n->key);
 10097e4:	e595300c 	ldr	r3, [r5, #12]
 10097e8:	e1a00006 	mov	r0, r6
 10097ec:	e5941000 	ldr	r1, [r4]
 10097f0:	e12fff33 	blx	r3
        if (cmp < 0)
 10097f4:	e3500000 	cmp	r0, #0
 10097f8:	aafffff4 	bge	10097d0 <treetable_contains_key+0x20>
            n = n->left;
 10097fc:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 1009800:	e1570004 	cmp	r7, r4
 1009804:	13500000 	cmpne	r0, #0
 1009808:	1afffff5 	bne	10097e4 <treetable_contains_key+0x34>
    return false;
 100980c:	e3a00000 	mov	r0, #0
 1009810:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return true;
 1009814:	e3a00001 	mov	r0, #1
}
 1009818:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return false;
 100981c:	e3a00000 	mov	r0, #0
}
 1009820:	e12fff1e 	bx	lr

01009824 <treetable_contains_value>:
{
 1009824:	e92d4010 	push	{r4, lr}
    RBNode *node = tree_min(table, table->root);
 1009828:	e8904008 	ldm	r0, {r3, lr}
    while (n->left != s)
 100982c:	ea000000 	b	1009834 <treetable_contains_value+0x10>
 1009830:	e1a03002 	mov	r3, r2
 1009834:	e5932010 	ldr	r2, [r3, #16]
 1009838:	e15e0002 	cmp	lr, r2
 100983c:	1afffffb 	bne	1009830 <treetable_contains_value+0xc>
    while (node != table->sentinel) {
 1009840:	e153000e 	cmp	r3, lr
 1009844:	0a000022 	beq	10098d4 <treetable_contains_value+0xb0>
 1009848:	e5932014 	ldr	r2, [r3, #20]
    size_t o = 0;
 100984c:	e3a00000 	mov	r0, #0
        if (node->value == value)
 1009850:	e593c004 	ldr	ip, [r3, #4]
 1009854:	e15c0001 	cmp	ip, r1
            o++;
 1009858:	02800001 	addeq	r0, r0, #1
    if (x->right != table->sentinel)
 100985c:	e15e0002 	cmp	lr, r2
 1009860:	1a000001 	bne	100986c <treetable_contains_value+0x48>
 1009864:	ea000008 	b	100988c <treetable_contains_value+0x68>
    while (n->left != s)
 1009868:	e1a02003 	mov	r2, r3
 100986c:	e5923010 	ldr	r3, [r2, #16]
 1009870:	e15e0003 	cmp	lr, r3
 1009874:	1afffffb 	bne	1009868 <treetable_contains_value+0x44>
    while (node != table->sentinel) {
 1009878:	e15e0002 	cmp	lr, r2
 100987c:	08bd8010 	popeq	{r4, pc}
 1009880:	e1a03002 	mov	r3, r2
 1009884:	e5922014 	ldr	r2, [r2, #20]
 1009888:	eafffff0 	b	1009850 <treetable_contains_value+0x2c>
    RBNode *y = x->parent;
 100988c:	e593c00c 	ldr	ip, [r3, #12]
    while (y != table->sentinel && x == y->right) {
 1009890:	e15c000e 	cmp	ip, lr
 1009894:	08bd8010 	popeq	{r4, pc}
 1009898:	e59c4014 	ldr	r4, [ip, #20]
 100989c:	e1540003 	cmp	r4, r3
 10098a0:	1a000008 	bne	10098c8 <treetable_contains_value+0xa4>
        y = y->parent;
 10098a4:	e59c300c 	ldr	r3, [ip, #12]
    while (y != table->sentinel && x == y->right) {
 10098a8:	e1530002 	cmp	r3, r2
 10098ac:	08bd8010 	popeq	{r4, pc}
 10098b0:	e5934014 	ldr	r4, [r3, #20]
 10098b4:	e154000c 	cmp	r4, ip
 10098b8:	e1a0c003 	mov	ip, r3
 10098bc:	0afffff8 	beq	10098a4 <treetable_contains_value+0x80>
    while (n->left != s)
 10098c0:	e1a02004 	mov	r2, r4
 10098c4:	eaffffe1 	b	1009850 <treetable_contains_value+0x2c>
    while (y != table->sentinel && x == y->right) {
 10098c8:	e1a0300c 	mov	r3, ip
    while (n->left != s)
 10098cc:	e1a02004 	mov	r2, r4
 10098d0:	eaffffde 	b	1009850 <treetable_contains_value+0x2c>
    size_t o = 0;
 10098d4:	e3a00000 	mov	r0, #0
}
 10098d8:	e8bd8010 	pop	{r4, pc}

010098dc <treetable_add>:
{
 10098dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 10098e0:	e1a05000 	mov	r5, r0
    RBNode *x = table->root;
 10098e4:	e5904000 	ldr	r4, [r0]
{
 10098e8:	e1a06001 	mov	r6, r1
 10098ec:	e1a07002 	mov	r7, r2
    while (x != table->sentinel) {
 10098f0:	e5903004 	ldr	r3, [r0, #4]
 10098f4:	e1530004 	cmp	r3, r4
 10098f8:	1a000006 	bne	1009918 <treetable_add+0x3c>
 10098fc:	ea00000f 	b	1009940 <treetable_add+0x64>
        } else if (cmp > 0) {
 1009900:	0a00007a 	beq	1009af0 <treetable_add+0x214>
            x = x->right;
 1009904:	e5943014 	ldr	r3, [r4, #20]
    while (x != table->sentinel) {
 1009908:	e5952004 	ldr	r2, [r5, #4]
 100990c:	e1530002 	cmp	r3, r2
 1009910:	0a00000a 	beq	1009940 <treetable_add+0x64>
 1009914:	e1a04003 	mov	r4, r3
        cmp = table->cmp(key, x->key);
 1009918:	e595300c 	ldr	r3, [r5, #12]
 100991c:	e1a00006 	mov	r0, r6
 1009920:	e5941000 	ldr	r1, [r4]
 1009924:	e12fff33 	blx	r3
        if (cmp < 0) {
 1009928:	e3500000 	cmp	r0, #0
 100992c:	aafffff3 	bge	1009900 <treetable_add+0x24>
            x = x->left;
 1009930:	e5943010 	ldr	r3, [r4, #16]
    while (x != table->sentinel) {
 1009934:	e5952004 	ldr	r2, [r5, #4]
 1009938:	e1530002 	cmp	r3, r2
 100993c:	1afffff4 	bne	1009914 <treetable_add+0x38>
    RBNode *n = table->mem_alloc(sizeof(RBNode));
 1009940:	e5953010 	ldr	r3, [r5, #16]
 1009944:	e3a00018 	mov	r0, #24
 1009948:	e12fff33 	blx	r3
    if (!n)
 100994c:	e2508000 	subs	r8, r0, #0
 1009950:	0a000097 	beq	1009bb4 <treetable_add+0x2d8>
    table->size++;
 1009954:	e1c520d4 	ldrd	r2, [r5, #4]
    n->value  = val;
 1009958:	e5887004 	str	r7, [r8, #4]
    n->key    = key;
 100995c:	e5886000 	str	r6, [r8]
    if (y == table->sentinel) {
 1009960:	e1520004 	cmp	r2, r4
    table->size++;
 1009964:	e2833001 	add	r3, r3, #1
    n->parent = y;
 1009968:	e588400c 	str	r4, [r8, #12]
    n->left   = table->sentinel;
 100996c:	e5882010 	str	r2, [r8, #16]
    n->right  = table->sentinel;
 1009970:	e5882014 	str	r2, [r8, #20]
    table->size++;
 1009974:	e5853008 	str	r3, [r5, #8]
    if (y == table->sentinel) {
 1009978:	0a000072 	beq	1009b48 <treetable_add+0x26c>
        n->color = RB_RED;
 100997c:	e3a03000 	mov	r3, #0
        if (table->cmp(key, y->key) < 0) {
 1009980:	e1a00006 	mov	r0, r6
        n->color = RB_RED;
 1009984:	e5c83008 	strb	r3, [r8, #8]
        if (table->cmp(key, y->key) < 0) {
 1009988:	e595300c 	ldr	r3, [r5, #12]
 100998c:	e5941000 	ldr	r1, [r4]
 1009990:	e12fff33 	blx	r3
    while (z->parent->color == RB_RED) {
 1009994:	e598200c 	ldr	r2, [r8, #12]
        if (table->cmp(key, y->key) < 0) {
 1009998:	e3500000 	cmp	r0, #0
            y->right = n;
 100999c:	a5848014 	strge	r8, [r4, #20]
            y->left = n;
 10099a0:	b5848010 	strlt	r8, [r4, #16]
    while (z->parent->color == RB_RED) {
 10099a4:	e5d2e008 	ldrb	lr, [r2, #8]
 10099a8:	e35e0000 	cmp	lr, #0
 10099ac:	1a00002a 	bne	1009a5c <treetable_add+0x180>
                z->parent->color         = RB_BLACK;
 10099b0:	e3a0c001 	mov	ip, #1
 10099b4:	ea000007 	b	10099d8 <treetable_add+0xfc>
                z->parent->parent->color = RB_RED;
 10099b8:	e1a08003 	mov	r8, r3
                z->parent->color         = RB_BLACK;
 10099bc:	e5c2c008 	strb	ip, [r2, #8]
                y->color                 = RB_BLACK;
 10099c0:	e5c1c008 	strb	ip, [r1, #8]
                z->parent->parent->color = RB_RED;
 10099c4:	e5c30008 	strb	r0, [r3, #8]
    while (z->parent->color == RB_RED) {
 10099c8:	e598200c 	ldr	r2, [r8, #12]
 10099cc:	e5d23008 	ldrb	r3, [r2, #8]
 10099d0:	e3530000 	cmp	r3, #0
 10099d4:	1a000020 	bne	1009a5c <treetable_add+0x180>
        if (z->parent == z->parent->parent->left) {
 10099d8:	e592300c 	ldr	r3, [r2, #12]
 10099dc:	e5931010 	ldr	r1, [r3, #16]
 10099e0:	e1520001 	cmp	r2, r1
 10099e4:	0a000021 	beq	1009a70 <treetable_add+0x194>
            if (y->color == RB_RED) {
 10099e8:	e5d10008 	ldrb	r0, [r1, #8]
 10099ec:	e3500000 	cmp	r0, #0
 10099f0:	0afffff0 	beq	10099b8 <treetable_add+0xdc>
                if (z == z->parent->left) {
 10099f4:	e5921010 	ldr	r1, [r2, #16]
 10099f8:	e1580001 	cmp	r8, r1
 10099fc:	0a00003d 	beq	1009af8 <treetable_add+0x21c>
                z->parent->color         = RB_BLACK;
 1009a00:	e5c2c008 	strb	ip, [r2, #8]
    RBNode *y = x->right;
 1009a04:	e5932014 	ldr	r2, [r3, #20]
                z->parent->parent->color = RB_RED;
 1009a08:	e5c3e008 	strb	lr, [r3, #8]
                rotate_left(table, z->parent->parent);
 1009a0c:	e5950004 	ldr	r0, [r5, #4]
    x->right = y->left;
 1009a10:	e5921010 	ldr	r1, [r2, #16]
    if (y->left != table->sentinel)
 1009a14:	e1500001 	cmp	r0, r1
    x->right = y->left;
 1009a18:	e5831014 	str	r1, [r3, #20]
        y->left->parent = x;
 1009a1c:	1581300c 	strne	r3, [r1, #12]
    y->parent = x->parent;
 1009a20:	e593100c 	ldr	r1, [r3, #12]
    if (x->parent == table->sentinel)
 1009a24:	e1500001 	cmp	r0, r1
    y->parent = x->parent;
 1009a28:	e582100c 	str	r1, [r2, #12]
        table->root = y;
 1009a2c:	05852000 	streq	r2, [r5]
    if (x->parent == table->sentinel)
 1009a30:	0a000003 	beq	1009a44 <treetable_add+0x168>
    else if (x == x->parent->left)
 1009a34:	e5910010 	ldr	r0, [r1, #16]
 1009a38:	e1500003 	cmp	r0, r3
        x->parent->left = y;
 1009a3c:	05812010 	streq	r2, [r1, #16]
        x->parent->right = y;
 1009a40:	15812014 	strne	r2, [r1, #20]
    y->left   = x;
 1009a44:	e5823010 	str	r3, [r2, #16]
    x->parent = y;
 1009a48:	e583200c 	str	r2, [r3, #12]
    while (z->parent->color == RB_RED) {
 1009a4c:	e598200c 	ldr	r2, [r8, #12]
 1009a50:	e5d23008 	ldrb	r3, [r2, #8]
 1009a54:	e3530000 	cmp	r3, #0
 1009a58:	0affffde 	beq	10099d8 <treetable_add+0xfc>
    table->root->color = RB_BLACK;
 1009a5c:	e5953000 	ldr	r3, [r5]
 1009a60:	e3a02001 	mov	r2, #1
    return CC_OK;
 1009a64:	e3a00000 	mov	r0, #0
    table->root->color = RB_BLACK;
 1009a68:	e5c32008 	strb	r2, [r3, #8]
 1009a6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            y = z->parent->parent->right;
 1009a70:	e5934014 	ldr	r4, [r3, #20]
            if (y->color == RB_RED) {
 1009a74:	e5d40008 	ldrb	r0, [r4, #8]
 1009a78:	e3500000 	cmp	r0, #0
 1009a7c:	1a000004 	bne	1009a94 <treetable_add+0x1b8>
                z->parent->color         = RB_BLACK;
 1009a80:	e5c2c008 	strb	ip, [r2, #8]
                z->parent->parent->color = RB_RED;
 1009a84:	e1a08003 	mov	r8, r3
                y->color                 = RB_BLACK;
 1009a88:	e5c4c008 	strb	ip, [r4, #8]
                z->parent->parent->color = RB_RED;
 1009a8c:	e5c30008 	strb	r0, [r3, #8]
                z = z->parent->parent;
 1009a90:	eaffffcc 	b	10099c8 <treetable_add+0xec>
                if (z == z->parent->right) {
 1009a94:	e5920014 	ldr	r0, [r2, #20]
 1009a98:	e1580000 	cmp	r8, r0
 1009a9c:	11a02001 	movne	r2, r1
 1009aa0:	0a00002d 	beq	1009b5c <treetable_add+0x280>
                z->parent->color         = RB_BLACK;
 1009aa4:	e5c1c008 	strb	ip, [r1, #8]
                z->parent->parent->color = RB_RED;
 1009aa8:	e5c3e008 	strb	lr, [r3, #8]
                rotate_right(table, z->parent->parent);
 1009aac:	e5950004 	ldr	r0, [r5, #4]
    x->left = y->right;
 1009ab0:	e5921014 	ldr	r1, [r2, #20]
    if (y->right != table->sentinel)
 1009ab4:	e1500001 	cmp	r0, r1
    x->left = y->right;
 1009ab8:	e5831010 	str	r1, [r3, #16]
        y->right->parent = x;
 1009abc:	1581300c 	strne	r3, [r1, #12]
    y->parent = x->parent;
 1009ac0:	e593100c 	ldr	r1, [r3, #12]
    if (x->parent == table->sentinel)
 1009ac4:	e1500001 	cmp	r0, r1
    y->parent = x->parent;
 1009ac8:	e582100c 	str	r1, [r2, #12]
        table->root = y;
 1009acc:	05852000 	streq	r2, [r5]
    if (x->parent == table->sentinel)
 1009ad0:	0a000003 	beq	1009ae4 <treetable_add+0x208>
    else if (x == x->parent->right)
 1009ad4:	e5910014 	ldr	r0, [r1, #20]
 1009ad8:	e1500003 	cmp	r0, r3
        x->parent->right = y;
 1009adc:	05812014 	streq	r2, [r1, #20]
        x->parent->left = y;
 1009ae0:	15812010 	strne	r2, [r1, #16]
    y->right  = x;
 1009ae4:	e5823014 	str	r3, [r2, #20]
    x->parent = y;
 1009ae8:	e583200c 	str	r2, [r3, #12]
 1009aec:	eaffffb5 	b	10099c8 <treetable_add+0xec>
            x->value = val;
 1009af0:	e5847004 	str	r7, [r4, #4]
            return CC_OK;
 1009af4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                    rotate_right(table, z);
 1009af8:	e5954004 	ldr	r4, [r5, #4]
    x->left = y->right;
 1009afc:	e5910014 	ldr	r0, [r1, #20]
    if (y->right != table->sentinel)
 1009b00:	e1540000 	cmp	r4, r0
    x->left = y->right;
 1009b04:	e5820010 	str	r0, [r2, #16]
        y->right->parent = x;
 1009b08:	1580200c 	strne	r2, [r0, #12]
 1009b0c:	1592300c 	ldrne	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1009b10:	e1540003 	cmp	r4, r3
    y->parent = x->parent;
 1009b14:	e581300c 	str	r3, [r1, #12]
        table->root = y;
 1009b18:	05851000 	streq	r1, [r5]
    if (x->parent == table->sentinel)
 1009b1c:	0a000003 	beq	1009b30 <treetable_add+0x254>
    else if (x == x->parent->right)
 1009b20:	e5930014 	ldr	r0, [r3, #20]
 1009b24:	e1520000 	cmp	r2, r0
        x->parent->right = y;
 1009b28:	05831014 	streq	r1, [r3, #20]
        x->parent->left = y;
 1009b2c:	15831010 	strne	r1, [r3, #16]
    y->right  = x;
 1009b30:	e5812014 	str	r2, [r1, #20]
    x->parent = y;
 1009b34:	e1a08002 	mov	r8, r2
 1009b38:	e582100c 	str	r1, [r2, #12]
 1009b3c:	e1a02001 	mov	r2, r1
 1009b40:	e591300c 	ldr	r3, [r1, #12]
 1009b44:	eaffffad 	b	1009a00 <treetable_add+0x124>
        n->color    = RB_BLACK;
 1009b48:	e3a03001 	mov	r3, #1
        table->root = n;
 1009b4c:	e5858000 	str	r8, [r5]
    return CC_OK;
 1009b50:	e3a00000 	mov	r0, #0
        n->color    = RB_BLACK;
 1009b54:	e5c83008 	strb	r3, [r8, #8]
 1009b58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                    rotate_left(table, z);
 1009b5c:	e5954004 	ldr	r4, [r5, #4]
    x->right = y->left;
 1009b60:	e5980010 	ldr	r0, [r8, #16]
    if (y->left != table->sentinel)
 1009b64:	e1540000 	cmp	r4, r0
    x->right = y->left;
 1009b68:	e5820014 	str	r0, [r2, #20]
    if (y->left != table->sentinel)
 1009b6c:	0a000012 	beq	1009bbc <treetable_add+0x2e0>
        y->left->parent = x;
 1009b70:	e580200c 	str	r2, [r0, #12]
    y->parent = x->parent;
 1009b74:	e592300c 	ldr	r3, [r2, #12]
    if (x->parent == table->sentinel)
 1009b78:	e1540003 	cmp	r4, r3
    y->parent = x->parent;
 1009b7c:	e588300c 	str	r3, [r8, #12]
    if (x->parent == table->sentinel)
 1009b80:	0a000012 	beq	1009bd0 <treetable_add+0x2f4>
    else if (x == x->parent->left)
 1009b84:	e5930010 	ldr	r0, [r3, #16]
 1009b88:	e1520000 	cmp	r2, r0
        x->parent->right = y;
 1009b8c:	15838014 	strne	r8, [r3, #20]
    else if (x == x->parent->left)
 1009b90:	0a00000c 	beq	1009bc8 <treetable_add+0x2ec>
    y->left   = x;
 1009b94:	e5882010 	str	r2, [r8, #16]
    x->parent = y;
 1009b98:	e1a00008 	mov	r0, r8
 1009b9c:	e582800c 	str	r8, [r2, #12]
 1009ba0:	e598300c 	ldr	r3, [r8, #12]
 1009ba4:	e1a08001 	mov	r8, r1
 1009ba8:	e1a01000 	mov	r1, r0
 1009bac:	e5932010 	ldr	r2, [r3, #16]
 1009bb0:	eaffffbb 	b	1009aa4 <treetable_add+0x1c8>
        return CC_ERR_ALLOC;
 1009bb4:	e3a00001 	mov	r0, #1
}
 1009bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (x->parent == table->sentinel)
 1009bbc:	e1530004 	cmp	r3, r4
    y->parent = x->parent;
 1009bc0:	e588300c 	str	r3, [r8, #12]
    if (x->parent == table->sentinel)
 1009bc4:	0a000001 	beq	1009bd0 <treetable_add+0x2f4>
        x->parent->left = y;
 1009bc8:	e5838010 	str	r8, [r3, #16]
 1009bcc:	eafffff0 	b	1009b94 <treetable_add+0x2b8>
        table->root = y;
 1009bd0:	e5858000 	str	r8, [r5]
 1009bd4:	eaffffee 	b	1009b94 <treetable_add+0x2b8>

01009bd8 <treetable_remove>:
    if (table->size == 0)
 1009bd8:	e5903008 	ldr	r3, [r0, #8]
 1009bdc:	e3530000 	cmp	r3, #0
 1009be0:	0a00001e 	beq	1009c60 <treetable_remove+0x88>
{
 1009be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1009be8:	e1a06002 	mov	r6, r2
 1009bec:	e1a07001 	mov	r7, r1
 1009bf0:	e1a05000 	mov	r5, r0
    RBNode *s = table->sentinel;
 1009bf4:	e8900110 	ldm	r0, {r4, r8}
 1009bf8:	ea000004 	b	1009c10 <treetable_remove+0x38>
        else if (cmp > 0)
 1009bfc:	0a00000f 	beq	1009c40 <treetable_remove+0x68>
            n = n->right;
 1009c00:	e5944014 	ldr	r4, [r4, #20]
    } while (n != s && cmp != 0);
 1009c04:	e1580004 	cmp	r8, r4
 1009c08:	13500000 	cmpne	r0, #0
 1009c0c:	0a000009 	beq	1009c38 <treetable_remove+0x60>
        cmp = table->cmp(key, n->key);
 1009c10:	e595300c 	ldr	r3, [r5, #12]
 1009c14:	e1a00007 	mov	r0, r7
 1009c18:	e5941000 	ldr	r1, [r4]
 1009c1c:	e12fff33 	blx	r3
        if (cmp < 0)
 1009c20:	e3500000 	cmp	r0, #0
 1009c24:	aafffff4 	bge	1009bfc <treetable_remove+0x24>
            n = n->left;
 1009c28:	e5944010 	ldr	r4, [r4, #16]
    } while (n != s && cmp != 0);
 1009c2c:	e1580004 	cmp	r8, r4
 1009c30:	13500000 	cmpne	r0, #0
 1009c34:	1afffff5 	bne	1009c10 <treetable_remove+0x38>
        return CC_ERR_KEY_NOT_FOUND;
 1009c38:	e3a00006 	mov	r0, #6
 1009c3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (out)
 1009c40:	e3560000 	cmp	r6, #0
        *out = node->value;
 1009c44:	15943004 	ldrne	r3, [r4, #4]
 1009c48:	15863000 	strne	r3, [r6]
    remove_node(table, node);
 1009c4c:	e1a00005 	mov	r0, r5
 1009c50:	e1a01004 	mov	r1, r4
 1009c54:	ebfffacb 	bl	1008788 <remove_node>
    return CC_OK;
 1009c58:	e3a00000 	mov	r0, #0
}
 1009c5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return CC_ERR_KEY_NOT_FOUND;
 1009c60:	e3a00006 	mov	r0, #6
}
 1009c64:	e12fff1e 	bx	lr

01009c68 <treetable_remove_first>:
    if (table->size == 0)
 1009c68:	e5903008 	ldr	r3, [r0, #8]
 1009c6c:	e3530000 	cmp	r3, #0
 1009c70:	0a00000d 	beq	1009cac <treetable_remove_first+0x44>
{
 1009c74:	e92d4010 	push	{r4, lr}
    RBNode *node = tree_min(table, table->root);
 1009c78:	e8901004 	ldm	r0, {r2, ip}
    while (n->left != s)
 1009c7c:	ea000000 	b	1009c84 <treetable_remove_first+0x1c>
 1009c80:	e1a02003 	mov	r2, r3
 1009c84:	e5923010 	ldr	r3, [r2, #16]
 1009c88:	e15c0003 	cmp	ip, r3
 1009c8c:	1afffffb 	bne	1009c80 <treetable_remove_first+0x18>
    if (out)
 1009c90:	e3510000 	cmp	r1, #0
        *out = node->value;
 1009c94:	15923004 	ldrne	r3, [r2, #4]
 1009c98:	15813000 	strne	r3, [r1]
    remove_node(table, node);
 1009c9c:	e1a01002 	mov	r1, r2
 1009ca0:	ebfffab8 	bl	1008788 <remove_node>
    return CC_OK;
 1009ca4:	e3a00000 	mov	r0, #0
}
 1009ca8:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_KEY_NOT_FOUND;
 1009cac:	e3a00006 	mov	r0, #6
}
 1009cb0:	e12fff1e 	bx	lr

01009cb4 <treetable_remove_last>:
{
 1009cb4:	e92d4010 	push	{r4, lr}
    RBNode *node = tree_max(table, table->root);
 1009cb8:	e8901004 	ldm	r0, {r2, ip}
    while (n->right != s)
 1009cbc:	ea000000 	b	1009cc4 <treetable_remove_last+0x10>
 1009cc0:	e1a02003 	mov	r2, r3
 1009cc4:	e5923014 	ldr	r3, [r2, #20]
 1009cc8:	e15c0003 	cmp	ip, r3
 1009ccc:	1afffffb 	bne	1009cc0 <treetable_remove_last+0xc>
    if (out)
 1009cd0:	e3510000 	cmp	r1, #0
        *out = node->value;
 1009cd4:	15923004 	ldrne	r3, [r2, #4]
 1009cd8:	15813000 	strne	r3, [r1]
    remove_node(table, node);
 1009cdc:	e1a01002 	mov	r1, r2
 1009ce0:	ebfffaa8 	bl	1008788 <remove_node>
}
 1009ce4:	e3a00000 	mov	r0, #0
 1009ce8:	e8bd8010 	pop	{r4, pc}

01009cec <treetable_remove_all>:
{
 1009cec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1009cf0:	e1a04000 	mov	r4, r0
    tree_destroy(table, table->root);
 1009cf4:	e5907000 	ldr	r7, [r0]
    if (n == table->sentinel)
 1009cf8:	e5903004 	ldr	r3, [r0, #4]
 1009cfc:	e1570003 	cmp	r7, r3
 1009d00:	0a000177 	beq	100a2e4 <treetable_remove_all+0x5f8>
    tree_destroy(table, n->left);
 1009d04:	e5975010 	ldr	r5, [r7, #16]
    if (n == table->sentinel)
 1009d08:	e1530005 	cmp	r3, r5
 1009d0c:	0a0000b6 	beq	1009fec <treetable_remove_all+0x300>
    tree_destroy(table, n->left);
 1009d10:	e5956010 	ldr	r6, [r5, #16]
    if (n == table->sentinel)
 1009d14:	e1530006 	cmp	r3, r6
 1009d18:	0a000056 	beq	1009e78 <treetable_remove_all+0x18c>
    tree_destroy(table, n->left);
 1009d1c:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 1009d20:	e1530008 	cmp	r3, r8
 1009d24:	0a000026 	beq	1009dc4 <treetable_remove_all+0xd8>
    tree_destroy(table, n->left);
 1009d28:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1009d2c:	e1530009 	cmp	r3, r9
 1009d30:	0a00000e 	beq	1009d70 <treetable_remove_all+0x84>
    tree_destroy(table, n->left);
 1009d34:	e5992010 	ldr	r2, [r9, #16]
    if (n == table->sentinel)
 1009d38:	e1530002 	cmp	r3, r2
 1009d3c:	0a000002 	beq	1009d4c <treetable_remove_all+0x60>
 1009d40:	e1a01002 	mov	r1, r2
 1009d44:	ebfffbdd 	bl	1008cc0 <tree_destroy.part.0>
 1009d48:	e5942004 	ldr	r2, [r4, #4]
    tree_destroy(table, n->right);
 1009d4c:	e5991014 	ldr	r1, [r9, #20]
    if (n == table->sentinel)
 1009d50:	e1510002 	cmp	r1, r2
 1009d54:	0a000001 	beq	1009d60 <treetable_remove_all+0x74>
 1009d58:	e1a00004 	mov	r0, r4
 1009d5c:	ebfffbd7 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009d60:	e1a00009 	mov	r0, r9
 1009d64:	e5943018 	ldr	r3, [r4, #24]
 1009d68:	e12fff33 	blx	r3
 1009d6c:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1009d70:	e598a014 	ldr	sl, [r8, #20]
    if (n == table->sentinel)
 1009d74:	e15a0009 	cmp	sl, r9
 1009d78:	0a00000d 	beq	1009db4 <treetable_remove_all+0xc8>
    tree_destroy(table, n->left);
 1009d7c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009d80:	e1510009 	cmp	r1, r9
 1009d84:	0a000002 	beq	1009d94 <treetable_remove_all+0xa8>
 1009d88:	e1a00004 	mov	r0, r4
 1009d8c:	ebfffbcb 	bl	1008cc0 <tree_destroy.part.0>
 1009d90:	e5949004 	ldr	r9, [r4, #4]
    tree_destroy(table, n->right);
 1009d94:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009d98:	e1510009 	cmp	r1, r9
 1009d9c:	0a000001 	beq	1009da8 <treetable_remove_all+0xbc>
 1009da0:	e1a00004 	mov	r0, r4
 1009da4:	ebfffbc5 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009da8:	e1a0000a 	mov	r0, sl
 1009dac:	e5943018 	ldr	r3, [r4, #24]
 1009db0:	e12fff33 	blx	r3
 1009db4:	e1a00008 	mov	r0, r8
 1009db8:	e5943018 	ldr	r3, [r4, #24]
 1009dbc:	e12fff33 	blx	r3
 1009dc0:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009dc4:	e5969014 	ldr	r9, [r6, #20]
    if (n == table->sentinel)
 1009dc8:	e1590008 	cmp	r9, r8
 1009dcc:	0a000025 	beq	1009e68 <treetable_remove_all+0x17c>
    tree_destroy(table, n->left);
 1009dd0:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009dd4:	e15a0008 	cmp	sl, r8
 1009dd8:	0a00000e 	beq	1009e18 <treetable_remove_all+0x12c>
    tree_destroy(table, n->left);
 1009ddc:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009de0:	e1510008 	cmp	r1, r8
 1009de4:	0a000002 	beq	1009df4 <treetable_remove_all+0x108>
 1009de8:	e1a00004 	mov	r0, r4
 1009dec:	ebfffbb3 	bl	1008cc0 <tree_destroy.part.0>
 1009df0:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009df4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009df8:	e1510008 	cmp	r1, r8
 1009dfc:	0a000001 	beq	1009e08 <treetable_remove_all+0x11c>
 1009e00:	e1a00004 	mov	r0, r4
 1009e04:	ebfffbad 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009e08:	e1a0000a 	mov	r0, sl
 1009e0c:	e5943018 	ldr	r3, [r4, #24]
 1009e10:	e12fff33 	blx	r3
 1009e14:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009e18:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009e1c:	e15a0008 	cmp	sl, r8
 1009e20:	0a00000d 	beq	1009e5c <treetable_remove_all+0x170>
    tree_destroy(table, n->left);
 1009e24:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009e28:	e1510008 	cmp	r1, r8
 1009e2c:	0a000002 	beq	1009e3c <treetable_remove_all+0x150>
 1009e30:	e1a00004 	mov	r0, r4
 1009e34:	ebfffba1 	bl	1008cc0 <tree_destroy.part.0>
 1009e38:	e5948004 	ldr	r8, [r4, #4]
    tree_destroy(table, n->right);
 1009e3c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009e40:	e1510008 	cmp	r1, r8
 1009e44:	0a000001 	beq	1009e50 <treetable_remove_all+0x164>
 1009e48:	e1a00004 	mov	r0, r4
 1009e4c:	ebfffb9b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009e50:	e1a0000a 	mov	r0, sl
 1009e54:	e5943018 	ldr	r3, [r4, #24]
 1009e58:	e12fff33 	blx	r3
 1009e5c:	e1a00009 	mov	r0, r9
 1009e60:	e5943018 	ldr	r3, [r4, #24]
 1009e64:	e12fff33 	blx	r3
 1009e68:	e1a00006 	mov	r0, r6
 1009e6c:	e5943018 	ldr	r3, [r4, #24]
 1009e70:	e12fff33 	blx	r3
 1009e74:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009e78:	e5958014 	ldr	r8, [r5, #20]
    if (n == table->sentinel)
 1009e7c:	e1580006 	cmp	r8, r6
 1009e80:	0a000055 	beq	1009fdc <treetable_remove_all+0x2f0>
    tree_destroy(table, n->left);
 1009e84:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 1009e88:	e1590006 	cmp	r9, r6
 1009e8c:	0a000026 	beq	1009f2c <treetable_remove_all+0x240>
    tree_destroy(table, n->left);
 1009e90:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009e94:	e15a0006 	cmp	sl, r6
 1009e98:	0a00000e 	beq	1009ed8 <treetable_remove_all+0x1ec>
    tree_destroy(table, n->left);
 1009e9c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009ea0:	e1510006 	cmp	r1, r6
 1009ea4:	0a000002 	beq	1009eb4 <treetable_remove_all+0x1c8>
 1009ea8:	e1a00004 	mov	r0, r4
 1009eac:	ebfffb83 	bl	1008cc0 <tree_destroy.part.0>
 1009eb0:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009eb4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009eb8:	e1510006 	cmp	r1, r6
 1009ebc:	0a000001 	beq	1009ec8 <treetable_remove_all+0x1dc>
 1009ec0:	e1a00004 	mov	r0, r4
 1009ec4:	ebfffb7d 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009ec8:	e1a0000a 	mov	r0, sl
 1009ecc:	e5943018 	ldr	r3, [r4, #24]
 1009ed0:	e12fff33 	blx	r3
 1009ed4:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009ed8:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009edc:	e15a0006 	cmp	sl, r6
 1009ee0:	0a00000d 	beq	1009f1c <treetable_remove_all+0x230>
    tree_destroy(table, n->left);
 1009ee4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009ee8:	e1510006 	cmp	r1, r6
 1009eec:	0a000002 	beq	1009efc <treetable_remove_all+0x210>
 1009ef0:	e1a00004 	mov	r0, r4
 1009ef4:	ebfffb71 	bl	1008cc0 <tree_destroy.part.0>
 1009ef8:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009efc:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009f00:	e1510006 	cmp	r1, r6
 1009f04:	0a000001 	beq	1009f10 <treetable_remove_all+0x224>
 1009f08:	e1a00004 	mov	r0, r4
 1009f0c:	ebfffb6b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009f10:	e1a0000a 	mov	r0, sl
 1009f14:	e5943018 	ldr	r3, [r4, #24]
 1009f18:	e12fff33 	blx	r3
 1009f1c:	e1a00009 	mov	r0, r9
 1009f20:	e5943018 	ldr	r3, [r4, #24]
 1009f24:	e12fff33 	blx	r3
 1009f28:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009f2c:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 1009f30:	e1590006 	cmp	r9, r6
 1009f34:	0a000025 	beq	1009fd0 <treetable_remove_all+0x2e4>
    tree_destroy(table, n->left);
 1009f38:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 1009f3c:	e15a0006 	cmp	sl, r6
 1009f40:	0a00000e 	beq	1009f80 <treetable_remove_all+0x294>
    tree_destroy(table, n->left);
 1009f44:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009f48:	e1510006 	cmp	r1, r6
 1009f4c:	0a000002 	beq	1009f5c <treetable_remove_all+0x270>
 1009f50:	e1a00004 	mov	r0, r4
 1009f54:	ebfffb59 	bl	1008cc0 <tree_destroy.part.0>
 1009f58:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009f5c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009f60:	e1510006 	cmp	r1, r6
 1009f64:	0a000001 	beq	1009f70 <treetable_remove_all+0x284>
 1009f68:	e1a00004 	mov	r0, r4
 1009f6c:	ebfffb53 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009f70:	e1a0000a 	mov	r0, sl
 1009f74:	e5943018 	ldr	r3, [r4, #24]
 1009f78:	e12fff33 	blx	r3
 1009f7c:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009f80:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 1009f84:	e15a0006 	cmp	sl, r6
 1009f88:	0a00000d 	beq	1009fc4 <treetable_remove_all+0x2d8>
    tree_destroy(table, n->left);
 1009f8c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 1009f90:	e1510006 	cmp	r1, r6
 1009f94:	0a000002 	beq	1009fa4 <treetable_remove_all+0x2b8>
 1009f98:	e1a00004 	mov	r0, r4
 1009f9c:	ebfffb47 	bl	1008cc0 <tree_destroy.part.0>
 1009fa0:	e5946004 	ldr	r6, [r4, #4]
    tree_destroy(table, n->right);
 1009fa4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 1009fa8:	e1510006 	cmp	r1, r6
 1009fac:	0a000001 	beq	1009fb8 <treetable_remove_all+0x2cc>
 1009fb0:	e1a00004 	mov	r0, r4
 1009fb4:	ebfffb41 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 1009fb8:	e1a0000a 	mov	r0, sl
 1009fbc:	e5943018 	ldr	r3, [r4, #24]
 1009fc0:	e12fff33 	blx	r3
 1009fc4:	e1a00009 	mov	r0, r9
 1009fc8:	e5943018 	ldr	r3, [r4, #24]
 1009fcc:	e12fff33 	blx	r3
 1009fd0:	e1a00008 	mov	r0, r8
 1009fd4:	e5943018 	ldr	r3, [r4, #24]
 1009fd8:	e12fff33 	blx	r3
 1009fdc:	e1a00005 	mov	r0, r5
 1009fe0:	e5943018 	ldr	r3, [r4, #24]
 1009fe4:	e12fff33 	blx	r3
 1009fe8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 1009fec:	e5976014 	ldr	r6, [r7, #20]
    if (n == table->sentinel)
 1009ff0:	e1560005 	cmp	r6, r5
 1009ff4:	0a0000b6 	beq	100a2d4 <treetable_remove_all+0x5e8>
    tree_destroy(table, n->left);
 1009ff8:	e5968010 	ldr	r8, [r6, #16]
    if (n == table->sentinel)
 1009ffc:	e1580005 	cmp	r8, r5
 100a000:	0a000056 	beq	100a160 <treetable_remove_all+0x474>
    tree_destroy(table, n->left);
 100a004:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 100a008:	e1590005 	cmp	r9, r5
 100a00c:	0a000026 	beq	100a0ac <treetable_remove_all+0x3c0>
    tree_destroy(table, n->left);
 100a010:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a014:	e15a0005 	cmp	sl, r5
 100a018:	0a00000e 	beq	100a058 <treetable_remove_all+0x36c>
    tree_destroy(table, n->left);
 100a01c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a020:	e1510005 	cmp	r1, r5
 100a024:	0a000002 	beq	100a034 <treetable_remove_all+0x348>
 100a028:	e1a00004 	mov	r0, r4
 100a02c:	ebfffb23 	bl	1008cc0 <tree_destroy.part.0>
 100a030:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a034:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a038:	e1510005 	cmp	r1, r5
 100a03c:	0a000001 	beq	100a048 <treetable_remove_all+0x35c>
 100a040:	e1a00004 	mov	r0, r4
 100a044:	ebfffb1d 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a048:	e1a0000a 	mov	r0, sl
 100a04c:	e5943018 	ldr	r3, [r4, #24]
 100a050:	e12fff33 	blx	r3
 100a054:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a058:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a05c:	e15a0005 	cmp	sl, r5
 100a060:	0a00000d 	beq	100a09c <treetable_remove_all+0x3b0>
    tree_destroy(table, n->left);
 100a064:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a068:	e1510005 	cmp	r1, r5
 100a06c:	0a000002 	beq	100a07c <treetable_remove_all+0x390>
 100a070:	e1a00004 	mov	r0, r4
 100a074:	ebfffb11 	bl	1008cc0 <tree_destroy.part.0>
 100a078:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a07c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a080:	e1510005 	cmp	r1, r5
 100a084:	0a000001 	beq	100a090 <treetable_remove_all+0x3a4>
 100a088:	e1a00004 	mov	r0, r4
 100a08c:	ebfffb0b 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a090:	e1a0000a 	mov	r0, sl
 100a094:	e5943018 	ldr	r3, [r4, #24]
 100a098:	e12fff33 	blx	r3
 100a09c:	e1a00009 	mov	r0, r9
 100a0a0:	e5943018 	ldr	r3, [r4, #24]
 100a0a4:	e12fff33 	blx	r3
 100a0a8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a0ac:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 100a0b0:	e1590005 	cmp	r9, r5
 100a0b4:	0a000025 	beq	100a150 <treetable_remove_all+0x464>
    tree_destroy(table, n->left);
 100a0b8:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a0bc:	e15a0005 	cmp	sl, r5
 100a0c0:	0a00000e 	beq	100a100 <treetable_remove_all+0x414>
    tree_destroy(table, n->left);
 100a0c4:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a0c8:	e1510005 	cmp	r1, r5
 100a0cc:	0a000002 	beq	100a0dc <treetable_remove_all+0x3f0>
 100a0d0:	e1a00004 	mov	r0, r4
 100a0d4:	ebfffaf9 	bl	1008cc0 <tree_destroy.part.0>
 100a0d8:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a0dc:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a0e0:	e1510005 	cmp	r1, r5
 100a0e4:	0a000001 	beq	100a0f0 <treetable_remove_all+0x404>
 100a0e8:	e1a00004 	mov	r0, r4
 100a0ec:	ebfffaf3 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a0f0:	e1a0000a 	mov	r0, sl
 100a0f4:	e5943018 	ldr	r3, [r4, #24]
 100a0f8:	e12fff33 	blx	r3
 100a0fc:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a100:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a104:	e15a0005 	cmp	sl, r5
 100a108:	0a00000d 	beq	100a144 <treetable_remove_all+0x458>
    tree_destroy(table, n->left);
 100a10c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a110:	e1510005 	cmp	r1, r5
 100a114:	0a000002 	beq	100a124 <treetable_remove_all+0x438>
 100a118:	e1a00004 	mov	r0, r4
 100a11c:	ebfffae7 	bl	1008cc0 <tree_destroy.part.0>
 100a120:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a124:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a128:	e1510005 	cmp	r1, r5
 100a12c:	0a000001 	beq	100a138 <treetable_remove_all+0x44c>
 100a130:	e1a00004 	mov	r0, r4
 100a134:	ebfffae1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a138:	e1a0000a 	mov	r0, sl
 100a13c:	e5943018 	ldr	r3, [r4, #24]
 100a140:	e12fff33 	blx	r3
 100a144:	e1a00009 	mov	r0, r9
 100a148:	e5943018 	ldr	r3, [r4, #24]
 100a14c:	e12fff33 	blx	r3
 100a150:	e1a00008 	mov	r0, r8
 100a154:	e5943018 	ldr	r3, [r4, #24]
 100a158:	e12fff33 	blx	r3
 100a15c:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a160:	e5968014 	ldr	r8, [r6, #20]
    if (n == table->sentinel)
 100a164:	e1580005 	cmp	r8, r5
 100a168:	0a000056 	beq	100a2c8 <treetable_remove_all+0x5dc>
    tree_destroy(table, n->left);
 100a16c:	e5989010 	ldr	r9, [r8, #16]
    if (n == table->sentinel)
 100a170:	e1590005 	cmp	r9, r5
 100a174:	0a000026 	beq	100a214 <treetable_remove_all+0x528>
    tree_destroy(table, n->left);
 100a178:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a17c:	e15a0005 	cmp	sl, r5
 100a180:	0a00000e 	beq	100a1c0 <treetable_remove_all+0x4d4>
    tree_destroy(table, n->left);
 100a184:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a188:	e1510005 	cmp	r1, r5
 100a18c:	0a000002 	beq	100a19c <treetable_remove_all+0x4b0>
 100a190:	e1a00004 	mov	r0, r4
 100a194:	ebfffac9 	bl	1008cc0 <tree_destroy.part.0>
 100a198:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a19c:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a1a0:	e1510005 	cmp	r1, r5
 100a1a4:	0a000001 	beq	100a1b0 <treetable_remove_all+0x4c4>
 100a1a8:	e1a00004 	mov	r0, r4
 100a1ac:	ebfffac3 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a1b0:	e1a0000a 	mov	r0, sl
 100a1b4:	e5943018 	ldr	r3, [r4, #24]
 100a1b8:	e12fff33 	blx	r3
 100a1bc:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a1c0:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a1c4:	e15a0005 	cmp	sl, r5
 100a1c8:	0a00000d 	beq	100a204 <treetable_remove_all+0x518>
    tree_destroy(table, n->left);
 100a1cc:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a1d0:	e1510005 	cmp	r1, r5
 100a1d4:	0a000002 	beq	100a1e4 <treetable_remove_all+0x4f8>
 100a1d8:	e1a00004 	mov	r0, r4
 100a1dc:	ebfffab7 	bl	1008cc0 <tree_destroy.part.0>
 100a1e0:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a1e4:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a1e8:	e1510005 	cmp	r1, r5
 100a1ec:	0a000001 	beq	100a1f8 <treetable_remove_all+0x50c>
 100a1f0:	e1a00004 	mov	r0, r4
 100a1f4:	ebfffab1 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a1f8:	e1a0000a 	mov	r0, sl
 100a1fc:	e5943018 	ldr	r3, [r4, #24]
 100a200:	e12fff33 	blx	r3
 100a204:	e1a00009 	mov	r0, r9
 100a208:	e5943018 	ldr	r3, [r4, #24]
 100a20c:	e12fff33 	blx	r3
 100a210:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a214:	e5989014 	ldr	r9, [r8, #20]
    if (n == table->sentinel)
 100a218:	e1590005 	cmp	r9, r5
 100a21c:	0a000026 	beq	100a2bc <treetable_remove_all+0x5d0>
    tree_destroy(table, n->left);
 100a220:	e599a010 	ldr	sl, [r9, #16]
    if (n == table->sentinel)
 100a224:	e15a0005 	cmp	sl, r5
 100a228:	0a00000e 	beq	100a268 <treetable_remove_all+0x57c>
    tree_destroy(table, n->left);
 100a22c:	e59a1010 	ldr	r1, [sl, #16]
    if (n == table->sentinel)
 100a230:	e1510005 	cmp	r1, r5
 100a234:	0a000002 	beq	100a244 <treetable_remove_all+0x558>
 100a238:	e1a00004 	mov	r0, r4
 100a23c:	ebfffa9f 	bl	1008cc0 <tree_destroy.part.0>
 100a240:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a244:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a248:	e1550001 	cmp	r5, r1
 100a24c:	0a000001 	beq	100a258 <treetable_remove_all+0x56c>
 100a250:	e1a00004 	mov	r0, r4
 100a254:	ebfffa99 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a258:	e1a0000a 	mov	r0, sl
 100a25c:	e5943018 	ldr	r3, [r4, #24]
 100a260:	e12fff33 	blx	r3
 100a264:	e5945004 	ldr	r5, [r4, #4]
    tree_destroy(table, n->right);
 100a268:	e599a014 	ldr	sl, [r9, #20]
    if (n == table->sentinel)
 100a26c:	e15a0005 	cmp	sl, r5
 100a270:	0a00000e 	beq	100a2b0 <treetable_remove_all+0x5c4>
    tree_destroy(table, n->left);
 100a274:	e59a3010 	ldr	r3, [sl, #16]
    if (n == table->sentinel)
 100a278:	e1550003 	cmp	r5, r3
 100a27c:	0a000003 	beq	100a290 <treetable_remove_all+0x5a4>
 100a280:	e1a01003 	mov	r1, r3
 100a284:	e1a00004 	mov	r0, r4
 100a288:	ebfffa8c 	bl	1008cc0 <tree_destroy.part.0>
 100a28c:	e5943004 	ldr	r3, [r4, #4]
    tree_destroy(table, n->right);
 100a290:	e59a1014 	ldr	r1, [sl, #20]
    if (n == table->sentinel)
 100a294:	e1510003 	cmp	r1, r3
 100a298:	0a000001 	beq	100a2a4 <treetable_remove_all+0x5b8>
 100a29c:	e1a00004 	mov	r0, r4
 100a2a0:	ebfffa86 	bl	1008cc0 <tree_destroy.part.0>
    table->mem_free(n);
 100a2a4:	e1a0000a 	mov	r0, sl
 100a2a8:	e5943018 	ldr	r3, [r4, #24]
 100a2ac:	e12fff33 	blx	r3
 100a2b0:	e1a00009 	mov	r0, r9
 100a2b4:	e5943018 	ldr	r3, [r4, #24]
 100a2b8:	e12fff33 	blx	r3
 100a2bc:	e1a00008 	mov	r0, r8
 100a2c0:	e5943018 	ldr	r3, [r4, #24]
 100a2c4:	e12fff33 	blx	r3
 100a2c8:	e1a00006 	mov	r0, r6
 100a2cc:	e5943018 	ldr	r3, [r4, #24]
 100a2d0:	e12fff33 	blx	r3
 100a2d4:	e5943018 	ldr	r3, [r4, #24]
 100a2d8:	e1a00007 	mov	r0, r7
 100a2dc:	e12fff33 	blx	r3
 100a2e0:	e5943004 	ldr	r3, [r4, #4]
    table->size = 0;
 100a2e4:	e3a02000 	mov	r2, #0
    table->root = table->sentinel;
 100a2e8:	e5843000 	str	r3, [r4]
    table->size = 0;
 100a2ec:	e5842008 	str	r2, [r4, #8]
}
 100a2f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0100a2f4 <treetable_foreach_key>:
{
 100a2f4:	e92d4070 	push	{r4, r5, r6, lr}
 100a2f8:	e1a05000 	mov	r5, r0
 100a2fc:	e1a06001 	mov	r6, r1
    RBNode *n = tree_min(table, table->root);
 100a300:	e5904000 	ldr	r4, [r0]
 100a304:	e5902004 	ldr	r2, [r0, #4]
    while (n->left != s)
 100a308:	ea000000 	b	100a310 <treetable_foreach_key+0x1c>
 100a30c:	e1a04003 	mov	r4, r3
 100a310:	e5943010 	ldr	r3, [r4, #16]
 100a314:	e1520003 	cmp	r2, r3
 100a318:	1afffffb 	bne	100a30c <treetable_foreach_key+0x18>
    while (n != table->sentinel) {
 100a31c:	e1540002 	cmp	r4, r2
 100a320:	08bd8070 	popeq	{r4, r5, r6, pc}
        fn(n->key);
 100a324:	e5940000 	ldr	r0, [r4]
 100a328:	e12fff36 	blx	r6
    if (x->right != table->sentinel)
 100a32c:	e5943014 	ldr	r3, [r4, #20]
 100a330:	e5951004 	ldr	r1, [r5, #4]
 100a334:	e1530001 	cmp	r3, r1
 100a338:	1a000001 	bne	100a344 <treetable_foreach_key+0x50>
 100a33c:	ea000007 	b	100a360 <treetable_foreach_key+0x6c>
    while (n->left != s)
 100a340:	e1a03002 	mov	r3, r2
 100a344:	e5932010 	ldr	r2, [r3, #16]
 100a348:	e1510002 	cmp	r1, r2
 100a34c:	1afffffb 	bne	100a340 <treetable_foreach_key+0x4c>
    while (n != table->sentinel) {
 100a350:	e1510003 	cmp	r1, r3
 100a354:	08bd8070 	popeq	{r4, r5, r6, pc}
    while (n->left != s)
 100a358:	e1a04003 	mov	r4, r3
 100a35c:	eafffff0 	b	100a324 <treetable_foreach_key+0x30>
    RBNode *y = x->parent;
 100a360:	e594200c 	ldr	r2, [r4, #12]
    while (y != table->sentinel && x == y->right) {
 100a364:	e1530002 	cmp	r3, r2
 100a368:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a36c:	e5923014 	ldr	r3, [r2, #20]
 100a370:	e1540003 	cmp	r4, r3
 100a374:	1a000007 	bne	100a398 <treetable_foreach_key+0xa4>
        y = y->parent;
 100a378:	e592300c 	ldr	r3, [r2, #12]
    while (y != table->sentinel && x == y->right) {
 100a37c:	e1510003 	cmp	r1, r3
 100a380:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a384:	e5930014 	ldr	r0, [r3, #20]
 100a388:	e1500002 	cmp	r0, r2
 100a38c:	e1a02003 	mov	r2, r3
 100a390:	0afffff8 	beq	100a378 <treetable_foreach_key+0x84>
 100a394:	eaffffef 	b	100a358 <treetable_foreach_key+0x64>
 100a398:	e1a03002 	mov	r3, r2
 100a39c:	eaffffed 	b	100a358 <treetable_foreach_key+0x64>

0100a3a0 <treetable_foreach_value>:
{
 100a3a0:	e92d4070 	push	{r4, r5, r6, lr}
 100a3a4:	e1a05000 	mov	r5, r0
 100a3a8:	e1a06001 	mov	r6, r1
    RBNode *n = tree_min(table, table->root);
 100a3ac:	e5904000 	ldr	r4, [r0]
 100a3b0:	e5902004 	ldr	r2, [r0, #4]
    while (n->left != s)
 100a3b4:	ea000000 	b	100a3bc <treetable_foreach_value+0x1c>
 100a3b8:	e1a04003 	mov	r4, r3
 100a3bc:	e5943010 	ldr	r3, [r4, #16]
 100a3c0:	e1520003 	cmp	r2, r3
 100a3c4:	1afffffb 	bne	100a3b8 <treetable_foreach_value+0x18>
    while (n != table->sentinel) {
 100a3c8:	e1540002 	cmp	r4, r2
 100a3cc:	08bd8070 	popeq	{r4, r5, r6, pc}
        fn(n->value);
 100a3d0:	e5940004 	ldr	r0, [r4, #4]
 100a3d4:	e12fff36 	blx	r6
    if (x->right != table->sentinel)
 100a3d8:	e5943014 	ldr	r3, [r4, #20]
 100a3dc:	e5951004 	ldr	r1, [r5, #4]
 100a3e0:	e1530001 	cmp	r3, r1
 100a3e4:	1a000001 	bne	100a3f0 <treetable_foreach_value+0x50>
 100a3e8:	ea000007 	b	100a40c <treetable_foreach_value+0x6c>
    while (n->left != s)
 100a3ec:	e1a03002 	mov	r3, r2
 100a3f0:	e5932010 	ldr	r2, [r3, #16]
 100a3f4:	e1510002 	cmp	r1, r2
 100a3f8:	1afffffb 	bne	100a3ec <treetable_foreach_value+0x4c>
    while (n != table->sentinel) {
 100a3fc:	e1510003 	cmp	r1, r3
 100a400:	08bd8070 	popeq	{r4, r5, r6, pc}
    while (n->left != s)
 100a404:	e1a04003 	mov	r4, r3
 100a408:	eafffff0 	b	100a3d0 <treetable_foreach_value+0x30>
    RBNode *y = x->parent;
 100a40c:	e594200c 	ldr	r2, [r4, #12]
    while (y != table->sentinel && x == y->right) {
 100a410:	e1530002 	cmp	r3, r2
 100a414:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a418:	e5923014 	ldr	r3, [r2, #20]
 100a41c:	e1540003 	cmp	r4, r3
 100a420:	1a000007 	bne	100a444 <treetable_foreach_value+0xa4>
        y = y->parent;
 100a424:	e592300c 	ldr	r3, [r2, #12]
    while (y != table->sentinel && x == y->right) {
 100a428:	e1510003 	cmp	r1, r3
 100a42c:	08bd8070 	popeq	{r4, r5, r6, pc}
 100a430:	e5930014 	ldr	r0, [r3, #20]
 100a434:	e1500002 	cmp	r0, r2
 100a438:	e1a02003 	mov	r2, r3
 100a43c:	0afffff8 	beq	100a424 <treetable_foreach_value+0x84>
 100a440:	eaffffef 	b	100a404 <treetable_foreach_value+0x64>
 100a444:	e1a03002 	mov	r3, r2
 100a448:	eaffffed 	b	100a404 <treetable_foreach_value+0x64>

0100a44c <treetable_iter_init>:
    iter->current = table->sentinel;
 100a44c:	e5913004 	ldr	r3, [r1, #4]
    iter->next    = tree_min(table, table->root);
 100a450:	e5912000 	ldr	r2, [r1]
    iter->table   = table;
 100a454:	e5801000 	str	r1, [r0]
    iter->current = table->sentinel;
 100a458:	e5803004 	str	r3, [r0, #4]
    iter->next    = tree_min(table, table->root);
 100a45c:	e5911004 	ldr	r1, [r1, #4]
    while (n->left != s)
 100a460:	ea000000 	b	100a468 <treetable_iter_init+0x1c>
 100a464:	e1a02003 	mov	r2, r3
 100a468:	e5923010 	ldr	r3, [r2, #16]
 100a46c:	e1510003 	cmp	r1, r3
 100a470:	1afffffb 	bne	100a464 <treetable_iter_init+0x18>
    iter->next    = tree_min(table, table->root);
 100a474:	e5802008 	str	r2, [r0, #8]
}
 100a478:	e12fff1e 	bx	lr

0100a47c <treetable_iter_next>:
    if (iter->next == iter->table->sentinel)
 100a47c:	e5902000 	ldr	r2, [r0]
 100a480:	e590c008 	ldr	ip, [r0, #8]
 100a484:	e5923004 	ldr	r3, [r2, #4]
 100a488:	e15c0003 	cmp	ip, r3
 100a48c:	0a00001f 	beq	100a510 <treetable_iter_next+0x94>
{
 100a490:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    entry->key    = iter->next->key;
 100a494:	e59c3004 	ldr	r3, [ip, #4]
 100a498:	e59ce000 	ldr	lr, [ip]
 100a49c:	e5813004 	str	r3, [r1, #4]
 100a4a0:	e581e000 	str	lr, [r1]
    iter->current = iter->next;
 100a4a4:	e580c004 	str	ip, [r0, #4]
    if (x->right != table->sentinel)
 100a4a8:	e59c3014 	ldr	r3, [ip, #20]
 100a4ac:	e5921004 	ldr	r1, [r2, #4]
 100a4b0:	e1530001 	cmp	r3, r1
 100a4b4:	1a000011 	bne	100a500 <treetable_iter_next+0x84>
    RBNode *y = x->parent;
 100a4b8:	e59c200c 	ldr	r2, [ip, #12]
    while (y != table->sentinel && x == y->right) {
 100a4bc:	e1530002 	cmp	r3, r2
 100a4c0:	0a00000a 	beq	100a4f0 <treetable_iter_next+0x74>
 100a4c4:	e5923014 	ldr	r3, [r2, #20]
 100a4c8:	e15c0003 	cmp	ip, r3
 100a4cc:	0a000004 	beq	100a4e4 <treetable_iter_next+0x68>
 100a4d0:	ea000010 	b	100a518 <treetable_iter_next+0x9c>
 100a4d4:	e593c014 	ldr	ip, [r3, #20]
 100a4d8:	e15c0002 	cmp	ip, r2
 100a4dc:	e1a02003 	mov	r2, r3
 100a4e0:	1a000002 	bne	100a4f0 <treetable_iter_next+0x74>
        y = y->parent;
 100a4e4:	e592300c 	ldr	r3, [r2, #12]
    while (y != table->sentinel && x == y->right) {
 100a4e8:	e1510003 	cmp	r1, r3
 100a4ec:	1afffff8 	bne	100a4d4 <treetable_iter_next+0x58>
    iter->next    = get_successor_node(iter->table, iter->current);
 100a4f0:	e5803008 	str	r3, [r0, #8]
    return CC_OK;
 100a4f4:	e3a00000 	mov	r0, #0
}
 100a4f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    while (n->left != s)
 100a4fc:	e1a03002 	mov	r3, r2
 100a500:	e5932010 	ldr	r2, [r3, #16]
 100a504:	e1510002 	cmp	r1, r2
 100a508:	1afffffb 	bne	100a4fc <treetable_iter_next+0x80>
 100a50c:	eafffff7 	b	100a4f0 <treetable_iter_next+0x74>
        return CC_ITER_END;
 100a510:	e3a00009 	mov	r0, #9
}
 100a514:	e12fff1e 	bx	lr
    while (y != table->sentinel && x == y->right) {
 100a518:	e1a03002 	mov	r3, r2
 100a51c:	eafffff3 	b	100a4f0 <treetable_iter_next+0x74>

0100a520 <treetable_iter_remove>:
    if (!iter->current)
 100a520:	e5903004 	ldr	r3, [r0, #4]
 100a524:	e3530000 	cmp	r3, #0
 100a528:	0a00000b 	beq	100a55c <treetable_iter_remove+0x3c>
    if (out)
 100a52c:	e3510000 	cmp	r1, #0
{
 100a530:	e92d4010 	push	{r4, lr}
        *out = iter->current->value;
 100a534:	15933004 	ldrne	r3, [r3, #4]
 100a538:	e1a04000 	mov	r4, r0
 100a53c:	15813000 	strne	r3, [r1]
 100a540:	15903004 	ldrne	r3, [r0, #4]
    remove_node(iter->table, iter->current);
 100a544:	e5900000 	ldr	r0, [r0]
 100a548:	e1a01003 	mov	r1, r3
 100a54c:	ebfff88d 	bl	1008788 <remove_node>
    iter->current = NULL;
 100a550:	e3a00000 	mov	r0, #0
 100a554:	e5840004 	str	r0, [r4, #4]
}
 100a558:	e8bd8010 	pop	{r4, pc}
        return CC_ERR_KEY_NOT_FOUND;
 100a55c:	e3a00006 	mov	r0, #6
}
 100a560:	e12fff1e 	bx	lr

0100a564 <treetable_assert_rb_rules>:

int treetable_assert_rb_rules(TreeTable *table)
{
 100a564:	e92d4030 	push	{r4, r5, lr}
 100a568:	e24dd00c 	sub	sp, sp, #12
    int x;
    int status = treetable_test(table, table->root, &x);
 100a56c:	e5905000 	ldr	r5, [r0]
    if (node == table->sentinel) {
 100a570:	e5902004 	ldr	r2, [r0, #4]
 100a574:	e1550002 	cmp	r5, r2
 100a578:	0a00002f 	beq	100a63c <treetable_assert_rb_rules+0xd8>
    if (node->left != table->sentinel) {
 100a57c:	e5953010 	ldr	r3, [r5, #16]
 100a580:	e1a04000 	mov	r4, r0
 100a584:	e1520003 	cmp	r2, r3
 100a588:	0a000006 	beq	100a5a8 <treetable_assert_rb_rules+0x44>
        int cmp = table->cmp(node->left->key, node->key);
 100a58c:	e5930000 	ldr	r0, [r3]
 100a590:	e5951000 	ldr	r1, [r5]
 100a594:	e594300c 	ldr	r3, [r4, #12]
 100a598:	e12fff33 	blx	r3
        if (cmp >= 0)
 100a59c:	e3500000 	cmp	r0, #0
 100a5a0:	b5943004 	ldrlt	r3, [r4, #4]
 100a5a4:	aa000017 	bge	100a608 <treetable_assert_rb_rules+0xa4>
    if (node->right != table->sentinel) {
 100a5a8:	e5952014 	ldr	r2, [r5, #20]
 100a5ac:	e1520003 	cmp	r2, r3
 100a5b0:	0a000005 	beq	100a5cc <treetable_assert_rb_rules+0x68>
        int cmp = table->cmp(node->right->key, node->key);
 100a5b4:	e5920000 	ldr	r0, [r2]
 100a5b8:	e594300c 	ldr	r3, [r4, #12]
 100a5bc:	e5951000 	ldr	r1, [r5]
 100a5c0:	e12fff33 	blx	r3
        if (cmp <= 0)
 100a5c4:	e3500000 	cmp	r0, #0
 100a5c8:	da00000e 	ble	100a608 <treetable_assert_rb_rules+0xa4>
    if (node->color == RB_RED && node->parent->color == RB_RED) {
 100a5cc:	e5d53008 	ldrb	r3, [r5, #8]
 100a5d0:	e3530000 	cmp	r3, #0
 100a5d4:	1a000003 	bne	100a5e8 <treetable_assert_rb_rules+0x84>
 100a5d8:	e595300c 	ldr	r3, [r5, #12]
 100a5dc:	e5d30008 	ldrb	r0, [r3, #8]
 100a5e0:	e3500000 	cmp	r0, #0
 100a5e4:	0a000005 	beq	100a600 <treetable_assert_rb_rules+0x9c>
    int left_err = treetable_test(table, node->left, &nb_left);
 100a5e8:	e1a0200d 	mov	r2, sp
 100a5ec:	e5951010 	ldr	r1, [r5, #16]
 100a5f0:	e1a00004 	mov	r0, r4
 100a5f4:	ebfff970 	bl	1008bbc <treetable_test>
    if (left_err != RB_ERROR_OK)
 100a5f8:	e3500004 	cmp	r0, #4
 100a5fc:	0a000004 	beq	100a614 <treetable_assert_rb_rules+0xb0>
    return status;
}
 100a600:	e28dd00c 	add	sp, sp, #12
 100a604:	e8bd8030 	pop	{r4, r5, pc}
            return RB_ERROR_TREE_STRUCTURE;
 100a608:	e3a00002 	mov	r0, #2
}
 100a60c:	e28dd00c 	add	sp, sp, #12
 100a610:	e8bd8030 	pop	{r4, r5, pc}
    int right_err = treetable_test(table, node->right, &nb_right);
 100a614:	e5951014 	ldr	r1, [r5, #20]
 100a618:	e1a00004 	mov	r0, r4
 100a61c:	e28d2004 	add	r2, sp, #4
 100a620:	ebfff965 	bl	1008bbc <treetable_test>
    if (right_err != RB_ERROR_OK)
 100a624:	e3500004 	cmp	r0, #4
 100a628:	1afffff4 	bne	100a600 <treetable_assert_rb_rules+0x9c>
    if (nb_left != nb_right)
 100a62c:	e1cd20d0 	ldrd	r2, [sp]
 100a630:	e1520003 	cmp	r2, r3
        return RB_ERROR_BLACK_HEIGHT;
 100a634:	13a00001 	movne	r0, #1
 100a638:	1afffff0 	bne	100a600 <treetable_assert_rb_rules+0x9c>
        return RB_ERROR_OK;
 100a63c:	e3a00004 	mov	r0, #4
}
 100a640:	e28dd00c 	add	sp, sp, #12
 100a644:	e8bd8030 	pop	{r4, r5, pc}

0100a648 <_acq_irq_fifo_gen_rst>:
{
	uint32_t res;

	reg &= FAB_CFG_ADDR_MASK;
	//dsb();
	res = _FAB_CFG_ACCESS(reg);
 100a648:	e3a01000 	mov	r1, #0
 100a64c:	e34413c0 	movt	r1, #17344	; 0x43c0
 100a650:	e5913058 	ldr	r3, [r1, #88]	; 0x58
		d_printf(D_WARN, "NotRecover");
		return;
	}
#endif

	if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_RG_FIFO_STALL)) {
 100a654:	e3130010 	tst	r3, #16
 100a658:	0a00004c 	beq	100a790 <_acq_irq_fifo_gen_rst+0x148>
{
 100a65c:	e92d4070 	push	{r4, r5, r6, lr}
	fabcfg_write(FAB_CFG_ACQ_CTRL_A, g_acq_state.acq_ctrl_a);
}

static inline void _acq_clear_and_set_ctrl_a(uint32_t bitmask_clear, uint32_t bitmask_set)
{
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100a660:	e30942e0 	movw	r4, #37600	; 0x92e0
 100a664:	e3404145 	movt	r4, #325	; 0x145
		_acq_clear_and_set_ctrl_a(ACQ_CTRL_A_RUN | ACQ_CTRL_A_AXI_RUN, ACQ_CTRL_A_FIFO_RESET /*| ACQ_CTRL_A_TRIG_RST*/ | ACQ_CTRL_A_ABORT);

		// Wait until both FIFO level readouts report 0x0000
		while(((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_A) & ACQ_STATUS_A_FIFO_MASK) != 0) && \
 100a668:	e3a03000 	mov	r3, #0
{
 100a66c:	e24dd008 	sub	sp, sp, #8
		while(((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_A) & ACQ_STATUS_A_FIFO_MASK) != 0) && \
 100a670:	e34f3fff 	movt	r3, #65535	; 0xffff
 100a674:	e5940780 	ldr	r0, [r4, #1920]	; 0x780
	res = _FAB_CFG_ACCESS(reg);
 100a678:	e1a02001 	mov	r2, r1
 100a67c:	e3c0c003 	bic	ip, r0, #3
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100a680:	e38cc060 	orr	ip, ip, #96	; 0x60
 100a684:	e584c780 	str	ip, [r4, #1920]	; 0x780
static inline void fabcfg_write(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;
	//d_printf(D_RAW, "%08x : %08x\r\n", reg, data);
	//dsb();
	_FAB_CFG_ACCESS(reg) = data;
 100a688:	e581c050 	str	ip, [r1, #80]	; 0x50
 100a68c:	ea000002 	b	100a69c <_acq_irq_fifo_gen_rst+0x54>
	res = _FAB_CFG_ACCESS(reg);
 100a690:	e592105c 	ldr	r1, [r2, #92]	; 0x5c
 100a694:	e1110003 	tst	r1, r3
 100a698:	0a000002 	beq	100a6a8 <_acq_irq_fifo_gen_rst+0x60>
 100a69c:	e5921058 	ldr	r1, [r2, #88]	; 0x58
 100a6a0:	e1110003 	tst	r1, r3
 100a6a4:	1afffff9 	bne	100a690 <_acq_irq_fifo_gen_rst+0x48>
			  ((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_B) & ACQ_STATUS_B_FIFO_MASK) != 0)) ;

		_acq_clear_ctrl_a(ACQ_CTRL_A_FIFO_RESET  /*| ACQ_CTRL_A_TRIG_RST*/ | ACQ_CTRL_A_ABORT);

		// Reset the current acquisition and try again.  Set a tracking flag for diagnostics/debug.
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a6a8:	e5942884 	ldr	r2, [r4, #2180]	; 0x884
	_FAB_CFG_ACCESS(reg) = data;
 100a6ac:	e3a0c000 	mov	ip, #0
 100a6b0:	e59f6110 	ldr	r6, [pc, #272]	; 100a7c8 <_acq_irq_fifo_gen_rst+0x180>
 100a6b4:	e3c03063 	bic	r3, r0, #99	; 0x63
 100a6b8:	e344c3c0 	movt	ip, #17344	; 0x43c0
		g_acq_state.acq_current->trigger_at = 0;
 100a6bc:	e3a00000 	mov	r0, #0
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a6c0:	e1d211b0 	ldrh	r1, [r2, #16]
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100a6c4:	e5843780 	str	r3, [r4, #1920]	; 0x780
		g_acq_state.state = ACQSTATE_WAIT_TRIG; // TODO: maybe need another state here
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL; // TODO: maybe need another state here

		XAxiDma_Reset(&g_acq_state.dma);
		while(!XAxiDma_ResetIsDone(&g_acq_state.dma));
 100a6c8:	e1a05006 	mov	r5, r6
 100a6cc:	e58c3050 	str	r3, [ip, #80]	; 0x50
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a6d0:	e3813004 	orr	r3, r1, #4
		g_acq_state.acq_current->trigger_at = 0;
 100a6d4:	e582000c 	str	r0, [r2, #12]
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 100a6d8:	e1c231b0 	strh	r3, [r2, #16]
		XAxiDma_Reset(&g_acq_state.dma);
 100a6dc:	e1a00006 	mov	r0, r6
		g_acq_state.state = ACQSTATE_WAIT_TRIG; // TODO: maybe need another state here
 100a6e0:	e3a02003 	mov	r2, #3
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL; // TODO: maybe need another state here
 100a6e4:	e3a03001 	mov	r3, #1
 100a6e8:	e1c420f0 	strd	r2, [r4]
		XAxiDma_Reset(&g_acq_state.dma);
 100a6ec:	eb001eca 	bl	101221c <XAxiDma_Reset>
		while(!XAxiDma_ResetIsDone(&g_acq_state.dma));
 100a6f0:	e1a00005 	mov	r0, r5
 100a6f4:	eb001f0d 	bl	1012330 <XAxiDma_ResetIsDone>
 100a6f8:	e3500000 	cmp	r0, #0
 100a6fc:	0afffffb 	beq	100a6f0 <_acq_irq_fifo_gen_rst+0xa8>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100a700:	e594c008 	ldr	ip, [r4, #8]
 */
int _acq_core_dma_start(uint32_t *buff_ptr, uint32_t buff_sz)
{
	int error;

	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a704:	e3a03001 	mov	r3, #1
		if(_acq_core_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz) != ACQRES_OK) {
 100a708:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a70c:	e59f00b4 	ldr	r0, [pc, #180]	; 100a7c8 <_acq_irq_fifo_gen_rst+0x180>
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 100a710:	e59c2030 	ldr	r2, [ip, #48]	; 0x30
 100a714:	e5911008 	ldr	r1, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100a718:	e3822a07 	orr	r2, r2, #28672	; 0x7000
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100a71c:	e58c2030 	str	r2, [ip, #48]	; 0x30
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a720:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 100a724:	eb002098 	bl	101298c <XAxiDma_SimpleTransfer>

	if(error != XST_SUCCESS) {
 100a728:	e2502000 	subs	r2, r0, #0
 100a72c:	1a00001b 	bne	100a7a0 <_acq_irq_fifo_gen_rst+0x158>
	return *(volatile u32 *) Addr;
 100a730:	e5942088 	ldr	r2, [r4, #136]	; 0x88
	res = _FAB_CFG_ACCESS(reg);
 100a734:	e3a00000 	mov	r0, #0
 100a738:	e34403c0 	movt	r0, #17344	; 0x43c0
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100a73c:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
		g_acq_state.stats.num_fifo_stall_total++;
 100a740:	e594c7d4 	ldr	ip, [r4, #2004]	; 0x7d4
 100a744:	e5922000 	ldr	r2, [r2]
 100a748:	e3c33802 	bic	r3, r3, #131072	; 0x20000
 100a74c:	e3c33010 	bic	r3, r3, #16
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
		return ACQRES_DMA_FAIL;
	}

	g_acq_state.dmacr_state = XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_CR_OFFSET);
 100a750:	e5842784 	str	r2, [r4, #1924]	; 0x784
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100a754:	e3833f41 	orr	r3, r3, #260	; 0x104
 100a758:	e590e058 	ldr	lr, [r0, #88]	; 0x58
 100a75c:	e3833003 	orr	r3, r3, #3
		g_acq_state.stats.num_fifo_stall_total++;
 100a760:	e59427d0 	ldr	r2, [r4, #2000]	; 0x7d0
		stat_a = fabcfg_read(FAB_CFG_ACQ_STATUS_A);
 100a764:	e58de000 	str	lr, [sp]
 100a768:	e590e05c 	ldr	lr, [r0, #92]	; 0x5c
		g_acq_state.stats.num_fifo_stall_total++;
 100a76c:	e2922001 	adds	r2, r2, #1
 100a770:	e2acc000 	adc	ip, ip, #0
 100a774:	e5863778 	str	r3, [r6, #1912]	; 0x778
		stat_b = fabcfg_read(FAB_CFG_ACQ_STATUS_B);
 100a778:	e58de004 	str	lr, [sp, #4]
	_FAB_CFG_ACCESS(reg) = data;
 100a77c:	e5803050 	str	r3, [r0, #80]	; 0x50
		g_acq_state.stats.num_fifo_stall_total++;
 100a780:	e58427d0 	str	r2, [r4, #2000]	; 0x7d0
 100a784:	e584c7d4 	str	ip, [r4, #2004]	; 0x7d4
}
 100a788:	e28dd008 	add	sp, sp, #8
 100a78c:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: FIFO stall interrupt without FIFO stall signal!");
 100a790:	e30616e8 	movw	r1, #26344	; 0x66e8
 100a794:	e3a00004 	mov	r0, #4
 100a798:	e3401106 	movt	r1, #262	; 0x106
 100a79c:	ea000d57 	b	100dd00 <d_printf>
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
 100a7a0:	e3061698 	movw	r1, #26264	; 0x6698
 100a7a4:	e3a00004 	mov	r0, #4
 100a7a8:	e3401106 	movt	r1, #262	; 0x106
 100a7ac:	eb000d53 	bl	100dd00 <d_printf>
			d_printf(D_ERROR, "acquire: FIFO stall not recovered");
 100a7b0:	e30616c4 	movw	r1, #26308	; 0x66c4
 100a7b4:	e3a00004 	mov	r0, #4
 100a7b8:	e3401106 	movt	r1, #262	; 0x106
}
 100a7bc:	e28dd008 	add	sp, sp, #8
 100a7c0:	e8bd4070 	pop	{r4, r5, r6, lr}
			d_printf(D_ERROR, "acquire: FIFO stall not recovered");
 100a7c4:	ea000d4d 	b	100dd00 <d_printf>
 100a7c8:	014592e8 	.word	0x014592e8

0100a7cc <_acq_irq_error_dma>:
{
 100a7cc:	e92d4010 	push	{r4, lr}
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100a7d0:	e30942e0 	movw	r4, #37600	; 0x92e0
 100a7d4:	e3404145 	movt	r4, #325	; 0x145
{
 100a7d8:	e24dd008 	sub	sp, sp, #8
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100a7dc:	e3061724 	movw	r1, #26404	; 0x6724
 100a7e0:	e1a02000 	mov	r2, r0
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100a7e4:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100a7e8:	e3401106 	movt	r1, #262	; 0x106
 100a7ec:	e3a00004 	mov	r0, #4
 100a7f0:	e59c3004 	ldr	r3, [ip, #4]
 100a7f4:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
 100a7f8:	e58dc000 	str	ip, [sp]
 100a7fc:	eb000d3f 	bl	100dd00 <d_printf>
	g_acq_state.acq_ctrl_a |= bitmask;
 100a800:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
 100a804:	e3a00000 	mov	r0, #0
	g_acq_state.stats.num_err_total++;
 100a808:	e59437c8 	ldr	r3, [r4, #1992]	; 0x7c8
 100a80c:	e34403c0 	movt	r0, #17344	; 0x43c0
 100a810:	e594c7cc 	ldr	ip, [r4, #1996]	; 0x7cc
 100a814:	e3811008 	orr	r1, r1, #8
 100a818:	e2933001 	adds	r3, r3, #1
 100a81c:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100a820:	e2acc000 	adc	ip, ip, #0
 100a824:	e5801050 	str	r1, [r0, #80]	; 0x50
	g_acq_state.state = ACQSTATE_ERROR;
 100a828:	e3a00006 	mov	r0, #6
	g_acq_state.sub_state = ACQSUBST_NONE;
 100a82c:	e3a01000 	mov	r1, #0
	g_acq_state.state = ACQSTATE_ERROR;
 100a830:	e5840000 	str	r0, [r4]
	XAxiDma_Reset(&g_acq_state.dma);
 100a834:	e2840008 	add	r0, r4, #8
	g_acq_state.sub_state = ACQSUBST_NONE;
 100a838:	e5841004 	str	r1, [r4, #4]
	g_acq_state.stats.num_err_total++;
 100a83c:	e58437c8 	str	r3, [r4, #1992]	; 0x7c8
 100a840:	e584c7cc 	str	ip, [r4, #1996]	; 0x7cc
}
 100a844:	e28dd008 	add	sp, sp, #8
 100a848:	e8bd4010 	pop	{r4, lr}
	XAxiDma_Reset(&g_acq_state.dma);
 100a84c:	ea001e72 	b	101221c <XAxiDma_Reset>

0100a850 <_acq_reset_PL_fifo>:
 100a850:	e30922e0 	movw	r2, #37600	; 0x92e0
 100a854:	e3a01000 	mov	r1, #0
 100a858:	e3402145 	movt	r2, #325	; 0x145
 100a85c:	e34413c0 	movt	r1, #17344	; 0x43c0
 100a860:	e5923780 	ldr	r3, [r2, #1920]	; 0x780
 100a864:	e3830020 	orr	r0, r3, #32
 100a868:	e3c33020 	bic	r3, r3, #32
 100a86c:	e5810050 	str	r0, [r1, #80]	; 0x50
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100a870:	e5823780 	str	r3, [r2, #1920]	; 0x780
 100a874:	e5813050 	str	r3, [r1, #80]	; 0x50
}
 100a878:	e12fff1e 	bx	lr

0100a87c <_acq_reset_trigger>:
	g_acq_state.acq_ctrl_a |= bitmask;
 100a87c:	e30922e0 	movw	r2, #37600	; 0x92e0
 100a880:	e3a01000 	mov	r1, #0
 100a884:	e3402145 	movt	r2, #325	; 0x145
 100a888:	e34413c0 	movt	r1, #17344	; 0x43c0
 100a88c:	e5923780 	ldr	r3, [r2, #1920]	; 0x780
 100a890:	e3830008 	orr	r0, r3, #8
 100a894:	e3c33008 	bic	r3, r3, #8
 100a898:	e5810050 	str	r0, [r1, #80]	; 0x50
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100a89c:	e5823780 	str	r3, [r2, #1920]	; 0x780
 100a8a0:	e5813050 	str	r3, [r1, #80]	; 0x50
}
 100a8a4:	e12fff1e 	bx	lr

0100a8a8 <_acq_wait_for_ndone>:
	res = _FAB_CFG_ACCESS(reg);
 100a8a8:	e3a02000 	mov	r2, #0
 100a8ac:	e34423c0 	movt	r2, #17344	; 0x43c0
 100a8b0:	e5923058 	ldr	r3, [r2, #88]	; 0x58
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) ;
 100a8b4:	e3130001 	tst	r3, #1
 100a8b8:	1afffffc 	bne	100a8b0 <_acq_wait_for_ndone+0x8>
 100a8bc:	e12fff1e 	bx	lr

0100a8c0 <_acq_fast_dma_start>:
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100a8c0:	e30932e0 	movw	r3, #37600	; 0x92e0
 100a8c4:	e3403145 	movt	r3, #325	; 0x145
 100a8c8:	e593c088 	ldr	ip, [r3, #136]	; 0x88
	*LocalAddr = Value;
 100a8cc:	e58c0018 	str	r0, [ip, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100a8d0:	e5932784 	ldr	r2, [r3, #1924]	; 0x784
 100a8d4:	e3822001 	orr	r2, r2, #1
 100a8d8:	e5832784 	str	r2, [r3, #1924]	; 0x784
 100a8dc:	e58c2000 	str	r2, [ip]
 100a8e0:	e58c1028 	str	r1, [ip, #40]	; 0x28
}
 100a8e4:	e12fff1e 	bx	lr

0100a8e8 <_acq_core_dma_start>:
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a8e8:	e1a02001 	mov	r2, r1
{
 100a8ec:	e92d4010 	push	{r4, lr}
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100a8f0:	e1a01000 	mov	r1, r0
 100a8f4:	e3a03001 	mov	r3, #1
 100a8f8:	e59f003c 	ldr	r0, [pc, #60]	; 100a93c <_acq_core_dma_start+0x54>
 100a8fc:	eb002022 	bl	101298c <XAxiDma_SimpleTransfer>
	if(error != XST_SUCCESS) {
 100a900:	e3500000 	cmp	r0, #0
 100a904:	1a000005 	bne	100a920 <_acq_core_dma_start+0x38>
	g_acq_state.dmacr_state = XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_CR_OFFSET);
 100a908:	e30932e0 	movw	r3, #37600	; 0x92e0
 100a90c:	e3403145 	movt	r3, #325	; 0x145
	return *(volatile u32 *) Addr;
 100a910:	e5932088 	ldr	r2, [r3, #136]	; 0x88
 100a914:	e5922000 	ldr	r2, [r2]
 100a918:	e5832784 	str	r2, [r3, #1924]	; 0x784

	//d_printf(D_WARN, "c=%d", buff_sz);

	return ACQRES_OK;
}
 100a91c:	e8bd8010 	pop	{r4, pc}
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
 100a920:	e3061698 	movw	r1, #26264	; 0x6698
 100a924:	e1a02000 	mov	r2, r0
 100a928:	e3401106 	movt	r1, #262	; 0x106
 100a92c:	e3a00004 	mov	r0, #4
 100a930:	eb000cf2 	bl	100dd00 <d_printf>
		return ACQRES_DMA_FAIL;
 100a934:	e3e00004 	mvn	r0, #4
 100a938:	e8bd8010 	pop	{r4, pc}
 100a93c:	014592e8 	.word	0x014592e8

0100a940 <acq_write_training>:
void acq_write_training()
{
	int i;
	uint32_t train_regA = 0, train_regB = 0;

	d_printf(D_INFO, "acquire: start loading train values");
 100a940:	e306176c 	movw	r1, #26476	; 0x676c
{
 100a944:	e92d4070 	push	{r4, r5, r6, lr}
	d_printf(D_INFO, "acquire: start loading train values");
 100a948:	e3a00002 	mov	r0, #2
 100a94c:	e3401106 	movt	r1, #262	; 0x106
 100a950:	eb000cea 	bl	100dd00 <d_printf>

	// 5 LSBs from each line train value are stored into A and B registers
	for(i = 0; i < 4; i++) {
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a954:	e309c2e0 	movw	ip, #37600	; 0x92e0
	_FAB_CFG_ACCESS(reg) = data;
 100a958:	e3a00000 	mov	r0, #0
 100a95c:	e340c145 	movt	ip, #325	; 0x145
 100a960:	e34403c0 	movt	r0, #17344	; 0x43c0
 100a964:	e5dc3899 	ldrb	r3, [ip, #2201]	; 0x899
	res = _FAB_CFG_ACCESS(reg);
 100a968:	e1a02000 	mov	r2, r0
	}

	for(i = 0; i < 4; i++) {
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a96c:	e5dc189d 	ldrb	r1, [ip, #2205]	; 0x89d
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a970:	e5dc4898 	ldrb	r4, [ip, #2200]	; 0x898
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a974:	e5dce89c 	ldrb	lr, [ip, #2204]	; 0x89c
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a978:	e203301f 	and	r3, r3, #31
 100a97c:	e1a03583 	lsl	r3, r3, #11
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a980:	e201101f 	and	r1, r1, #31
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a984:	e5dc689b 	ldrb	r6, [ip, #2203]	; 0x89b
 100a988:	e204401f 	and	r4, r4, #31
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a98c:	e1a01581 	lsl	r1, r1, #11
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a990:	e1833184 	orr	r3, r3, r4, lsl #3
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a994:	e5dc489e 	ldrb	r4, [ip, #2206]	; 0x89e
 100a998:	e20ee01f 	and	lr, lr, #31
 100a99c:	e5dc589f 	ldrb	r5, [ip, #2207]	; 0x89f
 100a9a0:	e181118e 	orr	r1, r1, lr, lsl #3
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a9a4:	e5dce89a 	ldrb	lr, [ip, #2202]	; 0x89a
 100a9a8:	e1833d86 	orr	r3, r3, r6, lsl #27
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a9ac:	e204401f 	and	r4, r4, #31
 100a9b0:	e1811984 	orr	r1, r1, r4, lsl #19
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 100a9b4:	e20ec01f 	and	ip, lr, #31
 100a9b8:	e183398c 	orr	r3, r3, ip, lsl #19
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 100a9bc:	e1811d85 	orr	r1, r1, r5, lsl #27
	}

	fabcfg_write(FAB_CFG_ACQ_TRAIN_A, train_regA | ACQ_TRAIN_A_LOAD);
 100a9c0:	e3833001 	orr	r3, r3, #1
	_FAB_CFG_ACCESS(reg) = data;
 100a9c4:	e5803064 	str	r3, [r0, #100]	; 0x64
 100a9c8:	e5801068 	str	r1, [r0, #104]	; 0x68
	res = _FAB_CFG_ACCESS(reg);
 100a9cc:	e5923060 	ldr	r3, [r2, #96]	; 0x60
	fabcfg_write(FAB_CFG_ACQ_TRAIN_B, train_regB);

	// Verify "DL" bit is clear
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_C, ACQ_STATUS_C_DELAY_LOADED)) ;
 100a9d0:	e3130a02 	tst	r3, #8192	; 0x2000
 100a9d4:	1afffffc 	bne	100a9cc <acq_write_training+0x8c>
 */
static inline void fabcfg_clear(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;
	//dsb();
	_FAB_CFG_ACCESS(reg) &= ~data;
 100a9d8:	e5923064 	ldr	r3, [r2, #100]	; 0x64
	while(!fabcfg_test(FAB_CFG_ACQ_STATUS_C, ACQ_STATUS_C_DELAY_LOADED)) {
		//outbyte('C');
	}
#endif

	d_printf(D_INFO, "acquire: training values loaded");
 100a9dc:	e3061790 	movw	r1, #26512	; 0x6790
 100a9e0:	e3401106 	movt	r1, #262	; 0x106
 100a9e4:	e3a00002 	mov	r0, #2
}
 100a9e8:	e8bd4070 	pop	{r4, r5, r6, lr}
 100a9ec:	e3c33001 	bic	r3, r3, #1
 100a9f0:	e5823064 	str	r3, [r2, #100]	; 0x64
	d_printf(D_INFO, "acquire: training values loaded");
 100a9f4:	ea000cc1 	b	100dd00 <d_printf>

0100a9f8 <acq_init>:
{
 100a9f8:	e92d4070 	push	{r4, r5, r6, lr}
	g_acq_state.state = ACQSTATE_UNINIT;
 100a9fc:	e30942e0 	movw	r4, #37600	; 0x92e0
 100aa00:	e3404145 	movt	r4, #325	; 0x145
 100aa04:	e3a02000 	mov	r2, #0
 100aa08:	e3a03000 	mov	r3, #0
	g_acq_state.acq_first = NULL;
 100aa0c:	e284cd22 	add	ip, r4, #2176	; 0x880
	g_acq_state.last_debug_timer = 0;
 100aa10:	e2841e81 	add	r1, r4, #2064	; 0x810
	g_acq_state.acq_first = NULL;
 100aa14:	e1cc20f0 	strd	r2, [ip]
	g_acq_state.state = ACQSTATE_UNINIT;
 100aa18:	e1c420f0 	strd	r2, [r4]
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 100aa1c:	e3a00000 	mov	r0, #0
	g_acq_state.last_debug_timer = 0;
 100aa20:	e1c120f0 	strd	r2, [r1]
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 100aa24:	e2845008 	add	r5, r4, #8
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 100aa28:	eb002042 	bl	1012b38 <XAxiDma_LookupConfig>
 100aa2c:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 100aa30:	e1a00005 	mov	r0, r5
 100aa34:	e1a01003 	mov	r1, r3
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 100aa38:	e5843758 	str	r3, [r4, #1880]	; 0x758
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 100aa3c:	eb001e4e 	bl	101237c <XAxiDma_CfgInitialize>
	if(error != XST_SUCCESS) {
 100aa40:	e3500000 	cmp	r0, #0
 100aa44:	1a000046 	bne	100ab64 <acq_init+0x16c>
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 100aa48:	e5943758 	ldr	r3, [r4, #1880]	; 0x758
 100aa4c:	e30617ec 	movw	r1, #26604	; 0x67ec
 100aa50:	e3a00002 	mov	r0, #2
 100aa54:	e3401106 	movt	r1, #262	; 0x106
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 100aa58:	e1a04005 	mov	r4, r5
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 100aa5c:	e5932004 	ldr	r2, [r3, #4]
 100aa60:	eb000ca6 	bl	100dd00 <d_printf>
	XAxiDma_Reset(&g_acq_state.dma);
 100aa64:	e1a00005 	mov	r0, r5
 100aa68:	eb001deb 	bl	101221c <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 100aa6c:	e1a00004 	mov	r0, r4
 100aa70:	eb001e2e 	bl	1012330 <XAxiDma_ResetIsDone>
 100aa74:	e3500000 	cmp	r0, #0
 100aa78:	0afffffb 	beq	100aa6c <acq_init+0x74>
	d_printf(D_INFO, "acquire: DMA reset OK");
 100aa7c:	e3061810 	movw	r1, #26640	; 0x6810
 100aa80:	e3a00002 	mov	r0, #2
 100aa84:	e3401106 	movt	r1, #262	; 0x106
 100aa88:	eb000c9c 	bl	100dd00 <d_printf>
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ, ACQ_DMA_RX_IRQ_PRIO, ACQ_DMA_RX_IRQ_TRIG);
 100aa8c:	e3090b80 	movw	r0, #39808	; 0x9b80
 100aa90:	e3a03003 	mov	r3, #3
 100aa94:	e3400145 	movt	r0, #325	; 0x145
 100aa98:	e3a02040 	mov	r2, #64	; 0x40
 100aa9c:	e3a0103d 	mov	r1, #61	; 0x3d
 100aaa0:	eb002ce0 	bl	1015e28 <XScuGic_SetPriorityTriggerType>
	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ, \
 100aaa4:	e30b2f08 	movw	r2, #48904	; 0xbf08
 100aaa8:	e3090b80 	movw	r0, #39808	; 0x9b80
 100aaac:	e3402100 	movt	r2, #256	; 0x100
 100aab0:	e3400145 	movt	r0, #325	; 0x145
 100aab4:	e59f30fc 	ldr	r3, [pc, #252]	; 100abb8 <acq_init+0x1c0>
 100aab8:	e3a0103d 	mov	r1, #61	; 0x3d
 100aabc:	eb002c38 	bl	1015ba4 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 100aac0:	e2504000 	subs	r4, r0, #0
 100aac4:	1a000034 	bne	100ab9c <acq_init+0x1a4>
	d_printf(D_INFO, "acquire: SCUGIC connected for DMA IRQ");
 100aac8:	e3061868 	movw	r1, #26728	; 0x6868
 100aacc:	e3a00002 	mov	r0, #2
 100aad0:	e3401106 	movt	r1, #262	; 0x106
 100aad4:	eb000c89 	bl	100dd00 <d_printf>
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ, ACQ_FIFO_STALL_IRQ_PRIO, \
 100aad8:	e3090b80 	movw	r0, #39808	; 0x9b80
 100aadc:	e3a03003 	mov	r3, #3
 100aae0:	e3400145 	movt	r0, #325	; 0x145
 100aae4:	e3a02020 	mov	r2, #32
 100aae8:	e3a0103e 	mov	r1, #62	; 0x3e
 100aaec:	eb002ccd 	bl	1015e28 <XScuGic_SetPriorityTriggerType>
	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ, \
 100aaf0:	e30a2648 	movw	r2, #42568	; 0xa648
 100aaf4:	e3090b80 	movw	r0, #39808	; 0x9b80
 100aaf8:	e1a03004 	mov	r3, r4
 100aafc:	e3402100 	movt	r2, #256	; 0x100
 100ab00:	e3400145 	movt	r0, #325	; 0x145
 100ab04:	e3a0103e 	mov	r1, #62	; 0x3e
 100ab08:	eb002c25 	bl	1015ba4 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 100ab0c:	e2504000 	subs	r4, r0, #0
 100ab10:	1a00001a 	bne	100ab80 <acq_init+0x188>
	d_printf(D_INFO, "acquire: SCUGIC connected for FIFO stall IRQ");
 100ab14:	e30618d0 	movw	r1, #26832	; 0x68d0
 100ab18:	e3a00002 	mov	r0, #2
 100ab1c:	e3401106 	movt	r1, #262	; 0x106
 100ab20:	eb000c76 	bl	100dd00 <d_printf>
	XScuGic_Enable(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ);
 100ab24:	e3090b80 	movw	r0, #39808	; 0x9b80
 100ab28:	e3a0103d 	mov	r1, #61	; 0x3d
 100ab2c:	e3400145 	movt	r0, #325	; 0x145
 100ab30:	eb002d72 	bl	1016100 <XScuGic_Enable>
	XScuGic_Enable(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ);
 100ab34:	e3090b80 	movw	r0, #39808	; 0x9b80
 100ab38:	e3a0103e 	mov	r1, #62	; 0x3e
 100ab3c:	e3400145 	movt	r0, #325	; 0x145
 100ab40:	eb002d6e 	bl	1016100 <XScuGic_Enable>
	d_printf(D_INFO, "acquire: SCUGIC configured");
 100ab44:	e3061900 	movw	r1, #26880	; 0x6900
 100ab48:	e3a00002 	mov	r0, #2
 100ab4c:	e3401106 	movt	r1, #262	; 0x106
 100ab50:	eb000c6a 	bl	100dd00 <d_printf>
	for(i = 0; i < 8; i++) {
 100ab54:	e5854890 	str	r4, [r5, #2192]	; 0x890
 100ab58:	e5854894 	str	r4, [r5, #2196]	; 0x894
}
 100ab5c:	e8bd4070 	pop	{r4, r5, r6, lr}
	acq_write_training();
 100ab60:	eaffff76 	b	100a940 <acq_write_training>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
 100ab64:	e30617b0 	movw	r1, #26544	; 0x67b0
 100ab68:	e1a02000 	mov	r2, r0
 100ab6c:	e3401106 	movt	r1, #262	; 0x106
 100ab70:	e3a00004 	mov	r0, #4
 100ab74:	eb000c61 	bl	100dd00 <d_printf>
		exit(-1);
 100ab78:	e3e00000 	mvn	r0, #0
 100ab7c:	fa003e2b 	blx	101a430 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise FIFO stall IRQ! (error=%d)", error);
 100ab80:	e3061890 	movw	r1, #26768	; 0x6890
 100ab84:	e3a00004 	mov	r0, #4
 100ab88:	e1a02004 	mov	r2, r4
 100ab8c:	e3401106 	movt	r1, #262	; 0x106
 100ab90:	eb000c5a 	bl	100dd00 <d_printf>
		exit(-1);
 100ab94:	e3e00000 	mvn	r0, #0
 100ab98:	fa003e24 	blx	101a430 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
 100ab9c:	e3061828 	movw	r1, #26664	; 0x6828
 100aba0:	e3a00004 	mov	r0, #4
 100aba4:	e1a02004 	mov	r2, r4
 100aba8:	e3401106 	movt	r1, #262	; 0x106
 100abac:	eb000c53 	bl	100dd00 <d_printf>
		exit(-1);
 100abb0:	e3e00000 	mvn	r0, #0
 100abb4:	fa003e1d 	blx	101a430 <exit>
 100abb8:	01459368 	.word	0x01459368

0100abbc <acq_get_next_alloc>:
 *
 * If this fails (e.g. no memory) ACQRES_MALLOC_FAIL is returned and values in `next`
 * are left unchanged; otherwise ACQRES_OK is returned.
 */
int acq_get_next_alloc(struct acq_buffer_t *next)
{
 100abbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	/*
	 * Buffer must align with a cache boundary (32 bytes) and end at the end of a cache boundary,
	 * even if the whole size is not used.
	 */
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100abc0:	e30952e0 	movw	r5, #37600	; 0x92e0
 100abc4:	e3405145 	movt	r5, #325	; 0x145
{
 100abc8:	e1a04000 	mov	r4, r0
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100abcc:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100abd0:	e595676c 	ldr	r6, [r5, #1900]	; 0x76c
 100abd4:	e0866000 	add	r6, r6, r0
 100abd8:	e3c6601f 	bic	r6, r6, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100abdc:	e1a01006 	mov	r1, r6
 100abe0:	fa0040b2 	blx	101aeb0 <memalign>

	if(work == NULL) {
 100abe4:	e250e000 	subs	lr, r0, #0
 100abe8:	0a000013 	beq	100ac3c <acq_get_next_alloc+0x80>
	// Both blocks allocated aligned, so both pointers are identical.  TODO: once tested buff_alloc
	// may be removed entirely.
	next->buff_alloc = work;
	next->buff_acq = work;

	g_acq_state.stats.num_alloc_total++;
 100abec:	e59537f0 	ldr	r3, [r5, #2032]	; 0x7f0
	next->idx = 0;
 100abf0:	e3a01000 	mov	r1, #0
	g_acq_state.stats.num_alloc_total++;
 100abf4:	e595c7f4 	ldr	ip, [r5, #2036]	; 0x7f4

	return ACQRES_OK;
 100abf8:	e1a00001 	mov	r0, r1
	next->pre_sz = g_acq_state.pre_buffsz;
 100abfc:	e5956764 	ldr	r6, [r5, #1892]	; 0x764
	next->flags = ACQBUF_FLAG_ALLOC;
 100ac00:	e3a07080 	mov	r7, #128	; 0x80
	g_acq_state.stats.num_alloc_total++;
 100ac04:	e2933001 	adds	r3, r3, #1
	next->idx = 0;
 100ac08:	e5841000 	str	r1, [r4]
	next->trigger_at = 0;
 100ac0c:	e584100c 	str	r1, [r4, #12]
	g_acq_state.stats.num_alloc_total++;
 100ac10:	e0acc001 	adc	ip, ip, r1
	next->next = NULL;
 100ac14:	e584101c 	str	r1, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 100ac18:	e5951768 	ldr	r1, [r5, #1896]	; 0x768
	next->flags = ACQBUF_FLAG_ALLOC;
 100ac1c:	e1c471b0 	strh	r7, [r4, #16]
	next->pre_sz = g_acq_state.pre_buffsz;
 100ac20:	e5846014 	str	r6, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100ac24:	e5841018 	str	r1, [r4, #24]
	next->buff_alloc = work;
 100ac28:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 100ac2c:	e584e008 	str	lr, [r4, #8]
	g_acq_state.stats.num_alloc_total++;
 100ac30:	e58537f0 	str	r3, [r5, #2032]	; 0x7f0
 100ac34:	e585c7f4 	str	ip, [r5, #2036]	; 0x7f4
}
 100ac38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100ac3c:	e306191c 	movw	r1, #26908	; 0x691c
 100ac40:	e1a02006 	mov	r2, r6
 100ac44:	e3401106 	movt	r1, #262	; 0x106
 100ac48:	e3a00004 	mov	r0, #4
 100ac4c:	eb000c2b 	bl	100dd00 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100ac50:	e59537e8 	ldr	r3, [r5, #2024]	; 0x7e8
		return ACQRES_MALLOC_FAIL;
 100ac54:	e3e00000 	mvn	r0, #0
		g_acq_state.stats.num_alloc_err_total++;
 100ac58:	e59527ec 	ldr	r2, [r5, #2028]	; 0x7ec
 100ac5c:	e2855e7f 	add	r5, r5, #2032	; 0x7f0
 100ac60:	e2933001 	adds	r3, r3, #1
 100ac64:	e2a22000 	adc	r2, r2, #0
 100ac68:	e5053008 	str	r3, [r5, #-8]
 100ac6c:	e5052004 	str	r2, [r5, #-4]
		return ACQRES_MALLOC_FAIL;
 100ac70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0100ac74 <acq_append_next_alloc>:
/*
 * Append a new acquisition buffer to the linked list and set the current pointer to reference
 * this acquisition pointer.
 */
int acq_append_next_alloc()
{
 100ac74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct acq_buffer_t *next;
	int res;

	next = malloc(sizeof(struct acq_buffer_t));
 100ac78:	e3a00020 	mov	r0, #32
 100ac7c:	fa0040cd 	blx	101afb8 <malloc>

	/*
	 * Allocate the struct that stores the buffer info first.  This is
	 * just a few bytes, but could fail if we are near the memory limit.
	 */
	if(next == NULL) {
 100ac80:	e2504000 	subs	r4, r0, #0
 100ac84:	0a000039 	beq	100ad70 <acq_append_next_alloc+0xfc>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100ac88:	e30952e0 	movw	r5, #37600	; 0x92e0
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100ac8c:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100ac90:	e3405145 	movt	r5, #325	; 0x145
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for alloc structure", sizeof(struct acq_buffer_t));
		g_acq_state.stats.num_alloc_err_total++;
		return ACQRES_MALLOC_FAIL;
	}

	next->next = NULL;
 100ac94:	e3a06000 	mov	r6, #0
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100ac98:	e595776c 	ldr	r7, [r5, #1900]	; 0x76c
	next->flags = ACQBUF_FLAG_ALLOC;
 100ac9c:	e3a08080 	mov	r8, #128	; 0x80
	next->next = NULL;
 100aca0:	e584601c 	str	r6, [r4, #28]
	next->trigger_at = 0;
 100aca4:	e584600c 	str	r6, [r4, #12]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100aca8:	e0877000 	add	r7, r7, r0
	next->flags = ACQBUF_FLAG_ALLOC;
 100acac:	e1c481b0 	strh	r8, [r4, #16]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100acb0:	e3c7701f 	bic	r7, r7, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100acb4:	e1a01007 	mov	r1, r7
 100acb8:	fa00407c 	blx	101aeb0 <memalign>
	if(work == NULL) {
 100acbc:	e250e000 	subs	lr, r0, #0
 100acc0:	0a000017 	beq	100ad24 <acq_append_next_alloc+0xb0>
	 * Set current acquisition next pointer to this structure, increase the index
	 * to be one higher than the last index then move the current pointer to reference
	 * this structure.
	 */
	//d_printf(D_INFO, "AppNext cur:%08x cur->next:%08x next:%08x", g_acq_state.acq_current, g_acq_state.acq_current->next, next);
	g_acq_state.acq_current->next = next;
 100acc4:	e5957884 	ldr	r7, [r5, #2180]	; 0x884
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
	g_acq_state.acq_current = next;
	g_acq_state.stats.num_alloc_total++;

	return ACQRES_OK;
 100acc8:	e1a00006 	mov	r0, r6
	g_acq_state.stats.num_alloc_total++;
 100accc:	e59517f0 	ldr	r1, [r5, #2032]	; 0x7f0
	next->idx = 0;
 100acd0:	e5846000 	str	r6, [r4]
	g_acq_state.stats.num_alloc_total++;
 100acd4:	e59527f4 	ldr	r2, [r5, #2036]	; 0x7f4
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100acd8:	e5973000 	ldr	r3, [r7]
	g_acq_state.stats.num_alloc_total++;
 100acdc:	e2911002 	adds	r1, r1, #2
	next->trigger_at = 0;
 100ace0:	e584600c 	str	r6, [r4, #12]
	next->flags = ACQBUF_FLAG_ALLOC;
 100ace4:	e1c481b0 	strh	r8, [r4, #16]
	g_acq_state.stats.num_alloc_total++;
 100ace8:	e2a22000 	adc	r2, r2, #0
	next->pre_sz = g_acq_state.pre_buffsz;
 100acec:	e5958764 	ldr	r8, [r5, #1892]	; 0x764
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100acf0:	e2833001 	add	r3, r3, #1
	next->next = NULL;
 100acf4:	e584601c 	str	r6, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 100acf8:	e5956768 	ldr	r6, [r5, #1896]	; 0x768
	next->buff_alloc = work;
 100acfc:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 100ad00:	e584e008 	str	lr, [r4, #8]
	next->pre_sz = g_acq_state.pre_buffsz;
 100ad04:	e5848014 	str	r8, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100ad08:	e5846018 	str	r6, [r4, #24]
	g_acq_state.acq_current->next = next;
 100ad0c:	e587401c 	str	r4, [r7, #28]
	g_acq_state.stats.num_alloc_total++;
 100ad10:	e58517f0 	str	r1, [r5, #2032]	; 0x7f0
 100ad14:	e58527f4 	str	r2, [r5, #2036]	; 0x7f4
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100ad18:	e5843000 	str	r3, [r4]
	g_acq_state.acq_current = next;
 100ad1c:	e5854884 	str	r4, [r5, #2180]	; 0x884
}
 100ad20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100ad24:	e306191c 	movw	r1, #26908	; 0x691c
 100ad28:	e1a02007 	mov	r2, r7
 100ad2c:	e3401106 	movt	r1, #262	; 0x106
 100ad30:	e3a00004 	mov	r0, #4
 100ad34:	eb000bf1 	bl	100dd00 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100ad38:	e59537e8 	ldr	r3, [r5, #2024]	; 0x7e8
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 100ad3c:	e3061990 	movw	r1, #27024	; 0x6990
		g_acq_state.stats.num_alloc_err_total++;
 100ad40:	e595c7ec 	ldr	ip, [r5, #2028]	; 0x7ec
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 100ad44:	e3401106 	movt	r1, #262	; 0x106
 100ad48:	e3e02000 	mvn	r2, #0
 100ad4c:	e3a00004 	mov	r0, #4
		g_acq_state.stats.num_alloc_err_total++;
 100ad50:	e2933001 	adds	r3, r3, #1
 100ad54:	e2855e7f 	add	r5, r5, #2032	; 0x7f0
 100ad58:	e0acc006 	adc	ip, ip, r6
 100ad5c:	e5053008 	str	r3, [r5, #-8]
 100ad60:	e505c004 	str	ip, [r5, #-4]
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 100ad64:	eb000be5 	bl	100dd00 <d_printf>
		return ACQRES_MALLOC_FAIL;
 100ad68:	e3e00000 	mvn	r0, #0
		return res;
 100ad6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for alloc structure", sizeof(struct acq_buffer_t));
 100ad70:	e3061954 	movw	r1, #26964	; 0x6954
 100ad74:	e3a02020 	mov	r2, #32
 100ad78:	e3401106 	movt	r1, #262	; 0x106
 100ad7c:	e3a00004 	mov	r0, #4
 100ad80:	eb000bde 	bl	100dd00 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100ad84:	e59f201c 	ldr	r2, [pc, #28]	; 100ada8 <acq_append_next_alloc+0x134>
 100ad88:	e3e00000 	mvn	r0, #0
 100ad8c:	e5123008 	ldr	r3, [r2, #-8]
 100ad90:	e5121004 	ldr	r1, [r2, #-4]
 100ad94:	e2933001 	adds	r3, r3, #1
 100ad98:	e2a11000 	adc	r1, r1, #0
 100ad9c:	e5023008 	str	r3, [r2, #-8]
 100ada0:	e5021004 	str	r1, [r2, #-4]
		return ACQRES_MALLOC_FAIL;
 100ada4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 100ada8:	01459ad0 	.word	0x01459ad0

0100adac <acq_free_all_alloc_core>:
/*
 * Free all acquisition buffers starting from a pointer.  Recommend disabling
 * interrupts while executing this function.
 */
void acq_free_all_alloc_core(struct acq_buffer_t *list_base)
{
 100adac:	e92d4030 	push	{r4, r5, lr}
	struct acq_buffer_t *next = list_base;
	struct acq_buffer_t *next_next;

	D_ASSERT(list_base != NULL);
 100adb0:	e2504000 	subs	r4, r0, #0
{
 100adb4:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(list_base != NULL);
 100adb8:	0a000008 	beq	100ade0 <acq_free_all_alloc_core+0x34>
	 * a NULL next pointer.
	 */
	while(next != NULL) {
		//d_printf(D_INFO, "FA Ba:%08x n:%08x b:%08x idx:%d nn:%08x fl:%04x", list_base, next, next->buff_alloc, next->idx, next->next, next->flags);

		next_next = next->next;
 100adbc:	e594501c 	ldr	r5, [r4, #28]

		// Free the buffer *and* the acquisition structure
		//d_printf(D_INFO, "free 0x%08x [BA]", next->buff_alloc);
		free(next->buff_alloc);
 100adc0:	e5940004 	ldr	r0, [r4, #4]
 100adc4:	fa00407f 	blx	101afc8 <free>

		//d_printf(D_INFO, "free 0x%08x (N)", next);
		free(next);
 100adc8:	e1a00004 	mov	r0, r4
 100adcc:	fa00407d 	blx	101afc8 <free>
	while(next != NULL) {
 100add0:	e2554000 	subs	r4, r5, #0
 100add4:	1afffff8 	bne	100adbc <acq_free_all_alloc_core+0x10>

		next = next_next;
	}

	//d_printf(D_INFO, "donefree");
}
 100add8:	e28dd00c 	add	sp, sp, #12
 100addc:	e8bd8030 	pop	{r4, r5, pc}
	D_ASSERT(list_base != NULL);
 100ade0:	e30002ff 	movw	r0, #767	; 0x2ff
 100ade4:	e30639c8 	movw	r3, #27080	; 0x69c8
 100ade8:	e30629dc 	movw	r2, #27100	; 0x69dc
 100adec:	e30619f0 	movw	r1, #27120	; 0x69f0
 100adf0:	e58d0000 	str	r0, [sp]
 100adf4:	e3403106 	movt	r3, #262	; 0x106
 100adf8:	e3a00004 	mov	r0, #4
 100adfc:	e3402106 	movt	r2, #262	; 0x106
 100ae00:	e3401106 	movt	r1, #262	; 0x106
 100ae04:	eb000bbd 	bl	100dd00 <d_printf>
 100ae08:	e3e00062 	mvn	r0, #98	; 0x62
 100ae0c:	fa003d87 	blx	101a430 <exit>

0100ae10 <acq_free_all_alloc>:
/*
 * Free all acquisition buffers safely.  Interrupts are inhibited while the lists
 * are freed.
 */
void acq_free_all_alloc(int flags)
{
 100ae10:	e92d4070 	push	{r4, r5, r6, lr}
 100ae14:	e1a06000 	mov	r6, r0
 100ae18:	e24dd008 	sub	sp, sp, #8
	//d_printf(D_INFO, "acq_free_all_alloc");

	GLOBAL_IRQ_DISABLE();
 100ae1c:	f10c0080 	cpsid	i

	if(flags & ACQLIST_ACQ) {
 100ae20:	e3100001 	tst	r0, #1
 100ae24:	1a000004 	bne	100ae3c <acq_free_all_alloc+0x2c>

		g_acq_state.acq_first = NULL;
		g_acq_state.acq_current = NULL;
	}

	if(flags & ACQLIST_DONE) {
 100ae28:	e3160002 	tst	r6, #2
 100ae2c:	1a000014 	bne	100ae84 <acq_free_all_alloc+0x74>

		g_acq_state.acq_done_first = NULL;
		g_acq_state.acq_done_current = NULL;
	}

	GLOBAL_IRQ_ENABLE();
 100ae30:	f1080080 	cpsie	i

	//d_printf(D_INFO, "END acq_free_all_alloc");
}
 100ae34:	e28dd008 	add	sp, sp, #8
 100ae38:	e8bd8070 	pop	{r4, r5, r6, pc}
		acq_free_all_alloc_core(g_acq_state.acq_first);
 100ae3c:	e30932e0 	movw	r3, #37600	; 0x92e0
 100ae40:	e3403145 	movt	r3, #325	; 0x145
 100ae44:	e5934880 	ldr	r4, [r3, #2176]	; 0x880
	D_ASSERT(list_base != NULL);
 100ae48:	e3540000 	cmp	r4, #0
 100ae4c:	0a00001f 	beq	100aed0 <acq_free_all_alloc+0xc0>
		next_next = next->next;
 100ae50:	e594501c 	ldr	r5, [r4, #28]
		free(next->buff_alloc);
 100ae54:	e5940004 	ldr	r0, [r4, #4]
 100ae58:	fa00405a 	blx	101afc8 <free>
		free(next);
 100ae5c:	e1a00004 	mov	r0, r4
 100ae60:	fa004058 	blx	101afc8 <free>
	while(next != NULL) {
 100ae64:	e2554000 	subs	r4, r5, #0
 100ae68:	1afffff8 	bne	100ae50 <acq_free_all_alloc+0x40>
		g_acq_state.acq_first = NULL;
 100ae6c:	e59f308c 	ldr	r3, [pc, #140]	; 100af00 <acq_free_all_alloc+0xf0>
	if(flags & ACQLIST_DONE) {
 100ae70:	e3160002 	tst	r6, #2
		g_acq_state.acq_first = NULL;
 100ae74:	e3a00000 	mov	r0, #0
 100ae78:	e3a01000 	mov	r1, #0
 100ae7c:	e1c300f0 	strd	r0, [r3]
	if(flags & ACQLIST_DONE) {
 100ae80:	0affffea 	beq	100ae30 <acq_free_all_alloc+0x20>
		acq_free_all_alloc_core(g_acq_state.acq_done_first);
 100ae84:	e30932e0 	movw	r3, #37600	; 0x92e0
 100ae88:	e3403145 	movt	r3, #325	; 0x145
 100ae8c:	e5934888 	ldr	r4, [r3, #2184]	; 0x888
	D_ASSERT(list_base != NULL);
 100ae90:	e3540000 	cmp	r4, #0
 100ae94:	0a00000d 	beq	100aed0 <acq_free_all_alloc+0xc0>
		next_next = next->next;
 100ae98:	e594501c 	ldr	r5, [r4, #28]
		free(next->buff_alloc);
 100ae9c:	e5940004 	ldr	r0, [r4, #4]
 100aea0:	fa004048 	blx	101afc8 <free>
		free(next);
 100aea4:	e1a00004 	mov	r0, r4
 100aea8:	fa004046 	blx	101afc8 <free>
	while(next != NULL) {
 100aeac:	e2554000 	subs	r4, r5, #0
 100aeb0:	1afffff8 	bne	100ae98 <acq_free_all_alloc+0x88>
		g_acq_state.acq_done_first = NULL;
 100aeb4:	e59f3048 	ldr	r3, [pc, #72]	; 100af04 <acq_free_all_alloc+0xf4>
 100aeb8:	e3a00000 	mov	r0, #0
 100aebc:	e3a01000 	mov	r1, #0
 100aec0:	e14300f8 	strd	r0, [r3, #-8]
	GLOBAL_IRQ_ENABLE();
 100aec4:	f1080080 	cpsie	i
}
 100aec8:	e28dd008 	add	sp, sp, #8
 100aecc:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(list_base != NULL);
 100aed0:	e30002ff 	movw	r0, #767	; 0x2ff
 100aed4:	e30639c8 	movw	r3, #27080	; 0x69c8
 100aed8:	e30629dc 	movw	r2, #27100	; 0x69dc
 100aedc:	e30619f0 	movw	r1, #27120	; 0x69f0
 100aee0:	e58d0000 	str	r0, [sp]
 100aee4:	e3403106 	movt	r3, #262	; 0x106
 100aee8:	e3a00004 	mov	r0, #4
 100aeec:	e3402106 	movt	r2, #262	; 0x106
 100aef0:	e3401106 	movt	r1, #262	; 0x106
 100aef4:	eb000b81 	bl	100dd00 <d_printf>
 100aef8:	e3e00062 	mvn	r0, #98	; 0x62
 100aefc:	fa003d4b 	blx	101a430 <exit>
 100af00:	01459b60 	.word	0x01459b60
 100af04:	01459b70 	.word	0x01459b70

0100af08 <acq_rewind>:
 *
 * Only the currently active acquisition buffer is rewound.
 */
void acq_rewind()
{
	struct acq_buffer_t *next = g_acq_state.acq_first;
 100af08:	e30912e0 	movw	r1, #37600	; 0x92e0
 100af0c:	e3401145 	movt	r1, #325	; 0x145
 100af10:	e5913880 	ldr	r3, [r1, #2176]	; 0x880

	//d_printf(D_INFO, "Start Rewind");

	// Disable interrupts while we process this as we're altering the linked list
	GLOBAL_IRQ_DISABLE();
 100af14:	f10c0080 	cpsid	i

	/*
	 * Iterate through the list of allocations starting at the first allocation,
	 * clearing the flags and trigger position.
	 */
	while(next != NULL) {
 100af18:	e3530000 	cmp	r3, #0
 100af1c:	0a000009 	beq	100af48 <acq_rewind+0x40>
 100af20:	e3a0cd06 	mov	ip, #384	; 0x180
 100af24:	e3a00080 	mov	r0, #128	; 0x80
		//d_printf(D_INFO, "RW %08x %d %08x %04x", next, next->idx, next->next, next->flags);

		if(next->flags & ACQBUF_FLAG_PKT_DONE) {
 100af28:	e1d321b0 	ldrh	r2, [r3, #16]
 100af2c:	e2122001 	ands	r2, r2, #1
 100af30:	1a00000a 	bne	100af60 <acq_rewind+0x58>
			next->flags = ACQBUF_FLAG_READY_CSI | ACQBUF_FLAG_ALLOC;
		} else {
			next->flags = ACQBUF_FLAG_ALLOC;
			next->trigger_at = 0;
 100af34:	e583200c 	str	r2, [r3, #12]
 100af38:	e1c301b0 	strh	r0, [r3, #16]
		}

		next = next->next;
 100af3c:	e593301c 	ldr	r3, [r3, #28]
	while(next != NULL) {
 100af40:	e3530000 	cmp	r3, #0
 100af44:	1afffff7 	bne	100af28 <acq_rewind+0x20>
	}

	g_acq_state.acq_current = g_acq_state.acq_first;
 100af48:	e5913880 	ldr	r3, [r1, #2176]	; 0x880
	g_acq_state.num_acq_made = 0; // Reset wave counter
 100af4c:	e3a02000 	mov	r2, #0
 100af50:	e5812778 	str	r2, [r1, #1912]	; 0x778
	g_acq_state.acq_current = g_acq_state.acq_first;
 100af54:	e5813884 	str	r3, [r1, #2180]	; 0x884

	GLOBAL_IRQ_ENABLE();
 100af58:	f1080080 	cpsie	i

	//d_printf(D_INFO, "Done Rewind");
}
 100af5c:	e12fff1e 	bx	lr
 100af60:	e1c3c1b0 	strh	ip, [r3, #16]
		next = next->next;
 100af64:	e593301c 	ldr	r3, [r3, #28]
	while(next != NULL) {
 100af68:	e3530000 	cmp	r3, #0
 100af6c:	1affffed 	bne	100af28 <acq_rewind+0x20>
 100af70:	eafffff4 	b	100af48 <acq_rewind+0x40>

0100af74 <acq_swap>:
 * as required.
 *
 * Interrupts are disabled while this process runs.
 */
void acq_swap()
{
 100af74:	e92d4010 	push	{r4, lr}
 100af78:	e24dd008 	sub	sp, sp, #8
	struct acq_buffer_t *temp_first, *temp_current;

	GLOBAL_IRQ_DISABLE();
 100af7c:	f10c0080 	cpsid	i

	D_ASSERT(!(g_acq_state.control & ACQCTRL_FLAG_NO_SWAP));
 100af80:	e30932e0 	movw	r3, #37600	; 0x92e0
 100af84:	e300175e 	movw	r1, #1886	; 0x75e
 100af88:	e3403145 	movt	r3, #325	; 0x145
 100af8c:	e19320b1 	ldrh	r2, [r3, r1]
 100af90:	e3120004 	tst	r2, #4
 100af94:	1a000015 	bne	100aff0 <acq_swap+0x7c>
	D_ASSERT((g_acq_state.control & (ACQCTRL_FLAG_LIST_A_ACQ | ACQCTRL_FLAG_LIST_B_ACQ)));
 100af98:	e3120003 	tst	r2, #3
 100af9c:	0a00001f 	beq	100b020 <acq_swap+0xac>

	if(g_acq_state.control & ACQCTRL_FLAG_LIST_A_ACQ) {
 100afa0:	e3120001 	tst	r2, #1
 100afa4:	1a00000e 	bne	100afe4 <acq_swap+0x70>
		g_acq_state.acq_current = g_acq_state.acq_done_current;
		g_acq_state.acq_done_first = temp_first;
		g_acq_state.acq_done_current = temp_current;

		g_acq_state.control = ACQCTRL_FLAG_LIST_B_ACQ;
	} else if(g_acq_state.control & ACQCTRL_FLAG_LIST_B_ACQ) {
 100afa8:	e3120002 	tst	r2, #2
 100afac:	0a000009 	beq	100afd8 <acq_swap+0x64>
		temp_first = g_acq_state.acq_done_first;
 100afb0:	e5934880 	ldr	r4, [r3, #2176]	; 0x880
		g_acq_state.acq_done_first = g_acq_state.acq_first;
		g_acq_state.acq_done_current = g_acq_state.acq_current;
		g_acq_state.acq_first = temp_first;
		g_acq_state.acq_current = temp_current;

		g_acq_state.control = ACQCTRL_FLAG_LIST_A_ACQ;
 100afb4:	e3a02001 	mov	r2, #1
		g_acq_state.acq_first = temp_first;
 100afb8:	e593e888 	ldr	lr, [r3, #2184]	; 0x888
		temp_first = g_acq_state.acq_done_first;
 100afbc:	e593c884 	ldr	ip, [r3, #2180]	; 0x884
 100afc0:	e593088c 	ldr	r0, [r3, #2188]	; 0x88c
		g_acq_state.acq_first = temp_first;
 100afc4:	e5834888 	str	r4, [r3, #2184]	; 0x888
 100afc8:	e583e880 	str	lr, [r3, #2176]	; 0x880
 100afcc:	e583c88c 	str	ip, [r3, #2188]	; 0x88c
 100afd0:	e5830884 	str	r0, [r3, #2180]	; 0x884
		g_acq_state.control = ACQCTRL_FLAG_LIST_A_ACQ;
 100afd4:	e18320b1 	strh	r2, [r3, r1]
	}

	GLOBAL_IRQ_ENABLE();
 100afd8:	f1080080 	cpsie	i
}
 100afdc:	e28dd008 	add	sp, sp, #8
 100afe0:	e8bd8010 	pop	{r4, pc}
		g_acq_state.acq_first = g_acq_state.acq_done_first;
 100afe4:	e5934880 	ldr	r4, [r3, #2176]	; 0x880
		g_acq_state.control = ACQCTRL_FLAG_LIST_B_ACQ;
 100afe8:	e3a02002 	mov	r2, #2
 100afec:	eafffff1 	b	100afb8 <acq_swap+0x44>
	D_ASSERT(!(g_acq_state.control & ACQCTRL_FLAG_NO_SWAP));
 100aff0:	e30639c8 	movw	r3, #27080	; 0x69c8
 100aff4:	e3062a1c 	movw	r2, #27164	; 0x6a1c
 100aff8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100affc:	e3403106 	movt	r3, #262	; 0x106
 100b000:	e3402106 	movt	r2, #262	; 0x106
 100b004:	e3a00fdd 	mov	r0, #884	; 0x374
 100b008:	e58d0000 	str	r0, [sp]
	D_ASSERT((g_acq_state.control & (ACQCTRL_FLAG_LIST_A_ACQ | ACQCTRL_FLAG_LIST_B_ACQ)));
 100b00c:	e3a00004 	mov	r0, #4
 100b010:	e3401106 	movt	r1, #262	; 0x106
 100b014:	eb000b39 	bl	100dd00 <d_printf>
 100b018:	e3e00062 	mvn	r0, #98	; 0x62
 100b01c:	fa003d03 	blx	101a430 <exit>
 100b020:	e3000375 	movw	r0, #885	; 0x375
 100b024:	e30639c8 	movw	r3, #27080	; 0x69c8
 100b028:	e3062a4c 	movw	r2, #27212	; 0x6a4c
 100b02c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100b030:	e58d0000 	str	r0, [sp]
 100b034:	e3403106 	movt	r3, #262	; 0x106
 100b038:	e3402106 	movt	r2, #262	; 0x106
 100b03c:	eafffff2 	b	100b00c <acq_swap+0x98>

0100b040 <acq_prepare_triggered>:
	uint32_t align_mask;
	uint32_t demux;
	int i, error;

	// How can we acquire an empty buffer of no waveforms?
	if(COND_UNLIKELY(num_acq == 0 || pre_sz == 0 || post_sz == 0)) {
 100b040:	e3510000 	cmp	r1, #0
 100b044:	e16fcf12 	clz	ip, r2
 100b048:	e1a0c2ac 	lsr	ip, ip, #5
 100b04c:	03a0c001 	moveq	ip, #1
 100b050:	e3530000 	cmp	r3, #0
 100b054:	03a0c001 	moveq	ip, #1
{
 100b058:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(COND_UNLIKELY(num_acq == 0 || pre_sz == 0 || post_sz == 0)) {
 100b05c:	e35c0000 	cmp	ip, #0
{
 100b060:	e24dd014 	sub	sp, sp, #20
	if(COND_UNLIKELY(num_acq == 0 || pre_sz == 0 || post_sz == 0)) {
 100b064:	1a0000af 	bne	100b328 <acq_prepare_triggered+0x2e8>
		d_printf(D_ERROR, "acquire: zero buffer/zero wavecount");
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 8-bit, 12-bit or 14-bit set
	if(COND_UNLIKELY(!(mode_flags & (ACQ_MODE_8BIT | ACQ_MODE_12BIT | ACQ_MODE_14BIT)))) {
 100b068:	e3100007 	tst	r0, #7
 100b06c:	e1a05000 	mov	r5, r0
 100b070:	0a0000f0 	beq	100b438 <acq_prepare_triggered+0x3f8>
		d_printf(D_ERROR, "acquire: bit-depth not provided");
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 1ch, 2ch or 4ch set
	if(COND_UNLIKELY(!(mode_flags & (ACQ_MODE_1CH | ACQ_MODE_2CH | ACQ_MODE_4CH)))) {
 100b074:	e31000e0 	tst	r0, #224	; 0xe0
 100b078:	0a000101 	beq	100b484 <acq_prepare_triggered+0x444>
		d_printf(D_ERROR, "acquire: channel mode not provided");
		return ACQRES_PARAM_FAIL;
	}

	// Must not have "CONTINUOUS" or "TRIGGERED" set
	if(COND_UNLIKELY(mode_flags & (ACQ_MODE_TRIGGERED | ACQ_MODE_CONTINUOUS))) {
 100b07c:	e3100c03 	tst	r0, #768	; 0x300
 100b080:	1a000105 	bne	100b49c <acq_prepare_triggered+0x45c>
		return ACQRES_PARAM_FAIL;
	}

	error = 0;

	if(mode_flags & ACQ_MODE_8BIT) {
 100b084:	e2157001 	ands	r7, r5, #1
 100b088:	e1a00001 	mov	r0, r1
 100b08c:	e1a06003 	mov	r6, r3
 100b090:	0a000061 	beq	100b21c <acq_prepare_triggered+0x1dc>
		align_mask = ACQ_SAMPLES_ALIGN_8B_AMOD;
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_8B;
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_8B;
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b094:	e181c002 	orr	ip, r1, r2
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_8B;
 100b098:	e1a081a2 	lsr	r8, r2, #3
 100b09c:	e21cc007 	ands	ip, ip, #7
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_8B;
 100b0a0:	e1a011a1 	lsr	r1, r1, #3
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b0a4:	13a0c001 	movne	ip, #1
		align_mask = ACQ_SAMPLES_ALIGN_8B_AMOD;
 100b0a8:	e3a0e007 	mov	lr, #7
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_PR;
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_PR;
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
	}

	if(COND_UNLIKELY(pre_sz < ACQ_MIN_PREPOST_SIZE || post_sz < ACQ_MIN_PREPOST_SIZE)) {
 100b0ac:	e3520007 	cmp	r2, #7
 100b0b0:	83500007 	cmphi	r0, #7
 100b0b4:	93a03001 	movls	r3, #1
 100b0b8:	83a03000 	movhi	r3, #0
		error |= 1;
	}

	if(COND_UNLIKELY(error)) {
 100b0bc:	e19c3003 	orrs	r3, ip, r3
 100b0c0:	1a0000fb 	bne	100b4b4 <acq_prepare_triggered+0x474>
		//post_sz *= 8;
		//pre_sz *= 8;
	}
#endif

	g_acq_state.pre_buffsz = pre_sz;
 100b0c4:	e30942e0 	movw	r4, #37600	; 0x92e0
	g_acq_state.post_buffsz = post_sz;
	g_acq_state.pre_sampct = pre_sampct;
	g_acq_state.post_sampct = post_sampct;
	g_acq_state.total_buffsz = pre_sz + post_sz;
 100b0c8:	e0803002 	add	r3, r0, r2
	g_acq_state.pre_buffsz = pre_sz;
 100b0cc:	e3404145 	movt	r4, #325	; 0x145

	// If the acquisition is small, set a flag indicating this which will trigger a FIFO reset mode
	// to maximise performance
	if(g_acq_state.total_buffsz <= ACQ_SHORT_THRESHOLD) {
 100b0d0:	e3530a02 	cmp	r3, #8192	; 0x2000
	g_acq_state.total_buffsz = pre_sz + post_sz;
 100b0d4:	e584376c 	str	r3, [r4, #1900]	; 0x76c
	/*
	 * Ensure that the total acquisition size doesn't exceed the available memory.  If
	 * that's OK, then free any existing buffers and allocate the memory blocks.  Include an
	 * allocation penalty in our size calculation.
	 */
	total_acq_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) * num_acq;
 100b0d8:	e2833020 	add	r3, r3, #32
 100b0dc:	e0030396 	mul	r3, r6, r3
		mode_flags |= ACQ_MODE_SHORT_WITH_RESET;
 100b0e0:	93855b01 	orrls	r5, r5, #1024	; 0x400

	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b0e4:	e215ab02 	ands	sl, r5, #2048	; 0x800
	g_acq_state.pre_buffsz = pre_sz;
 100b0e8:	e5840764 	str	r0, [r4, #1892]	; 0x764
	g_acq_state.post_buffsz = post_sz;
 100b0ec:	e5842768 	str	r2, [r4, #1896]	; 0x768
	g_acq_state.pre_sampct = pre_sampct;
 100b0f0:	e5841788 	str	r1, [r4, #1928]	; 0x788
		total_acq_sz *= 2; // Double memory allocation required for two buffers
 100b0f4:	11a03083 	lslne	r3, r3, #1
	g_acq_state.post_sampct = post_sampct;
 100b0f8:	e584878c 	str	r8, [r4, #1932]	; 0x78c
	}

	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 100b0fc:	e3530303 	cmp	r3, #201326592	; 0xc000000
 100b100:	8a00011b 	bhi	100b574 <acq_prepare_triggered+0x534>
	 * If both lists pointers are identical (unified lists in use), only free once.
	 * If the list pointers differ, then free both (distinct lists in use)
	 *
	 * XXX: Perhaps there's a better/saner way of doing this?
	 */
	if(g_acq_state.acq_first == g_acq_state.acq_done_first) {
 100b104:	e5942880 	ldr	r2, [r4, #2176]	; 0x880
	g_acq_state.state = ACQSTATE_UNINIT;
 100b108:	e3a01000 	mov	r1, #0
	if(g_acq_state.acq_first == g_acq_state.acq_done_first) {
 100b10c:	e5943888 	ldr	r3, [r4, #2184]	; 0x888
	g_acq_state.state = ACQSTATE_UNINIT;
 100b110:	e5841000 	str	r1, [r4]
	if(g_acq_state.acq_first == g_acq_state.acq_done_first) {
 100b114:	e1520003 	cmp	r2, r3
 100b118:	0a00008a 	beq	100b348 <acq_prepare_triggered+0x308>
		}

		g_acq_state.acq_done_first = NULL;
		g_acq_state.acq_first = NULL;
	} else {
		if(g_acq_state.acq_first != NULL) {
 100b11c:	e3520000 	cmp	r2, #0
 100b120:	0a000002 	beq	100b130 <acq_prepare_triggered+0xf0>
			acq_free_all_alloc(ACQLIST_ACQ);
 100b124:	e3a00001 	mov	r0, #1
 100b128:	ebffff38 	bl	100ae10 <acq_free_all_alloc>
 100b12c:	e5943888 	ldr	r3, [r4, #2184]	; 0x888
		}

		if(g_acq_state.acq_done_first != NULL) {
 100b130:	e3530000 	cmp	r3, #0
 100b134:	0a000001 	beq	100b140 <acq_prepare_triggered+0x100>
			acq_free_all_alloc(ACQLIST_DONE);
 100b138:	e3a00002 	mov	r0, #2
 100b13c:	ebffff33 	bl	100ae10 <acq_free_all_alloc>
		}
	}

	first_a = malloc(sizeof(struct acq_buffer_t));
 100b140:	e3a00020 	mov	r0, #32
 100b144:	fa003f9b 	blx	101afb8 <malloc>

	if(first_a == NULL) {
 100b148:	e2508000 	subs	r8, r0, #0
 100b14c:	0a00010a 	beq	100b57c <acq_prepare_triggered+0x53c>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b150:	e594976c 	ldr	r9, [r4, #1900]	; 0x76c
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b154:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b158:	e0899000 	add	r9, r9, r0
 100b15c:	e3c9901f 	bic	r9, r9, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b160:	e1a01009 	mov	r1, r9
 100b164:	fa003f51 	blx	101aeb0 <memalign>
	if(work == NULL) {
 100b168:	e3500000 	cmp	r0, #0
 100b16c:	0a00009e 	beq	100b3ec <acq_prepare_triggered+0x3ac>
	g_acq_state.stats.num_alloc_total++;
 100b170:	e59f943c 	ldr	r9, [pc, #1084]	; 100b5b4 <acq_prepare_triggered+0x574>
	next->idx = 0;
 100b174:	e3a0b000 	mov	fp, #0
	next->pre_sz = g_acq_state.pre_buffsz;
 100b178:	e594e764 	ldr	lr, [r4, #1892]	; 0x764
	next->flags = ACQBUF_FLAG_ALLOC;
 100b17c:	e3a02080 	mov	r2, #128	; 0x80
	next->post_sz = g_acq_state.post_buffsz;
 100b180:	e594c768 	ldr	ip, [r4, #1896]	; 0x768
	g_acq_state.stats.num_alloc_total++;
 100b184:	e5993000 	ldr	r3, [r9]
 100b188:	e5991004 	ldr	r1, [r9, #4]
	next->buff_alloc = work;
 100b18c:	e5880004 	str	r0, [r8, #4]
	g_acq_state.stats.num_alloc_total++;
 100b190:	e2933001 	adds	r3, r3, #1
	next->buff_acq = work;
 100b194:	e5880008 	str	r0, [r8, #8]
	g_acq_state.stats.num_alloc_total++;
 100b198:	e0a1100b 	adc	r1, r1, fp
	g_acq_state.acq_A_first = first_a;

	/*
	 * If we support swapping, allocate a second linked list.
	 */
	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b19c:	e15a000b 	cmp	sl, fp
	g_acq_state.acq_first = first_a;
 100b1a0:	e5848880 	str	r8, [r4, #2176]	; 0x880
 100b1a4:	e5848884 	str	r8, [r4, #2180]	; 0x884
	g_acq_state.acq_A_first = first_a;
 100b1a8:	e5848890 	str	r8, [r4, #2192]	; 0x890
	g_acq_state.stats.num_alloc_total++;
 100b1ac:	e5893000 	str	r3, [r9]
 100b1b0:	e5891004 	str	r1, [r9, #4]
	next->pre_sz = g_acq_state.pre_buffsz;
 100b1b4:	e588e014 	str	lr, [r8, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100b1b8:	e588c018 	str	ip, [r8, #24]
	next->idx = 0;
 100b1bc:	e588b000 	str	fp, [r8]
	next->trigger_at = 0;
 100b1c0:	e588b00c 	str	fp, [r8, #12]
	next->next = NULL;
 100b1c4:	e588b01c 	str	fp, [r8, #28]
	next->flags = ACQBUF_FLAG_ALLOC;
 100b1c8:	e1c821b0 	strh	r2, [r8, #16]
	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b1cc:	1a000065 	bne	100b368 <acq_prepare_triggered+0x328>
	uint32_t pre_sampct = 0, post_sampct = 0;
 100b1d0:	e3a08000 	mov	r8, #0
 100b1d4:	ea000002 	b	100b1e4 <acq_prepare_triggered+0x1a4>
	 * Allocate all subsequent blocks on start up.  We can't allocate these in the IRQ. Then set
	 * the current pointer back to the first so that we start acquiring from that wave buffer.
	 *
	 * If at any point this fails, bail out and free memory.
	 */
	for(i = 0; i < num_acq; i++) {
 100b1d8:	e2888001 	add	r8, r8, #1
 100b1dc:	e1560008 	cmp	r6, r8
 100b1e0:	9a000018 	bls	100b248 <acq_prepare_triggered+0x208>
		error = acq_append_next_alloc();
 100b1e4:	ebfffea2 	bl	100ac74 <acq_append_next_alloc>
		if(error != ACQRES_OK) {
 100b1e8:	e2509000 	subs	r9, r0, #0
 100b1ec:	0afffff9 	beq	100b1d8 <acq_prepare_triggered+0x198>
			d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d [A], aborting allocation", error, i);
 100b1f0:	e3061cd0 	movw	r1, #27856	; 0x6cd0
 100b1f4:	e3a00004 	mov	r0, #4
 100b1f8:	e1a03008 	mov	r3, r8
 100b1fc:	e3401106 	movt	r1, #262	; 0x106
 100b200:	e1a02009 	mov	r2, r9
 100b204:	eb000abd 	bl	100dd00 <d_printf>
			acq_free_all_alloc(ACQLIST_ACQ);
 100b208:	e3a00001 	mov	r0, #1
 100b20c:	ebfffeff 	bl	100ae10 <acq_free_all_alloc>

	g_acq_state.demux_reg = demux;
	//fabcfg_write(FAB_CFG_ACQ_DEMUX_MODE, demux);

	return ACQRES_OK;
}
 100b210:	e1a00009 	mov	r0, r9
 100b214:	e28dd014 	add	sp, sp, #20
 100b218:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 100b21c:	e3150006 	tst	r5, #6
	uint32_t pre_sampct = 0, post_sampct = 0;
 100b220:	01a08007 	moveq	r8, r7
 100b224:	01a01007 	moveq	r1, r7
	} else if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 100b228:	0affff9f 	beq	100b0ac <acq_prepare_triggered+0x6c>
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b22c:	e180c002 	orr	ip, r0, r2
		pre_sampct = pre_sz / ACQ_SAMPLES_ALIGN_PR;
 100b230:	e1a01120 	lsr	r1, r0, #2
		post_sampct = post_sz / ACQ_SAMPLES_ALIGN_PR;
 100b234:	e21cc003 	ands	ip, ip, #3
 100b238:	e1a08122 	lsr	r8, r2, #2
		error |= (post_sz & align_mask) | (pre_sz & align_mask);
 100b23c:	13a0c001 	movne	ip, #1
		align_mask = ACQ_SAMPLES_ALIGN_PR_AMOD;
 100b240:	e3a0e003 	mov	lr, #3
 100b244:	eaffff98 	b	100b0ac <acq_prepare_triggered+0x6c>
	if(mode_flags & ACQ_MODE_SUPPORT_SWAPPING) {
 100b248:	e35a0000 	cmp	sl, #0
 100b24c:	0a000014 	beq	100b2a4 <acq_prepare_triggered+0x264>
		g_acq_state.acq_current = g_acq_state.acq_B_first;
 100b250:	e5943894 	ldr	r3, [r4, #2196]	; 0x894
		for(i = 0; i < num_acq; i++) {
 100b254:	e1a08009 	mov	r8, r9
		g_acq_state.acq_first = g_acq_state.acq_B_first;
 100b258:	e5843880 	str	r3, [r4, #2176]	; 0x880
 100b25c:	e5843884 	str	r3, [r4, #2180]	; 0x884
		for(i = 0; i < num_acq; i++) {
 100b260:	ea000002 	b	100b270 <acq_prepare_triggered+0x230>
 100b264:	e2888001 	add	r8, r8, #1
 100b268:	e1560008 	cmp	r6, r8
 100b26c:	9a000099 	bls	100b4d8 <acq_prepare_triggered+0x498>
			error = acq_append_next_alloc();
 100b270:	ebfffe7f 	bl	100ac74 <acq_append_next_alloc>
			if(error != ACQRES_OK) {
 100b274:	e3500000 	cmp	r0, #0
 100b278:	0afffff9 	beq	100b264 <acq_prepare_triggered+0x224>
				d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d [A], aborting allocation", error, i);
 100b27c:	e3061cd0 	movw	r1, #27856	; 0x6cd0
 100b280:	e1a02000 	mov	r2, r0
 100b284:	e1a03008 	mov	r3, r8
 100b288:	e3401106 	movt	r1, #262	; 0x106
 100b28c:	e3a00004 	mov	r0, #4
			error = acq_append_next_alloc();
 100b290:	e1a09002 	mov	r9, r2
				d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d [A], aborting allocation", error, i);
 100b294:	eb000a99 	bl	100dd00 <d_printf>
				acq_free_all_alloc(ACQLIST_ACQ); // param ACQLIST_ACQ is correct as we have temporarily swapped the list pointers
 100b298:	e3a00001 	mov	r0, #1
 100b29c:	ebfffedb 	bl	100ae10 <acq_free_all_alloc>
				return error;
 100b2a0:	eaffffda 	b	100b210 <acq_prepare_triggered+0x1d0>
		g_acq_state.acq_current = g_acq_state.acq_first;
 100b2a4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
		g_acq_state.control = ACQCTRL_FLAG_NO_SWAP;
 100b2a8:	e300275e 	movw	r2, #1886	; 0x75e
 100b2ac:	e3a01004 	mov	r1, #4
 100b2b0:	e18410b2 	strh	r1, [r4, r2]
		g_acq_state.acq_current = g_acq_state.acq_first;
 100b2b4:	e5843884 	str	r3, [r4, #2180]	; 0x884
		g_acq_state.acq_done_first = g_acq_state.acq_first;
 100b2b8:	e5843888 	str	r3, [r4, #2184]	; 0x888
		g_acq_state.acq_done_current = g_acq_state.acq_first;
 100b2bc:	e584388c 	str	r3, [r4, #2188]	; 0x88c
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 100b2c0:	e5943788 	ldr	r3, [r4, #1928]	; 0x788
	g_acq_state.num_acq_made = 0;
 100b2c4:	e3a02000 	mov	r2, #0
	_FAB_CFG_ACCESS(reg) = data;
 100b2c8:	e3a01000 	mov	r1, #0
	g_acq_state.num_acq_request = num_acq;
 100b2cc:	e5846774 	str	r6, [r4, #1908]	; 0x774
	g_acq_state.num_acq_made = 0;
 100b2d0:	e5842778 	str	r2, [r4, #1912]	; 0x778
 100b2d4:	e34413c0 	movt	r1, #17344	; 0x43c0
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 100b2d8:	e2433001 	sub	r3, r3, #1
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 100b2dc:	e300075c 	movw	r0, #1884	; 0x75c
 100b2e0:	e3852c01 	orr	r2, r5, #256	; 0x100
	if(mode_flags & ACQ_MODE_8BIT) {
 100b2e4:	e3570000 	cmp	r7, #0
	g_acq_state.state = ACQSTATE_STOPPED;
 100b2e8:	e3a06001 	mov	r6, #1
 100b2ec:	e3a07000 	mov	r7, #0
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 100b2f0:	e18420b0 	strh	r2, [r4, r0]
	g_acq_state.state = ACQSTATE_STOPPED;
 100b2f4:	e1c460f0 	strd	r6, [r4]
 100b2f8:	e5813040 	str	r3, [r1, #64]	; 0x40
	fabcfg_write(FAB_CFG_ACQ_SIZE_B, g_acq_state.post_sampct - 1);
 100b2fc:	e594378c 	ldr	r3, [r4, #1932]	; 0x78c
 100b300:	e2433001 	sub	r3, r3, #1
 100b304:	e5813044 	str	r3, [r1, #68]	; 0x44
	if(mode_flags & ACQ_MODE_8BIT) {
 100b308:	1a000050 	bne	100b450 <acq_prepare_triggered+0x410>
	} else if(mode_flags & ACQ_MODE_12BIT) {
 100b30c:	e3150002 	tst	r5, #2
 100b310:	0a000077 	beq	100b4f4 <acq_prepare_triggered+0x4b4>
 100b314:	e3a01014 	mov	r1, #20
 100b318:	e3a02012 	mov	r2, #18
 100b31c:	e3a03011 	mov	r3, #17
		demux |= ADCDEMUX_12BIT;
 100b320:	e3a00010 	mov	r0, #16
 100b324:	ea00004d 	b	100b460 <acq_prepare_triggered+0x420>
		d_printf(D_ERROR, "acquire: zero buffer/zero wavecount");
 100b328:	e3061a98 	movw	r1, #27288	; 0x6a98
 100b32c:	e3a00004 	mov	r0, #4
 100b330:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b334:	e3e09002 	mvn	r9, #2
		d_printf(D_ERROR, "acquire: zero buffer/zero wavecount");
 100b338:	eb000a70 	bl	100dd00 <d_printf>
}
 100b33c:	e1a00009 	mov	r0, r9
 100b340:	e28dd014 	add	sp, sp, #20
 100b344:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(g_acq_state.acq_first != NULL) {
 100b348:	e1520001 	cmp	r2, r1
 100b34c:	0a000001 	beq	100b358 <acq_prepare_triggered+0x318>
			acq_free_all_alloc(ACQLIST_ACQ);
 100b350:	e3a00001 	mov	r0, #1
 100b354:	ebfffead 	bl	100ae10 <acq_free_all_alloc>
		g_acq_state.acq_done_first = NULL;
 100b358:	e3a03000 	mov	r3, #0
 100b35c:	e5843888 	str	r3, [r4, #2184]	; 0x888
		g_acq_state.acq_first = NULL;
 100b360:	e5843880 	str	r3, [r4, #2176]	; 0x880
 100b364:	eaffff75 	b	100b140 <acq_prepare_triggered+0x100>
		first_b = malloc(sizeof(struct acq_buffer_t));
 100b368:	e3a00020 	mov	r0, #32
 100b36c:	fa003f11 	blx	101afb8 <malloc>
		if(first_b == NULL) {
 100b370:	e2508000 	subs	r8, r0, #0
 100b374:	0a000087 	beq	100b598 <acq_prepare_triggered+0x558>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b378:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b37c:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100b380:	e0833000 	add	r3, r3, r0
 100b384:	e3c3301f 	bic	r3, r3, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100b388:	e1a01003 	mov	r1, r3
 100b38c:	e58d300c 	str	r3, [sp, #12]
 100b390:	fa003ec6 	blx	101aeb0 <memalign>
	if(work == NULL) {
 100b394:	e3500000 	cmp	r0, #0
 100b398:	e59d300c 	ldr	r3, [sp, #12]
 100b39c:	e3a02080 	mov	r2, #128	; 0x80
 100b3a0:	0a000062 	beq	100b530 <acq_prepare_triggered+0x4f0>
	g_acq_state.stats.num_alloc_total++;
 100b3a4:	e899000a 	ldm	r9, {r1, r3}
	next->flags = ACQBUF_FLAG_ALLOC;
 100b3a8:	e1c821b0 	strh	r2, [r8, #16]
	next->pre_sz = g_acq_state.pre_buffsz;
 100b3ac:	e594c764 	ldr	ip, [r4, #1892]	; 0x764
	next->post_sz = g_acq_state.post_buffsz;
 100b3b0:	e5942768 	ldr	r2, [r4, #1896]	; 0x768
	g_acq_state.stats.num_alloc_total++;
 100b3b4:	e2911001 	adds	r1, r1, #1
 100b3b8:	e2a33000 	adc	r3, r3, #0
	next->idx = 0;
 100b3bc:	e588b000 	str	fp, [r8]
	next->trigger_at = 0;
 100b3c0:	e588b00c 	str	fp, [r8, #12]
	next->next = NULL;
 100b3c4:	e588b01c 	str	fp, [r8, #28]
	next->buff_alloc = work;
 100b3c8:	e5880004 	str	r0, [r8, #4]
	next->buff_acq = work;
 100b3cc:	e5880008 	str	r0, [r8, #8]
		g_acq_state.acq_done_first = first_b;
 100b3d0:	e5848888 	str	r8, [r4, #2184]	; 0x888
 100b3d4:	e584888c 	str	r8, [r4, #2188]	; 0x88c
		g_acq_state.acq_B_first = first_b;
 100b3d8:	e5848894 	str	r8, [r4, #2196]	; 0x894
	g_acq_state.stats.num_alloc_total++;
 100b3dc:	e889000a 	stm	r9, {r1, r3}
	next->pre_sz = g_acq_state.pre_buffsz;
 100b3e0:	e588c014 	str	ip, [r8, #20]
	next->post_sz = g_acq_state.post_buffsz;
 100b3e4:	e5882018 	str	r2, [r8, #24]
		g_acq_state.acq_B_first = first_b;
 100b3e8:	eaffff78 	b	100b1d0 <acq_prepare_triggered+0x190>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100b3ec:	e306191c 	movw	r1, #26908	; 0x691c
 100b3f0:	e1a02009 	mov	r2, r9
 100b3f4:	e3401106 	movt	r1, #262	; 0x106
 100b3f8:	e3a00004 	mov	r0, #4
 100b3fc:	eb000a3f 	bl	100dd00 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100b400:	e59fc1ac 	ldr	ip, [pc, #428]	; 100b5b4 <acq_prepare_triggered+0x574>
		d_printf(D_ERROR, "acquire: unable to get allocation for first-A buffer: error %d", error);
 100b404:	e3e02000 	mvn	r2, #0
 100b408:	e3061c08 	movw	r1, #27656	; 0x6c08
		return ACQRES_MALLOC_FAIL;
 100b40c:	e1a09002 	mov	r9, r2
		d_printf(D_ERROR, "acquire: unable to get allocation for first-A buffer: error %d", error);
 100b410:	e3401106 	movt	r1, #262	; 0x106
 100b414:	e3a00004 	mov	r0, #4
		g_acq_state.stats.num_alloc_err_total++;
 100b418:	e91c4008 	ldmdb	ip, {r3, lr}
 100b41c:	e2933001 	adds	r3, r3, #1
 100b420:	e2aee000 	adc	lr, lr, #0
 100b424:	e90c4008 	stmdb	ip, {r3, lr}
		d_printf(D_ERROR, "acquire: unable to get allocation for first-A buffer: error %d", error);
 100b428:	eb000a34 	bl	100dd00 <d_printf>
}
 100b42c:	e1a00009 	mov	r0, r9
 100b430:	e28dd014 	add	sp, sp, #20
 100b434:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_printf(D_ERROR, "acquire: bit-depth not provided");
 100b438:	e3061abc 	movw	r1, #27324	; 0x6abc
 100b43c:	e3a00004 	mov	r0, #4
 100b440:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b444:	e3e09002 	mvn	r9, #2
		d_printf(D_ERROR, "acquire: bit-depth not provided");
 100b448:	eb000a2c 	bl	100dd00 <d_printf>
		return ACQRES_PARAM_FAIL;
 100b44c:	eaffff6f 	b	100b210 <acq_prepare_triggered+0x1d0>
 100b450:	e3a0100c 	mov	r1, #12
 100b454:	e3a0200a 	mov	r2, #10
 100b458:	e3a03009 	mov	r3, #9
		demux |= ADCDEMUX_8BIT;
 100b45c:	e3a00008 	mov	r0, #8
	if(mode_flags & ACQ_MODE_1CH) {
 100b460:	e3150020 	tst	r5, #32
 100b464:	1a000002 	bne	100b474 <acq_prepare_triggered+0x434>
	} else if(mode_flags & ACQ_MODE_2CH) {
 100b468:	e3150040 	tst	r5, #64	; 0x40
		demux |= ADCDEMUX_2CH;
 100b46c:	11a03002 	movne	r3, r2
	} else if(mode_flags & ACQ_MODE_2CH) {
 100b470:	0a00002a 	beq	100b520 <acq_prepare_triggered+0x4e0>
}
 100b474:	e1a00009 	mov	r0, r9
	g_acq_state.demux_reg = demux;
 100b478:	e5843790 	str	r3, [r4, #1936]	; 0x790
}
 100b47c:	e28dd014 	add	sp, sp, #20
 100b480:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_printf(D_ERROR, "acquire: channel mode not provided");
 100b484:	e3061adc 	movw	r1, #27356	; 0x6adc
 100b488:	e3a00004 	mov	r0, #4
 100b48c:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b490:	e3e09002 	mvn	r9, #2
		d_printf(D_ERROR, "acquire: channel mode not provided");
 100b494:	eb000a19 	bl	100dd00 <d_printf>
		return ACQRES_PARAM_FAIL;
 100b498:	eaffff5c 	b	100b210 <acq_prepare_triggered+0x1d0>
		d_printf(D_ERROR, "acquire: triggered or continuous flag set (both bits must be clear)");
 100b49c:	e3061b00 	movw	r1, #27392	; 0x6b00
 100b4a0:	e3a00004 	mov	r0, #4
 100b4a4:	e3401106 	movt	r1, #262	; 0x106
		return ACQRES_PARAM_FAIL;
 100b4a8:	e3e09002 	mvn	r9, #2
		d_printf(D_ERROR, "acquire: triggered or continuous flag set (both bits must be clear)");
 100b4ac:	eb000a13 	bl	100dd00 <d_printf>
		return ACQRES_PARAM_FAIL;
 100b4b0:	eaffff56 	b	100b210 <acq_prepare_triggered+0x1d0>
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d req_align_mask=0x%08x)", \
 100b4b4:	e3061b44 	movw	r1, #27460	; 0x6b44
 100b4b8:	e1a03002 	mov	r3, r2
 100b4bc:	e58de000 	str	lr, [sp]
 100b4c0:	e1a02000 	mov	r2, r0
 100b4c4:	e3401106 	movt	r1, #262	; 0x106
 100b4c8:	e3a00004 	mov	r0, #4
 100b4cc:	eb000a0b 	bl	100dd00 <d_printf>
		return ACQRES_ALIGN_FAIL;
 100b4d0:	e3e09001 	mvn	r9, #1
 100b4d4:	eaffff4d 	b	100b210 <acq_prepare_triggered+0x1d0>
		g_acq_state.acq_current = g_acq_state.acq_A_first;
 100b4d8:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
		g_acq_state.control = ACQCTRL_FLAG_LIST_A_ACQ;
 100b4dc:	e300275e 	movw	r2, #1886	; 0x75e
 100b4e0:	e3a01001 	mov	r1, #1
 100b4e4:	e18410b2 	strh	r1, [r4, r2]
		g_acq_state.acq_first = g_acq_state.acq_A_first;
 100b4e8:	e5843880 	str	r3, [r4, #2176]	; 0x880
 100b4ec:	e5843884 	str	r3, [r4, #2180]	; 0x884
		g_acq_state.control = ACQCTRL_FLAG_LIST_A_ACQ;
 100b4f0:	eaffff72 	b	100b2c0 <acq_prepare_triggered+0x280>
	} else if(mode_flags & ACQ_MODE_14BIT) {
 100b4f4:	e2053004 	and	r3, r5, #4
 100b4f8:	e3530000 	cmp	r3, #0
 100b4fc:	03a01004 	moveq	r1, #4
 100b500:	13a01024 	movne	r1, #36	; 0x24
 100b504:	03a02002 	moveq	r2, #2
 100b508:	13a02022 	movne	r2, #34	; 0x22
 100b50c:	03a03001 	moveq	r3, #1
 100b510:	13a03021 	movne	r3, #33	; 0x21
 100b514:	03a00000 	moveq	r0, #0
 100b518:	13a00020 	movne	r0, #32
 100b51c:	eaffffcf 	b	100b460 <acq_prepare_triggered+0x420>
		demux |= ADCDEMUX_4CH;
 100b520:	e3150080 	tst	r5, #128	; 0x80
 100b524:	01a03000 	moveq	r3, r0
 100b528:	11a03001 	movne	r3, r1
 100b52c:	eaffffd0 	b	100b474 <acq_prepare_triggered+0x434>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100b530:	e306191c 	movw	r1, #26908	; 0x691c
 100b534:	e1a02003 	mov	r2, r3
 100b538:	e3401106 	movt	r1, #262	; 0x106
 100b53c:	e3a00004 	mov	r0, #4
 100b540:	eb0009ee 	bl	100dd00 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100b544:	e5193008 	ldr	r3, [r9, #-8]
			d_printf(D_ERROR, "acquire: unable to get allocation for first-B buffer: error %d", error);
 100b548:	e3061c90 	movw	r1, #27792	; 0x6c90
		g_acq_state.stats.num_alloc_err_total++;
 100b54c:	e519c004 	ldr	ip, [r9, #-4]
			d_printf(D_ERROR, "acquire: unable to get allocation for first-B buffer: error %d", error);
 100b550:	e3e02000 	mvn	r2, #0
 100b554:	e3401106 	movt	r1, #262	; 0x106
 100b558:	e3a00004 	mov	r0, #4
		g_acq_state.stats.num_alloc_err_total++;
 100b55c:	e2933001 	adds	r3, r3, #1
 100b560:	e2acc000 	adc	ip, ip, #0
 100b564:	e9091008 	stmdb	r9, {r3, ip}
		return ACQRES_MALLOC_FAIL;
 100b568:	e1a09002 	mov	r9, r2
			d_printf(D_ERROR, "acquire: unable to get allocation for first-B buffer: error %d", error);
 100b56c:	eb0009e3 	bl	100dd00 <d_printf>
			return error;
 100b570:	eaffff26 	b	100b210 <acq_prepare_triggered+0x1d0>
		return ACQRES_TOTAL_MALLOC_FAIL;
 100b574:	e3e09003 	mvn	r9, #3
 100b578:	eaffff24 	b	100b210 <acq_prepare_triggered+0x1d0>
		d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first-A entry in acquisition", sizeof(struct acq_buffer_t));
 100b57c:	e3061bc0 	movw	r1, #27584	; 0x6bc0
 100b580:	e3a02020 	mov	r2, #32
 100b584:	e3401106 	movt	r1, #262	; 0x106
 100b588:	e3a00004 	mov	r0, #4
 100b58c:	eb0009db 	bl	100dd00 <d_printf>
		return ACQRES_MALLOC_FAIL;
 100b590:	e3e09000 	mvn	r9, #0
 100b594:	eaffff1d 	b	100b210 <acq_prepare_triggered+0x1d0>
			d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first-B entry in acquisition", sizeof(struct acq_buffer_t));
 100b598:	e3061c48 	movw	r1, #27720	; 0x6c48
 100b59c:	e3a02020 	mov	r2, #32
 100b5a0:	e3401106 	movt	r1, #262	; 0x106
 100b5a4:	e3a00004 	mov	r0, #4
 100b5a8:	eb0009d4 	bl	100dd00 <d_printf>
			return ACQRES_MALLOC_FAIL;
 100b5ac:	e3e09000 	mvn	r9, #0
 100b5b0:	eaffff16 	b	100b210 <acq_prepare_triggered+0x1d0>
 100b5b4:	01459ad0 	.word	0x01459ad0

0100b5b8 <acq_start>:
 * 			ACQRES_NOT_IMPLEMENTED if the mode is not presently supported;
 * 			ACQRES_DMA_FAIL if DMA task could not be started;
 * 			ACQRES_OK if acquisition task started successfully.
 */
int acq_start(int reset_fifo)
{
 100b5b8:	e92d4070 	push	{r4, r5, r6, lr}
	int error;

	//d_printf(D_INFO, "acquire: starts");

	if(COND_UNLIKELY(g_acq_state.state == ACQSTATE_UNINIT)) {
 100b5bc:	e30942e0 	movw	r4, #37600	; 0x92e0
 100b5c0:	e3404145 	movt	r4, #325	; 0x145
 100b5c4:	e5943000 	ldr	r3, [r4]
 100b5c8:	e3530000 	cmp	r3, #0
 100b5cc:	0a00003c 	beq	100b6c4 <acq_start+0x10c>
	if(!(g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE)) {
		return ACQRES_NOT_STOPPED;
	}
#endif

	if(g_acq_state.acq_mode_flags & ACQ_MODE_TRIGGERED) {
 100b5d0:	e300375c 	movw	r3, #1884	; 0x75c
 100b5d4:	e19420b3 	ldrh	r2, [r4, r3]
 100b5d8:	e3120c01 	tst	r2, #256	; 0x100
 100b5dc:	0a00003e 	beq	100b6dc <acq_start+0x124>
		XAxiDma_Reset(&g_acq_state.dma);
 100b5e0:	e1a05000 	mov	r5, r0
 100b5e4:	e2840008 	add	r0, r4, #8
 100b5e8:	eb001b0b 	bl	101221c <XAxiDma_Reset>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100b5ec:	e5942008 	ldr	r2, [r4, #8]

		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 100b5f0:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
 100b5f4:	e5923030 	ldr	r3, [r2, #48]	; 0x30
 100b5f8:	e5910008 	ldr	r0, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 100b5fc:	e3833a07 	orr	r3, r3, #28672	; 0x7000
	*LocalAddr = Value;
 100b600:	e5823030 	str	r3, [r2, #48]	; 0x30
		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 100b604:	e594176c 	ldr	r1, [r4, #1900]	; 0x76c
 100b608:	eb0030cd 	bl	1017944 <Xil_DCacheFlushRange>
		dsb();
 100b60c:	f57ff04f 	dsb	sy

		//d_printf(D_INFO, "acquire: %d bytes", g_acq_state.pre_buffsz);
		error = _acq_core_dma_start((uint32_t)g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100b610:	e5941884 	ldr	r1, [r4, #2180]	; 0x884
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 100b614:	e2840008 	add	r0, r4, #8
 100b618:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 100b61c:	e3a03001 	mov	r3, #1
 100b620:	e5911008 	ldr	r1, [r1, #8]
 100b624:	eb001cd8 	bl	101298c <XAxiDma_SimpleTransfer>
	if(error != XST_SUCCESS) {
 100b628:	e3500000 	cmp	r0, #0
 100b62c:	1a000030 	bne	100b6f4 <acq_start+0x13c>
			return ACQRES_DMA_FAIL;
		}

		// Ensure we clear the overrun flag as this is a new packet.  If this is not cleared
		// we cannot recover from overrun.
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b630:	e5942884 	ldr	r2, [r4, #2180]	; 0x884
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;

		// Start on 'A' mux: pre-trigger
		_acq_clear_ctrl_a(ACQ_CTRL_A_DEPTH_MUX | ACQ_CTRL_A_ABORT | ACQ_CTRL_A_END_EARLY | ACQ_CTRL_A_POST_TRIG_MODE);

		if(reset_fifo == ACQ_START_FIFO_RESET) {
 100b634:	e3550001 	cmp	r5, #1
	return *(volatile u32 *) Addr;
 100b638:	e5943088 	ldr	r3, [r4, #136]	; 0x88
 100b63c:	e3a0e000 	mov	lr, #0
 100b640:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
 100b644:	e344e3c0 	movt	lr, #17344	; 0x43c0
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b648:	e1d2c1b0 	ldrh	ip, [r2, #16]
		g_acq_state.state = ACQSTATE_PREP;
 100b64c:	e3a05002 	mov	r5, #2
 100b650:	e5933000 	ldr	r3, [r3]
 100b654:	e5845000 	str	r5, [r4]
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b658:	e3ccc002 	bic	ip, ip, #2
	g_acq_state.dmacr_state = XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_CR_OFFSET);
 100b65c:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100b660:	e3c13b82 	bic	r3, r1, #133120	; 0x20800
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100b664:	e1c2c1b0 	strh	ip, [r2, #16]
 100b668:	e3c33050 	bic	r3, r3, #80	; 0x50
		g_acq_state.acq_early_abort = 0;
 100b66c:	e5d42760 	ldrb	r2, [r4, #1888]	; 0x760
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;
 100b670:	e3a0c001 	mov	ip, #1
 100b674:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100b678:	e584c004 	str	ip, [r4, #4]
		g_acq_state.acq_early_abort = 0;
 100b67c:	e7c02010 	bfi	r2, r0, #0, #1
 100b680:	e5c42760 	strb	r2, [r4, #1888]	; 0x760
 100b684:	e58e3050 	str	r3, [lr, #80]	; 0x50
		if(reset_fifo == ACQ_START_FIFO_RESET) {
 100b688:	1a000005 	bne	100b6a4 <acq_start+0xec>
	g_acq_state.acq_ctrl_a |= bitmask;
 100b68c:	e3c11b82 	bic	r1, r1, #133120	; 0x20800
 100b690:	e3833020 	orr	r3, r3, #32
 100b694:	e3c11070 	bic	r1, r1, #112	; 0x70
 100b698:	e58e3050 	str	r3, [lr, #80]	; 0x50
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100b69c:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100b6a0:	e58e1050 	str	r1, [lr, #80]	; 0x50
	g_acq_state.acq_ctrl_a |= bitmask;
 100b6a4:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100b6a8:	e3a02000 	mov	r2, #0
 100b6ac:	e34423c0 	movt	r2, #17344	; 0x43c0
 100b6b0:	e3833f41 	orr	r3, r3, #260	; 0x104
 100b6b4:	e3833003 	orr	r3, r3, #3
 100b6b8:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100b6bc:	e5823050 	str	r3, [r2, #80]	; 0x50
		//_acq_reset_trigger();

		// Start the transaction: initially with triggers masked and not in POST_TRIG mode
		_acq_set_ctrl_a(ACQ_CTRL_A_DATA_VALID | ACQ_CTRL_A_RUN | ACQ_CTRL_A_TRIG_MASK | ACQ_CTRL_A_AXI_RUN);

		return ACQRES_OK;
 100b6c0:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "ACQSTATE_UNINIT");
 100b6c4:	e3061d18 	movw	r1, #27928	; 0x6d18
 100b6c8:	e3a00004 	mov	r0, #4
 100b6cc:	e3401106 	movt	r1, #262	; 0x106
 100b6d0:	eb00098a 	bl	100dd00 <d_printf>
		return ACQRES_NOT_INITIALISED;
 100b6d4:	e3e00005 	mvn	r0, #5
 100b6d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	} else {
		d_printf(D_ERROR, "acquire: mode unsupported (0x%08x)", g_acq_state.acq_mode_flags);
 100b6dc:	e3061d50 	movw	r1, #27984	; 0x6d50
 100b6e0:	e3a00004 	mov	r0, #4
 100b6e4:	e3401106 	movt	r1, #262	; 0x106
 100b6e8:	eb000984 	bl	100dd00 <d_printf>
		return ACQRES_NOT_IMPLEMENTED;
 100b6ec:	e3e00006 	mvn	r0, #6
	}
}
 100b6f0:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: unable to start DMA core, error %d", error);
 100b6f4:	e3061698 	movw	r1, #26264	; 0x6698
 100b6f8:	e1a02000 	mov	r2, r0
 100b6fc:	e3401106 	movt	r1, #262	; 0x106
 100b700:	e3a00004 	mov	r0, #4
 100b704:	eb00097d 	bl	100dd00 <d_printf>
			d_printf(D_ERROR, "acquire: unable to start DMA, error %d", error);
 100b708:	e3061d28 	movw	r1, #27944	; 0x6d28
 100b70c:	e3e02004 	mvn	r2, #4
 100b710:	e3401106 	movt	r1, #262	; 0x106
 100b714:	e3a00004 	mov	r0, #4
 100b718:	eb000978 	bl	100dd00 <d_printf>
			return ACQRES_DMA_FAIL;
 100b71c:	e3e00004 	mvn	r0, #4
 100b720:	e8bd8070 	pop	{r4, r5, r6, pc}

0100b724 <acq_stop>:
 * @return	ACQRES_NOT_RUNNING if the acquisition is already stopped;
 * 			ACQRES_OK if stop signal sent.
 */
int acq_stop()
{
	if(g_acq_state.state == ACQSTATE_STOPPED) {
 100b724:	e30932e0 	movw	r3, #37600	; 0x92e0
 100b728:	e3403145 	movt	r3, #325	; 0x145
 100b72c:	e5932000 	ldr	r2, [r3]
 100b730:	e3520001 	cmp	r2, #1
 100b734:	0a00000f 	beq	100b778 <acq_stop+0x54>
		d_printf(D_ERROR, "acquire: acquisition already stopped");
		return ACQRES_NOT_RUNNING;
	}

	GLOBAL_IRQ_DISABLE();
 100b738:	f10c0080 	cpsid	i
	g_acq_state.acq_abort_done = 0;
	g_acq_state.acq_early_abort = 1;
 100b73c:	e5d32760 	ldrb	r2, [r3, #1888]	; 0x760
 100b740:	e3a00000 	mov	r0, #0
 100b744:	e5931780 	ldr	r1, [r3, #1920]	; 0x780
 100b748:	e34403c0 	movt	r0, #17344	; 0x43c0
	g_acq_state.num_acq_made_done = g_acq_state.num_acq_made;
 100b74c:	e593c778 	ldr	ip, [r3, #1912]	; 0x778
	g_acq_state.acq_early_abort = 1;
 100b750:	e3c22003 	bic	r2, r2, #3
 100b754:	e3811b02 	orr	r1, r1, #2048	; 0x800
 100b758:	e3822001 	orr	r2, r2, #1
 100b75c:	e5c32760 	strb	r2, [r3, #1888]	; 0x760
	g_acq_state.num_acq_made_done = g_acq_state.num_acq_made;
 100b760:	e583c77c 	str	ip, [r3, #1916]	; 0x77c
 100b764:	e5831780 	str	r1, [r3, #1920]	; 0x780
 100b768:	e5801050 	str	r1, [r0, #80]	; 0x50
	_acq_set_ctrl_a(ACQ_CTRL_A_END_EARLY);
	GLOBAL_IRQ_ENABLE();
 100b76c:	f1080080 	cpsie	i

	return ACQRES_OK;
 100b770:	e3a00000 	mov	r0, #0
}
 100b774:	e12fff1e 	bx	lr
		d_printf(D_ERROR, "acquire: acquisition already stopped");
 100b778:	e3061d74 	movw	r1, #28020	; 0x6d74
{
 100b77c:	e92d4010 	push	{r4, lr}
		d_printf(D_ERROR, "acquire: acquisition already stopped");
 100b780:	e3a00004 	mov	r0, #4
 100b784:	e3401106 	movt	r1, #262	; 0x106
 100b788:	eb00095c 	bl	100dd00 <d_printf>
		return ACQRES_NOT_RUNNING;
 100b78c:	e3e00008 	mvn	r0, #8
}
 100b790:	e8bd8010 	pop	{r4, pc}

0100b794 <acq_abort_done>:
 * present if a hold off is programmed, because that hold off needs to be stopped
 * first.
 */
bool acq_abort_done()
{
	if(g_acq_state.acq_abort_done) {
 100b794:	e30922e0 	movw	r2, #37600	; 0x92e0
 100b798:	e3402145 	movt	r2, #325	; 0x145
 100b79c:	e5d23760 	ldrb	r3, [r2, #1888]	; 0x760
 100b7a0:	e2130002 	ands	r0, r3, #2
		g_acq_state.acq_abort_done = 0;
 100b7a4:	17c1309f 	bfcne	r3, #1, #1
		return 1;
 100b7a8:	13a00001 	movne	r0, #1
		g_acq_state.acq_abort_done = 0;
 100b7ac:	15c23760 	strbne	r3, [r2, #1888]	; 0x760
	}

	return 0;
}
 100b7b0:	e12fff1e 	bx	lr

0100b7b4 <acq_is_done>:
/*
 * Returns TRUE if the requested acquisition is complete.
 */
bool acq_is_done()
{
	return (g_acq_state.state == ACQSTATE_DONE);
 100b7b4:	e30932e0 	movw	r3, #37600	; 0x92e0
 100b7b8:	e3403145 	movt	r3, #325	; 0x145
 100b7bc:	e5930000 	ldr	r0, [r3]
}
 100b7c0:	e2400005 	sub	r0, r0, #5
 100b7c4:	e16f0f10 	clz	r0, r0
 100b7c8:	e1a002a0 	lsr	r0, r0, #5
 100b7cc:	e12fff1e 	bx	lr

0100b7d0 <acq_make_status>:
void acq_make_status(struct acq_status_resp_t *status_resp)
{
	int trig_res;

	status_resp->flags = 0;
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b7d0:	e30922e0 	movw	r2, #37600	; 0x92e0
{
 100b7d4:	e92d4010 	push	{r4, lr}
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b7d8:	e3402145 	movt	r2, #325	; 0x145
{
 100b7dc:	e1a04000 	mov	r4, r0
	status_resp->flags = 0;
 100b7e0:	e3a00000 	mov	r0, #0

	if(g_acq_state.state == ACQSTATE_UNINIT || g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE) {
 100b7e4:	e5921000 	ldr	r1, [r2]
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b7e8:	e5923778 	ldr	r3, [r2, #1912]	; 0x778
	status_resp->flags = 0;
 100b7ec:	e5c40004 	strb	r0, [r4, #4]
	if(g_acq_state.state == ACQSTATE_UNINIT || g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE) {
 100b7f0:	e3510005 	cmp	r1, #5
 100b7f4:	13510001 	cmpne	r1, #1
	status_resp->flags = 0;
 100b7f8:	e5c40005 	strb	r0, [r4, #5]
	status_resp->waves_done = g_acq_state.num_acq_made;
 100b7fc:	e5843000 	str	r3, [r4]
	if(g_acq_state.state == ACQSTATE_UNINIT || g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE) {
 100b800:	83a01002 	movhi	r1, #2
 100b804:	8a000005 	bhi	100b820 <acq_make_status+0x50>
		status_resp->flags |= ACQSTA_STOPPED;
	}

	if(g_acq_state.state == ACQSTATE_DONE) {
 100b808:	e3510005 	cmp	r1, #5
		status_resp->flags |= ACQSTA_STOPPED;
 100b80c:	13a01022 	movne	r1, #34	; 0x22
		status_resp->flags |= ACQSTA_DONE;
 100b810:	03a01023 	moveq	r1, #35	; 0x23
		status_resp->flags |= ACQSTA_STOPPED;
 100b814:	13a00020 	movne	r0, #32
		status_resp->flags |= ACQSTA_DONE;
 100b818:	03a00021 	moveq	r0, #33	; 0x21
 100b81c:	e5c40004 	strb	r0, [r4, #4]
	}

	if(g_acq_state.num_acq_made == g_acq_state.num_acq_request && g_acq_state.num_acq_request > 0) {
 100b820:	e5922774 	ldr	r2, [r2, #1908]	; 0x774
 100b824:	e0433002 	sub	r3, r3, r2
 100b828:	e3520000 	cmp	r2, #0
 100b82c:	e16f3f13 	clz	r3, r3
 100b830:	e1a032a3 	lsr	r3, r3, #5
 100b834:	03a03000 	moveq	r3, #0
 100b838:	e3530000 	cmp	r3, #0
		status_resp->flags |= ACQSTA_ALL_REQUESTED;
 100b83c:	11c410b4 	strhne	r1, [r4, #4]
	}

	trig_res = trig_has_trigd();
 100b840:	eb001a55 	bl	101219c <trig_has_trigd>

	if(trig_res == TRIG_STATUS_TRIGD) {
 100b844:	e3500001 	cmp	r0, #1
 100b848:	0a000004 	beq	100b860 <acq_make_status+0x90>
		status_resp->flags |= ACQSTA_TRIGD_NORMAL;
	} else if(trig_res == TRIG_STATUS_AUTO) {
 100b84c:	e3500002 	cmp	r0, #2
		status_resp->flags |= ACQSTA_TRIGD_AUTO;
 100b850:	01d430b4 	ldrheq	r3, [r4, #4]
 100b854:	03833008 	orreq	r3, r3, #8
 100b858:	01c430b4 	strheq	r3, [r4, #4]
	}
}
 100b85c:	e8bd8010 	pop	{r4, pc}
		status_resp->flags |= ACQSTA_TRIGD_NORMAL;
 100b860:	e1d430b4 	ldrh	r3, [r4, #4]
 100b864:	e3833004 	orr	r3, r3, #4
 100b868:	e1c430b4 	strh	r3, [r4, #4]
 100b86c:	e8bd8010 	pop	{r4, pc}

0100b870 <acq_debug_dump>:

/*
 * Dump state of acquire engine for debugging purposes.
 */
void acq_debug_dump()
{
 100b870:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t sample_delta;
	uint32_t msb, lsb;
	float time_delta_us, acq_rate = NAN, sample_rate = NAN;

	// Calculate acquisition rate if last debug timer is set
	if(g_acq_state.last_debug_timer != 0) {
 100b874:	e30942e0 	movw	r4, #37600	; 0x92e0
 100b878:	e3404145 	movt	r4, #325	; 0x145
{
 100b87c:	ed2d8b02 	vpush	{d8}
	if(g_acq_state.last_debug_timer != 0) {
 100b880:	e2847e81 	add	r7, r4, #2064	; 0x810
{
 100b884:	e24dde77 	sub	sp, sp, #1904	; 0x770
	if(g_acq_state.last_debug_timer != 0) {
 100b888:	e1c720d0 	ldrd	r2, [r7]
{
 100b88c:	e24dd00c 	sub	sp, sp, #12
	void *sp = NULL;  // approximately the stack
 100b890:	e3a05000 	mov	r5, #0
 100b894:	e58d576c 	str	r5, [sp, #1900]	; 0x76c
	if(g_acq_state.last_debug_timer != 0) {
 100b898:	e1923003 	orrs	r3, r2, r3
 100b89c:	1a000134 	bne	100bd74 <acq_debug_dump+0x504>
 100b8a0:	e284ae7b 	add	sl, r4, #1968	; 0x7b0
 100b8a4:	e2849e7e 	add	r9, r4, #2016	; 0x7e0
 100b8a8:	e58d5748 	str	r5, [sp, #1864]	; 0x748
 100b8ac:	e58d5754 	str	r5, [sp, #1876]	; 0x754
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
			}
		}
	}

	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **   ", &g_acq_state);
 100b8b0:	e30922e0 	movw	r2, #37600	; 0x92e0
 100b8b4:	e3061d9c 	movw	r1, #28060	; 0x6d9c
 100b8b8:	e3402145 	movt	r2, #325	; 0x145
 100b8bc:	e3401106 	movt	r1, #262	; 0x106
 100b8c0:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x                  ", g_acq_state.acq_mode_flags);
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100b8c4:	e30a548c 	movw	r5, #42124	; 0xa48c
	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **   ", &g_acq_state);
 100b8c8:	eb00090c 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100b8cc:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100b8d0:	e3a00002 	mov	r0, #2
 100b8d4:	e3401106 	movt	r1, #262	; 0x106
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100b8d8:	e3405106 	movt	r5, #262	; 0x106
	d_printf(D_INFO, "                                                ");
 100b8dc:	eb000907 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
 100b8e0:	e28d2e76 	add	r2, sp, #1888	; 0x760
 100b8e4:	e3061e04 	movw	r1, #28164	; 0x6e04
 100b8e8:	e282200c 	add	r2, r2, #12
 100b8ec:	e3401106 	movt	r1, #262	; 0x106
 100b8f0:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "sub_state             = %d [%s]                 ", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
	d_printf(D_INFO, "acq_current           = 0x%08x                  ", g_acq_state.acq_current);
	d_printf(D_INFO, "acq_first             = 0x%08x                  ", g_acq_state.acq_first);
	d_printf(D_INFO, "acq_done_current      = 0x%08x                  ", g_acq_state.acq_done_current);
	d_printf(D_INFO, "acq_done_first        = 0x%08x                  ", g_acq_state.acq_done_first);
	d_printf(D_INFO, "dma                   = 0x%08x                  ", g_acq_state.dma);
 100b8f4:	e59f8604 	ldr	r8, [pc, #1540]	; 100bf00 <acq_debug_dump+0x690>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
 100b8f8:	eb000900 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100b8fc:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100b900:	e3a00002 	mov	r0, #2
 100b904:	e3401106 	movt	r1, #262	; 0x106
	res = _FAB_CFG_ACCESS(reg);
 100b908:	e3a06000 	mov	r6, #0
 100b90c:	eb0008fb 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x                  ", g_acq_state.acq_mode_flags);
 100b910:	e300375c 	movw	r3, #1884	; 0x75c
 100b914:	e3061e38 	movw	r1, #28216	; 0x6e38
 100b918:	e19420b3 	ldrh	r2, [r4, r3]
 100b91c:	e3401106 	movt	r1, #262	; 0x106
 100b920:	e3a00002 	mov	r0, #2
 100b924:	e34463c0 	movt	r6, #17344	; 0x43c0
 100b928:	eb0008f4 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100b92c:	e5942000 	ldr	r2, [r4]
 100b930:	e3061e6c 	movw	r1, #28268	; 0x6e6c
 100b934:	e3401106 	movt	r1, #262	; 0x106
 100b938:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "acq_current->flags    = 0x%04x                  ", g_acq_state.acq_current->flags);
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)             ", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "s.num_acq_total       = %llu                    ", g_acq_state.stats.num_acq_total);
	d_printf(D_INFO, "s.num_alloc_err_total = %llu                    ", g_acq_state.stats.num_alloc_err_total);
 100b93c:	e59fb5c0 	ldr	fp, [pc, #1472]	; 100bf04 <acq_debug_dump+0x694>
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100b940:	e7953102 	ldr	r3, [r5, r2, lsl #2]
 100b944:	eb0008ed 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "sub_state             = %d [%s]                 ", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
 100b948:	e5942004 	ldr	r2, [r4, #4]
 100b94c:	e3a00002 	mov	r0, #2
 100b950:	e3061ea0 	movw	r1, #28320	; 0x6ea0
 100b954:	e3401106 	movt	r1, #262	; 0x106
 100b958:	e0855012 	add	r5, r5, r2, lsl r0
 100b95c:	e595301c 	ldr	r3, [r5, #28]
 100b960:	eb0008e6 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_current           = 0x%08x                  ", g_acq_state.acq_current);
 100b964:	e3061ed4 	movw	r1, #28372	; 0x6ed4
 100b968:	e5942884 	ldr	r2, [r4, #2180]	; 0x884
 100b96c:	e3401106 	movt	r1, #262	; 0x106
 100b970:	e3a00002 	mov	r0, #2
 100b974:	eb0008e1 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_first             = 0x%08x                  ", g_acq_state.acq_first);
 100b978:	e3061f08 	movw	r1, #28424	; 0x6f08
 100b97c:	e5942880 	ldr	r2, [r4, #2176]	; 0x880
 100b980:	e3401106 	movt	r1, #262	; 0x106
 100b984:	e3a00002 	mov	r0, #2
 100b988:	eb0008dc 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_done_current      = 0x%08x                  ", g_acq_state.acq_done_current);
 100b98c:	e3061f3c 	movw	r1, #28476	; 0x6f3c
 100b990:	e594288c 	ldr	r2, [r4, #2188]	; 0x88c
 100b994:	e3401106 	movt	r1, #262	; 0x106
 100b998:	e3a00002 	mov	r0, #2
 100b99c:	eb0008d7 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_done_first        = 0x%08x                  ", g_acq_state.acq_done_first);
 100b9a0:	e3061f70 	movw	r1, #28528	; 0x6f70
 100b9a4:	e5942888 	ldr	r2, [r4, #2184]	; 0x888
 100b9a8:	e3401106 	movt	r1, #262	; 0x106
 100b9ac:	e3a00002 	mov	r0, #2
 100b9b0:	eb0008d2 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "dma                   = 0x%08x                  ", g_acq_state.dma);
 100b9b4:	e2881008 	add	r1, r8, #8
 100b9b8:	e3002748 	movw	r2, #1864	; 0x748
 100b9bc:	e1a0000d 	mov	r0, sp
 100b9c0:	eb00400e 	bl	101ba00 <memcpy>
 100b9c4:	e3061fa4 	movw	r1, #28580	; 0x6fa4
 100b9c8:	e898000c 	ldm	r8, {r2, r3}
 100b9cc:	e3401106 	movt	r1, #262	; 0x106
 100b9d0:	e3a00002 	mov	r0, #2
 100b9d4:	eb0008c9 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "dma_config            = 0x%08x                  ", g_acq_state.dma_config);
 100b9d8:	e3061fd8 	movw	r1, #28632	; 0x6fd8
 100b9dc:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
 100b9e0:	e3401106 	movt	r1, #262	; 0x106
 100b9e4:	e3a00002 	mov	r0, #2
 100b9e8:	eb0008c4 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "demux_reg             = 0x%02x                  ", g_acq_state.demux_reg);
 100b9ec:	e307100c 	movw	r1, #28684	; 0x700c
 100b9f0:	e5942790 	ldr	r2, [r4, #1936]	; 0x790
 100b9f4:	e3401106 	movt	r1, #262	; 0x106
 100b9f8:	e3a00002 	mov	r0, #2
 100b9fc:	eb0008bf 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100ba00:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100ba04:	e3a00002 	mov	r0, #2
 100ba08:	e3401106 	movt	r1, #262	; 0x106
 100ba0c:	eb0008bb 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "R_acq_ctrl_a          = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_CTRL_A), g_acq_state.dbg_isr_acq_ctrl_a);
 100ba10:	e3071040 	movw	r1, #28736	; 0x7040
 100ba14:	e5962050 	ldr	r2, [r6, #80]	; 0x50
 100ba18:	e5943794 	ldr	r3, [r4, #1940]	; 0x794
 100ba1c:	e3401106 	movt	r1, #262	; 0x106
 100ba20:	e3a00002 	mov	r0, #2
 100ba24:	eb0008b5 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "R_acq_status_a        = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_A), g_acq_state.dbg_isr_acq_status_a);
 100ba28:	e3071074 	movw	r1, #28788	; 0x7074
 100ba2c:	e5962058 	ldr	r2, [r6, #88]	; 0x58
 100ba30:	e5943798 	ldr	r3, [r4, #1944]	; 0x798
 100ba34:	e3401106 	movt	r1, #262	; 0x106
 100ba38:	e3a00002 	mov	r0, #2
 100ba3c:	eb0008af 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "R_acq_status_b        = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_B), g_acq_state.dbg_isr_acq_status_b);
 100ba40:	e30710a8 	movw	r1, #28840	; 0x70a8
 100ba44:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
 100ba48:	e594379c 	ldr	r3, [r4, #1948]	; 0x79c
 100ba4c:	e3401106 	movt	r1, #262	; 0x106
 100ba50:	e3a00002 	mov	r0, #2
 100ba54:	eb0008a9 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "R_acq_trigger_ptr     = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR), g_acq_state.dbg_isr_acq_trig_ptr);
 100ba58:	e30710dc 	movw	r1, #28892	; 0x70dc
 100ba5c:	e5962048 	ldr	r2, [r6, #72]	; 0x48
 100ba60:	e59437a0 	ldr	r3, [r4, #1952]	; 0x7a0
 100ba64:	e3401106 	movt	r1, #262	; 0x106
 100ba68:	e3a00002 	mov	r0, #2
 100ba6c:	eb0008a3 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100ba70:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100ba74:	e3a00002 	mov	r0, #2
 100ba78:	e3401106 	movt	r1, #262	; 0x106
 100ba7c:	eb00089f 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "pre_buffsz            = %7d bytes (0x%08x)      ", g_acq_state.pre_buffsz, g_acq_state.pre_buffsz);
 100ba80:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
 100ba84:	e3071110 	movw	r1, #28944	; 0x7110
 100ba88:	e3401106 	movt	r1, #262	; 0x106
 100ba8c:	e3a00002 	mov	r0, #2
 100ba90:	e1a02003 	mov	r2, r3
 100ba94:	eb000899 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "post_buffsz           = %7d bytes (0x%08x)      ", g_acq_state.post_buffsz, g_acq_state.post_buffsz);
 100ba98:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
 100ba9c:	e3071144 	movw	r1, #28996	; 0x7144
 100baa0:	e3401106 	movt	r1, #262	; 0x106
 100baa4:	e3a00002 	mov	r0, #2
 100baa8:	e1a02003 	mov	r2, r3
 100baac:	eb000893 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "total_buffsz          = %7d bytes (0x%08x)      ", g_acq_state.total_buffsz, g_acq_state.total_buffsz);
 100bab0:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
 100bab4:	e3071178 	movw	r1, #29048	; 0x7178
 100bab8:	e3401106 	movt	r1, #262	; 0x106
 100babc:	e3a00002 	mov	r0, #2
 100bac0:	e1a02003 	mov	r2, r3
 100bac4:	eb00088d 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "pre_sampct            = %7d wavewords           ", g_acq_state.pre_sampct);
 100bac8:	e30711ac 	movw	r1, #29100	; 0x71ac
 100bacc:	e5942788 	ldr	r2, [r4, #1928]	; 0x788
 100bad0:	e3401106 	movt	r1, #262	; 0x106
 100bad4:	e3a00002 	mov	r0, #2
 100bad8:	eb000888 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "post_sampct           = %7d wavewords           ", g_acq_state.post_sampct);
 100badc:	e30711e0 	movw	r1, #29152	; 0x71e0
 100bae0:	e594278c 	ldr	r2, [r4, #1932]	; 0x78c
 100bae4:	e3401106 	movt	r1, #262	; 0x106
 100bae8:	e3a00002 	mov	r0, #2
 100baec:	eb000883 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "num_acq_request       = %7d waves               ", g_acq_state.num_acq_request);
 100baf0:	e3071214 	movw	r1, #29204	; 0x7214
 100baf4:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
 100baf8:	e3401106 	movt	r1, #262	; 0x106
 100bafc:	e3a00002 	mov	r0, #2
 100bb00:	eb00087e 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "num_acq_made          = %7d waves               ", g_acq_state.num_acq_made);
 100bb04:	e3071248 	movw	r1, #29256	; 0x7248
 100bb08:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
 100bb0c:	e3401106 	movt	r1, #262	; 0x106
 100bb10:	e3a00002 	mov	r0, #2
 100bb14:	eb000879 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "num_acq_made_done     = %7d waves               ", g_acq_state.num_acq_made_done);
 100bb18:	e307127c 	movw	r1, #29308	; 0x727c
 100bb1c:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
 100bb20:	e3401106 	movt	r1, #262	; 0x106
 100bb24:	e3a00002 	mov	r0, #2
 100bb28:	eb000874 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bb2c:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bb30:	e3a00002 	mov	r0, #2
 100bb34:	e3401106 	movt	r1, #262	; 0x106
 100bb38:	eb000870 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_current->flags    = 0x%04x                  ", g_acq_state.acq_current->flags);
 100bb3c:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
 100bb40:	e30712b0 	movw	r1, #29360	; 0x72b0
 100bb44:	e3401106 	movt	r1, #262	; 0x106
 100bb48:	e3a00002 	mov	r0, #2
 100bb4c:	e1d321b0 	ldrh	r2, [r3, #16]
 100bb50:	eb00086a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)             ", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
 100bb54:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
 100bb58:	e30712e4 	movw	r1, #29412	; 0x72e4
 100bb5c:	e3401106 	movt	r1, #262	; 0x106
 100bb60:	e3a00002 	mov	r0, #2
 100bb64:	e593300c 	ldr	r3, [r3, #12]
 100bb68:	e1a02003 	mov	r2, r3
 100bb6c:	eb000863 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bb70:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bb74:	e3a00002 	mov	r0, #2
 100bb78:	e3401106 	movt	r1, #262	; 0x106
 100bb7c:	eb00085f 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_acq_total       = %llu                    ", g_acq_state.stats.num_acq_total);
 100bb80:	e3071318 	movw	r1, #29464	; 0x7318
 100bb84:	e14a20d8 	ldrd	r2, [sl, #-8]
 100bb88:	e3401106 	movt	r1, #262	; 0x106
 100bb8c:	e3a00002 	mov	r0, #2
 100bb90:	eb00085a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_alloc_err_total = %llu                    ", g_acq_state.stats.num_alloc_err_total);
 100bb94:	e307134c 	movw	r1, #29516	; 0x734c
 100bb98:	e14b20d8 	ldrd	r2, [fp, #-8]
 100bb9c:	e3401106 	movt	r1, #262	; 0x106
 100bba0:	e3a00002 	mov	r0, #2
 100bba4:	eb000855 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_alloc_total     = %llu                    ", g_acq_state.stats.num_alloc_total);
 100bba8:	e3071380 	movw	r1, #29568	; 0x7380
 100bbac:	e1cb20d0 	ldrd	r2, [fp]
 100bbb0:	e3401106 	movt	r1, #262	; 0x106
 100bbb4:	e3a00002 	mov	r0, #2
 100bbb8:	eb000850 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_err_total       = %llu                    ", g_acq_state.stats.num_err_total);
 100bbbc:	e30713b4 	movw	r1, #29620	; 0x73b4
 100bbc0:	e14b22d8 	ldrd	r2, [fp, #-40]	; 0xffffffd8
 100bbc4:	e3401106 	movt	r1, #262	; 0x106
 100bbc8:	e3a00002 	mov	r0, #2
 100bbcc:	eb00084b 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_post_total      = %llu                    ", g_acq_state.stats.num_post_total);
 100bbd0:	e30713e8 	movw	r1, #29672	; 0x73e8
 100bbd4:	e14b23d0 	ldrd	r2, [fp, #-48]	; 0xffffffd0
 100bbd8:	e3401106 	movt	r1, #262	; 0x106
 100bbdc:	e3a00002 	mov	r0, #2
 100bbe0:	eb000846 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_pre_total       = %llu                    ", g_acq_state.stats.num_pre_total);
 100bbe4:	e307141c 	movw	r1, #29724	; 0x741c
 100bbe8:	e1ca20d0 	ldrd	r2, [sl]
 100bbec:	e3401106 	movt	r1, #262	; 0x106
 100bbf0:	e3a00002 	mov	r0, #2
 100bbf4:	eb000841 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_pre_fill_total  = %llu                    ", g_acq_state.stats.num_pre_fill_total);
 100bbf8:	e3071450 	movw	r1, #29776	; 0x7450
 100bbfc:	e14b23d8 	ldrd	r2, [fp, #-56]	; 0xffffffc8
 100bc00:	e3401106 	movt	r1, #262	; 0x106
 100bc04:	e3a00002 	mov	r0, #2
 100bc08:	eb00083c 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_samples         = %llu                    ", g_acq_state.stats.num_samples);
 100bc0c:	e3071484 	movw	r1, #29828	; 0x7484
 100bc10:	e14920d8 	ldrd	r2, [r9, #-8]
 100bc14:	e3401106 	movt	r1, #262	; 0x106
 100bc18:	e3a00002 	mov	r0, #2
 100bc1c:	eb000837 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_samples_raw     = %llu                    ", g_acq_state.stats.num_samples_raw);
 100bc20:	e30714b8 	movw	r1, #29880	; 0x74b8
 100bc24:	e1c920d0 	ldrd	r2, [r9]
 100bc28:	e3401106 	movt	r1, #262	; 0x106
 100bc2c:	e3a00002 	mov	r0, #2
 100bc30:	eb000832 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_irqs            = %llu                    ", g_acq_state.stats.num_irqs);
 100bc34:	e30714ec 	movw	r1, #29932	; 0x74ec
 100bc38:	e1cb20d8 	ldrd	r2, [fp, #8]
 100bc3c:	e3401106 	movt	r1, #262	; 0x106
 100bc40:	e3a00002 	mov	r0, #2
 100bc44:	eb00082d 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_fifo_full       = %llu                    ", g_acq_state.stats.num_fifo_full);
 100bc48:	e3071520 	movw	r1, #29984	; 0x7520
 100bc4c:	e1cb21d0 	ldrd	r2, [fp, #16]
 100bc50:	e3401106 	movt	r1, #262	; 0x106
 100bc54:	e3a00002 	mov	r0, #2
 100bc58:	eb000828 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_fifo_pkt_dscd   = %llu                    ", g_acq_state.stats.num_fifo_pkt_dscd);
 100bc5c:	e3071554 	movw	r1, #30036	; 0x7554
 100bc60:	e14720d8 	ldrd	r2, [r7, #-8]
 100bc64:	e3401106 	movt	r1, #262	; 0x106
 100bc68:	e3a00002 	mov	r0, #2
 100bc6c:	eb000823 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "s.num_fifo_stall_tot  = %llu                    ", g_acq_state.stats.num_fifo_stall_total);
 100bc70:	e3071588 	movw	r1, #30088	; 0x7588
 100bc74:	e14b22d0 	ldrd	r2, [fp, #-32]	; 0xffffffe0
 100bc78:	e3401106 	movt	r1, #262	; 0x106
 100bc7c:	e3a00002 	mov	r0, #2
 100bc80:	eb00081e 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bc84:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bc88:	e3a00002 	mov	r0, #2
 100bc8c:	e3401106 	movt	r1, #262	; 0x106
 100bc90:	eb00081a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "Approx acq. rate      = %d acq/s                ", (int)acq_rate);
 100bc94:	e30715bc 	movw	r1, #30140	; 0x75bc
 100bc98:	e59d2754 	ldr	r2, [sp, #1876]	; 0x754
 100bc9c:	e3401106 	movt	r1, #262	; 0x106
 100bca0:	e3a00002 	mov	r0, #2
 100bca4:	eb000815 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "Approx sample rate    = %d Ksa/s                ", (int)sample_rate);
 100bca8:	e30715f0 	movw	r1, #30192	; 0x75f0
 100bcac:	e59d2748 	ldr	r2, [sp, #1864]	; 0x748
 100bcb0:	e3401106 	movt	r1, #262	; 0x106
 100bcb4:	e3a00002 	mov	r0, #2
 100bcb8:	eb000810 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "Debug delta           = %d us                   ", (int)time_delta_us);
 100bcbc:	eefd7ac8 	vcvt.s32.f32	s15, s16
 100bcc0:	e3071624 	movw	r1, #30244	; 0x7624
 100bcc4:	e3401106 	movt	r1, #262	; 0x106
 100bcc8:	e3a00002 	mov	r0, #2
 100bccc:	ee172a90 	vmov	r2, s15
 100bcd0:	eb00080a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bcd4:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bcd8:	e3a00002 	mov	r0, #2
 100bcdc:	e3401106 	movt	r1, #262	; 0x106
 100bce0:	eb000806 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "** End **                                       ");
 100bce4:	e3071658 	movw	r1, #30296	; 0x7658
 100bce8:	e3a00002 	mov	r0, #2
 100bcec:	e3401106 	movt	r1, #262	; 0x106
 100bcf0:	eb000802 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bcf4:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bcf8:	e3a00002 	mov	r0, #2
 100bcfc:	e3401106 	movt	r1, #262	; 0x106
 100bd00:	eb0007fe 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bd04:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bd08:	e3a00002 	mov	r0, #2
 100bd0c:	e3401106 	movt	r1, #262	; 0x106
 100bd10:	eb0007fa 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bd14:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bd18:	e3a00002 	mov	r0, #2
 100bd1c:	e3401106 	movt	r1, #262	; 0x106
 100bd20:	eb0007f6 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bd24:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bd28:	e3a00002 	mov	r0, #2
 100bd2c:	e3401106 	movt	r1, #262	; 0x106
 100bd30:	eb0007f2 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                                                ");
 100bd34:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 100bd38:	e3a00002 	mov	r0, #2
 100bd3c:	e3401106 	movt	r1, #262	; 0x106
 100bd40:	eb0007ee 	bl	100dd00 <d_printf>

	// Save last state...
	g_acq_state.stat_last = g_acq_state.stats;
 100bd44:	e2881e7a 	add	r1, r8, #1952	; 0x7a0
 100bd48:	e2880e81 	add	r0, r8, #2064	; 0x810
 100bd4c:	e3a02068 	mov	r2, #104	; 0x68
 100bd50:	eb003f2a 	bl	101ba00 <memcpy>
	g_acq_state.last_debug_timer = timer_value;
 100bd54:	e59d3758 	ldr	r3, [sp, #1880]	; 0x758
 100bd58:	e5873000 	str	r3, [r7]
 100bd5c:	e59d375c 	ldr	r3, [sp, #1884]	; 0x75c
 100bd60:	e5873004 	str	r3, [r7, #4]
}
 100bd64:	e28dde77 	add	sp, sp, #1904	; 0x770
 100bd68:	e28dd00c 	add	sp, sp, #12
 100bd6c:	ecbd8b02 	vpop	{d8}
 100bd70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_read_global_timer(&lsb, &msb);
 100bd74:	e28d0e77 	add	r0, sp, #1904	; 0x770
 100bd78:	e28d1e77 	add	r1, sp, #1904	; 0x770
 100bd7c:	e2800004 	add	r0, r0, #4
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bd80:	e284ae7b 	add	sl, r4, #1968	; 0x7b0
		d_read_global_timer(&lsb, &msb);
 100bd84:	eb0009ab 	bl	100e438 <d_read_global_timer>
		timer_value = (((uint64_t)msb) << 32) | lsb;
 100bd88:	e59d3774 	ldr	r3, [sp, #1908]	; 0x774
 100bd8c:	e2849e7e 	add	r9, r4, #2016	; 0x7e0
		time_delta = timer_value - g_acq_state.last_debug_timer;
 100bd90:	e5970000 	ldr	r0, [r7]
		timer_value = (((uint64_t)msb) << 32) | lsb;
 100bd94:	e59d2770 	ldr	r2, [sp, #1904]	; 0x770
		time_delta = timer_value - g_acq_state.last_debug_timer;
 100bd98:	e5971004 	ldr	r1, [r7, #4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bd9c:	e0530000 	subs	r0, r3, r0
		timer_value = (((uint64_t)msb) << 32) | lsb;
 100bda0:	e58d3758 	str	r3, [sp, #1880]	; 0x758
 100bda4:	e58d275c 	str	r2, [sp, #1884]	; 0x75c
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bda8:	e0c21001 	sbc	r1, r2, r1
 100bdac:	fa003863 	blx	1019f40 <__aeabi_ul2d>
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bdb0:	e51ac008 	ldr	ip, [sl, #-8]
 100bdb4:	e5943818 	ldr	r3, [r4, #2072]	; 0x818
 100bdb8:	e594281c 	ldr	r2, [r4, #2076]	; 0x81c
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bdbc:	ec410b31 	vmov	d17, r0, r1
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bdc0:	e51a1004 	ldr	r1, [sl, #-4]
 100bdc4:	e05c3003 	subs	r3, ip, r3
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bdc8:	eddf0b48 	vldr	d16, [pc, #288]	; 100bef0 <acq_debug_dump+0x680>
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 100bdcc:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 100bdd0:	e0c13002 	sbc	r3, r1, r2
 100bdd4:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
		if(acq_delta > 0) {
 100bdd8:	e28d3d1d 	add	r3, sp, #1856	; 0x740
 100bddc:	e2833008 	add	r3, r3, #8
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bde0:	ee610ba0 	vmul.f64	d16, d17, d16
		if(acq_delta > 0) {
 100bde4:	e1c320d0 	ldrd	r2, [r3]
 100bde8:	e1923003 	orrs	r3, r2, r3
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 100bdec:	eeb78be0 	vcvt.f32.f64	s16, d16
		if(acq_delta > 0) {
 100bdf0:	1a00001d 	bne	100be6c <acq_debug_dump+0x5fc>
 100bdf4:	e5992000 	ldr	r2, [r9]
 100bdf8:	e5943850 	ldr	r3, [r4, #2128]	; 0x850
 100bdfc:	e5941854 	ldr	r1, [r4, #2132]	; 0x854
 100be00:	e5990004 	ldr	r0, [r9, #4]
 100be04:	e0523003 	subs	r3, r2, r3
 100be08:	e58d3760 	str	r3, [sp, #1888]	; 0x760
 100be0c:	e0c03001 	sbc	r3, r0, r1
 100be10:	e58d3764 	str	r3, [sp, #1892]	; 0x764
		if(sample_delta > 0) {
 100be14:	e28d3e76 	add	r3, sp, #1888	; 0x760
 100be18:	e1c320d0 	ldrd	r2, [r3]
 100be1c:	e1923003 	orrs	r3, r2, r3
 100be20:	0a00002d 	beq	100bedc <acq_debug_dump+0x66c>
			if(time_delta_us > 0) {
 100be24:	eeb58ac0 	vcmpe.f32	s16, #0.0
 100be28:	e3a03000 	mov	r3, #0
 100be2c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100be30:	d58d3748 	strle	r3, [sp, #1864]	; 0x748
 100be34:	d58d3754 	strle	r3, [sp, #1876]	; 0x754
 100be38:	dafffe9c 	ble	100b8b0 <acq_debug_dump+0x40>
 100be3c:	e58d3754 	str	r3, [sp, #1876]	; 0x754
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
 100be40:	e28d3e76 	add	r3, sp, #1888	; 0x760
 100be44:	e1c300d0 	ldrd	r0, [r3]
 100be48:	fa0038bb 	blx	101a13c <__aeabi_ul2f>
 100be4c:	ee070a90 	vmov	s15, r0
 100be50:	ed9f7a28 	vldr	s14, [pc, #160]	; 100bef8 <acq_debug_dump+0x688>
 100be54:	eec77a88 	vdiv.f32	s15, s15, s16
 100be58:	ee677a87 	vmul.f32	s15, s15, s14
 100be5c:	eefd7ae7 	vcvt.s32.f32	s15, s15
 100be60:	ee173a90 	vmov	r3, s15
 100be64:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 100be68:	eafffe90 	b	100b8b0 <acq_debug_dump+0x40>
			if(time_delta_us > 0) {
 100be6c:	e5990000 	ldr	r0, [r9]
 100be70:	e5943850 	ldr	r3, [r4, #2128]	; 0x850
 100be74:	e5942854 	ldr	r2, [r4, #2132]	; 0x854
 100be78:	e5991004 	ldr	r1, [r9, #4]
 100be7c:	e0503003 	subs	r3, r0, r3
 100be80:	eeb58ac0 	vcmpe.f32	s16, #0.0
 100be84:	e58d3760 	str	r3, [sp, #1888]	; 0x760
 100be88:	e0c13002 	sbc	r3, r1, r2
 100be8c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100be90:	e58d3764 	str	r3, [sp, #1892]	; 0x764
 100be94:	daffffde 	ble	100be14 <acq_debug_dump+0x5a4>
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100be98:	e28d3d1d 	add	r3, sp, #1856	; 0x740
 100be9c:	e2833008 	add	r3, r3, #8
 100bea0:	e1c300d0 	ldrd	r0, [r3]
 100bea4:	fa0038a4 	blx	101a13c <__aeabi_ul2f>
 100bea8:	ee070a90 	vmov	s15, r0
		if(sample_delta > 0) {
 100beac:	e28d3e76 	add	r3, sp, #1888	; 0x760
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100beb0:	ed9f7a11 	vldr	s14, [pc, #68]	; 100befc <acq_debug_dump+0x68c>
 100beb4:	eec77a88 	vdiv.f32	s15, s15, s16
		if(sample_delta > 0) {
 100beb8:	e1c320d0 	ldrd	r2, [r3]
 100bebc:	e1923003 	orrs	r3, r2, r3
 100bec0:	058d5748 	streq	r5, [sp, #1864]	; 0x748
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100bec4:	ee677a87 	vmul.f32	s15, s15, s14
 100bec8:	eefd7ae7 	vcvt.s32.f32	s15, s15
 100becc:	ee173a90 	vmov	r3, s15
 100bed0:	e58d3754 	str	r3, [sp, #1876]	; 0x754
		if(sample_delta > 0) {
 100bed4:	1affffd9 	bne	100be40 <acq_debug_dump+0x5d0>
 100bed8:	eafffe74 	b	100b8b0 <acq_debug_dump+0x40>
 100bedc:	e3a03000 	mov	r3, #0
 100bee0:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 100bee4:	e58d3754 	str	r3, [sp, #1876]	; 0x754
 100bee8:	eafffe70 	b	100b8b0 <acq_debug_dump+0x40>
 100beec:	e320f000 	nop	{0}
 100bef0:	a17f0000 	.word	0xa17f0000
 100bef4:	3f689374 	.word	0x3f689374
 100bef8:	447a0000 	.word	0x447a0000
 100befc:	49742400 	.word	0x49742400
 100bf00:	014592e8 	.word	0x014592e8
 100bf04:	01459ad0 	.word	0x01459ad0

0100bf08 <_acq_irq_rx_handler>:
	irq_status = XAxiDma_BdRingGetIrq(bd_ring);
 100bf08:	e5902000 	ldr	r2, [r0]
{
 100bf0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
		XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100bf10:	e30942e0 	movw	r4, #37600	; 0x92e0
{
 100bf14:	e24dd014 	sub	sp, sp, #20
	irq_status = XAxiDma_BdRingGetIrq(bd_ring);
 100bf18:	e2821004 	add	r1, r2, #4
 100bf1c:	e5923004 	ldr	r3, [r2, #4]
	if(irq_status & XAXIDMA_IRQ_ERROR_MASK) {
 100bf20:	e3130901 	tst	r3, #16384	; 0x4000
	irq_status = XAxiDma_BdRingGetIrq(bd_ring);
 100bf24:	e2036a07 	and	r6, r3, #28672	; 0x7000
	*LocalAddr = Value;
 100bf28:	13a0c901 	movne	ip, #16384	; 0x4000
		XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100bf2c:	13404145 	movtne	r4, #325	; 0x145
 100bf30:	1582c004 	strne	ip, [r2, #4]
 100bf34:	13a0ea07 	movne	lr, #28672	; 0x7000
 100bf38:	1594c008 	ldrne	ip, [r4, #8]
 100bf3c:	03404145 	movteq	r4, #325	; 0x145
 100bf40:	158ce004 	strne	lr, [ip, #4]
	if(irq_status & XAXIDMA_IRQ_IOC_MASK) {
 100bf44:	e3130a01 	tst	r3, #4096	; 0x1000
 100bf48:	0a000041 	beq	100c054 <_acq_irq_rx_handler+0x14c>
		switch(g_acq_state.sub_state) {
 100bf4c:	e5943004 	ldr	r3, [r4, #4]
 100bf50:	e1a05000 	mov	r5, r0
 100bf54:	e3530003 	cmp	r3, #3
 100bf58:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100bf5c:	ea00003c 	b	100c054 <_acq_irq_rx_handler+0x14c>
 100bf60:	0100c06c 	.word	0x0100c06c
 100bf64:	0100c088 	.word	0x0100c088
 100bf68:	0100c168 	.word	0x0100c168
 100bf6c:	0100bf70 	.word	0x0100bf70
				if(!g_acq_state.acq_early_abort && !fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) {
 100bf70:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100bf74:	e3130001 	tst	r3, #1
 100bf78:	1a000004 	bne	100bf90 <_acq_irq_rx_handler+0x88>
	res = _FAB_CFG_ACCESS(reg);
 100bf7c:	e3a08000 	mov	r8, #0
 100bf80:	e34483c0 	movt	r8, #17344	; 0x43c0
 100bf84:	e5983058 	ldr	r3, [r8, #88]	; 0x58
 100bf88:	e2137001 	ands	r7, r3, #1
 100bf8c:	0a000141 	beq	100c498 <_acq_irq_rx_handler+0x590>
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100bf90:	e5940780 	ldr	r0, [r4, #1920]	; 0x780
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 100bf94:	e3a09004 	mov	r9, #4
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100bf98:	e59f770c 	ldr	r7, [pc, #1804]	; 100c6ac <_acq_irq_rx_handler+0x7a4>
	_FAB_CFG_ACCESS(reg) = data;
 100bf9c:	e3a08000 	mov	r8, #0
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100bfa0:	e594c884 	ldr	ip, [r4, #2180]	; 0x884
 100bfa4:	e34483c0 	movt	r8, #17344	; 0x43c0
 100bfa8:	e3c03802 	bic	r3, r0, #131072	; 0x20000
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100bfac:	e3a0a000 	mov	sl, #0
 100bfb0:	e3c33003 	bic	r3, r3, #3
 100bfb4:	e5972000 	ldr	r2, [r7]
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100bfb8:	e1833009 	orr	r3, r3, r9
 100bfbc:	e597b004 	ldr	fp, [r7, #4]
 100bfc0:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100bfc4:	e5883050 	str	r3, [r8, #80]	; 0x50
 100bfc8:	e594e768 	ldr	lr, [r4, #1896]	; 0x768
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100bfcc:	e1dc11b0 	ldrh	r1, [ip, #16]
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 100bfd0:	e5849004 	str	r9, [r4, #4]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100bfd4:	e092200e 	adds	r2, r2, lr
				g_acq_state.state = ACQSTATE_RUNNING;
 100bfd8:	e5849000 	str	r9, [r4]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100bfdc:	e0abb00a 	adc	fp, fp, sl
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100bfe0:	e3813001 	orr	r3, r1, #1
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 100bfe4:	e2111002 	ands	r1, r1, #2
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 100bfe8:	e8870804 	stm	r7, {r2, fp}
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 100bfec:	e1cc31b0 	strh	r3, [ip, #16]
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 100bff0:	1a0000e5 	bne	100c38c <_acq_irq_rx_handler+0x484>
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100bff4:	e5173008 	ldr	r3, [r7, #-8]
					g_acq_state.num_acq_made++;
 100bff8:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100bffc:	e517b004 	ldr	fp, [r7, #-4]
 100c000:	e093e00e 	adds	lr, r3, lr
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 100c004:	e5943774 	ldr	r3, [r4, #1908]	; 0x774
					g_acq_state.num_acq_made++;
 100c008:	e2822001 	add	r2, r2, #1
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100c00c:	e507e008 	str	lr, [r7, #-8]
 100c010:	e0aba00a 	adc	sl, fp, sl
					g_acq_state.num_acq_made++;
 100c014:	e5842778 	str	r2, [r4, #1912]	; 0x778
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 100c018:	e1520003 	cmp	r2, r3
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 100c01c:	e507a004 	str	sl, [r7, #-4]
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 100c020:	3a000171 	bcc	100c5ec <_acq_irq_rx_handler+0x6e4>
						g_acq_state.state = ACQSTATE_DONE;
 100c024:	e3a02005 	mov	r2, #5
 100c028:	e3a03005 	mov	r3, #5
 100c02c:	e1c420f0 	strd	r2, [r4]
				g_acq_state.stats.num_post_total++;
 100c030:	e59f2678 	ldr	r2, [pc, #1656]	; 100c6b0 <_acq_irq_rx_handler+0x7a8>
 100c034:	e5951000 	ldr	r1, [r5]
 100c038:	e5923000 	ldr	r3, [r2]
 100c03c:	e5920004 	ldr	r0, [r2, #4]
 100c040:	e2811004 	add	r1, r1, #4
 100c044:	e2933001 	adds	r3, r3, #1
 100c048:	e2a00000 	adc	r0, r0, #0
 100c04c:	e5823000 	str	r3, [r2]
 100c050:	e5820004 	str	r0, [r2, #4]
		XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100c054:	e5943008 	ldr	r3, [r4, #8]
 100c058:	e3a02a07 	mov	r2, #28672	; 0x7000
 100c05c:	e5816000 	str	r6, [r1]
 100c060:	e5832004 	str	r2, [r3, #4]
}
 100c064:	e28dd014 	add	sp, sp, #20
 100c068:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				d_printf(D_RAW, "IRQ_none!");
 100c06c:	e3071798 	movw	r1, #30616	; 0x7798
 100c070:	e3a00000 	mov	r0, #0
 100c074:	e3401106 	movt	r1, #262	; 0x106
 100c078:	eb000720 	bl	100dd00 <d_printf>
	if(!irq_ackd) {
 100c07c:	e5951000 	ldr	r1, [r5]
 100c080:	e2811004 	add	r1, r1, #4
 100c084:	eafffff2 	b	100c054 <_acq_irq_rx_handler+0x14c>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c088:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c08c:	e3a00000 	mov	r0, #0
 100c090:	e34403c0 	movt	r0, #17344	; 0x43c0
 100c094:	e594c008 	ldr	ip, [r4, #8]
 100c098:	e3c31802 	bic	r1, r3, #131072	; 0x20000
 100c09c:	e3c11012 	bic	r1, r1, #18
 100c0a0:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100c0a4:	e5801050 	str	r1, [r0, #80]	; 0x50
				if(g_acq_state.acq_early_abort) {
 100c0a8:	e5d41760 	ldrb	r1, [r4, #1888]	; 0x760
 100c0ac:	e3110001 	tst	r1, #1
 100c0b0:	0a000099 	beq	100c31c <_acq_irq_rx_handler+0x414>
					g_acq_state.acq_early_abort = 0;
 100c0b4:	e3c11003 	bic	r1, r1, #3
 100c0b8:	e3c33b82 	bic	r3, r3, #133120	; 0x20800
 100c0bc:	e3811002 	orr	r1, r1, #2
 100c0c0:	e3c33012 	bic	r3, r3, #18
 100c0c4:	e5c41760 	strb	r1, [r4, #1888]	; 0x760
					g_acq_state.sub_state = ACQSUBST_NONE;
 100c0c8:	e3a0e000 	mov	lr, #0
				XAxiDma_BdRingAckIrq(bd_ring, irq_status);
 100c0cc:	e5951000 	ldr	r1, [r5]
 100c0d0:	e3a02a07 	mov	r2, #28672	; 0x7000
 100c0d4:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c0d8:	e5803050 	str	r3, [r0, #80]	; 0x50
					g_acq_state.sub_state = ACQSUBST_NONE;
 100c0dc:	e584e004 	str	lr, [r4, #4]
 100c0e0:	e5816004 	str	r6, [r1, #4]
 100c0e4:	e58c2004 	str	r2, [ip, #4]
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c0e8:	e59f35bc 	ldr	r3, [pc, #1468]	; 100c6ac <_acq_irq_rx_handler+0x7a4>
 100c0ec:	e3a05000 	mov	r5, #0
 100c0f0:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 100c0f4:	e9134001 	ldmdb	r3, {r0, lr}
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c0f8:	e5931000 	ldr	r1, [r3]
 100c0fc:	e593c004 	ldr	ip, [r3, #4]
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c100:	e0900002 	adds	r0, r0, r2
 100c104:	e0aee005 	adc	lr, lr, r5
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c108:	e0912002 	adds	r2, r1, r2
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c10c:	e5030008 	str	r0, [r3, #-8]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c110:	e1a00002 	mov	r0, r2
 100c114:	e0ac2005 	adc	r2, ip, r5
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100c118:	e503e004 	str	lr, [r3, #-4]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c11c:	e1a01002 	mov	r1, r2
				g_acq_state.stats.num_pre_fill_total++;
 100c120:	e243c020 	sub	ip, r3, #32
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c124:	e04303f0 	strd	r0, [r3], #-48	; 0xffffffd0
				g_acq_state.stats.num_acq_total++;
 100c128:	e9130024 	ldmdb	r3, {r2, r5}
				g_acq_state.stats.num_pre_total++;
 100c12c:	e8930012 	ldm	r3, {r1, r4}
				g_acq_state.stats.num_pre_fill_total++;
 100c130:	e51ce004 	ldr	lr, [ip, #-4]
				g_acq_state.stats.num_acq_total++;
 100c134:	e2920001 	adds	r0, r2, #1
				g_acq_state.stats.num_pre_fill_total++;
 100c138:	e51c2008 	ldr	r2, [ip, #-8]
				g_acq_state.stats.num_acq_total++;
 100c13c:	e2a55000 	adc	r5, r5, #0
				g_acq_state.stats.num_pre_total++;
 100c140:	e2911001 	adds	r1, r1, #1
 100c144:	e2a44000 	adc	r4, r4, #0
				g_acq_state.stats.num_acq_total++;
 100c148:	e5030008 	str	r0, [r3, #-8]
				g_acq_state.stats.num_pre_fill_total++;
 100c14c:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 100c150:	e5035004 	str	r5, [r3, #-4]
				g_acq_state.stats.num_pre_fill_total++;
 100c154:	e2ae0000 	adc	r0, lr, #0
				g_acq_state.stats.num_pre_total++;
 100c158:	e8830012 	stm	r3, {r1, r4}
				g_acq_state.stats.num_pre_fill_total++;
 100c15c:	e50c2008 	str	r2, [ip, #-8]
 100c160:	e50c0004 	str	r0, [ip, #-4]
	if(!irq_ackd) {
 100c164:	eaffffbe 	b	100c064 <_acq_irq_rx_handler+0x15c>
	res = _FAB_CFG_ACCESS(reg);
 100c168:	e3a0c000 	mov	ip, #0
 100c16c:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
 100c170:	e344c3c0 	movt	ip, #17344	; 0x43c0
 100c174:	e59c0058 	ldr	r0, [ip, #88]	; 0x58
	return res;
 100c178:	e3c13002 	bic	r3, r1, #2
				acq_status_a = fabcfg_read(FAB_CFG_ACQ_STATUS_A);
 100c17c:	e58d000c 	str	r0, [sp, #12]
				if(acq_status_a & ACQ_STATUS_A_HAVE_TRIG) {
 100c180:	e59d000c 	ldr	r0, [sp, #12]
 100c184:	e3100002 	tst	r0, #2
 100c188:	0a000033 	beq	100c25c <_acq_irq_rx_handler+0x354>
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100c18c:	e3833010 	orr	r3, r3, #16
 100c190:	e5940884 	ldr	r0, [r4, #2180]	; 0x884
 100c194:	e5843780 	str	r3, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c198:	e58c3050 	str	r3, [ip, #80]	; 0x50
					if(COND_UNLIKELY(acq_status_a & ACQ_STATUS_A_DATA_LOSS)) {
 100c19c:	e59d300c 	ldr	r3, [sp, #12]
 100c1a0:	e3130004 	tst	r3, #4
 100c1a4:	1a0000d8 	bne	100c50c <_acq_irq_rx_handler+0x604>
					XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 100c1a8:	e5943008 	ldr	r3, [r4, #8]
 100c1ac:	e3a01a07 	mov	r1, #28672	; 0x7000
 100c1b0:	e5826004 	str	r6, [r2, #4]
 100c1b4:	e5831004 	str	r1, [r3, #4]
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c1b8:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c1bc:	e7a02053 	sbfx	r2, r3, #0, #1
 100c1c0:	e31200ff 	tst	r2, #255	; 0xff
 100c1c4:	1a0000fa 	bne	100c5b4 <_acq_irq_rx_handler+0x6ac>
						addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 100c1c8:	e5903008 	ldr	r3, [r0, #8]
	res = _FAB_CFG_ACCESS(reg);
 100c1cc:	e3a02000 	mov	r2, #0
 100c1d0:	e594e764 	ldr	lr, [r4, #1892]	; 0x764
 100c1d4:	e34423c0 	movt	r2, #17344	; 0x43c0
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c1d8:	e5941088 	ldr	r1, [r4, #136]	; 0x88
						g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 100c1dc:	e3a0c003 	mov	ip, #3
						addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 100c1e0:	e083300e 	add	r3, r3, lr
						_acq_fast_dma_start((uint32_t*)addr, g_acq_state.post_buffsz);
 100c1e4:	e594e768 	ldr	lr, [r4, #1896]	; 0x768
 100c1e8:	e5813018 	str	r3, [r1, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100c1ec:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 100c1f0:	e3833001 	orr	r3, r3, #1
 100c1f4:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100c1f8:	e5813000 	str	r3, [r1]
 100c1fc:	e581e028 	str	lr, [r1, #40]	; 0x28
	g_acq_state.acq_ctrl_a |= bitmask;
 100c200:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c204:	e5921048 	ldr	r1, [r2, #72]	; 0x48
 100c208:	e3833802 	orr	r3, r3, #131072	; 0x20000
 100c20c:	e3833006 	orr	r3, r3, #6
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 100c210:	e580100c 	str	r1, [r0, #12]
 100c214:	e5843780 	str	r3, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c218:	e5823050 	str	r3, [r2, #80]	; 0x50
						g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 100c21c:	e590200c 	ldr	r2, [r0, #12]
 100c220:	e584c004 	str	ip, [r4, #4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100c224:	e59f3480 	ldr	r3, [pc, #1152]	; 100c6ac <_acq_irq_rx_handler+0x7a4>
 100c228:	e3a04000 	mov	r4, #0
 100c22c:	e8934001 	ldm	r3, {r0, lr}
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100c230:	e5131008 	ldr	r1, [r3, #-8]
 100c234:	e513c004 	ldr	ip, [r3, #-4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100c238:	e0900002 	adds	r0, r0, r2
 100c23c:	e0aee004 	adc	lr, lr, r4
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100c240:	e0912002 	adds	r2, r1, r2
 100c244:	e0ac1004 	adc	r1, ip, r4
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100c248:	e5830000 	str	r0, [r3]
 100c24c:	e583e004 	str	lr, [r3, #4]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100c250:	e5032008 	str	r2, [r3, #-8]
 100c254:	e5031004 	str	r1, [r3, #-4]
 100c258:	ea000022 	b	100c2e8 <_acq_irq_rx_handler+0x3e0>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c25c:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c260:	e58c3050 	str	r3, [ip, #80]	; 0x50
					if(COND_UNLIKELY(acq_status_a & ACQ_STATUS_A_DATA_LOSS)) {
 100c264:	e59d000c 	ldr	r0, [sp, #12]
 100c268:	e3100004 	tst	r0, #4
 100c26c:	1a0000bf 	bne	100c570 <_acq_irq_rx_handler+0x668>
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c270:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c274:	e594c008 	ldr	ip, [r4, #8]
 100c278:	e7a01053 	sbfx	r1, r3, #0, #1
 100c27c:	e31100ff 	tst	r1, #255	; 0xff
 100c280:	1a0000aa 	bne	100c530 <_acq_irq_rx_handler+0x628>
						_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c284:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
 100c288:	e3a0ea07 	mov	lr, #28672	; 0x7000
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c28c:	e5941088 	ldr	r1, [r4, #136]	; 0x88
 100c290:	e3a00000 	mov	r0, #0
						_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c294:	e5945764 	ldr	r5, [r4, #1892]	; 0x764
 100c298:	e34403c0 	movt	r0, #17344	; 0x43c0
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c29c:	e5933008 	ldr	r3, [r3, #8]
 100c2a0:	e5813018 	str	r3, [r1, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100c2a4:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 100c2a8:	e3833001 	orr	r3, r3, #1
 100c2ac:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100c2b0:	e5813000 	str	r3, [r1]
 100c2b4:	e5815028 	str	r5, [r1, #40]	; 0x28
 100c2b8:	e5826004 	str	r6, [r2, #4]
 100c2bc:	e58ce004 	str	lr, [ip, #4]
	g_acq_state.acq_ctrl_a |= bitmask;
 100c2c0:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c2c4:	e3833002 	orr	r3, r3, #2
 100c2c8:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c2cc:	e5803050 	str	r3, [r0, #80]	; 0x50
					g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100c2d0:	e59f13d4 	ldr	r1, [pc, #980]	; 100c6ac <_acq_irq_rx_handler+0x7a4>
 100c2d4:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
 100c2d8:	e1c120d0 	ldrd	r2, [r1]
 100c2dc:	e0924000 	adds	r4, r2, r0
 100c2e0:	e2a35000 	adc	r5, r3, #0
 100c2e4:	e1c140f0 	strd	r4, [r1]
				g_acq_state.stats.num_acq_total++;
 100c2e8:	e59f33c4 	ldr	r3, [pc, #964]	; 100c6b4 <_acq_irq_rx_handler+0x7ac>
 100c2ec:	e9131002 	ldmdb	r3, {r1, ip}
				g_acq_state.stats.num_pre_total++;
 100c2f0:	e5932000 	ldr	r2, [r3]
 100c2f4:	e5930004 	ldr	r0, [r3, #4]
				g_acq_state.stats.num_acq_total++;
 100c2f8:	e2911001 	adds	r1, r1, #1
 100c2fc:	e2acc000 	adc	ip, ip, #0
				g_acq_state.stats.num_pre_total++;
 100c300:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 100c304:	e5031008 	str	r1, [r3, #-8]
				g_acq_state.stats.num_pre_total++;
 100c308:	e2a01000 	adc	r1, r0, #0
				g_acq_state.stats.num_acq_total++;
 100c30c:	e503c004 	str	ip, [r3, #-4]
				g_acq_state.stats.num_pre_total++;
 100c310:	e5832000 	str	r2, [r3]
 100c314:	e5831004 	str	r1, [r3, #4]
	if(!irq_ackd) {
 100c318:	eaffff51 	b	100c064 <_acq_irq_rx_handler+0x15c>
					_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c31c:	e5943884 	ldr	r3, [r4, #2180]	; 0x884
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c320:	e300e75c 	movw	lr, #1884	; 0x75c
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c324:	e5941088 	ldr	r1, [r4, #136]	; 0x88
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c328:	e194e0be 	ldrh	lr, [r4, lr]
	XAxiDma_WriteReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_DESTADDR_OFFSET, buff_ptr);
 100c32c:	e5933008 	ldr	r3, [r3, #8]
					_acq_fast_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz);
 100c330:	e5945764 	ldr	r5, [r4, #1892]	; 0x764
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c334:	e31e0b01 	tst	lr, #1024	; 0x400
 100c338:	e3a0ea07 	mov	lr, #28672	; 0x7000
 100c33c:	e5813018 	str	r3, [r1, #24]
	g_acq_state.dmacr_state |= XAXIDMA_CR_RUNSTOP_MASK;
 100c340:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 100c344:	e3833001 	orr	r3, r3, #1
 100c348:	e5843784 	str	r3, [r4, #1924]	; 0x784
 100c34c:	e5813000 	str	r3, [r1]
 100c350:	e5815028 	str	r5, [r1, #40]	; 0x28
 100c354:	e5826004 	str	r6, [r2, #4]
 100c358:	e58ce004 	str	lr, [ip, #4]
					if(!(g_acq_state.acq_mode_flags & ACQ_MODE_SHORT_WITH_RESET)) {
 100c35c:	0a000038 	beq	100c444 <_acq_irq_rx_handler+0x53c>
						g_acq_state.state = ACQSTATE_WAIT_TRIG;
 100c360:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
 100c364:	e3a00003 	mov	r0, #3
 100c368:	e3a01002 	mov	r1, #2
 100c36c:	e1c400f0 	strd	r0, [r4]
	g_acq_state.acq_ctrl_a &= ~bitmask_clear;
 100c370:	e3c33024 	bic	r3, r3, #36	; 0x24
 100c374:	e3a02000 	mov	r2, #0
	g_acq_state.acq_ctrl_a |= bitmask_set;
 100c378:	e3833002 	orr	r3, r3, #2
 100c37c:	e34423c0 	movt	r2, #17344	; 0x43c0
 100c380:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c384:	e5823050 	str	r3, [r2, #80]	; 0x50
 100c388:	eaffff56 	b	100c0e8 <_acq_irq_rx_handler+0x1e0>
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c38c:	e5d4c760 	ldrb	ip, [r4, #1888]	; 0x760
					g_acq_state.stats.num_fifo_pkt_dscd++;
 100c390:	e5973028 	ldr	r3, [r7, #40]	; 0x28
 100c394:	e597102c 	ldr	r1, [r7, #44]	; 0x2c
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c398:	e7a0a05c 	sbfx	sl, ip, #0, #1
 100c39c:	e6afa07a 	sxtb	sl, sl
					g_acq_state.stats.num_fifo_pkt_dscd++;
 100c3a0:	e2933001 	adds	r3, r3, #1
 100c3a4:	e2a11000 	adc	r1, r1, #0
 100c3a8:	e5873028 	str	r3, [r7, #40]	; 0x28
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c3ac:	e35a0000 	cmp	sl, #0
					g_acq_state.stats.num_fifo_pkt_dscd++;
 100c3b0:	e587102c 	str	r1, [r7, #44]	; 0x2c
					if(COND_UNLIKELY(g_acq_state.acq_early_abort)) {
 100c3b4:	1a0000ab 	bne	100c668 <_acq_irq_rx_handler+0x760>
						error = acq_start(ACQ_START_FIFO_RESET);
 100c3b8:	e3a00001 	mov	r0, #1
 100c3bc:	ebfffc7d 	bl	100b5b8 <acq_start>
						if(error != ACQRES_OK) {
 100c3c0:	e2502000 	subs	r2, r0, #0
 100c3c4:	0affff19 	beq	100c030 <_acq_irq_rx_handler+0x128>
							d_printf(D_ERROR, "acquire: unable to reset current transfer, error %d", error);
 100c3c8:	e30716c8 	movw	r1, #30408	; 0x76c8
 100c3cc:	e1a00009 	mov	r0, r9
 100c3d0:	e3401106 	movt	r1, #262	; 0x106
 100c3d4:	eb000649 	bl	100dd00 <d_printf>
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100c3d8:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c3dc:	e3061724 	movw	r1, #26404	; 0x6724
 100c3e0:	e1a00009 	mov	r0, r9
 100c3e4:	e3401106 	movt	r1, #262	; 0x106
 100c3e8:	e3a02005 	mov	r2, #5
	return *(volatile u32 *) Addr;
 100c3ec:	e59c3004 	ldr	r3, [ip, #4]
	g_acq_state.stats.num_err_total++;
 100c3f0:	e2477010 	sub	r7, r7, #16
 100c3f4:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c3f8:	e58dc000 	str	ip, [sp]
 100c3fc:	eb00063f 	bl	100dd00 <d_printf>
	g_acq_state.stats.num_err_total++;
 100c400:	e5173008 	ldr	r3, [r7, #-8]
	g_acq_state.state = ACQSTATE_ERROR;
 100c404:	e3a0c006 	mov	ip, #6
	g_acq_state.acq_ctrl_a |= bitmask;
 100c408:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
	g_acq_state.stats.num_err_total++;
 100c40c:	e5171004 	ldr	r1, [r7, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 100c410:	e59f02a0 	ldr	r0, [pc, #672]	; 100c6b8 <_acq_irq_rx_handler+0x7b0>
	g_acq_state.stats.num_err_total++;
 100c414:	e2933001 	adds	r3, r3, #1
 100c418:	e3822008 	orr	r2, r2, #8
 100c41c:	e2a11000 	adc	r1, r1, #0
 100c420:	e5842780 	str	r2, [r4, #1920]	; 0x780
 100c424:	e5882050 	str	r2, [r8, #80]	; 0x50
 100c428:	e5073008 	str	r3, [r7, #-8]
	g_acq_state.sub_state = ACQSUBST_NONE;
 100c42c:	e584a004 	str	sl, [r4, #4]
	g_acq_state.stats.num_err_total++;
 100c430:	e5071004 	str	r1, [r7, #-4]
	g_acq_state.state = ACQSTATE_ERROR;
 100c434:	e584c000 	str	ip, [r4]
}
 100c438:	e28dd014 	add	sp, sp, #20
 100c43c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	XAxiDma_Reset(&g_acq_state.dma);
 100c440:	ea001775 	b	101221c <XAxiDma_Reset>
	res = _FAB_CFG_ACCESS(reg);
 100c444:	e5902058 	ldr	r2, [r0, #88]	; 0x58
	return res & mask;
 100c448:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
						if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DATA_LOSS)) {
 100c44c:	e3120004 	tst	r2, #4
 100c450:	0affffc3 	beq	100c364 <_acq_irq_rx_handler+0x45c>
							g_acq_state.stats.num_fifo_full++;
 100c454:	e59f1260 	ldr	r1, [pc, #608]	; 100c6bc <_acq_irq_rx_handler+0x7b4>
 100c458:	e3832020 	orr	r2, r3, #32
	_FAB_CFG_ACCESS(reg) = data;
 100c45c:	e5802050 	str	r2, [r0, #80]	; 0x50
							g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;
 100c460:	e3a05001 	mov	r5, #1
 100c464:	e3c33020 	bic	r3, r3, #32
							g_acq_state.state = ACQSTATE_PREP;
 100c468:	e3a0e002 	mov	lr, #2
							g_acq_state.stats.num_fifo_full++;
 100c46c:	e5912000 	ldr	r2, [r1]
 100c470:	e591c004 	ldr	ip, [r1, #4]
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c474:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c478:	e0922005 	adds	r2, r2, r5
 100c47c:	e5803050 	str	r3, [r0, #80]	; 0x50
 100c480:	e2ac0000 	adc	r0, ip, #0
							g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL;
 100c484:	e5845004 	str	r5, [r4, #4]
							g_acq_state.stats.num_fifo_full++;
 100c488:	e5812000 	str	r2, [r1]
 100c48c:	e5810004 	str	r0, [r1, #4]
							g_acq_state.state = ACQSTATE_PREP;
 100c490:	e584e000 	str	lr, [r4]
							g_acq_state.stats.num_fifo_full++;
 100c494:	eaffffb5 	b	100c370 <_acq_irq_rx_handler+0x468>
					d_printf(D_ERROR, "acquire: PL reports not done, but DMA complete! (0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_A));
 100c498:	e307168c 	movw	r1, #30348	; 0x768c
	res = _FAB_CFG_ACCESS(reg);
 100c49c:	e5982058 	ldr	r2, [r8, #88]	; 0x58
 100c4a0:	e3401106 	movt	r1, #262	; 0x106
 100c4a4:	e3a00004 	mov	r0, #4
 100c4a8:	eb000614 	bl	100dd00 <d_printf>
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100c4ac:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c4b0:	e3a02004 	mov	r2, #4
 100c4b4:	e3061724 	movw	r1, #26404	; 0x6724
 100c4b8:	e1a00002 	mov	r0, r2
 100c4bc:	e3401106 	movt	r1, #262	; 0x106
 100c4c0:	e59c3004 	ldr	r3, [ip, #4]
 100c4c4:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
 100c4c8:	e58dc000 	str	ip, [sp]
 100c4cc:	eb00060b 	bl	100dd00 <d_printf>
	g_acq_state.stats.num_err_total++;
 100c4d0:	e59f21e8 	ldr	r2, [pc, #488]	; 100c6c0 <_acq_irq_rx_handler+0x7b8>
	g_acq_state.state = ACQSTATE_ERROR;
 100c4d4:	e3a0e006 	mov	lr, #6
	g_acq_state.acq_ctrl_a |= bitmask;
 100c4d8:	e5941780 	ldr	r1, [r4, #1920]	; 0x780
	XAxiDma_Reset(&g_acq_state.dma);
 100c4dc:	e59f01d4 	ldr	r0, [pc, #468]	; 100c6b8 <_acq_irq_rx_handler+0x7b0>
	g_acq_state.stats.num_err_total++;
 100c4e0:	e9121008 	ldmdb	r2, {r3, ip}
 100c4e4:	e3811008 	orr	r1, r1, #8
 100c4e8:	e5841780 	str	r1, [r4, #1920]	; 0x780
 100c4ec:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) = data;
 100c4f0:	e5881050 	str	r1, [r8, #80]	; 0x50
 100c4f4:	e2ac1000 	adc	r1, ip, #0
 100c4f8:	e5023008 	str	r3, [r2, #-8]
	g_acq_state.sub_state = ACQSUBST_NONE;
 100c4fc:	e5847004 	str	r7, [r4, #4]
	g_acq_state.stats.num_err_total++;
 100c500:	e5021004 	str	r1, [r2, #-4]
	g_acq_state.state = ACQSTATE_ERROR;
 100c504:	e584e000 	str	lr, [r4]
	XAxiDma_Reset(&g_acq_state.dma);
 100c508:	eaffffca 	b	100c438 <_acq_irq_rx_handler+0x530>
						g_acq_state.stats.num_fifo_full++;
 100c50c:	e59f11a8 	ldr	r1, [pc, #424]	; 100c6bc <_acq_irq_rx_handler+0x7b4>
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c510:	e1d0e1b0 	ldrh	lr, [r0, #16]
						g_acq_state.stats.num_fifo_full++;
 100c514:	e8911008 	ldm	r1, {r3, ip}
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c518:	e38ee002 	orr	lr, lr, #2
 100c51c:	e1c0e1b0 	strh	lr, [r0, #16]
						g_acq_state.stats.num_fifo_full++;
 100c520:	e2933001 	adds	r3, r3, #1
 100c524:	e2acc000 	adc	ip, ip, #0
 100c528:	e8811008 	stm	r1, {r3, ip}
 100c52c:	eaffff1d 	b	100c1a8 <_acq_irq_rx_handler+0x2a0>
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c530:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
						g_acq_state.acq_early_abort = 0;
 100c534:	e3c33003 	bic	r3, r3, #3
 100c538:	e3833002 	orr	r3, r3, #2
 100c53c:	e3a01000 	mov	r1, #0
 100c540:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c544:	e34413c0 	movt	r1, #17344	; 0x43c0
					XAxiDma_BdRingAckIrq(bd_ring, irq_status);
 100c548:	e5950000 	ldr	r0, [r5]
 100c54c:	e3c23b02 	bic	r3, r2, #2048	; 0x800
 100c550:	e5843780 	str	r3, [r4, #1920]	; 0x780
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c554:	e3a02000 	mov	r2, #0
 100c558:	e5813050 	str	r3, [r1, #80]	; 0x50
	*LocalAddr = Value;
 100c55c:	e3a03a07 	mov	r3, #28672	; 0x7000
 100c560:	e5842004 	str	r2, [r4, #4]
 100c564:	e5806004 	str	r6, [r0, #4]
 100c568:	e58c3004 	str	r3, [ip, #4]
					if(dma_sent) {
 100c56c:	eaffff57 	b	100c2d0 <_acq_irq_rx_handler+0x3c8>
						g_acq_state.stats.num_fifo_full++;
 100c570:	e59f0144 	ldr	r0, [pc, #324]	; 100c6bc <_acq_irq_rx_handler+0x7b4>
	g_acq_state.acq_ctrl_a |= bitmask;
 100c574:	e3833020 	orr	r3, r3, #32
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c578:	e5947884 	ldr	r7, [r4, #2180]	; 0x884
 100c57c:	e3c11022 	bic	r1, r1, #34	; 0x22
 100c580:	e58c3050 	str	r3, [ip, #80]	; 0x50
						g_acq_state.stats.num_fifo_full++;
 100c584:	e5903000 	ldr	r3, [r0]
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c588:	e1d781b0 	ldrh	r8, [r7, #16]
						g_acq_state.stats.num_fifo_full++;
 100c58c:	e590e004 	ldr	lr, [r0, #4]
 100c590:	e2933001 	adds	r3, r3, #1
	g_acq_state.acq_ctrl_a &= ~bitmask;
 100c594:	e5841780 	str	r1, [r4, #1920]	; 0x780
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c598:	e3888002 	orr	r8, r8, #2
 100c59c:	e58c1050 	str	r1, [ip, #80]	; 0x50
						g_acq_state.stats.num_fifo_full++;
 100c5a0:	e2ae1000 	adc	r1, lr, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 100c5a4:	e1c781b0 	strh	r8, [r7, #16]
						g_acq_state.stats.num_fifo_full++;
 100c5a8:	e5803000 	str	r3, [r0]
 100c5ac:	e5801004 	str	r1, [r0, #4]
 100c5b0:	eaffff2e 	b	100c270 <_acq_irq_rx_handler+0x368>
 100c5b4:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
						g_acq_state.acq_early_abort = 0;
 100c5b8:	e3c33003 	bic	r3, r3, #3
 100c5bc:	e3833002 	orr	r3, r3, #2
 100c5c0:	e3a01000 	mov	r1, #0
 100c5c4:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c5c8:	e34413c0 	movt	r1, #17344	; 0x43c0
 100c5cc:	e3c23b02 	bic	r3, r2, #2048	; 0x800
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c5d0:	e3a0c000 	mov	ip, #0
 100c5d4:	e5843780 	str	r3, [r4, #1920]	; 0x780
 100c5d8:	e5813050 	str	r3, [r1, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 100c5dc:	e5912048 	ldr	r2, [r1, #72]	; 0x48
 100c5e0:	e584c004 	str	ip, [r4, #4]
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 100c5e4:	e580200c 	str	r2, [r0, #12]
					if(dma_sent) {
 100c5e8:	eaffff0d 	b	100c224 <_acq_irq_rx_handler+0x31c>
						if(g_acq_state.acq_current->next != NULL) {
 100c5ec:	e59cc01c 	ldr	ip, [ip, #28]
 100c5f0:	e35c0000 	cmp	ip, #0
 100c5f4:	0a000026 	beq	100c694 <_acq_irq_rx_handler+0x78c>
							if(g_acq_state.acq_early_abort) {
 100c5f8:	e5d43760 	ldrb	r3, [r4, #1888]	; 0x760
 100c5fc:	e213a001 	ands	sl, r3, #1
 100c600:	0a000009 	beq	100c62c <_acq_irq_rx_handler+0x724>
 100c604:	e3c00b82 	bic	r0, r0, #133120	; 0x20800
								g_acq_state.acq_early_abort = 0;
 100c608:	e3c33003 	bic	r3, r3, #3
 100c60c:	e3c00003 	bic	r0, r0, #3
 100c610:	e3833002 	orr	r3, r3, #2
 100c614:	e3800004 	orr	r0, r0, #4
 100c618:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c61c:	e5840780 	str	r0, [r4, #1920]	; 0x780
	_FAB_CFG_ACCESS(reg) = data;
 100c620:	e5880050 	str	r0, [r8, #80]	; 0x50
								g_acq_state.sub_state = ACQSUBST_NONE;
 100c624:	e5841004 	str	r1, [r4, #4]
 100c628:	eafffe80 	b	100c030 <_acq_irq_rx_handler+0x128>
								error = acq_start(ACQ_START_FIFO_RESET);
 100c62c:	e3a00001 	mov	r0, #1
								g_acq_state.acq_current = g_acq_state.acq_current->next;
 100c630:	e584c884 	str	ip, [r4, #2180]	; 0x884
								error = acq_start(ACQ_START_FIFO_RESET);
 100c634:	ebfffbdf 	bl	100b5b8 <acq_start>
								if(error != ACQRES_OK) {
 100c638:	e2502000 	subs	r2, r0, #0
 100c63c:	0afffe7b 	beq	100c030 <_acq_irq_rx_handler+0x128>
									d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 100c640:	e30716fc 	movw	r1, #30460	; 0x76fc
 100c644:	e1a00009 	mov	r0, r9
 100c648:	e3401106 	movt	r1, #262	; 0x106
 100c64c:	eb0005ab 	bl	100dd00 <d_printf>
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c650:	e3061724 	movw	r1, #26404	; 0x6724
			XAxiDma_ReadReg(g_acq_state.dma.RxBdRing[0].ChanBase, XAXIDMA_SR_OFFSET), \
 100c654:	e594c088 	ldr	ip, [r4, #136]	; 0x88
	d_printf(D_ERROR, "acquire: _acq_irq_error_dma error (%d), DMASR=0x%08x, BuffLen=0x%08x", cause_index, \
 100c658:	e1a00009 	mov	r0, r9
 100c65c:	e3401106 	movt	r1, #262	; 0x106
 100c660:	e3a02006 	mov	r2, #6
 100c664:	eaffff60 	b	100c3ec <_acq_irq_rx_handler+0x4e4>
 100c668:	e3c00b82 	bic	r0, r0, #133120	; 0x20800
						g_acq_state.acq_early_abort = 0;
 100c66c:	e3cc3003 	bic	r3, ip, #3
 100c670:	e3c00003 	bic	r0, r0, #3
 100c674:	e3833002 	orr	r3, r3, #2
 100c678:	e1800009 	orr	r0, r0, r9
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c67c:	e3a02000 	mov	r2, #0
 100c680:	e5840780 	str	r0, [r4, #1920]	; 0x780
						g_acq_state.acq_early_abort = 0;
 100c684:	e5c43760 	strb	r3, [r4, #1888]	; 0x760
 100c688:	e5880050 	str	r0, [r8, #80]	; 0x50
						g_acq_state.sub_state = ACQSUBST_NONE;
 100c68c:	e5842004 	str	r2, [r4, #4]
 100c690:	eafffe66 	b	100c030 <_acq_irq_rx_handler+0x128>
							d_printf(D_ERROR, "acquire: NULL deref trying to move to next wavebuffer; something's wrong! (%d acq made, %d requested)", \
 100c694:	e3071730 	movw	r1, #30512	; 0x7730
 100c698:	e1a00009 	mov	r0, r9
 100c69c:	e3401106 	movt	r1, #262	; 0x106
 100c6a0:	eb000596 	bl	100dd00 <d_printf>
							acq_debug_dump();
 100c6a4:	ebfffc71 	bl	100b870 <acq_debug_dump>
 100c6a8:	eafffe60 	b	100c030 <_acq_irq_rx_handler+0x128>
 100c6ac:	01459ac0 	.word	0x01459ac0
 100c6b0:	01459aa0 	.word	0x01459aa0
 100c6b4:	01459a90 	.word	0x01459a90
 100c6b8:	014592e8 	.word	0x014592e8
 100c6bc:	01459ae0 	.word	0x01459ae0
 100c6c0:	01459ab0 	.word	0x01459ab0

0100c6c4 <acq_debug_dump_waveraw>:

/*
 * Dump raw contents of buffer in active acquisition.
 */
void acq_debug_dump_waveraw()
{
 100c6c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	uint32_t sz;
	uint32_t i;

	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
		sz = g_acq_state.pre_buffsz;
 100c6c8:	e30952e0 	movw	r5, #37600	; 0x92e0
 100c6cc:	e3405145 	movt	r5, #325	; 0x145
	}

	sz /= 4;

	for(i = 0; i <= sz; i += 2) {
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 100c6d0:	e3077804 	movw	r7, #30724	; 0x7804
 100c6d4:	e3407106 	movt	r7, #262	; 0x106
		sz = g_acq_state.pre_buffsz;
 100c6d8:	e3a04000 	mov	r4, #0
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 100c6dc:	e5953004 	ldr	r3, [r5, #4]
{
 100c6e0:	e24dd00c 	sub	sp, sp, #12
		sz = g_acq_state.pre_buffsz;
 100c6e4:	e5952764 	ldr	r2, [r5, #1892]	; 0x764
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 100c6e8:	e2433001 	sub	r3, r3, #1
 100c6ec:	e3530001 	cmp	r3, #1
		sz = g_acq_state.post_buffsz;
 100c6f0:	85956768 	ldrhi	r6, [r5, #1896]	; 0x768
		sz = g_acq_state.pre_buffsz;
 100c6f4:	91a06002 	movls	r6, r2
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c6f8:	930717a4 	movwls	r1, #30628	; 0x77a4
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c6fc:	830717d4 	movwhi	r1, #30676	; 0x77d4
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c700:	93401106 	movtls	r1, #262	; 0x106
 100c704:	93a00002 	movls	r0, #2
 100c708:	e3c66007 	bic	r6, r6, #7
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100c70c:	83401106 	movthi	r1, #262	; 0x106
 100c710:	e2866008 	add	r6, r6, #8
 100c714:	83a00002 	movhi	r0, #2
 100c718:	eb000578 	bl	100dd00 <d_printf>
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 100c71c:	e5953884 	ldr	r3, [r5, #2180]	; 0x884
 100c720:	e1a02004 	mov	r2, r4
 100c724:	e1a01007 	mov	r1, r7
 100c728:	e3a00002 	mov	r0, #2
 100c72c:	e593c008 	ldr	ip, [r3, #8]
 100c730:	e7bc3004 	ldr	r3, [ip, r4]!
 100c734:	e2844008 	add	r4, r4, #8
 100c738:	e59cc004 	ldr	ip, [ip, #4]
 100c73c:	e58dc000 	str	ip, [sp]
 100c740:	eb00056e 	bl	100dd00 <d_printf>
	for(i = 0; i <= sz; i += 2) {
 100c744:	e1560004 	cmp	r6, r4
 100c748:	1afffff3 	bne	100c71c <acq_debug_dump_waveraw+0x58>
	}

	d_printf(D_INFO, "** End of Waveform Data **");
 100c74c:	e307181c 	movw	r1, #30748	; 0x781c
 100c750:	e3a00002 	mov	r0, #2
 100c754:	e3401106 	movt	r1, #262	; 0x106
}
 100c758:	e28dd00c 	add	sp, sp, #12
 100c75c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "** End of Waveform Data **");
 100c760:	ea000566 	b	100dd00 <d_printf>

0100c764 <acq_get_ll_pointer>:
 * 			ACQRES_WAVE_NOT_FOUND if... well... the waveform wasn't found
 */
int acq_get_ll_pointer(int index, struct acq_buffer_t **buff, int list_used)
{
	struct acq_buffer_t *wave;
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c764:	e2423001 	sub	r3, r2, #1
{
 100c768:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c76c:	e3530001 	cmp	r3, #1
{
 100c770:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c774:	8a00001c 	bhi	100c7ec <acq_get_ll_pointer+0x88>

	if(list_used == ACQLIST_ACQ)
		wave = g_acq_state.acq_first;
 100c778:	e30932e0 	movw	r3, #37600	; 0x92e0
	if(list_used == ACQLIST_ACQ)
 100c77c:	e3520001 	cmp	r2, #1
		wave = g_acq_state.acq_first;
 100c780:	e3403145 	movt	r3, #325	; 0x145
 100c784:	0593c880 	ldreq	ip, [r3, #2176]	; 0x880
	else
		wave = g_acq_state.acq_done_first;
 100c788:	1593c888 	ldrne	ip, [r3, #2184]	; 0x888

	while(wave != NULL) {
 100c78c:	e35c0000 	cmp	ip, #0
 100c790:	0a000009 	beq	100c7bc <acq_get_ll_pointer+0x58>
		//d_printf(D_EXINFO, "explore: 0x%08x (%d) (buff_acq:0x%08x, trigger_at:0x%08x %d)", \
				wave, wave->idx, wave->buff_acq, wave->trigger_at, wave->trigger_at);

		if(wave->idx == index)
 100c794:	e59c3000 	ldr	r3, [ip]
 100c798:	e1500003 	cmp	r0, r3
 100c79c:	1a000003 	bne	100c7b0 <acq_get_ll_pointer+0x4c>
 100c7a0:	ea00000d 	b	100c7dc <acq_get_ll_pointer+0x78>
 100c7a4:	e59ce000 	ldr	lr, [ip]
 100c7a8:	e15e0000 	cmp	lr, r0
 100c7ac:	0a00000a 	beq	100c7dc <acq_get_ll_pointer+0x78>
			break;

		wave = wave->next;
 100c7b0:	e59cc01c 	ldr	ip, [ip, #28]
	while(wave != NULL) {
 100c7b4:	e35c0000 	cmp	ip, #0
 100c7b8:	1afffff9 	bne	100c7a4 <acq_get_ll_pointer+0x40>
	}

	if(wave == NULL) {
		d_printf(D_ERROR, "Unable to find waveindex %d with list_used %02x", index, list_used);
 100c7bc:	e3071870 	movw	r1, #30832	; 0x7870
 100c7c0:	e1a03002 	mov	r3, r2
 100c7c4:	e3401106 	movt	r1, #262	; 0x106
 100c7c8:	e1a02000 	mov	r2, r0
 100c7cc:	e3a00004 	mov	r0, #4
 100c7d0:	eb00054a 	bl	100dd00 <d_printf>
 100c7d4:	e3e00009 	mvn	r0, #9
 100c7d8:	ea000001 	b	100c7e4 <acq_get_ll_pointer+0x80>
		return ACQRES_WAVE_NOT_FOUND;
	}

	*buff = wave;
	return ACQRES_OK;
 100c7dc:	e3a00000 	mov	r0, #0
	*buff = wave;
 100c7e0:	e581c000 	str	ip, [r1]
}
 100c7e4:	e28dd00c 	add	sp, sp, #12
 100c7e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(list_used == ACQLIST_ACQ || list_used == ACQLIST_DONE);
 100c7ec:	e30005b1 	movw	r0, #1457	; 0x5b1
 100c7f0:	e30639c8 	movw	r3, #27080	; 0x69c8
 100c7f4:	e3072838 	movw	r2, #30776	; 0x7838
 100c7f8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100c7fc:	e58d0000 	str	r0, [sp]
 100c800:	e3403106 	movt	r3, #262	; 0x106
 100c804:	e3a00004 	mov	r0, #4
 100c808:	e3402106 	movt	r2, #262	; 0x106
 100c80c:	e3401106 	movt	r1, #262	; 0x106
 100c810:	eb00053a 	bl	100dd00 <d_printf>
 100c814:	e3e00062 	mvn	r0, #98	; 0x62
 100c818:	fa003704 	blx	101a430 <exit>

0100c81c <acq_next_ll_pointer>:
 * @param	buff	Current waveform pointer
 * @param	next	Pointer to result for next waveform pointer; set to NULL if no next exists
 */
int acq_next_ll_pointer(struct acq_buffer_t *this, struct acq_buffer_t **next)
{
	D_ASSERT(this != NULL && next != NULL);
 100c81c:	e3510000 	cmp	r1, #0
 100c820:	13500000 	cmpne	r0, #0
 100c824:	0a000005 	beq	100c840 <acq_next_ll_pointer+0x24>

	if(this->next != NULL) {
 100c828:	e590301c 	ldr	r3, [r0, #28]
 100c82c:	e3530000 	cmp	r3, #0
 100c830:	e5813000 	str	r3, [r1]
		return ACQRES_OK;
	}

	*next = NULL;
	return ACQRES_END_OF_WAVE_LL;
}
 100c834:	03e0000b 	mvneq	r0, #11
 100c838:	13a00000 	movne	r0, #0
 100c83c:	e12fff1e 	bx	lr
{
 100c840:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(this != NULL && next != NULL);
 100c844:	e30005d4 	movw	r0, #1492	; 0x5d4
{
 100c848:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(this != NULL && next != NULL);
 100c84c:	e30639c8 	movw	r3, #27080	; 0x69c8
 100c850:	e30728a0 	movw	r2, #30880	; 0x78a0
 100c854:	e30619f0 	movw	r1, #27120	; 0x69f0
 100c858:	e58d0000 	str	r0, [sp]
 100c85c:	e3403106 	movt	r3, #262	; 0x106
 100c860:	e3a00004 	mov	r0, #4
 100c864:	e3402106 	movt	r2, #262	; 0x106
 100c868:	e3401106 	movt	r1, #262	; 0x106
 100c86c:	eb000523 	bl	100dd00 <d_printf>
 100c870:	e3e00062 	mvn	r0, #98	; 0x62
 100c874:	fa0036ed 	blx	101a430 <exit>

0100c878 <acq_debug_dump_wave>:
 * Dump information from a wave N.
 *
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 */
void acq_debug_dump_wave(int index)
{
 100c878:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
		wave = g_acq_state.acq_first;
 100c87c:	e30962e0 	movw	r6, #37600	; 0x92e0
 100c880:	e3406145 	movt	r6, #325	; 0x145
{
 100c884:	e24dd008 	sub	sp, sp, #8
 100c888:	e1a05000 	mov	r5, r0
		wave = g_acq_state.acq_first;
 100c88c:	e5964880 	ldr	r4, [r6, #2176]	; 0x880
	while(wave != NULL) {
 100c890:	e3540000 	cmp	r4, #0
 100c894:	1a000003 	bne	100c8a8 <acq_debug_dump_wave+0x30>
 100c898:	ea000052 	b	100c9e8 <acq_debug_dump_wave+0x170>
		wave = wave->next;
 100c89c:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 100c8a0:	e3540000 	cmp	r4, #0
 100c8a4:	0a00004f 	beq	100c9e8 <acq_debug_dump_wave+0x170>
		if(wave->idx == index)
 100c8a8:	e5943000 	ldr	r3, [r4]
 100c8ac:	e1550003 	cmp	r5, r3
 100c8b0:	1afffff9 	bne	100c89c <acq_debug_dump_wave+0x24>
	}

	// d_printf(D_ERROR, "Pointer: 0x%08x", wave);

	// Dump info about this wave
	d_printf(D_INFO, "");
 100c8b4:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100c8b8:	e3a00002 	mov	r0, #2
 100c8bc:	e3401106 	movt	r1, #262	; 0x106
 100c8c0:	eb00050e 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "** Waveinfo for index %d **", index);
 100c8c4:	e30719a8 	movw	r1, #31144	; 0x79a8
 100c8c8:	e1a02005 	mov	r2, r5
 100c8cc:	e3401106 	movt	r1, #262	; 0x106
 100c8d0:	e3a00002 	mov	r0, #2
 100c8d4:	eb000509 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 100c8d8:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100c8dc:	e3a00002 	mov	r0, #2
 100c8e0:	e3401106 	movt	r1, #262	; 0x106
 100c8e4:	eb000505 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "buff_acq address      = 0x%08x", wave->buff_acq);
 100c8e8:	e30719c4 	movw	r1, #31172	; 0x79c4
 100c8ec:	e5942008 	ldr	r2, [r4, #8]
 100c8f0:	e3401106 	movt	r1, #262	; 0x106
 100c8f4:	e3a00002 	mov	r0, #2
 100c8f8:	eb000500 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "buff_alloc address    = 0x%08x", wave->buff_alloc);
 100c8fc:	e30719e4 	movw	r1, #31204	; 0x79e4
 100c900:	e5942004 	ldr	r2, [r4, #4]
 100c904:	e3401106 	movt	r1, #262	; 0x106
 100c908:	e3a00002 	mov	r0, #2
 100c90c:	eb0004fb 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 100c910:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100c914:	e3a00002 	mov	r0, #2
 100c918:	e3401106 	movt	r1, #262	; 0x106
 100c91c:	eb0004f7 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "idx                   = %d", wave->idx);
 100c920:	e3071a04 	movw	r1, #31236	; 0x7a04
 100c924:	e5942000 	ldr	r2, [r4]
 100c928:	e3401106 	movt	r1, #262	; 0x106
 100c92c:	e3a00002 	mov	r0, #2
 100c930:	eb0004f2 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "flags                 = 0x%04x", wave->flags);
 100c934:	e3071a20 	movw	r1, #31264	; 0x7a20
 100c938:	e1d421b0 	ldrh	r2, [r4, #16]
 100c93c:	e3401106 	movt	r1, #262	; 0x106
 100c940:	e3a00002 	mov	r0, #2
 100c944:	eb0004ed 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "trigger_at            = 0x%08x", wave->trigger_at);
 100c948:	e3071a40 	movw	r1, #31296	; 0x7a40
 100c94c:	e594200c 	ldr	r2, [r4, #12]
 100c950:	e3401106 	movt	r1, #262	; 0x106
 100c954:	e3a00002 	mov	r0, #2
 100c958:	eb0004e8 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "trigger_at(div8)      = 0x%08x (%d)", wave->trigger_at >> 3, wave->trigger_at >> 3);
 100c95c:	e594300c 	ldr	r3, [r4, #12]
 100c960:	e3071a60 	movw	r1, #31328	; 0x7a60
 100c964:	e3401106 	movt	r1, #262	; 0x106
 100c968:	e3a00002 	mov	r0, #2
 100c96c:	e1a031a3 	lsr	r3, r3, #3
 100c970:	e1a02003 	mov	r2, r3
 100c974:	eb0004e1 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "trigger_at(div16)     = 0x%08x (%d)", wave->trigger_at >> 4, wave->trigger_at >> 4);
 100c978:	e594300c 	ldr	r3, [r4, #12]
 100c97c:	e3071a84 	movw	r1, #31364	; 0x7a84
 100c980:	e3401106 	movt	r1, #262	; 0x106
 100c984:	e3a00002 	mov	r0, #2
 100c988:	e1a03223 	lsr	r3, r3, #4
 100c98c:	e1a02003 	mov	r2, r3
 100c990:	eb0004da 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 100c994:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100c998:	e3a00002 	mov	r0, #2
 100c99c:	e3401106 	movt	r1, #262	; 0x106
 100c9a0:	eb0004d6 	bl	100dd00 <d_printf>

	// If waveform is completed with trigger then display it
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 100c9a4:	e594300c 	ldr	r3, [r4, #12]
 100c9a8:	e3530000 	cmp	r3, #0
 100c9ac:	ba000002 	blt	100c9bc <acq_debug_dump_wave+0x144>
 100c9b0:	e1d431b0 	ldrh	r3, [r4, #16]
 100c9b4:	e3130001 	tst	r3, #1
 100c9b8:	1a000017 	bne	100ca1c <acq_debug_dump_wave+0x1a4>

		for(i = start; i < end; i += 2) {
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
		}
	} else {
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
 100c9bc:	e3071940 	movw	r1, #31040	; 0x7940
 100c9c0:	e1a02005 	mov	r2, r5
 100c9c4:	e3401106 	movt	r1, #262	; 0x106
 100c9c8:	e3a00004 	mov	r0, #4
 100c9cc:	eb0004cb 	bl	100dd00 <d_printf>
	}

	d_printf(D_INFO, "");
 100c9d0:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100c9d4:	e3a00002 	mov	r0, #2
 100c9d8:	e3401106 	movt	r1, #262	; 0x106
}
 100c9dc:	e28dd008 	add	sp, sp, #8
 100c9e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "");
 100c9e4:	ea0004c5 	b	100dd00 <d_printf>
		d_printf(D_ERROR, "Unable to find waveindex %d with list_used %02x", index, list_used);
 100c9e8:	e3071870 	movw	r1, #30832	; 0x7870
 100c9ec:	e1a02005 	mov	r2, r5
 100c9f0:	e3a03001 	mov	r3, #1
 100c9f4:	e3401106 	movt	r1, #262	; 0x106
 100c9f8:	e3a00004 	mov	r0, #4
 100c9fc:	eb0004bf 	bl	100dd00 <d_printf>
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100ca00:	e3071974 	movw	r1, #31092	; 0x7974
 100ca04:	e1a02005 	mov	r2, r5
 100ca08:	e3401106 	movt	r1, #262	; 0x106
 100ca0c:	e3a00004 	mov	r0, #4
}
 100ca10:	e28dd008 	add	sp, sp, #8
 100ca14:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100ca18:	ea0004b8 	b	100dd00 <d_printf>
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 100ca1c:	e596176c 	ldr	r1, [r6, #1900]	; 0x76c
 100ca20:	e5940008 	ldr	r0, [r4, #8]
 100ca24:	eb002b79 	bl	1017810 <Xil_DCacheInvalidateRange>
		dmb();
 100ca28:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100ca2c:	e594700c 	ldr	r7, [r4, #12]
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 100ca30:	e3a03000 	mov	r3, #0
		end = g_acq_state.pre_sampct * 2;
 100ca34:	e5969788 	ldr	r9, [r6, #1928]	; 0x788
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 100ca38:	e30718c0 	movw	r1, #30912	; 0x78c0
 100ca3c:	e58d3000 	str	r3, [sp]
 100ca40:	e3401106 	movt	r1, #262	; 0x106
 100ca44:	e3a00002 	mov	r0, #2
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100ca48:	e1a071a7 	lsr	r7, r7, #3
		end = g_acq_state.pre_sampct * 2;
 100ca4c:	e1a09089 	lsl	r9, r9, #1
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100ca50:	e2877001 	add	r7, r7, #1
 100ca54:	e1a08087 	lsl	r8, r7, #1
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 100ca58:	e1a02009 	mov	r2, r9
 100ca5c:	e1a03008 	mov	r3, r8
		for(i = start; i < end; i += 2) {
 100ca60:	e1a05008 	mov	r5, r8
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 100ca64:	eb0004a5 	bl	100dd00 <d_printf>
		for(i = start; i < end; i += 2) {
 100ca68:	e1580009 	cmp	r8, r9
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100ca6c:	3307a8e0 	movwcc	sl, #30944	; 0x78e0
 100ca70:	31a07187 	lslcc	r7, r7, #3
 100ca74:	3340a106 	movtcc	sl, #262	; 0x106
		for(i = start; i < end; i += 2) {
 100ca78:	2a00000b 	bcs	100caac <acq_debug_dump_wave+0x234>
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100ca7c:	e594c008 	ldr	ip, [r4, #8]
 100ca80:	e1a02005 	mov	r2, r5
 100ca84:	e1a0100a 	mov	r1, sl
		for(i = start; i < end; i += 2) {
 100ca88:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100ca8c:	e3a00000 	mov	r0, #0
 100ca90:	e7bc3007 	ldr	r3, [ip, r7]!
 100ca94:	e2877008 	add	r7, r7, #8
 100ca98:	e59cc004 	ldr	ip, [ip, #4]
 100ca9c:	e58dc000 	str	ip, [sp]
 100caa0:	eb000496 	bl	100dd00 <d_printf>
		for(i = start; i < end; i += 2) {
 100caa4:	e1590005 	cmp	r9, r5
 100caa8:	8afffff3 	bhi	100ca7c <acq_debug_dump_wave+0x204>
{
 100caac:	e3a07000 	mov	r7, #0
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cab0:	e3079900 	movw	r9, #30976	; 0x7900
		for(i = 0; i < start; i += 2) {
 100cab4:	e1a05007 	mov	r5, r7
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cab8:	e3409106 	movt	r9, #262	; 0x106
 100cabc:	e594c008 	ldr	ip, [r4, #8]
 100cac0:	e1a02005 	mov	r2, r5
 100cac4:	e1a01009 	mov	r1, r9
		for(i = 0; i < start; i += 2) {
 100cac8:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cacc:	e3a00000 	mov	r0, #0
 100cad0:	e7bc3007 	ldr	r3, [ip, r7]!
 100cad4:	e2877008 	add	r7, r7, #8
 100cad8:	e59cc004 	ldr	ip, [ip, #4]
 100cadc:	e58dc000 	str	ip, [sp]
 100cae0:	eb000486 	bl	100dd00 <d_printf>
		for(i = 0; i < start; i += 2) {
 100cae4:	e1580005 	cmp	r8, r5
 100cae8:	8afffff3 	bhi	100cabc <acq_debug_dump_wave+0x244>
		start = g_acq_state.pre_sampct * 2;
 100caec:	e5963788 	ldr	r3, [r6, #1928]	; 0x788
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100caf0:	e596778c 	ldr	r7, [r6, #1932]	; 0x78c
 100caf4:	e0837007 	add	r7, r3, r7
		for(i = start; i < end; i += 2) {
 100caf8:	e1a05083 	lsl	r5, r3, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100cafc:	e1a07087 	lsl	r7, r7, #1
		for(i = start; i < end; i += 2) {
 100cb00:	e1550007 	cmp	r5, r7
 100cb04:	2affffb1 	bcs	100c9d0 <acq_debug_dump_wave+0x158>
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cb08:	e3078920 	movw	r8, #31008	; 0x7920
 100cb0c:	e1a06183 	lsl	r6, r3, #3
 100cb10:	e3408106 	movt	r8, #262	; 0x106
 100cb14:	e594c008 	ldr	ip, [r4, #8]
 100cb18:	e1a02005 	mov	r2, r5
 100cb1c:	e1a01008 	mov	r1, r8
		for(i = start; i < end; i += 2) {
 100cb20:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 100cb24:	e3a00000 	mov	r0, #0
 100cb28:	e7bc3006 	ldr	r3, [ip, r6]!
 100cb2c:	e2866008 	add	r6, r6, #8
 100cb30:	e59cc004 	ldr	ip, [ip, #4]
 100cb34:	e58dc000 	str	ip, [sp]
 100cb38:	eb000470 	bl	100dd00 <d_printf>
		for(i = start; i < end; i += 2) {
 100cb3c:	e1570005 	cmp	r7, r5
 100cb40:	8afffff3 	bhi	100cb14 <acq_debug_dump_wave+0x29c>
 100cb44:	eaffffa1 	b	100c9d0 <acq_debug_dump_wave+0x158>

0100cb48 <acq_copy_slow_mipi>:
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 * @param	buffer	Buffer to place assembled waveform.  The buffer must be at least as large as the
 * 					total_buffsz parameter or buffer overflow could occur.
 */
int acq_copy_slow_mipi(int index, uint32_t *buffer)
{
 100cb48:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
		wave = g_acq_state.acq_done_first;
 100cb4c:	e30952e0 	movw	r5, #37600	; 0x92e0
 100cb50:	e3405145 	movt	r5, #325	; 0x145
{
 100cb54:	e24dd00c 	sub	sp, sp, #12
 100cb58:	e1a06000 	mov	r6, r0
		wave = g_acq_state.acq_done_first;
 100cb5c:	e5954888 	ldr	r4, [r5, #2184]	; 0x888
	while(wave != NULL) {
 100cb60:	e3540000 	cmp	r4, #0
 100cb64:	0a00000a 	beq	100cb94 <acq_copy_slow_mipi+0x4c>
		if(wave->idx == index)
 100cb68:	e5943000 	ldr	r3, [r4]
 100cb6c:	e1a07001 	mov	r7, r1
 100cb70:	e1500003 	cmp	r0, r3
 100cb74:	1a000003 	bne	100cb88 <acq_copy_slow_mipi+0x40>
 100cb78:	ea000013 	b	100cbcc <acq_copy_slow_mipi+0x84>
 100cb7c:	e5943000 	ldr	r3, [r4]
 100cb80:	e1560003 	cmp	r6, r3
 100cb84:	0a000010 	beq	100cbcc <acq_copy_slow_mipi+0x84>
		wave = wave->next;
 100cb88:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 100cb8c:	e3540000 	cmp	r4, #0
 100cb90:	1afffff9 	bne	100cb7c <acq_copy_slow_mipi+0x34>
		d_printf(D_ERROR, "Unable to find waveindex %d with list_used %02x", index, list_used);
 100cb94:	e3071870 	movw	r1, #30832	; 0x7870
 100cb98:	e3a03002 	mov	r3, #2
 100cb9c:	e1a02006 	mov	r2, r6
 100cba0:	e3401106 	movt	r1, #262	; 0x106
 100cba4:	e3a00004 	mov	r0, #4
 100cba8:	eb000454 	bl	100dd00 <d_printf>

	// Find the LL pointer to this waveindex
	res = acq_get_ll_pointer(index, &wave, ACQLIST_DONE);

	if(res != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100cbac:	e3071974 	movw	r1, #31092	; 0x7974
 100cbb0:	e1a02006 	mov	r2, r6
 100cbb4:	e3401106 	movt	r1, #262	; 0x106
 100cbb8:	e3a00004 	mov	r0, #4
 100cbbc:	eb00044f 	bl	100dd00 <d_printf>
		return res;
 100cbc0:	e3e00009 	mvn	r0, #9
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
		buffer += start;
	} else {
		return ACQRES_WAVE_NOT_READY;
	}
}
 100cbc4:	e28dd00c 	add	sp, sp, #12
 100cbc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 100cbcc:	e594300c 	ldr	r3, [r4, #12]
 100cbd0:	e3530000 	cmp	r3, #0
 100cbd4:	ba000002 	blt	100cbe4 <acq_copy_slow_mipi+0x9c>
 100cbd8:	e1d431b0 	ldrh	r3, [r4, #16]
 100cbdc:	e3130001 	tst	r3, #1
 100cbe0:	1a000002 	bne	100cbf0 <acq_copy_slow_mipi+0xa8>
		return ACQRES_WAVE_NOT_READY;
 100cbe4:	e3e0000a 	mvn	r0, #10
}
 100cbe8:	e28dd00c 	add	sp, sp, #12
 100cbec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 100cbf0:	e595176c 	ldr	r1, [r5, #1900]	; 0x76c
 100cbf4:	e5940008 	ldr	r0, [r4, #8]
 100cbf8:	eb002b04 	bl	1017810 <Xil_DCacheInvalidateRange>
		dmb();
 100cbfc:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100cc00:	e594600c 	ldr	r6, [r4, #12]
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 100cc04:	e3a00001 	mov	r0, #1
		end = g_acq_state.pre_sampct * 2;
 100cc08:	e5959788 	ldr	r9, [r5, #1928]	; 0x788
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 100cc0c:	e3071aa8 	movw	r1, #31400	; 0x7aa8
 100cc10:	e5942008 	ldr	r2, [r4, #8]
 100cc14:	e3401106 	movt	r1, #262	; 0x106
		start = (((wave->trigger_at >> 3) + 1) * 2);
 100cc18:	e1a061a6 	lsr	r6, r6, #3
 100cc1c:	e0866000 	add	r6, r6, r0
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cc20:	e0498006 	sub	r8, r9, r6
 100cc24:	e1a06186 	lsl	r6, r6, #3
 100cc28:	e1a08188 	lsl	r8, r8, #3
 100cc2c:	e1a09189 	lsl	r9, r9, #3
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 100cc30:	eb000432 	bl	100dd00 <d_printf>
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cc34:	e5942008 	ldr	r2, [r4, #8]
 100cc38:	e3071abc 	movw	r1, #31420	; 0x7abc
 100cc3c:	e1a03006 	mov	r3, r6
 100cc40:	e1cd80f0 	strd	r8, [sp]
 100cc44:	e3401106 	movt	r1, #262	; 0x106
 100cc48:	e3a00001 	mov	r0, #1
 100cc4c:	e0822006 	add	r2, r2, r6
		buffer += (end - start);
 100cc50:	e0879008 	add	r9, r7, r8
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cc54:	eb000429 	bl	100dd00 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100cc58:	e5941008 	ldr	r1, [r4, #8]
 100cc5c:	e1a02008 	mov	r2, r8
 100cc60:	e1a00007 	mov	r0, r7
		buffer += start;
 100cc64:	e0897006 	add	r7, r9, r6
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100cc68:	e0811006 	add	r1, r1, r6
 100cc6c:	eb003b63 	bl	101ba00 <memcpy>
		d_printf(D_EXINFO, "1. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq, 0, start * 4, start * 4);
 100cc70:	e3071af4 	movw	r1, #31476	; 0x7af4
 100cc74:	e5942008 	ldr	r2, [r4, #8]
 100cc78:	e3a03000 	mov	r3, #0
 100cc7c:	e58d6004 	str	r6, [sp, #4]
 100cc80:	e58d6000 	str	r6, [sp]
 100cc84:	e3401106 	movt	r1, #262	; 0x106
 100cc88:	e3a00001 	mov	r0, #1
 100cc8c:	eb00041b 	bl	100dd00 <d_printf>
		memcpy(buffer, wave->buff_acq, start * 4);
 100cc90:	e1a02006 	mov	r2, r6
 100cc94:	e5941008 	ldr	r1, [r4, #8]
 100cc98:	e1a00009 	mov	r0, r9
 100cc9c:	eb003b57 	bl	101ba00 <memcpy>
		start = g_acq_state.pre_sampct * 2;
 100cca0:	e595c788 	ldr	ip, [r5, #1928]	; 0x788
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100cca4:	e3071b2c 	movw	r1, #31532	; 0x7b2c
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100cca8:	e595678c 	ldr	r6, [r5, #1932]	; 0x78c
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100ccac:	e3401106 	movt	r1, #262	; 0x106
 100ccb0:	e5942008 	ldr	r2, [r4, #8]
 100ccb4:	e3a00001 	mov	r0, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 100ccb8:	e08c3006 	add	r3, ip, r6
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100ccbc:	e1a0518c 	lsl	r5, ip, #3
 100ccc0:	e1a06186 	lsl	r6, r6, #3
 100ccc4:	e1a03183 	lsl	r3, r3, #3
 100ccc8:	e0822005 	add	r2, r2, r5
 100cccc:	e58d3004 	str	r3, [sp, #4]
 100ccd0:	e58d6000 	str	r6, [sp]
 100ccd4:	e1a03005 	mov	r3, r5
 100ccd8:	eb000408 	bl	100dd00 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100ccdc:	e5941008 	ldr	r1, [r4, #8]
 100cce0:	e1a00007 	mov	r0, r7
 100cce4:	e1a02006 	mov	r2, r6
 100cce8:	e0811005 	add	r1, r1, r5
}
 100ccec:	e28dd00c 	add	sp, sp, #12
 100ccf0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100ccf4:	ea003b41 	b	101ba00 <memcpy>

0100ccf8 <acq_dma_address_helper>:
 */
int acq_dma_address_helper(struct acq_buffer_t *wave, struct acq_dma_addr_t *addr_helper)
{
	uint32_t start, end;

	D_ASSERT(wave != NULL);
 100ccf8:	e3500000 	cmp	r0, #0
{
 100ccfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100cd00:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(wave != NULL);
 100cd04:	0a000018 	beq	100cd6c <acq_dma_address_helper+0x74>
	D_ASSERT(addr_helper != NULL);
 100cd08:	e3510000 	cmp	r1, #0
 100cd0c:	0a000022 	beq	100cd9c <acq_dma_address_helper+0xa4>

	if((wave->trigger_at & TRIGGER_INVALID_MASK) || !(wave->flags & ACQBUF_FLAG_READY_CSI)) {
 100cd10:	e590300c 	ldr	r3, [r0, #12]
 100cd14:	e3530000 	cmp	r3, #0
 100cd18:	ba000027 	blt	100cdbc <acq_dma_address_helper+0xc4>
 100cd1c:	e1d021b0 	ldrh	r2, [r0, #16]
 100cd20:	e3120c01 	tst	r2, #256	; 0x100
 100cd24:	0a000024 	beq	100cdbc <acq_dma_address_helper+0xc4>
	//end = ACQ_64SAMPCT_TO_32PTR(wave->pre_sz);

	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
	end = wave->pre_sz;

	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100cd28:	e5902008 	ldr	r2, [r0, #8]
	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
 100cd2c:	e3c33007 	bic	r3, r3, #7
	end = wave->pre_sz;
 100cd30:	e590e014 	ldr	lr, [r0, #20]
	start = ACQ_TRIGGER_AT_TO_BYPTR(wave->trigger_at);
 100cd34:	e2833008 	add	r3, r3, #8

	addr_helper->pre_lower_start = (uint32_t)wave->buff_acq;
	addr_helper->pre_lower_end = addr_helper->pre_lower_start + start;

	addr_helper->post_start = (uint32_t)wave->buff_acq + wave->pre_sz;
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100cd38:	e590c018 	ldr	ip, [r0, #24]

	return ACQRES_OK;
 100cd3c:	e3a00000 	mov	r0, #0
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100cd40:	e0833002 	add	r3, r3, r2
	addr_helper->pre_lower_start = (uint32_t)wave->buff_acq;
 100cd44:	e5812000 	str	r2, [r1]
	addr_helper->pre_upper_end = addr_helper->pre_upper_start + end - start;
 100cd48:	e082200e 	add	r2, r2, lr
	addr_helper->pre_upper_start = (uint32_t)wave->buff_acq + start;
 100cd4c:	e5813008 	str	r3, [r1, #8]
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100cd50:	e08cc002 	add	ip, ip, r2
	addr_helper->pre_lower_end = addr_helper->pre_lower_start + start;
 100cd54:	e5813004 	str	r3, [r1, #4]
	addr_helper->pre_upper_end = addr_helper->pre_upper_start + end - start;
 100cd58:	e581200c 	str	r2, [r1, #12]
	addr_helper->post_start = (uint32_t)wave->buff_acq + wave->pre_sz;
 100cd5c:	e5812010 	str	r2, [r1, #16]
	addr_helper->post_end = addr_helper->post_start + wave->post_sz;
 100cd60:	e581c014 	str	ip, [r1, #20]
}
 100cd64:	e28dd00c 	add	sp, sp, #12
 100cd68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(wave != NULL);
 100cd6c:	e30639c8 	movw	r3, #27080	; 0x69c8
 100cd70:	e3072b64 	movw	r2, #31588	; 0x7b64
 100cd74:	e30619f0 	movw	r1, #27120	; 0x69f0
 100cd78:	e3403106 	movt	r3, #262	; 0x106
 100cd7c:	e3402106 	movt	r2, #262	; 0x106
 100cd80:	e3a00d1a 	mov	r0, #1664	; 0x680
 100cd84:	e58d0000 	str	r0, [sp]
	D_ASSERT(addr_helper != NULL);
 100cd88:	e3a00004 	mov	r0, #4
 100cd8c:	e3401106 	movt	r1, #262	; 0x106
 100cd90:	eb0003da 	bl	100dd00 <d_printf>
 100cd94:	e3e00062 	mvn	r0, #98	; 0x62
 100cd98:	fa0035a4 	blx	101a430 <exit>
 100cd9c:	e3000681 	movw	r0, #1665	; 0x681
 100cda0:	e30639c8 	movw	r3, #27080	; 0x69c8
 100cda4:	e3072b74 	movw	r2, #31604	; 0x7b74
 100cda8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100cdac:	e58d0000 	str	r0, [sp]
 100cdb0:	e3403106 	movt	r3, #262	; 0x106
 100cdb4:	e3402106 	movt	r2, #262	; 0x106
 100cdb8:	eafffff2 	b	100cd88 <acq_dma_address_helper+0x90>
		return ACQRES_WAVE_NOT_READY;
 100cdbc:	e3e0000a 	mvn	r0, #10
 100cdc0:	eaffffe7 	b	100cd64 <acq_dma_address_helper+0x6c>

0100cdc4 <acq_get_wave_size_bytes>:
 */
unsigned int acq_get_wave_size_bytes(int region)
{
	unsigned int size = 0;

	if(region & ACQ_REGION_PRE)
 100cdc4:	e2103001 	ands	r3, r0, #1
{
 100cdc8:	e1a02000 	mov	r2, r0
		size += g_acq_state.pre_buffsz;
 100cdcc:	130932e0 	movwne	r3, #37600	; 0x92e0
	unsigned int size = 0;
 100cdd0:	01a00003 	moveq	r0, r3
		size += g_acq_state.pre_buffsz;
 100cdd4:	13403145 	movtne	r3, #325	; 0x145
 100cdd8:	15930764 	ldrne	r0, [r3, #1892]	; 0x764

	if(region & ACQ_REGION_POST)
 100cddc:	e3120002 	tst	r2, #2
		size += g_acq_state.post_buffsz;
 100cde0:	130932e0 	movwne	r3, #37600	; 0x92e0
 100cde4:	13403145 	movtne	r3, #325	; 0x145
 100cde8:	15933768 	ldrne	r3, [r3, #1896]	; 0x768
 100cdec:	10800003 	addne	r0, r0, r3

	return size;
}
 100cdf0:	e12fff1e 	bx	lr

0100cdf4 <acq_get_wave_bit_depth>:
 */
int acq_get_wave_bit_depth()
{
	int res = 0;

	if(g_acq_state.acq_mode_flags & ACQ_MODE_8BIT)
 100cdf4:	e30932e0 	movw	r3, #37600	; 0x92e0
 100cdf8:	e300275c 	movw	r2, #1884	; 0x75c
 100cdfc:	e3403145 	movt	r3, #325	; 0x145
 100ce00:	e19330b2 	ldrh	r3, [r3, r2]
 100ce04:	e3130001 	tst	r3, #1
		res = 8;
 100ce08:	13a00008 	movne	r0, #8
 100ce0c:	03a00000 	moveq	r0, #0

	if(g_acq_state.acq_mode_flags & ACQ_MODE_12BIT)
 100ce10:	e3130002 	tst	r3, #2
		res = 12;
 100ce14:	13a0000c 	movne	r0, #12

	if(g_acq_state.acq_mode_flags & ACQ_MODE_14BIT)
 100ce18:	e3130004 	tst	r3, #4
		res = 14;

	return res;
}
 100ce1c:	13a0000e 	movne	r0, #14
 100ce20:	e12fff1e 	bx	lr

0100ce24 <acq_get_wave_bit_packed_depth>:
 */
int acq_get_wave_bit_packed_depth()
{
	int res = 0;

	if(g_acq_state.acq_mode_flags & ACQ_MODE_8BIT)
 100ce24:	e30932e0 	movw	r3, #37600	; 0x92e0
 100ce28:	e300275c 	movw	r2, #1884	; 0x75c
 100ce2c:	e3403145 	movt	r3, #325	; 0x145
 100ce30:	e19330b2 	ldrh	r3, [r3, r2]
 100ce34:	e3130001 	tst	r3, #1
		res = 8;
 100ce38:	13a00008 	movne	r0, #8
 100ce3c:	03a00000 	moveq	r0, #0

	if(g_acq_state.acq_mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT))
 100ce40:	e3130006 	tst	r3, #6
		res = 16;

	return res;
}
 100ce44:	13a00010 	movne	r0, #16
 100ce48:	e12fff1e 	bx	lr
 100ce4c:	00000000 	andeq	r0, r0, r0

0100ce50 <clkwiz_init>:
 * an empty `struct clkwiz_interface_t`. For reasons unknown to me,
 * the refclk frequency stored in the ClkWiz is invalid, so an external
 * refclk must be specified as `refclk_freq`.
 */
void clkwiz_init(struct clkwiz_interface_t *ifc, uint32_t device_id, float refclk_freq)
{
 100ce50:	e92d4010 	push	{r4, lr}
 100ce54:	e1a04000 	mov	r4, r0
 100ce58:	ed2d8b02 	vpush	{d8}
	int i;
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 100ce5c:	e1a00001 	mov	r0, r1
{
 100ce60:	e24dd008 	sub	sp, sp, #8
 100ce64:	eeb08a40 	vmov.f32	s16, s0
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 100ce68:	eb001c62 	bl	1013ff8 <XClk_Wiz_LookupConfig>

	D_ASSERT(clkcfg != NULL);
 100ce6c:	e2503000 	subs	r3, r0, #0
 100ce70:	0a000022 	beq	100cf00 <clkwiz_init+0xb0>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 100ce74:	eef77a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 100ce78:	eeb48ae7 	vcmpe.f32	s16, s15
 100ce7c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100ce80:	da000012 	ble	100ced0 <clkwiz_init+0x80>
 100ce84:	eddf7a25 	vldr	s15, [pc, #148]	; 100cf20 <clkwiz_init+0xd0>
 100ce88:	eeb48ae7 	vcmpe.f32	s16, s15
 100ce8c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100ce90:	5a00000e 	bpl	100ced0 <clkwiz_init+0x80>

	ifc->wiz_cfg = clkcfg;
 100ce94:	e5843000 	str	r3, [r4]
	ifc->refclk_freq = refclk_freq;

	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 100ce98:	e1a01003 	mov	r1, r3
 100ce9c:	e5932004 	ldr	r2, [r3, #4]
 100cea0:	e2840008 	add	r0, r4, #8
	ifc->refclk_freq = refclk_freq;
 100cea4:	ed848a24 	vstr	s16, [r4, #144]	; 0x90
	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 100cea8:	eb001c08 	bl	1013ed0 <XClk_Wiz_CfgInitialize>

	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 100ceac:	e5943000 	ldr	r3, [r4]
 100ceb0:	e3071cc8 	movw	r1, #31944	; 0x7cc8
 100ceb4:	e3401106 	movt	r1, #262	; 0x106
 100ceb8:	e3a00002 	mov	r0, #2
 100cebc:	e5932004 	ldr	r2, [r3, #4]
}
 100cec0:	e28dd008 	add	sp, sp, #8
 100cec4:	ecbd8b02 	vpop	{d8}
 100cec8:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 100cecc:	ea00038b 	b	100dd00 <d_printf>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 100ced0:	e3073c70 	movw	r3, #31856	; 0x7c70
 100ced4:	e3072c9c 	movw	r2, #31900	; 0x7c9c
 100ced8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100cedc:	e3403106 	movt	r3, #262	; 0x106
 100cee0:	e3402106 	movt	r2, #262	; 0x106
 100cee4:	e3a00020 	mov	r0, #32
 100cee8:	e58d0000 	str	r0, [sp]
 100ceec:	e3a00004 	mov	r0, #4
 100cef0:	e3401106 	movt	r1, #262	; 0x106
 100cef4:	eb000381 	bl	100dd00 <d_printf>
 100cef8:	e3e00062 	mvn	r0, #98	; 0x62
 100cefc:	fa00354b 	blx	101a430 <exit>
	D_ASSERT(clkcfg != NULL);
 100cf00:	e3a0001f 	mov	r0, #31
 100cf04:	e3073c70 	movw	r3, #31856	; 0x7c70
 100cf08:	e3072c8c 	movw	r2, #31884	; 0x7c8c
 100cf0c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100cf10:	e58d0000 	str	r0, [sp]
 100cf14:	e3403106 	movt	r3, #262	; 0x106
 100cf18:	e3402106 	movt	r2, #262	; 0x106
 100cf1c:	eafffff2 	b	100ceec <clkwiz_init+0x9c>
 100cf20:	44480000 	.word	0x44480000

0100cf24 <clkwiz_change_mipi_freq>:
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
	int solved = 0, solver_iters = 0;
	uint32_t ccfg_0, clkout_div;

	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 100cf24:	eeb50ac0 	vcmpe.f32	s0, #0.0
 100cf28:	eef1fa10 	vmrs	APSR_nzcv, fpscr
{
 100cf2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 100cf30:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 100cf34:	da00009c 	ble	100d1ac <clkwiz_change_mipi_freq+0x288>
 100cf38:	ed9f7aae 	vldr	s14, [pc, #696]	; 100d1f8 <clkwiz_change_mipi_freq+0x2d4>
 100cf3c:	eeb40ac7 	vcmpe.f32	s0, s14
 100cf40:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100cf44:	5a000098 	bpl	100d1ac <clkwiz_change_mipi_freq+0x288>

	// Compute the closest divider assuming an 800MHz FBOUT.
	// Above 600MHz divider is forced to 1.
	if(new_freq >= 600) {
 100cf48:	eddf7aab 	vldr	s15, [pc, #684]	; 100d1fc <clkwiz_change_mipi_freq+0x2d8>
 100cf4c:	e1a06000 	mov	r6, r0
 100cf50:	eeb40ae7 	vcmpe.f32	s0, s15
 100cf54:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100cf58:	ba000075 	blt	100d134 <clkwiz_change_mipi_freq+0x210>
 100cf5c:	eeb73a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 100cf60:	e3a05001 	mov	r5, #1
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 100cf64:	eddf6aa5 	vldr	s13, [pc, #660]	; 100d200 <clkwiz_change_mipi_freq+0x2dc>
	int solved = 0, solver_iters = 0;
 100cf68:	e3a00000 	mov	r0, #0
	 * with minimal error, though the search algorithm could be substantially improved
	 * with e.g. a binary search.
	 */
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 100cf6c:	edd64a24 	vldr	s9, [r6, #144]	; 0x90
	int solved = 0, solver_iters = 0;
 100cf70:	e1a0e000 	mov	lr, r0
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 100cf74:	ed9f7aa2 	vldr	s14, [pc, #648]	; 100d204 <clkwiz_change_mipi_freq+0x2e0>
	int best_fb_mult = 0, best_fb_frac = 0;
 100cf78:	e1a04000 	mov	r4, r0
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 100cf7c:	ed9f5aa1 	vldr	s10, [pc, #644]	; 100d208 <clkwiz_change_mipi_freq+0x2e4>
	int best_fb_mult = 0, best_fb_frac = 0;
 100cf80:	e1a07000 	mov	r7, r0

			// Skip invalid frequencies.
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100cf84:	eddf5a9c 	vldr	s11, [pc, #624]	; 100d1fc <clkwiz_change_mipi_freq+0x2d8>
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 100cf88:	e1a03000 	mov	r3, r0
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100cf8c:	eddf3a9e 	vldr	s7, [pc, #632]	; 100d20c <clkwiz_change_mipi_freq+0x2e8>
				best_fb_mult = fb_mult;
				best_fb_frac = fb_frac;
				best_fbout_freq = fbout_freq;

				// If < 10Hz error, end
				if(best_error < 1e-5) {
 100cf90:	eddf1b94 	vldr	d17, [pc, #592]	; 100d1e8 <clkwiz_change_mipi_freq+0x2c4>
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
 100cf94:	eef07a66 	vmov.f32	s15, s13
 100cf98:	eeb04a47 	vmov.f32	s8, s14
 100cf9c:	e1a0c004 	mov	ip, r4
 100cfa0:	ee073a10 	vmov	s14, r3
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 100cfa4:	e3a04000 	mov	r4, #0
 100cfa8:	eeb86ac7 	vcvt.f32.s32	s12, s14
 100cfac:	ee161a90 	vmov	r1, s13
 100cfb0:	ee172a90 	vmov	r2, s15
 100cfb4:	ea000007 	b	100cfd8 <clkwiz_change_mipi_freq+0xb4>
				best_error = error;
 100cfb8:	eeb04a47 	vmov.f32	s8, s14
 100cfbc:	e1a0c004 	mov	ip, r4
				best_freq = freq;
 100cfc0:	ee161a90 	vmov	r1, s13
 100cfc4:	e1a07003 	mov	r7, r3
				best_fbout_freq = fbout_freq;
 100cfc8:	ee172a90 	vmov	r2, s15
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 100cfcc:	e2844001 	add	r4, r4, #1
 100cfd0:	e3540ffa 	cmp	r4, #1000	; 0x3e8
 100cfd4:	0a000062 	beq	100d164 <clkwiz_change_mipi_freq+0x240>
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 100cfd8:	ee074a90 	vmov	s15, r4
 100cfdc:	eeb87ae7 	vcvt.f32.s32	s14, s15
 100cfe0:	eec77a05 	vdiv.f32	s15, s14, s10
 100cfe4:	ee777a86 	vadd.f32	s15, s15, s12
 100cfe8:	ee677aa4 	vmul.f32	s15, s15, s9
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100cfec:	eef47ae5 	vcmpe.f32	s15, s11
 100cff0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100cff4:	4afffff4 	bmi	100cfcc <clkwiz_change_mipi_freq+0xa8>
 100cff8:	eef47ae3 	vcmpe.f32	s15, s7
 100cffc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d000:	cafffff1 	bgt	100cfcc <clkwiz_change_mipi_freq+0xa8>
			freq = fbout_freq / div;
 100d004:	eec76a83 	vdiv.f32	s13, s15, s6
			solver_iters++;
 100d008:	e2800001 	add	r0, r0, #1
			error = fabs(new_freq - freq);
 100d00c:	ee307a66 	vsub.f32	s14, s0, s13
 100d010:	eeb07ac7 	vabs.f32	s14, s14
			if(error < best_error) {
 100d014:	eeb47ac4 	vcmpe.f32	s14, s8
 100d018:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d01c:	5affffea 	bpl	100cfcc <clkwiz_change_mipi_freq+0xa8>
				if(best_error < 1e-5) {
 100d020:	eef70ac7 	vcvt.f64.f32	d16, s14
 100d024:	eef40be1 	vcmpe.f64	d16, d17
 100d028:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d02c:	5affffe1 	bpl	100cfb8 <clkwiz_change_mipi_freq+0x94>
 100d030:	e1a07003 	mov	r7, r3
					solved = 1;
 100d034:	e3a0e001 	mov	lr, #1
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 100d038:	e2833001 	add	r3, r3, #1
 100d03c:	e3530008 	cmp	r3, #8
 100d040:	1affffd4 	bne	100cf98 <clkwiz_change_mipi_freq+0x74>
			}
		}
	}

	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100d044:	eef71ac7 	vcvt.f64.f32	d17, s14
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 100d048:	e35e0000 	cmp	lr, #0
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100d04c:	eddf3b67 	vldr	d19, [pc, #412]	; 100d1f0 <clkwiz_change_mipi_freq+0x2cc>
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 100d050:	13a0c059 	movne	ip, #89	; 0x59
 100d054:	eef70ae7 	vcvt.f64.f32	d16, s15
 100d058:	03a0c04e 	moveq	ip, #78	; 0x4e
 100d05c:	eef72ae6 	vcvt.f64.f32	d18, s13
 100d060:	e3071d1c 	movw	r1, #32028	; 0x7d1c
 100d064:	eeb70ac0 	vcvt.f64.f32	d0, s0
 100d068:	e3401106 	movt	r1, #262	; 0x106
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100d06c:	ee611ba3 	vmul.f64	d17, d17, d19
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 100d070:	e1a03004 	mov	r3, r4
 100d074:	e1a02007 	mov	r2, r7
 100d078:	e58d001c 	str	r0, [sp, #28]
 100d07c:	e58dc020 	str	ip, [sp, #32]
 100d080:	e3a00002 	mov	r0, #2
 100d084:	edcd0b00 	vstr	d16, [sp]
 100d088:	edcd2b02 	vstr	d18, [sp, #8]
 100d08c:	eefd7be1 	vcvt.s32.f64	s15, d17
 100d090:	ed8d0b04 	vstr	d0, [sp, #16]
 100d094:	edcd7a06 	vstr	s15, [sp, #24]
 100d098:	eb000318 	bl	100dd00 <d_printf>

	// Write the settings to the registers and commit the clock change.
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 100d09c:	e5962000 	ldr	r2, [r6]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 100d0a0:	e1a03804 	lsl	r3, r4, #16
 100d0a4:	e3a01000 	mov	r1, #0
 100d0a8:	e1833407 	orr	r3, r3, r7, lsl #8
 100d0ac:	e30c0350 	movw	r0, #50000	; 0xc350
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 100d0b0:	e5922004 	ldr	r2, [r2, #4]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 100d0b4:	e3833341 	orr	r3, r3, #67108865	; 0x4000001
 100d0b8:	e5823200 	str	r3, [r2, #512]	; 0x200
 100d0bc:	e5821204 	str	r1, [r2, #516]	; 0x204
 100d0c0:	e5825208 	str	r5, [r2, #520]	; 0x208
 100d0c4:	e582120c 	str	r1, [r2, #524]	; 0x20c
 100d0c8:	e5820210 	str	r0, [r2, #528]	; 0x210
 100d0cc:	e5825214 	str	r5, [r2, #532]	; 0x214
 100d0d0:	e5821218 	str	r1, [r2, #536]	; 0x218
 100d0d4:	e582021c 	str	r0, [r2, #540]	; 0x21c
	return *(volatile u32 *) Addr;
 100d0d8:	e5923004 	ldr	r3, [r2, #4]
void clkwiz_commit(struct clkwiz_interface_t *ifc)
{
	int timeout = 100000;

	// Check that MMCM is locked already
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100d0dc:	e3130001 	tst	r3, #1
 100d0e0:	0a00002a 	beq	100d190 <clkwiz_change_mipi_freq+0x26c>
	*LocalAddr = Value;
 100d0e4:	e3a03003 	mov	r3, #3
 100d0e8:	e582325c 	str	r3, [r2, #604]	; 0x25c
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
	}

	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x03);	// Load and SEN set
	asm("nop");
 100d0ec:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d0f0:	e5962000 	ldr	r2, [r6]
	int timeout = 100000;
 100d0f4:	e30836a0 	movw	r3, #34464	; 0x86a0
 100d0f8:	e3a00000 	mov	r0, #0
 100d0fc:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d100:	e5922004 	ldr	r2, [r2, #4]
 100d104:	e2821004 	add	r1, r2, #4
 100d108:	e582025c 	str	r0, [r2, #604]	; 0x25c
 100d10c:	ea000001 	b	100d118 <clkwiz_change_mipi_freq+0x1f4>

	// Wait for re-lock
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 100d110:	e2533001 	subs	r3, r3, #1
 100d114:	3a000004 	bcc	100d12c <clkwiz_change_mipi_freq+0x208>
	return *(volatile u32 *) Addr;
 100d118:	e5912000 	ldr	r2, [r1]
 100d11c:	e3120001 	tst	r2, #1
 100d120:	0afffffa 	beq	100d110 <clkwiz_change_mipi_freq+0x1ec>

	if(timeout == 0) {
 100d124:	e3530000 	cmp	r3, #0
 100d128:	0a000012 	beq	100d178 <clkwiz_change_mipi_freq+0x254>
}
 100d12c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100d130:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		for(div = 1; div < 106; div++) {
 100d134:	e3a05001 	mov	r5, #1
 100d138:	ea000002 	b	100d148 <clkwiz_change_mipi_freq+0x224>
 100d13c:	e2855001 	add	r5, r5, #1
 100d140:	e355006a 	cmp	r5, #106	; 0x6a
 100d144:	0a000024 	beq	100d1dc <clkwiz_change_mipi_freq+0x2b8>
			freq = fbout_freq / div;
 100d148:	ee075a90 	vmov	s15, r5
 100d14c:	eeb83ae7 	vcvt.f32.s32	s6, s15
 100d150:	eec77a03 	vdiv.f32	s15, s14, s6
			if(freq <= new_freq) {
 100d154:	eeb40ae7 	vcmpe.f32	s0, s15
 100d158:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100d15c:	bafffff6 	blt	100d13c <clkwiz_change_mipi_freq+0x218>
 100d160:	eaffff7f 	b	100cf64 <clkwiz_change_mipi_freq+0x40>
 100d164:	eeb07a44 	vmov.f32	s14, s8
 100d168:	e1a0400c 	mov	r4, ip
 100d16c:	ee061a90 	vmov	s13, r1
 100d170:	ee072a90 	vmov	s15, r2
 100d174:	eaffffaf 	b	100d038 <clkwiz_change_mipi_freq+0x114>
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d178:	e3071dc8 	movw	r1, #32200	; 0x7dc8
 100d17c:	e3a00004 	mov	r0, #4
 100d180:	e3401106 	movt	r1, #262	; 0x106
}
 100d184:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100d188:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d18c:	ea0002db 	b	100dd00 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 100d190:	e3071d94 	movw	r1, #32148	; 0x7d94
 100d194:	e3a00004 	mov	r0, #4
 100d198:	e3401106 	movt	r1, #262	; 0x106
 100d19c:	eb0002d7 	bl	100dd00 <d_printf>
 100d1a0:	e5963000 	ldr	r3, [r6]
 100d1a4:	e5932004 	ldr	r2, [r3, #4]
 100d1a8:	eaffffcd 	b	100d0e4 <clkwiz_change_mipi_freq+0x1c0>
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 100d1ac:	e3a00039 	mov	r0, #57	; 0x39
 100d1b0:	e3073c70 	movw	r3, #31856	; 0x7c70
 100d1b4:	e3072cf4 	movw	r2, #31988	; 0x7cf4
 100d1b8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100d1bc:	e58d0000 	str	r0, [sp]
 100d1c0:	e3403106 	movt	r3, #262	; 0x106
 100d1c4:	e3a00004 	mov	r0, #4
 100d1c8:	e3402106 	movt	r2, #262	; 0x106
 100d1cc:	e3401106 	movt	r1, #262	; 0x106
 100d1d0:	eb0002ca 	bl	100dd00 <d_printf>
 100d1d4:	e3e00062 	mvn	r0, #98	; 0x62
 100d1d8:	fa003494 	blx	101a430 <exit>
 100d1dc:	ed9f3a0b 	vldr	s6, [pc, #44]	; 100d210 <clkwiz_change_mipi_freq+0x2ec>
 100d1e0:	eaffff5f 	b	100cf64 <clkwiz_change_mipi_freq+0x40>
 100d1e4:	e320f000 	nop	{0}
 100d1e8:	88e368f1 	.word	0x88e368f1
 100d1ec:	3ee4f8b5 	.word	0x3ee4f8b5
 100d1f0:	00000000 	.word	0x00000000
 100d1f4:	412e8480 	.word	0x412e8480
 100d1f8:	44480000 	.word	0x44480000
 100d1fc:	44160000 	.word	0x44160000
 100d200:	00000000 	.word	0x00000000
 100d204:	501502f9 	.word	0x501502f9
 100d208:	447a0000 	.word	0x447a0000
 100d20c:	44960000 	.word	0x44960000
 100d210:	42d40000 	.word	0x42d40000

0100d214 <clkwiz_dump_state>:
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 100d214:	e5903000 	ldr	r3, [r0]
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d218:	e3071e04 	movw	r1, #32260	; 0x7e04
{
 100d21c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d220:	e1a02000 	mov	r2, r0
{
 100d224:	ed2d8b04 	vpush	{d8-d9}
 100d228:	e1a08000 	mov	r8, r0
 100d22c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d230:	e3401106 	movt	r1, #262	; 0x106
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 100d234:	e5933004 	ldr	r3, [r3, #4]
	uint32_t base_addr = 0x208;
 100d238:	e3a04f82 	mov	r4, #520	; 0x208
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d23c:	eddf7a91 	vldr	s15, [pc, #580]	; 100d488 <clkwiz_dump_state+0x274>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d240:	e3a05001 	mov	r5, #1
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d244:	ed909a24 	vldr	s18, [r0, #144]	; 0x90
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d248:	e3a00002 	mov	r0, #2
 100d24c:	e5936200 	ldr	r6, [r3, #512]	; 0x200
 100d250:	e3a09000 	mov	r9, #0
 100d254:	e593b204 	ldr	fp, [r3, #516]	; 0x204
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 100d258:	eeb08a67 	vmov.f32	s16, s15
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 100d25c:	e7e93856 	ubfx	r3, r6, #16, #10
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 100d260:	e7e7a456 	ubfx	sl, r6, #8, #8
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 100d264:	e6ef7076 	uxtb	r7, r6
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 100d268:	ee083a90 	vmov	s17, r3
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d26c:	eef86ae8 	vcvt.f32.s32	s13, s17
 100d270:	ee07aa10 	vmov	s14, sl
 100d274:	eeb87ac7 	vcvt.f32.s32	s14, s14
 100d278:	eec69aa7 	vdiv.f32	s19, s13, s15
 100d27c:	ee799a87 	vadd.f32	s19, s19, s14
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 100d280:	eb00029e 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 100d284:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100d288:	e3a00002 	mov	r0, #2
 100d28c:	e3401106 	movt	r1, #262	; 0x106
 100d290:	eb00029a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 100d294:	e5983000 	ldr	r3, [r8]
 100d298:	e3071e30 	movw	r1, #32304	; 0x7e30
 100d29c:	e3401106 	movt	r1, #262	; 0x106
 100d2a0:	e3a00002 	mov	r0, #2
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 100d2a4:	ee299a89 	vmul.f32	s18, s19, s18
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 100d2a8:	e5932004 	ldr	r2, [r3, #4]
 100d2ac:	eb000293 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "Configured refclk freq: %2.5f MHz", ifc->refclk_freq);
 100d2b0:	edd87a24 	vldr	s15, [r8, #144]	; 0x90
 100d2b4:	e3071e50 	movw	r1, #32336	; 0x7e50
 100d2b8:	e3401106 	movt	r1, #262	; 0x106
 100d2bc:	e3a00002 	mov	r0, #2
 100d2c0:	eef70ae7 	vcvt.f64.f32	d16, s15
 100d2c4:	ec532b30 	vmov	r2, r3, d16
 100d2c8:	eb00028c 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "CLKCFG0 register:       0x%08x", ccfg_0);
 100d2cc:	e3071e74 	movw	r1, #32372	; 0x7e74
 100d2d0:	e1a02006 	mov	r2, r6
 100d2d4:	e3401106 	movt	r1, #262	; 0x106
 100d2d8:	e3a00002 	mov	r0, #2
 100d2dc:	eb000287 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "CLKFBOUT register:      0x%08x", clkfbout_phase);
 100d2e0:	e3071e94 	movw	r1, #32404	; 0x7e94
 100d2e4:	e1a0200b 	mov	r2, fp
 100d2e8:	e3401106 	movt	r1, #262	; 0x106
 100d2ec:	e3a00002 	mov	r0, #2
 100d2f0:	eb000282 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 100d2f4:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100d2f8:	e3a00002 	mov	r0, #2
 100d2fc:	e3401106 	movt	r1, #262	; 0x106
	clkfbout_frac_en = !!(ccfg_0 & (1 << 26));
 100d300:	e7e06d56 	ubfx	r6, r6, #26, #1
	d_printf(D_INFO, "");
 100d304:	eb00027d 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 100d308:	e3071eb4 	movw	r1, #32436	; 0x7eb4
 100d30c:	e1a02007 	mov	r2, r7
 100d310:	e3401106 	movt	r1, #262	; 0x106
 100d314:	e3a00002 	mov	r0, #2
 100d318:	eb000278 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "CLKFBOUT multiplier:    %2.5f (MULT=%d, FRAC=%d, FRAC_EN=%d)", \
 100d31c:	eef70ae9 	vcvt.f64.f32	d16, s19
 100d320:	e3071ed0 	movw	r1, #32464	; 0x7ed0
 100d324:	edcd8a01 	vstr	s17, [sp, #4]
 100d328:	e3401106 	movt	r1, #262	; 0x106
 100d32c:	e3a00002 	mov	r0, #2
 100d330:	e58da000 	str	sl, [sp]
 100d334:	e58d6008 	str	r6, [sp, #8]
 100d338:	ec532b30 	vmov	r2, r3, d16
 100d33c:	eb00026f 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "FBOUT frequency:        %2.5f MHz", fbout_freq);
 100d340:	eef70ac9 	vcvt.f64.f32	d16, s18
 100d344:	e3071f10 	movw	r1, #32528	; 0x7f10
 100d348:	e3401106 	movt	r1, #262	; 0x106
 100d34c:	e3a00002 	mov	r0, #2
 100d350:	ec532b30 	vmov	r2, r3, d16
 100d354:	eb000269 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 100d358:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100d35c:	e3a00002 	mov	r0, #2
 100d360:	e3401106 	movt	r1, #262	; 0x106
 100d364:	eb000265 	bl	100dd00 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d368:	ee077a90 	vmov	s15, r7
 100d36c:	eef88ae7 	vcvt.f32.s32	s17, s15
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 100d370:	e5983000 	ldr	r3, [r8]
		if(i > 1) {
 100d374:	e3550001 	cmp	r5, #1
 100d378:	ee079a10 	vmov	s14, r9
			clk_frac = 0;
 100d37c:	e3a00000 	mov	r0, #0
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 100d380:	e5933004 	ldr	r3, [r3, #4]
 100d384:	e793c004 	ldr	ip, [r3, r4]
* @note		C-style signature:
* 		u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)
*
******************************************************************************/
static inline u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)  {
			return (Xil_In32((BaseAddress) + (u32)(RegOffset)));
 100d388:	e2832004 	add	r2, r3, #4
 100d38c:	e2833008 	add	r3, r3, #8
 100d390:	e7927004 	ldr	r7, [r2, r4]
 100d394:	e7936004 	ldr	r6, [r3, r4]
		clk_frac_en = !!(reg_divfrac & 0x00040000);
 100d398:	e7e0395c 	ubfx	r3, ip, #18, #1
		clk_div     =   (reg_divfrac & 0x000000ff);
 100d39c:	e6ef207c 	uxtb	r2, ip
		if(i > 1) {
 100d3a0:	0a000031 	beq	100d46c <clkwiz_dump_state+0x258>
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d3a4:	ee072a90 	vmov	s15, r2
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d3a8:	e3071f34 	movw	r1, #32564	; 0x7f34
 100d3ac:	e58dc000 	str	ip, [sp]
 100d3b0:	e3401106 	movt	r1, #262	; 0x106
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d3b4:	eef87ae7 	vcvt.f32.s32	s15, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d3b8:	e58d3020 	str	r3, [sp, #32]
 100d3bc:	e1a03004 	mov	r3, r4
 100d3c0:	e58d0010 	str	r0, [sp, #16]
 100d3c4:	e3a00002 	mov	r0, #2
 100d3c8:	e58d200c 	str	r2, [sp, #12]
 100d3cc:	e1a02005 	mov	r2, r5
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d3d0:	ee777a87 	vadd.f32	s15, s15, s14
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d3d4:	e2855001 	add	r5, r5, #1
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d3d8:	e58d6008 	str	r6, [sp, #8]
		base_addr += 12;
 100d3dc:	e284400c 	add	r4, r4, #12
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d3e0:	e58d7004 	str	r7, [sp, #4]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d3e4:	ee897a27 	vdiv.f32	s14, s18, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d3e8:	eef70ae7 	vcvt.f64.f32	d16, s15
 100d3ec:	edcd0b06 	vstr	d16, [sp, #24]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 100d3f0:	eec79a28 	vdiv.f32	s19, s14, s17
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 100d3f4:	eb000241 	bl	100dd00 <d_printf>
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d3f8:	ee077a90 	vmov	s15, r7
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d3fc:	e3071f9c 	movw	r1, #32668	; 0x7f9c
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d400:	eeb87a67 	vcvt.f32.u32	s14, s15
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d404:	e3401106 	movt	r1, #262	; 0x106
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d408:	ee076a90 	vmov	s15, r6
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d40c:	e3a00002 	mov	r0, #2
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 100d410:	eef87a67 	vcvt.f32.u32	s15, s15
 100d414:	eec76a08 	vdiv.f32	s13, s14, s16
 100d418:	ee877a88 	vdiv.f32	s14, s15, s16
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100d41c:	eef70ae9 	vcvt.f64.f32	d16, s19
 100d420:	ec532b30 	vmov	r2, r3, d16
 100d424:	eef71ae6 	vcvt.f64.f32	d17, s13
 100d428:	eeb77ac7 	vcvt.f64.f32	d7, s14
 100d42c:	edcd1b02 	vstr	d17, [sp, #8]
 100d430:	ed8d7b00 	vstr	d7, [sp]
 100d434:	eb000231 	bl	100dd00 <d_printf>
		d_printf(D_INFO, "");
 100d438:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100d43c:	e3a00002 	mov	r0, #2
 100d440:	e3401106 	movt	r1, #262	; 0x106
 100d444:	eb00022d 	bl	100dd00 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 100d448:	e3550007 	cmp	r5, #7
 100d44c:	1affffc7 	bne	100d370 <clkwiz_dump_state+0x15c>
	d_printf(D_INFO, "");
 100d450:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100d454:	e3a00002 	mov	r0, #2
 100d458:	e3401106 	movt	r1, #262	; 0x106
}
 100d45c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100d460:	ecbd8b04 	vpop	{d8-d9}
 100d464:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "");
 100d468:	ea000224 	b	100dd00 <d_printf>
		clk_frac    =   (reg_divfrac & 0x0003ff00);
 100d46c:	e3a00cff 	mov	r0, #65280	; 0xff00
 100d470:	e3400003 	movt	r0, #3
 100d474:	e000000c 	and	r0, r0, ip
 100d478:	ee070a90 	vmov	s15, r0
 100d47c:	eef87ae7 	vcvt.f32.s32	s15, s15
 100d480:	ee877a88 	vdiv.f32	s14, s15, s16
 100d484:	eaffffc6 	b	100d3a4 <clkwiz_dump_state+0x190>
 100d488:	447a0000 	.word	0x447a0000

0100d48c <clkwiz_commit>:
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100d48c:	e5903000 	ldr	r3, [r0]
{
 100d490:	e92d4010 	push	{r4, lr}
 100d494:	e1a04000 	mov	r4, r0
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100d498:	e5933004 	ldr	r3, [r3, #4]
 100d49c:	e5932004 	ldr	r2, [r3, #4]
 100d4a0:	e3120001 	tst	r2, #1
 100d4a4:	0a000016 	beq	100d504 <clkwiz_commit+0x78>
	*LocalAddr = Value;
 100d4a8:	e3a02003 	mov	r2, #3
 100d4ac:	e583225c 	str	r2, [r3, #604]	; 0x25c
	asm("nop");
 100d4b0:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d4b4:	e5942000 	ldr	r2, [r4]
	int timeout = 100000;
 100d4b8:	e30836a0 	movw	r3, #34464	; 0x86a0
 100d4bc:	e3a00000 	mov	r0, #0
 100d4c0:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 100d4c4:	e5922004 	ldr	r2, [r2, #4]
 100d4c8:	e2821004 	add	r1, r2, #4
 100d4cc:	e582025c 	str	r0, [r2, #604]	; 0x25c
 100d4d0:	ea000001 	b	100d4dc <clkwiz_commit+0x50>
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 100d4d4:	e2533001 	subs	r3, r3, #1
 100d4d8:	38bd8010 	popcc	{r4, pc}
	return *(volatile u32 *) Addr;
 100d4dc:	e5912000 	ldr	r2, [r1]
 100d4e0:	e3120001 	tst	r2, #1
 100d4e4:	0afffffa 	beq	100d4d4 <clkwiz_commit+0x48>
	if(timeout == 0) {
 100d4e8:	e3530000 	cmp	r3, #0
 100d4ec:	18bd8010 	popne	{r4, pc}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d4f0:	e3071dc8 	movw	r1, #32200	; 0x7dc8
 100d4f4:	e3a00004 	mov	r0, #4
 100d4f8:	e3401106 	movt	r1, #262	; 0x106
	}
}
 100d4fc:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100d500:	ea0001fe 	b	100dd00 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 100d504:	e3071d94 	movw	r1, #32148	; 0x7d94
 100d508:	e3a00004 	mov	r0, #4
 100d50c:	e3401106 	movt	r1, #262	; 0x106
 100d510:	eb0001fa 	bl	100dd00 <d_printf>
 100d514:	e5943000 	ldr	r3, [r4]
 100d518:	e5933004 	ldr	r3, [r3, #4]
 100d51c:	eaffffe1 	b	100d4a8 <clkwiz_commit+0x1c>

0100d520 <fabcfg_dump_state>:
 */
void fabcfg_dump_state()
{
	int i;

	d_printf(D_INFO, "");
 100d520:	e30a10ec 	movw	r1, #41196	; 0xa0ec
{
 100d524:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "");
 100d528:	e3a00002 	mov	r0, #2
{
 100d52c:	e24dd014 	sub	sp, sp, #20
	d_printf(D_INFO, "");
 100d530:	e3401106 	movt	r1, #262	; 0x106
 100d534:	e3a07060 	mov	r7, #96	; 0x60
 100d538:	eb0001f0 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "FabCfg: Memory map (including unimplemented registers)");
 100d53c:	e3071fe8 	movw	r1, #32744	; 0x7fe8
 100d540:	e3a00002 	mov	r0, #2
 100d544:	e3401106 	movt	r1, #262	; 0x106
	d_printf(D_INFO, "                 0          4          8          c");

	for(i = 0; i < 1023; i += 16) {
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100d548:	e3085054 	movw	r5, #32852	; 0x8054
	d_printf(D_INFO, "FabCfg: Memory map (including unimplemented registers)");
 100d54c:	eb0001eb 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "                 0          4          8          c");
 100d550:	e3081020 	movw	r1, #32800	; 0x8020
 100d554:	e3a00002 	mov	r0, #2
 100d558:	e3401106 	movt	r1, #262	; 0x106
 100d55c:	e34473c0 	movt	r7, #17344	; 0x43c0
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100d560:	e3405106 	movt	r5, #262	; 0x106
	d_printf(D_INFO, "                 0          4          8          c");
 100d564:	e3a06040 	mov	r6, #64	; 0x40
	for(i = 0; i < 1023; i += 16) {
 100d568:	e3a04000 	mov	r4, #0
	d_printf(D_INFO, "                 0          4          8          c");
 100d56c:	eb0001e3 	bl	100dd00 <d_printf>
	reg &= FAB_CFG_ADDR_MASK;
 100d570:	e2842004 	add	r2, r4, #4
 100d574:	e2840008 	add	r0, r4, #8
 100d578:	e284100c 	add	r1, r4, #12
 100d57c:	e2022fff 	and	r2, r2, #1020	; 0x3fc
 100d580:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 100d584:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 100d588:	e2843443 	add	r3, r4, #1124073472	; 0x43000000
	res = _FAB_CFG_ACCESS(reg);
 100d58c:	e2822443 	add	r2, r2, #1124073472	; 0x43000000
 100d590:	e2800443 	add	r0, r0, #1124073472	; 0x43000000
 100d594:	e2811443 	add	r1, r1, #1124073472	; 0x43000000
 100d598:	e2822503 	add	r2, r2, #12582912	; 0xc00000
 100d59c:	e2800503 	add	r0, r0, #12582912	; 0xc00000
 100d5a0:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 100d5a4:	e2833503 	add	r3, r3, #12582912	; 0xc00000
 100d5a8:	e5933000 	ldr	r3, [r3]
 100d5ac:	e2466002 	sub	r6, r6, #2
 100d5b0:	e592e000 	ldr	lr, [r2]
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100d5b4:	e1a02004 	mov	r2, r4
 100d5b8:	e590c000 	ldr	ip, [r0]
 100d5bc:	e5910000 	ldr	r0, [r1]
 100d5c0:	e1a01005 	mov	r1, r5
 100d5c4:	f7d4f007 	pld	[r4, r7]
 100d5c8:	e58de000 	str	lr, [sp]
 100d5cc:	e58d0008 	str	r0, [sp, #8]
 100d5d0:	e3a00002 	mov	r0, #2
 100d5d4:	e58dc004 	str	ip, [sp, #4]
 100d5d8:	eb0001c8 	bl	100dd00 <d_printf>
	reg &= FAB_CFG_ADDR_MASK;
 100d5dc:	e284c014 	add	ip, r4, #20
 100d5e0:	e2840018 	add	r0, r4, #24
 100d5e4:	e284101c 	add	r1, r4, #28
 100d5e8:	e20ccfff 	and	ip, ip, #1020	; 0x3fc
 100d5ec:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 100d5f0:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 100d5f4:	e2843141 	add	r3, r4, #1073741840	; 0x40000010
	res = _FAB_CFG_ACCESS(reg);
 100d5f8:	e28cc443 	add	ip, ip, #1124073472	; 0x43000000
 100d5fc:	e2800443 	add	r0, r0, #1124073472	; 0x43000000
 100d600:	e2811443 	add	r1, r1, #1124073472	; 0x43000000
 100d604:	e28cc503 	add	ip, ip, #12582912	; 0xc00000
 100d608:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 100d60c:	e283350f 	add	r3, r3, #62914560	; 0x3c00000
 100d610:	e2800503 	add	r0, r0, #12582912	; 0xc00000
 100d614:	e5933000 	ldr	r3, [r3]
 100d618:	e2842010 	add	r2, r4, #16
 100d61c:	e59ce000 	ldr	lr, [ip]
 100d620:	e2844020 	add	r4, r4, #32
 100d624:	e5900000 	ldr	r0, [r0]
 100d628:	e591c000 	ldr	ip, [r1]
 100d62c:	e1a01005 	mov	r1, r5
 100d630:	e58de000 	str	lr, [sp]
 100d634:	e58d0004 	str	r0, [sp, #4]
 100d638:	e3a00002 	mov	r0, #2
 100d63c:	e58dc008 	str	ip, [sp, #8]
 100d640:	eb0001ae 	bl	100dd00 <d_printf>
 100d644:	e3540e3e 	cmp	r4, #992	; 0x3e0
 100d648:	1affffc8 	bne	100d570 <fabcfg_dump_state+0x50>
 100d64c:	e1a05206 	lsl	r5, r6, #4
 100d650:	e3086054 	movw	r6, #32852	; 0x8054
 100d654:	e3406106 	movt	r6, #262	; 0x106
 100d658:	e2855e3e 	add	r5, r5, #992	; 0x3e0
	reg &= FAB_CFG_ADDR_MASK;
 100d65c:	e284c004 	add	ip, r4, #4
 100d660:	e2841008 	add	r1, r4, #8
 100d664:	e284000c 	add	r0, r4, #12
 100d668:	e20ccfff 	and	ip, ip, #1020	; 0x3fc
 100d66c:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 100d670:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 100d674:	e2843443 	add	r3, r4, #1124073472	; 0x43000000
	res = _FAB_CFG_ACCESS(reg);
 100d678:	e28cc443 	add	ip, ip, #1124073472	; 0x43000000
 100d67c:	e2811443 	add	r1, r1, #1124073472	; 0x43000000
 100d680:	e2800443 	add	r0, r0, #1124073472	; 0x43000000
 100d684:	e28cc503 	add	ip, ip, #12582912	; 0xc00000
 100d688:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 100d68c:	e2800503 	add	r0, r0, #12582912	; 0xc00000
 100d690:	e2833503 	add	r3, r3, #12582912	; 0xc00000
 100d694:	e5933000 	ldr	r3, [r3]
 100d698:	e1a02004 	mov	r2, r4
 100d69c:	e59c7000 	ldr	r7, [ip]
	for(i = 0; i < 1023; i += 16) {
 100d6a0:	e2844010 	add	r4, r4, #16
 100d6a4:	e591e000 	ldr	lr, [r1]
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 100d6a8:	e1a01006 	mov	r1, r6
 100d6ac:	e590c000 	ldr	ip, [r0]
 100d6b0:	e3a00002 	mov	r0, #2
 100d6b4:	e58d7000 	str	r7, [sp]
 100d6b8:	e58de004 	str	lr, [sp, #4]
 100d6bc:	e58dc008 	str	ip, [sp, #8]
 100d6c0:	eb00018e 	bl	100dd00 <d_printf>
	for(i = 0; i < 1023; i += 16) {
 100d6c4:	e1540005 	cmp	r4, r5
 100d6c8:	1affffe3 	bne	100d65c <fabcfg_dump_state+0x13c>
				fabcfg_read(i), fabcfg_read(i + 4), fabcfg_read(i + 8), fabcfg_read(i + 12));
	}

	d_printf(D_INFO, "");
 100d6cc:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100d6d0:	e3a00002 	mov	r0, #2
 100d6d4:	e3401106 	movt	r1, #262	; 0x106
}
 100d6d8:	e28dd014 	add	sp, sp, #20
 100d6dc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "");
 100d6e0:	ea000186 	b	100dd00 <d_printf>

0100d6e4 <fabcfg_init>:
{
 100d6e4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 100d6e8:	e3a04000 	mov	r4, #0
 100d6ec:	e34443c0 	movt	r4, #17344	; 0x43c0
 100d6f0:	e3081078 	movw	r1, #32888	; 0x8078
 100d6f4:	e1a02004 	mov	r2, r4
{
 100d6f8:	e24dd00c 	sub	sp, sp, #12
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 100d6fc:	e3401106 	movt	r1, #262	; 0x106
 100d700:	e3a00002 	mov	r0, #2
 100d704:	eb00017d 	bl	100dd00 <d_printf>
 100d708:	e5942008 	ldr	r2, [r4, #8]
	if(magic == FAB_CFG_MAGIC_VALUE) {
 100d70c:	e3073670 	movw	r3, #30320	; 0x7670
 100d710:	e345336d 	movt	r3, #21357	; 0x536d
 100d714:	e1520003 	cmp	r2, r3
 100d718:	1a000044 	bne	100d830 <fabcfg_init+0x14c>
		d_printf(D_INFO, "FabCfg: Magic value: 0x%08x - OK", magic);
 100d71c:	e3081098 	movw	r1, #32920	; 0x8098
 100d720:	e3056e38 	movw	r6, #24120	; 0x5e38
 100d724:	e3401106 	movt	r1, #262	; 0x106
 100d728:	e3a00002 	mov	r0, #2
 100d72c:	e3406102 	movt	r6, #258	; 0x102
	_FAB_CFG_ACCESS(reg) = data;
 100d730:	e3058678 	movw	r8, #22136	; 0x5678
 100d734:	e3047321 	movw	r7, #17185	; 0x4321
 100d738:	e2869018 	add	r9, r6, #24
 100d73c:	eb00016f 	bl	100dd00 <d_printf>
 100d740:	e3418234 	movt	r8, #4660	; 0x1234
	d_printf(D_INFO, "FabCfg: Running %d test patterns of register interface", FBCFG_NUM_TEST_PATTERNS);
 100d744:	e30810bc 	movw	r1, #32956	; 0x80bc
 100d748:	e3487765 	movt	r7, #34661	; 0x8765
 100d74c:	e3401106 	movt	r1, #262	; 0x106
 100d750:	e3a02006 	mov	r2, #6
 100d754:	e3a00002 	mov	r0, #2
 100d758:	eb000168 	bl	100dd00 <d_printf>
		fabcfg_write(FAB_CFG_DUMMY1, fabcfg_dummy_tests[i]);
 100d75c:	e4965004 	ldr	r5, [r6], #4
 100d760:	e5845000 	str	r5, [r4]
	res = _FAB_CFG_ACCESS(reg);
 100d764:	e5942000 	ldr	r2, [r4]
		if(test == fabcfg_dummy_tests[i]) {
 100d768:	e1550002 	cmp	r5, r2
 100d76c:	0a000029 	beq	100d818 <fabcfg_init+0x134>
			d_printf(D_ERROR, "FabCfg: DummyTest1 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 100d770:	e3081150 	movw	r1, #33104	; 0x8150
 100d774:	e5163004 	ldr	r3, [r6, #-4]
 100d778:	e3401106 	movt	r1, #262	; 0x106
 100d77c:	e3a00004 	mov	r0, #4
 100d780:	eb00015e 	bl	100dd00 <d_printf>
 100d784:	e5942004 	ldr	r2, [r4, #4]
		if(test == fabcfg_dummy_tests[i]) {
 100d788:	e1550002 	cmp	r5, r2
 100d78c:	0a00001c 	beq	100d804 <fabcfg_init+0x120>
			d_printf(D_ERROR, "FabCfg: DummyTest2 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 100d790:	e308118c 	movw	r1, #33164	; 0x818c
 100d794:	e1a03005 	mov	r3, r5
 100d798:	e3401106 	movt	r1, #262	; 0x106
 100d79c:	e3a00004 	mov	r0, #4
 100d7a0:	eb000156 	bl	100dd00 <d_printf>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 100d7a4:	e1590006 	cmp	r9, r6
	_FAB_CFG_ACCESS(reg) = data;
 100d7a8:	e5848000 	str	r8, [r4]
 100d7ac:	e5847004 	str	r7, [r4, #4]
 100d7b0:	1affffe9 	bne	100d75c <fabcfg_init+0x78>
	d_printf(D_INFO, "FabCfg: All tests passed");
 100d7b4:	e30811c8 	movw	r1, #33224	; 0x81c8
 100d7b8:	e3a00002 	mov	r0, #2
 100d7bc:	e3401106 	movt	r1, #262	; 0x106
 100d7c0:	eb00014e 	bl	100dd00 <d_printf>
	res = _FAB_CFG_ACCESS(reg);
 100d7c4:	e3a02000 	mov	r2, #0
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 100d7c8:	e30811e4 	movw	r1, #33252	; 0x81e4
 100d7cc:	e34423c0 	movt	r2, #17344	; 0x43c0
 100d7d0:	e3401106 	movt	r1, #262	; 0x106
 100d7d4:	e592300c 	ldr	r3, [r2, #12]
 100d7d8:	e3a00002 	mov	r0, #2
 100d7dc:	e592e010 	ldr	lr, [r2, #16]
 100d7e0:	e7e72453 	ubfx	r2, r3, #8, #8
	ver_uh = (version & 0xffff0000) >> 16;
 100d7e4:	e1a0c823 	lsr	ip, r3, #16
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 100d7e8:	e58de004 	str	lr, [sp, #4]
 100d7ec:	e6ef3073 	uxtb	r3, r3
 100d7f0:	e58dc000 	str	ip, [sp]
 100d7f4:	eb000141 	bl	100dd00 <d_printf>
}
 100d7f8:	e28dd00c 	add	sp, sp, #12
 100d7fc:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
	fabcfg_dump_state();
 100d800:	eaffff46 	b	100d520 <fabcfg_dump_state>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 100d804:	e1590006 	cmp	r9, r6
	_FAB_CFG_ACCESS(reg) = data;
 100d808:	e5848000 	str	r8, [r4]
 100d80c:	e5847004 	str	r7, [r4, #4]
 100d810:	1affffd1 	bne	100d75c <fabcfg_init+0x78>
 100d814:	eaffffe6 	b	100d7b4 <fabcfg_init+0xd0>
			d_printf(D_EXINFO, "FabCfg: DummyTest1 value: 0x%08x - OK", test);
 100d818:	e3081128 	movw	r1, #33064	; 0x8128
 100d81c:	e1a02005 	mov	r2, r5
 100d820:	e3401106 	movt	r1, #262	; 0x106
 100d824:	e3a00001 	mov	r0, #1
 100d828:	eb000134 	bl	100dd00 <d_printf>
 100d82c:	eaffffd4 	b	100d784 <fabcfg_init+0xa0>
		d_printf(D_ERROR, "FabCfg: Magic value: 0x%08x - Not OK, Expect 0x%08x", magic, FAB_CFG_MAGIC_VALUE);
 100d830:	e30810f4 	movw	r1, #33012	; 0x80f4
 100d834:	e3a00004 	mov	r0, #4
 100d838:	e3401106 	movt	r1, #262	; 0x106
 100d83c:	eb00012f 	bl	100dd00 <d_printf>
		exit(-1);
 100d840:	e3e00000 	mvn	r0, #0
 100d844:	fa0032f9 	blx	101a430 <exit>

0100d848 <irq_xscutimer>:
 */
volatile void irq_xscutimer(void *callback)
{
	XScuTimer *timer = (XScuTimer *) callback;

	if(XScuTimer_IsExpired(timer)) {
 100d848:	e5903004 	ldr	r3, [r0, #4]
 100d84c:	e593300c 	ldr	r3, [r3, #12]
 100d850:	e3130001 	tst	r3, #1
		g_hal.g_timer_overflow++;
 100d854:	13093b80 	movwne	r3, #39808	; 0x9b80
 100d858:	13403145 	movtne	r3, #325	; 0x145
 100d85c:	1593204c 	ldrne	r2, [r3, #76]	; 0x4c
 100d860:	12822001 	addne	r2, r2, #1
 100d864:	1583204c 	strne	r2, [r3, #76]	; 0x4c
	}
}
 100d868:	e12fff1e 	bx	lr

0100d86c <d_printf.constprop.8>:
 * @param	...			Varadic args
 *
 * @note	For formats besides D_RAW, this function appends \r\n to all outputs and prints info/warn/error code and
 * 			optionally prints the system timer.
 */
void d_printf(int debug_code, char *fmt, ...)
 100d86c:	e92d000e 	push	{r1, r2, r3}
			case D_EXINFO:
				print("[--] ");							// dull white text (default)
				break;

			case D_INFO:
				print("\033[0;97m[ii] "); 				// bright white text
 100d870:	e3080224 	movw	r0, #33316	; 0x8224
void d_printf(int debug_code, char *fmt, ...)
 100d874:	e92d40d0 	push	{r4, r6, r7, lr}
 100d878:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100d87c:	e24dd01c 	sub	sp, sp, #28
				print("\033[0;97m[ii] "); 				// bright white text
 100d880:	e3400106 	movt	r0, #262	; 0x106
 100d884:	eb0027c9 	bl	10177b0 <print>
				print("\033[97;41m[EE]\033[0;91m ");	// red text
				break;
		}

#if DBG_PRINT_TIMES == 1
		if(g_hal.g_timer_have_init) {
 100d888:	e3093b80 	movw	r3, #39808	; 0x9b80
 100d88c:	e3403145 	movt	r3, #325	; 0x145
 100d890:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 100d894:	e3540000 	cmp	r4, #0
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
			sec = total_usec / 1000000;
			usec = total_usec % 1000000;
		} else {
			sec = 0;
			usec = 0;
 100d898:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 100d89c:	0a00001b 	beq	100d910 <d_printf.constprop.8+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100d8a0:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100d8a4:	eddf3b37 	vldr	d19, [pc, #220]	; 100d988 <d_printf.constprop.8+0x11c>
 100d8a8:	eddf2b38 	vldr	d18, [pc, #224]	; 100d990 <d_printf.constprop.8+0x124>
 100d8ac:	e5922004 	ldr	r2, [r2, #4]
 100d8b0:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100d8b4:	e1e02002 	mvn	r2, r2
 100d8b8:	ee073a90 	vmov	s15, r3
 100d8bc:	eef80b67 	vcvt.f64.u32	d16, s15
 100d8c0:	ee072a90 	vmov	s15, r2
 100d8c4:	eef81b67 	vcvt.f64.u32	d17, s15
 100d8c8:	ee600ba3 	vmul.f64	d16, d16, d19
 100d8cc:	ee410ba2 	vmla.f64	d16, d17, d18
 100d8d0:	ec510b30 	vmov	r0, r1, d16
 100d8d4:	fa003261 	blx	101a260 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 100d8d8:	e3042240 	movw	r2, #16960	; 0x4240
 100d8dc:	e3a03000 	mov	r3, #0
 100d8e0:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100d8e4:	e1a06000 	mov	r6, r0
 100d8e8:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100d8ec:	fa003235 	blx	101a1c8 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 100d8f0:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 100d8f4:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 100d8f8:	e340200f 	movt	r2, #15
 100d8fc:	e3a03000 	mov	r3, #0
 100d900:	e1a00006 	mov	r0, r6
 100d904:	e1a01007 	mov	r1, r7
 100d908:	fa00322e 	blx	101a1c8 <__aeabi_uldivmod>
 100d90c:	e1a03002 	mov	r3, r2
		}

		if(debug_code != D_RAW) {
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 100d910:	e3082234 	movw	r2, #33332	; 0x8234
 100d914:	e58d3000 	str	r3, [sp]
 100d918:	e3402106 	movt	r2, #262	; 0x106
 100d91c:	e1a03004 	mov	r3, r4
 100d920:	e3a01a01 	mov	r1, #4096	; 0x1000
 100d924:	e28d000c 	add	r0, sp, #12
 100d928:	fa003bd3 	blx	101c87c <snprintf>
			print(time_buffer);
 100d92c:	e28d000c 	add	r0, sp, #12
 100d930:	eb00279e 	bl	10177b0 <print>
		}
#endif

		va_list args;
		va_start(args, fmt);
 100d934:	e28dca01 	add	ip, sp, #4096	; 0x1000

		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100d938:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100d93c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100d940:	e282202c 	add	r2, r2, #44	; 0x2c
 100d944:	e1a0300c 	mov	r3, ip
 100d948:	e5922000 	ldr	r2, [r2]
 100d94c:	e3a01a01 	mov	r1, #4096	; 0x1000
 100d950:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100d954:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100d958:	fa004c3f 	blx	1020a5c <vsnprintf>
		print(buffer);
 100d95c:	e28d0018 	add	r0, sp, #24
 100d960:	eb002792 	bl	10177b0 <print>

		if(debug_code != D_RAW) {
			print("\033[m\r\n");
 100d964:	e3080240 	movw	r0, #33344	; 0x8240
 100d968:	e3400106 	movt	r0, #262	; 0x106
 100d96c:	eb00278f 	bl	10177b0 <print>
		}

		va_end(args);
	}
}
 100d970:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100d974:	e28dd01c 	add	sp, sp, #28
 100d978:	e8bd40d0 	pop	{r4, r6, r7, lr}
 100d97c:	e28dd00c 	add	sp, sp, #12
 100d980:	e12fff1e 	bx	lr
 100d984:	e320f000 	nop	{0}
 100d988:	a17f0000 	.word	0xa17f0000
 100d98c:	41689374 	.word	0x41689374
 100d990:	a17f0000 	.word	0xa17f0000
 100d994:	3f689374 	.word	0x3f689374

0100d998 <d_printf.constprop.9>:
void d_printf(int debug_code, char *fmt, ...)
 100d998:	e92d000e 	push	{r1, r2, r3}
}
 100d99c:	e28dd00c 	add	sp, sp, #12
 100d9a0:	e12fff1e 	bx	lr

0100d9a4 <d_printf.constprop.10>:
void d_printf(int debug_code, char *fmt, ...)
 100d9a4:	e92d000e 	push	{r1, r2, r3}
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 100d9a8:	e3080248 	movw	r0, #33352	; 0x8248
void d_printf(int debug_code, char *fmt, ...)
 100d9ac:	e92d40d0 	push	{r4, r6, r7, lr}
 100d9b0:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100d9b4:	e24dd01c 	sub	sp, sp, #28
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 100d9b8:	e3400106 	movt	r0, #262	; 0x106
 100d9bc:	eb00277b 	bl	10177b0 <print>
		if(g_hal.g_timer_have_init) {
 100d9c0:	e3093b80 	movw	r3, #39808	; 0x9b80
 100d9c4:	e3403145 	movt	r3, #325	; 0x145
 100d9c8:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 100d9cc:	e3540000 	cmp	r4, #0
			usec = 0;
 100d9d0:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 100d9d4:	0a00001b 	beq	100da48 <d_printf.constprop.10+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100d9d8:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100d9dc:	eddf3b37 	vldr	d19, [pc, #220]	; 100dac0 <d_printf.constprop.10+0x11c>
 100d9e0:	eddf2b38 	vldr	d18, [pc, #224]	; 100dac8 <d_printf.constprop.10+0x124>
 100d9e4:	e5922004 	ldr	r2, [r2, #4]
 100d9e8:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100d9ec:	e1e02002 	mvn	r2, r2
 100d9f0:	ee073a90 	vmov	s15, r3
 100d9f4:	eef80b67 	vcvt.f64.u32	d16, s15
 100d9f8:	ee072a90 	vmov	s15, r2
 100d9fc:	eef81b67 	vcvt.f64.u32	d17, s15
 100da00:	ee600ba3 	vmul.f64	d16, d16, d19
 100da04:	ee410ba2 	vmla.f64	d16, d17, d18
 100da08:	ec510b30 	vmov	r0, r1, d16
 100da0c:	fa003213 	blx	101a260 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 100da10:	e3042240 	movw	r2, #16960	; 0x4240
 100da14:	e3a03000 	mov	r3, #0
 100da18:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100da1c:	e1a06000 	mov	r6, r0
 100da20:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100da24:	fa0031e7 	blx	101a1c8 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 100da28:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 100da2c:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 100da30:	e340200f 	movt	r2, #15
 100da34:	e3a03000 	mov	r3, #0
 100da38:	e1a00006 	mov	r0, r6
 100da3c:	e1a01007 	mov	r1, r7
 100da40:	fa0031e0 	blx	101a1c8 <__aeabi_uldivmod>
 100da44:	e1a03002 	mov	r3, r2
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 100da48:	e3082234 	movw	r2, #33332	; 0x8234
 100da4c:	e58d3000 	str	r3, [sp]
 100da50:	e3402106 	movt	r2, #262	; 0x106
 100da54:	e1a03004 	mov	r3, r4
 100da58:	e3a01a01 	mov	r1, #4096	; 0x1000
 100da5c:	e28d000c 	add	r0, sp, #12
 100da60:	fa003b85 	blx	101c87c <snprintf>
			print(time_buffer);
 100da64:	e28d000c 	add	r0, sp, #12
 100da68:	eb002750 	bl	10177b0 <print>
		va_start(args, fmt);
 100da6c:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100da70:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100da74:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100da78:	e282202c 	add	r2, r2, #44	; 0x2c
 100da7c:	e1a0300c 	mov	r3, ip
 100da80:	e5922000 	ldr	r2, [r2]
 100da84:	e3a01a01 	mov	r1, #4096	; 0x1000
 100da88:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100da8c:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100da90:	fa004bf1 	blx	1020a5c <vsnprintf>
		print(buffer);
 100da94:	e28d0018 	add	r0, sp, #24
 100da98:	eb002744 	bl	10177b0 <print>
			print("\033[m\r\n");
 100da9c:	e3080240 	movw	r0, #33344	; 0x8240
 100daa0:	e3400106 	movt	r0, #262	; 0x106
 100daa4:	eb002741 	bl	10177b0 <print>
}
 100daa8:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100daac:	e28dd01c 	add	sp, sp, #28
 100dab0:	e8bd40d0 	pop	{r4, r6, r7, lr}
 100dab4:	e28dd00c 	add	sp, sp, #12
 100dab8:	e12fff1e 	bx	lr
 100dabc:	e320f000 	nop	{0}
 100dac0:	a17f0000 	.word	0xa17f0000
 100dac4:	41689374 	.word	0x41689374
 100dac8:	a17f0000 	.word	0xa17f0000
 100dacc:	3f689374 	.word	0x3f689374

0100dad0 <d_xilinx_assert>:
/**
 * Xilinx assert handler.
 */
void d_xilinx_assert(const char8 *file, s32 line)
{
	d_printf(D_ERROR, "XilAssert failed at line %d of file `%s'\r\n", line, file);
 100dad0:	e1a02001 	mov	r2, r1
 100dad4:	e3081260 	movw	r1, #33376	; 0x8260
 100dad8:	e1a03000 	mov	r3, r0
 100dadc:	e3401106 	movt	r1, #262	; 0x106
 100dae0:	e3a00004 	mov	r0, #4
 100dae4:	eaffffae 	b	100d9a4 <d_printf.constprop.10>

0100dae8 <bogo_calibrate>:
{
 100dae8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100daec:	e3096b80 	movw	r6, #39808	; 0x9b80
 100daf0:	e3406145 	movt	r6, #325	; 0x145
 100daf4:	e3a01000 	mov	r1, #0
 100daf8:	e3441020 	movt	r1, #16416	; 0x4020
 100dafc:	e286be86 	add	fp, r6, #2144	; 0x860
 100db00:	e5968014 	ldr	r8, [r6, #20]
 100db04:	e3a03002 	mov	r3, #2
{
 100db08:	ed2d8b02 	vpush	{d8}
	uint64_t timing_total = 0;
 100db0c:	e3a09000 	mov	r9, #0
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100db10:	ed9f8a5e 	vldr	s16, [pc, #376]	; 100dc90 <bogo_calibrate+0x1a8>
{
 100db14:	e24dd024 	sub	sp, sp, #36	; 0x24
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100db18:	ee071a90 	vmov	s15, r1
 100db1c:	e2888004 	add	r8, r8, #4
 100db20:	e2860a01 	add	r0, r6, #4096	; 0x1000
 100db24:	e58d3018 	str	r3, [sp, #24]
	uint64_t timing_total = 0;
 100db28:	e58d9014 	str	r9, [sp, #20]
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100db2c:	e5801058 	str	r1, [r0, #88]	; 0x58
 100db30:	e5987000 	ldr	r7, [r8]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100db34:	ee687a27 	vmul.f32	s15, s16, s15
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100db38:	e3770c01 	cmn	r7, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100db3c:	e1e07007 	mvn	r7, r7
		msb = g_hal.g_timer_overflow;
 100db40:	9596104c 	ldrls	r1, [r6, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 100db44:	e5867058 	str	r7, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100db48:	ee170a90 	vmov	r0, s15
		msb = g_hal.g_timer_overflow;
 100db4c:	958d101c 	strls	r1, [sp, #28]
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100db50:	e59da01c 	ldr	sl, [sp, #28]
	g_hal.timers[index] = timer_value;
 100db54:	e586a05c 	str	sl, [r6, #92]	; 0x5c
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100db58:	fa0031b0 	blx	101a220 <__aeabi_f2ulz>
	while(iters--) {
 100db5c:	e2504001 	subs	r4, r0, #1
 100db60:	e3e02000 	mvn	r2, #0
 100db64:	e2c15000 	sbc	r5, r1, #0
 100db68:	e1903001 	orrs	r3, r0, r1
 100db6c:	e3e03000 	mvn	r3, #0
 100db70:	0a000009 	beq	100db9c <bogo_calibrate+0xb4>
		__asm__("nop");
 100db74:	e320f000 	nop	{0}
	while(iters--) {
 100db78:	e2544001 	subs	r4, r4, #1
 100db7c:	e2c55000 	sbc	r5, r5, #0
 100db80:	e1550003 	cmp	r5, r3
 100db84:	01540002 	cmpeq	r4, r2
 100db88:	1afffff9 	bne	100db74 <bogo_calibrate+0x8c>
 100db8c:	e5968014 	ldr	r8, [r6, #20]
 100db90:	e5967058 	ldr	r7, [r6, #88]	; 0x58
 100db94:	e596a05c 	ldr	sl, [r6, #92]	; 0x5c
 100db98:	e2888004 	add	r8, r8, #4
 100db9c:	e5981000 	ldr	r1, [r8]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100dba0:	e3710c01 	cmn	r1, #256	; 0x100
 100dba4:	8a000026 	bhi	100dc44 <bogo_calibrate+0x15c>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100dba8:	e1e01001 	mvn	r1, r1
		msb = g_hal.g_timer_overflow;
 100dbac:	e596004c 	ldr	r0, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100dbb0:	e0517007 	subs	r7, r1, r7
		timing_total += d_read_timing(0);
 100dbb4:	e59d1014 	ldr	r1, [sp, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100dbb8:	e50b7008 	str	r7, [fp, #-8]
 100dbbc:	e0c0a00a 	sbc	sl, r0, sl
		timing_total += d_read_timing(0);
 100dbc0:	e0999007 	adds	r9, r9, r7
 100dbc4:	e0a1100a 	adc	r1, r1, sl
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100dbc8:	e50ba004 	str	sl, [fp, #-4]
		timing_total += d_read_timing(0);
 100dbcc:	e58d1014 	str	r1, [sp, #20]
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 100dbd0:	e59d1018 	ldr	r1, [sp, #24]
 100dbd4:	e3510001 	cmp	r1, #1
 100dbd8:	1a000025 	bne	100dc74 <bogo_calibrate+0x18c>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 100dbdc:	e59d1014 	ldr	r1, [sp, #20]
 100dbe0:	e1a00009 	mov	r0, r9
 100dbe4:	fa0030d5 	blx	1019f40 <__aeabi_ul2d>
 100dbe8:	eddf0b26 	vldr	d16, [pc, #152]	; 100dc88 <bogo_calibrate+0x1a0>
 100dbec:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100dbf0:	e308128c 	movw	r1, #33420	; 0x828c
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100dbf4:	ed9f6a26 	vldr	s12, [pc, #152]	; 100dc94 <bogo_calibrate+0x1ac>
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100dbf8:	e3401106 	movt	r1, #262	; 0x106
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100dbfc:	eeb07a04 	vmov.f32	s14, #4	; 0x40200000  2.5
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100dc00:	e3a00002 	mov	r0, #2
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 100dc04:	ee610ba0 	vmul.f64	d16, d17, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100dc08:	e59fc088 	ldr	ip, [pc, #136]	; 100dc98 <bogo_calibrate+0x1b0>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 100dc0c:	eef77be0 	vcvt.f32.f64	s15, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100dc10:	eec66a27 	vdiv.f32	s13, s12, s15
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100dc14:	eef70ae7 	vcvt.f64.f32	d16, s15
 100dc18:	edcd0b00 	vstr	d16, [sp]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100dc1c:	ee667a87 	vmul.f32	s15, s13, s14
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100dc20:	eef70ae6 	vcvt.f64.f32	d16, s13
 100dc24:	eef71ae7 	vcvt.f64.f32	d17, s15
 100dc28:	edcd0b02 	vstr	d16, [sp, #8]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 100dc2c:	edcc7a16 	vstr	s15, [ip, #88]	; 0x58
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100dc30:	ec532b31 	vmov	r2, r3, d17
 100dc34:	ebffff0c 	bl	100d86c <d_printf.constprop.8>
}
 100dc38:	e28dd024 	add	sp, sp, #36	; 0x24
 100dc3c:	ecbd8b02 	vpop	{d8}
 100dc40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100dc44:	e1e01001 	mvn	r1, r1
 100dc48:	e3a00000 	mov	r0, #0
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100dc4c:	e0517007 	subs	r7, r1, r7
		timing_total += d_read_timing(0);
 100dc50:	e59d1014 	ldr	r1, [sp, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100dc54:	e0c0a00a 	sbc	sl, r0, sl
		timing_total += d_read_timing(0);
 100dc58:	e0999007 	adds	r9, r9, r7
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100dc5c:	e90b0480 	stmdb	fp, {r7, sl}
		timing_total += d_read_timing(0);
 100dc60:	e0a1100a 	adc	r1, r1, sl
 100dc64:	e58d1014 	str	r1, [sp, #20]
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 100dc68:	e59d1018 	ldr	r1, [sp, #24]
 100dc6c:	e3510001 	cmp	r1, #1
 100dc70:	0affffd9 	beq	100dbdc <bogo_calibrate+0xf4>
 100dc74:	e59f101c 	ldr	r1, [pc, #28]	; 100dc98 <bogo_calibrate+0x1b0>
 100dc78:	edd17a16 	vldr	s15, [r1, #88]	; 0x58
 100dc7c:	e3a01001 	mov	r1, #1
 100dc80:	e58d1018 	str	r1, [sp, #24]
 100dc84:	eaffffa9 	b	100db30 <bogo_calibrate+0x48>
 100dc88:	a17f0000 	.word	0xa17f0000
 100dc8c:	3f689374 	.word	0x3f689374
 100dc90:	47c35000 	.word	0x47c35000
 100dc94:	48435000 	.word	0x48435000
 100dc98:	0145ab80 	.word	0x0145ab80

0100dc9c <bogo_delay>:
{
 100dc9c:	e92d4030 	push	{r4, r5, lr}
 100dca0:	e24dd00c 	sub	sp, sp, #12
 100dca4:	e58d0004 	str	r0, [sp, #4]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100dca8:	eddd7a01 	vldr	s15, [sp, #4]
 100dcac:	e59f3048 	ldr	r3, [pc, #72]	; 100dcfc <bogo_delay+0x60>
 100dcb0:	eef87a67 	vcvt.f32.u32	s15, s15
 100dcb4:	ed937a16 	vldr	s14, [r3, #88]	; 0x58
 100dcb8:	ee677a87 	vmul.f32	s15, s15, s14
 100dcbc:	ee170a90 	vmov	r0, s15
 100dcc0:	fa003156 	blx	101a220 <__aeabi_f2ulz>
	while(iters--) {
 100dcc4:	e2504001 	subs	r4, r0, #1
 100dcc8:	e2c15000 	sbc	r5, r1, #0
 100dccc:	e1903001 	orrs	r3, r0, r1
 100dcd0:	0a000007 	beq	100dcf4 <bogo_delay+0x58>
 100dcd4:	e3e02000 	mvn	r2, #0
 100dcd8:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 100dcdc:	e320f000 	nop	{0}
	while(iters--) {
 100dce0:	e2544001 	subs	r4, r4, #1
 100dce4:	e2c55000 	sbc	r5, r5, #0
 100dce8:	e1550003 	cmp	r5, r3
 100dcec:	01540002 	cmpeq	r4, r2
 100dcf0:	1afffff9 	bne	100dcdc <bogo_delay+0x40>
}
 100dcf4:	e28dd00c 	add	sp, sp, #12
 100dcf8:	e8bd8030 	pop	{r4, r5, pc}
 100dcfc:	0145ab80 	.word	0x0145ab80

0100dd00 <d_printf>:
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100dd00:	e3500001 	cmp	r0, #1
{
 100dd04:	e92d000e 	push	{r1, r2, r3}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100dd08:	d3a03000 	movle	r3, #0
 100dd0c:	c3a03001 	movgt	r3, #1
 100dd10:	e3500000 	cmp	r0, #0
 100dd14:	03a03001 	moveq	r3, #1
{
 100dd18:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100dd1c:	e3530000 	cmp	r3, #0
{
 100dd20:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100dd24:	e24dd018 	sub	sp, sp, #24
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 100dd28:	0a00003b 	beq	100de1c <d_printf+0x11c>
		switch(debug_code) {
 100dd2c:	e2403001 	sub	r3, r0, #1
 100dd30:	e1a04000 	mov	r4, r0
 100dd34:	e3530003 	cmp	r3, #3
 100dd38:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100dd3c:	ea000006 	b	100dd5c <d_printf+0x5c>
 100dd40:	0100de30 	.word	0x0100de30
 100dd44:	0100de40 	.word	0x0100de40
 100dd48:	0100de50 	.word	0x0100de50
 100dd4c:	0100dd50 	.word	0x0100dd50
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 100dd50:	e3080248 	movw	r0, #33352	; 0x8248
 100dd54:	e3400106 	movt	r0, #262	; 0x106
 100dd58:	eb002694 	bl	10177b0 <print>
		if(g_hal.g_timer_have_init) {
 100dd5c:	e3093b80 	movw	r3, #39808	; 0x9b80
 100dd60:	e3403145 	movt	r3, #325	; 0x145
 100dd64:	e5935050 	ldr	r5, [r3, #80]	; 0x50
 100dd68:	e3550000 	cmp	r5, #0
			usec = 0;
 100dd6c:	01a03005 	moveq	r3, r5
		if(g_hal.g_timer_have_init) {
 100dd70:	0a00001b 	beq	100dde4 <d_printf+0xe4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100dd74:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100dd78:	eddf3b52 	vldr	d19, [pc, #328]	; 100dec8 <d_printf+0x1c8>
 100dd7c:	eddf2b53 	vldr	d18, [pc, #332]	; 100ded0 <d_printf+0x1d0>
 100dd80:	e5922004 	ldr	r2, [r2, #4]
 100dd84:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100dd88:	e1e02002 	mvn	r2, r2
 100dd8c:	ee073a90 	vmov	s15, r3
 100dd90:	eef80b67 	vcvt.f64.u32	d16, s15
 100dd94:	ee072a90 	vmov	s15, r2
 100dd98:	eef81b67 	vcvt.f64.u32	d17, s15
 100dd9c:	ee600ba3 	vmul.f64	d16, d16, d19
 100dda0:	ee410ba2 	vmla.f64	d16, d17, d18
 100dda4:	ec510b30 	vmov	r0, r1, d16
 100dda8:	fa00312c 	blx	101a260 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 100ddac:	e3042240 	movw	r2, #16960	; 0x4240
 100ddb0:	e3a03000 	mov	r3, #0
 100ddb4:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100ddb8:	e1a06000 	mov	r6, r0
 100ddbc:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100ddc0:	fa003100 	blx	101a1c8 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 100ddc4:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 100ddc8:	e1a05000 	mov	r5, r0
			usec = total_usec % 1000000;
 100ddcc:	e340200f 	movt	r2, #15
 100ddd0:	e3a03000 	mov	r3, #0
 100ddd4:	e1a00006 	mov	r0, r6
 100ddd8:	e1a01007 	mov	r1, r7
 100dddc:	fa0030f9 	blx	101a1c8 <__aeabi_uldivmod>
 100dde0:	e1a03002 	mov	r3, r2
		if(debug_code != D_RAW) {
 100dde4:	e3540000 	cmp	r4, #0
 100dde8:	1a00001c 	bne	100de60 <d_printf+0x160>
		va_start(args, fmt);
 100ddec:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100ddf0:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100ddf4:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100ddf8:	e282202c 	add	r2, r2, #44	; 0x2c
 100ddfc:	e1a0300c 	mov	r3, ip
 100de00:	e28d0018 	add	r0, sp, #24
 100de04:	e5922000 	ldr	r2, [r2]
 100de08:	e3a01a01 	mov	r1, #4096	; 0x1000
		va_start(args, fmt);
 100de0c:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100de10:	fa004b11 	blx	1020a5c <vsnprintf>
		print(buffer);
 100de14:	e28d0018 	add	r0, sp, #24
 100de18:	eb002664 	bl	10177b0 <print>
}
 100de1c:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100de20:	e28dd018 	add	sp, sp, #24
 100de24:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 100de28:	e28dd00c 	add	sp, sp, #12
 100de2c:	e12fff1e 	bx	lr
				print("[--] ");							// dull white text (default)
 100de30:	e30802e0 	movw	r0, #33504	; 0x82e0
 100de34:	e3400106 	movt	r0, #262	; 0x106
 100de38:	eb00265c 	bl	10177b0 <print>
				break;
 100de3c:	eaffffc6 	b	100dd5c <d_printf+0x5c>
				print("\033[0;97m[ii] "); 				// bright white text
 100de40:	e3080224 	movw	r0, #33316	; 0x8224
 100de44:	e3400106 	movt	r0, #262	; 0x106
 100de48:	eb002658 	bl	10177b0 <print>
				break;
 100de4c:	eaffffc2 	b	100dd5c <d_printf+0x5c>
				print("\033[30;103m[WW]\033[0;93m ");	// yellow text
 100de50:	e30802e8 	movw	r0, #33512	; 0x82e8
 100de54:	e3400106 	movt	r0, #262	; 0x106
 100de58:	eb002654 	bl	10177b0 <print>
				break;
 100de5c:	eaffffbe 	b	100dd5c <d_printf+0x5c>
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 100de60:	e3082234 	movw	r2, #33332	; 0x8234
 100de64:	e58d3000 	str	r3, [sp]
 100de68:	e3402106 	movt	r2, #262	; 0x106
 100de6c:	e1a03005 	mov	r3, r5
 100de70:	e3a01a01 	mov	r1, #4096	; 0x1000
 100de74:	e28d000c 	add	r0, sp, #12
 100de78:	fa003a7f 	blx	101c87c <snprintf>
			print(time_buffer);
 100de7c:	e28d000c 	add	r0, sp, #12
 100de80:	eb00264a 	bl	10177b0 <print>
		va_start(args, fmt);
 100de84:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100de88:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100de8c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100de90:	e282202c 	add	r2, r2, #44	; 0x2c
 100de94:	e1a0300c 	mov	r3, ip
 100de98:	e5922000 	ldr	r2, [r2]
 100de9c:	e3a01a01 	mov	r1, #4096	; 0x1000
 100dea0:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100dea4:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 100dea8:	fa004aeb 	blx	1020a5c <vsnprintf>
		print(buffer);
 100deac:	e28d0018 	add	r0, sp, #24
 100deb0:	eb00263e 	bl	10177b0 <print>
			print("\033[m\r\n");
 100deb4:	e3080240 	movw	r0, #33344	; 0x8240
 100deb8:	e3400106 	movt	r0, #262	; 0x106
 100debc:	eb00263b 	bl	10177b0 <print>
}
 100dec0:	eaffffd5 	b	100de1c <d_printf+0x11c>
 100dec4:	e320f000 	nop	{0}
 100dec8:	a17f0000 	.word	0xa17f0000
 100decc:	41689374 	.word	0x41689374
 100ded0:	a17f0000 	.word	0xa17f0000
 100ded4:	3f689374 	.word	0x3f689374

0100ded8 <hal_init>:
{
 100ded8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 1.0f;
 100dedc:	e3096b80 	movw	r6, #39808	; 0x9b80
 100dee0:	e3406145 	movt	r6, #325	; 0x145
{
 100dee4:	e24dd014 	sub	sp, sp, #20
	g_hal.bogo_cal = 1.0f;
 100dee8:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
 100deec:	e286ba01 	add	fp, r6, #4096	; 0x1000
 100def0:	e58b3058 	str	r3, [fp, #88]	; 0x58
	init_platform();
 100def4:	eb000843 	bl	1010008 <init_platform>
	Xil_AssertSetCallback(&d_xilinx_assert);
 100def8:	e30d0ad0 	movw	r0, #56016	; 0xdad0
 100defc:	e3400100 	movt	r0, #256	; 0x100
 100df00:	eb002625 	bl	101779c <Xil_AssertSetCallback>
	d_printf(D_RAW, "\r\n\r\n\033[2J\033[0m\r\n");
 100df04:	e3081300 	movw	r1, #33536	; 0x8300
 100df08:	e3a00000 	mov	r0, #0
 100df0c:	e3401106 	movt	r1, #262	; 0x106
 100df10:	ebffff7a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "ps_app: Zynq application for YAOS Oscilloscope Project (%s)", PS_APP_VERSION_TAG);
 100df14:	e3082310 	movw	r2, #33552	; 0x8310
 100df18:	e308131c 	movw	r1, #33564	; 0x831c
 100df1c:	e3402106 	movt	r2, #262	; 0x106
 100df20:	e3401106 	movt	r1, #262	; 0x106
 100df24:	e3a00002 	mov	r0, #2
 100df28:	ebfffe4f 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "Built %s %s", __DATE__, __TIME__);
 100df2c:	e3083358 	movw	r3, #33624	; 0x8358
 100df30:	e3082364 	movw	r2, #33636	; 0x8364
 100df34:	e3081370 	movw	r1, #33648	; 0x8370
 100df38:	e3403106 	movt	r3, #262	; 0x106
 100df3c:	e3402106 	movt	r2, #262	; 0x106
 100df40:	e3401106 	movt	r1, #262	; 0x106
 100df44:	e3a00002 	mov	r0, #2
 100df48:	ebfffe47 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "");
 100df4c:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100df50:	e3a00002 	mov	r0, #2
 100df54:	e3401106 	movt	r1, #262	; 0x106
 100df58:	ebfffe43 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "Application (C) 2020 Tomato Engineering Ltd.");
 100df5c:	e308137c 	movw	r1, #33660	; 0x837c
 100df60:	e3a00002 	mov	r0, #2
 100df64:	e3401106 	movt	r1, #262	; 0x106
 100df68:	ebfffe3f 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "Parts       (C) 2005 - 2015 Xilinx, Inc.");
 100df6c:	e30813ac 	movw	r1, #33708	; 0x83ac
 100df70:	e3a00002 	mov	r0, #2
 100df74:	e3401106 	movt	r1, #262	; 0x106
 100df78:	ebfffe3b 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "");
 100df7c:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100df80:	e3a00002 	mov	r0, #2
 100df84:	e3401106 	movt	r1, #262	; 0x106
 100df88:	ebfffe37 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "Application is licenced under the MIT Licence");
 100df8c:	e30813d8 	movw	r1, #33752	; 0x83d8
 100df90:	e3a00002 	mov	r0, #2
 100df94:	e3401106 	movt	r1, #262	; 0x106
 100df98:	ebfffe33 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "For information see LICENCE in the Git repository");
 100df9c:	e3081408 	movw	r1, #33800	; 0x8408
 100dfa0:	e3a00002 	mov	r0, #2
 100dfa4:	e3401106 	movt	r1, #262	; 0x106
 100dfa8:	ebfffe2f 	bl	100d86c <d_printf.constprop.8>
	d_printf(D_INFO, "");
 100dfac:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 100dfb0:	e3a00002 	mov	r0, #2
 100dfb4:	e3401106 	movt	r1, #262	; 0x106
 100dfb8:	ebfffe2b 	bl	100d86c <d_printf.constprop.8>
	Xil_ICacheEnable();
 100dfbc:	eb0027ff 	bl	1017fc0 <Xil_ICacheEnable>
	Xil_DCacheEnable();
 100dfc0:	eb0027f5 	bl	1017f9c <Xil_DCacheEnable>
	d_printf(D_INFO, "boot: enabled D- and I-cache");
 100dfc4:	e308143c 	movw	r1, #33852	; 0x843c
 100dfc8:	e3a00002 	mov	r0, #2
 100dfcc:	e3401106 	movt	r1, #262	; 0x106
 100dfd0:	ebfffe25 	bl	100d86c <d_printf.constprop.8>
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 100dfd4:	e3a00000 	mov	r0, #0
 100dfd8:	eb00219a 	bl	1016648 <XScuGic_LookupConfig>
	if(g_hal.xscu_gic_cfg == NULL) {
 100dfdc:	e3500000 	cmp	r0, #0
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 100dfe0:	e586000c 	str	r0, [r6, #12]
	if(g_hal.xscu_gic_cfg == NULL) {
 100dfe4:	0a0000c8 	beq	100e30c <hal_init+0x434>
	error = XScuGic_CfgInitialize(&g_hal.xscu_gic, g_hal.xscu_gic_cfg, g_hal.xscu_gic_cfg->CpuBaseAddress);
 100dfe8:	e1a01000 	mov	r1, r0
 100dfec:	e5902004 	ldr	r2, [r0, #4]
 100dff0:	e1a00006 	mov	r0, r6
 100dff4:	eb00211e 	bl	1016474 <XScuGic_CfgInitialize>
	if(error != XST_SUCCESS) {
 100dff8:	e3500000 	cmp	r0, #0
 100dffc:	1a0000eb 	bne	100e3b0 <hal_init+0x4d8>
	error = XScuGic_SelfTest(&g_hal.xscu_gic);
 100e000:	e1a00006 	mov	r0, r6
 100e004:	eb002196 	bl	1016664 <XScuGic_SelfTest>
	if(error != XST_SUCCESS) {
 100e008:	e2508000 	subs	r8, r0, #0
 100e00c:	1a0000e0 	bne	100e394 <hal_init+0x4bc>
	Xil_ExceptionInit();
 100e010:	eb002a22 	bl	10188a0 <Xil_ExceptionInit>
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &g_hal.xscu_gic);
 100e014:	e3051adc 	movw	r1, #23260	; 0x5adc
 100e018:	e1a02006 	mov	r2, r6
 100e01c:	e3401101 	movt	r1, #257	; 0x101
 100e020:	e3a00005 	mov	r0, #5
 100e024:	eb002a1e 	bl	10188a4 <Xil_ExceptionRegisterHandler>
	Xil_ExceptionEnable();
 100e028:	e10f3000 	mrs	r3, CPSR
 100e02c:	e3c33080 	bic	r3, r3, #128	; 0x80
 100e030:	e129f003 	msr	CPSR_fc, r3
	d_printf(D_INFO, "XScuGic: interrupt controller ready");
 100e034:	e30814dc 	movw	r1, #34012	; 0x84dc
 100e038:	e3a00002 	mov	r0, #2
 100e03c:	e3401106 	movt	r1, #262	; 0x106
 100e040:	ebfffe09 	bl	100d86c <d_printf.constprop.8>
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 100e044:	e1a00008 	mov	r0, r8
 100e048:	eb002297 	bl	1016aac <XScuTimer_LookupConfig>
 100e04c:	e1a03000 	mov	r3, r0
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 100e050:	e2860010 	add	r0, r6, #16
 100e054:	e5932004 	ldr	r2, [r3, #4]
 100e058:	e1a01003 	mov	r1, r3
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 100e05c:	e5863020 	str	r3, [r6, #32]
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 100e060:	eb0021ac 	bl	1016718 <XScuTimer_CfgInitialize>
	if (error != XST_SUCCESS) {
 100e064:	e3500000 	cmp	r0, #0
 100e068:	1a0000c2 	bne	100e378 <hal_init+0x4a0>
	error = XScuTimer_SelfTest(&g_hal.xscu_timer);
 100e06c:	e2860010 	add	r0, r6, #16
 100e070:	eb00225e 	bl	10169f0 <XScuTimer_SelfTest>
	if (error != XST_SUCCESS) {
 100e074:	e3500000 	cmp	r0, #0
 100e078:	1a0000b7 	bne	100e35c <hal_init+0x484>
	d_printf(D_INFO, "XScuTimer: ready");
 100e07c:	e3081560 	movw	r1, #34144	; 0x8560
 100e080:	e3a00002 	mov	r0, #2
 100e084:	e3401106 	movt	r1, #262	; 0x106
 100e088:	ebfffdf7 	bl	100d86c <d_printf.constprop.8>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)irq_xscutimer, (void *)&g_hal.xscu_timer);
 100e08c:	e30d2848 	movw	r2, #55368	; 0xd848
 100e090:	e2863010 	add	r3, r6, #16
 100e094:	e3402100 	movt	r2, #256	; 0x100
 100e098:	e3a0101d 	mov	r1, #29
 100e09c:	e1a00006 	mov	r0, r6
 100e0a0:	eb001ebf 	bl	1015ba4 <XScuGic_Connect>
	if (error != XST_SUCCESS) {
 100e0a4:	e3500000 	cmp	r0, #0
 100e0a8:	1a0000a4 	bne	100e340 <hal_init+0x468>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 100e0ac:	e5963014 	ldr	r3, [r6, #20]
	*LocalAddr = Value;
 100e0b0:	e3e02000 	mvn	r2, #0
	g_hal.g_timer_overflow = 0;
 100e0b4:	e586004c 	str	r0, [r6, #76]	; 0x4c
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 100e0b8:	e3a0101d 	mov	r1, #29
 100e0bc:	e1a00006 	mov	r0, r6
 100e0c0:	e5832000 	str	r2, [r3]
	XScuTimer_EnableAutoReload(&g_hal.xscu_timer);
 100e0c4:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 100e0c8:	e5923008 	ldr	r3, [r2, #8]
 100e0cc:	e3833002 	orr	r3, r3, #2
	*LocalAddr = Value;
 100e0d0:	e5823008 	str	r3, [r2, #8]
	XScuTimer_EnableInterrupt(&g_hal.xscu_timer);
 100e0d4:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 100e0d8:	e5923008 	ldr	r3, [r2, #8]
 100e0dc:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 100e0e0:	e5823008 	str	r3, [r2, #8]
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 100e0e4:	eb002005 	bl	1016100 <XScuGic_Enable>
	XScuTimer_Start(&g_hal.xscu_timer);
 100e0e8:	e2860010 	add	r0, r6, #16
 100e0ec:	eb0021b5 	bl	10167c8 <XScuTimer_Start>
	g_hal.g_timer_have_init = 1;
 100e0f0:	e3a03001 	mov	r3, #1
 100e0f4:	e5863050 	str	r3, [r6, #80]	; 0x50
	bogo_calibrate();
 100e0f8:	ebfffe7a 	bl	100dae8 <bogo_calibrate>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100e0fc:	e5968014 	ldr	r8, [r6, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100e100:	ed9f7ab4 	vldr	s14, [pc, #720]	; 100e3d8 <hal_init+0x500>
 100e104:	eddb7a16 	vldr	s15, [fp, #88]	; 0x58
	return *(volatile u32 *) Addr;
 100e108:	e598a004 	ldr	sl, [r8, #4]
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100e10c:	e2888004 	add	r8, r8, #4
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100e110:	e37a0c01 	cmn	sl, #256	; 0x100
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100e114:	ee677a27 	vmul.f32	s15, s14, s15
		msb = g_hal.g_timer_overflow;
 100e118:	9596904c 	ldrls	r9, [r6, #76]	; 0x4c
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100e11c:	e1e0a00a 	mvn	sl, sl
	g_hal.timers[index] = timer_value;
 100e120:	e586a058 	str	sl, [r6, #88]	; 0x58
 100e124:	e586905c 	str	r9, [r6, #92]	; 0x5c
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100e128:	ee170a90 	vmov	r0, s15
 100e12c:	fa00303b 	blx	101a220 <__aeabi_f2ulz>
	while(iters--) {
 100e130:	e2504001 	subs	r4, r0, #1
 100e134:	e2c15000 	sbc	r5, r1, #0
 100e138:	e1903001 	orrs	r3, r0, r1
 100e13c:	0a00000b 	beq	100e170 <hal_init+0x298>
 100e140:	e3e02000 	mvn	r2, #0
 100e144:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 100e148:	e320f000 	nop	{0}
	while(iters--) {
 100e14c:	e2544001 	subs	r4, r4, #1
 100e150:	e2c55000 	sbc	r5, r5, #0
 100e154:	e1550003 	cmp	r5, r3
 100e158:	01540002 	cmpeq	r4, r2
 100e15c:	1afffff9 	bne	100e148 <hal_init+0x270>
 100e160:	e5968014 	ldr	r8, [r6, #20]
 100e164:	e596a058 	ldr	sl, [r6, #88]	; 0x58
 100e168:	e596905c 	ldr	r9, [r6, #92]	; 0x5c
 100e16c:	e2888004 	add	r8, r8, #4
 100e170:	e5984000 	ldr	r4, [r8]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100e174:	e59f3264 	ldr	r3, [pc, #612]	; 100e3e0 <hal_init+0x508>
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100e178:	e3740c01 	cmn	r4, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100e17c:	e1e04004 	mvn	r4, r4
		msb = g_hal.g_timer_overflow;
 100e180:	9596704c 	ldrls	r7, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100e184:	e054400a 	subs	r4, r4, sl
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e188:	e1a00004 	mov	r0, r4
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100e18c:	e0c75009 	sbc	r5, r7, r9
 100e190:	e14340f8 	strd	r4, [r3, #-8]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e194:	e1a01005 	mov	r1, r5
 100e198:	fa002f6c 	blx	1019f50 <__aeabi_l2d>
 100e19c:	eddf0b8b 	vldr	d16, [pc, #556]	; 100e3d0 <hal_init+0x4f8>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e1a0:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e1a4:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e1a8:	e0a55005 	adc	r5, r5, r5
 100e1ac:	e30825b4 	movw	r2, #34228	; 0x85b4
 100e1b0:	e30815cc 	movw	r1, #34252	; 0x85cc
 100e1b4:	e3402106 	movt	r2, #262	; 0x106
 100e1b8:	e3401106 	movt	r1, #262	; 0x106
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e1bc:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e1c0:	e3a00002 	mov	r0, #2
 100e1c4:	e58d4000 	str	r4, [sp]
 100e1c8:	e58d5004 	str	r5, [sp, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e1cc:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e1d0:	eef70ae7 	vcvt.f64.f32	d16, s15
 100e1d4:	edcd0b02 	vstr	d16, [sp, #8]
 100e1d8:	ebfffda3 	bl	100d86c <d_printf.constprop.8>
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 100e1dc:	e3a00000 	mov	r0, #0
 100e1e0:	eb001ac1 	bl	1014cec <XGpioPs_LookupConfig>
 100e1e4:	e1a03000 	mov	r3, r0
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 100e1e8:	e59f01f4 	ldr	r0, [pc, #500]	; 100e3e4 <hal_init+0x50c>
 100e1ec:	e5932004 	ldr	r2, [r3, #4]
 100e1f0:	e1a01003 	mov	r1, r3
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 100e1f4:	e5863048 	str	r3, [r6, #72]	; 0x48
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 100e1f8:	eb001785 	bl	1014014 <XGpioPs_CfgInitialize>
	if (error != XST_SUCCESS) {
 100e1fc:	e2504000 	subs	r4, r0, #0
 100e200:	1a000047 	bne	100e324 <hal_init+0x44c>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 0, 0x00000000);
 100e204:	e1a02004 	mov	r2, r4
 100e208:	e1a01004 	mov	r1, r4
 100e20c:	e59f01d0 	ldr	r0, [pc, #464]	; 100e3e4 <hal_init+0x50c>
 100e210:	eb001835 	bl	10142ec <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 1, 0x00000000);
 100e214:	e1a02004 	mov	r2, r4
 100e218:	e3a01001 	mov	r1, #1
 100e21c:	e59f01c0 	ldr	r0, [pc, #448]	; 100e3e4 <hal_init+0x50c>
 100e220:	eb001831 	bl	10142ec <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 2, 0x00000000);
 100e224:	e1a02004 	mov	r2, r4
 100e228:	e3a01002 	mov	r1, #2
 100e22c:	e59f01b0 	ldr	r0, [pc, #432]	; 100e3e4 <hal_init+0x50c>
 100e230:	eb00182d 	bl	10142ec <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 3, 0x00000000);
 100e234:	e1a02004 	mov	r2, r4
 100e238:	e3a01003 	mov	r1, #3
 100e23c:	e59f01a0 	ldr	r0, [pc, #416]	; 100e3e4 <hal_init+0x50c>
 100e240:	e3a04a01 	mov	r4, #4096	; 0x1000
 100e244:	eb001828 	bl	10142ec <XGpioPs_SetDirection>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100e248:	e3a02001 	mov	r2, #1
 100e24c:	e3a01009 	mov	r1, #9
 100e250:	e59f018c 	ldr	r0, [pc, #396]	; 100e3e4 <hal_init+0x50c>
 100e254:	e34e4000 	movt	r4, #57344	; 0xe000
 100e258:	eb00199d 	bl	10148d4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100e25c:	e3a02001 	mov	r2, #1
 100e260:	e3a01009 	mov	r1, #9
 100e264:	e59f0178 	ldr	r0, [pc, #376]	; 100e3e4 <hal_init+0x50c>
 100e268:	eb001a1c 	bl	1014ae0 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100e26c:	e3a02001 	mov	r2, #1
 100e270:	e3a01025 	mov	r1, #37	; 0x25
 100e274:	e59f0168 	ldr	r0, [pc, #360]	; 100e3e4 <hal_init+0x50c>
 100e278:	eb001995 	bl	10148d4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100e27c:	e3a02001 	mov	r2, #1
 100e280:	e3a01025 	mov	r1, #37	; 0x25
 100e284:	e59f0158 	ldr	r0, [pc, #344]	; 100e3e4 <hal_init+0x50c>
 100e288:	eb001a14 	bl	1014ae0 <XGpioPs_SetOutputEnablePin>
	*LocalAddr = Value;
 100e28c:	e3a00000 	mov	r0, #0
 100e290:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100e294:	e1a02000 	mov	r2, r0
 100e298:	e34e3000 	movt	r3, #57344	; 0xe000
 100e29c:	e34f2fdf 	movt	r2, #65503	; 0xffdf
 100e2a0:	e34f0dff 	movt	r0, #65023	; 0xfdff
	d_printf(D_INFO, "XGpioPs: ready");
 100e2a4:	e3081624 	movw	r1, #34340	; 0x8624
 100e2a8:	e5830000 	str	r0, [r3]
 100e2ac:	e3401106 	movt	r1, #262	; 0x106
 100e2b0:	e5832008 	str	r2, [r3, #8]
 100e2b4:	e3a00002 	mov	r0, #2
 100e2b8:	ebfffd6b 	bl	100d86c <d_printf.constprop.8>
	fabcfg_init();
 100e2bc:	ebfffd08 	bl	100d6e4 <fabcfg_init>
	d_printf(D_INFO, "XUartPs: resetting RX FIFO");
 100e2c0:	e3081634 	movw	r1, #34356	; 0x8634
 100e2c4:	e3a00002 	mov	r0, #2
 100e2c8:	e3401106 	movt	r1, #262	; 0x106
 100e2cc:	ebfffd66 	bl	100d86c <d_printf.constprop.8>
	return *(volatile u32 *) Addr;
 100e2d0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100e2d4:	e3130002 	tst	r3, #2
 100e2d8:	1a000005 	bne	100e2f4 <hal_init+0x41c>
		d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", XUartPs_RecvByte(STDIN_BASEADDRESS));
 100e2dc:	e3a00a01 	mov	r0, #4096	; 0x1000
 100e2e0:	e34e0000 	movt	r0, #57344	; 0xe000
 100e2e4:	eb002b7b 	bl	10190d8 <XUartPs_RecvByte>
 100e2e8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100e2ec:	e3130002 	tst	r3, #2
 100e2f0:	0afffff9 	beq	100e2dc <hal_init+0x404>
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 100e2f4:	ed9f0a38 	vldr	s0, [pc, #224]	; 100e3dc <hal_init+0x504>
 100e2f8:	e3a01000 	mov	r1, #0
 100e2fc:	e59f00e4 	ldr	r0, [pc, #228]	; 100e3e8 <hal_init+0x510>
}
 100e300:	e28dd014 	add	sp, sp, #20
 100e304:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 100e308:	eafffad0 	b	100ce50 <clkwiz_init>
		d_printf(D_ERROR, "XScuGic: configuration lookup returns NULL");
 100e30c:	e308145c 	movw	r1, #33884	; 0x845c
 100e310:	e3a00004 	mov	r0, #4
 100e314:	e3401106 	movt	r1, #262	; 0x106
 100e318:	ebfffda1 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e31c:	e3e00000 	mvn	r0, #0
 100e320:	fa003042 	blx	101a430 <exit>
		d_printf(D_ERROR, "XGpioPs: returned error code: %d, unable to start", error);
 100e324:	e30815f0 	movw	r1, #34288	; 0x85f0
 100e328:	e3a00004 	mov	r0, #4
 100e32c:	e1a02004 	mov	r2, r4
 100e330:	e3401106 	movt	r1, #262	; 0x106
 100e334:	ebfffd9a 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e338:	e3e00000 	mvn	r0, #0
 100e33c:	fa00303b 	blx	101a430 <exit>
		d_printf(D_ERROR, "XScuTimer: unable to connect interrupt handler: error code %d", error);
 100e340:	e3081574 	movw	r1, #34164	; 0x8574
 100e344:	e1a02000 	mov	r2, r0
 100e348:	e3401106 	movt	r1, #262	; 0x106
 100e34c:	e3a00004 	mov	r0, #4
 100e350:	ebfffd93 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e354:	e3e00000 	mvn	r0, #0
 100e358:	fa003034 	blx	101a430 <exit>
		d_printf(D_ERROR, "XScuTimer: self test failed with error %d", error);
 100e35c:	e3081534 	movw	r1, #34100	; 0x8534
 100e360:	e1a02000 	mov	r2, r0
 100e364:	e3401106 	movt	r1, #262	; 0x106
 100e368:	e3a00004 	mov	r0, #4
 100e36c:	ebfffd8c 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e370:	e3e00000 	mvn	r0, #0
 100e374:	fa00302d 	blx	101a430 <exit>
		d_printf(D_ERROR, "XScuTimer: returned error code: %d, unable to start", error);
 100e378:	e3081500 	movw	r1, #34048	; 0x8500
 100e37c:	e1a02000 	mov	r2, r0
 100e380:	e3401106 	movt	r1, #262	; 0x106
 100e384:	e3a00004 	mov	r0, #4
 100e388:	ebfffd85 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e38c:	e3e00000 	mvn	r0, #0
 100e390:	fa003026 	blx	101a430 <exit>
		d_printf(D_ERROR, "XScuGic: self test failed error %d", error);
 100e394:	e30814b8 	movw	r1, #33976	; 0x84b8
 100e398:	e3a00004 	mov	r0, #4
 100e39c:	e1a02008 	mov	r2, r8
 100e3a0:	e3401106 	movt	r1, #262	; 0x106
 100e3a4:	ebfffd7e 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e3a8:	e3e00000 	mvn	r0, #0
 100e3ac:	fa00301f 	blx	101a430 <exit>
		d_printf(D_ERROR, "XScuGic: configuration init returned error %d", error);
 100e3b0:	e3081488 	movw	r1, #33928	; 0x8488
 100e3b4:	e1a02000 	mov	r2, r0
 100e3b8:	e3401106 	movt	r1, #262	; 0x106
 100e3bc:	e3a00004 	mov	r0, #4
 100e3c0:	ebfffd77 	bl	100d9a4 <d_printf.constprop.10>
		exit(-1);
 100e3c4:	e3e00000 	mvn	r0, #0
 100e3c8:	fa003018 	blx	101a430 <exit>
 100e3cc:	e320f000 	nop	{0}
 100e3d0:	a17f0000 	.word	0xa17f0000
 100e3d4:	3f689374 	.word	0x3f689374
 100e3d8:	47c35000 	.word	0x47c35000
 100e3dc:	4331c71c 	.word	0x4331c71c
 100e3e0:	0145a3e0 	.word	0x0145a3e0
 100e3e4:	01459ba4 	.word	0x01459ba4
 100e3e8:	0145abe0 	.word	0x0145abe0

0100e3ec <d_waitkey>:
	res = XUartPs_RecvByte(STDIN_BASEADDRESS);
 100e3ec:	e3a00a01 	mov	r0, #4096	; 0x1000
 100e3f0:	e34e0000 	movt	r0, #57344	; 0xe000
 100e3f4:	ea002b37 	b	10190d8 <XUartPs_RecvByte>

0100e3f8 <d_iskeypress>:
	*LocalAddr = Value;
 100e3f8:	e3a03a01 	mov	r3, #4096	; 0x1000
 100e3fc:	e3a02003 	mov	r2, #3
 100e400:	e34e3000 	movt	r3, #57344	; 0xe000
 100e404:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 100e408:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
	return XUartPs_IsReceiveData(STDIN_BASEADDRESS);
 100e40c:	e2200002 	eor	r0, r0, #2
}
 100e410:	e7e000d0 	ubfx	r0, r0, #1, #1
 100e414:	e12fff1e 	bx	lr

0100e418 <d_getkey>:
 100e418:	e3a00a01 	mov	r0, #4096	; 0x1000
 100e41c:	e34e0000 	movt	r0, #57344	; 0xe000
 100e420:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
	if(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 100e424:	e3130002 	tst	r3, #2
 100e428:	0a000001 	beq	100e434 <d_getkey+0x1c>
}
 100e42c:	e3a00000 	mov	r0, #0
 100e430:	e12fff1e 	bx	lr
		return XUartPs_RecvByte(STDIN_BASEADDRESS);
 100e434:	ea002b27 	b	10190d8 <XUartPs_RecvByte>

0100e438 <d_read_global_timer>:
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100e438:	e3092b80 	movw	r2, #39808	; 0x9b80
 100e43c:	e3402145 	movt	r2, #325	; 0x145
 100e440:	e5923014 	ldr	r3, [r2, #20]
 100e444:	e5933004 	ldr	r3, [r3, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100e448:	e3730c01 	cmn	r3, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100e44c:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 100e450:	9592c04c 	ldrls	ip, [r2, #76]	; 0x4c
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100e454:	e5803000 	str	r3, [r0]
	*msb_ret = msb;
 100e458:	e581c000 	str	ip, [r1]
}
 100e45c:	e12fff1e 	bx	lr

0100e460 <d_start_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e460:	e35000ff 	cmp	r0, #255	; 0xff
 100e464:	ca00000b 	bgt	100e498 <d_start_timing+0x38>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100e468:	e3093b80 	movw	r3, #39808	; 0x9b80
	g_hal.timers[index] = timer_value;
 100e46c:	e280000b 	add	r0, r0, #11
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100e470:	e3403145 	movt	r3, #325	; 0x145
 100e474:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timers[index] = timer_value;
 100e478:	e0831180 	add	r1, r3, r0, lsl #3
 100e47c:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100e480:	e3720c01 	cmn	r2, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 100e484:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 100e488:	9593c04c 	ldrls	ip, [r3, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 100e48c:	e7832180 	str	r2, [r3, r0, lsl #3]
 100e490:	e581c004 	str	ip, [r1, #4]
 100e494:	e12fff1e 	bx	lr
{
 100e498:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e49c:	e3a00f69 	mov	r0, #420	; 0x1a4
{
 100e4a0:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e4a4:	e3083650 	movw	r3, #34384	; 0x8650
 100e4a8:	e3082660 	movw	r2, #34400	; 0x8660
 100e4ac:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e4b0:	e58d0000 	str	r0, [sp]
 100e4b4:	e3403106 	movt	r3, #262	; 0x106
 100e4b8:	e3a00004 	mov	r0, #4
 100e4bc:	e3402106 	movt	r2, #262	; 0x106
 100e4c0:	e3401106 	movt	r1, #262	; 0x106
 100e4c4:	ebfffd36 	bl	100d9a4 <d_printf.constprop.10>
 100e4c8:	e3e00062 	mvn	r0, #98	; 0x62
 100e4cc:	fa002fd7 	blx	101a430 <exit>

0100e4d0 <d_stop_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e4d0:	e35000ff 	cmp	r0, #255	; 0xff
{
 100e4d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100e4d8:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e4dc:	ca000013 	bgt	100e530 <d_stop_timing+0x60>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100e4e0:	e3092b80 	movw	r2, #39808	; 0x9b80
 100e4e4:	e3402145 	movt	r2, #325	; 0x145
 100e4e8:	e5923014 	ldr	r3, [r2, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100e4ec:	e082e180 	add	lr, r2, r0, lsl #3
 100e4f0:	e2800f42 	add	r0, r0, #264	; 0x108
 100e4f4:	e59ec058 	ldr	ip, [lr, #88]	; 0x58
 100e4f8:	e2800003 	add	r0, r0, #3
 100e4fc:	e5933004 	ldr	r3, [r3, #4]
 100e500:	e1a00180 	lsl	r0, r0, #3
 100e504:	e59ee05c 	ldr	lr, [lr, #92]	; 0x5c
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100e508:	e3730c01 	cmn	r3, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100e50c:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 100e510:	9592104c 	ldrls	r1, [r2, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100e514:	e053300c 	subs	r3, r3, ip
 100e518:	e082c000 	add	ip, r2, r0
 100e51c:	e7823000 	str	r3, [r2, r0]
 100e520:	e0c1100e 	sbc	r1, r1, lr
 100e524:	e58c1004 	str	r1, [ip, #4]
}
 100e528:	e28dd00c 	add	sp, sp, #12
 100e52c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e530:	e3a00f6e 	mov	r0, #440	; 0x1b8
 100e534:	e3083650 	movw	r3, #34384	; 0x8650
 100e538:	e3082660 	movw	r2, #34400	; 0x8660
 100e53c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e540:	e58d0000 	str	r0, [sp]
 100e544:	e3403106 	movt	r3, #262	; 0x106
 100e548:	e3a00004 	mov	r0, #4
 100e54c:	e3402106 	movt	r2, #262	; 0x106
 100e550:	e3401106 	movt	r1, #262	; 0x106
 100e554:	ebfffd12 	bl	100d9a4 <d_printf.constprop.10>
 100e558:	e3e00062 	mvn	r0, #98	; 0x62
 100e55c:	fa002fb3 	blx	101a430 <exit>

0100e560 <d_read_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e560:	e35000ff 	cmp	r0, #255	; 0xff
 100e564:	ca000006 	bgt	100e584 <d_read_timing+0x24>
	return g_hal.timer_deltas[index];
 100e568:	e2800f42 	add	r0, r0, #264	; 0x108
 100e56c:	e3093b80 	movw	r3, #39808	; 0x9b80
 100e570:	e2800003 	add	r0, r0, #3
 100e574:	e3403145 	movt	r3, #325	; 0x145
 100e578:	e1a00180 	lsl	r0, r0, #3
}
 100e57c:	e18000d3 	ldrd	r0, [r0, r3]
 100e580:	e12fff1e 	bx	lr
{
 100e584:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e588:	e30001c9 	movw	r0, #457	; 0x1c9
{
 100e58c:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e590:	e3083650 	movw	r3, #34384	; 0x8650
 100e594:	e3082660 	movw	r2, #34400	; 0x8660
 100e598:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e59c:	e58d0000 	str	r0, [sp]
 100e5a0:	e3403106 	movt	r3, #262	; 0x106
 100e5a4:	e3a00004 	mov	r0, #4
 100e5a8:	e3402106 	movt	r2, #262	; 0x106
 100e5ac:	e3401106 	movt	r1, #262	; 0x106
 100e5b0:	ebfffcfb 	bl	100d9a4 <d_printf.constprop.10>
 100e5b4:	e3e00062 	mvn	r0, #98	; 0x62
 100e5b8:	fa002f9c 	blx	101a430 <exit>

0100e5bc <d_read_timing_us>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e5bc:	e35000ff 	cmp	r0, #255	; 0xff
{
 100e5c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100e5c4:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e5c8:	ca00000c 	bgt	100e600 <d_read_timing_us+0x44>
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e5cc:	e2800f42 	add	r0, r0, #264	; 0x108
 100e5d0:	e3093b80 	movw	r3, #39808	; 0x9b80
 100e5d4:	e2800003 	add	r0, r0, #3
 100e5d8:	e3403145 	movt	r3, #325	; 0x145
 100e5dc:	e1a00180 	lsl	r0, r0, #3
 100e5e0:	e18000d3 	ldrd	r0, [r0, r3]
 100e5e4:	fa002e59 	blx	1019f50 <__aeabi_l2d>
 100e5e8:	ed9f0b10 	vldr	d0, [pc, #64]	; 100e630 <d_read_timing_us+0x74>
 100e5ec:	ec410b30 	vmov	d16, r0, r1
 100e5f0:	ee200b80 	vmul.f64	d0, d16, d0
}
 100e5f4:	eeb70bc0 	vcvt.f32.f64	s0, d0
 100e5f8:	e28dd00c 	add	sp, sp, #12
 100e5fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e600:	e30001d6 	movw	r0, #470	; 0x1d6
 100e604:	e3083650 	movw	r3, #34384	; 0x8650
 100e608:	e3082660 	movw	r2, #34400	; 0x8660
 100e60c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e610:	e58d0000 	str	r0, [sp]
 100e614:	e3403106 	movt	r3, #262	; 0x106
 100e618:	e3a00004 	mov	r0, #4
 100e61c:	e3402106 	movt	r2, #262	; 0x106
 100e620:	e3401106 	movt	r1, #262	; 0x106
 100e624:	ebfffcde 	bl	100d9a4 <d_printf.constprop.10>
 100e628:	e3e00062 	mvn	r0, #98	; 0x62
 100e62c:	fa002f7f 	blx	101a430 <exit>
 100e630:	a17f0000 	.word	0xa17f0000
 100e634:	3f689374 	.word	0x3f689374

0100e638 <d_dump_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e638:	e35100ff 	cmp	r1, #255	; 0xff
{
 100e63c:	e92d4070 	push	{r4, r5, r6, lr}
 100e640:	e24dd010 	sub	sp, sp, #16
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e644:	ca00001b 	bgt	100e6b8 <d_dump_timing+0x80>
	return g_hal.timer_deltas[index];
 100e648:	e2811f42 	add	r1, r1, #264	; 0x108
 100e64c:	e3093b80 	movw	r3, #39808	; 0x9b80
 100e650:	e2811003 	add	r1, r1, #3
 100e654:	e3403145 	movt	r3, #325	; 0x145
 100e658:	e1a01181 	lsl	r1, r1, #3
 100e65c:	e1a06000 	mov	r6, r0
 100e660:	e0832001 	add	r2, r3, r1
 100e664:	e7934001 	ldr	r4, [r3, r1]
 100e668:	e5925004 	ldr	r5, [r2, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e66c:	e1a00004 	mov	r0, r4
 100e670:	e1a01005 	mov	r1, r5
 100e674:	fa002e35 	blx	1019f50 <__aeabi_l2d>
 100e678:	eddf0b1a 	vldr	d16, [pc, #104]	; 100e6e8 <d_dump_timing+0xb0>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e67c:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e680:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e684:	e0a55005 	adc	r5, r5, r5
 100e688:	e30815cc 	movw	r1, #34252	; 0x85cc
 100e68c:	e1cd40f0 	strd	r4, [sp]
 100e690:	e1a02006 	mov	r2, r6
 100e694:	e3401106 	movt	r1, #262	; 0x106
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e698:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e69c:	e3a00002 	mov	r0, #2
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100e6a0:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100e6a4:	eef70ae7 	vcvt.f64.f32	d16, s15
 100e6a8:	edcd0b02 	vstr	d16, [sp, #8]
 100e6ac:	ebfffc6e 	bl	100d86c <d_printf.constprop.8>
}
 100e6b0:	e28dd010 	add	sp, sp, #16
 100e6b4:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e6b8:	e30001c9 	movw	r0, #457	; 0x1c9
 100e6bc:	e3083650 	movw	r3, #34384	; 0x8650
 100e6c0:	e3082660 	movw	r2, #34400	; 0x8660
 100e6c4:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e6c8:	e58d0000 	str	r0, [sp]
 100e6cc:	e3403106 	movt	r3, #262	; 0x106
 100e6d0:	e3a00004 	mov	r0, #4
 100e6d4:	e3402106 	movt	r2, #262	; 0x106
 100e6d8:	e3401106 	movt	r1, #262	; 0x106
 100e6dc:	ebfffcb0 	bl	100d9a4 <d_printf.constprop.10>
 100e6e0:	e3e00062 	mvn	r0, #98	; 0x62
 100e6e4:	fa002f51 	blx	101a430 <exit>
 100e6e8:	a17f0000 	.word	0xa17f0000
 100e6ec:	3f689374 	.word	0x3f689374

0100e6f0 <d_dump_timing_ex>:
 100e6f0:	e35100ff 	cmp	r1, #255	; 0xff
 100e6f4:	d12fff1e 	bxle	lr
{
 100e6f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e6fc:	e30001c9 	movw	r0, #457	; 0x1c9
{
 100e700:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100e704:	e3083650 	movw	r3, #34384	; 0x8650
 100e708:	e3082660 	movw	r2, #34400	; 0x8660
 100e70c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e710:	e58d0000 	str	r0, [sp]
 100e714:	e3403106 	movt	r3, #262	; 0x106
 100e718:	e3a00004 	mov	r0, #4
 100e71c:	e3402106 	movt	r2, #262	; 0x106
 100e720:	e3401106 	movt	r1, #262	; 0x106
 100e724:	ebfffc9e 	bl	100d9a4 <d_printf.constprop.10>
 100e728:	e3e00062 	mvn	r0, #98	; 0x62
 100e72c:	fa002f3f 	blx	101a430 <exit>

0100e730 <mipi_csi_init>:
void mipi_csi_init()
{
	int status;
	QueueConf q_conf;

	d_printf(D_INFO, "mipi_csi: initialising...");
 100e730:	e308167c 	movw	r1, #34428	; 0x867c
{
 100e734:	e92d4030 	push	{r4, r5, lr}
	d_printf(D_INFO, "mipi_csi: initialising...");
 100e738:	e3401106 	movt	r1, #262	; 0x106
{
 100e73c:	e24dd01c 	sub	sp, sp, #28
	d_printf(D_INFO, "mipi_csi: initialising...");
 100e740:	e3a00002 	mov	r0, #2
	 * Set up the task queue.
	 */
	queue_conf_init(&q_conf);
	q_conf.capacity = CSISTRM_QUEUE_SIZE;

	D_ASSERT(queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) == CC_OK);
 100e744:	e30a4c78 	movw	r4, #44152	; 0xac78
	d_printf(D_INFO, "mipi_csi: initialising...");
 100e748:	ebfffd6c 	bl	100dd00 <d_printf>
	D_ASSERT(queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) == CC_OK);
 100e74c:	e3404145 	movt	r4, #325	; 0x145
	queue_conf_init(&q_conf);
 100e750:	e28d0008 	add	r0, sp, #8
 100e754:	ebffe06c 	bl	100690c <queue_conf_init>
	q_conf.capacity = CSISTRM_QUEUE_SIZE;
 100e758:	e3a03040 	mov	r3, #64	; 0x40
	D_ASSERT(queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) == CC_OK);
 100e75c:	e28d0008 	add	r0, sp, #8
 100e760:	e1a01004 	mov	r1, r4
	q_conf.capacity = CSISTRM_QUEUE_SIZE;
 100e764:	e58d3008 	str	r3, [sp, #8]
	D_ASSERT(queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) == CC_OK);
 100e768:	ebffe088 	bl	1006990 <queue_new_conf>
 100e76c:	e3500000 	cmp	r0, #0
 100e770:	1a00004c 	bne	100e8a8 <mipi_csi_init+0x178>

	d_printf(D_INFO, "mipi_csi: queue initialised");
 100e774:	e30816ec 	movw	r1, #34540	; 0x86ec
 100e778:	e3a00002 	mov	r0, #2
 100e77c:	e3401106 	movt	r1, #262	; 0x106
 100e780:	ebfffd5e 	bl	100dd00 <d_printf>

	/*
	 * Initialise the AXI DMA peripheral.
	 */
	g_mipi_csi_state.mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 100e784:	e3a00001 	mov	r0, #1
 100e788:	eb0010ea 	bl	1012b38 <XAxiDma_LookupConfig>
 100e78c:	e1a03000 	mov	r3, r0
	status = XAxiDma_CfgInitialize(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.mipi_dma_config);
 100e790:	e2840004 	add	r0, r4, #4
 100e794:	e1a01003 	mov	r1, r3
	g_mipi_csi_state.mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 100e798:	e5843754 	str	r3, [r4, #1876]	; 0x754
	status = XAxiDma_CfgInitialize(&g_mipi_csi_state.mipi_dma, g_mipi_csi_state.mipi_dma_config);
 100e79c:	eb000ef6 	bl	101237c <XAxiDma_CfgInitialize>

	if(status != XST_SUCCESS) {
 100e7a0:	e2502000 	subs	r2, r0, #0
 100e7a4:	1a000032 	bne	100e874 <mipi_csi_init+0x144>
		d_printf(D_ERROR, "mipi_csi: error initialising AXIDMA: %d", status);
		return;
	}

	status = XAxiDma_Selftest(&g_mipi_csi_state.mipi_dma);
 100e7a8:	e2840004 	add	r0, r4, #4
 100e7ac:	eb0010f9 	bl	1012b98 <XAxiDma_Selftest>

	if(status != XST_SUCCESS) {
 100e7b0:	e2505000 	subs	r5, r0, #0
 100e7b4:	1a000034 	bne	100e88c <mipi_csi_init+0x15c>
		d_printf(D_ERROR, "mipi_csi: error during self test for AXIDMA: %d", status);
		return;
	}

	// Ensure scatter-gather is built into the peripheral
	D_ASSERT(XAxiDma_HasSg(&g_mipi_csi_state.mipi_dma));
 100e7b8:	e5943014 	ldr	r3, [r4, #20]
 100e7bc:	e3530000 	cmp	r3, #0
 100e7c0:	0a000044 	beq	100e8d8 <mipi_csi_init+0x1a8>
	d_printf(D_INFO, "mipi_csi: DMA config: has_mm2s=%d, has_s2mm=%d", g_mipi_csi_state.mipi_dma.HasMm2S, g_mipi_csi_state.mipi_dma.HasS2Mm);
 100e7c4:	e308178c 	movw	r1, #34700	; 0x878c
 100e7c8:	e594300c 	ldr	r3, [r4, #12]
 100e7cc:	e5942008 	ldr	r2, [r4, #8]
 100e7d0:	e3401106 	movt	r1, #262	; 0x106
 100e7d4:	e3a00002 	mov	r0, #2
 100e7d8:	ebfffd48 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "mipi_csi: DMA initialisation done");
 100e7dc:	e30817bc 	movw	r1, #34748	; 0x87bc
 100e7e0:	e3a00002 	mov	r0, #2
 100e7e4:	e3401106 	movt	r1, #262	; 0x106
 100e7e8:	ebfffd44 	bl	100dd00 <d_printf>

	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DMA_TO_DEVICE);
 100e7ec:	e5943004 	ldr	r3, [r4, #4]
	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DEVICE_TO_DMA);

	/*
	 * Prepare the peripheral with default settings and initial state machine position.
	 */
	g_mipi_csi_state.csi_bitclock = CSI_DEFAULT_BIT_CLOCK;
 100e7f0:	eddf7a40 	vldr	s15, [pc, #256]	; 100e8f8 <mipi_csi_init+0x1c8>
 100e7f4:	e59f1100 	ldr	r1, [pc, #256]	; 100e8fc <mipi_csi_init+0x1cc>
 100e7f8:	e5932000 	ldr	r2, [r3]
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, g_mipi_csi_state.csi_bitclock);
 100e7fc:	e59f00fc 	ldr	r0, [pc, #252]	; 100e900 <mipi_csi_init+0x1d0>
 100e800:	eeb00a67 	vmov.f32	s0, s15
	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DMA_TO_DEVICE);
 100e804:	e3c22a05 	bic	r2, r2, #20480	; 0x5000
	*LocalAddr = Value;
 100e808:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 100e80c:	e5932030 	ldr	r2, [r3, #48]	; 0x30
	XAxiDma_IntrDisable(&g_mipi_csi_state.mipi_dma, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DEVICE_TO_DMA);
 100e810:	e3c22a05 	bic	r2, r2, #20480	; 0x5000
	*LocalAddr = Value;
 100e814:	e5832030 	str	r2, [r3, #48]	; 0x30
	g_mipi_csi_state.csi_bitclock = CSI_DEFAULT_BIT_CLOCK;
 100e818:	edc17a00 	vstr	s15, [r1]
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, g_mipi_csi_state.csi_bitclock);
 100e81c:	ebfff9c0 	bl	100cf24 <clkwiz_change_mipi_freq>

	//g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_1;
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 100e820:	e300275e 	movw	r2, #1886	; 0x75e
		d_printf(D_ERROR, "mipi_csi: attempt to use reserved datatype (0x00 ~ 0x03); ignoring request to change DT");
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
		return;
	}

	g_mipi_csi_state.csi_data_type = data_type;
 100e824:	e3a0002a 	mov	r0, #42	; 0x2a
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 100e828:	e19430b2 	ldrh	r3, [r4, r2]
	g_mipi_csi_state.csi_line_size = MCSI_DEFAULT_LINE_WIDTH;
 100e82c:	e3a0cb02 	mov	ip, #2048	; 0x800
	g_mipi_csi_state.csi_frame_wct = frame_wct;

	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e830:	e30817e0 	movw	r1, #34784	; 0x87e0
	g_mipi_csi_state.csi_line_size = MCSI_DEFAULT_LINE_WIDTH;
 100e834:	e340c040 	movt	ip, #64	; 0x40
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 100e838:	e284ee77 	add	lr, r4, #1904	; 0x770
	g_mipi_csi_state.csi_data_type = data_type;
 100e83c:	e5c40772 	strb	r0, [r4, #1906]	; 0x772
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 100e840:	e3833901 	orr	r3, r3, #16384	; 0x4000
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e844:	e3401106 	movt	r1, #262	; 0x106
	g_mipi_csi_state.flags |= MCSI_FLAG_CLOCK_IDLE_MODE_2;
 100e848:	e18430b2 	strh	r3, [r4, r2]
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e84c:	e1a02000 	mov	r2, r0
 100e850:	e1a03005 	mov	r3, r5
 100e854:	e3a00002 	mov	r0, #2
	g_mipi_csi_state.state = MCSI_ST_IDLE;
 100e858:	e5845758 	str	r5, [r4, #1880]	; 0x758
	g_mipi_csi_state.working = NULL;
 100e85c:	e5845760 	str	r5, [r4, #1888]	; 0x760
	g_mipi_csi_state.csi_line_size = MCSI_DEFAULT_LINE_WIDTH;
 100e860:	e584c76c 	str	ip, [r4, #1900]	; 0x76c
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 100e864:	e1ce50b0 	strh	r5, [lr]
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e868:	ebfffd24 	bl	100dd00 <d_printf>
}
 100e86c:	e28dd01c 	add	sp, sp, #28
 100e870:	e8bd8030 	pop	{r4, r5, pc}
		d_printf(D_ERROR, "mipi_csi: error initialising AXIDMA: %d", status);
 100e874:	e3081708 	movw	r1, #34568	; 0x8708
 100e878:	e3a00004 	mov	r0, #4
 100e87c:	e3401106 	movt	r1, #262	; 0x106
 100e880:	ebfffd1e 	bl	100dd00 <d_printf>
}
 100e884:	e28dd01c 	add	sp, sp, #28
 100e888:	e8bd8030 	pop	{r4, r5, pc}
		d_printf(D_ERROR, "mipi_csi: error during self test for AXIDMA: %d", status);
 100e88c:	e3081730 	movw	r1, #34608	; 0x8730
 100e890:	e1a02005 	mov	r2, r5
 100e894:	e3401106 	movt	r1, #262	; 0x106
 100e898:	e3a00004 	mov	r0, #4
 100e89c:	ebfffd17 	bl	100dd00 <d_printf>
}
 100e8a0:	e28dd01c 	add	sp, sp, #28
 100e8a4:	e8bd8030 	pop	{r4, r5, pc}
	D_ASSERT(queue_new_conf(&q_conf, &g_mipi_csi_state.item_queue) == CC_OK);
 100e8a8:	e3083698 	movw	r3, #34456	; 0x8698
 100e8ac:	e30826ac 	movw	r2, #34476	; 0x86ac
 100e8b0:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e8b4:	e3403106 	movt	r3, #262	; 0x106
 100e8b8:	e3402106 	movt	r2, #262	; 0x106
 100e8bc:	e3a00042 	mov	r0, #66	; 0x42
 100e8c0:	e58d0000 	str	r0, [sp]
	D_ASSERT(XAxiDma_HasSg(&g_mipi_csi_state.mipi_dma));
 100e8c4:	e3a00004 	mov	r0, #4
 100e8c8:	e3401106 	movt	r1, #262	; 0x106
 100e8cc:	ebfffd0b 	bl	100dd00 <d_printf>
 100e8d0:	e3e00062 	mvn	r0, #98	; 0x62
 100e8d4:	fa002ed5 	blx	101a430 <exit>
 100e8d8:	e3a00059 	mov	r0, #89	; 0x59
 100e8dc:	e3083698 	movw	r3, #34456	; 0x8698
 100e8e0:	e3082760 	movw	r2, #34656	; 0x8760
 100e8e4:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e8e8:	e58d0000 	str	r0, [sp]
 100e8ec:	e3403106 	movt	r3, #262	; 0x106
 100e8f0:	e3402106 	movt	r2, #262	; 0x106
 100e8f4:	eafffff2 	b	100e8c4 <mipi_csi_init+0x194>
 100e8f8:	42c80000 	.word	0x42c80000
 100e8fc:	0145b42c 	.word	0x0145b42c
 100e900:	0145abe0 	.word	0x0145abe0

0100e904 <mipi_csi_set_datatype_and_frame_wct>:
	if(COND_UNLIKELY(data_type >= 0x00 && data_type <= 0x03)) {
 100e904:	e3500003 	cmp	r0, #3
{
 100e908:	e92d4010 	push	{r4, lr}
	if(COND_UNLIKELY(data_type >= 0x00 && data_type <= 0x03)) {
 100e90c:	9a00000c 	bls	100e944 <mipi_csi_set_datatype_and_frame_wct+0x40>
	g_mipi_csi_state.csi_data_type = data_type;
 100e910:	e30acc78 	movw	ip, #44152	; 0xac78
 100e914:	e1a0e001 	mov	lr, r1
 100e918:	e340c145 	movt	ip, #325	; 0x145
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e91c:	e30817e0 	movw	r1, #34784	; 0x87e0
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 100e920:	e28c4e77 	add	r4, ip, #1904	; 0x770
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e924:	e1a0300e 	mov	r3, lr
	g_mipi_csi_state.csi_data_type = data_type;
 100e928:	e5cc0772 	strb	r0, [ip, #1906]	; 0x772
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e92c:	e1a02000 	mov	r2, r0
	g_mipi_csi_state.csi_frame_wct = frame_wct;
 100e930:	e1c4e0b0 	strh	lr, [r4]
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e934:	e3401106 	movt	r1, #262	; 0x106
 100e938:	e3a00002 	mov	r0, #2
}
 100e93c:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "mipi_csi: data_type=0x%02x, wct=0x%04x", data_type, frame_wct);
 100e940:	eafffcee 	b	100dd00 <d_printf>
		d_printf(D_ERROR, "mipi_csi: attempt to use reserved datatype (0x00 ~ 0x03); ignoring request to change DT");
 100e944:	e3081808 	movw	r1, #34824	; 0x8808
 100e948:	e3a00004 	mov	r0, #4
 100e94c:	e3401106 	movt	r1, #262	; 0x106
 100e950:	ebfffcea 	bl	100dd00 <d_printf>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 100e954:	e30a3c78 	movw	r3, #44152	; 0xac78
 100e958:	e300175e 	movw	r1, #1886	; 0x75e
 100e95c:	e3403145 	movt	r3, #325	; 0x145
 100e960:	e19320b1 	ldrh	r2, [r3, r1]
 100e964:	e3822004 	orr	r2, r2, #4
 100e968:	e18320b1 	strh	r2, [r3, r1]
}
 100e96c:	e8bd8010 	pop	{r4, pc}

0100e970 <mipi_csi_alloc_item>:

/*
 * Allocate an item buffer and return the pointer.  Dies if calloc fails.
 */
struct mipi_csi_stream_queue_item_t *mipi_csi_alloc_item()
{
 100e970:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	struct mipi_csi_stream_queue_item_t *item;

	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 100e974:	e3a01001 	mov	r1, #1
{
 100e978:	e24dd00c 	sub	sp, sp, #12
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 100e97c:	e3a0001c 	mov	r0, #28
 100e980:	fa002e8c 	blx	101a3b8 <calloc>
	D_ASSERT(item != NULL);
 100e984:	e2502000 	subs	r2, r0, #0
 100e988:	0a000008 	beq	100e9b0 <mipi_csi_alloc_item+0x40>

	item->item_type = CSISTRM_TYPE_ALLOC_UNDEF;
	g_mipi_csi_state.stats.items_alloc++;
 100e98c:	e30a3c78 	movw	r3, #44152	; 0xac78
	item->item_type = CSISTRM_TYPE_ALLOC_UNDEF;
 100e990:	e3a01001 	mov	r1, #1
	g_mipi_csi_state.stats.items_alloc++;
 100e994:	e3403145 	movt	r3, #325	; 0x145
	item->item_type = CSISTRM_TYPE_ALLOC_UNDEF;
 100e998:	e5821000 	str	r1, [r2]
	g_mipi_csi_state.stats.items_alloc++;
 100e99c:	e593277c 	ldr	r2, [r3, #1916]	; 0x77c
 100e9a0:	e0822001 	add	r2, r2, r1
 100e9a4:	e583277c 	str	r2, [r3, #1916]	; 0x77c

	//d_printf(D_INFO, "ptr=0x%08x sz=%d", item, sizeof(struct mipi_csi_stream_queue_item_t));

	return item;
}
 100e9a8:	e28dd00c 	add	sp, sp, #12
 100e9ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(item != NULL);
 100e9b0:	e3a0008a 	mov	r0, #138	; 0x8a
 100e9b4:	e3083698 	movw	r3, #34456	; 0x8698
 100e9b8:	e3082860 	movw	r2, #34912	; 0x8860
 100e9bc:	e30619f0 	movw	r1, #27120	; 0x69f0
 100e9c0:	e58d0000 	str	r0, [sp]
 100e9c4:	e3403106 	movt	r3, #262	; 0x106
 100e9c8:	e3a00004 	mov	r0, #4
 100e9cc:	e3402106 	movt	r2, #262	; 0x106
 100e9d0:	e3401106 	movt	r1, #262	; 0x106
 100e9d4:	ebfffcc9 	bl	100dd00 <d_printf>
 100e9d8:	e3e00062 	mvn	r0, #98	; 0x62
 100e9dc:	fa002e93 	blx	101a430 <exit>

0100e9e0 <mipi_csi_free_item>:
/*
 * Free an item buffer.
 */
void mipi_csi_free_item(struct mipi_csi_stream_queue_item_t *item)
{
	D_ASSERT(item != NULL);
 100e9e0:	e3500000 	cmp	r0, #0
{
 100e9e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100e9e8:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(item != NULL);
 100e9ec:	0a000007 	beq	100ea10 <mipi_csi_free_item+0x30>
	//d_printf(D_INFO, "free_item 0x%08x", item);
	free(item);
 100e9f0:	fa003174 	blx	101afc8 <free>
	g_mipi_csi_state.stats.items_freed++;
 100e9f4:	e30a3c78 	movw	r3, #44152	; 0xac78
 100e9f8:	e3403145 	movt	r3, #325	; 0x145
 100e9fc:	e5932780 	ldr	r2, [r3, #1920]	; 0x780
 100ea00:	e2822001 	add	r2, r2, #1
 100ea04:	e5832780 	str	r2, [r3, #1920]	; 0x780
}
 100ea08:	e28dd00c 	add	sp, sp, #12
 100ea0c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(item != NULL);
 100ea10:	e3a00099 	mov	r0, #153	; 0x99
 100ea14:	e3083698 	movw	r3, #34456	; 0x8698
 100ea18:	e3082860 	movw	r2, #34912	; 0x8860
 100ea1c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ea20:	e58d0000 	str	r0, [sp]
 100ea24:	e3403106 	movt	r3, #262	; 0x106
 100ea28:	e3a00004 	mov	r0, #4
 100ea2c:	e3402106 	movt	r2, #262	; 0x106
 100ea30:	e3401106 	movt	r1, #262	; 0x106
 100ea34:	ebfffcb1 	bl	100dd00 <d_printf>
 100ea38:	e3e00062 	mvn	r0, #98	; 0x62
 100ea3c:	fa002e7b 	blx	101a430 <exit>

0100ea40 <mipi_csi_queue_buffer>:
 */
void mipi_csi_queue_buffer(uint32_t start_addr, uint32_t end_addr)
{
	struct mipi_csi_stream_queue_item_t *item;

	if(start_addr > end_addr) {
 100ea40:	e1500001 	cmp	r0, r1
{
 100ea44:	e92d4070 	push	{r4, r5, r6, lr}
		d_printf(D_ERROR, "mipi_csi: buffer range invalid, not queueing request");
 100ea48:	83081870 	movwhi	r1, #34928	; 0x8870
{
 100ea4c:	e24dd008 	sub	sp, sp, #8
		d_printf(D_ERROR, "mipi_csi: buffer range invalid, not queueing request");
 100ea50:	83a00004 	movhi	r0, #4
 100ea54:	83401106 	movthi	r1, #262	; 0x106
	if(start_addr > end_addr) {
 100ea58:	8a000007 	bhi	100ea7c <mipi_csi_queue_buffer+0x3c>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
		return;
	}

	if((start_addr % 4) != 0 || (end_addr % 4) != 0) {
 100ea5c:	e1803001 	orr	r3, r0, r1
 100ea60:	e1a05000 	mov	r5, r0
 100ea64:	e3130003 	tst	r3, #3
 100ea68:	e1a04001 	mov	r4, r1
 100ea6c:	0a00000b 	beq	100eaa0 <mipi_csi_queue_buffer+0x60>
		d_printf(D_ERROR, "mipi_csi: buffer range misaligned, not queueing request");
 100ea70:	e30818a8 	movw	r1, #34984	; 0x88a8
 100ea74:	e3a00004 	mov	r0, #4
 100ea78:	e3401106 	movt	r1, #262	; 0x106
 100ea7c:	ebfffc9f 	bl	100dd00 <d_printf>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 100ea80:	e30a3c78 	movw	r3, #44152	; 0xac78
 100ea84:	e300175e 	movw	r1, #1886	; 0x75e
 100ea88:	e3403145 	movt	r3, #325	; 0x145
 100ea8c:	e19320b1 	ldrh	r2, [r3, r1]
 100ea90:	e3822004 	orr	r2, r2, #4
 100ea94:	e18320b1 	strh	r2, [r3, r1]
	item->start_addr = start_addr;
	item->end_addr = end_addr;

	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
	g_mipi_csi_state.stats.items_queued++;
}
 100ea98:	e28dd008 	add	sp, sp, #8
 100ea9c:	e8bd8070 	pop	{r4, r5, r6, pc}
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 100eaa0:	e3a01001 	mov	r1, #1
 100eaa4:	e3a0001c 	mov	r0, #28
 100eaa8:	fa002e42 	blx	101a3b8 <calloc>
	D_ASSERT(item != NULL);
 100eaac:	e3500000 	cmp	r0, #0
 100eab0:	0a000017 	beq	100eb14 <mipi_csi_queue_buffer+0xd4>
	g_mipi_csi_state.stats.items_alloc++;
 100eab4:	e30a6c78 	movw	r6, #44152	; 0xac78
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 100eab8:	e3a02003 	mov	r2, #3
	g_mipi_csi_state.stats.items_alloc++;
 100eabc:	e3406145 	movt	r6, #325	; 0x145
	item->start_addr = start_addr;
 100eac0:	e580500c 	str	r5, [r0, #12]
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100eac4:	e2861e77 	add	r1, r6, #1904	; 0x770
	g_mipi_csi_state.stats.items_alloc++;
 100eac8:	e596377c 	ldr	r3, [r6, #1916]	; 0x77c
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100eacc:	e1d110b0 	ldrh	r1, [r1]
	item->data_type = g_mipi_csi_state.csi_data_type;
 100ead0:	e5d6c772 	ldrb	ip, [r6, #1906]	; 0x772
	item->end_addr = end_addr;
 100ead4:	e5804010 	str	r4, [r0, #16]
	g_mipi_csi_state.stats.items_alloc++;
 100ead8:	e2833001 	add	r3, r3, #1
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100eadc:	e1c010b6 	strh	r1, [r0, #6]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100eae0:	e1a01000 	mov	r1, r0
	item->data_type = g_mipi_csi_state.csi_data_type;
 100eae4:	e5c0c004 	strb	ip, [r0, #4]
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 100eae8:	e5802000 	str	r2, [r0]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100eaec:	e5960000 	ldr	r0, [r6]
	g_mipi_csi_state.stats.items_alloc++;
 100eaf0:	e586377c 	str	r3, [r6, #1916]	; 0x77c
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100eaf4:	ebffdfd6 	bl	1006a54 <queue_enqueue>
 100eaf8:	e3500000 	cmp	r0, #0
 100eafc:	1a000010 	bne	100eb44 <mipi_csi_queue_buffer+0x104>
	g_mipi_csi_state.stats.items_queued++;
 100eb00:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
 100eb04:	e2833001 	add	r3, r3, #1
 100eb08:	e5863778 	str	r3, [r6, #1912]	; 0x778
}
 100eb0c:	e28dd008 	add	sp, sp, #8
 100eb10:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(item != NULL);
 100eb14:	e3083698 	movw	r3, #34456	; 0x8698
 100eb18:	e3082860 	movw	r2, #34912	; 0x8860
 100eb1c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100eb20:	e3403106 	movt	r3, #262	; 0x106
 100eb24:	e3402106 	movt	r2, #262	; 0x106
 100eb28:	e3a0008a 	mov	r0, #138	; 0x8a
 100eb2c:	e58d0000 	str	r0, [sp]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100eb30:	e3a00004 	mov	r0, #4
 100eb34:	e3401106 	movt	r1, #262	; 0x106
 100eb38:	ebfffc70 	bl	100dd00 <d_printf>
 100eb3c:	e3e00062 	mvn	r0, #98	; 0x62
 100eb40:	fa002e3a 	blx	101a430 <exit>
 100eb44:	e3a000b9 	mov	r0, #185	; 0xb9
 100eb48:	e3083698 	movw	r3, #34456	; 0x8698
 100eb4c:	e30828e0 	movw	r2, #35040	; 0x88e0
 100eb50:	e30619f0 	movw	r1, #27120	; 0x69f0
 100eb54:	e58d0000 	str	r0, [sp]
 100eb58:	e3403106 	movt	r3, #262	; 0x106
 100eb5c:	e3402106 	movt	r2, #262	; 0x106
 100eb60:	eafffff2 	b	100eb30 <mipi_csi_queue_buffer+0xf0>

0100eb64 <mipi_csi_queue_waverange>:
 * Return the number of waves done (have completed acquisition for.)  The number
 * of waves done is copied when the acquisition is stopped.
 */
inline int acq_get_nwaves_done()
{
	return g_acq_state.num_acq_made_done;
 100eb64:	e30932e0 	movw	r3, #37600	; 0x92e0

/*
 * Queue a waveform range into the CSI task queue.
 */
void mipi_csi_queue_waverange(uint32_t start, uint32_t end)
{
 100eb68:	e92d4070 	push	{r4, r5, r6, lr}
 100eb6c:	e3403145 	movt	r3, #325	; 0x145
 100eb70:	e24dd008 	sub	sp, sp, #8
	int i;
	struct mipi_csi_stream_queue_item_t *item;
	uint32_t nmax = acq_get_nwaves_done() - 1;
 100eb74:	e593577c 	ldr	r5, [r3, #1916]	; 0x77c

	if(start == CSISTRM_WAVE_ALL && end == CSISTRM_WAVE_ALL) {
 100eb78:	e0003001 	and	r3, r0, r1
 100eb7c:	e3730001 	cmn	r3, #1
	uint32_t nmax = acq_get_nwaves_done() - 1;
 100eb80:	e2455001 	sub	r5, r5, #1
	if(start == CSISTRM_WAVE_ALL && end == CSISTRM_WAVE_ALL) {
 100eb84:	0a00002d 	beq	100ec40 <mipi_csi_queue_waverange+0xdc>
		start = 0;
		end = nmax;
	}

	if(start > nmax || end > nmax) {
 100eb88:	e1550001 	cmp	r5, r1
 100eb8c:	21550000 	cmpcs	r5, r0
 100eb90:	e1a06000 	mov	r6, r0
 100eb94:	2a00000b 	bcs	100ebc8 <mipi_csi_queue_waverange+0x64>
		d_printf(D_ERROR, "mipi_csi: wave range OoB; not queueing request");
 100eb98:	e308191c 	movw	r1, #35100	; 0x891c
 100eb9c:	e3a00004 	mov	r0, #4
 100eba0:	e3401106 	movt	r1, #262	; 0x106
 100eba4:	ebfffc55 	bl	100dd00 <d_printf>
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_PARAMETER;
 100eba8:	e30a3c78 	movw	r3, #44152	; 0xac78
 100ebac:	e300175e 	movw	r1, #1886	; 0x75e
 100ebb0:	e3403145 	movt	r3, #325	; 0x145
 100ebb4:	e19320b1 	ldrh	r2, [r3, r1]
 100ebb8:	e3822004 	orr	r2, r2, #4
 100ebbc:	e18320b1 	strh	r2, [r3, r1]
	item->end_addr = end;

	//d_printf(D_INFO, "queue=0x%08x, item=0x%08x", g_mipi_csi_state.item_queue, item);
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
	g_mipi_csi_state.stats.items_queued++;
}
 100ebc0:	e28dd008 	add	sp, sp, #8
 100ebc4:	e8bd8070 	pop	{r4, r5, r6, pc}
 100ebc8:	e1a05001 	mov	r5, r1
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 100ebcc:	e3a01001 	mov	r1, #1
 100ebd0:	e3a0001c 	mov	r0, #28
 100ebd4:	fa002df7 	blx	101a3b8 <calloc>
	D_ASSERT(item != NULL);
 100ebd8:	e3500000 	cmp	r0, #0
 100ebdc:	0a000019 	beq	100ec48 <mipi_csi_queue_waverange+0xe4>
	g_mipi_csi_state.stats.items_alloc++;
 100ebe0:	e30a4c78 	movw	r4, #44152	; 0xac78
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 100ebe4:	e3a02003 	mov	r2, #3
	g_mipi_csi_state.stats.items_alloc++;
 100ebe8:	e3404145 	movt	r4, #325	; 0x145
	item->start_addr = start;
 100ebec:	e580600c 	str	r6, [r0, #12]
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100ebf0:	e2841e77 	add	r1, r4, #1904	; 0x770
	g_mipi_csi_state.stats.items_alloc++;
 100ebf4:	e594377c 	ldr	r3, [r4, #1916]	; 0x77c
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100ebf8:	e1d110b0 	ldrh	r1, [r1]
	item->data_type = g_mipi_csi_state.csi_data_type;
 100ebfc:	e5d4c772 	ldrb	ip, [r4, #1906]	; 0x772
	item->end_addr = end;
 100ec00:	e5805010 	str	r5, [r0, #16]
	g_mipi_csi_state.stats.items_alloc++;
 100ec04:	e2833001 	add	r3, r3, #1
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100ec08:	e1c010b6 	strh	r1, [r0, #6]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ec0c:	e1a01000 	mov	r1, r0
	item->data_type = g_mipi_csi_state.csi_data_type;
 100ec10:	e5c0c004 	strb	ip, [r0, #4]
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 100ec14:	e5802000 	str	r2, [r0]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ec18:	e5940000 	ldr	r0, [r4]
	g_mipi_csi_state.stats.items_alloc++;
 100ec1c:	e584377c 	str	r3, [r4, #1916]	; 0x77c
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ec20:	ebffdf8b 	bl	1006a54 <queue_enqueue>
 100ec24:	e3500000 	cmp	r0, #0
 100ec28:	1a000012 	bne	100ec78 <mipi_csi_queue_waverange+0x114>
	g_mipi_csi_state.stats.items_queued++;
 100ec2c:	e5943778 	ldr	r3, [r4, #1912]	; 0x778
 100ec30:	e2833001 	add	r3, r3, #1
 100ec34:	e5843778 	str	r3, [r4, #1912]	; 0x778
}
 100ec38:	e28dd008 	add	sp, sp, #8
 100ec3c:	e8bd8070 	pop	{r4, r5, r6, pc}
		start = 0;
 100ec40:	e3a06000 	mov	r6, #0
 100ec44:	eaffffe0 	b	100ebcc <mipi_csi_queue_waverange+0x68>
	D_ASSERT(item != NULL);
 100ec48:	e3083698 	movw	r3, #34456	; 0x8698
 100ec4c:	e3082860 	movw	r2, #34912	; 0x8860
 100ec50:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ec54:	e3403106 	movt	r3, #262	; 0x106
 100ec58:	e3402106 	movt	r2, #262	; 0x106
 100ec5c:	e3a0008a 	mov	r0, #138	; 0x8a
 100ec60:	e58d0000 	str	r0, [sp]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ec64:	e3a00004 	mov	r0, #4
 100ec68:	e3401106 	movt	r1, #262	; 0x106
 100ec6c:	ebfffc23 	bl	100dd00 <d_printf>
 100ec70:	e3e00062 	mvn	r0, #98	; 0x62
 100ec74:	fa002ded 	blx	101a430 <exit>
 100ec78:	e3a000da 	mov	r0, #218	; 0xda
 100ec7c:	e3083698 	movw	r3, #34456	; 0x8698
 100ec80:	e30828e0 	movw	r2, #35040	; 0x88e0
 100ec84:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ec88:	e58d0000 	str	r0, [sp]
 100ec8c:	e3403106 	movt	r3, #262	; 0x106
 100ec90:	e3402106 	movt	r2, #262	; 0x106
 100ec94:	eafffff2 	b	100ec64 <mipi_csi_queue_waverange+0x100>

0100ec98 <mipi_csi_queue_all_waves>:
 100ec98:	e30932e0 	movw	r3, #37600	; 0x92e0
/*
 * Queue all waveforms into the CSI task queue. Shorthand for calling
 * above with all FF values.
 */
void mipi_csi_queue_all_waves()
{
 100ec9c:	e92d4030 	push	{r4, r5, lr}
 100eca0:	e3403145 	movt	r3, #325	; 0x145
 100eca4:	e24dd00c 	sub	sp, sp, #12
	item = calloc(sizeof(struct mipi_csi_stream_queue_item_t), 1);
 100eca8:	e3a01001 	mov	r1, #1
 100ecac:	e3a0001c 	mov	r0, #28
 100ecb0:	e593577c 	ldr	r5, [r3, #1916]	; 0x77c
 100ecb4:	fa002dbf 	blx	101a3b8 <calloc>
	D_ASSERT(item != NULL);
 100ecb8:	e3500000 	cmp	r0, #0
 100ecbc:	0a000019 	beq	100ed28 <mipi_csi_queue_all_waves+0x90>
	g_mipi_csi_state.stats.items_alloc++;
 100ecc0:	e30a4c78 	movw	r4, #44152	; 0xac78
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 100ecc4:	e3a01003 	mov	r1, #3
	g_mipi_csi_state.stats.items_alloc++;
 100ecc8:	e3404145 	movt	r4, #325	; 0x145
	uint32_t nmax = acq_get_nwaves_done() - 1;
 100eccc:	e2455001 	sub	r5, r5, #1
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100ecd0:	e2842e77 	add	r2, r4, #1904	; 0x770
	g_mipi_csi_state.stats.items_alloc++;
 100ecd4:	e594377c 	ldr	r3, [r4, #1916]	; 0x77c
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100ecd8:	e1d2e0b0 	ldrh	lr, [r2]
	item->start_addr = start;
 100ecdc:	e3a02000 	mov	r2, #0
	item->data_type = g_mipi_csi_state.csi_data_type;
 100ece0:	e5d4c772 	ldrb	ip, [r4, #1906]	; 0x772
	item->item_type = CSISTRM_TYPE_WAVEFORM_RANGE;
 100ece4:	e5801000 	str	r1, [r0]
	g_mipi_csi_state.stats.items_alloc++;
 100ece8:	e2833001 	add	r3, r3, #1
	item->end_addr = end;
 100ecec:	e5805010 	str	r5, [r0, #16]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ecf0:	e1a01000 	mov	r1, r0
	item->wct_header = g_mipi_csi_state.csi_frame_wct;
 100ecf4:	e1c0e0b6 	strh	lr, [r0, #6]
	item->data_type = g_mipi_csi_state.csi_data_type;
 100ecf8:	e5c0c004 	strb	ip, [r0, #4]
	item->start_addr = start;
 100ecfc:	e580200c 	str	r2, [r0, #12]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ed00:	e5940000 	ldr	r0, [r4]
	g_mipi_csi_state.stats.items_alloc++;
 100ed04:	e584377c 	str	r3, [r4, #1916]	; 0x77c
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ed08:	ebffdf51 	bl	1006a54 <queue_enqueue>
 100ed0c:	e3500000 	cmp	r0, #0
 100ed10:	1a000010 	bne	100ed58 <mipi_csi_queue_all_waves+0xc0>
	g_mipi_csi_state.stats.items_queued++;
 100ed14:	e5943778 	ldr	r3, [r4, #1912]	; 0x778
 100ed18:	e2833001 	add	r3, r3, #1
 100ed1c:	e5843778 	str	r3, [r4, #1912]	; 0x778
	mipi_csi_queue_waverange(CSISTRM_WAVE_ALL, CSISTRM_WAVE_ALL);
}
 100ed20:	e28dd00c 	add	sp, sp, #12
 100ed24:	e8bd8030 	pop	{r4, r5, pc}
	D_ASSERT(item != NULL);
 100ed28:	e3083698 	movw	r3, #34456	; 0x8698
 100ed2c:	e3082860 	movw	r2, #34912	; 0x8860
 100ed30:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ed34:	e3403106 	movt	r3, #262	; 0x106
 100ed38:	e3402106 	movt	r2, #262	; 0x106
 100ed3c:	e3a0008a 	mov	r0, #138	; 0x8a
 100ed40:	e58d0000 	str	r0, [sp]
	D_ASSERT(queue_enqueue(g_mipi_csi_state.item_queue, item) == CC_OK);
 100ed44:	e3a00004 	mov	r0, #4
 100ed48:	e3401106 	movt	r1, #262	; 0x106
 100ed4c:	ebfffbeb 	bl	100dd00 <d_printf>
 100ed50:	e3e00062 	mvn	r0, #98	; 0x62
 100ed54:	fa002db5 	blx	101a430 <exit>
 100ed58:	e3a000da 	mov	r0, #218	; 0xda
 100ed5c:	e3083698 	movw	r3, #34456	; 0x8698
 100ed60:	e30828e0 	movw	r2, #35040	; 0x88e0
 100ed64:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ed68:	e58d0000 	str	r0, [sp]
 100ed6c:	e3403106 	movt	r3, #262	; 0x106
 100ed70:	e3402106 	movt	r2, #262	; 0x106
 100ed74:	eafffff2 	b	100ed44 <mipi_csi_queue_all_waves+0xac>

0100ed78 <mipi_csi_setup_bdring_and_bd>:

	/*
	 * Get the working BD ring; disable IRQs on it while we work on it.
	 * Then allocate the entries in the ring.
	 */
	*ring = XAxiDma_GetTxRing(&g_mipi_csi_state.mipi_dma);
 100ed78:	e59fc0f8 	ldr	ip, [pc, #248]	; 100ee78 <mipi_csi_setup_bdring_and_bd+0x100>
{
 100ed7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 100ed80:	e1a06003 	mov	r6, r3
 100ed84:	e1a04002 	mov	r4, r2
 100ed88:	e1a07000 	mov	r7, r0
	XAxiDma_BdRingIntDisable(*ring, XAXIDMA_IRQ_ALL_MASK);
 100ed8c:	e1a0300c 	mov	r3, ip
{
 100ed90:	e24dd04c 	sub	sp, sp, #76	; 0x4c
	*ring = XAxiDma_GetTxRing(&g_mipi_csi_state.mipi_dma);
 100ed94:	e582c000 	str	ip, [r2]
{
 100ed98:	e1a05001 	mov	r5, r1
	return *(volatile u32 *) Addr;
 100ed9c:	e4132018 	ldr	r2, [r3], #-24	; 0xffffffe8

	// I'm not 100% sure this is safe, but it fixes a memory leak
	if((*ring)->CyclicBd != NULL) {
 100eda0:	e5930064 	ldr	r0, [r3, #100]	; 0x64
 100eda4:	e5923000 	ldr	r3, [r2]
 100eda8:	e3500000 	cmp	r0, #0
	XAxiDma_BdRingIntDisable(*ring, XAXIDMA_IRQ_ALL_MASK);
 100edac:	e3c33a07 	bic	r3, r3, #28672	; 0x7000
	*LocalAddr = Value;
 100edb0:	01a0000c 	moveq	r0, ip
 100edb4:	e5823000 	str	r3, [r2]
	if((*ring)->CyclicBd != NULL) {
 100edb8:	0a000001 	beq	100edc4 <mipi_csi_setup_bdring_and_bd+0x4c>
		free((*ring)->CyclicBd);
 100edbc:	fa003081 	blx	101afc8 <free>
 100edc0:	e5940000 	ldr	r0, [r4]
	}

	// This function seems to eat 2ms with ~1100 entries to allocate: need to find a way to replace it
	status = XAxiDma_BdRingCreate(*ring, (int)bd_area, (int)bd_area, XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries);
 100edc4:	e58d5000 	str	r5, [sp]
 100edc8:	e3a03040 	mov	r3, #64	; 0x40
 100edcc:	e1a02007 	mov	r2, r7
 100edd0:	e1a01007 	mov	r1, r7
 100edd4:	eb00109f 	bl	1013058 <XAxiDma_BdRingCreate>

	if(status != XST_SUCCESS) {
 100edd8:	e3500000 	cmp	r0, #0
 100eddc:	1a000010 	bne	100ee24 <mipi_csi_setup_bdring_and_bd+0xac>
		d_printf(D_ERROR, "mipi_csi: fatal error creating BD ring: %d", status);
		return MCSI_RET_XAXIDMA_ERROR;
	}

	XAxiDma_BdClear(&bd_template);
 100ede0:	e1a01000 	mov	r1, r0
 100ede4:	e3a02030 	mov	r2, #48	; 0x30
 100ede8:	e28d0010 	add	r0, sp, #16
 100edec:	fa0034af 	blx	101c0b0 <memset>
	status = XAxiDma_BdRingClone(*ring, &bd_template);
 100edf0:	e28d1008 	add	r1, sp, #8
 100edf4:	e5940000 	ldr	r0, [r4]
 100edf8:	eb00111c 	bl	1013270 <XAxiDma_BdRingClone>

	if(status != XST_SUCCESS) {
 100edfc:	e3500000 	cmp	r0, #0
 100ee00:	1a00000e 	bne	100ee40 <mipi_csi_setup_bdring_and_bd+0xc8>
		d_printf(D_ERROR, "mipi_csi: fatal error cloning BD ring: %d", status);
		return MCSI_RET_XAXIDMA_ERROR;
	}

	status = XAxiDma_BdRingAlloc(*ring, bd_entries, bd_ptr);
 100ee04:	e1a02006 	mov	r2, r6
 100ee08:	e1a01005 	mov	r1, r5
 100ee0c:	e5940000 	ldr	r0, [r4]
 100ee10:	eb0011e8 	bl	10135b8 <XAxiDma_BdRingAlloc>
	if(status != XST_SUCCESS) {
 100ee14:	e3500000 	cmp	r0, #0
 100ee18:	1a00000f 	bne	100ee5c <mipi_csi_setup_bdring_and_bd+0xe4>
		d_printf(D_ERROR, "mipi_csi: fatal error allocating BD ring: %d", status);
		return MCSI_RET_XAXIDMA_ERROR;
	}

	return MCSI_RET_OK;
}
 100ee1c:	e28dd04c 	add	sp, sp, #76	; 0x4c
 100ee20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		d_printf(D_ERROR, "mipi_csi: fatal error creating BD ring: %d", status);
 100ee24:	e308194c 	movw	r1, #35148	; 0x894c
 100ee28:	e1a02000 	mov	r2, r0
 100ee2c:	e3401106 	movt	r1, #262	; 0x106
 100ee30:	e3a00004 	mov	r0, #4
 100ee34:	ebfffbb1 	bl	100dd00 <d_printf>
		return MCSI_RET_XAXIDMA_ERROR;
 100ee38:	e3e00000 	mvn	r0, #0
 100ee3c:	eafffff6 	b	100ee1c <mipi_csi_setup_bdring_and_bd+0xa4>
		d_printf(D_ERROR, "mipi_csi: fatal error cloning BD ring: %d", status);
 100ee40:	e3081978 	movw	r1, #35192	; 0x8978
 100ee44:	e1a02000 	mov	r2, r0
 100ee48:	e3401106 	movt	r1, #262	; 0x106
 100ee4c:	e3a00004 	mov	r0, #4
 100ee50:	ebfffbaa 	bl	100dd00 <d_printf>
		return MCSI_RET_XAXIDMA_ERROR;
 100ee54:	e3e00000 	mvn	r0, #0
 100ee58:	eaffffef 	b	100ee1c <mipi_csi_setup_bdring_and_bd+0xa4>
		d_printf(D_ERROR, "mipi_csi: fatal error allocating BD ring: %d", status);
 100ee5c:	e30819a4 	movw	r1, #35236	; 0x89a4
 100ee60:	e1a02000 	mov	r2, r0
 100ee64:	e3401106 	movt	r1, #262	; 0x106
 100ee68:	e3a00004 	mov	r0, #4
 100ee6c:	ebfffba3 	bl	100dd00 <d_printf>
		return MCSI_RET_XAXIDMA_ERROR;
 100ee70:	e3e00000 	mvn	r0, #0
 100ee74:	eaffffe8 	b	100ee1c <mipi_csi_setup_bdring_and_bd+0xa4>
 100ee78:	0145ac90 	.word	0x0145ac90

0100ee7c <mipi_csi_generate_sg_list_for_buffer_range>:
 *
 * @param	addr_start		Start address.  Must be 32-bit aligned.
 * @param	addr_end		End address.  Must be 32-bit aligned, and greater or equal
 */
int mipi_csi_generate_sg_list_for_buffer_range(uint32_t addr_start, uint32_t addr_end, struct mipi_csi_stream_queue_item_t *q_item)
{
 100ee7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100ee80:	e1a04000 	mov	r4, r0
 100ee84:	e24dd03c 	sub	sp, sp, #60	; 0x3c
	uint32_t xfer_size = 0, pk_size = 0;
	int32_t size, bd_entries;
	int i, status;
	bool sof, eof;

	d_start_timing(TMR_MIPI_SG_OVERALL);
 100ee88:	e3a000f1 	mov	r0, #241	; 0xf1
{
 100ee8c:	e1a09001 	mov	r9, r1
 100ee90:	e58d2020 	str	r2, [sp, #32]
	d_start_timing(TMR_MIPI_SG_OVERALL);
 100ee94:	ebfffd71 	bl	100e460 <d_start_timing>

	D_ASSERT((addr_start % 4) == 0);
 100ee98:	e3140003 	tst	r4, #3
 100ee9c:	1a000097 	bne	100f100 <mipi_csi_generate_sg_list_for_buffer_range+0x284>
	D_ASSERT((addr_end % 4) == 0);
 100eea0:	e2193003 	ands	r3, r9, #3
 100eea4:	1a00009d 	bne	100f120 <mipi_csi_generate_sg_list_for_buffer_range+0x2a4>
	D_ASSERT(addr_end >= addr_start);
 100eea8:	e1540009 	cmp	r4, r9
 100eeac:	8a0000a3 	bhi	100f140 <mipi_csi_generate_sg_list_for_buffer_range+0x2c4>

	size = addr_end - addr_start;
	q_item->ring = NULL;
	q_item->calculated_size = size;
 100eeb0:	e59d2020 	ldr	r2, [sp, #32]
	size = addr_end - addr_start;
 100eeb4:	e0499004 	sub	r9, r9, r4

	// Reset the DMA peripheral, terminating any existing transactions
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100eeb8:	e59f6358 	ldr	r6, [pc, #856]	; 100f218 <mipi_csi_generate_sg_list_for_buffer_range+0x39c>
	q_item->calculated_size = size;
 100eebc:	e5829014 	str	r9, [r2, #20]
	q_item->ring = NULL;
 100eec0:	e5823018 	str	r3, [r2, #24]
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100eec4:	e1a00006 	mov	r0, r6
 100eec8:	eb000cd3 	bl	101221c <XAxiDma_Reset>

	/*
	 * Free the old BD list, if it's present.  Then, attempt to create a new BD list,
	 * the size of which is equal to the number of 8MB chunks to be transmitted.
	 */
	if(g_mipi_csi_state.bd_area != NULL) {
 100eecc:	e59627ac 	ldr	r2, [r6, #1964]	; 0x7ac
 100eed0:	e3520000 	cmp	r2, #0
 100eed4:	0a000005 	beq	100eef0 <mipi_csi_generate_sg_list_for_buffer_range+0x74>
		d_printf(D_INFO, "FreeBD=0x%08x I", g_mipi_csi_state.bd_area);
 100eed8:	e3081a18 	movw	r1, #35352	; 0x8a18
 100eedc:	e3a00002 	mov	r0, #2
 100eee0:	e3401106 	movt	r1, #262	; 0x106
 100eee4:	ebfffb85 	bl	100dd00 <d_printf>
		free(g_mipi_csi_state.bd_area);
 100eee8:	e59607ac 	ldr	r0, [r6, #1964]	; 0x7ac
 100eeec:	fa003035 	blx	101afc8 <free>
	}

	bd_entries = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100eef0:	e3590000 	cmp	r9, #0
 100eef4:	e249337f 	sub	r3, r9, #-67108863	; 0xfc000001
 100eef8:	e243350e 	sub	r3, r3, #58720256	; 0x3800000
 100eefc:	a1a03009 	movge	r3, r9
 100ef00:	e1a03bc3 	asr	r3, r3, #23
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100ef04:	e30a5c78 	movw	r5, #44152	; 0xac78
 100ef08:	e3405145 	movt	r5, #325	; 0x145
	bd_entries = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100ef0c:	e58d3024 	str	r3, [sp, #36]	; 0x24
 100ef10:	e2833001 	add	r3, r3, #1
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100ef14:	e3a00040 	mov	r0, #64	; 0x40
 100ef18:	e1a01303 	lsl	r1, r3, #6
 100ef1c:	e58d502c 	str	r5, [sp, #44]	; 0x2c
	bd_entries = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100ef20:	e58d3014 	str	r3, [sp, #20]
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100ef24:	fa002fe1 	blx	101aeb0 <memalign>

	if(g_mipi_csi_state.bd_area == NULL) {
 100ef28:	e3500000 	cmp	r0, #0
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100ef2c:	e58507b0 	str	r0, [r5, #1968]	; 0x7b0
	if(g_mipi_csi_state.bd_area == NULL) {
 100ef30:	0a0000ab 	beq	100f1e4 <mipi_csi_generate_sg_list_for_buffer_range+0x368>
		d_printf(D_ERROR, "mipi_csi: fatal error allocating memory for DMA scatter-gather list!");
		exit(-1);
	}

	D_ASSERT(((uint32_t)g_mipi_csi_state.bd_area % XAXIDMA_BD_MINIMUM_ALIGNMENT) == 0);
 100ef34:	e310003f 	tst	r0, #63	; 0x3f
 100ef38:	1a000088 	bne	100f160 <mipi_csi_generate_sg_list_for_buffer_range+0x2e4>

	/*
	 * Attempt to set up the BDRing.  This function prints an error if things go
	 * wrong (and returns a failure code), so we just handle this condition with an assert.
	 */
	D_ASSERT(mipi_csi_setup_bdring_and_bd(g_mipi_csi_state.bd_area, bd_entries, &ring, &bd_ptr) == MCSI_RET_OK);
 100ef3c:	e28d3034 	add	r3, sp, #52	; 0x34
 100ef40:	e28d2030 	add	r2, sp, #48	; 0x30
 100ef44:	e59d1014 	ldr	r1, [sp, #20]
 100ef48:	ebffff8a 	bl	100ed78 <mipi_csi_setup_bdring_and_bd>
 100ef4c:	e3500000 	cmp	r0, #0
 100ef50:	1a00008a 	bne	100f180 <mipi_csi_generate_sg_list_for_buffer_range+0x304>
	 * Pack the entries into the BD. Each BD length must be less than 8MB, so large
	 * transfers are split up.
	 */
	cur_bd_ptr = bd_ptr;

	for(i = 0; i < bd_entries; i++) {
 100ef54:	e59d3014 	ldr	r3, [sp, #20]
	cur_bd_ptr = bd_ptr;
 100ef58:	e59da034 	ldr	sl, [sp, #52]	; 0x34
	for(i = 0; i < bd_entries; i++) {
 100ef5c:	e59db030 	ldr	fp, [sp, #48]	; 0x30
 100ef60:	e3530000 	cmp	r3, #0
 100ef64:	da00008d 	ble	100f1a0 <mipi_csi_generate_sg_list_for_buffer_range+0x324>
	uint32_t *buff = (uint32_t*)addr_start;
 100ef68:	e58d401c 	str	r4, [sp, #28]
	for(i = 0; i < bd_entries; i++) {
 100ef6c:	e58d000c 	str	r0, [sp, #12]
		cur_bd = _mipi_csi_axidma_add_bd_entry(ring, cur_bd, base, MIN(size, CSISTRM_AXI_MAX_BD_SIZE), ctrl);
		base += CSISTRM_AXI_MAX_BD_SIZE;
		size -= CSISTRM_AXI_MAX_BD_SIZE;
	}

	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100ef70:	e58d9018 	str	r9, [sp, #24]
		pk_size = MIN(size, CSISTRM_AXI_MAX_BD_SIZE);
 100ef74:	e59d3018 	ldr	r3, [sp, #24]
 100ef78:	e3530502 	cmp	r3, #8388608	; 0x800000
 100ef7c:	a3a05502 	movge	r5, #8388608	; 0x800000
 100ef80:	b1a05003 	movlt	r5, r3
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100ef84:	e3550000 	cmp	r5, #0
 100ef88:	e245737f 	sub	r7, r5, #-67108863	; 0xfc000001
 100ef8c:	e247750e 	sub	r7, r7, #58720256	; 0x3800000
 100ef90:	a1a07005 	movge	r7, r5
 100ef94:	e1a07bc7 	asr	r7, r7, #23
 100ef98:	e2879001 	add	r9, r7, #1
	for(c = 0; c < chcnt; c++) {
 100ef9c:	e3590000 	cmp	r9, #0
 100efa0:	da00002e 	ble	100f060 <mipi_csi_generate_sg_list_for_buffer_range+0x1e4>
 100efa4:	e59d200c 	ldr	r2, [sp, #12]
 100efa8:	e3a04000 	mov	r4, #0
 100efac:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 100efb0:	e1a06005 	mov	r6, r5
 100efb4:	e58d5028 	str	r5, [sp, #40]	; 0x28
	uint32_t ctrl = 0;
 100efb8:	e1a08004 	mov	r8, r4
 100efbc:	e0433002 	sub	r3, r3, r2
 100efc0:	e59d201c 	ldr	r2, [sp, #28]
 100efc4:	e16f3f13 	clz	r3, r3
 100efc8:	e1a032a3 	lsr	r3, r3, #5
 100efcc:	e0822005 	add	r2, r2, r5
 100efd0:	e1a05003 	mov	r5, r3
 100efd4:	e58d2010 	str	r2, [sp, #16]
		if(eof && ((c + 1) == chcnt)) {
 100efd8:	e1570004 	cmp	r7, r4
 100efdc:	13a03000 	movne	r3, #0
 100efe0:	02053001 	andeq	r3, r5, #1
 100efe4:	e59d2010 	ldr	r2, [sp, #16]
 100efe8:	e3530000 	cmp	r3, #0
		if(sof && (c == 0)) {
 100efec:	e59d300c 	ldr	r3, [sp, #12]
			ctrl |= XAXIDMA_BD_CTRL_TXEOF_MASK;
 100eff0:	13888301 	orrne	r8, r8, #67108864	; 0x4000000
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100eff4:	e1a0000a 	mov	r0, sl
 100eff8:	e0421006 	sub	r1, r2, r6
		if(sof && (c == 0)) {
 100effc:	e1933004 	orrs	r3, r3, r4
			ctrl |= XAXIDMA_BD_CTRL_TXSOF_MASK;
 100f000:	03888302 	orreq	r8, r8, #134217728	; 0x8000000
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f004:	eb000f16 	bl	1012c64 <XAxiDma_BdSetBufAddr>
 100f008:	e3500000 	cmp	r0, #0
 100f00c:	1a000027 	bne	100f0b0 <mipi_csi_generate_sg_list_for_buffer_range+0x234>
	D_ASSERT(XAxiDma_BdSetLength(cur_bd, len, ring->MaxTransferLen) == XST_SUCCESS);
 100f010:	e59b201c 	ldr	r2, [fp, #28]
 100f014:	e1a01006 	mov	r1, r6
 100f018:	e1a0000a 	mov	r0, sl
 100f01c:	eb000efb 	bl	1012c10 <XAxiDma_BdSetLength>
 100f020:	e3500000 	cmp	r0, #0
 100f024:	1a00002d 	bne	100f0e0 <mipi_csi_generate_sg_list_for_buffer_range+0x264>
	XAxiDma_BdSetCtrl(cur_bd, ctrl);
 100f028:	e1a0000a 	mov	r0, sl
 100f02c:	e1a01008 	mov	r1, r8
 100f030:	eb000f5f 	bl	1012db4 <XAxiDma_BdSetCtrl>
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f034:	e59b3028 	ldr	r3, [fp, #40]	; 0x28
	for(c = 0; c < chcnt; c++) {
 100f038:	e2844001 	add	r4, r4, #1
		size -= CSISTRM_AXI_MAX_BD_SIZE;
 100f03c:	e2466502 	sub	r6, r6, #8388608	; 0x800000
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f040:	e153000a 	cmp	r3, sl
 100f044:	859b3030 	ldrhi	r3, [fp, #48]	; 0x30
 100f048:	959ba024 	ldrls	sl, [fp, #36]	; 0x24
 100f04c:	808aa003 	addhi	sl, sl, r3
	for(c = 0; c < chcnt; c++) {
 100f050:	e1590004 	cmp	r9, r4
 100f054:	1affffdf 	bne	100efd8 <mipi_csi_generate_sg_list_for_buffer_range+0x15c>
 100f058:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
 100f05c:	e59db030 	ldr	fp, [sp, #48]	; 0x30
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f060:	e59f11b4 	ldr	r1, [pc, #436]	; 100f21c <mipi_csi_generate_sg_list_for_buffer_range+0x3a0>
		sof = (i == 0);
		eof = (i == (bd_entries - 1));

		cur_bd_ptr = _mipi_csi_axidma_add_bd_block(ring, cur_bd_ptr, pk_size, (uint32_t*)buff, sof, eof);
		buff += CSISTRM_AXI_MAX_BD_SIZE;
 100f064:	e59dc01c 	ldr	ip, [sp, #28]
	for(i = 0; i < bd_entries; i++) {
 100f068:	e59d000c 	ldr	r0, [sp, #12]
 100f06c:	e1c120d0 	ldrd	r2, [r1]
		buff += CSISTRM_AXI_MAX_BD_SIZE;
 100f070:	e28cc402 	add	ip, ip, #33554432	; 0x2000000
 100f074:	e58dc01c 	str	ip, [sp, #28]
	for(i = 0; i < bd_entries; i++) {
 100f078:	e2800001 	add	r0, r0, #1
 100f07c:	e0926009 	adds	r6, r2, r9
		size -= pk_size;
 100f080:	e59dc018 	ldr	ip, [sp, #24]
 100f084:	e0a37fc9 	adc	r7, r3, r9, asr #31
	for(i = 0; i < bd_entries; i++) {
 100f088:	e59d3014 	ldr	r3, [sp, #20]
 100f08c:	e58d000c 	str	r0, [sp, #12]
		size -= pk_size;
 100f090:	e04cc005 	sub	ip, ip, r5
 100f094:	e1c160f0 	strd	r6, [r1]
	for(i = 0; i < bd_entries; i++) {
 100f098:	e1530000 	cmp	r3, r0
		size -= pk_size;
 100f09c:	e58dc018 	str	ip, [sp, #24]
	for(i = 0; i < bd_entries; i++) {
 100f0a0:	1affffb3 	bne	100ef74 <mipi_csi_generate_sg_list_for_buffer_range+0xf8>
 100f0a4:	e59da034 	ldr	sl, [sp, #52]	; 0x34
 100f0a8:	e1a01003 	mov	r1, r3
 100f0ac:	ea00003d 	b	100f1a8 <mipi_csi_generate_sg_list_for_buffer_range+0x32c>
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f0b0:	e3083b20 	movw	r3, #35616	; 0x8b20
 100f0b4:	e3082b34 	movw	r2, #35636	; 0x8b34
 100f0b8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f0bc:	e3403106 	movt	r3, #262	; 0x106
 100f0c0:	e3402106 	movt	r2, #262	; 0x106
 100f0c4:	e3a000e0 	mov	r0, #224	; 0xe0
 100f0c8:	e58d0000 	str	r0, [sp]
	D_ASSERT((addr_end % 4) == 0);
 100f0cc:	e3a00004 	mov	r0, #4
 100f0d0:	e3401106 	movt	r1, #262	; 0x106
 100f0d4:	ebfffb09 	bl	100dd00 <d_printf>
 100f0d8:	e3e00062 	mvn	r0, #98	; 0x62
 100f0dc:	fa002cd3 	blx	101a430 <exit>
	D_ASSERT(XAxiDma_BdSetLength(cur_bd, len, ring->MaxTransferLen) == XST_SUCCESS);
 100f0e0:	e3a000e1 	mov	r0, #225	; 0xe1
 100f0e4:	e3083b20 	movw	r3, #35616	; 0x8b20
 100f0e8:	e3082b6c 	movw	r2, #35692	; 0x8b6c
 100f0ec:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f0f0:	e58d0000 	str	r0, [sp]
 100f0f4:	e3403106 	movt	r3, #262	; 0x106
 100f0f8:	e3402106 	movt	r2, #262	; 0x106
 100f0fc:	eafffff2 	b	100f0cc <mipi_csi_generate_sg_list_for_buffer_range+0x250>
	D_ASSERT((addr_start % 4) == 0);
 100f100:	e300012f 	movw	r0, #303	; 0x12f
 100f104:	e3083698 	movw	r3, #34456	; 0x8698
 100f108:	e30829d4 	movw	r2, #35284	; 0x89d4
 100f10c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f110:	e58d0000 	str	r0, [sp]
 100f114:	e3403106 	movt	r3, #262	; 0x106
 100f118:	e3402106 	movt	r2, #262	; 0x106
 100f11c:	eaffffea 	b	100f0cc <mipi_csi_generate_sg_list_for_buffer_range+0x250>
	D_ASSERT((addr_end % 4) == 0);
 100f120:	e3a00e13 	mov	r0, #304	; 0x130
 100f124:	e3083698 	movw	r3, #34456	; 0x8698
 100f128:	e30829ec 	movw	r2, #35308	; 0x89ec
 100f12c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f130:	e58d0000 	str	r0, [sp]
 100f134:	e3403106 	movt	r3, #262	; 0x106
 100f138:	e3402106 	movt	r2, #262	; 0x106
 100f13c:	eaffffe2 	b	100f0cc <mipi_csi_generate_sg_list_for_buffer_range+0x250>
	D_ASSERT(addr_end >= addr_start);
 100f140:	e3000131 	movw	r0, #305	; 0x131
 100f144:	e3083698 	movw	r3, #34456	; 0x8698
 100f148:	e3082a00 	movw	r2, #35328	; 0x8a00
 100f14c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f150:	e58d0000 	str	r0, [sp]
 100f154:	e3403106 	movt	r3, #262	; 0x106
 100f158:	e3402106 	movt	r2, #262	; 0x106
 100f15c:	eaffffda 	b	100f0cc <mipi_csi_generate_sg_list_for_buffer_range+0x250>
	D_ASSERT(((uint32_t)g_mipi_csi_state.bd_area % XAXIDMA_BD_MINIMUM_ALIGNMENT) == 0);
 100f160:	e300014b 	movw	r0, #331	; 0x14b
 100f164:	e3083698 	movw	r3, #34456	; 0x8698
 100f168:	e3082a70 	movw	r2, #35440	; 0x8a70
 100f16c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f170:	e58d0000 	str	r0, [sp]
 100f174:	e3403106 	movt	r3, #262	; 0x106
 100f178:	e3402106 	movt	r2, #262	; 0x106
 100f17c:	eaffffd2 	b	100f0cc <mipi_csi_generate_sg_list_for_buffer_range+0x250>
	D_ASSERT(mipi_csi_setup_bdring_and_bd(g_mipi_csi_state.bd_area, bd_entries, &ring, &bd_ptr) == MCSI_RET_OK);
 100f180:	e3000151 	movw	r0, #337	; 0x151
 100f184:	e3083698 	movw	r3, #34456	; 0x8698
 100f188:	e3082abc 	movw	r2, #35516	; 0x8abc
 100f18c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f190:	e58d0000 	str	r0, [sp]
 100f194:	e3403106 	movt	r3, #262	; 0x106
 100f198:	e3402106 	movt	r2, #262	; 0x106
 100f19c:	eaffffca 	b	100f0cc <mipi_csi_generate_sg_list_for_buffer_range+0x250>
	uint32_t xfer_size = 0, pk_size = 0;
 100f1a0:	e1a05000 	mov	r5, r0
 100f1a4:	e1a01003 	mov	r1, r3
		xfer_size += pk_size;
	}

	g_mipi_csi_state.transfer_size = pk_size;
 100f1a8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c

	// Pass the BD to hardware for transmission
	status = XAxiDma_BdRingToHw(ring, bd_entries, bd_ptr); // This function manages cache coherency for BDs
 100f1ac:	e1a0200a 	mov	r2, sl
 100f1b0:	e1a0000b 	mov	r0, fp
	g_mipi_csi_state.transfer_size = pk_size;
 100f1b4:	e5835764 	str	r5, [r3, #1892]	; 0x764
	status = XAxiDma_BdRingToHw(ring, bd_entries, bd_ptr); // This function manages cache coherency for BDs
 100f1b8:	eb00115c 	bl	1013730 <XAxiDma_BdRingToHw>
	if (status != XST_SUCCESS) {
 100f1bc:	e2504000 	subs	r4, r0, #0
 100f1c0:	1a00000d 	bne	100f1fc <mipi_csi_generate_sg_list_for_buffer_range+0x380>
		d_printf(D_ERROR, "mipi_csi: fatal error passing BD ring to hardware: %d", status);
		exit(-1);
	}

	d_stop_timing(TMR_MIPI_SG_OVERALL);
 100f1c4:	e3a000f1 	mov	r0, #241	; 0xf1
 100f1c8:	ebfffcc0 	bl	100e4d0 <d_stop_timing>

	q_item->ring = ring;
 100f1cc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
	return CSIRES_OK;
}
 100f1d0:	e1a00004 	mov	r0, r4
	q_item->ring = ring;
 100f1d4:	e59d2020 	ldr	r2, [sp, #32]
 100f1d8:	e5823018 	str	r3, [r2, #24]
}
 100f1dc:	e28dd03c 	add	sp, sp, #60	; 0x3c
 100f1e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_printf(D_ERROR, "mipi_csi: fatal error allocating memory for DMA scatter-gather list!");
 100f1e4:	e3081a28 	movw	r1, #35368	; 0x8a28
 100f1e8:	e3a00004 	mov	r0, #4
 100f1ec:	e3401106 	movt	r1, #262	; 0x106
 100f1f0:	ebfffac2 	bl	100dd00 <d_printf>
		exit(-1);
 100f1f4:	e3e00000 	mvn	r0, #0
 100f1f8:	fa002c8c 	blx	101a430 <exit>
		d_printf(D_ERROR, "mipi_csi: fatal error passing BD ring to hardware: %d", status);
 100f1fc:	e3081bb4 	movw	r1, #35764	; 0x8bb4
 100f200:	e3a00004 	mov	r0, #4
 100f204:	e1a02004 	mov	r2, r4
 100f208:	e3401106 	movt	r1, #262	; 0x106
 100f20c:	ebfffabb 	bl	100dd00 <d_printf>
		exit(-1);
 100f210:	e3e00000 	mvn	r0, #0
 100f214:	fa002c85 	blx	101a430 <exit>
 100f218:	0145ac7c 	.word	0x0145ac7c
 100f21c:	0145b408 	.word	0x0145b408

0100f220 <mipi_csi_generate_sg_list_for_waves>:
 *
 * @param	wave_start		Starting wave index
 * @param	wave_end		Ending wave index - must be more than or equal to starting index
 */
int mipi_csi_generate_sg_list_for_waves(uint32_t wave_start, uint32_t wave_end, struct mipi_csi_stream_queue_item_t *q_item)
{
 100f220:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100f224:	e1a04000 	mov	r4, r0
 100f228:	e24dd064 	sub	sp, sp, #100	; 0x64
 100f22c:	e1a06001 	mov	r6, r1
	uint32_t total_sz, extra_chunks, total_bytes;
	bool sof, eof;

	//d_printf(D_INFO, "waves: %d %d", wave_start, wave_end);

	d_start_timing(TMR_MIPI_SG_OVERALL);
 100f230:	e3a000f1 	mov	r0, #241	; 0xf1
{
 100f234:	e58d2014 	str	r2, [sp, #20]
	d_start_timing(TMR_MIPI_SG_OVERALL);
 100f238:	ebfffc88 	bl	100e460 <d_start_timing>

	D_ASSERT(wave_start <= wave_end);
 100f23c:	e1540006 	cmp	r4, r6
 100f240:	8a0000ee 	bhi	100f600 <mipi_csi_generate_sg_list_for_waves+0x3e0>
	n_waves = (wave_end - wave_start) + 1;
	q_item->ring = NULL;
 100f244:	e59d2014 	ldr	r2, [sp, #20]
	n_waves = (wave_end - wave_start) + 1;
 100f248:	e0461004 	sub	r1, r6, r4
	q_item->calculated_size = 0;

	// Reset the DMA peripheral, terminating any existing transactions
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100f24c:	e59f5544 	ldr	r5, [pc, #1348]	; 100f798 <mipi_csi_generate_sg_list_for_waves+0x578>
	q_item->ring = NULL;
 100f250:	e3a03000 	mov	r3, #0
	n_waves = (wave_end - wave_start) + 1;
 100f254:	e58d1024 	str	r1, [sp, #36]	; 0x24
	q_item->ring = NULL;
 100f258:	e5823018 	str	r3, [r2, #24]
	q_item->calculated_size = 0;
 100f25c:	e5823014 	str	r3, [r2, #20]
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100f260:	e1a00005 	mov	r0, r5
	n_waves = (wave_end - wave_start) + 1;
 100f264:	e2813001 	add	r3, r1, #1
 100f268:	e58d3010 	str	r3, [sp, #16]
	XAxiDma_Reset(&g_mipi_csi_state.mipi_dma);
 100f26c:	eb000bea 	bl	101221c <XAxiDma_Reset>
	 * that is needed to compute the BD list size.
	 *
	 * Wave bounds checking is handled gracefully elsewhere, so this assert shouldn't
	 * be harmful.
	 */
	D_ASSERT(acq_get_ll_pointer(wave_start, &wave, ACQLIST_DONE) == ACQRES_OK);
 100f270:	e1a00004 	mov	r0, r4
 100f274:	e3a02002 	mov	r2, #2
 100f278:	e28d1040 	add	r1, sp, #64	; 0x40
 100f27c:	ebfff538 	bl	100c764 <acq_get_ll_pointer>
 100f280:	e3500000 	cmp	r0, #0
 100f284:	1a0000e5 	bne	100f620 <mipi_csi_generate_sg_list_for_waves+0x400>
	total_sz = wave->pre_sz + wave->post_sz;
 100f288:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
	/*
	 * Free the old BD list, if it's present.  Then, attempt to create a new BD list.  The
	 * list is three times the number of waveforms, as we have two pre-trigger DMA copies
	 * and one post-trigger DMA copy, plus one to allow for worst-case alignment.
	 */
	if(g_mipi_csi_state.bd_area != NULL) {
 100f28c:	e59527ac 	ldr	r2, [r5, #1964]	; 0x7ac
	total_sz = wave->pre_sz + wave->post_sz;
 100f290:	e5931018 	ldr	r1, [r3, #24]
 100f294:	e5933014 	ldr	r3, [r3, #20]
	if(g_mipi_csi_state.bd_area != NULL) {
 100f298:	e3520000 	cmp	r2, #0
	total_sz = wave->pre_sz + wave->post_sz;
 100f29c:	e58d102c 	str	r1, [sp, #44]	; 0x2c
	extra_chunks += wave->post_sz / CSISTRM_AXI_MAX_BD_SIZE;
 100f2a0:	e1a04ba1 	lsr	r4, r1, #23
	total_sz = wave->pre_sz + wave->post_sz;
 100f2a4:	e58d3028 	str	r3, [sp, #40]	; 0x28
	extra_chunks += wave->post_sz / CSISTRM_AXI_MAX_BD_SIZE;
 100f2a8:	e0844ba3 	add	r4, r4, r3, lsr #23
	if(g_mipi_csi_state.bd_area != NULL) {
 100f2ac:	0a000005 	beq	100f2c8 <mipi_csi_generate_sg_list_for_waves+0xa8>
		d_printf(D_INFO, "FreeBD=0x%08x I (waves)", g_mipi_csi_state.bd_area);
 100f2b0:	e3081c48 	movw	r1, #35912	; 0x8c48
 100f2b4:	e3a00002 	mov	r0, #2
 100f2b8:	e3401106 	movt	r1, #262	; 0x106
 100f2bc:	ebfffa8f 	bl	100dd00 <d_printf>
		free(g_mipi_csi_state.bd_area);
 100f2c0:	e59507ac 	ldr	r0, [r5, #1964]	; 0x7ac
 100f2c4:	fa002f3f 	blx	101afc8 <free>
	}

	bd_entries = ((3 + extra_chunks) * n_waves);
 100f2c8:	e59d3010 	ldr	r3, [sp, #16]
 100f2cc:	e2844003 	add	r4, r4, #3

	//d_printf(D_INFO, "mipi_csi: expected BD size: %d entries (%d total wave bytes, %d BD table bytes)", \
			bd_entries, total_bytes, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);

	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100f2d0:	e3a00040 	mov	r0, #64	; 0x40
	bd_entries = ((3 + extra_chunks) * n_waves);
 100f2d4:	e0030493 	mul	r3, r3, r4
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100f2d8:	e30a4c78 	movw	r4, #44152	; 0xac78
 100f2dc:	e3404145 	movt	r4, #325	; 0x145
 100f2e0:	e1a01303 	lsl	r1, r3, #6
	bd_entries = ((3 + extra_chunks) * n_waves);
 100f2e4:	e58d3018 	str	r3, [sp, #24]
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100f2e8:	fa002ef0 	blx	101aeb0 <memalign>

	if(g_mipi_csi_state.bd_area == NULL) {
 100f2ec:	e3500000 	cmp	r0, #0
	g_mipi_csi_state.bd_area = (void *)memalign(XAXIDMA_BD_MINIMUM_ALIGNMENT, bd_entries * XAXIDMA_BD_MINIMUM_ALIGNMENT);
 100f2f0:	e58407b0 	str	r0, [r4, #1968]	; 0x7b0
	if(g_mipi_csi_state.bd_area == NULL) {
 100f2f4:	0a00011a 	beq	100f764 <mipi_csi_generate_sg_list_for_waves+0x544>
		d_printf(D_ERROR, "mipi_csi: fatal error allocating memory for DMA scatter-gather list!");
		exit(-1);
	}

	D_ASSERT(((uint32_t)g_mipi_csi_state.bd_area % XAXIDMA_BD_MINIMUM_ALIGNMENT) == 0);
 100f2f8:	e310003f 	tst	r0, #63	; 0x3f
 100f2fc:	1a0000cf 	bne	100f640 <mipi_csi_generate_sg_list_for_waves+0x420>

	/*
	 * Attempt to set up the BDRing.  This function prints an error if things go
	 * wrong (and returns a failure code), so we just handle this condition with an assert.
	 */
	D_ASSERT(mipi_csi_setup_bdring_and_bd(g_mipi_csi_state.bd_area, bd_entries, &ring, &bd_ptr) == MCSI_RET_OK);
 100f300:	e28d303c 	add	r3, sp, #60	; 0x3c
 100f304:	e28d2038 	add	r2, sp, #56	; 0x38
 100f308:	e59d1018 	ldr	r1, [sp, #24]
 100f30c:	ebfffe99 	bl	100ed78 <mipi_csi_setup_bdring_and_bd>
 100f310:	e2503000 	subs	r3, r0, #0
 100f314:	e58d300c 	str	r3, [sp, #12]
 100f318:	1a0000d0 	bne	100f660 <mipi_csi_generate_sg_list_for_waves+0x440>
	 * calculate the remapped addresses.  Each BD length must be less than 8MB,
	 * so large transfers are split up.
	 */
	cur_bd_ptr = bd_ptr;

	d_start_timing(TMR_MIPI_SG_BDFILL);
 100f31c:	e3a000f2 	mov	r0, #242	; 0xf2
	cur_bd_ptr = bd_ptr;
 100f320:	e59d503c 	ldr	r5, [sp, #60]	; 0x3c
	d_start_timing(TMR_MIPI_SG_BDFILL);
 100f324:	ebfffc4d 	bl	100e460 <d_start_timing>

	for(i = 0; i < n_waves; i++) {
 100f328:	e59d3010 	ldr	r3, [sp, #16]
 100f32c:	e3530000 	cmp	r3, #0
 100f330:	da0000e5 	ble	100f6cc <mipi_csi_generate_sg_list_for_waves+0x4ac>
 100f334:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f338:	e2843e79 	add	r3, r4, #1936	; 0x790
 100f33c:	e58d3020 	str	r3, [sp, #32]
		sof = (i == 0);
		eof = (i == n_waves - 1);

		if(acq_dma_address_helper(wave, &addr_helper) != ACQRES_OK) {
 100f340:	e28d1048 	add	r1, sp, #72	; 0x48
 100f344:	ebfff66b 	bl	100ccf8 <acq_dma_address_helper>
 100f348:	e2503000 	subs	r3, r0, #0
 100f34c:	e58d301c 	str	r3, [sp, #28]
 100f350:	1a0000f9 	bne	100f73c <mipi_csi_generate_sg_list_for_waves+0x51c>
				addr_helper.post_start, addr_helper.post_end);
		*/

		// Add the pre-lower section in 8MB chunks
		cur_bd_ptr = _mipi_csi_axidma_add_bd_block(ring, cur_bd_ptr, \
				addr_helper.pre_lower_end - addr_helper.pre_lower_start, addr_helper.pre_lower_start, sof, 0);
 100f354:	e59db04c 	ldr	fp, [sp, #76]	; 0x4c
 100f358:	e59d8048 	ldr	r8, [sp, #72]	; 0x48
		cur_bd_ptr = _mipi_csi_axidma_add_bd_block(ring, cur_bd_ptr, \
 100f35c:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
				addr_helper.pre_lower_end - addr_helper.pre_lower_start, addr_helper.pre_lower_start, sof, 0);
 100f360:	e04b4008 	sub	r4, fp, r8
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f364:	e3540000 	cmp	r4, #0
 100f368:	e244737f 	sub	r7, r4, #-67108863	; 0xfc000001
 100f36c:	e247750e 	sub	r7, r7, #58720256	; 0x3800000
 100f370:	a1a07004 	movge	r7, r4
 100f374:	e1a07bc7 	asr	r7, r7, #23
 100f378:	e2877001 	add	r7, r7, #1
	for(c = 0; c < chcnt; c++) {
 100f37c:	e3570000 	cmp	r7, #0
 100f380:	da000034 	ble	100f458 <mipi_csi_generate_sg_list_for_waves+0x238>
 100f384:	e1a0a003 	mov	sl, r3
 100f388:	e1a09003 	mov	r9, r3
			ctrl |= XAXIDMA_BD_CTRL_TXSOF_MASK;
 100f38c:	e59d300c 	ldr	r3, [sp, #12]
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f390:	e1a01008 	mov	r1, r8
 100f394:	e1a00005 	mov	r0, r5
			ctrl |= XAXIDMA_BD_CTRL_TXSOF_MASK;
 100f398:	e1933009 	orrs	r3, r3, r9
 100f39c:	03a0a302 	moveq	sl, #134217728	; 0x8000000
		cur_bd = _mipi_csi_axidma_add_bd_entry(ring, cur_bd, base, MIN(size, CSISTRM_AXI_MAX_BD_SIZE), ctrl);
 100f3a0:	e3540502 	cmp	r4, #8388608	; 0x800000
 100f3a4:	a3a04502 	movge	r4, #8388608	; 0x800000
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f3a8:	eb000e2d 	bl	1012c64 <XAxiDma_BdSetBufAddr>
 100f3ac:	e3500000 	cmp	r0, #0
 100f3b0:	1a000013 	bne	100f404 <mipi_csi_generate_sg_list_for_waves+0x1e4>
	D_ASSERT(XAxiDma_BdSetLength(cur_bd, len, ring->MaxTransferLen) == XST_SUCCESS);
 100f3b4:	e1a01004 	mov	r1, r4
 100f3b8:	e596201c 	ldr	r2, [r6, #28]
 100f3bc:	e1a00005 	mov	r0, r5
 100f3c0:	eb000e12 	bl	1012c10 <XAxiDma_BdSetLength>
 100f3c4:	e3500000 	cmp	r0, #0
 100f3c8:	1a000019 	bne	100f434 <mipi_csi_generate_sg_list_for_waves+0x214>
	XAxiDma_BdSetCtrl(cur_bd, ctrl);
 100f3cc:	e1a00005 	mov	r0, r5
 100f3d0:	e1a0100a 	mov	r1, sl
 100f3d4:	eb000e76 	bl	1012db4 <XAxiDma_BdSetCtrl>
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f3d8:	e5963028 	ldr	r3, [r6, #40]	; 0x28
	for(c = 0; c < chcnt; c++) {
 100f3dc:	e2899001 	add	r9, r9, #1
		base += CSISTRM_AXI_MAX_BD_SIZE;
 100f3e0:	e2888502 	add	r8, r8, #8388608	; 0x800000
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f3e4:	e1530005 	cmp	r3, r5
 100f3e8:	85963030 	ldrhi	r3, [r6, #48]	; 0x30
 100f3ec:	95965024 	ldrls	r5, [r6, #36]	; 0x24
 100f3f0:	80855003 	addhi	r5, r5, r3
	for(c = 0; c < chcnt; c++) {
 100f3f4:	e1570009 	cmp	r7, r9
 100f3f8:	0a000015 	beq	100f454 <mipi_csi_generate_sg_list_for_waves+0x234>
 100f3fc:	e04b4008 	sub	r4, fp, r8
 100f400:	eaffffe1 	b	100f38c <mipi_csi_generate_sg_list_for_waves+0x16c>
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f404:	e3083b20 	movw	r3, #35616	; 0x8b20
 100f408:	e3082b34 	movw	r2, #35636	; 0x8b34
 100f40c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f410:	e3403106 	movt	r3, #262	; 0x106
 100f414:	e3402106 	movt	r2, #262	; 0x106
 100f418:	e3a000e0 	mov	r0, #224	; 0xe0
 100f41c:	e58d0000 	str	r0, [sp]
	D_ASSERT(acq_get_ll_pointer(wave_start, &wave, ACQLIST_DONE) == ACQRES_OK);
 100f420:	e3a00004 	mov	r0, #4
 100f424:	e3401106 	movt	r1, #262	; 0x106
 100f428:	ebfffa34 	bl	100dd00 <d_printf>
 100f42c:	e3e00062 	mvn	r0, #98	; 0x62
 100f430:	fa002bfe 	blx	101a430 <exit>
	D_ASSERT(XAxiDma_BdSetLength(cur_bd, len, ring->MaxTransferLen) == XST_SUCCESS);
 100f434:	e3a000e1 	mov	r0, #225	; 0xe1
 100f438:	e3083b20 	movw	r3, #35616	; 0x8b20
 100f43c:	e3082b6c 	movw	r2, #35692	; 0x8b6c
 100f440:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f444:	e58d0000 	str	r0, [sp]
 100f448:	e3403106 	movt	r3, #262	; 0x106
 100f44c:	e3402106 	movt	r2, #262	; 0x106
 100f450:	eafffff2 	b	100f420 <mipi_csi_generate_sg_list_for_waves+0x200>
 100f454:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f458:	e59d0020 	ldr	r0, [sp, #32]

		// Add the pre-upper section in 8MB chunks
		cur_bd_ptr = _mipi_csi_axidma_add_bd_block(ring, cur_bd_ptr, \
				addr_helper.pre_upper_end - addr_helper.pre_upper_start, addr_helper.pre_upper_start, 0, 0);
 100f45c:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
 100f460:	e59da050 	ldr	sl, [sp, #80]	; 0x50
 100f464:	e1c020d0 	ldrd	r2, [r0]
 100f468:	e04ca00a 	sub	sl, ip, sl
 100f46c:	e0928007 	adds	r8, r2, r7
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f470:	e24a137f 	sub	r1, sl, #-67108863	; 0xfc000001
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f474:	e0a39fc7 	adc	r9, r3, r7, asr #31
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f478:	e35a0000 	cmp	sl, #0
 100f47c:	e241150e 	sub	r1, r1, #58720256	; 0x3800000
 100f480:	a1a0100a 	movge	r1, sl
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f484:	e1a02008 	mov	r2, r8
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f488:	e1a01bc1 	asr	r1, r1, #23
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f48c:	e1a03009 	mov	r3, r9
 100f490:	e1c020f0 	strd	r2, [r0]
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f494:	e2817001 	add	r7, r1, #1
	for(c = 0; c < chcnt; c++) {
 100f498:	e3570000 	cmp	r7, #0
 100f49c:	da00001d 	ble	100f518 <mipi_csi_generate_sg_list_for_waves+0x2f8>
 100f4a0:	e24a9502 	sub	r9, sl, #8388608	; 0x800000
 100f4a4:	e1a0800c 	mov	r8, ip
 100f4a8:	e0499b81 	sub	r9, r9, r1, lsl #23
		cur_bd = _mipi_csi_axidma_add_bd_entry(ring, cur_bd, base, MIN(size, CSISTRM_AXI_MAX_BD_SIZE), ctrl);
 100f4ac:	e35a0502 	cmp	sl, #8388608	; 0x800000
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f4b0:	e048100a 	sub	r1, r8, sl
 100f4b4:	e1a00005 	mov	r0, r5
		cur_bd = _mipi_csi_axidma_add_bd_entry(ring, cur_bd, base, MIN(size, CSISTRM_AXI_MAX_BD_SIZE), ctrl);
 100f4b8:	b1a0400a 	movlt	r4, sl
 100f4bc:	a3a04502 	movge	r4, #8388608	; 0x800000
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f4c0:	eb000de7 	bl	1012c64 <XAxiDma_BdSetBufAddr>
 100f4c4:	e3500000 	cmp	r0, #0
 100f4c8:	1affffcd 	bne	100f404 <mipi_csi_generate_sg_list_for_waves+0x1e4>
	D_ASSERT(XAxiDma_BdSetLength(cur_bd, len, ring->MaxTransferLen) == XST_SUCCESS);
 100f4cc:	e1a01004 	mov	r1, r4
 100f4d0:	e596201c 	ldr	r2, [r6, #28]
 100f4d4:	e1a00005 	mov	r0, r5
 100f4d8:	eb000dcc 	bl	1012c10 <XAxiDma_BdSetLength>
 100f4dc:	e2501000 	subs	r1, r0, #0
 100f4e0:	1affffd3 	bne	100f434 <mipi_csi_generate_sg_list_for_waves+0x214>
	XAxiDma_BdSetCtrl(cur_bd, ctrl);
 100f4e4:	e1a00005 	mov	r0, r5
		size -= CSISTRM_AXI_MAX_BD_SIZE;
 100f4e8:	e24aa502 	sub	sl, sl, #8388608	; 0x800000
	XAxiDma_BdSetCtrl(cur_bd, ctrl);
 100f4ec:	eb000e30 	bl	1012db4 <XAxiDma_BdSetCtrl>
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f4f0:	e5963028 	ldr	r3, [r6, #40]	; 0x28
 100f4f4:	e1530005 	cmp	r3, r5
 100f4f8:	85963030 	ldrhi	r3, [r6, #48]	; 0x30
 100f4fc:	95965024 	ldrls	r5, [r6, #36]	; 0x24
 100f500:	80855003 	addhi	r5, r5, r3
	for(c = 0; c < chcnt; c++) {
 100f504:	e15a0009 	cmp	sl, r9
 100f508:	1affffe7 	bne	100f4ac <mipi_csi_generate_sg_list_for_waves+0x28c>
 100f50c:	e59d3020 	ldr	r3, [sp, #32]
 100f510:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
 100f514:	e1c320d0 	ldrd	r2, [r3]
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f518:	e0920007 	adds	r0, r2, r7

		// Add the post section in 8MB chunks
		cur_bd_ptr = _mipi_csi_axidma_add_bd_block(ring, cur_bd_ptr, \
				addr_helper.post_end - addr_helper.post_start, addr_helper.post_start, 0, eof);
 100f51c:	e59db05c 	ldr	fp, [sp, #92]	; 0x5c
 100f520:	e0a31fc7 	adc	r1, r3, r7, asr #31
 100f524:	e59d7058 	ldr	r7, [sp, #88]	; 0x58
 100f528:	e59d3020 	ldr	r3, [sp, #32]
 100f52c:	e04b4007 	sub	r4, fp, r7
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f530:	e3540000 	cmp	r4, #0
 100f534:	e244837f 	sub	r8, r4, #-67108863	; 0xfc000001
 100f538:	e248850e 	sub	r8, r8, #58720256	; 0x3800000
 100f53c:	a1a08004 	movge	r8, r4
 100f540:	e1a08bc8 	asr	r8, r8, #23
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f544:	e1c300f0 	strd	r0, [r3]
	int chcnt = (size / CSISTRM_AXI_MAX_BD_SIZE) + 1;
 100f548:	e288a001 	add	sl, r8, #1
	for(c = 0; c < chcnt; c++) {
 100f54c:	e35a0000 	cmp	sl, #0
 100f550:	da00004c 	ble	100f688 <mipi_csi_generate_sg_list_for_waves+0x468>
 100f554:	e59d300c 	ldr	r3, [sp, #12]
	uint32_t ctrl = 0;
 100f558:	e3a09000 	mov	r9, #0
 100f55c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
 100f560:	e58db034 	str	fp, [sp, #52]	; 0x34
 100f564:	e59db01c 	ldr	fp, [sp, #28]
 100f568:	e0433002 	sub	r3, r3, r2
 100f56c:	e16f3f13 	clz	r3, r3
 100f570:	e1a032a3 	lsr	r3, r3, #5
 100f574:	e58d3030 	str	r3, [sp, #48]	; 0x30
		if(eof && ((c + 1) == chcnt)) {
 100f578:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f57c:	e1a01007 	mov	r1, r7
 100f580:	e1a00005 	mov	r0, r5
		if(eof && ((c + 1) == chcnt)) {
 100f584:	e158000b 	cmp	r8, fp
 100f588:	13a03000 	movne	r3, #0
 100f58c:	02033001 	andeq	r3, r3, #1
			ctrl |= XAXIDMA_BD_CTRL_TXEOF_MASK;
 100f590:	e3530000 	cmp	r3, #0
 100f594:	13a09301 	movne	r9, #67108864	; 0x4000000
		cur_bd = _mipi_csi_axidma_add_bd_entry(ring, cur_bd, base, MIN(size, CSISTRM_AXI_MAX_BD_SIZE), ctrl);
 100f598:	e3540502 	cmp	r4, #8388608	; 0x800000
 100f59c:	a3a04502 	movge	r4, #8388608	; 0x800000
	D_ASSERT(XAxiDma_BdSetBufAddr(cur_bd, buf_addr) == XST_SUCCESS);
 100f5a0:	eb000daf 	bl	1012c64 <XAxiDma_BdSetBufAddr>
 100f5a4:	e3500000 	cmp	r0, #0
 100f5a8:	1affff95 	bne	100f404 <mipi_csi_generate_sg_list_for_waves+0x1e4>
	D_ASSERT(XAxiDma_BdSetLength(cur_bd, len, ring->MaxTransferLen) == XST_SUCCESS);
 100f5ac:	e1a01004 	mov	r1, r4
 100f5b0:	e596201c 	ldr	r2, [r6, #28]
 100f5b4:	e1a00005 	mov	r0, r5
 100f5b8:	eb000d94 	bl	1012c10 <XAxiDma_BdSetLength>
 100f5bc:	e3500000 	cmp	r0, #0
 100f5c0:	1affff9b 	bne	100f434 <mipi_csi_generate_sg_list_for_waves+0x214>
	XAxiDma_BdSetCtrl(cur_bd, ctrl);
 100f5c4:	e1a00005 	mov	r0, r5
 100f5c8:	e1a01009 	mov	r1, r9
 100f5cc:	eb000df8 	bl	1012db4 <XAxiDma_BdSetCtrl>
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f5d0:	e5963028 	ldr	r3, [r6, #40]	; 0x28
	for(c = 0; c < chcnt; c++) {
 100f5d4:	e28bb001 	add	fp, fp, #1
		base += CSISTRM_AXI_MAX_BD_SIZE;
 100f5d8:	e2877502 	add	r7, r7, #8388608	; 0x800000
	return XAxiDma_BdRingNext(ring, cur_bd);
 100f5dc:	e1530005 	cmp	r3, r5
 100f5e0:	85963030 	ldrhi	r3, [r6, #48]	; 0x30
 100f5e4:	95965024 	ldrls	r5, [r6, #36]	; 0x24
 100f5e8:	80855003 	addhi	r5, r5, r3
	for(c = 0; c < chcnt; c++) {
 100f5ec:	e15b000a 	cmp	fp, sl
 100f5f0:	0a000022 	beq	100f680 <mipi_csi_generate_sg_list_for_waves+0x460>
 100f5f4:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
 100f5f8:	e0434007 	sub	r4, r3, r7
 100f5fc:	eaffffdd 	b	100f578 <mipi_csi_generate_sg_list_for_waves+0x358>
	D_ASSERT(wave_start <= wave_end);
 100f600:	e300018e 	movw	r0, #398	; 0x18e
 100f604:	e3083698 	movw	r3, #34456	; 0x8698
 100f608:	e3082bec 	movw	r2, #35820	; 0x8bec
 100f60c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f610:	e58d0000 	str	r0, [sp]
 100f614:	e3403106 	movt	r3, #262	; 0x106
 100f618:	e3402106 	movt	r2, #262	; 0x106
 100f61c:	eaffff7f 	b	100f420 <mipi_csi_generate_sg_list_for_waves+0x200>
	D_ASSERT(acq_get_ll_pointer(wave_start, &wave, ACQLIST_DONE) == ACQRES_OK);
 100f620:	e300019d 	movw	r0, #413	; 0x19d
 100f624:	e3083698 	movw	r3, #34456	; 0x8698
 100f628:	e3082c04 	movw	r2, #35844	; 0x8c04
 100f62c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f630:	e58d0000 	str	r0, [sp]
 100f634:	e3403106 	movt	r3, #262	; 0x106
 100f638:	e3402106 	movt	r2, #262	; 0x106
 100f63c:	eaffff77 	b	100f420 <mipi_csi_generate_sg_list_for_waves+0x200>
	D_ASSERT(((uint32_t)g_mipi_csi_state.bd_area % XAXIDMA_BD_MINIMUM_ALIGNMENT) == 0);
 100f640:	e30001bb 	movw	r0, #443	; 0x1bb
 100f644:	e3083698 	movw	r3, #34456	; 0x8698
 100f648:	e3082a70 	movw	r2, #35440	; 0x8a70
 100f64c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f650:	e58d0000 	str	r0, [sp]
 100f654:	e3403106 	movt	r3, #262	; 0x106
 100f658:	e3402106 	movt	r2, #262	; 0x106
 100f65c:	eaffff6f 	b	100f420 <mipi_csi_generate_sg_list_for_waves+0x200>
	D_ASSERT(mipi_csi_setup_bdring_and_bd(g_mipi_csi_state.bd_area, bd_entries, &ring, &bd_ptr) == MCSI_RET_OK);
 100f660:	e30001c1 	movw	r0, #449	; 0x1c1
 100f664:	e3083698 	movw	r3, #34456	; 0x8698
 100f668:	e3082abc 	movw	r2, #35516	; 0x8abc
 100f66c:	e30619f0 	movw	r1, #27120	; 0x69f0
 100f670:	e58d0000 	str	r0, [sp]
 100f674:	e3403106 	movt	r3, #262	; 0x106
 100f678:	e3402106 	movt	r2, #262	; 0x106
 100f67c:	eaffff67 	b	100f420 <mipi_csi_generate_sg_list_for_waves+0x200>
 100f680:	e59d3020 	ldr	r3, [sp, #32]
 100f684:	e1c300d0 	ldrd	r0, [r3]
	g_mipi_csi_state.stats.num_bds_created += chcnt;
 100f688:	e090200a 	adds	r2, r0, sl
 100f68c:	e59dc020 	ldr	ip, [sp, #32]
 100f690:	e0a13fca 	adc	r3, r1, sl, asr #31

		// End of list?
		if(acq_next_ll_pointer(wave, &next) != ACQRES_OK)
 100f694:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
 100f698:	e28d1044 	add	r1, sp, #68	; 0x44
 100f69c:	e1cc20f0 	strd	r2, [ip]
 100f6a0:	ebfff45d 	bl	100c81c <acq_next_ll_pointer>
 100f6a4:	e3500000 	cmp	r0, #0
 100f6a8:	1a000007 	bne	100f6cc <mipi_csi_generate_sg_list_for_waves+0x4ac>
	for(i = 0; i < n_waves; i++) {
 100f6ac:	e59d300c 	ldr	r3, [sp, #12]
 100f6b0:	e59d2010 	ldr	r2, [sp, #16]
			break;
		wave = next;
 100f6b4:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
	for(i = 0; i < n_waves; i++) {
 100f6b8:	e2833001 	add	r3, r3, #1
 100f6bc:	e1520003 	cmp	r2, r3
 100f6c0:	e58d300c 	str	r3, [sp, #12]
		wave = next;
 100f6c4:	e58d0040 	str	r0, [sp, #64]	; 0x40
	for(i = 0; i < n_waves; i++) {
 100f6c8:	1affff1c 	bne	100f340 <mipi_csi_generate_sg_list_for_waves+0x120>
	}

	d_stop_timing(TMR_MIPI_SG_BDFILL);
 100f6cc:	e3a000f2 	mov	r0, #242	; 0xf2
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 100f6d0:	e59f40c4 	ldr	r4, [pc, #196]	; 100f79c <mipi_csi_generate_sg_list_for_waves+0x57c>
	d_stop_timing(TMR_MIPI_SG_BDFILL);
 100f6d4:	ebfffb7d 	bl	100e4d0 <d_stop_timing>
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 100f6d8:	e3a000f2 	mov	r0, #242	; 0xf2
 100f6dc:	ebfffbb6 	bl	100e5bc <d_read_timing_us>

	// Pass the BD to hardware for transmission
	status = XAxiDma_BdRingToHw(ring, bd_entries, bd_ptr); // This function manages cache coherency for BDs
 100f6e0:	e59d1018 	ldr	r1, [sp, #24]
 100f6e4:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
 100f6e8:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
	g_mipi_csi_state.stats.last_sg_bd_time_us = d_read_timing_us(TMR_MIPI_SG_BDFILL);
 100f6ec:	ed840a00 	vstr	s0, [r4]
	status = XAxiDma_BdRingToHw(ring, bd_entries, bd_ptr); // This function manages cache coherency for BDs
 100f6f0:	eb00100e 	bl	1013730 <XAxiDma_BdRingToHw>
	if (status != XST_SUCCESS) {
 100f6f4:	e2505000 	subs	r5, r0, #0
 100f6f8:	1a00001f 	bne	100f77c <mipi_csi_generate_sg_list_for_waves+0x55c>
	total_sz = wave->pre_sz + wave->post_sz;
 100f6fc:	e1cd22d8 	ldrd	r2, [sp, #40]	; 0x28
	//d_printf(D_INFO, "mipi_csi: list sent to DMA...");

	q_item->calculated_size = n_waves * total_sz;
	q_item->ring = ring;

	d_stop_timing(TMR_MIPI_SG_OVERALL);
 100f700:	e3a000f1 	mov	r0, #241	; 0xf1
	total_bytes = total_sz * n_waves;
 100f704:	e59d1010 	ldr	r1, [sp, #16]
	total_sz = wave->pre_sz + wave->post_sz;
 100f708:	e0833002 	add	r3, r3, r2
	q_item->ring = ring;
 100f70c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
	total_bytes = total_sz * n_waves;
 100f710:	e0030391 	mul	r3, r1, r3
	q_item->ring = ring;
 100f714:	e59d1014 	ldr	r1, [sp, #20]
 100f718:	e5812018 	str	r2, [r1, #24]
	q_item->calculated_size = n_waves * total_sz;
 100f71c:	e5813014 	str	r3, [r1, #20]
	d_stop_timing(TMR_MIPI_SG_OVERALL);
 100f720:	ebfffb6a 	bl	100e4d0 <d_stop_timing>
	g_mipi_csi_state.stats.last_sg_total_time_us = d_read_timing_us(TMR_MIPI_SG_OVERALL);
 100f724:	e3a000f1 	mov	r0, #241	; 0xf1
 100f728:	ebfffba3 	bl	100e5bc <d_read_timing_us>
 100f72c:	ed040a01 	vstr	s0, [r4, #-4]

	return CSIRES_OK;
}
 100f730:	e1a00005 	mov	r0, r5
 100f734:	e28dd064 	add	sp, sp, #100	; 0x64
 100f738:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d_printf(D_WARN, "mipi_csi: early abort of CSI SG generation due to inconsistent wave buffer. " \
 100f73c:	e59d3010 	ldr	r3, [sp, #16]
 100f740:	e3081c60 	movw	r1, #35936	; 0x8c60
 100f744:	e3401106 	movt	r1, #262	; 0x106
 100f748:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
 100f74c:	e3a00003 	mov	r0, #3
			return CSIRES_ERROR_WAVES;
 100f750:	e3e05000 	mvn	r5, #0
			d_printf(D_WARN, "mipi_csi: early abort of CSI SG generation due to inconsistent wave buffer. " \
 100f754:	e58d3000 	str	r3, [sp]
 100f758:	e59d300c 	ldr	r3, [sp, #12]
 100f75c:	ebfff967 	bl	100dd00 <d_printf>
			return CSIRES_ERROR_WAVES;
 100f760:	eafffff2 	b	100f730 <mipi_csi_generate_sg_list_for_waves+0x510>
		d_printf(D_ERROR, "mipi_csi: fatal error allocating memory for DMA scatter-gather list!");
 100f764:	e3081a28 	movw	r1, #35368	; 0x8a28
 100f768:	e3a00004 	mov	r0, #4
 100f76c:	e3401106 	movt	r1, #262	; 0x106
 100f770:	ebfff962 	bl	100dd00 <d_printf>
		exit(-1);
 100f774:	e3e00000 	mvn	r0, #0
 100f778:	fa002b2c 	blx	101a430 <exit>
		d_printf(D_ERROR, "mipi_csi: fatal error passing BD ring to hardware: %d", status);
 100f77c:	e3081bb4 	movw	r1, #35764	; 0x8bb4
 100f780:	e3a00004 	mov	r0, #4
 100f784:	e1a02005 	mov	r2, r5
 100f788:	e3401106 	movt	r1, #262	; 0x106
 100f78c:	ebfff95b 	bl	100dd00 <d_printf>
		exit(-1);
 100f790:	e3e00000 	mvn	r0, #0
 100f794:	fa002b25 	blx	101a430 <exit>
 100f798:	0145ac7c 	.word	0x0145ac7c
 100f79c:	0145b424 	.word	0x0145b424

0100f7a0 <mipi_csi_send_fifo_reset>:

/*
 * Send a reset FIFO command, ensuring the FIFO starts off empty.
 */
void mipi_csi_send_fifo_reset()
{
 100f7a0:	e92d4010 	push	{r4, lr}
	outbyte('R');
 100f7a4:	e3a00052 	mov	r0, #82	; 0x52
 100f7a8:	eb002265 	bl	1018144 <outbyte>
	_FAB_CFG_ACCESS(reg) |= data;
 100f7ac:	e3a03000 	mov	r3, #0
 100f7b0:	e34433c0 	movt	r3, #17344	; 0x43c0
 100f7b4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100f7b8:	e3822040 	orr	r2, r2, #64	; 0x40
 100f7bc:	e5832100 	str	r2, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~data;
 100f7c0:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100f7c4:	e3c22040 	bic	r2, r2, #64	; 0x40
 100f7c8:	e5832100 	str	r2, [r3, #256]	; 0x100

	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_RESET_FIFO);
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_RESET_FIFO);
}
 100f7cc:	e8bd8010 	pop	{r4, pc}

0100f7d0 <mipi_csi_send_sof>:
/*
 * Send a start of frame signal and wait for the MIPI controller to transmit that
 * (should happen in less than 50 us.)
 */
void mipi_csi_send_sof()
{
 100f7d0:	e92d4010 	push	{r4, lr}
	outbyte('S');
 100f7d4:	e3a00053 	mov	r0, #83	; 0x53
 100f7d8:	eb002259 	bl	1018144 <outbyte>
	/*
	 * If clock idle flag #2 is set, then we turn off fabric clock idling so that clock goes active
	 * for the whole transaction until EoF.  If clock idle flag #1 is set, then enable clock idling
	 * now (it might not be enabled on the fabric before) but don't turn it off at EoF.
	 */
	if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_2) {
 100f7dc:	e30a3c78 	movw	r3, #44152	; 0xac78
 100f7e0:	e300275e 	movw	r2, #1886	; 0x75e
 100f7e4:	e3403145 	movt	r3, #325	; 0x145
 100f7e8:	e19330b2 	ldrh	r3, [r3, r2]
 100f7ec:	e3130901 	tst	r3, #16384	; 0x4000
 100f7f0:	0a000022 	beq	100f880 <mipi_csi_send_sof+0xb0>
 100f7f4:	e3a03000 	mov	r3, #0
 100f7f8:	e34433c0 	movt	r3, #17344	; 0x43c0
 100f7fc:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100f800:	e3c22020 	bic	r2, r2, #32
 100f804:	e5832100 	str	r2, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 100f808:	e3a03000 	mov	r3, #0

	// Ensure system is stopped first by sending a stop pulse.
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP);
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP | CSI_CTRL_A_START_LINES | CSI_CTRL_A_START_FRAME);

	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, g_mipi_csi_state.csi_frame_wct, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 100f80c:	e59f0088 	ldr	r0, [pc, #136]	; 100f89c <mipi_csi_send_sof+0xcc>
 100f810:	e34433c0 	movt	r3, #17344	; 0x43c0
 100f814:	e5931100 	ldr	r1, [r3, #256]	; 0x100
	res = _FAB_CFG_ACCESS(reg);
 100f818:	e1a02003 	mov	r2, r3
 100f81c:	e1d000b0 	ldrh	r0, [r0]
	_FAB_CFG_ACCESS(reg) |= data;
 100f820:	e3811008 	orr	r1, r1, #8
 100f824:	e5831100 	str	r1, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~data;
 100f828:	e5931100 	ldr	r1, [r3, #256]	; 0x100
 100f82c:	e3c1100b 	bic	r1, r1, #11
 100f830:	e5831100 	str	r1, [r3, #256]	; 0x100
 */
static inline void fabcfg_write_masked(uint32_t reg, uint32_t data, uint32_t mask, int shift)
{
	reg &= FAB_CFG_ADDR_MASK;

	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f834:	e5931108 	ldr	r1, [r3, #264]	; 0x108
 100f838:	e1a01821 	lsr	r1, r1, #16
 100f83c:	e1a01801 	lsl	r1, r1, #16
 100f840:	e5831108 	str	r1, [r3, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100f844:	e5931108 	ldr	r1, [r3, #264]	; 0x108
 100f848:	e1801001 	orr	r1, r0, r1
 100f84c:	e5831108 	str	r1, [r3, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= data;
 100f850:	e5931100 	ldr	r1, [r3, #256]	; 0x100
 100f854:	e3811002 	orr	r1, r1, #2
 100f858:	e5831100 	str	r1, [r3, #256]	; 0x100
	res = _FAB_CFG_ACCESS(reg);
 100f85c:	e592310c 	ldr	r3, [r2, #268]	; 0x10c

	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_FRAME);
	//while( fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  // wait for DONE to go LOW - ack of command
	while(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  // then wait for DONE to go HIGH - command done
 100f860:	e3130001 	tst	r3, #1
 100f864:	0afffffc 	beq	100f85c <mipi_csi_send_sof+0x8c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100f868:	e5923100 	ldr	r3, [r2, #256]	; 0x100
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_FRAME);

	outbyte(',');
 100f86c:	e3a0002c 	mov	r0, #44	; 0x2c
}
 100f870:	e8bd4010 	pop	{r4, lr}
 100f874:	e3c33002 	bic	r3, r3, #2
 100f878:	e5823100 	str	r3, [r2, #256]	; 0x100
	outbyte(',');
 100f87c:	ea002230 	b	1018144 <outbyte>
	} else if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_1) {
 100f880:	e3130902 	tst	r3, #32768	; 0x8000
	_FAB_CFG_ACCESS(reg) |= data;
 100f884:	13a03000 	movne	r3, #0
 100f888:	134433c0 	movtne	r3, #17344	; 0x43c0
 100f88c:	15932100 	ldrne	r2, [r3, #256]	; 0x100
 100f890:	13822020 	orrne	r2, r2, #32
 100f894:	15832100 	strne	r2, [r3, #256]	; 0x100
 100f898:	eaffffda 	b	100f808 <mipi_csi_send_sof+0x38>
 100f89c:	0145b3e8 	.word	0x0145b3e8

0100f8a0 <mipi_csi_send_eof>:
/*
 * Send an end of frame signal and wait for the MIPI controller to transmit that
 * (should happen in less than 50 us.)
 */
void mipi_csi_send_eof()
{
 100f8a0:	e92d4010 	push	{r4, lr}
	outbyte('E');
 100f8a4:	e3a00045 	mov	r0, #69	; 0x45
 100f8a8:	eb002225 	bl	1018144 <outbyte>
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f8ac:	e3a03000 	mov	r3, #0
 100f8b0:	e34433c0 	movt	r3, #17344	; 0x43c0

	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, g_mipi_csi_state.csi_frame_wct, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 100f8b4:	e59f107c 	ldr	r1, [pc, #124]	; 100f938 <mipi_csi_send_eof+0x98>
 100f8b8:	e5932108 	ldr	r2, [r3, #264]	; 0x108
	res = _FAB_CFG_ACCESS(reg);
 100f8bc:	e1a04003 	mov	r4, r3
 100f8c0:	e1d110b0 	ldrh	r1, [r1]
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f8c4:	e1a02822 	lsr	r2, r2, #16
 100f8c8:	e1a02802 	lsl	r2, r2, #16
 100f8cc:	e5832108 	str	r2, [r3, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100f8d0:	e5932108 	ldr	r2, [r3, #264]	; 0x108
 100f8d4:	e1812002 	orr	r2, r1, r2
 100f8d8:	e5832108 	str	r2, [r3, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) &= ~data;
 100f8dc:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100f8e0:	e3c22003 	bic	r2, r2, #3
 100f8e4:	e5832100 	str	r2, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 100f8e8:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100f8ec:	e3822004 	orr	r2, r2, #4
 100f8f0:	e5832100 	str	r2, [r3, #256]	; 0x100
	res = _FAB_CFG_ACCESS(reg);
 100f8f4:	e594310c 	ldr	r3, [r4, #268]	; 0x10c

	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_LINES | CSI_CTRL_A_START_FRAME);
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_END_FRAME);
	//while( fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  // wait for DONE to go LOW - ack of command
	while(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) ;  // then wait for DONE to go HIGH - command done
 100f8f8:	e3130001 	tst	r3, #1
 100f8fc:	0afffffc 	beq	100f8f4 <mipi_csi_send_eof+0x54>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100f900:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_END_FRAME);

	outbyte('.');
 100f904:	e3a0002e 	mov	r0, #46	; 0x2e
 100f908:	e3c33004 	bic	r3, r3, #4
 100f90c:	e5843100 	str	r3, [r4, #256]	; 0x100
 100f910:	eb00220b 	bl	1018144 <outbyte>

	/*
	 * If clock idle flag #2 is set, then we turn on fabric clock idling so that clock goes inactive
	 * until the next transaction
	 */
	if(g_mipi_csi_state.flags & MCSI_FLAG_CLOCK_IDLE_MODE_2) {
 100f914:	e30a3c78 	movw	r3, #44152	; 0xac78
 100f918:	e300275e 	movw	r2, #1886	; 0x75e
 100f91c:	e3403145 	movt	r3, #325	; 0x145
 100f920:	e19330b2 	ldrh	r3, [r3, r2]
 100f924:	e3130901 	tst	r3, #16384	; 0x4000
	_FAB_CFG_ACCESS(reg) |= data;
 100f928:	15943100 	ldrne	r3, [r4, #256]	; 0x100
 100f92c:	13833020 	orrne	r3, r3, #32
 100f930:	15843100 	strne	r3, [r4, #256]	; 0x100
		fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_CLOCK_SLEEP_ENABLE);
	}
}
 100f934:	e8bd8010 	pop	{r4, pc}
 100f938:	0145b3e8 	.word	0x0145b3e8

0100f93c <mipi_csi_transfer_packet>:
 *
 * This function initiates a transfer: it doesn't wait for the transfer to complete.
 * The user should check the DONE state to see when to send the next packet.
 */
void mipi_csi_transfer_packet(struct mipi_csi_stream_queue_item_t *q_item)
{
 100f93c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	uint32_t flags_a = 0;
	uint32_t lines = g_mipi_csi_state.csi_line_count;
 100f940:	e30a7c78 	movw	r7, #44152	; 0xac78
 100f944:	e3407145 	movt	r7, #325	; 0x145
 100f948:	e300376e 	movw	r3, #1902	; 0x76e
{
 100f94c:	e24dd00c 	sub	sp, sp, #12
 100f950:	e1a09000 	mov	r9, r0
	uint32_t size;

	outbyte('x');
 100f954:	e3a00078 	mov	r0, #120	; 0x78
	uint32_t lines = g_mipi_csi_state.csi_line_count;
 100f958:	e19750b3 	ldrh	r5, [r7, r3]
	outbyte('x');
 100f95c:	eb0021f8 	bl	1018144 <outbyte>

	size = lines * g_mipi_csi_state.csi_line_size;
 100f960:	e300276c 	movw	r2, #1900	; 0x76c
	_FAB_CFG_ACCESS(reg) &= ~data;
 100f964:	e3a03000 	mov	r3, #0
 100f968:	e19760b2 	ldrh	r6, [r7, r2]
 100f96c:	e34433c0 	movt	r3, #17344	; 0x43c0
 100f970:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100f974:	e0080695 	mul	r8, r5, r6
 100f978:	e3c22001 	bic	r2, r2, #1
 100f97c:	e5832100 	str	r2, [r3, #256]	; 0x100
	 * Adjust the line count near the end of the packet.
	 *
	 * Packets are rounded to a multiple of the line size with remaining data replaced
	 * with undefined values.
	 */
	if(size > g_mipi_csi_state.transfer_rem) {
 100f980:	e5974768 	ldr	r4, [r7, #1896]	; 0x768
 100f984:	e1540008 	cmp	r4, r8
 100f988:	2a000004 	bcs	100f9a0 <mipi_csi_transfer_packet+0x64>
		size = g_mipi_csi_state.transfer_rem;
		lines = size / g_mipi_csi_state.csi_line_size;
 100f98c:	e1a01006 	mov	r1, r6
 100f990:	e1a00004 	mov	r0, r4
 100f994:	fa00275b 	blx	1019708 <__udivsi3>
 100f998:	e1a08004 	mov	r8, r4
 100f99c:	e1a05000 	mov	r5, r0
	 * with the logic subtracting two on each 16-bit word xfer.)
	 *
	 * TODO: We could probably improve performance here by not writing these values on
	 * each iteration -- but this is a relatively light task compared to the DMA setup.
	 */
	D_ASSERT(INT_IS_EVEN(g_mipi_csi_state.csi_line_size)) ;
 100f9a0:	e3160001 	tst	r6, #1
 100f9a4:	1a00002e 	bne	100fa64 <mipi_csi_transfer_packet+0x128>
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f9a8:	e3a04000 	mov	r4, #0

	fabcfg_write_masked(FAB_CFG_CSI_CTRL_A, g_mipi_csi_state.csi_line_size - 2, CSI_CTRL_A_LINE_BYTE_COUNT_MSK, CSI_CTRL_A_LINE_BYTE_COUNT_SFT);
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, lines - 1, CSI_CTRL_B_LINE_COUNT_MSK, CSI_CTRL_B_LINE_COUNT_SFT);
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, q_item->data_type, CSI_CTRL_B_DATA_TYPE_MSK, CSI_CTRL_B_DATA_TYPE_SFT);
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_C, q_item->wct_header, CSI_CTRL_C_WCT_HEADER_MSK, CSI_CTRL_C_WCT_HEADER_SFT);
 100f9ac:	e1d930b6 	ldrh	r3, [r9, #6]
 100f9b0:	e34443c0 	movt	r4, #17344	; 0x43c0
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_A, g_mipi_csi_state.csi_line_size - 2, CSI_CTRL_A_LINE_BYTE_COUNT_MSK, CSI_CTRL_A_LINE_BYTE_COUNT_SFT);
 100f9b4:	e2466002 	sub	r6, r6, #2
 100f9b8:	e5942100 	ldr	r2, [r4, #256]	; 0x100
 100f9bc:	e3a0c000 	mov	ip, #0
 100f9c0:	e34fcfff 	movt	ip, #65535	; 0xffff
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, lines - 1, CSI_CTRL_B_LINE_COUNT_MSK, CSI_CTRL_B_LINE_COUNT_SFT);
 100f9c4:	e2455001 	sub	r5, r5, #1
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100f9c8:	e6ff5075 	uxth	r5, r5
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f9cc:	e6ff2072 	uxth	r2, r2
 100f9d0:	e5842100 	str	r2, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100f9d4:	e5942100 	ldr	r2, [r4, #256]	; 0x100
 100f9d8:	e1826806 	orr	r6, r2, r6, lsl #16
 100f9dc:	e5846100 	str	r6, [r4, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f9e0:	e5942104 	ldr	r2, [r4, #260]	; 0x104
 100f9e4:	e002200c 	and	r2, r2, ip
 100f9e8:	e5842104 	str	r2, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100f9ec:	e5942104 	ldr	r2, [r4, #260]	; 0x104
 100f9f0:	e1855002 	orr	r5, r5, r2
 100f9f4:	e5845104 	str	r5, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100f9f8:	e5940104 	ldr	r0, [r4, #260]	; 0x104
	fabcfg_write_masked(FAB_CFG_CSI_CTRL_B, q_item->data_type, CSI_CTRL_B_DATA_TYPE_MSK, CSI_CTRL_B_DATA_TYPE_SFT);
 100f9fc:	e5d92004 	ldrb	r2, [r9, #4]
 100fa00:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
 100fa04:	e5840104 	str	r0, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100fa08:	e5941104 	ldr	r1, [r4, #260]	; 0x104
 100fa0c:	e1811c02 	orr	r1, r1, r2, lsl #24
 100fa10:	e5841104 	str	r1, [r4, #260]	; 0x104
	_FAB_CFG_ACCESS(reg) &= ~mask;
 100fa14:	e5942108 	ldr	r2, [r4, #264]	; 0x108
 100fa18:	e002200c 	and	r2, r2, ip
 100fa1c:	e5842108 	str	r2, [r4, #264]	; 0x108
	_FAB_CFG_ACCESS(reg) |= (data << shift) & mask;
 100fa20:	e5942108 	ldr	r2, [r4, #264]	; 0x108
 100fa24:	e1833002 	orr	r3, r3, r2
 100fa28:	e5843108 	str	r3, [r4, #264]	; 0x108

	// Send the frame start signal first, then send the start lines signal.
	mipi_csi_send_sof();
 100fa2c:	ebffff67 	bl	100f7d0 <mipi_csi_send_sof>
	_FAB_CFG_ACCESS(reg) |= data;
 100fa30:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_START_LINES);

	g_mipi_csi_state.transfer_rem -= size;
	g_mipi_csi_state.stats.data_xfer_bytes += size;
 100fa34:	e59f0058 	ldr	r0, [pc, #88]	; 100fa94 <mipi_csi_transfer_packet+0x158>
 100fa38:	e3833001 	orr	r3, r3, #1
 100fa3c:	e5843100 	str	r3, [r4, #256]	; 0x100
 100fa40:	e14020d8 	ldrd	r2, [r0, #-8]
	g_mipi_csi_state.transfer_rem -= size;
 100fa44:	e5971768 	ldr	r1, [r7, #1896]	; 0x768
	g_mipi_csi_state.stats.data_xfer_bytes += size;
 100fa48:	e0924008 	adds	r4, r2, r8
 100fa4c:	e2a35000 	adc	r5, r3, #0
	g_mipi_csi_state.transfer_rem -= size;
 100fa50:	e0418008 	sub	r8, r1, r8
	g_mipi_csi_state.stats.data_xfer_bytes += size;
 100fa54:	e14040f8 	strd	r4, [r0, #-8]
	g_mipi_csi_state.transfer_rem -= size;
 100fa58:	e5878768 	str	r8, [r7, #1896]	; 0x768

	//d_printf(D_INFO, "mipi_csi: packet parameters: %d bytes remain", g_mipi_csi_state.transfer_rem);
}
 100fa5c:	e28dd00c 	add	sp, sp, #12
 100fa60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	D_ASSERT(INT_IS_EVEN(g_mipi_csi_state.csi_line_size)) ;
 100fa64:	e300027e 	movw	r0, #638	; 0x27e
 100fa68:	e3083698 	movw	r3, #34456	; 0x8698
 100fa6c:	e3082d10 	movw	r2, #36112	; 0x8d10
 100fa70:	e30619f0 	movw	r1, #27120	; 0x69f0
 100fa74:	e58d0000 	str	r0, [sp]
 100fa78:	e3403106 	movt	r3, #262	; 0x106
 100fa7c:	e3a00004 	mov	r0, #4
 100fa80:	e3402106 	movt	r2, #262	; 0x106
 100fa84:	e3401106 	movt	r1, #262	; 0x106
 100fa88:	ebfff89c 	bl	100dd00 <d_printf>
 100fa8c:	e3e00062 	mvn	r0, #98	; 0x62
 100fa90:	fa002a66 	blx	101a430 <exit>
 100fa94:	0145b408 	.word	0x0145b408

0100fa98 <mipi_csi_clear_queue>:
 * Clear the queue of all working buffers, excluding any in progress.  The
 * transfer that is in progress will be removed once complete.  (The transfer
 * that is working is not on the queue.)
 */
void mipi_csi_clear_queue()
{
 100fa98:	e92d4030 	push	{r4, r5, lr}
	struct mipi_csi_stream_queue_item_t *q_item;

	// Free/dealloc all entries then delete queue
	queue_poll(g_mipi_csi_state.item_queue, (void*)&q_item);
 100fa9c:	e30a4c78 	movw	r4, #44152	; 0xac78
{
 100faa0:	e24dd00c 	sub	sp, sp, #12
	queue_poll(g_mipi_csi_state.item_queue, (void*)&q_item);
 100faa4:	e3404145 	movt	r4, #325	; 0x145
 100faa8:	e28d1004 	add	r1, sp, #4
 100faac:	e5940000 	ldr	r0, [r4]
 100fab0:	ebffdbe5 	bl	1006a4c <queue_poll>

	while(q_item != NULL) {
 100fab4:	e59d2004 	ldr	r2, [sp, #4]
 100fab8:	e3520000 	cmp	r2, #0
 100fabc:	0a00000c 	beq	100faf4 <mipi_csi_clear_queue+0x5c>
		d_printf(D_INFO, "free_clear 0x%08x", q_item);
 100fac0:	e3085d3c 	movw	r5, #36156	; 0x8d3c
 100fac4:	e3405106 	movt	r5, #262	; 0x106
 100fac8:	e1a01005 	mov	r1, r5
 100facc:	e3a00002 	mov	r0, #2
 100fad0:	ebfff88a 	bl	100dd00 <d_printf>
		free(q_item);
 100fad4:	e59d0004 	ldr	r0, [sp, #4]
 100fad8:	fa002d3a 	blx	101afc8 <free>
		queue_poll(g_mipi_csi_state.item_queue, (void*)&q_item);
 100fadc:	e28d1004 	add	r1, sp, #4
 100fae0:	e5940000 	ldr	r0, [r4]
 100fae4:	ebffdbd8 	bl	1006a4c <queue_poll>
	while(q_item != NULL) {
 100fae8:	e59d2004 	ldr	r2, [sp, #4]
 100faec:	e3520000 	cmp	r2, #0
 100faf0:	1afffff4 	bne	100fac8 <mipi_csi_clear_queue+0x30>
	}
}
 100faf4:	e28dd00c 	add	sp, sp, #12
 100faf8:	e8bd8030 	pop	{r4, r5, pc}

0100fafc <mipi_csi_unpop_and_start>:
 * If there is a task running already, this has no effect and an error state is
 * set in the flags register.
 */
void mipi_csi_unpop_and_start()
{
	if(g_mipi_csi_state.working == NULL) {
 100fafc:	e30a3c78 	movw	r3, #44152	; 0xac78
 100fb00:	e3403145 	movt	r3, #325	; 0x145
 100fb04:	e5932760 	ldr	r2, [r3, #1888]	; 0x760
 100fb08:	e3520000 	cmp	r2, #0
		g_mipi_csi_state.unpop_and_start = 1;
	} else {
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb0c:	1300175e 	movwne	r1, #1886	; 0x75e
		g_mipi_csi_state.unpop_and_start = 1;
 100fb10:	05d3275c 	ldrbeq	r2, [r3, #1884]	; 0x75c
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb14:	119320b1 	ldrhne	r2, [r3, r1]
		g_mipi_csi_state.unpop_and_start = 1;
 100fb18:	03822001 	orreq	r2, r2, #1
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb1c:	13822002 	orrne	r2, r2, #2
		g_mipi_csi_state.unpop_and_start = 1;
 100fb20:	05c3275c 	strbeq	r2, [r3, #1884]	; 0x75c
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb24:	118320b1 	strhne	r2, [r3, r1]
	}
}
 100fb28:	e12fff1e 	bx	lr

0100fb2c <mipi_csi_unpop_and_start_all>:
/*
 * Unpop ALL items from the queue and transmit them sequentially.
 */
void mipi_csi_unpop_and_start_all()
{
	if(!g_mipi_csi_state.unpop_and_start_all) {
 100fb2c:	e30a3c78 	movw	r3, #44152	; 0xac78
 100fb30:	e3403145 	movt	r3, #325	; 0x145
 100fb34:	e5d3275c 	ldrb	r2, [r3, #1884]	; 0x75c
 100fb38:	e3120002 	tst	r2, #2
		g_mipi_csi_state.unpop_and_start_all = 1;
		//d_printf(D_INFO, "unpop_and_start_all req");
	} else {
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb3c:	1300175e 	movwne	r1, #1886	; 0x75e
		g_mipi_csi_state.unpop_and_start_all = 1;
 100fb40:	03822002 	orreq	r2, r2, #2
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb44:	119320b1 	ldrhne	r2, [r3, r1]
		g_mipi_csi_state.unpop_and_start_all = 1;
 100fb48:	05c3275c 	strbeq	r2, [r3, #1884]	; 0x75c
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_TRANSFER_BUSY;
 100fb4c:	13822002 	orrne	r2, r2, #2
 100fb50:	118320b1 	strhne	r2, [r3, r1]
		//d_printf(D_INFO, "unpop_and_start_all not possible");
	}
}
 100fb54:	e12fff1e 	bx	lr

0100fb58 <mipi_csi_stop>:
	res = _FAB_CFG_ACCESS(reg);
 100fb58:	e3a02000 	mov	r2, #0
 100fb5c:	e34423c0 	movt	r2, #17344	; 0x43c0
 100fb60:	e592310c 	ldr	r3, [r2, #268]	; 0x10c
void mipi_csi_stop()
{
	int timeout = CSI_TIMEOUT_STOP;

	// If not running don't bother stopping...
	if(!fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_RUNNING)) {
 100fb64:	e3130004 	tst	r3, #4
 100fb68:	012fff1e 	bxeq	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 100fb6c:	e5920100 	ldr	r0, [r2, #256]	; 0x100
	res = _FAB_CFG_ACCESS(reg);
 100fb70:	e1a01002 	mov	r1, r2
	int timeout = CSI_TIMEOUT_STOP;
 100fb74:	e3a03ffa 	mov	r3, #1000	; 0x3e8
	_FAB_CFG_ACCESS(reg) &= ~data;
 100fb78:	e3c00017 	bic	r0, r0, #23
 100fb7c:	e5820100 	str	r0, [r2, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) |= data;
 100fb80:	e5920100 	ldr	r0, [r2, #256]	; 0x100
 100fb84:	e3800008 	orr	r0, r0, #8
 100fb88:	e5820100 	str	r0, [r2, #256]	; 0x100
 100fb8c:	ea000001 	b	100fb98 <mipi_csi_stop+0x40>

	// Send STOP and test for RUNNING - time out eventually
	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_INIT_SIGNALS);
	fabcfg_set(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP);

	while(fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_RUNNING) && timeout--) ;
 100fb90:	e2533001 	subs	r3, r3, #1
 100fb94:	3a000011 	bcc	100fbe0 <mipi_csi_stop+0x88>
	res = _FAB_CFG_ACCESS(reg);
 100fb98:	e591210c 	ldr	r2, [r1, #268]	; 0x10c
 100fb9c:	e3120004 	tst	r2, #4
 100fba0:	1afffffa 	bne	100fb90 <mipi_csi_stop+0x38>

	if(timeout == 0) {
 100fba4:	e3530000 	cmp	r3, #0
 100fba8:	e30a3c78 	movw	r3, #44152	; 0xac78
 100fbac:	e3403145 	movt	r3, #325	; 0x145
 100fbb0:	e300275e 	movw	r2, #1886	; 0x75e
 100fbb4:	e19310b2 	ldrh	r1, [r3, r2]
		g_mipi_csi_state.flags |= MCSI_FLAG_ERROR_STOP_TIMEOUT;
 100fbb8:	03811008 	orreq	r1, r1, #8
	if(timeout == 0) {
 100fbbc:	1a00000b 	bne	100fbf0 <mipi_csi_stop+0x98>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100fbc0:	e3a02000 	mov	r2, #0
 100fbc4:	e300075e 	movw	r0, #1886	; 0x75e
 100fbc8:	e34423c0 	movt	r2, #17344	; 0x43c0
 100fbcc:	e18310b0 	strh	r1, [r3, r0]
 100fbd0:	e5923100 	ldr	r3, [r2, #256]	; 0x100
 100fbd4:	e3c33008 	bic	r3, r3, #8
 100fbd8:	e5823100 	str	r3, [r2, #256]	; 0x100
	} else {
		g_mipi_csi_state.flags |= MCSI_FLAG_STOP_DONE;
	}

	fabcfg_clear(FAB_CFG_CSI_CTRL_A, CSI_CTRL_A_STOP);
}
 100fbdc:	e12fff1e 	bx	lr
 100fbe0:	e30a3c78 	movw	r3, #44152	; 0xac78
 100fbe4:	e300275e 	movw	r2, #1886	; 0x75e
 100fbe8:	e3403145 	movt	r3, #325	; 0x145
 100fbec:	e19310b2 	ldrh	r1, [r3, r2]
		g_mipi_csi_state.flags |= MCSI_FLAG_STOP_DONE;
 100fbf0:	e3811b01 	orr	r1, r1, #1024	; 0x400
 100fbf4:	eafffff1 	b	100fbc0 <mipi_csi_stop+0x68>

0100fbf8 <mipi_csi_get_status>:

/*
 * Return a status report.
 */
void mipi_csi_get_status(struct mipi_csi_status_t *status)
{
 100fbf8:	e92d4070 	push	{r4, r5, r6, lr}
 100fbfc:	e1a05000 	mov	r5, r0
	uint32_t stat_a_reg;

	GLOBAL_IRQ_DISABLE();
 100fc00:	f10c0080 	cpsid	i

	status->flags = g_mipi_csi_state.flags;
 100fc04:	e30a4c78 	movw	r4, #44152	; 0xac78
 100fc08:	e300375e 	movw	r3, #1886	; 0x75e
 100fc0c:	e3404145 	movt	r4, #325	; 0x145
 100fc10:	e19420b3 	ldrh	r2, [r4, r3]
	status->data_rem = g_mipi_csi_state.transfer_rem;
 100fc14:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
	status->queue_size = queue_size(g_mipi_csi_state.item_queue);
 100fc18:	e5940000 	ldr	r0, [r4]
	status->flags = g_mipi_csi_state.flags;
 100fc1c:	e1c520b0 	strh	r2, [r5]
	status->data_rem = g_mipi_csi_state.transfer_rem;
 100fc20:	e5853002 	str	r3, [r5, #2]
	status->queue_size = queue_size(g_mipi_csi_state.item_queue);
 100fc24:	ebffdb8c 	bl	1006a5c <queue_size>
	res = _FAB_CFG_ACCESS(reg);
 100fc28:	e3a03000 	mov	r3, #0
 100fc2c:	e1c500b6 	strh	r0, [r5, #6]
 100fc30:	e34433c0 	movt	r3, #17344	; 0x43c0
 100fc34:	e593310c 	ldr	r3, [r3, #268]	; 0x10c

	stat_a_reg = fabcfg_read(FAB_CFG_CSI_STATUS_A);

	if(stat_a_reg & CSI_STATUS_A_DONE)
 100fc38:	e3130001 	tst	r3, #1
		status->flags |= MCSI_FLAG_SPECIAL_HW_DSTATE;
 100fc3c:	11d520b0 	ldrhne	r2, [r5]
 100fc40:	13822901 	orrne	r2, r2, #16384	; 0x4000
 100fc44:	11c520b0 	strhne	r2, [r5]

	if(stat_a_reg & CSI_STATUS_A_RUNNING)
 100fc48:	e3130004 	tst	r3, #4
		status->flags |= MCSI_FLAG_SPECIAL_HW_RSTATE;
 100fc4c:	11d530b0 	ldrhne	r3, [r5]

	g_mipi_csi_state.flags &= ~MCSI_FLAG_ERROR_MASK;
 100fc50:	e300275e 	movw	r2, #1886	; 0x75e
		status->flags |= MCSI_FLAG_SPECIAL_HW_RSTATE;
 100fc54:	11e03883 	mvnne	r3, r3, lsl #17
 100fc58:	11e038a3 	mvnne	r3, r3, lsr #17
 100fc5c:	11c530b0 	strhne	r3, [r5]
	g_mipi_csi_state.flags &= ~MCSI_FLAG_ERROR_MASK;
 100fc60:	e19430b2 	ldrh	r3, [r4, r2]
 100fc64:	e3c3300e 	bic	r3, r3, #14
 100fc68:	e18430b2 	strh	r3, [r4, r2]

	GLOBAL_IRQ_ENABLE();
 100fc6c:	f1080080 	cpsie	i
}
 100fc70:	e8bd8070 	pop	{r4, r5, r6, pc}

0100fc74 <mipi_csi_get_size_report>:

/*
 * Return a size report.
 */
void mipi_csi_get_size_report(struct mipi_tx_size_resp_t *status)
{
 100fc74:	e92d4070 	push	{r4, r5, r6, lr}
 100fc78:	e1a06000 	mov	r6, r0
	GLOBAL_IRQ_DISABLE();
 100fc7c:	f10c0080 	cpsid	i
 100fc80:	e30952e0 	movw	r5, #37600	; 0x92e0

	status->all_waves_size = acq_get_nwaves_done() * acq_get_wave_size_bytes(ACQ_REGION_ALL);
 100fc84:	e3a00003 	mov	r0, #3
 100fc88:	e3405145 	movt	r5, #325	; 0x145
 100fc8c:	e595477c 	ldr	r4, [r5, #1916]	; 0x77c
 100fc90:	ebfff44b 	bl	100cdc4 <acq_get_wave_size_bytes>
	status->trigger_data_size = acq_get_nwaves_done() * sizeof(struct acq_trigger_data_resp_t);
 100fc94:	e595377c 	ldr	r3, [r5, #1916]	; 0x77c
	status->all_waves_size = acq_get_nwaves_done() * acq_get_wave_size_bytes(ACQ_REGION_ALL);
 100fc98:	e0040094 	mul	r4, r4, r0
	status->trigger_data_size = acq_get_nwaves_done() * sizeof(struct acq_trigger_data_resp_t);
 100fc9c:	e1a03183 	lsl	r3, r3, #3
	status->all_waves_size = acq_get_nwaves_done() * acq_get_wave_size_bytes(ACQ_REGION_ALL);
 100fca0:	e5864000 	str	r4, [r6]
	status->trigger_data_size = acq_get_nwaves_done() * sizeof(struct acq_trigger_data_resp_t);
 100fca4:	e5863004 	str	r3, [r6, #4]

	// 1 bit per sample, calculate sample size.  May need to be corrected for multi channel modes.
	status->bitpack_size = status->all_waves_size / acq_get_wave_bit_packed_depth();
 100fca8:	ebfff45d 	bl	100ce24 <acq_get_wave_bit_packed_depth>
 100fcac:	e1a01000 	mov	r1, r0
 100fcb0:	e1a00004 	mov	r0, r4
 100fcb4:	fa002693 	blx	1019708 <__udivsi3>
 100fcb8:	e5860008 	str	r0, [r6, #8]

	GLOBAL_IRQ_ENABLE();
 100fcbc:	f1080080 	cpsie	i
}
 100fcc0:	e8bd8070 	pop	{r4, r5, r6, pc}

0100fcc4 <mipi_csi_process_queue_item>:
/*
 * Process an enqueued item and generate the required AXIDMA operations for it
 * to happen.
 */
void mipi_csi_process_queue_item(struct mipi_csi_stream_queue_item_t *q_item)
{
 100fcc4:	e92d4030 	push	{r4, r5, lr}
	uint32_t status;
	int i, send_packet = 0;
	D_ASSERT(q_item != NULL);
 100fcc8:	e2504000 	subs	r4, r0, #0
{
 100fccc:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(q_item != NULL);
 100fcd0:	0a000047 	beq	100fdf4 <mipi_csi_process_queue_item+0x130>
	g_mipi_csi_state.working = q_item;

	//d_printf(D_INFO, "q_item=%08x, item_type=%d, q_size=%d", q_item, q_item->item_type, queue_size(g_mipi_csi_state.item_queue));

	switch(q_item->item_type) {
 100fcd4:	e5943000 	ldr	r3, [r4]
	g_mipi_csi_state.working = q_item;
 100fcd8:	e30a5c78 	movw	r5, #44152	; 0xac78
 100fcdc:	e3405145 	movt	r5, #325	; 0x145
 100fce0:	e5854760 	str	r4, [r5, #1888]	; 0x760
	switch(q_item->item_type) {
 100fce4:	e3530002 	cmp	r3, #2
 100fce8:	0a00002e 	beq	100fda8 <mipi_csi_process_queue_item+0xe4>
 100fcec:	e3530003 	cmp	r3, #3
 100fcf0:	0a000001 	beq	100fcfc <mipi_csi_process_queue_item+0x38>
		GLOBAL_IRQ_DISABLE();
		g_mipi_csi_state.flags |= MCSI_FLAG_TRANSFER_RUNNING;
		g_mipi_csi_state.flags &= ~MCSI_FLAG_STOP_DONE;
		GLOBAL_IRQ_ENABLE();
	}
}
 100fcf4:	e28dd00c 	add	sp, sp, #12
 100fcf8:	e8bd8030 	pop	{r4, r5, pc}
			if(q_item->start_addr == CSISTRM_WAVE_ALL && q_item->end_addr == CSISTRM_WAVE_ALL) {
 100fcfc:	e1c400dc 	ldrd	r0, [r4, #12]
 100fd00:	e0013000 	and	r3, r1, r0
 100fd04:	e3730001 	cmn	r3, #1
 100fd08:	0a00002d 	beq	100fdc4 <mipi_csi_process_queue_item+0x100>
				if(mipi_csi_generate_sg_list_for_waves(q_item->start_addr, q_item->end_addr, q_item) == CSIRES_OK) {
 100fd0c:	e1a02004 	mov	r2, r4
 100fd10:	ebfffd42 	bl	100f220 <mipi_csi_generate_sg_list_for_waves>
 100fd14:	e3500000 	cmp	r0, #0
 100fd18:	1afffff5 	bne	100fcf4 <mipi_csi_process_queue_item+0x30>
		D_ASSERT(q_item->calculated_size > 0);
 100fd1c:	e5943014 	ldr	r3, [r4, #20]
 100fd20:	e3530000 	cmp	r3, #0
 100fd24:	0a00003e 	beq	100fe24 <mipi_csi_process_queue_item+0x160>
		D_ASSERT(q_item->ring != NULL);
 100fd28:	e5941018 	ldr	r1, [r4, #24]
		g_mipi_csi_state.state = MCSI_ST_WAIT_FOR_XFER;
 100fd2c:	e3a02001 	mov	r2, #1
		g_mipi_csi_state.transfer_size = q_item->calculated_size;
 100fd30:	e5853764 	str	r3, [r5, #1892]	; 0x764
		g_mipi_csi_state.transfer_rem = q_item->calculated_size;
 100fd34:	e5853768 	str	r3, [r5, #1896]	; 0x768
		D_ASSERT(q_item->ring != NULL);
 100fd38:	e3510000 	cmp	r1, #0
		g_mipi_csi_state.state = MCSI_ST_WAIT_FOR_XFER;
 100fd3c:	e5852758 	str	r2, [r5, #1880]	; 0x758
		D_ASSERT(q_item->ring != NULL);
 100fd40:	0a00003f 	beq	100fe44 <mipi_csi_process_queue_item+0x180>
		d_start_timing(TMR_MIPI_PERFORMANCE);
 100fd44:	e3a000f0 	mov	r0, #240	; 0xf0
 100fd48:	ebfff9c4 	bl	100e460 <d_start_timing>
	outbyte('R');
 100fd4c:	e3a00052 	mov	r0, #82	; 0x52
 100fd50:	eb0020fb 	bl	1018144 <outbyte>
	_FAB_CFG_ACCESS(reg) |= data;
 100fd54:	e3a03000 	mov	r3, #0
		XAxiDma_BdRingStart(q_item->ring);
 100fd58:	e5940018 	ldr	r0, [r4, #24]
 100fd5c:	e34433c0 	movt	r3, #17344	; 0x43c0
 100fd60:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100fd64:	e3822040 	orr	r2, r2, #64	; 0x40
 100fd68:	e5832100 	str	r2, [r3, #256]	; 0x100
	_FAB_CFG_ACCESS(reg) &= ~data;
 100fd6c:	e5932100 	ldr	r2, [r3, #256]	; 0x100
 100fd70:	e3c22040 	bic	r2, r2, #64	; 0x40
 100fd74:	e5832100 	str	r2, [r3, #256]	; 0x100
 100fd78:	eb000dd5 	bl	10134d4 <XAxiDma_BdRingStart>
		mipi_csi_transfer_packet(q_item);
 100fd7c:	e1a00004 	mov	r0, r4
 100fd80:	ebfffeed 	bl	100f93c <mipi_csi_transfer_packet>
		GLOBAL_IRQ_DISABLE();
 100fd84:	f10c0080 	cpsid	i
		g_mipi_csi_state.flags &= ~MCSI_FLAG_STOP_DONE;
 100fd88:	e300275e 	movw	r2, #1886	; 0x75e
 100fd8c:	e19530b2 	ldrh	r3, [r5, r2]
 100fd90:	e3c33b01 	bic	r3, r3, #1024	; 0x400
 100fd94:	e3833c01 	orr	r3, r3, #256	; 0x100
 100fd98:	e18530b2 	strh	r3, [r5, r2]
		GLOBAL_IRQ_ENABLE();
 100fd9c:	f1080080 	cpsie	i
}
 100fda0:	e28dd00c 	add	sp, sp, #12
 100fda4:	e8bd8030 	pop	{r4, r5, pc}
			if(mipi_csi_generate_sg_list_for_buffer_range(q_item->start_addr, q_item->end_addr, q_item) == CSIRES_OK) {
 100fda8:	e1a02004 	mov	r2, r4
 100fdac:	e1c400dc 	ldrd	r0, [r4, #12]
 100fdb0:	ebfffc31 	bl	100ee7c <mipi_csi_generate_sg_list_for_buffer_range>
 100fdb4:	e3500000 	cmp	r0, #0
 100fdb8:	0affffd7 	beq	100fd1c <mipi_csi_process_queue_item+0x58>
}
 100fdbc:	e28dd00c 	add	sp, sp, #12
 100fdc0:	e8bd8030 	pop	{r4, r5, pc}
 100fdc4:	e30932e0 	movw	r3, #37600	; 0x92e0
 100fdc8:	e3403145 	movt	r3, #325	; 0x145
 100fdcc:	e593177c 	ldr	r1, [r3, #1916]	; 0x77c
				if(acq_get_nwaves_done() > 0) {
 100fdd0:	e3510000 	cmp	r1, #0
 100fdd4:	daffffc6 	ble	100fcf4 <mipi_csi_process_queue_item+0x30>
					if(mipi_csi_generate_sg_list_for_waves(0, acq_get_nwaves_done() - 1, q_item) == CSIRES_OK) {
 100fdd8:	e2411001 	sub	r1, r1, #1
 100fddc:	e1a02004 	mov	r2, r4
 100fde0:	e3a00000 	mov	r0, #0
 100fde4:	ebfffd0d 	bl	100f220 <mipi_csi_generate_sg_list_for_waves>
 100fde8:	e3500000 	cmp	r0, #0
 100fdec:	0affffca 	beq	100fd1c <mipi_csi_process_queue_item+0x58>
 100fdf0:	eaffffbf 	b	100fcf4 <mipi_csi_process_queue_item+0x30>
	D_ASSERT(q_item != NULL);
 100fdf4:	e3083698 	movw	r3, #34456	; 0x8698
 100fdf8:	e3082d50 	movw	r2, #36176	; 0x8d50
 100fdfc:	e30619f0 	movw	r1, #27120	; 0x69f0
 100fe00:	e3403106 	movt	r3, #262	; 0x106
 100fe04:	e3402106 	movt	r2, #262	; 0x106
 100fe08:	e3a00e31 	mov	r0, #784	; 0x310
 100fe0c:	e58d0000 	str	r0, [sp]
		D_ASSERT(q_item->calculated_size > 0);
 100fe10:	e3a00004 	mov	r0, #4
 100fe14:	e3401106 	movt	r1, #262	; 0x106
 100fe18:	ebfff7b8 	bl	100dd00 <d_printf>
 100fe1c:	e3e00062 	mvn	r0, #98	; 0x62
 100fe20:	fa002982 	blx	101a430 <exit>
 100fe24:	e300032e 	movw	r0, #814	; 0x32e
 100fe28:	e3083698 	movw	r3, #34456	; 0x8698
 100fe2c:	e3082d60 	movw	r2, #36192	; 0x8d60
 100fe30:	e30619f0 	movw	r1, #27120	; 0x69f0
 100fe34:	e58d0000 	str	r0, [sp]
 100fe38:	e3403106 	movt	r3, #262	; 0x106
 100fe3c:	e3402106 	movt	r2, #262	; 0x106
 100fe40:	eafffff2 	b	100fe10 <mipi_csi_process_queue_item+0x14c>
		D_ASSERT(q_item->ring != NULL);
 100fe44:	e3000335 	movw	r0, #821	; 0x335
 100fe48:	e3083698 	movw	r3, #34456	; 0x8698
 100fe4c:	e3082d7c 	movw	r2, #36220	; 0x8d7c
 100fe50:	e30619f0 	movw	r1, #27120	; 0x69f0
 100fe54:	e58d0000 	str	r0, [sp]
 100fe58:	e3403106 	movt	r3, #262	; 0x106
 100fe5c:	e3402106 	movt	r2, #262	; 0x106
 100fe60:	eaffffea 	b	100fe10 <mipi_csi_process_queue_item+0x14c>

0100fe64 <mipi_csi_tick>:
/*
 * Tick controller.  Should be run frequently to allow the controller to process all
 * queued requests promptly.
 */
void mipi_csi_tick()
{
 100fe64:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
			fabcfg_read(FAB_CFG_CSI_CTRL_C),
			fabcfg_read(FAB_CFG_CSI_STATUS_A),
			g_mipi_csi_state.csi_data_type);
	*/

	switch(g_mipi_csi_state.state) {
 100fe68:	e30a4c78 	movw	r4, #44152	; 0xac78
 100fe6c:	e3404145 	movt	r4, #325	; 0x145
{
 100fe70:	e24dd014 	sub	sp, sp, #20
	switch(g_mipi_csi_state.state) {
 100fe74:	e5943758 	ldr	r3, [r4, #1880]	; 0x758
 100fe78:	e3530000 	cmp	r3, #0
 100fe7c:	0a00000e 	beq	100febc <mipi_csi_tick+0x58>
 100fe80:	e3530001 	cmp	r3, #1
 100fe84:	1a00000a 	bne	100feb4 <mipi_csi_tick+0x50>
	res = _FAB_CFG_ACCESS(reg);
 100fe88:	e3a03000 	mov	r3, #0
 100fe8c:	e34433c0 	movt	r3, #17344	; 0x43c0
 100fe90:	e593310c 	ldr	r3, [r3, #268]	; 0x10c
			 * Check if the MIPI controller is done with our last transfer.  If it's not, then
			 * we don't do anything here.
			 */
			//d_printf(D_INFO, "rem=%d status=0x%08x", g_mipi_csi_state.transfer_rem, fabcfg_read(FAB_CFG_CSI_STATUS_A));

			if(fabcfg_test(FAB_CFG_CSI_STATUS_A, CSI_STATUS_A_DONE)) {
 100fe94:	e3130001 	tst	r3, #1
 100fe98:	0a000005 	beq	100feb4 <mipi_csi_tick+0x50>
				// Do we have any more data left?
				if(g_mipi_csi_state.transfer_rem > 0) {
 100fe9c:	e5945768 	ldr	r5, [r4, #1896]	; 0x768
 100fea0:	e3550000 	cmp	r5, #0
 100fea4:	0a000015 	beq	100ff00 <mipi_csi_tick+0x9c>
					// Data remains.  Process that data. (Frame ends, then we start a new frame immediately.)
					mipi_csi_send_eof();
 100fea8:	ebfffe7c 	bl	100f8a0 <mipi_csi_send_eof>
					mipi_csi_transfer_packet(g_mipi_csi_state.working);
 100feac:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
 100feb0:	ebfffea1 	bl	100f93c <mipi_csi_transfer_packet>
						XAxiDma_ReadReg(g_mipi_csi_state.mipi_dma.RegBase, XAXIDMA_SGCTL_OFFSET));
				*/
			}
			break;
	}
}
 100feb4:	e28dd014 	add	sp, sp, #20
 100feb8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
			if(g_mipi_csi_state.unpop_and_start || g_mipi_csi_state.unpop_and_start_all) {
 100febc:	e5d4275c 	ldrb	r2, [r4, #1884]	; 0x75c
 100fec0:	e3120003 	tst	r2, #3
 100fec4:	0afffffa 	beq	100feb4 <mipi_csi_tick+0x50>
				g_mipi_csi_state.unpop_and_start = 0;
 100fec8:	e7c02013 	bfi	r2, r3, #0, #1
				if(queue_size(g_mipi_csi_state.item_queue) > 0) {
 100fecc:	e5940000 	ldr	r0, [r4]
				g_mipi_csi_state.unpop_and_start = 0;
 100fed0:	e5c4275c 	strb	r2, [r4, #1884]	; 0x75c
				if(queue_size(g_mipi_csi_state.item_queue) > 0) {
 100fed4:	ebffdae0 	bl	1006a5c <queue_size>
 100fed8:	e3500000 	cmp	r0, #0
 100fedc:	1a00002c 	bne	100ff94 <mipi_csi_tick+0x130>
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 100fee0:	e300275e 	movw	r2, #1886	; 0x75e
					g_mipi_csi_state.unpop_and_start_all = 0;
 100fee4:	e5d4175c 	ldrb	r1, [r4, #1884]	; 0x75c
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 100fee8:	e19430b2 	ldrh	r3, [r4, r2]
					g_mipi_csi_state.unpop_and_start_all = 0;
 100feec:	e7c11090 	bfi	r1, r0, #1, #1
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 100fef0:	e3833c02 	orr	r3, r3, #512	; 0x200
					g_mipi_csi_state.unpop_and_start_all = 0;
 100fef4:	e5c4175c 	strb	r1, [r4, #1884]	; 0x75c
					g_mipi_csi_state.flags |= MCSI_FLAG_QUEUE_EMPTY;
 100fef8:	e18430b2 	strh	r3, [r4, r2]
					g_mipi_csi_state.unpop_and_start_all = 0;
 100fefc:	eaffffec 	b	100feb4 <mipi_csi_tick+0x50>
					d_stop_timing(TMR_MIPI_PERFORMANCE);
 100ff00:	e3a000f0 	mov	r0, #240	; 0xf0
 100ff04:	ebfff971 	bl	100e4d0 <d_stop_timing>
					g_mipi_csi_state.stats.last_transfer_time_us = d_read_timing_us(TMR_MIPI_PERFORMANCE);
 100ff08:	e3a000f0 	mov	r0, #240	; 0xf0
 100ff0c:	ebfff9aa 	bl	100e5bc <d_read_timing_us>
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff10:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff14:	e2841e7a 	add	r1, r4, #1952	; 0x7a0
 100ff18:	eefd7ac0 	vcvt.s32.f32	s15, s0
 100ff1c:	e1c160d0 	ldrd	r6, [r1]
					g_mipi_csi_state.stats.last_transfer_time_us = d_read_timing_us(TMR_MIPI_PERFORMANCE);
 100ff20:	ed010a02 	vstr	s0, [r1, #-8]
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff24:	ee17ca90 	vmov	ip, s15
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff28:	ee073a90 	vmov	s15, r3
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff2c:	e096800c 	adds	r8, r6, ip
 100ff30:	e0a79fcc 	adc	r9, r7, ip, asr #31
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff34:	eef87a67 	vcvt.f32.u32	s15, s15
					g_mipi_csi_state.stats.total_transfer_time_us += (int)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff38:	e1c180f0 	strd	r8, [r1]
					g_mipi_csi_state.stats.last_transfer_perf_mbs = g_mipi_csi_state.transfer_size / (float)g_mipi_csi_state.stats.last_transfer_time_us;
 100ff3c:	ee877a80 	vdiv.f32	s14, s15, s0
 100ff40:	ed017a01 	vstr	s14, [r1, #-4]
					mipi_csi_send_eof();
 100ff44:	ebfffe55 	bl	100f8a0 <mipi_csi_send_eof>
					mipi_csi_free_item(g_mipi_csi_state.working);
 100ff48:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
	D_ASSERT(item != NULL);
 100ff4c:	e3500000 	cmp	r0, #0
 100ff50:	0a000015 	beq	100ffac <mipi_csi_tick+0x148>
	free(item);
 100ff54:	fa002c1b 	blx	101afc8 <free>
					D_ASSERT(g_mipi_csi_state.bd_area != NULL);
 100ff58:	e59407b0 	ldr	r0, [r4, #1968]	; 0x7b0
	g_mipi_csi_state.stats.items_freed++;
 100ff5c:	e5943780 	ldr	r3, [r4, #1920]	; 0x780
					D_ASSERT(g_mipi_csi_state.bd_area != NULL);
 100ff60:	e3500000 	cmp	r0, #0
	g_mipi_csi_state.stats.items_freed++;
 100ff64:	e2833001 	add	r3, r3, #1
 100ff68:	e5843780 	str	r3, [r4, #1920]	; 0x780
					D_ASSERT(g_mipi_csi_state.bd_area != NULL);
 100ff6c:	0a00001a 	beq	100ffdc <mipi_csi_tick+0x178>
					free(g_mipi_csi_state.bd_area);
 100ff70:	fa002c14 	blx	101afc8 <free>
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 100ff74:	e300275e 	movw	r2, #1886	; 0x75e
					g_mipi_csi_state.bd_area = NULL;
 100ff78:	e58457b0 	str	r5, [r4, #1968]	; 0x7b0
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 100ff7c:	e19430b2 	ldrh	r3, [r4, r2]
					g_mipi_csi_state.working = NULL;
 100ff80:	e5845760 	str	r5, [r4, #1888]	; 0x760
					g_mipi_csi_state.state = MCSI_ST_IDLE;
 100ff84:	e5845758 	str	r5, [r4, #1880]	; 0x758
					g_mipi_csi_state.flags &= ~MCSI_FLAG_TRANSFER_RUNNING;
 100ff88:	e3c33c01 	bic	r3, r3, #256	; 0x100
 100ff8c:	e18430b2 	strh	r3, [r4, r2]
}
 100ff90:	eaffffc7 	b	100feb4 <mipi_csi_tick+0x50>
					queue_poll(g_mipi_csi_state.item_queue, (void *)&q_item);
 100ff94:	e5940000 	ldr	r0, [r4]
 100ff98:	e28d100c 	add	r1, sp, #12
 100ff9c:	ebffdaaa 	bl	1006a4c <queue_poll>
					mipi_csi_process_queue_item(q_item);
 100ffa0:	e59d000c 	ldr	r0, [sp, #12]
 100ffa4:	ebffff46 	bl	100fcc4 <mipi_csi_process_queue_item>
 100ffa8:	eaffffc1 	b	100feb4 <mipi_csi_tick+0x50>
	D_ASSERT(item != NULL);
 100ffac:	e3083698 	movw	r3, #34456	; 0x8698
 100ffb0:	e3082860 	movw	r2, #34912	; 0x8860
 100ffb4:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ffb8:	e3403106 	movt	r3, #262	; 0x106
 100ffbc:	e3402106 	movt	r2, #262	; 0x106
 100ffc0:	e3a00099 	mov	r0, #153	; 0x99
 100ffc4:	e58d0000 	str	r0, [sp]
					D_ASSERT(g_mipi_csi_state.bd_area != NULL);
 100ffc8:	e3a00004 	mov	r0, #4
 100ffcc:	e3401106 	movt	r1, #262	; 0x106
 100ffd0:	ebfff74a 	bl	100dd00 <d_printf>
 100ffd4:	e3e00062 	mvn	r0, #98	; 0x62
 100ffd8:	fa002914 	blx	101a430 <exit>
 100ffdc:	e30003c9 	movw	r0, #969	; 0x3c9
 100ffe0:	e3083698 	movw	r3, #34456	; 0x8698
 100ffe4:	e3082d94 	movw	r2, #36244	; 0x8d94
 100ffe8:	e30619f0 	movw	r1, #27120	; 0x69f0
 100ffec:	e58d0000 	str	r0, [sp]
 100fff0:	e3403106 	movt	r3, #262	; 0x106
 100fff4:	e3402106 	movt	r2, #262	; 0x106
 100fff8:	eafffff2 	b	100ffc8 <mipi_csi_tick+0x164>

0100fffc <enable_caches>:
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
    Xil_DCacheEnable();
#endif
#endif
}
 100fffc:	e12fff1e 	bx	lr

01010000 <disable_caches>:
 1010000:	e12fff1e 	bx	lr

01010004 <init_uart>:
 1010004:	e12fff1e 	bx	lr

01010008 <init_platform>:
 1010008:	e12fff1e 	bx	lr

0101000c <cleanup_platform>:
 101000c:	e12fff1e 	bx	lr

01010010 <spi_isr_handler>:
/*
 * ISR context handler for SPI.  We do not use the XSpiPs interrupt
 * handler.
 */
void spi_isr_handler(void *unused)
{
 1010010:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1010014:	e3034340 	movw	r4, #13120	; 0x3340
 1010018:	e3404146 	movt	r4, #326	; 0x146
 101001c:	e2845e16 	add	r5, r4, #352	; 0x160
					g_spi_state.cmd_state = SPI_STATE_CHECKSUM;
				}
				break;

			case SPI_STATE_CHECKSUM:
				g_spi_state.stats.num_bytes_rx_valid++;
 1010020:	e2846e17 	add	r6, r4, #368	; 0x170
						g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
					} else {
						spi_command_mark_slot_occupied(slot_idx);
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
						slot->cmd = g_spi_state.cmd_id;
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 1010024:	e2848009 	add	r8, r4, #9
							g_spi_state.stats.num_command_lost_full_deque++;
							g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
							d_printf(D_ERROR, "spi: out of space for SPI commands");
						} else {
							g_spi_state.commands_queued++;
							g_spi_state.stats.num_command_accepted++;
 1010028:	e2847e19 	add	r7, r4, #400	; 0x190
 * Receive a byte via the SPI port (without checking if it is available.)  May return
 * stale data if overrun occurs.
 */
inline uint8_t spi_receive_no_wait()
{
	return XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_RXD_OFFSET);
 101002c:	e594e158 	ldr	lr, [r4, #344]	; 0x158
		g_spi_state.stats.num_bytes_rxtx++;
 1010030:	e5953000 	ldr	r3, [r5]
 1010034:	e5951004 	ldr	r1, [r5, #4]
 1010038:	e59ec004 	ldr	ip, [lr, #4]
		switch(g_spi_state.cmd_state) {
 101003c:	e5942004 	ldr	r2, [r4, #4]
		g_spi_state.stats.num_bytes_rxtx++;
 1010040:	e2933001 	adds	r3, r3, #1
 1010044:	e2a11000 	adc	r1, r1, #0
 1010048:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 101004c:	e59c0020 	ldr	r0, [ip, #32]
		switch(g_spi_state.cmd_state) {
 1010050:	e2423001 	sub	r3, r2, #1
		g_spi_state.stats.num_bytes_rxtx++;
 1010054:	e5851004 	str	r1, [r5, #4]
 1010058:	e6ef0070 	uxtb	r0, r0
		switch(g_spi_state.cmd_state) {
 101005c:	e3530003 	cmp	r3, #3
 1010060:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1010064:	ea000008 	b	101008c <spi_isr_handler+0x7c>
 1010068:	01010120 	.word	0x01010120
 101006c:	0101015c 	.word	0x0101015c
 1010070:	010100c4 	.word	0x010100c4
 1010074:	01010078 	.word	0x01010078
					// Acknowledge the response, then process another command
					g_spi_state.resp_done = 0;
					g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
				}
				*/
				g_spi_state.resp_done = 0;
 1010078:	e5d43000 	ldrb	r3, [r4]
				g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101007c:	e3a02001 	mov	r2, #1
 1010080:	e5842004 	str	r2, [r4, #4]
				g_spi_state.resp_done = 0;
 1010084:	e7c1309f 	bfc	r3, #1, #1
 1010088:	e5c43000 	strb	r3, [r4]
 101008c:	e59c3004 	ldr	r3, [ip, #4]
inline uint32_t spi_read_sr_errata()
{
	uint32_t x, y;

	x = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
	asm("nop");
 1010090:	e320f000 	nop	{0}
	y = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
 1010094:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1010098:	e5933004 	ldr	r3, [r3, #4]
 101009c:	e5933004 	ldr	r3, [r3, #4]
	asm("nop");
 10100a0:	e320f000 	nop	{0}
				break;
		}

		// Clear NEMPTY bit & TXUF
		//REG_SET_BIT(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_RXNEMPTY_MASK | XSPIPS_IXR_TXUF_MASK);
	} while(spi_read_sr_errata() & XSPIPS_IXR_RXNEMPTY_MASK) ;
 10100a4:	e3130010 	tst	r3, #16
 10100a8:	1affffdf 	bne	101002c <spi_isr_handler+0x1c>

	// Clear other ISR bits
	REG_SET_BIT(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_WR_TO_CLR_MASK);
 10100ac:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 10100b0:	e5932004 	ldr	r2, [r3, #4]
 10100b4:	e5923004 	ldr	r3, [r2, #4]
 10100b8:	e3833043 	orr	r3, r3, #67	; 0x43
	*LocalAddr = Value;
 10100bc:	e5823004 	str	r3, [r2, #4]

}
 10100c0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				g_spi_state.stats.num_bytes_rx_valid++;
 10100c4:	e5962000 	ldr	r2, [r6]
 10100c8:	e5961004 	ldr	r1, [r6, #4]
	unsigned int i;
	int bit;

	for(i = 0; i < SPI_QUEUE_ALLOC_BITMASK_SIZE; i++) {
		// Find first set bit by using __builtin_ffs
		free_mask = g_spi_state.cmd_free_bitmask[i];
 10100cc:	e59431c8 	ldr	r3, [r4, #456]	; 0x1c8
				g_spi_state.stats.num_bytes_rx_valid++;
 10100d0:	e2922001 	adds	r2, r2, #1
 10100d4:	e2a11000 	adc	r1, r1, #0
 10100d8:	e5862000 	str	r2, [r6]

		// Can this we done without a branch?
		if(free_mask != 0x00000000) {
 10100dc:	e3530000 	cmp	r3, #0
				g_spi_state.stats.num_bytes_rx_valid++;
 10100e0:	e5861004 	str	r1, [r6, #4]
		if(free_mask != 0x00000000) {
 10100e4:	1a000063 	bne	1010278 <spi_isr_handler+0x268>
		free_mask = g_spi_state.cmd_free_bitmask[i];
 10100e8:	e59431cc 	ldr	r3, [r4, #460]	; 0x1cc
		if(free_mask != 0x00000000) {
 10100ec:	e3530000 	cmp	r3, #0
 10100f0:	13a02020 	movne	r2, #32
 10100f4:	1a000060 	bne	101027c <spi_isr_handler+0x26c>
						g_spi_state.stats.num_command_lost_full_alloc++;
 10100f8:	e59f22b0 	ldr	r2, [pc, #688]	; 10103b0 <spi_isr_handler+0x3a0>
						g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 10100fc:	e3a03001 	mov	r3, #1
 1010100:	e5843004 	str	r3, [r4, #4]
						g_spi_state.stats.num_command_lost_full_alloc++;
 1010104:	e5923000 	ldr	r3, [r2]
 1010108:	e5921004 	ldr	r1, [r2, #4]
 101010c:	e2933001 	adds	r3, r3, #1
 1010110:	e2a11000 	adc	r1, r1, #0
 1010114:	e5823000 	str	r3, [r2]
 1010118:	e5821004 	str	r1, [r2, #4]
						g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101011c:	eaffffda 	b	101008c <spi_isr_handler+0x7c>
				if(byte_rx == 0x00) {
 1010120:	e3500000 	cmp	r0, #0
 1010124:	1a000047 	bne	1010248 <spi_isr_handler+0x238>
					g_spi_state.stats.num_command_nop++;
 1010128:	e59f1284 	ldr	r1, [pc, #644]	; 10103b4 <spi_isr_handler+0x3a4>
					g_spi_state.stats.num_bytes_rx_valid++;
 101012c:	e8964004 	ldm	r6, {r2, lr}
					g_spi_state.stats.num_command_nop++;
 1010130:	e5913000 	ldr	r3, [r1]
 1010134:	e5910004 	ldr	r0, [r1, #4]
					g_spi_state.stats.num_bytes_rx_valid++;
 1010138:	e2922001 	adds	r2, r2, #1
 101013c:	e2aee000 	adc	lr, lr, #0
 1010140:	e5862000 	str	r2, [r6]
					g_spi_state.stats.num_command_nop++;
 1010144:	e2933001 	adds	r3, r3, #1
					g_spi_state.stats.num_bytes_rx_valid++;
 1010148:	e586e004 	str	lr, [r6, #4]
					g_spi_state.stats.num_command_nop++;
 101014c:	e2a02000 	adc	r2, r0, #0
 1010150:	e5813000 	str	r3, [r1]
 1010154:	e5812004 	str	r2, [r1, #4]
 1010158:	eaffffcb 	b	101008c <spi_isr_handler+0x7c>
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 101015c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
				g_spi_state.stats.num_bytes_rx_valid++;
 1010160:	e5961000 	ldr	r1, [r6]
				g_spi_state.cmd_argpop--;
 1010164:	e594c01c 	ldr	ip, [r4, #28]
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1010168:	e0233000 	eor	r3, r3, r0
				g_spi_state.stats.num_bytes_rx_valid++;
 101016c:	e5962004 	ldr	r2, [r6, #4]
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1010170:	e0843003 	add	r3, r4, r3
				g_spi_state.stats.num_bytes_rx_valid++;
 1010174:	e2911001 	adds	r1, r1, #1
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1010178:	e5d39025 	ldrb	r9, [r3, #37]	; 0x25
				g_spi_state.cmd_argpop--;
 101017c:	e24cc001 	sub	ip, ip, #1
				g_spi_state.cmd_argdata[g_spi_state.cmd_argidx] = byte_rx;
 1010180:	e5943020 	ldr	r3, [r4, #32]
				g_spi_state.stats.num_bytes_rx_valid++;
 1010184:	e2a22000 	adc	r2, r2, #0
				if(g_spi_state.cmd_argpop == 0) {
 1010188:	e35c0000 	cmp	ip, #0
				g_spi_state.stats.num_bytes_rx_valid++;
 101018c:	e8860006 	stm	r6, {r1, r2}
				g_spi_state.crc = g_spi_state.crc_table[g_spi_state.crc ^ byte_rx];
 1010190:	e5c49024 	strb	r9, [r4, #36]	; 0x24
				g_spi_state.cmd_argdata[g_spi_state.cmd_argidx] = byte_rx;
 1010194:	e0842003 	add	r2, r4, r3
				g_spi_state.cmd_argidx++;
 1010198:	e2833001 	add	r3, r3, #1
				g_spi_state.cmd_argpop--;
 101019c:	e584c01c 	str	ip, [r4, #28]
				g_spi_state.cmd_argdata[g_spi_state.cmd_argidx] = byte_rx;
 10101a0:	e5c20009 	strb	r0, [r2, #9]
				g_spi_state.cmd_argidx++;
 10101a4:	e5843020 	str	r3, [r4, #32]
				if(g_spi_state.cmd_argpop == 0) {
 10101a8:	0a000022 	beq	1010238 <spi_isr_handler+0x228>
 10101ac:	e59ec004 	ldr	ip, [lr, #4]
 10101b0:	eaffffb5 	b	101008c <spi_isr_handler+0x7c>
						g_spi_state.stats.num_command_ok++;
 10101b4:	e59fc1f8 	ldr	ip, [pc, #504]	; 10103b4 <spi_isr_handler+0x3a4>
						g_spi_state.crc = g_spi_state.crc_table[byte_rx];
 10101b8:	e0842000 	add	r2, r4, r0
						g_spi_state.stats.num_bytes_rx_valid++;
 10101bc:	e5961000 	ldr	r1, [r6]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10101c0:	e0833280 	add	r3, r3, r0, lsl #5
						g_spi_state.crc = g_spi_state.crc_table[byte_rx];
 10101c4:	e5d2a025 	ldrb	sl, [r2, #37]	; 0x25
						g_spi_state.stats.num_bytes_rx_valid++;
 10101c8:	e5969004 	ldr	r9, [r6, #4]
 10101cc:	e2911001 	adds	r1, r1, #1
						g_spi_state.stats.num_command_ok++;
 10101d0:	e51c2008 	ldr	r2, [ip, #-8]
 10101d4:	e51cb004 	ldr	fp, [ip, #-4]
						g_spi_state.cmd_id = byte_rx;
 10101d8:	e5c40008 	strb	r0, [r4, #8]
						g_spi_state.stats.num_bytes_rx_valid++;
 10101dc:	e2a99000 	adc	r9, r9, #0
						g_spi_state.cmd_argpop = g_spi_command_lut[byte_rx].nargs;
 10101e0:	e5930014 	ldr	r0, [r3, #20]
						g_spi_state.stats.num_command_ok++;
 10101e4:	e2922001 	adds	r2, r2, #1
						g_spi_state.stats.num_bytes_rx_valid++;
 10101e8:	e5861000 	str	r1, [r6]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10101ec:	e5d41000 	ldrb	r1, [r4]
						g_spi_state.crc = g_spi_state.crc_table[byte_rx];
 10101f0:	e5c4a024 	strb	sl, [r4, #36]	; 0x24
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 10101f4:	e5d3a018 	ldrb	sl, [r3, #24]
						g_spi_state.stats.num_command_ok++;
 10101f8:	e2ab3000 	adc	r3, fp, #0
 10101fc:	e50c2008 	str	r2, [ip, #-8]
						if(g_spi_state.cmd_argpop == 0) {
 1010200:	e3500000 	cmp	r0, #0
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 1010204:	e1a02001 	mov	r2, r1
						g_spi_state.stats.num_command_ok++;
 1010208:	e50c3004 	str	r3, [ip, #-4]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 101020c:	e7c0201a 	bfi	r2, sl, #0, #1
						g_spi_state.cmd_argidx = 0;
 1010210:	e3a03000 	mov	r3, #0
						g_spi_state.cmd_argpop = g_spi_command_lut[byte_rx].nargs;
 1010214:	e584001c 	str	r0, [r4, #28]
						g_spi_state.cmd_argidx = 0;
 1010218:	e5843020 	str	r3, [r4, #32]
						g_spi_state.stats.num_bytes_rx_valid++;
 101021c:	e5869004 	str	r9, [r6, #4]
						g_spi_state.has_response = g_spi_command_lut[byte_rx].has_response;
 1010220:	e5c42000 	strb	r2, [r4]
						memset(&g_spi_state.cmd_argdata, 0, SPI_COMMAND_MAX_ARGS);
 1010224:	e5883000 	str	r3, [r8]
 1010228:	e5883004 	str	r3, [r8, #4]
 101022c:	e5883008 	str	r3, [r8, #8]
 1010230:	e588300c 	str	r3, [r8, #12]
						if(g_spi_state.cmd_argpop == 0) {
 1010234:	1a000059 	bne	10103a0 <spi_isr_handler+0x390>
					g_spi_state.cmd_state = SPI_STATE_CHECKSUM;
 1010238:	e3a03003 	mov	r3, #3
 101023c:	e59ec004 	ldr	ip, [lr, #4]
 1010240:	e5843004 	str	r3, [r4, #4]
 1010244:	eaffff90 	b	101008c <spi_isr_handler+0x7c>
					if(g_spi_command_lut[byte_rx].valid) {
 1010248:	e3033f08 	movw	r3, #16136	; 0x3f08
 101024c:	e3403146 	movt	r3, #326	; 0x146
 1010250:	e7d32280 	ldrb	r2, [r3, r0, lsl #5]
 1010254:	e3520000 	cmp	r2, #0
 1010258:	1affffd5 	bne	10101b4 <spi_isr_handler+0x1a4>
						g_spi_state.stats.num_command_errors++;
 101025c:	e5173008 	ldr	r3, [r7, #-8]
 1010260:	e5172004 	ldr	r2, [r7, #-4]
 1010264:	e2933001 	adds	r3, r3, #1
 1010268:	e2a22000 	adc	r2, r2, #0
 101026c:	e5073008 	str	r3, [r7, #-8]
 1010270:	e5072004 	str	r2, [r7, #-4]
 1010274:	eaffff84 	b	101008c <spi_isr_handler+0x7c>
		if(free_mask != 0x00000000) {
 1010278:	e3a02000 	mov	r2, #0
			bit = __builtin_ffs(free_mask);
 101027c:	e3530000 	cmp	r3, #0
 1010280:	e6ff3f33 	rbit	r3, r3
 1010284:	e16f3f13 	clz	r3, r3
 1010288:	03e03000 	mvneq	r3, #0
			return (i * 32) + bit - 1;
 101028c:	e0822003 	add	r2, r2, r3
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 1010290:	e598b000 	ldr	fp, [r8]
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 1010294:	e0823102 	add	r3, r2, r2, lsl #2
						slot->cmd = g_spi_state.cmd_id;
 1010298:	e5d4a008 	ldrb	sl, [r4, #8]
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 101029c:	e5989004 	ldr	r9, [r8, #4]
/*
 * Mark a slot as occupied in the bitmask.  Slots are occupied when their bit is zero.
 */
inline void spi_command_mark_slot_occupied(unsigned int slot)
{
	g_spi_state.cmd_free_bitmask[slot / 32] &= ~(1 << (slot % 32));
 10102a0:	e1a0c2a2 	lsr	ip, r2, #5
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 10102a4:	e1a03183 	lsl	r3, r3, #3
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 10102a8:	e598e008 	ldr	lr, [r8, #8]
 10102ac:	e598000c 	ldr	r0, [r8, #12]
 10102b0:	e28cc072 	add	ip, ip, #114	; 0x72
						slot->cmd = g_spi_state.cmd_id;
 10102b4:	e0841003 	add	r1, r4, r3
 10102b8:	e202201f 	and	r2, r2, #31
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 10102bc:	e581b1d9 	str	fp, [r1, #473]	; 0x1d9
						slot->nargs = g_spi_state.cmd_argidx;
 10102c0:	e594b020 	ldr	fp, [r4, #32]
						slot->cmd = g_spi_state.cmd_id;
 10102c4:	e5c1a1d8 	strb	sl, [r1, #472]	; 0x1d8
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 10102c8:	e281af76 	add	sl, r1, #472	; 0x1d8
 10102cc:	e58a9005 	str	r9, [sl, #5]
						slot->nargs = g_spi_state.cmd_argidx;
 10102d0:	e581b1d4 	str	fp, [r1, #468]	; 0x1d4
 10102d4:	e2831e1f 	add	r1, r3, #496	; 0x1f0
 10102d8:	e0849001 	add	r9, r4, r1
 10102dc:	e794110c 	ldr	r1, [r4, ip, lsl #2]
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 10102e0:	e58ae009 	str	lr, [sl, #9]
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 10102e4:	e283ee1d 	add	lr, r3, #464	; 0x1d0
						memcpy(slot->args, g_spi_state.cmd_argdata, SPI_COMMAND_MAX_ARGS);
 10102e8:	e58a000d 	str	r0, [sl, #13]
 10102ec:	e3a0b001 	mov	fp, #1
						slot->resp_ready = 0;
 10102f0:	e5d93004 	ldrb	r3, [r9, #4]
						slot = &g_spi_state.cmd_alloc_table[slot_idx];
 10102f4:	e084a00e 	add	sl, r4, lr
 10102f8:	e1c1221b 	bic	r2, r1, fp, lsl r2
						if(deque_add_last(g_spi_state.command_dq, slot) != CC_OK) {
 10102fc:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
 1010300:	e1a0100a 	mov	r1, sl
						slot->resp_ready = 0;
 1010304:	e3c33011 	bic	r3, r3, #17
 1010308:	e784210c 	str	r2, [r4, ip, lsl #2]
 101030c:	e3833010 	orr	r3, r3, #16
 1010310:	e5c93004 	strb	r3, [r9, #4]
						if(deque_add_last(g_spi_state.command_dq, slot) != CC_OK) {
 1010314:	ebffc6dd 	bl	1001e90 <deque_add_last>
 1010318:	e3500000 	cmp	r0, #0
 101031c:	1a000011 	bne	1010368 <spi_isr_handler+0x358>
							g_spi_state.stats.num_command_accepted++;
 1010320:	e5973000 	ldr	r3, [r7]
 1010324:	e5972004 	ldr	r2, [r7, #4]
							if(g_spi_state.has_response) {
 1010328:	e5941000 	ldr	r1, [r4]
							g_spi_state.stats.num_command_accepted++;
 101032c:	e2933001 	adds	r3, r3, #1
							g_spi_state.last_cmd = slot;
 1010330:	e584abac 	str	sl, [r4, #2988]	; 0xbac
							g_spi_state.stats.num_command_accepted++;
 1010334:	e5873000 	str	r3, [r7]
 1010338:	e2a22000 	adc	r2, r2, #0
							g_spi_state.commands_queued++;
 101033c:	e5943ba8 	ldr	r3, [r4, #2984]	; 0xba8
							if(g_spi_state.has_response) {
 1010340:	e3110001 	tst	r1, #1
							g_spi_state.stats.num_command_accepted++;
 1010344:	e5872004 	str	r2, [r7, #4]
								g_spi_state.cmd_state = SPI_STATE_RESPONSE_WAIT;
 1010348:	13a02004 	movne	r2, #4
 101034c:	15842004 	strne	r2, [r4, #4]
							g_spi_state.commands_queued++;
 1010350:	e2833001 	add	r3, r3, #1
								g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 1010354:	0584b004 	streq	fp, [r4, #4]
							g_spi_state.commands_queued++;
 1010358:	e5843ba8 	str	r3, [r4, #2984]	; 0xba8
							if(g_spi_state.has_response) {
 101035c:	e5943158 	ldr	r3, [r4, #344]	; 0x158
								g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 1010360:	e593c004 	ldr	ip, [r3, #4]
 1010364:	eaffff48 	b	101008c <spi_isr_handler+0x7c>
							g_spi_state.stats.num_command_lost_full_deque++;
 1010368:	e59f2048 	ldr	r2, [pc, #72]	; 10103b8 <spi_isr_handler+0x3a8>
							d_printf(D_ERROR, "spi: out of space for SPI commands");
 101036c:	e3081db8 	movw	r1, #36280	; 0x8db8
 1010370:	e3401106 	movt	r1, #262	; 0x106
 1010374:	e3a00004 	mov	r0, #4
							g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 1010378:	e584b004 	str	fp, [r4, #4]
							g_spi_state.stats.num_command_lost_full_deque++;
 101037c:	e5123008 	ldr	r3, [r2, #-8]
 1010380:	e512c004 	ldr	ip, [r2, #-4]
 1010384:	e2933001 	adds	r3, r3, #1
 1010388:	e2acc000 	adc	ip, ip, #0
 101038c:	e9021008 	stmdb	r2, {r3, ip}
							d_printf(D_ERROR, "spi: out of space for SPI commands");
 1010390:	ebfff65a 	bl	100dd00 <d_printf>
 1010394:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1010398:	e593c004 	ldr	ip, [r3, #4]
 101039c:	eaffff3a 	b	101008c <spi_isr_handler+0x7c>
							g_spi_state.cmd_state = SPI_STATE_ARGS;
 10103a0:	e3a03002 	mov	r3, #2
 10103a4:	e59ec004 	ldr	ip, [lr, #4]
 10103a8:	e5843004 	str	r3, [r4, #4]
 10103ac:	eaffff36 	b	101008c <spi_isr_handler+0x7c>
 10103b0:	014634e0 	.word	0x014634e0
 10103b4:	014634c0 	.word	0x014634c0
 10103b8:	014634f0 	.word	0x014634f0

010103bc <spi_init>:
{
 10103bc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_spi_state.spi_config = XSpiPs_LookupConfig(SPI_DEVICE_ID);
 10103c0:	e3a00000 	mov	r0, #0
 10103c4:	eb001c7b 	bl	10175b8 <XSpiPs_LookupConfig>
 10103c8:	e3035340 	movw	r5, #13120	; 0x3340
	if(g_spi_state.spi_config == NULL) {
 10103cc:	e3500000 	cmp	r0, #0
	g_spi_state.spi_config = XSpiPs_LookupConfig(SPI_DEVICE_ID);
 10103d0:	e3405146 	movt	r5, #326	; 0x146
 10103d4:	e5850158 	str	r0, [r5, #344]	; 0x158
	if(g_spi_state.spi_config == NULL) {
 10103d8:	0a0000fd 	beq	10107d4 <spi_init+0x418>
	error = XSpiPs_CfgInitialize(&g_spi_state.spi, g_spi_state.spi_config, g_spi_state.spi_config->BaseAddress);
 10103dc:	e5902004 	ldr	r2, [r0, #4]
 10103e0:	e1a01000 	mov	r1, r0
 10103e4:	e2850f4a 	add	r0, r5, #296	; 0x128
 10103e8:	eb001b9b 	bl	101725c <XSpiPs_CfgInitialize>
	if(error != XST_SUCCESS) {
 10103ec:	e2502000 	subs	r2, r0, #0
 10103f0:	1a0000f1 	bne	10107bc <spi_init+0x400>
	error = XSpiPs_SelfTest(&g_spi_state.spi);
 10103f4:	e2850f4a 	add	r0, r5, #296	; 0x128
 10103f8:	eb001c75 	bl	10175d4 <XSpiPs_SelfTest>
	if(error != XST_SUCCESS) {
 10103fc:	e2504000 	subs	r4, r0, #0
 1010400:	1a0000e6 	bne	10107a0 <spi_init+0x3e4>
	return *(volatile u32 *) Addr;
 1010404:	e3a0633e 	mov	r6, #-134217728	; 0xf8000000
	bogo_delay(10);
 1010408:	e3a0000a 	mov	r0, #10
 101040c:	e596321c 	ldr	r3, [r6, #540]	; 0x21c
	REG_SET_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 1010410:	e3833005 	orr	r3, r3, #5
	*LocalAddr = Value;
 1010414:	e586321c 	str	r3, [r6, #540]	; 0x21c
	bogo_delay(10);
 1010418:	ebfff61f 	bl	100dc9c <bogo_delay>
	return *(volatile u32 *) Addr;
 101041c:	e596321c 	ldr	r3, [r6, #540]	; 0x21c
	bogo_delay(10);
 1010420:	e3a0000a 	mov	r0, #10
	REG_CLR_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 1010424:	e3c33005 	bic	r3, r3, #5
	*LocalAddr = Value;
 1010428:	e586321c 	str	r3, [r6, #540]	; 0x21c
	bogo_delay(10);
 101042c:	ebfff61a 	bl	100dc9c <bogo_delay>
	XSpiPs_Reset(&g_spi_state.spi);
 1010430:	e2850f4a 	add	r0, r5, #296	; 0x128
 1010434:	eb001b67 	bl	10171d8 <XSpiPs_Reset>
	return *(volatile u32 *) Addr;
 1010438:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
	*LocalAddr = Value;
 101043c:	e3a0c002 	mov	ip, #2
 1010440:	e3a0203f 	mov	r2, #63	; 0x3f
	d_printf(D_WARN, "spi: init SpiCR state: 0x%08x", XSpiPs_ReadReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET));
 1010444:	e3081e58 	movw	r1, #36440	; 0x8e58
 1010448:	e3401106 	movt	r1, #262	; 0x106
 101044c:	e3a00003 	mov	r0, #3
	return *(volatile u32 *) Addr;
 1010450:	e59e3000 	ldr	r3, [lr]
	REG_CLR_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_MODF_GEN_EN_MASK);
 1010454:	e3c33802 	bic	r3, r3, #131072	; 0x20000
	*LocalAddr = Value;
 1010458:	e58e3000 	str	r3, [lr]
	return *(volatile u32 *) Addr;
 101045c:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
 1010460:	e59e3000 	ldr	r3, [lr]
	REG_CLR_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_MSTREN_MASK);
 1010464:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 1010468:	e58e3000 	str	r3, [lr]
	return *(volatile u32 *) Addr;
 101046c:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
 1010470:	e59e3000 	ldr	r3, [lr]
	REG_CLR_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_CPOL_MASK);
 1010474:	e3c33002 	bic	r3, r3, #2
	*LocalAddr = Value;
 1010478:	e58e3000 	str	r3, [lr]
	return *(volatile u32 *) Addr;
 101047c:	e595e12c 	ldr	lr, [r5, #300]	; 0x12c
 1010480:	e59e3000 	ldr	r3, [lr]
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET, XSPIPS_CR_CPHA_MASK);
 1010484:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 1010488:	e58e3000 	str	r3, [lr]
	XSpiPs_SetRXWatermark(&g_spi_state.spi, 2);
 101048c:	e595312c 	ldr	r3, [r5, #300]	; 0x12c
 1010490:	e583c02c 	str	ip, [r3, #44]	; 0x2c
	XSpiPs_SetTXWatermark(&g_spi_state.spi, SPI_RESPONSE_PACK_SIZE);
 1010494:	e595312c 	ldr	r3, [r5, #300]	; 0x12c
 1010498:	e5832028 	str	r2, [r3, #40]	; 0x28
	return *(volatile u32 *) Addr;
 101049c:	e595312c 	ldr	r3, [r5, #300]	; 0x12c
 10104a0:	e5932000 	ldr	r2, [r3]
	d_printf(D_WARN, "spi: init SpiCR state: 0x%08x", XSpiPs_ReadReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_CR_OFFSET));
 10104a4:	ebfff615 	bl	100dd00 <d_printf>
	x = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
 10104a8:	e5953158 	ldr	r3, [r5, #344]	; 0x158
 10104ac:	e5933004 	ldr	r3, [r3, #4]
 10104b0:	ea000003 	b	10104c4 <spi_init+0x108>
	return XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_RXD_OFFSET);
 10104b4:	e5953158 	ldr	r3, [r5, #344]	; 0x158
		garbage_bytes++;
 10104b8:	e2844001 	add	r4, r4, #1
 10104bc:	e5933004 	ldr	r3, [r3, #4]
 10104c0:	e5932020 	ldr	r2, [r3, #32]
 10104c4:	e5933004 	ldr	r3, [r3, #4]
	asm("nop");
 10104c8:	e320f000 	nop	{0}
	y = XSpiPs_ReadReg(g_spi_state.spi_config->BaseAddress, XSPIPS_SR_OFFSET);
 10104cc:	e5953158 	ldr	r3, [r5, #344]	; 0x158
 10104d0:	e5933004 	ldr	r3, [r3, #4]
 10104d4:	e5933004 	ldr	r3, [r3, #4]
	asm("nop");
 10104d8:	e320f000 	nop	{0}
	while(spi_read_sr_errata() & XSPIPS_IXR_RXNEMPTY_MASK) {
 10104dc:	e3130010 	tst	r3, #16
 10104e0:	1afffff3 	bne	10104b4 <spi_init+0xf8>
	d_printf(D_WARN, "spi: %d garbage RX bytes discarded", garbage_bytes);
 10104e4:	e3081e78 	movw	r1, #36472	; 0x8e78
 10104e8:	e1a02004 	mov	r2, r4
 10104ec:	e3401106 	movt	r1, #262	; 0x106
 10104f0:	e3a00003 	mov	r0, #3
 10104f4:	ebfff601 	bl	100dd00 <d_printf>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_XSPIPS_0_INTR, (Xil_ExceptionHandler)spi_isr_handler, NULL);
 10104f8:	e3002010 	movw	r2, #16
 10104fc:	e3090b80 	movw	r0, #39808	; 0x9b80
 1010500:	e3402101 	movt	r2, #257	; 0x101
 1010504:	e3400145 	movt	r0, #325	; 0x145
 1010508:	e3a03000 	mov	r3, #0
 101050c:	e3a0103a 	mov	r1, #58	; 0x3a
 1010510:	eb0015a3 	bl	1015ba4 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 1010514:	e2506000 	subs	r6, r0, #0
 1010518:	1a000099 	bne	1010784 <spi_init+0x3c8>
	d_printf(D_INFO, "spi: peripheral initialised @ 0x%08x", g_spi_state.spi_config->BaseAddress);
 101051c:	e5953158 	ldr	r3, [r5, #344]	; 0x158
	*LocalAddr = Value;
 1010520:	e3a0c001 	mov	ip, #1
	XSpiPs_Enable(&g_spi_state.spi);
 1010524:	e595212c 	ldr	r2, [r5, #300]	; 0x12c
	d_printf(D_INFO, "spi: peripheral initialised @ 0x%08x", g_spi_state.spi_config->BaseAddress);
 1010528:	e3081ec4 	movw	r1, #36548	; 0x8ec4
 101052c:	e3401106 	movt	r1, #262	; 0x106
 1010530:	e3a00002 	mov	r0, #2
 1010534:	e582c014 	str	ip, [r2, #20]
 1010538:	e5932004 	ldr	r2, [r3, #4]
 101053c:	ebfff5ef 	bl	100dd00 <d_printf>
			if((k <<= 1) & 0x100) {
 1010540:	e59f12a4 	ldr	r1, [pc, #676]	; 10107ec <spi_init+0x430>
 1010544:	e1a03006 	mov	r3, r6
	d_printf(D_INFO, "spi: peripheral initialised @ 0x%08x", g_spi_state.spi_config->BaseAddress);
 1010548:	e3a02002 	mov	r2, #2
 101054c:	e2415024 	sub	r5, r1, #36	; 0x24
 1010550:	e1a04005 	mov	r4, r5
 1010554:	e2850f49 	add	r0, r5, #292	; 0x124
 1010558:	ea000003 	b	101056c <spi_init+0x1b0>
			if((k <<= 1) & 0x100) {
 101055c:	e3120c01 	tst	r2, #256	; 0x100
 1010560:	e1a03002 	mov	r3, r2
				k ^= SPI_CRC8_POLY;
 1010564:	12223031 	eorne	r3, r2, #49	; 0x31
 1010568:	e2822002 	add	r2, r2, #2
			if((k <<= 1) & 0x100) {
 101056c:	e1a03083 	lsl	r3, r3, #1
 1010570:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010574:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010578:	e1a03083 	lsl	r3, r3, #1
 101057c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010580:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010584:	e1a03083 	lsl	r3, r3, #1
 1010588:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 101058c:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010590:	e1a03083 	lsl	r3, r3, #1
 1010594:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010598:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 101059c:	e1a03083 	lsl	r3, r3, #1
 10105a0:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 10105a4:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 10105a8:	e1a03083 	lsl	r3, r3, #1
 10105ac:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 10105b0:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 10105b4:	e1a03083 	lsl	r3, r3, #1
 10105b8:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 10105bc:	12233031 	eorne	r3, r3, #49	; 0x31
		g_spi_state.crc_table[i] = k;
 10105c0:	e5e13001 	strb	r3, [r1, #1]!
	for(i = 0; i < 256; i++) {
 10105c4:	e1500001 	cmp	r0, r1
 10105c8:	1affffe3 	bne	101055c <spi_init+0x1a0>
 10105cc:	e59f321c 	ldr	r3, [pc, #540]	; 10107f0 <spi_init+0x434>
		memset(g_spi_command_lut[i].short_name, 0, SPI_COMMAND_SHORT_NAME_MAX + 1);
 10105d0:	e3a02000 	mov	r2, #0
 10105d4:	e2831a02 	add	r1, r3, #8192	; 0x2000
 10105d8:	e5832000 	str	r2, [r3]
 10105dc:	e2833020 	add	r3, r3, #32
 10105e0:	e503201c 	str	r2, [r3, #-28]	; 0xffffffe4
 10105e4:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
 10105e8:	e5032014 	str	r2, [r3, #-20]	; 0xffffffec
		g_spi_command_lut[i].valid = 0;
 10105ec:	e5432021 	strb	r2, [r3, #-33]	; 0xffffffdf
	for(i = 0; i < SPI_COMMAND_TOTAL_COUNT; i++) {
 10105f0:	e1510003 	cmp	r1, r3
 10105f4:	1afffff7 	bne	10105d8 <spi_init+0x21c>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 10105f8:	e3057e50 	movw	r7, #24144	; 0x5e50
 10105fc:	e3407102 	movt	r7, #258	; 0x102
 1010600:	e5d78000 	ldrb	r8, [r7]
 1010604:	e35800ff 	cmp	r8, #255	; 0xff
 1010608:	0a000055 	beq	1010764 <spi_init+0x3a8>
 101060c:	e3039f08 	movw	r9, #16136	; 0x3f08
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 1010610:	e3a0a020 	mov	sl, #32
 1010614:	e3409146 	movt	r9, #326	; 0x146
 1010618:	e3a0b001 	mov	fp, #1
 101061c:	e100b88a 	smlabb	r0, sl, r8, fp
 1010620:	e5971004 	ldr	r1, [r7, #4]
 1010624:	e3a0200f 	mov	r2, #15
		added++;
 1010628:	e2866001 	add	r6, r6, #1
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 101062c:	e0890000 	add	r0, r9, r0
 1010630:	fa003289 	blx	101d05c <strncpy>
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 1010634:	e0893288 	add	r3, r9, r8, lsl #5
 1010638:	e5970008 	ldr	r0, [r7, #8]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 101063c:	e5971010 	ldr	r1, [r7, #16]
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1010640:	e5d7200c 	ldrb	r2, [r7, #12]
		g_spi_command_lut[spi_cmd->cmd_id].valid = 1;
 1010644:	e7c9b288 	strb	fp, [r9, r8, lsl #5]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1010648:	e5f78014 	ldrb	r8, [r7, #20]!
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 101064c:	e5830014 	str	r0, [r3, #20]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 1010650:	e583101c 	str	r1, [r3, #28]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1010654:	e35800ff 	cmp	r8, #255	; 0xff
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1010658:	e5c32018 	strb	r2, [r3, #24]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 101065c:	1affffee 	bne	101061c <spi_init+0x260>
 1010660:	e2663c01 	rsb	r3, r6, #256	; 0x100
	d_printf(D_INFO, "spi: %d LUT entries filled, %d free", added, SPI_COMMAND_TOTAL_COUNT - added);
 1010664:	e3081eec 	movw	r1, #36588	; 0x8eec
 1010668:	e1a02006 	mov	r2, r6
 101066c:	e3401106 	movt	r1, #262	; 0x106
 1010670:	e3a00002 	mov	r0, #2
 1010674:	ebfff5a1 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "spi: initialising deque");
 1010678:	e3081f10 	movw	r1, #36624	; 0x8f10
	g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 101067c:	e3a03001 	mov	r3, #1
	d_printf(D_INFO, "spi: initialising deque");
 1010680:	e3401106 	movt	r1, #262	; 0x106
 1010684:	e3a00002 	mov	r0, #2
	g_spi_state.cmd_state = SPI_STATE_CMD_HEADER;
 1010688:	e5853004 	str	r3, [r5, #4]
	g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 101068c:	e5853bc0 	str	r3, [r5, #3008]	; 0xbc0
	d_printf(D_INFO, "spi: initialising deque");
 1010690:	ebfff59a 	bl	100dd00 <d_printf>
	error = deque_new(&g_spi_state.command_dq);
 1010694:	e59f0158 	ldr	r0, [pc, #344]	; 10107f4 <spi_init+0x438>
 1010698:	ebffc52b 	bl	1001b4c <deque_new>
	if(error != CC_OK) {
 101069c:	e2502000 	subs	r2, r0, #0
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 10106a0:	01a03002 	moveq	r3, r2
		g_spi_state.cmd_alloc_table[i].cmd = 0;
 10106a4:	01a01002 	moveq	r1, r2
	if(error != CC_OK) {
 10106a8:	1a00002f 	bne	101076c <spi_init+0x3b0>
		g_spi_state.cmd_alloc_table[i].alloc_idx = i;
 10106ac:	e58431d0 	str	r3, [r4, #464]	; 0x1d0
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 10106b0:	e2833001 	add	r3, r3, #1
 10106b4:	e353003f 	cmp	r3, #63	; 0x3f
		g_spi_state.cmd_alloc_table[i].cmd = 0;
 10106b8:	e5c411d8 	strb	r1, [r4, #472]	; 0x1d8
		g_spi_state.cmd_alloc_table[i].nargs = 0;
 10106bc:	e58411d4 	str	r1, [r4, #468]	; 0x1d4
 10106c0:	e2844028 	add	r4, r4, #40	; 0x28
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 10106c4:	1afffff8 	bne	10106ac <spi_init+0x2f0>
/*
 * Free a slot in the bitmask.  Slots are free when their bit is set.
 */
inline void spi_command_mark_slot_free(unsigned int slot)
{
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 10106c8:	e3a0c001 	mov	ip, #1
 10106cc:	e1a032a2 	lsr	r3, r2, #5
 10106d0:	e202001f 	and	r0, r2, #31
	for(i = 0; i < SPI_QUEUE_ALLOC_MAX; i++) {
 10106d4:	e2822001 	add	r2, r2, #1
 10106d8:	e2833072 	add	r3, r3, #114	; 0x72
 10106dc:	e352003f 	cmp	r2, #63	; 0x3f
 10106e0:	e7951103 	ldr	r1, [r5, r3, lsl #2]
 10106e4:	e181101c 	orr	r1, r1, ip, lsl r0
 10106e8:	e7851103 	str	r1, [r5, r3, lsl #2]
 10106ec:	1afffff6 	bne	10106cc <spi_init+0x310>
	res = _FAB_CFG_ACCESS(reg);
 10106f0:	e3a02000 	mov	r2, #0
	g_version_resp.bitstream_id = fabcfg_read(FAB_CFG_VERSION);
 10106f4:	e30b3430 	movw	r3, #46128	; 0xb430
 10106f8:	e34423c0 	movt	r2, #17344	; 0x43c0
 10106fc:	e3403145 	movt	r3, #325	; 0x145
 1010700:	e592e00c 	ldr	lr, [r2, #12]
	g_version_resp.ps_app_id = PS_APP_VERSION_INT;
 1010704:	e30002be 	movw	r0, #702	; 0x2be
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_WR_TO_CLR_MASK);
 1010708:	e595c12c 	ldr	ip, [r5, #300]	; 0x12c
	g_version_resp.build_timestamp = 0x00000000; // TBD
 101070c:	e3a01000 	mov	r1, #0
	g_version_resp.bitstream_id = fabcfg_read(FAB_CFG_VERSION);
 1010710:	e583e000 	str	lr, [r3]
 1010714:	e5922010 	ldr	r2, [r2, #16]
	g_version_resp.ps_app_id = PS_APP_VERSION_INT;
 1010718:	e5830008 	str	r0, [r3, #8]
	SPI_SCUGIC_ENABLE();
 101071c:	e3090b80 	movw	r0, #39808	; 0x9b80
	g_version_resp.build_timestamp = 0x00000000; // TBD
 1010720:	e583100c 	str	r1, [r3, #12]
	SPI_SCUGIC_ENABLE();
 1010724:	e3400145 	movt	r0, #325	; 0x145
	g_version_resp.usraccess = fabcfg_read(FAB_CFG_USRACCESS);
 1010728:	e5832004 	str	r2, [r3, #4]
	SPI_SCUGIC_ENABLE();
 101072c:	e3a0103a 	mov	r1, #58	; 0x3a
	return *(volatile u32 *) Addr;
 1010730:	e59c3004 	ldr	r3, [ip, #4]
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_SR_OFFSET, XSPIPS_IXR_WR_TO_CLR_MASK);
 1010734:	e3833043 	orr	r3, r3, #67	; 0x43
	*LocalAddr = Value;
 1010738:	e58c3004 	str	r3, [ip, #4]
	REG_SET_BIT(g_spi_state.spi.Config.BaseAddress, XSPIPS_IER_OFFSET, XSPIPS_IXR_MODF_MASK | XSPIPS_IXR_TXUF_MASK | XSPIPS_IXR_RXNEMPTY_MASK);
 101073c:	e595212c 	ldr	r2, [r5, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010740:	e5923008 	ldr	r3, [r2, #8]
 1010744:	e3833052 	orr	r3, r3, #82	; 0x52
	*LocalAddr = Value;
 1010748:	e5823008 	str	r3, [r2, #8]
	SPI_SCUGIC_ENABLE();
 101074c:	eb00166b 	bl	1016100 <XScuGic_Enable>
	d_printf(D_INFO, "spi: done init");
 1010750:	e3081f54 	movw	r1, #36692	; 0x8f54
 1010754:	e3a00002 	mov	r0, #2
 1010758:	e3401106 	movt	r1, #262	; 0x106
}
 101075c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "spi: done init");
 1010760:	eafff566 	b	100dd00 <d_printf>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1010764:	e3a03c01 	mov	r3, #256	; 0x100
 1010768:	eaffffbd 	b	1010664 <spi_init+0x2a8>
		d_printf(D_ERROR, "spi: unable to initialise deque: error %d", error);
 101076c:	e3081f28 	movw	r1, #36648	; 0x8f28
 1010770:	e3a00004 	mov	r0, #4
 1010774:	e3401106 	movt	r1, #262	; 0x106
 1010778:	ebfff560 	bl	100dd00 <d_printf>
		exit(-1);
 101077c:	e3e00000 	mvn	r0, #0
 1010780:	fa00272a 	blx	101a430 <exit>
		d_printf(D_ERROR, "spi: unable to connect ScuGic: error %d", error);
 1010784:	e3081e9c 	movw	r1, #36508	; 0x8e9c
 1010788:	e3a00004 	mov	r0, #4
 101078c:	e1a02006 	mov	r2, r6
 1010790:	e3401106 	movt	r1, #262	; 0x106
 1010794:	ebfff559 	bl	100dd00 <d_printf>
		exit(-1);
 1010798:	e3e00000 	mvn	r0, #0
 101079c:	fa002723 	blx	101a430 <exit>
		d_printf(D_ERROR, "spi: selftest failed: error %d", error);
 10107a0:	e3081e38 	movw	r1, #36408	; 0x8e38
 10107a4:	e3a00004 	mov	r0, #4
 10107a8:	e1a02004 	mov	r2, r4
 10107ac:	e3401106 	movt	r1, #262	; 0x106
 10107b0:	ebfff552 	bl	100dd00 <d_printf>
		exit(-1);
 10107b4:	e3e00000 	mvn	r0, #0
 10107b8:	fa00271c 	blx	101a430 <exit>
		d_printf(D_ERROR, "spi: unable to initialise SPI peripheral: error %d", error);
 10107bc:	e3081e04 	movw	r1, #36356	; 0x8e04
 10107c0:	e3a00004 	mov	r0, #4
 10107c4:	e3401106 	movt	r1, #262	; 0x106
 10107c8:	ebfff54c 	bl	100dd00 <d_printf>
		exit(-1);
 10107cc:	e3e00000 	mvn	r0, #0
 10107d0:	fa002716 	blx	101a430 <exit>
		d_printf(D_ERROR, "spi: configuration lookup returns NULL");
 10107d4:	e3081ddc 	movw	r1, #36316	; 0x8ddc
 10107d8:	e3a00004 	mov	r0, #4
 10107dc:	e3401106 	movt	r1, #262	; 0x106
 10107e0:	ebfff546 	bl	100dd00 <d_printf>
		exit(-1);
 10107e4:	e3e00000 	mvn	r0, #0
 10107e8:	fa002710 	blx	101a430 <exit>
 10107ec:	01463364 	.word	0x01463364
 10107f0:	01463f09 	.word	0x01463f09
 10107f4:	01463ef8 	.word	0x01463ef8

010107f8 <spi_reset_hw>:
{
 10107f8:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 10107fc:	e3a0433e 	mov	r4, #-134217728	; 0xf8000000
 1010800:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	bogo_delay(10);
 1010804:	e3a0000a 	mov	r0, #10
	REG_SET_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 1010808:	e3833005 	orr	r3, r3, #5
	*LocalAddr = Value;
 101080c:	e584321c 	str	r3, [r4, #540]	; 0x21c
	bogo_delay(10);
 1010810:	ebfff521 	bl	100dc9c <bogo_delay>
	return *(volatile u32 *) Addr;
 1010814:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	bogo_delay(10);
 1010818:	e3a0000a 	mov	r0, #10
	REG_CLR_BIT(0x00000000, SPI_RST_CTRL_REG_SLCR, SPI_RST_CTRL_MASK);
 101081c:	e3c33005 	bic	r3, r3, #5
	*LocalAddr = Value;
 1010820:	e584321c 	str	r3, [r4, #540]	; 0x21c
}
 1010824:	e8bd4010 	pop	{r4, lr}
	bogo_delay(10);
 1010828:	eafff51b 	b	100dc9c <bogo_delay>

0101082c <spi_crc_lut_gen>:
			if((k <<= 1) & 0x100) {
 101082c:	e59f107c 	ldr	r1, [pc, #124]	; 10108b0 <spi_crc_lut_gen+0x84>
{
 1010830:	e3a02002 	mov	r2, #2
			if((k <<= 1) & 0x100) {
 1010834:	e3a03000 	mov	r3, #0
 1010838:	e2810c01 	add	r0, r1, #256	; 0x100
 101083c:	e1a03083 	lsl	r3, r3, #1
 1010840:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010844:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010848:	e1a03083 	lsl	r3, r3, #1
 101084c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010850:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010854:	e1a03083 	lsl	r3, r3, #1
 1010858:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 101085c:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010860:	e1a03083 	lsl	r3, r3, #1
 1010864:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010868:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 101086c:	e1a03083 	lsl	r3, r3, #1
 1010870:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010874:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010878:	e1a03083 	lsl	r3, r3, #1
 101087c:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 1010880:	12233031 	eorne	r3, r3, #49	; 0x31
			if((k <<= 1) & 0x100) {
 1010884:	e1a03083 	lsl	r3, r3, #1
 1010888:	e3130c01 	tst	r3, #256	; 0x100
				k ^= SPI_CRC8_POLY;
 101088c:	12233031 	eorne	r3, r3, #49	; 0x31
		g_spi_state.crc_table[i] = k;
 1010890:	e5e13001 	strb	r3, [r1, #1]!
	for(i = 0; i < 256; i++) {
 1010894:	e1500001 	cmp	r0, r1
 1010898:	012fff1e 	bxeq	lr
			if((k <<= 1) & 0x100) {
 101089c:	e3120c01 	tst	r2, #256	; 0x100
 10108a0:	e1a03002 	mov	r3, r2
				k ^= SPI_CRC8_POLY;
 10108a4:	12223031 	eorne	r3, r2, #49	; 0x31
 10108a8:	e2822002 	add	r2, r2, #2
 10108ac:	eaffffe2 	b	101083c <spi_crc_lut_gen+0x10>
 10108b0:	01463364 	.word	0x01463364

010108b4 <spi_command_lut_gen>:
	for(i = 0; i < SPI_COMMAND_TOTAL_COUNT; i++) {
 10108b4:	e59f30bc 	ldr	r3, [pc, #188]	; 1010978 <spi_command_lut_gen+0xc4>
		memset(g_spi_command_lut[i].short_name, 0, SPI_COMMAND_SHORT_NAME_MAX + 1);
 10108b8:	e3a02000 	mov	r2, #0
{
 10108bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10108c0:	e2831a02 	add	r1, r3, #8192	; 0x2000
		memset(g_spi_command_lut[i].short_name, 0, SPI_COMMAND_SHORT_NAME_MAX + 1);
 10108c4:	e5832000 	str	r2, [r3]
 10108c8:	e2833020 	add	r3, r3, #32
 10108cc:	e503201c 	str	r2, [r3, #-28]	; 0xffffffe4
 10108d0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
 10108d4:	e5032014 	str	r2, [r3, #-20]	; 0xffffffec
		g_spi_command_lut[i].valid = 0;
 10108d8:	e5432021 	strb	r2, [r3, #-33]	; 0xffffffdf
	for(i = 0; i < SPI_COMMAND_TOTAL_COUNT; i++) {
 10108dc:	e1510003 	cmp	r1, r3
 10108e0:	1afffff7 	bne	10108c4 <spi_command_lut_gen+0x10>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 10108e4:	e3054e50 	movw	r4, #24144	; 0x5e50
 10108e8:	e3404102 	movt	r4, #258	; 0x102
 10108ec:	e5d45000 	ldrb	r5, [r4]
 10108f0:	e35500ff 	cmp	r5, #255	; 0xff
 10108f4:	0a00001c 	beq	101096c <spi_command_lut_gen+0xb8>
 10108f8:	e3036f08 	movw	r6, #16136	; 0x3f08
 10108fc:	e3a07000 	mov	r7, #0
 1010900:	e3406146 	movt	r6, #326	; 0x146
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 1010904:	e3a09020 	mov	r9, #32
 1010908:	e3a08001 	mov	r8, #1
 101090c:	e1008589 	smlabb	r0, r9, r5, r8
 1010910:	e5941004 	ldr	r1, [r4, #4]
 1010914:	e3a0200f 	mov	r2, #15
		added++;
 1010918:	e2877001 	add	r7, r7, #1
		strncpy(g_spi_command_lut[spi_cmd->cmd_id].short_name, spi_cmd->short_name, SPI_COMMAND_SHORT_NAME_MAX);
 101091c:	e0860000 	add	r0, r6, r0
 1010920:	fa0031cd 	blx	101d05c <strncpy>
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 1010924:	e0863285 	add	r3, r6, r5, lsl #5
 1010928:	e5940008 	ldr	r0, [r4, #8]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 101092c:	e5941010 	ldr	r1, [r4, #16]
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1010930:	e5d4200c 	ldrb	r2, [r4, #12]
		g_spi_command_lut[spi_cmd->cmd_id].valid = 1;
 1010934:	e7c68285 	strb	r8, [r6, r5, lsl #5]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1010938:	e5f45014 	ldrb	r5, [r4, #20]!
		g_spi_command_lut[spi_cmd->cmd_id].nargs = spi_cmd->nargs;
 101093c:	e5830014 	str	r0, [r3, #20]
		g_spi_command_lut[spi_cmd->cmd_id].cmd_processor = spi_cmd->cmd_processor;
 1010940:	e583101c 	str	r1, [r3, #28]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 1010944:	e35500ff 	cmp	r5, #255	; 0xff
		g_spi_command_lut[spi_cmd->cmd_id].has_response = spi_cmd->has_response;
 1010948:	e5c32018 	strb	r2, [r3, #24]
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 101094c:	1affffee 	bne	101090c <spi_command_lut_gen+0x58>
 1010950:	e2673c01 	rsb	r3, r7, #256	; 0x100
	d_printf(D_INFO, "spi: %d LUT entries filled, %d free", added, SPI_COMMAND_TOTAL_COUNT - added);
 1010954:	e3081eec 	movw	r1, #36588	; 0x8eec
 1010958:	e1a02007 	mov	r2, r7
 101095c:	e3401106 	movt	r1, #262	; 0x106
 1010960:	e3a00002 	mov	r0, #2
}
 1010964:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "spi: %d LUT entries filled, %d free", added, SPI_COMMAND_TOTAL_COUNT - added);
 1010968:	eafff4e4 	b	100dd00 <d_printf>
	for(i = 0; spi_command_defs[i].cmd_id != 0xff; i++) {
 101096c:	e3a03c01 	mov	r3, #256	; 0x100
 1010970:	e3a07000 	mov	r7, #0
 1010974:	eafffff6 	b	1010954 <spi_command_lut_gen+0xa0>
 1010978:	01463f09 	.word	0x01463f09

0101097c <spi_transmit_packet_nonblock>:
	D_ASSERT(bytes > 0);
 101097c:	e3510000 	cmp	r1, #0
{
 1010980:	e92d4010 	push	{r4, lr}
 1010984:	e24dd008 	sub	sp, sp, #8
	D_ASSERT(bytes > 0);
 1010988:	da000043 	ble	1010a9c <spi_transmit_packet_nonblock+0x120>
	if(SPI_IS_TX_OVERWATER()) {
 101098c:	e303c340 	movw	ip, #13120	; 0x3340
 1010990:	e340c146 	movt	ip, #326	; 0x146
 1010994:	e59c412c 	ldr	r4, [ip, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010998:	e5943004 	ldr	r3, [r4, #4]
 101099c:	e2133004 	ands	r3, r3, #4
 10109a0:	0a000037 	beq	1010a84 <spi_transmit_packet_nonblock+0x108>
	if(bytes < (SPI_RESPONSE_PACK_SIZE - 1)) {
 10109a4:	e351003d 	cmp	r1, #61	; 0x3d
 10109a8:	ca000018 	bgt	1010a10 <spi_transmit_packet_nonblock+0x94>
 10109ac:	e5943004 	ldr	r3, [r4, #4]
		return _spi_transmit_fill_fifo(pkt, bytes);
 10109b0:	e6ef2071 	uxtb	r2, r1
inline int _spi_transmit_fill_fifo(uint8_t *pkt, uint8_t bytes)
{
	int bytes_written = 0, i;

	do {
		if(!SPI_IS_TX_FULL()) {
 10109b4:	e3130008 	tst	r3, #8
 10109b8:	1a000031 	bne	1010a84 <spi_transmit_packet_nonblock+0x108>
			bytes_written++;
			bytes--;
		} else {
			break;
		}
	} while(bytes > 0);
 10109bc:	e3520001 	cmp	r2, #1
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 10109c0:	e1a03000 	mov	r3, r0
 10109c4:	12422002 	subne	r2, r2, #2
 10109c8:	e4d31001 	ldrb	r1, [r3], #1
	*LocalAddr = Value;
 10109cc:	16ef2072 	uxtbne	r2, r2
			bytes_written++;
 10109d0:	13a00001 	movne	r0, #1
 10109d4:	e584101c 	str	r1, [r4, #28]
			bytes--;
 10109d8:	12822002 	addne	r2, r2, #2
	} while(bytes > 0);
 10109dc:	1a000005 	bne	10109f8 <spi_transmit_packet_nonblock+0x7c>
 10109e0:	ea00002a 	b	1010a90 <spi_transmit_packet_nonblock+0x114>
			bytes_written++;
 10109e4:	e2800001 	add	r0, r0, #1
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 10109e8:	e4d3e001 	ldrb	lr, [r3], #1
	} while(bytes > 0);
 10109ec:	e1500002 	cmp	r0, r2
 10109f0:	e581e01c 	str	lr, [r1, #28]
 10109f4:	0a000025 	beq	1010a90 <spi_transmit_packet_nonblock+0x114>
 10109f8:	e59c112c 	ldr	r1, [ip, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10109fc:	e591e004 	ldr	lr, [r1, #4]
		if(!SPI_IS_TX_FULL()) {
 1010a00:	e31e0008 	tst	lr, #8
 1010a04:	0afffff6 	beq	10109e4 <spi_transmit_packet_nonblock+0x68>
}
 1010a08:	e28dd008 	add	sp, sp, #8
 1010a0c:	e8bd8010 	pop	{r4, pc}
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 1010a10:	e1a0e000 	mov	lr, r0
 1010a14:	e2803001 	add	r3, r0, #1
 1010a18:	e4de203e 	ldrb	r2, [lr], #62	; 0x3e
	*LocalAddr = Value;
 1010a1c:	e584201c 	str	r2, [r4, #28]
 1010a20:	e4d30001 	ldrb	r0, [r3], #1
 1010a24:	e59c212c 	ldr	r2, [ip, #300]	; 0x12c
		for(i = 0; i < (SPI_RESPONSE_PACK_SIZE - 1); i++) {
 1010a28:	e15e0003 	cmp	lr, r3
 1010a2c:	e582001c 	str	r0, [r2, #28]
 1010a30:	1afffffa 	bne	1010a20 <spi_transmit_packet_nonblock+0xa4>
		if(bytes > 0) {
 1010a34:	e351003e 	cmp	r1, #62	; 0x3e
		bytes_written += (SPI_RESPONSE_PACK_SIZE - 1);
 1010a38:	03a0003e 	moveq	r0, #62	; 0x3e
		if(bytes > 0) {
 1010a3c:	0afffff1 	beq	1010a08 <spi_transmit_packet_nonblock+0x8c>
	int bytes_written = 0, i;
 1010a40:	e241303f 	sub	r3, r1, #63	; 0x3f
 1010a44:	e3a00000 	mov	r0, #0
 1010a48:	e6ef3073 	uxtb	r3, r3
 1010a4c:	e2833001 	add	r3, r3, #1
 1010a50:	ea000004 	b	1010a68 <spi_transmit_packet_nonblock+0xec>
			bytes_written++;
 1010a54:	e2800001 	add	r0, r0, #1
			XSpiPs_WriteReg(g_spi_state.spi.Config.BaseAddress, XSPIPS_TXD_OFFSET, (uint8_t)(*pkt++));
 1010a58:	e4de1001 	ldrb	r1, [lr], #1
	} while(bytes > 0);
 1010a5c:	e1500003 	cmp	r0, r3
 1010a60:	e582101c 	str	r1, [r2, #28]
 1010a64:	0a000003 	beq	1010a78 <spi_transmit_packet_nonblock+0xfc>
		if(!SPI_IS_TX_FULL()) {
 1010a68:	e59c212c 	ldr	r2, [ip, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010a6c:	e5921004 	ldr	r1, [r2, #4]
 1010a70:	e3110008 	tst	r1, #8
 1010a74:	0afffff6 	beq	1010a54 <spi_transmit_packet_nonblock+0xd8>
			bytes_written += _spi_transmit_fill_fifo(pkt, bytes);
 1010a78:	e280003e 	add	r0, r0, #62	; 0x3e
}
 1010a7c:	e28dd008 	add	sp, sp, #8
 1010a80:	e8bd8010 	pop	{r4, pc}
	int bytes_written = 0, i;
 1010a84:	e3a00000 	mov	r0, #0
 1010a88:	e28dd008 	add	sp, sp, #8
 1010a8c:	e8bd8010 	pop	{r4, pc}
			bytes_written++;
 1010a90:	e1a00002 	mov	r0, r2
 1010a94:	e28dd008 	add	sp, sp, #8
 1010a98:	e8bd8010 	pop	{r4, pc}
	D_ASSERT(bytes > 0);
 1010a9c:	e300019b 	movw	r0, #411	; 0x19b
 1010aa0:	e3083f64 	movw	r3, #36708	; 0x8f64
 1010aa4:	e3082f74 	movw	r2, #36724	; 0x8f74
 1010aa8:	e30619f0 	movw	r1, #27120	; 0x69f0
 1010aac:	e58d0000 	str	r0, [sp]
 1010ab0:	e3403106 	movt	r3, #262	; 0x106
 1010ab4:	e3a00004 	mov	r0, #4
 1010ab8:	e3402106 	movt	r2, #262	; 0x106
 1010abc:	e3401106 	movt	r1, #262	; 0x106
 1010ac0:	ebfff48e 	bl	100dd00 <d_printf>
 1010ac4:	e3e00062 	mvn	r0, #98	; 0x62
 1010ac8:	fa002658 	blx	101a430 <exit>

01010acc <spi_command_find_free_slot>:
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1010acc:	e3033340 	movw	r3, #13120	; 0x3340
 1010ad0:	e3403146 	movt	r3, #326	; 0x146
 1010ad4:	e59321c8 	ldr	r2, [r3, #456]	; 0x1c8
		if(free_mask != 0x00000000) {
 1010ad8:	e3520000 	cmp	r2, #0
 1010adc:	1a000005 	bne	1010af8 <spi_command_find_free_slot+0x2c>
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1010ae0:	e59321cc 	ldr	r2, [r3, #460]	; 0x1cc
		if(free_mask != 0x00000000) {
 1010ae4:	e3520000 	cmp	r2, #0
 1010ae8:	13a00020 	movne	r0, #32
 1010aec:	1a000002 	bne	1010afc <spi_command_find_free_slot+0x30>
		}
	}

	return -1;
 1010af0:	e3e00000 	mvn	r0, #0
}
 1010af4:	e12fff1e 	bx	lr
		if(free_mask != 0x00000000) {
 1010af8:	e3a00000 	mov	r0, #0
			bit = __builtin_ffs(free_mask);
 1010afc:	e3520000 	cmp	r2, #0
 1010b00:	e6ff2f32 	rbit	r2, r2
 1010b04:	e16f2f12 	clz	r2, r2
 1010b08:	03e02000 	mvneq	r2, #0
			return (i * 32) + bit - 1;
 1010b0c:	e0800002 	add	r0, r0, r2
 1010b10:	e12fff1e 	bx	lr

01010b14 <spi_command_count_allocated>:

/*
 * Count the number of commands currently allocated.
 */
int spi_command_count_allocated()
{
 1010b14:	e92d4070 	push	{r4, r5, r6, lr}
	uint32_t free_mask;
	unsigned int i;
	int count = 0;

	for(i = 0; i < SPI_QUEUE_ALLOC_BITMASK_SIZE; i++) {
		free_mask = g_spi_state.cmd_free_bitmask[i];
 1010b18:	e3034340 	movw	r4, #13120	; 0x3340
 1010b1c:	e3404146 	movt	r4, #326	; 0x146
		count += __builtin_popcount(free_mask);
 1010b20:	e59401c8 	ldr	r0, [r4, #456]	; 0x1c8
 1010b24:	fa0025b3 	blx	101a1f8 <__popcountsi2>
 1010b28:	e1a05000 	mov	r5, r0
 1010b2c:	e59401cc 	ldr	r0, [r4, #460]	; 0x1cc
 1010b30:	fa0025b0 	blx	101a1f8 <__popcountsi2>
 1010b34:	e0850000 	add	r0, r5, r0
	}

	return SPI_QUEUE_ALLOC_MAX - count;
}
 1010b38:	e260003f 	rsb	r0, r0, #63	; 0x3f
 1010b3c:	e8bd8070 	pop	{r4, r5, r6, pc}

01010b40 <spi_command_pack_response_simple>:
 * Pack a response for a command using a memory copy.  This isn't suitable for
 * large commands as it has relatively high overheads in the form of a memcpy
 * (in case the response was on the stack beforehand.)
 */
int spi_command_pack_response_simple(struct spi_command_alloc_t *cmd, void *resp, int respsz)
{
 1010b40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1010b44:	e1a04000 	mov	r4, r0
	int res;

	cmd->resp_data = malloc(respsz);  // Malloc the response buffer.  This'll be freed by the command tick once the response is done.
 1010b48:	e1a00002 	mov	r0, r2
{
 1010b4c:	e1a05002 	mov	r5, r2
 1010b50:	e1a07001 	mov	r7, r1
	cmd->resp_data = malloc(respsz);  // Malloc the response buffer.  This'll be freed by the command tick once the response is done.
 1010b54:	fa002917 	blx	101afb8 <malloc>

	if(cmd->resp_data == NULL) {
 1010b58:	e3500000 	cmp	r0, #0
	cmd->resp_data = malloc(respsz);  // Malloc the response buffer.  This'll be freed by the command tick once the response is done.
 1010b5c:	e5840020 	str	r0, [r4, #32]
	if(cmd->resp_data == NULL) {
 1010b60:	0a00000b 	beq	1010b94 <spi_command_pack_response_simple+0x54>
		cmd->resp_error = 1;
		GLOBAL_IRQ_ENABLE();

		res = SPIRET_MEM_ERROR;
	} else {
		memcpy(cmd->resp_data, resp, respsz);
 1010b64:	e1a01007 	mov	r1, r7
 1010b68:	e1a02005 	mov	r2, r5
 1010b6c:	eb002ba3 	bl	101ba00 <memcpy>

		//d_printf(D_INFO, "resp_simple ptr=0x%08x src=0x%08x resp_size=%d", cmd->resp_data, resp, respsz);

		GLOBAL_IRQ_DISABLE();
 1010b70:	f10c0080 	cpsid	i
		cmd->resp_ready = 1;
 1010b74:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
		cmd->resp_size = respsz;
 1010b78:	e584501c 	str	r5, [r4, #28]
		cmd->resp_ready = 1;
 1010b7c:	e3c3300d 	bic	r3, r3, #13
 1010b80:	e3833009 	orr	r3, r3, #9
 1010b84:	e5c43024 	strb	r3, [r4, #36]	; 0x24
		cmd->resp_error = 0;
		cmd->free_resp_reqd = 1;
		GLOBAL_IRQ_ENABLE();
 1010b88:	f1080080 	cpsie	i

		res = SPIRET_OK;
 1010b8c:	e3a00000 	mov	r0, #0
	}

	return res;
}
 1010b90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "spi: error allocating %d bytes for command response - response failed", respsz);
 1010b94:	e3081f80 	movw	r1, #36736	; 0x8f80
 1010b98:	e1a06000 	mov	r6, r0
 1010b9c:	e1a02005 	mov	r2, r5
 1010ba0:	e3401106 	movt	r1, #262	; 0x106
 1010ba4:	e3a00004 	mov	r0, #4
 1010ba8:	ebfff454 	bl	100dd00 <d_printf>
		GLOBAL_IRQ_DISABLE();
 1010bac:	f10c0080 	cpsid	i
		cmd->resp_ready = 1;
 1010bb0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
		cmd->resp_size = 0;
 1010bb4:	e584601c 	str	r6, [r4, #28]
		cmd->resp_ready = 1;
 1010bb8:	e3c33005 	bic	r3, r3, #5
 1010bbc:	e3833005 	orr	r3, r3, #5
 1010bc0:	e5c43024 	strb	r3, [r4, #36]	; 0x24
		GLOBAL_IRQ_ENABLE();
 1010bc4:	f1080080 	cpsie	i
		res = SPIRET_MEM_ERROR;
 1010bc8:	e3e00000 	mvn	r0, #0
 1010bcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01010bd0 <spi_command_pack_response_pre_alloc>:
 * Pack a response for a command using a pointer copy.  The buffer must have been
 * allocated using malloc or friends, as it will be later freed using free().
 */
void spi_command_pack_response_pre_alloc(struct spi_command_alloc_t *cmd, void *resp, int respsz)
{
	D_ASSERT(resp != NULL);
 1010bd0:	e3510000 	cmp	r1, #0
 1010bd4:	0a000008 	beq	1010bfc <spi_command_pack_response_pre_alloc+0x2c>

	//d_printf(D_INFO, "resp_pre_alloc ptr=0x%08x resp_size=%d", resp, respsz);

	GLOBAL_IRQ_DISABLE();
 1010bd8:	f10c0080 	cpsid	i
	cmd->resp_data = resp;
	cmd->resp_size = respsz;
	cmd->resp_ready = 1;
 1010bdc:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
	cmd->resp_data = resp;
 1010be0:	e5801020 	str	r1, [r0, #32]
	cmd->resp_size = respsz;
 1010be4:	e580201c 	str	r2, [r0, #28]
	cmd->resp_ready = 1;
 1010be8:	e3c3300d 	bic	r3, r3, #13
 1010bec:	e3833009 	orr	r3, r3, #9
 1010bf0:	e5c03024 	strb	r3, [r0, #36]	; 0x24
	cmd->resp_error = 0;
	cmd->free_resp_reqd = 1;
	GLOBAL_IRQ_ENABLE();
 1010bf4:	f1080080 	cpsie	i
 1010bf8:	e12fff1e 	bx	lr
{
 1010bfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(resp != NULL);
 1010c00:	e3000212 	movw	r0, #530	; 0x212
{
 1010c04:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(resp != NULL);
 1010c08:	e3083f64 	movw	r3, #36708	; 0x8f64
 1010c0c:	e3082fc8 	movw	r2, #36808	; 0x8fc8
 1010c10:	e30619f0 	movw	r1, #27120	; 0x69f0
 1010c14:	e58d0000 	str	r0, [sp]
 1010c18:	e3403106 	movt	r3, #262	; 0x106
 1010c1c:	e3a00004 	mov	r0, #4
 1010c20:	e3402106 	movt	r2, #262	; 0x106
 1010c24:	e3401106 	movt	r1, #262	; 0x106
 1010c28:	ebfff434 	bl	100dd00 <d_printf>
 1010c2c:	e3e00062 	mvn	r0, #98	; 0x62
 1010c30:	fa0025fe 	blx	101a430 <exit>

01010c34 <spi_command_tick>:
/*
 * Process any commands in the command buffer.  Commands that are completed are popped
 * from the buffer.
 */
int spi_command_tick()
{
 1010c34:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int tx_bytes, sent_bytes, res, i;
	struct spi_command_alloc_t *cmd;
	struct spi_command_alloc_t *proc_cmd = g_spi_state.proc_cmd; // Shorthand
 1010c38:	e3034340 	movw	r4, #13120	; 0x3340
 1010c3c:	e3404146 	movt	r4, #326	; 0x146
{
 1010c40:	e24dd014 	sub	sp, sp, #20
	static int iter = 0;
	int dqs = deque_size(g_spi_state.command_dq);
 1010c44:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
	struct spi_command_alloc_t *proc_cmd = g_spi_state.proc_cmd; // Shorthand
 1010c48:	e5946bbc 	ldr	r6, [r4, #3004]	; 0xbbc
	int dqs = deque_size(g_spi_state.command_dq);
 1010c4c:	ebffc78a 	bl	1002a7c <deque_size>
			iter = 0;
		}
	}
#endif

	if(d_getkey() == 'd') {
 1010c50:	ebfff5f0 	bl	100e418 <d_getkey>
 1010c54:	e3500064 	cmp	r0, #100	; 0x64
 1010c58:	0a00000a 	beq	1010c88 <spi_command_tick+0x54>
		d_waitkey();
	}

	res = SPIENGINE_IDLE;

	GLOBAL_IRQ_DISABLE();
 1010c5c:	f10c0080 	cpsid	i

	switch(g_spi_state.proc_state) {
 1010c60:	e5945bc0 	ldr	r5, [r4, #3008]	; 0xbc0
 1010c64:	e2453001 	sub	r3, r5, #1
 1010c68:	e3530004 	cmp	r3, #4
 1010c6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1010c70:	ea0001cc 	b	10113a8 <spi_command_tick+0x774>
 1010c74:	01010d18 	.word	0x01010d18
 1010c78:	01010d7c 	.word	0x01010d7c
 1010c7c:	01010e44 	.word	0x01010e44
 1010c80:	01011218 	.word	0x01011218
 1010c84:	01010ca0 	.word	0x01010ca0
		d_printf(D_RAW, "\r\n\r\npause, press key to resume\r\n\r\n");
 1010c88:	e3081fd8 	movw	r1, #36824	; 0x8fd8
 1010c8c:	e3a00000 	mov	r0, #0
 1010c90:	e3401106 	movt	r1, #262	; 0x106
 1010c94:	ebfff419 	bl	100dd00 <d_printf>
		d_waitkey();
 1010c98:	ebfff5d3 	bl	100e3ec <d_waitkey>
 1010c9c:	eaffffee 	b	1010c5c <spi_command_tick+0x28>
		case SPIPROC_STATE_OUTPUT_DONE_WAIT:
			/*
			 * We have sent the command.  Free the slot, mark the command as done and
			 * wait for the FIFO to be empty.
			 */
			spi_command_mark_slot_free(proc_cmd->alloc_idx);
 1010ca0:	e5963000 	ldr	r3, [r6]
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1010ca4:	e3a07001 	mov	r7, #1
 * Free the buffer associated with a command and deallocate it.
 */
inline void spi_command_cleanup(struct spi_command_alloc_t *cmd)
{
	D_ASSERT(cmd != NULL);
	D_ASSERT(cmd->resp_data != NULL);
 1010ca8:	e5960020 	ldr	r0, [r6, #32]
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1010cac:	e203101f 	and	r1, r3, #31
 1010cb0:	e1a032a3 	lsr	r3, r3, #5
	D_ASSERT(cmd->resp_data != NULL);
 1010cb4:	e3500000 	cmp	r0, #0
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1010cb8:	e2833072 	add	r3, r3, #114	; 0x72
 1010cbc:	e7942103 	ldr	r2, [r4, r3, lsl #2]
 1010cc0:	e1822117 	orr	r2, r2, r7, lsl r1
 1010cc4:	e7842103 	str	r2, [r4, r3, lsl #2]
	D_ASSERT(cmd->resp_data != NULL);
 1010cc8:	0a0001ae 	beq	1011388 <spi_command_tick+0x754>

	cmd->resp_done = 0;
	cmd->resp_error = 0;
	cmd->resp_ready = 0;
 1010ccc:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24

			/*
			 * Tell outer task that we're still busy, while we wait for command to complete and
			 * go back to the idle state.
			 */
			res = SPIENGINE_WORKING;
 1010cd0:	e3a05002 	mov	r5, #2
 1010cd4:	e3c33007 	bic	r3, r3, #7
 1010cd8:	e5c63024 	strb	r3, [r6, #36]	; 0x24
	//d_printf(D_INFO, "resp_free 0x%08x", cmd->resp_data);
	free(cmd->resp_data);
 1010cdc:	fa0028b9 	blx	101afc8 <free>
			g_spi_state.commands_queued--;
 1010ce0:	e5942ba8 	ldr	r2, [r4, #2984]	; 0xba8
	cmd->resp_data = NULL;
 1010ce4:	e3a01000 	mov	r1, #0
			g_spi_state.resp_done = 1;
 1010ce8:	e5d43000 	ldrb	r3, [r4]
 1010cec:	e5861020 	str	r1, [r6, #32]
			g_spi_state.commands_queued--;
 1010cf0:	e2422001 	sub	r2, r2, #1
			g_spi_state.proc_cmd = NULL;
 1010cf4:	e5841bbc 	str	r1, [r4, #3004]	; 0xbbc
			g_spi_state.resp_done = 1;
 1010cf8:	e1833005 	orr	r3, r3, r5
			g_spi_state.commands_queued--;
 1010cfc:	e5842ba8 	str	r2, [r4, #2984]	; 0xba8
			g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 1010d00:	e5847bc0 	str	r7, [r4, #3008]	; 0xbc0
			g_spi_state.resp_done = 1;
 1010d04:	e5c43000 	strb	r3, [r4]
			break;
	}

	GLOBAL_IRQ_ENABLE();
 1010d08:	f1080080 	cpsie	i

	return res;
}
 1010d0c:	e1a00005 	mov	r0, r5
 1010d10:	e28dd014 	add	sp, sp, #20
 1010d14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		count += __builtin_popcount(free_mask);
 1010d18:	e59401c8 	ldr	r0, [r4, #456]	; 0x1c8
 1010d1c:	fa002535 	blx	101a1f8 <__popcountsi2>
 1010d20:	e1a06000 	mov	r6, r0
 1010d24:	e59401cc 	ldr	r0, [r4, #460]	; 0x1cc
 1010d28:	fa002532 	blx	101a1f8 <__popcountsi2>
 1010d2c:	e0800006 	add	r0, r0, r6
	return SPI_QUEUE_ALLOC_MAX - count;
 1010d30:	e260003f 	rsb	r0, r0, #63	; 0x3f
			if(spi_command_count_allocated() > 0) {
 1010d34:	e3500000 	cmp	r0, #0
 1010d38:	dafffff2 	ble	1010d08 <spi_command_tick+0xd4>
				if(deque_size(g_spi_state.command_dq) > 0) {
 1010d3c:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
 1010d40:	ebffc74d 	bl	1002a7c <deque_size>
 1010d44:	e3500000 	cmp	r0, #0
 1010d48:	0affffee 	beq	1010d08 <spi_command_tick+0xd4>
					deque_remove_first(g_spi_state.command_dq, (void*)&cmd);
 1010d4c:	e28d100c 	add	r1, sp, #12
 1010d50:	e5940bb8 	ldr	r0, [r4, #3000]	; 0xbb8
 1010d54:	ebffc5b9 	bl	1002440 <deque_remove_first>
					g_spi_state.resp_done = 0;
 1010d58:	e5d43000 	ldrb	r3, [r4]
					g_spi_state.proc_state = SPIPROC_STATE_EXECUTE;
 1010d5c:	e3a02002 	mov	r2, #2
					g_spi_state.proc_cmd = cmd;
 1010d60:	e59d100c 	ldr	r1, [sp, #12]
					res = SPIENGINE_WORKING;
 1010d64:	e1a05002 	mov	r5, r2
					g_spi_state.proc_state = SPIPROC_STATE_EXECUTE;
 1010d68:	e5842bc0 	str	r2, [r4, #3008]	; 0xbc0
					g_spi_state.resp_done = 0;
 1010d6c:	e7c1309f 	bfc	r3, #1, #1
					g_spi_state.proc_cmd = cmd;
 1010d70:	e5841bbc 	str	r1, [r4, #3004]	; 0xbbc
					g_spi_state.resp_done = 0;
 1010d74:	e5c43000 	strb	r3, [r4]
					res = SPIENGINE_WORKING;
 1010d78:	eaffffe2 	b	1010d08 <spi_command_tick+0xd4>
			if(g_spi_command_lut[proc_cmd->cmd].cmd_processor != NULL) {
 1010d7c:	e5d62008 	ldrb	r2, [r6, #8]
 1010d80:	e3033f08 	movw	r3, #16136	; 0x3f08
 1010d84:	e3403146 	movt	r3, #326	; 0x146
 1010d88:	e0833282 	add	r3, r3, r2, lsl #5
 1010d8c:	e593301c 	ldr	r3, [r3, #28]
 1010d90:	e3530000 	cmp	r3, #0
 1010d94:	0a000001 	beq	1010da0 <spi_command_tick+0x16c>
				g_spi_command_lut[proc_cmd->cmd].cmd_processor(proc_cmd);
 1010d98:	e1a00006 	mov	r0, r6
 1010d9c:	e12fff33 	blx	r3
			if(proc_cmd->resp_ready && !proc_cmd->resp_error) {
 1010da0:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24
 1010da4:	e2032005 	and	r2, r3, #5
 1010da8:	e3520001 	cmp	r2, #1
 1010dac:	0a000161 	beq	1011338 <spi_command_tick+0x704>
				if(proc_cmd->resp_error) {
 1010db0:	e3130004 	tst	r3, #4
 1010db4:	e5962000 	ldr	r2, [r6]
 1010db8:	1a000158 	bne	1011320 <spi_command_tick+0x6ec>
	g_spi_state.cmd_free_bitmask[slot / 32] |= (1 << (slot % 32));
 1010dbc:	e1a032a2 	lsr	r3, r2, #5
				if(proc_cmd->resp_data != NULL) {
 1010dc0:	e5960020 	ldr	r0, [r6, #32]
 1010dc4:	e202201f 	and	r2, r2, #31
 1010dc8:	e2833072 	add	r3, r3, #114	; 0x72
 1010dcc:	e3a0c001 	mov	ip, #1
 1010dd0:	e7941103 	ldr	r1, [r4, r3, lsl #2]
 1010dd4:	e3500000 	cmp	r0, #0
 1010dd8:	e181221c 	orr	r2, r1, ip, lsl r2
 1010ddc:	e7842103 	str	r2, [r4, r3, lsl #2]
 1010de0:	0a000005 	beq	1010dfc <spi_command_tick+0x1c8>
	cmd->resp_error = 0;
 1010de4:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24
 1010de8:	e7c2311f 	bfc	r3, #2, #1
 1010dec:	e5c63024 	strb	r3, [r6, #36]	; 0x24
	free(cmd->resp_data);
 1010df0:	fa002874 	blx	101afc8 <free>
	cmd->resp_data = NULL;
 1010df4:	e3a03000 	mov	r3, #0
 1010df8:	e5863020 	str	r3, [r6, #32]
				proc_cmd->resp_ready = 0;
 1010dfc:	e5d63024 	ldrb	r3, [r6, #36]	; 0x24
				g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 1010e00:	e3a01001 	mov	r1, #1
				g_spi_state.resp_done = 1; // Tell SPI ISR state machine that we're done
 1010e04:	e5d42000 	ldrb	r2, [r4]
				g_spi_state.proc_cmd = NULL;
 1010e08:	e3a00000 	mov	r0, #0
	res = SPIENGINE_IDLE;
 1010e0c:	e1a05001 	mov	r5, r1
				proc_cmd->resp_ready = 0;
 1010e10:	e3c33003 	bic	r3, r3, #3
 1010e14:	e5c63024 	strb	r3, [r6, #36]	; 0x24
				g_spi_state.resp_done = 1; // Tell SPI ISR state machine that we're done
 1010e18:	e3822002 	orr	r2, r2, #2
				g_spi_state.commands_queued--;
 1010e1c:	e5943ba8 	ldr	r3, [r4, #2984]	; 0xba8
				g_spi_state.resp_done = 1; // Tell SPI ISR state machine that we're done
 1010e20:	e5c42000 	strb	r2, [r4]
				g_spi_state.proc_cmd = NULL;
 1010e24:	e5840bbc 	str	r0, [r4, #3004]	; 0xbbc
				g_spi_state.commands_queued--;
 1010e28:	e2433001 	sub	r3, r3, #1
				g_spi_state.proc_state = SPIPROC_STATE_DEQUEUE;
 1010e2c:	e5841bc0 	str	r1, [r4, #3008]	; 0xbc0
				g_spi_state.commands_queued--;
 1010e30:	e5843ba8 	str	r3, [r4, #2984]	; 0xba8
	GLOBAL_IRQ_ENABLE();
 1010e34:	f1080080 	cpsie	i
}
 1010e38:	e1a00005 	mov	r0, r5
 1010e3c:	e28dd014 	add	sp, sp, #20
 1010e40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			D_ASSERT(g_spi_state.resp_bytes <= SPI_RESPONSE_2BYTE_MAX);
 1010e44:	e3003bb4 	movw	r3, #2996	; 0xbb4
 1010e48:	e19430b3 	ldrh	r3, [r4, r3]
 1010e4c:	e3530c7f 	cmp	r3, #32512	; 0x7f00
 1010e50:	2a000140 	bcs	1011358 <spi_command_tick+0x724>
			SPI_SCUGIC_DISABLE();
 1010e54:	e3090b80 	movw	r0, #39808	; 0x9b80
 1010e58:	e3a0103a 	mov	r1, #58	; 0x3a
 1010e5c:	e3400145 	movt	r0, #325	; 0x145
 1010e60:	eb0014f8 	bl	1016248 <XScuGic_Disable>
			if(SPI_IS_TX_UNDERFLOW()) {
 1010e64:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
 1010e68:	e5932004 	ldr	r2, [r3, #4]
 1010e6c:	e2831004 	add	r1, r3, #4
 1010e70:	e3120040 	tst	r2, #64	; 0x40
 1010e74:	0a00009a 	beq	10110e4 <spi_command_tick+0x4b0>
 1010e78:	e5931004 	ldr	r1, [r3, #4]
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010e7c:	e5942158 	ldr	r2, [r4, #344]	; 0x158
	if(!SPI_IS_TX_FULL()) {
 1010e80:	e2111008 	ands	r1, r1, #8
 1010e84:	1a000006 	bne	1010ea4 <spi_command_tick+0x270>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010e88:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010e8c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010e90:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010e94:	e5913004 	ldr	r3, [r1, #4]
 1010e98:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010e9c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010ea0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010ea4:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010ea8:	e2111008 	ands	r1, r1, #8
 1010eac:	1a000006 	bne	1010ecc <spi_command_tick+0x298>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010eb0:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010eb4:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010eb8:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010ebc:	e5913004 	ldr	r3, [r1, #4]
 1010ec0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010ec4:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010ec8:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010ecc:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010ed0:	e2111008 	ands	r1, r1, #8
 1010ed4:	1a000006 	bne	1010ef4 <spi_command_tick+0x2c0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010ed8:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010edc:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010ee0:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010ee4:	e5913004 	ldr	r3, [r1, #4]
 1010ee8:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010eec:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010ef0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010ef4:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010ef8:	e2111008 	ands	r1, r1, #8
 1010efc:	1a000006 	bne	1010f1c <spi_command_tick+0x2e8>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010f00:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010f04:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010f08:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010f0c:	e5913004 	ldr	r3, [r1, #4]
 1010f10:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010f14:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010f18:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010f1c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010f20:	e2111008 	ands	r1, r1, #8
 1010f24:	1a000006 	bne	1010f44 <spi_command_tick+0x310>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010f28:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010f2c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010f30:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010f34:	e5913004 	ldr	r3, [r1, #4]
 1010f38:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010f3c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010f40:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010f44:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010f48:	e2111008 	ands	r1, r1, #8
 1010f4c:	1a000006 	bne	1010f6c <spi_command_tick+0x338>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010f50:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010f54:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010f58:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010f5c:	e5913004 	ldr	r3, [r1, #4]
 1010f60:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010f64:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010f68:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010f6c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010f70:	e2111008 	ands	r1, r1, #8
 1010f74:	1a000006 	bne	1010f94 <spi_command_tick+0x360>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010f78:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010f7c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010f80:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010f84:	e5913004 	ldr	r3, [r1, #4]
 1010f88:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010f8c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010f90:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010f94:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010f98:	e2111008 	ands	r1, r1, #8
 1010f9c:	1a000006 	bne	1010fbc <spi_command_tick+0x388>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010fa0:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010fa4:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010fa8:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010fac:	e5913004 	ldr	r3, [r1, #4]
 1010fb0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010fb4:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010fb8:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010fbc:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010fc0:	e2111008 	ands	r1, r1, #8
 1010fc4:	1a000006 	bne	1010fe4 <spi_command_tick+0x3b0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010fc8:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010fcc:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010fd0:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010fd4:	e5913004 	ldr	r3, [r1, #4]
 1010fd8:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1010fdc:	e5813004 	str	r3, [r1, #4]
		return 1;
 1010fe0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1010fe4:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1010fe8:	e2111008 	ands	r1, r1, #8
 1010fec:	1a000006 	bne	101100c <spi_command_tick+0x3d8>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1010ff0:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1010ff4:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1010ff8:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1010ffc:	e5913004 	ldr	r3, [r1, #4]
 1011000:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1011004:	e5813004 	str	r3, [r1, #4]
		return 1;
 1011008:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101100c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1011010:	e2111008 	ands	r1, r1, #8
 1011014:	1a000006 	bne	1011034 <spi_command_tick+0x400>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011018:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101101c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1011020:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1011024:	e5913004 	ldr	r3, [r1, #4]
 1011028:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101102c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1011030:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011034:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1011038:	e2111008 	ands	r1, r1, #8
 101103c:	1a000006 	bne	101105c <spi_command_tick+0x428>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011040:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1011044:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1011048:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101104c:	e5913004 	ldr	r3, [r1, #4]
 1011050:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1011054:	e5813004 	str	r3, [r1, #4]
		return 1;
 1011058:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101105c:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1011060:	e2111008 	ands	r1, r1, #8
 1011064:	1a000006 	bne	1011084 <spi_command_tick+0x450>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011068:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 101106c:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1011070:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 1011074:	e5913004 	ldr	r3, [r1, #4]
 1011078:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101107c:	e5813004 	str	r3, [r1, #4]
		return 1;
 1011080:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011084:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 1011088:	e2111008 	ands	r1, r1, #8
 101108c:	1a000006 	bne	10110ac <spi_command_tick+0x478>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011090:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 1011094:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1011098:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 101109c:	e5913004 	ldr	r3, [r1, #4]
 10110a0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10110a4:	e5813004 	str	r3, [r1, #4]
		return 1;
 10110a8:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10110ac:	e5931004 	ldr	r1, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10110b0:	e2111008 	ands	r1, r1, #8
 10110b4:	1a000006 	bne	10110d4 <spi_command_tick+0x4a0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10110b8:	e5923004 	ldr	r3, [r2, #4]
	*LocalAddr = Value;
 10110bc:	e583101c 	str	r1, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10110c0:	e5921004 	ldr	r1, [r2, #4]
	return *(volatile u32 *) Addr;
 10110c4:	e5913004 	ldr	r3, [r1, #4]
 10110c8:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10110cc:	e5813004 	str	r3, [r1, #4]
		return 1;
 10110d0:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 10110d4:	e5930004 	ldr	r0, [r3, #4]
	if(!SPI_IS_TX_FULL()) {
 10110d8:	e2831004 	add	r1, r3, #4
 10110dc:	e2100008 	ands	r0, r0, #8
 10110e0:	0a000085 	beq	10112fc <spi_command_tick+0x6c8>
 10110e4:	e5913000 	ldr	r3, [r1]
 10110e8:	e2133008 	ands	r3, r3, #8
 10110ec:	1a000008 	bne	1011114 <spi_command_tick+0x4e0>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10110f0:	e5942158 	ldr	r2, [r4, #344]	; 0x158
 10110f4:	e5921004 	ldr	r1, [r2, #4]
	*LocalAddr = Value;
 10110f8:	e581301c 	str	r3, [r1, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10110fc:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 1011100:	e5923004 	ldr	r3, [r2, #4]
 1011104:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1011108:	e5823004 	str	r3, [r2, #4]
		return 1;
 101110c:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
 1011110:	e2811004 	add	r1, r1, #4
	return *(volatile u32 *) Addr;
 1011114:	e5913000 	ldr	r3, [r1]
	if(!SPI_IS_TX_FULL()) {
 1011118:	e2133008 	ands	r3, r3, #8
 101111c:	1a000008 	bne	1011144 <spi_command_tick+0x510>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011120:	e5942158 	ldr	r2, [r4, #344]	; 0x158
 1011124:	e5921004 	ldr	r1, [r2, #4]
	*LocalAddr = Value;
 1011128:	e581301c 	str	r3, [r1, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 101112c:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 1011130:	e5923004 	ldr	r3, [r2, #4]
 1011134:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1011138:	e5823004 	str	r3, [r2, #4]
		return 1;
 101113c:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
 1011140:	e2811004 	add	r1, r1, #4
	return *(volatile u32 *) Addr;
 1011144:	e5913000 	ldr	r3, [r1]
	if(!SPI_IS_TX_FULL()) {
 1011148:	e3130008 	tst	r3, #8
 101114c:	1a000007 	bne	1011170 <spi_command_tick+0x53c>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011150:	e5943158 	ldr	r3, [r4, #344]	; 0x158
	*LocalAddr = Value;
 1011154:	e3a010ff 	mov	r1, #255	; 0xff
 1011158:	e5932004 	ldr	r2, [r3, #4]
 101115c:	e582101c 	str	r1, [r2, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1011160:	e5932004 	ldr	r2, [r3, #4]
	return *(volatile u32 *) Addr;
 1011164:	e5923004 	ldr	r3, [r2, #4]
 1011168:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 101116c:	e5823004 	str	r3, [r2, #4]
			if(g_spi_state.resp_bytes <= SPI_RESPONSE_1BYTE_MAX) {
 1011170:	e3003bb4 	movw	r3, #2996	; 0xbb4
 1011174:	e19410b3 	ldrh	r1, [r4, r3]
 1011178:	e351007f 	cmp	r1, #127	; 0x7f
 101117c:	8a000040 	bhi	1011284 <spi_command_tick+0x650>
	if(!SPI_IS_TX_FULL()) {
 1011180:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 1011184:	e5933004 	ldr	r3, [r3, #4]
 1011188:	e3130008 	tst	r3, #8
 101118c:	1a000006 	bne	10111ac <spi_command_tick+0x578>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 1011190:	e5943158 	ldr	r3, [r4, #344]	; 0x158
 1011194:	e5932004 	ldr	r2, [r3, #4]
	*LocalAddr = Value;
 1011198:	e582101c 	str	r1, [r2, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 101119c:	e5932004 	ldr	r2, [r3, #4]
	return *(volatile u32 *) Addr;
 10111a0:	e5923004 	ldr	r3, [r2, #4]
 10111a4:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10111a8:	e5823004 	str	r3, [r2, #4]
			sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 10111ac:	e351003f 	cmp	r1, #63	; 0x3f
			g_spi_state.resp_bytes -= sent_bytes;
 10111b0:	e3005bb4 	movw	r5, #2996	; 0xbb4
			sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 10111b4:	23a0103f 	movcs	r1, #63	; 0x3f
 10111b8:	e5940bb0 	ldr	r0, [r4, #2992]	; 0xbb0
 10111bc:	ebfffdee 	bl	101097c <spi_transmit_packet_nonblock>
			g_spi_state.resp_bytes -= sent_bytes;
 10111c0:	e19420b5 	ldrh	r2, [r4, r5]
			sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 10111c4:	e1a0c000 	mov	ip, r0
			g_spi_state.resp_data_ptr += sent_bytes;
 10111c8:	e5943bb0 	ldr	r3, [r4, #2992]	; 0xbb0
			SPI_SCUGIC_ENABLE();
 10111cc:	e3090b80 	movw	r0, #39808	; 0x9b80
 10111d0:	e3400145 	movt	r0, #325	; 0x145
 10111d4:	e3a0103a 	mov	r1, #58	; 0x3a
			g_spi_state.resp_bytes -= sent_bytes;
 10111d8:	e042200c 	sub	r2, r2, ip
			g_spi_state.resp_data_ptr += sent_bytes;
 10111dc:	e083300c 	add	r3, r3, ip
			g_spi_state.resp_bytes -= sent_bytes;
 10111e0:	e18420b5 	strh	r2, [r4, r5]
			g_spi_state.resp_data_ptr += sent_bytes;
 10111e4:	e5843bb0 	str	r3, [r4, #2992]	; 0xbb0
			SPI_SCUGIC_ENABLE();
 10111e8:	eb0013c4 	bl	1016100 <XScuGic_Enable>
			if(g_spi_state.resp_bytes > 0) {
 10111ec:	e19430b5 	ldrh	r3, [r4, r5]
 10111f0:	e3530000 	cmp	r3, #0
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_RESP_CONT;
 10111f4:	13a03004 	movne	r3, #4
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 10111f8:	03a03005 	moveq	r3, #5
				res = SPIENGINE_WORKING;  // Tell outer task that we're still busy
 10111fc:	13a05002 	movne	r5, #2
	res = SPIENGINE_IDLE;
 1011200:	03a05001 	moveq	r5, #1
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 1011204:	e5843bc0 	str	r3, [r4, #3008]	; 0xbc0
	GLOBAL_IRQ_ENABLE();
 1011208:	f1080080 	cpsie	i
}
 101120c:	e1a00005 	mov	r0, r5
 1011210:	e28dd014 	add	sp, sp, #20
 1011214:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			if(!SPI_IS_TX_OVERWATER()) {
 1011218:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
	return *(volatile u32 *) Addr;
 101121c:	e5933004 	ldr	r3, [r3, #4]
 1011220:	e3130004 	tst	r3, #4
 1011224:	0a000011 	beq	1011270 <spi_command_tick+0x63c>
				tx_bytes = MIN(g_spi_state.resp_bytes, SPI_RESPONSE_PACK_SIZE);
 1011228:	e3005bb4 	movw	r5, #2996	; 0xbb4
				sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 101122c:	e5940bb0 	ldr	r0, [r4, #2992]	; 0xbb0
				tx_bytes = MIN(g_spi_state.resp_bytes, SPI_RESPONSE_PACK_SIZE);
 1011230:	e19410b5 	ldrh	r1, [r4, r5]
				sent_bytes = spi_transmit_packet_nonblock(g_spi_state.resp_data_ptr, tx_bytes);
 1011234:	e351003f 	cmp	r1, #63	; 0x3f
 1011238:	23a0103f 	movcs	r1, #63	; 0x3f
 101123c:	ebfffdce 	bl	101097c <spi_transmit_packet_nonblock>
				g_spi_state.resp_bytes -= sent_bytes;
 1011240:	e19430b5 	ldrh	r3, [r4, r5]
				g_spi_state.resp_data_ptr += sent_bytes;
 1011244:	e5942bb0 	ldr	r2, [r4, #2992]	; 0xbb0
				g_spi_state.resp_bytes -= sent_bytes;
 1011248:	e0433000 	sub	r3, r3, r0
 101124c:	e6ff3073 	uxth	r3, r3
				g_spi_state.resp_data_ptr += sent_bytes;
 1011250:	e0822000 	add	r2, r2, r0
 1011254:	e5842bb0 	str	r2, [r4, #2992]	; 0xbb0
				if(g_spi_state.resp_bytes <= 0) {
 1011258:	e3530000 	cmp	r3, #0
				g_spi_state.resp_bytes -= sent_bytes;
 101125c:	e18430b5 	strh	r3, [r4, r5]
					g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 1011260:	03a03005 	moveq	r3, #5
			res = SPIENGINE_WORKING;
 1011264:	03a05002 	moveq	r5, #2
					g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_DONE_WAIT;
 1011268:	05843bc0 	streq	r3, [r4, #3008]	; 0xbc0
 101126c:	0afffea5 	beq	1010d08 <spi_command_tick+0xd4>
			res = SPIENGINE_WORKING;
 1011270:	e3a05002 	mov	r5, #2
	GLOBAL_IRQ_ENABLE();
 1011274:	f1080080 	cpsie	i
}
 1011278:	e1a00005 	mov	r0, r5
 101127c:	e28dd014 	add	sp, sp, #20
 1011280:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			} else if(g_spi_state.resp_bytes <= SPI_RESPONSE_2BYTE_MAX) {
 1011284:	e3510c7f 	cmp	r1, #32512	; 0x7f00
 1011288:	2affffc7 	bcs	10111ac <spi_command_tick+0x578>
	if(!SPI_IS_TX_FULL()) {
 101128c:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
 1011290:	e5932004 	ldr	r2, [r3, #4]
 1011294:	e2833004 	add	r3, r3, #4
 1011298:	e3120008 	tst	r2, #8
 101129c:	1a00000a 	bne	10112cc <spi_command_tick+0x698>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10112a0:	e5942158 	ldr	r2, [r4, #344]	; 0x158
				spi_transmit(0x80 + (g_spi_state.resp_bytes / 256));
 10112a4:	e1a03421 	lsr	r3, r1, #8
 10112a8:	e2233080 	eor	r3, r3, #128	; 0x80
 10112ac:	e5920004 	ldr	r0, [r2, #4]
	*LocalAddr = Value;
 10112b0:	e580301c 	str	r3, [r0, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10112b4:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 10112b8:	e5923004 	ldr	r3, [r2, #4]
 10112bc:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10112c0:	e5823004 	str	r3, [r2, #4]
		return 1;
 10112c4:	e594312c 	ldr	r3, [r4, #300]	; 0x12c
 10112c8:	e2833004 	add	r3, r3, #4
	return *(volatile u32 *) Addr;
 10112cc:	e5933000 	ldr	r3, [r3]
	if(!SPI_IS_TX_FULL()) {
 10112d0:	e3130008 	tst	r3, #8
 10112d4:	1affffb4 	bne	10111ac <spi_command_tick+0x578>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10112d8:	e5942158 	ldr	r2, [r4, #344]	; 0x158
 10112dc:	e6ef3071 	uxtb	r3, r1
 10112e0:	e5920004 	ldr	r0, [r2, #4]
	*LocalAddr = Value;
 10112e4:	e580301c 	str	r3, [r0, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 10112e8:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 10112ec:	e5923004 	ldr	r3, [r2, #4]
 10112f0:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 10112f4:	e5823004 	str	r3, [r2, #4]
		return 1;
 10112f8:	eaffffab 	b	10111ac <spi_command_tick+0x578>
		XSpiPs_WriteReg(g_spi_state.spi_config->BaseAddress, XSPIPS_TXD_OFFSET, byte);
 10112fc:	e5923004 	ldr	r3, [r2, #4]
 1011300:	e583001c 	str	r0, [r3, #28]
		SPI_CLEAR_TX_UNDERFLOW();
 1011304:	e5922004 	ldr	r2, [r2, #4]
	return *(volatile u32 *) Addr;
 1011308:	e5923004 	ldr	r3, [r2, #4]
 101130c:	e3833040 	orr	r3, r3, #64	; 0x40
	*LocalAddr = Value;
 1011310:	e5823004 	str	r3, [r2, #4]
		return 1;
 1011314:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
 1011318:	e2811004 	add	r1, r1, #4
 101131c:	eaffff70 	b	10110e4 <spi_command_tick+0x4b0>
					d_printf(D_WARN, "spi: command idx %d has error", proc_cmd->alloc_idx);
 1011320:	e3081ffc 	movw	r1, #36860	; 0x8ffc
 1011324:	e3a00003 	mov	r0, #3
 1011328:	e3401106 	movt	r1, #262	; 0x106
 101132c:	ebfff273 	bl	100dd00 <d_printf>
 1011330:	e5962000 	ldr	r2, [r6]
 1011334:	eafffea0 	b	1010dbc <spi_command_tick+0x188>
				g_spi_state.resp_bytes = proc_cmd->resp_size;
 1011338:	e596101c 	ldr	r1, [r6, #28]
 101133c:	e3002bb4 	movw	r2, #2996	; 0xbb4
				g_spi_state.resp_data_ptr = proc_cmd->resp_data;
 1011340:	e5963020 	ldr	r3, [r6, #32]
				g_spi_state.proc_state = SPIPROC_STATE_OUTPUT_RESP_INIT;
 1011344:	e3a00003 	mov	r0, #3
 1011348:	e5840bc0 	str	r0, [r4, #3008]	; 0xbc0
				g_spi_state.resp_bytes = proc_cmd->resp_size;
 101134c:	e18410b2 	strh	r1, [r4, r2]
				g_spi_state.resp_data_ptr = proc_cmd->resp_data;
 1011350:	e5843bb0 	str	r3, [r4, #2992]	; 0xbb0
				res = SPIENGINE_WORKING;  // Tell outer task that we're still busy
 1011354:	eafffe6b 	b	1010d08 <spi_command_tick+0xd4>
			D_ASSERT(g_spi_state.resp_bytes <= SPI_RESPONSE_2BYTE_MAX);
 1011358:	e3083f64 	movw	r3, #36708	; 0x8f64
 101135c:	e309201c 	movw	r2, #36892	; 0x901c
 1011360:	e30619f0 	movw	r1, #27120	; 0x69f0
 1011364:	e3403106 	movt	r3, #262	; 0x106
 1011368:	e3402106 	movt	r2, #262	; 0x106
 101136c:	e3000281 	movw	r0, #641	; 0x281
 1011370:	e58d0000 	str	r0, [sp]
	D_ASSERT(cmd->resp_data != NULL);
 1011374:	e3a00004 	mov	r0, #4
 1011378:	e3401106 	movt	r1, #262	; 0x106
 101137c:	ebfff25f 	bl	100dd00 <d_printf>
 1011380:	e3e00062 	mvn	r0, #98	; 0x62
 1011384:	fa002429 	blx	101a430 <exit>
 1011388:	e3000152 	movw	r0, #338	; 0x152
 101138c:	e3093050 	movw	r3, #36944	; 0x9050
 1011390:	e3092060 	movw	r2, #36960	; 0x9060
 1011394:	e30619f0 	movw	r1, #27120	; 0x69f0
 1011398:	e58d0000 	str	r0, [sp]
 101139c:	e3403106 	movt	r3, #262	; 0x106
 10113a0:	e3402106 	movt	r2, #262	; 0x106
 10113a4:	eafffff2 	b	1011374 <spi_command_tick+0x740>
	res = SPIENGINE_IDLE;
 10113a8:	e3a05001 	mov	r5, #1
 10113ac:	eafffe55 	b	1010d08 <spi_command_tick+0xd4>

010113b0 <spicmd_csi_setup_wave_range>:
	mipi_csi_queue_buffer(start_addr, end_addr);
}

void spicmd_csi_setup_wave_range(struct spi_command_alloc_t *cmd)
{
}
 10113b0:	e12fff1e 	bx	lr

010113b4 <spicmd_hello>:
{
 10113b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	spi_command_pack_response_simple(cmd, resp_buffer, 4);
 10113b8:	e3a02004 	mov	r2, #4
	uint8_t resp_buffer[] = { 0x55, 0xcc, cmd->args[0], cmd->args[1] };
 10113bc:	e5d0e009 	ldrb	lr, [r0, #9]
{
 10113c0:	e24dd00c 	sub	sp, sp, #12
	uint8_t resp_buffer[] = { 0x55, 0xcc, cmd->args[0], cmd->args[1] };
 10113c4:	e30c3c55 	movw	r3, #52309	; 0xcc55
	spi_command_pack_response_simple(cmd, resp_buffer, 4);
 10113c8:	e08d1002 	add	r1, sp, r2
	uint8_t resp_buffer[] = { 0x55, 0xcc, cmd->args[0], cmd->args[1] };
 10113cc:	e5d0c00a 	ldrb	ip, [r0, #10]
 10113d0:	e34f3fff 	movt	r3, #65535	; 0xffff
 10113d4:	e1cd30b4 	strh	r3, [sp, #4]
 10113d8:	e5cde006 	strb	lr, [sp, #6]
 10113dc:	e5cdc007 	strb	ip, [sp, #7]
	spi_command_pack_response_simple(cmd, resp_buffer, 4);
 10113e0:	ebfffdd6 	bl	1010b40 <spi_command_pack_response_simple>
}
 10113e4:	e28dd00c 	add	sp, sp, #12
 10113e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

010113ec <spicmd_version>:
	spi_command_pack_response_simple(cmd, &g_version_resp, sizeof(g_version_resp));
 10113ec:	e30b1430 	movw	r1, #46128	; 0xb430
 10113f0:	e3a02010 	mov	r2, #16
 10113f4:	e3401145 	movt	r1, #325	; 0x145
 10113f8:	eafffdd0 	b	1010b40 <spi_command_pack_response_simple>

010113fc <spicmd_stats>:
{
 10113fc:	e92d4010 	push	{r4, lr}
 1011400:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
	resp.spi_stats = g_spi_state.stats;
 1011404:	e3a02068 	mov	r2, #104	; 0x68
 1011408:	e59f104c 	ldr	r1, [pc, #76]	; 101145c <spicmd_stats+0x60>
{
 101140c:	e1a04000 	mov	r4, r0
	resp.spi_stats = g_spi_state.stats;
 1011410:	e1a0000d 	mov	r0, sp
 1011414:	eb002979 	bl	101ba00 <memcpy>
	resp.acq_stats = g_acq_state.stats;
 1011418:	e3a02068 	mov	r2, #104	; 0x68
 101141c:	e59f103c 	ldr	r1, [pc, #60]	; 1011460 <spicmd_stats+0x64>
 1011420:	e08d0002 	add	r0, sp, r2
 1011424:	eb002975 	bl	101ba00 <memcpy>
	uint8_t *resp2 = (uint8_t*)&resp;
 1011428:	e1a0100d 	mov	r1, sp
	for(i = 0; i < sizeof(resp); i++) {
 101142c:	e3a02000 	mov	r2, #0
		*resp2++ = 'A' + (i & 31);
 1011430:	e202301f 	and	r3, r2, #31
	for(i = 0; i < sizeof(resp); i++) {
 1011434:	e2822001 	add	r2, r2, #1
 1011438:	e35200d0 	cmp	r2, #208	; 0xd0
		*resp2++ = 'A' + (i & 31);
 101143c:	e2833041 	add	r3, r3, #65	; 0x41
 1011440:	e4c13001 	strb	r3, [r1], #1
	for(i = 0; i < sizeof(resp); i++) {
 1011444:	1afffff9 	bne	1011430 <spicmd_stats+0x34>
	spi_command_pack_response_simple(cmd, &resp, sizeof(struct spi_cmd_resp_stats_t));
 1011448:	e1a0100d 	mov	r1, sp
 101144c:	e1a00004 	mov	r0, r4
 1011450:	ebfffdba 	bl	1010b40 <spi_command_pack_response_simple>
}
 1011454:	e28dd0d0 	add	sp, sp, #208	; 0xd0
 1011458:	e8bd8010 	pop	{r4, pc}
 101145c:	014634a0 	.word	0x014634a0
 1011460:	01459a88 	.word	0x01459a88

01011464 <spicmd_acq_setup_trigd>:
{
 1011464:	e1a03000 	mov	r3, r0
 1011468:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 101146c:	e5904009 	ldr	r4, [r0, #9]
 1011470:	e24dd00c 	sub	sp, sp, #12
	d_printf(D_INFO, "spi: new acquisition (pre:%d, post:%d, mode:0x%02x, wavect:%d)", pre_sz, post_sz, mode, wavect);
 1011474:	e3091078 	movw	r1, #36984	; 0x9078
 1011478:	e590500d 	ldr	r5, [r0, #13]
 101147c:	e3401106 	movt	r1, #262	; 0x106
 1011480:	e5936011 	ldr	r6, [r3, #17]
 1011484:	e6bf4f34 	rev	r4, r4
	mode = cmd->args[12];
 1011488:	e5d37015 	ldrb	r7, [r3, #21]
	d_printf(D_INFO, "spi: new acquisition (pre:%d, post:%d, mode:0x%02x, wavect:%d)", pre_sz, post_sz, mode, wavect);
 101148c:	e1a02004 	mov	r2, r4
 1011490:	e6bf5f35 	rev	r5, r5
 1011494:	e3a00002 	mov	r0, #2
 1011498:	e6bf6f36 	rev	r6, r6
 101149c:	e1a03005 	mov	r3, r5
 10114a0:	e58d6004 	str	r6, [sp, #4]
 10114a4:	e58d7000 	str	r7, [sp]
 10114a8:	ebfff214 	bl	100dd00 <d_printf>
	status = acq_prepare_triggered(mode, pre_sz, post_sz, wavect);
 10114ac:	e1a02005 	mov	r2, r5
 10114b0:	e1a01004 	mov	r1, r4
 10114b4:	e1a03006 	mov	r3, r6
 10114b8:	e1a00007 	mov	r0, r7
 10114bc:	ebffe6df 	bl	100b040 <acq_prepare_triggered>
	d_printf(D_INFO, "spi: new acquisition status=%d", status);
 10114c0:	e30910b8 	movw	r1, #37048	; 0x90b8
 10114c4:	e1a02000 	mov	r2, r0
 10114c8:	e3401106 	movt	r1, #262	; 0x106
 10114cc:	e3a00002 	mov	r0, #2
}
 10114d0:	e28dd00c 	add	sp, sp, #12
 10114d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "spi: new acquisition status=%d", status);
 10114d8:	eafff208 	b	100dd00 <d_printf>

010114dc <spicmd_acq_start>:
{
 10114dc:	e92d4010 	push	{r4, lr}
	status = acq_start(cmd->args[0] & 0x01);
 10114e0:	e5d00009 	ldrb	r0, [r0, #9]
 10114e4:	e2000001 	and	r0, r0, #1
 10114e8:	ebffe832 	bl	100b5b8 <acq_start>
	if(status != ACQRES_OK) {
 10114ec:	e2502000 	subs	r2, r0, #0
 10114f0:	08bd8010 	popeq	{r4, pc}
		d_printf(D_ERROR, "spi: acquistion unable to start: %d", status);
 10114f4:	e30910d8 	movw	r1, #37080	; 0x90d8
 10114f8:	e3a00004 	mov	r0, #4
 10114fc:	e3401106 	movt	r1, #262	; 0x106
}
 1011500:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "spi: acquistion unable to start: %d", status);
 1011504:	eafff1fd 	b	100dd00 <d_printf>

01011508 <spicmd_acq_stop>:
{
 1011508:	e92d4010 	push	{r4, lr}
	status = acq_stop();
 101150c:	ebffe884 	bl	100b724 <acq_stop>
	if(status != ACQRES_OK) {
 1011510:	e2502000 	subs	r2, r0, #0
 1011514:	08bd8010 	popeq	{r4, pc}
		d_printf(D_ERROR, "spi: acquistion unable to stop: %d", status);
 1011518:	e30910fc 	movw	r1, #37116	; 0x90fc
 101151c:	e3a00004 	mov	r0, #4
 1011520:	e3401106 	movt	r1, #262	; 0x106
}
 1011524:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "spi: acquistion unable to stop: %d", status);
 1011528:	eafff1f4 	b	100dd00 <d_printf>

0101152c <spicmd_acq_rewind>:
	acq_rewind();
 101152c:	eaffe675 	b	100af08 <acq_rewind>

01011530 <spicmd_acq_status>:
{
 1011530:	e92d4010 	push	{r4, lr}
 1011534:	e24dd008 	sub	sp, sp, #8
 1011538:	e1a04000 	mov	r4, r0
	acq_make_status(&status_resp);
 101153c:	e1a0000d 	mov	r0, sp
 1011540:	ebffe8a2 	bl	100b7d0 <acq_make_status>
	spi_command_pack_response_simple(cmd, &status_resp, sizeof(struct acq_status_resp_t));
 1011544:	e1a0100d 	mov	r1, sp
 1011548:	e1a00004 	mov	r0, r4
 101154c:	e3a02006 	mov	r2, #6
 1011550:	ebfffd7a 	bl	1010b40 <spi_command_pack_response_simple>
}
 1011554:	e28dd008 	add	sp, sp, #8
 1011558:	e8bd8010 	pop	{r4, pc}

0101155c <spicmd_trig_configure_edge>:
{
 101155c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	hyst = UINT16_UNPACK(cmd, 4);
 1011560:	e5d0e00d 	ldrb	lr, [r0, #13]
 1011564:	e5d0200e 	ldrb	r2, [r0, #14]
	lvl = UINT16_UNPACK(cmd, 2);
 1011568:	e5d0c00b 	ldrb	ip, [r0, #11]
 101156c:	e5d0100c 	ldrb	r1, [r0, #12]
	trig_configure_edge(ch, lvl, hyst, edge);
 1011570:	e5d0300a 	ldrb	r3, [r0, #10]
 1011574:	e182240e 	orr	r2, r2, lr, lsl #8
 1011578:	e5d00009 	ldrb	r0, [r0, #9]
}
 101157c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	trig_configure_edge(ch, lvl, hyst, edge);
 1011580:	e181140c 	orr	r1, r1, ip, lsl #8
 1011584:	ea0001c4 	b	1011c9c <trig_configure_edge>

01011588 <spicmd_trig_configure_always>:
	trig_configure_always();
 1011588:	ea0001b3 	b	1011c5c <trig_configure_always>

0101158c <spicmd_trig_force>:
	trig_force();
 101158c:	ea000319 	b	10121f8 <trig_force>

01011590 <spicmd_trig_arm>:
	trig_arm();
 1011590:	ea00030c 	b	10121c8 <trig_arm>

01011594 <spicmd_trig_disarm>:
	trig_disarm();
 1011594:	ea000311 	b	10121e0 <trig_disarm>

01011598 <spicmd_csi_setup_addr_range>:
	start_addr = UINT32_UNPACK(cmd, 0);
 1011598:	e590100d 	ldr	r1, [r0, #13]
 101159c:	e5903009 	ldr	r3, [r0, #9]
	mipi_csi_queue_buffer(start_addr, end_addr);
 10115a0:	e6bf1f31 	rev	r1, r1
 10115a4:	e6bf0f33 	rev	r0, r3
 10115a8:	eafff524 	b	100ea40 <mipi_csi_queue_buffer>

010115ac <spicmd_csi_set_params_queue>:
}

void spicmd_csi_set_params_queue(struct spi_command_alloc_t *cmd)
{
	uint8_t data_type = cmd->args[2];
	uint16_t wct = UINT16_UNPACK(cmd, 0);
 10115ac:	e5d01009 	ldrb	r1, [r0, #9]
 10115b0:	e5d0300a 	ldrb	r3, [r0, #10]

	mipi_csi_set_datatype_and_frame_wct(data_type, wct);
 10115b4:	e5d0000b 	ldrb	r0, [r0, #11]
 10115b8:	e1831401 	orr	r1, r3, r1, lsl #8
 10115bc:	eafff4d0 	b	100e904 <mipi_csi_set_datatype_and_frame_wct>

010115c0 <spicmd_csi_stream_clear_queue>:
}

void spicmd_csi_stream_clear_queue(struct spi_command_alloc_t *cmd)
{
	mipi_csi_clear_queue();
 10115c0:	eafff934 	b	100fa98 <mipi_csi_clear_queue>

010115c4 <spicmd_csi_stream_unpop_start>:
}

void spicmd_csi_stream_unpop_start(struct spi_command_alloc_t *cmd)
{
	mipi_csi_unpop_and_start();
 10115c4:	eafff94c 	b	100fafc <mipi_csi_unpop_and_start>

010115c8 <spicmd_csi_stream_stop>:
}

void spicmd_csi_stream_stop(struct spi_command_alloc_t *cmd)
{
	mipi_csi_stop();
 10115c8:	eafff962 	b	100fb58 <mipi_csi_stop>

010115cc <spicmd_csi_status>:
}

void spicmd_csi_status(struct spi_command_alloc_t *cmd)
{
 10115cc:	e92d4010 	push	{r4, lr}
 10115d0:	e24dd008 	sub	sp, sp, #8
 10115d4:	e1a04000 	mov	r4, r0
	struct mipi_csi_status_t status_resp;

	//d_printf(D_INFO, "StaReq");

	mipi_csi_get_status(&status_resp);
 10115d8:	e1a0000d 	mov	r0, sp
 10115dc:	ebfff985 	bl	100fbf8 <mipi_csi_get_status>
	spi_command_pack_response_simple(cmd, &status_resp, sizeof(struct mipi_csi_status_t));
 10115e0:	e1a0100d 	mov	r1, sp
 10115e4:	e1a00004 	mov	r0, r4
 10115e8:	e3a02008 	mov	r2, #8
 10115ec:	ebfffd53 	bl	1010b40 <spi_command_pack_response_simple>
}
 10115f0:	e28dd008 	add	sp, sp, #8
 10115f4:	e8bd8010 	pop	{r4, pc}

010115f8 <spicmd_comp0>:
/*
 * Composite command 0.  This command can control acquisition stop/start/rewind/swap,
 * as well as start streaming CSI data and return previously configured measurements.
 */
void spicmd_comp0(struct spi_command_alloc_t *cmd)
{
 10115f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 10115fc:	e1a06000 	mov	r6, r0
								  sizeof(struct mipi_tx_size_resp_t);

	struct acq_status_resp_t acq_status_resp;
	struct mipi_tx_size_resp_t mipi_tx_size_resp;

	uint16_t func = UINT16_UNPACK(cmd, 0);
 1011600:	e5d03009 	ldrb	r3, [r0, #9]
{
 1011604:	e24dd024 	sub	sp, sp, #36	; 0x24
	uint16_t func = UINT16_UNPACK(cmd, 0);
 1011608:	e5d0400a 	ldrb	r4, [r0, #10]
 101160c:	e1844403 	orr	r4, r4, r3, lsl #8
	int resp_size = 0, size = 0;

	//acq_debug_dump();

	// Commands below must be executed in order to create the right behaviour...
	if(func & SPICOMP0_ACQ_STOP) {
 1011610:	e3140001 	tst	r4, #1
 1011614:	0a000004 	beq	101162c <spicmd_comp0+0x34>
/*
 * Return the state of the engine.
 */
inline int acq_get_state()
{
	return g_acq_state.state;
 1011618:	e30932e0 	movw	r3, #37600	; 0x92e0
 101161c:	e3403145 	movt	r3, #325	; 0x145
		if(acq_get_state() != ACQSTATE_STOPPED) {
 1011620:	e5933000 	ldr	r3, [r3]
 1011624:	e3530001 	cmp	r3, #1
 1011628:	1a00002a 	bne	10116d8 <spicmd_comp0+0xe0>
			acq_stop();
		}
	}

	if(func & SPICOMP0_ACQ_GET_STATUS) {
 101162c:	e2145002 	ands	r5, r4, #2
 1011630:	1a00002b 	bne	10116e4 <spicmd_comp0+0xec>
		acq_make_status(&acq_status_resp);
	}

	//d_printf(D_INFO, "w:%d", acq_status_resp.waves_done);

	if(func & SPICOMP0_RESP_CSI_SIZE) {
 1011634:	e2147a01 	ands	r7, r4, #4096	; 0x1000
 1011638:	1a00002d 	bne	10116f4 <spicmd_comp0+0xfc>
		mipi_csi_get_size_report(&mipi_tx_size_resp);
	}

	if(func & SPICOMP0_ACQ_REWIND) {
 101163c:	e3140004 	tst	r4, #4
 1011640:	1a00002f 	bne	1011704 <spicmd_comp0+0x10c>
		acq_rewind();
	}

	if(func & SPICOMP0_ACQ_START_RESFIFO) {
 1011644:	e2140008 	ands	r0, r4, #8
 1011648:	1a000030 	bne	1011710 <spicmd_comp0+0x118>
		acq_start(1);
	} else if(func & SPICOMP0_ACQ_START_NORESFIFO) {
 101164c:	e3140010 	tst	r4, #16
 1011650:	1a000038 	bne	1011738 <spicmd_comp0+0x140>
		acq_start(0);
	}

	if(func & SPICOMP0_ACQ_SWAP) {
 1011654:	e3140020 	tst	r4, #32
 1011658:	1a000030 	bne	1011720 <spicmd_comp0+0x128>
		acq_swap();
	}

	if(func & SPICOMP0_SEND_CSI_WAVES) {
 101165c:	e3140040 	tst	r4, #64	; 0x40
 1011660:	1a000031 	bne	101172c <spicmd_comp0+0x134>
	/*
	 * Check what we need to pack into the response buffer.  Malloc enough bytes for everything
	 * to be added, but calculate the actual size later.  free() will be called when the transmission
	 * is completed for this packet.
	 */
	resp_buffer_base = calloc(resp_buff_maxsize, 1);
 1011664:	e3a01001 	mov	r1, #1
 1011668:	e3a00012 	mov	r0, #18
 101166c:	fa002351 	blx	101a3b8 <calloc>
	D_ASSERT(resp_buffer_base != NULL);
 1011670:	e2503000 	subs	r3, r0, #0
 1011674:	0a000031 	beq	1011740 <spicmd_comp0+0x148>
	resp_buffer = resp_buffer_base;

	//d_printf(D_INFO, "resp_buffer=0x%08x, resp_size=%d", resp_buffer, resp_buff_maxsize);

	if(func & SPICOMP0_ACQ_GET_STATUS) {
 1011678:	e3550000 	cmp	r5, #0
		size = sizeof(struct acq_status_resp_t);
		memcpy(resp_buffer, &acq_status_resp, size);
 101167c:	128d200c 	addne	r2, sp, #12
		resp_buffer += size;
 1011680:	1283e006 	addne	lr, r3, #6
		memcpy(resp_buffer, &acq_status_resp, size);
 1011684:	18920003 	ldmne	r2, {r0, r1}
		//d_printf(D_INFO, "resp_buffer=0x%08x acq_status_ptr=0x%08x size=%d", resp_buffer, &acq_status_resp, size);
		resp_size += size;
 1011688:	13a05006 	movne	r5, #6
		resp_buffer += size;
 101168c:	13a02012 	movne	r2, #18
 1011690:	01a0e003 	moveq	lr, r3
 1011694:	03a0200c 	moveq	r2, #12
		memcpy(resp_buffer, &acq_status_resp, size);
 1011698:	15830000 	strne	r0, [r3]
 101169c:	11c310b4 	strhne	r1, [r3, #4]
	}

	if(func & SPICOMP0_RESP_CSI_SIZE) {
 10116a0:	e3570000 	cmp	r7, #0
 10116a4:	0a000005 	beq	10116c0 <spicmd_comp0+0xc8>
		size = sizeof(struct mipi_tx_size_resp_t);
		memcpy(resp_buffer, &mipi_tx_size_resp, size);
 10116a8:	e28dc014 	add	ip, sp, #20
		resp_buffer += size;
		//d_printf(D_INFO, "resp_buffer=0x%08x csi_status_ptr=0x%08x size=%d", resp_buffer, &mipi_tx_size_resp, size);
		resp_size += size;
 10116ac:	e1a05002 	mov	r5, r2
		memcpy(resp_buffer, &mipi_tx_size_resp, size);
 10116b0:	e8bc0007 	ldm	ip!, {r0, r1, r2}
 10116b4:	e58e0000 	str	r0, [lr]
 10116b8:	e58e1004 	str	r1, [lr, #4]
 10116bc:	e58e2008 	str	r2, [lr, #8]
	}

	//d_printf(D_INFO, "resp_buffer=0x%08x resp_size=%d", resp_buffer_base, resp_size);
	spi_command_pack_response_pre_alloc(cmd, resp_buffer_base, resp_size);
 10116c0:	e1a02005 	mov	r2, r5
 10116c4:	e1a01003 	mov	r1, r3
 10116c8:	e1a00006 	mov	r0, r6
 10116cc:	ebfffd3f 	bl	1010bd0 <spi_command_pack_response_pre_alloc>
	//free(resp_buffer);
	//d_printf(D_INFO, "done");

	//spi_command_pack_response_simple(cmd, &acq_status_resp, 1);
	//d_printf(D_INFO, "eof");
}
 10116d0:	e28dd024 	add	sp, sp, #36	; 0x24
 10116d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			acq_stop();
 10116d8:	ebffe811 	bl	100b724 <acq_stop>
	if(func & SPICOMP0_ACQ_GET_STATUS) {
 10116dc:	e2145002 	ands	r5, r4, #2
 10116e0:	0affffd3 	beq	1011634 <spicmd_comp0+0x3c>
		acq_make_status(&acq_status_resp);
 10116e4:	e28d000c 	add	r0, sp, #12
 10116e8:	ebffe838 	bl	100b7d0 <acq_make_status>
	if(func & SPICOMP0_RESP_CSI_SIZE) {
 10116ec:	e2147a01 	ands	r7, r4, #4096	; 0x1000
 10116f0:	0affffd1 	beq	101163c <spicmd_comp0+0x44>
		mipi_csi_get_size_report(&mipi_tx_size_resp);
 10116f4:	e28d0014 	add	r0, sp, #20
 10116f8:	ebfff95d 	bl	100fc74 <mipi_csi_get_size_report>
	if(func & SPICOMP0_ACQ_REWIND) {
 10116fc:	e3140004 	tst	r4, #4
 1011700:	0affffcf 	beq	1011644 <spicmd_comp0+0x4c>
		acq_rewind();
 1011704:	ebffe5ff 	bl	100af08 <acq_rewind>
	if(func & SPICOMP0_ACQ_START_RESFIFO) {
 1011708:	e2140008 	ands	r0, r4, #8
 101170c:	0affffce 	beq	101164c <spicmd_comp0+0x54>
		acq_start(1);
 1011710:	e3a00001 	mov	r0, #1
 1011714:	ebffe7a7 	bl	100b5b8 <acq_start>
	if(func & SPICOMP0_ACQ_SWAP) {
 1011718:	e3140020 	tst	r4, #32
 101171c:	0affffce 	beq	101165c <spicmd_comp0+0x64>
		acq_swap();
 1011720:	ebffe613 	bl	100af74 <acq_swap>
	if(func & SPICOMP0_SEND_CSI_WAVES) {
 1011724:	e3140040 	tst	r4, #64	; 0x40
 1011728:	0affffcd 	beq	1011664 <spicmd_comp0+0x6c>
		mipi_csi_queue_all_waves();
 101172c:	ebfff559 	bl	100ec98 <mipi_csi_queue_all_waves>
		mipi_csi_unpop_and_start_all();
 1011730:	ebfff8fd 	bl	100fb2c <mipi_csi_unpop_and_start_all>
 1011734:	eaffffca 	b	1011664 <spicmd_comp0+0x6c>
		acq_start(0);
 1011738:	ebffe79e 	bl	100b5b8 <acq_start>
 101173c:	eaffffc4 	b	1011654 <spicmd_comp0+0x5c>
	D_ASSERT(resp_buffer_base != NULL);
 1011740:	e3a00f62 	mov	r0, #392	; 0x188
 1011744:	e3093120 	movw	r3, #37152	; 0x9120
 1011748:	e3092138 	movw	r2, #37176	; 0x9138
 101174c:	e30619f0 	movw	r1, #27120	; 0x69f0
 1011750:	e58d0000 	str	r0, [sp]
 1011754:	e3403106 	movt	r3, #262	; 0x106
 1011758:	e3a00004 	mov	r0, #4
 101175c:	e3402106 	movt	r2, #262	; 0x106
 1011760:	e3401106 	movt	r1, #262	; 0x106
 1011764:	ebfff165 	bl	100dd00 <d_printf>
 1011768:	e3e00062 	mvn	r0, #98	; 0x62
 101176c:	fa00232f 	blx	101a430 <exit>

01011770 <spicmd_csi_setup_testpatt>:
	switch(testpatt) {
 1011770:	e5d03009 	ldrb	r3, [r0, #9]
 1011774:	e3530001 	cmp	r3, #1
 1011778:	112fff1e 	bxne	lr
	mipi_csi_queue_buffer((uint32_t)base, (uint32_t)(base + size));
 101177c:	e59f1004 	ldr	r1, [pc, #4]	; 1011788 <spicmd_csi_setup_testpatt+0x18>
 1011780:	e2410701 	sub	r0, r1, #262144	; 0x40000
 1011784:	eafff4ad 	b	100ea40 <mipi_csi_queue_buffer>
 1011788:	01066148 	.word	0x01066148

0101178c <spicmd_csi_setup_trigpos_all>:
 101178c:	e12fff1e 	bx	lr

01011790 <spicmd_csi_setup_bitpack_wave>:
 1011790:	e12fff1e 	bx	lr

01011794 <spicmd_csi_setup_wave_all>:
 1011794:	e12fff1e 	bx	lr

01011798 <spicmd_csi_setup_trigpos_range>:
 1011798:	e12fff1e 	bx	lr
 101179c:	00000000 	andeq	r0, r0, r0

010117a0 <sysctrl_tick_irq>:
 */
void sysctrl_tick_irq(void *cb_ref)
{
	uint32_t status;

	status = XTtcPs_GetInterruptStatus((XTtcPs *)cb_ref);
 10117a0:	e5903004 	ldr	r3, [r0, #4]
{
 10117a4:	e92d4010 	push	{r4, lr}
	XTtcPs_ClearInterruptStatus((XTtcPs *)cb_ref, status);

	g_sysctrl_state.wakeup = 1;
 10117a8:	e3054f08 	movw	r4, #24328	; 0x5f08
 10117ac:	e3404146 	movt	r4, #326	; 0x146
	return *(volatile u32 *) Addr;
 10117b0:	e5932054 	ldr	r2, [r3, #84]	; 0x54
 10117b4:	e5933054 	ldr	r3, [r3, #84]	; 0x54
 10117b8:	e5d4301c 	ldrb	r3, [r4, #28]
	g_sysctrl_state.time_us += SYSCTRL_TIME_ADD_US;
 10117bc:	e1c402d0 	ldrd	r0, [r4, #32]
	g_sysctrl_state.wakeup = 1;
 10117c0:	e3833001 	orr	r3, r3, #1
 10117c4:	e5c4301c 	strb	r3, [r4, #28]
	g_sysctrl_state.time_us += SYSCTRL_TIME_ADD_US;
 10117c8:	fa0021dc 	blx	1019f40 <__aeabi_ul2d>
 10117cc:	eddf0b05 	vldr	d16, [pc, #20]	; 10117e8 <sysctrl_tick_irq+0x48>
 10117d0:	ec410b31 	vmov	d17, r0, r1
 10117d4:	ee710ba0 	vadd.f64	d16, d17, d16
 10117d8:	ec510b30 	vmov	r0, r1, d16
 10117dc:	fa00229f 	blx	101a260 <__aeabi_d2ulz>
 10117e0:	e1c402f0 	strd	r0, [r4, #32]
}
 10117e4:	e8bd8010 	pop	{r4, pc}
 10117e8:	00000000 	.word	0x00000000
 10117ec:	40440000 	.word	0x40440000

010117f0 <sysctrl_init>:
{
 10117f0:	e92d4070 	push	{r4, r5, r6, lr}
	*LocalAddr = Value;
 10117f4:	e3a03a0a 	mov	r3, #40960	; 0xa000
void sysctrl_led_mode(int mode)
{
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);

	// Set mode, reset LED to off.
	g_sysctrl_state.led_mode = mode;
 10117f8:	e3054f08 	movw	r4, #24328	; 0x5f08
 10117fc:	e3a02000 	mov	r2, #0
 1011800:	e3404146 	movt	r4, #326	; 0x146
 1011804:	e3a01001 	mov	r1, #1
 1011808:	e34e3000 	movt	r3, #57344	; 0xe000
 101180c:	e34f2dff 	movt	r2, #65023	; 0xfdff
 1011810:	e584102c 	str	r1, [r4, #44]	; 0x2c
{
 1011814:	e24dd018 	sub	sp, sp, #24
	g_sysctrl_state.ttc_config = XTtcPs_LookupConfig(SYSCTRL_TTCPS_DEV_ID);
 1011818:	e3a00000 	mov	r0, #0
 101181c:	e5832000 	str	r2, [r3]
 1011820:	eb001dab 	bl	1018ed4 <XTtcPs_LookupConfig>
	D_ASSERT(g_sysctrl_state.ttc_config != NULL) ;
 1011824:	e3500000 	cmp	r0, #0
	g_sysctrl_state.ttc_config = XTtcPs_LookupConfig(SYSCTRL_TTCPS_DEV_ID);
 1011828:	e5840018 	str	r0, [r4, #24]
	D_ASSERT(g_sysctrl_state.ttc_config != NULL) ;
 101182c:	0a000035 	beq	1011908 <sysctrl_init+0x118>
	XTtcPs_CfgInitialize(&g_sysctrl_state.ttc, g_sysctrl_state.ttc_config, g_sysctrl_state.ttc_config->BaseAddress);
 1011830:	e5902004 	ldr	r2, [r0, #4]
 1011834:	e1a01000 	mov	r1, r0
 1011838:	e1a00004 	mov	r0, r4
 101183c:	eb001c39 	bl	1018928 <XTtcPs_CfgInitialize>
	XTtcPs_SetOptions(&g_sysctrl_state.ttc, options);
 1011840:	e3a01024 	mov	r1, #36	; 0x24
 1011844:	e1a00004 	mov	r0, r4
 1011848:	eb001db1 	bl	1018f14 <XTtcPs_SetOptions>
	XTtcPs_CalcIntervalFromFreq(&g_sysctrl_state.ttc, SYSCTRL_WAKE_FREQUENCY, &interval, &prescaler);
 101184c:	e28d3015 	add	r3, sp, #21
 1011850:	e28d2016 	add	r2, sp, #22
 1011854:	e1a00004 	mov	r0, r4
 1011858:	e30611a8 	movw	r1, #25000	; 0x61a8
 101185c:	eb001d24 	bl	1018cf4 <XTtcPs_CalcIntervalFromFreq>
	XTtcPs_SetInterval(&g_sysctrl_state.ttc, interval);
 1011860:	e1dd21b6 	ldrh	r2, [sp, #22]
	XTtcPs_SetPrescaler(&g_sysctrl_state.ttc, prescaler);
 1011864:	e1a00004 	mov	r0, r4
	XTtcPs_SetInterval(&g_sysctrl_state.ttc, interval);
 1011868:	e5943004 	ldr	r3, [r4, #4]
 101186c:	e5832024 	str	r2, [r3, #36]	; 0x24
	XTtcPs_SetPrescaler(&g_sysctrl_state.ttc, prescaler);
 1011870:	e5dd1015 	ldrb	r1, [sp, #21]
 1011874:	eb001ccc 	bl	1018bac <XTtcPs_SetPrescaler>
	d_printf(D_INFO, "sysctrl: ttc configured [input_clock:%d Hz, frequency:%d Hz, interval:%d, prescaler:%d, actual_freq:%d Hz]", \
 1011878:	e5946008 	ldr	r6, [r4, #8]
 101187c:	e1dd51b6 	ldrh	r5, [sp, #22]
 1011880:	e1a00006 	mov	r0, r6
 1011884:	e1a01005 	mov	r1, r5
 1011888:	fa001f9e 	blx	1019708 <__udivsi3>
 101188c:	e5dd3015 	ldrb	r3, [sp, #21]
 1011890:	e3091404 	movw	r1, #37892	; 0x9404
 1011894:	e58d0008 	str	r0, [sp, #8]
 1011898:	e1a02006 	mov	r2, r6
 101189c:	e58d5000 	str	r5, [sp]
 10118a0:	e3401106 	movt	r1, #262	; 0x106
 10118a4:	e58d3004 	str	r3, [sp, #4]
 10118a8:	e3a00002 	mov	r0, #2
 10118ac:	e30631a8 	movw	r3, #25000	; 0x61a8
 10118b0:	ebfff112 	bl	100dd00 <d_printf>
	XScuGic_Connect(&g_hal.xscu_gic, XPAR_XTTCPS_0_INTR, (Xil_ExceptionHandler)sysctrl_tick_irq, &g_sysctrl_state.ttc);
 10118b4:	e30127a0 	movw	r2, #6048	; 0x17a0
 10118b8:	e3090b80 	movw	r0, #39808	; 0x9b80
 10118bc:	e1a03004 	mov	r3, r4
 10118c0:	e3402101 	movt	r2, #257	; 0x101
 10118c4:	e3a0102a 	mov	r1, #42	; 0x2a
 10118c8:	e3400145 	movt	r0, #325	; 0x145
 10118cc:	eb0010b4 	bl	1015ba4 <XScuGic_Connect>
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_XTTCPS_0_INTR);
 10118d0:	e3090b80 	movw	r0, #39808	; 0x9b80
 10118d4:	e3a0102a 	mov	r1, #42	; 0x2a
 10118d8:	e3400145 	movt	r0, #325	; 0x145
 10118dc:	eb001207 	bl	1016100 <XScuGic_Enable>
	XTtcPs_EnableInterrupts(&g_sysctrl_state.ttc, XTTCPS_IXR_INTERVAL_MASK);
 10118e0:	e5942004 	ldr	r2, [r4, #4]
	return *(volatile u32 *) Addr;
 10118e4:	e5923060 	ldr	r3, [r2, #96]	; 0x60
 10118e8:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 10118ec:	e5823060 	str	r3, [r2, #96]	; 0x60
	XTtcPs_Start(&g_sysctrl_state.ttc);
 10118f0:	e5942004 	ldr	r2, [r4, #4]
	return *(volatile u32 *) Addr;
 10118f4:	e592300c 	ldr	r3, [r2, #12]
 10118f8:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 10118fc:	e582300c 	str	r3, [r2, #12]
}
 1011900:	e28dd018 	add	sp, sp, #24
 1011904:	e8bd8070 	pop	{r4, r5, r6, pc}
	D_ASSERT(g_sysctrl_state.ttc_config != NULL) ;
 1011908:	e3a0002f 	mov	r0, #47	; 0x2f
 101190c:	e30933c8 	movw	r3, #37832	; 0x93c8
 1011910:	e30923e0 	movw	r2, #37856	; 0x93e0
 1011914:	e30619f0 	movw	r1, #27120	; 0x69f0
 1011918:	e58d0000 	str	r0, [sp]
 101191c:	e3403106 	movt	r3, #262	; 0x106
 1011920:	e3a00004 	mov	r0, #4
 1011924:	e3402106 	movt	r2, #262	; 0x106
 1011928:	e3401106 	movt	r1, #262	; 0x106
 101192c:	ebfff0f3 	bl	100dd00 <d_printf>
 1011930:	e3e00062 	mvn	r0, #98	; 0x62
 1011934:	fa0022bd 	blx	101a430 <exit>

01011938 <sysctrl_led_mode>:
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);
 1011938:	e2403001 	sub	r3, r0, #1
 101193c:	e3530001 	cmp	r3, #1
 1011940:	8a000008 	bhi	1011968 <sysctrl_led_mode+0x30>
	g_sysctrl_state.led_mode = mode;
 1011944:	e3053f08 	movw	r3, #24328	; 0x5f08
 1011948:	e3a02a0a 	mov	r2, #40960	; 0xa000
 101194c:	e3a01000 	mov	r1, #0
 1011950:	e3403146 	movt	r3, #326	; 0x146
 1011954:	e34e2000 	movt	r2, #57344	; 0xe000
 1011958:	e34f1dff 	movt	r1, #65023	; 0xfdff
 101195c:	e583002c 	str	r0, [r3, #44]	; 0x2c
 1011960:	e5821000 	str	r1, [r2]
 1011964:	e12fff1e 	bx	lr
{
 1011968:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);
 101196c:	e3a00061 	mov	r0, #97	; 0x61
{
 1011970:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(mode == SYSCTRL_LED_MODE_HEARTBEAT || mode == SYSCTRL_LED_MODE_GP);
 1011974:	e30933c8 	movw	r3, #37832	; 0x93c8
 1011978:	e3092470 	movw	r2, #38000	; 0x9470
 101197c:	e30619f0 	movw	r1, #27120	; 0x69f0
 1011980:	e58d0000 	str	r0, [sp]
 1011984:	e3403106 	movt	r3, #262	; 0x106
 1011988:	e3a00004 	mov	r0, #4
 101198c:	e3402106 	movt	r2, #262	; 0x106
 1011990:	e3401106 	movt	r1, #262	; 0x106
 1011994:	ebfff0d9 	bl	100dd00 <d_printf>
 1011998:	e3e00062 	mvn	r0, #98	; 0x62
 101199c:	fa0022a3 	blx	101a430 <exit>

010119a0 <sysctrl_led_tick>:
 * Blinks the LED PS#0 periodically according to the LED counter.  Used as a diagnostic.
 * The LED blinks like a "pulse".
 */
void sysctrl_led_tick()
{
	g_sysctrl_state.led_ctr++;
 10119a0:	e3053f08 	movw	r3, #24328	; 0x5f08
 10119a4:	e3403146 	movt	r3, #326	; 0x146
 10119a8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 10119ac:	e593102c 	ldr	r1, [r3, #44]	; 0x2c
 10119b0:	e2822001 	add	r2, r2, #1

	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 10119b4:	e3520b19 	cmp	r2, #25600	; 0x6400
	g_sysctrl_state.led_ctr++;
 10119b8:	e5832028 	str	r2, [r3, #40]	; 0x28
	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 10119bc:	da000002 	ble	10119cc <sysctrl_led_tick+0x2c>
		g_sysctrl_state.led_ctr = 0;
 10119c0:	e3a02000 	mov	r2, #0
 10119c4:	e5832028 	str	r2, [r3, #40]	; 0x28
	}

	// These values are similar to the values used by the STM32 system controller on Scopy MVP.
	if(g_sysctrl_state.led_mode == SYSCTRL_LED_MODE_HEARTBEAT) {
 10119c8:	e12fff1e 	bx	lr
 10119cc:	e3510001 	cmp	r1, #1
 10119d0:	112fff1e 	bxne	lr
		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON2_SCALE) {
 10119d4:	e3003cb2 	movw	r3, #3250	; 0xcb2
 10119d8:	e301c932 	movw	ip, #6450	; 0x1932
 10119dc:	e152000c 	cmp	r2, ip
 10119e0:	11520003 	cmpne	r2, r3
 10119e4:	e30118e7 	movw	r1, #6375	; 0x18e7
 10119e8:	e3000c67 	movw	r0, #3175	; 0xc67
 10119ec:	03a03001 	moveq	r3, #1
 10119f0:	13a03000 	movne	r3, #0
 10119f4:	e1520001 	cmp	r2, r1
 10119f8:	11520000 	cmpne	r2, r0
 10119fc:	03a02a0a 	moveq	r2, #40960	; 0xa000
 1011a00:	03a01c02 	moveq	r1, #512	; 0x200
 1011a04:	034e2000 	movteq	r2, #57344	; 0xe000
 1011a08:	034f1dff 	movteq	r1, #65023	; 0xfdff
 1011a0c:	05821000 	streq	r1, [r2]
			gpio_led_write(0, 1);
		}

		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF2_SCALE) {
 1011a10:	e3530000 	cmp	r3, #0
 1011a14:	13a03a0a 	movne	r3, #40960	; 0xa000
 1011a18:	13a02000 	movne	r2, #0
 1011a1c:	134e3000 	movtne	r3, #57344	; 0xe000
 1011a20:	134f2dff 	movtne	r2, #65023	; 0xfdff
 1011a24:	15832000 	strne	r2, [r3]
			gpio_led_write(0, 0);
		}
	}
}
 1011a28:	e12fff1e 	bx	lr

01011a2c <sysctrl_xadc_tick>:
 * XADC iteration.
 */
void sysctrl_xadc_tick()
{
	// STUB
}
 1011a2c:	e12fff1e 	bx	lr

01011a30 <sysctrl_main_loop>:
/*
 * Main system control loop.  The application never escapes this loop, except
 * by forceful termination.
 */
void sysctrl_main_loop()
{
 1011a30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1011a34:	e3054f08 	movw	r4, #24328	; 0x5f08
 1011a38:	e3a05a0a 	mov	r5, #40960	; 0xa000
 1011a3c:	e3a07000 	mov	r7, #0
 1011a40:	e3a06c02 	mov	r6, #512	; 0x200
 1011a44:	e3404146 	movt	r4, #326	; 0x146
 1011a48:	e34e5000 	movt	r5, #57344	; 0xe000
 1011a4c:	e34f7dff 	movt	r7, #65023	; 0xfdff
 1011a50:	e34f6dff 	movt	r6, #65023	; 0xfdff
		}
	}
#endif

	while(1) {
		if(g_sysctrl_state.wakeup) {
 1011a54:	e594301c 	ldr	r3, [r4, #28]
 1011a58:	e7a03053 	sbfx	r3, r3, #0, #1
 1011a5c:	e31300ff 	tst	r3, #255	; 0xff
 1011a60:	0a000019 	beq	1011acc <sysctrl_main_loop+0x9c>
	g_sysctrl_state.led_ctr++;
 1011a64:	e5943028 	ldr	r3, [r4, #40]	; 0x28
		g_sysctrl_state.led_ctr = 0;
 1011a68:	e3a01000 	mov	r1, #0
 1011a6c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
	g_sysctrl_state.led_ctr++;
 1011a70:	e2833001 	add	r3, r3, #1
	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 1011a74:	e3530b19 	cmp	r3, #25600	; 0x6400
	g_sysctrl_state.led_ctr++;
 1011a78:	e5843028 	str	r3, [r4, #40]	; 0x28
		g_sysctrl_state.led_ctr = 0;
 1011a7c:	c5841028 	strgt	r1, [r4, #40]	; 0x28
	if(g_sysctrl_state.led_ctr > SC_HEARTBEAT_TOTAL_SCALE) {
 1011a80:	ca00000e 	bgt	1011ac0 <sysctrl_main_loop+0x90>
	if(g_sysctrl_state.led_mode == SYSCTRL_LED_MODE_HEARTBEAT) {
 1011a84:	e3520001 	cmp	r2, #1
 1011a88:	1a00000c 	bne	1011ac0 <sysctrl_main_loop+0x90>
 1011a8c:	e3002cb2 	movw	r2, #3250	; 0xcb2
 1011a90:	e301c932 	movw	ip, #6450	; 0x1932
 1011a94:	e153000c 	cmp	r3, ip
 1011a98:	11530002 	cmpne	r3, r2
		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_ON2_SCALE) {
 1011a9c:	e3000c67 	movw	r0, #3175	; 0xc67
 1011aa0:	e30118e7 	movw	r1, #6375	; 0x18e7
 1011aa4:	03a02001 	moveq	r2, #1
 1011aa8:	13a02000 	movne	r2, #0
 1011aac:	e1530001 	cmp	r3, r1
 1011ab0:	11530000 	cmpne	r3, r0
 1011ab4:	05856000 	streq	r6, [r5]
		if(g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF1_SCALE || g_sysctrl_state.led_ctr == SC_HEARTBEAT_OFF2_SCALE) {
 1011ab8:	e3520000 	cmp	r2, #0
 1011abc:	15857000 	strne	r7, [r5]
			sysctrl_led_tick();
			g_sysctrl_state.wakeup = 0;
 1011ac0:	e5d4301c 	ldrb	r3, [r4, #28]
 1011ac4:	e7c0301f 	bfc	r3, #0, #1
 1011ac8:	e5c4301c 	strb	r3, [r4, #28]
		}


		spi_command_tick();
 1011acc:	ebfffc58 	bl	1010c34 <spi_command_tick>
		mipi_csi_tick();
 1011ad0:	ebfff8e3 	bl	100fe64 <mipi_csi_tick>
		if(g_sysctrl_state.wakeup) {
 1011ad4:	eaffffde 	b	1011a54 <sysctrl_main_loop+0x24>

01011ad8 <trig_zero_levels>:
	_FAB_CFG_ACCESS(reg) = data;
 1011ad8:	e3a03000 	mov	r3, #0
 1011adc:	e1a02003 	mov	r2, r3
 1011ae0:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011ae4:	e5832090 	str	r2, [r3, #144]	; 0x90
	fabcfg_write(FAB_CFG_TRIG_LEVEL5, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL6, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL7, 0x00000000);

	return TRIGRES_OK;
}
 1011ae8:	e1a00002 	mov	r0, r2
 1011aec:	e5832094 	str	r2, [r3, #148]	; 0x94
 1011af0:	e5832098 	str	r2, [r3, #152]	; 0x98
 1011af4:	e583209c 	str	r2, [r3, #156]	; 0x9c
 1011af8:	e58320a0 	str	r2, [r3, #160]	; 0xa0
 1011afc:	e58320a4 	str	r2, [r3, #164]	; 0xa4
 1011b00:	e58320a8 	str	r2, [r3, #168]	; 0xa8
 1011b04:	e58320ac 	str	r2, [r3, #172]	; 0xac
 1011b08:	e12fff1e 	bx	lr

01011b0c <trig_write_levels>:
int trig_write_levels(int comp_group, unsigned int chan_idx, uint8_t demux_mode, int comp_pol, uint16_t trig_lvl_high, uint16_t trig_lvl_low)
{
	uint32_t reg_base;
	uint32_t reg_write;

	if(comp_group == TRIG_COMP_A) {
 1011b0c:	e3500000 	cmp	r0, #0
{
 1011b10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1011b14:	e1ddc1b8 	ldrh	ip, [sp, #24]
 1011b18:	e1dde1bc 	ldrh	lr, [sp, #28]
	if(comp_group == TRIG_COMP_A) {
 1011b1c:	0a00000b 	beq	1011b50 <trig_write_levels+0x44>
		reg_base = FAB_CFG_TRIG_LEVEL_A_BASE;
	} else if(comp_group == TRIG_COMP_B) {
 1011b20:	e3500001 	cmp	r0, #1
 1011b24:	1a000048 	bne	1011c4c <trig_write_levels+0x140>
 1011b28:	e3a080a0 	mov	r8, #160	; 0xa0
 1011b2c:	e3a070a4 	mov	r7, #164	; 0xa4
 1011b30:	e3a060a8 	mov	r6, #168	; 0xa8
 1011b34:	e3a050ac 	mov	r5, #172	; 0xac
 1011b38:	e34483c0 	movt	r8, #17344	; 0x43c0
 1011b3c:	e34473c0 	movt	r7, #17344	; 0x43c0
 1011b40:	e34463c0 	movt	r6, #17344	; 0x43c0
 1011b44:	e34453c0 	movt	r5, #17344	; 0x43c0
		reg_base = FAB_CFG_TRIG_LEVEL_B_BASE;
 1011b48:	e3a040a0 	mov	r4, #160	; 0xa0
 1011b4c:	ea000008 	b	1011b74 <trig_write_levels+0x68>
 1011b50:	e3a08090 	mov	r8, #144	; 0x90
 1011b54:	e3a07094 	mov	r7, #148	; 0x94
 1011b58:	e3a06098 	mov	r6, #152	; 0x98
 1011b5c:	e3a0509c 	mov	r5, #156	; 0x9c
 1011b60:	e34483c0 	movt	r8, #17344	; 0x43c0
 1011b64:	e34473c0 	movt	r7, #17344	; 0x43c0
 1011b68:	e34463c0 	movt	r6, #17344	; 0x43c0
 1011b6c:	e34453c0 	movt	r5, #17344	; 0x43c0
		reg_base = FAB_CFG_TRIG_LEVEL_A_BASE;
 1011b70:	e3a04090 	mov	r4, #144	; 0x90
	/*
	 * Compute the data that will be written to all of the registers that are relevant.
	 *
	 * The level high and low registers are packed along with the polarity and enable.
	 */
	if(trig_lvl_low > trig_lvl_high) {
 1011b74:	e15e000c 	cmp	lr, ip
 1011b78:	8a000033 	bhi	1011c4c <trig_write_levels+0x140>
		return TRIGRES_PARAM_FAIL;
	}

	if(demux_mode & (ADCDEMUX_12BIT | ADCDEMUX_14BIT)) {
 1011b7c:	e3120030 	tst	r2, #48	; 0x30
 1011b80:	1a000015 	bne	1011bdc <trig_write_levels+0xd0>

		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
			trig_lvl_low = TRIG_LVL_MAX_PREC;
		}
	} else {
		if(trig_lvl_high > TRIG_LVL_MAX_8B) {
 1011b84:	e35c00ff 	cmp	ip, #255	; 0xff
 1011b88:	23a0c0ff 	movcs	ip, #255	; 0xff
			trig_lvl_high = TRIG_LVL_MAX_8B;
		}

		if(trig_lvl_low > TRIG_LVL_MAX_8B) {
 1011b8c:	e35e00ff 	cmp	lr, #255	; 0xff
 1011b90:	23a0e0ff 	movcs	lr, #255	; 0xff
			trig_lvl_low = TRIG_LVL_MAX_8B;
		}
	}

	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1011b94:	e1a0ca0c 	lsl	ip, ip, #20

	if(comp_pol == TRIG_COMP_POL_NORMAL) {
 1011b98:	e3530000 	cmp	r3, #0
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1011b9c:	e18cc20e 	orr	ip, ip, lr, lsl #4
 1011ba0:	e38ce001 	orr	lr, ip, #1
		reg_write |= TRIG_LVL_CH_POLARITY;
 1011ba4:	038ce003 	orreq	lr, ip, #3
	if(comp_pol == TRIG_COMP_POL_NORMAL) {
 1011ba8:	0a000001 	beq	1011bb4 <trig_write_levels+0xa8>
	} else if(comp_pol != TRIG_COMP_POL_INVERT) {
 1011bac:	e3530001 	cmp	r3, #1
 1011bb0:	1a000025 	bne	1011c4c <trig_write_levels+0x140>
	 *               chan_idx of 1 writes to levels 1A and 3A or 1B and 3B.
	 * In 4 ch mode, chan_idx selects the sole level word that is written.
	 *
	 * Other registers are left unchanged.
	 */
	if(demux_mode & ADCDEMUX_1CH) {
 1011bb4:	e2120001 	ands	r0, r2, #1
 1011bb8:	0a00000d 	beq	1011bf4 <trig_write_levels+0xe8>
		if(chan_idx == 0) {
 1011bbc:	e3510000 	cmp	r1, #0
 1011bc0:	1a000021 	bne	1011c4c <trig_write_levels+0x140>
 1011bc4:	e588e000 	str	lr, [r8]
		fabcfg_write(reg_base, reg_write);
	} else {
		return TRIGRES_NOT_IMPLEMENTED;
	}

	return TRIGRES_OK;
 1011bc8:	e1a00001 	mov	r0, r1
 1011bcc:	e587e000 	str	lr, [r7]
 1011bd0:	e586e000 	str	lr, [r6]
 1011bd4:	e585e000 	str	lr, [r5]
 1011bd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		if(trig_lvl_high > TRIG_LVL_MAX_PREC) {
 1011bdc:	e30007ff 	movw	r0, #2047	; 0x7ff
 1011be0:	e15c0000 	cmp	ip, r0
 1011be4:	21a0c000 	movcs	ip, r0
		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
 1011be8:	e15e0000 	cmp	lr, r0
 1011bec:	21a0e000 	movcs	lr, r0
 1011bf0:	eaffffe7 	b	1011b94 <trig_write_levels+0x88>
	} else if(demux_mode & ADCDEMUX_2CH) {
 1011bf4:	e212c002 	ands	ip, r2, #2
 1011bf8:	0a000009 	beq	1011c24 <trig_write_levels+0x118>
		if(chan_idx == 0 || chan_idx == 1) {
 1011bfc:	e3510001 	cmp	r1, #1
 1011c00:	8a000011 	bhi	1011c4c <trig_write_levels+0x140>
			reg_base += chan_idx * 4;
 1011c04:	e0844101 	add	r4, r4, r1, lsl #2
 1011c08:	e2843443 	add	r3, r4, #1124073472	; 0x43000000
 1011c0c:	e2841121 	add	r1, r4, #1073741832	; 0x40000008
 1011c10:	e2833503 	add	r3, r3, #12582912	; 0xc00000
 1011c14:	e281150f 	add	r1, r1, #62914560	; 0x3c00000
 1011c18:	e583e000 	str	lr, [r3]
 1011c1c:	e581e000 	str	lr, [r1]
 1011c20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	} else if(demux_mode & ADCDEMUX_4CH) {
 1011c24:	e3120004 	tst	r2, #4
 1011c28:	0a000009 	beq	1011c54 <trig_write_levels+0x148>
		if(chan_idx <= 3) {
 1011c2c:	e3510003 	cmp	r1, #3
 1011c30:	8a000005 	bhi	1011c4c <trig_write_levels+0x140>
			reg_base += chan_idx * 4;
 1011c34:	e1a03101 	lsl	r3, r1, #2
	return TRIGRES_OK;
 1011c38:	e1a0000c 	mov	r0, ip
 1011c3c:	e2831443 	add	r1, r3, #1124073472	; 0x43000000
 1011c40:	e2811503 	add	r1, r1, #12582912	; 0xc00000
 1011c44:	e781e004 	str	lr, [r1, r4]
 1011c48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return TRIGRES_PARAM_FAIL;
 1011c4c:	e3e00002 	mvn	r0, #2
}
 1011c50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return TRIGRES_NOT_IMPLEMENTED;
 1011c54:	e3e00006 	mvn	r0, #6
 1011c58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01011c5c <trig_configure_always>:
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011c5c:	e3a03000 	mov	r3, #0
 1011c60:	e1a02003 	mov	r2, r3
 1011c64:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011c68:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET | TRIG_CTRL_TRIG_MODE_ALWAYS);
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_GLOBAL_ENABLE | TRIG_CTRL_TRIGGER_ARM);

	return TRIGRES_OK;
}
 1011c6c:	e1a00002 	mov	r0, r2
 1011c70:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011c74:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011c78:	e38222c1 	orr	r2, r2, #268435468	; 0x1000000c
 1011c7c:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011c80:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011c84:	e3c2200c 	bic	r2, r2, #12
 1011c88:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011c8c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011c90:	e3822081 	orr	r2, r2, #129	; 0x81
 1011c94:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 1011c98:	e12fff1e 	bx	lr

01011c9c <trig_configure_edge>:
int trig_configure_edge(unsigned int chan_idx, uint16_t trig_lvl, uint16_t trig_hyst, int edge_type)
{
	uint16_t trig_lo, trig_hi;
	int res;

	if(!(edge_type == TRIG_EDGE_FALLING || edge_type == TRIG_EDGE_RISING || edge_type == TRIG_EDGE_BOTH)) {
 1011c9c:	e243c001 	sub	ip, r3, #1
 1011ca0:	e35c0002 	cmp	ip, #2
 1011ca4:	8a000075 	bhi	1011e80 <trig_configure_edge+0x1e4>
		return TRIGRES_PARAM_FAIL;
	}

	if((trig_hyst * 2) > trig_lvl) {
 1011ca8:	e1510082 	cmp	r1, r2, lsl #1
 1011cac:	b3a0c001 	movlt	ip, #1
 1011cb0:	a3a0c000 	movge	ip, #0
		return TRIGRES_PARAM_FAIL;
	}

	if(chan_idx >= 4) {
 1011cb4:	e3500003 	cmp	r0, #3
 1011cb8:	838cc001 	orrhi	ip, ip, #1
 1011cbc:	e35c0000 	cmp	ip, #0
 1011cc0:	1a00006e 	bne	1011e80 <trig_configure_edge+0x1e4>
		return TRIGRES_PARAM_FAIL;
	}

	trig_lo = trig_lvl - (trig_hyst / 2);
 1011cc4:	e1a020a2 	lsr	r2, r2, #1
{
 1011cc8:	e92d4010 	push	{r4, lr}
	trig_lo = trig_lvl - (trig_hyst / 2);
 1011ccc:	e041e002 	sub	lr, r1, r2
	trig_hi = trig_lvl + (trig_hyst / 2);
 1011cd0:	e0822001 	add	r2, r2, r1
	trig_lo = trig_lvl - (trig_hyst / 2);
 1011cd4:	e6ffe07e 	uxth	lr, lr
	trig_hi = trig_lvl + (trig_hyst / 2);
 1011cd8:	e6ff1072 	uxth	r1, r2

	// Disable interrupts while writing state
	asm("cpsid I");
 1011cdc:	f10c0080 	cpsid	i
	_FAB_CFG_ACCESS(reg) = data;
 1011ce0:	e3a02000 	mov	r2, #0
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET | TRIG_CTRL_TRIG_MODE_EDGE);

	// Set the appropriate edge mode.
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_EDGEA_BITFIELD | TRIG_CTRL_EDGEB_BITFIELD);

	if(edge_type == TRIG_EDGE_FALLING) {
 1011ce4:	e3530001 	cmp	r3, #1
 1011ce8:	e34423c0 	movt	r2, #17344	; 0x43c0
 1011cec:	e582c090 	str	ip, [r2, #144]	; 0x90
 1011cf0:	e582c094 	str	ip, [r2, #148]	; 0x94
 1011cf4:	e582c098 	str	ip, [r2, #152]	; 0x98
 1011cf8:	e582c09c 	str	ip, [r2, #156]	; 0x9c
 1011cfc:	e582c0a0 	str	ip, [r2, #160]	; 0xa0
 1011d00:	e582c0a4 	str	ip, [r2, #164]	; 0xa4
 1011d04:	e582c0a8 	str	ip, [r2, #168]	; 0xa8
 1011d08:	e582c0ac 	str	ip, [r2, #172]	; 0xac
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011d0c:	e59240b0 	ldr	r4, [r2, #176]	; 0xb0
 1011d10:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011d14:	e592c0b0 	ldr	ip, [r2, #176]	; 0xb0
 1011d18:	e38cc2c2 	orr	ip, ip, #536870924	; 0x2000000c
 1011d1c:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011d20:	e592c0b0 	ldr	ip, [r2, #176]	; 0xb0
 1011d24:	e3ccc40f 	bic	ip, ip, #251658240	; 0xf000000
 1011d28:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
 1011d2c:	0a00003f 	beq	1011e30 <trig_configure_edge+0x194>
		fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_EDGEA_FALLING);
	} else if(edge_type == TRIG_EDGE_RISING) {
 1011d30:	e3530002 	cmp	r3, #2
	_FAB_CFG_ACCESS(reg) |= data;
 1011d34:	e59230b0 	ldr	r3, [r2, #176]	; 0xb0
 1011d38:	03833401 	orreq	r3, r3, #16777216	; 0x1000000
 1011d3c:	13833403 	orrne	r3, r3, #50331648	; 0x3000000
 1011d40:	e58230b0 	str	r3, [r2, #176]	; 0xb0
	} else if(edge_type == TRIG_EDGE_BOTH) {
		fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_EDGEA_BOTH);
	}

	// Write the levels for COMP_A (COMP_B is unused) and enable the trigger channels.
	res = trig_write_levels(TRIG_COMP_A, chan_idx, g_acq_state.demux_reg, TRIG_COMP_POL_NORMAL, trig_hi, trig_lo);
 1011d44:	e30932e0 	movw	r3, #37600	; 0x92e0
	if(trig_lvl_low > trig_lvl_high) {
 1011d48:	e15e0001 	cmp	lr, r1
	res = trig_write_levels(TRIG_COMP_A, chan_idx, g_acq_state.demux_reg, TRIG_COMP_POL_NORMAL, trig_hi, trig_lo);
 1011d4c:	e3403145 	movt	r3, #325	; 0x145
 1011d50:	e5d33790 	ldrb	r3, [r3, #1936]	; 0x790
	if(trig_lvl_low > trig_lvl_high) {
 1011d54:	8a00004b 	bhi	1011e88 <trig_configure_edge+0x1ec>
	if(demux_mode & (ADCDEMUX_12BIT | ADCDEMUX_14BIT)) {
 1011d58:	e3130030 	tst	r3, #48	; 0x30
 1011d5c:	1a000018 	bne	1011dc4 <trig_configure_edge+0x128>
		if(trig_lvl_high > TRIG_LVL_MAX_8B) {
 1011d60:	e35100ff 	cmp	r1, #255	; 0xff
 1011d64:	23a010ff 	movcs	r1, #255	; 0xff
		if(trig_lvl_low > TRIG_LVL_MAX_8B) {
 1011d68:	e35e00ff 	cmp	lr, #255	; 0xff
 1011d6c:	23a0e0ff 	movcs	lr, #255	; 0xff
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1011d70:	e1a01a01 	lsl	r1, r1, #20
	if(demux_mode & ADCDEMUX_1CH) {
 1011d74:	e2132001 	ands	r2, r3, #1
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 1011d78:	e181120e 	orr	r1, r1, lr, lsl #4
		reg_write |= TRIG_LVL_CH_POLARITY;
 1011d7c:	e3811003 	orr	r1, r1, #3
	if(demux_mode & ADCDEMUX_1CH) {
 1011d80:	0a000015 	beq	1011ddc <trig_configure_edge+0x140>
		if(chan_idx == 0) {
 1011d84:	e3500000 	cmp	r0, #0
	_FAB_CFG_ACCESS(reg) = data;
 1011d88:	e3a03000 	mov	r3, #0
 1011d8c:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011d90:	1a00003e 	bne	1011e90 <trig_configure_edge+0x1f4>
 1011d94:	e5831090 	str	r1, [r3, #144]	; 0x90
 1011d98:	e5831094 	str	r1, [r3, #148]	; 0x94
 1011d9c:	e5831098 	str	r1, [r3, #152]	; 0x98
 1011da0:	e583109c 	str	r1, [r3, #156]	; 0x9c
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011da4:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011da8:	e3c2200c 	bic	r2, r2, #12
 1011dac:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011db0:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011db4:	e3822081 	orr	r2, r2, #129	; 0x81
 1011db8:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	// Remove the resets, enable the trigger engine.
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_RESET | TRIG_CTRL_COMPARATOR_RESET);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_GLOBAL_ENABLE | TRIG_CTRL_TRIGGER_ARM);

	// Enable interrupts again
	asm("cpsie I");
 1011dbc:	f1080080 	cpsie	i

	// Check if level write succeeded
	if(res != TRIGRES_OK) {
 1011dc0:	e8bd8010 	pop	{r4, pc}
		if(trig_lvl_high > TRIG_LVL_MAX_PREC) {
 1011dc4:	e30027ff 	movw	r2, #2047	; 0x7ff
 1011dc8:	e1510002 	cmp	r1, r2
 1011dcc:	21a01002 	movcs	r1, r2
		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
 1011dd0:	e15e0002 	cmp	lr, r2
 1011dd4:	21a0e002 	movcs	lr, r2
 1011dd8:	eaffffe4 	b	1011d70 <trig_configure_edge+0xd4>
	} else if(demux_mode & ADCDEMUX_2CH) {
 1011ddc:	e213c002 	ands	ip, r3, #2
 1011de0:	0a000016 	beq	1011e40 <trig_configure_edge+0x1a4>
		if(chan_idx == 0 || chan_idx == 1) {
 1011de4:	e3500001 	cmp	r0, #1
 1011de8:	8a000026 	bhi	1011e88 <trig_configure_edge+0x1ec>
	_FAB_CFG_ACCESS(reg) = data;
 1011dec:	e3a0e090 	mov	lr, #144	; 0x90
 1011df0:	e3a0c098 	mov	ip, #152	; 0x98
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011df4:	e3a03000 	mov	r3, #0
	_FAB_CFG_ACCESS(reg) = data;
 1011df8:	e344e3c0 	movt	lr, #17344	; 0x43c0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011dfc:	e34433c0 	movt	r3, #17344	; 0x43c0
	_FAB_CFG_ACCESS(reg) = data;
 1011e00:	e344c3c0 	movt	ip, #17344	; 0x43c0
 1011e04:	e78e1100 	str	r1, [lr, r0, lsl #2]
 1011e08:	e78c1100 	str	r1, [ip, r0, lsl #2]
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011e0c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
 1011e10:	e3c1100c 	bic	r1, r1, #12
 1011e14:	e58310b0 	str	r1, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011e18:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
 1011e1c:	e3811081 	orr	r1, r1, #129	; 0x81
 1011e20:	e58310b0 	str	r1, [r3, #176]	; 0xb0
	asm("cpsie I");
 1011e24:	f1080080 	cpsie	i
		return res;
	}

	return TRIGRES_OK;
 1011e28:	e1a00002 	mov	r0, r2
 1011e2c:	e8bd8010 	pop	{r4, pc}
 1011e30:	e59230b0 	ldr	r3, [r2, #176]	; 0xb0
 1011e34:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
 1011e38:	e58230b0 	str	r3, [r2, #176]	; 0xb0
 1011e3c:	eaffffc0 	b	1011d44 <trig_configure_edge+0xa8>
	} else if(demux_mode & ADCDEMUX_4CH) {
 1011e40:	e3130004 	tst	r3, #4
 1011e44:	0a00001a 	beq	1011eb4 <trig_configure_edge+0x218>
	_FAB_CFG_ACCESS(reg) = data;
 1011e48:	e3a02090 	mov	r2, #144	; 0x90
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011e4c:	e3a03000 	mov	r3, #0
 1011e50:	e34433c0 	movt	r3, #17344	; 0x43c0
	_FAB_CFG_ACCESS(reg) = data;
 1011e54:	e34423c0 	movt	r2, #17344	; 0x43c0
 1011e58:	e7821100 	str	r1, [r2, r0, lsl #2]
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011e5c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011e60:	e3c2200c 	bic	r2, r2, #12
 1011e64:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011e68:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011e6c:	e3822081 	orr	r2, r2, #129	; 0x81
 1011e70:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1011e74:	f1080080 	cpsie	i
	return TRIGRES_OK;
 1011e78:	e1a0000c 	mov	r0, ip
 1011e7c:	e8bd8010 	pop	{r4, pc}
		return TRIGRES_PARAM_FAIL;
 1011e80:	e3e00002 	mvn	r0, #2
}
 1011e84:	e12fff1e 	bx	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011e88:	e3a03000 	mov	r3, #0
 1011e8c:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011e90:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011e94:	e3c2200c 	bic	r2, r2, #12
 1011e98:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011e9c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011ea0:	e3822081 	orr	r2, r2, #129	; 0x81
 1011ea4:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1011ea8:	f1080080 	cpsie	i
		return TRIGRES_PARAM_FAIL;
 1011eac:	e3e00002 	mvn	r0, #2
}
 1011eb0:	e8bd8010 	pop	{r4, pc}
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011eb4:	e3a03000 	mov	r3, #0
 1011eb8:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011ebc:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011ec0:	e3c2200c 	bic	r2, r2, #12
 1011ec4:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1011ec8:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011ecc:	e3822081 	orr	r2, r2, #129	; 0x81
 1011ed0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1011ed4:	f1080080 	cpsie	i
		return TRIGRES_NOT_IMPLEMENTED;
 1011ed8:	e3e00006 	mvn	r0, #6
 1011edc:	e8bd8010 	pop	{r4, pc}

01011ee0 <trig_configure_holdoff>:
 */
int trig_configure_holdoff(uint64_t holdoff_time_ns)
{
	uint32_t holdoff_reg;

	if(holdoff_time_ns == 0) {
 1011ee0:	e1903001 	orrs	r3, r0, r1
 1011ee4:	0a000013 	beq	1011f38 <trig_configure_holdoff+0x58>
		fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_HOLDOFF_ENABLE);
		fabcfg_write(FAB_CFG_TRIG_HOLDOFF, 0x00000000);
		return TRIGRES_OK;
	}

	if(holdoff_time_ns < HOLDOFF_NS_MINIMUM) {
 1011ee8:	e3a03000 	mov	r3, #0
 1011eec:	e3e0201f 	mvn	r2, #31
 1011ef0:	e1510003 	cmp	r1, r3
 1011ef4:	01500002 	cmpeq	r0, r2
 1011ef8:	81a01003 	movhi	r1, r3
 1011efc:	81a00002 	movhi	r0, r2

	if(holdoff_time_ns > HOLDOFF_NS_MAXIMUM) {
		holdoff_time_ns = HOLDOFF_NS_MAXIMUM;
	}

	holdoff_reg = holdoff_time_ns / HOLDOFF_NS_PER_COUNT;
 1011f00:	e3510000 	cmp	r1, #0
	_FAB_CFG_ACCESS(reg) = data;
 1011f04:	e3a03000 	mov	r3, #0
 1011f08:	03500020 	cmpeq	r0, #32
 1011f0c:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011f10:	33a00020 	movcc	r0, #32
 1011f14:	33a01000 	movcc	r1, #0
 1011f18:	e1a021a0 	lsr	r2, r0, #3
	fabcfg_write(FAB_CFG_TRIG_HOLDOFF, holdoff_reg);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_HOLDOFF_ENABLE);

	return TRIGRES_OK;
}
 1011f1c:	e3a00000 	mov	r0, #0
	holdoff_reg = holdoff_time_ns / HOLDOFF_NS_PER_COUNT;
 1011f20:	e1822e81 	orr	r2, r2, r1, lsl #29
 1011f24:	e58320c0 	str	r2, [r3, #192]	; 0xc0
	_FAB_CFG_ACCESS(reg) |= data;
 1011f28:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011f2c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 1011f30:	e58320b0 	str	r2, [r3, #176]	; 0xb0
}
 1011f34:	e12fff1e 	bx	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011f38:	e3a03000 	mov	r3, #0
 1011f3c:	e3a00000 	mov	r0, #0
	_FAB_CFG_ACCESS(reg) = data;
 1011f40:	e1a01003 	mov	r1, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 1011f44:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011f48:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011f4c:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 1011f50:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1011f54:	e58310c0 	str	r1, [r3, #192]	; 0xc0
 1011f58:	e12fff1e 	bx	lr

01011f5c <trig_dump_state>:
void trig_dump_state()
{
	uint32_t state_a;
	int i;

	d_printf(D_INFO, "");
 1011f5c:	e30a10ec 	movw	r1, #41196	; 0xa0ec
{
 1011f60:	e92d4070 	push	{r4, r5, r6, lr}
	d_printf(D_INFO, "");
 1011f64:	e3a00002 	mov	r0, #2
{
 1011f68:	e24dd028 	sub	sp, sp, #40	; 0x28
	d_printf(D_INFO, "");
 1011f6c:	e3401106 	movt	r1, #262	; 0x106

	d_printf(D_INFO, "** Trigger State (Fabric) **");
	d_printf(D_INFO, "");
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1011f70:	e3a05090 	mov	r5, #144	; 0x90
	d_printf(D_INFO, "");
 1011f74:	ebffef61 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "** Trigger State (Fabric) **");
 1011f78:	e30914b4 	movw	r1, #38068	; 0x94b4
 1011f7c:	e3a00002 	mov	r0, #2
 1011f80:	e3401106 	movt	r1, #262	; 0x106

	for(i = 0; i < 8; i++) {
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1011f84:	e30964f0 	movw	r6, #38128	; 0x94f0
	d_printf(D_INFO, "** Trigger State (Fabric) **");
 1011f88:	ebffef5c 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "");
 1011f8c:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 1011f90:	e3a00002 	mov	r0, #2
 1011f94:	e3401106 	movt	r1, #262	; 0x106
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1011f98:	e34453c0 	movt	r5, #17344	; 0x43c0
	d_printf(D_INFO, "");
 1011f9c:	ebffef57 	bl	100dd00 <d_printf>
	res = _FAB_CFG_ACCESS(reg);
 1011fa0:	e3a03000 	mov	r3, #0
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1011fa4:	e30914d4 	movw	r1, #38100	; 0x94d4
 1011fa8:	e34433c0 	movt	r3, #17344	; 0x43c0
 1011fac:	e3401106 	movt	r1, #262	; 0x106
 1011fb0:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1011fb4:	e3a00002 	mov	r0, #2
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1011fb8:	e3406106 	movt	r6, #262	; 0x106
	for(i = 0; i < 8; i++) {
 1011fbc:	e3a04000 	mov	r4, #0
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1011fc0:	ebffef4e 	bl	100dd00 <d_printf>
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1011fc4:	e1a02004 	mov	r2, r4
 1011fc8:	e4953004 	ldr	r3, [r5], #4
 1011fcc:	e1a01006 	mov	r1, r6
	for(i = 0; i < 8; i++) {
 1011fd0:	e2844001 	add	r4, r4, #1
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1011fd4:	e3a00002 	mov	r0, #2
 1011fd8:	ebffef48 	bl	100dd00 <d_printf>
	for(i = 0; i < 8; i++) {
 1011fdc:	e3540008 	cmp	r4, #8
 1011fe0:	1afffff7 	bne	1011fc4 <trig_dump_state+0x68>
 1011fe4:	e3a04000 	mov	r4, #0
	}

	d_printf(D_INFO, "trig_holdoff       = 0x%08x", fabcfg_read(FAB_CFG_TRIG_HOLDOFF));
 1011fe8:	e3091510 	movw	r1, #38160	; 0x9510
 1011fec:	e34443c0 	movt	r4, #17344	; 0x43c0
 1011ff0:	e3401106 	movt	r1, #262	; 0x106
 1011ff4:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
 1011ff8:	e3a00002 	mov	r0, #2
 1011ffc:	ebffef3f 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "trig_auto_timers   = 0x%08x", fabcfg_read(FAB_CFG_TRIG_AUTO_TIMERS));
 1012000:	e309152c 	movw	r1, #38188	; 0x952c
 1012004:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
 1012008:	e3401106 	movt	r1, #262	; 0x106
 101200c:	e3a00002 	mov	r0, #2
 1012010:	ebffef3a 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "trig_delay_reg0    = 0x%08x", fabcfg_read(FAB_CFG_TRIG_DELAY_REG0));
 1012014:	e3091548 	movw	r1, #38216	; 0x9548
 1012018:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
 101201c:	e3401106 	movt	r1, #262	; 0x106
 1012020:	e3a00002 	mov	r0, #2
 1012024:	ebffef35 	bl	100dd00 <d_printf>
	d_printf(D_INFO, "trig_delay_reg1    = 0x%08x", fabcfg_read(FAB_CFG_TRIG_DELAY_REG1));
 1012028:	e3091564 	movw	r1, #38244	; 0x9564
 101202c:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
 1012030:	e3401106 	movt	r1, #262	; 0x106
 1012034:	e3a00002 	mov	r0, #2
 1012038:	ebffef30 	bl	100dd00 <d_printf>
 101203c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8

	state_a = fabcfg_read(FAB_CFG_TRIG_STATE_A);

	d_printf(D_INFO, "trig_state_a       = 0x%08x [%c%c%c%c%c%c%c%c] [auto:%d] [trig:%d]",
 1012040:	e3091580 	movw	r1, #38272	; 0x9580
 1012044:	e3401106 	movt	r1, #262	; 0x106
 1012048:	e3a00002 	mov	r0, #2
 101204c:	e3120001 	tst	r2, #1
 1012050:	13a03054 	movne	r3, #84	; 0x54
 1012054:	03a03020 	moveq	r3, #32
 1012058:	e3120002 	tst	r2, #2
 101205c:	13a0c041 	movne	ip, #65	; 0x41
 1012060:	03a0c020 	moveq	ip, #32
 1012064:	e3120004 	tst	r2, #4
 1012068:	e58dc000 	str	ip, [sp]
 101206c:	13a0e061 	movne	lr, #97	; 0x61
 1012070:	03a0e020 	moveq	lr, #32
 1012074:	e3120008 	tst	r2, #8
 1012078:	e58de004 	str	lr, [sp, #4]
 101207c:	13a05073 	movne	r5, #115	; 0x73
 1012080:	03a05020 	moveq	r5, #32
 1012084:	e3120010 	tst	r2, #16
 1012088:	e58d5008 	str	r5, [sp, #8]
 101208c:	13a0c072 	movne	ip, #114	; 0x72
 1012090:	03a0c020 	moveq	ip, #32
 1012094:	e3120020 	tst	r2, #32
 1012098:	e58dc00c 	str	ip, [sp, #12]
 101209c:	13a0e048 	movne	lr, #72	; 0x48
 10120a0:	03a0e020 	moveq	lr, #32
 10120a4:	e3120040 	tst	r2, #64	; 0x40
 10120a8:	e58de010 	str	lr, [sp, #16]
 10120ac:	13a0c057 	movne	ip, #87	; 0x57
 10120b0:	03a0c020 	moveq	ip, #32
 10120b4:	e3120080 	tst	r2, #128	; 0x80
 10120b8:	e58dc014 	str	ip, [sp, #20]
 10120bc:	13a0c049 	movne	ip, #73	; 0x49
 10120c0:	03a0c020 	moveq	ip, #32
 10120c4:	e58dc018 	str	ip, [sp, #24]
 10120c8:	e7e3c652 	ubfx	ip, r2, #12, #4
 10120cc:	e58dc020 	str	ip, [sp, #32]
 10120d0:	e7e2c4d2 	ubfx	ip, r2, #9, #3
 10120d4:	e58dc01c 	str	ip, [sp, #28]
 10120d8:	ebffef08 	bl	100dd00 <d_printf>
														(state_a & TRIG_STATE_A_ACQ_WAIT_HOLDOFF) 	? 'W' : ' ', \
														(state_a & TRIG_STATE_A_INT_ARM) 			? 'I' : ' ', \
														(state_a & TRIG_STATE_A_DBG_AU_STATE_MASK) >> TRIG_STATE_A_DBG_AU_STATE_SHIFT, \
														(state_a & TRIG_STATE_A_DBG_TRIG_STATE_MASK) >> TRIG_STATE_A_DBG_TRIG_STATE_SHIFT);

	d_printf(D_INFO, "trig_holdoff_debug = 0x%08x", fabcfg_read(FAB_CFG_TRIG_HOLDOFF_DEBUG));
 10120dc:	e30915c4 	movw	r1, #38340	; 0x95c4
 10120e0:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
 10120e4:	e3401106 	movt	r1, #262	; 0x106
 10120e8:	e3a00002 	mov	r0, #2
 10120ec:	ebffef03 	bl	100dd00 <d_printf>

	d_printf(D_INFO, "");
 10120f0:	e30a10ec 	movw	r1, #41196	; 0xa0ec
 10120f4:	e3a00002 	mov	r0, #2
 10120f8:	e3401106 	movt	r1, #262	; 0x106

	//fabcfg_dump_state();
}
 10120fc:	e28dd028 	add	sp, sp, #40	; 0x28
 1012100:	e8bd4070 	pop	{r4, r5, r6, lr}
	d_printf(D_INFO, "");
 1012104:	eaffeefd 	b	100dd00 <d_printf>

01012108 <trig_init>:
	_FAB_CFG_ACCESS(reg) = data;
 1012108:	e3a03000 	mov	r3, #0
 101210c:	e3a0200c 	mov	r2, #12
 1012110:	e34433c0 	movt	r3, #17344	; 0x43c0
 1012114:	e3402040 	movt	r2, #64	; 0x40
{
 1012118:	e92d4010 	push	{r4, lr}
 101211c:	e3a0c001 	mov	ip, #1
 1012120:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 1012124:	e3a02000 	mov	r2, #0
	d_printf(D_INFO, "trigger: defaults loaded");
 1012128:	e30915e0 	movw	r1, #38368	; 0x95e0
 101212c:	e3a00002 	mov	r0, #2
	_FAB_CFG_ACCESS(reg) &= ~data;
 1012130:	e593e0b0 	ldr	lr, [r3, #176]	; 0xb0
 1012134:	e3401106 	movt	r1, #262	; 0x106
 1012138:	e3cee00c 	bic	lr, lr, #12
 101213c:	e583e0b0 	str	lr, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1012140:	e5832090 	str	r2, [r3, #144]	; 0x90
 1012144:	e5832094 	str	r2, [r3, #148]	; 0x94
 1012148:	e5832098 	str	r2, [r3, #152]	; 0x98
 101214c:	e583209c 	str	r2, [r3, #156]	; 0x9c
 1012150:	e58320a0 	str	r2, [r3, #160]	; 0xa0
 1012154:	e58320a4 	str	r2, [r3, #164]	; 0xa4
 1012158:	e58320a8 	str	r2, [r3, #168]	; 0xa8
 101215c:	e58320ac 	str	r2, [r3, #172]	; 0xac
 1012160:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
 1012164:	e58320c0 	str	r2, [r3, #192]	; 0xc0
 1012168:	e583c0c4 	str	ip, [r3, #196]	; 0xc4
 101216c:	e58320c4 	str	r2, [r3, #196]	; 0xc4
 1012170:	e583c0c8 	str	ip, [r3, #200]	; 0xc8
 1012174:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1012178:	e583c0cc 	str	ip, [r3, #204]	; 0xcc
 101217c:	e58320cc 	str	r2, [r3, #204]	; 0xcc
	_FAB_CFG_ACCESS(reg) &= ~data;
 1012180:	e593c0b0 	ldr	ip, [r3, #176]	; 0xb0
 1012184:	e3ccc801 	bic	ip, ip, #65536	; 0x10000
 1012188:	e583c0b0 	str	ip, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 101218c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
 1012190:	ebffeeda 	bl	100dd00 <d_printf>
}
 1012194:	e8bd4010 	pop	{r4, lr}
	trig_dump_state();
 1012198:	eaffff6f 	b	1011f5c <trig_dump_state>

0101219c <trig_has_trigd>:
	res = _FAB_CFG_ACCESS(reg);
 101219c:	e3a03000 	mov	r3, #0
 10121a0:	e34433c0 	movt	r3, #17344	; 0x43c0
 10121a4:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
	uint32_t state;

	state = fabcfg_read(FAB_CFG_TRIG_STATE_A);

	// Possible complication: what to do if we get a TRIG'D & AUTO event in same window?
	if(state & TRIG_STATE_A_TRIGD) {
 10121a8:	e3130001 	tst	r3, #1
 10121ac:	1a000003 	bne	10121c0 <trig_has_trigd+0x24>
		res = TRIG_STATUS_TRIGD;
	} else if(state & (TRIG_STATE_A_AUTO_TRIGD | TRIG_STATE_A_AUTO_TRIG_REPD)) {
 10121b0:	e3130006 	tst	r3, #6
		res = TRIG_STATUS_AUTO;
 10121b4:	03a00000 	moveq	r0, #0
 10121b8:	13a00002 	movne	r0, #2
 10121bc:	e12fff1e 	bx	lr
		res = TRIG_STATUS_TRIGD;
 10121c0:	e3a00001 	mov	r0, #1
	}

	return res;
}
 10121c4:	e12fff1e 	bx	lr

010121c8 <trig_arm>:
	_FAB_CFG_ACCESS(reg) |= data;
 10121c8:	e3a03000 	mov	r3, #0
 10121cc:	e34433c0 	movt	r3, #17344	; 0x43c0
 10121d0:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 10121d4:	e3822080 	orr	r2, r2, #128	; 0x80
 10121d8:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 * Arm the trigger.
 */
void trig_arm()
{
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_ARM);
}
 10121dc:	e12fff1e 	bx	lr

010121e0 <trig_disarm>:
	_FAB_CFG_ACCESS(reg) &= ~data;
 10121e0:	e3a03000 	mov	r3, #0
 10121e4:	e34433c0 	movt	r3, #17344	; 0x43c0
 10121e8:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 10121ec:	e3c22080 	bic	r2, r2, #128	; 0x80
 10121f0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 * Disarm the trigger.
 */
void trig_disarm()
{
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_TRIGGER_ARM);
}
 10121f4:	e12fff1e 	bx	lr

010121f8 <trig_force>:
	_FAB_CFG_ACCESS(reg) |= data;
 10121f8:	e3a03000 	mov	r3, #0
 10121fc:	e34433c0 	movt	r3, #17344	; 0x43c0
 1012200:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1012204:	e3822010 	orr	r2, r2, #16
 1012208:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 101220c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1012210:	e3c22010 	bic	r2, r2, #16
 1012214:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 */
void trig_force()
{
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_FORCE_TRIGGER);
	fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_FORCE_TRIGGER);
}
 1012218:	e12fff1e 	bx	lr

0101221c <XAxiDma_Reset>:
	UINTPTR RegBase;
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_BdRing *RxRingPtr;
	int RingIndex;

	if (InstancePtr->HasMm2S) {
 101221c:	e5903004 	ldr	r3, [r0, #4]
{
 1012220:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if (InstancePtr->HasMm2S) {
 1012224:	e3530000 	cmp	r3, #0
 1012228:	0a000019 	beq	1012294 <XAxiDma_Reset+0x78>
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* Save the locations of current BDs both rings are working on
		 * before the reset so later we can resume the rings smoothly.
		 */
		if(XAxiDma_HasSg(InstancePtr)){
 101222c:	e5903010 	ldr	r3, [r0, #16]
 1012230:	e3530000 	cmp	r3, #0
 1012234:	1a00001a 	bne	10122a4 <XAxiDma_Reset+0x88>
*
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1012238:	e5902000 	ldr	r2, [r0]
	*LocalAddr = Value;
 101223c:	e3a01004 	mov	r1, #4

	/* Set TX/RX Channel state */
	if (InstancePtr->HasMm2S) {
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1012240:	e3a03002 	mov	r3, #2
 1012244:	e5821000 	str	r1, [r2]
 1012248:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 101224c:	e5903008 	ldr	r3, [r0, #8]
 1012250:	e3530000 	cmp	r3, #0
 1012254:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012258:	e5901744 	ldr	r1, [r0, #1860]	; 0x744
 101225c:	e3510000 	cmp	r1, #0
 1012260:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
 1012264:	e3a03000 	mov	r3, #0
						RingIndex++) {
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);
			if (InstancePtr->HasS2Mm) {
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1012268:	e3a0e06c 	mov	lr, #108	; 0x6c
 101226c:	e3a0c002 	mov	ip, #2
 1012270:	e022039e 	mla	r2, lr, r3, r0
						RingIndex++) {
 1012274:	e2833001 	add	r3, r3, #1
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012278:	e1530001 	cmp	r3, r1
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 101227c:	e582c088 	str	ip, [r2, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012280:	1afffffa 	bne	1012270 <XAxiDma_Reset+0x54>
 1012284:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	if (InstancePtr->HasMm2S) {
 1012288:	e5903004 	ldr	r3, [r0, #4]
 101228c:	e3530000 	cmp	r3, #0
 1012290:	1affffe8 	bne	1012238 <XAxiDma_Reset+0x1c>
		RegBase = InstancePtr->RegBase + XAXIDMA_RX_OFFSET;
 1012294:	e5903000 	ldr	r3, [r0]
 1012298:	e3a02004 	mov	r2, #4
 101229c:	e5832030 	str	r2, [r3, #48]	; 0x30
	if (InstancePtr->HasMm2S) {
 10122a0:	eaffffe9 	b	101224c <XAxiDma_Reset+0x30>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 10122a4:	e1c021d4 	ldrd	r2, [r0, #20]
 10122a8:	e3530000 	cmp	r3, #0
 10122ac:	1a000018 	bne	1012314 <XAxiDma_Reset+0xf8>
	return *(volatile u32 *) Addr;
 10122b0:	e5923008 	ldr	r3, [r2, #8]
 10122b4:	e580305c 	str	r3, [r0, #92]	; 0x5c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10122b8:	e590c744 	ldr	ip, [r0, #1860]	; 0x744
 10122bc:	e35c0000 	cmp	ip, #0
 10122c0:	daffffdc 	ble	1012238 <XAxiDma_Reset+0x1c>
 10122c4:	e3a0206c 	mov	r2, #108	; 0x6c
 10122c8:	e1a03000 	mov	r3, r0
 10122cc:	e02c0c92 	mla	ip, r2, ip, r0
 10122d0:	ea000008 	b	10122f8 <XAxiDma_Reset+0xdc>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 10122d4:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
 10122d8:	e3520000 	cmp	r2, #0
 10122dc:	e282e001 	add	lr, r2, #1
 10122e0:	0a000008 	beq	1012308 <XAxiDma_Reset+0xec>
 10122e4:	e791228e 	ldr	r2, [r1, lr, lsl #5]
 10122e8:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 10122ec:	e283306c 	add	r3, r3, #108	; 0x6c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10122f0:	e15c0003 	cmp	ip, r3
 10122f4:	0affffe3 	beq	1012288 <XAxiDma_Reset+0x6c>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 10122f8:	e5932084 	ldr	r2, [r3, #132]	; 0x84
 10122fc:	e5931080 	ldr	r1, [r3, #128]	; 0x80
 1012300:	e3520000 	cmp	r2, #0
 1012304:	1afffff2 	bne	10122d4 <XAxiDma_Reset+0xb8>
 1012308:	e5912008 	ldr	r2, [r1, #8]
 101230c:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1012310:	eafffff5 	b	10122ec <XAxiDma_Reset+0xd0>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1012314:	e5903078 	ldr	r3, [r0, #120]	; 0x78
 1012318:	e3530000 	cmp	r3, #0
 101231c:	0affffe3 	beq	10122b0 <XAxiDma_Reset+0x94>
 1012320:	e2833001 	add	r3, r3, #1
 1012324:	e7923283 	ldr	r3, [r2, r3, lsl #5]
 1012328:	e580305c 	str	r3, [r0, #92]	; 0x5c
 101232c:	eaffffe1 	b	10122b8 <XAxiDma_Reset+0x9c>

01012330 <XAxiDma_ResetIsDone>:
	TxRingPtr = XAxiDma_GetTxRing(InstancePtr);
	RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

	/* Check transmit channel
	 */
	if (InstancePtr->HasMm2S) {
 1012330:	e5903004 	ldr	r3, [r0, #4]
 1012334:	e3530000 	cmp	r3, #0
 1012338:	0a000003 	beq	101234c <XAxiDma_ResetIsDone+0x1c>
 101233c:	e5903014 	ldr	r3, [r0, #20]
 1012340:	e5933000 	ldr	r3, [r3]
		RegisterValue = XAxiDma_ReadReg(TxRingPtr->ChanBase,
			XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1012344:	e3130004 	tst	r3, #4
 1012348:	1a000009 	bne	1012374 <XAxiDma_ResetIsDone+0x44>
		}
	}

	/* Check receive channel
	 */
	if (InstancePtr->HasS2Mm) {
 101234c:	e5903008 	ldr	r3, [r0, #8]
 1012350:	e3530000 	cmp	r3, #0
 1012354:	0a000004 	beq	101236c <XAxiDma_ResetIsDone+0x3c>
 1012358:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 101235c:	e5930000 	ldr	r0, [r3]
		RegisterValue = XAxiDma_ReadReg(RxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1012360:	e2200004 	eor	r0, r0, #4
 1012364:	e7e00150 	ubfx	r0, r0, #2, #1
 1012368:	e12fff1e 	bx	lr

			return 0;
		}
	}

	return 1;
 101236c:	e3a00001 	mov	r0, #1
}
 1012370:	e12fff1e 	bx	lr
			return 0;
 1012374:	e3a00000 	mov	r0, #0
 1012378:	e12fff1e 	bx	lr

0101237c <XAxiDma_CfgInitialize>:
{
 101237c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!Config) {
 1012380:	e2515000 	subs	r5, r1, #0
	InstancePtr->Initialized = 0;
 1012384:	e3a01000 	mov	r1, #0
{
 1012388:	e24dd00c 	sub	sp, sp, #12
	InstancePtr->Initialized = 0;
 101238c:	e580100c 	str	r1, [r0, #12]
		return XST_INVALID_PARAM;
 1012390:	03a0000f 	moveq	r0, #15
	if(!Config) {
 1012394:	0a000078 	beq	101257c <XAxiDma_CfgInitialize+0x200>
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1012398:	e3a02e75 	mov	r2, #1872	; 0x750
 101239c:	e1a04000 	mov	r4, r0
	BaseAddr = Config->BaseAddr;
 10123a0:	e5956004 	ldr	r6, [r5, #4]
	memset(InstancePtr, 0, sizeof(XAxiDma));
 10123a4:	fa002741 	blx	101c0b0 <memset>
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 10123a8:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 10123ac:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
	InstancePtr->AddrWidth = Config->AddrWidth;
 10123b0:	e595103c 	ldr	r1, [r5, #60]	; 0x3c
	if (!InstancePtr->TxNumChannels)
 10123b4:	e3530000 	cmp	r3, #0
	InstancePtr->HasMm2S = Config->HasMm2S;
 10123b8:	e595b00c 	ldr	fp, [r5, #12]
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 10123bc:	e595a018 	ldr	sl, [r5, #24]
	InstancePtr->HasSg = Config->HasSg;
 10123c0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 10123c4:	e5958038 	ldr	r8, [r5, #56]	; 0x38
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 10123c8:	e5843740 	str	r3, [r4, #1856]	; 0x740
		InstancePtr->TxNumChannels = 1;
 10123cc:	03a03001 	moveq	r3, #1
 10123d0:	05843740 	streq	r3, [r4, #1856]	; 0x740
	if (!InstancePtr->RxNumChannels)
 10123d4:	e3500000 	cmp	r0, #0
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 10123d8:	e5840744 	str	r0, [r4, #1860]	; 0x744
		InstancePtr->RxNumChannels = 1;
 10123dc:	03a00001 	moveq	r0, #1
	InstancePtr->AddrWidth = Config->AddrWidth;
 10123e0:	e58d1004 	str	r1, [sp, #4]
	InstancePtr->HasMm2S = Config->HasMm2S;
 10123e4:	e8840840 	stm	r4, {r6, fp}
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 10123e8:	e584a008 	str	sl, [r4, #8]
	InstancePtr->HasSg = Config->HasSg;
 10123ec:	e5842010 	str	r2, [r4, #16]
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 10123f0:	e5848748 	str	r8, [r4, #1864]	; 0x748
	InstancePtr->AddrWidth = Config->AddrWidth;
 10123f4:	e584174c 	str	r1, [r4, #1868]	; 0x74c
		InstancePtr->RxNumChannels = 1;
 10123f8:	05840744 	streq	r0, [r4, #1860]	; 0x744
	if (!InstancePtr->RxNumChannels)
 10123fc:	0a000060 	beq	1012584 <XAxiDma_CfgInitialize+0x208>
	if ((InstancePtr->RxNumChannels > 1) ||
 1012400:	e3500001 	cmp	r0, #1
 1012404:	da00005e 	ble	1012584 <XAxiDma_CfgInitialize+0x208>
		MaxTransferLen =
 1012408:	e30f9fff 	movw	r9, #65535	; 0xffff
	if (!InstancePtr->MicroDmaMode) {
 101240c:	e3580000 	cmp	r8, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1012410:	e3a02002 	mov	r2, #2
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1012414:	e3a03000 	mov	r3, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1012418:	e584201c 	str	r2, [r4, #28]
	InstancePtr->TxBdRing.IsRxChannel = 0;
 101241c:	e5843018 	str	r3, [r4, #24]
		InstancePtr->TxBdRing.MaxTransferLen = MaxTransferLen;
 1012420:	01a02009 	moveq	r2, r9
	if (!InstancePtr->MicroDmaMode) {
 1012424:	0a000006 	beq	1012444 <XAxiDma_CfgInitialize+0xc8>
				((Config->Mm2SDataWidth / 4) *
 1012428:	e5953014 	ldr	r3, [r5, #20]
 101242c:	e5952030 	ldr	r2, [r5, #48]	; 0x30
 1012430:	e2831003 	add	r1, r3, #3
 1012434:	e3530000 	cmp	r3, #0
 1012438:	b1a03001 	movlt	r3, r1
 101243c:	e1a03143 	asr	r3, r3, #2
 1012440:	e0020392 	mul	r2, r2, r3
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1012444:	e3500000 	cmp	r0, #0
	InstancePtr->TxBdRing.RingIndex = 0;
 1012448:	e3a03000 	mov	r3, #0
 101244c:	e5842030 	str	r2, [r4, #48]	; 0x30
						 = AXIDMA_CHANNEL_HALTED;
 1012450:	c3a0706c 	movgt	r7, #108	; 0x6c
	InstancePtr->TxBdRing.RingIndex = 0;
 1012454:	e5843078 	str	r3, [r4, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1012458:	c1a02004 	movgt	r2, r4
						 = AXIDMA_CHANNEL_HALTED;
 101245c:	c3a0e002 	movgt	lr, #2
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1012460:	c3a0c001 	movgt	ip, #1
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1012464:	da000007 	ble	1012488 <XAxiDma_CfgInitialize+0x10c>
						 = AXIDMA_CHANNEL_HALTED;
 1012468:	e0214397 	mla	r1, r7, r3, r4
 101246c:	e282206c 	add	r2, r2, #108	; 0x6c
 1012470:	e581e088 	str	lr, [r1, #136]	; 0x88
		InstancePtr->RxBdRing[Index].RingIndex = Index;
 1012474:	e5823078 	str	r3, [r2, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1012478:	e2833001 	add	r3, r3, #1
 101247c:	e1500003 	cmp	r0, r3
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1012480:	e582c018 	str	ip, [r2, #24]
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1012484:	1afffff7 	bne	1012468 <XAxiDma_CfgInitialize+0xec>
	if (InstancePtr->HasMm2S) {
 1012488:	e35b0000 	cmp	fp, #0
 101248c:	0a00000c 	beq	10124c4 <XAxiDma_CfgInitialize+0x148>
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1012490:	e5953014 	ldr	r3, [r5, #20]
		if (InstancePtr->AddrWidth > 32)
 1012494:	e59d2004 	ldr	r2, [sp, #4]
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1012498:	e595c008 	ldr	ip, [r5, #8]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 101249c:	e5951010 	ldr	r1, [r5, #16]
		if (InstancePtr->AddrWidth > 32)
 10124a0:	e3520020 	cmp	r2, #32
			((unsigned int)Config->Mm2SDataWidth >> 3);
 10124a4:	e1a031a3 	lsr	r3, r3, #3
		if (InstancePtr->AddrWidth > 32)
 10124a8:	d3a02000 	movle	r2, #0
		InstancePtr->TxBdRing.ChanBase =
 10124ac:	e5846014 	str	r6, [r4, #20]
		if (InstancePtr->AddrWidth > 32)
 10124b0:	c3a02001 	movgt	r2, #1
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 10124b4:	e584c020 	str	ip, [r4, #32]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 10124b8:	e5841024 	str	r1, [r4, #36]	; 0x24
		InstancePtr->TxBdRing.DataWidth =
 10124bc:	e5843028 	str	r3, [r4, #40]	; 0x28
 10124c0:	e584202c 	str	r2, [r4, #44]	; 0x2c
	if (InstancePtr->HasS2Mm) {
 10124c4:	e35a0000 	cmp	sl, #0
 10124c8:	0a00001e 	beq	1012548 <XAxiDma_CfgInitialize+0x1cc>
		for (Index = 0;
 10124cc:	e3500000 	cmp	r0, #0
 10124d0:	da00001c 	ble	1012548 <XAxiDma_CfgInitialize+0x1cc>
			((unsigned int)Config->S2MmDataWidth >> 3);
 10124d4:	e5951020 	ldr	r1, [r5, #32]
 10124d8:	e3a0306c 	mov	r3, #108	; 0x6c
 10124dc:	e0204093 	mla	r0, r3, r0, r4
 10124e0:	e59d3004 	ldr	r3, [sp, #4]
					Config->HasStsCntrlStrm;
 10124e4:	e595e008 	ldr	lr, [r5, #8]
						((Config->S2MmDataWidth / 4) *
 10124e8:	e3510000 	cmp	r1, #0
					Config->HasS2MmDRE;
 10124ec:	e595c01c 	ldr	ip, [r5, #28]
						((Config->S2MmDataWidth / 4) *
 10124f0:	e2817003 	add	r7, r1, #3
 10124f4:	a1a07001 	movge	r7, r1
 10124f8:	e1a07147 	asr	r7, r7, #2
 10124fc:	e3530020 	cmp	r3, #32
			((unsigned int)Config->S2MmDataWidth >> 3);
 1012500:	e1a011a1 	lsr	r1, r1, #3
 1012504:	e2866030 	add	r6, r6, #48	; 0x30
 1012508:	d3a0a000 	movle	sl, #0
 101250c:	c3a0a001 	movgt	sl, #1
 1012510:	e1a03004 	mov	r3, r4
			if (!InstancePtr->MicroDmaMode) {
 1012514:	e3580000 	cmp	r8, #0
				InstancePtr->RxBdRing[Index].MaxTransferLen =
 1012518:	e1a02009 	mov	r2, r9
			InstancePtr->RxBdRing[Index].ChanBase =
 101251c:	e5836080 	str	r6, [r3, #128]	; 0x80
			InstancePtr->RxBdRing[Index].HasStsCntrlStrm =
 1012520:	e283306c 	add	r3, r3, #108	; 0x6c
 1012524:	e583e020 	str	lr, [r3, #32]
			InstancePtr->RxBdRing[Index].HasDRE =
 1012528:	e583c024 	str	ip, [r3, #36]	; 0x24
			InstancePtr->RxBdRing[Index].DataWidth =
 101252c:	e5831028 	str	r1, [r3, #40]	; 0x28
						((Config->S2MmDataWidth / 4) *
 1012530:	15952034 	ldrne	r2, [r5, #52]	; 0x34
 1012534:	e583a02c 	str	sl, [r3, #44]	; 0x2c
 1012538:	10020792 	mulne	r2, r2, r7
 101253c:	e5832030 	str	r2, [r3, #48]	; 0x30
		for (Index = 0;
 1012540:	e1530000 	cmp	r3, r0
 1012544:	1afffff2 	bne	1012514 <XAxiDma_CfgInitialize+0x198>
	XAxiDma_Reset(InstancePtr);
 1012548:	e1a00004 	mov	r0, r4
 101254c:	e3a05f7d 	mov	r5, #500	; 0x1f4
 1012550:	ebffff31 	bl	101221c <XAxiDma_Reset>
	while (TimeOut) {
 1012554:	ea000001 	b	1012560 <XAxiDma_CfgInitialize+0x1e4>
 1012558:	e2555001 	subs	r5, r5, #1
 101255c:	0a00000f 	beq	10125a0 <XAxiDma_CfgInitialize+0x224>
		if(XAxiDma_ResetIsDone(InstancePtr)) {
 1012560:	e1a00004 	mov	r0, r4
 1012564:	ebffff71 	bl	1012330 <XAxiDma_ResetIsDone>
 1012568:	e3500000 	cmp	r0, #0
 101256c:	0afffff9 	beq	1012558 <XAxiDma_CfgInitialize+0x1dc>
	return XST_SUCCESS;
 1012570:	e3a00000 	mov	r0, #0
	InstancePtr->Initialized = 1;
 1012574:	e3a03001 	mov	r3, #1
 1012578:	e584300c 	str	r3, [r4, #12]
}
 101257c:	e28dd00c 	add	sp, sp, #12
 1012580:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((InstancePtr->RxNumChannels > 1) ||
 1012584:	e5943740 	ldr	r3, [r4, #1856]	; 0x740
 1012588:	e3530001 	cmp	r3, #1
 101258c:	caffff9d 	bgt	1012408 <XAxiDma_CfgInitialize+0x8c>
		MaxTransferLen = (1U << Config->SgLengthWidth) - 1;
 1012590:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1012594:	e3e09000 	mvn	r9, #0
 1012598:	e1e09319 	mvn	r9, r9, lsl r3
 101259c:	eaffff9a 	b	101240c <XAxiDma_CfgInitialize+0x90>
		xdbg_printf(XDBG_DEBUG_ERROR, "Failed reset in"
 10125a0:	e30905fc 	movw	r0, #38396	; 0x95fc
 10125a4:	e3400106 	movt	r0, #262	; 0x106
 10125a8:	fa002717 	blx	101c20c <puts>
		InstancePtr->Initialized = 0;
 10125ac:	e584500c 	str	r5, [r4, #12]
		return XST_DMA_ERROR;
 10125b0:	e3a00009 	mov	r0, #9
 10125b4:	eafffff0 	b	101257c <XAxiDma_CfgInitialize+0x200>

010125b8 <XAxiDma_Pause>:
*
*****************************************************************************/
int XAxiDma_Pause(XAxiDma * InstancePtr)
{

	if (!InstancePtr->Initialized) {
 10125b8:	e590100c 	ldr	r1, [r0, #12]
{
 10125bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 10125c0:	e3510000 	cmp	r1, #0
 10125c4:	0a000022 	beq	1012654 <XAxiDma_Pause+0x9c>
					" %d\r\n",InstancePtr->Initialized);

		return XST_NOT_SGDMA;
	}

	if (InstancePtr->HasMm2S) {
 10125c8:	e5903004 	ldr	r3, [r0, #4]
 10125cc:	e3530000 	cmp	r3, #0
 10125d0:	0a000007 	beq	10125f4 <XAxiDma_Pause+0x3c>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* If channel is halted, then we do not need to do anything
		 */
		if(!XAxiDma_HasSg(InstancePtr)) {
 10125d4:	e5903010 	ldr	r3, [r0, #16]
 10125d8:	e3530000 	cmp	r3, #0
 10125dc:	05902014 	ldreq	r2, [r0, #20]
 10125e0:	05923000 	ldreq	r3, [r2]
			XAxiDma_WriteReg(TxRingPtr->ChanBase,
 10125e4:	03c33001 	biceq	r3, r3, #1
	*LocalAddr = Value;
 10125e8:	05823000 	streq	r3, [r2]
				XAxiDma_ReadReg(TxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET)
				& ~XAXIDMA_CR_RUNSTOP_MASK);
		}

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10125ec:	e3a03002 	mov	r3, #2
 10125f0:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 10125f4:	e5903008 	ldr	r3, [r0, #8]
 10125f8:	e3530000 	cmp	r3, #0
 10125fc:	0a000012 	beq	101264c <XAxiDma_Pause+0x94>
		int RingIndex = 0;
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012600:	e5904744 	ldr	r4, [r0, #1860]	; 0x744
 1012604:	e3540000 	cmp	r4, #0
 1012608:	da00000f 	ble	101264c <XAxiDma_Pause+0x94>
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);

			/* If channel is halted, then we do not need to do anything
			 */

			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 101260c:	e5907010 	ldr	r7, [r0, #16]
 1012610:	e1a02000 	mov	r2, r0
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012614:	e3a03000 	mov	r3, #0
					XAxiDma_ReadReg(RxRingPtr->ChanBase,
					XAXIDMA_CR_OFFSET)
					& ~XAXIDMA_CR_RUNSTOP_MASK);
			}

			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1012618:	e3a0606c 	mov	r6, #108	; 0x6c
 101261c:	e3a05002 	mov	r5, #2
			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 1012620:	e3570000 	cmp	r7, #0
 1012624:	e282206c 	add	r2, r2, #108	; 0x6c
	return *(volatile u32 *) Addr;
 1012628:	0592e014 	ldreq	lr, [r2, #20]
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 101262c:	e0210396 	mla	r1, r6, r3, r0
				RingIndex++) {
 1012630:	e2833001 	add	r3, r3, #1
 1012634:	059ec000 	ldreq	ip, [lr]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 1012638:	03ccc001 	biceq	ip, ip, #1
	*LocalAddr = Value;
 101263c:	058ec000 	streq	ip, [lr]
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012640:	e1530004 	cmp	r3, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1012644:	e5815088 	str	r5, [r1, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012648:	1afffff4 	bne	1012620 <XAxiDma_Pause+0x68>
		}
	}

	return XST_SUCCESS;
 101264c:	e3a00000 	mov	r0, #0

}
 1012650:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Pause: Driver not initialized"
 1012654:	e3090618 	movw	r0, #38424	; 0x9618
 1012658:	e3400106 	movt	r0, #262	; 0x106
 101265c:	fa0026c5 	blx	101c178 <printf>
		return XST_NOT_SGDMA;
 1012660:	e3a00010 	mov	r0, #16
 1012664:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01012668 <XAxiDma_Resume>:
*****************************************************************************/
int XAxiDma_Resume(XAxiDma * InstancePtr)
{
	int Status;

	if (!InstancePtr->Initialized) {
 1012668:	e590100c 	ldr	r1, [r0, #12]
{
 101266c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 1012670:	e3510000 	cmp	r1, #0
 1012674:	0a000032 	beq	1012744 <XAxiDma_Resume+0xdc>
		" %d\r\n",InstancePtr->Initialized);

		return 0;
	}

	if (InstancePtr->HasMm2S) {
 1012678:	e5903004 	ldr	r3, [r0, #4]
 101267c:	e1a04000 	mov	r4, r0
 1012680:	e3530000 	cmp	r3, #0
 1012684:	0a000028 	beq	101272c <XAxiDma_Resume+0xc4>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(TxRingPtr)) {
 1012688:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 101268c:	e5933004 	ldr	r3, [r3, #4]
 1012690:	e3130001 	tst	r3, #1
 1012694:	1a000085 	bne	10128b0 <XAxiDma_Resume+0x248>

			return 0;
		}
	}

	if (InstancePtr->HasS2Mm) {
 1012698:	e5903008 	ldr	r3, [r0, #8]
 101269c:	e3530000 	cmp	r3, #0
 10126a0:	1a000044 	bne	10127b8 <XAxiDma_Resume+0x150>
		if(XAxiDma_HasSg(InstancePtr)) {
 10126a4:	e5943010 	ldr	r3, [r4, #16]
 10126a8:	e3530000 	cmp	r3, #0
 10126ac:	1a000048 	bne	10127d4 <XAxiDma_Resume+0x16c>
		TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10126b0:	e3a03001 	mov	r3, #1
 10126b4:	e584301c 	str	r3, [r4, #28]
	if (InstancePtr->HasS2Mm) {
 10126b8:	e5943008 	ldr	r3, [r4, #8]
 10126bc:	e3530000 	cmp	r3, #0
 10126c0:	0a00001c 	beq	1012738 <XAxiDma_Resume+0xd0>
 10126c4:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 10126c8:	e3530000 	cmp	r3, #0
 10126cc:	da000019 	ble	1012738 <XAxiDma_Resume+0xd0>
 10126d0:	e3a05000 	mov	r5, #0
				Status = XAxiDma_BdRingStart(RxRingPtr);
 10126d4:	e2848080 	add	r8, r4, #128	; 0x80
 10126d8:	e3a0606c 	mov	r6, #108	; 0x6c
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10126dc:	e3a07001 	mov	r7, #1
 10126e0:	ea000005 	b	10126fc <XAxiDma_Resume+0x94>
 10126e4:	e0234596 	mla	r3, r6, r5, r4
					RingIndex++) {
 10126e8:	e2855001 	add	r5, r5, #1
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10126ec:	e5837088 	str	r7, [r3, #136]	; 0x88
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 10126f0:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10126f4:	e1530005 	cmp	r3, r5
 10126f8:	da00000e 	ble	1012738 <XAxiDma_Resume+0xd0>
			if(XAxiDma_HasSg(InstancePtr)) {
 10126fc:	e5943010 	ldr	r3, [r4, #16]
 1012700:	e3530000 	cmp	r3, #0
 1012704:	0afffff6 	beq	10126e4 <XAxiDma_Resume+0x7c>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 1012708:	e0208596 	mla	r0, r6, r5, r8
 101270c:	eb000370 	bl	10134d4 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1012710:	e2501000 	subs	r1, r0, #0
 1012714:	0afffff2 	beq	10126e4 <XAxiDma_Resume+0x7c>
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1012718:	e3090730 	movw	r0, #38704	; 0x9730
					return XST_DMA_ERROR;
 101271c:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1012720:	e3400106 	movt	r0, #262	; 0x106
 1012724:	fa002693 	blx	101c178 <printf>
					return XST_DMA_ERROR;
 1012728:	ea000003 	b	101273c <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasS2Mm) {
 101272c:	e5903008 	ldr	r3, [r0, #8]
 1012730:	e3530000 	cmp	r3, #0
 1012734:	1a000008 	bne	101275c <XAxiDma_Resume+0xf4>
	return XST_SUCCESS;
 1012738:	e3a04000 	mov	r4, #0
}
 101273c:	e1a00004 	mov	r0, r4
 1012740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 1012744:	e309063c 	movw	r0, #38460	; 0x963c
		return XST_NOT_SGDMA;
 1012748:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 101274c:	e3400106 	movt	r0, #262	; 0x106
 1012750:	fa002688 	blx	101c178 <printf>
}
 1012754:	e1a00004 	mov	r0, r4
 1012758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		XAxiDma_BdRing *RxRingPtr;
		RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 101275c:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1012760:	e5933004 	ldr	r3, [r3, #4]
 1012764:	e3130001 	tst	r3, #1
 1012768:	0affffd5 	beq	10126c4 <XAxiDma_Resume+0x5c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 101276c:	e3090680 	movw	r0, #38528	; 0x9680
 1012770:	e3400106 	movt	r0, #262	; 0x106
 1012774:	fa0026a4 	blx	101c20c <puts>
	if (!InstancePtr->Initialized) {
 1012778:	e594100c 	ldr	r1, [r4, #12]
 101277c:	e3510000 	cmp	r1, #0
 1012780:	0a000058 	beq	10128e8 <XAxiDma_Resume+0x280>
	if (InstancePtr->HasMm2S) {
 1012784:	e5943004 	ldr	r3, [r4, #4]
 1012788:	e3530000 	cmp	r3, #0
 101278c:	0a000002 	beq	101279c <XAxiDma_Resume+0x134>
		if (TxRingPtr->RunState == AXIDMA_CHANNEL_HALTED) {
 1012790:	e594301c 	ldr	r3, [r4, #28]
 1012794:	e3530002 	cmp	r3, #2
 1012798:	0a000048 	beq	10128c0 <XAxiDma_Resume+0x258>
	if (InstancePtr->HasS2Mm) {
 101279c:	e5943008 	ldr	r3, [r4, #8]
 10127a0:	e3530000 	cmp	r3, #0
 10127a4:	1a000013 	bne	10127f8 <XAxiDma_Resume+0x190>
	if (InstancePtr->HasMm2S) {
 10127a8:	e5943004 	ldr	r3, [r4, #4]
 10127ac:	e3530000 	cmp	r3, #0
 10127b0:	1affffbb 	bne	10126a4 <XAxiDma_Resume+0x3c>
 10127b4:	eaffffdf 	b	1012738 <XAxiDma_Resume+0xd0>
		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 10127b8:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 10127bc:	e5933004 	ldr	r3, [r3, #4]
 10127c0:	e3130001 	tst	r3, #1
 10127c4:	1affffe8 	bne	101276c <XAxiDma_Resume+0x104>
		if(XAxiDma_HasSg(InstancePtr)) {
 10127c8:	e5943010 	ldr	r3, [r4, #16]
 10127cc:	e3530000 	cmp	r3, #0
 10127d0:	0affffb6 	beq	10126b0 <XAxiDma_Resume+0x48>
			Status = XAxiDma_BdRingStart(TxRingPtr);
 10127d4:	e2840014 	add	r0, r4, #20
 10127d8:	eb00033d 	bl	10134d4 <XAxiDma_BdRingStart>
			if (Status != XST_SUCCESS) {
 10127dc:	e2501000 	subs	r1, r0, #0
 10127e0:	0affffb2 	beq	10126b0 <XAxiDma_Resume+0x48>
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10127e4:	e3090708 	movw	r0, #38664	; 0x9708
				return XST_DMA_ERROR;
 10127e8:	e3a04009 	mov	r4, #9
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10127ec:	e3400106 	movt	r0, #262	; 0x106
 10127f0:	fa002660 	blx	101c178 <printf>
				return XST_DMA_ERROR;
 10127f4:	eaffffd0 	b	101273c <XAxiDma_Resume+0xd4>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10127f8:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10127fc:	e3530000 	cmp	r3, #0
 1012800:	da000042 	ble	1012910 <XAxiDma_Resume+0x2a8>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1012804:	e5942088 	ldr	r2, [r4, #136]	; 0x88
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr,
 1012808:	e2846080 	add	r6, r4, #128	; 0x80
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 101280c:	e3520002 	cmp	r2, #2
 1012810:	1a00003e 	bne	1012910 <XAxiDma_Resume+0x2a8>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012814:	e3a05000 	mov	r5, #0
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1012818:	e3a0706c 	mov	r7, #108	; 0x6c
 101281c:	e3a08001 	mov	r8, #1
 1012820:	ea00000e 	b	1012860 <XAxiDma_Resume+0x1f8>
 1012824:	e5962000 	ldr	r2, [r6]
 1012828:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 101282c:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1012830:	e5823000 	str	r3, [r2]
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1012834:	e0234597 	mla	r3, r7, r5, r4
						RingIndex++) {
 1012838:	e2855001 	add	r5, r5, #1
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 101283c:	e0224597 	mla	r2, r7, r5, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1012840:	e5838088 	str	r8, [r3, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1012844:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1012848:	e286606c 	add	r6, r6, #108	; 0x6c
 101284c:	e1550003 	cmp	r5, r3
 1012850:	aa000012 	bge	10128a0 <XAxiDma_Resume+0x238>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1012854:	e5923088 	ldr	r3, [r2, #136]	; 0x88
 1012858:	e3530002 	cmp	r3, #2
 101285c:	1a00000f 	bne	10128a0 <XAxiDma_Resume+0x238>
			if(XAxiDma_HasSg(InstancePtr)) {
 1012860:	e5943010 	ldr	r3, [r4, #16]
 1012864:	e3530000 	cmp	r3, #0
 1012868:	0affffed 	beq	1012824 <XAxiDma_Resume+0x1bc>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 101286c:	e1a00006 	mov	r0, r6
 1012870:	eb000317 	bl	10134d4 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1012874:	e2501000 	subs	r1, r0, #0
 1012878:	0affffed 	beq	1012834 <XAxiDma_Resume+0x1cc>
					xdbg_printf(XDBG_DEBUG_ERROR,
 101287c:	e30906c4 	movw	r0, #38596	; 0x96c4
					return XST_DMA_ERROR;
 1012880:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR,
 1012884:	e3400106 	movt	r0, #262	; 0x106
 1012888:	fa00263a 	blx	101c178 <printf>
			xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed to start"
 101288c:	e30906e4 	movw	r0, #38628	; 0x96e4
 1012890:	e1a01004 	mov	r1, r4
 1012894:	e3400106 	movt	r0, #262	; 0x106
 1012898:	fa002636 	blx	101c178 <printf>
			return Status;
 101289c:	eaffffa6 	b	101273c <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasMm2S) {
 10128a0:	e5943004 	ldr	r3, [r4, #4]
 10128a4:	e3530000 	cmp	r3, #0
 10128a8:	0affff82 	beq	10126b8 <XAxiDma_Resume+0x50>
 10128ac:	eaffff7c 	b	10126a4 <XAxiDma_Resume+0x3c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 10128b0:	e3090660 	movw	r0, #38496	; 0x9660
 10128b4:	e3400106 	movt	r0, #262	; 0x106
 10128b8:	fa002653 	blx	101c20c <puts>
			return 0;
 10128bc:	eaffffad 	b	1012778 <XAxiDma_Resume+0x110>
			if(XAxiDma_HasSg(InstancePtr)) {
 10128c0:	e5943010 	ldr	r3, [r4, #16]
 10128c4:	e3530000 	cmp	r3, #0
 10128c8:	1a00000b 	bne	10128fc <XAxiDma_Resume+0x294>
	return *(volatile u32 *) Addr;
 10128cc:	e5942014 	ldr	r2, [r4, #20]
 10128d0:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(TxRingPtr->ChanBase,
 10128d4:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 10128d8:	e5823000 	str	r3, [r2]
			TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10128dc:	e3a03001 	mov	r3, #1
 10128e0:	e584301c 	str	r3, [r4, #28]
 10128e4:	eaffffac 	b	101279c <XAxiDma_Resume+0x134>
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 10128e8:	e30906a0 	movw	r0, #38560	; 0x96a0
		return XST_NOT_SGDMA;
 10128ec:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 10128f0:	e3400106 	movt	r0, #262	; 0x106
 10128f4:	fa00261f 	blx	101c178 <printf>
		if (Status != XST_SUCCESS) {
 10128f8:	eaffffe3 	b	101288c <XAxiDma_Resume+0x224>
				Status = XAxiDma_BdRingStart(TxRingPtr);
 10128fc:	e2840014 	add	r0, r4, #20
 1012900:	eb0002f3 	bl	10134d4 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1012904:	e2501000 	subs	r1, r0, #0
 1012908:	0afffff3 	beq	10128dc <XAxiDma_Resume+0x274>
 101290c:	eaffffda 	b	101287c <XAxiDma_Resume+0x214>
	if (InstancePtr->HasMm2S) {
 1012910:	e5942004 	ldr	r2, [r4, #4]
 1012914:	e3520000 	cmp	r2, #0
 1012918:	1affff61 	bne	10126a4 <XAxiDma_Resume+0x3c>
 101291c:	eaffff69 	b	10126c8 <XAxiDma_Resume+0x60>

01012920 <XAxiDma_Busy>:
 *
 *****************************************************************************/
u32 XAxiDma_Busy(XAxiDma *InstancePtr, int Direction)
{

	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1012920:	e5903000 	ldr	r3, [r0]
 1012924:	e0811081 	add	r1, r1, r1, lsl #1
 1012928:	e0833201 	add	r3, r3, r1, lsl #4
	return *(volatile u32 *) Addr;
 101292c:	e5930004 	ldr	r0, [r3, #4]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_SR_OFFSET) &
				XAXIDMA_IDLE_MASK) ? FALSE : TRUE);
 1012930:	e2200002 	eor	r0, r0, #2
}
 1012934:	e7e000d0 	ubfx	r0, r0, #1, #1
 1012938:	e12fff1e 	bx	lr

0101293c <XAxiDma_SelectKeyHole>:
 *****************************************************************************/
int XAxiDma_SelectKeyHole(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 101293c:	e0811081 	add	r1, r1, r1, lsl #1
 1012940:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 1012944:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1012948:	e1a01201 	lsl	r1, r1, #4
 101294c:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_KEYHOLE_MASK;
 1012950:	13833008 	orrne	r3, r3, #8
	else
		Value &= ~XAXIDMA_CR_KEYHOLE_MASK;
 1012954:	03c33008 	biceq	r3, r3, #8
	*LocalAddr = Value;
 1012958:	e7813000 	str	r3, [r1, r0]
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;

}
 101295c:	e3a00000 	mov	r0, #0
 1012960:	e12fff1e 	bx	lr

01012964 <XAxiDma_SelectCyclicMode>:
 *****************************************************************************/
int XAxiDma_SelectCyclicMode(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1012964:	e0811081 	add	r1, r1, r1, lsl #1
 1012968:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 101296c:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1012970:	e1a01201 	lsl	r1, r1, #4
	return *(volatile u32 *) Addr;
 1012974:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_CYCLIC_MASK;
 1012978:	13833010 	orrne	r3, r3, #16
	else
		Value &= ~XAXIDMA_CR_CYCLIC_MASK;
 101297c:	03c33010 	biceq	r3, r3, #16
	*LocalAddr = Value;
 1012980:	e7813000 	str	r3, [r1, r0]
	XAxiDma_WriteReg(InstancePtr->RegBase +
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;
}
 1012984:	e3a00000 	mov	r0, #0
 1012988:	e12fff1e 	bx	lr

0101298c <XAxiDma_SimpleTransfer>:
	u32 WordBits;
	int RingIndex = 0;

	/* If Scatter Gather is included then, cannot submit
	 */
	if (XAxiDma_HasSg(InstancePtr)) {
 101298c:	e590c010 	ldr	ip, [r0, #16]
{
 1012990:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1012994:	e24dd00c 	sub	sp, sp, #12
	if (XAxiDma_HasSg(InstancePtr)) {
 1012998:	e35c0000 	cmp	ip, #0
 101299c:	1a00002f 	bne	1012a60 <XAxiDma_SimpleTransfer+0xd4>
							" supported\r\n");

		return XST_FAILURE;
	}

	if(Direction == XAXIDMA_DMA_TO_DEVICE){
 10129a0:	e3530000 	cmp	r3, #0
 10129a4:	1a000025 	bne	1012a40 <XAxiDma_SimpleTransfer+0xb4>
		if ((Length < 1) ||
 10129a8:	e3520000 	cmp	r2, #0
 10129ac:	0a000028 	beq	1012a54 <XAxiDma_SimpleTransfer+0xc8>
 10129b0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
 10129b4:	e1530002 	cmp	r3, r2
 10129b8:	3a000025 	bcc	1012a54 <XAxiDma_SimpleTransfer+0xc8>
			(Length > InstancePtr->TxBdRing.MaxTransferLen)) {
			return XST_INVALID_PARAM;
		}

		if (!InstancePtr->HasMm2S) {
 10129bc:	e5903004 	ldr	r3, [r0, #4]
 10129c0:	e3530000 	cmp	r3, #0
 10129c4:	0a00004f 	beq	1012b08 <XAxiDma_SimpleTransfer+0x17c>
		}

		/* If the engine is doing transfer, cannot submit
		 */

		if(!(XAxiDma_ReadReg(InstancePtr->TxBdRing.ChanBase,
 10129c8:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 10129cc:	e593c004 	ldr	ip, [r3, #4]
 10129d0:	e31c0001 	tst	ip, #1
 10129d4:	1a000003 	bne	10129e8 <XAxiDma_SimpleTransfer+0x5c>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 10129d8:	e590c000 	ldr	ip, [r0]
 10129dc:	e59cc004 	ldr	ip, [ip, #4]
				XAXIDMA_SR_OFFSET) & XAXIDMA_HALTED_MASK)) {
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 10129e0:	e31c0002 	tst	ip, #2
 10129e4:	0a000033 	beq	1012ab8 <XAxiDma_SimpleTransfer+0x12c>
							"Engine is busy\r\n");
				return XST_FAILURE;
			}
		}

		if (!InstancePtr->MicroDmaMode) {
 10129e8:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 10129ec:	e35c0000 	cmp	ip, #0
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 10129f0:	0590c028 	ldreq	ip, [r0, #40]	; 0x28
		}
		else {
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 10129f4:	1300cfff 	movwne	ip, #4095	; 0xfff
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 10129f8:	024cc001 	subeq	ip, ip, #1
		}

		if ((BuffAddr & WordBits)) {
 10129fc:	e11c0001 	tst	ip, r1
 1012a00:	0a000002 	beq	1012a10 <XAxiDma_SimpleTransfer+0x84>

			if (!InstancePtr->TxBdRing.HasDRE) {
 1012a04:	e590c024 	ldr	ip, [r0, #36]	; 0x24
 1012a08:	e35c0000 	cmp	ip, #0
 1012a0c:	0a000038 	beq	1012af4 <XAxiDma_SimpleTransfer+0x168>
		}


		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
				 XAXIDMA_DESTADDR_OFFSET, LOWER_32_BITS(BuffAddr));
		if (InstancePtr->AddrWidth > 32)
 1012a10:	e590074c 	ldr	r0, [r0, #1868]	; 0x74c
	*LocalAddr = Value;
 1012a14:	e5831018 	str	r1, [r3, #24]
 1012a18:	e3500020 	cmp	r0, #32
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
					XAXIDMA_BUFFLEN_OFFSET, Length);

	}

	return XST_SUCCESS;
 1012a1c:	e3a00000 	mov	r0, #0
 1012a20:	c3a01000 	movgt	r1, #0
 1012a24:	c583101c 	strgt	r1, [r3, #28]
	return *(volatile u32 *) Addr;
 1012a28:	e5931000 	ldr	r1, [r3]
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 1012a2c:	e3811001 	orr	r1, r1, #1
	*LocalAddr = Value;
 1012a30:	e5831000 	str	r1, [r3]
 1012a34:	e5832028 	str	r2, [r3, #40]	; 0x28
}
 1012a38:	e28dd00c 	add	sp, sp, #12
 1012a3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 1012a40:	e3530001 	cmp	r3, #1
	return XST_SUCCESS;
 1012a44:	11a0000c 	movne	r0, ip
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 1012a48:	0a00000a 	beq	1012a78 <XAxiDma_SimpleTransfer+0xec>
}
 1012a4c:	e28dd00c 	add	sp, sp, #12
 1012a50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
			return XST_INVALID_PARAM;
 1012a54:	e3a0000f 	mov	r0, #15
}
 1012a58:	e28dd00c 	add	sp, sp, #12
 1012a5c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "Simple DMA mode is not"
 1012a60:	e3090754 	movw	r0, #38740	; 0x9754
 1012a64:	e3400106 	movt	r0, #262	; 0x106
 1012a68:	fa0025e7 	blx	101c20c <puts>
		return XST_FAILURE;
 1012a6c:	e3a00001 	mov	r0, #1
}
 1012a70:	e28dd00c 	add	sp, sp, #12
 1012a74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		if ((Length < 1) ||
 1012a78:	e3520000 	cmp	r2, #0
 1012a7c:	0afffff4 	beq	1012a54 <XAxiDma_SimpleTransfer+0xc8>
 1012a80:	e590c09c 	ldr	ip, [r0, #156]	; 0x9c
 1012a84:	e15c0002 	cmp	ip, r2
 1012a88:	3afffff1 	bcc	1012a54 <XAxiDma_SimpleTransfer+0xc8>
		if (!InstancePtr->HasS2Mm) {
 1012a8c:	e590c008 	ldr	ip, [r0, #8]
 1012a90:	e35c0000 	cmp	ip, #0
 1012a94:	0a000020 	beq	1012b1c <XAxiDma_SimpleTransfer+0x190>
		if(!(XAxiDma_ReadReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 1012a98:	e5903080 	ldr	r3, [r0, #128]	; 0x80
	return *(volatile u32 *) Addr;
 1012a9c:	e593c004 	ldr	ip, [r3, #4]
 1012aa0:	e31c0001 	tst	ip, #1
 1012aa4:	1a000008 	bne	1012acc <XAxiDma_SimpleTransfer+0x140>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1012aa8:	e590c000 	ldr	ip, [r0]
 1012aac:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 1012ab0:	e31c0002 	tst	ip, #2
 1012ab4:	1a000004 	bne	1012acc <XAxiDma_SimpleTransfer+0x140>
				xdbg_printf(XDBG_DEBUG_ERROR,
 1012ab8:	e3090798 	movw	r0, #38808	; 0x9798
 1012abc:	e3400106 	movt	r0, #262	; 0x106
 1012ac0:	fa0025d1 	blx	101c20c <puts>
				return XST_FAILURE;
 1012ac4:	e3a00001 	mov	r0, #1
 1012ac8:	eaffffdf 	b	1012a4c <XAxiDma_SimpleTransfer+0xc0>
		if (!InstancePtr->MicroDmaMode) {
 1012acc:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 1012ad0:	e35c0000 	cmp	ip, #0
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 1012ad4:	0590c094 	ldreq	ip, [r0, #148]	; 0x94
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 1012ad8:	1300cfff 	movwne	ip, #4095	; 0xfff
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 1012adc:	024cc001 	subeq	ip, ip, #1
		if ((BuffAddr & WordBits)) {
 1012ae0:	e11c0001 	tst	ip, r1
 1012ae4:	0affffc9 	beq	1012a10 <XAxiDma_SimpleTransfer+0x84>
			if (!InstancePtr->RxBdRing[RingIndex].HasDRE) {
 1012ae8:	e590c090 	ldr	ip, [r0, #144]	; 0x90
 1012aec:	e35c0000 	cmp	ip, #0
 1012af0:	1affffc6 	bne	1012a10 <XAxiDma_SimpleTransfer+0x84>
				xdbg_printf(XDBG_DEBUG_ERROR,
 1012af4:	e30907a8 	movw	r0, #38824	; 0x97a8
 1012af8:	e3400106 	movt	r0, #262	; 0x106
 1012afc:	fa00259d 	blx	101c178 <printf>
				return XST_INVALID_PARAM;
 1012b00:	e3a0000f 	mov	r0, #15
 1012b04:	eaffffd0 	b	1012a4c <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "MM2S channel is not"
 1012b08:	e3090778 	movw	r0, #38776	; 0x9778
 1012b0c:	e3400106 	movt	r0, #262	; 0x106
 1012b10:	fa0025bd 	blx	101c20c <puts>
			return XST_FAILURE;
 1012b14:	e3a00001 	mov	r0, #1
 1012b18:	eaffffcb 	b	1012a4c <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "S2MM channel is not"
 1012b1c:	e30907cc 	movw	r0, #38860	; 0x97cc
 1012b20:	e58d3004 	str	r3, [sp, #4]
 1012b24:	e3400106 	movt	r0, #262	; 0x106
 1012b28:	fa0025b7 	blx	101c20c <puts>
			return XST_FAILURE;
 1012b2c:	e59d3004 	ldr	r3, [sp, #4]
 1012b30:	e1a00003 	mov	r0, r3
 1012b34:	eaffffc4 	b	1012a4c <XAxiDma_SimpleTransfer+0xc0>

01012b38 <XAxiDma_LookupConfig>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].DeviceId == DeviceId) {
 1012b38:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1012b3c:	e3403106 	movt	r3, #262	; 0x106
 1012b40:	e5932000 	ldr	r2, [r3]
 1012b44:	e1500002 	cmp	r0, r2
 1012b48:	0a000004 	beq	1012b60 <XAxiDma_LookupConfig+0x28>
 1012b4c:	e5b32044 	ldr	r2, [r3, #68]!	; 0x44
 1012b50:	e1500002 	cmp	r0, r2
 1012b54:	01a00003 	moveq	r0, r3
 1012b58:	13a00000 	movne	r0, #0
 1012b5c:	e12fff1e 	bx	lr
 1012b60:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 1012b64:	e12fff1e 	bx	lr

01012b68 <XAxiDma_LookupConfigBaseAddr>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].BaseAddr == Baseaddr) {
 1012b68:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1012b6c:	e3403106 	movt	r3, #262	; 0x106
 1012b70:	e5932004 	ldr	r2, [r3, #4]
 1012b74:	e1500002 	cmp	r0, r2
 1012b78:	0a000004 	beq	1012b90 <XAxiDma_LookupConfigBaseAddr+0x28>
 1012b7c:	e5932048 	ldr	r2, [r3, #72]	; 0x48
 1012b80:	e1500002 	cmp	r0, r2
 1012b84:	02830044 	addeq	r0, r3, #68	; 0x44
 1012b88:	13a00000 	movne	r0, #0
 1012b8c:	e12fff1e 	bx	lr
 1012b90:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 1012b94:	e12fff1e 	bx	lr

01012b98 <XAxiDma_Selftest>:
* @note
*     None.
*
******************************************************************************/
int XAxiDma_Selftest(XAxiDma * InstancePtr)
{
 1012b98:	e92d4070 	push	{r4, r5, r6, lr}
	int TimeOut;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1012b9c:	e2505000 	subs	r5, r0, #0
 1012ba0:	0a00000e 	beq	1012be0 <XAxiDma_Selftest+0x48>
 1012ba4:	e3053f40 	movw	r3, #24384	; 0x5f40
 1012ba8:	e3a02000 	mov	r2, #0
 1012bac:	e3403146 	movt	r3, #326	; 0x146

	XAxiDma_Reset(InstancePtr);
 1012bb0:	e3a04f7d 	mov	r4, #500	; 0x1f4
	Xil_AssertNonvoid(InstancePtr != NULL);
 1012bb4:	e5832000 	str	r2, [r3]
	XAxiDma_Reset(InstancePtr);
 1012bb8:	ebfffd97 	bl	101221c <XAxiDma_Reset>

	/* At the initialization time, hardware should finish reset quickly
	 */
	TimeOut = XAXIDMA_RESET_TIMEOUT;

	while (TimeOut) {
 1012bbc:	ea000001 	b	1012bc8 <XAxiDma_Selftest+0x30>
 1012bc0:	e2544001 	subs	r4, r4, #1
 1012bc4:	0a00000f 	beq	1012c08 <XAxiDma_Selftest+0x70>

		if(XAxiDma_ResetIsDone(InstancePtr)) {
 1012bc8:	e1a00005 	mov	r0, r5
 1012bcc:	ebfffdd7 	bl	1012330 <XAxiDma_ResetIsDone>
 1012bd0:	e3500000 	cmp	r0, #0
 1012bd4:	0afffff9 	beq	1012bc0 <XAxiDma_Selftest+0x28>
	}

	if (!TimeOut)
		return XST_FAILURE;

	return XST_SUCCESS;
 1012bd8:	e3a00000 	mov	r0, #0
}
 1012bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1012be0:	e30907ec 	movw	r0, #38892	; 0x97ec
 1012be4:	e3a01056 	mov	r1, #86	; 0x56
 1012be8:	e3400106 	movt	r0, #262	; 0x106
 1012bec:	eb0012d3 	bl	1017740 <Xil_Assert>
 1012bf0:	e3053f40 	movw	r3, #24384	; 0x5f40
 1012bf4:	e3a02001 	mov	r2, #1
 1012bf8:	e3403146 	movt	r3, #326	; 0x146
 1012bfc:	e1a00005 	mov	r0, r5
 1012c00:	e5832000 	str	r2, [r3]
 1012c04:	e8bd8070 	pop	{r4, r5, r6, pc}
		return XST_FAILURE;
 1012c08:	e3a00001 	mov	r0, #1
 1012c0c:	e8bd8070 	pop	{r4, r5, r6, pc}

01012c10 <XAxiDma_BdSetLength>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdSetLength(XAxiDma_Bd *BdPtr, u32 LenBytes, u32 LengthMask)
{
	if (LenBytes <= 0 || (LenBytes > LengthMask)) {
 1012c10:	e1510002 	cmp	r1, r2
 1012c14:	93a03000 	movls	r3, #0
 1012c18:	83a03001 	movhi	r3, #1
 1012c1c:	e3510000 	cmp	r1, #0
 1012c20:	03a03001 	moveq	r3, #1
 1012c24:	e3530000 	cmp	r3, #0
 1012c28:	1a000006 	bne	1012c48 <XAxiDma_BdSetLength+0x38>
		    (int)LenBytes);

		return XST_INVALID_PARAM;
	}

	XAxiDma_BdWrite((BdPtr), XAXIDMA_BD_CTRL_LEN_OFFSET,
 1012c2c:	e1a0c001 	mov	ip, r1
 1012c30:	e5901018 	ldr	r1, [r0, #24]
 1012c34:	e1c11002 	bic	r1, r1, r2
 1012c38:	e181100c 	orr	r1, r1, ip
 1012c3c:	e5801018 	str	r1, [r0, #24]
		((XAxiDma_BdRead((BdPtr), XAXIDMA_BD_CTRL_LEN_OFFSET) & \
		~LengthMask)) | LenBytes);

	return XST_SUCCESS;
}
 1012c40:	e1a00003 	mov	r0, r3
 1012c44:	e12fff1e 	bx	lr
		xdbg_printf(XDBG_DEBUG_ERROR, "invalid length %d\n",
 1012c48:	e3090800 	movw	r0, #38912	; 0x9800
{
 1012c4c:	e92d4010 	push	{r4, lr}
		xdbg_printf(XDBG_DEBUG_ERROR, "invalid length %d\n",
 1012c50:	e3400106 	movt	r0, #262	; 0x106
 1012c54:	fa002547 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1012c58:	e3a0300f 	mov	r3, #15
}
 1012c5c:	e1a00003 	mov	r0, r3
 1012c60:	e8bd8010 	pop	{r4, pc}

01012c64 <XAxiDma_BdSetBufAddr>:
u32 XAxiDma_BdSetBufAddr(XAxiDma_Bd* BdPtr, UINTPTR Addr)
{
	u32 HasDRE;
	u8 WordLen;

	HasDRE = XAxiDma_BdRead(BdPtr, XAXIDMA_BD_HAS_DRE_OFFSET);
 1012c64:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
{
 1012c68:	e1a0c001 	mov	ip, r1
 1012c6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1012c70:	e24dd00c 	sub	sp, sp, #12
	WordLen = HasDRE & XAXIDMA_BD_WORDLEN_MASK;

	if (Addr & (WordLen - 1)) {
 1012c74:	e6ef3072 	uxtb	r3, r2
 1012c78:	e2433001 	sub	r3, r3, #1
 1012c7c:	e013e001 	ands	lr, r3, r1
 1012c80:	0a000001 	beq	1012c8c <XAxiDma_BdSetBufAddr+0x28>
		if ((HasDRE & XAXIDMA_BD_HAS_DRE_MASK) == 0) {
 1012c84:	e3120c0f 	tst	r2, #3840	; 0xf00
 1012c88:	0a000004 	beq	1012ca0 <XAxiDma_BdSetBufAddr+0x3c>
	XAxiDma_BdWrite64(BdPtr, XAXIDMA_BD_BUFA_OFFSET, Addr);
#else
	XAxiDma_BdWrite(BdPtr, XAXIDMA_BD_BUFA_OFFSET, Addr);
#endif

	return XST_SUCCESS;
 1012c8c:	e3a03000 	mov	r3, #0
	XAxiDma_BdWrite(BdPtr, XAXIDMA_BD_BUFA_OFFSET, Addr);
 1012c90:	e580c008 	str	ip, [r0, #8]
}
 1012c94:	e1a00003 	mov	r0, r3
 1012c98:	e28dd00c 	add	sp, sp, #12
 1012c9c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
			xil_printf("Error set buf addr %x with %x and %x,"
 1012ca0:	e3090814 	movw	r0, #38932	; 0x9814
 1012ca4:	e58de000 	str	lr, [sp]
 1012ca8:	e3400106 	movt	r0, #262	; 0x106
 1012cac:	eb0015b7 	bl	1018390 <xil_printf>
			return XST_INVALID_PARAM;
 1012cb0:	e3a0300f 	mov	r3, #15
 1012cb4:	eafffff6 	b	1012c94 <XAxiDma_BdSetBufAddr+0x30>

01012cb8 <XAxiDma_BdSetBufAddrMicroMode>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdSetBufAddrMicroMode(XAxiDma_Bd* BdPtr, UINTPTR Addr)
{
	if (Addr & XAXIDMA_MICROMODE_MIN_BUF_ALIGN) {
 1012cb8:	e7eb3051 	ubfx	r3, r1, #0, #12
 1012cbc:	e3530000 	cmp	r3, #0
 1012cc0:	1a000002 	bne	1012cd0 <XAxiDma_BdSetBufAddrMicroMode+0x18>
	}

#if defined(__aarch64__) || defined(__arch64__)
	XAxiDma_BdWrite64(BdPtr, XAXIDMA_BD_BUFA_OFFSET, Addr);
#else
	XAxiDma_BdWrite(BdPtr, XAXIDMA_BD_BUFA_OFFSET, Addr);
 1012cc4:	e5801008 	str	r1, [r0, #8]
#endif

	return XST_SUCCESS;
}
 1012cc8:	e1a00003 	mov	r0, r3
 1012ccc:	e12fff1e 	bx	lr
			xil_printf("Error set buf addr %x and %x,"
 1012cd0:	e3090840 	movw	r0, #38976	; 0x9840
{
 1012cd4:	e92d4010 	push	{r4, lr}
			xil_printf("Error set buf addr %x and %x,"
 1012cd8:	e3400106 	movt	r0, #262	; 0x106
 1012cdc:	e3002fff 	movw	r2, #4095	; 0xfff
 1012ce0:	eb0015aa 	bl	1018390 <xil_printf>
			return XST_INVALID_PARAM;
 1012ce4:	e3a0300f 	mov	r3, #15
}
 1012ce8:	e1a00003 	mov	r0, r3
 1012cec:	e8bd8010 	pop	{r4, pc}

01012cf0 <XAxiDma_BdSetAppWord>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdSetAppWord(XAxiDma_Bd* BdPtr, int Offset, u32 Word)
{
	if (XAxiDma_BdRead(BdPtr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET) == 0) {
 1012cf0:	e590c038 	ldr	ip, [r0, #56]	; 0x38
{
 1012cf4:	e92d4010 	push	{r4, lr}
	if (XAxiDma_BdRead(BdPtr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET) == 0) {
 1012cf8:	e35c0000 	cmp	ip, #0
 1012cfc:	0a000007 	beq	1012d20 <XAxiDma_BdSetAppWord+0x30>
 1012d00:	e1a03001 	mov	r3, r1
			"stream in hardware build, cannot set app word\r\n");

		return XST_INVALID_PARAM;
	}

	if ((Offset < 0) || (Offset > XAXIDMA_LAST_APPWORD)) {
 1012d04:	e3510004 	cmp	r1, #4
			"offset %d",Offset);

		return XST_INVALID_PARAM;
	}

	XAxiDma_BdWrite(BdPtr, XAXIDMA_BD_USR0_OFFSET + Offset * 4, Word);
 1012d08:	92833008 	addls	r3, r3, #8

	return XST_SUCCESS;
 1012d0c:	93a01000 	movls	r1, #0
	XAxiDma_BdWrite(BdPtr, XAXIDMA_BD_USR0_OFFSET + Offset * 4, Word);
 1012d10:	97802103 	strls	r2, [r0, r3, lsl #2]
	if ((Offset < 0) || (Offset > XAXIDMA_LAST_APPWORD)) {
 1012d14:	8a000007 	bhi	1012d38 <XAxiDma_BdSetAppWord+0x48>
}
 1012d18:	e1a00001 	mov	r0, r1
 1012d1c:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetAppWord: no sts cntrl"
 1012d20:	e3090864 	movw	r0, #39012	; 0x9864
 1012d24:	e3400106 	movt	r0, #262	; 0x106
 1012d28:	fa002537 	blx	101c20c <puts>
		return XST_INVALID_PARAM;
 1012d2c:	e3a0100f 	mov	r1, #15
}
 1012d30:	e1a00001 	mov	r0, r1
 1012d34:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetAppWord: invalid"
 1012d38:	e30908b4 	movw	r0, #39092	; 0x98b4
 1012d3c:	e3400106 	movt	r0, #262	; 0x106
 1012d40:	fa00250c 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1012d44:	e3a0100f 	mov	r1, #15
}
 1012d48:	e1a00001 	mov	r0, r1
 1012d4c:	e8bd8010 	pop	{r4, pc}

01012d50 <XAxiDma_BdGetAppWord>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdGetAppWord(XAxiDma_Bd* BdPtr, int Offset, int *Valid)
{
 1012d50:	e92d4010 	push	{r4, lr}
	*Valid = 0;
 1012d54:	e3a0c000 	mov	ip, #0

	if (XAxiDma_BdRead(BdPtr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET) == 0) {
 1012d58:	e5904038 	ldr	r4, [r0, #56]	; 0x38
	*Valid = 0;
 1012d5c:	e582c000 	str	ip, [r2]
	if (XAxiDma_BdRead(BdPtr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET) == 0) {
 1012d60:	e154000c 	cmp	r4, ip
 1012d64:	0a000007 	beq	1012d88 <XAxiDma_BdGetAppWord+0x38>
			"stream in hardware build, no app word available\r\n");

		return (u32)0;
	}

	if((Offset < 0) || (Offset > XAXIDMA_LAST_APPWORD)) {
 1012d68:	e3510004 	cmp	r1, #4
 1012d6c:	8a00000a 	bhi	1012d9c <XAxiDma_BdGetAppWord+0x4c>
		return (u32)0;
	}

	*Valid = 1;

	return XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR0_OFFSET + Offset * 4);
 1012d70:	e2813008 	add	r3, r1, #8
	*Valid = 1;
 1012d74:	e3a01001 	mov	r1, #1
	return XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR0_OFFSET + Offset * 4);
 1012d78:	e7904103 	ldr	r4, [r0, r3, lsl #2]
	*Valid = 1;
 1012d7c:	e5821000 	str	r1, [r2]
}
 1012d80:	e1a00004 	mov	r0, r4
 1012d84:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingGetAppWord: no sts cntrl "
 1012d88:	e30908d8 	movw	r0, #39128	; 0x98d8
 1012d8c:	e3400106 	movt	r0, #262	; 0x106
 1012d90:	fa00251d 	blx	101c20c <puts>
}
 1012d94:	e1a00004 	mov	r0, r4
 1012d98:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingGetAppWord: invalid"
 1012d9c:	e3090928 	movw	r0, #39208	; 0x9928
		return (u32)0;
 1012da0:	e1a0400c 	mov	r4, ip
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingGetAppWord: invalid"
 1012da4:	e3400106 	movt	r0, #262	; 0x106
 1012da8:	fa0024f2 	blx	101c178 <printf>
}
 1012dac:	e1a00004 	mov	r0, r4
 1012db0:	e8bd8010 	pop	{r4, pc}

01012db4 <XAxiDma_BdSetCtrl>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_BdSetCtrl(XAxiDma_Bd* BdPtr, u32 Data)
{
	u32 RegValue = XAxiDma_BdRead(BdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1012db4:	e5903018 	ldr	r3, [r0, #24]

	RegValue &= ~XAXIDMA_BD_CTRL_ALL_MASK;

	RegValue |= (Data & XAXIDMA_BD_CTRL_ALL_MASK);
 1012db8:	e2011303 	and	r1, r1, #201326592	; 0xc000000
	RegValue &= ~XAXIDMA_BD_CTRL_ALL_MASK;
 1012dbc:	e3c33303 	bic	r3, r3, #201326592	; 0xc000000
	RegValue |= (Data & XAXIDMA_BD_CTRL_ALL_MASK);
 1012dc0:	e1811003 	orr	r1, r1, r3

	XAxiDma_BdWrite((BdPtr), XAXIDMA_BD_CTRL_LEN_OFFSET, RegValue);
 1012dc4:	e5801018 	str	r1, [r0, #24]

	return;
}
 1012dc8:	e12fff1e 	bx	lr

01012dcc <XAxiDma_DumpBd>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_DumpBd(XAxiDma_Bd* BdPtr)
{
 1012dcc:	e92d4010 	push	{r4, lr}
 1012dd0:	e1a04000 	mov	r4, r0

	xil_printf("Dump BD %x:\r\n", (UINTPTR)BdPtr);
 1012dd4:	e309094c 	movw	r0, #39244	; 0x994c
 1012dd8:	e1a01004 	mov	r1, r4
 1012ddc:	e3400106 	movt	r0, #262	; 0x106
 1012de0:	eb00156a 	bl	1018390 <xil_printf>
	xil_printf("\tNext Bd Ptr: %x\r\n",
 1012de4:	e309095c 	movw	r0, #39260	; 0x995c
 1012de8:	e5941000 	ldr	r1, [r4]
 1012dec:	e3400106 	movt	r0, #262	; 0x106
 1012df0:	eb001566 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_NDESC_OFFSET));
	xil_printf("\tBuff addr: %x\r\n",
 1012df4:	e3090970 	movw	r0, #39280	; 0x9970
 1012df8:	e5941008 	ldr	r1, [r4, #8]
 1012dfc:	e3400106 	movt	r0, #262	; 0x106
 1012e00:	eb001562 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_BUFA_OFFSET));
	xil_printf("\tMCDMA Fields: %x\r\n",
 1012e04:	e3090984 	movw	r0, #39300	; 0x9984
 1012e08:	e5941010 	ldr	r1, [r4, #16]
 1012e0c:	e3400106 	movt	r0, #262	; 0x106
 1012e10:	eb00155e 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_MCCTL_OFFSET));
	xil_printf("\tVSIZE_STRIDE: %x\r\n",
 1012e14:	e3090998 	movw	r0, #39320	; 0x9998
 1012e18:	e5941014 	ldr	r1, [r4, #20]
 1012e1c:	e3400106 	movt	r0, #262	; 0x106
 1012e20:	eb00155a 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr,
					XAXIDMA_BD_STRIDE_VSIZE_OFFSET));
	xil_printf("\tContrl len: %x\r\n",
 1012e24:	e30909ac 	movw	r0, #39340	; 0x99ac
 1012e28:	e5941018 	ldr	r1, [r4, #24]
 1012e2c:	e3400106 	movt	r0, #262	; 0x106
 1012e30:	eb001556 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET));
	xil_printf("\tStatus: %x\r\n",
 1012e34:	e30909c0 	movw	r0, #39360	; 0x99c0
 1012e38:	e594101c 	ldr	r1, [r4, #28]
 1012e3c:	e3400106 	movt	r0, #262	; 0x106
 1012e40:	eb001552 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_STS_OFFSET));

	xil_printf("\tAPP 0: %x\r\n",
 1012e44:	e30909d0 	movw	r0, #39376	; 0x99d0
 1012e48:	e5941020 	ldr	r1, [r4, #32]
 1012e4c:	e3400106 	movt	r0, #262	; 0x106
 1012e50:	eb00154e 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR0_OFFSET));
	xil_printf("\tAPP 1: %x\r\n",
 1012e54:	e30909e0 	movw	r0, #39392	; 0x99e0
 1012e58:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1012e5c:	e3400106 	movt	r0, #262	; 0x106
 1012e60:	eb00154a 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR1_OFFSET));
	xil_printf("\tAPP 2: %x\r\n",
 1012e64:	e30909f0 	movw	r0, #39408	; 0x99f0
 1012e68:	e5941028 	ldr	r1, [r4, #40]	; 0x28
 1012e6c:	e3400106 	movt	r0, #262	; 0x106
 1012e70:	eb001546 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR2_OFFSET));
	xil_printf("\tAPP 3: %x\r\n",
 1012e74:	e3090a00 	movw	r0, #39424	; 0x9a00
 1012e78:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
 1012e7c:	e3400106 	movt	r0, #262	; 0x106
 1012e80:	eb001542 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR3_OFFSET));
	xil_printf("\tAPP 4: %x\r\n",
 1012e84:	e3090a10 	movw	r0, #39440	; 0x9a10
 1012e88:	e5941030 	ldr	r1, [r4, #48]	; 0x30
 1012e8c:	e3400106 	movt	r0, #262	; 0x106
 1012e90:	eb00153e 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_USR4_OFFSET));

	xil_printf("\tSW ID: %x\r\n",
 1012e94:	e3090a20 	movw	r0, #39456	; 0x9a20
 1012e98:	e5941034 	ldr	r1, [r4, #52]	; 0x34
 1012e9c:	e3400106 	movt	r0, #262	; 0x106
 1012ea0:	eb00153a 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_ID_OFFSET));
	xil_printf("\tStsCtrl: %x\r\n",
 1012ea4:	e3090a30 	movw	r0, #39472	; 0x9a30
 1012ea8:	e5941038 	ldr	r1, [r4, #56]	; 0x38
 1012eac:	e3400106 	movt	r0, #262	; 0x106
 1012eb0:	eb001536 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr,
	           XAXIDMA_BD_HAS_STSCNTRL_OFFSET));
	xil_printf("\tDRE: %x\r\n",
 1012eb4:	e3090a40 	movw	r0, #39488	; 0x9a40
 1012eb8:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
 1012ebc:	e3400106 	movt	r0, #262	; 0x106
 1012ec0:	eb001532 	bl	1018390 <xil_printf>
	    (unsigned int)XAxiDma_BdRead(BdPtr, XAXIDMA_BD_HAS_DRE_OFFSET));

	xil_printf("\r\n");
 1012ec4:	e3080ff8 	movw	r0, #36856	; 0x8ff8
}
 1012ec8:	e8bd4010 	pop	{r4, lr}
	xil_printf("\r\n");
 1012ecc:	e3400106 	movt	r0, #262	; 0x106
 1012ed0:	ea00152e 	b	1018390 <xil_printf>

01012ed4 <XAxiDma_UpdateBdRingCDesc>:
	UINTPTR RegBase;
	UINTPTR BdPtr;
	int RingIndex = RingPtr->RingIndex;

	/* BD list has yet to be created for this channel */
	if (RingPtr->AllCnt == 0) {
 1012ed4:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 1012ed8:	e92d4010 	push	{r4, lr}
	if (RingPtr->AllCnt == 0) {
 1012edc:	e3520000 	cmp	r2, #0
 1012ee0:	0a000043 	beq	1012ff4 <XAxiDma_UpdateBdRingCDesc+0x120>

		return XST_DMA_SG_NO_LIST;
	}

	/* Do nothing if already started */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1012ee4:	e5902008 	ldr	r2, [r0, #8]
 1012ee8:	e1a03000 	mov	r3, r0
 1012eec:	e3520001 	cmp	r2, #1
 1012ef0:	0a000027 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
		 * transferring)
		 */
		return XST_SUCCESS;
	}

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1012ef4:	e590c000 	ldr	ip, [r0]
 1012ef8:	e59c2004 	ldr	r2, [ip, #4]
 1012efc:	e3120001 	tst	r2, #1
 1012f00:	0a000023 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
		RegBase = RingPtr->ChanBase;

		/* Put a valid BD pointer in the current BD pointer register
		 * So, the hardware is ready to go when tail BD pointer is updated
		 */
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 1012f04:	e5901048 	ldr	r1, [r0, #72]	; 0x48
	int RingIndex = RingPtr->RingIndex;
 1012f08:	e5904064 	ldr	r4, [r0, #100]	; 0x64

		if (!XAxiDma_BdHwCompleted(BdPtr)) {
 1012f0c:	e591201c 	ldr	r2, [r1, #28]
 1012f10:	e3520000 	cmp	r2, #0
 1012f14:	ba000025 	blt	1012fb0 <XAxiDma_UpdateBdRingCDesc+0xdc>
			if (RingPtr->IsRxChannel) {
 1012f18:	e590e024 	ldr	lr, [r0, #36]	; 0x24
 1012f1c:	e5900004 	ldr	r0, [r0, #4]
 1012f20:	e5932020 	ldr	r2, [r3, #32]
 1012f24:	e041100e 	sub	r1, r1, lr
 1012f28:	e5933018 	ldr	r3, [r3, #24]
 1012f2c:	e3500000 	cmp	r0, #0
 1012f30:	e0811002 	add	r1, r1, r2
 1012f34:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 1012f38:	0a000017 	beq	1012f9c <XAxiDma_UpdateBdRingCDesc+0xc8>
				if (!RingIndex) {
 1012f3c:	e3540000 	cmp	r4, #0
 1012f40:	1a000030 	bne	1013008 <XAxiDma_UpdateBdRingCDesc+0x134>
					XAxiDma_WriteReg(RegBase,
							 XAXIDMA_CDESC_OFFSET,
							 (XAXIDMA_VIRT_TO_PHYS(BdPtr) & XAXIDMA_DESC_LSB_MASK));
					if (RingPtr->Addr_ext)
 1012f44:	e3530000 	cmp	r3, #0
	*LocalAddr = Value;
 1012f48:	e58c1008 	str	r1, [ip, #8]
 1012f4c:	0a000010 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1012f50:	e58c400c 	str	r4, [ip, #12]
			}
		}

	}

	return XST_SUCCESS;
 1012f54:	e1a00004 	mov	r0, r4
 1012f58:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->IsRxChannel) {
 1012f5c:	e5931020 	ldr	r1, [r3, #32]
 1012f60:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1012f64:	e5930004 	ldr	r0, [r3, #4]
 1012f68:	e5933018 	ldr	r3, [r3, #24]
 1012f6c:	e041100e 	sub	r1, r1, lr
 1012f70:	e3500000 	cmp	r0, #0
 1012f74:	e0812002 	add	r2, r1, r2
 1012f78:	e3c2203f 	bic	r2, r2, #63	; 0x3f
 1012f7c:	0a00002b 	beq	1013030 <XAxiDma_UpdateBdRingCDesc+0x15c>
						if (!RingIndex) {
 1012f80:	e3540000 	cmp	r4, #0
 1012f84:	1a00002d 	bne	1013040 <XAxiDma_UpdateBdRingCDesc+0x16c>
							if (RingPtr->Addr_ext)
 1012f88:	e3530000 	cmp	r3, #0
 1012f8c:	e58c2008 	str	r2, [ip, #8]
 1012f90:	1affffee 	bne	1012f50 <XAxiDma_UpdateBdRingCDesc+0x7c>
		return XST_SUCCESS;
 1012f94:	e3a00000 	mov	r0, #0
 1012f98:	e8bd8010 	pop	{r4, pc}
				if (RingPtr->Addr_ext)
 1012f9c:	e3530000 	cmp	r3, #0
 1012fa0:	e58c1008 	str	r1, [ip, #8]
 1012fa4:	0afffffa 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1012fa8:	e58c000c 	str	r0, [ip, #12]
}
 1012fac:	e8bd8010 	pop	{r4, pc}
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 1012fb0:	e590e028 	ldr	lr, [r0, #40]	; 0x28
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 1012fb4:	e1a02001 	mov	r2, r1
 1012fb8:	ea000002 	b	1012fc8 <XAxiDma_UpdateBdRingCDesc+0xf4>
				if (!XAxiDma_BdHwCompleted(BdPtr)) {
 1012fbc:	e592001c 	ldr	r0, [r2, #28]
 1012fc0:	e3500000 	cmp	r0, #0
 1012fc4:	aaffffe4 	bge	1012f5c <XAxiDma_UpdateBdRingCDesc+0x88>
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 1012fc8:	e15e0002 	cmp	lr, r2
 1012fcc:	85930030 	ldrhi	r0, [r3, #48]	; 0x30
 1012fd0:	95932024 	ldrls	r2, [r3, #36]	; 0x24
 1012fd4:	80822000 	addhi	r2, r2, r0
				if ((UINTPTR)BdPtr == (UINTPTR) RingPtr->BdaRestart) {
 1012fd8:	e1520001 	cmp	r2, r1
 1012fdc:	1afffff6 	bne	1012fbc <XAxiDma_UpdateBdRingCDesc+0xe8>
					xdbg_printf(XDBG_DEBUG_ERROR,
 1012fe0:	e3090a64 	movw	r0, #39524	; 0x9a64
 1012fe4:	e3400106 	movt	r0, #262	; 0x106
 1012fe8:	fa002487 	blx	101c20c <puts>
					return XST_DMA_ERROR;
 1012fec:	e3a00009 	mov	r0, #9
 1012ff0:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: no bds\r\n");
 1012ff4:	e3090a4c 	movw	r0, #39500	; 0x9a4c
 1012ff8:	e3400106 	movt	r0, #262	; 0x106
 1012ffc:	fa002482 	blx	101c20c <puts>
		return XST_DMA_SG_NO_LIST;
 1013000:	e300020b 	movw	r0, #523	; 0x20b
 1013004:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->Addr_ext)
 1013008:	e3530000 	cmp	r3, #0
					XAxiDma_WriteReg(RegBase,
 101300c:	e2844001 	add	r4, r4, #1
 1013010:	e78c1284 	str	r1, [ip, r4, lsl #5]
 1013014:	e1a04284 	lsl	r4, r4, #5
					if (RingPtr->Addr_ext)
 1013018:	0affffdd 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
								XAxiDma_WriteReg(RegBase,
 101301c:	e2444040 	sub	r4, r4, #64	; 0x40
 1013020:	e28cc044 	add	ip, ip, #68	; 0x44
 1013024:	e3a00000 	mov	r0, #0
 1013028:	e784000c 	str	r0, [r4, ip]
 101302c:	e8bd8010 	pop	{r4, pc}
						if (RingPtr->Addr_ext)
 1013030:	e3530000 	cmp	r3, #0
 1013034:	e58c2008 	str	r2, [ip, #8]
 1013038:	0affffd5 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
 101303c:	eaffffd9 	b	1012fa8 <XAxiDma_UpdateBdRingCDesc+0xd4>
							if (RingPtr->Addr_ext)
 1013040:	e3530000 	cmp	r3, #0
							XAxiDma_WriteReg(RegBase,
 1013044:	e2844001 	add	r4, r4, #1
 1013048:	e78c2284 	str	r2, [ip, r4, lsl #5]
 101304c:	e1a04284 	lsl	r4, r4, #5
							if (RingPtr->Addr_ext)
 1013050:	0affffcf 	beq	1012f94 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1013054:	eafffff0 	b	101301c <XAxiDma_UpdateBdRingCDesc+0x148>

01013058 <XAxiDma_BdRingCreate>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdRingCreate(XAxiDma_BdRing *RingPtr, UINTPTR PhysAddr,
			UINTPTR VirtAddr, u32 Alignment, int BdCount)
{
 1013058:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101305c:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
	int i;
	UINTPTR BdVirtAddr;
	UINTPTR BdPhysAddr;

	if (BdCount <= 0) {
 1013060:	e3560000 	cmp	r6, #0
 1013064:	da000078 	ble	101324c <XAxiDma_BdRingCreate+0x1f4>
	RingPtr->PreCnt = 0;
	RingPtr->PostCnt = 0;
	RingPtr->Cyclic = 0;

	/* Make sure Alignment parameter meets minimum requirements */
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1013068:	e353003f 	cmp	r3, #63	; 0x3f
 101306c:	e1a05003 	mov	r5, r3
	RingPtr->AllCnt = 0;
 1013070:	e3a03000 	mov	r3, #0
 1013074:	e1a04000 	mov	r4, r0
 1013078:	e5803060 	str	r3, [r0, #96]	; 0x60
	RingPtr->FreeCnt = 0;
 101307c:	e5803050 	str	r3, [r0, #80]	; 0x50
	RingPtr->HwCnt = 0;
 1013080:	e5803058 	str	r3, [r0, #88]	; 0x58
	RingPtr->PreCnt = 0;
 1013084:	e5803054 	str	r3, [r0, #84]	; 0x54
	RingPtr->PostCnt = 0;
 1013088:	e580305c 	str	r3, [r0, #92]	; 0x5c
	RingPtr->Cyclic = 0;
 101308c:	e5803068 	str	r3, [r0, #104]	; 0x68
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1013090:	9a000059 	bls	10131fc <XAxiDma_BdRingCreate+0x1a4>

		return XST_INVALID_PARAM;
	}

	/* Make sure Alignment is a power of 2 */
	if ((Alignment - 1) & Alignment) {
 1013094:	e2453001 	sub	r3, r5, #1
 1013098:	e1130005 	tst	r3, r5
 101309c:	1a000064 	bne	1013234 <XAxiDma_BdRingCreate+0x1dc>

		return XST_INVALID_PARAM;
	}

	/* Make sure PhysAddr and VirtAddr are on same Alignment */
	if ((PhysAddr % Alignment) || (VirtAddr % Alignment)) {
 10130a0:	e1a09001 	mov	r9, r1
 10130a4:	e1a01005 	mov	r1, r5
 10130a8:	e1a00009 	mov	r0, r9
 10130ac:	e1a07002 	mov	r7, r2
 10130b0:	fa001a2b 	blx	1019964 <__aeabi_uidivmod>
 10130b4:	e3510000 	cmp	r1, #0
 10130b8:	1a000047 	bne	10131dc <XAxiDma_BdRingCreate+0x184>
 10130bc:	e1a01005 	mov	r1, r5
 10130c0:	e1a00007 	mov	r0, r7
 10130c4:	fa001a26 	blx	1019964 <__aeabi_uidivmod>
 10130c8:	e2518000 	subs	r8, r1, #0
 10130cc:	1a000042 	bne	10131dc <XAxiDma_BdRingCreate+0x184>
		return XST_INVALID_PARAM;
	}

	/* Compute how many bytes will be between the start of adjacent BDs */
	RingPtr->Separation =
		(sizeof(XAxiDma_Bd) + (Alignment - 1)) & ~(Alignment - 1);
 10130d0:	e285303f 	add	r3, r5, #63	; 0x3f
 10130d4:	e2655000 	rsb	r5, r5, #0
 10130d8:	e0055003 	and	r5, r5, r3

	/* Must make sure the ring doesn't span address 0x00000000. If it does,
	 * then the next/prev BD traversal macros will fail.
	 */
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 10130dc:	e2473001 	sub	r3, r7, #1
 10130e0:	e0020695 	mul	r2, r5, r6
	RingPtr->Separation =
 10130e4:	e5845030 	str	r5, [r4, #48]	; 0x30
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 10130e8:	e0833002 	add	r3, r3, r2
 10130ec:	e1530007 	cmp	r3, r7
 10130f0:	3a000049 	bcc	101321c <XAxiDma_BdRingCreate+0x1c4>
	 *  - Clear the entire space
	 *  - Setup each BD's next pointer with the physical address of the
	 *    next BD
	 *  - Put hardware information in each BD
	 */
	memset((void *) VirtAddr, 0, (RingPtr->Separation * BdCount));
 10130f4:	e1a00007 	mov	r0, r7
 10130f8:	fa0023ec 	blx	101c0b0 <memset>

	BdVirtAddr = VirtAddr;
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 10130fc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 1013100:	e3560001 	cmp	r6, #1
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 1013104:	e083a009 	add	sl, r3, r9
	for (i = 1; i < BdCount; i++) {
 1013108:	0a000055 	beq	1013264 <XAxiDma_BdRingCreate+0x20c>
 101310c:	e1a05007 	mov	r5, r7
 1013110:	e3a0b001 	mov	fp, #1
		/* Put hardware information in the BDs
		 */
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
				(u32)RingPtr->HasStsCntrlStrm);

		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013114:	e5940010 	ldr	r0, [r4, #16]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1013118:	e3cac03f 	bic	ip, sl, #63	; 0x3f
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 101311c:	e5943014 	ldr	r3, [r4, #20]
		    (((u32)(RingPtr->HasDRE)) << XAXIDMA_BD_HAS_DRE_SHIFT) |
		    RingPtr->DataWidth);

		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1013120:	e3a01034 	mov	r1, #52	; 0x34
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1013124:	e594200c 	ldr	r2, [r4, #12]
	for (i = 1; i < BdCount; i++) {
 1013128:	e28bb001 	add	fp, fp, #1
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 101312c:	e5858004 	str	r8, [r5, #4]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1013130:	e585c000 	str	ip, [r5]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013134:	e1833400 	orr	r3, r3, r0, lsl #8
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1013138:	e5852038 	str	r2, [r5, #56]	; 0x38
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 101313c:	e1a00005 	mov	r0, r5
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013140:	e585303c 	str	r3, [r5, #60]	; 0x3c
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1013144:	eb0011fe 	bl	1017944 <Xil_DCacheFlushRange>
		BdVirtAddr += RingPtr->Separation;
 1013148:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 101314c:	e156000b 	cmp	r6, fp
		BdVirtAddr += RingPtr->Separation;
 1013150:	e0855003 	add	r5, r5, r3
		BdPhysAddr += RingPtr->Separation;
 1013154:	e08aa003 	add	sl, sl, r3
	for (i = 1; i < BdCount; i++) {
 1013158:	1affffed 	bne	1013114 <XAxiDma_BdRingCreate+0xbc>
 101315c:	e1a0e005 	mov	lr, r5

	/* Setup the last BD's hardware information */
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
		(u32)RingPtr->HasStsCntrlStrm);

	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013160:	e5941010 	ldr	r1, [r4, #16]
	/* Setup and initialize pointers and counters */
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
	RingPtr->FirstBdAddr = VirtAddr;
	RingPtr->FirstBdPhysAddr = PhysAddr;
	RingPtr->LastBdAddr = BdVirtAddr;
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1013164:	e0853003 	add	r3, r5, r3
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013168:	e5942014 	ldr	r2, [r4, #20]
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 101316c:	e0433007 	sub	r3, r3, r7
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1013170:	e594000c 	ldr	r0, [r4, #12]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1013174:	e3c9c03f 	bic	ip, r9, #63	; 0x3f
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1013178:	e3a08000 	mov	r8, #0
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 101317c:	e58ec000 	str	ip, [lr]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1013180:	e5858004 	str	r8, [r5, #4]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013184:	e1822401 	orr	r2, r2, r1, lsl #8
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1013188:	e3a01002 	mov	r1, #2
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 101318c:	e5850038 	str	r0, [r5, #56]	; 0x38
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 1013190:	e3a00040 	mov	r0, #64	; 0x40
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1013194:	e585203c 	str	r2, [r5, #60]	; 0x3c
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1013198:	e584302c 	str	r3, [r4, #44]	; 0x2c
	RingPtr->FirstBdAddr = VirtAddr;
 101319c:	e5847024 	str	r7, [r4, #36]	; 0x24
	RingPtr->FirstBdPhysAddr = PhysAddr;
 10131a0:	e5849020 	str	r9, [r4, #32]
	RingPtr->LastBdAddr = BdVirtAddr;
 10131a4:	e5845028 	str	r5, [r4, #40]	; 0x28
	RingPtr->AllCnt = BdCount;
 10131a8:	e5846060 	str	r6, [r4, #96]	; 0x60
	RingPtr->FreeCnt = BdCount;
 10131ac:	e5846050 	str	r6, [r4, #80]	; 0x50
	RingPtr->FreeHead = (XAxiDma_Bd *) VirtAddr;
 10131b0:	e5847034 	str	r7, [r4, #52]	; 0x34
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
 10131b4:	e5847038 	str	r7, [r4, #56]	; 0x38
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
 10131b8:	e584703c 	str	r7, [r4, #60]	; 0x3c
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
 10131bc:	e5847040 	str	r7, [r4, #64]	; 0x40
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
 10131c0:	e5847044 	str	r7, [r4, #68]	; 0x44
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
 10131c4:	e5847048 	str	r7, [r4, #72]	; 0x48
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10131c8:	e5841008 	str	r1, [r4, #8]
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 10131cc:	fa001f79 	blx	101afb8 <malloc>
 10131d0:	e584004c 	str	r0, [r4, #76]	; 0x4c

	return XST_SUCCESS;
}
 10131d4:	e1a00008 	mov	r0, r8
 10131d8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 10131dc:	e3090b20 	movw	r0, #39712	; 0x9b20
 10131e0:	e1a02007 	mov	r2, r7
 10131e4:	e1a01009 	mov	r1, r9
		return XST_INVALID_PARAM;
 10131e8:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 10131ec:	e3400106 	movt	r0, #262	; 0x106
 10131f0:	fa0023e0 	blx	101c178 <printf>
}
 10131f4:	e1a00008 	mov	r0, r8
 10131f8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 10131fc:	e3090ab8 	movw	r0, #39608	; 0x9ab8
 1013200:	e1a01005 	mov	r1, r5
 1013204:	e3a02040 	mov	r2, #64	; 0x40
		return XST_INVALID_PARAM;
 1013208:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 101320c:	e3400106 	movt	r0, #262	; 0x106
 1013210:	fa0023d8 	blx	101c178 <printf>
}
 1013214:	e1a00008 	mov	r0, r8
 1013218:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 101321c:	e3090b74 	movw	r0, #39796	; 0x9b74
		return XST_DMA_SG_LIST_ERROR;
 1013220:	e300820e 	movw	r8, #526	; 0x20e
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1013224:	e3400106 	movt	r0, #262	; 0x106
 1013228:	fa0023f7 	blx	101c20c <puts>
}
 101322c:	e1a00008 	mov	r0, r8
 1013230:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1013234:	e3090af8 	movw	r0, #39672	; 0x9af8
 1013238:	e1a01005 	mov	r1, r5
 101323c:	e3400106 	movt	r0, #262	; 0x106
		return XST_INVALID_PARAM;
 1013240:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1013244:	fa0023cb 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1013248:	eaffffe1 	b	10131d4 <XAxiDma_BdRingCreate+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 101324c:	e3090a8c 	movw	r0, #39564	; 0x9a8c
 1013250:	e1a01006 	mov	r1, r6
 1013254:	e3400106 	movt	r0, #262	; 0x106
		return XST_INVALID_PARAM;
 1013258:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 101325c:	fa0023c5 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1013260:	eaffffdb 	b	10131d4 <XAxiDma_BdRingCreate+0x17c>
	for (i = 1; i < BdCount; i++) {
 1013264:	e1a0e007 	mov	lr, r7
 1013268:	e1a05007 	mov	r5, r7
 101326c:	eaffffbb 	b	1013160 <XAxiDma_BdRingCreate+0x108>

01013270 <XAxiDma_BdRingClone>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingClone(XAxiDma_BdRing * RingPtr, XAxiDma_Bd * SrcBdPtr)
{
 1013270:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1013274:	e24dd044 	sub	sp, sp, #68	; 0x44
	UINTPTR CurBd;
	u32 Save;
	XAxiDma_Bd TmpBd;

	/* Can't do this function if there isn't a ring */
	if (RingPtr->AllCnt == 0) {
 1013278:	e5905060 	ldr	r5, [r0, #96]	; 0x60
 101327c:	e3550000 	cmp	r5, #0
 1013280:	0a00003d 	beq	101337c <XAxiDma_BdRingClone+0x10c>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't do this function with the channel running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1013284:	e5903008 	ldr	r3, [r0, #8]
 1013288:	e1a06000 	mov	r6, r0
 101328c:	e3530001 	cmp	r3, #1
 1013290:	0a00003f 	beq	1013394 <XAxiDma_BdRingClone+0x124>

		return XST_DEVICE_IS_STARTED;
	}

	/* Can't do this function with some of the BDs in use */
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1013294:	e5903050 	ldr	r3, [r0, #80]	; 0x50
 1013298:	e1550003 	cmp	r5, r3
	}

	/* Make a copy of the template then modify it by clearing
	 * the complete bit in status/control field
	 */
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 101329c:	01a0c001 	moveq	ip, r1
 10132a0:	01a0400d 	moveq	r4, sp
 10132a4:	028c7040 	addeq	r7, ip, #64	; 0x40
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 10132a8:	1a00002b 	bne	101335c <XAxiDma_BdRingClone+0xec>
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 10132ac:	e59c0000 	ldr	r0, [ip]
 10132b0:	e28cc010 	add	ip, ip, #16
 10132b4:	e51c100c 	ldr	r1, [ip, #-12]
 10132b8:	e1a0e004 	mov	lr, r4
 10132bc:	e51c2008 	ldr	r2, [ip, #-8]
 10132c0:	e2844010 	add	r4, r4, #16
 10132c4:	e51c3004 	ldr	r3, [ip, #-4]
 10132c8:	e15c0007 	cmp	ip, r7
 10132cc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 10132d0:	1afffff5 	bne	10132ac <XAxiDma_BdRingClone+0x3c>

	Save = XAxiDma_BdRead(&TmpBd, XAXIDMA_BD_STS_OFFSET);
 10132d4:	e59d301c 	ldr	r3, [sp, #28]
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);

	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 10132d8:	e3550000 	cmp	r5, #0
 10132dc:	c3a05000 	movgt	r5, #0
 10132e0:	c28d7038 	addgt	r7, sp, #56	; 0x38
 10132e4:	e5964024 	ldr	r4, [r6, #36]	; 0x24
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 10132e8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);
 10132ec:	e58d301c 	str	r3, [sp, #28]
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 10132f0:	da000016 	ble	1013350 <XAxiDma_BdRingClone+0xe0>
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {

		memcpy((void *)((UINTPTR)CurBd + XAXIDMA_BD_START_CLEAR),
 10132f4:	e28d3008 	add	r3, sp, #8
 10132f8:	e2842008 	add	r2, r4, #8
 10132fc:	e593e000 	ldr	lr, [r3]
 1013300:	e2833010 	add	r3, r3, #16
 1013304:	e513c00c 	ldr	ip, [r3, #-12]
 1013308:	e2822010 	add	r2, r2, #16
 101330c:	e5130008 	ldr	r0, [r3, #-8]
 1013310:	e5131004 	ldr	r1, [r3, #-4]
 1013314:	e1530007 	cmp	r3, r7
 1013318:	e502e010 	str	lr, [r2, #-16]
 101331c:	e502c00c 	str	ip, [r2, #-12]
 1013320:	e5020008 	str	r0, [r2, #-8]
 1013324:	e5021004 	str	r1, [r2, #-4]
 1013328:	1afffff3 	bne	10132fc <XAxiDma_BdRingClone+0x8c>
		    (void *)((UINTPTR)(&TmpBd) + XAXIDMA_BD_START_CLEAR),
		    XAXIDMA_BD_BYTES_TO_CLEAR);

		XAXIDMA_CACHE_FLUSH(CurBd);
 101332c:	e1a00004 	mov	r0, r4
 1013330:	e3a01034 	mov	r1, #52	; 0x34
 1013334:	eb001182 	bl	1017944 <Xil_DCacheFlushRange>
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1013338:	e5962060 	ldr	r2, [r6, #96]	; 0x60
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 101333c:	e2855001 	add	r5, r5, #1
 1013340:	e5963030 	ldr	r3, [r6, #48]	; 0x30
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1013344:	e1520005 	cmp	r2, r5
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1013348:	e0844003 	add	r4, r4, r3
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 101334c:	caffffe8 	bgt	10132f4 <XAxiDma_BdRingClone+0x84>
	}

	return XST_SUCCESS;
 1013350:	e3a00000 	mov	r0, #0
}
 1013354:	e28dd044 	add	sp, sp, #68	; 0x44
 1013358:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: some bds already "
 101335c:	e3090be4 	movw	r0, #39908	; 0x9be4
 1013360:	e1a02005 	mov	r2, r5
 1013364:	e1a01003 	mov	r1, r3
 1013368:	e3400106 	movt	r0, #262	; 0x106
 101336c:	fa002381 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013370:	e300020e 	movw	r0, #526	; 0x20e
}
 1013374:	e28dd044 	add	sp, sp, #68	; 0x44
 1013378:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: no bds\r\n");
 101337c:	e3090b98 	movw	r0, #39832	; 0x9b98
 1013380:	e3400106 	movt	r0, #262	; 0x106
 1013384:	fa0023a0 	blx	101c20c <puts>
		return XST_DMA_SG_NO_LIST;
 1013388:	e300020b 	movw	r0, #523	; 0x20b
}
 101338c:	e28dd044 	add	sp, sp, #68	; 0x44
 1013390:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: bd ring started "
 1013394:	e3090bb0 	movw	r0, #39856	; 0x9bb0
 1013398:	e3400106 	movt	r0, #262	; 0x106
 101339c:	fa00239a 	blx	101c20c <puts>
		return XST_DEVICE_IS_STARTED;
 10133a0:	e3a00005 	mov	r0, #5
 10133a4:	eaffffea 	b	1013354 <XAxiDma_BdRingClone+0xe4>

010133a8 <XAxiDma_StartBdRingHw>:
int XAxiDma_StartBdRingHw(XAxiDma_BdRing * RingPtr)
{
	UINTPTR RegBase;
	int RingIndex = RingPtr->RingIndex;

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10133a8:	e5903000 	ldr	r3, [r0]
{
 10133ac:	e92d4070 	push	{r4, r5, r6, lr}
	int RingIndex = RingPtr->RingIndex;
 10133b0:	e5906064 	ldr	r6, [r0, #100]	; 0x64
	return *(volatile u32 *) Addr;
 10133b4:	e5932004 	ldr	r2, [r3, #4]
	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10133b8:	e3120001 	tst	r2, #1
 10133bc:	15932000 	ldrne	r2, [r3]
		/* Start the hardware
		*/
		RegBase = RingPtr->ChanBase;
		XAxiDma_WriteReg(RegBase, XAXIDMA_CR_OFFSET,
 10133c0:	13822001 	orrne	r2, r2, #1
	*LocalAddr = Value;
 10133c4:	15832000 	strne	r2, [r3]
	return *(volatile u32 *) Addr;
 10133c8:	e5933004 	ldr	r3, [r3, #4]
			XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET)
			| XAXIDMA_CR_RUNSTOP_MASK);
	}

	if (XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10133cc:	e2135001 	ands	r5, r3, #1
 10133d0:	1a000026 	bne	1013470 <XAxiDma_StartBdRingHw+0xc8>
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;

		/* If there are unprocessed BDs then we want the channel to begin
		 * processing right away
		 */
		if (RingPtr->HwCnt > 0) {
 10133d4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10133d8:	e3a02001 	mov	r2, #1
 10133dc:	e5802008 	str	r2, [r0, #8]
		if (RingPtr->HwCnt > 0) {
 10133e0:	e3530000 	cmp	r3, #0
 10133e4:	da00001f 	ble	1013468 <XAxiDma_StartBdRingHw+0xc0>

			XAXIDMA_CACHE_INVALIDATE(RingPtr->HwTail);
 10133e8:	e1a04000 	mov	r4, r0
 10133ec:	e3a01034 	mov	r1, #52	; 0x34
 10133f0:	e5900040 	ldr	r0, [r0, #64]	; 0x40
 10133f4:	eb001105 	bl	1017810 <Xil_DCacheInvalidateRange>
			if (RingPtr->Cyclic) {
 10133f8:	e5942068 	ldr	r2, [r4, #104]	; 0x68
 10133fc:	e3520000 	cmp	r2, #0
 1013400:	1a00001c 	bne	1013478 <XAxiDma_StartBdRingHw+0xd0>
							 XAXIDMA_TDESC_MSB_OFFSET,
							 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->CyclicBd)));
				return XST_SUCCESS;
			}

			if ((XAxiDma_BdRead(RingPtr->HwTail,
 1013404:	e5943040 	ldr	r3, [r4, #64]	; 0x40
 1013408:	e593101c 	ldr	r1, [r3, #28]
 101340c:	e3510000 	cmp	r1, #0
 1013410:	ba000014 	blt	1013468 <XAxiDma_StartBdRingHw+0xc0>
				    XAXIDMA_BD_STS_OFFSET) &
				XAXIDMA_BD_STS_COMPLETE_MASK) == 0) {
				if (RingPtr->IsRxChannel) {
 1013414:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1013418:	e5940004 	ldr	r0, [r4, #4]
 101341c:	e594c020 	ldr	ip, [r4, #32]
 1013420:	e0433001 	sub	r3, r3, r1
 1013424:	e594e018 	ldr	lr, [r4, #24]
 1013428:	e3500000 	cmp	r0, #0
 101342c:	e5941000 	ldr	r1, [r4]
 1013430:	e083300c 	add	r3, r3, ip
 1013434:	e3c3303f 	bic	r3, r3, #63	; 0x3f
 1013438:	0a000007 	beq	101345c <XAxiDma_StartBdRingHw+0xb4>
					if (!RingIndex) {
 101343c:	e3560000 	cmp	r6, #0
 1013440:	1a00001b 	bne	10134b4 <XAxiDma_StartBdRingHw+0x10c>
						XAxiDma_WriteReg(RingPtr->ChanBase,
							XAXIDMA_TDESC_OFFSET, (XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail) & XAXIDMA_DESC_LSB_MASK));
						if (RingPtr->Addr_ext)
 1013444:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1013448:	e5813010 	str	r3, [r1, #16]
 101344c:	0a000005 	beq	1013468 <XAxiDma_StartBdRingHw+0xc0>
 1013450:	e5816014 	str	r6, [r1, #20]
								 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
				}
			}
		}

		return XST_SUCCESS;
 1013454:	e1a00006 	mov	r0, r6
 1013458:	e8bd8070 	pop	{r4, r5, r6, pc}
					if (RingPtr->Addr_ext)
 101345c:	e35e0000 	cmp	lr, #0
 1013460:	e5813010 	str	r3, [r1, #16]
 1013464:	1a000010 	bne	10134ac <XAxiDma_StartBdRingHw+0x104>
		return XST_SUCCESS;
 1013468:	e3a00000 	mov	r0, #0
 101346c:	e8bd8070 	pop	{r4, r5, r6, pc}
	}

	return XST_DMA_ERROR;
 1013470:	e3a00009 	mov	r0, #9
}
 1013474:	e8bd8070 	pop	{r4, r5, r6, pc}
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1013478:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
 101347c:	e594c024 	ldr	ip, [r4, #36]	; 0x24
				if (RingPtr->Addr_ext)
 1013480:	e5940018 	ldr	r0, [r4, #24]
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1013484:	e5941020 	ldr	r1, [r4, #32]
 1013488:	e5942000 	ldr	r2, [r4]
 101348c:	e043300c 	sub	r3, r3, ip
				if (RingPtr->Addr_ext)
 1013490:	e3500000 	cmp	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1013494:	e0833001 	add	r3, r3, r1
 1013498:	e5823010 	str	r3, [r2, #16]
				if (RingPtr->Addr_ext)
 101349c:	0afffff1 	beq	1013468 <XAxiDma_StartBdRingHw+0xc0>
 10134a0:	e5825014 	str	r5, [r2, #20]
				return XST_SUCCESS;
 10134a4:	e1a00005 	mov	r0, r5
 10134a8:	e8bd8070 	pop	{r4, r5, r6, pc}
 10134ac:	e5810014 	str	r0, [r1, #20]
 10134b0:	e8bd8070 	pop	{r4, r5, r6, pc}
						XAxiDma_WriteReg(RingPtr->ChanBase,
 10134b4:	e2466001 	sub	r6, r6, #1
						if (RingPtr->Addr_ext)
 10134b8:	e35e0000 	cmp	lr, #0
						XAxiDma_WriteReg(RingPtr->ChanBase,
 10134bc:	e0816286 	add	r6, r1, r6, lsl #5
 10134c0:	e5863048 	str	r3, [r6, #72]	; 0x48
						if (RingPtr->Addr_ext)
 10134c4:	0affffe7 	beq	1013468 <XAxiDma_StartBdRingHw+0xc0>
 10134c8:	e586204c 	str	r2, [r6, #76]	; 0x4c
		return XST_SUCCESS;
 10134cc:	e1a00002 	mov	r0, r2
 10134d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010134d4 <XAxiDma_BdRingStart>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingStart(XAxiDma_BdRing * RingPtr)
{
 10134d4:	e92d4070 	push	{r4, r5, r6, lr}
 10134d8:	e1a05000 	mov	r5, r0
	int Status;

	Status = XAxiDma_UpdateBdRingCDesc(RingPtr);
 10134dc:	ebfffe7c 	bl	1012ed4 <XAxiDma_UpdateBdRingCDesc>
	if (Status != XST_SUCCESS) {
 10134e0:	e2504000 	subs	r4, r0, #0
 10134e4:	1a000005 	bne	1013500 <XAxiDma_BdRingStart+0x2c>
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
			"Updating Current Descriptor Failed\n\r");
		return Status;
	}

	Status = XAxiDma_StartBdRingHw(RingPtr);
 10134e8:	e1a00005 	mov	r0, r5
 10134ec:	ebffffad 	bl	10133a8 <XAxiDma_StartBdRingHw>
	if (Status != XST_SUCCESS) {
 10134f0:	e2504000 	subs	r4, r0, #0
 10134f4:	1a000006 	bne	1013514 <XAxiDma_BdRingStart+0x40>
			"Starting Hardware Failed\n\r");
		return Status;
	}

	return XST_SUCCESS;
}
 10134f8:	e1a00004 	mov	r0, r4
 10134fc:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1013500:	e3090c14 	movw	r0, #39956	; 0x9c14
 1013504:	e3400106 	movt	r0, #262	; 0x106
 1013508:	fa00231a 	blx	101c178 <printf>
}
 101350c:	e1a00004 	mov	r0, r4
 1013510:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1013514:	e3090c48 	movw	r0, #40008	; 0x9c48
 1013518:	e3400106 	movt	r0, #262	; 0x106
 101351c:	fa002315 	blx	101c178 <printf>
}
 1013520:	e1a00004 	mov	r0, r4
 1013524:	e8bd8070 	pop	{r4, r5, r6, pc}

01013528 <XAxiDma_BdRingSetCoalesce>:
	return *(volatile u32 *) Addr;
 1013528:	e590c000 	ldr	ip, [r0]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	if (Counter != XAXIDMA_NO_CHANGE) {
 101352c:	e3710001 	cmn	r1, #1
{
 1013530:	e92d4010 	push	{r4, lr}
 1013534:	e59c3000 	ldr	r3, [ip]
	if (Counter != XAXIDMA_NO_CHANGE) {
 1013538:	0a000004 	beq	1013550 <XAxiDma_BdRingSetCoalesce+0x28>
		if ((Counter == 0) || (Counter > 0xFF)) {
 101353c:	e241e001 	sub	lr, r1, #1
 1013540:	e35e00fe 	cmp	lr, #254	; 0xfe
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
			"invalid  coalescing threshold %d", (int)Counter);
			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_COALESCE_MASK) |
 1013544:	93c338ff 	bicls	r3, r3, #16711680	; 0xff0000
 1013548:	91833801 	orrls	r3, r3, r1, lsl #16
		if ((Counter == 0) || (Counter > 0xFF)) {
 101354c:	8a00000d 	bhi	1013588 <XAxiDma_BdRingSetCoalesce+0x60>
			(Counter << XAXIDMA_COALESCE_SHIFT);
	}

	if (Timer != XAXIDMA_NO_CHANGE) {
 1013550:	e3720001 	cmn	r2, #1
 1013554:	0a000002 	beq	1013564 <XAxiDma_BdRingSetCoalesce+0x3c>
		if (Timer > 0xFF) {
 1013558:	e35200ff 	cmp	r2, #255	; 0xff
			"invalid  delay counter %d", (int)Timer);

			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_DELAY_MASK) |
 101355c:	97df3c12 	bfils	r3, r2, #24, #8
		if (Timer > 0xFF) {
 1013560:	8a000002 	bhi	1013570 <XAxiDma_BdRingSetCoalesce+0x48>
			(Timer << XAXIDMA_DELAY_SHIFT);
	}

	XAxiDma_WriteReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET, Cr);

	return XST_SUCCESS;
 1013564:	e3a00000 	mov	r0, #0
	*LocalAddr = Value;
 1013568:	e58c3000 	str	r3, [ip]
}
 101356c:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1013570:	e3090ca4 	movw	r0, #40100	; 0x9ca4
 1013574:	e1a01002 	mov	r1, r2
 1013578:	e3400106 	movt	r0, #262	; 0x106
 101357c:	fa0022fd 	blx	101c178 <printf>
			return XST_FAILURE;
 1013580:	e3a00001 	mov	r0, #1
 1013584:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1013588:	e3090c70 	movw	r0, #40048	; 0x9c70
 101358c:	e3400106 	movt	r0, #262	; 0x106
 1013590:	fa0022f8 	blx	101c178 <printf>
			return XST_FAILURE;
 1013594:	e3a00001 	mov	r0, #1
 1013598:	e8bd8010 	pop	{r4, pc}

0101359c <XAxiDma_BdRingGetCoalesce>:
	return *(volatile u32 *) Addr;
 101359c:	e5903000 	ldr	r3, [r0]
 10135a0:	e5933000 	ldr	r3, [r3]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 10135a4:	e7e70853 	ubfx	r0, r3, #16, #8
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 10135a8:	e1a03c23 	lsr	r3, r3, #24
	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 10135ac:	e5810000 	str	r0, [r1]
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 10135b0:	e5823000 	str	r3, [r2]
}
 10135b4:	e12fff1e 	bx	lr

010135b8 <XAxiDma_BdRingAlloc>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd ** BdSetPtr)
{
 10135b8:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 10135bc:	e251e000 	subs	lr, r1, #0
 10135c0:	da00001f 	ble	1013644 <XAxiDma_BdRingAlloc+0x8c>

		return XST_INVALID_PARAM;
	}

	/* Enough free BDs available for the request? */
	if (RingPtr->FreeCnt < NumBd) {
 10135c4:	e590c050 	ldr	ip, [r0, #80]	; 0x50
 10135c8:	e15c000e 	cmp	ip, lr
 10135cc:	ba000015 	blt	1013628 <XAxiDma_BdRingAlloc+0x70>
		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead forward */
	*BdSetPtr = RingPtr->FreeHead;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10135d0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->FreeCnt -= NumBd;
 10135d4:	e04cc00e 	sub	ip, ip, lr
	*BdSetPtr = RingPtr->FreeHead;
 10135d8:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10135dc:	e5904028 	ldr	r4, [r0, #40]	; 0x28
 10135e0:	e0030e93 	mul	r3, r3, lr
	*BdSetPtr = RingPtr->FreeHead;
 10135e4:	e5821000 	str	r1, [r2]
	RingPtr->FreeCnt -= NumBd;
 10135e8:	e580c050 	str	ip, [r0, #80]	; 0x50
 10135ec:	e0933001 	adds	r3, r3, r1
	RingPtr->PreCnt += NumBd;

	return XST_SUCCESS;
 10135f0:	e3a01000 	mov	r1, #0
 10135f4:	23a02001 	movcs	r2, #1
 10135f8:	33a02000 	movcc	r2, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10135fc:	e1540003 	cmp	r4, r3
 1013600:	33822001 	orrcc	r2, r2, #1
 1013604:	e3520000 	cmp	r2, #0
 1013608:	1590202c 	ldrne	r2, [r0, #44]	; 0x2c
 101360c:	10433002 	subne	r3, r3, r2
	RingPtr->PreCnt += NumBd;
 1013610:	e5902054 	ldr	r2, [r0, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1013614:	e5803034 	str	r3, [r0, #52]	; 0x34
	RingPtr->PreCnt += NumBd;
 1013618:	e082e00e 	add	lr, r2, lr
 101361c:	e580e054 	str	lr, [r0, #84]	; 0x54
}
 1013620:	e1a00001 	mov	r0, r1
 1013624:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1013628:	e3090cfc 	movw	r0, #40188	; 0x9cfc
 101362c:	e1a0200c 	mov	r2, ip
 1013630:	e3400106 	movt	r0, #262	; 0x106
 1013634:	fa0022cf 	blx	101c178 <printf>
		return XST_FAILURE;
 1013638:	e3a01001 	mov	r1, #1
}
 101363c:	e1a00001 	mov	r0, r1
 1013640:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingAlloc: negative BD "
 1013644:	e3090cd4 	movw	r0, #40148	; 0x9cd4
 1013648:	e3400106 	movt	r0, #262	; 0x106
 101364c:	fa0022c9 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1013650:	e3a0100f 	mov	r1, #15
 1013654:	eafffff1 	b	1013620 <XAxiDma_BdRingAlloc+0x68>

01013658 <XAxiDma_BdRingUnAlloc>:
int XAxiDma_BdRingUnAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
	XAxiDma_Bd *TmpBd;

	if (NumBd <= 0) {
 1013658:	e251c000 	subs	ip, r1, #0
{
 101365c:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1013660:	da00002d 	ble	101371c <XAxiDma_BdRingUnAlloc+0xc4>

		return XST_INVALID_PARAM;
	}

	/* Enough BDs in the preprocessing state for the request? */
	if (RingPtr->PreCnt < NumBd) {
 1013664:	e5901054 	ldr	r1, [r0, #84]	; 0x54
 1013668:	e1a03000 	mov	r3, r0
 101366c:	e151000c 	cmp	r1, ip
 1013670:	ba000023 	blt	1013704 <XAxiDma_BdRingUnAlloc+0xac>

	/* The last BD in the BD set must has the FreeHead as its next BD.
	 * Otherwise, this is not a valid operation.
	 */
	TmpBd = BdSetPtr;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, TmpBd, NumBd);
 1013674:	e5900030 	ldr	r0, [r0, #48]	; 0x30
 1013678:	e5934028 	ldr	r4, [r3, #40]	; 0x28
 101367c:	e0000c90 	mul	r0, r0, ip
 1013680:	e0902002 	adds	r2, r0, r2
 1013684:	23a0e001 	movcs	lr, #1
 1013688:	33a0e000 	movcc	lr, #0
 101368c:	e1540002 	cmp	r4, r2
 1013690:	338ee001 	orrcc	lr, lr, #1
 1013694:	e35e0000 	cmp	lr, #0
 1013698:	1593e02c 	ldrne	lr, [r3, #44]	; 0x2c
 101369c:	1042200e 	subne	r2, r2, lr

	if (TmpBd != RingPtr->FreeHead) {
 10136a0:	e593e034 	ldr	lr, [r3, #52]	; 0x34
 10136a4:	e15e0002 	cmp	lr, r2
 10136a8:	1a000010 	bne	10136f0 <XAxiDma_BdRingUnAlloc+0x98>

		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead backward */
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10136ac:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 10136b0:	e0522000 	subs	r2, r2, r0
 10136b4:	33a00001 	movcc	r0, #1
 10136b8:	23a00000 	movcs	r0, #0
	RingPtr->FreeCnt += NumBd;
	RingPtr->PreCnt -= NumBd;
 10136bc:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10136c0:	e15e0002 	cmp	lr, r2
 10136c4:	83800001 	orrhi	r0, r0, #1
	RingPtr->FreeCnt += NumBd;
 10136c8:	e593e050 	ldr	lr, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10136cc:	e3500000 	cmp	r0, #0
	RingPtr->PreCnt -= NumBd;
 10136d0:	e5831054 	str	r1, [r3, #84]	; 0x54
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10136d4:	1593002c 	ldrne	r0, [r3, #44]	; 0x2c
	RingPtr->FreeCnt += NumBd;
 10136d8:	e08ec00c 	add	ip, lr, ip
 10136dc:	e583c050 	str	ip, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10136e0:	10822000 	addne	r2, r2, r0

	return XST_SUCCESS;
 10136e4:	e3a00000 	mov	r0, #0
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10136e8:	e5832034 	str	r2, [r3, #52]	; 0x34
}
 10136ec:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 10136f0:	e3090d74 	movw	r0, #40308	; 0x9d74
 10136f4:	e3400106 	movt	r0, #262	; 0x106
 10136f8:	fa0022c3 	blx	101c20c <puts>
		return XST_FAILURE;
 10136fc:	e3a00001 	mov	r0, #1
 1013700:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1013704:	e3090d44 	movw	r0, #40260	; 0x9d44
 1013708:	e1a0200c 	mov	r2, ip
 101370c:	e3400106 	movt	r0, #262	; 0x106
 1013710:	fa002298 	blx	101c178 <printf>
		return XST_FAILURE;
 1013714:	e3a00001 	mov	r0, #1
 1013718:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingUnAlloc: negative BD"
 101371c:	e3090d1c 	movw	r0, #40220	; 0x9d1c
 1013720:	e3400106 	movt	r0, #262	; 0x106
 1013724:	fa002293 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1013728:	e3a0000f 	mov	r0, #15
 101372c:	e8bd8010 	pop	{r4, pc}

01013730 <XAxiDma_BdRingToHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingToHw(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
 1013730:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	int i;
	u32 BdCr;
	u32 BdSts;
	int RingIndex = RingPtr->RingIndex;

	if (NumBd < 0) {
 1013734:	e2516000 	subs	r6, r1, #0
{
 1013738:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 101373c:	ba000069 	blt	10138e8 <XAxiDma_BdRingToHw+0x1b8>

		return XST_INVALID_PARAM;
	}

	/* If the commit set is empty, do nothing */
	if (NumBd == 0) {
 1013740:	0a000052 	beq	1013890 <XAxiDma_BdRingToHw+0x160>
		return XST_SUCCESS;
	}

	/* Make sure we are in sync with XAxiDma_BdRingAlloc() */
	if ((RingPtr->PreCnt < NumBd) || (RingPtr->PreHead != BdSetPtr)) {
 1013744:	e5903054 	ldr	r3, [r0, #84]	; 0x54
 1013748:	e1a05000 	mov	r5, r0
 101374c:	e1530006 	cmp	r3, r6
 1013750:	ba000051 	blt	101389c <XAxiDma_BdRingToHw+0x16c>
 1013754:	e5903038 	ldr	r3, [r0, #56]	; 0x38
 1013758:	e1530002 	cmp	r3, r2
 101375c:	1a00004e 	bne	101389c <XAxiDma_BdRingToHw+0x16c>
	BdSts = XAxiDma_BdGetSts(CurBdPtr);

	/* In case of Tx channel, the first BD should have been marked
	 * as start-of-frame
	 */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1013760:	e5901004 	ldr	r1, [r0, #4]
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1013764:	e1a04002 	mov	r4, r2
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1013768:	e592301c 	ldr	r3, [r2, #28]
	int RingIndex = RingPtr->RingIndex;
 101376c:	e5907064 	ldr	r7, [r0, #100]	; 0x64
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1013770:	e3510000 	cmp	r1, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1013774:	e5921018 	ldr	r1, [r2, #24]
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1013778:	e203333f 	and	r3, r3, #-67108864	; 0xfc000000
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 101377c:	0a00004c 	beq	10138b4 <XAxiDma_BdRingToHw+0x184>
		return XST_FAILURE;
	}

	/* Clear the completed status bit
	 */
	for (i = 0; i < NumBd - 1; i++) {
 1013780:	e2468001 	sub	r8, r6, #1
 1013784:	e3580000 	cmp	r8, #0
 1013788:	da00001e 	ble	1013808 <XAxiDma_BdRingToHw+0xd8>

		/* Make sure the length value in the BD is non-zero. */
		if (XAxiDma_BdGetLength(CurBdPtr,
 101378c:	e595001c 	ldr	r0, [r5, #28]
 1013790:	e1110000 	tst	r1, r0
 1013794:	13a09000 	movne	r9, #0
 1013798:	1a000003 	bne	10137ac <XAxiDma_BdRingToHw+0x7c>
 101379c:	ea00004b 	b	10138d0 <XAxiDma_BdRingToHw+0x1a0>
 10137a0:	e595001c 	ldr	r0, [r5, #28]
 10137a4:	e1110000 	tst	r1, r0
 10137a8:	0a000048 	beq	10138d0 <XAxiDma_BdRingToHw+0x1a0>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");

			return XST_FAILURE;
		}

		BdSts &=  ~XAXIDMA_BD_STS_COMPLETE_MASK;
 10137ac:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

		/* Flush the current BD so DMA core could see the updates */
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 10137b0:	e1a00002 	mov	r0, r2
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 10137b4:	e584301c 	str	r3, [r4, #28]
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 10137b8:	e3a01034 	mov	r1, #52	; 0x34
 10137bc:	eb001060 	bl	1017944 <Xil_DCacheFlushRange>

		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 10137c0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	for (i = 0; i < NumBd - 1; i++) {
 10137c4:	e2899001 	add	r9, r9, #1
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 10137c8:	e1530004 	cmp	r3, r4
 10137cc:	85953030 	ldrhi	r3, [r5, #48]	; 0x30
 10137d0:	95954024 	ldrls	r4, [r5, #36]	; 0x24
 10137d4:	80844003 	addhi	r4, r4, r3
	for (i = 0; i < NumBd - 1; i++) {
 10137d8:	e1590008 	cmp	r9, r8
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 10137dc:	e1a02004 	mov	r2, r4
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 10137e0:	e5941018 	ldr	r1, [r4, #24]
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 10137e4:	e594301c 	ldr	r3, [r4, #28]
	for (i = 0; i < NumBd - 1; i++) {
 10137e8:	baffffec 	blt	10137a0 <XAxiDma_BdRingToHw+0x70>
	}

	/* In case of Tx channel, the last BD should have EOF bit set */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) {
 10137ec:	e5950004 	ldr	r0, [r5, #4]
 10137f0:	e3500000 	cmp	r0, #0
 10137f4:	1a000003 	bne	1013808 <XAxiDma_BdRingToHw+0xd8>
 10137f8:	e3110301 	tst	r1, #67108864	; 0x4000000
 10137fc:	0a000058 	beq	1013964 <XAxiDma_BdRingToHw+0x234>
 1013800:	e5921018 	ldr	r1, [r2, #24]
 1013804:	e1a04002 	mov	r4, r2

		return XST_FAILURE;
	}

	/* Make sure the length value in the last BD is non-zero. */
	if (XAxiDma_BdGetLength(CurBdPtr,
 1013808:	e595001c 	ldr	r0, [r5, #28]
 101380c:	e1110000 	tst	r1, r0
 1013810:	0a00002e 	beq	10138d0 <XAxiDma_BdRingToHw+0x1a0>
		return XST_FAILURE;
	}

	/* The last BD should also have the completed status bit cleared
	 */
	BdSts &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1013814:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

	/* Flush the last BD so DMA core could see the updates */
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1013818:	e3a01034 	mov	r1, #52	; 0x34
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 101381c:	e584301c 	str	r3, [r4, #28]
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1013820:	e1a00002 	mov	r0, r2
 1013824:	e58d2004 	str	r2, [sp, #4]
 1013828:	eb001045 	bl	1017944 <Xil_DCacheFlushRange>
	DATA_SYNC;
 101382c:	f57ff04f 	dsb	sy

	/* This set has completed pre-processing, adjust ring pointers and
	 * counters
	 */
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1013830:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1013834:	e5950038 	ldr	r0, [r5, #56]	; 0x38
 1013838:	e595c028 	ldr	ip, [r5, #40]	; 0x28
 101383c:	e59d2004 	ldr	r2, [sp, #4]
 1013840:	e0030693 	mul	r3, r3, r6
	RingPtr->PreCnt -= NumBd;
	RingPtr->HwTail = CurBdPtr;
 1013844:	e5852040 	str	r2, [r5, #64]	; 0x40
 1013848:	e0933000 	adds	r3, r3, r0
	RingPtr->HwCnt += NumBd;

	/* If it is running, signal the engine to begin processing */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 101384c:	e5950008 	ldr	r0, [r5, #8]
 1013850:	23a01001 	movcs	r1, #1
 1013854:	33a01000 	movcc	r1, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1013858:	e15c0003 	cmp	ip, r3
 101385c:	33811001 	orrcc	r1, r1, #1
 1013860:	e3510000 	cmp	r1, #0
 1013864:	1595102c 	ldrne	r1, [r5, #44]	; 0x2c
 1013868:	10433001 	subne	r3, r3, r1
	RingPtr->PreCnt -= NumBd;
 101386c:	e5951054 	ldr	r1, [r5, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1013870:	e5853038 	str	r3, [r5, #56]	; 0x38
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1013874:	e3500001 	cmp	r0, #1
	RingPtr->HwCnt += NumBd;
 1013878:	e5953058 	ldr	r3, [r5, #88]	; 0x58
	RingPtr->PreCnt -= NumBd;
 101387c:	e0411006 	sub	r1, r1, r6
 1013880:	e5851054 	str	r1, [r5, #84]	; 0x54
	RingPtr->HwCnt += NumBd;
 1013884:	e0836006 	add	r6, r3, r6
 1013888:	e5856058 	str	r6, [r5, #88]	; 0x58
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 101388c:	0a00001a 	beq	10138fc <XAxiDma_BdRingToHw+0x1cc>
		return XST_SUCCESS;
 1013890:	e3a00000 	mov	r0, #0
								UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
			}
	}

	return XST_SUCCESS;
}
 1013894:	e28dd00c 	add	sp, sp, #12
 1013898:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Bd ring has problems\r\n");
 101389c:	e3090dc0 	movw	r0, #40384	; 0x9dc0
 10138a0:	e3400106 	movt	r0, #262	; 0x106
 10138a4:	fa002258 	blx	101c20c <puts>
		return XST_DMA_SG_LIST_ERROR;
 10138a8:	e300020e 	movw	r0, #526	; 0x20e
}
 10138ac:	e28dd00c 	add	sp, sp, #12
 10138b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 10138b4:	e3110302 	tst	r1, #134217728	; 0x8000000
 10138b8:	0a000024 	beq	1013950 <XAxiDma_BdRingToHw+0x220>
	for (i = 0; i < NumBd - 1; i++) {
 10138bc:	e2468001 	sub	r8, r6, #1
 10138c0:	e3580000 	cmp	r8, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 10138c4:	d2011303 	andle	r1, r1, #201326592	; 0xc000000
	for (i = 0; i < NumBd - 1; i++) {
 10138c8:	caffffaf 	bgt	101378c <XAxiDma_BdRingToHw+0x5c>
 10138cc:	eaffffc9 	b	10137f8 <XAxiDma_BdRingToHw+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");
 10138d0:	e3090df8 	movw	r0, #40440	; 0x9df8
 10138d4:	e3400106 	movt	r0, #262	; 0x106
 10138d8:	fa00224b 	blx	101c20c <puts>
			return XST_FAILURE;
 10138dc:	e3a00001 	mov	r0, #1
}
 10138e0:	e28dd00c 	add	sp, sp, #12
 10138e4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingToHw: negative BD number "
 10138e8:	e3090d9c 	movw	r0, #40348	; 0x9d9c
 10138ec:	e3400106 	movt	r0, #262	; 0x106
 10138f0:	fa002220 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 10138f4:	e3a0000f 	mov	r0, #15
 10138f8:	eaffffeb 	b	10138ac <XAxiDma_BdRingToHw+0x17c>
			if (RingPtr->Cyclic) {
 10138fc:	e5952068 	ldr	r2, [r5, #104]	; 0x68
 1013900:	e5951000 	ldr	r1, [r5]
 1013904:	e5953020 	ldr	r3, [r5, #32]
 1013908:	e3520000 	cmp	r2, #0
 101390c:	e595c024 	ldr	ip, [r5, #36]	; 0x24
 1013910:	e595e018 	ldr	lr, [r5, #24]
 1013914:	1a000017 	bne	1013978 <XAxiDma_BdRingToHw+0x248>
			if (RingPtr->IsRxChannel) {
 1013918:	e5950004 	ldr	r0, [r5, #4]
 101391c:	e043300c 	sub	r3, r3, ip
 1013920:	e0834004 	add	r4, r3, r4
 1013924:	e3c4403f 	bic	r4, r4, #63	; 0x3f
 1013928:	e3500000 	cmp	r0, #0
 101392c:	0a00001a 	beq	101399c <XAxiDma_BdRingToHw+0x26c>
				if (!RingIndex) {
 1013930:	e3570000 	cmp	r7, #0
 1013934:	1a00001d 	bne	10139b0 <XAxiDma_BdRingToHw+0x280>
					if (RingPtr->Addr_ext)
 1013938:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 101393c:	e5814010 	str	r4, [r1, #16]
	return XST_SUCCESS;
 1013940:	11a00007 	movne	r0, r7
 1013944:	15817014 	strne	r7, [r1, #20]
					if (RingPtr->Addr_ext)
 1013948:	1affffd7 	bne	10138ac <XAxiDma_BdRingToHw+0x17c>
 101394c:	eaffffcf 	b	1013890 <XAxiDma_BdRingToHw+0x160>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx first BD does not have "
 1013950:	e3090dd8 	movw	r0, #40408	; 0x9dd8
 1013954:	e3400106 	movt	r0, #262	; 0x106
 1013958:	fa00222b 	blx	101c20c <puts>
		return XST_FAILURE;
 101395c:	e3a00001 	mov	r0, #1
 1013960:	eaffffd1 	b	10138ac <XAxiDma_BdRingToHw+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx last BD does not have "
 1013964:	e3090e08 	movw	r0, #40456	; 0x9e08
 1013968:	e3400106 	movt	r0, #262	; 0x106
 101396c:	fa002226 	blx	101c20c <puts>
		return XST_FAILURE;
 1013970:	e3a00001 	mov	r0, #1
 1013974:	eaffffcc 	b	10138ac <XAxiDma_BdRingToHw+0x17c>
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1013978:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
				if (RingPtr->Addr_ext)
 101397c:	e35e0000 	cmp	lr, #0
 1013980:	13a00000 	movne	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1013984:	e042c00c 	sub	ip, r2, ip
 1013988:	e08c3003 	add	r3, ip, r3
 101398c:	e5813010 	str	r3, [r1, #16]
 1013990:	15810014 	strne	r0, [r1, #20]
				if (RingPtr->Addr_ext)
 1013994:	1affffc4 	bne	10138ac <XAxiDma_BdRingToHw+0x17c>
 1013998:	eaffffbc 	b	1013890 <XAxiDma_BdRingToHw+0x160>
				if (RingPtr->Addr_ext)
 101399c:	e35e0000 	cmp	lr, #0
 10139a0:	e5814010 	str	r4, [r1, #16]
 10139a4:	15810014 	strne	r0, [r1, #20]
 10139a8:	1affffbf 	bne	10138ac <XAxiDma_BdRingToHw+0x17c>
 10139ac:	eaffffb7 	b	1013890 <XAxiDma_BdRingToHw+0x160>
					XAxiDma_WriteReg(RingPtr->ChanBase,
 10139b0:	e2477001 	sub	r7, r7, #1
					if (RingPtr->Addr_ext)
 10139b4:	e35e0000 	cmp	lr, #0
					XAxiDma_WriteReg(RingPtr->ChanBase,
 10139b8:	e0811287 	add	r1, r1, r7, lsl #5
	return XST_SUCCESS;
 10139bc:	11a00002 	movne	r0, r2
 10139c0:	e5814048 	str	r4, [r1, #72]	; 0x48
 10139c4:	1581204c 	strne	r2, [r1, #76]	; 0x4c
					if (RingPtr->Addr_ext)
 10139c8:	1affffb7 	bne	10138ac <XAxiDma_BdRingToHw+0x17c>
 10139cc:	eaffffaf 	b	1013890 <XAxiDma_BdRingToHw+0x160>

010139d0 <XAxiDma_BdRingFromHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingFromHw(XAxiDma_BdRing * RingPtr, int BdLimit,
			     XAxiDma_Bd ** BdSetPtr)
{
 10139d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10139d4:	e1a09002 	mov	r9, r2
	BdPartialCount = 0;
	BdSts = 0;
	BdCr = 0;

	/* If no BDs in work group, then there's nothing to search */
	if (RingPtr->HwCnt == 0) {
 10139d8:	e5908058 	ldr	r8, [r0, #88]	; 0x58
 10139dc:	e3580000 	cmp	r8, #0
 10139e0:	0a00004c 	beq	1013b18 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}

	if (BdLimit > RingPtr->HwCnt) {
 10139e4:	e1580001 	cmp	r8, r1
 10139e8:	a1a08001 	movge	r8, r1
	 *    BD.
	 *  - RingPtr->HwTail is reached
	 *  - The number of requested BDs has been processed
	 */

	while (BdCount < BdLimit) {
 10139ec:	e3580000 	cmp	r8, #0
 10139f0:	da000048 	ble	1013b18 <XAxiDma_BdRingFromHw+0x148>
	CurBdPtr = RingPtr->HwHead;
 10139f4:	e3a07000 	mov	r7, #0
 10139f8:	e1a05000 	mov	r5, r0
 10139fc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
 1013a00:	e1a06007 	mov	r6, r7
 1013a04:	ea00000f 	b	1013a48 <XAxiDma_BdRingFromHw+0x78>
		 * For tx BDs, EOF bit is in the control word
		 * For rx BDs, EOF bit is in the status word
		 */
		if (((!(RingPtr->IsRxChannel) &&
		(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) ||
		((RingPtr->IsRxChannel) && (BdSts &
 1013a08:	e3130301 	tst	r3, #67108864	; 0x4000000
 1013a0c:	0a00001b 	beq	1013a80 <XAxiDma_BdRingFromHw+0xb0>
		}
		else {
			BdPartialCount++;
		}

		if (RingPtr->Cyclic) {
 1013a10:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount = 0;
 1013a14:	e3a07000 	mov	r7, #0
		if (RingPtr->Cyclic) {
 1013a18:	e3520000 	cmp	r2, #0
 1013a1c:	1a00001b 	bne	1013a90 <XAxiDma_BdRingFromHw+0xc0>
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
		}

		/* Reached the end of the work group */
		if (CurBdPtr == RingPtr->HwTail) {
 1013a20:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1013a24:	e1530004 	cmp	r3, r4
 1013a28:	0a000020 	beq	1013ab0 <XAxiDma_BdRingFromHw+0xe0>
			break;
		}

		/* Move on to the next BD in work group */
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1013a2c:	e5953028 	ldr	r3, [r5, #40]	; 0x28
 1013a30:	e1540003 	cmp	r4, r3
 1013a34:	35953030 	ldrcc	r3, [r5, #48]	; 0x30
 1013a38:	25954024 	ldrcs	r4, [r5, #36]	; 0x24
 1013a3c:	30844003 	addcc	r4, r4, r3
	while (BdCount < BdLimit) {
 1013a40:	e1580006 	cmp	r8, r6
 1013a44:	0a000019 	beq	1013ab0 <XAxiDma_BdRingFromHw+0xe0>
		XAXIDMA_CACHE_INVALIDATE(CurBdPtr);
 1013a48:	e3a01034 	mov	r1, #52	; 0x34
 1013a4c:	e1a00004 	mov	r0, r4
 1013a50:	eb000f6e 	bl	1017810 <Xil_DCacheInvalidateRange>
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1013a54:	e594301c 	ldr	r3, [r4, #28]
 1013a58:	e284001c 	add	r0, r4, #28
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1013a5c:	e5941018 	ldr	r1, [r4, #24]
		if (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)) {
 1013a60:	e3530000 	cmp	r3, #0
 1013a64:	aa000011 	bge	1013ab0 <XAxiDma_BdRingFromHw+0xe0>
		if (((!(RingPtr->IsRxChannel) &&
 1013a68:	e5952004 	ldr	r2, [r5, #4]
		BdCount++;
 1013a6c:	e2866001 	add	r6, r6, #1
		if (((!(RingPtr->IsRxChannel) &&
 1013a70:	e3520000 	cmp	r2, #0
 1013a74:	1affffe3 	bne	1013a08 <XAxiDma_BdRingFromHw+0x38>
 1013a78:	e3110301 	tst	r1, #67108864	; 0x4000000
 1013a7c:	1affffe3 	bne	1013a10 <XAxiDma_BdRingFromHw+0x40>
		if (RingPtr->Cyclic) {
 1013a80:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount++;
 1013a84:	e2877001 	add	r7, r7, #1
		if (RingPtr->Cyclic) {
 1013a88:	e3520000 	cmp	r2, #0
 1013a8c:	0affffe3 	beq	1013a20 <XAxiDma_BdRingFromHw+0x50>
			BdSts = BdSts & ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1013a90:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1013a94:	e3a01034 	mov	r1, #52	; 0x34
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1013a98:	e5803000 	str	r3, [r0]
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1013a9c:	e1a00004 	mov	r0, r4
 1013aa0:	eb000fa7 	bl	1017944 <Xil_DCacheFlushRange>
		if (CurBdPtr == RingPtr->HwTail) {
 1013aa4:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1013aa8:	e1530004 	cmp	r3, r4
 1013aac:	1affffde 	bne	1013a2c <XAxiDma_BdRingFromHw+0x5c>
	BdCount -= BdPartialCount;

	/* If BdCount is non-zero then BDs were found to return. Set return
	 * parameters, update pointers and counters, return success
	 */
	if (BdCount) {
 1013ab0:	e0560007 	subs	r0, r6, r7
 1013ab4:	0a000017 	beq	1013b18 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = RingPtr->HwHead;
		if (!RingPtr->Cyclic) {
 1013ab8:	e5953068 	ldr	r3, [r5, #104]	; 0x68
		*BdSetPtr = RingPtr->HwHead;
 1013abc:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
		if (!RingPtr->Cyclic) {
 1013ac0:	e3530000 	cmp	r3, #0
		*BdSetPtr = RingPtr->HwHead;
 1013ac4:	e5892000 	str	r2, [r9]
		if (!RingPtr->Cyclic) {
 1013ac8:	1a000005 	bne	1013ae4 <XAxiDma_BdRingFromHw+0x114>
			RingPtr->HwCnt -= BdCount;
 1013acc:	e5951058 	ldr	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 1013ad0:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
			RingPtr->HwCnt -= BdCount;
 1013ad4:	e0411000 	sub	r1, r1, r0
			RingPtr->PostCnt += BdCount;
 1013ad8:	e0833000 	add	r3, r3, r0
			RingPtr->HwCnt -= BdCount;
 1013adc:	e5851058 	str	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 1013ae0:	e585305c 	str	r3, [r5, #92]	; 0x5c
		}
		XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->HwHead, BdCount);
 1013ae4:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1013ae8:	e5951028 	ldr	r1, [r5, #40]	; 0x28
 1013aec:	e0030093 	mul	r3, r3, r0
 1013af0:	e0933002 	adds	r3, r3, r2
 1013af4:	23a02001 	movcs	r2, #1
 1013af8:	33a02000 	movcc	r2, #0
 1013afc:	e1510003 	cmp	r1, r3
 1013b00:	33822001 	orrcc	r2, r2, #1
 1013b04:	e3520000 	cmp	r2, #0
 1013b08:	1595202c 	ldrne	r2, [r5, #44]	; 0x2c
 1013b0c:	10433002 	subne	r3, r3, r2
 1013b10:	e585303c 	str	r3, [r5, #60]	; 0x3c
	else {
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}
}
 1013b14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*BdSetPtr = (XAxiDma_Bd *)NULL;
 1013b18:	e3a00000 	mov	r0, #0
 1013b1c:	e5890000 	str	r0, [r9]
		return 0;
 1013b20:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01013b24 <XAxiDma_BdRingFree>:
 *
 *****************************************************************************/
int XAxiDma_BdRingFree(XAxiDma_BdRing * RingPtr, int NumBd,
		      XAxiDma_Bd * BdSetPtr)
{
	if (NumBd < 0) {
 1013b24:	e251c000 	subs	ip, r1, #0
{
 1013b28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1013b2c:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 1013b30:	ba000023 	blt	1013bc4 <XAxiDma_BdRingFree+0xa0>
	}

	/* If the BD Set to free is empty, do nothing
	 */
	if (NumBd == 0) {
		return XST_SUCCESS;
 1013b34:	01a0000c 	moveq	r0, ip
	if (NumBd == 0) {
 1013b38:	0a000017 	beq	1013b9c <XAxiDma_BdRingFree+0x78>
	}

	/* Make sure we are in sync with XAxiDma_BdRingFromHw() */
	if ((RingPtr->PostCnt < NumBd) || (RingPtr->PostHead != BdSetPtr)) {
 1013b3c:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
 1013b40:	e5903044 	ldr	r3, [r0, #68]	; 0x44
 1013b44:	e151000c 	cmp	r1, ip
 1013b48:	ba000015 	blt	1013ba4 <XAxiDma_BdRingFree+0x80>
 1013b4c:	e1520003 	cmp	r2, r3
 1013b50:	1a000013 	bne	1013ba4 <XAxiDma_BdRingFree+0x80>
	}

	/* Update pointers and counters */
	RingPtr->FreeCnt += NumBd;
	RingPtr->PostCnt -= NumBd;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1013b54:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->PostCnt -= NumBd;
 1013b58:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1013b5c:	e590e028 	ldr	lr, [r0, #40]	; 0x28
	RingPtr->PostCnt -= NumBd;
 1013b60:	e580105c 	str	r1, [r0, #92]	; 0x5c
	RingPtr->FreeCnt += NumBd;
 1013b64:	e5901050 	ldr	r1, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1013b68:	e0030c93 	mul	r3, r3, ip
	RingPtr->FreeCnt += NumBd;
 1013b6c:	e081c00c 	add	ip, r1, ip
 1013b70:	e580c050 	str	ip, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1013b74:	e0932002 	adds	r2, r3, r2
 1013b78:	23a03001 	movcs	r3, #1
 1013b7c:	33a03000 	movcc	r3, #0
 1013b80:	e15e0002 	cmp	lr, r2
 1013b84:	33833001 	orrcc	r3, r3, #1
 1013b88:	e3530000 	cmp	r3, #0
 1013b8c:	1590302c 	ldrne	r3, [r0, #44]	; 0x2c
 1013b90:	10422003 	subne	r2, r2, r3
 1013b94:	e5802044 	str	r2, [r0, #68]	; 0x44

	return XST_SUCCESS;
 1013b98:	e3a00000 	mov	r0, #0
}
 1013b9c:	e28dd00c 	add	sp, sp, #12
 1013ba0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingFree: Error free BDs: "
 1013ba4:	e3090e48 	movw	r0, #40520	; 0x9e48
 1013ba8:	e58d2000 	str	r2, [sp]
 1013bac:	e3400106 	movt	r0, #262	; 0x106
 1013bb0:	e1a0200c 	mov	r2, ip
 1013bb4:	fa00216f 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013bb8:	e300020e 	movw	r0, #526	; 0x20e
}
 1013bbc:	e28dd00c 	add	sp, sp, #12
 1013bc0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR,
 1013bc4:	e3090e28 	movw	r0, #40488	; 0x9e28
 1013bc8:	e3400106 	movt	r0, #262	; 0x106
 1013bcc:	fa002169 	blx	101c178 <printf>
		return XST_INVALID_PARAM;
 1013bd0:	e3a0000f 	mov	r0, #15
 1013bd4:	eafffff0 	b	1013b9c <XAxiDma_BdRingFree+0x78>

01013bd8 <XAxiDma_BdRingCheck>:
	u32 AddrV;
	u32 AddrP;
	int i;

	/* Is the list created */
	if (RingPtr->AllCnt == 0) {
 1013bd8:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 1013bdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (RingPtr->AllCnt == 0) {
 1013be0:	e3520000 	cmp	r2, #0
 1013be4:	0a000058 	beq	1013d4c <XAxiDma_BdRingCheck+0x174>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't check if channel is running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1013be8:	e5903008 	ldr	r3, [r0, #8]
 1013bec:	e1a04000 	mov	r4, r0
 1013bf0:	e3530001 	cmp	r3, #1
 1013bf4:	0a00005f 	beq	1013d78 <XAxiDma_BdRingCheck+0x1a0>

		return XST_IS_STARTED;
	}

	/* RunState doesn't make sense */
	else if (RingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1013bf8:	e5903008 	ldr	r3, [r0, #8]
 1013bfc:	e3530002 	cmp	r3, #2
 1013c00:	1a000045 	bne	1013d1c <XAxiDma_BdRingCheck+0x144>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal pointers point to correct memory space */
	AddrV = (UINTPTR) RingPtr->FreeHead;
 1013c04:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1013c08:	e5905024 	ldr	r5, [r0, #36]	; 0x24
 1013c0c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
 1013c10:	e1550001 	cmp	r5, r1
 1013c14:	8a000034 	bhi	1013cec <XAxiDma_BdRingCheck+0x114>
 1013c18:	e1510003 	cmp	r1, r3
 1013c1c:	8a000032 	bhi	1013cec <XAxiDma_BdRingCheck+0x114>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PreHead;
 1013c20:	e5901038 	ldr	r1, [r0, #56]	; 0x38
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1013c24:	e1550001 	cmp	r5, r1
 1013c28:	91510003 	cmpls	r1, r3
 1013c2c:	8a000040 	bhi	1013d34 <XAxiDma_BdRingCheck+0x15c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwHead;
 1013c30:	e590103c 	ldr	r1, [r0, #60]	; 0x3c
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1013c34:	e1510003 	cmp	r1, r3
 1013c38:	91550001 	cmpls	r5, r1
 1013c3c:	8a000047 	bhi	1013d60 <XAxiDma_BdRingCheck+0x188>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwTail;
 1013c40:	e5901040 	ldr	r1, [r0, #64]	; 0x40
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1013c44:	e1510003 	cmp	r1, r3
 1013c48:	91550001 	cmpls	r5, r1
 1013c4c:	8a00002c 	bhi	1013d04 <XAxiDma_BdRingCheck+0x12c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PostHead;
 1013c50:	e5901044 	ldr	r1, [r0, #68]	; 0x44
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1013c54:	e1510003 	cmp	r1, r3
 1013c58:	91550001 	cmpls	r5, r1
 1013c5c:	8a00004a 	bhi	1013d8c <XAxiDma_BdRingCheck+0x1b4>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal counters add up */
	if ((RingPtr->HwCnt + RingPtr->PreCnt + RingPtr->FreeCnt +
 1013c60:	e5903058 	ldr	r3, [r0, #88]	; 0x58
 1013c64:	e590c054 	ldr	ip, [r0, #84]	; 0x54
 1013c68:	e5900050 	ldr	r0, [r0, #80]	; 0x50
 1013c6c:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
 1013c70:	e083300c 	add	r3, r3, ip
 1013c74:	e0833000 	add	r3, r3, r0
 1013c78:	e0833001 	add	r3, r3, r1
 1013c7c:	e1520003 	cmp	r2, r3
 1013c80:	1a000050 	bne	1013dc8 <XAxiDma_BdRingCheck+0x1f0>
		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify BDs are linked correctly */
	AddrV = RingPtr->FirstBdAddr;
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 1013c84:	e5946020 	ldr	r6, [r4, #32]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1013c88:	e3520001 	cmp	r2, #1
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 1013c8c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
 1013c90:	e0866002 	add	r6, r6, r2
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1013c94:	da000042 	ble	1013da4 <XAxiDma_BdRingCheck+0x1cc>
 1013c98:	e3a07001 	mov	r7, #1
 1013c9c:	ea000005 	b	1013cb8 <XAxiDma_BdRingCheck+0xe0>
 1013ca0:	e5942060 	ldr	r2, [r4, #96]	; 0x60

			return XST_DMA_SG_LIST_ERROR;
		}

		/* Move on to next BD */
		AddrV += RingPtr->Separation;
 1013ca4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1013ca8:	e1520007 	cmp	r2, r7
		AddrV += RingPtr->Separation;
 1013cac:	e0855003 	add	r5, r5, r3
		AddrP += RingPtr->Separation;
 1013cb0:	e0866003 	add	r6, r6, r3
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1013cb4:	da00003a 	ble	1013da4 <XAxiDma_BdRingCheck+0x1cc>
		XAXIDMA_CACHE_INVALIDATE(AddrV);
 1013cb8:	e3a01034 	mov	r1, #52	; 0x34
 1013cbc:	e1a00005 	mov	r0, r5
 1013cc0:	eb000ed2 	bl	1017810 <Xil_DCacheInvalidateRange>
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 1013cc4:	e5951000 	ldr	r1, [r5]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1013cc8:	e2877001 	add	r7, r7, #1
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 1013ccc:	e1510006 	cmp	r1, r6
 1013cd0:	0afffff2 	beq	1013ca0 <XAxiDma_BdRingCheck+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Next Bd "
 1013cd4:	e30a0070 	movw	r0, #41072	; 0xa070
 1013cd8:	e1a02006 	mov	r2, r6
 1013cdc:	e3400106 	movt	r0, #262	; 0x106
 1013ce0:	fa002124 	blx	101c178 <printf>
			return XST_DMA_SG_LIST_ERROR;
 1013ce4:	e300020e 	movw	r0, #526	; 0x20e
 1013ce8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: FreeHead wrong "
 1013cec:	e3090f10 	movw	r0, #40720	; 0x9f10
 1013cf0:	e1a02005 	mov	r2, r5
 1013cf4:	e3400106 	movt	r0, #262	; 0x106
 1013cf8:	fa00211e 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013cfc:	e300020e 	movw	r0, #526	; 0x20e
 1013d00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwTail wrong %x, "
 1013d04:	e3090fcc 	movw	r0, #40908	; 0x9fcc
 1013d08:	e1a02005 	mov	r2, r5
 1013d0c:	e3400106 	movt	r0, #262	; 0x106
 1013d10:	fa002118 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013d14:	e300020e 	movw	r0, #526	; 0x20e
 1013d18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: unknown BD ring "
 1013d1c:	e5901008 	ldr	r1, [r0, #8]
 1013d20:	e3090ee8 	movw	r0, #40680	; 0x9ee8
 1013d24:	e3400106 	movt	r0, #262	; 0x106
 1013d28:	fa002112 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013d2c:	e300020e 	movw	r0, #526	; 0x20e
 1013d30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PreHead wrong %x, "
 1013d34:	e3090f50 	movw	r0, #40784	; 0x9f50
 1013d38:	e1a02005 	mov	r2, r5
 1013d3c:	e3400106 	movt	r0, #262	; 0x106
 1013d40:	fa00210c 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013d44:	e300020e 	movw	r0, #526	; 0x20e
 1013d48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: no BDs\r\n");
 1013d4c:	e3090e9c 	movw	r0, #40604	; 0x9e9c
 1013d50:	e3400106 	movt	r0, #262	; 0x106
 1013d54:	fa00212c 	blx	101c20c <puts>
		return XST_DMA_SG_NO_LIST;
 1013d58:	e300020b 	movw	r0, #523	; 0x20b
 1013d5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwHead wrong %x, "
 1013d60:	e3090f90 	movw	r0, #40848	; 0x9f90
 1013d64:	e1a02005 	mov	r2, r5
 1013d68:	e3400106 	movt	r0, #262	; 0x106
 1013d6c:	fa002101 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013d70:	e300020e 	movw	r0, #526	; 0x20e
 1013d74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Bd ring is "
 1013d78:	e3090eb4 	movw	r0, #40628	; 0x9eb4
 1013d7c:	e3400106 	movt	r0, #262	; 0x106
 1013d80:	fa002121 	blx	101c20c <puts>
		return XST_IS_STARTED;
 1013d84:	e3a00017 	mov	r0, #23
 1013d88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PostHead wrong "
 1013d8c:	e30a0008 	movw	r0, #40968	; 0xa008
 1013d90:	e1a02005 	mov	r2, r5
 1013d94:	e3400106 	movt	r0, #262	; 0x106
 1013d98:	fa0020f6 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013d9c:	e300020e 	movw	r0, #526	; 0x20e
 1013da0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	}

	XAXIDMA_CACHE_INVALIDATE(AddrV);
 1013da4:	e3a01034 	mov	r1, #52	; 0x34
 1013da8:	e1a00005 	mov	r0, r5
 1013dac:	eb000e97 	bl	1017810 <Xil_DCacheInvalidateRange>
	/* Last BD should point back to the beginning of ring */
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 1013db0:	e5951000 	ldr	r1, [r5]
	    RingPtr->FirstBdPhysAddr) {
 1013db4:	e5942020 	ldr	r2, [r4, #32]
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 1013db8:	e1510002 	cmp	r1, r2
 1013dbc:	1a000006 	bne	1013ddc <XAxiDma_BdRingCheck+0x204>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* No problems found */
	return XST_SUCCESS;
 1013dc0:	e3a00000 	mov	r0, #0
}
 1013dc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: internal counter "
 1013dc8:	e30a0048 	movw	r0, #41032	; 0xa048
 1013dcc:	e3400106 	movt	r0, #262	; 0x106
 1013dd0:	fa00210d 	blx	101c20c <puts>
		return XST_DMA_SG_LIST_ERROR;
 1013dd4:	e300020e 	movw	r0, #526	; 0x20e
 1013dd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: last Bd Next BD "
 1013ddc:	e30a00a0 	movw	r0, #41120	; 0xa0a0
 1013de0:	e3400106 	movt	r0, #262	; 0x106
 1013de4:	fa0020e3 	blx	101c178 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1013de8:	e300020e 	movw	r0, #526	; 0x20e
 1013dec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01013df0 <XAxiDma_BdRingDumpRegs>:
 * @return	None
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_BdRingDumpRegs(XAxiDma_BdRing *RingPtr) {
 1013df0:	e1a03000 	mov	r3, r0
 1013df4:	e92d4070 	push	{r4, r5, r6, lr}
	UINTPTR RegBase = RingPtr->ChanBase;
 1013df8:	e5934000 	ldr	r4, [r3]
	int RingIndex = RingPtr->RingIndex;

	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 1013dfc:	e30a00d8 	movw	r0, #41176	; 0xa0d8
 1013e00:	e3400106 	movt	r0, #262	; 0x106
	int RingIndex = RingPtr->RingIndex;
 1013e04:	e5935064 	ldr	r5, [r3, #100]	; 0x64
	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 1013e08:	e1a01004 	mov	r1, r4
 1013e0c:	eb00115f 	bl	1018390 <xil_printf>
	xil_printf("Control REG: %08x\r\n",
 1013e10:	e30a00f0 	movw	r0, #41200	; 0xa0f0
	return *(volatile u32 *) Addr;
 1013e14:	e5941000 	ldr	r1, [r4]
 1013e18:	e3400106 	movt	r0, #262	; 0x106
 1013e1c:	eb00115b 	bl	1018390 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET));
	xil_printf("Status REG: %08x\r\n",
 1013e20:	e30a0104 	movw	r0, #41220	; 0xa104
 1013e24:	e5941004 	ldr	r1, [r4, #4]
 1013e28:	e3400106 	movt	r0, #262	; 0x106
 1013e2c:	eb001157 	bl	1018390 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_SR_OFFSET));

	if (RingIndex) {
 1013e30:	e3550000 	cmp	r5, #0
 1013e34:	0a00000f 	beq	1013e78 <XAxiDma_BdRingDumpRegs+0x88>
	xil_printf("Cur BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1013e38:	e2855001 	add	r5, r5, #1
	xil_printf("Cur BD REG: %08x\r\n",
 1013e3c:	e30a0118 	movw	r0, #41240	; 0xa118
 1013e40:	e7941285 	ldr	r1, [r4, r5, lsl #5]
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1013e44:	e1a05285 	lsl	r5, r5, #5
	xil_printf("Cur BD REG: %08x\r\n",
 1013e48:	e3400106 	movt	r0, #262	; 0x106
 1013e4c:	eb00114f 	bl	1018390 <xil_printf>
		XAXIDMA_RX_CDESC0_OFFSET + ((RingIndex - 1) *
		XAXIDMA_RX_NDESC_OFFSET)));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1013e50:	e2455040 	sub	r5, r5, #64	; 0x40
 1013e54:	e2844048 	add	r4, r4, #72	; 0x48
	xil_printf("Tail BD REG: %08x\r\n",
 1013e58:	e30a012c 	movw	r0, #41260	; 0xa12c
 1013e5c:	e7951004 	ldr	r1, [r5, r4]
 1013e60:	e3400106 	movt	r0, #262	; 0x106
 1013e64:	eb001149 	bl	1018390 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CDESC_OFFSET));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_TDESC_OFFSET));
	}

	xil_printf("\r\n");
 1013e68:	e3080ff8 	movw	r0, #36856	; 0x8ff8
}
 1013e6c:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 1013e70:	e3400106 	movt	r0, #262	; 0x106
 1013e74:	ea001145 	b	1018390 <xil_printf>
	xil_printf("Cur BD REG: %08x\r\n",
 1013e78:	e30a0118 	movw	r0, #41240	; 0xa118
 1013e7c:	e5941008 	ldr	r1, [r4, #8]
 1013e80:	e3400106 	movt	r0, #262	; 0x106
 1013e84:	eb001141 	bl	1018390 <xil_printf>
	xil_printf("Tail BD REG: %08x\r\n",
 1013e88:	e30a012c 	movw	r0, #41260	; 0xa12c
 1013e8c:	e5941010 	ldr	r1, [r4, #16]
 1013e90:	e3400106 	movt	r0, #262	; 0x106
 1013e94:	eb00113d 	bl	1018390 <xil_printf>
	xil_printf("\r\n");
 1013e98:	e3080ff8 	movw	r0, #36856	; 0x8ff8
}
 1013e9c:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 1013ea0:	e3400106 	movt	r0, #262	; 0x106
 1013ea4:	ea001139 	b	1018390 <xil_printf>

01013ea8 <StubErrCallBack>:
******************************************************************************/
static void StubErrCallBack(void *CallBackRef, u32 ErrorMask)
{
	(void) ((void *)CallBackRef);
	(void) ErrorMask;
	Xil_AssertVoidAlways();
 1013ea8:	e30a0140 	movw	r0, #41280	; 0xa140
{
 1013eac:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1013eb0:	e3a010a7 	mov	r1, #167	; 0xa7
 1013eb4:	e3400106 	movt	r0, #262	; 0x106
 1013eb8:	eb000e20 	bl	1017740 <Xil_Assert>
 1013ebc:	e3053f40 	movw	r3, #24384	; 0x5f40
 1013ec0:	e3a02001 	mov	r2, #1
 1013ec4:	e3403146 	movt	r3, #326	; 0x146
 1013ec8:	e5832000 	str	r2, [r3]
}
 1013ecc:	e8bd8010 	pop	{r4, pc}

01013ed0 <XClk_Wiz_CfgInitialize>:
{
 1013ed0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1013ed4:	e2504000 	subs	r4, r0, #0
 1013ed8:	0a00001e 	beq	1013f58 <XClk_Wiz_CfgInitialize+0x88>
 1013edc:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertNonvoid(CfgPtr != NULL);
 1013ee0:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1013ee4:	e3405146 	movt	r5, #326	; 0x146
 1013ee8:	e3a03000 	mov	r3, #0
 1013eec:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(CfgPtr != NULL);
 1013ef0:	0a000021 	beq	1013f7c <XClk_Wiz_CfgInitialize+0xac>
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1013ef4:	e3520000 	cmp	r2, #0
 1013ef8:	e1a06002 	mov	r6, r2
 1013efc:	0a00000d 	beq	1013f38 <XClk_Wiz_CfgInitialize+0x68>
	InstancePtr->Config = *CfgPtr;
 1013f00:	e3a02058 	mov	r2, #88	; 0x58
 1013f04:	eb001ebd 	bl	101ba00 <memcpy>
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1013f08:	e3033ea8 	movw	r3, #16040	; 0x3ea8
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1013f0c:	e3012111 	movw	r2, #4369	; 0x1111
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1013f10:	e3403101 	movt	r3, #257	; 0x101
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1013f14:	e3412111 	movt	r2, #4369	; 0x1111
	InstancePtr->Config.BaseAddr = EffectiveAddr;
 1013f18:	e5846004 	str	r6, [r4, #4]
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1013f1c:	e5843060 	str	r3, [r4, #96]	; 0x60
	InstancePtr->ClkGlitchCallBack      = StubErrCallBack;
 1013f20:	e5843068 	str	r3, [r4, #104]	; 0x68
	InstancePtr->ClkStopCallBack        = StubErrCallBack;
 1013f24:	e5843070 	str	r3, [r4, #112]	; 0x70
	InstancePtr->ErrorCallBack = StubErrCallBack;
 1013f28:	e5843078 	str	r3, [r4, #120]	; 0x78
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1013f2c:	e5842080 	str	r2, [r4, #128]	; 0x80
}
 1013f30:	e3a00000 	mov	r0, #0
 1013f34:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1013f38:	e30a0140 	movw	r0, #41280	; 0xa140
 1013f3c:	e3a01065 	mov	r1, #101	; 0x65
 1013f40:	e3400106 	movt	r0, #262	; 0x106
 1013f44:	eb000dfd 	bl	1017740 <Xil_Assert>
 1013f48:	e3a03001 	mov	r3, #1
}
 1013f4c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1013f50:	e5853000 	str	r3, [r5]
}
 1013f54:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1013f58:	e30a0140 	movw	r0, #41280	; 0xa140
 1013f5c:	e3a01063 	mov	r1, #99	; 0x63
 1013f60:	e3400106 	movt	r0, #262	; 0x106
 1013f64:	eb000df5 	bl	1017740 <Xil_Assert>
 1013f68:	e3053f40 	movw	r3, #24384	; 0x5f40
 1013f6c:	e3a02001 	mov	r2, #1
 1013f70:	e3403146 	movt	r3, #326	; 0x146
 1013f74:	e5832000 	str	r2, [r3]
 1013f78:	eaffffec 	b	1013f30 <XClk_Wiz_CfgInitialize+0x60>
	Xil_AssertNonvoid(CfgPtr != NULL);
 1013f7c:	e30a0140 	movw	r0, #41280	; 0xa140
 1013f80:	e3a01064 	mov	r1, #100	; 0x64
 1013f84:	e3400106 	movt	r0, #262	; 0x106
 1013f88:	eb000dec 	bl	1017740 <Xil_Assert>
 1013f8c:	e3a03001 	mov	r3, #1
 1013f90:	e5853000 	str	r3, [r5]
 1013f94:	eaffffe5 	b	1013f30 <XClk_Wiz_CfgInitialize+0x60>

01013f98 <XClk_Wiz_GetInterruptSettings>:
	Xil_AssertVoid(InstancePtr != NULL);
 1013f98:	e3500000 	cmp	r0, #0
 1013f9c:	0a00000b 	beq	1013fd0 <XClk_Wiz_GetInterruptSettings+0x38>
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 1013fa0:	e5902004 	ldr	r2, [r0, #4]
	Xil_AssertVoid(InstancePtr != NULL);
 1013fa4:	e3053f40 	movw	r3, #24384	; 0x5f40
 1013fa8:	e3403146 	movt	r3, #326	; 0x146
 1013fac:	e3a01000 	mov	r1, #0
 1013fb0:	e5831000 	str	r1, [r3]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1013fb4:	e592300c 	ldr	r3, [r2, #12]
*
****************************************************************************/
static inline u32 XCLK_WIZ_GET_BITFIELD_VALUE(UINTPTR BaseAddress,
		u32 RegisterOffset, u32 BitMask, u32 BitShift) {
	return ((XClk_Wiz_ReadReg((BaseAddress), (RegisterOffset)) \
		  & (BitMask)) >> (BitShift));
 1013fb8:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 1013fbc:	e5803058 	str	r3, [r0, #88]	; 0x58
 1013fc0:	e5923010 	ldr	r3, [r2, #16]
 1013fc4:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkIntrEnable = XCLK_WIZ_GET_BITFIELD_VALUE
 1013fc8:	e580305c 	str	r3, [r0, #92]	; 0x5c
 1013fcc:	e12fff1e 	bx	lr
	Xil_AssertVoid(InstancePtr != NULL);
 1013fd0:	e30a0140 	movw	r0, #41280	; 0xa140
{
 1013fd4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1013fd8:	e3a01086 	mov	r1, #134	; 0x86
 1013fdc:	e3400106 	movt	r0, #262	; 0x106
 1013fe0:	eb000dd6 	bl	1017740 <Xil_Assert>
 1013fe4:	e3053f40 	movw	r3, #24384	; 0x5f40
 1013fe8:	e3a02001 	mov	r2, #1
 1013fec:	e3403146 	movt	r3, #326	; 0x146
 1013ff0:	e5832000 	str	r2, [r3]
}
 1013ff4:	e8bd8010 	pop	{r4, pc}

01013ff8 <XClk_Wiz_LookupConfig>:
	extern XClk_Wiz_Config XClk_Wiz_ConfigTable[];
	XClk_Wiz_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0; Index < XPAR_XCLK_WIZ_NUM_INSTANCES; Index++) {
		if (XClk_Wiz_ConfigTable[Index].DeviceId == DeviceId) {
 1013ff8:	e30a35e8 	movw	r3, #42472	; 0xa5e8
 1013ffc:	e3403106 	movt	r3, #262	; 0x106
 1014000:	e5932000 	ldr	r2, [r3]
			break;
		}
	}

	return CfgPtr;
}
 1014004:	e1520000 	cmp	r2, r0
 1014008:	01a00003 	moveq	r0, r3
 101400c:	13a00000 	movne	r0, #0
 1014010:	e12fff1e 	bx	lr

01014014 <XGpioPs_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XGpioPs_CfgInitialize(XGpioPs *InstancePtr, const XGpioPs_Config *ConfigPtr,
				u32 EffectiveAddr)
{
 1014014:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status = XST_SUCCESS;
	u8 i;
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014018:	e2504000 	subs	r4, r0, #0
 101401c:	0a00004b 	beq	1014150 <XGpioPs_CfgInitialize+0x13c>
 1014020:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1014024:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014028:	e3405146 	movt	r5, #326	; 0x146
 101402c:	e3a03000 	mov	r3, #0
 1014030:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1014034:	0a00004e 	beq	1014174 <XGpioPs_CfgInitialize+0x160>
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1014038:	e3520000 	cmp	r2, #0
 101403c:	0a00002d 	beq	10140f8 <XGpioPs_CfgInitialize+0xe4>
	 * Set some default values for instance data, don't indicate the device
	 * is ready to use until everything has been initialized successfully.
	 */
	InstancePtr->IsReady = 0U;
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1014040:	e1d100b0 	ldrh	r0, [r1]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1014044:	e3051ab4 	movw	r1, #23220	; 0x5ab4
 1014048:	e3401101 	movt	r1, #257	; 0x101
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
 101404c:	e1c420f4 	strd	r2, [r4, #4]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1014050:	e584100c 	str	r1, [r4, #12]
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1014054:	e1c400b0 	strh	r0, [r4]
	InstancePtr->Platform = XGetPlatform_Info();
 1014058:	eb00103d 	bl	1018154 <XGetPlatform_Info>

	/* Initialize the Bank data based on platform */
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 101405c:	e3500001 	cmp	r0, #1
	InstancePtr->Platform = XGetPlatform_Info();
 1014060:	e5840014 	str	r0, [r4, #20]
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1014064:	0a00002b 	beq	1014118 <XGpioPs_CfgInitialize+0x104>
		 *	142 - 173, Bank 5
		 */
		InstancePtr->MaxPinNum = (u32)174;
		InstancePtr->MaxBanks = (u8)6;
	}
        else if (InstancePtr->Platform == (u32)XPLAT_VERSAL)
 1014068:	e3500006 	cmp	r0, #6
 101406c:	0a00002e 	beq	101412c <XGpioPs_CfgInitialize+0x118>
		 *	0 - 31,  Bank 0
		 *	32 - 53, Bank 1
		 *	54 - 85, Bank 2
		 *	86 - 117, Bank 3
		 */
		InstancePtr->MaxPinNum = (u32)118;
 1014070:	e3a02076 	mov	r2, #118	; 0x76
		InstancePtr->MaxBanks = (u8)4;
 1014074:	e3a03004 	mov	r3, #4
		InstancePtr->MaxPinNum = (u32)118;
 1014078:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)4;
 101407c:	e5c4301c 	strb	r3, [r4, #28]
{
 1014080:	e3a02000 	mov	r2, #0
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1014084:	e3e0c000 	mvn	ip, #0
 1014088:	e1a03002 	mov	r3, r2
 101408c:	ea000008 	b	10140b4 <XGpioPs_CfgInitialize+0xa0>

                       }
                }
                else
                {
		XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014090:	e5941004 	ldr	r1, [r4, #4]
 1014094:	e2811f85 	add	r1, r1, #532	; 0x214
 1014098:	e781c303 	str	ip, [r1, r3, lsl #6]
 101409c:	e2822001 	add	r2, r2, #1
	for (i=(u8)0U;i<InstancePtr->MaxBanks;i++) {
 10140a0:	e5d4101c 	ldrb	r1, [r4, #28]
 10140a4:	e6ef3072 	uxtb	r3, r2
 10140a8:	e1510003 	cmp	r1, r3
 10140ac:	9a00000c 	bls	10140e4 <XGpioPs_CfgInitialize+0xd0>
 10140b0:	e5940014 	ldr	r0, [r4, #20]
                if (InstancePtr->Platform == XPLAT_VERSAL){
 10140b4:	e3500006 	cmp	r0, #6
 10140b8:	1afffff4 	bne	1014090 <XGpioPs_CfgInitialize+0x7c>
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10140bc:	e5941020 	ldr	r1, [r4, #32]
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10140c0:	e2430001 	sub	r0, r3, #1
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10140c4:	e3510000 	cmp	r1, #0
 10140c8:	1a000002 	bne	10140d8 <XGpioPs_CfgInitialize+0xc4>
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10140cc:	e3500001 	cmp	r0, #1
 10140d0:	8affffee 	bhi	1014090 <XGpioPs_CfgInitialize+0x7c>
 10140d4:	eafffff0 	b	101409c <XGpioPs_CfgInitialize+0x88>
                                if(i==(u32)XGPIOPS_TWO)
 10140d8:	e3530002 	cmp	r3, #2
 10140dc:	1affffeb 	bne	1014090 <XGpioPs_CfgInitialize+0x7c>
 10140e0:	eaffffed 	b	101409c <XGpioPs_CfgInitialize+0x88>
					  XGPIOPS_INTDIS_OFFSET, 0xFFFFFFFFU);
                }
	}

	/* Indicate the component is now ready to use. */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10140e4:	e3013111 	movw	r3, #4369	; 0x1111
 10140e8:	e3413111 	movt	r3, #4369	; 0x1111
 10140ec:	e5843008 	str	r3, [r4, #8]

	return Status;
}
 10140f0:	e3a00000 	mov	r0, #0
 10140f4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 10140f8:	e30a014c 	movw	r0, #41292	; 0xa14c
 10140fc:	e3a01068 	mov	r1, #104	; 0x68
 1014100:	e3400106 	movt	r0, #262	; 0x106
 1014104:	eb000d8d 	bl	1017740 <Xil_Assert>
 1014108:	e3a03001 	mov	r3, #1
}
 101410c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1014110:	e5853000 	str	r3, [r5]
}
 1014114:	e8bd8070 	pop	{r4, r5, r6, pc}
		InstancePtr->MaxPinNum = (u32)174;
 1014118:	e3a020ae 	mov	r2, #174	; 0xae
		InstancePtr->MaxBanks = (u8)6;
 101411c:	e3a03006 	mov	r3, #6
		InstancePtr->MaxPinNum = (u32)174;
 1014120:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)6;
 1014124:	e5c4301c 	strb	r3, [r4, #28]
 1014128:	eaffffd4 	b	1014080 <XGpioPs_CfgInitialize+0x6c>
                if(InstancePtr->PmcGpio == (u32)FALSE)
 101412c:	e5943020 	ldr	r3, [r4, #32]
 1014130:	e3530000 	cmp	r3, #0
                        InstancePtr->MaxPinNum = (u32)58;
 1014134:	03a0203a 	moveq	r2, #58	; 0x3a
                        InstancePtr->MaxBanks = (u8)4;
 1014138:	03a03004 	moveq	r3, #4
                        InstancePtr->MaxPinNum = (u32)116;
 101413c:	13a02074 	movne	r2, #116	; 0x74
                        InstancePtr->MaxBanks = (u8)5;
 1014140:	13a03005 	movne	r3, #5
                        InstancePtr->MaxPinNum = (u32)116;
 1014144:	e5842018 	str	r2, [r4, #24]
                        InstancePtr->MaxBanks = (u8)5;
 1014148:	e5c4301c 	strb	r3, [r4, #28]
 101414c:	eaffffcb 	b	1014080 <XGpioPs_CfgInitialize+0x6c>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014150:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014154:	e3a01066 	mov	r1, #102	; 0x66
 1014158:	e3400106 	movt	r0, #262	; 0x106
 101415c:	eb000d77 	bl	1017740 <Xil_Assert>
 1014160:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014164:	e3a02001 	mov	r2, #1
 1014168:	e3403146 	movt	r3, #326	; 0x146
 101416c:	e5832000 	str	r2, [r3]
 1014170:	eaffffde 	b	10140f0 <XGpioPs_CfgInitialize+0xdc>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1014174:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014178:	e3a01067 	mov	r1, #103	; 0x67
 101417c:	e3400106 	movt	r0, #262	; 0x106
 1014180:	eb000d6e 	bl	1017740 <Xil_Assert>
 1014184:	e3a03001 	mov	r3, #1
 1014188:	e5853000 	str	r3, [r5]
 101418c:	eaffffd7 	b	10140f0 <XGpioPs_CfgInitialize+0xdc>

01014190 <XGpioPs_Read>:
* @note		This function is used for reading the state of all the GPIO pins
*		of specified bank.
*
*****************************************************************************/
u32 XGpioPs_Read(const XGpioPs *InstancePtr, u8 Bank)
{
 1014190:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014194:	e2506000 	subs	r6, r0, #0
 1014198:	0a00001f 	beq	101421c <XGpioPs_Read+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101419c:	e5962008 	ldr	r2, [r6, #8]
 10141a0:	e3013111 	movw	r3, #4369	; 0x1111
 10141a4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10141a8:	e3055f40 	movw	r5, #24384	; 0x5f40
 10141ac:	e3405146 	movt	r5, #326	; 0x146
 10141b0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10141b4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10141b8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10141bc:	1a000006 	bne	10141dc <XGpioPs_Read+0x4c>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10141c0:	e5d6301c 	ldrb	r3, [r6, #28]
 10141c4:	e1530001 	cmp	r3, r1
 10141c8:	9a00000b 	bls	10141fc <XGpioPs_Read+0x6c>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10141cc:	e5963004 	ldr	r3, [r6, #4]
 10141d0:	e2811018 	add	r1, r1, #24
	return *(volatile u32 *) Addr;
 10141d4:	e7930101 	ldr	r0, [r3, r1, lsl #2]
 10141d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10141dc:	e30a014c 	movw	r0, #41292	; 0xa14c
 10141e0:	e3a010e0 	mov	r1, #224	; 0xe0
 10141e4:	e3400106 	movt	r0, #262	; 0x106
 10141e8:	eb000d54 	bl	1017740 <Xil_Assert>
 10141ec:	e3a03001 	mov	r3, #1
 10141f0:	e1a00004 	mov	r0, r4
 10141f4:	e5853000 	str	r3, [r5]
 10141f8:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10141fc:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014200:	e3a010e1 	mov	r1, #225	; 0xe1
 1014204:	e3400106 	movt	r0, #262	; 0x106
 1014208:	eb000d4c 	bl	1017740 <Xil_Assert>
 101420c:	e3a03001 	mov	r3, #1
 1014210:	e1a00004 	mov	r0, r4
 1014214:	e5853000 	str	r3, [r5]
				 ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
				 XGPIOPS_DATA_RO_OFFSET);
}
 1014218:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101421c:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014220:	e3a010df 	mov	r1, #223	; 0xdf
 1014224:	e3400106 	movt	r0, #262	; 0x106
 1014228:	eb000d44 	bl	1017740 <Xil_Assert>
 101422c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014230:	e3a02001 	mov	r2, #1
 1014234:	e3403146 	movt	r3, #326	; 0x146
 1014238:	e1a00006 	mov	r0, r6
 101423c:	e5832000 	str	r2, [r3]
 1014240:	e8bd8070 	pop	{r4, r5, r6, pc}

01014244 <XGpioPs_Write>:
*		the bank. The previous state of the pins is not maintained.
*
*****************************************************************************/
void XGpioPs_Write(const XGpioPs *InstancePtr, u8 Bank, u32 Data)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1014244:	e3500000 	cmp	r0, #0
{
 1014248:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 101424c:	0a00001d 	beq	10142c8 <XGpioPs_Write+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014250:	e590c008 	ldr	ip, [r0, #8]
 1014254:	e3013111 	movw	r3, #4369	; 0x1111
 1014258:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101425c:	e3054f40 	movw	r4, #24384	; 0x5f40
 1014260:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014264:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014268:	e3a03000 	mov	r3, #0
 101426c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014270:	1a000006 	bne	1014290 <XGpioPs_Write+0x4c>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014274:	e5d0301c 	ldrb	r3, [r0, #28]
 1014278:	e1530001 	cmp	r3, r1
 101427c:	9a00000a 	bls	10142ac <XGpioPs_Write+0x68>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014280:	e5903004 	ldr	r3, [r0, #4]
 1014284:	e2811010 	add	r1, r1, #16
	*LocalAddr = Value;
 1014288:	e7832101 	str	r2, [r3, r1, lsl #2]
 101428c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014290:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014294:	e3001127 	movw	r1, #295	; 0x127
 1014298:	e3400106 	movt	r0, #262	; 0x106
 101429c:	eb000d27 	bl	1017740 <Xil_Assert>
 10142a0:	e3a03001 	mov	r3, #1
 10142a4:	e5843000 	str	r3, [r4]
 10142a8:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10142ac:	e30a014c 	movw	r0, #41292	; 0xa14c
 10142b0:	e3a01f4a 	mov	r1, #296	; 0x128
 10142b4:	e3400106 	movt	r0, #262	; 0x106
 10142b8:	eb000d20 	bl	1017740 <Xil_Assert>
 10142bc:	e3a03001 	mov	r3, #1
 10142c0:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
			  XGPIOPS_DATA_OFFSET, Data);
}
 10142c4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10142c8:	e30a014c 	movw	r0, #41292	; 0xa14c
 10142cc:	e3001126 	movw	r1, #294	; 0x126
 10142d0:	e3400106 	movt	r0, #262	; 0x106
 10142d4:	eb000d19 	bl	1017740 <Xil_Assert>
 10142d8:	e3053f40 	movw	r3, #24384	; 0x5f40
 10142dc:	e3a02001 	mov	r2, #1
 10142e0:	e3403146 	movt	r3, #326	; 0x146
 10142e4:	e5832000 	str	r2, [r3]
 10142e8:	e8bd8010 	pop	{r4, pc}

010142ec <XGpioPs_SetDirection>:
*		not maintained.
*
*****************************************************************************/
void XGpioPs_SetDirection(const XGpioPs *InstancePtr, u8 Bank, u32 Direction)
{
	Xil_AssertVoid(InstancePtr != NULL);
 10142ec:	e3500000 	cmp	r0, #0
{
 10142f0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10142f4:	0a00001e 	beq	1014374 <XGpioPs_SetDirection+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10142f8:	e590c008 	ldr	ip, [r0, #8]
 10142fc:	e3013111 	movw	r3, #4369	; 0x1111
 1014300:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014304:	e3054f40 	movw	r4, #24384	; 0x5f40
 1014308:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101430c:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014310:	e3a03000 	mov	r3, #0
 1014314:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014318:	1a000007 	bne	101433c <XGpioPs_SetDirection+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 101431c:	e5d0301c 	ldrb	r3, [r0, #28]
 1014320:	e1530001 	cmp	r3, r1
 1014324:	9a00000b 	bls	1014358 <XGpioPs_SetDirection+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014328:	e5900004 	ldr	r0, [r0, #4]
 101432c:	e3a03f81 	mov	r3, #516	; 0x204
 1014330:	e0831301 	add	r1, r3, r1, lsl #6
 1014334:	e7812000 	str	r2, [r1, r0]
 1014338:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101433c:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014340:	e3001186 	movw	r1, #390	; 0x186
 1014344:	e3400106 	movt	r0, #262	; 0x106
 1014348:	eb000cfc 	bl	1017740 <Xil_Assert>
 101434c:	e3a03001 	mov	r3, #1
 1014350:	e5843000 	str	r3, [r4]
 1014354:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014358:	e30a014c 	movw	r0, #41292	; 0xa14c
 101435c:	e3001187 	movw	r1, #391	; 0x187
 1014360:	e3400106 	movt	r0, #262	; 0x106
 1014364:	eb000cf5 	bl	1017740 <Xil_Assert>
 1014368:	e3a03001 	mov	r3, #1
 101436c:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_DIRM_OFFSET, Direction);
}
 1014370:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1014374:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014378:	e3001185 	movw	r1, #389	; 0x185
 101437c:	e3400106 	movt	r0, #262	; 0x106
 1014380:	eb000cee 	bl	1017740 <Xil_Assert>
 1014384:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014388:	e3a02001 	mov	r2, #1
 101438c:	e3403146 	movt	r3, #326	; 0x146
 1014390:	e5832000 	str	r2, [r3]
 1014394:	e8bd8010 	pop	{r4, pc}

01014398 <XGpioPs_GetDirection>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetDirection(const XGpioPs *InstancePtr, u8 Bank)
{
 1014398:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101439c:	e2506000 	subs	r6, r0, #0
 10143a0:	0a000020 	beq	1014428 <XGpioPs_GetDirection+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10143a4:	e5962008 	ldr	r2, [r6, #8]
 10143a8:	e3013111 	movw	r3, #4369	; 0x1111
 10143ac:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10143b0:	e3055f40 	movw	r5, #24384	; 0x5f40
 10143b4:	e3405146 	movt	r5, #326	; 0x146
 10143b8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10143bc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10143c0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10143c4:	1a000007 	bne	10143e8 <XGpioPs_GetDirection+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10143c8:	e5d6301c 	ldrb	r3, [r6, #28]
 10143cc:	e1530001 	cmp	r3, r1
 10143d0:	9a00000c 	bls	1014408 <XGpioPs_GetDirection+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10143d4:	e5962004 	ldr	r2, [r6, #4]
 10143d8:	e3a03f81 	mov	r3, #516	; 0x204
 10143dc:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 10143e0:	e7910002 	ldr	r0, [r1, r2]
 10143e4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10143e8:	e30a014c 	movw	r0, #41292	; 0xa14c
 10143ec:	e30011d5 	movw	r1, #469	; 0x1d5
 10143f0:	e3400106 	movt	r0, #262	; 0x106
 10143f4:	eb000cd1 	bl	1017740 <Xil_Assert>
 10143f8:	e3a03001 	mov	r3, #1
 10143fc:	e1a00004 	mov	r0, r4
 1014400:	e5853000 	str	r3, [r5]
 1014404:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1014408:	e30a014c 	movw	r0, #41292	; 0xa14c
 101440c:	e30011d6 	movw	r1, #470	; 0x1d6
 1014410:	e3400106 	movt	r0, #262	; 0x106
 1014414:	eb000cc9 	bl	1017740 <Xil_Assert>
 1014418:	e3a03001 	mov	r3, #1
 101441c:	e1a00004 	mov	r0, r4
 1014420:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_DIRM_OFFSET);
}
 1014424:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014428:	e30a014c 	movw	r0, #41292	; 0xa14c
 101442c:	e3a01f75 	mov	r1, #468	; 0x1d4
 1014430:	e3400106 	movt	r0, #262	; 0x106
 1014434:	eb000cc1 	bl	1017740 <Xil_Assert>
 1014438:	e3053f40 	movw	r3, #24384	; 0x5f40
 101443c:	e3a02001 	mov	r2, #1
 1014440:	e3403146 	movt	r3, #326	; 0x146
 1014444:	e1a00006 	mov	r0, r6
 1014448:	e5832000 	str	r2, [r3]
 101444c:	e8bd8070 	pop	{r4, r5, r6, pc}

01014450 <XGpioPs_SetOutputEnable>:
*		Enables is not maintained.
*
*****************************************************************************/
void XGpioPs_SetOutputEnable(const XGpioPs *InstancePtr, u8 Bank, u32 OpEnable)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1014450:	e3500000 	cmp	r0, #0
{
 1014454:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1014458:	0a00001e 	beq	10144d8 <XGpioPs_SetOutputEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101445c:	e590c008 	ldr	ip, [r0, #8]
 1014460:	e3013111 	movw	r3, #4369	; 0x1111
 1014464:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014468:	e3054f40 	movw	r4, #24384	; 0x5f40
 101446c:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014470:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014474:	e3a03000 	mov	r3, #0
 1014478:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101447c:	1a000007 	bne	10144a0 <XGpioPs_SetOutputEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014480:	e5d0301c 	ldrb	r3, [r0, #28]
 1014484:	e1530001 	cmp	r3, r1
 1014488:	9a00000b 	bls	10144bc <XGpioPs_SetOutputEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 101448c:	e5900004 	ldr	r0, [r0, #4]
 1014490:	e3a03f82 	mov	r3, #520	; 0x208
 1014494:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1014498:	e7812000 	str	r2, [r1, r0]
 101449c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10144a0:	e30a014c 	movw	r0, #41292	; 0xa14c
 10144a4:	e3a01e22 	mov	r1, #544	; 0x220
 10144a8:	e3400106 	movt	r0, #262	; 0x106
 10144ac:	eb000ca3 	bl	1017740 <Xil_Assert>
 10144b0:	e3a03001 	mov	r3, #1
 10144b4:	e5843000 	str	r3, [r4]
 10144b8:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10144bc:	e30a014c 	movw	r0, #41292	; 0xa14c
 10144c0:	e3001221 	movw	r1, #545	; 0x221
 10144c4:	e3400106 	movt	r0, #262	; 0x106
 10144c8:	eb000c9c 	bl	1017740 <Xil_Assert>
 10144cc:	e3a03001 	mov	r3, #1
 10144d0:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_OUTEN_OFFSET, OpEnable);
}
 10144d4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10144d8:	e30a014c 	movw	r0, #41292	; 0xa14c
 10144dc:	e300121f 	movw	r1, #543	; 0x21f
 10144e0:	e3400106 	movt	r0, #262	; 0x106
 10144e4:	eb000c95 	bl	1017740 <Xil_Assert>
 10144e8:	e3053f40 	movw	r3, #24384	; 0x5f40
 10144ec:	e3a02001 	mov	r2, #1
 10144f0:	e3403146 	movt	r3, #326	; 0x146
 10144f4:	e5832000 	str	r2, [r3]
 10144f8:	e8bd8010 	pop	{r4, pc}

010144fc <XGpioPs_GetOutputEnable>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetOutputEnable(const XGpioPs *InstancePtr, u8 Bank)
{
 10144fc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014500:	e2506000 	subs	r6, r0, #0
 1014504:	0a000020 	beq	101458c <XGpioPs_GetOutputEnable+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014508:	e5962008 	ldr	r2, [r6, #8]
 101450c:	e3013111 	movw	r3, #4369	; 0x1111
 1014510:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014514:	e3055f40 	movw	r5, #24384	; 0x5f40
 1014518:	e3405146 	movt	r5, #326	; 0x146
 101451c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014520:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014524:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014528:	1a000007 	bne	101454c <XGpioPs_GetOutputEnable+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 101452c:	e5d6301c 	ldrb	r3, [r6, #28]
 1014530:	e1530001 	cmp	r3, r1
 1014534:	9a00000c 	bls	101456c <XGpioPs_GetOutputEnable+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014538:	e5962004 	ldr	r2, [r6, #4]
 101453c:	e3a03f82 	mov	r3, #520	; 0x208
 1014540:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1014544:	e7910002 	ldr	r0, [r1, r2]
 1014548:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101454c:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014550:	e3a01f9d 	mov	r1, #628	; 0x274
 1014554:	e3400106 	movt	r0, #262	; 0x106
 1014558:	eb000c78 	bl	1017740 <Xil_Assert>
 101455c:	e3a03001 	mov	r3, #1
 1014560:	e1a00004 	mov	r0, r4
 1014564:	e5853000 	str	r3, [r5]
 1014568:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 101456c:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014570:	e3001275 	movw	r1, #629	; 0x275
 1014574:	e3400106 	movt	r0, #262	; 0x106
 1014578:	eb000c70 	bl	1017740 <Xil_Assert>
 101457c:	e3a03001 	mov	r3, #1
 1014580:	e1a00004 	mov	r0, r4
 1014584:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_OUTEN_OFFSET);
}
 1014588:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101458c:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014590:	e3001273 	movw	r1, #627	; 0x273
 1014594:	e3400106 	movt	r0, #262	; 0x106
 1014598:	eb000c68 	bl	1017740 <Xil_Assert>
 101459c:	e3053f40 	movw	r3, #24384	; 0x5f40
 10145a0:	e3a02001 	mov	r2, #1
 10145a4:	e3403146 	movt	r3, #326	; 0x146
 10145a8:	e1a00006 	mov	r0, r6
 10145ac:	e5832000 	str	r2, [r3]
 10145b0:	e8bd8070 	pop	{r4, r5, r6, pc}

010145b4 <XGpioPs_GetBankPin>:
#ifdef versal
void XGpioPs_GetBankPin(const XGpioPs *InstancePtr,u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#else
void XGpioPs_GetBankPin(u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#endif
{
 10145b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	u32 XGpioPsPinTable[6] = {0};
 10145b8:	e3a05000 	mov	r5, #0
{
 10145bc:	e24dd01c 	sub	sp, sp, #28
 10145c0:	e1a04000 	mov	r4, r0
 10145c4:	e1a06001 	mov	r6, r1
 10145c8:	e1a07002 	mov	r7, r2
	u32 XGpioPsPinTable[6] = {0};
 10145cc:	e58d5004 	str	r5, [sp, #4]
 10145d0:	e58d5000 	str	r5, [sp]
 10145d4:	e58d5008 	str	r5, [sp, #8]
 10145d8:	e58d500c 	str	r5, [sp, #12]
 10145dc:	e58d5010 	str	r5, [sp, #16]
 10145e0:	e58d5014 	str	r5, [sp, #20]
#ifdef versal
        u8 i=(u8)0;
#endif
	u32 Platform = XGetPlatform_Info();
 10145e4:	eb000eda 	bl	1018154 <XGetPlatform_Info>

	if (Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 10145e8:	e3500001 	cmp	r0, #1
 10145ec:	0a000022 	beq	101467c <XGpioPs_GetBankPin+0xc8>
                }

        }
#endif
        else {
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 10145f0:	e3a0201f 	mov	r2, #31
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 10145f4:	e3a03035 	mov	r3, #53	; 0x35
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */

		*BankNumber = 0U;
		while (*BankNumber < XGPIOPS_FOUR) {
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10145f8:	e354001f 	cmp	r4, #31
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 10145fc:	e58d2000 	str	r2, [sp]
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 1014600:	e58d3004 	str	r3, [sp, #4]
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
 1014604:	e3a02055 	mov	r2, #85	; 0x55
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */
 1014608:	e3a03075 	mov	r3, #117	; 0x75
 101460c:	e1cd20f8 	strd	r2, [sp, #8]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1014610:	9a000034 	bls	10146e8 <XGpioPs_GetBankPin+0x134>
 1014614:	e3540035 	cmp	r4, #53	; 0x35
				break;
			}
			(*BankNumber)++;
 1014618:	e3a03001 	mov	r3, #1
 101461c:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1014620:	9a000013 	bls	1014674 <XGpioPs_GetBankPin+0xc0>
 1014624:	e3540055 	cmp	r4, #85	; 0x55
			(*BankNumber)++;
 1014628:	e3a03002 	mov	r3, #2
 101462c:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1014630:	9a00000f 	bls	1014674 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1014634:	e3a03003 	mov	r3, #3
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1014638:	e3540075 	cmp	r4, #117	; 0x75
			(*BankNumber)++;
 101463c:	e5c63000 	strb	r3, [r6]
 1014640:	83a03004 	movhi	r3, #4
 1014644:	85c63000 	strbhi	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1014648:	9a000009 	bls	1014674 <XGpioPs_GetBankPin+0xc0>
        }
#endif

        else {
		*PinNumberInBank = (u8)((u32)PinNumber %
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 101464c:	e28d2018 	add	r2, sp, #24
		*PinNumberInBank = (u8)((u32)PinNumber %
 1014650:	e1a00004 	mov	r0, r4
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1014654:	e0823103 	add	r3, r2, r3, lsl #2
 1014658:	e513101c 	ldr	r1, [r3, #-28]	; 0xffffffe4
		*PinNumberInBank = (u8)((u32)PinNumber %
 101465c:	e2811001 	add	r1, r1, #1
 1014660:	fa0014bf 	blx	1019964 <__aeabi_uidivmod>
 1014664:	e6ef4071 	uxtb	r4, r1
 1014668:	e5c74000 	strb	r4, [r7]
        }
}
 101466c:	e28dd01c 	add	sp, sp, #28
 1014670:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1014674:	e5d63000 	ldrb	r3, [r6]
 1014678:	eafffff3 	b	101464c <XGpioPs_GetBankPin+0x98>
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 101467c:	e3540019 	cmp	r4, #25
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1014680:	e3a01019 	mov	r1, #25
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1014684:	e3a0304d 	mov	r3, #77	; 0x4d
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1014688:	e3a02033 	mov	r2, #51	; 0x33
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 101468c:	e58d1000 	str	r1, [sp]
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1014690:	e3a0c06d 	mov	ip, #109	; 0x6d
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1014694:	e3a0108d 	mov	r1, #141	; 0x8d
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1014698:	e58d3008 	str	r3, [sp, #8]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 101469c:	e3a030ad 	mov	r3, #173	; 0xad
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 10146a0:	e58d1010 	str	r1, [sp, #16]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 10146a4:	e58d3014 	str	r3, [sp, #20]
 10146a8:	828d1008 	addhi	r1, sp, #8
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 10146ac:	e58d2004 	str	r2, [sp, #4]
			(*BankNumber)++;
 10146b0:	83a03002 	movhi	r3, #2
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 10146b4:	e58dc00c 	str	ip, [sp, #12]
			(*BankNumber)++;
 10146b8:	85c60000 	strbhi	r0, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10146bc:	8a000001 	bhi	10146c8 <XGpioPs_GetBankPin+0x114>
 10146c0:	ea000008 	b	10146e8 <XGpioPs_GetBankPin+0x134>
 10146c4:	e4912004 	ldr	r2, [r1], #4
 10146c8:	e1540002 	cmp	r4, r2
 10146cc:	9affffe8 	bls	1014674 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 10146d0:	e5c63000 	strb	r3, [r6]
 10146d4:	e2833001 	add	r3, r3, #1
		while (*BankNumber < XGPIOPS_SIX) {
 10146d8:	e3530007 	cmp	r3, #7
 10146dc:	1afffff8 	bne	10146c4 <XGpioPs_GetBankPin+0x110>
 10146e0:	e3a03006 	mov	r3, #6
 10146e4:	eaffffd8 	b	101464c <XGpioPs_GetBankPin+0x98>
		*BankNumber = 0U;
 10146e8:	e5c65000 	strb	r5, [r6]
	if (*BankNumber == (u8)0) {
 10146ec:	eaffffdd 	b	1014668 <XGpioPs_GetBankPin+0xb4>

010146f0 <XGpioPs_ReadPin>:
{
 10146f0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10146f4:	e2506000 	subs	r6, r0, #0
{
 10146f8:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10146fc:	0a00002a 	beq	10147ac <XGpioPs_ReadPin+0xbc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014700:	e5962008 	ldr	r2, [r6, #8]
 1014704:	e3013111 	movw	r3, #4369	; 0x1111
 1014708:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101470c:	e3055f40 	movw	r5, #24384	; 0x5f40
 1014710:	e3405146 	movt	r5, #326	; 0x146
 1014714:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014718:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101471c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014720:	1a000018 	bne	1014788 <XGpioPs_ReadPin+0x98>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1014724:	e5963018 	ldr	r3, [r6, #24]
 1014728:	e1530001 	cmp	r3, r1
 101472c:	9a00000c 	bls	1014764 <XGpioPs_ReadPin+0x74>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014730:	e6ef0071 	uxtb	r0, r1
 1014734:	e28d2007 	add	r2, sp, #7
 1014738:	e28d1006 	add	r1, sp, #6
 101473c:	ebffff9c 	bl	10145b4 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014740:	e5dd3006 	ldrb	r3, [sp, #6]
 1014744:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1014748:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 101474c:	e2833018 	add	r3, r3, #24
 1014750:	e7920103 	ldr	r0, [r2, r3, lsl #2]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1014754:	e1a04430 	lsr	r4, r0, r4
 1014758:	e2040001 	and	r0, r4, #1
}
 101475c:	e28dd008 	add	sp, sp, #8
 1014760:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1014764:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014768:	e3001106 	movw	r1, #262	; 0x106
 101476c:	e3400106 	movt	r0, #262	; 0x106
 1014770:	eb000bf2 	bl	1017740 <Xil_Assert>
 1014774:	e3a03001 	mov	r3, #1
 1014778:	e1a00004 	mov	r0, r4
 101477c:	e5853000 	str	r3, [r5]
}
 1014780:	e28dd008 	add	sp, sp, #8
 1014784:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014788:	e30a014c 	movw	r0, #41292	; 0xa14c
 101478c:	e3001105 	movw	r1, #261	; 0x105
 1014790:	e3400106 	movt	r0, #262	; 0x106
 1014794:	eb000be9 	bl	1017740 <Xil_Assert>
 1014798:	e3a03001 	mov	r3, #1
 101479c:	e1a00004 	mov	r0, r4
 10147a0:	e5853000 	str	r3, [r5]
}
 10147a4:	e28dd008 	add	sp, sp, #8
 10147a8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10147ac:	e30a014c 	movw	r0, #41292	; 0xa14c
 10147b0:	e3a01f41 	mov	r1, #260	; 0x104
 10147b4:	e3400106 	movt	r0, #262	; 0x106
 10147b8:	eb000be0 	bl	1017740 <Xil_Assert>
 10147bc:	e3053f40 	movw	r3, #24384	; 0x5f40
 10147c0:	e3a02001 	mov	r2, #1
 10147c4:	e3403146 	movt	r3, #326	; 0x146
 10147c8:	e1a00006 	mov	r0, r6
 10147cc:	e5832000 	str	r2, [r3]
 10147d0:	eaffffe1 	b	101475c <XGpioPs_ReadPin+0x6c>

010147d4 <XGpioPs_WritePin>:
{
 10147d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10147d8:	e2505000 	subs	r5, r0, #0
{
 10147dc:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 10147e0:	0a000032 	beq	10148b0 <XGpioPs_WritePin+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10147e4:	e5953008 	ldr	r3, [r5, #8]
 10147e8:	e1a07002 	mov	r7, r2
 10147ec:	e3012111 	movw	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10147f0:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10147f4:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10147f8:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10147fc:	e1530002 	cmp	r3, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1014800:	e3a06000 	mov	r6, #0
 1014804:	e5846000 	str	r6, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014808:	1a000020 	bne	1014890 <XGpioPs_WritePin+0xbc>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 101480c:	e5953018 	ldr	r3, [r5, #24]
 1014810:	e1530001 	cmp	r3, r1
 1014814:	9a000015 	bls	1014870 <XGpioPs_WritePin+0x9c>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014818:	e6ef0071 	uxtb	r0, r1
 101481c:	e28d2007 	add	r2, sp, #7
 1014820:	e28d1006 	add	r1, sp, #6
 1014824:	ebffff62 	bl	10145b4 <XGpioPs_GetBankPin>
	if (PinNumber > 15U) {
 1014828:	e5dd3007 	ldrb	r3, [sp, #7]
 101482c:	e353000f 	cmp	r3, #15
		PinNumber -= (u8)16;
 1014830:	82433010 	subhi	r3, r3, #16
		RegOffset = XGPIOPS_DATA_MSW_OFFSET;
 1014834:	83a06004 	movhi	r6, #4
		PinNumber -= (u8)16;
 1014838:	86ef3073 	uxtbhi	r3, r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 101483c:	e5952004 	ldr	r2, [r5, #4]
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1014840:	e3a01000 	mov	r1, #0
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014844:	e5dd0006 	ldrb	r0, [sp, #6]
	DataVar &= (u32)0x01;
 1014848:	e2077001 	and	r7, r7, #1
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 101484c:	e34f1fff 	movt	r1, #65535	; 0xffff
 1014850:	e3a0c001 	mov	ip, #1
 1014854:	e1811317 	orr	r1, r1, r7, lsl r3
 1014858:	e2833010 	add	r3, r3, #16
 101485c:	e1c1331c 	bic	r3, r1, ip, lsl r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014860:	e0822180 	add	r2, r2, r0, lsl #3
	*LocalAddr = Value;
 1014864:	e7823006 	str	r3, [r2, r6]
}
 1014868:	e28dd00c 	add	sp, sp, #12
 101486c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014870:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014874:	e3001151 	movw	r1, #337	; 0x151
 1014878:	e3400106 	movt	r0, #262	; 0x106
 101487c:	eb000baf 	bl	1017740 <Xil_Assert>
 1014880:	e3a03001 	mov	r3, #1
 1014884:	e5843000 	str	r3, [r4]
}
 1014888:	e28dd00c 	add	sp, sp, #12
 101488c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014890:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014894:	e3a01e15 	mov	r1, #336	; 0x150
 1014898:	e3400106 	movt	r0, #262	; 0x106
 101489c:	eb000ba7 	bl	1017740 <Xil_Assert>
 10148a0:	e3a03001 	mov	r3, #1
 10148a4:	e5843000 	str	r3, [r4]
}
 10148a8:	e28dd00c 	add	sp, sp, #12
 10148ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10148b0:	e30a014c 	movw	r0, #41292	; 0xa14c
 10148b4:	e300114f 	movw	r1, #335	; 0x14f
 10148b8:	e3400106 	movt	r0, #262	; 0x106
 10148bc:	eb000b9f 	bl	1017740 <Xil_Assert>
 10148c0:	e3053f40 	movw	r3, #24384	; 0x5f40
 10148c4:	e3a02001 	mov	r2, #1
 10148c8:	e3403146 	movt	r3, #326	; 0x146
 10148cc:	e5832000 	str	r2, [r3]
 10148d0:	eaffffec 	b	1014888 <XGpioPs_WritePin+0xb4>

010148d4 <XGpioPs_SetDirectionPin>:
{
 10148d4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10148d8:	e2505000 	subs	r5, r0, #0
{
 10148dc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 10148e0:	0a00003b 	beq	10149d4 <XGpioPs_SetDirectionPin+0x100>
 10148e4:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10148e8:	e5952008 	ldr	r2, [r5, #8]
 10148ec:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10148f0:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10148f4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10148f8:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10148fc:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014900:	e3a03000 	mov	r3, #0
 1014904:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014908:	1a000015 	bne	1014964 <XGpioPs_SetDirectionPin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 101490c:	e5953018 	ldr	r3, [r5, #24]
 1014910:	e1530001 	cmp	r3, r1
 1014914:	9a000026 	bls	10149b4 <XGpioPs_SetDirectionPin+0xe0>
	Xil_AssertVoid(Direction <= (u32)1);
 1014918:	e3560001 	cmp	r6, #1
 101491c:	8a000018 	bhi	1014984 <XGpioPs_SetDirectionPin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014920:	e6ef0071 	uxtb	r0, r1
 1014924:	e28d2007 	add	r2, sp, #7
 1014928:	e28d1006 	add	r1, sp, #6
 101492c:	ebffff20 	bl	10145b4 <XGpioPs_GetBankPin>
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014930:	e5dd2006 	ldrb	r2, [sp, #6]
 1014934:	e3a03f81 	mov	r3, #516	; 0x204
 1014938:	e5951004 	ldr	r1, [r5, #4]
	if (Direction!=(u32)0) { /*  Output Direction */
 101493c:	e3560000 	cmp	r6, #0
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014940:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1014944:	e7932001 	ldr	r2, [r3, r1]
	if (Direction!=(u32)0) { /*  Output Direction */
 1014948:	1a000015 	bne	10149a4 <XGpioPs_SetDirectionPin+0xd0>
		DirModeReg &= ~ ((u32)1 << (u32)PinNumber);
 101494c:	e5dd0007 	ldrb	r0, [sp, #7]
 1014950:	e3a0c001 	mov	ip, #1
 1014954:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1014958:	e7832001 	str	r2, [r3, r1]
}
 101495c:	e28dd008 	add	sp, sp, #8
 1014960:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014964:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014968:	e30011aa 	movw	r1, #426	; 0x1aa
 101496c:	e3400106 	movt	r0, #262	; 0x106
 1014970:	eb000b72 	bl	1017740 <Xil_Assert>
 1014974:	e3a03001 	mov	r3, #1
 1014978:	e5843000 	str	r3, [r4]
}
 101497c:	e28dd008 	add	sp, sp, #8
 1014980:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Direction <= (u32)1);
 1014984:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014988:	e3a01f6b 	mov	r1, #428	; 0x1ac
 101498c:	e3400106 	movt	r0, #262	; 0x106
 1014990:	eb000b6a 	bl	1017740 <Xil_Assert>
 1014994:	e3a03001 	mov	r3, #1
 1014998:	e5843000 	str	r3, [r4]
}
 101499c:	e28dd008 	add	sp, sp, #8
 10149a0:	e8bd8070 	pop	{r4, r5, r6, pc}
		DirModeReg |= ((u32)1 << (u32)PinNumber);
 10149a4:	e5dd0007 	ldrb	r0, [sp, #7]
 10149a8:	e3a0c001 	mov	ip, #1
 10149ac:	e182201c 	orr	r2, r2, ip, lsl r0
 10149b0:	eaffffe8 	b	1014958 <XGpioPs_SetDirectionPin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10149b4:	e30a014c 	movw	r0, #41292	; 0xa14c
 10149b8:	e30011ab 	movw	r1, #427	; 0x1ab
 10149bc:	e3400106 	movt	r0, #262	; 0x106
 10149c0:	eb000b5e 	bl	1017740 <Xil_Assert>
 10149c4:	e3a03001 	mov	r3, #1
 10149c8:	e5843000 	str	r3, [r4]
}
 10149cc:	e28dd008 	add	sp, sp, #8
 10149d0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10149d4:	e30a014c 	movw	r0, #41292	; 0xa14c
 10149d8:	e30011a9 	movw	r1, #425	; 0x1a9
 10149dc:	e3400106 	movt	r0, #262	; 0x106
 10149e0:	eb000b56 	bl	1017740 <Xil_Assert>
 10149e4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10149e8:	e3a02001 	mov	r2, #1
 10149ec:	e3403146 	movt	r3, #326	; 0x146
 10149f0:	e5832000 	str	r2, [r3]
 10149f4:	eaffffe0 	b	101497c <XGpioPs_SetDirectionPin+0xa8>

010149f8 <XGpioPs_GetDirectionPin>:
{
 10149f8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10149fc:	e2506000 	subs	r6, r0, #0
{
 1014a00:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014a04:	0a00002b 	beq	1014ab8 <XGpioPs_GetDirectionPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014a08:	e5962008 	ldr	r2, [r6, #8]
 1014a0c:	e3013111 	movw	r3, #4369	; 0x1111
 1014a10:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014a14:	e3055f40 	movw	r5, #24384	; 0x5f40
 1014a18:	e3405146 	movt	r5, #326	; 0x146
 1014a1c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014a20:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014a24:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014a28:	1a000019 	bne	1014a94 <XGpioPs_GetDirectionPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1014a2c:	e5963018 	ldr	r3, [r6, #24]
 1014a30:	e1530001 	cmp	r3, r1
 1014a34:	9a00000d 	bls	1014a70 <XGpioPs_GetDirectionPin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014a38:	e6ef0071 	uxtb	r0, r1
 1014a3c:	e28d2007 	add	r2, sp, #7
 1014a40:	e28d1006 	add	r1, sp, #6
 1014a44:	ebfffeda 	bl	10145b4 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014a48:	e5dd1006 	ldrb	r1, [sp, #6]
 1014a4c:	e3a03f81 	mov	r3, #516	; 0x204
 1014a50:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1014a54:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014a58:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1014a5c:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1014a60:	e1a04430 	lsr	r4, r0, r4
 1014a64:	e2040001 	and	r0, r4, #1
}
 1014a68:	e28dd008 	add	sp, sp, #8
 1014a6c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1014a70:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014a74:	e3a01f7f 	mov	r1, #508	; 0x1fc
 1014a78:	e3400106 	movt	r0, #262	; 0x106
 1014a7c:	eb000b2f 	bl	1017740 <Xil_Assert>
 1014a80:	e3a03001 	mov	r3, #1
 1014a84:	e1a00004 	mov	r0, r4
 1014a88:	e5853000 	str	r3, [r5]
}
 1014a8c:	e28dd008 	add	sp, sp, #8
 1014a90:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014a94:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014a98:	e30011fb 	movw	r1, #507	; 0x1fb
 1014a9c:	e3400106 	movt	r0, #262	; 0x106
 1014aa0:	eb000b26 	bl	1017740 <Xil_Assert>
 1014aa4:	e3a03001 	mov	r3, #1
 1014aa8:	e1a00004 	mov	r0, r4
 1014aac:	e5853000 	str	r3, [r5]
}
 1014ab0:	e28dd008 	add	sp, sp, #8
 1014ab4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014ab8:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014abc:	e30011fa 	movw	r1, #506	; 0x1fa
 1014ac0:	e3400106 	movt	r0, #262	; 0x106
 1014ac4:	eb000b1d 	bl	1017740 <Xil_Assert>
 1014ac8:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014acc:	e3a02001 	mov	r2, #1
 1014ad0:	e3403146 	movt	r3, #326	; 0x146
 1014ad4:	e1a00006 	mov	r0, r6
 1014ad8:	e5832000 	str	r2, [r3]
 1014adc:	eaffffe1 	b	1014a68 <XGpioPs_GetDirectionPin+0x70>

01014ae0 <XGpioPs_SetOutputEnablePin>:
{
 1014ae0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1014ae4:	e2505000 	subs	r5, r0, #0
{
 1014ae8:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1014aec:	0a00003b 	beq	1014be0 <XGpioPs_SetOutputEnablePin+0x100>
 1014af0:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014af4:	e5952008 	ldr	r2, [r5, #8]
 1014af8:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014afc:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014b00:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014b04:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014b08:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014b0c:	e3a03000 	mov	r3, #0
 1014b10:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014b14:	1a000015 	bne	1014b70 <XGpioPs_SetOutputEnablePin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014b18:	e5953018 	ldr	r3, [r5, #24]
 1014b1c:	e1530001 	cmp	r3, r1
 1014b20:	9a000026 	bls	1014bc0 <XGpioPs_SetOutputEnablePin+0xe0>
	Xil_AssertVoid(OpEnable <= (u32)1);
 1014b24:	e3560001 	cmp	r6, #1
 1014b28:	8a000018 	bhi	1014b90 <XGpioPs_SetOutputEnablePin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014b2c:	e6ef0071 	uxtb	r0, r1
 1014b30:	e28d2007 	add	r2, sp, #7
 1014b34:	e28d1006 	add	r1, sp, #6
 1014b38:	ebfffe9d 	bl	10145b4 <XGpioPs_GetBankPin>
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014b3c:	e5dd2006 	ldrb	r2, [sp, #6]
 1014b40:	e3a03f82 	mov	r3, #520	; 0x208
 1014b44:	e5951004 	ldr	r1, [r5, #4]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1014b48:	e3560000 	cmp	r6, #0
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014b4c:	e0833302 	add	r3, r3, r2, lsl #6
 1014b50:	e7932001 	ldr	r2, [r3, r1]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1014b54:	1a000015 	bne	1014bb0 <XGpioPs_SetOutputEnablePin+0xd0>
		OpEnableReg &= ~ ((u32)1 << (u32)PinNumber);
 1014b58:	e5dd0007 	ldrb	r0, [sp, #7]
 1014b5c:	e3a0c001 	mov	ip, #1
 1014b60:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1014b64:	e7832001 	str	r2, [r3, r1]
}
 1014b68:	e28dd008 	add	sp, sp, #8
 1014b6c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014b70:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014b74:	e3a01f92 	mov	r1, #584	; 0x248
 1014b78:	e3400106 	movt	r0, #262	; 0x106
 1014b7c:	eb000aef 	bl	1017740 <Xil_Assert>
 1014b80:	e3a03001 	mov	r3, #1
 1014b84:	e5843000 	str	r3, [r4]
}
 1014b88:	e28dd008 	add	sp, sp, #8
 1014b8c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(OpEnable <= (u32)1);
 1014b90:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014b94:	e300124a 	movw	r1, #586	; 0x24a
 1014b98:	e3400106 	movt	r0, #262	; 0x106
 1014b9c:	eb000ae7 	bl	1017740 <Xil_Assert>
 1014ba0:	e3a03001 	mov	r3, #1
 1014ba4:	e5843000 	str	r3, [r4]
}
 1014ba8:	e28dd008 	add	sp, sp, #8
 1014bac:	e8bd8070 	pop	{r4, r5, r6, pc}
		OpEnableReg |= ((u32)1 << (u32)PinNumber);
 1014bb0:	e5dd0007 	ldrb	r0, [sp, #7]
 1014bb4:	e3a0c001 	mov	ip, #1
 1014bb8:	e182201c 	orr	r2, r2, ip, lsl r0
 1014bbc:	eaffffe8 	b	1014b64 <XGpioPs_SetOutputEnablePin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014bc0:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014bc4:	e3001249 	movw	r1, #585	; 0x249
 1014bc8:	e3400106 	movt	r0, #262	; 0x106
 1014bcc:	eb000adb 	bl	1017740 <Xil_Assert>
 1014bd0:	e3a03001 	mov	r3, #1
 1014bd4:	e5843000 	str	r3, [r4]
}
 1014bd8:	e28dd008 	add	sp, sp, #8
 1014bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1014be0:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014be4:	e3001247 	movw	r1, #583	; 0x247
 1014be8:	e3400106 	movt	r0, #262	; 0x106
 1014bec:	eb000ad3 	bl	1017740 <Xil_Assert>
 1014bf0:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014bf4:	e3a02001 	mov	r2, #1
 1014bf8:	e3403146 	movt	r3, #326	; 0x146
 1014bfc:	e5832000 	str	r2, [r3]
 1014c00:	eaffffe0 	b	1014b88 <XGpioPs_SetOutputEnablePin+0xa8>

01014c04 <XGpioPs_GetOutputEnablePin>:
{
 1014c04:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014c08:	e2506000 	subs	r6, r0, #0
{
 1014c0c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014c10:	0a00002b 	beq	1014cc4 <XGpioPs_GetOutputEnablePin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014c14:	e5962008 	ldr	r2, [r6, #8]
 1014c18:	e3013111 	movw	r3, #4369	; 0x1111
 1014c1c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014c20:	e3055f40 	movw	r5, #24384	; 0x5f40
 1014c24:	e3405146 	movt	r5, #326	; 0x146
 1014c28:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014c2c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014c30:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014c34:	1a000019 	bne	1014ca0 <XGpioPs_GetOutputEnablePin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1014c38:	e5963018 	ldr	r3, [r6, #24]
 1014c3c:	e1530001 	cmp	r3, r1
 1014c40:	9a00000d 	bls	1014c7c <XGpioPs_GetOutputEnablePin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014c44:	e6ef0071 	uxtb	r0, r1
 1014c48:	e28d2007 	add	r2, sp, #7
 1014c4c:	e28d1006 	add	r1, sp, #6
 1014c50:	ebfffe57 	bl	10145b4 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014c54:	e5dd1006 	ldrb	r1, [sp, #6]
 1014c58:	e3a03f82 	mov	r3, #520	; 0x208
 1014c5c:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1014c60:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1014c64:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1014c68:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1014c6c:	e1a04430 	lsr	r4, r0, r4
 1014c70:	e2040001 	and	r0, r4, #1
}
 1014c74:	e28dd008 	add	sp, sp, #8
 1014c78:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1014c7c:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014c80:	e300129b 	movw	r1, #667	; 0x29b
 1014c84:	e3400106 	movt	r0, #262	; 0x106
 1014c88:	eb000aac 	bl	1017740 <Xil_Assert>
 1014c8c:	e3a03001 	mov	r3, #1
 1014c90:	e1a00004 	mov	r0, r4
 1014c94:	e5853000 	str	r3, [r5]
}
 1014c98:	e28dd008 	add	sp, sp, #8
 1014c9c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014ca0:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014ca4:	e300129a 	movw	r1, #666	; 0x29a
 1014ca8:	e3400106 	movt	r0, #262	; 0x106
 1014cac:	eb000aa3 	bl	1017740 <Xil_Assert>
 1014cb0:	e3a03001 	mov	r3, #1
 1014cb4:	e1a00004 	mov	r0, r4
 1014cb8:	e5853000 	str	r3, [r5]
}
 1014cbc:	e28dd008 	add	sp, sp, #8
 1014cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1014cc4:	e30a014c 	movw	r0, #41292	; 0xa14c
 1014cc8:	e3001299 	movw	r1, #665	; 0x299
 1014ccc:	e3400106 	movt	r0, #262	; 0x106
 1014cd0:	eb000a9a 	bl	1017740 <Xil_Assert>
 1014cd4:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014cd8:	e3a02001 	mov	r2, #1
 1014cdc:	e3403146 	movt	r3, #326	; 0x146
 1014ce0:	e1a00006 	mov	r0, r6
 1014ce4:	e5832000 	str	r2, [r3]
 1014ce8:	eaffffe1 	b	1014c74 <XGpioPs_GetOutputEnablePin+0x70>

01014cec <XGpioPs_LookupConfig>:
{
	XGpioPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XGPIOPS_NUM_INSTANCES; Index++) {
		if (XGpioPs_ConfigTable[Index].DeviceId == DeviceId) {
 1014cec:	e30a3548 	movw	r3, #42312	; 0xa548
 1014cf0:	e3403106 	movt	r3, #262	; 0x106
 1014cf4:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XGpioPs_Config *)CfgPtr;
}
 1014cf8:	e1520000 	cmp	r2, r0
 1014cfc:	01a00003 	moveq	r0, r3
 1014d00:	13a00000 	movne	r0, #0
 1014d04:	e12fff1e 	bx	lr

01014d08 <XGpioPs_IntrEnable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1014d08:	e3500000 	cmp	r0, #0
{
 1014d0c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1014d10:	0a00001e 	beq	1014d90 <XGpioPs_IntrEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014d14:	e590c008 	ldr	ip, [r0, #8]
 1014d18:	e3013111 	movw	r3, #4369	; 0x1111
 1014d1c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014d20:	e3054f40 	movw	r4, #24384	; 0x5f40
 1014d24:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014d28:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014d2c:	e3a03000 	mov	r3, #0
 1014d30:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014d34:	1a000007 	bne	1014d58 <XGpioPs_IntrEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014d38:	e5d0301c 	ldrb	r3, [r0, #28]
 1014d3c:	e1530001 	cmp	r3, r1
 1014d40:	9a00000b 	bls	1014d74 <XGpioPs_IntrEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014d44:	e5900004 	ldr	r0, [r0, #4]
 1014d48:	e3a03e21 	mov	r3, #528	; 0x210
 1014d4c:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1014d50:	e7812000 	str	r2, [r1, r0]
 1014d54:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014d58:	e30a0158 	movw	r0, #41304	; 0xa158
 1014d5c:	e3a01063 	mov	r1, #99	; 0x63
 1014d60:	e3400106 	movt	r0, #262	; 0x106
 1014d64:	eb000a75 	bl	1017740 <Xil_Assert>
 1014d68:	e3a03001 	mov	r3, #1
 1014d6c:	e5843000 	str	r3, [r4]
 1014d70:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014d74:	e30a0158 	movw	r0, #41304	; 0xa158
 1014d78:	e3a01064 	mov	r1, #100	; 0x64
 1014d7c:	e3400106 	movt	r0, #262	; 0x106
 1014d80:	eb000a6e 	bl	1017740 <Xil_Assert>
 1014d84:	e3a03001 	mov	r3, #1
 1014d88:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, Mask);
}
 1014d8c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1014d90:	e30a0158 	movw	r0, #41304	; 0xa158
 1014d94:	e3a01062 	mov	r1, #98	; 0x62
 1014d98:	e3400106 	movt	r0, #262	; 0x106
 1014d9c:	eb000a67 	bl	1017740 <Xil_Assert>
 1014da0:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014da4:	e3a02001 	mov	r2, #1
 1014da8:	e3403146 	movt	r3, #326	; 0x146
 1014dac:	e5832000 	str	r2, [r3]
 1014db0:	e8bd8010 	pop	{r4, pc}

01014db4 <XGpioPs_IntrEnablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1014db4:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1014db8:	e2505000 	subs	r5, r0, #0
{
 1014dbc:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1014dc0:	0a000029 	beq	1014e6c <XGpioPs_IntrEnablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014dc4:	e5950008 	ldr	r0, [r5, #8]
 1014dc8:	e3013111 	movw	r3, #4369	; 0x1111
 1014dcc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014dd0:	e3054f40 	movw	r4, #24384	; 0x5f40
 1014dd4:	e3404146 	movt	r4, #326	; 0x146
 1014dd8:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014ddc:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014de0:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014de4:	1a000018 	bne	1014e4c <XGpioPs_IntrEnablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014de8:	e5953018 	ldr	r3, [r5, #24]
 1014dec:	e1530001 	cmp	r3, r1
 1014df0:	9a00000d 	bls	1014e2c <XGpioPs_IntrEnablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014df4:	e6ef0071 	uxtb	r0, r1
 1014df8:	e28d2007 	add	r2, sp, #7
 1014dfc:	e28d1006 	add	r1, sp, #6
 1014e00:	ebfffdeb 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1014e04:	e5ddc007 	ldrb	ip, [sp, #7]
 1014e08:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014e0c:	e5dd0006 	ldrb	r0, [sp, #6]
 1014e10:	e3a03e21 	mov	r3, #528	; 0x210
 1014e14:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1014e18:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014e1c:	e0833300 	add	r3, r3, r0, lsl #6
 1014e20:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, IntrReg);
}
 1014e24:	e28dd00c 	add	sp, sp, #12
 1014e28:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014e2c:	e30a0158 	movw	r0, #41304	; 0xa158
 1014e30:	e3a01088 	mov	r1, #136	; 0x88
 1014e34:	e3400106 	movt	r0, #262	; 0x106
 1014e38:	eb000a40 	bl	1017740 <Xil_Assert>
 1014e3c:	e3a03001 	mov	r3, #1
 1014e40:	e5843000 	str	r3, [r4]
}
 1014e44:	e28dd00c 	add	sp, sp, #12
 1014e48:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014e4c:	e30a0158 	movw	r0, #41304	; 0xa158
 1014e50:	e3a01087 	mov	r1, #135	; 0x87
 1014e54:	e3400106 	movt	r0, #262	; 0x106
 1014e58:	eb000a38 	bl	1017740 <Xil_Assert>
 1014e5c:	e3a03001 	mov	r3, #1
 1014e60:	e5843000 	str	r3, [r4]
}
 1014e64:	e28dd00c 	add	sp, sp, #12
 1014e68:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1014e6c:	e30a0158 	movw	r0, #41304	; 0xa158
 1014e70:	e3a01086 	mov	r1, #134	; 0x86
 1014e74:	e3400106 	movt	r0, #262	; 0x106
 1014e78:	eb000a30 	bl	1017740 <Xil_Assert>
 1014e7c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014e80:	e3a02001 	mov	r2, #1
 1014e84:	e3403146 	movt	r3, #326	; 0x146
 1014e88:	e5832000 	str	r2, [r3]
 1014e8c:	eaffffe4 	b	1014e24 <XGpioPs_IntrEnablePin+0x70>

01014e90 <XGpioPs_IntrDisable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1014e90:	e3500000 	cmp	r0, #0
{
 1014e94:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1014e98:	0a00001e 	beq	1014f18 <XGpioPs_IntrDisable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014e9c:	e590c008 	ldr	ip, [r0, #8]
 1014ea0:	e3013111 	movw	r3, #4369	; 0x1111
 1014ea4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014ea8:	e3054f40 	movw	r4, #24384	; 0x5f40
 1014eac:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014eb0:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014eb4:	e3a03000 	mov	r3, #0
 1014eb8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014ebc:	1a000007 	bne	1014ee0 <XGpioPs_IntrDisable+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014ec0:	e5d0301c 	ldrb	r3, [r0, #28]
 1014ec4:	e1530001 	cmp	r3, r1
 1014ec8:	9a00000b 	bls	1014efc <XGpioPs_IntrDisable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014ecc:	e5900004 	ldr	r0, [r0, #4]
 1014ed0:	e3a03f85 	mov	r3, #532	; 0x214
 1014ed4:	e0831301 	add	r1, r3, r1, lsl #6
 1014ed8:	e7812000 	str	r2, [r1, r0]
 1014edc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014ee0:	e30a0158 	movw	r0, #41304	; 0xa158
 1014ee4:	e3a010ac 	mov	r1, #172	; 0xac
 1014ee8:	e3400106 	movt	r0, #262	; 0x106
 1014eec:	eb000a13 	bl	1017740 <Xil_Assert>
 1014ef0:	e3a03001 	mov	r3, #1
 1014ef4:	e5843000 	str	r3, [r4]
 1014ef8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1014efc:	e30a0158 	movw	r0, #41304	; 0xa158
 1014f00:	e3a010ad 	mov	r1, #173	; 0xad
 1014f04:	e3400106 	movt	r0, #262	; 0x106
 1014f08:	eb000a0c 	bl	1017740 <Xil_Assert>
 1014f0c:	e3a03001 	mov	r3, #1
 1014f10:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, Mask);
}
 1014f14:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1014f18:	e30a0158 	movw	r0, #41304	; 0xa158
 1014f1c:	e3a010ab 	mov	r1, #171	; 0xab
 1014f20:	e3400106 	movt	r0, #262	; 0x106
 1014f24:	eb000a05 	bl	1017740 <Xil_Assert>
 1014f28:	e3053f40 	movw	r3, #24384	; 0x5f40
 1014f2c:	e3a02001 	mov	r2, #1
 1014f30:	e3403146 	movt	r3, #326	; 0x146
 1014f34:	e5832000 	str	r2, [r3]
 1014f38:	e8bd8010 	pop	{r4, pc}

01014f3c <XGpioPs_IntrDisablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1014f3c:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1014f40:	e2505000 	subs	r5, r0, #0
{
 1014f44:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1014f48:	0a000029 	beq	1014ff4 <XGpioPs_IntrDisablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014f4c:	e5950008 	ldr	r0, [r5, #8]
 1014f50:	e3013111 	movw	r3, #4369	; 0x1111
 1014f54:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1014f58:	e3054f40 	movw	r4, #24384	; 0x5f40
 1014f5c:	e3404146 	movt	r4, #326	; 0x146
 1014f60:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014f64:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1014f68:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014f6c:	1a000018 	bne	1014fd4 <XGpioPs_IntrDisablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014f70:	e5953018 	ldr	r3, [r5, #24]
 1014f74:	e1530001 	cmp	r3, r1
 1014f78:	9a00000d 	bls	1014fb4 <XGpioPs_IntrDisablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1014f7c:	e6ef0071 	uxtb	r0, r1
 1014f80:	e28d2007 	add	r2, sp, #7
 1014f84:	e28d1006 	add	r1, sp, #6
 1014f88:	ebfffd89 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1014f8c:	e5ddc007 	ldrb	ip, [sp, #7]
 1014f90:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014f94:	e5dd0006 	ldrb	r0, [sp, #6]
 1014f98:	e3a03f85 	mov	r3, #532	; 0x214
 1014f9c:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1014fa0:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1014fa4:	e0833300 	add	r3, r3, r0, lsl #6
 1014fa8:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, IntrReg);
}
 1014fac:	e28dd00c 	add	sp, sp, #12
 1014fb0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1014fb4:	e30a0158 	movw	r0, #41304	; 0xa158
 1014fb8:	e3a010d1 	mov	r1, #209	; 0xd1
 1014fbc:	e3400106 	movt	r0, #262	; 0x106
 1014fc0:	eb0009de 	bl	1017740 <Xil_Assert>
 1014fc4:	e3a03001 	mov	r3, #1
 1014fc8:	e5843000 	str	r3, [r4]
}
 1014fcc:	e28dd00c 	add	sp, sp, #12
 1014fd0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1014fd4:	e30a0158 	movw	r0, #41304	; 0xa158
 1014fd8:	e3a010d0 	mov	r1, #208	; 0xd0
 1014fdc:	e3400106 	movt	r0, #262	; 0x106
 1014fe0:	eb0009d6 	bl	1017740 <Xil_Assert>
 1014fe4:	e3a03001 	mov	r3, #1
 1014fe8:	e5843000 	str	r3, [r4]
}
 1014fec:	e28dd00c 	add	sp, sp, #12
 1014ff0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1014ff4:	e30a0158 	movw	r0, #41304	; 0xa158
 1014ff8:	e3a010cf 	mov	r1, #207	; 0xcf
 1014ffc:	e3400106 	movt	r0, #262	; 0x106
 1015000:	eb0009ce 	bl	1017740 <Xil_Assert>
 1015004:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015008:	e3a02001 	mov	r2, #1
 101500c:	e3403146 	movt	r3, #326	; 0x146
 1015010:	e5832000 	str	r2, [r3]
 1015014:	eaffffe4 	b	1014fac <XGpioPs_IntrDisablePin+0x70>

01015018 <XGpioPs_IntrGetEnabled>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabled(const XGpioPs *InstancePtr, u8 Bank)
{
 1015018:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrMask;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101501c:	e2506000 	subs	r6, r0, #0
 1015020:	0a000021 	beq	10150ac <XGpioPs_IntrGetEnabled+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015024:	e5962008 	ldr	r2, [r6, #8]
 1015028:	e3013111 	movw	r3, #4369	; 0x1111
 101502c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015030:	e3055f40 	movw	r5, #24384	; 0x5f40
 1015034:	e3405146 	movt	r5, #326	; 0x146
 1015038:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101503c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015040:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015044:	1a000008 	bne	101506c <XGpioPs_IntrGetEnabled+0x54>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1015048:	e5d6301c 	ldrb	r3, [r6, #28]
 101504c:	e1530001 	cmp	r3, r1
 1015050:	9a00000d 	bls	101508c <XGpioPs_IntrGetEnabled+0x74>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	IntrMask = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015054:	e5962004 	ldr	r2, [r6, #4]
 1015058:	e3a03f83 	mov	r3, #524	; 0x20c
 101505c:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1015060:	e7914002 	ldr	r4, [r1, r2]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);
	return (~IntrMask);
 1015064:	e1e00004 	mvn	r0, r4
 1015068:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101506c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015070:	e3a010f6 	mov	r1, #246	; 0xf6
 1015074:	e3400106 	movt	r0, #262	; 0x106
 1015078:	eb0009b0 	bl	1017740 <Xil_Assert>
 101507c:	e3a03001 	mov	r3, #1
 1015080:	e1a00004 	mov	r0, r4
 1015084:	e5853000 	str	r3, [r5]
 1015088:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 101508c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015090:	e3a010f7 	mov	r1, #247	; 0xf7
 1015094:	e3400106 	movt	r0, #262	; 0x106
 1015098:	eb0009a8 	bl	1017740 <Xil_Assert>
 101509c:	e3a03001 	mov	r3, #1
 10150a0:	e1a00004 	mov	r0, r4
 10150a4:	e5853000 	str	r3, [r5]
}
 10150a8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10150ac:	e30a0158 	movw	r0, #41304	; 0xa158
 10150b0:	e3a010f5 	mov	r1, #245	; 0xf5
 10150b4:	e3400106 	movt	r0, #262	; 0x106
 10150b8:	eb0009a0 	bl	1017740 <Xil_Assert>
 10150bc:	e3053f40 	movw	r3, #24384	; 0x5f40
 10150c0:	e3a02001 	mov	r2, #1
 10150c4:	e3403146 	movt	r3, #326	; 0x146
 10150c8:	e1a00006 	mov	r0, r6
 10150cc:	e5832000 	str	r2, [r3]
 10150d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010150d4 <XGpioPs_IntrGetEnabledPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabledPin(const XGpioPs *InstancePtr, u32 Pin)
{
 10150d4:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10150d8:	e2506000 	subs	r6, r0, #0
{
 10150dc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10150e0:	0a00002b 	beq	1015194 <XGpioPs_IntrGetEnabledPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10150e4:	e5962008 	ldr	r2, [r6, #8]
 10150e8:	e3013111 	movw	r3, #4369	; 0x1111
 10150ec:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10150f0:	e3055f40 	movw	r5, #24384	; 0x5f40
 10150f4:	e3405146 	movt	r5, #326	; 0x146
 10150f8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10150fc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015100:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015104:	1a000019 	bne	1015170 <XGpioPs_IntrGetEnabledPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1015108:	e5963018 	ldr	r3, [r6, #24]
 101510c:	e1530001 	cmp	r3, r1
 1015110:	9a00000d 	bls	101514c <XGpioPs_IntrGetEnabledPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1015114:	e6ef0071 	uxtb	r0, r1
 1015118:	e28d2007 	add	r2, sp, #7
 101511c:	e28d1006 	add	r1, sp, #6
 1015120:	ebfffd23 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015124:	e5dd1006 	ldrb	r1, [sp, #6]
 1015128:	e3a03f83 	mov	r3, #524	; 0x20c
 101512c:	e5962004 	ldr	r2, [r6, #4]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1015130:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015134:	e0833301 	add	r3, r3, r1, lsl #6
 1015138:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 101513c:	e1e04430 	mvn	r4, r0, lsr r4
 1015140:	e2040001 	and	r0, r4, #1
}
 1015144:	e28dd008 	add	sp, sp, #8
 1015148:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 101514c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015150:	e300111f 	movw	r1, #287	; 0x11f
 1015154:	e3400106 	movt	r0, #262	; 0x106
 1015158:	eb000978 	bl	1017740 <Xil_Assert>
 101515c:	e3a03001 	mov	r3, #1
 1015160:	e1a00004 	mov	r0, r4
 1015164:	e5853000 	str	r3, [r5]
}
 1015168:	e28dd008 	add	sp, sp, #8
 101516c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015170:	e30a0158 	movw	r0, #41304	; 0xa158
 1015174:	e300111e 	movw	r1, #286	; 0x11e
 1015178:	e3400106 	movt	r0, #262	; 0x106
 101517c:	eb00096f 	bl	1017740 <Xil_Assert>
 1015180:	e3a03001 	mov	r3, #1
 1015184:	e1a00004 	mov	r0, r4
 1015188:	e5853000 	str	r3, [r5]
}
 101518c:	e28dd008 	add	sp, sp, #8
 1015190:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015194:	e30a0158 	movw	r0, #41304	; 0xa158
 1015198:	e300111d 	movw	r1, #285	; 0x11d
 101519c:	e3400106 	movt	r0, #262	; 0x106
 10151a0:	eb000966 	bl	1017740 <Xil_Assert>
 10151a4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10151a8:	e3a02001 	mov	r2, #1
 10151ac:	e3403146 	movt	r3, #326	; 0x146
 10151b0:	e1a00006 	mov	r0, r6
 10151b4:	e5832000 	str	r2, [r3]
 10151b8:	eaffffe1 	b	1015144 <XGpioPs_IntrGetEnabledPin+0x70>

010151bc <XGpioPs_IntrGetStatus>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatus(const XGpioPs *InstancePtr, u8 Bank)
{
 10151bc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10151c0:	e2506000 	subs	r6, r0, #0
 10151c4:	0a000020 	beq	101524c <XGpioPs_IntrGetStatus+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10151c8:	e5962008 	ldr	r2, [r6, #8]
 10151cc:	e3013111 	movw	r3, #4369	; 0x1111
 10151d0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10151d4:	e3055f40 	movw	r5, #24384	; 0x5f40
 10151d8:	e3405146 	movt	r5, #326	; 0x146
 10151dc:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10151e0:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10151e4:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10151e8:	1a000007 	bne	101520c <XGpioPs_IntrGetStatus+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10151ec:	e5d6301c 	ldrb	r3, [r6, #28]
 10151f0:	e1530001 	cmp	r3, r1
 10151f4:	9a00000c 	bls	101522c <XGpioPs_IntrGetStatus+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10151f8:	e5962004 	ldr	r2, [r6, #4]
 10151fc:	e3a03f86 	mov	r3, #536	; 0x218
 1015200:	e0831301 	add	r1, r3, r1, lsl #6
 1015204:	e7910002 	ldr	r0, [r1, r2]
 1015208:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101520c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015210:	e3a01d05 	mov	r1, #320	; 0x140
 1015214:	e3400106 	movt	r0, #262	; 0x106
 1015218:	eb000948 	bl	1017740 <Xil_Assert>
 101521c:	e3a03001 	mov	r3, #1
 1015220:	e1a00004 	mov	r0, r4
 1015224:	e5853000 	str	r3, [r5]
 1015228:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 101522c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015230:	e3001141 	movw	r1, #321	; 0x141
 1015234:	e3400106 	movt	r0, #262	; 0x106
 1015238:	eb000940 	bl	1017740 <Xil_Assert>
 101523c:	e3a03001 	mov	r3, #1
 1015240:	e1a00004 	mov	r0, r4
 1015244:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_INTSTS_OFFSET);
}
 1015248:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101524c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015250:	e300113f 	movw	r1, #319	; 0x13f
 1015254:	e3400106 	movt	r0, #262	; 0x106
 1015258:	eb000938 	bl	1017740 <Xil_Assert>
 101525c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015260:	e3a02001 	mov	r2, #1
 1015264:	e3403146 	movt	r3, #326	; 0x146
 1015268:	e1a00006 	mov	r0, r6
 101526c:	e5832000 	str	r2, [r3]
 1015270:	e8bd8070 	pop	{r4, r5, r6, pc}

01015274 <XGpioPs_IntrGetStatusPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatusPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1015274:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1015278:	e2506000 	subs	r6, r0, #0
{
 101527c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015280:	0a00002b 	beq	1015334 <XGpioPs_IntrGetStatusPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015284:	e5962008 	ldr	r2, [r6, #8]
 1015288:	e3013111 	movw	r3, #4369	; 0x1111
 101528c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015290:	e3055f40 	movw	r5, #24384	; 0x5f40
 1015294:	e3405146 	movt	r5, #326	; 0x146
 1015298:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101529c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10152a0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10152a4:	1a000019 	bne	1015310 <XGpioPs_IntrGetStatusPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10152a8:	e5963018 	ldr	r3, [r6, #24]
 10152ac:	e1530001 	cmp	r3, r1
 10152b0:	9a00000d 	bls	10152ec <XGpioPs_IntrGetStatusPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10152b4:	e6ef0071 	uxtb	r0, r1
 10152b8:	e28d2007 	add	r2, sp, #7
 10152bc:	e28d1006 	add	r1, sp, #6
 10152c0:	ebfffcbb 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10152c4:	e5dd1006 	ldrb	r1, [sp, #6]
 10152c8:	e3a03f86 	mov	r3, #536	; 0x218
 10152cc:	e5962004 	ldr	r2, [r6, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 10152d0:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10152d4:	e0833301 	add	r3, r3, r1, lsl #6
 10152d8:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 10152dc:	e1a04430 	lsr	r4, r0, r4
 10152e0:	e2040001 	and	r0, r4, #1
}
 10152e4:	e28dd008 	add	sp, sp, #8
 10152e8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10152ec:	e30a0158 	movw	r0, #41304	; 0xa158
 10152f0:	e3a01f5a 	mov	r1, #360	; 0x168
 10152f4:	e3400106 	movt	r0, #262	; 0x106
 10152f8:	eb000910 	bl	1017740 <Xil_Assert>
 10152fc:	e3a03001 	mov	r3, #1
 1015300:	e1a00004 	mov	r0, r4
 1015304:	e5853000 	str	r3, [r5]
}
 1015308:	e28dd008 	add	sp, sp, #8
 101530c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015310:	e30a0158 	movw	r0, #41304	; 0xa158
 1015314:	e3001167 	movw	r1, #359	; 0x167
 1015318:	e3400106 	movt	r0, #262	; 0x106
 101531c:	eb000907 	bl	1017740 <Xil_Assert>
 1015320:	e3a03001 	mov	r3, #1
 1015324:	e1a00004 	mov	r0, r4
 1015328:	e5853000 	str	r3, [r5]
}
 101532c:	e28dd008 	add	sp, sp, #8
 1015330:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015334:	e30a0158 	movw	r0, #41304	; 0xa158
 1015338:	e3001166 	movw	r1, #358	; 0x166
 101533c:	e3400106 	movt	r0, #262	; 0x106
 1015340:	eb0008fe 	bl	1017740 <Xil_Assert>
 1015344:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015348:	e3a02001 	mov	r2, #1
 101534c:	e3403146 	movt	r3, #326	; 0x146
 1015350:	e1a00006 	mov	r0, r6
 1015354:	e5832000 	str	r2, [r3]
 1015358:	eaffffe1 	b	10152e4 <XGpioPs_IntrGetStatusPin+0x70>

0101535c <XGpioPs_IntrClear>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClear(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 101535c:	e3500000 	cmp	r0, #0
{
 1015360:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015364:	0a00001e 	beq	10153e4 <XGpioPs_IntrClear+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015368:	e590c008 	ldr	ip, [r0, #8]
 101536c:	e3013111 	movw	r3, #4369	; 0x1111
 1015370:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015374:	e3054f40 	movw	r4, #24384	; 0x5f40
 1015378:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101537c:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1015380:	e3a03000 	mov	r3, #0
 1015384:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015388:	1a000007 	bne	10153ac <XGpioPs_IntrClear+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 101538c:	e5d0301c 	ldrb	r3, [r0, #28]
 1015390:	e1530001 	cmp	r3, r1
 1015394:	9a00000b 	bls	10153c8 <XGpioPs_IntrClear+0x6c>
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	/* Clear the currently pending interrupts. */
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015398:	e5900004 	ldr	r0, [r0, #4]
 101539c:	e3a03f86 	mov	r3, #536	; 0x218
 10153a0:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 10153a4:	e7812000 	str	r2, [r1, r0]
 10153a8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10153ac:	e30a0158 	movw	r0, #41304	; 0xa158
 10153b0:	e3a01f63 	mov	r1, #396	; 0x18c
 10153b4:	e3400106 	movt	r0, #262	; 0x106
 10153b8:	eb0008e0 	bl	1017740 <Xil_Assert>
 10153bc:	e3a03001 	mov	r3, #1
 10153c0:	e5843000 	str	r3, [r4]
 10153c4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10153c8:	e30a0158 	movw	r0, #41304	; 0xa158
 10153cc:	e300118d 	movw	r1, #397	; 0x18d
 10153d0:	e3400106 	movt	r0, #262	; 0x106
 10153d4:	eb0008d9 	bl	1017740 <Xil_Assert>
 10153d8:	e3a03001 	mov	r3, #1
 10153dc:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, Mask);
}
 10153e0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10153e4:	e30a0158 	movw	r0, #41304	; 0xa158
 10153e8:	e300118b 	movw	r1, #395	; 0x18b
 10153ec:	e3400106 	movt	r0, #262	; 0x106
 10153f0:	eb0008d2 	bl	1017740 <Xil_Assert>
 10153f4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10153f8:	e3a02001 	mov	r2, #1
 10153fc:	e3403146 	movt	r3, #326	; 0x146
 1015400:	e5832000 	str	r2, [r3]
 1015404:	e8bd8010 	pop	{r4, pc}

01015408 <XGpioPs_IntrClearPin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClearPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1015408:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 101540c:	e2505000 	subs	r5, r0, #0
{
 1015410:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1015414:	0a00002a 	beq	10154c4 <XGpioPs_IntrClearPin+0xbc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015418:	e5950008 	ldr	r0, [r5, #8]
 101541c:	e3013111 	movw	r3, #4369	; 0x1111
 1015420:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015424:	e3054f40 	movw	r4, #24384	; 0x5f40
 1015428:	e3404146 	movt	r4, #326	; 0x146
 101542c:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015430:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1015434:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015438:	1a000019 	bne	10154a4 <XGpioPs_IntrClearPin+0x9c>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 101543c:	e5953018 	ldr	r3, [r5, #24]
 1015440:	e1530001 	cmp	r3, r1
 1015444:	9a00000e 	bls	1015484 <XGpioPs_IntrClearPin+0x7c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1015448:	e6ef0071 	uxtb	r0, r1
 101544c:	e28d2007 	add	r2, sp, #7
 1015450:	e28d1006 	add	r1, sp, #6
 1015454:	ebfffc56 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	/* Clear the specified pending interrupts. */
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015458:	e5dd2006 	ldrb	r2, [sp, #6]
 101545c:	e3a03f86 	mov	r3, #536	; 0x218
 1015460:	e5951004 	ldr	r1, [r5, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	IntrReg &= ((u32)1 << PinNumber);
 1015464:	e3a0c001 	mov	ip, #1
 1015468:	e5dd0007 	ldrb	r0, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 101546c:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1015470:	e7932001 	ldr	r2, [r3, r1]
	IntrReg &= ((u32)1 << PinNumber);
 1015474:	e002201c 	and	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1015478:	e7832001 	str	r2, [r3, r1]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, IntrReg);
}
 101547c:	e28dd00c 	add	sp, sp, #12
 1015480:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1015484:	e30a0158 	movw	r0, #41304	; 0xa158
 1015488:	e30011b1 	movw	r1, #433	; 0x1b1
 101548c:	e3400106 	movt	r0, #262	; 0x106
 1015490:	eb0008aa 	bl	1017740 <Xil_Assert>
 1015494:	e3a03001 	mov	r3, #1
 1015498:	e5843000 	str	r3, [r4]
}
 101549c:	e28dd00c 	add	sp, sp, #12
 10154a0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10154a4:	e30a0158 	movw	r0, #41304	; 0xa158
 10154a8:	e3a01e1b 	mov	r1, #432	; 0x1b0
 10154ac:	e3400106 	movt	r0, #262	; 0x106
 10154b0:	eb0008a2 	bl	1017740 <Xil_Assert>
 10154b4:	e3a03001 	mov	r3, #1
 10154b8:	e5843000 	str	r3, [r4]
}
 10154bc:	e28dd00c 	add	sp, sp, #12
 10154c0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10154c4:	e30a0158 	movw	r0, #41304	; 0xa158
 10154c8:	e30011af 	movw	r1, #431	; 0x1af
 10154cc:	e3400106 	movt	r0, #262	; 0x106
 10154d0:	eb00089a 	bl	1017740 <Xil_Assert>
 10154d4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10154d8:	e3a02001 	mov	r2, #1
 10154dc:	e3403146 	movt	r3, #326	; 0x146
 10154e0:	e5832000 	str	r2, [r3]
 10154e4:	eaffffe4 	b	101547c <XGpioPs_IntrClearPin+0x74>

010154e8 <XGpioPs_SetIntrType>:
*
*****************************************************************************/
void XGpioPs_SetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 IntrType,
			  u32 IntrPolarity, u32 IntrOnAny)
{
	Xil_AssertVoid(InstancePtr != NULL);
 10154e8:	e3500000 	cmp	r0, #0
{
 10154ec:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10154f0:	0a000025 	beq	101558c <XGpioPs_SetIntrType+0xa4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10154f4:	e590e008 	ldr	lr, [r0, #8]
 10154f8:	e301c111 	movw	ip, #4369	; 0x1111
 10154fc:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015500:	e3054f40 	movw	r4, #24384	; 0x5f40
 1015504:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015508:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 101550c:	e3a0c000 	mov	ip, #0
 1015510:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015514:	1a00000e 	bne	1015554 <XGpioPs_SetIntrType+0x6c>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015518:	e5d0c01c 	ldrb	ip, [r0, #28]
 101551c:	e15c0001 	cmp	ip, r1
 1015520:	9a000012 	bls	1015570 <XGpioPs_SetIntrType+0x88>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015524:	e1a01301 	lsl	r1, r1, #6
 1015528:	e590e004 	ldr	lr, [r0, #4]
 101552c:	e2814f87 	add	r4, r1, #540	; 0x21c
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTTYPE_OFFSET, IntrType);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015530:	e281ce22 	add	ip, r1, #544	; 0x220
 1015534:	e784200e 	str	r2, [r4, lr]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTPOL_OFFSET, IntrPolarity);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015538:	e2811f89 	add	r1, r1, #548	; 0x224
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 101553c:	e5902004 	ldr	r2, [r0, #4]
 1015540:	e78c3002 	str	r3, [ip, r2]
 1015544:	e59d2008 	ldr	r2, [sp, #8]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015548:	e5903004 	ldr	r3, [r0, #4]
 101554c:	e7812003 	str	r2, [r1, r3]
 1015550:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015554:	e30a0158 	movw	r0, #41304	; 0xa158
 1015558:	e30011e5 	movw	r1, #485	; 0x1e5
 101555c:	e3400106 	movt	r0, #262	; 0x106
 1015560:	eb000876 	bl	1017740 <Xil_Assert>
 1015564:	e3a03001 	mov	r3, #1
 1015568:	e5843000 	str	r3, [r4]
 101556c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015570:	e30a0158 	movw	r0, #41304	; 0xa158
 1015574:	e30011e6 	movw	r1, #486	; 0x1e6
 1015578:	e3400106 	movt	r0, #262	; 0x106
 101557c:	eb00086f 	bl	1017740 <Xil_Assert>
 1015580:	e3a03001 	mov	r3, #1
 1015584:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAny);
}
 1015588:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101558c:	e30a0158 	movw	r0, #41304	; 0xa158
 1015590:	e3a01f79 	mov	r1, #484	; 0x1e4
 1015594:	e3400106 	movt	r0, #262	; 0x106
 1015598:	eb000868 	bl	1017740 <Xil_Assert>
 101559c:	e3053f40 	movw	r3, #24384	; 0x5f40
 10155a0:	e3a02001 	mov	r2, #1
 10155a4:	e3403146 	movt	r3, #326	; 0x146
 10155a8:	e5832000 	str	r2, [r3]
 10155ac:	e8bd8010 	pop	{r4, pc}

010155b0 <XGpioPs_GetIntrType>:
*****************************************************************************/
void XGpioPs_GetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 *IntrType,
			  u32 *IntrPolarity, u32 *IntrOnAny)

{
	Xil_AssertVoid(InstancePtr != NULL);
 10155b0:	e3500000 	cmp	r0, #0
{
 10155b4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10155b8:	0a000028 	beq	1015660 <XGpioPs_GetIntrType+0xb0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10155bc:	e590e008 	ldr	lr, [r0, #8]
 10155c0:	e301c111 	movw	ip, #4369	; 0x1111
 10155c4:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10155c8:	e3054f40 	movw	r4, #24384	; 0x5f40
 10155cc:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10155d0:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 10155d4:	e3a0c000 	mov	ip, #0
 10155d8:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10155dc:	1a000011 	bne	1015628 <XGpioPs_GetIntrType+0x78>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10155e0:	e5d0c01c 	ldrb	ip, [r0, #28]
 10155e4:	e15c0001 	cmp	ip, r1
 10155e8:	9a000015 	bls	1015644 <XGpioPs_GetIntrType+0x94>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10155ec:	e590e004 	ldr	lr, [r0, #4]
 10155f0:	e1a01301 	lsl	r1, r1, #6
 10155f4:	e2814f87 	add	r4, r1, #540	; 0x21c
				     ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				     XGPIOPS_INTTYPE_OFFSET);

	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10155f8:	e281ce22 	add	ip, r1, #544	; 0x220
	return *(volatile u32 *) Addr;
 10155fc:	e794e00e 	ldr	lr, [r4, lr]
					 ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					 XGPIOPS_INTPOL_OFFSET);

	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015600:	e2811f89 	add	r1, r1, #548	; 0x224
	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015604:	e582e000 	str	lr, [r2]
	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015608:	e5902004 	ldr	r2, [r0, #4]
 101560c:	e79c2002 	ldr	r2, [ip, r2]
 1015610:	e5832000 	str	r2, [r3]
	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015614:	e5903004 	ldr	r3, [r0, #4]
 1015618:	e59d2008 	ldr	r2, [sp, #8]
 101561c:	e7913003 	ldr	r3, [r1, r3]
 1015620:	e5823000 	str	r3, [r2]
 1015624:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015628:	e30a0158 	movw	r0, #41304	; 0xa158
 101562c:	e3001219 	movw	r1, #537	; 0x219
 1015630:	e3400106 	movt	r0, #262	; 0x106
 1015634:	eb000841 	bl	1017740 <Xil_Assert>
 1015638:	e3a03001 	mov	r3, #1
 101563c:	e5843000 	str	r3, [r4]
 1015640:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1015644:	e30a0158 	movw	r0, #41304	; 0xa158
 1015648:	e300121a 	movw	r1, #538	; 0x21a
 101564c:	e3400106 	movt	r0, #262	; 0x106
 1015650:	eb00083a 	bl	1017740 <Xil_Assert>
 1015654:	e3a03001 	mov	r3, #1
 1015658:	e5843000 	str	r3, [r4]
				      ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				      XGPIOPS_INTANY_OFFSET);
}
 101565c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015660:	e30a0158 	movw	r0, #41304	; 0xa158
 1015664:	e3a01f86 	mov	r1, #536	; 0x218
 1015668:	e3400106 	movt	r0, #262	; 0x106
 101566c:	eb000833 	bl	1017740 <Xil_Assert>
 1015670:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015674:	e3a02001 	mov	r2, #1
 1015678:	e3403146 	movt	r3, #326	; 0x146
 101567c:	e5832000 	str	r2, [r3]
 1015680:	e8bd8010 	pop	{r4, pc}

01015684 <XGpioPs_SetIntrTypePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_SetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin, u8 IrqType)
{
 1015684:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrPolReg;
	u32 IntrOnAnyReg;
	u8 Bank;
	u8 PinNumber;

	Xil_AssertVoid(InstancePtr != NULL);
 1015688:	e2505000 	subs	r5, r0, #0
{
 101568c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1015690:	0a000055 	beq	10157ec <XGpioPs_SetIntrTypePin+0x168>
 1015694:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015698:	e5952008 	ldr	r2, [r5, #8]
 101569c:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10156a0:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10156a4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10156a8:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10156ac:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10156b0:	e3a03000 	mov	r3, #0
 10156b4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10156b8:	1a000019 	bne	1015724 <XGpioPs_SetIntrTypePin+0xa0>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10156bc:	e5953018 	ldr	r3, [r5, #24]
 10156c0:	e1530001 	cmp	r3, r1
 10156c4:	9a00001e 	bls	1015744 <XGpioPs_SetIntrTypePin+0xc0>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 10156c8:	e3560004 	cmp	r6, #4
 10156cc:	8a00003e 	bhi	10157cc <XGpioPs_SetIntrTypePin+0x148>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10156d0:	e6ef0071 	uxtb	r0, r1
 10156d4:	e28d2007 	add	r2, sp, #7
 10156d8:	e28d1006 	add	r1, sp, #6
 10156dc:	ebfffbb4 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10156e0:	e5dd3006 	ldrb	r3, [sp, #6]

	IntrOnAnyReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
					((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					XGPIOPS_INTANY_OFFSET);

	switch (IrqType) {
 10156e4:	e2466001 	sub	r6, r6, #1
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10156e8:	e5952004 	ldr	r2, [r5, #4]
		case XGPIOPS_IRQ_TYPE_LEVEL_HIGH:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
			break;
		case XGPIOPS_IRQ_TYPE_LEVEL_LOW:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 10156ec:	e3a0e001 	mov	lr, #1
 10156f0:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10156f4:	e1a03303 	lsl	r3, r3, #6
 10156f8:	e0832002 	add	r2, r3, r2
 10156fc:	e592121c 	ldr	r1, [r2, #540]	; 0x21c
 1015700:	e5920220 	ldr	r0, [r2, #544]	; 0x220
 1015704:	e592c224 	ldr	ip, [r2, #548]	; 0x224
	switch (IrqType) {
 1015708:	e3560003 	cmp	r6, #3
 101570c:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
 1015710:	ea00003e 	b	1015810 <XGpioPs_SetIntrTypePin+0x18c>
 1015714:	010157a4 	.word	0x010157a4
 1015718:	01015794 	.word	0x01015794
 101571c:	01015764 	.word	0x01015764
 1015720:	010157bc 	.word	0x010157bc
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015724:	e30a0158 	movw	r0, #41304	; 0xa158
 1015728:	e3001249 	movw	r1, #585	; 0x249
 101572c:	e3400106 	movt	r0, #262	; 0x106
 1015730:	eb000802 	bl	1017740 <Xil_Assert>
 1015734:	e3a03001 	mov	r3, #1
 1015738:	e5843000 	str	r3, [r4]
			  XGPIOPS_INTPOL_OFFSET, IntrPolReg);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAnyReg);
}
 101573c:	e28dd008 	add	sp, sp, #8
 1015740:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1015744:	e30a0158 	movw	r0, #41304	; 0xa158
 1015748:	e300124a 	movw	r1, #586	; 0x24a
 101574c:	e3400106 	movt	r0, #262	; 0x106
 1015750:	eb0007fa 	bl	1017740 <Xil_Assert>
 1015754:	e3a03001 	mov	r3, #1
 1015758:	e5843000 	str	r3, [r4]
}
 101575c:	e28dd008 	add	sp, sp, #8
 1015760:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1015764:	e1a0e41e 	lsl	lr, lr, r4
 1015768:	e1c1100e 	bic	r1, r1, lr
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 101576c:	e180000e 	orr	r0, r0, lr
	*LocalAddr = Value;
 1015770:	e582121c 	str	r1, [r2, #540]	; 0x21c
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1015774:	e2831e22 	add	r1, r3, #544	; 0x220
 1015778:	e5952004 	ldr	r2, [r5, #4]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 101577c:	e2833f89 	add	r3, r3, #548	; 0x224
 1015780:	e7810002 	str	r0, [r1, r2]
 1015784:	e5952004 	ldr	r2, [r5, #4]
 1015788:	e783c002 	str	ip, [r3, r2]
}
 101578c:	e28dd008 	add	sp, sp, #8
 1015790:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1015794:	e1a0e41e 	lsl	lr, lr, r4
 1015798:	e18e1001 	orr	r1, lr, r1
			IntrOnAnyReg |= ((u32)1 << (u32)PinNumber);
 101579c:	e18cc00e 	orr	ip, ip, lr
			break;
 10157a0:	eafffff2 	b	1015770 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 10157a4:	e1a0e41e 	lsl	lr, lr, r4
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 10157a8:	e1e0400e 	mvn	r4, lr
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 10157ac:	e18e1001 	orr	r1, lr, r1
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 10157b0:	e0000004 	and	r0, r0, r4
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 10157b4:	e00cc004 	and	ip, ip, r4
			break;
 10157b8:	eaffffec 	b	1015770 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 10157bc:	e1e0e41e 	mvn	lr, lr, lsl r4
 10157c0:	e001100e 	and	r1, r1, lr
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 10157c4:	e000000e 	and	r0, r0, lr
			break;
 10157c8:	eaffffe8 	b	1015770 <XGpioPs_SetIntrTypePin+0xec>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 10157cc:	e30a0158 	movw	r0, #41304	; 0xa158
 10157d0:	e300124b 	movw	r1, #587	; 0x24b
 10157d4:	e3400106 	movt	r0, #262	; 0x106
 10157d8:	eb0007d8 	bl	1017740 <Xil_Assert>
 10157dc:	e3a03001 	mov	r3, #1
 10157e0:	e5843000 	str	r3, [r4]
}
 10157e4:	e28dd008 	add	sp, sp, #8
 10157e8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10157ec:	e30a0158 	movw	r0, #41304	; 0xa158
 10157f0:	e3a01f92 	mov	r1, #584	; 0x248
 10157f4:	e3400106 	movt	r0, #262	; 0x106
 10157f8:	eb0007d0 	bl	1017740 <Xil_Assert>
 10157fc:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015800:	e3a02001 	mov	r2, #1
 1015804:	e3403146 	movt	r3, #326	; 0x146
 1015808:	e5832000 	str	r2, [r3]
 101580c:	eaffffca 	b	101573c <XGpioPs_SetIntrTypePin+0xb8>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1015810:	e1a0e41e 	lsl	lr, lr, r4
 1015814:	e18e1001 	orr	r1, lr, r1
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1015818:	e180000e 	orr	r0, r0, lr
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 101581c:	e1ccc00e 	bic	ip, ip, lr
			break;
 1015820:	eaffffd2 	b	1015770 <XGpioPs_SetIntrTypePin+0xec>

01015824 <XGpioPs_GetIntrTypePin>:
* @note		Use XGPIOPS_IRQ_TYPE_* defined in xgpiops.h for the IRQ type
*		returned by this function.
*
*****************************************************************************/
u8 XGpioPs_GetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1015824:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrOnAny;
	u8 Bank;
	u8 PinNumber;
	u8 IrqType;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1015828:	e2506000 	subs	r6, r0, #0
{
 101582c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015830:	0a000034 	beq	1015908 <XGpioPs_GetIntrTypePin+0xe4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015834:	e5962008 	ldr	r2, [r6, #8]
 1015838:	e3013111 	movw	r3, #4369	; 0x1111
 101583c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015840:	e3055f40 	movw	r5, #24384	; 0x5f40
 1015844:	e3405146 	movt	r5, #326	; 0x146
 1015848:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101584c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015850:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015854:	1a00001e 	bne	10158d4 <XGpioPs_GetIntrTypePin+0xb0>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1015858:	e5963018 	ldr	r3, [r6, #24]
 101585c:	e1530001 	cmp	r3, r1
 1015860:	9a000012 	bls	10158b0 <XGpioPs_GetIntrTypePin+0x8c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1015864:	e6ef0071 	uxtb	r0, r1
 1015868:	e28d2007 	add	r2, sp, #7
 101586c:	e28d1006 	add	r1, sp, #6
 1015870:	ebfffb4f 	bl	10145b4 <XGpioPs_GetBankPin>
#endif

	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015874:	e5dd2006 	ldrb	r2, [sp, #6]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1015878:	e3a00001 	mov	r0, #1
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 101587c:	e5963004 	ldr	r3, [r6, #4]
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1015880:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1015884:	e0833302 	add	r3, r3, r2, lsl #6
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1015888:	e1a04410 	lsl	r4, r0, r4
	return *(volatile u32 *) Addr;
 101588c:	e593221c 	ldr	r2, [r3, #540]	; 0x21c

	if (IntrType == ((u32)1 << PinNumber)) {
 1015890:	e1d42002 	bics	r2, r4, r2
 1015894:	0a000011 	beq	10158e0 <XGpioPs_GetIntrTypePin+0xbc>
 1015898:	e5933220 	ldr	r3, [r3, #544]	; 0x220

		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTPOL_OFFSET) & ((u32)1 << PinNumber);

		if (IntrPol == ((u32)1 << PinNumber)) {
 101589c:	e1d43003 	bics	r3, r4, r3
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_HIGH;
		} else {
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_LOW;
 10158a0:	03a00003 	moveq	r0, #3
 10158a4:	13a00004 	movne	r0, #4
		}
	}

	return IrqType;
}
 10158a8:	e28dd008 	add	sp, sp, #8
 10158ac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10158b0:	e30a0158 	movw	r0, #41304	; 0xa158
 10158b4:	e30012a3 	movw	r1, #675	; 0x2a3
 10158b8:	e3400106 	movt	r0, #262	; 0x106
 10158bc:	eb00079f 	bl	1017740 <Xil_Assert>
 10158c0:	e3a03001 	mov	r3, #1
 10158c4:	e1a00004 	mov	r0, r4
 10158c8:	e5853000 	str	r3, [r5]
}
 10158cc:	e28dd008 	add	sp, sp, #8
 10158d0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10158d4:	e30a0158 	movw	r0, #41304	; 0xa158
 10158d8:	e30012a2 	movw	r1, #674	; 0x2a2
 10158dc:	eafffff5 	b	10158b8 <XGpioPs_GetIntrTypePin+0x94>
 10158e0:	e5932224 	ldr	r2, [r3, #548]	; 0x224
 10158e4:	e5930220 	ldr	r0, [r3, #544]	; 0x220
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 10158e8:	e1d43002 	bics	r3, r4, r2
		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10158ec:	e0000004 	and	r0, r0, r4
			IrqType = XGPIOPS_IRQ_TYPE_EDGE_BOTH;
 10158f0:	03a00002 	moveq	r0, #2
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 10158f4:	0affffeb 	beq	10158a8 <XGpioPs_GetIntrTypePin+0x84>
	Xil_AssertNonvoid(InstancePtr != NULL);
 10158f8:	e0540000 	subs	r0, r4, r0
 10158fc:	13a00001 	movne	r0, #1
}
 1015900:	e28dd008 	add	sp, sp, #8
 1015904:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015908:	e30a0158 	movw	r0, #41304	; 0xa158
 101590c:	e30012a1 	movw	r1, #673	; 0x2a1
 1015910:	e3400106 	movt	r0, #262	; 0x106
 1015914:	eb000789 	bl	1017740 <Xil_Assert>
 1015918:	e3053f40 	movw	r3, #24384	; 0x5f40
 101591c:	e3a02001 	mov	r2, #1
 1015920:	e3403146 	movt	r3, #326	; 0x146
 1015924:	e1a00006 	mov	r0, r6
 1015928:	e5832000 	str	r2, [r3]
 101592c:	eaffffdd 	b	10158a8 <XGpioPs_GetIntrTypePin+0x84>

01015930 <XGpioPs_SetCallbackHandler>:
*
******************************************************************************/
void XGpioPs_SetCallbackHandler(XGpioPs *InstancePtr, void *CallBackRef,
				 XGpioPs_Handler FuncPointer)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1015930:	e3500000 	cmp	r0, #0
{
 1015934:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015938:	0a000014 	beq	1015990 <XGpioPs_SetCallbackHandler+0x60>
 101593c:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(FuncPointer != NULL);
 1015940:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1015944:	e3404146 	movt	r4, #326	; 0x146
 1015948:	e3a03000 	mov	r3, #0
 101594c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 1015950:	0a000017 	beq	10159b4 <XGpioPs_SetCallbackHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015954:	e590c008 	ldr	ip, [r0, #8]
 1015958:	e3013111 	movw	r3, #4369	; 0x1111
 101595c:	e3413111 	movt	r3, #4369	; 0x1111
 1015960:	e15c0003 	cmp	ip, r3
 1015964:	1a000002 	bne	1015974 <XGpioPs_SetCallbackHandler+0x44>

	InstancePtr->Handler = FuncPointer;
 1015968:	e580200c 	str	r2, [r0, #12]
	InstancePtr->CallBackRef = CallBackRef;
 101596c:	e5801010 	str	r1, [r0, #16]
 1015970:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015974:	e30a0158 	movw	r0, #41304	; 0xa158
 1015978:	e30012ea 	movw	r1, #746	; 0x2ea
 101597c:	e3400106 	movt	r0, #262	; 0x106
 1015980:	eb00076e 	bl	1017740 <Xil_Assert>
 1015984:	e3a03001 	mov	r3, #1
 1015988:	e5843000 	str	r3, [r4]
}
 101598c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015990:	e30a0158 	movw	r0, #41304	; 0xa158
 1015994:	e3a01fba 	mov	r1, #744	; 0x2e8
 1015998:	e3400106 	movt	r0, #262	; 0x106
 101599c:	eb000767 	bl	1017740 <Xil_Assert>
 10159a0:	e3053f40 	movw	r3, #24384	; 0x5f40
 10159a4:	e3a02001 	mov	r2, #1
 10159a8:	e3403146 	movt	r3, #326	; 0x146
 10159ac:	e5832000 	str	r2, [r3]
 10159b0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 10159b4:	e30a0158 	movw	r0, #41304	; 0xa158
 10159b8:	e30012e9 	movw	r1, #745	; 0x2e9
 10159bc:	e3400106 	movt	r0, #262	; 0x106
 10159c0:	eb00075e 	bl	1017740 <Xil_Assert>
 10159c4:	e3a03001 	mov	r3, #1
 10159c8:	e5843000 	str	r3, [r4]
 10159cc:	e8bd8010 	pop	{r4, pc}

010159d0 <XGpioPs_IntrHandler>:
* @note		This function does not save and restore the processor context
*		such that the user must provide this processing.
*
******************************************************************************/
void XGpioPs_IntrHandler(const XGpioPs *InstancePtr)
{
 10159d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	u8 Bank;
	u32 IntrStatus;
	u32 IntrEnabled;

	Xil_AssertVoid(InstancePtr != NULL);
 10159d4:	e2506000 	subs	r6, r0, #0
 10159d8:	0a00002c 	beq	1015a90 <XGpioPs_IntrHandler+0xc0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10159dc:	e5962008 	ldr	r2, [r6, #8]
 10159e0:	e3013111 	movw	r3, #4369	; 0x1111
 10159e4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10159e8:	e3054f40 	movw	r4, #24384	; 0x5f40
 10159ec:	e3404146 	movt	r4, #326	; 0x146
 10159f0:	e3a07000 	mov	r7, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10159f4:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10159f8:	e5847000 	str	r7, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10159fc:	1a00001c 	bne	1015a74 <XGpioPs_IntrHandler+0xa4>

	for (Bank = 0U; Bank < InstancePtr->MaxBanks; Bank++) {
 1015a00:	e5d6301c 	ldrb	r3, [r6, #28]
 1015a04:	e1530007 	cmp	r3, r7
 1015a08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 1015a0c:	e1a04007 	mov	r4, r7
 1015a10:	ea000003 	b	1015a24 <XGpioPs_IntrHandler+0x54>
 1015a14:	e5d6301c 	ldrb	r3, [r6, #28]
 1015a18:	e6ef4077 	uxtb	r4, r7
 1015a1c:	e1530004 	cmp	r3, r4
 1015a20:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
			if((Bank == XGPIOPS_ONE) || (Bank == XGPIOPS_TWO)) {
				continue;
			}
		}
#endif
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1015a24:	e1a01004 	mov	r1, r4
 1015a28:	e1a00006 	mov	r0, r6
 1015a2c:	ebfffde2 	bl	10151bc <XGpioPs_IntrGetStatus>
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1015a30:	e1a01004 	mov	r1, r4
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1015a34:	e1a05000 	mov	r5, r0
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1015a38:	e1a00006 	mov	r0, r6
 1015a3c:	e2877001 	add	r7, r7, #1
 1015a40:	ebfffd74 	bl	1015018 <XGpioPs_IntrGetEnabled>
		if ((IntrStatus & IntrEnabled) != (u32)0) {
 1015a44:	e0155000 	ands	r5, r5, r0
 1015a48:	0afffff1 	beq	1015a14 <XGpioPs_IntrHandler+0x44>
			XGpioPs_IntrClear(InstancePtr, Bank,
 1015a4c:	e1a02005 	mov	r2, r5
 1015a50:	e1a01004 	mov	r1, r4
 1015a54:	e1a00006 	mov	r0, r6
 1015a58:	ebfffe3f 	bl	101535c <XGpioPs_IntrClear>
					(IntrStatus & IntrEnabled));
			InstancePtr->Handler(InstancePtr->
 1015a5c:	e1a02005 	mov	r2, r5
 1015a60:	e1a01004 	mov	r1, r4
 1015a64:	e596300c 	ldr	r3, [r6, #12]
 1015a68:	e5960010 	ldr	r0, [r6, #16]
 1015a6c:	e12fff33 	blx	r3
 1015a70:	eaffffe7 	b	1015a14 <XGpioPs_IntrHandler+0x44>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015a74:	e30a0158 	movw	r0, #41304	; 0xa158
 1015a78:	e3a01fc2 	mov	r1, #776	; 0x308
 1015a7c:	e3400106 	movt	r0, #262	; 0x106
 1015a80:	eb00072e 	bl	1017740 <Xil_Assert>
 1015a84:	e3a03001 	mov	r3, #1
 1015a88:	e5843000 	str	r3, [r4]
 1015a8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015a90:	e30a0158 	movw	r0, #41304	; 0xa158
 1015a94:	e3001307 	movw	r1, #775	; 0x307
 1015a98:	e3400106 	movt	r0, #262	; 0x106
 1015a9c:	eb000727 	bl	1017740 <Xil_Assert>
 1015aa0:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015aa4:	e3a02001 	mov	r2, #1
 1015aa8:	e3403146 	movt	r3, #326	; 0x146
 1015aac:	e5832000 	str	r2, [r3]
 1015ab0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01015ab4 <StubHandler>:
{
	(void) CallBackRef;
	(void) Bank;
	(void) Status;

	Xil_AssertVoidAlways();
 1015ab4:	e30a0158 	movw	r0, #41304	; 0xa158
{
 1015ab8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1015abc:	e3001337 	movw	r1, #823	; 0x337
 1015ac0:	e3400106 	movt	r0, #262	; 0x106
 1015ac4:	eb00071d 	bl	1017740 <Xil_Assert>
 1015ac8:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015acc:	e3a02001 	mov	r2, #1
 1015ad0:	e3403146 	movt	r3, #326	; 0x146
 1015ad4:	e5832000 	str	r2, [r3]
}
 1015ad8:	e8bd8010 	pop	{r4, pc}

01015adc <XScuGic_InterruptHandler>:
*
* @note		None.
*
******************************************************************************/
void XScuGic_InterruptHandler(XScuGic *InstancePtr)
{
 1015adc:	e92d4070 	push	{r4, r5, r6, lr}
#endif
	    XScuGic_VectorTableEntry *TablePtr;

	    /* Assert that the pointer to the instance is valid
	     */
	    Xil_AssertVoid(InstancePtr != NULL);
 1015ae0:	e2505000 	subs	r5, r0, #0
 1015ae4:	0a000011 	beq	1015b30 <XScuGic_InterruptHandler+0x54>
	     * clear the interrupt in the GIC.
	     */
#if defined (GICv3)
	    InterruptID = XScuGic_get_IntID();
#else
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 1015ae8:	e5953000 	ldr	r3, [r5]
	    Xil_AssertVoid(InstancePtr != NULL);
 1015aec:	e3052f40 	movw	r2, #24384	; 0x5f40
 1015af0:	e3402146 	movt	r2, #326	; 0x146
 1015af4:	e3a01000 	mov	r1, #0
 1015af8:	e5821000 	str	r1, [r2]
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 1015afc:	e5932004 	ldr	r2, [r3, #4]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1015b00:	e592400c 	ldr	r4, [r2, #12]
	    InterruptID = IntIDFull & XSCUGIC_ACK_INTID_MASK;
 1015b04:	e7e91054 	ubfx	r1, r4, #0, #10
#endif
	    if (XSCUGIC_MAX_NUM_INTR_INPUTS <= InterruptID) {
 1015b08:	e351005e 	cmp	r1, #94	; 0x5e
 1015b0c:	8a000005 	bhi	1015b28 <XScuGic_InterruptHandler+0x4c>
	     * based on the IRQSource. A software trigger is cleared by
	     *.the ACK.
	     */
	    TablePtr = &(InstancePtr->Config->HandlerTable[InterruptID]);
		if (TablePtr != NULL) {
			TablePtr->Handler(TablePtr->CallBackRef);
 1015b10:	e0833181 	add	r3, r3, r1, lsl #3
 1015b14:	e593200c 	ldr	r2, [r3, #12]
 1015b18:	e5930010 	ldr	r0, [r3, #16]
 1015b1c:	e12fff32 	blx	r2
 1015b20:	e5953000 	ldr	r3, [r5]
 1015b24:	e5932004 	ldr	r2, [r3, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1015b28:	e5824010 	str	r4, [r2, #16]
#endif
	    /*
	     * Return from the interrupt. Change security domains
	     * could happen here.
	     */
}
 1015b2c:	e8bd8070 	pop	{r4, r5, r6, pc}
	    Xil_AssertVoid(InstancePtr != NULL);
 1015b30:	e30a0168 	movw	r0, #41320	; 0xa168
 1015b34:	e3a0107d 	mov	r1, #125	; 0x7d
 1015b38:	e3400106 	movt	r0, #262	; 0x106
 1015b3c:	eb0006ff 	bl	1017740 <Xil_Assert>
 1015b40:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015b44:	e3a02001 	mov	r2, #1
 1015b48:	e3403146 	movt	r3, #326	; 0x146
 1015b4c:	e5832000 	str	r2, [r3]
 1015b50:	e8bd8070 	pop	{r4, r5, r6, pc}

01015b54 <StubHandler>:
static void StubHandler(void *CallBackRef)
{
	/*
	 * verify that the inputs are valid
	 */
	Xil_AssertVoid(CallBackRef != NULL);
 1015b54:	e3500000 	cmp	r0, #0
 1015b58:	0a000007 	beq	1015b7c <StubHandler+0x28>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1015b5c:	e5903008 	ldr	r3, [r0, #8]
	Xil_AssertVoid(CallBackRef != NULL);
 1015b60:	e3052f40 	movw	r2, #24384	; 0x5f40
 1015b64:	e3402146 	movt	r2, #326	; 0x146
 1015b68:	e3a01000 	mov	r1, #0
 1015b6c:	e5821000 	str	r1, [r2]
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1015b70:	e2833001 	add	r3, r3, #1
 1015b74:	e5803008 	str	r3, [r0, #8]
 1015b78:	e12fff1e 	bx	lr
	Xil_AssertVoid(CallBackRef != NULL);
 1015b7c:	e30a0178 	movw	r0, #41336	; 0xa178
{
 1015b80:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CallBackRef != NULL);
 1015b84:	e30012e5 	movw	r1, #741	; 0x2e5
 1015b88:	e3400106 	movt	r0, #262	; 0x106
 1015b8c:	eb0006eb 	bl	1017740 <Xil_Assert>
 1015b90:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015b94:	e3a02001 	mov	r2, #1
 1015b98:	e3403146 	movt	r3, #326	; 0x146
 1015b9c:	e5832000 	str	r2, [r3]
}
 1015ba0:	e8bd8010 	pop	{r4, pc}

01015ba4 <XScuGic_Connect>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015ba4:	e3500000 	cmp	r0, #0
{
 1015ba8:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015bac:	0a000021 	beq	1015c38 <XScuGic_Connect+0x94>
 1015bb0:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015bb4:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015bb8:	e3404146 	movt	r4, #326	; 0x146
 1015bbc:	e3a0c000 	mov	ip, #0
 1015bc0:	e584c000 	str	ip, [r4]
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015bc4:	8a000013 	bhi	1015c18 <XScuGic_Connect+0x74>
	Xil_AssertNonvoid(Handler != NULL);
 1015bc8:	e3520000 	cmp	r2, #0
 1015bcc:	0a000022 	beq	1015c5c <XScuGic_Connect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015bd0:	e590e004 	ldr	lr, [r0, #4]
 1015bd4:	e301c111 	movw	ip, #4369	; 0x1111
 1015bd8:	e341c111 	movt	ip, #4369	; 0x1111
 1015bdc:	e15e000c 	cmp	lr, ip
 1015be0:	1a000004 	bne	1015bf8 <XScuGic_Connect+0x54>
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)Handler;
 1015be4:	e5900000 	ldr	r0, [r0]
 1015be8:	e0801181 	add	r1, r0, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = CallBackRef;
 1015bec:	e1c120fc 	strd	r2, [r1, #12]
}
 1015bf0:	e3a00000 	mov	r0, #0
 1015bf4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015bf8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015bfc:	e30011e1 	movw	r1, #481	; 0x1e1
 1015c00:	e3400106 	movt	r0, #262	; 0x106
 1015c04:	eb0006cd 	bl	1017740 <Xil_Assert>
 1015c08:	e3a03001 	mov	r3, #1
}
 1015c0c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015c10:	e5843000 	str	r3, [r4]
}
 1015c14:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015c18:	e30a0178 	movw	r0, #41336	; 0xa178
 1015c1c:	e30011df 	movw	r1, #479	; 0x1df
 1015c20:	e3400106 	movt	r0, #262	; 0x106
 1015c24:	eb0006c5 	bl	1017740 <Xil_Assert>
 1015c28:	e3a03001 	mov	r3, #1
}
 1015c2c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015c30:	e5843000 	str	r3, [r4]
}
 1015c34:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015c38:	e30a0178 	movw	r0, #41336	; 0xa178
 1015c3c:	e30011de 	movw	r1, #478	; 0x1de
 1015c40:	e3400106 	movt	r0, #262	; 0x106
 1015c44:	eb0006bd 	bl	1017740 <Xil_Assert>
 1015c48:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015c4c:	e3a02001 	mov	r2, #1
 1015c50:	e3403146 	movt	r3, #326	; 0x146
 1015c54:	e5832000 	str	r2, [r3]
 1015c58:	eaffffe4 	b	1015bf0 <XScuGic_Connect+0x4c>
	Xil_AssertNonvoid(Handler != NULL);
 1015c5c:	e30a0178 	movw	r0, #41336	; 0xa178
 1015c60:	e3a01e1e 	mov	r1, #480	; 0x1e0
 1015c64:	e3400106 	movt	r0, #262	; 0x106
 1015c68:	eb0006b4 	bl	1017740 <Xil_Assert>
 1015c6c:	e3a03001 	mov	r3, #1
 1015c70:	e5843000 	str	r3, [r4]
 1015c74:	eaffffdd 	b	1015bf0 <XScuGic_Connect+0x4c>

01015c78 <XScuGic_Disconnect>:
	Xil_AssertVoid(InstancePtr != NULL);
 1015c78:	e3500000 	cmp	r0, #0
{
 1015c7c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015c80:	0a000026 	beq	1015d20 <XScuGic_Disconnect+0xa8>
 1015c84:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015c88:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1015c8c:	e3404146 	movt	r4, #326	; 0x146
 1015c90:	e3a03000 	mov	r3, #0
 1015c94:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015c98:	8a000019 	bhi	1015d04 <XScuGic_Disconnect+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015c9c:	e5902004 	ldr	r2, [r0, #4]
 1015ca0:	e3013111 	movw	r3, #4369	; 0x1111
 1015ca4:	e3413111 	movt	r3, #4369	; 0x1111
 1015ca8:	e1520003 	cmp	r2, r3
 1015cac:	1a00000d 	bne	1015ce8 <XScuGic_Disconnect+0x70>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1015cb0:	e5903000 	ldr	r3, [r0]
	Mask = 0x00000001U << (Int_Id % 32U);
 1015cb4:	e201201f 	and	r2, r1, #31
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1015cb8:	e1a0c2a1 	lsr	ip, r1, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1015cbc:	e3a0e001 	mov	lr, #1
 1015cc0:	e1a0e21e 	lsl	lr, lr, r2
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1015cc4:	e3052b54 	movw	r2, #23380	; 0x5b54
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1015cc8:	e5934008 	ldr	r4, [r3, #8]
 1015ccc:	e28cc060 	add	ip, ip, #96	; 0x60
 1015cd0:	e0831181 	add	r1, r3, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1015cd4:	e3402101 	movt	r2, #257	; 0x101
 1015cd8:	e784e10c 	str	lr, [r4, ip, lsl #2]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 1015cdc:	e5810010 	str	r0, [r1, #16]
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1015ce0:	e581200c 	str	r2, [r1, #12]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 1015ce4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015ce8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015cec:	e3001206 	movw	r1, #518	; 0x206
 1015cf0:	e3400106 	movt	r0, #262	; 0x106
 1015cf4:	eb000691 	bl	1017740 <Xil_Assert>
 1015cf8:	e3a03001 	mov	r3, #1
 1015cfc:	e5843000 	str	r3, [r4]
}
 1015d00:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015d04:	e30a0178 	movw	r0, #41336	; 0xa178
 1015d08:	e3001205 	movw	r1, #517	; 0x205
 1015d0c:	e3400106 	movt	r0, #262	; 0x106
 1015d10:	eb00068a 	bl	1017740 <Xil_Assert>
 1015d14:	e3a03001 	mov	r3, #1
 1015d18:	e5843000 	str	r3, [r4]
 1015d1c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015d20:	e30a0178 	movw	r0, #41336	; 0xa178
 1015d24:	e3a01f81 	mov	r1, #516	; 0x204
 1015d28:	e3400106 	movt	r0, #262	; 0x106
 1015d2c:	eb000683 	bl	1017740 <Xil_Assert>
 1015d30:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015d34:	e3a02001 	mov	r2, #1
 1015d38:	e3403146 	movt	r3, #326	; 0x146
 1015d3c:	e5832000 	str	r2, [r3]
 1015d40:	e8bd8010 	pop	{r4, pc}

01015d44 <XScuGic_SoftwareIntr>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d44:	e3500000 	cmp	r0, #0
{
 1015d48:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d4c:	0a000025 	beq	1015de8 <XScuGic_SoftwareIntr+0xa4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d50:	e590c004 	ldr	ip, [r0, #4]
 1015d54:	e3013111 	movw	r3, #4369	; 0x1111
 1015d58:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d5c:	e3054f40 	movw	r4, #24384	; 0x5f40
 1015d60:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d64:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015d68:	e3a03000 	mov	r3, #0
 1015d6c:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015d70:	1a00000c 	bne	1015da8 <XScuGic_SoftwareIntr+0x64>
	Xil_AssertNonvoid(Int_Id <= 15U);
 1015d74:	e351000f 	cmp	r1, #15
 1015d78:	8a000012 	bhi	1015dc8 <XScuGic_SoftwareIntr+0x84>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1015d7c:	e35200ff 	cmp	r2, #255	; 0xff
 1015d80:	8a000021 	bhi	1015e0c <XScuGic_SoftwareIntr+0xc8>
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1015d84:	e5900000 	ldr	r0, [r0]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 1015d88:	e1811802 	orr	r1, r1, r2, lsl #16
 1015d8c:	e3a0300f 	mov	r3, #15
 1015d90:	e34030ff 	movt	r3, #255	; 0xff
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1015d94:	e5902008 	ldr	r2, [r0, #8]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 1015d98:	e0033001 	and	r3, r3, r1
 1015d9c:	e5823f00 	str	r3, [r2, #3840]	; 0xf00
}
 1015da0:	e3a00000 	mov	r0, #0
 1015da4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015da8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015dac:	e30012b3 	movw	r1, #691	; 0x2b3
 1015db0:	e3400106 	movt	r0, #262	; 0x106
 1015db4:	eb000661 	bl	1017740 <Xil_Assert>
 1015db8:	e3a03001 	mov	r3, #1
}
 1015dbc:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015dc0:	e5843000 	str	r3, [r4]
}
 1015dc4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id <= 15U);
 1015dc8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015dcc:	e3a01fad 	mov	r1, #692	; 0x2b4
 1015dd0:	e3400106 	movt	r0, #262	; 0x106
 1015dd4:	eb000659 	bl	1017740 <Xil_Assert>
 1015dd8:	e3a03001 	mov	r3, #1
}
 1015ddc:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id <= 15U);
 1015de0:	e5843000 	str	r3, [r4]
}
 1015de4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1015de8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015dec:	e30012b2 	movw	r1, #690	; 0x2b2
 1015df0:	e3400106 	movt	r0, #262	; 0x106
 1015df4:	eb000651 	bl	1017740 <Xil_Assert>
 1015df8:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015dfc:	e3a02001 	mov	r2, #1
 1015e00:	e3403146 	movt	r3, #326	; 0x146
 1015e04:	e5832000 	str	r2, [r3]
 1015e08:	eaffffe4 	b	1015da0 <XScuGic_SoftwareIntr+0x5c>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1015e0c:	e30a0178 	movw	r0, #41336	; 0xa178
 1015e10:	e30012b5 	movw	r1, #693	; 0x2b5
 1015e14:	e3400106 	movt	r0, #262	; 0x106
 1015e18:	eb000648 	bl	1017740 <Xil_Assert>
 1015e1c:	e3a03001 	mov	r3, #1
 1015e20:	e5843000 	str	r3, [r4]
 1015e24:	eaffffdd 	b	1015da0 <XScuGic_SoftwareIntr+0x5c>

01015e28 <XScuGic_SetPriorityTriggerType>:
	u32 Index;
#endif
	u8 LocalPriority;
	LocalPriority = Priority;

	Xil_AssertVoid(InstancePtr != NULL);
 1015e28:	e3500000 	cmp	r0, #0
{
 1015e2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015e30:	0a000033 	beq	1015f04 <XScuGic_SetPriorityTriggerType+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015e34:	e590e004 	ldr	lr, [r0, #4]
 1015e38:	e301c111 	movw	ip, #4369	; 0x1111
 1015e3c:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015e40:	e3054f40 	movw	r4, #24384	; 0x5f40
 1015e44:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015e48:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1015e4c:	e3a0c000 	mov	ip, #0
 1015e50:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015e54:	1a00001c 	bne	1015ecc <XScuGic_SetPriorityTriggerType+0xa4>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015e58:	e351005e 	cmp	r1, #94	; 0x5e
 1015e5c:	8a000021 	bhi	1015ee8 <XScuGic_SetPriorityTriggerType+0xc0>
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1015e60:	e3530003 	cmp	r3, #3
 1015e64:	8a00002f 	bhi	1015f28 <XScuGic_SetPriorityTriggerType+0x100>
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1015e68:	e35200f8 	cmp	r2, #248	; 0xf8
 1015e6c:	8a000034 	bhi	1015f44 <XScuGic_SetPriorityTriggerType+0x11c>
#endif

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015e70:	e5905000 	ldr	r5, [r0]
 1015e74:	e3c1e003 	bic	lr, r1, #3
	LocalPriority = LocalPriority & (u8)XSCUGIC_INTR_PRIO_MASK;
	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1015e78:	e2010003 	and	r0, r1, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015e7c:	e28eeb01 	add	lr, lr, #1024	; 0x400
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1015e80:	e1a04180 	lsl	r4, r0, #3
 1015e84:	e3a080ff 	mov	r8, #255	; 0xff
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015e88:	e5956008 	ldr	r6, [r5, #8]
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1015e8c:	e20220f8 	and	r2, r2, #248	; 0xf8
				RegValue);

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015e90:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 1015e94:	e201100f 	and	r1, r1, #15
 1015e98:	e1a01081 	lsl	r1, r1, #1
 1015e9c:	e3a07003 	mov	r7, #3
	return *(volatile u32 *) Addr;
 1015ea0:	e79e0006 	ldr	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015ea4:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1015ea8:	e1c00418 	bic	r0, r0, r8, lsl r4
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1015eac:	e1800412 	orr	r0, r0, r2, lsl r4
	*LocalAddr = Value;
 1015eb0:	e78e0006 	str	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015eb4:	e5950008 	ldr	r0, [r5, #8]
	return *(volatile u32 *) Addr;
 1015eb8:	e790210c 	ldr	r2, [r0, ip, lsl #2]
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 1015ebc:	e1c22117 	bic	r2, r2, r7, lsl r1
	RegValue |= (u32)Trigger << ((Int_Id%16U)*2U);
 1015ec0:	e1821113 	orr	r1, r2, r3, lsl r1
	*LocalAddr = Value;
 1015ec4:	e780110c 	str	r1, [r0, ip, lsl #2]
 1015ec8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015ecc:	e30a0178 	movw	r0, #41336	; 0xa178
 1015ed0:	e3001312 	movw	r1, #786	; 0x312
 1015ed4:	e3400106 	movt	r0, #262	; 0x106
 1015ed8:	eb000618 	bl	1017740 <Xil_Assert>
 1015edc:	e3a03001 	mov	r3, #1
 1015ee0:	e5843000 	str	r3, [r4]
 1015ee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015ee8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015eec:	e3001313 	movw	r1, #787	; 0x313
 1015ef0:	e3400106 	movt	r0, #262	; 0x106
 1015ef4:	eb000611 	bl	1017740 <Xil_Assert>
 1015ef8:	e3a03001 	mov	r3, #1
 1015efc:	e5843000 	str	r3, [r4]
 1015f00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1015f04:	e30a0178 	movw	r0, #41336	; 0xa178
 1015f08:	e3001311 	movw	r1, #785	; 0x311
 1015f0c:	e3400106 	movt	r0, #262	; 0x106
 1015f10:	eb00060a 	bl	1017740 <Xil_Assert>
 1015f14:	e3053f40 	movw	r3, #24384	; 0x5f40
 1015f18:	e3a02001 	mov	r2, #1
 1015f1c:	e3403146 	movt	r3, #326	; 0x146
 1015f20:	e5832000 	str	r2, [r3]
 1015f24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1015f28:	e30a0178 	movw	r0, #41336	; 0xa178
 1015f2c:	e3a01fc5 	mov	r1, #788	; 0x314
 1015f30:	e3400106 	movt	r0, #262	; 0x106
 1015f34:	eb000601 	bl	1017740 <Xil_Assert>
 1015f38:	e3a03001 	mov	r3, #1
 1015f3c:	e5843000 	str	r3, [r4]
 1015f40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1015f44:	e30a0178 	movw	r0, #41336	; 0xa178
 1015f48:	e3001315 	movw	r1, #789	; 0x315
 1015f4c:	e3400106 	movt	r0, #262	; 0x106
 1015f50:	eb0005fa 	bl	1017740 <Xil_Assert>
 1015f54:	e3a03001 	mov	r3, #1
 1015f58:	e5843000 	str	r3, [r4]
	 * Write the value back to the register.
	 */
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_INT_CFG_OFFSET_CALC(Int_Id),
				RegValue);

}
 1015f5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01015f60 <XScuGic_GetPriorityTriggerType>:
void XScuGic_GetPriorityTriggerType(XScuGic *InstancePtr, u32 Int_Id,
					u8 *Priority, u8 *Trigger)
{
	u32 RegValue;

	Xil_AssertVoid(InstancePtr != NULL);
 1015f60:	e3500000 	cmp	r0, #0
{
 1015f64:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1015f68:	0a000030 	beq	1016030 <XScuGic_GetPriorityTriggerType+0xd0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015f6c:	e590e004 	ldr	lr, [r0, #4]
 1015f70:	e301c111 	movw	ip, #4369	; 0x1111
 1015f74:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1015f78:	e3054f40 	movw	r4, #24384	; 0x5f40
 1015f7c:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015f80:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1015f84:	e3a0c000 	mov	ip, #0
 1015f88:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015f8c:	1a000019 	bne	1015ff8 <XScuGic_GetPriorityTriggerType+0x98>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1015f90:	e351005e 	cmp	r1, #94	; 0x5e
 1015f94:	8a00001e 	bhi	1016014 <XScuGic_GetPriorityTriggerType+0xb4>
	Xil_AssertVoid(Priority != NULL);
 1015f98:	e3520000 	cmp	r2, #0
 1015f9c:	0a00002c 	beq	1016054 <XScuGic_GetPriorityTriggerType+0xf4>
	Xil_AssertVoid(Trigger != NULL);
 1015fa0:	e3530000 	cmp	r3, #0
 1015fa4:	0a000031 	beq	1016070 <XScuGic_GetPriorityTriggerType+0x110>

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015fa8:	e590c000 	ldr	ip, [r0]

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 1015fac:	e201e003 	and	lr, r1, #3
 1015fb0:	e1a0418e 	lsl	r4, lr, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015fb4:	e3c15003 	bic	r5, r1, #3
 1015fb8:	e2855b01 	add	r5, r5, #1024	; 0x400
 1015fbc:	e59ce008 	ldr	lr, [ip, #8]
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015fc0:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1015fc4:	e201100f 	and	r1, r1, #15
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015fc8:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1015fcc:	e1a01081 	lsl	r1, r1, #1
	return *(volatile u32 *) Addr;
 1015fd0:	e795e00e 	ldr	lr, [r5, lr]
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 1015fd4:	e1a0e43e 	lsr	lr, lr, r4
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);
 1015fd8:	e5c2e000 	strb	lr, [r2]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1015fdc:	e5902000 	ldr	r2, [r0]
 1015fe0:	e5922008 	ldr	r2, [r2, #8]
 1015fe4:	e792210c 	ldr	r2, [r2, ip, lsl #2]
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1015fe8:	e1a01132 	lsr	r1, r2, r1

	*Trigger = (u8)(RegValue & XSCUGIC_INT_CFG_MASK);
 1015fec:	e2011003 	and	r1, r1, #3
 1015ff0:	e5c31000 	strb	r1, [r3]
 1015ff4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1015ff8:	e30a0178 	movw	r0, #41336	; 0xa178
 1015ffc:	e3001367 	movw	r1, #871	; 0x367
 1016000:	e3400106 	movt	r0, #262	; 0x106
 1016004:	eb0005cd 	bl	1017740 <Xil_Assert>
 1016008:	e3a03001 	mov	r3, #1
 101600c:	e5843000 	str	r3, [r4]
 1016010:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1016014:	e30a0178 	movw	r0, #41336	; 0xa178
 1016018:	e3a01fda 	mov	r1, #872	; 0x368
 101601c:	e3400106 	movt	r0, #262	; 0x106
 1016020:	eb0005c6 	bl	1017740 <Xil_Assert>
 1016024:	e3a03001 	mov	r3, #1
 1016028:	e5843000 	str	r3, [r4]
 101602c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016030:	e30a0178 	movw	r0, #41336	; 0xa178
 1016034:	e3001366 	movw	r1, #870	; 0x366
 1016038:	e3400106 	movt	r0, #262	; 0x106
 101603c:	eb0005bf 	bl	1017740 <Xil_Assert>
 1016040:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016044:	e3a02001 	mov	r2, #1
 1016048:	e3403146 	movt	r3, #326	; 0x146
 101604c:	e5832000 	str	r2, [r3]
 1016050:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Priority != NULL);
 1016054:	e30a0178 	movw	r0, #41336	; 0xa178
 1016058:	e3001369 	movw	r1, #873	; 0x369
 101605c:	e3400106 	movt	r0, #262	; 0x106
 1016060:	eb0005b6 	bl	1017740 <Xil_Assert>
 1016064:	e3a03001 	mov	r3, #1
 1016068:	e5843000 	str	r3, [r4]
 101606c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Trigger != NULL);
 1016070:	e30a0178 	movw	r0, #41336	; 0xa178
 1016074:	e300136a 	movw	r1, #874	; 0x36a
 1016078:	e3400106 	movt	r0, #262	; 0x106
 101607c:	eb0005af 	bl	1017740 <Xil_Assert>
 1016080:	e3a03001 	mov	r3, #1
 1016084:	e5843000 	str	r3, [r4]
}
 1016088:	e8bd8070 	pop	{r4, r5, r6, pc}

0101608c <XScuGic_InterruptMaptoCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 101608c:	e3500000 	cmp	r0, #0
{
 1016090:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1016094:	0a000010 	beq	10160dc <XScuGic_InterruptMaptoCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1016098:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 101609c:	e305cf40 	movw	ip, #24384	; 0x5f40
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10160a0:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 10160a4:	e340c146 	movt	ip, #326	; 0x146
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10160a8:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 10160ac:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10160b0:	e593e008 	ldr	lr, [r3, #8]
			XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 10160b4:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 10160b8:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 10160bc:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 10160c0:	e2022003 	and	r2, r2, #3
 10160c4:	e790100e 	ldr	r1, [r0, lr]

	RegValue |= (Cpu_Id) << (Offset*8U);
 10160c8:	e1a02182 	lsl	r2, r2, #3
 10160cc:	e6ef3073 	uxtb	r3, r3
 10160d0:	e1813213 	orr	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 10160d4:	e780300e 	str	r3, [r0, lr]
 10160d8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10160dc:	e30a0178 	movw	r0, #41336	; 0xa178
 10160e0:	e30013a5 	movw	r1, #933	; 0x3a5
 10160e4:	e3400106 	movt	r0, #262	; 0x106
 10160e8:	eb000594 	bl	1017740 <Xil_Assert>
 10160ec:	e3053f40 	movw	r3, #24384	; 0x5f40
 10160f0:	e3a02001 	mov	r2, #1
 10160f4:	e3403146 	movt	r3, #326	; 0x146
 10160f8:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
					XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
					RegValue);
#endif
}
 10160fc:	e8bd8010 	pop	{r4, pc}

01016100 <XScuGic_Enable>:
{
 1016100:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1016104:	e3003044 	movw	r3, #68	; 0x44
	Xil_AssertVoid(InstancePtr != NULL);
 1016108:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 101610c:	e3403107 	movt	r3, #263	; 0x107
{
 1016110:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1016114:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1016118:	0a000024 	beq	10161b0 <XScuGic_Enable+0xb0>
 101611c:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1016120:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1016124:	e3405146 	movt	r5, #326	; 0x146
 1016128:	e3a03000 	mov	r3, #0
 101612c:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1016130:	8a000017 	bhi	1016194 <XScuGic_Enable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016134:	e5962004 	ldr	r2, [r6, #4]
 1016138:	e3013111 	movw	r3, #4369	; 0x1111
 101613c:	e3413111 	movt	r3, #4369	; 0x1111
 1016140:	e1520003 	cmp	r2, r3
 1016144:	1a00000b 	bne	1016178 <XScuGic_Enable+0x78>
	XScuGic_InterruptMaptoCpu(InstancePtr, Cpu_Id, Int_Id);
 1016148:	e1a02004 	mov	r2, r4
 101614c:	e6ef1071 	uxtb	r1, r1
 1016150:	ebffffcd 	bl	101608c <XScuGic_InterruptMaptoCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1016154:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1016158:	e204101f 	and	r1, r4, #31
 101615c:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1016160:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1016164:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1016168:	e5922008 	ldr	r2, [r2, #8]
 101616c:	e2844040 	add	r4, r4, #64	; 0x40
 1016170:	e7823104 	str	r3, [r2, r4, lsl #2]
 1016174:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016178:	e30a0178 	movw	r0, #41336	; 0xa178
 101617c:	e300123d 	movw	r1, #573	; 0x23d
 1016180:	e3400106 	movt	r0, #262	; 0x106
 1016184:	eb00056d 	bl	1017740 <Xil_Assert>
 1016188:	e3a03001 	mov	r3, #1
 101618c:	e5853000 	str	r3, [r5]
}
 1016190:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1016194:	e30a0178 	movw	r0, #41336	; 0xa178
 1016198:	e3a01f8f 	mov	r1, #572	; 0x23c
 101619c:	e3400106 	movt	r0, #262	; 0x106
 10161a0:	eb000566 	bl	1017740 <Xil_Assert>
 10161a4:	e3a03001 	mov	r3, #1
 10161a8:	e5853000 	str	r3, [r5]
 10161ac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10161b0:	e30a0178 	movw	r0, #41336	; 0xa178
 10161b4:	e300123b 	movw	r1, #571	; 0x23b
 10161b8:	e3400106 	movt	r0, #262	; 0x106
 10161bc:	eb00055f 	bl	1017740 <Xil_Assert>
 10161c0:	e3053f40 	movw	r3, #24384	; 0x5f40
 10161c4:	e3a02001 	mov	r2, #1
 10161c8:	e3403146 	movt	r3, #326	; 0x146
 10161cc:	e5832000 	str	r2, [r3]
 10161d0:	e8bd8070 	pop	{r4, r5, r6, pc}

010161d4 <XScuGic_InterruptUnmapFromCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 10161d4:	e3500000 	cmp	r0, #0
{
 10161d8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10161dc:	0a000010 	beq	1016224 <XScuGic_InterruptUnmapFromCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10161e0:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 10161e4:	e305cf40 	movw	ip, #24384	; 0x5f40
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10161e8:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 10161ec:	e340c146 	movt	ip, #326	; 0x146
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10161f0:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 10161f4:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10161f8:	e593e008 	ldr	lr, [r3, #8]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 10161fc:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 1016200:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 1016204:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 1016208:	e2022003 	and	r2, r2, #3
	return *(volatile u32 *) Addr;
 101620c:	e790100e 	ldr	r1, [r0, lr]

	RegValue &= ~(Cpu_Id << (Offset*8U));
 1016210:	e1a02182 	lsl	r2, r2, #3
 1016214:	e6ef3073 	uxtb	r3, r3
 1016218:	e1c13213 	bic	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 101621c:	e780300e 	str	r3, [r0, lr]
 1016220:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016224:	e30a0178 	movw	r0, #41336	; 0xa178
 1016228:	e30013d1 	movw	r1, #977	; 0x3d1
 101622c:	e3400106 	movt	r0, #262	; 0x106
 1016230:	eb000542 	bl	1017740 <Xil_Assert>
 1016234:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016238:	e3a02001 	mov	r2, #1
 101623c:	e3403146 	movt	r3, #326	; 0x146
 1016240:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
			RegValue);
#endif
}
 1016244:	e8bd8010 	pop	{r4, pc}

01016248 <XScuGic_Disable>:
{
 1016248:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 101624c:	e3003044 	movw	r3, #68	; 0x44
	Xil_AssertVoid(InstancePtr != NULL);
 1016250:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1016254:	e3403107 	movt	r3, #263	; 0x107
{
 1016258:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 101625c:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1016260:	0a000024 	beq	10162f8 <XScuGic_Disable+0xb0>
 1016264:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1016268:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 101626c:	e3405146 	movt	r5, #326	; 0x146
 1016270:	e3a03000 	mov	r3, #0
 1016274:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1016278:	8a000017 	bhi	10162dc <XScuGic_Disable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101627c:	e5962004 	ldr	r2, [r6, #4]
 1016280:	e3013111 	movw	r3, #4369	; 0x1111
 1016284:	e3413111 	movt	r3, #4369	; 0x1111
 1016288:	e1520003 	cmp	r2, r3
 101628c:	1a00000b 	bne	10162c0 <XScuGic_Disable+0x78>
	XScuGic_InterruptUnmapFromCpu(InstancePtr, Cpu_Id, Int_Id);
 1016290:	e1a02004 	mov	r2, r4
 1016294:	e6ef1071 	uxtb	r1, r1
 1016298:	ebffffcd 	bl	10161d4 <XScuGic_InterruptUnmapFromCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 101629c:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 10162a0:	e204101f 	and	r1, r4, #31
 10162a4:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10162a8:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 10162ac:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10162b0:	e5922008 	ldr	r2, [r2, #8]
 10162b4:	e2844060 	add	r4, r4, #96	; 0x60
 10162b8:	e7823104 	str	r3, [r2, r4, lsl #2]
 10162bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10162c0:	e30a0178 	movw	r0, #41336	; 0xa178
 10162c4:	e3a01f9e 	mov	r1, #632	; 0x278
 10162c8:	e3400106 	movt	r0, #262	; 0x106
 10162cc:	eb00051b 	bl	1017740 <Xil_Assert>
 10162d0:	e3a03001 	mov	r3, #1
 10162d4:	e5853000 	str	r3, [r5]
}
 10162d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10162dc:	e30a0178 	movw	r0, #41336	; 0xa178
 10162e0:	e3001277 	movw	r1, #631	; 0x277
 10162e4:	e3400106 	movt	r0, #262	; 0x106
 10162e8:	eb000514 	bl	1017740 <Xil_Assert>
 10162ec:	e3a03001 	mov	r3, #1
 10162f0:	e5853000 	str	r3, [r5]
 10162f4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10162f8:	e30a0178 	movw	r0, #41336	; 0xa178
 10162fc:	e3001276 	movw	r1, #630	; 0x276
 1016300:	e3400106 	movt	r0, #262	; 0x106
 1016304:	eb00050d 	bl	1017740 <Xil_Assert>
 1016308:	e3053f40 	movw	r3, #24384	; 0x5f40
 101630c:	e3a02001 	mov	r2, #1
 1016310:	e3403146 	movt	r3, #326	; 0x146
 1016314:	e5832000 	str	r2, [r3]
 1016318:	e8bd8070 	pop	{r4, r5, r6, pc}

0101631c <XScuGic_UnmapAllInterruptsFromCpu>:
{
	u32 Int_Id;
	u32 Target_Cpu;
	u32 LocalCpuID = (1U << Cpu_Id);

	Xil_AssertVoid(InstancePtr != NULL);
 101631c:	e3500000 	cmp	r0, #0
{
 1016320:	e92d4010 	push	{r4, lr}
	u32 LocalCpuID = (1U << Cpu_Id);
 1016324:	e3a04001 	mov	r4, #1
 1016328:	e1a01114 	lsl	r1, r4, r1
	Xil_AssertVoid(InstancePtr != NULL);
 101632c:	0a000011 	beq	1016378 <XScuGic_UnmapAllInterruptsFromCpu+0x5c>

	LocalCpuID |= LocalCpuID << 8U;
 1016330:	e1811401 	orr	r1, r1, r1, lsl #8
	Xil_AssertVoid(InstancePtr != NULL);
 1016334:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016338:	e3403146 	movt	r3, #326	; 0x146
	LocalCpuID |= LocalCpuID << 16U;

	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 101633c:	e590c000 	ldr	ip, [r0]
	LocalCpuID |= LocalCpuID << 16U;
 1016340:	e1811801 	orr	r1, r1, r1, lsl #16
	Xil_AssertVoid(InstancePtr != NULL);
 1016344:	e3a02000 	mov	r2, #0
 1016348:	e5832000 	str	r2, [r3]
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 101634c:	e3a03020 	mov	r3, #32
 1016350:	e1e00001 	mvn	r0, r1
		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1016354:	e59c2008 	ldr	r2, [ip, #8]
 1016358:	e2822b02 	add	r2, r2, #2048	; 0x800
	return *(volatile u32 *) Addr;
 101635c:	e7921003 	ldr	r1, [r2, r3]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));
		/* Remove LocalCpuID from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1016360:	e0011000 	and	r1, r1, r0
	*LocalAddr = Value;
 1016364:	e7821003 	str	r1, [r2, r3]
			Int_Id = Int_Id+4U) {
 1016368:	e2833004 	add	r3, r3, #4
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 101636c:	e3530060 	cmp	r3, #96	; 0x60
 1016370:	1afffff7 	bne	1016354 <XScuGic_UnmapAllInterruptsFromCpu+0x38>
 1016374:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016378:	e30a0178 	movw	r0, #41336	; 0xa178
 101637c:	e30013f1 	movw	r1, #1009	; 0x3f1
 1016380:	e3400106 	movt	r0, #262	; 0x106
 1016384:	eb0004ed 	bl	1017740 <Xil_Assert>
 1016388:	e3053f40 	movw	r3, #24384	; 0x5f40
 101638c:	e3403146 	movt	r3, #326	; 0x146
 1016390:	e5834000 	str	r4, [r3]
 1016394:	e8bd8010 	pop	{r4, pc}

01016398 <XScuGic_Stop>:
{
	u32 Int_Id;
	u32 RegValue;
	u32 Target_Cpu;
	u32 DistDisable = 1; /* Track distributor status*/
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1016398:	e3003044 	movw	r3, #68	; 0x44

	Xil_AssertVoid(InstancePtr != NULL);
 101639c:	e3500000 	cmp	r0, #0
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 10163a0:	e3403107 	movt	r3, #263	; 0x107
{
 10163a4:	e92d4070 	push	{r4, r5, r6, lr}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 10163a8:	e593e000 	ldr	lr, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 10163ac:	0a000027 	beq	1016450 <XScuGic_Stop+0xb8>
 10163b0:	e3053f40 	movw	r3, #24384	; 0x5f40
 10163b4:	e3a02000 	mov	r2, #0

	/* If distributor is already disabled, no need to do anything */
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 10163b8:	e5904000 	ldr	r4, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 10163bc:	e3403146 	movt	r3, #326	; 0x146
 10163c0:	e5832000 	str	r2, [r3]
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 10163c4:	e5941008 	ldr	r1, [r4, #8]
	return *(volatile u32 *) Addr;
 10163c8:	e5913000 	ldr	r3, [r1]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 10163cc:	e3130001 	tst	r3, #1
 10163d0:	08bd8070 	popeq	{r4, r5, r6, pc}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 10163d4:	e3a0c001 	mov	ip, #1
	/*
	 * Check if the interrupt are targeted to current cpu only or not.
	 * Also remove current cpu from interrupt target register for all
	 * interrupts.
	 */
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10163d8:	e3a02020 	mov	r2, #32
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 10163dc:	e1a0ee1c 	lsl	lr, ip, lr
	LocalCpuID |= LocalCpuID << 8U;
 10163e0:	e18ee40e 	orr	lr, lr, lr, lsl #8
	LocalCpuID |= LocalCpuID << 16U;
 10163e4:	e18ee80e 	orr	lr, lr, lr, lsl #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10163e8:	e1e0500e 	mvn	r5, lr
 10163ec:	ea000000 	b	10163f4 <XScuGic_Stop+0x5c>
 10163f0:	e5941008 	ldr	r1, [r4, #8]
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 10163f4:	e2820b02 	add	r0, r2, #2048	; 0x800
			Int_Id = Int_Id+4U) {
 10163f8:	e2822004 	add	r2, r2, #4
 10163fc:	e7903001 	ldr	r3, [r0, r1]
		if ((Target_Cpu != LocalCpuID) && (Target_Cpu != 0)) {
			/*
			 * If any other CPU is also programmed to target
			 * register, GIC distributor can not be disabled.
			 */
			DistDisable = 0;
 1016400:	e15e0003 	cmp	lr, r3
 1016404:	13530000 	cmpne	r3, #0
		}

		/* Remove current CPU from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1016408:	e0033005 	and	r3, r3, r5
			DistDisable = 0;
 101640c:	13a0c000 	movne	ip, #0
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1016410:	e3520060 	cmp	r2, #96	; 0x60
	*LocalAddr = Value;
 1016414:	e7803001 	str	r3, [r0, r1]
 1016418:	1afffff4 	bne	10163f0 <XScuGic_Stop+0x58>

	/*
	 * If GIC distributor is safe to be disabled, disable all the interrupt
	 * and then disable distributor.
	 */
	if (DistDisable == 1) {
 101641c:	e35c0001 	cmp	ip, #1
 1016420:	18bd8070 	popne	{r4, r5, r6, pc}
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
				Int_Id = Int_Id+32U) {
			/*
			 * Disable all the interrupts
			 */
			XScuGic_DistWriteReg(InstancePtr,
 1016424:	e5941008 	ldr	r1, [r4, #8]
 1016428:	e3e03000 	mvn	r3, #0
 101642c:	e3a02000 	mov	r2, #0
 1016430:	e5813180 	str	r3, [r1, #384]	; 0x180
 1016434:	e5941008 	ldr	r1, [r4, #8]
 1016438:	e5813184 	str	r3, [r1, #388]	; 0x184
 101643c:	e5941008 	ldr	r1, [r4, #8]
 1016440:	e5813188 	str	r3, [r1, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1016444:	e5943008 	ldr	r3, [r4, #8]
	*LocalAddr = Value;
 1016448:	e5832000 	str	r2, [r3]
							Int_Id),
			0xFFFFFFFFU);
		}
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET, 0U);
	}
}
 101644c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016450:	e30a0178 	movw	r0, #41336	; 0xa178
 1016454:	e3001419 	movw	r1, #1049	; 0x419
 1016458:	e3400106 	movt	r0, #262	; 0x106
 101645c:	eb0004b7 	bl	1017740 <Xil_Assert>
 1016460:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016464:	e3a02001 	mov	r2, #1
 1016468:	e3403146 	movt	r3, #326	; 0x146
 101646c:	e5832000 	str	r2, [r3]
 1016470:	e8bd8070 	pop	{r4, r5, r6, pc}

01016474 <XScuGic_CfgInitialize>:
{
 1016474:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016478:	e2504000 	subs	r4, r0, #0
 101647c:	0a000049 	beq	10165a8 <XScuGic_CfgInitialize+0x134>
 1016480:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1016484:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016488:	e3405146 	movt	r5, #326	; 0x146
 101648c:	e3a02000 	mov	r2, #0
 1016490:	e5852000 	str	r2, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1016494:	0a00004c 	beq	10165cc <XScuGic_CfgInitialize+0x158>
	if(InstancePtr->IsReady != XIL_COMPONENT_IS_READY) {
 1016498:	e5940004 	ldr	r0, [r4, #4]
 101649c:	e3013111 	movw	r3, #4369	; 0x1111
 10164a0:	e3413111 	movt	r3, #4369	; 0x1111
 10164a4:	e1500003 	cmp	r0, r3
 10164a8:	0a00001e 	beq	1016528 <XScuGic_CfgInitialize+0xb4>
						= (Xil_InterruptHandler)StubHandler;
 10164ac:	e305cb54 	movw	ip, #23380	; 0x5b54
 10164b0:	e1a03001 	mov	r3, r1
 10164b4:	e340c101 	movt	ip, #257	; 0x101
 10164b8:	e2810fbe 	add	r0, r1, #760	; 0x2f8
		InstancePtr->IsReady = 0U;
 10164bc:	e5842004 	str	r2, [r4, #4]
		InstancePtr->Config = ConfigPtr;
 10164c0:	e5841000 	str	r1, [r4]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 10164c4:	e593200c 	ldr	r2, [r3, #12]
 10164c8:	e2833008 	add	r3, r3, #8
			InstancePtr->Config->HandlerTable[Int_Id].CallBackRef =
 10164cc:	e5834008 	str	r4, [r3, #8]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 10164d0:	e3520000 	cmp	r2, #0
						= (Xil_InterruptHandler)StubHandler;
 10164d4:	0583c004 	streq	ip, [r3, #4]
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 10164d8:	e1500003 	cmp	r0, r3
 10164dc:	1afffff8 	bne	10164c4 <XScuGic_CfgInitialize+0x50>
		XScuGic_Stop(InstancePtr);
 10164e0:	e1a00004 	mov	r0, r4
 10164e4:	ebffffab 	bl	1016398 <XScuGic_Stop>
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 10164e8:	e5941000 	ldr	r1, [r4]
	Xil_AssertVoid(InstancePtr != NULL);
 10164ec:	e3a03000 	mov	r3, #0
 10164f0:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 10164f4:	e5910008 	ldr	r0, [r1, #8]
 10164f8:	e5903000 	ldr	r3, [r0]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 10164fc:	e2133001 	ands	r3, r3, #1
 1016500:	0a00000a 	beq	1016530 <XScuGic_CfgInitialize+0xbc>
	XScuGic_CPUWriteReg(InstancePtr, XSCUGIC_CPU_PRIOR_OFFSET, 0xF0U);
 1016504:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1016508:	e3a0c0f0 	mov	ip, #240	; 0xf0
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 101650c:	e3013111 	movw	r3, #4369	; 0x1111
 1016510:	e3a00007 	mov	r0, #7
 1016514:	e3413111 	movt	r3, #4369	; 0x1111
 1016518:	e582c004 	str	ip, [r2, #4]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 101651c:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1016520:	e5820000 	str	r0, [r2]
 1016524:	e5843004 	str	r3, [r4, #4]
}
 1016528:	e3a00000 	mov	r0, #0
 101652c:	e8bd8070 	pop	{r4, r5, r6, pc}
 1016530:	e1a0c003 	mov	ip, r3
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1016534:	e3a02020 	mov	r2, #32
 1016538:	e5803000 	str	r3, [r0]
		XScuGic_DistWriteReg(InstancePtr,
 101653c:	e1a03222 	lsr	r3, r2, #4
 1016540:	e5910008 	ldr	r0, [r1, #8]
			Int_Id = Int_Id+16U) {
 1016544:	e2822010 	add	r2, r2, #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1016548:	e3520060 	cmp	r2, #96	; 0x60
		XScuGic_DistWriteReg(InstancePtr,
 101654c:	e2833c03 	add	r3, r3, #768	; 0x300
 1016550:	e780c103 	str	ip, [r0, r3, lsl #2]
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1016554:	1afffff8 	bne	101653c <XScuGic_CfgInitialize+0xc8>
 1016558:	e30a00a0 	movw	r0, #41120	; 0xa0a0
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 101655c:	e3a03000 	mov	r3, #0
 1016560:	e34a00a0 	movt	r0, #41120	; 0xa0a0
		XScuGic_DistWriteReg(InstancePtr,
 1016564:	e5912008 	ldr	r2, [r1, #8]
 1016568:	e2822b01 	add	r2, r2, #1024	; 0x400
 101656c:	e7820003 	str	r0, [r2, r3]
			Int_Id = Int_Id+4U) {
 1016570:	e2833004 	add	r3, r3, #4
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1016574:	e3530060 	cmp	r3, #96	; 0x60
 1016578:	1afffff9 	bne	1016564 <XScuGic_CfgInitialize+0xf0>
		XScuGic_DistWriteReg(InstancePtr,
 101657c:	e5910008 	ldr	r0, [r1, #8]
 1016580:	e3e03000 	mvn	r3, #0
 1016584:	e3a02001 	mov	r2, #1
 1016588:	e5803180 	str	r3, [r0, #384]	; 0x180
 101658c:	e5910008 	ldr	r0, [r1, #8]
 1016590:	e5803184 	str	r3, [r0, #388]	; 0x184
 1016594:	e5910008 	ldr	r0, [r1, #8]
 1016598:	e5803188 	str	r3, [r0, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 101659c:	e5913008 	ldr	r3, [r1, #8]
	*LocalAddr = Value;
 10165a0:	e5832000 	str	r2, [r3]
 10165a4:	eaffffd6 	b	1016504 <XScuGic_CfgInitialize+0x90>
	Xil_AssertNonvoid(InstancePtr != NULL);
 10165a8:	e30a0178 	movw	r0, #41336	; 0xa178
 10165ac:	e3001181 	movw	r1, #385	; 0x181
 10165b0:	e3400106 	movt	r0, #262	; 0x106
 10165b4:	eb000461 	bl	1017740 <Xil_Assert>
 10165b8:	e3053f40 	movw	r3, #24384	; 0x5f40
 10165bc:	e3a02001 	mov	r2, #1
 10165c0:	e3403146 	movt	r3, #326	; 0x146
 10165c4:	e5832000 	str	r2, [r3]
 10165c8:	eaffffd6 	b	1016528 <XScuGic_CfgInitialize+0xb4>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 10165cc:	e30a0178 	movw	r0, #41336	; 0xa178
 10165d0:	e3001182 	movw	r1, #386	; 0x182
 10165d4:	e3400106 	movt	r0, #262	; 0x106
 10165d8:	eb000458 	bl	1017740 <Xil_Assert>
 10165dc:	e3a03001 	mov	r3, #1
 10165e0:	e5853000 	str	r3, [r5]
 10165e4:	eaffffcf 	b	1016528 <XScuGic_CfgInitialize+0xb4>

010165e8 <XScuGic_SetCpuID>:
* @note		None
*
*****************************************************************************/
void XScuGic_SetCpuID(u32 CpuCoreId)
{
	Xil_AssertVoid(CpuCoreId <= 1U);
 10165e8:	e3500001 	cmp	r0, #1
 10165ec:	8a000007 	bhi	1016610 <XScuGic_SetCpuID+0x28>
 10165f0:	e3052f40 	movw	r2, #24384	; 0x5f40

	CpuId = CpuCoreId;
 10165f4:	e3003044 	movw	r3, #68	; 0x44
	Xil_AssertVoid(CpuCoreId <= 1U);
 10165f8:	e3402146 	movt	r2, #326	; 0x146
 10165fc:	e3a01000 	mov	r1, #0
	CpuId = CpuCoreId;
 1016600:	e3403107 	movt	r3, #263	; 0x107
	Xil_AssertVoid(CpuCoreId <= 1U);
 1016604:	e5821000 	str	r1, [r2]
	CpuId = CpuCoreId;
 1016608:	e5830000 	str	r0, [r3]
 101660c:	e12fff1e 	bx	lr
	Xil_AssertVoid(CpuCoreId <= 1U);
 1016610:	e30a0178 	movw	r0, #41336	; 0xa178
{
 1016614:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CpuCoreId <= 1U);
 1016618:	e300145d 	movw	r1, #1117	; 0x45d
 101661c:	e3400106 	movt	r0, #262	; 0x106
 1016620:	eb000446 	bl	1017740 <Xil_Assert>
 1016624:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016628:	e3a02001 	mov	r2, #1
 101662c:	e3403146 	movt	r3, #326	; 0x146
 1016630:	e5832000 	str	r2, [r3]
}
 1016634:	e8bd8010 	pop	{r4, pc}

01016638 <XScuGic_GetCpuID>:
* @note        None.
*
*****************************************************************************/
u32 XScuGic_GetCpuID(void)
{
	return CpuId;
 1016638:	e3003044 	movw	r3, #68	; 0x44
 101663c:	e3403107 	movt	r3, #263	; 0x107
}
 1016640:	e5930000 	ldr	r0, [r3]
 1016644:	e12fff1e 	bx	lr

01016648 <XScuGic_LookupConfig>:
{
	XScuGic_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_SCUGIC_NUM_INSTANCES; Index++) {
		if (XScuGic_ConfigTable[Index].DeviceId == DeviceId) {
 1016648:	e30a3640 	movw	r3, #42560	; 0xa640
 101664c:	e3403106 	movt	r3, #262	; 0x106
 1016650:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuGic_Config *)CfgPtr;
}
 1016654:	e1520000 	cmp	r2, r0
 1016658:	01a00003 	moveq	r0, r3
 101665c:	13a00000 	movne	r0, #0
 1016660:	e12fff1e 	bx	lr

01016664 <XScuGic_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32  XScuGic_SelfTest(XScuGic *InstancePtr)
{
 1016664:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;

	/*
	 * Assert the arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016668:	e2506000 	subs	r6, r0, #0
 101666c:	0a00001f 	beq	10166f0 <XScuGic_SelfTest+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016670:	e5962004 	ldr	r2, [r6, #4]
 1016674:	e3013111 	movw	r3, #4369	; 0x1111
 1016678:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101667c:	e3055f40 	movw	r5, #24384	; 0x5f40
 1016680:	e3405146 	movt	r5, #326	; 0x146
 1016684:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016688:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101668c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016690:	1a00000e 	bne	10166d0 <XScuGic_SelfTest+0x6c>

	/*
	 * Read the ID registers.
	 */
	for (Index = 0U; Index <= 3U; Index++) {
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1016694:	e5963000 	ldr	r3, [r6]
			((u32)XSCUGIC_PCELLID_OFFSET + (Index * 4U))) <<
			(Index * 8U);
	}

	if (XSCUGIC_PCELL_ID != RegValue1) {
 1016698:	e30f400d 	movw	r4, #61453	; 0xf00d
 101669c:	e34b4105 	movt	r4, #45317	; 0xb105
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 10166a0:	e5933008 	ldr	r3, [r3, #8]
	return *(volatile u32 *) Addr;
 10166a4:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
 10166a8:	e5931ff4 	ldr	r1, [r3, #4084]	; 0xff4
 10166ac:	e5930ff8 	ldr	r0, [r3, #4088]	; 0xff8
 10166b0:	e5933ffc 	ldr	r3, [r3, #4092]	; 0xffc
			((u32)XSCUGIC_PCELLID_OFFSET + (Index * 4U))) <<
 10166b4:	e1a00800 	lsl	r0, r0, #16
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 10166b8:	e1800401 	orr	r0, r0, r1, lsl #8
 10166bc:	e1800c03 	orr	r0, r0, r3, lsl #24
 10166c0:	e1800002 	orr	r0, r0, r2
	if (XSCUGIC_PCELL_ID != RegValue1) {
 10166c4:	e0500004 	subs	r0, r0, r4
 10166c8:	13a00001 	movne	r0, #1
		Status = XST_FAILURE;
	} else {
		Status = XST_SUCCESS;
	}
	return Status;
}
 10166cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10166d0:	e30a0184 	movw	r0, #41348	; 0xa184
 10166d4:	e3a0105e 	mov	r1, #94	; 0x5e
 10166d8:	e3400106 	movt	r0, #262	; 0x106
 10166dc:	eb000417 	bl	1017740 <Xil_Assert>
 10166e0:	e3a03001 	mov	r3, #1
 10166e4:	e1a00004 	mov	r0, r4
 10166e8:	e5853000 	str	r3, [r5]
 10166ec:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10166f0:	e30a0184 	movw	r0, #41348	; 0xa184
 10166f4:	e3a0105d 	mov	r1, #93	; 0x5d
 10166f8:	e3400106 	movt	r0, #262	; 0x106
 10166fc:	eb00040f 	bl	1017740 <Xil_Assert>
 1016700:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016704:	e3a02001 	mov	r2, #1
 1016708:	e3403146 	movt	r3, #326	; 0x146
 101670c:	e1a00006 	mov	r0, r6
 1016710:	e5832000 	str	r2, [r3]
 1016714:	e8bd8070 	pop	{r4, r5, r6, pc}

01016718 <XScuTimer_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XScuTimer_CfgInitialize(XScuTimer *InstancePtr,
			 XScuTimer_Config *ConfigPtr, u32 EffectiveAddress)
{
 1016718:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;
	Xil_AssertNonvoid(InstancePtr != NULL);
 101671c:	e2505000 	subs	r5, r0, #0
 1016720:	0a000016 	beq	1016780 <XScuTimer_CfgInitialize+0x68>
 1016724:	e3056f40 	movw	r6, #24384	; 0x5f40
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1016728:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 101672c:	e3406146 	movt	r6, #326	; 0x146
 1016730:	e3a03000 	mov	r3, #0
 1016734:	e1a04001 	mov	r4, r1
 1016738:	e5863000 	str	r3, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101673c:	0a000019 	beq	10167a8 <XScuTimer_CfgInitialize+0x90>
	 * If the device is started, disallow the initialize and return a
	 * status indicating it is started. This allows the user to stop the
	 * device and reinitialize, but prevents a user from inadvertently
	 * initializing.
	 */
	if (InstancePtr->IsStarted != XIL_COMPONENT_IS_STARTED) {
 1016740:	e595000c 	ldr	r0, [r5, #12]
 1016744:	e3021222 	movw	r1, #8738	; 0x2222
 1016748:	e3421222 	movt	r1, #8738	; 0x2222
 101674c:	e1500001 	cmp	r0, r1
 1016750:	0a000008 	beq	1016778 <XScuTimer_CfgInitialize+0x60>
		/*
		 * Copy configuration into the instance structure.
		 */
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1016754:	e1d4c0b0 	ldrh	ip, [r4]
		InstancePtr->IsStarted = (u32)0;

		/*
		 * Indicate the instance is ready to use, successfully initialized.
		 */
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1016758:	e3011111 	movw	r1, #4369	; 0x1111
 101675c:	e3411111 	movt	r1, #4369	; 0x1111

		Status =(s32)XST_SUCCESS;
 1016760:	e1a00003 	mov	r0, r3
		InstancePtr->Config.BaseAddr = EffectiveAddress;
 1016764:	e5852004 	str	r2, [r5, #4]
		InstancePtr->IsStarted = (u32)0;
 1016768:	e585300c 	str	r3, [r5, #12]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 101676c:	e1c5c0b0 	strh	ip, [r5]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1016770:	e5851008 	str	r1, [r5, #8]
	}
	else {
		Status = (s32)XST_DEVICE_IS_STARTED;
	}
	return Status;
}
 1016774:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 1016778:	e3a00005 	mov	r0, #5
 101677c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016780:	e30a0198 	movw	r0, #41368	; 0xa198
 1016784:	e3a01054 	mov	r1, #84	; 0x54
 1016788:	e3400106 	movt	r0, #262	; 0x106
 101678c:	eb0003eb 	bl	1017740 <Xil_Assert>
 1016790:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016794:	e3a02001 	mov	r2, #1
 1016798:	e3403146 	movt	r3, #326	; 0x146
 101679c:	e1a00005 	mov	r0, r5
 10167a0:	e5832000 	str	r2, [r3]
 10167a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 10167a8:	e30a0198 	movw	r0, #41368	; 0xa198
 10167ac:	e3a01055 	mov	r1, #85	; 0x55
 10167b0:	e3400106 	movt	r0, #262	; 0x106
 10167b4:	eb0003e1 	bl	1017740 <Xil_Assert>
 10167b8:	e3a03001 	mov	r3, #1
 10167bc:	e1a00004 	mov	r0, r4
 10167c0:	e5863000 	str	r3, [r6]
 10167c4:	e8bd8070 	pop	{r4, r5, r6, pc}

010167c8 <XScuTimer_Start>:
******************************************************************************/
void XScuTimer_Start(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 10167c8:	e3500000 	cmp	r0, #0
{
 10167cc:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10167d0:	0a000017 	beq	1016834 <XScuTimer_Start+0x6c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10167d4:	e5901008 	ldr	r1, [r0, #8]
 10167d8:	e3013111 	movw	r3, #4369	; 0x1111
 10167dc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10167e0:	e3054f40 	movw	r4, #24384	; 0x5f40
 10167e4:	e3404146 	movt	r4, #326	; 0x146
 10167e8:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10167ec:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10167f0:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10167f4:	1a000007 	bne	1016818 <XScuTimer_Start+0x50>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 10167f8:	e5901004 	ldr	r1, [r0, #4]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is started.
	 */
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 10167fc:	e3022222 	movw	r2, #8738	; 0x2222
 1016800:	e3422222 	movt	r2, #8738	; 0x2222
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1016804:	e5913008 	ldr	r3, [r1, #8]
	Register |= XSCUTIMER_CONTROL_ENABLE_MASK;
 1016808:	e3833001 	orr	r3, r3, #1
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 101680c:	e5813008 	str	r3, [r1, #8]
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 1016810:	e580200c 	str	r2, [r0, #12]
 1016814:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016818:	e30a0198 	movw	r0, #41368	; 0xa198
 101681c:	e3a01089 	mov	r1, #137	; 0x89
 1016820:	e3400106 	movt	r0, #262	; 0x106
 1016824:	eb0003c5 	bl	1017740 <Xil_Assert>
 1016828:	e3a03001 	mov	r3, #1
 101682c:	e5843000 	str	r3, [r4]
}
 1016830:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016834:	e30a0198 	movw	r0, #41368	; 0xa198
 1016838:	e3a01088 	mov	r1, #136	; 0x88
 101683c:	e3400106 	movt	r0, #262	; 0x106
 1016840:	eb0003be 	bl	1017740 <Xil_Assert>
 1016844:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016848:	e3a02001 	mov	r2, #1
 101684c:	e3403146 	movt	r3, #326	; 0x146
 1016850:	e5832000 	str	r2, [r3]
 1016854:	e8bd8010 	pop	{r4, pc}

01016858 <XScuTimer_Stop>:
******************************************************************************/
void XScuTimer_Stop(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1016858:	e3500000 	cmp	r0, #0
{
 101685c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1016860:	0a000015 	beq	10168bc <XScuTimer_Stop+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016864:	e5901008 	ldr	r1, [r0, #8]
 1016868:	e3013111 	movw	r3, #4369	; 0x1111
 101686c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1016870:	e3054f40 	movw	r4, #24384	; 0x5f40
 1016874:	e3404146 	movt	r4, #326	; 0x146
 1016878:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101687c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1016880:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016884:	1a000005 	bne	10168a0 <XScuTimer_Stop+0x48>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1016888:	e5901004 	ldr	r1, [r0, #4]
	return *(volatile u32 *) Addr;
 101688c:	e5913008 	ldr	r3, [r1, #8]
				  XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear the 'timer enable' bit in the register.
	 */
	Register &= (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 1016890:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 1016894:	e5813008 	str	r3, [r1, #8]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is stopped.
	 */
	InstancePtr->IsStarted = (u32)0;
 1016898:	e580200c 	str	r2, [r0, #12]
 101689c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10168a0:	e30a0198 	movw	r0, #41368	; 0xa198
 10168a4:	e3a010b3 	mov	r1, #179	; 0xb3
 10168a8:	e3400106 	movt	r0, #262	; 0x106
 10168ac:	eb0003a3 	bl	1017740 <Xil_Assert>
 10168b0:	e3a03001 	mov	r3, #1
 10168b4:	e5843000 	str	r3, [r4]
}
 10168b8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10168bc:	e30a0198 	movw	r0, #41368	; 0xa198
 10168c0:	e3a010b2 	mov	r1, #178	; 0xb2
 10168c4:	e3400106 	movt	r0, #262	; 0x106
 10168c8:	eb00039c 	bl	1017740 <Xil_Assert>
 10168cc:	e3053f40 	movw	r3, #24384	; 0x5f40
 10168d0:	e3a02001 	mov	r2, #1
 10168d4:	e3403146 	movt	r3, #326	; 0x146
 10168d8:	e5832000 	str	r2, [r3]
 10168dc:	e8bd8010 	pop	{r4, pc}

010168e0 <XScuTimer_SetPrescaler>:
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
 10168e0:	e3500000 	cmp	r0, #0
{
 10168e4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10168e8:	0a000015 	beq	1016944 <XScuTimer_SetPrescaler+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10168ec:	e590e008 	ldr	lr, [r0, #8]
 10168f0:	e3012111 	movw	r2, #4369	; 0x1111
 10168f4:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10168f8:	e3054f40 	movw	r4, #24384	; 0x5f40
 10168fc:	e3404146 	movt	r4, #326	; 0x146
 1016900:	e3a0c000 	mov	ip, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016904:	e15e0002 	cmp	lr, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1016908:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101690c:	1a000005 	bne	1016928 <XScuTimer_SetPrescaler+0x48>
	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1016910:	e5902004 	ldr	r2, [r0, #4]
	return *(volatile u32 *) Addr;
 1016914:	e5923008 	ldr	r3, [r2, #8]
					XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear all of the prescaler control bits in the register.
	 */
	ControlReg &= (u32)(~XSCUTIMER_CONTROL_PRESCALER_MASK);
 1016918:	e3c33cff 	bic	r3, r3, #65280	; 0xff00

	/*
	 * Set the prescaler value.
	 */
	ControlReg |= (((u32)PrescalerValue) << XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 101691c:	e1833401 	orr	r3, r3, r1, lsl #8
	*LocalAddr = Value;
 1016920:	e5823008 	str	r3, [r2, #8]
 1016924:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016928:	e30a0198 	movw	r0, #41368	; 0xa198
 101692c:	e3a010e1 	mov	r1, #225	; 0xe1
 1016930:	e3400106 	movt	r0, #262	; 0x106
 1016934:	eb000381 	bl	1017740 <Xil_Assert>
 1016938:	e3a03001 	mov	r3, #1
 101693c:	e5843000 	str	r3, [r4]
	/*
	 * Write the register with the new values.
	 */
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
			  XSCUTIMER_CONTROL_OFFSET, ControlReg);
}
 1016940:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1016944:	e30a0198 	movw	r0, #41368	; 0xa198
 1016948:	e3a010e0 	mov	r1, #224	; 0xe0
 101694c:	e3400106 	movt	r0, #262	; 0x106
 1016950:	eb00037a 	bl	1017740 <Xil_Assert>
 1016954:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016958:	e3a02001 	mov	r2, #1
 101695c:	e3403146 	movt	r3, #326	; 0x146
 1016960:	e5832000 	str	r2, [r3]
 1016964:	e8bd8010 	pop	{r4, pc}

01016968 <XScuTimer_GetPrescaler>:
*
* @note		None.
*
****************************************************************************/
u8 XScuTimer_GetPrescaler(XScuTimer *InstancePtr)
{
 1016968:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 101696c:	e2506000 	subs	r6, r0, #0
 1016970:	0a000014 	beq	10169c8 <XScuTimer_GetPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016974:	e5962008 	ldr	r2, [r6, #8]
 1016978:	e3013111 	movw	r3, #4369	; 0x1111
 101697c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016980:	e3055f40 	movw	r5, #24384	; 0x5f40
 1016984:	e3405146 	movt	r5, #326	; 0x146
 1016988:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101698c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016990:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016994:	1a000003 	bne	10169a8 <XScuTimer_GetPrescaler+0x40>

	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1016998:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 101699c:	e5930008 	ldr	r0, [r3, #8]
				    XSCUTIMER_CONTROL_OFFSET);
	ControlReg &= XSCUTIMER_CONTROL_PRESCALER_MASK;

	return (u8)(ControlReg >> XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 10169a0:	e7e70450 	ubfx	r0, r0, #8, #8
 10169a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10169a8:	e30a0198 	movw	r0, #41368	; 0xa198
 10169ac:	e300110d 	movw	r1, #269	; 0x10d
 10169b0:	e3400106 	movt	r0, #262	; 0x106
 10169b4:	eb000361 	bl	1017740 <Xil_Assert>
 10169b8:	e3a03001 	mov	r3, #1
 10169bc:	e1a00004 	mov	r0, r4
 10169c0:	e5853000 	str	r3, [r5]
}
 10169c4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10169c8:	e30a0198 	movw	r0, #41368	; 0xa198
 10169cc:	e3a01f43 	mov	r1, #268	; 0x10c
 10169d0:	e3400106 	movt	r0, #262	; 0x106
 10169d4:	eb000359 	bl	1017740 <Xil_Assert>
 10169d8:	e3053f40 	movw	r3, #24384	; 0x5f40
 10169dc:	e3a02001 	mov	r2, #1
 10169e0:	e3403146 	movt	r3, #326	; 0x146
 10169e4:	e1a00006 	mov	r0, r6
 10169e8:	e5832000 	str	r2, [r3]
 10169ec:	e8bd8070 	pop	{r4, r5, r6, pc}

010169f0 <XScuTimer_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XScuTimer_SelfTest(XScuTimer *InstancePtr)
{
 10169f0:	e92d4070 	push	{r4, r5, r6, lr}

	/*
	 * Assert to ensure the inputs are valid and the instance has been
	 * initialized.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 10169f4:	e2505000 	subs	r5, r0, #0
 10169f8:	0a000021 	beq	1016a84 <XScuTimer_SelfTest+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10169fc:	e5952008 	ldr	r2, [r5, #8]
 1016a00:	e3013111 	movw	r3, #4369	; 0x1111
 1016a04:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a08:	e3056f40 	movw	r6, #24384	; 0x5f40
 1016a0c:	e3406146 	movt	r6, #326	; 0x146
 1016a10:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016a14:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a18:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016a1c:	1a000010 	bne	1016a64 <XScuTimer_SelfTest+0x74>

	/*
	 * Save the contents of the Control Register and stop the timer.
	 */
	CtrlOrig = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1016a20:	e5952004 	ldr	r2, [r5, #4]
	*LocalAddr = Value;
 1016a24:	e30f400f 	movw	r4, #61455	; 0xf00f
 1016a28:	e34a455a 	movt	r4, #42330	; 0xa55a
	return *(volatile u32 *) Addr;
 1016a2c:	e5923008 	ldr	r3, [r2, #8]
				  XSCUTIMER_CONTROL_OFFSET);
	Register = CtrlOrig & (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 1016a30:	e3c31001 	bic	r1, r3, #1
	*LocalAddr = Value;
 1016a34:	e5821008 	str	r1, [r2, #8]
	return *(volatile u32 *) Addr;
 1016a38:	e5952004 	ldr	r2, [r5, #4]
 1016a3c:	e5921000 	ldr	r1, [r2]
	*LocalAddr = Value;
 1016a40:	e5824000 	str	r4, [r2]
	return *(volatile u32 *) Addr;
 1016a44:	e5952004 	ldr	r2, [r5, #4]
 1016a48:	e5920000 	ldr	r0, [r2]
	*LocalAddr = Value;
 1016a4c:	e5821000 	str	r1, [r2]

	/*
	 * Restore the contents of the Load Register and Control Register.
	 */
	XScuTimer_LoadTimer(InstancePtr, LoadOrig);
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
 1016a50:	e5952004 	ldr	r2, [r5, #4]

	/*
	 * Return a Failure if the contents of the Load Register do not
	 * match with the value written to it.
	 */
	if (Register != XSCUTIMER_SELFTEST_VALUE) {
 1016a54:	e0500004 	subs	r0, r0, r4
 1016a58:	13a00001 	movne	r0, #1
 1016a5c:	e5823008 	str	r3, [r2, #8]
 1016a60:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016a64:	e30a01a4 	movw	r0, #41380	; 0xa1a4
 1016a68:	e3a0105b 	mov	r1, #91	; 0x5b
 1016a6c:	e3400106 	movt	r0, #262	; 0x106
 1016a70:	eb000332 	bl	1017740 <Xil_Assert>
 1016a74:	e3a03001 	mov	r3, #1
 1016a78:	e1a00004 	mov	r0, r4
 1016a7c:	e5863000 	str	r3, [r6]
	else {
		Status = (s32)XST_SUCCESS;
	}

	return Status;
}
 1016a80:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016a84:	e30a01a4 	movw	r0, #41380	; 0xa1a4
 1016a88:	e3a0105a 	mov	r1, #90	; 0x5a
 1016a8c:	e3400106 	movt	r0, #262	; 0x106
 1016a90:	eb00032a 	bl	1017740 <Xil_Assert>
 1016a94:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016a98:	e3a02001 	mov	r2, #1
 1016a9c:	e3403146 	movt	r3, #326	; 0x146
 1016aa0:	e1a00005 	mov	r0, r5
 1016aa4:	e5832000 	str	r2, [r3]
 1016aa8:	e8bd8070 	pop	{r4, r5, r6, pc}

01016aac <XScuTimer_LookupConfig>:
{
	XScuTimer_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < XPAR_XSCUTIMER_NUM_INSTANCES; Index++) {
		if (XScuTimer_ConfigTable[Index].DeviceId == DeviceId) {
 1016aac:	e30a3550 	movw	r3, #42320	; 0xa550
 1016ab0:	e3403106 	movt	r3, #262	; 0x106
 1016ab4:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuTimer_Config *)CfgPtr;
}
 1016ab8:	e1520000 	cmp	r2, r0
 1016abc:	01a00003 	moveq	r0, r3
 1016ac0:	13a00000 	movne	r0, #0
 1016ac4:	e12fff1e 	bx	lr

01016ac8 <StubStatusHandler>:
{
	(const void) CallBackRef;
	(void) StatusEvent;
	(void) ByteCount;

	Xil_AssertVoidAlways();
 1016ac8:	e30a01bc 	movw	r0, #41404	; 0xa1bc
{
 1016acc:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1016ad0:	e300134b 	movw	r1, #843	; 0x34b
 1016ad4:	e3400106 	movt	r0, #262	; 0x106
 1016ad8:	eb000318 	bl	1017740 <Xil_Assert>
 1016adc:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016ae0:	e3a02001 	mov	r2, #1
 1016ae4:	e3403146 	movt	r3, #326	; 0x146
 1016ae8:	e5832000 	str	r2, [r3]
}
 1016aec:	e8bd8010 	pop	{r4, pc}

01016af0 <XSpiPs_Transfer>:
{
 1016af0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016af4:	e2504000 	subs	r4, r0, #0
{
 1016af8:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016afc:	0a000061 	beq	1016c88 <XSpiPs_Transfer+0x198>
 1016b00:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1016b04:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016b08:	e3405146 	movt	r5, #326	; 0x146
 1016b0c:	e3a06000 	mov	r6, #0
 1016b10:	e1a07001 	mov	r7, r1
 1016b14:	e5856000 	str	r6, [r5]
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1016b18:	0a000064 	beq	1016cb0 <XSpiPs_Transfer+0x1c0>
	Xil_AssertNonvoid(ByteCount > 0U);
 1016b1c:	e3530000 	cmp	r3, #0
 1016b20:	0a00004a 	beq	1016c50 <XSpiPs_Transfer+0x160>
	Xil_AssertNonvoid(InstancePtr->IsReady == (u32)XIL_COMPONENT_IS_READY);
 1016b24:	e594c00c 	ldr	ip, [r4, #12]
 1016b28:	e3011111 	movw	r1, #4369	; 0x1111
 1016b2c:	e3411111 	movt	r1, #4369	; 0x1111
 1016b30:	e15c0001 	cmp	ip, r1
 1016b34:	1a00002b 	bne	1016be8 <XSpiPs_Transfer+0xf8>
	if (InstancePtr->IsBusy == TRUE) {
 1016b38:	e5941020 	ldr	r1, [r4, #32]
 1016b3c:	e3510001 	cmp	r1, #1
 1016b40:	0a00004d 	beq	1016c7c <XSpiPs_Transfer+0x18c>
		InstancePtr->IsBusy = TRUE;
 1016b44:	e3a01001 	mov	r1, #1
		InstancePtr->SendBufferPtr = SendBufPtr;
 1016b48:	e5847010 	str	r7, [r4, #16]
		InstancePtr->RequestedBytes = ByteCount;
 1016b4c:	e1c421f4 	strd	r2, [r4, #20]
		InstancePtr->RemainingBytes = ByteCount;
 1016b50:	e584301c 	str	r3, [r4, #28]
		InstancePtr->IsBusy = TRUE;
 1016b54:	e5841020 	str	r1, [r4, #32]
	if (XSpiPs_IsManualChipSelect(InstancePtr) != FALSE) {
 1016b58:	eb0009bb 	bl	101924c <XSpiPs_GetOptions>
 1016b5c:	e3100010 	tst	r0, #16
 1016b60:	1a000029 	bne	1016c0c <XSpiPs_Transfer+0x11c>
		XSpiPs_Enable(InstancePtr);
 1016b64:	e5943004 	ldr	r3, [r4, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1016b68:	e3a01001 	mov	r1, #1
 1016b6c:	e3a02043 	mov	r2, #67	; 0x43
 1016b70:	e5831014 	str	r1, [r3, #20]
		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress, XSPIPS_SR_OFFSET,
 1016b74:	e5943004 	ldr	r3, [r4, #4]
 1016b78:	e5832004 	str	r2, [r3, #4]
		while ((InstancePtr->RemainingBytes > 0U) &&
 1016b7c:	e594301c 	ldr	r3, [r4, #28]
 1016b80:	e3530000 	cmp	r3, #0
 1016b84:	15942010 	ldrne	r2, [r4, #16]
 1016b88:	12820080 	addne	r0, r2, #128	; 0x80
 1016b8c:	1a000002 	bne	1016b9c <XSpiPs_Transfer+0xac>
 1016b90:	ea00000a 	b	1016bc0 <XSpiPs_Transfer+0xd0>
 1016b94:	e1520000 	cmp	r2, r0
 1016b98:	0a000008 	beq	1016bc0 <XSpiPs_Transfer+0xd0>
			XSpiPs_SendByte(InstancePtr->Config.BaseAddress,
 1016b9c:	e4d21001 	ldrb	r1, [r2], #1
 1016ba0:	e5943004 	ldr	r3, [r4, #4]
 1016ba4:	e583101c 	str	r1, [r3, #28]
			InstancePtr->RemainingBytes--;
 1016ba8:	e594301c 	ldr	r3, [r4, #28]
                  InstancePtr->SendBufferPtr += 1;
 1016bac:	e5842010 	str	r2, [r4, #16]
			InstancePtr->RemainingBytes--;
 1016bb0:	e2433001 	sub	r3, r3, #1
		while ((InstancePtr->RemainingBytes > 0U) &&
 1016bb4:	e3530000 	cmp	r3, #0
			InstancePtr->RemainingBytes--;
 1016bb8:	e584301c 	str	r3, [r4, #28]
		while ((InstancePtr->RemainingBytes > 0U) &&
 1016bbc:	1afffff4 	bne	1016b94 <XSpiPs_Transfer+0xa4>
		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
 1016bc0:	e5943004 	ldr	r3, [r4, #4]
 1016bc4:	e3a02027 	mov	r2, #39	; 0x27
	     if ((XSpiPs_IsManualStart(InstancePtr) == TRUE)
 1016bc8:	e1a00004 	mov	r0, r4
 1016bcc:	e5832008 	str	r2, [r3, #8]
 1016bd0:	eb00099d 	bl	101924c <XSpiPs_GetOptions>
 1016bd4:	e3100020 	tst	r0, #32
 1016bd8:	1a000012 	bne	1016c28 <XSpiPs_Transfer+0x138>
		StatusTransfer = (s32)XST_SUCCESS;
 1016bdc:	e3a00000 	mov	r0, #0
}
 1016be0:	e28dd00c 	add	sp, sp, #12
 1016be4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == (u32)XIL_COMPONENT_IS_READY);
 1016be8:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016bec:	e300114a 	movw	r1, #330	; 0x14a
 1016bf0:	e3400106 	movt	r0, #262	; 0x106
 1016bf4:	eb0002d1 	bl	1017740 <Xil_Assert>
 1016bf8:	e1a00006 	mov	r0, r6
 1016bfc:	e3a03001 	mov	r3, #1
 1016c00:	e5853000 	str	r3, [r5]
}
 1016c04:	e28dd00c 	add	sp, sp, #12
 1016c08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	return *(volatile u32 *) Addr;
 1016c0c:	e5942004 	ldr	r2, [r4, #4]
		ConfigReg |= InstancePtr->SlaveSelect;
 1016c10:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1016c14:	e5923000 	ldr	r3, [r2]
		ConfigReg &= (u32)(~XSPIPS_CR_SSCTRL_MASK);
 1016c18:	e3c33b0f 	bic	r3, r3, #15360	; 0x3c00
		ConfigReg |= InstancePtr->SlaveSelect;
 1016c1c:	e1833001 	orr	r3, r3, r1
	*LocalAddr = Value;
 1016c20:	e5823000 	str	r3, [r2]
 1016c24:	eaffffce 	b	1016b64 <XSpiPs_Transfer+0x74>
		&& (XSpiPs_IsMaster(InstancePtr) == TRUE)) {
 1016c28:	e1a00004 	mov	r0, r4
 1016c2c:	eb000986 	bl	101924c <XSpiPs_GetOptions>
 1016c30:	e3100001 	tst	r0, #1
 1016c34:	0affffe8 	beq	1016bdc <XSpiPs_Transfer+0xec>
	return *(volatile u32 *) Addr;
 1016c38:	e5942004 	ldr	r2, [r4, #4]
		StatusTransfer = (s32)XST_SUCCESS;
 1016c3c:	e3a00000 	mov	r0, #0
 1016c40:	e5923000 	ldr	r3, [r2]
				ConfigReg |= XSPIPS_CR_MANSTRT_MASK;
 1016c44:	e3833801 	orr	r3, r3, #65536	; 0x10000
	*LocalAddr = Value;
 1016c48:	e5823000 	str	r3, [r2]
 1016c4c:	eaffffec 	b	1016c04 <XSpiPs_Transfer+0x114>
	Xil_AssertNonvoid(ByteCount > 0U);
 1016c50:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016c54:	e3001149 	movw	r1, #329	; 0x149
 1016c58:	e3400106 	movt	r0, #262	; 0x106
 1016c5c:	e58d3004 	str	r3, [sp, #4]
 1016c60:	eb0002b6 	bl	1017740 <Xil_Assert>
 1016c64:	e59d3004 	ldr	r3, [sp, #4]
 1016c68:	e3a02001 	mov	r2, #1
 1016c6c:	e5852000 	str	r2, [r5]
 1016c70:	e1a00003 	mov	r0, r3
}
 1016c74:	e28dd00c 	add	sp, sp, #12
 1016c78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		StatusTransfer = (s32)XST_DEVICE_BUSY;
 1016c7c:	e3a00015 	mov	r0, #21
}
 1016c80:	e28dd00c 	add	sp, sp, #12
 1016c84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016c88:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016c8c:	e3001147 	movw	r1, #327	; 0x147
 1016c90:	e3400106 	movt	r0, #262	; 0x106
 1016c94:	eb0002a9 	bl	1017740 <Xil_Assert>
 1016c98:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016c9c:	e3a02001 	mov	r2, #1
 1016ca0:	e3403146 	movt	r3, #326	; 0x146
 1016ca4:	e1a00004 	mov	r0, r4
 1016ca8:	e5832000 	str	r2, [r3]
 1016cac:	eaffffd4 	b	1016c04 <XSpiPs_Transfer+0x114>
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1016cb0:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016cb4:	e3a01f52 	mov	r1, #328	; 0x148
 1016cb8:	e3400106 	movt	r0, #262	; 0x106
 1016cbc:	eb00029f 	bl	1017740 <Xil_Assert>
 1016cc0:	e3a03001 	mov	r3, #1
 1016cc4:	e1a00007 	mov	r0, r7
 1016cc8:	e5853000 	str	r3, [r5]
 1016ccc:	eaffffcc 	b	1016c04 <XSpiPs_Transfer+0x114>

01016cd0 <XSpiPs_PolledTransfer>:
{
 1016cd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016cd4:	e2504000 	subs	r4, r0, #0
{
 1016cd8:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016cdc:	0a00007d 	beq	1016ed8 <XSpiPs_PolledTransfer+0x208>
 1016ce0:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1016ce4:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016ce8:	e3405146 	movt	r5, #326	; 0x146
 1016cec:	e3a06000 	mov	r6, #0
 1016cf0:	e1a07001 	mov	r7, r1
 1016cf4:	e5856000 	str	r6, [r5]
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1016cf8:	0a000080 	beq	1016f00 <XSpiPs_PolledTransfer+0x230>
	Xil_AssertNonvoid(ByteCount > 0U);
 1016cfc:	e3530000 	cmp	r3, #0
 1016d00:	0a000066 	beq	1016ea0 <XSpiPs_PolledTransfer+0x1d0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016d04:	e594c00c 	ldr	ip, [r4, #12]
 1016d08:	e3011111 	movw	r1, #4369	; 0x1111
 1016d0c:	e3411111 	movt	r1, #4369	; 0x1111
 1016d10:	e15c0001 	cmp	ip, r1
 1016d14:	1a00004c 	bne	1016e4c <XSpiPs_PolledTransfer+0x17c>
	if (InstancePtr->IsBusy == TRUE) {
 1016d18:	e5941020 	ldr	r1, [r4, #32]
 1016d1c:	e3510001 	cmp	r1, #1
 1016d20:	0a000069 	beq	1016ecc <XSpiPs_PolledTransfer+0x1fc>
		InstancePtr->IsBusy = TRUE;
 1016d24:	e3a01001 	mov	r1, #1
		InstancePtr->SendBufferPtr = SendBufPtr;
 1016d28:	e5847010 	str	r7, [r4, #16]
		InstancePtr->RequestedBytes = ByteCount;
 1016d2c:	e1c421f4 	strd	r2, [r4, #20]
		InstancePtr->RemainingBytes = ByteCount;
 1016d30:	e584301c 	str	r3, [r4, #28]
		InstancePtr->IsBusy = TRUE;
 1016d34:	e5841020 	str	r1, [r4, #32]
	     if (XSpiPs_IsManualChipSelect(InstancePtr) == TRUE) {
 1016d38:	eb000943 	bl	101924c <XSpiPs_GetOptions>
 1016d3c:	e3100010 	tst	r0, #16
 1016d40:	1a00004f 	bne	1016e84 <XSpiPs_PolledTransfer+0x1b4>
		XSpiPs_Enable(InstancePtr);
 1016d44:	e5943004 	ldr	r3, [r4, #4]
 1016d48:	e3a02001 	mov	r2, #1
 1016d4c:	e5832014 	str	r2, [r3, #20]
		while((InstancePtr->RemainingBytes > (u32)0U) ||
 1016d50:	e594501c 	ldr	r5, [r4, #28]
 1016d54:	e3550000 	cmp	r5, #0
 1016d58:	1a000020 	bne	1016de0 <XSpiPs_PolledTransfer+0x110>
 1016d5c:	e5943018 	ldr	r3, [r4, #24]
 1016d60:	e3530000 	cmp	r3, #0
 1016d64:	0a00006d 	beq	1016f20 <XSpiPs_PolledTransfer+0x250>
			if ((XSpiPs_IsManualStart(InstancePtr) == TRUE)
 1016d68:	e1a00004 	mov	r0, r4
 1016d6c:	eb000936 	bl	101924c <XSpiPs_GetOptions>
 1016d70:	e3100020 	tst	r0, #32
 1016d74:	1a00002c 	bne	1016e2c <XSpiPs_PolledTransfer+0x15c>
			StatusReg = XSpiPs_ReadReg(
 1016d78:	e5941004 	ldr	r1, [r4, #4]
 1016d7c:	e2812004 	add	r2, r1, #4
	return *(volatile u32 *) Addr;
 1016d80:	e5923000 	ldr	r3, [r2]
				if ( (StatusReg & XSPIPS_IXR_MODF_MASK) != 0U) {
 1016d84:	e3130002 	tst	r3, #2
 1016d88:	1a000038 	bne	1016e70 <XSpiPs_PolledTransfer+0x1a0>
	        while (CheckTransfer == 0U){
 1016d8c:	e3130004 	tst	r3, #4
 1016d90:	0afffffa 	beq	1016d80 <XSpiPs_PolledTransfer+0xb0>
			while (TransCount != (u32)0U) {
 1016d94:	e3550000 	cmp	r5, #0
 1016d98:	0affffec 	beq	1016d50 <XSpiPs_PolledTransfer+0x80>
 1016d9c:	e5943014 	ldr	r3, [r4, #20]
 1016da0:	ea000000 	b	1016da8 <XSpiPs_PolledTransfer+0xd8>
 1016da4:	e5941004 	ldr	r1, [r4, #4]
 1016da8:	e5912020 	ldr	r2, [r1, #32]
				if (InstancePtr->RecvBufferPtr != NULL) {
 1016dac:	e3530000 	cmp	r3, #0
				TempData = (u8)XSpiPs_RecvByte(
 1016db0:	15c32000 	strbne	r2, [r3]
					InstancePtr->RecvBufferPtr += 1;
 1016db4:	15943014 	ldrne	r3, [r4, #20]
				InstancePtr->RequestedBytes--;
 1016db8:	e5942018 	ldr	r2, [r4, #24]
					InstancePtr->RecvBufferPtr += 1;
 1016dbc:	12833001 	addne	r3, r3, #1
 1016dc0:	15843014 	strne	r3, [r4, #20]
			while (TransCount != (u32)0U) {
 1016dc4:	e2555001 	subs	r5, r5, #1
				InstancePtr->RequestedBytes--;
 1016dc8:	e2422001 	sub	r2, r2, #1
 1016dcc:	e5842018 	str	r2, [r4, #24]
			while (TransCount != (u32)0U) {
 1016dd0:	1afffff3 	bne	1016da4 <XSpiPs_PolledTransfer+0xd4>
		while((InstancePtr->RemainingBytes > (u32)0U) ||
 1016dd4:	e594501c 	ldr	r5, [r4, #28]
 1016dd8:	e3550000 	cmp	r5, #0
 1016ddc:	0affffde 	beq	1016d5c <XSpiPs_PolledTransfer+0x8c>
 1016de0:	e5942010 	ldr	r2, [r4, #16]
 1016de4:	e3a05000 	mov	r5, #0
 1016de8:	ea000001 	b	1016df4 <XSpiPs_PolledTransfer+0x124>
			while ((InstancePtr->RemainingBytes > (u32)0U) &&
 1016dec:	e3550080 	cmp	r5, #128	; 0x80
 1016df0:	0affffdc 	beq	1016d68 <XSpiPs_PolledTransfer+0x98>
				XSpiPs_SendByte(InstancePtr->Config.BaseAddress,
 1016df4:	e4d21001 	ldrb	r1, [r2], #1
				++TransCount;
 1016df8:	e2855001 	add	r5, r5, #1
				XSpiPs_SendByte(InstancePtr->Config.BaseAddress,
 1016dfc:	e5943004 	ldr	r3, [r4, #4]
	*LocalAddr = Value;
 1016e00:	e583101c 	str	r1, [r3, #28]
				InstancePtr->RemainingBytes--;
 1016e04:	e594301c 	ldr	r3, [r4, #28]
				InstancePtr->SendBufferPtr += 1;
 1016e08:	e5842010 	str	r2, [r4, #16]
				InstancePtr->RemainingBytes--;
 1016e0c:	e2433001 	sub	r3, r3, #1
			while ((InstancePtr->RemainingBytes > (u32)0U) &&
 1016e10:	e3530000 	cmp	r3, #0
				InstancePtr->RemainingBytes--;
 1016e14:	e584301c 	str	r3, [r4, #28]
			while ((InstancePtr->RemainingBytes > (u32)0U) &&
 1016e18:	1afffff3 	bne	1016dec <XSpiPs_PolledTransfer+0x11c>
			if ((XSpiPs_IsManualStart(InstancePtr) == TRUE)
 1016e1c:	e1a00004 	mov	r0, r4
 1016e20:	eb000909 	bl	101924c <XSpiPs_GetOptions>
 1016e24:	e3100020 	tst	r0, #32
 1016e28:	0affffd2 	beq	1016d78 <XSpiPs_PolledTransfer+0xa8>
				&& (XSpiPs_IsMaster(InstancePtr) == TRUE)) {
 1016e2c:	e1a00004 	mov	r0, r4
 1016e30:	eb000905 	bl	101924c <XSpiPs_GetOptions>
 1016e34:	e3100001 	tst	r0, #1
	return *(volatile u32 *) Addr;
 1016e38:	15942004 	ldrne	r2, [r4, #4]
 1016e3c:	15923000 	ldrne	r3, [r2]
				ConfigReg |= XSPIPS_CR_MANSTRT_MASK;
 1016e40:	13833801 	orrne	r3, r3, #65536	; 0x10000
	*LocalAddr = Value;
 1016e44:	15823000 	strne	r3, [r2]
 1016e48:	eaffffca 	b	1016d78 <XSpiPs_PolledTransfer+0xa8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016e4c:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016e50:	e30011e7 	movw	r1, #487	; 0x1e7
 1016e54:	e3400106 	movt	r0, #262	; 0x106
 1016e58:	eb000238 	bl	1017740 <Xil_Assert>
 1016e5c:	e1a00006 	mov	r0, r6
 1016e60:	e3a03001 	mov	r3, #1
 1016e64:	e5853000 	str	r3, [r5]
}
 1016e68:	e28dd00c 	add	sp, sp, #12
 1016e6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1016e70:	e3a03002 	mov	r3, #2
					Status_Polled = (s32)XST_SEND_ERROR;
 1016e74:	e3a0001c 	mov	r0, #28
 1016e78:	e5823000 	str	r3, [r2]
}
 1016e7c:	e28dd00c 	add	sp, sp, #12
 1016e80:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	return *(volatile u32 *) Addr;
 1016e84:	e5942004 	ldr	r2, [r4, #4]
			ConfigReg |= InstancePtr->SlaveSelect;
 1016e88:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1016e8c:	e5923000 	ldr	r3, [r2]
			ConfigReg &= (u32)(~XSPIPS_CR_SSCTRL_MASK);
 1016e90:	e3c33b0f 	bic	r3, r3, #15360	; 0x3c00
			ConfigReg |= InstancePtr->SlaveSelect;
 1016e94:	e1833001 	orr	r3, r3, r1
	*LocalAddr = Value;
 1016e98:	e5823000 	str	r3, [r2]
 1016e9c:	eaffffa8 	b	1016d44 <XSpiPs_PolledTransfer+0x74>
	Xil_AssertNonvoid(ByteCount > 0U);
 1016ea0:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016ea4:	e30011e6 	movw	r1, #486	; 0x1e6
 1016ea8:	e3400106 	movt	r0, #262	; 0x106
 1016eac:	e58d3004 	str	r3, [sp, #4]
 1016eb0:	eb000222 	bl	1017740 <Xil_Assert>
 1016eb4:	e59d3004 	ldr	r3, [sp, #4]
 1016eb8:	e3a02001 	mov	r2, #1
 1016ebc:	e5852000 	str	r2, [r5]
 1016ec0:	e1a00003 	mov	r0, r3
}
 1016ec4:	e28dd00c 	add	sp, sp, #12
 1016ec8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		Status_Polled = (s32)XST_DEVICE_BUSY;
 1016ecc:	e3a00015 	mov	r0, #21
}
 1016ed0:	e28dd00c 	add	sp, sp, #12
 1016ed4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016ed8:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016edc:	e3a01f79 	mov	r1, #484	; 0x1e4
 1016ee0:	e3400106 	movt	r0, #262	; 0x106
 1016ee4:	eb000215 	bl	1017740 <Xil_Assert>
 1016ee8:	e3053f40 	movw	r3, #24384	; 0x5f40
 1016eec:	e3a02001 	mov	r2, #1
 1016ef0:	e3403146 	movt	r3, #326	; 0x146
 1016ef4:	e1a00004 	mov	r0, r4
 1016ef8:	e5832000 	str	r2, [r3]
 1016efc:	eaffffd9 	b	1016e68 <XSpiPs_PolledTransfer+0x198>
	Xil_AssertNonvoid(SendBufPtr != NULL);
 1016f00:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016f04:	e30011e5 	movw	r1, #485	; 0x1e5
 1016f08:	e3400106 	movt	r0, #262	; 0x106
 1016f0c:	eb00020b 	bl	1017740 <Xil_Assert>
 1016f10:	e3a03001 	mov	r3, #1
 1016f14:	e1a00007 	mov	r0, r7
 1016f18:	e5853000 	str	r3, [r5]
 1016f1c:	eaffffd1 	b	1016e68 <XSpiPs_PolledTransfer+0x198>
		if (XSpiPs_IsManualChipSelect(InstancePtr) == TRUE) {
 1016f20:	e1a00004 	mov	r0, r4
 1016f24:	eb0008c8 	bl	101924c <XSpiPs_GetOptions>
 1016f28:	e3100010 	tst	r0, #16
	return *(volatile u32 *) Addr;
 1016f2c:	15942004 	ldrne	r2, [r4, #4]
 1016f30:	15923000 	ldrne	r3, [r2]
			ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1016f34:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 1016f38:	15823000 	strne	r3, [r2]
		InstancePtr->IsBusy = FALSE;
 1016f3c:	e3a03000 	mov	r3, #0
		XSpiPs_Disable(InstancePtr);
 1016f40:	e5942004 	ldr	r2, [r4, #4]
		Status_Polled = (s32)XST_SUCCESS;
 1016f44:	e1a00003 	mov	r0, r3
		InstancePtr->IsBusy = FALSE;
 1016f48:	e5843020 	str	r3, [r4, #32]
 1016f4c:	e5823014 	str	r3, [r2, #20]
		Status_Polled = (s32)XST_SUCCESS;
 1016f50:	eaffffc4 	b	1016e68 <XSpiPs_PolledTransfer+0x198>

01016f54 <XSpiPs_SetSlaveSelect>:
{
 1016f54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016f58:	e2506000 	subs	r6, r0, #0
 1016f5c:	0a00002a 	beq	101700c <XSpiPs_SetSlaveSelect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016f60:	e596200c 	ldr	r2, [r6, #12]
 1016f64:	e3013111 	movw	r3, #4369	; 0x1111
 1016f68:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016f6c:	e3055f40 	movw	r5, #24384	; 0x5f40
 1016f70:	e3405146 	movt	r5, #326	; 0x146
 1016f74:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016f78:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1016f7c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016f80:	1a000014 	bne	1016fd8 <XSpiPs_SetSlaveSelect+0x84>
	Xil_AssertNonvoid(SlaveSel <= XSPIPS_CR_SSCTRL_MAXIMUM);
 1016f84:	e351000f 	cmp	r1, #15
 1016f88:	e1a07001 	mov	r7, r1
 1016f8c:	8a000019 	bhi	1016ff8 <XSpiPs_SetSlaveSelect+0xa4>
	if (InstancePtr->IsBusy == TRUE) {
 1016f90:	e5963020 	ldr	r3, [r6, #32]
 1016f94:	e3530001 	cmp	r3, #1
 1016f98:	0a000019 	beq	1017004 <XSpiPs_SetSlaveSelect+0xb0>
		if ( XSpiPs_IsDecodeSSelect( InstancePtr ) == TRUE) {
 1016f9c:	eb0008aa 	bl	101924c <XSpiPs_GetOptions>
 1016fa0:	e3100008 	tst	r0, #8
	return *(volatile u32 *) Addr;
 1016fa4:	e5963004 	ldr	r3, [r6, #4]
			InstancePtr->SlaveSelect = ((~(1U << SlaveSel)) & \
 1016fa8:	03a01001 	moveq	r1, #1
			InstancePtr->SlaveSelect = ((u32)SlaveSel) << XSPIPS_CR_SSCTRL_SHIFT;
 1016fac:	11a01507 	lslne	r1, r7, #10
			InstancePtr->SlaveSelect = ((~(1U << SlaveSel)) & \
 1016fb0:	01e07711 	mvneq	r7, r1, lsl r7
	    Status_Slave = (s32)XST_SUCCESS;
 1016fb4:	e3a00000 	mov	r0, #0
				XSPIPS_CR_SSCTRL_MAXIMUM) << XSPIPS_CR_SSCTRL_SHIFT;
 1016fb8:	01a07507 	lsleq	r7, r7, #10
 1016fbc:	02071b0f 	andeq	r1, r7, #15360	; 0x3c00
 1016fc0:	e5861024 	str	r1, [r6, #36]	; 0x24
 1016fc4:	e5937000 	ldr	r7, [r3]
		ConfigReg &= (u32)(~XSPIPS_CR_SSCTRL_MASK);
 1016fc8:	e3c77b0f 	bic	r7, r7, #15360	; 0x3c00
		ConfigReg |= InstancePtr->SlaveSelect;
 1016fcc:	e1877001 	orr	r7, r7, r1
	*LocalAddr = Value;
 1016fd0:	e5837000 	str	r7, [r3]
	    Status_Slave = (s32)XST_SUCCESS;
 1016fd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1016fd8:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016fdc:	e3a01e2a 	mov	r1, #672	; 0x2a0
	Xil_AssertNonvoid(SlaveSel <= XSPIPS_CR_SSCTRL_MAXIMUM);
 1016fe0:	e3400106 	movt	r0, #262	; 0x106
 1016fe4:	eb0001d5 	bl	1017740 <Xil_Assert>
 1016fe8:	e3a03001 	mov	r3, #1
 1016fec:	e1a00004 	mov	r0, r4
 1016ff0:	e5853000 	str	r3, [r5]
 1016ff4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1016ff8:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1016ffc:	e30012a1 	movw	r1, #673	; 0x2a1
 1017000:	eafffff6 	b	1016fe0 <XSpiPs_SetSlaveSelect+0x8c>
		Status_Slave = (s32)XST_DEVICE_BUSY;
 1017004:	e3a00015 	mov	r0, #21
}
 1017008:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101700c:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017010:	e300129f 	movw	r1, #671	; 0x29f
 1017014:	e3400106 	movt	r0, #262	; 0x106
 1017018:	eb0001c8 	bl	1017740 <Xil_Assert>
 101701c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1017020:	e3a02001 	mov	r2, #1
 1017024:	e3403146 	movt	r3, #326	; 0x146
 1017028:	e1a00006 	mov	r0, r6
 101702c:	e5832000 	str	r2, [r3]
 1017030:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01017034 <XSpiPs_GetSlaveSelect>:
{
 1017034:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017038:	e2506000 	subs	r6, r0, #0
 101703c:	0a00001c 	beq	10170b4 <XSpiPs_GetSlaveSelect+0x80>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017040:	e596200c 	ldr	r2, [r6, #12]
 1017044:	e3013111 	movw	r3, #4369	; 0x1111
 1017048:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 101704c:	e3055f40 	movw	r5, #24384	; 0x5f40
 1017050:	e3405146 	movt	r5, #326	; 0x146
 1017054:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017058:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 101705c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017060:	1a000007 	bne	1017084 <XSpiPs_GetSlaveSelect+0x50>
	ConfigReg >>= XSPIPS_CR_SSCTRL_SHIFT;
 1017064:	e5964024 	ldr	r4, [r6, #36]	; 0x24
	if ( XSpiPs_IsDecodeSSelect( InstancePtr ) == TRUE) {
 1017068:	eb000877 	bl	101924c <XSpiPs_GetOptions>
 101706c:	e3100008 	tst	r0, #8
 1017070:	e1a04524 	lsr	r4, r4, #10
	ConfigReg >>= XSPIPS_CR_SSCTRL_SHIFT;
 1017074:	e204000f 	and	r0, r4, #15
	if ( XSpiPs_IsDecodeSSelect( InstancePtr ) == TRUE) {
 1017078:	0a000009 	beq	10170a4 <XSpiPs_GetSlaveSelect+0x70>
 101707c:	e6ef0070 	uxtb	r0, r0
 1017080:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017084:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017088:	e3a01fb7 	mov	r1, #732	; 0x2dc
 101708c:	e3400106 	movt	r0, #262	; 0x106
 1017090:	eb0001aa 	bl	1017740 <Xil_Assert>
 1017094:	e3a03001 	mov	r3, #1
 1017098:	e1a00004 	mov	r0, r4
 101709c:	e5853000 	str	r3, [r5]
 10170a0:	e8bd8070 	pop	{r4, r5, r6, pc}
		if(ConfigReg == 0x0FU) {
 10170a4:	e350000f 	cmp	r0, #15
			SlaveSel = ((~ConfigReg) & XSPIPS_CR_SSCTRL_MAXIMUM)/2U;
 10170a8:	11e04004 	mvnne	r4, r4
 10170ac:	17e200d4 	ubfxne	r0, r4, #1, #3
}
 10170b0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10170b4:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 10170b8:	e30012db 	movw	r1, #731	; 0x2db
 10170bc:	e3400106 	movt	r0, #262	; 0x106
 10170c0:	eb00019e 	bl	1017740 <Xil_Assert>
 10170c4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10170c8:	e3a02001 	mov	r2, #1
 10170cc:	e3403146 	movt	r3, #326	; 0x146
 10170d0:	e1a00006 	mov	r0, r6
 10170d4:	e5832000 	str	r2, [r3]
 10170d8:	e8bd8070 	pop	{r4, r5, r6, pc}

010170dc <XSpiPs_SetStatusHandler>:
	Xil_AssertVoid(InstancePtr != NULL);
 10170dc:	e3500000 	cmp	r0, #0
{
 10170e0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10170e4:	0a000014 	beq	101713c <XSpiPs_SetStatusHandler+0x60>
 10170e8:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(FunctionPtr != NULL);
 10170ec:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 10170f0:	e3404146 	movt	r4, #326	; 0x146
 10170f4:	e3a03000 	mov	r3, #0
 10170f8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FunctionPtr != NULL);
 10170fc:	0a000017 	beq	1017160 <XSpiPs_SetStatusHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017100:	e590c00c 	ldr	ip, [r0, #12]
 1017104:	e3013111 	movw	r3, #4369	; 0x1111
 1017108:	e3413111 	movt	r3, #4369	; 0x1111
 101710c:	e15c0003 	cmp	ip, r3
 1017110:	1a000002 	bne	1017120 <XSpiPs_SetStatusHandler+0x44>
	InstancePtr->StatusHandler = FunctionPtr;
 1017114:	e5802028 	str	r2, [r0, #40]	; 0x28
	InstancePtr->StatusRef = CallBackRef;
 1017118:	e580102c 	str	r1, [r0, #44]	; 0x2c
 101711c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017120:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017124:	e300132e 	movw	r1, #814	; 0x32e
 1017128:	e3400106 	movt	r0, #262	; 0x106
 101712c:	eb000183 	bl	1017740 <Xil_Assert>
 1017130:	e3a03001 	mov	r3, #1
 1017134:	e5843000 	str	r3, [r4]
}
 1017138:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101713c:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017140:	e3a01fcb 	mov	r1, #812	; 0x32c
 1017144:	e3400106 	movt	r0, #262	; 0x106
 1017148:	eb00017c 	bl	1017740 <Xil_Assert>
 101714c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1017150:	e3a02001 	mov	r2, #1
 1017154:	e3403146 	movt	r3, #326	; 0x146
 1017158:	e5832000 	str	r2, [r3]
 101715c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FunctionPtr != NULL);
 1017160:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017164:	e300132d 	movw	r1, #813	; 0x32d
 1017168:	e3400106 	movt	r0, #262	; 0x106
 101716c:	eb000173 	bl	1017740 <Xil_Assert>
 1017170:	e3a03001 	mov	r3, #1
 1017174:	e5843000 	str	r3, [r4]
 1017178:	e8bd8010 	pop	{r4, pc}

0101717c <XSpiPs_Abort>:
	u8 Temp;
	u32 Check;
#if !defined(versal)
	u32 Count;
#endif
	XSpiPs_Disable(InstancePtr);
 101717c:	e5903004 	ldr	r3, [r0, #4]
 1017180:	e3a02000 	mov	r2, #0
 1017184:	e5832014 	str	r2, [r3, #20]

	/*
	 * Clear the RX FIFO and drop any data.
	 */
	Check = (XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 1017188:	e590c004 	ldr	ip, [r0, #4]
	return *(volatile u32 *) Addr;
 101718c:	e59c3004 	ldr	r3, [ip, #4]
 1017190:	e28c1004 	add	r1, ip, #4
 1017194:	e28c2020 	add	r2, ip, #32
		XSPIPS_SR_OFFSET) & XSPIPS_IXR_RXNEMPTY_MASK);
	while (Check != (u32)0U) {
 1017198:	e3130010 	tst	r3, #16
 101719c:	0a000003 	beq	10171b0 <XSpiPs_Abort+0x34>
 10171a0:	e5923000 	ldr	r3, [r2]
 10171a4:	e5913000 	ldr	r3, [r1]
 10171a8:	e3130010 	tst	r3, #16
 10171ac:	1afffffb 	bne	10171a0 <XSpiPs_Abort+0x24>
{
 10171b0:	e3a03080 	mov	r3, #128	; 0x80

	/*
	 * Read all RX_FIFO entries
	 */
#if !defined(versal)
	for (Count = 0U; Count < XSPIPS_FIFO_DEPTH; Count++) {
 10171b4:	e2533001 	subs	r3, r3, #1
 10171b8:	e5921000 	ldr	r1, [r2]
 10171bc:	1afffffc 	bne	10171b4 <XSpiPs_Abort+0x38>
	*LocalAddr = Value;
 10171c0:	e3a02002 	mov	r2, #2
 10171c4:	e58c2004 	str	r2, [ip, #4]
	 */
	XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
			XSPIPS_SR_OFFSET,
			XSPIPS_IXR_MODF_MASK);

	InstancePtr->RemainingBytes = 0U;
 10171c8:	e580301c 	str	r3, [r0, #28]
	InstancePtr->RequestedBytes = 0U;
 10171cc:	e5803018 	str	r3, [r0, #24]
	InstancePtr->IsBusy = FALSE;
 10171d0:	e5803020 	str	r3, [r0, #32]
}
 10171d4:	e12fff1e 	bx	lr

010171d8 <XSpiPs_Reset>:
{
 10171d8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10171dc:	e2505000 	subs	r5, r0, #0
 10171e0:	0a000014 	beq	1017238 <XSpiPs_Reset+0x60>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10171e4:	e595100c 	ldr	r1, [r5, #12]
 10171e8:	e3013111 	movw	r3, #4369	; 0x1111
 10171ec:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10171f0:	e3054f40 	movw	r4, #24384	; 0x5f40
 10171f4:	e3404146 	movt	r4, #326	; 0x146
 10171f8:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10171fc:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1017200:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017204:	1a000004 	bne	101721c <XSpiPs_Reset+0x44>
	XSpiPs_Abort(InstancePtr);
 1017208:	ebffffdb 	bl	101717c <XSpiPs_Abort>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 101720c:	e5953004 	ldr	r3, [r5, #4]
	*LocalAddr = Value;
 1017210:	e3a02802 	mov	r2, #131072	; 0x20000
 1017214:	e5832000 	str	r2, [r3]
 1017218:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101721c:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017220:	e3a010e9 	mov	r1, #233	; 0xe9
 1017224:	e3400106 	movt	r0, #262	; 0x106
 1017228:	eb000144 	bl	1017740 <Xil_Assert>
 101722c:	e3a03001 	mov	r3, #1
 1017230:	e5843000 	str	r3, [r4]
}
 1017234:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1017238:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 101723c:	e3a010e8 	mov	r1, #232	; 0xe8
 1017240:	e3400106 	movt	r0, #262	; 0x106
 1017244:	eb00013d 	bl	1017740 <Xil_Assert>
 1017248:	e3053f40 	movw	r3, #24384	; 0x5f40
 101724c:	e3a02001 	mov	r2, #1
 1017250:	e3403146 	movt	r3, #326	; 0x146
 1017254:	e5832000 	str	r2, [r3]
 1017258:	e8bd8070 	pop	{r4, r5, r6, pc}

0101725c <XSpiPs_CfgInitialize>:
{
 101725c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017260:	e2504000 	subs	r4, r0, #0
 1017264:	0a00001e 	beq	10172e4 <XSpiPs_CfgInitialize+0x88>
 1017268:	e3056f40 	movw	r6, #24384	; 0x5f40
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101726c:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017270:	e3406146 	movt	r6, #326	; 0x146
 1017274:	e3a05000 	mov	r5, #0
 1017278:	e1a07001 	mov	r7, r1
 101727c:	e5865000 	str	r5, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1017280:	0a000021 	beq	101730c <XSpiPs_CfgInitialize+0xb0>
	if (InstancePtr->IsBusy == TRUE) {
 1017284:	e5943020 	ldr	r3, [r4, #32]
 1017288:	e3530001 	cmp	r3, #1
 101728c:	0a000012 	beq	10172dc <XSpiPs_CfgInitialize+0x80>
		InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 1017290:	e591e008 	ldr	lr, [r1, #8]
		InstancePtr->StatusHandler = StubStatusHandler;
 1017294:	e3063ac8 	movw	r3, #27336	; 0x6ac8
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1017298:	e1d1c0b0 	ldrh	ip, [r1]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 101729c:	e3011111 	movw	r1, #4369	; 0x1111
		InstancePtr->StatusHandler = StubStatusHandler;
 10172a0:	e3403101 	movt	r3, #257	; 0x101
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10172a4:	e3411111 	movt	r1, #4369	; 0x1111
		InstancePtr->IsBusy = FALSE;
 10172a8:	e5845020 	str	r5, [r4, #32]
		InstancePtr->Config.BaseAddress = EffectiveAddr;
 10172ac:	e5842004 	str	r2, [r4, #4]
		InstancePtr->StatusHandler = StubStatusHandler;
 10172b0:	e5843028 	str	r3, [r4, #40]	; 0x28
		InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 10172b4:	e584e008 	str	lr, [r4, #8]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 10172b8:	e1c4c0b0 	strh	ip, [r4]
		InstancePtr->SendBufferPtr = NULL;
 10172bc:	e5845010 	str	r5, [r4, #16]
		InstancePtr->RecvBufferPtr = NULL;
 10172c0:	e5845014 	str	r5, [r4, #20]
		InstancePtr->RequestedBytes = 0U;
 10172c4:	e5845018 	str	r5, [r4, #24]
		InstancePtr->RemainingBytes = 0U;
 10172c8:	e584501c 	str	r5, [r4, #28]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10172cc:	e584100c 	str	r1, [r4, #12]
		XSpiPs_Reset(InstancePtr);
 10172d0:	ebffffc0 	bl	10171d8 <XSpiPs_Reset>
		Status = (s32)XST_SUCCESS;
 10172d4:	e1a00005 	mov	r0, r5
 10172d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 10172dc:	e3a00005 	mov	r0, #5
}
 10172e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10172e4:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 10172e8:	e3a010aa 	mov	r1, #170	; 0xaa
 10172ec:	e3400106 	movt	r0, #262	; 0x106
 10172f0:	eb000112 	bl	1017740 <Xil_Assert>
 10172f4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10172f8:	e3a02001 	mov	r2, #1
 10172fc:	e3403146 	movt	r3, #326	; 0x146
 1017300:	e1a00004 	mov	r0, r4
 1017304:	e5832000 	str	r2, [r3]
 1017308:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101730c:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 1017310:	e3a010ab 	mov	r1, #171	; 0xab
 1017314:	e3400106 	movt	r0, #262	; 0x106
 1017318:	eb000108 	bl	1017740 <Xil_Assert>
 101731c:	e3a03001 	mov	r3, #1
 1017320:	e1a00007 	mov	r0, r7
 1017324:	e5863000 	str	r3, [r6]
 1017328:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0101732c <XSpiPs_InterruptHandler>:
{
 101732c:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1017330:	e2504000 	subs	r4, r0, #0
 1017334:	0a000083 	beq	1017548 <XSpiPs_InterruptHandler+0x21c>
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1017338:	e594100c 	ldr	r1, [r4, #12]
 101733c:	e3013111 	movw	r3, #4369	; 0x1111
 1017340:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1017344:	e3055f40 	movw	r5, #24384	; 0x5f40
 1017348:	e3405146 	movt	r5, #326	; 0x146
 101734c:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1017350:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1017354:	e5852000 	str	r2, [r5]
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 1017358:	1a000055 	bne	10174b4 <XSpiPs_InterruptHandler+0x188>
		XSpiPs_ReadReg(SpiPtr->Config.BaseAddress, XSPIPS_SR_OFFSET);
 101735c:	e5943004 	ldr	r3, [r4, #4]
 1017360:	e3a02004 	mov	r2, #4
	return *(volatile u32 *) Addr;
 1017364:	e5935004 	ldr	r5, [r3, #4]
	XSpiPs_WriteReg(SpiPtr->Config.BaseAddress, XSPIPS_SR_OFFSET,
 1017368:	e2051043 	and	r1, r5, #67	; 0x43
	if ((u32)XSPIPS_IXR_MODF_MASK == (u32)(IntrStatus & XSPIPS_IXR_MODF_MASK)) {
 101736c:	e3150002 	tst	r5, #2
	*LocalAddr = Value;
 1017370:	e5831004 	str	r1, [r3, #4]
	XSpiPs_WriteReg(SpiPtr->Config.BaseAddress, XSPIPS_IDR_OFFSET,
 1017374:	e5943004 	ldr	r3, [r4, #4]
 1017378:	e583200c 	str	r2, [r3, #12]
	if ((u32)XSPIPS_IXR_MODF_MASK == (u32)(IntrStatus & XSPIPS_IXR_MODF_MASK)) {
 101737c:	1a000053 	bne	10174d0 <XSpiPs_InterruptHandler+0x1a4>
	if ((IntrStatus & XSPIPS_IXR_TXOW_MASK) != 0U) {
 1017380:	e3150004 	tst	r5, #4
 1017384:	0a000034 	beq	101745c <XSpiPs_InterruptHandler+0x130>
		TransCount = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1017388:	e594201c 	ldr	r2, [r4, #28]
 101738c:	e5941018 	ldr	r1, [r4, #24]
		while (TransCount != 0U) {
 1017390:	e5943004 	ldr	r3, [r4, #4]
 1017394:	e0510002 	subs	r0, r1, r2
 1017398:	0a00000e 	beq	10173d8 <XSpiPs_InterruptHandler+0xac>
 101739c:	e5942014 	ldr	r2, [r4, #20]
			if (SpiPtr->RecvBufferPtr != NULL) {
 10173a0:	e3520000 	cmp	r2, #0
	return *(volatile u32 *) Addr;
 10173a4:	e593c020 	ldr	ip, [r3, #32]
 10173a8:	0a000005 	beq	10173c4 <XSpiPs_InterruptHandler+0x98>
			TempData = (u8)XSpiPs_RecvByte(SpiPtr->Config.BaseAddress);
 10173ac:	e5c2c000 	strb	ip, [r2]
				SpiPtr->RecvBufferPtr += 1;
 10173b0:	e5942014 	ldr	r2, [r4, #20]
 10173b4:	e5943004 	ldr	r3, [r4, #4]
 10173b8:	e5941018 	ldr	r1, [r4, #24]
 10173bc:	e2822001 	add	r2, r2, #1
 10173c0:	e5842014 	str	r2, [r4, #20]
		while (TransCount != 0U) {
 10173c4:	e2500001 	subs	r0, r0, #1
			SpiPtr->RequestedBytes--;
 10173c8:	e2411001 	sub	r1, r1, #1
 10173cc:	e5841018 	str	r1, [r4, #24]
		while (TransCount != 0U) {
 10173d0:	1afffff2 	bne	10173a0 <XSpiPs_InterruptHandler+0x74>
 10173d4:	e594201c 	ldr	r2, [r4, #28]
		while ((SpiPtr->RemainingBytes > 0U) &&
 10173d8:	e3520000 	cmp	r2, #0
 10173dc:	0a00000f 	beq	1017420 <XSpiPs_InterruptHandler+0xf4>
 10173e0:	e5942010 	ldr	r2, [r4, #16]
 10173e4:	e2820080 	add	r0, r2, #128	; 0x80
 10173e8:	ea000002 	b	10173f8 <XSpiPs_InterruptHandler+0xcc>
 10173ec:	e1520000 	cmp	r2, r0
 10173f0:	e5943004 	ldr	r3, [r4, #4]
 10173f4:	0a00000b 	beq	1017428 <XSpiPs_InterruptHandler+0xfc>
			XSpiPs_SendByte(SpiPtr->Config.BaseAddress,
 10173f8:	e4d21001 	ldrb	r1, [r2], #1
	*LocalAddr = Value;
 10173fc:	e583101c 	str	r1, [r3, #28]
			SpiPtr->RemainingBytes--;
 1017400:	e594301c 	ldr	r3, [r4, #28]
			SpiPtr->SendBufferPtr += 1;
 1017404:	e5842010 	str	r2, [r4, #16]
			SpiPtr->RemainingBytes--;
 1017408:	e2433001 	sub	r3, r3, #1
		while ((SpiPtr->RemainingBytes > 0U) &&
 101740c:	e3530000 	cmp	r3, #0
			SpiPtr->RemainingBytes--;
 1017410:	e584301c 	str	r3, [r4, #28]
		while ((SpiPtr->RemainingBytes > 0U) &&
 1017414:	1afffff4 	bne	10173ec <XSpiPs_InterruptHandler+0xc0>
 1017418:	e5943004 	ldr	r3, [r4, #4]
 101741c:	e5941018 	ldr	r1, [r4, #24]
		if ((SpiPtr->RemainingBytes == 0U) &&
 1017420:	e3510000 	cmp	r1, #0
 1017424:	0a000050 	beq	101756c <XSpiPs_InterruptHandler+0x240>
 1017428:	e3a02004 	mov	r2, #4
			if ((XSpiPs_IsManualStart(SpiPtr) == TRUE)
 101742c:	e1a00004 	mov	r0, r4
 1017430:	e5832008 	str	r2, [r3, #8]
 1017434:	eb000784 	bl	101924c <XSpiPs_GetOptions>
 1017438:	e3100020 	tst	r0, #32
 101743c:	0a000006 	beq	101745c <XSpiPs_InterruptHandler+0x130>
				&& (XSpiPs_IsMaster(SpiPtr) == TRUE)) {
 1017440:	e1a00004 	mov	r0, r4
 1017444:	eb000780 	bl	101924c <XSpiPs_GetOptions>
 1017448:	e3100001 	tst	r0, #1
	return *(volatile u32 *) Addr;
 101744c:	15942004 	ldrne	r2, [r4, #4]
 1017450:	15923000 	ldrne	r3, [r2]
				ConfigReg |= XSPIPS_CR_MANSTRT_MASK;
 1017454:	13833801 	orrne	r3, r3, #65536	; 0x10000
	*LocalAddr = Value;
 1017458:	15823000 	strne	r3, [r2]
	if ((IntrStatus & XSPIPS_IXR_RXOVR_MASK) != 0U) {
 101745c:	e3150001 	tst	r5, #1
 1017460:	1a000024 	bne	10174f8 <XSpiPs_InterruptHandler+0x1cc>
	if ((IntrStatus & XSPIPS_IXR_TXUF_MASK) != 0U) {
 1017464:	e3150040 	tst	r5, #64	; 0x40
 1017468:	08bd8070 	popeq	{r4, r5, r6, pc}
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 101746c:	e594201c 	ldr	r2, [r4, #28]
		SpiPtr->IsBusy = FALSE;
 1017470:	e3a03000 	mov	r3, #0
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1017474:	e5945018 	ldr	r5, [r4, #24]
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1017478:	e1a00004 	mov	r0, r4
		SpiPtr->IsBusy = FALSE;
 101747c:	e5843020 	str	r3, [r4, #32]
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1017480:	e0455002 	sub	r5, r5, r2
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1017484:	eb000770 	bl	101924c <XSpiPs_GetOptions>
 1017488:	e3100010 	tst	r0, #16
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 101748c:	e3001481 	movw	r1, #1153	; 0x481
	return *(volatile u32 *) Addr;
 1017490:	15942004 	ldrne	r2, [r4, #4]
 1017494:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1017498:	15923000 	ldrne	r3, [r2]
			ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 101749c:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 10174a0:	15823000 	strne	r3, [r2]
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 10174a4:	e1a02005 	mov	r2, r5
 10174a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
}
 10174ac:	e8bd4070 	pop	{r4, r5, r6, lr}
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 10174b0:	e12fff13 	bx	r3
	Xil_AssertVoid(SpiPtr->IsReady == XIL_COMPONENT_IS_READY);
 10174b4:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 10174b8:	e3001382 	movw	r1, #898	; 0x382
 10174bc:	e3400106 	movt	r0, #262	; 0x106
 10174c0:	eb00009e 	bl	1017740 <Xil_Assert>
 10174c4:	e3a03001 	mov	r3, #1
 10174c8:	e5853000 	str	r3, [r5]
 10174cc:	e8bd8070 	pop	{r4, r5, r6, pc}
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 10174d0:	e594201c 	ldr	r2, [r4, #28]
 10174d4:	e5945018 	ldr	r5, [r4, #24]
 10174d8:	e0455002 	sub	r5, r5, r2
		XSpiPs_Abort(SpiPtr);
 10174dc:	ebffff26 	bl	101717c <XSpiPs_Abort>
		SpiPtr->StatusHandler(SpiPtr->StatusRef, XST_SPI_MODE_FAULT,
 10174e0:	e1a02005 	mov	r2, r5
 10174e4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 10174e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 10174ec:	e300147f 	movw	r1, #1151	; 0x47f
}
 10174f0:	e8bd4070 	pop	{r4, r5, r6, lr}
		SpiPtr->StatusHandler(SpiPtr->StatusRef, XST_SPI_MODE_FAULT,
 10174f4:	e12fff13 	bx	r3
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 10174f8:	e594201c 	ldr	r2, [r4, #28]
		SpiPtr->IsBusy = FALSE;
 10174fc:	e3a03000 	mov	r3, #0
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 1017500:	e5946018 	ldr	r6, [r4, #24]
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1017504:	e1a00004 	mov	r0, r4
		SpiPtr->IsBusy = FALSE;
 1017508:	e5843020 	str	r3, [r4, #32]
		BytesDone = SpiPtr->RequestedBytes - SpiPtr->RemainingBytes;
 101750c:	e0466002 	sub	r6, r6, r2
		if (XSpiPs_IsManualChipSelect(SpiPtr) == TRUE) {
 1017510:	eb00074d 	bl	101924c <XSpiPs_GetOptions>
 1017514:	e3100010 	tst	r0, #16
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1017518:	e3001482 	movw	r1, #1154	; 0x482
	return *(volatile u32 *) Addr;
 101751c:	15942004 	ldrne	r2, [r4, #4]
 1017520:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1017524:	15923000 	ldrne	r3, [r2]
			ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1017528:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 101752c:	15823000 	strne	r3, [r2]
		SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1017530:	e1a02006 	mov	r2, r6
 1017534:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 1017538:	e12fff33 	blx	r3
	if ((IntrStatus & XSPIPS_IXR_TXUF_MASK) != 0U) {
 101753c:	e3150040 	tst	r5, #64	; 0x40
 1017540:	08bd8070 	popeq	{r4, r5, r6, pc}
 1017544:	eaffffc8 	b	101746c <XSpiPs_InterruptHandler+0x140>
	Xil_AssertVoid(InstancePtr != NULL);
 1017548:	e30a01bc 	movw	r0, #41404	; 0xa1bc
 101754c:	e3001381 	movw	r1, #897	; 0x381
 1017550:	e3400106 	movt	r0, #262	; 0x106
 1017554:	eb000079 	bl	1017740 <Xil_Assert>
 1017558:	e3053f40 	movw	r3, #24384	; 0x5f40
 101755c:	e3a02001 	mov	r2, #1
 1017560:	e3403146 	movt	r3, #326	; 0x146
 1017564:	e5832000 	str	r2, [r3]
 1017568:	e8bd8070 	pop	{r4, r5, r6, pc}
 101756c:	e3a02027 	mov	r2, #39	; 0x27
			if (XSpiPs_IsManualChipSelect(InstancePtr) == TRUE) {
 1017570:	e1a00004 	mov	r0, r4
 1017574:	e583200c 	str	r2, [r3, #12]
 1017578:	eb000733 	bl	101924c <XSpiPs_GetOptions>
 101757c:	e3100010 	tst	r0, #16
			SpiPtr->StatusHandler(SpiPtr->StatusRef,
 1017580:	e5946028 	ldr	r6, [r4, #40]	; 0x28
	return *(volatile u32 *) Addr;
 1017584:	15942004 	ldrne	r2, [r4, #4]
 1017588:	e3a01d12 	mov	r1, #1152	; 0x480
 101758c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
 1017590:	15923000 	ldrne	r3, [r2]
				ConfigReg |= XSPIPS_CR_SSCTRL_MASK;
 1017594:	13833b0f 	orrne	r3, r3, #15360	; 0x3c00
	*LocalAddr = Value;
 1017598:	15823000 	strne	r3, [r2]
			SpiPtr->IsBusy = FALSE;
 101759c:	e3a03000 	mov	r3, #0
			XSpiPs_Disable(SpiPtr);
 10175a0:	e5942004 	ldr	r2, [r4, #4]
			SpiPtr->IsBusy = FALSE;
 10175a4:	e5843020 	str	r3, [r4, #32]
 10175a8:	e5823014 	str	r3, [r2, #20]
			SpiPtr->StatusHandler(SpiPtr->StatusRef,
 10175ac:	e5942018 	ldr	r2, [r4, #24]
 10175b0:	e12fff36 	blx	r6
 10175b4:	eaffffa8 	b	101745c <XSpiPs_InterruptHandler+0x130>

010175b8 <XSpiPs_LookupConfig>:
{
	XSpiPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XSPIPS_NUM_INSTANCES; Index++) {
		if (XSpiPs_ConfigTable[Index].DeviceId == DeviceId) {
 10175b8:	e30a3558 	movw	r3, #42328	; 0xa558
 10175bc:	e3403106 	movt	r3, #262	; 0x106
 10175c0:	e1d320b0 	ldrh	r2, [r3]
			CfgPtr = &XSpiPs_ConfigTable[Index];
			break;
		}
	}
	return (XSpiPs_Config *)CfgPtr;
}
 10175c4:	e1520000 	cmp	r2, r0
 10175c8:	01a00003 	moveq	r0, r3
 10175cc:	13a00000 	movne	r0, #0
 10175d0:	e12fff1e 	bx	lr

010175d4 <XSpiPs_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XSpiPs_SelfTest(XSpiPs *InstancePtr)
{
 10175d4:	e92d4070 	push	{r4, r5, r6, lr}
	u8 DelayTestNss;
	u8 DelayTestBtwn;
	u8 DelayTestAfter;
	u8 DelayTestInit;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10175d8:	e2506000 	subs	r6, r0, #0
{
 10175dc:	e24dd010 	sub	sp, sp, #16
	Xil_AssertNonvoid(InstancePtr != NULL);
 10175e0:	0a00004c 	beq	1017718 <XSpiPs_SelfTest+0x144>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10175e4:	e596100c 	ldr	r1, [r6, #12]
 10175e8:	e3012111 	movw	r2, #4369	; 0x1111
 10175ec:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10175f0:	e3054f40 	movw	r4, #24384	; 0x5f40
 10175f4:	e3404146 	movt	r4, #326	; 0x146
 10175f8:	e3a03000 	mov	r3, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10175fc:	e1510002 	cmp	r1, r2
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017600:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017604:	1a00000b 	bne	1017638 <XSpiPs_SelfTest+0x64>

	/*
	 * Reset the SPI device to leave it in a known good state
	 */
	XSpiPs_Reset(InstancePtr);
 1017608:	ebfffef2 	bl	10171d8 <XSpiPs_Reset>

	/*
	 * All the SPI registers should be in their default state right now.
	 */
	Register = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 101760c:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 1017610:	e5932000 	ldr	r2, [r3]
				 XSPIPS_CR_OFFSET);
	if (Register != XSPIPS_CR_RESET_STATE) {
 1017614:	e3520802 	cmp	r2, #131072	; 0x20000
 1017618:	1a000002 	bne	1017628 <XSpiPs_SelfTest+0x54>
 101761c:	e5933004 	ldr	r3, [r3, #4]
		goto END;
	}

	Register = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
				 XSPIPS_SR_OFFSET);
	if (Register != XSPIPS_ISR_RESET_STATE) {
 1017620:	e3530004 	cmp	r3, #4
 1017624:	0a00000d 	beq	1017660 <XSpiPs_SelfTest+0x8c>
		Status = (s32)XST_REGISTER_ERROR;
 1017628:	e3a0500e 	mov	r5, #14

	Status = (s32)XST_SUCCESS;

	END:
	return Status;
}
 101762c:	e1a00005 	mov	r0, r5
 1017630:	e28dd010 	add	sp, sp, #16
 1017634:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1017638:	e30a01c8 	movw	r0, #41416	; 0xa1c8
 101763c:	e3a01063 	mov	r1, #99	; 0x63
 1017640:	e3400106 	movt	r0, #262	; 0x106
 1017644:	e1a05003 	mov	r5, r3
 1017648:	eb00003c 	bl	1017740 <Xil_Assert>
 101764c:	e3a03001 	mov	r3, #1
 1017650:	e5843000 	str	r3, [r4]
}
 1017654:	e1a00005 	mov	r0, r5
 1017658:	e28dd010 	add	sp, sp, #16
 101765c:	e8bd8070 	pop	{r4, r5, r6, pc}
	DelayTestNss = 0x5AU;
 1017660:	e3a0305a 	mov	r3, #90	; 0x5a
	DelayTestInit = 0x55U;
 1017664:	e3a02055 	mov	r2, #85	; 0x55
	DelayTestBtwn = 0xA5U;
 1017668:	e3e0005a 	mvn	r0, #90	; 0x5a
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 101766c:	e1a01003 	mov	r1, r3
 1017670:	e58d2000 	str	r2, [sp]
	DelayTestAfter = 0xAAU;
 1017674:	e3e0c055 	mvn	ip, #85	; 0x55
	DelayTestNss = 0x5AU;
 1017678:	e5cd300c 	strb	r3, [sp, #12]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 101767c:	e3a030aa 	mov	r3, #170	; 0xaa
	DelayTestInit = 0x55U;
 1017680:	e5cd200f 	strb	r2, [sp, #15]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1017684:	e3a020a5 	mov	r2, #165	; 0xa5
	DelayTestBtwn = 0xA5U;
 1017688:	e5cd000d 	strb	r0, [sp, #13]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 101768c:	e1a00006 	mov	r0, r6
	DelayTestAfter = 0xAAU;
 1017690:	e5cdc00e 	strb	ip, [sp, #14]
	Status = XSpiPs_SetDelays(InstancePtr, DelayTestNss, DelayTestBtwn,
 1017694:	eb00076b 	bl	1019448 <XSpiPs_SetDelays>
	if (Status != (s32)XST_SUCCESS) {
 1017698:	e2505000 	subs	r5, r0, #0
 101769c:	1affffec 	bne	1017654 <XSpiPs_SelfTest+0x80>
	XSpiPs_GetDelays(InstancePtr, &DelayTestNss, &DelayTestBtwn,
 10176a0:	e28d200f 	add	r2, sp, #15
 10176a4:	e28d300e 	add	r3, sp, #14
 10176a8:	e58d2000 	str	r2, [sp]
 10176ac:	e28d100c 	add	r1, sp, #12
 10176b0:	e28d200d 	add	r2, sp, #13
 10176b4:	e1a00006 	mov	r0, r6
 10176b8:	eb00078d 	bl	10194f4 <XSpiPs_GetDelays>
	if ((0x5AU != DelayTestNss) || (0xA5U != DelayTestBtwn) ||
 10176bc:	e5dd300c 	ldrb	r3, [sp, #12]
 10176c0:	e353005a 	cmp	r3, #90	; 0x5a
 10176c4:	1affffd7 	bne	1017628 <XSpiPs_SelfTest+0x54>
 10176c8:	e5dd300d 	ldrb	r3, [sp, #13]
 10176cc:	e35300a5 	cmp	r3, #165	; 0xa5
 10176d0:	1affffd4 	bne	1017628 <XSpiPs_SelfTest+0x54>
 10176d4:	e5dd300e 	ldrb	r3, [sp, #14]
 10176d8:	e35300aa 	cmp	r3, #170	; 0xaa
 10176dc:	1affffd1 	bne	1017628 <XSpiPs_SelfTest+0x54>
		(0xAAU != DelayTestAfter) || (0x55U != DelayTestInit)) {
 10176e0:	e5dd300f 	ldrb	r3, [sp, #15]
 10176e4:	e3530055 	cmp	r3, #85	; 0x55
 10176e8:	1affffce 	bne	1017628 <XSpiPs_SelfTest+0x54>
	Status = XSpiPs_SetDelays(InstancePtr, 0U, 0U, 0U, 0U);
 10176ec:	e58d5000 	str	r5, [sp]
 10176f0:	e1a03005 	mov	r3, r5
 10176f4:	e1a02005 	mov	r2, r5
 10176f8:	e1a01005 	mov	r1, r5
 10176fc:	e1a00006 	mov	r0, r6
 1017700:	eb000750 	bl	1019448 <XSpiPs_SetDelays>
	if (Status != (s32)XST_SUCCESS) {
 1017704:	e2505000 	subs	r5, r0, #0
 1017708:	1affffd1 	bne	1017654 <XSpiPs_SelfTest+0x80>
	XSpiPs_Reset(InstancePtr);
 101770c:	e1a00006 	mov	r0, r6
 1017710:	ebfffeb0 	bl	10171d8 <XSpiPs_Reset>
	Status = (s32)XST_SUCCESS;
 1017714:	eaffffce 	b	1017654 <XSpiPs_SelfTest+0x80>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1017718:	e30a01c8 	movw	r0, #41416	; 0xa1c8
 101771c:	e3a01062 	mov	r1, #98	; 0x62
 1017720:	e3400106 	movt	r0, #262	; 0x106
 1017724:	e1a05006 	mov	r5, r6
 1017728:	eb000004 	bl	1017740 <Xil_Assert>
 101772c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1017730:	e3a02001 	mov	r2, #1
 1017734:	e3403146 	movt	r3, #326	; 0x146
 1017738:	e5832000 	str	r2, [r3]
 101773c:	eaffffc4 	b	1017654 <XSpiPs_SelfTest+0x80>

01017740 <Xil_Assert>:
*
******************************************************************************/
void Xil_Assert(const char8 *File, s32 Line)
{
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
 1017740:	e3003048 	movw	r3, #72	; 0x48
 1017744:	e3403107 	movt	r3, #263	; 0x107
 1017748:	e5933000 	ldr	r3, [r3]
 101774c:	e3530000 	cmp	r3, #0
 1017750:	0a000009 	beq	101777c <Xil_Assert+0x3c>
{
 1017754:	e92d4010 	push	{r4, lr}
		(*Xil_AssertCallbackRoutine)(File, Line);
 1017758:	e12fff33 	blx	r3
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait != 0) {
 101775c:	e30a3564 	movw	r3, #42340	; 0xa564
 1017760:	e3403106 	movt	r3, #262	; 0x106
 1017764:	e5933000 	ldr	r3, [r3]
 1017768:	e3530000 	cmp	r3, #0
 101776c:	08bd8010 	popeq	{r4, pc}
 1017770:	e3530000 	cmp	r3, #0
 1017774:	1afffffb 	bne	1017768 <Xil_Assert+0x28>
 1017778:	e8bd8010 	pop	{r4, pc}
 101777c:	e30a3564 	movw	r3, #42340	; 0xa564
 1017780:	e3403106 	movt	r3, #262	; 0x106
 1017784:	e5933000 	ldr	r3, [r3]
 1017788:	e3530000 	cmp	r3, #0
 101778c:	012fff1e 	bxeq	lr
 1017790:	e3530000 	cmp	r3, #0
 1017794:	1afffffb 	bne	1017788 <Xil_Assert+0x48>
 1017798:	e12fff1e 	bx	lr

0101779c <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
 101779c:	e3003048 	movw	r3, #72	; 0x48
 10177a0:	e3403107 	movt	r3, #263	; 0x107
 10177a4:	e5830000 	str	r0, [r3]
}
 10177a8:	e12fff1e 	bx	lr

010177ac <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
	(void) NullParameter;
}
 10177ac:	e12fff1e 	bx	lr

010177b0 <print>:
 * print -- do a raw print of a string
 */
#include "xil_printf.h"

void print(const char8 *ptr)
{
 10177b0:	e92d4010 	push	{r4, lr}
 10177b4:	e1a04000 	mov	r4, r0
#if HYP_GUEST && EL1_NONSECURE && XEN_USE_PV_CONSOLE
	XPVXenConsole_Write(ptr);
#else
#ifdef STDOUT_BASEADDRESS
  while (*ptr != (char8)0) {
 10177b8:	e5d00000 	ldrb	r0, [r0]
 10177bc:	e3500000 	cmp	r0, #0
 10177c0:	08bd8010 	popeq	{r4, pc}
    outbyte (*ptr);
 10177c4:	eb00025e 	bl	1018144 <outbyte>
  while (*ptr != (char8)0) {
 10177c8:	e5f40001 	ldrb	r0, [r4, #1]!
 10177cc:	e3500000 	cmp	r0, #0
 10177d0:	1afffffb 	bne	10177c4 <print+0x14>
 10177d4:	e8bd8010 	pop	{r4, pc}

010177d8 <Xil_DCacheInvalidateLine>:
****************************************************************************/
void Xil_DCacheInvalidateLine(u32 adr)
{
	u32 currmask;

	currmask = mfcpsr();
 10177d8:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10177dc:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10177e0:	e129f002 	msr	CPSR_fc, r2
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10177e4:	e3a02a02 	mov	r2, #8192	; 0x2000
 10177e8:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 10177ec:	e5820770 	str	r0, [r2, #1904]	; 0x770
****************************************************************************/
void Xil_L2CacheInvalidateLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, (u32)adr);
	/* synchronize the processor */
	dsb();
 10177f0:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10177f4:	e3a02000 	mov	r2, #0
 10177f8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10177fc:	e3c0001f 	bic	r0, r0, #31
 1017800:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 1017804:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017808:	e129f003 	msr	CPSR_fc, r3
}
 101780c:	e12fff1e 	bx	lr

01017810 <Xil_DCacheInvalidateRange>:
	currmask = mfcpsr();
 1017810:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017814:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1017818:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 101781c:	e3510000 	cmp	r1, #0
 1017820:	0a000031 	beq	10178ec <Xil_DCacheInvalidateRange+0xdc>
{
 1017824:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017828:	e3a02000 	mov	r2, #0
		end = tempadr + len;
 101782c:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017830:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		if ((tempadr & (cacheline-1U)) != 0U) {
 1017834:	e310001f 	tst	r0, #31
 1017838:	0a00000d 	beq	1017874 <Xil_DCacheInvalidateRange+0x64>
			tempadr &= (~(cacheline - 1U));
 101783c:	e3c0001f 	bic	r0, r0, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017840:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1017844:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 1017848:	f57ff04f 	dsb	sy
 101784c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017850:	e3a0e003 	mov	lr, #3
 1017854:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017858:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 101785c:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1017860:	e5830770 	str	r0, [r3, #1904]	; 0x770
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, adr);
#endif
	/* synchronize the processor */
	dsb();
 1017864:	f57ff04f 	dsb	sy
			tempadr += cacheline;
 1017868:	e2800020 	add	r0, r0, #32
 101786c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1017870:	e5832730 	str	r2, [r3, #1840]	; 0x730
		if ((tempend & (cacheline-1U)) != 0U) {
 1017874:	e311001f 	tst	r1, #31
 1017878:	0a00000d 	beq	10178b4 <Xil_DCacheInvalidateRange+0xa4>
			tempend &= (~(cacheline - 1U));
 101787c:	e3c1101f 	bic	r1, r1, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017880:	e3a02000 	mov	r2, #0
 1017884:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1017888:	ee071f3e 	mcr	15, 0, r1, cr7, cr14, {1}
	dsb();
 101788c:	f57ff04f 	dsb	sy
 1017890:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017894:	e3a0e003 	mov	lr, #3
 1017898:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101789c:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 10178a0:	e58317b0 	str	r1, [r3, #1968]	; 0x7b0
 10178a4:	e5831770 	str	r1, [r3, #1904]	; 0x770
	dsb();
 10178a8:	f57ff04f 	dsb	sy
 10178ac:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10178b0:	e5832730 	str	r2, [r3, #1840]	; 0x730
		while (tempadr < tempend) {
 10178b4:	e1500001 	cmp	r0, r1
 10178b8:	2a000008 	bcs	10178e0 <Xil_DCacheInvalidateRange+0xd0>
			*L2CCOffset = tempadr;
 10178bc:	e3a03a02 	mov	r3, #8192	; 0x2000
 10178c0:	e3a02000 	mov	r2, #0
 10178c4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10178c8:	e5830770 	str	r0, [r3, #1904]	; 0x770
 10178cc:	e5832730 	str	r2, [r3, #1840]	; 0x730
			asm_cp15_inval_dc_line_mva_poc(tempadr);
 10178d0:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			tempadr += cacheline;
 10178d4:	e2800020 	add	r0, r0, #32
		while (tempadr < tempend) {
 10178d8:	e1500001 	cmp	r0, r1
 10178dc:	3afffff9 	bcc	10178c8 <Xil_DCacheInvalidateRange+0xb8>
	dsb();
 10178e0:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10178e4:	e129f00c 	msr	CPSR_fc, ip
}
 10178e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	dsb();
 10178ec:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10178f0:	e129f00c 	msr	CPSR_fc, ip
 10178f4:	e12fff1e 	bx	lr

010178f8 <Xil_DCacheFlushLine>:
	currmask = mfcpsr();
 10178f8:	e10f1000 	mrs	r1, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10178fc:	e38130c0 	orr	r3, r1, #192	; 0xc0
 1017900:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017904:	e3a02000 	mov	r2, #0
 1017908:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 101790c:	e3c0301f 	bic	r3, r0, #31
 1017910:	ee073f3e 	mcr	15, 0, r3, cr7, cr14, {1}
	dsb();
 1017914:	f57ff04f 	dsb	sy
 1017918:	e3a03a02 	mov	r3, #8192	; 0x2000
 101791c:	e3a0c003 	mov	ip, #3
 1017920:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017924:	e583cf40 	str	ip, [r3, #3904]	; 0xf40
 1017928:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 101792c:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1017930:	f57ff04f 	dsb	sy
 1017934:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1017938:	e5832730 	str	r2, [r3, #1840]	; 0x730
	mtcpsr(currmask);
 101793c:	e129f001 	msr	CPSR_fc, r1
}
 1017940:	e12fff1e 	bx	lr

01017944 <Xil_DCacheFlushRange>:
	currmask = mfcpsr();
 1017944:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017948:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 101794c:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1017950:	e3510000 	cmp	r1, #0
 1017954:	0a00000c 	beq	101798c <Xil_DCacheFlushRange+0x48>
		end = LocalAddr + len;
 1017958:	e0801001 	add	r1, r0, r1
		LocalAddr &= ~(cacheline - 1U);
 101795c:	e3c0001f 	bic	r0, r0, #31
		while (LocalAddr < end) {
 1017960:	e1510000 	cmp	r1, r0
 1017964:	9a000008 	bls	101798c <Xil_DCacheFlushRange+0x48>
			*L2CCOffset = LocalAddr;
 1017968:	e3a03a02 	mov	r3, #8192	; 0x2000
 101796c:	e3a02000 	mov	r2, #0
 1017970:	e34f38f0 	movt	r3, #63728	; 0xf8f0
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1017974:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			*L2CCOffset = LocalAddr;
 1017978:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 101797c:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1017980:	e1510000 	cmp	r1, r0
 1017984:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1017988:	8afffff9 	bhi	1017974 <Xil_DCacheFlushRange+0x30>
	dsb();
 101798c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017990:	e129f00c 	msr	CPSR_fc, ip
}
 1017994:	e12fff1e 	bx	lr

01017998 <Xil_DCacheStoreLine>:
	currmask = mfcpsr();
 1017998:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 101799c:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10179a0:	e129f002 	msr	CPSR_fc, r2
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10179a4:	e3a02000 	mov	r2, #0
 10179a8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10179ac:	e3c0201f 	bic	r2, r0, #31
 10179b0:	ee072f3a 	mcr	15, 0, r2, cr7, cr10, {1}
	dsb();
 10179b4:	f57ff04f 	dsb	sy
 10179b8:	e3a02a02 	mov	r2, #8192	; 0x2000
 10179bc:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 10179c0:	e58207b0 	str	r0, [r2, #1968]	; 0x7b0
****************************************************************************/
void Xil_L2CacheStoreLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
	/* synchronize the processor */
	dsb();
 10179c4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10179c8:	e129f003 	msr	CPSR_fc, r3
}
 10179cc:	e12fff1e 	bx	lr

010179d0 <Xil_ICacheInvalidateLine>:
	currmask = mfcpsr();
 10179d0:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10179d4:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10179d8:	e129f002 	msr	CPSR_fc, r2
 10179dc:	e3a02a02 	mov	r2, #8192	; 0x2000
 10179e0:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 10179e4:	e5820770 	str	r0, [r2, #1904]	; 0x770
	dsb();
 10179e8:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10179ec:	e3a02001 	mov	r2, #1
 10179f0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 10179f4:	e3c0001f 	bic	r0, r0, #31
 10179f8:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 10179fc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017a00:	e129f003 	msr	CPSR_fc, r3
}
 1017a04:	e12fff1e 	bx	lr

01017a08 <Xil_ICacheInvalidateRange>:
	currmask = mfcpsr();
 1017a08:	e10f2000 	mrs	r2, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017a0c:	e38230c0 	orr	r3, r2, #192	; 0xc0
 1017a10:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1017a14:	e3510000 	cmp	r1, #0
 1017a18:	0a00000d 	beq	1017a54 <Xil_ICacheInvalidateRange+0x4c>
		end = LocalAddr + len;
 1017a1c:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017a20:	e3a03001 	mov	r3, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1017a24:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017a28:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
		while (LocalAddr < end) {
 1017a2c:	e1510000 	cmp	r1, r0
 1017a30:	9a000007 	bls	1017a54 <Xil_ICacheInvalidateRange+0x4c>
		*L2CCOffset = LocalAddr;
 1017a34:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017a38:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017a3c:	e5830770 	str	r0, [r3, #1904]	; 0x770
		dsb();
 1017a40:	f57ff04f 	dsb	sy
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1017a44:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 1017a48:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1017a4c:	e1510000 	cmp	r1, r0
 1017a50:	8afffff9 	bhi	1017a3c <Xil_ICacheInvalidateRange+0x34>
	dsb();
 1017a54:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017a58:	e129f002 	msr	CPSR_fc, r2
}
 1017a5c:	e12fff1e 	bx	lr

01017a60 <Xil_L1DCacheInvalidate>:
{
 1017a60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1017a64:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017a68:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1017a6c:	e129f003 	msr	CPSR_fc, r3
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017a70:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 1017a74:	e3130004 	tst	r3, #4
 1017a78:	1a00001e 	bne	1017af8 <Xil_L1DCacheInvalidate+0x98>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017a7c:	e3a04000 	mov	r4, #0
 1017a80:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1017a84:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1017a88:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 1017a8c:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1017a90:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1017a94:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1017a98:	e1a00380 	lsl	r0, r0, #7
 1017a9c:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1017aa0:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 1017aa4:	fa000717 	blx	1019708 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1017aa8:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 1017aac:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1017ab0:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1017ab4:	e3500000 	cmp	r0, #0
 1017ab8:	e1a0cf04 	lsl	ip, r4, #30
 1017abc:	13a03000 	movne	r3, #0
 1017ac0:	11a02003 	movne	r2, r3
 1017ac4:	0a000005 	beq	1017ae0 <Xil_L1DCacheInvalidate+0x80>
			C7Reg = Way | Set;
 1017ac8:	e182100c 	orr	r1, r2, ip
			asm_cp15_inval_dc_line_sw(C7Reg);
 1017acc:	ee071f56 	mcr	15, 0, r1, cr7, cr6, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1017ad0:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 1017ad4:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1017ad8:	e1500003 	cmp	r0, r3
 1017adc:	1afffff9 	bne	1017ac8 <Xil_L1DCacheInvalidate+0x68>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 1017ae0:	e1550004 	cmp	r5, r4
 1017ae4:	e2844001 	add	r4, r4, #1
 1017ae8:	1afffff1 	bne	1017ab4 <Xil_L1DCacheInvalidate+0x54>
	dsb();
 1017aec:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017af0:	e129f006 	msr	CPSR_fc, r6
}
 1017af4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	stack_size=stack_start-stack_end;
 1017af8:	e3011800 	movw	r1, #6144	; 0x1800
 1017afc:	e3000000 	movw	r0, #0
 1017b00:	e3400000 	movt	r0, #0
 1017b04:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1017b08:	e0411000 	sub	r1, r1, r0
 1017b0c:	ebffff8c 	bl	1017944 <Xil_DCacheFlushRange>
 1017b10:	eaffffd9 	b	1017a7c <Xil_L1DCacheInvalidate+0x1c>

01017b14 <Xil_L1DCacheEnable>:
{
 1017b14:	e92d4010 	push	{r4, lr}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017b18:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 1017b1c:	e3140004 	tst	r4, #4
 1017b20:	18bd8010 	popne	{r4, pc}
	Xil_L1DCacheInvalidate();
 1017b24:	ebffffcd 	bl	1017a60 <Xil_L1DCacheInvalidate>
	CtrlReg |= (XREG_CP15_CONTROL_C_BIT);
 1017b28:	e3844004 	orr	r4, r4, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017b2c:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
}
 1017b30:	e8bd8010 	pop	{r4, pc}

01017b34 <Xil_L1DCacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017b34:	e3a03000 	mov	r3, #0
 1017b38:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1017b3c:	e3c0001f 	bic	r0, r0, #31
 1017b40:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 1017b44:	f57ff04f 	dsb	sy
}
 1017b48:	e12fff1e 	bx	lr

01017b4c <Xil_L1DCacheInvalidateRange>:
	currmask = mfcpsr();
 1017b4c:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017b50:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1017b54:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1017b58:	e3510000 	cmp	r1, #0
 1017b5c:	0a000009 	beq	1017b88 <Xil_L1DCacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1017b60:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1017b64:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1017b68:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1017b6c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1017b70:	e1510000 	cmp	r1, r0
 1017b74:	9a000003 	bls	1017b88 <Xil_L1DCacheInvalidateRange+0x3c>
			asm_cp15_inval_dc_line_mva_poc(LocalAddr);
 1017b78:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			LocalAddr += cacheline;
 1017b7c:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1017b80:	e1510000 	cmp	r1, r0
 1017b84:	8afffffb 	bhi	1017b78 <Xil_L1DCacheInvalidateRange+0x2c>
	dsb();
 1017b88:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017b8c:	e129f003 	msr	CPSR_fc, r3
}
 1017b90:	e12fff1e 	bx	lr

01017b94 <Xil_L1DCacheFlush>:
{
 1017b94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1017b98:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017b9c:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1017ba0:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1017ba4:	e3a04000 	mov	r4, #0
 1017ba8:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1017bac:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1017bb0:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 1017bb4:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1017bb8:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1017bbc:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1017bc0:	e1a00380 	lsl	r0, r0, #7
 1017bc4:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1017bc8:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 1017bcc:	fa0006cd 	blx	1019708 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1017bd0:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 1017bd4:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1017bd8:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1017bdc:	e3500000 	cmp	r0, #0
 1017be0:	e1a0cf04 	lsl	ip, r4, #30
 1017be4:	13a03000 	movne	r3, #0
 1017be8:	11a02003 	movne	r2, r3
 1017bec:	0a000005 	beq	1017c08 <Xil_L1DCacheFlush+0x74>
			C7Reg = Way | Set;
 1017bf0:	e182100c 	orr	r1, r2, ip
			asm_cp15_clean_inval_dc_line_sw(C7Reg);
 1017bf4:	ee071f5e 	mcr	15, 0, r1, cr7, cr14, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1017bf8:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 1017bfc:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1017c00:	e1500003 	cmp	r0, r3
 1017c04:	1afffff9 	bne	1017bf0 <Xil_L1DCacheFlush+0x5c>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 1017c08:	e1550004 	cmp	r5, r4
 1017c0c:	e2844001 	add	r4, r4, #1
 1017c10:	1afffff1 	bne	1017bdc <Xil_L1DCacheFlush+0x48>
	dsb();
 1017c14:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017c18:	e129f006 	msr	CPSR_fc, r6
}
 1017c1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01017c20 <Xil_L1DCacheDisable>:
{
 1017c20:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheFlush();
 1017c24:	ebffffda 	bl	1017b94 <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017c28:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 1017c2c:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017c30:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1017c34:	e8bd8010 	pop	{r4, pc}

01017c38 <Xil_DCacheFlush>:
{
 1017c38:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1017c3c:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017c40:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1017c44:	e129f003 	msr	CPSR_fc, r3
	Xil_L1DCacheFlush();
 1017c48:	ebffffd1 	bl	1017b94 <Xil_L1DCacheFlush>
 1017c4c:	e3a02a02 	mov	r2, #8192	; 0x2000
 1017c50:	e3a01003 	mov	r1, #3
 1017c54:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1017c58:	e30f3fff 	movw	r3, #65535	; 0xffff
 1017c5c:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1017c60:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1017c64:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1017c68:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1017c6c:	e3530000 	cmp	r3, #0
 1017c70:	1afffffb 	bne	1017c64 <Xil_DCacheFlush+0x2c>
	*LocalAddr = Value;
 1017c74:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017c78:	e3a02000 	mov	r2, #0
 1017c7c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017c80:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1017c84:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1017c88:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017c8c:	e129f004 	msr	CPSR_fc, r4
}
 1017c90:	e8bd8010 	pop	{r4, pc}

01017c94 <Xil_L1DCacheFlushLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017c94:	e3a03000 	mov	r3, #0
 1017c98:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1017c9c:	e3c0001f 	bic	r0, r0, #31
 1017ca0:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 1017ca4:	f57ff04f 	dsb	sy
}
 1017ca8:	e12fff1e 	bx	lr

01017cac <Xil_L1DCacheFlushRange>:
	currmask = mfcpsr();
 1017cac:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017cb0:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1017cb4:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1017cb8:	e3510000 	cmp	r1, #0
 1017cbc:	0a000009 	beq	1017ce8 <Xil_L1DCacheFlushRange+0x3c>
		end = LocalAddr + len;
 1017cc0:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017cc4:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1017cc8:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017ccc:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1017cd0:	e1510000 	cmp	r1, r0
 1017cd4:	9a000003 	bls	1017ce8 <Xil_L1DCacheFlushRange+0x3c>
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1017cd8:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			LocalAddr += cacheline;
 1017cdc:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1017ce0:	e1510000 	cmp	r1, r0
 1017ce4:	8afffffb 	bhi	1017cd8 <Xil_L1DCacheFlushRange+0x2c>
	dsb();
 1017ce8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017cec:	e129f003 	msr	CPSR_fc, r3
}
 1017cf0:	e12fff1e 	bx	lr

01017cf4 <Xil_L1DCacheStoreLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1017cf4:	e3a03000 	mov	r3, #0
 1017cf8:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1017cfc:	e3c0001f 	bic	r0, r0, #31
 1017d00:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
	dsb();
 1017d04:	f57ff04f 	dsb	sy
}
 1017d08:	e12fff1e 	bx	lr

01017d0c <Xil_L1ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017d0c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 1017d10:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1017d14:	112fff1e 	bxne	lr
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1017d18:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1017d1c:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017d20:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1017d24:	e12fff1e 	bx	lr

01017d28 <Xil_L1ICacheDisable>:
	dsb();
 1017d28:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1017d2c:	e3a03000 	mov	r3, #0
 1017d30:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017d34:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1017d38:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017d3c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1017d40:	e12fff1e 	bx	lr

01017d44 <Xil_L1ICacheInvalidate>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017d44:	e3a03001 	mov	r3, #1
 1017d48:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1017d4c:	e3a03000 	mov	r3, #0
 1017d50:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 1017d54:	f57ff04f 	dsb	sy
}
 1017d58:	e12fff1e 	bx	lr

01017d5c <Xil_L1ICacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017d5c:	e3a03001 	mov	r3, #1
 1017d60:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 1017d64:	e3c0001f 	bic	r0, r0, #31
 1017d68:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 1017d6c:	f57ff04f 	dsb	sy
}
 1017d70:	e12fff1e 	bx	lr

01017d74 <Xil_L1ICacheInvalidateRange>:
	currmask = mfcpsr();
 1017d74:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017d78:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1017d7c:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1017d80:	e3510000 	cmp	r1, #0
 1017d84:	0a000009 	beq	1017db0 <Xil_L1ICacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1017d88:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017d8c:	e3a02001 	mov	r2, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1017d90:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017d94:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1017d98:	e1510000 	cmp	r1, r0
 1017d9c:	9a000003 	bls	1017db0 <Xil_L1ICacheInvalidateRange+0x3c>
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1017da0:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 1017da4:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1017da8:	e1510000 	cmp	r1, r0
 1017dac:	8afffffb 	bhi	1017da0 <Xil_L1ICacheInvalidateRange+0x2c>
	dsb();
 1017db0:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017db4:	e129f003 	msr	CPSR_fc, r3
}
 1017db8:	e12fff1e 	bx	lr

01017dbc <Xil_L2CacheDisable>:
	return *(volatile u32 *) Addr;
 1017dbc:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017dc0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017dc4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
    if((L2CCReg & 0x1U) != 0U) {
 1017dc8:	e3120001 	tst	r2, #1
 1017dcc:	012fff1e 	bxeq	lr
	*LocalAddr = Value;
 1017dd0:	e30f2fff 	movw	r2, #65535	; 0xffff
 1017dd4:	e3a01003 	mov	r1, #3
 1017dd8:	e5831f40 	str	r1, [r3, #3904]	; 0xf40
 1017ddc:	e58327fc 	str	r2, [r3, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1017de0:	e59327fc 	ldr	r2, [r3, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1017de4:	e6ff2072 	uxth	r2, r2
	while(ResultL2Cache != (u32)0U) {
 1017de8:	e3520000 	cmp	r2, #0
 1017dec:	0a000004 	beq	1017e04 <Xil_L2CacheDisable+0x48>
 1017df0:	e1a02003 	mov	r2, r3
 1017df4:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
		ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1017df8:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1017dfc:	e3530000 	cmp	r3, #0
 1017e00:	1afffffb 	bne	1017df4 <Xil_L2CacheDisable+0x38>
	*LocalAddr = Value;
 1017e04:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017e08:	e3a02000 	mov	r2, #0
 1017e0c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017e10:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1017e14:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1017e18:	f57ff04f 	dsb	sy
	return *(volatile u32 *) Addr;
 1017e1c:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	    Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 1017e20:	e3c22001 	bic	r2, r2, #1
	*LocalAddr = Value;
 1017e24:	e5832100 	str	r2, [r3, #256]	; 0x100
		dsb();
 1017e28:	f57ff04f 	dsb	sy
}
 1017e2c:	e12fff1e 	bx	lr

01017e30 <Xil_DCacheDisable>:
{
 1017e30:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 1017e34:	ebffffe0 	bl	1017dbc <Xil_L2CacheDisable>
	Xil_L1DCacheFlush();
 1017e38:	ebffff55 	bl	1017b94 <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017e3c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 1017e40:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017e44:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1017e48:	e8bd8010 	pop	{r4, pc}

01017e4c <Xil_ICacheDisable>:
{
 1017e4c:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 1017e50:	ebffffd9 	bl	1017dbc <Xil_L2CacheDisable>
	dsb();
 1017e54:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1017e58:	e3a03000 	mov	r3, #0
 1017e5c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017e60:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1017e64:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017e68:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1017e6c:	e8bd8010 	pop	{r4, pc}

01017e70 <Xil_L2CacheInvalidate>:
	return *(volatile u32 *) Addr;
 1017e70:	e3a03a02 	mov	r3, #8192	; 0x2000
{
 1017e74:	e92d4010 	push	{r4, lr}
 1017e78:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017e7c:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) != 0U) {
 1017e80:	e3130001 	tst	r3, #1
 1017e84:	1a00000d 	bne	1017ec0 <Xil_L2CacheInvalidate+0x50>
	*LocalAddr = Value;
 1017e88:	e3a02a02 	mov	r2, #8192	; 0x2000
 1017e8c:	e30f3fff 	movw	r3, #65535	; 0xffff
 1017e90:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1017e94:	e582377c 	str	r3, [r2, #1916]	; 0x77c
	return *(volatile u32 *) Addr;
 1017e98:	e592377c 	ldr	r3, [r2, #1916]	; 0x77c
	ResultDCache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET)
 1017e9c:	e6ff3073 	uxth	r3, r3
	while(ResultDCache != (u32)0U) {
 1017ea0:	e3530000 	cmp	r3, #0
 1017ea4:	1afffffb 	bne	1017e98 <Xil_L2CacheInvalidate+0x28>
	*LocalAddr = Value;
 1017ea8:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017eac:	e3a02000 	mov	r2, #0
 1017eb0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017eb4:	e5832730 	str	r2, [r3, #1840]	; 0x730
	dsb();
 1017eb8:	f57ff04f 	dsb	sy
}
 1017ebc:	e8bd8010 	pop	{r4, pc}
	stack_size=stack_start-stack_end;
 1017ec0:	e3011800 	movw	r1, #6144	; 0x1800
 1017ec4:	e3000000 	movw	r0, #0
 1017ec8:	e3400000 	movt	r0, #0
 1017ecc:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1017ed0:	e0411000 	sub	r1, r1, r0
 1017ed4:	ebfffe9a 	bl	1017944 <Xil_DCacheFlushRange>
 1017ed8:	eaffffea 	b	1017e88 <Xil_L2CacheInvalidate+0x18>

01017edc <Xil_DCacheInvalidate>:
{
 1017edc:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1017ee0:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017ee4:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1017ee8:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1017eec:	ebffffdf 	bl	1017e70 <Xil_L2CacheInvalidate>
	Xil_L1DCacheInvalidate();
 1017ef0:	ebfffeda 	bl	1017a60 <Xil_L1DCacheInvalidate>
	mtcpsr(currmask);
 1017ef4:	e129f004 	msr	CPSR_fc, r4
}
 1017ef8:	e8bd8010 	pop	{r4, pc}

01017efc <Xil_ICacheInvalidate>:
{
 1017efc:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1017f00:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1017f04:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1017f08:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1017f0c:	ebffffd7 	bl	1017e70 <Xil_L2CacheInvalidate>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1017f10:	e3a03001 	mov	r3, #1
 1017f14:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1017f18:	e3a03000 	mov	r3, #0
 1017f1c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 1017f20:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1017f24:	e129f004 	msr	CPSR_fc, r4
}
 1017f28:	e8bd8010 	pop	{r4, pc}

01017f2c <Xil_L2CacheEnable.part.0>:
void Xil_L2CacheEnable(void)
 1017f2c:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 1017f30:	e3a04a02 	mov	r4, #8192	; 0x2000
 1017f34:	e34f48f0 	movt	r4, #63728	; 0xf8f0
	*LocalAddr = Value;
 1017f38:	e3001111 	movw	r1, #273	; 0x111
 1017f3c:	e3002121 	movw	r2, #289	; 0x121
	return *(volatile u32 *) Addr;
 1017f40:	e5943104 	ldr	r3, [r4, #260]	; 0x104
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
 1017f44:	e3c3380e 	bic	r3, r3, #917504	; 0xe0000
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
 1017f48:	e3833472 	orr	r3, r3, #1912602624	; 0x72000000
 1017f4c:	e3833836 	orr	r3, r3, #3538944	; 0x360000
	*LocalAddr = Value;
 1017f50:	e5843104 	str	r3, [r4, #260]	; 0x104
 1017f54:	e5841108 	str	r1, [r4, #264]	; 0x108
 1017f58:	e584210c 	str	r2, [r4, #268]	; 0x10c
	return *(volatile u32 *) Addr;
 1017f5c:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	*LocalAddr = Value;
 1017f60:	e5843220 	str	r3, [r4, #544]	; 0x220
		Xil_L2CacheInvalidate();
 1017f64:	ebffffc1 	bl	1017e70 <Xil_L2CacheInvalidate>
	return *(volatile u32 *) Addr;
 1017f68:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	*LocalAddr = Value;
 1017f6c:	e3a02000 	mov	r2, #0
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 1017f70:	e3833001 	orr	r3, r3, #1
 1017f74:	e5843100 	str	r3, [r4, #256]	; 0x100
 1017f78:	e5842730 	str	r2, [r4, #1840]	; 0x730
	    dsb();
 1017f7c:	f57ff04f 	dsb	sy
}
 1017f80:	e8bd8010 	pop	{r4, pc}

01017f84 <Xil_L2CacheEnable>:
	return *(volatile u32 *) Addr;
 1017f84:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017f88:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017f8c:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1017f90:	e3130001 	tst	r3, #1
 1017f94:	112fff1e 	bxne	lr
 1017f98:	eaffffe3 	b	1017f2c <Xil_L2CacheEnable.part.0>

01017f9c <Xil_DCacheEnable>:
{
 1017f9c:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheEnable();
 1017fa0:	ebfffedb 	bl	1017b14 <Xil_L1DCacheEnable>
 1017fa4:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017fa8:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017fac:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1017fb0:	e3130001 	tst	r3, #1
 1017fb4:	18bd8010 	popne	{r4, pc}
}
 1017fb8:	e8bd4010 	pop	{r4, lr}
 1017fbc:	eaffffda 	b	1017f2c <Xil_L2CacheEnable.part.0>

01017fc0 <Xil_ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1017fc0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 1017fc4:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1017fc8:	1a000002 	bne	1017fd8 <Xil_ICacheEnable+0x18>
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1017fcc:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1017fd0:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1017fd4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
 1017fd8:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017fdc:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017fe0:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1017fe4:	e3130001 	tst	r3, #1
 1017fe8:	112fff1e 	bxne	lr
 1017fec:	eaffffce 	b	1017f2c <Xil_L2CacheEnable.part.0>

01017ff0 <Xil_L2CacheInvalidateLine>:
	*LocalAddr = Value;
 1017ff0:	e3a03a02 	mov	r3, #8192	; 0x2000
 1017ff4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1017ff8:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1017ffc:	f57ff04f 	dsb	sy
}
 1018000:	e12fff1e 	bx	lr

01018004 <Xil_L2CacheInvalidateRange>:
	currmask = mfcpsr();
 1018004:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1018008:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 101800c:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1018010:	e3510000 	cmp	r1, #0
 1018014:	0a000011 	beq	1018060 <Xil_L2CacheInvalidateRange+0x5c>
		end = LocalAddr + len;
 1018018:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 101801c:	e3c0001f 	bic	r0, r0, #31
 1018020:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 1018024:	e1510000 	cmp	r1, r0
 1018028:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101802c:	e3a02003 	mov	r2, #3
 1018030:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1018034:	9a000005 	bls	1018050 <Xil_L2CacheInvalidateRange+0x4c>
 1018038:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 101803c:	e5830770 	str	r0, [r3, #1904]	; 0x770
			LocalAddr += cacheline;
 1018040:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1018044:	e1510000 	cmp	r1, r0
 1018048:	e5832730 	str	r2, [r3, #1840]	; 0x730
 101804c:	8afffffa 	bhi	101803c <Xil_L2CacheInvalidateRange+0x38>
 1018050:	e3a03a02 	mov	r3, #8192	; 0x2000
 1018054:	e3a02000 	mov	r2, #0
 1018058:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 101805c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1018060:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1018064:	e129f00c 	msr	CPSR_fc, ip
}
 1018068:	e12fff1e 	bx	lr

0101806c <Xil_L2CacheFlush>:
 101806c:	e3a02a02 	mov	r2, #8192	; 0x2000
 1018070:	e3a01003 	mov	r1, #3
 1018074:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1018078:	e30f3fff 	movw	r3, #65535	; 0xffff
 101807c:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1018080:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1018084:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1018088:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 101808c:	e3530000 	cmp	r3, #0
 1018090:	1afffffb 	bne	1018084 <Xil_L2CacheFlush+0x18>
	*LocalAddr = Value;
 1018094:	e3a03a02 	mov	r3, #8192	; 0x2000
 1018098:	e3a02000 	mov	r2, #0
 101809c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10180a0:	e5832730 	str	r2, [r3, #1840]	; 0x730
 10180a4:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 10180a8:	f57ff04f 	dsb	sy
}
 10180ac:	e12fff1e 	bx	lr

010180b0 <Xil_L2CacheFlushLine>:
 10180b0:	e3a03a02 	mov	r3, #8192	; 0x2000
 10180b4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10180b8:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 10180bc:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 10180c0:	f57ff04f 	dsb	sy
}
 10180c4:	e12fff1e 	bx	lr

010180c8 <Xil_L2CacheFlushRange>:
	currmask = mfcpsr();
 10180c8:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10180cc:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10180d0:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10180d4:	e3510000 	cmp	r1, #0
 10180d8:	0a000011 	beq	1018124 <Xil_L2CacheFlushRange+0x5c>
		end = LocalAddr + len;
 10180dc:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 10180e0:	e3c0001f 	bic	r0, r0, #31
 10180e4:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 10180e8:	e1510000 	cmp	r1, r0
 10180ec:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10180f0:	e3a02003 	mov	r2, #3
 10180f4:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10180f8:	9a000005 	bls	1018114 <Xil_L2CacheFlushRange+0x4c>
 10180fc:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 1018100:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1018104:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1018108:	e1510000 	cmp	r1, r0
 101810c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1018110:	8afffffa 	bhi	1018100 <Xil_L2CacheFlushRange+0x38>
 1018114:	e3a03a02 	mov	r3, #8192	; 0x2000
 1018118:	e3a02000 	mov	r2, #0
 101811c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1018120:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1018124:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1018128:	e129f00c 	msr	CPSR_fc, ip
}
 101812c:	e12fff1e 	bx	lr

01018130 <Xil_L2CacheStoreLine>:
 1018130:	e3a03a02 	mov	r3, #8192	; 0x2000
 1018134:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1018138:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
	dsb();
 101813c:	f57ff04f 	dsb	sy
}
 1018140:	e12fff1e 	bx	lr

01018144 <outbyte>:
#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
	 XUartPs_SendByte(STDOUT_BASEADDRESS, c);
 1018144:	e1a01000 	mov	r1, r0
 1018148:	e3a00a01 	mov	r0, #4096	; 0x1000
 101814c:	e34e0000 	movt	r0, #57344	; 0xe000
 1018150:	ea0003da 	b	10190c0 <XUartPs_SendByte>

01018154 <XGetPlatform_Info>:
#elif (__microblaze__)
	return XPLAT_MICROBLAZE;
#else
	return XPLAT_ZYNQ;
#endif
}
 1018154:	e3a00004 	mov	r0, #4
 1018158:	e12fff1e 	bx	lr

0101815c <getnum>:
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
static s32 getnum( charptr* linep)
{
 101815c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1018160:	e1a07000 	mov	r7, r0
    s32 n;
    s32 ResultIsDigit = 0;
    charptr cptr;
    n = 0;
    cptr = *linep;
 1018164:	e5906000 	ldr	r6, [r0]
	if(cptr != NULL){
 1018168:	e3560000 	cmp	r6, #0
 101816c:	0a00001b 	beq	10181e0 <getnum+0x84>
		ResultIsDigit = isdigit(((s32)*cptr));
 1018170:	fa000b41 	blx	101ae7c <__locale_ctype_ptr>
 1018174:	e5d63000 	ldrb	r3, [r6]
 1018178:	e0800003 	add	r0, r0, r3
	}
    while (ResultIsDigit != 0) {
 101817c:	e5d05001 	ldrb	r5, [r0, #1]
 1018180:	e2155004 	ands	r5, r5, #4
 1018184:	0a000012 	beq	10181d4 <getnum+0x78>
 1018188:	e2864001 	add	r4, r6, #1
 101818c:	e3a05000 	mov	r5, #0
		if(cptr != NULL){
 1018190:	e3540001 	cmp	r4, #1
 1018194:	0a000013 	beq	10181e8 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
			cptr += 1;
			if(cptr != NULL){
 1018198:	e3540000 	cmp	r4, #0
			cptr += 1;
 101819c:	e1a06004 	mov	r6, r4
			if(cptr != NULL){
 10181a0:	0a000010 	beq	10181e8 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
 10181a4:	e5543001 	ldrb	r3, [r4, #-1]
 10181a8:	e0855105 	add	r5, r5, r5, lsl #2
 10181ac:	e2844001 	add	r4, r4, #1
 10181b0:	e2433030 	sub	r3, r3, #48	; 0x30
 10181b4:	e0835085 	add	r5, r3, r5, lsl #1
				ResultIsDigit = isdigit(((s32)*cptr));
 10181b8:	fa000b2f 	blx	101ae7c <__locale_ctype_ptr>
			}
		}
		ResultIsDigit = isdigit(((s32)*cptr));
 10181bc:	fa000b2e 	blx	101ae7c <__locale_ctype_ptr>
 10181c0:	e5d63000 	ldrb	r3, [r6]
 10181c4:	e0800003 	add	r0, r0, r3
    while (ResultIsDigit != 0) {
 10181c8:	e5d03001 	ldrb	r3, [r0, #1]
 10181cc:	e3130004 	tst	r3, #4
 10181d0:	1affffee 	bne	1018190 <getnum+0x34>
	}
    *linep = ((charptr )(cptr));
 10181d4:	e5876000 	str	r6, [r7]
    return(n);
}
 10181d8:	e1a00005 	mov	r0, r5
 10181dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 10181e0:	e1a05006 	mov	r5, r6
 10181e4:	eafffffa 	b	10181d4 <getnum+0x78>
		ResultIsDigit = isdigit(((s32)*cptr));
 10181e8:	fa000b23 	blx	101ae7c <__locale_ctype_ptr>
 10181ec:	e3a03000 	mov	r3, #0
 10181f0:	e5d33000 	ldrb	r3, [r3]
 10181f4:	e7f000f0 	udf	#0

010181f8 <padding.part.0>:
static void padding( const s32 l_flag, const struct params_s *par)
 10181f8:	e92d4070 	push	{r4, r5, r6, lr}
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10181fc:	e5903004 	ldr	r3, [r0, #4]
 1018200:	e5904000 	ldr	r4, [r0]
 1018204:	e1540003 	cmp	r4, r3
 1018208:	a8bd8070 	popge	{r4, r5, r6, pc}
 101820c:	e1a05000 	mov	r5, r0
            outbyte( par->pad_character);
 1018210:	e5d5000c 	ldrb	r0, [r5, #12]
        for (; i<(par->num1); i++) {
 1018214:	e2844001 	add	r4, r4, #1
            outbyte( par->pad_character);
 1018218:	ebffffc9 	bl	1018144 <outbyte>
        for (; i<(par->num1); i++) {
 101821c:	e5953004 	ldr	r3, [r5, #4]
 1018220:	e1540003 	cmp	r4, r3
 1018224:	bafffff9 	blt	1018210 <padding.part.0+0x18>
 1018228:	e8bd8070 	pop	{r4, r5, r6, pc}

0101822c <outnum>:
{
 101822c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char8 digits[] = "0123456789ABCDEF";
 1018230:	e30a41dc 	movw	r4, #41436	; 0xa1dc
 1018234:	e3404106 	movt	r4, #262	; 0x106
{
 1018238:	e1a05000 	mov	r5, r0
 101823c:	e1a08001 	mov	r8, r1
 1018240:	e1a07002 	mov	r7, r2
    const char8 digits[] = "0123456789ABCDEF";
 1018244:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
{
 1018248:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    const char8 digits[] = "0123456789ABCDEF";
 101824c:	e28d9004 	add	r9, sp, #4
 1018250:	e28d6018 	add	r6, sp, #24
 1018254:	e28dc017 	add	ip, sp, #23
 1018258:	e28de037 	add	lr, sp, #55	; 0x37
 101825c:	e5944000 	ldr	r4, [r4]
 1018260:	e8a9000f 	stmia	r9!, {r0, r1, r2, r3}
	outbuf[i] = '0';
 1018264:	e3a03030 	mov	r3, #48	; 0x30
    const char8 digits[] = "0123456789ABCDEF";
 1018268:	e5c94000 	strb	r4, [r9]
	outbuf[i] = '0';
 101826c:	e5ec3001 	strb	r3, [ip, #1]!
    for(i = 0; i<32; i++) {
 1018270:	e15c000e 	cmp	ip, lr
 1018274:	1afffffc 	bne	101826c <outnum+0x40>
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1018278:	e5973018 	ldr	r3, [r7, #24]
 101827c:	e3530000 	cmp	r3, #0
 1018280:	1a000039 	bne	101836c <outnum+0x140>
 1018284:	e1a03fa5 	lsr	r3, r5, #31
 1018288:	e358000a 	cmp	r8, #10
 101828c:	13a03000 	movne	r3, #0
 1018290:	02033001 	andeq	r3, r3, #1
 1018294:	e3530000 	cmp	r3, #0
		num =(-(n));
 1018298:	12655000 	rsbne	r5, r5, #0
        negative = 1;
 101829c:	13a0b001 	movne	fp, #1
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 10182a0:	0a000031 	beq	101836c <outnum+0x140>
        negative = 0;
 10182a4:	e1a09006 	mov	r9, r6
    i = 0;
 10182a8:	e3a0a000 	mov	sl, #0
 10182ac:	ea000000 	b	10182b4 <outnum+0x88>
		i++;
 10182b0:	e1a0a004 	mov	sl, r4
		outbuf[i] = digits[(num % base)];
 10182b4:	e1a00005 	mov	r0, r5
 10182b8:	e1a01008 	mov	r1, r8
 10182bc:	fa0005a8 	blx	1019964 <__aeabi_uidivmod>
 10182c0:	e28d3038 	add	r3, sp, #56	; 0x38
    } while (num > 0);
 10182c4:	e1550008 	cmp	r5, r8
		outbuf[i] = digits[(num % base)];
 10182c8:	e0831001 	add	r1, r3, r1
		i++;
 10182cc:	e28a4001 	add	r4, sl, #1
		outbuf[i] = digits[(num % base)];
 10182d0:	e5513034 	ldrb	r3, [r1, #-52]	; 0xffffffcc
		num /= base;
 10182d4:	e1a05000 	mov	r5, r0
		i++;
 10182d8:	e1a02004 	mov	r2, r4
		outbuf[i] = digits[(num % base)];
 10182dc:	e4c93001 	strb	r3, [r9], #1
    } while (num > 0);
 10182e0:	2afffff2 	bcs	10182b0 <outnum+0x84>
    if (negative != 0) {
 10182e4:	e35b0000 	cmp	fp, #0
 10182e8:	0a000005 	beq	1018304 <outnum+0xd8>
		outbuf[i] = '-';
 10182ec:	e28d3038 	add	r3, sp, #56	; 0x38
		i++;
 10182f0:	e28a2002 	add	r2, sl, #2
		outbuf[i] = '-';
 10182f4:	e0833004 	add	r3, r3, r4
 10182f8:	e2844001 	add	r4, r4, #1
 10182fc:	e3a0102d 	mov	r1, #45	; 0x2d
 1018300:	e5431020 	strb	r1, [r3, #-32]	; 0xffffffe0
    outbuf[i] = '\0';
 1018304:	e28d3038 	add	r3, sp, #56	; 0x38
    par->len = (s32)strlen(outbuf);
 1018308:	e1a00006 	mov	r0, r6
    outbuf[i] = '\0';
 101830c:	e0832002 	add	r2, r3, r2
 1018310:	e3a03000 	mov	r3, #0
 1018314:	e5423020 	strb	r3, [r2, #-32]	; 0xffffffe0
    par->len = (s32)strlen(outbuf);
 1018318:	fa0012d8 	blx	101ce80 <strlen>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 101831c:	e1c721d0 	ldrd	r2, [r7, #16]
    par->len = (s32)strlen(outbuf);
 1018320:	e5870000 	str	r0, [r7]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1018324:	e16f3f13 	clz	r3, r3
 1018328:	e3520000 	cmp	r2, #0
 101832c:	e1a032a3 	lsr	r3, r3, #5
 1018330:	03a03000 	moveq	r3, #0
 1018334:	e3530000 	cmp	r3, #0
 1018338:	1a00000d 	bne	1018374 <outnum+0x148>
 101833c:	e0864004 	add	r4, r6, r4
	outbyte( outbuf[i] );
 1018340:	e5740001 	ldrb	r0, [r4, #-1]!
 1018344:	ebffff7e 	bl	1018144 <outbyte>
    while (&outbuf[i] >= outbuf) {
 1018348:	e1540006 	cmp	r4, r6
 101834c:	1afffffb 	bne	1018340 <outnum+0x114>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1018350:	e5972014 	ldr	r2, [r7, #20]
 1018354:	e5973010 	ldr	r3, [r7, #16]
 1018358:	e3520000 	cmp	r2, #0
 101835c:	13530000 	cmpne	r3, #0
 1018360:	1a000006 	bne	1018380 <outnum+0x154>
}
 1018364:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1018368:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        negative = 0;
 101836c:	e3a0b000 	mov	fp, #0
 1018370:	eaffffcb 	b	10182a4 <outnum+0x78>
 1018374:	e1a00007 	mov	r0, r7
 1018378:	ebffff9e 	bl	10181f8 <padding.part.0>
 101837c:	eaffffee 	b	101833c <outnum+0x110>
 1018380:	e1a00007 	mov	r0, r7
}
 1018384:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1018388:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101838c:	eaffff99 	b	10181f8 <padding.part.0>

01018390 <xil_printf>:
void xil_printf( const char8 *ctrl1, ...){
	XPVXenConsole_Printf(ctrl1);
}
#else
void xil_printf( const char8 *ctrl1, ...)
{
 1018390:	e92d000f 	push	{r0, r1, r2, r3}
 1018394:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1018398:	e24dd02c 	sub	sp, sp, #44	; 0x2c
        /* initialize all the flags for this format.   */
        dot_flag = 0;
#if defined (__aarch64__) || defined (__arch64__)
		long_flag = 0;
#endif
        par.unsigned_flag = 0;
 101839c:	e3a04000 	mov	r4, #0
		par.left_flag = 0;
		par.do_padding = 0;
        par.pad_character = ' ';
 10183a0:	e3a06020 	mov	r6, #32
        par.num2=32767;
 10183a4:	e3075fff 	movw	r5, #32767	; 0x7fff
    va_start( argp, ctrl1);
 10183a8:	e28d204c 	add	r2, sp, #76	; 0x4c
{
 10183ac:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    va_start( argp, ctrl1);
 10183b0:	e58d2004 	str	r2, [sp, #4]
    char8 *ctrl = (char8 *)ctrl1;
 10183b4:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 10183b8:	e3530000 	cmp	r3, #0
 10183bc:	0a00000a 	beq	10183ec <xil_printf+0x5c>
 10183c0:	e5d30000 	ldrb	r0, [r3]
 10183c4:	e3500000 	cmp	r0, #0
 10183c8:	0a000007 	beq	10183ec <xil_printf+0x5c>
        if (*ctrl != '%') {
 10183cc:	e3500025 	cmp	r0, #37	; 0x25
 10183d0:	0a000009 	beq	10183fc <xil_printf+0x6c>
            outbyte(*ctrl);
 10183d4:	ebffff5a 	bl	1018144 <outbyte>
			ctrl += 1;
 10183d8:	e59d3008 	ldr	r3, [sp, #8]
 10183dc:	e2833001 	add	r3, r3, #1
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 10183e0:	e3530000 	cmp	r3, #0
			ctrl += 1;
 10183e4:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 10183e8:	1afffff4 	bne	10183c0 <xil_printf+0x30>
                continue;
        }
        goto try_next;
    }
    va_end( argp);
}
 10183ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
 10183f0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 10183f4:	e28dd010 	add	sp, sp, #16
 10183f8:	e12fff1e 	bx	lr
        dot_flag = 0;
 10183fc:	e3a08000 	mov	r8, #0
        par.unsigned_flag = 0;
 1018400:	e58d4024 	str	r4, [sp, #36]	; 0x24
		par.left_flag = 0;
 1018404:	e58d4020 	str	r4, [sp, #32]
		par.do_padding = 0;
 1018408:	e58d401c 	str	r4, [sp, #28]
        par.pad_character = ' ';
 101840c:	e5cd6018 	strb	r6, [sp, #24]
		par.num1=0;
 1018410:	e1cd41f0 	strd	r4, [sp, #16]
		par.len=0;
 1018414:	e58d400c 	str	r4, [sp, #12]
			ctrl += 1;
 1018418:	e2832001 	add	r2, r3, #1
		if(ctrl != NULL) {
 101841c:	e3520000 	cmp	r2, #0
			ctrl += 1;
 1018420:	e58d2008 	str	r2, [sp, #8]
		if(ctrl != NULL) {
 1018424:	0afffff0 	beq	10183ec <xil_printf+0x5c>
			ch = *ctrl;
 1018428:	e5d37001 	ldrb	r7, [r3, #1]
        if (isdigit((s32)ch) != 0) {
 101842c:	fa000a92 	blx	101ae7c <__locale_ctype_ptr>
 1018430:	e2879001 	add	r9, r7, #1
 1018434:	e7d03009 	ldrb	r3, [r0, r9]
 1018438:	e3130004 	tst	r3, #4
 101843c:	0a000016 	beq	101849c <xil_printf+0x10c>
            if (dot_flag != 0) {
 1018440:	e3580000 	cmp	r8, #0
 1018444:	1a0000d9 	bne	10187b0 <xil_printf+0x420>
				if(ctrl != NULL) {
 1018448:	e59d3008 	ldr	r3, [sp, #8]
                if (ch == '0') {
 101844c:	e3570030 	cmp	r7, #48	; 0x30
                    par.pad_character = '0';
 1018450:	05cd7018 	strbeq	r7, [sp, #24]
				if(ctrl != NULL) {
 1018454:	e3530000 	cmp	r3, #0
 1018458:	0affffe3 	beq	10183ec <xil_printf+0x5c>
			par.num1 = getnum(&ctrl);
 101845c:	e28d0008 	add	r0, sp, #8
 1018460:	ebffff3d 	bl	101815c <getnum>
 1018464:	e59d3008 	ldr	r3, [sp, #8]
                par.do_padding = 1;
 1018468:	e3a02001 	mov	r2, #1
			par.num1 = getnum(&ctrl);
 101846c:	e58d0010 	str	r0, [sp, #16]
                par.do_padding = 1;
 1018470:	e58d201c 	str	r2, [sp, #28]
            if(ctrl != NULL) {
 1018474:	e3530000 	cmp	r3, #0
 1018478:	0affffdb 	beq	10183ec <xil_printf+0x5c>
			ctrl -= 1;
 101847c:	e2433001 	sub	r3, r3, #1
 1018480:	e58d3008 	str	r3, [sp, #8]
		if(ctrl != NULL) {
 1018484:	e3530000 	cmp	r3, #0
 1018488:	1affffe2 	bne	1018418 <xil_printf+0x88>
}
 101848c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1018490:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 1018494:	e28dd010 	add	sp, sp, #16
 1018498:	e12fff1e 	bx	lr
        switch (tolower((s32)ch)) {
 101849c:	fa000a76 	blx	101ae7c <__locale_ctype_ptr>
 10184a0:	e7d03009 	ldrb	r3, [r0, r9]
 10184a4:	e2033003 	and	r3, r3, #3
 10184a8:	e3530001 	cmp	r3, #1
 10184ac:	02877020 	addeq	r7, r7, #32
 10184b0:	e2477025 	sub	r7, r7, #37	; 0x25
 10184b4:	e3570053 	cmp	r7, #83	; 0x53
 10184b8:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
 10184bc:	ea00005c 	b	1018634 <xil_printf+0x2a4>
 10184c0:	010186f8 	.word	0x010186f8
 10184c4:	01018634 	.word	0x01018634
 10184c8:	01018634 	.word	0x01018634
 10184cc:	01018634 	.word	0x01018634
 10184d0:	01018634 	.word	0x01018634
 10184d4:	01018634 	.word	0x01018634
 10184d8:	01018634 	.word	0x01018634
 10184dc:	01018634 	.word	0x01018634
 10184e0:	01018704 	.word	0x01018704
 10184e4:	010186ec 	.word	0x010186ec
 10184e8:	01018634 	.word	0x01018634
 10184ec:	01018634 	.word	0x01018634
 10184f0:	01018634 	.word	0x01018634
 10184f4:	01018634 	.word	0x01018634
 10184f8:	01018634 	.word	0x01018634
 10184fc:	01018634 	.word	0x01018634
 1018500:	01018634 	.word	0x01018634
 1018504:	01018634 	.word	0x01018634
 1018508:	01018634 	.word	0x01018634
 101850c:	01018634 	.word	0x01018634
 1018510:	01018634 	.word	0x01018634
 1018514:	01018634 	.word	0x01018634
 1018518:	01018634 	.word	0x01018634
 101851c:	01018634 	.word	0x01018634
 1018520:	01018634 	.word	0x01018634
 1018524:	01018634 	.word	0x01018634
 1018528:	01018634 	.word	0x01018634
 101852c:	01018634 	.word	0x01018634
 1018530:	01018634 	.word	0x01018634
 1018534:	01018634 	.word	0x01018634
 1018538:	01018634 	.word	0x01018634
 101853c:	01018634 	.word	0x01018634
 1018540:	01018634 	.word	0x01018634
 1018544:	01018634 	.word	0x01018634
 1018548:	01018634 	.word	0x01018634
 101854c:	01018634 	.word	0x01018634
 1018550:	01018634 	.word	0x01018634
 1018554:	01018634 	.word	0x01018634
 1018558:	01018634 	.word	0x01018634
 101855c:	01018634 	.word	0x01018634
 1018560:	01018634 	.word	0x01018634
 1018564:	01018634 	.word	0x01018634
 1018568:	01018634 	.word	0x01018634
 101856c:	01018634 	.word	0x01018634
 1018570:	01018634 	.word	0x01018634
 1018574:	01018634 	.word	0x01018634
 1018578:	01018634 	.word	0x01018634
 101857c:	01018634 	.word	0x01018634
 1018580:	01018634 	.word	0x01018634
 1018584:	01018634 	.word	0x01018634
 1018588:	01018634 	.word	0x01018634
 101858c:	010186c4 	.word	0x010186c4
 1018590:	01018634 	.word	0x01018634
 1018594:	01018634 	.word	0x01018634
 1018598:	01018634 	.word	0x01018634
 101859c:	01018664 	.word	0x01018664
 10185a0:	01018634 	.word	0x01018634
 10185a4:	01018634 	.word	0x01018634
 10185a8:	01018634 	.word	0x01018634
 10185ac:	01018634 	.word	0x01018634
 10185b0:	01018634 	.word	0x01018634
 10185b4:	01018634 	.word	0x01018634
 10185b8:	0101864c 	.word	0x0101864c
 10185bc:	01018618 	.word	0x01018618
 10185c0:	01018634 	.word	0x01018634
 10185c4:	01018634 	.word	0x01018634
 10185c8:	01018634 	.word	0x01018634
 10185cc:	01018634 	.word	0x01018634
 10185d0:	01018618 	.word	0x01018618
 10185d4:	01018634 	.word	0x01018634
 10185d8:	01018634 	.word	0x01018634
 10185dc:	010187a8 	.word	0x010187a8
 10185e0:	01018634 	.word	0x01018634
 10185e4:	01018634 	.word	0x01018634
 10185e8:	01018634 	.word	0x01018634
 10185ec:	010186c4 	.word	0x010186c4
 10185f0:	01018634 	.word	0x01018634
 10185f4:	01018634 	.word	0x01018634
 10185f8:	01018714 	.word	0x01018714
 10185fc:	01018634 	.word	0x01018634
 1018600:	01018610 	.word	0x01018610
 1018604:	01018634 	.word	0x01018634
 1018608:	01018634 	.word	0x01018634
 101860c:	010186c4 	.word	0x010186c4
                par.unsigned_flag = 1;
 1018610:	e3a03001 	mov	r3, #1
 1018614:	e58d3024 	str	r3, [sp, #36]	; 0x24
                    outnum( va_arg(argp, s32), 10L, &par);
 1018618:	e59d3004 	ldr	r3, [sp, #4]
 101861c:	e28d200c 	add	r2, sp, #12
 1018620:	e3a0100a 	mov	r1, #10
 1018624:	e283c004 	add	ip, r3, #4
 1018628:	e5930000 	ldr	r0, [r3]
 101862c:	e58dc004 	str	ip, [sp, #4]
 1018630:	ebfffefd 	bl	101822c <outnum>
			if(ctrl != NULL) {
 1018634:	e59d3008 	ldr	r3, [sp, #8]
 1018638:	e3530000 	cmp	r3, #0
 101863c:	0affff6a 	beq	10183ec <xil_printf+0x5c>
				ctrl += 1;
 1018640:	e2833001 	add	r3, r3, #1
 1018644:	e58d3008 	str	r3, [sp, #8]
 1018648:	eaffff5a 	b	10183b8 <xil_printf+0x28>
                outbyte( va_arg( argp, s32));
 101864c:	e59d3004 	ldr	r3, [sp, #4]
 1018650:	e2832004 	add	r2, r3, #4
 1018654:	e5d30000 	ldrb	r0, [r3]
 1018658:	e58d2004 	str	r2, [sp, #4]
 101865c:	ebfffeb8 	bl	1018144 <outbyte>
        if(Check == 1) {
 1018660:	eafffff3 	b	1018634 <xil_printf+0x2a4>
                switch (*ctrl) {
 1018664:	e59d3008 	ldr	r3, [sp, #8]
 1018668:	e5d30000 	ldrb	r0, [r3]
 101866c:	e2403061 	sub	r3, r0, #97	; 0x61
 1018670:	e3530011 	cmp	r3, #17
 1018674:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1018678:	ea000065 	b	1018814 <xil_printf+0x484>
 101867c:	010187e8 	.word	0x010187e8
 1018680:	01018814 	.word	0x01018814
 1018684:	01018814 	.word	0x01018814
 1018688:	01018814 	.word	0x01018814
 101868c:	01018814 	.word	0x01018814
 1018690:	01018814 	.word	0x01018814
 1018694:	01018814 	.word	0x01018814
 1018698:	010187f4 	.word	0x010187f4
 101869c:	01018814 	.word	0x01018814
 10186a0:	01018814 	.word	0x01018814
 10186a4:	01018814 	.word	0x01018814
 10186a8:	01018814 	.word	0x01018814
 10186ac:	01018814 	.word	0x01018814
 10186b0:	01018800 	.word	0x01018800
 10186b4:	01018814 	.word	0x01018814
 10186b8:	01018814 	.word	0x01018814
 10186bc:	01018814 	.word	0x01018814
 10186c0:	010187d0 	.word	0x010187d0
                outnum((s32)va_arg(argp, s32), 16L, &par);
 10186c4:	e59d3004 	ldr	r3, [sp, #4]
                par.unsigned_flag = 1;
 10186c8:	e3a01001 	mov	r1, #1
 10186cc:	e58d1024 	str	r1, [sp, #36]	; 0x24
                outnum((s32)va_arg(argp, s32), 16L, &par);
 10186d0:	e28d200c 	add	r2, sp, #12
 10186d4:	e3a01010 	mov	r1, #16
 10186d8:	e283c004 	add	ip, r3, #4
 10186dc:	e5930000 	ldr	r0, [r3]
 10186e0:	e58dc004 	str	ip, [sp, #4]
 10186e4:	ebfffed0 	bl	101822c <outnum>
        if(Check == 1) {
 10186e8:	eaffffd1 	b	1018634 <xil_printf+0x2a4>
 10186ec:	e59d3008 	ldr	r3, [sp, #8]
                dot_flag = 1;
 10186f0:	e3a08001 	mov	r8, #1
 10186f4:	eaffff62 	b	1018484 <xil_printf+0xf4>
                outbyte( '%');
 10186f8:	e3a00025 	mov	r0, #37	; 0x25
 10186fc:	ebfffe90 	bl	1018144 <outbyte>
        if(Check == 1) {
 1018700:	eaffffcb 	b	1018634 <xil_printf+0x2a4>
                par.left_flag = 1;
 1018704:	e3a02001 	mov	r2, #1
 1018708:	e59d3008 	ldr	r3, [sp, #8]
 101870c:	e58d2020 	str	r2, [sp, #32]
        if(Check == 1) {
 1018710:	eaffff5b 	b	1018484 <xil_printf+0xf4>
                outs( va_arg( argp, char *), &par);
 1018714:	e59d3004 	ldr	r3, [sp, #4]
 1018718:	e5937000 	ldr	r7, [r3]
 101871c:	e2833004 	add	r3, r3, #4
 1018720:	e58d3004 	str	r3, [sp, #4]
	if(LocalPtr != NULL) {
 1018724:	e3570000 	cmp	r7, #0
 1018728:	0a000002 	beq	1018738 <xil_printf+0x3a8>
		par->len = (s32)strlen( LocalPtr);
 101872c:	e1a00007 	mov	r0, r7
 1018730:	fa0011d2 	blx	101ce80 <strlen>
 1018734:	e58d000c 	str	r0, [sp, #12]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1018738:	e1cd21dc 	ldrd	r2, [sp, #28]
 101873c:	e16f3f13 	clz	r3, r3
 1018740:	e3520000 	cmp	r2, #0
 1018744:	e1a032a3 	lsr	r3, r3, #5
 1018748:	03a03000 	moveq	r3, #0
 101874c:	e3530000 	cmp	r3, #0
 1018750:	1a00001b 	bne	10187c4 <xil_printf+0x434>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 1018754:	e5d73000 	ldrb	r3, [r7]
 1018758:	e3530000 	cmp	r3, #0
 101875c:	1a000007 	bne	1018780 <xil_printf+0x3f0>
 1018760:	ea000009 	b	101878c <xil_printf+0x3fc>
		(par->num2)--;
 1018764:	e2433001 	sub	r3, r3, #1
 1018768:	e58d3014 	str	r3, [sp, #20]
        outbyte(*LocalPtr);
 101876c:	e5d70000 	ldrb	r0, [r7]
 1018770:	ebfffe73 	bl	1018144 <outbyte>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 1018774:	e5f73001 	ldrb	r3, [r7, #1]!
 1018778:	e3530000 	cmp	r3, #0
 101877c:	0a000002 	beq	101878c <xil_printf+0x3fc>
 1018780:	e59d3014 	ldr	r3, [sp, #20]
 1018784:	e3530000 	cmp	r3, #0
 1018788:	1afffff5 	bne	1018764 <xil_printf+0x3d4>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 101878c:	e1cd21dc 	ldrd	r2, [sp, #28]
 1018790:	e3520000 	cmp	r2, #0
 1018794:	13530000 	cmpne	r3, #0
 1018798:	0affffa5 	beq	1018634 <xil_printf+0x2a4>
 101879c:	e28d000c 	add	r0, sp, #12
 10187a0:	ebfffe94 	bl	10181f8 <padding.part.0>
 10187a4:	eaffffa2 	b	1018634 <xil_printf+0x2a4>
 10187a8:	e59d3008 	ldr	r3, [sp, #8]
 10187ac:	eaffff34 	b	1018484 <xil_printf+0xf4>
                par.num2 = getnum(&ctrl);
 10187b0:	e28d0008 	add	r0, sp, #8
 10187b4:	ebfffe68 	bl	101815c <getnum>
 10187b8:	e59d3008 	ldr	r3, [sp, #8]
 10187bc:	e58d0014 	str	r0, [sp, #20]
 10187c0:	eaffff2b 	b	1018474 <xil_printf+0xe4>
 10187c4:	e28d000c 	add	r0, sp, #12
 10187c8:	ebfffe8a 	bl	10181f8 <padding.part.0>
 10187cc:	eaffffe0 	b	1018754 <xil_printf+0x3c4>
                        outbyte( ((char8)0x0D));
 10187d0:	e3a0000d 	mov	r0, #13
 10187d4:	ebfffe5a 	bl	1018144 <outbyte>
                ctrl += 1;
 10187d8:	e59d3008 	ldr	r3, [sp, #8]
 10187dc:	e2833001 	add	r3, r3, #1
 10187e0:	e58d3008 	str	r3, [sp, #8]
        if(Check == 1) {
 10187e4:	eaffff26 	b	1018484 <xil_printf+0xf4>
                        outbyte( ((char8)0x07));
 10187e8:	e3a00007 	mov	r0, #7
 10187ec:	ebfffe54 	bl	1018144 <outbyte>
                        break;
 10187f0:	eafffff8 	b	10187d8 <xil_printf+0x448>
                        outbyte( ((char8)0x08));
 10187f4:	e3a00008 	mov	r0, #8
 10187f8:	ebfffe51 	bl	1018144 <outbyte>
                        break;
 10187fc:	eafffff5 	b	10187d8 <xil_printf+0x448>
                        outbyte( ((char8)0x0D));
 1018800:	e3a0000d 	mov	r0, #13
 1018804:	ebfffe4e 	bl	1018144 <outbyte>
                        outbyte( ((char8)0x0A));
 1018808:	e3a0000a 	mov	r0, #10
 101880c:	ebfffe4c 	bl	1018144 <outbyte>
                        break;
 1018810:	eafffff0 	b	10187d8 <xil_printf+0x448>
                        outbyte( *ctrl);
 1018814:	ebfffe4a 	bl	1018144 <outbyte>
                        break;
 1018818:	eaffffee 	b	10187d8 <xil_printf+0x448>

0101881c <Xil_ExceptionNullHandler>:
*
*****************************************************************************/
static void Xil_ExceptionNullHandler(void *Data)
{
	(void) Data;
DieLoop: goto DieLoop;
 101881c:	eafffffe 	b	101881c <Xil_ExceptionNullHandler>

01018820 <Xil_DataAbortHandler>:
*
* @note		None.
*
****************************************************************************/

void Xil_DataAbortHandler(void *CallBackRef){
 1018820:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

        xdbg_printf(XDBG_DEBUG_ERROR, "Data abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_DATA_FAULT_STATUS);
 1018824:	ee151f10 	mrc	15, 0, r1, cr5, cr0, {0}
	        mfcp(XREG_CP15_DATA_FAULT_STATUS,FaultStatus);
	    #else
	        { volatile register u32 Reg __asm(XREG_CP15_DATA_FAULT_STATUS);
	        FaultStatus = Reg; }
	    #endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Data abort with Data Fault Status Register  %lx\n",FaultStatus);
 1018828:	e30a01f0 	movw	r0, #41456	; 0xa1f0
 101882c:	e3400106 	movt	r0, #262	; 0x106
 1018830:	fa000e50 	blx	101c178 <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Data abort %lx\n",DataAbortAddr);
 1018834:	e3053f4c 	movw	r3, #24396	; 0x5f4c
 1018838:	e30a0224 	movw	r0, #41508	; 0xa224
 101883c:	e3403146 	movt	r3, #326	; 0x146
 1018840:	e3400106 	movt	r0, #262	; 0x106
 1018844:	e5931000 	ldr	r1, [r3]
 1018848:	fa000e4a 	blx	101c178 <printf>
#endif
	while(1) {
		;
 101884c:	eafffffe 	b	101884c <Xil_DataAbortHandler+0x2c>

01018850 <Xil_PrefetchAbortHandler>:
* @return	None.
*
* @note		None.
*
****************************************************************************/
void Xil_PrefetchAbortHandler(void *CallBackRef){
 1018850:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

    xdbg_printf(XDBG_DEBUG_ERROR, "Prefetch abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_INST_FAULT_STATUS);
 1018854:	ee151f30 	mrc	15, 0, r1, cr5, cr0, {1}
			mfcp(XREG_CP15_INST_FAULT_STATUS,FaultStatus);
	    #else
			{ volatile register u32 Reg __asm(XREG_CP15_INST_FAULT_STATUS);
			FaultStatus = Reg; }
		#endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Prefetch abort with Instruction Fault Status Register  %lx\n",FaultStatus);
 1018858:	e30a0254 	movw	r0, #41556	; 0xa254
 101885c:	e3400106 	movt	r0, #262	; 0x106
 1018860:	fa000e44 	blx	101c178 <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Prefetch abort %lx\n",PrefetchAbortAddr);
 1018864:	e3053f48 	movw	r3, #24392	; 0x5f48
 1018868:	e30a0290 	movw	r0, #41616	; 0xa290
 101886c:	e3403146 	movt	r3, #326	; 0x146
 1018870:	e3400106 	movt	r0, #262	; 0x106
 1018874:	e5931000 	ldr	r1, [r3]
 1018878:	fa000e3e 	blx	101c178 <printf>
#endif
	while(1) {
		;
 101887c:	eafffffe 	b	101887c <Xil_PrefetchAbortHandler+0x2c>

01018880 <Xil_UndefinedExceptionHandler>:
* @note		None.
*
****************************************************************************/
void Xil_UndefinedExceptionHandler(void *CallBackRef){
	(void) CallBackRef;
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 1018880:	e3053f44 	movw	r3, #24388	; 0x5f44
 1018884:	e30a02c4 	movw	r0, #41668	; 0xa2c4
 1018888:	e3403146 	movt	r3, #326	; 0x146
void Xil_UndefinedExceptionHandler(void *CallBackRef){
 101888c:	e92d4010 	push	{r4, lr}
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 1018890:	e3400106 	movt	r0, #262	; 0x106
 1018894:	e5931000 	ldr	r1, [r3]
 1018898:	fa000e36 	blx	101c178 <printf>
	while(1) {
		;
 101889c:	eafffffe 	b	101889c <Xil_UndefinedExceptionHandler+0x1c>

010188a0 <Xil_ExceptionInit>:
}
 10188a0:	e12fff1e 	bx	lr

010188a4 <Xil_ExceptionRegisterHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 10188a4:	e30a3568 	movw	r3, #42344	; 0xa568
 10188a8:	e3403106 	movt	r3, #262	; 0x106
	XExc_VectorTable[Exception_id].Data = Data;
 10188ac:	e083c180 	add	ip, r3, r0, lsl #3
	XExc_VectorTable[Exception_id].Handler = Handler;
 10188b0:	e7831180 	str	r1, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 10188b4:	e58c2004 	str	r2, [ip, #4]
}
 10188b8:	e12fff1e 	bx	lr

010188bc <Xil_GetExceptionRegisterHandler>:
	*Handler = XExc_VectorTable[Exception_id].Handler;
 10188bc:	e30a3568 	movw	r3, #42344	; 0xa568
 10188c0:	e3403106 	movt	r3, #262	; 0x106
 10188c4:	e793c180 	ldr	ip, [r3, r0, lsl #3]
	*Data = XExc_VectorTable[Exception_id].Data;
 10188c8:	e0833180 	add	r3, r3, r0, lsl #3
	*Handler = XExc_VectorTable[Exception_id].Handler;
 10188cc:	e581c000 	str	ip, [r1]
	*Data = XExc_VectorTable[Exception_id].Data;
 10188d0:	e5933004 	ldr	r3, [r3, #4]
 10188d4:	e5823000 	str	r3, [r2]
}
 10188d8:	e12fff1e 	bx	lr

010188dc <Xil_ExceptionRemoveHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 10188dc:	e30a3568 	movw	r3, #42344	; 0xa568
 10188e0:	e308281c 	movw	r2, #34844	; 0x881c
 10188e4:	e3403106 	movt	r3, #262	; 0x106
 10188e8:	e3402101 	movt	r2, #257	; 0x101
	XExc_VectorTable[Exception_id].Data = Data;
 10188ec:	e0831180 	add	r1, r3, r0, lsl #3
 10188f0:	e3a0c000 	mov	ip, #0
	XExc_VectorTable[Exception_id].Handler = Handler;
 10188f4:	e7832180 	str	r2, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 10188f8:	e581c004 	str	ip, [r1, #4]
}
 10188fc:	e12fff1e 	bx	lr

01018900 <StubStatusHandler>:
static void StubStatusHandler(const void *CallBackRef, u32 StatusEvent)
{
	(const void) CallBackRef;
	(void) StatusEvent;

	Xil_AssertVoidAlways();
 1018900:	e30a02f0 	movw	r0, #41712	; 0xa2f0
{
 1018904:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1018908:	e3001229 	movw	r1, #553	; 0x229
 101890c:	e3400106 	movt	r0, #262	; 0x106
 1018910:	ebfffb8a 	bl	1017740 <Xil_Assert>
 1018914:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018918:	e3a02001 	mov	r2, #1
 101891c:	e3403146 	movt	r3, #326	; 0x146
 1018920:	e5832000 	str	r2, [r3]
}
 1018924:	e8bd8010 	pop	{r4, pc}

01018928 <XTtcPs_CfgInitialize>:
{
 1018928:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 101892c:	e2504000 	subs	r4, r0, #0
 1018930:	0a000031 	beq	10189fc <XTtcPs_CfgInitialize+0xd4>
 1018934:	e3055f40 	movw	r5, #24384	; 0x5f40
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1018938:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 101893c:	e3405146 	movt	r5, #326	; 0x146
 1018940:	e3a03000 	mov	r3, #0
 1018944:	e1a06001 	mov	r6, r1
 1018948:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 101894c:	0a000034 	beq	1018a24 <XTtcPs_CfgInitialize+0xfc>
	InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 1018950:	e5910008 	ldr	r0, [r1, #8]
	InstancePtr->StatusHandler = StubStatusHandler;
 1018954:	e3081900 	movw	r1, #35072	; 0x8900
	InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1018958:	e1d6c0b0 	ldrh	ip, [r6]
	InstancePtr->StatusHandler = StubStatusHandler;
 101895c:	e3401101 	movt	r1, #257	; 0x101
	InstancePtr->Config.BaseAddress = EffectiveAddr;
 1018960:	e5842004 	str	r2, [r4, #4]
	InstancePtr->Config.InputClockHz = ConfigPtr->InputClockHz;
 1018964:	e5840008 	str	r0, [r4, #8]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1018968:	e592000c 	ldr	r0, [r2, #12]
	InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 101896c:	e1c4c0b0 	strh	ip, [r4]
	InstancePtr->StatusHandler = StubStatusHandler;
 1018970:	e5841010 	str	r1, [r4, #16]
	if(IsStartResult == (u32)TRUE) {
 1018974:	e3100001 	tst	r0, #1
 1018978:	0a00001d 	beq	10189f4 <XTtcPs_CfgInitialize+0xcc>
 101897c:	e592100c 	ldr	r1, [r2, #12]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1018980:	e3a05021 	mov	r5, #33	; 0x21
		Status = XST_SUCCESS;
 1018984:	e1a00003 	mov	r0, r3
 1018988:	e3a0e01f 	mov	lr, #31
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 101898c:	e301c111 	movw	ip, #4369	; 0x1111
		XTtcPs_Stop(InstancePtr);
 1018990:	e3811001 	orr	r1, r1, #1
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1018994:	e341c111 	movt	ip, #4369	; 0x1111
 1018998:	e582100c 	str	r1, [r2, #12]
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 101899c:	e5942004 	ldr	r2, [r4, #4]
 10189a0:	e582500c 	str	r5, [r2, #12]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 10189a4:	e5942004 	ldr	r2, [r4, #4]
	*LocalAddr = Value;
 10189a8:	e5823000 	str	r3, [r2]
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 10189ac:	e5942004 	ldr	r2, [r4, #4]
 10189b0:	e5823024 	str	r3, [r2, #36]	; 0x24
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 10189b4:	e5942004 	ldr	r2, [r4, #4]
 10189b8:	e5823030 	str	r3, [r2, #48]	; 0x30
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 10189bc:	e5942004 	ldr	r2, [r4, #4]
 10189c0:	e582303c 	str	r3, [r2, #60]	; 0x3c
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 10189c4:	e5942004 	ldr	r2, [r4, #4]
 10189c8:	e5823048 	str	r3, [r2, #72]	; 0x48
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 10189cc:	e5942004 	ldr	r2, [r4, #4]
 10189d0:	e5823060 	str	r3, [r2, #96]	; 0x60
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 10189d4:	e5943004 	ldr	r3, [r4, #4]
 10189d8:	e583e054 	str	lr, [r3, #84]	; 0x54
		XTtcPs_ResetCounterValue(InstancePtr);
 10189dc:	e5942004 	ldr	r2, [r4, #4]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 10189e0:	e584c00c 	str	ip, [r4, #12]
	return *(volatile u32 *) Addr;
 10189e4:	e592300c 	ldr	r3, [r2, #12]
		XTtcPs_ResetCounterValue(InstancePtr);
 10189e8:	e3833010 	orr	r3, r3, #16
	*LocalAddr = Value;
 10189ec:	e582300c 	str	r3, [r2, #12]
		Status = XST_SUCCESS;
 10189f0:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = XST_DEVICE_IS_STARTED;
 10189f4:	e3a00005 	mov	r0, #5
}
 10189f8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10189fc:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018a00:	e3a0107e 	mov	r1, #126	; 0x7e
 1018a04:	e3400106 	movt	r0, #262	; 0x106
 1018a08:	ebfffb4c 	bl	1017740 <Xil_Assert>
 1018a0c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018a10:	e3a02001 	mov	r2, #1
 1018a14:	e3403146 	movt	r3, #326	; 0x146
 1018a18:	e1a00004 	mov	r0, r4
 1018a1c:	e5832000 	str	r2, [r3]
 1018a20:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1018a24:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018a28:	e3a0107f 	mov	r1, #127	; 0x7f
 1018a2c:	e3400106 	movt	r0, #262	; 0x106
 1018a30:	ebfffb42 	bl	1017740 <Xil_Assert>
 1018a34:	e3a03001 	mov	r3, #1
 1018a38:	e1a00006 	mov	r0, r6
 1018a3c:	e5853000 	str	r3, [r5]
 1018a40:	e8bd8070 	pop	{r4, r5, r6, pc}

01018a44 <XTtcPs_SetMatchValue>:
	Xil_AssertVoid(InstancePtr != NULL);
 1018a44:	e3500000 	cmp	r0, #0
{
 1018a48:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1018a4c:	0a00001e 	beq	1018acc <XTtcPs_SetMatchValue+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018a50:	e590c00c 	ldr	ip, [r0, #12]
 1018a54:	e3013111 	movw	r3, #4369	; 0x1111
 1018a58:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1018a5c:	e3054f40 	movw	r4, #24384	; 0x5f40
 1018a60:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018a64:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1018a68:	e3a03000 	mov	r3, #0
 1018a6c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018a70:	1a000007 	bne	1018a94 <XTtcPs_SetMatchValue+0x50>
	Xil_AssertVoid(MatchIndex < (u8)XTTCPS_NUM_MATCH_REG);
 1018a74:	e3510002 	cmp	r1, #2
 1018a78:	8a00000c 	bhi	1018ab0 <XTtcPs_SetMatchValue+0x6c>
	XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 1018a7c:	e3a0300c 	mov	r3, #12
 1018a80:	e3a0c030 	mov	ip, #48	; 0x30
 1018a84:	e5900004 	ldr	r0, [r0, #4]
 1018a88:	e101c183 	smlabb	r1, r3, r1, ip
 1018a8c:	e7812000 	str	r2, [r1, r0]
 1018a90:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018a94:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018a98:	e3a010d9 	mov	r1, #217	; 0xd9
 1018a9c:	e3400106 	movt	r0, #262	; 0x106
 1018aa0:	ebfffb26 	bl	1017740 <Xil_Assert>
 1018aa4:	e3a03001 	mov	r3, #1
 1018aa8:	e5843000 	str	r3, [r4]
 1018aac:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(MatchIndex < (u8)XTTCPS_NUM_MATCH_REG);
 1018ab0:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018ab4:	e3a010da 	mov	r1, #218	; 0xda
 1018ab8:	e3400106 	movt	r0, #262	; 0x106
 1018abc:	ebfffb1f 	bl	1017740 <Xil_Assert>
 1018ac0:	e3a03001 	mov	r3, #1
 1018ac4:	e5843000 	str	r3, [r4]
}
 1018ac8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018acc:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018ad0:	e3a010d8 	mov	r1, #216	; 0xd8
 1018ad4:	e3400106 	movt	r0, #262	; 0x106
 1018ad8:	ebfffb18 	bl	1017740 <Xil_Assert>
 1018adc:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018ae0:	e3a02001 	mov	r2, #1
 1018ae4:	e3403146 	movt	r3, #326	; 0x146
 1018ae8:	e5832000 	str	r2, [r3]
 1018aec:	e8bd8010 	pop	{r4, pc}

01018af0 <XTtcPs_GetMatchValue>:
{
 1018af0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018af4:	e2506000 	subs	r6, r0, #0
 1018af8:	0a000021 	beq	1018b84 <XTtcPs_GetMatchValue+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018afc:	e596200c 	ldr	r2, [r6, #12]
 1018b00:	e3013111 	movw	r3, #4369	; 0x1111
 1018b04:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018b08:	e3055f40 	movw	r5, #24384	; 0x5f40
 1018b0c:	e3405146 	movt	r5, #326	; 0x146
 1018b10:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018b14:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018b18:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018b1c:	1a000008 	bne	1018b44 <XTtcPs_GetMatchValue+0x54>
	Xil_AssertNonvoid(MatchIndex < XTTCPS_NUM_MATCH_REG);
 1018b20:	e3510002 	cmp	r1, #2
 1018b24:	8a00000e 	bhi	1018b64 <XTtcPs_GetMatchValue+0x74>
	MatchReg = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 1018b28:	e3a0300c 	mov	r3, #12
 1018b2c:	e3a00030 	mov	r0, #48	; 0x30
 1018b30:	e1010183 	smlabb	r1, r3, r1, r0
 1018b34:	e5962004 	ldr	r2, [r6, #4]
	return *(volatile u32 *) Addr;
 1018b38:	e7914002 	ldr	r4, [r1, r2]
	return (XMatchRegValue) MatchReg;
 1018b3c:	e6ff0074 	uxth	r0, r4
 1018b40:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018b44:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018b48:	e3a010fb 	mov	r1, #251	; 0xfb
 1018b4c:	e3400106 	movt	r0, #262	; 0x106
 1018b50:	ebfffafa 	bl	1017740 <Xil_Assert>
 1018b54:	e3a03001 	mov	r3, #1
 1018b58:	e1a00004 	mov	r0, r4
 1018b5c:	e5853000 	str	r3, [r5]
 1018b60:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(MatchIndex < XTTCPS_NUM_MATCH_REG);
 1018b64:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018b68:	e3a010fc 	mov	r1, #252	; 0xfc
 1018b6c:	e3400106 	movt	r0, #262	; 0x106
 1018b70:	ebfffaf2 	bl	1017740 <Xil_Assert>
 1018b74:	e3a03001 	mov	r3, #1
 1018b78:	e1a00004 	mov	r0, r4
 1018b7c:	e5853000 	str	r3, [r5]
}
 1018b80:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018b84:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018b88:	e3a010fa 	mov	r1, #250	; 0xfa
 1018b8c:	e3400106 	movt	r0, #262	; 0x106
 1018b90:	ebfffaea 	bl	1017740 <Xil_Assert>
 1018b94:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018b98:	e3a02001 	mov	r2, #1
 1018b9c:	e3403146 	movt	r3, #326	; 0x146
 1018ba0:	e1a00006 	mov	r0, r6
 1018ba4:	e5832000 	str	r2, [r3]
 1018ba8:	e8bd8070 	pop	{r4, r5, r6, pc}

01018bac <XTtcPs_SetPrescaler>:
	Xil_AssertVoid(InstancePtr != NULL);
 1018bac:	e3500000 	cmp	r0, #0
{
 1018bb0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1018bb4:	0a00001f 	beq	1018c38 <XTtcPs_SetPrescaler+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018bb8:	e590c00c 	ldr	ip, [r0, #12]
 1018bbc:	e3012111 	movw	r2, #4369	; 0x1111
 1018bc0:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1018bc4:	e3054f40 	movw	r4, #24384	; 0x5f40
 1018bc8:	e3404146 	movt	r4, #326	; 0x146
 1018bcc:	e3a03000 	mov	r3, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018bd0:	e15c0002 	cmp	ip, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1018bd4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018bd8:	1a000008 	bne	1018c00 <XTtcPs_SetPrescaler+0x54>
	Xil_AssertVoid(PrescalerValue <= XTTCPS_CLK_CNTRL_PS_DISABLE);
 1018bdc:	e3510010 	cmp	r1, #16
 1018be0:	8a00000d 	bhi	1018c1c <XTtcPs_SetPrescaler+0x70>
 1018be4:	e5902004 	ldr	r2, [r0, #4]
 1018be8:	e5923000 	ldr	r3, [r2]
	ClockReg &=
 1018bec:	e3c3301f 	bic	r3, r3, #31
		ClockReg |= (u32)(((u32)PrescalerValue << (u32)XTTCPS_CLK_CNTRL_PS_VAL_SHIFT) &
 1018bf0:	11833081 	orrne	r3, r3, r1, lsl #1
		ClockReg |= (u32)XTTCPS_CLK_CNTRL_PS_EN_MASK;
 1018bf4:	13833001 	orrne	r3, r3, #1
	*LocalAddr = Value;
 1018bf8:	e5823000 	str	r3, [r2]
}
 1018bfc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018c00:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018c04:	e3001121 	movw	r1, #289	; 0x121
 1018c08:	e3400106 	movt	r0, #262	; 0x106
 1018c0c:	ebfffacb 	bl	1017740 <Xil_Assert>
 1018c10:	e3a03001 	mov	r3, #1
 1018c14:	e5843000 	str	r3, [r4]
 1018c18:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(PrescalerValue <= XTTCPS_CLK_CNTRL_PS_DISABLE);
 1018c1c:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018c20:	e3001122 	movw	r1, #290	; 0x122
 1018c24:	e3400106 	movt	r0, #262	; 0x106
 1018c28:	ebfffac4 	bl	1017740 <Xil_Assert>
 1018c2c:	e3a03001 	mov	r3, #1
 1018c30:	e5843000 	str	r3, [r4]
 1018c34:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018c38:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018c3c:	e3a01e12 	mov	r1, #288	; 0x120
 1018c40:	e3400106 	movt	r0, #262	; 0x106
 1018c44:	ebfffabd 	bl	1017740 <Xil_Assert>
 1018c48:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018c4c:	e3a02001 	mov	r2, #1
 1018c50:	e3403146 	movt	r3, #326	; 0x146
 1018c54:	e5832000 	str	r2, [r3]
 1018c58:	e8bd8010 	pop	{r4, pc}

01018c5c <XTtcPs_GetPrescaler>:
{
 1018c5c:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018c60:	e2506000 	subs	r6, r0, #0
 1018c64:	0a000018 	beq	1018ccc <XTtcPs_GetPrescaler+0x70>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018c68:	e596200c 	ldr	r2, [r6, #12]
 1018c6c:	e3013111 	movw	r3, #4369	; 0x1111
 1018c70:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018c74:	e3055f40 	movw	r5, #24384	; 0x5f40
 1018c78:	e3405146 	movt	r5, #326	; 0x146
 1018c7c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018c80:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018c84:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018c88:	1a000007 	bne	1018cac <XTtcPs_GetPrescaler+0x50>
	return *(volatile u32 *) Addr;
 1018c8c:	e5963004 	ldr	r3, [r6, #4]
 1018c90:	e5930000 	ldr	r0, [r3]
	if (0 == (ClockReg & XTTCPS_CLK_CNTRL_PS_EN_MASK)) {
 1018c94:	e3100001 	tst	r0, #1
 1018c98:	0a000001 	beq	1018ca4 <XTtcPs_GetPrescaler+0x48>
		Status = (u8)((ClockReg & (u32)XTTCPS_CLK_CNTRL_PS_VAL_MASK) >>
 1018c9c:	e7e300d0 	ubfx	r0, r0, #1, #4
 1018ca0:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (u8)XTTCPS_CLK_CNTRL_PS_DISABLE;
 1018ca4:	e3a00010 	mov	r0, #16
}
 1018ca8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018cac:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018cb0:	e3001161 	movw	r1, #353	; 0x161
 1018cb4:	e3400106 	movt	r0, #262	; 0x106
 1018cb8:	ebfffaa0 	bl	1017740 <Xil_Assert>
 1018cbc:	e3a03001 	mov	r3, #1
 1018cc0:	e1a00004 	mov	r0, r4
 1018cc4:	e5853000 	str	r3, [r5]
 1018cc8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018ccc:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018cd0:	e3a01e16 	mov	r1, #352	; 0x160
 1018cd4:	e3400106 	movt	r0, #262	; 0x106
 1018cd8:	ebfffa98 	bl	1017740 <Xil_Assert>
 1018cdc:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018ce0:	e3a02001 	mov	r2, #1
 1018ce4:	e3403146 	movt	r3, #326	; 0x146
 1018ce8:	e1a00006 	mov	r0, r6
 1018cec:	e5832000 	str	r2, [r3]
 1018cf0:	e8bd8070 	pop	{r4, r5, r6, pc}

01018cf4 <XTtcPs_CalcIntervalFromFreq>:
	Xil_AssertVoid(InstancePtr != NULL);
 1018cf4:	e3500000 	cmp	r0, #0
{
 1018cf8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1018cfc:	0a00002b 	beq	1018db0 <XTtcPs_CalcIntervalFromFreq+0xbc>
 1018d00:	e3056f40 	movw	r6, #24384	; 0x5f40
        Xil_AssertVoid(Freq > 0U);
 1018d04:	e3510000 	cmp	r1, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1018d08:	e3406146 	movt	r6, #326	; 0x146
 1018d0c:	e3a04000 	mov	r4, #0
 1018d10:	e1a05001 	mov	r5, r1
 1018d14:	e5864000 	str	r4, [r6]
        Xil_AssertVoid(Freq > 0U);
 1018d18:	0a000016 	beq	1018d78 <XTtcPs_CalcIntervalFromFreq+0x84>
	InputClock = InstancePtr->Config.InputClockHz;
 1018d1c:	e5907008 	ldr	r7, [r0, #8]
 1018d20:	e1a08002 	mov	r8, r2
 1018d24:	e1a09003 	mov	r9, r3
	TempValue = InputClock/ Freq;
 1018d28:	e1a00007 	mov	r0, r7
 1018d2c:	fa000275 	blx	1019708 <__udivsi3>
	if (TempValue < 4U) {
 1018d30:	e3500003 	cmp	r0, #3
 1018d34:	9a00000b 	bls	1018d68 <XTtcPs_CalcIntervalFromFreq+0x74>
	if (((UINTPTR)XTTCPS_MAX_INTERVAL_COUNT) > TempValue) {
 1018d38:	e30f6ffe 	movw	r6, #65534	; 0xfffe
 1018d3c:	e1500006 	cmp	r0, r6
 1018d40:	9a000013 	bls	1018d94 <XTtcPs_CalcIntervalFromFreq+0xa0>
 1018d44:	e6efa074 	uxtb	sl, r4
		TempValue =	InputClock/ (Freq * (1U << (TmpPrescaler + 1U)));
 1018d48:	e2844001 	add	r4, r4, #1
 1018d4c:	e1a01415 	lsl	r1, r5, r4
 1018d50:	e1a00007 	mov	r0, r7
 1018d54:	fa00026b 	blx	1019708 <__udivsi3>
		if (((UINTPTR)XTTCPS_MAX_INTERVAL_COUNT) > TempValue) {
 1018d58:	e1500006 	cmp	r0, r6
 1018d5c:	9a000010 	bls	1018da4 <XTtcPs_CalcIntervalFromFreq+0xb0>
	for (TmpPrescaler = 0U; TmpPrescaler < XTTCPS_CLK_CNTRL_PS_DISABLE;
 1018d60:	e3540010 	cmp	r4, #16
 1018d64:	1afffff6 	bne	1018d44 <XTtcPs_CalcIntervalFromFreq+0x50>
		*Interval = XTTCPS_MAX_INTERVAL_COUNT;
 1018d68:	e3e03000 	mvn	r3, #0
 1018d6c:	e1c830b0 	strh	r3, [r8]
		*Prescaler = 0xFFU;
 1018d70:	e5c93000 	strb	r3, [r9]
		return;
 1018d74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        Xil_AssertVoid(Freq > 0U);
 1018d78:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018d7c:	e300119a 	movw	r1, #410	; 0x19a
 1018d80:	e3400106 	movt	r0, #262	; 0x106
 1018d84:	ebfffa6d 	bl	1017740 <Xil_Assert>
 1018d88:	e3a03001 	mov	r3, #1
 1018d8c:	e5863000 	str	r3, [r6]
 1018d90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*Prescaler = XTTCPS_CLK_CNTRL_PS_DISABLE;
 1018d94:	e3a03010 	mov	r3, #16
		*Interval = (XInterval)TempValue;
 1018d98:	e1c800b0 	strh	r0, [r8]
		*Prescaler = XTTCPS_CLK_CNTRL_PS_DISABLE;
 1018d9c:	e5c93000 	strb	r3, [r9]
		return;
 1018da0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
			*Interval = (XInterval)TempValue;
 1018da4:	e1c800b0 	strh	r0, [r8]
			*Prescaler = TmpPrescaler;
 1018da8:	e5c9a000 	strb	sl, [r9]
}
 1018dac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018db0:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018db4:	e3001199 	movw	r1, #409	; 0x199
 1018db8:	e3400106 	movt	r0, #262	; 0x106
 1018dbc:	ebfffa5f 	bl	1017740 <Xil_Assert>
 1018dc0:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018dc4:	e3a02001 	mov	r2, #1
 1018dc8:	e3403146 	movt	r3, #326	; 0x146
 1018dcc:	e5832000 	str	r2, [r3]
 1018dd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01018dd4 <XTtcPs_InterruptHandler>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018dd4:	e3500000 	cmp	r0, #0
{
 1018dd8:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018ddc:	0a00000b 	beq	1018e10 <XTtcPs_InterruptHandler+0x3c>
	XTtcPsStatusReg = XTtcPs_GetInterruptStatus(InstancePtr);
 1018de0:	e5902004 	ldr	r2, [r0, #4]
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018de4:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018de8:	e3403146 	movt	r3, #326	; 0x146
 1018dec:	e3a01000 	mov	r1, #0
 1018df0:	e5831000 	str	r1, [r3]
	InstancePtr->StatusHandler(InstancePtr->StatusRef,
 1018df4:	e5903010 	ldr	r3, [r0, #16]
 1018df8:	e5921054 	ldr	r1, [r2, #84]	; 0x54
 1018dfc:	e5900014 	ldr	r0, [r0, #20]
 1018e00:	e5922054 	ldr	r2, [r2, #84]	; 0x54
 1018e04:	e12fff33 	blx	r3
}
 1018e08:	e3a00000 	mov	r0, #0
 1018e0c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018e10:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018e14:	e30011e7 	movw	r1, #487	; 0x1e7
 1018e18:	e3400106 	movt	r0, #262	; 0x106
 1018e1c:	ebfffa47 	bl	1017740 <Xil_Assert>
 1018e20:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018e24:	e3a02001 	mov	r2, #1
 1018e28:	e3403146 	movt	r3, #326	; 0x146
 1018e2c:	e5832000 	str	r2, [r3]
 1018e30:	eafffff4 	b	1018e08 <XTtcPs_InterruptHandler+0x34>

01018e34 <XTtcPs_SetStatusHandler>:
	Xil_AssertVoid(InstancePtr != NULL);
 1018e34:	e3500000 	cmp	r0, #0
{
 1018e38:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1018e3c:	0a000014 	beq	1018e94 <XTtcPs_SetStatusHandler+0x60>
 1018e40:	e3054f40 	movw	r4, #24384	; 0x5f40
	Xil_AssertVoid(FuncPointer != NULL);
 1018e44:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1018e48:	e3404146 	movt	r4, #326	; 0x146
 1018e4c:	e3a03000 	mov	r3, #0
 1018e50:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 1018e54:	0a000017 	beq	1018eb8 <XTtcPs_SetStatusHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018e58:	e590c00c 	ldr	ip, [r0, #12]
 1018e5c:	e3013111 	movw	r3, #4369	; 0x1111
 1018e60:	e3413111 	movt	r3, #4369	; 0x1111
 1018e64:	e15c0003 	cmp	ip, r3
 1018e68:	1a000002 	bne	1018e78 <XTtcPs_SetStatusHandler+0x44>
	InstancePtr->StatusHandler = FuncPointer;
 1018e6c:	e5802010 	str	r2, [r0, #16]
	InstancePtr->StatusRef = CallBackRef;
 1018e70:	e5801014 	str	r1, [r0, #20]
 1018e74:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018e78:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018e7c:	e300120f 	movw	r1, #527	; 0x20f
 1018e80:	e3400106 	movt	r0, #262	; 0x106
 1018e84:	ebfffa2d 	bl	1017740 <Xil_Assert>
 1018e88:	e3a03001 	mov	r3, #1
 1018e8c:	e5843000 	str	r3, [r4]
}
 1018e90:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1018e94:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018e98:	e300120d 	movw	r1, #525	; 0x20d
 1018e9c:	e3400106 	movt	r0, #262	; 0x106
 1018ea0:	ebfffa26 	bl	1017740 <Xil_Assert>
 1018ea4:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018ea8:	e3a02001 	mov	r2, #1
 1018eac:	e3403146 	movt	r3, #326	; 0x146
 1018eb0:	e5832000 	str	r2, [r3]
 1018eb4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 1018eb8:	e30a02f0 	movw	r0, #41712	; 0xa2f0
 1018ebc:	e300120e 	movw	r1, #526	; 0x20e
 1018ec0:	e3400106 	movt	r0, #262	; 0x106
 1018ec4:	ebfffa1d 	bl	1017740 <Xil_Assert>
 1018ec8:	e3a03001 	mov	r3, #1
 1018ecc:	e5843000 	str	r3, [r4]
 1018ed0:	e8bd8010 	pop	{r4, pc}

01018ed4 <XTtcPs_LookupConfig>:
XTtcPs_Config *XTtcPs_LookupConfig(u16 DeviceId)
{
	XTtcPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XTTCPS_NUM_INSTANCES; Index++) {
 1018ed4:	e30ac5a0 	movw	ip, #42400	; 0xa5a0
 1018ed8:	e3a03000 	mov	r3, #0
 1018edc:	e340c106 	movt	ip, #262	; 0x106
 1018ee0:	e1a0200c 	mov	r2, ip
		if (XTtcPs_ConfigTable[Index].DeviceId == DeviceId) {
 1018ee4:	e1d210b0 	ldrh	r1, [r2]
 1018ee8:	e282200c 	add	r2, r2, #12
 1018eec:	e1510000 	cmp	r1, r0
 1018ef0:	0a000004 	beq	1018f08 <XTtcPs_LookupConfig+0x34>
	for (Index = 0U; Index < (u32)XPAR_XTTCPS_NUM_INSTANCES; Index++) {
 1018ef4:	e2833001 	add	r3, r3, #1
 1018ef8:	e3530006 	cmp	r3, #6
 1018efc:	1afffff8 	bne	1018ee4 <XTtcPs_LookupConfig+0x10>
	XTtcPs_Config *CfgPtr = NULL;
 1018f00:	e3a00000 	mov	r0, #0
			break;
		}
	}

	return (XTtcPs_Config *)CfgPtr;
}
 1018f04:	e12fff1e 	bx	lr
			CfgPtr = &XTtcPs_ConfigTable[Index];
 1018f08:	e0833083 	add	r3, r3, r3, lsl #1
 1018f0c:	e08c0103 	add	r0, ip, r3, lsl #2
			break;
 1018f10:	e12fff1e 	bx	lr

01018f14 <XTtcPs_SetOptions>:
	u32 CountReg;
	u32 ClockReg;
	u32 Index;
	s32 Status = XST_SUCCESS;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1018f14:	e3500000 	cmp	r0, #0
{
 1018f18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018f1c:	0a00002f 	beq	1018fe0 <XTtcPs_SetOptions+0xcc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018f20:	e590c00c 	ldr	ip, [r0, #12]
 1018f24:	e3013111 	movw	r3, #4369	; 0x1111
 1018f28:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018f2c:	e3054f40 	movw	r4, #24384	; 0x5f40
 1018f30:	e3404146 	movt	r4, #326	; 0x146
 1018f34:	e3a02000 	mov	r2, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018f38:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018f3c:	e5842000 	str	r2, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018f40:	1a00001e 	bne	1018fc0 <XTtcPs_SetOptions+0xac>

	ClockReg = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 1018f44:	e5907004 	ldr	r7, [r0, #4]
 1018f48:	e3a0c020 	mov	ip, #32
 1018f4c:	e59f30b0 	ldr	r3, [pc, #176]	; 1019004 <XTtcPs_SetOptions+0xf0>
 1018f50:	e3a0e001 	mov	lr, #1
 1018f54:	e5975000 	ldr	r5, [r7]
 1018f58:	e2836054 	add	r6, r3, #84	; 0x54
 1018f5c:	e597400c 	ldr	r4, [r7, #12]

	/*
	 * Loop through the options table, turning the option on or off
	 * depending on whether the bit is set in the incoming options flag.
	 */
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 1018f60:	ea000008 	b	1018f88 <XTtcPs_SetOptions+0x74>
		if ((Options & TmrCtrOptionsTable[Index].Option) != (u32)0) {
			if(TmrCtrOptionsTable[Index].Register == XTTCPS_CLK_CNTRL_OFFSET) {
 1018f64:	e3520000 	cmp	r2, #0
 1018f68:	e283300c 	add	r3, r3, #12
				ClockReg |= TmrCtrOptionsTable[Index].Mask;
 1018f6c:	0185500c 	orreq	r5, r5, ip
			} else {
				CountReg |= TmrCtrOptionsTable[Index].Mask;
 1018f70:	1184400c 	orrne	r4, r4, ip
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 1018f74:	e1530006 	cmp	r3, r6
 1018f78:	0a00000b 	beq	1018fac <XTtcPs_SetOptions+0x98>
 1018f7c:	e513e00c 	ldr	lr, [r3, #-12]
 1018f80:	e513c008 	ldr	ip, [r3, #-8]
 1018f84:	e5132004 	ldr	r2, [r3, #-4]
		if ((Options & TmrCtrOptionsTable[Index].Option) != (u32)0) {
 1018f88:	e111000e 	tst	r1, lr
 1018f8c:	e1e0e00c 	mvn	lr, ip
 1018f90:	1afffff3 	bne	1018f64 <XTtcPs_SetOptions+0x50>
			}
		} else {
			if(TmrCtrOptionsTable[Index].Register == XTTCPS_CLK_CNTRL_OFFSET) {
 1018f94:	e3520000 	cmp	r2, #0
 1018f98:	e283300c 	add	r3, r3, #12
				ClockReg &= ~TmrCtrOptionsTable[Index].Mask;
 1018f9c:	0005500e 	andeq	r5, r5, lr
			} else {
				CountReg &= ~TmrCtrOptionsTable[Index].Mask;
 1018fa0:	1004400e 	andne	r4, r4, lr
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 1018fa4:	e1530006 	cmp	r3, r6
 1018fa8:	1afffff3 	bne	1018f7c <XTtcPs_SetOptions+0x68>
	*LocalAddr = Value;
 1018fac:	e5875000 	str	r5, [r7]
	 * device.
	 */
	if (Status != (s32)XST_FAILURE ) {
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
				  XTTCPS_CLK_CNTRL_OFFSET, ClockReg);
		XTtcPs_WriteReg(InstancePtr->Config.BaseAddress,
 1018fb0:	e5903004 	ldr	r3, [r0, #4]
 1018fb4:	e583400c 	str	r4, [r3, #12]
				  XTTCPS_CNT_CNTRL_OFFSET, CountReg);
	}

	return Status;
}
 1018fb8:	e3a00000 	mov	r0, #0
 1018fbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018fc0:	e30a02fc 	movw	r0, #41724	; 0xa2fc
 1018fc4:	e3a0107d 	mov	r1, #125	; 0x7d
 1018fc8:	e3400106 	movt	r0, #262	; 0x106
 1018fcc:	ebfff9db 	bl	1017740 <Xil_Assert>
 1018fd0:	e3a03001 	mov	r3, #1
}
 1018fd4:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1018fd8:	e5843000 	str	r3, [r4]
}
 1018fdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1018fe0:	e30a02fc 	movw	r0, #41724	; 0xa2fc
 1018fe4:	e3a0107c 	mov	r1, #124	; 0x7c
 1018fe8:	e3400106 	movt	r0, #262	; 0x106
 1018fec:	ebfff9d3 	bl	1017740 <Xil_Assert>
 1018ff0:	e3053f40 	movw	r3, #24384	; 0x5f40
 1018ff4:	e3a02001 	mov	r2, #1
 1018ff8:	e3403146 	movt	r3, #326	; 0x146
 1018ffc:	e5832000 	str	r2, [r3]
 1019000:	eaffffec 	b	1018fb8 <XTtcPs_SetOptions+0xa4>
 1019004:	01066154 	.word	0x01066154

01019008 <XTtcPs_GetOptions>:
*
* @note		None.
*
******************************************************************************/
u32 XTtcPs_GetOptions(XTtcPs *InstancePtr)
{
 1019008:	e92d4070 	push	{r4, r5, r6, lr}
	u32 OptionsFlag = 0U;
	u32 Register;
	u32 Index;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101900c:	e2505000 	subs	r5, r0, #0
 1019010:	0a000020 	beq	1019098 <XTtcPs_GetOptions+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019014:	e595200c 	ldr	r2, [r5, #12]
 1019018:	e3013111 	movw	r3, #4369	; 0x1111
 101901c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019020:	e3056f40 	movw	r6, #24384	; 0x5f40
 1019024:	e3406146 	movt	r6, #326	; 0x146
 1019028:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101902c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019030:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019034:	1a00000f 	bne	1019078 <XTtcPs_GetOptions+0x70>
 1019038:	e3063148 	movw	r3, #24904	; 0x6148
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
		/*
		 * Get the control register to determine which options are
		 * currently set.
		 */
		Register = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 101903c:	e595e004 	ldr	lr, [r5, #4]
 1019040:	e3403106 	movt	r3, #262	; 0x106
 1019044:	e1a02004 	mov	r2, r4
 1019048:	e283c054 	add	ip, r3, #84	; 0x54
	u32 OptionsFlag = 0U;
 101904c:	e1a00004 	mov	r0, r4
		Register = XTtcPs_ReadReg(InstancePtr->Config.BaseAddress,
 1019050:	e3a01020 	mov	r1, #32
	return *(volatile u32 *) Addr;
 1019054:	e79e2002 	ldr	r2, [lr, r2]
					      TmrCtrOptionsTable[Index].
					      Register);

		if ((Register & TmrCtrOptionsTable[Index].Mask) != (u32)0) {
 1019058:	e283300c 	add	r3, r3, #12
 101905c:	e1120001 	tst	r2, r1
			OptionsFlag |= TmrCtrOptionsTable[Index].Option;
 1019060:	1513200c 	ldrne	r2, [r3, #-12]
 1019064:	11800002 	orrne	r0, r0, r2
	for (Index = 0U; Index < XTTCPS_NUM_TMRCTR_OPTIONS; Index++) {
 1019068:	e153000c 	cmp	r3, ip
 101906c:	08bd8070 	popeq	{r4, r5, r6, pc}
 1019070:	e9930006 	ldmib	r3, {r1, r2}
 1019074:	eafffff6 	b	1019054 <XTtcPs_GetOptions+0x4c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019078:	e30a02fc 	movw	r0, #41724	; 0xa2fc
 101907c:	e3a010be 	mov	r1, #190	; 0xbe
 1019080:	e3400106 	movt	r0, #262	; 0x106
 1019084:	ebfff9ad 	bl	1017740 <Xil_Assert>
 1019088:	e3a03001 	mov	r3, #1
 101908c:	e1a00004 	mov	r0, r4
 1019090:	e5863000 	str	r3, [r6]
 1019094:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019098:	e30a02fc 	movw	r0, #41724	; 0xa2fc
 101909c:	e3a010bd 	mov	r1, #189	; 0xbd
 10190a0:	e3400106 	movt	r0, #262	; 0x106
 10190a4:	ebfff9a5 	bl	1017740 <Xil_Assert>
 10190a8:	e3053f40 	movw	r3, #24384	; 0x5f40
 10190ac:	e3a02001 	mov	r2, #1
 10190b0:	e3403146 	movt	r3, #326	; 0x146
 10190b4:	e1a00005 	mov	r0, r5
 10190b8:	e5832000 	str	r2, [r3]
 10190bc:	e8bd8070 	pop	{r4, r5, r6, pc}

010190c0 <XUartPs_SendByte>:
*
*****************************************************************************/
void XUartPs_SendByte(u32 BaseAddress, u8 Data)
{
	/* Wait until there is space in TX FIFO */
	while (XUartPs_IsTransmitFull(BaseAddress)) {
 10190c0:	e280202c 	add	r2, r0, #44	; 0x2c
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 10190c4:	e5923000 	ldr	r3, [r2]
 10190c8:	e3130010 	tst	r3, #16
 10190cc:	1afffffc 	bne	10190c4 <XUartPs_SendByte+0x4>
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10190d0:	e5801030 	str	r1, [r0, #48]	; 0x30
		;
	}

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, (u32)Data);
}
 10190d4:	e12fff1e 	bx	lr

010190d8 <XUartPs_RecvByte>:
*****************************************************************************/
u8 XUartPs_RecvByte(u32 BaseAddress)
{
	u32 RecievedByte;
	/* Wait until there is data */
	while (!XUartPs_IsReceiveData(BaseAddress)) {
 10190d8:	e280202c 	add	r2, r0, #44	; 0x2c
	return *(volatile u32 *) Addr;
 10190dc:	e5923000 	ldr	r3, [r2]
 10190e0:	e3130002 	tst	r3, #2
 10190e4:	1afffffc 	bne	10190dc <XUartPs_RecvByte+0x4>
 10190e8:	e5900030 	ldr	r0, [r0, #48]	; 0x30
		;
	}
	RecievedByte = XUartPs_ReadReg(BaseAddress, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (u8)RecievedByte;
}
 10190ec:	e6ef0070 	uxtb	r0, r0
 10190f0:	e12fff1e 	bx	lr

010190f4 <XUartPs_ResetHw>:
*
* @note		None.
*
*****************************************************************************/
void XUartPs_ResetHw(u32 BaseAddress)
{
 10190f4:	e92d4010 	push	{r4, lr}
	*LocalAddr = Value;
 10190f8:	e3031fff 	movw	r1, #16383	; 0x3fff
 10190fc:	e3a0e028 	mov	lr, #40	; 0x28
 1019100:	e3a0c003 	mov	ip, #3
 1019104:	e3a03000 	mov	r3, #0
 1019108:	e3a02020 	mov	r2, #32
 101910c:	e580100c 	str	r1, [r0, #12]
 1019110:	e300428b 	movw	r4, #651	; 0x28b
 1019114:	e580e000 	str	lr, [r0]
 1019118:	e3a0e00f 	mov	lr, #15
 101911c:	e580c000 	str	ip, [r0]
 1019120:	e3a0cf4a 	mov	ip, #296	; 0x128
 1019124:	e5801014 	str	r1, [r0, #20]
 1019128:	e5803004 	str	r3, [r0, #4]
 101912c:	e5802020 	str	r2, [r0, #32]
 1019130:	e5802044 	str	r2, [r0, #68]	; 0x44
 1019134:	e580301c 	str	r3, [r0, #28]
 1019138:	e5804018 	str	r4, [r0, #24]
 101913c:	e580e034 	str	lr, [r0, #52]	; 0x34
 1019140:	e580c000 	str	ip, [r0]
	 */
	XUartPs_WriteReg(BaseAddress, XUARTPS_CR_OFFSET,
				((u32)XUARTPS_CR_RX_DIS | (u32)XUARTPS_CR_TX_DIS |
						(u32)XUARTPS_CR_STOPBRK));

}
 1019144:	e8bd8010 	pop	{r4, pc}

01019148 <XSpiPs_SetOptions>:
* @note
* This function is not thread-safe.
*
******************************************************************************/
s32 XSpiPs_SetOptions(const XSpiPs *InstancePtr, u32 Options)
{
 1019148:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ConfigReg;
	u32 Index;
	u32 CurrentConfigReg;
	s32 Status;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101914c:	e2505000 	subs	r5, r0, #0
 1019150:	0a000033 	beq	1019224 <XSpiPs_SetOptions+0xdc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019154:	e595200c 	ldr	r2, [r5, #12]
 1019158:	e3013111 	movw	r3, #4369	; 0x1111
 101915c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019160:	e3056f40 	movw	r6, #24384	; 0x5f40
 1019164:	e3406146 	movt	r6, #326	; 0x146
 1019168:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101916c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019170:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019174:	1a00001e 	bne	10191f4 <XSpiPs_SetOptions+0xac>

	/*
	 * Do not allow the slave select to change while a transfer is in
	 * progress. Not thread-safe.
	 */
	if (InstancePtr->IsBusy == TRUE) {
 1019178:	e5953020 	ldr	r3, [r5, #32]
 101917c:	e3530001 	cmp	r3, #1
 1019180:	0a000025 	beq	101921c <XSpiPs_SetOptions+0xd4>
		Status = (s32)XST_DEVICE_BUSY;
	} else {

		ConfigReg = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 1019184:	e5956004 	ldr	r6, [r5, #4]
 1019188:	e306319c 	movw	r3, #24988	; 0x619c
 101918c:	e3403106 	movt	r3, #262	; 0x106
 1019190:	e3a0c001 	mov	ip, #1
 1019194:	e2834028 	add	r4, r3, #40	; 0x28
 1019198:	e1a0e00c 	mov	lr, ip
 101919c:	e5960000 	ldr	r0, [r6]
 10191a0:	e1a02000 	mov	r2, r0
 10191a4:	ea000002 	b	10191b4 <XSpiPs_SetOptions+0x6c>
 10191a8:	e593e008 	ldr	lr, [r3, #8]
 10191ac:	e2833008 	add	r3, r3, #8
 10191b0:	e593c004 	ldr	ip, [r3, #4]
		/*
		 * Loop through the options table, turning the option on or off
		 * depending on whether the bit is set in the incoming options flag.
		 */
		for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
			if ((Options & OptionsTable[Index].Option) != (u32)0U) {
 10191b4:	e11e0001 	tst	lr, r1
				/* Turn it on */
				ConfigReg |= OptionsTable[Index].Mask;
 10191b8:	1182200c 	orrne	r2, r2, ip
			}
			else {
				/* Turn it off */
				ConfigReg &= ~(OptionsTable[Index].Mask);
 10191bc:	01c2200c 	biceq	r2, r2, ip
		for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
 10191c0:	e1540003 	cmp	r4, r3
 10191c4:	1afffff7 	bne	10191a8 <XSpiPs_SetOptions+0x60>

		/*
		 * If CPOL-CPHA bits are toggled from previous state,
		 * disable before writing the configuration register and then enable.
		 */
		if( ((CurrentConfigReg & XSPIPS_CR_CPOL_MASK) !=
 10191c8:	e0200002 	eor	r0, r0, r2
 10191cc:	e2100006 	ands	r0, r0, #6
 10191d0:	0a00000f 	beq	1019214 <XSpiPs_SetOptions+0xcc>
	*LocalAddr = Value;
 10191d4:	e3a00000 	mov	r0, #0
 10191d8:	e3a01001 	mov	r1, #1
 10191dc:	e5860014 	str	r0, [r6, #20]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 10191e0:	e5953004 	ldr	r3, [r5, #4]
	*LocalAddr = Value;
 10191e4:	e5832000 	str	r2, [r3]
		 */
		if( ((CurrentConfigReg & XSPIPS_CR_CPOL_MASK) !=
			(ConfigReg & XSPIPS_CR_CPOL_MASK)) ||
			((CurrentConfigReg & XSPIPS_CR_CPHA_MASK) !=
			(ConfigReg & XSPIPS_CR_CPHA_MASK)) ) {
				XSpiPs_Enable(InstancePtr);
 10191e8:	e5953004 	ldr	r3, [r5, #4]
 10191ec:	e5831014 	str	r1, [r3, #20]
 10191f0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10191f4:	e30a0310 	movw	r0, #41744	; 0xa310
 10191f8:	e3a0107d 	mov	r1, #125	; 0x7d
 10191fc:	e3400106 	movt	r0, #262	; 0x106
 1019200:	ebfff94e 	bl	1017740 <Xil_Assert>
 1019204:	e3a03001 	mov	r3, #1
 1019208:	e1a00004 	mov	r0, r4
 101920c:	e5863000 	str	r3, [r6]
 1019210:	e8bd8070 	pop	{r4, r5, r6, pc}
 1019214:	e5862000 	str	r2, [r6]
			}

		Status = (s32)XST_SUCCESS;
	}
	return Status;
}
 1019218:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_BUSY;
 101921c:	e3a00015 	mov	r0, #21
 1019220:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019224:	e30a0310 	movw	r0, #41744	; 0xa310
 1019228:	e3a0107c 	mov	r1, #124	; 0x7c
 101922c:	e3400106 	movt	r0, #262	; 0x106
 1019230:	ebfff942 	bl	1017740 <Xil_Assert>
 1019234:	e3053f40 	movw	r3, #24384	; 0x5f40
 1019238:	e3a02001 	mov	r2, #1
 101923c:	e3403146 	movt	r3, #326	; 0x146
 1019240:	e1a00005 	mov	r0, r5
 1019244:	e5832000 	str	r2, [r3]
 1019248:	e8bd8070 	pop	{r4, r5, r6, pc}

0101924c <XSpiPs_GetOptions>:
*
* @note		None.
*
******************************************************************************/
u32 XSpiPs_GetOptions(const XSpiPs *InstancePtr)
{
 101924c:	e92d4070 	push	{r4, r5, r6, lr}
	u32 OptionsFlag = 0U;
	u32 ConfigReg;
	u32 Index;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1019250:	e2506000 	subs	r6, r0, #0
 1019254:	0a00001e 	beq	10192d4 <XSpiPs_GetOptions+0x88>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019258:	e596200c 	ldr	r2, [r6, #12]
 101925c:	e3013111 	movw	r3, #4369	; 0x1111
 1019260:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019264:	e3055f40 	movw	r5, #24384	; 0x5f40
 1019268:	e3405146 	movt	r5, #326	; 0x146
 101926c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019270:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019274:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019278:	1a00000d 	bne	10192b4 <XSpiPs_GetOptions+0x68>
	return *(volatile u32 *) Addr;
 101927c:	e5961004 	ldr	r1, [r6, #4]
	u32 OptionsFlag = 0U;
 1019280:	e1a00004 	mov	r0, r4
 1019284:	e59f3070 	ldr	r3, [pc, #112]	; 10192fc <XSpiPs_GetOptions+0xb0>
 1019288:	e3a02001 	mov	r2, #1
 101928c:	e591c000 	ldr	ip, [r1]
				 XSPIPS_CR_OFFSET);

	/*
	 * Loop through the options table to grab options
	 */
	for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
 1019290:	e2831030 	add	r1, r3, #48	; 0x30
		if ((ConfigReg & OptionsTable[Index].Mask) != FALSE) {
 1019294:	e112000c 	tst	r2, ip
 1019298:	e2833008 	add	r3, r3, #8
			OptionsFlag |= OptionsTable[Index].Option;
 101929c:	15132014 	ldrne	r2, [r3, #-20]	; 0xffffffec
 10192a0:	11800002 	orrne	r0, r0, r2
	for (Index = 0U; Index < XSPIPS_NUM_OPTIONS; Index++) {
 10192a4:	e1530001 	cmp	r3, r1
 10192a8:	08bd8070 	popeq	{r4, r5, r6, pc}
 10192ac:	e5132008 	ldr	r2, [r3, #-8]
 10192b0:	eafffff7 	b	1019294 <XSpiPs_GetOptions+0x48>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10192b4:	e30a0310 	movw	r0, #41744	; 0xa310
 10192b8:	e3a010d5 	mov	r1, #213	; 0xd5
 10192bc:	e3400106 	movt	r0, #262	; 0x106
 10192c0:	ebfff91e 	bl	1017740 <Xil_Assert>
 10192c4:	e3a03001 	mov	r3, #1
 10192c8:	e1a00004 	mov	r0, r4
 10192cc:	e5853000 	str	r3, [r5]
 10192d0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10192d4:	e30a0310 	movw	r0, #41744	; 0xa310
 10192d8:	e3a010d4 	mov	r1, #212	; 0xd4
 10192dc:	e3400106 	movt	r0, #262	; 0x106
 10192e0:	ebfff916 	bl	1017740 <Xil_Assert>
 10192e4:	e3053f40 	movw	r3, #24384	; 0x5f40
 10192e8:	e3a02001 	mov	r2, #1
 10192ec:	e3403146 	movt	r3, #326	; 0x146
 10192f0:	e1a00006 	mov	r0, r6
 10192f4:	e5832000 	str	r2, [r3]
 10192f8:	e8bd8070 	pop	{r4, r5, r6, pc}
 10192fc:	010661a8 	.word	0x010661a8

01019300 <XSpiPs_SetClkPrescaler>:
* @note
* This function is not thread-safe.
*
******************************************************************************/
s32 XSpiPs_SetClkPrescaler(const XSpiPs *InstancePtr, u8 Prescaler)
{
 1019300:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ConfigReg;
	s32 Status;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1019304:	e2506000 	subs	r6, r0, #0
 1019308:	0a000022 	beq	1019398 <XSpiPs_SetClkPrescaler+0x98>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101930c:	e596200c 	ldr	r2, [r6, #12]
 1019310:	e3013111 	movw	r3, #4369	; 0x1111
 1019314:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019318:	e3055f40 	movw	r5, #24384	; 0x5f40
 101931c:	e3405146 	movt	r5, #326	; 0x146
 1019320:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019324:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019328:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 101932c:	1a00000c 	bne	1019364 <XSpiPs_SetClkPrescaler+0x64>
	Xil_AssertNonvoid((Prescaler > 0U) && (Prescaler <= XSPIPS_CR_PRESC_MAXIMUM));
 1019330:	e2413001 	sub	r3, r1, #1
 1019334:	e3530006 	cmp	r3, #6
 1019338:	8a000011 	bhi	1019384 <XSpiPs_SetClkPrescaler+0x84>

	/*
	 * Do not allow the prescaler to be changed while a transfer is in
	 * progress. Not thread-safe.
	 */
	if (InstancePtr->IsBusy == TRUE) {
 101933c:	e5963020 	ldr	r3, [r6, #32]
 1019340:	e3530001 	cmp	r3, #1
 1019344:	0a000011 	beq	1019390 <XSpiPs_SetClkPrescaler+0x90>
 1019348:	e5962004 	ldr	r2, [r6, #4]

		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
				XSPIPS_CR_OFFSET,
				ConfigReg);

		Status = (s32)XST_SUCCESS;
 101934c:	e1a00004 	mov	r0, r4
 1019350:	e5923000 	ldr	r3, [r2]
		ConfigReg &= (u32)(~XSPIPS_CR_PRESC_MASK);
 1019354:	e3c33038 	bic	r3, r3, #56	; 0x38
		ConfigReg |= (u32) ((u32)Prescaler & (u32)XSPIPS_CR_PRESC_MAXIMUM) <<
 1019358:	e1833181 	orr	r3, r3, r1, lsl #3
	*LocalAddr = Value;
 101935c:	e5823000 	str	r3, [r2]
		Status = (s32)XST_SUCCESS;
 1019360:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019364:	e30a0310 	movw	r0, #41744	; 0xa310
 1019368:	e3001105 	movw	r1, #261	; 0x105
	Xil_AssertNonvoid((Prescaler > 0U) && (Prescaler <= XSPIPS_CR_PRESC_MAXIMUM));
 101936c:	e3400106 	movt	r0, #262	; 0x106
 1019370:	ebfff8f2 	bl	1017740 <Xil_Assert>
 1019374:	e3a03001 	mov	r3, #1
 1019378:	e1a00004 	mov	r0, r4
 101937c:	e5853000 	str	r3, [r5]
 1019380:	e8bd8070 	pop	{r4, r5, r6, pc}
 1019384:	e30a0310 	movw	r0, #41744	; 0xa310
 1019388:	e3001106 	movw	r1, #262	; 0x106
 101938c:	eafffff6 	b	101936c <XSpiPs_SetClkPrescaler+0x6c>
		Status = (s32)XST_DEVICE_BUSY;
 1019390:	e3a00015 	mov	r0, #21
	}
	return Status;
}
 1019394:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019398:	e30a0310 	movw	r0, #41744	; 0xa310
 101939c:	e3a01f41 	mov	r1, #260	; 0x104
 10193a0:	e3400106 	movt	r0, #262	; 0x106
 10193a4:	ebfff8e5 	bl	1017740 <Xil_Assert>
 10193a8:	e3053f40 	movw	r3, #24384	; 0x5f40
 10193ac:	e3a02001 	mov	r2, #1
 10193b0:	e3403146 	movt	r3, #326	; 0x146
 10193b4:	e1a00006 	mov	r0, r6
 10193b8:	e5832000 	str	r2, [r3]
 10193bc:	e8bd8070 	pop	{r4, r5, r6, pc}

010193c0 <XSpiPs_GetClkPrescaler>:
* @note		None.
*
*
******************************************************************************/
u8 XSpiPs_GetClkPrescaler(const XSpiPs *InstancePtr)
{
 10193c0:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ConfigReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10193c4:	e2506000 	subs	r6, r0, #0
 10193c8:	0a000014 	beq	1019420 <XSpiPs_GetClkPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10193cc:	e596200c 	ldr	r2, [r6, #12]
 10193d0:	e3013111 	movw	r3, #4369	; 0x1111
 10193d4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10193d8:	e3055f40 	movw	r5, #24384	; 0x5f40
 10193dc:	e3405146 	movt	r5, #326	; 0x146
 10193e0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10193e4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10193e8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10193ec:	1a000003 	bne	1019400 <XSpiPs_GetClkPrescaler+0x40>
	return *(volatile u32 *) Addr;
 10193f0:	e5963004 	ldr	r3, [r6, #4]
 10193f4:	e5930000 	ldr	r0, [r3]
	ConfigReg = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
			XSPIPS_CR_OFFSET);

	ConfigReg &= XSPIPS_CR_PRESC_MASK;

	return (u8)(ConfigReg >> XSPIPS_CR_PRESC_SHIFT);
 10193f8:	e7e201d0 	ubfx	r0, r0, #3, #3
 10193fc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019400:	e30a0310 	movw	r0, #41744	; 0xa310
 1019404:	e3001137 	movw	r1, #311	; 0x137
 1019408:	e3400106 	movt	r0, #262	; 0x106
 101940c:	ebfff8cb 	bl	1017740 <Xil_Assert>
 1019410:	e3a03001 	mov	r3, #1
 1019414:	e1a00004 	mov	r0, r4
 1019418:	e5853000 	str	r3, [r5]

}
 101941c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019420:	e30a0310 	movw	r0, #41744	; 0xa310
 1019424:	e3001136 	movw	r1, #310	; 0x136
 1019428:	e3400106 	movt	r0, #262	; 0x106
 101942c:	ebfff8c3 	bl	1017740 <Xil_Assert>
 1019430:	e3053f40 	movw	r3, #24384	; 0x5f40
 1019434:	e3a02001 	mov	r2, #1
 1019438:	e3403146 	movt	r3, #326	; 0x146
 101943c:	e1a00006 	mov	r0, r6
 1019440:	e5832000 	str	r2, [r3]
 1019444:	e8bd8070 	pop	{r4, r5, r6, pc}

01019448 <XSpiPs_SetDelays>:
* @note		None.
*
******************************************************************************/
s32 XSpiPs_SetDelays(const XSpiPs *InstancePtr, u8 DelayNss, u8 DelayBtwn,
			 u8 DelayAfter, u8 DelayInit)
{
 1019448:	e92d4070 	push	{r4, r5, r6, lr}
	u32 DelayRegister;
	s32 Status;

	Xil_AssertNonvoid(InstancePtr != NULL);
 101944c:	e2506000 	subs	r6, r0, #0
{
 1019450:	e5dd0010 	ldrb	r0, [sp, #16]
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019454:	0a00001c 	beq	10194cc <XSpiPs_SetDelays+0x84>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019458:	e596e00c 	ldr	lr, [r6, #12]
 101945c:	e301c111 	movw	ip, #4369	; 0x1111
 1019460:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019464:	e3055f40 	movw	r5, #24384	; 0x5f40
 1019468:	e3405146 	movt	r5, #326	; 0x146
 101946c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019470:	e15e000c 	cmp	lr, ip
	Xil_AssertNonvoid(InstancePtr != NULL);
 1019474:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019478:	1a000009 	bne	10194a4 <XSpiPs_SetDelays+0x5c>

	/*
	 * Do not allow the delays to change while a transfer is in
	 * progress. Not thread-safe.
	 */
	if (InstancePtr->IsBusy == TRUE) {
 101947c:	e596c020 	ldr	ip, [r6, #32]
 1019480:	e35c0001 	cmp	ip, #1
 1019484:	0a00000e 	beq	10194c4 <XSpiPs_SetDelays+0x7c>

		/* Shift, Mask and OR the values to build the register settings */
		DelayRegister = (u32) DelayNss << XSPIPS_DR_NSS_SHIFT;
		DelayRegister |= (u32) DelayBtwn << XSPIPS_DR_BTWN_SHIFT;
		DelayRegister |= (u32) DelayAfter << XSPIPS_DR_AFTER_SHIFT;
		DelayRegister |= (u32) DelayInit;
 1019488:	e1803403 	orr	r3, r0, r3, lsl #8

		XSpiPs_WriteReg(InstancePtr->Config.BaseAddress,
 101948c:	e596c004 	ldr	ip, [r6, #4]
				XSPIPS_DR_OFFSET, DelayRegister);

		Status = (s32)XST_SUCCESS;
 1019490:	e1a00004 	mov	r0, r4
		DelayRegister |= (u32) DelayInit;
 1019494:	e1833802 	orr	r3, r3, r2, lsl #16
 1019498:	e1833c01 	orr	r3, r3, r1, lsl #24
	*LocalAddr = Value;
 101949c:	e58c3018 	str	r3, [ip, #24]
		Status = (s32)XST_SUCCESS;
 10194a0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10194a4:	e30a0310 	movw	r0, #41744	; 0xa310
 10194a8:	e3a01f5a 	mov	r1, #360	; 0x168
 10194ac:	e3400106 	movt	r0, #262	; 0x106
 10194b0:	ebfff8a2 	bl	1017740 <Xil_Assert>
 10194b4:	e3a03001 	mov	r3, #1
 10194b8:	e1a00004 	mov	r0, r4
 10194bc:	e5853000 	str	r3, [r5]
 10194c0:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_BUSY;
 10194c4:	e3a00015 	mov	r0, #21
	}
	return Status;
}
 10194c8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10194cc:	e30a0310 	movw	r0, #41744	; 0xa310
 10194d0:	e3001167 	movw	r1, #359	; 0x167
 10194d4:	e3400106 	movt	r0, #262	; 0x106
 10194d8:	ebfff898 	bl	1017740 <Xil_Assert>
 10194dc:	e3053f40 	movw	r3, #24384	; 0x5f40
 10194e0:	e3a02001 	mov	r2, #1
 10194e4:	e3403146 	movt	r3, #326	; 0x146
 10194e8:	e1a00006 	mov	r0, r6
 10194ec:	e5832000 	str	r2, [r3]
 10194f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010194f4 <XSpiPs_GetDelays>:
void XSpiPs_GetDelays(const XSpiPs *InstancePtr,u8 *DelayNss, u8 *DelayBtwn,
			u8 *DelayAfter, u8 *DelayInit)
{
	u32 DelayRegister;

	Xil_AssertVoid(InstancePtr != NULL);
 10194f4:	e3500000 	cmp	r0, #0
{
 10194f8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10194fc:	0a00001a 	beq	101956c <XSpiPs_GetDelays+0x78>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019500:	e590e00c 	ldr	lr, [r0, #12]
 1019504:	e301c111 	movw	ip, #4369	; 0x1111
 1019508:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 101950c:	e3054f40 	movw	r4, #24384	; 0x5f40
 1019510:	e3404146 	movt	r4, #326	; 0x146
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019514:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1019518:	e3a0c000 	mov	ip, #0
 101951c:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019520:	1a00000a 	bne	1019550 <XSpiPs_GetDelays+0x5c>

	DelayRegister = XSpiPs_ReadReg(InstancePtr->Config.BaseAddress,
 1019524:	e5900004 	ldr	r0, [r0, #4]
					XSPIPS_DR_OFFSET);

	*DelayInit = (u8)(DelayRegister & XSPIPS_DR_INIT_MASK);
 1019528:	e59dc008 	ldr	ip, [sp, #8]
	return *(volatile u32 *) Addr;
 101952c:	e5900018 	ldr	r0, [r0, #24]
 1019530:	e5cc0000 	strb	r0, [ip]

	*DelayAfter = (u8)((DelayRegister & XSPIPS_DR_AFTER_MASK) >>
 1019534:	e1a0e420 	lsr	lr, r0, #8
				 XSPIPS_DR_AFTER_SHIFT);

	*DelayBtwn = (u8)((DelayRegister & XSPIPS_DR_BTWN_MASK) >>
 1019538:	e1a0c820 	lsr	ip, r0, #16
				XSPIPS_DR_BTWN_SHIFT);

	*DelayNss = (u8)((DelayRegister & XSPIPS_DR_NSS_MASK) >>
 101953c:	e1a00c20 	lsr	r0, r0, #24
	*DelayAfter = (u8)((DelayRegister & XSPIPS_DR_AFTER_MASK) >>
 1019540:	e5c3e000 	strb	lr, [r3]
	*DelayBtwn = (u8)((DelayRegister & XSPIPS_DR_BTWN_MASK) >>
 1019544:	e5c2c000 	strb	ip, [r2]
	*DelayNss = (u8)((DelayRegister & XSPIPS_DR_NSS_MASK) >>
 1019548:	e5c10000 	strb	r0, [r1]
 101954c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1019550:	e30a0310 	movw	r0, #41744	; 0xa310
 1019554:	e3a01f67 	mov	r1, #412	; 0x19c
 1019558:	e3400106 	movt	r0, #262	; 0x106
 101955c:	ebfff877 	bl	1017740 <Xil_Assert>
 1019560:	e3a03001 	mov	r3, #1
 1019564:	e5843000 	str	r3, [r4]
				XSPIPS_DR_NSS_SHIFT);

}
 1019568:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 101956c:	e30a0310 	movw	r0, #41744	; 0xa310
 1019570:	e300119b 	movw	r1, #411	; 0x19b
 1019574:	e3400106 	movt	r0, #262	; 0x106
 1019578:	ebfff870 	bl	1017740 <Xil_Assert>
 101957c:	e3053f40 	movw	r3, #24384	; 0x5f40
 1019580:	e3a02001 	mov	r2, #1
 1019584:	e3403146 	movt	r3, #326	; 0x146
 1019588:	e5832000 	str	r2, [r3]
 101958c:	e8bd8010 	pop	{r4, pc}

01019590 <FIQInterrupt>:
* @note		None.
*
******************************************************************************/
void FIQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_FIQ_INT].Handler(XExc_VectorTable[
 1019590:	e30a3568 	movw	r3, #42344	; 0xa568
 1019594:	e3403106 	movt	r3, #262	; 0x106
 1019598:	e5932030 	ldr	r2, [r3, #48]	; 0x30
 101959c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
 10195a0:	e12fff12 	bx	r2

010195a4 <IRQInterrupt>:
* @note		None.
*
******************************************************************************/
void IRQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_IRQ_INT].Handler(XExc_VectorTable[
 10195a4:	e30a3568 	movw	r3, #42344	; 0xa568
 10195a8:	e3403106 	movt	r3, #262	; 0x106
 10195ac:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 10195b0:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
 10195b4:	e12fff12 	bx	r2

010195b8 <UndefinedException>:
* @note		None.
*
******************************************************************************/
void UndefinedException(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_UNDEFINED_INT].Handler(XExc_VectorTable[
 10195b8:	e30a3568 	movw	r3, #42344	; 0xa568
 10195bc:	e3403106 	movt	r3, #262	; 0x106
 10195c0:	e5932008 	ldr	r2, [r3, #8]
 10195c4:	e593000c 	ldr	r0, [r3, #12]
 10195c8:	e12fff12 	bx	r2

010195cc <SWInterrupt>:
* @note		None.
*
******************************************************************************/
void SWInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_SWI_INT].Handler(XExc_VectorTable[
 10195cc:	e30a3568 	movw	r3, #42344	; 0xa568
 10195d0:	e3403106 	movt	r3, #262	; 0x106
 10195d4:	e5932010 	ldr	r2, [r3, #16]
 10195d8:	e5930014 	ldr	r0, [r3, #20]
 10195dc:	e12fff12 	bx	r2

010195e0 <DataAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void DataAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_DATA_ABORT_INT].Handler(
 10195e0:	e30a3568 	movw	r3, #42344	; 0xa568
 10195e4:	e3403106 	movt	r3, #262	; 0x106
 10195e8:	e5932020 	ldr	r2, [r3, #32]
 10195ec:	e5930024 	ldr	r0, [r3, #36]	; 0x24
 10195f0:	e12fff12 	bx	r2

010195f4 <PrefetchAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void PrefetchAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_PREFETCH_ABORT_INT].Handler(
 10195f4:	e30a3568 	movw	r3, #42344	; 0xa568
 10195f8:	e3403106 	movt	r3, #262	; 0x106
 10195fc:	e5932018 	ldr	r2, [r3, #24]
 1019600:	e593001c 	ldr	r0, [r3, #28]
 1019604:	e12fff12 	bx	r2
 1019608:	01070010 	.word	0x01070010
 101960c:	01070010 	.word	0x01070010
 1019610:	01070020 	.word	0x01070020
 1019614:	01465f54 	.word	0x01465f54
 1019618:	00010000 	.word	0x00010000

0101961c <_start>:
	.long	__stack


	.globl	_start
_start:
	bl      __cpu_init		/* Initialize the CPU first (BSP provides this) */
 101961c:	eb000017 	bl	1019680 <__cpu_init>

	mov	r0, #0
 1019620:	e3a00000 	mov	r0, #0

	/* clear sbss */
	ldr 	r1,.Lsbss_start		/* calculate beginning of the SBSS */
 1019624:	e51f1024 	ldr	r1, [pc, #-36]	; 1019608 <PrefetchAbortInterrupt+0x14>
	ldr	r2,.Lsbss_end		/* calculate end of the SBSS */
 1019628:	e51f2024 	ldr	r2, [pc, #-36]	; 101960c <PrefetchAbortInterrupt+0x18>

.Lloop_sbss:
	cmp	r1,r2
 101962c:	e1510002 	cmp	r1, r2
	bge	.Lenclsbss		/* If no SBSS, no clearing required */
 1019630:	aa000001 	bge	101963c <_start+0x20>
	str	r0, [r1], #4
 1019634:	e4810004 	str	r0, [r1], #4
	b	.Lloop_sbss
 1019638:	eafffffb 	b	101962c <_start+0x10>

.Lenclsbss:
	/* clear bss */
	ldr	r1,.Lbss_start		/* calculate beginning of the BSS */
 101963c:	e51f1034 	ldr	r1, [pc, #-52]	; 1019610 <PrefetchAbortInterrupt+0x1c>
	ldr	r2,.Lbss_end		/* calculate end of the BSS */
 1019640:	e51f2034 	ldr	r2, [pc, #-52]	; 1019614 <PrefetchAbortInterrupt+0x20>

.Lloop_bss:
	cmp	r1,r2
 1019644:	e1510002 	cmp	r1, r2
	bge	.Lenclbss		/* If no BSS, no clearing required */
 1019648:	aa000001 	bge	1019654 <_start+0x38>
	str	r0, [r1], #4
 101964c:	e4810004 	str	r0, [r1], #4
	b	.Lloop_bss
 1019650:	eafffffb 	b	1019644 <_start+0x28>

.Lenclbss:

	/* set stack pointer */
	ldr	r13,.Lstack		/* stack address */
 1019654:	e51fd044 	ldr	sp, [pc, #-68]	; 1019618 <PrefetchAbortInterrupt+0x24>

    /* Reset and start Global Timer */
	mov	r0, #0x0
 1019658:	e3a00000 	mov	r0, #0
	mov	r1, #0x0
 101965c:	e3a01000 	mov	r1, #0
	#if defined SLEEP_TIMER_BASEADDR
	bl XTime_StartTTCTimer
	#endif

#if USE_AMP != 1
	bl XTime_SetTime
 1019660:	eb000015 	bl	10196bc <XTime_SetTime>
	/* Setup profiling stuff */
	bl	_profile_init
#endif /* PROFILING */

   /* run global constructors */
   bl __libc_init_array
 1019664:	fa000385 	blx	101a480 <__libc_init_array>

	/* make sure argc and argv are valid */
	mov	r0, #0
 1019668:	e3a00000 	mov	r0, #0
	mov	r1, #0
 101966c:	e3a01000 	mov	r1, #0

	/* Let her rip */
	bl	main
 1019670:	eb0031d8 	bl	1025dd8 <main>

   /* Cleanup global constructors */
   bl __libc_fini_array
 1019674:	fa000375 	blx	101a450 <__libc_fini_array>
	/* Cleanup profiling stuff */
	bl	_profile_clean
#endif /* PROFILING */

        /* All done */
	bl	exit
 1019678:	fa00036c 	blx	101a430 <exit>

.Lexit:	/* should never get here */
	b .Lexit
 101967c:	eafffffe 	b	101967c <_start+0x60>

01019680 <__cpu_init>:
	.global __cpu_init
	.align 2
__cpu_init:

/* Clear cp15 regs with unknown reset values */
	mov	r0, #0x0
 1019680:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c5, c0, 0	/* DFSR */
 1019684:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
	mcr	p15, 0, r0, c5, c0, 1	/* IFSR */
 1019688:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
	mcr	p15, 0, r0, c6, c0, 0	/* DFAR */
 101968c:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
	mcr	p15, 0, r0, c6, c0, 2	/* IFAR */
 1019690:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
	mcr	p15, 0, r0, c9, c13, 2	/* PMXEVCNTR */
 1019694:	ee090f5d 	mcr	15, 0, r0, cr9, cr13, {2}
	mcr	p15, 0, r0, c13, c0, 2	/* TPIDRURW */
 1019698:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
	mcr	p15, 0, r0, c13, c0, 3	/* TPIDRURO */
 101969c:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}

/* Reset and start Cycle Counter */
	mov	r2, #0x80000000		/* clear overflow */
 10196a0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 3
 10196a4:	ee092f7c 	mcr	15, 0, r2, cr9, cr12, {3}
	mov	r2, #0xd		/* D, C, E */
 10196a8:	e3a0200d 	mov	r2, #13
	mcr	p15, 0, r2, c9, c12, 0
 10196ac:	ee092f1c 	mcr	15, 0, r2, cr9, cr12, {0}
	mov	r2, #0x80000000		/* enable cycle counter */
 10196b0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 1
 10196b4:	ee092f3c 	mcr	15, 0, r2, cr9, cr12, {1}

	bx	lr
 10196b8:	e12fff1e 	bx	lr

010196bc <XTime_SetTime>:
 10196bc:	e3a03000 	mov	r3, #0
 10196c0:	e3a0c000 	mov	ip, #0
 10196c4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10196c8:	e3a02001 	mov	r2, #1
 10196cc:	e583c208 	str	ip, [r3, #520]	; 0x208
 10196d0:	e5830200 	str	r0, [r3, #512]	; 0x200
 10196d4:	e5831204 	str	r1, [r3, #516]	; 0x204
 10196d8:	e5832208 	str	r2, [r3, #520]	; 0x208
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_COUNTER_UPPER_OFFSET,
		(u32)((u32)(Xtime_Global>>32U)));

	/* Enable Global Timer */
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_CONTROL_OFFSET, (u32)0x1);
}
 10196dc:	e12fff1e 	bx	lr

010196e0 <XTime_GetTime>:
	return *(volatile u32 *) Addr;
 10196e0:	e3a03000 	mov	r3, #0
 10196e4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10196e8:	e5931204 	ldr	r1, [r3, #516]	; 0x204
 10196ec:	e593c200 	ldr	ip, [r3, #512]	; 0x200
 10196f0:	e5932204 	ldr	r2, [r3, #516]	; 0x204
	/* Reading Global Timer Counter Register */
	do
	{
		high = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET);
		low = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);
	} while(Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET) != high);
 10196f4:	e1520001 	cmp	r2, r1
 10196f8:	1afffffa 	bne	10196e8 <XTime_GetTime+0x8>

	*Xtime_Global = (((XTime) high) << 32U) | (XTime) low;
 10196fc:	e580c000 	str	ip, [r0]
 1019700:	e5802004 	str	r2, [r0, #4]
}
 1019704:	e12fff1e 	bx	lr

01019708 <__udivsi3>:
 1019708:	1e4a      	subs	r2, r1, #1
 101970a:	bf08      	it	eq
 101970c:	4770      	bxeq	lr
 101970e:	f0c0 8124 	bcc.w	101995a <__udivsi3+0x252>
 1019712:	4288      	cmp	r0, r1
 1019714:	f240 8116 	bls.w	1019944 <__udivsi3+0x23c>
 1019718:	4211      	tst	r1, r2
 101971a:	f000 8117 	beq.w	101994c <__udivsi3+0x244>
 101971e:	fab0 f380 	clz	r3, r0
 1019722:	fab1 f281 	clz	r2, r1
 1019726:	eba2 0303 	sub.w	r3, r2, r3
 101972a:	f1c3 031f 	rsb	r3, r3, #31
 101972e:	a204      	add	r2, pc, #16	; (adr r2, 1019740 <__udivsi3+0x38>)
 1019730:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 1019734:	f04f 0200 	mov.w	r2, #0
 1019738:	469f      	mov	pc, r3
 101973a:	bf00      	nop
 101973c:	f3af 8000 	nop.w
 1019740:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 1019744:	bf00      	nop
 1019746:	eb42 0202 	adc.w	r2, r2, r2
 101974a:	bf28      	it	cs
 101974c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 1019750:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 1019754:	bf00      	nop
 1019756:	eb42 0202 	adc.w	r2, r2, r2
 101975a:	bf28      	it	cs
 101975c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 1019760:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 1019764:	bf00      	nop
 1019766:	eb42 0202 	adc.w	r2, r2, r2
 101976a:	bf28      	it	cs
 101976c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 1019770:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 1019774:	bf00      	nop
 1019776:	eb42 0202 	adc.w	r2, r2, r2
 101977a:	bf28      	it	cs
 101977c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 1019780:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 1019784:	bf00      	nop
 1019786:	eb42 0202 	adc.w	r2, r2, r2
 101978a:	bf28      	it	cs
 101978c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 1019790:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 1019794:	bf00      	nop
 1019796:	eb42 0202 	adc.w	r2, r2, r2
 101979a:	bf28      	it	cs
 101979c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 10197a0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 10197a4:	bf00      	nop
 10197a6:	eb42 0202 	adc.w	r2, r2, r2
 10197aa:	bf28      	it	cs
 10197ac:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 10197b0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 10197b4:	bf00      	nop
 10197b6:	eb42 0202 	adc.w	r2, r2, r2
 10197ba:	bf28      	it	cs
 10197bc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 10197c0:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 10197c4:	bf00      	nop
 10197c6:	eb42 0202 	adc.w	r2, r2, r2
 10197ca:	bf28      	it	cs
 10197cc:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 10197d0:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 10197d4:	bf00      	nop
 10197d6:	eb42 0202 	adc.w	r2, r2, r2
 10197da:	bf28      	it	cs
 10197dc:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 10197e0:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 10197e4:	bf00      	nop
 10197e6:	eb42 0202 	adc.w	r2, r2, r2
 10197ea:	bf28      	it	cs
 10197ec:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 10197f0:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 10197f4:	bf00      	nop
 10197f6:	eb42 0202 	adc.w	r2, r2, r2
 10197fa:	bf28      	it	cs
 10197fc:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 1019800:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 1019804:	bf00      	nop
 1019806:	eb42 0202 	adc.w	r2, r2, r2
 101980a:	bf28      	it	cs
 101980c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 1019810:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 1019814:	bf00      	nop
 1019816:	eb42 0202 	adc.w	r2, r2, r2
 101981a:	bf28      	it	cs
 101981c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 1019820:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 1019824:	bf00      	nop
 1019826:	eb42 0202 	adc.w	r2, r2, r2
 101982a:	bf28      	it	cs
 101982c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 1019830:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 1019834:	bf00      	nop
 1019836:	eb42 0202 	adc.w	r2, r2, r2
 101983a:	bf28      	it	cs
 101983c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 1019840:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 1019844:	bf00      	nop
 1019846:	eb42 0202 	adc.w	r2, r2, r2
 101984a:	bf28      	it	cs
 101984c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 1019850:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 1019854:	bf00      	nop
 1019856:	eb42 0202 	adc.w	r2, r2, r2
 101985a:	bf28      	it	cs
 101985c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 1019860:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 1019864:	bf00      	nop
 1019866:	eb42 0202 	adc.w	r2, r2, r2
 101986a:	bf28      	it	cs
 101986c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 1019870:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 1019874:	bf00      	nop
 1019876:	eb42 0202 	adc.w	r2, r2, r2
 101987a:	bf28      	it	cs
 101987c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 1019880:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 1019884:	bf00      	nop
 1019886:	eb42 0202 	adc.w	r2, r2, r2
 101988a:	bf28      	it	cs
 101988c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 1019890:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 1019894:	bf00      	nop
 1019896:	eb42 0202 	adc.w	r2, r2, r2
 101989a:	bf28      	it	cs
 101989c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 10198a0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 10198a4:	bf00      	nop
 10198a6:	eb42 0202 	adc.w	r2, r2, r2
 10198aa:	bf28      	it	cs
 10198ac:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 10198b0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 10198b4:	bf00      	nop
 10198b6:	eb42 0202 	adc.w	r2, r2, r2
 10198ba:	bf28      	it	cs
 10198bc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 10198c0:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 10198c4:	bf00      	nop
 10198c6:	eb42 0202 	adc.w	r2, r2, r2
 10198ca:	bf28      	it	cs
 10198cc:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 10198d0:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 10198d4:	bf00      	nop
 10198d6:	eb42 0202 	adc.w	r2, r2, r2
 10198da:	bf28      	it	cs
 10198dc:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 10198e0:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 10198e4:	bf00      	nop
 10198e6:	eb42 0202 	adc.w	r2, r2, r2
 10198ea:	bf28      	it	cs
 10198ec:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 10198f0:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 10198f4:	bf00      	nop
 10198f6:	eb42 0202 	adc.w	r2, r2, r2
 10198fa:	bf28      	it	cs
 10198fc:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 1019900:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 1019904:	bf00      	nop
 1019906:	eb42 0202 	adc.w	r2, r2, r2
 101990a:	bf28      	it	cs
 101990c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 1019910:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 1019914:	bf00      	nop
 1019916:	eb42 0202 	adc.w	r2, r2, r2
 101991a:	bf28      	it	cs
 101991c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 1019920:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 1019924:	bf00      	nop
 1019926:	eb42 0202 	adc.w	r2, r2, r2
 101992a:	bf28      	it	cs
 101992c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 1019930:	ebb0 0f01 	cmp.w	r0, r1
 1019934:	bf00      	nop
 1019936:	eb42 0202 	adc.w	r2, r2, r2
 101993a:	bf28      	it	cs
 101993c:	eba0 0001 	subcs.w	r0, r0, r1
 1019940:	4610      	mov	r0, r2
 1019942:	4770      	bx	lr
 1019944:	bf0c      	ite	eq
 1019946:	2001      	moveq	r0, #1
 1019948:	2000      	movne	r0, #0
 101994a:	4770      	bx	lr
 101994c:	fab1 f281 	clz	r2, r1
 1019950:	f1c2 021f 	rsb	r2, r2, #31
 1019954:	fa20 f002 	lsr.w	r0, r0, r2
 1019958:	4770      	bx	lr
 101995a:	b108      	cbz	r0, 1019960 <__udivsi3+0x258>
 101995c:	f04f 30ff 	mov.w	r0, #4294967295
 1019960:	f000 b966 	b.w	1019c30 <__aeabi_idiv0>

01019964 <__aeabi_uidivmod>:
 1019964:	2900      	cmp	r1, #0
 1019966:	d0f8      	beq.n	101995a <__udivsi3+0x252>
 1019968:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 101996c:	f7ff fecc 	bl	1019708 <__udivsi3>
 1019970:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 1019974:	fb02 f300 	mul.w	r3, r2, r0
 1019978:	eba1 0103 	sub.w	r1, r1, r3
 101997c:	4770      	bx	lr
 101997e:	bf00      	nop

01019980 <__divsi3>:
 1019980:	2900      	cmp	r1, #0
 1019982:	f000 813e 	beq.w	1019c02 <.divsi3_skip_div0_test+0x27c>

01019986 <.divsi3_skip_div0_test>:
 1019986:	ea80 0c01 	eor.w	ip, r0, r1
 101998a:	bf48      	it	mi
 101998c:	4249      	negmi	r1, r1
 101998e:	1e4a      	subs	r2, r1, #1
 1019990:	f000 811f 	beq.w	1019bd2 <.divsi3_skip_div0_test+0x24c>
 1019994:	0003      	movs	r3, r0
 1019996:	bf48      	it	mi
 1019998:	4243      	negmi	r3, r0
 101999a:	428b      	cmp	r3, r1
 101999c:	f240 811e 	bls.w	1019bdc <.divsi3_skip_div0_test+0x256>
 10199a0:	4211      	tst	r1, r2
 10199a2:	f000 8123 	beq.w	1019bec <.divsi3_skip_div0_test+0x266>
 10199a6:	fab3 f283 	clz	r2, r3
 10199aa:	fab1 f081 	clz	r0, r1
 10199ae:	eba0 0202 	sub.w	r2, r0, r2
 10199b2:	f1c2 021f 	rsb	r2, r2, #31
 10199b6:	a004      	add	r0, pc, #16	; (adr r0, 10199c8 <.divsi3_skip_div0_test+0x42>)
 10199b8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 10199bc:	f04f 0000 	mov.w	r0, #0
 10199c0:	4697      	mov	pc, r2
 10199c2:	bf00      	nop
 10199c4:	f3af 8000 	nop.w
 10199c8:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 10199cc:	bf00      	nop
 10199ce:	eb40 0000 	adc.w	r0, r0, r0
 10199d2:	bf28      	it	cs
 10199d4:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 10199d8:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 10199dc:	bf00      	nop
 10199de:	eb40 0000 	adc.w	r0, r0, r0
 10199e2:	bf28      	it	cs
 10199e4:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 10199e8:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 10199ec:	bf00      	nop
 10199ee:	eb40 0000 	adc.w	r0, r0, r0
 10199f2:	bf28      	it	cs
 10199f4:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 10199f8:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 10199fc:	bf00      	nop
 10199fe:	eb40 0000 	adc.w	r0, r0, r0
 1019a02:	bf28      	it	cs
 1019a04:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 1019a08:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 1019a0c:	bf00      	nop
 1019a0e:	eb40 0000 	adc.w	r0, r0, r0
 1019a12:	bf28      	it	cs
 1019a14:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 1019a18:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 1019a1c:	bf00      	nop
 1019a1e:	eb40 0000 	adc.w	r0, r0, r0
 1019a22:	bf28      	it	cs
 1019a24:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 1019a28:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 1019a2c:	bf00      	nop
 1019a2e:	eb40 0000 	adc.w	r0, r0, r0
 1019a32:	bf28      	it	cs
 1019a34:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 1019a38:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 1019a3c:	bf00      	nop
 1019a3e:	eb40 0000 	adc.w	r0, r0, r0
 1019a42:	bf28      	it	cs
 1019a44:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 1019a48:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 1019a4c:	bf00      	nop
 1019a4e:	eb40 0000 	adc.w	r0, r0, r0
 1019a52:	bf28      	it	cs
 1019a54:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 1019a58:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 1019a5c:	bf00      	nop
 1019a5e:	eb40 0000 	adc.w	r0, r0, r0
 1019a62:	bf28      	it	cs
 1019a64:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 1019a68:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 1019a6c:	bf00      	nop
 1019a6e:	eb40 0000 	adc.w	r0, r0, r0
 1019a72:	bf28      	it	cs
 1019a74:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 1019a78:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 1019a7c:	bf00      	nop
 1019a7e:	eb40 0000 	adc.w	r0, r0, r0
 1019a82:	bf28      	it	cs
 1019a84:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 1019a88:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 1019a8c:	bf00      	nop
 1019a8e:	eb40 0000 	adc.w	r0, r0, r0
 1019a92:	bf28      	it	cs
 1019a94:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 1019a98:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 1019a9c:	bf00      	nop
 1019a9e:	eb40 0000 	adc.w	r0, r0, r0
 1019aa2:	bf28      	it	cs
 1019aa4:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 1019aa8:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 1019aac:	bf00      	nop
 1019aae:	eb40 0000 	adc.w	r0, r0, r0
 1019ab2:	bf28      	it	cs
 1019ab4:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 1019ab8:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 1019abc:	bf00      	nop
 1019abe:	eb40 0000 	adc.w	r0, r0, r0
 1019ac2:	bf28      	it	cs
 1019ac4:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 1019ac8:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 1019acc:	bf00      	nop
 1019ace:	eb40 0000 	adc.w	r0, r0, r0
 1019ad2:	bf28      	it	cs
 1019ad4:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 1019ad8:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 1019adc:	bf00      	nop
 1019ade:	eb40 0000 	adc.w	r0, r0, r0
 1019ae2:	bf28      	it	cs
 1019ae4:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 1019ae8:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 1019aec:	bf00      	nop
 1019aee:	eb40 0000 	adc.w	r0, r0, r0
 1019af2:	bf28      	it	cs
 1019af4:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 1019af8:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 1019afc:	bf00      	nop
 1019afe:	eb40 0000 	adc.w	r0, r0, r0
 1019b02:	bf28      	it	cs
 1019b04:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 1019b08:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 1019b0c:	bf00      	nop
 1019b0e:	eb40 0000 	adc.w	r0, r0, r0
 1019b12:	bf28      	it	cs
 1019b14:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 1019b18:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 1019b1c:	bf00      	nop
 1019b1e:	eb40 0000 	adc.w	r0, r0, r0
 1019b22:	bf28      	it	cs
 1019b24:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 1019b28:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 1019b2c:	bf00      	nop
 1019b2e:	eb40 0000 	adc.w	r0, r0, r0
 1019b32:	bf28      	it	cs
 1019b34:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 1019b38:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 1019b3c:	bf00      	nop
 1019b3e:	eb40 0000 	adc.w	r0, r0, r0
 1019b42:	bf28      	it	cs
 1019b44:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 1019b48:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 1019b4c:	bf00      	nop
 1019b4e:	eb40 0000 	adc.w	r0, r0, r0
 1019b52:	bf28      	it	cs
 1019b54:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 1019b58:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 1019b5c:	bf00      	nop
 1019b5e:	eb40 0000 	adc.w	r0, r0, r0
 1019b62:	bf28      	it	cs
 1019b64:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 1019b68:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 1019b6c:	bf00      	nop
 1019b6e:	eb40 0000 	adc.w	r0, r0, r0
 1019b72:	bf28      	it	cs
 1019b74:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 1019b78:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 1019b7c:	bf00      	nop
 1019b7e:	eb40 0000 	adc.w	r0, r0, r0
 1019b82:	bf28      	it	cs
 1019b84:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 1019b88:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 1019b8c:	bf00      	nop
 1019b8e:	eb40 0000 	adc.w	r0, r0, r0
 1019b92:	bf28      	it	cs
 1019b94:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 1019b98:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 1019b9c:	bf00      	nop
 1019b9e:	eb40 0000 	adc.w	r0, r0, r0
 1019ba2:	bf28      	it	cs
 1019ba4:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 1019ba8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 1019bac:	bf00      	nop
 1019bae:	eb40 0000 	adc.w	r0, r0, r0
 1019bb2:	bf28      	it	cs
 1019bb4:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 1019bb8:	ebb3 0f01 	cmp.w	r3, r1
 1019bbc:	bf00      	nop
 1019bbe:	eb40 0000 	adc.w	r0, r0, r0
 1019bc2:	bf28      	it	cs
 1019bc4:	eba3 0301 	subcs.w	r3, r3, r1
 1019bc8:	f1bc 0f00 	cmp.w	ip, #0
 1019bcc:	bf48      	it	mi
 1019bce:	4240      	negmi	r0, r0
 1019bd0:	4770      	bx	lr
 1019bd2:	ea9c 0f00 	teq	ip, r0
 1019bd6:	bf48      	it	mi
 1019bd8:	4240      	negmi	r0, r0
 1019bda:	4770      	bx	lr
 1019bdc:	bf38      	it	cc
 1019bde:	2000      	movcc	r0, #0
 1019be0:	bf04      	itt	eq
 1019be2:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 1019be6:	f040 0001 	orreq.w	r0, r0, #1
 1019bea:	4770      	bx	lr
 1019bec:	fab1 f281 	clz	r2, r1
 1019bf0:	f1c2 021f 	rsb	r2, r2, #31
 1019bf4:	f1bc 0f00 	cmp.w	ip, #0
 1019bf8:	fa23 f002 	lsr.w	r0, r3, r2
 1019bfc:	bf48      	it	mi
 1019bfe:	4240      	negmi	r0, r0
 1019c00:	4770      	bx	lr
 1019c02:	2800      	cmp	r0, #0
 1019c04:	bfc8      	it	gt
 1019c06:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 1019c0a:	bfb8      	it	lt
 1019c0c:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 1019c10:	f000 b80e 	b.w	1019c30 <__aeabi_idiv0>

01019c14 <__aeabi_idivmod>:
 1019c14:	2900      	cmp	r1, #0
 1019c16:	d0f4      	beq.n	1019c02 <.divsi3_skip_div0_test+0x27c>
 1019c18:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 1019c1c:	f7ff feb3 	bl	1019986 <.divsi3_skip_div0_test>
 1019c20:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 1019c24:	fb02 f300 	mul.w	r3, r2, r0
 1019c28:	eba1 0103 	sub.w	r1, r1, r3
 1019c2c:	4770      	bx	lr
 1019c2e:	bf00      	nop

01019c30 <__aeabi_idiv0>:
 1019c30:	4770      	bx	lr
 1019c32:	bf00      	nop

01019c34 <__aeabi_drsub>:
 1019c34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 1019c38:	e002      	b.n	1019c40 <__adddf3>
 1019c3a:	bf00      	nop

01019c3c <__aeabi_dsub>:
 1019c3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

01019c40 <__adddf3>:
 1019c40:	b530      	push	{r4, r5, lr}
 1019c42:	ea4f 0441 	mov.w	r4, r1, lsl #1
 1019c46:	ea4f 0543 	mov.w	r5, r3, lsl #1
 1019c4a:	ea94 0f05 	teq	r4, r5
 1019c4e:	bf08      	it	eq
 1019c50:	ea90 0f02 	teqeq	r0, r2
 1019c54:	bf1f      	itttt	ne
 1019c56:	ea54 0c00 	orrsne.w	ip, r4, r0
 1019c5a:	ea55 0c02 	orrsne.w	ip, r5, r2
 1019c5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 1019c62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 1019c66:	f000 80e2 	beq.w	1019e2e <__adddf3+0x1ee>
 1019c6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 1019c6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 1019c72:	bfb8      	it	lt
 1019c74:	426d      	neglt	r5, r5
 1019c76:	dd0c      	ble.n	1019c92 <__adddf3+0x52>
 1019c78:	442c      	add	r4, r5
 1019c7a:	ea80 0202 	eor.w	r2, r0, r2
 1019c7e:	ea81 0303 	eor.w	r3, r1, r3
 1019c82:	ea82 0000 	eor.w	r0, r2, r0
 1019c86:	ea83 0101 	eor.w	r1, r3, r1
 1019c8a:	ea80 0202 	eor.w	r2, r0, r2
 1019c8e:	ea81 0303 	eor.w	r3, r1, r3
 1019c92:	2d36      	cmp	r5, #54	; 0x36
 1019c94:	bf88      	it	hi
 1019c96:	bd30      	pophi	{r4, r5, pc}
 1019c98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 1019c9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 1019ca0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 1019ca4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 1019ca8:	d002      	beq.n	1019cb0 <__adddf3+0x70>
 1019caa:	4240      	negs	r0, r0
 1019cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1019cb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 1019cb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 1019cb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 1019cbc:	d002      	beq.n	1019cc4 <__adddf3+0x84>
 1019cbe:	4252      	negs	r2, r2
 1019cc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 1019cc4:	ea94 0f05 	teq	r4, r5
 1019cc8:	f000 80a7 	beq.w	1019e1a <__adddf3+0x1da>
 1019ccc:	f1a4 0401 	sub.w	r4, r4, #1
 1019cd0:	f1d5 0e20 	rsbs	lr, r5, #32
 1019cd4:	db0d      	blt.n	1019cf2 <__adddf3+0xb2>
 1019cd6:	fa02 fc0e 	lsl.w	ip, r2, lr
 1019cda:	fa22 f205 	lsr.w	r2, r2, r5
 1019cde:	1880      	adds	r0, r0, r2
 1019ce0:	f141 0100 	adc.w	r1, r1, #0
 1019ce4:	fa03 f20e 	lsl.w	r2, r3, lr
 1019ce8:	1880      	adds	r0, r0, r2
 1019cea:	fa43 f305 	asr.w	r3, r3, r5
 1019cee:	4159      	adcs	r1, r3
 1019cf0:	e00e      	b.n	1019d10 <__adddf3+0xd0>
 1019cf2:	f1a5 0520 	sub.w	r5, r5, #32
 1019cf6:	f10e 0e20 	add.w	lr, lr, #32
 1019cfa:	2a01      	cmp	r2, #1
 1019cfc:	fa03 fc0e 	lsl.w	ip, r3, lr
 1019d00:	bf28      	it	cs
 1019d02:	f04c 0c02 	orrcs.w	ip, ip, #2
 1019d06:	fa43 f305 	asr.w	r3, r3, r5
 1019d0a:	18c0      	adds	r0, r0, r3
 1019d0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 1019d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1019d14:	d507      	bpl.n	1019d26 <__adddf3+0xe6>
 1019d16:	f04f 0e00 	mov.w	lr, #0
 1019d1a:	f1dc 0c00 	rsbs	ip, ip, #0
 1019d1e:	eb7e 0000 	sbcs.w	r0, lr, r0
 1019d22:	eb6e 0101 	sbc.w	r1, lr, r1
 1019d26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 1019d2a:	d31b      	bcc.n	1019d64 <__adddf3+0x124>
 1019d2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 1019d30:	d30c      	bcc.n	1019d4c <__adddf3+0x10c>
 1019d32:	0849      	lsrs	r1, r1, #1
 1019d34:	ea5f 0030 	movs.w	r0, r0, rrx
 1019d38:	ea4f 0c3c 	mov.w	ip, ip, rrx
 1019d3c:	f104 0401 	add.w	r4, r4, #1
 1019d40:	ea4f 5244 	mov.w	r2, r4, lsl #21
 1019d44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 1019d48:	f080 809a 	bcs.w	1019e80 <__adddf3+0x240>
 1019d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 1019d50:	bf08      	it	eq
 1019d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 1019d56:	f150 0000 	adcs.w	r0, r0, #0
 1019d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 1019d5e:	ea41 0105 	orr.w	r1, r1, r5
 1019d62:	bd30      	pop	{r4, r5, pc}
 1019d64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 1019d68:	4140      	adcs	r0, r0
 1019d6a:	eb41 0101 	adc.w	r1, r1, r1
 1019d6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1019d72:	f1a4 0401 	sub.w	r4, r4, #1
 1019d76:	d1e9      	bne.n	1019d4c <__adddf3+0x10c>
 1019d78:	f091 0f00 	teq	r1, #0
 1019d7c:	bf04      	itt	eq
 1019d7e:	4601      	moveq	r1, r0
 1019d80:	2000      	moveq	r0, #0
 1019d82:	fab1 f381 	clz	r3, r1
 1019d86:	bf08      	it	eq
 1019d88:	3320      	addeq	r3, #32
 1019d8a:	f1a3 030b 	sub.w	r3, r3, #11
 1019d8e:	f1b3 0220 	subs.w	r2, r3, #32
 1019d92:	da0c      	bge.n	1019dae <__adddf3+0x16e>
 1019d94:	320c      	adds	r2, #12
 1019d96:	dd08      	ble.n	1019daa <__adddf3+0x16a>
 1019d98:	f102 0c14 	add.w	ip, r2, #20
 1019d9c:	f1c2 020c 	rsb	r2, r2, #12
 1019da0:	fa01 f00c 	lsl.w	r0, r1, ip
 1019da4:	fa21 f102 	lsr.w	r1, r1, r2
 1019da8:	e00c      	b.n	1019dc4 <__adddf3+0x184>
 1019daa:	f102 0214 	add.w	r2, r2, #20
 1019dae:	bfd8      	it	le
 1019db0:	f1c2 0c20 	rsble	ip, r2, #32
 1019db4:	fa01 f102 	lsl.w	r1, r1, r2
 1019db8:	fa20 fc0c 	lsr.w	ip, r0, ip
 1019dbc:	bfdc      	itt	le
 1019dbe:	ea41 010c 	orrle.w	r1, r1, ip
 1019dc2:	4090      	lslle	r0, r2
 1019dc4:	1ae4      	subs	r4, r4, r3
 1019dc6:	bfa2      	ittt	ge
 1019dc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 1019dcc:	4329      	orrge	r1, r5
 1019dce:	bd30      	popge	{r4, r5, pc}
 1019dd0:	ea6f 0404 	mvn.w	r4, r4
 1019dd4:	3c1f      	subs	r4, #31
 1019dd6:	da1c      	bge.n	1019e12 <__adddf3+0x1d2>
 1019dd8:	340c      	adds	r4, #12
 1019dda:	dc0e      	bgt.n	1019dfa <__adddf3+0x1ba>
 1019ddc:	f104 0414 	add.w	r4, r4, #20
 1019de0:	f1c4 0220 	rsb	r2, r4, #32
 1019de4:	fa20 f004 	lsr.w	r0, r0, r4
 1019de8:	fa01 f302 	lsl.w	r3, r1, r2
 1019dec:	ea40 0003 	orr.w	r0, r0, r3
 1019df0:	fa21 f304 	lsr.w	r3, r1, r4
 1019df4:	ea45 0103 	orr.w	r1, r5, r3
 1019df8:	bd30      	pop	{r4, r5, pc}
 1019dfa:	f1c4 040c 	rsb	r4, r4, #12
 1019dfe:	f1c4 0220 	rsb	r2, r4, #32
 1019e02:	fa20 f002 	lsr.w	r0, r0, r2
 1019e06:	fa01 f304 	lsl.w	r3, r1, r4
 1019e0a:	ea40 0003 	orr.w	r0, r0, r3
 1019e0e:	4629      	mov	r1, r5
 1019e10:	bd30      	pop	{r4, r5, pc}
 1019e12:	fa21 f004 	lsr.w	r0, r1, r4
 1019e16:	4629      	mov	r1, r5
 1019e18:	bd30      	pop	{r4, r5, pc}
 1019e1a:	f094 0f00 	teq	r4, #0
 1019e1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 1019e22:	bf06      	itte	eq
 1019e24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 1019e28:	3401      	addeq	r4, #1
 1019e2a:	3d01      	subne	r5, #1
 1019e2c:	e74e      	b.n	1019ccc <__adddf3+0x8c>
 1019e2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 1019e32:	bf18      	it	ne
 1019e34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 1019e38:	d029      	beq.n	1019e8e <__adddf3+0x24e>
 1019e3a:	ea94 0f05 	teq	r4, r5
 1019e3e:	bf08      	it	eq
 1019e40:	ea90 0f02 	teqeq	r0, r2
 1019e44:	d005      	beq.n	1019e52 <__adddf3+0x212>
 1019e46:	ea54 0c00 	orrs.w	ip, r4, r0
 1019e4a:	bf04      	itt	eq
 1019e4c:	4619      	moveq	r1, r3
 1019e4e:	4610      	moveq	r0, r2
 1019e50:	bd30      	pop	{r4, r5, pc}
 1019e52:	ea91 0f03 	teq	r1, r3
 1019e56:	bf1e      	ittt	ne
 1019e58:	2100      	movne	r1, #0
 1019e5a:	2000      	movne	r0, #0
 1019e5c:	bd30      	popne	{r4, r5, pc}
 1019e5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 1019e62:	d105      	bne.n	1019e70 <__adddf3+0x230>
 1019e64:	0040      	lsls	r0, r0, #1
 1019e66:	4149      	adcs	r1, r1
 1019e68:	bf28      	it	cs
 1019e6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 1019e6e:	bd30      	pop	{r4, r5, pc}
 1019e70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 1019e74:	bf3c      	itt	cc
 1019e76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 1019e7a:	bd30      	popcc	{r4, r5, pc}
 1019e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1019e80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 1019e84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 1019e88:	f04f 0000 	mov.w	r0, #0
 1019e8c:	bd30      	pop	{r4, r5, pc}
 1019e8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 1019e92:	bf1a      	itte	ne
 1019e94:	4619      	movne	r1, r3
 1019e96:	4610      	movne	r0, r2
 1019e98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 1019e9c:	bf1c      	itt	ne
 1019e9e:	460b      	movne	r3, r1
 1019ea0:	4602      	movne	r2, r0
 1019ea2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 1019ea6:	bf06      	itte	eq
 1019ea8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 1019eac:	ea91 0f03 	teqeq	r1, r3
 1019eb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 1019eb4:	bd30      	pop	{r4, r5, pc}
 1019eb6:	bf00      	nop

01019eb8 <__aeabi_ui2d>:
 1019eb8:	f090 0f00 	teq	r0, #0
 1019ebc:	bf04      	itt	eq
 1019ebe:	2100      	moveq	r1, #0
 1019ec0:	4770      	bxeq	lr
 1019ec2:	b530      	push	{r4, r5, lr}
 1019ec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 1019ec8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 1019ecc:	f04f 0500 	mov.w	r5, #0
 1019ed0:	f04f 0100 	mov.w	r1, #0
 1019ed4:	e750      	b.n	1019d78 <__adddf3+0x138>
 1019ed6:	bf00      	nop

01019ed8 <__aeabi_i2d>:
 1019ed8:	f090 0f00 	teq	r0, #0
 1019edc:	bf04      	itt	eq
 1019ede:	2100      	moveq	r1, #0
 1019ee0:	4770      	bxeq	lr
 1019ee2:	b530      	push	{r4, r5, lr}
 1019ee4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 1019ee8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 1019eec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 1019ef0:	bf48      	it	mi
 1019ef2:	4240      	negmi	r0, r0
 1019ef4:	f04f 0100 	mov.w	r1, #0
 1019ef8:	e73e      	b.n	1019d78 <__adddf3+0x138>
 1019efa:	bf00      	nop

01019efc <__aeabi_f2d>:
 1019efc:	0042      	lsls	r2, r0, #1
 1019efe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 1019f02:	ea4f 0131 	mov.w	r1, r1, rrx
 1019f06:	ea4f 7002 	mov.w	r0, r2, lsl #28
 1019f0a:	bf1f      	itttt	ne
 1019f0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 1019f10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 1019f14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 1019f18:	4770      	bxne	lr
 1019f1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 1019f1e:	bf08      	it	eq
 1019f20:	4770      	bxeq	lr
 1019f22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 1019f26:	bf04      	itt	eq
 1019f28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 1019f2c:	4770      	bxeq	lr
 1019f2e:	b530      	push	{r4, r5, lr}
 1019f30:	f44f 7460 	mov.w	r4, #896	; 0x380
 1019f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1019f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 1019f3c:	e71c      	b.n	1019d78 <__adddf3+0x138>
 1019f3e:	bf00      	nop

01019f40 <__aeabi_ul2d>:
 1019f40:	ea50 0201 	orrs.w	r2, r0, r1
 1019f44:	bf08      	it	eq
 1019f46:	4770      	bxeq	lr
 1019f48:	b530      	push	{r4, r5, lr}
 1019f4a:	f04f 0500 	mov.w	r5, #0
 1019f4e:	e00a      	b.n	1019f66 <__aeabi_l2d+0x16>

01019f50 <__aeabi_l2d>:
 1019f50:	ea50 0201 	orrs.w	r2, r0, r1
 1019f54:	bf08      	it	eq
 1019f56:	4770      	bxeq	lr
 1019f58:	b530      	push	{r4, r5, lr}
 1019f5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 1019f5e:	d502      	bpl.n	1019f66 <__aeabi_l2d+0x16>
 1019f60:	4240      	negs	r0, r0
 1019f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1019f66:	f44f 6480 	mov.w	r4, #1024	; 0x400
 1019f6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 1019f6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 1019f72:	f43f aed8 	beq.w	1019d26 <__adddf3+0xe6>
 1019f76:	f04f 0203 	mov.w	r2, #3
 1019f7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 1019f7e:	bf18      	it	ne
 1019f80:	3203      	addne	r2, #3
 1019f82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 1019f86:	bf18      	it	ne
 1019f88:	3203      	addne	r2, #3
 1019f8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 1019f8e:	f1c2 0320 	rsb	r3, r2, #32
 1019f92:	fa00 fc03 	lsl.w	ip, r0, r3
 1019f96:	fa20 f002 	lsr.w	r0, r0, r2
 1019f9a:	fa01 fe03 	lsl.w	lr, r1, r3
 1019f9e:	ea40 000e 	orr.w	r0, r0, lr
 1019fa2:	fa21 f102 	lsr.w	r1, r1, r2
 1019fa6:	4414      	add	r4, r2
 1019fa8:	e6bd      	b.n	1019d26 <__adddf3+0xe6>
 1019faa:	bf00      	nop

01019fac <__aeabi_frsub>:
 1019fac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 1019fb0:	e002      	b.n	1019fb8 <__addsf3>
 1019fb2:	bf00      	nop

01019fb4 <__aeabi_fsub>:
 1019fb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

01019fb8 <__addsf3>:
 1019fb8:	0042      	lsls	r2, r0, #1
 1019fba:	bf1f      	itttt	ne
 1019fbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 1019fc0:	ea92 0f03 	teqne	r2, r3
 1019fc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 1019fc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 1019fcc:	d06a      	beq.n	101a0a4 <__addsf3+0xec>
 1019fce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 1019fd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 1019fd6:	bfc1      	itttt	gt
 1019fd8:	18d2      	addgt	r2, r2, r3
 1019fda:	4041      	eorgt	r1, r0
 1019fdc:	4048      	eorgt	r0, r1
 1019fde:	4041      	eorgt	r1, r0
 1019fe0:	bfb8      	it	lt
 1019fe2:	425b      	neglt	r3, r3
 1019fe4:	2b19      	cmp	r3, #25
 1019fe6:	bf88      	it	hi
 1019fe8:	4770      	bxhi	lr
 1019fea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 1019fee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 1019ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1019ff6:	bf18      	it	ne
 1019ff8:	4240      	negne	r0, r0
 1019ffa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 1019ffe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 101a002:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 101a006:	bf18      	it	ne
 101a008:	4249      	negne	r1, r1
 101a00a:	ea92 0f03 	teq	r2, r3
 101a00e:	d03f      	beq.n	101a090 <__addsf3+0xd8>
 101a010:	f1a2 0201 	sub.w	r2, r2, #1
 101a014:	fa41 fc03 	asr.w	ip, r1, r3
 101a018:	eb10 000c 	adds.w	r0, r0, ip
 101a01c:	f1c3 0320 	rsb	r3, r3, #32
 101a020:	fa01 f103 	lsl.w	r1, r1, r3
 101a024:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 101a028:	d502      	bpl.n	101a030 <__addsf3+0x78>
 101a02a:	4249      	negs	r1, r1
 101a02c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 101a030:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 101a034:	d313      	bcc.n	101a05e <__addsf3+0xa6>
 101a036:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 101a03a:	d306      	bcc.n	101a04a <__addsf3+0x92>
 101a03c:	0840      	lsrs	r0, r0, #1
 101a03e:	ea4f 0131 	mov.w	r1, r1, rrx
 101a042:	f102 0201 	add.w	r2, r2, #1
 101a046:	2afe      	cmp	r2, #254	; 0xfe
 101a048:	d251      	bcs.n	101a0ee <__addsf3+0x136>
 101a04a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 101a04e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 101a052:	bf08      	it	eq
 101a054:	f020 0001 	biceq.w	r0, r0, #1
 101a058:	ea40 0003 	orr.w	r0, r0, r3
 101a05c:	4770      	bx	lr
 101a05e:	0049      	lsls	r1, r1, #1
 101a060:	eb40 0000 	adc.w	r0, r0, r0
 101a064:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 101a068:	f1a2 0201 	sub.w	r2, r2, #1
 101a06c:	d1ed      	bne.n	101a04a <__addsf3+0x92>
 101a06e:	fab0 fc80 	clz	ip, r0
 101a072:	f1ac 0c08 	sub.w	ip, ip, #8
 101a076:	ebb2 020c 	subs.w	r2, r2, ip
 101a07a:	fa00 f00c 	lsl.w	r0, r0, ip
 101a07e:	bfaa      	itet	ge
 101a080:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 101a084:	4252      	neglt	r2, r2
 101a086:	4318      	orrge	r0, r3
 101a088:	bfbc      	itt	lt
 101a08a:	40d0      	lsrlt	r0, r2
 101a08c:	4318      	orrlt	r0, r3
 101a08e:	4770      	bx	lr
 101a090:	f092 0f00 	teq	r2, #0
 101a094:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 101a098:	bf06      	itte	eq
 101a09a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 101a09e:	3201      	addeq	r2, #1
 101a0a0:	3b01      	subne	r3, #1
 101a0a2:	e7b5      	b.n	101a010 <__addsf3+0x58>
 101a0a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 101a0a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 101a0ac:	bf18      	it	ne
 101a0ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 101a0b2:	d021      	beq.n	101a0f8 <__addsf3+0x140>
 101a0b4:	ea92 0f03 	teq	r2, r3
 101a0b8:	d004      	beq.n	101a0c4 <__addsf3+0x10c>
 101a0ba:	f092 0f00 	teq	r2, #0
 101a0be:	bf08      	it	eq
 101a0c0:	4608      	moveq	r0, r1
 101a0c2:	4770      	bx	lr
 101a0c4:	ea90 0f01 	teq	r0, r1
 101a0c8:	bf1c      	itt	ne
 101a0ca:	2000      	movne	r0, #0
 101a0cc:	4770      	bxne	lr
 101a0ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 101a0d2:	d104      	bne.n	101a0de <__addsf3+0x126>
 101a0d4:	0040      	lsls	r0, r0, #1
 101a0d6:	bf28      	it	cs
 101a0d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 101a0dc:	4770      	bx	lr
 101a0de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 101a0e2:	bf3c      	itt	cc
 101a0e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 101a0e8:	4770      	bxcc	lr
 101a0ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 101a0ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 101a0f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 101a0f6:	4770      	bx	lr
 101a0f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 101a0fc:	bf16      	itet	ne
 101a0fe:	4608      	movne	r0, r1
 101a100:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 101a104:	4601      	movne	r1, r0
 101a106:	0242      	lsls	r2, r0, #9
 101a108:	bf06      	itte	eq
 101a10a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 101a10e:	ea90 0f01 	teqeq	r0, r1
 101a112:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 101a116:	4770      	bx	lr

0101a118 <__aeabi_ui2f>:
 101a118:	f04f 0300 	mov.w	r3, #0
 101a11c:	e004      	b.n	101a128 <__aeabi_i2f+0x8>
 101a11e:	bf00      	nop

0101a120 <__aeabi_i2f>:
 101a120:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 101a124:	bf48      	it	mi
 101a126:	4240      	negmi	r0, r0
 101a128:	ea5f 0c00 	movs.w	ip, r0
 101a12c:	bf08      	it	eq
 101a12e:	4770      	bxeq	lr
 101a130:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 101a134:	4601      	mov	r1, r0
 101a136:	f04f 0000 	mov.w	r0, #0
 101a13a:	e01c      	b.n	101a176 <__aeabi_l2f+0x2a>

0101a13c <__aeabi_ul2f>:
 101a13c:	ea50 0201 	orrs.w	r2, r0, r1
 101a140:	bf08      	it	eq
 101a142:	4770      	bxeq	lr
 101a144:	f04f 0300 	mov.w	r3, #0
 101a148:	e00a      	b.n	101a160 <__aeabi_l2f+0x14>
 101a14a:	bf00      	nop

0101a14c <__aeabi_l2f>:
 101a14c:	ea50 0201 	orrs.w	r2, r0, r1
 101a150:	bf08      	it	eq
 101a152:	4770      	bxeq	lr
 101a154:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 101a158:	d502      	bpl.n	101a160 <__aeabi_l2f+0x14>
 101a15a:	4240      	negs	r0, r0
 101a15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 101a160:	ea5f 0c01 	movs.w	ip, r1
 101a164:	bf02      	ittt	eq
 101a166:	4684      	moveq	ip, r0
 101a168:	4601      	moveq	r1, r0
 101a16a:	2000      	moveq	r0, #0
 101a16c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 101a170:	bf08      	it	eq
 101a172:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 101a176:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 101a17a:	fabc f28c 	clz	r2, ip
 101a17e:	3a08      	subs	r2, #8
 101a180:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 101a184:	db10      	blt.n	101a1a8 <__aeabi_l2f+0x5c>
 101a186:	fa01 fc02 	lsl.w	ip, r1, r2
 101a18a:	4463      	add	r3, ip
 101a18c:	fa00 fc02 	lsl.w	ip, r0, r2
 101a190:	f1c2 0220 	rsb	r2, r2, #32
 101a194:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 101a198:	fa20 f202 	lsr.w	r2, r0, r2
 101a19c:	eb43 0002 	adc.w	r0, r3, r2
 101a1a0:	bf08      	it	eq
 101a1a2:	f020 0001 	biceq.w	r0, r0, #1
 101a1a6:	4770      	bx	lr
 101a1a8:	f102 0220 	add.w	r2, r2, #32
 101a1ac:	fa01 fc02 	lsl.w	ip, r1, r2
 101a1b0:	f1c2 0220 	rsb	r2, r2, #32
 101a1b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 101a1b8:	fa21 f202 	lsr.w	r2, r1, r2
 101a1bc:	eb43 0002 	adc.w	r0, r3, r2
 101a1c0:	bf08      	it	eq
 101a1c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 101a1c6:	4770      	bx	lr

0101a1c8 <__aeabi_uldivmod>:
 101a1c8:	b953      	cbnz	r3, 101a1e0 <__aeabi_uldivmod+0x18>
 101a1ca:	b94a      	cbnz	r2, 101a1e0 <__aeabi_uldivmod+0x18>
 101a1cc:	2900      	cmp	r1, #0
 101a1ce:	bf08      	it	eq
 101a1d0:	2800      	cmpeq	r0, #0
 101a1d2:	bf1c      	itt	ne
 101a1d4:	f04f 31ff 	movne.w	r1, #4294967295
 101a1d8:	f04f 30ff 	movne.w	r0, #4294967295
 101a1dc:	f7ff bd28 	b.w	1019c30 <__aeabi_idiv0>
 101a1e0:	f1ad 0c08 	sub.w	ip, sp, #8
 101a1e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 101a1e8:	f000 f85a 	bl	101a2a0 <__udivmoddi4>
 101a1ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 101a1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101a1f4:	b004      	add	sp, #16
 101a1f6:	4770      	bx	lr

0101a1f8 <__popcountsi2>:
 101a1f8:	0843      	lsrs	r3, r0, #1
 101a1fa:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 101a1fe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 101a202:	1ac0      	subs	r0, r0, r3
 101a204:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 101a208:	0880      	lsrs	r0, r0, #2
 101a20a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 101a20e:	4418      	add	r0, r3
 101a210:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 101a214:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 101a218:	fb02 f000 	mul.w	r0, r2, r0
 101a21c:	0e00      	lsrs	r0, r0, #24
 101a21e:	4770      	bx	lr

0101a220 <__aeabi_f2ulz>:
 101a220:	ee07 0a90 	vmov	s15, r0
 101a224:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 101a250 <__aeabi_f2ulz+0x30>
 101a228:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 101a22c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 101a258 <__aeabi_f2ulz+0x38>
 101a230:	ee26 7b07 	vmul.f64	d7, d6, d7
 101a234:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 101a238:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 101a23c:	ee17 1a10 	vmov	r1, s14
 101a240:	ee04 6b45 	vmls.f64	d6, d4, d5
 101a244:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 101a248:	ee17 0a90 	vmov	r0, s15
 101a24c:	4770      	bx	lr
 101a24e:	bf00      	nop
 101a250:	00000000 	.word	0x00000000
 101a254:	41f00000 	.word	0x41f00000
 101a258:	00000000 	.word	0x00000000
 101a25c:	3df00000 	.word	0x3df00000

0101a260 <__aeabi_d2ulz>:
 101a260:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 101a290 <__aeabi_d2ulz+0x30>
 101a264:	ec41 0b16 	vmov	d6, r0, r1
 101a268:	ee26 7b07 	vmul.f64	d7, d6, d7
 101a26c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 101a298 <__aeabi_d2ulz+0x38>
 101a270:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 101a274:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 101a278:	ee17 1a10 	vmov	r1, s14
 101a27c:	ee04 6b45 	vmls.f64	d6, d4, d5
 101a280:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 101a284:	ee17 0a90 	vmov	r0, s15
 101a288:	4770      	bx	lr
 101a28a:	bf00      	nop
 101a28c:	f3af 8000 	nop.w
 101a290:	00000000 	.word	0x00000000
 101a294:	3df00000 	.word	0x3df00000
 101a298:	00000000 	.word	0x00000000
 101a29c:	41f00000 	.word	0x41f00000

0101a2a0 <__udivmoddi4>:
 101a2a0:	4299      	cmp	r1, r3
 101a2a2:	bf08      	it	eq
 101a2a4:	4290      	cmpeq	r0, r2
 101a2a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101a2aa:	4604      	mov	r4, r0
 101a2ac:	bf38      	it	cc
 101a2ae:	2000      	movcc	r0, #0
 101a2b0:	460d      	mov	r5, r1
 101a2b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 101a2b4:	bf38      	it	cc
 101a2b6:	4601      	movcc	r1, r0
 101a2b8:	d36c      	bcc.n	101a394 <__udivmoddi4+0xf4>
 101a2ba:	4690      	mov	r8, r2
 101a2bc:	4699      	mov	r9, r3
 101a2be:	fab3 f683 	clz	r6, r3
 101a2c2:	2b00      	cmp	r3, #0
 101a2c4:	d06f      	beq.n	101a3a6 <__udivmoddi4+0x106>
 101a2c6:	fab5 f185 	clz	r1, r5
 101a2ca:	2d00      	cmp	r5, #0
 101a2cc:	d067      	beq.n	101a39e <__udivmoddi4+0xfe>
 101a2ce:	1a76      	subs	r6, r6, r1
 101a2d0:	f1a6 0c20 	sub.w	ip, r6, #32
 101a2d4:	fa09 fb06 	lsl.w	fp, r9, r6
 101a2d8:	fa08 f30c 	lsl.w	r3, r8, ip
 101a2dc:	f1c6 0e20 	rsb	lr, r6, #32
 101a2e0:	ea4b 0b03 	orr.w	fp, fp, r3
 101a2e4:	fa28 f30e 	lsr.w	r3, r8, lr
 101a2e8:	ea4b 0b03 	orr.w	fp, fp, r3
 101a2ec:	fa08 fa06 	lsl.w	sl, r8, r6
 101a2f0:	455d      	cmp	r5, fp
 101a2f2:	bf08      	it	eq
 101a2f4:	4554      	cmpeq	r4, sl
 101a2f6:	bf3c      	itt	cc
 101a2f8:	2000      	movcc	r0, #0
 101a2fa:	4601      	movcc	r1, r0
 101a2fc:	d30a      	bcc.n	101a314 <__udivmoddi4+0x74>
 101a2fe:	2001      	movs	r0, #1
 101a300:	ebb4 040a 	subs.w	r4, r4, sl
 101a304:	fa00 f10c 	lsl.w	r1, r0, ip
 101a308:	fa20 f30e 	lsr.w	r3, r0, lr
 101a30c:	eb65 050b 	sbc.w	r5, r5, fp
 101a310:	4319      	orrs	r1, r3
 101a312:	40b0      	lsls	r0, r6
 101a314:	2e00      	cmp	r6, #0
 101a316:	d03d      	beq.n	101a394 <__udivmoddi4+0xf4>
 101a318:	ea4f 085a 	mov.w	r8, sl, lsr #1
 101a31c:	4632      	mov	r2, r6
 101a31e:	ea48 78cb 	orr.w	r8, r8, fp, lsl #31
 101a322:	ea4f 095b 	mov.w	r9, fp, lsr #1
 101a326:	e00b      	b.n	101a340 <__udivmoddi4+0xa0>
 101a328:	ebb4 0308 	subs.w	r3, r4, r8
 101a32c:	eb65 0a09 	sbc.w	sl, r5, r9
 101a330:	18db      	adds	r3, r3, r3
 101a332:	eb4a 0a0a 	adc.w	sl, sl, sl
 101a336:	1c5c      	adds	r4, r3, #1
 101a338:	f14a 0500 	adc.w	r5, sl, #0
 101a33c:	3a01      	subs	r2, #1
 101a33e:	d007      	beq.n	101a350 <__udivmoddi4+0xb0>
 101a340:	454d      	cmp	r5, r9
 101a342:	bf08      	it	eq
 101a344:	4544      	cmpeq	r4, r8
 101a346:	d2ef      	bcs.n	101a328 <__udivmoddi4+0x88>
 101a348:	1924      	adds	r4, r4, r4
 101a34a:	416d      	adcs	r5, r5
 101a34c:	3a01      	subs	r2, #1
 101a34e:	d1f7      	bne.n	101a340 <__udivmoddi4+0xa0>
 101a350:	fa05 fe0e 	lsl.w	lr, r5, lr
 101a354:	fa24 f306 	lsr.w	r3, r4, r6
 101a358:	fa25 fc0c 	lsr.w	ip, r5, ip
 101a35c:	ea43 030e 	orr.w	r3, r3, lr
 101a360:	1900      	adds	r0, r0, r4
 101a362:	fa25 fe06 	lsr.w	lr, r5, r6
 101a366:	ea43 040c 	orr.w	r4, r3, ip
 101a36a:	f1a6 0c20 	sub.w	ip, r6, #32
 101a36e:	f1c6 0220 	rsb	r2, r6, #32
 101a372:	fa0e f306 	lsl.w	r3, lr, r6
 101a376:	fa04 fc0c 	lsl.w	ip, r4, ip
 101a37a:	fa04 f606 	lsl.w	r6, r4, r6
 101a37e:	ea43 030c 	orr.w	r3, r3, ip
 101a382:	fa24 f202 	lsr.w	r2, r4, r2
 101a386:	eb45 0101 	adc.w	r1, r5, r1
 101a38a:	4313      	orrs	r3, r2
 101a38c:	1b80      	subs	r0, r0, r6
 101a38e:	4675      	mov	r5, lr
 101a390:	eb61 0103 	sbc.w	r1, r1, r3
 101a394:	b10f      	cbz	r7, 101a39a <__udivmoddi4+0xfa>
 101a396:	e9c7 4500 	strd	r4, r5, [r7]
 101a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101a39e:	fab4 f184 	clz	r1, r4
 101a3a2:	3120      	adds	r1, #32
 101a3a4:	e793      	b.n	101a2ce <__udivmoddi4+0x2e>
 101a3a6:	fab2 f682 	clz	r6, r2
 101a3aa:	fab5 f185 	clz	r1, r5
 101a3ae:	3620      	adds	r6, #32
 101a3b0:	2d00      	cmp	r5, #0
 101a3b2:	d18c      	bne.n	101a2ce <__udivmoddi4+0x2e>
 101a3b4:	e7f3      	b.n	101a39e <__udivmoddi4+0xfe>
 101a3b6:	bf00      	nop

0101a3b8 <calloc>:
 101a3b8:	f64a 1348 	movw	r3, #43336	; 0xa948
 101a3bc:	f2c0 1306 	movt	r3, #262	; 0x106
 101a3c0:	460a      	mov	r2, r1
 101a3c2:	4601      	mov	r1, r0
 101a3c4:	6818      	ldr	r0, [r3, #0]
 101a3c6:	f000 b801 	b.w	101a3cc <_calloc_r>
 101a3ca:	bf00      	nop

0101a3cc <_calloc_r>:
 101a3cc:	b510      	push	{r4, lr}
 101a3ce:	fb02 f101 	mul.w	r1, r2, r1
 101a3d2:	f000 fe01 	bl	101afd8 <_malloc_r>
 101a3d6:	4604      	mov	r4, r0
 101a3d8:	b170      	cbz	r0, 101a3f8 <_calloc_r+0x2c>
 101a3da:	f850 2c04 	ldr.w	r2, [r0, #-4]
 101a3de:	f022 0203 	bic.w	r2, r2, #3
 101a3e2:	3a04      	subs	r2, #4
 101a3e4:	2a24      	cmp	r2, #36	; 0x24
 101a3e6:	d81d      	bhi.n	101a424 <_calloc_r+0x58>
 101a3e8:	2a13      	cmp	r2, #19
 101a3ea:	bf98      	it	ls
 101a3ec:	4602      	movls	r2, r0
 101a3ee:	d805      	bhi.n	101a3fc <_calloc_r+0x30>
 101a3f0:	2300      	movs	r3, #0
 101a3f2:	e9c2 3300 	strd	r3, r3, [r2]
 101a3f6:	6093      	str	r3, [r2, #8]
 101a3f8:	4620      	mov	r0, r4
 101a3fa:	bd10      	pop	{r4, pc}
 101a3fc:	2a1b      	cmp	r2, #27
 101a3fe:	f04f 0300 	mov.w	r3, #0
 101a402:	bf98      	it	ls
 101a404:	f100 0208 	addls.w	r2, r0, #8
 101a408:	e9c0 3300 	strd	r3, r3, [r0]
 101a40c:	d9f0      	bls.n	101a3f0 <_calloc_r+0x24>
 101a40e:	2a24      	cmp	r2, #36	; 0x24
 101a410:	e9c0 3302 	strd	r3, r3, [r0, #8]
 101a414:	bf11      	iteee	ne
 101a416:	f100 0210 	addne.w	r2, r0, #16
 101a41a:	6103      	streq	r3, [r0, #16]
 101a41c:	f100 0218 	addeq.w	r2, r0, #24
 101a420:	6143      	streq	r3, [r0, #20]
 101a422:	e7e5      	b.n	101a3f0 <_calloc_r+0x24>
 101a424:	2100      	movs	r1, #0
 101a426:	f001 fe43 	bl	101c0b0 <memset>
 101a42a:	4620      	mov	r0, r4
 101a42c:	bd10      	pop	{r4, pc}
 101a42e:	bf00      	nop

0101a430 <exit>:
 101a430:	b508      	push	{r3, lr}
 101a432:	2100      	movs	r1, #0
 101a434:	4604      	mov	r4, r0
 101a436:	f006 fd0f 	bl	1020e58 <__call_exitprocs>
 101a43a:	f246 13cc 	movw	r3, #25036	; 0x61cc
 101a43e:	f2c0 1306 	movt	r3, #262	; 0x106
 101a442:	6818      	ldr	r0, [r3, #0]
 101a444:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 101a446:	b103      	cbz	r3, 101a44a <exit+0x1a>
 101a448:	4798      	blx	r3
 101a44a:	4620      	mov	r0, r4
 101a44c:	f00b ecb0 	blx	1025db0 <_exit>

0101a450 <__libc_fini_array>:
 101a450:	b538      	push	{r3, r4, r5, lr}
 101a452:	f240 0410 	movw	r4, #16
 101a456:	f240 050c 	movw	r5, #12
 101a45a:	f2c0 1407 	movt	r4, #263	; 0x107
 101a45e:	f2c0 1507 	movt	r5, #263	; 0x107
 101a462:	1b64      	subs	r4, r4, r5
 101a464:	10a4      	asrs	r4, r4, #2
 101a466:	d007      	beq.n	101a478 <__libc_fini_array+0x28>
 101a468:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 101a46c:	3c01      	subs	r4, #1
 101a46e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 101a472:	4798      	blx	r3
 101a474:	2c00      	cmp	r4, #0
 101a476:	d1f9      	bne.n	101a46c <__libc_fini_array+0x1c>
 101a478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 101a47c:	f00b bcd6 	b.w	1025e2c <_fini>

0101a480 <__libc_init_array>:
 101a480:	b570      	push	{r4, r5, r6, lr}
 101a482:	f240 0608 	movw	r6, #8
 101a486:	f240 0508 	movw	r5, #8
 101a48a:	f2c0 1607 	movt	r6, #263	; 0x107
 101a48e:	f2c0 1507 	movt	r5, #263	; 0x107
 101a492:	1b76      	subs	r6, r6, r5
 101a494:	10b6      	asrs	r6, r6, #2
 101a496:	d006      	beq.n	101a4a6 <__libc_init_array+0x26>
 101a498:	2400      	movs	r4, #0
 101a49a:	3401      	adds	r4, #1
 101a49c:	f855 3b04 	ldr.w	r3, [r5], #4
 101a4a0:	4798      	blx	r3
 101a4a2:	42a6      	cmp	r6, r4
 101a4a4:	d1f9      	bne.n	101a49a <__libc_init_array+0x1a>
 101a4a6:	f240 060c 	movw	r6, #12
 101a4aa:	f240 0508 	movw	r5, #8
 101a4ae:	f2c0 1607 	movt	r6, #263	; 0x107
 101a4b2:	f2c0 1507 	movt	r5, #263	; 0x107
 101a4b6:	1b76      	subs	r6, r6, r5
 101a4b8:	f00b fcb2 	bl	1025e20 <_init>
 101a4bc:	10b6      	asrs	r6, r6, #2
 101a4be:	d006      	beq.n	101a4ce <__libc_init_array+0x4e>
 101a4c0:	2400      	movs	r4, #0
 101a4c2:	3401      	adds	r4, #1
 101a4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 101a4c8:	4798      	blx	r3
 101a4ca:	42a6      	cmp	r6, r4
 101a4cc:	d1f9      	bne.n	101a4c2 <__libc_init_array+0x42>
 101a4ce:	bd70      	pop	{r4, r5, r6, pc}

0101a4d0 <currentlocale>:
 101a4d0:	4919      	ldr	r1, [pc, #100]	; (101a538 <currentlocale+0x68>)
 101a4d2:	f240 004c 	movw	r0, #76	; 0x4c
 101a4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 101a4d8:	f2c0 1007 	movt	r0, #263	; 0x107
 101a4dc:	f101 0520 	add.w	r5, r1, #32
 101a4e0:	f002 fc3c 	bl	101cd5c <strcpy>
 101a4e4:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 101a4e8:	f1a5 0720 	sub.w	r7, r5, #32
 101a4ec:	462c      	mov	r4, r5
 101a4ee:	4621      	mov	r1, r4
 101a4f0:	4638      	mov	r0, r7
 101a4f2:	f002 fac9 	bl	101ca88 <strcmp>
 101a4f6:	3420      	adds	r4, #32
 101a4f8:	b930      	cbnz	r0, 101a508 <currentlocale+0x38>
 101a4fa:	42b4      	cmp	r4, r6
 101a4fc:	d1f7      	bne.n	101a4ee <currentlocale+0x1e>
 101a4fe:	f240 004c 	movw	r0, #76	; 0x4c
 101a502:	f2c0 1007 	movt	r0, #263	; 0x107
 101a506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101a508:	f24a 3724 	movw	r7, #41764	; 0xa324
 101a50c:	f240 044c 	movw	r4, #76	; 0x4c
 101a510:	f2c0 1706 	movt	r7, #262	; 0x106
 101a514:	f2c0 1407 	movt	r4, #263	; 0x107
 101a518:	4639      	mov	r1, r7
 101a51a:	4620      	mov	r0, r4
 101a51c:	f002 fa18 	bl	101c950 <strcat>
 101a520:	4629      	mov	r1, r5
 101a522:	4620      	mov	r0, r4
 101a524:	3520      	adds	r5, #32
 101a526:	f002 fa13 	bl	101c950 <strcat>
 101a52a:	42b5      	cmp	r5, r6
 101a52c:	d1f4      	bne.n	101a518 <currentlocale+0x48>
 101a52e:	f240 004c 	movw	r0, #76	; 0x4c
 101a532:	f2c0 1007 	movt	r0, #263	; 0x107
 101a536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101a538:	0106ad98 	.word	0x0106ad98

0101a53c <__loadlocale>:
 101a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101a540:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 101a544:	b08d      	sub	sp, #52	; 0x34
 101a546:	460f      	mov	r7, r1
 101a548:	4606      	mov	r6, r0
 101a54a:	4629      	mov	r1, r5
 101a54c:	4610      	mov	r0, r2
 101a54e:	4614      	mov	r4, r2
 101a550:	f002 fa9a 	bl	101ca88 <strcmp>
 101a554:	b918      	cbnz	r0, 101a55e <__loadlocale+0x22>
 101a556:	4628      	mov	r0, r5
 101a558:	b00d      	add	sp, #52	; 0x34
 101a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101a55e:	f24a 3128 	movw	r1, #41768	; 0xa328
 101a562:	4620      	mov	r0, r4
 101a564:	f2c0 1106 	movt	r1, #262	; 0x106
 101a568:	f002 fa8e 	bl	101ca88 <strcmp>
 101a56c:	2800      	cmp	r0, #0
 101a56e:	f000 809f 	beq.w	101a6b0 <__loadlocale+0x174>
 101a572:	f24a 3130 	movw	r1, #41776	; 0xa330
 101a576:	4620      	mov	r0, r4
 101a578:	f2c0 1106 	movt	r1, #262	; 0x106
 101a57c:	f002 fa84 	bl	101ca88 <strcmp>
 101a580:	4680      	mov	r8, r0
 101a582:	2800      	cmp	r0, #0
 101a584:	f000 808a 	beq.w	101a69c <__loadlocale+0x160>
 101a588:	7823      	ldrb	r3, [r4, #0]
 101a58a:	2b43      	cmp	r3, #67	; 0x43
 101a58c:	f000 8098 	beq.w	101a6c0 <__loadlocale+0x184>
 101a590:	3b61      	subs	r3, #97	; 0x61
 101a592:	2b19      	cmp	r3, #25
 101a594:	d87d      	bhi.n	101a692 <__loadlocale+0x156>
 101a596:	7863      	ldrb	r3, [r4, #1]
 101a598:	3b61      	subs	r3, #97	; 0x61
 101a59a:	2b19      	cmp	r3, #25
 101a59c:	d879      	bhi.n	101a692 <__loadlocale+0x156>
 101a59e:	78a3      	ldrb	r3, [r4, #2]
 101a5a0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 101a5a4:	2a19      	cmp	r2, #25
 101a5a6:	bf8e      	itee	hi
 101a5a8:	f104 0802 	addhi.w	r8, r4, #2
 101a5ac:	f104 0803 	addls.w	r8, r4, #3
 101a5b0:	78e3      	ldrbls	r3, [r4, #3]
 101a5b2:	2b5f      	cmp	r3, #95	; 0x5f
 101a5b4:	f000 80a0 	beq.w	101a6f8 <__loadlocale+0x1bc>
 101a5b8:	2b2e      	cmp	r3, #46	; 0x2e
 101a5ba:	f000 827c 	beq.w	101aab6 <__loadlocale+0x57a>
 101a5be:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 101a5c2:	d166      	bne.n	101a692 <__loadlocale+0x156>
 101a5c4:	f10d 0910 	add.w	r9, sp, #16
 101a5c8:	f24a 313c 	movw	r1, #41788	; 0xa33c
 101a5cc:	f2c0 1106 	movt	r1, #262	; 0x106
 101a5d0:	4648      	mov	r0, r9
 101a5d2:	f002 fbc3 	bl	101cd5c <strcpy>
 101a5d6:	f898 3000 	ldrb.w	r3, [r8]
 101a5da:	2b40      	cmp	r3, #64	; 0x40
 101a5dc:	f000 828a 	beq.w	101aaf4 <__loadlocale+0x5b8>
 101a5e0:	f04f 0800 	mov.w	r8, #0
 101a5e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 101a5e8:	3b41      	subs	r3, #65	; 0x41
 101a5ea:	2b34      	cmp	r3, #52	; 0x34
 101a5ec:	d851      	bhi.n	101a692 <__loadlocale+0x156>
 101a5ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 101a5f2:	019c      	.short	0x019c
 101a5f4:	016f0050 	.word	0x016f0050
 101a5f8:	01d10050 	.word	0x01d10050
 101a5fc:	01ae0050 	.word	0x01ae0050
 101a600:	01fd0050 	.word	0x01fd0050
 101a604:	01330154 	.word	0x01330154
 101a608:	00500050 	.word	0x00500050
 101a60c:	00500050 	.word	0x00500050
 101a610:	00500121 	.word	0x00500121
 101a614:	01060050 	.word	0x01060050
 101a618:	009200c6 	.word	0x009200c6
 101a61c:	00500050 	.word	0x00500050
 101a620:	00500050 	.word	0x00500050
 101a624:	00500050 	.word	0x00500050
 101a628:	00500050 	.word	0x00500050
 101a62c:	00500050 	.word	0x00500050
 101a630:	019c0050 	.word	0x019c0050
 101a634:	016f0050 	.word	0x016f0050
 101a638:	01d10050 	.word	0x01d10050
 101a63c:	01ae0050 	.word	0x01ae0050
 101a640:	01fd0050 	.word	0x01fd0050
 101a644:	01330154 	.word	0x01330154
 101a648:	00500050 	.word	0x00500050
 101a64c:	00500050 	.word	0x00500050
 101a650:	00500121 	.word	0x00500121
 101a654:	01060050 	.word	0x01060050
 101a658:	009200c6 	.word	0x009200c6
 101a65c:	f5b0 7f56 	cmp.w	r0, #856	; 0x358
 101a660:	f300 80af 	bgt.w	101a7c2 <__loadlocale+0x286>
 101a664:	f240 3307 	movw	r3, #775	; 0x307
 101a668:	4298      	cmp	r0, r3
 101a66a:	f000 80aa 	beq.w	101a7c2 <__loadlocale+0x286>
 101a66e:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
 101a672:	f280 826a 	bge.w	101ab4a <__loadlocale+0x60e>
 101a676:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 101a67a:	f000 80a2 	beq.w	101a7c2 <__loadlocale+0x286>
 101a67e:	f240 23e1 	movw	r3, #737	; 0x2e1
 101a682:	4298      	cmp	r0, r3
 101a684:	f000 809d 	beq.w	101a7c2 <__loadlocale+0x286>
 101a688:	f240 13b5 	movw	r3, #437	; 0x1b5
 101a68c:	4298      	cmp	r0, r3
 101a68e:	f000 8098 	beq.w	101a7c2 <__loadlocale+0x286>
 101a692:	2500      	movs	r5, #0
 101a694:	4628      	mov	r0, r5
 101a696:	b00d      	add	sp, #52	; 0x34
 101a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101a69c:	f10d 0910 	add.w	r9, sp, #16
 101a6a0:	f24a 3134 	movw	r1, #41780	; 0xa334
 101a6a4:	f2c0 1106 	movt	r1, #262	; 0x106
 101a6a8:	4648      	mov	r0, r9
 101a6aa:	f002 fb57 	bl	101cd5c <strcpy>
 101a6ae:	e799      	b.n	101a5e4 <__loadlocale+0xa8>
 101a6b0:	f24a 3130 	movw	r1, #41776	; 0xa330
 101a6b4:	4620      	mov	r0, r4
 101a6b6:	f2c0 1106 	movt	r1, #262	; 0x106
 101a6ba:	f002 fb4f 	bl	101cd5c <strcpy>
 101a6be:	e758      	b.n	101a572 <__loadlocale+0x36>
 101a6c0:	7863      	ldrb	r3, [r4, #1]
 101a6c2:	3b2d      	subs	r3, #45	; 0x2d
 101a6c4:	2b01      	cmp	r3, #1
 101a6c6:	d8e4      	bhi.n	101a692 <__loadlocale+0x156>
 101a6c8:	f104 0802 	add.w	r8, r4, #2
 101a6cc:	f10d 0910 	add.w	r9, sp, #16
 101a6d0:	4641      	mov	r1, r8
 101a6d2:	4648      	mov	r0, r9
 101a6d4:	f002 fb42 	bl	101cd5c <strcpy>
 101a6d8:	4648      	mov	r0, r9
 101a6da:	2140      	movs	r1, #64	; 0x40
 101a6dc:	f002 f958 	bl	101c990 <strchr>
 101a6e0:	b108      	cbz	r0, 101a6e6 <__loadlocale+0x1aa>
 101a6e2:	2300      	movs	r3, #0
 101a6e4:	7003      	strb	r3, [r0, #0]
 101a6e6:	4648      	mov	r0, r9
 101a6e8:	f002 fbca 	bl	101ce80 <strlen>
 101a6ec:	4480      	add	r8, r0
 101a6ee:	f1b8 0f00 	cmp.w	r8, #0
 101a6f2:	f43f af75 	beq.w	101a5e0 <__loadlocale+0xa4>
 101a6f6:	e76e      	b.n	101a5d6 <__loadlocale+0x9a>
 101a6f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 101a6fc:	3b41      	subs	r3, #65	; 0x41
 101a6fe:	2b19      	cmp	r3, #25
 101a700:	d8c7      	bhi.n	101a692 <__loadlocale+0x156>
 101a702:	f898 3002 	ldrb.w	r3, [r8, #2]
 101a706:	3b41      	subs	r3, #65	; 0x41
 101a708:	2b19      	cmp	r3, #25
 101a70a:	d8c2      	bhi.n	101a692 <__loadlocale+0x156>
 101a70c:	f898 3003 	ldrb.w	r3, [r8, #3]
 101a710:	f108 0803 	add.w	r8, r8, #3
 101a714:	e750      	b.n	101a5b8 <__loadlocale+0x7c>
 101a716:	f24a 3154 	movw	r1, #41812	; 0xa354
 101a71a:	4648      	mov	r0, r9
 101a71c:	f2c0 1106 	movt	r1, #262	; 0x106
 101a720:	f002 f8f4 	bl	101c90c <strcasecmp>
 101a724:	b140      	cbz	r0, 101a738 <__loadlocale+0x1fc>
 101a726:	f24a 315c 	movw	r1, #41820	; 0xa35c
 101a72a:	4648      	mov	r0, r9
 101a72c:	f2c0 1106 	movt	r1, #262	; 0x106
 101a730:	f002 f8ec 	bl	101c90c <strcasecmp>
 101a734:	2800      	cmp	r0, #0
 101a736:	d1ac      	bne.n	101a692 <__loadlocale+0x156>
 101a738:	f24a 3154 	movw	r1, #41812	; 0xa354
 101a73c:	4648      	mov	r0, r9
 101a73e:	f2c0 1106 	movt	r1, #262	; 0x106
 101a742:	f24b 5a89 	movw	sl, #46473	; 0xb589
 101a746:	f640 3ba5 	movw	fp, #2981	; 0xba5
 101a74a:	f2c0 1a01 	movt	sl, #257	; 0x101
 101a74e:	f2c0 1b02 	movt	fp, #258	; 0x102
 101a752:	f002 fb03 	bl	101cd5c <strcpy>
 101a756:	2306      	movs	r3, #6
 101a758:	2f02      	cmp	r7, #2
 101a75a:	f000 81af 	beq.w	101aabc <__loadlocale+0x580>
 101a75e:	2f06      	cmp	r7, #6
 101a760:	d104      	bne.n	101a76c <__loadlocale+0x230>
 101a762:	4649      	mov	r1, r9
 101a764:	f506 70a5 	add.w	r0, r6, #330	; 0x14a
 101a768:	f002 faf8 	bl	101cd5c <strcpy>
 101a76c:	4621      	mov	r1, r4
 101a76e:	4628      	mov	r0, r5
 101a770:	f002 faf4 	bl	101cd5c <strcpy>
 101a774:	4605      	mov	r5, r0
 101a776:	4628      	mov	r0, r5
 101a778:	b00d      	add	sp, #52	; 0x34
 101a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101a77e:	f24a 31dc 	movw	r1, #41948	; 0xa3dc
 101a782:	2203      	movs	r2, #3
 101a784:	f2c0 1106 	movt	r1, #262	; 0x106
 101a788:	4648      	mov	r0, r9
 101a78a:	f002 fbe7 	bl	101cf5c <strncasecmp>
 101a78e:	2800      	cmp	r0, #0
 101a790:	f47f af7f 	bne.w	101a692 <__loadlocale+0x156>
 101a794:	f89d 3013 	ldrb.w	r3, [sp, #19]
 101a798:	f24a 31e0 	movw	r1, #41952	; 0xa3e0
 101a79c:	f2c0 1106 	movt	r1, #262	; 0x106
 101a7a0:	2b2d      	cmp	r3, #45	; 0x2d
 101a7a2:	bf0c      	ite	eq
 101a7a4:	a805      	addeq	r0, sp, #20
 101a7a6:	f10d 0013 	addne.w	r0, sp, #19
 101a7aa:	f002 f8af 	bl	101c90c <strcasecmp>
 101a7ae:	2800      	cmp	r0, #0
 101a7b0:	f47f af6f 	bne.w	101a692 <__loadlocale+0x156>
 101a7b4:	f24a 31e4 	movw	r1, #41956	; 0xa3e4
 101a7b8:	4648      	mov	r0, r9
 101a7ba:	f2c0 1106 	movt	r1, #262	; 0x106
 101a7be:	f002 facd 	bl	101cd5c <strcpy>
 101a7c2:	2f02      	cmp	r7, #2
 101a7c4:	d1cb      	bne.n	101a75e <__loadlocale+0x222>
 101a7c6:	4649      	mov	r1, r9
 101a7c8:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 101a7cc:	f002 fac6 	bl	101cd5c <strcpy>
 101a7d0:	4630      	mov	r0, r6
 101a7d2:	4649      	mov	r1, r9
 101a7d4:	f640 328d 	movw	r2, #2957	; 0xb8d
 101a7d8:	f24b 5365 	movw	r3, #46437	; 0xb565
 101a7dc:	f2c0 1202 	movt	r2, #258	; 0x102
 101a7e0:	f2c0 1301 	movt	r3, #257	; 0x101
 101a7e4:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 101a7e8:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 101a7ec:	2201      	movs	r2, #1
 101a7ee:	f886 2128 	strb.w	r2, [r6, #296]	; 0x128
 101a7f2:	f006 fb9f 	bl	1020f34 <__set_ctype>
 101a7f6:	2000      	movs	r0, #0
 101a7f8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
 101a7fc:	e7b6      	b.n	101a76c <__loadlocale+0x230>
 101a7fe:	f24a 3178 	movw	r1, #41848	; 0xa378
 101a802:	4648      	mov	r0, r9
 101a804:	f2c0 1106 	movt	r1, #262	; 0x106
 101a808:	f002 f880 	bl	101c90c <strcasecmp>
 101a80c:	2800      	cmp	r0, #0
 101a80e:	f47f af40 	bne.w	101a692 <__loadlocale+0x156>
 101a812:	f24a 3178 	movw	r1, #41848	; 0xa378
 101a816:	4648      	mov	r0, r9
 101a818:	f2c0 1106 	movt	r1, #262	; 0x106
 101a81c:	f24b 7a91 	movw	sl, #46993	; 0xb791
 101a820:	f002 fa9c 	bl	101cd5c <strcpy>
 101a824:	f640 4b49 	movw	fp, #3145	; 0xc49
 101a828:	f2c0 1a01 	movt	sl, #257	; 0x101
 101a82c:	2302      	movs	r3, #2
 101a82e:	f2c0 1b02 	movt	fp, #258	; 0x102
 101a832:	e791      	b.n	101a758 <__loadlocale+0x21c>
 101a834:	f24a 31cc 	movw	r1, #41932	; 0xa3cc
 101a838:	4648      	mov	r0, r9
 101a83a:	f2c0 1106 	movt	r1, #262	; 0x106
 101a83e:	f002 f865 	bl	101c90c <strcasecmp>
 101a842:	2800      	cmp	r0, #0
 101a844:	f47f af25 	bne.w	101a692 <__loadlocale+0x156>
 101a848:	f24a 31d4 	movw	r1, #41940	; 0xa3d4
 101a84c:	4648      	mov	r0, r9
 101a84e:	f2c0 1106 	movt	r1, #262	; 0x106
 101a852:	f002 fa83 	bl	101cd5c <strcpy>
 101a856:	e7b4      	b.n	101a7c2 <__loadlocale+0x286>
 101a858:	f24a 319c 	movw	r1, #41884	; 0xa39c
 101a85c:	2204      	movs	r2, #4
 101a85e:	f2c0 1106 	movt	r1, #262	; 0x106
 101a862:	4648      	mov	r0, r9
 101a864:	f002 fb7a 	bl	101cf5c <strncasecmp>
 101a868:	2800      	cmp	r0, #0
 101a86a:	f47f af12 	bne.w	101a692 <__loadlocale+0x156>
 101a86e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 101a872:	2b2d      	cmp	r3, #45	; 0x2d
 101a874:	bf08      	it	eq
 101a876:	f89d 3015 	ldrbeq.w	r3, [sp, #21]
 101a87a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 101a87e:	2b52      	cmp	r3, #82	; 0x52
 101a880:	f000 8172 	beq.w	101ab68 <__loadlocale+0x62c>
 101a884:	2b55      	cmp	r3, #85	; 0x55
 101a886:	f47f af04 	bne.w	101a692 <__loadlocale+0x156>
 101a88a:	f24a 31ac 	movw	r1, #41900	; 0xa3ac
 101a88e:	4648      	mov	r0, r9
 101a890:	f2c0 1106 	movt	r1, #262	; 0x106
 101a894:	f002 fa62 	bl	101cd5c <strcpy>
 101a898:	e793      	b.n	101a7c2 <__loadlocale+0x286>
 101a89a:	f24a 3164 	movw	r1, #41828	; 0xa364
 101a89e:	4648      	mov	r0, r9
 101a8a0:	f2c0 1106 	movt	r1, #262	; 0x106
 101a8a4:	f002 f832 	bl	101c90c <strcasecmp>
 101a8a8:	2800      	cmp	r0, #0
 101a8aa:	f47f aef2 	bne.w	101a692 <__loadlocale+0x156>
 101a8ae:	f24a 3164 	movw	r1, #41828	; 0xa364
 101a8b2:	4648      	mov	r0, r9
 101a8b4:	f2c0 1106 	movt	r1, #262	; 0x106
 101a8b8:	f64b 0acd 	movw	sl, #47309	; 0xb8cd
 101a8bc:	f002 fa4e 	bl	101cd5c <strcpy>
 101a8c0:	f640 5b0d 	movw	fp, #3341	; 0xd0d
 101a8c4:	f2c0 1a01 	movt	sl, #257	; 0x101
 101a8c8:	2308      	movs	r3, #8
 101a8ca:	f2c0 1b02 	movt	fp, #258	; 0x102
 101a8ce:	e743      	b.n	101a758 <__loadlocale+0x21c>
 101a8d0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 101a8d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 101a8d8:	2b50      	cmp	r3, #80	; 0x50
 101a8da:	f47f aeda 	bne.w	101a692 <__loadlocale+0x156>
 101a8de:	2202      	movs	r2, #2
 101a8e0:	f24a 3198 	movw	r1, #41880	; 0xa398
 101a8e4:	4648      	mov	r0, r9
 101a8e6:	f2c0 1106 	movt	r1, #262	; 0x106
 101a8ea:	f002 fbb7 	bl	101d05c <strncpy>
 101a8ee:	220a      	movs	r2, #10
 101a8f0:	a903      	add	r1, sp, #12
 101a8f2:	f10d 0012 	add.w	r0, sp, #18
 101a8f6:	f002 fca5 	bl	101d244 <strtol>
 101a8fa:	9b03      	ldr	r3, [sp, #12]
 101a8fc:	781b      	ldrb	r3, [r3, #0]
 101a8fe:	2b00      	cmp	r3, #0
 101a900:	f47f aec7 	bne.w	101a692 <__loadlocale+0x156>
 101a904:	f240 335a 	movw	r3, #858	; 0x35a
 101a908:	4298      	cmp	r0, r3
 101a90a:	f77f aea7 	ble.w	101a65c <__loadlocale+0x120>
 101a90e:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
 101a912:	f040 80fc 	bne.w	101ab0e <__loadlocale+0x5d2>
 101a916:	f24b 7a91 	movw	sl, #46993	; 0xb791
 101a91a:	f640 4b49 	movw	fp, #3145	; 0xc49
 101a91e:	f2c0 1a01 	movt	sl, #257	; 0x101
 101a922:	f2c0 1b02 	movt	fp, #258	; 0x102
 101a926:	2302      	movs	r3, #2
 101a928:	e716      	b.n	101a758 <__loadlocale+0x21c>
 101a92a:	f24a 3134 	movw	r1, #41780	; 0xa334
 101a92e:	4648      	mov	r0, r9
 101a930:	f2c0 1106 	movt	r1, #262	; 0x106
 101a934:	f001 ffea 	bl	101c90c <strcasecmp>
 101a938:	2800      	cmp	r0, #0
 101a93a:	f47f aeaa 	bne.w	101a692 <__loadlocale+0x156>
 101a93e:	f24a 3134 	movw	r1, #41780	; 0xa334
 101a942:	4648      	mov	r0, r9
 101a944:	f2c0 1106 	movt	r1, #262	; 0x106
 101a948:	f002 fa08 	bl	101cd5c <strcpy>
 101a94c:	e739      	b.n	101a7c2 <__loadlocale+0x286>
 101a94e:	f24a 31b4 	movw	r1, #41908	; 0xa3b4
 101a952:	2208      	movs	r2, #8
 101a954:	f2c0 1106 	movt	r1, #262	; 0x106
 101a958:	4648      	mov	r0, r9
 101a95a:	f002 faff 	bl	101cf5c <strncasecmp>
 101a95e:	2800      	cmp	r0, #0
 101a960:	f47f ae97 	bne.w	101a692 <__loadlocale+0x156>
 101a964:	f89d 3018 	ldrb.w	r3, [sp, #24]
 101a968:	f24a 31c0 	movw	r1, #41920	; 0xa3c0
 101a96c:	f2c0 1106 	movt	r1, #262	; 0x106
 101a970:	2b2d      	cmp	r3, #45	; 0x2d
 101a972:	bf0c      	ite	eq
 101a974:	f10d 0019 	addeq.w	r0, sp, #25
 101a978:	a806      	addne	r0, sp, #24
 101a97a:	f001 ffc7 	bl	101c90c <strcasecmp>
 101a97e:	2800      	cmp	r0, #0
 101a980:	f47f ae87 	bne.w	101a692 <__loadlocale+0x156>
 101a984:	f24a 31c4 	movw	r1, #41924	; 0xa3c4
 101a988:	4648      	mov	r0, r9
 101a98a:	f2c0 1106 	movt	r1, #262	; 0x106
 101a98e:	f002 f9e5 	bl	101cd5c <strcpy>
 101a992:	e716      	b.n	101a7c2 <__loadlocale+0x286>
 101a994:	f24a 3168 	movw	r1, #41832	; 0xa368
 101a998:	2203      	movs	r2, #3
 101a99a:	f2c0 1106 	movt	r1, #262	; 0x106
 101a99e:	4648      	mov	r0, r9
 101a9a0:	f002 fadc 	bl	101cf5c <strncasecmp>
 101a9a4:	2800      	cmp	r0, #0
 101a9a6:	f47f ae74 	bne.w	101a692 <__loadlocale+0x156>
 101a9aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 101a9ae:	f24a 316c 	movw	r1, #41836	; 0xa36c
 101a9b2:	f2c0 1106 	movt	r1, #262	; 0x106
 101a9b6:	2b2d      	cmp	r3, #45	; 0x2d
 101a9b8:	bf0c      	ite	eq
 101a9ba:	a805      	addeq	r0, sp, #20
 101a9bc:	f10d 0013 	addne.w	r0, sp, #19
 101a9c0:	f001 ffa4 	bl	101c90c <strcasecmp>
 101a9c4:	2800      	cmp	r0, #0
 101a9c6:	f47f ae64 	bne.w	101a692 <__loadlocale+0x156>
 101a9ca:	f24a 3170 	movw	r1, #41840	; 0xa370
 101a9ce:	4648      	mov	r0, r9
 101a9d0:	f2c0 1106 	movt	r1, #262	; 0x106
 101a9d4:	f64b 0a15 	movw	sl, #47125	; 0xb815
 101a9d8:	f002 f9c0 	bl	101cd5c <strcpy>
 101a9dc:	f640 4b9d 	movw	fp, #3229	; 0xc9d
 101a9e0:	f2c0 1a01 	movt	sl, #257	; 0x101
 101a9e4:	2303      	movs	r3, #3
 101a9e6:	f2c0 1b02 	movt	fp, #258	; 0x102
 101a9ea:	e6b5      	b.n	101a758 <__loadlocale+0x21c>
 101a9ec:	f24a 3180 	movw	r1, #41856	; 0xa380
 101a9f0:	2203      	movs	r2, #3
 101a9f2:	f2c0 1106 	movt	r1, #262	; 0x106
 101a9f6:	4648      	mov	r0, r9
 101a9f8:	f002 fab0 	bl	101cf5c <strncasecmp>
 101a9fc:	2800      	cmp	r0, #0
 101a9fe:	f47f ae48 	bne.w	101a692 <__loadlocale+0x156>
 101aa02:	f89d 3013 	ldrb.w	r3, [sp, #19]
 101aa06:	f24a 3184 	movw	r1, #41860	; 0xa384
 101aa0a:	2204      	movs	r2, #4
 101aa0c:	f2c0 1106 	movt	r1, #262	; 0x106
 101aa10:	2b2d      	cmp	r3, #45	; 0x2d
 101aa12:	bf0c      	ite	eq
 101aa14:	f10d 0814 	addeq.w	r8, sp, #20
 101aa18:	f10d 0813 	addne.w	r8, sp, #19
 101aa1c:	4640      	mov	r0, r8
 101aa1e:	f002 fa9d 	bl	101cf5c <strncasecmp>
 101aa22:	2800      	cmp	r0, #0
 101aa24:	f47f ae35 	bne.w	101a692 <__loadlocale+0x156>
 101aa28:	f898 3004 	ldrb.w	r3, [r8, #4]
 101aa2c:	220a      	movs	r2, #10
 101aa2e:	a903      	add	r1, sp, #12
 101aa30:	2b2d      	cmp	r3, #45	; 0x2d
 101aa32:	bf14      	ite	ne
 101aa34:	f108 0004 	addne.w	r0, r8, #4
 101aa38:	f108 0005 	addeq.w	r0, r8, #5
 101aa3c:	f002 fc02 	bl	101d244 <strtol>
 101aa40:	f1a0 030c 	sub.w	r3, r0, #12
 101aa44:	1e42      	subs	r2, r0, #1
 101aa46:	fab3 f383 	clz	r3, r3
 101aa4a:	4680      	mov	r8, r0
 101aa4c:	095b      	lsrs	r3, r3, #5
 101aa4e:	2a0f      	cmp	r2, #15
 101aa50:	bf88      	it	hi
 101aa52:	f043 0301 	orrhi.w	r3, r3, #1
 101aa56:	2b00      	cmp	r3, #0
 101aa58:	f47f ae1b 	bne.w	101a692 <__loadlocale+0x156>
 101aa5c:	9b03      	ldr	r3, [sp, #12]
 101aa5e:	781b      	ldrb	r3, [r3, #0]
 101aa60:	2b00      	cmp	r3, #0
 101aa62:	f47f ae16 	bne.w	101a692 <__loadlocale+0x156>
 101aa66:	f24a 318c 	movw	r1, #41868	; 0xa38c
 101aa6a:	4648      	mov	r0, r9
 101aa6c:	f2c0 1106 	movt	r1, #262	; 0x106
 101aa70:	f002 f974 	bl	101cd5c <strcpy>
 101aa74:	f246 6267 	movw	r2, #26215	; 0x6667
 101aa78:	f2c6 6266 	movt	r2, #26214	; 0x6666
 101aa7c:	f1b8 0f0a 	cmp.w	r8, #10
 101aa80:	f04f 000a 	mov.w	r0, #10
 101aa84:	bfc8      	it	gt
 101aa86:	f10d 011a 	addgt.w	r1, sp, #26
 101aa8a:	fb82 c208 	smull	ip, r2, r2, r8
 101aa8e:	bfcc      	ite	gt
 101aa90:	2331      	movgt	r3, #49	; 0x31
 101aa92:	f10d 0119 	addle.w	r1, sp, #25
 101aa96:	f04f 0c00 	mov.w	ip, #0
 101aa9a:	bfc8      	it	gt
 101aa9c:	f88d 3019 	strbgt.w	r3, [sp, #25]
 101aaa0:	ea4f 73e8 	mov.w	r3, r8, asr #31
 101aaa4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 101aaa8:	f881 c001 	strb.w	ip, [r1, #1]
 101aaac:	fb00 8313 	mls	r3, r0, r3, r8
 101aab0:	3330      	adds	r3, #48	; 0x30
 101aab2:	700b      	strb	r3, [r1, #0]
 101aab4:	e685      	b.n	101a7c2 <__loadlocale+0x286>
 101aab6:	f108 0801 	add.w	r8, r8, #1
 101aaba:	e607      	b.n	101a6cc <__loadlocale+0x190>
 101aabc:	4649      	mov	r1, r9
 101aabe:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 101aac2:	9301      	str	r3, [sp, #4]
 101aac4:	f002 f94a 	bl	101cd5c <strcpy>
 101aac8:	9b01      	ldr	r3, [sp, #4]
 101aaca:	4649      	mov	r1, r9
 101aacc:	f8c6 b0e0 	str.w	fp, [r6, #224]	; 0xe0
 101aad0:	4630      	mov	r0, r6
 101aad2:	f8c6 a0e4 	str.w	sl, [r6, #228]	; 0xe4
 101aad6:	f088 0801 	eor.w	r8, r8, #1
 101aada:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
 101aade:	f006 fa29 	bl	1020f34 <__set_ctype>
 101aae2:	f018 0801 	ands.w	r8, r8, #1
 101aae6:	d067      	beq.n	101abb8 <__loadlocale+0x67c>
 101aae8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 101aaec:	2b55      	cmp	r3, #85	; 0x55
 101aaee:	d043      	beq.n	101ab78 <__loadlocale+0x63c>
 101aaf0:	2001      	movs	r0, #1
 101aaf2:	e681      	b.n	101a7f8 <__loadlocale+0x2bc>
 101aaf4:	f108 0001 	add.w	r0, r8, #1
 101aaf8:	f24a 3148 	movw	r1, #41800	; 0xa348
 101aafc:	f2c0 1106 	movt	r1, #262	; 0x106
 101ab00:	f001 ffc2 	bl	101ca88 <strcmp>
 101ab04:	fab0 f880 	clz	r8, r0
 101ab08:	ea4f 1858 	mov.w	r8, r8, lsr #5
 101ab0c:	e56a      	b.n	101a5e4 <__loadlocale+0xa8>
 101ab0e:	dc0f      	bgt.n	101ab30 <__loadlocale+0x5f4>
 101ab10:	f240 3362 	movw	r3, #866	; 0x362
 101ab14:	4298      	cmp	r0, r3
 101ab16:	f43f ae54 	beq.w	101a7c2 <__loadlocale+0x286>
 101ab1a:	f240 336a 	movw	r3, #874	; 0x36a
 101ab1e:	4298      	cmp	r0, r3
 101ab20:	f43f ae4f 	beq.w	101a7c2 <__loadlocale+0x286>
 101ab24:	f240 335e 	movw	r3, #862	; 0x35e
 101ab28:	4298      	cmp	r0, r3
 101ab2a:	f47f adb2 	bne.w	101a692 <__loadlocale+0x156>
 101ab2e:	e648      	b.n	101a7c2 <__loadlocale+0x286>
 101ab30:	f240 4365 	movw	r3, #1125	; 0x465
 101ab34:	4298      	cmp	r0, r3
 101ab36:	f43f ae44 	beq.w	101a7c2 <__loadlocale+0x286>
 101ab3a:	f6ff adaa 	blt.w	101a692 <__loadlocale+0x156>
 101ab3e:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
 101ab42:	2808      	cmp	r0, #8
 101ab44:	f63f ada5 	bhi.w	101a692 <__loadlocale+0x156>
 101ab48:	e63b      	b.n	101a7c2 <__loadlocale+0x286>
 101ab4a:	f5b0 7f55 	cmp.w	r0, #852	; 0x354
 101ab4e:	f43f ae38 	beq.w	101a7c2 <__loadlocale+0x286>
 101ab52:	f240 3357 	movw	r3, #855	; 0x357
 101ab56:	4298      	cmp	r0, r3
 101ab58:	f43f ae33 	beq.w	101a7c2 <__loadlocale+0x286>
 101ab5c:	f240 3352 	movw	r3, #850	; 0x352
 101ab60:	4298      	cmp	r0, r3
 101ab62:	f47f ad96 	bne.w	101a692 <__loadlocale+0x156>
 101ab66:	e62c      	b.n	101a7c2 <__loadlocale+0x286>
 101ab68:	f24a 31a4 	movw	r1, #41892	; 0xa3a4
 101ab6c:	4648      	mov	r0, r9
 101ab6e:	f2c0 1106 	movt	r1, #262	; 0x106
 101ab72:	f002 f8f3 	bl	101cd5c <strcpy>
 101ab76:	e624      	b.n	101a7c2 <__loadlocale+0x286>
 101ab78:	f24a 31ec 	movw	r1, #41964	; 0xa3ec
 101ab7c:	463a      	mov	r2, r7
 101ab7e:	f2c0 1106 	movt	r1, #262	; 0x106
 101ab82:	4620      	mov	r0, r4
 101ab84:	f002 fa18 	bl	101cfb8 <strncmp>
 101ab88:	2800      	cmp	r0, #0
 101ab8a:	d0b1      	beq.n	101aaf0 <__loadlocale+0x5b4>
 101ab8c:	f24a 31f0 	movw	r1, #41968	; 0xa3f0
 101ab90:	463a      	mov	r2, r7
 101ab92:	f2c0 1106 	movt	r1, #262	; 0x106
 101ab96:	4620      	mov	r0, r4
 101ab98:	f002 fa0e 	bl	101cfb8 <strncmp>
 101ab9c:	2800      	cmp	r0, #0
 101ab9e:	d0a7      	beq.n	101aaf0 <__loadlocale+0x5b4>
 101aba0:	463a      	mov	r2, r7
 101aba2:	f24a 31f4 	movw	r1, #41972	; 0xa3f4
 101aba6:	4620      	mov	r0, r4
 101aba8:	f2c0 1106 	movt	r1, #262	; 0x106
 101abac:	f002 fa04 	bl	101cfb8 <strncmp>
 101abb0:	fab0 f080 	clz	r0, r0
 101abb4:	0940      	lsrs	r0, r0, #5
 101abb6:	e61f      	b.n	101a7f8 <__loadlocale+0x2bc>
 101abb8:	4640      	mov	r0, r8
 101abba:	e61d      	b.n	101a7f8 <__loadlocale+0x2bc>

0101abbc <__get_locale_env>:
 101abbc:	b538      	push	{r3, r4, r5, lr}
 101abbe:	460d      	mov	r5, r1
 101abc0:	f24a 31f8 	movw	r1, #41976	; 0xa3f8
 101abc4:	f2c0 1106 	movt	r1, #262	; 0x106
 101abc8:	4604      	mov	r4, r0
 101abca:	f007 fe37 	bl	102283c <_getenv_r>
 101abce:	b108      	cbz	r0, 101abd4 <__get_locale_env+0x18>
 101abd0:	7803      	ldrb	r3, [r0, #0]
 101abd2:	b9a3      	cbnz	r3, 101abfe <__get_locale_env+0x42>
 101abd4:	f246 13d0 	movw	r3, #25040	; 0x61d0
 101abd8:	f2c0 1306 	movt	r3, #262	; 0x106
 101abdc:	4620      	mov	r0, r4
 101abde:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 101abe2:	f007 fe2b 	bl	102283c <_getenv_r>
 101abe6:	b108      	cbz	r0, 101abec <__get_locale_env+0x30>
 101abe8:	7803      	ldrb	r3, [r0, #0]
 101abea:	b943      	cbnz	r3, 101abfe <__get_locale_env+0x42>
 101abec:	f24a 4100 	movw	r1, #41984	; 0xa400
 101abf0:	4620      	mov	r0, r4
 101abf2:	f2c0 1106 	movt	r1, #262	; 0x106
 101abf6:	f007 fe21 	bl	102283c <_getenv_r>
 101abfa:	b908      	cbnz	r0, 101ac00 <__get_locale_env+0x44>
 101abfc:	4803      	ldr	r0, [pc, #12]	; (101ac0c <__get_locale_env+0x50>)
 101abfe:	bd38      	pop	{r3, r4, r5, pc}
 101ac00:	7802      	ldrb	r2, [r0, #0]
 101ac02:	4b02      	ldr	r3, [pc, #8]	; (101ac0c <__get_locale_env+0x50>)
 101ac04:	2a00      	cmp	r2, #0
 101ac06:	bf08      	it	eq
 101ac08:	4618      	moveq	r0, r3
 101ac0a:	bd38      	pop	{r3, r4, r5, pc}
 101ac0c:	0106aee4 	.word	0x0106aee4

0101ac10 <_setlocale_r>:
 101ac10:	2906      	cmp	r1, #6
 101ac12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101ac16:	4681      	mov	r9, r0
 101ac18:	b083      	sub	sp, #12
 101ac1a:	d868      	bhi.n	101acee <_setlocale_r+0xde>
 101ac1c:	468b      	mov	fp, r1
 101ac1e:	4692      	mov	sl, r2
 101ac20:	2a00      	cmp	r2, #0
 101ac22:	f000 80a3 	beq.w	101ad6c <_setlocale_r+0x15c>
 101ac26:	f8df 8228 	ldr.w	r8, [pc, #552]	; 101ae50 <_setlocale_r+0x240>
 101ac2a:	4e86      	ldr	r6, [pc, #536]	; (101ae44 <_setlocale_r+0x234>)
 101ac2c:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
 101ac30:	4644      	mov	r4, r8
 101ac32:	4635      	mov	r5, r6
 101ac34:	4629      	mov	r1, r5
 101ac36:	4620      	mov	r0, r4
 101ac38:	3420      	adds	r4, #32
 101ac3a:	f002 f88f 	bl	101cd5c <strcpy>
 101ac3e:	42bc      	cmp	r4, r7
 101ac40:	f105 0520 	add.w	r5, r5, #32
 101ac44:	d1f6      	bne.n	101ac34 <_setlocale_r+0x24>
 101ac46:	f89a 3000 	ldrb.w	r3, [sl]
 101ac4a:	bbb3      	cbnz	r3, 101acba <_setlocale_r+0xaa>
 101ac4c:	f1bb 0f00 	cmp.w	fp, #0
 101ac50:	f040 8098 	bne.w	101ad84 <_setlocale_r+0x174>
 101ac54:	4645      	mov	r5, r8
 101ac56:	2401      	movs	r4, #1
 101ac58:	4621      	mov	r1, r4
 101ac5a:	4648      	mov	r0, r9
 101ac5c:	f7ff ffae 	bl	101abbc <__get_locale_env>
 101ac60:	3401      	adds	r4, #1
 101ac62:	4607      	mov	r7, r0
 101ac64:	f002 f90c 	bl	101ce80 <strlen>
 101ac68:	4639      	mov	r1, r7
 101ac6a:	281f      	cmp	r0, #31
 101ac6c:	4628      	mov	r0, r5
 101ac6e:	f105 0520 	add.w	r5, r5, #32
 101ac72:	d83c      	bhi.n	101acee <_setlocale_r+0xde>
 101ac74:	f002 f872 	bl	101cd5c <strcpy>
 101ac78:	2c07      	cmp	r4, #7
 101ac7a:	d1ed      	bne.n	101ac58 <_setlocale_r+0x48>
 101ac7c:	4f72      	ldr	r7, [pc, #456]	; (101ae48 <_setlocale_r+0x238>)
 101ac7e:	f64a 5a78 	movw	sl, #44408	; 0xad78
 101ac82:	f2c0 1a06 	movt	sl, #262	; 0x106
 101ac86:	4645      	mov	r5, r8
 101ac88:	2401      	movs	r4, #1
 101ac8a:	46bb      	mov	fp, r7
 101ac8c:	4631      	mov	r1, r6
 101ac8e:	4658      	mov	r0, fp
 101ac90:	f002 f864 	bl	101cd5c <strcpy>
 101ac94:	462a      	mov	r2, r5
 101ac96:	4621      	mov	r1, r4
 101ac98:	4650      	mov	r0, sl
 101ac9a:	f7ff fc4f 	bl	101a53c <__loadlocale>
 101ac9e:	f10b 0b20 	add.w	fp, fp, #32
 101aca2:	3620      	adds	r6, #32
 101aca4:	3520      	adds	r5, #32
 101aca6:	4603      	mov	r3, r0
 101aca8:	2800      	cmp	r0, #0
 101acaa:	d07c      	beq.n	101ada6 <_setlocale_r+0x196>
 101acac:	3401      	adds	r4, #1
 101acae:	2c07      	cmp	r4, #7
 101acb0:	d1ec      	bne.n	101ac8c <_setlocale_r+0x7c>
 101acb2:	b003      	add	sp, #12
 101acb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101acb8:	e40a      	b.n	101a4d0 <currentlocale>
 101acba:	f1bb 0f00 	cmp.w	fp, #0
 101acbe:	d01e      	beq.n	101acfe <_setlocale_r+0xee>
 101acc0:	4650      	mov	r0, sl
 101acc2:	f002 f8dd 	bl	101ce80 <strlen>
 101acc6:	281f      	cmp	r0, #31
 101acc8:	d811      	bhi.n	101acee <_setlocale_r+0xde>
 101acca:	4c60      	ldr	r4, [pc, #384]	; (101ae4c <_setlocale_r+0x23c>)
 101accc:	4651      	mov	r1, sl
 101acce:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 101acd2:	4620      	mov	r0, r4
 101acd4:	f002 f842 	bl	101cd5c <strcpy>
 101acd8:	4622      	mov	r2, r4
 101acda:	4659      	mov	r1, fp
 101acdc:	f64a 5078 	movw	r0, #44408	; 0xad78
 101ace0:	f2c0 1006 	movt	r0, #262	; 0x106
 101ace4:	b003      	add	sp, #12
 101ace6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101acea:	f7ff bc27 	b.w	101a53c <__loadlocale>
 101acee:	2300      	movs	r3, #0
 101acf0:	2216      	movs	r2, #22
 101acf2:	f8c9 2000 	str.w	r2, [r9]
 101acf6:	4618      	mov	r0, r3
 101acf8:	b003      	add	sp, #12
 101acfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101acfe:	212f      	movs	r1, #47	; 0x2f
 101ad00:	4650      	mov	r0, sl
 101ad02:	f001 fe45 	bl	101c990 <strchr>
 101ad06:	4604      	mov	r4, r0
 101ad08:	2800      	cmp	r0, #0
 101ad0a:	f000 808b 	beq.w	101ae24 <_setlocale_r+0x214>
 101ad0e:	7842      	ldrb	r2, [r0, #1]
 101ad10:	2a2f      	cmp	r2, #47	; 0x2f
 101ad12:	bf08      	it	eq
 101ad14:	1c43      	addeq	r3, r0, #1
 101ad16:	d104      	bne.n	101ad22 <_setlocale_r+0x112>
 101ad18:	461c      	mov	r4, r3
 101ad1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 101ad1e:	2a2f      	cmp	r2, #47	; 0x2f
 101ad20:	d0fa      	beq.n	101ad18 <_setlocale_r+0x108>
 101ad22:	2a00      	cmp	r2, #0
 101ad24:	d0e3      	beq.n	101acee <_setlocale_r+0xde>
 101ad26:	46c3      	mov	fp, r8
 101ad28:	2501      	movs	r5, #1
 101ad2a:	eba4 020a 	sub.w	r2, r4, sl
 101ad2e:	2a1f      	cmp	r2, #31
 101ad30:	dcdd      	bgt.n	101acee <_setlocale_r+0xde>
 101ad32:	3201      	adds	r2, #1
 101ad34:	4651      	mov	r1, sl
 101ad36:	4658      	mov	r0, fp
 101ad38:	3501      	adds	r5, #1
 101ad3a:	f002 f871 	bl	101ce20 <strlcpy>
 101ad3e:	7823      	ldrb	r3, [r4, #0]
 101ad40:	2b2f      	cmp	r3, #47	; 0x2f
 101ad42:	d103      	bne.n	101ad4c <_setlocale_r+0x13c>
 101ad44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 101ad48:	2b2f      	cmp	r3, #47	; 0x2f
 101ad4a:	d0fb      	beq.n	101ad44 <_setlocale_r+0x134>
 101ad4c:	2b00      	cmp	r3, #0
 101ad4e:	d059      	beq.n	101ae04 <_setlocale_r+0x1f4>
 101ad50:	4622      	mov	r2, r4
 101ad52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 101ad56:	2b00      	cmp	r3, #0
 101ad58:	bf18      	it	ne
 101ad5a:	2b2f      	cmpne	r3, #47	; 0x2f
 101ad5c:	d1f9      	bne.n	101ad52 <_setlocale_r+0x142>
 101ad5e:	2d07      	cmp	r5, #7
 101ad60:	f10b 0b20 	add.w	fp, fp, #32
 101ad64:	46a2      	mov	sl, r4
 101ad66:	d089      	beq.n	101ac7c <_setlocale_r+0x6c>
 101ad68:	4614      	mov	r4, r2
 101ad6a:	e7de      	b.n	101ad2a <_setlocale_r+0x11a>
 101ad6c:	2900      	cmp	r1, #0
 101ad6e:	d0a0      	beq.n	101acb2 <_setlocale_r+0xa2>
 101ad70:	f64a 5378 	movw	r3, #44408	; 0xad78
 101ad74:	f2c0 1306 	movt	r3, #262	; 0x106
 101ad78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 101ad7c:	4618      	mov	r0, r3
 101ad7e:	b003      	add	sp, #12
 101ad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101ad84:	4659      	mov	r1, fp
 101ad86:	4648      	mov	r0, r9
 101ad88:	f7ff ff18 	bl	101abbc <__get_locale_env>
 101ad8c:	4605      	mov	r5, r0
 101ad8e:	f002 f877 	bl	101ce80 <strlen>
 101ad92:	281f      	cmp	r0, #31
 101ad94:	d8ab      	bhi.n	101acee <_setlocale_r+0xde>
 101ad96:	4c2d      	ldr	r4, [pc, #180]	; (101ae4c <_setlocale_r+0x23c>)
 101ad98:	4629      	mov	r1, r5
 101ad9a:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 101ad9e:	4620      	mov	r0, r4
 101ada0:	f001 ffdc 	bl	101cd5c <strcpy>
 101ada4:	e798      	b.n	101acd8 <_setlocale_r+0xc8>
 101ada6:	2c01      	cmp	r4, #1
 101ada8:	f8d9 b000 	ldr.w	fp, [r9]
 101adac:	d027      	beq.n	101adfe <_setlocale_r+0x1ee>
 101adae:	f64a 5678 	movw	r6, #44408	; 0xad78
 101adb2:	f24a 3a30 	movw	sl, #41776	; 0xa330
 101adb6:	f2c0 1606 	movt	r6, #262	; 0x106
 101adba:	f2c0 1a06 	movt	sl, #262	; 0x106
 101adbe:	2501      	movs	r5, #1
 101adc0:	e004      	b.n	101adcc <_setlocale_r+0x1bc>
 101adc2:	3501      	adds	r5, #1
 101adc4:	f108 0820 	add.w	r8, r8, #32
 101adc8:	42a5      	cmp	r5, r4
 101adca:	d018      	beq.n	101adfe <_setlocale_r+0x1ee>
 101adcc:	4639      	mov	r1, r7
 101adce:	4640      	mov	r0, r8
 101add0:	9301      	str	r3, [sp, #4]
 101add2:	f001 ffc3 	bl	101cd5c <strcpy>
 101add6:	4642      	mov	r2, r8
 101add8:	4629      	mov	r1, r5
 101adda:	4630      	mov	r0, r6
 101addc:	3720      	adds	r7, #32
 101adde:	f7ff fbad 	bl	101a53c <__loadlocale>
 101ade2:	9b01      	ldr	r3, [sp, #4]
 101ade4:	2800      	cmp	r0, #0
 101ade6:	d1ec      	bne.n	101adc2 <_setlocale_r+0x1b2>
 101ade8:	4651      	mov	r1, sl
 101adea:	4640      	mov	r0, r8
 101adec:	f001 ffb6 	bl	101cd5c <strcpy>
 101adf0:	4642      	mov	r2, r8
 101adf2:	4629      	mov	r1, r5
 101adf4:	4630      	mov	r0, r6
 101adf6:	f7ff fba1 	bl	101a53c <__loadlocale>
 101adfa:	9b01      	ldr	r3, [sp, #4]
 101adfc:	e7e1      	b.n	101adc2 <_setlocale_r+0x1b2>
 101adfe:	f8c9 b000 	str.w	fp, [r9]
 101ae02:	e778      	b.n	101acf6 <_setlocale_r+0xe6>
 101ae04:	2d07      	cmp	r5, #7
 101ae06:	bf1c      	itt	ne
 101ae08:	4b10      	ldrne	r3, [pc, #64]	; (101ae4c <_setlocale_r+0x23c>)
 101ae0a:	eb03 1545 	addne.w	r5, r3, r5, lsl #5
 101ae0e:	f43f af35 	beq.w	101ac7c <_setlocale_r+0x6c>
 101ae12:	f1a5 0120 	sub.w	r1, r5, #32
 101ae16:	4628      	mov	r0, r5
 101ae18:	3520      	adds	r5, #32
 101ae1a:	f001 ff9f 	bl	101cd5c <strcpy>
 101ae1e:	42bd      	cmp	r5, r7
 101ae20:	d1f7      	bne.n	101ae12 <_setlocale_r+0x202>
 101ae22:	e72b      	b.n	101ac7c <_setlocale_r+0x6c>
 101ae24:	4650      	mov	r0, sl
 101ae26:	f002 f82b 	bl	101ce80 <strlen>
 101ae2a:	281f      	cmp	r0, #31
 101ae2c:	f63f af5f 	bhi.w	101acee <_setlocale_r+0xde>
 101ae30:	4644      	mov	r4, r8
 101ae32:	4620      	mov	r0, r4
 101ae34:	4651      	mov	r1, sl
 101ae36:	3420      	adds	r4, #32
 101ae38:	f001 ff90 	bl	101cd5c <strcpy>
 101ae3c:	42bc      	cmp	r4, r7
 101ae3e:	d1f8      	bne.n	101ae32 <_setlocale_r+0x222>
 101ae40:	e71c      	b.n	101ac7c <_setlocale_r+0x6c>
 101ae42:	bf00      	nop
 101ae44:	0106ad98 	.word	0x0106ad98
 101ae48:	01070234 	.word	0x01070234
 101ae4c:	01070134 	.word	0x01070134
 101ae50:	01070154 	.word	0x01070154

0101ae54 <__locale_mb_cur_max>:
 101ae54:	f64a 1348 	movw	r3, #43336	; 0xa948
 101ae58:	f2c0 1306 	movt	r3, #262	; 0x106
 101ae5c:	f64a 5278 	movw	r2, #44408	; 0xad78
 101ae60:	f2c0 1206 	movt	r2, #262	; 0x106
 101ae64:	681b      	ldr	r3, [r3, #0]
 101ae66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101ae68:	2b00      	cmp	r3, #0
 101ae6a:	bf08      	it	eq
 101ae6c:	4613      	moveq	r3, r2
 101ae6e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 101ae72:	4770      	bx	lr

0101ae74 <__locale_ctype_ptr_l>:
 101ae74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 101ae78:	4770      	bx	lr
 101ae7a:	bf00      	nop

0101ae7c <__locale_ctype_ptr>:
 101ae7c:	f64a 1348 	movw	r3, #43336	; 0xa948
 101ae80:	f2c0 1306 	movt	r3, #262	; 0x106
 101ae84:	f64a 5278 	movw	r2, #44408	; 0xad78
 101ae88:	f2c0 1206 	movt	r2, #262	; 0x106
 101ae8c:	681b      	ldr	r3, [r3, #0]
 101ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101ae90:	2b00      	cmp	r3, #0
 101ae92:	bf08      	it	eq
 101ae94:	4613      	moveq	r3, r2
 101ae96:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 101ae9a:	4770      	bx	lr

0101ae9c <setlocale>:
 101ae9c:	f64a 1348 	movw	r3, #43336	; 0xa948
 101aea0:	f2c0 1306 	movt	r3, #262	; 0x106
 101aea4:	460a      	mov	r2, r1
 101aea6:	4601      	mov	r1, r0
 101aea8:	6818      	ldr	r0, [r3, #0]
 101aeaa:	f7ff beb1 	b.w	101ac10 <_setlocale_r>
 101aeae:	bf00      	nop

0101aeb0 <memalign>:
 101aeb0:	f64a 1348 	movw	r3, #43336	; 0xa948
 101aeb4:	f2c0 1306 	movt	r3, #262	; 0x106
 101aeb8:	460a      	mov	r2, r1
 101aeba:	4601      	mov	r1, r0
 101aebc:	6818      	ldr	r0, [r3, #0]
 101aebe:	f000 b801 	b.w	101aec4 <_memalign_r>
 101aec2:	bf00      	nop

0101aec4 <_memalign_r>:
 101aec4:	2908      	cmp	r1, #8
 101aec6:	d962      	bls.n	101af8e <_memalign_r+0xca>
 101aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101aecc:	f102 050b 	add.w	r5, r2, #11
 101aed0:	2d16      	cmp	r5, #22
 101aed2:	4607      	mov	r7, r0
 101aed4:	bf8d      	iteet	hi
 101aed6:	f025 0507 	bichi.w	r5, r5, #7
 101aeda:	2300      	movls	r3, #0
 101aedc:	2510      	movls	r5, #16
 101aede:	0feb      	lsrhi	r3, r5, #31
 101aee0:	4295      	cmp	r5, r2
 101aee2:	bf2c      	ite	cs
 101aee4:	461a      	movcs	r2, r3
 101aee6:	f043 0201 	orrcc.w	r2, r3, #1
 101aeea:	2a00      	cmp	r2, #0
 101aeec:	d149      	bne.n	101af82 <_memalign_r+0xbe>
 101aeee:	2910      	cmp	r1, #16
 101aef0:	bf38      	it	cc
 101aef2:	2110      	movcc	r1, #16
 101aef4:	460c      	mov	r4, r1
 101aef6:	3110      	adds	r1, #16
 101aef8:	4429      	add	r1, r5
 101aefa:	f000 f86d 	bl	101afd8 <_malloc_r>
 101aefe:	4606      	mov	r6, r0
 101af00:	b3e0      	cbz	r0, 101af7c <_memalign_r+0xb8>
 101af02:	4638      	mov	r0, r7
 101af04:	f1a6 0808 	sub.w	r8, r6, #8
 101af08:	f001 f922 	bl	101c150 <__malloc_lock>
 101af0c:	4621      	mov	r1, r4
 101af0e:	4630      	mov	r0, r6
 101af10:	f7fe fd28 	bl	1019964 <__aeabi_uidivmod>
 101af14:	b341      	cbz	r1, 101af68 <_memalign_r+0xa4>
 101af16:	1e63      	subs	r3, r4, #1
 101af18:	4261      	negs	r1, r4
 101af1a:	4433      	add	r3, r6
 101af1c:	4638      	mov	r0, r7
 101af1e:	4019      	ands	r1, r3
 101af20:	f856 3c04 	ldr.w	r3, [r6, #-4]
 101af24:	3908      	subs	r1, #8
 101af26:	eba1 0208 	sub.w	r2, r1, r8
 101af2a:	f023 0303 	bic.w	r3, r3, #3
 101af2e:	2a0f      	cmp	r2, #15
 101af30:	bfdc      	itt	le
 101af32:	1909      	addle	r1, r1, r4
 101af34:	eba1 0208 	suble.w	r2, r1, r8
 101af38:	1a9b      	subs	r3, r3, r2
 101af3a:	4688      	mov	r8, r1
 101af3c:	eb08 0403 	add.w	r4, r8, r3
 101af40:	f043 0301 	orr.w	r3, r3, #1
 101af44:	f8c8 3004 	str.w	r3, [r8, #4]
 101af48:	4631      	mov	r1, r6
 101af4a:	6863      	ldr	r3, [r4, #4]
 101af4c:	f043 0301 	orr.w	r3, r3, #1
 101af50:	6063      	str	r3, [r4, #4]
 101af52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 101af56:	f003 0301 	and.w	r3, r3, #1
 101af5a:	431a      	orrs	r2, r3
 101af5c:	f846 2c04 	str.w	r2, [r6, #-4]
 101af60:	f007 f94e 	bl	1022200 <_free_r>
 101af64:	f108 0608 	add.w	r6, r8, #8
 101af68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 101af6c:	f023 0303 	bic.w	r3, r3, #3
 101af70:	1b5b      	subs	r3, r3, r5
 101af72:	2b0f      	cmp	r3, #15
 101af74:	dc0e      	bgt.n	101af94 <_memalign_r+0xd0>
 101af76:	4638      	mov	r0, r7
 101af78:	f001 f8ec 	bl	101c154 <__malloc_unlock>
 101af7c:	4630      	mov	r0, r6
 101af7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101af82:	2600      	movs	r6, #0
 101af84:	230c      	movs	r3, #12
 101af86:	6003      	str	r3, [r0, #0]
 101af88:	4630      	mov	r0, r6
 101af8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101af8e:	4611      	mov	r1, r2
 101af90:	f000 b822 	b.w	101afd8 <_malloc_r>
 101af94:	eb08 0205 	add.w	r2, r8, r5
 101af98:	f043 0301 	orr.w	r3, r3, #1
 101af9c:	f102 0108 	add.w	r1, r2, #8
 101afa0:	4638      	mov	r0, r7
 101afa2:	6053      	str	r3, [r2, #4]
 101afa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 101afa8:	f003 0301 	and.w	r3, r3, #1
 101afac:	431d      	orrs	r5, r3
 101afae:	f8c8 5004 	str.w	r5, [r8, #4]
 101afb2:	f007 f925 	bl	1022200 <_free_r>
 101afb6:	e7de      	b.n	101af76 <_memalign_r+0xb2>

0101afb8 <malloc>:
 101afb8:	f64a 1348 	movw	r3, #43336	; 0xa948
 101afbc:	f2c0 1306 	movt	r3, #262	; 0x106
 101afc0:	4601      	mov	r1, r0
 101afc2:	6818      	ldr	r0, [r3, #0]
 101afc4:	f000 b808 	b.w	101afd8 <_malloc_r>

0101afc8 <free>:
 101afc8:	f64a 1348 	movw	r3, #43336	; 0xa948
 101afcc:	f2c0 1306 	movt	r3, #262	; 0x106
 101afd0:	4601      	mov	r1, r0
 101afd2:	6818      	ldr	r0, [r3, #0]
 101afd4:	f007 b914 	b.w	1022200 <_free_r>

0101afd8 <_malloc_r>:
 101afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101afdc:	f101 050b 	add.w	r5, r1, #11
 101afe0:	2d16      	cmp	r5, #22
 101afe2:	b083      	sub	sp, #12
 101afe4:	4607      	mov	r7, r0
 101afe6:	d82c      	bhi.n	101b042 <_malloc_r+0x6a>
 101afe8:	2910      	cmp	r1, #16
 101afea:	d823      	bhi.n	101b034 <_malloc_r+0x5c>
 101afec:	f001 f8b0 	bl	101c150 <__malloc_lock>
 101aff0:	2510      	movs	r5, #16
 101aff2:	2002      	movs	r0, #2
 101aff4:	2318      	movs	r3, #24
 101aff6:	f64a 7604 	movw	r6, #44804	; 0xaf04
 101affa:	f2c0 1606 	movt	r6, #262	; 0x106
 101affe:	4433      	add	r3, r6
 101b000:	f1a3 0108 	sub.w	r1, r3, #8
 101b004:	685a      	ldr	r2, [r3, #4]
 101b006:	428a      	cmp	r2, r1
 101b008:	d04f      	beq.n	101b0aa <_malloc_r+0xd2>
 101b00a:	6853      	ldr	r3, [r2, #4]
 101b00c:	f102 0408 	add.w	r4, r2, #8
 101b010:	68d1      	ldr	r1, [r2, #12]
 101b012:	4638      	mov	r0, r7
 101b014:	f023 0303 	bic.w	r3, r3, #3
 101b018:	6895      	ldr	r5, [r2, #8]
 101b01a:	441a      	add	r2, r3
 101b01c:	6853      	ldr	r3, [r2, #4]
 101b01e:	60e9      	str	r1, [r5, #12]
 101b020:	f043 0301 	orr.w	r3, r3, #1
 101b024:	608d      	str	r5, [r1, #8]
 101b026:	6053      	str	r3, [r2, #4]
 101b028:	f001 f894 	bl	101c154 <__malloc_unlock>
 101b02c:	4620      	mov	r0, r4
 101b02e:	b003      	add	sp, #12
 101b030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b034:	2400      	movs	r4, #0
 101b036:	230c      	movs	r3, #12
 101b038:	4620      	mov	r0, r4
 101b03a:	603b      	str	r3, [r7, #0]
 101b03c:	b003      	add	sp, #12
 101b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b042:	f025 0507 	bic.w	r5, r5, #7
 101b046:	42a9      	cmp	r1, r5
 101b048:	bf94      	ite	ls
 101b04a:	2100      	movls	r1, #0
 101b04c:	2101      	movhi	r1, #1
 101b04e:	ea51 73d5 	orrs.w	r3, r1, r5, lsr #31
 101b052:	d1ef      	bne.n	101b034 <_malloc_r+0x5c>
 101b054:	f001 f87c 	bl	101c150 <__malloc_lock>
 101b058:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 101b05c:	f0c0 81c5 	bcc.w	101b3ea <_malloc_r+0x412>
 101b060:	0a6b      	lsrs	r3, r5, #9
 101b062:	f000 8111 	beq.w	101b288 <_malloc_r+0x2b0>
 101b066:	2b04      	cmp	r3, #4
 101b068:	f200 819b 	bhi.w	101b3a2 <_malloc_r+0x3ca>
 101b06c:	09ab      	lsrs	r3, r5, #6
 101b06e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 101b072:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 101b076:	00c3      	lsls	r3, r0, #3
 101b078:	f64a 7604 	movw	r6, #44804	; 0xaf04
 101b07c:	f2c0 1606 	movt	r6, #262	; 0x106
 101b080:	4433      	add	r3, r6
 101b082:	f1a3 0408 	sub.w	r4, r3, #8
 101b086:	685b      	ldr	r3, [r3, #4]
 101b088:	429c      	cmp	r4, r3
 101b08a:	d106      	bne.n	101b09a <_malloc_r+0xc2>
 101b08c:	e012      	b.n	101b0b4 <_malloc_r+0xdc>
 101b08e:	2900      	cmp	r1, #0
 101b090:	f280 8155 	bge.w	101b33e <_malloc_r+0x366>
 101b094:	68db      	ldr	r3, [r3, #12]
 101b096:	429c      	cmp	r4, r3
 101b098:	d00c      	beq.n	101b0b4 <_malloc_r+0xdc>
 101b09a:	685a      	ldr	r2, [r3, #4]
 101b09c:	f022 0203 	bic.w	r2, r2, #3
 101b0a0:	1b51      	subs	r1, r2, r5
 101b0a2:	290f      	cmp	r1, #15
 101b0a4:	ddf3      	ble.n	101b08e <_malloc_r+0xb6>
 101b0a6:	4660      	mov	r0, ip
 101b0a8:	e004      	b.n	101b0b4 <_malloc_r+0xdc>
 101b0aa:	68da      	ldr	r2, [r3, #12]
 101b0ac:	4293      	cmp	r3, r2
 101b0ae:	bf08      	it	eq
 101b0b0:	3002      	addeq	r0, #2
 101b0b2:	d1aa      	bne.n	101b00a <_malloc_r+0x32>
 101b0b4:	6932      	ldr	r2, [r6, #16]
 101b0b6:	f8df e480 	ldr.w	lr, [pc, #1152]	; 101b538 <_malloc_r+0x560>
 101b0ba:	4572      	cmp	r2, lr
 101b0bc:	bf08      	it	eq
 101b0be:	6871      	ldreq	r1, [r6, #4]
 101b0c0:	d029      	beq.n	101b116 <_malloc_r+0x13e>
 101b0c2:	6853      	ldr	r3, [r2, #4]
 101b0c4:	f023 0c03 	bic.w	ip, r3, #3
 101b0c8:	ebac 0305 	sub.w	r3, ip, r5
 101b0cc:	2b0f      	cmp	r3, #15
 101b0ce:	f300 8190 	bgt.w	101b3f2 <_malloc_r+0x41a>
 101b0d2:	2b00      	cmp	r3, #0
 101b0d4:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 101b0d8:	f280 8114 	bge.w	101b304 <_malloc_r+0x32c>
 101b0dc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 101b0e0:	f080 813f 	bcs.w	101b362 <_malloc_r+0x38a>
 101b0e4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 101b0e8:	2101      	movs	r1, #1
 101b0ea:	eb0c 0401 	add.w	r4, ip, r1
 101b0ee:	6873      	ldr	r3, [r6, #4]
 101b0f0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 101b0f4:	f856 9034 	ldr.w	r9, [r6, r4, lsl #3]
 101b0f8:	fa01 fc0c 	lsl.w	ip, r1, ip
 101b0fc:	eb06 08c4 	add.w	r8, r6, r4, lsl #3
 101b100:	ea4c 0103 	orr.w	r1, ip, r3
 101b104:	f1a8 0308 	sub.w	r3, r8, #8
 101b108:	6071      	str	r1, [r6, #4]
 101b10a:	e9c2 9302 	strd	r9, r3, [r2, #8]
 101b10e:	f846 2034 	str.w	r2, [r6, r4, lsl #3]
 101b112:	f8c9 200c 	str.w	r2, [r9, #12]
 101b116:	1083      	asrs	r3, r0, #2
 101b118:	2401      	movs	r4, #1
 101b11a:	409c      	lsls	r4, r3
 101b11c:	428c      	cmp	r4, r1
 101b11e:	f240 80b9 	bls.w	101b294 <_malloc_r+0x2bc>
 101b122:	68b4      	ldr	r4, [r6, #8]
 101b124:	6863      	ldr	r3, [r4, #4]
 101b126:	f023 0803 	bic.w	r8, r3, #3
 101b12a:	45a8      	cmp	r8, r5
 101b12c:	eba8 0205 	sub.w	r2, r8, r5
 101b130:	bf2c      	ite	cs
 101b132:	2300      	movcs	r3, #0
 101b134:	2301      	movcc	r3, #1
 101b136:	2a0f      	cmp	r2, #15
 101b138:	bfd8      	it	le
 101b13a:	f043 0301 	orrle.w	r3, r3, #1
 101b13e:	2b00      	cmp	r3, #0
 101b140:	f000 80ed 	beq.w	101b31e <_malloc_r+0x346>
 101b144:	f240 29f8 	movw	r9, #760	; 0x2f8
 101b148:	f2c0 1907 	movt	r9, #263	; 0x107
 101b14c:	f8d6 3408 	ldr.w	r3, [r6, #1032]	; 0x408
 101b150:	4638      	mov	r0, r7
 101b152:	f8d9 1000 	ldr.w	r1, [r9]
 101b156:	eb04 0b08 	add.w	fp, r4, r8
 101b15a:	3301      	adds	r3, #1
 101b15c:	4429      	add	r1, r5
 101b15e:	bf17      	itett	ne
 101b160:	f501 5180 	addne.w	r1, r1, #4096	; 0x1000
 101b164:	f101 0310 	addeq.w	r3, r1, #16
 101b168:	310f      	addne	r1, #15
 101b16a:	f421 637f 	bicne.w	r3, r1, #4080	; 0xff0
 101b16e:	bf18      	it	ne
 101b170:	f023 030f 	bicne.w	r3, r3, #15
 101b174:	9301      	str	r3, [sp, #4]
 101b176:	4619      	mov	r1, r3
 101b178:	f001 fb2a 	bl	101c7d0 <_sbrk_r>
 101b17c:	9b01      	ldr	r3, [sp, #4]
 101b17e:	f1b0 3fff 	cmp.w	r0, #4294967295
 101b182:	4682      	mov	sl, r0
 101b184:	f000 8181 	beq.w	101b48a <_malloc_r+0x4b2>
 101b188:	42b4      	cmp	r4, r6
 101b18a:	bf18      	it	ne
 101b18c:	4583      	cmpne	fp, r0
 101b18e:	f200 817c 	bhi.w	101b48a <_malloc_r+0x4b2>
 101b192:	f8d9 0004 	ldr.w	r0, [r9, #4]
 101b196:	45d3      	cmp	fp, sl
 101b198:	4418      	add	r0, r3
 101b19a:	f8c9 0004 	str.w	r0, [r9, #4]
 101b19e:	f000 8166 	beq.w	101b46e <_malloc_r+0x496>
 101b1a2:	f8d6 2408 	ldr.w	r2, [r6, #1032]	; 0x408
 101b1a6:	3201      	adds	r2, #1
 101b1a8:	bf0f      	iteee	eq
 101b1aa:	f8c6 a408 	streq.w	sl, [r6, #1032]	; 0x408
 101b1ae:	ebaa 0b0b 	subne.w	fp, sl, fp
 101b1b2:	4458      	addne	r0, fp
 101b1b4:	f8c9 0004 	strne.w	r0, [r9, #4]
 101b1b8:	f01a 0b07 	ands.w	fp, sl, #7
 101b1bc:	4638      	mov	r0, r7
 101b1be:	bf1f      	itttt	ne
 101b1c0:	f1cb 0208 	rsbne	r2, fp, #8
 101b1c4:	f5cb 5b80 	rsbne	fp, fp, #4096	; 0x1000
 101b1c8:	4492      	addne	sl, r2
 101b1ca:	f10b 0b08 	addne.w	fp, fp, #8
 101b1ce:	4453      	add	r3, sl
 101b1d0:	bf08      	it	eq
 101b1d2:	f44f 5b80 	moveq.w	fp, #4096	; 0x1000
 101b1d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 101b1da:	ebab 0b03 	sub.w	fp, fp, r3
 101b1de:	4659      	mov	r1, fp
 101b1e0:	f001 faf6 	bl	101c7d0 <_sbrk_r>
 101b1e4:	f8c6 a008 	str.w	sl, [r6, #8]
 101b1e8:	1c43      	adds	r3, r0, #1
 101b1ea:	bf18      	it	ne
 101b1ec:	eba0 010a 	subne.w	r1, r0, sl
 101b1f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 101b1f4:	bf15      	itete	ne
 101b1f6:	4459      	addne	r1, fp
 101b1f8:	2101      	moveq	r1, #1
 101b1fa:	f041 0101 	orrne.w	r1, r1, #1
 101b1fe:	f04f 0b00 	moveq.w	fp, #0
 101b202:	42b4      	cmp	r4, r6
 101b204:	4458      	add	r0, fp
 101b206:	f8ca 1004 	str.w	r1, [sl, #4]
 101b20a:	f8c9 0004 	str.w	r0, [r9, #4]
 101b20e:	f000 813a 	beq.w	101b486 <_malloc_r+0x4ae>
 101b212:	f1b8 0f0f 	cmp.w	r8, #15
 101b216:	bf9c      	itt	ls
 101b218:	2301      	movls	r3, #1
 101b21a:	f8ca 3004 	strls.w	r3, [sl, #4]
 101b21e:	d92e      	bls.n	101b27e <_malloc_r+0x2a6>
 101b220:	f1a8 030c 	sub.w	r3, r8, #12
 101b224:	6862      	ldr	r2, [r4, #4]
 101b226:	f023 0307 	bic.w	r3, r3, #7
 101b22a:	f04f 0c05 	mov.w	ip, #5
 101b22e:	18e1      	adds	r1, r4, r3
 101b230:	2b0f      	cmp	r3, #15
 101b232:	f002 0201 	and.w	r2, r2, #1
 101b236:	ea42 0203 	orr.w	r2, r2, r3
 101b23a:	6062      	str	r2, [r4, #4]
 101b23c:	e9c1 cc01 	strd	ip, ip, [r1, #4]
 101b240:	f200 8159 	bhi.w	101b4f6 <_malloc_r+0x51e>
 101b244:	f8da 1004 	ldr.w	r1, [sl, #4]
 101b248:	4654      	mov	r4, sl
 101b24a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 101b24e:	4283      	cmp	r3, r0
 101b250:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 101b254:	bf38      	it	cc
 101b256:	f8c9 002c 	strcc.w	r0, [r9, #44]	; 0x2c
 101b25a:	4283      	cmp	r3, r0
 101b25c:	bf38      	it	cc
 101b25e:	f8c9 0030 	strcc.w	r0, [r9, #48]	; 0x30
 101b262:	f021 0103 	bic.w	r1, r1, #3
 101b266:	1b4a      	subs	r2, r1, r5
 101b268:	2a0f      	cmp	r2, #15
 101b26a:	bfcc      	ite	gt
 101b26c:	2300      	movgt	r3, #0
 101b26e:	2301      	movle	r3, #1
 101b270:	42a9      	cmp	r1, r5
 101b272:	bf2c      	ite	cs
 101b274:	4619      	movcs	r1, r3
 101b276:	f043 0101 	orrcc.w	r1, r3, #1
 101b27a:	2900      	cmp	r1, #0
 101b27c:	d04f      	beq.n	101b31e <_malloc_r+0x346>
 101b27e:	4638      	mov	r0, r7
 101b280:	2400      	movs	r4, #0
 101b282:	f000 ff67 	bl	101c154 <__malloc_unlock>
 101b286:	e6d1      	b.n	101b02c <_malloc_r+0x54>
 101b288:	f44f 7300 	mov.w	r3, #512	; 0x200
 101b28c:	2040      	movs	r0, #64	; 0x40
 101b28e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 101b292:	e6f1      	b.n	101b078 <_malloc_r+0xa0>
 101b294:	420c      	tst	r4, r1
 101b296:	d105      	bne.n	101b2a4 <_malloc_r+0x2cc>
 101b298:	f020 0003 	bic.w	r0, r0, #3
 101b29c:	0064      	lsls	r4, r4, #1
 101b29e:	3004      	adds	r0, #4
 101b2a0:	420c      	tst	r4, r1
 101b2a2:	d0fb      	beq.n	101b29c <_malloc_r+0x2c4>
 101b2a4:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 101b2a8:	4680      	mov	r8, r0
 101b2aa:	46cc      	mov	ip, r9
 101b2ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 101b2b0:	459c      	cmp	ip, r3
 101b2b2:	d106      	bne.n	101b2c2 <_malloc_r+0x2ea>
 101b2b4:	e081      	b.n	101b3ba <_malloc_r+0x3e2>
 101b2b6:	2a00      	cmp	r2, #0
 101b2b8:	f280 8088 	bge.w	101b3cc <_malloc_r+0x3f4>
 101b2bc:	68db      	ldr	r3, [r3, #12]
 101b2be:	459c      	cmp	ip, r3
 101b2c0:	d07b      	beq.n	101b3ba <_malloc_r+0x3e2>
 101b2c2:	6859      	ldr	r1, [r3, #4]
 101b2c4:	f021 0103 	bic.w	r1, r1, #3
 101b2c8:	1b4a      	subs	r2, r1, r5
 101b2ca:	2a0f      	cmp	r2, #15
 101b2cc:	ddf3      	ble.n	101b2b6 <_malloc_r+0x2de>
 101b2ce:	68dc      	ldr	r4, [r3, #12]
 101b2d0:	eb03 0c05 	add.w	ip, r3, r5
 101b2d4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 101b2d8:	f045 0501 	orr.w	r5, r5, #1
 101b2dc:	4638      	mov	r0, r7
 101b2de:	605d      	str	r5, [r3, #4]
 101b2e0:	f042 0501 	orr.w	r5, r2, #1
 101b2e4:	f8c8 400c 	str.w	r4, [r8, #12]
 101b2e8:	f8c4 8008 	str.w	r8, [r4, #8]
 101b2ec:	f103 0408 	add.w	r4, r3, #8
 101b2f0:	e9c6 cc04 	strd	ip, ip, [r6, #16]
 101b2f4:	e9cc ee02 	strd	lr, lr, [ip, #8]
 101b2f8:	f8cc 5004 	str.w	r5, [ip, #4]
 101b2fc:	505a      	str	r2, [r3, r1]
 101b2fe:	f000 ff29 	bl	101c154 <__malloc_unlock>
 101b302:	e693      	b.n	101b02c <_malloc_r+0x54>
 101b304:	4494      	add	ip, r2
 101b306:	4638      	mov	r0, r7
 101b308:	f102 0408 	add.w	r4, r2, #8
 101b30c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 101b310:	f043 0301 	orr.w	r3, r3, #1
 101b314:	f8cc 3004 	str.w	r3, [ip, #4]
 101b318:	f000 ff1c 	bl	101c154 <__malloc_unlock>
 101b31c:	e686      	b.n	101b02c <_malloc_r+0x54>
 101b31e:	1963      	adds	r3, r4, r5
 101b320:	f042 0201 	orr.w	r2, r2, #1
 101b324:	4638      	mov	r0, r7
 101b326:	f045 0501 	orr.w	r5, r5, #1
 101b32a:	6065      	str	r5, [r4, #4]
 101b32c:	3408      	adds	r4, #8
 101b32e:	60b3      	str	r3, [r6, #8]
 101b330:	605a      	str	r2, [r3, #4]
 101b332:	f000 ff0f 	bl	101c154 <__malloc_unlock>
 101b336:	4620      	mov	r0, r4
 101b338:	b003      	add	sp, #12
 101b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b33e:	441a      	add	r2, r3
 101b340:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
 101b344:	4638      	mov	r0, r7
 101b346:	f103 0408 	add.w	r4, r3, #8
 101b34a:	6851      	ldr	r1, [r2, #4]
 101b34c:	60f5      	str	r5, [r6, #12]
 101b34e:	f041 0101 	orr.w	r1, r1, #1
 101b352:	60ae      	str	r6, [r5, #8]
 101b354:	6051      	str	r1, [r2, #4]
 101b356:	f000 fefd 	bl	101c154 <__malloc_unlock>
 101b35a:	4620      	mov	r0, r4
 101b35c:	b003      	add	sp, #12
 101b35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b362:	ea4f 215c 	mov.w	r1, ip, lsr #9
 101b366:	2904      	cmp	r1, #4
 101b368:	d956      	bls.n	101b418 <_malloc_r+0x440>
 101b36a:	2914      	cmp	r1, #20
 101b36c:	f200 809b 	bhi.w	101b4a6 <_malloc_r+0x4ce>
 101b370:	f101 035c 	add.w	r3, r1, #92	; 0x5c
 101b374:	315b      	adds	r1, #91	; 0x5b
 101b376:	00db      	lsls	r3, r3, #3
 101b378:	18f4      	adds	r4, r6, r3
 101b37a:	58f3      	ldr	r3, [r6, r3]
 101b37c:	3c08      	subs	r4, #8
 101b37e:	429c      	cmp	r4, r3
 101b380:	f000 8086 	beq.w	101b490 <_malloc_r+0x4b8>
 101b384:	6859      	ldr	r1, [r3, #4]
 101b386:	f021 0103 	bic.w	r1, r1, #3
 101b38a:	4561      	cmp	r1, ip
 101b38c:	d902      	bls.n	101b394 <_malloc_r+0x3bc>
 101b38e:	689b      	ldr	r3, [r3, #8]
 101b390:	429c      	cmp	r4, r3
 101b392:	d1f7      	bne.n	101b384 <_malloc_r+0x3ac>
 101b394:	68dc      	ldr	r4, [r3, #12]
 101b396:	6871      	ldr	r1, [r6, #4]
 101b398:	e9c2 3402 	strd	r3, r4, [r2, #8]
 101b39c:	60a2      	str	r2, [r4, #8]
 101b39e:	60da      	str	r2, [r3, #12]
 101b3a0:	e6b9      	b.n	101b116 <_malloc_r+0x13e>
 101b3a2:	2b14      	cmp	r3, #20
 101b3a4:	d93f      	bls.n	101b426 <_malloc_r+0x44e>
 101b3a6:	2b54      	cmp	r3, #84	; 0x54
 101b3a8:	f200 8086 	bhi.w	101b4b8 <_malloc_r+0x4e0>
 101b3ac:	0b2b      	lsrs	r3, r5, #12
 101b3ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 101b3b2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 101b3b6:	00c3      	lsls	r3, r0, #3
 101b3b8:	e65e      	b.n	101b078 <_malloc_r+0xa0>
 101b3ba:	f108 0801 	add.w	r8, r8, #1
 101b3be:	f10c 0c08 	add.w	ip, ip, #8
 101b3c2:	f018 0f03 	tst.w	r8, #3
 101b3c6:	f47f af71 	bne.w	101b2ac <_malloc_r+0x2d4>
 101b3ca:	e036      	b.n	101b43a <_malloc_r+0x462>
 101b3cc:	4419      	add	r1, r3
 101b3ce:	461c      	mov	r4, r3
 101b3d0:	68da      	ldr	r2, [r3, #12]
 101b3d2:	4638      	mov	r0, r7
 101b3d4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 101b3d8:	684b      	ldr	r3, [r1, #4]
 101b3da:	f043 0301 	orr.w	r3, r3, #1
 101b3de:	604b      	str	r3, [r1, #4]
 101b3e0:	60ea      	str	r2, [r5, #12]
 101b3e2:	6095      	str	r5, [r2, #8]
 101b3e4:	f000 feb6 	bl	101c154 <__malloc_unlock>
 101b3e8:	e620      	b.n	101b02c <_malloc_r+0x54>
 101b3ea:	08e8      	lsrs	r0, r5, #3
 101b3ec:	f105 0308 	add.w	r3, r5, #8
 101b3f0:	e601      	b.n	101aff6 <_malloc_r+0x1e>
 101b3f2:	1951      	adds	r1, r2, r5
 101b3f4:	4638      	mov	r0, r7
 101b3f6:	f045 0501 	orr.w	r5, r5, #1
 101b3fa:	6055      	str	r5, [r2, #4]
 101b3fc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 101b400:	f043 0501 	orr.w	r5, r3, #1
 101b404:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 101b408:	f102 0408 	add.w	r4, r2, #8
 101b40c:	604d      	str	r5, [r1, #4]
 101b40e:	f842 300c 	str.w	r3, [r2, ip]
 101b412:	f000 fe9f 	bl	101c154 <__malloc_unlock>
 101b416:	e609      	b.n	101b02c <_malloc_r+0x54>
 101b418:	ea4f 119c 	mov.w	r1, ip, lsr #6
 101b41c:	f101 0339 	add.w	r3, r1, #57	; 0x39
 101b420:	3138      	adds	r1, #56	; 0x38
 101b422:	00db      	lsls	r3, r3, #3
 101b424:	e7a8      	b.n	101b378 <_malloc_r+0x3a0>
 101b426:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 101b42a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 101b42e:	00c3      	lsls	r3, r0, #3
 101b430:	e622      	b.n	101b078 <_malloc_r+0xa0>
 101b432:	f859 3908 	ldr.w	r3, [r9], #-8
 101b436:	454b      	cmp	r3, r9
 101b438:	d17c      	bne.n	101b534 <_malloc_r+0x55c>
 101b43a:	f010 0f03 	tst.w	r0, #3
 101b43e:	f100 30ff 	add.w	r0, r0, #4294967295
 101b442:	d1f6      	bne.n	101b432 <_malloc_r+0x45a>
 101b444:	6873      	ldr	r3, [r6, #4]
 101b446:	ea23 0304 	bic.w	r3, r3, r4
 101b44a:	6073      	str	r3, [r6, #4]
 101b44c:	0064      	lsls	r4, r4, #1
 101b44e:	429c      	cmp	r4, r3
 101b450:	bf8c      	ite	hi
 101b452:	2200      	movhi	r2, #0
 101b454:	2201      	movls	r2, #1
 101b456:	2c00      	cmp	r4, #0
 101b458:	bf08      	it	eq
 101b45a:	2200      	moveq	r2, #0
 101b45c:	b91a      	cbnz	r2, 101b466 <_malloc_r+0x48e>
 101b45e:	e660      	b.n	101b122 <_malloc_r+0x14a>
 101b460:	0064      	lsls	r4, r4, #1
 101b462:	f108 0804 	add.w	r8, r8, #4
 101b466:	421c      	tst	r4, r3
 101b468:	d0fa      	beq.n	101b460 <_malloc_r+0x488>
 101b46a:	4640      	mov	r0, r8
 101b46c:	e71a      	b.n	101b2a4 <_malloc_r+0x2cc>
 101b46e:	f3cb 020b 	ubfx	r2, fp, #0, #12
 101b472:	2a00      	cmp	r2, #0
 101b474:	f47f ae95 	bne.w	101b1a2 <_malloc_r+0x1ca>
 101b478:	68b4      	ldr	r4, [r6, #8]
 101b47a:	eb08 0103 	add.w	r1, r8, r3
 101b47e:	f041 0101 	orr.w	r1, r1, #1
 101b482:	6061      	str	r1, [r4, #4]
 101b484:	e6e1      	b.n	101b24a <_malloc_r+0x272>
 101b486:	4654      	mov	r4, sl
 101b488:	e6df      	b.n	101b24a <_malloc_r+0x272>
 101b48a:	68b4      	ldr	r4, [r6, #8]
 101b48c:	6861      	ldr	r1, [r4, #4]
 101b48e:	e6e8      	b.n	101b262 <_malloc_r+0x28a>
 101b490:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 101b494:	f04f 0801 	mov.w	r8, #1
 101b498:	6871      	ldr	r1, [r6, #4]
 101b49a:	fa08 fc0c 	lsl.w	ip, r8, ip
 101b49e:	ea4c 0101 	orr.w	r1, ip, r1
 101b4a2:	6071      	str	r1, [r6, #4]
 101b4a4:	e778      	b.n	101b398 <_malloc_r+0x3c0>
 101b4a6:	2954      	cmp	r1, #84	; 0x54
 101b4a8:	d810      	bhi.n	101b4cc <_malloc_r+0x4f4>
 101b4aa:	ea4f 311c 	mov.w	r1, ip, lsr #12
 101b4ae:	f101 036f 	add.w	r3, r1, #111	; 0x6f
 101b4b2:	316e      	adds	r1, #110	; 0x6e
 101b4b4:	00db      	lsls	r3, r3, #3
 101b4b6:	e75f      	b.n	101b378 <_malloc_r+0x3a0>
 101b4b8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 101b4bc:	d810      	bhi.n	101b4e0 <_malloc_r+0x508>
 101b4be:	0beb      	lsrs	r3, r5, #15
 101b4c0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 101b4c4:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 101b4c8:	00c3      	lsls	r3, r0, #3
 101b4ca:	e5d5      	b.n	101b078 <_malloc_r+0xa0>
 101b4cc:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 101b4d0:	d81b      	bhi.n	101b50a <_malloc_r+0x532>
 101b4d2:	ea4f 31dc 	mov.w	r1, ip, lsr #15
 101b4d6:	f101 0378 	add.w	r3, r1, #120	; 0x78
 101b4da:	3177      	adds	r1, #119	; 0x77
 101b4dc:	00db      	lsls	r3, r3, #3
 101b4de:	e74b      	b.n	101b378 <_malloc_r+0x3a0>
 101b4e0:	f240 5254 	movw	r2, #1364	; 0x554
 101b4e4:	4293      	cmp	r3, r2
 101b4e6:	d81f      	bhi.n	101b528 <_malloc_r+0x550>
 101b4e8:	0cab      	lsrs	r3, r5, #18
 101b4ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 101b4ee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 101b4f2:	00c3      	lsls	r3, r0, #3
 101b4f4:	e5c0      	b.n	101b078 <_malloc_r+0xa0>
 101b4f6:	f104 0108 	add.w	r1, r4, #8
 101b4fa:	4638      	mov	r0, r7
 101b4fc:	f006 fe80 	bl	1022200 <_free_r>
 101b500:	68b4      	ldr	r4, [r6, #8]
 101b502:	f8d9 0004 	ldr.w	r0, [r9, #4]
 101b506:	6861      	ldr	r1, [r4, #4]
 101b508:	e69f      	b.n	101b24a <_malloc_r+0x272>
 101b50a:	f240 5354 	movw	r3, #1364	; 0x554
 101b50e:	4299      	cmp	r1, r3
 101b510:	bf9b      	ittet	ls
 101b512:	ea4f 419c 	movls.w	r1, ip, lsr #18
 101b516:	f101 037d 	addls.w	r3, r1, #125	; 0x7d
 101b51a:	f44f 737e 	movhi.w	r3, #1016	; 0x3f8
 101b51e:	317c      	addls	r1, #124	; 0x7c
 101b520:	bf8c      	ite	hi
 101b522:	217e      	movhi	r1, #126	; 0x7e
 101b524:	00db      	lslls	r3, r3, #3
 101b526:	e727      	b.n	101b378 <_malloc_r+0x3a0>
 101b528:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 101b52c:	207f      	movs	r0, #127	; 0x7f
 101b52e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 101b532:	e5a1      	b.n	101b078 <_malloc_r+0xa0>
 101b534:	6873      	ldr	r3, [r6, #4]
 101b536:	e789      	b.n	101b44c <_malloc_r+0x474>
 101b538:	0106af0c 	.word	0x0106af0c

0101b53c <_mbtowc_r>:
 101b53c:	b430      	push	{r4, r5}
 101b53e:	f64a 1448 	movw	r4, #43336	; 0xa948
 101b542:	f2c0 1406 	movt	r4, #262	; 0x106
 101b546:	f64a 5578 	movw	r5, #44408	; 0xad78
 101b54a:	f2c0 1506 	movt	r5, #262	; 0x106
 101b54e:	6824      	ldr	r4, [r4, #0]
 101b550:	6b64      	ldr	r4, [r4, #52]	; 0x34
 101b552:	2c00      	cmp	r4, #0
 101b554:	bf08      	it	eq
 101b556:	462c      	moveq	r4, r5
 101b558:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 101b55c:	46a4      	mov	ip, r4
 101b55e:	bc30      	pop	{r4, r5}
 101b560:	4760      	bx	ip
 101b562:	bf00      	nop

0101b564 <__ascii_mbtowc>:
 101b564:	b082      	sub	sp, #8
 101b566:	b151      	cbz	r1, 101b57e <__ascii_mbtowc+0x1a>
 101b568:	4610      	mov	r0, r2
 101b56a:	b132      	cbz	r2, 101b57a <__ascii_mbtowc+0x16>
 101b56c:	b14b      	cbz	r3, 101b582 <__ascii_mbtowc+0x1e>
 101b56e:	7813      	ldrb	r3, [r2, #0]
 101b570:	600b      	str	r3, [r1, #0]
 101b572:	7812      	ldrb	r2, [r2, #0]
 101b574:	1c10      	adds	r0, r2, #0
 101b576:	bf18      	it	ne
 101b578:	2001      	movne	r0, #1
 101b57a:	b002      	add	sp, #8
 101b57c:	4770      	bx	lr
 101b57e:	a901      	add	r1, sp, #4
 101b580:	e7f2      	b.n	101b568 <__ascii_mbtowc+0x4>
 101b582:	f06f 0001 	mvn.w	r0, #1
 101b586:	e7f8      	b.n	101b57a <__ascii_mbtowc+0x16>

0101b588 <__utf8_mbtowc>:
 101b588:	b5f0      	push	{r4, r5, r6, r7, lr}
 101b58a:	b083      	sub	sp, #12
 101b58c:	4607      	mov	r7, r0
 101b58e:	9c08      	ldr	r4, [sp, #32]
 101b590:	2900      	cmp	r1, #0
 101b592:	d035      	beq.n	101b600 <__utf8_mbtowc+0x78>
 101b594:	4610      	mov	r0, r2
 101b596:	b34a      	cbz	r2, 101b5ec <__utf8_mbtowc+0x64>
 101b598:	2b00      	cmp	r3, #0
 101b59a:	f000 80db 	beq.w	101b754 <__utf8_mbtowc+0x1cc>
 101b59e:	6826      	ldr	r6, [r4, #0]
 101b5a0:	bb36      	cbnz	r6, 101b5f0 <__utf8_mbtowc+0x68>
 101b5a2:	7810      	ldrb	r0, [r2, #0]
 101b5a4:	2501      	movs	r5, #1
 101b5a6:	b338      	cbz	r0, 101b5f8 <__utf8_mbtowc+0x70>
 101b5a8:	287f      	cmp	r0, #127	; 0x7f
 101b5aa:	dd66      	ble.n	101b67a <__utf8_mbtowc+0xf2>
 101b5ac:	f1a0 0cc0 	sub.w	ip, r0, #192	; 0xc0
 101b5b0:	f1bc 0f1f 	cmp.w	ip, #31
 101b5b4:	d826      	bhi.n	101b604 <__utf8_mbtowc+0x7c>
 101b5b6:	7120      	strb	r0, [r4, #4]
 101b5b8:	b926      	cbnz	r6, 101b5c4 <__utf8_mbtowc+0x3c>
 101b5ba:	2601      	movs	r6, #1
 101b5bc:	42b3      	cmp	r3, r6
 101b5be:	6026      	str	r6, [r4, #0]
 101b5c0:	f240 80c8 	bls.w	101b754 <__utf8_mbtowc+0x1cc>
 101b5c4:	5d52      	ldrb	r2, [r2, r5]
 101b5c6:	3501      	adds	r5, #1
 101b5c8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 101b5cc:	2b3f      	cmp	r3, #63	; 0x3f
 101b5ce:	f200 80c7 	bhi.w	101b760 <__utf8_mbtowc+0x1d8>
 101b5d2:	28c1      	cmp	r0, #193	; 0xc1
 101b5d4:	f340 80c4 	ble.w	101b760 <__utf8_mbtowc+0x1d8>
 101b5d8:	0183      	lsls	r3, r0, #6
 101b5da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 101b5de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 101b5e2:	4628      	mov	r0, r5
 101b5e4:	4313      	orrs	r3, r2
 101b5e6:	2200      	movs	r2, #0
 101b5e8:	6022      	str	r2, [r4, #0]
 101b5ea:	600b      	str	r3, [r1, #0]
 101b5ec:	b003      	add	sp, #12
 101b5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b5f0:	7920      	ldrb	r0, [r4, #4]
 101b5f2:	2500      	movs	r5, #0
 101b5f4:	2800      	cmp	r0, #0
 101b5f6:	d1d7      	bne.n	101b5a8 <__utf8_mbtowc+0x20>
 101b5f8:	6008      	str	r0, [r1, #0]
 101b5fa:	6020      	str	r0, [r4, #0]
 101b5fc:	b003      	add	sp, #12
 101b5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b600:	a901      	add	r1, sp, #4
 101b602:	e7c7      	b.n	101b594 <__utf8_mbtowc+0xc>
 101b604:	f1a0 0ce0 	sub.w	ip, r0, #224	; 0xe0
 101b608:	f1bc 0f0f 	cmp.w	ip, #15
 101b60c:	d83b      	bhi.n	101b686 <__utf8_mbtowc+0xfe>
 101b60e:	7120      	strb	r0, [r4, #4]
 101b610:	2e00      	cmp	r6, #0
 101b612:	f000 8088 	beq.w	101b726 <__utf8_mbtowc+0x19e>
 101b616:	f1b3 3fff 	cmp.w	r3, #4294967295
 101b61a:	bf18      	it	ne
 101b61c:	3301      	addne	r3, #1
 101b61e:	2e01      	cmp	r6, #1
 101b620:	bf18      	it	ne
 101b622:	f894 c005 	ldrbne.w	ip, [r4, #5]
 101b626:	f000 8082 	beq.w	101b72e <__utf8_mbtowc+0x1a6>
 101b62a:	f1bc 0f9f 	cmp.w	ip, #159	; 0x9f
 101b62e:	bfd8      	it	le
 101b630:	28e0      	cmple	r0, #224	; 0xe0
 101b632:	f000 8095 	beq.w	101b760 <__utf8_mbtowc+0x1d8>
 101b636:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 101b63a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 101b63e:	f200 808f 	bhi.w	101b760 <__utf8_mbtowc+0x1d8>
 101b642:	2e01      	cmp	r6, #1
 101b644:	f884 c005 	strb.w	ip, [r4, #5]
 101b648:	d07f      	beq.n	101b74a <__utf8_mbtowc+0x1c2>
 101b64a:	5d53      	ldrb	r3, [r2, r5]
 101b64c:	3501      	adds	r5, #1
 101b64e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 101b652:	2a3f      	cmp	r2, #63	; 0x3f
 101b654:	f200 8084 	bhi.w	101b760 <__utf8_mbtowc+0x1d8>
 101b658:	0300      	lsls	r0, r0, #12
 101b65a:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 101b65e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 101b662:	f40c 6c7c 	and.w	ip, ip, #4032	; 0xfc0
 101b666:	b283      	uxth	r3, r0
 101b668:	4628      	mov	r0, r5
 101b66a:	ea43 0c0c 	orr.w	ip, r3, ip
 101b66e:	2500      	movs	r5, #0
 101b670:	ea4c 0202 	orr.w	r2, ip, r2
 101b674:	6025      	str	r5, [r4, #0]
 101b676:	600a      	str	r2, [r1, #0]
 101b678:	e7b8      	b.n	101b5ec <__utf8_mbtowc+0x64>
 101b67a:	2300      	movs	r3, #0
 101b67c:	6023      	str	r3, [r4, #0]
 101b67e:	6008      	str	r0, [r1, #0]
 101b680:	2001      	movs	r0, #1
 101b682:	b003      	add	sp, #12
 101b684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b686:	f1a0 0cf0 	sub.w	ip, r0, #240	; 0xf0
 101b68a:	f1bc 0f04 	cmp.w	ip, #4
 101b68e:	d867      	bhi.n	101b760 <__utf8_mbtowc+0x1d8>
 101b690:	7120      	strb	r0, [r4, #4]
 101b692:	2e00      	cmp	r6, #0
 101b694:	d050      	beq.n	101b738 <__utf8_mbtowc+0x1b0>
 101b696:	f1b3 3fff 	cmp.w	r3, #4294967295
 101b69a:	bf18      	it	ne
 101b69c:	3301      	addne	r3, #1
 101b69e:	2e01      	cmp	r6, #1
 101b6a0:	bf18      	it	ne
 101b6a2:	f894 c005 	ldrbne.w	ip, [r4, #5]
 101b6a6:	d04b      	beq.n	101b740 <__utf8_mbtowc+0x1b8>
 101b6a8:	28f0      	cmp	r0, #240	; 0xf0
 101b6aa:	d056      	beq.n	101b75a <__utf8_mbtowc+0x1d2>
 101b6ac:	f1a0 0ef4 	sub.w	lr, r0, #244	; 0xf4
 101b6b0:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 101b6b4:	fabe fe8e 	clz	lr, lr
 101b6b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 101b6bc:	bfd8      	it	le
 101b6be:	f04f 0e00 	movle.w	lr, #0
 101b6c2:	f1be 0f00 	cmp.w	lr, #0
 101b6c6:	d14b      	bne.n	101b760 <__utf8_mbtowc+0x1d8>
 101b6c8:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 101b6cc:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 101b6d0:	d846      	bhi.n	101b760 <__utf8_mbtowc+0x1d8>
 101b6d2:	2e01      	cmp	r6, #1
 101b6d4:	f884 c005 	strb.w	ip, [r4, #5]
 101b6d8:	d047      	beq.n	101b76a <__utf8_mbtowc+0x1e2>
 101b6da:	1c5e      	adds	r6, r3, #1
 101b6dc:	6826      	ldr	r6, [r4, #0]
 101b6de:	bf18      	it	ne
 101b6e0:	3301      	addne	r3, #1
 101b6e2:	2e02      	cmp	r6, #2
 101b6e4:	d045      	beq.n	101b772 <__utf8_mbtowc+0x1ea>
 101b6e6:	79a6      	ldrb	r6, [r4, #6]
 101b6e8:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
 101b6ec:	2b3f      	cmp	r3, #63	; 0x3f
 101b6ee:	d837      	bhi.n	101b760 <__utf8_mbtowc+0x1d8>
 101b6f0:	5d52      	ldrb	r2, [r2, r5]
 101b6f2:	3501      	adds	r5, #1
 101b6f4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 101b6f8:	2b3f      	cmp	r3, #63	; 0x3f
 101b6fa:	d831      	bhi.n	101b760 <__utf8_mbtowc+0x1d8>
 101b6fc:	0483      	lsls	r3, r0, #18
 101b6fe:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
 101b702:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 101b706:	f40c 3c7c 	and.w	ip, ip, #258048	; 0x3f000
 101b70a:	01b0      	lsls	r0, r6, #6
 101b70c:	ea43 030c 	orr.w	r3, r3, ip
 101b710:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
 101b714:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 101b718:	4303      	orrs	r3, r0
 101b71a:	4628      	mov	r0, r5
 101b71c:	4313      	orrs	r3, r2
 101b71e:	2200      	movs	r2, #0
 101b720:	600b      	str	r3, [r1, #0]
 101b722:	6022      	str	r2, [r4, #0]
 101b724:	e762      	b.n	101b5ec <__utf8_mbtowc+0x64>
 101b726:	2601      	movs	r6, #1
 101b728:	42b3      	cmp	r3, r6
 101b72a:	6026      	str	r6, [r4, #0]
 101b72c:	d912      	bls.n	101b754 <__utf8_mbtowc+0x1cc>
 101b72e:	f812 c005 	ldrb.w	ip, [r2, r5]
 101b732:	2601      	movs	r6, #1
 101b734:	4435      	add	r5, r6
 101b736:	e778      	b.n	101b62a <__utf8_mbtowc+0xa2>
 101b738:	2601      	movs	r6, #1
 101b73a:	42b3      	cmp	r3, r6
 101b73c:	6026      	str	r6, [r4, #0]
 101b73e:	d909      	bls.n	101b754 <__utf8_mbtowc+0x1cc>
 101b740:	f812 c005 	ldrb.w	ip, [r2, r5]
 101b744:	2601      	movs	r6, #1
 101b746:	4435      	add	r5, r6
 101b748:	e7ae      	b.n	101b6a8 <__utf8_mbtowc+0x120>
 101b74a:	2602      	movs	r6, #2
 101b74c:	42b3      	cmp	r3, r6
 101b74e:	6026      	str	r6, [r4, #0]
 101b750:	f47f af7b 	bne.w	101b64a <__utf8_mbtowc+0xc2>
 101b754:	f06f 0001 	mvn.w	r0, #1
 101b758:	e748      	b.n	101b5ec <__utf8_mbtowc+0x64>
 101b75a:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 101b75e:	dcb3      	bgt.n	101b6c8 <__utf8_mbtowc+0x140>
 101b760:	238a      	movs	r3, #138	; 0x8a
 101b762:	f04f 30ff 	mov.w	r0, #4294967295
 101b766:	603b      	str	r3, [r7, #0]
 101b768:	e740      	b.n	101b5ec <__utf8_mbtowc+0x64>
 101b76a:	2602      	movs	r6, #2
 101b76c:	42b3      	cmp	r3, r6
 101b76e:	6026      	str	r6, [r4, #0]
 101b770:	d0f0      	beq.n	101b754 <__utf8_mbtowc+0x1cc>
 101b772:	5d56      	ldrb	r6, [r2, r5]
 101b774:	3501      	adds	r5, #1
 101b776:	f1a6 0e80 	sub.w	lr, r6, #128	; 0x80
 101b77a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 101b77e:	d8ef      	bhi.n	101b760 <__utf8_mbtowc+0x1d8>
 101b780:	f04f 0e03 	mov.w	lr, #3
 101b784:	4573      	cmp	r3, lr
 101b786:	71a6      	strb	r6, [r4, #6]
 101b788:	f8c4 e000 	str.w	lr, [r4]
 101b78c:	d1b0      	bne.n	101b6f0 <__utf8_mbtowc+0x168>
 101b78e:	e7e1      	b.n	101b754 <__utf8_mbtowc+0x1cc>

0101b790 <__sjis_mbtowc>:
 101b790:	b4f0      	push	{r4, r5, r6, r7}
 101b792:	b082      	sub	sp, #8
 101b794:	4606      	mov	r6, r0
 101b796:	9f06      	ldr	r7, [sp, #24]
 101b798:	2900      	cmp	r1, #0
 101b79a:	d035      	beq.n	101b808 <__sjis_mbtowc+0x78>
 101b79c:	4610      	mov	r0, r2
 101b79e:	b332      	cbz	r2, 101b7ee <__sjis_mbtowc+0x5e>
 101b7a0:	2b00      	cmp	r3, #0
 101b7a2:	d033      	beq.n	101b80c <__sjis_mbtowc+0x7c>
 101b7a4:	6838      	ldr	r0, [r7, #0]
 101b7a6:	7814      	ldrb	r4, [r2, #0]
 101b7a8:	bb20      	cbnz	r0, 101b7f4 <__sjis_mbtowc+0x64>
 101b7aa:	f1a4 0581 	sub.w	r5, r4, #129	; 0x81
 101b7ae:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
 101b7b2:	280f      	cmp	r0, #15
 101b7b4:	bf88      	it	hi
 101b7b6:	2d1e      	cmphi	r5, #30
 101b7b8:	d81e      	bhi.n	101b7f8 <__sjis_mbtowc+0x68>
 101b7ba:	2001      	movs	r0, #1
 101b7bc:	4283      	cmp	r3, r0
 101b7be:	713c      	strb	r4, [r7, #4]
 101b7c0:	6038      	str	r0, [r7, #0]
 101b7c2:	d923      	bls.n	101b80c <__sjis_mbtowc+0x7c>
 101b7c4:	7854      	ldrb	r4, [r2, #1]
 101b7c6:	2002      	movs	r0, #2
 101b7c8:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 101b7cc:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
 101b7d0:	2a7c      	cmp	r2, #124	; 0x7c
 101b7d2:	bf88      	it	hi
 101b7d4:	2b3e      	cmphi	r3, #62	; 0x3e
 101b7d6:	bf95      	itete	ls
 101b7d8:	793a      	ldrbls	r2, [r7, #4]
 101b7da:	f04f 30ff 	movhi.w	r0, #4294967295
 101b7de:	2300      	movls	r3, #0
 101b7e0:	238a      	movhi	r3, #138	; 0x8a
 101b7e2:	bf8f      	iteee	hi
 101b7e4:	6033      	strhi	r3, [r6, #0]
 101b7e6:	eb04 2402 	addls.w	r4, r4, r2, lsl #8
 101b7ea:	600c      	strls	r4, [r1, #0]
 101b7ec:	603b      	strls	r3, [r7, #0]
 101b7ee:	b002      	add	sp, #8
 101b7f0:	bcf0      	pop	{r4, r5, r6, r7}
 101b7f2:	4770      	bx	lr
 101b7f4:	2801      	cmp	r0, #1
 101b7f6:	d0e7      	beq.n	101b7c8 <__sjis_mbtowc+0x38>
 101b7f8:	600c      	str	r4, [r1, #0]
 101b7fa:	7810      	ldrb	r0, [r2, #0]
 101b7fc:	3000      	adds	r0, #0
 101b7fe:	bf18      	it	ne
 101b800:	2001      	movne	r0, #1
 101b802:	b002      	add	sp, #8
 101b804:	bcf0      	pop	{r4, r5, r6, r7}
 101b806:	4770      	bx	lr
 101b808:	a901      	add	r1, sp, #4
 101b80a:	e7c7      	b.n	101b79c <__sjis_mbtowc+0xc>
 101b80c:	f06f 0001 	mvn.w	r0, #1
 101b810:	e7ed      	b.n	101b7ee <__sjis_mbtowc+0x5e>
 101b812:	bf00      	nop

0101b814 <__eucjp_mbtowc>:
 101b814:	b4f0      	push	{r4, r5, r6, r7}
 101b816:	b082      	sub	sp, #8
 101b818:	4607      	mov	r7, r0
 101b81a:	9e06      	ldr	r6, [sp, #24]
 101b81c:	2900      	cmp	r1, #0
 101b81e:	d040      	beq.n	101b8a2 <__eucjp_mbtowc+0x8e>
 101b820:	4610      	mov	r0, r2
 101b822:	b37a      	cbz	r2, 101b884 <__eucjp_mbtowc+0x70>
 101b824:	2b00      	cmp	r3, #0
 101b826:	d048      	beq.n	101b8ba <__eucjp_mbtowc+0xa6>
 101b828:	6830      	ldr	r0, [r6, #0]
 101b82a:	7814      	ldrb	r4, [r2, #0]
 101b82c:	bb68      	cbnz	r0, 101b88a <__eucjp_mbtowc+0x76>
 101b82e:	f1a4 058e 	sub.w	r5, r4, #142	; 0x8e
 101b832:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
 101b836:	285d      	cmp	r0, #93	; 0x5d
 101b838:	bf88      	it	hi
 101b83a:	2d01      	cmphi	r5, #1
 101b83c:	d829      	bhi.n	101b892 <__eucjp_mbtowc+0x7e>
 101b83e:	2001      	movs	r0, #1
 101b840:	4283      	cmp	r3, r0
 101b842:	7134      	strb	r4, [r6, #4]
 101b844:	6030      	str	r0, [r6, #0]
 101b846:	d938      	bls.n	101b8ba <__eucjp_mbtowc+0xa6>
 101b848:	7854      	ldrb	r4, [r2, #1]
 101b84a:	2002      	movs	r0, #2
 101b84c:	f1a4 05a1 	sub.w	r5, r4, #161	; 0xa1
 101b850:	2d5d      	cmp	r5, #93	; 0x5d
 101b852:	d835      	bhi.n	101b8c0 <__eucjp_mbtowc+0xac>
 101b854:	7935      	ldrb	r5, [r6, #4]
 101b856:	2d8f      	cmp	r5, #143	; 0x8f
 101b858:	d125      	bne.n	101b8a6 <__eucjp_mbtowc+0x92>
 101b85a:	4298      	cmp	r0, r3
 101b85c:	7174      	strb	r4, [r6, #5]
 101b85e:	f04f 0402 	mov.w	r4, #2
 101b862:	6034      	str	r4, [r6, #0]
 101b864:	4604      	mov	r4, r0
 101b866:	d228      	bcs.n	101b8ba <__eucjp_mbtowc+0xa6>
 101b868:	5d14      	ldrb	r4, [r2, r4]
 101b86a:	3001      	adds	r0, #1
 101b86c:	f1a4 03a1 	sub.w	r3, r4, #161	; 0xa1
 101b870:	2b5d      	cmp	r3, #93	; 0x5d
 101b872:	d825      	bhi.n	101b8c0 <__eucjp_mbtowc+0xac>
 101b874:	7972      	ldrb	r2, [r6, #5]
 101b876:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 101b87a:	2300      	movs	r3, #0
 101b87c:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 101b880:	600c      	str	r4, [r1, #0]
 101b882:	6033      	str	r3, [r6, #0]
 101b884:	b002      	add	sp, #8
 101b886:	bcf0      	pop	{r4, r5, r6, r7}
 101b888:	4770      	bx	lr
 101b88a:	2801      	cmp	r0, #1
 101b88c:	d0de      	beq.n	101b84c <__eucjp_mbtowc+0x38>
 101b88e:	2802      	cmp	r0, #2
 101b890:	d011      	beq.n	101b8b6 <__eucjp_mbtowc+0xa2>
 101b892:	600c      	str	r4, [r1, #0]
 101b894:	7810      	ldrb	r0, [r2, #0]
 101b896:	3000      	adds	r0, #0
 101b898:	bf18      	it	ne
 101b89a:	2001      	movne	r0, #1
 101b89c:	b002      	add	sp, #8
 101b89e:	bcf0      	pop	{r4, r5, r6, r7}
 101b8a0:	4770      	bx	lr
 101b8a2:	a901      	add	r1, sp, #4
 101b8a4:	e7bc      	b.n	101b820 <__eucjp_mbtowc+0xc>
 101b8a6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 101b8aa:	2300      	movs	r3, #0
 101b8ac:	600c      	str	r4, [r1, #0]
 101b8ae:	6033      	str	r3, [r6, #0]
 101b8b0:	b002      	add	sp, #8
 101b8b2:	bcf0      	pop	{r4, r5, r6, r7}
 101b8b4:	4770      	bx	lr
 101b8b6:	2001      	movs	r0, #1
 101b8b8:	e7d8      	b.n	101b86c <__eucjp_mbtowc+0x58>
 101b8ba:	f06f 0001 	mvn.w	r0, #1
 101b8be:	e7e1      	b.n	101b884 <__eucjp_mbtowc+0x70>
 101b8c0:	238a      	movs	r3, #138	; 0x8a
 101b8c2:	f04f 30ff 	mov.w	r0, #4294967295
 101b8c6:	603b      	str	r3, [r7, #0]
 101b8c8:	e7dc      	b.n	101b884 <__eucjp_mbtowc+0x70>
 101b8ca:	bf00      	nop

0101b8cc <__jis_mbtowc>:
 101b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101b8d0:	b083      	sub	sp, #12
 101b8d2:	4682      	mov	sl, r0
 101b8d4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 101b8d8:	2900      	cmp	r1, #0
 101b8da:	d042      	beq.n	101b962 <__jis_mbtowc+0x96>
 101b8dc:	2a00      	cmp	r2, #0
 101b8de:	d043      	beq.n	101b968 <__jis_mbtowc+0x9c>
 101b8e0:	2b00      	cmp	r3, #0
 101b8e2:	d07d      	beq.n	101b9e0 <__jis_mbtowc+0x114>
 101b8e4:	f89e 4000 	ldrb.w	r4, [lr]
 101b8e8:	4610      	mov	r0, r2
 101b8ea:	f246 3758 	movw	r7, #25432	; 0x6358
 101b8ee:	3a01      	subs	r2, #1
 101b8f0:	f1c0 0801 	rsb	r8, r0, #1
 101b8f4:	f2c0 1706 	movt	r7, #262	; 0x106
 101b8f8:	7855      	ldrb	r5, [r2, #1]
 101b8fa:	eb02 0c08 	add.w	ip, r2, r8
 101b8fe:	f102 0b01 	add.w	fp, r2, #1
 101b902:	2d28      	cmp	r5, #40	; 0x28
 101b904:	d06a      	beq.n	101b9dc <__jis_mbtowc+0x110>
 101b906:	d81d      	bhi.n	101b944 <__jis_mbtowc+0x78>
 101b908:	2d1b      	cmp	r5, #27
 101b90a:	bf08      	it	eq
 101b90c:	2600      	moveq	r6, #0
 101b90e:	d00a      	beq.n	101b926 <__jis_mbtowc+0x5a>
 101b910:	2d24      	cmp	r5, #36	; 0x24
 101b912:	bf08      	it	eq
 101b914:	2601      	moveq	r6, #1
 101b916:	d006      	beq.n	101b926 <__jis_mbtowc+0x5a>
 101b918:	b30d      	cbz	r5, 101b95e <__jis_mbtowc+0x92>
 101b91a:	f1a5 0621 	sub.w	r6, r5, #33	; 0x21
 101b91e:	2e5e      	cmp	r6, #94	; 0x5e
 101b920:	bf34      	ite	cc
 101b922:	2607      	movcc	r6, #7
 101b924:	2608      	movcs	r6, #8
 101b926:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 101b92a:	443c      	add	r4, r7
 101b92c:	eb04 0906 	add.w	r9, r4, r6
 101b930:	5da4      	ldrb	r4, [r4, r6]
 101b932:	f899 6048 	ldrb.w	r6, [r9, #72]	; 0x48
 101b936:	2e05      	cmp	r6, #5
 101b938:	d855      	bhi.n	101b9e6 <__jis_mbtowc+0x11a>
 101b93a:	e8df f006 	tbb	[pc, r6]
 101b93e:	2d23      	.short	0x2d23
 101b940:	1b4c4839 	.word	0x1b4c4839
 101b944:	2d42      	cmp	r5, #66	; 0x42
 101b946:	bf08      	it	eq
 101b948:	2604      	moveq	r6, #4
 101b94a:	d0ec      	beq.n	101b926 <__jis_mbtowc+0x5a>
 101b94c:	2d4a      	cmp	r5, #74	; 0x4a
 101b94e:	bf08      	it	eq
 101b950:	2605      	moveq	r6, #5
 101b952:	d0e8      	beq.n	101b926 <__jis_mbtowc+0x5a>
 101b954:	2d40      	cmp	r5, #64	; 0x40
 101b956:	bf08      	it	eq
 101b958:	2603      	moveq	r6, #3
 101b95a:	d1de      	bne.n	101b91a <__jis_mbtowc+0x4e>
 101b95c:	e7e3      	b.n	101b926 <__jis_mbtowc+0x5a>
 101b95e:	2606      	movs	r6, #6
 101b960:	e7e1      	b.n	101b926 <__jis_mbtowc+0x5a>
 101b962:	a901      	add	r1, sp, #4
 101b964:	2a00      	cmp	r2, #0
 101b966:	d1bb      	bne.n	101b8e0 <__jis_mbtowc+0x14>
 101b968:	2001      	movs	r0, #1
 101b96a:	f8ce 2000 	str.w	r2, [lr]
 101b96e:	b003      	add	sp, #12
 101b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b974:	2300      	movs	r3, #0
 101b976:	f8ce 3000 	str.w	r3, [lr]
 101b97a:	4618      	mov	r0, r3
 101b97c:	600b      	str	r3, [r1, #0]
 101b97e:	b003      	add	sp, #12
 101b980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b984:	2300      	movs	r3, #0
 101b986:	f8ce 3000 	str.w	r3, [lr]
 101b98a:	7803      	ldrb	r3, [r0, #0]
 101b98c:	f10c 0001 	add.w	r0, ip, #1
 101b990:	600b      	str	r3, [r1, #0]
 101b992:	b003      	add	sp, #12
 101b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b998:	f88e 5004 	strb.w	r5, [lr, #4]
 101b99c:	eb0b 0508 	add.w	r5, fp, r8
 101b9a0:	429d      	cmp	r5, r3
 101b9a2:	465a      	mov	r2, fp
 101b9a4:	d3a8      	bcc.n	101b8f8 <__jis_mbtowc+0x2c>
 101b9a6:	f8ce 4000 	str.w	r4, [lr]
 101b9aa:	f06f 0001 	mvn.w	r0, #1
 101b9ae:	e7e6      	b.n	101b97e <__jis_mbtowc+0xb2>
 101b9b0:	f89e 2004 	ldrb.w	r2, [lr, #4]
 101b9b4:	2301      	movs	r3, #1
 101b9b6:	f8ce 3000 	str.w	r3, [lr]
 101b9ba:	eb0c 0003 	add.w	r0, ip, r3
 101b9be:	f89b 3000 	ldrb.w	r3, [fp]
 101b9c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 101b9c6:	600b      	str	r3, [r1, #0]
 101b9c8:	b003      	add	sp, #12
 101b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101b9ce:	1c90      	adds	r0, r2, #2
 101b9d0:	eb0b 0508 	add.w	r5, fp, r8
 101b9d4:	e7e4      	b.n	101b9a0 <__jis_mbtowc+0xd4>
 101b9d6:	eb0b 0508 	add.w	r5, fp, r8
 101b9da:	e7e1      	b.n	101b9a0 <__jis_mbtowc+0xd4>
 101b9dc:	2602      	movs	r6, #2
 101b9de:	e7a2      	b.n	101b926 <__jis_mbtowc+0x5a>
 101b9e0:	f06f 0001 	mvn.w	r0, #1
 101b9e4:	e7cb      	b.n	101b97e <__jis_mbtowc+0xb2>
 101b9e6:	238a      	movs	r3, #138	; 0x8a
 101b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 101b9ec:	f8ca 3000 	str.w	r3, [sl]
 101b9f0:	e7c5      	b.n	101b97e <__jis_mbtowc+0xb2>
 101b9f2:	bf00      	nop
	...

0101ba00 <memcpy>:
 101ba00:	e1a0c000 	mov	ip, r0
 101ba04:	e3520040 	cmp	r2, #64	; 0x40
 101ba08:	aa000028 	bge	101bab0 <memcpy+0xb0>
 101ba0c:	e202303c 	and	r3, r2, #60	; 0x3c
 101ba10:	e08cc003 	add	ip, ip, r3
 101ba14:	e0811003 	add	r1, r1, r3
 101ba18:	e263303a 	rsb	r3, r3, #58	; 0x3a
 101ba1c:	e08ff083 	add	pc, pc, r3, lsl #1
 101ba20:	e511303c 	ldr	r3, [r1, #-60]	; 0xffffffc4
 101ba24:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
 101ba28:	e5113038 	ldr	r3, [r1, #-56]	; 0xffffffc8
 101ba2c:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
 101ba30:	e5113034 	ldr	r3, [r1, #-52]	; 0xffffffcc
 101ba34:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
 101ba38:	e5113030 	ldr	r3, [r1, #-48]	; 0xffffffd0
 101ba3c:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
 101ba40:	e511302c 	ldr	r3, [r1, #-44]	; 0xffffffd4
 101ba44:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
 101ba48:	e5113028 	ldr	r3, [r1, #-40]	; 0xffffffd8
 101ba4c:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
 101ba50:	e5113024 	ldr	r3, [r1, #-36]	; 0xffffffdc
 101ba54:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
 101ba58:	e5113020 	ldr	r3, [r1, #-32]	; 0xffffffe0
 101ba5c:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
 101ba60:	e511301c 	ldr	r3, [r1, #-28]	; 0xffffffe4
 101ba64:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
 101ba68:	e5113018 	ldr	r3, [r1, #-24]	; 0xffffffe8
 101ba6c:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
 101ba70:	e5113014 	ldr	r3, [r1, #-20]	; 0xffffffec
 101ba74:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
 101ba78:	e5113010 	ldr	r3, [r1, #-16]
 101ba7c:	e50c3010 	str	r3, [ip, #-16]
 101ba80:	e511300c 	ldr	r3, [r1, #-12]
 101ba84:	e50c300c 	str	r3, [ip, #-12]
 101ba88:	e5113008 	ldr	r3, [r1, #-8]
 101ba8c:	e50c3008 	str	r3, [ip, #-8]
 101ba90:	e5113004 	ldr	r3, [r1, #-4]
 101ba94:	e50c3004 	str	r3, [ip, #-4]
 101ba98:	e1b02f82 	lsls	r2, r2, #31
 101ba9c:	20d130b2 	ldrhcs	r3, [r1], #2
 101baa0:	15d11000 	ldrbne	r1, [r1]
 101baa4:	20cc30b2 	strhcs	r3, [ip], #2
 101baa8:	15cc1000 	strbne	r1, [ip]
 101baac:	e12fff1e 	bx	lr
 101bab0:	e52da020 	str	sl, [sp, #-32]!	; 0xffffffe0
 101bab4:	e201a007 	and	sl, r1, #7
 101bab8:	e20c3007 	and	r3, ip, #7
 101babc:	e153000a 	cmp	r3, sl
 101bac0:	1a0000f1 	bne	101be8c <memcpy+0x48c>
 101bac4:	eeb00a40 	vmov.f32	s0, s0
 101bac8:	e1b0ae8c 	lsls	sl, ip, #29
 101bacc:	0a000008 	beq	101baf4 <memcpy+0xf4>
 101bad0:	e27aa000 	rsbs	sl, sl, #0
 101bad4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 101bad8:	44913004 	ldrmi	r3, [r1], #4
 101badc:	448c3004 	strmi	r3, [ip], #4
 101bae0:	e1b0a10a 	lsls	sl, sl, #2
 101bae4:	20d130b2 	ldrhcs	r3, [r1], #2
 101bae8:	14d1a001 	ldrbne	sl, [r1], #1
 101baec:	20cc30b2 	strhcs	r3, [ip], #2
 101baf0:	14cca001 	strbne	sl, [ip], #1
 101baf4:	e252a040 	subs	sl, r2, #64	; 0x40
 101baf8:	ba000017 	blt	101bb5c <memcpy+0x15c>
 101bafc:	e35a0c02 	cmp	sl, #512	; 0x200
 101bb00:	aa000032 	bge	101bbd0 <memcpy+0x1d0>
 101bb04:	ed910b00 	vldr	d0, [r1]
 101bb08:	e25aa040 	subs	sl, sl, #64	; 0x40
 101bb0c:	ed911b02 	vldr	d1, [r1, #8]
 101bb10:	ed8c0b00 	vstr	d0, [ip]
 101bb14:	ed910b04 	vldr	d0, [r1, #16]
 101bb18:	ed8c1b02 	vstr	d1, [ip, #8]
 101bb1c:	ed911b06 	vldr	d1, [r1, #24]
 101bb20:	ed8c0b04 	vstr	d0, [ip, #16]
 101bb24:	ed910b08 	vldr	d0, [r1, #32]
 101bb28:	ed8c1b06 	vstr	d1, [ip, #24]
 101bb2c:	ed911b0a 	vldr	d1, [r1, #40]	; 0x28
 101bb30:	ed8c0b08 	vstr	d0, [ip, #32]
 101bb34:	ed910b0c 	vldr	d0, [r1, #48]	; 0x30
 101bb38:	ed8c1b0a 	vstr	d1, [ip, #40]	; 0x28
 101bb3c:	ed911b0e 	vldr	d1, [r1, #56]	; 0x38
 101bb40:	ed8c0b0c 	vstr	d0, [ip, #48]	; 0x30
 101bb44:	e2811040 	add	r1, r1, #64	; 0x40
 101bb48:	ed8c1b0e 	vstr	d1, [ip, #56]	; 0x38
 101bb4c:	e28cc040 	add	ip, ip, #64	; 0x40
 101bb50:	aaffffeb 	bge	101bb04 <memcpy+0x104>
 101bb54:	e31a003f 	tst	sl, #63	; 0x3f
 101bb58:	0a00001a 	beq	101bbc8 <memcpy+0x1c8>
 101bb5c:	e20a3038 	and	r3, sl, #56	; 0x38
 101bb60:	e08cc003 	add	ip, ip, r3
 101bb64:	e0811003 	add	r1, r1, r3
 101bb68:	e2633034 	rsb	r3, r3, #52	; 0x34
 101bb6c:	e08ff003 	add	pc, pc, r3
 101bb70:	ed110b0e 	vldr	d0, [r1, #-56]	; 0xffffffc8
 101bb74:	ed0c0b0e 	vstr	d0, [ip, #-56]	; 0xffffffc8
 101bb78:	ed110b0c 	vldr	d0, [r1, #-48]	; 0xffffffd0
 101bb7c:	ed0c0b0c 	vstr	d0, [ip, #-48]	; 0xffffffd0
 101bb80:	ed110b0a 	vldr	d0, [r1, #-40]	; 0xffffffd8
 101bb84:	ed0c0b0a 	vstr	d0, [ip, #-40]	; 0xffffffd8
 101bb88:	ed110b08 	vldr	d0, [r1, #-32]	; 0xffffffe0
 101bb8c:	ed0c0b08 	vstr	d0, [ip, #-32]	; 0xffffffe0
 101bb90:	ed110b06 	vldr	d0, [r1, #-24]	; 0xffffffe8
 101bb94:	ed0c0b06 	vstr	d0, [ip, #-24]	; 0xffffffe8
 101bb98:	ed110b04 	vldr	d0, [r1, #-16]
 101bb9c:	ed0c0b04 	vstr	d0, [ip, #-16]
 101bba0:	ed110b02 	vldr	d0, [r1, #-8]
 101bba4:	ed0c0b02 	vstr	d0, [ip, #-8]
 101bba8:	e31a0004 	tst	sl, #4
 101bbac:	14913004 	ldrne	r3, [r1], #4
 101bbb0:	148c3004 	strne	r3, [ip], #4
 101bbb4:	e1b0af8a 	lsls	sl, sl, #31
 101bbb8:	20d130b2 	ldrhcs	r3, [r1], #2
 101bbbc:	15d1a000 	ldrbne	sl, [r1]
 101bbc0:	20cc30b2 	strhcs	r3, [ip], #2
 101bbc4:	15cca000 	strbne	sl, [ip]
 101bbc8:	e49da020 	ldr	sl, [sp], #32
 101bbcc:	e12fff1e 	bx	lr
 101bbd0:	ed913b00 	vldr	d3, [r1]
 101bbd4:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 101bbd8:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 101bbdc:	ed916b30 	vldr	d6, [r1, #192]	; 0xc0
 101bbe0:	ed917b40 	vldr	d7, [r1, #256]	; 0x100
 101bbe4:	ed910b02 	vldr	d0, [r1, #8]
 101bbe8:	ed911b04 	vldr	d1, [r1, #16]
 101bbec:	ed912b06 	vldr	d2, [r1, #24]
 101bbf0:	e2811020 	add	r1, r1, #32
 101bbf4:	e25aad0a 	subs	sl, sl, #640	; 0x280
 101bbf8:	ba000055 	blt	101bd54 <memcpy+0x354>
 101bbfc:	ed8c3b00 	vstr	d3, [ip]
 101bc00:	ed913b00 	vldr	d3, [r1]
 101bc04:	ed8c0b02 	vstr	d0, [ip, #8]
 101bc08:	ed910b02 	vldr	d0, [r1, #8]
 101bc0c:	ed8c1b04 	vstr	d1, [ip, #16]
 101bc10:	ed911b04 	vldr	d1, [r1, #16]
 101bc14:	ed8c2b06 	vstr	d2, [ip, #24]
 101bc18:	ed912b06 	vldr	d2, [r1, #24]
 101bc1c:	ed8c3b08 	vstr	d3, [ip, #32]
 101bc20:	ed913b48 	vldr	d3, [r1, #288]	; 0x120
 101bc24:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101bc28:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101bc2c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101bc30:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101bc34:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101bc38:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101bc3c:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 101bc40:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 101bc44:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101bc48:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101bc4c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101bc50:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101bc54:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101bc58:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101bc5c:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 101bc60:	ed914b58 	vldr	d4, [r1, #352]	; 0x160
 101bc64:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101bc68:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 101bc6c:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101bc70:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 101bc74:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101bc78:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 101bc7c:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 101bc80:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 101bc84:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 101bc88:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 101bc8c:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 101bc90:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 101bc94:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 101bc98:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 101bc9c:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 101bca0:	ed915b68 	vldr	d5, [r1, #416]	; 0x1a0
 101bca4:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 101bca8:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 101bcac:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 101bcb0:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 101bcb4:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 101bcb8:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 101bcbc:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 101bcc0:	e28110c0 	add	r1, r1, #192	; 0xc0
 101bcc4:	ed8c6b00 	vstr	d6, [ip]
 101bcc8:	ed916b00 	vldr	d6, [r1]
 101bccc:	ed8c0b02 	vstr	d0, [ip, #8]
 101bcd0:	ed910b02 	vldr	d0, [r1, #8]
 101bcd4:	ed8c1b04 	vstr	d1, [ip, #16]
 101bcd8:	ed911b04 	vldr	d1, [r1, #16]
 101bcdc:	ed8c2b06 	vstr	d2, [ip, #24]
 101bce0:	ed912b06 	vldr	d2, [r1, #24]
 101bce4:	ed8c6b08 	vstr	d6, [ip, #32]
 101bce8:	ed916b48 	vldr	d6, [r1, #288]	; 0x120
 101bcec:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101bcf0:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101bcf4:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101bcf8:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101bcfc:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101bd00:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101bd04:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 101bd08:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 101bd0c:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101bd10:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101bd14:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101bd18:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101bd1c:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101bd20:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101bd24:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 101bd28:	ed917b58 	vldr	d7, [r1, #352]	; 0x160
 101bd2c:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101bd30:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 101bd34:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101bd38:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 101bd3c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101bd40:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 101bd44:	e28cc080 	add	ip, ip, #128	; 0x80
 101bd48:	e2811080 	add	r1, r1, #128	; 0x80
 101bd4c:	e25aad05 	subs	sl, sl, #320	; 0x140
 101bd50:	aaffffa9 	bge	101bbfc <memcpy+0x1fc>
 101bd54:	ed8c3b00 	vstr	d3, [ip]
 101bd58:	ed913b00 	vldr	d3, [r1]
 101bd5c:	ed8c0b02 	vstr	d0, [ip, #8]
 101bd60:	ed910b02 	vldr	d0, [r1, #8]
 101bd64:	ed8c1b04 	vstr	d1, [ip, #16]
 101bd68:	ed911b04 	vldr	d1, [r1, #16]
 101bd6c:	ed8c2b06 	vstr	d2, [ip, #24]
 101bd70:	ed912b06 	vldr	d2, [r1, #24]
 101bd74:	ed8c3b08 	vstr	d3, [ip, #32]
 101bd78:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101bd7c:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101bd80:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101bd84:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101bd88:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101bd8c:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101bd90:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 101bd94:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 101bd98:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101bd9c:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101bda0:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101bda4:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101bda8:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101bdac:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101bdb0:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 101bdb4:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101bdb8:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 101bdbc:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101bdc0:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 101bdc4:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101bdc8:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 101bdcc:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 101bdd0:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 101bdd4:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 101bdd8:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 101bddc:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 101bde0:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 101bde4:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 101bde8:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 101bdec:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 101bdf0:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 101bdf4:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 101bdf8:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 101bdfc:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 101be00:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 101be04:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 101be08:	e28110c0 	add	r1, r1, #192	; 0xc0
 101be0c:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 101be10:	ed8c6b00 	vstr	d6, [ip]
 101be14:	ed916b00 	vldr	d6, [r1]
 101be18:	ed8c0b02 	vstr	d0, [ip, #8]
 101be1c:	ed910b02 	vldr	d0, [r1, #8]
 101be20:	ed8c1b04 	vstr	d1, [ip, #16]
 101be24:	ed911b04 	vldr	d1, [r1, #16]
 101be28:	ed8c2b06 	vstr	d2, [ip, #24]
 101be2c:	ed912b06 	vldr	d2, [r1, #24]
 101be30:	ed8c6b08 	vstr	d6, [ip, #32]
 101be34:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 101be38:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 101be3c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 101be40:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 101be44:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 101be48:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 101be4c:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 101be50:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 101be54:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 101be58:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 101be5c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 101be60:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 101be64:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 101be68:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 101be6c:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 101be70:	e2811060 	add	r1, r1, #96	; 0x60
 101be74:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 101be78:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 101be7c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 101be80:	e28cc080 	add	ip, ip, #128	; 0x80
 101be84:	e28aad05 	add	sl, sl, #320	; 0x140
 101be88:	eaffff1d 	b	101bb04 <memcpy+0x104>
 101be8c:	f5d1f000 	pld	[r1]
 101be90:	f5d1f040 	pld	[r1, #64]	; 0x40
 101be94:	e1b0ae8c 	lsls	sl, ip, #29
 101be98:	f5d1f080 	pld	[r1, #128]	; 0x80
 101be9c:	0a000008 	beq	101bec4 <memcpy+0x4c4>
 101bea0:	e27aa000 	rsbs	sl, sl, #0
 101bea4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 101bea8:	44913004 	ldrmi	r3, [r1], #4
 101beac:	448c3004 	strmi	r3, [ip], #4
 101beb0:	e1b0a10a 	lsls	sl, sl, #2
 101beb4:	14d13001 	ldrbne	r3, [r1], #1
 101beb8:	20d1a0b2 	ldrhcs	sl, [r1], #2
 101bebc:	14cc3001 	strbne	r3, [ip], #1
 101bec0:	20cca0b2 	strhcs	sl, [ip], #2
 101bec4:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
 101bec8:	e2522040 	subs	r2, r2, #64	; 0x40
 101becc:	449da020 	ldrmi	sl, [sp], #32
 101bed0:	4afffecd 	bmi	101ba0c <memcpy+0xc>
 101bed4:	f5d1f100 	pld	[r1, #256]	; 0x100
 101bed8:	e2411004 	sub	r1, r1, #4
 101bedc:	e24cc008 	sub	ip, ip, #8
 101bee0:	e252a040 	subs	sl, r2, #64	; 0x40
 101bee4:	e5912004 	ldr	r2, [r1, #4]
 101bee8:	e5913008 	ldr	r3, [r1, #8]
 101beec:	e1cd40f8 	strd	r4, [sp, #8]
 101bef0:	e591400c 	ldr	r4, [r1, #12]
 101bef4:	e5915010 	ldr	r5, [r1, #16]
 101bef8:	e1cd61f0 	strd	r6, [sp, #16]
 101befc:	e5916014 	ldr	r6, [r1, #20]
 101bf00:	e5917018 	ldr	r7, [r1, #24]
 101bf04:	e1cd81f8 	strd	r8, [sp, #24]
 101bf08:	e591801c 	ldr	r8, [r1, #28]
 101bf0c:	e5b19020 	ldr	r9, [r1, #32]!
 101bf10:	ea000018 	b	101bf78 <memcpy+0x578>
 101bf14:	e1a00000 	nop			; (mov r0, r0)
 101bf18:	e1a00000 	nop			; (mov r0, r0)
 101bf1c:	e1a00000 	nop			; (mov r0, r0)
 101bf20:	e1a00000 	nop			; (mov r0, r0)
 101bf24:	e1a00000 	nop			; (mov r0, r0)
 101bf28:	e1a00000 	nop			; (mov r0, r0)
 101bf2c:	e1a00000 	nop			; (mov r0, r0)
 101bf30:	e1a00000 	nop			; (mov r0, r0)
 101bf34:	e1a00000 	nop			; (mov r0, r0)
 101bf38:	e1a00000 	nop			; (mov r0, r0)
 101bf3c:	e1a00000 	nop			; (mov r0, r0)
 101bf40:	f5d1f124 	pld	[r1, #292]	; 0x124
 101bf44:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 101bf48:	e5912024 	ldr	r2, [r1, #36]	; 0x24
 101bf4c:	e5913028 	ldr	r3, [r1, #40]	; 0x28
 101bf50:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 101bf54:	e591402c 	ldr	r4, [r1, #44]	; 0x2c
 101bf58:	e5915030 	ldr	r5, [r1, #48]	; 0x30
 101bf5c:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 101bf60:	e5916034 	ldr	r6, [r1, #52]	; 0x34
 101bf64:	e5917038 	ldr	r7, [r1, #56]	; 0x38
 101bf68:	e1ec84f0 	strd	r8, [ip, #64]!	; 0x40
 101bf6c:	e591803c 	ldr	r8, [r1, #60]	; 0x3c
 101bf70:	e5b19040 	ldr	r9, [r1, #64]!	; 0x40
 101bf74:	e25aa040 	subs	sl, sl, #64	; 0x40
 101bf78:	e1cc20f8 	strd	r2, [ip, #8]
 101bf7c:	e5912004 	ldr	r2, [r1, #4]
 101bf80:	e5913008 	ldr	r3, [r1, #8]
 101bf84:	e1cc41f0 	strd	r4, [ip, #16]
 101bf88:	e591400c 	ldr	r4, [r1, #12]
 101bf8c:	e5915010 	ldr	r5, [r1, #16]
 101bf90:	e1cc61f8 	strd	r6, [ip, #24]
 101bf94:	e5916014 	ldr	r6, [r1, #20]
 101bf98:	e5917018 	ldr	r7, [r1, #24]
 101bf9c:	e1cc82f0 	strd	r8, [ip, #32]
 101bfa0:	e591801c 	ldr	r8, [r1, #28]
 101bfa4:	e5919020 	ldr	r9, [r1, #32]
 101bfa8:	2affffe4 	bcs	101bf40 <memcpy+0x540>
 101bfac:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 101bfb0:	e2811024 	add	r1, r1, #36	; 0x24
 101bfb4:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 101bfb8:	e1cd40d8 	ldrd	r4, [sp, #8]
 101bfbc:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 101bfc0:	e1cd61d0 	ldrd	r6, [sp, #16]
 101bfc4:	e1cc84f0 	strd	r8, [ip, #64]	; 0x40
 101bfc8:	e1cd81d8 	ldrd	r8, [sp, #24]
 101bfcc:	e28cc048 	add	ip, ip, #72	; 0x48
 101bfd0:	e21a203f 	ands	r2, sl, #63	; 0x3f
 101bfd4:	e49da020 	ldr	sl, [sp], #32
 101bfd8:	1afffe8b 	bne	101ba0c <memcpy+0xc>
 101bfdc:	e12fff1e 	bx	lr

0101bfe0 <memmove>:
 101bfe0:	4288      	cmp	r0, r1
 101bfe2:	b4f0      	push	{r4, r5, r6, r7}
 101bfe4:	d90d      	bls.n	101c002 <memmove+0x22>
 101bfe6:	188b      	adds	r3, r1, r2
 101bfe8:	4283      	cmp	r3, r0
 101bfea:	d90a      	bls.n	101c002 <memmove+0x22>
 101bfec:	1884      	adds	r4, r0, r2
 101bfee:	b132      	cbz	r2, 101bffe <memmove+0x1e>
 101bff0:	4622      	mov	r2, r4
 101bff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 101bff6:	4299      	cmp	r1, r3
 101bff8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 101bffc:	d1f9      	bne.n	101bff2 <memmove+0x12>
 101bffe:	bcf0      	pop	{r4, r5, r6, r7}
 101c000:	4770      	bx	lr
 101c002:	2a0f      	cmp	r2, #15
 101c004:	d80e      	bhi.n	101c024 <memmove+0x44>
 101c006:	4603      	mov	r3, r0
 101c008:	1e54      	subs	r4, r2, #1
 101c00a:	2a00      	cmp	r2, #0
 101c00c:	d0f7      	beq.n	101bffe <memmove+0x1e>
 101c00e:	3401      	adds	r4, #1
 101c010:	3b01      	subs	r3, #1
 101c012:	440c      	add	r4, r1
 101c014:	f811 2b01 	ldrb.w	r2, [r1], #1
 101c018:	42a1      	cmp	r1, r4
 101c01a:	f803 2f01 	strb.w	r2, [r3, #1]!
 101c01e:	d1f9      	bne.n	101c014 <memmove+0x34>
 101c020:	bcf0      	pop	{r4, r5, r6, r7}
 101c022:	4770      	bx	lr
 101c024:	ea40 0301 	orr.w	r3, r0, r1
 101c028:	079b      	lsls	r3, r3, #30
 101c02a:	d13d      	bne.n	101c0a8 <memmove+0xc8>
 101c02c:	f1a2 0510 	sub.w	r5, r2, #16
 101c030:	f101 0420 	add.w	r4, r1, #32
 101c034:	f101 0610 	add.w	r6, r1, #16
 101c038:	f100 0710 	add.w	r7, r0, #16
 101c03c:	092d      	lsrs	r5, r5, #4
 101c03e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 101c042:	f856 3c10 	ldr.w	r3, [r6, #-16]
 101c046:	3610      	adds	r6, #16
 101c048:	3710      	adds	r7, #16
 101c04a:	f847 3c20 	str.w	r3, [r7, #-32]
 101c04e:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 101c052:	f847 3c1c 	str.w	r3, [r7, #-28]
 101c056:	f856 3c18 	ldr.w	r3, [r6, #-24]
 101c05a:	f847 3c18 	str.w	r3, [r7, #-24]
 101c05e:	f856 3c14 	ldr.w	r3, [r6, #-20]
 101c062:	42a6      	cmp	r6, r4
 101c064:	f847 3c14 	str.w	r3, [r7, #-20]
 101c068:	d1eb      	bne.n	101c042 <memmove+0x62>
 101c06a:	1c6b      	adds	r3, r5, #1
 101c06c:	f012 0f0c 	tst.w	r2, #12
 101c070:	f002 050f 	and.w	r5, r2, #15
 101c074:	ea4f 1303 	mov.w	r3, r3, lsl #4
 101c078:	4419      	add	r1, r3
 101c07a:	bf08      	it	eq
 101c07c:	462a      	moveq	r2, r5
 101c07e:	4403      	add	r3, r0
 101c080:	d0c2      	beq.n	101c008 <memmove+0x28>
 101c082:	1f1f      	subs	r7, r3, #4
 101c084:	460e      	mov	r6, r1
 101c086:	f856 cb04 	ldr.w	ip, [r6], #4
 101c08a:	1bac      	subs	r4, r5, r6
 101c08c:	440c      	add	r4, r1
 101c08e:	f847 cf04 	str.w	ip, [r7, #4]!
 101c092:	2c03      	cmp	r4, #3
 101c094:	d8f7      	bhi.n	101c086 <memmove+0xa6>
 101c096:	1f2c      	subs	r4, r5, #4
 101c098:	f002 0203 	and.w	r2, r2, #3
 101c09c:	f024 0403 	bic.w	r4, r4, #3
 101c0a0:	3404      	adds	r4, #4
 101c0a2:	4423      	add	r3, r4
 101c0a4:	4421      	add	r1, r4
 101c0a6:	e7af      	b.n	101c008 <memmove+0x28>
 101c0a8:	1e54      	subs	r4, r2, #1
 101c0aa:	4603      	mov	r3, r0
 101c0ac:	e7af      	b.n	101c00e <memmove+0x2e>
 101c0ae:	bf00      	nop

0101c0b0 <memset>:
 101c0b0:	b4f0      	push	{r4, r5, r6, r7}
 101c0b2:	0786      	lsls	r6, r0, #30
 101c0b4:	d046      	beq.n	101c144 <memset+0x94>
 101c0b6:	1e54      	subs	r4, r2, #1
 101c0b8:	2a00      	cmp	r2, #0
 101c0ba:	d03c      	beq.n	101c136 <memset+0x86>
 101c0bc:	b2ca      	uxtb	r2, r1
 101c0be:	4603      	mov	r3, r0
 101c0c0:	e002      	b.n	101c0c8 <memset+0x18>
 101c0c2:	f114 34ff 	adds.w	r4, r4, #4294967295
 101c0c6:	d336      	bcc.n	101c136 <memset+0x86>
 101c0c8:	f803 2b01 	strb.w	r2, [r3], #1
 101c0cc:	079d      	lsls	r5, r3, #30
 101c0ce:	d1f8      	bne.n	101c0c2 <memset+0x12>
 101c0d0:	2c03      	cmp	r4, #3
 101c0d2:	d929      	bls.n	101c128 <memset+0x78>
 101c0d4:	b2cd      	uxtb	r5, r1
 101c0d6:	2c0f      	cmp	r4, #15
 101c0d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 101c0dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 101c0e0:	d933      	bls.n	101c14a <memset+0x9a>
 101c0e2:	f1a4 0610 	sub.w	r6, r4, #16
 101c0e6:	f103 0720 	add.w	r7, r3, #32
 101c0ea:	f103 0210 	add.w	r2, r3, #16
 101c0ee:	0936      	lsrs	r6, r6, #4
 101c0f0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 101c0f4:	e942 5504 	strd	r5, r5, [r2, #-16]
 101c0f8:	e942 5502 	strd	r5, r5, [r2, #-8]
 101c0fc:	3210      	adds	r2, #16
 101c0fe:	42ba      	cmp	r2, r7
 101c100:	d1f8      	bne.n	101c0f4 <memset+0x44>
 101c102:	1c72      	adds	r2, r6, #1
 101c104:	f014 0f0c 	tst.w	r4, #12
 101c108:	f004 060f 	and.w	r6, r4, #15
 101c10c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 101c110:	d013      	beq.n	101c13a <memset+0x8a>
 101c112:	1f33      	subs	r3, r6, #4
 101c114:	f023 0303 	bic.w	r3, r3, #3
 101c118:	3304      	adds	r3, #4
 101c11a:	4413      	add	r3, r2
 101c11c:	f842 5b04 	str.w	r5, [r2], #4
 101c120:	4293      	cmp	r3, r2
 101c122:	d1fb      	bne.n	101c11c <memset+0x6c>
 101c124:	f006 0403 	and.w	r4, r6, #3
 101c128:	b12c      	cbz	r4, 101c136 <memset+0x86>
 101c12a:	b2c9      	uxtb	r1, r1
 101c12c:	441c      	add	r4, r3
 101c12e:	f803 1b01 	strb.w	r1, [r3], #1
 101c132:	429c      	cmp	r4, r3
 101c134:	d1fb      	bne.n	101c12e <memset+0x7e>
 101c136:	bcf0      	pop	{r4, r5, r6, r7}
 101c138:	4770      	bx	lr
 101c13a:	4634      	mov	r4, r6
 101c13c:	4613      	mov	r3, r2
 101c13e:	2c00      	cmp	r4, #0
 101c140:	d1f3      	bne.n	101c12a <memset+0x7a>
 101c142:	e7f8      	b.n	101c136 <memset+0x86>
 101c144:	4614      	mov	r4, r2
 101c146:	4603      	mov	r3, r0
 101c148:	e7c2      	b.n	101c0d0 <memset+0x20>
 101c14a:	461a      	mov	r2, r3
 101c14c:	4626      	mov	r6, r4
 101c14e:	e7e0      	b.n	101c112 <memset+0x62>

0101c150 <__malloc_lock>:
 101c150:	4770      	bx	lr
 101c152:	bf00      	nop

0101c154 <__malloc_unlock>:
 101c154:	4770      	bx	lr
 101c156:	bf00      	nop

0101c158 <_printf_r>:
 101c158:	b40e      	push	{r1, r2, r3}
 101c15a:	b510      	push	{r4, lr}
 101c15c:	b083      	sub	sp, #12
 101c15e:	ac05      	add	r4, sp, #20
 101c160:	6881      	ldr	r1, [r0, #8]
 101c162:	f854 2b04 	ldr.w	r2, [r4], #4
 101c166:	4623      	mov	r3, r4
 101c168:	9401      	str	r4, [sp, #4]
 101c16a:	f002 fe2d 	bl	101edc8 <_vfprintf_r>
 101c16e:	b003      	add	sp, #12
 101c170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 101c174:	b003      	add	sp, #12
 101c176:	4770      	bx	lr

0101c178 <printf>:
 101c178:	b40f      	push	{r0, r1, r2, r3}
 101c17a:	f64a 1348 	movw	r3, #43336	; 0xa948
 101c17e:	b510      	push	{r4, lr}
 101c180:	b082      	sub	sp, #8
 101c182:	ac04      	add	r4, sp, #16
 101c184:	f2c0 1306 	movt	r3, #262	; 0x106
 101c188:	f854 2b04 	ldr.w	r2, [r4], #4
 101c18c:	6818      	ldr	r0, [r3, #0]
 101c18e:	4623      	mov	r3, r4
 101c190:	9401      	str	r4, [sp, #4]
 101c192:	6881      	ldr	r1, [r0, #8]
 101c194:	f002 fe18 	bl	101edc8 <_vfprintf_r>
 101c198:	b002      	add	sp, #8
 101c19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 101c19e:	b004      	add	sp, #16
 101c1a0:	4770      	bx	lr
 101c1a2:	bf00      	nop

0101c1a4 <_puts_r>:
 101c1a4:	b530      	push	{r4, r5, lr}
 101c1a6:	4605      	mov	r5, r0
 101c1a8:	b089      	sub	sp, #36	; 0x24
 101c1aa:	4608      	mov	r0, r1
 101c1ac:	460c      	mov	r4, r1
 101c1ae:	f000 fe67 	bl	101ce80 <strlen>
 101c1b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 101c1b4:	f649 1358 	movw	r3, #39256	; 0x9958
 101c1b8:	9404      	str	r4, [sp, #16]
 101c1ba:	f2c0 1306 	movt	r3, #262	; 0x106
 101c1be:	68ac      	ldr	r4, [r5, #8]
 101c1c0:	9306      	str	r3, [sp, #24]
 101c1c2:	2302      	movs	r3, #2
 101c1c4:	1c41      	adds	r1, r0, #1
 101c1c6:	9005      	str	r0, [sp, #20]
 101c1c8:	9103      	str	r1, [sp, #12]
 101c1ca:	2001      	movs	r0, #1
 101c1cc:	a904      	add	r1, sp, #16
 101c1ce:	9007      	str	r0, [sp, #28]
 101c1d0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 101c1d4:	b1b2      	cbz	r2, 101c204 <_puts_r+0x60>
 101c1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101c1da:	049a      	lsls	r2, r3, #18
 101c1dc:	d406      	bmi.n	101c1ec <_puts_r+0x48>
 101c1de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 101c1e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 101c1e4:	81a3      	strh	r3, [r4, #12]
 101c1e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 101c1ea:	6662      	str	r2, [r4, #100]	; 0x64
 101c1ec:	4621      	mov	r1, r4
 101c1ee:	4628      	mov	r0, r5
 101c1f0:	aa01      	add	r2, sp, #4
 101c1f2:	f006 f8fd 	bl	10223f0 <__sfvwrite_r>
 101c1f6:	2800      	cmp	r0, #0
 101c1f8:	bf14      	ite	ne
 101c1fa:	f04f 30ff 	movne.w	r0, #4294967295
 101c1fe:	200a      	moveq	r0, #10
 101c200:	b009      	add	sp, #36	; 0x24
 101c202:	bd30      	pop	{r4, r5, pc}
 101c204:	4628      	mov	r0, r5
 101c206:	f005 ff81 	bl	102210c <__sinit>
 101c20a:	e7e4      	b.n	101c1d6 <_puts_r+0x32>

0101c20c <puts>:
 101c20c:	f64a 1348 	movw	r3, #43336	; 0xa948
 101c210:	f2c0 1306 	movt	r3, #262	; 0x106
 101c214:	4601      	mov	r1, r0
 101c216:	6818      	ldr	r0, [r3, #0]
 101c218:	f7ff bfc4 	b.w	101c1a4 <_puts_r>

0101c21c <qsort>:
 101c21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101c220:	b089      	sub	sp, #36	; 0x24
 101c222:	4680      	mov	r8, r0
 101c224:	460f      	mov	r7, r1
 101c226:	469a      	mov	sl, r3
 101c228:	9200      	str	r2, [sp, #0]
 101c22a:	0892      	lsrs	r2, r2, #2
 101c22c:	9203      	str	r2, [sp, #12]
 101c22e:	9a00      	ldr	r2, [sp, #0]
 101c230:	ea48 0302 	orr.w	r3, r8, r2
 101c234:	079b      	lsls	r3, r3, #30
 101c236:	bf18      	it	ne
 101c238:	f04f 0b02 	movne.w	fp, #2
 101c23c:	d104      	bne.n	101c248 <qsort+0x2c>
 101c23e:	f1b2 0b04 	subs.w	fp, r2, #4
 101c242:	bf18      	it	ne
 101c244:	f04f 0b01 	movne.w	fp, #1
 101c248:	2f06      	cmp	r7, #6
 101c24a:	f240 824c 	bls.w	101c6e6 <qsort+0x4ca>
 101c24e:	9a00      	ldr	r2, [sp, #0]
 101c250:	1e7b      	subs	r3, r7, #1
 101c252:	087c      	lsrs	r4, r7, #1
 101c254:	2f07      	cmp	r7, #7
 101c256:	fb02 f303 	mul.w	r3, r2, r3
 101c25a:	fb02 8404 	mla	r4, r2, r4, r8
 101c25e:	eb08 0903 	add.w	r9, r8, r3
 101c262:	9306      	str	r3, [sp, #24]
 101c264:	d010      	beq.n	101c288 <qsort+0x6c>
 101c266:	2f28      	cmp	r7, #40	; 0x28
 101c268:	bf9c      	itt	ls
 101c26a:	464d      	movls	r5, r9
 101c26c:	4646      	movls	r6, r8
 101c26e:	f200 81a2 	bhi.w	101c5b6 <qsort+0x39a>
 101c272:	4621      	mov	r1, r4
 101c274:	4630      	mov	r0, r6
 101c276:	47d0      	blx	sl
 101c278:	4629      	mov	r1, r5
 101c27a:	2800      	cmp	r0, #0
 101c27c:	4620      	mov	r0, r4
 101c27e:	f2c0 817e 	blt.w	101c57e <qsort+0x362>
 101c282:	47d0      	blx	sl
 101c284:	2800      	cmp	r0, #0
 101c286:	dd52      	ble.n	101c32e <qsort+0x112>
 101c288:	f1bb 0f00 	cmp.w	fp, #0
 101c28c:	d159      	bne.n	101c342 <qsort+0x126>
 101c28e:	f8d8 2000 	ldr.w	r2, [r8]
 101c292:	6821      	ldr	r1, [r4, #0]
 101c294:	9b00      	ldr	r3, [sp, #0]
 101c296:	f8c8 1000 	str.w	r1, [r8]
 101c29a:	4443      	add	r3, r8
 101c29c:	6022      	str	r2, [r4, #0]
 101c29e:	9305      	str	r3, [sp, #20]
 101c2a0:	9b05      	ldr	r3, [sp, #20]
 101c2a2:	4599      	cmp	r9, r3
 101c2a4:	9307      	str	r3, [sp, #28]
 101c2a6:	d362      	bcc.n	101c36e <qsort+0x152>
 101c2a8:	461d      	mov	r5, r3
 101c2aa:	9304      	str	r3, [sp, #16]
 101c2ac:	2300      	movs	r3, #0
 101c2ae:	9301      	str	r3, [sp, #4]
 101c2b0:	9b00      	ldr	r3, [sp, #0]
 101c2b2:	464c      	mov	r4, r9
 101c2b4:	425f      	negs	r7, r3
 101c2b6:	4641      	mov	r1, r8
 101c2b8:	4628      	mov	r0, r5
 101c2ba:	47d0      	blx	sl
 101c2bc:	462e      	mov	r6, r5
 101c2be:	2800      	cmp	r0, #0
 101c2c0:	f340 80f7 	ble.w	101c4b2 <qsort+0x296>
 101c2c4:	45a9      	cmp	r9, r5
 101c2c6:	f0c0 80b9 	bcc.w	101c43c <qsort+0x220>
 101c2ca:	4653      	mov	r3, sl
 101c2cc:	465e      	mov	r6, fp
 101c2ce:	46a2      	mov	sl, r4
 101c2d0:	9502      	str	r5, [sp, #8]
 101c2d2:	f8dd b004 	ldr.w	fp, [sp, #4]
 101c2d6:	461c      	mov	r4, r3
 101c2d8:	e00e      	b.n	101c2f8 <qsort+0xdc>
 101c2da:	f8d9 3000 	ldr.w	r3, [r9]
 101c2de:	f8da 1000 	ldr.w	r1, [sl]
 101c2e2:	f8c9 1000 	str.w	r1, [r9]
 101c2e6:	f8ca 3000 	str.w	r3, [sl]
 101c2ea:	44ba      	add	sl, r7
 101c2ec:	f04f 0b01 	mov.w	fp, #1
 101c2f0:	44b9      	add	r9, r7
 101c2f2:	454d      	cmp	r5, r9
 101c2f4:	f200 8264 	bhi.w	101c7c0 <qsort+0x5a4>
 101c2f8:	4641      	mov	r1, r8
 101c2fa:	4648      	mov	r0, r9
 101c2fc:	47a0      	blx	r4
 101c2fe:	2800      	cmp	r0, #0
 101c300:	f2c0 8084 	blt.w	101c40c <qsort+0x1f0>
 101c304:	d1f4      	bne.n	101c2f0 <qsort+0xd4>
 101c306:	2e00      	cmp	r6, #0
 101c308:	d0e7      	beq.n	101c2da <qsort+0xbe>
 101c30a:	2e01      	cmp	r6, #1
 101c30c:	d070      	beq.n	101c3f0 <qsort+0x1d4>
 101c30e:	9b00      	ldr	r3, [sp, #0]
 101c310:	4651      	mov	r1, sl
 101c312:	eb09 0e03 	add.w	lr, r9, r3
 101c316:	464b      	mov	r3, r9
 101c318:	780a      	ldrb	r2, [r1, #0]
 101c31a:	7818      	ldrb	r0, [r3, #0]
 101c31c:	f803 2b01 	strb.w	r2, [r3], #1
 101c320:	ebae 0203 	sub.w	r2, lr, r3
 101c324:	2a00      	cmp	r2, #0
 101c326:	f801 0b01 	strb.w	r0, [r1], #1
 101c32a:	dcf5      	bgt.n	101c318 <qsort+0xfc>
 101c32c:	e7dd      	b.n	101c2ea <qsort+0xce>
 101c32e:	4629      	mov	r1, r5
 101c330:	4630      	mov	r0, r6
 101c332:	47d0      	blx	sl
 101c334:	ea16 0420 	ands.w	r4, r6, r0, asr #32
 101c338:	bf38      	it	cc
 101c33a:	462c      	movcc	r4, r5
 101c33c:	f1bb 0f00 	cmp.w	fp, #0
 101c340:	d0a5      	beq.n	101c28e <qsort+0x72>
 101c342:	f1bb 0f01 	cmp.w	fp, #1
 101c346:	f000 8188 	beq.w	101c65a <qsort+0x43e>
 101c34a:	9b00      	ldr	r3, [sp, #0]
 101c34c:	4642      	mov	r2, r8
 101c34e:	eb08 0003 	add.w	r0, r8, r3
 101c352:	9005      	str	r0, [sp, #20]
 101c354:	7823      	ldrb	r3, [r4, #0]
 101c356:	7811      	ldrb	r1, [r2, #0]
 101c358:	f802 3b01 	strb.w	r3, [r2], #1
 101c35c:	1a83      	subs	r3, r0, r2
 101c35e:	2b00      	cmp	r3, #0
 101c360:	f804 1b01 	strb.w	r1, [r4], #1
 101c364:	dcf6      	bgt.n	101c354 <qsort+0x138>
 101c366:	9b05      	ldr	r3, [sp, #20]
 101c368:	4599      	cmp	r9, r3
 101c36a:	9307      	str	r3, [sp, #28]
 101c36c:	d29c      	bcs.n	101c2a8 <qsort+0x8c>
 101c36e:	9b00      	ldr	r3, [sp, #0]
 101c370:	fb03 8507 	mla	r5, r3, r7, r8
 101c374:	9b05      	ldr	r3, [sp, #20]
 101c376:	42ab      	cmp	r3, r5
 101c378:	d237      	bcs.n	101c3ea <qsort+0x1ce>
 101c37a:	9b00      	ldr	r3, [sp, #0]
 101c37c:	465f      	mov	r7, fp
 101c37e:	9501      	str	r5, [sp, #4]
 101c380:	425c      	negs	r4, r3
 101c382:	005e      	lsls	r6, r3, #1
 101c384:	46a1      	mov	r9, r4
 101c386:	4654      	mov	r4, sl
 101c388:	f8dd a01c 	ldr.w	sl, [sp, #28]
 101c38c:	45d0      	cmp	r8, sl
 101c38e:	d227      	bcs.n	101c3e0 <qsort+0x1c4>
 101c390:	46d3      	mov	fp, sl
 101c392:	e008      	b.n	101c3a6 <qsort+0x18a>
 101c394:	f8db 3000 	ldr.w	r3, [fp]
 101c398:	682a      	ldr	r2, [r5, #0]
 101c39a:	f8cb 2000 	str.w	r2, [fp]
 101c39e:	602b      	str	r3, [r5, #0]
 101c3a0:	4545      	cmp	r5, r8
 101c3a2:	46ab      	mov	fp, r5
 101c3a4:	d91c      	bls.n	101c3e0 <qsort+0x1c4>
 101c3a6:	eb0b 0509 	add.w	r5, fp, r9
 101c3aa:	4659      	mov	r1, fp
 101c3ac:	4628      	mov	r0, r5
 101c3ae:	47a0      	blx	r4
 101c3b0:	2800      	cmp	r0, #0
 101c3b2:	dd15      	ble.n	101c3e0 <qsort+0x1c4>
 101c3b4:	2f00      	cmp	r7, #0
 101c3b6:	d0ed      	beq.n	101c394 <qsort+0x178>
 101c3b8:	2f01      	cmp	r7, #1
 101c3ba:	bf1c      	itt	ne
 101c3bc:	19a8      	addne	r0, r5, r6
 101c3be:	462b      	movne	r3, r5
 101c3c0:	f000 8184 	beq.w	101c6cc <qsort+0x4b0>
 101c3c4:	781a      	ldrb	r2, [r3, #0]
 101c3c6:	f89b 1000 	ldrb.w	r1, [fp]
 101c3ca:	f80b 2b01 	strb.w	r2, [fp], #1
 101c3ce:	eba0 020b 	sub.w	r2, r0, fp
 101c3d2:	2a00      	cmp	r2, #0
 101c3d4:	f803 1b01 	strb.w	r1, [r3], #1
 101c3d8:	dcf4      	bgt.n	101c3c4 <qsort+0x1a8>
 101c3da:	4545      	cmp	r5, r8
 101c3dc:	46ab      	mov	fp, r5
 101c3de:	d8e2      	bhi.n	101c3a6 <qsort+0x18a>
 101c3e0:	9b00      	ldr	r3, [sp, #0]
 101c3e2:	449a      	add	sl, r3
 101c3e4:	9b01      	ldr	r3, [sp, #4]
 101c3e6:	459a      	cmp	sl, r3
 101c3e8:	d3d0      	bcc.n	101c38c <qsort+0x170>
 101c3ea:	b009      	add	sp, #36	; 0x24
 101c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101c3f0:	9b03      	ldr	r3, [sp, #12]
 101c3f2:	46d4      	mov	ip, sl
 101c3f4:	4648      	mov	r0, r9
 101c3f6:	6802      	ldr	r2, [r0, #0]
 101c3f8:	3b01      	subs	r3, #1
 101c3fa:	f8dc 1000 	ldr.w	r1, [ip]
 101c3fe:	2b00      	cmp	r3, #0
 101c400:	f840 1b04 	str.w	r1, [r0], #4
 101c404:	f84c 2b04 	str.w	r2, [ip], #4
 101c408:	dcf5      	bgt.n	101c3f6 <qsort+0x1da>
 101c40a:	e76e      	b.n	101c2ea <qsort+0xce>
 101c40c:	4623      	mov	r3, r4
 101c40e:	46b3      	mov	fp, r6
 101c410:	4654      	mov	r4, sl
 101c412:	9e02      	ldr	r6, [sp, #8]
 101c414:	469a      	mov	sl, r3
 101c416:	f1bb 0f00 	cmp.w	fp, #0
 101c41a:	d13a      	bne.n	101c492 <qsort+0x276>
 101c41c:	9b00      	ldr	r3, [sp, #0]
 101c41e:	6829      	ldr	r1, [r5, #0]
 101c420:	f8d9 0000 	ldr.w	r0, [r9]
 101c424:	195a      	adds	r2, r3, r5
 101c426:	6028      	str	r0, [r5, #0]
 101c428:	f8c9 1000 	str.w	r1, [r9]
 101c42c:	44b9      	add	r9, r7
 101c42e:	4616      	mov	r6, r2
 101c430:	2301      	movs	r3, #1
 101c432:	9301      	str	r3, [sp, #4]
 101c434:	454a      	cmp	r2, r9
 101c436:	4615      	mov	r5, r2
 101c438:	f67f af3d 	bls.w	101c2b6 <qsort+0x9a>
 101c43c:	9b06      	ldr	r3, [sp, #24]
 101c43e:	9a00      	ldr	r2, [sp, #0]
 101c440:	4413      	add	r3, r2
 101c442:	461d      	mov	r5, r3
 101c444:	9b01      	ldr	r3, [sp, #4]
 101c446:	4445      	add	r5, r8
 101c448:	2b00      	cmp	r3, #0
 101c44a:	d093      	beq.n	101c374 <qsort+0x158>
 101c44c:	9b04      	ldr	r3, [sp, #16]
 101c44e:	1b2a      	subs	r2, r5, r4
 101c450:	eba4 0409 	sub.w	r4, r4, r9
 101c454:	1af0      	subs	r0, r6, r3
 101c456:	eba3 0c08 	sub.w	ip, r3, r8
 101c45a:	9b00      	ldr	r3, [sp, #0]
 101c45c:	4584      	cmp	ip, r0
 101c45e:	4667      	mov	r7, ip
 101c460:	eba2 0203 	sub.w	r2, r2, r3
 101c464:	bfa8      	it	ge
 101c466:	4607      	movge	r7, r0
 101c468:	42a2      	cmp	r2, r4
 101c46a:	bf28      	it	cs
 101c46c:	4622      	movcs	r2, r4
 101c46e:	4611      	mov	r1, r2
 101c470:	2f00      	cmp	r7, #0
 101c472:	d159      	bne.n	101c528 <qsort+0x30c>
 101c474:	2a00      	cmp	r2, #0
 101c476:	d171      	bne.n	101c55c <qsort+0x340>
 101c478:	9b00      	ldr	r3, [sp, #0]
 101c47a:	4283      	cmp	r3, r0
 101c47c:	d349      	bcc.n	101c512 <qsort+0x2f6>
 101c47e:	9900      	ldr	r1, [sp, #0]
 101c480:	42a1      	cmp	r1, r4
 101c482:	d2b2      	bcs.n	101c3ea <qsort+0x1ce>
 101c484:	4620      	mov	r0, r4
 101c486:	eba5 0804 	sub.w	r8, r5, r4
 101c48a:	f7fd f93d 	bl	1019708 <__udivsi3>
 101c48e:	4607      	mov	r7, r0
 101c490:	e6cd      	b.n	101c22e <qsort+0x12>
 101c492:	f1bb 0f01 	cmp.w	fp, #1
 101c496:	d01e      	beq.n	101c4d6 <qsort+0x2ba>
 101c498:	9b00      	ldr	r3, [sp, #0]
 101c49a:	4649      	mov	r1, r9
 101c49c:	195a      	adds	r2, r3, r5
 101c49e:	780b      	ldrb	r3, [r1, #0]
 101c4a0:	7830      	ldrb	r0, [r6, #0]
 101c4a2:	f806 3b01 	strb.w	r3, [r6], #1
 101c4a6:	1b93      	subs	r3, r2, r6
 101c4a8:	2b00      	cmp	r3, #0
 101c4aa:	f801 0b01 	strb.w	r0, [r1], #1
 101c4ae:	dcf6      	bgt.n	101c49e <qsort+0x282>
 101c4b0:	e7bc      	b.n	101c42c <qsort+0x210>
 101c4b2:	d10c      	bne.n	101c4ce <qsort+0x2b2>
 101c4b4:	f1bb 0f00 	cmp.w	fp, #0
 101c4b8:	d11b      	bne.n	101c4f2 <qsort+0x2d6>
 101c4ba:	9b04      	ldr	r3, [sp, #16]
 101c4bc:	9900      	ldr	r1, [sp, #0]
 101c4be:	6828      	ldr	r0, [r5, #0]
 101c4c0:	681a      	ldr	r2, [r3, #0]
 101c4c2:	1859      	adds	r1, r3, r1
 101c4c4:	6018      	str	r0, [r3, #0]
 101c4c6:	602a      	str	r2, [r5, #0]
 101c4c8:	2301      	movs	r3, #1
 101c4ca:	9104      	str	r1, [sp, #16]
 101c4cc:	9301      	str	r3, [sp, #4]
 101c4ce:	9b00      	ldr	r3, [sp, #0]
 101c4d0:	195a      	adds	r2, r3, r5
 101c4d2:	4616      	mov	r6, r2
 101c4d4:	e7ae      	b.n	101c434 <qsort+0x218>
 101c4d6:	9a03      	ldr	r2, [sp, #12]
 101c4d8:	4649      	mov	r1, r9
 101c4da:	6833      	ldr	r3, [r6, #0]
 101c4dc:	3a01      	subs	r2, #1
 101c4de:	6808      	ldr	r0, [r1, #0]
 101c4e0:	2a00      	cmp	r2, #0
 101c4e2:	f846 0b04 	str.w	r0, [r6], #4
 101c4e6:	f841 3b04 	str.w	r3, [r1], #4
 101c4ea:	dcf6      	bgt.n	101c4da <qsort+0x2be>
 101c4ec:	9b00      	ldr	r3, [sp, #0]
 101c4ee:	195a      	adds	r2, r3, r5
 101c4f0:	e79c      	b.n	101c42c <qsort+0x210>
 101c4f2:	f1bb 0f01 	cmp.w	fp, #1
 101c4f6:	d04e      	beq.n	101c596 <qsort+0x37a>
 101c4f8:	9a04      	ldr	r2, [sp, #16]
 101c4fa:	9b00      	ldr	r3, [sp, #0]
 101c4fc:	18d1      	adds	r1, r2, r3
 101c4fe:	7833      	ldrb	r3, [r6, #0]
 101c500:	7810      	ldrb	r0, [r2, #0]
 101c502:	f802 3b01 	strb.w	r3, [r2], #1
 101c506:	1a8b      	subs	r3, r1, r2
 101c508:	2b00      	cmp	r3, #0
 101c50a:	f806 0b01 	strb.w	r0, [r6], #1
 101c50e:	dcf6      	bgt.n	101c4fe <qsort+0x2e2>
 101c510:	e7da      	b.n	101c4c8 <qsort+0x2ac>
 101c512:	9e00      	ldr	r6, [sp, #0]
 101c514:	4631      	mov	r1, r6
 101c516:	f7fd f8f7 	bl	1019708 <__udivsi3>
 101c51a:	4653      	mov	r3, sl
 101c51c:	4632      	mov	r2, r6
 101c51e:	4601      	mov	r1, r0
 101c520:	4640      	mov	r0, r8
 101c522:	f7ff fe7b 	bl	101c21c <qsort>
 101c526:	e7aa      	b.n	101c47e <qsort+0x262>
 101c528:	f1bb 0f02 	cmp.w	fp, #2
 101c52c:	eba6 0307 	sub.w	r3, r6, r7
 101c530:	bf04      	itt	eq
 101c532:	4447      	addeq	r7, r8
 101c534:	4642      	moveq	r2, r8
 101c536:	f040 809f 	bne.w	101c678 <qsort+0x45c>
 101c53a:	f893 c000 	ldrb.w	ip, [r3]
 101c53e:	f892 e000 	ldrb.w	lr, [r2]
 101c542:	f802 cb01 	strb.w	ip, [r2], #1
 101c546:	eba7 0c02 	sub.w	ip, r7, r2
 101c54a:	f1bc 0f00 	cmp.w	ip, #0
 101c54e:	f803 eb01 	strb.w	lr, [r3], #1
 101c552:	dcf2      	bgt.n	101c53a <qsort+0x31e>
 101c554:	2900      	cmp	r1, #0
 101c556:	d08f      	beq.n	101c478 <qsort+0x25c>
 101c558:	1a6b      	subs	r3, r5, r1
 101c55a:	e005      	b.n	101c568 <qsort+0x34c>
 101c55c:	f1bb 0f02 	cmp.w	fp, #2
 101c560:	eba5 0302 	sub.w	r3, r5, r2
 101c564:	f040 809c 	bne.w	101c6a0 <qsort+0x484>
 101c568:	1872      	adds	r2, r6, r1
 101c56a:	7819      	ldrb	r1, [r3, #0]
 101c56c:	7837      	ldrb	r7, [r6, #0]
 101c56e:	f806 1b01 	strb.w	r1, [r6], #1
 101c572:	1b91      	subs	r1, r2, r6
 101c574:	2900      	cmp	r1, #0
 101c576:	f803 7b01 	strb.w	r7, [r3], #1
 101c57a:	dcf6      	bgt.n	101c56a <qsort+0x34e>
 101c57c:	e77c      	b.n	101c478 <qsort+0x25c>
 101c57e:	47d0      	blx	sl
 101c580:	2800      	cmp	r0, #0
 101c582:	f6ff ae81 	blt.w	101c288 <qsort+0x6c>
 101c586:	4629      	mov	r1, r5
 101c588:	4630      	mov	r0, r6
 101c58a:	47d0      	blx	sl
 101c58c:	ea15 0420 	ands.w	r4, r5, r0, asr #32
 101c590:	bf38      	it	cc
 101c592:	4634      	movcc	r4, r6
 101c594:	e678      	b.n	101c288 <qsort+0x6c>
 101c596:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 101c59a:	680b      	ldr	r3, [r1, #0]
 101c59c:	3a01      	subs	r2, #1
 101c59e:	6830      	ldr	r0, [r6, #0]
 101c5a0:	2a00      	cmp	r2, #0
 101c5a2:	f841 0b04 	str.w	r0, [r1], #4
 101c5a6:	f846 3b04 	str.w	r3, [r6], #4
 101c5aa:	dcf6      	bgt.n	101c59a <qsort+0x37e>
 101c5ac:	9b04      	ldr	r3, [sp, #16]
 101c5ae:	9a00      	ldr	r2, [sp, #0]
 101c5b0:	4413      	add	r3, r2
 101c5b2:	4619      	mov	r1, r3
 101c5b4:	e788      	b.n	101c4c8 <qsort+0x2ac>
 101c5b6:	08fd      	lsrs	r5, r7, #3
 101c5b8:	4613      	mov	r3, r2
 101c5ba:	4640      	mov	r0, r8
 101c5bc:	fb03 f305 	mul.w	r3, r3, r5
 101c5c0:	eb08 0603 	add.w	r6, r8, r3
 101c5c4:	18f5      	adds	r5, r6, r3
 101c5c6:	4631      	mov	r1, r6
 101c5c8:	9302      	str	r3, [sp, #8]
 101c5ca:	005b      	lsls	r3, r3, #1
 101c5cc:	9304      	str	r3, [sp, #16]
 101c5ce:	47d0      	blx	sl
 101c5d0:	4629      	mov	r1, r5
 101c5d2:	2800      	cmp	r0, #0
 101c5d4:	4630      	mov	r0, r6
 101c5d6:	db6e      	blt.n	101c6b6 <qsort+0x49a>
 101c5d8:	47d0      	blx	sl
 101c5da:	2800      	cmp	r0, #0
 101c5dc:	dc06      	bgt.n	101c5ec <qsort+0x3d0>
 101c5de:	4629      	mov	r1, r5
 101c5e0:	4640      	mov	r0, r8
 101c5e2:	47d0      	blx	sl
 101c5e4:	ea18 0620 	ands.w	r6, r8, r0, asr #32
 101c5e8:	bf38      	it	cc
 101c5ea:	462e      	movcc	r6, r5
 101c5ec:	9a02      	ldr	r2, [sp, #8]
 101c5ee:	4621      	mov	r1, r4
 101c5f0:	1aa3      	subs	r3, r4, r2
 101c5f2:	18a5      	adds	r5, r4, r2
 101c5f4:	9301      	str	r3, [sp, #4]
 101c5f6:	4618      	mov	r0, r3
 101c5f8:	47d0      	blx	sl
 101c5fa:	4629      	mov	r1, r5
 101c5fc:	2800      	cmp	r0, #0
 101c5fe:	4620      	mov	r0, r4
 101c600:	f2c0 80c0 	blt.w	101c784 <qsort+0x568>
 101c604:	47d0      	blx	sl
 101c606:	2800      	cmp	r0, #0
 101c608:	dc09      	bgt.n	101c61e <qsort+0x402>
 101c60a:	9c01      	ldr	r4, [sp, #4]
 101c60c:	4629      	mov	r1, r5
 101c60e:	4620      	mov	r0, r4
 101c610:	47d0      	blx	sl
 101c612:	4623      	mov	r3, r4
 101c614:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 101c618:	bf38      	it	cc
 101c61a:	462b      	movcc	r3, r5
 101c61c:	461c      	mov	r4, r3
 101c61e:	9b04      	ldr	r3, [sp, #16]
 101c620:	9a02      	ldr	r2, [sp, #8]
 101c622:	eba9 0303 	sub.w	r3, r9, r3
 101c626:	9301      	str	r3, [sp, #4]
 101c628:	4615      	mov	r5, r2
 101c62a:	441d      	add	r5, r3
 101c62c:	4618      	mov	r0, r3
 101c62e:	4629      	mov	r1, r5
 101c630:	47d0      	blx	sl
 101c632:	4649      	mov	r1, r9
 101c634:	2800      	cmp	r0, #0
 101c636:	4628      	mov	r0, r5
 101c638:	f2c0 80b3 	blt.w	101c7a2 <qsort+0x586>
 101c63c:	47d0      	blx	sl
 101c63e:	2800      	cmp	r0, #0
 101c640:	f73f ae17 	bgt.w	101c272 <qsort+0x56>
 101c644:	9d01      	ldr	r5, [sp, #4]
 101c646:	4649      	mov	r1, r9
 101c648:	4628      	mov	r0, r5
 101c64a:	47d0      	blx	sl
 101c64c:	462b      	mov	r3, r5
 101c64e:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 101c652:	bf38      	it	cc
 101c654:	464b      	movcc	r3, r9
 101c656:	461d      	mov	r5, r3
 101c658:	e60b      	b.n	101c272 <qsort+0x56>
 101c65a:	9a03      	ldr	r2, [sp, #12]
 101c65c:	4640      	mov	r0, r8
 101c65e:	6803      	ldr	r3, [r0, #0]
 101c660:	3a01      	subs	r2, #1
 101c662:	6821      	ldr	r1, [r4, #0]
 101c664:	2a00      	cmp	r2, #0
 101c666:	f840 1b04 	str.w	r1, [r0], #4
 101c66a:	f844 3b04 	str.w	r3, [r4], #4
 101c66e:	dcf6      	bgt.n	101c65e <qsort+0x442>
 101c670:	9b00      	ldr	r3, [sp, #0]
 101c672:	4443      	add	r3, r8
 101c674:	9305      	str	r3, [sp, #20]
 101c676:	e613      	b.n	101c2a0 <qsort+0x84>
 101c678:	ea4f 0c97 	mov.w	ip, r7, lsr #2
 101c67c:	468e      	mov	lr, r1
 101c67e:	4647      	mov	r7, r8
 101c680:	683a      	ldr	r2, [r7, #0]
 101c682:	f10c 3cff 	add.w	ip, ip, #4294967295
 101c686:	6819      	ldr	r1, [r3, #0]
 101c688:	f1bc 0f00 	cmp.w	ip, #0
 101c68c:	f847 1b04 	str.w	r1, [r7], #4
 101c690:	f843 2b04 	str.w	r2, [r3], #4
 101c694:	dcf4      	bgt.n	101c680 <qsort+0x464>
 101c696:	4671      	mov	r1, lr
 101c698:	2900      	cmp	r1, #0
 101c69a:	f43f aeed 	beq.w	101c478 <qsort+0x25c>
 101c69e:	1a6b      	subs	r3, r5, r1
 101c6a0:	088a      	lsrs	r2, r1, #2
 101c6a2:	6831      	ldr	r1, [r6, #0]
 101c6a4:	3a01      	subs	r2, #1
 101c6a6:	681f      	ldr	r7, [r3, #0]
 101c6a8:	2a00      	cmp	r2, #0
 101c6aa:	f846 7b04 	str.w	r7, [r6], #4
 101c6ae:	f843 1b04 	str.w	r1, [r3], #4
 101c6b2:	dcf6      	bgt.n	101c6a2 <qsort+0x486>
 101c6b4:	e6e0      	b.n	101c478 <qsort+0x25c>
 101c6b6:	47d0      	blx	sl
 101c6b8:	2800      	cmp	r0, #0
 101c6ba:	db97      	blt.n	101c5ec <qsort+0x3d0>
 101c6bc:	4629      	mov	r1, r5
 101c6be:	4640      	mov	r0, r8
 101c6c0:	47d0      	blx	sl
 101c6c2:	ea15 0620 	ands.w	r6, r5, r0, asr #32
 101c6c6:	bf38      	it	cc
 101c6c8:	4646      	movcc	r6, r8
 101c6ca:	e78f      	b.n	101c5ec <qsort+0x3d0>
 101c6cc:	9b03      	ldr	r3, [sp, #12]
 101c6ce:	4629      	mov	r1, r5
 101c6d0:	f8db 2000 	ldr.w	r2, [fp]
 101c6d4:	3b01      	subs	r3, #1
 101c6d6:	6808      	ldr	r0, [r1, #0]
 101c6d8:	2b00      	cmp	r3, #0
 101c6da:	f84b 0b04 	str.w	r0, [fp], #4
 101c6de:	f841 2b04 	str.w	r2, [r1], #4
 101c6e2:	dcf5      	bgt.n	101c6d0 <qsort+0x4b4>
 101c6e4:	e65c      	b.n	101c3a0 <qsort+0x184>
 101c6e6:	9b00      	ldr	r3, [sp, #0]
 101c6e8:	eb08 0503 	add.w	r5, r8, r3
 101c6ec:	fb03 8107 	mla	r1, r3, r7, r8
 101c6f0:	42a9      	cmp	r1, r5
 101c6f2:	9101      	str	r1, [sp, #4]
 101c6f4:	f67f ae79 	bls.w	101c3ea <qsort+0x1ce>
 101c6f8:	425c      	negs	r4, r3
 101c6fa:	005e      	lsls	r6, r3, #1
 101c6fc:	465f      	mov	r7, fp
 101c6fe:	46a1      	mov	r9, r4
 101c700:	4654      	mov	r4, sl
 101c702:	45a8      	cmp	r8, r5
 101c704:	d229      	bcs.n	101c75a <qsort+0x53e>
 101c706:	46ab      	mov	fp, r5
 101c708:	e00a      	b.n	101c720 <qsort+0x504>
 101c70a:	f8db 3000 	ldr.w	r3, [fp]
 101c70e:	f8da 2000 	ldr.w	r2, [sl]
 101c712:	f8cb 2000 	str.w	r2, [fp]
 101c716:	f8ca 3000 	str.w	r3, [sl]
 101c71a:	45c2      	cmp	sl, r8
 101c71c:	46d3      	mov	fp, sl
 101c71e:	d91c      	bls.n	101c75a <qsort+0x53e>
 101c720:	eb0b 0a09 	add.w	sl, fp, r9
 101c724:	4659      	mov	r1, fp
 101c726:	4650      	mov	r0, sl
 101c728:	47a0      	blx	r4
 101c72a:	2800      	cmp	r0, #0
 101c72c:	dd15      	ble.n	101c75a <qsort+0x53e>
 101c72e:	2f00      	cmp	r7, #0
 101c730:	d0eb      	beq.n	101c70a <qsort+0x4ee>
 101c732:	2f01      	cmp	r7, #1
 101c734:	bf1c      	itt	ne
 101c736:	eb0a 0006 	addne.w	r0, sl, r6
 101c73a:	4653      	movne	r3, sl
 101c73c:	d015      	beq.n	101c76a <qsort+0x54e>
 101c73e:	781a      	ldrb	r2, [r3, #0]
 101c740:	f89b 1000 	ldrb.w	r1, [fp]
 101c744:	f80b 2b01 	strb.w	r2, [fp], #1
 101c748:	eba0 020b 	sub.w	r2, r0, fp
 101c74c:	2a00      	cmp	r2, #0
 101c74e:	f803 1b01 	strb.w	r1, [r3], #1
 101c752:	dcf4      	bgt.n	101c73e <qsort+0x522>
 101c754:	45c2      	cmp	sl, r8
 101c756:	46d3      	mov	fp, sl
 101c758:	d8e2      	bhi.n	101c720 <qsort+0x504>
 101c75a:	9b00      	ldr	r3, [sp, #0]
 101c75c:	441d      	add	r5, r3
 101c75e:	9b01      	ldr	r3, [sp, #4]
 101c760:	42ab      	cmp	r3, r5
 101c762:	d8ce      	bhi.n	101c702 <qsort+0x4e6>
 101c764:	b009      	add	sp, #36	; 0x24
 101c766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101c76a:	9b03      	ldr	r3, [sp, #12]
 101c76c:	4651      	mov	r1, sl
 101c76e:	f8db 2000 	ldr.w	r2, [fp]
 101c772:	3b01      	subs	r3, #1
 101c774:	6808      	ldr	r0, [r1, #0]
 101c776:	2b00      	cmp	r3, #0
 101c778:	f84b 0b04 	str.w	r0, [fp], #4
 101c77c:	f841 2b04 	str.w	r2, [r1], #4
 101c780:	dcf5      	bgt.n	101c76e <qsort+0x552>
 101c782:	e7ca      	b.n	101c71a <qsort+0x4fe>
 101c784:	47d0      	blx	sl
 101c786:	2800      	cmp	r0, #0
 101c788:	f6ff af49 	blt.w	101c61e <qsort+0x402>
 101c78c:	9c01      	ldr	r4, [sp, #4]
 101c78e:	4629      	mov	r1, r5
 101c790:	4620      	mov	r0, r4
 101c792:	47d0      	blx	sl
 101c794:	4623      	mov	r3, r4
 101c796:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 101c79a:	bf28      	it	cs
 101c79c:	462b      	movcs	r3, r5
 101c79e:	461c      	mov	r4, r3
 101c7a0:	e73d      	b.n	101c61e <qsort+0x402>
 101c7a2:	47d0      	blx	sl
 101c7a4:	2800      	cmp	r0, #0
 101c7a6:	f6ff ad64 	blt.w	101c272 <qsort+0x56>
 101c7aa:	9d01      	ldr	r5, [sp, #4]
 101c7ac:	4649      	mov	r1, r9
 101c7ae:	4628      	mov	r0, r5
 101c7b0:	47d0      	blx	sl
 101c7b2:	462b      	mov	r3, r5
 101c7b4:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 101c7b8:	bf28      	it	cs
 101c7ba:	464b      	movcs	r3, r9
 101c7bc:	461d      	mov	r5, r3
 101c7be:	e558      	b.n	101c272 <qsort+0x56>
 101c7c0:	4623      	mov	r3, r4
 101c7c2:	f8cd b004 	str.w	fp, [sp, #4]
 101c7c6:	4654      	mov	r4, sl
 101c7c8:	46b3      	mov	fp, r6
 101c7ca:	469a      	mov	sl, r3
 101c7cc:	9e02      	ldr	r6, [sp, #8]
 101c7ce:	e635      	b.n	101c43c <qsort+0x220>

0101c7d0 <_sbrk_r>:
 101c7d0:	b538      	push	{r3, r4, r5, lr}
 101c7d2:	f645 7450 	movw	r4, #24400	; 0x5f50
 101c7d6:	f2c0 1446 	movt	r4, #326	; 0x146
 101c7da:	4605      	mov	r5, r0
 101c7dc:	4608      	mov	r0, r1
 101c7de:	2300      	movs	r3, #0
 101c7e0:	6023      	str	r3, [r4, #0]
 101c7e2:	f009 ea36 	blx	1025c50 <_sbrk>
 101c7e6:	1c43      	adds	r3, r0, #1
 101c7e8:	d000      	beq.n	101c7ec <_sbrk_r+0x1c>
 101c7ea:	bd38      	pop	{r3, r4, r5, pc}
 101c7ec:	6823      	ldr	r3, [r4, #0]
 101c7ee:	2b00      	cmp	r3, #0
 101c7f0:	d0fb      	beq.n	101c7ea <_sbrk_r+0x1a>
 101c7f2:	602b      	str	r3, [r5, #0]
 101c7f4:	bd38      	pop	{r3, r4, r5, pc}
 101c7f6:	bf00      	nop

0101c7f8 <_snprintf_r>:
 101c7f8:	b408      	push	{r3}
 101c7fa:	b570      	push	{r4, r5, r6, lr}
 101c7fc:	1e14      	subs	r4, r2, #0
 101c7fe:	4605      	mov	r5, r0
 101c800:	b09d      	sub	sp, #116	; 0x74
 101c802:	bfbe      	ittt	lt
 101c804:	228b      	movlt	r2, #139	; 0x8b
 101c806:	f04f 30ff 	movlt.w	r0, #4294967295
 101c80a:	602a      	strlt	r2, [r5, #0]
 101c80c:	db17      	blt.n	101c83e <_snprintf_r+0x46>
 101c80e:	f44f 7302 	mov.w	r3, #520	; 0x208
 101c812:	9102      	str	r1, [sp, #8]
 101c814:	9106      	str	r1, [sp, #24]
 101c816:	f8ad 3014 	strh.w	r3, [sp, #20]
 101c81a:	d115      	bne.n	101c848 <_snprintf_r+0x50>
 101c81c:	ae22      	add	r6, sp, #136	; 0x88
 101c81e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101c820:	a902      	add	r1, sp, #8
 101c822:	9404      	str	r4, [sp, #16]
 101c824:	4633      	mov	r3, r6
 101c826:	9407      	str	r4, [sp, #28]
 101c828:	9601      	str	r6, [sp, #4]
 101c82a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101c82e:	f8ad 4016 	strh.w	r4, [sp, #22]
 101c832:	f000 fd21 	bl	101d278 <_svfprintf_r>
 101c836:	1c43      	adds	r3, r0, #1
 101c838:	da01      	bge.n	101c83e <_snprintf_r+0x46>
 101c83a:	238b      	movs	r3, #139	; 0x8b
 101c83c:	602b      	str	r3, [r5, #0]
 101c83e:	b01d      	add	sp, #116	; 0x74
 101c840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101c844:	b001      	add	sp, #4
 101c846:	4770      	bx	lr
 101c848:	ab22      	add	r3, sp, #136	; 0x88
 101c84a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101c84c:	a902      	add	r1, sp, #8
 101c84e:	9301      	str	r3, [sp, #4]
 101c850:	3c01      	subs	r4, #1
 101c852:	9404      	str	r4, [sp, #16]
 101c854:	9407      	str	r4, [sp, #28]
 101c856:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101c85a:	f8ad 4016 	strh.w	r4, [sp, #22]
 101c85e:	f000 fd0b 	bl	101d278 <_svfprintf_r>
 101c862:	1c42      	adds	r2, r0, #1
 101c864:	f04f 0200 	mov.w	r2, #0
 101c868:	bfbc      	itt	lt
 101c86a:	238b      	movlt	r3, #139	; 0x8b
 101c86c:	602b      	strlt	r3, [r5, #0]
 101c86e:	9b02      	ldr	r3, [sp, #8]
 101c870:	701a      	strb	r2, [r3, #0]
 101c872:	b01d      	add	sp, #116	; 0x74
 101c874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101c878:	b001      	add	sp, #4
 101c87a:	4770      	bx	lr

0101c87c <snprintf>:
 101c87c:	b40c      	push	{r2, r3}
 101c87e:	f64a 1348 	movw	r3, #43336	; 0xa948
 101c882:	f2c0 1306 	movt	r3, #262	; 0x106
 101c886:	b570      	push	{r4, r5, r6, lr}
 101c888:	1e0c      	subs	r4, r1, #0
 101c88a:	681d      	ldr	r5, [r3, #0]
 101c88c:	b09c      	sub	sp, #112	; 0x70
 101c88e:	bfbe      	ittt	lt
 101c890:	238b      	movlt	r3, #139	; 0x8b
 101c892:	f04f 30ff 	movlt.w	r0, #4294967295
 101c896:	602b      	strlt	r3, [r5, #0]
 101c898:	db18      	blt.n	101c8cc <snprintf+0x50>
 101c89a:	f44f 7302 	mov.w	r3, #520	; 0x208
 101c89e:	9002      	str	r0, [sp, #8]
 101c8a0:	9006      	str	r0, [sp, #24]
 101c8a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 101c8a6:	d116      	bne.n	101c8d6 <snprintf+0x5a>
 101c8a8:	ae21      	add	r6, sp, #132	; 0x84
 101c8aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101c8ac:	a902      	add	r1, sp, #8
 101c8ae:	4628      	mov	r0, r5
 101c8b0:	4633      	mov	r3, r6
 101c8b2:	9404      	str	r4, [sp, #16]
 101c8b4:	9407      	str	r4, [sp, #28]
 101c8b6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101c8ba:	9601      	str	r6, [sp, #4]
 101c8bc:	f8ad 4016 	strh.w	r4, [sp, #22]
 101c8c0:	f000 fcda 	bl	101d278 <_svfprintf_r>
 101c8c4:	1c43      	adds	r3, r0, #1
 101c8c6:	da01      	bge.n	101c8cc <snprintf+0x50>
 101c8c8:	238b      	movs	r3, #139	; 0x8b
 101c8ca:	602b      	str	r3, [r5, #0]
 101c8cc:	b01c      	add	sp, #112	; 0x70
 101c8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101c8d2:	b002      	add	sp, #8
 101c8d4:	4770      	bx	lr
 101c8d6:	ab21      	add	r3, sp, #132	; 0x84
 101c8d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101c8da:	a902      	add	r1, sp, #8
 101c8dc:	4628      	mov	r0, r5
 101c8de:	9301      	str	r3, [sp, #4]
 101c8e0:	3c01      	subs	r4, #1
 101c8e2:	9404      	str	r4, [sp, #16]
 101c8e4:	9407      	str	r4, [sp, #28]
 101c8e6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 101c8ea:	f8ad 4016 	strh.w	r4, [sp, #22]
 101c8ee:	f000 fcc3 	bl	101d278 <_svfprintf_r>
 101c8f2:	1c42      	adds	r2, r0, #1
 101c8f4:	f04f 0200 	mov.w	r2, #0
 101c8f8:	bfbc      	itt	lt
 101c8fa:	238b      	movlt	r3, #139	; 0x8b
 101c8fc:	602b      	strlt	r3, [r5, #0]
 101c8fe:	9b02      	ldr	r3, [sp, #8]
 101c900:	701a      	strb	r2, [r3, #0]
 101c902:	b01c      	add	sp, #112	; 0x70
 101c904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101c908:	b002      	add	sp, #8
 101c90a:	4770      	bx	lr

0101c90c <strcasecmp>:
 101c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 101c90e:	4607      	mov	r7, r0
 101c910:	460e      	mov	r6, r1
 101c912:	f817 4b01 	ldrb.w	r4, [r7], #1
 101c916:	f7fe fab1 	bl	101ae7c <__locale_ctype_ptr>
 101c91a:	f816 5b01 	ldrb.w	r5, [r6], #1
 101c91e:	4420      	add	r0, r4
 101c920:	7843      	ldrb	r3, [r0, #1]
 101c922:	f003 0303 	and.w	r3, r3, #3
 101c926:	2b01      	cmp	r3, #1
 101c928:	bf08      	it	eq
 101c92a:	3420      	addeq	r4, #32
 101c92c:	f7fe faa6 	bl	101ae7c <__locale_ctype_ptr>
 101c930:	4428      	add	r0, r5
 101c932:	7843      	ldrb	r3, [r0, #1]
 101c934:	f003 0303 	and.w	r3, r3, #3
 101c938:	2b01      	cmp	r3, #1
 101c93a:	d004      	beq.n	101c946 <strcasecmp+0x3a>
 101c93c:	1b60      	subs	r0, r4, r5
 101c93e:	d101      	bne.n	101c944 <strcasecmp+0x38>
 101c940:	2d00      	cmp	r5, #0
 101c942:	d1e6      	bne.n	101c912 <strcasecmp+0x6>
 101c944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101c946:	f105 0020 	add.w	r0, r5, #32
 101c94a:	1a20      	subs	r0, r4, r0
 101c94c:	d0e1      	beq.n	101c912 <strcasecmp+0x6>
 101c94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0101c950 <strcat>:
 101c950:	0783      	lsls	r3, r0, #30
 101c952:	b510      	push	{r4, lr}
 101c954:	4604      	mov	r4, r0
 101c956:	d111      	bne.n	101c97c <strcat+0x2c>
 101c958:	6822      	ldr	r2, [r4, #0]
 101c95a:	4620      	mov	r0, r4
 101c95c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101c960:	ea23 0302 	bic.w	r3, r3, r2
 101c964:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101c968:	d108      	bne.n	101c97c <strcat+0x2c>
 101c96a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 101c96e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101c972:	ea23 0302 	bic.w	r3, r3, r2
 101c976:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101c97a:	d0f6      	beq.n	101c96a <strcat+0x1a>
 101c97c:	7803      	ldrb	r3, [r0, #0]
 101c97e:	b11b      	cbz	r3, 101c988 <strcat+0x38>
 101c980:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 101c984:	2b00      	cmp	r3, #0
 101c986:	d1fb      	bne.n	101c980 <strcat+0x30>
 101c988:	f000 f9e8 	bl	101cd5c <strcpy>
 101c98c:	4620      	mov	r0, r4
 101c98e:	bd10      	pop	{r4, pc}

0101c990 <strchr>:
 101c990:	b2c9      	uxtb	r1, r1
 101c992:	f000 0303 	and.w	r3, r0, #3
 101c996:	2900      	cmp	r1, #0
 101c998:	d042      	beq.n	101ca20 <strchr+0x90>
 101c99a:	b17b      	cbz	r3, 101c9bc <strchr+0x2c>
 101c99c:	7803      	ldrb	r3, [r0, #0]
 101c99e:	2b00      	cmp	r3, #0
 101c9a0:	d066      	beq.n	101ca70 <strchr+0xe0>
 101c9a2:	4299      	cmp	r1, r3
 101c9a4:	d061      	beq.n	101ca6a <strchr+0xda>
 101c9a6:	1c43      	adds	r3, r0, #1
 101c9a8:	e005      	b.n	101c9b6 <strchr+0x26>
 101c9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 101c9ae:	2a00      	cmp	r2, #0
 101c9b0:	d05c      	beq.n	101ca6c <strchr+0xdc>
 101c9b2:	428a      	cmp	r2, r1
 101c9b4:	d059      	beq.n	101ca6a <strchr+0xda>
 101c9b6:	079a      	lsls	r2, r3, #30
 101c9b8:	4618      	mov	r0, r3
 101c9ba:	d1f6      	bne.n	101c9aa <strchr+0x1a>
 101c9bc:	b470      	push	{r4, r5, r6}
 101c9be:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 101c9c2:	6804      	ldr	r4, [r0, #0]
 101c9c4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 101c9c8:	ea86 0504 	eor.w	r5, r6, r4
 101c9cc:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 101c9d0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 101c9d4:	ea23 0304 	bic.w	r3, r3, r4
 101c9d8:	ea22 0205 	bic.w	r2, r2, r5
 101c9dc:	4313      	orrs	r3, r2
 101c9de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101c9e2:	d10f      	bne.n	101ca04 <strchr+0x74>
 101c9e4:	f850 4f04 	ldr.w	r4, [r0, #4]!
 101c9e8:	ea84 0506 	eor.w	r5, r4, r6
 101c9ec:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 101c9f0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 101c9f4:	ea23 0304 	bic.w	r3, r3, r4
 101c9f8:	ea22 0205 	bic.w	r2, r2, r5
 101c9fc:	4313      	orrs	r3, r2
 101c9fe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101ca02:	d0ef      	beq.n	101c9e4 <strchr+0x54>
 101ca04:	7803      	ldrb	r3, [r0, #0]
 101ca06:	b143      	cbz	r3, 101ca1a <strchr+0x8a>
 101ca08:	4299      	cmp	r1, r3
 101ca0a:	d102      	bne.n	101ca12 <strchr+0x82>
 101ca0c:	e006      	b.n	101ca1c <strchr+0x8c>
 101ca0e:	428b      	cmp	r3, r1
 101ca10:	d004      	beq.n	101ca1c <strchr+0x8c>
 101ca12:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 101ca16:	2b00      	cmp	r3, #0
 101ca18:	d1f9      	bne.n	101ca0e <strchr+0x7e>
 101ca1a:	4618      	mov	r0, r3
 101ca1c:	bc70      	pop	{r4, r5, r6}
 101ca1e:	4770      	bx	lr
 101ca20:	b15b      	cbz	r3, 101ca3a <strchr+0xaa>
 101ca22:	7803      	ldrb	r3, [r0, #0]
 101ca24:	b30b      	cbz	r3, 101ca6a <strchr+0xda>
 101ca26:	1c43      	adds	r3, r0, #1
 101ca28:	e001      	b.n	101ca2e <strchr+0x9e>
 101ca2a:	7802      	ldrb	r2, [r0, #0]
 101ca2c:	b1ea      	cbz	r2, 101ca6a <strchr+0xda>
 101ca2e:	f013 0f03 	tst.w	r3, #3
 101ca32:	4618      	mov	r0, r3
 101ca34:	f103 0301 	add.w	r3, r3, #1
 101ca38:	d1f7      	bne.n	101ca2a <strchr+0x9a>
 101ca3a:	6802      	ldr	r2, [r0, #0]
 101ca3c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101ca40:	ea23 0302 	bic.w	r3, r3, r2
 101ca44:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101ca48:	d108      	bne.n	101ca5c <strchr+0xcc>
 101ca4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 101ca4e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 101ca52:	ea23 0302 	bic.w	r3, r3, r2
 101ca56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 101ca5a:	d0f6      	beq.n	101ca4a <strchr+0xba>
 101ca5c:	7803      	ldrb	r3, [r0, #0]
 101ca5e:	b123      	cbz	r3, 101ca6a <strchr+0xda>
 101ca60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 101ca64:	2b00      	cmp	r3, #0
 101ca66:	d1fb      	bne.n	101ca60 <strchr+0xd0>
 101ca68:	4770      	bx	lr
 101ca6a:	4770      	bx	lr
 101ca6c:	4610      	mov	r0, r2
 101ca6e:	4770      	bx	lr
 101ca70:	4618      	mov	r0, r3
 101ca72:	4770      	bx	lr
	...
 101ca80:	eba2 0003 	sub.w	r0, r2, r3
 101ca84:	4770      	bx	lr
 101ca86:	bf00      	nop

0101ca88 <strcmp>:
 101ca88:	7802      	ldrb	r2, [r0, #0]
 101ca8a:	780b      	ldrb	r3, [r1, #0]
 101ca8c:	2a01      	cmp	r2, #1
 101ca8e:	bf28      	it	cs
 101ca90:	429a      	cmpcs	r2, r3
 101ca92:	d1f5      	bne.n	101ca80 <strchr+0xf0>
 101ca94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 101ca98:	ea40 0401 	orr.w	r4, r0, r1
 101ca9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 101caa0:	f06f 0c00 	mvn.w	ip, #0
 101caa4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 101caa8:	b312      	cbz	r2, 101caf0 <strcmp+0x68>
 101caaa:	ea80 0401 	eor.w	r4, r0, r1
 101caae:	f014 0f07 	tst.w	r4, #7
 101cab2:	d16a      	bne.n	101cb8a <strcmp+0x102>
 101cab4:	f000 0407 	and.w	r4, r0, #7
 101cab8:	f020 0007 	bic.w	r0, r0, #7
 101cabc:	f004 0503 	and.w	r5, r4, #3
 101cac0:	f021 0107 	bic.w	r1, r1, #7
 101cac4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 101cac8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 101cacc:	f014 0f04 	tst.w	r4, #4
 101cad0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 101cad4:	fa0c f405 	lsl.w	r4, ip, r5
 101cad8:	ea62 0204 	orn	r2, r2, r4
 101cadc:	ea66 0604 	orn	r6, r6, r4
 101cae0:	d00a      	beq.n	101caf8 <strcmp+0x70>
 101cae2:	ea63 0304 	orn	r3, r3, r4
 101cae6:	4662      	mov	r2, ip
 101cae8:	ea67 0704 	orn	r7, r7, r4
 101caec:	4666      	mov	r6, ip
 101caee:	e003      	b.n	101caf8 <strcmp+0x70>
 101caf0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 101caf4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 101caf8:	fa82 f54c 	uadd8	r5, r2, ip
 101cafc:	ea82 0406 	eor.w	r4, r2, r6
 101cb00:	faa4 f48c 	sel	r4, r4, ip
 101cb04:	bb6c      	cbnz	r4, 101cb62 <strcmp+0xda>
 101cb06:	fa83 f54c 	uadd8	r5, r3, ip
 101cb0a:	ea83 0507 	eor.w	r5, r3, r7
 101cb0e:	faa5 f58c 	sel	r5, r5, ip
 101cb12:	b995      	cbnz	r5, 101cb3a <strcmp+0xb2>
 101cb14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 101cb18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 101cb1c:	fa82 f54c 	uadd8	r5, r2, ip
 101cb20:	ea82 0406 	eor.w	r4, r2, r6
 101cb24:	faa4 f48c 	sel	r4, r4, ip
 101cb28:	fa83 f54c 	uadd8	r5, r3, ip
 101cb2c:	ea83 0507 	eor.w	r5, r3, r7
 101cb30:	faa5 f58c 	sel	r5, r5, ip
 101cb34:	4325      	orrs	r5, r4
 101cb36:	d0db      	beq.n	101caf0 <strcmp+0x68>
 101cb38:	b99c      	cbnz	r4, 101cb62 <strcmp+0xda>
 101cb3a:	ba2d      	rev	r5, r5
 101cb3c:	fab5 f485 	clz	r4, r5
 101cb40:	f024 0407 	bic.w	r4, r4, #7
 101cb44:	fa27 f104 	lsr.w	r1, r7, r4
 101cb48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 101cb4c:	fa23 f304 	lsr.w	r3, r3, r4
 101cb50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 101cb54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101cb58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101cb5c:	eba0 0001 	sub.w	r0, r0, r1
 101cb60:	4770      	bx	lr
 101cb62:	ba24      	rev	r4, r4
 101cb64:	fab4 f484 	clz	r4, r4
 101cb68:	f024 0407 	bic.w	r4, r4, #7
 101cb6c:	fa26 f104 	lsr.w	r1, r6, r4
 101cb70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 101cb74:	fa22 f204 	lsr.w	r2, r2, r4
 101cb78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 101cb7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101cb80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101cb84:	eba0 0001 	sub.w	r0, r0, r1
 101cb88:	4770      	bx	lr
 101cb8a:	f014 0f03 	tst.w	r4, #3
 101cb8e:	d13c      	bne.n	101cc0a <strcmp+0x182>
 101cb90:	f010 0403 	ands.w	r4, r0, #3
 101cb94:	d128      	bne.n	101cbe8 <strcmp+0x160>
 101cb96:	f850 2b08 	ldr.w	r2, [r0], #8
 101cb9a:	f851 3b08 	ldr.w	r3, [r1], #8
 101cb9e:	fa82 f54c 	uadd8	r5, r2, ip
 101cba2:	ea82 0503 	eor.w	r5, r2, r3
 101cba6:	faa5 f58c 	sel	r5, r5, ip
 101cbaa:	b95d      	cbnz	r5, 101cbc4 <strcmp+0x13c>
 101cbac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 101cbb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 101cbb4:	fa82 f54c 	uadd8	r5, r2, ip
 101cbb8:	ea82 0503 	eor.w	r5, r2, r3
 101cbbc:	faa5 f58c 	sel	r5, r5, ip
 101cbc0:	2d00      	cmp	r5, #0
 101cbc2:	d0e8      	beq.n	101cb96 <strcmp+0x10e>
 101cbc4:	ba2d      	rev	r5, r5
 101cbc6:	fab5 f485 	clz	r4, r5
 101cbca:	f024 0407 	bic.w	r4, r4, #7
 101cbce:	fa23 f104 	lsr.w	r1, r3, r4
 101cbd2:	fa22 f204 	lsr.w	r2, r2, r4
 101cbd6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 101cbda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101cbde:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101cbe2:	eba0 0001 	sub.w	r0, r0, r1
 101cbe6:	4770      	bx	lr
 101cbe8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 101cbec:	f020 0003 	bic.w	r0, r0, #3
 101cbf0:	f850 2b08 	ldr.w	r2, [r0], #8
 101cbf4:	f021 0103 	bic.w	r1, r1, #3
 101cbf8:	f851 3b08 	ldr.w	r3, [r1], #8
 101cbfc:	fa0c f404 	lsl.w	r4, ip, r4
 101cc00:	ea62 0204 	orn	r2, r2, r4
 101cc04:	ea63 0304 	orn	r3, r3, r4
 101cc08:	e7c9      	b.n	101cb9e <strcmp+0x116>
 101cc0a:	f010 0403 	ands.w	r4, r0, #3
 101cc0e:	d01a      	beq.n	101cc46 <strcmp+0x1be>
 101cc10:	eba1 0104 	sub.w	r1, r1, r4
 101cc14:	f020 0003 	bic.w	r0, r0, #3
 101cc18:	07e4      	lsls	r4, r4, #31
 101cc1a:	f850 2b04 	ldr.w	r2, [r0], #4
 101cc1e:	d006      	beq.n	101cc2e <strcmp+0x1a6>
 101cc20:	d20f      	bcs.n	101cc42 <strcmp+0x1ba>
 101cc22:	788b      	ldrb	r3, [r1, #2]
 101cc24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 101cc28:	1ae4      	subs	r4, r4, r3
 101cc2a:	d106      	bne.n	101cc3a <strcmp+0x1b2>
 101cc2c:	b12b      	cbz	r3, 101cc3a <strcmp+0x1b2>
 101cc2e:	78cb      	ldrb	r3, [r1, #3]
 101cc30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 101cc34:	1ae4      	subs	r4, r4, r3
 101cc36:	d100      	bne.n	101cc3a <strcmp+0x1b2>
 101cc38:	b91b      	cbnz	r3, 101cc42 <strcmp+0x1ba>
 101cc3a:	4620      	mov	r0, r4
 101cc3c:	f85d 4b10 	ldr.w	r4, [sp], #16
 101cc40:	4770      	bx	lr
 101cc42:	f101 0104 	add.w	r1, r1, #4
 101cc46:	f850 2b04 	ldr.w	r2, [r0], #4
 101cc4a:	07cc      	lsls	r4, r1, #31
 101cc4c:	f021 0103 	bic.w	r1, r1, #3
 101cc50:	f851 3b04 	ldr.w	r3, [r1], #4
 101cc54:	d848      	bhi.n	101cce8 <strcmp+0x260>
 101cc56:	d224      	bcs.n	101cca2 <strcmp+0x21a>
 101cc58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 101cc5c:	fa82 f54c 	uadd8	r5, r2, ip
 101cc60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 101cc64:	faa5 f58c 	sel	r5, r5, ip
 101cc68:	d10a      	bne.n	101cc80 <strcmp+0x1f8>
 101cc6a:	b965      	cbnz	r5, 101cc86 <strcmp+0x1fe>
 101cc6c:	f851 3b04 	ldr.w	r3, [r1], #4
 101cc70:	ea84 0402 	eor.w	r4, r4, r2
 101cc74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 101cc78:	d10e      	bne.n	101cc98 <strcmp+0x210>
 101cc7a:	f850 2b04 	ldr.w	r2, [r0], #4
 101cc7e:	e7eb      	b.n	101cc58 <strcmp+0x1d0>
 101cc80:	ea4f 2313 	mov.w	r3, r3, lsr #8
 101cc84:	e055      	b.n	101cd32 <strcmp+0x2aa>
 101cc86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 101cc8a:	d14d      	bne.n	101cd28 <strcmp+0x2a0>
 101cc8c:	7808      	ldrb	r0, [r1, #0]
 101cc8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101cc92:	f1c0 0000 	rsb	r0, r0, #0
 101cc96:	4770      	bx	lr
 101cc98:	ea4f 6212 	mov.w	r2, r2, lsr #24
 101cc9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 101cca0:	e047      	b.n	101cd32 <strcmp+0x2aa>
 101cca2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 101cca6:	fa82 f54c 	uadd8	r5, r2, ip
 101ccaa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 101ccae:	faa5 f58c 	sel	r5, r5, ip
 101ccb2:	d10a      	bne.n	101ccca <strcmp+0x242>
 101ccb4:	b965      	cbnz	r5, 101ccd0 <strcmp+0x248>
 101ccb6:	f851 3b04 	ldr.w	r3, [r1], #4
 101ccba:	ea84 0402 	eor.w	r4, r4, r2
 101ccbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 101ccc2:	d10c      	bne.n	101ccde <strcmp+0x256>
 101ccc4:	f850 2b04 	ldr.w	r2, [r0], #4
 101ccc8:	e7eb      	b.n	101cca2 <strcmp+0x21a>
 101ccca:	ea4f 4313 	mov.w	r3, r3, lsr #16
 101ccce:	e030      	b.n	101cd32 <strcmp+0x2aa>
 101ccd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 101ccd4:	d128      	bne.n	101cd28 <strcmp+0x2a0>
 101ccd6:	880b      	ldrh	r3, [r1, #0]
 101ccd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 101ccdc:	e029      	b.n	101cd32 <strcmp+0x2aa>
 101ccde:	ea4f 4212 	mov.w	r2, r2, lsr #16
 101cce2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 101cce6:	e024      	b.n	101cd32 <strcmp+0x2aa>
 101cce8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 101ccec:	fa82 f54c 	uadd8	r5, r2, ip
 101ccf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 101ccf4:	faa5 f58c 	sel	r5, r5, ip
 101ccf8:	d10a      	bne.n	101cd10 <strcmp+0x288>
 101ccfa:	b965      	cbnz	r5, 101cd16 <strcmp+0x28e>
 101ccfc:	f851 3b04 	ldr.w	r3, [r1], #4
 101cd00:	ea84 0402 	eor.w	r4, r4, r2
 101cd04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 101cd08:	d109      	bne.n	101cd1e <strcmp+0x296>
 101cd0a:	f850 2b04 	ldr.w	r2, [r0], #4
 101cd0e:	e7eb      	b.n	101cce8 <strcmp+0x260>
 101cd10:	ea4f 6313 	mov.w	r3, r3, lsr #24
 101cd14:	e00d      	b.n	101cd32 <strcmp+0x2aa>
 101cd16:	f015 0fff 	tst.w	r5, #255	; 0xff
 101cd1a:	d105      	bne.n	101cd28 <strcmp+0x2a0>
 101cd1c:	680b      	ldr	r3, [r1, #0]
 101cd1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 101cd22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 101cd26:	e004      	b.n	101cd32 <strcmp+0x2aa>
 101cd28:	f04f 0000 	mov.w	r0, #0
 101cd2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101cd30:	4770      	bx	lr
 101cd32:	ba12      	rev	r2, r2
 101cd34:	ba1b      	rev	r3, r3
 101cd36:	fa82 f44c 	uadd8	r4, r2, ip
 101cd3a:	ea82 0403 	eor.w	r4, r2, r3
 101cd3e:	faa4 f58c 	sel	r5, r4, ip
 101cd42:	fab5 f485 	clz	r4, r5
 101cd46:	fa02 f204 	lsl.w	r2, r2, r4
 101cd4a:	fa03 f304 	lsl.w	r3, r3, r4
 101cd4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 101cd52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 101cd56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 101cd5a:	4770      	bx	lr

0101cd5c <strcpy>:
 101cd5c:	f891 f000 	pld	[r1]
 101cd60:	ea80 0201 	eor.w	r2, r0, r1
 101cd64:	4684      	mov	ip, r0
 101cd66:	f012 0f03 	tst.w	r2, #3
 101cd6a:	d151      	bne.n	101ce10 <strcpy+0xb4>
 101cd6c:	f011 0f03 	tst.w	r1, #3
 101cd70:	d134      	bne.n	101cddc <strcpy+0x80>
 101cd72:	f84d 4d04 	str.w	r4, [sp, #-4]!
 101cd76:	f011 0f04 	tst.w	r1, #4
 101cd7a:	f851 3b04 	ldr.w	r3, [r1], #4
 101cd7e:	d00b      	beq.n	101cd98 <strcpy+0x3c>
 101cd80:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 101cd84:	439a      	bics	r2, r3
 101cd86:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 101cd8a:	bf04      	itt	eq
 101cd8c:	f84c 3b04 	streq.w	r3, [ip], #4
 101cd90:	f851 3b04 	ldreq.w	r3, [r1], #4
 101cd94:	d118      	bne.n	101cdc8 <strcpy+0x6c>
 101cd96:	bf00      	nop
 101cd98:	f891 f008 	pld	[r1, #8]
 101cd9c:	f851 4b04 	ldr.w	r4, [r1], #4
 101cda0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 101cda4:	439a      	bics	r2, r3
 101cda6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 101cdaa:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 101cdae:	d10b      	bne.n	101cdc8 <strcpy+0x6c>
 101cdb0:	f84c 3b04 	str.w	r3, [ip], #4
 101cdb4:	43a2      	bics	r2, r4
 101cdb6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 101cdba:	bf04      	itt	eq
 101cdbc:	f851 3b04 	ldreq.w	r3, [r1], #4
 101cdc0:	f84c 4b04 	streq.w	r4, [ip], #4
 101cdc4:	d0e8      	beq.n	101cd98 <strcpy+0x3c>
 101cdc6:	4623      	mov	r3, r4
 101cdc8:	f80c 3b01 	strb.w	r3, [ip], #1
 101cdcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 101cdd0:	ea4f 2333 	mov.w	r3, r3, ror #8
 101cdd4:	d1f8      	bne.n	101cdc8 <strcpy+0x6c>
 101cdd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 101cdda:	4770      	bx	lr
 101cddc:	f011 0f01 	tst.w	r1, #1
 101cde0:	d006      	beq.n	101cdf0 <strcpy+0x94>
 101cde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 101cde6:	f80c 2b01 	strb.w	r2, [ip], #1
 101cdea:	2a00      	cmp	r2, #0
 101cdec:	bf08      	it	eq
 101cdee:	4770      	bxeq	lr
 101cdf0:	f011 0f02 	tst.w	r1, #2
 101cdf4:	d0bd      	beq.n	101cd72 <strcpy+0x16>
 101cdf6:	f831 2b02 	ldrh.w	r2, [r1], #2
 101cdfa:	f012 0fff 	tst.w	r2, #255	; 0xff
 101cdfe:	bf16      	itet	ne
 101ce00:	f82c 2b02 	strhne.w	r2, [ip], #2
 101ce04:	f88c 2000 	strbeq.w	r2, [ip]
 101ce08:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 101ce0c:	d1b1      	bne.n	101cd72 <strcpy+0x16>
 101ce0e:	4770      	bx	lr
 101ce10:	f811 2b01 	ldrb.w	r2, [r1], #1
 101ce14:	f80c 2b01 	strb.w	r2, [ip], #1
 101ce18:	2a00      	cmp	r2, #0
 101ce1a:	d1f9      	bne.n	101ce10 <strcpy+0xb4>
 101ce1c:	4770      	bx	lr
 101ce1e:	bf00      	nop

0101ce20 <strlcpy>:
 101ce20:	b19a      	cbz	r2, 101ce4a <strlcpy+0x2a>
 101ce22:	2a01      	cmp	r2, #1
 101ce24:	d019      	beq.n	101ce5a <strlcpy+0x3a>
 101ce26:	b470      	push	{r4, r5, r6}
 101ce28:	460b      	mov	r3, r1
 101ce2a:	4605      	mov	r5, r0
 101ce2c:	e001      	b.n	101ce32 <strlcpy+0x12>
 101ce2e:	42e0      	cmn	r0, r4
 101ce30:	d017      	beq.n	101ce62 <strlcpy+0x42>
 101ce32:	f813 6b01 	ldrb.w	r6, [r3], #1
 101ce36:	f805 6b01 	strb.w	r6, [r5], #1
 101ce3a:	43ec      	mvns	r4, r5
 101ce3c:	4414      	add	r4, r2
 101ce3e:	2e00      	cmp	r6, #0
 101ce40:	d1f5      	bne.n	101ce2e <strlcpy+0xe>
 101ce42:	1a58      	subs	r0, r3, r1
 101ce44:	3801      	subs	r0, #1
 101ce46:	bc70      	pop	{r4, r5, r6}
 101ce48:	4770      	bx	lr
 101ce4a:	460b      	mov	r3, r1
 101ce4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 101ce50:	2a00      	cmp	r2, #0
 101ce52:	d1fb      	bne.n	101ce4c <strlcpy+0x2c>
 101ce54:	1a58      	subs	r0, r3, r1
 101ce56:	3801      	subs	r0, #1
 101ce58:	4770      	bx	lr
 101ce5a:	2200      	movs	r2, #0
 101ce5c:	460b      	mov	r3, r1
 101ce5e:	7002      	strb	r2, [r0, #0]
 101ce60:	e7f4      	b.n	101ce4c <strlcpy+0x2c>
 101ce62:	2200      	movs	r2, #0
 101ce64:	702a      	strb	r2, [r5, #0]
 101ce66:	f813 2b01 	ldrb.w	r2, [r3], #1
 101ce6a:	2a00      	cmp	r2, #0
 101ce6c:	d1fb      	bne.n	101ce66 <strlcpy+0x46>
 101ce6e:	1a58      	subs	r0, r3, r1
 101ce70:	3801      	subs	r0, #1
 101ce72:	bc70      	pop	{r4, r5, r6}
 101ce74:	4770      	bx	lr
 101ce76:	bf00      	nop
	...

0101ce80 <strlen>:
 101ce80:	f890 f000 	pld	[r0]
 101ce84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 101ce88:	f020 0107 	bic.w	r1, r0, #7
 101ce8c:	f06f 0c00 	mvn.w	ip, #0
 101ce90:	f010 0407 	ands.w	r4, r0, #7
 101ce94:	f891 f020 	pld	[r1, #32]
 101ce98:	f040 8049 	bne.w	101cf2e <strlen+0xae>
 101ce9c:	f04f 0400 	mov.w	r4, #0
 101cea0:	f06f 0007 	mvn.w	r0, #7
 101cea4:	e9d1 2300 	ldrd	r2, r3, [r1]
 101cea8:	f891 f040 	pld	[r1, #64]	; 0x40
 101ceac:	f100 0008 	add.w	r0, r0, #8
 101ceb0:	fa82 f24c 	uadd8	r2, r2, ip
 101ceb4:	faa4 f28c 	sel	r2, r4, ip
 101ceb8:	fa83 f34c 	uadd8	r3, r3, ip
 101cebc:	faa2 f38c 	sel	r3, r2, ip
 101cec0:	bb4b      	cbnz	r3, 101cf16 <strlen+0x96>
 101cec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 101cec6:	fa82 f24c 	uadd8	r2, r2, ip
 101ceca:	f100 0008 	add.w	r0, r0, #8
 101cece:	faa4 f28c 	sel	r2, r4, ip
 101ced2:	fa83 f34c 	uadd8	r3, r3, ip
 101ced6:	faa2 f38c 	sel	r3, r2, ip
 101ceda:	b9e3      	cbnz	r3, 101cf16 <strlen+0x96>
 101cedc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 101cee0:	fa82 f24c 	uadd8	r2, r2, ip
 101cee4:	f100 0008 	add.w	r0, r0, #8
 101cee8:	faa4 f28c 	sel	r2, r4, ip
 101ceec:	fa83 f34c 	uadd8	r3, r3, ip
 101cef0:	faa2 f38c 	sel	r3, r2, ip
 101cef4:	b97b      	cbnz	r3, 101cf16 <strlen+0x96>
 101cef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 101cefa:	f101 0120 	add.w	r1, r1, #32
 101cefe:	fa82 f24c 	uadd8	r2, r2, ip
 101cf02:	f100 0008 	add.w	r0, r0, #8
 101cf06:	faa4 f28c 	sel	r2, r4, ip
 101cf0a:	fa83 f34c 	uadd8	r3, r3, ip
 101cf0e:	faa2 f38c 	sel	r3, r2, ip
 101cf12:	2b00      	cmp	r3, #0
 101cf14:	d0c6      	beq.n	101cea4 <strlen+0x24>
 101cf16:	2a00      	cmp	r2, #0
 101cf18:	bf04      	itt	eq
 101cf1a:	3004      	addeq	r0, #4
 101cf1c:	461a      	moveq	r2, r3
 101cf1e:	ba12      	rev	r2, r2
 101cf20:	fab2 f282 	clz	r2, r2
 101cf24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 101cf28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 101cf2c:	4770      	bx	lr
 101cf2e:	e9d1 2300 	ldrd	r2, r3, [r1]
 101cf32:	f004 0503 	and.w	r5, r4, #3
 101cf36:	f1c4 0000 	rsb	r0, r4, #0
 101cf3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 101cf3e:	f014 0f04 	tst.w	r4, #4
 101cf42:	f891 f040 	pld	[r1, #64]	; 0x40
 101cf46:	fa0c f505 	lsl.w	r5, ip, r5
 101cf4a:	ea62 0205 	orn	r2, r2, r5
 101cf4e:	bf1c      	itt	ne
 101cf50:	ea63 0305 	ornne	r3, r3, r5
 101cf54:	4662      	movne	r2, ip
 101cf56:	f04f 0400 	mov.w	r4, #0
 101cf5a:	e7a9      	b.n	101ceb0 <strlen+0x30>

0101cf5c <strncasecmp>:
 101cf5c:	b34a      	cbz	r2, 101cfb2 <strncasecmp+0x56>
 101cf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101cf62:	4606      	mov	r6, r0
 101cf64:	460f      	mov	r7, r1
 101cf66:	eb00 0802 	add.w	r8, r0, r2
 101cf6a:	e004      	b.n	101cf76 <strncasecmp+0x1a>
 101cf6c:	1b60      	subs	r0, r4, r5
 101cf6e:	d11b      	bne.n	101cfa8 <strncasecmp+0x4c>
 101cf70:	b1e5      	cbz	r5, 101cfac <strncasecmp+0x50>
 101cf72:	45b0      	cmp	r8, r6
 101cf74:	d01a      	beq.n	101cfac <strncasecmp+0x50>
 101cf76:	f816 4b01 	ldrb.w	r4, [r6], #1
 101cf7a:	f7fd ff7f 	bl	101ae7c <__locale_ctype_ptr>
 101cf7e:	f817 5b01 	ldrb.w	r5, [r7], #1
 101cf82:	4420      	add	r0, r4
 101cf84:	7843      	ldrb	r3, [r0, #1]
 101cf86:	f003 0303 	and.w	r3, r3, #3
 101cf8a:	2b01      	cmp	r3, #1
 101cf8c:	bf08      	it	eq
 101cf8e:	3420      	addeq	r4, #32
 101cf90:	f7fd ff74 	bl	101ae7c <__locale_ctype_ptr>
 101cf94:	4428      	add	r0, r5
 101cf96:	7843      	ldrb	r3, [r0, #1]
 101cf98:	f003 0303 	and.w	r3, r3, #3
 101cf9c:	2b01      	cmp	r3, #1
 101cf9e:	d1e5      	bne.n	101cf6c <strncasecmp+0x10>
 101cfa0:	f105 0020 	add.w	r0, r5, #32
 101cfa4:	1a20      	subs	r0, r4, r0
 101cfa6:	d0e4      	beq.n	101cf72 <strncasecmp+0x16>
 101cfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101cfac:	2000      	movs	r0, #0
 101cfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101cfb2:	2000      	movs	r0, #0
 101cfb4:	4770      	bx	lr
 101cfb6:	bf00      	nop

0101cfb8 <strncmp>:
 101cfb8:	2a00      	cmp	r2, #0
 101cfba:	d049      	beq.n	101d050 <strncmp+0x98>
 101cfbc:	ea40 0301 	orr.w	r3, r0, r1
 101cfc0:	f013 0303 	ands.w	r3, r3, #3
 101cfc4:	b4f0      	push	{r4, r5, r6, r7}
 101cfc6:	d125      	bne.n	101d014 <strncmp+0x5c>
 101cfc8:	2a03      	cmp	r2, #3
 101cfca:	d923      	bls.n	101d014 <strncmp+0x5c>
 101cfcc:	6804      	ldr	r4, [r0, #0]
 101cfce:	680d      	ldr	r5, [r1, #0]
 101cfd0:	42ac      	cmp	r4, r5
 101cfd2:	d11f      	bne.n	101d014 <strncmp+0x5c>
 101cfd4:	3a04      	subs	r2, #4
 101cfd6:	d038      	beq.n	101d04a <strncmp+0x92>
 101cfd8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 101cfdc:	ea25 0404 	bic.w	r4, r5, r4
 101cfe0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 101cfe4:	d131      	bne.n	101d04a <strncmp+0x92>
 101cfe6:	1d07      	adds	r7, r0, #4
 101cfe8:	1d0d      	adds	r5, r1, #4
 101cfea:	e00d      	b.n	101d008 <strncmp+0x50>
 101cfec:	f857 3b04 	ldr.w	r3, [r7], #4
 101cff0:	680e      	ldr	r6, [r1, #0]
 101cff2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 101cff6:	42b3      	cmp	r3, r6
 101cff8:	ea24 0403 	bic.w	r4, r4, r3
 101cffc:	d10a      	bne.n	101d014 <strncmp+0x5c>
 101cffe:	3a04      	subs	r2, #4
 101d000:	d023      	beq.n	101d04a <strncmp+0x92>
 101d002:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 101d006:	d120      	bne.n	101d04a <strncmp+0x92>
 101d008:	2a03      	cmp	r2, #3
 101d00a:	4629      	mov	r1, r5
 101d00c:	4638      	mov	r0, r7
 101d00e:	f105 0504 	add.w	r5, r5, #4
 101d012:	d8eb      	bhi.n	101cfec <strncmp+0x34>
 101d014:	7804      	ldrb	r4, [r0, #0]
 101d016:	780e      	ldrb	r6, [r1, #0]
 101d018:	42a6      	cmp	r6, r4
 101d01a:	d11b      	bne.n	101d054 <strncmp+0x9c>
 101d01c:	2a01      	cmp	r2, #1
 101d01e:	bf18      	it	ne
 101d020:	2e00      	cmpne	r6, #0
 101d022:	d012      	beq.n	101d04a <strncmp+0x92>
 101d024:	4605      	mov	r5, r0
 101d026:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 101d02a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 101d02e:	42b4      	cmp	r4, r6
 101d030:	ea6f 0305 	mvn.w	r3, r5
 101d034:	4413      	add	r3, r2
 101d036:	d10d      	bne.n	101d054 <strncmp+0x9c>
 101d038:	42d8      	cmn	r0, r3
 101d03a:	bf0c      	ite	eq
 101d03c:	2301      	moveq	r3, #1
 101d03e:	2300      	movne	r3, #0
 101d040:	2c00      	cmp	r4, #0
 101d042:	bf08      	it	eq
 101d044:	2301      	moveq	r3, #1
 101d046:	2b00      	cmp	r3, #0
 101d048:	d0ed      	beq.n	101d026 <strncmp+0x6e>
 101d04a:	2000      	movs	r0, #0
 101d04c:	bcf0      	pop	{r4, r5, r6, r7}
 101d04e:	4770      	bx	lr
 101d050:	4610      	mov	r0, r2
 101d052:	4770      	bx	lr
 101d054:	1ba0      	subs	r0, r4, r6
 101d056:	bcf0      	pop	{r4, r5, r6, r7}
 101d058:	4770      	bx	lr
 101d05a:	bf00      	nop

0101d05c <strncpy>:
 101d05c:	2a03      	cmp	r2, #3
 101d05e:	ea40 0301 	orr.w	r3, r0, r1
 101d062:	b470      	push	{r4, r5, r6}
 101d064:	f3c3 0401 	ubfx	r4, r3, #0, #2
 101d068:	bf94      	ite	ls
 101d06a:	2500      	movls	r5, #0
 101d06c:	2501      	movhi	r5, #1
 101d06e:	2c00      	cmp	r4, #0
 101d070:	4606      	mov	r6, r0
 101d072:	bf18      	it	ne
 101d074:	2500      	movne	r5, #0
 101d076:	b9a5      	cbnz	r5, 101d0a2 <strncpy+0x46>
 101d078:	b18a      	cbz	r2, 101d09e <strncpy+0x42>
 101d07a:	780c      	ldrb	r4, [r1, #0]
 101d07c:	4633      	mov	r3, r6
 101d07e:	1e55      	subs	r5, r2, #1
 101d080:	f803 4b01 	strb.w	r4, [r3], #1
 101d084:	b1fc      	cbz	r4, 101d0c6 <strncpy+0x6a>
 101d086:	4432      	add	r2, r6
 101d088:	442e      	add	r6, r5
 101d08a:	e004      	b.n	101d096 <strncpy+0x3a>
 101d08c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 101d090:	f803 4b01 	strb.w	r4, [r3], #1
 101d094:	b1bc      	cbz	r4, 101d0c6 <strncpy+0x6a>
 101d096:	429a      	cmp	r2, r3
 101d098:	eba6 0503 	sub.w	r5, r6, r3
 101d09c:	d1f6      	bne.n	101d08c <strncpy+0x30>
 101d09e:	bc70      	pop	{r4, r5, r6}
 101d0a0:	4770      	bx	lr
 101d0a2:	460b      	mov	r3, r1
 101d0a4:	4619      	mov	r1, r3
 101d0a6:	f853 5b04 	ldr.w	r5, [r3], #4
 101d0aa:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 101d0ae:	ea24 0405 	bic.w	r4, r4, r5
 101d0b2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 101d0b6:	d1e0      	bne.n	101d07a <strncpy+0x1e>
 101d0b8:	3a04      	subs	r2, #4
 101d0ba:	f846 5b04 	str.w	r5, [r6], #4
 101d0be:	2a03      	cmp	r2, #3
 101d0c0:	4619      	mov	r1, r3
 101d0c2:	d8ef      	bhi.n	101d0a4 <strncpy+0x48>
 101d0c4:	e7d8      	b.n	101d078 <strncpy+0x1c>
 101d0c6:	2d00      	cmp	r5, #0
 101d0c8:	d0e9      	beq.n	101d09e <strncpy+0x42>
 101d0ca:	441d      	add	r5, r3
 101d0cc:	2200      	movs	r2, #0
 101d0ce:	f803 2b01 	strb.w	r2, [r3], #1
 101d0d2:	42ab      	cmp	r3, r5
 101d0d4:	d1fb      	bne.n	101d0ce <strncpy+0x72>
 101d0d6:	bc70      	pop	{r4, r5, r6}
 101d0d8:	4770      	bx	lr
 101d0da:	bf00      	nop

0101d0dc <_strtol_l.isra.0>:
 101d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101d0e0:	b083      	sub	sp, #12
 101d0e2:	460f      	mov	r7, r1
 101d0e4:	4690      	mov	r8, r2
 101d0e6:	9001      	str	r0, [sp, #4]
 101d0e8:	461e      	mov	r6, r3
 101d0ea:	468b      	mov	fp, r1
 101d0ec:	e000      	b.n	101d0f0 <_strtol_l.isra.0+0x14>
 101d0ee:	46ab      	mov	fp, r5
 101d0f0:	465d      	mov	r5, fp
 101d0f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 101d0f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 101d0f8:	f7fd febc 	bl	101ae74 <__locale_ctype_ptr_l>
 101d0fc:	4420      	add	r0, r4
 101d0fe:	7842      	ldrb	r2, [r0, #1]
 101d100:	f012 0208 	ands.w	r2, r2, #8
 101d104:	d1f3      	bne.n	101d0ee <_strtol_l.isra.0+0x12>
 101d106:	2c2d      	cmp	r4, #45	; 0x2d
 101d108:	d061      	beq.n	101d1ce <_strtol_l.isra.0+0xf2>
 101d10a:	2c2b      	cmp	r4, #43	; 0x2b
 101d10c:	4692      	mov	sl, r2
 101d10e:	bf04      	itt	eq
 101d110:	782c      	ldrbeq	r4, [r5, #0]
 101d112:	f10b 0502 	addeq.w	r5, fp, #2
 101d116:	f036 0310 	bics.w	r3, r6, #16
 101d11a:	d103      	bne.n	101d124 <_strtol_l.isra.0+0x48>
 101d11c:	2c30      	cmp	r4, #48	; 0x30
 101d11e:	d05c      	beq.n	101d1da <_strtol_l.isra.0+0xfe>
 101d120:	b906      	cbnz	r6, 101d124 <_strtol_l.isra.0+0x48>
 101d122:	260a      	movs	r6, #10
 101d124:	46b3      	mov	fp, r6
 101d126:	f1ba 0f00 	cmp.w	sl, #0
 101d12a:	4659      	mov	r1, fp
 101d12c:	bf14      	ite	ne
 101d12e:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 101d132:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 101d136:	4648      	mov	r0, r9
 101d138:	f7fc fc14 	bl	1019964 <__aeabi_uidivmod>
 101d13c:	2200      	movs	r2, #0
 101d13e:	4686      	mov	lr, r0
 101d140:	4610      	mov	r0, r2
 101d142:	e00e      	b.n	101d162 <_strtol_l.isra.0+0x86>
 101d144:	ebae 0400 	sub.w	r4, lr, r0
 101d148:	4299      	cmp	r1, r3
 101d14a:	fab4 f484 	clz	r4, r4
 101d14e:	ea4f 1454 	mov.w	r4, r4, lsr #5
 101d152:	bfa8      	it	ge
 101d154:	2400      	movge	r4, #0
 101d156:	b9f4      	cbnz	r4, 101d196 <_strtol_l.isra.0+0xba>
 101d158:	fb0b 3000 	mla	r0, fp, r0, r3
 101d15c:	2201      	movs	r2, #1
 101d15e:	f815 4b01 	ldrb.w	r4, [r5], #1
 101d162:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 101d166:	2b09      	cmp	r3, #9
 101d168:	d90c      	bls.n	101d184 <_strtol_l.isra.0+0xa8>
 101d16a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 101d16e:	2b19      	cmp	r3, #25
 101d170:	bf98      	it	ls
 101d172:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
 101d176:	d905      	bls.n	101d184 <_strtol_l.isra.0+0xa8>
 101d178:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 101d17c:	2b19      	cmp	r3, #25
 101d17e:	d80d      	bhi.n	101d19c <_strtol_l.isra.0+0xc0>
 101d180:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 101d184:	429e      	cmp	r6, r3
 101d186:	dd09      	ble.n	101d19c <_strtol_l.isra.0+0xc0>
 101d188:	4586      	cmp	lr, r0
 101d18a:	bf2c      	ite	cs
 101d18c:	2400      	movcs	r4, #0
 101d18e:	2401      	movcc	r4, #1
 101d190:	ea54 72d2 	orrs.w	r2, r4, r2, lsr #31
 101d194:	d0d6      	beq.n	101d144 <_strtol_l.isra.0+0x68>
 101d196:	f04f 32ff 	mov.w	r2, #4294967295
 101d19a:	e7e0      	b.n	101d15e <_strtol_l.isra.0+0x82>
 101d19c:	1c53      	adds	r3, r2, #1
 101d19e:	d00c      	beq.n	101d1ba <_strtol_l.isra.0+0xde>
 101d1a0:	f1ba 0f00 	cmp.w	sl, #0
 101d1a4:	d000      	beq.n	101d1a8 <_strtol_l.isra.0+0xcc>
 101d1a6:	4240      	negs	r0, r0
 101d1a8:	f1b8 0f00 	cmp.w	r8, #0
 101d1ac:	d002      	beq.n	101d1b4 <_strtol_l.isra.0+0xd8>
 101d1ae:	bb1a      	cbnz	r2, 101d1f8 <_strtol_l.isra.0+0x11c>
 101d1b0:	f8c8 7000 	str.w	r7, [r8]
 101d1b4:	b003      	add	sp, #12
 101d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101d1ba:	9a01      	ldr	r2, [sp, #4]
 101d1bc:	2322      	movs	r3, #34	; 0x22
 101d1be:	4648      	mov	r0, r9
 101d1c0:	6013      	str	r3, [r2, #0]
 101d1c2:	f1b8 0f00 	cmp.w	r8, #0
 101d1c6:	d0f5      	beq.n	101d1b4 <_strtol_l.isra.0+0xd8>
 101d1c8:	1e6f      	subs	r7, r5, #1
 101d1ca:	4648      	mov	r0, r9
 101d1cc:	e7f0      	b.n	101d1b0 <_strtol_l.isra.0+0xd4>
 101d1ce:	782c      	ldrb	r4, [r5, #0]
 101d1d0:	f04f 0a01 	mov.w	sl, #1
 101d1d4:	f10b 0502 	add.w	r5, fp, #2
 101d1d8:	e79d      	b.n	101d116 <_strtol_l.isra.0+0x3a>
 101d1da:	782b      	ldrb	r3, [r5, #0]
 101d1dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 101d1e0:	2b58      	cmp	r3, #88	; 0x58
 101d1e2:	d104      	bne.n	101d1ee <_strtol_l.isra.0+0x112>
 101d1e4:	2610      	movs	r6, #16
 101d1e6:	786c      	ldrb	r4, [r5, #1]
 101d1e8:	46b3      	mov	fp, r6
 101d1ea:	3502      	adds	r5, #2
 101d1ec:	e79b      	b.n	101d126 <_strtol_l.isra.0+0x4a>
 101d1ee:	2e00      	cmp	r6, #0
 101d1f0:	d198      	bne.n	101d124 <_strtol_l.isra.0+0x48>
 101d1f2:	2608      	movs	r6, #8
 101d1f4:	46b3      	mov	fp, r6
 101d1f6:	e796      	b.n	101d126 <_strtol_l.isra.0+0x4a>
 101d1f8:	4681      	mov	r9, r0
 101d1fa:	e7e5      	b.n	101d1c8 <_strtol_l.isra.0+0xec>

0101d1fc <_strtol_r>:
 101d1fc:	b530      	push	{r4, r5, lr}
 101d1fe:	f64a 1448 	movw	r4, #43336	; 0xa948
 101d202:	f2c0 1406 	movt	r4, #262	; 0x106
 101d206:	b083      	sub	sp, #12
 101d208:	f64a 5578 	movw	r5, #44408	; 0xad78
 101d20c:	f2c0 1506 	movt	r5, #262	; 0x106
 101d210:	6824      	ldr	r4, [r4, #0]
 101d212:	6b64      	ldr	r4, [r4, #52]	; 0x34
 101d214:	2c00      	cmp	r4, #0
 101d216:	bf08      	it	eq
 101d218:	462c      	moveq	r4, r5
 101d21a:	9400      	str	r4, [sp, #0]
 101d21c:	f7ff ff5e 	bl	101d0dc <_strtol_l.isra.0>
 101d220:	b003      	add	sp, #12
 101d222:	bd30      	pop	{r4, r5, pc}

0101d224 <strtol_l>:
 101d224:	b510      	push	{r4, lr}
 101d226:	f64a 1448 	movw	r4, #43336	; 0xa948
 101d22a:	b082      	sub	sp, #8
 101d22c:	f2c0 1406 	movt	r4, #262	; 0x106
 101d230:	9300      	str	r3, [sp, #0]
 101d232:	4613      	mov	r3, r2
 101d234:	460a      	mov	r2, r1
 101d236:	4601      	mov	r1, r0
 101d238:	6820      	ldr	r0, [r4, #0]
 101d23a:	f7ff ff4f 	bl	101d0dc <_strtol_l.isra.0>
 101d23e:	b002      	add	sp, #8
 101d240:	bd10      	pop	{r4, pc}
 101d242:	bf00      	nop

0101d244 <strtol>:
 101d244:	f64a 1348 	movw	r3, #43336	; 0xa948
 101d248:	f2c0 1306 	movt	r3, #262	; 0x106
 101d24c:	b570      	push	{r4, r5, r6, lr}
 101d24e:	b082      	sub	sp, #8
 101d250:	681e      	ldr	r6, [r3, #0]
 101d252:	f64a 5578 	movw	r5, #44408	; 0xad78
 101d256:	f2c0 1506 	movt	r5, #262	; 0x106
 101d25a:	4613      	mov	r3, r2
 101d25c:	460a      	mov	r2, r1
 101d25e:	4601      	mov	r1, r0
 101d260:	6b74      	ldr	r4, [r6, #52]	; 0x34
 101d262:	4630      	mov	r0, r6
 101d264:	2c00      	cmp	r4, #0
 101d266:	bf08      	it	eq
 101d268:	462c      	moveq	r4, r5
 101d26a:	9400      	str	r4, [sp, #0]
 101d26c:	f7ff ff36 	bl	101d0dc <_strtol_l.isra.0>
 101d270:	b002      	add	sp, #8
 101d272:	bd70      	pop	{r4, r5, r6, pc}
 101d274:	0000      	movs	r0, r0
	...

0101d278 <_svfprintf_r>:
 101d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101d27c:	460c      	mov	r4, r1
 101d27e:	ed2d 8b0a 	vpush	{d8-d12}
 101d282:	4615      	mov	r5, r2
 101d284:	4682      	mov	sl, r0
 101d286:	b0d5      	sub	sp, #340	; 0x154
 101d288:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 101d28c:	9108      	str	r1, [sp, #32]
 101d28e:	9309      	str	r3, [sp, #36]	; 0x24
 101d290:	f005 fade 	bl	1022850 <_localeconv_r>
 101d294:	6803      	ldr	r3, [r0, #0]
 101d296:	4618      	mov	r0, r3
 101d298:	9317      	str	r3, [sp, #92]	; 0x5c
 101d29a:	f7ff fdf1 	bl	101ce80 <strlen>
 101d29e:	2208      	movs	r2, #8
 101d2a0:	2100      	movs	r1, #0
 101d2a2:	9016      	str	r0, [sp, #88]	; 0x58
 101d2a4:	4658      	mov	r0, fp
 101d2a6:	f7fe ff03 	bl	101c0b0 <memset>
 101d2aa:	89a3      	ldrh	r3, [r4, #12]
 101d2ac:	061a      	lsls	r2, r3, #24
 101d2ae:	d503      	bpl.n	101d2b8 <_svfprintf_r+0x40>
 101d2b0:	6923      	ldr	r3, [r4, #16]
 101d2b2:	2b00      	cmp	r3, #0
 101d2b4:	f000 87d7 	beq.w	101e266 <_svfprintf_r+0xfee>
 101d2b8:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 101d2bc:	f64a 1848 	movw	r8, #43336	; 0xa948
 101d2c0:	ed9f 8b75 	vldr	d8, [pc, #468]	; 101d498 <_svfprintf_r+0x220>
 101d2c4:	f2c0 1806 	movt	r8, #262	; 0x106
 101d2c8:	462f      	mov	r7, r5
 101d2ca:	2300      	movs	r3, #0
 101d2cc:	f64a 5178 	movw	r1, #44408	; 0xad78
 101d2d0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101d2d4:	f2c0 1106 	movt	r1, #262	; 0x106
 101d2d8:	9312      	str	r3, [sp, #72]	; 0x48
 101d2da:	910f      	str	r1, [sp, #60]	; 0x3c
 101d2dc:	9315      	str	r3, [sp, #84]	; 0x54
 101d2de:	9318      	str	r3, [sp, #96]	; 0x60
 101d2e0:	9314      	str	r3, [sp, #80]	; 0x50
 101d2e2:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 101d2e6:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 101d2ea:	9305      	str	r3, [sp, #20]
 101d2ec:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 101d2f0:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 101d2f4:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 101d2f8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 101d2fa:	463c      	mov	r4, r7
 101d2fc:	f8d8 3000 	ldr.w	r3, [r8]
 101d300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101d302:	2b00      	cmp	r3, #0
 101d304:	bf08      	it	eq
 101d306:	4633      	moveq	r3, r6
 101d308:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 101d30c:	f7fd fda2 	bl	101ae54 <__locale_mb_cur_max>
 101d310:	f8cd b000 	str.w	fp, [sp]
 101d314:	4622      	mov	r2, r4
 101d316:	a920      	add	r1, sp, #128	; 0x80
 101d318:	4603      	mov	r3, r0
 101d31a:	4650      	mov	r0, sl
 101d31c:	47a8      	blx	r5
 101d31e:	2800      	cmp	r0, #0
 101d320:	4603      	mov	r3, r0
 101d322:	f000 8083 	beq.w	101d42c <_svfprintf_r+0x1b4>
 101d326:	db79      	blt.n	101d41c <_svfprintf_r+0x1a4>
 101d328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101d32a:	2a25      	cmp	r2, #37	; 0x25
 101d32c:	d001      	beq.n	101d332 <_svfprintf_r+0xba>
 101d32e:	441c      	add	r4, r3
 101d330:	e7e4      	b.n	101d2fc <_svfprintf_r+0x84>
 101d332:	1be6      	subs	r6, r4, r7
 101d334:	4605      	mov	r5, r0
 101d336:	d17c      	bne.n	101d432 <_svfprintf_r+0x1ba>
 101d338:	2300      	movs	r3, #0
 101d33a:	1c67      	adds	r7, r4, #1
 101d33c:	461e      	mov	r6, r3
 101d33e:	9306      	str	r3, [sp, #24]
 101d340:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101d344:	f04f 32ff 	mov.w	r2, #4294967295
 101d348:	7863      	ldrb	r3, [r4, #1]
 101d34a:	240a      	movs	r4, #10
 101d34c:	9204      	str	r2, [sp, #16]
 101d34e:	3701      	adds	r7, #1
 101d350:	f1a3 0220 	sub.w	r2, r3, #32
 101d354:	2a5a      	cmp	r2, #90	; 0x5a
 101d356:	f200 83b7 	bhi.w	101dac8 <_svfprintf_r+0x850>
 101d35a:	e8df f012 	tbh	[pc, r2, lsl #1]
 101d35e:	01f3      	.short	0x01f3
 101d360:	03b503b5 	.word	0x03b503b5
 101d364:	03b501ef 	.word	0x03b501ef
 101d368:	03b503b5 	.word	0x03b503b5
 101d36c:	03b501d2 	.word	0x03b501d2
 101d370:	01c403b5 	.word	0x01c403b5
 101d374:	03b5037a 	.word	0x03b5037a
 101d378:	020f0229 	.word	0x020f0229
 101d37c:	020b03b5 	.word	0x020b03b5
 101d380:	01a201a2 	.word	0x01a201a2
 101d384:	01a201a2 	.word	0x01a201a2
 101d388:	01a201a2 	.word	0x01a201a2
 101d38c:	01a201a2 	.word	0x01a201a2
 101d390:	03b501a2 	.word	0x03b501a2
 101d394:	03b503b5 	.word	0x03b503b5
 101d398:	03b503b5 	.word	0x03b503b5
 101d39c:	03b503b5 	.word	0x03b503b5
 101d3a0:	03b5037f 	.word	0x03b5037f
 101d3a4:	03100350 	.word	0x03100350
 101d3a8:	037f037f 	.word	0x037f037f
 101d3ac:	03b5037f 	.word	0x03b5037f
 101d3b0:	03b503b5 	.word	0x03b503b5
 101d3b4:	02e603b5 	.word	0x02e603b5
 101d3b8:	03b503b5 	.word	0x03b503b5
 101d3bc:	03b502da 	.word	0x03b502da
 101d3c0:	03b503b5 	.word	0x03b503b5
 101d3c4:	03b502aa 	.word	0x03b502aa
 101d3c8:	03b5029b 	.word	0x03b5029b
 101d3cc:	026d03b5 	.word	0x026d03b5
 101d3d0:	03b503b5 	.word	0x03b503b5
 101d3d4:	03b503b5 	.word	0x03b503b5
 101d3d8:	03b503b5 	.word	0x03b503b5
 101d3dc:	03b503b5 	.word	0x03b503b5
 101d3e0:	03b5037f 	.word	0x03b5037f
 101d3e4:	02410350 	.word	0x02410350
 101d3e8:	037f037f 	.word	0x037f037f
 101d3ec:	0237037f 	.word	0x0237037f
 101d3f0:	005b0241 	.word	0x005b0241
 101d3f4:	022d03b5 	.word	0x022d03b5
 101d3f8:	02fb03b5 	.word	0x02fb03b5
 101d3fc:	01af02ea 	.word	0x01af02ea
 101d400:	03b5005b 	.word	0x03b5005b
 101d404:	005d02aa 	.word	0x005d02aa
 101d408:	03b501fd 	.word	0x03b501fd
 101d40c:	00a103b5 	.word	0x00a103b5
 101d410:	005d03b5 	.word	0x005d03b5
 101d414:	f046 0620 	orr.w	r6, r6, #32
 101d418:	783b      	ldrb	r3, [r7, #0]
 101d41a:	e798      	b.n	101d34e <_svfprintf_r+0xd6>
 101d41c:	2208      	movs	r2, #8
 101d41e:	2100      	movs	r1, #0
 101d420:	4658      	mov	r0, fp
 101d422:	f7fe fe45 	bl	101c0b0 <memset>
 101d426:	2301      	movs	r3, #1
 101d428:	441c      	add	r4, r3
 101d42a:	e767      	b.n	101d2fc <_svfprintf_r+0x84>
 101d42c:	1be6      	subs	r6, r4, r7
 101d42e:	4605      	mov	r5, r0
 101d430:	d012      	beq.n	101d458 <_svfprintf_r+0x1e0>
 101d432:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101d436:	e9c9 7600 	strd	r7, r6, [r9]
 101d43a:	3301      	adds	r3, #1
 101d43c:	4432      	add	r2, r6
 101d43e:	2b07      	cmp	r3, #7
 101d440:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101d444:	bfd8      	it	le
 101d446:	f109 0908 	addle.w	r9, r9, #8
 101d44a:	dc19      	bgt.n	101d480 <_svfprintf_r+0x208>
 101d44c:	9b05      	ldr	r3, [sp, #20]
 101d44e:	4433      	add	r3, r6
 101d450:	9305      	str	r3, [sp, #20]
 101d452:	2d00      	cmp	r5, #0
 101d454:	f47f af70 	bne.w	101d338 <_svfprintf_r+0xc0>
 101d458:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 101d45a:	2b00      	cmp	r3, #0
 101d45c:	f041 826d 	bne.w	101e93a <_svfprintf_r+0x16c2>
 101d460:	9b08      	ldr	r3, [sp, #32]
 101d462:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 101d466:	f013 0f40 	tst.w	r3, #64	; 0x40
 101d46a:	9b05      	ldr	r3, [sp, #20]
 101d46c:	bf18      	it	ne
 101d46e:	f04f 33ff 	movne.w	r3, #4294967295
 101d472:	9305      	str	r3, [sp, #20]
 101d474:	9805      	ldr	r0, [sp, #20]
 101d476:	b055      	add	sp, #340	; 0x154
 101d478:	ecbd 8b0a 	vpop	{d8-d12}
 101d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101d480:	aa28      	add	r2, sp, #160	; 0xa0
 101d482:	9908      	ldr	r1, [sp, #32]
 101d484:	4650      	mov	r0, sl
 101d486:	f006 f9e7 	bl	1023858 <__ssprint_r>
 101d48a:	2800      	cmp	r0, #0
 101d48c:	d1e8      	bne.n	101d460 <_svfprintf_r+0x1e8>
 101d48e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101d492:	e7db      	b.n	101d44c <_svfprintf_r+0x1d4>
 101d494:	f3af 8000 	nop.w
	...
 101d4a0:	06b0      	lsls	r0, r6, #26
 101d4a2:	930e      	str	r3, [sp, #56]	; 0x38
 101d4a4:	f24a 435c 	movw	r3, #42076	; 0xa45c
 101d4a8:	f2c0 1306 	movt	r3, #262	; 0x106
 101d4ac:	9315      	str	r3, [sp, #84]	; 0x54
 101d4ae:	f140 81cc 	bpl.w	101d84a <_svfprintf_r+0x5d2>
 101d4b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101d4b4:	3507      	adds	r5, #7
 101d4b6:	f025 0307 	bic.w	r3, r5, #7
 101d4ba:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 101d4be:	9309      	str	r3, [sp, #36]	; 0x24
 101d4c0:	ea54 0305 	orrs.w	r3, r4, r5
 101d4c4:	f006 0301 	and.w	r3, r6, #1
 101d4c8:	bf08      	it	eq
 101d4ca:	2300      	moveq	r3, #0
 101d4cc:	2b00      	cmp	r3, #0
 101d4ce:	f040 81d8 	bne.w	101d882 <_svfprintf_r+0x60a>
 101d4d2:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 101d4d6:	9303      	str	r3, [sp, #12]
 101d4d8:	2302      	movs	r3, #2
 101d4da:	9904      	ldr	r1, [sp, #16]
 101d4dc:	2200      	movs	r2, #0
 101d4de:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 101d4e2:	1c4a      	adds	r2, r1, #1
 101d4e4:	f000 826c 	beq.w	101d9c0 <_svfprintf_r+0x748>
 101d4e8:	ea54 0205 	orrs.w	r2, r4, r5
 101d4ec:	9a03      	ldr	r2, [sp, #12]
 101d4ee:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 101d4f2:	bf14      	ite	ne
 101d4f4:	2201      	movne	r2, #1
 101d4f6:	2200      	moveq	r2, #0
 101d4f8:	2900      	cmp	r1, #0
 101d4fa:	bf18      	it	ne
 101d4fc:	2201      	movne	r2, #1
 101d4fe:	2a00      	cmp	r2, #0
 101d500:	f040 873e 	bne.w	101e380 <_svfprintf_r+0x1108>
 101d504:	2b00      	cmp	r3, #0
 101d506:	f040 84da 	bne.w	101debe <_svfprintf_r+0xc46>
 101d50a:	9a03      	ldr	r2, [sp, #12]
 101d50c:	9304      	str	r3, [sp, #16]
 101d50e:	f012 0201 	ands.w	r2, r2, #1
 101d512:	9207      	str	r2, [sp, #28]
 101d514:	bf04      	itt	eq
 101d516:	ab54      	addeq	r3, sp, #336	; 0x150
 101d518:	930b      	streq	r3, [sp, #44]	; 0x2c
 101d51a:	d005      	beq.n	101d528 <_svfprintf_r+0x2b0>
 101d51c:	2330      	movs	r3, #48	; 0x30
 101d51e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 101d522:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 101d526:	930b      	str	r3, [sp, #44]	; 0x2c
 101d528:	2300      	movs	r3, #0
 101d52a:	9a04      	ldr	r2, [sp, #16]
 101d52c:	930a      	str	r3, [sp, #40]	; 0x28
 101d52e:	9313      	str	r3, [sp, #76]	; 0x4c
 101d530:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101d534:	9b07      	ldr	r3, [sp, #28]
 101d536:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101d53a:	4293      	cmp	r3, r2
 101d53c:	bfb8      	it	lt
 101d53e:	4613      	movlt	r3, r2
 101d540:	9303      	str	r3, [sp, #12]
 101d542:	b111      	cbz	r1, 101d54a <_svfprintf_r+0x2d2>
 101d544:	9b03      	ldr	r3, [sp, #12]
 101d546:	3301      	adds	r3, #1
 101d548:	9303      	str	r3, [sp, #12]
 101d54a:	f016 0302 	ands.w	r3, r6, #2
 101d54e:	930c      	str	r3, [sp, #48]	; 0x30
 101d550:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101d552:	bf1e      	ittt	ne
 101d554:	9b03      	ldrne	r3, [sp, #12]
 101d556:	3302      	addne	r3, #2
 101d558:	9303      	strne	r3, [sp, #12]
 101d55a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 101d55e:	930d      	str	r3, [sp, #52]	; 0x34
 101d560:	d104      	bne.n	101d56c <_svfprintf_r+0x2f4>
 101d562:	9b06      	ldr	r3, [sp, #24]
 101d564:	9803      	ldr	r0, [sp, #12]
 101d566:	1a1c      	subs	r4, r3, r0
 101d568:	2c00      	cmp	r4, #0
 101d56a:	dc60      	bgt.n	101d62e <_svfprintf_r+0x3b6>
 101d56c:	b189      	cbz	r1, 101d592 <_svfprintf_r+0x31a>
 101d56e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101d570:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 101d574:	3201      	adds	r2, #1
 101d576:	f8c9 0000 	str.w	r0, [r9]
 101d57a:	3101      	adds	r1, #1
 101d57c:	2001      	movs	r0, #1
 101d57e:	2907      	cmp	r1, #7
 101d580:	f8c9 0004 	str.w	r0, [r9, #4]
 101d584:	922a      	str	r2, [sp, #168]	; 0xa8
 101d586:	bfd8      	it	le
 101d588:	f109 0908 	addle.w	r9, r9, #8
 101d58c:	9129      	str	r1, [sp, #164]	; 0xa4
 101d58e:	f300 843e 	bgt.w	101de0e <_svfprintf_r+0xb96>
 101d592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 101d594:	b183      	cbz	r3, 101d5b8 <_svfprintf_r+0x340>
 101d596:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101d598:	a91e      	add	r1, sp, #120	; 0x78
 101d59a:	3202      	adds	r2, #2
 101d59c:	f8c9 1000 	str.w	r1, [r9]
 101d5a0:	3301      	adds	r3, #1
 101d5a2:	2102      	movs	r1, #2
 101d5a4:	2b07      	cmp	r3, #7
 101d5a6:	f8c9 1004 	str.w	r1, [r9, #4]
 101d5aa:	922a      	str	r2, [sp, #168]	; 0xa8
 101d5ac:	bfd8      	it	le
 101d5ae:	f109 0908 	addle.w	r9, r9, #8
 101d5b2:	9329      	str	r3, [sp, #164]	; 0xa4
 101d5b4:	f300 8437 	bgt.w	101de26 <_svfprintf_r+0xbae>
 101d5b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 101d5ba:	2b80      	cmp	r3, #128	; 0x80
 101d5bc:	f000 8309 	beq.w	101dbd2 <_svfprintf_r+0x95a>
 101d5c0:	9b04      	ldr	r3, [sp, #16]
 101d5c2:	9907      	ldr	r1, [sp, #28]
 101d5c4:	1a5c      	subs	r4, r3, r1
 101d5c6:	2c00      	cmp	r4, #0
 101d5c8:	f300 8350 	bgt.w	101dc6c <_svfprintf_r+0x9f4>
 101d5cc:	05f5      	lsls	r5, r6, #23
 101d5ce:	f100 82a1 	bmi.w	101db14 <_svfprintf_r+0x89c>
 101d5d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101d5d4:	9907      	ldr	r1, [sp, #28]
 101d5d6:	3301      	adds	r3, #1
 101d5d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101d5da:	2b07      	cmp	r3, #7
 101d5dc:	440a      	add	r2, r1
 101d5de:	f8c9 1004 	str.w	r1, [r9, #4]
 101d5e2:	f8c9 0000 	str.w	r0, [r9]
 101d5e6:	922a      	str	r2, [sp, #168]	; 0xa8
 101d5e8:	9329      	str	r3, [sp, #164]	; 0xa4
 101d5ea:	f300 8404 	bgt.w	101ddf6 <_svfprintf_r+0xb7e>
 101d5ee:	f109 0908 	add.w	r9, r9, #8
 101d5f2:	0771      	lsls	r1, r6, #29
 101d5f4:	d505      	bpl.n	101d602 <_svfprintf_r+0x38a>
 101d5f6:	9b06      	ldr	r3, [sp, #24]
 101d5f8:	9903      	ldr	r1, [sp, #12]
 101d5fa:	1a5c      	subs	r4, r3, r1
 101d5fc:	2c00      	cmp	r4, #0
 101d5fe:	f300 841e 	bgt.w	101de3e <_svfprintf_r+0xbc6>
 101d602:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 101d606:	9803      	ldr	r0, [sp, #12]
 101d608:	4281      	cmp	r1, r0
 101d60a:	bfac      	ite	ge
 101d60c:	185b      	addge	r3, r3, r1
 101d60e:	181b      	addlt	r3, r3, r0
 101d610:	9305      	str	r3, [sp, #20]
 101d612:	2a00      	cmp	r2, #0
 101d614:	f040 838b 	bne.w	101dd2e <_svfprintf_r+0xab6>
 101d618:	2300      	movs	r3, #0
 101d61a:	9329      	str	r3, [sp, #164]	; 0xa4
 101d61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101d61e:	b11b      	cbz	r3, 101d628 <_svfprintf_r+0x3b0>
 101d620:	990a      	ldr	r1, [sp, #40]	; 0x28
 101d622:	4650      	mov	r0, sl
 101d624:	f004 fdec 	bl	1022200 <_free_r>
 101d628:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101d62c:	e664      	b.n	101d2f8 <_svfprintf_r+0x80>
 101d62e:	2c10      	cmp	r4, #16
 101d630:	f246 35e8 	movw	r5, #25576	; 0x63e8
 101d634:	bfc8      	it	gt
 101d636:	961b      	strgt	r6, [sp, #108]	; 0x6c
 101d638:	f2c0 1506 	movt	r5, #262	; 0x106
 101d63c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101d63e:	bfc4      	itt	gt
 101d640:	2310      	movgt	r3, #16
 101d642:	9e08      	ldrgt	r6, [sp, #32]
 101d644:	dc03      	bgt.n	101d64e <_svfprintf_r+0x3d6>
 101d646:	e01e      	b.n	101d686 <_svfprintf_r+0x40e>
 101d648:	3c10      	subs	r4, #16
 101d64a:	2c10      	cmp	r4, #16
 101d64c:	dd1a      	ble.n	101d684 <_svfprintf_r+0x40c>
 101d64e:	3101      	adds	r1, #1
 101d650:	3210      	adds	r2, #16
 101d652:	2907      	cmp	r1, #7
 101d654:	e9c9 5300 	strd	r5, r3, [r9]
 101d658:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101d65c:	f109 0908 	add.w	r9, r9, #8
 101d660:	ddf2      	ble.n	101d648 <_svfprintf_r+0x3d0>
 101d662:	aa28      	add	r2, sp, #160	; 0xa0
 101d664:	4631      	mov	r1, r6
 101d666:	4650      	mov	r0, sl
 101d668:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101d66c:	f006 f8f4 	bl	1023858 <__ssprint_r>
 101d670:	2800      	cmp	r0, #0
 101d672:	f040 8364 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101d676:	3c10      	subs	r4, #16
 101d678:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101d67c:	2c10      	cmp	r4, #16
 101d67e:	f04f 0310 	mov.w	r3, #16
 101d682:	dce4      	bgt.n	101d64e <_svfprintf_r+0x3d6>
 101d684:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 101d686:	3101      	adds	r1, #1
 101d688:	4422      	add	r2, r4
 101d68a:	2907      	cmp	r1, #7
 101d68c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101d690:	e9c9 5400 	strd	r5, r4, [r9]
 101d694:	f300 86f5 	bgt.w	101e482 <_svfprintf_r+0x120a>
 101d698:	f109 0908 	add.w	r9, r9, #8
 101d69c:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101d6a0:	e764      	b.n	101d56c <_svfprintf_r+0x2f4>
 101d6a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101d6a6:	2100      	movs	r1, #0
 101d6a8:	f817 3b01 	ldrb.w	r3, [r7], #1
 101d6ac:	fb04 2101 	mla	r1, r4, r1, r2
 101d6b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101d6b4:	2a09      	cmp	r2, #9
 101d6b6:	d9f7      	bls.n	101d6a8 <_svfprintf_r+0x430>
 101d6b8:	9106      	str	r1, [sp, #24]
 101d6ba:	e649      	b.n	101d350 <_svfprintf_r+0xd8>
 101d6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101d6be:	f046 0202 	orr.w	r2, r6, #2
 101d6c2:	f24a 415c 	movw	r1, #42076	; 0xa45c
 101d6c6:	9203      	str	r2, [sp, #12]
 101d6c8:	f2c0 1106 	movt	r1, #262	; 0x106
 101d6cc:	f647 0230 	movw	r2, #30768	; 0x7830
 101d6d0:	f853 4b04 	ldr.w	r4, [r3], #4
 101d6d4:	2500      	movs	r5, #0
 101d6d6:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 101d6da:	2278      	movs	r2, #120	; 0x78
 101d6dc:	9115      	str	r1, [sp, #84]	; 0x54
 101d6de:	9309      	str	r3, [sp, #36]	; 0x24
 101d6e0:	2302      	movs	r3, #2
 101d6e2:	920e      	str	r2, [sp, #56]	; 0x38
 101d6e4:	e6f9      	b.n	101d4da <_svfprintf_r+0x262>
 101d6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101d6e8:	783b      	ldrb	r3, [r7, #0]
 101d6ea:	f852 1b04 	ldr.w	r1, [r2], #4
 101d6ee:	2900      	cmp	r1, #0
 101d6f0:	9106      	str	r1, [sp, #24]
 101d6f2:	bfa8      	it	ge
 101d6f4:	9209      	strge	r2, [sp, #36]	; 0x24
 101d6f6:	f6bf ae2a 	bge.w	101d34e <_svfprintf_r+0xd6>
 101d6fa:	4249      	negs	r1, r1
 101d6fc:	9209      	str	r2, [sp, #36]	; 0x24
 101d6fe:	9106      	str	r1, [sp, #24]
 101d700:	e057      	b.n	101d7b2 <_svfprintf_r+0x53a>
 101d702:	4650      	mov	r0, sl
 101d704:	f005 f8a4 	bl	1022850 <_localeconv_r>
 101d708:	6843      	ldr	r3, [r0, #4]
 101d70a:	4618      	mov	r0, r3
 101d70c:	931a      	str	r3, [sp, #104]	; 0x68
 101d70e:	f7ff fbb7 	bl	101ce80 <strlen>
 101d712:	4605      	mov	r5, r0
 101d714:	9019      	str	r0, [sp, #100]	; 0x64
 101d716:	4650      	mov	r0, sl
 101d718:	f005 f89a 	bl	1022850 <_localeconv_r>
 101d71c:	6883      	ldr	r3, [r0, #8]
 101d71e:	2d00      	cmp	r5, #0
 101d720:	bf18      	it	ne
 101d722:	2b00      	cmpne	r3, #0
 101d724:	9314      	str	r3, [sp, #80]	; 0x50
 101d726:	f43f ae77 	beq.w	101d418 <_svfprintf_r+0x1a0>
 101d72a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101d72c:	781a      	ldrb	r2, [r3, #0]
 101d72e:	783b      	ldrb	r3, [r7, #0]
 101d730:	2a00      	cmp	r2, #0
 101d732:	f43f ae0c 	beq.w	101d34e <_svfprintf_r+0xd6>
 101d736:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 101d73a:	e608      	b.n	101d34e <_svfprintf_r+0xd6>
 101d73c:	f046 0601 	orr.w	r6, r6, #1
 101d740:	783b      	ldrb	r3, [r7, #0]
 101d742:	e604      	b.n	101d34e <_svfprintf_r+0xd6>
 101d744:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 101d748:	783b      	ldrb	r3, [r7, #0]
 101d74a:	2a00      	cmp	r2, #0
 101d74c:	f47f adff 	bne.w	101d34e <_svfprintf_r+0xd6>
 101d750:	2220      	movs	r2, #32
 101d752:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 101d756:	e5fa      	b.n	101d34e <_svfprintf_r+0xd6>
 101d758:	06b0      	lsls	r0, r6, #26
 101d75a:	930e      	str	r3, [sp, #56]	; 0x38
 101d75c:	f140 8531 	bpl.w	101e1c2 <_svfprintf_r+0xf4a>
 101d760:	9603      	str	r6, [sp, #12]
 101d762:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101d764:	2301      	movs	r3, #1
 101d766:	3507      	adds	r5, #7
 101d768:	f025 0207 	bic.w	r2, r5, #7
 101d76c:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101d770:	9209      	str	r2, [sp, #36]	; 0x24
 101d772:	e6b2      	b.n	101d4da <_svfprintf_r+0x262>
 101d774:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 101d778:	783b      	ldrb	r3, [r7, #0]
 101d77a:	e5e8      	b.n	101d34e <_svfprintf_r+0xd6>
 101d77c:	4639      	mov	r1, r7
 101d77e:	f811 3b01 	ldrb.w	r3, [r1], #1
 101d782:	2b2a      	cmp	r3, #42	; 0x2a
 101d784:	f001 82e5 	beq.w	101ed52 <_svfprintf_r+0x1ada>
 101d788:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101d78c:	460f      	mov	r7, r1
 101d78e:	2a09      	cmp	r2, #9
 101d790:	bf84      	itt	hi
 101d792:	2200      	movhi	r2, #0
 101d794:	9204      	strhi	r2, [sp, #16]
 101d796:	f63f addb 	bhi.w	101d350 <_svfprintf_r+0xd8>
 101d79a:	2100      	movs	r1, #0
 101d79c:	f817 3b01 	ldrb.w	r3, [r7], #1
 101d7a0:	fb04 2101 	mla	r1, r4, r1, r2
 101d7a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101d7a8:	2a09      	cmp	r2, #9
 101d7aa:	d9f7      	bls.n	101d79c <_svfprintf_r+0x524>
 101d7ac:	9104      	str	r1, [sp, #16]
 101d7ae:	e5cf      	b.n	101d350 <_svfprintf_r+0xd8>
 101d7b0:	783b      	ldrb	r3, [r7, #0]
 101d7b2:	f046 0604 	orr.w	r6, r6, #4
 101d7b6:	e5ca      	b.n	101d34e <_svfprintf_r+0xd6>
 101d7b8:	783b      	ldrb	r3, [r7, #0]
 101d7ba:	2b6c      	cmp	r3, #108	; 0x6c
 101d7bc:	bf09      	itett	eq
 101d7be:	f046 0620 	orreq.w	r6, r6, #32
 101d7c2:	f046 0610 	orrne.w	r6, r6, #16
 101d7c6:	787b      	ldrbeq	r3, [r7, #1]
 101d7c8:	3701      	addeq	r7, #1
 101d7ca:	e5c0      	b.n	101d34e <_svfprintf_r+0xd6>
 101d7cc:	783b      	ldrb	r3, [r7, #0]
 101d7ce:	2b68      	cmp	r3, #104	; 0x68
 101d7d0:	bf09      	itett	eq
 101d7d2:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 101d7d6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 101d7da:	787b      	ldrbeq	r3, [r7, #1]
 101d7dc:	3701      	addeq	r7, #1
 101d7de:	e5b6      	b.n	101d34e <_svfprintf_r+0xd6>
 101d7e0:	06b5      	lsls	r5, r6, #26
 101d7e2:	930e      	str	r3, [sp, #56]	; 0x38
 101d7e4:	f140 84d5 	bpl.w	101e192 <_svfprintf_r+0xf1a>
 101d7e8:	9603      	str	r6, [sp, #12]
 101d7ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101d7ec:	3507      	adds	r5, #7
 101d7ee:	f025 0307 	bic.w	r3, r5, #7
 101d7f2:	4619      	mov	r1, r3
 101d7f4:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 101d7f8:	4614      	mov	r4, r2
 101d7fa:	461d      	mov	r5, r3
 101d7fc:	9109      	str	r1, [sp, #36]	; 0x24
 101d7fe:	2a00      	cmp	r2, #0
 101d800:	f173 0300 	sbcs.w	r3, r3, #0
 101d804:	f2c0 80cf 	blt.w	101d9a6 <_svfprintf_r+0x72e>
 101d808:	9b04      	ldr	r3, [sp, #16]
 101d80a:	3301      	adds	r3, #1
 101d80c:	f000 8173 	beq.w	101daf6 <_svfprintf_r+0x87e>
 101d810:	ea54 0305 	orrs.w	r3, r4, r5
 101d814:	9a04      	ldr	r2, [sp, #16]
 101d816:	9b03      	ldr	r3, [sp, #12]
 101d818:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 101d81c:	bf14      	ite	ne
 101d81e:	2301      	movne	r3, #1
 101d820:	2300      	moveq	r3, #0
 101d822:	2a00      	cmp	r2, #0
 101d824:	bf18      	it	ne
 101d826:	2301      	movne	r3, #1
 101d828:	2b00      	cmp	r3, #0
 101d82a:	f040 8163 	bne.w	101daf4 <_svfprintf_r+0x87c>
 101d82e:	aa54      	add	r2, sp, #336	; 0x150
 101d830:	9304      	str	r3, [sp, #16]
 101d832:	920b      	str	r2, [sp, #44]	; 0x2c
 101d834:	9307      	str	r3, [sp, #28]
 101d836:	e677      	b.n	101d528 <_svfprintf_r+0x2b0>
 101d838:	06b0      	lsls	r0, r6, #26
 101d83a:	930e      	str	r3, [sp, #56]	; 0x38
 101d83c:	f24a 13dc 	movw	r3, #41436	; 0xa1dc
 101d840:	f2c0 1306 	movt	r3, #262	; 0x106
 101d844:	9315      	str	r3, [sp, #84]	; 0x54
 101d846:	f53f ae34 	bmi.w	101d4b2 <_svfprintf_r+0x23a>
 101d84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101d84c:	06f1      	lsls	r1, r6, #27
 101d84e:	f853 4b04 	ldr.w	r4, [r3], #4
 101d852:	9309      	str	r3, [sp, #36]	; 0x24
 101d854:	d40b      	bmi.n	101d86e <_svfprintf_r+0x5f6>
 101d856:	0672      	lsls	r2, r6, #25
 101d858:	bf44      	itt	mi
 101d85a:	b2a4      	uxthmi	r4, r4
 101d85c:	2500      	movmi	r5, #0
 101d85e:	f53f ae2f 	bmi.w	101d4c0 <_svfprintf_r+0x248>
 101d862:	05b3      	lsls	r3, r6, #22
 101d864:	bf44      	itt	mi
 101d866:	b2e4      	uxtbmi	r4, r4
 101d868:	2500      	movmi	r5, #0
 101d86a:	f53f ae29 	bmi.w	101d4c0 <_svfprintf_r+0x248>
 101d86e:	2500      	movs	r5, #0
 101d870:	ea54 0305 	orrs.w	r3, r4, r5
 101d874:	f006 0301 	and.w	r3, r6, #1
 101d878:	bf08      	it	eq
 101d87a:	2300      	moveq	r3, #0
 101d87c:	2b00      	cmp	r3, #0
 101d87e:	f43f ae28 	beq.w	101d4d2 <_svfprintf_r+0x25a>
 101d882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101d884:	f046 0602 	orr.w	r6, r6, #2
 101d888:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 101d88c:	2330      	movs	r3, #48	; 0x30
 101d88e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 101d892:	e61e      	b.n	101d4d2 <_svfprintf_r+0x25a>
 101d894:	06b4      	lsls	r4, r6, #26
 101d896:	930e      	str	r3, [sp, #56]	; 0x38
 101d898:	f046 0310 	orr.w	r3, r6, #16
 101d89c:	9303      	str	r3, [sp, #12]
 101d89e:	f53f af60 	bmi.w	101d762 <_svfprintf_r+0x4ea>
 101d8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101d8a4:	1d1a      	adds	r2, r3, #4
 101d8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101d8a8:	2500      	movs	r5, #0
 101d8aa:	9209      	str	r2, [sp, #36]	; 0x24
 101d8ac:	681c      	ldr	r4, [r3, #0]
 101d8ae:	2301      	movs	r3, #1
 101d8b0:	e613      	b.n	101d4da <_svfprintf_r+0x262>
 101d8b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101d8b4:	930e      	str	r3, [sp, #56]	; 0x38
 101d8b6:	2300      	movs	r3, #0
 101d8b8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101d8bc:	f855 2b04 	ldr.w	r2, [r5], #4
 101d8c0:	920b      	str	r2, [sp, #44]	; 0x2c
 101d8c2:	2a00      	cmp	r2, #0
 101d8c4:	f000 84bb 	beq.w	101e23e <_svfprintf_r+0xfc6>
 101d8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101d8ca:	2b53      	cmp	r3, #83	; 0x53
 101d8cc:	f000 8600 	beq.w	101e4d0 <_svfprintf_r+0x1258>
 101d8d0:	f016 0310 	ands.w	r3, r6, #16
 101d8d4:	9310      	str	r3, [sp, #64]	; 0x40
 101d8d6:	f040 85fb 	bne.w	101e4d0 <_svfprintf_r+0x1258>
 101d8da:	9a04      	ldr	r2, [sp, #16]
 101d8dc:	1c53      	adds	r3, r2, #1
 101d8de:	f001 801b 	beq.w	101e918 <_svfprintf_r+0x16a0>
 101d8e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 101d8e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101d8e6:	f005 f853 	bl	1022990 <memchr>
 101d8ea:	900a      	str	r0, [sp, #40]	; 0x28
 101d8ec:	2800      	cmp	r0, #0
 101d8ee:	f001 81dc 	beq.w	101ecaa <_svfprintf_r+0x1a32>
 101d8f2:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 101d8f6:	9509      	str	r5, [sp, #36]	; 0x24
 101d8f8:	1a9a      	subs	r2, r3, r2
 101d8fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101d8fc:	9207      	str	r2, [sp, #28]
 101d8fe:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101d902:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 101d906:	9304      	str	r3, [sp, #16]
 101d908:	9313      	str	r3, [sp, #76]	; 0x4c
 101d90a:	9203      	str	r2, [sp, #12]
 101d90c:	9311      	str	r3, [sp, #68]	; 0x44
 101d90e:	930a      	str	r3, [sp, #40]	; 0x28
 101d910:	e617      	b.n	101d542 <_svfprintf_r+0x2ca>
 101d912:	06b4      	lsls	r4, r6, #26
 101d914:	930e      	str	r3, [sp, #56]	; 0x38
 101d916:	f046 0310 	orr.w	r3, r6, #16
 101d91a:	d40f      	bmi.n	101d93c <_svfprintf_r+0x6c4>
 101d91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101d91e:	3204      	adds	r2, #4
 101d920:	9909      	ldr	r1, [sp, #36]	; 0x24
 101d922:	2500      	movs	r5, #0
 101d924:	9209      	str	r2, [sp, #36]	; 0x24
 101d926:	680c      	ldr	r4, [r1, #0]
 101d928:	e00f      	b.n	101d94a <_svfprintf_r+0x6d2>
 101d92a:	f046 0608 	orr.w	r6, r6, #8
 101d92e:	783b      	ldrb	r3, [r7, #0]
 101d930:	e50d      	b.n	101d34e <_svfprintf_r+0xd6>
 101d932:	06b0      	lsls	r0, r6, #26
 101d934:	930e      	str	r3, [sp, #56]	; 0x38
 101d936:	f140 845e 	bpl.w	101e1f6 <_svfprintf_r+0xf7e>
 101d93a:	4633      	mov	r3, r6
 101d93c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101d93e:	3507      	adds	r5, #7
 101d940:	f025 0207 	bic.w	r2, r5, #7
 101d944:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101d948:	9209      	str	r2, [sp, #36]	; 0x24
 101d94a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 101d94e:	9303      	str	r3, [sp, #12]
 101d950:	2300      	movs	r3, #0
 101d952:	e5c2      	b.n	101d4da <_svfprintf_r+0x262>
 101d954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101d956:	06b0      	lsls	r0, r6, #26
 101d958:	f102 0304 	add.w	r3, r2, #4
 101d95c:	f100 8441 	bmi.w	101e1e2 <_svfprintf_r+0xf6a>
 101d960:	06f1      	lsls	r1, r6, #27
 101d962:	f100 8608 	bmi.w	101e576 <_svfprintf_r+0x12fe>
 101d966:	0672      	lsls	r2, r6, #25
 101d968:	f100 87c4 	bmi.w	101e8f4 <_svfprintf_r+0x167c>
 101d96c:	05b5      	lsls	r5, r6, #22
 101d96e:	f140 8602 	bpl.w	101e576 <_svfprintf_r+0x12fe>
 101d972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101d974:	9309      	str	r3, [sp, #36]	; 0x24
 101d976:	9b05      	ldr	r3, [sp, #20]
 101d978:	6812      	ldr	r2, [r2, #0]
 101d97a:	7013      	strb	r3, [r2, #0]
 101d97c:	e4bc      	b.n	101d2f8 <_svfprintf_r+0x80>
 101d97e:	930e      	str	r3, [sp, #56]	; 0x38
 101d980:	f046 0310 	orr.w	r3, r6, #16
 101d984:	06b6      	lsls	r6, r6, #26
 101d986:	9303      	str	r3, [sp, #12]
 101d988:	f53f af2f 	bmi.w	101d7ea <_svfprintf_r+0x572>
 101d98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101d98e:	1d1a      	adds	r2, r3, #4
 101d990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101d992:	9209      	str	r2, [sp, #36]	; 0x24
 101d994:	681c      	ldr	r4, [r3, #0]
 101d996:	17e5      	asrs	r5, r4, #31
 101d998:	4622      	mov	r2, r4
 101d99a:	2a00      	cmp	r2, #0
 101d99c:	462b      	mov	r3, r5
 101d99e:	f173 0300 	sbcs.w	r3, r3, #0
 101d9a2:	f6bf af31 	bge.w	101d808 <_svfprintf_r+0x590>
 101d9a6:	4264      	negs	r4, r4
 101d9a8:	9904      	ldr	r1, [sp, #16]
 101d9aa:	f04f 032d 	mov.w	r3, #45	; 0x2d
 101d9ae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101d9b2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 101d9b6:	1c4a      	adds	r2, r1, #1
 101d9b8:	f04f 0301 	mov.w	r3, #1
 101d9bc:	f47f ad94 	bne.w	101d4e8 <_svfprintf_r+0x270>
 101d9c0:	2b01      	cmp	r3, #1
 101d9c2:	f000 8098 	beq.w	101daf6 <_svfprintf_r+0x87e>
 101d9c6:	2b02      	cmp	r3, #2
 101d9c8:	bf18      	it	ne
 101d9ca:	a954      	addne	r1, sp, #336	; 0x150
 101d9cc:	f040 818f 	bne.w	101dcee <_svfprintf_r+0xa76>
 101d9d0:	ab54      	add	r3, sp, #336	; 0x150
 101d9d2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 101d9d4:	461a      	mov	r2, r3
 101d9d6:	f004 010f 	and.w	r1, r4, #15
 101d9da:	0923      	lsrs	r3, r4, #4
 101d9dc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 101d9e0:	0928      	lsrs	r0, r5, #4
 101d9e2:	5c71      	ldrb	r1, [r6, r1]
 101d9e4:	461c      	mov	r4, r3
 101d9e6:	4605      	mov	r5, r0
 101d9e8:	ea54 0305 	orrs.w	r3, r4, r5
 101d9ec:	f802 1d01 	strb.w	r1, [r2, #-1]!
 101d9f0:	d1f1      	bne.n	101d9d6 <_svfprintf_r+0x75e>
 101d9f2:	ab54      	add	r3, sp, #336	; 0x150
 101d9f4:	920b      	str	r2, [sp, #44]	; 0x2c
 101d9f6:	1a9b      	subs	r3, r3, r2
 101d9f8:	9e03      	ldr	r6, [sp, #12]
 101d9fa:	9307      	str	r3, [sp, #28]
 101d9fc:	e594      	b.n	101d528 <_svfprintf_r+0x2b0>
 101d9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101da00:	2b43      	cmp	r3, #67	; 0x43
 101da02:	930e      	str	r3, [sp, #56]	; 0x38
 101da04:	f102 0504 	add.w	r5, r2, #4
 101da08:	d002      	beq.n	101da10 <_svfprintf_r+0x798>
 101da0a:	06f3      	lsls	r3, r6, #27
 101da0c:	f140 8402 	bpl.w	101e214 <_svfprintf_r+0xf9c>
 101da10:	2208      	movs	r2, #8
 101da12:	2100      	movs	r1, #0
 101da14:	a826      	add	r0, sp, #152	; 0x98
 101da16:	ac3b      	add	r4, sp, #236	; 0xec
 101da18:	f7fe fb4a 	bl	101c0b0 <memset>
 101da1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101da1e:	ab26      	add	r3, sp, #152	; 0x98
 101da20:	4621      	mov	r1, r4
 101da22:	4650      	mov	r0, sl
 101da24:	6812      	ldr	r2, [r2, #0]
 101da26:	f003 f829 	bl	1020a7c <_wcrtomb_r>
 101da2a:	1c43      	adds	r3, r0, #1
 101da2c:	9007      	str	r0, [sp, #28]
 101da2e:	f001 80eb 	beq.w	101ec08 <_svfprintf_r+0x1990>
 101da32:	9b07      	ldr	r3, [sp, #28]
 101da34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101da38:	9303      	str	r3, [sp, #12]
 101da3a:	2300      	movs	r3, #0
 101da3c:	9509      	str	r5, [sp, #36]	; 0x24
 101da3e:	4619      	mov	r1, r3
 101da40:	940b      	str	r4, [sp, #44]	; 0x2c
 101da42:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101da46:	930a      	str	r3, [sp, #40]	; 0x28
 101da48:	9304      	str	r3, [sp, #16]
 101da4a:	9313      	str	r3, [sp, #76]	; 0x4c
 101da4c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101da50:	e57b      	b.n	101d54a <_svfprintf_r+0x2d2>
 101da52:	232b      	movs	r3, #43	; 0x2b
 101da54:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101da58:	783b      	ldrb	r3, [r7, #0]
 101da5a:	e478      	b.n	101d34e <_svfprintf_r+0xd6>
 101da5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101da5e:	930e      	str	r3, [sp, #56]	; 0x38
 101da60:	3507      	adds	r5, #7
 101da62:	ed9f 7bbd 	vldr	d7, [pc, #756]	; 101dd58 <_svfprintf_r+0xae0>
 101da66:	f025 0307 	bic.w	r3, r5, #7
 101da6a:	ecb3 8b02 	vldmia	r3!, {d8}
 101da6e:	eeb0 6bc8 	vabs.f64	d6, d8
 101da72:	9309      	str	r3, [sp, #36]	; 0x24
 101da74:	eeb4 6b47 	vcmp.f64	d6, d7
 101da78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101da7c:	f340 8309 	ble.w	101e092 <_svfprintf_r+0xe1a>
 101da80:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 101da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101da88:	bf58      	it	pl
 101da8a:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 101da8e:	d502      	bpl.n	101da96 <_svfprintf_r+0x81e>
 101da90:	212d      	movs	r1, #45	; 0x2d
 101da92:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 101da96:	f24a 434c 	movw	r3, #42060	; 0xa44c
 101da9a:	f24a 4450 	movw	r4, #42064	; 0xa450
 101da9e:	f2c0 1306 	movt	r3, #262	; 0x106
 101daa2:	f2c0 1406 	movt	r4, #262	; 0x106
 101daa6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 101daa8:	2200      	movs	r2, #0
 101daaa:	2003      	movs	r0, #3
 101daac:	920a      	str	r2, [sp, #40]	; 0x28
 101daae:	2d47      	cmp	r5, #71	; 0x47
 101dab0:	bfc8      	it	gt
 101dab2:	4623      	movgt	r3, r4
 101dab4:	9003      	str	r0, [sp, #12]
 101dab6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 101daba:	930b      	str	r3, [sp, #44]	; 0x2c
 101dabc:	9007      	str	r0, [sp, #28]
 101dabe:	9204      	str	r2, [sp, #16]
 101dac0:	9213      	str	r2, [sp, #76]	; 0x4c
 101dac2:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101dac6:	e53c      	b.n	101d542 <_svfprintf_r+0x2ca>
 101dac8:	461a      	mov	r2, r3
 101daca:	930e      	str	r3, [sp, #56]	; 0x38
 101dacc:	2b00      	cmp	r3, #0
 101dace:	f43f acc3 	beq.w	101d458 <_svfprintf_r+0x1e0>
 101dad2:	2300      	movs	r3, #0
 101dad4:	2001      	movs	r0, #1
 101dad6:	4619      	mov	r1, r3
 101dad8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101dadc:	930a      	str	r3, [sp, #40]	; 0x28
 101dade:	9304      	str	r3, [sp, #16]
 101dae0:	9313      	str	r3, [sp, #76]	; 0x4c
 101dae2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101dae6:	ab3b      	add	r3, sp, #236	; 0xec
 101dae8:	9003      	str	r0, [sp, #12]
 101daea:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 101daee:	9007      	str	r0, [sp, #28]
 101daf0:	930b      	str	r3, [sp, #44]	; 0x2c
 101daf2:	e52a      	b.n	101d54a <_svfprintf_r+0x2d2>
 101daf4:	9603      	str	r6, [sp, #12]
 101daf6:	2d00      	cmp	r5, #0
 101daf8:	bf08      	it	eq
 101dafa:	2c0a      	cmpeq	r4, #10
 101dafc:	f080 8544 	bcs.w	101e588 <_svfprintf_r+0x1310>
 101db00:	2301      	movs	r3, #1
 101db02:	3430      	adds	r4, #48	; 0x30
 101db04:	9307      	str	r3, [sp, #28]
 101db06:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 101db0a:	9e03      	ldr	r6, [sp, #12]
 101db0c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 101db10:	930b      	str	r3, [sp, #44]	; 0x2c
 101db12:	e509      	b.n	101d528 <_svfprintf_r+0x2b0>
 101db14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101db16:	2b65      	cmp	r3, #101	; 0x65
 101db18:	f340 8124 	ble.w	101dd64 <_svfprintf_r+0xaec>
 101db1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101db20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101db24:	f040 81d1 	bne.w	101deca <_svfprintf_r+0xc52>
 101db28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101db2a:	3201      	adds	r2, #1
 101db2c:	2101      	movs	r1, #1
 101db2e:	922a      	str	r2, [sp, #168]	; 0xa8
 101db30:	3301      	adds	r3, #1
 101db32:	f648 12e8 	movw	r2, #35304	; 0x89e8
 101db36:	2b07      	cmp	r3, #7
 101db38:	f2c0 1206 	movt	r2, #262	; 0x106
 101db3c:	9329      	str	r3, [sp, #164]	; 0xa4
 101db3e:	e9c9 2100 	strd	r2, r1, [r9]
 101db42:	bfd8      	it	le
 101db44:	f109 0908 	addle.w	r9, r9, #8
 101db48:	f300 84b6 	bgt.w	101e4b8 <_svfprintf_r+0x1240>
 101db4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101db4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 101db50:	4293      	cmp	r3, r2
 101db52:	f280 8298 	bge.w	101e086 <_svfprintf_r+0xe0e>
 101db56:	9917      	ldr	r1, [sp, #92]	; 0x5c
 101db58:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101db5c:	f8c9 1000 	str.w	r1, [r9]
 101db60:	3301      	adds	r3, #1
 101db62:	9916      	ldr	r1, [sp, #88]	; 0x58
 101db64:	2b07      	cmp	r3, #7
 101db66:	440a      	add	r2, r1
 101db68:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101db6c:	f8c9 1004 	str.w	r1, [r9, #4]
 101db70:	bfd8      	it	le
 101db72:	f109 0908 	addle.w	r9, r9, #8
 101db76:	f300 8356 	bgt.w	101e226 <_svfprintf_r+0xfae>
 101db7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101db7c:	1e5c      	subs	r4, r3, #1
 101db7e:	2c00      	cmp	r4, #0
 101db80:	f77f ad37 	ble.w	101d5f2 <_svfprintf_r+0x37a>
 101db84:	2c10      	cmp	r4, #16
 101db86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101db88:	f340 84d0 	ble.w	101e52c <_svfprintf_r+0x12b4>
 101db8c:	9604      	str	r6, [sp, #16]
 101db8e:	2510      	movs	r5, #16
 101db90:	4626      	mov	r6, r4
 101db92:	4619      	mov	r1, r3
 101db94:	9c08      	ldr	r4, [sp, #32]
 101db96:	e003      	b.n	101dba0 <_svfprintf_r+0x928>
 101db98:	3e10      	subs	r6, #16
 101db9a:	2e10      	cmp	r6, #16
 101db9c:	f340 84c3 	ble.w	101e526 <_svfprintf_r+0x12ae>
 101dba0:	3101      	adds	r1, #1
 101dba2:	4b6f      	ldr	r3, [pc, #444]	; (101dd60 <_svfprintf_r+0xae8>)
 101dba4:	2907      	cmp	r1, #7
 101dba6:	f102 0210 	add.w	r2, r2, #16
 101dbaa:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dbae:	e9c9 3500 	strd	r3, r5, [r9]
 101dbb2:	f109 0908 	add.w	r9, r9, #8
 101dbb6:	ddef      	ble.n	101db98 <_svfprintf_r+0x920>
 101dbb8:	aa28      	add	r2, sp, #160	; 0xa0
 101dbba:	4621      	mov	r1, r4
 101dbbc:	4650      	mov	r0, sl
 101dbbe:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101dbc2:	f005 fe49 	bl	1023858 <__ssprint_r>
 101dbc6:	2800      	cmp	r0, #0
 101dbc8:	f040 80b9 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101dbcc:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101dbd0:	e7e2      	b.n	101db98 <_svfprintf_r+0x920>
 101dbd2:	9b06      	ldr	r3, [sp, #24]
 101dbd4:	9903      	ldr	r1, [sp, #12]
 101dbd6:	1a5c      	subs	r4, r3, r1
 101dbd8:	2c00      	cmp	r4, #0
 101dbda:	f77f acf1 	ble.w	101d5c0 <_svfprintf_r+0x348>
 101dbde:	2c10      	cmp	r4, #16
 101dbe0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101dbe2:	dd26      	ble.n	101dc32 <_svfprintf_r+0x9ba>
 101dbe4:	960c      	str	r6, [sp, #48]	; 0x30
 101dbe6:	2510      	movs	r5, #16
 101dbe8:	4626      	mov	r6, r4
 101dbea:	4619      	mov	r1, r3
 101dbec:	9c08      	ldr	r4, [sp, #32]
 101dbee:	e002      	b.n	101dbf6 <_svfprintf_r+0x97e>
 101dbf0:	3e10      	subs	r6, #16
 101dbf2:	2e10      	cmp	r6, #16
 101dbf4:	dd1a      	ble.n	101dc2c <_svfprintf_r+0x9b4>
 101dbf6:	3101      	adds	r1, #1
 101dbf8:	4b59      	ldr	r3, [pc, #356]	; (101dd60 <_svfprintf_r+0xae8>)
 101dbfa:	2907      	cmp	r1, #7
 101dbfc:	f102 0210 	add.w	r2, r2, #16
 101dc00:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dc04:	e9c9 3500 	strd	r3, r5, [r9]
 101dc08:	f109 0908 	add.w	r9, r9, #8
 101dc0c:	ddf0      	ble.n	101dbf0 <_svfprintf_r+0x978>
 101dc0e:	aa28      	add	r2, sp, #160	; 0xa0
 101dc10:	4621      	mov	r1, r4
 101dc12:	4650      	mov	r0, sl
 101dc14:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101dc18:	f005 fe1e 	bl	1023858 <__ssprint_r>
 101dc1c:	2800      	cmp	r0, #0
 101dc1e:	f040 808e 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101dc22:	3e10      	subs	r6, #16
 101dc24:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101dc28:	2e10      	cmp	r6, #16
 101dc2a:	dce4      	bgt.n	101dbf6 <_svfprintf_r+0x97e>
 101dc2c:	4634      	mov	r4, r6
 101dc2e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 101dc30:	460b      	mov	r3, r1
 101dc32:	3301      	adds	r3, #1
 101dc34:	494a      	ldr	r1, [pc, #296]	; (101dd60 <_svfprintf_r+0xae8>)
 101dc36:	2b07      	cmp	r3, #7
 101dc38:	4422      	add	r2, r4
 101dc3a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101dc3e:	e9c9 1400 	strd	r1, r4, [r9]
 101dc42:	bfd8      	it	le
 101dc44:	f109 0908 	addle.w	r9, r9, #8
 101dc48:	f77f acba 	ble.w	101d5c0 <_svfprintf_r+0x348>
 101dc4c:	aa28      	add	r2, sp, #160	; 0xa0
 101dc4e:	9908      	ldr	r1, [sp, #32]
 101dc50:	4650      	mov	r0, sl
 101dc52:	f005 fe01 	bl	1023858 <__ssprint_r>
 101dc56:	2800      	cmp	r0, #0
 101dc58:	d171      	bne.n	101dd3e <_svfprintf_r+0xac6>
 101dc5a:	9b04      	ldr	r3, [sp, #16]
 101dc5c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101dc60:	9907      	ldr	r1, [sp, #28]
 101dc62:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101dc64:	1a5c      	subs	r4, r3, r1
 101dc66:	2c00      	cmp	r4, #0
 101dc68:	f77f acb0 	ble.w	101d5cc <_svfprintf_r+0x354>
 101dc6c:	2c10      	cmp	r4, #16
 101dc6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101dc70:	dd25      	ble.n	101dcbe <_svfprintf_r+0xa46>
 101dc72:	9604      	str	r6, [sp, #16]
 101dc74:	2510      	movs	r5, #16
 101dc76:	4626      	mov	r6, r4
 101dc78:	4619      	mov	r1, r3
 101dc7a:	9c08      	ldr	r4, [sp, #32]
 101dc7c:	e002      	b.n	101dc84 <_svfprintf_r+0xa0c>
 101dc7e:	3e10      	subs	r6, #16
 101dc80:	2e10      	cmp	r6, #16
 101dc82:	dd19      	ble.n	101dcb8 <_svfprintf_r+0xa40>
 101dc84:	3101      	adds	r1, #1
 101dc86:	4b36      	ldr	r3, [pc, #216]	; (101dd60 <_svfprintf_r+0xae8>)
 101dc88:	2907      	cmp	r1, #7
 101dc8a:	f102 0210 	add.w	r2, r2, #16
 101dc8e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dc92:	e9c9 3500 	strd	r3, r5, [r9]
 101dc96:	f109 0908 	add.w	r9, r9, #8
 101dc9a:	ddf0      	ble.n	101dc7e <_svfprintf_r+0xa06>
 101dc9c:	aa28      	add	r2, sp, #160	; 0xa0
 101dc9e:	4621      	mov	r1, r4
 101dca0:	4650      	mov	r0, sl
 101dca2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101dca6:	f005 fdd7 	bl	1023858 <__ssprint_r>
 101dcaa:	2800      	cmp	r0, #0
 101dcac:	d147      	bne.n	101dd3e <_svfprintf_r+0xac6>
 101dcae:	3e10      	subs	r6, #16
 101dcb0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101dcb4:	2e10      	cmp	r6, #16
 101dcb6:	dce5      	bgt.n	101dc84 <_svfprintf_r+0xa0c>
 101dcb8:	4634      	mov	r4, r6
 101dcba:	9e04      	ldr	r6, [sp, #16]
 101dcbc:	460b      	mov	r3, r1
 101dcbe:	3301      	adds	r3, #1
 101dcc0:	4927      	ldr	r1, [pc, #156]	; (101dd60 <_svfprintf_r+0xae8>)
 101dcc2:	2b07      	cmp	r3, #7
 101dcc4:	4422      	add	r2, r4
 101dcc6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101dcca:	e9c9 1400 	strd	r1, r4, [r9]
 101dcce:	bfd8      	it	le
 101dcd0:	f109 0908 	addle.w	r9, r9, #8
 101dcd4:	f77f ac7a 	ble.w	101d5cc <_svfprintf_r+0x354>
 101dcd8:	aa28      	add	r2, sp, #160	; 0xa0
 101dcda:	9908      	ldr	r1, [sp, #32]
 101dcdc:	4650      	mov	r0, sl
 101dcde:	f005 fdbb 	bl	1023858 <__ssprint_r>
 101dce2:	bb60      	cbnz	r0, 101dd3e <_svfprintf_r+0xac6>
 101dce4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101dce6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101dcea:	e46f      	b.n	101d5cc <_svfprintf_r+0x354>
 101dcec:	4611      	mov	r1, r2
 101dcee:	08e2      	lsrs	r2, r4, #3
 101dcf0:	08e8      	lsrs	r0, r5, #3
 101dcf2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 101dcf6:	f004 0307 	and.w	r3, r4, #7
 101dcfa:	4605      	mov	r5, r0
 101dcfc:	3330      	adds	r3, #48	; 0x30
 101dcfe:	4614      	mov	r4, r2
 101dd00:	ea54 0005 	orrs.w	r0, r4, r5
 101dd04:	f801 3c01 	strb.w	r3, [r1, #-1]
 101dd08:	f101 32ff 	add.w	r2, r1, #4294967295
 101dd0c:	d1ee      	bne.n	101dcec <_svfprintf_r+0xa74>
 101dd0e:	9e03      	ldr	r6, [sp, #12]
 101dd10:	920b      	str	r2, [sp, #44]	; 0x2c
 101dd12:	4630      	mov	r0, r6
 101dd14:	2b30      	cmp	r3, #48	; 0x30
 101dd16:	bf0c      	ite	eq
 101dd18:	2000      	moveq	r0, #0
 101dd1a:	f000 0001 	andne.w	r0, r0, #1
 101dd1e:	2800      	cmp	r0, #0
 101dd20:	f040 840f 	bne.w	101e542 <_svfprintf_r+0x12ca>
 101dd24:	ab54      	add	r3, sp, #336	; 0x150
 101dd26:	1a9b      	subs	r3, r3, r2
 101dd28:	9307      	str	r3, [sp, #28]
 101dd2a:	f7ff bbfd 	b.w	101d528 <_svfprintf_r+0x2b0>
 101dd2e:	aa28      	add	r2, sp, #160	; 0xa0
 101dd30:	9908      	ldr	r1, [sp, #32]
 101dd32:	4650      	mov	r0, sl
 101dd34:	f005 fd90 	bl	1023858 <__ssprint_r>
 101dd38:	2800      	cmp	r0, #0
 101dd3a:	f43f ac6d 	beq.w	101d618 <_svfprintf_r+0x3a0>
 101dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101dd40:	2b00      	cmp	r3, #0
 101dd42:	f43f ab8d 	beq.w	101d460 <_svfprintf_r+0x1e8>
 101dd46:	990a      	ldr	r1, [sp, #40]	; 0x28
 101dd48:	4650      	mov	r0, sl
 101dd4a:	f004 fa59 	bl	1022200 <_free_r>
 101dd4e:	f7ff bb87 	b.w	101d460 <_svfprintf_r+0x1e8>
 101dd52:	bf00      	nop
 101dd54:	f3af 8000 	nop.w
 101dd58:	ffffffff 	.word	0xffffffff
 101dd5c:	7fefffff 	.word	0x7fefffff
 101dd60:	010663f8 	.word	0x010663f8
 101dd64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 101dd66:	3201      	adds	r2, #1
 101dd68:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101dd6a:	f109 0308 	add.w	r3, r9, #8
 101dd6e:	2c01      	cmp	r4, #1
 101dd70:	f100 0101 	add.w	r1, r0, #1
 101dd74:	f340 8134 	ble.w	101dfe0 <_svfprintf_r+0xd68>
 101dd78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101dd7a:	2907      	cmp	r1, #7
 101dd7c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dd80:	f8c9 0000 	str.w	r0, [r9]
 101dd84:	f04f 0001 	mov.w	r0, #1
 101dd88:	f8c9 0004 	str.w	r0, [r9, #4]
 101dd8c:	f300 8163 	bgt.w	101e056 <_svfprintf_r+0xdde>
 101dd90:	3101      	adds	r1, #1
 101dd92:	9816      	ldr	r0, [sp, #88]	; 0x58
 101dd94:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 101dd96:	2907      	cmp	r1, #7
 101dd98:	4402      	add	r2, r0
 101dd9a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dd9e:	e9c3 4000 	strd	r4, r0, [r3]
 101dda2:	bfd8      	it	le
 101dda4:	3308      	addle	r3, #8
 101dda6:	f300 8162 	bgt.w	101e06e <_svfprintf_r+0xdf6>
 101ddaa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101ddae:	1c48      	adds	r0, r1, #1
 101ddb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 101ddb2:	f103 0908 	add.w	r9, r3, #8
 101ddb6:	4684      	mov	ip, r0
 101ddb8:	3c01      	subs	r4, #1
 101ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101ddbe:	f000 8122 	beq.w	101e006 <_svfprintf_r+0xd8e>
 101ddc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101ddc4:	2807      	cmp	r0, #7
 101ddc6:	4422      	add	r2, r4
 101ddc8:	605c      	str	r4, [r3, #4]
 101ddca:	f105 0501 	add.w	r5, r5, #1
 101ddce:	922a      	str	r2, [sp, #168]	; 0xa8
 101ddd0:	601d      	str	r5, [r3, #0]
 101ddd2:	9029      	str	r0, [sp, #164]	; 0xa4
 101ddd4:	f300 82de 	bgt.w	101e394 <_svfprintf_r+0x111c>
 101ddd8:	f103 0410 	add.w	r4, r3, #16
 101dddc:	1c88      	adds	r0, r1, #2
 101ddde:	464b      	mov	r3, r9
 101dde0:	46a1      	mov	r9, r4
 101dde2:	9918      	ldr	r1, [sp, #96]	; 0x60
 101dde4:	2807      	cmp	r0, #7
 101dde6:	9029      	str	r0, [sp, #164]	; 0xa4
 101dde8:	440a      	add	r2, r1
 101ddea:	922a      	str	r2, [sp, #168]	; 0xa8
 101ddec:	6059      	str	r1, [r3, #4]
 101ddee:	a922      	add	r1, sp, #136	; 0x88
 101ddf0:	6019      	str	r1, [r3, #0]
 101ddf2:	f77f abfe 	ble.w	101d5f2 <_svfprintf_r+0x37a>
 101ddf6:	aa28      	add	r2, sp, #160	; 0xa0
 101ddf8:	9908      	ldr	r1, [sp, #32]
 101ddfa:	4650      	mov	r0, sl
 101ddfc:	f005 fd2c 	bl	1023858 <__ssprint_r>
 101de00:	2800      	cmp	r0, #0
 101de02:	d19c      	bne.n	101dd3e <_svfprintf_r+0xac6>
 101de04:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101de06:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101de0a:	f7ff bbf2 	b.w	101d5f2 <_svfprintf_r+0x37a>
 101de0e:	aa28      	add	r2, sp, #160	; 0xa0
 101de10:	9908      	ldr	r1, [sp, #32]
 101de12:	4650      	mov	r0, sl
 101de14:	f005 fd20 	bl	1023858 <__ssprint_r>
 101de18:	2800      	cmp	r0, #0
 101de1a:	d190      	bne.n	101dd3e <_svfprintf_r+0xac6>
 101de1c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101de1e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101de22:	f7ff bbb6 	b.w	101d592 <_svfprintf_r+0x31a>
 101de26:	aa28      	add	r2, sp, #160	; 0xa0
 101de28:	9908      	ldr	r1, [sp, #32]
 101de2a:	4650      	mov	r0, sl
 101de2c:	f005 fd14 	bl	1023858 <__ssprint_r>
 101de30:	2800      	cmp	r0, #0
 101de32:	d184      	bne.n	101dd3e <_svfprintf_r+0xac6>
 101de34:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101de36:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101de3a:	f7ff bbbd 	b.w	101d5b8 <_svfprintf_r+0x340>
 101de3e:	2c10      	cmp	r4, #16
 101de40:	f246 35e8 	movw	r5, #25576	; 0x63e8
 101de44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101de46:	f2c0 1506 	movt	r5, #262	; 0x106
 101de4a:	dd24      	ble.n	101de96 <_svfprintf_r+0xc1e>
 101de4c:	9704      	str	r7, [sp, #16]
 101de4e:	2610      	movs	r6, #16
 101de50:	462f      	mov	r7, r5
 101de52:	4619      	mov	r1, r3
 101de54:	9d08      	ldr	r5, [sp, #32]
 101de56:	e002      	b.n	101de5e <_svfprintf_r+0xbe6>
 101de58:	3c10      	subs	r4, #16
 101de5a:	2c10      	cmp	r4, #16
 101de5c:	dd18      	ble.n	101de90 <_svfprintf_r+0xc18>
 101de5e:	3101      	adds	r1, #1
 101de60:	3210      	adds	r2, #16
 101de62:	2907      	cmp	r1, #7
 101de64:	e9c9 7600 	strd	r7, r6, [r9]
 101de68:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101de6c:	f109 0908 	add.w	r9, r9, #8
 101de70:	ddf2      	ble.n	101de58 <_svfprintf_r+0xbe0>
 101de72:	aa28      	add	r2, sp, #160	; 0xa0
 101de74:	4629      	mov	r1, r5
 101de76:	4650      	mov	r0, sl
 101de78:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101de7c:	f005 fcec 	bl	1023858 <__ssprint_r>
 101de80:	2800      	cmp	r0, #0
 101de82:	f47f af5c 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101de86:	3c10      	subs	r4, #16
 101de88:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101de8c:	2c10      	cmp	r4, #16
 101de8e:	dce6      	bgt.n	101de5e <_svfprintf_r+0xbe6>
 101de90:	463d      	mov	r5, r7
 101de92:	9f04      	ldr	r7, [sp, #16]
 101de94:	460b      	mov	r3, r1
 101de96:	3301      	adds	r3, #1
 101de98:	4422      	add	r2, r4
 101de9a:	2b07      	cmp	r3, #7
 101de9c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101dea0:	e9c9 5400 	strd	r5, r4, [r9]
 101dea4:	f77f abad 	ble.w	101d602 <_svfprintf_r+0x38a>
 101dea8:	aa28      	add	r2, sp, #160	; 0xa0
 101deaa:	9908      	ldr	r1, [sp, #32]
 101deac:	4650      	mov	r0, sl
 101deae:	f005 fcd3 	bl	1023858 <__ssprint_r>
 101deb2:	2800      	cmp	r0, #0
 101deb4:	f47f af43 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101deb8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101deba:	f7ff bba2 	b.w	101d602 <_svfprintf_r+0x38a>
 101debe:	ab54      	add	r3, sp, #336	; 0x150
 101dec0:	9204      	str	r2, [sp, #16]
 101dec2:	930b      	str	r3, [sp, #44]	; 0x2c
 101dec4:	9207      	str	r2, [sp, #28]
 101dec6:	f7ff bb2f 	b.w	101d528 <_svfprintf_r+0x2b0>
 101deca:	991f      	ldr	r1, [sp, #124]	; 0x7c
 101decc:	2900      	cmp	r1, #0
 101dece:	f340 82a2 	ble.w	101e416 <_svfprintf_r+0x119e>
 101ded2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101ded4:	9912      	ldr	r1, [sp, #72]	; 0x48
 101ded6:	428b      	cmp	r3, r1
 101ded8:	bfa8      	it	ge
 101deda:	460b      	movge	r3, r1
 101dedc:	2b00      	cmp	r3, #0
 101dede:	461c      	mov	r4, r3
 101dee0:	dd0f      	ble.n	101df02 <_svfprintf_r+0xc8a>
 101dee2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101dee4:	4422      	add	r2, r4
 101dee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101dee8:	3301      	adds	r3, #1
 101deea:	f8c9 4004 	str.w	r4, [r9, #4]
 101deee:	2b07      	cmp	r3, #7
 101def0:	922a      	str	r2, [sp, #168]	; 0xa8
 101def2:	f8c9 1000 	str.w	r1, [r9]
 101def6:	bfd8      	it	le
 101def8:	f109 0908 	addle.w	r9, r9, #8
 101defc:	9329      	str	r3, [sp, #164]	; 0xa4
 101defe:	f300 84e1 	bgt.w	101e8c4 <_svfprintf_r+0x164c>
 101df02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101df04:	2c00      	cmp	r4, #0
 101df06:	bfa8      	it	ge
 101df08:	1b1b      	subge	r3, r3, r4
 101df0a:	2b00      	cmp	r3, #0
 101df0c:	461c      	mov	r4, r3
 101df0e:	f300 81b9 	bgt.w	101e284 <_svfprintf_r+0x100c>
 101df12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101df14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101df16:	440b      	add	r3, r1
 101df18:	0571      	lsls	r1, r6, #21
 101df1a:	461d      	mov	r5, r3
 101df1c:	f100 81db 	bmi.w	101e2d6 <_svfprintf_r+0x105e>
 101df20:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 101df22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101df24:	429c      	cmp	r4, r3
 101df26:	db02      	blt.n	101df2e <_svfprintf_r+0xcb6>
 101df28:	07f3      	lsls	r3, r6, #31
 101df2a:	f140 84d8 	bpl.w	101e8de <_svfprintf_r+0x1666>
 101df2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101df30:	9916      	ldr	r1, [sp, #88]	; 0x58
 101df32:	3301      	adds	r3, #1
 101df34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 101df36:	2b07      	cmp	r3, #7
 101df38:	440a      	add	r2, r1
 101df3a:	f8c9 1004 	str.w	r1, [r9, #4]
 101df3e:	f8c9 0000 	str.w	r0, [r9]
 101df42:	bfd8      	it	le
 101df44:	f109 0908 	addle.w	r9, r9, #8
 101df48:	922a      	str	r2, [sp, #168]	; 0xa8
 101df4a:	9329      	str	r3, [sp, #164]	; 0xa4
 101df4c:	f300 85c4 	bgt.w	101ead8 <_svfprintf_r+0x1860>
 101df50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101df52:	4619      	mov	r1, r3
 101df54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101df56:	4419      	add	r1, r3
 101df58:	1b1b      	subs	r3, r3, r4
 101df5a:	1b4c      	subs	r4, r1, r5
 101df5c:	429c      	cmp	r4, r3
 101df5e:	bfa8      	it	ge
 101df60:	461c      	movge	r4, r3
 101df62:	2c00      	cmp	r4, #0
 101df64:	dd0e      	ble.n	101df84 <_svfprintf_r+0xd0c>
 101df66:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101df68:	4422      	add	r2, r4
 101df6a:	f8c9 5000 	str.w	r5, [r9]
 101df6e:	3101      	adds	r1, #1
 101df70:	f8c9 4004 	str.w	r4, [r9, #4]
 101df74:	2907      	cmp	r1, #7
 101df76:	922a      	str	r2, [sp, #168]	; 0xa8
 101df78:	9129      	str	r1, [sp, #164]	; 0xa4
 101df7a:	bfd8      	it	le
 101df7c:	f109 0908 	addle.w	r9, r9, #8
 101df80:	f300 85b8 	bgt.w	101eaf4 <_svfprintf_r+0x187c>
 101df84:	2c00      	cmp	r4, #0
 101df86:	bfac      	ite	ge
 101df88:	1b1c      	subge	r4, r3, r4
 101df8a:	461c      	movlt	r4, r3
 101df8c:	2c00      	cmp	r4, #0
 101df8e:	f77f ab30 	ble.w	101d5f2 <_svfprintf_r+0x37a>
 101df92:	2c10      	cmp	r4, #16
 101df94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101df96:	f340 82c9 	ble.w	101e52c <_svfprintf_r+0x12b4>
 101df9a:	9604      	str	r6, [sp, #16]
 101df9c:	2510      	movs	r5, #16
 101df9e:	4626      	mov	r6, r4
 101dfa0:	4619      	mov	r1, r3
 101dfa2:	9c08      	ldr	r4, [sp, #32]
 101dfa4:	e003      	b.n	101dfae <_svfprintf_r+0xd36>
 101dfa6:	3e10      	subs	r6, #16
 101dfa8:	2e10      	cmp	r6, #16
 101dfaa:	f340 82bc 	ble.w	101e526 <_svfprintf_r+0x12ae>
 101dfae:	3101      	adds	r1, #1
 101dfb0:	4bb9      	ldr	r3, [pc, #740]	; (101e298 <_svfprintf_r+0x1020>)
 101dfb2:	2907      	cmp	r1, #7
 101dfb4:	f102 0210 	add.w	r2, r2, #16
 101dfb8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dfbc:	e9c9 3500 	strd	r3, r5, [r9]
 101dfc0:	f109 0908 	add.w	r9, r9, #8
 101dfc4:	ddef      	ble.n	101dfa6 <_svfprintf_r+0xd2e>
 101dfc6:	aa28      	add	r2, sp, #160	; 0xa0
 101dfc8:	4621      	mov	r1, r4
 101dfca:	4650      	mov	r0, sl
 101dfcc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101dfd0:	f005 fc42 	bl	1023858 <__ssprint_r>
 101dfd4:	2800      	cmp	r0, #0
 101dfd6:	f47f aeb2 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101dfda:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101dfde:	e7e2      	b.n	101dfa6 <_svfprintf_r+0xd2e>
 101dfe0:	07f4      	lsls	r4, r6, #31
 101dfe2:	f53f aec9 	bmi.w	101dd78 <_svfprintf_r+0xb00>
 101dfe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 101dfe8:	2907      	cmp	r1, #7
 101dfea:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101dfee:	f8c9 4000 	str.w	r4, [r9]
 101dff2:	f04f 0401 	mov.w	r4, #1
 101dff6:	f8c9 4004 	str.w	r4, [r9, #4]
 101dffa:	f300 81cb 	bgt.w	101e394 <_svfprintf_r+0x111c>
 101dffe:	3002      	adds	r0, #2
 101e000:	f109 0910 	add.w	r9, r9, #16
 101e004:	e6ed      	b.n	101dde2 <_svfprintf_r+0xb6a>
 101e006:	2c00      	cmp	r4, #0
 101e008:	f77f aeeb 	ble.w	101dde2 <_svfprintf_r+0xb6a>
 101e00c:	2c10      	cmp	r4, #16
 101e00e:	f340 869e 	ble.w	101ed4e <_svfprintf_r+0x1ad6>
 101e012:	2510      	movs	r5, #16
 101e014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 101e018:	e005      	b.n	101e026 <_svfprintf_r+0xdae>
 101e01a:	3c10      	subs	r4, #16
 101e01c:	f101 0c01 	add.w	ip, r1, #1
 101e020:	2c10      	cmp	r4, #16
 101e022:	f340 8302 	ble.w	101e62a <_svfprintf_r+0x13b2>
 101e026:	489c      	ldr	r0, [pc, #624]	; (101e298 <_svfprintf_r+0x1020>)
 101e028:	4661      	mov	r1, ip
 101e02a:	2907      	cmp	r1, #7
 101e02c:	f102 0210 	add.w	r2, r2, #16
 101e030:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 101e034:	e9c3 0500 	strd	r0, r5, [r3]
 101e038:	f103 0308 	add.w	r3, r3, #8
 101e03c:	dded      	ble.n	101e01a <_svfprintf_r+0xda2>
 101e03e:	aa28      	add	r2, sp, #160	; 0xa0
 101e040:	4649      	mov	r1, r9
 101e042:	4650      	mov	r0, sl
 101e044:	f005 fc08 	bl	1023858 <__ssprint_r>
 101e048:	ab2b      	add	r3, sp, #172	; 0xac
 101e04a:	2800      	cmp	r0, #0
 101e04c:	f47f ae77 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e050:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101e054:	e7e1      	b.n	101e01a <_svfprintf_r+0xda2>
 101e056:	aa28      	add	r2, sp, #160	; 0xa0
 101e058:	9908      	ldr	r1, [sp, #32]
 101e05a:	4650      	mov	r0, sl
 101e05c:	f005 fbfc 	bl	1023858 <__ssprint_r>
 101e060:	2800      	cmp	r0, #0
 101e062:	f47f ae6c 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e066:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e068:	ab2b      	add	r3, sp, #172	; 0xac
 101e06a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101e06c:	e690      	b.n	101dd90 <_svfprintf_r+0xb18>
 101e06e:	aa28      	add	r2, sp, #160	; 0xa0
 101e070:	9908      	ldr	r1, [sp, #32]
 101e072:	4650      	mov	r0, sl
 101e074:	f005 fbf0 	bl	1023858 <__ssprint_r>
 101e078:	2800      	cmp	r0, #0
 101e07a:	f47f ae60 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e07e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e080:	ab2b      	add	r3, sp, #172	; 0xac
 101e082:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101e084:	e691      	b.n	101ddaa <_svfprintf_r+0xb32>
 101e086:	07f4      	lsls	r4, r6, #31
 101e088:	bf58      	it	pl
 101e08a:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 101e08c:	f57f aab1 	bpl.w	101d5f2 <_svfprintf_r+0x37a>
 101e090:	e561      	b.n	101db56 <_svfprintf_r+0x8de>
 101e092:	eeb4 8b48 	vcmp.f64	d8, d8
 101e096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e09a:	f180 862f 	bvs.w	101ecfc <_svfprintf_r+0x1a84>
 101e09e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101e0a0:	f023 0420 	bic.w	r4, r3, #32
 101e0a4:	2c41      	cmp	r4, #65	; 0x41
 101e0a6:	f040 82e6 	bne.w	101e676 <_svfprintf_r+0x13fe>
 101e0aa:	2b61      	cmp	r3, #97	; 0x61
 101e0ac:	f04f 0230 	mov.w	r2, #48	; 0x30
 101e0b0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 101e0b4:	bf0c      	ite	eq
 101e0b6:	2378      	moveq	r3, #120	; 0x78
 101e0b8:	2358      	movne	r3, #88	; 0x58
 101e0ba:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 101e0be:	9b04      	ldr	r3, [sp, #16]
 101e0c0:	2b63      	cmp	r3, #99	; 0x63
 101e0c2:	f300 848e 	bgt.w	101e9e2 <_svfprintf_r+0x176a>
 101e0c6:	2300      	movs	r3, #0
 101e0c8:	930a      	str	r3, [sp, #40]	; 0x28
 101e0ca:	ab3b      	add	r3, sp, #236	; 0xec
 101e0cc:	930b      	str	r3, [sp, #44]	; 0x2c
 101e0ce:	ee18 3a90 	vmov	r3, s17
 101e0d2:	2b00      	cmp	r3, #0
 101e0d4:	f280 855a 	bge.w	101eb8c <_svfprintf_r+0x1914>
 101e0d8:	eeb1 0b48 	vneg.f64	d0, d8
 101e0dc:	232d      	movs	r3, #45	; 0x2d
 101e0de:	930c      	str	r3, [sp, #48]	; 0x30
 101e0e0:	a81f      	add	r0, sp, #124	; 0x7c
 101e0e2:	f005 fb31 	bl	1023748 <frexp>
 101e0e6:	9a04      	ldr	r2, [sp, #16]
 101e0e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 101e0ea:	f24a 405c 	movw	r0, #42076	; 0xa45c
 101e0ee:	f2c0 1006 	movt	r0, #262	; 0x106
 101e0f2:	3a01      	subs	r2, #1
 101e0f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101e0f6:	ee20 0b0b 	vmul.f64	d0, d0, d11
 101e0fa:	eeb5 0b40 	vcmp.f64	d0, #0.0
 101e0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e102:	bf04      	itt	eq
 101e104:	2301      	moveq	r3, #1
 101e106:	931f      	streq	r3, [sp, #124]	; 0x7c
 101e108:	f24a 13dc 	movw	r3, #41436	; 0xa1dc
 101e10c:	f2c0 1306 	movt	r3, #262	; 0x106
 101e110:	2961      	cmp	r1, #97	; 0x61
 101e112:	bf18      	it	ne
 101e114:	4618      	movne	r0, r3
 101e116:	e005      	b.n	101e124 <_svfprintf_r+0xeac>
 101e118:	eeb5 0b40 	vcmp.f64	d0, #0.0
 101e11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e120:	d015      	beq.n	101e14e <_svfprintf_r+0xed6>
 101e122:	461d      	mov	r5, r3
 101e124:	ee20 0b09 	vmul.f64	d0, d0, d9
 101e128:	f1b2 3fff 	cmp.w	r2, #4294967295
 101e12c:	462b      	mov	r3, r5
 101e12e:	4611      	mov	r1, r2
 101e130:	f102 32ff 	add.w	r2, r2, #4294967295
 101e134:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 101e138:	ee17 ca90 	vmov	ip, s15
 101e13c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 101e140:	ee30 0b46 	vsub.f64	d0, d0, d6
 101e144:	f810 c00c 	ldrb.w	ip, [r0, ip]
 101e148:	f803 cb01 	strb.w	ip, [r3], #1
 101e14c:	d1e4      	bne.n	101e118 <_svfprintf_r+0xea0>
 101e14e:	eeb4 0bca 	vcmpe.f64	d0, d10
 101e152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e156:	f300 855f 	bgt.w	101ec18 <_svfprintf_r+0x19a0>
 101e15a:	eeb4 0b4a 	vcmp.f64	d0, d10
 101e15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e162:	d104      	bne.n	101e16e <_svfprintf_r+0xef6>
 101e164:	ee17 2a90 	vmov	r2, s15
 101e168:	07d2      	lsls	r2, r2, #31
 101e16a:	f100 8555 	bmi.w	101ec18 <_svfprintf_r+0x19a0>
 101e16e:	2900      	cmp	r1, #0
 101e170:	bfa2      	ittt	ge
 101e172:	1c4a      	addge	r2, r1, #1
 101e174:	18d2      	addge	r2, r2, r3
 101e176:	2130      	movge	r1, #48	; 0x30
 101e178:	db03      	blt.n	101e182 <_svfprintf_r+0xf0a>
 101e17a:	f803 1b01 	strb.w	r1, [r3], #1
 101e17e:	4293      	cmp	r3, r2
 101e180:	d1fb      	bne.n	101e17a <_svfprintf_r+0xf02>
 101e182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101e184:	f046 0602 	orr.w	r6, r6, #2
 101e188:	1a9b      	subs	r3, r3, r2
 101e18a:	9312      	str	r3, [sp, #72]	; 0x48
 101e18c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101e18e:	9310      	str	r3, [sp, #64]	; 0x40
 101e190:	e2b5      	b.n	101e6fe <_svfprintf_r+0x1486>
 101e192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101e194:	06f4      	lsls	r4, r6, #27
 101e196:	f103 0204 	add.w	r2, r3, #4
 101e19a:	f100 85ea 	bmi.w	101ed72 <_svfprintf_r+0x1afa>
 101e19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101e1a0:	0670      	lsls	r0, r6, #25
 101e1a2:	bf48      	it	mi
 101e1a4:	f9b3 4000 	ldrshmi.w	r4, [r3]
 101e1a8:	d404      	bmi.n	101e1b4 <_svfprintf_r+0xf3c>
 101e1aa:	05b1      	lsls	r1, r6, #22
 101e1ac:	f140 83a9 	bpl.w	101e902 <_svfprintf_r+0x168a>
 101e1b0:	f993 4000 	ldrsb.w	r4, [r3]
 101e1b4:	17e5      	asrs	r5, r4, #31
 101e1b6:	9209      	str	r2, [sp, #36]	; 0x24
 101e1b8:	9603      	str	r6, [sp, #12]
 101e1ba:	4622      	mov	r2, r4
 101e1bc:	462b      	mov	r3, r5
 101e1be:	f7ff bb1e 	b.w	101d7fe <_svfprintf_r+0x586>
 101e1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101e1c4:	06f1      	lsls	r1, r6, #27
 101e1c6:	f852 4b04 	ldr.w	r4, [r2], #4
 101e1ca:	f100 85d5 	bmi.w	101ed78 <_svfprintf_r+0x1b00>
 101e1ce:	0673      	lsls	r3, r6, #25
 101e1d0:	9209      	str	r2, [sp, #36]	; 0x24
 101e1d2:	9603      	str	r6, [sp, #12]
 101e1d4:	f140 823b 	bpl.w	101e64e <_svfprintf_r+0x13d6>
 101e1d8:	b2a4      	uxth	r4, r4
 101e1da:	2500      	movs	r5, #0
 101e1dc:	2301      	movs	r3, #1
 101e1de:	f7ff b97c 	b.w	101d4da <_svfprintf_r+0x262>
 101e1e2:	9905      	ldr	r1, [sp, #20]
 101e1e4:	6812      	ldr	r2, [r2, #0]
 101e1e6:	9309      	str	r3, [sp, #36]	; 0x24
 101e1e8:	17cd      	asrs	r5, r1, #31
 101e1ea:	4608      	mov	r0, r1
 101e1ec:	4629      	mov	r1, r5
 101e1ee:	e9c2 0100 	strd	r0, r1, [r2]
 101e1f2:	f7ff b881 	b.w	101d2f8 <_svfprintf_r+0x80>
 101e1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101e1f8:	06f1      	lsls	r1, r6, #27
 101e1fa:	f852 4b04 	ldr.w	r4, [r2], #4
 101e1fe:	f100 85db 	bmi.w	101edb8 <_svfprintf_r+0x1b40>
 101e202:	0673      	lsls	r3, r6, #25
 101e204:	f140 822b 	bpl.w	101e65e <_svfprintf_r+0x13e6>
 101e208:	4633      	mov	r3, r6
 101e20a:	9209      	str	r2, [sp, #36]	; 0x24
 101e20c:	b2a4      	uxth	r4, r4
 101e20e:	2500      	movs	r5, #0
 101e210:	f7ff bb9b 	b.w	101d94a <_svfprintf_r+0x6d2>
 101e214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101e216:	2201      	movs	r2, #1
 101e218:	ac3b      	add	r4, sp, #236	; 0xec
 101e21a:	9203      	str	r2, [sp, #12]
 101e21c:	9207      	str	r2, [sp, #28]
 101e21e:	681b      	ldr	r3, [r3, #0]
 101e220:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 101e224:	e409      	b.n	101da3a <_svfprintf_r+0x7c2>
 101e226:	aa28      	add	r2, sp, #160	; 0xa0
 101e228:	9908      	ldr	r1, [sp, #32]
 101e22a:	4650      	mov	r0, sl
 101e22c:	f005 fb14 	bl	1023858 <__ssprint_r>
 101e230:	2800      	cmp	r0, #0
 101e232:	f47f ad84 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e236:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e238:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e23c:	e49d      	b.n	101db7a <_svfprintf_r+0x902>
 101e23e:	9804      	ldr	r0, [sp, #16]
 101e240:	f24a 4370 	movw	r3, #42096	; 0xa470
 101e244:	9204      	str	r2, [sp, #16]
 101e246:	f2c0 1306 	movt	r3, #262	; 0x106
 101e24a:	2806      	cmp	r0, #6
 101e24c:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 101e250:	4611      	mov	r1, r2
 101e252:	9213      	str	r2, [sp, #76]	; 0x4c
 101e254:	bf28      	it	cs
 101e256:	2006      	movcs	r0, #6
 101e258:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101e25c:	9003      	str	r0, [sp, #12]
 101e25e:	9007      	str	r0, [sp, #28]
 101e260:	930b      	str	r3, [sp, #44]	; 0x2c
 101e262:	f7ff b96e 	b.w	101d542 <_svfprintf_r+0x2ca>
 101e266:	2140      	movs	r1, #64	; 0x40
 101e268:	4650      	mov	r0, sl
 101e26a:	f7fc feb5 	bl	101afd8 <_malloc_r>
 101e26e:	9b08      	ldr	r3, [sp, #32]
 101e270:	6018      	str	r0, [r3, #0]
 101e272:	6118      	str	r0, [r3, #16]
 101e274:	2800      	cmp	r0, #0
 101e276:	f000 8591 	beq.w	101ed9c <_svfprintf_r+0x1b24>
 101e27a:	9a08      	ldr	r2, [sp, #32]
 101e27c:	2340      	movs	r3, #64	; 0x40
 101e27e:	6153      	str	r3, [r2, #20]
 101e280:	f7ff b81a 	b.w	101d2b8 <_svfprintf_r+0x40>
 101e284:	2c10      	cmp	r4, #16
 101e286:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101e288:	f340 82a9 	ble.w	101e7de <_svfprintf_r+0x1566>
 101e28c:	9604      	str	r6, [sp, #16]
 101e28e:	2510      	movs	r5, #16
 101e290:	4626      	mov	r6, r4
 101e292:	4619      	mov	r1, r3
 101e294:	9c08      	ldr	r4, [sp, #32]
 101e296:	e005      	b.n	101e2a4 <_svfprintf_r+0x102c>
 101e298:	010663f8 	.word	0x010663f8
 101e29c:	3e10      	subs	r6, #16
 101e29e:	2e10      	cmp	r6, #16
 101e2a0:	f340 829a 	ble.w	101e7d8 <_svfprintf_r+0x1560>
 101e2a4:	3101      	adds	r1, #1
 101e2a6:	4bb7      	ldr	r3, [pc, #732]	; (101e584 <_svfprintf_r+0x130c>)
 101e2a8:	2907      	cmp	r1, #7
 101e2aa:	f102 0210 	add.w	r2, r2, #16
 101e2ae:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101e2b2:	e9c9 3500 	strd	r3, r5, [r9]
 101e2b6:	f109 0908 	add.w	r9, r9, #8
 101e2ba:	ddef      	ble.n	101e29c <_svfprintf_r+0x1024>
 101e2bc:	aa28      	add	r2, sp, #160	; 0xa0
 101e2be:	4621      	mov	r1, r4
 101e2c0:	4650      	mov	r0, sl
 101e2c2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e2c6:	f005 fac7 	bl	1023858 <__ssprint_r>
 101e2ca:	2800      	cmp	r0, #0
 101e2cc:	f47f ad37 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e2d0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101e2d4:	e7e2      	b.n	101e29c <_svfprintf_r+0x1024>
 101e2d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 101e2d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 101e2da:	2b00      	cmp	r3, #0
 101e2dc:	bfd8      	it	le
 101e2de:	2900      	cmple	r1, #0
 101e2e0:	f340 8556 	ble.w	101ed90 <_svfprintf_r+0x1b18>
 101e2e4:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 101e2e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 101e2ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101e2ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 101e2f0:	960c      	str	r6, [sp, #48]	; 0x30
 101e2f2:	461e      	mov	r6, r3
 101e2f4:	4401      	add	r1, r0
 101e2f6:	9107      	str	r1, [sp, #28]
 101e2f8:	2e00      	cmp	r6, #0
 101e2fa:	d044      	beq.n	101e386 <_svfprintf_r+0x110e>
 101e2fc:	3e01      	subs	r6, #1
 101e2fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101e300:	9919      	ldr	r1, [sp, #100]	; 0x64
 101e302:	3301      	adds	r3, #1
 101e304:	981a      	ldr	r0, [sp, #104]	; 0x68
 101e306:	2b07      	cmp	r3, #7
 101e308:	440a      	add	r2, r1
 101e30a:	f8c9 1004 	str.w	r1, [r9, #4]
 101e30e:	f8c9 0000 	str.w	r0, [r9]
 101e312:	bfd8      	it	le
 101e314:	f109 0908 	addle.w	r9, r9, #8
 101e318:	922a      	str	r2, [sp, #168]	; 0xa8
 101e31a:	9329      	str	r3, [sp, #164]	; 0xa4
 101e31c:	f300 80c0 	bgt.w	101e4a0 <_svfprintf_r+0x1228>
 101e320:	9814      	ldr	r0, [sp, #80]	; 0x50
 101e322:	9907      	ldr	r1, [sp, #28]
 101e324:	7803      	ldrb	r3, [r0, #0]
 101e326:	1b4c      	subs	r4, r1, r5
 101e328:	9104      	str	r1, [sp, #16]
 101e32a:	429c      	cmp	r4, r3
 101e32c:	bfa8      	it	ge
 101e32e:	461c      	movge	r4, r3
 101e330:	2c00      	cmp	r4, #0
 101e332:	dd0e      	ble.n	101e352 <_svfprintf_r+0x10da>
 101e334:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101e336:	4422      	add	r2, r4
 101e338:	f8c9 5000 	str.w	r5, [r9]
 101e33c:	3301      	adds	r3, #1
 101e33e:	922a      	str	r2, [sp, #168]	; 0xa8
 101e340:	2b07      	cmp	r3, #7
 101e342:	f8c9 4004 	str.w	r4, [r9, #4]
 101e346:	9329      	str	r3, [sp, #164]	; 0xa4
 101e348:	f300 8107 	bgt.w	101e55a <_svfprintf_r+0x12e2>
 101e34c:	7803      	ldrb	r3, [r0, #0]
 101e34e:	f109 0908 	add.w	r9, r9, #8
 101e352:	2c00      	cmp	r4, #0
 101e354:	bfac      	ite	ge
 101e356:	1b1c      	subge	r4, r3, r4
 101e358:	461c      	movlt	r4, r3
 101e35a:	2c00      	cmp	r4, #0
 101e35c:	dc29      	bgt.n	101e3b2 <_svfprintf_r+0x113a>
 101e35e:	441d      	add	r5, r3
 101e360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 101e362:	2e00      	cmp	r6, #0
 101e364:	bfd8      	it	le
 101e366:	2b00      	cmple	r3, #0
 101e368:	dcc6      	bgt.n	101e2f8 <_svfprintf_r+0x1080>
 101e36a:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 101e36e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 101e372:	9904      	ldr	r1, [sp, #16]
 101e374:	462b      	mov	r3, r5
 101e376:	428d      	cmp	r5, r1
 101e378:	bf28      	it	cs
 101e37a:	460b      	movcs	r3, r1
 101e37c:	461d      	mov	r5, r3
 101e37e:	e5cf      	b.n	101df20 <_svfprintf_r+0xca8>
 101e380:	9603      	str	r6, [sp, #12]
 101e382:	f7ff bb1d 	b.w	101d9c0 <_svfprintf_r+0x748>
 101e386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101e388:	3b01      	subs	r3, #1
 101e38a:	9314      	str	r3, [sp, #80]	; 0x50
 101e38c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 101e38e:	3b01      	subs	r3, #1
 101e390:	9311      	str	r3, [sp, #68]	; 0x44
 101e392:	e7b4      	b.n	101e2fe <_svfprintf_r+0x1086>
 101e394:	aa28      	add	r2, sp, #160	; 0xa0
 101e396:	9908      	ldr	r1, [sp, #32]
 101e398:	4650      	mov	r0, sl
 101e39a:	f005 fa5d 	bl	1023858 <__ssprint_r>
 101e39e:	2800      	cmp	r0, #0
 101e3a0:	f47f accd 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e3a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101e3a6:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 101e3aa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e3ac:	ab2b      	add	r3, sp, #172	; 0xac
 101e3ae:	3001      	adds	r0, #1
 101e3b0:	e517      	b.n	101dde2 <_svfprintf_r+0xb6a>
 101e3b2:	2c10      	cmp	r4, #16
 101e3b4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101e3b6:	dd1f      	ble.n	101e3f8 <_svfprintf_r+0x1180>
 101e3b8:	2710      	movs	r7, #16
 101e3ba:	e002      	b.n	101e3c2 <_svfprintf_r+0x114a>
 101e3bc:	3c10      	subs	r4, #16
 101e3be:	2c10      	cmp	r4, #16
 101e3c0:	dd1a      	ble.n	101e3f8 <_svfprintf_r+0x1180>
 101e3c2:	3101      	adds	r1, #1
 101e3c4:	4b6f      	ldr	r3, [pc, #444]	; (101e584 <_svfprintf_r+0x130c>)
 101e3c6:	2907      	cmp	r1, #7
 101e3c8:	f102 0210 	add.w	r2, r2, #16
 101e3cc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101e3d0:	e9c9 3700 	strd	r3, r7, [r9]
 101e3d4:	f109 0908 	add.w	r9, r9, #8
 101e3d8:	ddf0      	ble.n	101e3bc <_svfprintf_r+0x1144>
 101e3da:	aa28      	add	r2, sp, #160	; 0xa0
 101e3dc:	4641      	mov	r1, r8
 101e3de:	4650      	mov	r0, sl
 101e3e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e3e4:	f005 fa38 	bl	1023858 <__ssprint_r>
 101e3e8:	2800      	cmp	r0, #0
 101e3ea:	f47f aca8 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e3ee:	3c10      	subs	r4, #16
 101e3f0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101e3f4:	2c10      	cmp	r4, #16
 101e3f6:	dce4      	bgt.n	101e3c2 <_svfprintf_r+0x114a>
 101e3f8:	3101      	adds	r1, #1
 101e3fa:	4b62      	ldr	r3, [pc, #392]	; (101e584 <_svfprintf_r+0x130c>)
 101e3fc:	2907      	cmp	r1, #7
 101e3fe:	4422      	add	r2, r4
 101e400:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101e404:	e9c9 3400 	strd	r3, r4, [r9]
 101e408:	f300 8337 	bgt.w	101ea7a <_svfprintf_r+0x1802>
 101e40c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101e40e:	f109 0908 	add.w	r9, r9, #8
 101e412:	781b      	ldrb	r3, [r3, #0]
 101e414:	e7a3      	b.n	101e35e <_svfprintf_r+0x10e6>
 101e416:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101e418:	3201      	adds	r2, #1
 101e41a:	f648 10e8 	movw	r0, #35304	; 0x89e8
 101e41e:	2401      	movs	r4, #1
 101e420:	3301      	adds	r3, #1
 101e422:	f2c0 1006 	movt	r0, #262	; 0x106
 101e426:	2b07      	cmp	r3, #7
 101e428:	e9c9 0400 	strd	r0, r4, [r9]
 101e42c:	922a      	str	r2, [sp, #168]	; 0xa8
 101e42e:	bfd8      	it	le
 101e430:	f109 0908 	addle.w	r9, r9, #8
 101e434:	9329      	str	r3, [sp, #164]	; 0xa4
 101e436:	f300 822c 	bgt.w	101e892 <_svfprintf_r+0x161a>
 101e43a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101e43c:	430b      	orrs	r3, r1
 101e43e:	f000 8338 	beq.w	101eab2 <_svfprintf_r+0x183a>
 101e442:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101e444:	9816      	ldr	r0, [sp, #88]	; 0x58
 101e446:	3301      	adds	r3, #1
 101e448:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 101e44a:	2b07      	cmp	r3, #7
 101e44c:	4402      	add	r2, r0
 101e44e:	f8c9 0004 	str.w	r0, [r9, #4]
 101e452:	f8c9 4000 	str.w	r4, [r9]
 101e456:	bfd8      	it	le
 101e458:	f109 0908 	addle.w	r9, r9, #8
 101e45c:	922a      	str	r2, [sp, #168]	; 0xa8
 101e45e:	9329      	str	r3, [sp, #164]	; 0xa4
 101e460:	f300 8319 	bgt.w	101ea96 <_svfprintf_r+0x181e>
 101e464:	2900      	cmp	r1, #0
 101e466:	f2c0 8397 	blt.w	101eb98 <_svfprintf_r+0x1920>
 101e46a:	3301      	adds	r3, #1
 101e46c:	9912      	ldr	r1, [sp, #72]	; 0x48
 101e46e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101e470:	2b07      	cmp	r3, #7
 101e472:	440a      	add	r2, r1
 101e474:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101e478:	e9c9 0100 	strd	r0, r1, [r9]
 101e47c:	f77f a8b7 	ble.w	101d5ee <_svfprintf_r+0x376>
 101e480:	e4b9      	b.n	101ddf6 <_svfprintf_r+0xb7e>
 101e482:	aa28      	add	r2, sp, #160	; 0xa0
 101e484:	9908      	ldr	r1, [sp, #32]
 101e486:	4650      	mov	r0, sl
 101e488:	f005 f9e6 	bl	1023858 <__ssprint_r>
 101e48c:	2800      	cmp	r0, #0
 101e48e:	f47f ac56 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e492:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101e496:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e49a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e49c:	f7ff b866 	b.w	101d56c <_svfprintf_r+0x2f4>
 101e4a0:	aa28      	add	r2, sp, #160	; 0xa0
 101e4a2:	4641      	mov	r1, r8
 101e4a4:	4650      	mov	r0, sl
 101e4a6:	f005 f9d7 	bl	1023858 <__ssprint_r>
 101e4aa:	2800      	cmp	r0, #0
 101e4ac:	f47f ac47 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e4b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e4b2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e4b6:	e733      	b.n	101e320 <_svfprintf_r+0x10a8>
 101e4b8:	aa28      	add	r2, sp, #160	; 0xa0
 101e4ba:	9908      	ldr	r1, [sp, #32]
 101e4bc:	4650      	mov	r0, sl
 101e4be:	f005 f9cb 	bl	1023858 <__ssprint_r>
 101e4c2:	2800      	cmp	r0, #0
 101e4c4:	f47f ac3b 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e4c8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e4cc:	f7ff bb3e 	b.w	101db4c <_svfprintf_r+0x8d4>
 101e4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101e4d2:	2208      	movs	r2, #8
 101e4d4:	2100      	movs	r1, #0
 101e4d6:	a826      	add	r0, sp, #152	; 0x98
 101e4d8:	9321      	str	r3, [sp, #132]	; 0x84
 101e4da:	f7fd fde9 	bl	101c0b0 <memset>
 101e4de:	9b04      	ldr	r3, [sp, #16]
 101e4e0:	1c5a      	adds	r2, r3, #1
 101e4e2:	f000 8196 	beq.w	101e812 <_svfprintf_r+0x159a>
 101e4e6:	2400      	movs	r4, #0
 101e4e8:	9603      	str	r6, [sp, #12]
 101e4ea:	f8cd 9010 	str.w	r9, [sp, #16]
 101e4ee:	4626      	mov	r6, r4
 101e4f0:	4699      	mov	r9, r3
 101e4f2:	9509      	str	r5, [sp, #36]	; 0x24
 101e4f4:	e009      	b.n	101e50a <_svfprintf_r+0x1292>
 101e4f6:	f002 fac1 	bl	1020a7c <_wcrtomb_r>
 101e4fa:	1833      	adds	r3, r6, r0
 101e4fc:	3001      	adds	r0, #1
 101e4fe:	f000 8383 	beq.w	101ec08 <_svfprintf_r+0x1990>
 101e502:	454b      	cmp	r3, r9
 101e504:	dc0a      	bgt.n	101e51c <_svfprintf_r+0x12a4>
 101e506:	461e      	mov	r6, r3
 101e508:	d008      	beq.n	101e51c <_svfprintf_r+0x12a4>
 101e50a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101e50c:	ab26      	add	r3, sp, #152	; 0x98
 101e50e:	a93b      	add	r1, sp, #236	; 0xec
 101e510:	4650      	mov	r0, sl
 101e512:	5915      	ldr	r5, [r2, r4]
 101e514:	3404      	adds	r4, #4
 101e516:	462a      	mov	r2, r5
 101e518:	2d00      	cmp	r5, #0
 101e51a:	d1ec      	bne.n	101e4f6 <_svfprintf_r+0x127e>
 101e51c:	9607      	str	r6, [sp, #28]
 101e51e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101e520:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 101e524:	e183      	b.n	101e82e <_svfprintf_r+0x15b6>
 101e526:	4634      	mov	r4, r6
 101e528:	9e04      	ldr	r6, [sp, #16]
 101e52a:	460b      	mov	r3, r1
 101e52c:	3301      	adds	r3, #1
 101e52e:	4915      	ldr	r1, [pc, #84]	; (101e584 <_svfprintf_r+0x130c>)
 101e530:	2b07      	cmp	r3, #7
 101e532:	4422      	add	r2, r4
 101e534:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101e538:	e9c9 1400 	strd	r1, r4, [r9]
 101e53c:	f77f a857 	ble.w	101d5ee <_svfprintf_r+0x376>
 101e540:	e459      	b.n	101ddf6 <_svfprintf_r+0xb7e>
 101e542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101e544:	3902      	subs	r1, #2
 101e546:	2330      	movs	r3, #48	; 0x30
 101e548:	9e03      	ldr	r6, [sp, #12]
 101e54a:	910b      	str	r1, [sp, #44]	; 0x2c
 101e54c:	f802 3c01 	strb.w	r3, [r2, #-1]
 101e550:	ab54      	add	r3, sp, #336	; 0x150
 101e552:	1a5b      	subs	r3, r3, r1
 101e554:	9307      	str	r3, [sp, #28]
 101e556:	f7fe bfe7 	b.w	101d528 <_svfprintf_r+0x2b0>
 101e55a:	aa28      	add	r2, sp, #160	; 0xa0
 101e55c:	4641      	mov	r1, r8
 101e55e:	4650      	mov	r0, sl
 101e560:	f005 f97a 	bl	1023858 <__ssprint_r>
 101e564:	2800      	cmp	r0, #0
 101e566:	f47f abea 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e56a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101e56c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e570:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e572:	781b      	ldrb	r3, [r3, #0]
 101e574:	e6ed      	b.n	101e352 <_svfprintf_r+0x10da>
 101e576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101e578:	6812      	ldr	r2, [r2, #0]
 101e57a:	9309      	str	r3, [sp, #36]	; 0x24
 101e57c:	9b05      	ldr	r3, [sp, #20]
 101e57e:	6013      	str	r3, [r2, #0]
 101e580:	f7fe beba 	b.w	101d2f8 <_svfprintf_r+0x80>
 101e584:	010663f8 	.word	0x010663f8
 101e588:	9b03      	ldr	r3, [sp, #12]
 101e58a:	2200      	movs	r2, #0
 101e58c:	f8cd 901c 	str.w	r9, [sp, #28]
 101e590:	ae54      	add	r6, sp, #336	; 0x150
 101e592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 101e596:	970c      	str	r7, [sp, #48]	; 0x30
 101e598:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 101e59c:	4691      	mov	r9, r2
 101e59e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 101e5a2:	461f      	mov	r7, r3
 101e5a4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 101e5a8:	e008      	b.n	101e5bc <_svfprintf_r+0x1344>
 101e5aa:	f7fb fe0d 	bl	101a1c8 <__aeabi_uldivmod>
 101e5ae:	2d00      	cmp	r5, #0
 101e5b0:	bf08      	it	eq
 101e5b2:	2c0a      	cmpeq	r4, #10
 101e5b4:	d329      	bcc.n	101e60a <_svfprintf_r+0x1392>
 101e5b6:	4604      	mov	r4, r0
 101e5b8:	4656      	mov	r6, sl
 101e5ba:	460d      	mov	r5, r1
 101e5bc:	220a      	movs	r2, #10
 101e5be:	2300      	movs	r3, #0
 101e5c0:	4620      	mov	r0, r4
 101e5c2:	4629      	mov	r1, r5
 101e5c4:	f7fb fe00 	bl	101a1c8 <__aeabi_uldivmod>
 101e5c8:	f109 0901 	add.w	r9, r9, #1
 101e5cc:	4620      	mov	r0, r4
 101e5ce:	4629      	mov	r1, r5
 101e5d0:	f106 3aff 	add.w	sl, r6, #4294967295
 101e5d4:	2300      	movs	r3, #0
 101e5d6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 101e5da:	220a      	movs	r2, #10
 101e5dc:	f806 cc01 	strb.w	ip, [r6, #-1]
 101e5e0:	2f00      	cmp	r7, #0
 101e5e2:	d0e2      	beq.n	101e5aa <_svfprintf_r+0x1332>
 101e5e4:	f898 6000 	ldrb.w	r6, [r8]
 101e5e8:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 101e5ec:	bf18      	it	ne
 101e5ee:	f04f 0c01 	movne.w	ip, #1
 101e5f2:	454e      	cmp	r6, r9
 101e5f4:	bf18      	it	ne
 101e5f6:	f04f 0c00 	movne.w	ip, #0
 101e5fa:	f1bc 0f00 	cmp.w	ip, #0
 101e5fe:	d0d4      	beq.n	101e5aa <_svfprintf_r+0x1332>
 101e600:	429d      	cmp	r5, r3
 101e602:	bf08      	it	eq
 101e604:	4294      	cmpeq	r4, r2
 101e606:	f080 8285 	bcs.w	101eb14 <_svfprintf_r+0x189c>
 101e60a:	4652      	mov	r2, sl
 101e60c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 101e610:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 101e614:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 101e618:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 101e61c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 101e620:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 101e624:	9e03      	ldr	r6, [sp, #12]
 101e626:	f7ff bb7d 	b.w	101dd24 <_svfprintf_r+0xaac>
 101e62a:	f103 0108 	add.w	r1, r3, #8
 101e62e:	4660      	mov	r0, ip
 101e630:	4db8      	ldr	r5, [pc, #736]	; (101e914 <_svfprintf_r+0x169c>)
 101e632:	2807      	cmp	r0, #7
 101e634:	4422      	add	r2, r4
 101e636:	605c      	str	r4, [r3, #4]
 101e638:	922a      	str	r2, [sp, #168]	; 0xa8
 101e63a:	601d      	str	r5, [r3, #0]
 101e63c:	9029      	str	r0, [sp, #164]	; 0xa4
 101e63e:	f73f aea9 	bgt.w	101e394 <_svfprintf_r+0x111c>
 101e642:	3001      	adds	r0, #1
 101e644:	f101 0908 	add.w	r9, r1, #8
 101e648:	460b      	mov	r3, r1
 101e64a:	f7ff bbca 	b.w	101dde2 <_svfprintf_r+0xb6a>
 101e64e:	05b5      	lsls	r5, r6, #22
 101e650:	f04f 0301 	mov.w	r3, #1
 101e654:	bf48      	it	mi
 101e656:	b2e4      	uxtbmi	r4, r4
 101e658:	2500      	movs	r5, #0
 101e65a:	f7fe bf3e 	b.w	101d4da <_svfprintf_r+0x262>
 101e65e:	05b5      	lsls	r5, r6, #22
 101e660:	bf45      	ittet	mi
 101e662:	9209      	strmi	r2, [sp, #36]	; 0x24
 101e664:	b2e4      	uxtbmi	r4, r4
 101e666:	9209      	strpl	r2, [sp, #36]	; 0x24
 101e668:	4633      	movmi	r3, r6
 101e66a:	bf4e      	itee	mi
 101e66c:	2500      	movmi	r5, #0
 101e66e:	2500      	movpl	r5, #0
 101e670:	4633      	movpl	r3, r6
 101e672:	f7ff b96a 	b.w	101d94a <_svfprintf_r+0x6d2>
 101e676:	9b04      	ldr	r3, [sp, #16]
 101e678:	1c5a      	adds	r2, r3, #1
 101e67a:	f000 816a 	beq.w	101e952 <_svfprintf_r+0x16da>
 101e67e:	2b00      	cmp	r3, #0
 101e680:	bf08      	it	eq
 101e682:	2c47      	cmpeq	r4, #71	; 0x47
 101e684:	f040 8167 	bne.w	101e956 <_svfprintf_r+0x16de>
 101e688:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 101e68c:	930d      	str	r3, [sp, #52]	; 0x34
 101e68e:	ee18 3a90 	vmov	r3, s17
 101e692:	2b00      	cmp	r3, #0
 101e694:	f04f 0301 	mov.w	r3, #1
 101e698:	9304      	str	r3, [sp, #16]
 101e69a:	f2c0 8311 	blt.w	101ecc0 <_svfprintf_r+0x1a48>
 101e69e:	eeb0 cb48 	vmov.f64	d12, d8
 101e6a2:	461d      	mov	r5, r3
 101e6a4:	2300      	movs	r3, #0
 101e6a6:	930c      	str	r3, [sp, #48]	; 0x30
 101e6a8:	ab26      	add	r3, sp, #152	; 0x98
 101e6aa:	aa21      	add	r2, sp, #132	; 0x84
 101e6ac:	9301      	str	r3, [sp, #4]
 101e6ae:	2102      	movs	r1, #2
 101e6b0:	9200      	str	r2, [sp, #0]
 101e6b2:	ab1f      	add	r3, sp, #124	; 0x7c
 101e6b4:	462a      	mov	r2, r5
 101e6b6:	eeb0 0b4c 	vmov.f64	d0, d12
 101e6ba:	4650      	mov	r0, sl
 101e6bc:	f002 fce8 	bl	1021090 <_dtoa_r>
 101e6c0:	2c47      	cmp	r4, #71	; 0x47
 101e6c2:	900b      	str	r0, [sp, #44]	; 0x2c
 101e6c4:	f040 8177 	bne.w	101e9b6 <_svfprintf_r+0x173e>
 101e6c8:	07f3      	lsls	r3, r6, #31
 101e6ca:	f100 8174 	bmi.w	101e9b6 <_svfprintf_r+0x173e>
 101e6ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 101e6d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101e6d2:	2c47      	cmp	r4, #71	; 0x47
 101e6d4:	eba3 0302 	sub.w	r3, r3, r2
 101e6d8:	9312      	str	r3, [sp, #72]	; 0x48
 101e6da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101e6dc:	9310      	str	r3, [sp, #64]	; 0x40
 101e6de:	f040 81b1 	bne.w	101ea44 <_svfprintf_r+0x17cc>
 101e6e2:	9a04      	ldr	r2, [sp, #16]
 101e6e4:	f113 0f03 	cmn.w	r3, #3
 101e6e8:	bfa8      	it	ge
 101e6ea:	429a      	cmpge	r2, r3
 101e6ec:	f280 8185 	bge.w	101e9fa <_svfprintf_r+0x1782>
 101e6f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101e6f2:	2200      	movs	r2, #0
 101e6f4:	920a      	str	r2, [sp, #40]	; 0x28
 101e6f6:	3b02      	subs	r3, #2
 101e6f8:	930e      	str	r3, [sp, #56]	; 0x38
 101e6fa:	f023 0420 	bic.w	r4, r3, #32
 101e6fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101e700:	2c41      	cmp	r4, #65	; 0x41
 101e702:	f103 32ff 	add.w	r2, r3, #4294967295
 101e706:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 101e70a:	921f      	str	r2, [sp, #124]	; 0x7c
 101e70c:	bf04      	itt	eq
 101e70e:	330f      	addeq	r3, #15
 101e710:	b2db      	uxtbeq	r3, r3
 101e712:	2a00      	cmp	r2, #0
 101e714:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 101e718:	bfb7      	itett	lt
 101e71a:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 101e71c:	232b      	movge	r3, #43	; 0x2b
 101e71e:	f1c3 0201 	rsblt	r2, r3, #1
 101e722:	232d      	movlt	r3, #45	; 0x2d
 101e724:	2a09      	cmp	r2, #9
 101e726:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 101e72a:	f340 82d5 	ble.w	101ecd8 <_svfprintf_r+0x1a60>
 101e72e:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 101e732:	f246 6567 	movw	r5, #26215	; 0x6667
 101e736:	f04f 0e0a 	mov.w	lr, #10
 101e73a:	f2c6 6566 	movt	r5, #26214	; 0x6666
 101e73e:	4664      	mov	r4, ip
 101e740:	e000      	b.n	101e744 <_svfprintf_r+0x14cc>
 101e742:	460c      	mov	r4, r1
 101e744:	fb85 3002 	smull	r3, r0, r5, r2
 101e748:	17d3      	asrs	r3, r2, #31
 101e74a:	2a63      	cmp	r2, #99	; 0x63
 101e74c:	f104 31ff 	add.w	r1, r4, #4294967295
 101e750:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 101e754:	fb0e 2013 	mls	r0, lr, r3, r2
 101e758:	461a      	mov	r2, r3
 101e75a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 101e75e:	f804 0c01 	strb.w	r0, [r4, #-1]
 101e762:	dcee      	bgt.n	101e742 <_svfprintf_r+0x14ca>
 101e764:	1ea2      	subs	r2, r4, #2
 101e766:	3330      	adds	r3, #48	; 0x30
 101e768:	4594      	cmp	ip, r2
 101e76a:	b2db      	uxtb	r3, r3
 101e76c:	f801 3c01 	strb.w	r3, [r1, #-1]
 101e770:	f240 831f 	bls.w	101edb2 <_svfprintf_r+0x1b3a>
 101e774:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 101e778:	e001      	b.n	101e77e <_svfprintf_r+0x1506>
 101e77a:	f811 3b01 	ldrb.w	r3, [r1], #1
 101e77e:	458c      	cmp	ip, r1
 101e780:	f802 3b01 	strb.w	r3, [r2], #1
 101e784:	d1f9      	bne.n	101e77a <_svfprintf_r+0x1502>
 101e786:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 101e78a:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 101e78e:	1b1b      	subs	r3, r3, r4
 101e790:	aa22      	add	r2, sp, #136	; 0x88
 101e792:	440b      	add	r3, r1
 101e794:	1a9b      	subs	r3, r3, r2
 101e796:	9318      	str	r3, [sp, #96]	; 0x60
 101e798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101e79a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 101e79c:	2b01      	cmp	r3, #1
 101e79e:	441a      	add	r2, r3
 101e7a0:	9207      	str	r2, [sp, #28]
 101e7a2:	f340 82be 	ble.w	101ed22 <_svfprintf_r+0x1aaa>
 101e7a6:	9b07      	ldr	r3, [sp, #28]
 101e7a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 101e7aa:	4413      	add	r3, r2
 101e7ac:	9307      	str	r3, [sp, #28]
 101e7ae:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 101e7b2:	2200      	movs	r2, #0
 101e7b4:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 101e7b8:	9b07      	ldr	r3, [sp, #28]
 101e7ba:	9213      	str	r2, [sp, #76]	; 0x4c
 101e7bc:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101e7c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101e7c4:	9303      	str	r3, [sp, #12]
 101e7c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 101e7c8:	2b00      	cmp	r3, #0
 101e7ca:	f040 8134 	bne.w	101ea36 <_svfprintf_r+0x17be>
 101e7ce:	9304      	str	r3, [sp, #16]
 101e7d0:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101e7d4:	f7fe beb5 	b.w	101d542 <_svfprintf_r+0x2ca>
 101e7d8:	4634      	mov	r4, r6
 101e7da:	9e04      	ldr	r6, [sp, #16]
 101e7dc:	460b      	mov	r3, r1
 101e7de:	3301      	adds	r3, #1
 101e7e0:	494c      	ldr	r1, [pc, #304]	; (101e914 <_svfprintf_r+0x169c>)
 101e7e2:	2b07      	cmp	r3, #7
 101e7e4:	4422      	add	r2, r4
 101e7e6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101e7ea:	e9c9 1400 	strd	r1, r4, [r9]
 101e7ee:	bfd8      	it	le
 101e7f0:	f109 0908 	addle.w	r9, r9, #8
 101e7f4:	f77f ab8d 	ble.w	101df12 <_svfprintf_r+0xc9a>
 101e7f8:	aa28      	add	r2, sp, #160	; 0xa0
 101e7fa:	9908      	ldr	r1, [sp, #32]
 101e7fc:	4650      	mov	r0, sl
 101e7fe:	f005 f82b 	bl	1023858 <__ssprint_r>
 101e802:	2800      	cmp	r0, #0
 101e804:	f47f aa9b 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e808:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e80a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e80e:	f7ff bb80 	b.w	101df12 <_svfprintf_r+0xc9a>
 101e812:	2300      	movs	r3, #0
 101e814:	aa26      	add	r2, sp, #152	; 0x98
 101e816:	4619      	mov	r1, r3
 101e818:	9200      	str	r2, [sp, #0]
 101e81a:	4650      	mov	r0, sl
 101e81c:	aa21      	add	r2, sp, #132	; 0x84
 101e81e:	f002 f983 	bl	1020b28 <_wcsrtombs_r>
 101e822:	1c43      	adds	r3, r0, #1
 101e824:	9007      	str	r0, [sp, #28]
 101e826:	f000 81ef 	beq.w	101ec08 <_svfprintf_r+0x1990>
 101e82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101e82c:	9321      	str	r3, [sp, #132]	; 0x84
 101e82e:	9b07      	ldr	r3, [sp, #28]
 101e830:	2b00      	cmp	r3, #0
 101e832:	d03b      	beq.n	101e8ac <_svfprintf_r+0x1634>
 101e834:	2b63      	cmp	r3, #99	; 0x63
 101e836:	f340 8087 	ble.w	101e948 <_svfprintf_r+0x16d0>
 101e83a:	1c59      	adds	r1, r3, #1
 101e83c:	4650      	mov	r0, sl
 101e83e:	f7fc fbcb 	bl	101afd8 <_malloc_r>
 101e842:	900b      	str	r0, [sp, #44]	; 0x2c
 101e844:	2800      	cmp	r0, #0
 101e846:	f000 81df 	beq.w	101ec08 <_svfprintf_r+0x1990>
 101e84a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101e84c:	930a      	str	r3, [sp, #40]	; 0x28
 101e84e:	2208      	movs	r2, #8
 101e850:	2100      	movs	r1, #0
 101e852:	a826      	add	r0, sp, #152	; 0x98
 101e854:	f7fd fc2c 	bl	101c0b0 <memset>
 101e858:	9c07      	ldr	r4, [sp, #28]
 101e85a:	ab26      	add	r3, sp, #152	; 0x98
 101e85c:	aa21      	add	r2, sp, #132	; 0x84
 101e85e:	9300      	str	r3, [sp, #0]
 101e860:	4650      	mov	r0, sl
 101e862:	4623      	mov	r3, r4
 101e864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101e866:	f002 f95f 	bl	1020b28 <_wcsrtombs_r>
 101e86a:	4284      	cmp	r4, r0
 101e86c:	f040 8287 	bne.w	101ed7e <_svfprintf_r+0x1b06>
 101e870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101e872:	2300      	movs	r3, #0
 101e874:	9509      	str	r5, [sp, #36]	; 0x24
 101e876:	9304      	str	r3, [sp, #16]
 101e878:	4614      	mov	r4, r2
 101e87a:	9a07      	ldr	r2, [sp, #28]
 101e87c:	9313      	str	r3, [sp, #76]	; 0x4c
 101e87e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101e882:	54a3      	strb	r3, [r4, r2]
 101e884:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 101e888:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101e88c:	9303      	str	r3, [sp, #12]
 101e88e:	f7fe be58 	b.w	101d542 <_svfprintf_r+0x2ca>
 101e892:	aa28      	add	r2, sp, #160	; 0xa0
 101e894:	9908      	ldr	r1, [sp, #32]
 101e896:	4650      	mov	r0, sl
 101e898:	f004 ffde 	bl	1023858 <__ssprint_r>
 101e89c:	2800      	cmp	r0, #0
 101e89e:	f47f aa4e 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e8a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 101e8a4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e8a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e8aa:	e5c6      	b.n	101e43a <_svfprintf_r+0x11c2>
 101e8ac:	9b07      	ldr	r3, [sp, #28]
 101e8ae:	9509      	str	r5, [sp, #36]	; 0x24
 101e8b0:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101e8b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 101e8b8:	9313      	str	r3, [sp, #76]	; 0x4c
 101e8ba:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101e8be:	930a      	str	r3, [sp, #40]	; 0x28
 101e8c0:	f7fe be3f 	b.w	101d542 <_svfprintf_r+0x2ca>
 101e8c4:	aa28      	add	r2, sp, #160	; 0xa0
 101e8c6:	9908      	ldr	r1, [sp, #32]
 101e8c8:	4650      	mov	r0, sl
 101e8ca:	f004 ffc5 	bl	1023858 <__ssprint_r>
 101e8ce:	2800      	cmp	r0, #0
 101e8d0:	f47f aa35 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101e8d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101e8d6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101e8da:	f7ff bb12 	b.w	101df02 <_svfprintf_r+0xc8a>
 101e8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101e8e0:	4619      	mov	r1, r3
 101e8e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101e8e4:	4419      	add	r1, r3
 101e8e6:	1b1b      	subs	r3, r3, r4
 101e8e8:	1b4c      	subs	r4, r1, r5
 101e8ea:	429c      	cmp	r4, r3
 101e8ec:	bfa8      	it	ge
 101e8ee:	461c      	movge	r4, r3
 101e8f0:	f7ff bb48 	b.w	101df84 <_svfprintf_r+0xd0c>
 101e8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101e8f6:	9309      	str	r3, [sp, #36]	; 0x24
 101e8f8:	9b05      	ldr	r3, [sp, #20]
 101e8fa:	6812      	ldr	r2, [r2, #0]
 101e8fc:	8013      	strh	r3, [r2, #0]
 101e8fe:	f7fe bcfb 	b.w	101d2f8 <_svfprintf_r+0x80>
 101e902:	681c      	ldr	r4, [r3, #0]
 101e904:	9209      	str	r2, [sp, #36]	; 0x24
 101e906:	9603      	str	r6, [sp, #12]
 101e908:	17e5      	asrs	r5, r4, #31
 101e90a:	4622      	mov	r2, r4
 101e90c:	462b      	mov	r3, r5
 101e90e:	f7fe bf76 	b.w	101d7fe <_svfprintf_r+0x586>
 101e912:	bf00      	nop
 101e914:	010663f8 	.word	0x010663f8
 101e918:	9c10      	ldr	r4, [sp, #64]	; 0x40
 101e91a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101e91c:	9404      	str	r4, [sp, #16]
 101e91e:	f7fe faaf 	bl	101ce80 <strlen>
 101e922:	9509      	str	r5, [sp, #36]	; 0x24
 101e924:	9413      	str	r4, [sp, #76]	; 0x4c
 101e926:	9411      	str	r4, [sp, #68]	; 0x44
 101e928:	940a      	str	r4, [sp, #40]	; 0x28
 101e92a:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101e92e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 101e932:	9007      	str	r0, [sp, #28]
 101e934:	9303      	str	r3, [sp, #12]
 101e936:	f7fe be04 	b.w	101d542 <_svfprintf_r+0x2ca>
 101e93a:	4650      	mov	r0, sl
 101e93c:	aa28      	add	r2, sp, #160	; 0xa0
 101e93e:	9908      	ldr	r1, [sp, #32]
 101e940:	f004 ff8a 	bl	1023858 <__ssprint_r>
 101e944:	f7fe bd8c 	b.w	101d460 <_svfprintf_r+0x1e8>
 101e948:	2300      	movs	r3, #0
 101e94a:	930a      	str	r3, [sp, #40]	; 0x28
 101e94c:	ab3b      	add	r3, sp, #236	; 0xec
 101e94e:	930b      	str	r3, [sp, #44]	; 0x2c
 101e950:	e77d      	b.n	101e84e <_svfprintf_r+0x15d6>
 101e952:	2306      	movs	r3, #6
 101e954:	9304      	str	r3, [sp, #16]
 101e956:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 101e95a:	930d      	str	r3, [sp, #52]	; 0x34
 101e95c:	ee18 3a90 	vmov	r3, s17
 101e960:	2b00      	cmp	r3, #0
 101e962:	f2c0 81ad 	blt.w	101ecc0 <_svfprintf_r+0x1a48>
 101e966:	eeb0 cb48 	vmov.f64	d12, d8
 101e96a:	2300      	movs	r3, #0
 101e96c:	930c      	str	r3, [sp, #48]	; 0x30
 101e96e:	2c46      	cmp	r4, #70	; 0x46
 101e970:	f040 80f9 	bne.w	101eb66 <_svfprintf_r+0x18ee>
 101e974:	ab26      	add	r3, sp, #152	; 0x98
 101e976:	aa21      	add	r2, sp, #132	; 0x84
 101e978:	9301      	str	r3, [sp, #4]
 101e97a:	2103      	movs	r1, #3
 101e97c:	ab1f      	add	r3, sp, #124	; 0x7c
 101e97e:	9200      	str	r2, [sp, #0]
 101e980:	eeb0 0b4c 	vmov.f64	d0, d12
 101e984:	9a04      	ldr	r2, [sp, #16]
 101e986:	4650      	mov	r0, sl
 101e988:	f002 fb82 	bl	1021090 <_dtoa_r>
 101e98c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 101e98e:	eeb5 cb40 	vcmp.f64	d12, #0.0
 101e992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e996:	7802      	ldrb	r2, [r0, #0]
 101e998:	4603      	mov	r3, r0
 101e99a:	bf14      	ite	ne
 101e99c:	2301      	movne	r3, #1
 101e99e:	2300      	moveq	r3, #0
 101e9a0:	2a30      	cmp	r2, #48	; 0x30
 101e9a2:	bf14      	ite	ne
 101e9a4:	2300      	movne	r3, #0
 101e9a6:	f003 0301 	andeq.w	r3, r3, #1
 101e9aa:	900b      	str	r0, [sp, #44]	; 0x2c
 101e9ac:	2b00      	cmp	r3, #0
 101e9ae:	f040 81db 	bne.w	101ed68 <_svfprintf_r+0x1af0>
 101e9b2:	9b04      	ldr	r3, [sp, #16]
 101e9b4:	441d      	add	r5, r3
 101e9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101e9b8:	eeb5 cb40 	vcmp.f64	d12, #0.0
 101e9bc:	441d      	add	r5, r3
 101e9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101e9c2:	bf08      	it	eq
 101e9c4:	462b      	moveq	r3, r5
 101e9c6:	f43f ae83 	beq.w	101e6d0 <_svfprintf_r+0x1458>
 101e9ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 101e9cc:	42ab      	cmp	r3, r5
 101e9ce:	f4bf ae7f 	bcs.w	101e6d0 <_svfprintf_r+0x1458>
 101e9d2:	2130      	movs	r1, #48	; 0x30
 101e9d4:	1c5a      	adds	r2, r3, #1
 101e9d6:	9226      	str	r2, [sp, #152]	; 0x98
 101e9d8:	7019      	strb	r1, [r3, #0]
 101e9da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 101e9dc:	429d      	cmp	r5, r3
 101e9de:	d8f9      	bhi.n	101e9d4 <_svfprintf_r+0x175c>
 101e9e0:	e676      	b.n	101e6d0 <_svfprintf_r+0x1458>
 101e9e2:	1c59      	adds	r1, r3, #1
 101e9e4:	4650      	mov	r0, sl
 101e9e6:	f7fc faf7 	bl	101afd8 <_malloc_r>
 101e9ea:	900b      	str	r0, [sp, #44]	; 0x2c
 101e9ec:	2800      	cmp	r0, #0
 101e9ee:	f000 810b 	beq.w	101ec08 <_svfprintf_r+0x1990>
 101e9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101e9f4:	930a      	str	r3, [sp, #40]	; 0x28
 101e9f6:	f7ff bb6a 	b.w	101e0ce <_svfprintf_r+0xe56>
 101e9fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101e9fc:	4619      	mov	r1, r3
 101e9fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101ea00:	4299      	cmp	r1, r3
 101ea02:	f300 809c 	bgt.w	101eb3e <_svfprintf_r+0x18c6>
 101ea06:	07f5      	lsls	r5, r6, #31
 101ea08:	f140 814c 	bpl.w	101eca4 <_svfprintf_r+0x1a2c>
 101ea0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 101ea0e:	4413      	add	r3, r2
 101ea10:	9307      	str	r3, [sp, #28]
 101ea12:	0574      	lsls	r4, r6, #21
 101ea14:	d503      	bpl.n	101ea1e <_svfprintf_r+0x17a6>
 101ea16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101ea18:	2b00      	cmp	r3, #0
 101ea1a:	f300 8118 	bgt.w	101ec4e <_svfprintf_r+0x19d6>
 101ea1e:	9b07      	ldr	r3, [sp, #28]
 101ea20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101ea24:	9303      	str	r3, [sp, #12]
 101ea26:	2367      	movs	r3, #103	; 0x67
 101ea28:	930e      	str	r3, [sp, #56]	; 0x38
 101ea2a:	2300      	movs	r3, #0
 101ea2c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 101ea2e:	930a      	str	r3, [sp, #40]	; 0x28
 101ea30:	9313      	str	r3, [sp, #76]	; 0x4c
 101ea32:	9311      	str	r3, [sp, #68]	; 0x44
 101ea34:	e6c7      	b.n	101e7c6 <_svfprintf_r+0x154e>
 101ea36:	212d      	movs	r1, #45	; 0x2d
 101ea38:	2300      	movs	r3, #0
 101ea3a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 101ea3e:	9304      	str	r3, [sp, #16]
 101ea40:	f7fe bd80 	b.w	101d544 <_svfprintf_r+0x2cc>
 101ea44:	2c46      	cmp	r4, #70	; 0x46
 101ea46:	f040 81b1 	bne.w	101edac <_svfprintf_r+0x1b34>
 101ea4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 101ea4c:	f006 0301 	and.w	r3, r6, #1
 101ea50:	9a04      	ldr	r2, [sp, #16]
 101ea52:	2900      	cmp	r1, #0
 101ea54:	ea43 0302 	orr.w	r3, r3, r2
 101ea58:	f340 8167 	ble.w	101ed2a <_svfprintf_r+0x1ab2>
 101ea5c:	2b00      	cmp	r3, #0
 101ea5e:	f040 8134 	bne.w	101ecca <_svfprintf_r+0x1a52>
 101ea62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101ea64:	9307      	str	r3, [sp, #28]
 101ea66:	2366      	movs	r3, #102	; 0x66
 101ea68:	930e      	str	r3, [sp, #56]	; 0x38
 101ea6a:	0572      	lsls	r2, r6, #21
 101ea6c:	f100 80f1 	bmi.w	101ec52 <_svfprintf_r+0x19da>
 101ea70:	9b07      	ldr	r3, [sp, #28]
 101ea72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101ea76:	9303      	str	r3, [sp, #12]
 101ea78:	e7d7      	b.n	101ea2a <_svfprintf_r+0x17b2>
 101ea7a:	aa28      	add	r2, sp, #160	; 0xa0
 101ea7c:	4641      	mov	r1, r8
 101ea7e:	4650      	mov	r0, sl
 101ea80:	f004 feea 	bl	1023858 <__ssprint_r>
 101ea84:	2800      	cmp	r0, #0
 101ea86:	f47f a95a 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101ea8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101ea8c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ea90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101ea92:	781b      	ldrb	r3, [r3, #0]
 101ea94:	e463      	b.n	101e35e <_svfprintf_r+0x10e6>
 101ea96:	aa28      	add	r2, sp, #160	; 0xa0
 101ea98:	9908      	ldr	r1, [sp, #32]
 101ea9a:	4650      	mov	r0, sl
 101ea9c:	f004 fedc 	bl	1023858 <__ssprint_r>
 101eaa0:	2800      	cmp	r0, #0
 101eaa2:	f47f a94c 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101eaa6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 101eaa8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101eaac:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101eab0:	e4d8      	b.n	101e464 <_svfprintf_r+0x11ec>
 101eab2:	07f0      	lsls	r0, r6, #31
 101eab4:	f57e ad9d 	bpl.w	101d5f2 <_svfprintf_r+0x37a>
 101eab8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101eaba:	9916      	ldr	r1, [sp, #88]	; 0x58
 101eabc:	3301      	adds	r3, #1
 101eabe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 101eac0:	2b07      	cmp	r3, #7
 101eac2:	440a      	add	r2, r1
 101eac4:	f8c9 1004 	str.w	r1, [r9, #4]
 101eac8:	f8c9 0000 	str.w	r0, [r9]
 101eacc:	922a      	str	r2, [sp, #168]	; 0xa8
 101eace:	9329      	str	r3, [sp, #164]	; 0xa4
 101ead0:	dce1      	bgt.n	101ea96 <_svfprintf_r+0x181e>
 101ead2:	f109 0908 	add.w	r9, r9, #8
 101ead6:	e4c8      	b.n	101e46a <_svfprintf_r+0x11f2>
 101ead8:	aa28      	add	r2, sp, #160	; 0xa0
 101eada:	9908      	ldr	r1, [sp, #32]
 101eadc:	4650      	mov	r0, sl
 101eade:	f004 febb 	bl	1023858 <__ssprint_r>
 101eae2:	2800      	cmp	r0, #0
 101eae4:	f47f a92b 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101eae8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 101eaea:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101eaee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101eaf0:	f7ff ba2e 	b.w	101df50 <_svfprintf_r+0xcd8>
 101eaf4:	aa28      	add	r2, sp, #160	; 0xa0
 101eaf6:	9908      	ldr	r1, [sp, #32]
 101eaf8:	4650      	mov	r0, sl
 101eafa:	f004 fead 	bl	1023858 <__ssprint_r>
 101eafe:	2800      	cmp	r0, #0
 101eb00:	f47f a91d 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101eb04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101eb06:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101eb0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 101eb0c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101eb0e:	1acb      	subs	r3, r1, r3
 101eb10:	f7ff ba38 	b.w	101df84 <_svfprintf_r+0xd0c>
 101eb14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 101eb16:	991a      	ldr	r1, [sp, #104]	; 0x68
 101eb18:	ebaa 0a02 	sub.w	sl, sl, r2
 101eb1c:	4650      	mov	r0, sl
 101eb1e:	f7fe fa9d 	bl	101d05c <strncpy>
 101eb22:	f898 3001 	ldrb.w	r3, [r8, #1]
 101eb26:	b10b      	cbz	r3, 101eb2c <_svfprintf_r+0x18b4>
 101eb28:	f108 0801 	add.w	r8, r8, #1
 101eb2c:	4620      	mov	r0, r4
 101eb2e:	4629      	mov	r1, r5
 101eb30:	220a      	movs	r2, #10
 101eb32:	2300      	movs	r3, #0
 101eb34:	f7fb fb48 	bl	101a1c8 <__aeabi_uldivmod>
 101eb38:	f04f 0900 	mov.w	r9, #0
 101eb3c:	e53b      	b.n	101e5b6 <_svfprintf_r+0x133e>
 101eb3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101eb40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 101eb42:	189a      	adds	r2, r3, r2
 101eb44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101eb46:	9207      	str	r2, [sp, #28]
 101eb48:	2b00      	cmp	r3, #0
 101eb4a:	bfc4      	itt	gt
 101eb4c:	2367      	movgt	r3, #103	; 0x67
 101eb4e:	930e      	strgt	r3, [sp, #56]	; 0x38
 101eb50:	dc8b      	bgt.n	101ea6a <_svfprintf_r+0x17f2>
 101eb52:	f1c3 0301 	rsb	r3, r3, #1
 101eb56:	2167      	movs	r1, #103	; 0x67
 101eb58:	441a      	add	r2, r3
 101eb5a:	910e      	str	r1, [sp, #56]	; 0x38
 101eb5c:	9207      	str	r2, [sp, #28]
 101eb5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 101eb62:	9303      	str	r3, [sp, #12]
 101eb64:	e761      	b.n	101ea2a <_svfprintf_r+0x17b2>
 101eb66:	2c45      	cmp	r4, #69	; 0x45
 101eb68:	f040 8110 	bne.w	101ed8c <_svfprintf_r+0x1b14>
 101eb6c:	9b04      	ldr	r3, [sp, #16]
 101eb6e:	aa26      	add	r2, sp, #152	; 0x98
 101eb70:	2102      	movs	r1, #2
 101eb72:	9201      	str	r2, [sp, #4]
 101eb74:	1c5d      	adds	r5, r3, #1
 101eb76:	eeb0 0b4c 	vmov.f64	d0, d12
 101eb7a:	ab21      	add	r3, sp, #132	; 0x84
 101eb7c:	4650      	mov	r0, sl
 101eb7e:	9300      	str	r3, [sp, #0]
 101eb80:	462a      	mov	r2, r5
 101eb82:	ab1f      	add	r3, sp, #124	; 0x7c
 101eb84:	f002 fa84 	bl	1021090 <_dtoa_r>
 101eb88:	900b      	str	r0, [sp, #44]	; 0x2c
 101eb8a:	e714      	b.n	101e9b6 <_svfprintf_r+0x173e>
 101eb8c:	2300      	movs	r3, #0
 101eb8e:	eeb0 0b48 	vmov.f64	d0, d8
 101eb92:	930c      	str	r3, [sp, #48]	; 0x30
 101eb94:	f7ff baa4 	b.w	101e0e0 <_svfprintf_r+0xe68>
 101eb98:	424c      	negs	r4, r1
 101eb9a:	3110      	adds	r1, #16
 101eb9c:	da1d      	bge.n	101ebda <_svfprintf_r+0x1962>
 101eb9e:	2510      	movs	r5, #16
 101eba0:	e002      	b.n	101eba8 <_svfprintf_r+0x1930>
 101eba2:	3c10      	subs	r4, #16
 101eba4:	2c10      	cmp	r4, #16
 101eba6:	dd18      	ble.n	101ebda <_svfprintf_r+0x1962>
 101eba8:	3301      	adds	r3, #1
 101ebaa:	4985      	ldr	r1, [pc, #532]	; (101edc0 <_svfprintf_r+0x1b48>)
 101ebac:	2b07      	cmp	r3, #7
 101ebae:	f102 0210 	add.w	r2, r2, #16
 101ebb2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101ebb6:	e9c9 1500 	strd	r1, r5, [r9]
 101ebba:	f109 0908 	add.w	r9, r9, #8
 101ebbe:	ddf0      	ble.n	101eba2 <_svfprintf_r+0x192a>
 101ebc0:	aa28      	add	r2, sp, #160	; 0xa0
 101ebc2:	9908      	ldr	r1, [sp, #32]
 101ebc4:	4650      	mov	r0, sl
 101ebc6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ebca:	f004 fe45 	bl	1023858 <__ssprint_r>
 101ebce:	2800      	cmp	r0, #0
 101ebd0:	f47f a8b5 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101ebd4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101ebd8:	e7e3      	b.n	101eba2 <_svfprintf_r+0x192a>
 101ebda:	3301      	adds	r3, #1
 101ebdc:	4978      	ldr	r1, [pc, #480]	; (101edc0 <_svfprintf_r+0x1b48>)
 101ebde:	2b07      	cmp	r3, #7
 101ebe0:	4422      	add	r2, r4
 101ebe2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101ebe6:	e9c9 1400 	strd	r1, r4, [r9]
 101ebea:	f77f af72 	ble.w	101ead2 <_svfprintf_r+0x185a>
 101ebee:	aa28      	add	r2, sp, #160	; 0xa0
 101ebf0:	9908      	ldr	r1, [sp, #32]
 101ebf2:	4650      	mov	r0, sl
 101ebf4:	f004 fe30 	bl	1023858 <__ssprint_r>
 101ebf8:	2800      	cmp	r0, #0
 101ebfa:	f47f a8a0 	bne.w	101dd3e <_svfprintf_r+0xac6>
 101ebfe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101ec00:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ec04:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101ec06:	e430      	b.n	101e46a <_svfprintf_r+0x11f2>
 101ec08:	9a08      	ldr	r2, [sp, #32]
 101ec0a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 101ec0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 101ec12:	8193      	strh	r3, [r2, #12]
 101ec14:	f7fe bc27 	b.w	101d466 <_svfprintf_r+0x1ee>
 101ec18:	9526      	str	r5, [sp, #152]	; 0x98
 101ec1a:	4619      	mov	r1, r3
 101ec1c:	7bc5      	ldrb	r5, [r0, #15]
 101ec1e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 101ec22:	4295      	cmp	r5, r2
 101ec24:	d10a      	bne.n	101ec3c <_svfprintf_r+0x19c4>
 101ec26:	f04f 0c30 	mov.w	ip, #48	; 0x30
 101ec2a:	f801 cc01 	strb.w	ip, [r1, #-1]
 101ec2e:	9926      	ldr	r1, [sp, #152]	; 0x98
 101ec30:	1e4a      	subs	r2, r1, #1
 101ec32:	9226      	str	r2, [sp, #152]	; 0x98
 101ec34:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 101ec38:	4295      	cmp	r5, r2
 101ec3a:	d0f6      	beq.n	101ec2a <_svfprintf_r+0x19b2>
 101ec3c:	2a39      	cmp	r2, #57	; 0x39
 101ec3e:	bf16      	itet	ne
 101ec40:	3201      	addne	r2, #1
 101ec42:	7a82      	ldrbeq	r2, [r0, #10]
 101ec44:	b2d2      	uxtbne	r2, r2
 101ec46:	f801 2c01 	strb.w	r2, [r1, #-1]
 101ec4a:	f7ff ba9a 	b.w	101e182 <_svfprintf_r+0xf0a>
 101ec4e:	2367      	movs	r3, #103	; 0x67
 101ec50:	930e      	str	r3, [sp, #56]	; 0x38
 101ec52:	9814      	ldr	r0, [sp, #80]	; 0x50
 101ec54:	2200      	movs	r2, #0
 101ec56:	9213      	str	r2, [sp, #76]	; 0x4c
 101ec58:	9211      	str	r2, [sp, #68]	; 0x44
 101ec5a:	7803      	ldrb	r3, [r0, #0]
 101ec5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 101ec5e:	2bff      	cmp	r3, #255	; 0xff
 101ec60:	d00b      	beq.n	101ec7a <_svfprintf_r+0x1a02>
 101ec62:	4293      	cmp	r3, r2
 101ec64:	da09      	bge.n	101ec7a <_svfprintf_r+0x1a02>
 101ec66:	7841      	ldrb	r1, [r0, #1]
 101ec68:	1ad2      	subs	r2, r2, r3
 101ec6a:	b1b9      	cbz	r1, 101ec9c <_svfprintf_r+0x1a24>
 101ec6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 101ec6e:	3001      	adds	r0, #1
 101ec70:	3301      	adds	r3, #1
 101ec72:	9311      	str	r3, [sp, #68]	; 0x44
 101ec74:	460b      	mov	r3, r1
 101ec76:	2bff      	cmp	r3, #255	; 0xff
 101ec78:	d1f3      	bne.n	101ec62 <_svfprintf_r+0x19ea>
 101ec7a:	9210      	str	r2, [sp, #64]	; 0x40
 101ec7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 101ec7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 101ec80:	9907      	ldr	r1, [sp, #28]
 101ec82:	4413      	add	r3, r2
 101ec84:	2200      	movs	r2, #0
 101ec86:	920a      	str	r2, [sp, #40]	; 0x28
 101ec88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 101ec8a:	9014      	str	r0, [sp, #80]	; 0x50
 101ec8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 101ec8e:	fb02 1303 	mla	r3, r2, r3, r1
 101ec92:	9307      	str	r3, [sp, #28]
 101ec94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101ec98:	9303      	str	r3, [sp, #12]
 101ec9a:	e594      	b.n	101e7c6 <_svfprintf_r+0x154e>
 101ec9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 101ec9e:	3101      	adds	r1, #1
 101eca0:	9113      	str	r1, [sp, #76]	; 0x4c
 101eca2:	e7dc      	b.n	101ec5e <_svfprintf_r+0x19e6>
 101eca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101eca6:	9307      	str	r3, [sp, #28]
 101eca8:	e6b3      	b.n	101ea12 <_svfprintf_r+0x179a>
 101ecaa:	9b04      	ldr	r3, [sp, #16]
 101ecac:	9509      	str	r5, [sp, #36]	; 0x24
 101ecae:	9004      	str	r0, [sp, #16]
 101ecb0:	9303      	str	r3, [sp, #12]
 101ecb2:	9307      	str	r3, [sp, #28]
 101ecb4:	9013      	str	r0, [sp, #76]	; 0x4c
 101ecb6:	9011      	str	r0, [sp, #68]	; 0x44
 101ecb8:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101ecbc:	f7fe bc41 	b.w	101d542 <_svfprintf_r+0x2ca>
 101ecc0:	232d      	movs	r3, #45	; 0x2d
 101ecc2:	eeb1 cb48 	vneg.f64	d12, d8
 101ecc6:	930c      	str	r3, [sp, #48]	; 0x30
 101ecc8:	e651      	b.n	101e96e <_svfprintf_r+0x16f6>
 101ecca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 101eccc:	18cb      	adds	r3, r1, r3
 101ecce:	2166      	movs	r1, #102	; 0x66
 101ecd0:	441a      	add	r2, r3
 101ecd2:	910e      	str	r1, [sp, #56]	; 0x38
 101ecd4:	9207      	str	r2, [sp, #28]
 101ecd6:	e6c8      	b.n	101ea6a <_svfprintf_r+0x17f2>
 101ecd8:	2c41      	cmp	r4, #65	; 0x41
 101ecda:	a922      	add	r1, sp, #136	; 0x88
 101ecdc:	bf08      	it	eq
 101ecde:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 101ece2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 101ece6:	bf1e      	ittt	ne
 101ece8:	2330      	movne	r3, #48	; 0x30
 101ecea:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 101ecee:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 101ecf2:	f803 2b01 	strb.w	r2, [r3], #1
 101ecf6:	1a5b      	subs	r3, r3, r1
 101ecf8:	9318      	str	r3, [sp, #96]	; 0x60
 101ecfa:	e54d      	b.n	101e798 <_svfprintf_r+0x1520>
 101ecfc:	ee18 3a90 	vmov	r3, s17
 101ed00:	f24a 4458 	movw	r4, #42072	; 0xa458
 101ed04:	f2c0 1406 	movt	r4, #262	; 0x106
 101ed08:	2b00      	cmp	r3, #0
 101ed0a:	f24a 4354 	movw	r3, #42068	; 0xa454
 101ed0e:	f2c0 1306 	movt	r3, #262	; 0x106
 101ed12:	bfb6      	itet	lt
 101ed14:	212d      	movlt	r1, #45	; 0x2d
 101ed16:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 101ed1a:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 101ed1e:	f7fe bec2 	b.w	101daa6 <_svfprintf_r+0x82e>
 101ed22:	07f3      	lsls	r3, r6, #31
 101ed24:	f57f ad43 	bpl.w	101e7ae <_svfprintf_r+0x1536>
 101ed28:	e53d      	b.n	101e7a6 <_svfprintf_r+0x152e>
 101ed2a:	b92b      	cbnz	r3, 101ed38 <_svfprintf_r+0x1ac0>
 101ed2c:	2301      	movs	r3, #1
 101ed2e:	2266      	movs	r2, #102	; 0x66
 101ed30:	9303      	str	r3, [sp, #12]
 101ed32:	920e      	str	r2, [sp, #56]	; 0x38
 101ed34:	9307      	str	r3, [sp, #28]
 101ed36:	e678      	b.n	101ea2a <_svfprintf_r+0x17b2>
 101ed38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 101ed3a:	2266      	movs	r2, #102	; 0x66
 101ed3c:	920e      	str	r2, [sp, #56]	; 0x38
 101ed3e:	9a04      	ldr	r2, [sp, #16]
 101ed40:	3301      	adds	r3, #1
 101ed42:	441a      	add	r2, r3
 101ed44:	9207      	str	r2, [sp, #28]
 101ed46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 101ed4a:	9303      	str	r3, [sp, #12]
 101ed4c:	e66d      	b.n	101ea2a <_svfprintf_r+0x17b2>
 101ed4e:	4649      	mov	r1, r9
 101ed50:	e46e      	b.n	101e630 <_svfprintf_r+0x13b8>
 101ed52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101ed54:	787b      	ldrb	r3, [r7, #1]
 101ed56:	460f      	mov	r7, r1
 101ed58:	f852 0b04 	ldr.w	r0, [r2], #4
 101ed5c:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 101ed60:	9209      	str	r2, [sp, #36]	; 0x24
 101ed62:	9104      	str	r1, [sp, #16]
 101ed64:	f7fe baf3 	b.w	101d34e <_svfprintf_r+0xd6>
 101ed68:	9b04      	ldr	r3, [sp, #16]
 101ed6a:	f1c3 0501 	rsb	r5, r3, #1
 101ed6e:	951f      	str	r5, [sp, #124]	; 0x7c
 101ed70:	e61f      	b.n	101e9b2 <_svfprintf_r+0x173a>
 101ed72:	9603      	str	r6, [sp, #12]
 101ed74:	f7fe be0c 	b.w	101d990 <_svfprintf_r+0x718>
 101ed78:	9603      	str	r6, [sp, #12]
 101ed7a:	f7fe bd94 	b.w	101d8a6 <_svfprintf_r+0x62e>
 101ed7e:	9a08      	ldr	r2, [sp, #32]
 101ed80:	8993      	ldrh	r3, [r2, #12]
 101ed82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 101ed86:	8193      	strh	r3, [r2, #12]
 101ed88:	f7fe bfd9 	b.w	101dd3e <_svfprintf_r+0xac6>
 101ed8c:	9d04      	ldr	r5, [sp, #16]
 101ed8e:	e48b      	b.n	101e6a8 <_svfprintf_r+0x1430>
 101ed90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101ed92:	9912      	ldr	r1, [sp, #72]	; 0x48
 101ed94:	440b      	add	r3, r1
 101ed96:	9304      	str	r3, [sp, #16]
 101ed98:	f7ff baeb 	b.w	101e372 <_svfprintf_r+0x10fa>
 101ed9c:	230c      	movs	r3, #12
 101ed9e:	f04f 32ff 	mov.w	r2, #4294967295
 101eda2:	f8ca 3000 	str.w	r3, [sl]
 101eda6:	9205      	str	r2, [sp, #20]
 101eda8:	f7fe bb64 	b.w	101d474 <_svfprintf_r+0x1fc>
 101edac:	2300      	movs	r3, #0
 101edae:	930a      	str	r3, [sp, #40]	; 0x28
 101edb0:	e4a5      	b.n	101e6fe <_svfprintf_r+0x1486>
 101edb2:	2302      	movs	r3, #2
 101edb4:	9318      	str	r3, [sp, #96]	; 0x60
 101edb6:	e4ef      	b.n	101e798 <_svfprintf_r+0x1520>
 101edb8:	4633      	mov	r3, r6
 101edba:	f7fe bdb1 	b.w	101d920 <_svfprintf_r+0x6a8>
 101edbe:	bf00      	nop
 101edc0:	010663f8 	.word	0x010663f8
 101edc4:	00000000 	.word	0x00000000

0101edc8 <_vfprintf_r>:
 101edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101edcc:	4615      	mov	r5, r2
 101edce:	ed2d 8b0a 	vpush	{d8-d12}
 101edd2:	461c      	mov	r4, r3
 101edd4:	4682      	mov	sl, r0
 101edd6:	b0d5      	sub	sp, #340	; 0x154
 101edd8:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 101eddc:	9105      	str	r1, [sp, #20]
 101edde:	f003 fd37 	bl	1022850 <_localeconv_r>
 101ede2:	9409      	str	r4, [sp, #36]	; 0x24
 101ede4:	6803      	ldr	r3, [r0, #0]
 101ede6:	4618      	mov	r0, r3
 101ede8:	9317      	str	r3, [sp, #92]	; 0x5c
 101edea:	f7fe f849 	bl	101ce80 <strlen>
 101edee:	2208      	movs	r2, #8
 101edf0:	2100      	movs	r1, #0
 101edf2:	9015      	str	r0, [sp, #84]	; 0x54
 101edf4:	4658      	mov	r0, fp
 101edf6:	f7fd f95b 	bl	101c0b0 <memset>
 101edfa:	f1ba 0f00 	cmp.w	sl, #0
 101edfe:	d004      	beq.n	101ee0a <_vfprintf_r+0x42>
 101ee00:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 101ee04:	2b00      	cmp	r3, #0
 101ee06:	f000 8440 	beq.w	101f68a <_vfprintf_r+0x8c2>
 101ee0a:	9905      	ldr	r1, [sp, #20]
 101ee0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 101ee10:	b293      	uxth	r3, r2
 101ee12:	0498      	lsls	r0, r3, #18
 101ee14:	d407      	bmi.n	101ee26 <_vfprintf_r+0x5e>
 101ee16:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 101ee1a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 101ee1c:	818b      	strh	r3, [r1, #12]
 101ee1e:	b29b      	uxth	r3, r3
 101ee20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 101ee24:	664a      	str	r2, [r1, #100]	; 0x64
 101ee26:	071a      	lsls	r2, r3, #28
 101ee28:	f140 80be 	bpl.w	101efa8 <_vfprintf_r+0x1e0>
 101ee2c:	9a05      	ldr	r2, [sp, #20]
 101ee2e:	6912      	ldr	r2, [r2, #16]
 101ee30:	2a00      	cmp	r2, #0
 101ee32:	f000 80b9 	beq.w	101efa8 <_vfprintf_r+0x1e0>
 101ee36:	f003 031a 	and.w	r3, r3, #26
 101ee3a:	2b0a      	cmp	r3, #10
 101ee3c:	f000 80c2 	beq.w	101efc4 <_vfprintf_r+0x1fc>
 101ee40:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 101ee44:	f64a 1848 	movw	r8, #43336	; 0xa948
 101ee48:	ed9f 8b81 	vldr	d8, [pc, #516]	; 101f050 <_vfprintf_r+0x288>
 101ee4c:	f2c0 1806 	movt	r8, #262	; 0x106
 101ee50:	462f      	mov	r7, r5
 101ee52:	2300      	movs	r3, #0
 101ee54:	f64a 5178 	movw	r1, #44408	; 0xad78
 101ee58:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ee5c:	f2c0 1106 	movt	r1, #262	; 0x106
 101ee60:	9312      	str	r3, [sp, #72]	; 0x48
 101ee62:	910f      	str	r1, [sp, #60]	; 0x3c
 101ee64:	9316      	str	r3, [sp, #88]	; 0x58
 101ee66:	9318      	str	r3, [sp, #96]	; 0x60
 101ee68:	9314      	str	r3, [sp, #80]	; 0x50
 101ee6a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 101ee6e:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 101ee72:	9306      	str	r3, [sp, #24]
 101ee74:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 101ee78:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 101ee7c:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 101ee80:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 101ee82:	463c      	mov	r4, r7
 101ee84:	f8d8 3000 	ldr.w	r3, [r8]
 101ee88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 101ee8a:	2b00      	cmp	r3, #0
 101ee8c:	bf08      	it	eq
 101ee8e:	4633      	moveq	r3, r6
 101ee90:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 101ee94:	f7fb ffde 	bl	101ae54 <__locale_mb_cur_max>
 101ee98:	f8cd b000 	str.w	fp, [sp]
 101ee9c:	4622      	mov	r2, r4
 101ee9e:	a920      	add	r1, sp, #128	; 0x80
 101eea0:	4603      	mov	r3, r0
 101eea2:	4650      	mov	r0, sl
 101eea4:	47a8      	blx	r5
 101eea6:	2800      	cmp	r0, #0
 101eea8:	4603      	mov	r3, r0
 101eeaa:	f000 80a1 	beq.w	101eff0 <_vfprintf_r+0x228>
 101eeae:	f2c0 8097 	blt.w	101efe0 <_vfprintf_r+0x218>
 101eeb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 101eeb4:	2a25      	cmp	r2, #37	; 0x25
 101eeb6:	d001      	beq.n	101eebc <_vfprintf_r+0xf4>
 101eeb8:	441c      	add	r4, r3
 101eeba:	e7e3      	b.n	101ee84 <_vfprintf_r+0xbc>
 101eebc:	1be6      	subs	r6, r4, r7
 101eebe:	4605      	mov	r5, r0
 101eec0:	f040 8099 	bne.w	101eff6 <_vfprintf_r+0x22e>
 101eec4:	2300      	movs	r3, #0
 101eec6:	1c67      	adds	r7, r4, #1
 101eec8:	461e      	mov	r6, r3
 101eeca:	9307      	str	r3, [sp, #28]
 101eecc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101eed0:	f04f 32ff 	mov.w	r2, #4294967295
 101eed4:	7863      	ldrb	r3, [r4, #1]
 101eed6:	240a      	movs	r4, #10
 101eed8:	9204      	str	r2, [sp, #16]
 101eeda:	3701      	adds	r7, #1
 101eedc:	f1a3 0220 	sub.w	r2, r3, #32
 101eee0:	2a5a      	cmp	r2, #90	; 0x5a
 101eee2:	f200 83d7 	bhi.w	101f694 <_vfprintf_r+0x8cc>
 101eee6:	e8df f012 	tbh	[pc, r2, lsl #1]
 101eeea:	01de      	.short	0x01de
 101eeec:	03d503d5 	.word	0x03d503d5
 101eef0:	03d501da 	.word	0x03d501da
 101eef4:	03d503d5 	.word	0x03d503d5
 101eef8:	03d5020d 	.word	0x03d5020d
 101eefc:	01ff03d5 	.word	0x01ff03d5
 101ef00:	03d501fa 	.word	0x03d501fa
 101ef04:	022e01f6 	.word	0x022e01f6
 101ef08:	022a03d5 	.word	0x022a03d5
 101ef0c:	01b801b8 	.word	0x01b801b8
 101ef10:	01b801b8 	.word	0x01b801b8
 101ef14:	01b801b8 	.word	0x01b801b8
 101ef18:	01b801b8 	.word	0x01b801b8
 101ef1c:	03d501b8 	.word	0x03d501b8
 101ef20:	03d503d5 	.word	0x03d503d5
 101ef24:	03d503d5 	.word	0x03d503d5
 101ef28:	03d503d5 	.word	0x03d503d5
 101ef2c:	03d50248 	.word	0x03d50248
 101ef30:	03270367 	.word	0x03270367
 101ef34:	02480248 	.word	0x02480248
 101ef38:	03d50248 	.word	0x03d50248
 101ef3c:	03d503d5 	.word	0x03d503d5
 101ef40:	032303d5 	.word	0x032303d5
 101ef44:	03d503d5 	.word	0x03d503d5
 101ef48:	03d50317 	.word	0x03d50317
 101ef4c:	03d503d5 	.word	0x03d503d5
 101ef50:	03d502e7 	.word	0x03d502e7
 101ef54:	03d502d8 	.word	0x03d502d8
 101ef58:	02aa03d5 	.word	0x02aa03d5
 101ef5c:	03d503d5 	.word	0x03d503d5
 101ef60:	03d503d5 	.word	0x03d503d5
 101ef64:	03d503d5 	.word	0x03d503d5
 101ef68:	03d503d5 	.word	0x03d503d5
 101ef6c:	03d50248 	.word	0x03d50248
 101ef70:	027e0367 	.word	0x027e0367
 101ef74:	02480248 	.word	0x02480248
 101ef78:	03c60248 	.word	0x03c60248
 101ef7c:	005b027e 	.word	0x005b027e
 101ef80:	03bc03d5 	.word	0x03bc03d5
 101ef84:	03a703d5 	.word	0x03a703d5
 101ef88:	01c50391 	.word	0x01c50391
 101ef8c:	03d5005b 	.word	0x03d5005b
 101ef90:	005d02e7 	.word	0x005d02e7
 101ef94:	03d501e8 	.word	0x03d501e8
 101ef98:	00b703d5 	.word	0x00b703d5
 101ef9c:	005d03d5 	.word	0x005d03d5
 101efa0:	f046 0620 	orr.w	r6, r6, #32
 101efa4:	783b      	ldrb	r3, [r7, #0]
 101efa6:	e798      	b.n	101eeda <_vfprintf_r+0x112>
 101efa8:	9905      	ldr	r1, [sp, #20]
 101efaa:	4650      	mov	r0, sl
 101efac:	f001 fef0 	bl	1020d90 <__swsetup_r>
 101efb0:	2800      	cmp	r0, #0
 101efb2:	f041 83df 	bne.w	1020774 <_vfprintf_r+0x19ac>
 101efb6:	9b05      	ldr	r3, [sp, #20]
 101efb8:	899b      	ldrh	r3, [r3, #12]
 101efba:	f003 031a 	and.w	r3, r3, #26
 101efbe:	2b0a      	cmp	r3, #10
 101efc0:	f47f af3e 	bne.w	101ee40 <_vfprintf_r+0x78>
 101efc4:	9b05      	ldr	r3, [sp, #20]
 101efc6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 101efca:	2b00      	cmp	r3, #0
 101efcc:	f6ff af38 	blt.w	101ee40 <_vfprintf_r+0x78>
 101efd0:	4623      	mov	r3, r4
 101efd2:	462a      	mov	r2, r5
 101efd4:	9905      	ldr	r1, [sp, #20]
 101efd6:	4650      	mov	r0, sl
 101efd8:	f001 fcd4 	bl	1020984 <__sbprintf>
 101efdc:	9006      	str	r0, [sp, #24]
 101efde:	e027      	b.n	101f030 <_vfprintf_r+0x268>
 101efe0:	2208      	movs	r2, #8
 101efe2:	2100      	movs	r1, #0
 101efe4:	4658      	mov	r0, fp
 101efe6:	f7fd f863 	bl	101c0b0 <memset>
 101efea:	2301      	movs	r3, #1
 101efec:	441c      	add	r4, r3
 101efee:	e749      	b.n	101ee84 <_vfprintf_r+0xbc>
 101eff0:	1be6      	subs	r6, r4, r7
 101eff2:	4605      	mov	r5, r0
 101eff4:	d012      	beq.n	101f01c <_vfprintf_r+0x254>
 101eff6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101effa:	e9c9 7600 	strd	r7, r6, [r9]
 101effe:	3301      	adds	r3, #1
 101f000:	4432      	add	r2, r6
 101f002:	2b07      	cmp	r3, #7
 101f004:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f008:	bfd8      	it	le
 101f00a:	f109 0908 	addle.w	r9, r9, #8
 101f00e:	dc15      	bgt.n	101f03c <_vfprintf_r+0x274>
 101f010:	9b06      	ldr	r3, [sp, #24]
 101f012:	4433      	add	r3, r6
 101f014:	9306      	str	r3, [sp, #24]
 101f016:	2d00      	cmp	r5, #0
 101f018:	f47f af54 	bne.w	101eec4 <_vfprintf_r+0xfc>
 101f01c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 101f01e:	2b00      	cmp	r3, #0
 101f020:	f041 81fa 	bne.w	1020418 <_vfprintf_r+0x1650>
 101f024:	9b05      	ldr	r3, [sp, #20]
 101f026:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 101f02a:	0659      	lsls	r1, r3, #25
 101f02c:	f101 83a2 	bmi.w	1020774 <_vfprintf_r+0x19ac>
 101f030:	9806      	ldr	r0, [sp, #24]
 101f032:	b055      	add	sp, #340	; 0x154
 101f034:	ecbd 8b0a 	vpop	{d8-d12}
 101f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101f03c:	aa28      	add	r2, sp, #160	; 0xa0
 101f03e:	9905      	ldr	r1, [sp, #20]
 101f040:	4650      	mov	r0, sl
 101f042:	f005 fb8b 	bl	102475c <__sprint_r>
 101f046:	2800      	cmp	r0, #0
 101f048:	d1ec      	bne.n	101f024 <_vfprintf_r+0x25c>
 101f04a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f04e:	e7df      	b.n	101f010 <_vfprintf_r+0x248>
	...
 101f058:	06b0      	lsls	r0, r6, #26
 101f05a:	930e      	str	r3, [sp, #56]	; 0x38
 101f05c:	f24a 435c 	movw	r3, #42076	; 0xa45c
 101f060:	f2c0 1306 	movt	r3, #262	; 0x106
 101f064:	9316      	str	r3, [sp, #88]	; 0x58
 101f066:	f140 81f3 	bpl.w	101f450 <_vfprintf_r+0x688>
 101f06a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f06c:	3507      	adds	r5, #7
 101f06e:	f025 0307 	bic.w	r3, r5, #7
 101f072:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 101f076:	9309      	str	r3, [sp, #36]	; 0x24
 101f078:	ea54 0305 	orrs.w	r3, r4, r5
 101f07c:	f006 0301 	and.w	r3, r6, #1
 101f080:	bf08      	it	eq
 101f082:	2300      	moveq	r3, #0
 101f084:	2b00      	cmp	r3, #0
 101f086:	f040 81ff 	bne.w	101f488 <_vfprintf_r+0x6c0>
 101f08a:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 101f08e:	9303      	str	r3, [sp, #12]
 101f090:	2302      	movs	r3, #2
 101f092:	9904      	ldr	r1, [sp, #16]
 101f094:	2200      	movs	r2, #0
 101f096:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 101f09a:	1c4a      	adds	r2, r1, #1
 101f09c:	f000 826d 	beq.w	101f57a <_vfprintf_r+0x7b2>
 101f0a0:	ea54 0205 	orrs.w	r2, r4, r5
 101f0a4:	9a03      	ldr	r2, [sp, #12]
 101f0a6:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 101f0aa:	bf14      	ite	ne
 101f0ac:	2201      	movne	r2, #1
 101f0ae:	2200      	moveq	r2, #0
 101f0b0:	2900      	cmp	r1, #0
 101f0b2:	bf18      	it	ne
 101f0b4:	2201      	movne	r2, #1
 101f0b6:	2a00      	cmp	r2, #0
 101f0b8:	f040 8745 	bne.w	101ff46 <_vfprintf_r+0x117e>
 101f0bc:	2b00      	cmp	r3, #0
 101f0be:	f040 8510 	bne.w	101fae2 <_vfprintf_r+0xd1a>
 101f0c2:	9a03      	ldr	r2, [sp, #12]
 101f0c4:	9304      	str	r3, [sp, #16]
 101f0c6:	f012 0201 	ands.w	r2, r2, #1
 101f0ca:	9208      	str	r2, [sp, #32]
 101f0cc:	bf04      	itt	eq
 101f0ce:	ab54      	addeq	r3, sp, #336	; 0x150
 101f0d0:	930b      	streq	r3, [sp, #44]	; 0x2c
 101f0d2:	d005      	beq.n	101f0e0 <_vfprintf_r+0x318>
 101f0d4:	2330      	movs	r3, #48	; 0x30
 101f0d6:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 101f0da:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 101f0de:	930b      	str	r3, [sp, #44]	; 0x2c
 101f0e0:	2300      	movs	r3, #0
 101f0e2:	9a04      	ldr	r2, [sp, #16]
 101f0e4:	930a      	str	r3, [sp, #40]	; 0x28
 101f0e6:	9313      	str	r3, [sp, #76]	; 0x4c
 101f0e8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101f0ec:	9b08      	ldr	r3, [sp, #32]
 101f0ee:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101f0f2:	4293      	cmp	r3, r2
 101f0f4:	bfb8      	it	lt
 101f0f6:	4613      	movlt	r3, r2
 101f0f8:	9303      	str	r3, [sp, #12]
 101f0fa:	b111      	cbz	r1, 101f102 <_vfprintf_r+0x33a>
 101f0fc:	9b03      	ldr	r3, [sp, #12]
 101f0fe:	3301      	adds	r3, #1
 101f100:	9303      	str	r3, [sp, #12]
 101f102:	f016 0302 	ands.w	r3, r6, #2
 101f106:	930c      	str	r3, [sp, #48]	; 0x30
 101f108:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f10a:	bf1e      	ittt	ne
 101f10c:	9b03      	ldrne	r3, [sp, #12]
 101f10e:	3302      	addne	r3, #2
 101f110:	9303      	strne	r3, [sp, #12]
 101f112:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 101f116:	930d      	str	r3, [sp, #52]	; 0x34
 101f118:	d104      	bne.n	101f124 <_vfprintf_r+0x35c>
 101f11a:	9b07      	ldr	r3, [sp, #28]
 101f11c:	9803      	ldr	r0, [sp, #12]
 101f11e:	1a1c      	subs	r4, r3, r0
 101f120:	2c00      	cmp	r4, #0
 101f122:	dc60      	bgt.n	101f1e6 <_vfprintf_r+0x41e>
 101f124:	b189      	cbz	r1, 101f14a <_vfprintf_r+0x382>
 101f126:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101f128:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 101f12c:	3201      	adds	r2, #1
 101f12e:	f8c9 0000 	str.w	r0, [r9]
 101f132:	3101      	adds	r1, #1
 101f134:	2001      	movs	r0, #1
 101f136:	2907      	cmp	r1, #7
 101f138:	f8c9 0004 	str.w	r0, [r9, #4]
 101f13c:	922a      	str	r2, [sp, #168]	; 0xa8
 101f13e:	bfd8      	it	le
 101f140:	f109 0908 	addle.w	r9, r9, #8
 101f144:	9129      	str	r1, [sp, #164]	; 0xa4
 101f146:	f300 846f 	bgt.w	101fa28 <_vfprintf_r+0xc60>
 101f14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 101f14c:	b183      	cbz	r3, 101f170 <_vfprintf_r+0x3a8>
 101f14e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f150:	a91e      	add	r1, sp, #120	; 0x78
 101f152:	3202      	adds	r2, #2
 101f154:	f8c9 1000 	str.w	r1, [r9]
 101f158:	3301      	adds	r3, #1
 101f15a:	2102      	movs	r1, #2
 101f15c:	2b07      	cmp	r3, #7
 101f15e:	f8c9 1004 	str.w	r1, [r9, #4]
 101f162:	922a      	str	r2, [sp, #168]	; 0xa8
 101f164:	bfd8      	it	le
 101f166:	f109 0908 	addle.w	r9, r9, #8
 101f16a:	9329      	str	r3, [sp, #164]	; 0xa4
 101f16c:	f300 8469 	bgt.w	101fa42 <_vfprintf_r+0xc7a>
 101f170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 101f172:	2b80      	cmp	r3, #128	; 0x80
 101f174:	f000 8313 	beq.w	101f79e <_vfprintf_r+0x9d6>
 101f178:	9b04      	ldr	r3, [sp, #16]
 101f17a:	9908      	ldr	r1, [sp, #32]
 101f17c:	1a5c      	subs	r4, r3, r1
 101f17e:	2c00      	cmp	r4, #0
 101f180:	f300 8355 	bgt.w	101f82e <_vfprintf_r+0xa66>
 101f184:	05f5      	lsls	r5, r6, #23
 101f186:	f100 82ab 	bmi.w	101f6e0 <_vfprintf_r+0x918>
 101f18a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f18c:	9908      	ldr	r1, [sp, #32]
 101f18e:	3301      	adds	r3, #1
 101f190:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101f192:	2b07      	cmp	r3, #7
 101f194:	440a      	add	r2, r1
 101f196:	f8c9 1004 	str.w	r1, [r9, #4]
 101f19a:	f8c9 0000 	str.w	r0, [r9]
 101f19e:	922a      	str	r2, [sp, #168]	; 0xa8
 101f1a0:	9329      	str	r3, [sp, #164]	; 0xa4
 101f1a2:	f300 83ec 	bgt.w	101f97e <_vfprintf_r+0xbb6>
 101f1a6:	f109 0908 	add.w	r9, r9, #8
 101f1aa:	0770      	lsls	r0, r6, #29
 101f1ac:	d505      	bpl.n	101f1ba <_vfprintf_r+0x3f2>
 101f1ae:	9b07      	ldr	r3, [sp, #28]
 101f1b0:	9903      	ldr	r1, [sp, #12]
 101f1b2:	1a5c      	subs	r4, r3, r1
 101f1b4:	2c00      	cmp	r4, #0
 101f1b6:	f300 8451 	bgt.w	101fa5c <_vfprintf_r+0xc94>
 101f1ba:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 101f1be:	9803      	ldr	r0, [sp, #12]
 101f1c0:	4281      	cmp	r1, r0
 101f1c2:	bfac      	ite	ge
 101f1c4:	185b      	addge	r3, r3, r1
 101f1c6:	181b      	addlt	r3, r3, r0
 101f1c8:	9306      	str	r3, [sp, #24]
 101f1ca:	2a00      	cmp	r2, #0
 101f1cc:	f040 8390 	bne.w	101f8f0 <_vfprintf_r+0xb28>
 101f1d0:	2300      	movs	r3, #0
 101f1d2:	9329      	str	r3, [sp, #164]	; 0xa4
 101f1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101f1d6:	b11b      	cbz	r3, 101f1e0 <_vfprintf_r+0x418>
 101f1d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 101f1da:	4650      	mov	r0, sl
 101f1dc:	f003 f810 	bl	1022200 <_free_r>
 101f1e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f1e4:	e64c      	b.n	101ee80 <_vfprintf_r+0xb8>
 101f1e6:	2c10      	cmp	r4, #16
 101f1e8:	f246 4508 	movw	r5, #25608	; 0x6408
 101f1ec:	bfc8      	it	gt
 101f1ee:	961b      	strgt	r6, [sp, #108]	; 0x6c
 101f1f0:	f2c0 1506 	movt	r5, #262	; 0x106
 101f1f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101f1f6:	bfc4      	itt	gt
 101f1f8:	2310      	movgt	r3, #16
 101f1fa:	9e05      	ldrgt	r6, [sp, #20]
 101f1fc:	dc03      	bgt.n	101f206 <_vfprintf_r+0x43e>
 101f1fe:	e01e      	b.n	101f23e <_vfprintf_r+0x476>
 101f200:	3c10      	subs	r4, #16
 101f202:	2c10      	cmp	r4, #16
 101f204:	dd1a      	ble.n	101f23c <_vfprintf_r+0x474>
 101f206:	3101      	adds	r1, #1
 101f208:	3210      	adds	r2, #16
 101f20a:	2907      	cmp	r1, #7
 101f20c:	e9c9 5300 	strd	r5, r3, [r9]
 101f210:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f214:	f109 0908 	add.w	r9, r9, #8
 101f218:	ddf2      	ble.n	101f200 <_vfprintf_r+0x438>
 101f21a:	aa28      	add	r2, sp, #160	; 0xa0
 101f21c:	4631      	mov	r1, r6
 101f21e:	4650      	mov	r0, sl
 101f220:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f224:	f005 fa9a 	bl	102475c <__sprint_r>
 101f228:	2800      	cmp	r0, #0
 101f22a:	f040 8369 	bne.w	101f900 <_vfprintf_r+0xb38>
 101f22e:	3c10      	subs	r4, #16
 101f230:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f234:	2c10      	cmp	r4, #16
 101f236:	f04f 0310 	mov.w	r3, #16
 101f23a:	dce4      	bgt.n	101f206 <_vfprintf_r+0x43e>
 101f23c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 101f23e:	3101      	adds	r1, #1
 101f240:	4422      	add	r2, r4
 101f242:	2907      	cmp	r1, #7
 101f244:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f248:	e9c9 5400 	strd	r5, r4, [r9]
 101f24c:	f300 867e 	bgt.w	101ff4c <_vfprintf_r+0x1184>
 101f250:	f109 0908 	add.w	r9, r9, #8
 101f254:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101f258:	e764      	b.n	101f124 <_vfprintf_r+0x35c>
 101f25a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101f25e:	2100      	movs	r1, #0
 101f260:	f817 3b01 	ldrb.w	r3, [r7], #1
 101f264:	fb04 2101 	mla	r1, r4, r1, r2
 101f268:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101f26c:	2a09      	cmp	r2, #9
 101f26e:	d9f7      	bls.n	101f260 <_vfprintf_r+0x498>
 101f270:	9107      	str	r1, [sp, #28]
 101f272:	e633      	b.n	101eedc <_vfprintf_r+0x114>
 101f274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f276:	f046 0202 	orr.w	r2, r6, #2
 101f27a:	f24a 415c 	movw	r1, #42076	; 0xa45c
 101f27e:	9203      	str	r2, [sp, #12]
 101f280:	f2c0 1106 	movt	r1, #262	; 0x106
 101f284:	f647 0230 	movw	r2, #30768	; 0x7830
 101f288:	f853 4b04 	ldr.w	r4, [r3], #4
 101f28c:	2500      	movs	r5, #0
 101f28e:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 101f292:	2278      	movs	r2, #120	; 0x78
 101f294:	9116      	str	r1, [sp, #88]	; 0x58
 101f296:	9309      	str	r3, [sp, #36]	; 0x24
 101f298:	2302      	movs	r3, #2
 101f29a:	920e      	str	r2, [sp, #56]	; 0x38
 101f29c:	e6f9      	b.n	101f092 <_vfprintf_r+0x2ca>
 101f29e:	f046 0601 	orr.w	r6, r6, #1
 101f2a2:	783b      	ldrb	r3, [r7, #0]
 101f2a4:	e619      	b.n	101eeda <_vfprintf_r+0x112>
 101f2a6:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 101f2aa:	783b      	ldrb	r3, [r7, #0]
 101f2ac:	2a00      	cmp	r2, #0
 101f2ae:	f47f ae14 	bne.w	101eeda <_vfprintf_r+0x112>
 101f2b2:	2220      	movs	r2, #32
 101f2b4:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 101f2b8:	e60f      	b.n	101eeda <_vfprintf_r+0x112>
 101f2ba:	06b0      	lsls	r0, r6, #26
 101f2bc:	930e      	str	r3, [sp, #56]	; 0x38
 101f2be:	f140 857a 	bpl.w	101fdb6 <_vfprintf_r+0xfee>
 101f2c2:	9603      	str	r6, [sp, #12]
 101f2c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f2c6:	2301      	movs	r3, #1
 101f2c8:	3507      	adds	r5, #7
 101f2ca:	f025 0207 	bic.w	r2, r5, #7
 101f2ce:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101f2d2:	9209      	str	r2, [sp, #36]	; 0x24
 101f2d4:	e6dd      	b.n	101f092 <_vfprintf_r+0x2ca>
 101f2d6:	783b      	ldrb	r3, [r7, #0]
 101f2d8:	f046 0604 	orr.w	r6, r6, #4
 101f2dc:	e5fd      	b.n	101eeda <_vfprintf_r+0x112>
 101f2de:	232b      	movs	r3, #43	; 0x2b
 101f2e0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f2e4:	783b      	ldrb	r3, [r7, #0]
 101f2e6:	e5f8      	b.n	101eeda <_vfprintf_r+0x112>
 101f2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f2ea:	783b      	ldrb	r3, [r7, #0]
 101f2ec:	f852 1b04 	ldr.w	r1, [r2], #4
 101f2f0:	2900      	cmp	r1, #0
 101f2f2:	9107      	str	r1, [sp, #28]
 101f2f4:	bfa8      	it	ge
 101f2f6:	9209      	strge	r2, [sp, #36]	; 0x24
 101f2f8:	f6bf adef 	bge.w	101eeda <_vfprintf_r+0x112>
 101f2fc:	4249      	negs	r1, r1
 101f2fe:	9209      	str	r2, [sp, #36]	; 0x24
 101f300:	9107      	str	r1, [sp, #28]
 101f302:	e7e9      	b.n	101f2d8 <_vfprintf_r+0x510>
 101f304:	4650      	mov	r0, sl
 101f306:	f003 faa3 	bl	1022850 <_localeconv_r>
 101f30a:	6843      	ldr	r3, [r0, #4]
 101f30c:	4618      	mov	r0, r3
 101f30e:	931a      	str	r3, [sp, #104]	; 0x68
 101f310:	f7fd fdb6 	bl	101ce80 <strlen>
 101f314:	4605      	mov	r5, r0
 101f316:	9019      	str	r0, [sp, #100]	; 0x64
 101f318:	4650      	mov	r0, sl
 101f31a:	f003 fa99 	bl	1022850 <_localeconv_r>
 101f31e:	6883      	ldr	r3, [r0, #8]
 101f320:	2d00      	cmp	r5, #0
 101f322:	bf18      	it	ne
 101f324:	2b00      	cmpne	r3, #0
 101f326:	9314      	str	r3, [sp, #80]	; 0x50
 101f328:	f43f ae3c 	beq.w	101efa4 <_vfprintf_r+0x1dc>
 101f32c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 101f32e:	781a      	ldrb	r2, [r3, #0]
 101f330:	783b      	ldrb	r3, [r7, #0]
 101f332:	2a00      	cmp	r2, #0
 101f334:	f43f add1 	beq.w	101eeda <_vfprintf_r+0x112>
 101f338:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 101f33c:	e5cd      	b.n	101eeda <_vfprintf_r+0x112>
 101f33e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 101f342:	783b      	ldrb	r3, [r7, #0]
 101f344:	e5c9      	b.n	101eeda <_vfprintf_r+0x112>
 101f346:	4639      	mov	r1, r7
 101f348:	f811 3b01 	ldrb.w	r3, [r1], #1
 101f34c:	2b2a      	cmp	r3, #42	; 0x2a
 101f34e:	f001 82d9 	beq.w	1020904 <_vfprintf_r+0x1b3c>
 101f352:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101f356:	460f      	mov	r7, r1
 101f358:	2a09      	cmp	r2, #9
 101f35a:	bf84      	itt	hi
 101f35c:	2200      	movhi	r2, #0
 101f35e:	9204      	strhi	r2, [sp, #16]
 101f360:	f63f adbc 	bhi.w	101eedc <_vfprintf_r+0x114>
 101f364:	2100      	movs	r1, #0
 101f366:	f817 3b01 	ldrb.w	r3, [r7], #1
 101f36a:	fb04 2101 	mla	r1, r4, r1, r2
 101f36e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101f372:	2a09      	cmp	r2, #9
 101f374:	d9f7      	bls.n	101f366 <_vfprintf_r+0x59e>
 101f376:	9104      	str	r1, [sp, #16]
 101f378:	e5b0      	b.n	101eedc <_vfprintf_r+0x114>
 101f37a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f37c:	930e      	str	r3, [sp, #56]	; 0x38
 101f37e:	3507      	adds	r5, #7
 101f380:	ed9f 7bab 	vldr	d7, [pc, #684]	; 101f630 <_vfprintf_r+0x868>
 101f384:	f025 0307 	bic.w	r3, r5, #7
 101f388:	ecb3 8b02 	vldmia	r3!, {d8}
 101f38c:	eeb0 6bc8 	vabs.f64	d6, d8
 101f390:	9309      	str	r3, [sp, #36]	; 0x24
 101f392:	eeb4 6b47 	vcmp.f64	d6, d7
 101f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f39a:	f340 848c 	ble.w	101fcb6 <_vfprintf_r+0xeee>
 101f39e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 101f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f3a6:	bf58      	it	pl
 101f3a8:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 101f3ac:	d502      	bpl.n	101f3b4 <_vfprintf_r+0x5ec>
 101f3ae:	212d      	movs	r1, #45	; 0x2d
 101f3b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 101f3b4:	f24a 434c 	movw	r3, #42060	; 0xa44c
 101f3b8:	f24a 4450 	movw	r4, #42064	; 0xa450
 101f3bc:	f2c0 1306 	movt	r3, #262	; 0x106
 101f3c0:	f2c0 1406 	movt	r4, #262	; 0x106
 101f3c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 101f3c6:	2200      	movs	r2, #0
 101f3c8:	2003      	movs	r0, #3
 101f3ca:	920a      	str	r2, [sp, #40]	; 0x28
 101f3cc:	2d47      	cmp	r5, #71	; 0x47
 101f3ce:	bfc8      	it	gt
 101f3d0:	4623      	movgt	r3, r4
 101f3d2:	9003      	str	r0, [sp, #12]
 101f3d4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 101f3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 101f3da:	9008      	str	r0, [sp, #32]
 101f3dc:	9204      	str	r2, [sp, #16]
 101f3de:	9213      	str	r2, [sp, #76]	; 0x4c
 101f3e0:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101f3e4:	e689      	b.n	101f0fa <_vfprintf_r+0x332>
 101f3e6:	06b5      	lsls	r5, r6, #26
 101f3e8:	930e      	str	r3, [sp, #56]	; 0x38
 101f3ea:	f140 84f4 	bpl.w	101fdd6 <_vfprintf_r+0x100e>
 101f3ee:	9603      	str	r6, [sp, #12]
 101f3f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f3f2:	3507      	adds	r5, #7
 101f3f4:	f025 0307 	bic.w	r3, r5, #7
 101f3f8:	4619      	mov	r1, r3
 101f3fa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 101f3fe:	4614      	mov	r4, r2
 101f400:	461d      	mov	r5, r3
 101f402:	9109      	str	r1, [sp, #36]	; 0x24
 101f404:	2a00      	cmp	r2, #0
 101f406:	f173 0300 	sbcs.w	r3, r3, #0
 101f40a:	f2c0 80a9 	blt.w	101f560 <_vfprintf_r+0x798>
 101f40e:	9b04      	ldr	r3, [sp, #16]
 101f410:	3301      	adds	r3, #1
 101f412:	f000 8156 	beq.w	101f6c2 <_vfprintf_r+0x8fa>
 101f416:	ea54 0305 	orrs.w	r3, r4, r5
 101f41a:	9a04      	ldr	r2, [sp, #16]
 101f41c:	9b03      	ldr	r3, [sp, #12]
 101f41e:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 101f422:	bf14      	ite	ne
 101f424:	2301      	movne	r3, #1
 101f426:	2300      	moveq	r3, #0
 101f428:	2a00      	cmp	r2, #0
 101f42a:	bf18      	it	ne
 101f42c:	2301      	movne	r3, #1
 101f42e:	2b00      	cmp	r3, #0
 101f430:	f040 8146 	bne.w	101f6c0 <_vfprintf_r+0x8f8>
 101f434:	aa54      	add	r2, sp, #336	; 0x150
 101f436:	9304      	str	r3, [sp, #16]
 101f438:	920b      	str	r2, [sp, #44]	; 0x2c
 101f43a:	9308      	str	r3, [sp, #32]
 101f43c:	e650      	b.n	101f0e0 <_vfprintf_r+0x318>
 101f43e:	06b0      	lsls	r0, r6, #26
 101f440:	930e      	str	r3, [sp, #56]	; 0x38
 101f442:	f24a 13dc 	movw	r3, #41436	; 0xa1dc
 101f446:	f2c0 1306 	movt	r3, #262	; 0x106
 101f44a:	9316      	str	r3, [sp, #88]	; 0x58
 101f44c:	f53f ae0d 	bmi.w	101f06a <_vfprintf_r+0x2a2>
 101f450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f452:	06f1      	lsls	r1, r6, #27
 101f454:	f853 4b04 	ldr.w	r4, [r3], #4
 101f458:	9309      	str	r3, [sp, #36]	; 0x24
 101f45a:	d40b      	bmi.n	101f474 <_vfprintf_r+0x6ac>
 101f45c:	0672      	lsls	r2, r6, #25
 101f45e:	bf44      	itt	mi
 101f460:	b2a4      	uxthmi	r4, r4
 101f462:	2500      	movmi	r5, #0
 101f464:	f53f ae08 	bmi.w	101f078 <_vfprintf_r+0x2b0>
 101f468:	05b3      	lsls	r3, r6, #22
 101f46a:	bf44      	itt	mi
 101f46c:	b2e4      	uxtbmi	r4, r4
 101f46e:	2500      	movmi	r5, #0
 101f470:	f53f ae02 	bmi.w	101f078 <_vfprintf_r+0x2b0>
 101f474:	2500      	movs	r5, #0
 101f476:	ea54 0305 	orrs.w	r3, r4, r5
 101f47a:	f006 0301 	and.w	r3, r6, #1
 101f47e:	bf08      	it	eq
 101f480:	2300      	moveq	r3, #0
 101f482:	2b00      	cmp	r3, #0
 101f484:	f43f ae01 	beq.w	101f08a <_vfprintf_r+0x2c2>
 101f488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f48a:	f046 0602 	orr.w	r6, r6, #2
 101f48e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 101f492:	2330      	movs	r3, #48	; 0x30
 101f494:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 101f498:	e5f7      	b.n	101f08a <_vfprintf_r+0x2c2>
 101f49a:	06b4      	lsls	r4, r6, #26
 101f49c:	930e      	str	r3, [sp, #56]	; 0x38
 101f49e:	f046 0310 	orr.w	r3, r6, #16
 101f4a2:	9303      	str	r3, [sp, #12]
 101f4a4:	f53f af0e 	bmi.w	101f2c4 <_vfprintf_r+0x4fc>
 101f4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f4aa:	1d1a      	adds	r2, r3, #4
 101f4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f4ae:	2500      	movs	r5, #0
 101f4b0:	9209      	str	r2, [sp, #36]	; 0x24
 101f4b2:	681c      	ldr	r4, [r3, #0]
 101f4b4:	2301      	movs	r3, #1
 101f4b6:	e5ec      	b.n	101f092 <_vfprintf_r+0x2ca>
 101f4b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f4ba:	930e      	str	r3, [sp, #56]	; 0x38
 101f4bc:	2300      	movs	r3, #0
 101f4be:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f4c2:	f855 2b04 	ldr.w	r2, [r5], #4
 101f4c6:	920b      	str	r2, [sp, #44]	; 0x2c
 101f4c8:	2a00      	cmp	r2, #0
 101f4ca:	f000 84d9 	beq.w	101fe80 <_vfprintf_r+0x10b8>
 101f4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f4d0:	2b53      	cmp	r3, #83	; 0x53
 101f4d2:	f000 8556 	beq.w	101ff82 <_vfprintf_r+0x11ba>
 101f4d6:	f016 0310 	ands.w	r3, r6, #16
 101f4da:	9310      	str	r3, [sp, #64]	; 0x40
 101f4dc:	f040 8551 	bne.w	101ff82 <_vfprintf_r+0x11ba>
 101f4e0:	9a04      	ldr	r2, [sp, #16]
 101f4e2:	1c53      	adds	r3, r2, #1
 101f4e4:	f000 8787 	beq.w	10203f6 <_vfprintf_r+0x162e>
 101f4e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 101f4ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101f4ec:	f003 fa50 	bl	1022990 <memchr>
 101f4f0:	900a      	str	r0, [sp, #40]	; 0x28
 101f4f2:	2800      	cmp	r0, #0
 101f4f4:	f001 81e5 	beq.w	10208c2 <_vfprintf_r+0x1afa>
 101f4f8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 101f4fc:	9509      	str	r5, [sp, #36]	; 0x24
 101f4fe:	1a9a      	subs	r2, r3, r2
 101f500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101f502:	9208      	str	r2, [sp, #32]
 101f504:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101f508:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 101f50c:	9304      	str	r3, [sp, #16]
 101f50e:	9313      	str	r3, [sp, #76]	; 0x4c
 101f510:	9203      	str	r2, [sp, #12]
 101f512:	9311      	str	r3, [sp, #68]	; 0x44
 101f514:	930a      	str	r3, [sp, #40]	; 0x28
 101f516:	e5f0      	b.n	101f0fa <_vfprintf_r+0x332>
 101f518:	06b4      	lsls	r4, r6, #26
 101f51a:	930e      	str	r3, [sp, #56]	; 0x38
 101f51c:	f046 0310 	orr.w	r3, r6, #16
 101f520:	d479      	bmi.n	101f616 <_vfprintf_r+0x84e>
 101f522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f524:	3204      	adds	r2, #4
 101f526:	9909      	ldr	r1, [sp, #36]	; 0x24
 101f528:	2500      	movs	r5, #0
 101f52a:	9209      	str	r2, [sp, #36]	; 0x24
 101f52c:	680c      	ldr	r4, [r1, #0]
 101f52e:	e079      	b.n	101f624 <_vfprintf_r+0x85c>
 101f530:	f046 0608 	orr.w	r6, r6, #8
 101f534:	783b      	ldrb	r3, [r7, #0]
 101f536:	e4d0      	b.n	101eeda <_vfprintf_r+0x112>
 101f538:	930e      	str	r3, [sp, #56]	; 0x38
 101f53a:	f046 0310 	orr.w	r3, r6, #16
 101f53e:	06b6      	lsls	r6, r6, #26
 101f540:	9303      	str	r3, [sp, #12]
 101f542:	f53f af55 	bmi.w	101f3f0 <_vfprintf_r+0x628>
 101f546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f548:	1d1a      	adds	r2, r3, #4
 101f54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101f54c:	9209      	str	r2, [sp, #36]	; 0x24
 101f54e:	681c      	ldr	r4, [r3, #0]
 101f550:	17e5      	asrs	r5, r4, #31
 101f552:	4622      	mov	r2, r4
 101f554:	2a00      	cmp	r2, #0
 101f556:	462b      	mov	r3, r5
 101f558:	f173 0300 	sbcs.w	r3, r3, #0
 101f55c:	f6bf af57 	bge.w	101f40e <_vfprintf_r+0x646>
 101f560:	4264      	negs	r4, r4
 101f562:	9904      	ldr	r1, [sp, #16]
 101f564:	f04f 032d 	mov.w	r3, #45	; 0x2d
 101f568:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f56c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 101f570:	1c4a      	adds	r2, r1, #1
 101f572:	f04f 0301 	mov.w	r3, #1
 101f576:	f47f ad93 	bne.w	101f0a0 <_vfprintf_r+0x2d8>
 101f57a:	2b01      	cmp	r3, #1
 101f57c:	f000 80a1 	beq.w	101f6c2 <_vfprintf_r+0x8fa>
 101f580:	2b02      	cmp	r3, #2
 101f582:	bf18      	it	ne
 101f584:	a954      	addne	r1, sp, #336	; 0x150
 101f586:	f040 8193 	bne.w	101f8b0 <_vfprintf_r+0xae8>
 101f58a:	ab54      	add	r3, sp, #336	; 0x150
 101f58c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 101f58e:	461a      	mov	r2, r3
 101f590:	f004 010f 	and.w	r1, r4, #15
 101f594:	0923      	lsrs	r3, r4, #4
 101f596:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 101f59a:	0928      	lsrs	r0, r5, #4
 101f59c:	5c71      	ldrb	r1, [r6, r1]
 101f59e:	461c      	mov	r4, r3
 101f5a0:	4605      	mov	r5, r0
 101f5a2:	ea54 0305 	orrs.w	r3, r4, r5
 101f5a6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 101f5aa:	d1f1      	bne.n	101f590 <_vfprintf_r+0x7c8>
 101f5ac:	ab54      	add	r3, sp, #336	; 0x150
 101f5ae:	920b      	str	r2, [sp, #44]	; 0x2c
 101f5b0:	1a9b      	subs	r3, r3, r2
 101f5b2:	9e03      	ldr	r6, [sp, #12]
 101f5b4:	9308      	str	r3, [sp, #32]
 101f5b6:	e593      	b.n	101f0e0 <_vfprintf_r+0x318>
 101f5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f5ba:	2b43      	cmp	r3, #67	; 0x43
 101f5bc:	930e      	str	r3, [sp, #56]	; 0x38
 101f5be:	f102 0504 	add.w	r5, r2, #4
 101f5c2:	d002      	beq.n	101f5ca <_vfprintf_r+0x802>
 101f5c4:	06f3      	lsls	r3, r6, #27
 101f5c6:	f140 841e 	bpl.w	101fe06 <_vfprintf_r+0x103e>
 101f5ca:	2208      	movs	r2, #8
 101f5cc:	2100      	movs	r1, #0
 101f5ce:	a826      	add	r0, sp, #152	; 0x98
 101f5d0:	ac3b      	add	r4, sp, #236	; 0xec
 101f5d2:	f7fc fd6d 	bl	101c0b0 <memset>
 101f5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f5d8:	ab26      	add	r3, sp, #152	; 0x98
 101f5da:	4621      	mov	r1, r4
 101f5dc:	4650      	mov	r0, sl
 101f5de:	6812      	ldr	r2, [r2, #0]
 101f5e0:	f001 fa4c 	bl	1020a7c <_wcrtomb_r>
 101f5e4:	1c43      	adds	r3, r0, #1
 101f5e6:	9008      	str	r0, [sp, #32]
 101f5e8:	f001 80ce 	beq.w	1020788 <_vfprintf_r+0x19c0>
 101f5ec:	9b08      	ldr	r3, [sp, #32]
 101f5ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101f5f2:	9303      	str	r3, [sp, #12]
 101f5f4:	2300      	movs	r3, #0
 101f5f6:	9509      	str	r5, [sp, #36]	; 0x24
 101f5f8:	4619      	mov	r1, r3
 101f5fa:	940b      	str	r4, [sp, #44]	; 0x2c
 101f5fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f600:	930a      	str	r3, [sp, #40]	; 0x28
 101f602:	9304      	str	r3, [sp, #16]
 101f604:	9313      	str	r3, [sp, #76]	; 0x4c
 101f606:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101f60a:	e57a      	b.n	101f102 <_vfprintf_r+0x33a>
 101f60c:	06b0      	lsls	r0, r6, #26
 101f60e:	930e      	str	r3, [sp, #56]	; 0x38
 101f610:	f140 8343 	bpl.w	101fc9a <_vfprintf_r+0xed2>
 101f614:	4633      	mov	r3, r6
 101f616:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101f618:	3507      	adds	r5, #7
 101f61a:	f025 0207 	bic.w	r2, r5, #7
 101f61e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101f622:	9209      	str	r2, [sp, #36]	; 0x24
 101f624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 101f628:	9303      	str	r3, [sp, #12]
 101f62a:	2300      	movs	r3, #0
 101f62c:	e531      	b.n	101f092 <_vfprintf_r+0x2ca>
 101f62e:	bf00      	nop
 101f630:	ffffffff 	.word	0xffffffff
 101f634:	7fefffff 	.word	0x7fefffff
 101f638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f63a:	06b0      	lsls	r0, r6, #26
 101f63c:	f102 0304 	add.w	r3, r2, #4
 101f640:	f100 8321 	bmi.w	101fc86 <_vfprintf_r+0xebe>
 101f644:	06f1      	lsls	r1, r6, #27
 101f646:	f100 8517 	bmi.w	1020078 <_vfprintf_r+0x12b0>
 101f64a:	0672      	lsls	r2, r6, #25
 101f64c:	f100 86c4 	bmi.w	10203d8 <_vfprintf_r+0x1610>
 101f650:	05b5      	lsls	r5, r6, #22
 101f652:	f140 8511 	bpl.w	1020078 <_vfprintf_r+0x12b0>
 101f656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101f658:	9309      	str	r3, [sp, #36]	; 0x24
 101f65a:	9b06      	ldr	r3, [sp, #24]
 101f65c:	6812      	ldr	r2, [r2, #0]
 101f65e:	7013      	strb	r3, [r2, #0]
 101f660:	e40e      	b.n	101ee80 <_vfprintf_r+0xb8>
 101f662:	783b      	ldrb	r3, [r7, #0]
 101f664:	2b6c      	cmp	r3, #108	; 0x6c
 101f666:	bf09      	itett	eq
 101f668:	f046 0620 	orreq.w	r6, r6, #32
 101f66c:	f046 0610 	orrne.w	r6, r6, #16
 101f670:	787b      	ldrbeq	r3, [r7, #1]
 101f672:	3701      	addeq	r7, #1
 101f674:	e431      	b.n	101eeda <_vfprintf_r+0x112>
 101f676:	783b      	ldrb	r3, [r7, #0]
 101f678:	2b68      	cmp	r3, #104	; 0x68
 101f67a:	bf09      	itett	eq
 101f67c:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 101f680:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 101f684:	787b      	ldrbeq	r3, [r7, #1]
 101f686:	3701      	addeq	r7, #1
 101f688:	e427      	b.n	101eeda <_vfprintf_r+0x112>
 101f68a:	4650      	mov	r0, sl
 101f68c:	f002 fd3e 	bl	102210c <__sinit>
 101f690:	f7ff bbbb 	b.w	101ee0a <_vfprintf_r+0x42>
 101f694:	461a      	mov	r2, r3
 101f696:	930e      	str	r3, [sp, #56]	; 0x38
 101f698:	2b00      	cmp	r3, #0
 101f69a:	f43f acbf 	beq.w	101f01c <_vfprintf_r+0x254>
 101f69e:	2300      	movs	r3, #0
 101f6a0:	2001      	movs	r0, #1
 101f6a2:	4619      	mov	r1, r3
 101f6a4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 101f6a8:	930a      	str	r3, [sp, #40]	; 0x28
 101f6aa:	9304      	str	r3, [sp, #16]
 101f6ac:	9313      	str	r3, [sp, #76]	; 0x4c
 101f6ae:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 101f6b2:	ab3b      	add	r3, sp, #236	; 0xec
 101f6b4:	9003      	str	r0, [sp, #12]
 101f6b6:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 101f6ba:	9008      	str	r0, [sp, #32]
 101f6bc:	930b      	str	r3, [sp, #44]	; 0x2c
 101f6be:	e520      	b.n	101f102 <_vfprintf_r+0x33a>
 101f6c0:	9603      	str	r6, [sp, #12]
 101f6c2:	2d00      	cmp	r5, #0
 101f6c4:	bf08      	it	eq
 101f6c6:	2c0a      	cmpeq	r4, #10
 101f6c8:	f080 8486 	bcs.w	101ffd8 <_vfprintf_r+0x1210>
 101f6cc:	2301      	movs	r3, #1
 101f6ce:	3430      	adds	r4, #48	; 0x30
 101f6d0:	9308      	str	r3, [sp, #32]
 101f6d2:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 101f6d6:	9e03      	ldr	r6, [sp, #12]
 101f6d8:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 101f6dc:	930b      	str	r3, [sp, #44]	; 0x2c
 101f6de:	e4ff      	b.n	101f0e0 <_vfprintf_r+0x318>
 101f6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101f6e2:	2b65      	cmp	r3, #101	; 0x65
 101f6e4:	f340 8156 	ble.w	101f994 <_vfprintf_r+0xbcc>
 101f6e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f6f0:	f040 81fd 	bne.w	101faee <_vfprintf_r+0xd26>
 101f6f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f6f6:	3201      	adds	r2, #1
 101f6f8:	2101      	movs	r1, #1
 101f6fa:	922a      	str	r2, [sp, #168]	; 0xa8
 101f6fc:	3301      	adds	r3, #1
 101f6fe:	f648 12e8 	movw	r2, #35304	; 0x89e8
 101f702:	2b07      	cmp	r3, #7
 101f704:	f2c0 1206 	movt	r2, #262	; 0x106
 101f708:	9329      	str	r3, [sp, #164]	; 0xa4
 101f70a:	e9c9 2100 	strd	r2, r1, [r9]
 101f70e:	bfd8      	it	le
 101f710:	f109 0908 	addle.w	r9, r9, #8
 101f714:	f300 8429 	bgt.w	101ff6a <_vfprintf_r+0x11a2>
 101f718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101f71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 101f71c:	4293      	cmp	r3, r2
 101f71e:	f280 82ac 	bge.w	101fc7a <_vfprintf_r+0xeb2>
 101f722:	9917      	ldr	r1, [sp, #92]	; 0x5c
 101f724:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 101f728:	f8c9 1000 	str.w	r1, [r9]
 101f72c:	3301      	adds	r3, #1
 101f72e:	9915      	ldr	r1, [sp, #84]	; 0x54
 101f730:	2b07      	cmp	r3, #7
 101f732:	440a      	add	r2, r1
 101f734:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f738:	f8c9 1004 	str.w	r1, [r9, #4]
 101f73c:	bfd8      	it	le
 101f73e:	f109 0908 	addle.w	r9, r9, #8
 101f742:	f300 8391 	bgt.w	101fe68 <_vfprintf_r+0x10a0>
 101f746:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101f748:	1e5c      	subs	r4, r3, #1
 101f74a:	2c00      	cmp	r4, #0
 101f74c:	f77f ad2d 	ble.w	101f1aa <_vfprintf_r+0x3e2>
 101f750:	2c10      	cmp	r4, #16
 101f752:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f754:	f340 83d4 	ble.w	101ff00 <_vfprintf_r+0x1138>
 101f758:	9604      	str	r6, [sp, #16]
 101f75a:	2510      	movs	r5, #16
 101f75c:	4626      	mov	r6, r4
 101f75e:	4619      	mov	r1, r3
 101f760:	9c05      	ldr	r4, [sp, #20]
 101f762:	e003      	b.n	101f76c <_vfprintf_r+0x9a4>
 101f764:	3e10      	subs	r6, #16
 101f766:	2e10      	cmp	r6, #16
 101f768:	f340 8495 	ble.w	1020096 <_vfprintf_r+0x12ce>
 101f76c:	3101      	adds	r1, #1
 101f76e:	4bc2      	ldr	r3, [pc, #776]	; (101fa78 <_vfprintf_r+0xcb0>)
 101f770:	2907      	cmp	r1, #7
 101f772:	f102 0210 	add.w	r2, r2, #16
 101f776:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f77a:	e9c9 3500 	strd	r3, r5, [r9]
 101f77e:	f109 0908 	add.w	r9, r9, #8
 101f782:	ddef      	ble.n	101f764 <_vfprintf_r+0x99c>
 101f784:	aa28      	add	r2, sp, #160	; 0xa0
 101f786:	4621      	mov	r1, r4
 101f788:	4650      	mov	r0, sl
 101f78a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f78e:	f004 ffe5 	bl	102475c <__sprint_r>
 101f792:	2800      	cmp	r0, #0
 101f794:	f040 80b4 	bne.w	101f900 <_vfprintf_r+0xb38>
 101f798:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f79c:	e7e2      	b.n	101f764 <_vfprintf_r+0x99c>
 101f79e:	9b07      	ldr	r3, [sp, #28]
 101f7a0:	9903      	ldr	r1, [sp, #12]
 101f7a2:	1a5c      	subs	r4, r3, r1
 101f7a4:	2c00      	cmp	r4, #0
 101f7a6:	f77f ace7 	ble.w	101f178 <_vfprintf_r+0x3b0>
 101f7aa:	2c10      	cmp	r4, #16
 101f7ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f7ae:	dd26      	ble.n	101f7fe <_vfprintf_r+0xa36>
 101f7b0:	960c      	str	r6, [sp, #48]	; 0x30
 101f7b2:	2510      	movs	r5, #16
 101f7b4:	4626      	mov	r6, r4
 101f7b6:	4619      	mov	r1, r3
 101f7b8:	9c05      	ldr	r4, [sp, #20]
 101f7ba:	e002      	b.n	101f7c2 <_vfprintf_r+0x9fa>
 101f7bc:	3e10      	subs	r6, #16
 101f7be:	2e10      	cmp	r6, #16
 101f7c0:	dd1a      	ble.n	101f7f8 <_vfprintf_r+0xa30>
 101f7c2:	3101      	adds	r1, #1
 101f7c4:	4bac      	ldr	r3, [pc, #688]	; (101fa78 <_vfprintf_r+0xcb0>)
 101f7c6:	2907      	cmp	r1, #7
 101f7c8:	f102 0210 	add.w	r2, r2, #16
 101f7cc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f7d0:	e9c9 3500 	strd	r3, r5, [r9]
 101f7d4:	f109 0908 	add.w	r9, r9, #8
 101f7d8:	ddf0      	ble.n	101f7bc <_vfprintf_r+0x9f4>
 101f7da:	aa28      	add	r2, sp, #160	; 0xa0
 101f7dc:	4621      	mov	r1, r4
 101f7de:	4650      	mov	r0, sl
 101f7e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f7e4:	f004 ffba 	bl	102475c <__sprint_r>
 101f7e8:	2800      	cmp	r0, #0
 101f7ea:	f040 8089 	bne.w	101f900 <_vfprintf_r+0xb38>
 101f7ee:	3e10      	subs	r6, #16
 101f7f0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f7f4:	2e10      	cmp	r6, #16
 101f7f6:	dce4      	bgt.n	101f7c2 <_vfprintf_r+0x9fa>
 101f7f8:	4634      	mov	r4, r6
 101f7fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 101f7fc:	460b      	mov	r3, r1
 101f7fe:	3301      	adds	r3, #1
 101f800:	499d      	ldr	r1, [pc, #628]	; (101fa78 <_vfprintf_r+0xcb0>)
 101f802:	2b07      	cmp	r3, #7
 101f804:	4422      	add	r2, r4
 101f806:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f80a:	e9c9 1400 	strd	r1, r4, [r9]
 101f80e:	bfd8      	it	le
 101f810:	f109 0908 	addle.w	r9, r9, #8
 101f814:	f77f acb0 	ble.w	101f178 <_vfprintf_r+0x3b0>
 101f818:	aa28      	add	r2, sp, #160	; 0xa0
 101f81a:	9905      	ldr	r1, [sp, #20]
 101f81c:	4650      	mov	r0, sl
 101f81e:	f004 ff9d 	bl	102475c <__sprint_r>
 101f822:	2800      	cmp	r0, #0
 101f824:	d16c      	bne.n	101f900 <_vfprintf_r+0xb38>
 101f826:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f828:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f82c:	e4a4      	b.n	101f178 <_vfprintf_r+0x3b0>
 101f82e:	2c10      	cmp	r4, #16
 101f830:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f832:	dd25      	ble.n	101f880 <_vfprintf_r+0xab8>
 101f834:	9604      	str	r6, [sp, #16]
 101f836:	2510      	movs	r5, #16
 101f838:	4626      	mov	r6, r4
 101f83a:	4619      	mov	r1, r3
 101f83c:	9c05      	ldr	r4, [sp, #20]
 101f83e:	e002      	b.n	101f846 <_vfprintf_r+0xa7e>
 101f840:	3e10      	subs	r6, #16
 101f842:	2e10      	cmp	r6, #16
 101f844:	dd19      	ble.n	101f87a <_vfprintf_r+0xab2>
 101f846:	3101      	adds	r1, #1
 101f848:	4b8b      	ldr	r3, [pc, #556]	; (101fa78 <_vfprintf_r+0xcb0>)
 101f84a:	2907      	cmp	r1, #7
 101f84c:	f102 0210 	add.w	r2, r2, #16
 101f850:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f854:	e9c9 3500 	strd	r3, r5, [r9]
 101f858:	f109 0908 	add.w	r9, r9, #8
 101f85c:	ddf0      	ble.n	101f840 <_vfprintf_r+0xa78>
 101f85e:	aa28      	add	r2, sp, #160	; 0xa0
 101f860:	4621      	mov	r1, r4
 101f862:	4650      	mov	r0, sl
 101f864:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f868:	f004 ff78 	bl	102475c <__sprint_r>
 101f86c:	2800      	cmp	r0, #0
 101f86e:	d147      	bne.n	101f900 <_vfprintf_r+0xb38>
 101f870:	3e10      	subs	r6, #16
 101f872:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101f876:	2e10      	cmp	r6, #16
 101f878:	dce5      	bgt.n	101f846 <_vfprintf_r+0xa7e>
 101f87a:	4634      	mov	r4, r6
 101f87c:	9e04      	ldr	r6, [sp, #16]
 101f87e:	460b      	mov	r3, r1
 101f880:	3301      	adds	r3, #1
 101f882:	497d      	ldr	r1, [pc, #500]	; (101fa78 <_vfprintf_r+0xcb0>)
 101f884:	2b07      	cmp	r3, #7
 101f886:	4422      	add	r2, r4
 101f888:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f88c:	e9c9 1400 	strd	r1, r4, [r9]
 101f890:	bfd8      	it	le
 101f892:	f109 0908 	addle.w	r9, r9, #8
 101f896:	f77f ac75 	ble.w	101f184 <_vfprintf_r+0x3bc>
 101f89a:	aa28      	add	r2, sp, #160	; 0xa0
 101f89c:	9905      	ldr	r1, [sp, #20]
 101f89e:	4650      	mov	r0, sl
 101f8a0:	f004 ff5c 	bl	102475c <__sprint_r>
 101f8a4:	bb60      	cbnz	r0, 101f900 <_vfprintf_r+0xb38>
 101f8a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f8a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f8ac:	e46a      	b.n	101f184 <_vfprintf_r+0x3bc>
 101f8ae:	4611      	mov	r1, r2
 101f8b0:	08e2      	lsrs	r2, r4, #3
 101f8b2:	08e8      	lsrs	r0, r5, #3
 101f8b4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 101f8b8:	f004 0307 	and.w	r3, r4, #7
 101f8bc:	4605      	mov	r5, r0
 101f8be:	3330      	adds	r3, #48	; 0x30
 101f8c0:	4614      	mov	r4, r2
 101f8c2:	ea54 0005 	orrs.w	r0, r4, r5
 101f8c6:	f801 3c01 	strb.w	r3, [r1, #-1]
 101f8ca:	f101 32ff 	add.w	r2, r1, #4294967295
 101f8ce:	d1ee      	bne.n	101f8ae <_vfprintf_r+0xae6>
 101f8d0:	9e03      	ldr	r6, [sp, #12]
 101f8d2:	920b      	str	r2, [sp, #44]	; 0x2c
 101f8d4:	4630      	mov	r0, r6
 101f8d6:	2b30      	cmp	r3, #48	; 0x30
 101f8d8:	bf0c      	ite	eq
 101f8da:	2000      	moveq	r0, #0
 101f8dc:	f000 0001 	andne.w	r0, r0, #1
 101f8e0:	2800      	cmp	r0, #0
 101f8e2:	f040 829a 	bne.w	101fe1a <_vfprintf_r+0x1052>
 101f8e6:	ab54      	add	r3, sp, #336	; 0x150
 101f8e8:	1a9b      	subs	r3, r3, r2
 101f8ea:	9308      	str	r3, [sp, #32]
 101f8ec:	f7ff bbf8 	b.w	101f0e0 <_vfprintf_r+0x318>
 101f8f0:	aa28      	add	r2, sp, #160	; 0xa0
 101f8f2:	9905      	ldr	r1, [sp, #20]
 101f8f4:	4650      	mov	r0, sl
 101f8f6:	f004 ff31 	bl	102475c <__sprint_r>
 101f8fa:	2800      	cmp	r0, #0
 101f8fc:	f43f ac68 	beq.w	101f1d0 <_vfprintf_r+0x408>
 101f900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101f902:	2b00      	cmp	r3, #0
 101f904:	f43f ab8e 	beq.w	101f024 <_vfprintf_r+0x25c>
 101f908:	990a      	ldr	r1, [sp, #40]	; 0x28
 101f90a:	4650      	mov	r0, sl
 101f90c:	f002 fc78 	bl	1022200 <_free_r>
 101f910:	f7ff bb88 	b.w	101f024 <_vfprintf_r+0x25c>
 101f914:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f916:	3201      	adds	r2, #1
 101f918:	f648 10e8 	movw	r0, #35304	; 0x89e8
 101f91c:	2401      	movs	r4, #1
 101f91e:	3301      	adds	r3, #1
 101f920:	f2c0 1006 	movt	r0, #262	; 0x106
 101f924:	2b07      	cmp	r3, #7
 101f926:	e9c9 0400 	strd	r0, r4, [r9]
 101f92a:	922a      	str	r2, [sp, #168]	; 0xa8
 101f92c:	bfd8      	it	le
 101f92e:	f109 0908 	addle.w	r9, r9, #8
 101f932:	9329      	str	r3, [sp, #164]	; 0xa4
 101f934:	f300 865e 	bgt.w	10205f4 <_vfprintf_r+0x182c>
 101f938:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101f93a:	430b      	orrs	r3, r1
 101f93c:	f000 8685 	beq.w	102064a <_vfprintf_r+0x1882>
 101f940:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101f942:	9815      	ldr	r0, [sp, #84]	; 0x54
 101f944:	3301      	adds	r3, #1
 101f946:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 101f948:	2b07      	cmp	r3, #7
 101f94a:	4402      	add	r2, r0
 101f94c:	f8c9 0004 	str.w	r0, [r9, #4]
 101f950:	f8c9 4000 	str.w	r4, [r9]
 101f954:	bfd8      	it	le
 101f956:	f109 0908 	addle.w	r9, r9, #8
 101f95a:	922a      	str	r2, [sp, #168]	; 0xa8
 101f95c:	9329      	str	r3, [sp, #164]	; 0xa4
 101f95e:	f300 8657 	bgt.w	1020610 <_vfprintf_r+0x1848>
 101f962:	2900      	cmp	r1, #0
 101f964:	f2c0 86cc 	blt.w	1020700 <_vfprintf_r+0x1938>
 101f968:	3301      	adds	r3, #1
 101f96a:	9912      	ldr	r1, [sp, #72]	; 0x48
 101f96c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101f96e:	2b07      	cmp	r3, #7
 101f970:	440a      	add	r2, r1
 101f972:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101f976:	e9c9 0100 	strd	r0, r1, [r9]
 101f97a:	f77f ac14 	ble.w	101f1a6 <_vfprintf_r+0x3de>
 101f97e:	aa28      	add	r2, sp, #160	; 0xa0
 101f980:	9905      	ldr	r1, [sp, #20]
 101f982:	4650      	mov	r0, sl
 101f984:	f004 feea 	bl	102475c <__sprint_r>
 101f988:	2800      	cmp	r0, #0
 101f98a:	d1b9      	bne.n	101f900 <_vfprintf_r+0xb38>
 101f98c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101f98e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101f992:	e40a      	b.n	101f1aa <_vfprintf_r+0x3e2>
 101f994:	9c12      	ldr	r4, [sp, #72]	; 0x48
 101f996:	3201      	adds	r2, #1
 101f998:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101f99a:	f109 0308 	add.w	r3, r9, #8
 101f99e:	2c01      	cmp	r4, #1
 101f9a0:	f100 0101 	add.w	r1, r0, #1
 101f9a4:	f340 812e 	ble.w	101fc04 <_vfprintf_r+0xe3c>
 101f9a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101f9aa:	2907      	cmp	r1, #7
 101f9ac:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f9b0:	f8c9 0000 	str.w	r0, [r9]
 101f9b4:	f04f 0001 	mov.w	r0, #1
 101f9b8:	f8c9 0004 	str.w	r0, [r9, #4]
 101f9bc:	f300 82ab 	bgt.w	101ff16 <_vfprintf_r+0x114e>
 101f9c0:	3101      	adds	r1, #1
 101f9c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 101f9c4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 101f9c6:	2907      	cmp	r1, #7
 101f9c8:	4402      	add	r2, r0
 101f9ca:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101f9ce:	e9c3 4000 	strd	r4, r0, [r3]
 101f9d2:	bfd8      	it	le
 101f9d4:	3308      	addle	r3, #8
 101f9d6:	f300 82aa 	bgt.w	101ff2e <_vfprintf_r+0x1166>
 101f9da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101f9de:	1c48      	adds	r0, r1, #1
 101f9e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 101f9e2:	f103 0908 	add.w	r9, r3, #8
 101f9e6:	4684      	mov	ip, r0
 101f9e8:	3c01      	subs	r4, #1
 101f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101f9ee:	f000 811c 	beq.w	101fc2a <_vfprintf_r+0xe62>
 101f9f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101f9f4:	2807      	cmp	r0, #7
 101f9f6:	4422      	add	r2, r4
 101f9f8:	605c      	str	r4, [r3, #4]
 101f9fa:	f105 0501 	add.w	r5, r5, #1
 101f9fe:	922a      	str	r2, [sp, #168]	; 0xa8
 101fa00:	601d      	str	r5, [r3, #0]
 101fa02:	9029      	str	r0, [sp, #164]	; 0xa4
 101fa04:	f300 8221 	bgt.w	101fe4a <_vfprintf_r+0x1082>
 101fa08:	f103 0410 	add.w	r4, r3, #16
 101fa0c:	1c88      	adds	r0, r1, #2
 101fa0e:	464b      	mov	r3, r9
 101fa10:	46a1      	mov	r9, r4
 101fa12:	9918      	ldr	r1, [sp, #96]	; 0x60
 101fa14:	2807      	cmp	r0, #7
 101fa16:	9029      	str	r0, [sp, #164]	; 0xa4
 101fa18:	440a      	add	r2, r1
 101fa1a:	922a      	str	r2, [sp, #168]	; 0xa8
 101fa1c:	6059      	str	r1, [r3, #4]
 101fa1e:	a922      	add	r1, sp, #136	; 0x88
 101fa20:	6019      	str	r1, [r3, #0]
 101fa22:	f77f abc2 	ble.w	101f1aa <_vfprintf_r+0x3e2>
 101fa26:	e7aa      	b.n	101f97e <_vfprintf_r+0xbb6>
 101fa28:	aa28      	add	r2, sp, #160	; 0xa0
 101fa2a:	9905      	ldr	r1, [sp, #20]
 101fa2c:	4650      	mov	r0, sl
 101fa2e:	f004 fe95 	bl	102475c <__sprint_r>
 101fa32:	2800      	cmp	r0, #0
 101fa34:	f47f af64 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fa38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fa3a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fa3e:	f7ff bb84 	b.w	101f14a <_vfprintf_r+0x382>
 101fa42:	aa28      	add	r2, sp, #160	; 0xa0
 101fa44:	9905      	ldr	r1, [sp, #20]
 101fa46:	4650      	mov	r0, sl
 101fa48:	f004 fe88 	bl	102475c <__sprint_r>
 101fa4c:	2800      	cmp	r0, #0
 101fa4e:	f47f af57 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fa52:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fa54:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fa58:	f7ff bb8a 	b.w	101f170 <_vfprintf_r+0x3a8>
 101fa5c:	2c10      	cmp	r4, #16
 101fa5e:	f246 4508 	movw	r5, #25608	; 0x6408
 101fa62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fa64:	f2c0 1506 	movt	r5, #262	; 0x106
 101fa68:	dd27      	ble.n	101faba <_vfprintf_r+0xcf2>
 101fa6a:	9704      	str	r7, [sp, #16]
 101fa6c:	2610      	movs	r6, #16
 101fa6e:	462f      	mov	r7, r5
 101fa70:	4619      	mov	r1, r3
 101fa72:	9d05      	ldr	r5, [sp, #20]
 101fa74:	e005      	b.n	101fa82 <_vfprintf_r+0xcba>
 101fa76:	bf00      	nop
 101fa78:	01066418 	.word	0x01066418
 101fa7c:	3c10      	subs	r4, #16
 101fa7e:	2c10      	cmp	r4, #16
 101fa80:	dd18      	ble.n	101fab4 <_vfprintf_r+0xcec>
 101fa82:	3101      	adds	r1, #1
 101fa84:	3210      	adds	r2, #16
 101fa86:	2907      	cmp	r1, #7
 101fa88:	e9c9 7600 	strd	r7, r6, [r9]
 101fa8c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fa90:	f109 0908 	add.w	r9, r9, #8
 101fa94:	ddf2      	ble.n	101fa7c <_vfprintf_r+0xcb4>
 101fa96:	aa28      	add	r2, sp, #160	; 0xa0
 101fa98:	4629      	mov	r1, r5
 101fa9a:	4650      	mov	r0, sl
 101fa9c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101faa0:	f004 fe5c 	bl	102475c <__sprint_r>
 101faa4:	2800      	cmp	r0, #0
 101faa6:	f47f af2b 	bne.w	101f900 <_vfprintf_r+0xb38>
 101faaa:	3c10      	subs	r4, #16
 101faac:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101fab0:	2c10      	cmp	r4, #16
 101fab2:	dce6      	bgt.n	101fa82 <_vfprintf_r+0xcba>
 101fab4:	463d      	mov	r5, r7
 101fab6:	9f04      	ldr	r7, [sp, #16]
 101fab8:	460b      	mov	r3, r1
 101faba:	3301      	adds	r3, #1
 101fabc:	4422      	add	r2, r4
 101fabe:	2b07      	cmp	r3, #7
 101fac0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101fac4:	e9c9 5400 	strd	r5, r4, [r9]
 101fac8:	f77f ab77 	ble.w	101f1ba <_vfprintf_r+0x3f2>
 101facc:	aa28      	add	r2, sp, #160	; 0xa0
 101face:	9905      	ldr	r1, [sp, #20]
 101fad0:	4650      	mov	r0, sl
 101fad2:	f004 fe43 	bl	102475c <__sprint_r>
 101fad6:	2800      	cmp	r0, #0
 101fad8:	f47f af12 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fadc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fade:	f7ff bb6c 	b.w	101f1ba <_vfprintf_r+0x3f2>
 101fae2:	ab54      	add	r3, sp, #336	; 0x150
 101fae4:	9204      	str	r2, [sp, #16]
 101fae6:	930b      	str	r3, [sp, #44]	; 0x2c
 101fae8:	9208      	str	r2, [sp, #32]
 101faea:	f7ff baf9 	b.w	101f0e0 <_vfprintf_r+0x318>
 101faee:	991f      	ldr	r1, [sp, #124]	; 0x7c
 101faf0:	2900      	cmp	r1, #0
 101faf2:	f77f af0f 	ble.w	101f914 <_vfprintf_r+0xb4c>
 101faf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101faf8:	9912      	ldr	r1, [sp, #72]	; 0x48
 101fafa:	428b      	cmp	r3, r1
 101fafc:	bfa8      	it	ge
 101fafe:	460b      	movge	r3, r1
 101fb00:	2b00      	cmp	r3, #0
 101fb02:	461c      	mov	r4, r3
 101fb04:	dd0f      	ble.n	101fb26 <_vfprintf_r+0xd5e>
 101fb06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fb08:	4422      	add	r2, r4
 101fb0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101fb0c:	3301      	adds	r3, #1
 101fb0e:	f8c9 4004 	str.w	r4, [r9, #4]
 101fb12:	2b07      	cmp	r3, #7
 101fb14:	922a      	str	r2, [sp, #168]	; 0xa8
 101fb16:	f8c9 1000 	str.w	r1, [r9]
 101fb1a:	bfd8      	it	le
 101fb1c:	f109 0908 	addle.w	r9, r9, #8
 101fb20:	9329      	str	r3, [sp, #164]	; 0xa4
 101fb22:	f300 8441 	bgt.w	10203a8 <_vfprintf_r+0x15e0>
 101fb26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101fb28:	2c00      	cmp	r4, #0
 101fb2a:	bfa8      	it	ge
 101fb2c:	1b1b      	subge	r3, r3, r4
 101fb2e:	2b00      	cmp	r3, #0
 101fb30:	461c      	mov	r4, r3
 101fb32:	f300 81b9 	bgt.w	101fea8 <_vfprintf_r+0x10e0>
 101fb36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101fb38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101fb3a:	440b      	add	r3, r1
 101fb3c:	0571      	lsls	r1, r6, #21
 101fb3e:	461d      	mov	r5, r3
 101fb40:	f100 8389 	bmi.w	1020256 <_vfprintf_r+0x148e>
 101fb44:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 101fb46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101fb48:	429c      	cmp	r4, r3
 101fb4a:	db02      	blt.n	101fb52 <_vfprintf_r+0xd8a>
 101fb4c:	07f3      	lsls	r3, r6, #31
 101fb4e:	f140 8438 	bpl.w	10203c2 <_vfprintf_r+0x15fa>
 101fb52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fb54:	9915      	ldr	r1, [sp, #84]	; 0x54
 101fb56:	3301      	adds	r3, #1
 101fb58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 101fb5a:	2b07      	cmp	r3, #7
 101fb5c:	440a      	add	r2, r1
 101fb5e:	f8c9 1004 	str.w	r1, [r9, #4]
 101fb62:	f8c9 0000 	str.w	r0, [r9]
 101fb66:	bfd8      	it	le
 101fb68:	f109 0908 	addle.w	r9, r9, #8
 101fb6c:	922a      	str	r2, [sp, #168]	; 0xa8
 101fb6e:	9329      	str	r3, [sp, #164]	; 0xa4
 101fb70:	f300 857f 	bgt.w	1020672 <_vfprintf_r+0x18aa>
 101fb74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101fb76:	4619      	mov	r1, r3
 101fb78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 101fb7a:	4419      	add	r1, r3
 101fb7c:	1b1b      	subs	r3, r3, r4
 101fb7e:	1b4c      	subs	r4, r1, r5
 101fb80:	429c      	cmp	r4, r3
 101fb82:	bfa8      	it	ge
 101fb84:	461c      	movge	r4, r3
 101fb86:	2c00      	cmp	r4, #0
 101fb88:	dd0e      	ble.n	101fba8 <_vfprintf_r+0xde0>
 101fb8a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101fb8c:	4422      	add	r2, r4
 101fb8e:	f8c9 5000 	str.w	r5, [r9]
 101fb92:	3101      	adds	r1, #1
 101fb94:	f8c9 4004 	str.w	r4, [r9, #4]
 101fb98:	2907      	cmp	r1, #7
 101fb9a:	922a      	str	r2, [sp, #168]	; 0xa8
 101fb9c:	9129      	str	r1, [sp, #164]	; 0xa4
 101fb9e:	bfd8      	it	le
 101fba0:	f109 0908 	addle.w	r9, r9, #8
 101fba4:	f300 8573 	bgt.w	102068e <_vfprintf_r+0x18c6>
 101fba8:	2c00      	cmp	r4, #0
 101fbaa:	bfac      	ite	ge
 101fbac:	1b1c      	subge	r4, r3, r4
 101fbae:	461c      	movlt	r4, r3
 101fbb0:	2c00      	cmp	r4, #0
 101fbb2:	f77f aafa 	ble.w	101f1aa <_vfprintf_r+0x3e2>
 101fbb6:	2c10      	cmp	r4, #16
 101fbb8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101fbba:	f340 81a1 	ble.w	101ff00 <_vfprintf_r+0x1138>
 101fbbe:	9604      	str	r6, [sp, #16]
 101fbc0:	2510      	movs	r5, #16
 101fbc2:	4626      	mov	r6, r4
 101fbc4:	4619      	mov	r1, r3
 101fbc6:	9c05      	ldr	r4, [sp, #20]
 101fbc8:	e003      	b.n	101fbd2 <_vfprintf_r+0xe0a>
 101fbca:	3e10      	subs	r6, #16
 101fbcc:	2e10      	cmp	r6, #16
 101fbce:	f340 8194 	ble.w	101fefa <_vfprintf_r+0x1132>
 101fbd2:	3101      	adds	r1, #1
 101fbd4:	4bb9      	ldr	r3, [pc, #740]	; (101febc <_vfprintf_r+0x10f4>)
 101fbd6:	2907      	cmp	r1, #7
 101fbd8:	f102 0210 	add.w	r2, r2, #16
 101fbdc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fbe0:	e9c9 3500 	strd	r3, r5, [r9]
 101fbe4:	f109 0908 	add.w	r9, r9, #8
 101fbe8:	ddef      	ble.n	101fbca <_vfprintf_r+0xe02>
 101fbea:	aa28      	add	r2, sp, #160	; 0xa0
 101fbec:	4621      	mov	r1, r4
 101fbee:	4650      	mov	r0, sl
 101fbf0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fbf4:	f004 fdb2 	bl	102475c <__sprint_r>
 101fbf8:	2800      	cmp	r0, #0
 101fbfa:	f47f ae81 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fbfe:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101fc02:	e7e2      	b.n	101fbca <_vfprintf_r+0xe02>
 101fc04:	07f4      	lsls	r4, r6, #31
 101fc06:	f53f aecf 	bmi.w	101f9a8 <_vfprintf_r+0xbe0>
 101fc0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 101fc0c:	2907      	cmp	r1, #7
 101fc0e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fc12:	f8c9 4000 	str.w	r4, [r9]
 101fc16:	f04f 0401 	mov.w	r4, #1
 101fc1a:	f8c9 4004 	str.w	r4, [r9, #4]
 101fc1e:	f300 8114 	bgt.w	101fe4a <_vfprintf_r+0x1082>
 101fc22:	3002      	adds	r0, #2
 101fc24:	f109 0910 	add.w	r9, r9, #16
 101fc28:	e6f3      	b.n	101fa12 <_vfprintf_r+0xc4a>
 101fc2a:	2c00      	cmp	r4, #0
 101fc2c:	f77f aef1 	ble.w	101fa12 <_vfprintf_r+0xc4a>
 101fc30:	2c10      	cmp	r4, #16
 101fc32:	f340 8672 	ble.w	102091a <_vfprintf_r+0x1b52>
 101fc36:	2510      	movs	r5, #16
 101fc38:	f8dd 9014 	ldr.w	r9, [sp, #20]
 101fc3c:	e005      	b.n	101fc4a <_vfprintf_r+0xe82>
 101fc3e:	3c10      	subs	r4, #16
 101fc40:	f101 0c01 	add.w	ip, r1, #1
 101fc44:	2c10      	cmp	r4, #16
 101fc46:	f340 80f4 	ble.w	101fe32 <_vfprintf_r+0x106a>
 101fc4a:	489c      	ldr	r0, [pc, #624]	; (101febc <_vfprintf_r+0x10f4>)
 101fc4c:	4661      	mov	r1, ip
 101fc4e:	2907      	cmp	r1, #7
 101fc50:	f102 0210 	add.w	r2, r2, #16
 101fc54:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 101fc58:	e9c3 0500 	strd	r0, r5, [r3]
 101fc5c:	f103 0308 	add.w	r3, r3, #8
 101fc60:	dded      	ble.n	101fc3e <_vfprintf_r+0xe76>
 101fc62:	aa28      	add	r2, sp, #160	; 0xa0
 101fc64:	4649      	mov	r1, r9
 101fc66:	4650      	mov	r0, sl
 101fc68:	f004 fd78 	bl	102475c <__sprint_r>
 101fc6c:	ab2b      	add	r3, sp, #172	; 0xac
 101fc6e:	2800      	cmp	r0, #0
 101fc70:	f47f ae46 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fc74:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101fc78:	e7e1      	b.n	101fc3e <_vfprintf_r+0xe76>
 101fc7a:	07f4      	lsls	r4, r6, #31
 101fc7c:	bf58      	it	pl
 101fc7e:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 101fc80:	f57f aa93 	bpl.w	101f1aa <_vfprintf_r+0x3e2>
 101fc84:	e54d      	b.n	101f722 <_vfprintf_r+0x95a>
 101fc86:	9906      	ldr	r1, [sp, #24]
 101fc88:	6812      	ldr	r2, [r2, #0]
 101fc8a:	9309      	str	r3, [sp, #36]	; 0x24
 101fc8c:	17cd      	asrs	r5, r1, #31
 101fc8e:	4608      	mov	r0, r1
 101fc90:	4629      	mov	r1, r5
 101fc92:	e9c2 0100 	strd	r0, r1, [r2]
 101fc96:	f7ff b8f3 	b.w	101ee80 <_vfprintf_r+0xb8>
 101fc9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101fc9c:	06f1      	lsls	r1, r6, #27
 101fc9e:	f852 4b04 	ldr.w	r4, [r2], #4
 101fca2:	f100 865b 	bmi.w	102095c <_vfprintf_r+0x1b94>
 101fca6:	0673      	lsls	r3, r6, #25
 101fca8:	f140 81f9 	bpl.w	102009e <_vfprintf_r+0x12d6>
 101fcac:	4633      	mov	r3, r6
 101fcae:	9209      	str	r2, [sp, #36]	; 0x24
 101fcb0:	b2a4      	uxth	r4, r4
 101fcb2:	2500      	movs	r5, #0
 101fcb4:	e4b6      	b.n	101f624 <_vfprintf_r+0x85c>
 101fcb6:	eeb4 8b48 	vcmp.f64	d8, d8
 101fcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101fcbe:	f180 85d6 	bvs.w	102086e <_vfprintf_r+0x1aa6>
 101fcc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 101fcc4:	f023 0420 	bic.w	r4, r3, #32
 101fcc8:	2c41      	cmp	r4, #65	; 0x41
 101fcca:	f040 81f4 	bne.w	10200b6 <_vfprintf_r+0x12ee>
 101fcce:	2b61      	cmp	r3, #97	; 0x61
 101fcd0:	f04f 0230 	mov.w	r2, #48	; 0x30
 101fcd4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 101fcd8:	bf0c      	ite	eq
 101fcda:	2378      	moveq	r3, #120	; 0x78
 101fcdc:	2358      	movne	r3, #88	; 0x58
 101fcde:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 101fce2:	9b04      	ldr	r3, [sp, #16]
 101fce4:	2b63      	cmp	r3, #99	; 0x63
 101fce6:	f300 839e 	bgt.w	1020426 <_vfprintf_r+0x165e>
 101fcea:	2300      	movs	r3, #0
 101fcec:	930a      	str	r3, [sp, #40]	; 0x28
 101fcee:	ab3b      	add	r3, sp, #236	; 0xec
 101fcf0:	930b      	str	r3, [sp, #44]	; 0x2c
 101fcf2:	ee18 3a90 	vmov	r3, s17
 101fcf6:	2b00      	cmp	r3, #0
 101fcf8:	f280 8523 	bge.w	1020742 <_vfprintf_r+0x197a>
 101fcfc:	eeb1 0b48 	vneg.f64	d0, d8
 101fd00:	232d      	movs	r3, #45	; 0x2d
 101fd02:	930c      	str	r3, [sp, #48]	; 0x30
 101fd04:	a81f      	add	r0, sp, #124	; 0x7c
 101fd06:	f003 fd1f 	bl	1023748 <frexp>
 101fd0a:	9a04      	ldr	r2, [sp, #16]
 101fd0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 101fd0e:	f24a 405c 	movw	r0, #42076	; 0xa45c
 101fd12:	f2c0 1006 	movt	r0, #262	; 0x106
 101fd16:	3a01      	subs	r2, #1
 101fd18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101fd1a:	ee20 0b0b 	vmul.f64	d0, d0, d11
 101fd1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 101fd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101fd26:	bf04      	itt	eq
 101fd28:	2301      	moveq	r3, #1
 101fd2a:	931f      	streq	r3, [sp, #124]	; 0x7c
 101fd2c:	f24a 13dc 	movw	r3, #41436	; 0xa1dc
 101fd30:	f2c0 1306 	movt	r3, #262	; 0x106
 101fd34:	2961      	cmp	r1, #97	; 0x61
 101fd36:	bf18      	it	ne
 101fd38:	4618      	movne	r0, r3
 101fd3a:	e005      	b.n	101fd48 <_vfprintf_r+0xf80>
 101fd3c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 101fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101fd44:	d015      	beq.n	101fd72 <_vfprintf_r+0xfaa>
 101fd46:	461d      	mov	r5, r3
 101fd48:	ee20 0b09 	vmul.f64	d0, d0, d9
 101fd4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 101fd50:	462b      	mov	r3, r5
 101fd52:	4611      	mov	r1, r2
 101fd54:	f102 32ff 	add.w	r2, r2, #4294967295
 101fd58:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 101fd5c:	ee17 ca90 	vmov	ip, s15
 101fd60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 101fd64:	ee30 0b46 	vsub.f64	d0, d0, d6
 101fd68:	f810 c00c 	ldrb.w	ip, [r0, ip]
 101fd6c:	f803 cb01 	strb.w	ip, [r3], #1
 101fd70:	d1e4      	bne.n	101fd3c <_vfprintf_r+0xf74>
 101fd72:	eeb4 0bca 	vcmpe.f64	d0, d10
 101fd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101fd7a:	f300 852b 	bgt.w	10207d4 <_vfprintf_r+0x1a0c>
 101fd7e:	eeb4 0b4a 	vcmp.f64	d0, d10
 101fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101fd86:	d104      	bne.n	101fd92 <_vfprintf_r+0xfca>
 101fd88:	ee17 2a90 	vmov	r2, s15
 101fd8c:	07d2      	lsls	r2, r2, #31
 101fd8e:	f100 8521 	bmi.w	10207d4 <_vfprintf_r+0x1a0c>
 101fd92:	2900      	cmp	r1, #0
 101fd94:	bfa2      	ittt	ge
 101fd96:	1c4a      	addge	r2, r1, #1
 101fd98:	18d2      	addge	r2, r2, r3
 101fd9a:	2130      	movge	r1, #48	; 0x30
 101fd9c:	db03      	blt.n	101fda6 <_vfprintf_r+0xfde>
 101fd9e:	f803 1b01 	strb.w	r1, [r3], #1
 101fda2:	4293      	cmp	r3, r2
 101fda4:	d1fb      	bne.n	101fd9e <_vfprintf_r+0xfd6>
 101fda6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101fda8:	f046 0602 	orr.w	r6, r6, #2
 101fdac:	1a9b      	subs	r3, r3, r2
 101fdae:	9312      	str	r3, [sp, #72]	; 0x48
 101fdb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101fdb2:	9310      	str	r3, [sp, #64]	; 0x40
 101fdb4:	e1c3      	b.n	102013e <_vfprintf_r+0x1376>
 101fdb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101fdb8:	06f1      	lsls	r1, r6, #27
 101fdba:	f852 4b04 	ldr.w	r4, [r2], #4
 101fdbe:	f100 85be 	bmi.w	102093e <_vfprintf_r+0x1b76>
 101fdc2:	0673      	lsls	r3, r6, #25
 101fdc4:	9209      	str	r2, [sp, #36]	; 0x24
 101fdc6:	9603      	str	r6, [sp, #12]
 101fdc8:	f140 815d 	bpl.w	1020086 <_vfprintf_r+0x12be>
 101fdcc:	b2a4      	uxth	r4, r4
 101fdce:	2500      	movs	r5, #0
 101fdd0:	2301      	movs	r3, #1
 101fdd2:	f7ff b95e 	b.w	101f092 <_vfprintf_r+0x2ca>
 101fdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101fdd8:	06f4      	lsls	r4, r6, #27
 101fdda:	f103 0204 	add.w	r2, r3, #4
 101fdde:	f100 85c0 	bmi.w	1020962 <_vfprintf_r+0x1b9a>
 101fde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101fde4:	0670      	lsls	r0, r6, #25
 101fde6:	bf48      	it	mi
 101fde8:	f9b3 4000 	ldrshmi.w	r4, [r3]
 101fdec:	d404      	bmi.n	101fdf8 <_vfprintf_r+0x1030>
 101fdee:	05b1      	lsls	r1, r6, #22
 101fdf0:	f140 82f9 	bpl.w	10203e6 <_vfprintf_r+0x161e>
 101fdf4:	f993 4000 	ldrsb.w	r4, [r3]
 101fdf8:	17e5      	asrs	r5, r4, #31
 101fdfa:	9209      	str	r2, [sp, #36]	; 0x24
 101fdfc:	9603      	str	r6, [sp, #12]
 101fdfe:	4622      	mov	r2, r4
 101fe00:	462b      	mov	r3, r5
 101fe02:	f7ff baff 	b.w	101f404 <_vfprintf_r+0x63c>
 101fe06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101fe08:	2201      	movs	r2, #1
 101fe0a:	ac3b      	add	r4, sp, #236	; 0xec
 101fe0c:	9203      	str	r2, [sp, #12]
 101fe0e:	9208      	str	r2, [sp, #32]
 101fe10:	681b      	ldr	r3, [r3, #0]
 101fe12:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 101fe16:	f7ff bbed 	b.w	101f5f4 <_vfprintf_r+0x82c>
 101fe1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101fe1c:	3902      	subs	r1, #2
 101fe1e:	2330      	movs	r3, #48	; 0x30
 101fe20:	9e03      	ldr	r6, [sp, #12]
 101fe22:	910b      	str	r1, [sp, #44]	; 0x2c
 101fe24:	f802 3c01 	strb.w	r3, [r2, #-1]
 101fe28:	ab54      	add	r3, sp, #336	; 0x150
 101fe2a:	1a5b      	subs	r3, r3, r1
 101fe2c:	9308      	str	r3, [sp, #32]
 101fe2e:	f7ff b957 	b.w	101f0e0 <_vfprintf_r+0x318>
 101fe32:	f103 0108 	add.w	r1, r3, #8
 101fe36:	4660      	mov	r0, ip
 101fe38:	4d20      	ldr	r5, [pc, #128]	; (101febc <_vfprintf_r+0x10f4>)
 101fe3a:	2807      	cmp	r0, #7
 101fe3c:	4422      	add	r2, r4
 101fe3e:	605c      	str	r4, [r3, #4]
 101fe40:	922a      	str	r2, [sp, #168]	; 0xa8
 101fe42:	601d      	str	r5, [r3, #0]
 101fe44:	9029      	str	r0, [sp, #164]	; 0xa4
 101fe46:	f340 829d 	ble.w	1020384 <_vfprintf_r+0x15bc>
 101fe4a:	aa28      	add	r2, sp, #160	; 0xa0
 101fe4c:	9905      	ldr	r1, [sp, #20]
 101fe4e:	4650      	mov	r0, sl
 101fe50:	f004 fc84 	bl	102475c <__sprint_r>
 101fe54:	2800      	cmp	r0, #0
 101fe56:	f47f ad53 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fe5a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101fe5c:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 101fe60:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fe62:	ab2b      	add	r3, sp, #172	; 0xac
 101fe64:	3001      	adds	r0, #1
 101fe66:	e5d4      	b.n	101fa12 <_vfprintf_r+0xc4a>
 101fe68:	aa28      	add	r2, sp, #160	; 0xa0
 101fe6a:	9905      	ldr	r1, [sp, #20]
 101fe6c:	4650      	mov	r0, sl
 101fe6e:	f004 fc75 	bl	102475c <__sprint_r>
 101fe72:	2800      	cmp	r0, #0
 101fe74:	f47f ad44 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fe78:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101fe7a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101fe7e:	e462      	b.n	101f746 <_vfprintf_r+0x97e>
 101fe80:	9804      	ldr	r0, [sp, #16]
 101fe82:	f24a 4370 	movw	r3, #42096	; 0xa470
 101fe86:	9204      	str	r2, [sp, #16]
 101fe88:	f2c0 1306 	movt	r3, #262	; 0x106
 101fe8c:	2806      	cmp	r0, #6
 101fe8e:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 101fe92:	4611      	mov	r1, r2
 101fe94:	9213      	str	r2, [sp, #76]	; 0x4c
 101fe96:	bf28      	it	cs
 101fe98:	2006      	movcs	r0, #6
 101fe9a:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101fe9e:	9003      	str	r0, [sp, #12]
 101fea0:	9008      	str	r0, [sp, #32]
 101fea2:	930b      	str	r3, [sp, #44]	; 0x2c
 101fea4:	f7ff b929 	b.w	101f0fa <_vfprintf_r+0x332>
 101fea8:	2c10      	cmp	r4, #16
 101feaa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101feac:	f340 81ba 	ble.w	1020224 <_vfprintf_r+0x145c>
 101feb0:	9604      	str	r6, [sp, #16]
 101feb2:	2510      	movs	r5, #16
 101feb4:	4626      	mov	r6, r4
 101feb6:	4619      	mov	r1, r3
 101feb8:	9c05      	ldr	r4, [sp, #20]
 101feba:	e005      	b.n	101fec8 <_vfprintf_r+0x1100>
 101febc:	01066418 	.word	0x01066418
 101fec0:	3e10      	subs	r6, #16
 101fec2:	2e10      	cmp	r6, #16
 101fec4:	f340 81ab 	ble.w	102021e <_vfprintf_r+0x1456>
 101fec8:	3101      	adds	r1, #1
 101feca:	4bbc      	ldr	r3, [pc, #752]	; (10201bc <_vfprintf_r+0x13f4>)
 101fecc:	2907      	cmp	r1, #7
 101fece:	f102 0210 	add.w	r2, r2, #16
 101fed2:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101fed6:	e9c9 3500 	strd	r3, r5, [r9]
 101feda:	f109 0908 	add.w	r9, r9, #8
 101fede:	ddef      	ble.n	101fec0 <_vfprintf_r+0x10f8>
 101fee0:	aa28      	add	r2, sp, #160	; 0xa0
 101fee2:	4621      	mov	r1, r4
 101fee4:	4650      	mov	r0, sl
 101fee6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101feea:	f004 fc37 	bl	102475c <__sprint_r>
 101feee:	2800      	cmp	r0, #0
 101fef0:	f47f ad06 	bne.w	101f900 <_vfprintf_r+0xb38>
 101fef4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101fef8:	e7e2      	b.n	101fec0 <_vfprintf_r+0x10f8>
 101fefa:	4634      	mov	r4, r6
 101fefc:	9e04      	ldr	r6, [sp, #16]
 101fefe:	460b      	mov	r3, r1
 101ff00:	3301      	adds	r3, #1
 101ff02:	49ae      	ldr	r1, [pc, #696]	; (10201bc <_vfprintf_r+0x13f4>)
 101ff04:	2b07      	cmp	r3, #7
 101ff06:	4422      	add	r2, r4
 101ff08:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101ff0c:	e9c9 1400 	strd	r1, r4, [r9]
 101ff10:	f77f a949 	ble.w	101f1a6 <_vfprintf_r+0x3de>
 101ff14:	e533      	b.n	101f97e <_vfprintf_r+0xbb6>
 101ff16:	aa28      	add	r2, sp, #160	; 0xa0
 101ff18:	9905      	ldr	r1, [sp, #20]
 101ff1a:	4650      	mov	r0, sl
 101ff1c:	f004 fc1e 	bl	102475c <__sprint_r>
 101ff20:	2800      	cmp	r0, #0
 101ff22:	f47f aced 	bne.w	101f900 <_vfprintf_r+0xb38>
 101ff26:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101ff28:	ab2b      	add	r3, sp, #172	; 0xac
 101ff2a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101ff2c:	e548      	b.n	101f9c0 <_vfprintf_r+0xbf8>
 101ff2e:	aa28      	add	r2, sp, #160	; 0xa0
 101ff30:	9905      	ldr	r1, [sp, #20]
 101ff32:	4650      	mov	r0, sl
 101ff34:	f004 fc12 	bl	102475c <__sprint_r>
 101ff38:	2800      	cmp	r0, #0
 101ff3a:	f47f ace1 	bne.w	101f900 <_vfprintf_r+0xb38>
 101ff3e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101ff40:	ab2b      	add	r3, sp, #172	; 0xac
 101ff42:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101ff44:	e549      	b.n	101f9da <_vfprintf_r+0xc12>
 101ff46:	9603      	str	r6, [sp, #12]
 101ff48:	f7ff bb17 	b.w	101f57a <_vfprintf_r+0x7b2>
 101ff4c:	aa28      	add	r2, sp, #160	; 0xa0
 101ff4e:	9905      	ldr	r1, [sp, #20]
 101ff50:	4650      	mov	r0, sl
 101ff52:	f004 fc03 	bl	102475c <__sprint_r>
 101ff56:	2800      	cmp	r0, #0
 101ff58:	f47f acd2 	bne.w	101f900 <_vfprintf_r+0xb38>
 101ff5c:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 101ff60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ff64:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101ff66:	f7ff b8dd 	b.w	101f124 <_vfprintf_r+0x35c>
 101ff6a:	aa28      	add	r2, sp, #160	; 0xa0
 101ff6c:	9905      	ldr	r1, [sp, #20]
 101ff6e:	4650      	mov	r0, sl
 101ff70:	f004 fbf4 	bl	102475c <__sprint_r>
 101ff74:	2800      	cmp	r0, #0
 101ff76:	f47f acc3 	bne.w	101f900 <_vfprintf_r+0xb38>
 101ff7a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101ff7e:	f7ff bbcb 	b.w	101f718 <_vfprintf_r+0x950>
 101ff82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101ff84:	2208      	movs	r2, #8
 101ff86:	2100      	movs	r1, #0
 101ff88:	a826      	add	r0, sp, #152	; 0x98
 101ff8a:	9321      	str	r3, [sp, #132]	; 0x84
 101ff8c:	f7fc f890 	bl	101c0b0 <memset>
 101ff90:	9b04      	ldr	r3, [sp, #16]
 101ff92:	1c5a      	adds	r2, r3, #1
 101ff94:	f000 81b6 	beq.w	1020304 <_vfprintf_r+0x153c>
 101ff98:	2400      	movs	r4, #0
 101ff9a:	9603      	str	r6, [sp, #12]
 101ff9c:	f8cd 9010 	str.w	r9, [sp, #16]
 101ffa0:	4626      	mov	r6, r4
 101ffa2:	4699      	mov	r9, r3
 101ffa4:	9509      	str	r5, [sp, #36]	; 0x24
 101ffa6:	e009      	b.n	101ffbc <_vfprintf_r+0x11f4>
 101ffa8:	f000 fd68 	bl	1020a7c <_wcrtomb_r>
 101ffac:	1833      	adds	r3, r6, r0
 101ffae:	3001      	adds	r0, #1
 101ffb0:	f000 83ea 	beq.w	1020788 <_vfprintf_r+0x19c0>
 101ffb4:	454b      	cmp	r3, r9
 101ffb6:	dc0a      	bgt.n	101ffce <_vfprintf_r+0x1206>
 101ffb8:	461e      	mov	r6, r3
 101ffba:	d008      	beq.n	101ffce <_vfprintf_r+0x1206>
 101ffbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101ffbe:	ab26      	add	r3, sp, #152	; 0x98
 101ffc0:	a93b      	add	r1, sp, #236	; 0xec
 101ffc2:	4650      	mov	r0, sl
 101ffc4:	5915      	ldr	r5, [r2, r4]
 101ffc6:	3404      	adds	r4, #4
 101ffc8:	462a      	mov	r2, r5
 101ffca:	2d00      	cmp	r5, #0
 101ffcc:	d1ec      	bne.n	101ffa8 <_vfprintf_r+0x11e0>
 101ffce:	9608      	str	r6, [sp, #32]
 101ffd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 101ffd2:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 101ffd6:	e1a3      	b.n	1020320 <_vfprintf_r+0x1558>
 101ffd8:	9b03      	ldr	r3, [sp, #12]
 101ffda:	2200      	movs	r2, #0
 101ffdc:	f8cd 9020 	str.w	r9, [sp, #32]
 101ffe0:	ae54      	add	r6, sp, #336	; 0x150
 101ffe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 101ffe6:	970c      	str	r7, [sp, #48]	; 0x30
 101ffe8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 101ffec:	4691      	mov	r9, r2
 101ffee:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 101fff2:	461f      	mov	r7, r3
 101fff4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 101fff8:	e008      	b.n	102000c <_vfprintf_r+0x1244>
 101fffa:	f7fa f8e5 	bl	101a1c8 <__aeabi_uldivmod>
 101fffe:	2d00      	cmp	r5, #0
 1020000:	bf08      	it	eq
 1020002:	2c0a      	cmpeq	r4, #10
 1020004:	d329      	bcc.n	102005a <_vfprintf_r+0x1292>
 1020006:	4604      	mov	r4, r0
 1020008:	4656      	mov	r6, sl
 102000a:	460d      	mov	r5, r1
 102000c:	220a      	movs	r2, #10
 102000e:	2300      	movs	r3, #0
 1020010:	4620      	mov	r0, r4
 1020012:	4629      	mov	r1, r5
 1020014:	f7fa f8d8 	bl	101a1c8 <__aeabi_uldivmod>
 1020018:	f109 0901 	add.w	r9, r9, #1
 102001c:	4620      	mov	r0, r4
 102001e:	4629      	mov	r1, r5
 1020020:	f106 3aff 	add.w	sl, r6, #4294967295
 1020024:	2300      	movs	r3, #0
 1020026:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 102002a:	220a      	movs	r2, #10
 102002c:	f806 cc01 	strb.w	ip, [r6, #-1]
 1020030:	2f00      	cmp	r7, #0
 1020032:	d0e2      	beq.n	101fffa <_vfprintf_r+0x1232>
 1020034:	f898 6000 	ldrb.w	r6, [r8]
 1020038:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 102003c:	bf18      	it	ne
 102003e:	f04f 0c01 	movne.w	ip, #1
 1020042:	454e      	cmp	r6, r9
 1020044:	bf18      	it	ne
 1020046:	f04f 0c00 	movne.w	ip, #0
 102004a:	f1bc 0f00 	cmp.w	ip, #0
 102004e:	d0d4      	beq.n	101fffa <_vfprintf_r+0x1232>
 1020050:	429d      	cmp	r5, r3
 1020052:	bf08      	it	eq
 1020054:	4294      	cmpeq	r4, r2
 1020056:	f080 833e 	bcs.w	10206d6 <_vfprintf_r+0x190e>
 102005a:	4652      	mov	r2, sl
 102005c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 1020060:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 1020064:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 1020068:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 102006c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 1020070:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 1020074:	9e03      	ldr	r6, [sp, #12]
 1020076:	e436      	b.n	101f8e6 <_vfprintf_r+0xb1e>
 1020078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102007a:	6812      	ldr	r2, [r2, #0]
 102007c:	9309      	str	r3, [sp, #36]	; 0x24
 102007e:	9b06      	ldr	r3, [sp, #24]
 1020080:	6013      	str	r3, [r2, #0]
 1020082:	f7fe befd 	b.w	101ee80 <_vfprintf_r+0xb8>
 1020086:	05b5      	lsls	r5, r6, #22
 1020088:	f04f 0301 	mov.w	r3, #1
 102008c:	bf48      	it	mi
 102008e:	b2e4      	uxtbmi	r4, r4
 1020090:	2500      	movs	r5, #0
 1020092:	f7fe bffe 	b.w	101f092 <_vfprintf_r+0x2ca>
 1020096:	4634      	mov	r4, r6
 1020098:	460b      	mov	r3, r1
 102009a:	9e04      	ldr	r6, [sp, #16]
 102009c:	e730      	b.n	101ff00 <_vfprintf_r+0x1138>
 102009e:	05b5      	lsls	r5, r6, #22
 10200a0:	bf45      	ittet	mi
 10200a2:	9209      	strmi	r2, [sp, #36]	; 0x24
 10200a4:	b2e4      	uxtbmi	r4, r4
 10200a6:	9209      	strpl	r2, [sp, #36]	; 0x24
 10200a8:	4633      	movmi	r3, r6
 10200aa:	bf4e      	itee	mi
 10200ac:	2500      	movmi	r5, #0
 10200ae:	2500      	movpl	r5, #0
 10200b0:	4633      	movpl	r3, r6
 10200b2:	f7ff bab7 	b.w	101f624 <_vfprintf_r+0x85c>
 10200b6:	9b04      	ldr	r3, [sp, #16]
 10200b8:	1c5a      	adds	r2, r3, #1
 10200ba:	f000 81bf 	beq.w	102043c <_vfprintf_r+0x1674>
 10200be:	2b00      	cmp	r3, #0
 10200c0:	bf08      	it	eq
 10200c2:	2c47      	cmpeq	r4, #71	; 0x47
 10200c4:	f040 81bc 	bne.w	1020440 <_vfprintf_r+0x1678>
 10200c8:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 10200cc:	930d      	str	r3, [sp, #52]	; 0x34
 10200ce:	ee18 3a90 	vmov	r3, s17
 10200d2:	2b00      	cmp	r3, #0
 10200d4:	f04f 0301 	mov.w	r3, #1
 10200d8:	9304      	str	r3, [sp, #16]
 10200da:	f2c0 83ed 	blt.w	10208b8 <_vfprintf_r+0x1af0>
 10200de:	eeb0 cb48 	vmov.f64	d12, d8
 10200e2:	461d      	mov	r5, r3
 10200e4:	2300      	movs	r3, #0
 10200e6:	930c      	str	r3, [sp, #48]	; 0x30
 10200e8:	ab26      	add	r3, sp, #152	; 0x98
 10200ea:	aa21      	add	r2, sp, #132	; 0x84
 10200ec:	9301      	str	r3, [sp, #4]
 10200ee:	2102      	movs	r1, #2
 10200f0:	9200      	str	r2, [sp, #0]
 10200f2:	ab1f      	add	r3, sp, #124	; 0x7c
 10200f4:	462a      	mov	r2, r5
 10200f6:	eeb0 0b4c 	vmov.f64	d0, d12
 10200fa:	4650      	mov	r0, sl
 10200fc:	f000 ffc8 	bl	1021090 <_dtoa_r>
 1020100:	2c47      	cmp	r4, #71	; 0x47
 1020102:	900b      	str	r0, [sp, #44]	; 0x2c
 1020104:	f040 81cc 	bne.w	10204a0 <_vfprintf_r+0x16d8>
 1020108:	07f3      	lsls	r3, r6, #31
 102010a:	f100 81c9 	bmi.w	10204a0 <_vfprintf_r+0x16d8>
 102010e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1020110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1020112:	2c47      	cmp	r4, #71	; 0x47
 1020114:	eba3 0302 	sub.w	r3, r3, r2
 1020118:	9312      	str	r3, [sp, #72]	; 0x48
 102011a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 102011c:	9310      	str	r3, [sp, #64]	; 0x40
 102011e:	f040 8247 	bne.w	10205b0 <_vfprintf_r+0x17e8>
 1020122:	9a04      	ldr	r2, [sp, #16]
 1020124:	f113 0f03 	cmn.w	r3, #3
 1020128:	bfa8      	it	ge
 102012a:	429a      	cmpge	r2, r3
 102012c:	f280 8222 	bge.w	1020574 <_vfprintf_r+0x17ac>
 1020130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1020132:	2200      	movs	r2, #0
 1020134:	920a      	str	r2, [sp, #40]	; 0x28
 1020136:	3b02      	subs	r3, #2
 1020138:	930e      	str	r3, [sp, #56]	; 0x38
 102013a:	f023 0420 	bic.w	r4, r3, #32
 102013e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1020140:	2c41      	cmp	r4, #65	; 0x41
 1020142:	f103 32ff 	add.w	r2, r3, #4294967295
 1020146:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 102014a:	921f      	str	r2, [sp, #124]	; 0x7c
 102014c:	bf04      	itt	eq
 102014e:	330f      	addeq	r3, #15
 1020150:	b2db      	uxtbeq	r3, r3
 1020152:	2a00      	cmp	r2, #0
 1020154:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 1020158:	bfb7      	itett	lt
 102015a:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 102015c:	232b      	movge	r3, #43	; 0x2b
 102015e:	f1c3 0201 	rsblt	r2, r3, #1
 1020162:	232d      	movlt	r3, #45	; 0x2d
 1020164:	2a09      	cmp	r2, #9
 1020166:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 102016a:	f340 8393 	ble.w	1020894 <_vfprintf_r+0x1acc>
 102016e:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 1020172:	f246 6567 	movw	r5, #26215	; 0x6667
 1020176:	f04f 0e0a 	mov.w	lr, #10
 102017a:	f2c6 6566 	movt	r5, #26214	; 0x6666
 102017e:	4664      	mov	r4, ip
 1020180:	e000      	b.n	1020184 <_vfprintf_r+0x13bc>
 1020182:	460c      	mov	r4, r1
 1020184:	fb85 3002 	smull	r3, r0, r5, r2
 1020188:	17d3      	asrs	r3, r2, #31
 102018a:	2a63      	cmp	r2, #99	; 0x63
 102018c:	f104 31ff 	add.w	r1, r4, #4294967295
 1020190:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 1020194:	fb0e 2013 	mls	r0, lr, r3, r2
 1020198:	461a      	mov	r2, r3
 102019a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 102019e:	f804 0c01 	strb.w	r0, [r4, #-1]
 10201a2:	dcee      	bgt.n	1020182 <_vfprintf_r+0x13ba>
 10201a4:	1ea2      	subs	r2, r4, #2
 10201a6:	3330      	adds	r3, #48	; 0x30
 10201a8:	4594      	cmp	ip, r2
 10201aa:	b2db      	uxtb	r3, r3
 10201ac:	f801 3c01 	strb.w	r3, [r1, #-1]
 10201b0:	f240 83c2 	bls.w	1020938 <_vfprintf_r+0x1b70>
 10201b4:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 10201b8:	e004      	b.n	10201c4 <_vfprintf_r+0x13fc>
 10201ba:	bf00      	nop
 10201bc:	01066418 	.word	0x01066418
 10201c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 10201c4:	4561      	cmp	r1, ip
 10201c6:	f802 3b01 	strb.w	r3, [r2], #1
 10201ca:	d1f9      	bne.n	10201c0 <_vfprintf_r+0x13f8>
 10201cc:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 10201d0:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 10201d4:	1b1b      	subs	r3, r3, r4
 10201d6:	aa22      	add	r2, sp, #136	; 0x88
 10201d8:	440b      	add	r3, r1
 10201da:	1a9b      	subs	r3, r3, r2
 10201dc:	9318      	str	r3, [sp, #96]	; 0x60
 10201de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10201e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 10201e2:	2b01      	cmp	r3, #1
 10201e4:	441a      	add	r2, r3
 10201e6:	9208      	str	r2, [sp, #32]
 10201e8:	f340 8376 	ble.w	10208d8 <_vfprintf_r+0x1b10>
 10201ec:	9b08      	ldr	r3, [sp, #32]
 10201ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 10201f0:	4413      	add	r3, r2
 10201f2:	9308      	str	r3, [sp, #32]
 10201f4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 10201f8:	2200      	movs	r2, #0
 10201fa:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 10201fe:	9b08      	ldr	r3, [sp, #32]
 1020200:	9213      	str	r2, [sp, #76]	; 0x4c
 1020202:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 1020206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 102020a:	9303      	str	r3, [sp, #12]
 102020c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 102020e:	2b00      	cmp	r3, #0
 1020210:	f040 81e9 	bne.w	10205e6 <_vfprintf_r+0x181e>
 1020214:	9304      	str	r3, [sp, #16]
 1020216:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 102021a:	f7fe bf6e 	b.w	101f0fa <_vfprintf_r+0x332>
 102021e:	4634      	mov	r4, r6
 1020220:	9e04      	ldr	r6, [sp, #16]
 1020222:	460b      	mov	r3, r1
 1020224:	3301      	adds	r3, #1
 1020226:	49af      	ldr	r1, [pc, #700]	; (10204e4 <_vfprintf_r+0x171c>)
 1020228:	2b07      	cmp	r3, #7
 102022a:	4422      	add	r2, r4
 102022c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1020230:	e9c9 1400 	strd	r1, r4, [r9]
 1020234:	bfd8      	it	le
 1020236:	f109 0908 	addle.w	r9, r9, #8
 102023a:	f77f ac7c 	ble.w	101fb36 <_vfprintf_r+0xd6e>
 102023e:	aa28      	add	r2, sp, #160	; 0xa0
 1020240:	9905      	ldr	r1, [sp, #20]
 1020242:	4650      	mov	r0, sl
 1020244:	f004 fa8a 	bl	102475c <__sprint_r>
 1020248:	2800      	cmp	r0, #0
 102024a:	f47f ab59 	bne.w	101f900 <_vfprintf_r+0xb38>
 102024e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020250:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020254:	e46f      	b.n	101fb36 <_vfprintf_r+0xd6e>
 1020256:	9911      	ldr	r1, [sp, #68]	; 0x44
 1020258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 102025a:	2b00      	cmp	r3, #0
 102025c:	bfd8      	it	le
 102025e:	2900      	cmple	r1, #0
 1020260:	f340 8370 	ble.w	1020944 <_vfprintf_r+0x1b7c>
 1020264:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 1020268:	f8dd 8014 	ldr.w	r8, [sp, #20]
 102026c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 102026e:	9812      	ldr	r0, [sp, #72]	; 0x48
 1020270:	960c      	str	r6, [sp, #48]	; 0x30
 1020272:	461e      	mov	r6, r3
 1020274:	4401      	add	r1, r0
 1020276:	9108      	str	r1, [sp, #32]
 1020278:	2e00      	cmp	r6, #0
 102027a:	f000 8127 	beq.w	10204cc <_vfprintf_r+0x1704>
 102027e:	3e01      	subs	r6, #1
 1020280:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1020282:	9919      	ldr	r1, [sp, #100]	; 0x64
 1020284:	3301      	adds	r3, #1
 1020286:	981a      	ldr	r0, [sp, #104]	; 0x68
 1020288:	2b07      	cmp	r3, #7
 102028a:	440a      	add	r2, r1
 102028c:	f8c9 1004 	str.w	r1, [r9, #4]
 1020290:	f8c9 0000 	str.w	r0, [r9]
 1020294:	bfd8      	it	le
 1020296:	f109 0908 	addle.w	r9, r9, #8
 102029a:	922a      	str	r2, [sp, #168]	; 0xa8
 102029c:	9329      	str	r3, [sp, #164]	; 0xa4
 102029e:	f300 814f 	bgt.w	1020540 <_vfprintf_r+0x1778>
 10202a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 10202a4:	9908      	ldr	r1, [sp, #32]
 10202a6:	7803      	ldrb	r3, [r0, #0]
 10202a8:	1b4c      	subs	r4, r1, r5
 10202aa:	9104      	str	r1, [sp, #16]
 10202ac:	429c      	cmp	r4, r3
 10202ae:	bfa8      	it	ge
 10202b0:	461c      	movge	r4, r3
 10202b2:	2c00      	cmp	r4, #0
 10202b4:	dd0e      	ble.n	10202d4 <_vfprintf_r+0x150c>
 10202b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10202b8:	4422      	add	r2, r4
 10202ba:	f8c9 5000 	str.w	r5, [r9]
 10202be:	3301      	adds	r3, #1
 10202c0:	922a      	str	r2, [sp, #168]	; 0xa8
 10202c2:	2b07      	cmp	r3, #7
 10202c4:	f8c9 4004 	str.w	r4, [r9, #4]
 10202c8:	9329      	str	r3, [sp, #164]	; 0xa4
 10202ca:	f300 8145 	bgt.w	1020558 <_vfprintf_r+0x1790>
 10202ce:	7803      	ldrb	r3, [r0, #0]
 10202d0:	f109 0908 	add.w	r9, r9, #8
 10202d4:	2c00      	cmp	r4, #0
 10202d6:	bfac      	ite	ge
 10202d8:	1b1c      	subge	r4, r3, r4
 10202da:	461c      	movlt	r4, r3
 10202dc:	2c00      	cmp	r4, #0
 10202de:	f300 80fc 	bgt.w	10204da <_vfprintf_r+0x1712>
 10202e2:	441d      	add	r5, r3
 10202e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10202e6:	2e00      	cmp	r6, #0
 10202e8:	bfd8      	it	le
 10202ea:	2b00      	cmple	r3, #0
 10202ec:	dcc4      	bgt.n	1020278 <_vfprintf_r+0x14b0>
 10202ee:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 10202f2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 10202f6:	9904      	ldr	r1, [sp, #16]
 10202f8:	462b      	mov	r3, r5
 10202fa:	428d      	cmp	r5, r1
 10202fc:	bf28      	it	cs
 10202fe:	460b      	movcs	r3, r1
 1020300:	461d      	mov	r5, r3
 1020302:	e41f      	b.n	101fb44 <_vfprintf_r+0xd7c>
 1020304:	2300      	movs	r3, #0
 1020306:	aa26      	add	r2, sp, #152	; 0x98
 1020308:	4619      	mov	r1, r3
 102030a:	9200      	str	r2, [sp, #0]
 102030c:	4650      	mov	r0, sl
 102030e:	aa21      	add	r2, sp, #132	; 0x84
 1020310:	f000 fc0a 	bl	1020b28 <_wcsrtombs_r>
 1020314:	1c43      	adds	r3, r0, #1
 1020316:	9008      	str	r0, [sp, #32]
 1020318:	f000 8236 	beq.w	1020788 <_vfprintf_r+0x19c0>
 102031c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102031e:	9321      	str	r3, [sp, #132]	; 0x84
 1020320:	9b08      	ldr	r3, [sp, #32]
 1020322:	2b00      	cmp	r3, #0
 1020324:	d034      	beq.n	1020390 <_vfprintf_r+0x15c8>
 1020326:	2b63      	cmp	r3, #99	; 0x63
 1020328:	f340 8229 	ble.w	102077e <_vfprintf_r+0x19b6>
 102032c:	1c59      	adds	r1, r3, #1
 102032e:	4650      	mov	r0, sl
 1020330:	f7fa fe52 	bl	101afd8 <_malloc_r>
 1020334:	900b      	str	r0, [sp, #44]	; 0x2c
 1020336:	2800      	cmp	r0, #0
 1020338:	f000 8226 	beq.w	1020788 <_vfprintf_r+0x19c0>
 102033c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102033e:	930a      	str	r3, [sp, #40]	; 0x28
 1020340:	2208      	movs	r2, #8
 1020342:	2100      	movs	r1, #0
 1020344:	a826      	add	r0, sp, #152	; 0x98
 1020346:	f7fb feb3 	bl	101c0b0 <memset>
 102034a:	9c08      	ldr	r4, [sp, #32]
 102034c:	ab26      	add	r3, sp, #152	; 0x98
 102034e:	aa21      	add	r2, sp, #132	; 0x84
 1020350:	9300      	str	r3, [sp, #0]
 1020352:	4650      	mov	r0, sl
 1020354:	4623      	mov	r3, r4
 1020356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1020358:	f000 fbe6 	bl	1020b28 <_wcsrtombs_r>
 102035c:	4284      	cmp	r4, r0
 102035e:	f040 82e4 	bne.w	102092a <_vfprintf_r+0x1b62>
 1020362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1020364:	2300      	movs	r3, #0
 1020366:	9509      	str	r5, [sp, #36]	; 0x24
 1020368:	9304      	str	r3, [sp, #16]
 102036a:	4614      	mov	r4, r2
 102036c:	9a08      	ldr	r2, [sp, #32]
 102036e:	9313      	str	r3, [sp, #76]	; 0x4c
 1020370:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1020374:	54a3      	strb	r3, [r4, r2]
 1020376:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 102037a:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 102037e:	9303      	str	r3, [sp, #12]
 1020380:	f7fe bebb 	b.w	101f0fa <_vfprintf_r+0x332>
 1020384:	3001      	adds	r0, #1
 1020386:	f101 0908 	add.w	r9, r1, #8
 102038a:	460b      	mov	r3, r1
 102038c:	f7ff bb41 	b.w	101fa12 <_vfprintf_r+0xc4a>
 1020390:	9b08      	ldr	r3, [sp, #32]
 1020392:	9509      	str	r5, [sp, #36]	; 0x24
 1020394:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1020398:	e9cd 3303 	strd	r3, r3, [sp, #12]
 102039c:	9313      	str	r3, [sp, #76]	; 0x4c
 102039e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 10203a2:	930a      	str	r3, [sp, #40]	; 0x28
 10203a4:	f7fe bea9 	b.w	101f0fa <_vfprintf_r+0x332>
 10203a8:	aa28      	add	r2, sp, #160	; 0xa0
 10203aa:	9905      	ldr	r1, [sp, #20]
 10203ac:	4650      	mov	r0, sl
 10203ae:	f004 f9d5 	bl	102475c <__sprint_r>
 10203b2:	2800      	cmp	r0, #0
 10203b4:	f47f aaa4 	bne.w	101f900 <_vfprintf_r+0xb38>
 10203b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10203ba:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10203be:	f7ff bbb2 	b.w	101fb26 <_vfprintf_r+0xd5e>
 10203c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10203c4:	4619      	mov	r1, r3
 10203c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10203c8:	4419      	add	r1, r3
 10203ca:	1b1b      	subs	r3, r3, r4
 10203cc:	1b4c      	subs	r4, r1, r5
 10203ce:	429c      	cmp	r4, r3
 10203d0:	bfa8      	it	ge
 10203d2:	461c      	movge	r4, r3
 10203d4:	f7ff bbe8 	b.w	101fba8 <_vfprintf_r+0xde0>
 10203d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10203da:	9309      	str	r3, [sp, #36]	; 0x24
 10203dc:	9b06      	ldr	r3, [sp, #24]
 10203de:	6812      	ldr	r2, [r2, #0]
 10203e0:	8013      	strh	r3, [r2, #0]
 10203e2:	f7fe bd4d 	b.w	101ee80 <_vfprintf_r+0xb8>
 10203e6:	681c      	ldr	r4, [r3, #0]
 10203e8:	9209      	str	r2, [sp, #36]	; 0x24
 10203ea:	9603      	str	r6, [sp, #12]
 10203ec:	17e5      	asrs	r5, r4, #31
 10203ee:	4622      	mov	r2, r4
 10203f0:	462b      	mov	r3, r5
 10203f2:	f7ff b807 	b.w	101f404 <_vfprintf_r+0x63c>
 10203f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 10203f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 10203fa:	9404      	str	r4, [sp, #16]
 10203fc:	f7fc fd40 	bl	101ce80 <strlen>
 1020400:	9413      	str	r4, [sp, #76]	; 0x4c
 1020402:	9411      	str	r4, [sp, #68]	; 0x44
 1020404:	940a      	str	r4, [sp, #40]	; 0x28
 1020406:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 102040a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 102040e:	e9cd 0508 	strd	r0, r5, [sp, #32]
 1020412:	9303      	str	r3, [sp, #12]
 1020414:	f7fe be71 	b.w	101f0fa <_vfprintf_r+0x332>
 1020418:	4650      	mov	r0, sl
 102041a:	aa28      	add	r2, sp, #160	; 0xa0
 102041c:	9905      	ldr	r1, [sp, #20]
 102041e:	f004 f99d 	bl	102475c <__sprint_r>
 1020422:	f7fe bdff 	b.w	101f024 <_vfprintf_r+0x25c>
 1020426:	1c59      	adds	r1, r3, #1
 1020428:	4650      	mov	r0, sl
 102042a:	f7fa fdd5 	bl	101afd8 <_malloc_r>
 102042e:	900b      	str	r0, [sp, #44]	; 0x2c
 1020430:	2800      	cmp	r0, #0
 1020432:	f000 81a9 	beq.w	1020788 <_vfprintf_r+0x19c0>
 1020436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1020438:	930a      	str	r3, [sp, #40]	; 0x28
 102043a:	e45a      	b.n	101fcf2 <_vfprintf_r+0xf2a>
 102043c:	2306      	movs	r3, #6
 102043e:	9304      	str	r3, [sp, #16]
 1020440:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 1020444:	930d      	str	r3, [sp, #52]	; 0x34
 1020446:	ee18 3a90 	vmov	r3, s17
 102044a:	2b00      	cmp	r3, #0
 102044c:	f2c0 8234 	blt.w	10208b8 <_vfprintf_r+0x1af0>
 1020450:	eeb0 cb48 	vmov.f64	d12, d8
 1020454:	2300      	movs	r3, #0
 1020456:	930c      	str	r3, [sp, #48]	; 0x30
 1020458:	2c46      	cmp	r4, #70	; 0x46
 102045a:	f040 8178 	bne.w	102074e <_vfprintf_r+0x1986>
 102045e:	ab26      	add	r3, sp, #152	; 0x98
 1020460:	aa21      	add	r2, sp, #132	; 0x84
 1020462:	9301      	str	r3, [sp, #4]
 1020464:	2103      	movs	r1, #3
 1020466:	ab1f      	add	r3, sp, #124	; 0x7c
 1020468:	9200      	str	r2, [sp, #0]
 102046a:	eeb0 0b4c 	vmov.f64	d0, d12
 102046e:	9a04      	ldr	r2, [sp, #16]
 1020470:	4650      	mov	r0, sl
 1020472:	f000 fe0d 	bl	1021090 <_dtoa_r>
 1020476:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 1020478:	eeb5 cb40 	vcmp.f64	d12, #0.0
 102047c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1020480:	7802      	ldrb	r2, [r0, #0]
 1020482:	4603      	mov	r3, r0
 1020484:	bf14      	ite	ne
 1020486:	2301      	movne	r3, #1
 1020488:	2300      	moveq	r3, #0
 102048a:	2a30      	cmp	r2, #48	; 0x30
 102048c:	bf14      	ite	ne
 102048e:	2300      	movne	r3, #0
 1020490:	f003 0301 	andeq.w	r3, r3, #1
 1020494:	900b      	str	r0, [sp, #44]	; 0x2c
 1020496:	2b00      	cmp	r3, #0
 1020498:	f040 8242 	bne.w	1020920 <_vfprintf_r+0x1b58>
 102049c:	9b04      	ldr	r3, [sp, #16]
 102049e:	441d      	add	r5, r3
 10204a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10204a2:	eeb5 cb40 	vcmp.f64	d12, #0.0
 10204a6:	441d      	add	r5, r3
 10204a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10204ac:	bf08      	it	eq
 10204ae:	462b      	moveq	r3, r5
 10204b0:	f43f ae2e 	beq.w	1020110 <_vfprintf_r+0x1348>
 10204b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 10204b6:	42ab      	cmp	r3, r5
 10204b8:	f4bf ae2a 	bcs.w	1020110 <_vfprintf_r+0x1348>
 10204bc:	2130      	movs	r1, #48	; 0x30
 10204be:	1c5a      	adds	r2, r3, #1
 10204c0:	9226      	str	r2, [sp, #152]	; 0x98
 10204c2:	7019      	strb	r1, [r3, #0]
 10204c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 10204c6:	429d      	cmp	r5, r3
 10204c8:	d8f9      	bhi.n	10204be <_vfprintf_r+0x16f6>
 10204ca:	e621      	b.n	1020110 <_vfprintf_r+0x1348>
 10204cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 10204ce:	3b01      	subs	r3, #1
 10204d0:	9314      	str	r3, [sp, #80]	; 0x50
 10204d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10204d4:	3b01      	subs	r3, #1
 10204d6:	9311      	str	r3, [sp, #68]	; 0x44
 10204d8:	e6d2      	b.n	1020280 <_vfprintf_r+0x14b8>
 10204da:	2c10      	cmp	r4, #16
 10204dc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 10204de:	dd21      	ble.n	1020524 <_vfprintf_r+0x175c>
 10204e0:	2710      	movs	r7, #16
 10204e2:	e004      	b.n	10204ee <_vfprintf_r+0x1726>
 10204e4:	01066418 	.word	0x01066418
 10204e8:	3c10      	subs	r4, #16
 10204ea:	2c10      	cmp	r4, #16
 10204ec:	dd1a      	ble.n	1020524 <_vfprintf_r+0x175c>
 10204ee:	3101      	adds	r1, #1
 10204f0:	4bb7      	ldr	r3, [pc, #732]	; (10207d0 <_vfprintf_r+0x1a08>)
 10204f2:	2907      	cmp	r1, #7
 10204f4:	f102 0210 	add.w	r2, r2, #16
 10204f8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 10204fc:	e9c9 3700 	strd	r3, r7, [r9]
 1020500:	f109 0908 	add.w	r9, r9, #8
 1020504:	ddf0      	ble.n	10204e8 <_vfprintf_r+0x1720>
 1020506:	aa28      	add	r2, sp, #160	; 0xa0
 1020508:	4641      	mov	r1, r8
 102050a:	4650      	mov	r0, sl
 102050c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020510:	f004 f924 	bl	102475c <__sprint_r>
 1020514:	2800      	cmp	r0, #0
 1020516:	f47f a9f3 	bne.w	101f900 <_vfprintf_r+0xb38>
 102051a:	3c10      	subs	r4, #16
 102051c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1020520:	2c10      	cmp	r4, #16
 1020522:	dce4      	bgt.n	10204ee <_vfprintf_r+0x1726>
 1020524:	3101      	adds	r1, #1
 1020526:	4baa      	ldr	r3, [pc, #680]	; (10207d0 <_vfprintf_r+0x1a08>)
 1020528:	2907      	cmp	r1, #7
 102052a:	4422      	add	r2, r4
 102052c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1020530:	e9c9 3400 	strd	r3, r4, [r9]
 1020534:	dc7b      	bgt.n	102062e <_vfprintf_r+0x1866>
 1020536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1020538:	f109 0908 	add.w	r9, r9, #8
 102053c:	781b      	ldrb	r3, [r3, #0]
 102053e:	e6d0      	b.n	10202e2 <_vfprintf_r+0x151a>
 1020540:	aa28      	add	r2, sp, #160	; 0xa0
 1020542:	4641      	mov	r1, r8
 1020544:	4650      	mov	r0, sl
 1020546:	f004 f909 	bl	102475c <__sprint_r>
 102054a:	2800      	cmp	r0, #0
 102054c:	f47f a9d8 	bne.w	101f900 <_vfprintf_r+0xb38>
 1020550:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020552:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020556:	e6a4      	b.n	10202a2 <_vfprintf_r+0x14da>
 1020558:	aa28      	add	r2, sp, #160	; 0xa0
 102055a:	4641      	mov	r1, r8
 102055c:	4650      	mov	r0, sl
 102055e:	f004 f8fd 	bl	102475c <__sprint_r>
 1020562:	2800      	cmp	r0, #0
 1020564:	f47f a9cc 	bne.w	101f900 <_vfprintf_r+0xb38>
 1020568:	9b14      	ldr	r3, [sp, #80]	; 0x50
 102056a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102056e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020570:	781b      	ldrb	r3, [r3, #0]
 1020572:	e6af      	b.n	10202d4 <_vfprintf_r+0x150c>
 1020574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1020576:	4619      	mov	r1, r3
 1020578:	9b10      	ldr	r3, [sp, #64]	; 0x40
 102057a:	4299      	cmp	r1, r3
 102057c:	f300 8097 	bgt.w	10206ae <_vfprintf_r+0x18e6>
 1020580:	07f5      	lsls	r5, r6, #31
 1020582:	f140 8121 	bpl.w	10207c8 <_vfprintf_r+0x1a00>
 1020586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1020588:	4413      	add	r3, r2
 102058a:	9308      	str	r3, [sp, #32]
 102058c:	0574      	lsls	r4, r6, #21
 102058e:	d503      	bpl.n	1020598 <_vfprintf_r+0x17d0>
 1020590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1020592:	2b00      	cmp	r3, #0
 1020594:	f300 8139 	bgt.w	102080a <_vfprintf_r+0x1a42>
 1020598:	9b08      	ldr	r3, [sp, #32]
 102059a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 102059e:	9303      	str	r3, [sp, #12]
 10205a0:	2367      	movs	r3, #103	; 0x67
 10205a2:	930e      	str	r3, [sp, #56]	; 0x38
 10205a4:	2300      	movs	r3, #0
 10205a6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 10205a8:	930a      	str	r3, [sp, #40]	; 0x28
 10205aa:	9313      	str	r3, [sp, #76]	; 0x4c
 10205ac:	9311      	str	r3, [sp, #68]	; 0x44
 10205ae:	e62d      	b.n	102020c <_vfprintf_r+0x1444>
 10205b0:	2c46      	cmp	r4, #70	; 0x46
 10205b2:	f040 81cf 	bne.w	1020954 <_vfprintf_r+0x1b8c>
 10205b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 10205b8:	f006 0301 	and.w	r3, r6, #1
 10205bc:	9a04      	ldr	r2, [sp, #16]
 10205be:	2900      	cmp	r1, #0
 10205c0:	ea43 0302 	orr.w	r3, r3, r2
 10205c4:	f340 818c 	ble.w	10208e0 <_vfprintf_r+0x1b18>
 10205c8:	2b00      	cmp	r3, #0
 10205ca:	f040 8149 	bne.w	1020860 <_vfprintf_r+0x1a98>
 10205ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10205d0:	9308      	str	r3, [sp, #32]
 10205d2:	2366      	movs	r3, #102	; 0x66
 10205d4:	930e      	str	r3, [sp, #56]	; 0x38
 10205d6:	0572      	lsls	r2, r6, #21
 10205d8:	f100 8119 	bmi.w	102080e <_vfprintf_r+0x1a46>
 10205dc:	9b08      	ldr	r3, [sp, #32]
 10205de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10205e2:	9303      	str	r3, [sp, #12]
 10205e4:	e7de      	b.n	10205a4 <_vfprintf_r+0x17dc>
 10205e6:	212d      	movs	r1, #45	; 0x2d
 10205e8:	2300      	movs	r3, #0
 10205ea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 10205ee:	9304      	str	r3, [sp, #16]
 10205f0:	f7fe bd84 	b.w	101f0fc <_vfprintf_r+0x334>
 10205f4:	aa28      	add	r2, sp, #160	; 0xa0
 10205f6:	9905      	ldr	r1, [sp, #20]
 10205f8:	4650      	mov	r0, sl
 10205fa:	f004 f8af 	bl	102475c <__sprint_r>
 10205fe:	2800      	cmp	r0, #0
 1020600:	f47f a97e 	bne.w	101f900 <_vfprintf_r+0xb38>
 1020604:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020606:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 102060a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 102060c:	f7ff b994 	b.w	101f938 <_vfprintf_r+0xb70>
 1020610:	aa28      	add	r2, sp, #160	; 0xa0
 1020612:	9905      	ldr	r1, [sp, #20]
 1020614:	4650      	mov	r0, sl
 1020616:	f004 f8a1 	bl	102475c <__sprint_r>
 102061a:	2800      	cmp	r0, #0
 102061c:	f47f a970 	bne.w	101f900 <_vfprintf_r+0xb38>
 1020620:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1020622:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020626:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 102062a:	f7ff b99a 	b.w	101f962 <_vfprintf_r+0xb9a>
 102062e:	aa28      	add	r2, sp, #160	; 0xa0
 1020630:	4641      	mov	r1, r8
 1020632:	4650      	mov	r0, sl
 1020634:	f004 f892 	bl	102475c <__sprint_r>
 1020638:	2800      	cmp	r0, #0
 102063a:	f47f a961 	bne.w	101f900 <_vfprintf_r+0xb38>
 102063e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1020640:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020644:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1020646:	781b      	ldrb	r3, [r3, #0]
 1020648:	e64b      	b.n	10202e2 <_vfprintf_r+0x151a>
 102064a:	07f0      	lsls	r0, r6, #31
 102064c:	f57e adad 	bpl.w	101f1aa <_vfprintf_r+0x3e2>
 1020650:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1020652:	9915      	ldr	r1, [sp, #84]	; 0x54
 1020654:	3301      	adds	r3, #1
 1020656:	9817      	ldr	r0, [sp, #92]	; 0x5c
 1020658:	2b07      	cmp	r3, #7
 102065a:	440a      	add	r2, r1
 102065c:	f8c9 1004 	str.w	r1, [r9, #4]
 1020660:	f8c9 0000 	str.w	r0, [r9]
 1020664:	922a      	str	r2, [sp, #168]	; 0xa8
 1020666:	9329      	str	r3, [sp, #164]	; 0xa4
 1020668:	dcd2      	bgt.n	1020610 <_vfprintf_r+0x1848>
 102066a:	f109 0908 	add.w	r9, r9, #8
 102066e:	f7ff b97b 	b.w	101f968 <_vfprintf_r+0xba0>
 1020672:	aa28      	add	r2, sp, #160	; 0xa0
 1020674:	9905      	ldr	r1, [sp, #20]
 1020676:	4650      	mov	r0, sl
 1020678:	f004 f870 	bl	102475c <__sprint_r>
 102067c:	2800      	cmp	r0, #0
 102067e:	f47f a93f 	bne.w	101f900 <_vfprintf_r+0xb38>
 1020682:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 1020684:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020688:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 102068a:	f7ff ba73 	b.w	101fb74 <_vfprintf_r+0xdac>
 102068e:	aa28      	add	r2, sp, #160	; 0xa0
 1020690:	9905      	ldr	r1, [sp, #20]
 1020692:	4650      	mov	r0, sl
 1020694:	f004 f862 	bl	102475c <__sprint_r>
 1020698:	2800      	cmp	r0, #0
 102069a:	f47f a931 	bne.w	101f900 <_vfprintf_r+0xb38>
 102069e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 10206a0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10206a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 10206a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10206a8:	1acb      	subs	r3, r1, r3
 10206aa:	f7ff ba7d 	b.w	101fba8 <_vfprintf_r+0xde0>
 10206ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10206b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 10206b2:	189a      	adds	r2, r3, r2
 10206b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10206b6:	9208      	str	r2, [sp, #32]
 10206b8:	2b00      	cmp	r3, #0
 10206ba:	bfc4      	itt	gt
 10206bc:	2367      	movgt	r3, #103	; 0x67
 10206be:	930e      	strgt	r3, [sp, #56]	; 0x38
 10206c0:	dc89      	bgt.n	10205d6 <_vfprintf_r+0x180e>
 10206c2:	f1c3 0301 	rsb	r3, r3, #1
 10206c6:	2167      	movs	r1, #103	; 0x67
 10206c8:	441a      	add	r2, r3
 10206ca:	910e      	str	r1, [sp, #56]	; 0x38
 10206cc:	9208      	str	r2, [sp, #32]
 10206ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 10206d2:	9303      	str	r3, [sp, #12]
 10206d4:	e766      	b.n	10205a4 <_vfprintf_r+0x17dc>
 10206d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 10206d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 10206da:	ebaa 0a02 	sub.w	sl, sl, r2
 10206de:	4650      	mov	r0, sl
 10206e0:	f7fc fcbc 	bl	101d05c <strncpy>
 10206e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 10206e8:	b10b      	cbz	r3, 10206ee <_vfprintf_r+0x1926>
 10206ea:	f108 0801 	add.w	r8, r8, #1
 10206ee:	4620      	mov	r0, r4
 10206f0:	4629      	mov	r1, r5
 10206f2:	220a      	movs	r2, #10
 10206f4:	2300      	movs	r3, #0
 10206f6:	f7f9 fd67 	bl	101a1c8 <__aeabi_uldivmod>
 10206fa:	f04f 0900 	mov.w	r9, #0
 10206fe:	e482      	b.n	1020006 <_vfprintf_r+0x123e>
 1020700:	424c      	negs	r4, r1
 1020702:	3110      	adds	r1, #16
 1020704:	da48      	bge.n	1020798 <_vfprintf_r+0x19d0>
 1020706:	2510      	movs	r5, #16
 1020708:	e002      	b.n	1020710 <_vfprintf_r+0x1948>
 102070a:	3c10      	subs	r4, #16
 102070c:	2c10      	cmp	r4, #16
 102070e:	dd43      	ble.n	1020798 <_vfprintf_r+0x19d0>
 1020710:	3301      	adds	r3, #1
 1020712:	492f      	ldr	r1, [pc, #188]	; (10207d0 <_vfprintf_r+0x1a08>)
 1020714:	2b07      	cmp	r3, #7
 1020716:	f102 0210 	add.w	r2, r2, #16
 102071a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 102071e:	e9c9 1500 	strd	r1, r5, [r9]
 1020722:	f109 0908 	add.w	r9, r9, #8
 1020726:	ddf0      	ble.n	102070a <_vfprintf_r+0x1942>
 1020728:	aa28      	add	r2, sp, #160	; 0xa0
 102072a:	9905      	ldr	r1, [sp, #20]
 102072c:	4650      	mov	r0, sl
 102072e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1020732:	f004 f813 	bl	102475c <__sprint_r>
 1020736:	2800      	cmp	r0, #0
 1020738:	f47f a8e2 	bne.w	101f900 <_vfprintf_r+0xb38>
 102073c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1020740:	e7e3      	b.n	102070a <_vfprintf_r+0x1942>
 1020742:	2300      	movs	r3, #0
 1020744:	eeb0 0b48 	vmov.f64	d0, d8
 1020748:	930c      	str	r3, [sp, #48]	; 0x30
 102074a:	f7ff badb 	b.w	101fd04 <_vfprintf_r+0xf3c>
 102074e:	2c45      	cmp	r4, #69	; 0x45
 1020750:	f040 80fd 	bne.w	102094e <_vfprintf_r+0x1b86>
 1020754:	9b04      	ldr	r3, [sp, #16]
 1020756:	aa26      	add	r2, sp, #152	; 0x98
 1020758:	2102      	movs	r1, #2
 102075a:	9201      	str	r2, [sp, #4]
 102075c:	1c5d      	adds	r5, r3, #1
 102075e:	eeb0 0b4c 	vmov.f64	d0, d12
 1020762:	ab21      	add	r3, sp, #132	; 0x84
 1020764:	4650      	mov	r0, sl
 1020766:	9300      	str	r3, [sp, #0]
 1020768:	462a      	mov	r2, r5
 102076a:	ab1f      	add	r3, sp, #124	; 0x7c
 102076c:	f000 fc90 	bl	1021090 <_dtoa_r>
 1020770:	900b      	str	r0, [sp, #44]	; 0x2c
 1020772:	e695      	b.n	10204a0 <_vfprintf_r+0x16d8>
 1020774:	f04f 33ff 	mov.w	r3, #4294967295
 1020778:	9306      	str	r3, [sp, #24]
 102077a:	f7fe bc59 	b.w	101f030 <_vfprintf_r+0x268>
 102077e:	2300      	movs	r3, #0
 1020780:	930a      	str	r3, [sp, #40]	; 0x28
 1020782:	ab3b      	add	r3, sp, #236	; 0xec
 1020784:	930b      	str	r3, [sp, #44]	; 0x2c
 1020786:	e5db      	b.n	1020340 <_vfprintf_r+0x1578>
 1020788:	9a05      	ldr	r2, [sp, #20]
 102078a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 102078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1020792:	8193      	strh	r3, [r2, #12]
 1020794:	f7fe bc49 	b.w	101f02a <_vfprintf_r+0x262>
 1020798:	3301      	adds	r3, #1
 102079a:	490d      	ldr	r1, [pc, #52]	; (10207d0 <_vfprintf_r+0x1a08>)
 102079c:	2b07      	cmp	r3, #7
 102079e:	4422      	add	r2, r4
 10207a0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 10207a4:	e9c9 1400 	strd	r1, r4, [r9]
 10207a8:	f77f af5f 	ble.w	102066a <_vfprintf_r+0x18a2>
 10207ac:	aa28      	add	r2, sp, #160	; 0xa0
 10207ae:	9905      	ldr	r1, [sp, #20]
 10207b0:	4650      	mov	r0, sl
 10207b2:	f003 ffd3 	bl	102475c <__sprint_r>
 10207b6:	2800      	cmp	r0, #0
 10207b8:	f47f a8a2 	bne.w	101f900 <_vfprintf_r+0xb38>
 10207bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10207be:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10207c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10207c4:	f7ff b8d0 	b.w	101f968 <_vfprintf_r+0xba0>
 10207c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10207ca:	9308      	str	r3, [sp, #32]
 10207cc:	e6de      	b.n	102058c <_vfprintf_r+0x17c4>
 10207ce:	bf00      	nop
 10207d0:	01066418 	.word	0x01066418
 10207d4:	9526      	str	r5, [sp, #152]	; 0x98
 10207d6:	4619      	mov	r1, r3
 10207d8:	7bc5      	ldrb	r5, [r0, #15]
 10207da:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 10207de:	4295      	cmp	r5, r2
 10207e0:	d10a      	bne.n	10207f8 <_vfprintf_r+0x1a30>
 10207e2:	f04f 0c30 	mov.w	ip, #48	; 0x30
 10207e6:	f801 cc01 	strb.w	ip, [r1, #-1]
 10207ea:	9926      	ldr	r1, [sp, #152]	; 0x98
 10207ec:	1e4a      	subs	r2, r1, #1
 10207ee:	9226      	str	r2, [sp, #152]	; 0x98
 10207f0:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 10207f4:	4295      	cmp	r5, r2
 10207f6:	d0f6      	beq.n	10207e6 <_vfprintf_r+0x1a1e>
 10207f8:	2a39      	cmp	r2, #57	; 0x39
 10207fa:	bf16      	itet	ne
 10207fc:	3201      	addne	r2, #1
 10207fe:	7a82      	ldrbeq	r2, [r0, #10]
 1020800:	b2d2      	uxtbne	r2, r2
 1020802:	f801 2c01 	strb.w	r2, [r1, #-1]
 1020806:	f7ff bace 	b.w	101fda6 <_vfprintf_r+0xfde>
 102080a:	2367      	movs	r3, #103	; 0x67
 102080c:	930e      	str	r3, [sp, #56]	; 0x38
 102080e:	9814      	ldr	r0, [sp, #80]	; 0x50
 1020810:	2200      	movs	r2, #0
 1020812:	9213      	str	r2, [sp, #76]	; 0x4c
 1020814:	9211      	str	r2, [sp, #68]	; 0x44
 1020816:	7803      	ldrb	r3, [r0, #0]
 1020818:	9a10      	ldr	r2, [sp, #64]	; 0x40
 102081a:	2bff      	cmp	r3, #255	; 0xff
 102081c:	d00b      	beq.n	1020836 <_vfprintf_r+0x1a6e>
 102081e:	4293      	cmp	r3, r2
 1020820:	da09      	bge.n	1020836 <_vfprintf_r+0x1a6e>
 1020822:	7841      	ldrb	r1, [r0, #1]
 1020824:	1ad2      	subs	r2, r2, r3
 1020826:	b1b9      	cbz	r1, 1020858 <_vfprintf_r+0x1a90>
 1020828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 102082a:	3001      	adds	r0, #1
 102082c:	3301      	adds	r3, #1
 102082e:	9311      	str	r3, [sp, #68]	; 0x44
 1020830:	460b      	mov	r3, r1
 1020832:	2bff      	cmp	r3, #255	; 0xff
 1020834:	d1f3      	bne.n	102081e <_vfprintf_r+0x1a56>
 1020836:	9210      	str	r2, [sp, #64]	; 0x40
 1020838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 102083a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 102083c:	9908      	ldr	r1, [sp, #32]
 102083e:	4413      	add	r3, r2
 1020840:	2200      	movs	r2, #0
 1020842:	920a      	str	r2, [sp, #40]	; 0x28
 1020844:	9a19      	ldr	r2, [sp, #100]	; 0x64
 1020846:	9014      	str	r0, [sp, #80]	; 0x50
 1020848:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 102084a:	fb02 1303 	mla	r3, r2, r3, r1
 102084e:	9308      	str	r3, [sp, #32]
 1020850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1020854:	9303      	str	r3, [sp, #12]
 1020856:	e4d9      	b.n	102020c <_vfprintf_r+0x1444>
 1020858:	9913      	ldr	r1, [sp, #76]	; 0x4c
 102085a:	3101      	adds	r1, #1
 102085c:	9113      	str	r1, [sp, #76]	; 0x4c
 102085e:	e7dc      	b.n	102081a <_vfprintf_r+0x1a52>
 1020860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 1020862:	18cb      	adds	r3, r1, r3
 1020864:	2166      	movs	r1, #102	; 0x66
 1020866:	441a      	add	r2, r3
 1020868:	910e      	str	r1, [sp, #56]	; 0x38
 102086a:	9208      	str	r2, [sp, #32]
 102086c:	e6b3      	b.n	10205d6 <_vfprintf_r+0x180e>
 102086e:	ee18 3a90 	vmov	r3, s17
 1020872:	f24a 4458 	movw	r4, #42072	; 0xa458
 1020876:	f2c0 1406 	movt	r4, #262	; 0x106
 102087a:	2b00      	cmp	r3, #0
 102087c:	f24a 4354 	movw	r3, #42068	; 0xa454
 1020880:	f2c0 1306 	movt	r3, #262	; 0x106
 1020884:	bfb6      	itet	lt
 1020886:	212d      	movlt	r1, #45	; 0x2d
 1020888:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 102088c:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 1020890:	f7fe bd98 	b.w	101f3c4 <_vfprintf_r+0x5fc>
 1020894:	2c41      	cmp	r4, #65	; 0x41
 1020896:	a922      	add	r1, sp, #136	; 0x88
 1020898:	bf08      	it	eq
 102089a:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 102089e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 10208a2:	bf1e      	ittt	ne
 10208a4:	2330      	movne	r3, #48	; 0x30
 10208a6:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 10208aa:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 10208ae:	f803 2b01 	strb.w	r2, [r3], #1
 10208b2:	1a5b      	subs	r3, r3, r1
 10208b4:	9318      	str	r3, [sp, #96]	; 0x60
 10208b6:	e492      	b.n	10201de <_vfprintf_r+0x1416>
 10208b8:	232d      	movs	r3, #45	; 0x2d
 10208ba:	eeb1 cb48 	vneg.f64	d12, d8
 10208be:	930c      	str	r3, [sp, #48]	; 0x30
 10208c0:	e5ca      	b.n	1020458 <_vfprintf_r+0x1690>
 10208c2:	9b04      	ldr	r3, [sp, #16]
 10208c4:	9509      	str	r5, [sp, #36]	; 0x24
 10208c6:	9004      	str	r0, [sp, #16]
 10208c8:	9303      	str	r3, [sp, #12]
 10208ca:	9308      	str	r3, [sp, #32]
 10208cc:	9013      	str	r0, [sp, #76]	; 0x4c
 10208ce:	9011      	str	r0, [sp, #68]	; 0x44
 10208d0:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 10208d4:	f7fe bc11 	b.w	101f0fa <_vfprintf_r+0x332>
 10208d8:	07f3      	lsls	r3, r6, #31
 10208da:	f57f ac8b 	bpl.w	10201f4 <_vfprintf_r+0x142c>
 10208de:	e485      	b.n	10201ec <_vfprintf_r+0x1424>
 10208e0:	b92b      	cbnz	r3, 10208ee <_vfprintf_r+0x1b26>
 10208e2:	2301      	movs	r3, #1
 10208e4:	2266      	movs	r2, #102	; 0x66
 10208e6:	9303      	str	r3, [sp, #12]
 10208e8:	920e      	str	r2, [sp, #56]	; 0x38
 10208ea:	9308      	str	r3, [sp, #32]
 10208ec:	e65a      	b.n	10205a4 <_vfprintf_r+0x17dc>
 10208ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 10208f0:	2266      	movs	r2, #102	; 0x66
 10208f2:	920e      	str	r2, [sp, #56]	; 0x38
 10208f4:	9a04      	ldr	r2, [sp, #16]
 10208f6:	3301      	adds	r3, #1
 10208f8:	441a      	add	r2, r3
 10208fa:	9208      	str	r2, [sp, #32]
 10208fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1020900:	9303      	str	r3, [sp, #12]
 1020902:	e64f      	b.n	10205a4 <_vfprintf_r+0x17dc>
 1020904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1020906:	787b      	ldrb	r3, [r7, #1]
 1020908:	460f      	mov	r7, r1
 102090a:	f852 0b04 	ldr.w	r0, [r2], #4
 102090e:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1020912:	9209      	str	r2, [sp, #36]	; 0x24
 1020914:	9104      	str	r1, [sp, #16]
 1020916:	f7fe bae0 	b.w	101eeda <_vfprintf_r+0x112>
 102091a:	4649      	mov	r1, r9
 102091c:	f7ff ba8c 	b.w	101fe38 <_vfprintf_r+0x1070>
 1020920:	9b04      	ldr	r3, [sp, #16]
 1020922:	f1c3 0501 	rsb	r5, r3, #1
 1020926:	951f      	str	r5, [sp, #124]	; 0x7c
 1020928:	e5b8      	b.n	102049c <_vfprintf_r+0x16d4>
 102092a:	9a05      	ldr	r2, [sp, #20]
 102092c:	8993      	ldrh	r3, [r2, #12]
 102092e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1020932:	8193      	strh	r3, [r2, #12]
 1020934:	f7fe bfe4 	b.w	101f900 <_vfprintf_r+0xb38>
 1020938:	2302      	movs	r3, #2
 102093a:	9318      	str	r3, [sp, #96]	; 0x60
 102093c:	e44f      	b.n	10201de <_vfprintf_r+0x1416>
 102093e:	9603      	str	r6, [sp, #12]
 1020940:	f7fe bdb4 	b.w	101f4ac <_vfprintf_r+0x6e4>
 1020944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1020946:	9912      	ldr	r1, [sp, #72]	; 0x48
 1020948:	440b      	add	r3, r1
 102094a:	9304      	str	r3, [sp, #16]
 102094c:	e4d3      	b.n	10202f6 <_vfprintf_r+0x152e>
 102094e:	9d04      	ldr	r5, [sp, #16]
 1020950:	f7ff bbca 	b.w	10200e8 <_vfprintf_r+0x1320>
 1020954:	2300      	movs	r3, #0
 1020956:	930a      	str	r3, [sp, #40]	; 0x28
 1020958:	f7ff bbf1 	b.w	102013e <_vfprintf_r+0x1376>
 102095c:	4633      	mov	r3, r6
 102095e:	f7fe bde2 	b.w	101f526 <_vfprintf_r+0x75e>
 1020962:	9603      	str	r6, [sp, #12]
 1020964:	f7fe bdf1 	b.w	101f54a <_vfprintf_r+0x782>

01020968 <vfprintf>:
 1020968:	b410      	push	{r4}
 102096a:	f64a 1448 	movw	r4, #43336	; 0xa948
 102096e:	f2c0 1406 	movt	r4, #262	; 0x106
 1020972:	4613      	mov	r3, r2
 1020974:	460a      	mov	r2, r1
 1020976:	4601      	mov	r1, r0
 1020978:	6820      	ldr	r0, [r4, #0]
 102097a:	f85d 4b04 	ldr.w	r4, [sp], #4
 102097e:	f7fe ba23 	b.w	101edc8 <_vfprintf_r>
 1020982:	bf00      	nop

01020984 <__sbprintf>:
 1020984:	b5f0      	push	{r4, r5, r6, r7, lr}
 1020986:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 102098a:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 102098c:	460c      	mov	r4, r1
 102098e:	898d      	ldrh	r5, [r1, #12]
 1020990:	2700      	movs	r7, #0
 1020992:	9706      	str	r7, [sp, #24]
 1020994:	4669      	mov	r1, sp
 1020996:	89e7      	ldrh	r7, [r4, #14]
 1020998:	f025 0502 	bic.w	r5, r5, #2
 102099c:	9619      	str	r6, [sp, #100]	; 0x64
 102099e:	f8ad 500c 	strh.w	r5, [sp, #12]
 10209a2:	69e6      	ldr	r6, [r4, #28]
 10209a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 10209a6:	f8ad 700e 	strh.w	r7, [sp, #14]
 10209aa:	9607      	str	r6, [sp, #28]
 10209ac:	ae1a      	add	r6, sp, #104	; 0x68
 10209ae:	9509      	str	r5, [sp, #36]	; 0x24
 10209b0:	f44f 6580 	mov.w	r5, #1024	; 0x400
 10209b4:	9600      	str	r6, [sp, #0]
 10209b6:	9604      	str	r6, [sp, #16]
 10209b8:	4606      	mov	r6, r0
 10209ba:	9502      	str	r5, [sp, #8]
 10209bc:	9505      	str	r5, [sp, #20]
 10209be:	f7fe fa03 	bl	101edc8 <_vfprintf_r>
 10209c2:	1e05      	subs	r5, r0, #0
 10209c4:	db07      	blt.n	10209d6 <__sbprintf+0x52>
 10209c6:	4630      	mov	r0, r6
 10209c8:	4669      	mov	r1, sp
 10209ca:	f001 fa8d 	bl	1021ee8 <_fflush_r>
 10209ce:	2800      	cmp	r0, #0
 10209d0:	bf18      	it	ne
 10209d2:	f04f 35ff 	movne.w	r5, #4294967295
 10209d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 10209da:	4628      	mov	r0, r5
 10209dc:	065b      	lsls	r3, r3, #25
 10209de:	bf42      	ittt	mi
 10209e0:	89a3      	ldrhmi	r3, [r4, #12]
 10209e2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 10209e6:	81a3      	strhmi	r3, [r4, #12]
 10209e8:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 10209ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10209ee:	bf00      	nop

010209f0 <_vsnprintf_r>:
 10209f0:	b530      	push	{r4, r5, lr}
 10209f2:	1e14      	subs	r4, r2, #0
 10209f4:	4605      	mov	r5, r0
 10209f6:	b09b      	sub	sp, #108	; 0x6c
 10209f8:	bfbe      	ittt	lt
 10209fa:	238b      	movlt	r3, #139	; 0x8b
 10209fc:	f04f 30ff 	movlt.w	r0, #4294967295
 1020a00:	602b      	strlt	r3, [r5, #0]
 1020a02:	db15      	blt.n	1020a30 <_vsnprintf_r+0x40>
 1020a04:	461a      	mov	r2, r3
 1020a06:	9100      	str	r1, [sp, #0]
 1020a08:	f44f 7302 	mov.w	r3, #520	; 0x208
 1020a0c:	9104      	str	r1, [sp, #16]
 1020a0e:	f8ad 300c 	strh.w	r3, [sp, #12]
 1020a12:	4669      	mov	r1, sp
 1020a14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 1020a16:	d10d      	bne.n	1020a34 <_vsnprintf_r+0x44>
 1020a18:	9402      	str	r4, [sp, #8]
 1020a1a:	9405      	str	r4, [sp, #20]
 1020a1c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 1020a20:	f8ad 400e 	strh.w	r4, [sp, #14]
 1020a24:	f7fc fc28 	bl	101d278 <_svfprintf_r>
 1020a28:	1c43      	adds	r3, r0, #1
 1020a2a:	da01      	bge.n	1020a30 <_vsnprintf_r+0x40>
 1020a2c:	238b      	movs	r3, #139	; 0x8b
 1020a2e:	602b      	str	r3, [r5, #0]
 1020a30:	b01b      	add	sp, #108	; 0x6c
 1020a32:	bd30      	pop	{r4, r5, pc}
 1020a34:	3c01      	subs	r4, #1
 1020a36:	9402      	str	r4, [sp, #8]
 1020a38:	9405      	str	r4, [sp, #20]
 1020a3a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 1020a3e:	f8ad 400e 	strh.w	r4, [sp, #14]
 1020a42:	f7fc fc19 	bl	101d278 <_svfprintf_r>
 1020a46:	1c42      	adds	r2, r0, #1
 1020a48:	f04f 0200 	mov.w	r2, #0
 1020a4c:	bfbc      	itt	lt
 1020a4e:	238b      	movlt	r3, #139	; 0x8b
 1020a50:	602b      	strlt	r3, [r5, #0]
 1020a52:	9b00      	ldr	r3, [sp, #0]
 1020a54:	701a      	strb	r2, [r3, #0]
 1020a56:	b01b      	add	sp, #108	; 0x6c
 1020a58:	bd30      	pop	{r4, r5, pc}
 1020a5a:	bf00      	nop

01020a5c <vsnprintf>:
 1020a5c:	b510      	push	{r4, lr}
 1020a5e:	f64a 1448 	movw	r4, #43336	; 0xa948
 1020a62:	b082      	sub	sp, #8
 1020a64:	f2c0 1406 	movt	r4, #262	; 0x106
 1020a68:	9300      	str	r3, [sp, #0]
 1020a6a:	4613      	mov	r3, r2
 1020a6c:	460a      	mov	r2, r1
 1020a6e:	4601      	mov	r1, r0
 1020a70:	6820      	ldr	r0, [r4, #0]
 1020a72:	f7ff ffbd 	bl	10209f0 <_vsnprintf_r>
 1020a76:	b002      	add	sp, #8
 1020a78:	bd10      	pop	{r4, pc}
 1020a7a:	bf00      	nop

01020a7c <_wcrtomb_r>:
 1020a7c:	b570      	push	{r4, r5, r6, lr}
 1020a7e:	4605      	mov	r5, r0
 1020a80:	b084      	sub	sp, #16
 1020a82:	f500 748a 	add.w	r4, r0, #276	; 0x114
 1020a86:	b103      	cbz	r3, 1020a8a <_wcrtomb_r+0xe>
 1020a88:	461c      	mov	r4, r3
 1020a8a:	f64a 1348 	movw	r3, #43336	; 0xa948
 1020a8e:	f2c0 1306 	movt	r3, #262	; 0x106
 1020a92:	681b      	ldr	r3, [r3, #0]
 1020a94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 1020a96:	f64a 5378 	movw	r3, #44408	; 0xad78
 1020a9a:	f2c0 1306 	movt	r3, #262	; 0x106
 1020a9e:	2800      	cmp	r0, #0
 1020aa0:	bf08      	it	eq
 1020aa2:	4618      	moveq	r0, r3
 1020aa4:	b161      	cbz	r1, 1020ac0 <_wcrtomb_r+0x44>
 1020aa6:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 1020aaa:	4623      	mov	r3, r4
 1020aac:	4628      	mov	r0, r5
 1020aae:	47b0      	blx	r6
 1020ab0:	1c43      	adds	r3, r0, #1
 1020ab2:	bf01      	itttt	eq
 1020ab4:	2200      	moveq	r2, #0
 1020ab6:	238a      	moveq	r3, #138	; 0x8a
 1020ab8:	6022      	streq	r2, [r4, #0]
 1020aba:	602b      	streq	r3, [r5, #0]
 1020abc:	b004      	add	sp, #16
 1020abe:	bd70      	pop	{r4, r5, r6, pc}
 1020ac0:	460a      	mov	r2, r1
 1020ac2:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 1020ac6:	4623      	mov	r3, r4
 1020ac8:	a901      	add	r1, sp, #4
 1020aca:	4628      	mov	r0, r5
 1020acc:	47b0      	blx	r6
 1020ace:	e7ef      	b.n	1020ab0 <_wcrtomb_r+0x34>

01020ad0 <wcrtomb>:
 1020ad0:	f64a 1348 	movw	r3, #43336	; 0xa948
 1020ad4:	f2c0 1306 	movt	r3, #262	; 0x106
 1020ad8:	b570      	push	{r4, r5, r6, lr}
 1020ada:	b084      	sub	sp, #16
 1020adc:	681d      	ldr	r5, [r3, #0]
 1020ade:	f505 768a 	add.w	r6, r5, #276	; 0x114
 1020ae2:	b102      	cbz	r2, 1020ae6 <wcrtomb+0x16>
 1020ae4:	4616      	mov	r6, r2
 1020ae6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 1020ae8:	f64a 5378 	movw	r3, #44408	; 0xad78
 1020aec:	f2c0 1306 	movt	r3, #262	; 0x106
 1020af0:	2c00      	cmp	r4, #0
 1020af2:	bf08      	it	eq
 1020af4:	461c      	moveq	r4, r3
 1020af6:	b170      	cbz	r0, 1020b16 <wcrtomb+0x46>
 1020af8:	460a      	mov	r2, r1
 1020afa:	4633      	mov	r3, r6
 1020afc:	4601      	mov	r1, r0
 1020afe:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1020b02:	4628      	mov	r0, r5
 1020b04:	47a0      	blx	r4
 1020b06:	1c43      	adds	r3, r0, #1
 1020b08:	bf01      	itttt	eq
 1020b0a:	2200      	moveq	r2, #0
 1020b0c:	238a      	moveq	r3, #138	; 0x8a
 1020b0e:	6032      	streq	r2, [r6, #0]
 1020b10:	602b      	streq	r3, [r5, #0]
 1020b12:	b004      	add	sp, #16
 1020b14:	bd70      	pop	{r4, r5, r6, pc}
 1020b16:	4602      	mov	r2, r0
 1020b18:	4633      	mov	r3, r6
 1020b1a:	a901      	add	r1, sp, #4
 1020b1c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1020b20:	4628      	mov	r0, r5
 1020b22:	47a0      	blx	r4
 1020b24:	e7ef      	b.n	1020b06 <wcrtomb+0x36>
 1020b26:	bf00      	nop

01020b28 <_wcsrtombs_r>:
 1020b28:	b510      	push	{r4, lr}
 1020b2a:	b082      	sub	sp, #8
 1020b2c:	9c04      	ldr	r4, [sp, #16]
 1020b2e:	9300      	str	r3, [sp, #0]
 1020b30:	f04f 33ff 	mov.w	r3, #4294967295
 1020b34:	9401      	str	r4, [sp, #4]
 1020b36:	f004 fe97 	bl	1025868 <_wcsnrtombs_r>
 1020b3a:	b002      	add	sp, #8
 1020b3c:	bd10      	pop	{r4, pc}
 1020b3e:	bf00      	nop

01020b40 <wcsrtombs>:
 1020b40:	b510      	push	{r4, lr}
 1020b42:	f64a 1448 	movw	r4, #43336	; 0xa948
 1020b46:	b082      	sub	sp, #8
 1020b48:	f2c0 1406 	movt	r4, #262	; 0x106
 1020b4c:	9200      	str	r2, [sp, #0]
 1020b4e:	460a      	mov	r2, r1
 1020b50:	9301      	str	r3, [sp, #4]
 1020b52:	4601      	mov	r1, r0
 1020b54:	f04f 33ff 	mov.w	r3, #4294967295
 1020b58:	6820      	ldr	r0, [r4, #0]
 1020b5a:	f004 fe85 	bl	1025868 <_wcsnrtombs_r>
 1020b5e:	b002      	add	sp, #8
 1020b60:	bd10      	pop	{r4, pc}
 1020b62:	bf00      	nop

01020b64 <_wctomb_r>:
 1020b64:	b430      	push	{r4, r5}
 1020b66:	f64a 1448 	movw	r4, #43336	; 0xa948
 1020b6a:	f2c0 1406 	movt	r4, #262	; 0x106
 1020b6e:	f64a 5578 	movw	r5, #44408	; 0xad78
 1020b72:	f2c0 1506 	movt	r5, #262	; 0x106
 1020b76:	6824      	ldr	r4, [r4, #0]
 1020b78:	6b64      	ldr	r4, [r4, #52]	; 0x34
 1020b7a:	2c00      	cmp	r4, #0
 1020b7c:	bf08      	it	eq
 1020b7e:	462c      	moveq	r4, r5
 1020b80:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1020b84:	46a4      	mov	ip, r4
 1020b86:	bc30      	pop	{r4, r5}
 1020b88:	4760      	bx	ip
 1020b8a:	bf00      	nop

01020b8c <__ascii_wctomb>:
 1020b8c:	b141      	cbz	r1, 1020ba0 <__ascii_wctomb+0x14>
 1020b8e:	2aff      	cmp	r2, #255	; 0xff
 1020b90:	bf95      	itete	ls
 1020b92:	700a      	strbls	r2, [r1, #0]
 1020b94:	f04f 31ff 	movhi.w	r1, #4294967295
 1020b98:	2101      	movls	r1, #1
 1020b9a:	238a      	movhi	r3, #138	; 0x8a
 1020b9c:	bf88      	it	hi
 1020b9e:	6003      	strhi	r3, [r0, #0]
 1020ba0:	4608      	mov	r0, r1
 1020ba2:	4770      	bx	lr

01020ba4 <__utf8_wctomb>:
 1020ba4:	b3c1      	cbz	r1, 1020c18 <__utf8_wctomb+0x74>
 1020ba6:	2a7f      	cmp	r2, #127	; 0x7f
 1020ba8:	bf9c      	itt	ls
 1020baa:	700a      	strbls	r2, [r1, #0]
 1020bac:	2301      	movls	r3, #1
 1020bae:	d931      	bls.n	1020c14 <__utf8_wctomb+0x70>
 1020bb0:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 1020bb4:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 1020bb8:	d322      	bcc.n	1020c00 <__utf8_wctomb+0x5c>
 1020bba:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 1020bbe:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 1020bc2:	d32c      	bcc.n	1020c1e <__utf8_wctomb+0x7a>
 1020bc4:	f5a2 3380 	sub.w	r3, r2, #65536	; 0x10000
 1020bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 1020bcc:	d237      	bcs.n	1020c3e <__utf8_wctomb+0x9a>
 1020bce:	f3c2 1385 	ubfx	r3, r2, #6, #6
 1020bd2:	f3c2 3005 	ubfx	r0, r2, #12, #6
 1020bd6:	b410      	push	{r4}
 1020bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1020bdc:	0c94      	lsrs	r4, r2, #18
 1020bde:	708b      	strb	r3, [r1, #2]
 1020be0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1020be4:	2304      	movs	r3, #4
 1020be6:	f064 040f 	orn	r4, r4, #15
 1020bea:	f060 007f 	orn	r0, r0, #127	; 0x7f
 1020bee:	700c      	strb	r4, [r1, #0]
 1020bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1020bf4:	7048      	strb	r0, [r1, #1]
 1020bf6:	4618      	mov	r0, r3
 1020bf8:	70ca      	strb	r2, [r1, #3]
 1020bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 1020bfe:	4770      	bx	lr
 1020c00:	0993      	lsrs	r3, r2, #6
 1020c02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1020c06:	f063 033f 	orn	r3, r3, #63	; 0x3f
 1020c0a:	700b      	strb	r3, [r1, #0]
 1020c0c:	2302      	movs	r3, #2
 1020c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1020c12:	704a      	strb	r2, [r1, #1]
 1020c14:	4618      	mov	r0, r3
 1020c16:	4770      	bx	lr
 1020c18:	460b      	mov	r3, r1
 1020c1a:	4618      	mov	r0, r3
 1020c1c:	4770      	bx	lr
 1020c1e:	0b10      	lsrs	r0, r2, #12
 1020c20:	f3c2 1385 	ubfx	r3, r2, #6, #6
 1020c24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1020c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1020c2c:	f060 001f 	orn	r0, r0, #31
 1020c30:	704b      	strb	r3, [r1, #1]
 1020c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1020c36:	7008      	strb	r0, [r1, #0]
 1020c38:	2303      	movs	r3, #3
 1020c3a:	708a      	strb	r2, [r1, #2]
 1020c3c:	e7ea      	b.n	1020c14 <__utf8_wctomb+0x70>
 1020c3e:	228a      	movs	r2, #138	; 0x8a
 1020c40:	f04f 33ff 	mov.w	r3, #4294967295
 1020c44:	6002      	str	r2, [r0, #0]
 1020c46:	e7e5      	b.n	1020c14 <__utf8_wctomb+0x70>

01020c48 <__sjis_wctomb>:
 1020c48:	b2d3      	uxtb	r3, r2
 1020c4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1020c4e:	b1e9      	cbz	r1, 1020c8c <__sjis_wctomb+0x44>
 1020c50:	b1c2      	cbz	r2, 1020c84 <__sjis_wctomb+0x3c>
 1020c52:	b430      	push	{r4, r5}
 1020c54:	f102 057f 	add.w	r5, r2, #127	; 0x7f
 1020c58:	f102 0420 	add.w	r4, r2, #32
 1020c5c:	b2ed      	uxtb	r5, r5
 1020c5e:	b2e4      	uxtb	r4, r4
 1020c60:	2c0f      	cmp	r4, #15
 1020c62:	bf88      	it	hi
 1020c64:	2d1e      	cmphi	r5, #30
 1020c66:	d814      	bhi.n	1020c92 <__sjis_wctomb+0x4a>
 1020c68:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 1020c6c:	f083 0580 	eor.w	r5, r3, #128	; 0x80
 1020c70:	2d7c      	cmp	r5, #124	; 0x7c
 1020c72:	bf88      	it	hi
 1020c74:	2c3e      	cmphi	r4, #62	; 0x3e
 1020c76:	d80c      	bhi.n	1020c92 <__sjis_wctomb+0x4a>
 1020c78:	700a      	strb	r2, [r1, #0]
 1020c7a:	2202      	movs	r2, #2
 1020c7c:	704b      	strb	r3, [r1, #1]
 1020c7e:	4610      	mov	r0, r2
 1020c80:	bc30      	pop	{r4, r5}
 1020c82:	4770      	bx	lr
 1020c84:	2201      	movs	r2, #1
 1020c86:	700b      	strb	r3, [r1, #0]
 1020c88:	4610      	mov	r0, r2
 1020c8a:	4770      	bx	lr
 1020c8c:	460a      	mov	r2, r1
 1020c8e:	4610      	mov	r0, r2
 1020c90:	4770      	bx	lr
 1020c92:	238a      	movs	r3, #138	; 0x8a
 1020c94:	f04f 32ff 	mov.w	r2, #4294967295
 1020c98:	6003      	str	r3, [r0, #0]
 1020c9a:	e7f0      	b.n	1020c7e <__sjis_wctomb+0x36>

01020c9c <__eucjp_wctomb>:
 1020c9c:	b2d3      	uxtb	r3, r2
 1020c9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1020ca2:	b381      	cbz	r1, 1020d06 <__eucjp_wctomb+0x6a>
 1020ca4:	b18a      	cbz	r2, 1020cca <__eucjp_wctomb+0x2e>
 1020ca6:	b430      	push	{r4, r5}
 1020ca8:	f102 045f 	add.w	r4, r2, #95	; 0x5f
 1020cac:	f102 0572 	add.w	r5, r2, #114	; 0x72
 1020cb0:	b2e4      	uxtb	r4, r4
 1020cb2:	b2ed      	uxtb	r5, r5
 1020cb4:	2c5d      	cmp	r4, #93	; 0x5d
 1020cb6:	bf88      	it	hi
 1020cb8:	2d01      	cmphi	r5, #1
 1020cba:	d90a      	bls.n	1020cd2 <__eucjp_wctomb+0x36>
 1020cbc:	f04f 32ff 	mov.w	r2, #4294967295
 1020cc0:	238a      	movs	r3, #138	; 0x8a
 1020cc2:	6003      	str	r3, [r0, #0]
 1020cc4:	4610      	mov	r0, r2
 1020cc6:	bc30      	pop	{r4, r5}
 1020cc8:	4770      	bx	lr
 1020cca:	2201      	movs	r2, #1
 1020ccc:	700b      	strb	r3, [r1, #0]
 1020cce:	4610      	mov	r0, r2
 1020cd0:	4770      	bx	lr
 1020cd2:	f103 055f 	add.w	r5, r3, #95	; 0x5f
 1020cd6:	b2ed      	uxtb	r5, r5
 1020cd8:	2d5d      	cmp	r5, #93	; 0x5d
 1020cda:	bf9e      	ittt	ls
 1020cdc:	700a      	strbls	r2, [r1, #0]
 1020cde:	704b      	strbls	r3, [r1, #1]
 1020ce0:	2202      	movls	r2, #2
 1020ce2:	d9ef      	bls.n	1020cc4 <__eucjp_wctomb+0x28>
 1020ce4:	2c5d      	cmp	r4, #93	; 0x5d
 1020ce6:	d8e9      	bhi.n	1020cbc <__eucjp_wctomb+0x20>
 1020ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 1020cec:	f103 045f 	add.w	r4, r3, #95	; 0x5f
 1020cf0:	b2e4      	uxtb	r4, r4
 1020cf2:	2c5d      	cmp	r4, #93	; 0x5d
 1020cf4:	d8e2      	bhi.n	1020cbc <__eucjp_wctomb+0x20>
 1020cf6:	704a      	strb	r2, [r1, #1]
 1020cf8:	2203      	movs	r2, #3
 1020cfa:	208f      	movs	r0, #143	; 0x8f
 1020cfc:	708b      	strb	r3, [r1, #2]
 1020cfe:	7008      	strb	r0, [r1, #0]
 1020d00:	4610      	mov	r0, r2
 1020d02:	bc30      	pop	{r4, r5}
 1020d04:	4770      	bx	lr
 1020d06:	460a      	mov	r2, r1
 1020d08:	4610      	mov	r0, r2
 1020d0a:	4770      	bx	lr

01020d0c <__jis_wctomb>:
 1020d0c:	b430      	push	{r4, r5}
 1020d0e:	b2d4      	uxtb	r4, r2
 1020d10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1020d14:	b391      	cbz	r1, 1020d7c <__jis_wctomb+0x70>
 1020d16:	b17a      	cbz	r2, 1020d38 <__jis_wctomb+0x2c>
 1020d18:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 1020d1c:	2d5d      	cmp	r5, #93	; 0x5d
 1020d1e:	d831      	bhi.n	1020d84 <__jis_wctomb+0x78>
 1020d20:	f1a4 0521 	sub.w	r5, r4, #33	; 0x21
 1020d24:	2d5d      	cmp	r5, #93	; 0x5d
 1020d26:	d82d      	bhi.n	1020d84 <__jis_wctomb+0x78>
 1020d28:	6818      	ldr	r0, [r3, #0]
 1020d2a:	b1c8      	cbz	r0, 1020d60 <__jis_wctomb+0x54>
 1020d2c:	2302      	movs	r3, #2
 1020d2e:	704c      	strb	r4, [r1, #1]
 1020d30:	4618      	mov	r0, r3
 1020d32:	700a      	strb	r2, [r1, #0]
 1020d34:	bc30      	pop	{r4, r5}
 1020d36:	4770      	bx	lr
 1020d38:	6818      	ldr	r0, [r3, #0]
 1020d3a:	b178      	cbz	r0, 1020d5c <__jis_wctomb+0x50>
 1020d3c:	601a      	str	r2, [r3, #0]
 1020d3e:	3103      	adds	r1, #3
 1020d40:	221b      	movs	r2, #27
 1020d42:	2328      	movs	r3, #40	; 0x28
 1020d44:	f801 2c03 	strb.w	r2, [r1, #-3]
 1020d48:	2242      	movs	r2, #66	; 0x42
 1020d4a:	f801 3c02 	strb.w	r3, [r1, #-2]
 1020d4e:	2304      	movs	r3, #4
 1020d50:	f801 2c01 	strb.w	r2, [r1, #-1]
 1020d54:	700c      	strb	r4, [r1, #0]
 1020d56:	4618      	mov	r0, r3
 1020d58:	bc30      	pop	{r4, r5}
 1020d5a:	4770      	bx	lr
 1020d5c:	2301      	movs	r3, #1
 1020d5e:	e7f9      	b.n	1020d54 <__jis_wctomb+0x48>
 1020d60:	2001      	movs	r0, #1
 1020d62:	3103      	adds	r1, #3
 1020d64:	6018      	str	r0, [r3, #0]
 1020d66:	201b      	movs	r0, #27
 1020d68:	2324      	movs	r3, #36	; 0x24
 1020d6a:	f801 0c03 	strb.w	r0, [r1, #-3]
 1020d6e:	f801 3c02 	strb.w	r3, [r1, #-2]
 1020d72:	2042      	movs	r0, #66	; 0x42
 1020d74:	2305      	movs	r3, #5
 1020d76:	f801 0c01 	strb.w	r0, [r1, #-1]
 1020d7a:	e7d8      	b.n	1020d2e <__jis_wctomb+0x22>
 1020d7c:	2301      	movs	r3, #1
 1020d7e:	4618      	mov	r0, r3
 1020d80:	bc30      	pop	{r4, r5}
 1020d82:	4770      	bx	lr
 1020d84:	228a      	movs	r2, #138	; 0x8a
 1020d86:	f04f 33ff 	mov.w	r3, #4294967295
 1020d8a:	6002      	str	r2, [r0, #0]
 1020d8c:	e7e3      	b.n	1020d56 <__jis_wctomb+0x4a>
 1020d8e:	bf00      	nop

01020d90 <__swsetup_r>:
 1020d90:	b538      	push	{r3, r4, r5, lr}
 1020d92:	f64a 1348 	movw	r3, #43336	; 0xa948
 1020d96:	f2c0 1306 	movt	r3, #262	; 0x106
 1020d9a:	4605      	mov	r5, r0
 1020d9c:	460c      	mov	r4, r1
 1020d9e:	6818      	ldr	r0, [r3, #0]
 1020da0:	b110      	cbz	r0, 1020da8 <__swsetup_r+0x18>
 1020da2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1020da4:	2b00      	cmp	r3, #0
 1020da6:	d03f      	beq.n	1020e28 <__swsetup_r+0x98>
 1020da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1020dac:	b293      	uxth	r3, r2
 1020dae:	0718      	lsls	r0, r3, #28
 1020db0:	bf48      	it	mi
 1020db2:	6920      	ldrmi	r0, [r4, #16]
 1020db4:	d41c      	bmi.n	1020df0 <__swsetup_r+0x60>
 1020db6:	06d9      	lsls	r1, r3, #27
 1020db8:	d545      	bpl.n	1020e46 <__swsetup_r+0xb6>
 1020dba:	0758      	lsls	r0, r3, #29
 1020dbc:	bf58      	it	pl
 1020dbe:	6920      	ldrpl	r0, [r4, #16]
 1020dc0:	d512      	bpl.n	1020de8 <__swsetup_r+0x58>
 1020dc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 1020dc4:	b151      	cbz	r1, 1020ddc <__swsetup_r+0x4c>
 1020dc6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1020dca:	4299      	cmp	r1, r3
 1020dcc:	d004      	beq.n	1020dd8 <__swsetup_r+0x48>
 1020dce:	4628      	mov	r0, r5
 1020dd0:	f001 fa16 	bl	1022200 <_free_r>
 1020dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1020dd8:	2300      	movs	r3, #0
 1020dda:	6323      	str	r3, [r4, #48]	; 0x30
 1020ddc:	6920      	ldr	r0, [r4, #16]
 1020dde:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 1020de2:	2300      	movs	r3, #0
 1020de4:	e9c4 0300 	strd	r0, r3, [r4]
 1020de8:	f042 0308 	orr.w	r3, r2, #8
 1020dec:	81a3      	strh	r3, [r4, #12]
 1020dee:	b29b      	uxth	r3, r3
 1020df0:	b1e8      	cbz	r0, 1020e2e <__swsetup_r+0x9e>
 1020df2:	f013 0201 	ands.w	r2, r3, #1
 1020df6:	d007      	beq.n	1020e08 <__swsetup_r+0x78>
 1020df8:	6963      	ldr	r3, [r4, #20]
 1020dfa:	2200      	movs	r2, #0
 1020dfc:	60a2      	str	r2, [r4, #8]
 1020dfe:	425b      	negs	r3, r3
 1020e00:	61a3      	str	r3, [r4, #24]
 1020e02:	b138      	cbz	r0, 1020e14 <__swsetup_r+0x84>
 1020e04:	2000      	movs	r0, #0
 1020e06:	bd38      	pop	{r3, r4, r5, pc}
 1020e08:	0799      	lsls	r1, r3, #30
 1020e0a:	bf58      	it	pl
 1020e0c:	6962      	ldrpl	r2, [r4, #20]
 1020e0e:	60a2      	str	r2, [r4, #8]
 1020e10:	2800      	cmp	r0, #0
 1020e12:	d1f7      	bne.n	1020e04 <__swsetup_r+0x74>
 1020e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1020e18:	061a      	lsls	r2, r3, #24
 1020e1a:	bf42      	ittt	mi
 1020e1c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 1020e20:	81a3      	strhmi	r3, [r4, #12]
 1020e22:	f04f 30ff 	movmi.w	r0, #4294967295
 1020e26:	bd38      	pop	{r3, r4, r5, pc}
 1020e28:	f001 f970 	bl	102210c <__sinit>
 1020e2c:	e7bc      	b.n	1020da8 <__swsetup_r+0x18>
 1020e2e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 1020e32:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 1020e36:	d0dc      	beq.n	1020df2 <__swsetup_r+0x62>
 1020e38:	4628      	mov	r0, r5
 1020e3a:	4621      	mov	r1, r4
 1020e3c:	f001 fd56 	bl	10228ec <__smakebuf_r>
 1020e40:	89a3      	ldrh	r3, [r4, #12]
 1020e42:	6920      	ldr	r0, [r4, #16]
 1020e44:	e7d5      	b.n	1020df2 <__swsetup_r+0x62>
 1020e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1020e4a:	2309      	movs	r3, #9
 1020e4c:	f04f 30ff 	mov.w	r0, #4294967295
 1020e50:	602b      	str	r3, [r5, #0]
 1020e52:	81a2      	strh	r2, [r4, #12]
 1020e54:	bd38      	pop	{r3, r4, r5, pc}
 1020e56:	bf00      	nop

01020e58 <__call_exitprocs>:
 1020e58:	f246 13cc 	movw	r3, #25036	; 0x61cc
 1020e5c:	f2c0 1306 	movt	r3, #262	; 0x106
 1020e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1020e64:	b085      	sub	sp, #20
 1020e66:	681b      	ldr	r3, [r3, #0]
 1020e68:	460f      	mov	r7, r1
 1020e6a:	468a      	mov	sl, r1
 1020e6c:	f64a 72c9 	movw	r2, #45001	; 0xafc9
 1020e70:	f2c0 1201 	movt	r2, #257	; 0x101
 1020e74:	9203      	str	r2, [sp, #12]
 1020e76:	e9cd 0300 	strd	r0, r3, [sp]
 1020e7a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 1020e7e:	9302      	str	r3, [sp, #8]
 1020e80:	9b01      	ldr	r3, [sp, #4]
 1020e82:	f8dd b008 	ldr.w	fp, [sp, #8]
 1020e86:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 1020e8a:	b32e      	cbz	r6, 1020ed8 <__call_exitprocs+0x80>
 1020e8c:	f04f 0801 	mov.w	r8, #1
 1020e90:	6874      	ldr	r4, [r6, #4]
 1020e92:	1e65      	subs	r5, r4, #1
 1020e94:	bf5e      	ittt	pl
 1020e96:	3401      	addpl	r4, #1
 1020e98:	2700      	movpl	r7, #0
 1020e9a:	eb06 0484 	addpl.w	r4, r6, r4, lsl #2
 1020e9e:	d40a      	bmi.n	1020eb6 <__call_exitprocs+0x5e>
 1020ea0:	f1ba 0f00 	cmp.w	sl, #0
 1020ea4:	d01b      	beq.n	1020ede <__call_exitprocs+0x86>
 1020ea6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 1020eaa:	4553      	cmp	r3, sl
 1020eac:	d017      	beq.n	1020ede <__call_exitprocs+0x86>
 1020eae:	3d01      	subs	r5, #1
 1020eb0:	3c04      	subs	r4, #4
 1020eb2:	1c6b      	adds	r3, r5, #1
 1020eb4:	d1f4      	bne.n	1020ea0 <__call_exitprocs+0x48>
 1020eb6:	9b03      	ldr	r3, [sp, #12]
 1020eb8:	b173      	cbz	r3, 1020ed8 <__call_exitprocs+0x80>
 1020eba:	e9d6 3200 	ldrd	r3, r2, [r6]
 1020ebe:	2a00      	cmp	r2, #0
 1020ec0:	d133      	bne.n	1020f2a <__call_exitprocs+0xd2>
 1020ec2:	2b00      	cmp	r3, #0
 1020ec4:	d031      	beq.n	1020f2a <__call_exitprocs+0xd2>
 1020ec6:	4630      	mov	r0, r6
 1020ec8:	f8cb 3000 	str.w	r3, [fp]
 1020ecc:	f7fa f87c 	bl	101afc8 <free>
 1020ed0:	f8db 6000 	ldr.w	r6, [fp]
 1020ed4:	2e00      	cmp	r6, #0
 1020ed6:	d1db      	bne.n	1020e90 <__call_exitprocs+0x38>
 1020ed8:	b005      	add	sp, #20
 1020eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1020ede:	6873      	ldr	r3, [r6, #4]
 1020ee0:	6822      	ldr	r2, [r4, #0]
 1020ee2:	3b01      	subs	r3, #1
 1020ee4:	42ab      	cmp	r3, r5
 1020ee6:	bf0c      	ite	eq
 1020ee8:	6075      	streq	r5, [r6, #4]
 1020eea:	6027      	strne	r7, [r4, #0]
 1020eec:	2a00      	cmp	r2, #0
 1020eee:	d0de      	beq.n	1020eae <__call_exitprocs+0x56>
 1020ef0:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 1020ef4:	fa08 f305 	lsl.w	r3, r8, r5
 1020ef8:	f8d6 9004 	ldr.w	r9, [r6, #4]
 1020efc:	420b      	tst	r3, r1
 1020efe:	d108      	bne.n	1020f12 <__call_exitprocs+0xba>
 1020f00:	4790      	blx	r2
 1020f02:	6873      	ldr	r3, [r6, #4]
 1020f04:	454b      	cmp	r3, r9
 1020f06:	d1bb      	bne.n	1020e80 <__call_exitprocs+0x28>
 1020f08:	f8db 3000 	ldr.w	r3, [fp]
 1020f0c:	42b3      	cmp	r3, r6
 1020f0e:	d0ce      	beq.n	1020eae <__call_exitprocs+0x56>
 1020f10:	e7b6      	b.n	1020e80 <__call_exitprocs+0x28>
 1020f12:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 1020f16:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 1020f1a:	4203      	tst	r3, r0
 1020f1c:	d102      	bne.n	1020f24 <__call_exitprocs+0xcc>
 1020f1e:	9800      	ldr	r0, [sp, #0]
 1020f20:	4790      	blx	r2
 1020f22:	e7ee      	b.n	1020f02 <__call_exitprocs+0xaa>
 1020f24:	4608      	mov	r0, r1
 1020f26:	4790      	blx	r2
 1020f28:	e7eb      	b.n	1020f02 <__call_exitprocs+0xaa>
 1020f2a:	46b3      	mov	fp, r6
 1020f2c:	461e      	mov	r6, r3
 1020f2e:	2e00      	cmp	r6, #0
 1020f30:	d1ae      	bne.n	1020e90 <__call_exitprocs+0x38>
 1020f32:	e7d1      	b.n	1020ed8 <__call_exitprocs+0x80>

01020f34 <__set_ctype>:
 1020f34:	f246 4328 	movw	r3, #25640	; 0x6428
 1020f38:	f2c0 1306 	movt	r3, #262	; 0x106
 1020f3c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 1020f40:	4770      	bx	lr
 1020f42:	bf00      	nop
 1020f44:	0000      	movs	r0, r0
	...

01020f48 <quorem>:
 1020f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1020f4c:	b085      	sub	sp, #20
 1020f4e:	6903      	ldr	r3, [r0, #16]
 1020f50:	690d      	ldr	r5, [r1, #16]
 1020f52:	42ab      	cmp	r3, r5
 1020f54:	bfb8      	it	lt
 1020f56:	2000      	movlt	r0, #0
 1020f58:	f2c0 8097 	blt.w	102108a <quorem+0x142>
 1020f5c:	3d01      	subs	r5, #1
 1020f5e:	f101 0414 	add.w	r4, r1, #20
 1020f62:	f100 0914 	add.w	r9, r0, #20
 1020f66:	9101      	str	r1, [sp, #4]
 1020f68:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 1020f6c:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 1020f70:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 1020f74:	4680      	mov	r8, r0
 1020f76:	f102 0b01 	add.w	fp, r2, #1
 1020f7a:	eb09 020a 	add.w	r2, r9, sl
 1020f7e:	9203      	str	r2, [sp, #12]
 1020f80:	eb04 070a 	add.w	r7, r4, sl
 1020f84:	4618      	mov	r0, r3
 1020f86:	4659      	mov	r1, fp
 1020f88:	9302      	str	r3, [sp, #8]
 1020f8a:	f7f8 fbbd 	bl	1019708 <__udivsi3>
 1020f8e:	9b02      	ldr	r3, [sp, #8]
 1020f90:	455b      	cmp	r3, fp
 1020f92:	4606      	mov	r6, r0
 1020f94:	d33f      	bcc.n	1021016 <quorem+0xce>
 1020f96:	2000      	movs	r0, #0
 1020f98:	46a6      	mov	lr, r4
 1020f9a:	4602      	mov	r2, r0
 1020f9c:	46cc      	mov	ip, r9
 1020f9e:	f85e bb04 	ldr.w	fp, [lr], #4
 1020fa2:	f8dc 1000 	ldr.w	r1, [ip]
 1020fa6:	4577      	cmp	r7, lr
 1020fa8:	fa1f f38b 	uxth.w	r3, fp
 1020fac:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 1020fb0:	fb06 0303 	mla	r3, r6, r3, r0
 1020fb4:	ea4f 4013 	mov.w	r0, r3, lsr #16
 1020fb8:	b29b      	uxth	r3, r3
 1020fba:	eba2 0303 	sub.w	r3, r2, r3
 1020fbe:	fb06 000b 	mla	r0, r6, fp, r0
 1020fc2:	fa13 f381 	uxtah	r3, r3, r1
 1020fc6:	fa1f fb83 	uxth.w	fp, r3
 1020fca:	b282      	uxth	r2, r0
 1020fcc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1020fd0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
 1020fd4:	eb02 4323 	add.w	r3, r2, r3, asr #16
 1020fd8:	ea4b 4103 	orr.w	r1, fp, r3, lsl #16
 1020fdc:	ea4f 4223 	mov.w	r2, r3, asr #16
 1020fe0:	f84c 1b04 	str.w	r1, [ip], #4
 1020fe4:	d2db      	bcs.n	1020f9e <quorem+0x56>
 1020fe6:	f859 300a 	ldr.w	r3, [r9, sl]
 1020fea:	b9a3      	cbnz	r3, 1021016 <quorem+0xce>
 1020fec:	9a03      	ldr	r2, [sp, #12]
 1020fee:	1f13      	subs	r3, r2, #4
 1020ff0:	4599      	cmp	r9, r3
 1020ff2:	d20e      	bcs.n	1021012 <quorem+0xca>
 1020ff4:	f852 3c04 	ldr.w	r3, [r2, #-4]
 1020ff8:	b95b      	cbnz	r3, 1021012 <quorem+0xca>
 1020ffa:	f1a2 0308 	sub.w	r3, r2, #8
 1020ffe:	e001      	b.n	1021004 <quorem+0xbc>
 1021000:	6812      	ldr	r2, [r2, #0]
 1021002:	b932      	cbnz	r2, 1021012 <quorem+0xca>
 1021004:	4599      	cmp	r9, r3
 1021006:	461a      	mov	r2, r3
 1021008:	f105 35ff 	add.w	r5, r5, #4294967295
 102100c:	f1a3 0304 	sub.w	r3, r3, #4
 1021010:	d3f6      	bcc.n	1021000 <quorem+0xb8>
 1021012:	f8c8 5010 	str.w	r5, [r8, #16]
 1021016:	9901      	ldr	r1, [sp, #4]
 1021018:	4640      	mov	r0, r8
 102101a:	f001 ff75 	bl	1022f08 <__mcmp>
 102101e:	2800      	cmp	r0, #0
 1021020:	db32      	blt.n	1021088 <quorem+0x140>
 1021022:	3601      	adds	r6, #1
 1021024:	4648      	mov	r0, r9
 1021026:	f04f 0c00 	mov.w	ip, #0
 102102a:	f854 2b04 	ldr.w	r2, [r4], #4
 102102e:	6803      	ldr	r3, [r0, #0]
 1021030:	42a7      	cmp	r7, r4
 1021032:	b291      	uxth	r1, r2
 1021034:	ea4f 4212 	mov.w	r2, r2, lsr #16
 1021038:	ebac 0101 	sub.w	r1, ip, r1
 102103c:	ebc2 4c13 	rsb	ip, r2, r3, lsr #16
 1021040:	fa11 f383 	uxtah	r3, r1, r3
 1021044:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
 1021048:	b29b      	uxth	r3, r3
 102104a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 102104e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 1021052:	f840 3b04 	str.w	r3, [r0], #4
 1021056:	d2e8      	bcs.n	102102a <quorem+0xe2>
 1021058:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 102105c:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 1021060:	b992      	cbnz	r2, 1021088 <quorem+0x140>
 1021062:	1f1a      	subs	r2, r3, #4
 1021064:	4591      	cmp	r9, r2
 1021066:	d20d      	bcs.n	1021084 <quorem+0x13c>
 1021068:	f853 2c04 	ldr.w	r2, [r3, #-4]
 102106c:	b952      	cbnz	r2, 1021084 <quorem+0x13c>
 102106e:	3b08      	subs	r3, #8
 1021070:	e001      	b.n	1021076 <quorem+0x12e>
 1021072:	6812      	ldr	r2, [r2, #0]
 1021074:	b932      	cbnz	r2, 1021084 <quorem+0x13c>
 1021076:	4599      	cmp	r9, r3
 1021078:	461a      	mov	r2, r3
 102107a:	f105 35ff 	add.w	r5, r5, #4294967295
 102107e:	f1a3 0304 	sub.w	r3, r3, #4
 1021082:	d3f6      	bcc.n	1021072 <quorem+0x12a>
 1021084:	f8c8 5010 	str.w	r5, [r8, #16]
 1021088:	4630      	mov	r0, r6
 102108a:	b005      	add	sp, #20
 102108c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01021090 <_dtoa_r>:
 1021090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1021094:	b093      	sub	sp, #76	; 0x4c
 1021096:	ec57 6b10 	vmov	r6, r7, d0
 102109a:	4604      	mov	r4, r0
 102109c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 102109e:	468a      	mov	sl, r1
 10210a0:	e9cd 3207 	strd	r3, r2, [sp, #28]
 10210a4:	e9cd 6700 	strd	r6, r7, [sp]
 10210a8:	b14d      	cbz	r5, 10210be <_dtoa_r+0x2e>
 10210aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 10210ac:	2301      	movs	r3, #1
 10210ae:	4629      	mov	r1, r5
 10210b0:	4093      	lsls	r3, r2
 10210b2:	e9c5 2301 	strd	r2, r3, [r5, #4]
 10210b6:	f001 fce1 	bl	1022a7c <_Bfree>
 10210ba:	2300      	movs	r3, #0
 10210bc:	6423      	str	r3, [r4, #64]	; 0x40
 10210be:	1e3e      	subs	r6, r7, #0
 10210c0:	bfbf      	itttt	lt
 10210c2:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 10210c6:	9601      	strlt	r6, [sp, #4]
 10210c8:	9a1c      	ldrlt	r2, [sp, #112]	; 0x70
 10210ca:	2301      	movlt	r3, #1
 10210cc:	bfa5      	ittet	ge
 10210ce:	9a1c      	ldrge	r2, [sp, #112]	; 0x70
 10210d0:	2300      	movge	r3, #0
 10210d2:	6013      	strlt	r3, [r2, #0]
 10210d4:	6013      	strge	r3, [r2, #0]
 10210d6:	2300      	movs	r3, #0
 10210d8:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 10210dc:	43b3      	bics	r3, r6
 10210de:	f000 80b1 	beq.w	1021244 <_dtoa_r+0x1b4>
 10210e2:	ed9d 7b00 	vldr	d7, [sp]
 10210e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 10210ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 10210ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10210f2:	d10e      	bne.n	1021112 <_dtoa_r+0x82>
 10210f4:	9a07      	ldr	r2, [sp, #28]
 10210f6:	2301      	movs	r3, #1
 10210f8:	6013      	str	r3, [r2, #0]
 10210fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 10210fc:	2b00      	cmp	r3, #0
 10210fe:	f000 8358 	beq.w	10217b2 <_dtoa_r+0x722>
 1021102:	4bc3      	ldr	r3, [pc, #780]	; (1021410 <_dtoa_r+0x380>)
 1021104:	1e5e      	subs	r6, r3, #1
 1021106:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 1021108:	6013      	str	r3, [r2, #0]
 102110a:	4630      	mov	r0, r6
 102110c:	b013      	add	sp, #76	; 0x4c
 102110e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1021112:	aa10      	add	r2, sp, #64	; 0x40
 1021114:	a911      	add	r1, sp, #68	; 0x44
 1021116:	ed9d 0b02 	vldr	d0, [sp, #8]
 102111a:	4620      	mov	r0, r4
 102111c:	f002 f816 	bl	102314c <__d2b>
 1021120:	ea5f 5b16 	movs.w	fp, r6, lsr #20
 1021124:	4680      	mov	r8, r0
 1021126:	f040 80a1 	bne.w	102126c <_dtoa_r+0x1dc>
 102112a:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
 102112e:	eb01 0b03 	add.w	fp, r1, r3
 1021132:	f20b 4332 	addw	r3, fp, #1074	; 0x432
 1021136:	2b20      	cmp	r3, #32
 1021138:	f340 8343 	ble.w	10217c2 <_dtoa_r+0x732>
 102113c:	f20b 4212 	addw	r2, fp, #1042	; 0x412
 1021140:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 1021144:	409e      	lsls	r6, r3
 1021146:	4613      	mov	r3, r2
 1021148:	9a00      	ldr	r2, [sp, #0]
 102114a:	fa22 f303 	lsr.w	r3, r2, r3
 102114e:	4333      	orrs	r3, r6
 1021150:	ee07 3a90 	vmov	s15, r3
 1021154:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 1021158:	2301      	movs	r3, #1
 102115a:	f10b 3bff 	add.w	fp, fp, #4294967295
 102115e:	930c      	str	r3, [sp, #48]	; 0x30
 1021160:	ed8d 7b04 	vstr	d7, [sp, #16]
 1021164:	9805      	ldr	r0, [sp, #20]
 1021166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 102116a:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 102116e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 1021172:	ec43 2b13 	vmov	d3, r2, r3
 1021176:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 10213f8 <_dtoa_r+0x368>
 102117a:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 1021400 <_dtoa_r+0x370>
 102117e:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 1021408 <_dtoa_r+0x378>
 1021182:	ee33 6b46 	vsub.f64	d6, d3, d6
 1021186:	ee06 7b04 	vmla.f64	d7, d6, d4
 102118a:	ee06 ba90 	vmov	s13, fp
 102118e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1021192:	ee06 7b05 	vmla.f64	d7, d6, d5
 1021196:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 102119a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 102119e:	ee16 5a90 	vmov	r5, s13
 10211a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10211a6:	d508      	bpl.n	10211ba <_dtoa_r+0x12a>
 10211a8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 10211ac:	eeb4 6b47 	vcmp.f64	d6, d7
 10211b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10211b4:	bf18      	it	ne
 10211b6:	f105 35ff 	addne.w	r5, r5, #4294967295
 10211ba:	2d16      	cmp	r5, #22
 10211bc:	eba1 0b0b 	sub.w	fp, r1, fp
 10211c0:	f10b 36ff 	add.w	r6, fp, #4294967295
 10211c4:	f200 82e7 	bhi.w	1021796 <_dtoa_r+0x706>
 10211c8:	f246 5340 	movw	r3, #25920	; 0x6540
 10211cc:	f2c0 1306 	movt	r3, #262	; 0x106
 10211d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 10211d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 10211d8:	ed93 7b00 	vldr	d7, [r3]
 10211dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 10211e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10211e4:	d55b      	bpl.n	102129e <_dtoa_r+0x20e>
 10211e6:	2e00      	cmp	r6, #0
 10211e8:	f04f 0300 	mov.w	r3, #0
 10211ec:	f105 35ff 	add.w	r5, r5, #4294967295
 10211f0:	930d      	str	r3, [sp, #52]	; 0x34
 10211f2:	bfa4      	itt	ge
 10211f4:	2300      	movge	r3, #0
 10211f6:	9309      	strge	r3, [sp, #36]	; 0x24
 10211f8:	f2c0 82d6 	blt.w	10217a8 <_dtoa_r+0x718>
 10211fc:	2d00      	cmp	r5, #0
 10211fe:	da56      	bge.n	10212ae <_dtoa_r+0x21e>
 1021200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021202:	f1ba 0f09 	cmp.w	sl, #9
 1021206:	9504      	str	r5, [sp, #16]
 1021208:	eba3 0305 	sub.w	r3, r3, r5
 102120c:	9309      	str	r3, [sp, #36]	; 0x24
 102120e:	f1c5 0300 	rsb	r3, r5, #0
 1021212:	f04f 0500 	mov.w	r5, #0
 1021216:	930b      	str	r3, [sp, #44]	; 0x2c
 1021218:	d851      	bhi.n	10212be <_dtoa_r+0x22e>
 102121a:	f1ba 0f05 	cmp.w	sl, #5
 102121e:	bfc4      	itt	gt
 1021220:	f1aa 0a04 	subgt.w	sl, sl, #4
 1021224:	f04f 0900 	movgt.w	r9, #0
 1021228:	dc01      	bgt.n	102122e <_dtoa_r+0x19e>
 102122a:	f04f 0901 	mov.w	r9, #1
 102122e:	f1aa 0302 	sub.w	r3, sl, #2
 1021232:	2b03      	cmp	r3, #3
 1021234:	f200 8477 	bhi.w	1021b26 <_dtoa_r+0xa96>
 1021238:	e8df f013 	tbh	[pc, r3, lsl #1]
 102123c:	0367036a 	.word	0x0367036a
 1021240:	035b033d 	.word	0x035b033d
 1021244:	9a07      	ldr	r2, [sp, #28]
 1021246:	f242 730f 	movw	r3, #9999	; 0x270f
 102124a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 102124e:	6013      	str	r3, [r2, #0]
 1021250:	9b00      	ldr	r3, [sp, #0]
 1021252:	4333      	orrs	r3, r6
 1021254:	d119      	bne.n	102128a <_dtoa_r+0x1fa>
 1021256:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1021258:	f24a 467c 	movw	r6, #42108	; 0xa47c
 102125c:	f2c0 1606 	movt	r6, #262	; 0x106
 1021260:	2b00      	cmp	r3, #0
 1021262:	f43f af52 	beq.w	102110a <_dtoa_r+0x7a>
 1021266:	f106 0308 	add.w	r3, r6, #8
 102126a:	e74c      	b.n	1021106 <_dtoa_r+0x76>
 102126c:	9903      	ldr	r1, [sp, #12]
 102126e:	2000      	movs	r0, #0
 1021270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1021274:	f2ab 3bff 	subw	fp, fp, #1023	; 0x3ff
 1021278:	f3c1 0113 	ubfx	r1, r1, #0, #20
 102127c:	900c      	str	r0, [sp, #48]	; 0x30
 102127e:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1021282:	9910      	ldr	r1, [sp, #64]	; 0x40
 1021284:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1021288:	e771      	b.n	102116e <_dtoa_r+0xde>
 102128a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 102128c:	f24a 4678 	movw	r6, #42104	; 0xa478
 1021290:	f2c0 1606 	movt	r6, #262	; 0x106
 1021294:	2b00      	cmp	r3, #0
 1021296:	f43f af38 	beq.w	102110a <_dtoa_r+0x7a>
 102129a:	1cf3      	adds	r3, r6, #3
 102129c:	e733      	b.n	1021106 <_dtoa_r+0x76>
 102129e:	2e00      	cmp	r6, #0
 10212a0:	f04f 0300 	mov.w	r3, #0
 10212a4:	930d      	str	r3, [sp, #52]	; 0x34
 10212a6:	bfa8      	it	ge
 10212a8:	9309      	strge	r3, [sp, #36]	; 0x24
 10212aa:	f2c0 827d 	blt.w	10217a8 <_dtoa_r+0x718>
 10212ae:	f1ba 0f09 	cmp.w	sl, #9
 10212b2:	f04f 0300 	mov.w	r3, #0
 10212b6:	442e      	add	r6, r5
 10212b8:	9504      	str	r5, [sp, #16]
 10212ba:	930b      	str	r3, [sp, #44]	; 0x2c
 10212bc:	d9ad      	bls.n	102121a <_dtoa_r+0x18a>
 10212be:	f04f 0a00 	mov.w	sl, #0
 10212c2:	f04f 37ff 	mov.w	r7, #4294967295
 10212c6:	46d1      	mov	r9, sl
 10212c8:	2301      	movs	r3, #1
 10212ca:	f8cd a020 	str.w	sl, [sp, #32]
 10212ce:	930a      	str	r3, [sp, #40]	; 0x28
 10212d0:	2100      	movs	r1, #0
 10212d2:	970e      	str	r7, [sp, #56]	; 0x38
 10212d4:	6461      	str	r1, [r4, #68]	; 0x44
 10212d6:	4620      	mov	r0, r4
 10212d8:	f001 fbaa 	bl	1022a30 <_Balloc>
 10212dc:	4683      	mov	fp, r0
 10212de:	6420      	str	r0, [r4, #64]	; 0x40
 10212e0:	f1b9 0f00 	cmp.w	r9, #0
 10212e4:	f000 80e2 	beq.w	10214ac <_dtoa_r+0x41c>
 10212e8:	9a04      	ldr	r2, [sp, #16]
 10212ea:	2a00      	cmp	r2, #0
 10212ec:	f340 827a 	ble.w	10217e4 <_dtoa_r+0x754>
 10212f0:	f002 010f 	and.w	r1, r2, #15
 10212f4:	f246 5340 	movw	r3, #25920	; 0x6540
 10212f8:	f2c0 1306 	movt	r3, #262	; 0x106
 10212fc:	1112      	asrs	r2, r2, #4
 10212fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1021302:	ed93 6b00 	vldr	d6, [r3]
 1021306:	06d3      	lsls	r3, r2, #27
 1021308:	f140 82d1 	bpl.w	10218ae <_dtoa_r+0x81e>
 102130c:	f246 6330 	movw	r3, #26160	; 0x6630
 1021310:	f2c0 1306 	movt	r3, #262	; 0x106
 1021314:	ed9d 5b02 	vldr	d5, [sp, #8]
 1021318:	f002 020f 	and.w	r2, r2, #15
 102131c:	2103      	movs	r1, #3
 102131e:	ed93 7b08 	vldr	d7, [r3, #32]
 1021322:	ee85 5b07 	vdiv.f64	d5, d5, d7
 1021326:	f246 6330 	movw	r3, #26160	; 0x6630
 102132a:	f2c0 1306 	movt	r3, #262	; 0x106
 102132e:	b152      	cbz	r2, 1021346 <_dtoa_r+0x2b6>
 1021330:	07d0      	lsls	r0, r2, #31
 1021332:	d504      	bpl.n	102133e <_dtoa_r+0x2ae>
 1021334:	ed93 7b00 	vldr	d7, [r3]
 1021338:	3101      	adds	r1, #1
 102133a:	ee26 6b07 	vmul.f64	d6, d6, d7
 102133e:	1052      	asrs	r2, r2, #1
 1021340:	f103 0308 	add.w	r3, r3, #8
 1021344:	d1f4      	bne.n	1021330 <_dtoa_r+0x2a0>
 1021346:	ee85 7b06 	vdiv.f64	d7, d5, d6
 102134a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 102134c:	b13b      	cbz	r3, 102135e <_dtoa_r+0x2ce>
 102134e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 1021352:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1021356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 102135a:	f100 83b3 	bmi.w	1021ac4 <_dtoa_r+0xa34>
 102135e:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 1021362:	ee05 1a90 	vmov	s11, r1
 1021366:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 102136a:	ee05 6b07 	vmla.f64	d6, d5, d7
 102136e:	ed8d 6b00 	vstr	d6, [sp]
 1021372:	9b01      	ldr	r3, [sp, #4]
 1021374:	e9dd 0100 	ldrd	r0, r1, [sp]
 1021378:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 102137c:	2f00      	cmp	r7, #0
 102137e:	d07d      	beq.n	102147c <_dtoa_r+0x3ec>
 1021380:	f8dd e010 	ldr.w	lr, [sp, #16]
 1021384:	463a      	mov	r2, r7
 1021386:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 102138a:	f246 5c40 	movw	ip, #25920	; 0x6540
 102138e:	ec41 0b15 	vmov	d5, r0, r1
 1021392:	f2c0 1c06 	movt	ip, #262	; 0x106
 1021396:	980a      	ldr	r0, [sp, #40]	; 0x28
 1021398:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 102139c:	f10b 0301 	add.w	r3, fp, #1
 10213a0:	ed1c 3b02 	vldr	d3, [ip, #-8]
 10213a4:	ee16 1a90 	vmov	r1, s13
 10213a8:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 10213ac:	ee37 7b44 	vsub.f64	d7, d7, d4
 10213b0:	3130      	adds	r1, #48	; 0x30
 10213b2:	b2c9      	uxtb	r1, r1
 10213b4:	2800      	cmp	r0, #0
 10213b6:	f000 82ae 	beq.w	1021916 <_dtoa_r+0x886>
 10213ba:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 10213be:	f88b 1000 	strb.w	r1, [fp]
 10213c2:	ee84 6b03 	vdiv.f64	d6, d4, d3
 10213c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 10213ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 10213ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10213d2:	dc3e      	bgt.n	1021452 <_dtoa_r+0x3c2>
 10213d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 10213d8:	ee32 5b47 	vsub.f64	d5, d2, d7
 10213dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 10213e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10213e4:	f300 8473 	bgt.w	1021cce <_dtoa_r+0xc3e>
 10213e8:	2a01      	cmp	r2, #1
 10213ea:	d05b      	beq.n	10214a4 <_dtoa_r+0x414>
 10213ec:	445a      	add	r2, fp
 10213ee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 10213f2:	e019      	b.n	1021428 <_dtoa_r+0x398>
 10213f4:	f3af 8000 	nop.w
 10213f8:	636f4361 	.word	0x636f4361
 10213fc:	3fd287a7 	.word	0x3fd287a7
 1021400:	8b60c8b3 	.word	0x8b60c8b3
 1021404:	3fc68a28 	.word	0x3fc68a28
 1021408:	509f79fb 	.word	0x509f79fb
 102140c:	3fd34413 	.word	0x3fd34413
 1021410:	010689e9 	.word	0x010689e9
 1021414:	ee32 5b47 	vsub.f64	d5, d2, d7
 1021418:	eeb4 5bc6 	vcmpe.f64	d5, d6
 102141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021420:	f100 8455 	bmi.w	1021cce <_dtoa_r+0xc3e>
 1021424:	4293      	cmp	r3, r2
 1021426:	d03d      	beq.n	10214a4 <_dtoa_r+0x414>
 1021428:	ee27 5b04 	vmul.f64	d5, d7, d4
 102142c:	ee26 6b04 	vmul.f64	d6, d6, d4
 1021430:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 1021434:	ee17 1a90 	vmov	r1, s15
 1021438:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 102143c:	ee35 7b43 	vsub.f64	d7, d5, d3
 1021440:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1021444:	3130      	adds	r1, #48	; 0x30
 1021446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 102144a:	b2c9      	uxtb	r1, r1
 102144c:	f803 1b01 	strb.w	r1, [r3], #1
 1021450:	d5e0      	bpl.n	1021414 <_dtoa_r+0x384>
 1021452:	465e      	mov	r6, fp
 1021454:	f10e 0201 	add.w	r2, lr, #1
 1021458:	469b      	mov	fp, r3
 102145a:	9204      	str	r2, [sp, #16]
 102145c:	e0e3      	b.n	1021626 <_dtoa_r+0x596>
 102145e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 1021462:	ee06 1a90 	vmov	s13, r1
 1021466:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 102146a:	ee06 5b07 	vmla.f64	d5, d6, d7
 102146e:	ed8d 5b00 	vstr	d5, [sp]
 1021472:	9b01      	ldr	r3, [sp, #4]
 1021474:	e9dd 0100 	ldrd	r0, r1, [sp]
 1021478:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 102147c:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 1021480:	ec41 0b15 	vmov	d5, r0, r1
 1021484:	ee37 7b46 	vsub.f64	d7, d7, d6
 1021488:	eeb4 7bc5 	vcmpe.f64	d7, d5
 102148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021490:	f300 8345 	bgt.w	1021b1e <_dtoa_r+0xa8e>
 1021494:	eeb1 5b45 	vneg.f64	d5, d5
 1021498:	eeb4 7bc5 	vcmpe.f64	d7, d5
 102149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10214a0:	f100 8171 	bmi.w	1021786 <_dtoa_r+0x6f6>
 10214a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10214a8:	e9cd 2300 	strd	r2, r3, [sp]
 10214ac:	9a04      	ldr	r2, [sp, #16]
 10214ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10214b0:	4611      	mov	r1, r2
 10214b2:	290e      	cmp	r1, #14
 10214b4:	ea6f 0203 	mvn.w	r2, r3
 10214b8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 10214bc:	bfc8      	it	gt
 10214be:	2200      	movgt	r2, #0
 10214c0:	2a00      	cmp	r2, #0
 10214c2:	f040 814a 	bne.w	102175a <_dtoa_r+0x6ca>
 10214c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 10214c8:	2a00      	cmp	r2, #0
 10214ca:	f000 8182 	beq.w	10217d2 <_dtoa_r+0x742>
 10214ce:	f1ba 0f01 	cmp.w	sl, #1
 10214d2:	f340 8316 	ble.w	1021b02 <_dtoa_r+0xa72>
 10214d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10214d8:	1e7a      	subs	r2, r7, #1
 10214da:	4293      	cmp	r3, r2
 10214dc:	bfaf      	iteee	ge
 10214de:	1a9b      	subge	r3, r3, r2
 10214e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 10214e2:	920b      	strlt	r2, [sp, #44]	; 0x2c
 10214e4:	1ad3      	sublt	r3, r2, r3
 10214e6:	bfbc      	itt	lt
 10214e8:	18ed      	addlt	r5, r5, r3
 10214ea:	2300      	movlt	r3, #0
 10214ec:	2f00      	cmp	r7, #0
 10214ee:	9302      	str	r3, [sp, #8]
 10214f0:	bfa5      	ittet	ge
 10214f2:	19f6      	addge	r6, r6, r7
 10214f4:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 10214f6:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 10214f8:	930c      	strge	r3, [sp, #48]	; 0x30
 10214fa:	bfb5      	itete	lt
 10214fc:	1bdb      	sublt	r3, r3, r7
 10214fe:	19db      	addge	r3, r3, r7
 1021500:	930c      	strlt	r3, [sp, #48]	; 0x30
 1021502:	9309      	strge	r3, [sp, #36]	; 0x24
 1021504:	2101      	movs	r1, #1
 1021506:	4620      	mov	r0, r4
 1021508:	f001 fba4 	bl	1022c54 <__i2b>
 102150c:	4681      	mov	r9, r0
 102150e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1021510:	2a00      	cmp	r2, #0
 1021512:	bfc8      	it	gt
 1021514:	2e00      	cmpgt	r6, #0
 1021516:	dd09      	ble.n	102152c <_dtoa_r+0x49c>
 1021518:	42b2      	cmp	r2, r6
 102151a:	4613      	mov	r3, r2
 102151c:	9909      	ldr	r1, [sp, #36]	; 0x24
 102151e:	bfa8      	it	ge
 1021520:	4633      	movge	r3, r6
 1021522:	1af6      	subs	r6, r6, r3
 1021524:	1ac9      	subs	r1, r1, r3
 1021526:	1ad2      	subs	r2, r2, r3
 1021528:	9109      	str	r1, [sp, #36]	; 0x24
 102152a:	920c      	str	r2, [sp, #48]	; 0x30
 102152c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102152e:	b163      	cbz	r3, 102154a <_dtoa_r+0x4ba>
 1021530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1021532:	2b00      	cmp	r3, #0
 1021534:	f000 810a 	beq.w	102174c <_dtoa_r+0x6bc>
 1021538:	9b02      	ldr	r3, [sp, #8]
 102153a:	2b00      	cmp	r3, #0
 102153c:	f300 8294 	bgt.w	1021a68 <_dtoa_r+0x9d8>
 1021540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021542:	9a02      	ldr	r2, [sp, #8]
 1021544:	1a9a      	subs	r2, r3, r2
 1021546:	f040 8102 	bne.w	102174e <_dtoa_r+0x6be>
 102154a:	2101      	movs	r1, #1
 102154c:	4620      	mov	r0, r4
 102154e:	f001 fb81 	bl	1022c54 <__i2b>
 1021552:	2d00      	cmp	r5, #0
 1021554:	9002      	str	r0, [sp, #8]
 1021556:	f300 8174 	bgt.w	1021842 <_dtoa_r+0x7b2>
 102155a:	f1ba 0f01 	cmp.w	sl, #1
 102155e:	f340 82a5 	ble.w	1021aac <_dtoa_r+0xa1c>
 1021562:	2300      	movs	r3, #0
 1021564:	930b      	str	r3, [sp, #44]	; 0x2c
 1021566:	2001      	movs	r0, #1
 1021568:	2d00      	cmp	r5, #0
 102156a:	f040 8176 	bne.w	102185a <_dtoa_r+0x7ca>
 102156e:	4430      	add	r0, r6
 1021570:	f010 001f 	ands.w	r0, r0, #31
 1021574:	f000 8134 	beq.w	10217e0 <_dtoa_r+0x750>
 1021578:	f1c0 0320 	rsb	r3, r0, #32
 102157c:	2b04      	cmp	r3, #4
 102157e:	f340 83fe 	ble.w	1021d7e <_dtoa_r+0xcee>
 1021582:	f1c0 001c 	rsb	r0, r0, #28
 1021586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021588:	4406      	add	r6, r0
 102158a:	4403      	add	r3, r0
 102158c:	9309      	str	r3, [sp, #36]	; 0x24
 102158e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1021590:	4403      	add	r3, r0
 1021592:	930c      	str	r3, [sp, #48]	; 0x30
 1021594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021596:	2b00      	cmp	r3, #0
 1021598:	dd05      	ble.n	10215a6 <_dtoa_r+0x516>
 102159a:	4641      	mov	r1, r8
 102159c:	461a      	mov	r2, r3
 102159e:	4620      	mov	r0, r4
 10215a0:	f001 fc54 	bl	1022e4c <__lshift>
 10215a4:	4680      	mov	r8, r0
 10215a6:	2e00      	cmp	r6, #0
 10215a8:	dd05      	ble.n	10215b6 <_dtoa_r+0x526>
 10215aa:	4632      	mov	r2, r6
 10215ac:	9902      	ldr	r1, [sp, #8]
 10215ae:	4620      	mov	r0, r4
 10215b0:	f001 fc4c 	bl	1022e4c <__lshift>
 10215b4:	9002      	str	r0, [sp, #8]
 10215b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10215b8:	f1ba 0f02 	cmp.w	sl, #2
 10215bc:	bfd4      	ite	le
 10215be:	2500      	movle	r5, #0
 10215c0:	2501      	movgt	r5, #1
 10215c2:	2b00      	cmp	r3, #0
 10215c4:	f040 8153 	bne.w	102186e <_dtoa_r+0x7de>
 10215c8:	2f00      	cmp	r7, #0
 10215ca:	bfcc      	ite	gt
 10215cc:	2500      	movgt	r5, #0
 10215ce:	f005 0501 	andle.w	r5, r5, #1
 10215d2:	2d00      	cmp	r5, #0
 10215d4:	d03c      	beq.n	1021650 <_dtoa_r+0x5c0>
 10215d6:	2f00      	cmp	r7, #0
 10215d8:	f040 80d8 	bne.w	102178c <_dtoa_r+0x6fc>
 10215dc:	463b      	mov	r3, r7
 10215de:	9902      	ldr	r1, [sp, #8]
 10215e0:	2205      	movs	r2, #5
 10215e2:	4620      	mov	r0, r4
 10215e4:	f001 fa54 	bl	1022a90 <__multadd>
 10215e8:	4601      	mov	r1, r0
 10215ea:	9002      	str	r0, [sp, #8]
 10215ec:	4640      	mov	r0, r8
 10215ee:	f001 fc8b 	bl	1022f08 <__mcmp>
 10215f2:	2800      	cmp	r0, #0
 10215f4:	f340 80ca 	ble.w	102178c <_dtoa_r+0x6fc>
 10215f8:	9a04      	ldr	r2, [sp, #16]
 10215fa:	465b      	mov	r3, fp
 10215fc:	465e      	mov	r6, fp
 10215fe:	f102 0a01 	add.w	sl, r2, #1
 1021602:	2231      	movs	r2, #49	; 0x31
 1021604:	f803 2b01 	strb.w	r2, [r3], #1
 1021608:	469b      	mov	fp, r3
 102160a:	9902      	ldr	r1, [sp, #8]
 102160c:	4620      	mov	r0, r4
 102160e:	f10a 0301 	add.w	r3, sl, #1
 1021612:	9304      	str	r3, [sp, #16]
 1021614:	f001 fa32 	bl	1022a7c <_Bfree>
 1021618:	f1b9 0f00 	cmp.w	r9, #0
 102161c:	d003      	beq.n	1021626 <_dtoa_r+0x596>
 102161e:	4649      	mov	r1, r9
 1021620:	4620      	mov	r0, r4
 1021622:	f001 fa2b 	bl	1022a7c <_Bfree>
 1021626:	4641      	mov	r1, r8
 1021628:	4620      	mov	r0, r4
 102162a:	f001 fa27 	bl	1022a7c <_Bfree>
 102162e:	2300      	movs	r3, #0
 1021630:	f88b 3000 	strb.w	r3, [fp]
 1021634:	9b07      	ldr	r3, [sp, #28]
 1021636:	461a      	mov	r2, r3
 1021638:	9b04      	ldr	r3, [sp, #16]
 102163a:	6013      	str	r3, [r2, #0]
 102163c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 102163e:	2b00      	cmp	r3, #0
 1021640:	f43f ad63 	beq.w	102110a <_dtoa_r+0x7a>
 1021644:	4630      	mov	r0, r6
 1021646:	f8c3 b000 	str.w	fp, [r3]
 102164a:	b013      	add	sp, #76	; 0x4c
 102164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1021650:	9b04      	ldr	r3, [sp, #16]
 1021652:	3301      	adds	r3, #1
 1021654:	9304      	str	r3, [sp, #16]
 1021656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1021658:	2b00      	cmp	r3, #0
 102165a:	f000 818e 	beq.w	102197a <_dtoa_r+0x8ea>
 102165e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1021660:	2b00      	cmp	r3, #0
 1021662:	dd05      	ble.n	1021670 <_dtoa_r+0x5e0>
 1021664:	4649      	mov	r1, r9
 1021666:	461a      	mov	r2, r3
 1021668:	4620      	mov	r0, r4
 102166a:	f001 fbef 	bl	1022e4c <__lshift>
 102166e:	4681      	mov	r9, r0
 1021670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021672:	2b00      	cmp	r3, #0
 1021674:	f040 8315 	bne.w	1021ca2 <_dtoa_r+0xc12>
 1021678:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 102167c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 1021680:	f10b 33ff 	add.w	r3, fp, #4294967295
 1021684:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 1021688:	443b      	add	r3, r7
 102168a:	9a00      	ldr	r2, [sp, #0]
 102168c:	465f      	mov	r7, fp
 102168e:	930b      	str	r3, [sp, #44]	; 0x2c
 1021690:	f002 0201 	and.w	r2, r2, #1
 1021694:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 1021698:	9208      	str	r2, [sp, #32]
 102169a:	9d02      	ldr	r5, [sp, #8]
 102169c:	4640      	mov	r0, r8
 102169e:	4629      	mov	r1, r5
 10216a0:	f7ff fc52 	bl	1020f48 <quorem>
 10216a4:	4649      	mov	r1, r9
 10216a6:	4683      	mov	fp, r0
 10216a8:	4640      	mov	r0, r8
 10216aa:	f001 fc2d 	bl	1022f08 <__mcmp>
 10216ae:	4629      	mov	r1, r5
 10216b0:	4652      	mov	r2, sl
 10216b2:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 10216b6:	9300      	str	r3, [sp, #0]
 10216b8:	4606      	mov	r6, r0
 10216ba:	4620      	mov	r0, r4
 10216bc:	f001 fc42 	bl	1022f44 <__mdiff>
 10216c0:	68c3      	ldr	r3, [r0, #12]
 10216c2:	4605      	mov	r5, r0
 10216c4:	4601      	mov	r1, r0
 10216c6:	2b00      	cmp	r3, #0
 10216c8:	f040 81e1 	bne.w	1021a8e <_dtoa_r+0x9fe>
 10216cc:	4640      	mov	r0, r8
 10216ce:	f001 fc1b 	bl	1022f08 <__mcmp>
 10216d2:	4629      	mov	r1, r5
 10216d4:	900a      	str	r0, [sp, #40]	; 0x28
 10216d6:	4620      	mov	r0, r4
 10216d8:	f001 f9d0 	bl	1022a7c <_Bfree>
 10216dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10216de:	9908      	ldr	r1, [sp, #32]
 10216e0:	461a      	mov	r2, r3
 10216e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 10216e4:	431a      	orrs	r2, r3
 10216e6:	430a      	orrs	r2, r1
 10216e8:	f000 8321 	beq.w	1021d2e <_dtoa_r+0xc9e>
 10216ec:	2e00      	cmp	r6, #0
 10216ee:	f107 0501 	add.w	r5, r7, #1
 10216f2:	f2c0 82ae 	blt.w	1021c52 <_dtoa_r+0xbc2>
 10216f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10216f8:	4316      	orrs	r6, r2
 10216fa:	9a08      	ldr	r2, [sp, #32]
 10216fc:	4332      	orrs	r2, r6
 10216fe:	f000 82a8 	beq.w	1021c52 <_dtoa_r+0xbc2>
 1021702:	2b00      	cmp	r3, #0
 1021704:	f300 82e8 	bgt.w	1021cd8 <_dtoa_r+0xc48>
 1021708:	9b00      	ldr	r3, [sp, #0]
 102170a:	703b      	strb	r3, [r7, #0]
 102170c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102170e:	42bb      	cmp	r3, r7
 1021710:	f000 82f0 	beq.w	1021cf4 <_dtoa_r+0xc64>
 1021714:	4641      	mov	r1, r8
 1021716:	2300      	movs	r3, #0
 1021718:	220a      	movs	r2, #10
 102171a:	4620      	mov	r0, r4
 102171c:	f001 f9b8 	bl	1022a90 <__multadd>
 1021720:	45d1      	cmp	r9, sl
 1021722:	4649      	mov	r1, r9
 1021724:	f04f 0300 	mov.w	r3, #0
 1021728:	f04f 020a 	mov.w	r2, #10
 102172c:	4680      	mov	r8, r0
 102172e:	4620      	mov	r0, r4
 1021730:	f000 81b2 	beq.w	1021a98 <_dtoa_r+0xa08>
 1021734:	f001 f9ac 	bl	1022a90 <__multadd>
 1021738:	4651      	mov	r1, sl
 102173a:	2300      	movs	r3, #0
 102173c:	220a      	movs	r2, #10
 102173e:	462f      	mov	r7, r5
 1021740:	4681      	mov	r9, r0
 1021742:	4620      	mov	r0, r4
 1021744:	f001 f9a4 	bl	1022a90 <__multadd>
 1021748:	4682      	mov	sl, r0
 102174a:	e7a6      	b.n	102169a <_dtoa_r+0x60a>
 102174c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 102174e:	4641      	mov	r1, r8
 1021750:	4620      	mov	r0, r4
 1021752:	f001 fb29 	bl	1022da8 <__pow5mult>
 1021756:	4680      	mov	r8, r0
 1021758:	e6f7      	b.n	102154a <_dtoa_r+0x4ba>
 102175a:	f246 5340 	movw	r3, #25920	; 0x6540
 102175e:	f2c0 1306 	movt	r3, #262	; 0x106
 1021762:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1021766:	2f00      	cmp	r7, #0
 1021768:	460a      	mov	r2, r1
 102176a:	ed93 5b00 	vldr	d5, [r3]
 102176e:	bfc8      	it	gt
 1021770:	2200      	movgt	r2, #0
 1021772:	9b08      	ldr	r3, [sp, #32]
 1021774:	bfd8      	it	le
 1021776:	2201      	movle	r2, #1
 1021778:	ea12 73d3 	ands.w	r3, r2, r3, lsr #31
 102177c:	f000 81ed 	beq.w	1021b5a <_dtoa_r+0xaca>
 1021780:	2f00      	cmp	r7, #0
 1021782:	f000 814a 	beq.w	1021a1a <_dtoa_r+0x98a>
 1021786:	2300      	movs	r3, #0
 1021788:	9302      	str	r3, [sp, #8]
 102178a:	4699      	mov	r9, r3
 102178c:	9b08      	ldr	r3, [sp, #32]
 102178e:	465e      	mov	r6, fp
 1021790:	ea6f 0a03 	mvn.w	sl, r3
 1021794:	e739      	b.n	102160a <_dtoa_r+0x57a>
 1021796:	2e00      	cmp	r6, #0
 1021798:	f04f 0301 	mov.w	r3, #1
 102179c:	930d      	str	r3, [sp, #52]	; 0x34
 102179e:	bfa4      	itt	ge
 10217a0:	2300      	movge	r3, #0
 10217a2:	9309      	strge	r3, [sp, #36]	; 0x24
 10217a4:	f6bf ad2a 	bge.w	10211fc <_dtoa_r+0x16c>
 10217a8:	f1cb 0301 	rsb	r3, fp, #1
 10217ac:	2600      	movs	r6, #0
 10217ae:	9309      	str	r3, [sp, #36]	; 0x24
 10217b0:	e524      	b.n	10211fc <_dtoa_r+0x16c>
 10217b2:	f648 16e8 	movw	r6, #35304	; 0x89e8
 10217b6:	f2c0 1606 	movt	r6, #262	; 0x106
 10217ba:	4630      	mov	r0, r6
 10217bc:	b013      	add	sp, #76	; 0x4c
 10217be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10217c2:	9a00      	ldr	r2, [sp, #0]
 10217c4:	f1c3 0320 	rsb	r3, r3, #32
 10217c8:	fa02 f303 	lsl.w	r3, r2, r3
 10217cc:	ee07 3a90 	vmov	s15, r3
 10217d0:	e4c0      	b.n	1021154 <_dtoa_r+0xc4>
 10217d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10217d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 10217d8:	9302      	str	r3, [sp, #8]
 10217da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10217dc:	930c      	str	r3, [sp, #48]	; 0x30
 10217de:	e696      	b.n	102150e <_dtoa_r+0x47e>
 10217e0:	201c      	movs	r0, #28
 10217e2:	e6d0      	b.n	1021586 <_dtoa_r+0x4f6>
 10217e4:	f000 8115 	beq.w	1021a12 <_dtoa_r+0x982>
 10217e8:	9b04      	ldr	r3, [sp, #16]
 10217ea:	f246 5240 	movw	r2, #25920	; 0x6540
 10217ee:	f2c0 1206 	movt	r2, #262	; 0x106
 10217f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 10217f6:	425b      	negs	r3, r3
 10217f8:	f003 010f 	and.w	r1, r3, #15
 10217fc:	111b      	asrs	r3, r3, #4
 10217fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 1021802:	ed92 5b00 	vldr	d5, [r2]
 1021806:	ee27 5b05 	vmul.f64	d5, d7, d5
 102180a:	f000 82ad 	beq.w	1021d68 <_dtoa_r+0xcd8>
 102180e:	f246 6230 	movw	r2, #26160	; 0x6630
 1021812:	f2c0 1206 	movt	r2, #262	; 0x106
 1021816:	2000      	movs	r0, #0
 1021818:	2102      	movs	r1, #2
 102181a:	eeb0 7b45 	vmov.f64	d7, d5
 102181e:	f013 0f01 	tst.w	r3, #1
 1021822:	d005      	beq.n	1021830 <_dtoa_r+0x7a0>
 1021824:	ed92 6b00 	vldr	d6, [r2]
 1021828:	3101      	adds	r1, #1
 102182a:	4648      	mov	r0, r9
 102182c:	ee27 7b06 	vmul.f64	d7, d7, d6
 1021830:	105b      	asrs	r3, r3, #1
 1021832:	f102 0208 	add.w	r2, r2, #8
 1021836:	d1f2      	bne.n	102181e <_dtoa_r+0x78e>
 1021838:	2800      	cmp	r0, #0
 102183a:	bf08      	it	eq
 102183c:	eeb0 7b45 	vmoveq.f64	d7, d5
 1021840:	e583      	b.n	102134a <_dtoa_r+0x2ba>
 1021842:	4601      	mov	r1, r0
 1021844:	462a      	mov	r2, r5
 1021846:	4620      	mov	r0, r4
 1021848:	f001 faae 	bl	1022da8 <__pow5mult>
 102184c:	f1ba 0f01 	cmp.w	sl, #1
 1021850:	9002      	str	r0, [sp, #8]
 1021852:	f340 80f1 	ble.w	1021a38 <_dtoa_r+0x9a8>
 1021856:	2300      	movs	r3, #0
 1021858:	930b      	str	r3, [sp, #44]	; 0x2c
 102185a:	9a02      	ldr	r2, [sp, #8]
 102185c:	6913      	ldr	r3, [r2, #16]
 102185e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 1021862:	6918      	ldr	r0, [r3, #16]
 1021864:	f001 f9a8 	bl	1022bb8 <__hi0bits>
 1021868:	f1c0 0020 	rsb	r0, r0, #32
 102186c:	e67f      	b.n	102156e <_dtoa_r+0x4de>
 102186e:	9902      	ldr	r1, [sp, #8]
 1021870:	4640      	mov	r0, r8
 1021872:	f001 fb49 	bl	1022f08 <__mcmp>
 1021876:	2800      	cmp	r0, #0
 1021878:	f6bf aea6 	bge.w	10215c8 <_dtoa_r+0x538>
 102187c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 102187e:	2300      	movs	r3, #0
 1021880:	4641      	mov	r1, r8
 1021882:	220a      	movs	r2, #10
 1021884:	4620      	mov	r0, r4
 1021886:	429e      	cmp	r6, r3
 1021888:	bfcc      	ite	gt
 102188a:	2500      	movgt	r5, #0
 102188c:	f005 0501 	andle.w	r5, r5, #1
 1021890:	f001 f8fe 	bl	1022a90 <__multadd>
 1021894:	9b04      	ldr	r3, [sp, #16]
 1021896:	1e5e      	subs	r6, r3, #1
 1021898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 102189a:	4680      	mov	r8, r0
 102189c:	2b00      	cmp	r3, #0
 102189e:	f040 8252 	bne.w	1021d46 <_dtoa_r+0xcb6>
 10218a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 10218a4:	2d00      	cmp	r5, #0
 10218a6:	d068      	beq.n	102197a <_dtoa_r+0x8ea>
 10218a8:	9604      	str	r6, [sp, #16]
 10218aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 10218ac:	e693      	b.n	10215d6 <_dtoa_r+0x546>
 10218ae:	ed9d 5b00 	vldr	d5, [sp]
 10218b2:	2102      	movs	r1, #2
 10218b4:	e537      	b.n	1021326 <_dtoa_r+0x296>
 10218b6:	2301      	movs	r3, #1
 10218b8:	930a      	str	r3, [sp, #40]	; 0x28
 10218ba:	9b08      	ldr	r3, [sp, #32]
 10218bc:	2b00      	cmp	r3, #0
 10218be:	f340 80f1 	ble.w	1021aa4 <_dtoa_r+0xa14>
 10218c2:	461f      	mov	r7, r3
 10218c4:	461a      	mov	r2, r3
 10218c6:	930e      	str	r3, [sp, #56]	; 0x38
 10218c8:	2f0e      	cmp	r7, #14
 10218ca:	bf8c      	ite	hi
 10218cc:	f04f 0900 	movhi.w	r9, #0
 10218d0:	f009 0901 	andls.w	r9, r9, #1
 10218d4:	2a17      	cmp	r2, #23
 10218d6:	f04f 0100 	mov.w	r1, #0
 10218da:	6461      	str	r1, [r4, #68]	; 0x44
 10218dc:	f77f acfb 	ble.w	10212d6 <_dtoa_r+0x246>
 10218e0:	2304      	movs	r3, #4
 10218e2:	005b      	lsls	r3, r3, #1
 10218e4:	3101      	adds	r1, #1
 10218e6:	f103 0014 	add.w	r0, r3, #20
 10218ea:	4290      	cmp	r0, r2
 10218ec:	d9f9      	bls.n	10218e2 <_dtoa_r+0x852>
 10218ee:	6461      	str	r1, [r4, #68]	; 0x44
 10218f0:	e4f1      	b.n	10212d6 <_dtoa_r+0x246>
 10218f2:	2301      	movs	r3, #1
 10218f4:	930a      	str	r3, [sp, #40]	; 0x28
 10218f6:	9a04      	ldr	r2, [sp, #16]
 10218f8:	9b08      	ldr	r3, [sp, #32]
 10218fa:	4413      	add	r3, r2
 10218fc:	930e      	str	r3, [sp, #56]	; 0x38
 10218fe:	1c5f      	adds	r7, r3, #1
 1021900:	2f01      	cmp	r7, #1
 1021902:	463a      	mov	r2, r7
 1021904:	bfb8      	it	lt
 1021906:	2201      	movlt	r2, #1
 1021908:	e7de      	b.n	10218c8 <_dtoa_r+0x838>
 102190a:	2300      	movs	r3, #0
 102190c:	930a      	str	r3, [sp, #40]	; 0x28
 102190e:	e7f2      	b.n	10218f6 <_dtoa_r+0x866>
 1021910:	2300      	movs	r3, #0
 1021912:	930a      	str	r3, [sp, #40]	; 0x28
 1021914:	e7d1      	b.n	10218ba <_dtoa_r+0x82a>
 1021916:	2a01      	cmp	r2, #1
 1021918:	ee25 3b03 	vmul.f64	d3, d5, d3
 102191c:	f88b 1000 	strb.w	r1, [fp]
 1021920:	d011      	beq.n	1021946 <_dtoa_r+0x8b6>
 1021922:	445a      	add	r2, fp
 1021924:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 1021928:	ee27 6b04 	vmul.f64	d6, d7, d4
 102192c:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 1021930:	ee17 1a90 	vmov	r1, s15
 1021934:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 1021938:	ee36 7b45 	vsub.f64	d7, d6, d5
 102193c:	3130      	adds	r1, #48	; 0x30
 102193e:	f803 1b01 	strb.w	r1, [r3], #1
 1021942:	4293      	cmp	r3, r2
 1021944:	d1f0      	bne.n	1021928 <_dtoa_r+0x898>
 1021946:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 102194a:	ee33 5b06 	vadd.f64	d5, d3, d6
 102194e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 1021952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021956:	f100 819d 	bmi.w	1021c94 <_dtoa_r+0xc04>
 102195a:	ee36 6b43 	vsub.f64	d6, d6, d3
 102195e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1021962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021966:	f77f ad9d 	ble.w	10214a4 <_dtoa_r+0x414>
 102196a:	e000      	b.n	102196e <_dtoa_r+0x8de>
 102196c:	460b      	mov	r3, r1
 102196e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 1021972:	1e59      	subs	r1, r3, #1
 1021974:	2a30      	cmp	r2, #48	; 0x30
 1021976:	d0f9      	beq.n	102196c <_dtoa_r+0x8dc>
 1021978:	e56b      	b.n	1021452 <_dtoa_r+0x3c2>
 102197a:	465d      	mov	r5, fp
 102197c:	2601      	movs	r6, #1
 102197e:	f8dd a008 	ldr.w	sl, [sp, #8]
 1021982:	e002      	b.n	102198a <_dtoa_r+0x8fa>
 1021984:	f001 f884 	bl	1022a90 <__multadd>
 1021988:	4680      	mov	r8, r0
 102198a:	4651      	mov	r1, sl
 102198c:	4640      	mov	r0, r8
 102198e:	f7ff fadb 	bl	1020f48 <quorem>
 1021992:	42be      	cmp	r6, r7
 1021994:	f04f 0300 	mov.w	r3, #0
 1021998:	f04f 020a 	mov.w	r2, #10
 102199c:	4641      	mov	r1, r8
 102199e:	f106 0601 	add.w	r6, r6, #1
 10219a2:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 10219a6:	4620      	mov	r0, r4
 10219a8:	f805 cb01 	strb.w	ip, [r5], #1
 10219ac:	dbea      	blt.n	1021984 <_dtoa_r+0x8f4>
 10219ae:	2600      	movs	r6, #0
 10219b0:	f8cd c000 	str.w	ip, [sp]
 10219b4:	4641      	mov	r1, r8
 10219b6:	2201      	movs	r2, #1
 10219b8:	4620      	mov	r0, r4
 10219ba:	f001 fa47 	bl	1022e4c <__lshift>
 10219be:	9902      	ldr	r1, [sp, #8]
 10219c0:	4680      	mov	r8, r0
 10219c2:	f001 faa1 	bl	1022f08 <__mcmp>
 10219c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 10219ca:	2800      	cmp	r0, #0
 10219cc:	f340 8118 	ble.w	1021c00 <_dtoa_r+0xb70>
 10219d0:	1e6b      	subs	r3, r5, #1
 10219d2:	e004      	b.n	10219de <_dtoa_r+0x94e>
 10219d4:	459b      	cmp	fp, r3
 10219d6:	f000 8124 	beq.w	1021c22 <_dtoa_r+0xb92>
 10219da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 10219de:	2a39      	cmp	r2, #57	; 0x39
 10219e0:	f103 0501 	add.w	r5, r3, #1
 10219e4:	d0f6      	beq.n	10219d4 <_dtoa_r+0x944>
 10219e6:	3201      	adds	r2, #1
 10219e8:	701a      	strb	r2, [r3, #0]
 10219ea:	9902      	ldr	r1, [sp, #8]
 10219ec:	4620      	mov	r0, r4
 10219ee:	f001 f845 	bl	1022a7c <_Bfree>
 10219f2:	f1b9 0f00 	cmp.w	r9, #0
 10219f6:	f000 8111 	beq.w	1021c1c <_dtoa_r+0xb8c>
 10219fa:	2e00      	cmp	r6, #0
 10219fc:	bf18      	it	ne
 10219fe:	454e      	cmpne	r6, r9
 1021a00:	f000 81b7 	beq.w	1021d72 <_dtoa_r+0xce2>
 1021a04:	4631      	mov	r1, r6
 1021a06:	4620      	mov	r0, r4
 1021a08:	465e      	mov	r6, fp
 1021a0a:	f001 f837 	bl	1022a7c <_Bfree>
 1021a0e:	46ab      	mov	fp, r5
 1021a10:	e605      	b.n	102161e <_dtoa_r+0x58e>
 1021a12:	ed9d 7b00 	vldr	d7, [sp]
 1021a16:	2102      	movs	r1, #2
 1021a18:	e497      	b.n	102134a <_dtoa_r+0x2ba>
 1021a1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 1021a1e:	9702      	str	r7, [sp, #8]
 1021a20:	46b9      	mov	r9, r7
 1021a22:	ee25 5b07 	vmul.f64	d5, d5, d7
 1021a26:	ed9d 7b00 	vldr	d7, [sp]
 1021a2a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 1021a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021a32:	f6bf aeab 	bge.w	102178c <_dtoa_r+0x6fc>
 1021a36:	e5df      	b.n	10215f8 <_dtoa_r+0x568>
 1021a38:	e9dd 1200 	ldrd	r1, r2, [sp]
 1021a3c:	2900      	cmp	r1, #0
 1021a3e:	f47f af0a 	bne.w	1021856 <_dtoa_r+0x7c6>
 1021a42:	f3c2 0313 	ubfx	r3, r2, #0, #20
 1021a46:	2b00      	cmp	r3, #0
 1021a48:	f040 8196 	bne.w	1021d78 <_dtoa_r+0xce8>
 1021a4c:	2300      	movs	r3, #0
 1021a4e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 1021a52:	4013      	ands	r3, r2
 1021a54:	2b00      	cmp	r3, #0
 1021a56:	f000 8152 	beq.w	1021cfe <_dtoa_r+0xc6e>
 1021a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1021a5c:	3601      	adds	r6, #1
 1021a5e:	3301      	adds	r3, #1
 1021a60:	9309      	str	r3, [sp, #36]	; 0x24
 1021a62:	2301      	movs	r3, #1
 1021a64:	930b      	str	r3, [sp, #44]	; 0x2c
 1021a66:	e57e      	b.n	1021566 <_dtoa_r+0x4d6>
 1021a68:	461a      	mov	r2, r3
 1021a6a:	4649      	mov	r1, r9
 1021a6c:	4620      	mov	r0, r4
 1021a6e:	f001 f99b 	bl	1022da8 <__pow5mult>
 1021a72:	4642      	mov	r2, r8
 1021a74:	4601      	mov	r1, r0
 1021a76:	4681      	mov	r9, r0
 1021a78:	4620      	mov	r0, r4
 1021a7a:	f001 f8f5 	bl	1022c68 <__multiply>
 1021a7e:	4641      	mov	r1, r8
 1021a80:	900f      	str	r0, [sp, #60]	; 0x3c
 1021a82:	4620      	mov	r0, r4
 1021a84:	f000 fffa 	bl	1022a7c <_Bfree>
 1021a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 1021a8a:	4698      	mov	r8, r3
 1021a8c:	e558      	b.n	1021540 <_dtoa_r+0x4b0>
 1021a8e:	4620      	mov	r0, r4
 1021a90:	f000 fff4 	bl	1022a7c <_Bfree>
 1021a94:	2301      	movs	r3, #1
 1021a96:	e629      	b.n	10216ec <_dtoa_r+0x65c>
 1021a98:	f000 fffa 	bl	1022a90 <__multadd>
 1021a9c:	462f      	mov	r7, r5
 1021a9e:	4681      	mov	r9, r0
 1021aa0:	4682      	mov	sl, r0
 1021aa2:	e5fa      	b.n	102169a <_dtoa_r+0x60a>
 1021aa4:	2301      	movs	r3, #1
 1021aa6:	9308      	str	r3, [sp, #32]
 1021aa8:	461f      	mov	r7, r3
 1021aaa:	e411      	b.n	10212d0 <_dtoa_r+0x240>
 1021aac:	e9dd 1200 	ldrd	r1, r2, [sp]
 1021ab0:	2900      	cmp	r1, #0
 1021ab2:	f47f ad56 	bne.w	1021562 <_dtoa_r+0x4d2>
 1021ab6:	f3c2 0313 	ubfx	r3, r2, #0, #20
 1021aba:	2b00      	cmp	r3, #0
 1021abc:	d0c6      	beq.n	1021a4c <_dtoa_r+0x9bc>
 1021abe:	9b00      	ldr	r3, [sp, #0]
 1021ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 1021ac2:	e550      	b.n	1021566 <_dtoa_r+0x4d6>
 1021ac4:	2f00      	cmp	r7, #0
 1021ac6:	f43f acca 	beq.w	102145e <_dtoa_r+0x3ce>
 1021aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 1021acc:	2a00      	cmp	r2, #0
 1021ace:	f77f ace9 	ble.w	10214a4 <_dtoa_r+0x414>
 1021ad2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 1021ad6:	3101      	adds	r1, #1
 1021ad8:	9b04      	ldr	r3, [sp, #16]
 1021ada:	f103 3eff 	add.w	lr, r3, #4294967295
 1021ade:	ee27 7b06 	vmul.f64	d7, d7, d6
 1021ae2:	ee06 1a90 	vmov	s13, r1
 1021ae6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 1021aea:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1021aee:	ee06 5b07 	vmla.f64	d5, d6, d7
 1021af2:	ed8d 5b00 	vstr	d5, [sp]
 1021af6:	9b01      	ldr	r3, [sp, #4]
 1021af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 1021afc:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1021b00:	e441      	b.n	1021386 <_dtoa_r+0x2f6>
 1021b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1021b04:	2a00      	cmp	r2, #0
 1021b06:	f000 8099 	beq.w	1021c3c <_dtoa_r+0xbac>
 1021b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1021b0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 1021b10:	441e      	add	r6, r3
 1021b12:	18d3      	adds	r3, r2, r3
 1021b14:	9309      	str	r3, [sp, #36]	; 0x24
 1021b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1021b18:	920c      	str	r2, [sp, #48]	; 0x30
 1021b1a:	9302      	str	r3, [sp, #8]
 1021b1c:	e4f2      	b.n	1021504 <_dtoa_r+0x474>
 1021b1e:	2300      	movs	r3, #0
 1021b20:	9302      	str	r3, [sp, #8]
 1021b22:	4699      	mov	r9, r3
 1021b24:	e568      	b.n	10215f8 <_dtoa_r+0x568>
 1021b26:	2100      	movs	r1, #0
 1021b28:	4620      	mov	r0, r4
 1021b2a:	6461      	str	r1, [r4, #68]	; 0x44
 1021b2c:	f000 ff80 	bl	1022a30 <_Balloc>
 1021b30:	9a04      	ldr	r2, [sp, #16]
 1021b32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1021b34:	2a0e      	cmp	r2, #14
 1021b36:	4683      	mov	fp, r0
 1021b38:	6420      	str	r0, [r4, #64]	; 0x40
 1021b3a:	f300 8126 	bgt.w	1021d8a <_dtoa_r+0xcfa>
 1021b3e:	2b00      	cmp	r3, #0
 1021b40:	f2c0 8123 	blt.w	1021d8a <_dtoa_r+0xcfa>
 1021b44:	9a04      	ldr	r2, [sp, #16]
 1021b46:	f246 5340 	movw	r3, #25920	; 0x6540
 1021b4a:	f2c0 1306 	movt	r3, #262	; 0x106
 1021b4e:	f04f 37ff 	mov.w	r7, #4294967295
 1021b52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 1021b56:	ed93 5b00 	vldr	d5, [r3]
 1021b5a:	9a04      	ldr	r2, [sp, #16]
 1021b5c:	2f01      	cmp	r7, #1
 1021b5e:	465b      	mov	r3, fp
 1021b60:	ed9d 7b00 	vldr	d7, [sp]
 1021b64:	f102 0201 	add.w	r2, r2, #1
 1021b68:	9204      	str	r2, [sp, #16]
 1021b6a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 1021b6e:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 1021b72:	ee16 2a10 	vmov	r2, s12
 1021b76:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 1021b7a:	ee04 7b45 	vmls.f64	d7, d4, d5
 1021b7e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1021b82:	f803 2b01 	strb.w	r2, [r3], #1
 1021b86:	d022      	beq.n	1021bce <_dtoa_r+0xb3e>
 1021b88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 1021b8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 1021b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1021b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021b98:	d079      	beq.n	1021c8e <_dtoa_r+0xbfe>
 1021b9a:	2201      	movs	r2, #1
 1021b9c:	e006      	b.n	1021bac <_dtoa_r+0xb1c>
 1021b9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 1021ba2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1021ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021baa:	d070      	beq.n	1021c8e <_dtoa_r+0xbfe>
 1021bac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 1021bb0:	3201      	adds	r2, #1
 1021bb2:	42ba      	cmp	r2, r7
 1021bb4:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 1021bb8:	ee16 1a10 	vmov	r1, s12
 1021bbc:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 1021bc0:	ee04 7b45 	vmls.f64	d7, d4, d5
 1021bc4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 1021bc8:	f803 1b01 	strb.w	r1, [r3], #1
 1021bcc:	d1e7      	bne.n	1021b9e <_dtoa_r+0xb0e>
 1021bce:	ee37 7b07 	vadd.f64	d7, d7, d7
 1021bd2:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1021bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021bda:	f340 8098 	ble.w	1021d0e <_dtoa_r+0xc7e>
 1021bde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1021be2:	465e      	mov	r6, fp
 1021be4:	3b01      	subs	r3, #1
 1021be6:	e003      	b.n	1021bf0 <_dtoa_r+0xb60>
 1021be8:	429e      	cmp	r6, r3
 1021bea:	d021      	beq.n	1021c30 <_dtoa_r+0xba0>
 1021bec:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 1021bf0:	2939      	cmp	r1, #57	; 0x39
 1021bf2:	f103 0b01 	add.w	fp, r3, #1
 1021bf6:	d0f7      	beq.n	1021be8 <_dtoa_r+0xb58>
 1021bf8:	1c4a      	adds	r2, r1, #1
 1021bfa:	b2d2      	uxtb	r2, r2
 1021bfc:	701a      	strb	r2, [r3, #0]
 1021bfe:	e512      	b.n	1021626 <_dtoa_r+0x596>
 1021c00:	d103      	bne.n	1021c0a <_dtoa_r+0xb7a>
 1021c02:	9b00      	ldr	r3, [sp, #0]
 1021c04:	07db      	lsls	r3, r3, #31
 1021c06:	f53f aee3 	bmi.w	10219d0 <_dtoa_r+0x940>
 1021c0a:	1e6b      	subs	r3, r5, #1
 1021c0c:	e001      	b.n	1021c12 <_dtoa_r+0xb82>
 1021c0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 1021c12:	2a30      	cmp	r2, #48	; 0x30
 1021c14:	f103 0501 	add.w	r5, r3, #1
 1021c18:	d0f9      	beq.n	1021c0e <_dtoa_r+0xb7e>
 1021c1a:	e6e6      	b.n	10219ea <_dtoa_r+0x95a>
 1021c1c:	465e      	mov	r6, fp
 1021c1e:	46ab      	mov	fp, r5
 1021c20:	e501      	b.n	1021626 <_dtoa_r+0x596>
 1021c22:	9b04      	ldr	r3, [sp, #16]
 1021c24:	3301      	adds	r3, #1
 1021c26:	9304      	str	r3, [sp, #16]
 1021c28:	2331      	movs	r3, #49	; 0x31
 1021c2a:	f88b 3000 	strb.w	r3, [fp]
 1021c2e:	e6dc      	b.n	10219ea <_dtoa_r+0x95a>
 1021c30:	9a04      	ldr	r2, [sp, #16]
 1021c32:	3201      	adds	r2, #1
 1021c34:	9204      	str	r2, [sp, #16]
 1021c36:	2231      	movs	r2, #49	; 0x31
 1021c38:	701a      	strb	r2, [r3, #0]
 1021c3a:	e4f4      	b.n	1021626 <_dtoa_r+0x596>
 1021c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1021c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1021c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1021c42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 1021c46:	920c      	str	r2, [sp, #48]	; 0x30
 1021c48:	441e      	add	r6, r3
 1021c4a:	18d3      	adds	r3, r2, r3
 1021c4c:	9102      	str	r1, [sp, #8]
 1021c4e:	9309      	str	r3, [sp, #36]	; 0x24
 1021c50:	e458      	b.n	1021504 <_dtoa_r+0x474>
 1021c52:	2b00      	cmp	r3, #0
 1021c54:	465e      	mov	r6, fp
 1021c56:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1021c5a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 1021c5e:	dd10      	ble.n	1021c82 <_dtoa_r+0xbf2>
 1021c60:	4641      	mov	r1, r8
 1021c62:	2201      	movs	r2, #1
 1021c64:	4620      	mov	r0, r4
 1021c66:	f001 f8f1 	bl	1022e4c <__lshift>
 1021c6a:	9902      	ldr	r1, [sp, #8]
 1021c6c:	4680      	mov	r8, r0
 1021c6e:	f001 f94b 	bl	1022f08 <__mcmp>
 1021c72:	2800      	cmp	r0, #0
 1021c74:	dd73      	ble.n	1021d5e <_dtoa_r+0xcce>
 1021c76:	9b00      	ldr	r3, [sp, #0]
 1021c78:	2b39      	cmp	r3, #57	; 0x39
 1021c7a:	d042      	beq.n	1021d02 <_dtoa_r+0xc72>
 1021c7c:	4633      	mov	r3, r6
 1021c7e:	3331      	adds	r3, #49	; 0x31
 1021c80:	9300      	str	r3, [sp, #0]
 1021c82:	9b00      	ldr	r3, [sp, #0]
 1021c84:	464e      	mov	r6, r9
 1021c86:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1021c8a:	703b      	strb	r3, [r7, #0]
 1021c8c:	e6ad      	b.n	10219ea <_dtoa_r+0x95a>
 1021c8e:	465e      	mov	r6, fp
 1021c90:	469b      	mov	fp, r3
 1021c92:	e4c8      	b.n	1021626 <_dtoa_r+0x596>
 1021c94:	f10e 0201 	add.w	r2, lr, #1
 1021c98:	465e      	mov	r6, fp
 1021c9a:	9204      	str	r2, [sp, #16]
 1021c9c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1021ca0:	e7a0      	b.n	1021be4 <_dtoa_r+0xb54>
 1021ca2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 1021ca6:	4620      	mov	r0, r4
 1021ca8:	f000 fec2 	bl	1022a30 <_Balloc>
 1021cac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 1021cb0:	f109 010c 	add.w	r1, r9, #12
 1021cb4:	3302      	adds	r3, #2
 1021cb6:	009a      	lsls	r2, r3, #2
 1021cb8:	4605      	mov	r5, r0
 1021cba:	300c      	adds	r0, #12
 1021cbc:	f7f9 eea0 	blx	101ba00 <memcpy>
 1021cc0:	4629      	mov	r1, r5
 1021cc2:	2201      	movs	r2, #1
 1021cc4:	4620      	mov	r0, r4
 1021cc6:	f001 f8c1 	bl	1022e4c <__lshift>
 1021cca:	900a      	str	r0, [sp, #40]	; 0x28
 1021ccc:	e4d6      	b.n	102167c <_dtoa_r+0x5ec>
 1021cce:	f10e 0201 	add.w	r2, lr, #1
 1021cd2:	465e      	mov	r6, fp
 1021cd4:	9204      	str	r2, [sp, #16]
 1021cd6:	e785      	b.n	1021be4 <_dtoa_r+0xb54>
 1021cd8:	9b00      	ldr	r3, [sp, #0]
 1021cda:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 1021cde:	2b39      	cmp	r3, #57	; 0x39
 1021ce0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1021ce4:	d00d      	beq.n	1021d02 <_dtoa_r+0xc72>
 1021ce6:	9b00      	ldr	r3, [sp, #0]
 1021ce8:	464e      	mov	r6, r9
 1021cea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1021cee:	3301      	adds	r3, #1
 1021cf0:	703b      	strb	r3, [r7, #0]
 1021cf2:	e67a      	b.n	10219ea <_dtoa_r+0x95a>
 1021cf4:	464e      	mov	r6, r9
 1021cf6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 1021cfa:	46d1      	mov	r9, sl
 1021cfc:	e65a      	b.n	10219b4 <_dtoa_r+0x924>
 1021cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 1021d00:	e431      	b.n	1021566 <_dtoa_r+0x4d6>
 1021d02:	2239      	movs	r2, #57	; 0x39
 1021d04:	464e      	mov	r6, r9
 1021d06:	703a      	strb	r2, [r7, #0]
 1021d08:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1021d0c:	e660      	b.n	10219d0 <_dtoa_r+0x940>
 1021d0e:	eeb4 7b45 	vcmp.f64	d7, d5
 1021d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1021d16:	d1ba      	bne.n	1021c8e <_dtoa_r+0xbfe>
 1021d18:	ee16 2a10 	vmov	r2, s12
 1021d1c:	465e      	mov	r6, fp
 1021d1e:	07d1      	lsls	r1, r2, #31
 1021d20:	bf48      	it	mi
 1021d22:	f813 1c01 	ldrbmi.w	r1, [r3, #-1]
 1021d26:	f53f af5d 	bmi.w	1021be4 <_dtoa_r+0xb54>
 1021d2a:	469b      	mov	fp, r3
 1021d2c:	e47b      	b.n	1021626 <_dtoa_r+0x596>
 1021d2e:	9a00      	ldr	r2, [sp, #0]
 1021d30:	465b      	mov	r3, fp
 1021d32:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1021d36:	1c7d      	adds	r5, r7, #1
 1021d38:	2a39      	cmp	r2, #57	; 0x39
 1021d3a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 1021d3e:	d0e0      	beq.n	1021d02 <_dtoa_r+0xc72>
 1021d40:	2e00      	cmp	r6, #0
 1021d42:	dc9c      	bgt.n	1021c7e <_dtoa_r+0xbee>
 1021d44:	e79d      	b.n	1021c82 <_dtoa_r+0xbf2>
 1021d46:	4649      	mov	r1, r9
 1021d48:	2300      	movs	r3, #0
 1021d4a:	220a      	movs	r2, #10
 1021d4c:	4620      	mov	r0, r4
 1021d4e:	f000 fe9f 	bl	1022a90 <__multadd>
 1021d52:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 1021d54:	4681      	mov	r9, r0
 1021d56:	2d00      	cmp	r5, #0
 1021d58:	f43f ac81 	beq.w	102165e <_dtoa_r+0x5ce>
 1021d5c:	e5a4      	b.n	10218a8 <_dtoa_r+0x818>
 1021d5e:	d190      	bne.n	1021c82 <_dtoa_r+0xbf2>
 1021d60:	9b00      	ldr	r3, [sp, #0]
 1021d62:	07da      	lsls	r2, r3, #31
 1021d64:	d58d      	bpl.n	1021c82 <_dtoa_r+0xbf2>
 1021d66:	e786      	b.n	1021c76 <_dtoa_r+0xbe6>
 1021d68:	eeb0 7b45 	vmov.f64	d7, d5
 1021d6c:	2102      	movs	r1, #2
 1021d6e:	f7ff baec 	b.w	102134a <_dtoa_r+0x2ba>
 1021d72:	465e      	mov	r6, fp
 1021d74:	46ab      	mov	fp, r5
 1021d76:	e452      	b.n	102161e <_dtoa_r+0x58e>
 1021d78:	9b00      	ldr	r3, [sp, #0]
 1021d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 1021d7c:	e56d      	b.n	102185a <_dtoa_r+0x7ca>
 1021d7e:	f43f ac09 	beq.w	1021594 <_dtoa_r+0x504>
 1021d82:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 1021d86:	f7ff bbfe 	b.w	1021586 <_dtoa_r+0x4f6>
 1021d8a:	2200      	movs	r2, #0
 1021d8c:	f04f 37ff 	mov.w	r7, #4294967295
 1021d90:	9208      	str	r2, [sp, #32]
 1021d92:	2201      	movs	r2, #1
 1021d94:	970e      	str	r7, [sp, #56]	; 0x38
 1021d96:	920a      	str	r2, [sp, #40]	; 0x28
 1021d98:	f7ff bb99 	b.w	10214ce <_dtoa_r+0x43e>

01021d9c <__sflush_r>:
 1021d9c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 1021da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1021da4:	460c      	mov	r4, r1
 1021da6:	b29a      	uxth	r2, r3
 1021da8:	4680      	mov	r8, r0
 1021daa:	0711      	lsls	r1, r2, #28
 1021dac:	d446      	bmi.n	1021e3c <__sflush_r+0xa0>
 1021dae:	6862      	ldr	r2, [r4, #4]
 1021db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1021db4:	81a3      	strh	r3, [r4, #12]
 1021db6:	2a00      	cmp	r2, #0
 1021db8:	dd5b      	ble.n	1021e72 <__sflush_r+0xd6>
 1021dba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 1021dbc:	2d00      	cmp	r5, #0
 1021dbe:	d055      	beq.n	1021e6c <__sflush_r+0xd0>
 1021dc0:	b29b      	uxth	r3, r3
 1021dc2:	2200      	movs	r2, #0
 1021dc4:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 1021dc8:	f8d8 6000 	ldr.w	r6, [r8]
 1021dcc:	69e1      	ldr	r1, [r4, #28]
 1021dce:	f8c8 2000 	str.w	r2, [r8]
 1021dd2:	bf18      	it	ne
 1021dd4:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 1021dd6:	d109      	bne.n	1021dec <__sflush_r+0x50>
 1021dd8:	2301      	movs	r3, #1
 1021dda:	463a      	mov	r2, r7
 1021ddc:	4640      	mov	r0, r8
 1021dde:	47a8      	blx	r5
 1021de0:	1c43      	adds	r3, r0, #1
 1021de2:	4602      	mov	r2, r0
 1021de4:	d049      	beq.n	1021e7a <__sflush_r+0xde>
 1021de6:	89a3      	ldrh	r3, [r4, #12]
 1021de8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 1021dea:	69e1      	ldr	r1, [r4, #28]
 1021dec:	075f      	lsls	r7, r3, #29
 1021dee:	d505      	bpl.n	1021dfc <__sflush_r+0x60>
 1021df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1021df2:	6860      	ldr	r0, [r4, #4]
 1021df4:	1a12      	subs	r2, r2, r0
 1021df6:	b10b      	cbz	r3, 1021dfc <__sflush_r+0x60>
 1021df8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 1021dfa:	1ad2      	subs	r2, r2, r3
 1021dfc:	2300      	movs	r3, #0
 1021dfe:	4640      	mov	r0, r8
 1021e00:	47a8      	blx	r5
 1021e02:	1c45      	adds	r5, r0, #1
 1021e04:	d04d      	beq.n	1021ea2 <__sflush_r+0x106>
 1021e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1021e0a:	2100      	movs	r1, #0
 1021e0c:	6922      	ldr	r2, [r4, #16]
 1021e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 1021e12:	6061      	str	r1, [r4, #4]
 1021e14:	81a3      	strh	r3, [r4, #12]
 1021e16:	6022      	str	r2, [r4, #0]
 1021e18:	04da      	lsls	r2, r3, #19
 1021e1a:	d500      	bpl.n	1021e1e <__sflush_r+0x82>
 1021e1c:	6520      	str	r0, [r4, #80]	; 0x50
 1021e1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 1021e20:	f8c8 6000 	str.w	r6, [r8]
 1021e24:	b311      	cbz	r1, 1021e6c <__sflush_r+0xd0>
 1021e26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1021e2a:	4299      	cmp	r1, r3
 1021e2c:	d002      	beq.n	1021e34 <__sflush_r+0x98>
 1021e2e:	4640      	mov	r0, r8
 1021e30:	f000 f9e6 	bl	1022200 <_free_r>
 1021e34:	2000      	movs	r0, #0
 1021e36:	6320      	str	r0, [r4, #48]	; 0x30
 1021e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1021e3c:	6926      	ldr	r6, [r4, #16]
 1021e3e:	b1ae      	cbz	r6, 1021e6c <__sflush_r+0xd0>
 1021e40:	0791      	lsls	r1, r2, #30
 1021e42:	6825      	ldr	r5, [r4, #0]
 1021e44:	6026      	str	r6, [r4, #0]
 1021e46:	bf0c      	ite	eq
 1021e48:	6963      	ldreq	r3, [r4, #20]
 1021e4a:	2300      	movne	r3, #0
 1021e4c:	1bad      	subs	r5, r5, r6
 1021e4e:	60a3      	str	r3, [r4, #8]
 1021e50:	e00a      	b.n	1021e68 <__sflush_r+0xcc>
 1021e52:	462b      	mov	r3, r5
 1021e54:	4632      	mov	r2, r6
 1021e56:	6a67      	ldr	r7, [r4, #36]	; 0x24
 1021e58:	4640      	mov	r0, r8
 1021e5a:	69e1      	ldr	r1, [r4, #28]
 1021e5c:	47b8      	blx	r7
 1021e5e:	2800      	cmp	r0, #0
 1021e60:	eba5 0500 	sub.w	r5, r5, r0
 1021e64:	4406      	add	r6, r0
 1021e66:	dd14      	ble.n	1021e92 <__sflush_r+0xf6>
 1021e68:	2d00      	cmp	r5, #0
 1021e6a:	dcf2      	bgt.n	1021e52 <__sflush_r+0xb6>
 1021e6c:	2000      	movs	r0, #0
 1021e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1021e72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 1021e74:	2a00      	cmp	r2, #0
 1021e76:	dca0      	bgt.n	1021dba <__sflush_r+0x1e>
 1021e78:	e7f8      	b.n	1021e6c <__sflush_r+0xd0>
 1021e7a:	f8d8 3000 	ldr.w	r3, [r8]
 1021e7e:	2b00      	cmp	r3, #0
 1021e80:	d0b1      	beq.n	1021de6 <__sflush_r+0x4a>
 1021e82:	2b16      	cmp	r3, #22
 1021e84:	bf18      	it	ne
 1021e86:	2b1d      	cmpne	r3, #29
 1021e88:	bf04      	itt	eq
 1021e8a:	f8c8 6000 	streq.w	r6, [r8]
 1021e8e:	4638      	moveq	r0, r7
 1021e90:	d0ed      	beq.n	1021e6e <__sflush_r+0xd2>
 1021e92:	89a3      	ldrh	r3, [r4, #12]
 1021e94:	f04f 30ff 	mov.w	r0, #4294967295
 1021e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1021e9c:	81a3      	strh	r3, [r4, #12]
 1021e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1021ea2:	f8d8 5000 	ldr.w	r5, [r8]
 1021ea6:	2d1d      	cmp	r5, #29
 1021ea8:	bf88      	it	hi
 1021eaa:	f9b4 200c 	ldrshhi.w	r2, [r4, #12]
 1021eae:	d905      	bls.n	1021ebc <__sflush_r+0x120>
 1021eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1021eb4:	f04f 30ff 	mov.w	r0, #4294967295
 1021eb8:	81a2      	strh	r2, [r4, #12]
 1021eba:	e7d8      	b.n	1021e6e <__sflush_r+0xd2>
 1021ebc:	2301      	movs	r3, #1
 1021ebe:	f2c2 0340 	movt	r3, #8256	; 0x2040
 1021ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1021ec6:	40eb      	lsrs	r3, r5
 1021ec8:	43db      	mvns	r3, r3
 1021eca:	f013 0301 	ands.w	r3, r3, #1
 1021ece:	d1ef      	bne.n	1021eb0 <__sflush_r+0x114>
 1021ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 1021ed4:	6921      	ldr	r1, [r4, #16]
 1021ed6:	6063      	str	r3, [r4, #4]
 1021ed8:	04d3      	lsls	r3, r2, #19
 1021eda:	81a2      	strh	r2, [r4, #12]
 1021edc:	6021      	str	r1, [r4, #0]
 1021ede:	d59e      	bpl.n	1021e1e <__sflush_r+0x82>
 1021ee0:	2d00      	cmp	r5, #0
 1021ee2:	d19c      	bne.n	1021e1e <__sflush_r+0x82>
 1021ee4:	e79a      	b.n	1021e1c <__sflush_r+0x80>
 1021ee6:	bf00      	nop

01021ee8 <_fflush_r>:
 1021ee8:	b510      	push	{r4, lr}
 1021eea:	4604      	mov	r4, r0
 1021eec:	b082      	sub	sp, #8
 1021eee:	b108      	cbz	r0, 1021ef4 <_fflush_r+0xc>
 1021ef0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1021ef2:	b123      	cbz	r3, 1021efe <_fflush_r+0x16>
 1021ef4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 1021ef8:	b948      	cbnz	r0, 1021f0e <_fflush_r+0x26>
 1021efa:	b002      	add	sp, #8
 1021efc:	bd10      	pop	{r4, pc}
 1021efe:	9101      	str	r1, [sp, #4]
 1021f00:	f000 f904 	bl	102210c <__sinit>
 1021f04:	9901      	ldr	r1, [sp, #4]
 1021f06:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 1021f0a:	2800      	cmp	r0, #0
 1021f0c:	d0f5      	beq.n	1021efa <_fflush_r+0x12>
 1021f0e:	4620      	mov	r0, r4
 1021f10:	b002      	add	sp, #8
 1021f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1021f16:	f7ff bf41 	b.w	1021d9c <__sflush_r>
 1021f1a:	bf00      	nop

01021f1c <fflush>:
 1021f1c:	b138      	cbz	r0, 1021f2e <fflush+0x12>
 1021f1e:	f64a 1348 	movw	r3, #43336	; 0xa948
 1021f22:	f2c0 1306 	movt	r3, #262	; 0x106
 1021f26:	4601      	mov	r1, r0
 1021f28:	6818      	ldr	r0, [r3, #0]
 1021f2a:	f7ff bfdd 	b.w	1021ee8 <_fflush_r>
 1021f2e:	f246 13cc 	movw	r3, #25036	; 0x61cc
 1021f32:	f2c0 1306 	movt	r3, #262	; 0x106
 1021f36:	f641 61e9 	movw	r1, #7913	; 0x1ee9
 1021f3a:	f2c0 1102 	movt	r1, #258	; 0x102
 1021f3e:	6818      	ldr	r0, [r3, #0]
 1021f40:	f000 bc10 	b.w	1022764 <_fwalk_reent>

01021f44 <__fp_lock>:
 1021f44:	2000      	movs	r0, #0
 1021f46:	4770      	bx	lr

01021f48 <_cleanup_r>:
 1021f48:	f645 112d 	movw	r1, #22829	; 0x592d
 1021f4c:	f2c0 1102 	movt	r1, #258	; 0x102
 1021f50:	f000 bc08 	b.w	1022764 <_fwalk_reent>

01021f54 <__sinit.part.0>:
 1021f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1021f58:	2400      	movs	r4, #0
 1021f5a:	6845      	ldr	r5, [r0, #4]
 1021f5c:	4607      	mov	r7, r0
 1021f5e:	2203      	movs	r2, #3
 1021f60:	4621      	mov	r1, r4
 1021f62:	f8c0 22e4 	str.w	r2, [r0, #740]	; 0x2e4
 1021f66:	f641 7349 	movw	r3, #8009	; 0x1f49
 1021f6a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 1021f6e:	f2c0 1302 	movt	r3, #258	; 0x102
 1021f72:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 1021f76:	2208      	movs	r2, #8
 1021f78:	63c3      	str	r3, [r0, #60]	; 0x3c
 1021f7a:	2304      	movs	r3, #4
 1021f7c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 1021f80:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 1021f84:	60eb      	str	r3, [r5, #12]
 1021f86:	f243 7bc9 	movw	fp, #14281	; 0x37c9
 1021f8a:	666c      	str	r4, [r5, #100]	; 0x64
 1021f8c:	f2c0 1b02 	movt	fp, #258	; 0x102
 1021f90:	602c      	str	r4, [r5, #0]
 1021f92:	f243 7af1 	movw	sl, #14321	; 0x37f1
 1021f96:	606c      	str	r4, [r5, #4]
 1021f98:	f2c0 1a02 	movt	sl, #258	; 0x102
 1021f9c:	60ac      	str	r4, [r5, #8]
 1021f9e:	f643 0931 	movw	r9, #14385	; 0x3831
 1021fa2:	612c      	str	r4, [r5, #16]
 1021fa4:	f2c0 1902 	movt	r9, #258	; 0x102
 1021fa8:	616c      	str	r4, [r5, #20]
 1021faa:	f643 0851 	movw	r8, #14417	; 0x3851
 1021fae:	61ac      	str	r4, [r5, #24]
 1021fb0:	f2c0 1802 	movt	r8, #258	; 0x102
 1021fb4:	f7fa f87c 	bl	101c0b0 <memset>
 1021fb8:	68be      	ldr	r6, [r7, #8]
 1021fba:	4621      	mov	r1, r4
 1021fbc:	61ed      	str	r5, [r5, #28]
 1021fbe:	f8c5 b020 	str.w	fp, [r5, #32]
 1021fc2:	2208      	movs	r2, #8
 1021fc4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 1021fc8:	2309      	movs	r3, #9
 1021fca:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 1021fce:	f2c0 0301 	movt	r3, #1
 1021fd2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 1021fd6:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 1021fda:	60f3      	str	r3, [r6, #12]
 1021fdc:	6674      	str	r4, [r6, #100]	; 0x64
 1021fde:	e9c6 4400 	strd	r4, r4, [r6]
 1021fe2:	60b4      	str	r4, [r6, #8]
 1021fe4:	e9c6 4404 	strd	r4, r4, [r6, #16]
 1021fe8:	61b4      	str	r4, [r6, #24]
 1021fea:	f7fa f861 	bl	101c0b0 <memset>
 1021fee:	68fd      	ldr	r5, [r7, #12]
 1021ff0:	4621      	mov	r1, r4
 1021ff2:	61f6      	str	r6, [r6, #28]
 1021ff4:	f8c6 b020 	str.w	fp, [r6, #32]
 1021ff8:	2312      	movs	r3, #18
 1021ffa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 1021ffe:	f2c0 0302 	movt	r3, #2
 1022002:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 1022006:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 102200a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 102200e:	2208      	movs	r2, #8
 1022010:	60eb      	str	r3, [r5, #12]
 1022012:	666c      	str	r4, [r5, #100]	; 0x64
 1022014:	e9c5 4400 	strd	r4, r4, [r5]
 1022018:	60ac      	str	r4, [r5, #8]
 102201a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 102201e:	61ac      	str	r4, [r5, #24]
 1022020:	f7fa f846 	bl	101c0b0 <memset>
 1022024:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 1022028:	2301      	movs	r3, #1
 102202a:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 102202e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 1022032:	63bb      	str	r3, [r7, #56]	; 0x38
 1022034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

01022038 <__fp_unlock>:
 1022038:	2000      	movs	r0, #0
 102203a:	4770      	bx	lr

0102203c <__sfmoreglue>:
 102203c:	1e4a      	subs	r2, r1, #1
 102203e:	b570      	push	{r4, r5, r6, lr}
 1022040:	2568      	movs	r5, #104	; 0x68
 1022042:	fb05 f502 	mul.w	r5, r5, r2
 1022046:	460e      	mov	r6, r1
 1022048:	f105 0174 	add.w	r1, r5, #116	; 0x74
 102204c:	f7f8 ffc4 	bl	101afd8 <_malloc_r>
 1022050:	4604      	mov	r4, r0
 1022052:	b140      	cbz	r0, 1022066 <__sfmoreglue+0x2a>
 1022054:	300c      	adds	r0, #12
 1022056:	2100      	movs	r1, #0
 1022058:	6066      	str	r6, [r4, #4]
 102205a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 102205e:	60a0      	str	r0, [r4, #8]
 1022060:	6021      	str	r1, [r4, #0]
 1022062:	f7fa f825 	bl	101c0b0 <memset>
 1022066:	4620      	mov	r0, r4
 1022068:	bd70      	pop	{r4, r5, r6, pc}
 102206a:	bf00      	nop

0102206c <__sfp>:
 102206c:	f246 13cc 	movw	r3, #25036	; 0x61cc
 1022070:	f2c0 1306 	movt	r3, #262	; 0x106
 1022074:	b570      	push	{r4, r5, r6, lr}
 1022076:	4606      	mov	r6, r0
 1022078:	681d      	ldr	r5, [r3, #0]
 102207a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 102207c:	b353      	cbz	r3, 10220d4 <__sfp+0x68>
 102207e:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 1022082:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 1022086:	3b01      	subs	r3, #1
 1022088:	d504      	bpl.n	1022094 <__sfp+0x28>
 102208a:	e01f      	b.n	10220cc <__sfp+0x60>
 102208c:	3b01      	subs	r3, #1
 102208e:	3468      	adds	r4, #104	; 0x68
 1022090:	1c5a      	adds	r2, r3, #1
 1022092:	d01b      	beq.n	10220cc <__sfp+0x60>
 1022094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1022098:	2a00      	cmp	r2, #0
 102209a:	d1f7      	bne.n	102208c <__sfp+0x20>
 102209c:	2500      	movs	r5, #0
 102209e:	2301      	movs	r3, #1
 10220a0:	6665      	str	r5, [r4, #100]	; 0x64
 10220a2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 10220a6:	6025      	str	r5, [r4, #0]
 10220a8:	4629      	mov	r1, r5
 10220aa:	60e3      	str	r3, [r4, #12]
 10220ac:	2208      	movs	r2, #8
 10220ae:	6065      	str	r5, [r4, #4]
 10220b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 10220b4:	60a5      	str	r5, [r4, #8]
 10220b6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 10220ba:	61a5      	str	r5, [r4, #24]
 10220bc:	f7f9 fff8 	bl	101c0b0 <memset>
 10220c0:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 10220c4:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 10220c8:	4620      	mov	r0, r4
 10220ca:	bd70      	pop	{r4, r5, r6, pc}
 10220cc:	6828      	ldr	r0, [r5, #0]
 10220ce:	b128      	cbz	r0, 10220dc <__sfp+0x70>
 10220d0:	4605      	mov	r5, r0
 10220d2:	e7d6      	b.n	1022082 <__sfp+0x16>
 10220d4:	4628      	mov	r0, r5
 10220d6:	f7ff ff3d 	bl	1021f54 <__sinit.part.0>
 10220da:	e7d0      	b.n	102207e <__sfp+0x12>
 10220dc:	2104      	movs	r1, #4
 10220de:	4630      	mov	r0, r6
 10220e0:	f7ff ffac 	bl	102203c <__sfmoreglue>
 10220e4:	6028      	str	r0, [r5, #0]
 10220e6:	2800      	cmp	r0, #0
 10220e8:	d1f2      	bne.n	10220d0 <__sfp+0x64>
 10220ea:	230c      	movs	r3, #12
 10220ec:	4604      	mov	r4, r0
 10220ee:	6033      	str	r3, [r6, #0]
 10220f0:	e7ea      	b.n	10220c8 <__sfp+0x5c>
 10220f2:	bf00      	nop

010220f4 <_cleanup>:
 10220f4:	f246 13cc 	movw	r3, #25036	; 0x61cc
 10220f8:	f2c0 1306 	movt	r3, #262	; 0x106
 10220fc:	f645 112d 	movw	r1, #22829	; 0x592d
 1022100:	f2c0 1102 	movt	r1, #258	; 0x102
 1022104:	6818      	ldr	r0, [r3, #0]
 1022106:	f000 bb2d 	b.w	1022764 <_fwalk_reent>
 102210a:	bf00      	nop

0102210c <__sinit>:
 102210c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 102210e:	b103      	cbz	r3, 1022112 <__sinit+0x6>
 1022110:	4770      	bx	lr
 1022112:	e71f      	b.n	1021f54 <__sinit.part.0>

01022114 <__sfp_lock_acquire>:
 1022114:	4770      	bx	lr
 1022116:	bf00      	nop

01022118 <__sfp_lock_release>:
 1022118:	4770      	bx	lr
 102211a:	bf00      	nop

0102211c <__sinit_lock_acquire>:
 102211c:	4770      	bx	lr
 102211e:	bf00      	nop

01022120 <__sinit_lock_release>:
 1022120:	4770      	bx	lr
 1022122:	bf00      	nop

01022124 <__fp_lock_all>:
 1022124:	f64a 1348 	movw	r3, #43336	; 0xa948
 1022128:	f2c0 1306 	movt	r3, #262	; 0x106
 102212c:	f641 7145 	movw	r1, #8005	; 0x1f45
 1022130:	f2c0 1102 	movt	r1, #258	; 0x102
 1022134:	6818      	ldr	r0, [r3, #0]
 1022136:	f000 baf1 	b.w	102271c <_fwalk>
 102213a:	bf00      	nop

0102213c <__fp_unlock_all>:
 102213c:	f64a 1348 	movw	r3, #43336	; 0xa948
 1022140:	f2c0 1306 	movt	r3, #262	; 0x106
 1022144:	f242 0139 	movw	r1, #8249	; 0x2039
 1022148:	f2c0 1102 	movt	r1, #258	; 0x102
 102214c:	6818      	ldr	r0, [r3, #0]
 102214e:	f000 bae5 	b.w	102271c <_fwalk>
 1022152:	bf00      	nop

01022154 <_malloc_trim_r>:
 1022154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1022156:	f64a 7704 	movw	r7, #44804	; 0xaf04
 102215a:	f2c0 1706 	movt	r7, #262	; 0x106
 102215e:	460c      	mov	r4, r1
 1022160:	4606      	mov	r6, r0
 1022162:	f7f9 fff5 	bl	101c150 <__malloc_lock>
 1022166:	68bb      	ldr	r3, [r7, #8]
 1022168:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 102216c:	310f      	adds	r1, #15
 102216e:	685d      	ldr	r5, [r3, #4]
 1022170:	f025 0503 	bic.w	r5, r5, #3
 1022174:	4429      	add	r1, r5
 1022176:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 102217a:	f021 010f 	bic.w	r1, r1, #15
 102217e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 1022182:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 1022186:	db07      	blt.n	1022198 <_malloc_trim_r+0x44>
 1022188:	2100      	movs	r1, #0
 102218a:	4630      	mov	r0, r6
 102218c:	f7fa fb20 	bl	101c7d0 <_sbrk_r>
 1022190:	68bb      	ldr	r3, [r7, #8]
 1022192:	442b      	add	r3, r5
 1022194:	4298      	cmp	r0, r3
 1022196:	d004      	beq.n	10221a2 <_malloc_trim_r+0x4e>
 1022198:	4630      	mov	r0, r6
 102219a:	f7f9 ffdb 	bl	101c154 <__malloc_unlock>
 102219e:	2000      	movs	r0, #0
 10221a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10221a2:	4261      	negs	r1, r4
 10221a4:	4630      	mov	r0, r6
 10221a6:	f7fa fb13 	bl	101c7d0 <_sbrk_r>
 10221aa:	3001      	adds	r0, #1
 10221ac:	d010      	beq.n	10221d0 <_malloc_trim_r+0x7c>
 10221ae:	68ba      	ldr	r2, [r7, #8]
 10221b0:	f240 23fc 	movw	r3, #764	; 0x2fc
 10221b4:	f2c0 1307 	movt	r3, #263	; 0x107
 10221b8:	1b2d      	subs	r5, r5, r4
 10221ba:	4630      	mov	r0, r6
 10221bc:	f045 0501 	orr.w	r5, r5, #1
 10221c0:	6819      	ldr	r1, [r3, #0]
 10221c2:	6055      	str	r5, [r2, #4]
 10221c4:	1b09      	subs	r1, r1, r4
 10221c6:	6019      	str	r1, [r3, #0]
 10221c8:	f7f9 ffc4 	bl	101c154 <__malloc_unlock>
 10221cc:	2001      	movs	r0, #1
 10221ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10221d0:	2100      	movs	r1, #0
 10221d2:	4630      	mov	r0, r6
 10221d4:	f7fa fafc 	bl	101c7d0 <_sbrk_r>
 10221d8:	68ba      	ldr	r2, [r7, #8]
 10221da:	1a83      	subs	r3, r0, r2
 10221dc:	2b0f      	cmp	r3, #15
 10221de:	dddb      	ble.n	1022198 <_malloc_trim_r+0x44>
 10221e0:	f24b 340c 	movw	r4, #45836	; 0xb30c
 10221e4:	f2c0 1406 	movt	r4, #262	; 0x106
 10221e8:	f240 21fc 	movw	r1, #764	; 0x2fc
 10221ec:	f2c0 1107 	movt	r1, #263	; 0x107
 10221f0:	6824      	ldr	r4, [r4, #0]
 10221f2:	f043 0301 	orr.w	r3, r3, #1
 10221f6:	6053      	str	r3, [r2, #4]
 10221f8:	1b00      	subs	r0, r0, r4
 10221fa:	6008      	str	r0, [r1, #0]
 10221fc:	e7cc      	b.n	1022198 <_malloc_trim_r+0x44>
 10221fe:	bf00      	nop

01022200 <_free_r>:
 1022200:	2900      	cmp	r1, #0
 1022202:	d060      	beq.n	10222c6 <_free_r+0xc6>
 1022204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1022206:	460f      	mov	r7, r1
 1022208:	4606      	mov	r6, r0
 102220a:	f7f9 ffa1 	bl	101c150 <__malloc_lock>
 102220e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 1022212:	f64a 7204 	movw	r2, #44804	; 0xaf04
 1022216:	f2c0 1206 	movt	r2, #262	; 0x106
 102221a:	f1a7 0008 	sub.w	r0, r7, #8
 102221e:	f02c 0301 	bic.w	r3, ip, #1
 1022222:	18c4      	adds	r4, r0, r3
 1022224:	6891      	ldr	r1, [r2, #8]
 1022226:	6865      	ldr	r5, [r4, #4]
 1022228:	42a1      	cmp	r1, r4
 102222a:	f025 0503 	bic.w	r5, r5, #3
 102222e:	d07f      	beq.n	1022330 <_free_r+0x130>
 1022230:	f01c 0f01 	tst.w	ip, #1
 1022234:	6065      	str	r5, [r4, #4]
 1022236:	eb04 0105 	add.w	r1, r4, r5
 102223a:	d133      	bne.n	10222a4 <_free_r+0xa4>
 102223c:	f857 7c08 	ldr.w	r7, [r7, #-8]
 1022240:	f102 0c08 	add.w	ip, r2, #8
 1022244:	6849      	ldr	r1, [r1, #4]
 1022246:	1bc0      	subs	r0, r0, r7
 1022248:	443b      	add	r3, r7
 102224a:	f001 0101 	and.w	r1, r1, #1
 102224e:	6887      	ldr	r7, [r0, #8]
 1022250:	4567      	cmp	r7, ip
 1022252:	d061      	beq.n	1022318 <_free_r+0x118>
 1022254:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 1022258:	f8c7 e00c 	str.w	lr, [r7, #12]
 102225c:	f8ce 7008 	str.w	r7, [lr, #8]
 1022260:	2900      	cmp	r1, #0
 1022262:	f000 8090 	beq.w	1022386 <_free_r+0x186>
 1022266:	f043 0101 	orr.w	r1, r3, #1
 102226a:	6041      	str	r1, [r0, #4]
 102226c:	6023      	str	r3, [r4, #0]
 102226e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1022272:	d231      	bcs.n	10222d8 <_free_r+0xd8>
 1022274:	08db      	lsrs	r3, r3, #3
 1022276:	2101      	movs	r1, #1
 1022278:	185d      	adds	r5, r3, r1
 102227a:	6854      	ldr	r4, [r2, #4]
 102227c:	109b      	asrs	r3, r3, #2
 102227e:	f852 7035 	ldr.w	r7, [r2, r5, lsl #3]
 1022282:	fa01 f303 	lsl.w	r3, r1, r3
 1022286:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 102228a:	4323      	orrs	r3, r4
 102228c:	3908      	subs	r1, #8
 102228e:	6053      	str	r3, [r2, #4]
 1022290:	e9c0 7102 	strd	r7, r1, [r0, #8]
 1022294:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
 1022298:	60f8      	str	r0, [r7, #12]
 102229a:	4630      	mov	r0, r6
 102229c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 10222a0:	f7f9 bf58 	b.w	101c154 <__malloc_unlock>
 10222a4:	6849      	ldr	r1, [r1, #4]
 10222a6:	07c9      	lsls	r1, r1, #31
 10222a8:	d40e      	bmi.n	10222c8 <_free_r+0xc8>
 10222aa:	442b      	add	r3, r5
 10222ac:	f102 0c08 	add.w	ip, r2, #8
 10222b0:	68a1      	ldr	r1, [r4, #8]
 10222b2:	f043 0501 	orr.w	r5, r3, #1
 10222b6:	4561      	cmp	r1, ip
 10222b8:	d06d      	beq.n	1022396 <_free_r+0x196>
 10222ba:	68e4      	ldr	r4, [r4, #12]
 10222bc:	60cc      	str	r4, [r1, #12]
 10222be:	60a1      	str	r1, [r4, #8]
 10222c0:	6045      	str	r5, [r0, #4]
 10222c2:	50c3      	str	r3, [r0, r3]
 10222c4:	e7d3      	b.n	102226e <_free_r+0x6e>
 10222c6:	4770      	bx	lr
 10222c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 10222cc:	f043 0101 	orr.w	r1, r3, #1
 10222d0:	f847 1c04 	str.w	r1, [r7, #-4]
 10222d4:	6023      	str	r3, [r4, #0]
 10222d6:	d3cd      	bcc.n	1022274 <_free_r+0x74>
 10222d8:	0a59      	lsrs	r1, r3, #9
 10222da:	2904      	cmp	r1, #4
 10222dc:	d848      	bhi.n	1022370 <_free_r+0x170>
 10222de:	0999      	lsrs	r1, r3, #6
 10222e0:	f101 0439 	add.w	r4, r1, #57	; 0x39
 10222e4:	f101 0538 	add.w	r5, r1, #56	; 0x38
 10222e8:	00e1      	lsls	r1, r4, #3
 10222ea:	1854      	adds	r4, r2, r1
 10222ec:	5851      	ldr	r1, [r2, r1]
 10222ee:	3c08      	subs	r4, #8
 10222f0:	428c      	cmp	r4, r1
 10222f2:	d057      	beq.n	10223a4 <_free_r+0x1a4>
 10222f4:	684a      	ldr	r2, [r1, #4]
 10222f6:	f022 0203 	bic.w	r2, r2, #3
 10222fa:	429a      	cmp	r2, r3
 10222fc:	d902      	bls.n	1022304 <_free_r+0x104>
 10222fe:	6889      	ldr	r1, [r1, #8]
 1022300:	428c      	cmp	r4, r1
 1022302:	d1f7      	bne.n	10222f4 <_free_r+0xf4>
 1022304:	68cc      	ldr	r4, [r1, #12]
 1022306:	e9c0 1402 	strd	r1, r4, [r0, #8]
 102230a:	60a0      	str	r0, [r4, #8]
 102230c:	60c8      	str	r0, [r1, #12]
 102230e:	4630      	mov	r0, r6
 1022310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1022314:	f7f9 bf1e 	b.w	101c154 <__malloc_unlock>
 1022318:	2900      	cmp	r1, #0
 102231a:	d164      	bne.n	10223e6 <_free_r+0x1e6>
 102231c:	68a1      	ldr	r1, [r4, #8]
 102231e:	442b      	add	r3, r5
 1022320:	68e2      	ldr	r2, [r4, #12]
 1022322:	f043 0401 	orr.w	r4, r3, #1
 1022326:	60ca      	str	r2, [r1, #12]
 1022328:	6091      	str	r1, [r2, #8]
 102232a:	6044      	str	r4, [r0, #4]
 102232c:	50c3      	str	r3, [r0, r3]
 102232e:	e7b4      	b.n	102229a <_free_r+0x9a>
 1022330:	f01c 0f01 	tst.w	ip, #1
 1022334:	442b      	add	r3, r5
 1022336:	d107      	bne.n	1022348 <_free_r+0x148>
 1022338:	f857 1c08 	ldr.w	r1, [r7, #-8]
 102233c:	1a40      	subs	r0, r0, r1
 102233e:	440b      	add	r3, r1
 1022340:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 1022344:	60e1      	str	r1, [r4, #12]
 1022346:	608c      	str	r4, [r1, #8]
 1022348:	f24b 3110 	movw	r1, #45840	; 0xb310
 102234c:	f2c0 1106 	movt	r1, #262	; 0x106
 1022350:	f043 0401 	orr.w	r4, r3, #1
 1022354:	6044      	str	r4, [r0, #4]
 1022356:	6809      	ldr	r1, [r1, #0]
 1022358:	6090      	str	r0, [r2, #8]
 102235a:	4299      	cmp	r1, r3
 102235c:	d89d      	bhi.n	102229a <_free_r+0x9a>
 102235e:	f240 23f8 	movw	r3, #760	; 0x2f8
 1022362:	f2c0 1307 	movt	r3, #263	; 0x107
 1022366:	4630      	mov	r0, r6
 1022368:	6819      	ldr	r1, [r3, #0]
 102236a:	f7ff fef3 	bl	1022154 <_malloc_trim_r>
 102236e:	e794      	b.n	102229a <_free_r+0x9a>
 1022370:	2914      	cmp	r1, #20
 1022372:	d90a      	bls.n	102238a <_free_r+0x18a>
 1022374:	2954      	cmp	r1, #84	; 0x54
 1022376:	d81d      	bhi.n	10223b4 <_free_r+0x1b4>
 1022378:	0b19      	lsrs	r1, r3, #12
 102237a:	f101 046f 	add.w	r4, r1, #111	; 0x6f
 102237e:	f101 056e 	add.w	r5, r1, #110	; 0x6e
 1022382:	00e1      	lsls	r1, r4, #3
 1022384:	e7b1      	b.n	10222ea <_free_r+0xea>
 1022386:	442b      	add	r3, r5
 1022388:	e792      	b.n	10222b0 <_free_r+0xb0>
 102238a:	f101 045c 	add.w	r4, r1, #92	; 0x5c
 102238e:	f101 055b 	add.w	r5, r1, #91	; 0x5b
 1022392:	00e1      	lsls	r1, r4, #3
 1022394:	e7a9      	b.n	10222ea <_free_r+0xea>
 1022396:	e9c2 0004 	strd	r0, r0, [r2, #16]
 102239a:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 102239e:	6045      	str	r5, [r0, #4]
 10223a0:	50c3      	str	r3, [r0, r3]
 10223a2:	e77a      	b.n	102229a <_free_r+0x9a>
 10223a4:	6853      	ldr	r3, [r2, #4]
 10223a6:	10ad      	asrs	r5, r5, #2
 10223a8:	2701      	movs	r7, #1
 10223aa:	fa07 f505 	lsl.w	r5, r7, r5
 10223ae:	431d      	orrs	r5, r3
 10223b0:	6055      	str	r5, [r2, #4]
 10223b2:	e7a8      	b.n	1022306 <_free_r+0x106>
 10223b4:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 10223b8:	d806      	bhi.n	10223c8 <_free_r+0x1c8>
 10223ba:	0bd9      	lsrs	r1, r3, #15
 10223bc:	f101 0478 	add.w	r4, r1, #120	; 0x78
 10223c0:	f101 0577 	add.w	r5, r1, #119	; 0x77
 10223c4:	00e1      	lsls	r1, r4, #3
 10223c6:	e790      	b.n	10222ea <_free_r+0xea>
 10223c8:	f240 5454 	movw	r4, #1364	; 0x554
 10223cc:	42a1      	cmp	r1, r4
 10223ce:	bf9d      	ittte	ls
 10223d0:	0c99      	lsrls	r1, r3, #18
 10223d2:	f101 047d 	addls.w	r4, r1, #125	; 0x7d
 10223d6:	f101 057c 	addls.w	r5, r1, #124	; 0x7c
 10223da:	f44f 717e 	movhi.w	r1, #1016	; 0x3f8
 10223de:	bf8c      	ite	hi
 10223e0:	257e      	movhi	r5, #126	; 0x7e
 10223e2:	00e1      	lslls	r1, r4, #3
 10223e4:	e781      	b.n	10222ea <_free_r+0xea>
 10223e6:	f043 0201 	orr.w	r2, r3, #1
 10223ea:	6042      	str	r2, [r0, #4]
 10223ec:	6023      	str	r3, [r4, #0]
 10223ee:	e754      	b.n	102229a <_free_r+0x9a>

010223f0 <__sfvwrite_r>:
 10223f0:	6893      	ldr	r3, [r2, #8]
 10223f2:	2b00      	cmp	r3, #0
 10223f4:	f000 8114 	beq.w	1022620 <__sfvwrite_r+0x230>
 10223f8:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 10223fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1022400:	f01c 0f08 	tst.w	ip, #8
 1022404:	b083      	sub	sp, #12
 1022406:	460c      	mov	r4, r1
 1022408:	4681      	mov	r9, r0
 102240a:	4690      	mov	r8, r2
 102240c:	d038      	beq.n	1022480 <__sfvwrite_r+0x90>
 102240e:	690b      	ldr	r3, [r1, #16]
 1022410:	b3b3      	cbz	r3, 1022480 <__sfvwrite_r+0x90>
 1022412:	f01c 0302 	ands.w	r3, ip, #2
 1022416:	f8d8 6000 	ldr.w	r6, [r8]
 102241a:	d03f      	beq.n	102249c <__sfvwrite_r+0xac>
 102241c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1022420:	2700      	movs	r7, #0
 1022422:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1022426:	f44f 4a7c 	mov.w	sl, #64512	; 0xfc00
 102242a:	f6c7 7aff 	movt	sl, #32767	; 0x7fff
 102242e:	463d      	mov	r5, r7
 1022430:	4555      	cmp	r5, sl
 1022432:	462b      	mov	r3, r5
 1022434:	463a      	mov	r2, r7
 1022436:	4661      	mov	r1, ip
 1022438:	bf28      	it	cs
 102243a:	4653      	movcs	r3, sl
 102243c:	4648      	mov	r0, r9
 102243e:	b1dd      	cbz	r5, 1022478 <__sfvwrite_r+0x88>
 1022440:	47d8      	blx	fp
 1022442:	2800      	cmp	r0, #0
 1022444:	4407      	add	r7, r0
 1022446:	eba5 0500 	sub.w	r5, r5, r0
 102244a:	f340 80df 	ble.w	102260c <__sfvwrite_r+0x21c>
 102244e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 1022452:	1a18      	subs	r0, r3, r0
 1022454:	f8c8 0008 	str.w	r0, [r8, #8]
 1022458:	2800      	cmp	r0, #0
 102245a:	f000 80c6 	beq.w	10225ea <__sfvwrite_r+0x1fa>
 102245e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1022462:	4555      	cmp	r5, sl
 1022464:	462b      	mov	r3, r5
 1022466:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 102246a:	bf28      	it	cs
 102246c:	4653      	movcs	r3, sl
 102246e:	463a      	mov	r2, r7
 1022470:	4661      	mov	r1, ip
 1022472:	4648      	mov	r0, r9
 1022474:	2d00      	cmp	r5, #0
 1022476:	d1e3      	bne.n	1022440 <__sfvwrite_r+0x50>
 1022478:	e9d6 7500 	ldrd	r7, r5, [r6]
 102247c:	3608      	adds	r6, #8
 102247e:	e7d7      	b.n	1022430 <__sfvwrite_r+0x40>
 1022480:	4621      	mov	r1, r4
 1022482:	4648      	mov	r0, r9
 1022484:	f7fe fc84 	bl	1020d90 <__swsetup_r>
 1022488:	2800      	cmp	r0, #0
 102248a:	f040 8144 	bne.w	1022716 <__sfvwrite_r+0x326>
 102248e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1022492:	f8d8 6000 	ldr.w	r6, [r8]
 1022496:	f01c 0302 	ands.w	r3, ip, #2
 102249a:	d1bf      	bne.n	102241c <__sfvwrite_r+0x2c>
 102249c:	f01c 0a01 	ands.w	sl, ip, #1
 10224a0:	f040 80c0 	bne.w	1022624 <__sfvwrite_r+0x234>
 10224a4:	68a7      	ldr	r7, [r4, #8]
 10224a6:	4655      	mov	r5, sl
 10224a8:	6820      	ldr	r0, [r4, #0]
 10224aa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 10224ae:	f6c7 73ff 	movt	r3, #32767	; 0x7fff
 10224b2:	9301      	str	r3, [sp, #4]
 10224b4:	2d00      	cmp	r5, #0
 10224b6:	d057      	beq.n	1022568 <__sfvwrite_r+0x178>
 10224b8:	f41c 7f00 	tst.w	ip, #512	; 0x200
 10224bc:	f000 80c6 	beq.w	102264c <__sfvwrite_r+0x25c>
 10224c0:	42af      	cmp	r7, r5
 10224c2:	463b      	mov	r3, r7
 10224c4:	f200 80f6 	bhi.w	10226b4 <__sfvwrite_r+0x2c4>
 10224c8:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 10224cc:	d02f      	beq.n	102252e <__sfvwrite_r+0x13e>
 10224ce:	6962      	ldr	r2, [r4, #20]
 10224d0:	f105 0b01 	add.w	fp, r5, #1
 10224d4:	6921      	ldr	r1, [r4, #16]
 10224d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 10224da:	1a47      	subs	r7, r0, r1
 10224dc:	44bb      	add	fp, r7
 10224de:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 10224e2:	1052      	asrs	r2, r2, #1
 10224e4:	4593      	cmp	fp, r2
 10224e6:	bf94      	ite	ls
 10224e8:	4693      	movls	fp, r2
 10224ea:	465a      	movhi	r2, fp
 10224ec:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 10224f0:	f000 80f8 	beq.w	10226e4 <__sfvwrite_r+0x2f4>
 10224f4:	4611      	mov	r1, r2
 10224f6:	4648      	mov	r0, r9
 10224f8:	f7f8 fd6e 	bl	101afd8 <_malloc_r>
 10224fc:	2800      	cmp	r0, #0
 10224fe:	f000 8104 	beq.w	102270a <__sfvwrite_r+0x31a>
 1022502:	463a      	mov	r2, r7
 1022504:	6921      	ldr	r1, [r4, #16]
 1022506:	9000      	str	r0, [sp, #0]
 1022508:	f7f9 ea7a 	blx	101ba00 <memcpy>
 102250c:	89a2      	ldrh	r2, [r4, #12]
 102250e:	9b00      	ldr	r3, [sp, #0]
 1022510:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 1022514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1022518:	81a2      	strh	r2, [r4, #12]
 102251a:	19d8      	adds	r0, r3, r7
 102251c:	6123      	str	r3, [r4, #16]
 102251e:	ebab 0707 	sub.w	r7, fp, r7
 1022522:	462b      	mov	r3, r5
 1022524:	60a7      	str	r7, [r4, #8]
 1022526:	462f      	mov	r7, r5
 1022528:	6020      	str	r0, [r4, #0]
 102252a:	f8c4 b014 	str.w	fp, [r4, #20]
 102252e:	461a      	mov	r2, r3
 1022530:	4651      	mov	r1, sl
 1022532:	9300      	str	r3, [sp, #0]
 1022534:	f7f9 fd54 	bl	101bfe0 <memmove>
 1022538:	68a1      	ldr	r1, [r4, #8]
 102253a:	46ab      	mov	fp, r5
 102253c:	6822      	ldr	r2, [r4, #0]
 102253e:	2500      	movs	r5, #0
 1022540:	9b00      	ldr	r3, [sp, #0]
 1022542:	1bcf      	subs	r7, r1, r7
 1022544:	60a7      	str	r7, [r4, #8]
 1022546:	4413      	add	r3, r2
 1022548:	6023      	str	r3, [r4, #0]
 102254a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 102254e:	44da      	add	sl, fp
 1022550:	eba0 000b 	sub.w	r0, r0, fp
 1022554:	f8c8 0008 	str.w	r0, [r8, #8]
 1022558:	2800      	cmp	r0, #0
 102255a:	d046      	beq.n	10225ea <__sfvwrite_r+0x1fa>
 102255c:	68a7      	ldr	r7, [r4, #8]
 102255e:	6820      	ldr	r0, [r4, #0]
 1022560:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1022564:	2d00      	cmp	r5, #0
 1022566:	d1a7      	bne.n	10224b8 <__sfvwrite_r+0xc8>
 1022568:	e9d6 a500 	ldrd	sl, r5, [r6]
 102256c:	3608      	adds	r6, #8
 102256e:	e7a1      	b.n	10224b4 <__sfvwrite_r+0xc4>
 1022570:	f10b 0308 	add.w	r3, fp, #8
 1022574:	f853 7c04 	ldr.w	r7, [r3, #-4]
 1022578:	469b      	mov	fp, r3
 102257a:	f853 6c08 	ldr.w	r6, [r3, #-8]
 102257e:	3308      	adds	r3, #8
 1022580:	2f00      	cmp	r7, #0
 1022582:	d0f7      	beq.n	1022574 <__sfvwrite_r+0x184>
 1022584:	463a      	mov	r2, r7
 1022586:	210a      	movs	r1, #10
 1022588:	4630      	mov	r0, r6
 102258a:	f000 fa01 	bl	1022990 <memchr>
 102258e:	2800      	cmp	r0, #0
 1022590:	d059      	beq.n	1022646 <__sfvwrite_r+0x256>
 1022592:	3001      	adds	r0, #1
 1022594:	eba0 0a06 	sub.w	sl, r0, r6
 1022598:	4653      	mov	r3, sl
 102259a:	6922      	ldr	r2, [r4, #16]
 102259c:	42bb      	cmp	r3, r7
 102259e:	6820      	ldr	r0, [r4, #0]
 10225a0:	6961      	ldr	r1, [r4, #20]
 10225a2:	bf28      	it	cs
 10225a4:	463b      	movcs	r3, r7
 10225a6:	68a5      	ldr	r5, [r4, #8]
 10225a8:	4290      	cmp	r0, r2
 10225aa:	440d      	add	r5, r1
 10225ac:	bf94      	ite	ls
 10225ae:	2200      	movls	r2, #0
 10225b0:	2201      	movhi	r2, #1
 10225b2:	42ab      	cmp	r3, r5
 10225b4:	bfd8      	it	le
 10225b6:	2200      	movle	r2, #0
 10225b8:	b9da      	cbnz	r2, 10225f2 <__sfvwrite_r+0x202>
 10225ba:	4299      	cmp	r1, r3
 10225bc:	f300 8084 	bgt.w	10226c8 <__sfvwrite_r+0x2d8>
 10225c0:	460b      	mov	r3, r1
 10225c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 10225c4:	4632      	mov	r2, r6
 10225c6:	69e1      	ldr	r1, [r4, #28]
 10225c8:	4648      	mov	r0, r9
 10225ca:	47a8      	blx	r5
 10225cc:	1e05      	subs	r5, r0, #0
 10225ce:	dd1d      	ble.n	102260c <__sfvwrite_r+0x21c>
 10225d0:	ebba 0a05 	subs.w	sl, sl, r5
 10225d4:	bf18      	it	ne
 10225d6:	2001      	movne	r0, #1
 10225d8:	d06f      	beq.n	10226ba <__sfvwrite_r+0x2ca>
 10225da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 10225de:	442e      	add	r6, r5
 10225e0:	1b7f      	subs	r7, r7, r5
 10225e2:	1b5d      	subs	r5, r3, r5
 10225e4:	f8c8 5008 	str.w	r5, [r8, #8]
 10225e8:	bb15      	cbnz	r5, 1022630 <__sfvwrite_r+0x240>
 10225ea:	2000      	movs	r0, #0
 10225ec:	b003      	add	sp, #12
 10225ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10225f2:	4631      	mov	r1, r6
 10225f4:	462a      	mov	r2, r5
 10225f6:	f7f9 fcf3 	bl	101bfe0 <memmove>
 10225fa:	6823      	ldr	r3, [r4, #0]
 10225fc:	4621      	mov	r1, r4
 10225fe:	4648      	mov	r0, r9
 1022600:	442b      	add	r3, r5
 1022602:	6023      	str	r3, [r4, #0]
 1022604:	f7ff fc70 	bl	1021ee8 <_fflush_r>
 1022608:	2800      	cmp	r0, #0
 102260a:	d0e1      	beq.n	10225d0 <__sfvwrite_r+0x1e0>
 102260c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1022610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1022614:	f04f 30ff 	mov.w	r0, #4294967295
 1022618:	81a3      	strh	r3, [r4, #12]
 102261a:	b003      	add	sp, #12
 102261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1022620:	2000      	movs	r0, #0
 1022622:	4770      	bx	lr
 1022624:	469a      	mov	sl, r3
 1022626:	4618      	mov	r0, r3
 1022628:	461f      	mov	r7, r3
 102262a:	4633      	mov	r3, r6
 102262c:	469b      	mov	fp, r3
 102262e:	4656      	mov	r6, sl
 1022630:	2f00      	cmp	r7, #0
 1022632:	d09d      	beq.n	1022570 <__sfvwrite_r+0x180>
 1022634:	2800      	cmp	r0, #0
 1022636:	d1af      	bne.n	1022598 <__sfvwrite_r+0x1a8>
 1022638:	463a      	mov	r2, r7
 102263a:	210a      	movs	r1, #10
 102263c:	4630      	mov	r0, r6
 102263e:	f000 f9a7 	bl	1022990 <memchr>
 1022642:	2800      	cmp	r0, #0
 1022644:	d1a5      	bne.n	1022592 <__sfvwrite_r+0x1a2>
 1022646:	1c7b      	adds	r3, r7, #1
 1022648:	469a      	mov	sl, r3
 102264a:	e7a6      	b.n	102259a <__sfvwrite_r+0x1aa>
 102264c:	6923      	ldr	r3, [r4, #16]
 102264e:	4283      	cmp	r3, r0
 1022650:	d319      	bcc.n	1022686 <__sfvwrite_r+0x296>
 1022652:	f8d4 b014 	ldr.w	fp, [r4, #20]
 1022656:	45ab      	cmp	fp, r5
 1022658:	d815      	bhi.n	1022686 <__sfvwrite_r+0x296>
 102265a:	9b01      	ldr	r3, [sp, #4]
 102265c:	4659      	mov	r1, fp
 102265e:	429d      	cmp	r5, r3
 1022660:	bf94      	ite	ls
 1022662:	4628      	movls	r0, r5
 1022664:	f06f 4000 	mvnhi.w	r0, #2147483648	; 0x80000000
 1022668:	f7f7 f98a 	bl	1019980 <__divsi3>
 102266c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 102266e:	4652      	mov	r2, sl
 1022670:	69e1      	ldr	r1, [r4, #28]
 1022672:	fb0b f300 	mul.w	r3, fp, r0
 1022676:	4648      	mov	r0, r9
 1022678:	47b8      	blx	r7
 102267a:	f1b0 0b00 	subs.w	fp, r0, #0
 102267e:	ddc5      	ble.n	102260c <__sfvwrite_r+0x21c>
 1022680:	eba5 050b 	sub.w	r5, r5, fp
 1022684:	e761      	b.n	102254a <__sfvwrite_r+0x15a>
 1022686:	42af      	cmp	r7, r5
 1022688:	4651      	mov	r1, sl
 102268a:	bf28      	it	cs
 102268c:	462f      	movcs	r7, r5
 102268e:	463a      	mov	r2, r7
 1022690:	46bb      	mov	fp, r7
 1022692:	f7f9 fca5 	bl	101bfe0 <memmove>
 1022696:	68a3      	ldr	r3, [r4, #8]
 1022698:	6822      	ldr	r2, [r4, #0]
 102269a:	1bdb      	subs	r3, r3, r7
 102269c:	60a3      	str	r3, [r4, #8]
 102269e:	443a      	add	r2, r7
 10226a0:	6022      	str	r2, [r4, #0]
 10226a2:	2b00      	cmp	r3, #0
 10226a4:	d1ec      	bne.n	1022680 <__sfvwrite_r+0x290>
 10226a6:	4621      	mov	r1, r4
 10226a8:	4648      	mov	r0, r9
 10226aa:	f7ff fc1d 	bl	1021ee8 <_fflush_r>
 10226ae:	2800      	cmp	r0, #0
 10226b0:	d0e6      	beq.n	1022680 <__sfvwrite_r+0x290>
 10226b2:	e7ab      	b.n	102260c <__sfvwrite_r+0x21c>
 10226b4:	462f      	mov	r7, r5
 10226b6:	462b      	mov	r3, r5
 10226b8:	e739      	b.n	102252e <__sfvwrite_r+0x13e>
 10226ba:	4621      	mov	r1, r4
 10226bc:	4648      	mov	r0, r9
 10226be:	f7ff fc13 	bl	1021ee8 <_fflush_r>
 10226c2:	2800      	cmp	r0, #0
 10226c4:	d089      	beq.n	10225da <__sfvwrite_r+0x1ea>
 10226c6:	e7a1      	b.n	102260c <__sfvwrite_r+0x21c>
 10226c8:	461a      	mov	r2, r3
 10226ca:	4631      	mov	r1, r6
 10226cc:	9300      	str	r3, [sp, #0]
 10226ce:	461d      	mov	r5, r3
 10226d0:	f7f9 fc86 	bl	101bfe0 <memmove>
 10226d4:	68a1      	ldr	r1, [r4, #8]
 10226d6:	6822      	ldr	r2, [r4, #0]
 10226d8:	9b00      	ldr	r3, [sp, #0]
 10226da:	1ac9      	subs	r1, r1, r3
 10226dc:	4413      	add	r3, r2
 10226de:	60a1      	str	r1, [r4, #8]
 10226e0:	6023      	str	r3, [r4, #0]
 10226e2:	e775      	b.n	10225d0 <__sfvwrite_r+0x1e0>
 10226e4:	4648      	mov	r0, r9
 10226e6:	f000 fe21 	bl	102332c <_realloc_r>
 10226ea:	4603      	mov	r3, r0
 10226ec:	2800      	cmp	r0, #0
 10226ee:	f47f af14 	bne.w	102251a <__sfvwrite_r+0x12a>
 10226f2:	6921      	ldr	r1, [r4, #16]
 10226f4:	4648      	mov	r0, r9
 10226f6:	f7ff fd83 	bl	1022200 <_free_r>
 10226fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10226fe:	220c      	movs	r2, #12
 1022700:	f8c9 2000 	str.w	r2, [r9]
 1022704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1022708:	e782      	b.n	1022610 <__sfvwrite_r+0x220>
 102270a:	220c      	movs	r2, #12
 102270c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1022710:	f8c9 2000 	str.w	r2, [r9]
 1022714:	e77c      	b.n	1022610 <__sfvwrite_r+0x220>
 1022716:	f04f 30ff 	mov.w	r0, #4294967295
 102271a:	e767      	b.n	10225ec <__sfvwrite_r+0x1fc>

0102271c <_fwalk>:
 102271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1022720:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 1022724:	d01a      	beq.n	102275c <_fwalk+0x40>
 1022726:	4688      	mov	r8, r1
 1022728:	2600      	movs	r6, #0
 102272a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 102272e:	3d01      	subs	r5, #1
 1022730:	d40e      	bmi.n	1022750 <_fwalk+0x34>
 1022732:	89a3      	ldrh	r3, [r4, #12]
 1022734:	3d01      	subs	r5, #1
 1022736:	2b01      	cmp	r3, #1
 1022738:	d906      	bls.n	1022748 <_fwalk+0x2c>
 102273a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 102273e:	4620      	mov	r0, r4
 1022740:	3301      	adds	r3, #1
 1022742:	d001      	beq.n	1022748 <_fwalk+0x2c>
 1022744:	47c0      	blx	r8
 1022746:	4306      	orrs	r6, r0
 1022748:	1c6b      	adds	r3, r5, #1
 102274a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 102274e:	d1f0      	bne.n	1022732 <_fwalk+0x16>
 1022750:	683f      	ldr	r7, [r7, #0]
 1022752:	2f00      	cmp	r7, #0
 1022754:	d1e9      	bne.n	102272a <_fwalk+0xe>
 1022756:	4630      	mov	r0, r6
 1022758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102275c:	463e      	mov	r6, r7
 102275e:	4630      	mov	r0, r6
 1022760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01022764 <_fwalk_reent>:
 1022764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1022768:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 102276c:	d01e      	beq.n	10227ac <_fwalk_reent+0x48>
 102276e:	4688      	mov	r8, r1
 1022770:	4606      	mov	r6, r0
 1022772:	f04f 0900 	mov.w	r9, #0
 1022776:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 102277a:	3d01      	subs	r5, #1
 102277c:	d410      	bmi.n	10227a0 <_fwalk_reent+0x3c>
 102277e:	89a3      	ldrh	r3, [r4, #12]
 1022780:	3d01      	subs	r5, #1
 1022782:	2b01      	cmp	r3, #1
 1022784:	d908      	bls.n	1022798 <_fwalk_reent+0x34>
 1022786:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 102278a:	4621      	mov	r1, r4
 102278c:	4630      	mov	r0, r6
 102278e:	3301      	adds	r3, #1
 1022790:	d002      	beq.n	1022798 <_fwalk_reent+0x34>
 1022792:	47c0      	blx	r8
 1022794:	ea49 0900 	orr.w	r9, r9, r0
 1022798:	1c6b      	adds	r3, r5, #1
 102279a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 102279e:	d1ee      	bne.n	102277e <_fwalk_reent+0x1a>
 10227a0:	683f      	ldr	r7, [r7, #0]
 10227a2:	2f00      	cmp	r7, #0
 10227a4:	d1e7      	bne.n	1022776 <_fwalk_reent+0x12>
 10227a6:	4648      	mov	r0, r9
 10227a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 10227ac:	46b9      	mov	r9, r7
 10227ae:	4648      	mov	r0, r9
 10227b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

010227b4 <_findenv_r>:
 10227b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10227b8:	f24b 3714 	movw	r7, #45844	; 0xb314
 10227bc:	f2c0 1706 	movt	r7, #262	; 0x106
 10227c0:	460d      	mov	r5, r1
 10227c2:	4616      	mov	r6, r2
 10227c4:	4680      	mov	r8, r0
 10227c6:	f003 f8ad 	bl	1025924 <__env_lock>
 10227ca:	f8d7 9000 	ldr.w	r9, [r7]
 10227ce:	f1b9 0f00 	cmp.w	r9, #0
 10227d2:	d021      	beq.n	1022818 <_findenv_r+0x64>
 10227d4:	782a      	ldrb	r2, [r5, #0]
 10227d6:	462c      	mov	r4, r5
 10227d8:	2a3d      	cmp	r2, #61	; 0x3d
 10227da:	bf18      	it	ne
 10227dc:	2a00      	cmpne	r2, #0
 10227de:	d005      	beq.n	10227ec <_findenv_r+0x38>
 10227e0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 10227e4:	2a00      	cmp	r2, #0
 10227e6:	bf18      	it	ne
 10227e8:	2a3d      	cmpne	r2, #61	; 0x3d
 10227ea:	d1f9      	bne.n	10227e0 <_findenv_r+0x2c>
 10227ec:	2a3d      	cmp	r2, #61	; 0x3d
 10227ee:	d013      	beq.n	1022818 <_findenv_r+0x64>
 10227f0:	f8d9 0000 	ldr.w	r0, [r9]
 10227f4:	1b64      	subs	r4, r4, r5
 10227f6:	b178      	cbz	r0, 1022818 <_findenv_r+0x64>
 10227f8:	4622      	mov	r2, r4
 10227fa:	4629      	mov	r1, r5
 10227fc:	f7fa fbdc 	bl	101cfb8 <strncmp>
 1022800:	b930      	cbnz	r0, 1022810 <_findenv_r+0x5c>
 1022802:	f8d9 3000 	ldr.w	r3, [r9]
 1022806:	eb03 0a04 	add.w	sl, r3, r4
 102280a:	5d1b      	ldrb	r3, [r3, r4]
 102280c:	2b3d      	cmp	r3, #61	; 0x3d
 102280e:	d009      	beq.n	1022824 <_findenv_r+0x70>
 1022810:	f859 0f04 	ldr.w	r0, [r9, #4]!
 1022814:	2800      	cmp	r0, #0
 1022816:	d1ef      	bne.n	10227f8 <_findenv_r+0x44>
 1022818:	4640      	mov	r0, r8
 102281a:	f003 f885 	bl	1025928 <__env_unlock>
 102281e:	2000      	movs	r0, #0
 1022820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1022824:	683b      	ldr	r3, [r7, #0]
 1022826:	4640      	mov	r0, r8
 1022828:	eba9 0303 	sub.w	r3, r9, r3
 102282c:	109b      	asrs	r3, r3, #2
 102282e:	6033      	str	r3, [r6, #0]
 1022830:	f003 f87a 	bl	1025928 <__env_unlock>
 1022834:	f10a 0001 	add.w	r0, sl, #1
 1022838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0102283c <_getenv_r>:
 102283c:	b500      	push	{lr}
 102283e:	b083      	sub	sp, #12
 1022840:	aa01      	add	r2, sp, #4
 1022842:	f7ff ffb7 	bl	10227b4 <_findenv_r>
 1022846:	b003      	add	sp, #12
 1022848:	f85d fb04 	ldr.w	pc, [sp], #4

0102284c <__localeconv_l>:
 102284c:	30f0      	adds	r0, #240	; 0xf0
 102284e:	4770      	bx	lr

01022850 <_localeconv_r>:
 1022850:	f64a 1248 	movw	r2, #43336	; 0xa948
 1022854:	f2c0 1206 	movt	r2, #262	; 0x106
 1022858:	f64a 5378 	movw	r3, #44408	; 0xad78
 102285c:	f2c0 1306 	movt	r3, #262	; 0x106
 1022860:	6812      	ldr	r2, [r2, #0]
 1022862:	6b50      	ldr	r0, [r2, #52]	; 0x34
 1022864:	2800      	cmp	r0, #0
 1022866:	bf08      	it	eq
 1022868:	4618      	moveq	r0, r3
 102286a:	30f0      	adds	r0, #240	; 0xf0
 102286c:	4770      	bx	lr
 102286e:	bf00      	nop

01022870 <localeconv>:
 1022870:	f64a 1248 	movw	r2, #43336	; 0xa948
 1022874:	f2c0 1206 	movt	r2, #262	; 0x106
 1022878:	f64a 5378 	movw	r3, #44408	; 0xad78
 102287c:	f2c0 1306 	movt	r3, #262	; 0x106
 1022880:	6812      	ldr	r2, [r2, #0]
 1022882:	6b50      	ldr	r0, [r2, #52]	; 0x34
 1022884:	2800      	cmp	r0, #0
 1022886:	bf08      	it	eq
 1022888:	4618      	moveq	r0, r3
 102288a:	30f0      	adds	r0, #240	; 0xf0
 102288c:	4770      	bx	lr
 102288e:	bf00      	nop

01022890 <__swhatbuf_r>:
 1022890:	b570      	push	{r4, r5, r6, lr}
 1022892:	460c      	mov	r4, r1
 1022894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1022898:	b096      	sub	sp, #88	; 0x58
 102289a:	4615      	mov	r5, r2
 102289c:	461e      	mov	r6, r3
 102289e:	2900      	cmp	r1, #0
 10228a0:	db14      	blt.n	10228cc <__swhatbuf_r+0x3c>
 10228a2:	466a      	mov	r2, sp
 10228a4:	f003 f91c 	bl	1025ae0 <_fstat_r>
 10228a8:	2800      	cmp	r0, #0
 10228aa:	db0f      	blt.n	10228cc <__swhatbuf_r+0x3c>
 10228ac:	9a01      	ldr	r2, [sp, #4]
 10228ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 10228b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 10228b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 10228ba:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 10228be:	fab2 f282 	clz	r2, r2
 10228c2:	0952      	lsrs	r2, r2, #5
 10228c4:	6032      	str	r2, [r6, #0]
 10228c6:	602b      	str	r3, [r5, #0]
 10228c8:	b016      	add	sp, #88	; 0x58
 10228ca:	bd70      	pop	{r4, r5, r6, pc}
 10228cc:	89a2      	ldrh	r2, [r4, #12]
 10228ce:	2300      	movs	r3, #0
 10228d0:	6033      	str	r3, [r6, #0]
 10228d2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 10228d6:	d004      	beq.n	10228e2 <__swhatbuf_r+0x52>
 10228d8:	4618      	mov	r0, r3
 10228da:	2340      	movs	r3, #64	; 0x40
 10228dc:	602b      	str	r3, [r5, #0]
 10228de:	b016      	add	sp, #88	; 0x58
 10228e0:	bd70      	pop	{r4, r5, r6, pc}
 10228e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 10228e6:	602b      	str	r3, [r5, #0]
 10228e8:	b016      	add	sp, #88	; 0x58
 10228ea:	bd70      	pop	{r4, r5, r6, pc}

010228ec <__smakebuf_r>:
 10228ec:	898a      	ldrh	r2, [r1, #12]
 10228ee:	460b      	mov	r3, r1
 10228f0:	0792      	lsls	r2, r2, #30
 10228f2:	d506      	bpl.n	1022902 <__smakebuf_r+0x16>
 10228f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
 10228f8:	2101      	movs	r1, #1
 10228fa:	601a      	str	r2, [r3, #0]
 10228fc:	e9c3 2104 	strd	r2, r1, [r3, #16]
 1022900:	4770      	bx	lr
 1022902:	b570      	push	{r4, r5, r6, lr}
 1022904:	b082      	sub	sp, #8
 1022906:	ab01      	add	r3, sp, #4
 1022908:	4606      	mov	r6, r0
 102290a:	466a      	mov	r2, sp
 102290c:	460c      	mov	r4, r1
 102290e:	f7ff ffbf 	bl	1022890 <__swhatbuf_r>
 1022912:	9900      	ldr	r1, [sp, #0]
 1022914:	4605      	mov	r5, r0
 1022916:	4630      	mov	r0, r6
 1022918:	f7f8 fb5e 	bl	101afd8 <_malloc_r>
 102291c:	b198      	cbz	r0, 1022946 <__smakebuf_r+0x5a>
 102291e:	9900      	ldr	r1, [sp, #0]
 1022920:	f641 7349 	movw	r3, #8009	; 0x1f49
 1022924:	9a01      	ldr	r2, [sp, #4]
 1022926:	f2c0 1302 	movt	r3, #258	; 0x102
 102292a:	63f3      	str	r3, [r6, #60]	; 0x3c
 102292c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1022930:	6020      	str	r0, [r4, #0]
 1022932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 1022936:	6120      	str	r0, [r4, #16]
 1022938:	6161      	str	r1, [r4, #20]
 102293a:	81a3      	strh	r3, [r4, #12]
 102293c:	b99a      	cbnz	r2, 1022966 <__smakebuf_r+0x7a>
 102293e:	432b      	orrs	r3, r5
 1022940:	81a3      	strh	r3, [r4, #12]
 1022942:	b002      	add	sp, #8
 1022944:	bd70      	pop	{r4, r5, r6, pc}
 1022946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 102294a:	059a      	lsls	r2, r3, #22
 102294c:	d4f9      	bmi.n	1022942 <__smakebuf_r+0x56>
 102294e:	f023 0303 	bic.w	r3, r3, #3
 1022952:	f104 0243 	add.w	r2, r4, #67	; 0x43
 1022956:	f043 0302 	orr.w	r3, r3, #2
 102295a:	6022      	str	r2, [r4, #0]
 102295c:	81a3      	strh	r3, [r4, #12]
 102295e:	2301      	movs	r3, #1
 1022960:	e9c4 2304 	strd	r2, r3, [r4, #16]
 1022964:	e7ed      	b.n	1022942 <__smakebuf_r+0x56>
 1022966:	4630      	mov	r0, r6
 1022968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 102296c:	f003 f8ce 	bl	1025b0c <_isatty_r>
 1022970:	b910      	cbnz	r0, 1022978 <__smakebuf_r+0x8c>
 1022972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1022976:	e7e2      	b.n	102293e <__smakebuf_r+0x52>
 1022978:	89a3      	ldrh	r3, [r4, #12]
 102297a:	f023 0303 	bic.w	r3, r3, #3
 102297e:	f043 0301 	orr.w	r3, r3, #1
 1022982:	b21b      	sxth	r3, r3
 1022984:	e7db      	b.n	102293e <__smakebuf_r+0x52>
 1022986:	bf00      	nop
	...

01022990 <memchr>:
 1022990:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 1022994:	2a10      	cmp	r2, #16
 1022996:	db2b      	blt.n	10229f0 <memchr+0x60>
 1022998:	f010 0f07 	tst.w	r0, #7
 102299c:	d008      	beq.n	10229b0 <memchr+0x20>
 102299e:	f810 3b01 	ldrb.w	r3, [r0], #1
 10229a2:	3a01      	subs	r2, #1
 10229a4:	428b      	cmp	r3, r1
 10229a6:	d02d      	beq.n	1022a04 <memchr+0x74>
 10229a8:	f010 0f07 	tst.w	r0, #7
 10229ac:	b342      	cbz	r2, 1022a00 <memchr+0x70>
 10229ae:	d1f6      	bne.n	102299e <memchr+0xe>
 10229b0:	b4f0      	push	{r4, r5, r6, r7}
 10229b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 10229b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 10229ba:	f022 0407 	bic.w	r4, r2, #7
 10229be:	f07f 0700 	mvns.w	r7, #0
 10229c2:	2300      	movs	r3, #0
 10229c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 10229c8:	3c08      	subs	r4, #8
 10229ca:	ea85 0501 	eor.w	r5, r5, r1
 10229ce:	ea86 0601 	eor.w	r6, r6, r1
 10229d2:	fa85 f547 	uadd8	r5, r5, r7
 10229d6:	faa3 f587 	sel	r5, r3, r7
 10229da:	fa86 f647 	uadd8	r6, r6, r7
 10229de:	faa5 f687 	sel	r6, r5, r7
 10229e2:	b98e      	cbnz	r6, 1022a08 <memchr+0x78>
 10229e4:	d1ee      	bne.n	10229c4 <memchr+0x34>
 10229e6:	bcf0      	pop	{r4, r5, r6, r7}
 10229e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 10229ec:	f002 0207 	and.w	r2, r2, #7
 10229f0:	b132      	cbz	r2, 1022a00 <memchr+0x70>
 10229f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 10229f6:	3a01      	subs	r2, #1
 10229f8:	ea83 0301 	eor.w	r3, r3, r1
 10229fc:	b113      	cbz	r3, 1022a04 <memchr+0x74>
 10229fe:	d1f8      	bne.n	10229f2 <memchr+0x62>
 1022a00:	2000      	movs	r0, #0
 1022a02:	4770      	bx	lr
 1022a04:	3801      	subs	r0, #1
 1022a06:	4770      	bx	lr
 1022a08:	2d00      	cmp	r5, #0
 1022a0a:	bf06      	itte	eq
 1022a0c:	4635      	moveq	r5, r6
 1022a0e:	3803      	subeq	r0, #3
 1022a10:	3807      	subne	r0, #7
 1022a12:	f015 0f01 	tst.w	r5, #1
 1022a16:	d107      	bne.n	1022a28 <memchr+0x98>
 1022a18:	3001      	adds	r0, #1
 1022a1a:	f415 7f80 	tst.w	r5, #256	; 0x100
 1022a1e:	bf02      	ittt	eq
 1022a20:	3001      	addeq	r0, #1
 1022a22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 1022a26:	3001      	addeq	r0, #1
 1022a28:	bcf0      	pop	{r4, r5, r6, r7}
 1022a2a:	3801      	subs	r0, #1
 1022a2c:	4770      	bx	lr
 1022a2e:	bf00      	nop

01022a30 <_Balloc>:
 1022a30:	b538      	push	{r3, r4, r5, lr}
 1022a32:	4605      	mov	r5, r0
 1022a34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 1022a36:	460c      	mov	r4, r1
 1022a38:	b14b      	cbz	r3, 1022a4e <_Balloc+0x1e>
 1022a3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 1022a3e:	b180      	cbz	r0, 1022a62 <_Balloc+0x32>
 1022a40:	6802      	ldr	r2, [r0, #0]
 1022a42:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 1022a46:	2300      	movs	r3, #0
 1022a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 1022a4c:	bd38      	pop	{r3, r4, r5, pc}
 1022a4e:	2221      	movs	r2, #33	; 0x21
 1022a50:	2104      	movs	r1, #4
 1022a52:	f7f7 fcbb 	bl	101a3cc <_calloc_r>
 1022a56:	4603      	mov	r3, r0
 1022a58:	64e8      	str	r0, [r5, #76]	; 0x4c
 1022a5a:	2800      	cmp	r0, #0
 1022a5c:	d1ed      	bne.n	1022a3a <_Balloc+0xa>
 1022a5e:	2000      	movs	r0, #0
 1022a60:	bd38      	pop	{r3, r4, r5, pc}
 1022a62:	2101      	movs	r1, #1
 1022a64:	4628      	mov	r0, r5
 1022a66:	fa01 f504 	lsl.w	r5, r1, r4
 1022a6a:	1d6a      	adds	r2, r5, #5
 1022a6c:	0092      	lsls	r2, r2, #2
 1022a6e:	f7f7 fcad 	bl	101a3cc <_calloc_r>
 1022a72:	2800      	cmp	r0, #0
 1022a74:	d0f3      	beq.n	1022a5e <_Balloc+0x2e>
 1022a76:	e9c0 4501 	strd	r4, r5, [r0, #4]
 1022a7a:	e7e4      	b.n	1022a46 <_Balloc+0x16>

01022a7c <_Bfree>:
 1022a7c:	b131      	cbz	r1, 1022a8c <_Bfree+0x10>
 1022a7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 1022a80:	684a      	ldr	r2, [r1, #4]
 1022a82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 1022a86:	6008      	str	r0, [r1, #0]
 1022a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 1022a8c:	4770      	bx	lr
 1022a8e:	bf00      	nop

01022a90 <__multadd>:
 1022a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 1022a92:	f101 0714 	add.w	r7, r1, #20
 1022a96:	690c      	ldr	r4, [r1, #16]
 1022a98:	b083      	sub	sp, #12
 1022a9a:	460d      	mov	r5, r1
 1022a9c:	4606      	mov	r6, r0
 1022a9e:	f04f 0c00 	mov.w	ip, #0
 1022aa2:	6838      	ldr	r0, [r7, #0]
 1022aa4:	f10c 0c01 	add.w	ip, ip, #1
 1022aa8:	4564      	cmp	r4, ip
 1022aaa:	b281      	uxth	r1, r0
 1022aac:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1022ab0:	fb02 3301 	mla	r3, r2, r1, r3
 1022ab4:	ea4f 4113 	mov.w	r1, r3, lsr #16
 1022ab8:	b29b      	uxth	r3, r3
 1022aba:	fb02 1000 	mla	r0, r2, r0, r1
 1022abe:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 1022ac2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 1022ac6:	f847 1b04 	str.w	r1, [r7], #4
 1022aca:	dcea      	bgt.n	1022aa2 <__multadd+0x12>
 1022acc:	b13b      	cbz	r3, 1022ade <__multadd+0x4e>
 1022ace:	68aa      	ldr	r2, [r5, #8]
 1022ad0:	42a2      	cmp	r2, r4
 1022ad2:	dd07      	ble.n	1022ae4 <__multadd+0x54>
 1022ad4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1022ad8:	3401      	adds	r4, #1
 1022ada:	6153      	str	r3, [r2, #20]
 1022adc:	612c      	str	r4, [r5, #16]
 1022ade:	4628      	mov	r0, r5
 1022ae0:	b003      	add	sp, #12
 1022ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022ae4:	6869      	ldr	r1, [r5, #4]
 1022ae6:	4630      	mov	r0, r6
 1022ae8:	9301      	str	r3, [sp, #4]
 1022aea:	3101      	adds	r1, #1
 1022aec:	f7ff ffa0 	bl	1022a30 <_Balloc>
 1022af0:	692a      	ldr	r2, [r5, #16]
 1022af2:	f105 010c 	add.w	r1, r5, #12
 1022af6:	3202      	adds	r2, #2
 1022af8:	0092      	lsls	r2, r2, #2
 1022afa:	4607      	mov	r7, r0
 1022afc:	300c      	adds	r0, #12
 1022afe:	f7f8 ef80 	blx	101ba00 <memcpy>
 1022b02:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 1022b04:	6869      	ldr	r1, [r5, #4]
 1022b06:	9b01      	ldr	r3, [sp, #4]
 1022b08:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 1022b0c:	6028      	str	r0, [r5, #0]
 1022b0e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 1022b12:	463d      	mov	r5, r7
 1022b14:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1022b18:	3401      	adds	r4, #1
 1022b1a:	6153      	str	r3, [r2, #20]
 1022b1c:	612c      	str	r4, [r5, #16]
 1022b1e:	e7de      	b.n	1022ade <__multadd+0x4e>

01022b20 <__s2b>:
 1022b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1022b24:	461d      	mov	r5, r3
 1022b26:	f648 6639 	movw	r6, #36409	; 0x8e39
 1022b2a:	3308      	adds	r3, #8
 1022b2c:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 1022b30:	4607      	mov	r7, r0
 1022b32:	460c      	mov	r4, r1
 1022b34:	2d09      	cmp	r5, #9
 1022b36:	fb86 0103 	smull	r0, r1, r6, r3
 1022b3a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 1022b3e:	4690      	mov	r8, r2
 1022b40:	9e08      	ldr	r6, [sp, #32]
 1022b42:	ebc3 0261 	rsb	r2, r3, r1, asr #1
 1022b46:	dd35      	ble.n	1022bb4 <__s2b+0x94>
 1022b48:	2301      	movs	r3, #1
 1022b4a:	2100      	movs	r1, #0
 1022b4c:	005b      	lsls	r3, r3, #1
 1022b4e:	3101      	adds	r1, #1
 1022b50:	429a      	cmp	r2, r3
 1022b52:	dcfb      	bgt.n	1022b4c <__s2b+0x2c>
 1022b54:	4638      	mov	r0, r7
 1022b56:	f7ff ff6b 	bl	1022a30 <_Balloc>
 1022b5a:	f1b8 0f09 	cmp.w	r8, #9
 1022b5e:	f04f 0301 	mov.w	r3, #1
 1022b62:	bfdc      	itt	le
 1022b64:	340a      	addle	r4, #10
 1022b66:	f04f 0809 	movle.w	r8, #9
 1022b6a:	6146      	str	r6, [r0, #20]
 1022b6c:	6103      	str	r3, [r0, #16]
 1022b6e:	dd10      	ble.n	1022b92 <__s2b+0x72>
 1022b70:	f104 0909 	add.w	r9, r4, #9
 1022b74:	4444      	add	r4, r8
 1022b76:	464e      	mov	r6, r9
 1022b78:	f816 3b01 	ldrb.w	r3, [r6], #1
 1022b7c:	4601      	mov	r1, r0
 1022b7e:	220a      	movs	r2, #10
 1022b80:	4638      	mov	r0, r7
 1022b82:	3b30      	subs	r3, #48	; 0x30
 1022b84:	f7ff ff84 	bl	1022a90 <__multadd>
 1022b88:	42b4      	cmp	r4, r6
 1022b8a:	d1f5      	bne.n	1022b78 <__s2b+0x58>
 1022b8c:	f1a8 0408 	sub.w	r4, r8, #8
 1022b90:	444c      	add	r4, r9
 1022b92:	4545      	cmp	r5, r8
 1022b94:	dd0c      	ble.n	1022bb0 <__s2b+0x90>
 1022b96:	eba5 0508 	sub.w	r5, r5, r8
 1022b9a:	4425      	add	r5, r4
 1022b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 1022ba0:	4601      	mov	r1, r0
 1022ba2:	220a      	movs	r2, #10
 1022ba4:	4638      	mov	r0, r7
 1022ba6:	3b30      	subs	r3, #48	; 0x30
 1022ba8:	f7ff ff72 	bl	1022a90 <__multadd>
 1022bac:	42a5      	cmp	r5, r4
 1022bae:	d1f5      	bne.n	1022b9c <__s2b+0x7c>
 1022bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1022bb4:	2100      	movs	r1, #0
 1022bb6:	e7cd      	b.n	1022b54 <__s2b+0x34>

01022bb8 <__hi0bits>:
 1022bb8:	0c02      	lsrs	r2, r0, #16
 1022bba:	4603      	mov	r3, r0
 1022bbc:	2000      	movs	r0, #0
 1022bbe:	0412      	lsls	r2, r2, #16
 1022bc0:	b90a      	cbnz	r2, 1022bc6 <__hi0bits+0xe>
 1022bc2:	041b      	lsls	r3, r3, #16
 1022bc4:	2010      	movs	r0, #16
 1022bc6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 1022bca:	bf04      	itt	eq
 1022bcc:	021b      	lsleq	r3, r3, #8
 1022bce:	3008      	addeq	r0, #8
 1022bd0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 1022bd4:	bf04      	itt	eq
 1022bd6:	011b      	lsleq	r3, r3, #4
 1022bd8:	3004      	addeq	r0, #4
 1022bda:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 1022bde:	bf04      	itt	eq
 1022be0:	009b      	lsleq	r3, r3, #2
 1022be2:	3002      	addeq	r0, #2
 1022be4:	2b00      	cmp	r3, #0
 1022be6:	db05      	blt.n	1022bf4 <__hi0bits+0x3c>
 1022be8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 1022bec:	f100 0001 	add.w	r0, r0, #1
 1022bf0:	bf08      	it	eq
 1022bf2:	2020      	moveq	r0, #32
 1022bf4:	4770      	bx	lr
 1022bf6:	bf00      	nop

01022bf8 <__lo0bits>:
 1022bf8:	6803      	ldr	r3, [r0, #0]
 1022bfa:	4601      	mov	r1, r0
 1022bfc:	f013 0207 	ands.w	r2, r3, #7
 1022c00:	d009      	beq.n	1022c16 <__lo0bits+0x1e>
 1022c02:	07da      	lsls	r2, r3, #31
 1022c04:	d422      	bmi.n	1022c4c <__lo0bits+0x54>
 1022c06:	0798      	lsls	r0, r3, #30
 1022c08:	bf4b      	itete	mi
 1022c0a:	085b      	lsrmi	r3, r3, #1
 1022c0c:	089b      	lsrpl	r3, r3, #2
 1022c0e:	2001      	movmi	r0, #1
 1022c10:	2002      	movpl	r0, #2
 1022c12:	600b      	str	r3, [r1, #0]
 1022c14:	4770      	bx	lr
 1022c16:	b298      	uxth	r0, r3
 1022c18:	b9b0      	cbnz	r0, 1022c48 <__lo0bits+0x50>
 1022c1a:	0c1b      	lsrs	r3, r3, #16
 1022c1c:	2010      	movs	r0, #16
 1022c1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 1022c22:	bf04      	itt	eq
 1022c24:	0a1b      	lsreq	r3, r3, #8
 1022c26:	3008      	addeq	r0, #8
 1022c28:	071a      	lsls	r2, r3, #28
 1022c2a:	bf04      	itt	eq
 1022c2c:	091b      	lsreq	r3, r3, #4
 1022c2e:	3004      	addeq	r0, #4
 1022c30:	079a      	lsls	r2, r3, #30
 1022c32:	bf04      	itt	eq
 1022c34:	089b      	lsreq	r3, r3, #2
 1022c36:	3002      	addeq	r0, #2
 1022c38:	07da      	lsls	r2, r3, #31
 1022c3a:	d403      	bmi.n	1022c44 <__lo0bits+0x4c>
 1022c3c:	085b      	lsrs	r3, r3, #1
 1022c3e:	f100 0001 	add.w	r0, r0, #1
 1022c42:	d005      	beq.n	1022c50 <__lo0bits+0x58>
 1022c44:	600b      	str	r3, [r1, #0]
 1022c46:	4770      	bx	lr
 1022c48:	4610      	mov	r0, r2
 1022c4a:	e7e8      	b.n	1022c1e <__lo0bits+0x26>
 1022c4c:	2000      	movs	r0, #0
 1022c4e:	4770      	bx	lr
 1022c50:	2020      	movs	r0, #32
 1022c52:	4770      	bx	lr

01022c54 <__i2b>:
 1022c54:	b510      	push	{r4, lr}
 1022c56:	460c      	mov	r4, r1
 1022c58:	2101      	movs	r1, #1
 1022c5a:	f7ff fee9 	bl	1022a30 <_Balloc>
 1022c5e:	2201      	movs	r2, #1
 1022c60:	6144      	str	r4, [r0, #20]
 1022c62:	6102      	str	r2, [r0, #16]
 1022c64:	bd10      	pop	{r4, pc}
 1022c66:	bf00      	nop

01022c68 <__multiply>:
 1022c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1022c6c:	b083      	sub	sp, #12
 1022c6e:	690d      	ldr	r5, [r1, #16]
 1022c70:	6913      	ldr	r3, [r2, #16]
 1022c72:	429d      	cmp	r5, r3
 1022c74:	bfb5      	itete	lt
 1022c76:	4614      	movlt	r4, r2
 1022c78:	460c      	movge	r4, r1
 1022c7a:	461f      	movlt	r7, r3
 1022c7c:	469b      	movge	fp, r3
 1022c7e:	68a3      	ldr	r3, [r4, #8]
 1022c80:	bfae      	itee	ge
 1022c82:	462f      	movge	r7, r5
 1022c84:	46ab      	movlt	fp, r5
 1022c86:	460d      	movlt	r5, r1
 1022c88:	eb07 080b 	add.w	r8, r7, fp
 1022c8c:	6861      	ldr	r1, [r4, #4]
 1022c8e:	bfa8      	it	ge
 1022c90:	4615      	movge	r5, r2
 1022c92:	4543      	cmp	r3, r8
 1022c94:	bfb8      	it	lt
 1022c96:	3101      	addlt	r1, #1
 1022c98:	f7ff feca 	bl	1022a30 <_Balloc>
 1022c9c:	f100 0a14 	add.w	sl, r0, #20
 1022ca0:	4603      	mov	r3, r0
 1022ca2:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 1022ca6:	9000      	str	r0, [sp, #0]
 1022ca8:	45ca      	cmp	sl, r9
 1022caa:	bf3c      	itt	cc
 1022cac:	4653      	movcc	r3, sl
 1022cae:	2000      	movcc	r0, #0
 1022cb0:	d203      	bcs.n	1022cba <__multiply+0x52>
 1022cb2:	f843 0b04 	str.w	r0, [r3], #4
 1022cb6:	4599      	cmp	r9, r3
 1022cb8:	d8fb      	bhi.n	1022cb2 <__multiply+0x4a>
 1022cba:	f105 0e14 	add.w	lr, r5, #20
 1022cbe:	f104 0314 	add.w	r3, r4, #20
 1022cc2:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 1022cc6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 1022cca:	45de      	cmp	lr, fp
 1022ccc:	bf3c      	itt	cc
 1022cce:	f8cd 8004 	strcc.w	r8, [sp, #4]
 1022cd2:	4698      	movcc	r8, r3
 1022cd4:	d306      	bcc.n	1022ce4 <__multiply+0x7c>
 1022cd6:	e051      	b.n	1022d7c <__multiply+0x114>
 1022cd8:	0c24      	lsrs	r4, r4, #16
 1022cda:	d12a      	bne.n	1022d32 <__multiply+0xca>
 1022cdc:	45f3      	cmp	fp, lr
 1022cde:	f10a 0a04 	add.w	sl, sl, #4
 1022ce2:	d949      	bls.n	1022d78 <__multiply+0x110>
 1022ce4:	f85e 4b04 	ldr.w	r4, [lr], #4
 1022ce8:	b2a6      	uxth	r6, r4
 1022cea:	2e00      	cmp	r6, #0
 1022cec:	d0f4      	beq.n	1022cd8 <__multiply+0x70>
 1022cee:	4645      	mov	r5, r8
 1022cf0:	4654      	mov	r4, sl
 1022cf2:	2300      	movs	r3, #0
 1022cf4:	f855 1b04 	ldr.w	r1, [r5], #4
 1022cf8:	6820      	ldr	r0, [r4, #0]
 1022cfa:	42af      	cmp	r7, r5
 1022cfc:	b28a      	uxth	r2, r1
 1022cfe:	ea4f 4111 	mov.w	r1, r1, lsr #16
 1022d02:	fa1f fc80 	uxth.w	ip, r0
 1022d06:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1022d0a:	fb06 c202 	mla	r2, r6, r2, ip
 1022d0e:	fb06 0101 	mla	r1, r6, r1, r0
 1022d12:	4413      	add	r3, r2
 1022d14:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 1022d18:	b29b      	uxth	r3, r3
 1022d1a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 1022d1e:	ea4f 4311 	mov.w	r3, r1, lsr #16
 1022d22:	f844 2b04 	str.w	r2, [r4], #4
 1022d26:	d8e5      	bhi.n	1022cf4 <__multiply+0x8c>
 1022d28:	6023      	str	r3, [r4, #0]
 1022d2a:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 1022d2e:	0c24      	lsrs	r4, r4, #16
 1022d30:	d0d4      	beq.n	1022cdc <__multiply+0x74>
 1022d32:	f8da 3000 	ldr.w	r3, [sl]
 1022d36:	4645      	mov	r5, r8
 1022d38:	4656      	mov	r6, sl
 1022d3a:	2200      	movs	r2, #0
 1022d3c:	4618      	mov	r0, r3
 1022d3e:	8829      	ldrh	r1, [r5, #0]
 1022d40:	0c00      	lsrs	r0, r0, #16
 1022d42:	b29b      	uxth	r3, r3
 1022d44:	fb04 0001 	mla	r0, r4, r1, r0
 1022d48:	4402      	add	r2, r0
 1022d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1022d4e:	f846 3b04 	str.w	r3, [r6], #4
 1022d52:	f855 3b04 	ldr.w	r3, [r5], #4
 1022d56:	6830      	ldr	r0, [r6, #0]
 1022d58:	42af      	cmp	r7, r5
 1022d5a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 1022d5e:	b281      	uxth	r1, r0
 1022d60:	fb04 1303 	mla	r3, r4, r3, r1
 1022d64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 1022d68:	ea4f 4213 	mov.w	r2, r3, lsr #16
 1022d6c:	d8e7      	bhi.n	1022d3e <__multiply+0xd6>
 1022d6e:	45f3      	cmp	fp, lr
 1022d70:	6033      	str	r3, [r6, #0]
 1022d72:	f10a 0a04 	add.w	sl, sl, #4
 1022d76:	d8b5      	bhi.n	1022ce4 <__multiply+0x7c>
 1022d78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 1022d7c:	f1b8 0f00 	cmp.w	r8, #0
 1022d80:	dd0b      	ble.n	1022d9a <__multiply+0x132>
 1022d82:	f859 3c04 	ldr.w	r3, [r9, #-4]
 1022d86:	f1a9 0904 	sub.w	r9, r9, #4
 1022d8a:	b11b      	cbz	r3, 1022d94 <__multiply+0x12c>
 1022d8c:	e005      	b.n	1022d9a <__multiply+0x132>
 1022d8e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 1022d92:	b913      	cbnz	r3, 1022d9a <__multiply+0x132>
 1022d94:	f1b8 0801 	subs.w	r8, r8, #1
 1022d98:	d1f9      	bne.n	1022d8e <__multiply+0x126>
 1022d9a:	9800      	ldr	r0, [sp, #0]
 1022d9c:	f8c0 8010 	str.w	r8, [r0, #16]
 1022da0:	b003      	add	sp, #12
 1022da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1022da6:	bf00      	nop

01022da8 <__pow5mult>:
 1022da8:	f012 0303 	ands.w	r3, r2, #3
 1022dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1022db0:	4614      	mov	r4, r2
 1022db2:	4607      	mov	r7, r0
 1022db4:	bf08      	it	eq
 1022db6:	460d      	moveq	r5, r1
 1022db8:	d12d      	bne.n	1022e16 <__pow5mult+0x6e>
 1022dba:	10a4      	asrs	r4, r4, #2
 1022dbc:	d01c      	beq.n	1022df8 <__pow5mult+0x50>
 1022dbe:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 1022dc0:	b3ae      	cbz	r6, 1022e2e <__pow5mult+0x86>
 1022dc2:	07e3      	lsls	r3, r4, #31
 1022dc4:	f04f 0800 	mov.w	r8, #0
 1022dc8:	d406      	bmi.n	1022dd8 <__pow5mult+0x30>
 1022dca:	1064      	asrs	r4, r4, #1
 1022dcc:	d014      	beq.n	1022df8 <__pow5mult+0x50>
 1022dce:	6830      	ldr	r0, [r6, #0]
 1022dd0:	b1a8      	cbz	r0, 1022dfe <__pow5mult+0x56>
 1022dd2:	4606      	mov	r6, r0
 1022dd4:	07e3      	lsls	r3, r4, #31
 1022dd6:	d5f8      	bpl.n	1022dca <__pow5mult+0x22>
 1022dd8:	4632      	mov	r2, r6
 1022dda:	4629      	mov	r1, r5
 1022ddc:	4638      	mov	r0, r7
 1022dde:	f7ff ff43 	bl	1022c68 <__multiply>
 1022de2:	b1b5      	cbz	r5, 1022e12 <__pow5mult+0x6a>
 1022de4:	686a      	ldr	r2, [r5, #4]
 1022de6:	1064      	asrs	r4, r4, #1
 1022de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1022dea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 1022dee:	6029      	str	r1, [r5, #0]
 1022df0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1022df4:	4605      	mov	r5, r0
 1022df6:	d1ea      	bne.n	1022dce <__pow5mult+0x26>
 1022df8:	4628      	mov	r0, r5
 1022dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1022dfe:	4632      	mov	r2, r6
 1022e00:	4631      	mov	r1, r6
 1022e02:	4638      	mov	r0, r7
 1022e04:	f7ff ff30 	bl	1022c68 <__multiply>
 1022e08:	6030      	str	r0, [r6, #0]
 1022e0a:	4606      	mov	r6, r0
 1022e0c:	f8c0 8000 	str.w	r8, [r0]
 1022e10:	e7e0      	b.n	1022dd4 <__pow5mult+0x2c>
 1022e12:	4605      	mov	r5, r0
 1022e14:	e7d9      	b.n	1022dca <__pow5mult+0x22>
 1022e16:	1e5a      	subs	r2, r3, #1
 1022e18:	f246 5530 	movw	r5, #25904	; 0x6530
 1022e1c:	f2c0 1506 	movt	r5, #262	; 0x106
 1022e20:	2300      	movs	r3, #0
 1022e22:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 1022e26:	f7ff fe33 	bl	1022a90 <__multadd>
 1022e2a:	4605      	mov	r5, r0
 1022e2c:	e7c5      	b.n	1022dba <__pow5mult+0x12>
 1022e2e:	2101      	movs	r1, #1
 1022e30:	4638      	mov	r0, r7
 1022e32:	f7ff fdfd 	bl	1022a30 <_Balloc>
 1022e36:	2301      	movs	r3, #1
 1022e38:	f240 2271 	movw	r2, #625	; 0x271
 1022e3c:	4606      	mov	r6, r0
 1022e3e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 1022e42:	2300      	movs	r3, #0
 1022e44:	64b8      	str	r0, [r7, #72]	; 0x48
 1022e46:	6003      	str	r3, [r0, #0]
 1022e48:	e7bb      	b.n	1022dc2 <__pow5mult+0x1a>
 1022e4a:	bf00      	nop

01022e4c <__lshift>:
 1022e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1022e50:	ea4f 1962 	mov.w	r9, r2, asr #5
 1022e54:	690e      	ldr	r6, [r1, #16]
 1022e56:	460d      	mov	r5, r1
 1022e58:	688b      	ldr	r3, [r1, #8]
 1022e5a:	4690      	mov	r8, r2
 1022e5c:	444e      	add	r6, r9
 1022e5e:	4607      	mov	r7, r0
 1022e60:	1c74      	adds	r4, r6, #1
 1022e62:	6849      	ldr	r1, [r1, #4]
 1022e64:	429c      	cmp	r4, r3
 1022e66:	dd03      	ble.n	1022e70 <__lshift+0x24>
 1022e68:	005b      	lsls	r3, r3, #1
 1022e6a:	3101      	adds	r1, #1
 1022e6c:	429c      	cmp	r4, r3
 1022e6e:	dcfb      	bgt.n	1022e68 <__lshift+0x1c>
 1022e70:	4638      	mov	r0, r7
 1022e72:	f7ff fddd 	bl	1022a30 <_Balloc>
 1022e76:	f1b9 0f00 	cmp.w	r9, #0
 1022e7a:	4684      	mov	ip, r0
 1022e7c:	f100 0014 	add.w	r0, r0, #20
 1022e80:	dd0e      	ble.n	1022ea0 <__lshift+0x54>
 1022e82:	f109 0905 	add.w	r9, r9, #5
 1022e86:	4603      	mov	r3, r0
 1022e88:	2100      	movs	r1, #0
 1022e8a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 1022e8e:	eb0c 0209 	add.w	r2, ip, r9
 1022e92:	f843 1b04 	str.w	r1, [r3], #4
 1022e96:	4293      	cmp	r3, r2
 1022e98:	d1fb      	bne.n	1022e92 <__lshift+0x46>
 1022e9a:	f1a9 0914 	sub.w	r9, r9, #20
 1022e9e:	4448      	add	r0, r9
 1022ea0:	6929      	ldr	r1, [r5, #16]
 1022ea2:	f018 081f 	ands.w	r8, r8, #31
 1022ea6:	f105 0314 	add.w	r3, r5, #20
 1022eaa:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 1022eae:	d022      	beq.n	1022ef6 <__lshift+0xaa>
 1022eb0:	f1c8 0220 	rsb	r2, r8, #32
 1022eb4:	f04f 0900 	mov.w	r9, #0
 1022eb8:	6819      	ldr	r1, [r3, #0]
 1022eba:	fa01 f108 	lsl.w	r1, r1, r8
 1022ebe:	ea41 0109 	orr.w	r1, r1, r9
 1022ec2:	f840 1b04 	str.w	r1, [r0], #4
 1022ec6:	f853 1b04 	ldr.w	r1, [r3], #4
 1022eca:	4573      	cmp	r3, lr
 1022ecc:	fa21 f902 	lsr.w	r9, r1, r2
 1022ed0:	d3f2      	bcc.n	1022eb8 <__lshift+0x6c>
 1022ed2:	f1b9 0f00 	cmp.w	r9, #0
 1022ed6:	bf18      	it	ne
 1022ed8:	4626      	movne	r6, r4
 1022eda:	f8c0 9000 	str.w	r9, [r0]
 1022ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1022ee0:	4660      	mov	r0, ip
 1022ee2:	686a      	ldr	r2, [r5, #4]
 1022ee4:	f8cc 6010 	str.w	r6, [ip, #16]
 1022ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 1022eec:	6029      	str	r1, [r5, #0]
 1022eee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1022ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1022ef6:	3804      	subs	r0, #4
 1022ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 1022efc:	459e      	cmp	lr, r3
 1022efe:	f840 2f04 	str.w	r2, [r0, #4]!
 1022f02:	d8f9      	bhi.n	1022ef8 <__lshift+0xac>
 1022f04:	e7eb      	b.n	1022ede <__lshift+0x92>
 1022f06:	bf00      	nop

01022f08 <__mcmp>:
 1022f08:	b430      	push	{r4, r5}
 1022f0a:	4605      	mov	r5, r0
 1022f0c:	690a      	ldr	r2, [r1, #16]
 1022f0e:	6900      	ldr	r0, [r0, #16]
 1022f10:	1a80      	subs	r0, r0, r2
 1022f12:	d110      	bne.n	1022f36 <__mcmp+0x2e>
 1022f14:	0092      	lsls	r2, r2, #2
 1022f16:	3514      	adds	r5, #20
 1022f18:	3114      	adds	r1, #20
 1022f1a:	18ab      	adds	r3, r5, r2
 1022f1c:	4411      	add	r1, r2
 1022f1e:	e001      	b.n	1022f24 <__mcmp+0x1c>
 1022f20:	429d      	cmp	r5, r3
 1022f22:	d208      	bcs.n	1022f36 <__mcmp+0x2e>
 1022f24:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 1022f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 1022f2c:	4294      	cmp	r4, r2
 1022f2e:	d0f7      	beq.n	1022f20 <__mcmp+0x18>
 1022f30:	bf28      	it	cs
 1022f32:	2001      	movcs	r0, #1
 1022f34:	d301      	bcc.n	1022f3a <__mcmp+0x32>
 1022f36:	bc30      	pop	{r4, r5}
 1022f38:	4770      	bx	lr
 1022f3a:	f04f 30ff 	mov.w	r0, #4294967295
 1022f3e:	bc30      	pop	{r4, r5}
 1022f40:	4770      	bx	lr
 1022f42:	bf00      	nop

01022f44 <__mdiff>:
 1022f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1022f48:	460f      	mov	r7, r1
 1022f4a:	690d      	ldr	r5, [r1, #16]
 1022f4c:	4616      	mov	r6, r2
 1022f4e:	6911      	ldr	r1, [r2, #16]
 1022f50:	4684      	mov	ip, r0
 1022f52:	f107 0414 	add.w	r4, r7, #20
 1022f56:	f102 0914 	add.w	r9, r2, #20
 1022f5a:	1a6d      	subs	r5, r5, r1
 1022f5c:	2d00      	cmp	r5, #0
 1022f5e:	d15f      	bne.n	1023020 <__mdiff+0xdc>
 1022f60:	0089      	lsls	r1, r1, #2
 1022f62:	1863      	adds	r3, r4, r1
 1022f64:	4449      	add	r1, r9
 1022f66:	e001      	b.n	1022f6c <__mdiff+0x28>
 1022f68:	42a3      	cmp	r3, r4
 1022f6a:	d964      	bls.n	1023036 <__mdiff+0xf2>
 1022f6c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 1022f70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 1022f74:	4290      	cmp	r0, r2
 1022f76:	d0f7      	beq.n	1022f68 <__mdiff+0x24>
 1022f78:	d355      	bcc.n	1023026 <__mdiff+0xe2>
 1022f7a:	4660      	mov	r0, ip
 1022f7c:	6879      	ldr	r1, [r7, #4]
 1022f7e:	f7ff fd57 	bl	1022a30 <_Balloc>
 1022f82:	f8d7 8010 	ldr.w	r8, [r7, #16]
 1022f86:	6933      	ldr	r3, [r6, #16]
 1022f88:	46cc      	mov	ip, r9
 1022f8a:	4627      	mov	r7, r4
 1022f8c:	2200      	movs	r2, #0
 1022f8e:	eb04 0e88 	add.w	lr, r4, r8, lsl #2
 1022f92:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 1022f96:	60c5      	str	r5, [r0, #12]
 1022f98:	f100 0514 	add.w	r5, r0, #20
 1022f9c:	e000      	b.n	1022fa0 <__mdiff+0x5c>
 1022f9e:	4625      	mov	r5, r4
 1022fa0:	f857 ab04 	ldr.w	sl, [r7], #4
 1022fa4:	462c      	mov	r4, r5
 1022fa6:	f85c 1b04 	ldr.w	r1, [ip], #4
 1022faa:	fa12 f38a 	uxtah	r3, r2, sl
 1022fae:	45e1      	cmp	r9, ip
 1022fb0:	fa1f fb81 	uxth.w	fp, r1
 1022fb4:	ea4f 4211 	mov.w	r2, r1, lsr #16
 1022fb8:	eba3 030b 	sub.w	r3, r3, fp
 1022fbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 1022fc0:	463e      	mov	r6, r7
 1022fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 1022fc6:	b29b      	uxth	r3, r3
 1022fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1022fcc:	ea4f 4222 	mov.w	r2, r2, asr #16
 1022fd0:	f844 3b04 	str.w	r3, [r4], #4
 1022fd4:	d8e3      	bhi.n	1022f9e <__mdiff+0x5a>
 1022fd6:	45be      	cmp	lr, r7
 1022fd8:	d917      	bls.n	102300a <__mdiff+0xc6>
 1022fda:	4625      	mov	r5, r4
 1022fdc:	f856 1b04 	ldr.w	r1, [r6], #4
 1022fe0:	45b6      	cmp	lr, r6
 1022fe2:	fa12 f381 	uxtah	r3, r2, r1
 1022fe6:	ea4f 4223 	mov.w	r2, r3, asr #16
 1022fea:	b29b      	uxth	r3, r3
 1022fec:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 1022ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1022ff4:	ea4f 4222 	mov.w	r2, r2, asr #16
 1022ff8:	f845 3b04 	str.w	r3, [r5], #4
 1022ffc:	d8ee      	bhi.n	1022fdc <__mdiff+0x98>
 1022ffe:	f10e 35ff 	add.w	r5, lr, #4294967295
 1023002:	1bed      	subs	r5, r5, r7
 1023004:	f025 0503 	bic.w	r5, r5, #3
 1023008:	4425      	add	r5, r4
 102300a:	b92b      	cbnz	r3, 1023018 <__mdiff+0xd4>
 102300c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 1023010:	f108 38ff 	add.w	r8, r8, #4294967295
 1023014:	2b00      	cmp	r3, #0
 1023016:	d0f9      	beq.n	102300c <__mdiff+0xc8>
 1023018:	f8c0 8010 	str.w	r8, [r0, #16]
 102301c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023020:	bfa8      	it	ge
 1023022:	2500      	movge	r5, #0
 1023024:	daa9      	bge.n	1022f7a <__mdiff+0x36>
 1023026:	4622      	mov	r2, r4
 1023028:	463b      	mov	r3, r7
 102302a:	464c      	mov	r4, r9
 102302c:	4637      	mov	r7, r6
 102302e:	4691      	mov	r9, r2
 1023030:	461e      	mov	r6, r3
 1023032:	2501      	movs	r5, #1
 1023034:	e7a1      	b.n	1022f7a <__mdiff+0x36>
 1023036:	4660      	mov	r0, ip
 1023038:	2100      	movs	r1, #0
 102303a:	f7ff fcf9 	bl	1022a30 <_Balloc>
 102303e:	2201      	movs	r2, #1
 1023040:	2300      	movs	r3, #0
 1023042:	e9c0 2304 	strd	r2, r3, [r0, #16]
 1023046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102304a:	bf00      	nop

0102304c <__ulp>:
 102304c:	ee10 2a90 	vmov	r2, s1
 1023050:	2300      	movs	r3, #0
 1023052:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 1023056:	401a      	ands	r2, r3
 1023058:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 102305c:	2b00      	cmp	r3, #0
 102305e:	dd04      	ble.n	102306a <__ulp+0x1e>
 1023060:	2000      	movs	r0, #0
 1023062:	4619      	mov	r1, r3
 1023064:	ec41 0b10 	vmov	d0, r0, r1
 1023068:	4770      	bx	lr
 102306a:	425b      	negs	r3, r3
 102306c:	151b      	asrs	r3, r3, #20
 102306e:	2b13      	cmp	r3, #19
 1023070:	dc07      	bgt.n	1023082 <__ulp+0x36>
 1023072:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 1023076:	2000      	movs	r0, #0
 1023078:	fa42 f103 	asr.w	r1, r2, r3
 102307c:	ec41 0b10 	vmov	d0, r0, r1
 1023080:	4770      	bx	lr
 1023082:	3b14      	subs	r3, #20
 1023084:	2100      	movs	r1, #0
 1023086:	2b1e      	cmp	r3, #30
 1023088:	bfd6      	itet	le
 102308a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 102308e:	2301      	movgt	r3, #1
 1023090:	fa22 f303 	lsrle.w	r3, r2, r3
 1023094:	4618      	mov	r0, r3
 1023096:	ec41 0b10 	vmov	d0, r0, r1
 102309a:	4770      	bx	lr

0102309c <__b2d>:
 102309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 102309e:	f100 0614 	add.w	r6, r0, #20
 10230a2:	6904      	ldr	r4, [r0, #16]
 10230a4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 10230a8:	1f27      	subs	r7, r4, #4
 10230aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 10230ae:	4628      	mov	r0, r5
 10230b0:	f7ff fd82 	bl	1022bb8 <__hi0bits>
 10230b4:	280a      	cmp	r0, #10
 10230b6:	f1c0 0320 	rsb	r3, r0, #32
 10230ba:	600b      	str	r3, [r1, #0]
 10230bc:	dd24      	ble.n	1023108 <__b2d+0x6c>
 10230be:	42be      	cmp	r6, r7
 10230c0:	f1a0 000b 	sub.w	r0, r0, #11
 10230c4:	d219      	bcs.n	10230fa <__b2d+0x5e>
 10230c6:	f854 1c08 	ldr.w	r1, [r4, #-8]
 10230ca:	b1c0      	cbz	r0, 10230fe <__b2d+0x62>
 10230cc:	f1c0 0720 	rsb	r7, r0, #32
 10230d0:	4085      	lsls	r5, r0
 10230d2:	fa21 f307 	lsr.w	r3, r1, r7
 10230d6:	4081      	lsls	r1, r0
 10230d8:	431d      	orrs	r5, r3
 10230da:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 10230de:	f1a4 0508 	sub.w	r5, r4, #8
 10230e2:	42ae      	cmp	r6, r5
 10230e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 10230e8:	d203      	bcs.n	10230f2 <__b2d+0x56>
 10230ea:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 10230ee:	40f8      	lsrs	r0, r7
 10230f0:	4301      	orrs	r1, r0
 10230f2:	460a      	mov	r2, r1
 10230f4:	ec43 2b10 	vmov	d0, r2, r3
 10230f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10230fa:	4601      	mov	r1, r0
 10230fc:	b9e8      	cbnz	r0, 102313a <__b2d+0x9e>
 10230fe:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1023102:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1023106:	e7f4      	b.n	10230f2 <__b2d+0x56>
 1023108:	f1c0 0c0b 	rsb	ip, r0, #11
 102310c:	42be      	cmp	r6, r7
 102310e:	fa25 f10c 	lsr.w	r1, r5, ip
 1023112:	f100 0015 	add.w	r0, r0, #21
 1023116:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 102311a:	bf38      	it	cc
 102311c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 1023120:	fa05 f000 	lsl.w	r0, r5, r0
 1023124:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1023128:	bf2c      	ite	cs
 102312a:	2100      	movcs	r1, #0
 102312c:	fa21 f10c 	lsrcc.w	r1, r1, ip
 1023130:	ea40 0201 	orr.w	r2, r0, r1
 1023134:	ec43 2b10 	vmov	d0, r2, r3
 1023138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102313a:	fa05 f000 	lsl.w	r0, r5, r0
 102313e:	2100      	movs	r1, #0
 1023140:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 1023144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1023148:	e7d3      	b.n	10230f2 <__b2d+0x56>
 102314a:	bf00      	nop

0102314c <__d2b>:
 102314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1023150:	4688      	mov	r8, r1
 1023152:	b083      	sub	sp, #12
 1023154:	2101      	movs	r1, #1
 1023156:	ec55 4b10 	vmov	r4, r5, d0
 102315a:	4617      	mov	r7, r2
 102315c:	f7ff fc68 	bl	1022a30 <_Balloc>
 1023160:	f3c5 560a 	ubfx	r6, r5, #20, #11
 1023164:	f3c5 0313 	ubfx	r3, r5, #0, #20
 1023168:	4681      	mov	r9, r0
 102316a:	b10e      	cbz	r6, 1023170 <__d2b+0x24>
 102316c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1023170:	2c00      	cmp	r4, #0
 1023172:	9301      	str	r3, [sp, #4]
 1023174:	d029      	beq.n	10231ca <__d2b+0x7e>
 1023176:	4668      	mov	r0, sp
 1023178:	9400      	str	r4, [sp, #0]
 102317a:	f7ff fd3d 	bl	1022bf8 <__lo0bits>
 102317e:	b9c0      	cbnz	r0, 10231b2 <__d2b+0x66>
 1023180:	e9dd 2300 	ldrd	r2, r3, [sp]
 1023184:	f8c9 2014 	str.w	r2, [r9, #20]
 1023188:	2b00      	cmp	r3, #0
 102318a:	f8c9 3018 	str.w	r3, [r9, #24]
 102318e:	bf14      	ite	ne
 1023190:	2102      	movne	r1, #2
 1023192:	2101      	moveq	r1, #1
 1023194:	f8c9 1010 	str.w	r1, [r9, #16]
 1023198:	b30e      	cbz	r6, 10231de <__d2b+0x92>
 102319a:	f2a6 4633 	subw	r6, r6, #1075	; 0x433
 102319e:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 10231a2:	4406      	add	r6, r0
 10231a4:	4648      	mov	r0, r9
 10231a6:	f8c8 6000 	str.w	r6, [r8]
 10231aa:	603b      	str	r3, [r7, #0]
 10231ac:	b003      	add	sp, #12
 10231ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 10231b2:	9b01      	ldr	r3, [sp, #4]
 10231b4:	f1c0 0220 	rsb	r2, r0, #32
 10231b8:	9900      	ldr	r1, [sp, #0]
 10231ba:	fa03 f202 	lsl.w	r2, r3, r2
 10231be:	40c3      	lsrs	r3, r0
 10231c0:	430a      	orrs	r2, r1
 10231c2:	9301      	str	r3, [sp, #4]
 10231c4:	f8c9 2014 	str.w	r2, [r9, #20]
 10231c8:	e7de      	b.n	1023188 <__d2b+0x3c>
 10231ca:	a801      	add	r0, sp, #4
 10231cc:	f7ff fd14 	bl	1022bf8 <__lo0bits>
 10231d0:	9b01      	ldr	r3, [sp, #4]
 10231d2:	2101      	movs	r1, #1
 10231d4:	e9c9 1304 	strd	r1, r3, [r9, #16]
 10231d8:	3020      	adds	r0, #32
 10231da:	2e00      	cmp	r6, #0
 10231dc:	d1dd      	bne.n	102319a <__d2b+0x4e>
 10231de:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 10231e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 10231e6:	f8c8 0000 	str.w	r0, [r8]
 10231ea:	6918      	ldr	r0, [r3, #16]
 10231ec:	f7ff fce4 	bl	1022bb8 <__hi0bits>
 10231f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 10231f4:	6038      	str	r0, [r7, #0]
 10231f6:	4648      	mov	r0, r9
 10231f8:	b003      	add	sp, #12
 10231fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 10231fe:	bf00      	nop

01023200 <__ratio>:
 1023200:	b530      	push	{r4, r5, lr}
 1023202:	b087      	sub	sp, #28
 1023204:	460c      	mov	r4, r1
 1023206:	a904      	add	r1, sp, #16
 1023208:	4605      	mov	r5, r0
 102320a:	f7ff ff47 	bl	102309c <__b2d>
 102320e:	4620      	mov	r0, r4
 1023210:	a905      	add	r1, sp, #20
 1023212:	ed8d 0b00 	vstr	d0, [sp]
 1023216:	f7ff ff41 	bl	102309c <__b2d>
 102321a:	6920      	ldr	r0, [r4, #16]
 102321c:	6929      	ldr	r1, [r5, #16]
 102321e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 1023222:	1a09      	subs	r1, r1, r0
 1023224:	1ad3      	subs	r3, r2, r3
 1023226:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 102322a:	e9dd 0100 	ldrd	r0, r1, [sp]
 102322e:	2b00      	cmp	r3, #0
 1023230:	ed8d 0b02 	vstr	d0, [sp, #8]
 1023234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 1023238:	dd0c      	ble.n	1023254 <__ratio+0x54>
 102323a:	9a01      	ldr	r2, [sp, #4]
 102323c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 1023240:	e9cd 0100 	strd	r0, r1, [sp]
 1023244:	ed9d 7b00 	vldr	d7, [sp]
 1023248:	ed9d 6b02 	vldr	d6, [sp, #8]
 102324c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 1023250:	b007      	add	sp, #28
 1023252:	bd30      	pop	{r4, r5, pc}
 1023254:	9a03      	ldr	r2, [sp, #12]
 1023256:	eba2 5503 	sub.w	r5, r2, r3, lsl #20
 102325a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 102325e:	e7f1      	b.n	1023244 <__ratio+0x44>

01023260 <_mprec_log10>:
 1023260:	2817      	cmp	r0, #23
 1023262:	dd08      	ble.n	1023276 <_mprec_log10+0x16>
 1023264:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 1023268:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 102326c:	3801      	subs	r0, #1
 102326e:	ee20 0b07 	vmul.f64	d0, d0, d7
 1023272:	d1fb      	bne.n	102326c <_mprec_log10+0xc>
 1023274:	4770      	bx	lr
 1023276:	f246 5330 	movw	r3, #25904	; 0x6530
 102327a:	f2c0 1306 	movt	r3, #262	; 0x106
 102327e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 1023282:	ed90 0b04 	vldr	d0, [r0, #16]
 1023286:	4770      	bx	lr

01023288 <__copybits>:
 1023288:	b470      	push	{r4, r5, r6}
 102328a:	3901      	subs	r1, #1
 102328c:	6914      	ldr	r4, [r2, #16]
 102328e:	f102 0314 	add.w	r3, r2, #20
 1023292:	1149      	asrs	r1, r1, #5
 1023294:	1c4e      	adds	r6, r1, #1
 1023296:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 102329a:	428b      	cmp	r3, r1
 102329c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 10232a0:	d20c      	bcs.n	10232bc <__copybits+0x34>
 10232a2:	1f04      	subs	r4, r0, #4
 10232a4:	f853 5b04 	ldr.w	r5, [r3], #4
 10232a8:	4299      	cmp	r1, r3
 10232aa:	f844 5f04 	str.w	r5, [r4, #4]!
 10232ae:	d8f9      	bhi.n	10232a4 <__copybits+0x1c>
 10232b0:	1a8b      	subs	r3, r1, r2
 10232b2:	3b15      	subs	r3, #21
 10232b4:	f023 0303 	bic.w	r3, r3, #3
 10232b8:	3304      	adds	r3, #4
 10232ba:	4418      	add	r0, r3
 10232bc:	4286      	cmp	r6, r0
 10232be:	d904      	bls.n	10232ca <__copybits+0x42>
 10232c0:	2300      	movs	r3, #0
 10232c2:	f840 3b04 	str.w	r3, [r0], #4
 10232c6:	4286      	cmp	r6, r0
 10232c8:	d8fb      	bhi.n	10232c2 <__copybits+0x3a>
 10232ca:	bc70      	pop	{r4, r5, r6}
 10232cc:	4770      	bx	lr
 10232ce:	bf00      	nop

010232d0 <__any_on>:
 10232d0:	6903      	ldr	r3, [r0, #16]
 10232d2:	114a      	asrs	r2, r1, #5
 10232d4:	b410      	push	{r4}
 10232d6:	4293      	cmp	r3, r2
 10232d8:	f100 0414 	add.w	r4, r0, #20
 10232dc:	bfb8      	it	lt
 10232de:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 10232e2:	db02      	blt.n	10232ea <__any_on+0x1a>
 10232e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 10232e8:	dc0e      	bgt.n	1023308 <__any_on+0x38>
 10232ea:	429c      	cmp	r4, r3
 10232ec:	d21b      	bcs.n	1023326 <__any_on+0x56>
 10232ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 10232f2:	3b04      	subs	r3, #4
 10232f4:	b118      	cbz	r0, 10232fe <__any_on+0x2e>
 10232f6:	e012      	b.n	102331e <__any_on+0x4e>
 10232f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 10232fc:	b97a      	cbnz	r2, 102331e <__any_on+0x4e>
 10232fe:	429c      	cmp	r4, r3
 1023300:	d3fa      	bcc.n	10232f8 <__any_on+0x28>
 1023302:	f85d 4b04 	ldr.w	r4, [sp], #4
 1023306:	4770      	bx	lr
 1023308:	f011 011f 	ands.w	r1, r1, #31
 102330c:	d0ed      	beq.n	10232ea <__any_on+0x1a>
 102330e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 1023312:	fa20 f201 	lsr.w	r2, r0, r1
 1023316:	fa02 f101 	lsl.w	r1, r2, r1
 102331a:	4288      	cmp	r0, r1
 102331c:	d0e5      	beq.n	10232ea <__any_on+0x1a>
 102331e:	2001      	movs	r0, #1
 1023320:	f85d 4b04 	ldr.w	r4, [sp], #4
 1023324:	4770      	bx	lr
 1023326:	2000      	movs	r0, #0
 1023328:	e7eb      	b.n	1023302 <__any_on+0x32>
 102332a:	bf00      	nop

0102332c <_realloc_r>:
 102332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1023330:	4692      	mov	sl, r2
 1023332:	b083      	sub	sp, #12
 1023334:	2900      	cmp	r1, #0
 1023336:	f000 80df 	beq.w	10234f8 <_realloc_r+0x1cc>
 102333a:	460d      	mov	r5, r1
 102333c:	4680      	mov	r8, r0
 102333e:	f7f8 ff07 	bl	101c150 <__malloc_lock>
 1023342:	f10a 040b 	add.w	r4, sl, #11
 1023346:	2c16      	cmp	r4, #22
 1023348:	f855 1c04 	ldr.w	r1, [r5, #-4]
 102334c:	bf88      	it	hi
 102334e:	f024 0407 	bichi.w	r4, r4, #7
 1023352:	f1a5 0708 	sub.w	r7, r5, #8
 1023356:	bf99      	ittee	ls
 1023358:	2210      	movls	r2, #16
 102335a:	2300      	movls	r3, #0
 102335c:	0fe3      	lsrhi	r3, r4, #31
 102335e:	4622      	movhi	r2, r4
 1023360:	f021 0603 	bic.w	r6, r1, #3
 1023364:	bf98      	it	ls
 1023366:	4614      	movls	r4, r2
 1023368:	4554      	cmp	r4, sl
 102336a:	bf38      	it	cc
 102336c:	f043 0301 	orrcc.w	r3, r3, #1
 1023370:	2b00      	cmp	r3, #0
 1023372:	f040 80c7 	bne.w	1023504 <_realloc_r+0x1d8>
 1023376:	4296      	cmp	r6, r2
 1023378:	eb07 0906 	add.w	r9, r7, r6
 102337c:	f280 808b 	bge.w	1023496 <_realloc_r+0x16a>
 1023380:	f64a 7b04 	movw	fp, #44804	; 0xaf04
 1023384:	f2c0 1b06 	movt	fp, #262	; 0x106
 1023388:	f8d9 0004 	ldr.w	r0, [r9, #4]
 102338c:	f8db 3008 	ldr.w	r3, [fp, #8]
 1023390:	454b      	cmp	r3, r9
 1023392:	f000 80c0 	beq.w	1023516 <_realloc_r+0x1ea>
 1023396:	f020 0301 	bic.w	r3, r0, #1
 102339a:	444b      	add	r3, r9
 102339c:	685b      	ldr	r3, [r3, #4]
 102339e:	07db      	lsls	r3, r3, #31
 10233a0:	f100 80a0 	bmi.w	10234e4 <_realloc_r+0x1b8>
 10233a4:	f020 0003 	bic.w	r0, r0, #3
 10233a8:	1833      	adds	r3, r6, r0
 10233aa:	4293      	cmp	r3, r2
 10233ac:	f280 810c 	bge.w	10235c8 <_realloc_r+0x29c>
 10233b0:	07c9      	lsls	r1, r1, #31
 10233b2:	d40f      	bmi.n	10233d4 <_realloc_r+0xa8>
 10233b4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 10233b8:	1afb      	subs	r3, r7, r3
 10233ba:	6859      	ldr	r1, [r3, #4]
 10233bc:	f021 0103 	bic.w	r1, r1, #3
 10233c0:	4408      	add	r0, r1
 10233c2:	eb00 0c06 	add.w	ip, r0, r6
 10233c6:	4594      	cmp	ip, r2
 10233c8:	f280 811f 	bge.w	102360a <_realloc_r+0x2de>
 10233cc:	eb06 0c01 	add.w	ip, r6, r1
 10233d0:	4594      	cmp	ip, r2
 10233d2:	da2a      	bge.n	102342a <_realloc_r+0xfe>
 10233d4:	4651      	mov	r1, sl
 10233d6:	4640      	mov	r0, r8
 10233d8:	f7f7 fdfe 	bl	101afd8 <_malloc_r>
 10233dc:	4682      	mov	sl, r0
 10233de:	b1e8      	cbz	r0, 102341c <_realloc_r+0xf0>
 10233e0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 10233e4:	f1a0 0208 	sub.w	r2, r0, #8
 10233e8:	f023 0301 	bic.w	r3, r3, #1
 10233ec:	443b      	add	r3, r7
 10233ee:	4293      	cmp	r3, r2
 10233f0:	f000 80f4 	beq.w	10235dc <_realloc_r+0x2b0>
 10233f4:	1f32      	subs	r2, r6, #4
 10233f6:	2a24      	cmp	r2, #36	; 0x24
 10233f8:	f200 8103 	bhi.w	1023602 <_realloc_r+0x2d6>
 10233fc:	2a13      	cmp	r2, #19
 10233fe:	6829      	ldr	r1, [r5, #0]
 1023400:	bf9c      	itt	ls
 1023402:	4603      	movls	r3, r0
 1023404:	462a      	movls	r2, r5
 1023406:	f200 80f1 	bhi.w	10235ec <_realloc_r+0x2c0>
 102340a:	6019      	str	r1, [r3, #0]
 102340c:	6851      	ldr	r1, [r2, #4]
 102340e:	6059      	str	r1, [r3, #4]
 1023410:	6892      	ldr	r2, [r2, #8]
 1023412:	609a      	str	r2, [r3, #8]
 1023414:	4629      	mov	r1, r5
 1023416:	4640      	mov	r0, r8
 1023418:	f7fe fef2 	bl	1022200 <_free_r>
 102341c:	4640      	mov	r0, r8
 102341e:	f7f8 fe99 	bl	101c154 <__malloc_unlock>
 1023422:	4650      	mov	r0, sl
 1023424:	b003      	add	sp, #12
 1023426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102342a:	469a      	mov	sl, r3
 102342c:	68d9      	ldr	r1, [r3, #12]
 102342e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1023432:	1f32      	subs	r2, r6, #4
 1023434:	2a24      	cmp	r2, #36	; 0x24
 1023436:	eb03 090c 	add.w	r9, r3, ip
 102343a:	60c1      	str	r1, [r0, #12]
 102343c:	6088      	str	r0, [r1, #8]
 102343e:	f200 80f6 	bhi.w	102362e <_realloc_r+0x302>
 1023442:	2a13      	cmp	r2, #19
 1023444:	6829      	ldr	r1, [r5, #0]
 1023446:	bf98      	it	ls
 1023448:	4652      	movls	r2, sl
 102344a:	d91c      	bls.n	1023486 <_realloc_r+0x15a>
 102344c:	6099      	str	r1, [r3, #8]
 102344e:	2a1b      	cmp	r2, #27
 1023450:	6869      	ldr	r1, [r5, #4]
 1023452:	bf98      	it	ls
 1023454:	f103 0210 	addls.w	r2, r3, #16
 1023458:	60d9      	str	r1, [r3, #12]
 102345a:	68a9      	ldr	r1, [r5, #8]
 102345c:	bf98      	it	ls
 102345e:	3508      	addls	r5, #8
 1023460:	d911      	bls.n	1023486 <_realloc_r+0x15a>
 1023462:	6119      	str	r1, [r3, #16]
 1023464:	2a24      	cmp	r2, #36	; 0x24
 1023466:	68e9      	ldr	r1, [r5, #12]
 1023468:	bf14      	ite	ne
 102346a:	f103 0218 	addne.w	r2, r3, #24
 102346e:	f103 0220 	addeq.w	r2, r3, #32
 1023472:	6159      	str	r1, [r3, #20]
 1023474:	6929      	ldr	r1, [r5, #16]
 1023476:	bf11      	iteee	ne
 1023478:	3510      	addne	r5, #16
 102347a:	6199      	streq	r1, [r3, #24]
 102347c:	6969      	ldreq	r1, [r5, #20]
 102347e:	61d9      	streq	r1, [r3, #28]
 1023480:	bf04      	itt	eq
 1023482:	69a9      	ldreq	r1, [r5, #24]
 1023484:	3518      	addeq	r5, #24
 1023486:	6011      	str	r1, [r2, #0]
 1023488:	461f      	mov	r7, r3
 102348a:	6869      	ldr	r1, [r5, #4]
 102348c:	4666      	mov	r6, ip
 102348e:	6051      	str	r1, [r2, #4]
 1023490:	68ab      	ldr	r3, [r5, #8]
 1023492:	4655      	mov	r5, sl
 1023494:	6093      	str	r3, [r2, #8]
 1023496:	1b32      	subs	r2, r6, r4
 1023498:	687b      	ldr	r3, [r7, #4]
 102349a:	2a0f      	cmp	r2, #15
 102349c:	f003 0301 	and.w	r3, r3, #1
 10234a0:	d80f      	bhi.n	10234c2 <_realloc_r+0x196>
 10234a2:	4333      	orrs	r3, r6
 10234a4:	607b      	str	r3, [r7, #4]
 10234a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 10234aa:	f043 0301 	orr.w	r3, r3, #1
 10234ae:	f8c9 3004 	str.w	r3, [r9, #4]
 10234b2:	4640      	mov	r0, r8
 10234b4:	46aa      	mov	sl, r5
 10234b6:	f7f8 fe4d 	bl	101c154 <__malloc_unlock>
 10234ba:	4650      	mov	r0, sl
 10234bc:	b003      	add	sp, #12
 10234be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10234c2:	1939      	adds	r1, r7, r4
 10234c4:	4323      	orrs	r3, r4
 10234c6:	f042 0201 	orr.w	r2, r2, #1
 10234ca:	607b      	str	r3, [r7, #4]
 10234cc:	604a      	str	r2, [r1, #4]
 10234ce:	4640      	mov	r0, r8
 10234d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 10234d4:	3108      	adds	r1, #8
 10234d6:	f043 0301 	orr.w	r3, r3, #1
 10234da:	f8c9 3004 	str.w	r3, [r9, #4]
 10234de:	f7fe fe8f 	bl	1022200 <_free_r>
 10234e2:	e7e6      	b.n	10234b2 <_realloc_r+0x186>
 10234e4:	07c8      	lsls	r0, r1, #31
 10234e6:	f53f af75 	bmi.w	10233d4 <_realloc_r+0xa8>
 10234ea:	f855 3c08 	ldr.w	r3, [r5, #-8]
 10234ee:	1afb      	subs	r3, r7, r3
 10234f0:	6859      	ldr	r1, [r3, #4]
 10234f2:	f021 0103 	bic.w	r1, r1, #3
 10234f6:	e769      	b.n	10233cc <_realloc_r+0xa0>
 10234f8:	4611      	mov	r1, r2
 10234fa:	b003      	add	sp, #12
 10234fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1023500:	f7f7 bd6a 	b.w	101afd8 <_malloc_r>
 1023504:	f04f 0a00 	mov.w	sl, #0
 1023508:	230c      	movs	r3, #12
 102350a:	4650      	mov	r0, sl
 102350c:	f8c8 3000 	str.w	r3, [r8]
 1023510:	b003      	add	sp, #12
 1023512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023516:	f020 0003 	bic.w	r0, r0, #3
 102351a:	f104 0c10 	add.w	ip, r4, #16
 102351e:	1833      	adds	r3, r6, r0
 1023520:	4563      	cmp	r3, ip
 1023522:	f280 8098 	bge.w	1023656 <_realloc_r+0x32a>
 1023526:	07cb      	lsls	r3, r1, #31
 1023528:	f53f af54 	bmi.w	10233d4 <_realloc_r+0xa8>
 102352c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1023530:	1afb      	subs	r3, r7, r3
 1023532:	6859      	ldr	r1, [r3, #4]
 1023534:	f021 0103 	bic.w	r1, r1, #3
 1023538:	4408      	add	r0, r1
 102353a:	eb00 0906 	add.w	r9, r0, r6
 102353e:	45cc      	cmp	ip, r9
 1023540:	f73f af44 	bgt.w	10233cc <_realloc_r+0xa0>
 1023544:	469a      	mov	sl, r3
 1023546:	68d9      	ldr	r1, [r3, #12]
 1023548:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 102354c:	1f32      	subs	r2, r6, #4
 102354e:	2a24      	cmp	r2, #36	; 0x24
 1023550:	60c1      	str	r1, [r0, #12]
 1023552:	6088      	str	r0, [r1, #8]
 1023554:	f200 809c 	bhi.w	1023690 <_realloc_r+0x364>
 1023558:	2a13      	cmp	r2, #19
 102355a:	6829      	ldr	r1, [r5, #0]
 102355c:	bf98      	it	ls
 102355e:	4652      	movls	r2, sl
 1023560:	d91c      	bls.n	102359c <_realloc_r+0x270>
 1023562:	6099      	str	r1, [r3, #8]
 1023564:	2a1b      	cmp	r2, #27
 1023566:	6869      	ldr	r1, [r5, #4]
 1023568:	bf98      	it	ls
 102356a:	f103 0210 	addls.w	r2, r3, #16
 102356e:	60d9      	str	r1, [r3, #12]
 1023570:	68a9      	ldr	r1, [r5, #8]
 1023572:	bf98      	it	ls
 1023574:	3508      	addls	r5, #8
 1023576:	d911      	bls.n	102359c <_realloc_r+0x270>
 1023578:	6119      	str	r1, [r3, #16]
 102357a:	2a24      	cmp	r2, #36	; 0x24
 102357c:	68e9      	ldr	r1, [r5, #12]
 102357e:	bf14      	ite	ne
 1023580:	f103 0218 	addne.w	r2, r3, #24
 1023584:	f103 0220 	addeq.w	r2, r3, #32
 1023588:	6159      	str	r1, [r3, #20]
 102358a:	6929      	ldr	r1, [r5, #16]
 102358c:	bf11      	iteee	ne
 102358e:	3510      	addne	r5, #16
 1023590:	6199      	streq	r1, [r3, #24]
 1023592:	6969      	ldreq	r1, [r5, #20]
 1023594:	61d9      	streq	r1, [r3, #28]
 1023596:	bf04      	itt	eq
 1023598:	69a9      	ldreq	r1, [r5, #24]
 102359a:	3518      	addeq	r5, #24
 102359c:	6011      	str	r1, [r2, #0]
 102359e:	6869      	ldr	r1, [r5, #4]
 10235a0:	6051      	str	r1, [r2, #4]
 10235a2:	68a9      	ldr	r1, [r5, #8]
 10235a4:	6091      	str	r1, [r2, #8]
 10235a6:	1919      	adds	r1, r3, r4
 10235a8:	eba9 0204 	sub.w	r2, r9, r4
 10235ac:	f8cb 1008 	str.w	r1, [fp, #8]
 10235b0:	f042 0201 	orr.w	r2, r2, #1
 10235b4:	604a      	str	r2, [r1, #4]
 10235b6:	4640      	mov	r0, r8
 10235b8:	685a      	ldr	r2, [r3, #4]
 10235ba:	f002 0201 	and.w	r2, r2, #1
 10235be:	4314      	orrs	r4, r2
 10235c0:	605c      	str	r4, [r3, #4]
 10235c2:	f7f8 fdc7 	bl	101c154 <__malloc_unlock>
 10235c6:	e778      	b.n	10234ba <_realloc_r+0x18e>
 10235c8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 10235cc:	461e      	mov	r6, r3
 10235ce:	f8d9 1008 	ldr.w	r1, [r9, #8]
 10235d2:	eb07 0903 	add.w	r9, r7, r3
 10235d6:	60ca      	str	r2, [r1, #12]
 10235d8:	6091      	str	r1, [r2, #8]
 10235da:	e75c      	b.n	1023496 <_realloc_r+0x16a>
 10235dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 10235e0:	f023 0303 	bic.w	r3, r3, #3
 10235e4:	441e      	add	r6, r3
 10235e6:	eb07 0906 	add.w	r9, r7, r6
 10235ea:	e754      	b.n	1023496 <_realloc_r+0x16a>
 10235ec:	6001      	str	r1, [r0, #0]
 10235ee:	2a1b      	cmp	r2, #27
 10235f0:	686b      	ldr	r3, [r5, #4]
 10235f2:	6043      	str	r3, [r0, #4]
 10235f4:	d823      	bhi.n	102363e <_realloc_r+0x312>
 10235f6:	f105 0208 	add.w	r2, r5, #8
 10235fa:	f100 0308 	add.w	r3, r0, #8
 10235fe:	68a9      	ldr	r1, [r5, #8]
 1023600:	e703      	b.n	102340a <_realloc_r+0xde>
 1023602:	4629      	mov	r1, r5
 1023604:	f7f8 fcec 	bl	101bfe0 <memmove>
 1023608:	e704      	b.n	1023414 <_realloc_r+0xe8>
 102360a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 102360e:	469a      	mov	sl, r3
 1023610:	f8d9 0008 	ldr.w	r0, [r9, #8]
 1023614:	1f32      	subs	r2, r6, #4
 1023616:	2a24      	cmp	r2, #36	; 0x24
 1023618:	eb03 090c 	add.w	r9, r3, ip
 102361c:	60c1      	str	r1, [r0, #12]
 102361e:	6088      	str	r0, [r1, #8]
 1023620:	68d9      	ldr	r1, [r3, #12]
 1023622:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1023626:	60c1      	str	r1, [r0, #12]
 1023628:	6088      	str	r0, [r1, #8]
 102362a:	f67f af0a 	bls.w	1023442 <_realloc_r+0x116>
 102362e:	4629      	mov	r1, r5
 1023630:	4650      	mov	r0, sl
 1023632:	4666      	mov	r6, ip
 1023634:	461f      	mov	r7, r3
 1023636:	4655      	mov	r5, sl
 1023638:	f7f8 fcd2 	bl	101bfe0 <memmove>
 102363c:	e72b      	b.n	1023496 <_realloc_r+0x16a>
 102363e:	68ab      	ldr	r3, [r5, #8]
 1023640:	2a24      	cmp	r2, #36	; 0x24
 1023642:	6083      	str	r3, [r0, #8]
 1023644:	68eb      	ldr	r3, [r5, #12]
 1023646:	60c3      	str	r3, [r0, #12]
 1023648:	d018      	beq.n	102367c <_realloc_r+0x350>
 102364a:	f105 0210 	add.w	r2, r5, #16
 102364e:	f100 0310 	add.w	r3, r0, #16
 1023652:	6929      	ldr	r1, [r5, #16]
 1023654:	e6d9      	b.n	102340a <_realloc_r+0xde>
 1023656:	4427      	add	r7, r4
 1023658:	1b1b      	subs	r3, r3, r4
 102365a:	f8cb 7008 	str.w	r7, [fp, #8]
 102365e:	f043 0301 	orr.w	r3, r3, #1
 1023662:	607b      	str	r3, [r7, #4]
 1023664:	4640      	mov	r0, r8
 1023666:	f855 3c04 	ldr.w	r3, [r5, #-4]
 102366a:	46aa      	mov	sl, r5
 102366c:	f003 0301 	and.w	r3, r3, #1
 1023670:	431c      	orrs	r4, r3
 1023672:	f845 4c04 	str.w	r4, [r5, #-4]
 1023676:	f7f8 fd6d 	bl	101c154 <__malloc_unlock>
 102367a:	e71e      	b.n	10234ba <_realloc_r+0x18e>
 102367c:	6929      	ldr	r1, [r5, #16]
 102367e:	f105 0218 	add.w	r2, r5, #24
 1023682:	f100 0318 	add.w	r3, r0, #24
 1023686:	6101      	str	r1, [r0, #16]
 1023688:	6969      	ldr	r1, [r5, #20]
 102368a:	6141      	str	r1, [r0, #20]
 102368c:	69a9      	ldr	r1, [r5, #24]
 102368e:	e6bc      	b.n	102340a <_realloc_r+0xde>
 1023690:	4629      	mov	r1, r5
 1023692:	4650      	mov	r0, sl
 1023694:	9301      	str	r3, [sp, #4]
 1023696:	f7f8 fca3 	bl	101bfe0 <memmove>
 102369a:	9b01      	ldr	r3, [sp, #4]
 102369c:	e783      	b.n	10235a6 <_realloc_r+0x27a>
 102369e:	bf00      	nop

010236a0 <cleanup_glue>:
 10236a0:	b538      	push	{r3, r4, r5, lr}
 10236a2:	460c      	mov	r4, r1
 10236a4:	6809      	ldr	r1, [r1, #0]
 10236a6:	4605      	mov	r5, r0
 10236a8:	b109      	cbz	r1, 10236ae <cleanup_glue+0xe>
 10236aa:	f7ff fff9 	bl	10236a0 <cleanup_glue>
 10236ae:	4621      	mov	r1, r4
 10236b0:	4628      	mov	r0, r5
 10236b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 10236b6:	f7fe bda3 	b.w	1022200 <_free_r>
 10236ba:	bf00      	nop

010236bc <_reclaim_reent>:
 10236bc:	f64a 1348 	movw	r3, #43336	; 0xa948
 10236c0:	f2c0 1306 	movt	r3, #262	; 0x106
 10236c4:	681b      	ldr	r3, [r3, #0]
 10236c6:	4283      	cmp	r3, r0
 10236c8:	d03b      	beq.n	1023742 <_reclaim_reent+0x86>
 10236ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 10236cc:	b570      	push	{r4, r5, r6, lr}
 10236ce:	4605      	mov	r5, r0
 10236d0:	b18b      	cbz	r3, 10236f6 <_reclaim_reent+0x3a>
 10236d2:	2600      	movs	r6, #0
 10236d4:	5999      	ldr	r1, [r3, r6]
 10236d6:	b139      	cbz	r1, 10236e8 <_reclaim_reent+0x2c>
 10236d8:	680c      	ldr	r4, [r1, #0]
 10236da:	4628      	mov	r0, r5
 10236dc:	f7fe fd90 	bl	1022200 <_free_r>
 10236e0:	4621      	mov	r1, r4
 10236e2:	2c00      	cmp	r4, #0
 10236e4:	d1f8      	bne.n	10236d8 <_reclaim_reent+0x1c>
 10236e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 10236e8:	3604      	adds	r6, #4
 10236ea:	2e80      	cmp	r6, #128	; 0x80
 10236ec:	d1f2      	bne.n	10236d4 <_reclaim_reent+0x18>
 10236ee:	4619      	mov	r1, r3
 10236f0:	4628      	mov	r0, r5
 10236f2:	f7fe fd85 	bl	1022200 <_free_r>
 10236f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 10236f8:	b111      	cbz	r1, 1023700 <_reclaim_reent+0x44>
 10236fa:	4628      	mov	r0, r5
 10236fc:	f7fe fd80 	bl	1022200 <_free_r>
 1023700:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 1023704:	b151      	cbz	r1, 102371c <_reclaim_reent+0x60>
 1023706:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 102370a:	42b1      	cmp	r1, r6
 102370c:	d006      	beq.n	102371c <_reclaim_reent+0x60>
 102370e:	680c      	ldr	r4, [r1, #0]
 1023710:	4628      	mov	r0, r5
 1023712:	f7fe fd75 	bl	1022200 <_free_r>
 1023716:	42a6      	cmp	r6, r4
 1023718:	4621      	mov	r1, r4
 102371a:	d1f8      	bne.n	102370e <_reclaim_reent+0x52>
 102371c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 102371e:	b111      	cbz	r1, 1023726 <_reclaim_reent+0x6a>
 1023720:	4628      	mov	r0, r5
 1023722:	f7fe fd6d 	bl	1022200 <_free_r>
 1023726:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1023728:	b153      	cbz	r3, 1023740 <_reclaim_reent+0x84>
 102372a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 102372c:	4628      	mov	r0, r5
 102372e:	4798      	blx	r3
 1023730:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 1023734:	b121      	cbz	r1, 1023740 <_reclaim_reent+0x84>
 1023736:	4628      	mov	r0, r5
 1023738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 102373c:	f7ff bfb0 	b.w	10236a0 <cleanup_glue>
 1023740:	bd70      	pop	{r4, r5, r6, pc}
 1023742:	4770      	bx	lr
 1023744:	0000      	movs	r0, r0
	...

01023748 <frexp>:
 1023748:	b430      	push	{r4, r5}
 102374a:	b082      	sub	sp, #8
 102374c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 1023750:	f6c7 74ef 	movt	r4, #32751	; 0x7fef
 1023754:	ed8d 0b00 	vstr	d0, [sp]
 1023758:	2500      	movs	r5, #0
 102375a:	9b01      	ldr	r3, [sp, #4]
 102375c:	6005      	str	r5, [r0, #0]
 102375e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 1023762:	42a1      	cmp	r1, r4
 1023764:	dc24      	bgt.n	10237b0 <frexp+0x68>
 1023766:	9c00      	ldr	r4, [sp, #0]
 1023768:	ea51 0204 	orrs.w	r2, r1, r4
 102376c:	d020      	beq.n	10237b0 <frexp+0x68>
 102376e:	462c      	mov	r4, r5
 1023770:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 1023774:	401c      	ands	r4, r3
 1023776:	b954      	cbnz	r4, 102378e <frexp+0x46>
 1023778:	ed9f 7b11 	vldr	d7, [pc, #68]	; 10237c0 <frexp+0x78>
 102377c:	f06f 0535 	mvn.w	r5, #53	; 0x35
 1023780:	ee20 7b07 	vmul.f64	d7, d0, d7
 1023784:	ed8d 7b00 	vstr	d7, [sp]
 1023788:	9b01      	ldr	r3, [sp, #4]
 102378a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 102378e:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
 1023792:	e9dd 2300 	ldrd	r2, r3, [sp]
 1023796:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 102379a:	1509      	asrs	r1, r1, #20
 102379c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 10237a0:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 10237a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 10237a8:	4429      	add	r1, r5
 10237aa:	e9cd 2300 	strd	r2, r3, [sp]
 10237ae:	6001      	str	r1, [r0, #0]
 10237b0:	ed9d 0b00 	vldr	d0, [sp]
 10237b4:	b002      	add	sp, #8
 10237b6:	bc30      	pop	{r4, r5}
 10237b8:	4770      	bx	lr
 10237ba:	bf00      	nop
 10237bc:	f3af 8000 	nop.w
 10237c0:	00000000 	.word	0x00000000
 10237c4:	43500000 	.word	0x43500000

010237c8 <__sread>:
 10237c8:	b510      	push	{r4, lr}
 10237ca:	460c      	mov	r4, r1
 10237cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 10237d0:	f002 f9c6 	bl	1025b60 <_read_r>
 10237d4:	2800      	cmp	r0, #0
 10237d6:	bfab      	itete	ge
 10237d8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 10237da:	89a3      	ldrhlt	r3, [r4, #12]
 10237dc:	181b      	addge	r3, r3, r0
 10237de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 10237e2:	bfac      	ite	ge
 10237e4:	6523      	strge	r3, [r4, #80]	; 0x50
 10237e6:	81a3      	strhlt	r3, [r4, #12]
 10237e8:	bd10      	pop	{r4, pc}
 10237ea:	bf00      	nop

010237ec <__seofread>:
 10237ec:	2000      	movs	r0, #0
 10237ee:	4770      	bx	lr

010237f0 <__swrite>:
 10237f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10237f4:	4616      	mov	r6, r2
 10237f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 10237fa:	461f      	mov	r7, r3
 10237fc:	460c      	mov	r4, r1
 10237fe:	4605      	mov	r5, r0
 1023800:	05d3      	lsls	r3, r2, #23
 1023802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1023806:	d409      	bmi.n	102381c <__swrite+0x2c>
 1023808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 102380c:	463b      	mov	r3, r7
 102380e:	81a2      	strh	r2, [r4, #12]
 1023810:	4628      	mov	r0, r5
 1023812:	4632      	mov	r2, r6
 1023814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1023818:	f002 b85a 	b.w	10258d0 <_write_r>
 102381c:	2200      	movs	r2, #0
 102381e:	2302      	movs	r3, #2
 1023820:	f002 f988 	bl	1025b34 <_lseek_r>
 1023824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1023828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 102382c:	e7ec      	b.n	1023808 <__swrite+0x18>
 102382e:	bf00      	nop

01023830 <__sseek>:
 1023830:	b510      	push	{r4, lr}
 1023832:	460c      	mov	r4, r1
 1023834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1023838:	f002 f97c 	bl	1025b34 <_lseek_r>
 102383c:	89a3      	ldrh	r3, [r4, #12]
 102383e:	1c42      	adds	r2, r0, #1
 1023840:	bf16      	itet	ne
 1023842:	6520      	strne	r0, [r4, #80]	; 0x50
 1023844:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 1023848:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 102384c:	81a3      	strh	r3, [r4, #12]
 102384e:	bd10      	pop	{r4, pc}

01023850 <__sclose>:
 1023850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1023854:	f002 b852 	b.w	10258fc <_close_r>

01023858 <__ssprint_r>:
 1023858:	6893      	ldr	r3, [r2, #8]
 102385a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102385e:	4692      	mov	sl, r2
 1023860:	b083      	sub	sp, #12
 1023862:	2b00      	cmp	r3, #0
 1023864:	d06e      	beq.n	1023944 <__ssprint_r+0xec>
 1023866:	6817      	ldr	r7, [r2, #0]
 1023868:	4681      	mov	r9, r0
 102386a:	460c      	mov	r4, r1
 102386c:	6808      	ldr	r0, [r1, #0]
 102386e:	3708      	adds	r7, #8
 1023870:	688d      	ldr	r5, [r1, #8]
 1023872:	e042      	b.n	10238fa <__ssprint_r+0xa2>
 1023874:	89a3      	ldrh	r3, [r4, #12]
 1023876:	f413 6f90 	tst.w	r3, #1152	; 0x480
 102387a:	d02d      	beq.n	10238d8 <__ssprint_r+0x80>
 102387c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 1023880:	1a45      	subs	r5, r0, r1
 1023882:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1023886:	eb05 0806 	add.w	r8, r5, r6
 102388a:	f108 0801 	add.w	r8, r8, #1
 102388e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 1023892:	1052      	asrs	r2, r2, #1
 1023894:	4590      	cmp	r8, r2
 1023896:	bf94      	ite	ls
 1023898:	4690      	movls	r8, r2
 102389a:	4642      	movhi	r2, r8
 102389c:	055b      	lsls	r3, r3, #21
 102389e:	d538      	bpl.n	1023912 <__ssprint_r+0xba>
 10238a0:	4611      	mov	r1, r2
 10238a2:	4648      	mov	r0, r9
 10238a4:	f7f7 fb98 	bl	101afd8 <_malloc_r>
 10238a8:	2800      	cmp	r0, #0
 10238aa:	d03c      	beq.n	1023926 <__ssprint_r+0xce>
 10238ac:	462a      	mov	r2, r5
 10238ae:	6921      	ldr	r1, [r4, #16]
 10238b0:	9001      	str	r0, [sp, #4]
 10238b2:	f7f8 e8a6 	blx	101ba00 <memcpy>
 10238b6:	89a2      	ldrh	r2, [r4, #12]
 10238b8:	9b01      	ldr	r3, [sp, #4]
 10238ba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 10238be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 10238c2:	81a2      	strh	r2, [r4, #12]
 10238c4:	1958      	adds	r0, r3, r5
 10238c6:	f8c4 8014 	str.w	r8, [r4, #20]
 10238ca:	eba8 0505 	sub.w	r5, r8, r5
 10238ce:	46b0      	mov	r8, r6
 10238d0:	60a5      	str	r5, [r4, #8]
 10238d2:	4635      	mov	r5, r6
 10238d4:	6123      	str	r3, [r4, #16]
 10238d6:	6020      	str	r0, [r4, #0]
 10238d8:	4642      	mov	r2, r8
 10238da:	4659      	mov	r1, fp
 10238dc:	f7f8 fb80 	bl	101bfe0 <memmove>
 10238e0:	f8da 2008 	ldr.w	r2, [sl, #8]
 10238e4:	68a3      	ldr	r3, [r4, #8]
 10238e6:	6820      	ldr	r0, [r4, #0]
 10238e8:	1b96      	subs	r6, r2, r6
 10238ea:	1b5d      	subs	r5, r3, r5
 10238ec:	60a5      	str	r5, [r4, #8]
 10238ee:	4440      	add	r0, r8
 10238f0:	6020      	str	r0, [r4, #0]
 10238f2:	f8ca 6008 	str.w	r6, [sl, #8]
 10238f6:	b32e      	cbz	r6, 1023944 <__ssprint_r+0xec>
 10238f8:	3708      	adds	r7, #8
 10238fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 10238fe:	46a8      	mov	r8, r5
 1023900:	f857 bc08 	ldr.w	fp, [r7, #-8]
 1023904:	2e00      	cmp	r6, #0
 1023906:	d0f7      	beq.n	10238f8 <__ssprint_r+0xa0>
 1023908:	42ae      	cmp	r6, r5
 102390a:	d2b3      	bcs.n	1023874 <__ssprint_r+0x1c>
 102390c:	4635      	mov	r5, r6
 102390e:	46b0      	mov	r8, r6
 1023910:	e7e2      	b.n	10238d8 <__ssprint_r+0x80>
 1023912:	4648      	mov	r0, r9
 1023914:	f7ff fd0a 	bl	102332c <_realloc_r>
 1023918:	4603      	mov	r3, r0
 102391a:	2800      	cmp	r0, #0
 102391c:	d1d2      	bne.n	10238c4 <__ssprint_r+0x6c>
 102391e:	6921      	ldr	r1, [r4, #16]
 1023920:	4648      	mov	r0, r9
 1023922:	f7fe fc6d 	bl	1022200 <_free_r>
 1023926:	230c      	movs	r3, #12
 1023928:	f8c9 3000 	str.w	r3, [r9]
 102392c:	89a3      	ldrh	r3, [r4, #12]
 102392e:	f04f 30ff 	mov.w	r0, #4294967295
 1023932:	2200      	movs	r2, #0
 1023934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1023938:	81a3      	strh	r3, [r4, #12]
 102393a:	e9ca 2201 	strd	r2, r2, [sl, #4]
 102393e:	b003      	add	sp, #12
 1023940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023944:	2000      	movs	r0, #0
 1023946:	f8ca 0004 	str.w	r0, [sl, #4]
 102394a:	b003      	add	sp, #12
 102394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01023950 <_svfiprintf_r>:
 1023950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1023954:	b0c7      	sub	sp, #284	; 0x11c
 1023956:	460c      	mov	r4, r1
 1023958:	4683      	mov	fp, r0
 102395a:	9109      	str	r1, [sp, #36]	; 0x24
 102395c:	4615      	mov	r5, r2
 102395e:	a816      	add	r0, sp, #88	; 0x58
 1023960:	2208      	movs	r2, #8
 1023962:	2100      	movs	r1, #0
 1023964:	9307      	str	r3, [sp, #28]
 1023966:	f7f8 fba3 	bl	101c0b0 <memset>
 102396a:	89a3      	ldrh	r3, [r4, #12]
 102396c:	061b      	lsls	r3, r3, #24
 102396e:	d503      	bpl.n	1023978 <_svfiprintf_r+0x28>
 1023970:	6923      	ldr	r3, [r4, #16]
 1023972:	2b00      	cmp	r3, #0
 1023974:	f000 853f 	beq.w	10243f6 <_svfiprintf_r+0xaa6>
 1023978:	f64a 1948 	movw	r9, #43336	; 0xa948
 102397c:	f2c0 1906 	movt	r9, #262	; 0x106
 1023980:	46aa      	mov	sl, r5
 1023982:	2300      	movs	r3, #0
 1023984:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1023988:	930c      	str	r3, [sp, #48]	; 0x30
 102398a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 102398e:	930f      	str	r3, [sp, #60]	; 0x3c
 1023990:	9304      	str	r3, [sp, #16]
 1023992:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 1023996:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 102399a:	f64a 5678 	movw	r6, #44408	; 0xad78
 102399e:	f2c0 1606 	movt	r6, #262	; 0x106
 10239a2:	4654      	mov	r4, sl
 10239a4:	f8d9 3000 	ldr.w	r3, [r9]
 10239a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 10239aa:	2b00      	cmp	r3, #0
 10239ac:	bf08      	it	eq
 10239ae:	4633      	moveq	r3, r6
 10239b0:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 10239b4:	f7f7 fa4e 	bl	101ae54 <__locale_mb_cur_max>
 10239b8:	ab16      	add	r3, sp, #88	; 0x58
 10239ba:	4622      	mov	r2, r4
 10239bc:	9300      	str	r3, [sp, #0]
 10239be:	a914      	add	r1, sp, #80	; 0x50
 10239c0:	4603      	mov	r3, r0
 10239c2:	4658      	mov	r0, fp
 10239c4:	47a8      	blx	r5
 10239c6:	2800      	cmp	r0, #0
 10239c8:	4603      	mov	r3, r0
 10239ca:	f000 8086 	beq.w	1023ada <_svfiprintf_r+0x18a>
 10239ce:	db7c      	blt.n	1023aca <_svfiprintf_r+0x17a>
 10239d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 10239d2:	2a25      	cmp	r2, #37	; 0x25
 10239d4:	d001      	beq.n	10239da <_svfiprintf_r+0x8a>
 10239d6:	441c      	add	r4, r3
 10239d8:	e7e4      	b.n	10239a4 <_svfiprintf_r+0x54>
 10239da:	ebb4 060a 	subs.w	r6, r4, sl
 10239de:	4605      	mov	r5, r0
 10239e0:	d17f      	bne.n	1023ae2 <_svfiprintf_r+0x192>
 10239e2:	2300      	movs	r3, #0
 10239e4:	9306      	str	r3, [sp, #24]
 10239e6:	461e      	mov	r6, r3
 10239e8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10239ec:	7863      	ldrb	r3, [r4, #1]
 10239ee:	f104 0a01 	add.w	sl, r4, #1
 10239f2:	f04f 32ff 	mov.w	r2, #4294967295
 10239f6:	9203      	str	r2, [sp, #12]
 10239f8:	f10a 0a01 	add.w	sl, sl, #1
 10239fc:	f1a3 0220 	sub.w	r2, r3, #32
 1023a00:	2a5a      	cmp	r2, #90	; 0x5a
 1023a02:	f200 8322 	bhi.w	102404a <_svfiprintf_r+0x6fa>
 1023a06:	e8df f012 	tbh	[pc, r2, lsl #1]
 1023a0a:	01d2      	.short	0x01d2
 1023a0c:	03200320 	.word	0x03200320
 1023a10:	032001cd 	.word	0x032001cd
 1023a14:	03200320 	.word	0x03200320
 1023a18:	032001af 	.word	0x032001af
 1023a1c:	01a00320 	.word	0x01a00320
 1023a20:	0320025e 	.word	0x0320025e
 1023a24:	01f4020f 	.word	0x01f4020f
 1023a28:	01ef0320 	.word	0x01ef0320
 1023a2c:	015e015e 	.word	0x015e015e
 1023a30:	015e015e 	.word	0x015e015e
 1023a34:	015e015e 	.word	0x015e015e
 1023a38:	015e015e 	.word	0x015e015e
 1023a3c:	0320015e 	.word	0x0320015e
 1023a40:	03200320 	.word	0x03200320
 1023a44:	03200320 	.word	0x03200320
 1023a48:	03200320 	.word	0x03200320
 1023a4c:	03200320 	.word	0x03200320
 1023a50:	0220016c 	.word	0x0220016c
 1023a54:	03200320 	.word	0x03200320
 1023a58:	03200320 	.word	0x03200320
 1023a5c:	03200320 	.word	0x03200320
 1023a60:	03200320 	.word	0x03200320
 1023a64:	03200320 	.word	0x03200320
 1023a68:	03200214 	.word	0x03200214
 1023a6c:	03200320 	.word	0x03200320
 1023a70:	032002c9 	.word	0x032002c9
 1023a74:	032002bc 	.word	0x032002bc
 1023a78:	02900320 	.word	0x02900320
 1023a7c:	03200320 	.word	0x03200320
 1023a80:	03200320 	.word	0x03200320
 1023a84:	03200320 	.word	0x03200320
 1023a88:	03200320 	.word	0x03200320
 1023a8c:	03200320 	.word	0x03200320
 1023a90:	0276016c 	.word	0x0276016c
 1023a94:	03200320 	.word	0x03200320
 1023a98:	02fe0320 	.word	0x02fe0320
 1023a9c:	005b0276 	.word	0x005b0276
 1023aa0:	02f10320 	.word	0x02f10320
 1023aa4:	030b0320 	.word	0x030b0320
 1023aa8:	0264018f 	.word	0x0264018f
 1023aac:	0320005b 	.word	0x0320005b
 1023ab0:	005d02c9 	.word	0x005d02c9
 1023ab4:	032001dd 	.word	0x032001dd
 1023ab8:	009b0320 	.word	0x009b0320
 1023abc:	005d0320 	.word	0x005d0320
 1023ac0:	f046 0620 	orr.w	r6, r6, #32
 1023ac4:	f89a 3000 	ldrb.w	r3, [sl]
 1023ac8:	e796      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023aca:	2208      	movs	r2, #8
 1023acc:	2100      	movs	r1, #0
 1023ace:	a816      	add	r0, sp, #88	; 0x58
 1023ad0:	f7f8 faee 	bl	101c0b0 <memset>
 1023ad4:	2301      	movs	r3, #1
 1023ad6:	441c      	add	r4, r3
 1023ad8:	e764      	b.n	10239a4 <_svfiprintf_r+0x54>
 1023ada:	ebb4 060a 	subs.w	r6, r4, sl
 1023ade:	4605      	mov	r5, r0
 1023ae0:	d012      	beq.n	1023b08 <_svfiprintf_r+0x1b8>
 1023ae2:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1023ae6:	e9c8 a600 	strd	sl, r6, [r8]
 1023aea:	3301      	adds	r3, #1
 1023aec:	4432      	add	r2, r6
 1023aee:	2b07      	cmp	r3, #7
 1023af0:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1023af4:	bfd8      	it	le
 1023af6:	f108 0808 	addle.w	r8, r8, #8
 1023afa:	dc17      	bgt.n	1023b2c <_svfiprintf_r+0x1dc>
 1023afc:	9b04      	ldr	r3, [sp, #16]
 1023afe:	4433      	add	r3, r6
 1023b00:	9304      	str	r3, [sp, #16]
 1023b02:	2d00      	cmp	r5, #0
 1023b04:	f47f af6d 	bne.w	10239e2 <_svfiprintf_r+0x92>
 1023b08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 1023b0a:	2b00      	cmp	r3, #0
 1023b0c:	f040 8586 	bne.w	102461c <_svfiprintf_r+0xccc>
 1023b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1023b12:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 1023b16:	f013 0f40 	tst.w	r3, #64	; 0x40
 1023b1a:	9b04      	ldr	r3, [sp, #16]
 1023b1c:	bf18      	it	ne
 1023b1e:	f04f 33ff 	movne.w	r3, #4294967295
 1023b22:	9304      	str	r3, [sp, #16]
 1023b24:	9804      	ldr	r0, [sp, #16]
 1023b26:	b047      	add	sp, #284	; 0x11c
 1023b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1023b2c:	aa1a      	add	r2, sp, #104	; 0x68
 1023b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 1023b30:	4658      	mov	r0, fp
 1023b32:	f7ff fe91 	bl	1023858 <__ssprint_r>
 1023b36:	2800      	cmp	r0, #0
 1023b38:	d1ea      	bne.n	1023b10 <_svfiprintf_r+0x1c0>
 1023b3a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1023b3e:	e7dd      	b.n	1023afc <_svfiprintf_r+0x1ac>
 1023b40:	06b4      	lsls	r4, r6, #26
 1023b42:	f24a 425c 	movw	r2, #42076	; 0xa45c
 1023b46:	f2c0 1206 	movt	r2, #262	; 0x106
 1023b4a:	920c      	str	r2, [sp, #48]	; 0x30
 1023b4c:	f140 81f5 	bpl.w	1023f3a <_svfiprintf_r+0x5ea>
 1023b50:	9d07      	ldr	r5, [sp, #28]
 1023b52:	3507      	adds	r5, #7
 1023b54:	f025 0207 	bic.w	r2, r5, #7
 1023b58:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1023b5c:	9207      	str	r2, [sp, #28]
 1023b5e:	ea54 0205 	orrs.w	r2, r4, r5
 1023b62:	f006 0201 	and.w	r2, r6, #1
 1023b66:	bf08      	it	eq
 1023b68:	2200      	moveq	r2, #0
 1023b6a:	2a00      	cmp	r2, #0
 1023b6c:	f040 8201 	bne.w	1023f72 <_svfiprintf_r+0x622>
 1023b70:	f426 6780 	bic.w	r7, r6, #1024	; 0x400
 1023b74:	2302      	movs	r3, #2
 1023b76:	9903      	ldr	r1, [sp, #12]
 1023b78:	2200      	movs	r2, #0
 1023b7a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1023b7e:	1c4a      	adds	r2, r1, #1
 1023b80:	f000 8182 	beq.w	1023e88 <_svfiprintf_r+0x538>
 1023b84:	ea54 0205 	orrs.w	r2, r4, r5
 1023b88:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 1023b8c:	bf14      	ite	ne
 1023b8e:	2201      	movne	r2, #1
 1023b90:	2200      	moveq	r2, #0
 1023b92:	2900      	cmp	r1, #0
 1023b94:	bf18      	it	ne
 1023b96:	2201      	movne	r2, #1
 1023b98:	2a00      	cmp	r2, #0
 1023b9a:	f040 8417 	bne.w	10243cc <_svfiprintf_r+0xa7c>
 1023b9e:	2b00      	cmp	r3, #0
 1023ba0:	f040 83f0 	bne.w	1024384 <_svfiprintf_r+0xa34>
 1023ba4:	f017 0201 	ands.w	r2, r7, #1
 1023ba8:	9303      	str	r3, [sp, #12]
 1023baa:	9205      	str	r2, [sp, #20]
 1023bac:	bf04      	itt	eq
 1023bae:	ab46      	addeq	r3, sp, #280	; 0x118
 1023bb0:	930b      	streq	r3, [sp, #44]	; 0x2c
 1023bb2:	d005      	beq.n	1023bc0 <_svfiprintf_r+0x270>
 1023bb4:	2330      	movs	r3, #48	; 0x30
 1023bb6:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 1023bba:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1023bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 1023bc0:	9b05      	ldr	r3, [sp, #20]
 1023bc2:	9a03      	ldr	r2, [sp, #12]
 1023bc4:	4293      	cmp	r3, r2
 1023bc6:	bfb8      	it	lt
 1023bc8:	4613      	movlt	r3, r2
 1023bca:	9302      	str	r3, [sp, #8]
 1023bcc:	2300      	movs	r3, #0
 1023bce:	9308      	str	r3, [sp, #32]
 1023bd0:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 1023bd4:	b113      	cbz	r3, 1023bdc <_svfiprintf_r+0x28c>
 1023bd6:	9b02      	ldr	r3, [sp, #8]
 1023bd8:	3301      	adds	r3, #1
 1023bda:	9302      	str	r3, [sp, #8]
 1023bdc:	f016 0302 	ands.w	r3, r6, #2
 1023be0:	bf1e      	ittt	ne
 1023be2:	9a02      	ldrne	r2, [sp, #8]
 1023be4:	3202      	addne	r2, #2
 1023be6:	9202      	strne	r2, [sp, #8]
 1023be8:	f016 0084 	ands.w	r0, r6, #132	; 0x84
 1023bec:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1023bf0:	900a      	str	r0, [sp, #40]	; 0x28
 1023bf2:	d105      	bne.n	1023c00 <_svfiprintf_r+0x2b0>
 1023bf4:	9806      	ldr	r0, [sp, #24]
 1023bf6:	9c02      	ldr	r4, [sp, #8]
 1023bf8:	1b04      	subs	r4, r0, r4
 1023bfa:	2c00      	cmp	r4, #0
 1023bfc:	f300 8326 	bgt.w	102424c <_svfiprintf_r+0x8fc>
 1023c00:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 1023c04:	1c48      	adds	r0, r1, #1
 1023c06:	f108 0708 	add.w	r7, r8, #8
 1023c0a:	b1ac      	cbz	r4, 1023c38 <_svfiprintf_r+0x2e8>
 1023c0c:	2807      	cmp	r0, #7
 1023c0e:	f10d 044b 	add.w	r4, sp, #75	; 0x4b
 1023c12:	f102 0201 	add.w	r2, r2, #1
 1023c16:	f8c8 4000 	str.w	r4, [r8]
 1023c1a:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 1023c1e:	f04f 0401 	mov.w	r4, #1
 1023c22:	f8c8 4004 	str.w	r4, [r8, #4]
 1023c26:	f300 8355 	bgt.w	10242d4 <_svfiprintf_r+0x984>
 1023c2a:	1c8d      	adds	r5, r1, #2
 1023c2c:	f108 0410 	add.w	r4, r8, #16
 1023c30:	4601      	mov	r1, r0
 1023c32:	46b8      	mov	r8, r7
 1023c34:	4628      	mov	r0, r5
 1023c36:	4627      	mov	r7, r4
 1023c38:	b18b      	cbz	r3, 1023c5e <_svfiprintf_r+0x30e>
 1023c3a:	2807      	cmp	r0, #7
 1023c3c:	ab13      	add	r3, sp, #76	; 0x4c
 1023c3e:	f102 0202 	add.w	r2, r2, #2
 1023c42:	f8c8 3000 	str.w	r3, [r8]
 1023c46:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 1023c4a:	f04f 0302 	mov.w	r3, #2
 1023c4e:	f8c8 3004 	str.w	r3, [r8, #4]
 1023c52:	f300 834f 	bgt.w	10242f4 <_svfiprintf_r+0x9a4>
 1023c56:	4601      	mov	r1, r0
 1023c58:	46b8      	mov	r8, r7
 1023c5a:	3001      	adds	r0, #1
 1023c5c:	3708      	adds	r7, #8
 1023c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1023c60:	2b80      	cmp	r3, #128	; 0x80
 1023c62:	f000 825f 	beq.w	1024124 <_svfiprintf_r+0x7d4>
 1023c66:	9b03      	ldr	r3, [sp, #12]
 1023c68:	9c05      	ldr	r4, [sp, #20]
 1023c6a:	1b1c      	subs	r4, r3, r4
 1023c6c:	2c00      	cmp	r4, #0
 1023c6e:	f300 829c 	bgt.w	10241aa <_svfiprintf_r+0x85a>
 1023c72:	9b05      	ldr	r3, [sp, #20]
 1023c74:	2807      	cmp	r0, #7
 1023c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1023c78:	441a      	add	r2, r3
 1023c7a:	901b      	str	r0, [sp, #108]	; 0x6c
 1023c7c:	921c      	str	r2, [sp, #112]	; 0x70
 1023c7e:	f8c8 1000 	str.w	r1, [r8]
 1023c82:	f8c8 3004 	str.w	r3, [r8, #4]
 1023c86:	f300 82c7 	bgt.w	1024218 <_svfiprintf_r+0x8c8>
 1023c8a:	0773      	lsls	r3, r6, #29
 1023c8c:	d505      	bpl.n	1023c9a <_svfiprintf_r+0x34a>
 1023c8e:	9b06      	ldr	r3, [sp, #24]
 1023c90:	9902      	ldr	r1, [sp, #8]
 1023c92:	1a5c      	subs	r4, r3, r1
 1023c94:	2c00      	cmp	r4, #0
 1023c96:	f300 833b 	bgt.w	1024310 <_svfiprintf_r+0x9c0>
 1023c9a:	9b04      	ldr	r3, [sp, #16]
 1023c9c:	9906      	ldr	r1, [sp, #24]
 1023c9e:	9802      	ldr	r0, [sp, #8]
 1023ca0:	4281      	cmp	r1, r0
 1023ca2:	bfac      	ite	ge
 1023ca4:	185b      	addge	r3, r3, r1
 1023ca6:	181b      	addlt	r3, r3, r0
 1023ca8:	9304      	str	r3, [sp, #16]
 1023caa:	2a00      	cmp	r2, #0
 1023cac:	f040 82bd 	bne.w	102422a <_svfiprintf_r+0x8da>
 1023cb0:	2300      	movs	r3, #0
 1023cb2:	931b      	str	r3, [sp, #108]	; 0x6c
 1023cb4:	9b08      	ldr	r3, [sp, #32]
 1023cb6:	b11b      	cbz	r3, 1023cc0 <_svfiprintf_r+0x370>
 1023cb8:	9908      	ldr	r1, [sp, #32]
 1023cba:	4658      	mov	r0, fp
 1023cbc:	f7fe faa0 	bl	1022200 <_free_r>
 1023cc0:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1023cc4:	e669      	b.n	102399a <_svfiprintf_r+0x4a>
 1023cc6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1023cca:	2100      	movs	r1, #0
 1023ccc:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1023cd0:	200a      	movs	r0, #10
 1023cd2:	fb00 2101 	mla	r1, r0, r1, r2
 1023cd6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1023cda:	2a09      	cmp	r2, #9
 1023cdc:	d9f6      	bls.n	1023ccc <_svfiprintf_r+0x37c>
 1023cde:	9106      	str	r1, [sp, #24]
 1023ce0:	e68c      	b.n	10239fc <_svfiprintf_r+0xac>
 1023ce2:	9a07      	ldr	r2, [sp, #28]
 1023ce4:	2b43      	cmp	r3, #67	; 0x43
 1023ce6:	f102 0404 	add.w	r4, r2, #4
 1023cea:	d002      	beq.n	1023cf2 <_svfiprintf_r+0x3a2>
 1023cec:	06f7      	lsls	r7, r6, #27
 1023cee:	f140 8379 	bpl.w	10243e4 <_svfiprintf_r+0xa94>
 1023cf2:	2208      	movs	r2, #8
 1023cf4:	2100      	movs	r1, #0
 1023cf6:	a818      	add	r0, sp, #96	; 0x60
 1023cf8:	ad2d      	add	r5, sp, #180	; 0xb4
 1023cfa:	f7f8 f9d9 	bl	101c0b0 <memset>
 1023cfe:	9a07      	ldr	r2, [sp, #28]
 1023d00:	ab18      	add	r3, sp, #96	; 0x60
 1023d02:	4629      	mov	r1, r5
 1023d04:	4658      	mov	r0, fp
 1023d06:	6812      	ldr	r2, [r2, #0]
 1023d08:	f7fc feb8 	bl	1020a7c <_wcrtomb_r>
 1023d0c:	1c43      	adds	r3, r0, #1
 1023d0e:	9005      	str	r0, [sp, #20]
 1023d10:	f000 84bf 	beq.w	1024692 <_svfiprintf_r+0xd42>
 1023d14:	9b05      	ldr	r3, [sp, #20]
 1023d16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1023d1a:	9302      	str	r3, [sp, #8]
 1023d1c:	2300      	movs	r3, #0
 1023d1e:	9407      	str	r4, [sp, #28]
 1023d20:	950b      	str	r5, [sp, #44]	; 0x2c
 1023d22:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1023d26:	e19d      	b.n	1024064 <_svfiprintf_r+0x714>
 1023d28:	06b2      	lsls	r2, r6, #26
 1023d2a:	f100 81d0 	bmi.w	10240ce <_svfiprintf_r+0x77e>
 1023d2e:	9a07      	ldr	r2, [sp, #28]
 1023d30:	06f3      	lsls	r3, r6, #27
 1023d32:	f852 4b04 	ldr.w	r4, [r2], #4
 1023d36:	f100 84c3 	bmi.w	10246c0 <_svfiprintf_r+0xd70>
 1023d3a:	0677      	lsls	r7, r6, #25
 1023d3c:	f140 8436 	bpl.w	10245ac <_svfiprintf_r+0xc5c>
 1023d40:	4633      	mov	r3, r6
 1023d42:	9207      	str	r2, [sp, #28]
 1023d44:	b2a4      	uxth	r4, r4
 1023d46:	2500      	movs	r5, #0
 1023d48:	e1c9      	b.n	10240de <_svfiprintf_r+0x78e>
 1023d4a:	9a07      	ldr	r2, [sp, #28]
 1023d4c:	f89a 3000 	ldrb.w	r3, [sl]
 1023d50:	f852 1b04 	ldr.w	r1, [r2], #4
 1023d54:	2900      	cmp	r1, #0
 1023d56:	9106      	str	r1, [sp, #24]
 1023d58:	bfa8      	it	ge
 1023d5a:	9207      	strge	r2, [sp, #28]
 1023d5c:	f6bf ae4c 	bge.w	10239f8 <_svfiprintf_r+0xa8>
 1023d60:	4249      	negs	r1, r1
 1023d62:	e9cd 1206 	strd	r1, r2, [sp, #24]
 1023d66:	e061      	b.n	1023e2c <_svfiprintf_r+0x4dc>
 1023d68:	4658      	mov	r0, fp
 1023d6a:	f7fe fd71 	bl	1022850 <_localeconv_r>
 1023d6e:	6843      	ldr	r3, [r0, #4]
 1023d70:	4618      	mov	r0, r3
 1023d72:	930f      	str	r3, [sp, #60]	; 0x3c
 1023d74:	f7f9 f884 	bl	101ce80 <strlen>
 1023d78:	4604      	mov	r4, r0
 1023d7a:	900e      	str	r0, [sp, #56]	; 0x38
 1023d7c:	4658      	mov	r0, fp
 1023d7e:	f7fe fd67 	bl	1022850 <_localeconv_r>
 1023d82:	6883      	ldr	r3, [r0, #8]
 1023d84:	2c00      	cmp	r4, #0
 1023d86:	bf18      	it	ne
 1023d88:	2b00      	cmpne	r3, #0
 1023d8a:	930d      	str	r3, [sp, #52]	; 0x34
 1023d8c:	f43f ae9a 	beq.w	1023ac4 <_svfiprintf_r+0x174>
 1023d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1023d92:	781a      	ldrb	r2, [r3, #0]
 1023d94:	f89a 3000 	ldrb.w	r3, [sl]
 1023d98:	2a00      	cmp	r2, #0
 1023d9a:	f43f ae2d 	beq.w	10239f8 <_svfiprintf_r+0xa8>
 1023d9e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 1023da2:	e629      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023da4:	f046 0601 	orr.w	r6, r6, #1
 1023da8:	f89a 3000 	ldrb.w	r3, [sl]
 1023dac:	e624      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023dae:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1023db2:	f89a 3000 	ldrb.w	r3, [sl]
 1023db6:	2a00      	cmp	r2, #0
 1023db8:	f47f ae1e 	bne.w	10239f8 <_svfiprintf_r+0xa8>
 1023dbc:	2220      	movs	r2, #32
 1023dbe:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1023dc2:	e619      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023dc4:	06b0      	lsls	r0, r6, #26
 1023dc6:	f100 8178 	bmi.w	10240ba <_svfiprintf_r+0x76a>
 1023dca:	9a07      	ldr	r2, [sp, #28]
 1023dcc:	06f1      	lsls	r1, r6, #27
 1023dce:	f852 4b04 	ldr.w	r4, [r2], #4
 1023dd2:	f100 8478 	bmi.w	10246c6 <_svfiprintf_r+0xd76>
 1023dd6:	0673      	lsls	r3, r6, #25
 1023dd8:	9207      	str	r2, [sp, #28]
 1023dda:	4637      	mov	r7, r6
 1023ddc:	f140 83f1 	bpl.w	10245c2 <_svfiprintf_r+0xc72>
 1023de0:	b2a4      	uxth	r4, r4
 1023de2:	2500      	movs	r5, #0
 1023de4:	2301      	movs	r3, #1
 1023de6:	e6c6      	b.n	1023b76 <_svfiprintf_r+0x226>
 1023de8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 1023dec:	f89a 3000 	ldrb.w	r3, [sl]
 1023df0:	e602      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023df2:	4651      	mov	r1, sl
 1023df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 1023df8:	2b2a      	cmp	r3, #42	; 0x2a
 1023dfa:	f000 8452 	beq.w	10246a2 <_svfiprintf_r+0xd52>
 1023dfe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1023e02:	468a      	mov	sl, r1
 1023e04:	2a09      	cmp	r2, #9
 1023e06:	bf84      	itt	hi
 1023e08:	2200      	movhi	r2, #0
 1023e0a:	9203      	strhi	r2, [sp, #12]
 1023e0c:	f63f adf6 	bhi.w	10239fc <_svfiprintf_r+0xac>
 1023e10:	2100      	movs	r1, #0
 1023e12:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1023e16:	200a      	movs	r0, #10
 1023e18:	fb00 2101 	mla	r1, r0, r1, r2
 1023e1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1023e20:	2a09      	cmp	r2, #9
 1023e22:	d9f6      	bls.n	1023e12 <_svfiprintf_r+0x4c2>
 1023e24:	9103      	str	r1, [sp, #12]
 1023e26:	e5e9      	b.n	10239fc <_svfiprintf_r+0xac>
 1023e28:	f89a 3000 	ldrb.w	r3, [sl]
 1023e2c:	f046 0604 	orr.w	r6, r6, #4
 1023e30:	e5e2      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023e32:	06b1      	lsls	r1, r6, #26
 1023e34:	f046 0310 	orr.w	r3, r6, #16
 1023e38:	f100 814a 	bmi.w	10240d0 <_svfiprintf_r+0x780>
 1023e3c:	9a07      	ldr	r2, [sp, #28]
 1023e3e:	3204      	adds	r2, #4
 1023e40:	9907      	ldr	r1, [sp, #28]
 1023e42:	2500      	movs	r5, #0
 1023e44:	9207      	str	r2, [sp, #28]
 1023e46:	680c      	ldr	r4, [r1, #0]
 1023e48:	e149      	b.n	10240de <_svfiprintf_r+0x78e>
 1023e4a:	f046 0710 	orr.w	r7, r6, #16
 1023e4e:	06b6      	lsls	r6, r6, #26
 1023e50:	f100 810d 	bmi.w	102406e <_svfiprintf_r+0x71e>
 1023e54:	9b07      	ldr	r3, [sp, #28]
 1023e56:	1d1a      	adds	r2, r3, #4
 1023e58:	9b07      	ldr	r3, [sp, #28]
 1023e5a:	9207      	str	r2, [sp, #28]
 1023e5c:	681c      	ldr	r4, [r3, #0]
 1023e5e:	17e5      	asrs	r5, r4, #31
 1023e60:	4622      	mov	r2, r4
 1023e62:	2a00      	cmp	r2, #0
 1023e64:	462b      	mov	r3, r5
 1023e66:	f173 0300 	sbcs.w	r3, r3, #0
 1023e6a:	f280 810f 	bge.w	102408c <_svfiprintf_r+0x73c>
 1023e6e:	4264      	negs	r4, r4
 1023e70:	9903      	ldr	r1, [sp, #12]
 1023e72:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1023e76:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1023e7a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1023e7e:	1c4a      	adds	r2, r1, #1
 1023e80:	f04f 0301 	mov.w	r3, #1
 1023e84:	f47f ae7e 	bne.w	1023b84 <_svfiprintf_r+0x234>
 1023e88:	2b01      	cmp	r3, #1
 1023e8a:	f000 8281 	beq.w	1024390 <_svfiprintf_r+0xa40>
 1023e8e:	2b02      	cmp	r3, #2
 1023e90:	bf18      	it	ne
 1023e92:	a946      	addne	r1, sp, #280	; 0x118
 1023e94:	f040 8128 	bne.w	10240e8 <_svfiprintf_r+0x798>
 1023e98:	ab46      	add	r3, sp, #280	; 0x118
 1023e9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 1023e9c:	461a      	mov	r2, r3
 1023e9e:	f004 010f 	and.w	r1, r4, #15
 1023ea2:	0923      	lsrs	r3, r4, #4
 1023ea4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 1023ea8:	0928      	lsrs	r0, r5, #4
 1023eaa:	5c71      	ldrb	r1, [r6, r1]
 1023eac:	461c      	mov	r4, r3
 1023eae:	4605      	mov	r5, r0
 1023eb0:	ea54 0305 	orrs.w	r3, r4, r5
 1023eb4:	f802 1d01 	strb.w	r1, [r2, #-1]!
 1023eb8:	d1f1      	bne.n	1023e9e <_svfiprintf_r+0x54e>
 1023eba:	ab46      	add	r3, sp, #280	; 0x118
 1023ebc:	920b      	str	r2, [sp, #44]	; 0x2c
 1023ebe:	1a9b      	subs	r3, r3, r2
 1023ec0:	463e      	mov	r6, r7
 1023ec2:	9305      	str	r3, [sp, #20]
 1023ec4:	e67c      	b.n	1023bc0 <_svfiprintf_r+0x270>
 1023ec6:	232b      	movs	r3, #43	; 0x2b
 1023ec8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1023ecc:	f89a 3000 	ldrb.w	r3, [sl]
 1023ed0:	e592      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1023ed2:	9b07      	ldr	r3, [sp, #28]
 1023ed4:	f647 0230 	movw	r2, #30768	; 0x7830
 1023ed8:	f24a 415c 	movw	r1, #42076	; 0xa45c
 1023edc:	f046 0702 	orr.w	r7, r6, #2
 1023ee0:	f2c0 1106 	movt	r1, #262	; 0x106
 1023ee4:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 1023ee8:	f853 4b04 	ldr.w	r4, [r3], #4
 1023eec:	2500      	movs	r5, #0
 1023eee:	910c      	str	r1, [sp, #48]	; 0x30
 1023ef0:	9307      	str	r3, [sp, #28]
 1023ef2:	2302      	movs	r3, #2
 1023ef4:	e63f      	b.n	1023b76 <_svfiprintf_r+0x226>
 1023ef6:	06b5      	lsls	r5, r6, #26
 1023ef8:	f100 80b8 	bmi.w	102406c <_svfiprintf_r+0x71c>
 1023efc:	9b07      	ldr	r3, [sp, #28]
 1023efe:	06f4      	lsls	r4, r6, #27
 1023f00:	f103 0204 	add.w	r2, r3, #4
 1023f04:	f100 83d9 	bmi.w	10246ba <_svfiprintf_r+0xd6a>
 1023f08:	9b07      	ldr	r3, [sp, #28]
 1023f0a:	0670      	lsls	r0, r6, #25
 1023f0c:	bf48      	it	mi
 1023f0e:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1023f12:	d404      	bmi.n	1023f1e <_svfiprintf_r+0x5ce>
 1023f14:	05b1      	lsls	r1, r6, #22
 1023f16:	f140 837a 	bpl.w	102460e <_svfiprintf_r+0xcbe>
 1023f1a:	f993 4000 	ldrsb.w	r4, [r3]
 1023f1e:	17e5      	asrs	r5, r4, #31
 1023f20:	9207      	str	r2, [sp, #28]
 1023f22:	4637      	mov	r7, r6
 1023f24:	4622      	mov	r2, r4
 1023f26:	462b      	mov	r3, r5
 1023f28:	e0ab      	b.n	1024082 <_svfiprintf_r+0x732>
 1023f2a:	06b4      	lsls	r4, r6, #26
 1023f2c:	f24a 12dc 	movw	r2, #41436	; 0xa1dc
 1023f30:	f2c0 1206 	movt	r2, #262	; 0x106
 1023f34:	920c      	str	r2, [sp, #48]	; 0x30
 1023f36:	f53f ae0b 	bmi.w	1023b50 <_svfiprintf_r+0x200>
 1023f3a:	9a07      	ldr	r2, [sp, #28]
 1023f3c:	06f0      	lsls	r0, r6, #27
 1023f3e:	f852 4b04 	ldr.w	r4, [r2], #4
 1023f42:	9207      	str	r2, [sp, #28]
 1023f44:	d40b      	bmi.n	1023f5e <_svfiprintf_r+0x60e>
 1023f46:	0671      	lsls	r1, r6, #25
 1023f48:	bf44      	itt	mi
 1023f4a:	b2a4      	uxthmi	r4, r4
 1023f4c:	2500      	movmi	r5, #0
 1023f4e:	f53f ae06 	bmi.w	1023b5e <_svfiprintf_r+0x20e>
 1023f52:	05b2      	lsls	r2, r6, #22
 1023f54:	bf44      	itt	mi
 1023f56:	b2e4      	uxtbmi	r4, r4
 1023f58:	2500      	movmi	r5, #0
 1023f5a:	f53f ae00 	bmi.w	1023b5e <_svfiprintf_r+0x20e>
 1023f5e:	2500      	movs	r5, #0
 1023f60:	ea54 0205 	orrs.w	r2, r4, r5
 1023f64:	f006 0201 	and.w	r2, r6, #1
 1023f68:	bf08      	it	eq
 1023f6a:	2200      	moveq	r2, #0
 1023f6c:	2a00      	cmp	r2, #0
 1023f6e:	f43f adff 	beq.w	1023b70 <_svfiprintf_r+0x220>
 1023f72:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 1023f76:	f046 0602 	orr.w	r6, r6, #2
 1023f7a:	2330      	movs	r3, #48	; 0x30
 1023f7c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 1023f80:	e5f6      	b.n	1023b70 <_svfiprintf_r+0x220>
 1023f82:	06b4      	lsls	r4, r6, #26
 1023f84:	f046 0710 	orr.w	r7, r6, #16
 1023f88:	f100 8098 	bmi.w	10240bc <_svfiprintf_r+0x76c>
 1023f8c:	9b07      	ldr	r3, [sp, #28]
 1023f8e:	1d1a      	adds	r2, r3, #4
 1023f90:	9b07      	ldr	r3, [sp, #28]
 1023f92:	2500      	movs	r5, #0
 1023f94:	9207      	str	r2, [sp, #28]
 1023f96:	681c      	ldr	r4, [r3, #0]
 1023f98:	2301      	movs	r3, #1
 1023f9a:	e5ec      	b.n	1023b76 <_svfiprintf_r+0x226>
 1023f9c:	9d07      	ldr	r5, [sp, #28]
 1023f9e:	2200      	movs	r2, #0
 1023fa0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1023fa4:	f855 1b04 	ldr.w	r1, [r5], #4
 1023fa8:	910b      	str	r1, [sp, #44]	; 0x2c
 1023faa:	2900      	cmp	r1, #0
 1023fac:	f000 82f1 	beq.w	1024592 <_svfiprintf_r+0xc42>
 1023fb0:	2b53      	cmp	r3, #83	; 0x53
 1023fb2:	f000 8231 	beq.w	1024418 <_svfiprintf_r+0xac8>
 1023fb6:	f016 0410 	ands.w	r4, r6, #16
 1023fba:	f040 822d 	bne.w	1024418 <_svfiprintf_r+0xac8>
 1023fbe:	9a03      	ldr	r2, [sp, #12]
 1023fc0:	1c53      	adds	r3, r2, #1
 1023fc2:	f000 8343 	beq.w	102464c <_svfiprintf_r+0xcfc>
 1023fc6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 1023fc8:	4621      	mov	r1, r4
 1023fca:	4638      	mov	r0, r7
 1023fcc:	f7fe fce0 	bl	1022990 <memchr>
 1023fd0:	9008      	str	r0, [sp, #32]
 1023fd2:	2800      	cmp	r0, #0
 1023fd4:	f000 8332 	beq.w	102463c <_svfiprintf_r+0xcec>
 1023fd8:	1bc3      	subs	r3, r0, r7
 1023fda:	4622      	mov	r2, r4
 1023fdc:	9305      	str	r3, [sp, #20]
 1023fde:	9403      	str	r4, [sp, #12]
 1023fe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1023fe4:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1023fe8:	9302      	str	r3, [sp, #8]
 1023fea:	e5f1      	b.n	1023bd0 <_svfiprintf_r+0x280>
 1023fec:	f89a 3000 	ldrb.w	r3, [sl]
 1023ff0:	2b6c      	cmp	r3, #108	; 0x6c
 1023ff2:	bf09      	itett	eq
 1023ff4:	f046 0620 	orreq.w	r6, r6, #32
 1023ff8:	f046 0610 	orrne.w	r6, r6, #16
 1023ffc:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1024000:	f10a 0a01 	addeq.w	sl, sl, #1
 1024004:	e4f8      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1024006:	f89a 3000 	ldrb.w	r3, [sl]
 102400a:	2b68      	cmp	r3, #104	; 0x68
 102400c:	bf09      	itett	eq
 102400e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 1024012:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1024016:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 102401a:	f10a 0a01 	addeq.w	sl, sl, #1
 102401e:	e4eb      	b.n	10239f8 <_svfiprintf_r+0xa8>
 1024020:	9a07      	ldr	r2, [sp, #28]
 1024022:	06b7      	lsls	r7, r6, #26
 1024024:	f102 0304 	add.w	r3, r2, #4
 1024028:	f100 81d2 	bmi.w	10243d0 <_svfiprintf_r+0xa80>
 102402c:	06f5      	lsls	r5, r6, #27
 102402e:	f100 825d 	bmi.w	10244ec <_svfiprintf_r+0xb9c>
 1024032:	0674      	lsls	r4, r6, #25
 1024034:	f100 82e4 	bmi.w	1024600 <_svfiprintf_r+0xcb0>
 1024038:	05b0      	lsls	r0, r6, #22
 102403a:	f140 8257 	bpl.w	10244ec <_svfiprintf_r+0xb9c>
 102403e:	9a07      	ldr	r2, [sp, #28]
 1024040:	9307      	str	r3, [sp, #28]
 1024042:	9b04      	ldr	r3, [sp, #16]
 1024044:	6812      	ldr	r2, [r2, #0]
 1024046:	7013      	strb	r3, [r2, #0]
 1024048:	e4a7      	b.n	102399a <_svfiprintf_r+0x4a>
 102404a:	2b00      	cmp	r3, #0
 102404c:	f43f ad5c 	beq.w	1023b08 <_svfiprintf_r+0x1b8>
 1024050:	2201      	movs	r2, #1
 1024052:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1024056:	9202      	str	r2, [sp, #8]
 1024058:	2300      	movs	r3, #0
 102405a:	9205      	str	r2, [sp, #20]
 102405c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1024060:	ab2d      	add	r3, sp, #180	; 0xb4
 1024062:	930b      	str	r3, [sp, #44]	; 0x2c
 1024064:	2300      	movs	r3, #0
 1024066:	9308      	str	r3, [sp, #32]
 1024068:	9303      	str	r3, [sp, #12]
 102406a:	e5b7      	b.n	1023bdc <_svfiprintf_r+0x28c>
 102406c:	4637      	mov	r7, r6
 102406e:	9d07      	ldr	r5, [sp, #28]
 1024070:	3507      	adds	r5, #7
 1024072:	f025 0307 	bic.w	r3, r5, #7
 1024076:	4619      	mov	r1, r3
 1024078:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 102407c:	4614      	mov	r4, r2
 102407e:	461d      	mov	r5, r3
 1024080:	9107      	str	r1, [sp, #28]
 1024082:	2a00      	cmp	r2, #0
 1024084:	f173 0300 	sbcs.w	r3, r3, #0
 1024088:	f6ff aef1 	blt.w	1023e6e <_svfiprintf_r+0x51e>
 102408c:	9b03      	ldr	r3, [sp, #12]
 102408e:	3301      	adds	r3, #1
 1024090:	f000 817e 	beq.w	1024390 <_svfiprintf_r+0xa40>
 1024094:	ea54 0305 	orrs.w	r3, r4, r5
 1024098:	9a03      	ldr	r2, [sp, #12]
 102409a:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 102409e:	bf14      	ite	ne
 10240a0:	2301      	movne	r3, #1
 10240a2:	2300      	moveq	r3, #0
 10240a4:	2a00      	cmp	r2, #0
 10240a6:	bf18      	it	ne
 10240a8:	2301      	movne	r3, #1
 10240aa:	2b00      	cmp	r3, #0
 10240ac:	f040 816f 	bne.w	102438e <_svfiprintf_r+0xa3e>
 10240b0:	aa46      	add	r2, sp, #280	; 0x118
 10240b2:	9303      	str	r3, [sp, #12]
 10240b4:	920b      	str	r2, [sp, #44]	; 0x2c
 10240b6:	9305      	str	r3, [sp, #20]
 10240b8:	e582      	b.n	1023bc0 <_svfiprintf_r+0x270>
 10240ba:	4637      	mov	r7, r6
 10240bc:	9d07      	ldr	r5, [sp, #28]
 10240be:	2301      	movs	r3, #1
 10240c0:	3507      	adds	r5, #7
 10240c2:	f025 0207 	bic.w	r2, r5, #7
 10240c6:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10240ca:	9207      	str	r2, [sp, #28]
 10240cc:	e553      	b.n	1023b76 <_svfiprintf_r+0x226>
 10240ce:	4633      	mov	r3, r6
 10240d0:	9d07      	ldr	r5, [sp, #28]
 10240d2:	3507      	adds	r5, #7
 10240d4:	f025 0207 	bic.w	r2, r5, #7
 10240d8:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10240dc:	9207      	str	r2, [sp, #28]
 10240de:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
 10240e2:	2300      	movs	r3, #0
 10240e4:	e547      	b.n	1023b76 <_svfiprintf_r+0x226>
 10240e6:	4611      	mov	r1, r2
 10240e8:	08e2      	lsrs	r2, r4, #3
 10240ea:	08e8      	lsrs	r0, r5, #3
 10240ec:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 10240f0:	f004 0307 	and.w	r3, r4, #7
 10240f4:	4605      	mov	r5, r0
 10240f6:	3330      	adds	r3, #48	; 0x30
 10240f8:	4614      	mov	r4, r2
 10240fa:	ea54 0005 	orrs.w	r0, r4, r5
 10240fe:	f801 3c01 	strb.w	r3, [r1, #-1]
 1024102:	f101 32ff 	add.w	r2, r1, #4294967295
 1024106:	d1ee      	bne.n	10240e6 <_svfiprintf_r+0x796>
 1024108:	2b30      	cmp	r3, #48	; 0x30
 102410a:	bf0c      	ite	eq
 102410c:	2300      	moveq	r3, #0
 102410e:	f007 0301 	andne.w	r3, r7, #1
 1024112:	920b      	str	r2, [sp, #44]	; 0x2c
 1024114:	2b00      	cmp	r3, #0
 1024116:	f040 81cd 	bne.w	10244b4 <_svfiprintf_r+0xb64>
 102411a:	ab46      	add	r3, sp, #280	; 0x118
 102411c:	463e      	mov	r6, r7
 102411e:	1a9b      	subs	r3, r3, r2
 1024120:	9305      	str	r3, [sp, #20]
 1024122:	e54d      	b.n	1023bc0 <_svfiprintf_r+0x270>
 1024124:	9b06      	ldr	r3, [sp, #24]
 1024126:	9c02      	ldr	r4, [sp, #8]
 1024128:	1b1c      	subs	r4, r3, r4
 102412a:	2c00      	cmp	r4, #0
 102412c:	f77f ad9b 	ble.w	1023c66 <_svfiprintf_r+0x316>
 1024130:	2c10      	cmp	r4, #16
 1024132:	4db8      	ldr	r5, [pc, #736]	; (1024414 <_svfiprintf_r+0xac4>)
 1024134:	f340 82aa 	ble.w	102468c <_svfiprintf_r+0xd3c>
 1024138:	960a      	str	r6, [sp, #40]	; 0x28
 102413a:	2710      	movs	r7, #16
 102413c:	462e      	mov	r6, r5
 102413e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1024140:	e002      	b.n	1024148 <_svfiprintf_r+0x7f8>
 1024142:	3c10      	subs	r4, #16
 1024144:	2c10      	cmp	r4, #16
 1024146:	dd17      	ble.n	1024178 <_svfiprintf_r+0x828>
 1024148:	3101      	adds	r1, #1
 102414a:	3210      	adds	r2, #16
 102414c:	2907      	cmp	r1, #7
 102414e:	e9c8 6700 	strd	r6, r7, [r8]
 1024152:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1024156:	f108 0808 	add.w	r8, r8, #8
 102415a:	ddf2      	ble.n	1024142 <_svfiprintf_r+0x7f2>
 102415c:	aa1a      	add	r2, sp, #104	; 0x68
 102415e:	4629      	mov	r1, r5
 1024160:	4658      	mov	r0, fp
 1024162:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1024166:	f7ff fb77 	bl	1023858 <__ssprint_r>
 102416a:	2800      	cmp	r0, #0
 102416c:	d165      	bne.n	102423a <_svfiprintf_r+0x8ea>
 102416e:	3c10      	subs	r4, #16
 1024170:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1024174:	2c10      	cmp	r4, #16
 1024176:	dce7      	bgt.n	1024148 <_svfiprintf_r+0x7f8>
 1024178:	4635      	mov	r5, r6
 102417a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 102417c:	3101      	adds	r1, #1
 102417e:	f108 0308 	add.w	r3, r8, #8
 1024182:	2907      	cmp	r1, #7
 1024184:	4422      	add	r2, r4
 1024186:	f8c8 5000 	str.w	r5, [r8]
 102418a:	921c      	str	r2, [sp, #112]	; 0x70
 102418c:	f8c8 4004 	str.w	r4, [r8, #4]
 1024190:	911b      	str	r1, [sp, #108]	; 0x6c
 1024192:	f300 819b 	bgt.w	10244cc <_svfiprintf_r+0xb7c>
 1024196:	f103 0708 	add.w	r7, r3, #8
 102419a:	4698      	mov	r8, r3
 102419c:	9c05      	ldr	r4, [sp, #20]
 102419e:	1c48      	adds	r0, r1, #1
 10241a0:	9b03      	ldr	r3, [sp, #12]
 10241a2:	1b1c      	subs	r4, r3, r4
 10241a4:	2c00      	cmp	r4, #0
 10241a6:	f77f ad64 	ble.w	1023c72 <_svfiprintf_r+0x322>
 10241aa:	2c10      	cmp	r4, #16
 10241ac:	4d99      	ldr	r5, [pc, #612]	; (1024414 <_svfiprintf_r+0xac4>)
 10241ae:	f340 8210 	ble.w	10245d2 <_svfiprintf_r+0xc82>
 10241b2:	9603      	str	r6, [sp, #12]
 10241b4:	2710      	movs	r7, #16
 10241b6:	462e      	mov	r6, r5
 10241b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 10241ba:	e002      	b.n	10241c2 <_svfiprintf_r+0x872>
 10241bc:	3c10      	subs	r4, #16
 10241be:	2c10      	cmp	r4, #16
 10241c0:	dd16      	ble.n	10241f0 <_svfiprintf_r+0x8a0>
 10241c2:	3101      	adds	r1, #1
 10241c4:	3210      	adds	r2, #16
 10241c6:	2907      	cmp	r1, #7
 10241c8:	e9c8 6700 	strd	r6, r7, [r8]
 10241cc:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 10241d0:	f108 0808 	add.w	r8, r8, #8
 10241d4:	ddf2      	ble.n	10241bc <_svfiprintf_r+0x86c>
 10241d6:	aa1a      	add	r2, sp, #104	; 0x68
 10241d8:	4629      	mov	r1, r5
 10241da:	4658      	mov	r0, fp
 10241dc:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10241e0:	f7ff fb3a 	bl	1023858 <__ssprint_r>
 10241e4:	bb48      	cbnz	r0, 102423a <_svfiprintf_r+0x8ea>
 10241e6:	3c10      	subs	r4, #16
 10241e8:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 10241ec:	2c10      	cmp	r4, #16
 10241ee:	dce8      	bgt.n	10241c2 <_svfiprintf_r+0x872>
 10241f0:	4635      	mov	r5, r6
 10241f2:	9e03      	ldr	r6, [sp, #12]
 10241f4:	1c48      	adds	r0, r1, #1
 10241f6:	f108 0308 	add.w	r3, r8, #8
 10241fa:	2807      	cmp	r0, #7
 10241fc:	4422      	add	r2, r4
 10241fe:	f8c8 5000 	str.w	r5, [r8]
 1024202:	921c      	str	r2, [sp, #112]	; 0x70
 1024204:	f8c8 4004 	str.w	r4, [r8, #4]
 1024208:	901b      	str	r0, [sp, #108]	; 0x6c
 102420a:	f300 80d0 	bgt.w	10243ae <_svfiprintf_r+0xa5e>
 102420e:	3001      	adds	r0, #1
 1024210:	f103 0708 	add.w	r7, r3, #8
 1024214:	4698      	mov	r8, r3
 1024216:	e52c      	b.n	1023c72 <_svfiprintf_r+0x322>
 1024218:	aa1a      	add	r2, sp, #104	; 0x68
 102421a:	9909      	ldr	r1, [sp, #36]	; 0x24
 102421c:	4658      	mov	r0, fp
 102421e:	f7ff fb1b 	bl	1023858 <__ssprint_r>
 1024222:	b950      	cbnz	r0, 102423a <_svfiprintf_r+0x8ea>
 1024224:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1024226:	af1d      	add	r7, sp, #116	; 0x74
 1024228:	e52f      	b.n	1023c8a <_svfiprintf_r+0x33a>
 102422a:	aa1a      	add	r2, sp, #104	; 0x68
 102422c:	9909      	ldr	r1, [sp, #36]	; 0x24
 102422e:	4658      	mov	r0, fp
 1024230:	f7ff fb12 	bl	1023858 <__ssprint_r>
 1024234:	2800      	cmp	r0, #0
 1024236:	f43f ad3b 	beq.w	1023cb0 <_svfiprintf_r+0x360>
 102423a:	9b08      	ldr	r3, [sp, #32]
 102423c:	2b00      	cmp	r3, #0
 102423e:	f43f ac67 	beq.w	1023b10 <_svfiprintf_r+0x1c0>
 1024242:	9908      	ldr	r1, [sp, #32]
 1024244:	4658      	mov	r0, fp
 1024246:	f7fd ffdb 	bl	1022200 <_free_r>
 102424a:	e461      	b.n	1023b10 <_svfiprintf_r+0x1c0>
 102424c:	2c10      	cmp	r4, #16
 102424e:	f246 6558 	movw	r5, #26200	; 0x6658
 1024252:	f2c0 1506 	movt	r5, #262	; 0x106
 1024256:	dd23      	ble.n	10242a0 <_svfiprintf_r+0x950>
 1024258:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 102425c:	2710      	movs	r7, #16
 102425e:	462e      	mov	r6, r5
 1024260:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1024262:	e002      	b.n	102426a <_svfiprintf_r+0x91a>
 1024264:	3c10      	subs	r4, #16
 1024266:	2c10      	cmp	r4, #16
 1024268:	dd17      	ble.n	102429a <_svfiprintf_r+0x94a>
 102426a:	3101      	adds	r1, #1
 102426c:	3210      	adds	r2, #16
 102426e:	2907      	cmp	r1, #7
 1024270:	e9c8 6700 	strd	r6, r7, [r8]
 1024274:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1024278:	f108 0808 	add.w	r8, r8, #8
 102427c:	ddf2      	ble.n	1024264 <_svfiprintf_r+0x914>
 102427e:	aa1a      	add	r2, sp, #104	; 0x68
 1024280:	4629      	mov	r1, r5
 1024282:	4658      	mov	r0, fp
 1024284:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1024288:	f7ff fae6 	bl	1023858 <__ssprint_r>
 102428c:	2800      	cmp	r0, #0
 102428e:	d1d4      	bne.n	102423a <_svfiprintf_r+0x8ea>
 1024290:	3c10      	subs	r4, #16
 1024292:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1024296:	2c10      	cmp	r4, #16
 1024298:	dce7      	bgt.n	102426a <_svfiprintf_r+0x91a>
 102429a:	4635      	mov	r5, r6
 102429c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 102429e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 10242a0:	3101      	adds	r1, #1
 10242a2:	4422      	add	r2, r4
 10242a4:	2907      	cmp	r1, #7
 10242a6:	e9c8 5400 	strd	r5, r4, [r8]
 10242aa:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 10242ae:	bfd8      	it	le
 10242b0:	f108 0808 	addle.w	r8, r8, #8
 10242b4:	f77f aca4 	ble.w	1023c00 <_svfiprintf_r+0x2b0>
 10242b8:	aa1a      	add	r2, sp, #104	; 0x68
 10242ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 10242bc:	4658      	mov	r0, fp
 10242be:	9310      	str	r3, [sp, #64]	; 0x40
 10242c0:	f7ff faca 	bl	1023858 <__ssprint_r>
 10242c4:	2800      	cmp	r0, #0
 10242c6:	d1b8      	bne.n	102423a <_svfiprintf_r+0x8ea>
 10242c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 10242ca:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10242ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
 10242d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10242d2:	e495      	b.n	1023c00 <_svfiprintf_r+0x2b0>
 10242d4:	aa1a      	add	r2, sp, #104	; 0x68
 10242d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 10242d8:	4658      	mov	r0, fp
 10242da:	9310      	str	r3, [sp, #64]	; 0x40
 10242dc:	f7ff fabc 	bl	1023858 <__ssprint_r>
 10242e0:	2800      	cmp	r0, #0
 10242e2:	d1aa      	bne.n	102423a <_svfiprintf_r+0x8ea>
 10242e4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 10242e6:	af1f      	add	r7, sp, #124	; 0x7c
 10242e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 10242ea:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10242ee:	1c48      	adds	r0, r1, #1
 10242f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10242f2:	e4a1      	b.n	1023c38 <_svfiprintf_r+0x2e8>
 10242f4:	aa1a      	add	r2, sp, #104	; 0x68
 10242f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 10242f8:	4658      	mov	r0, fp
 10242fa:	f7ff faad 	bl	1023858 <__ssprint_r>
 10242fe:	2800      	cmp	r0, #0
 1024300:	d19b      	bne.n	102423a <_svfiprintf_r+0x8ea>
 1024302:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1024304:	af1f      	add	r7, sp, #124	; 0x7c
 1024306:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1024308:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 102430c:	1c48      	adds	r0, r1, #1
 102430e:	e4a6      	b.n	1023c5e <_svfiprintf_r+0x30e>
 1024310:	2c10      	cmp	r4, #16
 1024312:	f246 6558 	movw	r5, #26200	; 0x6658
 1024316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 1024318:	f2c0 1506 	movt	r5, #262	; 0x106
 102431c:	bfc4      	itt	gt
 102431e:	2610      	movgt	r6, #16
 1024320:	f8dd 8024 	ldrgt.w	r8, [sp, #36]	; 0x24
 1024324:	dc03      	bgt.n	102432e <_svfiprintf_r+0x9de>
 1024326:	e01a      	b.n	102435e <_svfiprintf_r+0xa0e>
 1024328:	3c10      	subs	r4, #16
 102432a:	2c10      	cmp	r4, #16
 102432c:	dd17      	ble.n	102435e <_svfiprintf_r+0xa0e>
 102432e:	3301      	adds	r3, #1
 1024330:	3210      	adds	r2, #16
 1024332:	2b07      	cmp	r3, #7
 1024334:	e9c7 5600 	strd	r5, r6, [r7]
 1024338:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 102433c:	f107 0708 	add.w	r7, r7, #8
 1024340:	ddf2      	ble.n	1024328 <_svfiprintf_r+0x9d8>
 1024342:	aa1a      	add	r2, sp, #104	; 0x68
 1024344:	4641      	mov	r1, r8
 1024346:	4658      	mov	r0, fp
 1024348:	af1d      	add	r7, sp, #116	; 0x74
 102434a:	f7ff fa85 	bl	1023858 <__ssprint_r>
 102434e:	2800      	cmp	r0, #0
 1024350:	f47f af73 	bne.w	102423a <_svfiprintf_r+0x8ea>
 1024354:	3c10      	subs	r4, #16
 1024356:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 102435a:	2c10      	cmp	r4, #16
 102435c:	dce7      	bgt.n	102432e <_svfiprintf_r+0x9de>
 102435e:	3301      	adds	r3, #1
 1024360:	4422      	add	r2, r4
 1024362:	2b07      	cmp	r3, #7
 1024364:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1024368:	e9c7 5400 	strd	r5, r4, [r7]
 102436c:	f77f ac95 	ble.w	1023c9a <_svfiprintf_r+0x34a>
 1024370:	aa1a      	add	r2, sp, #104	; 0x68
 1024372:	9909      	ldr	r1, [sp, #36]	; 0x24
 1024374:	4658      	mov	r0, fp
 1024376:	f7ff fa6f 	bl	1023858 <__ssprint_r>
 102437a:	2800      	cmp	r0, #0
 102437c:	f47f af5d 	bne.w	102423a <_svfiprintf_r+0x8ea>
 1024380:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1024382:	e48a      	b.n	1023c9a <_svfiprintf_r+0x34a>
 1024384:	ab46      	add	r3, sp, #280	; 0x118
 1024386:	9203      	str	r2, [sp, #12]
 1024388:	930b      	str	r3, [sp, #44]	; 0x2c
 102438a:	9205      	str	r2, [sp, #20]
 102438c:	e418      	b.n	1023bc0 <_svfiprintf_r+0x270>
 102438e:	4637      	mov	r7, r6
 1024390:	2d00      	cmp	r5, #0
 1024392:	bf08      	it	eq
 1024394:	2c0a      	cmpeq	r4, #10
 1024396:	f080 80b0 	bcs.w	10244fa <_svfiprintf_r+0xbaa>
 102439a:	2301      	movs	r3, #1
 102439c:	3430      	adds	r4, #48	; 0x30
 102439e:	9305      	str	r3, [sp, #20]
 10243a0:	463e      	mov	r6, r7
 10243a2:	f20d 1317 	addw	r3, sp, #279	; 0x117
 10243a6:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 10243aa:	930b      	str	r3, [sp, #44]	; 0x2c
 10243ac:	e408      	b.n	1023bc0 <_svfiprintf_r+0x270>
 10243ae:	aa1a      	add	r2, sp, #104	; 0x68
 10243b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 10243b2:	4658      	mov	r0, fp
 10243b4:	f7ff fa50 	bl	1023858 <__ssprint_r>
 10243b8:	2800      	cmp	r0, #0
 10243ba:	f47f af3e 	bne.w	102423a <_svfiprintf_r+0x8ea>
 10243be:	981b      	ldr	r0, [sp, #108]	; 0x6c
 10243c0:	af1f      	add	r7, sp, #124	; 0x7c
 10243c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 10243c4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10243c8:	3001      	adds	r0, #1
 10243ca:	e452      	b.n	1023c72 <_svfiprintf_r+0x322>
 10243cc:	4637      	mov	r7, r6
 10243ce:	e55b      	b.n	1023e88 <_svfiprintf_r+0x538>
 10243d0:	9904      	ldr	r1, [sp, #16]
 10243d2:	6812      	ldr	r2, [r2, #0]
 10243d4:	9307      	str	r3, [sp, #28]
 10243d6:	17cd      	asrs	r5, r1, #31
 10243d8:	4608      	mov	r0, r1
 10243da:	4629      	mov	r1, r5
 10243dc:	e9c2 0100 	strd	r0, r1, [r2]
 10243e0:	f7ff badb 	b.w	102399a <_svfiprintf_r+0x4a>
 10243e4:	9b07      	ldr	r3, [sp, #28]
 10243e6:	2201      	movs	r2, #1
 10243e8:	ad2d      	add	r5, sp, #180	; 0xb4
 10243ea:	9202      	str	r2, [sp, #8]
 10243ec:	9205      	str	r2, [sp, #20]
 10243ee:	681b      	ldr	r3, [r3, #0]
 10243f0:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 10243f4:	e492      	b.n	1023d1c <_svfiprintf_r+0x3cc>
 10243f6:	2140      	movs	r1, #64	; 0x40
 10243f8:	4658      	mov	r0, fp
 10243fa:	f7f6 fded 	bl	101afd8 <_malloc_r>
 10243fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1024400:	6018      	str	r0, [r3, #0]
 1024402:	6118      	str	r0, [r3, #16]
 1024404:	2800      	cmp	r0, #0
 1024406:	f000 8160 	beq.w	10246ca <_svfiprintf_r+0xd7a>
 102440a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102440c:	2340      	movs	r3, #64	; 0x40
 102440e:	6153      	str	r3, [r2, #20]
 1024410:	f7ff bab2 	b.w	1023978 <_svfiprintf_r+0x28>
 1024414:	01066668 	.word	0x01066668
 1024418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102441a:	2208      	movs	r2, #8
 102441c:	2100      	movs	r1, #0
 102441e:	a818      	add	r0, sp, #96	; 0x60
 1024420:	9315      	str	r3, [sp, #84]	; 0x54
 1024422:	f7f7 fe45 	bl	101c0b0 <memset>
 1024426:	9f03      	ldr	r7, [sp, #12]
 1024428:	1c7b      	adds	r3, r7, #1
 102442a:	f000 80d4 	beq.w	10245d6 <_svfiprintf_r+0xc86>
 102442e:	2400      	movs	r4, #0
 1024430:	9602      	str	r6, [sp, #8]
 1024432:	9503      	str	r5, [sp, #12]
 1024434:	4626      	mov	r6, r4
 1024436:	e009      	b.n	102444c <_svfiprintf_r+0xafc>
 1024438:	f7fc fb20 	bl	1020a7c <_wcrtomb_r>
 102443c:	1833      	adds	r3, r6, r0
 102443e:	3001      	adds	r0, #1
 1024440:	f000 8127 	beq.w	1024692 <_svfiprintf_r+0xd42>
 1024444:	42bb      	cmp	r3, r7
 1024446:	dc0a      	bgt.n	102445e <_svfiprintf_r+0xb0e>
 1024448:	461e      	mov	r6, r3
 102444a:	d008      	beq.n	102445e <_svfiprintf_r+0xb0e>
 102444c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 102444e:	ab18      	add	r3, sp, #96	; 0x60
 1024450:	a92d      	add	r1, sp, #180	; 0xb4
 1024452:	4658      	mov	r0, fp
 1024454:	5915      	ldr	r5, [r2, r4]
 1024456:	3404      	adds	r4, #4
 1024458:	462a      	mov	r2, r5
 102445a:	2d00      	cmp	r5, #0
 102445c:	d1ec      	bne.n	1024438 <_svfiprintf_r+0xae8>
 102445e:	9605      	str	r6, [sp, #20]
 1024460:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 1024464:	9b05      	ldr	r3, [sp, #20]
 1024466:	2b00      	cmp	r3, #0
 1024468:	f000 80c3 	beq.w	10245f2 <_svfiprintf_r+0xca2>
 102446c:	2b63      	cmp	r3, #99	; 0x63
 102446e:	f300 80dc 	bgt.w	102462a <_svfiprintf_r+0xcda>
 1024472:	2300      	movs	r3, #0
 1024474:	9308      	str	r3, [sp, #32]
 1024476:	ab2d      	add	r3, sp, #180	; 0xb4
 1024478:	930b      	str	r3, [sp, #44]	; 0x2c
 102447a:	2208      	movs	r2, #8
 102447c:	2100      	movs	r1, #0
 102447e:	a818      	add	r0, sp, #96	; 0x60
 1024480:	f7f7 fe16 	bl	101c0b0 <memset>
 1024484:	9c05      	ldr	r4, [sp, #20]
 1024486:	ab18      	add	r3, sp, #96	; 0x60
 1024488:	aa15      	add	r2, sp, #84	; 0x54
 102448a:	9300      	str	r3, [sp, #0]
 102448c:	4658      	mov	r0, fp
 102448e:	4623      	mov	r3, r4
 1024490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1024492:	f7fc fb49 	bl	1020b28 <_wcsrtombs_r>
 1024496:	4284      	cmp	r4, r0
 1024498:	f040 811f 	bne.w	10246da <_svfiprintf_r+0xd8a>
 102449c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102449e:	2400      	movs	r4, #0
 10244a0:	9507      	str	r5, [sp, #28]
 10244a2:	9403      	str	r4, [sp, #12]
 10244a4:	4619      	mov	r1, r3
 10244a6:	9b05      	ldr	r3, [sp, #20]
 10244a8:	54cc      	strb	r4, [r1, r3]
 10244aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10244ae:	9302      	str	r3, [sp, #8]
 10244b0:	f7ff bb8e 	b.w	1023bd0 <_svfiprintf_r+0x280>
 10244b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 10244b6:	3902      	subs	r1, #2
 10244b8:	2330      	movs	r3, #48	; 0x30
 10244ba:	463e      	mov	r6, r7
 10244bc:	910b      	str	r1, [sp, #44]	; 0x2c
 10244be:	f802 3c01 	strb.w	r3, [r2, #-1]
 10244c2:	ab46      	add	r3, sp, #280	; 0x118
 10244c4:	1a5b      	subs	r3, r3, r1
 10244c6:	9305      	str	r3, [sp, #20]
 10244c8:	f7ff bb7a 	b.w	1023bc0 <_svfiprintf_r+0x270>
 10244cc:	aa1a      	add	r2, sp, #104	; 0x68
 10244ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 10244d0:	4658      	mov	r0, fp
 10244d2:	f7ff f9c1 	bl	1023858 <__ssprint_r>
 10244d6:	2800      	cmp	r0, #0
 10244d8:	f47f aeaf 	bne.w	102423a <_svfiprintf_r+0x8ea>
 10244dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 10244de:	af1f      	add	r7, sp, #124	; 0x7c
 10244e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 10244e2:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10244e6:	1c48      	adds	r0, r1, #1
 10244e8:	f7ff bbbd 	b.w	1023c66 <_svfiprintf_r+0x316>
 10244ec:	9a07      	ldr	r2, [sp, #28]
 10244ee:	6812      	ldr	r2, [r2, #0]
 10244f0:	9307      	str	r3, [sp, #28]
 10244f2:	9b04      	ldr	r3, [sp, #16]
 10244f4:	6013      	str	r3, [r2, #0]
 10244f6:	f7ff ba50 	b.w	102399a <_svfiprintf_r+0x4a>
 10244fa:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 10244fe:	2200      	movs	r2, #0
 1024500:	9702      	str	r7, [sp, #8]
 1024502:	ae46      	add	r6, sp, #280	; 0x118
 1024504:	f8cd a020 	str.w	sl, [sp, #32]
 1024508:	4617      	mov	r7, r2
 102450a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 102450e:	4699      	mov	r9, r3
 1024510:	f8cd 8014 	str.w	r8, [sp, #20]
 1024514:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 1024518:	e008      	b.n	102452c <_svfiprintf_r+0xbdc>
 102451a:	f7f5 fe55 	bl	101a1c8 <__aeabi_uldivmod>
 102451e:	2d00      	cmp	r5, #0
 1024520:	bf08      	it	eq
 1024522:	2c0a      	cmpeq	r4, #10
 1024524:	d328      	bcc.n	1024578 <_svfiprintf_r+0xc28>
 1024526:	4604      	mov	r4, r0
 1024528:	4646      	mov	r6, r8
 102452a:	460d      	mov	r5, r1
 102452c:	220a      	movs	r2, #10
 102452e:	2300      	movs	r3, #0
 1024530:	4620      	mov	r0, r4
 1024532:	4629      	mov	r1, r5
 1024534:	f7f5 fe48 	bl	101a1c8 <__aeabi_uldivmod>
 1024538:	3701      	adds	r7, #1
 102453a:	4620      	mov	r0, r4
 102453c:	4629      	mov	r1, r5
 102453e:	f106 38ff 	add.w	r8, r6, #4294967295
 1024542:	2300      	movs	r3, #0
 1024544:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1024548:	220a      	movs	r2, #10
 102454a:	f806 cc01 	strb.w	ip, [r6, #-1]
 102454e:	f1b9 0f00 	cmp.w	r9, #0
 1024552:	d0e2      	beq.n	102451a <_svfiprintf_r+0xbca>
 1024554:	f89a 6000 	ldrb.w	r6, [sl]
 1024558:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 102455c:	bf18      	it	ne
 102455e:	f04f 0c01 	movne.w	ip, #1
 1024562:	42be      	cmp	r6, r7
 1024564:	bf18      	it	ne
 1024566:	f04f 0c00 	movne.w	ip, #0
 102456a:	f1bc 0f00 	cmp.w	ip, #0
 102456e:	d0d4      	beq.n	102451a <_svfiprintf_r+0xbca>
 1024570:	429d      	cmp	r5, r3
 1024572:	bf08      	it	eq
 1024574:	4294      	cmpeq	r4, r2
 1024576:	d275      	bcs.n	1024664 <_svfiprintf_r+0xd14>
 1024578:	4642      	mov	r2, r8
 102457a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 102457e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 1024582:	9f02      	ldr	r7, [sp, #8]
 1024584:	f8dd 8014 	ldr.w	r8, [sp, #20]
 1024588:	f8dd a020 	ldr.w	sl, [sp, #32]
 102458c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1024590:	e5c3      	b.n	102411a <_svfiprintf_r+0x7ca>
 1024592:	9b03      	ldr	r3, [sp, #12]
 1024594:	f24a 4270 	movw	r2, #42096	; 0xa470
 1024598:	9507      	str	r5, [sp, #28]
 102459a:	f2c0 1206 	movt	r2, #262	; 0x106
 102459e:	2b06      	cmp	r3, #6
 10245a0:	920b      	str	r2, [sp, #44]	; 0x2c
 10245a2:	bf28      	it	cs
 10245a4:	2306      	movcs	r3, #6
 10245a6:	9305      	str	r3, [sp, #20]
 10245a8:	9302      	str	r3, [sp, #8]
 10245aa:	e55b      	b.n	1024064 <_svfiprintf_r+0x714>
 10245ac:	05b5      	lsls	r5, r6, #22
 10245ae:	bf45      	ittet	mi
 10245b0:	9207      	strmi	r2, [sp, #28]
 10245b2:	b2e4      	uxtbmi	r4, r4
 10245b4:	9207      	strpl	r2, [sp, #28]
 10245b6:	4633      	movmi	r3, r6
 10245b8:	bf4e      	itee	mi
 10245ba:	2500      	movmi	r5, #0
 10245bc:	2500      	movpl	r5, #0
 10245be:	4633      	movpl	r3, r6
 10245c0:	e58d      	b.n	10240de <_svfiprintf_r+0x78e>
 10245c2:	05b5      	lsls	r5, r6, #22
 10245c4:	f04f 0301 	mov.w	r3, #1
 10245c8:	bf48      	it	mi
 10245ca:	b2e4      	uxtbmi	r4, r4
 10245cc:	2500      	movs	r5, #0
 10245ce:	f7ff bad2 	b.w	1023b76 <_svfiprintf_r+0x226>
 10245d2:	463b      	mov	r3, r7
 10245d4:	e611      	b.n	10241fa <_svfiprintf_r+0x8aa>
 10245d6:	2300      	movs	r3, #0
 10245d8:	aa18      	add	r2, sp, #96	; 0x60
 10245da:	4619      	mov	r1, r3
 10245dc:	9200      	str	r2, [sp, #0]
 10245de:	4658      	mov	r0, fp
 10245e0:	aa15      	add	r2, sp, #84	; 0x54
 10245e2:	f7fc faa1 	bl	1020b28 <_wcsrtombs_r>
 10245e6:	1c43      	adds	r3, r0, #1
 10245e8:	9005      	str	r0, [sp, #20]
 10245ea:	d052      	beq.n	1024692 <_svfiprintf_r+0xd42>
 10245ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10245ee:	9315      	str	r3, [sp, #84]	; 0x54
 10245f0:	e738      	b.n	1024464 <_svfiprintf_r+0xb14>
 10245f2:	9b05      	ldr	r3, [sp, #20]
 10245f4:	9507      	str	r5, [sp, #28]
 10245f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 10245fa:	9308      	str	r3, [sp, #32]
 10245fc:	f7ff bae8 	b.w	1023bd0 <_svfiprintf_r+0x280>
 1024600:	9a07      	ldr	r2, [sp, #28]
 1024602:	9307      	str	r3, [sp, #28]
 1024604:	9b04      	ldr	r3, [sp, #16]
 1024606:	6812      	ldr	r2, [r2, #0]
 1024608:	8013      	strh	r3, [r2, #0]
 102460a:	f7ff b9c6 	b.w	102399a <_svfiprintf_r+0x4a>
 102460e:	681c      	ldr	r4, [r3, #0]
 1024610:	4637      	mov	r7, r6
 1024612:	9207      	str	r2, [sp, #28]
 1024614:	17e5      	asrs	r5, r4, #31
 1024616:	4622      	mov	r2, r4
 1024618:	462b      	mov	r3, r5
 102461a:	e532      	b.n	1024082 <_svfiprintf_r+0x732>
 102461c:	4658      	mov	r0, fp
 102461e:	aa1a      	add	r2, sp, #104	; 0x68
 1024620:	9909      	ldr	r1, [sp, #36]	; 0x24
 1024622:	f7ff f919 	bl	1023858 <__ssprint_r>
 1024626:	f7ff ba73 	b.w	1023b10 <_svfiprintf_r+0x1c0>
 102462a:	1c59      	adds	r1, r3, #1
 102462c:	4658      	mov	r0, fp
 102462e:	f7f6 fcd3 	bl	101afd8 <_malloc_r>
 1024632:	900b      	str	r0, [sp, #44]	; 0x2c
 1024634:	b368      	cbz	r0, 1024692 <_svfiprintf_r+0xd42>
 1024636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1024638:	9308      	str	r3, [sp, #32]
 102463a:	e71e      	b.n	102447a <_svfiprintf_r+0xb2a>
 102463c:	9b03      	ldr	r3, [sp, #12]
 102463e:	9507      	str	r5, [sp, #28]
 1024640:	9302      	str	r3, [sp, #8]
 1024642:	9305      	str	r3, [sp, #20]
 1024644:	9b08      	ldr	r3, [sp, #32]
 1024646:	9303      	str	r3, [sp, #12]
 1024648:	f7ff bac2 	b.w	1023bd0 <_svfiprintf_r+0x280>
 102464c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 102464e:	9403      	str	r4, [sp, #12]
 1024650:	f7f8 fc16 	bl	101ce80 <strlen>
 1024654:	9507      	str	r5, [sp, #28]
 1024656:	9408      	str	r4, [sp, #32]
 1024658:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 102465c:	9005      	str	r0, [sp, #20]
 102465e:	9302      	str	r3, [sp, #8]
 1024660:	f7ff bab6 	b.w	1023bd0 <_svfiprintf_r+0x280>
 1024664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 1024666:	990f      	ldr	r1, [sp, #60]	; 0x3c
 1024668:	eba8 0802 	sub.w	r8, r8, r2
 102466c:	4640      	mov	r0, r8
 102466e:	f7f8 fcf5 	bl	101d05c <strncpy>
 1024672:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1024676:	b10b      	cbz	r3, 102467c <_svfiprintf_r+0xd2c>
 1024678:	f10a 0a01 	add.w	sl, sl, #1
 102467c:	4620      	mov	r0, r4
 102467e:	4629      	mov	r1, r5
 1024680:	220a      	movs	r2, #10
 1024682:	2300      	movs	r3, #0
 1024684:	f7f5 fda0 	bl	101a1c8 <__aeabi_uldivmod>
 1024688:	2700      	movs	r7, #0
 102468a:	e74c      	b.n	1024526 <_svfiprintf_r+0xbd6>
 102468c:	463b      	mov	r3, r7
 102468e:	4601      	mov	r1, r0
 1024690:	e577      	b.n	1024182 <_svfiprintf_r+0x832>
 1024692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1024694:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1024698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 102469c:	8193      	strh	r3, [r2, #12]
 102469e:	f7ff ba3a 	b.w	1023b16 <_svfiprintf_r+0x1c6>
 10246a2:	9a07      	ldr	r2, [sp, #28]
 10246a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 10246a8:	468a      	mov	sl, r1
 10246aa:	f852 0b04 	ldr.w	r0, [r2], #4
 10246ae:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 10246b2:	9207      	str	r2, [sp, #28]
 10246b4:	9103      	str	r1, [sp, #12]
 10246b6:	f7ff b99f 	b.w	10239f8 <_svfiprintf_r+0xa8>
 10246ba:	4637      	mov	r7, r6
 10246bc:	f7ff bbcc 	b.w	1023e58 <_svfiprintf_r+0x508>
 10246c0:	4633      	mov	r3, r6
 10246c2:	f7ff bbbd 	b.w	1023e40 <_svfiprintf_r+0x4f0>
 10246c6:	4637      	mov	r7, r6
 10246c8:	e462      	b.n	1023f90 <_svfiprintf_r+0x640>
 10246ca:	230c      	movs	r3, #12
 10246cc:	f04f 32ff 	mov.w	r2, #4294967295
 10246d0:	f8cb 3000 	str.w	r3, [fp]
 10246d4:	9204      	str	r2, [sp, #16]
 10246d6:	f7ff ba25 	b.w	1023b24 <_svfiprintf_r+0x1d4>
 10246da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10246dc:	8993      	ldrh	r3, [r2, #12]
 10246de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10246e2:	8193      	strh	r3, [r2, #12]
 10246e4:	e5a9      	b.n	102423a <_svfiprintf_r+0x8ea>
 10246e6:	bf00      	nop

010246e8 <__sprint_r.part.0>:
 10246e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10246ec:	4693      	mov	fp, r2
 10246ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 10246f0:	049c      	lsls	r4, r3, #18
 10246f2:	d52c      	bpl.n	102474e <__sprint_r.part.0+0x66>
 10246f4:	6893      	ldr	r3, [r2, #8]
 10246f6:	460e      	mov	r6, r1
 10246f8:	6812      	ldr	r2, [r2, #0]
 10246fa:	4607      	mov	r7, r0
 10246fc:	f102 0908 	add.w	r9, r2, #8
 1024700:	b31b      	cbz	r3, 102474a <__sprint_r.part.0+0x62>
 1024702:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 1024706:	ea5f 089a 	movs.w	r8, sl, lsr #2
 102470a:	d014      	beq.n	1024736 <__sprint_r.part.0+0x4e>
 102470c:	3d04      	subs	r5, #4
 102470e:	2400      	movs	r4, #0
 1024710:	e001      	b.n	1024716 <__sprint_r.part.0+0x2e>
 1024712:	45a0      	cmp	r8, r4
 1024714:	d00d      	beq.n	1024732 <__sprint_r.part.0+0x4a>
 1024716:	4632      	mov	r2, r6
 1024718:	f855 1f04 	ldr.w	r1, [r5, #4]!
 102471c:	4638      	mov	r0, r7
 102471e:	3401      	adds	r4, #1
 1024720:	f001 f9a8 	bl	1025a74 <_fputwc_r>
 1024724:	1c43      	adds	r3, r0, #1
 1024726:	d1f4      	bne.n	1024712 <__sprint_r.part.0+0x2a>
 1024728:	2300      	movs	r3, #0
 102472a:	e9cb 3301 	strd	r3, r3, [fp, #4]
 102472e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1024732:	f8db 3008 	ldr.w	r3, [fp, #8]
 1024736:	f02a 0a03 	bic.w	sl, sl, #3
 102473a:	f109 0908 	add.w	r9, r9, #8
 102473e:	eba3 030a 	sub.w	r3, r3, sl
 1024742:	f8cb 3008 	str.w	r3, [fp, #8]
 1024746:	2b00      	cmp	r3, #0
 1024748:	d1db      	bne.n	1024702 <__sprint_r.part.0+0x1a>
 102474a:	2000      	movs	r0, #0
 102474c:	e7ec      	b.n	1024728 <__sprint_r.part.0+0x40>
 102474e:	f7fd fe4f 	bl	10223f0 <__sfvwrite_r>
 1024752:	2300      	movs	r3, #0
 1024754:	e9cb 3301 	strd	r3, r3, [fp, #4]
 1024758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0102475c <__sprint_r>:
 102475c:	6893      	ldr	r3, [r2, #8]
 102475e:	b103      	cbz	r3, 1024762 <__sprint_r+0x6>
 1024760:	e7c2      	b.n	10246e8 <__sprint_r.part.0>
 1024762:	b410      	push	{r4}
 1024764:	4618      	mov	r0, r3
 1024766:	6053      	str	r3, [r2, #4]
 1024768:	f85d 4b04 	ldr.w	r4, [sp], #4
 102476c:	4770      	bx	lr
 102476e:	bf00      	nop

01024770 <_vfiprintf_r>:
 1024770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1024774:	b0c7      	sub	sp, #284	; 0x11c
 1024776:	4683      	mov	fp, r0
 1024778:	4615      	mov	r5, r2
 102477a:	9106      	str	r1, [sp, #24]
 102477c:	a816      	add	r0, sp, #88	; 0x58
 102477e:	2208      	movs	r2, #8
 1024780:	2100      	movs	r1, #0
 1024782:	461c      	mov	r4, r3
 1024784:	9307      	str	r3, [sp, #28]
 1024786:	f7f7 fc93 	bl	101c0b0 <memset>
 102478a:	f1bb 0f00 	cmp.w	fp, #0
 102478e:	d004      	beq.n	102479a <_vfiprintf_r+0x2a>
 1024790:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 1024794:	2b00      	cmp	r3, #0
 1024796:	f000 83ac 	beq.w	1024ef2 <_vfiprintf_r+0x782>
 102479a:	9906      	ldr	r1, [sp, #24]
 102479c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 10247a0:	b293      	uxth	r3, r2
 10247a2:	049e      	lsls	r6, r3, #18
 10247a4:	d407      	bmi.n	10247b6 <_vfiprintf_r+0x46>
 10247a6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 10247aa:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 10247ac:	818b      	strh	r3, [r1, #12]
 10247ae:	b29b      	uxth	r3, r3
 10247b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 10247b4:	664a      	str	r2, [r1, #100]	; 0x64
 10247b6:	0718      	lsls	r0, r3, #28
 10247b8:	f140 80af 	bpl.w	102491a <_vfiprintf_r+0x1aa>
 10247bc:	9a06      	ldr	r2, [sp, #24]
 10247be:	6912      	ldr	r2, [r2, #16]
 10247c0:	2a00      	cmp	r2, #0
 10247c2:	f000 80aa 	beq.w	102491a <_vfiprintf_r+0x1aa>
 10247c6:	f003 031a 	and.w	r3, r3, #26
 10247ca:	2b0a      	cmp	r3, #10
 10247cc:	f000 80b3 	beq.w	1024936 <_vfiprintf_r+0x1c6>
 10247d0:	2300      	movs	r3, #0
 10247d2:	930c      	str	r3, [sp, #48]	; 0x30
 10247d4:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 10247d8:	f64a 1848 	movw	r8, #43336	; 0xa948
 10247dc:	930d      	str	r3, [sp, #52]	; 0x34
 10247de:	f2c0 1806 	movt	r8, #262	; 0x106
 10247e2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 10247e6:	462f      	mov	r7, r5
 10247e8:	9303      	str	r3, [sp, #12]
 10247ea:	ab1d      	add	r3, sp, #116	; 0x74
 10247ec:	931a      	str	r3, [sp, #104]	; 0x68
 10247ee:	4699      	mov	r9, r3
 10247f0:	f64a 5678 	movw	r6, #44408	; 0xad78
 10247f4:	f2c0 1606 	movt	r6, #262	; 0x106
 10247f8:	463c      	mov	r4, r7
 10247fa:	f8d8 3000 	ldr.w	r3, [r8]
 10247fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 1024800:	2b00      	cmp	r3, #0
 1024802:	bf08      	it	eq
 1024804:	4633      	moveq	r3, r6
 1024806:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 102480a:	f7f6 fb23 	bl	101ae54 <__locale_mb_cur_max>
 102480e:	ab16      	add	r3, sp, #88	; 0x58
 1024810:	4622      	mov	r2, r4
 1024812:	9300      	str	r3, [sp, #0]
 1024814:	a914      	add	r1, sp, #80	; 0x50
 1024816:	4603      	mov	r3, r0
 1024818:	4658      	mov	r0, fp
 102481a:	47a8      	blx	r5
 102481c:	2800      	cmp	r0, #0
 102481e:	4603      	mov	r3, r0
 1024820:	f000 809f 	beq.w	1024962 <_vfiprintf_r+0x1f2>
 1024824:	f2c0 8095 	blt.w	1024952 <_vfiprintf_r+0x1e2>
 1024828:	9a14      	ldr	r2, [sp, #80]	; 0x50
 102482a:	2a25      	cmp	r2, #37	; 0x25
 102482c:	d001      	beq.n	1024832 <_vfiprintf_r+0xc2>
 102482e:	441c      	add	r4, r3
 1024830:	e7e3      	b.n	10247fa <_vfiprintf_r+0x8a>
 1024832:	1be6      	subs	r6, r4, r7
 1024834:	4605      	mov	r5, r0
 1024836:	f040 8097 	bne.w	1024968 <_vfiprintf_r+0x1f8>
 102483a:	2300      	movs	r3, #0
 102483c:	9305      	str	r3, [sp, #20]
 102483e:	461e      	mov	r6, r3
 1024840:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1024844:	7863      	ldrb	r3, [r4, #1]
 1024846:	1c67      	adds	r7, r4, #1
 1024848:	f04f 3aff 	mov.w	sl, #4294967295
 102484c:	3701      	adds	r7, #1
 102484e:	f1a3 0220 	sub.w	r2, r3, #32
 1024852:	2a5a      	cmp	r2, #90	; 0x5a
 1024854:	f200 8351 	bhi.w	1024efa <_vfiprintf_r+0x78a>
 1024858:	e8df f012 	tbh	[pc, r2, lsl #1]
 102485c:	034f01bb 	.word	0x034f01bb
 1024860:	0207034f 	.word	0x0207034f
 1024864:	034f034f 	.word	0x034f034f
 1024868:	01ea034f 	.word	0x01ea034f
 102486c:	034f034f 	.word	0x034f034f
 1024870:	01d701dc 	.word	0x01d701dc
 1024874:	0223034f 	.word	0x0223034f
 1024878:	034f020b 	.word	0x034f020b
 102487c:	019a0227 	.word	0x019a0227
 1024880:	019a019a 	.word	0x019a019a
 1024884:	019a019a 	.word	0x019a019a
 1024888:	019a019a 	.word	0x019a019a
 102488c:	019a019a 	.word	0x019a019a
 1024890:	034f034f 	.word	0x034f034f
 1024894:	034f034f 	.word	0x034f034f
 1024898:	034f034f 	.word	0x034f034f
 102489c:	034f034f 	.word	0x034f034f
 10248a0:	02ee034f 	.word	0x02ee034f
 10248a4:	034f02e0 	.word	0x034f02e0
 10248a8:	034f034f 	.word	0x034f034f
 10248ac:	034f034f 	.word	0x034f034f
 10248b0:	034f034f 	.word	0x034f034f
 10248b4:	034f034f 	.word	0x034f034f
 10248b8:	0311034f 	.word	0x0311034f
 10248bc:	034f034f 	.word	0x034f034f
 10248c0:	02b8034f 	.word	0x02b8034f
 10248c4:	02aa034f 	.word	0x02aa034f
 10248c8:	034f034f 	.word	0x034f034f
 10248cc:	034f027e 	.word	0x034f027e
 10248d0:	034f034f 	.word	0x034f034f
 10248d4:	034f034f 	.word	0x034f034f
 10248d8:	034f034f 	.word	0x034f034f
 10248dc:	034f034f 	.word	0x034f034f
 10248e0:	02ee034f 	.word	0x02ee034f
 10248e4:	034f0235 	.word	0x034f0235
 10248e8:	034f034f 	.word	0x034f034f
 10248ec:	0235022b 	.word	0x0235022b
 10248f0:	034f005b 	.word	0x034f005b
 10248f4:	034f0341 	.word	0x034f0341
 10248f8:	0331031c 	.word	0x0331031c
 10248fc:	005b01a8 	.word	0x005b01a8
 1024900:	02b8034f 	.word	0x02b8034f
 1024904:	01c5005d 	.word	0x01c5005d
 1024908:	034f034f 	.word	0x034f034f
 102490c:	034f00b2 	.word	0x034f00b2
 1024910:	005d      	.short	0x005d
 1024912:	f046 0620 	orr.w	r6, r6, #32
 1024916:	783b      	ldrb	r3, [r7, #0]
 1024918:	e798      	b.n	102484c <_vfiprintf_r+0xdc>
 102491a:	9906      	ldr	r1, [sp, #24]
 102491c:	4658      	mov	r0, fp
 102491e:	f7fc fa37 	bl	1020d90 <__swsetup_r>
 1024922:	2800      	cmp	r0, #0
 1024924:	f040 86c4 	bne.w	10256b0 <_vfiprintf_r+0xf40>
 1024928:	9b06      	ldr	r3, [sp, #24]
 102492a:	899b      	ldrh	r3, [r3, #12]
 102492c:	f003 031a 	and.w	r3, r3, #26
 1024930:	2b0a      	cmp	r3, #10
 1024932:	f47f af4d 	bne.w	10247d0 <_vfiprintf_r+0x60>
 1024936:	9b06      	ldr	r3, [sp, #24]
 1024938:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 102493c:	2b00      	cmp	r3, #0
 102493e:	f6ff af47 	blt.w	10247d0 <_vfiprintf_r+0x60>
 1024942:	4623      	mov	r3, r4
 1024944:	462a      	mov	r2, r5
 1024946:	9906      	ldr	r1, [sp, #24]
 1024948:	4658      	mov	r0, fp
 102494a:	f000 fedd 	bl	1025708 <__sbprintf>
 102494e:	9003      	str	r0, [sp, #12]
 1024950:	e02f      	b.n	10249b2 <_vfiprintf_r+0x242>
 1024952:	2208      	movs	r2, #8
 1024954:	2100      	movs	r1, #0
 1024956:	a816      	add	r0, sp, #88	; 0x58
 1024958:	f7f7 fbaa 	bl	101c0b0 <memset>
 102495c:	2301      	movs	r3, #1
 102495e:	441c      	add	r4, r3
 1024960:	e74b      	b.n	10247fa <_vfiprintf_r+0x8a>
 1024962:	1be6      	subs	r6, r4, r7
 1024964:	4605      	mov	r5, r0
 1024966:	d01a      	beq.n	102499e <_vfiprintf_r+0x22e>
 1024968:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 102496c:	e9c9 7600 	strd	r7, r6, [r9]
 1024970:	3301      	adds	r3, #1
 1024972:	4432      	add	r2, r6
 1024974:	2b07      	cmp	r3, #7
 1024976:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 102497a:	dd1e      	ble.n	10249ba <_vfiprintf_r+0x24a>
 102497c:	2a00      	cmp	r2, #0
 102497e:	f000 84ce 	beq.w	102531e <_vfiprintf_r+0xbae>
 1024982:	aa1a      	add	r2, sp, #104	; 0x68
 1024984:	9906      	ldr	r1, [sp, #24]
 1024986:	4658      	mov	r0, fp
 1024988:	f7ff feae 	bl	10246e8 <__sprint_r.part.0>
 102498c:	b958      	cbnz	r0, 10249a6 <_vfiprintf_r+0x236>
 102498e:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1024992:	9b03      	ldr	r3, [sp, #12]
 1024994:	4433      	add	r3, r6
 1024996:	9303      	str	r3, [sp, #12]
 1024998:	2d00      	cmp	r5, #0
 102499a:	f47f af4e 	bne.w	102483a <_vfiprintf_r+0xca>
 102499e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 10249a0:	2b00      	cmp	r3, #0
 10249a2:	f040 8633 	bne.w	102560c <_vfiprintf_r+0xe9c>
 10249a6:	9b06      	ldr	r3, [sp, #24]
 10249a8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 10249ac:	065b      	lsls	r3, r3, #25
 10249ae:	f100 867f 	bmi.w	10256b0 <_vfiprintf_r+0xf40>
 10249b2:	9803      	ldr	r0, [sp, #12]
 10249b4:	b047      	add	sp, #284	; 0x11c
 10249b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10249ba:	f109 0908 	add.w	r9, r9, #8
 10249be:	e7e8      	b.n	1024992 <_vfiprintf_r+0x222>
 10249c0:	06b1      	lsls	r1, r6, #26
 10249c2:	f24a 425c 	movw	r2, #42076	; 0xa45c
 10249c6:	f2c0 1206 	movt	r2, #262	; 0x106
 10249ca:	920c      	str	r2, [sp, #48]	; 0x30
 10249cc:	f140 81cc 	bpl.w	1024d68 <_vfiprintf_r+0x5f8>
 10249d0:	9d07      	ldr	r5, [sp, #28]
 10249d2:	3507      	adds	r5, #7
 10249d4:	f025 0207 	bic.w	r2, r5, #7
 10249d8:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10249dc:	9207      	str	r2, [sp, #28]
 10249de:	ea54 0205 	orrs.w	r2, r4, r5
 10249e2:	f006 0201 	and.w	r2, r6, #1
 10249e6:	bf08      	it	eq
 10249e8:	2200      	moveq	r2, #0
 10249ea:	2a00      	cmp	r2, #0
 10249ec:	f040 81d8 	bne.w	1024da0 <_vfiprintf_r+0x630>
 10249f0:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 10249f4:	9302      	str	r3, [sp, #8]
 10249f6:	2302      	movs	r3, #2
 10249f8:	f1ba 3fff 	cmp.w	sl, #4294967295
 10249fc:	f04f 0200 	mov.w	r2, #0
 1024a00:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1024a04:	f000 818a 	beq.w	1024d1c <_vfiprintf_r+0x5ac>
 1024a08:	ea54 0205 	orrs.w	r2, r4, r5
 1024a0c:	9a02      	ldr	r2, [sp, #8]
 1024a0e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 1024a12:	bf14      	ite	ne
 1024a14:	2201      	movne	r2, #1
 1024a16:	2200      	moveq	r2, #0
 1024a18:	f1ba 0f00 	cmp.w	sl, #0
 1024a1c:	bf18      	it	ne
 1024a1e:	2201      	movne	r2, #1
 1024a20:	2a00      	cmp	r2, #0
 1024a22:	f040 84ac 	bne.w	102537e <_vfiprintf_r+0xc0e>
 1024a26:	2b00      	cmp	r3, #0
 1024a28:	f040 845e 	bne.w	10252e8 <_vfiprintf_r+0xb78>
 1024a2c:	9a02      	ldr	r2, [sp, #8]
 1024a2e:	469a      	mov	sl, r3
 1024a30:	f012 0201 	ands.w	r2, r2, #1
 1024a34:	9204      	str	r2, [sp, #16]
 1024a36:	bf04      	itt	eq
 1024a38:	ab46      	addeq	r3, sp, #280	; 0x118
 1024a3a:	930b      	streq	r3, [sp, #44]	; 0x2c
 1024a3c:	d005      	beq.n	1024a4a <_vfiprintf_r+0x2da>
 1024a3e:	2330      	movs	r3, #48	; 0x30
 1024a40:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 1024a44:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1024a48:	930b      	str	r3, [sp, #44]	; 0x2c
 1024a4a:	9b04      	ldr	r3, [sp, #16]
 1024a4c:	4553      	cmp	r3, sl
 1024a4e:	bfb8      	it	lt
 1024a50:	4653      	movlt	r3, sl
 1024a52:	9302      	str	r3, [sp, #8]
 1024a54:	2300      	movs	r3, #0
 1024a56:	9308      	str	r3, [sp, #32]
 1024a58:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 1024a5c:	b113      	cbz	r3, 1024a64 <_vfiprintf_r+0x2f4>
 1024a5e:	9b02      	ldr	r3, [sp, #8]
 1024a60:	3301      	adds	r3, #1
 1024a62:	9302      	str	r3, [sp, #8]
 1024a64:	f016 0302 	ands.w	r3, r6, #2
 1024a68:	9309      	str	r3, [sp, #36]	; 0x24
 1024a6a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	; 0x6c
 1024a6e:	bf18      	it	ne
 1024a70:	9b02      	ldrne	r3, [sp, #8]
 1024a72:	f102 0101 	add.w	r1, r2, #1
 1024a76:	bf1c      	itt	ne
 1024a78:	3302      	addne	r3, #2
 1024a7a:	9302      	strne	r3, [sp, #8]
 1024a7c:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 1024a80:	4608      	mov	r0, r1
 1024a82:	930a      	str	r3, [sp, #40]	; 0x28
 1024a84:	d105      	bne.n	1024a92 <_vfiprintf_r+0x322>
 1024a86:	9b05      	ldr	r3, [sp, #20]
 1024a88:	9c02      	ldr	r4, [sp, #8]
 1024a8a:	1b1c      	subs	r4, r3, r4
 1024a8c:	2c00      	cmp	r4, #0
 1024a8e:	f300 8381 	bgt.w	1025194 <_vfiprintf_r+0xa24>
 1024a92:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 1024a96:	f109 0108 	add.w	r1, r9, #8
 1024a9a:	b194      	cbz	r4, 1024ac2 <_vfiprintf_r+0x352>
 1024a9c:	2807      	cmp	r0, #7
 1024a9e:	f10d 024b 	add.w	r2, sp, #75	; 0x4b
 1024aa2:	f10c 0c01 	add.w	ip, ip, #1
 1024aa6:	f8c9 2000 	str.w	r2, [r9]
 1024aaa:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 1024aae:	f04f 0201 	mov.w	r2, #1
 1024ab2:	f8c9 2004 	str.w	r2, [r9, #4]
 1024ab6:	f300 834b 	bgt.w	1025150 <_vfiprintf_r+0x9e0>
 1024aba:	4602      	mov	r2, r0
 1024abc:	4689      	mov	r9, r1
 1024abe:	3001      	adds	r0, #1
 1024ac0:	3108      	adds	r1, #8
 1024ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1024ac4:	b303      	cbz	r3, 1024b08 <_vfiprintf_r+0x398>
 1024ac6:	2807      	cmp	r0, #7
 1024ac8:	ab13      	add	r3, sp, #76	; 0x4c
 1024aca:	f10c 0c02 	add.w	ip, ip, #2
 1024ace:	f8c9 3000 	str.w	r3, [r9]
 1024ad2:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 1024ad6:	f04f 0302 	mov.w	r3, #2
 1024ada:	f8c9 3004 	str.w	r3, [r9, #4]
 1024ade:	f340 8354 	ble.w	102518a <_vfiprintf_r+0xa1a>
 1024ae2:	f1bc 0f00 	cmp.w	ip, #0
 1024ae6:	f000 8430 	beq.w	102534a <_vfiprintf_r+0xbda>
 1024aea:	aa1a      	add	r2, sp, #104	; 0x68
 1024aec:	9906      	ldr	r1, [sp, #24]
 1024aee:	4658      	mov	r0, fp
 1024af0:	f7ff fdfa 	bl	10246e8 <__sprint_r.part.0>
 1024af4:	2800      	cmp	r0, #0
 1024af6:	f040 8322 	bne.w	102513e <_vfiprintf_r+0x9ce>
 1024afa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1024afc:	a91f      	add	r1, sp, #124	; 0x7c
 1024afe:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1024b02:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1024b06:	1c50      	adds	r0, r2, #1
 1024b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1024b0a:	2b80      	cmp	r3, #128	; 0x80
 1024b0c:	f000 8266 	beq.w	1024fdc <_vfiprintf_r+0x86c>
 1024b10:	9b04      	ldr	r3, [sp, #16]
 1024b12:	ebaa 0403 	sub.w	r4, sl, r3
 1024b16:	2c00      	cmp	r4, #0
 1024b18:	f300 82c2 	bgt.w	10250a0 <_vfiprintf_r+0x930>
 1024b1c:	9a04      	ldr	r2, [sp, #16]
 1024b1e:	2807      	cmp	r0, #7
 1024b20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 1024b22:	901b      	str	r0, [sp, #108]	; 0x6c
 1024b24:	4613      	mov	r3, r2
 1024b26:	f8c9 2004 	str.w	r2, [r9, #4]
 1024b2a:	4463      	add	r3, ip
 1024b2c:	f8c9 4000 	str.w	r4, [r9]
 1024b30:	931c      	str	r3, [sp, #112]	; 0x70
 1024b32:	dd0c      	ble.n	1024b4e <_vfiprintf_r+0x3de>
 1024b34:	2b00      	cmp	r3, #0
 1024b36:	f000 837b 	beq.w	1025230 <_vfiprintf_r+0xac0>
 1024b3a:	aa1a      	add	r2, sp, #104	; 0x68
 1024b3c:	9906      	ldr	r1, [sp, #24]
 1024b3e:	4658      	mov	r0, fp
 1024b40:	f7ff fdd2 	bl	10246e8 <__sprint_r.part.0>
 1024b44:	2800      	cmp	r0, #0
 1024b46:	f040 82fa 	bne.w	102513e <_vfiprintf_r+0x9ce>
 1024b4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 1024b4c:	a91d      	add	r1, sp, #116	; 0x74
 1024b4e:	0772      	lsls	r2, r6, #29
 1024b50:	d505      	bpl.n	1024b5e <_vfiprintf_r+0x3ee>
 1024b52:	9a05      	ldr	r2, [sp, #20]
 1024b54:	9802      	ldr	r0, [sp, #8]
 1024b56:	1a14      	subs	r4, r2, r0
 1024b58:	2c00      	cmp	r4, #0
 1024b5a:	f300 8372 	bgt.w	1025242 <_vfiprintf_r+0xad2>
 1024b5e:	9a03      	ldr	r2, [sp, #12]
 1024b60:	9905      	ldr	r1, [sp, #20]
 1024b62:	9802      	ldr	r0, [sp, #8]
 1024b64:	4281      	cmp	r1, r0
 1024b66:	bfac      	ite	ge
 1024b68:	1852      	addge	r2, r2, r1
 1024b6a:	1812      	addlt	r2, r2, r0
 1024b6c:	9203      	str	r2, [sp, #12]
 1024b6e:	2b00      	cmp	r3, #0
 1024b70:	f040 82dd 	bne.w	102512e <_vfiprintf_r+0x9be>
 1024b74:	9908      	ldr	r1, [sp, #32]
 1024b76:	2300      	movs	r3, #0
 1024b78:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1024b7c:	931b      	str	r3, [sp, #108]	; 0x6c
 1024b7e:	2900      	cmp	r1, #0
 1024b80:	f43f ae36 	beq.w	10247f0 <_vfiprintf_r+0x80>
 1024b84:	4658      	mov	r0, fp
 1024b86:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1024b8a:	f7fd fb39 	bl	1022200 <_free_r>
 1024b8e:	e62f      	b.n	10247f0 <_vfiprintf_r+0x80>
 1024b90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1024b94:	2100      	movs	r1, #0
 1024b96:	f817 3b01 	ldrb.w	r3, [r7], #1
 1024b9a:	200a      	movs	r0, #10
 1024b9c:	fb00 2101 	mla	r1, r0, r1, r2
 1024ba0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1024ba4:	2a09      	cmp	r2, #9
 1024ba6:	d9f6      	bls.n	1024b96 <_vfiprintf_r+0x426>
 1024ba8:	9105      	str	r1, [sp, #20]
 1024baa:	e650      	b.n	102484e <_vfiprintf_r+0xde>
 1024bac:	9b07      	ldr	r3, [sp, #28]
 1024bae:	f046 0202 	orr.w	r2, r6, #2
 1024bb2:	f24a 415c 	movw	r1, #42076	; 0xa45c
 1024bb6:	9202      	str	r2, [sp, #8]
 1024bb8:	f2c0 1106 	movt	r1, #262	; 0x106
 1024bbc:	f647 0230 	movw	r2, #30768	; 0x7830
 1024bc0:	f853 4b04 	ldr.w	r4, [r3], #4
 1024bc4:	2500      	movs	r5, #0
 1024bc6:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 1024bca:	910c      	str	r1, [sp, #48]	; 0x30
 1024bcc:	9307      	str	r3, [sp, #28]
 1024bce:	2302      	movs	r3, #2
 1024bd0:	e712      	b.n	10249f8 <_vfiprintf_r+0x288>
 1024bd2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1024bd6:	783b      	ldrb	r3, [r7, #0]
 1024bd8:	2a00      	cmp	r2, #0
 1024bda:	f47f ae37 	bne.w	102484c <_vfiprintf_r+0xdc>
 1024bde:	2220      	movs	r2, #32
 1024be0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1024be4:	e632      	b.n	102484c <_vfiprintf_r+0xdc>
 1024be6:	06b2      	lsls	r2, r6, #26
 1024be8:	f100 81c1 	bmi.w	1024f6e <_vfiprintf_r+0x7fe>
 1024bec:	9a07      	ldr	r2, [sp, #28]
 1024bee:	06f3      	lsls	r3, r6, #27
 1024bf0:	f852 4b04 	ldr.w	r4, [r2], #4
 1024bf4:	f100 8571 	bmi.w	10256da <_vfiprintf_r+0xf6a>
 1024bf8:	0675      	lsls	r5, r6, #25
 1024bfa:	9207      	str	r2, [sp, #28]
 1024bfc:	9602      	str	r6, [sp, #8]
 1024bfe:	f140 84c7 	bpl.w	1025590 <_vfiprintf_r+0xe20>
 1024c02:	b2a4      	uxth	r4, r4
 1024c04:	2500      	movs	r5, #0
 1024c06:	2301      	movs	r3, #1
 1024c08:	e6f6      	b.n	10249f8 <_vfiprintf_r+0x288>
 1024c0a:	232b      	movs	r3, #43	; 0x2b
 1024c0c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1024c10:	783b      	ldrb	r3, [r7, #0]
 1024c12:	e61b      	b.n	102484c <_vfiprintf_r+0xdc>
 1024c14:	9a07      	ldr	r2, [sp, #28]
 1024c16:	783b      	ldrb	r3, [r7, #0]
 1024c18:	f852 1b04 	ldr.w	r1, [r2], #4
 1024c1c:	2900      	cmp	r1, #0
 1024c1e:	9105      	str	r1, [sp, #20]
 1024c20:	bfa8      	it	ge
 1024c22:	9207      	strge	r2, [sp, #28]
 1024c24:	f6bf ae12 	bge.w	102484c <_vfiprintf_r+0xdc>
 1024c28:	4249      	negs	r1, r1
 1024c2a:	9207      	str	r2, [sp, #28]
 1024c2c:	9105      	str	r1, [sp, #20]
 1024c2e:	e039      	b.n	1024ca4 <_vfiprintf_r+0x534>
 1024c30:	4658      	mov	r0, fp
 1024c32:	f7fd fe0d 	bl	1022850 <_localeconv_r>
 1024c36:	6843      	ldr	r3, [r0, #4]
 1024c38:	4618      	mov	r0, r3
 1024c3a:	930e      	str	r3, [sp, #56]	; 0x38
 1024c3c:	f7f8 f920 	bl	101ce80 <strlen>
 1024c40:	4604      	mov	r4, r0
 1024c42:	900f      	str	r0, [sp, #60]	; 0x3c
 1024c44:	4658      	mov	r0, fp
 1024c46:	f7fd fe03 	bl	1022850 <_localeconv_r>
 1024c4a:	6883      	ldr	r3, [r0, #8]
 1024c4c:	2c00      	cmp	r4, #0
 1024c4e:	bf18      	it	ne
 1024c50:	2b00      	cmpne	r3, #0
 1024c52:	930d      	str	r3, [sp, #52]	; 0x34
 1024c54:	f43f ae5f 	beq.w	1024916 <_vfiprintf_r+0x1a6>
 1024c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1024c5a:	781a      	ldrb	r2, [r3, #0]
 1024c5c:	783b      	ldrb	r3, [r7, #0]
 1024c5e:	2a00      	cmp	r2, #0
 1024c60:	f43f adf4 	beq.w	102484c <_vfiprintf_r+0xdc>
 1024c64:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 1024c68:	e5f0      	b.n	102484c <_vfiprintf_r+0xdc>
 1024c6a:	f046 0601 	orr.w	r6, r6, #1
 1024c6e:	783b      	ldrb	r3, [r7, #0]
 1024c70:	e5ec      	b.n	102484c <_vfiprintf_r+0xdc>
 1024c72:	4639      	mov	r1, r7
 1024c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 1024c78:	2b2a      	cmp	r3, #42	; 0x2a
 1024c7a:	f000 851e 	beq.w	10256ba <_vfiprintf_r+0xf4a>
 1024c7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1024c82:	460f      	mov	r7, r1
 1024c84:	2a09      	cmp	r2, #9
 1024c86:	f04f 0a00 	mov.w	sl, #0
 1024c8a:	f63f ade0 	bhi.w	102484e <_vfiprintf_r+0xde>
 1024c8e:	f817 3b01 	ldrb.w	r3, [r7], #1
 1024c92:	210a      	movs	r1, #10
 1024c94:	fb01 2a0a 	mla	sl, r1, sl, r2
 1024c98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1024c9c:	2a09      	cmp	r2, #9
 1024c9e:	d9f6      	bls.n	1024c8e <_vfiprintf_r+0x51e>
 1024ca0:	e5d5      	b.n	102484e <_vfiprintf_r+0xde>
 1024ca2:	783b      	ldrb	r3, [r7, #0]
 1024ca4:	f046 0604 	orr.w	r6, r6, #4
 1024ca8:	e5d0      	b.n	102484c <_vfiprintf_r+0xdc>
 1024caa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 1024cae:	783b      	ldrb	r3, [r7, #0]
 1024cb0:	e5cc      	b.n	102484c <_vfiprintf_r+0xdc>
 1024cb2:	783b      	ldrb	r3, [r7, #0]
 1024cb4:	2b68      	cmp	r3, #104	; 0x68
 1024cb6:	bf09      	itett	eq
 1024cb8:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 1024cbc:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1024cc0:	787b      	ldrbeq	r3, [r7, #1]
 1024cc2:	3701      	addeq	r7, #1
 1024cc4:	e5c2      	b.n	102484c <_vfiprintf_r+0xdc>
 1024cc6:	06b3      	lsls	r3, r6, #26
 1024cc8:	f100 8128 	bmi.w	1024f1c <_vfiprintf_r+0x7ac>
 1024ccc:	9b07      	ldr	r3, [sp, #28]
 1024cce:	06f5      	lsls	r5, r6, #27
 1024cd0:	f103 0204 	add.w	r2, r3, #4
 1024cd4:	f100 8504 	bmi.w	10256e0 <_vfiprintf_r+0xf70>
 1024cd8:	9b07      	ldr	r3, [sp, #28]
 1024cda:	0674      	lsls	r4, r6, #25
 1024cdc:	bf48      	it	mi
 1024cde:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1024ce2:	d404      	bmi.n	1024cee <_vfiprintf_r+0x57e>
 1024ce4:	05b0      	lsls	r0, r6, #22
 1024ce6:	f140 848a 	bpl.w	10255fe <_vfiprintf_r+0xe8e>
 1024cea:	f993 4000 	ldrsb.w	r4, [r3]
 1024cee:	17e5      	asrs	r5, r4, #31
 1024cf0:	9207      	str	r2, [sp, #28]
 1024cf2:	4622      	mov	r2, r4
 1024cf4:	2a00      	cmp	r2, #0
 1024cf6:	462b      	mov	r3, r5
 1024cf8:	f173 0300 	sbcs.w	r3, r3, #0
 1024cfc:	9602      	str	r6, [sp, #8]
 1024cfe:	f280 811d 	bge.w	1024f3c <_vfiprintf_r+0x7cc>
 1024d02:	4264      	negs	r4, r4
 1024d04:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1024d08:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1024d0c:	f04f 0301 	mov.w	r3, #1
 1024d10:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1024d14:	f1ba 3fff 	cmp.w	sl, #4294967295
 1024d18:	f47f ae76 	bne.w	1024a08 <_vfiprintf_r+0x298>
 1024d1c:	2b01      	cmp	r3, #1
 1024d1e:	f000 8304 	beq.w	102532a <_vfiprintf_r+0xbba>
 1024d22:	2b02      	cmp	r3, #2
 1024d24:	bf18      	it	ne
 1024d26:	a946      	addne	r1, sp, #280	; 0x118
 1024d28:	f040 8139 	bne.w	1024f9e <_vfiprintf_r+0x82e>
 1024d2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 1024d2e:	aa46      	add	r2, sp, #280	; 0x118
 1024d30:	f004 010f 	and.w	r1, r4, #15
 1024d34:	0923      	lsrs	r3, r4, #4
 1024d36:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 1024d3a:	0928      	lsrs	r0, r5, #4
 1024d3c:	5c71      	ldrb	r1, [r6, r1]
 1024d3e:	461c      	mov	r4, r3
 1024d40:	4605      	mov	r5, r0
 1024d42:	ea54 0305 	orrs.w	r3, r4, r5
 1024d46:	f802 1d01 	strb.w	r1, [r2, #-1]!
 1024d4a:	d1f1      	bne.n	1024d30 <_vfiprintf_r+0x5c0>
 1024d4c:	ab46      	add	r3, sp, #280	; 0x118
 1024d4e:	920b      	str	r2, [sp, #44]	; 0x2c
 1024d50:	1a9b      	subs	r3, r3, r2
 1024d52:	9e02      	ldr	r6, [sp, #8]
 1024d54:	9304      	str	r3, [sp, #16]
 1024d56:	e678      	b.n	1024a4a <_vfiprintf_r+0x2da>
 1024d58:	06b1      	lsls	r1, r6, #26
 1024d5a:	f24a 12dc 	movw	r2, #41436	; 0xa1dc
 1024d5e:	f2c0 1206 	movt	r2, #262	; 0x106
 1024d62:	920c      	str	r2, [sp, #48]	; 0x30
 1024d64:	f53f ae34 	bmi.w	10249d0 <_vfiprintf_r+0x260>
 1024d68:	9a07      	ldr	r2, [sp, #28]
 1024d6a:	f852 4b04 	ldr.w	r4, [r2], #4
 1024d6e:	9207      	str	r2, [sp, #28]
 1024d70:	06f2      	lsls	r2, r6, #27
 1024d72:	d40b      	bmi.n	1024d8c <_vfiprintf_r+0x61c>
 1024d74:	0675      	lsls	r5, r6, #25
 1024d76:	bf44      	itt	mi
 1024d78:	b2a4      	uxthmi	r4, r4
 1024d7a:	2500      	movmi	r5, #0
 1024d7c:	f53f ae2f 	bmi.w	10249de <_vfiprintf_r+0x26e>
 1024d80:	05b0      	lsls	r0, r6, #22
 1024d82:	bf44      	itt	mi
 1024d84:	b2e4      	uxtbmi	r4, r4
 1024d86:	2500      	movmi	r5, #0
 1024d88:	f53f ae29 	bmi.w	10249de <_vfiprintf_r+0x26e>
 1024d8c:	2500      	movs	r5, #0
 1024d8e:	ea54 0205 	orrs.w	r2, r4, r5
 1024d92:	f006 0201 	and.w	r2, r6, #1
 1024d96:	bf08      	it	eq
 1024d98:	2200      	moveq	r2, #0
 1024d9a:	2a00      	cmp	r2, #0
 1024d9c:	f43f ae28 	beq.w	10249f0 <_vfiprintf_r+0x280>
 1024da0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 1024da4:	f046 0602 	orr.w	r6, r6, #2
 1024da8:	2330      	movs	r3, #48	; 0x30
 1024daa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 1024dae:	e61f      	b.n	10249f0 <_vfiprintf_r+0x280>
 1024db0:	06b1      	lsls	r1, r6, #26
 1024db2:	f046 0310 	orr.w	r3, r6, #16
 1024db6:	9302      	str	r3, [sp, #8]
 1024db8:	f100 80da 	bmi.w	1024f70 <_vfiprintf_r+0x800>
 1024dbc:	9b07      	ldr	r3, [sp, #28]
 1024dbe:	1d1a      	adds	r2, r3, #4
 1024dc0:	9b07      	ldr	r3, [sp, #28]
 1024dc2:	2500      	movs	r5, #0
 1024dc4:	9207      	str	r2, [sp, #28]
 1024dc6:	681c      	ldr	r4, [r3, #0]
 1024dc8:	2301      	movs	r3, #1
 1024dca:	e615      	b.n	10249f8 <_vfiprintf_r+0x288>
 1024dcc:	9d07      	ldr	r5, [sp, #28]
 1024dce:	2200      	movs	r2, #0
 1024dd0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1024dd4:	f855 1b04 	ldr.w	r1, [r5], #4
 1024dd8:	910b      	str	r1, [sp, #44]	; 0x2c
 1024dda:	2900      	cmp	r1, #0
 1024ddc:	f000 8373 	beq.w	10254c6 <_vfiprintf_r+0xd56>
 1024de0:	2b53      	cmp	r3, #83	; 0x53
 1024de2:	f000 82ff 	beq.w	10253e4 <_vfiprintf_r+0xc74>
 1024de6:	f016 0410 	ands.w	r4, r6, #16
 1024dea:	f040 82fb 	bne.w	10253e4 <_vfiprintf_r+0xc74>
 1024dee:	f1ba 3fff 	cmp.w	sl, #4294967295
 1024df2:	f000 8420 	beq.w	1025636 <_vfiprintf_r+0xec6>
 1024df6:	4652      	mov	r2, sl
 1024df8:	4621      	mov	r1, r4
 1024dfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1024dfc:	f7fd fdc8 	bl	1022990 <memchr>
 1024e00:	9008      	str	r0, [sp, #32]
 1024e02:	2800      	cmp	r0, #0
 1024e04:	f000 840e 	beq.w	1025624 <_vfiprintf_r+0xeb4>
 1024e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1024e0a:	46a2      	mov	sl, r4
 1024e0c:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1024e10:	1a83      	subs	r3, r0, r2
 1024e12:	9304      	str	r3, [sp, #16]
 1024e14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1024e18:	9302      	str	r3, [sp, #8]
 1024e1a:	e61d      	b.n	1024a58 <_vfiprintf_r+0x2e8>
 1024e1c:	06b2      	lsls	r2, r6, #26
 1024e1e:	f046 0310 	orr.w	r3, r6, #16
 1024e22:	9302      	str	r3, [sp, #8]
 1024e24:	d47b      	bmi.n	1024f1e <_vfiprintf_r+0x7ae>
 1024e26:	9b07      	ldr	r3, [sp, #28]
 1024e28:	1d1a      	adds	r2, r3, #4
 1024e2a:	9b07      	ldr	r3, [sp, #28]
 1024e2c:	9207      	str	r2, [sp, #28]
 1024e2e:	681c      	ldr	r4, [r3, #0]
 1024e30:	17e5      	asrs	r5, r4, #31
 1024e32:	4622      	mov	r2, r4
 1024e34:	462b      	mov	r3, r5
 1024e36:	e07c      	b.n	1024f32 <_vfiprintf_r+0x7c2>
 1024e38:	9a07      	ldr	r2, [sp, #28]
 1024e3a:	2b43      	cmp	r3, #67	; 0x43
 1024e3c:	f102 0404 	add.w	r4, r2, #4
 1024e40:	d002      	beq.n	1024e48 <_vfiprintf_r+0x6d8>
 1024e42:	06f1      	lsls	r1, r6, #27
 1024e44:	f140 82b5 	bpl.w	10253b2 <_vfiprintf_r+0xc42>
 1024e48:	2208      	movs	r2, #8
 1024e4a:	2100      	movs	r1, #0
 1024e4c:	a818      	add	r0, sp, #96	; 0x60
 1024e4e:	ad2d      	add	r5, sp, #180	; 0xb4
 1024e50:	f7f7 f92e 	bl	101c0b0 <memset>
 1024e54:	9a07      	ldr	r2, [sp, #28]
 1024e56:	ab18      	add	r3, sp, #96	; 0x60
 1024e58:	4629      	mov	r1, r5
 1024e5a:	4658      	mov	r0, fp
 1024e5c:	6812      	ldr	r2, [r2, #0]
 1024e5e:	f7fb fe0d 	bl	1020a7c <_wcrtomb_r>
 1024e62:	1c43      	adds	r3, r0, #1
 1024e64:	9004      	str	r0, [sp, #16]
 1024e66:	f000 8413 	beq.w	1025690 <_vfiprintf_r+0xf20>
 1024e6a:	9b04      	ldr	r3, [sp, #16]
 1024e6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1024e70:	9302      	str	r3, [sp, #8]
 1024e72:	2300      	movs	r3, #0
 1024e74:	9407      	str	r4, [sp, #28]
 1024e76:	950b      	str	r5, [sp, #44]	; 0x2c
 1024e78:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1024e7c:	e04a      	b.n	1024f14 <_vfiprintf_r+0x7a4>
 1024e7e:	06b1      	lsls	r1, r6, #26
 1024e80:	f046 0310 	orr.w	r3, r6, #16
 1024e84:	d47e      	bmi.n	1024f84 <_vfiprintf_r+0x814>
 1024e86:	9a07      	ldr	r2, [sp, #28]
 1024e88:	3204      	adds	r2, #4
 1024e8a:	9907      	ldr	r1, [sp, #28]
 1024e8c:	2500      	movs	r5, #0
 1024e8e:	9207      	str	r2, [sp, #28]
 1024e90:	680c      	ldr	r4, [r1, #0]
 1024e92:	e07e      	b.n	1024f92 <_vfiprintf_r+0x822>
 1024e94:	9a07      	ldr	r2, [sp, #28]
 1024e96:	06b1      	lsls	r1, r6, #26
 1024e98:	f102 0304 	add.w	r3, r2, #4
 1024e9c:	f100 8278 	bmi.w	1025390 <_vfiprintf_r+0xc20>
 1024ea0:	06f5      	lsls	r5, r6, #27
 1024ea2:	f100 8309 	bmi.w	10254b8 <_vfiprintf_r+0xd48>
 1024ea6:	0674      	lsls	r4, r6, #25
 1024ea8:	f100 83a2 	bmi.w	10255f0 <_vfiprintf_r+0xe80>
 1024eac:	05b0      	lsls	r0, r6, #22
 1024eae:	f140 8303 	bpl.w	10254b8 <_vfiprintf_r+0xd48>
 1024eb2:	9a07      	ldr	r2, [sp, #28]
 1024eb4:	9307      	str	r3, [sp, #28]
 1024eb6:	9b03      	ldr	r3, [sp, #12]
 1024eb8:	6812      	ldr	r2, [r2, #0]
 1024eba:	7013      	strb	r3, [r2, #0]
 1024ebc:	e498      	b.n	10247f0 <_vfiprintf_r+0x80>
 1024ebe:	06b2      	lsls	r2, r6, #26
 1024ec0:	d45f      	bmi.n	1024f82 <_vfiprintf_r+0x812>
 1024ec2:	9a07      	ldr	r2, [sp, #28]
 1024ec4:	06f3      	lsls	r3, r6, #27
 1024ec6:	f852 4b04 	ldr.w	r4, [r2], #4
 1024eca:	f100 840c 	bmi.w	10256e6 <_vfiprintf_r+0xf76>
 1024ece:	0675      	lsls	r5, r6, #25
 1024ed0:	f140 8353 	bpl.w	102557a <_vfiprintf_r+0xe0a>
 1024ed4:	4633      	mov	r3, r6
 1024ed6:	9207      	str	r2, [sp, #28]
 1024ed8:	b2a4      	uxth	r4, r4
 1024eda:	2500      	movs	r5, #0
 1024edc:	e059      	b.n	1024f92 <_vfiprintf_r+0x822>
 1024ede:	783b      	ldrb	r3, [r7, #0]
 1024ee0:	2b6c      	cmp	r3, #108	; 0x6c
 1024ee2:	bf09      	itett	eq
 1024ee4:	f046 0620 	orreq.w	r6, r6, #32
 1024ee8:	f046 0610 	orrne.w	r6, r6, #16
 1024eec:	787b      	ldrbeq	r3, [r7, #1]
 1024eee:	3701      	addeq	r7, #1
 1024ef0:	e4ac      	b.n	102484c <_vfiprintf_r+0xdc>
 1024ef2:	4658      	mov	r0, fp
 1024ef4:	f7fd f90a 	bl	102210c <__sinit>
 1024ef8:	e44f      	b.n	102479a <_vfiprintf_r+0x2a>
 1024efa:	2b00      	cmp	r3, #0
 1024efc:	f43f ad4f 	beq.w	102499e <_vfiprintf_r+0x22e>
 1024f00:	2201      	movs	r2, #1
 1024f02:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1024f06:	9202      	str	r2, [sp, #8]
 1024f08:	2300      	movs	r3, #0
 1024f0a:	9204      	str	r2, [sp, #16]
 1024f0c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1024f10:	ab2d      	add	r3, sp, #180	; 0xb4
 1024f12:	930b      	str	r3, [sp, #44]	; 0x2c
 1024f14:	2300      	movs	r3, #0
 1024f16:	9308      	str	r3, [sp, #32]
 1024f18:	469a      	mov	sl, r3
 1024f1a:	e5a3      	b.n	1024a64 <_vfiprintf_r+0x2f4>
 1024f1c:	9602      	str	r6, [sp, #8]
 1024f1e:	9d07      	ldr	r5, [sp, #28]
 1024f20:	3507      	adds	r5, #7
 1024f22:	f025 0307 	bic.w	r3, r5, #7
 1024f26:	4619      	mov	r1, r3
 1024f28:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 1024f2c:	4614      	mov	r4, r2
 1024f2e:	461d      	mov	r5, r3
 1024f30:	9107      	str	r1, [sp, #28]
 1024f32:	2a00      	cmp	r2, #0
 1024f34:	f173 0300 	sbcs.w	r3, r3, #0
 1024f38:	f6ff aee3 	blt.w	1024d02 <_vfiprintf_r+0x592>
 1024f3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 1024f40:	f000 81f3 	beq.w	102532a <_vfiprintf_r+0xbba>
 1024f44:	ea54 0305 	orrs.w	r3, r4, r5
 1024f48:	9b02      	ldr	r3, [sp, #8]
 1024f4a:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 1024f4e:	bf14      	ite	ne
 1024f50:	2301      	movne	r3, #1
 1024f52:	2300      	moveq	r3, #0
 1024f54:	f1ba 0f00 	cmp.w	sl, #0
 1024f58:	bf18      	it	ne
 1024f5a:	2301      	movne	r3, #1
 1024f5c:	2b00      	cmp	r3, #0
 1024f5e:	f040 81e3 	bne.w	1025328 <_vfiprintf_r+0xbb8>
 1024f62:	469a      	mov	sl, r3
 1024f64:	ab46      	add	r3, sp, #280	; 0x118
 1024f66:	f8cd a010 	str.w	sl, [sp, #16]
 1024f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 1024f6c:	e56d      	b.n	1024a4a <_vfiprintf_r+0x2da>
 1024f6e:	9602      	str	r6, [sp, #8]
 1024f70:	9d07      	ldr	r5, [sp, #28]
 1024f72:	2301      	movs	r3, #1
 1024f74:	3507      	adds	r5, #7
 1024f76:	f025 0207 	bic.w	r2, r5, #7
 1024f7a:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1024f7e:	9207      	str	r2, [sp, #28]
 1024f80:	e53a      	b.n	10249f8 <_vfiprintf_r+0x288>
 1024f82:	4633      	mov	r3, r6
 1024f84:	9d07      	ldr	r5, [sp, #28]
 1024f86:	3507      	adds	r5, #7
 1024f88:	f025 0207 	bic.w	r2, r5, #7
 1024f8c:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1024f90:	9207      	str	r2, [sp, #28]
 1024f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 1024f96:	9302      	str	r3, [sp, #8]
 1024f98:	2300      	movs	r3, #0
 1024f9a:	e52d      	b.n	10249f8 <_vfiprintf_r+0x288>
 1024f9c:	4611      	mov	r1, r2
 1024f9e:	08e2      	lsrs	r2, r4, #3
 1024fa0:	08e8      	lsrs	r0, r5, #3
 1024fa2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1024fa6:	f004 0307 	and.w	r3, r4, #7
 1024faa:	4605      	mov	r5, r0
 1024fac:	3330      	adds	r3, #48	; 0x30
 1024fae:	4614      	mov	r4, r2
 1024fb0:	ea54 0005 	orrs.w	r0, r4, r5
 1024fb4:	f801 3c01 	strb.w	r3, [r1, #-1]
 1024fb8:	f101 32ff 	add.w	r2, r1, #4294967295
 1024fbc:	d1ee      	bne.n	1024f9c <_vfiprintf_r+0x82c>
 1024fbe:	9e02      	ldr	r6, [sp, #8]
 1024fc0:	920b      	str	r2, [sp, #44]	; 0x2c
 1024fc2:	4630      	mov	r0, r6
 1024fc4:	2b30      	cmp	r3, #48	; 0x30
 1024fc6:	bf0c      	ite	eq
 1024fc8:	2000      	moveq	r0, #0
 1024fca:	f000 0001 	andne.w	r0, r0, #1
 1024fce:	2800      	cmp	r0, #0
 1024fd0:	f040 8266 	bne.w	10254a0 <_vfiprintf_r+0xd30>
 1024fd4:	ab46      	add	r3, sp, #280	; 0x118
 1024fd6:	1a9b      	subs	r3, r3, r2
 1024fd8:	9304      	str	r3, [sp, #16]
 1024fda:	e536      	b.n	1024a4a <_vfiprintf_r+0x2da>
 1024fdc:	9b05      	ldr	r3, [sp, #20]
 1024fde:	9c02      	ldr	r4, [sp, #8]
 1024fe0:	1b1c      	subs	r4, r3, r4
 1024fe2:	2c00      	cmp	r4, #0
 1024fe4:	f77f ad94 	ble.w	1024b10 <_vfiprintf_r+0x3a0>
 1024fe8:	2c10      	cmp	r4, #16
 1024fea:	4dbe      	ldr	r5, [pc, #760]	; (10252e4 <_vfiprintf_r+0xb74>)
 1024fec:	f340 834d 	ble.w	102568a <_vfiprintf_r+0xf1a>
 1024ff0:	9609      	str	r6, [sp, #36]	; 0x24
 1024ff2:	4666      	mov	r6, ip
 1024ff4:	970a      	str	r7, [sp, #40]	; 0x28
 1024ff6:	462f      	mov	r7, r5
 1024ff8:	9d06      	ldr	r5, [sp, #24]
 1024ffa:	e00a      	b.n	1025012 <_vfiprintf_r+0x8a2>
 1024ffc:	f7ff fb74 	bl	10246e8 <__sprint_r.part.0>
 1025000:	2800      	cmp	r0, #0
 1025002:	f040 809c 	bne.w	102513e <_vfiprintf_r+0x9ce>
 1025006:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 102500a:	1c51      	adds	r1, r2, #1
 102500c:	3c10      	subs	r4, #16
 102500e:	2c10      	cmp	r4, #16
 1025010:	dd1c      	ble.n	102504c <_vfiprintf_r+0x8dc>
 1025012:	1c50      	adds	r0, r2, #1
 1025014:	3610      	adds	r6, #16
 1025016:	2807      	cmp	r0, #7
 1025018:	f8c9 7000 	str.w	r7, [r9]
 102501c:	f102 0102 	add.w	r1, r2, #2
 1025020:	f04f 0310 	mov.w	r3, #16
 1025024:	961c      	str	r6, [sp, #112]	; 0x70
 1025026:	4602      	mov	r2, r0
 1025028:	f8c9 3004 	str.w	r3, [r9, #4]
 102502c:	f109 0908 	add.w	r9, r9, #8
 1025030:	901b      	str	r0, [sp, #108]	; 0x6c
 1025032:	ddeb      	ble.n	102500c <_vfiprintf_r+0x89c>
 1025034:	aa1a      	add	r2, sp, #104	; 0x68
 1025036:	4629      	mov	r1, r5
 1025038:	4658      	mov	r0, fp
 102503a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 102503e:	2e00      	cmp	r6, #0
 1025040:	d1dc      	bne.n	1024ffc <_vfiprintf_r+0x88c>
 1025042:	3c10      	subs	r4, #16
 1025044:	2101      	movs	r1, #1
 1025046:	2c10      	cmp	r4, #16
 1025048:	4632      	mov	r2, r6
 102504a:	dce2      	bgt.n	1025012 <_vfiprintf_r+0x8a2>
 102504c:	46b4      	mov	ip, r6
 102504e:	463d      	mov	r5, r7
 1025050:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1025052:	f109 0308 	add.w	r3, r9, #8
 1025056:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 1025058:	2907      	cmp	r1, #7
 102505a:	44a4      	add	ip, r4
 102505c:	f8c9 5000 	str.w	r5, [r9]
 1025060:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1025064:	f8c9 4004 	str.w	r4, [r9, #4]
 1025068:	911b      	str	r1, [sp, #108]	; 0x6c
 102506a:	f340 818a 	ble.w	1025382 <_vfiprintf_r+0xc12>
 102506e:	f1bc 0f00 	cmp.w	ip, #0
 1025072:	f000 82ac 	beq.w	10255ce <_vfiprintf_r+0xe5e>
 1025076:	aa1a      	add	r2, sp, #104	; 0x68
 1025078:	9906      	ldr	r1, [sp, #24]
 102507a:	4658      	mov	r0, fp
 102507c:	f7ff fb34 	bl	10246e8 <__sprint_r.part.0>
 1025080:	2800      	cmp	r0, #0
 1025082:	d15c      	bne.n	102513e <_vfiprintf_r+0x9ce>
 1025084:	9b04      	ldr	r3, [sp, #16]
 1025086:	a91f      	add	r1, sp, #124	; 0x7c
 1025088:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 102508a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 102508e:	ebaa 0403 	sub.w	r4, sl, r3
 1025092:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1025096:	2c00      	cmp	r4, #0
 1025098:	f102 0001 	add.w	r0, r2, #1
 102509c:	f77f ad3e 	ble.w	1024b1c <_vfiprintf_r+0x3ac>
 10250a0:	2c10      	cmp	r4, #16
 10250a2:	4d90      	ldr	r5, [pc, #576]	; (10252e4 <_vfiprintf_r+0xb74>)
 10250a4:	f340 827c 	ble.w	10255a0 <_vfiprintf_r+0xe30>
 10250a8:	9609      	str	r6, [sp, #36]	; 0x24
 10250aa:	f04f 0a10 	mov.w	sl, #16
 10250ae:	970a      	str	r7, [sp, #40]	; 0x28
 10250b0:	4666      	mov	r6, ip
 10250b2:	462f      	mov	r7, r5
 10250b4:	9d06      	ldr	r5, [sp, #24]
 10250b6:	e009      	b.n	10250cc <_vfiprintf_r+0x95c>
 10250b8:	f7ff fb16 	bl	10246e8 <__sprint_r.part.0>
 10250bc:	2800      	cmp	r0, #0
 10250be:	d13e      	bne.n	102513e <_vfiprintf_r+0x9ce>
 10250c0:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 10250c4:	1c50      	adds	r0, r2, #1
 10250c6:	3c10      	subs	r4, #16
 10250c8:	2c10      	cmp	r4, #16
 10250ca:	dd1a      	ble.n	1025102 <_vfiprintf_r+0x992>
 10250cc:	1c51      	adds	r1, r2, #1
 10250ce:	3610      	adds	r6, #16
 10250d0:	2907      	cmp	r1, #7
 10250d2:	f8c9 7000 	str.w	r7, [r9]
 10250d6:	f102 0002 	add.w	r0, r2, #2
 10250da:	f8c9 a004 	str.w	sl, [r9, #4]
 10250de:	961c      	str	r6, [sp, #112]	; 0x70
 10250e0:	460a      	mov	r2, r1
 10250e2:	f109 0908 	add.w	r9, r9, #8
 10250e6:	911b      	str	r1, [sp, #108]	; 0x6c
 10250e8:	dded      	ble.n	10250c6 <_vfiprintf_r+0x956>
 10250ea:	aa1a      	add	r2, sp, #104	; 0x68
 10250ec:	4629      	mov	r1, r5
 10250ee:	4658      	mov	r0, fp
 10250f0:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10250f4:	2e00      	cmp	r6, #0
 10250f6:	d1df      	bne.n	10250b8 <_vfiprintf_r+0x948>
 10250f8:	3c10      	subs	r4, #16
 10250fa:	2001      	movs	r0, #1
 10250fc:	2c10      	cmp	r4, #16
 10250fe:	4632      	mov	r2, r6
 1025100:	dce4      	bgt.n	10250cc <_vfiprintf_r+0x95c>
 1025102:	46b4      	mov	ip, r6
 1025104:	463d      	mov	r5, r7
 1025106:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1025108:	f109 0308 	add.w	r3, r9, #8
 102510c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 102510e:	2807      	cmp	r0, #7
 1025110:	44a4      	add	ip, r4
 1025112:	f8c9 5000 	str.w	r5, [r9]
 1025116:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 102511a:	f8c9 4004 	str.w	r4, [r9, #4]
 102511e:	901b      	str	r0, [sp, #108]	; 0x6c
 1025120:	f300 80e8 	bgt.w	10252f4 <_vfiprintf_r+0xb84>
 1025124:	3001      	adds	r0, #1
 1025126:	f103 0108 	add.w	r1, r3, #8
 102512a:	4699      	mov	r9, r3
 102512c:	e4f6      	b.n	1024b1c <_vfiprintf_r+0x3ac>
 102512e:	aa1a      	add	r2, sp, #104	; 0x68
 1025130:	9906      	ldr	r1, [sp, #24]
 1025132:	4658      	mov	r0, fp
 1025134:	f7ff fad8 	bl	10246e8 <__sprint_r.part.0>
 1025138:	2800      	cmp	r0, #0
 102513a:	f43f ad1b 	beq.w	1024b74 <_vfiprintf_r+0x404>
 102513e:	9b08      	ldr	r3, [sp, #32]
 1025140:	2b00      	cmp	r3, #0
 1025142:	f43f ac30 	beq.w	10249a6 <_vfiprintf_r+0x236>
 1025146:	9908      	ldr	r1, [sp, #32]
 1025148:	4658      	mov	r0, fp
 102514a:	f7fd f859 	bl	1022200 <_free_r>
 102514e:	e42a      	b.n	10249a6 <_vfiprintf_r+0x236>
 1025150:	f1bc 0f00 	cmp.w	ip, #0
 1025154:	d00e      	beq.n	1025174 <_vfiprintf_r+0xa04>
 1025156:	aa1a      	add	r2, sp, #104	; 0x68
 1025158:	9906      	ldr	r1, [sp, #24]
 102515a:	4658      	mov	r0, fp
 102515c:	f7ff fac4 	bl	10246e8 <__sprint_r.part.0>
 1025160:	2800      	cmp	r0, #0
 1025162:	d1ec      	bne.n	102513e <_vfiprintf_r+0x9ce>
 1025164:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1025166:	a91f      	add	r1, sp, #124	; 0x7c
 1025168:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 102516c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1025170:	1c50      	adds	r0, r2, #1
 1025172:	e4a6      	b.n	1024ac2 <_vfiprintf_r+0x352>
 1025174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1025176:	2b00      	cmp	r3, #0
 1025178:	f000 8114 	beq.w	10253a4 <_vfiprintf_r+0xc34>
 102517c:	a91f      	add	r1, sp, #124	; 0x7c
 102517e:	2302      	movs	r3, #2
 1025180:	4610      	mov	r0, r2
 1025182:	931e      	str	r3, [sp, #120]	; 0x78
 1025184:	469c      	mov	ip, r3
 1025186:	ab13      	add	r3, sp, #76	; 0x4c
 1025188:	931d      	str	r3, [sp, #116]	; 0x74
 102518a:	4602      	mov	r2, r0
 102518c:	4689      	mov	r9, r1
 102518e:	3001      	adds	r0, #1
 1025190:	3108      	adds	r1, #8
 1025192:	e4b9      	b.n	1024b08 <_vfiprintf_r+0x398>
 1025194:	2c10      	cmp	r4, #16
 1025196:	f246 6578 	movw	r5, #26232	; 0x6678
 102519a:	f2c0 1506 	movt	r5, #262	; 0x106
 102519e:	f340 8256 	ble.w	102564e <_vfiprintf_r+0xede>
 10251a2:	9610      	str	r6, [sp, #64]	; 0x40
 10251a4:	2310      	movs	r3, #16
 10251a6:	9711      	str	r7, [sp, #68]	; 0x44
 10251a8:	4666      	mov	r6, ip
 10251aa:	9f06      	ldr	r7, [sp, #24]
 10251ac:	e00c      	b.n	10251c8 <_vfiprintf_r+0xa58>
 10251ae:	f7ff fa9b 	bl	10246e8 <__sprint_r.part.0>
 10251b2:	2800      	cmp	r0, #0
 10251b4:	d1c3      	bne.n	102513e <_vfiprintf_r+0x9ce>
 10251b6:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 10251ba:	2310      	movs	r3, #16
 10251bc:	f102 0e01 	add.w	lr, r2, #1
 10251c0:	3c10      	subs	r4, #16
 10251c2:	1c51      	adds	r1, r2, #1
 10251c4:	2c10      	cmp	r4, #16
 10251c6:	dd1d      	ble.n	1025204 <_vfiprintf_r+0xa94>
 10251c8:	2907      	cmp	r1, #7
 10251ca:	f106 0610 	add.w	r6, r6, #16
 10251ce:	f8c9 5000 	str.w	r5, [r9]
 10251d2:	f102 0e02 	add.w	lr, r2, #2
 10251d6:	f8c9 3004 	str.w	r3, [r9, #4]
 10251da:	460a      	mov	r2, r1
 10251dc:	961c      	str	r6, [sp, #112]	; 0x70
 10251de:	f109 0908 	add.w	r9, r9, #8
 10251e2:	911b      	str	r1, [sp, #108]	; 0x6c
 10251e4:	ddec      	ble.n	10251c0 <_vfiprintf_r+0xa50>
 10251e6:	aa1a      	add	r2, sp, #104	; 0x68
 10251e8:	4639      	mov	r1, r7
 10251ea:	4658      	mov	r0, fp
 10251ec:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10251f0:	2e00      	cmp	r6, #0
 10251f2:	d1dc      	bne.n	10251ae <_vfiprintf_r+0xa3e>
 10251f4:	3c10      	subs	r4, #16
 10251f6:	4632      	mov	r2, r6
 10251f8:	2c10      	cmp	r4, #16
 10251fa:	f04f 0e01 	mov.w	lr, #1
 10251fe:	f102 0101 	add.w	r1, r2, #1
 1025202:	dce1      	bgt.n	10251c8 <_vfiprintf_r+0xa58>
 1025204:	46b4      	mov	ip, r6
 1025206:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 102520a:	f1be 0f07 	cmp.w	lr, #7
 102520e:	44a4      	add	ip, r4
 1025210:	f8c9 5000 	str.w	r5, [r9]
 1025214:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1025218:	f8c9 4004 	str.w	r4, [r9, #4]
 102521c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 1025220:	f300 809a 	bgt.w	1025358 <_vfiprintf_r+0xbe8>
 1025224:	f109 0908 	add.w	r9, r9, #8
 1025228:	f10e 0001 	add.w	r0, lr, #1
 102522c:	4672      	mov	r2, lr
 102522e:	e430      	b.n	1024a92 <_vfiprintf_r+0x322>
 1025230:	0771      	lsls	r1, r6, #29
 1025232:	931b      	str	r3, [sp, #108]	; 0x6c
 1025234:	d54c      	bpl.n	10252d0 <_vfiprintf_r+0xb60>
 1025236:	9a05      	ldr	r2, [sp, #20]
 1025238:	9902      	ldr	r1, [sp, #8]
 102523a:	1a54      	subs	r4, r2, r1
 102523c:	2c00      	cmp	r4, #0
 102523e:	dd47      	ble.n	10252d0 <_vfiprintf_r+0xb60>
 1025240:	a91d      	add	r1, sp, #116	; 0x74
 1025242:	2c10      	cmp	r4, #16
 1025244:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1025246:	f340 8204 	ble.w	1025652 <_vfiprintf_r+0xee2>
 102524a:	f246 6578 	movw	r5, #26232	; 0x6678
 102524e:	2610      	movs	r6, #16
 1025250:	f2c0 1506 	movt	r5, #262	; 0x106
 1025254:	f8dd 9018 	ldr.w	r9, [sp, #24]
 1025258:	e00c      	b.n	1025274 <_vfiprintf_r+0xb04>
 102525a:	f7ff fa45 	bl	10246e8 <__sprint_r.part.0>
 102525e:	a91d      	add	r1, sp, #116	; 0x74
 1025260:	2800      	cmp	r0, #0
 1025262:	f47f af6c 	bne.w	102513e <_vfiprintf_r+0x9ce>
 1025266:	e9dd 031b 	ldrd	r0, r3, [sp, #108]	; 0x6c
 102526a:	f100 0c01 	add.w	ip, r0, #1
 102526e:	3c10      	subs	r4, #16
 1025270:	2c10      	cmp	r4, #16
 1025272:	dd18      	ble.n	10252a6 <_vfiprintf_r+0xb36>
 1025274:	1c42      	adds	r2, r0, #1
 1025276:	3310      	adds	r3, #16
 1025278:	2a07      	cmp	r2, #7
 102527a:	600d      	str	r5, [r1, #0]
 102527c:	f100 0c02 	add.w	ip, r0, #2
 1025280:	604e      	str	r6, [r1, #4]
 1025282:	931c      	str	r3, [sp, #112]	; 0x70
 1025284:	4610      	mov	r0, r2
 1025286:	f101 0108 	add.w	r1, r1, #8
 102528a:	921b      	str	r2, [sp, #108]	; 0x6c
 102528c:	ddef      	ble.n	102526e <_vfiprintf_r+0xafe>
 102528e:	aa1a      	add	r2, sp, #104	; 0x68
 1025290:	4649      	mov	r1, r9
 1025292:	4658      	mov	r0, fp
 1025294:	2b00      	cmp	r3, #0
 1025296:	d1e0      	bne.n	102525a <_vfiprintf_r+0xaea>
 1025298:	3c10      	subs	r4, #16
 102529a:	f04f 0c01 	mov.w	ip, #1
 102529e:	2c10      	cmp	r4, #16
 10252a0:	4618      	mov	r0, r3
 10252a2:	a91d      	add	r1, sp, #116	; 0x74
 10252a4:	dce6      	bgt.n	1025274 <_vfiprintf_r+0xb04>
 10252a6:	f1bc 0f07 	cmp.w	ip, #7
 10252aa:	4423      	add	r3, r4
 10252ac:	600d      	str	r5, [r1, #0]
 10252ae:	931c      	str	r3, [sp, #112]	; 0x70
 10252b0:	604c      	str	r4, [r1, #4]
 10252b2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 10252b6:	f77f ac52 	ble.w	1024b5e <_vfiprintf_r+0x3ee>
 10252ba:	b14b      	cbz	r3, 10252d0 <_vfiprintf_r+0xb60>
 10252bc:	aa1a      	add	r2, sp, #104	; 0x68
 10252be:	9906      	ldr	r1, [sp, #24]
 10252c0:	4658      	mov	r0, fp
 10252c2:	f7ff fa11 	bl	10246e8 <__sprint_r.part.0>
 10252c6:	2800      	cmp	r0, #0
 10252c8:	f47f af39 	bne.w	102513e <_vfiprintf_r+0x9ce>
 10252cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 10252ce:	e446      	b.n	1024b5e <_vfiprintf_r+0x3ee>
 10252d0:	9b03      	ldr	r3, [sp, #12]
 10252d2:	9a05      	ldr	r2, [sp, #20]
 10252d4:	9902      	ldr	r1, [sp, #8]
 10252d6:	428a      	cmp	r2, r1
 10252d8:	bfac      	ite	ge
 10252da:	189b      	addge	r3, r3, r2
 10252dc:	185b      	addlt	r3, r3, r1
 10252de:	9303      	str	r3, [sp, #12]
 10252e0:	e448      	b.n	1024b74 <_vfiprintf_r+0x404>
 10252e2:	bf00      	nop
 10252e4:	01066688 	.word	0x01066688
 10252e8:	ab46      	add	r3, sp, #280	; 0x118
 10252ea:	4692      	mov	sl, r2
 10252ec:	930b      	str	r3, [sp, #44]	; 0x2c
 10252ee:	9204      	str	r2, [sp, #16]
 10252f0:	f7ff bbab 	b.w	1024a4a <_vfiprintf_r+0x2da>
 10252f4:	f1bc 0f00 	cmp.w	ip, #0
 10252f8:	f000 80c8 	beq.w	102548c <_vfiprintf_r+0xd1c>
 10252fc:	aa1a      	add	r2, sp, #104	; 0x68
 10252fe:	9906      	ldr	r1, [sp, #24]
 1025300:	4658      	mov	r0, fp
 1025302:	f7ff f9f1 	bl	10246e8 <__sprint_r.part.0>
 1025306:	2800      	cmp	r0, #0
 1025308:	f47f af19 	bne.w	102513e <_vfiprintf_r+0x9ce>
 102530c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 102530e:	a91f      	add	r1, sp, #124	; 0x7c
 1025310:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1025314:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1025318:	3001      	adds	r0, #1
 102531a:	f7ff bbff 	b.w	1024b1c <_vfiprintf_r+0x3ac>
 102531e:	921b      	str	r2, [sp, #108]	; 0x6c
 1025320:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1025324:	f7ff bb35 	b.w	1024992 <_vfiprintf_r+0x222>
 1025328:	9602      	str	r6, [sp, #8]
 102532a:	2d00      	cmp	r5, #0
 102532c:	bf08      	it	eq
 102532e:	2c0a      	cmpeq	r4, #10
 1025330:	f080 80d6 	bcs.w	10254e0 <_vfiprintf_r+0xd70>
 1025334:	2301      	movs	r3, #1
 1025336:	3430      	adds	r4, #48	; 0x30
 1025338:	9304      	str	r3, [sp, #16]
 102533a:	f20d 1317 	addw	r3, sp, #279	; 0x117
 102533e:	9e02      	ldr	r6, [sp, #8]
 1025340:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1025344:	930b      	str	r3, [sp, #44]	; 0x2c
 1025346:	f7ff bb80 	b.w	1024a4a <_vfiprintf_r+0x2da>
 102534a:	a91f      	add	r1, sp, #124	; 0x7c
 102534c:	2001      	movs	r0, #1
 102534e:	4662      	mov	r2, ip
 1025350:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1025354:	f7ff bbd8 	b.w	1024b08 <_vfiprintf_r+0x398>
 1025358:	f1bc 0f00 	cmp.w	ip, #0
 102535c:	d032      	beq.n	10253c4 <_vfiprintf_r+0xc54>
 102535e:	aa1a      	add	r2, sp, #104	; 0x68
 1025360:	9906      	ldr	r1, [sp, #24]
 1025362:	4658      	mov	r0, fp
 1025364:	f7ff f9c0 	bl	10246e8 <__sprint_r.part.0>
 1025368:	2800      	cmp	r0, #0
 102536a:	f47f aee8 	bne.w	102513e <_vfiprintf_r+0x9ce>
 102536e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1025370:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1025374:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1025378:	1c50      	adds	r0, r2, #1
 102537a:	f7ff bb8a 	b.w	1024a92 <_vfiprintf_r+0x322>
 102537e:	9602      	str	r6, [sp, #8]
 1025380:	e4cc      	b.n	1024d1c <_vfiprintf_r+0x5ac>
 1025382:	1c48      	adds	r0, r1, #1
 1025384:	460a      	mov	r2, r1
 1025386:	4699      	mov	r9, r3
 1025388:	f103 0108 	add.w	r1, r3, #8
 102538c:	f7ff bbc0 	b.w	1024b10 <_vfiprintf_r+0x3a0>
 1025390:	9903      	ldr	r1, [sp, #12]
 1025392:	6812      	ldr	r2, [r2, #0]
 1025394:	9307      	str	r3, [sp, #28]
 1025396:	17cd      	asrs	r5, r1, #31
 1025398:	4608      	mov	r0, r1
 102539a:	4629      	mov	r1, r5
 102539c:	e9c2 0100 	strd	r0, r1, [r2]
 10253a0:	f7ff ba26 	b.w	10247f0 <_vfiprintf_r+0x80>
 10253a4:	4610      	mov	r0, r2
 10253a6:	a91f      	add	r1, sp, #124	; 0x7c
 10253a8:	4662      	mov	r2, ip
 10253aa:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10253ae:	f7ff bbab 	b.w	1024b08 <_vfiprintf_r+0x398>
 10253b2:	9b07      	ldr	r3, [sp, #28]
 10253b4:	2201      	movs	r2, #1
 10253b6:	ad2d      	add	r5, sp, #180	; 0xb4
 10253b8:	9202      	str	r2, [sp, #8]
 10253ba:	9204      	str	r2, [sp, #16]
 10253bc:	681b      	ldr	r3, [r3, #0]
 10253be:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 10253c2:	e556      	b.n	1024e72 <_vfiprintf_r+0x702>
 10253c4:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 10253c8:	2a00      	cmp	r2, #0
 10253ca:	f040 8107 	bne.w	10255dc <_vfiprintf_r+0xe6c>
 10253ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10253d0:	2b00      	cmp	r3, #0
 10253d2:	f040 8165 	bne.w	10256a0 <_vfiprintf_r+0xf30>
 10253d6:	4662      	mov	r2, ip
 10253d8:	a91f      	add	r1, sp, #124	; 0x7c
 10253da:	2001      	movs	r0, #1
 10253dc:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10253e0:	f7ff bb96 	b.w	1024b10 <_vfiprintf_r+0x3a0>
 10253e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10253e6:	2208      	movs	r2, #8
 10253e8:	2100      	movs	r1, #0
 10253ea:	a818      	add	r0, sp, #96	; 0x60
 10253ec:	9315      	str	r3, [sp, #84]	; 0x54
 10253ee:	f7f6 fe5f 	bl	101c0b0 <memset>
 10253f2:	f1ba 3fff 	cmp.w	sl, #4294967295
 10253f6:	f000 80d5 	beq.w	10255a4 <_vfiprintf_r+0xe34>
 10253fa:	2400      	movs	r4, #0
 10253fc:	9602      	str	r6, [sp, #8]
 10253fe:	9507      	str	r5, [sp, #28]
 1025400:	4626      	mov	r6, r4
 1025402:	e009      	b.n	1025418 <_vfiprintf_r+0xca8>
 1025404:	f7fb fb3a 	bl	1020a7c <_wcrtomb_r>
 1025408:	1833      	adds	r3, r6, r0
 102540a:	3001      	adds	r0, #1
 102540c:	f000 8140 	beq.w	1025690 <_vfiprintf_r+0xf20>
 1025410:	4553      	cmp	r3, sl
 1025412:	dc0a      	bgt.n	102542a <_vfiprintf_r+0xcba>
 1025414:	461e      	mov	r6, r3
 1025416:	d008      	beq.n	102542a <_vfiprintf_r+0xcba>
 1025418:	9a15      	ldr	r2, [sp, #84]	; 0x54
 102541a:	ab18      	add	r3, sp, #96	; 0x60
 102541c:	a92d      	add	r1, sp, #180	; 0xb4
 102541e:	4658      	mov	r0, fp
 1025420:	5915      	ldr	r5, [r2, r4]
 1025422:	3404      	adds	r4, #4
 1025424:	462a      	mov	r2, r5
 1025426:	2d00      	cmp	r5, #0
 1025428:	d1ec      	bne.n	1025404 <_vfiprintf_r+0xc94>
 102542a:	9604      	str	r6, [sp, #16]
 102542c:	9d07      	ldr	r5, [sp, #28]
 102542e:	9e02      	ldr	r6, [sp, #8]
 1025430:	9b04      	ldr	r3, [sp, #16]
 1025432:	2b00      	cmp	r3, #0
 1025434:	f000 80c4 	beq.w	10255c0 <_vfiprintf_r+0xe50>
 1025438:	2b63      	cmp	r3, #99	; 0x63
 102543a:	f340 80ee 	ble.w	102561a <_vfiprintf_r+0xeaa>
 102543e:	1c59      	adds	r1, r3, #1
 1025440:	4658      	mov	r0, fp
 1025442:	f7f5 fdc9 	bl	101afd8 <_malloc_r>
 1025446:	900b      	str	r0, [sp, #44]	; 0x2c
 1025448:	2800      	cmp	r0, #0
 102544a:	f000 8121 	beq.w	1025690 <_vfiprintf_r+0xf20>
 102544e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1025450:	9308      	str	r3, [sp, #32]
 1025452:	2208      	movs	r2, #8
 1025454:	2100      	movs	r1, #0
 1025456:	a818      	add	r0, sp, #96	; 0x60
 1025458:	f7f6 fe2a 	bl	101c0b0 <memset>
 102545c:	9c04      	ldr	r4, [sp, #16]
 102545e:	ab18      	add	r3, sp, #96	; 0x60
 1025460:	aa15      	add	r2, sp, #84	; 0x54
 1025462:	9300      	str	r3, [sp, #0]
 1025464:	4658      	mov	r0, fp
 1025466:	4623      	mov	r3, r4
 1025468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 102546a:	f7fb fb5d 	bl	1020b28 <_wcsrtombs_r>
 102546e:	4284      	cmp	r4, r0
 1025470:	f040 812d 	bne.w	10256ce <_vfiprintf_r+0xf5e>
 1025474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1025476:	2400      	movs	r4, #0
 1025478:	9507      	str	r5, [sp, #28]
 102547a:	46a2      	mov	sl, r4
 102547c:	4619      	mov	r1, r3
 102547e:	9b04      	ldr	r3, [sp, #16]
 1025480:	54cc      	strb	r4, [r1, r3]
 1025482:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1025486:	9302      	str	r3, [sp, #8]
 1025488:	f7ff bae6 	b.w	1024a58 <_vfiprintf_r+0x2e8>
 102548c:	9b04      	ldr	r3, [sp, #16]
 102548e:	a91f      	add	r1, sp, #124	; 0x7c
 1025490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1025492:	931c      	str	r3, [sp, #112]	; 0x70
 1025494:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
 1025498:	2201      	movs	r2, #1
 102549a:	921b      	str	r2, [sp, #108]	; 0x6c
 102549c:	f7ff bb57 	b.w	1024b4e <_vfiprintf_r+0x3de>
 10254a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 10254a2:	3902      	subs	r1, #2
 10254a4:	2330      	movs	r3, #48	; 0x30
 10254a6:	9e02      	ldr	r6, [sp, #8]
 10254a8:	910b      	str	r1, [sp, #44]	; 0x2c
 10254aa:	f802 3c01 	strb.w	r3, [r2, #-1]
 10254ae:	ab46      	add	r3, sp, #280	; 0x118
 10254b0:	1a5b      	subs	r3, r3, r1
 10254b2:	9304      	str	r3, [sp, #16]
 10254b4:	f7ff bac9 	b.w	1024a4a <_vfiprintf_r+0x2da>
 10254b8:	9a07      	ldr	r2, [sp, #28]
 10254ba:	6812      	ldr	r2, [r2, #0]
 10254bc:	9307      	str	r3, [sp, #28]
 10254be:	9b03      	ldr	r3, [sp, #12]
 10254c0:	6013      	str	r3, [r2, #0]
 10254c2:	f7ff b995 	b.w	10247f0 <_vfiprintf_r+0x80>
 10254c6:	4653      	mov	r3, sl
 10254c8:	2b06      	cmp	r3, #6
 10254ca:	f24a 4270 	movw	r2, #42096	; 0xa470
 10254ce:	9507      	str	r5, [sp, #28]
 10254d0:	bf28      	it	cs
 10254d2:	2306      	movcs	r3, #6
 10254d4:	f2c0 1206 	movt	r2, #262	; 0x106
 10254d8:	9304      	str	r3, [sp, #16]
 10254da:	920b      	str	r2, [sp, #44]	; 0x2c
 10254dc:	9302      	str	r3, [sp, #8]
 10254de:	e519      	b.n	1024f14 <_vfiprintf_r+0x7a4>
 10254e0:	9b02      	ldr	r3, [sp, #8]
 10254e2:	2200      	movs	r2, #0
 10254e4:	f8cd 9010 	str.w	r9, [sp, #16]
 10254e8:	ae46      	add	r6, sp, #280	; 0x118
 10254ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 10254ee:	9709      	str	r7, [sp, #36]	; 0x24
 10254f0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 10254f4:	4691      	mov	r9, r2
 10254f6:	f8cd a020 	str.w	sl, [sp, #32]
 10254fa:	461f      	mov	r7, r3
 10254fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 1025500:	e008      	b.n	1025514 <_vfiprintf_r+0xda4>
 1025502:	f7f4 fe61 	bl	101a1c8 <__aeabi_uldivmod>
 1025506:	2d00      	cmp	r5, #0
 1025508:	bf08      	it	eq
 102550a:	2c0a      	cmpeq	r4, #10
 102550c:	d328      	bcc.n	1025560 <_vfiprintf_r+0xdf0>
 102550e:	4604      	mov	r4, r0
 1025510:	4656      	mov	r6, sl
 1025512:	460d      	mov	r5, r1
 1025514:	220a      	movs	r2, #10
 1025516:	2300      	movs	r3, #0
 1025518:	4620      	mov	r0, r4
 102551a:	4629      	mov	r1, r5
 102551c:	f7f4 fe54 	bl	101a1c8 <__aeabi_uldivmod>
 1025520:	f109 0901 	add.w	r9, r9, #1
 1025524:	4620      	mov	r0, r4
 1025526:	4629      	mov	r1, r5
 1025528:	f106 3aff 	add.w	sl, r6, #4294967295
 102552c:	2300      	movs	r3, #0
 102552e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1025532:	220a      	movs	r2, #10
 1025534:	f806 cc01 	strb.w	ip, [r6, #-1]
 1025538:	2f00      	cmp	r7, #0
 102553a:	d0e2      	beq.n	1025502 <_vfiprintf_r+0xd92>
 102553c:	f898 6000 	ldrb.w	r6, [r8]
 1025540:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1025544:	bf18      	it	ne
 1025546:	f04f 0c01 	movne.w	ip, #1
 102554a:	454e      	cmp	r6, r9
 102554c:	bf18      	it	ne
 102554e:	f04f 0c00 	movne.w	ip, #0
 1025552:	f1bc 0f00 	cmp.w	ip, #0
 1025556:	d0d4      	beq.n	1025502 <_vfiprintf_r+0xd92>
 1025558:	429d      	cmp	r5, r3
 102555a:	bf08      	it	eq
 102555c:	4294      	cmpeq	r4, r2
 102555e:	d27f      	bcs.n	1025660 <_vfiprintf_r+0xef0>
 1025560:	4652      	mov	r2, sl
 1025562:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 1025566:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 102556a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 102556e:	f8dd a020 	ldr.w	sl, [sp, #32]
 1025572:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 1025576:	9e02      	ldr	r6, [sp, #8]
 1025578:	e52c      	b.n	1024fd4 <_vfiprintf_r+0x864>
 102557a:	05b0      	lsls	r0, r6, #22
 102557c:	bf45      	ittet	mi
 102557e:	9207      	strmi	r2, [sp, #28]
 1025580:	b2e4      	uxtbmi	r4, r4
 1025582:	9207      	strpl	r2, [sp, #28]
 1025584:	4633      	movmi	r3, r6
 1025586:	bf4e      	itee	mi
 1025588:	2500      	movmi	r5, #0
 102558a:	2500      	movpl	r5, #0
 102558c:	4633      	movpl	r3, r6
 102558e:	e500      	b.n	1024f92 <_vfiprintf_r+0x822>
 1025590:	05b0      	lsls	r0, r6, #22
 1025592:	f04f 0500 	mov.w	r5, #0
 1025596:	bf48      	it	mi
 1025598:	b2e4      	uxtbmi	r4, r4
 102559a:	2301      	movs	r3, #1
 102559c:	f7ff ba2c 	b.w	10249f8 <_vfiprintf_r+0x288>
 10255a0:	460b      	mov	r3, r1
 10255a2:	e5b4      	b.n	102510e <_vfiprintf_r+0x99e>
 10255a4:	2300      	movs	r3, #0
 10255a6:	aa18      	add	r2, sp, #96	; 0x60
 10255a8:	4619      	mov	r1, r3
 10255aa:	9200      	str	r2, [sp, #0]
 10255ac:	4658      	mov	r0, fp
 10255ae:	aa15      	add	r2, sp, #84	; 0x54
 10255b0:	f7fb faba 	bl	1020b28 <_wcsrtombs_r>
 10255b4:	1c43      	adds	r3, r0, #1
 10255b6:	9004      	str	r0, [sp, #16]
 10255b8:	d06a      	beq.n	1025690 <_vfiprintf_r+0xf20>
 10255ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10255bc:	9315      	str	r3, [sp, #84]	; 0x54
 10255be:	e737      	b.n	1025430 <_vfiprintf_r+0xcc0>
 10255c0:	9b04      	ldr	r3, [sp, #16]
 10255c2:	9507      	str	r5, [sp, #28]
 10255c4:	9302      	str	r3, [sp, #8]
 10255c6:	469a      	mov	sl, r3
 10255c8:	9308      	str	r3, [sp, #32]
 10255ca:	f7ff ba45 	b.w	1024a58 <_vfiprintf_r+0x2e8>
 10255ce:	a91f      	add	r1, sp, #124	; 0x7c
 10255d0:	2001      	movs	r0, #1
 10255d2:	4662      	mov	r2, ip
 10255d4:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10255d8:	f7ff ba9a 	b.w	1024b10 <_vfiprintf_r+0x3a0>
 10255dc:	2201      	movs	r2, #1
 10255de:	f10d 014b 	add.w	r1, sp, #75	; 0x4b
 10255e2:	4610      	mov	r0, r2
 10255e4:	911d      	str	r1, [sp, #116]	; 0x74
 10255e6:	921e      	str	r2, [sp, #120]	; 0x78
 10255e8:	4694      	mov	ip, r2
 10255ea:	a91f      	add	r1, sp, #124	; 0x7c
 10255ec:	f7ff ba65 	b.w	1024aba <_vfiprintf_r+0x34a>
 10255f0:	9a07      	ldr	r2, [sp, #28]
 10255f2:	9307      	str	r3, [sp, #28]
 10255f4:	9b03      	ldr	r3, [sp, #12]
 10255f6:	6812      	ldr	r2, [r2, #0]
 10255f8:	8013      	strh	r3, [r2, #0]
 10255fa:	f7ff b8f9 	b.w	10247f0 <_vfiprintf_r+0x80>
 10255fe:	681c      	ldr	r4, [r3, #0]
 1025600:	9207      	str	r2, [sp, #28]
 1025602:	9602      	str	r6, [sp, #8]
 1025604:	17e5      	asrs	r5, r4, #31
 1025606:	4622      	mov	r2, r4
 1025608:	462b      	mov	r3, r5
 102560a:	e492      	b.n	1024f32 <_vfiprintf_r+0x7c2>
 102560c:	4658      	mov	r0, fp
 102560e:	aa1a      	add	r2, sp, #104	; 0x68
 1025610:	9906      	ldr	r1, [sp, #24]
 1025612:	f7ff f869 	bl	10246e8 <__sprint_r.part.0>
 1025616:	f7ff b9c6 	b.w	10249a6 <_vfiprintf_r+0x236>
 102561a:	2300      	movs	r3, #0
 102561c:	9308      	str	r3, [sp, #32]
 102561e:	ab2d      	add	r3, sp, #180	; 0xb4
 1025620:	930b      	str	r3, [sp, #44]	; 0x2c
 1025622:	e716      	b.n	1025452 <_vfiprintf_r+0xce2>
 1025624:	f8cd a008 	str.w	sl, [sp, #8]
 1025628:	f8cd a010 	str.w	sl, [sp, #16]
 102562c:	9507      	str	r5, [sp, #28]
 102562e:	f8dd a020 	ldr.w	sl, [sp, #32]
 1025632:	f7ff ba11 	b.w	1024a58 <_vfiprintf_r+0x2e8>
 1025636:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1025638:	46a2      	mov	sl, r4
 102563a:	f7f7 fc21 	bl	101ce80 <strlen>
 102563e:	9507      	str	r5, [sp, #28]
 1025640:	9408      	str	r4, [sp, #32]
 1025642:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1025646:	9004      	str	r0, [sp, #16]
 1025648:	9302      	str	r3, [sp, #8]
 102564a:	f7ff ba05 	b.w	1024a58 <_vfiprintf_r+0x2e8>
 102564e:	468e      	mov	lr, r1
 1025650:	e5db      	b.n	102520a <_vfiprintf_r+0xa9a>
 1025652:	f246 6578 	movw	r5, #26232	; 0x6678
 1025656:	f100 0c01 	add.w	ip, r0, #1
 102565a:	f2c0 1506 	movt	r5, #262	; 0x106
 102565e:	e622      	b.n	10252a6 <_vfiprintf_r+0xb36>
 1025660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 1025662:	990e      	ldr	r1, [sp, #56]	; 0x38
 1025664:	ebaa 0a02 	sub.w	sl, sl, r2
 1025668:	4650      	mov	r0, sl
 102566a:	f7f7 fcf7 	bl	101d05c <strncpy>
 102566e:	f898 3001 	ldrb.w	r3, [r8, #1]
 1025672:	b10b      	cbz	r3, 1025678 <_vfiprintf_r+0xf08>
 1025674:	f108 0801 	add.w	r8, r8, #1
 1025678:	4620      	mov	r0, r4
 102567a:	4629      	mov	r1, r5
 102567c:	220a      	movs	r2, #10
 102567e:	2300      	movs	r3, #0
 1025680:	f7f4 fda2 	bl	101a1c8 <__aeabi_uldivmod>
 1025684:	f04f 0900 	mov.w	r9, #0
 1025688:	e741      	b.n	102550e <_vfiprintf_r+0xd9e>
 102568a:	460b      	mov	r3, r1
 102568c:	4601      	mov	r1, r0
 102568e:	e4e3      	b.n	1025058 <_vfiprintf_r+0x8e8>
 1025690:	9a06      	ldr	r2, [sp, #24]
 1025692:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1025696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 102569a:	8193      	strh	r3, [r2, #12]
 102569c:	f7ff b986 	b.w	10249ac <_vfiprintf_r+0x23c>
 10256a0:	2302      	movs	r3, #2
 10256a2:	aa13      	add	r2, sp, #76	; 0x4c
 10256a4:	931e      	str	r3, [sp, #120]	; 0x78
 10256a6:	469c      	mov	ip, r3
 10256a8:	921d      	str	r2, [sp, #116]	; 0x74
 10256aa:	a91f      	add	r1, sp, #124	; 0x7c
 10256ac:	2001      	movs	r0, #1
 10256ae:	e56c      	b.n	102518a <_vfiprintf_r+0xa1a>
 10256b0:	f04f 33ff 	mov.w	r3, #4294967295
 10256b4:	9303      	str	r3, [sp, #12]
 10256b6:	f7ff b97c 	b.w	10249b2 <_vfiprintf_r+0x242>
 10256ba:	9a07      	ldr	r2, [sp, #28]
 10256bc:	787b      	ldrb	r3, [r7, #1]
 10256be:	460f      	mov	r7, r1
 10256c0:	f852 0b04 	ldr.w	r0, [r2], #4
 10256c4:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
 10256c8:	9207      	str	r2, [sp, #28]
 10256ca:	f7ff b8bf 	b.w	102484c <_vfiprintf_r+0xdc>
 10256ce:	9a06      	ldr	r2, [sp, #24]
 10256d0:	8993      	ldrh	r3, [r2, #12]
 10256d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10256d6:	8193      	strh	r3, [r2, #12]
 10256d8:	e531      	b.n	102513e <_vfiprintf_r+0x9ce>
 10256da:	9602      	str	r6, [sp, #8]
 10256dc:	f7ff bb70 	b.w	1024dc0 <_vfiprintf_r+0x650>
 10256e0:	9602      	str	r6, [sp, #8]
 10256e2:	f7ff bba2 	b.w	1024e2a <_vfiprintf_r+0x6ba>
 10256e6:	4633      	mov	r3, r6
 10256e8:	f7ff bbcf 	b.w	1024e8a <_vfiprintf_r+0x71a>

010256ec <vfiprintf>:
 10256ec:	b410      	push	{r4}
 10256ee:	f64a 1448 	movw	r4, #43336	; 0xa948
 10256f2:	f2c0 1406 	movt	r4, #262	; 0x106
 10256f6:	4613      	mov	r3, r2
 10256f8:	460a      	mov	r2, r1
 10256fa:	4601      	mov	r1, r0
 10256fc:	6820      	ldr	r0, [r4, #0]
 10256fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 1025702:	f7ff b835 	b.w	1024770 <_vfiprintf_r>
 1025706:	bf00      	nop

01025708 <__sbprintf>:
 1025708:	b5f0      	push	{r4, r5, r6, r7, lr}
 102570a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 102570e:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 1025710:	460c      	mov	r4, r1
 1025712:	898d      	ldrh	r5, [r1, #12]
 1025714:	2700      	movs	r7, #0
 1025716:	9706      	str	r7, [sp, #24]
 1025718:	4669      	mov	r1, sp
 102571a:	89e7      	ldrh	r7, [r4, #14]
 102571c:	f025 0502 	bic.w	r5, r5, #2
 1025720:	9619      	str	r6, [sp, #100]	; 0x64
 1025722:	f8ad 500c 	strh.w	r5, [sp, #12]
 1025726:	69e6      	ldr	r6, [r4, #28]
 1025728:	6a65      	ldr	r5, [r4, #36]	; 0x24
 102572a:	f8ad 700e 	strh.w	r7, [sp, #14]
 102572e:	9607      	str	r6, [sp, #28]
 1025730:	ae1a      	add	r6, sp, #104	; 0x68
 1025732:	9509      	str	r5, [sp, #36]	; 0x24
 1025734:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1025738:	9600      	str	r6, [sp, #0]
 102573a:	9604      	str	r6, [sp, #16]
 102573c:	4606      	mov	r6, r0
 102573e:	9502      	str	r5, [sp, #8]
 1025740:	9505      	str	r5, [sp, #20]
 1025742:	f7ff f815 	bl	1024770 <_vfiprintf_r>
 1025746:	1e05      	subs	r5, r0, #0
 1025748:	db07      	blt.n	102575a <__sbprintf+0x52>
 102574a:	4630      	mov	r0, r6
 102574c:	4669      	mov	r1, sp
 102574e:	f7fc fbcb 	bl	1021ee8 <_fflush_r>
 1025752:	2800      	cmp	r0, #0
 1025754:	bf18      	it	ne
 1025756:	f04f 35ff 	movne.w	r5, #4294967295
 102575a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 102575e:	4628      	mov	r0, r5
 1025760:	065b      	lsls	r3, r3, #25
 1025762:	bf42      	ittt	mi
 1025764:	89a3      	ldrhmi	r3, [r4, #12]
 1025766:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 102576a:	81a3      	strhmi	r3, [r4, #12]
 102576c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 1025770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1025772:	bf00      	nop

01025774 <_wcsnrtombs_l>:
 1025774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1025778:	b08b      	sub	sp, #44	; 0x2c
 102577a:	e9dd 9414 	ldrd	r9, r4, [sp, #80]	; 0x50
 102577e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 1025782:	2c00      	cmp	r4, #0
 1025784:	d058      	beq.n	1025838 <_wcsnrtombs_l+0xc4>
 1025786:	6816      	ldr	r6, [r2, #0]
 1025788:	2900      	cmp	r1, #0
 102578a:	d05a      	beq.n	1025842 <_wcsnrtombs_l+0xce>
 102578c:	f1b9 0f00 	cmp.w	r9, #0
 1025790:	d064      	beq.n	102585c <_wcsnrtombs_l+0xe8>
 1025792:	1e5d      	subs	r5, r3, #1
 1025794:	2b00      	cmp	r3, #0
 1025796:	d063      	beq.n	1025860 <_wcsnrtombs_l+0xec>
 1025798:	9205      	str	r2, [sp, #20]
 102579a:	3e04      	subs	r6, #4
 102579c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 10257a0:	f04f 0800 	mov.w	r8, #0
 10257a4:	9104      	str	r1, [sp, #16]
 10257a6:	46cb      	mov	fp, r9
 10257a8:	e00a      	b.n	10257c0 <_wcsnrtombs_l+0x4c>
 10257aa:	9b03      	ldr	r3, [sp, #12]
 10257ac:	bb13      	cbnz	r3, 10257f4 <_wcsnrtombs_l+0x80>
 10257ae:	6833      	ldr	r3, [r6, #0]
 10257b0:	2b00      	cmp	r3, #0
 10257b2:	d035      	beq.n	1025820 <_wcsnrtombs_l+0xac>
 10257b4:	4559      	cmp	r1, fp
 10257b6:	d255      	bcs.n	1025864 <_wcsnrtombs_l+0xf0>
 10257b8:	3d01      	subs	r5, #1
 10257ba:	4688      	mov	r8, r1
 10257bc:	1c6b      	adds	r3, r5, #1
 10257be:	d015      	beq.n	10257ec <_wcsnrtombs_l+0x78>
 10257c0:	6827      	ldr	r7, [r4, #0]
 10257c2:	4623      	mov	r3, r4
 10257c4:	f856 2f04 	ldr.w	r2, [r6, #4]!
 10257c8:	a907      	add	r1, sp, #28
 10257ca:	9802      	ldr	r0, [sp, #8]
 10257cc:	9701      	str	r7, [sp, #4]
 10257ce:	f8da 70e0 	ldr.w	r7, [sl, #224]	; 0xe0
 10257d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 10257d6:	47b8      	blx	r7
 10257d8:	1c42      	adds	r2, r0, #1
 10257da:	d035      	beq.n	1025848 <_wcsnrtombs_l+0xd4>
 10257dc:	eb00 0108 	add.w	r1, r0, r8
 10257e0:	4559      	cmp	r1, fp
 10257e2:	d9e2      	bls.n	10257aa <_wcsnrtombs_l+0x36>
 10257e4:	f8dd b004 	ldr.w	fp, [sp, #4]
 10257e8:	e9c4 b900 	strd	fp, r9, [r4]
 10257ec:	4640      	mov	r0, r8
 10257ee:	b00b      	add	sp, #44	; 0x2c
 10257f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10257f4:	2800      	cmp	r0, #0
 10257f6:	dd0c      	ble.n	1025812 <_wcsnrtombs_l+0x9e>
 10257f8:	9b04      	ldr	r3, [sp, #16]
 10257fa:	aa07      	add	r2, sp, #28
 10257fc:	4418      	add	r0, r3
 10257fe:	3b01      	subs	r3, #1
 1025800:	f100 3cff 	add.w	ip, r0, #4294967295
 1025804:	f812 7b01 	ldrb.w	r7, [r2], #1
 1025808:	f803 7f01 	strb.w	r7, [r3, #1]!
 102580c:	4563      	cmp	r3, ip
 102580e:	d1f9      	bne.n	1025804 <_wcsnrtombs_l+0x90>
 1025810:	9004      	str	r0, [sp, #16]
 1025812:	9a05      	ldr	r2, [sp, #20]
 1025814:	6813      	ldr	r3, [r2, #0]
 1025816:	3304      	adds	r3, #4
 1025818:	6013      	str	r3, [r2, #0]
 102581a:	6833      	ldr	r3, [r6, #0]
 102581c:	2b00      	cmp	r3, #0
 102581e:	d1c9      	bne.n	10257b4 <_wcsnrtombs_l+0x40>
 1025820:	9a03      	ldr	r2, [sp, #12]
 1025822:	b10a      	cbz	r2, 1025828 <_wcsnrtombs_l+0xb4>
 1025824:	9a05      	ldr	r2, [sp, #20]
 1025826:	6013      	str	r3, [r2, #0]
 1025828:	f101 38ff 	add.w	r8, r1, #4294967295
 102582c:	2300      	movs	r3, #0
 102582e:	6023      	str	r3, [r4, #0]
 1025830:	4640      	mov	r0, r8
 1025832:	b00b      	add	sp, #44	; 0x2c
 1025834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1025838:	f500 748e 	add.w	r4, r0, #284	; 0x11c
 102583c:	6816      	ldr	r6, [r2, #0]
 102583e:	2900      	cmp	r1, #0
 1025840:	d1a4      	bne.n	102578c <_wcsnrtombs_l+0x18>
 1025842:	f04f 39ff 	mov.w	r9, #4294967295
 1025846:	e7a4      	b.n	1025792 <_wcsnrtombs_l+0x1e>
 1025848:	9902      	ldr	r1, [sp, #8]
 102584a:	4680      	mov	r8, r0
 102584c:	228a      	movs	r2, #138	; 0x8a
 102584e:	2300      	movs	r3, #0
 1025850:	4640      	mov	r0, r8
 1025852:	600a      	str	r2, [r1, #0]
 1025854:	6023      	str	r3, [r4, #0]
 1025856:	b00b      	add	sp, #44	; 0x2c
 1025858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102585c:	46c8      	mov	r8, r9
 102585e:	e7c5      	b.n	10257ec <_wcsnrtombs_l+0x78>
 1025860:	4698      	mov	r8, r3
 1025862:	e7c3      	b.n	10257ec <_wcsnrtombs_l+0x78>
 1025864:	4688      	mov	r8, r1
 1025866:	e7c1      	b.n	10257ec <_wcsnrtombs_l+0x78>

01025868 <_wcsnrtombs_r>:
 1025868:	f64a 1048 	movw	r0, #43336	; 0xa948
 102586c:	f2c0 1006 	movt	r0, #262	; 0x106
 1025870:	b5f0      	push	{r4, r5, r6, r7, lr}
 1025872:	b085      	sub	sp, #20
 1025874:	6800      	ldr	r0, [r0, #0]
 1025876:	f64a 5578 	movw	r5, #44408	; 0xad78
 102587a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 102587e:	f2c0 1506 	movt	r5, #262	; 0x106
 1025882:	6b44      	ldr	r4, [r0, #52]	; 0x34
 1025884:	9700      	str	r7, [sp, #0]
 1025886:	2c00      	cmp	r4, #0
 1025888:	bf08      	it	eq
 102588a:	462c      	moveq	r4, r5
 102588c:	e9cd 6401 	strd	r6, r4, [sp, #4]
 1025890:	f7ff ff70 	bl	1025774 <_wcsnrtombs_l>
 1025894:	b005      	add	sp, #20
 1025896:	bdf0      	pop	{r4, r5, r6, r7, pc}

01025898 <wcsnrtombs>:
 1025898:	b5f0      	push	{r4, r5, r6, r7, lr}
 102589a:	f64a 1448 	movw	r4, #43336	; 0xa948
 102589e:	f2c0 1406 	movt	r4, #262	; 0x106
 10258a2:	b085      	sub	sp, #20
 10258a4:	f64a 5578 	movw	r5, #44408	; 0xad78
 10258a8:	f2c0 1506 	movt	r5, #262	; 0x106
 10258ac:	6827      	ldr	r7, [r4, #0]
 10258ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 10258b0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 10258b2:	9300      	str	r3, [sp, #0]
 10258b4:	4613      	mov	r3, r2
 10258b6:	2c00      	cmp	r4, #0
 10258b8:	bf08      	it	eq
 10258ba:	462c      	moveq	r4, r5
 10258bc:	460a      	mov	r2, r1
 10258be:	9402      	str	r4, [sp, #8]
 10258c0:	4601      	mov	r1, r0
 10258c2:	9601      	str	r6, [sp, #4]
 10258c4:	4638      	mov	r0, r7
 10258c6:	f7ff ff55 	bl	1025774 <_wcsnrtombs_l>
 10258ca:	b005      	add	sp, #20
 10258cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10258ce:	bf00      	nop

010258d0 <_write_r>:
 10258d0:	b570      	push	{r4, r5, r6, lr}
 10258d2:	460d      	mov	r5, r1
 10258d4:	f645 7450 	movw	r4, #24400	; 0x5f50
 10258d8:	f2c0 1446 	movt	r4, #326	; 0x146
 10258dc:	4611      	mov	r1, r2
 10258de:	4606      	mov	r6, r0
 10258e0:	461a      	mov	r2, r3
 10258e2:	4628      	mov	r0, r5
 10258e4:	2300      	movs	r3, #0
 10258e6:	6023      	str	r3, [r4, #0]
 10258e8:	f000 ea20 	blx	1025d2c <_write>
 10258ec:	1c43      	adds	r3, r0, #1
 10258ee:	d000      	beq.n	10258f2 <_write_r+0x22>
 10258f0:	bd70      	pop	{r4, r5, r6, pc}
 10258f2:	6823      	ldr	r3, [r4, #0]
 10258f4:	2b00      	cmp	r3, #0
 10258f6:	d0fb      	beq.n	10258f0 <_write_r+0x20>
 10258f8:	6033      	str	r3, [r6, #0]
 10258fa:	bd70      	pop	{r4, r5, r6, pc}

010258fc <_close_r>:
 10258fc:	b538      	push	{r3, r4, r5, lr}
 10258fe:	f645 7450 	movw	r4, #24400	; 0x5f50
 1025902:	f2c0 1446 	movt	r4, #326	; 0x146
 1025906:	4605      	mov	r5, r0
 1025908:	4608      	mov	r0, r1
 102590a:	2300      	movs	r3, #0
 102590c:	6023      	str	r3, [r4, #0]
 102590e:	f000 ea60 	blx	1025dd0 <_close>
 1025912:	1c43      	adds	r3, r0, #1
 1025914:	d000      	beq.n	1025918 <_close_r+0x1c>
 1025916:	bd38      	pop	{r3, r4, r5, pc}
 1025918:	6823      	ldr	r3, [r4, #0]
 102591a:	2b00      	cmp	r3, #0
 102591c:	d0fb      	beq.n	1025916 <_close_r+0x1a>
 102591e:	602b      	str	r3, [r5, #0]
 1025920:	bd38      	pop	{r3, r4, r5, pc}
 1025922:	bf00      	nop

01025924 <__env_lock>:
 1025924:	4770      	bx	lr
 1025926:	bf00      	nop

01025928 <__env_unlock>:
 1025928:	4770      	bx	lr
 102592a:	bf00      	nop

0102592c <_fclose_r>:
 102592c:	b570      	push	{r4, r5, r6, lr}
 102592e:	b139      	cbz	r1, 1025940 <_fclose_r+0x14>
 1025930:	4605      	mov	r5, r0
 1025932:	460c      	mov	r4, r1
 1025934:	b108      	cbz	r0, 102593a <_fclose_r+0xe>
 1025936:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1025938:	b383      	cbz	r3, 102599c <_fclose_r+0x70>
 102593a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 102593e:	b913      	cbnz	r3, 1025946 <_fclose_r+0x1a>
 1025940:	2600      	movs	r6, #0
 1025942:	4630      	mov	r0, r6
 1025944:	bd70      	pop	{r4, r5, r6, pc}
 1025946:	4621      	mov	r1, r4
 1025948:	4628      	mov	r0, r5
 102594a:	f7fc fa27 	bl	1021d9c <__sflush_r>
 102594e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1025950:	4606      	mov	r6, r0
 1025952:	b133      	cbz	r3, 1025962 <_fclose_r+0x36>
 1025954:	69e1      	ldr	r1, [r4, #28]
 1025956:	4628      	mov	r0, r5
 1025958:	4798      	blx	r3
 102595a:	2800      	cmp	r0, #0
 102595c:	bfb8      	it	lt
 102595e:	f04f 36ff 	movlt.w	r6, #4294967295
 1025962:	89a3      	ldrh	r3, [r4, #12]
 1025964:	061b      	lsls	r3, r3, #24
 1025966:	d420      	bmi.n	10259aa <_fclose_r+0x7e>
 1025968:	6b21      	ldr	r1, [r4, #48]	; 0x30
 102596a:	b141      	cbz	r1, 102597e <_fclose_r+0x52>
 102596c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1025970:	4299      	cmp	r1, r3
 1025972:	d002      	beq.n	102597a <_fclose_r+0x4e>
 1025974:	4628      	mov	r0, r5
 1025976:	f7fc fc43 	bl	1022200 <_free_r>
 102597a:	2300      	movs	r3, #0
 102597c:	6323      	str	r3, [r4, #48]	; 0x30
 102597e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 1025980:	b121      	cbz	r1, 102598c <_fclose_r+0x60>
 1025982:	4628      	mov	r0, r5
 1025984:	f7fc fc3c 	bl	1022200 <_free_r>
 1025988:	2300      	movs	r3, #0
 102598a:	6463      	str	r3, [r4, #68]	; 0x44
 102598c:	f7fc fbc2 	bl	1022114 <__sfp_lock_acquire>
 1025990:	2300      	movs	r3, #0
 1025992:	81a3      	strh	r3, [r4, #12]
 1025994:	f7fc fbc0 	bl	1022118 <__sfp_lock_release>
 1025998:	4630      	mov	r0, r6
 102599a:	bd70      	pop	{r4, r5, r6, pc}
 102599c:	f7fc fbb6 	bl	102210c <__sinit>
 10259a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10259a4:	2b00      	cmp	r3, #0
 10259a6:	d0cb      	beq.n	1025940 <_fclose_r+0x14>
 10259a8:	e7cd      	b.n	1025946 <_fclose_r+0x1a>
 10259aa:	6921      	ldr	r1, [r4, #16]
 10259ac:	4628      	mov	r0, r5
 10259ae:	f7fc fc27 	bl	1022200 <_free_r>
 10259b2:	e7d9      	b.n	1025968 <_fclose_r+0x3c>

010259b4 <fclose>:
 10259b4:	f64a 1348 	movw	r3, #43336	; 0xa948
 10259b8:	f2c0 1306 	movt	r3, #262	; 0x106
 10259bc:	4601      	mov	r1, r0
 10259be:	6818      	ldr	r0, [r3, #0]
 10259c0:	f7ff bfb4 	b.w	102592c <_fclose_r>

010259c4 <__fputwc>:
 10259c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10259c8:	b082      	sub	sp, #8
 10259ca:	4680      	mov	r8, r0
 10259cc:	4689      	mov	r9, r1
 10259ce:	4614      	mov	r4, r2
 10259d0:	f7f5 fa40 	bl	101ae54 <__locale_mb_cur_max>
 10259d4:	2801      	cmp	r0, #1
 10259d6:	d103      	bne.n	10259e0 <__fputwc+0x1c>
 10259d8:	f109 33ff 	add.w	r3, r9, #4294967295
 10259dc:	2bfe      	cmp	r3, #254	; 0xfe
 10259de:	d938      	bls.n	1025a52 <__fputwc+0x8e>
 10259e0:	466d      	mov	r5, sp
 10259e2:	464a      	mov	r2, r9
 10259e4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 10259e8:	4640      	mov	r0, r8
 10259ea:	4629      	mov	r1, r5
 10259ec:	f7fb f846 	bl	1020a7c <_wcrtomb_r>
 10259f0:	1c42      	adds	r2, r0, #1
 10259f2:	4606      	mov	r6, r0
 10259f4:	d038      	beq.n	1025a68 <__fputwc+0xa4>
 10259f6:	b398      	cbz	r0, 1025a60 <__fputwc+0x9c>
 10259f8:	f89d c000 	ldrb.w	ip, [sp]
 10259fc:	f1c5 0a01 	rsb	sl, r5, #1
 1025a00:	e00a      	b.n	1025a18 <__fputwc+0x54>
 1025a02:	6823      	ldr	r3, [r4, #0]
 1025a04:	1c5a      	adds	r2, r3, #1
 1025a06:	6022      	str	r2, [r4, #0]
 1025a08:	f883 c000 	strb.w	ip, [r3]
 1025a0c:	eb0a 0305 	add.w	r3, sl, r5
 1025a10:	429e      	cmp	r6, r3
 1025a12:	d925      	bls.n	1025a60 <__fputwc+0x9c>
 1025a14:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 1025a18:	68a3      	ldr	r3, [r4, #8]
 1025a1a:	f103 3eff 	add.w	lr, r3, #4294967295
 1025a1e:	f8c4 e008 	str.w	lr, [r4, #8]
 1025a22:	f1be 0f00 	cmp.w	lr, #0
 1025a26:	daec      	bge.n	1025a02 <__fputwc+0x3e>
 1025a28:	69a7      	ldr	r7, [r4, #24]
 1025a2a:	4661      	mov	r1, ip
 1025a2c:	4622      	mov	r2, r4
 1025a2e:	4640      	mov	r0, r8
 1025a30:	45be      	cmp	lr, r7
 1025a32:	bfb4      	ite	lt
 1025a34:	2300      	movlt	r3, #0
 1025a36:	2301      	movge	r3, #1
 1025a38:	f1bc 0f0a 	cmp.w	ip, #10
 1025a3c:	bf08      	it	eq
 1025a3e:	2300      	moveq	r3, #0
 1025a40:	2b00      	cmp	r3, #0
 1025a42:	d1de      	bne.n	1025a02 <__fputwc+0x3e>
 1025a44:	f000 f8a2 	bl	1025b8c <__swbuf_r>
 1025a48:	1c43      	adds	r3, r0, #1
 1025a4a:	d1df      	bne.n	1025a0c <__fputwc+0x48>
 1025a4c:	b002      	add	sp, #8
 1025a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1025a52:	fa5f fc89 	uxtb.w	ip, r9
 1025a56:	4606      	mov	r6, r0
 1025a58:	466d      	mov	r5, sp
 1025a5a:	f88d c000 	strb.w	ip, [sp]
 1025a5e:	e7cd      	b.n	10259fc <__fputwc+0x38>
 1025a60:	4648      	mov	r0, r9
 1025a62:	b002      	add	sp, #8
 1025a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1025a68:	89a3      	ldrh	r3, [r4, #12]
 1025a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1025a6e:	81a3      	strh	r3, [r4, #12]
 1025a70:	e7ec      	b.n	1025a4c <__fputwc+0x88>
 1025a72:	bf00      	nop

01025a74 <_fputwc_r>:
 1025a74:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1025a78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 1025a7c:	d10b      	bne.n	1025a96 <_fputwc_r+0x22>
 1025a7e:	b410      	push	{r4}
 1025a80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1025a84:	6e54      	ldr	r4, [r2, #100]	; 0x64
 1025a86:	8193      	strh	r3, [r2, #12]
 1025a88:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 1025a8c:	6654      	str	r4, [r2, #100]	; 0x64
 1025a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 1025a92:	f7ff bf97 	b.w	10259c4 <__fputwc>
 1025a96:	f7ff bf95 	b.w	10259c4 <__fputwc>
 1025a9a:	bf00      	nop

01025a9c <fputwc>:
 1025a9c:	f64a 1348 	movw	r3, #43336	; 0xa948
 1025aa0:	f2c0 1306 	movt	r3, #262	; 0x106
 1025aa4:	b570      	push	{r4, r5, r6, lr}
 1025aa6:	4606      	mov	r6, r0
 1025aa8:	681d      	ldr	r5, [r3, #0]
 1025aaa:	460c      	mov	r4, r1
 1025aac:	b10d      	cbz	r5, 1025ab2 <fputwc+0x16>
 1025aae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1025ab0:	b18b      	cbz	r3, 1025ad6 <fputwc+0x3a>
 1025ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1025ab6:	049a      	lsls	r2, r3, #18
 1025ab8:	d406      	bmi.n	1025ac8 <fputwc+0x2c>
 1025aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 1025abc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1025ac0:	81a3      	strh	r3, [r4, #12]
 1025ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 1025ac6:	6662      	str	r2, [r4, #100]	; 0x64
 1025ac8:	4622      	mov	r2, r4
 1025aca:	4631      	mov	r1, r6
 1025acc:	4628      	mov	r0, r5
 1025ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1025ad2:	f7ff bf77 	b.w	10259c4 <__fputwc>
 1025ad6:	4628      	mov	r0, r5
 1025ad8:	f7fc fb18 	bl	102210c <__sinit>
 1025adc:	e7e9      	b.n	1025ab2 <fputwc+0x16>
 1025ade:	bf00      	nop

01025ae0 <_fstat_r>:
 1025ae0:	b538      	push	{r3, r4, r5, lr}
 1025ae2:	460b      	mov	r3, r1
 1025ae4:	f645 7450 	movw	r4, #24400	; 0x5f50
 1025ae8:	f2c0 1446 	movt	r4, #326	; 0x146
 1025aec:	4605      	mov	r5, r0
 1025aee:	4611      	mov	r1, r2
 1025af0:	4618      	mov	r0, r3
 1025af2:	2300      	movs	r3, #0
 1025af4:	6023      	str	r3, [r4, #0]
 1025af6:	f000 e94c 	blx	1025d90 <_fstat>
 1025afa:	1c43      	adds	r3, r0, #1
 1025afc:	d000      	beq.n	1025b00 <_fstat_r+0x20>
 1025afe:	bd38      	pop	{r3, r4, r5, pc}
 1025b00:	6823      	ldr	r3, [r4, #0]
 1025b02:	2b00      	cmp	r3, #0
 1025b04:	d0fb      	beq.n	1025afe <_fstat_r+0x1e>
 1025b06:	602b      	str	r3, [r5, #0]
 1025b08:	bd38      	pop	{r3, r4, r5, pc}
 1025b0a:	bf00      	nop

01025b0c <_isatty_r>:
 1025b0c:	b538      	push	{r3, r4, r5, lr}
 1025b0e:	f645 7450 	movw	r4, #24400	; 0x5f50
 1025b12:	f2c0 1446 	movt	r4, #326	; 0x146
 1025b16:	4605      	mov	r5, r0
 1025b18:	4608      	mov	r0, r1
 1025b1a:	2300      	movs	r3, #0
 1025b1c:	6023      	str	r3, [r4, #0]
 1025b1e:	f000 e94e 	blx	1025dbc <_isatty>
 1025b22:	1c43      	adds	r3, r0, #1
 1025b24:	d000      	beq.n	1025b28 <_isatty_r+0x1c>
 1025b26:	bd38      	pop	{r3, r4, r5, pc}
 1025b28:	6823      	ldr	r3, [r4, #0]
 1025b2a:	2b00      	cmp	r3, #0
 1025b2c:	d0fb      	beq.n	1025b26 <_isatty_r+0x1a>
 1025b2e:	602b      	str	r3, [r5, #0]
 1025b30:	bd38      	pop	{r3, r4, r5, pc}
 1025b32:	bf00      	nop

01025b34 <_lseek_r>:
 1025b34:	b570      	push	{r4, r5, r6, lr}
 1025b36:	460d      	mov	r5, r1
 1025b38:	f645 7450 	movw	r4, #24400	; 0x5f50
 1025b3c:	f2c0 1446 	movt	r4, #326	; 0x146
 1025b40:	4611      	mov	r1, r2
 1025b42:	4606      	mov	r6, r0
 1025b44:	461a      	mov	r2, r3
 1025b46:	4628      	mov	r0, r5
 1025b48:	2300      	movs	r3, #0
 1025b4a:	6023      	str	r3, [r4, #0]
 1025b4c:	f000 e8ac 	blx	1025ca8 <_lseek>
 1025b50:	1c43      	adds	r3, r0, #1
 1025b52:	d000      	beq.n	1025b56 <_lseek_r+0x22>
 1025b54:	bd70      	pop	{r4, r5, r6, pc}
 1025b56:	6823      	ldr	r3, [r4, #0]
 1025b58:	2b00      	cmp	r3, #0
 1025b5a:	d0fb      	beq.n	1025b54 <_lseek_r+0x20>
 1025b5c:	6033      	str	r3, [r6, #0]
 1025b5e:	bd70      	pop	{r4, r5, r6, pc}

01025b60 <_read_r>:
 1025b60:	b570      	push	{r4, r5, r6, lr}
 1025b62:	460d      	mov	r5, r1
 1025b64:	f645 7450 	movw	r4, #24400	; 0x5f50
 1025b68:	f2c0 1446 	movt	r4, #326	; 0x146
 1025b6c:	4611      	mov	r1, r2
 1025b6e:	4606      	mov	r6, r0
 1025b70:	461a      	mov	r2, r3
 1025b72:	4628      	mov	r0, r5
 1025b74:	2300      	movs	r3, #0
 1025b76:	6023      	str	r3, [r4, #0]
 1025b78:	f000 e908 	blx	1025d8c <_read>
 1025b7c:	1c43      	adds	r3, r0, #1
 1025b7e:	d000      	beq.n	1025b82 <_read_r+0x22>
 1025b80:	bd70      	pop	{r4, r5, r6, pc}
 1025b82:	6823      	ldr	r3, [r4, #0]
 1025b84:	2b00      	cmp	r3, #0
 1025b86:	d0fb      	beq.n	1025b80 <_read_r+0x20>
 1025b88:	6033      	str	r3, [r6, #0]
 1025b8a:	bd70      	pop	{r4, r5, r6, pc}

01025b8c <__swbuf_r>:
 1025b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1025b8e:	460d      	mov	r5, r1
 1025b90:	4614      	mov	r4, r2
 1025b92:	4606      	mov	r6, r0
 1025b94:	b110      	cbz	r0, 1025b9c <__swbuf_r+0x10>
 1025b96:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1025b98:	2b00      	cmp	r3, #0
 1025b9a:	d03a      	beq.n	1025c12 <__swbuf_r+0x86>
 1025b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1025ba0:	69a3      	ldr	r3, [r4, #24]
 1025ba2:	b291      	uxth	r1, r2
 1025ba4:	0708      	lsls	r0, r1, #28
 1025ba6:	60a3      	str	r3, [r4, #8]
 1025ba8:	d51e      	bpl.n	1025be8 <__swbuf_r+0x5c>
 1025baa:	6923      	ldr	r3, [r4, #16]
 1025bac:	b1e3      	cbz	r3, 1025be8 <__swbuf_r+0x5c>
 1025bae:	b2ed      	uxtb	r5, r5
 1025bb0:	0489      	lsls	r1, r1, #18
 1025bb2:	462f      	mov	r7, r5
 1025bb4:	d525      	bpl.n	1025c02 <__swbuf_r+0x76>
 1025bb6:	6822      	ldr	r2, [r4, #0]
 1025bb8:	6961      	ldr	r1, [r4, #20]
 1025bba:	1ad3      	subs	r3, r2, r3
 1025bbc:	4299      	cmp	r1, r3
 1025bbe:	bfc8      	it	gt
 1025bc0:	3301      	addgt	r3, #1
 1025bc2:	dd32      	ble.n	1025c2a <__swbuf_r+0x9e>
 1025bc4:	68a1      	ldr	r1, [r4, #8]
 1025bc6:	1c50      	adds	r0, r2, #1
 1025bc8:	6020      	str	r0, [r4, #0]
 1025bca:	3901      	subs	r1, #1
 1025bcc:	60a1      	str	r1, [r4, #8]
 1025bce:	7015      	strb	r5, [r2, #0]
 1025bd0:	6962      	ldr	r2, [r4, #20]
 1025bd2:	429a      	cmp	r2, r3
 1025bd4:	d020      	beq.n	1025c18 <__swbuf_r+0x8c>
 1025bd6:	7b23      	ldrb	r3, [r4, #12]
 1025bd8:	2d0a      	cmp	r5, #10
 1025bda:	bf14      	ite	ne
 1025bdc:	2500      	movne	r5, #0
 1025bde:	f003 0501 	andeq.w	r5, r3, #1
 1025be2:	b9cd      	cbnz	r5, 1025c18 <__swbuf_r+0x8c>
 1025be4:	4638      	mov	r0, r7
 1025be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1025be8:	4621      	mov	r1, r4
 1025bea:	4630      	mov	r0, r6
 1025bec:	f7fb f8d0 	bl	1020d90 <__swsetup_r>
 1025bf0:	b9c0      	cbnz	r0, 1025c24 <__swbuf_r+0x98>
 1025bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1025bf6:	b2ed      	uxtb	r5, r5
 1025bf8:	6923      	ldr	r3, [r4, #16]
 1025bfa:	462f      	mov	r7, r5
 1025bfc:	b291      	uxth	r1, r2
 1025bfe:	0489      	lsls	r1, r1, #18
 1025c00:	d4d9      	bmi.n	1025bb6 <__swbuf_r+0x2a>
 1025c02:	6e61      	ldr	r1, [r4, #100]	; 0x64
 1025c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 1025c08:	81a2      	strh	r2, [r4, #12]
 1025c0a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 1025c0e:	6661      	str	r1, [r4, #100]	; 0x64
 1025c10:	e7d1      	b.n	1025bb6 <__swbuf_r+0x2a>
 1025c12:	f7fc fa7b 	bl	102210c <__sinit>
 1025c16:	e7c1      	b.n	1025b9c <__swbuf_r+0x10>
 1025c18:	4621      	mov	r1, r4
 1025c1a:	4630      	mov	r0, r6
 1025c1c:	f7fc f964 	bl	1021ee8 <_fflush_r>
 1025c20:	2800      	cmp	r0, #0
 1025c22:	d0df      	beq.n	1025be4 <__swbuf_r+0x58>
 1025c24:	f04f 37ff 	mov.w	r7, #4294967295
 1025c28:	e7dc      	b.n	1025be4 <__swbuf_r+0x58>
 1025c2a:	4621      	mov	r1, r4
 1025c2c:	4630      	mov	r0, r6
 1025c2e:	f7fc f95b 	bl	1021ee8 <_fflush_r>
 1025c32:	2800      	cmp	r0, #0
 1025c34:	d1f6      	bne.n	1025c24 <__swbuf_r+0x98>
 1025c36:	6822      	ldr	r2, [r4, #0]
 1025c38:	2301      	movs	r3, #1
 1025c3a:	e7c3      	b.n	1025bc4 <__swbuf_r+0x38>

01025c3c <__swbuf>:
 1025c3c:	f64a 1348 	movw	r3, #43336	; 0xa948
 1025c40:	f2c0 1306 	movt	r3, #262	; 0x106
 1025c44:	460a      	mov	r2, r1
 1025c46:	4601      	mov	r1, r0
 1025c48:	6818      	ldr	r0, [r3, #0]
 1025c4a:	f7ff bf9f 	b.w	1025b8c <__swbuf_r>
 1025c4e:	bf00      	nop

01025c50 <_sbrk>:
  static u8 *heap = NULL;
  u8 *prev_heap;
  static u8 *HeapEndPtr = (u8 *)&_heap_end;
  caddr_t Status;

  if (heap == NULL) {
 1025c50:	e3002330 	movw	r2, #816	; 0x330
 1025c54:	e3402107 	movt	r2, #263	; 0x107
 1025c58:	e5923000 	ldr	r3, [r2]
 1025c5c:	e3530000 	cmp	r3, #0
    heap = (u8 *)&_heap_start;
 1025c60:	03051f60 	movweq	r1, #24416	; 0x5f60
 1025c64:	03401146 	movteq	r1, #326	; 0x146
 1025c68:	01a03001 	moveq	r3, r1
 1025c6c:	05821000 	streq	r1, [r2]
  }
  prev_heap = heap;

	if (((heap + incr) <= HeapEndPtr) && (prev_heap != NULL)) {
 1025c70:	e3051f60 	movw	r1, #24416	; 0x5f60
 1025c74:	e0830000 	add	r0, r3, r0
 1025c78:	e3401d46 	movt	r1, #3398	; 0xd46
 1025c7c:	e1500001 	cmp	r0, r1
  heap += incr;
	  Status = (caddr_t) ((void *)prev_heap);
	} else {
	  Status = (caddr_t) -1;
 1025c80:	83e03000 	mvnhi	r3, #0
  heap += incr;
 1025c84:	95820000 	strls	r0, [r2]
  }

  return Status;
}
 1025c88:	e1a00003 	mov	r0, r3
 1025c8c:	e12fff1e 	bx	lr

01025c90 <lseek>:
#endif
/*
 * lseek --  Since a serial port is non-seekable, we return an error.
 */
__attribute__((weak)) off_t lseek(s32 fd, off_t offset, s32 whence)
{
 1025c90:	e92d4010 	push	{r4, lr}
  (void)fd;
  (void)offset;
  (void)whence;
  errno = ESPIPE;
 1025c94:	eb000041 	bl	1025da0 <__errno>
 1025c98:	e3a0301d 	mov	r3, #29
 1025c9c:	e5803000 	str	r3, [r0]
  return ((off_t)-1);
}
 1025ca0:	e3e00000 	mvn	r0, #0
 1025ca4:	e8bd8010 	pop	{r4, pc}

01025ca8 <_lseek>:
 1025ca8:	e92d4010 	push	{r4, lr}
 1025cac:	eb00003b 	bl	1025da0 <__errno>
 1025cb0:	e3a0301d 	mov	r3, #29
 1025cb4:	e5803000 	str	r3, [r0]
 1025cb8:	e3e00000 	mvn	r0, #0
 1025cbc:	e8bd8010 	pop	{r4, pc}

01025cc0 <write>:
 *          open will only return an error.
 */
__attribute__((weak)) sint32
write (sint32 fd, char8* buf, sint32 nbytes)

{
 1025cc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
#ifdef STDOUT_BASEADDRESS
  s32 i;
  char8* LocalBuf = buf;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
 1025cc4:	e2526000 	subs	r6, r2, #0
 1025cc8:	da000015 	ble	1025d24 <write+0x64>
 1025ccc:	e1a04001 	mov	r4, r1
 1025cd0:	e3a03000 	mov	r3, #0
 1025cd4:	ea000003 	b	1025ce8 <write+0x28>
	}
	if(LocalBuf != NULL) {
	    if (*LocalBuf == '\n') {
	      outbyte ('\r');
	    }
	    outbyte (*LocalBuf);
 1025cd8:	ebffc919 	bl	1018144 <outbyte>
  for (i = 0; i < nbytes; i++) {
 1025cdc:	e1560005 	cmp	r6, r5
 1025ce0:	e1a03005 	mov	r3, r5
 1025ce4:	da00000e 	ble	1025d24 <write+0x64>
	if(LocalBuf != NULL) {
 1025ce8:	e3540000 	cmp	r4, #0
 1025cec:	e2835001 	add	r5, r3, #1
 1025cf0:	0a00000b 	beq	1025d24 <write+0x64>
	if(LocalBuf != NULL) {
 1025cf4:	e0947003 	adds	r7, r4, r3
 1025cf8:	0a000009 	beq	1025d24 <write+0x64>
	    if (*LocalBuf == '\n') {
 1025cfc:	e7d40003 	ldrb	r0, [r4, r3]
 1025d00:	e350000a 	cmp	r0, #10
 1025d04:	1afffff3 	bne	1025cd8 <write+0x18>
	      outbyte ('\r');
 1025d08:	e3a0000d 	mov	r0, #13
 1025d0c:	ebffc90c 	bl	1018144 <outbyte>
 1025d10:	e5d70000 	ldrb	r0, [r7]
	    outbyte (*LocalBuf);
 1025d14:	ebffc90a 	bl	1018144 <outbyte>
  for (i = 0; i < nbytes; i++) {
 1025d18:	e1560005 	cmp	r6, r5
 1025d1c:	e1a03005 	mov	r3, r5
 1025d20:	cafffff0 	bgt	1025ce8 <write+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 1025d24:	e1a00006 	mov	r0, r6
 1025d28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01025d2c <_write>:
 1025d2c:	eaffffe3 	b	1025cc0 <write>

01025d30 <read>:
  s32 i;
  s32 numbytes = 0;
  char8* LocalBuf = buf;

  (void)fd;
  if(LocalBuf != NULL) {
 1025d30:	e3510000 	cmp	r1, #0
 1025d34:	0a000012 	beq	1025d84 <read+0x54>
	for (i = 0; i < nbytes; i++) {
 1025d38:	e3520000 	cmp	r2, #0
 1025d3c:	da00000f 	ble	1025d80 <read+0x50>
 1025d40:	e2422001 	sub	r2, r2, #1
{
 1025d44:	e92d4070 	push	{r4, r5, r6, lr}
 1025d48:	e2414001 	sub	r4, r1, #1
 1025d4c:	e0815002 	add	r5, r1, r2
 1025d50:	e2616002 	rsb	r6, r1, #2
 1025d54:	ea000001 	b	1025d60 <read+0x30>
	for (i = 0; i < nbytes; i++) {
 1025d58:	e1540005 	cmp	r4, r5
 1025d5c:	0a000005 	beq	1025d78 <read+0x48>
		numbytes++;
		*(LocalBuf + i) = inbyte();
 1025d60:	eb000017 	bl	1025dc4 <inbyte>
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1025d64:	e350000d 	cmp	r0, #13
 1025d68:	1350000a 	cmpne	r0, #10
 1025d6c:	e0861004 	add	r1, r6, r4
		*(LocalBuf + i) = inbyte();
 1025d70:	e5e40001 	strb	r0, [r4, #1]!
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1025d74:	1afffff7 	bne	1025d58 <read+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 1025d78:	e1a00001 	mov	r0, r1
 1025d7c:	e8bd8070 	pop	{r4, r5, r6, pc}
  s32 numbytes = 0;
 1025d80:	e3a01000 	mov	r1, #0
}
 1025d84:	e1a00001 	mov	r0, r1
 1025d88:	e12fff1e 	bx	lr

01025d8c <_read>:
 1025d8c:	eaffffe7 	b	1025d30 <read>

01025d90 <_fstat>:
 * fstat -- Since we have no file system, we just return an error.
 */
__attribute__((weak)) s32 _fstat(s32 fd, struct stat *buf)
{
  (void)fd;
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 1025d90:	e3a03a02 	mov	r3, #8192	; 0x2000

  return (0);
}
 1025d94:	e3a00000 	mov	r0, #0
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 1025d98:	e5813004 	str	r3, [r1, #4]
}
 1025d9c:	e12fff1e 	bx	lr

01025da0 <__errno>:
#endif

__attribute__((weak)) sint32 *
__errno (void)
{
  return &_REENT->_errno;
 1025da0:	e30a3948 	movw	r3, #43336	; 0xa948
 1025da4:	e3403106 	movt	r3, #262	; 0x106
}
 1025da8:	e5930000 	ldr	r0, [r3]
 1025dac:	e12fff1e 	bx	lr

01025db0 <_exit>:
*/
__attribute__((weak)) void _exit (sint32 status)
{
  (void)status;
  while (1) {
	;
 1025db0:	eafffffe 	b	1025db0 <_exit>

01025db4 <isatty>:
 */
__attribute__((weak)) sint32 isatty(sint32 fd)
{
  (void)fd;
  return (1);
}
 1025db4:	e3a00001 	mov	r0, #1
 1025db8:	e12fff1e 	bx	lr

01025dbc <_isatty>:
 1025dbc:	e3a00001 	mov	r0, #1
 1025dc0:	e12fff1e 	bx	lr

01025dc4 <inbyte>:
#ifdef __cplusplus
}
#endif 

char inbyte(void) {
	 return XUartPs_RecvByte(STDIN_BASEADDRESS);
 1025dc4:	e3a00a01 	mov	r0, #4096	; 0x1000
 1025dc8:	e34e0000 	movt	r0, #57344	; 0xe000
 1025dcc:	eaffccc1 	b	10190d8 <XUartPs_RecvByte>

01025dd0 <_close>:

__attribute__((weak)) s32 _close(s32 fd)
{
  (void)fd;
  return (0);
}
 1025dd0:	e3a00000 	mov	r0, #0
 1025dd4:	e12fff1e 	bx	lr

01025dd8 <main>:

//uint8_t src_buffer[16384] __attribute__((aligned(32)));
//uint8_t dest_buffer[16384] __attribute__((aligned(32)));

int main()
{
 1025dd8:	e92d4010 	push	{r4, lr}
	int res, i = 0;

	Xil_DCacheDisable();
 1025ddc:	ebffc813 	bl	1017e30 <Xil_DCacheDisable>

	hal_init();
 1025de0:	ebffa03c 	bl	100ded8 <hal_init>
	acq_init();
 1025de4:	ebff9303 	bl	100a9f8 <acq_init>
	spi_init();
 1025de8:	ebffa973 	bl	10103bc <spi_init>
	mipi_csi_init();
 1025dec:	ebffa24f 	bl	100e730 <mipi_csi_init>
	sysctrl_init();
 1025df0:	ebffae7e 	bl	10117f0 <sysctrl_init>
#endif

	//acq_hacks_run();

	// Run system control main loop;  we never leave that function.
	sysctrl_main_loop();
 1025df4:	ebffaf0d 	bl	1011a30 <sysctrl_main_loop>

	acq_hacks_init();
	acq_hacks_run();
	*/

    cleanup_platform();
 1025df8:	ebffa883 	bl	101000c <cleanup_platform>
}
 1025dfc:	e3a00000 	mov	r0, #0
 1025e00:	e8bd8010 	pop	{r4, pc}
 1025e04:	00000000 	andeq	r0, r0, r0

01025e08 <__strcmp_from_arm>:
 1025e08:	e51ff004 	ldr	pc, [pc, #-4]	; 1025e0c <__strcmp_from_arm+0x4>
 1025e0c:	0101ca89 	.word	0x0101ca89

01025e10 <__qsort_from_arm>:
 1025e10:	e51ff004 	ldr	pc, [pc, #-4]	; 1025e14 <__qsort_from_arm+0x4>
 1025e14:	0101c21d 	.word	0x0101c21d

01025e18 <__free_from_arm>:
 1025e18:	e51ff004 	ldr	pc, [pc, #-4]	; 1025e1c <__free_from_arm+0x4>
 1025e1c:	0101afc9 	.word	0x0101afc9

Disassembly of section .init:

01025e20 <_init>:
 1025e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1025e22:	bf00      	nop
 1025e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 1025e26:	bc08      	pop	{r3}
 1025e28:	469e      	mov	lr, r3
 1025e2a:	4770      	bx	lr

Disassembly of section .fini:

01025e2c <_fini>:
 1025e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1025e2e:	bf00      	nop
 1025e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 1025e32:	bc08      	pop	{r3}
 1025e34:	469e      	mov	lr, r3
 1025e36:	4770      	bx	lr
