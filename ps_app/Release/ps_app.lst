
../Release/ps_app.elf:     file format elf32-littlearm

SYMBOL TABLE:
01000000 l    d  .text	00000000 .text
010159b0 l    d  .init	00000000 .init
010159bc l    d  .fini	00000000 .fini
010159c8 l    d  .rodata	00000000 .rodata
010582f0 l    d  .data	00000000 .data
01059128 l    d  .eh_frame	00000000 .eh_frame
0105c000 l    d  .mmu_tbl	00000000 .mmu_tbl
01060000 l    d  .ARM.exidx	00000000 .ARM.exidx
01060008 l    d  .init_array	00000000 .init_array
0106000c l    d  .fini_array	00000000 .fini_array
01060010 l    d  .ARM.attributes	00000000 .ARM.attributes
01060020 l    d  .bss	00000000 .bss
010aa494 l    d  .heap	00000000 .heap
00000000 l    d  .stack	00000000 .stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 asm_vectors.o
010000a0 l       .text	00000000 Undefined
010000bc l       .text	00000000 SVCHandler
01000100 l       .text	00000000 PrefetchAbortHandler
010000e0 l       .text	00000000 DataAbortHandler
01000020 l       .text	00000000 IRQHandler
01000060 l       .text	00000000 FIQHandler
0100007c l       .text	00000000 FIQLoop
00000000 l    df *ABS*	00000000 boot.o
f8f02000 l       *ABS*	00000000 PSS_L2CC_BASE_ADDR
f8000000 l       *ABS*	00000000 PSS_SLCR_BASE_ADDR
0fffff00 l       *ABS*	00000000 RESERVED
fe00000f l       *ABS*	00000000 LRemap
f8f0277c l       *ABS*	00000000 L2CCWay
f8f02730 l       *ABS*	00000000 L2CCSync
f8f02100 l       *ABS*	00000000 L2CCCrtl
f8f02104 l       *ABS*	00000000 L2CCAuxCrtl
f8f02108 l       *ABS*	00000000 L2CCTAGLatReg
f8f0210c l       *ABS*	00000000 L2CCDataLatReg
f8f02220 l       *ABS*	00000000 L2CCIntClear
f8f0221c l       *ABS*	00000000 L2CCIntRaw
f8000004 l       *ABS*	00000000 SLCRlockReg
f8000008 l       *ABS*	00000000 SLCRUnlockReg
f8000a1c l       *ABS*	00000000 SLCRL2cRamReg
f8000244 l       *ABS*	00000000 SLCRCPURSTReg
f800d010 l       *ABS*	00000000 EFUSEStaus
00001005 l       *ABS*	00000000 CRValMmuCac
00002000 l       *ABS*	00000000 CRValHiVectorAddr
72360000 l       *ABS*	00000000 L2CCAuxControl
00000001 l       *ABS*	00000000 L2CCControl
00000111 l       *ABS*	00000000 L2CCTAGLatency
00000121 l       *ABS*	00000000 L2CCDataLatency
0000767b l       *ABS*	00000000 SLCRlockKey
0000df0d l       *ABS*	00000000 SLCRUnlockKey
00020202 l       *ABS*	00000000 SLCRL2cRamConfig
40000000 l       *ABS*	00000000 FPEXC_EN
01000144 l       .text	00000000 CheckEFUSE
0100013c l       .text	00000000 EndlessLoop0
0100017c l       .text	00000000 OKToRun
010003c8 l       .text	00000000 invalidate_dcache
01000324 l       .text	00000000 Sync
01000444 l       .text	00000000 finished
010003dc l       .text	00000000 loop1
01000438 l       .text	00000000 skip
01000418 l       .text	00000000 loop2
0100041c l       .text	00000000 loop3
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
01059128 l     O .eh_frame	00000000 
010004dc l     F .text	00000000 deregister_tm_clones
01000500 l     F .text	00000000 register_tm_clones
0100052c l     F .text	00000000 __do_global_dtors_aux
01060020 l       .bss	00000001 completed.10177
0106000c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0100055c l     F .text	00000000 frame_dummy
01060024 l       .bss	00000018 object.10182
01060008 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 acq_hacks.c
00000000 l    df *ABS*	00000000 acquire.c
00000000 l    df *ABS*	00000000 clkwiz_interface.c
00000000 l    df *ABS*	00000000 demo_norway.c
00000000 l    df *ABS*	00000000 fabric_config.c
00000000 l    df *ABS*	00000000 hal.c
01002f24 l     F .text	0000012c d_printf.constprop.5
01003050 l     F .text	0000000c d_printf.constprop.6
0100305c l     F .text	0000012c d_printf.constprop.7
01003188 l     F .text	00000038 d_read_timing.part.3
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mipi_csi_hacks.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 xaxidma.c
00000000 l    df *ABS*	00000000 xaxidma_sinit.c
00000000 l    df *ABS*	00000000 xaxidma_bdring.c
00000000 l    df *ABS*	00000000 xaxidma_g.c
00000000 l    df *ABS*	00000000 xclk_wiz.c
0100597c l     F .text	00000028 StubErrCallBack
00000000 l    df *ABS*	00000000 xclk_wiz_sinit.c
00000000 l    df *ABS*	00000000 xgpiops.c
00000000 l    df *ABS*	00000000 xgpiops_sinit.c
00000000 l    df *ABS*	00000000 xgpiops_intr.c
00000000 l    df *ABS*	00000000 xgpiops_g.c
00000000 l    df *ABS*	00000000 xscugic_intr.c
00000000 l    df *ABS*	00000000 xscugic.c
01007628 l     F .text	00000050 StubHandler
01060040 l     O .bss	00000004 CpuId
00000000 l    df *ABS*	00000000 xscugic_sinit.c
00000000 l    df *ABS*	00000000 xscutimer.c
00000000 l    df *ABS*	00000000 xscutimer_selftest.c
00000000 l    df *ABS*	00000000 xscutimer_sinit.c
00000000 l    df *ABS*	00000000 xscutimer_g.c
00000000 l    df *ABS*	00000000 xil_assert.c
01060044 l     O .bss	00000004 Xil_AssertCallbackRoutine
00000000 l    df *ABS*	00000000 print.c
00000000 l    df *ABS*	00000000 xil_cache.c
01008cd4 l     F .text	00000058 Xil_L2CacheEnable.part.0
00000000 l    df *ABS*	00000000 outbyte.c
00000000 l    df *ABS*	00000000 xplatform_info.c
00000000 l    df *ABS*	00000000 xil_printf.c
01008f04 l     F .text	0000009c getnum
01008fa0 l     F .text	00000034 padding.part.0
01008fd4 l     F .text	00000164 outnum
00000000 l    df *ABS*	00000000 xil_exception.c
010095c4 l     F .text	00000004 Xil_ExceptionNullHandler
00000000 l    df *ABS*	00000000 xuartps_hw.c
00000000 l    df *ABS*	00000000 xclk_wiz_g.c
00000000 l    df *ABS*	00000000 xscugic_g.c
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 xil-crt0.S
00000000 l    df *ABS*	00000000 translation_table.o
00000000 l       *ABS*	00000000 SECT
00100000 l       *ABS*	00000000 DDR_START
0fffffff l       *ABS*	00000000 DDR_END
0ff00000 l       *ABS*	00000000 DDR_SIZE
000000ff l       *ABS*	00000000 DDR_REG
00000300 l       *ABS*	00000000 UNDEF_REG
00000000 l    df *ABS*	00000000 cpu_init.o
00000000 l    df *ABS*	00000000 xtime_l.c
00000000 l    df *ABS*	00000000 _udivsi3.o
010098a8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _divsi3.o
01009b26 l       .text	00000000 .divsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
01058760 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0100a5d0 l     F .text	0000006c currentlocale
010559e4 l     O .rodata	0000001c categories
01060048 l     O .bss	000000e7 global_locale_string
01060130 l     O .bss	000000e0 new_categories.6704
01060210 l     O .bss	000000e0 saved_categories.6705
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
01055b6c l     O .rodata	00000048 JIS_state_table
01055bb4 l     O .rodata	00000048 JIS_action_table
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncasecmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0100cb5c l     F .text	00000120 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
01055bfc l     O .rodata	00000010 blanks.8644
01055c0c l     O .rodata	00000010 zeroes.8645
00000000 l    df *ABS*	00000000 vfprintf.c
01010404 l     F .text	0000006a __sbprintf
01055c1c l     O .rodata	00000010 blanks.8659
01055c2c l     O .rodata	00000010 zeroes.8660
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 dtoa.c
010109c8 l     F .text	00000148 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010119c4 l     F .text	00000004 __fp_lock
010119d4 l     F .text	000000e4 __sinit.part.0
01011ab8 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
01055d40 l     O .rodata	0000000c p05.7430
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
01055e68 l     O .rodata	00000010 blanks.8623
01055e78 l     O .rodata	00000010 zeroes.8624
00000000 l    df *ABS*	00000000 vfprintf.c
01014238 l     F .text	00000074 __sprint_r.part.0
01015258 l     F .text	0000006a __sbprintf
01055e88 l     O .rodata	00000010 blanks.8637
01055e98 l     O .rodata	00000010 zeroes.8638
00000000 l    df *ABS*	00000000 wcsnrtombs.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
01060328 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 envlock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 _sbrk.c
0106032c l     O .bss	00000004 heap.5714
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 write.c
01015874 l     F .text	0000006c write.localalias.0
00000000 l    df *ABS*	00000000 read.c
010158e4 l     F .text	0000005c read.localalias.0
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 inbyte.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 crtstuff.c
01059128 l     O .eh_frame	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crtn.o
01012db0 g     F .text	00000028 _mprec_log10
00010400 g       .stack	00000000 _supervisor_stack_end
01012e20 g     F .text	0000005a __any_on
010156c0 g     F .text	00000026 _isatty_r
010056ac g     F .text	00000218 XAxiDma_BdRingCheck
01055e18 g     O .rodata	00000028 __mprec_tinytens
01008b1c g     F .text	00000048 Xil_L1ICacheInvalidateRange
010583f8 g     O .data	00000058 XClk_Wiz_ConfigTable
0100c7dc g     F .text	000000c2 strcpy
010131f0 g     F .text	0000001a cleanup_glue
0100512c g     F .text	000000d8 XAxiDma_BdRingUnAlloc
0100c1d4 g     F .text	00000068 _puts_r
010156e8 g     F .text	0000002c _lseek_r
01000000 g       .text	00000000 _vector_table
01008b64 g     F .text	00000074 Xil_L2CacheDisable
0105912c g       .eh_frame	00000000 __eh_framehdr_start
01059128 g       .data	00000000 ___CTORS_LIST___
010087b0 g     F .text	00000058 Xil_ICacheInvalidateRange
010089c8 g     F .text	00000018 Xil_L1DCacheDisable
00000400 g       *ABS*	00000000 _ABORT_STACK_SIZE
01008558 g     F .text	00000028 print
0100a0f0 g     F .text	0000005a .hidden __floatdidf
0100c1a8 g     F .text	0000002a printf
010104fc g     F .text	00000054 _wcrtomb_r
01013380 g     F .text	00000020 __sseek
01011b8c g     F .text	00000008 __sinit
01002190 g     F .text	00000068 acq_get_ll_pointer
010055f8 g     F .text	000000b4 XAxiDma_BdRingFree
01015740 g     F .text	000000b0 __swbuf_r
010059a4 g     F .text	000000c8 XClk_Wiz_CfgInitialize
010095f8 g     F .text	00000030 Xil_PrefetchAbortHandler
010a1d20 g     O .bss	00000004 mipi_dma_config
010061c4 g     F .text	000000e4 XGpioPs_ReadPin
0100ad10 g     F .text	00000244 _setlocale_r
01011abc g     F .text	0000002e __sfmoreglue
01008d98 g     F .text	00000014 Xil_L2CacheInvalidateLine
0100c184 g     F .text	00000002 __malloc_unlock
01005fd0 g     F .text	000000b8 XGpioPs_GetOutputEnable
01008300 g     F .text	00000088 XScuTimer_SetPrescaler
010084e8 g     F .text	0000005c Xil_Assert
010080bc g     F .text	00000050 XScuGic_SetCpuID
01007f48 g     F .text	00000174 XScuGic_CfgInitialize
010109b4 g     F .text	0000000e __set_ctype
01004018 g     F .text	00000004 enable_caches
01000584 g     F .text	00000004 acq_hacks_init
010124b0 g     F .text	000000ce memmove
01011b74 g     F .text	00000016 _cleanup
00010c00 g       .stack	00000000 __supervisor_stack
0100c2f8 g     F .text	00000090 snprintf
0100af7c g     F .text	00000020 __locale_ctype_ptr
01000dd4 g     F .text	00000404 acq_prepare_triggered
01012580 g     F .text	0000004c _Balloc
0100474c g     F .text	00000028 XAxiDma_SelectKeyHole
01060008 g       .ARM.exidx	00000000 __exidx_end
010063a8 g     F .text	00000124 XGpioPs_SetDirectionPin
010096a8 g     F .text	00000018 XUartPs_SendByte
010026a0 g     F .text	000000d4 clkwiz_init
01007a34 g     F .text	0000012c XScuGic_GetPriorityTriggerType
00011400 g       .stack	00000000 _undef_stack_end
01015954  w    F .text	00000010 __errno
01009648 g     F .text	00000004 Xil_ExceptionInit
010122cc g     F .text	00000004 __localeconv_l
010031d8 g     F .text	000001a8 bogo_calibrate
010106c8 g     F .text	00000054 __sjis_wctomb
01060010 g       .ARM.attributes	00000000 __sbss_start
01015694 g     F .text	0000002a _fstat_r
010aa490 g     O .bss	00000004 errno
0101333c g     F .text	00000004 __seofread
01009794 g     F .text	00000014 PrefetchAbortInterrupt
010096c0 g     F .text	0000001c XUartPs_RecvByte
0100a158 g     F .text	00000160 .hidden __aeabi_fadd
0100a154 g     F .text	00000164 .hidden __subsf3
01059128 g       .data	00000000 __fixup_start
01008efc g     F .text	00000008 XGetPlatform_Info
010089e0 g     F .text	0000005c Xil_DCacheFlush
0100012c g       .text	00000000 _boot
01008c84 g     F .text	00000020 Xil_DCacheInvalidate
010078fc g     F .text	00000138 XScuGic_SetPriorityTriggerType
01006c90 g     F .text	000000b8 XGpioPs_IntrGetStatus
0101071c g     F .text	00000070 __eucjp_wctomb
010583b4 g     O .data	00000008 XScuTimer_ConfigTable
01059128 g       .data	00000000 __fixup_end
010a1d24 g     O .bss	00000750 mipi_dma
010049a8 g     F .text	00000184 XAxiDma_UpdateBdRingCDesc
0100bb00 g     F .text	000005e0 memcpy
01005c64 g     F .text	000000b4 XGpioPs_Read
01059128 g     O .data	00000000 .hidden __TMC_END__
010119c8 g     F .text	0000000c _cleanup_r
0100ccf8 g     F .text	00001b4c _svfprintf_r
0100a078 g     F .text	00000022 .hidden __floatsidf
01009628 g     F .text	00000020 Xil_UndefinedExceptionHandler
0105c000 g       .mmu_tbl	00000000 __mmu_tbl_start
01060010 g       .ARM.attributes	00000000 __sdata_start
01059128 g       .data	00000000 __DTOR_END__
010020f0 g     F .text	000000a0 acq_debug_dump_waveraw
0100a368 g     F .text	00000000 .hidden __aeabi_uldivmod
01008ca4 g     F .text	00000030 Xil_ICacheInvalidate
0100c23c g     F .text	00000010 puts
01004024 g     F .text	00000004 init_platform
00011000 g       .stack	00000000 __abort_stack
01060010 g       .fini_array	00000000 __fini_array_end
010582ec g       .rodata	00000000 __rodata_end
01012d50 g     F .text	00000060 __ratio
01008dac g     F .text	00000068 Xil_L2CacheInvalidateRange
01002a64 g     F .text	00000278 clkwiz_dump_state
0100b0b8 g     F .text	00000010 malloc
0100c188 g     F .text	00000020 _printf_r
010098a8 g     F .text	0000025c .hidden __udivsi3
01015968  w    F .text	00000008 isatty
01015944  w    F .text	00000010 _fstat
01059128 g       .data	00000000 __data1_start
0100a2c0 g     F .text	0000001c .hidden __aeabi_i2f
01055d50 g     O .rodata	000000c8 __mprec_tens
010582ec g       .data	00000000 __sbss2_end
010104dc g     F .text	0000001e vsnprintf
010aa484 g     O .bss	00000004 UndefinedExceptionAddr
01003d20 g     F .text	00000010 d_dump_timing_ex
010602f4 g     O .bss	00000004 __malloc_top_pad
01003418 g     F .text	000001d8 d_printf
0106003c g     O .bss	00000004 test_sizeptr
010582f0 g     O .data	00000000 .hidden __dso_handle
0100a058 g     F .text	0000001e .hidden __aeabi_ui2d
00010400 g       .stack	00000000 __irq_stack
010122d0 g     F .text	0000001e _localeconv_r
010127a4 g     F .text	00000012 __i2b
01011e70 g     F .text	0000032c __sfvwrite_r
010086a0 g     F .text	0000004c Xil_DCacheFlushLine
01004020 g     F .text	00000004 init_uart
0100a418 g     F .text	00000116 .hidden __udivmoddi4
01009dd4 g     F .text	00000000 .hidden __aeabi_drsub
0100c24c g     F .text	00000026 _sbrk_r
01007588 g     F .text	00000028 StubHandler
01009820 g       .text	00000000 __cpu_init
01058450 g     O .data	00000304 XScuGic_ConfigTable
01003aec g     F .text	00000028 d_read_global_timer
01015714 g     F .text	0000002c _read_r
01005070 g     F .text	0000001c XAxiDma_BdRingGetCoalesce
010154e0 g     F .text	00000088 _fclose_r
01008d2c g     F .text	00000018 Xil_L2CacheEnable
0101199c g     F .text	00000028 fflush
01060320 g     O .bss	00000004 __malloc_max_sbrked_mem
01004774 g     F .text	00000028 XAxiDma_SelectCyclicMode
0100810c g     F .text	00000010 XScuGic_GetCpuID
0100a09c g     F .text	00000042 .hidden __extendsfdf2
01009de0 g     F .text	00000276 .hidden __adddf3
01003e88 g     F .text	00000098 csi_hack_start_frame
01003b14 g     F .text	00000070 d_start_timing
00000800 g       *ABS*	00000000 _SUPERVISOR_STACK_SIZE
0d0aa4a0 g       .heap	00000000 _heap_end
01012bec g     F .text	000000ae __b2d
01060000 g       .ARM.exidx	00000000 __exidx_start
01015844  w    F .text	00000018 lseek
01015970  w    F .text	00000008 _isatty
01009744 g     F .text	00000014 IRQInterrupt
010043c8 g     F .text	000000b0 XAxiDma_Pause
010559e0 g     O .rodata	00000004 _global_impure_ptr
01012e7c g     F .text	00000372 _realloc_r
0100c9dc g     F .text	0000005a strncasecmp
0100a580 g     F .text	00000050 __libc_init_array
010aa494 g       .bss	00000000 __bss_end
0100cca4 g     F .text	0000001e strtol_l
010153e8 g     F .text	00000036 wcsnrtombs
010582ec g       .data	00000000 __rodata1_start
01005d18 g     F .text	000000a8 XGpioPs_Write
01015628 g     F .text	00000026 _fputwc_r
01055e40 g     O .rodata	00000028 __mprec_bigtens
01061994 g       .ARM.attributes	00000000 __ARM.attributes_end
01012670 g     F .text	00000098 __s2b
0100976c g     F .text	00000014 SWInterrupt
0100a058 g     F .text	0000001e .hidden __floatunsidf
01015804  w    F .text	00000040 _sbrk
01012a58 g     F .text	0000003a __mcmp
01060010 g       .ARM.attributes	00000000 __tbss_start
01000b98 g     F .text	000000b8 acq_get_next_alloc
01058324 g     O .data	00000088 XAxiDma_ConfigTable
01011ba4 g     F .text	00000016 __fp_lock_all
0100811c g     F .text	0000001c XScuGic_LookupConfig
010159b0 g     F .init	00000000 _init
010033e4 g     F .text	00000034 gpio_led_write
01001b2c g     F .text	00000070 acq_force_stop
01008e14 g     F .text	00000044 Xil_L2CacheFlush
0100ccc4 g     F .text	00000030 strtol
010086ec g     F .text	00000054 Xil_DCacheFlushRange
01001b9c g     F .text	00000554 acq_debug_dump
0100a3d8 g     F .text	00000040 .hidden __aeabi_d2ulz
0100a154 g     F .text	00000164 .hidden __aeabi_fsub
0100a550 g     F .text	00000030 __libc_fini_array
0101078c g     F .text	00000082 __jis_wctomb
01006fbc g     F .text	000000c8 XGpioPs_SetIntrType
01007e6c g     F .text	000000dc XScuGic_Stop
01007ca8 g     F .text	00000074 XScuGic_InterruptUnmapFromCpu
0101320c g     F .text	00000088 _reclaim_reent
00011400 g       .stack	00000000 __fiq_stack
01012708 g     F .text	0000003e __hi0bits
0100964c g     F .text	00000018 Xil_ExceptionRegisterHandler
010559c8 g     O .rodata	00000018 fabcfg_dummy_tests
010583bc g     O .data	00000004 Xil_AssertWait
010aa4a0 g       .heap	00000000 _heap_start
010065b4 g     F .text	00000124 XGpioPs_SetOutputEnablePin
00000400 g       *ABS*	00000000 _IRQ_STACK_SIZE
0100a2ec g     F .text	0000007c .hidden __floatdisf
01060010 g       .ARM.attributes	00000000 __sbss_end
010088dc g     F .text	00000018 Xil_L1DCacheInvalidateLine
01006a10 g     F .text	000000dc XGpioPs_IntrDisablePin
01008a3c g     F .text	00000018 Xil_L1DCacheFlushLine
00000400 g       *ABS*	00000000 _FIQ_STACK_SIZE
01015874  w    F .text	0000006c write
0100012c g       .text	00000000 _prestart
01006e30 g     F .text	000000ac XGpioPs_IntrClear
01000c50 g     F .text	00000138 acq_append_next_alloc
01059124 g     O .data	00000004 environ
01004b2c g     F .text	00000218 XAxiDma_BdRingCreate
01009de0 g     F .text	00000276 .hidden __aeabi_dadd
01008554 g     F .text	00000004 XNullHandler
0100c3cc g     F .text	00000040 strcat
01009138 g     F .text	0000048c xil_printf
0100a398 g     F .text	00000040 .hidden __aeabi_f2ulz
010128f8 g     F .text	000000a2 __pow5mult
0100a0e0 g     F .text	0000006a .hidden __aeabi_ul2d
00011800 g       .stack	00000000 __undef_stack
01000768 g     F .text	0000003c _acq_irq_error_dma
01005a6c g     F .text	00000060 XClk_Wiz_GetInterruptSettings
01009b20 g     F .text	00000000 .hidden __aeabi_idiv
01003acc g     F .text	00000020 d_iskeypress
01008278 g     F .text	00000088 XScuTimer_Stop
010159c8 g     O .rodata	00040000 norway_512x512_grey
01055a00 g     O .rodata	0000016c __C_locale
010072f8 g     F .text	0000010c XGpioPs_GetIntrTypePin
01008410 g     F .text	000000bc XScuTimer_SelfTest
01003b84 g     F .text	00000080 d_stop_timing
010aa488 g     O .bss	00000004 PrefetchAbortAddr
01004730 g     F .text	0000001c XAxiDma_Busy
0100774c g     F .text	000000cc XScuGic_Disconnect
01059128 g       .data	00000000 __CTOR_LIST__
0105c000 g       .mmu_tbl	00000000 MMUTable
0100c274 g     F .text	00000084 _snprintf_r
010582ec g       .data	00000000 __sbss2_start
0100acbc g     F .text	00000054 __get_locale_env
01008b04 g     F .text	00000018 Xil_L1ICacheInvalidateLine
01011b94 g     F .text	00000002 __sfp_lock_acquire
01012410 g     F .text	00000000 memchr
01011c80 g     F .text	000001f0 _free_r
0100af54 g     F .text	00000020 __locale_mb_cur_max
010105a8 g     F .text	00000016 _wcsrtombs_r
01008ab4 g     F .text	0000001c Xil_L1ICacheEnable
01000588 g     F .text	000001e0 acq_hacks_run
0100088c g     F .text	00000018 _acq_wait_for_ndone
010108d8 g     F .text	000000dc __call_exitprocs
010a0330 g     O .bss	00000fa0 test_sizes
01009ddc g     F .text	0000027a .hidden __aeabi_dsub
01058cf4 g     O .data	00000020 __default_locale
0105911c g     O .data	00000004 __malloc_sbrk_base
010097bc g       .text	00000064 _start
010085b8 g     F .text	000000e8 Xil_DCacheInvalidateRange
0100a0e0 g     F .text	0000006a .hidden __floatundidf
0101585c  w    F .text	00000018 _lseek
01008ad0 g     F .text	0000001c Xil_L1ICacheDisable
010159c8 g       .rodata	00000000 __rodata_start
0105830c g     O .data	00000018 acq_substate_to_str
0101299c g     F .text	000000ba __lshift
010158e4  w    F .text	0000005c read
010066d8 g     F .text	000000e8 XGpioPs_GetOutputEnablePin
0100a2c0 g     F .text	0000001c .hidden __floatsisf
010133a8 g     F .text	000000f8 __ssprint_r
01060010 g       *ABS*	00000000 _SDA_BASE_
01060330 g     O .bss	00040000 buffer
0100b890 g     F .text	00000082 __sjis_mbtowc
0100c8a0 g     F .text	00000056 strlcpy
0100ca38 g     F .text	000000a2 strncmp
01008778 g     F .text	00000038 Xil_ICacheInvalidateLine
010105c0 g     F .text	00000022 wcsrtombs
01059128 g       .data	00000000 __data_end
01007084 g     F .text	000000d4 XGpioPs_GetIntrType
01005dc0 g     F .text	000000ac XGpioPs_SetDirection
010127b8 g     F .text	0000013e __multiply
01003ca0 g     F .text	00000080 d_dump_timing
01006088 g     F .text	0000013c XGpioPs_GetBankPin
010aa4a0 g       .heap	00000000 HeapBase
0100cadc g     F .text	0000007e strncpy
010602f8 g     O .bss	00000028 __malloc_current_mallinfo
01012c9c g     F .text	000000b2 __d2b
0100c388 g     F .text	00000044 strcasecmp
01007d1c g     F .text	000000d4 XScuGic_Disable
01003c28 g     F .text	00000078 d_read_timing_us
010154b0 g     F .text	00000026 _close_r
01009758 g     F .text	00000014 UndefinedException
010aa48c g     O .bss	00000004 DataAbortAddr
0100a078 g     F .text	00000022 .hidden __aeabi_i2d
01005acc g     F .text	0000001c XClk_Wiz_LookupConfig
01008bf4 g     F .text	00000024 Xil_ICacheDisable
01008bd8 g     F .text	0000001c Xil_DCacheDisable
00010000 g       .stack	00000000 _irq_stack_end
0100a2dc g     F .text	0000008c .hidden __floatundisf
01010810 g     F .text	000000c6 __swsetup_r
01009dd0  w    F .text	00000002 .hidden __aeabi_ldiv0
010a12d0 g     O .bss	00000858 g_acq_state
01011aec g     F .text	00000086 __sfp
01012dd8 g     F .text	00000046 __copybits
01058d14 g     O .data	00000408 __malloc_av_
0100a2b8 g     F .text	00000024 .hidden __aeabi_ui2f
01011ba0 g     F .text	00000002 __sinit_lock_release
01010470 g     F .text	0000006a _vsnprintf_r
0105912c g       .eh_frame	00000000 __eh_framehdr_end
01013318 g     F .text	00000022 __sread
01008eec g     F .text	00000010 outbyte
01002774 g     F .text	000002f0 clkwiz_change_mipi_freq
0100c180 g     F .text	00000002 __malloc_lock
0106000c g       .fini_array	00000000 __fini_array_start
01011968 g     F .text	00000032 _fflush_r
0100b688 g     F .text	00000208 __utf8_mbtowc
0101544c g     F .text	00000062 _calloc_r
010088bc g     F .text	00000020 Xil_L1DCacheEnable
010a2480 g     O .bss	00008000 src_buffer
01005204 g     F .text	000002a0 XAxiDma_BdRingToHw
01004d44 g     F .text	00000138 XAxiDma_BdRingClone
010058c4 g     F .text	000000b8 XAxiDma_BdRingDumpRegs
010024d0 g     F .text	000001d0 acq_copy_slow_mipi
01060020 g       .bss	00000000 __bss_start
00010000 g       *ABS*	00000000 _STACK_SIZE
01060010 g       .ARM.attributes	00000000 __tdata_start
01060010 g       .ARM.attributes	00000000 __tdata_end
0100c0e0 g     F .text	000000a0 memset
0101598c g     F .text	00000024 main
0100479c g     F .text	000001ac XAxiDma_SimpleTransfer
01003ac0 g     F .text	0000000c d_waitkey
01060324 g     O .bss	00000004 __malloc_max_total_mem
0c000000 g       *ABS*	00000000 _HEAP_SIZE
0100a2ec g     F .text	0000007c .hidden __aeabi_l2f
010157f0 g     F .text	00000012 __swbuf
0100b914 g     F .text	000000b6 __eucjp_mbtowc
010098a8 g     F .text	00000000 .hidden __aeabi_uidiv
01008138 g     F .text	000000b0 XScuTimer_CfgInitialize
010133a0 g     F .text	00000008 __sclose
010081e8 g     F .text	00000090 XScuTimer_Start
01015568 g     F .text	00000010 fclose
01001b10 g     F .text	0000001c acq_is_done
0100cc7c g     F .text	00000028 _strtol_r
01012234 g     F .text	00000088 _findenv_r
0106000c g       .init_array	00000000 __init_array_end
0100401c g     F .text	00000004 disable_caches
01010b10 g     F .text	00000d0c _dtoa_r
0100b0d8 g     F .text	00000564 _malloc_r
01008808 g     F .text	000000b4 Xil_L1DCacheInvalidate
0101060c g     F .text	00000018 __ascii_wctomb
0100a0f0 g     F .text	0000005a .hidden __aeabi_l2d
01010624 g     F .text	000000a4 __utf8_wctomb
01006888 g     F .text	000000dc XGpioPs_IntrEnablePin
010062a8 g     F .text	00000100 XGpioPs_WritePin
01006964 g     F .text	000000ac XGpioPs_IntrDisable
010154dc g     F .text	00000002 __env_unlock
0101219c g     F .text	00000048 _fwalk
00000000 g       .stack	00000000 _stack_end
010aa480 g     O .bss	00000004 Xil_AssertStatus
0100b63c g     F .text	00000026 _mbtowc_r
0100a2dc g     F .text	0000008c .hidden __aeabi_ul2f
0100a398 g     F .text	00000040 .hidden __fixunssfdi
01004fa8 g     F .text	00000054 XAxiDma_BdRingStart
01059128 g       .data	00000000 ___DTORS_END___
01009b20 g     F .text	00000294 .hidden __divsi3
01008a54 g     F .text	00000048 Xil_L1DCacheFlushRange
0100985c g     F .text	00000024 XTime_SetTime
01060010 g       .ARM.attributes	00000000 __sdata_end
01011bd4 g     F .text	000000aa _malloc_trim_r
010152c4 g     F .text	000000f4 _wcsnrtombs_l
010582ec g       .data	00000000 __sdata2_start
01059128 g       .data	00000000 __CTOR_END__
01059128 g       .data	00000000 ___DTORS_LIST___
01002d70 g     F .text	00000190 fabcfg_init
0100c508 g     F .text	000002dc strcmp
01008a9c g     F .text	00000018 Xil_L1DCacheStoreLine
01003c04 g     F .text	00000024 d_read_timing
010084cc g     F .text	0000001c XScuTimer_LookupConfig
01004ffc g     F .text	00000074 XAxiDma_BdRingSetCoalesce
01059128 g       .data	00000000 __DTOR_LIST__
0101523c g     F .text	0000001a vfiprintf
0100418c g     F .text	0000023c XAxiDma_CfgInitialize
0100a3d8 g     F .text	00000040 .hidden __fixunsdfdi
010159bc g     F .fini	00000000 _fini
01008d68 g     F .text	00000030 Xil_ICacheEnable
0100afb0 g     F .text	00000012 memalign
01004478 g     F .text	000002b8 XAxiDma_Resume
01008ed8 g     F .text	00000014 Xil_L2CacheStoreLine
010602f0 g     O .bss	00000004 _PathLocale
00010c00 g       .stack	00000000 _abort_stack_end
010153b8 g     F .text	00000030 _wcsnrtombs_r
01015420 g     F .text	0000002c _write_r
01001388 g     F .text	00000788 _acq_irq_rx_handler
01002f00 g     F .text	00000024 irq_xscutimer
0100af9c g     F .text	00000012 setlocale
0100402c g     F .text	00000114 XAxiDma_Reset
01003f7c g     F .text	0000009c csi_hack_send_line_data
0100a14c g     F .text	0000016c .hidden __aeabi_frsub
01003d30 g     F .text	00000158 csi_hack_init
01058758 g     O .data	00000004 _impure_ptr
0101181c g     F .text	0000014a __sflush_r
01060008 g       .init_array	00000000 __preinit_array_end
010134a0 g     F .text	00000d96 _svfiprintf_r
0100a63c g     F .text	00000680 __loadlocale
010582f4 g     O .data	00000018 acq_state_to_str
010582ec g       .data	00000000 __sdata2_end
0100b664 g     F .text	00000024 __ascii_mbtowc
01012b9c g     F .text	00000050 __ulp
01011bbc g     F .text	00000016 __fp_unlock_all
01005f24 g     F .text	000000ac XGpioPs_SetOutputEnable
010021f8 g     F .text	000002d8 acq_debug_dump_wave
01015978 g     F .text	0000000c inbyte
01007bd4 g     F .text	000000d4 XScuGic_Enable
010583c0 g     O .data	00000038 XExc_VectorTable
010067c0 g     F .text	0000001c XGpioPs_LookupConfig
010122f0 g     F .text	0000001e localeconv
01059128 g       .data	00000000 ___CTORS_END___
01012310 g     F .text	0000005c __swhatbuf_r
00010000 g       .stack	00000000 __stack
01009b04 g     F .text	0000001a .hidden __aeabi_uidivmod
01009684 g     F .text	00000024 Xil_ExceptionRemoveHandler
0d0aa4a0 g       .heap	00000000 HeapLimit
01003f20 g     F .text	0000005c csi_hack_stop_frame
010158e0  w    F .text	00000004 _write
01000828 g     F .text	00000064 _acq_reset_trigger
00011800 g       .stack	00000000 _end
010096dc g     F .text	00000054 XUartPs_ResetHw
010583ac g     O .data	00000008 XGpioPs_ConfigTable
010582ec g       .data	00000000 __rodata1_end
01004028 g     F .text	00000004 cleanup_platform
01015578 g     F .text	000000ae __fputwc
01007404 g     F .text	000000a0 XGpioPs_SetCallbackHandler
01059128 g       .data	00000000 __data1_end
01009780 g     F .text	00000014 DataAbortInterrupt
0100508c g     F .text	000000a0 XAxiDma_BdRingAlloc
010074a4 g     F .text	000000e4 XGpioPs_IntrHandler
010064cc g     F .text	000000e8 XGpioPs_GetDirectionPin
01013340 g     F .text	0000003e __swrite
01059120 g     O .data	00000004 __malloc_trim_threshold
010aa4a0 g       .heap	00000000 _heap
0100a530 g     F .text	00000020 exit
010142c0 g     F .text	00000f7c _vfiprintf_r
010a1b28 g     O .bss	000001f8 g_hal
010121e4 g     F .text	00000050 _fwalk_reent
0100b9cc g     F .text	00000126 __jis_mbtowc
0100a2b8 g     F .text	00000024 .hidden __floatunsisf
01012a94 g     F .text	00000106 __mdiff
01006edc g     F .text	000000e0 XGpioPs_IntrClearPin
0100afc4 g     F .text	000000f4 _memalign_r
01007df0 g     F .text	0000007c XScuGic_UnmapAllInterruptsFromCpu
01060010 g       .ARM.attributes	00000000 __tbss_end
01011b98 g     F .text	00000002 __sfp_lock_release
010007a4 g     F .text	00000084 _acq_reset_PL_fifo
01003380 g     F .text	00000064 bogo_delay
01055c3c g     O .rodata	00000101 _ctype_
01015940  w    F .text	00000004 _read
01009dd0  w    F .text	00000002 .hidden __aeabi_idiv0
01060008 g       .init_array	00000000 __init_array_start
01005ae8 g     F .text	0000017c XGpioPs_CfgInitialize
01008388 g     F .text	00000088 XScuTimer_GetPrescaler
01007158 g     F .text	000001a0 XGpioPs_SetIntrTypePin
010054a4 g     F .text	00000154 XAxiDma_BdRingFromHw
01015964  w    F .text	00000004 _exit
01008580 g     F .text	00000038 Xil_DCacheInvalidateLine
01004948 g     F .text	00000030 XAxiDma_LookupConfig
0101236c g     F .text	0000009a __smakebuf_r
01009730 g     F .text	00000014 FIQInterrupt
01007818 g     F .text	000000e4 XScuGic_SoftwareIntr
0100c900 g     F .text	000000dc strlen
01002cdc g     F .text	00000094 clkwiz_commit
0100af74 g     F .text	00000006 __locale_ctype_ptr_l
00010000 g       .stack	00000000 _stack
01004140 g     F .text	0000004c XAxiDma_ResetIsDone
01005e6c g     F .text	000000b8 XGpioPs_GetDirection
010142ac g     F .text	00000012 __sprint_r
0100c40c g     F .text	000000e4 strchr
01008544 g     F .text	00000010 Xil_AssertSetCallback
0100a09c g     F .text	00000042 .hidden __aeabi_f2d
010075b0 g     F .text	00000078 XScuGic_InterruptHandler
010582f0 g       .data	00000000 __data_start
01008e70 g     F .text	00000068 Xil_L2CacheFlushRange
01007678 g     F .text	000000d4 XScuGic_Connect
01008740 g     F .text	00000038 Xil_DCacheStoreLine
01004e7c g     F .text	0000012c XAxiDma_StartBdRingHw
01008c18 g     F .text	0000006c Xil_L2CacheInvalidate
010105e4 g     F .text	00000026 _wctomb_r
010154d8 g     F .text	00000002 __env_lock
00011000 g       .stack	00000000 _fiq_stack_end
01009ddc g     F .text	0000027a .hidden __subdf3
0100e848 g     F .text	00001ba0 _vfprintf_r
0100893c g     F .text	0000008c Xil_L1DCacheFlush
01060008 g       .init_array	00000000 __preinit_array_start
00000400 g       *ABS*	00000000 _UNDEF_STACK_SIZE
01006d48 g     F .text	000000e8 XGpioPs_IntrGetStatusPin
01008aec g     F .text	00000018 Xil_L1ICacheInvalidate
01012748 g     F .text	0000005c __lo0bits
01009db4 g     F .text	0000001a .hidden __aeabi_idivmod
010008a4 g     F .text	000002f4 acq_init
01007b60 g     F .text	00000074 XScuGic_InterruptMaptoCpu
01008e58 g     F .text	00000018 Xil_L2CacheFlushLine
01004978 g     F .text	00000030 XAxiDma_LookupConfigBaseAddr
010095c8 g     F .text	00000030 Xil_DataAbortHandler
010582ec g       *ABS*	00000000 _SDA2_BASE_
01009880 g     F .text	00000028 XTime_GetTime
01010550 g     F .text	00000056 wcrtomb
01000d88 g     F .text	0000004c acq_free_all_alloc
010011d8 g     F .text	000001b0 acq_start
01009664 g     F .text	00000020 Xil_GetExceptionRegisterHandler
010031c0 g     F .text	00000018 d_xilinx_assert
01013298 g     F .text	00000080 frexp
010067dc g     F .text	000000ac XGpioPs_IntrEnable
0100a158 g     F .text	00000160 .hidden __addsf3
01006ba8 g     F .text	000000e8 XGpioPs_IntrGetEnabledPin
01060000 g       .mmu_tbl	00000000 __mmu_tbl_end
01058b88 g     O .data	0000016c __global_locale
01006aec g     F .text	000000bc XGpioPs_IntrGetEnabled
01008d44 g     F .text	00000024 Xil_DCacheEnable
010035f0 g     F .text	000004d0 hal_init
01060010 g       .ARM.attributes	00000000 __ARM.attributes_start
010103e8 g     F .text	0000001a vfprintf
010088f4 g     F .text	00000048 Xil_L1DCacheInvalidateRange
01015650 g     F .text	00000042 fputwc
01015984  w    F .text	00000008 _close
0100b0c8 g     F .text	00000010 free
01011b9c g     F .text	00000002 __sinit_lock_acquire
010125e0 g     F .text	00000090 __multadd
010125cc g     F .text	00000012 _Bfree
010122bc g     F .text	00000010 _getenv_r



Disassembly of section .text:

01000000 <_vector_table>:

.globl _vector_table

.section .vectors
_vector_table:
	B	_boot
 1000000:	ea000049 	b	100012c <_boot>
	B	Undefined
 1000004:	ea000025 	b	10000a0 <Undefined>
	B	SVCHandler
 1000008:	ea00002b 	b	10000bc <SVCHandler>
	B	PrefetchAbortHandler
 100000c:	ea00003b 	b	1000100 <PrefetchAbortHandler>
	B	DataAbortHandler
 1000010:	ea000032 	b	10000e0 <DataAbortHandler>
	NOP	/* Placeholder for address exception vector*/
 1000014:	e320f000 	nop	{0}
	B	IRQHandler
 1000018:	ea000000 	b	1000020 <IRQHandler>
	B	FIQHandler
 100001c:	ea00000f 	b	1000060 <FIQHandler>

01000020 <IRQHandler>:


IRQHandler:					/* IRQ vector handler */

	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code*/
 1000020:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000024:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000028:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100002c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000030:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000034:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000038:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	ldr	r2, =prof_pc
	subs	r3, lr, #0
	str	r3, [r2]
#endif

	bl	IRQInterrupt			/* IRQ vector */
 100003c:	eb0025c0 	bl	1009744 <IRQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000040:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000044:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000048:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100004c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000050:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000054:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000058:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}


	subs	pc, lr, #4			/* adjust return */
 100005c:	e25ef004 	subs	pc, lr, #4

01000060 <FIQHandler>:


FIQHandler:					/* FIQ vector handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000060:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000064:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000068:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100006c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000070:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000074:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000078:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)

0100007c <FIQLoop>:
#endif

FIQLoop:
	bl	FIQInterrupt			/* FIQ vector */
 100007c:	eb0025ab 	bl	1009730 <FIQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000080:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000084:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000088:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100008c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000090:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000094:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000098:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	subs	pc, lr, #4			/* adjust return */
 100009c:	e25ef004 	subs	pc, lr, #4

010000a0 <Undefined>:


Undefined:					/* Undefined handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000a0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =UndefinedExceptionAddr
 10000a4:	e59f0074 	ldr	r0, [pc, #116]	; 1000120 <PrefetchAbortHandler+0x20>
	sub     r1, lr, #4
 10000a8:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Store address of instruction causing undefined exception */
 10000ac:	e5801000 	str	r1, [r0]

	bl	UndefinedException		/* UndefinedException: call C function here */
 10000b0:	eb0025a8 	bl	1009758 <UndefinedException>
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000b4:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	movs	pc, lr
 10000b8:	e1b0f00e 	movs	pc, lr

010000bc <SVCHandler>:

SVCHandler:					/* SWI handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000bc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	tst	r0, #0x20			/* check the T bit */
 10000c0:	e3100020 	tst	r0, #32
	ldrneh	r0, [lr,#-2]			/* Thumb mode */
 10000c4:	115e00b2 	ldrhne	r0, [lr, #-2]
	bicne	r0, r0, #0xff00			/* Thumb mode */
 10000c8:	13c00cff 	bicne	r0, r0, #65280	; 0xff00
	ldreq	r0, [lr,#-4]			/* ARM mode */
 10000cc:	051e0004 	ldreq	r0, [lr, #-4]
	biceq	r0, r0, #0xff000000		/* ARM mode */
 10000d0:	03c004ff 	biceq	r0, r0, #-16777216	; 0xff000000

	bl	SWInterrupt			/* SWInterrupt: call C function here */
 10000d4:	eb0025a4 	bl	100976c <SWInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000d8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	movs	pc, lr		/*return to the next instruction after the SWI instruction */
 10000dc:	e1b0f00e 	movs	pc, lr

010000e0 <DataAbortHandler>:


DataAbortHandler:				/* Data Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 10000e0:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000e4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =DataAbortAddr
 10000e8:	e59f0034 	ldr	r0, [pc, #52]	; 1000124 <PrefetchAbortHandler+0x24>
	sub     r1, lr, #8
 10000ec:	e24e1008 	sub	r1, lr, #8
	str     r1, [r0]            		/* Stores instruction causing data abort */
 10000f0:	e5801000 	str	r1, [r0]

	bl	DataAbortInterrupt		/*DataAbortInterrupt :call C function here */
 10000f4:	eb0025a1 	bl	1009780 <DataAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000f8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #8			/* points to the instruction that caused the Data Abort exception */
 10000fc:	e25ef008 	subs	pc, lr, #8

01000100 <PrefetchAbortHandler>:

PrefetchAbortHandler:				/* Prefetch Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 1000100:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000104:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =PrefetchAbortAddr
 1000108:	e59f0018 	ldr	r0, [pc, #24]	; 1000128 <PrefetchAbortHandler+0x28>
	sub     r1, lr, #4
 100010c:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Stores instruction causing prefetch abort */
 1000110:	e5801000 	str	r1, [r0]

	bl	PrefetchAbortInterrupt		/* PrefetchAbortInterrupt: call C function here */
 1000114:	eb00259e 	bl	1009794 <PrefetchAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000118:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* points to the instruction that caused the Prefetch Abort exception */
 100011c:	e25ef004 	subs	pc, lr, #4
	ldr     r0, =UndefinedExceptionAddr
 1000120:	010aa484 	.word	0x010aa484
	ldr     r0, =DataAbortAddr
 1000124:	010aa48c 	.word	0x010aa48c
	ldr     r0, =PrefetchAbortAddr
 1000128:	010aa488 	.word	0x010aa488

0100012c <_boot>:
_prestart:
_boot:

#if XPAR_CPU_ID==0
        /* only allow cpu0 through */
	mrc	p15,0,r1,c0,c0,5
 100012c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
	and	r1, r1, #0xf
 1000130:	e201100f 	and	r1, r1, #15
        cmp	r1, #0
 1000134:	e3510000 	cmp	r1, #0
	beq	CheckEFUSE
 1000138:	0a000001 	beq	1000144 <CheckEFUSE>

0100013c <EndlessLoop0>:
	EndlessLoop0:
		wfe
 100013c:	e320f002 	wfe
	b	EndlessLoop0
 1000140:	eafffffd 	b	100013c <EndlessLoop0>

01000144 <CheckEFUSE>:

CheckEFUSE:
        ldr r0,=EFUSEStaus
 1000144:	e59f030c 	ldr	r0, [pc, #780]	; 1000458 <finished+0x14>
        ldr r1,[r0]                             /* Read eFuse setting */
 1000148:	e5901000 	ldr	r1, [r0]
        ands r1,r1,#0x80                        /* Check whether device is having single core */
 100014c:	e2111080 	ands	r1, r1, #128	; 0x80
	beq OKToRun
 1000150:	0a000009 	beq	100017c <OKToRun>

 /* single core device, reset cpu1 */
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 1000154:	e59f0300 	ldr	r0, [pc, #768]	; 100045c <finished+0x18>
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000158:	e59f1300 	ldr	r1, [pc, #768]	; 1000460 <finished+0x1c>
        str     r1, [r0]                        /* Unlock SLCR */
 100015c:	e5801000 	str	r1, [r0]

	ldr r0,=SLCRCPURSTReg
 1000160:	e59f02fc 	ldr	r0, [pc, #764]	; 1000464 <finished+0x20>
	ldr r1,[r0]                             /* Read CPU Software Reset Control register */
 1000164:	e5901000 	ldr	r1, [r0]
	orr r1,r1,#0x22
 1000168:	e3811022 	orr	r1, r1, #34	; 0x22
        str r1,[r0]                             /* Reset CPU1 */
 100016c:	e5801000 	str	r1, [r0]

        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000170:	e59f02f0 	ldr	r0, [pc, #752]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 1000174:	e59f12f0 	ldr	r1, [pc, #752]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000178:	e5801000 	str	r1, [r0]

0100017c <OKToRun>:
	        wfe
	b	EndlessLoop1
#endif

OKToRun:
	mrc     p15, 0, r0, c0, c0, 0		/* Get the revision */
 100017c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and     r5, r0, #0x00f00000
 1000180:	e200560f 	and	r5, r0, #15728640	; 0xf00000
	and     r6, r0, #0x0000000f
 1000184:	e200600f 	and	r6, r0, #15
	orr     r6, r6, r5, lsr #20-4
 1000188:	e1866825 	orr	r6, r6, r5, lsr #16

#ifdef CONFIG_ARM_ERRATA_742230
        cmp     r6, #0x22                       /* only present up to r2p2 */
 100018c:	e3560022 	cmp	r6, #34	; 0x22
        mrcle   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 1000190:	de1faf30 	mrcle	15, 0, sl, cr15, cr0, {1}
        orrle   r10, r10, #1 << 4               /* set bit #4 */
 1000194:	d38aa010 	orrle	sl, sl, #16
        mcrle   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 1000198:	de0faf30 	mcrle	15, 0, sl, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	teq     r5, #0x00200000                 /* only present in r2p* */
 100019c:	e3350602 	teq	r5, #2097152	; 0x200000
	mrceq   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 10001a0:	0e1faf30 	mrceq	15, 0, sl, cr15, cr0, {1}
	orreq   r10, r10, #1 << 6               /* set bit #6 */
 10001a4:	038aa040 	orreq	sl, sl, #64	; 0x40
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 10001a8:	0e0faf30 	mcreq	15, 0, sl, cr15, cr0, {1}
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
 10001ac:	e59f02bc 	ldr	r0, [pc, #700]	; 1000470 <finished+0x2c>
	mcr	p15, 0, r0, c12, c0, 0
 10001b0:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
 10001b4:	e59f72b8 	ldr	r7, [pc, #696]	; 1000474 <finished+0x30>
	ldr	r6, =0xffff
 10001b8:	e59f62b8 	ldr	r6, [pc, #696]	; 1000478 <finished+0x34>
	str	r6, [r7]
 10001bc:	e5876000 	str	r6, [r7]

	/* Invalidate caches and TLBs */
	mov	r0,#0				/* r0 = 0  */
 10001c0:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */
 10001c4:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */
 10001c8:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */
 10001cc:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	bl	invalidate_dcache		/* invalidate dcache */
 10001d0:	eb00007c 	bl	10003c8 <invalidate_dcache>

	/* Disable MMU, if enabled */
	mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */
 10001d4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x1			/* clear bit 0 */
 10001d8:	e3c00001 	bic	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 0		/* write value back */
 10001dc:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	add	r2, r2, #0x100000		/* next section */
	subs	r3, r3, #1
	bge	shareable_loop			/* loop till 1G is covered */
#endif

	mrs	r0, cpsr			/* get the current PSR */
 10001e0:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the irq stack pointer */
 10001e4:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 10001e8:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
 10001ec:	e3822012 	orr	r2, r2, #18
	msr	cpsr, r2
 10001f0:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 10001f4:	e59fd280 	ldr	sp, [pc, #640]	; 100047c <finished+0x38>
	bic r2, r2, #(0x1 << 9)    		 /* Set EE bit to little-endian */
 10001f8:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 10001fc:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000200:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
 1000204:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000208:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
 100020c:	e3822013 	orr	r2, r2, #19
	msr	cpsr, r2
 1000210:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000214:	e59fd264 	ldr	sp, [pc, #612]	; 1000480 <finished+0x3c>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000218:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100021c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000220:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
 1000224:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000228:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
 100022c:	e3822017 	orr	r2, r2, #23
	msr	cpsr, r2
 1000230:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000234:	e59fd248 	ldr	sp, [pc, #584]	; 1000484 <finished+0x40>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000238:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100023c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000240:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
 1000244:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000248:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
 100024c:	e3822011 	orr	r2, r2, #17
	msr	cpsr, r2
 1000250:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000254:	e59fd22c 	ldr	sp, [pc, #556]	; 1000488 <finished+0x44>
	bic r2, r2, #(0x1 << 9)    		/* Set EE bit to little-endian */
 1000258:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100025c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000260:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
 1000264:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000268:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
 100026c:	e382201b 	orr	r2, r2, #27
	msr	cpsr, r2
 1000270:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 1000274:	e59fd210 	ldr	sp, [pc, #528]	; 100048c <finished+0x48>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000278:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100027c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000280:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the system stack pointer */
 1000284:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000288:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
 100028c:	e382201f 	orr	r2, r2, #31
	msr	cpsr, r2
 1000290:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000294:	e59fd1f4 	ldr	sp, [pc, #500]	; 1000490 <finished+0x4c>

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
 1000298:	e59f71f4 	ldr	r7, [pc, #500]	; 1000494 <finished+0x50>
	ldr	r0, [r7]
 100029c:	e5970000 	ldr	r0, [r7]
	orr	r0, r0, #0x1
 10002a0:	e3800001 	orr	r0, r0, #1
	str	r0, [r7]
 10002a4:	e5870000 	str	r0, [r7]

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
 10002a8:	e59f01e8 	ldr	r0, [pc, #488]	; 1000498 <finished+0x54>
	orr	r0, r0, #0x5B			/* Outer-cacheable, WB */
 10002ac:	e380005b 	orr	r0, r0, #91	; 0x5b
	mcr	15, 0, r0, c2, c0, 0		/* TTB0 */
 10002b0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}

	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
 10002b4:	e3e00000 	mvn	r0, #0
	mcr	p15,0,r0,c3,c0,0
 10002b8:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
 10002bc:	e59f01d8 	ldr	r0, [pc, #472]	; 100049c <finished+0x58>
	mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */
 10002c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	dsb					/* dsb	allow the MMU to start up */
 10002c4:	f57ff04f 	dsb	sy
	isb					/* isb	flush prefetch buffer */
 10002c8:	f57ff06f 	isb	sy

	/* Write to ACTLR */
	mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/
 10002cc:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x01 << 6)		/* set SMP bit */
 10002d0:	e3800040 	orr	r0, r0, #64	; 0x40
	orr	r0, r0, #(0x01 )		/* Cache/TLB maintenance broadcast */
 10002d4:	e3800001 	orr	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/
 10002d8:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

/* Invalidate L2 Cache and enable L2 Cache*/
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10002dc:	e59f01bc 	ldr	r0, [pc, #444]	; 10004a0 <finished+0x5c>
	mov	r1, #0				/* force the disable bit */
 10002e0:	e3a01000 	mov	r1, #0
	str	r1, [r0]			/* disable the L2 Caches */
 10002e4:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10002e8:	e59f01b4 	ldr	r0, [pc, #436]	; 10004a4 <finished+0x60>
	ldr	r1,[r0]				/* read the register */
 10002ec:	e5901000 	ldr	r1, [r0]
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10002f0:	e59f21b0 	ldr	r2, [pc, #432]	; 10004a8 <finished+0x64>
	orr	r1,r1,r2
 10002f4:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* store the Aux Control Register */
 10002f8:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10002fc:	e59f01a8 	ldr	r0, [pc, #424]	; 10004ac <finished+0x68>
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 1000300:	e59f11a8 	ldr	r1, [pc, #424]	; 10004b0 <finished+0x6c>
	str	r1, [r0]			/* store the TAG Latency register Register */
 1000304:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 1000308:	e59f01a4 	ldr	r0, [pc, #420]	; 10004b4 <finished+0x70>
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 100030c:	e59f11a4 	ldr	r1, [pc, #420]	; 10004b8 <finished+0x74>
	str	r1, [r0]			/* store the Data Latency register Register */
 1000310:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 1000314:	e59f01a0 	ldr	r0, [pc, #416]	; 10004bc <finished+0x78>
	ldr	r2, =0xFFFF
 1000318:	e59f2158 	ldr	r2, [pc, #344]	; 1000478 <finished+0x34>
	str	r2, [r0]			/* force invalidate */
 100031c:	e5802000 	str	r2, [r0]

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 1000320:	e59f0198 	ldr	r0, [pc, #408]	; 10004c0 <finished+0x7c>

01000324 <Sync>:
						/* Load L2CC base address base + sync register*/
	/* poll for completion */
Sync:	ldr	r1, [r0]
 1000324:	e5901000 	ldr	r1, [r0]
	cmp	r1, #0
 1000328:	e3510000 	cmp	r1, #0
	bne	Sync
 100032c:	1afffffc 	bne	1000324 <Sync>

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 1000330:	e59f018c 	ldr	r0, [pc, #396]	; 10004c4 <finished+0x80>
	ldr	r1,[r0]
 1000334:	e5901000 	ldr	r1, [r0]
	ldr	r0,=L2CCIntClear
 1000338:	e59f0188 	ldr	r0, [pc, #392]	; 10004c8 <finished+0x84>
	str	r1,[r0]
 100033c:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
 1000340:	e59f0114 	ldr	r0, [pc, #276]	; 100045c <finished+0x18>
	ldr	r1,=SLCRUnlockKey	    	/* set unlock key */
 1000344:	e59f1114 	ldr	r1, [pc, #276]	; 1000460 <finished+0x1c>
	str	r1, [r0]		    	/* Unlock SLCR */
 1000348:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 100034c:	e59f0178 	ldr	r0, [pc, #376]	; 10004cc <finished+0x88>
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 1000350:	e59f1178 	ldr	r1, [pc, #376]	; 10004d0 <finished+0x8c>
	str	r1, [r0]	        	/* store the L2c Ram Control Register */
 1000354:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000358:	e59f0108 	ldr	r0, [pc, #264]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100035c:	e59f1108 	ldr	r1, [pc, #264]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000360:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 1000364:	e59f0134 	ldr	r0, [pc, #308]	; 10004a0 <finished+0x5c>
	ldr	r1,[r0]				/* read the register */
 1000368:	e5901000 	ldr	r1, [r0]
	mov	r2, #L2CCControl		/* set the enable bit */
 100036c:	e3a02001 	mov	r2, #1
	orr	r1,r1,r2
 1000370:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* enable the L2 Caches */
 1000374:	e5801000 	str	r1, [r0]
#endif

	mov	r0, r0
 1000378:	e1a00000 	nop			; (mov r0, r0)
	mrc	p15, 0, r1, c1, c0, 2		/* read cp access control register (CACR) into r1 */
 100037c:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr	r1, r1, #(0xf << 20)		/* enable full access for p10 & p11 */
 1000380:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr	p15, 0, r1, c1, c0, 2		/* write back into CACR */
 1000384:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}

	/* enable vfp */
	fmrx	r1, FPEXC			/* read the exception register */
 1000388:	eef81a10 	vmrs	r1, fpexc
	orr	r1,r1, #FPEXC_EN		/* set VFP enable bit, leave the others in orig state */
 100038c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
	fmxr	FPEXC, r1			/* write back the exception register */
 1000390:	eee81a10 	vmsr	fpexc, r1

	mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */
 1000394:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #(0x01 << 11)		/* #0x8000 */
 1000398:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15,0,r0,c1,c0,0
 100039c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */
 10003a0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */
 10003a4:	e3800004 	orr	r0, r0, #4
	orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */
 10003a8:	e3800002 	orr	r0, r0, #2
	mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */
 10003ac:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

	mrs	r0, cpsr			/* get the current PSR */
 10003b0:	e10f0000 	mrs	r0, CPSR
	bic	r0, r0, #0x100			/* enable asynchronous abort exception */
 10003b4:	e3c00c01 	bic	r0, r0, #256	; 0x100
	msr	cpsr_xsf, r0
 10003b8:	e12ef000 	msr	CPSR_fsx, r0


	b	_start				/* jump to C startup code */
 10003bc:	ea0024fe 	b	10097bc <_start>
	and	r0, r0, r0			/* no op */
 10003c0:	e0000000 	and	r0, r0, r0

.Ldone:	b	.Ldone				/* Paranoia: we should never get here */
 10003c4:	eafffffe 	b	10003c4 <Sync+0xa0>

010003c8 <invalidate_dcache>:
 * the whole D-cache. Need to invalidate each line.
 *
 *************************************************************************
 */
invalidate_dcache:
	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */
 10003c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
	ands	r3, r0, #0x7000000
 10003cc:	e2103407 	ands	r3, r0, #117440512	; 0x7000000
	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */
 10003d0:	e1a03ba3 	lsr	r3, r3, #23
	beq	finished
 10003d4:	0a00001a 	beq	1000444 <finished>
	mov	r10, #0				/* start with level 0 */
 10003d8:	e3a0a000 	mov	sl, #0

010003dc <loop1>:
loop1:
	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */
 10003dc:	e08a20aa 	add	r2, sl, sl, lsr #1
	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */
 10003e0:	e1a01230 	lsr	r1, r0, r2
	and	r1, r1, #7			/* get those 3 bits alone */
 10003e4:	e2011007 	and	r1, r1, #7
	cmp	r1, #2
 10003e8:	e3510002 	cmp	r1, #2
	blt	skip				/* no cache or only instruction cache at this level */
 10003ec:	ba000011 	blt	1000438 <skip>
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
 10003f0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	isb					/* isb to sync the change to the CacheSizeID reg */
 10003f4:	f57ff06f 	isb	sy
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
 10003f8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
	and	r2, r1, #7			/* extract the line length field */
 10003fc:	e2012007 	and	r2, r1, #7
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
 1000400:	e2822004 	add	r2, r2, #4
	ldr	r4, =0x3ff
 1000404:	e59f40c8 	ldr	r4, [pc, #200]	; 10004d4 <finished+0x90>
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
 1000408:	e01441a1 	ands	r4, r4, r1, lsr #3
	clz	r5, r4				/* r5 is the bit position of the way size increment */
 100040c:	e16f5f14 	clz	r5, r4
	ldr	r7, =0x7fff
 1000410:	e59f70c0 	ldr	r7, [pc, #192]	; 10004d8 <finished+0x94>
	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */
 1000414:	e01776a1 	ands	r7, r7, r1, lsr #13

01000418 <loop2>:
loop2:
	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */
 1000418:	e1a09004 	mov	r9, r4

0100041c <loop3>:
loop3:
	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */
 100041c:	e18ab519 	orr	fp, sl, r9, lsl r5
	orr	r11, r11, r7, lsl r2		/* factor in the index number */
 1000420:	e18bb217 	orr	fp, fp, r7, lsl r2
	mcr	p15, 0, r11, c7, c6, 2		/* invalidate by set/way */
 1000424:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
	subs	r9, r9, #1			/* decrement the way number */
 1000428:	e2599001 	subs	r9, r9, #1
	bge	loop3
 100042c:	aafffffa 	bge	100041c <loop3>
	subs	r7, r7, #1			/* decrement the index */
 1000430:	e2577001 	subs	r7, r7, #1
	bge	loop2
 1000434:	aafffff7 	bge	1000418 <loop2>

01000438 <skip>:
skip:
	add	r10, r10, #2			/* increment the cache number */
 1000438:	e28aa002 	add	sl, sl, #2
	cmp	r3, r10
 100043c:	e153000a 	cmp	r3, sl
	bgt	loop1
 1000440:	caffffe5 	bgt	10003dc <loop1>

01000444 <finished>:

finished:
	mov	r10, #0				/* switch back to cache level 0 */
 1000444:	e3a0a000 	mov	sl, #0
	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */
 1000448:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	dsb
 100044c:	f57ff04f 	dsb	sy
	isb
 1000450:	f57ff06f 	isb	sy

	bx	lr
 1000454:	e12fff1e 	bx	lr
        ldr r0,=EFUSEStaus
 1000458:	f800d010 	.word	0xf800d010
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 100045c:	f8000008 	.word	0xf8000008
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000460:	0000df0d 	.word	0x0000df0d
	ldr r0,=SLCRCPURSTReg
 1000464:	f8000244 	.word	0xf8000244
        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000468:	f8000004 	.word	0xf8000004
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100046c:	0000767b 	.word	0x0000767b
	ldr	r0, =vector_base
 1000470:	01000000 	.word	0x01000000
	ldr	r7, =0xf8f0000c
 1000474:	f8f0000c 	.word	0xf8f0000c
	ldr	r6, =0xffff
 1000478:	0000ffff 	.word	0x0000ffff
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 100047c:	00010400 	.word	0x00010400
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000480:	00010c00 	.word	0x00010c00
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000484:	00011000 	.word	0x00011000
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000488:	00011400 	.word	0x00011400
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 100048c:	00011800 	.word	0x00011800
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000490:	00010000 	.word	0x00010000
	ldr	r7, =0xf8f00000
 1000494:	f8f00000 	.word	0xf8f00000
	ldr	r0,=TblBase			/* Load MMU translation table base */
 1000498:	0105c000 	.word	0x0105c000
	ldr	r0,=CRValMmuCac
 100049c:	00001005 	.word	0x00001005
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10004a0:	f8f02100 	.word	0xf8f02100
	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10004a4:	f8f02104 	.word	0xf8f02104
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10004a8:	72360000 	.word	0x72360000
	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10004ac:	f8f02108 	.word	0xf8f02108
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 10004b0:	00000111 	.word	0x00000111
	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 10004b4:	f8f0210c 	.word	0xf8f0210c
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 10004b8:	00000121 	.word	0x00000121
	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 10004bc:	f8f0277c 	.word	0xf8f0277c
	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 10004c0:	f8f02730 	.word	0xf8f02730
	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 10004c4:	f8f0221c 	.word	0xf8f0221c
	ldr	r0,=L2CCIntClear
 10004c8:	f8f02220 	.word	0xf8f02220
	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 10004cc:	f8000a1c 	.word	0xf8000a1c
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 10004d0:	00020202 	.word	0x00020202
	ldr	r4, =0x3ff
 10004d4:	000003ff 	.word	0x000003ff
	ldr	r7, =0x7fff
 10004d8:	00007fff 	.word	0x00007fff

010004dc <deregister_tm_clones>:
 10004dc:	f249 1028 	movw	r0, #37160	; 0x9128
 10004e0:	f2c0 1005 	movt	r0, #261	; 0x105
 10004e4:	f249 1328 	movw	r3, #37160	; 0x9128
 10004e8:	f2c0 1305 	movt	r3, #261	; 0x105
 10004ec:	4283      	cmp	r3, r0
 10004ee:	d005      	beq.n	10004fc <deregister_tm_clones+0x20>
 10004f0:	f240 0300 	movw	r3, #0
 10004f4:	f2c0 0300 	movt	r3, #0
 10004f8:	b103      	cbz	r3, 10004fc <deregister_tm_clones+0x20>
 10004fa:	4718      	bx	r3
 10004fc:	4770      	bx	lr
 10004fe:	bf00      	nop

01000500 <register_tm_clones>:
 1000500:	f249 1028 	movw	r0, #37160	; 0x9128
 1000504:	f2c0 1005 	movt	r0, #261	; 0x105
 1000508:	f249 1128 	movw	r1, #37160	; 0x9128
 100050c:	f2c0 1105 	movt	r1, #261	; 0x105
 1000510:	1a09      	subs	r1, r1, r0
 1000512:	1089      	asrs	r1, r1, #2
 1000514:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 1000518:	1049      	asrs	r1, r1, #1
 100051a:	d005      	beq.n	1000528 <register_tm_clones+0x28>
 100051c:	f240 0300 	movw	r3, #0
 1000520:	f2c0 0300 	movt	r3, #0
 1000524:	b103      	cbz	r3, 1000528 <register_tm_clones+0x28>
 1000526:	4718      	bx	r3
 1000528:	4770      	bx	lr
 100052a:	bf00      	nop

0100052c <__do_global_dtors_aux>:
 100052c:	b510      	push	{r4, lr}
 100052e:	f240 0420 	movw	r4, #32
 1000532:	f2c0 1406 	movt	r4, #262	; 0x106
 1000536:	7823      	ldrb	r3, [r4, #0]
 1000538:	b973      	cbnz	r3, 1000558 <__do_global_dtors_aux+0x2c>
 100053a:	f7ff ffcf 	bl	10004dc <deregister_tm_clones>
 100053e:	f240 0300 	movw	r3, #0
 1000542:	f2c0 0300 	movt	r3, #0
 1000546:	b12b      	cbz	r3, 1000554 <__do_global_dtors_aux+0x28>
 1000548:	f249 1028 	movw	r0, #37160	; 0x9128
 100054c:	f2c0 1005 	movt	r0, #261	; 0x105
 1000550:	f3af 8000 	nop.w
 1000554:	2301      	movs	r3, #1
 1000556:	7023      	strb	r3, [r4, #0]
 1000558:	bd10      	pop	{r4, pc}
 100055a:	bf00      	nop

0100055c <frame_dummy>:
 100055c:	b508      	push	{r3, lr}
 100055e:	f240 0300 	movw	r3, #0
 1000562:	f2c0 0300 	movt	r3, #0
 1000566:	b14b      	cbz	r3, 100057c <frame_dummy+0x20>
 1000568:	f240 0124 	movw	r1, #36	; 0x24
 100056c:	f249 1028 	movw	r0, #37160	; 0x9128
 1000570:	f2c0 1106 	movt	r1, #262	; 0x106
 1000574:	f2c0 1005 	movt	r0, #261	; 0x105
 1000578:	f3af 8000 	nop.w
 100057c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1000580:	e7be      	b.n	1000500 <register_tm_clones>
 1000582:	bf00      	nop

01000584 <acq_hacks_init>:
 */
uint8_t buffer[262144] __attribute__((aligned(8)));

void acq_hacks_init()
{
}
 1000584:	e12fff1e 	bx	lr

01000588 <acq_hacks_run>:

void acq_hacks_run()
{
 1000588:	e92d40f0 	push	{r4, r5, r6, r7, lr}

		bytes = 0;
		microsec = 0;

		for(i = 0; i < n_waves; i++) {
			Xil_DCacheInvalidateRange(buffer, sizeof(buffer));
 100058c:	e3005330 	movw	r5, #816	; 0x330
{
 1000590:	ed2d8b04 	vpush	{d8-d9}
 1000594:	e24dd00c 	sub	sp, sp, #12
			Xil_DCacheInvalidateRange(buffer, sizeof(buffer));
 1000598:	e3405106 	movt	r5, #262	; 0x106
		d_printf(D_ERROR, "starting to free acq...");
 100059c:	e3057ea8 	movw	r7, #24232	; 0x5ea8
	csi_hack_init();
 10005a0:	eb000de2 	bl	1003d30 <csi_hack_init>
	memset(buffer, 0, 32);
 10005a4:	e3000330 	movw	r0, #816	; 0x330
 10005a8:	e3a0201e 	mov	r2, #30
 10005ac:	e3a01000 	mov	r1, #0
 10005b0:	e3400106 	movt	r0, #262	; 0x106
 10005b4:	fa002ec9 	blx	100c0e0 <memset>
	for(i = 0; i < (sizeof(buffer) - 32); i++) {
 10005b8:	e30f2fe0 	movw	r2, #65504	; 0xffe0
 10005bc:	e30519c8 	movw	r1, #22984	; 0x59c8
 10005c0:	e3402003 	movt	r2, #3
 10005c4:	e3401101 	movt	r1, #257	; 0x101
 10005c8:	e59f0190 	ldr	r0, [pc, #400]	; 1000760 <acq_hacks_run+0x1d8>
 10005cc:	e2856701 	add	r6, r5, #262144	; 0x40000
 10005d0:	eb002d4a 	bl	100bb00 <memcpy>
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, 450);
 10005d4:	ed9f0a5e 	vldr	s0, [pc, #376]	; 1000754 <acq_hacks_run+0x1cc>
		d_printf(D_ERROR, "starting to free acq...");
 10005d8:	e3407105 	movt	r7, #261	; 0x105
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, 450);
 10005dc:	e59f0180 	ldr	r0, [pc, #384]	; 1000764 <acq_hacks_run+0x1dc>
			}

			csi_hack_stop_frame();

			d_stop_timing(2);
			microsec += d_read_timing_us(2);
 10005e0:	ed9f9a5c 	vldr	s18, [pc, #368]	; 1000758 <acq_hacks_run+0x1d0>
		}


		d_printf(D_INFO, "Done sending %d waves (%d KB) -- took %.4f microseconds", n_waves, bytes / 1024, microsec);
		d_printf(D_INFO, "Transfer rate: %.4f MB/s", bytes / microsec);
 10005e4:	eddf8a5c 	vldr	s17, [pc, #368]	; 100075c <acq_hacks_run+0x1d4>
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, 450);
 10005e8:	eb000861 	bl	1002774 <clkwiz_change_mipi_freq>
		d_printf(D_ERROR, "starting to free acq...");
 10005ec:	e1a01007 	mov	r1, r7
 10005f0:	e3a00004 	mov	r0, #4
 10005f4:	eb000b87 	bl	1003418 <d_printf>
		acq_free_all_alloc();
 10005f8:	eb0001e2 	bl	1000d88 <acq_free_all_alloc>
		d_printf(D_ERROR, "starting to prepare acq...");
 10005fc:	e3051ec0 	movw	r1, #24256	; 0x5ec0
 1000600:	e3a00004 	mov	r0, #4
 1000604:	e3401105 	movt	r1, #261	; 0x105
 1000608:	eb000b82 	bl	1003418 <d_printf>
		res = acq_prepare_triggered(ACQ_MODE_8BIT | ACQ_MODE_1CH, 0, 32768, n_waves);
 100060c:	e3a03001 	mov	r3, #1
 1000610:	e3a02902 	mov	r2, #32768	; 0x8000
 1000614:	e3a01000 	mov	r1, #0
 1000618:	e3a00021 	mov	r0, #33	; 0x21
 100061c:	eb0001ec 	bl	1000dd4 <acq_prepare_triggered>
		if(res != ACQRES_OK) {
 1000620:	e3500000 	cmp	r0, #0
 1000624:	1a00003c 	bne	100071c <acq_hacks_run+0x194>
		d_printf(D_INFO, "starting acquisition...");
 1000628:	e3051efc 	movw	r1, #24316	; 0x5efc
 100062c:	e3a00002 	mov	r0, #2
 1000630:	e3401105 	movt	r1, #261	; 0x105
 1000634:	eb000b77 	bl	1003418 <d_printf>
		res = acq_start();
 1000638:	eb0002e6 	bl	10011d8 <acq_start>
		if(res != ACQRES_OK) {
 100063c:	e3500000 	cmp	r0, #0
 1000640:	1a00003c 	bne	1000738 <acq_hacks_run+0x1b0>
		d_printf(D_INFO, "waiting for acq...");
 1000644:	e3051f28 	movw	r1, #24360	; 0x5f28
 1000648:	e3a00002 	mov	r0, #2
 100064c:	e3401105 	movt	r1, #261	; 0x105
 1000650:	eb000b70 	bl	1003418 <d_printf>
		while(!acq_is_done()) ;
 1000654:	eb00052d 	bl	1001b10 <acq_is_done>
 1000658:	e3500000 	cmp	r0, #0
 100065c:	0afffffc 	beq	1000654 <acq_hacks_run+0xcc>
			Xil_DCacheInvalidateRange(buffer, sizeof(buffer));
 1000660:	e3000330 	movw	r0, #816	; 0x330
 1000664:	e3a01701 	mov	r1, #262144	; 0x40000
 1000668:	e3400106 	movt	r0, #262	; 0x106
 100066c:	eb001fd1 	bl	10085b8 <Xil_DCacheInvalidateRange>
			dsb();
 1000670:	f57ff04f 	dsb	sy
			acq_copy_slow_mipi(i, (uint8_t*)buffer);
 1000674:	e3001330 	movw	r1, #816	; 0x330
 1000678:	e3a00000 	mov	r0, #0
 100067c:	e3401106 	movt	r1, #262	; 0x106
 1000680:	e3004330 	movw	r4, #816	; 0x330
 1000684:	eb000791 	bl	10024d0 <acq_copy_slow_mipi>
			d_start_timing(2);
 1000688:	e3a00002 	mov	r0, #2
 100068c:	e3404106 	movt	r4, #262	; 0x106
 1000690:	eb000d1f 	bl	1003b14 <d_start_timing>
			csi_hack_start_frame(15);
 1000694:	e3a0000f 	mov	r0, #15
 1000698:	eb000dfa 	bl	1003e88 <csi_hack_start_frame>
				Xil_DCacheFlushRange(buffer, sizeof(buffer));
 100069c:	e3a01701 	mov	r1, #262144	; 0x40000
 10006a0:	e1a00005 	mov	r0, r5
 10006a4:	eb002010 	bl	10086ec <Xil_DCacheFlushRange>
				dsb();
 10006a8:	f57ff04f 	dsb	sy
				csi_hack_send_line_data(buffer + (j * 32768), 32768);
 10006ac:	e3a01902 	mov	r1, #32768	; 0x8000
 10006b0:	e1a00004 	mov	r0, r4
 10006b4:	e0844001 	add	r4, r4, r1
 10006b8:	eb000e2f 	bl	1003f7c <csi_hack_send_line_data>
			for(j = 0; j < 8; j++) {
 10006bc:	e1540006 	cmp	r4, r6
 10006c0:	1afffff5 	bne	100069c <acq_hacks_run+0x114>
			csi_hack_stop_frame();
 10006c4:	eb000e15 	bl	1003f20 <csi_hack_stop_frame>
			d_stop_timing(2);
 10006c8:	e3a00002 	mov	r0, #2
 10006cc:	eb000d2c 	bl	1003b84 <d_stop_timing>
			microsec += d_read_timing_us(2);
 10006d0:	e3a00002 	mov	r0, #2
 10006d4:	eb000d53 	bl	1003c28 <d_read_timing_us>
 10006d8:	ee308a09 	vadd.f32	s16, s0, s18
		d_printf(D_INFO, "Done sending %d waves (%d KB) -- took %.4f microseconds", n_waves, bytes / 1024, microsec);
 10006dc:	e3051f3c 	movw	r1, #24380	; 0x5f3c
 10006e0:	e3401105 	movt	r1, #261	; 0x105
 10006e4:	e3a03c01 	mov	r3, #256	; 0x100
 10006e8:	e3a02001 	mov	r2, #1
 10006ec:	e3a00002 	mov	r0, #2
 10006f0:	eef70ac8 	vcvt.f64.f32	d16, s16
 10006f4:	edcd0b00 	vstr	d16, [sp]
 10006f8:	eb000b46 	bl	1003418 <d_printf>
		d_printf(D_INFO, "Transfer rate: %.4f MB/s", bytes / microsec);
 10006fc:	eec87a88 	vdiv.f32	s15, s17, s16
 1000700:	e3051f74 	movw	r1, #24436	; 0x5f74
 1000704:	e3401105 	movt	r1, #261	; 0x105
 1000708:	e3a00002 	mov	r0, #2
 100070c:	eef70ae7 	vcvt.f64.f32	d16, s15
 1000710:	ec532b30 	vmov	r2, r3, d16
 1000714:	eb000b3f 	bl	1003418 <d_printf>
		d_printf(D_ERROR, "starting to free acq...");
 1000718:	eaffffb3 	b	10005ec <acq_hacks_run+0x64>
			d_printf(D_ERROR, "acq_prepare_triggered error: %d", res);
 100071c:	e3051edc 	movw	r1, #24284	; 0x5edc
 1000720:	e1a02000 	mov	r2, r0
 1000724:	e3401105 	movt	r1, #261	; 0x105
 1000728:	e3a00004 	mov	r0, #4
 100072c:	eb000b39 	bl	1003418 <d_printf>
			exit(-1);
 1000730:	e3e00000 	mvn	r0, #0
 1000734:	fa00277d 	blx	100a530 <exit>
			d_printf(D_ERROR, "acq_start error: %d", res);
 1000738:	e3051f14 	movw	r1, #24340	; 0x5f14
 100073c:	e1a02000 	mov	r2, r0
 1000740:	e3401105 	movt	r1, #261	; 0x105
 1000744:	e3a00004 	mov	r0, #4
 1000748:	eb000b32 	bl	1003418 <d_printf>
			exit(-1);
 100074c:	e3e00000 	mvn	r0, #0
 1000750:	fa002776 	blx	100a530 <exit>
 1000754:	43e10000 	.word	0x43e10000
 1000758:	00000000 	.word	0x00000000
 100075c:	48800000 	.word	0x48800000
 1000760:	0106034e 	.word	0x0106034e
 1000764:	010a1c88 	.word	0x010a1c88

01000768 <_acq_irq_error_dma>:
/*
 * Handler for DMA error conditions in IRQs.
 */
void _acq_irq_error_dma()
{
	g_acq_state.stats.num_err_total++;
 1000768:	e30102d0 	movw	r0, #4816	; 0x12d0
{
 100076c:	e92d0030 	push	{r4, r5}
	g_acq_state.stats.num_err_total++;
 1000770:	e340010a 	movt	r0, #266	; 0x10a
	g_acq_state.state = ACQSTATE_UNINIT;
 1000774:	e3a04000 	mov	r4, #0
 1000778:	e3a05000 	mov	r5, #0
	g_acq_state.stats.num_err_total++;
 100077c:	e2802e7b 	add	r2, r0, #1968	; 0x7b0
 1000780:	e59037a8 	ldr	r3, [r0, #1960]	; 0x7a8
 1000784:	e59017ac 	ldr	r1, [r0, #1964]	; 0x7ac
	g_acq_state.state = ACQSTATE_UNINIT;
 1000788:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 100078c:	e2933001 	adds	r3, r3, #1
	g_acq_state.sub_state = ACQSUBST_NONE;
	XAxiDma_Reset(&g_acq_state.dma);
	return;
}
 1000790:	e8bd0030 	pop	{r4, r5}
	g_acq_state.stats.num_err_total++;
 1000794:	e2a11000 	adc	r1, r1, #0
 1000798:	e5023008 	str	r3, [r2, #-8]
 100079c:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 10007a0:	ea000e21 	b	100402c <XAxiDma_Reset>

010007a4 <_acq_reset_PL_fifo>:
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10007a4:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10007a8:	e3a02040 	mov	r2, #64	; 0x40

/*
 * Force a reset of the PL FIFO.  Internal function - do not call outside of acquire engine.
 */
void _acq_reset_PL_fifo()
{
 10007ac:	e92d4010 	push	{r4, lr}
 10007b0:	e34e3000 	movt	r3, #57344	; 0xe000
 10007b4:	e24dd008 	sub	sp, sp, #8
 10007b8:	e34f2fbf 	movt	r2, #65471	; 0xffbf
	 * drive the reset pulse for some cycles to ensure that the reset is received and the state
	 * machine is in the correct state
	 */
	emio_fast_write(ACQ_EMIO_FIFO_RESET, 1);

	for(i = 0; i < 20; i++) {
 10007bc:	e3a01000 	mov	r1, #0
 10007c0:	e5832010 	str	r2, [r3, #16]
 10007c4:	e58d1004 	str	r1, [sp, #4]
 10007c8:	e59d3004 	ldr	r3, [sp, #4]
 10007cc:	e3530013 	cmp	r3, #19
 10007d0:	ca000006 	bgt	10007f0 <_acq_reset_PL_fifo+0x4c>
		asm __volatile__("nop");
 10007d4:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 10007d8:	e59d3004 	ldr	r3, [sp, #4]
 10007dc:	e2833001 	add	r3, r3, #1
 10007e0:	e58d3004 	str	r3, [sp, #4]
 10007e4:	e59d3004 	ldr	r3, [sp, #4]
 10007e8:	e3530013 	cmp	r3, #19
 10007ec:	dafffff8 	ble	10007d4 <_acq_reset_PL_fifo+0x30>
	}

	emio_fast_write(ACQ_EMIO_FIFO_RESET, 0);

	// Test the FIFO full signal; wait for it to deassert before handing control back over
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 10007f0:	e59f402c 	ldr	r4, [pc, #44]	; 1000824 <_acq_reset_PL_fifo+0x80>
 10007f4:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10007f8:	e3a02000 	mov	r2, #0
 10007fc:	e34e3000 	movt	r3, #57344	; 0xe000
 1000800:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 1000804:	e5832010 	str	r2, [r3, #16]
 1000808:	e3a01042 	mov	r1, #66	; 0x42
 100080c:	e1a00004 	mov	r0, r4
 1000810:	eb00166b 	bl	10061c4 <XGpioPs_ReadPin>
 1000814:	e3500000 	cmp	r0, #0
 1000818:	1afffffa 	bne	1000808 <_acq_reset_PL_fifo+0x64>
}
 100081c:	e28dd008 	add	sp, sp, #8
 1000820:	e8bd8010 	pop	{r4, pc}
 1000824:	010a1b4c 	.word	0x010a1b4c

01000828 <_acq_reset_trigger>:
 1000828:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100082c:	e3a02c01 	mov	r2, #256	; 0x100
 * Send a trigger reset signal to re-arm the trigger.  This only rearms the trigger on the
 * acquire engine.  It doesn't rearm any actual trigger sources; if those need rearming, you
 * need to send the required signals there, too!
 */
void _acq_reset_trigger()
{
 1000830:	e24dd008 	sub	sp, sp, #8
 1000834:	e34e3000 	movt	r3, #57344	; 0xe000
 1000838:	e34f2eff 	movt	r2, #65279	; 0xfeff
	 * drive the reset pulse for some cycles to ensure that the reset is received and the state
	 * machine is in the correct state
	 */
	emio_fast_write(ACQ_EMIO_TRIG_RESET, 1);

	for(i = 0; i < 10; i++) {
 100083c:	e3a01000 	mov	r1, #0
 1000840:	e5832010 	str	r2, [r3, #16]
 1000844:	e58d1004 	str	r1, [sp, #4]
 1000848:	e59d3004 	ldr	r3, [sp, #4]
 100084c:	e3530009 	cmp	r3, #9
 1000850:	ca000006 	bgt	1000870 <_acq_reset_trigger+0x48>
		asm __volatile__("nop");
 1000854:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 1000858:	e59d3004 	ldr	r3, [sp, #4]
 100085c:	e2833001 	add	r3, r3, #1
 1000860:	e58d3004 	str	r3, [sp, #4]
 1000864:	e59d3004 	ldr	r3, [sp, #4]
 1000868:	e3530009 	cmp	r3, #9
 100086c:	dafffff8 	ble	1000854 <_acq_reset_trigger+0x2c>
 1000870:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1000874:	e3a02000 	mov	r2, #0
 1000878:	e34e3000 	movt	r3, #57344	; 0xe000
 100087c:	e34f2eff 	movt	r2, #65279	; 0xfeff
 1000880:	e5832010 	str	r2, [r3, #16]
	}

	emio_fast_write(ACQ_EMIO_TRIG_RESET, 0);
}
 1000884:	e28dd008 	add	sp, sp, #8
 1000888:	e12fff1e 	bx	lr

0100088c <_acq_wait_for_ndone>:
	return *(volatile u32 *) Addr;
 100088c:	e3a02a0a 	mov	r2, #40960	; 0xa000
 1000890:	e34e2000 	movt	r2, #57344	; 0xe000
 1000894:	e5923068 	ldr	r3, [r2, #104]	; 0x68
/*
 * Blocks until the DONE signal is deasserted.
 */
void _acq_wait_for_ndone()
{
	while(emio_fast_read(ACQ_EMIO_DONE)) ;
 1000898:	e3130004 	tst	r3, #4
 100089c:	1afffffc 	bne	1000894 <_acq_wait_for_ndone+0x8>
 10008a0:	e12fff1e 	bx	lr

010008a4 <acq_init>:

/*
 * Initialise the acquisitions engine.  Sets up default values in the structs.
 */
void acq_init()
{
 10008a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int error;

	g_acq_state.state = ACQSTATE_UNINIT;
 10008a8:	e30152d0 	movw	r5, #4816	; 0x12d0
 10008ac:	e340510a 	movt	r5, #266	; 0x10a
 10008b0:	e3a02000 	mov	r2, #0
 10008b4:	e1a03005 	mov	r3, r5
	g_acq_state.state = ACQSTATE_UNINIT;
	g_acq_state.acq_first = NULL;
 10008b8:	e3a06000 	mov	r6, #0
 10008bc:	e3a07000 	mov	r7, #0
	g_acq_state.state = ACQSTATE_UNINIT;
 10008c0:	e4832850 	str	r2, [r3], #2128	; 0x850
	g_acq_state.last_debug_timer = 0;

	/*
	 * Setup the DMA engine.  Fail terribly if this can't be done.
	 */
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 10008c4:	e1a00002 	mov	r0, r2
	g_acq_state.acq_first = NULL;
 10008c8:	e1c360f0 	strd	r6, [r3]
	g_acq_state.last_debug_timer = 0;
 10008cc:	e2852e7f 	add	r2, r5, #2032	; 0x7f0
 10008d0:	e14260f8 	strd	r6, [r2, #-8]
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 10008d4:	eb00101b 	bl	1004948 <XAxiDma_LookupConfig>
 10008d8:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 10008dc:	e2850008 	add	r0, r5, #8
 10008e0:	e1a01003 	mov	r1, r3
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 10008e4:	e5853758 	str	r3, [r5, #1880]	; 0x758
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 10008e8:	eb000e27 	bl	100418c <XAxiDma_CfgInitialize>

	if(error != XST_SUCCESS) {
 10008ec:	e3500000 	cmp	r0, #0
 10008f0:	1a000098 	bne	1000b58 <acq_init+0x2b4>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
		exit(-1);
	}

	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 10008f4:	e5953758 	ldr	r3, [r5, #1880]	; 0x758
 10008f8:	e3051fcc 	movw	r1, #24524	; 0x5fcc
 10008fc:	e3a00002 	mov	r0, #2
 1000900:	e3401105 	movt	r1, #261	; 0x105

	XAxiDma_Reset(&g_acq_state.dma);
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 1000904:	e2854008 	add	r4, r5, #8
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 1000908:	e5932004 	ldr	r2, [r3, #4]
 100090c:	eb000ac1 	bl	1003418 <d_printf>
	XAxiDma_Reset(&g_acq_state.dma);
 1000910:	e1a00004 	mov	r0, r4
 1000914:	eb000dc4 	bl	100402c <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 1000918:	e1a00004 	mov	r0, r4
 100091c:	eb000e07 	bl	1004140 <XAxiDma_ResetIsDone>
 1000920:	e3500000 	cmp	r0, #0
 1000924:	0afffffb 	beq	1000918 <acq_init+0x74>

	d_printf(D_INFO, "acquire: DMA reset OK");
 1000928:	e3051ff0 	movw	r1, #24560	; 0x5ff0
 100092c:	e3a00002 	mov	r0, #2
 1000930:	e3401105 	movt	r1, #261	; 0x105
 1000934:	eb000ab7 	bl	1003418 <d_printf>

	/*
	 * Setup the SCUGIC interrupt controller.  Fail terribly if this can't be done.
	 */
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_DMA_IRQ_RX, ACQ_DMA_IRQ_RX_PRIORITY, ACQ_DMA_IRQ_RX_TRIGGER);
 1000938:	e3010b28 	movw	r0, #6952	; 0x1b28
 100093c:	e3a03003 	mov	r3, #3
 1000940:	e340010a 	movt	r0, #266	; 0x10a
 1000944:	e3a020a0 	mov	r2, #160	; 0xa0
 1000948:	e3a0103d 	mov	r1, #61	; 0x3d
 100094c:	eb001bea 	bl	10078fc <XScuGic_SetPriorityTriggerType>

	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_DMA_IRQ_RX, \
 1000950:	e3012388 	movw	r2, #5000	; 0x1388
 1000954:	e3010b28 	movw	r0, #6952	; 0x1b28
 1000958:	e3402100 	movt	r2, #256	; 0x100
 100095c:	e340010a 	movt	r0, #266	; 0x10a
 1000960:	e59f3228 	ldr	r3, [pc, #552]	; 1000b90 <acq_init+0x2ec>
 1000964:	e3a0103d 	mov	r1, #61	; 0x3d
 1000968:	eb001b42 	bl	1007678 <XScuGic_Connect>
				(Xil_InterruptHandler)_acq_irq_rx_handler, XAxiDma_GetRxRing(&g_acq_state.dma));

	if(error != XST_SUCCESS) {
 100096c:	e2504000 	subs	r4, r0, #0
 1000970:	1a00007f 	bne	1000b74 <acq_init+0x2d0>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
		exit(-1);
	}

	XScuGic_Enable(&g_hal.xscu_gic, ACQ_DMA_IRQ_RX);
 1000974:	e3010b28 	movw	r0, #6952	; 0x1b28
 1000978:	e3a0103d 	mov	r1, #61	; 0x3d
 100097c:	e340010a 	movt	r0, #266	; 0x10a
 1000980:	eb001c93 	bl	1007bd4 <XScuGic_Enable>

	d_printf(D_INFO, "acquire: SCUGIC configured");
 1000984:	e3061048 	movw	r1, #24648	; 0x6048
 1000988:	e3a00002 	mov	r0, #2
 100098c:	e3401105 	movt	r1, #261	; 0x105
 1000990:	eb000aa0 	bl	1003418 <d_printf>
	 *   - ACQ_EMIO_ADC_VALID:		Signal to PL, currently ignored, that will control write_en of FIFO, pausing data
	 *   							reception into FIFO until acquisition is ready (e.g. if ADC not yet initialised.)
	 *   - ACQ_EMIO_FIFO_OVERRUN:	Signal to PS to indicate that acquisition has overrun the FIFO and a FIFO reset is
	 *   							required.
	 */
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_RUN, 1);
 1000994:	e3a02001 	mov	r2, #1
 1000998:	e3a01036 	mov	r1, #54	; 0x36
 100099c:	e59f01f0 	ldr	r0, [pc, #496]	; 1000b94 <acq_init+0x2f0>
 10009a0:	eb001703 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_RUN, 1);
 10009a4:	e3a02001 	mov	r2, #1
 10009a8:	e3a01036 	mov	r1, #54	; 0x36
 10009ac:	e59f01e0 	ldr	r0, [pc, #480]	; 1000b94 <acq_init+0x2f0>
 10009b0:	eb00167c 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);
 10009b4:	e3a02001 	mov	r2, #1
 10009b8:	e3a01037 	mov	r1, #55	; 0x37
 10009bc:	e59f01d0 	ldr	r0, [pc, #464]	; 1000b94 <acq_init+0x2f0>
 10009c0:	eb0016fb 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);
 10009c4:	e3a02001 	mov	r2, #1
 10009c8:	e3a01037 	mov	r1, #55	; 0x37
 10009cc:	e59f01c0 	ldr	r0, [pc, #448]	; 1000b94 <acq_init+0x2f0>
 10009d0:	eb001674 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_MASK, 1);
 10009d4:	e3a02001 	mov	r2, #1
 10009d8:	e3a0103b 	mov	r1, #59	; 0x3b
 10009dc:	e59f01b0 	ldr	r0, [pc, #432]	; 1000b94 <acq_init+0x2f0>
 10009e0:	eb0016f3 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_MASK, 1);
 10009e4:	e3a02001 	mov	r2, #1
 10009e8:	e3a0103b 	mov	r1, #59	; 0x3b
 10009ec:	e59f01a0 	ldr	r0, [pc, #416]	; 1000b94 <acq_init+0x2f0>
 10009f0:	eb00166c 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_RESET, 1);
 10009f4:	e3a02001 	mov	r2, #1
 10009f8:	e3a0103c 	mov	r1, #60	; 0x3c
 10009fc:	e59f0190 	ldr	r0, [pc, #400]	; 1000b94 <acq_init+0x2f0>
 1000a00:	eb0016eb 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_RESET, 1);
 1000a04:	e3a02001 	mov	r2, #1
 1000a08:	e3a0103c 	mov	r1, #60	; 0x3c
 1000a0c:	e59f0180 	ldr	r0, [pc, #384]	; 1000b94 <acq_init+0x2f0>
 1000a10:	eb001664 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_RESET, 1);
 1000a14:	e3a02001 	mov	r2, #1
 1000a18:	e3a0103e 	mov	r1, #62	; 0x3e
 1000a1c:	e59f0170 	ldr	r0, [pc, #368]	; 1000b94 <acq_init+0x2f0>
 1000a20:	eb0016e3 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_RESET, 1);
 1000a24:	e3a02001 	mov	r2, #1
 1000a28:	e3a0103e 	mov	r1, #62	; 0x3e
 1000a2c:	e59f0160 	ldr	r0, [pc, #352]	; 1000b94 <acq_init+0x2f0>
 1000a30:	eb00165c 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_DEPTH_MUX, 1);
 1000a34:	e3a02001 	mov	r2, #1
 1000a38:	e3a0103f 	mov	r1, #63	; 0x3f
 1000a3c:	e59f0150 	ldr	r0, [pc, #336]	; 1000b94 <acq_init+0x2f0>
 1000a40:	eb0016db 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_DEPTH_MUX, 1);
 1000a44:	e3a02001 	mov	r2, #1
 1000a48:	e3a0103f 	mov	r1, #63	; 0x3f
 1000a4c:	e59f0140 	ldr	r0, [pc, #320]	; 1000b94 <acq_init+0x2f0>
 1000a50:	eb001654 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 1);
 1000a54:	e3a02001 	mov	r2, #1
 1000a58:	e3a01040 	mov	r1, #64	; 0x40
 1000a5c:	e59f0130 	ldr	r0, [pc, #304]	; 1000b94 <acq_init+0x2f0>
 1000a60:	eb0016d3 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 1);
 1000a64:	e3a02001 	mov	r2, #1
 1000a68:	e3a01040 	mov	r1, #64	; 0x40
 1000a6c:	e59f0120 	ldr	r0, [pc, #288]	; 1000b94 <acq_init+0x2f0>
 1000a70:	eb00164c 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, ACQ_EMIO_ADC_VALID, 1);
 1000a74:	e3a02001 	mov	r2, #1
 1000a78:	e3a01041 	mov	r1, #65	; 0x41
 1000a7c:	e59f0110 	ldr	r0, [pc, #272]	; 1000b94 <acq_init+0x2f0>
 1000a80:	eb0016cb 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_ADC_VALID, 1);
 1000a84:	e3a02001 	mov	r2, #1
 1000a88:	e3a01041 	mov	r1, #65	; 0x41
 1000a8c:	e59f0100 	ldr	r0, [pc, #256]	; 1000b94 <acq_init+0x2f0>
 1000a90:	eb001644 	bl	10063a8 <XGpioPs_SetDirectionPin>

	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_DONE, 0);
 1000a94:	e1a02004 	mov	r2, r4
 1000a98:	e3a01038 	mov	r1, #56	; 0x38
 1000a9c:	e59f00f0 	ldr	r0, [pc, #240]	; 1000b94 <acq_init+0x2f0>
 1000aa0:	eb001640 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_HAVE_TRIG, 0);
 1000aa4:	e1a02004 	mov	r2, r4
 1000aa8:	e3a0103d 	mov	r1, #61	; 0x3d
 1000aac:	e59f00e0 	ldr	r0, [pc, #224]	; 1000b94 <acq_init+0x2f0>
 1000ab0:	eb00163c 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN, 0);
 1000ab4:	e1a02004 	mov	r2, r4
 1000ab8:	e3a01042 	mov	r1, #66	; 0x42
 1000abc:	e59f00d0 	ldr	r0, [pc, #208]	; 1000b94 <acq_init+0x2f0>
 1000ac0:	eb001638 	bl	10063a8 <XGpioPs_SetDirectionPin>

	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_RUN, 0);
 1000ac4:	e1a02004 	mov	r2, r4
 1000ac8:	e3a01036 	mov	r1, #54	; 0x36
 1000acc:	e59f00c0 	ldr	r0, [pc, #192]	; 1000b94 <acq_init+0x2f0>
 1000ad0:	eb0015f4 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_DONE, 0);
 1000ad4:	e1a02004 	mov	r2, r4
 1000ad8:	e3a01038 	mov	r1, #56	; 0x38
 1000adc:	e59f00b0 	ldr	r0, [pc, #176]	; 1000b94 <acq_init+0x2f0>
 1000ae0:	eb0015f0 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_MASK, 1);
 1000ae4:	e3a02001 	mov	r2, #1
 1000ae8:	e3a0103b 	mov	r1, #59	; 0x3b
 1000aec:	e59f00a0 	ldr	r0, [pc, #160]	; 1000b94 <acq_init+0x2f0>
 1000af0:	eb0015ec 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_RESET, 0);
 1000af4:	e1a02004 	mov	r2, r4
 1000af8:	e3a0103c 	mov	r1, #60	; 0x3c
 1000afc:	e59f0090 	ldr	r0, [pc, #144]	; 1000b94 <acq_init+0x2f0>
 1000b00:	eb0015e8 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_TRIG_RESET, 0);
 1000b04:	e1a02004 	mov	r2, r4
 1000b08:	e3a0103e 	mov	r1, #62	; 0x3e
 1000b0c:	e59f0080 	ldr	r0, [pc, #128]	; 1000b94 <acq_init+0x2f0>
 1000b10:	eb0015e4 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_DEPTH_MUX, 0);
 1000b14:	e1a02004 	mov	r2, r4
 1000b18:	e3a0103f 	mov	r1, #63	; 0x3f
 1000b1c:	e59f0070 	ldr	r0, [pc, #112]	; 1000b94 <acq_init+0x2f0>
 1000b20:	eb0015e0 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);
 1000b24:	e1a02004 	mov	r2, r4
 1000b28:	e3a01040 	mov	r1, #64	; 0x40
 1000b2c:	e59f0060 	ldr	r0, [pc, #96]	; 1000b94 <acq_init+0x2f0>
 1000b30:	eb0015dc 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_ADC_VALID, 0);
 1000b34:	e1a02004 	mov	r2, r4
 1000b38:	e3a01041 	mov	r1, #65	; 0x41
 1000b3c:	e59f0050 	ldr	r0, [pc, #80]	; 1000b94 <acq_init+0x2f0>
 1000b40:	eb0015d8 	bl	10062a8 <XGpioPs_WritePin>

	d_printf(D_INFO, "acquire: engine initialised");
 1000b44:	e3061064 	movw	r1, #24676	; 0x6064
 1000b48:	e3a00002 	mov	r0, #2
 1000b4c:	e3401105 	movt	r1, #261	; 0x105
}
 1000b50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	d_printf(D_INFO, "acquire: engine initialised");
 1000b54:	ea000a2f 	b	1003418 <d_printf>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
 1000b58:	e3051f90 	movw	r1, #24464	; 0x5f90
 1000b5c:	e1a02000 	mov	r2, r0
 1000b60:	e3401105 	movt	r1, #261	; 0x105
 1000b64:	e3a00004 	mov	r0, #4
 1000b68:	eb000a2a 	bl	1003418 <d_printf>
		exit(-1);
 1000b6c:	e3e00000 	mvn	r0, #0
 1000b70:	fa00266e 	blx	100a530 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
 1000b74:	e3061008 	movw	r1, #24584	; 0x6008
 1000b78:	e3a00004 	mov	r0, #4
 1000b7c:	e1a02004 	mov	r2, r4
 1000b80:	e3401105 	movt	r1, #261	; 0x105
 1000b84:	eb000a23 	bl	1003418 <d_printf>
		exit(-1);
 1000b88:	e3e00000 	mvn	r0, #0
 1000b8c:	fa002667 	blx	100a530 <exit>
 1000b90:	010a1358 	.word	0x010a1358
 1000b94:	010a1b4c 	.word	0x010a1b4c

01000b98 <acq_get_next_alloc>:
 *
 * If this fails (e.g. no memory) ACQRES_MALLOC_FAIL is returned and values in `next`
 * are left unchanged; otherwise ACQRES_OK is returned.
 */
int acq_get_next_alloc(struct acq_buffer_t *next)
{
 1000b98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	} else {
		next->buff_acq = work;
	}
#endif

	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000b9c:	e30152d0 	movw	r5, #4816	; 0x12d0
 1000ba0:	e340510a 	movt	r5, #266	; 0x10a
{
 1000ba4:	e1a04000 	mov	r4, r0
	//d_printf(D_ERROR, "buf_sz: req:%d actual:%d (align_error: %d)", g_acq_state.total_buffsz, buf_sz, g_acq_state.total_buffsz % ACQ_BUFFER_ALIGN);

	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000ba8:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000bac:	e5956768 	ldr	r6, [r5, #1896]	; 0x768
 1000bb0:	e0866000 	add	r6, r6, r0
 1000bb4:	e3c6601f 	bic	r6, r6, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000bb8:	e1a01006 	mov	r1, r6
 1000bbc:	fa0028fb 	blx	100afb0 <memalign>

	if(work == NULL) {
 1000bc0:	e250e000 	subs	lr, r0, #0
 1000bc4:	0a000013 	beq	1000c18 <acq_get_next_alloc+0x80>
	next->buff_alloc = work;
	next->buff_acq = work;

	//d_printf(D_EXINFO, "acquire: next = 0x%08x, next->buff_acq = 0x%08x, work.buff_alloc [malloc] = 0x%08x", next, next->buff_acq, work);

	g_acq_state.stats.num_alloc_total++;
 1000bc8:	e59537c8 	ldr	r3, [r5, #1992]	; 0x7c8
	next->idx = 0;
 1000bcc:	e3a01000 	mov	r1, #0
	g_acq_state.stats.num_alloc_total++;
 1000bd0:	e595c7cc 	ldr	ip, [r5, #1996]	; 0x7cc

	return ACQRES_OK;
 1000bd4:	e1a00001 	mov	r0, r1
	next->pre_sz = g_acq_state.pre_buffsz;
 1000bd8:	e5956760 	ldr	r6, [r5, #1888]	; 0x760
	next->flags = ACQBUF_FLAG_ALLOC;
 1000bdc:	e3a07080 	mov	r7, #128	; 0x80
	g_acq_state.stats.num_alloc_total++;
 1000be0:	e2933001 	adds	r3, r3, #1
	next->idx = 0;
 1000be4:	e5841000 	str	r1, [r4]
	next->trigger_at = 0;
 1000be8:	e584100c 	str	r1, [r4, #12]
	g_acq_state.stats.num_alloc_total++;
 1000bec:	e0acc001 	adc	ip, ip, r1
	next->next = NULL;
 1000bf0:	e584101c 	str	r1, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 1000bf4:	e5951764 	ldr	r1, [r5, #1892]	; 0x764
	next->flags = ACQBUF_FLAG_ALLOC;
 1000bf8:	e1c471b0 	strh	r7, [r4, #16]
	next->pre_sz = g_acq_state.pre_buffsz;
 1000bfc:	e5846014 	str	r6, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 1000c00:	e5841018 	str	r1, [r4, #24]
	next->buff_alloc = work;
 1000c04:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 1000c08:	e584e008 	str	lr, [r4, #8]
	g_acq_state.stats.num_alloc_total++;
 1000c0c:	e58537c8 	str	r3, [r5, #1992]	; 0x7c8
 1000c10:	e585c7cc 	str	ip, [r5, #1996]	; 0x7cc
}
 1000c14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1000c18:	e3061080 	movw	r1, #24704	; 0x6080
 1000c1c:	e1a02006 	mov	r2, r6
 1000c20:	e3401105 	movt	r1, #261	; 0x105
 1000c24:	e3a00004 	mov	r0, #4
 1000c28:	eb0009fa 	bl	1003418 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000c2c:	e59537c0 	ldr	r3, [r5, #1984]	; 0x7c0
		return ACQRES_MALLOC_FAIL;
 1000c30:	e3e00000 	mvn	r0, #0
		g_acq_state.stats.num_alloc_err_total++;
 1000c34:	e59527c4 	ldr	r2, [r5, #1988]	; 0x7c4
 1000c38:	e2855d1f 	add	r5, r5, #1984	; 0x7c0
 1000c3c:	e2933001 	adds	r3, r3, #1
 1000c40:	e2a22000 	adc	r2, r2, #0
 1000c44:	e5853000 	str	r3, [r5]
 1000c48:	e5852004 	str	r2, [r5, #4]
		return ACQRES_MALLOC_FAIL;
 1000c4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01000c50 <acq_append_next_alloc>:
/*
 * Append a new acquisition buffer to the linked list and set the current pointer to reference
 * this acquisition pointer.
 */
int acq_append_next_alloc()
{
 1000c50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct acq_buffer_t *next;
	int res;

	next = malloc(sizeof(struct acq_buffer_t));
 1000c54:	e3a00020 	mov	r0, #32
 1000c58:	fa002916 	blx	100b0b8 <malloc>

	/*
	 * Allocate the struct that stores the buffer info first.  This is
	 * just a few bytes, but could fail if we are near the memory limit.
	 */
	if(next == 0) {
 1000c5c:	e2504000 	subs	r4, r0, #0
 1000c60:	0a000039 	beq	1000d4c <acq_append_next_alloc+0xfc>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000c64:	e30152d0 	movw	r5, #4816	; 0x12d0
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000c68:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000c6c:	e340510a 	movt	r5, #266	; 0x10a
		g_acq_state.stats.num_alloc_err_total++;
		return ACQRES_MALLOC_FAIL;
	}

	// ?
	next->next = NULL;
 1000c70:	e3a06000 	mov	r6, #0
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000c74:	e5957768 	ldr	r7, [r5, #1896]	; 0x768
	next->flags = ACQBUF_FLAG_ALLOC;
 1000c78:	e3a08080 	mov	r8, #128	; 0x80
	next->next = NULL;
 1000c7c:	e584601c 	str	r6, [r4, #28]
	next->trigger_at = 0;
 1000c80:	e584600c 	str	r6, [r4, #12]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000c84:	e0877000 	add	r7, r7, r0
	next->flags = ACQBUF_FLAG_ALLOC;
 1000c88:	e1c481b0 	strh	r8, [r4, #16]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000c8c:	e3c7701f 	bic	r7, r7, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000c90:	e1a01007 	mov	r1, r7
 1000c94:	fa0028c5 	blx	100afb0 <memalign>
	if(work == NULL) {
 1000c98:	e250e000 	subs	lr, r0, #0
 1000c9c:	0a000017 	beq	1000d00 <acq_append_next_alloc+0xb0>
	/*
	 * Set current acquisition next pointer to this structure, increase the index
	 * to be one higher than the last index then move the current pointer to reference
	 * this structure.
	 */
	g_acq_state.acq_current->next = next;
 1000ca0:	e5957854 	ldr	r7, [r5, #2132]	; 0x854
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
	g_acq_state.acq_current = next;
	g_acq_state.stats.num_alloc_total++;

	return ACQRES_OK;
 1000ca4:	e1a00006 	mov	r0, r6
	g_acq_state.stats.num_alloc_total++;
 1000ca8:	e59517c8 	ldr	r1, [r5, #1992]	; 0x7c8
	next->idx = 0;
 1000cac:	e5846000 	str	r6, [r4]
	g_acq_state.stats.num_alloc_total++;
 1000cb0:	e59527cc 	ldr	r2, [r5, #1996]	; 0x7cc
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 1000cb4:	e5973000 	ldr	r3, [r7]
	g_acq_state.stats.num_alloc_total++;
 1000cb8:	e2911002 	adds	r1, r1, #2
	next->trigger_at = 0;
 1000cbc:	e584600c 	str	r6, [r4, #12]
	next->flags = ACQBUF_FLAG_ALLOC;
 1000cc0:	e1c481b0 	strh	r8, [r4, #16]
	g_acq_state.stats.num_alloc_total++;
 1000cc4:	e2a22000 	adc	r2, r2, #0
	next->pre_sz = g_acq_state.pre_buffsz;
 1000cc8:	e5958760 	ldr	r8, [r5, #1888]	; 0x760
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 1000ccc:	e2833001 	add	r3, r3, #1
	next->next = NULL;
 1000cd0:	e584601c 	str	r6, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 1000cd4:	e5956764 	ldr	r6, [r5, #1892]	; 0x764
	next->buff_alloc = work;
 1000cd8:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 1000cdc:	e584e008 	str	lr, [r4, #8]
	next->pre_sz = g_acq_state.pre_buffsz;
 1000ce0:	e5848014 	str	r8, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 1000ce4:	e5846018 	str	r6, [r4, #24]
	g_acq_state.acq_current->next = next;
 1000ce8:	e587401c 	str	r4, [r7, #28]
	g_acq_state.stats.num_alloc_total++;
 1000cec:	e58517c8 	str	r1, [r5, #1992]	; 0x7c8
 1000cf0:	e58527cc 	str	r2, [r5, #1996]	; 0x7cc
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 1000cf4:	e5843000 	str	r3, [r4]
	g_acq_state.acq_current = next;
 1000cf8:	e5854854 	str	r4, [r5, #2132]	; 0x854
}
 1000cfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1000d00:	e3061080 	movw	r1, #24704	; 0x6080
 1000d04:	e1a02007 	mov	r2, r7
 1000d08:	e3401105 	movt	r1, #261	; 0x105
 1000d0c:	e3a00004 	mov	r0, #4
 1000d10:	eb0009c0 	bl	1003418 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000d14:	e59537c0 	ldr	r3, [r5, #1984]	; 0x7c0
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1000d18:	e30610f4 	movw	r1, #24820	; 0x60f4
		g_acq_state.stats.num_alloc_err_total++;
 1000d1c:	e595c7c4 	ldr	ip, [r5, #1988]	; 0x7c4
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1000d20:	e3401105 	movt	r1, #261	; 0x105
 1000d24:	e3e02000 	mvn	r2, #0
 1000d28:	e3a00004 	mov	r0, #4
		g_acq_state.stats.num_alloc_err_total++;
 1000d2c:	e2933001 	adds	r3, r3, #1
 1000d30:	e2855d1f 	add	r5, r5, #1984	; 0x7c0
 1000d34:	e0acc006 	adc	ip, ip, r6
 1000d38:	e5853000 	str	r3, [r5]
 1000d3c:	e585c004 	str	ip, [r5, #4]
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1000d40:	eb0009b4 	bl	1003418 <d_printf>
		return ACQRES_MALLOC_FAIL;
 1000d44:	e3e00000 	mvn	r0, #0
		return res;
 1000d48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for alloc structure", sizeof(struct acq_buffer_t));
 1000d4c:	e30610b8 	movw	r1, #24760	; 0x60b8
 1000d50:	e3a02020 	mov	r2, #32
 1000d54:	e3401105 	movt	r1, #261	; 0x105
 1000d58:	e3a00004 	mov	r0, #4
 1000d5c:	eb0009ad 	bl	1003418 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1000d60:	e59f201c 	ldr	r2, [pc, #28]	; 1000d84 <acq_append_next_alloc+0x134>
 1000d64:	e3e00000 	mvn	r0, #0
 1000d68:	e5923000 	ldr	r3, [r2]
 1000d6c:	e5921004 	ldr	r1, [r2, #4]
 1000d70:	e2933001 	adds	r3, r3, #1
 1000d74:	e2a11000 	adc	r1, r1, #0
 1000d78:	e5823000 	str	r3, [r2]
 1000d7c:	e5821004 	str	r1, [r2, #4]
		return ACQRES_MALLOC_FAIL;
 1000d80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1000d84:	010a1a90 	.word	0x010a1a90

01000d88 <acq_free_all_alloc>:
/*
 * Free all acquisition buffers safely.
 */
void acq_free_all_alloc()
{
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000d88:	e30132d0 	movw	r3, #4816	; 0x12d0
{
 1000d8c:	e92d4070 	push	{r4, r5, r6, lr}
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000d90:	e340310a 	movt	r3, #266	; 0x10a
 1000d94:	e5934850 	ldr	r4, [r3, #2128]	; 0x850
	/*
	 * Iterate through the list of allocations starting at the first allocation,
	 * copy the next pointer, free the current allocation and repeat until we reach
	 * a NULL next pointer.
	 */
	while(next != NULL) {
 1000d98:	e3540000 	cmp	r4, #0
 1000d9c:	0a000006 	beq	1000dbc <acq_free_all_alloc+0x34>
		next_next = next->next;
 1000da0:	e594501c 	ldr	r5, [r4, #28]

		// Free the buffer *and* the acquisition structure
		free(next->buff_alloc);
 1000da4:	e5940004 	ldr	r0, [r4, #4]
 1000da8:	fa0028c6 	blx	100b0c8 <free>
		free(next);
 1000dac:	e1a00004 	mov	r0, r4
 1000db0:	fa0028c4 	blx	100b0c8 <free>
	while(next != NULL) {
 1000db4:	e2554000 	subs	r4, r5, #0
 1000db8:	1afffff8 	bne	1000da0 <acq_free_all_alloc+0x18>

		next = next_next;
	}

	g_acq_state.acq_first = NULL;
 1000dbc:	e59f300c 	ldr	r3, [pc, #12]	; 1000dd0 <acq_free_all_alloc+0x48>
 1000dc0:	e3a00000 	mov	r0, #0
 1000dc4:	e3a01000 	mov	r1, #0
 1000dc8:	e1c300f0 	strd	r0, [r3]
	g_acq_state.acq_current = NULL;
}
 1000dcc:	e8bd8070 	pop	{r4, r5, r6, pc}
 1000dd0:	010a1b20 	.word	0x010a1b20

01000dd4 <acq_prepare_triggered>:
	uint32_t align_mask;
	uint32_t demux;
	int i, error = 0;

	// How can we acquire an empty buffer of no waveforms?
	if(num_acq == 0 || total_sz == 0) {
 1000dd4:	e16fcf12 	clz	ip, r2
 1000dd8:	e3530000 	cmp	r3, #0
 1000ddc:	e1a0c2ac 	lsr	ip, ip, #5
 1000de0:	03a0c001 	moveq	ip, #1
{
 1000de4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if(num_acq == 0 || total_sz == 0) {
 1000de8:	e35c0000 	cmp	ip, #0
{
 1000dec:	e24dd010 	sub	sp, sp, #16
	if(num_acq == 0 || total_sz == 0) {
 1000df0:	1a0000ec 	bne	10011a8 <acq_prepare_triggered+0x3d4>
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 8-bit, 12-bit or 14-bit set
	if(!(mode_flags & (ACQ_MODE_8BIT | ACQ_MODE_12BIT | ACQ_MODE_14BIT))) {
 1000df4:	e3100007 	tst	r0, #7
 1000df8:	e1a08000 	mov	r8, r0
 1000dfc:	0a0000e9 	beq	10011a8 <acq_prepare_triggered+0x3d4>
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 1ch, 2ch or 4ch set
	if(!(mode_flags & (ACQ_MODE_1CH | ACQ_MODE_2CH | ACQ_MODE_4CH))) {
 1000e00:	e31000e0 	tst	r0, #224	; 0xe0
 1000e04:	0a0000e7 	beq	10011a8 <acq_prepare_triggered+0x3d4>
		return ACQRES_PARAM_FAIL;
	}

	// Must not have "CONTINUOUS" or "TRIGGERED" set
	if(mode_flags & (ACQ_MODE_TRIGGERED | ACQ_MODE_CONTINUOUS)) {
 1000e08:	e3100c03 	tst	r0, #768	; 0x300
 1000e0c:	1a0000e5 	bne	10011a8 <acq_prepare_triggered+0x3d4>

	/*
	 * Compute the pre and post trigger buffer sizes, and verify that everything is
	 * lined up nicely along the required sample boundaries.
	 */
	if(bias_point == 0) {
 1000e10:	e3510000 	cmp	r1, #0
 1000e14:	e1a00002 	mov	r0, r2
		pre_sz = total_sz / 2;
 1000e18:	01a020a2 	lsreq	r2, r2, #1
 1000e1c:	e1a07003 	mov	r7, r3
		post_sz = total_sz / 2;
 1000e20:	01a03002 	moveq	r3, r2
	if(bias_point == 0) {
 1000e24:	0a000003 	beq	1000e38 <acq_prepare_triggered+0x64>
	} else if(bias_point < 0) {
 1000e28:	e1a03001 	mov	r3, r1
		pre_sz = -bias_point;
 1000e2c:	b2612000 	rsblt	r2, r1, #0
		post_sz = total_sz - pre_sz;
 1000e30:	b0813000 	addlt	r3, r1, r0
	} else if(bias_point > 0) {
		post_sz = bias_point;
		pre_sz = total_sz - post_sz;
 1000e34:	a0402003 	subge	r2, r0, r3
	}

	error = 0;

	if(mode_flags & ACQ_MODE_8BIT) {
 1000e38:	e2189001 	ands	r9, r8, #1
 1000e3c:	1a000069 	bne	1000fe8 <acq_prepare_triggered+0x214>
		if(pre_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
			error = 1;
		}
	}

	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000e40:	e3180006 	tst	r8, #6
	error = 0;
 1000e44:	e1a01009 	mov	r1, r9
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000e48:	1a00006d 	bne	1001004 <acq_prepare_triggered+0x230>
		if(pre_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
			error = 1;
		}
	}

	if(pre_sz < ACQ_MIN_PREPOST_SIZE || post_sz < ACQ_MIN_PREPOST_SIZE) {
 1000e4c:	e353001f 	cmp	r3, #31
 1000e50:	8352001f 	cmphi	r2, #31
 1000e54:	93a01001 	movls	r1, #1
 1000e58:	83a01000 	movhi	r1, #0
		error = 1;
	}

	if(error) {
 1000e5c:	e19c1001 	orrs	r1, ip, r1
 1000e60:	1a0000b2 	bne	1001130 <acq_prepare_triggered+0x35c>
		total_sz *= 4;
		pre_sampct = pre_sz;
		post_sampct = post_sz;
		post_sz *= 4;
		pre_sz *= 4;
	} else if(mode_flags & (ACQ_MODE_8BIT)) {
 1000e64:	e3590000 	cmp	r9, #0
		// 8 samples per readout (64-bit)
		total_sz *= 8;
 1000e68:	11a00180 	lslne	r0, r0, #3
		pre_sampct = pre_sz;
		post_sampct = post_sz;
		post_sz *= 8;
 1000e6c:	11a0c183 	lslne	ip, r3, #3
		pre_sz *= 8;
 1000e70:	11a0e182 	lslne	lr, r2, #3
 1000e74:	01a0c003 	moveq	ip, r3
 1000e78:	01a0e002 	moveq	lr, r2
	uint32_t pre_sz = 0, post_sz = 0, pre_sampct = 0, post_sampct = 0;
 1000e7c:	01a03009 	moveq	r3, r9
 1000e80:	01a02009 	moveq	r2, r9
	/*
	 * Ensure that the total acquisition size doesn't exceed the available memory.  If
	 * that's OK, then free any existing buffers and allocate the memory blocks.  Include an
	 * allocation penalty in our size calculation.
	 */
	total_acq_sz = (total_sz + ACQ_BUFFER_ALIGN) * num_acq;
 1000e84:	e2801020 	add	r1, r0, #32
	g_acq_state.pre_buffsz = pre_sz;
 1000e88:	e30162d0 	movw	r6, #4816	; 0x12d0
	total_acq_sz = (total_sz + ACQ_BUFFER_ALIGN) * num_acq;
 1000e8c:	e0010197 	mul	r1, r7, r1
	g_acq_state.pre_buffsz = pre_sz;
 1000e90:	e340610a 	movt	r6, #266	; 0x10a
 1000e94:	e586e760 	str	lr, [r6, #1888]	; 0x760
	g_acq_state.post_buffsz = post_sz;
 1000e98:	e586c764 	str	ip, [r6, #1892]	; 0x764
	g_acq_state.pre_sampct = pre_sampct;
 1000e9c:	e5862778 	str	r2, [r6, #1912]	; 0x778

	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 1000ea0:	e3510303 	cmp	r1, #201326592	; 0xc000000
	g_acq_state.post_sampct = post_sampct;
 1000ea4:	e586377c 	str	r3, [r6, #1916]	; 0x77c
	g_acq_state.total_buffsz = total_sz;
 1000ea8:	e5860768 	str	r0, [r6, #1896]	; 0x768
	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 1000eac:	8a0000bf 	bhi	10011b0 <acq_prepare_triggered+0x3dc>
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000eb0:	e5964850 	ldr	r4, [r6, #2128]	; 0x850
		return ACQRES_TOTAL_MALLOC_FAIL;
	}

	g_acq_state.state = ACQSTATE_UNINIT;
 1000eb4:	e3a03000 	mov	r3, #0
 1000eb8:	e5863000 	str	r3, [r6]
	while(next != NULL) {
 1000ebc:	e1540003 	cmp	r4, r3
 1000ec0:	0a000006 	beq	1000ee0 <acq_prepare_triggered+0x10c>
		next_next = next->next;
 1000ec4:	e594501c 	ldr	r5, [r4, #28]
		free(next->buff_alloc);
 1000ec8:	e5940004 	ldr	r0, [r4, #4]
 1000ecc:	fa00287d 	blx	100b0c8 <free>
		free(next);
 1000ed0:	e1a00004 	mov	r0, r4
 1000ed4:	fa00287b 	blx	100b0c8 <free>
	while(next != NULL) {
 1000ed8:	e2554000 	subs	r4, r5, #0
 1000edc:	1afffff8 	bne	1000ec4 <acq_prepare_triggered+0xf0>
	g_acq_state.acq_first = NULL;
 1000ee0:	e59fa2ec 	ldr	sl, [pc, #748]	; 10011d4 <acq_prepare_triggered+0x400>
 1000ee4:	e3a02000 	mov	r2, #0
 1000ee8:	e3a03000 	mov	r3, #0
	acq_free_all_alloc();

	first = malloc(sizeof(struct acq_buffer_t));
 1000eec:	e3a00020 	mov	r0, #32
	g_acq_state.acq_first = NULL;
 1000ef0:	e1ca20f0 	strd	r2, [sl]
	first = malloc(sizeof(struct acq_buffer_t));
 1000ef4:	fa00286f 	blx	100b0b8 <malloc>

	if(first == NULL) {
 1000ef8:	e2505000 	subs	r5, r0, #0
 1000efc:	0a0000ad 	beq	10011b8 <acq_prepare_triggered+0x3e4>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000f00:	e5964768 	ldr	r4, [r6, #1896]	; 0x768
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000f04:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000f08:	e0844000 	add	r4, r4, r0
 1000f0c:	e3c4401f 	bic	r4, r4, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000f10:	e1a01004 	mov	r1, r4
 1000f14:	fa002825 	blx	100afb0 <memalign>
	if(work == NULL) {
 1000f18:	e3500000 	cmp	r0, #0
 1000f1c:	0a00008a 	beq	100114c <acq_prepare_triggered+0x378>
	g_acq_state.stats.num_alloc_total++;
 1000f20:	e51a3088 	ldr	r3, [sl, #-136]	; 0xffffff78
	next->idx = 0;
 1000f24:	e3a0c000 	mov	ip, #0
	g_acq_state.stats.num_alloc_total++;
 1000f28:	e51a1084 	ldr	r1, [sl, #-132]	; 0xffffff7c
	next->flags = ACQBUF_FLAG_ALLOC;
 1000f2c:	e3a02080 	mov	r2, #128	; 0x80
	 * Allocate all subsequent blocks on start up.  We can't allocate these in the IRQ. Then set
	 * the current pointer back to the first so that we start acquiring from that wave buffer.
	 *
	 * If at any point this fails, bail out and free memory.
	 */
	for(i = 0; i < num_acq; i++) {
 1000f30:	e1a0400c 	mov	r4, ip
	next->buff_alloc = work;
 1000f34:	e5850004 	str	r0, [r5, #4]
	g_acq_state.stats.num_alloc_total++;
 1000f38:	e2933001 	adds	r3, r3, #1
	next->buff_acq = work;
 1000f3c:	e5850008 	str	r0, [r5, #8]
	g_acq_state.stats.num_alloc_total++;
 1000f40:	e0a1100c 	adc	r1, r1, ip
 1000f44:	e50a3088 	str	r3, [sl, #-136]	; 0xffffff78
 1000f48:	e50a1084 	str	r1, [sl, #-132]	; 0xffffff7c
	next->post_sz = g_acq_state.post_buffsz;
 1000f4c:	e5963764 	ldr	r3, [r6, #1892]	; 0x764
	next->pre_sz = g_acq_state.pre_buffsz;
 1000f50:	e5961760 	ldr	r1, [r6, #1888]	; 0x760
	g_acq_state.acq_first = first;
 1000f54:	e5865850 	str	r5, [r6, #2128]	; 0x850
 1000f58:	e5865854 	str	r5, [r6, #2132]	; 0x854
	next->idx = 0;
 1000f5c:	e585c000 	str	ip, [r5]
	next->trigger_at = 0;
 1000f60:	e585c00c 	str	ip, [r5, #12]
	next->next = NULL;
 1000f64:	e585c01c 	str	ip, [r5, #28]
	next->pre_sz = g_acq_state.pre_buffsz;
 1000f68:	e5851014 	str	r1, [r5, #20]
	next->flags = ACQBUF_FLAG_ALLOC;
 1000f6c:	e1c521b0 	strh	r2, [r5, #16]
	next->post_sz = g_acq_state.post_buffsz;
 1000f70:	e5853018 	str	r3, [r5, #24]
	for(i = 0; i < num_acq; i++) {
 1000f74:	ea000002 	b	1000f84 <acq_prepare_triggered+0x1b0>
 1000f78:	e2844001 	add	r4, r4, #1
 1000f7c:	e1570004 	cmp	r7, r4
 1000f80:	9a000033 	bls	1001054 <acq_prepare_triggered+0x280>
		// d_printf(D_EXINFO, "acq_current: 0x%08x", g_acq_state.acq_current);

		error = acq_append_next_alloc();
 1000f84:	ebffff31 	bl	1000c50 <acq_append_next_alloc>
		if(error != ACQRES_OK) {
 1000f88:	e2505000 	subs	r5, r0, #0
 1000f8c:	0afffff9 	beq	1000f78 <acq_prepare_triggered+0x1a4>
			d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d, aborting allocation", error, i);
 1000f90:	e3061238 	movw	r1, #25144	; 0x6238
 1000f94:	e1a03004 	mov	r3, r4
 1000f98:	e3401105 	movt	r1, #261	; 0x105
 1000f9c:	e1a02005 	mov	r2, r5
 1000fa0:	e3a00004 	mov	r0, #4
 1000fa4:	eb00091b 	bl	1003418 <d_printf>
	struct acq_buffer_t *next = g_acq_state.acq_first;
 1000fa8:	e5964850 	ldr	r4, [r6, #2128]	; 0x850
	while(next != NULL) {
 1000fac:	e3540000 	cmp	r4, #0
 1000fb0:	0a000006 	beq	1000fd0 <acq_prepare_triggered+0x1fc>
		next_next = next->next;
 1000fb4:	e594601c 	ldr	r6, [r4, #28]
		free(next->buff_alloc);
 1000fb8:	e5940004 	ldr	r0, [r4, #4]
 1000fbc:	fa002841 	blx	100b0c8 <free>
		free(next);
 1000fc0:	e1a00004 	mov	r0, r4
 1000fc4:	fa00283f 	blx	100b0c8 <free>
	while(next != NULL) {
 1000fc8:	e2564000 	subs	r4, r6, #0
 1000fcc:	1afffff8 	bne	1000fb4 <acq_prepare_triggered+0x1e0>
	g_acq_state.acq_first = NULL;
 1000fd0:	e3a02000 	mov	r2, #0
 1000fd4:	e3a03000 	mov	r3, #0
 1000fd8:	e1ca20f0 	strd	r2, [sl]

	g_acq_state.demux_reg = demux;
	fabcfg_write(FAB_CFG_ACQ_DEMUX_MODE, demux);

	return ACQRES_OK;
}
 1000fdc:	e1a00005 	mov	r0, r5
 1000fe0:	e28dd010 	add	sp, sp, #16
 1000fe4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		if(pre_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
 1000fe8:	e3120007 	tst	r2, #7
 1000fec:	1a00004c 	bne	1001124 <acq_prepare_triggered+0x350>
		if(post_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
 1000ff0:	e213c007 	ands	ip, r3, #7
 1000ff4:	13a0c001 	movne	ip, #1
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1000ff8:	e3180006 	tst	r8, #6
			error = 1;
 1000ffc:	e1a0100c 	mov	r1, ip
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001000:	0affff91 	beq	1000e4c <acq_prepare_triggered+0x78>
		if(post_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
 1001004:	e3130003 	tst	r3, #3
 1001008:	1a000008 	bne	1001030 <acq_prepare_triggered+0x25c>
		if(pre_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
 100100c:	e202c003 	and	ip, r2, #3
 1001010:	e19c1001 	orrs	r1, ip, r1
 1001014:	1a000005 	bne	1001030 <acq_prepare_triggered+0x25c>
	if(error) {
 1001018:	e352001f 	cmp	r2, #31
 100101c:	8353001f 	cmphi	r3, #31
		total_sz *= 4;
 1001020:	81a00100 	lslhi	r0, r0, #2
		post_sz *= 4;
 1001024:	81a0c103 	lslhi	ip, r3, #2
		pre_sz *= 4;
 1001028:	81a0e102 	lslhi	lr, r2, #2
	if(error) {
 100102c:	8affff94 	bhi	1000e84 <acq_prepare_triggered+0xb0>
		align_mask = ACQ_SAMPLES_ALIGN_PR_AMOD;
 1001030:	e3a0c003 	mov	ip, #3
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d total_sz=%d req_align_mask=0x%08x test=0x%08x)", \
 1001034:	e203e007 	and	lr, r3, #7
 1001038:	e306112c 	movw	r1, #24876	; 0x612c
 100103c:	e88d5001 	stm	sp, {r0, ip, lr}
 1001040:	e3401105 	movt	r1, #261	; 0x105
 1001044:	e3a00004 	mov	r0, #4
		return ACQRES_ALIGN_FAIL;
 1001048:	e3e05001 	mvn	r5, #1
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d total_sz=%d req_align_mask=0x%08x test=0x%08x)", \
 100104c:	eb0008f1 	bl	1003418 <d_printf>
		return ACQRES_ALIGN_FAIL;
 1001050:	eaffffe1 	b	1000fdc <acq_prepare_triggered+0x208>
	g_acq_state.acq_current = g_acq_state.acq_first;
 1001054:	e596c850 	ldr	ip, [r6, #2128]	; 0x850
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 1001058:	e3883c01 	orr	r3, r8, #256	; 0x100
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 100105c:	e5962778 	ldr	r2, [r6, #1912]	; 0x778
	g_acq_state.state = ACQSTATE_STOPPED;
 1001060:	e3a00001 	mov	r0, #1
 1001064:	e3a01000 	mov	r1, #0
	g_acq_state.num_acq_request = num_acq;
 1001068:	e5867770 	str	r7, [r6, #1904]	; 0x770
	g_acq_state.num_acq_made = 0;
 100106c:	e5865774 	str	r5, [r6, #1908]	; 0x774
	g_acq_state.acq_current = g_acq_state.acq_first;
 1001070:	e586c854 	str	ip, [r6, #2132]	; 0x854
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 1001074:	e2422001 	sub	r2, r2, #1
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 1001078:	e586375c 	str	r3, [r6, #1884]	; 0x75c
	g_acq_state.state = ACQSTATE_STOPPED;
 100107c:	e1c600f0 	strd	r0, [r6]
static inline void fabcfg_write(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;

	// Wrapped in dsb to ensure synchronous write
	dsb();
 1001080:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1001084:	e3a03000 	mov	r3, #0
 1001088:	e34833c1 	movt	r3, #33729	; 0x83c1
 100108c:	e5832040 	str	r2, [r3, #64]	; 0x40
	dsb();
 1001090:	f57ff04f 	dsb	sy
	fabcfg_write(FAB_CFG_ACQ_SIZE_B, g_acq_state.post_sampct - 1);
 1001094:	e596277c 	ldr	r2, [r6, #1916]	; 0x77c
 1001098:	e2422001 	sub	r2, r2, #1
	dsb();
 100109c:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 10010a0:	e5832044 	str	r2, [r3, #68]	; 0x44
	dsb();
 10010a4:	f57ff04f 	dsb	sy
	if(mode_flags & ACQ_MODE_8BIT) {
 10010a8:	e3590000 	cmp	r9, #0
 10010ac:	1a000021 	bne	1001138 <acq_prepare_triggered+0x364>
	} else if(mode_flags & ACQ_MODE_12BIT) {
 10010b0:	e3180002 	tst	r8, #2
 10010b4:	1a000036 	bne	1001194 <acq_prepare_triggered+0x3c0>
	} else if(mode_flags & ACQ_MODE_14BIT) {
 10010b8:	e2083004 	and	r3, r8, #4
 10010bc:	e3530000 	cmp	r3, #0
 10010c0:	03a01004 	moveq	r1, #4
 10010c4:	13a01024 	movne	r1, #36	; 0x24
 10010c8:	03a02002 	moveq	r2, #2
 10010cc:	13a02022 	movne	r2, #34	; 0x22
 10010d0:	03a03001 	moveq	r3, #1
 10010d4:	13a03021 	movne	r3, #33	; 0x21
 10010d8:	03a00000 	moveq	r0, #0
 10010dc:	13a00020 	movne	r0, #32
	if(mode_flags & ACQ_MODE_1CH) {
 10010e0:	e3180020 	tst	r8, #32
 10010e4:	1a000005 	bne	1001100 <acq_prepare_triggered+0x32c>
	} else if(mode_flags & ACQ_MODE_2CH) {
 10010e8:	e3180040 	tst	r8, #64	; 0x40
		demux |= ADCDEMUX_2CH;
 10010ec:	11a03002 	movne	r3, r2
	} else if(mode_flags & ACQ_MODE_2CH) {
 10010f0:	1a000002 	bne	1001100 <acq_prepare_triggered+0x32c>
		demux |= ADCDEMUX_4CH;
 10010f4:	e3180080 	tst	r8, #128	; 0x80
 10010f8:	01a03000 	moveq	r3, r0
 10010fc:	11a03001 	movne	r3, r1
	g_acq_state.demux_reg = demux;
 1001100:	e5863780 	str	r3, [r6, #1920]	; 0x780
	dsb();
 1001104:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1001108:	e3a02000 	mov	r2, #0
 100110c:	e34823c1 	movt	r2, #33729	; 0x83c1
 1001110:	e582304c 	str	r3, [r2, #76]	; 0x4c
	dsb();
 1001114:	f57ff04f 	dsb	sy
}
 1001118:	e1a00005 	mov	r0, r5
 100111c:	e28dd010 	add	sp, sp, #16
 1001120:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001124:	e3180006 	tst	r8, #6
			error = 1;
 1001128:	13a01001 	movne	r1, #1
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 100112c:	1affffb4 	bne	1001004 <acq_prepare_triggered+0x230>
	if(error) {
 1001130:	e3a0c007 	mov	ip, #7
 1001134:	eaffffbe 	b	1001034 <acq_prepare_triggered+0x260>
 1001138:	e3a0100c 	mov	r1, #12
 100113c:	e3a0200a 	mov	r2, #10
 1001140:	e3a03009 	mov	r3, #9
		demux |= ADCDEMUX_8BIT;
 1001144:	e3a00008 	mov	r0, #8
 1001148:	eaffffe4 	b	10010e0 <acq_prepare_triggered+0x30c>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 100114c:	e3061080 	movw	r1, #24704	; 0x6080
 1001150:	e1a02004 	mov	r2, r4
 1001154:	e3401105 	movt	r1, #261	; 0x105
 1001158:	e3a00004 	mov	r0, #4
 100115c:	eb0008ad 	bl	1003418 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1001160:	e16a69d0 	ldrd	r6, [sl, #-144]!	; 0xffffff70
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 1001164:	e3061204 	movw	r1, #25092	; 0x6204
 1001168:	e3401105 	movt	r1, #261	; 0x105
 100116c:	e3a00004 	mov	r0, #4
		return ACQRES_MALLOC_FAIL;
 1001170:	e3e05000 	mvn	r5, #0
		g_acq_state.stats.num_alloc_err_total++;
 1001174:	e2963001 	adds	r3, r6, #1
 1001178:	e2a72000 	adc	r2, r7, #0
 100117c:	e58a3000 	str	r3, [sl]
 1001180:	e58a2004 	str	r2, [sl, #4]
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 1001184:	eb0008a3 	bl	1003418 <d_printf>
}
 1001188:	e1a00005 	mov	r0, r5
 100118c:	e28dd010 	add	sp, sp, #16
 1001190:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1001194:	e3a01014 	mov	r1, #20
 1001198:	e3a02012 	mov	r2, #18
 100119c:	e3a03011 	mov	r3, #17
		demux |= ADCDEMUX_12BIT;
 10011a0:	e3a00010 	mov	r0, #16
 10011a4:	eaffffcd 	b	10010e0 <acq_prepare_triggered+0x30c>
		return ACQRES_PARAM_FAIL;
 10011a8:	e3e05002 	mvn	r5, #2
 10011ac:	eaffff8a 	b	1000fdc <acq_prepare_triggered+0x208>
		return ACQRES_TOTAL_MALLOC_FAIL;
 10011b0:	e3e05003 	mvn	r5, #3
 10011b4:	eaffff88 	b	1000fdc <acq_prepare_triggered+0x208>
		d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first entry in acquisition", sizeof(struct acq_buffer_t));
 10011b8:	e30611c0 	movw	r1, #25024	; 0x61c0
 10011bc:	e3a02020 	mov	r2, #32
 10011c0:	e3401105 	movt	r1, #261	; 0x105
 10011c4:	e3a00004 	mov	r0, #4
 10011c8:	eb000892 	bl	1003418 <d_printf>
		return ACQRES_MALLOC_FAIL;
 10011cc:	e3e05000 	mvn	r5, #0
 10011d0:	eaffff81 	b	1000fdc <acq_prepare_triggered+0x208>
 10011d4:	010a1b20 	.word	0x010a1b20

010011d8 <acq_start>:
 * 			ACQRES_NOT_IMPLEMENTED if the mode is not presently supported;
 * 			ACQRES_DMA_FAIL if DMA task could not be started;
 * 			ACQRES_SUCCESS if stop signal sent.
 */
int acq_start()
{
 10011d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int error;

	//d_printf(D_ERROR, "acquire: starts");

	if(g_acq_state.state == ACQSTATE_UNINIT) {
 10011dc:	e30142d0 	movw	r4, #4816	; 0x12d0
 10011e0:	e340410a 	movt	r4, #266	; 0x10a
{
 10011e4:	e24dd00c 	sub	sp, sp, #12
	if(g_acq_state.state == ACQSTATE_UNINIT) {
 10011e8:	e5943000 	ldr	r3, [r4]
 10011ec:	e3530000 	cmp	r3, #0
 10011f0:	0a000061 	beq	100137c <acq_start+0x1a4>
	if(!(g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE)) {
		return ACQRES_NOT_STOPPED;
	}
#endif

	if(g_acq_state.acq_mode_flags & ACQ_MODE_TRIGGERED) {
 10011f4:	e594375c 	ldr	r3, [r4, #1884]	; 0x75c
 10011f8:	e3130c01 	tst	r3, #256	; 0x100
 10011fc:	0a000055 	beq	1001358 <acq_start+0x180>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1001200:	e5942008 	ldr	r2, [r4, #8]

		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 1001204:	e5941854 	ldr	r1, [r4, #2132]	; 0x854
 1001208:	e5923030 	ldr	r3, [r2, #48]	; 0x30
 100120c:	e5910008 	ldr	r0, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1001210:	e3833a07 	orr	r3, r3, #28672	; 0x7000
	*LocalAddr = Value;
 1001214:	e5823030 	str	r3, [r2, #48]	; 0x30
		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 1001218:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
 100121c:	eb001d32 	bl	10086ec <Xil_DCacheFlushRange>
		dsb();
 1001220:	f57ff04f 	dsb	sy

		error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)g_acq_state.acq_current->buff_acq, \
 1001224:	e5941854 	ldr	r1, [r4, #2132]	; 0x854
 1001228:	e2840008 	add	r0, r4, #8
 100122c:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1001230:	e3a03001 	mov	r3, #1
 1001234:	e5911008 	ldr	r1, [r1, #8]
 1001238:	eb000d57 	bl	100479c <XAxiDma_SimpleTransfer>
				g_acq_state.pre_buffsz, XAXIDMA_DEVICE_TO_DMA);

		if(error != XST_SUCCESS) {
 100123c:	e2505000 	subs	r5, r0, #0
 1001240:	1a000046 	bne	1001360 <acq_start+0x188>
 1001244:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001248:	e3a01000 	mov	r1, #0
 100124c:	e3a02040 	mov	r2, #64	; 0x40
 1001250:	e34e3000 	movt	r3, #57344	; 0xe000
 1001254:	e34f1dff 	movt	r1, #65023	; 0xfdff
			d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
			return ACQRES_DMA_FAIL;
		}

		// Set the state machine
		g_acq_state.state = ACQSTATE_PREP;
 1001258:	e3a06002 	mov	r6, #2
 100125c:	e3a07001 	mov	r7, #1
 1001260:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 1001264:	e1c460f0 	strd	r6, [r4]
 1001268:	e5831010 	str	r1, [r3, #16]
 100126c:	e5832010 	str	r2, [r3, #16]
	for(i = 0; i < 20; i++) {
 1001270:	e58d5004 	str	r5, [sp, #4]
 1001274:	e59d3004 	ldr	r3, [sp, #4]
 1001278:	e3530013 	cmp	r3, #19
 100127c:	ca000006 	bgt	100129c <acq_start+0xc4>
		asm __volatile__("nop");
 1001280:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 1001284:	e59d3004 	ldr	r3, [sp, #4]
 1001288:	e2833001 	add	r3, r3, #1
 100128c:	e58d3004 	str	r3, [sp, #4]
 1001290:	e59d3004 	ldr	r3, [sp, #4]
 1001294:	e3530013 	cmp	r3, #19
 1001298:	dafffff8 	ble	1001280 <acq_start+0xa8>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 100129c:	e59f40e0 	ldr	r4, [pc, #224]	; 1001384 <acq_start+0x1ac>
 10012a0:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10012a4:	e3a02000 	mov	r2, #0
 10012a8:	e34e3000 	movt	r3, #57344	; 0xe000
 10012ac:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 10012b0:	e5832010 	str	r2, [r3, #16]
 10012b4:	e3a01042 	mov	r1, #66	; 0x42
 10012b8:	e1a00004 	mov	r0, r4
 10012bc:	eb0013c0 	bl	10061c4 <XGpioPs_ReadPin>
 10012c0:	e3500000 	cmp	r0, #0
 10012c4:	1afffffa 	bne	10012b4 <acq_start+0xdc>
 10012c8:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10012cc:	e3a02c01 	mov	r2, #256	; 0x100
 10012d0:	e34e3000 	movt	r3, #57344	; 0xe000
 10012d4:	e34f2eff 	movt	r2, #65279	; 0xfeff
 10012d8:	e5832010 	str	r2, [r3, #16]
	for(i = 0; i < 10; i++) {
 10012dc:	e58d0000 	str	r0, [sp]
 10012e0:	e59d3000 	ldr	r3, [sp]
 10012e4:	e3530009 	cmp	r3, #9
 10012e8:	ca000006 	bgt	1001308 <acq_start+0x130>
		asm __volatile__("nop");
 10012ec:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 10012f0:	e59d3000 	ldr	r3, [sp]
 10012f4:	e2833001 	add	r3, r3, #1
 10012f8:	e58d3000 	str	r3, [sp]
 10012fc:	e59d3000 	ldr	r3, [sp]
 1001300:	e3530009 	cmp	r3, #9
 1001304:	dafffff8 	ble	10012ec <acq_start+0x114>
 1001308:	e3a02000 	mov	r2, #0
 100130c:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001310:	e34e3000 	movt	r3, #57344	; 0xe000
 1001314:	e1a0c002 	mov	ip, r2
 1001318:	e34f2eff 	movt	r2, #65279	; 0xfeff
 100131c:	e3a00001 	mov	r0, #1
 1001320:	e5832010 	str	r2, [r3, #16]
 1001324:	e3a01020 	mov	r1, #32
 1001328:	e3a02b01 	mov	r2, #1024	; 0x400
 100132c:	e34fcffd 	movt	ip, #65533	; 0xfffd
 1001330:	e34f0ffe 	movt	r0, #65534	; 0xfffe
 1001334:	e34f1fdf 	movt	r1, #65503	; 0xffdf
 1001338:	e34f2bff 	movt	r2, #64511	; 0xfbff
 100133c:	e583c010 	str	ip, [r3, #16]
 1001340:	e5830010 	str	r0, [r3, #16]
 1001344:	e5831010 	str	r1, [r3, #16]
 1001348:	e5832010 	str	r2, [r3, #16]

		return ACQRES_OK;
	} else {
		return ACQRES_NOT_IMPLEMENTED;
	}
}
 100134c:	e1a00005 	mov	r0, r5
 1001350:	e28dd00c 	add	sp, sp, #12
 1001354:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		return ACQRES_NOT_IMPLEMENTED;
 1001358:	e3e05006 	mvn	r5, #6
 100135c:	eafffffa 	b	100134c <acq_start+0x174>
			d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1001360:	e306127c 	movw	r1, #25212	; 0x627c
 1001364:	e1a02005 	mov	r2, r5
 1001368:	e3401105 	movt	r1, #261	; 0x105
 100136c:	e3a00004 	mov	r0, #4
 1001370:	eb000828 	bl	1003418 <d_printf>
			return ACQRES_DMA_FAIL;
 1001374:	e3e05004 	mvn	r5, #4
 1001378:	eafffff3 	b	100134c <acq_start+0x174>
		return ACQRES_NOT_INITIALISED;
 100137c:	e3e05005 	mvn	r5, #5
 1001380:	eafffff1 	b	100134c <acq_start+0x174>
 1001384:	010a1b4c 	.word	0x010a1b4c

01001388 <_acq_irq_rx_handler>:
{
 1001388:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	g_acq_state.stats.num_irqs++;
 100138c:	e30142d0 	movw	r4, #4816	; 0x12d0
	status = XAxiDma_BdRingGetIrq(bd_ring);
 1001390:	e590c000 	ldr	ip, [r0]
	g_acq_state.stats.num_irqs++;
 1001394:	e340410a 	movt	r4, #266	; 0x10a
 1001398:	e3a05a07 	mov	r5, #28672	; 0x7000
{
 100139c:	e24dd010 	sub	sp, sp, #16
	g_acq_state.stats.num_irqs++;
 10013a0:	e59437d0 	ldr	r3, [r4, #2000]	; 0x7d0
	return *(volatile u32 *) Addr;
 10013a4:	e59c1004 	ldr	r1, [ip, #4]
 10013a8:	e59407d4 	ldr	r0, [r4, #2004]	; 0x7d4
 10013ac:	e2933001 	adds	r3, r3, #1
	XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 10013b0:	e594e008 	ldr	lr, [r4, #8]
	g_acq_state.stats.num_irqs++;
 10013b4:	e58437d0 	str	r3, [r4, #2000]	; 0x7d0
	status = XAxiDma_BdRingGetIrq(bd_ring);
 10013b8:	e0013005 	and	r3, r1, r5
	g_acq_state.stats.num_irqs++;
 10013bc:	e2a00000 	adc	r0, r0, #0
	if(status & XAXIDMA_IRQ_ERROR_MASK) {
 10013c0:	e2112901 	ands	r2, r1, #16384	; 0x4000
	g_acq_state.stats.num_irqs++;
 10013c4:	e58407d4 	str	r0, [r4, #2004]	; 0x7d4
	*LocalAddr = Value;
 10013c8:	e58e5004 	str	r5, [lr, #4]
 10013cc:	e58c3004 	str	r3, [ip, #4]
	if(status & XAXIDMA_IRQ_ERROR_MASK) {
 10013d0:	1a00000e 	bne	1001410 <_acq_irq_rx_handler+0x88>
	if(status & XAXIDMA_IRQ_IOC_MASK) {
 10013d4:	e3110a01 	tst	r1, #4096	; 0x1000
 10013d8:	0a000006 	beq	10013f8 <_acq_irq_rx_handler+0x70>
		switch(g_acq_state.sub_state) {
 10013dc:	e5943004 	ldr	r3, [r4, #4]
 10013e0:	e3530002 	cmp	r3, #2
 10013e4:	0a0000a9 	beq	1001690 <_acq_irq_rx_handler+0x308>
 10013e8:	e3530003 	cmp	r3, #3
 10013ec:	0a000055 	beq	1001548 <_acq_irq_rx_handler+0x1c0>
 10013f0:	e3530001 	cmp	r3, #1
 10013f4:	0a000013 	beq	1001448 <_acq_irq_rx_handler+0xc0>
}
 10013f8:	e28dd010 	add	sp, sp, #16
 10013fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
					d_printf(D_ERROR, "acquire: PL reports not done, but DMA complete!");
 1001400:	e30612dc 	movw	r1, #25308	; 0x62dc
 1001404:	e3a00004 	mov	r0, #4
 1001408:	e3401105 	movt	r1, #261	; 0x105
 100140c:	eb000801 	bl	1003418 <d_printf>
	g_acq_state.stats.num_err_total++;
 1001410:	e2842e7b 	add	r2, r4, #1968	; 0x7b0
 1001414:	e5123008 	ldr	r3, [r2, #-8]
 1001418:	e5121004 	ldr	r1, [r2, #-4]
	g_acq_state.state = ACQSTATE_UNINIT;
 100141c:	e1a00004 	mov	r0, r4
 1001420:	e3a05000 	mov	r5, #0
 1001424:	e3a04000 	mov	r4, #0
	g_acq_state.stats.num_err_total++;
 1001428:	e2933001 	adds	r3, r3, #1
	g_acq_state.state = ACQSTATE_UNINIT;
 100142c:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 1001430:	e2a11000 	adc	r1, r1, #0
 1001434:	e5023008 	str	r3, [r2, #-8]
 1001438:	e5021004 	str	r1, [r2, #-4]
}
 100143c:	e28dd010 	add	sp, sp, #16
 1001440:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	XAxiDma_Reset(&g_acq_state.dma);
 1001444:	ea000af8 	b	100402c <XAxiDma_Reset>
				error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)g_acq_state.acq_current->buff_acq, \
 1001448:	e594c854 	ldr	ip, [r4, #2132]	; 0x854
 100144c:	e3a01000 	mov	r1, #0
 1001450:	e1a02001 	mov	r2, r1
 1001454:	e3a05a0a 	mov	r5, #40960	; 0xa000
 1001458:	e34e5000 	movt	r5, #57344	; 0xe000
 100145c:	e34f1dff 	movt	r1, #65023	; 0xfdff
 1001460:	e34f2bff 	movt	r2, #64511	; 0xfbff
 1001464:	e5851010 	str	r1, [r5, #16]
 1001468:	e2840008 	add	r0, r4, #8
 100146c:	e5852010 	str	r2, [r5, #16]
 1001470:	e59c1008 	ldr	r1, [ip, #8]
 1001474:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1001478:	eb000cc7 	bl	100479c <XAxiDma_SimpleTransfer>
				if(error != XST_SUCCESS) {
 100147c:	e2506000 	subs	r6, r0, #0
 1001480:	1a000155 	bne	10019dc <_acq_irq_rx_handler+0x654>
	return *(volatile u32 *) Addr;
 1001484:	e5953068 	ldr	r3, [r5, #104]	; 0x68
				if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 1001488:	e3130a01 	tst	r3, #4096	; 0x1000
					g_acq_state.state = ACQSTATE_WAIT_TRIG;
 100148c:	03a02003 	moveq	r2, #3
 1001490:	03a03002 	moveq	r3, #2
 1001494:	01c420f0 	strdeq	r2, [r4]
				if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 1001498:	1a00012b 	bne	100194c <_acq_irq_rx_handler+0x5c4>
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100149c:	e59f2650 	ldr	r2, [pc, #1616]	; 1001af4 <_acq_irq_rx_handler+0x76c>
	*LocalAddr = Value;
 10014a0:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10014a4:	e3a00000 	mov	r0, #0
 10014a8:	e3a01b01 	mov	r1, #1024	; 0x400
 10014ac:	e34e3000 	movt	r3, #57344	; 0xe000
 10014b0:	e34f0fdf 	movt	r0, #65503	; 0xffdf
 10014b4:	e34f1bff 	movt	r1, #64511	; 0xfbff
 10014b8:	e5830010 	str	r0, [r3, #16]
 10014bc:	e5831010 	str	r1, [r3, #16]
 10014c0:	e3a06000 	mov	r6, #0
 10014c4:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
 10014c8:	e1a0e002 	mov	lr, r2
 10014cc:	e5921000 	ldr	r1, [r2]
				g_acq_state.stats.num_acq_total++;
 10014d0:	e242c020 	sub	ip, r2, #32
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 10014d4:	e5920004 	ldr	r0, [r2, #4]
 10014d8:	e0911003 	adds	r1, r1, r3
 10014dc:	e1a04001 	mov	r4, r1
 10014e0:	e0a01006 	adc	r1, r0, r6
 10014e4:	e1a05001 	mov	r5, r1
				g_acq_state.stats.num_pre_fill_total++;
 10014e8:	e2420010 	sub	r0, r2, #16
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 10014ec:	e0ce41f0 	strd	r4, [lr], #16
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 10014f0:	e91e0014 	ldmdb	lr, {r2, r4}
				g_acq_state.stats.num_acq_total++;
 10014f4:	e51c1008 	ldr	r1, [ip, #-8]
 10014f8:	e51c5004 	ldr	r5, [ip, #-4]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 10014fc:	e0923003 	adds	r3, r2, r3
				g_acq_state.stats.num_pre_total++;
 1001500:	e59c2000 	ldr	r2, [ip]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1001504:	e0a46006 	adc	r6, r4, r6
 1001508:	e50e3008 	str	r3, [lr, #-8]
				g_acq_state.stats.num_pre_total++;
 100150c:	e59c4004 	ldr	r4, [ip, #4]
				g_acq_state.stats.num_acq_total++;
 1001510:	e2911001 	adds	r1, r1, #1
				g_acq_state.stats.num_pre_fill_total++;
 1001514:	e5103008 	ldr	r3, [r0, #-8]
				g_acq_state.stats.num_acq_total++;
 1001518:	e2a55000 	adc	r5, r5, #0
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 100151c:	e50e6004 	str	r6, [lr, #-4]
				g_acq_state.stats.num_pre_total++;
 1001520:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_pre_fill_total++;
 1001524:	e510e004 	ldr	lr, [r0, #-4]
				g_acq_state.stats.num_pre_total++;
 1001528:	e2a44000 	adc	r4, r4, #0
				g_acq_state.stats.num_pre_fill_total++;
 100152c:	e2933001 	adds	r3, r3, #1
				g_acq_state.stats.num_acq_total++;
 1001530:	e90c0022 	stmdb	ip, {r1, r5}
				g_acq_state.stats.num_pre_total++;
 1001534:	e88c0014 	stm	ip, {r2, r4}
				g_acq_state.stats.num_pre_fill_total++;
 1001538:	e2ae1000 	adc	r1, lr, #0
 100153c:	e5003008 	str	r3, [r0, #-8]
 1001540:	e5001004 	str	r1, [r0, #-4]
				break;
 1001544:	eaffffab 	b	10013f8 <_acq_irq_rx_handler+0x70>
	return *(volatile u32 *) Addr;
 1001548:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100154c:	e34e3000 	movt	r3, #57344	; 0xe000
 1001550:	e5931068 	ldr	r1, [r3, #104]	; 0x68
				if(!emio_fast_read(ACQ_EMIO_DONE)) {
 1001554:	e3110004 	tst	r1, #4
 1001558:	0affffa8 	beq	1001400 <_acq_irq_rx_handler+0x78>
	*LocalAddr = Value;
 100155c:	e3a00000 	mov	r0, #0
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 1001560:	e5945854 	ldr	r5, [r4, #2132]	; 0x854
 1001564:	e1a01000 	mov	r1, r0
 1001568:	e3a0c020 	mov	ip, #32
 100156c:	e34fcfdf 	movt	ip, #65503	; 0xffdf
 1001570:	e34f0ffe 	movt	r0, #65534	; 0xfffe
 1001574:	e34f1bff 	movt	r1, #64511	; 0xfbff
 1001578:	e583c010 	str	ip, [r3, #16]
 100157c:	e5830010 	str	r0, [r3, #16]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 1001580:	e3a07000 	mov	r7, #0
 1001584:	e5831010 	str	r1, [r3, #16]
 1001588:	e284ed1f 	add	lr, r4, #1984	; 0x7c0
 100158c:	e59417b8 	ldr	r1, [r4, #1976]	; 0x7b8
 1001590:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 1001594:	e1d5c1b0 	ldrh	ip, [r5, #16]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 1001598:	e59467bc 	ldr	r6, [r4, #1980]	; 0x7bc
 100159c:	e0911000 	adds	r1, r1, r0
 10015a0:	e58417b8 	str	r1, [r4, #1976]	; 0x7b8
 10015a4:	e0a66007 	adc	r6, r6, r7
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 10015a8:	e31c0002 	tst	ip, #2
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 10015ac:	e58467bc 	str	r6, [r4, #1980]	; 0x7bc
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 10015b0:	e38cc001 	orr	ip, ip, #1
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 10015b4:	e3a06004 	mov	r6, #4
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 10015b8:	e1c5c1b0 	strh	ip, [r5, #16]
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 10015bc:	e5846004 	str	r6, [r4, #4]
				g_acq_state.state = ACQSTATE_RUNNING;
 10015c0:	e5846000 	str	r6, [r4]
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 10015c4:	1a0000ae 	bne	1001884 <_acq_irq_rx_handler+0x4fc>
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10015c8:	e2848e7b 	add	r8, r4, #1968	; 0x7b0
 10015cc:	e5983000 	ldr	r3, [r8]
					g_acq_state.num_acq_made++;
 10015d0:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10015d4:	e5981004 	ldr	r1, [r8, #4]
					if(g_acq_state.num_acq_made == g_acq_state.num_acq_request) {
 10015d8:	e594c770 	ldr	ip, [r4, #1904]	; 0x770
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10015dc:	e0930000 	adds	r0, r3, r0
					g_acq_state.num_acq_made++;
 10015e0:	e2822001 	add	r2, r2, #1
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10015e4:	e5880000 	str	r0, [r8]
 10015e8:	e0a17007 	adc	r7, r1, r7
					g_acq_state.num_acq_made++;
 10015ec:	e5842774 	str	r2, [r4, #1908]	; 0x774
					if(g_acq_state.num_acq_made == g_acq_state.num_acq_request) {
 10015f0:	e152000c 	cmp	r2, ip
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10015f4:	e5887004 	str	r7, [r8, #4]
						g_acq_state.state = ACQSTATE_DONE;
 10015f8:	03a02005 	moveq	r2, #5
 10015fc:	03a03005 	moveq	r3, #5
 1001600:	01c420f0 	strdeq	r2, [r4]
					if(g_acq_state.num_acq_made == g_acq_state.num_acq_request) {
 1001604:	0a000019 	beq	1001670 <_acq_irq_rx_handler+0x2e8>
						if(g_acq_state.acq_current->next != NULL) {
 1001608:	e595301c 	ldr	r3, [r5, #28]
 100160c:	e3530000 	cmp	r3, #0
 1001610:	0a000012 	beq	1001660 <_acq_irq_rx_handler+0x2d8>
							g_acq_state.acq_current = g_acq_state.acq_current->next;
 1001614:	e5843854 	str	r3, [r4, #2132]	; 0x854
							error = acq_start();
 1001618:	ebfffeee 	bl	10011d8 <acq_start>
							if(error != ACQRES_OK) {
 100161c:	e2502000 	subs	r2, r0, #0
 1001620:	0a000012 	beq	1001670 <_acq_irq_rx_handler+0x2e8>
								d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 1001624:	e3061340 	movw	r1, #25408	; 0x6340
 1001628:	e1a00006 	mov	r0, r6
 100162c:	e3401105 	movt	r1, #261	; 0x105
	g_acq_state.state = ACQSTATE_UNINIT;
 1001630:	e3a05000 	mov	r5, #0
								d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 1001634:	eb000777 	bl	1003418 <d_printf>
	g_acq_state.stats.num_err_total++;
 1001638:	e5183008 	ldr	r3, [r8, #-8]
	g_acq_state.state = ACQSTATE_UNINIT;
 100163c:	e1a00004 	mov	r0, r4
	g_acq_state.stats.num_err_total++;
 1001640:	e5182004 	ldr	r2, [r8, #-4]
	g_acq_state.state = ACQSTATE_UNINIT;
 1001644:	e3a04000 	mov	r4, #0
 1001648:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 100164c:	e2933001 	adds	r3, r3, #1
 1001650:	e2a22000 	adc	r2, r2, #0
 1001654:	e5083008 	str	r3, [r8, #-8]
 1001658:	e5082004 	str	r2, [r8, #-4]
 100165c:	eaffff76 	b	100143c <_acq_irq_rx_handler+0xb4>
							d_printf(D_ERROR, "acquire: NULL deref trying to move to next wavebuffer; something's wrong!");
 1001660:	e3061374 	movw	r1, #25460	; 0x6374
 1001664:	e1a00006 	mov	r0, r6
 1001668:	e3401105 	movt	r1, #261	; 0x105
 100166c:	eb000769 	bl	1003418 <d_printf>
				g_acq_state.stats.num_post_total++;
 1001670:	e59f2480 	ldr	r2, [pc, #1152]	; 1001af8 <_acq_irq_rx_handler+0x770>
 1001674:	e5923000 	ldr	r3, [r2]
 1001678:	e5921004 	ldr	r1, [r2, #4]
 100167c:	e2933001 	adds	r3, r3, #1
 1001680:	e2a11000 	adc	r1, r1, #0
 1001684:	e5823000 	str	r3, [r2]
 1001688:	e5821004 	str	r1, [r2, #4]
				break;
 100168c:	eaffff59 	b	10013f8 <_acq_irq_rx_handler+0x70>
	return *(volatile u32 *) Addr;
 1001690:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001694:	e34e3000 	movt	r3, #57344	; 0xe000
 1001698:	e5932068 	ldr	r2, [r3, #104]	; 0x68
				if(emio_fast_read(ACQ_EMIO_HAVE_TRIG)) {
 100169c:	e3120080 	tst	r2, #128	; 0x80
 10016a0:	0a000046 	beq	10017c0 <_acq_irq_rx_handler+0x438>
	*LocalAddr = Value;
 10016a4:	e3a01c02 	mov	r1, #512	; 0x200
 10016a8:	e3a02000 	mov	r2, #0
 10016ac:	e34f2bff 	movt	r2, #64511	; 0xfbff
 10016b0:	e34f1dff 	movt	r1, #65023	; 0xfdff
 10016b4:	e5831010 	str	r1, [r3, #16]
 10016b8:	e5832010 	str	r2, [r3, #16]
	return *(volatile u32 *) Addr;
 10016bc:	e5932068 	ldr	r2, [r3, #104]	; 0x68
 10016c0:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
					if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 10016c4:	e3120a01 	tst	r2, #4096	; 0x1000
 10016c8:	0a000008 	beq	10016f0 <_acq_irq_rx_handler+0x368>
						g_acq_state.stats.num_fifo_full++;
 10016cc:	e59427d8 	ldr	r2, [r4, #2008]	; 0x7d8
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10016d0:	e1d3c1b0 	ldrh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 10016d4:	e59407dc 	ldr	r0, [r4, #2012]	; 0x7dc
 10016d8:	e2922001 	adds	r2, r2, #1
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10016dc:	e38cc002 	orr	ip, ip, #2
						g_acq_state.stats.num_fifo_full++;
 10016e0:	e2a00000 	adc	r0, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10016e4:	e1c3c1b0 	strh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 10016e8:	e58427d8 	str	r2, [r4, #2008]	; 0x7d8
 10016ec:	e58407dc 	str	r0, [r4, #2012]	; 0x7dc
					addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 10016f0:	e593c008 	ldr	ip, [r3, #8]
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, addr, \
 10016f4:	e3a03001 	mov	r3, #1
					addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 10016f8:	e5941760 	ldr	r1, [r4, #1888]	; 0x760
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, addr, \
 10016fc:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 1001700:	e59f03f4 	ldr	r0, [pc, #1012]	; 1001afc <_acq_irq_rx_handler+0x774>
 1001704:	e08c1001 	add	r1, ip, r1
 1001708:	eb000c23 	bl	100479c <XAxiDma_SimpleTransfer>
					if(error != XST_SUCCESS) {
 100170c:	e2505000 	subs	r5, r0, #0
 1001710:	1a0000c4 	bne	1001a28 <_acq_irq_rx_handler+0x6a0>
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 1001714:	e5940854 	ldr	r0, [r4, #2132]	; 0x854
	dsb();
 1001718:	f57ff04f 	dsb	sy
	res = _FAB_CFG_ACCESS(reg);
 100171c:	e3a03000 	mov	r3, #0
 1001720:	e34833c1 	movt	r3, #33729	; 0x83c1
 1001724:	e593e048 	ldr	lr, [r3, #72]	; 0x48
	dsb();
 1001728:	f57ff04f 	dsb	sy
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100172c:	e59f13cc 	ldr	r1, [pc, #972]	; 1001b00 <_acq_irq_rx_handler+0x778>
	*LocalAddr = Value;
 1001730:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001734:	e594c854 	ldr	ip, [r4, #2132]	; 0x854
 1001738:	e3a02b01 	mov	r2, #1024	; 0x400
 100173c:	e34e3000 	movt	r3, #57344	; 0xe000
 1001740:	e34f2bff 	movt	r2, #64511	; 0xfbff
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 1001744:	e580e00c 	str	lr, [r0, #12]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1001748:	e1a00001 	mov	r0, r1
 100174c:	e5832010 	str	r2, [r3, #16]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 1001750:	e3a05000 	mov	r5, #0
 1001754:	e59c300c 	ldr	r3, [ip, #12]
					g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 1001758:	e3a0c003 	mov	ip, #3
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100175c:	e5112008 	ldr	r2, [r1, #-8]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1001760:	e16061d0 	ldrd	r6, [r0, #-16]!
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 1001764:	e511e004 	ldr	lr, [r1, #-4]
 1001768:	e0922003 	adds	r2, r2, r3
					g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 100176c:	e584c004 	str	ip, [r4, #4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 1001770:	e5012008 	str	r2, [r1, #-8]
 1001774:	e0aee005 	adc	lr, lr, r5
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1001778:	e0963003 	adds	r3, r6, r3
 100177c:	e0a72005 	adc	r2, r7, r5
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 1001780:	e501e004 	str	lr, [r1, #-4]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1001784:	e5803000 	str	r3, [r0]
 1001788:	e5802004 	str	r2, [r0, #4]
				g_acq_state.stats.num_acq_total++;
 100178c:	e59f3370 	ldr	r3, [pc, #880]	; 1001b04 <_acq_irq_rx_handler+0x77c>
 1001790:	e9131002 	ldmdb	r3, {r1, ip}
				g_acq_state.stats.num_pre_total++;
 1001794:	e5932000 	ldr	r2, [r3]
 1001798:	e5930004 	ldr	r0, [r3, #4]
				g_acq_state.stats.num_acq_total++;
 100179c:	e2911001 	adds	r1, r1, #1
 10017a0:	e2acc000 	adc	ip, ip, #0
				g_acq_state.stats.num_pre_total++;
 10017a4:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 10017a8:	e5031008 	str	r1, [r3, #-8]
				g_acq_state.stats.num_pre_total++;
 10017ac:	e2a01000 	adc	r1, r0, #0
				g_acq_state.stats.num_acq_total++;
 10017b0:	e503c004 	str	ip, [r3, #-4]
				g_acq_state.stats.num_pre_total++;
 10017b4:	e5832000 	str	r2, [r3]
 10017b8:	e5831004 	str	r1, [r3, #4]
				break;
 10017bc:	eaffff0d 	b	10013f8 <_acq_irq_rx_handler+0x70>
 10017c0:	e3a01000 	mov	r1, #0
	return *(volatile u32 *) Addr;
 10017c4:	e1a02003 	mov	r2, r3
	*LocalAddr = Value;
 10017c8:	e34f1bff 	movt	r1, #64511	; 0xfbff
 10017cc:	e5831010 	str	r1, [r3, #16]
	return *(volatile u32 *) Addr;
 10017d0:	e5923068 	ldr	r3, [r2, #104]	; 0x68
	while(emio_fast_read(ACQ_EMIO_DONE)) ;
 10017d4:	e2133004 	ands	r3, r3, #4
 10017d8:	1afffffc 	bne	10017d0 <_acq_irq_rx_handler+0x448>
 10017dc:	e5921068 	ldr	r1, [r2, #104]	; 0x68
					if(emio_fast_read(ACQ_EMIO_FIFO_OVERRUN)) {
 10017e0:	e3110a01 	tst	r1, #4096	; 0x1000
 10017e4:	1a00009d 	bne	1001a60 <_acq_irq_rx_handler+0x6d8>
 10017e8:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, g_acq_state.acq_current->buff_acq, \
 10017ec:	e5931008 	ldr	r1, [r3, #8]
 10017f0:	e3a03001 	mov	r3, #1
 10017f4:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 10017f8:	e59f02fc 	ldr	r0, [pc, #764]	; 1001afc <_acq_irq_rx_handler+0x774>
 10017fc:	eb000be6 	bl	100479c <XAxiDma_SimpleTransfer>
					if(error != XST_SUCCESS) {
 1001800:	e2505000 	subs	r5, r0, #0
 1001804:	1a000087 	bne	1001a28 <_acq_irq_rx_handler+0x6a0>
	*LocalAddr = Value;
 1001808:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100180c:	e3a01c01 	mov	r1, #256	; 0x100
 1001810:	e34e3000 	movt	r3, #57344	; 0xe000
 1001814:	e34f1eff 	movt	r1, #65279	; 0xfeff
 1001818:	e5831010 	str	r1, [r3, #16]
	for(i = 0; i < 10; i++) {
 100181c:	e58d5000 	str	r5, [sp]
 1001820:	e59d3000 	ldr	r3, [sp]
 1001824:	e3530009 	cmp	r3, #9
 1001828:	ca000006 	bgt	1001848 <_acq_irq_rx_handler+0x4c0>
		asm __volatile__("nop");
 100182c:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 1001830:	e59d3000 	ldr	r3, [sp]
 1001834:	e2833001 	add	r3, r3, #1
 1001838:	e58d3000 	str	r3, [sp]
 100183c:	e59d3000 	ldr	r3, [sp]
 1001840:	e3530009 	cmp	r3, #9
 1001844:	dafffff8 	ble	100182c <_acq_irq_rx_handler+0x4a4>
					g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1001848:	e59f12b0 	ldr	r1, [pc, #688]	; 1001b00 <_acq_irq_rx_handler+0x778>
 100184c:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001850:	e3a00000 	mov	r0, #0
 1001854:	e3a02b01 	mov	r2, #1024	; 0x400
 1001858:	e34e3000 	movt	r3, #57344	; 0xe000
 100185c:	e34f0eff 	movt	r0, #65279	; 0xfeff
 1001860:	e34f2bff 	movt	r2, #64511	; 0xfbff
 1001864:	e5830010 	str	r0, [r3, #16]
 1001868:	e5832010 	str	r2, [r3, #16]
 100186c:	e14120d8 	ldrd	r2, [r1, #-8]
 1001870:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
 1001874:	e0924000 	adds	r4, r2, r0
 1001878:	e2a35000 	adc	r5, r3, #0
 100187c:	e14140f8 	strd	r4, [r1, #-8]
 1001880:	eaffffc1 	b	100178c <_acq_irq_rx_handler+0x404>
					g_acq_state.stats.num_fifo_pkt_dscd++;
 1001884:	e59417e0 	ldr	r1, [r4, #2016]	; 0x7e0
 1001888:	e3a0e040 	mov	lr, #64	; 0x40
 100188c:	e594c7e4 	ldr	ip, [r4, #2020]	; 0x7e4
 1001890:	e34fefbf 	movt	lr, #65471	; 0xffbf
 1001894:	e2911001 	adds	r1, r1, #1
 1001898:	e0acc007 	adc	ip, ip, r7
 100189c:	e58417e0 	str	r1, [r4, #2016]	; 0x7e0
 10018a0:	e584c7e4 	str	ip, [r4, #2020]	; 0x7e4
 10018a4:	e583e010 	str	lr, [r3, #16]
	for(i = 0; i < 20; i++) {
 10018a8:	e58d200c 	str	r2, [sp, #12]
 10018ac:	e59d300c 	ldr	r3, [sp, #12]
 10018b0:	e3530013 	cmp	r3, #19
 10018b4:	ca000006 	bgt	10018d4 <_acq_irq_rx_handler+0x54c>
		asm __volatile__("nop");
 10018b8:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 10018bc:	e59d300c 	ldr	r3, [sp, #12]
 10018c0:	e2833001 	add	r3, r3, #1
 10018c4:	e58d300c 	str	r3, [sp, #12]
 10018c8:	e59d300c 	ldr	r3, [sp, #12]
 10018cc:	e3530013 	cmp	r3, #19
 10018d0:	dafffff8 	ble	10018b8 <_acq_irq_rx_handler+0x530>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 10018d4:	e59f522c 	ldr	r5, [pc, #556]	; 1001b08 <_acq_irq_rx_handler+0x780>
 10018d8:	e3a03a0a 	mov	r3, #40960	; 0xa000
 10018dc:	e3a02000 	mov	r2, #0
 10018e0:	e34e3000 	movt	r3, #57344	; 0xe000
 10018e4:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 10018e8:	e5832010 	str	r2, [r3, #16]
 10018ec:	e3a01042 	mov	r1, #66	; 0x42
 10018f0:	e1a00005 	mov	r0, r5
 10018f4:	eb001232 	bl	10061c4 <XGpioPs_ReadPin>
 10018f8:	e3500000 	cmp	r0, #0
 10018fc:	1afffffa 	bne	10018ec <_acq_irq_rx_handler+0x564>
					error = acq_start();
 1001900:	ebfffe34 	bl	10011d8 <acq_start>
					if(error != ACQRES_OK) {
 1001904:	e2502000 	subs	r2, r0, #0
 1001908:	0affff58 	beq	1001670 <_acq_irq_rx_handler+0x2e8>
						d_printf(D_ERROR, "acquire: unable to reset current transfer, error %d", error);
 100190c:	e306130c 	movw	r1, #25356	; 0x630c
 1001910:	e3a00004 	mov	r0, #4
 1001914:	e3401105 	movt	r1, #261	; 0x105
 1001918:	eb0006be 	bl	1003418 <d_printf>
	g_acq_state.stats.num_err_total++;
 100191c:	e59f21d0 	ldr	r2, [pc, #464]	; 1001af4 <_acq_irq_rx_handler+0x76c>
	g_acq_state.state = ACQSTATE_UNINIT;
 1001920:	e3a00000 	mov	r0, #0
 1001924:	e3a01000 	mov	r1, #0
 1001928:	e1c400f0 	strd	r0, [r4]
	g_acq_state.stats.num_err_total++;
 100192c:	e5123008 	ldr	r3, [r2, #-8]
 1001930:	e5121004 	ldr	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1001934:	e59f01c0 	ldr	r0, [pc, #448]	; 1001afc <_acq_irq_rx_handler+0x774>
	g_acq_state.stats.num_err_total++;
 1001938:	e2933001 	adds	r3, r3, #1
 100193c:	e2a11000 	adc	r1, r1, #0
 1001940:	e5023008 	str	r3, [r2, #-8]
 1001944:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1001948:	eafffebb 	b	100143c <_acq_irq_rx_handler+0xb4>
 100194c:	e3a03040 	mov	r3, #64	; 0x40
 1001950:	e34f3fbf 	movt	r3, #65471	; 0xffbf
 1001954:	e5853010 	str	r3, [r5, #16]
	for(i = 0; i < 20; i++) {
 1001958:	e58d6004 	str	r6, [sp, #4]
 100195c:	e59d3004 	ldr	r3, [sp, #4]
 1001960:	e3530013 	cmp	r3, #19
 1001964:	ca000006 	bgt	1001984 <_acq_irq_rx_handler+0x5fc>
		asm __volatile__("nop");
 1001968:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 100196c:	e59d3004 	ldr	r3, [sp, #4]
 1001970:	e2833001 	add	r3, r3, #1
 1001974:	e58d3004 	str	r3, [sp, #4]
 1001978:	e59d3004 	ldr	r3, [sp, #4]
 100197c:	e3530013 	cmp	r3, #19
 1001980:	dafffff8 	ble	1001968 <_acq_irq_rx_handler+0x5e0>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 1001984:	e59f517c 	ldr	r5, [pc, #380]	; 1001b08 <_acq_irq_rx_handler+0x780>
 1001988:	e3a03a0a 	mov	r3, #40960	; 0xa000
 100198c:	e3a02000 	mov	r2, #0
 1001990:	e34e3000 	movt	r3, #57344	; 0xe000
 1001994:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 1001998:	e5832010 	str	r2, [r3, #16]
 100199c:	e3a01042 	mov	r1, #66	; 0x42
 10019a0:	e1a00005 	mov	r0, r5
 10019a4:	eb001206 	bl	10061c4 <XGpioPs_ReadPin>
 10019a8:	e3500000 	cmp	r0, #0
 10019ac:	1afffffa 	bne	100199c <_acq_irq_rx_handler+0x614>
					g_acq_state.stats.num_fifo_full++;
 10019b0:	e59f2154 	ldr	r2, [pc, #340]	; 1001b0c <_acq_irq_rx_handler+0x784>
					g_acq_state.state = ACQSTATE_PREP;
 10019b4:	e3a01001 	mov	r1, #1
 10019b8:	e3a00002 	mov	r0, #2
 10019bc:	e1c400f0 	strd	r0, [r4]
					g_acq_state.stats.num_fifo_full++;
 10019c0:	e5123008 	ldr	r3, [r2, #-8]
 10019c4:	e5121004 	ldr	r1, [r2, #-4]
 10019c8:	e2933001 	adds	r3, r3, #1
 10019cc:	e2a11000 	adc	r1, r1, #0
 10019d0:	e5023008 	str	r3, [r2, #-8]
 10019d4:	e5021004 	str	r1, [r2, #-4]
 10019d8:	eafffeaf 	b	100149c <_acq_irq_rx_handler+0x114>
	g_acq_state.stats.num_err_total++;
 10019dc:	e2842e7b 	add	r2, r4, #1968	; 0x7b0
 10019e0:	e59437a8 	ldr	r3, [r4, #1960]	; 0x7a8
 10019e4:	e5121004 	ldr	r1, [r2, #-4]
	g_acq_state.state = ACQSTATE_UNINIT;
 10019e8:	e1a00004 	mov	r0, r4
 10019ec:	e3a05000 	mov	r5, #0
 10019f0:	e3a04000 	mov	r4, #0
	g_acq_state.stats.num_err_total++;
 10019f4:	e2933001 	adds	r3, r3, #1
	g_acq_state.state = ACQSTATE_UNINIT;
 10019f8:	e0c040f8 	strd	r4, [r0], #8
	g_acq_state.stats.num_err_total++;
 10019fc:	e2a11000 	adc	r1, r1, #0
 1001a00:	e5023008 	str	r3, [r2, #-8]
 1001a04:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1001a08:	eb000987 	bl	100402c <XAxiDma_Reset>
					d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001a0c:	e1a02006 	mov	r2, r6
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001a10:	e30612a8 	movw	r1, #25256	; 0x62a8
 1001a14:	e3a00004 	mov	r0, #4
 1001a18:	e3401105 	movt	r1, #261	; 0x105
}
 1001a1c:	e28dd010 	add	sp, sp, #16
 1001a20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001a24:	ea00067b 	b	1003418 <d_printf>
	g_acq_state.stats.num_err_total++;
 1001a28:	e59f20c4 	ldr	r2, [pc, #196]	; 1001af4 <_acq_irq_rx_handler+0x76c>
	g_acq_state.state = ACQSTATE_UNINIT;
 1001a2c:	e3a00000 	mov	r0, #0
 1001a30:	e3a01000 	mov	r1, #0
 1001a34:	e1c400f0 	strd	r0, [r4]
	g_acq_state.stats.num_err_total++;
 1001a38:	e5123008 	ldr	r3, [r2, #-8]
 1001a3c:	e5121004 	ldr	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1001a40:	e59f00b4 	ldr	r0, [pc, #180]	; 1001afc <_acq_irq_rx_handler+0x774>
	g_acq_state.stats.num_err_total++;
 1001a44:	e2933001 	adds	r3, r3, #1
 1001a48:	e2a11000 	adc	r1, r1, #0
 1001a4c:	e5023008 	str	r3, [r2, #-8]
 1001a50:	e5021004 	str	r1, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1001a54:	eb000974 	bl	100402c <XAxiDma_Reset>
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1001a58:	e1a02005 	mov	r2, r5
 1001a5c:	eaffffeb 	b	1001a10 <_acq_irq_rx_handler+0x688>
 1001a60:	e3a01040 	mov	r1, #64	; 0x40
 1001a64:	e34f1fbf 	movt	r1, #65471	; 0xffbf
 1001a68:	e5821010 	str	r1, [r2, #16]
	for(i = 0; i < 20; i++) {
 1001a6c:	e58d3008 	str	r3, [sp, #8]
 1001a70:	e59d3008 	ldr	r3, [sp, #8]
 1001a74:	e3530013 	cmp	r3, #19
 1001a78:	ca000006 	bgt	1001a98 <_acq_irq_rx_handler+0x710>
		asm __volatile__("nop");
 1001a7c:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 1001a80:	e59d3008 	ldr	r3, [sp, #8]
 1001a84:	e2833001 	add	r3, r3, #1
 1001a88:	e58d3008 	str	r3, [sp, #8]
 1001a8c:	e59d3008 	ldr	r3, [sp, #8]
 1001a90:	e3530013 	cmp	r3, #19
 1001a94:	dafffff8 	ble	1001a7c <_acq_irq_rx_handler+0x6f4>
	while(XGpioPs_ReadPin(&g_hal.xgpio_ps, ACQ_EMIO_FIFO_OVERRUN)) ;
 1001a98:	e59f5068 	ldr	r5, [pc, #104]	; 1001b08 <_acq_irq_rx_handler+0x780>
 1001a9c:	e3a03a0a 	mov	r3, #40960	; 0xa000
 1001aa0:	e3a02000 	mov	r2, #0
 1001aa4:	e34e3000 	movt	r3, #57344	; 0xe000
 1001aa8:	e34f2fbf 	movt	r2, #65471	; 0xffbf
 1001aac:	e5832010 	str	r2, [r3, #16]
 1001ab0:	e3a01042 	mov	r1, #66	; 0x42
 1001ab4:	e1a00005 	mov	r0, r5
 1001ab8:	eb0011c1 	bl	10061c4 <XGpioPs_ReadPin>
 1001abc:	e3500000 	cmp	r0, #0
 1001ac0:	1afffffa 	bne	1001ab0 <_acq_irq_rx_handler+0x728>
						g_acq_state.stats.num_fifo_full++;
 1001ac4:	e59f1040 	ldr	r1, [pc, #64]	; 1001b0c <_acq_irq_rx_handler+0x784>
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001ac8:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
						g_acq_state.stats.num_fifo_full++;
 1001acc:	e5112008 	ldr	r2, [r1, #-8]
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001ad0:	e1d3c1b0 	ldrh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 1001ad4:	e5110004 	ldr	r0, [r1, #-4]
 1001ad8:	e2922001 	adds	r2, r2, #1
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001adc:	e38cc002 	orr	ip, ip, #2
						g_acq_state.stats.num_fifo_full++;
 1001ae0:	e2a00000 	adc	r0, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1001ae4:	e1c3c1b0 	strh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 1001ae8:	e5012008 	str	r2, [r1, #-8]
 1001aec:	e5010004 	str	r0, [r1, #-4]
 1001af0:	eaffff3d 	b	10017ec <_acq_irq_rx_handler+0x464>
 1001af4:	010a1a80 	.word	0x010a1a80
 1001af8:	010a1a70 	.word	0x010a1a70
 1001afc:	010a12d8 	.word	0x010a12d8
 1001b00:	010a1a90 	.word	0x010a1a90
 1001b04:	010a1a60 	.word	0x010a1a60
 1001b08:	010a1b4c 	.word	0x010a1b4c
 1001b0c:	010a1ab0 	.word	0x010a1ab0

01001b10 <acq_is_done>:
/*
 * Returns TRUE if the requested acquisition is complete.
 */
bool acq_is_done()
{
	return (g_acq_state.state == ACQSTATE_DONE);
 1001b10:	e30132d0 	movw	r3, #4816	; 0x12d0
 1001b14:	e340310a 	movt	r3, #266	; 0x10a
 1001b18:	e5930000 	ldr	r0, [r3]
}
 1001b1c:	e2400005 	sub	r0, r0, #5
 1001b20:	e16f0f10 	clz	r0, r0
 1001b24:	e1a002a0 	lsr	r0, r0, #5
 1001b28:	e12fff1e 	bx	lr

01001b2c <acq_force_stop>:
 *
 * @return	ACQRES_DMA_FAIL if DMA task could not be stopped;
 * 			ACQRES_SUCCESS if stop signal sent.
 */
int acq_force_stop()
{
 1001b2c:	e92d4070 	push	{r4, r5, r6, lr}
	int error;

	error = XAxiDma_Pause(&g_acq_state.dma);
 1001b30:	e59f505c 	ldr	r5, [pc, #92]	; 1001b94 <acq_force_stop+0x68>
 1001b34:	e1a00005 	mov	r0, r5
 1001b38:	eb000a22 	bl	10043c8 <XAxiDma_Pause>

	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);		// AXI bus activity stopped
 1001b3c:	e3a02000 	mov	r2, #0
	error = XAxiDma_Pause(&g_acq_state.dma);
 1001b40:	e1a04000 	mov	r4, r0
	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);		// AXI bus activity stopped
 1001b44:	e3a01040 	mov	r1, #64	; 0x40
 1001b48:	e59f0048 	ldr	r0, [pc, #72]	; 1001b98 <acq_force_stop+0x6c>
 1001b4c:	eb0011d5 	bl	10062a8 <XGpioPs_WritePin>

	if(error != XST_SUCCESS) {
 1001b50:	e3540000 	cmp	r4, #0
 1001b54:	1a000007 	bne	1001b78 <acq_force_stop+0x4c>
		d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
		return ACQRES_DMA_FAIL;
	}

	XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);
 1001b58:	e3a02001 	mov	r2, #1
 1001b5c:	e3a01037 	mov	r1, #55	; 0x37
 1001b60:	e59f0030 	ldr	r0, [pc, #48]	; 1001b98 <acq_force_stop+0x6c>
 1001b64:	eb0011cf 	bl	10062a8 <XGpioPs_WritePin>
	g_acq_state.state = ACQSTATE_STOPPED;
 1001b68:	e3a03001 	mov	r3, #1
 1001b6c:	e5053008 	str	r3, [r5, #-8]

	return ACQRES_OK;
}
 1001b70:	e1a00004 	mov	r0, r4
 1001b74:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1001b78:	e306127c 	movw	r1, #25212	; 0x627c
 1001b7c:	e1a02004 	mov	r2, r4
 1001b80:	e3401105 	movt	r1, #261	; 0x105
 1001b84:	e3a00004 	mov	r0, #4
 1001b88:	eb000622 	bl	1003418 <d_printf>
		return ACQRES_DMA_FAIL;
 1001b8c:	e3e04004 	mvn	r4, #4
 1001b90:	eafffff6 	b	1001b70 <acq_force_stop+0x44>
 1001b94:	010a12d8 	.word	0x010a12d8
 1001b98:	010a1b4c 	.word	0x010a1b4c

01001b9c <acq_debug_dump>:

/*
 * Dump state of acquire engine for debugging purposes.
 */
void acq_debug_dump()
{
 1001b9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t sample_delta;
	uint32_t msb, lsb;
	float time_delta_us, acq_rate = NAN, sample_rate = NAN;

	// Calculate acquisition rate if last debug timer is set
	if(g_acq_state.last_debug_timer != 0) {
 1001ba0:	e30142d0 	movw	r4, #4816	; 0x12d0
 1001ba4:	e340410a 	movt	r4, #266	; 0x10a
{
 1001ba8:	ed2d8b02 	vpush	{d8}
	if(g_acq_state.last_debug_timer != 0) {
 1001bac:	e2845e7f 	add	r5, r4, #2032	; 0x7f0
{
 1001bb0:	e24dde76 	sub	sp, sp, #1888	; 0x760
	if(g_acq_state.last_debug_timer != 0) {
 1001bb4:	e14500d8 	ldrd	r0, [r5, #-8]
{
 1001bb8:	e24dd00c 	sub	sp, sp, #12
	void *sp = NULL;  // approximately the stack
 1001bbc:	e3a03000 	mov	r3, #0
 1001bc0:	e58d375c 	str	r3, [sp, #1884]	; 0x75c
	if(g_acq_state.last_debug_timer != 0) {
 1001bc4:	e1902001 	orrs	r2, r0, r1
 1001bc8:	1a0000f0 	bne	1001f90 <acq_debug_dump+0x3f4>
 1001bcc:	e284be79 	add	fp, r4, #1936	; 0x790
 1001bd0:	e284ad1f 	add	sl, r4, #1984	; 0x7c0
 1001bd4:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1001bd8:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
			}
		}
	}

	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **", &g_acq_state);
 1001bdc:	e30122d0 	movw	r2, #4816	; 0x12d0
 1001be0:	e30613c0 	movw	r1, #25536	; 0x63c0
 1001be4:	e340210a 	movt	r2, #266	; 0x10a
 1001be8:	e3401105 	movt	r1, #261	; 0x105
 1001bec:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "");
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts", (void*)&sp);
	d_printf(D_INFO, "");
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x", g_acq_state.acq_mode_flags);
	d_printf(D_INFO, "state                 = %d [%s]", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 1001bf0:	e30872f4 	movw	r7, #33524	; 0x82f4
	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **", &g_acq_state);
 1001bf4:	eb000607 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001bf8:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001bfc:	e3a00002 	mov	r0, #2
 1001c00:	e3401105 	movt	r1, #261	; 0x105
	d_printf(D_INFO, "state                 = %d [%s]", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 1001c04:	e3407105 	movt	r7, #261	; 0x105
	d_printf(D_INFO, "");
 1001c08:	eb000602 	bl	1003418 <d_printf>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts", (void*)&sp);
 1001c0c:	e28d2e75 	add	r2, sp, #1872	; 0x750
 1001c10:	e30613f0 	movw	r1, #25584	; 0x63f0
 1001c14:	e282200c 	add	r2, r2, #12
 1001c18:	e3401105 	movt	r1, #261	; 0x105
 1001c1c:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "sub_state             = %d [%s]", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
	d_printf(D_INFO, "acq_current           = 0x%08x", g_acq_state.acq_current);
	d_printf(D_INFO, "acq_first             = 0x%08x", g_acq_state.acq_first);
	d_printf(D_INFO, "dma                   = 0x%08x", g_acq_state.dma);
 1001c20:	e59f64c0 	ldr	r6, [pc, #1216]	; 10020e8 <acq_debug_dump+0x54c>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts", (void*)&sp);
 1001c24:	eb0005fb 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001c28:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001c2c:	e3a00002 	mov	r0, #2
 1001c30:	e3401105 	movt	r1, #261	; 0x105
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
	d_printf(D_INFO, "");
	d_printf(D_INFO, "s.num_acq_total       = %llu", g_acq_state.stats.num_acq_total);
	d_printf(D_INFO, "s.num_alloc_err_total = %llu", g_acq_state.stats.num_alloc_err_total);
	d_printf(D_INFO, "s.num_alloc_total     = %llu", g_acq_state.stats.num_alloc_total);
	d_printf(D_INFO, "s.num_err_total       = %llu", g_acq_state.stats.num_err_total);
 1001c34:	e59f84b0 	ldr	r8, [pc, #1200]	; 10020ec <acq_debug_dump+0x550>
	d_printf(D_INFO, "");
 1001c38:	eb0005f6 	bl	1003418 <d_printf>
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x", g_acq_state.acq_mode_flags);
 1001c3c:	e3061420 	movw	r1, #25632	; 0x6420
 1001c40:	e594275c 	ldr	r2, [r4, #1884]	; 0x75c
 1001c44:	e3401105 	movt	r1, #261	; 0x105
 1001c48:	e3a00002 	mov	r0, #2
 1001c4c:	eb0005f1 	bl	1003418 <d_printf>
	d_printf(D_INFO, "state                 = %d [%s]", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 1001c50:	e5942000 	ldr	r2, [r4]
 1001c54:	e3061440 	movw	r1, #25664	; 0x6440
 1001c58:	e3401105 	movt	r1, #261	; 0x105
 1001c5c:	e3a00002 	mov	r0, #2
 1001c60:	e7973102 	ldr	r3, [r7, r2, lsl #2]
 1001c64:	eb0005eb 	bl	1003418 <d_printf>
	d_printf(D_INFO, "sub_state             = %d [%s]", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
 1001c68:	e5943004 	ldr	r3, [r4, #4]
 1001c6c:	e3a00002 	mov	r0, #2
 1001c70:	e3061460 	movw	r1, #25696	; 0x6460
 1001c74:	e3401105 	movt	r1, #261	; 0x105
 1001c78:	e1a02003 	mov	r2, r3
 1001c7c:	e0877013 	add	r7, r7, r3, lsl r0
 1001c80:	e5973018 	ldr	r3, [r7, #24]
 1001c84:	eb0005e3 	bl	1003418 <d_printf>
	d_printf(D_INFO, "acq_current           = 0x%08x", g_acq_state.acq_current);
 1001c88:	e3061480 	movw	r1, #25728	; 0x6480
 1001c8c:	e5942854 	ldr	r2, [r4, #2132]	; 0x854
 1001c90:	e3401105 	movt	r1, #261	; 0x105
 1001c94:	e3a00002 	mov	r0, #2
 1001c98:	eb0005de 	bl	1003418 <d_printf>
	d_printf(D_INFO, "acq_first             = 0x%08x", g_acq_state.acq_first);
 1001c9c:	e30614a0 	movw	r1, #25760	; 0x64a0
 1001ca0:	e5942850 	ldr	r2, [r4, #2128]	; 0x850
 1001ca4:	e3401105 	movt	r1, #261	; 0x105
 1001ca8:	e3a00002 	mov	r0, #2
 1001cac:	eb0005d9 	bl	1003418 <d_printf>
	d_printf(D_INFO, "dma                   = 0x%08x", g_acq_state.dma);
 1001cb0:	e2861008 	add	r1, r6, #8
 1001cb4:	e3002748 	movw	r2, #1864	; 0x748
 1001cb8:	e1a0000d 	mov	r0, sp
 1001cbc:	eb00278f 	bl	100bb00 <memcpy>
 1001cc0:	e30614c0 	movw	r1, #25792	; 0x64c0
 1001cc4:	e896000c 	ldm	r6, {r2, r3}
 1001cc8:	e3401105 	movt	r1, #261	; 0x105
 1001ccc:	e3a00002 	mov	r0, #2
 1001cd0:	eb0005d0 	bl	1003418 <d_printf>
	d_printf(D_INFO, "dma_config            = 0x%08x", g_acq_state.dma_config);
 1001cd4:	e30614e0 	movw	r1, #25824	; 0x64e0
 1001cd8:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
 1001cdc:	e3401105 	movt	r1, #261	; 0x105
 1001ce0:	e3a00002 	mov	r0, #2
 1001ce4:	eb0005cb 	bl	1003418 <d_printf>
	d_printf(D_INFO, "demux_reg             = 0x%02x", g_acq_state.demux_reg);
 1001ce8:	e3061500 	movw	r1, #25856	; 0x6500
 1001cec:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
 1001cf0:	e3401105 	movt	r1, #261	; 0x105
 1001cf4:	e3a00002 	mov	r0, #2
 1001cf8:	eb0005c6 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001cfc:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001d00:	e3a00002 	mov	r0, #2
 1001d04:	e3401105 	movt	r1, #261	; 0x105
 1001d08:	eb0005c2 	bl	1003418 <d_printf>
	d_printf(D_INFO, "pre_buffsz            = %d bytes (0x%08x)", g_acq_state.pre_buffsz, g_acq_state.pre_buffsz);
 1001d0c:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
 1001d10:	e3061520 	movw	r1, #25888	; 0x6520
 1001d14:	e3401105 	movt	r1, #261	; 0x105
 1001d18:	e3a00002 	mov	r0, #2
 1001d1c:	e1a02003 	mov	r2, r3
 1001d20:	eb0005bc 	bl	1003418 <d_printf>
	d_printf(D_INFO, "post_buffsz           = %d bytes (0x%08x)", g_acq_state.post_buffsz, g_acq_state.post_buffsz);
 1001d24:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
 1001d28:	e306154c 	movw	r1, #25932	; 0x654c
 1001d2c:	e3401105 	movt	r1, #261	; 0x105
 1001d30:	e3a00002 	mov	r0, #2
 1001d34:	e1a02003 	mov	r2, r3
 1001d38:	eb0005b6 	bl	1003418 <d_printf>
	d_printf(D_INFO, "total_buffsz          = %d bytes (0x%08x)", g_acq_state.total_buffsz, g_acq_state.total_buffsz);
 1001d3c:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
 1001d40:	e3061578 	movw	r1, #25976	; 0x6578
 1001d44:	e3401105 	movt	r1, #261	; 0x105
 1001d48:	e3a00002 	mov	r0, #2
 1001d4c:	e1a02003 	mov	r2, r3
 1001d50:	eb0005b0 	bl	1003418 <d_printf>
	d_printf(D_INFO, "pre_sampct            = %d wavewords", g_acq_state.pre_sampct);
 1001d54:	e30615a4 	movw	r1, #26020	; 0x65a4
 1001d58:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
 1001d5c:	e3401105 	movt	r1, #261	; 0x105
 1001d60:	e3a00002 	mov	r0, #2
 1001d64:	eb0005ab 	bl	1003418 <d_printf>
	d_printf(D_INFO, "post_sampct           = %d wavewords", g_acq_state.post_sampct);
 1001d68:	e30615cc 	movw	r1, #26060	; 0x65cc
 1001d6c:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
 1001d70:	e3401105 	movt	r1, #261	; 0x105
 1001d74:	e3a00002 	mov	r0, #2
 1001d78:	eb0005a6 	bl	1003418 <d_printf>
	d_printf(D_INFO, "num_acq_request       = %d waves", g_acq_state.num_acq_request);
 1001d7c:	e30615f4 	movw	r1, #26100	; 0x65f4
 1001d80:	e5942770 	ldr	r2, [r4, #1904]	; 0x770
 1001d84:	e3401105 	movt	r1, #261	; 0x105
 1001d88:	e3a00002 	mov	r0, #2
 1001d8c:	eb0005a1 	bl	1003418 <d_printf>
	d_printf(D_INFO, "num_acq_made          = %d waves", g_acq_state.num_acq_made);
 1001d90:	e3061618 	movw	r1, #26136	; 0x6618
 1001d94:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
 1001d98:	e3401105 	movt	r1, #261	; 0x105
 1001d9c:	e3a00002 	mov	r0, #2
 1001da0:	eb00059c 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001da4:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001da8:	e3a00002 	mov	r0, #2
 1001dac:	e3401105 	movt	r1, #261	; 0x105
 1001db0:	eb000598 	bl	1003418 <d_printf>
	d_printf(D_INFO, "acq_current->flags    = 0x%04x", g_acq_state.acq_current->flags);
 1001db4:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
 1001db8:	e306163c 	movw	r1, #26172	; 0x663c
 1001dbc:	e3401105 	movt	r1, #261	; 0x105
 1001dc0:	e3a00002 	mov	r0, #2
 1001dc4:	e1d321b0 	ldrh	r2, [r3, #16]
 1001dc8:	eb000592 	bl	1003418 <d_printf>
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
 1001dcc:	e5943854 	ldr	r3, [r4, #2132]	; 0x854
 1001dd0:	e306165c 	movw	r1, #26204	; 0x665c
 1001dd4:	e3401105 	movt	r1, #261	; 0x105
 1001dd8:	e3a00002 	mov	r0, #2
 1001ddc:	e593300c 	ldr	r3, [r3, #12]
 1001de0:	e1a02003 	mov	r2, r3
 1001de4:	eb00058b 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001de8:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001dec:	e3a00002 	mov	r0, #2
 1001df0:	e3401105 	movt	r1, #261	; 0x105
 1001df4:	eb000587 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_acq_total       = %llu", g_acq_state.stats.num_acq_total);
 1001df8:	e3061680 	movw	r1, #26240	; 0x6680
 1001dfc:	e14b20d8 	ldrd	r2, [fp, #-8]
 1001e00:	e3401105 	movt	r1, #261	; 0x105
 1001e04:	e3a00002 	mov	r0, #2
 1001e08:	eb000582 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_alloc_err_total = %llu", g_acq_state.stats.num_alloc_err_total);
 1001e0c:	e30616a0 	movw	r1, #26272	; 0x66a0
 1001e10:	e1ca20d0 	ldrd	r2, [sl]
 1001e14:	e3401105 	movt	r1, #261	; 0x105
 1001e18:	e3a00002 	mov	r0, #2
 1001e1c:	eb00057d 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_alloc_total     = %llu", g_acq_state.stats.num_alloc_total);
 1001e20:	e2883020 	add	r3, r8, #32
 1001e24:	e30616c0 	movw	r1, #26304	; 0x66c0
 1001e28:	e1a04003 	mov	r4, r3
 1001e2c:	e3401105 	movt	r1, #261	; 0x105
 1001e30:	e1c821d8 	ldrd	r2, [r8, #24]
 1001e34:	e3a00002 	mov	r0, #2
 1001e38:	eb000576 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_err_total       = %llu", g_acq_state.stats.num_err_total);
 1001e3c:	e30616e0 	movw	r1, #26336	; 0x66e0
 1001e40:	e14820d8 	ldrd	r2, [r8, #-8]
 1001e44:	e3401105 	movt	r1, #261	; 0x105
 1001e48:	e3a00002 	mov	r0, #2
 1001e4c:	eb000571 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_post_total      = %llu", g_acq_state.stats.num_post_total);
 1001e50:	e3061700 	movw	r1, #26368	; 0x6700
 1001e54:	e14821d0 	ldrd	r2, [r8, #-16]
 1001e58:	e3401105 	movt	r1, #261	; 0x105
 1001e5c:	e3a00002 	mov	r0, #2
 1001e60:	eb00056c 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_pre_total       = %llu", g_acq_state.stats.num_pre_total);
 1001e64:	e3061720 	movw	r1, #26400	; 0x6720
 1001e68:	e1cb20d0 	ldrd	r2, [fp]
 1001e6c:	e3401105 	movt	r1, #261	; 0x105
 1001e70:	e3a00002 	mov	r0, #2
 1001e74:	eb000567 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_pre_fill_total  = %llu", g_acq_state.stats.num_pre_fill_total);
 1001e78:	e3061740 	movw	r1, #26432	; 0x6740
 1001e7c:	e14821d8 	ldrd	r2, [r8, #-24]	; 0xffffffe8
 1001e80:	e3401105 	movt	r1, #261	; 0x105
 1001e84:	e3a00002 	mov	r0, #2
 1001e88:	eb000562 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_samples         = %llu", g_acq_state.stats.num_samples);
 1001e8c:	e3061760 	movw	r1, #26464	; 0x6760
 1001e90:	e1c820d0 	ldrd	r2, [r8]
 1001e94:	e3401105 	movt	r1, #261	; 0x105
 1001e98:	e3a00002 	mov	r0, #2
 1001e9c:	eb00055d 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_samples_raw     = %llu", g_acq_state.stats.num_samples_raw);
 1001ea0:	e3061780 	movw	r1, #26496	; 0x6780
 1001ea4:	e14a20d8 	ldrd	r2, [sl, #-8]
 1001ea8:	e3401105 	movt	r1, #261	; 0x105
 1001eac:	e3a00002 	mov	r0, #2
 1001eb0:	eb000558 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_irqs            = %llu", g_acq_state.stats.num_irqs);
 1001eb4:	e30617a0 	movw	r1, #26528	; 0x67a0
 1001eb8:	e1c420d0 	ldrd	r2, [r4]
 1001ebc:	e3401105 	movt	r1, #261	; 0x105
 1001ec0:	e3a00002 	mov	r0, #2
 1001ec4:	eb000553 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_fifo_full       = %llu", g_acq_state.stats.num_fifo_full);
 1001ec8:	e30617c0 	movw	r1, #26560	; 0x67c0
 1001ecc:	e1c822d8 	ldrd	r2, [r8, #40]	; 0x28
 1001ed0:	e3401105 	movt	r1, #261	; 0x105
 1001ed4:	e3a00002 	mov	r0, #2
 1001ed8:	eb00054e 	bl	1003418 <d_printf>
	d_printf(D_INFO, "s.num_fifo_pkt_dscd   = %llu", g_acq_state.stats.num_fifo_pkt_dscd);
 1001edc:	e30617e0 	movw	r1, #26592	; 0x67e0
 1001ee0:	e1c823d0 	ldrd	r2, [r8, #48]	; 0x30
 1001ee4:	e3401105 	movt	r1, #261	; 0x105
 1001ee8:	e3a00002 	mov	r0, #2
 1001eec:	eb000549 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001ef0:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001ef4:	e3a00002 	mov	r0, #2
 1001ef8:	e3401105 	movt	r1, #261	; 0x105
 1001efc:	eb000545 	bl	1003418 <d_printf>
	d_printf(D_INFO, "Approx acq. rate      = %d acq/s     ", (int)acq_rate);
 1001f00:	e3061800 	movw	r1, #26624	; 0x6800
 1001f04:	e59d274c 	ldr	r2, [sp, #1868]	; 0x74c
 1001f08:	e3401105 	movt	r1, #261	; 0x105
 1001f0c:	e3a00002 	mov	r0, #2
 1001f10:	eb000540 	bl	1003418 <d_printf>
	d_printf(D_INFO, "Approx sample rate    = %d Ksa/s     ", (int)sample_rate);
 1001f14:	e3061828 	movw	r1, #26664	; 0x6828
 1001f18:	e59d2748 	ldr	r2, [sp, #1864]	; 0x748
 1001f1c:	e3401105 	movt	r1, #261	; 0x105
 1001f20:	e3a00002 	mov	r0, #2
 1001f24:	eb00053b 	bl	1003418 <d_printf>
	d_printf(D_INFO, "Debug delta           = %d us     ", (int)time_delta_us);
 1001f28:	eefd7ac8 	vcvt.s32.f32	s15, s16
 1001f2c:	e3061850 	movw	r1, #26704	; 0x6850
 1001f30:	e3401105 	movt	r1, #261	; 0x105
 1001f34:	e3a00002 	mov	r0, #2
 1001f38:	ee172a90 	vmov	r2, s15
 1001f3c:	eb000535 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1001f40:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1001f44:	e3a00002 	mov	r0, #2
 1001f48:	e3401105 	movt	r1, #261	; 0x105
 1001f4c:	eb000531 	bl	1003418 <d_printf>
	d_printf(D_INFO, "** End **");
 1001f50:	e3061874 	movw	r1, #26740	; 0x6874
 1001f54:	e3a00002 	mov	r0, #2
 1001f58:	e3401105 	movt	r1, #261	; 0x105
 1001f5c:	eb00052d 	bl	1003418 <d_printf>

	// Save last state...
	g_acq_state.stat_last = g_acq_state.stats;
 1001f60:	e2861d1e 	add	r1, r6, #1920	; 0x780
 1001f64:	e3a02060 	mov	r2, #96	; 0x60
 1001f68:	e2810068 	add	r0, r1, #104	; 0x68
 1001f6c:	eb0026e3 	bl	100bb00 <memcpy>
	g_acq_state.last_debug_timer = timer_value;
 1001f70:	e59d3750 	ldr	r3, [sp, #1872]	; 0x750
 1001f74:	e5053008 	str	r3, [r5, #-8]
 1001f78:	e59d3754 	ldr	r3, [sp, #1876]	; 0x754
 1001f7c:	e5053004 	str	r3, [r5, #-4]
}
 1001f80:	e28dde76 	add	sp, sp, #1888	; 0x760
 1001f84:	e28dd00c 	add	sp, sp, #12
 1001f88:	ecbd8b02 	vpop	{d8}
 1001f8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_read_global_timer(&lsb, &msb);
 1001f90:	e28d0e76 	add	r0, sp, #1888	; 0x760
 1001f94:	e28d1e76 	add	r1, sp, #1888	; 0x760
 1001f98:	e2800004 	add	r0, r0, #4
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001f9c:	e284be79 	add	fp, r4, #1936	; 0x790
		d_read_global_timer(&lsb, &msb);
 1001fa0:	eb0006d1 	bl	1003aec <d_read_global_timer>
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001fa4:	e59d3764 	ldr	r3, [sp, #1892]	; 0x764
 1001fa8:	e284ad1f 	add	sl, r4, #1984	; 0x7c0
		time_delta = timer_value - g_acq_state.last_debug_timer;
 1001fac:	e5150008 	ldr	r0, [r5, #-8]
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001fb0:	e59d2760 	ldr	r2, [sp, #1888]	; 0x760
		time_delta = timer_value - g_acq_state.last_debug_timer;
 1001fb4:	e5151004 	ldr	r1, [r5, #-4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001fb8:	e0530000 	subs	r0, r3, r0
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001fbc:	e58d3750 	str	r3, [sp, #1872]	; 0x750
 1001fc0:	e58d2754 	str	r2, [sp, #1876]	; 0x754
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001fc4:	e0c21001 	sbc	r1, r2, r1
 1001fc8:	fa002044 	blx	100a0e0 <__aeabi_ul2d>
 1001fcc:	eddf0b41 	vldr	d16, [pc, #260]	; 10020d8 <acq_debug_dump+0x53c>
 1001fd0:	ec410b31 	vmov	d17, r0, r1
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001fd4:	e51bc008 	ldr	ip, [fp, #-8]
 1001fd8:	e5952000 	ldr	r2, [r5]
 1001fdc:	e51be004 	ldr	lr, [fp, #-4]
 1001fe0:	e5951004 	ldr	r1, [r5, #4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001fe4:	ee610ba0 	vmul.f64	d16, d17, d16
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001fe8:	e05c6002 	subs	r6, ip, r2
 1001fec:	e0ce7001 	sbc	r7, lr, r1
		if(acq_delta > 0) {
 1001ff0:	e1963007 	orrs	r3, r6, r7
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001ff4:	eeb78be0 	vcvt.f32.f64	s16, d16
		if(acq_delta > 0) {
 1001ff8:	1a000019 	bne	1002064 <acq_debug_dump+0x4c8>
 1001ffc:	e51a2008 	ldr	r2, [sl, #-8]
 1002000:	e5943820 	ldr	r3, [r4, #2080]	; 0x820
 1002004:	e5941824 	ldr	r1, [r4, #2084]	; 0x824
 1002008:	e51a0004 	ldr	r0, [sl, #-4]
 100200c:	e0528003 	subs	r8, r2, r3
 1002010:	e0c09001 	sbc	r9, r0, r1
		if(sample_delta > 0) {
 1002014:	e1983009 	orrs	r3, r8, r9
 1002018:	0a000029 	beq	10020c4 <acq_debug_dump+0x528>
			if(time_delta_us > 0) {
 100201c:	eeb58ac0 	vcmpe.f32	s16, #0.0
 1002020:	e3a03000 	mov	r3, #0
 1002024:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002028:	d58d3748 	strle	r3, [sp, #1864]	; 0x748
 100202c:	d58d374c 	strle	r3, [sp, #1868]	; 0x74c
 1002030:	dafffee9 	ble	1001bdc <acq_debug_dump+0x40>
 1002034:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
 1002038:	e1a00008 	mov	r0, r8
 100203c:	e1a01009 	mov	r1, r9
 1002040:	fa0020a5 	blx	100a2dc <__aeabi_ul2f>
 1002044:	ee070a90 	vmov	s15, r0
 1002048:	ed9f7a24 	vldr	s14, [pc, #144]	; 10020e0 <acq_debug_dump+0x544>
 100204c:	eec77a88 	vdiv.f32	s15, s15, s16
 1002050:	ee677a87 	vmul.f32	s15, s15, s14
 1002054:	eefd7ae7 	vcvt.s32.f32	s15, s15
 1002058:	ee173a90 	vmov	r3, s15
 100205c:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1002060:	eafffedd 	b	1001bdc <acq_debug_dump+0x40>
			if(time_delta_us > 0) {
 1002064:	e51a1008 	ldr	r1, [sl, #-8]
 1002068:	e5942820 	ldr	r2, [r4, #2080]	; 0x820
 100206c:	e5940824 	ldr	r0, [r4, #2084]	; 0x824
 1002070:	e51ac004 	ldr	ip, [sl, #-4]
 1002074:	e0518002 	subs	r8, r1, r2
 1002078:	eeb58ac0 	vcmpe.f32	s16, #0.0
 100207c:	e0cc9000 	sbc	r9, ip, r0
 1002080:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002084:	daffffe2 	ble	1002014 <acq_debug_dump+0x478>
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 1002088:	e1a00006 	mov	r0, r6
 100208c:	e1a01007 	mov	r1, r7
 1002090:	fa002091 	blx	100a2dc <__aeabi_ul2f>
 1002094:	ee070a90 	vmov	s15, r0
		if(sample_delta > 0) {
 1002098:	e1983009 	orrs	r3, r8, r9
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 100209c:	ed9f7a10 	vldr	s14, [pc, #64]	; 10020e4 <acq_debug_dump+0x548>
 10020a0:	eec77a88 	vdiv.f32	s15, s15, s16
 10020a4:	ee677a87 	vmul.f32	s15, s15, s14
 10020a8:	eefd7ae7 	vcvt.s32.f32	s15, s15
 10020ac:	ee173a90 	vmov	r3, s15
 10020b0:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
		if(sample_delta > 0) {
 10020b4:	03a03000 	moveq	r3, #0
 10020b8:	058d3748 	streq	r3, [sp, #1864]	; 0x748
 10020bc:	1affffdd 	bne	1002038 <acq_debug_dump+0x49c>
 10020c0:	eafffec5 	b	1001bdc <acq_debug_dump+0x40>
 10020c4:	e3a03000 	mov	r3, #0
 10020c8:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 10020cc:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
 10020d0:	eafffec1 	b	1001bdc <acq_debug_dump+0x40>
 10020d4:	e320f000 	nop	{0}
 10020d8:	a17f0000 	.word	0xa17f0000
 10020dc:	3f689374 	.word	0x3f689374
 10020e0:	447a0000 	.word	0x447a0000
 10020e4:	49742400 	.word	0x49742400
 10020e8:	010a12d8 	.word	0x010a12d8
 10020ec:	010a1a80 	.word	0x010a1a80

010020f0 <acq_debug_dump_waveraw>:

/*
 * Dump raw contents of buffer in active acquisition.
 */
void acq_debug_dump_waveraw()
{
 10020f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	uint32_t sz;
	uint32_t i;

	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
		sz = g_acq_state.pre_buffsz;
 10020f4:	e30152d0 	movw	r5, #4816	; 0x12d0
 10020f8:	e340510a 	movt	r5, #266	; 0x10a
	}

	sz /= 4;

	for(i = 0; i <= sz; i += 2) {
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 10020fc:	e30678e0 	movw	r7, #26848	; 0x68e0
 1002100:	e3407105 	movt	r7, #261	; 0x105
		sz = g_acq_state.pre_buffsz;
 1002104:	e3a04000 	mov	r4, #0
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 1002108:	e5953004 	ldr	r3, [r5, #4]
{
 100210c:	e24dd00c 	sub	sp, sp, #12
		sz = g_acq_state.pre_buffsz;
 1002110:	e5952760 	ldr	r2, [r5, #1888]	; 0x760
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 1002114:	e2433001 	sub	r3, r3, #1
 1002118:	e3530001 	cmp	r3, #1
		sz = g_acq_state.post_buffsz;
 100211c:	85956764 	ldrhi	r6, [r5, #1892]	; 0x764
		sz = g_acq_state.pre_buffsz;
 1002120:	91a06002 	movls	r6, r2
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1002124:	93061880 	movwls	r1, #26752	; 0x6880
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1002128:	830618b0 	movwhi	r1, #26800	; 0x68b0
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100212c:	93401105 	movtls	r1, #261	; 0x105
 1002130:	93a00002 	movls	r0, #2
 1002134:	e3c66007 	bic	r6, r6, #7
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1002138:	83401105 	movthi	r1, #261	; 0x105
 100213c:	e2866008 	add	r6, r6, #8
 1002140:	83a00002 	movhi	r0, #2
 1002144:	eb0004b3 	bl	1003418 <d_printf>
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 1002148:	e5953854 	ldr	r3, [r5, #2132]	; 0x854
 100214c:	e1a02004 	mov	r2, r4
 1002150:	e1a01007 	mov	r1, r7
 1002154:	e3a00002 	mov	r0, #2
 1002158:	e593c008 	ldr	ip, [r3, #8]
 100215c:	e7bc3004 	ldr	r3, [ip, r4]!
 1002160:	e2844008 	add	r4, r4, #8
 1002164:	e59cc004 	ldr	ip, [ip, #4]
 1002168:	e58dc000 	str	ip, [sp]
 100216c:	eb0004a9 	bl	1003418 <d_printf>
	for(i = 0; i <= sz; i += 2) {
 1002170:	e1560004 	cmp	r6, r4
 1002174:	1afffff3 	bne	1002148 <acq_debug_dump_waveraw+0x58>
	}

	d_printf(D_INFO, "** End of Waveform Data **");
 1002178:	e30618f8 	movw	r1, #26872	; 0x68f8
 100217c:	e3a00002 	mov	r0, #2
 1002180:	e3401105 	movt	r1, #261	; 0x105
}
 1002184:	e28dd00c 	add	sp, sp, #12
 1002188:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "** End of Waveform Data **");
 100218c:	ea0004a1 	b	1003418 <d_printf>

01002190 <acq_get_ll_pointer>:
 * @return	ACQRES_OK if waveform found (trigger state disregarded)
 * 			ACQRES_WAVE_NOT_FOUND if... well... the waveform wasn't found
 */
int acq_get_ll_pointer(int index, struct acq_buffer_t **buff)
{
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002190:	e30132d0 	movw	r3, #4816	; 0x12d0
 1002194:	e340310a 	movt	r3, #266	; 0x10a
 1002198:	e5933850 	ldr	r3, [r3, #2128]	; 0x850

	while(wave != NULL) {
 100219c:	e3530000 	cmp	r3, #0
 10021a0:	0a000009 	beq	10021cc <acq_get_ll_pointer+0x3c>
		//d_printf(D_EXINFO, "explore: 0x%08x (%d) (buff_acq:0x%08x, trigger_at:0x%08x %d)", \
				wave, wave->idx, wave->buff_acq, wave->trigger_at, wave->trigger_at);

		if(wave->idx == index)
 10021a4:	e5932000 	ldr	r2, [r3]
 10021a8:	e1500002 	cmp	r0, r2
 10021ac:	1a000003 	bne	10021c0 <acq_get_ll_pointer+0x30>
 10021b0:	ea00000d 	b	10021ec <acq_get_ll_pointer+0x5c>
 10021b4:	e5932000 	ldr	r2, [r3]
 10021b8:	e1520000 	cmp	r2, r0
 10021bc:	0a00000a 	beq	10021ec <acq_get_ll_pointer+0x5c>
			break;

		wave = wave->next;
 10021c0:	e593301c 	ldr	r3, [r3, #28]
	while(wave != NULL) {
 10021c4:	e3530000 	cmp	r3, #0
 10021c8:	1afffff9 	bne	10021b4 <acq_get_ll_pointer+0x24>
	}

	if(wave == NULL) {
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 10021cc:	e3061914 	movw	r1, #26900	; 0x6914
 10021d0:	e1a02000 	mov	r2, r0
{
 10021d4:	e92d4010 	push	{r4, lr}
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 10021d8:	e3401105 	movt	r1, #261	; 0x105
 10021dc:	e3a00004 	mov	r0, #4
 10021e0:	eb00048c 	bl	1003418 <d_printf>
 10021e4:	e3e00008 	mvn	r0, #8
		return ACQRES_WAVE_NOT_FOUND;
	}

	*buff = wave;
	return ACQRES_OK;
}
 10021e8:	e8bd8010 	pop	{r4, pc}
	return ACQRES_OK;
 10021ec:	e3a00000 	mov	r0, #0
	*buff = wave;
 10021f0:	e5813000 	str	r3, [r1]
}
 10021f4:	e12fff1e 	bx	lr

010021f8 <acq_debug_dump_wave>:
 * Dump information from a wave N.
 *
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 */
void acq_debug_dump_wave(int index)
{
 10021f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 10021fc:	e30162d0 	movw	r6, #4816	; 0x12d0
 1002200:	e340610a 	movt	r6, #266	; 0x10a
{
 1002204:	e24dd008 	sub	sp, sp, #8
 1002208:	e1a05000 	mov	r5, r0
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 100220c:	e5964850 	ldr	r4, [r6, #2128]	; 0x850
	while(wave != NULL) {
 1002210:	e3540000 	cmp	r4, #0
 1002214:	0a000009 	beq	1002240 <acq_debug_dump_wave+0x48>
		if(wave->idx == index)
 1002218:	e5943000 	ldr	r3, [r4]
 100221c:	e1530000 	cmp	r3, r0
 1002220:	1a000003 	bne	1002234 <acq_debug_dump_wave+0x3c>
 1002224:	ea000011 	b	1002270 <acq_debug_dump_wave+0x78>
 1002228:	e5943000 	ldr	r3, [r4]
 100222c:	e1550003 	cmp	r5, r3
 1002230:	0a00000e 	beq	1002270 <acq_debug_dump_wave+0x78>
		wave = wave->next;
 1002234:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 1002238:	e3540000 	cmp	r4, #0
 100223c:	1afffff9 	bne	1002228 <acq_debug_dump_wave+0x30>
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1002240:	e3061914 	movw	r1, #26900	; 0x6914
 1002244:	e1a02005 	mov	r2, r5
 1002248:	e3401105 	movt	r1, #261	; 0x105
 100224c:	e3a00004 	mov	r0, #4
 1002250:	eb000470 	bl	1003418 <d_printf>
	uint32_t *addr2;
	uint32_t *deref;
	int first, i;

	if(acq_get_ll_pointer(index, &wave) != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 1002254:	e30619e4 	movw	r1, #27108	; 0x69e4
 1002258:	e1a02005 	mov	r2, r5
 100225c:	e3401105 	movt	r1, #261	; 0x105
 1002260:	e3a00004 	mov	r0, #4
	} else {
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
	}

	d_printf(D_INFO, "");
}
 1002264:	e28dd008 	add	sp, sp, #8
 1002268:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 100226c:	ea000469 	b	1003418 <d_printf>
	d_printf(D_INFO, "");
 1002270:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002274:	e3a00002 	mov	r0, #2
 1002278:	e3401105 	movt	r1, #261	; 0x105
 100227c:	eb000465 	bl	1003418 <d_printf>
	d_printf(D_INFO, "** Waveinfo for index %d **", index);
 1002280:	e3061a18 	movw	r1, #27160	; 0x6a18
 1002284:	e1a02005 	mov	r2, r5
 1002288:	e3401105 	movt	r1, #261	; 0x105
 100228c:	e3a00002 	mov	r0, #2
 1002290:	eb000460 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1002294:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002298:	e3a00002 	mov	r0, #2
 100229c:	e3401105 	movt	r1, #261	; 0x105
 10022a0:	eb00045c 	bl	1003418 <d_printf>
	d_printf(D_INFO, "buff_acq address      = 0x%08x", wave->buff_acq);
 10022a4:	e3061a34 	movw	r1, #27188	; 0x6a34
 10022a8:	e5942008 	ldr	r2, [r4, #8]
 10022ac:	e3401105 	movt	r1, #261	; 0x105
 10022b0:	e3a00002 	mov	r0, #2
 10022b4:	eb000457 	bl	1003418 <d_printf>
	d_printf(D_INFO, "buff_alloc address    = 0x%08x", wave->buff_alloc);
 10022b8:	e3061a54 	movw	r1, #27220	; 0x6a54
 10022bc:	e5942004 	ldr	r2, [r4, #4]
 10022c0:	e3401105 	movt	r1, #261	; 0x105
 10022c4:	e3a00002 	mov	r0, #2
 10022c8:	eb000452 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 10022cc:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 10022d0:	e3a00002 	mov	r0, #2
 10022d4:	e3401105 	movt	r1, #261	; 0x105
 10022d8:	eb00044e 	bl	1003418 <d_printf>
	d_printf(D_INFO, "idx                   = %d", wave->idx);
 10022dc:	e3061a74 	movw	r1, #27252	; 0x6a74
 10022e0:	e5942000 	ldr	r2, [r4]
 10022e4:	e3401105 	movt	r1, #261	; 0x105
 10022e8:	e3a00002 	mov	r0, #2
 10022ec:	eb000449 	bl	1003418 <d_printf>
	d_printf(D_INFO, "flags                 = 0x%04x", wave->flags);
 10022f0:	e3061a90 	movw	r1, #27280	; 0x6a90
 10022f4:	e1d421b0 	ldrh	r2, [r4, #16]
 10022f8:	e3401105 	movt	r1, #261	; 0x105
 10022fc:	e3a00002 	mov	r0, #2
 1002300:	eb000444 	bl	1003418 <d_printf>
	d_printf(D_INFO, "trigger_at            = 0x%08x", wave->trigger_at);
 1002304:	e3061ab0 	movw	r1, #27312	; 0x6ab0
 1002308:	e594200c 	ldr	r2, [r4, #12]
 100230c:	e3401105 	movt	r1, #261	; 0x105
 1002310:	e3a00002 	mov	r0, #2
 1002314:	eb00043f 	bl	1003418 <d_printf>
	d_printf(D_INFO, "trigger_at(div8)      = 0x%08x (%d)", wave->trigger_at >> 3, wave->trigger_at >> 3);
 1002318:	e594300c 	ldr	r3, [r4, #12]
 100231c:	e3061ad0 	movw	r1, #27344	; 0x6ad0
 1002320:	e3401105 	movt	r1, #261	; 0x105
 1002324:	e3a00002 	mov	r0, #2
 1002328:	e1a031a3 	lsr	r3, r3, #3
 100232c:	e1a02003 	mov	r2, r3
 1002330:	eb000438 	bl	1003418 <d_printf>
	d_printf(D_INFO, "trigger_at(div16)     = 0x%08x (%d)", wave->trigger_at >> 4, wave->trigger_at >> 4);
 1002334:	e594300c 	ldr	r3, [r4, #12]
 1002338:	e3061af4 	movw	r1, #27380	; 0x6af4
 100233c:	e3401105 	movt	r1, #261	; 0x105
 1002340:	e3a00002 	mov	r0, #2
 1002344:	e1a03223 	lsr	r3, r3, #4
 1002348:	e1a02003 	mov	r2, r3
 100234c:	eb000431 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1002350:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002354:	e3a00002 	mov	r0, #2
 1002358:	e3401105 	movt	r1, #261	; 0x105
 100235c:	eb00042d 	bl	1003418 <d_printf>
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 1002360:	e594300c 	ldr	r3, [r4, #12]
 1002364:	e3530000 	cmp	r3, #0
 1002368:	ba000002 	blt	1002378 <acq_debug_dump_wave+0x180>
 100236c:	e1d431b0 	ldrh	r3, [r4, #16]
 1002370:	e3130001 	tst	r3, #1
 1002374:	1a00000a 	bne	10023a4 <acq_debug_dump_wave+0x1ac>
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
 1002378:	e30619b0 	movw	r1, #27056	; 0x69b0
 100237c:	e1a02005 	mov	r2, r5
 1002380:	e3401105 	movt	r1, #261	; 0x105
 1002384:	e3a00004 	mov	r0, #4
 1002388:	eb000422 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 100238c:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002390:	e3a00002 	mov	r0, #2
 1002394:	e3401105 	movt	r1, #261	; 0x105
}
 1002398:	e28dd008 	add	sp, sp, #8
 100239c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "");
 10023a0:	ea00041c 	b	1003418 <d_printf>
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 10023a4:	e5961768 	ldr	r1, [r6, #1896]	; 0x768
 10023a8:	e5940008 	ldr	r0, [r4, #8]
 10023ac:	eb001881 	bl	10085b8 <Xil_DCacheInvalidateRange>
		dmb();
 10023b0:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10023b4:	e594700c 	ldr	r7, [r4, #12]
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10023b8:	e3a03000 	mov	r3, #0
		end = g_acq_state.pre_sampct * 2;
 10023bc:	e5969778 	ldr	r9, [r6, #1912]	; 0x778
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10023c0:	e3061930 	movw	r1, #26928	; 0x6930
 10023c4:	e58d3000 	str	r3, [sp]
 10023c8:	e3401105 	movt	r1, #261	; 0x105
 10023cc:	e3a00002 	mov	r0, #2
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10023d0:	e1a071a7 	lsr	r7, r7, #3
		end = g_acq_state.pre_sampct * 2;
 10023d4:	e1a09089 	lsl	r9, r9, #1
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10023d8:	e2877001 	add	r7, r7, #1
 10023dc:	e1a08087 	lsl	r8, r7, #1
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10023e0:	e1a02009 	mov	r2, r9
 10023e4:	e1a03008 	mov	r3, r8
		for(i = start; i < end; i += 2) {
 10023e8:	e1a05008 	mov	r5, r8
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 10023ec:	eb000409 	bl	1003418 <d_printf>
		for(i = start; i < end; i += 2) {
 10023f0:	e1580009 	cmp	r8, r9
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 10023f4:	3306a950 	movwcc	sl, #26960	; 0x6950
 10023f8:	31a07187 	lslcc	r7, r7, #3
 10023fc:	3340a105 	movtcc	sl, #261	; 0x105
		for(i = start; i < end; i += 2) {
 1002400:	2a00000b 	bcs	1002434 <acq_debug_dump_wave+0x23c>
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002404:	e594c008 	ldr	ip, [r4, #8]
 1002408:	e1a02005 	mov	r2, r5
 100240c:	e1a0100a 	mov	r1, sl
		for(i = start; i < end; i += 2) {
 1002410:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002414:	e3a00000 	mov	r0, #0
 1002418:	e7bc3007 	ldr	r3, [ip, r7]!
 100241c:	e2877008 	add	r7, r7, #8
 1002420:	e59cc004 	ldr	ip, [ip, #4]
 1002424:	e58dc000 	str	ip, [sp]
 1002428:	eb0003fa 	bl	1003418 <d_printf>
		for(i = start; i < end; i += 2) {
 100242c:	e1590005 	cmp	r9, r5
 1002430:	8afffff3 	bhi	1002404 <acq_debug_dump_wave+0x20c>
{
 1002434:	e3a07000 	mov	r7, #0
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002438:	e3069970 	movw	r9, #26992	; 0x6970
		for(i = 0; i < start; i += 2) {
 100243c:	e1a05007 	mov	r5, r7
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002440:	e3409105 	movt	r9, #261	; 0x105
 1002444:	e594c008 	ldr	ip, [r4, #8]
 1002448:	e1a02005 	mov	r2, r5
 100244c:	e1a01009 	mov	r1, r9
		for(i = 0; i < start; i += 2) {
 1002450:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002454:	e3a00000 	mov	r0, #0
 1002458:	e7bc3007 	ldr	r3, [ip, r7]!
 100245c:	e2877008 	add	r7, r7, #8
 1002460:	e59cc004 	ldr	ip, [ip, #4]
 1002464:	e58dc000 	str	ip, [sp]
 1002468:	eb0003ea 	bl	1003418 <d_printf>
		for(i = 0; i < start; i += 2) {
 100246c:	e1580005 	cmp	r8, r5
 1002470:	8afffff3 	bhi	1002444 <acq_debug_dump_wave+0x24c>
		start = g_acq_state.pre_sampct * 2;
 1002474:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002478:	e596777c 	ldr	r7, [r6, #1916]	; 0x77c
 100247c:	e0837007 	add	r7, r3, r7
		for(i = start; i < end; i += 2) {
 1002480:	e1a05083 	lsl	r5, r3, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002484:	e1a07087 	lsl	r7, r7, #1
		for(i = start; i < end; i += 2) {
 1002488:	e1550007 	cmp	r5, r7
 100248c:	2affffbe 	bcs	100238c <acq_debug_dump_wave+0x194>
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002490:	e3068990 	movw	r8, #27024	; 0x6990
 1002494:	e1a06183 	lsl	r6, r3, #3
 1002498:	e3408105 	movt	r8, #261	; 0x105
 100249c:	e594c008 	ldr	ip, [r4, #8]
 10024a0:	e1a02005 	mov	r2, r5
 10024a4:	e1a01008 	mov	r1, r8
		for(i = start; i < end; i += 2) {
 10024a8:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 10024ac:	e3a00000 	mov	r0, #0
 10024b0:	e7bc3006 	ldr	r3, [ip, r6]!
 10024b4:	e2866008 	add	r6, r6, #8
 10024b8:	e59cc004 	ldr	ip, [ip, #4]
 10024bc:	e58dc000 	str	ip, [sp]
 10024c0:	eb0003d4 	bl	1003418 <d_printf>
		for(i = start; i < end; i += 2) {
 10024c4:	e1570005 	cmp	r7, r5
 10024c8:	8afffff3 	bhi	100249c <acq_debug_dump_wave+0x2a4>
 10024cc:	eaffffae 	b	100238c <acq_debug_dump_wave+0x194>

010024d0 <acq_copy_slow_mipi>:
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 * @param	buffer	Buffer to place assembled waveform.  The buffer must be at least as large as the
 * 					total_buffsz parameter or buffer overflow could occur.
 */
int acq_copy_slow_mipi(int index, uint32_t *buffer)
{
 10024d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 10024d4:	e30152d0 	movw	r5, #4816	; 0x12d0
 10024d8:	e340510a 	movt	r5, #266	; 0x10a
{
 10024dc:	e24dd00c 	sub	sp, sp, #12
 10024e0:	e1a06000 	mov	r6, r0
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 10024e4:	e5954850 	ldr	r4, [r5, #2128]	; 0x850
	while(wave != NULL) {
 10024e8:	e3540000 	cmp	r4, #0
 10024ec:	0a00000a 	beq	100251c <acq_copy_slow_mipi+0x4c>
		if(wave->idx == index)
 10024f0:	e5943000 	ldr	r3, [r4]
 10024f4:	e1a07001 	mov	r7, r1
 10024f8:	e1530000 	cmp	r3, r0
 10024fc:	1a000003 	bne	1002510 <acq_copy_slow_mipi+0x40>
 1002500:	ea000012 	b	1002550 <acq_copy_slow_mipi+0x80>
 1002504:	e5943000 	ldr	r3, [r4]
 1002508:	e1560003 	cmp	r6, r3
 100250c:	0a00000f 	beq	1002550 <acq_copy_slow_mipi+0x80>
		wave = wave->next;
 1002510:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 1002514:	e3540000 	cmp	r4, #0
 1002518:	1afffff9 	bne	1002504 <acq_copy_slow_mipi+0x34>
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 100251c:	e3061914 	movw	r1, #26900	; 0x6914
 1002520:	e1a02006 	mov	r2, r6
 1002524:	e3401105 	movt	r1, #261	; 0x105
 1002528:	e3a00004 	mov	r0, #4
 100252c:	eb0003b9 	bl	1003418 <d_printf>

	// Find the LL pointer to this waveindex
	res = acq_get_ll_pointer(index, &wave);

	if(res != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 1002530:	e30619e4 	movw	r1, #27108	; 0x69e4
 1002534:	e1a02006 	mov	r2, r6
 1002538:	e3401105 	movt	r1, #261	; 0x105
 100253c:	e3a00004 	mov	r0, #4
 1002540:	eb0003b4 	bl	1003418 <d_printf>
		return res;
 1002544:	e3e00008 	mvn	r0, #8
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
		buffer += start;
	} else {
		return ACQRES_WAVE_NOT_READY;
	}
}
 1002548:	e28dd00c 	add	sp, sp, #12
 100254c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	d_printf(D_INFO, "acq: trigger_at=0x%08x (sample:%d, sub_index:%d)", wave->trigger_at, wave->trigger_at >> 3, wave->trigger_at & 0x07);
 1002550:	e594300c 	ldr	r3, [r4, #12]
 1002554:	e3061bd4 	movw	r1, #27604	; 0x6bd4
 1002558:	e3401105 	movt	r1, #261	; 0x105
 100255c:	e3a00002 	mov	r0, #2
 1002560:	e203c007 	and	ip, r3, #7
 1002564:	e1a02003 	mov	r2, r3
 1002568:	e58dc000 	str	ip, [sp]
 100256c:	e1a031a3 	lsr	r3, r3, #3
 1002570:	eb0003a8 	bl	1003418 <d_printf>
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 1002574:	e594300c 	ldr	r3, [r4, #12]
 1002578:	e3530000 	cmp	r3, #0
 100257c:	ba000002 	blt	100258c <acq_copy_slow_mipi+0xbc>
 1002580:	e1d431b0 	ldrh	r3, [r4, #16]
 1002584:	e3130001 	tst	r3, #1
 1002588:	1a000002 	bne	1002598 <acq_copy_slow_mipi+0xc8>
		return ACQRES_WAVE_NOT_READY;
 100258c:	e3e00009 	mvn	r0, #9
}
 1002590:	e28dd00c 	add	sp, sp, #12
 1002594:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 1002598:	e5951768 	ldr	r1, [r5, #1896]	; 0x768
 100259c:	e5940008 	ldr	r0, [r4, #8]
 10025a0:	eb001804 	bl	10085b8 <Xil_DCacheInvalidateRange>
		dmb();
 10025a4:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10025a8:	e594600c 	ldr	r6, [r4, #12]
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 10025ac:	e3a00001 	mov	r0, #1
		end = g_acq_state.pre_sampct * 2;
 10025b0:	e5959778 	ldr	r9, [r5, #1912]	; 0x778
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 10025b4:	e3061b18 	movw	r1, #27416	; 0x6b18
 10025b8:	e5942008 	ldr	r2, [r4, #8]
 10025bc:	e3401105 	movt	r1, #261	; 0x105
		start = (((wave->trigger_at >> 3) + 1) * 2);
 10025c0:	e1a061a6 	lsr	r6, r6, #3
 10025c4:	e0866000 	add	r6, r6, r0
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 10025c8:	e0498006 	sub	r8, r9, r6
 10025cc:	e1a06186 	lsl	r6, r6, #3
 10025d0:	e1a08188 	lsl	r8, r8, #3
 10025d4:	e1a09189 	lsl	r9, r9, #3
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 10025d8:	eb00038e 	bl	1003418 <d_printf>
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 10025dc:	e5942008 	ldr	r2, [r4, #8]
 10025e0:	e3061b2c 	movw	r1, #27436	; 0x6b2c
 10025e4:	e1a03006 	mov	r3, r6
 10025e8:	e1cd80f0 	strd	r8, [sp]
 10025ec:	e3401105 	movt	r1, #261	; 0x105
 10025f0:	e3a00001 	mov	r0, #1
 10025f4:	e0822006 	add	r2, r2, r6
		buffer += (end - start);
 10025f8:	e0879008 	add	r9, r7, r8
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 10025fc:	eb000385 	bl	1003418 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002600:	e5941008 	ldr	r1, [r4, #8]
 1002604:	e1a02008 	mov	r2, r8
 1002608:	e1a00007 	mov	r0, r7
		buffer += start;
 100260c:	e0897006 	add	r7, r9, r6
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002610:	e0811006 	add	r1, r1, r6
 1002614:	eb002539 	bl	100bb00 <memcpy>
		d_printf(D_EXINFO, "1. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq, 0, start * 4, start * 4);
 1002618:	e3061b64 	movw	r1, #27492	; 0x6b64
 100261c:	e5942008 	ldr	r2, [r4, #8]
 1002620:	e3a03000 	mov	r3, #0
 1002624:	e58d6004 	str	r6, [sp, #4]
 1002628:	e58d6000 	str	r6, [sp]
 100262c:	e3401105 	movt	r1, #261	; 0x105
 1002630:	e3a00001 	mov	r0, #1
 1002634:	eb000377 	bl	1003418 <d_printf>
		memcpy(buffer, wave->buff_acq, start * 4);
 1002638:	e1a02006 	mov	r2, r6
 100263c:	e5941008 	ldr	r1, [r4, #8]
 1002640:	e1a00009 	mov	r0, r9
 1002644:	eb00252d 	bl	100bb00 <memcpy>
		start = g_acq_state.pre_sampct * 2;
 1002648:	e595c778 	ldr	ip, [r5, #1912]	; 0x778
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 100264c:	e3061b9c 	movw	r1, #27548	; 0x6b9c
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002650:	e595677c 	ldr	r6, [r5, #1916]	; 0x77c
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002654:	e3401105 	movt	r1, #261	; 0x105
 1002658:	e5942008 	ldr	r2, [r4, #8]
 100265c:	e3a00001 	mov	r0, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002660:	e08c3006 	add	r3, ip, r6
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002664:	e1a0518c 	lsl	r5, ip, #3
 1002668:	e1a06186 	lsl	r6, r6, #3
 100266c:	e1a03183 	lsl	r3, r3, #3
 1002670:	e0822005 	add	r2, r2, r5
 1002674:	e58d3004 	str	r3, [sp, #4]
 1002678:	e58d6000 	str	r6, [sp]
 100267c:	e1a03005 	mov	r3, r5
 1002680:	eb000364 	bl	1003418 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002684:	e5941008 	ldr	r1, [r4, #8]
 1002688:	e1a00007 	mov	r0, r7
 100268c:	e1a02006 	mov	r2, r6
 1002690:	e0811005 	add	r1, r1, r5
}
 1002694:	e28dd00c 	add	sp, sp, #12
 1002698:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 100269c:	ea002517 	b	100bb00 <memcpy>

010026a0 <clkwiz_init>:
 * an empty `struct clkwiz_interface_t`. For reasons unknown to me,
 * the refclk frequency stored in the ClkWiz is invalid, so an external
 * refclk must be specified as `refclk_freq`.
 */
void clkwiz_init(struct clkwiz_interface_t *ifc, uint32_t device_id, float refclk_freq)
{
 10026a0:	e92d4010 	push	{r4, lr}
 10026a4:	e1a04000 	mov	r4, r0
 10026a8:	ed2d8b02 	vpush	{d8}
	int i;
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 10026ac:	e1a00001 	mov	r0, r1
{
 10026b0:	e24dd008 	sub	sp, sp, #8
 10026b4:	eeb08a40 	vmov.f32	s16, s0
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 10026b8:	eb000d03 	bl	1005acc <XClk_Wiz_LookupConfig>

	D_ASSERT(clkcfg != NULL);
 10026bc:	e2503000 	subs	r3, r0, #0
 10026c0:	0a000022 	beq	1002750 <clkwiz_init+0xb0>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 10026c4:	eef77a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 10026c8:	eeb48ae7 	vcmpe.f32	s16, s15
 10026cc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 10026d0:	da000012 	ble	1002720 <clkwiz_init+0x80>
 10026d4:	eddf7a25 	vldr	s15, [pc, #148]	; 1002770 <clkwiz_init+0xd0>
 10026d8:	eeb48ae7 	vcmpe.f32	s16, s15
 10026dc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 10026e0:	5a00000e 	bpl	1002720 <clkwiz_init+0x80>

	ifc->wiz_cfg = clkcfg;
 10026e4:	e5843000 	str	r3, [r4]
	ifc->refclk_freq = refclk_freq;

	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 10026e8:	e1a01003 	mov	r1, r3
 10026ec:	e5932004 	ldr	r2, [r3, #4]
 10026f0:	e2840008 	add	r0, r4, #8
	ifc->refclk_freq = refclk_freq;
 10026f4:	ed848a24 	vstr	s16, [r4, #144]	; 0x90
	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 10026f8:	eb000ca9 	bl	10059a4 <XClk_Wiz_CfgInitialize>

	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 10026fc:	e5943000 	ldr	r3, [r4]
 1002700:	e3061d74 	movw	r1, #28020	; 0x6d74
 1002704:	e3401105 	movt	r1, #261	; 0x105
 1002708:	e3a00002 	mov	r0, #2
 100270c:	e5932004 	ldr	r2, [r3, #4]
}
 1002710:	e28dd008 	add	sp, sp, #8
 1002714:	ecbd8b02 	vpop	{d8}
 1002718:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 100271c:	ea00033d 	b	1003418 <d_printf>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 1002720:	e3063cf0 	movw	r3, #27888	; 0x6cf0
 1002724:	e3062d48 	movw	r2, #27976	; 0x6d48
 1002728:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 100272c:	e3403105 	movt	r3, #261	; 0x105
 1002730:	e3402105 	movt	r2, #261	; 0x105
 1002734:	e3a00020 	mov	r0, #32
 1002738:	e58d0000 	str	r0, [sp]
 100273c:	e3a00004 	mov	r0, #4
 1002740:	e3401105 	movt	r1, #261	; 0x105
 1002744:	eb000333 	bl	1003418 <d_printf>
 1002748:	e3e00062 	mvn	r0, #98	; 0x62
 100274c:	fa001f77 	blx	100a530 <exit>
	D_ASSERT(clkcfg != NULL);
 1002750:	e3a0001f 	mov	r0, #31
 1002754:	e3063cf0 	movw	r3, #27888	; 0x6cf0
 1002758:	e3062d0c 	movw	r2, #27916	; 0x6d0c
 100275c:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 1002760:	e58d0000 	str	r0, [sp]
 1002764:	e3403105 	movt	r3, #261	; 0x105
 1002768:	e3402105 	movt	r2, #261	; 0x105
 100276c:	eafffff2 	b	100273c <clkwiz_init+0x9c>
 1002770:	44480000 	.word	0x44480000

01002774 <clkwiz_change_mipi_freq>:
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
	int solved = 0, solver_iters = 0;
	uint32_t ccfg_0, clkout_div;

	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 1002774:	eeb50ac0 	vcmpe.f32	s0, #0.0
 1002778:	eef1fa10 	vmrs	APSR_nzcv, fpscr
{
 100277c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1002780:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 1002784:	da00009e 	ble	1002a04 <clkwiz_change_mipi_freq+0x290>
 1002788:	ed9f7aae 	vldr	s14, [pc, #696]	; 1002a48 <clkwiz_change_mipi_freq+0x2d4>
 100278c:	eeb40ac7 	vcmpe.f32	s0, s14
 1002790:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002794:	5a00009a 	bpl	1002a04 <clkwiz_change_mipi_freq+0x290>

	// Compute the closest divider assuming an 800MHz FBOUT.
	// Above 600MHz divider is forced to 1.
	if(new_freq >= 600) {
 1002798:	eddf7aab 	vldr	s15, [pc, #684]	; 1002a4c <clkwiz_change_mipi_freq+0x2d8>
 100279c:	e1a06000 	mov	r6, r0
 10027a0:	eeb40ae7 	vcmpe.f32	s0, s15
 10027a4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 10027a8:	ba000075 	blt	1002984 <clkwiz_change_mipi_freq+0x210>
 10027ac:	eeb73a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 10027b0:	e3a05001 	mov	r5, #1
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 10027b4:	eddf6aa5 	vldr	s13, [pc, #660]	; 1002a50 <clkwiz_change_mipi_freq+0x2dc>
	int solved = 0, solver_iters = 0;
 10027b8:	e3a00000 	mov	r0, #0
	 * with minimal error, though the search algorithm could be substantially improved
	 * with e.g. a binary search.
	 */
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 10027bc:	edd64a24 	vldr	s9, [r6, #144]	; 0x90
	int solved = 0, solver_iters = 0;
 10027c0:	e1a0e000 	mov	lr, r0
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 10027c4:	ed9f7aa2 	vldr	s14, [pc, #648]	; 1002a54 <clkwiz_change_mipi_freq+0x2e0>
	int best_fb_mult = 0, best_fb_frac = 0;
 10027c8:	e1a04000 	mov	r4, r0
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 10027cc:	ed9f5aa1 	vldr	s10, [pc, #644]	; 1002a58 <clkwiz_change_mipi_freq+0x2e4>
	int best_fb_mult = 0, best_fb_frac = 0;
 10027d0:	e1a07000 	mov	r7, r0

			// Skip invalid frequencies.
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 10027d4:	eddf5a9c 	vldr	s11, [pc, #624]	; 1002a4c <clkwiz_change_mipi_freq+0x2d8>
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 10027d8:	e1a03000 	mov	r3, r0
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 10027dc:	eddf3a9e 	vldr	s7, [pc, #632]	; 1002a5c <clkwiz_change_mipi_freq+0x2e8>
				best_fb_mult = fb_mult;
				best_fb_frac = fb_frac;
				best_fbout_freq = fbout_freq;

				// If < 10Hz error, end
				if(best_error < 1e-5) {
 10027e0:	eddf1b94 	vldr	d17, [pc, #592]	; 1002a38 <clkwiz_change_mipi_freq+0x2c4>
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
 10027e4:	eef07a66 	vmov.f32	s15, s13
 10027e8:	eeb04a47 	vmov.f32	s8, s14
 10027ec:	e1a0c004 	mov	ip, r4
 10027f0:	ee073a10 	vmov	s14, r3
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 10027f4:	e3a04000 	mov	r4, #0
 10027f8:	eeb86ac7 	vcvt.f32.s32	s12, s14
 10027fc:	ee161a90 	vmov	r1, s13
 1002800:	ee172a90 	vmov	r2, s15
 1002804:	ea000007 	b	1002828 <clkwiz_change_mipi_freq+0xb4>
				best_error = error;
 1002808:	eeb04a47 	vmov.f32	s8, s14
 100280c:	e1a0c004 	mov	ip, r4
				best_freq = freq;
 1002810:	ee161a90 	vmov	r1, s13
 1002814:	e1a07003 	mov	r7, r3
				best_fbout_freq = fbout_freq;
 1002818:	ee172a90 	vmov	r2, s15
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 100281c:	e2844001 	add	r4, r4, #1
 1002820:	e3540ffa 	cmp	r4, #1000	; 0x3e8
 1002824:	0a000062 	beq	10029b4 <clkwiz_change_mipi_freq+0x240>
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 1002828:	ee074a90 	vmov	s15, r4
 100282c:	eeb87ae7 	vcvt.f32.s32	s14, s15
 1002830:	eec77a05 	vdiv.f32	s15, s14, s10
 1002834:	ee777a86 	vadd.f32	s15, s15, s12
 1002838:	ee677aa4 	vmul.f32	s15, s15, s9
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 100283c:	eef47ae5 	vcmpe.f32	s15, s11
 1002840:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002844:	4afffff4 	bmi	100281c <clkwiz_change_mipi_freq+0xa8>
 1002848:	eef47ae3 	vcmpe.f32	s15, s7
 100284c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002850:	cafffff1 	bgt	100281c <clkwiz_change_mipi_freq+0xa8>
			freq = fbout_freq / div;
 1002854:	eec76a83 	vdiv.f32	s13, s15, s6
			solver_iters++;
 1002858:	e2800001 	add	r0, r0, #1
			error = fabs(new_freq - freq);
 100285c:	ee307a66 	vsub.f32	s14, s0, s13
 1002860:	eeb07ac7 	vabs.f32	s14, s14
			if(error < best_error) {
 1002864:	eeb47ac4 	vcmpe.f32	s14, s8
 1002868:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100286c:	5affffea 	bpl	100281c <clkwiz_change_mipi_freq+0xa8>
				if(best_error < 1e-5) {
 1002870:	eef70ac7 	vcvt.f64.f32	d16, s14
 1002874:	eef40be1 	vcmpe.f64	d16, d17
 1002878:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 100287c:	5affffe1 	bpl	1002808 <clkwiz_change_mipi_freq+0x94>
 1002880:	e1a07003 	mov	r7, r3
					solved = 1;
 1002884:	e3a0e001 	mov	lr, #1
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 1002888:	e2833001 	add	r3, r3, #1
 100288c:	e3530008 	cmp	r3, #8
 1002890:	1affffd4 	bne	10027e8 <clkwiz_change_mipi_freq+0x74>
			}
		}
	}

	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 1002894:	eef71ac7 	vcvt.f64.f32	d17, s14
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 1002898:	e35e0000 	cmp	lr, #0
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 100289c:	eddf3b67 	vldr	d19, [pc, #412]	; 1002a40 <clkwiz_change_mipi_freq+0x2cc>
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 10028a0:	13a0c059 	movne	ip, #89	; 0x59
 10028a4:	eef70ae7 	vcvt.f64.f32	d16, s15
 10028a8:	03a0c04e 	moveq	ip, #78	; 0x4e
 10028ac:	eef72ae6 	vcvt.f64.f32	d18, s13
 10028b0:	e3061dc8 	movw	r1, #28104	; 0x6dc8
 10028b4:	eeb70ac0 	vcvt.f64.f32	d0, s0
 10028b8:	e3401105 	movt	r1, #261	; 0x105
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 10028bc:	ee611ba3 	vmul.f64	d17, d17, d19
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 10028c0:	e1a03004 	mov	r3, r4
 10028c4:	e1a02007 	mov	r2, r7
 10028c8:	e58d001c 	str	r0, [sp, #28]
 10028cc:	e58dc020 	str	ip, [sp, #32]
 10028d0:	e3a00002 	mov	r0, #2
 10028d4:	edcd0b00 	vstr	d16, [sp]
 10028d8:	edcd2b02 	vstr	d18, [sp, #8]
 10028dc:	eefd7be1 	vcvt.s32.f64	s15, d17
 10028e0:	ed8d0b04 	vstr	d0, [sp, #16]
 10028e4:	edcd7a06 	vstr	s15, [sp, #24]
 10028e8:	eb0002ca 	bl	1003418 <d_printf>

	// Write the settings to the registers and commit the clock change.
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 10028ec:	e5962000 	ldr	r2, [r6]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 10028f0:	e1a03804 	lsl	r3, r4, #16
 10028f4:	e3a01000 	mov	r1, #0
 10028f8:	e1833407 	orr	r3, r3, r7, lsl #8
 10028fc:	e30c0350 	movw	r0, #50000	; 0xc350
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 1002900:	e5922004 	ldr	r2, [r2, #4]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 1002904:	e3833341 	orr	r3, r3, #67108865	; 0x4000001
 1002908:	e5823200 	str	r3, [r2, #512]	; 0x200
 100290c:	e5821204 	str	r1, [r2, #516]	; 0x204
 1002910:	e5825208 	str	r5, [r2, #520]	; 0x208
 1002914:	e582120c 	str	r1, [r2, #524]	; 0x20c
 1002918:	e5820210 	str	r0, [r2, #528]	; 0x210
 100291c:	e5825214 	str	r5, [r2, #532]	; 0x214
 1002920:	e5821218 	str	r1, [r2, #536]	; 0x218
 1002924:	e582021c 	str	r0, [r2, #540]	; 0x21c
	return *(volatile u32 *) Addr;
 1002928:	e5923004 	ldr	r3, [r2, #4]
void clkwiz_commit(struct clkwiz_interface_t *ifc)
{
	int timeout = 100000;

	// Check that MMCM is locked already
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100292c:	e3130001 	tst	r3, #1
 1002930:	0a00002a 	beq	10029e0 <clkwiz_change_mipi_freq+0x26c>
	*LocalAddr = Value;
 1002934:	e3a03003 	mov	r3, #3
 1002938:	e582325c 	str	r3, [r2, #604]	; 0x25c
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
	}

	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x03);	// Load and SEN set
	asm("nop");
 100293c:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1002940:	e5962000 	ldr	r2, [r6]
	int timeout = 100000;
 1002944:	e30836a0 	movw	r3, #34464	; 0x86a0
 1002948:	e3a00000 	mov	r0, #0
 100294c:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1002950:	e5922004 	ldr	r2, [r2, #4]
 1002954:	e2821004 	add	r1, r2, #4
 1002958:	e582025c 	str	r0, [r2, #604]	; 0x25c
 100295c:	ea000001 	b	1002968 <clkwiz_change_mipi_freq+0x1f4>

	// Wait for re-lock
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 1002960:	e2533001 	subs	r3, r3, #1
 1002964:	3a000004 	bcc	100297c <clkwiz_change_mipi_freq+0x208>
	return *(volatile u32 *) Addr;
 1002968:	e5912000 	ldr	r2, [r1]
 100296c:	e3120001 	tst	r2, #1
 1002970:	0afffffa 	beq	1002960 <clkwiz_change_mipi_freq+0x1ec>

	if(timeout == 0) {
 1002974:	e3530000 	cmp	r3, #0
 1002978:	0a000012 	beq	10029c8 <clkwiz_change_mipi_freq+0x254>
}
 100297c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1002980:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		for(div = 1; div < 106; div++) {
 1002984:	e3a05001 	mov	r5, #1
 1002988:	ea000002 	b	1002998 <clkwiz_change_mipi_freq+0x224>
 100298c:	e2855001 	add	r5, r5, #1
 1002990:	e355006a 	cmp	r5, #106	; 0x6a
 1002994:	0a000018 	beq	10029fc <clkwiz_change_mipi_freq+0x288>
			freq = fbout_freq / div;
 1002998:	ee075a90 	vmov	s15, r5
 100299c:	eeb83ae7 	vcvt.f32.s32	s6, s15
 10029a0:	eec77a03 	vdiv.f32	s15, s14, s6
			if(freq <= new_freq) {
 10029a4:	eeb40ae7 	vcmpe.f32	s0, s15
 10029a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 10029ac:	bafffff6 	blt	100298c <clkwiz_change_mipi_freq+0x218>
 10029b0:	eaffff7f 	b	10027b4 <clkwiz_change_mipi_freq+0x40>
 10029b4:	eeb07a44 	vmov.f32	s14, s8
 10029b8:	e1a0400c 	mov	r4, ip
 10029bc:	ee061a90 	vmov	s13, r1
 10029c0:	ee072a90 	vmov	s15, r2
 10029c4:	eaffffaf 	b	1002888 <clkwiz_change_mipi_freq+0x114>
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 10029c8:	e3061e74 	movw	r1, #28276	; 0x6e74
 10029cc:	e3a00004 	mov	r0, #4
 10029d0:	e3401105 	movt	r1, #261	; 0x105
}
 10029d4:	e28dd02c 	add	sp, sp, #44	; 0x2c
 10029d8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 10029dc:	ea00028d 	b	1003418 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 10029e0:	e3061e40 	movw	r1, #28224	; 0x6e40
 10029e4:	e3a00004 	mov	r0, #4
 10029e8:	e3401105 	movt	r1, #261	; 0x105
 10029ec:	eb000289 	bl	1003418 <d_printf>
 10029f0:	e5963000 	ldr	r3, [r6]
 10029f4:	e5932004 	ldr	r2, [r3, #4]
 10029f8:	eaffffcd 	b	1002934 <clkwiz_change_mipi_freq+0x1c0>
 10029fc:	ed9f3a17 	vldr	s6, [pc, #92]	; 1002a60 <clkwiz_change_mipi_freq+0x2ec>
 1002a00:	eaffff6b 	b	10027b4 <clkwiz_change_mipi_freq+0x40>
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 1002a04:	e3a00039 	mov	r0, #57	; 0x39
 1002a08:	e3063cf0 	movw	r3, #27888	; 0x6cf0
 1002a0c:	e3062da0 	movw	r2, #28064	; 0x6da0
 1002a10:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 1002a14:	e58d0000 	str	r0, [sp]
 1002a18:	e3403105 	movt	r3, #261	; 0x105
 1002a1c:	e3a00004 	mov	r0, #4
 1002a20:	e3402105 	movt	r2, #261	; 0x105
 1002a24:	e3401105 	movt	r1, #261	; 0x105
 1002a28:	eb00027a 	bl	1003418 <d_printf>
 1002a2c:	e3e00062 	mvn	r0, #98	; 0x62
 1002a30:	fa001ebe 	blx	100a530 <exit>
 1002a34:	e320f000 	nop	{0}
 1002a38:	88e368f1 	.word	0x88e368f1
 1002a3c:	3ee4f8b5 	.word	0x3ee4f8b5
 1002a40:	00000000 	.word	0x00000000
 1002a44:	412e8480 	.word	0x412e8480
 1002a48:	44480000 	.word	0x44480000
 1002a4c:	44160000 	.word	0x44160000
 1002a50:	00000000 	.word	0x00000000
 1002a54:	501502f9 	.word	0x501502f9
 1002a58:	447a0000 	.word	0x447a0000
 1002a5c:	44960000 	.word	0x44960000
 1002a60:	42d40000 	.word	0x42d40000

01002a64 <clkwiz_dump_state>:
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 1002a64:	e5903000 	ldr	r3, [r0]
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 1002a68:	e3061eb0 	movw	r1, #28336	; 0x6eb0
{
 1002a6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 1002a70:	e1a02000 	mov	r2, r0
{
 1002a74:	ed2d8b04 	vpush	{d8-d9}
 1002a78:	e1a08000 	mov	r8, r0
 1002a7c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 1002a80:	e3401105 	movt	r1, #261	; 0x105
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 1002a84:	e5933004 	ldr	r3, [r3, #4]
	uint32_t base_addr = 0x208;
 1002a88:	e3a04f82 	mov	r4, #520	; 0x208
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 1002a8c:	eddf7a91 	vldr	s15, [pc, #580]	; 1002cd8 <clkwiz_dump_state+0x274>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 1002a90:	e3a05001 	mov	r5, #1
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 1002a94:	ed909a24 	vldr	s18, [r0, #144]	; 0x90
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 1002a98:	e3a00002 	mov	r0, #2
 1002a9c:	e5936200 	ldr	r6, [r3, #512]	; 0x200
 1002aa0:	e3a09000 	mov	r9, #0
 1002aa4:	e593b204 	ldr	fp, [r3, #516]	; 0x204
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 1002aa8:	eeb08a67 	vmov.f32	s16, s15
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 1002aac:	e7e93856 	ubfx	r3, r6, #16, #10
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 1002ab0:	e7e7a456 	ubfx	sl, r6, #8, #8
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 1002ab4:	e6ef7076 	uxtb	r7, r6
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 1002ab8:	ee083a90 	vmov	s17, r3
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 1002abc:	eef86ae8 	vcvt.f32.s32	s13, s17
 1002ac0:	ee07aa10 	vmov	s14, sl
 1002ac4:	eeb87ac7 	vcvt.f32.s32	s14, s14
 1002ac8:	eec69aa7 	vdiv.f32	s19, s13, s15
 1002acc:	ee799a87 	vadd.f32	s19, s19, s14
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 1002ad0:	eb000250 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1002ad4:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002ad8:	e3a00002 	mov	r0, #2
 1002adc:	e3401105 	movt	r1, #261	; 0x105
 1002ae0:	eb00024c 	bl	1003418 <d_printf>
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 1002ae4:	e5983000 	ldr	r3, [r8]
 1002ae8:	e3061edc 	movw	r1, #28380	; 0x6edc
 1002aec:	e3401105 	movt	r1, #261	; 0x105
 1002af0:	e3a00002 	mov	r0, #2
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 1002af4:	ee299a89 	vmul.f32	s18, s19, s18
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 1002af8:	e5932004 	ldr	r2, [r3, #4]
 1002afc:	eb000245 	bl	1003418 <d_printf>
	d_printf(D_INFO, "Configured refclk freq: %2.5f MHz", ifc->refclk_freq);
 1002b00:	edd87a24 	vldr	s15, [r8, #144]	; 0x90
 1002b04:	e3061efc 	movw	r1, #28412	; 0x6efc
 1002b08:	e3401105 	movt	r1, #261	; 0x105
 1002b0c:	e3a00002 	mov	r0, #2
 1002b10:	eef70ae7 	vcvt.f64.f32	d16, s15
 1002b14:	ec532b30 	vmov	r2, r3, d16
 1002b18:	eb00023e 	bl	1003418 <d_printf>
	d_printf(D_INFO, "CLKCFG0 register:       0x%08x", ccfg_0);
 1002b1c:	e3061f20 	movw	r1, #28448	; 0x6f20
 1002b20:	e1a02006 	mov	r2, r6
 1002b24:	e3401105 	movt	r1, #261	; 0x105
 1002b28:	e3a00002 	mov	r0, #2
 1002b2c:	eb000239 	bl	1003418 <d_printf>
	d_printf(D_INFO, "CLKFBOUT register:      0x%08x", clkfbout_phase);
 1002b30:	e3061f40 	movw	r1, #28480	; 0x6f40
 1002b34:	e1a0200b 	mov	r2, fp
 1002b38:	e3401105 	movt	r1, #261	; 0x105
 1002b3c:	e3a00002 	mov	r0, #2
 1002b40:	eb000234 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1002b44:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002b48:	e3a00002 	mov	r0, #2
 1002b4c:	e3401105 	movt	r1, #261	; 0x105
	clkfbout_frac_en = !!(ccfg_0 & (1 << 26));
 1002b50:	e7e06d56 	ubfx	r6, r6, #26, #1
	d_printf(D_INFO, "");
 1002b54:	eb00022f 	bl	1003418 <d_printf>
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 1002b58:	e3061f60 	movw	r1, #28512	; 0x6f60
 1002b5c:	e1a02007 	mov	r2, r7
 1002b60:	e3401105 	movt	r1, #261	; 0x105
 1002b64:	e3a00002 	mov	r0, #2
 1002b68:	eb00022a 	bl	1003418 <d_printf>
	d_printf(D_INFO, "CLKFBOUT multiplier:    %2.5f (MULT=%d, FRAC=%d, FRAC_EN=%d)", \
 1002b6c:	eef70ae9 	vcvt.f64.f32	d16, s19
 1002b70:	e3061f7c 	movw	r1, #28540	; 0x6f7c
 1002b74:	edcd8a01 	vstr	s17, [sp, #4]
 1002b78:	e3401105 	movt	r1, #261	; 0x105
 1002b7c:	e3a00002 	mov	r0, #2
 1002b80:	e58da000 	str	sl, [sp]
 1002b84:	e58d6008 	str	r6, [sp, #8]
 1002b88:	ec532b30 	vmov	r2, r3, d16
 1002b8c:	eb000221 	bl	1003418 <d_printf>
	d_printf(D_INFO, "FBOUT frequency:        %2.5f MHz", fbout_freq);
 1002b90:	eef70ac9 	vcvt.f64.f32	d16, s18
 1002b94:	e3061fbc 	movw	r1, #28604	; 0x6fbc
 1002b98:	e3401105 	movt	r1, #261	; 0x105
 1002b9c:	e3a00002 	mov	r0, #2
 1002ba0:	ec532b30 	vmov	r2, r3, d16
 1002ba4:	eb00021b 	bl	1003418 <d_printf>
	d_printf(D_INFO, "");
 1002ba8:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002bac:	e3a00002 	mov	r0, #2
 1002bb0:	e3401105 	movt	r1, #261	; 0x105
 1002bb4:	eb000217 	bl	1003418 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 1002bb8:	ee077a90 	vmov	s15, r7
 1002bbc:	eef88ae7 	vcvt.f32.s32	s17, s15
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 1002bc0:	e5983000 	ldr	r3, [r8]
		if(i > 1) {
 1002bc4:	e3550001 	cmp	r5, #1
 1002bc8:	ee079a10 	vmov	s14, r9
			clk_frac = 0;
 1002bcc:	e3a00000 	mov	r0, #0
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 1002bd0:	e5933004 	ldr	r3, [r3, #4]
 1002bd4:	e793c004 	ldr	ip, [r3, r4]
* @note		C-style signature:
* 		u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)
*
******************************************************************************/
static inline u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)  {
			return (Xil_In32((BaseAddress) + (u32)(RegOffset)));
 1002bd8:	e2832004 	add	r2, r3, #4
 1002bdc:	e2833008 	add	r3, r3, #8
 1002be0:	e7927004 	ldr	r7, [r2, r4]
 1002be4:	e7936004 	ldr	r6, [r3, r4]
		clk_frac_en = !!(reg_divfrac & 0x00040000);
 1002be8:	e7e0395c 	ubfx	r3, ip, #18, #1
		clk_div     =   (reg_divfrac & 0x000000ff);
 1002bec:	e6ef207c 	uxtb	r2, ip
		if(i > 1) {
 1002bf0:	0a000031 	beq	1002cbc <clkwiz_dump_state+0x258>
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1002bf4:	ee072a90 	vmov	s15, r2
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1002bf8:	e3061fe0 	movw	r1, #28640	; 0x6fe0
 1002bfc:	e58dc000 	str	ip, [sp]
 1002c00:	e3401105 	movt	r1, #261	; 0x105
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1002c04:	eef87ae7 	vcvt.f32.s32	s15, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1002c08:	e58d3020 	str	r3, [sp, #32]
 1002c0c:	e1a03004 	mov	r3, r4
 1002c10:	e58d0010 	str	r0, [sp, #16]
 1002c14:	e3a00002 	mov	r0, #2
 1002c18:	e58d200c 	str	r2, [sp, #12]
 1002c1c:	e1a02005 	mov	r2, r5
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1002c20:	ee777a87 	vadd.f32	s15, s15, s14
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 1002c24:	e2855001 	add	r5, r5, #1
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1002c28:	e58d6008 	str	r6, [sp, #8]
		base_addr += 12;
 1002c2c:	e284400c 	add	r4, r4, #12
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1002c30:	e58d7004 	str	r7, [sp, #4]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1002c34:	ee897a27 	vdiv.f32	s14, s18, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1002c38:	eef70ae7 	vcvt.f64.f32	d16, s15
 1002c3c:	edcd0b06 	vstr	d16, [sp, #24]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1002c40:	eec79a28 	vdiv.f32	s19, s14, s17
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1002c44:	eb0001f3 	bl	1003418 <d_printf>
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1002c48:	ee077a90 	vmov	s15, r7
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 1002c4c:	e3071048 	movw	r1, #28744	; 0x7048
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1002c50:	eeb87a67 	vcvt.f32.u32	s14, s15
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 1002c54:	e3401105 	movt	r1, #261	; 0x105
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1002c58:	ee076a90 	vmov	s15, r6
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 1002c5c:	e3a00002 	mov	r0, #2
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1002c60:	eef87a67 	vcvt.f32.u32	s15, s15
 1002c64:	eec76a08 	vdiv.f32	s13, s14, s16
 1002c68:	ee877a88 	vdiv.f32	s14, s15, s16
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 1002c6c:	eef70ae9 	vcvt.f64.f32	d16, s19
 1002c70:	ec532b30 	vmov	r2, r3, d16
 1002c74:	eef71ae6 	vcvt.f64.f32	d17, s13
 1002c78:	eeb77ac7 	vcvt.f64.f32	d7, s14
 1002c7c:	edcd1b02 	vstr	d17, [sp, #8]
 1002c80:	ed8d7b00 	vstr	d7, [sp]
 1002c84:	eb0001e3 	bl	1003418 <d_printf>
		d_printf(D_INFO, "");
 1002c88:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002c8c:	e3a00002 	mov	r0, #2
 1002c90:	e3401105 	movt	r1, #261	; 0x105
 1002c94:	eb0001df 	bl	1003418 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 1002c98:	e3550007 	cmp	r5, #7
 1002c9c:	1affffc7 	bne	1002bc0 <clkwiz_dump_state+0x15c>
	d_printf(D_INFO, "");
 1002ca0:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1002ca4:	e3a00002 	mov	r0, #2
 1002ca8:	e3401105 	movt	r1, #261	; 0x105
}
 1002cac:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1002cb0:	ecbd8b04 	vpop	{d8-d9}
 1002cb4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "");
 1002cb8:	ea0001d6 	b	1003418 <d_printf>
		clk_frac    =   (reg_divfrac & 0x0003ff00);
 1002cbc:	e3a00cff 	mov	r0, #65280	; 0xff00
 1002cc0:	e3400003 	movt	r0, #3
 1002cc4:	e000000c 	and	r0, r0, ip
 1002cc8:	ee070a90 	vmov	s15, r0
 1002ccc:	eef87ae7 	vcvt.f32.s32	s15, s15
 1002cd0:	ee877a88 	vdiv.f32	s14, s15, s16
 1002cd4:	eaffffc6 	b	1002bf4 <clkwiz_dump_state+0x190>
 1002cd8:	447a0000 	.word	0x447a0000

01002cdc <clkwiz_commit>:
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 1002cdc:	e5903000 	ldr	r3, [r0]
{
 1002ce0:	e92d4010 	push	{r4, lr}
 1002ce4:	e1a04000 	mov	r4, r0
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 1002ce8:	e5933004 	ldr	r3, [r3, #4]
 1002cec:	e5932004 	ldr	r2, [r3, #4]
 1002cf0:	e3120001 	tst	r2, #1
 1002cf4:	0a000016 	beq	1002d54 <clkwiz_commit+0x78>
	*LocalAddr = Value;
 1002cf8:	e3a02003 	mov	r2, #3
 1002cfc:	e583225c 	str	r2, [r3, #604]	; 0x25c
	asm("nop");
 1002d00:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1002d04:	e5942000 	ldr	r2, [r4]
	int timeout = 100000;
 1002d08:	e30836a0 	movw	r3, #34464	; 0x86a0
 1002d0c:	e3a00000 	mov	r0, #0
 1002d10:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1002d14:	e5922004 	ldr	r2, [r2, #4]
 1002d18:	e2821004 	add	r1, r2, #4
 1002d1c:	e582025c 	str	r0, [r2, #604]	; 0x25c
 1002d20:	ea000001 	b	1002d2c <clkwiz_commit+0x50>
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 1002d24:	e2533001 	subs	r3, r3, #1
 1002d28:	38bd8010 	popcc	{r4, pc}
	return *(volatile u32 *) Addr;
 1002d2c:	e5912000 	ldr	r2, [r1]
 1002d30:	e3120001 	tst	r2, #1
 1002d34:	0afffffa 	beq	1002d24 <clkwiz_commit+0x48>
	if(timeout == 0) {
 1002d38:	e3530000 	cmp	r3, #0
 1002d3c:	18bd8010 	popne	{r4, pc}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 1002d40:	e3061e74 	movw	r1, #28276	; 0x6e74
 1002d44:	e3a00004 	mov	r0, #4
 1002d48:	e3401105 	movt	r1, #261	; 0x105
	}
}
 1002d4c:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 1002d50:	ea0001b0 	b	1003418 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 1002d54:	e3061e40 	movw	r1, #28224	; 0x6e40
 1002d58:	e3a00004 	mov	r0, #4
 1002d5c:	e3401105 	movt	r1, #261	; 0x105
 1002d60:	eb0001ac 	bl	1003418 <d_printf>
 1002d64:	e5943000 	ldr	r3, [r4]
 1002d68:	e5933004 	ldr	r3, [r3, #4]
 1002d6c:	eaffffe1 	b	1002cf8 <clkwiz_commit+0x1c>

01002d70 <fabcfg_init>:

/*
 * Initialise the fabric configuration engine.  Tests the peripheral.
 */
void fabcfg_init()
{
 1002d70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int i;
	uint32_t magic, test, version, ver_uh, ver_lh, userid;

	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 1002d74:	e3a04000 	mov	r4, #0
 1002d78:	e34843c1 	movt	r4, #33729	; 0x83c1
 1002d7c:	e3071094 	movw	r1, #28820	; 0x7094
{
 1002d80:	e24dd008 	sub	sp, sp, #8
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 1002d84:	e3401105 	movt	r1, #261	; 0x105
 1002d88:	e1a02004 	mov	r2, r4
 1002d8c:	e3a00002 	mov	r0, #2
 1002d90:	eb0001a0 	bl	1003418 <d_printf>
	dsb();
 1002d94:	f57ff04f 	dsb	sy
	res = _FAB_CFG_ACCESS(reg);
 1002d98:	e5942008 	ldr	r2, [r4, #8]
	dsb();
 1002d9c:	f57ff04f 	dsb	sy

	// Verify that magic value is present and correct
	magic = fabcfg_read(FAB_CFG_MAGIC1);
	if(magic == FAB_CFG_MAGIC_VALUE) {
 1002da0:	e3073670 	movw	r3, #30320	; 0x7670
 1002da4:	e345336d 	movt	r3, #21357	; 0x536d
 1002da8:	e1520003 	cmp	r2, r3
 1002dac:	1a00004d 	bne	1002ee8 <fabcfg_init+0x178>
		d_printf(D_INFO, "FabCfg: Magic value: 0x%08x - OK", magic);
 1002db0:	e30710b4 	movw	r1, #28852	; 0x70b4
 1002db4:	e3a00002 	mov	r0, #2
 1002db8:	e3401105 	movt	r1, #261	; 0x105
 1002dbc:	e30559c8 	movw	r5, #22984	; 0x59c8
 1002dc0:	eb000194 	bl	1003418 <d_printf>
	/*
	 * Test the BRAM block by writing a number of patterns into DUMMY1 and
	 * reading them out of DUMMY1 and DUMMY2.  Data is copied from DUMMY1
	 * into DUMMY2 via the fabric.
	 */
	d_printf(D_INFO, "FabCfg: Running %d test patterns of register interface", FBCFG_NUM_TEST_PATTERNS);
 1002dc4:	e30710d8 	movw	r1, #28888	; 0x70d8
 1002dc8:	e3a02006 	mov	r2, #6
 1002dcc:	e3401105 	movt	r1, #261	; 0x105
 1002dd0:	e3a00002 	mov	r0, #2
 1002dd4:	e3405105 	movt	r5, #261	; 0x105
	_FAB_CFG_ACCESS(reg) = data;
 1002dd8:	e3057678 	movw	r7, #22136	; 0x5678
 1002ddc:	e3046321 	movw	r6, #17185	; 0x4321
 1002de0:	e2858018 	add	r8, r5, #24
 1002de4:	eb00018b 	bl	1003418 <d_printf>
 1002de8:	e3417234 	movt	r7, #4660	; 0x1234
 1002dec:	e3486765 	movt	r6, #34661	; 0x8765
 1002df0:	ea000015 	b	1002e4c <fabcfg_init+0xdc>
		test = fabcfg_read(FAB_CFG_DUMMY1);

		if(test == fabcfg_dummy_tests[i]) {
			d_printf(D_EXINFO, "FabCfg: DummyTest1 value: 0x%08x - OK", test);
		} else {
			d_printf(D_ERROR, "FabCfg: DummyTest1 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 1002df4:	e307116c 	movw	r1, #29036	; 0x716c
 1002df8:	e3a00004 	mov	r0, #4
 1002dfc:	e3401105 	movt	r1, #261	; 0x105
 1002e00:	eb000184 	bl	1003418 <d_printf>
	dsb();
 1002e04:	f57ff04f 	dsb	sy
	res = _FAB_CFG_ACCESS(reg);
 1002e08:	e5942004 	ldr	r2, [r4, #4]
	dsb();
 1002e0c:	f57ff04f 	dsb	sy
		}

		test = fabcfg_read(FAB_CFG_DUMMY2);

		if(test == fabcfg_dummy_tests[i]) {
 1002e10:	e5153004 	ldr	r3, [r5, #-4]
 1002e14:	e1530002 	cmp	r3, r2
 1002e18:	0a000003 	beq	1002e2c <fabcfg_init+0xbc>
			//d_printf(D_EXINFO, "FabCfg: DummyTest2 value: 0x%08x - OK", test);
		} else {
			d_printf(D_ERROR, "FabCfg: DummyTest2 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 1002e1c:	e30711a8 	movw	r1, #29096	; 0x71a8
 1002e20:	e3a00004 	mov	r0, #4
 1002e24:	e3401105 	movt	r1, #261	; 0x105
 1002e28:	eb00017a 	bl	1003418 <d_printf>
	dsb();
 1002e2c:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1002e30:	e5847000 	str	r7, [r4]
	dsb();
 1002e34:	f57ff04f 	dsb	sy
	dsb();
 1002e38:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1002e3c:	e5846004 	str	r6, [r4, #4]
	dsb();
 1002e40:	f57ff04f 	dsb	sy
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 1002e44:	e1550008 	cmp	r5, r8
 1002e48:	0a00000f 	beq	1002e8c <fabcfg_init+0x11c>
		fabcfg_write(FAB_CFG_DUMMY1, fabcfg_dummy_tests[i]);
 1002e4c:	e5953000 	ldr	r3, [r5]
	dsb();
 1002e50:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1002e54:	e5843000 	str	r3, [r4]
	dsb();
 1002e58:	f57ff04f 	dsb	sy
	dsb();
 1002e5c:	f57ff04f 	dsb	sy
	res = _FAB_CFG_ACCESS(reg);
 1002e60:	e5942000 	ldr	r2, [r4]
	dsb();
 1002e64:	f57ff04f 	dsb	sy
		if(test == fabcfg_dummy_tests[i]) {
 1002e68:	e4953004 	ldr	r3, [r5], #4
 1002e6c:	e1530002 	cmp	r3, r2
 1002e70:	1affffdf 	bne	1002df4 <fabcfg_init+0x84>
			d_printf(D_EXINFO, "FabCfg: DummyTest1 value: 0x%08x - OK", test);
 1002e74:	e3071144 	movw	r1, #28996	; 0x7144
 1002e78:	e1a02003 	mov	r2, r3
 1002e7c:	e3401105 	movt	r1, #261	; 0x105
 1002e80:	e3a00001 	mov	r0, #1
 1002e84:	eb000163 	bl	1003418 <d_printf>
 1002e88:	eaffffdd 	b	1002e04 <fabcfg_init+0x94>
		// Write some dummy values to detect sticky bus faults
		fabcfg_write(FAB_CFG_DUMMY1, 0x12345678);
		fabcfg_write(FAB_CFG_DUMMY2, 0x87654321);
	}

	d_printf(D_INFO, "FabCfg: All tests passed");
 1002e8c:	e30711e4 	movw	r1, #29156	; 0x71e4
 1002e90:	e3a00002 	mov	r0, #2
 1002e94:	e3401105 	movt	r1, #261	; 0x105
 1002e98:	eb00015e 	bl	1003418 <d_printf>
	dsb();
 1002e9c:	f57ff04f 	dsb	sy
	res = _FAB_CFG_ACCESS(reg);
 1002ea0:	e3a03000 	mov	r3, #0
 1002ea4:	e34833c1 	movt	r3, #33729	; 0x83c1
 1002ea8:	e593200c 	ldr	r2, [r3, #12]
	dsb();
 1002eac:	f57ff04f 	dsb	sy
	dsb();
 1002eb0:	f57ff04f 	dsb	sy
	res = _FAB_CFG_ACCESS(reg);
 1002eb4:	e5933010 	ldr	r3, [r3, #16]
	dsb();
 1002eb8:	f57ff04f 	dsb	sy

	/*
	 * Read the bitstream version and USRACCESS data
	 */
	version = fabcfg_read(FAB_CFG_VERSION);
	ver_uh = (version & 0xffff0000) >> 16;
 1002ebc:	e1a00822 	lsr	r0, r2, #16
	ver_lh = (version & 0x0000ffff);
	userid = fabcfg_read(FAB_CFG_USRACCESS);

	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 1002ec0:	e3071200 	movw	r1, #29184	; 0x7200
 1002ec4:	e58d3004 	str	r3, [sp, #4]
 1002ec8:	e3401105 	movt	r1, #261	; 0x105
 1002ecc:	e6ef3072 	uxtb	r3, r2
 1002ed0:	e58d0000 	str	r0, [sp]
 1002ed4:	e7e72452 	ubfx	r2, r2, #8, #8
 1002ed8:	e3a00002 	mov	r0, #2
 1002edc:	eb00014d 	bl	1003418 <d_printf>
			(ver_lh & 0xff00) >> 8, ver_lh & 0xff, ver_uh, userid);
}
 1002ee0:	e28dd008 	add	sp, sp, #8
 1002ee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "FabCfg: Magic value: 0x%08x - Not OK, Expect 0x%08x", magic, FAB_CFG_MAGIC_VALUE);
 1002ee8:	e3071110 	movw	r1, #28944	; 0x7110
 1002eec:	e3a00004 	mov	r0, #4
 1002ef0:	e3401105 	movt	r1, #261	; 0x105
 1002ef4:	eb000147 	bl	1003418 <d_printf>
		exit(-1);
 1002ef8:	e3e00000 	mvn	r0, #0
 1002efc:	fa001d8b 	blx	100a530 <exit>

01002f00 <irq_xscutimer>:
 */
volatile void irq_xscutimer(void *callback)
{
	XScuTimer *timer = (XScuTimer *) callback;

	if(XScuTimer_IsExpired(timer)) {
 1002f00:	e5903004 	ldr	r3, [r0, #4]
 1002f04:	e593300c 	ldr	r3, [r3, #12]
 1002f08:	e3130001 	tst	r3, #1
		g_hal.g_timer_overflow++;
 1002f0c:	13013b28 	movwne	r3, #6952	; 0x1b28
 1002f10:	1340310a 	movtne	r3, #266	; 0x10a
 1002f14:	1593204c 	ldrne	r2, [r3, #76]	; 0x4c
 1002f18:	12822001 	addne	r2, r2, #1
 1002f1c:	1583204c 	strne	r2, [r3, #76]	; 0x4c
	}
}
 1002f20:	e12fff1e 	bx	lr

01002f24 <d_printf.constprop.5>:
 * @param	...			Varadic args
 *
 * @note	For formats besides D_RAW, this function appends \r\n to all outputs and prints info/warn/error code and
 * 			optionally prints the system timer.
 */
void d_printf(int debug_code, char *fmt, ...)
 1002f24:	e92d000e 	push	{r1, r2, r3}
			case D_EXINFO:
				print("[--] ");							// dull white text (default)
				break;

			case D_INFO:
				print("\033[0;97m[ii] "); 				// bright white text
 1002f28:	e3070240 	movw	r0, #29248	; 0x7240
void d_printf(int debug_code, char *fmt, ...)
 1002f2c:	e92d40d0 	push	{r4, r6, r7, lr}
 1002f30:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1002f34:	e24dd01c 	sub	sp, sp, #28
				print("\033[0;97m[ii] "); 				// bright white text
 1002f38:	e3400105 	movt	r0, #261	; 0x105
 1002f3c:	eb001585 	bl	1008558 <print>
				print("\033[97;41m[EE]\033[0;91m ");	// red text
				break;
		}

#if DBG_PRINT_TIMES == 1
		if(g_hal.g_timer_have_init) {
 1002f40:	e3013b28 	movw	r3, #6952	; 0x1b28
 1002f44:	e340310a 	movt	r3, #266	; 0x10a
 1002f48:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 1002f4c:	e3540000 	cmp	r4, #0
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
			sec = total_usec / 1000000;
			usec = total_usec % 1000000;
		} else {
			sec = 0;
			usec = 0;
 1002f50:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 1002f54:	0a00001b 	beq	1002fc8 <d_printf.constprop.5+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1002f58:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002f5c:	eddf3b37 	vldr	d19, [pc, #220]	; 1003040 <d_printf.constprop.5+0x11c>
 1002f60:	eddf2b38 	vldr	d18, [pc, #224]	; 1003048 <d_printf.constprop.5+0x124>
 1002f64:	e5922004 	ldr	r2, [r2, #4]
 1002f68:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1002f6c:	e1e02002 	mvn	r2, r2
 1002f70:	ee073a90 	vmov	s15, r3
 1002f74:	eef80b67 	vcvt.f64.u32	d16, s15
 1002f78:	ee072a90 	vmov	s15, r2
 1002f7c:	eef81b67 	vcvt.f64.u32	d17, s15
 1002f80:	ee600ba3 	vmul.f64	d16, d16, d19
 1002f84:	ee410ba2 	vmla.f64	d16, d17, d18
 1002f88:	ec510b30 	vmov	r0, r1, d16
 1002f8c:	fa001d11 	blx	100a3d8 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 1002f90:	e3042240 	movw	r2, #16960	; 0x4240
 1002f94:	e3a03000 	mov	r3, #0
 1002f98:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1002f9c:	e1a06000 	mov	r6, r0
 1002fa0:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 1002fa4:	fa001cef 	blx	100a368 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 1002fa8:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 1002fac:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 1002fb0:	e340200f 	movt	r2, #15
 1002fb4:	e3a03000 	mov	r3, #0
 1002fb8:	e1a00006 	mov	r0, r6
 1002fbc:	e1a01007 	mov	r1, r7
 1002fc0:	fa001ce8 	blx	100a368 <__aeabi_uldivmod>
 1002fc4:	e1a03002 	mov	r3, r2
		}

		if(debug_code != D_RAW) {
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1002fc8:	e3072250 	movw	r2, #29264	; 0x7250
 1002fcc:	e58d3000 	str	r3, [sp]
 1002fd0:	e3402105 	movt	r2, #261	; 0x105
 1002fd4:	e1a03004 	mov	r3, r4
 1002fd8:	e3a01a01 	mov	r1, #4096	; 0x1000
 1002fdc:	e28d000c 	add	r0, sp, #12
 1002fe0:	fa0024c4 	blx	100c2f8 <snprintf>
			print(time_buffer);
 1002fe4:	e28d000c 	add	r0, sp, #12
 1002fe8:	eb00155a 	bl	1008558 <print>
		}
#endif

		va_list args;
		va_start(args, fmt);
 1002fec:	e28dca01 	add	ip, sp, #4096	; 0x1000

		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002ff0:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1002ff4:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1002ff8:	e282202c 	add	r2, r2, #44	; 0x2c
 1002ffc:	e1a0300c 	mov	r3, ip
 1003000:	e5922000 	ldr	r2, [r2]
 1003004:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003008:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100300c:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003010:	fa003531 	blx	10104dc <vsnprintf>
		print(buffer);
 1003014:	e28d0018 	add	r0, sp, #24
 1003018:	eb00154e 	bl	1008558 <print>

		if(debug_code != D_RAW) {
			print("\033[m\r\n");
 100301c:	e307025c 	movw	r0, #29276	; 0x725c
 1003020:	e3400105 	movt	r0, #261	; 0x105
 1003024:	eb00154b 	bl	1008558 <print>
		}

		va_end(args);
	}
}
 1003028:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100302c:	e28dd01c 	add	sp, sp, #28
 1003030:	e8bd40d0 	pop	{r4, r6, r7, lr}
 1003034:	e28dd00c 	add	sp, sp, #12
 1003038:	e12fff1e 	bx	lr
 100303c:	e320f000 	nop	{0}
 1003040:	a17f0000 	.word	0xa17f0000
 1003044:	41689374 	.word	0x41689374
 1003048:	a17f0000 	.word	0xa17f0000
 100304c:	3f689374 	.word	0x3f689374

01003050 <d_printf.constprop.6>:
void d_printf(int debug_code, char *fmt, ...)
 1003050:	e92d000e 	push	{r1, r2, r3}
}
 1003054:	e28dd00c 	add	sp, sp, #12
 1003058:	e12fff1e 	bx	lr

0100305c <d_printf.constprop.7>:
void d_printf(int debug_code, char *fmt, ...)
 100305c:	e92d000e 	push	{r1, r2, r3}
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003060:	e3070264 	movw	r0, #29284	; 0x7264
void d_printf(int debug_code, char *fmt, ...)
 1003064:	e92d40d0 	push	{r4, r6, r7, lr}
 1003068:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100306c:	e24dd01c 	sub	sp, sp, #28
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003070:	e3400105 	movt	r0, #261	; 0x105
 1003074:	eb001537 	bl	1008558 <print>
		if(g_hal.g_timer_have_init) {
 1003078:	e3013b28 	movw	r3, #6952	; 0x1b28
 100307c:	e340310a 	movt	r3, #266	; 0x10a
 1003080:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 1003084:	e3540000 	cmp	r4, #0
			usec = 0;
 1003088:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 100308c:	0a00001b 	beq	1003100 <d_printf.constprop.7+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003090:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003094:	eddf3b37 	vldr	d19, [pc, #220]	; 1003178 <d_printf.constprop.7+0x11c>
 1003098:	eddf2b38 	vldr	d18, [pc, #224]	; 1003180 <d_printf.constprop.7+0x124>
 100309c:	e5922004 	ldr	r2, [r2, #4]
 10030a0:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 10030a4:	e1e02002 	mvn	r2, r2
 10030a8:	ee073a90 	vmov	s15, r3
 10030ac:	eef80b67 	vcvt.f64.u32	d16, s15
 10030b0:	ee072a90 	vmov	s15, r2
 10030b4:	eef81b67 	vcvt.f64.u32	d17, s15
 10030b8:	ee600ba3 	vmul.f64	d16, d16, d19
 10030bc:	ee410ba2 	vmla.f64	d16, d17, d18
 10030c0:	ec510b30 	vmov	r0, r1, d16
 10030c4:	fa001cc3 	blx	100a3d8 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 10030c8:	e3042240 	movw	r2, #16960	; 0x4240
 10030cc:	e3a03000 	mov	r3, #0
 10030d0:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 10030d4:	e1a06000 	mov	r6, r0
 10030d8:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 10030dc:	fa001ca1 	blx	100a368 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 10030e0:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 10030e4:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 10030e8:	e340200f 	movt	r2, #15
 10030ec:	e3a03000 	mov	r3, #0
 10030f0:	e1a00006 	mov	r0, r6
 10030f4:	e1a01007 	mov	r1, r7
 10030f8:	fa001c9a 	blx	100a368 <__aeabi_uldivmod>
 10030fc:	e1a03002 	mov	r3, r2
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1003100:	e3072250 	movw	r2, #29264	; 0x7250
 1003104:	e58d3000 	str	r3, [sp]
 1003108:	e3402105 	movt	r2, #261	; 0x105
 100310c:	e1a03004 	mov	r3, r4
 1003110:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003114:	e28d000c 	add	r0, sp, #12
 1003118:	fa002476 	blx	100c2f8 <snprintf>
			print(time_buffer);
 100311c:	e28d000c 	add	r0, sp, #12
 1003120:	eb00150c 	bl	1008558 <print>
		va_start(args, fmt);
 1003124:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003128:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100312c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003130:	e282202c 	add	r2, r2, #44	; 0x2c
 1003134:	e1a0300c 	mov	r3, ip
 1003138:	e5922000 	ldr	r2, [r2]
 100313c:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003140:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 1003144:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003148:	fa0034e3 	blx	10104dc <vsnprintf>
		print(buffer);
 100314c:	e28d0018 	add	r0, sp, #24
 1003150:	eb001500 	bl	1008558 <print>
			print("\033[m\r\n");
 1003154:	e307025c 	movw	r0, #29276	; 0x725c
 1003158:	e3400105 	movt	r0, #261	; 0x105
 100315c:	eb0014fd 	bl	1008558 <print>
}
 1003160:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1003164:	e28dd01c 	add	sp, sp, #28
 1003168:	e8bd40d0 	pop	{r4, r6, r7, lr}
 100316c:	e28dd00c 	add	sp, sp, #12
 1003170:	e12fff1e 	bx	lr
 1003174:	e320f000 	nop	{0}
 1003178:	a17f0000 	.word	0xa17f0000
 100317c:	41689374 	.word	0x41689374
 1003180:	a17f0000 	.word	0xa17f0000
 1003184:	3f689374 	.word	0x3f689374

01003188 <d_read_timing.part.3>:
 *
 * @param	Timer index (0-15)
 *
 * @return	64-bit counter value
 */
uint64_t d_read_timing(int index)
 1003188:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
{
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100318c:	e30001cb 	movw	r0, #459	; 0x1cb
uint64_t d_read_timing(int index)
 1003190:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003194:	e307327c 	movw	r3, #29308	; 0x727c
 1003198:	e307228c 	movw	r2, #29324	; 0x728c
 100319c:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 10031a0:	e58d0000 	str	r0, [sp]
 10031a4:	e3403105 	movt	r3, #261	; 0x105
 10031a8:	e3a00004 	mov	r0, #4
 10031ac:	e3402105 	movt	r2, #261	; 0x105
 10031b0:	e3401105 	movt	r1, #261	; 0x105
 10031b4:	ebffffa8 	bl	100305c <d_printf.constprop.7>
 10031b8:	e3e00062 	mvn	r0, #98	; 0x62
 10031bc:	fa001cdb 	blx	100a530 <exit>

010031c0 <d_xilinx_assert>:
/**
 * Xilinx assert handler.
 */
void d_xilinx_assert(const char8 *file, s32 line)
{
	d_printf(D_ERROR, "Assert failed at line %d of file `%s'\r\n", line, file);
 10031c0:	e1a02001 	mov	r2, r1
 10031c4:	e30712a8 	movw	r1, #29352	; 0x72a8
 10031c8:	e1a03000 	mov	r3, r0
 10031cc:	e3401105 	movt	r1, #261	; 0x105
 10031d0:	e3a00004 	mov	r0, #4
 10031d4:	eaffffa0 	b	100305c <d_printf.constprop.7>

010031d8 <bogo_calibrate>:
{
 10031d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 10031dc:	e3016b28 	movw	r6, #6952	; 0x1b28
 10031e0:	e340610a 	movt	r6, #266	; 0x10a
 10031e4:	e3a03000 	mov	r3, #0
 10031e8:	e3443020 	movt	r3, #16416	; 0x4020
 10031ec:	e3a02002 	mov	r2, #2
 10031f0:	e596a014 	ldr	sl, [r6, #20]
	uint64_t timing_total = 0;
 10031f4:	e3a0b000 	mov	fp, #0
{
 10031f8:	ed2d8b02 	vpush	{d8}
 10031fc:	e24dd024 	sub	sp, sp, #36	; 0x24
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003200:	ed9f8a5c 	vldr	s16, [pc, #368]	; 1003378 <bogo_calibrate+0x1a0>
	while(iters--) {
 1003204:	e3e08000 	mvn	r8, #0
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1003208:	e58d2010 	str	r2, [sp, #16]
	while(iters--) {
 100320c:	e3e09000 	mvn	r9, #0
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 1003210:	ee073a90 	vmov	s15, r3
	uint64_t timing_total = 0;
 1003214:	e1a0200b 	mov	r2, fp
 1003218:	e28aa004 	add	sl, sl, #4
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 100321c:	e5863158 	str	r3, [r6, #344]	; 0x158
 1003220:	e59a7000 	ldr	r7, [sl]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003224:	ee687a27 	vmul.f32	s15, s16, s15
 1003228:	e58d2018 	str	r2, [sp, #24]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100322c:	e3770c01 	cmn	r7, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003230:	e1e07007 	mvn	r7, r7
		msb = g_hal.g_timer_overflow;
 1003234:	9596304c 	ldrls	r3, [r6, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 1003238:	e5867058 	str	r7, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100323c:	ee170a90 	vmov	r0, s15
		msb = g_hal.g_timer_overflow;
 1003240:	958d301c 	strls	r3, [sp, #28]
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003244:	e59d301c 	ldr	r3, [sp, #28]
	g_hal.timers[index] = timer_value;
 1003248:	e586305c 	str	r3, [r6, #92]	; 0x5c
 100324c:	e58d3014 	str	r3, [sp, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003250:	fa001c50 	blx	100a398 <__aeabi_f2ulz>
	while(iters--) {
 1003254:	e2504001 	subs	r4, r0, #1
 1003258:	e59d2018 	ldr	r2, [sp, #24]
 100325c:	e2c15000 	sbc	r5, r1, #0
 1003260:	e1903001 	orrs	r3, r0, r1
 1003264:	e59d3014 	ldr	r3, [sp, #20]
 1003268:	0a000009 	beq	1003294 <bogo_calibrate+0xbc>
		__asm__("nop");
 100326c:	e320f000 	nop	{0}
	while(iters--) {
 1003270:	e2544001 	subs	r4, r4, #1
 1003274:	e2c55000 	sbc	r5, r5, #0
 1003278:	e1550009 	cmp	r5, r9
 100327c:	01540008 	cmpeq	r4, r8
 1003280:	1afffff9 	bne	100326c <bogo_calibrate+0x94>
 1003284:	e596a014 	ldr	sl, [r6, #20]
 1003288:	e5967058 	ldr	r7, [r6, #88]	; 0x58
 100328c:	e596305c 	ldr	r3, [r6, #92]	; 0x5c
 1003290:	e28aa004 	add	sl, sl, #4
 1003294:	e59a1000 	ldr	r1, [sl]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003298:	e3710c01 	cmn	r1, #256	; 0x100
 100329c:	8a00000e 	bhi	10032dc <bogo_calibrate+0x104>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 10032a0:	e1e01001 	mvn	r1, r1
		msb = g_hal.g_timer_overflow;
 10032a4:	e596004c 	ldr	r0, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10032a8:	e0517007 	subs	r7, r1, r7
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 10032ac:	e59d1010 	ldr	r1, [sp, #16]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10032b0:	e58670d8 	str	r7, [r6, #216]	; 0xd8
 10032b4:	e0c03003 	sbc	r3, r0, r3
		timing_total += d_read_timing(0);
 10032b8:	e09bb007 	adds	fp, fp, r7
 10032bc:	e0a22003 	adc	r2, r2, r3
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 10032c0:	e3510001 	cmp	r1, #1
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10032c4:	e58630dc 	str	r3, [r6, #220]	; 0xdc
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 10032c8:	0a00000e 	beq	1003308 <bogo_calibrate+0x130>
 10032cc:	e3a03001 	mov	r3, #1
 10032d0:	edd67a56 	vldr	s15, [r6, #344]	; 0x158
 10032d4:	e58d3010 	str	r3, [sp, #16]
 10032d8:	eaffffd0 	b	1003220 <bogo_calibrate+0x48>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 10032dc:	e1e01001 	mvn	r1, r1
 10032e0:	e3a00000 	mov	r0, #0
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10032e4:	e0517007 	subs	r7, r1, r7
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 10032e8:	e59d1010 	ldr	r1, [sp, #16]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10032ec:	e0c03003 	sbc	r3, r0, r3
		timing_total += d_read_timing(0);
 10032f0:	e09bb007 	adds	fp, fp, r7
 10032f4:	e0a22003 	adc	r2, r2, r3
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10032f8:	e58670d8 	str	r7, [r6, #216]	; 0xd8
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 10032fc:	e3510001 	cmp	r1, #1
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003300:	e58630dc 	str	r3, [r6, #220]	; 0xdc
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003304:	1afffff0 	bne	10032cc <bogo_calibrate+0xf4>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 1003308:	e1a0000b 	mov	r0, fp
 100330c:	e1a01002 	mov	r1, r2
 1003310:	fa001b72 	blx	100a0e0 <__aeabi_ul2d>
 1003314:	eddf0b15 	vldr	d16, [pc, #84]	; 1003370 <bogo_calibrate+0x198>
 1003318:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100331c:	e30712d0 	movw	r1, #29392	; 0x72d0
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003320:	ed9f6a15 	vldr	s12, [pc, #84]	; 100337c <bogo_calibrate+0x1a4>
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003324:	e3401105 	movt	r1, #261	; 0x105
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003328:	eeb07a04 	vmov.f32	s14, #4	; 0x40200000  2.5
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100332c:	e3a00002 	mov	r0, #2
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 1003330:	ee610ba0 	vmul.f64	d16, d17, d16
 1003334:	eef77be0 	vcvt.f32.f64	s15, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003338:	eec66a27 	vdiv.f32	s13, s12, s15
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 100333c:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003340:	edcd0b00 	vstr	d16, [sp]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003344:	ee667a87 	vmul.f32	s15, s13, s14
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003348:	eef70ae6 	vcvt.f64.f32	d16, s13
 100334c:	eef71ae7 	vcvt.f64.f32	d17, s15
 1003350:	edcd0b02 	vstr	d16, [sp, #8]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003354:	edc67a56 	vstr	s15, [r6, #344]	; 0x158
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003358:	ec532b31 	vmov	r2, r3, d17
 100335c:	ebfffef0 	bl	1002f24 <d_printf.constprop.5>
}
 1003360:	e28dd024 	add	sp, sp, #36	; 0x24
 1003364:	ecbd8b02 	vpop	{d8}
 1003368:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100336c:	e320f000 	nop	{0}
 1003370:	a17f0000 	.word	0xa17f0000
 1003374:	3f689374 	.word	0x3f689374
 1003378:	47c35000 	.word	0x47c35000
 100337c:	48435000 	.word	0x48435000

01003380 <bogo_delay>:
{
 1003380:	e92d4030 	push	{r4, r5, lr}
 1003384:	e24dd00c 	sub	sp, sp, #12
 1003388:	e58d0004 	str	r0, [sp, #4]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 100338c:	e3013b28 	movw	r3, #6952	; 0x1b28
 1003390:	e340310a 	movt	r3, #266	; 0x10a
 1003394:	eddd7a01 	vldr	s15, [sp, #4]
 1003398:	ed937a56 	vldr	s14, [r3, #344]	; 0x158
 100339c:	eef87a67 	vcvt.f32.u32	s15, s15
 10033a0:	ee677a87 	vmul.f32	s15, s15, s14
 10033a4:	ee170a90 	vmov	r0, s15
 10033a8:	fa001bfa 	blx	100a398 <__aeabi_f2ulz>
	while(iters--) {
 10033ac:	e2504001 	subs	r4, r0, #1
 10033b0:	e2c15000 	sbc	r5, r1, #0
 10033b4:	e1903001 	orrs	r3, r0, r1
 10033b8:	0a000007 	beq	10033dc <bogo_delay+0x5c>
 10033bc:	e3e02000 	mvn	r2, #0
 10033c0:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 10033c4:	e320f000 	nop	{0}
	while(iters--) {
 10033c8:	e2544001 	subs	r4, r4, #1
 10033cc:	e2c55000 	sbc	r5, r5, #0
 10033d0:	e1550003 	cmp	r5, r3
 10033d4:	01540002 	cmpeq	r4, r2
 10033d8:	1afffff9 	bne	10033c4 <bogo_delay+0x44>
}
 10033dc:	e28dd00c 	add	sp, sp, #12
 10033e0:	e8bd8030 	pop	{r4, r5, pc}

010033e4 <gpio_led_write>:
	enable = !!(enable);
 10033e4:	e2912000 	adds	r2, r1, #0
 10033e8:	13a02001 	movne	r2, #1
	switch(index) {
 10033ec:	e3500000 	cmp	r0, #0
 10033f0:	0a000004 	beq	1003408 <gpio_led_write+0x24>
 10033f4:	e3500001 	cmp	r0, #1
 10033f8:	112fff1e 	bxne	lr
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, enable);
 10033fc:	e3a01025 	mov	r1, #37	; 0x25
 1003400:	e59f000c 	ldr	r0, [pc, #12]	; 1003414 <gpio_led_write+0x30>
 1003404:	ea000ba7 	b	10062a8 <XGpioPs_WritePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, enable);
 1003408:	e3a01009 	mov	r1, #9
 100340c:	e59f0000 	ldr	r0, [pc]	; 1003414 <gpio_led_write+0x30>
 1003410:	ea000ba4 	b	10062a8 <XGpioPs_WritePin>
 1003414:	010a1b4c 	.word	0x010a1b4c

01003418 <d_printf>:
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003418:	e3500001 	cmp	r0, #1
{
 100341c:	e92d000e 	push	{r1, r2, r3}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003420:	d3a03000 	movle	r3, #0
 1003424:	c3a03001 	movgt	r3, #1
 1003428:	e3500000 	cmp	r0, #0
 100342c:	03a03001 	moveq	r3, #1
{
 1003430:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003434:	e3530000 	cmp	r3, #0
{
 1003438:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100343c:	e24dd018 	sub	sp, sp, #24
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003440:	0a00003b 	beq	1003534 <d_printf+0x11c>
		switch(debug_code) {
 1003444:	e2403001 	sub	r3, r0, #1
 1003448:	e1a04000 	mov	r4, r0
 100344c:	e3530003 	cmp	r3, #3
 1003450:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1003454:	ea000006 	b	1003474 <d_printf+0x5c>
 1003458:	01003548 	.word	0x01003548
 100345c:	01003558 	.word	0x01003558
 1003460:	01003568 	.word	0x01003568
 1003464:	01003468 	.word	0x01003468
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003468:	e3070264 	movw	r0, #29284	; 0x7264
 100346c:	e3400105 	movt	r0, #261	; 0x105
 1003470:	eb001438 	bl	1008558 <print>
		if(g_hal.g_timer_have_init) {
 1003474:	e3013b28 	movw	r3, #6952	; 0x1b28
 1003478:	e340310a 	movt	r3, #266	; 0x10a
 100347c:	e5935050 	ldr	r5, [r3, #80]	; 0x50
 1003480:	e3550000 	cmp	r5, #0
			usec = 0;
 1003484:	01a03005 	moveq	r3, r5
		if(g_hal.g_timer_have_init) {
 1003488:	0a00001b 	beq	10034fc <d_printf+0xe4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100348c:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003490:	eddf3b52 	vldr	d19, [pc, #328]	; 10035e0 <d_printf+0x1c8>
 1003494:	eddf2b53 	vldr	d18, [pc, #332]	; 10035e8 <d_printf+0x1d0>
 1003498:	e5922004 	ldr	r2, [r2, #4]
 100349c:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 10034a0:	e1e02002 	mvn	r2, r2
 10034a4:	ee073a90 	vmov	s15, r3
 10034a8:	eef80b67 	vcvt.f64.u32	d16, s15
 10034ac:	ee072a90 	vmov	s15, r2
 10034b0:	eef81b67 	vcvt.f64.u32	d17, s15
 10034b4:	ee600ba3 	vmul.f64	d16, d16, d19
 10034b8:	ee410ba2 	vmla.f64	d16, d17, d18
 10034bc:	ec510b30 	vmov	r0, r1, d16
 10034c0:	fa001bc4 	blx	100a3d8 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 10034c4:	e3042240 	movw	r2, #16960	; 0x4240
 10034c8:	e3a03000 	mov	r3, #0
 10034cc:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 10034d0:	e1a06000 	mov	r6, r0
 10034d4:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 10034d8:	fa001ba2 	blx	100a368 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 10034dc:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 10034e0:	e1a05000 	mov	r5, r0
			usec = total_usec % 1000000;
 10034e4:	e340200f 	movt	r2, #15
 10034e8:	e3a03000 	mov	r3, #0
 10034ec:	e1a00006 	mov	r0, r6
 10034f0:	e1a01007 	mov	r1, r7
 10034f4:	fa001b9b 	blx	100a368 <__aeabi_uldivmod>
 10034f8:	e1a03002 	mov	r3, r2
		if(debug_code != D_RAW) {
 10034fc:	e3540000 	cmp	r4, #0
 1003500:	1a00001c 	bne	1003578 <d_printf+0x160>
		va_start(args, fmt);
 1003504:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003508:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 100350c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003510:	e282202c 	add	r2, r2, #44	; 0x2c
 1003514:	e1a0300c 	mov	r3, ip
 1003518:	e28d0018 	add	r0, sp, #24
 100351c:	e5922000 	ldr	r2, [r2]
 1003520:	e3a01a01 	mov	r1, #4096	; 0x1000
		va_start(args, fmt);
 1003524:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003528:	fa0033eb 	blx	10104dc <vsnprintf>
		print(buffer);
 100352c:	e28d0018 	add	r0, sp, #24
 1003530:	eb001408 	bl	1008558 <print>
}
 1003534:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1003538:	e28dd018 	add	sp, sp, #24
 100353c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 1003540:	e28dd00c 	add	sp, sp, #12
 1003544:	e12fff1e 	bx	lr
				print("[--] ");							// dull white text (default)
 1003548:	e3070324 	movw	r0, #29476	; 0x7324
 100354c:	e3400105 	movt	r0, #261	; 0x105
 1003550:	eb001400 	bl	1008558 <print>
				break;
 1003554:	eaffffc6 	b	1003474 <d_printf+0x5c>
				print("\033[0;97m[ii] "); 				// bright white text
 1003558:	e3070240 	movw	r0, #29248	; 0x7240
 100355c:	e3400105 	movt	r0, #261	; 0x105
 1003560:	eb0013fc 	bl	1008558 <print>
				break;
 1003564:	eaffffc2 	b	1003474 <d_printf+0x5c>
				print("\033[30;103m[WW]\033[0;93m ");	// yellow text
 1003568:	e307032c 	movw	r0, #29484	; 0x732c
 100356c:	e3400105 	movt	r0, #261	; 0x105
 1003570:	eb0013f8 	bl	1008558 <print>
				break;
 1003574:	eaffffbe 	b	1003474 <d_printf+0x5c>
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1003578:	e3072250 	movw	r2, #29264	; 0x7250
 100357c:	e58d3000 	str	r3, [sp]
 1003580:	e3402105 	movt	r2, #261	; 0x105
 1003584:	e1a03005 	mov	r3, r5
 1003588:	e3a01a01 	mov	r1, #4096	; 0x1000
 100358c:	e28d000c 	add	r0, sp, #12
 1003590:	fa002358 	blx	100c2f8 <snprintf>
			print(time_buffer);
 1003594:	e28d000c 	add	r0, sp, #12
 1003598:	eb0013ee 	bl	1008558 <print>
		va_start(args, fmt);
 100359c:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10035a0:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 10035a4:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10035a8:	e282202c 	add	r2, r2, #44	; 0x2c
 10035ac:	e1a0300c 	mov	r3, ip
 10035b0:	e5922000 	ldr	r2, [r2]
 10035b4:	e3a01a01 	mov	r1, #4096	; 0x1000
 10035b8:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 10035bc:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10035c0:	fa0033c5 	blx	10104dc <vsnprintf>
		print(buffer);
 10035c4:	e28d0018 	add	r0, sp, #24
 10035c8:	eb0013e2 	bl	1008558 <print>
			print("\033[m\r\n");
 10035cc:	e307025c 	movw	r0, #29276	; 0x725c
 10035d0:	e3400105 	movt	r0, #261	; 0x105
 10035d4:	eb0013df 	bl	1008558 <print>
}
 10035d8:	eaffffd5 	b	1003534 <d_printf+0x11c>
 10035dc:	e320f000 	nop	{0}
 10035e0:	a17f0000 	.word	0xa17f0000
 10035e4:	41689374 	.word	0x41689374
 10035e8:	a17f0000 	.word	0xa17f0000
 10035ec:	3f689374 	.word	0x3f689374

010035f0 <hal_init>:
{
 10035f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	g_hal.bogo_cal = 1.0f;
 10035f4:	e3016b28 	movw	r6, #6952	; 0x1b28
{
 10035f8:	e24dd010 	sub	sp, sp, #16
	g_hal.bogo_cal = 1.0f;
 10035fc:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
 1003600:	e340610a 	movt	r6, #266	; 0x10a
 1003604:	e5863158 	str	r3, [r6, #344]	; 0x158
	init_platform();
 1003608:	eb000285 	bl	1004024 <init_platform>
	Xil_AssertSetCallback(&d_xilinx_assert);
 100360c:	e30301c0 	movw	r0, #12736	; 0x31c0
 1003610:	e3400100 	movt	r0, #256	; 0x100
 1003614:	eb0013ca 	bl	1008544 <Xil_AssertSetCallback>
	d_printf(D_RAW, "\r\n\r\n\033[2J\033[0m\r\n");
 1003618:	e3071344 	movw	r1, #29508	; 0x7344
 100361c:	e3a00000 	mov	r0, #0
 1003620:	e3401105 	movt	r1, #261	; 0x105
 1003624:	ebffff7b 	bl	1003418 <d_printf>
	d_printf(D_INFO, "ps_app: Zynq application for YAOS Oscilloscope Project (%s)", PS_APP_VERSION_TAG);
 1003628:	e3072354 	movw	r2, #29524	; 0x7354
 100362c:	e3071364 	movw	r1, #29540	; 0x7364
 1003630:	e3402105 	movt	r2, #261	; 0x105
 1003634:	e3401105 	movt	r1, #261	; 0x105
 1003638:	e3a00002 	mov	r0, #2
 100363c:	ebfffe38 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "Built %s %s", __DATE__, __TIME__);
 1003640:	e30733a0 	movw	r3, #29600	; 0x73a0
 1003644:	e30723ac 	movw	r2, #29612	; 0x73ac
 1003648:	e30713b8 	movw	r1, #29624	; 0x73b8
 100364c:	e3403105 	movt	r3, #261	; 0x105
 1003650:	e3402105 	movt	r2, #261	; 0x105
 1003654:	e3401105 	movt	r1, #261	; 0x105
 1003658:	e3a00002 	mov	r0, #2
 100365c:	ebfffe30 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "");
 1003660:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1003664:	e3a00002 	mov	r0, #2
 1003668:	e3401105 	movt	r1, #261	; 0x105
 100366c:	ebfffe2c 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "Application (C) 2020 Tomato Engineering Ltd.");
 1003670:	e30713c4 	movw	r1, #29636	; 0x73c4
 1003674:	e3a00002 	mov	r0, #2
 1003678:	e3401105 	movt	r1, #261	; 0x105
 100367c:	ebfffe28 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "Parts       (C) 2005 - 2015 Xilinx, Inc.");
 1003680:	e30713f4 	movw	r1, #29684	; 0x73f4
 1003684:	e3a00002 	mov	r0, #2
 1003688:	e3401105 	movt	r1, #261	; 0x105
 100368c:	ebfffe24 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "");
 1003690:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 1003694:	e3a00002 	mov	r0, #2
 1003698:	e3401105 	movt	r1, #261	; 0x105
 100369c:	ebfffe20 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "Application is licenced under the MIT Licence");
 10036a0:	e3071420 	movw	r1, #29728	; 0x7420
 10036a4:	e3a00002 	mov	r0, #2
 10036a8:	e3401105 	movt	r1, #261	; 0x105
 10036ac:	ebfffe1c 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "For information see LICENCE in the Git repository");
 10036b0:	e3071450 	movw	r1, #29776	; 0x7450
 10036b4:	e3a00002 	mov	r0, #2
 10036b8:	e3401105 	movt	r1, #261	; 0x105
 10036bc:	ebfffe18 	bl	1002f24 <d_printf.constprop.5>
	d_printf(D_INFO, "");
 10036c0:	e3071fb0 	movw	r1, #32688	; 0x7fb0
 10036c4:	e3a00002 	mov	r0, #2
 10036c8:	e3401105 	movt	r1, #261	; 0x105
 10036cc:	ebfffe14 	bl	1002f24 <d_printf.constprop.5>
	Xil_ICacheEnable();
 10036d0:	eb0015a4 	bl	1008d68 <Xil_ICacheEnable>
	Xil_DCacheDisable();
 10036d4:	eb00153f 	bl	1008bd8 <Xil_DCacheDisable>
	d_printf(D_INFO, "boot: enabled D- and I-cache");
 10036d8:	e3071484 	movw	r1, #29828	; 0x7484
 10036dc:	e3a00002 	mov	r0, #2
 10036e0:	e3401105 	movt	r1, #261	; 0x105
 10036e4:	ebfffe0e 	bl	1002f24 <d_printf.constprop.5>
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 10036e8:	e3a00000 	mov	r0, #0
 10036ec:	eb00128a 	bl	100811c <XScuGic_LookupConfig>
	if(g_hal.xscu_gic_cfg == NULL) {
 10036f0:	e3500000 	cmp	r0, #0
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 10036f4:	e586000c 	str	r0, [r6, #12]
	if(g_hal.xscu_gic_cfg == NULL) {
 10036f8:	0a0000c1 	beq	1003a04 <hal_init+0x414>
	error = XScuGic_CfgInitialize(&g_hal.xscu_gic, g_hal.xscu_gic_cfg, g_hal.xscu_gic_cfg->CpuBaseAddress);
 10036fc:	e1a01000 	mov	r1, r0
 1003700:	e5902004 	ldr	r2, [r0, #4]
 1003704:	e1a00006 	mov	r0, r6
 1003708:	eb00120e 	bl	1007f48 <XScuGic_CfgInitialize>
	if(error != XST_SUCCESS) {
 100370c:	e2508000 	subs	r8, r0, #0
 1003710:	1a0000dd 	bne	1003a8c <hal_init+0x49c>
	Xil_ExceptionInit();
 1003714:	eb0017cb 	bl	1009648 <Xil_ExceptionInit>
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &g_hal.xscu_gic);
 1003718:	e30715b0 	movw	r1, #30128	; 0x75b0
 100371c:	e1a02006 	mov	r2, r6
 1003720:	e3401100 	movt	r1, #256	; 0x100
 1003724:	e3a00005 	mov	r0, #5
 1003728:	eb0017c7 	bl	100964c <Xil_ExceptionRegisterHandler>
	Xil_ExceptionEnable();
 100372c:	e10f3000 	mrs	r3, CPSR
 1003730:	e3c33080 	bic	r3, r3, #128	; 0x80
 1003734:	e129f003 	msr	CPSR_fc, r3
	d_printf(D_INFO, "XScuGic: interrupt controller ready");
 1003738:	e3071500 	movw	r1, #29952	; 0x7500
 100373c:	e3a00002 	mov	r0, #2
 1003740:	e3401105 	movt	r1, #261	; 0x105
 1003744:	ebfffdf6 	bl	1002f24 <d_printf.constprop.5>
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 1003748:	e1a00008 	mov	r0, r8
 100374c:	eb00135e 	bl	10084cc <XScuTimer_LookupConfig>
 1003750:	e1a03000 	mov	r3, r0
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 1003754:	e2860010 	add	r0, r6, #16
 1003758:	e5932004 	ldr	r2, [r3, #4]
 100375c:	e1a01003 	mov	r1, r3
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 1003760:	e5863020 	str	r3, [r6, #32]
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 1003764:	eb001273 	bl	1008138 <XScuTimer_CfgInitialize>
	if (error != XST_SUCCESS) {
 1003768:	e3500000 	cmp	r0, #0
 100376c:	1a0000bf 	bne	1003a70 <hal_init+0x480>
	error = XScuTimer_SelfTest(&g_hal.xscu_timer);
 1003770:	e2860010 	add	r0, r6, #16
 1003774:	eb001325 	bl	1008410 <XScuTimer_SelfTest>
	if (error != XST_SUCCESS) {
 1003778:	e3500000 	cmp	r0, #0
 100377c:	1a0000b4 	bne	1003a54 <hal_init+0x464>
	d_printf(D_INFO, "XScuTimer: ready");
 1003780:	e3071584 	movw	r1, #30084	; 0x7584
 1003784:	e3a00002 	mov	r0, #2
 1003788:	e3401105 	movt	r1, #261	; 0x105
 100378c:	ebfffde4 	bl	1002f24 <d_printf.constprop.5>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)irq_xscutimer, (void *)&g_hal.xscu_timer);
 1003790:	e3022f00 	movw	r2, #12032	; 0x2f00
 1003794:	e2863010 	add	r3, r6, #16
 1003798:	e3402100 	movt	r2, #256	; 0x100
 100379c:	e3a0101d 	mov	r1, #29
 10037a0:	e1a00006 	mov	r0, r6
 10037a4:	eb000fb3 	bl	1007678 <XScuGic_Connect>
	if (error != XST_SUCCESS) {
 10037a8:	e3500000 	cmp	r0, #0
 10037ac:	1a0000a1 	bne	1003a38 <hal_init+0x448>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 10037b0:	e5963014 	ldr	r3, [r6, #20]
	*LocalAddr = Value;
 10037b4:	e3e02000 	mvn	r2, #0
	g_hal.g_timer_overflow = 0;
 10037b8:	e586004c 	str	r0, [r6, #76]	; 0x4c
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 10037bc:	e3a0101d 	mov	r1, #29
 10037c0:	e1a00006 	mov	r0, r6
 10037c4:	e5832000 	str	r2, [r3]
	XScuTimer_EnableAutoReload(&g_hal.xscu_timer);
 10037c8:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 10037cc:	e5923008 	ldr	r3, [r2, #8]
 10037d0:	e3833002 	orr	r3, r3, #2
	*LocalAddr = Value;
 10037d4:	e5823008 	str	r3, [r2, #8]
	XScuTimer_EnableInterrupt(&g_hal.xscu_timer);
 10037d8:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 10037dc:	e5923008 	ldr	r3, [r2, #8]
 10037e0:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 10037e4:	e5823008 	str	r3, [r2, #8]
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 10037e8:	eb0010f9 	bl	1007bd4 <XScuGic_Enable>
	XScuTimer_Start(&g_hal.xscu_timer);
 10037ec:	e2860010 	add	r0, r6, #16
 10037f0:	eb00127c 	bl	10081e8 <XScuTimer_Start>
	g_hal.g_timer_have_init = 1;
 10037f4:	e3a03001 	mov	r3, #1
 10037f8:	e5863050 	str	r3, [r6, #80]	; 0x50
	bogo_calibrate();
 10037fc:	ebfffe75 	bl	10031d8 <bogo_calibrate>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003800:	e596a014 	ldr	sl, [r6, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003804:	ed9f7aa9 	vldr	s14, [pc, #676]	; 1003ab0 <hal_init+0x4c0>
 1003808:	edd67a56 	vldr	s15, [r6, #344]	; 0x158
	return *(volatile u32 *) Addr;
 100380c:	e59a8004 	ldr	r8, [sl, #4]
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003810:	e28aa004 	add	sl, sl, #4
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003814:	e3780c01 	cmn	r8, #256	; 0x100
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003818:	ee677a27 	vmul.f32	s15, s14, s15
		msb = g_hal.g_timer_overflow;
 100381c:	9596904c 	ldrls	r9, [r6, #76]	; 0x4c
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003820:	e1e08008 	mvn	r8, r8
	g_hal.timers[index] = timer_value;
 1003824:	e1c685f8 	strd	r8, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003828:	ee170a90 	vmov	r0, s15
 100382c:	fa001ad9 	blx	100a398 <__aeabi_f2ulz>
	while(iters--) {
 1003830:	e2504001 	subs	r4, r0, #1
 1003834:	e2c15000 	sbc	r5, r1, #0
 1003838:	e1903001 	orrs	r3, r0, r1
 100383c:	0a00000a 	beq	100386c <hal_init+0x27c>
 1003840:	e3e02000 	mvn	r2, #0
 1003844:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 1003848:	e320f000 	nop	{0}
	while(iters--) {
 100384c:	e2544001 	subs	r4, r4, #1
 1003850:	e2c55000 	sbc	r5, r5, #0
 1003854:	e1550003 	cmp	r5, r3
 1003858:	01540002 	cmpeq	r4, r2
 100385c:	1afffff9 	bne	1003848 <hal_init+0x258>
 1003860:	e596a014 	ldr	sl, [r6, #20]
 1003864:	e1c685d8 	ldrd	r8, [r6, #88]	; 0x58
 1003868:	e28aa004 	add	sl, sl, #4
 100386c:	e59a4000 	ldr	r4, [sl]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003870:	e3740c01 	cmn	r4, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003874:	e1e04004 	mvn	r4, r4
		msb = g_hal.g_timer_overflow;
 1003878:	9596704c 	ldrls	r7, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100387c:	e0544008 	subs	r4, r4, r8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003880:	e1a00004 	mov	r0, r4
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003884:	e0c75009 	sbc	r5, r7, r9
 1003888:	e1c64df8 	strd	r4, [r6, #216]	; 0xd8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100388c:	e1a01005 	mov	r1, r5
 1003890:	fa001a16 	blx	100a0f0 <__aeabi_l2d>
 1003894:	eddf0b83 	vldr	d16, [pc, #524]	; 1003aa8 <hal_init+0x4b8>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003898:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100389c:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10038a0:	e0a55005 	adc	r5, r5, r5
 10038a4:	e30725d8 	movw	r2, #30168	; 0x75d8
 10038a8:	e30715f0 	movw	r1, #30192	; 0x75f0
 10038ac:	e3402105 	movt	r2, #261	; 0x105
 10038b0:	e3401105 	movt	r1, #261	; 0x105
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10038b4:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10038b8:	e3a00002 	mov	r0, #2
 10038bc:	e58d4000 	str	r4, [sp]
 10038c0:	e58d5004 	str	r5, [sp, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10038c4:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10038c8:	eef70ae7 	vcvt.f64.f32	d16, s15
 10038cc:	edcd0b02 	vstr	d16, [sp, #8]
 10038d0:	ebfffd93 	bl	1002f24 <d_printf.constprop.5>
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 10038d4:	e3a00000 	mov	r0, #0
 10038d8:	eb000bb8 	bl	10067c0 <XGpioPs_LookupConfig>
 10038dc:	e1a03000 	mov	r3, r0
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 10038e0:	e59f01d0 	ldr	r0, [pc, #464]	; 1003ab8 <hal_init+0x4c8>
 10038e4:	e5932004 	ldr	r2, [r3, #4]
 10038e8:	e1a01003 	mov	r1, r3
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 10038ec:	e5863048 	str	r3, [r6, #72]	; 0x48
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 10038f0:	eb00087c 	bl	1005ae8 <XGpioPs_CfgInitialize>
	if (error != XST_SUCCESS) {
 10038f4:	e2504000 	subs	r4, r0, #0
 10038f8:	1a000047 	bne	1003a1c <hal_init+0x42c>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 0, 0x00000000);
 10038fc:	e1a02004 	mov	r2, r4
 1003900:	e1a01004 	mov	r1, r4
 1003904:	e59f01ac 	ldr	r0, [pc, #428]	; 1003ab8 <hal_init+0x4c8>
 1003908:	eb00092c 	bl	1005dc0 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 1, 0x00000000);
 100390c:	e1a02004 	mov	r2, r4
 1003910:	e3a01001 	mov	r1, #1
 1003914:	e59f019c 	ldr	r0, [pc, #412]	; 1003ab8 <hal_init+0x4c8>
 1003918:	eb000928 	bl	1005dc0 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 2, 0x00000000);
 100391c:	e1a02004 	mov	r2, r4
 1003920:	e3a01002 	mov	r1, #2
 1003924:	e59f018c 	ldr	r0, [pc, #396]	; 1003ab8 <hal_init+0x4c8>
 1003928:	eb000924 	bl	1005dc0 <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 3, 0x00000000);
 100392c:	e1a02004 	mov	r2, r4
 1003930:	e3a01003 	mov	r1, #3
 1003934:	e59f017c 	ldr	r0, [pc, #380]	; 1003ab8 <hal_init+0x4c8>
 1003938:	eb000920 	bl	1005dc0 <XGpioPs_SetDirection>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100393c:	e3a02001 	mov	r2, #1
 1003940:	e3a01009 	mov	r1, #9
 1003944:	e59f016c 	ldr	r0, [pc, #364]	; 1003ab8 <hal_init+0x4c8>
 1003948:	eb000a96 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 100394c:	e3a02001 	mov	r2, #1
 1003950:	e3a01009 	mov	r1, #9
 1003954:	e59f015c 	ldr	r0, [pc, #348]	; 1003ab8 <hal_init+0x4c8>
 1003958:	eb000b15 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100395c:	e3a02001 	mov	r2, #1
 1003960:	e3a01025 	mov	r1, #37	; 0x25
 1003964:	e59f014c 	ldr	r0, [pc, #332]	; 1003ab8 <hal_init+0x4c8>
 1003968:	eb000a8e 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 100396c:	e3a02001 	mov	r2, #1
 1003970:	e3a01025 	mov	r1, #37	; 0x25
 1003974:	e59f013c 	ldr	r0, [pc, #316]	; 1003ab8 <hal_init+0x4c8>
 1003978:	eb000b0d 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, enable);
 100397c:	e1a02004 	mov	r2, r4
 1003980:	e3a01009 	mov	r1, #9
 1003984:	e59f012c 	ldr	r0, [pc, #300]	; 1003ab8 <hal_init+0x4c8>
 1003988:	eb000a46 	bl	10062a8 <XGpioPs_WritePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, enable);
 100398c:	e1a02004 	mov	r2, r4
 1003990:	e3a01025 	mov	r1, #37	; 0x25
 1003994:	e59f011c 	ldr	r0, [pc, #284]	; 1003ab8 <hal_init+0x4c8>
 1003998:	e3a04a01 	mov	r4, #4096	; 0x1000
 100399c:	eb000a41 	bl	10062a8 <XGpioPs_WritePin>
	d_printf(D_INFO, "XGpioPs: ready");
 10039a0:	e3071648 	movw	r1, #30280	; 0x7648
 10039a4:	e3a00002 	mov	r0, #2
 10039a8:	e3401105 	movt	r1, #261	; 0x105
 10039ac:	e34e4000 	movt	r4, #57344	; 0xe000
 10039b0:	ebfffd5b 	bl	1002f24 <d_printf.constprop.5>
	fabcfg_init();
 10039b4:	ebfffced 	bl	1002d70 <fabcfg_init>
	d_printf(D_INFO, "XUartPs: resetting RX FIFO");
 10039b8:	e3071658 	movw	r1, #30296	; 0x7658
 10039bc:	e3a00002 	mov	r0, #2
 10039c0:	e3401105 	movt	r1, #261	; 0x105
 10039c4:	ebfffd56 	bl	1002f24 <d_printf.constprop.5>
 10039c8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 10039cc:	e3130002 	tst	r3, #2
 10039d0:	1a000005 	bne	10039ec <hal_init+0x3fc>
		d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", XUartPs_RecvByte(STDIN_BASEADDRESS));
 10039d4:	e3a00a01 	mov	r0, #4096	; 0x1000
 10039d8:	e34e0000 	movt	r0, #57344	; 0xe000
 10039dc:	eb001737 	bl	10096c0 <XUartPs_RecvByte>
 10039e0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 10039e4:	e3130002 	tst	r3, #2
 10039e8:	0afffff9 	beq	10039d4 <hal_init+0x3e4>
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 10039ec:	ed9f0a30 	vldr	s0, [pc, #192]	; 1003ab4 <hal_init+0x4c4>
 10039f0:	e3a01000 	mov	r1, #0
 10039f4:	e59f00c0 	ldr	r0, [pc, #192]	; 1003abc <hal_init+0x4cc>
}
 10039f8:	e28dd010 	add	sp, sp, #16
 10039fc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 1003a00:	eafffb26 	b	10026a0 <clkwiz_init>
		d_printf(D_ERROR, "XScuGic: configuration lookup returns NULL");
 1003a04:	e30714a4 	movw	r1, #29860	; 0x74a4
 1003a08:	e3a00004 	mov	r0, #4
 1003a0c:	e3401105 	movt	r1, #261	; 0x105
 1003a10:	ebfffd91 	bl	100305c <d_printf.constprop.7>
		exit(-1);
 1003a14:	e3e00000 	mvn	r0, #0
 1003a18:	fa001ac4 	blx	100a530 <exit>
		d_printf(D_ERROR, "XGpioPs: returned error code: %d, unable to start", error);
 1003a1c:	e3071614 	movw	r1, #30228	; 0x7614
 1003a20:	e3a00004 	mov	r0, #4
 1003a24:	e1a02004 	mov	r2, r4
 1003a28:	e3401105 	movt	r1, #261	; 0x105
 1003a2c:	ebfffd8a 	bl	100305c <d_printf.constprop.7>
		exit(-1);
 1003a30:	e3e00000 	mvn	r0, #0
 1003a34:	fa001abd 	blx	100a530 <exit>
		d_printf(D_ERROR, "XScuTimer: unable to connect interrupt handler: error code %d", error);
 1003a38:	e3071598 	movw	r1, #30104	; 0x7598
 1003a3c:	e1a02000 	mov	r2, r0
 1003a40:	e3401105 	movt	r1, #261	; 0x105
 1003a44:	e3a00004 	mov	r0, #4
 1003a48:	ebfffd83 	bl	100305c <d_printf.constprop.7>
		exit(-1);
 1003a4c:	e3e00000 	mvn	r0, #0
 1003a50:	fa001ab6 	blx	100a530 <exit>
		d_printf(D_ERROR, "XScuTimer: self test failed with error %d", error);
 1003a54:	e3071558 	movw	r1, #30040	; 0x7558
 1003a58:	e1a02000 	mov	r2, r0
 1003a5c:	e3401105 	movt	r1, #261	; 0x105
 1003a60:	e3a00004 	mov	r0, #4
 1003a64:	ebfffd7c 	bl	100305c <d_printf.constprop.7>
		exit(-1);
 1003a68:	e3e00000 	mvn	r0, #0
 1003a6c:	fa001aaf 	blx	100a530 <exit>
		d_printf(D_ERROR, "XScuTimer: returned error code: %d, unable to start", error);
 1003a70:	e3071524 	movw	r1, #29988	; 0x7524
 1003a74:	e1a02000 	mov	r2, r0
 1003a78:	e3401105 	movt	r1, #261	; 0x105
 1003a7c:	e3a00004 	mov	r0, #4
 1003a80:	ebfffd75 	bl	100305c <d_printf.constprop.7>
		exit(-1);
 1003a84:	e3e00000 	mvn	r0, #0
 1003a88:	fa001aa8 	blx	100a530 <exit>
		d_printf(D_ERROR, "XScuGic: configuration init returned error %d", error);
 1003a8c:	e30714d0 	movw	r1, #29904	; 0x74d0
 1003a90:	e3a00004 	mov	r0, #4
 1003a94:	e1a02008 	mov	r2, r8
 1003a98:	e3401105 	movt	r1, #261	; 0x105
 1003a9c:	ebfffd6e 	bl	100305c <d_printf.constprop.7>
		exit(-1);
 1003aa0:	e3e00000 	mvn	r0, #0
 1003aa4:	fa001aa1 	blx	100a530 <exit>
 1003aa8:	a17f0000 	.word	0xa17f0000
 1003aac:	3f689374 	.word	0x3f689374
 1003ab0:	47c35000 	.word	0x47c35000
 1003ab4:	4331c71c 	.word	0x4331c71c
 1003ab8:	010a1b4c 	.word	0x010a1b4c
 1003abc:	010a1c88 	.word	0x010a1c88

01003ac0 <d_waitkey>:
	res = XUartPs_RecvByte(STDIN_BASEADDRESS);
 1003ac0:	e3a00a01 	mov	r0, #4096	; 0x1000
 1003ac4:	e34e0000 	movt	r0, #57344	; 0xe000
 1003ac8:	ea0016fc 	b	10096c0 <XUartPs_RecvByte>

01003acc <d_iskeypress>:
	*LocalAddr = Value;
 1003acc:	e3a03a01 	mov	r3, #4096	; 0x1000
 1003ad0:	e3a02003 	mov	r2, #3
 1003ad4:	e34e3000 	movt	r3, #57344	; 0xe000
 1003ad8:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 1003adc:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
	return XUartPs_IsReceiveData(STDIN_BASEADDRESS);
 1003ae0:	e2200002 	eor	r0, r0, #2
}
 1003ae4:	e7e000d0 	ubfx	r0, r0, #1, #1
 1003ae8:	e12fff1e 	bx	lr

01003aec <d_read_global_timer>:
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003aec:	e3012b28 	movw	r2, #6952	; 0x1b28
 1003af0:	e340210a 	movt	r2, #266	; 0x10a
 1003af4:	e5923014 	ldr	r3, [r2, #20]
 1003af8:	e5933004 	ldr	r3, [r3, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003afc:	e3730c01 	cmn	r3, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1003b00:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 1003b04:	9592c04c 	ldrls	ip, [r2, #76]	; 0x4c
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1003b08:	e5803000 	str	r3, [r0]
	*msb_ret = msb;
 1003b0c:	e581c000 	str	ip, [r1]
}
 1003b10:	e12fff1e 	bx	lr

01003b14 <d_start_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b14:	e350000f 	cmp	r0, #15
 1003b18:	ca00000b 	bgt	1003b4c <d_start_timing+0x38>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003b1c:	e3013b28 	movw	r3, #6952	; 0x1b28
	g_hal.timers[index] = timer_value;
 1003b20:	e280000b 	add	r0, r0, #11
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003b24:	e340310a 	movt	r3, #266	; 0x10a
 1003b28:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timers[index] = timer_value;
 1003b2c:	e0831180 	add	r1, r3, r0, lsl #3
 1003b30:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003b34:	e3720c01 	cmn	r2, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1003b38:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 1003b3c:	9593c04c 	ldrls	ip, [r3, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 1003b40:	e7832180 	str	r2, [r3, r0, lsl #3]
 1003b44:	e581c004 	str	ip, [r1, #4]
 1003b48:	e12fff1e 	bx	lr
{
 1003b4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b50:	e30001a6 	movw	r0, #422	; 0x1a6
{
 1003b54:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b58:	e307327c 	movw	r3, #29308	; 0x727c
 1003b5c:	e307228c 	movw	r2, #29324	; 0x728c
 1003b60:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 1003b64:	e58d0000 	str	r0, [sp]
 1003b68:	e3403105 	movt	r3, #261	; 0x105
 1003b6c:	e3a00004 	mov	r0, #4
 1003b70:	e3402105 	movt	r2, #261	; 0x105
 1003b74:	e3401105 	movt	r1, #261	; 0x105
 1003b78:	ebfffd37 	bl	100305c <d_printf.constprop.7>
 1003b7c:	e3e00062 	mvn	r0, #98	; 0x62
 1003b80:	fa001a6a 	blx	100a530 <exit>

01003b84 <d_stop_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003b84:	e350000f 	cmp	r0, #15
 1003b88:	ca00000f 	bgt	1003bcc <d_stop_timing+0x48>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003b8c:	e3013b28 	movw	r3, #6952	; 0x1b28
 1003b90:	e340310a 	movt	r3, #266	; 0x10a
 1003b94:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003b98:	e083c180 	add	ip, r3, r0, lsl #3
 1003b9c:	e59c0058 	ldr	r0, [ip, #88]	; 0x58
 1003ba0:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003ba4:	e3720c01 	cmn	r2, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003ba8:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 1003bac:	9593104c 	ldrls	r1, [r3, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003bb0:	e1a0300c 	mov	r3, ip
 1003bb4:	e59cc05c 	ldr	ip, [ip, #92]	; 0x5c
 1003bb8:	e0522000 	subs	r2, r2, r0
 1003bbc:	e58320d8 	str	r2, [r3, #216]	; 0xd8
 1003bc0:	e0c1100c 	sbc	r1, r1, ip
 1003bc4:	e58310dc 	str	r1, [r3, #220]	; 0xdc
 1003bc8:	e12fff1e 	bx	lr
{
 1003bcc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bd0:	e30001ba 	movw	r0, #442	; 0x1ba
{
 1003bd4:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003bd8:	e307327c 	movw	r3, #29308	; 0x727c
 1003bdc:	e307228c 	movw	r2, #29324	; 0x728c
 1003be0:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 1003be4:	e58d0000 	str	r0, [sp]
 1003be8:	e3403105 	movt	r3, #261	; 0x105
 1003bec:	e3a00004 	mov	r0, #4
 1003bf0:	e3402105 	movt	r2, #261	; 0x105
 1003bf4:	e3401105 	movt	r1, #261	; 0x105
 1003bf8:	ebfffd17 	bl	100305c <d_printf.constprop.7>
 1003bfc:	e3e00062 	mvn	r0, #98	; 0x62
 1003c00:	fa001a4a 	blx	100a530 <exit>

01003c04 <d_read_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003c04:	e350000f 	cmp	r0, #15
 1003c08:	ca000004 	bgt	1003c20 <d_read_timing+0x1c>
	return g_hal.timer_deltas[index];
 1003c0c:	e3013b28 	movw	r3, #6952	; 0x1b28
 1003c10:	e340310a 	movt	r3, #266	; 0x10a
 1003c14:	e0833180 	add	r3, r3, r0, lsl #3
}
 1003c18:	e1c30dd8 	ldrd	r0, [r3, #216]	; 0xd8
 1003c1c:	e12fff1e 	bx	lr
{
 1003c20:	e92d4010 	push	{r4, lr}
 1003c24:	ebfffd57 	bl	1003188 <d_read_timing.part.3>

01003c28 <d_read_timing_us>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003c28:	e350000f 	cmp	r0, #15
{
 1003c2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1003c30:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003c34:	ca00000a 	bgt	1003c64 <d_read_timing_us+0x3c>
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003c38:	e3013b28 	movw	r3, #6952	; 0x1b28
 1003c3c:	e340310a 	movt	r3, #266	; 0x10a
 1003c40:	e0833180 	add	r3, r3, r0, lsl #3
 1003c44:	e1c30dd8 	ldrd	r0, [r3, #216]	; 0xd8
 1003c48:	fa001928 	blx	100a0f0 <__aeabi_l2d>
 1003c4c:	ed9f0b11 	vldr	d0, [pc, #68]	; 1003c98 <d_read_timing_us+0x70>
 1003c50:	ec410b30 	vmov	d16, r0, r1
 1003c54:	ee200b80 	vmul.f64	d0, d16, d0
}
 1003c58:	eeb70bc0 	vcvt.f32.f64	s0, d0
 1003c5c:	e28dd00c 	add	sp, sp, #12
 1003c60:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003c64:	e3a00f76 	mov	r0, #472	; 0x1d8
 1003c68:	e307327c 	movw	r3, #29308	; 0x727c
 1003c6c:	e307228c 	movw	r2, #29324	; 0x728c
 1003c70:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 1003c74:	e58d0000 	str	r0, [sp]
 1003c78:	e3403105 	movt	r3, #261	; 0x105
 1003c7c:	e3a00004 	mov	r0, #4
 1003c80:	e3402105 	movt	r2, #261	; 0x105
 1003c84:	e3401105 	movt	r1, #261	; 0x105
 1003c88:	ebfffcf3 	bl	100305c <d_printf.constprop.7>
 1003c8c:	e3e00062 	mvn	r0, #98	; 0x62
 1003c90:	fa001a26 	blx	100a530 <exit>
 1003c94:	e320f000 	nop	{0}
 1003c98:	a17f0000 	.word	0xa17f0000
 1003c9c:	3f689374 	.word	0x3f689374

01003ca0 <d_dump_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003ca0:	e351000f 	cmp	r1, #15
{
 1003ca4:	e92d4070 	push	{r4, r5, r6, lr}
 1003ca8:	e24dd010 	sub	sp, sp, #16
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003cac:	ca000017 	bgt	1003d10 <d_dump_timing+0x70>
	return g_hal.timer_deltas[index];
 1003cb0:	e3013b28 	movw	r3, #6952	; 0x1b28
 1003cb4:	e1a06000 	mov	r6, r0
 1003cb8:	e340310a 	movt	r3, #266	; 0x10a
 1003cbc:	e0833181 	add	r3, r3, r1, lsl #3
 1003cc0:	e1c34dd8 	ldrd	r4, [r3, #216]	; 0xd8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003cc4:	e1a00004 	mov	r0, r4
 1003cc8:	e1a01005 	mov	r1, r5
 1003ccc:	fa001907 	blx	100a0f0 <__aeabi_l2d>
 1003cd0:	eddf0b10 	vldr	d16, [pc, #64]	; 1003d18 <d_dump_timing+0x78>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003cd4:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003cd8:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003cdc:	e0a55005 	adc	r5, r5, r5
 1003ce0:	e30715f0 	movw	r1, #30192	; 0x75f0
 1003ce4:	e1cd40f0 	strd	r4, [sp]
 1003ce8:	e1a02006 	mov	r2, r6
 1003cec:	e3401105 	movt	r1, #261	; 0x105
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003cf0:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003cf4:	e3a00002 	mov	r0, #2
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1003cf8:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1003cfc:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003d00:	edcd0b02 	vstr	d16, [sp, #8]
 1003d04:	ebfffc86 	bl	1002f24 <d_printf.constprop.5>
}
 1003d08:	e28dd010 	add	sp, sp, #16
 1003d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
 1003d10:	ebfffd1c 	bl	1003188 <d_read_timing.part.3>
 1003d14:	e320f000 	nop	{0}
 1003d18:	a17f0000 	.word	0xa17f0000
 1003d1c:	3f689374 	.word	0x3f689374

01003d20 <d_dump_timing_ex>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003d20:	e351000f 	cmp	r1, #15
 1003d24:	d12fff1e 	bxle	lr
{
 1003d28:	e92d4010 	push	{r4, lr}
 1003d2c:	ebfffd15 	bl	1003188 <d_read_timing.part.3>

01003d30 <csi_hack_init>:

XAxiDma mipi_dma;
XAxiDma_Config *mipi_dma_config;

void csi_hack_init()
{
 1003d30:	e92d4010 	push	{r4, lr}
	int error;

	mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 1003d34:	e3a00001 	mov	r0, #1
 1003d38:	eb000302 	bl	1004948 <XAxiDma_LookupConfig>
 1003d3c:	e3014d20 	movw	r4, #7456	; 0x1d20
 1003d40:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&mipi_dma, mipi_dma_config);
 1003d44:	e3010d24 	movw	r0, #7460	; 0x1d24
	mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 1003d48:	e340410a 	movt	r4, #266	; 0x10a
	error = XAxiDma_CfgInitialize(&mipi_dma, mipi_dma_config);
 1003d4c:	e1a01003 	mov	r1, r3
 1003d50:	e340010a 	movt	r0, #266	; 0x10a
	mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 1003d54:	e5843000 	str	r3, [r4]
	error = XAxiDma_CfgInitialize(&mipi_dma, mipi_dma_config);
 1003d58:	eb00010b 	bl	100418c <XAxiDma_CfgInitialize>

	if(error != XST_SUCCESS) {
 1003d5c:	e3500000 	cmp	r0, #0
 1003d60:	1a000040 	bne	1003e68 <csi_hack_init+0x138>
		d_printf(D_ERROR, "mipihacks: fatal: unable to initialise DMA engine! (error=%d)", error);
		exit(-1);
	}

	d_printf(D_INFO, "mipihacks: DMA initialised @ 0x%08x", mipi_dma_config->BaseAddr);
 1003d64:	e5943000 	ldr	r3, [r4]
 1003d68:	e30716b4 	movw	r1, #30388	; 0x76b4

	XAxiDma_Reset(&mipi_dma);
	while(!XAxiDma_ResetIsDone(&mipi_dma)) ;
 1003d6c:	e3014d24 	movw	r4, #7460	; 0x1d24
	d_printf(D_INFO, "mipihacks: DMA initialised @ 0x%08x", mipi_dma_config->BaseAddr);
 1003d70:	e3a00002 	mov	r0, #2
 1003d74:	e3401105 	movt	r1, #261	; 0x105
	while(!XAxiDma_ResetIsDone(&mipi_dma)) ;
 1003d78:	e340410a 	movt	r4, #266	; 0x10a
	d_printf(D_INFO, "mipihacks: DMA initialised @ 0x%08x", mipi_dma_config->BaseAddr);
 1003d7c:	e5932004 	ldr	r2, [r3, #4]
 1003d80:	ebfffda4 	bl	1003418 <d_printf>
	XAxiDma_Reset(&mipi_dma);
 1003d84:	e1a00004 	mov	r0, r4
 1003d88:	eb0000a7 	bl	100402c <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&mipi_dma)) ;
 1003d8c:	e1a00004 	mov	r0, r4
 1003d90:	eb0000ea 	bl	1004140 <XAxiDma_ResetIsDone>
 1003d94:	e3500000 	cmp	r0, #0
 1003d98:	0afffffb 	beq	1003d8c <csi_hack_init+0x5c>

	d_printf(D_INFO, "mipihacks: DMA reset OK");
 1003d9c:	e30716d8 	movw	r1, #30424	; 0x76d8
 1003da0:	e3a00002 	mov	r0, #2
 1003da4:	e3401105 	movt	r1, #261	; 0x105
 1003da8:	ebfffd9a 	bl	1003418 <d_printf>

	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
 1003dac:	e3a02001 	mov	r2, #1
 1003db0:	e3a0104b 	mov	r1, #75	; 0x4b
 1003db4:	e59f00c8 	ldr	r0, [pc, #200]	; 1003e84 <csi_hack_init+0x154>
 1003db8:	eb0009fd 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
 1003dbc:	e3a02001 	mov	r2, #1
 1003dc0:	e3a0104b 	mov	r1, #75	; 0x4b
 1003dc4:	e59f00b8 	ldr	r0, [pc, #184]	; 1003e84 <csi_hack_init+0x154>
 1003dc8:	eb000976 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
 1003dcc:	e3a02001 	mov	r2, #1
 1003dd0:	e3a0104a 	mov	r1, #74	; 0x4a
 1003dd4:	e59f00a8 	ldr	r0, [pc, #168]	; 1003e84 <csi_hack_init+0x154>
 1003dd8:	eb0009f5 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
 1003ddc:	e3a02001 	mov	r2, #1
 1003de0:	e3a0104a 	mov	r1, #74	; 0x4a
 1003de4:	e59f0098 	ldr	r0, [pc, #152]	; 1003e84 <csi_hack_init+0x154>
 1003de8:	eb00096e 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1003dec:	e3a02001 	mov	r2, #1
 1003df0:	e3a0104c 	mov	r1, #76	; 0x4c
 1003df4:	e59f0088 	ldr	r0, [pc, #136]	; 1003e84 <csi_hack_init+0x154>
 1003df8:	eb0009ed 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1003dfc:	e3a02001 	mov	r2, #1
 1003e00:	e3a0104c 	mov	r1, #76	; 0x4c
 1003e04:	e59f0078 	ldr	r0, [pc, #120]	; 1003e84 <csi_hack_init+0x154>
 1003e08:	eb000966 	bl	10063a8 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 1003e0c:	e3a02001 	mov	r2, #1
 1003e10:	e3a0104d 	mov	r1, #77	; 0x4d
 1003e14:	e59f0068 	ldr	r0, [pc, #104]	; 1003e84 <csi_hack_init+0x154>
 1003e18:	eb0009e5 	bl	10065b4 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 1003e1c:	e3a02001 	mov	r2, #1
 1003e20:	e3a0104d 	mov	r1, #77	; 0x4d
 1003e24:	e59f0058 	ldr	r0, [pc, #88]	; 1003e84 <csi_hack_init+0x154>
 1003e28:	eb00095e 	bl	10063a8 <XGpioPs_SetDirectionPin>
	dsb();
 1003e2c:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1003e30:	e3a03000 	mov	r3, #0
 1003e34:	e30027fe 	movw	r2, #2046	; 0x7fe
 1003e38:	e34833c1 	movt	r3, #33729	; 0x83c1
 1003e3c:	e5832104 	str	r2, [r3, #260]	; 0x104
	dsb();
 1003e40:	f57ff04f 	dsb	sy
	dsb();
 1003e44:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1003e48:	e3a0202a 	mov	r2, #42	; 0x2a
 1003e4c:	e5832108 	str	r2, [r3, #264]	; 0x108
	dsb();
 1003e50:	f57ff04f 	dsb	sy
	dsb();
 1003e54:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1003e58:	e3a02001 	mov	r2, #1
 1003e5c:	e583210c 	str	r2, [r3, #268]	; 0x10c
	dsb();
 1003e60:	f57ff04f 	dsb	sy

	fabcfg_write(FAB_CFG_CSI_LINE_BYTE_COUNT, 2046);
	fabcfg_write(FAB_CFG_CSI_DATA_TYPE, 0x2a);
	fabcfg_write(FAB_CFG_CSI_CTRL_FLAGS, 0x01); // LSB controls clock idling mode
}
 1003e64:	e8bd8010 	pop	{r4, pc}
		d_printf(D_ERROR, "mipihacks: fatal: unable to initialise DMA engine! (error=%d)", error);
 1003e68:	e3071674 	movw	r1, #30324	; 0x7674
 1003e6c:	e1a02000 	mov	r2, r0
 1003e70:	e3401105 	movt	r1, #261	; 0x105
 1003e74:	e3a00004 	mov	r0, #4
 1003e78:	ebfffd66 	bl	1003418 <d_printf>
		exit(-1);
 1003e7c:	e3e00000 	mvn	r0, #0
 1003e80:	fa0019aa 	blx	100a530 <exit>
 1003e84:	010a1b4c 	.word	0x010a1b4c

01003e88 <csi_hack_start_frame>:

void csi_hack_start_frame(uint32_t line_count)
{
 1003e88:	e92d4010 	push	{r4, lr}
	dsb();
 1003e8c:	f57ff04f 	dsb	sy
	_FAB_CFG_ACCESS(reg) = data;
 1003e90:	e3a03000 	mov	r3, #0
 1003e94:	e34833c1 	movt	r3, #33729	; 0x83c1
 1003e98:	e5830100 	str	r0, [r3, #256]	; 0x100
	dsb();
 1003e9c:	f57ff04f 	dsb	sy
	fabcfg_write(FAB_CFG_CSI_LINE_COUNT, line_count);

	// Stop frame first
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 1003ea0:	e59f0074 	ldr	r0, [pc, #116]	; 1003f1c <csi_hack_start_frame+0x94>
 1003ea4:	e3a02001 	mov	r2, #1
 1003ea8:	e3a0104d 	mov	r1, #77	; 0x4d
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 0);

	//d_printf(D_ERROR, "wait - startframe?");

	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to be LOW - ack/ready
 1003eac:	e1a04000 	mov	r4, r0
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 1003eb0:	eb0008fc 	bl	10062a8 <XGpioPs_WritePin>
	bogo_delay(1); // TODO: we need a DONE signal here -- OR a Stop-Ack signal...
 1003eb4:	e3a00001 	mov	r0, #1
 1003eb8:	ebfffd30 	bl	1003380 <bogo_delay>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 0);
 1003ebc:	e3a02000 	mov	r2, #0
 1003ec0:	e3a0104d 	mov	r1, #77	; 0x4d
 1003ec4:	e1a00004 	mov	r0, r4
 1003ec8:	eb0008f6 	bl	10062a8 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
 1003ecc:	e3a02001 	mov	r2, #1
 1003ed0:	e3a0104b 	mov	r1, #75	; 0x4b
 1003ed4:	e1a00004 	mov	r0, r4
 1003ed8:	eb0008f2 	bl	10062a8 <XGpioPs_WritePin>
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to be LOW - ack/ready
 1003edc:	e3a0104f 	mov	r1, #79	; 0x4f
 1003ee0:	e1a00004 	mov	r0, r4
 1003ee4:	eb0008b6 	bl	10061c4 <XGpioPs_ReadPin>
 1003ee8:	e3500000 	cmp	r0, #0
 1003eec:	1afffffa 	bne	1003edc <csi_hack_start_frame+0x54>
	while(!XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go HIGH - this cmd done
 1003ef0:	e59f4024 	ldr	r4, [pc, #36]	; 1003f1c <csi_hack_start_frame+0x94>
 1003ef4:	e3a0104f 	mov	r1, #79	; 0x4f
 1003ef8:	e1a00004 	mov	r0, r4
 1003efc:	eb0008b0 	bl	10061c4 <XGpioPs_ReadPin>
 1003f00:	e3500000 	cmp	r0, #0
 1003f04:	0afffffa 	beq	1003ef4 <csi_hack_start_frame+0x6c>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 0);
 1003f08:	e3a02000 	mov	r2, #0
 1003f0c:	e3a0104b 	mov	r1, #75	; 0x4b
 1003f10:	e59f0004 	ldr	r0, [pc, #4]	; 1003f1c <csi_hack_start_frame+0x94>

	//d_printf(D_ERROR, "done - startframe");
}
 1003f14:	e8bd4010 	pop	{r4, lr}
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 0);
 1003f18:	ea0008e2 	b	10062a8 <XGpioPs_WritePin>
 1003f1c:	010a1b4c 	.word	0x010a1b4c

01003f20 <csi_hack_stop_frame>:

void csi_hack_stop_frame()
{
 1003f20:	e92d4010 	push	{r4, lr}
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1003f24:	e3a02001 	mov	r2, #1
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 1003f28:	e59f4048 	ldr	r4, [pc, #72]	; 1003f78 <csi_hack_stop_frame+0x58>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1003f2c:	e3a0104c 	mov	r1, #76	; 0x4c
 1003f30:	e1a00004 	mov	r0, r4
 1003f34:	eb0008db 	bl	10062a8 <XGpioPs_WritePin>
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 1003f38:	e3a0104f 	mov	r1, #79	; 0x4f
 1003f3c:	e1a00004 	mov	r0, r4
 1003f40:	eb00089f 	bl	10061c4 <XGpioPs_ReadPin>
 1003f44:	e3500000 	cmp	r0, #0
 1003f48:	1afffffa 	bne	1003f38 <csi_hack_stop_frame+0x18>
	while(!XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;
 1003f4c:	e59f4024 	ldr	r4, [pc, #36]	; 1003f78 <csi_hack_stop_frame+0x58>
 1003f50:	e3a0104f 	mov	r1, #79	; 0x4f
 1003f54:	e1a00004 	mov	r0, r4
 1003f58:	eb000899 	bl	10061c4 <XGpioPs_ReadPin>
 1003f5c:	e3500000 	cmp	r0, #0
 1003f60:	0afffffa 	beq	1003f50 <csi_hack_stop_frame+0x30>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 0);
 1003f64:	e3a02000 	mov	r2, #0
 1003f68:	e3a0104c 	mov	r1, #76	; 0x4c
 1003f6c:	e59f0004 	ldr	r0, [pc, #4]	; 1003f78 <csi_hack_stop_frame+0x58>
}
 1003f70:	e8bd4010 	pop	{r4, lr}
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 0);
 1003f74:	ea0008cb 	b	10062a8 <XGpioPs_WritePin>
 1003f78:	010a1b4c 	.word	0x010a1b4c

01003f7c <csi_hack_send_line_data>:
	for(i = 0; i < sz; i++) {
		d_printf(D_RAW, "%02x ", buff[i]);
	}
	*/

	error = XAxiDma_SimpleTransfer(&mipi_dma, buff, sz, XAXIDMA_DMA_TO_DEVICE);
 1003f7c:	e1a02001 	mov	r2, r1
 1003f80:	e1a01000 	mov	r1, r0
 1003f84:	e3010d24 	movw	r0, #7460	; 0x1d24
{
 1003f88:	e92d4010 	push	{r4, lr}
	error = XAxiDma_SimpleTransfer(&mipi_dma, buff, sz, XAXIDMA_DMA_TO_DEVICE);
 1003f8c:	e3a03000 	mov	r3, #0
 1003f90:	e340010a 	movt	r0, #266	; 0x10a
 1003f94:	eb000200 	bl	100479c <XAxiDma_SimpleTransfer>

	if(error != XST_SUCCESS) {
 1003f98:	e2502000 	subs	r2, r0, #0
 1003f9c:	1a000017 	bne	1004000 <csi_hack_send_line_data+0x84>
	// instead - should be sufficient time to copy across
	//bogo_delay(1000);
	//d_printf(D_INFO, "mipihacks: done, initiating line xfer");

	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 1003fa0:	e59f406c 	ldr	r4, [pc, #108]	; 1004014 <csi_hack_send_line_data+0x98>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
 1003fa4:	e3a02001 	mov	r2, #1
 1003fa8:	e3a0104a 	mov	r1, #74	; 0x4a
 1003fac:	e1a00004 	mov	r0, r4
 1003fb0:	eb0008bc 	bl	10062a8 <XGpioPs_WritePin>
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 1003fb4:	e3a0104f 	mov	r1, #79	; 0x4f
 1003fb8:	e1a00004 	mov	r0, r4
 1003fbc:	eb000880 	bl	10061c4 <XGpioPs_ReadPin>
 1003fc0:	e3500000 	cmp	r0, #0
 1003fc4:	1afffffa 	bne	1003fb4 <csi_hack_send_line_data+0x38>
	while(!XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// then wait for DONE to go HIGH - command done
 1003fc8:	e59f4044 	ldr	r4, [pc, #68]	; 1004014 <csi_hack_send_line_data+0x98>
 1003fcc:	e3a0104f 	mov	r1, #79	; 0x4f
 1003fd0:	e1a00004 	mov	r0, r4
 1003fd4:	eb00087a 	bl	10061c4 <XGpioPs_ReadPin>
 1003fd8:	e3500000 	cmp	r0, #0
 1003fdc:	0afffffa 	beq	1003fcc <csi_hack_send_line_data+0x50>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 0);
 1003fe0:	e59f002c 	ldr	r0, [pc, #44]	; 1004014 <csi_hack_send_line_data+0x98>
 1003fe4:	e3a02000 	mov	r2, #0
 1003fe8:	e3a0104a 	mov	r1, #74	; 0x4a
 1003fec:	eb0008ad 	bl	10062a8 <XGpioPs_WritePin>

	//d_printf(D_ERROR, "done iter");

	XAxiDma_Reset(&mipi_dma);
 1003ff0:	e3010d24 	movw	r0, #7460	; 0x1d24
}
 1003ff4:	e8bd4010 	pop	{r4, lr}
	XAxiDma_Reset(&mipi_dma);
 1003ff8:	e340010a 	movt	r0, #266	; 0x10a
 1003ffc:	ea00000a 	b	100402c <XAxiDma_Reset>
		d_printf(D_ERROR, "mipihacks: unable to start transfer, error %d", error);
 1004000:	e30716f0 	movw	r1, #30448	; 0x76f0
 1004004:	e3a00004 	mov	r0, #4
 1004008:	e3401105 	movt	r1, #261	; 0x105
}
 100400c:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "mipihacks: unable to start transfer, error %d", error);
 1004010:	eafffd00 	b	1003418 <d_printf>
 1004014:	010a1b4c 	.word	0x010a1b4c

01004018 <enable_caches>:
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
    Xil_DCacheEnable();
#endif
#endif
}
 1004018:	e12fff1e 	bx	lr

0100401c <disable_caches>:
 100401c:	e12fff1e 	bx	lr

01004020 <init_uart>:
 1004020:	e12fff1e 	bx	lr

01004024 <init_platform>:
 1004024:	e12fff1e 	bx	lr

01004028 <cleanup_platform>:
 1004028:	e12fff1e 	bx	lr

0100402c <XAxiDma_Reset>:
	UINTPTR RegBase;
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_BdRing *RxRingPtr;
	int RingIndex;

	if (InstancePtr->HasMm2S) {
 100402c:	e5903004 	ldr	r3, [r0, #4]
{
 1004030:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if (InstancePtr->HasMm2S) {
 1004034:	e3530000 	cmp	r3, #0
 1004038:	0a000019 	beq	10040a4 <XAxiDma_Reset+0x78>
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* Save the locations of current BDs both rings are working on
		 * before the reset so later we can resume the rings smoothly.
		 */
		if(XAxiDma_HasSg(InstancePtr)){
 100403c:	e5903010 	ldr	r3, [r0, #16]
 1004040:	e3530000 	cmp	r3, #0
 1004044:	1a00001a 	bne	10040b4 <XAxiDma_Reset+0x88>
*
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1004048:	e5902000 	ldr	r2, [r0]
	*LocalAddr = Value;
 100404c:	e3a01004 	mov	r1, #4

	/* Set TX/RX Channel state */
	if (InstancePtr->HasMm2S) {
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004050:	e3a03002 	mov	r3, #2
 1004054:	e5821000 	str	r1, [r2]
 1004058:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 100405c:	e5903008 	ldr	r3, [r0, #8]
 1004060:	e3530000 	cmp	r3, #0
 1004064:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004068:	e5901744 	ldr	r1, [r0, #1860]	; 0x744
 100406c:	e3510000 	cmp	r1, #0
 1004070:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
 1004074:	e3a03000 	mov	r3, #0
						RingIndex++) {
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);
			if (InstancePtr->HasS2Mm) {
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004078:	e3a0e06c 	mov	lr, #108	; 0x6c
 100407c:	e3a0c002 	mov	ip, #2
 1004080:	e022039e 	mla	r2, lr, r3, r0
						RingIndex++) {
 1004084:	e2833001 	add	r3, r3, #1
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004088:	e1530001 	cmp	r3, r1
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 100408c:	e582c088 	str	ip, [r2, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004090:	1afffffa 	bne	1004080 <XAxiDma_Reset+0x54>
 1004094:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	if (InstancePtr->HasMm2S) {
 1004098:	e5903004 	ldr	r3, [r0, #4]
 100409c:	e3530000 	cmp	r3, #0
 10040a0:	1affffe8 	bne	1004048 <XAxiDma_Reset+0x1c>
		RegBase = InstancePtr->RegBase + XAXIDMA_RX_OFFSET;
 10040a4:	e5903000 	ldr	r3, [r0]
 10040a8:	e3a02004 	mov	r2, #4
 10040ac:	e5832030 	str	r2, [r3, #48]	; 0x30
	if (InstancePtr->HasMm2S) {
 10040b0:	eaffffe9 	b	100405c <XAxiDma_Reset+0x30>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 10040b4:	e1c021d4 	ldrd	r2, [r0, #20]
 10040b8:	e3530000 	cmp	r3, #0
 10040bc:	1a000018 	bne	1004124 <XAxiDma_Reset+0xf8>
	return *(volatile u32 *) Addr;
 10040c0:	e5923008 	ldr	r3, [r2, #8]
 10040c4:	e580305c 	str	r3, [r0, #92]	; 0x5c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10040c8:	e590c744 	ldr	ip, [r0, #1860]	; 0x744
 10040cc:	e35c0000 	cmp	ip, #0
 10040d0:	daffffdc 	ble	1004048 <XAxiDma_Reset+0x1c>
 10040d4:	e3a0206c 	mov	r2, #108	; 0x6c
 10040d8:	e1a03000 	mov	r3, r0
 10040dc:	e02c0c92 	mla	ip, r2, ip, r0
 10040e0:	ea000008 	b	1004108 <XAxiDma_Reset+0xdc>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 10040e4:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
 10040e8:	e3520000 	cmp	r2, #0
 10040ec:	e282e001 	add	lr, r2, #1
 10040f0:	0a000008 	beq	1004118 <XAxiDma_Reset+0xec>
 10040f4:	e791228e 	ldr	r2, [r1, lr, lsl #5]
 10040f8:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 10040fc:	e283306c 	add	r3, r3, #108	; 0x6c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004100:	e15c0003 	cmp	ip, r3
 1004104:	0affffe3 	beq	1004098 <XAxiDma_Reset+0x6c>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1004108:	e5932084 	ldr	r2, [r3, #132]	; 0x84
 100410c:	e5931080 	ldr	r1, [r3, #128]	; 0x80
 1004110:	e3520000 	cmp	r2, #0
 1004114:	1afffff2 	bne	10040e4 <XAxiDma_Reset+0xb8>
 1004118:	e5912008 	ldr	r2, [r1, #8]
 100411c:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1004120:	eafffff5 	b	10040fc <XAxiDma_Reset+0xd0>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1004124:	e5903078 	ldr	r3, [r0, #120]	; 0x78
 1004128:	e3530000 	cmp	r3, #0
 100412c:	0affffe3 	beq	10040c0 <XAxiDma_Reset+0x94>
 1004130:	e2833001 	add	r3, r3, #1
 1004134:	e7923283 	ldr	r3, [r2, r3, lsl #5]
 1004138:	e580305c 	str	r3, [r0, #92]	; 0x5c
 100413c:	eaffffe1 	b	10040c8 <XAxiDma_Reset+0x9c>

01004140 <XAxiDma_ResetIsDone>:
	TxRingPtr = XAxiDma_GetTxRing(InstancePtr);
	RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

	/* Check transmit channel
	 */
	if (InstancePtr->HasMm2S) {
 1004140:	e5903004 	ldr	r3, [r0, #4]
 1004144:	e3530000 	cmp	r3, #0
 1004148:	0a000003 	beq	100415c <XAxiDma_ResetIsDone+0x1c>
 100414c:	e5903014 	ldr	r3, [r0, #20]
 1004150:	e5933000 	ldr	r3, [r3]
		RegisterValue = XAxiDma_ReadReg(TxRingPtr->ChanBase,
			XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1004154:	e3130004 	tst	r3, #4
 1004158:	1a000009 	bne	1004184 <XAxiDma_ResetIsDone+0x44>
		}
	}

	/* Check receive channel
	 */
	if (InstancePtr->HasS2Mm) {
 100415c:	e5903008 	ldr	r3, [r0, #8]
 1004160:	e3530000 	cmp	r3, #0
 1004164:	0a000004 	beq	100417c <XAxiDma_ResetIsDone+0x3c>
 1004168:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 100416c:	e5930000 	ldr	r0, [r3]
		RegisterValue = XAxiDma_ReadReg(RxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1004170:	e2200004 	eor	r0, r0, #4
 1004174:	e7e00150 	ubfx	r0, r0, #2, #1
 1004178:	e12fff1e 	bx	lr

			return 0;
		}
	}

	return 1;
 100417c:	e3a00001 	mov	r0, #1
}
 1004180:	e12fff1e 	bx	lr
			return 0;
 1004184:	e3a00000 	mov	r0, #0
 1004188:	e12fff1e 	bx	lr

0100418c <XAxiDma_CfgInitialize>:
{
 100418c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!Config) {
 1004190:	e2515000 	subs	r5, r1, #0
	InstancePtr->Initialized = 0;
 1004194:	e3a01000 	mov	r1, #0
{
 1004198:	e24dd00c 	sub	sp, sp, #12
	InstancePtr->Initialized = 0;
 100419c:	e580100c 	str	r1, [r0, #12]
		return XST_INVALID_PARAM;
 10041a0:	03a0000f 	moveq	r0, #15
	if(!Config) {
 10041a4:	0a000078 	beq	100438c <XAxiDma_CfgInitialize+0x200>
	memset(InstancePtr, 0, sizeof(XAxiDma));
 10041a8:	e3a02e75 	mov	r2, #1872	; 0x750
 10041ac:	e1a04000 	mov	r4, r0
	BaseAddr = Config->BaseAddr;
 10041b0:	e5956004 	ldr	r6, [r5, #4]
	memset(InstancePtr, 0, sizeof(XAxiDma));
 10041b4:	fa001fc9 	blx	100c0e0 <memset>
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 10041b8:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 10041bc:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
	InstancePtr->AddrWidth = Config->AddrWidth;
 10041c0:	e595103c 	ldr	r1, [r5, #60]	; 0x3c
	if (!InstancePtr->TxNumChannels)
 10041c4:	e3530000 	cmp	r3, #0
	InstancePtr->HasMm2S = Config->HasMm2S;
 10041c8:	e595b00c 	ldr	fp, [r5, #12]
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 10041cc:	e595a018 	ldr	sl, [r5, #24]
	InstancePtr->HasSg = Config->HasSg;
 10041d0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 10041d4:	e5958038 	ldr	r8, [r5, #56]	; 0x38
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 10041d8:	e5843740 	str	r3, [r4, #1856]	; 0x740
		InstancePtr->TxNumChannels = 1;
 10041dc:	03a03001 	moveq	r3, #1
 10041e0:	05843740 	streq	r3, [r4, #1856]	; 0x740
	if (!InstancePtr->RxNumChannels)
 10041e4:	e3500000 	cmp	r0, #0
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 10041e8:	e5840744 	str	r0, [r4, #1860]	; 0x744
		InstancePtr->RxNumChannels = 1;
 10041ec:	03a00001 	moveq	r0, #1
	InstancePtr->AddrWidth = Config->AddrWidth;
 10041f0:	e58d1004 	str	r1, [sp, #4]
	InstancePtr->HasMm2S = Config->HasMm2S;
 10041f4:	e8840840 	stm	r4, {r6, fp}
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 10041f8:	e584a008 	str	sl, [r4, #8]
	InstancePtr->HasSg = Config->HasSg;
 10041fc:	e5842010 	str	r2, [r4, #16]
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1004200:	e5848748 	str	r8, [r4, #1864]	; 0x748
	InstancePtr->AddrWidth = Config->AddrWidth;
 1004204:	e584174c 	str	r1, [r4, #1868]	; 0x74c
		InstancePtr->RxNumChannels = 1;
 1004208:	05840744 	streq	r0, [r4, #1860]	; 0x744
	if (!InstancePtr->RxNumChannels)
 100420c:	0a000060 	beq	1004394 <XAxiDma_CfgInitialize+0x208>
	if ((InstancePtr->RxNumChannels > 1) ||
 1004210:	e3500001 	cmp	r0, #1
 1004214:	da00005e 	ble	1004394 <XAxiDma_CfgInitialize+0x208>
		MaxTransferLen =
 1004218:	e30f9fff 	movw	r9, #65535	; 0xffff
	if (!InstancePtr->MicroDmaMode) {
 100421c:	e3580000 	cmp	r8, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1004220:	e3a02002 	mov	r2, #2
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1004224:	e3a03000 	mov	r3, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1004228:	e584201c 	str	r2, [r4, #28]
	InstancePtr->TxBdRing.IsRxChannel = 0;
 100422c:	e5843018 	str	r3, [r4, #24]
		InstancePtr->TxBdRing.MaxTransferLen = MaxTransferLen;
 1004230:	01a02009 	moveq	r2, r9
	if (!InstancePtr->MicroDmaMode) {
 1004234:	0a000006 	beq	1004254 <XAxiDma_CfgInitialize+0xc8>
				((Config->Mm2SDataWidth / 4) *
 1004238:	e5953014 	ldr	r3, [r5, #20]
 100423c:	e5952030 	ldr	r2, [r5, #48]	; 0x30
 1004240:	e2831003 	add	r1, r3, #3
 1004244:	e3530000 	cmp	r3, #0
 1004248:	b1a03001 	movlt	r3, r1
 100424c:	e1a03143 	asr	r3, r3, #2
 1004250:	e0020392 	mul	r2, r2, r3
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004254:	e3500000 	cmp	r0, #0
	InstancePtr->TxBdRing.RingIndex = 0;
 1004258:	e3a03000 	mov	r3, #0
 100425c:	e5842030 	str	r2, [r4, #48]	; 0x30
						 = AXIDMA_CHANNEL_HALTED;
 1004260:	c3a0706c 	movgt	r7, #108	; 0x6c
	InstancePtr->TxBdRing.RingIndex = 0;
 1004264:	e5843078 	str	r3, [r4, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004268:	c1a02004 	movgt	r2, r4
						 = AXIDMA_CHANNEL_HALTED;
 100426c:	c3a0e002 	movgt	lr, #2
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1004270:	c3a0c001 	movgt	ip, #1
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004274:	da000007 	ble	1004298 <XAxiDma_CfgInitialize+0x10c>
						 = AXIDMA_CHANNEL_HALTED;
 1004278:	e0214397 	mla	r1, r7, r3, r4
 100427c:	e282206c 	add	r2, r2, #108	; 0x6c
 1004280:	e581e088 	str	lr, [r1, #136]	; 0x88
		InstancePtr->RxBdRing[Index].RingIndex = Index;
 1004284:	e5823078 	str	r3, [r2, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004288:	e2833001 	add	r3, r3, #1
 100428c:	e1500003 	cmp	r0, r3
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1004290:	e582c018 	str	ip, [r2, #24]
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004294:	1afffff7 	bne	1004278 <XAxiDma_CfgInitialize+0xec>
	if (InstancePtr->HasMm2S) {
 1004298:	e35b0000 	cmp	fp, #0
 100429c:	0a00000c 	beq	10042d4 <XAxiDma_CfgInitialize+0x148>
			((unsigned int)Config->Mm2SDataWidth >> 3);
 10042a0:	e5953014 	ldr	r3, [r5, #20]
		if (InstancePtr->AddrWidth > 32)
 10042a4:	e59d2004 	ldr	r2, [sp, #4]
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 10042a8:	e595c008 	ldr	ip, [r5, #8]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 10042ac:	e5951010 	ldr	r1, [r5, #16]
		if (InstancePtr->AddrWidth > 32)
 10042b0:	e3520020 	cmp	r2, #32
			((unsigned int)Config->Mm2SDataWidth >> 3);
 10042b4:	e1a031a3 	lsr	r3, r3, #3
		if (InstancePtr->AddrWidth > 32)
 10042b8:	d3a02000 	movle	r2, #0
		InstancePtr->TxBdRing.ChanBase =
 10042bc:	e5846014 	str	r6, [r4, #20]
		if (InstancePtr->AddrWidth > 32)
 10042c0:	c3a02001 	movgt	r2, #1
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 10042c4:	e584c020 	str	ip, [r4, #32]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 10042c8:	e5841024 	str	r1, [r4, #36]	; 0x24
		InstancePtr->TxBdRing.DataWidth =
 10042cc:	e5843028 	str	r3, [r4, #40]	; 0x28
 10042d0:	e584202c 	str	r2, [r4, #44]	; 0x2c
	if (InstancePtr->HasS2Mm) {
 10042d4:	e35a0000 	cmp	sl, #0
 10042d8:	0a00001e 	beq	1004358 <XAxiDma_CfgInitialize+0x1cc>
		for (Index = 0;
 10042dc:	e3500000 	cmp	r0, #0
 10042e0:	da00001c 	ble	1004358 <XAxiDma_CfgInitialize+0x1cc>
			((unsigned int)Config->S2MmDataWidth >> 3);
 10042e4:	e5951020 	ldr	r1, [r5, #32]
 10042e8:	e3a0306c 	mov	r3, #108	; 0x6c
 10042ec:	e0204093 	mla	r0, r3, r0, r4
 10042f0:	e59d3004 	ldr	r3, [sp, #4]
					Config->HasStsCntrlStrm;
 10042f4:	e595e008 	ldr	lr, [r5, #8]
						((Config->S2MmDataWidth / 4) *
 10042f8:	e3510000 	cmp	r1, #0
					Config->HasS2MmDRE;
 10042fc:	e595c01c 	ldr	ip, [r5, #28]
						((Config->S2MmDataWidth / 4) *
 1004300:	e2817003 	add	r7, r1, #3
 1004304:	a1a07001 	movge	r7, r1
 1004308:	e1a07147 	asr	r7, r7, #2
 100430c:	e3530020 	cmp	r3, #32
			((unsigned int)Config->S2MmDataWidth >> 3);
 1004310:	e1a011a1 	lsr	r1, r1, #3
 1004314:	e2866030 	add	r6, r6, #48	; 0x30
 1004318:	d3a0a000 	movle	sl, #0
 100431c:	c3a0a001 	movgt	sl, #1
 1004320:	e1a03004 	mov	r3, r4
			if (!InstancePtr->MicroDmaMode) {
 1004324:	e3580000 	cmp	r8, #0
				InstancePtr->RxBdRing[Index].MaxTransferLen =
 1004328:	e1a02009 	mov	r2, r9
			InstancePtr->RxBdRing[Index].ChanBase =
 100432c:	e5836080 	str	r6, [r3, #128]	; 0x80
			InstancePtr->RxBdRing[Index].HasStsCntrlStrm =
 1004330:	e283306c 	add	r3, r3, #108	; 0x6c
 1004334:	e583e020 	str	lr, [r3, #32]
			InstancePtr->RxBdRing[Index].HasDRE =
 1004338:	e583c024 	str	ip, [r3, #36]	; 0x24
			InstancePtr->RxBdRing[Index].DataWidth =
 100433c:	e5831028 	str	r1, [r3, #40]	; 0x28
						((Config->S2MmDataWidth / 4) *
 1004340:	15952034 	ldrne	r2, [r5, #52]	; 0x34
 1004344:	e583a02c 	str	sl, [r3, #44]	; 0x2c
 1004348:	10020792 	mulne	r2, r2, r7
 100434c:	e5832030 	str	r2, [r3, #48]	; 0x30
		for (Index = 0;
 1004350:	e1530000 	cmp	r3, r0
 1004354:	1afffff2 	bne	1004324 <XAxiDma_CfgInitialize+0x198>
	XAxiDma_Reset(InstancePtr);
 1004358:	e1a00004 	mov	r0, r4
 100435c:	e3a05f7d 	mov	r5, #500	; 0x1f4
 1004360:	ebffff31 	bl	100402c <XAxiDma_Reset>
	while (TimeOut) {
 1004364:	ea000001 	b	1004370 <XAxiDma_CfgInitialize+0x1e4>
 1004368:	e2555001 	subs	r5, r5, #1
 100436c:	0a00000f 	beq	10043b0 <XAxiDma_CfgInitialize+0x224>
		if(XAxiDma_ResetIsDone(InstancePtr)) {
 1004370:	e1a00004 	mov	r0, r4
 1004374:	ebffff71 	bl	1004140 <XAxiDma_ResetIsDone>
 1004378:	e3500000 	cmp	r0, #0
 100437c:	0afffff9 	beq	1004368 <XAxiDma_CfgInitialize+0x1dc>
	return XST_SUCCESS;
 1004380:	e3a00000 	mov	r0, #0
	InstancePtr->Initialized = 1;
 1004384:	e3a03001 	mov	r3, #1
 1004388:	e584300c 	str	r3, [r4, #12]
}
 100438c:	e28dd00c 	add	sp, sp, #12
 1004390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((InstancePtr->RxNumChannels > 1) ||
 1004394:	e5943740 	ldr	r3, [r4, #1856]	; 0x740
 1004398:	e3530001 	cmp	r3, #1
 100439c:	caffff9d 	bgt	1004218 <XAxiDma_CfgInitialize+0x8c>
		MaxTransferLen = (1U << Config->SgLengthWidth) - 1;
 10043a0:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 10043a4:	e3e09000 	mvn	r9, #0
 10043a8:	e1e09319 	mvn	r9, r9, lsl r3
 10043ac:	eaffff9a 	b	100421c <XAxiDma_CfgInitialize+0x90>
		xdbg_printf(XDBG_DEBUG_ERROR, "Failed reset in"
 10043b0:	e3070720 	movw	r0, #30496	; 0x7720
 10043b4:	e3400105 	movt	r0, #261	; 0x105
 10043b8:	fa001f9f 	blx	100c23c <puts>
		InstancePtr->Initialized = 0;
 10043bc:	e584500c 	str	r5, [r4, #12]
		return XST_DMA_ERROR;
 10043c0:	e3a00009 	mov	r0, #9
 10043c4:	eafffff0 	b	100438c <XAxiDma_CfgInitialize+0x200>

010043c8 <XAxiDma_Pause>:
*
*****************************************************************************/
int XAxiDma_Pause(XAxiDma * InstancePtr)
{

	if (!InstancePtr->Initialized) {
 10043c8:	e590100c 	ldr	r1, [r0, #12]
{
 10043cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 10043d0:	e3510000 	cmp	r1, #0
 10043d4:	0a000022 	beq	1004464 <XAxiDma_Pause+0x9c>
					" %d\r\n",InstancePtr->Initialized);

		return XST_NOT_SGDMA;
	}

	if (InstancePtr->HasMm2S) {
 10043d8:	e5903004 	ldr	r3, [r0, #4]
 10043dc:	e3530000 	cmp	r3, #0
 10043e0:	0a000007 	beq	1004404 <XAxiDma_Pause+0x3c>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* If channel is halted, then we do not need to do anything
		 */
		if(!XAxiDma_HasSg(InstancePtr)) {
 10043e4:	e5903010 	ldr	r3, [r0, #16]
 10043e8:	e3530000 	cmp	r3, #0
 10043ec:	05902014 	ldreq	r2, [r0, #20]
 10043f0:	05923000 	ldreq	r3, [r2]
			XAxiDma_WriteReg(TxRingPtr->ChanBase,
 10043f4:	03c33001 	biceq	r3, r3, #1
	*LocalAddr = Value;
 10043f8:	05823000 	streq	r3, [r2]
				XAxiDma_ReadReg(TxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET)
				& ~XAXIDMA_CR_RUNSTOP_MASK);
		}

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10043fc:	e3a03002 	mov	r3, #2
 1004400:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 1004404:	e5903008 	ldr	r3, [r0, #8]
 1004408:	e3530000 	cmp	r3, #0
 100440c:	0a000012 	beq	100445c <XAxiDma_Pause+0x94>
		int RingIndex = 0;
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004410:	e5904744 	ldr	r4, [r0, #1860]	; 0x744
 1004414:	e3540000 	cmp	r4, #0
 1004418:	da00000f 	ble	100445c <XAxiDma_Pause+0x94>
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);

			/* If channel is halted, then we do not need to do anything
			 */

			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 100441c:	e5907010 	ldr	r7, [r0, #16]
 1004420:	e1a02000 	mov	r2, r0
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004424:	e3a03000 	mov	r3, #0
					XAxiDma_ReadReg(RxRingPtr->ChanBase,
					XAXIDMA_CR_OFFSET)
					& ~XAXIDMA_CR_RUNSTOP_MASK);
			}

			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004428:	e3a0606c 	mov	r6, #108	; 0x6c
 100442c:	e3a05002 	mov	r5, #2
			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 1004430:	e3570000 	cmp	r7, #0
 1004434:	e282206c 	add	r2, r2, #108	; 0x6c
	return *(volatile u32 *) Addr;
 1004438:	0592e014 	ldreq	lr, [r2, #20]
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 100443c:	e0210396 	mla	r1, r6, r3, r0
				RingIndex++) {
 1004440:	e2833001 	add	r3, r3, #1
 1004444:	059ec000 	ldreq	ip, [lr]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 1004448:	03ccc001 	biceq	ip, ip, #1
	*LocalAddr = Value;
 100444c:	058ec000 	streq	ip, [lr]
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004450:	e1530004 	cmp	r3, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004454:	e5815088 	str	r5, [r1, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004458:	1afffff4 	bne	1004430 <XAxiDma_Pause+0x68>
		}
	}

	return XST_SUCCESS;
 100445c:	e3a00000 	mov	r0, #0

}
 1004460:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Pause: Driver not initialized"
 1004464:	e307073c 	movw	r0, #30524	; 0x773c
 1004468:	e3400105 	movt	r0, #261	; 0x105
 100446c:	fa001f4d 	blx	100c1a8 <printf>
		return XST_NOT_SGDMA;
 1004470:	e3a00010 	mov	r0, #16
 1004474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01004478 <XAxiDma_Resume>:
*****************************************************************************/
int XAxiDma_Resume(XAxiDma * InstancePtr)
{
	int Status;

	if (!InstancePtr->Initialized) {
 1004478:	e590100c 	ldr	r1, [r0, #12]
{
 100447c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 1004480:	e3510000 	cmp	r1, #0
 1004484:	0a000032 	beq	1004554 <XAxiDma_Resume+0xdc>
		" %d\r\n",InstancePtr->Initialized);

		return 0;
	}

	if (InstancePtr->HasMm2S) {
 1004488:	e5903004 	ldr	r3, [r0, #4]
 100448c:	e1a04000 	mov	r4, r0
 1004490:	e3530000 	cmp	r3, #0
 1004494:	0a000028 	beq	100453c <XAxiDma_Resume+0xc4>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(TxRingPtr)) {
 1004498:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 100449c:	e5933004 	ldr	r3, [r3, #4]
 10044a0:	e3130001 	tst	r3, #1
 10044a4:	1a000085 	bne	10046c0 <XAxiDma_Resume+0x248>

			return 0;
		}
	}

	if (InstancePtr->HasS2Mm) {
 10044a8:	e5903008 	ldr	r3, [r0, #8]
 10044ac:	e3530000 	cmp	r3, #0
 10044b0:	1a000044 	bne	10045c8 <XAxiDma_Resume+0x150>
		if(XAxiDma_HasSg(InstancePtr)) {
 10044b4:	e5943010 	ldr	r3, [r4, #16]
 10044b8:	e3530000 	cmp	r3, #0
 10044bc:	1a000048 	bne	10045e4 <XAxiDma_Resume+0x16c>
		TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10044c0:	e3a03001 	mov	r3, #1
 10044c4:	e584301c 	str	r3, [r4, #28]
	if (InstancePtr->HasS2Mm) {
 10044c8:	e5943008 	ldr	r3, [r4, #8]
 10044cc:	e3530000 	cmp	r3, #0
 10044d0:	0a00001c 	beq	1004548 <XAxiDma_Resume+0xd0>
 10044d4:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 10044d8:	e3530000 	cmp	r3, #0
 10044dc:	da000019 	ble	1004548 <XAxiDma_Resume+0xd0>
 10044e0:	e3a05000 	mov	r5, #0
				Status = XAxiDma_BdRingStart(RxRingPtr);
 10044e4:	e2848080 	add	r8, r4, #128	; 0x80
 10044e8:	e3a0606c 	mov	r6, #108	; 0x6c
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10044ec:	e3a07001 	mov	r7, #1
 10044f0:	ea000005 	b	100450c <XAxiDma_Resume+0x94>
 10044f4:	e0234596 	mla	r3, r6, r5, r4
					RingIndex++) {
 10044f8:	e2855001 	add	r5, r5, #1
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10044fc:	e5837088 	str	r7, [r3, #136]	; 0x88
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 1004500:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1004504:	e1530005 	cmp	r3, r5
 1004508:	da00000e 	ble	1004548 <XAxiDma_Resume+0xd0>
			if(XAxiDma_HasSg(InstancePtr)) {
 100450c:	e5943010 	ldr	r3, [r4, #16]
 1004510:	e3530000 	cmp	r3, #0
 1004514:	0afffff6 	beq	10044f4 <XAxiDma_Resume+0x7c>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 1004518:	e0208596 	mla	r0, r6, r5, r8
 100451c:	eb0002a1 	bl	1004fa8 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1004520:	e2501000 	subs	r1, r0, #0
 1004524:	0afffff2 	beq	10044f4 <XAxiDma_Resume+0x7c>
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1004528:	e3070854 	movw	r0, #30804	; 0x7854
					return XST_DMA_ERROR;
 100452c:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1004530:	e3400105 	movt	r0, #261	; 0x105
 1004534:	fa001f1b 	blx	100c1a8 <printf>
					return XST_DMA_ERROR;
 1004538:	ea000003 	b	100454c <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasS2Mm) {
 100453c:	e5903008 	ldr	r3, [r0, #8]
 1004540:	e3530000 	cmp	r3, #0
 1004544:	1a000008 	bne	100456c <XAxiDma_Resume+0xf4>
	return XST_SUCCESS;
 1004548:	e3a04000 	mov	r4, #0
}
 100454c:	e1a00004 	mov	r0, r4
 1004550:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 1004554:	e3070760 	movw	r0, #30560	; 0x7760
		return XST_NOT_SGDMA;
 1004558:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 100455c:	e3400105 	movt	r0, #261	; 0x105
 1004560:	fa001f10 	blx	100c1a8 <printf>
}
 1004564:	e1a00004 	mov	r0, r4
 1004568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		XAxiDma_BdRing *RxRingPtr;
		RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 100456c:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1004570:	e5933004 	ldr	r3, [r3, #4]
 1004574:	e3130001 	tst	r3, #1
 1004578:	0affffd5 	beq	10044d4 <XAxiDma_Resume+0x5c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 100457c:	e30707a4 	movw	r0, #30628	; 0x77a4
 1004580:	e3400105 	movt	r0, #261	; 0x105
 1004584:	fa001f2c 	blx	100c23c <puts>
	if (!InstancePtr->Initialized) {
 1004588:	e594100c 	ldr	r1, [r4, #12]
 100458c:	e3510000 	cmp	r1, #0
 1004590:	0a000058 	beq	10046f8 <XAxiDma_Resume+0x280>
	if (InstancePtr->HasMm2S) {
 1004594:	e5943004 	ldr	r3, [r4, #4]
 1004598:	e3530000 	cmp	r3, #0
 100459c:	0a000002 	beq	10045ac <XAxiDma_Resume+0x134>
		if (TxRingPtr->RunState == AXIDMA_CHANNEL_HALTED) {
 10045a0:	e594301c 	ldr	r3, [r4, #28]
 10045a4:	e3530002 	cmp	r3, #2
 10045a8:	0a000048 	beq	10046d0 <XAxiDma_Resume+0x258>
	if (InstancePtr->HasS2Mm) {
 10045ac:	e5943008 	ldr	r3, [r4, #8]
 10045b0:	e3530000 	cmp	r3, #0
 10045b4:	1a000013 	bne	1004608 <XAxiDma_Resume+0x190>
	if (InstancePtr->HasMm2S) {
 10045b8:	e5943004 	ldr	r3, [r4, #4]
 10045bc:	e3530000 	cmp	r3, #0
 10045c0:	1affffbb 	bne	10044b4 <XAxiDma_Resume+0x3c>
 10045c4:	eaffffdf 	b	1004548 <XAxiDma_Resume+0xd0>
		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 10045c8:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 10045cc:	e5933004 	ldr	r3, [r3, #4]
 10045d0:	e3130001 	tst	r3, #1
 10045d4:	1affffe8 	bne	100457c <XAxiDma_Resume+0x104>
		if(XAxiDma_HasSg(InstancePtr)) {
 10045d8:	e5943010 	ldr	r3, [r4, #16]
 10045dc:	e3530000 	cmp	r3, #0
 10045e0:	0affffb6 	beq	10044c0 <XAxiDma_Resume+0x48>
			Status = XAxiDma_BdRingStart(TxRingPtr);
 10045e4:	e2840014 	add	r0, r4, #20
 10045e8:	eb00026e 	bl	1004fa8 <XAxiDma_BdRingStart>
			if (Status != XST_SUCCESS) {
 10045ec:	e2501000 	subs	r1, r0, #0
 10045f0:	0affffb2 	beq	10044c0 <XAxiDma_Resume+0x48>
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10045f4:	e307082c 	movw	r0, #30764	; 0x782c
				return XST_DMA_ERROR;
 10045f8:	e3a04009 	mov	r4, #9
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 10045fc:	e3400105 	movt	r0, #261	; 0x105
 1004600:	fa001ee8 	blx	100c1a8 <printf>
				return XST_DMA_ERROR;
 1004604:	eaffffd0 	b	100454c <XAxiDma_Resume+0xd4>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004608:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 100460c:	e3530000 	cmp	r3, #0
 1004610:	da000042 	ble	1004720 <XAxiDma_Resume+0x2a8>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1004614:	e5942088 	ldr	r2, [r4, #136]	; 0x88
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr,
 1004618:	e2846080 	add	r6, r4, #128	; 0x80
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 100461c:	e3520002 	cmp	r2, #2
 1004620:	1a00003e 	bne	1004720 <XAxiDma_Resume+0x2a8>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004624:	e3a05000 	mov	r5, #0
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004628:	e3a0706c 	mov	r7, #108	; 0x6c
 100462c:	e3a08001 	mov	r8, #1
 1004630:	ea00000e 	b	1004670 <XAxiDma_Resume+0x1f8>
 1004634:	e5962000 	ldr	r2, [r6]
 1004638:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 100463c:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1004640:	e5823000 	str	r3, [r2]
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004644:	e0234597 	mla	r3, r7, r5, r4
						RingIndex++) {
 1004648:	e2855001 	add	r5, r5, #1
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 100464c:	e0224597 	mla	r2, r7, r5, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004650:	e5838088 	str	r8, [r3, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004654:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1004658:	e286606c 	add	r6, r6, #108	; 0x6c
 100465c:	e1550003 	cmp	r5, r3
 1004660:	aa000012 	bge	10046b0 <XAxiDma_Resume+0x238>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1004664:	e5923088 	ldr	r3, [r2, #136]	; 0x88
 1004668:	e3530002 	cmp	r3, #2
 100466c:	1a00000f 	bne	10046b0 <XAxiDma_Resume+0x238>
			if(XAxiDma_HasSg(InstancePtr)) {
 1004670:	e5943010 	ldr	r3, [r4, #16]
 1004674:	e3530000 	cmp	r3, #0
 1004678:	0affffed 	beq	1004634 <XAxiDma_Resume+0x1bc>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 100467c:	e1a00006 	mov	r0, r6
 1004680:	eb000248 	bl	1004fa8 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1004684:	e2501000 	subs	r1, r0, #0
 1004688:	0affffed 	beq	1004644 <XAxiDma_Resume+0x1cc>
					xdbg_printf(XDBG_DEBUG_ERROR,
 100468c:	e30707e8 	movw	r0, #30696	; 0x77e8
					return XST_DMA_ERROR;
 1004690:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR,
 1004694:	e3400105 	movt	r0, #261	; 0x105
 1004698:	fa001ec2 	blx	100c1a8 <printf>
			xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed to start"
 100469c:	e3070808 	movw	r0, #30728	; 0x7808
 10046a0:	e1a01004 	mov	r1, r4
 10046a4:	e3400105 	movt	r0, #261	; 0x105
 10046a8:	fa001ebe 	blx	100c1a8 <printf>
			return Status;
 10046ac:	eaffffa6 	b	100454c <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasMm2S) {
 10046b0:	e5943004 	ldr	r3, [r4, #4]
 10046b4:	e3530000 	cmp	r3, #0
 10046b8:	0affff82 	beq	10044c8 <XAxiDma_Resume+0x50>
 10046bc:	eaffff7c 	b	10044b4 <XAxiDma_Resume+0x3c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 10046c0:	e3070784 	movw	r0, #30596	; 0x7784
 10046c4:	e3400105 	movt	r0, #261	; 0x105
 10046c8:	fa001edb 	blx	100c23c <puts>
			return 0;
 10046cc:	eaffffad 	b	1004588 <XAxiDma_Resume+0x110>
			if(XAxiDma_HasSg(InstancePtr)) {
 10046d0:	e5943010 	ldr	r3, [r4, #16]
 10046d4:	e3530000 	cmp	r3, #0
 10046d8:	1a00000b 	bne	100470c <XAxiDma_Resume+0x294>
	return *(volatile u32 *) Addr;
 10046dc:	e5942014 	ldr	r2, [r4, #20]
 10046e0:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(TxRingPtr->ChanBase,
 10046e4:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 10046e8:	e5823000 	str	r3, [r2]
			TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 10046ec:	e3a03001 	mov	r3, #1
 10046f0:	e584301c 	str	r3, [r4, #28]
 10046f4:	eaffffac 	b	10045ac <XAxiDma_Resume+0x134>
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 10046f8:	e30707c4 	movw	r0, #30660	; 0x77c4
		return XST_NOT_SGDMA;
 10046fc:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 1004700:	e3400105 	movt	r0, #261	; 0x105
 1004704:	fa001ea7 	blx	100c1a8 <printf>
		if (Status != XST_SUCCESS) {
 1004708:	eaffffe3 	b	100469c <XAxiDma_Resume+0x224>
				Status = XAxiDma_BdRingStart(TxRingPtr);
 100470c:	e2840014 	add	r0, r4, #20
 1004710:	eb000224 	bl	1004fa8 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1004714:	e2501000 	subs	r1, r0, #0
 1004718:	0afffff3 	beq	10046ec <XAxiDma_Resume+0x274>
 100471c:	eaffffda 	b	100468c <XAxiDma_Resume+0x214>
	if (InstancePtr->HasMm2S) {
 1004720:	e5942004 	ldr	r2, [r4, #4]
 1004724:	e3520000 	cmp	r2, #0
 1004728:	1affff61 	bne	10044b4 <XAxiDma_Resume+0x3c>
 100472c:	eaffff69 	b	10044d8 <XAxiDma_Resume+0x60>

01004730 <XAxiDma_Busy>:
 *
 *****************************************************************************/
u32 XAxiDma_Busy(XAxiDma *InstancePtr, int Direction)
{

	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1004730:	e5903000 	ldr	r3, [r0]
 1004734:	e0811081 	add	r1, r1, r1, lsl #1
 1004738:	e0833201 	add	r3, r3, r1, lsl #4
	return *(volatile u32 *) Addr;
 100473c:	e5930004 	ldr	r0, [r3, #4]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_SR_OFFSET) &
				XAXIDMA_IDLE_MASK) ? FALSE : TRUE);
 1004740:	e2200002 	eor	r0, r0, #2
}
 1004744:	e7e000d0 	ubfx	r0, r0, #1, #1
 1004748:	e12fff1e 	bx	lr

0100474c <XAxiDma_SelectKeyHole>:
 *****************************************************************************/
int XAxiDma_SelectKeyHole(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 100474c:	e0811081 	add	r1, r1, r1, lsl #1
 1004750:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 1004754:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1004758:	e1a01201 	lsl	r1, r1, #4
 100475c:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_KEYHOLE_MASK;
 1004760:	13833008 	orrne	r3, r3, #8
	else
		Value &= ~XAXIDMA_CR_KEYHOLE_MASK;
 1004764:	03c33008 	biceq	r3, r3, #8
	*LocalAddr = Value;
 1004768:	e7813000 	str	r3, [r1, r0]
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;

}
 100476c:	e3a00000 	mov	r0, #0
 1004770:	e12fff1e 	bx	lr

01004774 <XAxiDma_SelectCyclicMode>:
 *****************************************************************************/
int XAxiDma_SelectCyclicMode(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1004774:	e0811081 	add	r1, r1, r1, lsl #1
 1004778:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 100477c:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1004780:	e1a01201 	lsl	r1, r1, #4
	return *(volatile u32 *) Addr;
 1004784:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_CYCLIC_MASK;
 1004788:	13833010 	orrne	r3, r3, #16
	else
		Value &= ~XAXIDMA_CR_CYCLIC_MASK;
 100478c:	03c33010 	biceq	r3, r3, #16
	*LocalAddr = Value;
 1004790:	e7813000 	str	r3, [r1, r0]
	XAxiDma_WriteReg(InstancePtr->RegBase +
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;
}
 1004794:	e3a00000 	mov	r0, #0
 1004798:	e12fff1e 	bx	lr

0100479c <XAxiDma_SimpleTransfer>:
	u32 WordBits;
	int RingIndex = 0;

	/* If Scatter Gather is included then, cannot submit
	 */
	if (XAxiDma_HasSg(InstancePtr)) {
 100479c:	e590c010 	ldr	ip, [r0, #16]
{
 10047a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 10047a4:	e24dd00c 	sub	sp, sp, #12
	if (XAxiDma_HasSg(InstancePtr)) {
 10047a8:	e35c0000 	cmp	ip, #0
 10047ac:	1a00002f 	bne	1004870 <XAxiDma_SimpleTransfer+0xd4>
							" supported\r\n");

		return XST_FAILURE;
	}

	if(Direction == XAXIDMA_DMA_TO_DEVICE){
 10047b0:	e3530000 	cmp	r3, #0
 10047b4:	1a000025 	bne	1004850 <XAxiDma_SimpleTransfer+0xb4>
		if ((Length < 1) ||
 10047b8:	e3520000 	cmp	r2, #0
 10047bc:	0a000028 	beq	1004864 <XAxiDma_SimpleTransfer+0xc8>
 10047c0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
 10047c4:	e1530002 	cmp	r3, r2
 10047c8:	3a000025 	bcc	1004864 <XAxiDma_SimpleTransfer+0xc8>
			(Length > InstancePtr->TxBdRing.MaxTransferLen)) {
			return XST_INVALID_PARAM;
		}

		if (!InstancePtr->HasMm2S) {
 10047cc:	e5903004 	ldr	r3, [r0, #4]
 10047d0:	e3530000 	cmp	r3, #0
 10047d4:	0a00004f 	beq	1004918 <XAxiDma_SimpleTransfer+0x17c>
		}

		/* If the engine is doing transfer, cannot submit
		 */

		if(!(XAxiDma_ReadReg(InstancePtr->TxBdRing.ChanBase,
 10047d8:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 10047dc:	e593c004 	ldr	ip, [r3, #4]
 10047e0:	e31c0001 	tst	ip, #1
 10047e4:	1a000003 	bne	10047f8 <XAxiDma_SimpleTransfer+0x5c>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 10047e8:	e590c000 	ldr	ip, [r0]
 10047ec:	e59cc004 	ldr	ip, [ip, #4]
				XAXIDMA_SR_OFFSET) & XAXIDMA_HALTED_MASK)) {
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 10047f0:	e31c0002 	tst	ip, #2
 10047f4:	0a000033 	beq	10048c8 <XAxiDma_SimpleTransfer+0x12c>
							"Engine is busy\r\n");
				return XST_FAILURE;
			}
		}

		if (!InstancePtr->MicroDmaMode) {
 10047f8:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 10047fc:	e35c0000 	cmp	ip, #0
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 1004800:	0590c028 	ldreq	ip, [r0, #40]	; 0x28
		}
		else {
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 1004804:	1300cfff 	movwne	ip, #4095	; 0xfff
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 1004808:	024cc001 	subeq	ip, ip, #1
		}

		if ((BuffAddr & WordBits)) {
 100480c:	e11c0001 	tst	ip, r1
 1004810:	0a000002 	beq	1004820 <XAxiDma_SimpleTransfer+0x84>

			if (!InstancePtr->TxBdRing.HasDRE) {
 1004814:	e590c024 	ldr	ip, [r0, #36]	; 0x24
 1004818:	e35c0000 	cmp	ip, #0
 100481c:	0a000038 	beq	1004904 <XAxiDma_SimpleTransfer+0x168>
		}


		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
				 XAXIDMA_DESTADDR_OFFSET, LOWER_32_BITS(BuffAddr));
		if (InstancePtr->AddrWidth > 32)
 1004820:	e590074c 	ldr	r0, [r0, #1868]	; 0x74c
	*LocalAddr = Value;
 1004824:	e5831018 	str	r1, [r3, #24]
 1004828:	e3500020 	cmp	r0, #32
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
					XAXIDMA_BUFFLEN_OFFSET, Length);

	}

	return XST_SUCCESS;
 100482c:	e3a00000 	mov	r0, #0
 1004830:	c3a01000 	movgt	r1, #0
 1004834:	c583101c 	strgt	r1, [r3, #28]
	return *(volatile u32 *) Addr;
 1004838:	e5931000 	ldr	r1, [r3]
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 100483c:	e3811001 	orr	r1, r1, #1
	*LocalAddr = Value;
 1004840:	e5831000 	str	r1, [r3]
 1004844:	e5832028 	str	r2, [r3, #40]	; 0x28
}
 1004848:	e28dd00c 	add	sp, sp, #12
 100484c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 1004850:	e3530001 	cmp	r3, #1
	return XST_SUCCESS;
 1004854:	11a0000c 	movne	r0, ip
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 1004858:	0a00000a 	beq	1004888 <XAxiDma_SimpleTransfer+0xec>
}
 100485c:	e28dd00c 	add	sp, sp, #12
 1004860:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
			return XST_INVALID_PARAM;
 1004864:	e3a0000f 	mov	r0, #15
}
 1004868:	e28dd00c 	add	sp, sp, #12
 100486c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "Simple DMA mode is not"
 1004870:	e3070878 	movw	r0, #30840	; 0x7878
 1004874:	e3400105 	movt	r0, #261	; 0x105
 1004878:	fa001e6f 	blx	100c23c <puts>
		return XST_FAILURE;
 100487c:	e3a00001 	mov	r0, #1
}
 1004880:	e28dd00c 	add	sp, sp, #12
 1004884:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		if ((Length < 1) ||
 1004888:	e3520000 	cmp	r2, #0
 100488c:	0afffff4 	beq	1004864 <XAxiDma_SimpleTransfer+0xc8>
 1004890:	e590c09c 	ldr	ip, [r0, #156]	; 0x9c
 1004894:	e15c0002 	cmp	ip, r2
 1004898:	3afffff1 	bcc	1004864 <XAxiDma_SimpleTransfer+0xc8>
		if (!InstancePtr->HasS2Mm) {
 100489c:	e590c008 	ldr	ip, [r0, #8]
 10048a0:	e35c0000 	cmp	ip, #0
 10048a4:	0a000020 	beq	100492c <XAxiDma_SimpleTransfer+0x190>
		if(!(XAxiDma_ReadReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 10048a8:	e5903080 	ldr	r3, [r0, #128]	; 0x80
	return *(volatile u32 *) Addr;
 10048ac:	e593c004 	ldr	ip, [r3, #4]
 10048b0:	e31c0001 	tst	ip, #1
 10048b4:	1a000008 	bne	10048dc <XAxiDma_SimpleTransfer+0x140>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 10048b8:	e590c000 	ldr	ip, [r0]
 10048bc:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 10048c0:	e31c0002 	tst	ip, #2
 10048c4:	1a000004 	bne	10048dc <XAxiDma_SimpleTransfer+0x140>
				xdbg_printf(XDBG_DEBUG_ERROR,
 10048c8:	e30708bc 	movw	r0, #30908	; 0x78bc
 10048cc:	e3400105 	movt	r0, #261	; 0x105
 10048d0:	fa001e59 	blx	100c23c <puts>
				return XST_FAILURE;
 10048d4:	e3a00001 	mov	r0, #1
 10048d8:	eaffffdf 	b	100485c <XAxiDma_SimpleTransfer+0xc0>
		if (!InstancePtr->MicroDmaMode) {
 10048dc:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 10048e0:	e35c0000 	cmp	ip, #0
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 10048e4:	0590c094 	ldreq	ip, [r0, #148]	; 0x94
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 10048e8:	1300cfff 	movwne	ip, #4095	; 0xfff
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 10048ec:	024cc001 	subeq	ip, ip, #1
		if ((BuffAddr & WordBits)) {
 10048f0:	e11c0001 	tst	ip, r1
 10048f4:	0affffc9 	beq	1004820 <XAxiDma_SimpleTransfer+0x84>
			if (!InstancePtr->RxBdRing[RingIndex].HasDRE) {
 10048f8:	e590c090 	ldr	ip, [r0, #144]	; 0x90
 10048fc:	e35c0000 	cmp	ip, #0
 1004900:	1affffc6 	bne	1004820 <XAxiDma_SimpleTransfer+0x84>
				xdbg_printf(XDBG_DEBUG_ERROR,
 1004904:	e30708cc 	movw	r0, #30924	; 0x78cc
 1004908:	e3400105 	movt	r0, #261	; 0x105
 100490c:	fa001e25 	blx	100c1a8 <printf>
				return XST_INVALID_PARAM;
 1004910:	e3a0000f 	mov	r0, #15
 1004914:	eaffffd0 	b	100485c <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "MM2S channel is not"
 1004918:	e307089c 	movw	r0, #30876	; 0x789c
 100491c:	e3400105 	movt	r0, #261	; 0x105
 1004920:	fa001e45 	blx	100c23c <puts>
			return XST_FAILURE;
 1004924:	e3a00001 	mov	r0, #1
 1004928:	eaffffcb 	b	100485c <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "S2MM channel is not"
 100492c:	e30708f0 	movw	r0, #30960	; 0x78f0
 1004930:	e58d3004 	str	r3, [sp, #4]
 1004934:	e3400105 	movt	r0, #261	; 0x105
 1004938:	fa001e3f 	blx	100c23c <puts>
			return XST_FAILURE;
 100493c:	e59d3004 	ldr	r3, [sp, #4]
 1004940:	e1a00003 	mov	r0, r3
 1004944:	eaffffc4 	b	100485c <XAxiDma_SimpleTransfer+0xc0>

01004948 <XAxiDma_LookupConfig>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].DeviceId == DeviceId) {
 1004948:	e3083324 	movw	r3, #33572	; 0x8324
 100494c:	e3403105 	movt	r3, #261	; 0x105
 1004950:	e5932000 	ldr	r2, [r3]
 1004954:	e1500002 	cmp	r0, r2
 1004958:	0a000004 	beq	1004970 <XAxiDma_LookupConfig+0x28>
 100495c:	e5b32044 	ldr	r2, [r3, #68]!	; 0x44
 1004960:	e1500002 	cmp	r0, r2
 1004964:	01a00003 	moveq	r0, r3
 1004968:	13a00000 	movne	r0, #0
 100496c:	e12fff1e 	bx	lr
 1004970:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 1004974:	e12fff1e 	bx	lr

01004978 <XAxiDma_LookupConfigBaseAddr>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].BaseAddr == Baseaddr) {
 1004978:	e3083324 	movw	r3, #33572	; 0x8324
 100497c:	e3403105 	movt	r3, #261	; 0x105
 1004980:	e5932004 	ldr	r2, [r3, #4]
 1004984:	e1500002 	cmp	r0, r2
 1004988:	0a000004 	beq	10049a0 <XAxiDma_LookupConfigBaseAddr+0x28>
 100498c:	e5932048 	ldr	r2, [r3, #72]	; 0x48
 1004990:	e1500002 	cmp	r0, r2
 1004994:	02830044 	addeq	r0, r3, #68	; 0x44
 1004998:	13a00000 	movne	r0, #0
 100499c:	e12fff1e 	bx	lr
 10049a0:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 10049a4:	e12fff1e 	bx	lr

010049a8 <XAxiDma_UpdateBdRingCDesc>:
	UINTPTR RegBase;
	UINTPTR BdPtr;
	int RingIndex = RingPtr->RingIndex;

	/* BD list has yet to be created for this channel */
	if (RingPtr->AllCnt == 0) {
 10049a8:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 10049ac:	e92d4010 	push	{r4, lr}
	if (RingPtr->AllCnt == 0) {
 10049b0:	e3520000 	cmp	r2, #0
 10049b4:	0a000043 	beq	1004ac8 <XAxiDma_UpdateBdRingCDesc+0x120>

		return XST_DMA_SG_NO_LIST;
	}

	/* Do nothing if already started */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 10049b8:	e5902008 	ldr	r2, [r0, #8]
 10049bc:	e1a03000 	mov	r3, r0
 10049c0:	e3520001 	cmp	r2, #1
 10049c4:	0a000027 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
		 * transferring)
		 */
		return XST_SUCCESS;
	}

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 10049c8:	e590c000 	ldr	ip, [r0]
 10049cc:	e59c2004 	ldr	r2, [ip, #4]
 10049d0:	e3120001 	tst	r2, #1
 10049d4:	0a000023 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
		RegBase = RingPtr->ChanBase;

		/* Put a valid BD pointer in the current BD pointer register
		 * So, the hardware is ready to go when tail BD pointer is updated
		 */
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 10049d8:	e5901048 	ldr	r1, [r0, #72]	; 0x48
	int RingIndex = RingPtr->RingIndex;
 10049dc:	e5904064 	ldr	r4, [r0, #100]	; 0x64

		if (!XAxiDma_BdHwCompleted(BdPtr)) {
 10049e0:	e591201c 	ldr	r2, [r1, #28]
 10049e4:	e3520000 	cmp	r2, #0
 10049e8:	ba000025 	blt	1004a84 <XAxiDma_UpdateBdRingCDesc+0xdc>
			if (RingPtr->IsRxChannel) {
 10049ec:	e590e024 	ldr	lr, [r0, #36]	; 0x24
 10049f0:	e5900004 	ldr	r0, [r0, #4]
 10049f4:	e5932020 	ldr	r2, [r3, #32]
 10049f8:	e041100e 	sub	r1, r1, lr
 10049fc:	e5933018 	ldr	r3, [r3, #24]
 1004a00:	e3500000 	cmp	r0, #0
 1004a04:	e0811002 	add	r1, r1, r2
 1004a08:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 1004a0c:	0a000017 	beq	1004a70 <XAxiDma_UpdateBdRingCDesc+0xc8>
				if (!RingIndex) {
 1004a10:	e3540000 	cmp	r4, #0
 1004a14:	1a000030 	bne	1004adc <XAxiDma_UpdateBdRingCDesc+0x134>
					XAxiDma_WriteReg(RegBase,
							 XAXIDMA_CDESC_OFFSET,
							 (XAXIDMA_VIRT_TO_PHYS(BdPtr) & XAXIDMA_DESC_LSB_MASK));
					if (RingPtr->Addr_ext)
 1004a18:	e3530000 	cmp	r3, #0
	*LocalAddr = Value;
 1004a1c:	e58c1008 	str	r1, [ip, #8]
 1004a20:	0a000010 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1004a24:	e58c400c 	str	r4, [ip, #12]
			}
		}

	}

	return XST_SUCCESS;
 1004a28:	e1a00004 	mov	r0, r4
 1004a2c:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->IsRxChannel) {
 1004a30:	e5931020 	ldr	r1, [r3, #32]
 1004a34:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1004a38:	e5930004 	ldr	r0, [r3, #4]
 1004a3c:	e5933018 	ldr	r3, [r3, #24]
 1004a40:	e041100e 	sub	r1, r1, lr
 1004a44:	e3500000 	cmp	r0, #0
 1004a48:	e0812002 	add	r2, r1, r2
 1004a4c:	e3c2203f 	bic	r2, r2, #63	; 0x3f
 1004a50:	0a00002b 	beq	1004b04 <XAxiDma_UpdateBdRingCDesc+0x15c>
						if (!RingIndex) {
 1004a54:	e3540000 	cmp	r4, #0
 1004a58:	1a00002d 	bne	1004b14 <XAxiDma_UpdateBdRingCDesc+0x16c>
							if (RingPtr->Addr_ext)
 1004a5c:	e3530000 	cmp	r3, #0
 1004a60:	e58c2008 	str	r2, [ip, #8]
 1004a64:	1affffee 	bne	1004a24 <XAxiDma_UpdateBdRingCDesc+0x7c>
		return XST_SUCCESS;
 1004a68:	e3a00000 	mov	r0, #0
 1004a6c:	e8bd8010 	pop	{r4, pc}
				if (RingPtr->Addr_ext)
 1004a70:	e3530000 	cmp	r3, #0
 1004a74:	e58c1008 	str	r1, [ip, #8]
 1004a78:	0afffffa 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1004a7c:	e58c000c 	str	r0, [ip, #12]
}
 1004a80:	e8bd8010 	pop	{r4, pc}
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 1004a84:	e590e028 	ldr	lr, [r0, #40]	; 0x28
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 1004a88:	e1a02001 	mov	r2, r1
 1004a8c:	ea000002 	b	1004a9c <XAxiDma_UpdateBdRingCDesc+0xf4>
				if (!XAxiDma_BdHwCompleted(BdPtr)) {
 1004a90:	e592001c 	ldr	r0, [r2, #28]
 1004a94:	e3500000 	cmp	r0, #0
 1004a98:	aaffffe4 	bge	1004a30 <XAxiDma_UpdateBdRingCDesc+0x88>
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 1004a9c:	e15e0002 	cmp	lr, r2
 1004aa0:	85930030 	ldrhi	r0, [r3, #48]	; 0x30
 1004aa4:	95932024 	ldrls	r2, [r3, #36]	; 0x24
 1004aa8:	80822000 	addhi	r2, r2, r0
				if ((UINTPTR)BdPtr == (UINTPTR) RingPtr->BdaRestart) {
 1004aac:	e1520001 	cmp	r2, r1
 1004ab0:	1afffff6 	bne	1004a90 <XAxiDma_UpdateBdRingCDesc+0xe8>
					xdbg_printf(XDBG_DEBUG_ERROR,
 1004ab4:	e3070928 	movw	r0, #31016	; 0x7928
 1004ab8:	e3400105 	movt	r0, #261	; 0x105
 1004abc:	fa001dde 	blx	100c23c <puts>
					return XST_DMA_ERROR;
 1004ac0:	e3a00009 	mov	r0, #9
 1004ac4:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: no bds\r\n");
 1004ac8:	e3070910 	movw	r0, #30992	; 0x7910
 1004acc:	e3400105 	movt	r0, #261	; 0x105
 1004ad0:	fa001dd9 	blx	100c23c <puts>
		return XST_DMA_SG_NO_LIST;
 1004ad4:	e300020b 	movw	r0, #523	; 0x20b
 1004ad8:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->Addr_ext)
 1004adc:	e3530000 	cmp	r3, #0
					XAxiDma_WriteReg(RegBase,
 1004ae0:	e2844001 	add	r4, r4, #1
 1004ae4:	e78c1284 	str	r1, [ip, r4, lsl #5]
 1004ae8:	e1a04284 	lsl	r4, r4, #5
					if (RingPtr->Addr_ext)
 1004aec:	0affffdd 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
								XAxiDma_WriteReg(RegBase,
 1004af0:	e2444040 	sub	r4, r4, #64	; 0x40
 1004af4:	e28cc044 	add	ip, ip, #68	; 0x44
 1004af8:	e3a00000 	mov	r0, #0
 1004afc:	e784000c 	str	r0, [r4, ip]
 1004b00:	e8bd8010 	pop	{r4, pc}
						if (RingPtr->Addr_ext)
 1004b04:	e3530000 	cmp	r3, #0
 1004b08:	e58c2008 	str	r2, [ip, #8]
 1004b0c:	0affffd5 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1004b10:	eaffffd9 	b	1004a7c <XAxiDma_UpdateBdRingCDesc+0xd4>
							if (RingPtr->Addr_ext)
 1004b14:	e3530000 	cmp	r3, #0
							XAxiDma_WriteReg(RegBase,
 1004b18:	e2844001 	add	r4, r4, #1
 1004b1c:	e78c2284 	str	r2, [ip, r4, lsl #5]
 1004b20:	e1a04284 	lsl	r4, r4, #5
							if (RingPtr->Addr_ext)
 1004b24:	0affffcf 	beq	1004a68 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1004b28:	eafffff0 	b	1004af0 <XAxiDma_UpdateBdRingCDesc+0x148>

01004b2c <XAxiDma_BdRingCreate>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdRingCreate(XAxiDma_BdRing *RingPtr, UINTPTR PhysAddr,
			UINTPTR VirtAddr, u32 Alignment, int BdCount)
{
 1004b2c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1004b30:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
	int i;
	UINTPTR BdVirtAddr;
	UINTPTR BdPhysAddr;

	if (BdCount <= 0) {
 1004b34:	e3560000 	cmp	r6, #0
 1004b38:	da000078 	ble	1004d20 <XAxiDma_BdRingCreate+0x1f4>
	RingPtr->PreCnt = 0;
	RingPtr->PostCnt = 0;
	RingPtr->Cyclic = 0;

	/* Make sure Alignment parameter meets minimum requirements */
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1004b3c:	e353003f 	cmp	r3, #63	; 0x3f
 1004b40:	e1a05003 	mov	r5, r3
	RingPtr->AllCnt = 0;
 1004b44:	e3a03000 	mov	r3, #0
 1004b48:	e1a04000 	mov	r4, r0
 1004b4c:	e5803060 	str	r3, [r0, #96]	; 0x60
	RingPtr->FreeCnt = 0;
 1004b50:	e5803050 	str	r3, [r0, #80]	; 0x50
	RingPtr->HwCnt = 0;
 1004b54:	e5803058 	str	r3, [r0, #88]	; 0x58
	RingPtr->PreCnt = 0;
 1004b58:	e5803054 	str	r3, [r0, #84]	; 0x54
	RingPtr->PostCnt = 0;
 1004b5c:	e580305c 	str	r3, [r0, #92]	; 0x5c
	RingPtr->Cyclic = 0;
 1004b60:	e5803068 	str	r3, [r0, #104]	; 0x68
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1004b64:	9a000059 	bls	1004cd0 <XAxiDma_BdRingCreate+0x1a4>

		return XST_INVALID_PARAM;
	}

	/* Make sure Alignment is a power of 2 */
	if ((Alignment - 1) & Alignment) {
 1004b68:	e2453001 	sub	r3, r5, #1
 1004b6c:	e1130005 	tst	r3, r5
 1004b70:	1a000064 	bne	1004d08 <XAxiDma_BdRingCreate+0x1dc>

		return XST_INVALID_PARAM;
	}

	/* Make sure PhysAddr and VirtAddr are on same Alignment */
	if ((PhysAddr % Alignment) || (VirtAddr % Alignment)) {
 1004b74:	e1a09001 	mov	r9, r1
 1004b78:	e1a01005 	mov	r1, r5
 1004b7c:	e1a00009 	mov	r0, r9
 1004b80:	e1a07002 	mov	r7, r2
 1004b84:	fa0013de 	blx	1009b04 <__aeabi_uidivmod>
 1004b88:	e3510000 	cmp	r1, #0
 1004b8c:	1a000047 	bne	1004cb0 <XAxiDma_BdRingCreate+0x184>
 1004b90:	e1a01005 	mov	r1, r5
 1004b94:	e1a00007 	mov	r0, r7
 1004b98:	fa0013d9 	blx	1009b04 <__aeabi_uidivmod>
 1004b9c:	e2518000 	subs	r8, r1, #0
 1004ba0:	1a000042 	bne	1004cb0 <XAxiDma_BdRingCreate+0x184>
		return XST_INVALID_PARAM;
	}

	/* Compute how many bytes will be between the start of adjacent BDs */
	RingPtr->Separation =
		(sizeof(XAxiDma_Bd) + (Alignment - 1)) & ~(Alignment - 1);
 1004ba4:	e285303f 	add	r3, r5, #63	; 0x3f
 1004ba8:	e2655000 	rsb	r5, r5, #0
 1004bac:	e0055003 	and	r5, r5, r3

	/* Must make sure the ring doesn't span address 0x00000000. If it does,
	 * then the next/prev BD traversal macros will fail.
	 */
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 1004bb0:	e2473001 	sub	r3, r7, #1
 1004bb4:	e0020695 	mul	r2, r5, r6
	RingPtr->Separation =
 1004bb8:	e5845030 	str	r5, [r4, #48]	; 0x30
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 1004bbc:	e0833002 	add	r3, r3, r2
 1004bc0:	e1530007 	cmp	r3, r7
 1004bc4:	3a000049 	bcc	1004cf0 <XAxiDma_BdRingCreate+0x1c4>
	 *  - Clear the entire space
	 *  - Setup each BD's next pointer with the physical address of the
	 *    next BD
	 *  - Put hardware information in each BD
	 */
	memset((void *) VirtAddr, 0, (RingPtr->Separation * BdCount));
 1004bc8:	e1a00007 	mov	r0, r7
 1004bcc:	fa001d43 	blx	100c0e0 <memset>

	BdVirtAddr = VirtAddr;
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 1004bd0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 1004bd4:	e3560001 	cmp	r6, #1
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 1004bd8:	e083a009 	add	sl, r3, r9
	for (i = 1; i < BdCount; i++) {
 1004bdc:	0a000055 	beq	1004d38 <XAxiDma_BdRingCreate+0x20c>
 1004be0:	e1a05007 	mov	r5, r7
 1004be4:	e3a0b001 	mov	fp, #1
		/* Put hardware information in the BDs
		 */
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
				(u32)RingPtr->HasStsCntrlStrm);

		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004be8:	e5940010 	ldr	r0, [r4, #16]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1004bec:	e3cac03f 	bic	ip, sl, #63	; 0x3f
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004bf0:	e5943014 	ldr	r3, [r4, #20]
		    (((u32)(RingPtr->HasDRE)) << XAXIDMA_BD_HAS_DRE_SHIFT) |
		    RingPtr->DataWidth);

		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1004bf4:	e3a01034 	mov	r1, #52	; 0x34
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1004bf8:	e594200c 	ldr	r2, [r4, #12]
	for (i = 1; i < BdCount; i++) {
 1004bfc:	e28bb001 	add	fp, fp, #1
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1004c00:	e5858004 	str	r8, [r5, #4]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1004c04:	e585c000 	str	ip, [r5]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004c08:	e1833400 	orr	r3, r3, r0, lsl #8
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1004c0c:	e5852038 	str	r2, [r5, #56]	; 0x38
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1004c10:	e1a00005 	mov	r0, r5
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004c14:	e585303c 	str	r3, [r5, #60]	; 0x3c
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1004c18:	eb000eb3 	bl	10086ec <Xil_DCacheFlushRange>
		BdVirtAddr += RingPtr->Separation;
 1004c1c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 1004c20:	e156000b 	cmp	r6, fp
		BdVirtAddr += RingPtr->Separation;
 1004c24:	e0855003 	add	r5, r5, r3
		BdPhysAddr += RingPtr->Separation;
 1004c28:	e08aa003 	add	sl, sl, r3
	for (i = 1; i < BdCount; i++) {
 1004c2c:	1affffed 	bne	1004be8 <XAxiDma_BdRingCreate+0xbc>
 1004c30:	e1a0e005 	mov	lr, r5

	/* Setup the last BD's hardware information */
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
		(u32)RingPtr->HasStsCntrlStrm);

	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004c34:	e5941010 	ldr	r1, [r4, #16]
	/* Setup and initialize pointers and counters */
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
	RingPtr->FirstBdAddr = VirtAddr;
	RingPtr->FirstBdPhysAddr = PhysAddr;
	RingPtr->LastBdAddr = BdVirtAddr;
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1004c38:	e0853003 	add	r3, r5, r3
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004c3c:	e5942014 	ldr	r2, [r4, #20]
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1004c40:	e0433007 	sub	r3, r3, r7
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1004c44:	e594000c 	ldr	r0, [r4, #12]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1004c48:	e3c9c03f 	bic	ip, r9, #63	; 0x3f
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1004c4c:	e3a08000 	mov	r8, #0
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1004c50:	e58ec000 	str	ip, [lr]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1004c54:	e5858004 	str	r8, [r5, #4]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004c58:	e1822401 	orr	r2, r2, r1, lsl #8
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004c5c:	e3a01002 	mov	r1, #2
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1004c60:	e5850038 	str	r0, [r5, #56]	; 0x38
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 1004c64:	e3a00040 	mov	r0, #64	; 0x40
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1004c68:	e585203c 	str	r2, [r5, #60]	; 0x3c
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1004c6c:	e584302c 	str	r3, [r4, #44]	; 0x2c
	RingPtr->FirstBdAddr = VirtAddr;
 1004c70:	e5847024 	str	r7, [r4, #36]	; 0x24
	RingPtr->FirstBdPhysAddr = PhysAddr;
 1004c74:	e5849020 	str	r9, [r4, #32]
	RingPtr->LastBdAddr = BdVirtAddr;
 1004c78:	e5845028 	str	r5, [r4, #40]	; 0x28
	RingPtr->AllCnt = BdCount;
 1004c7c:	e5846060 	str	r6, [r4, #96]	; 0x60
	RingPtr->FreeCnt = BdCount;
 1004c80:	e5846050 	str	r6, [r4, #80]	; 0x50
	RingPtr->FreeHead = (XAxiDma_Bd *) VirtAddr;
 1004c84:	e5847034 	str	r7, [r4, #52]	; 0x34
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
 1004c88:	e5847038 	str	r7, [r4, #56]	; 0x38
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
 1004c8c:	e584703c 	str	r7, [r4, #60]	; 0x3c
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
 1004c90:	e5847040 	str	r7, [r4, #64]	; 0x40
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
 1004c94:	e5847044 	str	r7, [r4, #68]	; 0x44
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
 1004c98:	e5847048 	str	r7, [r4, #72]	; 0x48
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004c9c:	e5841008 	str	r1, [r4, #8]
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 1004ca0:	fa001904 	blx	100b0b8 <malloc>
 1004ca4:	e584004c 	str	r0, [r4, #76]	; 0x4c

	return XST_SUCCESS;
}
 1004ca8:	e1a00008 	mov	r0, r8
 1004cac:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 1004cb0:	e30709e4 	movw	r0, #31204	; 0x79e4
 1004cb4:	e1a02007 	mov	r2, r7
 1004cb8:	e1a01009 	mov	r1, r9
		return XST_INVALID_PARAM;
 1004cbc:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 1004cc0:	e3400105 	movt	r0, #261	; 0x105
 1004cc4:	fa001d37 	blx	100c1a8 <printf>
}
 1004cc8:	e1a00008 	mov	r0, r8
 1004ccc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 1004cd0:	e307097c 	movw	r0, #31100	; 0x797c
 1004cd4:	e1a01005 	mov	r1, r5
 1004cd8:	e3a02040 	mov	r2, #64	; 0x40
		return XST_INVALID_PARAM;
 1004cdc:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 1004ce0:	e3400105 	movt	r0, #261	; 0x105
 1004ce4:	fa001d2f 	blx	100c1a8 <printf>
}
 1004ce8:	e1a00008 	mov	r0, r8
 1004cec:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1004cf0:	e3070a38 	movw	r0, #31288	; 0x7a38
		return XST_DMA_SG_LIST_ERROR;
 1004cf4:	e300820e 	movw	r8, #526	; 0x20e
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1004cf8:	e3400105 	movt	r0, #261	; 0x105
 1004cfc:	fa001d4e 	blx	100c23c <puts>
}
 1004d00:	e1a00008 	mov	r0, r8
 1004d04:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1004d08:	e30709bc 	movw	r0, #31164	; 0x79bc
 1004d0c:	e1a01005 	mov	r1, r5
 1004d10:	e3400105 	movt	r0, #261	; 0x105
		return XST_INVALID_PARAM;
 1004d14:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1004d18:	fa001d22 	blx	100c1a8 <printf>
		return XST_INVALID_PARAM;
 1004d1c:	eaffffe1 	b	1004ca8 <XAxiDma_BdRingCreate+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 1004d20:	e3070950 	movw	r0, #31056	; 0x7950
 1004d24:	e1a01006 	mov	r1, r6
 1004d28:	e3400105 	movt	r0, #261	; 0x105
		return XST_INVALID_PARAM;
 1004d2c:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 1004d30:	fa001d1c 	blx	100c1a8 <printf>
		return XST_INVALID_PARAM;
 1004d34:	eaffffdb 	b	1004ca8 <XAxiDma_BdRingCreate+0x17c>
	for (i = 1; i < BdCount; i++) {
 1004d38:	e1a0e007 	mov	lr, r7
 1004d3c:	e1a05007 	mov	r5, r7
 1004d40:	eaffffbb 	b	1004c34 <XAxiDma_BdRingCreate+0x108>

01004d44 <XAxiDma_BdRingClone>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingClone(XAxiDma_BdRing * RingPtr, XAxiDma_Bd * SrcBdPtr)
{
 1004d44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1004d48:	e24dd044 	sub	sp, sp, #68	; 0x44
	UINTPTR CurBd;
	u32 Save;
	XAxiDma_Bd TmpBd;

	/* Can't do this function if there isn't a ring */
	if (RingPtr->AllCnt == 0) {
 1004d4c:	e5905060 	ldr	r5, [r0, #96]	; 0x60
 1004d50:	e3550000 	cmp	r5, #0
 1004d54:	0a00003d 	beq	1004e50 <XAxiDma_BdRingClone+0x10c>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't do this function with the channel running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1004d58:	e5903008 	ldr	r3, [r0, #8]
 1004d5c:	e1a06000 	mov	r6, r0
 1004d60:	e3530001 	cmp	r3, #1
 1004d64:	0a00003f 	beq	1004e68 <XAxiDma_BdRingClone+0x124>

		return XST_DEVICE_IS_STARTED;
	}

	/* Can't do this function with some of the BDs in use */
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1004d68:	e5903050 	ldr	r3, [r0, #80]	; 0x50
 1004d6c:	e1550003 	cmp	r5, r3
	}

	/* Make a copy of the template then modify it by clearing
	 * the complete bit in status/control field
	 */
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 1004d70:	01a0c001 	moveq	ip, r1
 1004d74:	01a0400d 	moveq	r4, sp
 1004d78:	028c7040 	addeq	r7, ip, #64	; 0x40
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1004d7c:	1a00002b 	bne	1004e30 <XAxiDma_BdRingClone+0xec>
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 1004d80:	e59c0000 	ldr	r0, [ip]
 1004d84:	e28cc010 	add	ip, ip, #16
 1004d88:	e51c100c 	ldr	r1, [ip, #-12]
 1004d8c:	e1a0e004 	mov	lr, r4
 1004d90:	e51c2008 	ldr	r2, [ip, #-8]
 1004d94:	e2844010 	add	r4, r4, #16
 1004d98:	e51c3004 	ldr	r3, [ip, #-4]
 1004d9c:	e15c0007 	cmp	ip, r7
 1004da0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 1004da4:	1afffff5 	bne	1004d80 <XAxiDma_BdRingClone+0x3c>

	Save = XAxiDma_BdRead(&TmpBd, XAXIDMA_BD_STS_OFFSET);
 1004da8:	e59d301c 	ldr	r3, [sp, #28]
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);

	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004dac:	e3550000 	cmp	r5, #0
 1004db0:	c3a05000 	movgt	r5, #0
 1004db4:	c28d7038 	addgt	r7, sp, #56	; 0x38
 1004db8:	e5964024 	ldr	r4, [r6, #36]	; 0x24
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1004dbc:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);
 1004dc0:	e58d301c 	str	r3, [sp, #28]
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004dc4:	da000016 	ble	1004e24 <XAxiDma_BdRingClone+0xe0>
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {

		memcpy((void *)((UINTPTR)CurBd + XAXIDMA_BD_START_CLEAR),
 1004dc8:	e28d3008 	add	r3, sp, #8
 1004dcc:	e2842008 	add	r2, r4, #8
 1004dd0:	e593e000 	ldr	lr, [r3]
 1004dd4:	e2833010 	add	r3, r3, #16
 1004dd8:	e513c00c 	ldr	ip, [r3, #-12]
 1004ddc:	e2822010 	add	r2, r2, #16
 1004de0:	e5130008 	ldr	r0, [r3, #-8]
 1004de4:	e5131004 	ldr	r1, [r3, #-4]
 1004de8:	e1530007 	cmp	r3, r7
 1004dec:	e502e010 	str	lr, [r2, #-16]
 1004df0:	e502c00c 	str	ip, [r2, #-12]
 1004df4:	e5020008 	str	r0, [r2, #-8]
 1004df8:	e5021004 	str	r1, [r2, #-4]
 1004dfc:	1afffff3 	bne	1004dd0 <XAxiDma_BdRingClone+0x8c>
		    (void *)((UINTPTR)(&TmpBd) + XAXIDMA_BD_START_CLEAR),
		    XAXIDMA_BD_BYTES_TO_CLEAR);

		XAXIDMA_CACHE_FLUSH(CurBd);
 1004e00:	e1a00004 	mov	r0, r4
 1004e04:	e3a01034 	mov	r1, #52	; 0x34
 1004e08:	eb000e37 	bl	10086ec <Xil_DCacheFlushRange>
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004e0c:	e5962060 	ldr	r2, [r6, #96]	; 0x60
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1004e10:	e2855001 	add	r5, r5, #1
 1004e14:	e5963030 	ldr	r3, [r6, #48]	; 0x30
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004e18:	e1520005 	cmp	r2, r5
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1004e1c:	e0844003 	add	r4, r4, r3
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1004e20:	caffffe8 	bgt	1004dc8 <XAxiDma_BdRingClone+0x84>
	}

	return XST_SUCCESS;
 1004e24:	e3a00000 	mov	r0, #0
}
 1004e28:	e28dd044 	add	sp, sp, #68	; 0x44
 1004e2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: some bds already "
 1004e30:	e3070aa8 	movw	r0, #31400	; 0x7aa8
 1004e34:	e1a02005 	mov	r2, r5
 1004e38:	e1a01003 	mov	r1, r3
 1004e3c:	e3400105 	movt	r0, #261	; 0x105
 1004e40:	fa001cd8 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1004e44:	e300020e 	movw	r0, #526	; 0x20e
}
 1004e48:	e28dd044 	add	sp, sp, #68	; 0x44
 1004e4c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: no bds\r\n");
 1004e50:	e3070a5c 	movw	r0, #31324	; 0x7a5c
 1004e54:	e3400105 	movt	r0, #261	; 0x105
 1004e58:	fa001cf7 	blx	100c23c <puts>
		return XST_DMA_SG_NO_LIST;
 1004e5c:	e300020b 	movw	r0, #523	; 0x20b
}
 1004e60:	e28dd044 	add	sp, sp, #68	; 0x44
 1004e64:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: bd ring started "
 1004e68:	e3070a74 	movw	r0, #31348	; 0x7a74
 1004e6c:	e3400105 	movt	r0, #261	; 0x105
 1004e70:	fa001cf1 	blx	100c23c <puts>
		return XST_DEVICE_IS_STARTED;
 1004e74:	e3a00005 	mov	r0, #5
 1004e78:	eaffffea 	b	1004e28 <XAxiDma_BdRingClone+0xe4>

01004e7c <XAxiDma_StartBdRingHw>:
int XAxiDma_StartBdRingHw(XAxiDma_BdRing * RingPtr)
{
	UINTPTR RegBase;
	int RingIndex = RingPtr->RingIndex;

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1004e7c:	e5903000 	ldr	r3, [r0]
{
 1004e80:	e92d4070 	push	{r4, r5, r6, lr}
	int RingIndex = RingPtr->RingIndex;
 1004e84:	e5906064 	ldr	r6, [r0, #100]	; 0x64
	return *(volatile u32 *) Addr;
 1004e88:	e5932004 	ldr	r2, [r3, #4]
	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1004e8c:	e3120001 	tst	r2, #1
 1004e90:	15932000 	ldrne	r2, [r3]
		/* Start the hardware
		*/
		RegBase = RingPtr->ChanBase;
		XAxiDma_WriteReg(RegBase, XAXIDMA_CR_OFFSET,
 1004e94:	13822001 	orrne	r2, r2, #1
	*LocalAddr = Value;
 1004e98:	15832000 	strne	r2, [r3]
	return *(volatile u32 *) Addr;
 1004e9c:	e5933004 	ldr	r3, [r3, #4]
			XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET)
			| XAXIDMA_CR_RUNSTOP_MASK);
	}

	if (XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1004ea0:	e2135001 	ands	r5, r3, #1
 1004ea4:	1a000026 	bne	1004f44 <XAxiDma_StartBdRingHw+0xc8>
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;

		/* If there are unprocessed BDs then we want the channel to begin
		 * processing right away
		 */
		if (RingPtr->HwCnt > 0) {
 1004ea8:	e5903058 	ldr	r3, [r0, #88]	; 0x58
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1004eac:	e3a02001 	mov	r2, #1
 1004eb0:	e5802008 	str	r2, [r0, #8]
		if (RingPtr->HwCnt > 0) {
 1004eb4:	e3530000 	cmp	r3, #0
 1004eb8:	da00001f 	ble	1004f3c <XAxiDma_StartBdRingHw+0xc0>

			XAXIDMA_CACHE_INVALIDATE(RingPtr->HwTail);
 1004ebc:	e1a04000 	mov	r4, r0
 1004ec0:	e3a01034 	mov	r1, #52	; 0x34
 1004ec4:	e5900040 	ldr	r0, [r0, #64]	; 0x40
 1004ec8:	eb000dba 	bl	10085b8 <Xil_DCacheInvalidateRange>
			if (RingPtr->Cyclic) {
 1004ecc:	e5942068 	ldr	r2, [r4, #104]	; 0x68
 1004ed0:	e3520000 	cmp	r2, #0
 1004ed4:	1a00001c 	bne	1004f4c <XAxiDma_StartBdRingHw+0xd0>
							 XAXIDMA_TDESC_MSB_OFFSET,
							 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->CyclicBd)));
				return XST_SUCCESS;
			}

			if ((XAxiDma_BdRead(RingPtr->HwTail,
 1004ed8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
 1004edc:	e593101c 	ldr	r1, [r3, #28]
 1004ee0:	e3510000 	cmp	r1, #0
 1004ee4:	ba000014 	blt	1004f3c <XAxiDma_StartBdRingHw+0xc0>
				    XAXIDMA_BD_STS_OFFSET) &
				XAXIDMA_BD_STS_COMPLETE_MASK) == 0) {
				if (RingPtr->IsRxChannel) {
 1004ee8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1004eec:	e5940004 	ldr	r0, [r4, #4]
 1004ef0:	e594c020 	ldr	ip, [r4, #32]
 1004ef4:	e0433001 	sub	r3, r3, r1
 1004ef8:	e594e018 	ldr	lr, [r4, #24]
 1004efc:	e3500000 	cmp	r0, #0
 1004f00:	e5941000 	ldr	r1, [r4]
 1004f04:	e083300c 	add	r3, r3, ip
 1004f08:	e3c3303f 	bic	r3, r3, #63	; 0x3f
 1004f0c:	0a000007 	beq	1004f30 <XAxiDma_StartBdRingHw+0xb4>
					if (!RingIndex) {
 1004f10:	e3560000 	cmp	r6, #0
 1004f14:	1a00001b 	bne	1004f88 <XAxiDma_StartBdRingHw+0x10c>
						XAxiDma_WriteReg(RingPtr->ChanBase,
							XAXIDMA_TDESC_OFFSET, (XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail) & XAXIDMA_DESC_LSB_MASK));
						if (RingPtr->Addr_ext)
 1004f18:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1004f1c:	e5813010 	str	r3, [r1, #16]
 1004f20:	0a000005 	beq	1004f3c <XAxiDma_StartBdRingHw+0xc0>
 1004f24:	e5816014 	str	r6, [r1, #20]
								 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
				}
			}
		}

		return XST_SUCCESS;
 1004f28:	e1a00006 	mov	r0, r6
 1004f2c:	e8bd8070 	pop	{r4, r5, r6, pc}
					if (RingPtr->Addr_ext)
 1004f30:	e35e0000 	cmp	lr, #0
 1004f34:	e5813010 	str	r3, [r1, #16]
 1004f38:	1a000010 	bne	1004f80 <XAxiDma_StartBdRingHw+0x104>
		return XST_SUCCESS;
 1004f3c:	e3a00000 	mov	r0, #0
 1004f40:	e8bd8070 	pop	{r4, r5, r6, pc}
	}

	return XST_DMA_ERROR;
 1004f44:	e3a00009 	mov	r0, #9
}
 1004f48:	e8bd8070 	pop	{r4, r5, r6, pc}
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1004f4c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
 1004f50:	e594c024 	ldr	ip, [r4, #36]	; 0x24
				if (RingPtr->Addr_ext)
 1004f54:	e5940018 	ldr	r0, [r4, #24]
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1004f58:	e5941020 	ldr	r1, [r4, #32]
 1004f5c:	e5942000 	ldr	r2, [r4]
 1004f60:	e043300c 	sub	r3, r3, ip
				if (RingPtr->Addr_ext)
 1004f64:	e3500000 	cmp	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1004f68:	e0833001 	add	r3, r3, r1
 1004f6c:	e5823010 	str	r3, [r2, #16]
				if (RingPtr->Addr_ext)
 1004f70:	0afffff1 	beq	1004f3c <XAxiDma_StartBdRingHw+0xc0>
 1004f74:	e5825014 	str	r5, [r2, #20]
				return XST_SUCCESS;
 1004f78:	e1a00005 	mov	r0, r5
 1004f7c:	e8bd8070 	pop	{r4, r5, r6, pc}
 1004f80:	e5810014 	str	r0, [r1, #20]
 1004f84:	e8bd8070 	pop	{r4, r5, r6, pc}
						XAxiDma_WriteReg(RingPtr->ChanBase,
 1004f88:	e2466001 	sub	r6, r6, #1
						if (RingPtr->Addr_ext)
 1004f8c:	e35e0000 	cmp	lr, #0
						XAxiDma_WriteReg(RingPtr->ChanBase,
 1004f90:	e0816286 	add	r6, r1, r6, lsl #5
 1004f94:	e5863048 	str	r3, [r6, #72]	; 0x48
						if (RingPtr->Addr_ext)
 1004f98:	0affffe7 	beq	1004f3c <XAxiDma_StartBdRingHw+0xc0>
 1004f9c:	e586204c 	str	r2, [r6, #76]	; 0x4c
		return XST_SUCCESS;
 1004fa0:	e1a00002 	mov	r0, r2
 1004fa4:	e8bd8070 	pop	{r4, r5, r6, pc}

01004fa8 <XAxiDma_BdRingStart>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingStart(XAxiDma_BdRing * RingPtr)
{
 1004fa8:	e92d4070 	push	{r4, r5, r6, lr}
 1004fac:	e1a05000 	mov	r5, r0
	int Status;

	Status = XAxiDma_UpdateBdRingCDesc(RingPtr);
 1004fb0:	ebfffe7c 	bl	10049a8 <XAxiDma_UpdateBdRingCDesc>
	if (Status != XST_SUCCESS) {
 1004fb4:	e2504000 	subs	r4, r0, #0
 1004fb8:	1a000005 	bne	1004fd4 <XAxiDma_BdRingStart+0x2c>
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
			"Updating Current Descriptor Failed\n\r");
		return Status;
	}

	Status = XAxiDma_StartBdRingHw(RingPtr);
 1004fbc:	e1a00005 	mov	r0, r5
 1004fc0:	ebffffad 	bl	1004e7c <XAxiDma_StartBdRingHw>
	if (Status != XST_SUCCESS) {
 1004fc4:	e2504000 	subs	r4, r0, #0
 1004fc8:	1a000006 	bne	1004fe8 <XAxiDma_BdRingStart+0x40>
			"Starting Hardware Failed\n\r");
		return Status;
	}

	return XST_SUCCESS;
}
 1004fcc:	e1a00004 	mov	r0, r4
 1004fd0:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1004fd4:	e3070ad8 	movw	r0, #31448	; 0x7ad8
 1004fd8:	e3400105 	movt	r0, #261	; 0x105
 1004fdc:	fa001c71 	blx	100c1a8 <printf>
}
 1004fe0:	e1a00004 	mov	r0, r4
 1004fe4:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1004fe8:	e3070b0c 	movw	r0, #31500	; 0x7b0c
 1004fec:	e3400105 	movt	r0, #261	; 0x105
 1004ff0:	fa001c6c 	blx	100c1a8 <printf>
}
 1004ff4:	e1a00004 	mov	r0, r4
 1004ff8:	e8bd8070 	pop	{r4, r5, r6, pc}

01004ffc <XAxiDma_BdRingSetCoalesce>:
	return *(volatile u32 *) Addr;
 1004ffc:	e590c000 	ldr	ip, [r0]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	if (Counter != XAXIDMA_NO_CHANGE) {
 1005000:	e3710001 	cmn	r1, #1
{
 1005004:	e92d4010 	push	{r4, lr}
 1005008:	e59c3000 	ldr	r3, [ip]
	if (Counter != XAXIDMA_NO_CHANGE) {
 100500c:	0a000004 	beq	1005024 <XAxiDma_BdRingSetCoalesce+0x28>
		if ((Counter == 0) || (Counter > 0xFF)) {
 1005010:	e241e001 	sub	lr, r1, #1
 1005014:	e35e00fe 	cmp	lr, #254	; 0xfe
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
			"invalid  coalescing threshold %d", (int)Counter);
			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_COALESCE_MASK) |
 1005018:	93c338ff 	bicls	r3, r3, #16711680	; 0xff0000
 100501c:	91833801 	orrls	r3, r3, r1, lsl #16
		if ((Counter == 0) || (Counter > 0xFF)) {
 1005020:	8a00000d 	bhi	100505c <XAxiDma_BdRingSetCoalesce+0x60>
			(Counter << XAXIDMA_COALESCE_SHIFT);
	}

	if (Timer != XAXIDMA_NO_CHANGE) {
 1005024:	e3720001 	cmn	r2, #1
 1005028:	0a000002 	beq	1005038 <XAxiDma_BdRingSetCoalesce+0x3c>
		if (Timer > 0xFF) {
 100502c:	e35200ff 	cmp	r2, #255	; 0xff
			"invalid  delay counter %d", (int)Timer);

			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_DELAY_MASK) |
 1005030:	97df3c12 	bfils	r3, r2, #24, #8
		if (Timer > 0xFF) {
 1005034:	8a000002 	bhi	1005044 <XAxiDma_BdRingSetCoalesce+0x48>
			(Timer << XAXIDMA_DELAY_SHIFT);
	}

	XAxiDma_WriteReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET, Cr);

	return XST_SUCCESS;
 1005038:	e3a00000 	mov	r0, #0
	*LocalAddr = Value;
 100503c:	e58c3000 	str	r3, [ip]
}
 1005040:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1005044:	e3070b68 	movw	r0, #31592	; 0x7b68
 1005048:	e1a01002 	mov	r1, r2
 100504c:	e3400105 	movt	r0, #261	; 0x105
 1005050:	fa001c54 	blx	100c1a8 <printf>
			return XST_FAILURE;
 1005054:	e3a00001 	mov	r0, #1
 1005058:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 100505c:	e3070b34 	movw	r0, #31540	; 0x7b34
 1005060:	e3400105 	movt	r0, #261	; 0x105
 1005064:	fa001c4f 	blx	100c1a8 <printf>
			return XST_FAILURE;
 1005068:	e3a00001 	mov	r0, #1
 100506c:	e8bd8010 	pop	{r4, pc}

01005070 <XAxiDma_BdRingGetCoalesce>:
	return *(volatile u32 *) Addr;
 1005070:	e5903000 	ldr	r3, [r0]
 1005074:	e5933000 	ldr	r3, [r3]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1005078:	e7e70853 	ubfx	r0, r3, #16, #8
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 100507c:	e1a03c23 	lsr	r3, r3, #24
	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1005080:	e5810000 	str	r0, [r1]
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1005084:	e5823000 	str	r3, [r2]
}
 1005088:	e12fff1e 	bx	lr

0100508c <XAxiDma_BdRingAlloc>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd ** BdSetPtr)
{
 100508c:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1005090:	e251e000 	subs	lr, r1, #0
 1005094:	da00001f 	ble	1005118 <XAxiDma_BdRingAlloc+0x8c>

		return XST_INVALID_PARAM;
	}

	/* Enough free BDs available for the request? */
	if (RingPtr->FreeCnt < NumBd) {
 1005098:	e590c050 	ldr	ip, [r0, #80]	; 0x50
 100509c:	e15c000e 	cmp	ip, lr
 10050a0:	ba000015 	blt	10050fc <XAxiDma_BdRingAlloc+0x70>
		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead forward */
	*BdSetPtr = RingPtr->FreeHead;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10050a4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->FreeCnt -= NumBd;
 10050a8:	e04cc00e 	sub	ip, ip, lr
	*BdSetPtr = RingPtr->FreeHead;
 10050ac:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10050b0:	e5904028 	ldr	r4, [r0, #40]	; 0x28
 10050b4:	e0030e93 	mul	r3, r3, lr
	*BdSetPtr = RingPtr->FreeHead;
 10050b8:	e5821000 	str	r1, [r2]
	RingPtr->FreeCnt -= NumBd;
 10050bc:	e580c050 	str	ip, [r0, #80]	; 0x50
 10050c0:	e0933001 	adds	r3, r3, r1
	RingPtr->PreCnt += NumBd;

	return XST_SUCCESS;
 10050c4:	e3a01000 	mov	r1, #0
 10050c8:	23a02001 	movcs	r2, #1
 10050cc:	33a02000 	movcc	r2, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10050d0:	e1540003 	cmp	r4, r3
 10050d4:	33822001 	orrcc	r2, r2, #1
 10050d8:	e3520000 	cmp	r2, #0
 10050dc:	1590202c 	ldrne	r2, [r0, #44]	; 0x2c
 10050e0:	10433002 	subne	r3, r3, r2
	RingPtr->PreCnt += NumBd;
 10050e4:	e5902054 	ldr	r2, [r0, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 10050e8:	e5803034 	str	r3, [r0, #52]	; 0x34
	RingPtr->PreCnt += NumBd;
 10050ec:	e082e00e 	add	lr, r2, lr
 10050f0:	e580e054 	str	lr, [r0, #84]	; 0x54
}
 10050f4:	e1a00001 	mov	r0, r1
 10050f8:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 10050fc:	e3070bc0 	movw	r0, #31680	; 0x7bc0
 1005100:	e1a0200c 	mov	r2, ip
 1005104:	e3400105 	movt	r0, #261	; 0x105
 1005108:	fa001c26 	blx	100c1a8 <printf>
		return XST_FAILURE;
 100510c:	e3a01001 	mov	r1, #1
}
 1005110:	e1a00001 	mov	r0, r1
 1005114:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingAlloc: negative BD "
 1005118:	e3070b98 	movw	r0, #31640	; 0x7b98
 100511c:	e3400105 	movt	r0, #261	; 0x105
 1005120:	fa001c20 	blx	100c1a8 <printf>
		return XST_INVALID_PARAM;
 1005124:	e3a0100f 	mov	r1, #15
 1005128:	eafffff1 	b	10050f4 <XAxiDma_BdRingAlloc+0x68>

0100512c <XAxiDma_BdRingUnAlloc>:
int XAxiDma_BdRingUnAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
	XAxiDma_Bd *TmpBd;

	if (NumBd <= 0) {
 100512c:	e251c000 	subs	ip, r1, #0
{
 1005130:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1005134:	da00002d 	ble	10051f0 <XAxiDma_BdRingUnAlloc+0xc4>

		return XST_INVALID_PARAM;
	}

	/* Enough BDs in the preprocessing state for the request? */
	if (RingPtr->PreCnt < NumBd) {
 1005138:	e5901054 	ldr	r1, [r0, #84]	; 0x54
 100513c:	e1a03000 	mov	r3, r0
 1005140:	e151000c 	cmp	r1, ip
 1005144:	ba000023 	blt	10051d8 <XAxiDma_BdRingUnAlloc+0xac>

	/* The last BD in the BD set must has the FreeHead as its next BD.
	 * Otherwise, this is not a valid operation.
	 */
	TmpBd = BdSetPtr;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, TmpBd, NumBd);
 1005148:	e5900030 	ldr	r0, [r0, #48]	; 0x30
 100514c:	e5934028 	ldr	r4, [r3, #40]	; 0x28
 1005150:	e0000c90 	mul	r0, r0, ip
 1005154:	e0902002 	adds	r2, r0, r2
 1005158:	23a0e001 	movcs	lr, #1
 100515c:	33a0e000 	movcc	lr, #0
 1005160:	e1540002 	cmp	r4, r2
 1005164:	338ee001 	orrcc	lr, lr, #1
 1005168:	e35e0000 	cmp	lr, #0
 100516c:	1593e02c 	ldrne	lr, [r3, #44]	; 0x2c
 1005170:	1042200e 	subne	r2, r2, lr

	if (TmpBd != RingPtr->FreeHead) {
 1005174:	e593e034 	ldr	lr, [r3, #52]	; 0x34
 1005178:	e15e0002 	cmp	lr, r2
 100517c:	1a000010 	bne	10051c4 <XAxiDma_BdRingUnAlloc+0x98>

		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead backward */
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005180:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1005184:	e0522000 	subs	r2, r2, r0
 1005188:	33a00001 	movcc	r0, #1
 100518c:	23a00000 	movcs	r0, #0
	RingPtr->FreeCnt += NumBd;
	RingPtr->PreCnt -= NumBd;
 1005190:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005194:	e15e0002 	cmp	lr, r2
 1005198:	83800001 	orrhi	r0, r0, #1
	RingPtr->FreeCnt += NumBd;
 100519c:	e593e050 	ldr	lr, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10051a0:	e3500000 	cmp	r0, #0
	RingPtr->PreCnt -= NumBd;
 10051a4:	e5831054 	str	r1, [r3, #84]	; 0x54
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10051a8:	1593002c 	ldrne	r0, [r3, #44]	; 0x2c
	RingPtr->FreeCnt += NumBd;
 10051ac:	e08ec00c 	add	ip, lr, ip
 10051b0:	e583c050 	str	ip, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10051b4:	10822000 	addne	r2, r2, r0

	return XST_SUCCESS;
 10051b8:	e3a00000 	mov	r0, #0
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 10051bc:	e5832034 	str	r2, [r3, #52]	; 0x34
}
 10051c0:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 10051c4:	e3070c38 	movw	r0, #31800	; 0x7c38
 10051c8:	e3400105 	movt	r0, #261	; 0x105
 10051cc:	fa001c1a 	blx	100c23c <puts>
		return XST_FAILURE;
 10051d0:	e3a00001 	mov	r0, #1
 10051d4:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 10051d8:	e3070c08 	movw	r0, #31752	; 0x7c08
 10051dc:	e1a0200c 	mov	r2, ip
 10051e0:	e3400105 	movt	r0, #261	; 0x105
 10051e4:	fa001bef 	blx	100c1a8 <printf>
		return XST_FAILURE;
 10051e8:	e3a00001 	mov	r0, #1
 10051ec:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingUnAlloc: negative BD"
 10051f0:	e3070be0 	movw	r0, #31712	; 0x7be0
 10051f4:	e3400105 	movt	r0, #261	; 0x105
 10051f8:	fa001bea 	blx	100c1a8 <printf>
		return XST_INVALID_PARAM;
 10051fc:	e3a0000f 	mov	r0, #15
 1005200:	e8bd8010 	pop	{r4, pc}

01005204 <XAxiDma_BdRingToHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingToHw(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
 1005204:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	int i;
	u32 BdCr;
	u32 BdSts;
	int RingIndex = RingPtr->RingIndex;

	if (NumBd < 0) {
 1005208:	e2516000 	subs	r6, r1, #0
{
 100520c:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 1005210:	ba000069 	blt	10053bc <XAxiDma_BdRingToHw+0x1b8>

		return XST_INVALID_PARAM;
	}

	/* If the commit set is empty, do nothing */
	if (NumBd == 0) {
 1005214:	0a000052 	beq	1005364 <XAxiDma_BdRingToHw+0x160>
		return XST_SUCCESS;
	}

	/* Make sure we are in sync with XAxiDma_BdRingAlloc() */
	if ((RingPtr->PreCnt < NumBd) || (RingPtr->PreHead != BdSetPtr)) {
 1005218:	e5903054 	ldr	r3, [r0, #84]	; 0x54
 100521c:	e1a05000 	mov	r5, r0
 1005220:	e1530006 	cmp	r3, r6
 1005224:	ba000051 	blt	1005370 <XAxiDma_BdRingToHw+0x16c>
 1005228:	e5903038 	ldr	r3, [r0, #56]	; 0x38
 100522c:	e1530002 	cmp	r3, r2
 1005230:	1a00004e 	bne	1005370 <XAxiDma_BdRingToHw+0x16c>
	BdSts = XAxiDma_BdGetSts(CurBdPtr);

	/* In case of Tx channel, the first BD should have been marked
	 * as start-of-frame
	 */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005234:	e5901004 	ldr	r1, [r0, #4]
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1005238:	e1a04002 	mov	r4, r2
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 100523c:	e592301c 	ldr	r3, [r2, #28]
	int RingIndex = RingPtr->RingIndex;
 1005240:	e5907064 	ldr	r7, [r0, #100]	; 0x64
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005244:	e3510000 	cmp	r1, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1005248:	e5921018 	ldr	r1, [r2, #24]
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 100524c:	e203333f 	and	r3, r3, #-67108864	; 0xfc000000
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005250:	0a00004c 	beq	1005388 <XAxiDma_BdRingToHw+0x184>
		return XST_FAILURE;
	}

	/* Clear the completed status bit
	 */
	for (i = 0; i < NumBd - 1; i++) {
 1005254:	e2468001 	sub	r8, r6, #1
 1005258:	e3580000 	cmp	r8, #0
 100525c:	da00001e 	ble	10052dc <XAxiDma_BdRingToHw+0xd8>

		/* Make sure the length value in the BD is non-zero. */
		if (XAxiDma_BdGetLength(CurBdPtr,
 1005260:	e595001c 	ldr	r0, [r5, #28]
 1005264:	e1110000 	tst	r1, r0
 1005268:	13a09000 	movne	r9, #0
 100526c:	1a000003 	bne	1005280 <XAxiDma_BdRingToHw+0x7c>
 1005270:	ea00004b 	b	10053a4 <XAxiDma_BdRingToHw+0x1a0>
 1005274:	e595001c 	ldr	r0, [r5, #28]
 1005278:	e1110000 	tst	r1, r0
 100527c:	0a000048 	beq	10053a4 <XAxiDma_BdRingToHw+0x1a0>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");

			return XST_FAILURE;
		}

		BdSts &=  ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1005280:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

		/* Flush the current BD so DMA core could see the updates */
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1005284:	e1a00002 	mov	r0, r2
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1005288:	e584301c 	str	r3, [r4, #28]
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 100528c:	e3a01034 	mov	r1, #52	; 0x34
 1005290:	eb000d15 	bl	10086ec <Xil_DCacheFlushRange>

		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1005294:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	for (i = 0; i < NumBd - 1; i++) {
 1005298:	e2899001 	add	r9, r9, #1
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 100529c:	e1530004 	cmp	r3, r4
 10052a0:	85953030 	ldrhi	r3, [r5, #48]	; 0x30
 10052a4:	95954024 	ldrls	r4, [r5, #36]	; 0x24
 10052a8:	80844003 	addhi	r4, r4, r3
	for (i = 0; i < NumBd - 1; i++) {
 10052ac:	e1590008 	cmp	r9, r8
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 10052b0:	e1a02004 	mov	r2, r4
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 10052b4:	e5941018 	ldr	r1, [r4, #24]
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 10052b8:	e594301c 	ldr	r3, [r4, #28]
	for (i = 0; i < NumBd - 1; i++) {
 10052bc:	baffffec 	blt	1005274 <XAxiDma_BdRingToHw+0x70>
	}

	/* In case of Tx channel, the last BD should have EOF bit set */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) {
 10052c0:	e5950004 	ldr	r0, [r5, #4]
 10052c4:	e3500000 	cmp	r0, #0
 10052c8:	1a000003 	bne	10052dc <XAxiDma_BdRingToHw+0xd8>
 10052cc:	e3110301 	tst	r1, #67108864	; 0x4000000
 10052d0:	0a000058 	beq	1005438 <XAxiDma_BdRingToHw+0x234>
 10052d4:	e5921018 	ldr	r1, [r2, #24]
 10052d8:	e1a04002 	mov	r4, r2

		return XST_FAILURE;
	}

	/* Make sure the length value in the last BD is non-zero. */
	if (XAxiDma_BdGetLength(CurBdPtr,
 10052dc:	e595001c 	ldr	r0, [r5, #28]
 10052e0:	e1110000 	tst	r1, r0
 10052e4:	0a00002e 	beq	10053a4 <XAxiDma_BdRingToHw+0x1a0>
		return XST_FAILURE;
	}

	/* The last BD should also have the completed status bit cleared
	 */
	BdSts &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 10052e8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

	/* Flush the last BD so DMA core could see the updates */
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 10052ec:	e3a01034 	mov	r1, #52	; 0x34
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 10052f0:	e584301c 	str	r3, [r4, #28]
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 10052f4:	e1a00002 	mov	r0, r2
 10052f8:	e58d2004 	str	r2, [sp, #4]
 10052fc:	eb000cfa 	bl	10086ec <Xil_DCacheFlushRange>
	DATA_SYNC;
 1005300:	f57ff04f 	dsb	sy

	/* This set has completed pre-processing, adjust ring pointers and
	 * counters
	 */
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1005304:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1005308:	e5950038 	ldr	r0, [r5, #56]	; 0x38
 100530c:	e595c028 	ldr	ip, [r5, #40]	; 0x28
 1005310:	e59d2004 	ldr	r2, [sp, #4]
 1005314:	e0030693 	mul	r3, r3, r6
	RingPtr->PreCnt -= NumBd;
	RingPtr->HwTail = CurBdPtr;
 1005318:	e5852040 	str	r2, [r5, #64]	; 0x40
 100531c:	e0933000 	adds	r3, r3, r0
	RingPtr->HwCnt += NumBd;

	/* If it is running, signal the engine to begin processing */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1005320:	e5950008 	ldr	r0, [r5, #8]
 1005324:	23a01001 	movcs	r1, #1
 1005328:	33a01000 	movcc	r1, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 100532c:	e15c0003 	cmp	ip, r3
 1005330:	33811001 	orrcc	r1, r1, #1
 1005334:	e3510000 	cmp	r1, #0
 1005338:	1595102c 	ldrne	r1, [r5, #44]	; 0x2c
 100533c:	10433001 	subne	r3, r3, r1
	RingPtr->PreCnt -= NumBd;
 1005340:	e5951054 	ldr	r1, [r5, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1005344:	e5853038 	str	r3, [r5, #56]	; 0x38
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1005348:	e3500001 	cmp	r0, #1
	RingPtr->HwCnt += NumBd;
 100534c:	e5953058 	ldr	r3, [r5, #88]	; 0x58
	RingPtr->PreCnt -= NumBd;
 1005350:	e0411006 	sub	r1, r1, r6
 1005354:	e5851054 	str	r1, [r5, #84]	; 0x54
	RingPtr->HwCnt += NumBd;
 1005358:	e0836006 	add	r6, r3, r6
 100535c:	e5856058 	str	r6, [r5, #88]	; 0x58
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1005360:	0a00001a 	beq	10053d0 <XAxiDma_BdRingToHw+0x1cc>
		return XST_SUCCESS;
 1005364:	e3a00000 	mov	r0, #0
								UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
			}
	}

	return XST_SUCCESS;
}
 1005368:	e28dd00c 	add	sp, sp, #12
 100536c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Bd ring has problems\r\n");
 1005370:	e3070c84 	movw	r0, #31876	; 0x7c84
 1005374:	e3400105 	movt	r0, #261	; 0x105
 1005378:	fa001baf 	blx	100c23c <puts>
		return XST_DMA_SG_LIST_ERROR;
 100537c:	e300020e 	movw	r0, #526	; 0x20e
}
 1005380:	e28dd00c 	add	sp, sp, #12
 1005384:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005388:	e3110302 	tst	r1, #134217728	; 0x8000000
 100538c:	0a000024 	beq	1005424 <XAxiDma_BdRingToHw+0x220>
	for (i = 0; i < NumBd - 1; i++) {
 1005390:	e2468001 	sub	r8, r6, #1
 1005394:	e3580000 	cmp	r8, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1005398:	d2011303 	andle	r1, r1, #201326592	; 0xc000000
	for (i = 0; i < NumBd - 1; i++) {
 100539c:	caffffaf 	bgt	1005260 <XAxiDma_BdRingToHw+0x5c>
 10053a0:	eaffffc9 	b	10052cc <XAxiDma_BdRingToHw+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");
 10053a4:	e3070cbc 	movw	r0, #31932	; 0x7cbc
 10053a8:	e3400105 	movt	r0, #261	; 0x105
 10053ac:	fa001ba2 	blx	100c23c <puts>
			return XST_FAILURE;
 10053b0:	e3a00001 	mov	r0, #1
}
 10053b4:	e28dd00c 	add	sp, sp, #12
 10053b8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingToHw: negative BD number "
 10053bc:	e3070c60 	movw	r0, #31840	; 0x7c60
 10053c0:	e3400105 	movt	r0, #261	; 0x105
 10053c4:	fa001b77 	blx	100c1a8 <printf>
		return XST_INVALID_PARAM;
 10053c8:	e3a0000f 	mov	r0, #15
 10053cc:	eaffffeb 	b	1005380 <XAxiDma_BdRingToHw+0x17c>
			if (RingPtr->Cyclic) {
 10053d0:	e5952068 	ldr	r2, [r5, #104]	; 0x68
 10053d4:	e5951000 	ldr	r1, [r5]
 10053d8:	e5953020 	ldr	r3, [r5, #32]
 10053dc:	e3520000 	cmp	r2, #0
 10053e0:	e595c024 	ldr	ip, [r5, #36]	; 0x24
 10053e4:	e595e018 	ldr	lr, [r5, #24]
 10053e8:	1a000017 	bne	100544c <XAxiDma_BdRingToHw+0x248>
			if (RingPtr->IsRxChannel) {
 10053ec:	e5950004 	ldr	r0, [r5, #4]
 10053f0:	e043300c 	sub	r3, r3, ip
 10053f4:	e0834004 	add	r4, r3, r4
 10053f8:	e3c4403f 	bic	r4, r4, #63	; 0x3f
 10053fc:	e3500000 	cmp	r0, #0
 1005400:	0a00001a 	beq	1005470 <XAxiDma_BdRingToHw+0x26c>
				if (!RingIndex) {
 1005404:	e3570000 	cmp	r7, #0
 1005408:	1a00001d 	bne	1005484 <XAxiDma_BdRingToHw+0x280>
					if (RingPtr->Addr_ext)
 100540c:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1005410:	e5814010 	str	r4, [r1, #16]
	return XST_SUCCESS;
 1005414:	11a00007 	movne	r0, r7
 1005418:	15817014 	strne	r7, [r1, #20]
					if (RingPtr->Addr_ext)
 100541c:	1affffd7 	bne	1005380 <XAxiDma_BdRingToHw+0x17c>
 1005420:	eaffffcf 	b	1005364 <XAxiDma_BdRingToHw+0x160>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx first BD does not have "
 1005424:	e3070c9c 	movw	r0, #31900	; 0x7c9c
 1005428:	e3400105 	movt	r0, #261	; 0x105
 100542c:	fa001b82 	blx	100c23c <puts>
		return XST_FAILURE;
 1005430:	e3a00001 	mov	r0, #1
 1005434:	eaffffd1 	b	1005380 <XAxiDma_BdRingToHw+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx last BD does not have "
 1005438:	e3070ccc 	movw	r0, #31948	; 0x7ccc
 100543c:	e3400105 	movt	r0, #261	; 0x105
 1005440:	fa001b7d 	blx	100c23c <puts>
		return XST_FAILURE;
 1005444:	e3a00001 	mov	r0, #1
 1005448:	eaffffcc 	b	1005380 <XAxiDma_BdRingToHw+0x17c>
				XAxiDma_WriteReg(RingPtr->ChanBase,
 100544c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
				if (RingPtr->Addr_ext)
 1005450:	e35e0000 	cmp	lr, #0
 1005454:	13a00000 	movne	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1005458:	e042c00c 	sub	ip, r2, ip
 100545c:	e08c3003 	add	r3, ip, r3
 1005460:	e5813010 	str	r3, [r1, #16]
 1005464:	15810014 	strne	r0, [r1, #20]
				if (RingPtr->Addr_ext)
 1005468:	1affffc4 	bne	1005380 <XAxiDma_BdRingToHw+0x17c>
 100546c:	eaffffbc 	b	1005364 <XAxiDma_BdRingToHw+0x160>
				if (RingPtr->Addr_ext)
 1005470:	e35e0000 	cmp	lr, #0
 1005474:	e5814010 	str	r4, [r1, #16]
 1005478:	15810014 	strne	r0, [r1, #20]
 100547c:	1affffbf 	bne	1005380 <XAxiDma_BdRingToHw+0x17c>
 1005480:	eaffffb7 	b	1005364 <XAxiDma_BdRingToHw+0x160>
					XAxiDma_WriteReg(RingPtr->ChanBase,
 1005484:	e2477001 	sub	r7, r7, #1
					if (RingPtr->Addr_ext)
 1005488:	e35e0000 	cmp	lr, #0
					XAxiDma_WriteReg(RingPtr->ChanBase,
 100548c:	e0811287 	add	r1, r1, r7, lsl #5
	return XST_SUCCESS;
 1005490:	11a00002 	movne	r0, r2
 1005494:	e5814048 	str	r4, [r1, #72]	; 0x48
 1005498:	1581204c 	strne	r2, [r1, #76]	; 0x4c
					if (RingPtr->Addr_ext)
 100549c:	1affffb7 	bne	1005380 <XAxiDma_BdRingToHw+0x17c>
 10054a0:	eaffffaf 	b	1005364 <XAxiDma_BdRingToHw+0x160>

010054a4 <XAxiDma_BdRingFromHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingFromHw(XAxiDma_BdRing * RingPtr, int BdLimit,
			     XAxiDma_Bd ** BdSetPtr)
{
 10054a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10054a8:	e1a09002 	mov	r9, r2
	BdPartialCount = 0;
	BdSts = 0;
	BdCr = 0;

	/* If no BDs in work group, then there's nothing to search */
	if (RingPtr->HwCnt == 0) {
 10054ac:	e5908058 	ldr	r8, [r0, #88]	; 0x58
 10054b0:	e3580000 	cmp	r8, #0
 10054b4:	0a00004c 	beq	10055ec <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}

	if (BdLimit > RingPtr->HwCnt) {
 10054b8:	e1580001 	cmp	r8, r1
 10054bc:	a1a08001 	movge	r8, r1
	 *    BD.
	 *  - RingPtr->HwTail is reached
	 *  - The number of requested BDs has been processed
	 */

	while (BdCount < BdLimit) {
 10054c0:	e3580000 	cmp	r8, #0
 10054c4:	da000048 	ble	10055ec <XAxiDma_BdRingFromHw+0x148>
	CurBdPtr = RingPtr->HwHead;
 10054c8:	e3a07000 	mov	r7, #0
 10054cc:	e1a05000 	mov	r5, r0
 10054d0:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
 10054d4:	e1a06007 	mov	r6, r7
 10054d8:	ea00000f 	b	100551c <XAxiDma_BdRingFromHw+0x78>
		 * For tx BDs, EOF bit is in the control word
		 * For rx BDs, EOF bit is in the status word
		 */
		if (((!(RingPtr->IsRxChannel) &&
		(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) ||
		((RingPtr->IsRxChannel) && (BdSts &
 10054dc:	e3130301 	tst	r3, #67108864	; 0x4000000
 10054e0:	0a00001b 	beq	1005554 <XAxiDma_BdRingFromHw+0xb0>
		}
		else {
			BdPartialCount++;
		}

		if (RingPtr->Cyclic) {
 10054e4:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount = 0;
 10054e8:	e3a07000 	mov	r7, #0
		if (RingPtr->Cyclic) {
 10054ec:	e3520000 	cmp	r2, #0
 10054f0:	1a00001b 	bne	1005564 <XAxiDma_BdRingFromHw+0xc0>
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
		}

		/* Reached the end of the work group */
		if (CurBdPtr == RingPtr->HwTail) {
 10054f4:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 10054f8:	e1530004 	cmp	r3, r4
 10054fc:	0a000020 	beq	1005584 <XAxiDma_BdRingFromHw+0xe0>
			break;
		}

		/* Move on to the next BD in work group */
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1005500:	e5953028 	ldr	r3, [r5, #40]	; 0x28
 1005504:	e1540003 	cmp	r4, r3
 1005508:	35953030 	ldrcc	r3, [r5, #48]	; 0x30
 100550c:	25954024 	ldrcs	r4, [r5, #36]	; 0x24
 1005510:	30844003 	addcc	r4, r4, r3
	while (BdCount < BdLimit) {
 1005514:	e1580006 	cmp	r8, r6
 1005518:	0a000019 	beq	1005584 <XAxiDma_BdRingFromHw+0xe0>
		XAXIDMA_CACHE_INVALIDATE(CurBdPtr);
 100551c:	e3a01034 	mov	r1, #52	; 0x34
 1005520:	e1a00004 	mov	r0, r4
 1005524:	eb000c23 	bl	10085b8 <Xil_DCacheInvalidateRange>
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1005528:	e594301c 	ldr	r3, [r4, #28]
 100552c:	e284001c 	add	r0, r4, #28
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1005530:	e5941018 	ldr	r1, [r4, #24]
		if (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)) {
 1005534:	e3530000 	cmp	r3, #0
 1005538:	aa000011 	bge	1005584 <XAxiDma_BdRingFromHw+0xe0>
		if (((!(RingPtr->IsRxChannel) &&
 100553c:	e5952004 	ldr	r2, [r5, #4]
		BdCount++;
 1005540:	e2866001 	add	r6, r6, #1
		if (((!(RingPtr->IsRxChannel) &&
 1005544:	e3520000 	cmp	r2, #0
 1005548:	1affffe3 	bne	10054dc <XAxiDma_BdRingFromHw+0x38>
 100554c:	e3110301 	tst	r1, #67108864	; 0x4000000
 1005550:	1affffe3 	bne	10054e4 <XAxiDma_BdRingFromHw+0x40>
		if (RingPtr->Cyclic) {
 1005554:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount++;
 1005558:	e2877001 	add	r7, r7, #1
		if (RingPtr->Cyclic) {
 100555c:	e3520000 	cmp	r2, #0
 1005560:	0affffe3 	beq	10054f4 <XAxiDma_BdRingFromHw+0x50>
			BdSts = BdSts & ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1005564:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1005568:	e3a01034 	mov	r1, #52	; 0x34
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 100556c:	e5803000 	str	r3, [r0]
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1005570:	e1a00004 	mov	r0, r4
 1005574:	eb000c5c 	bl	10086ec <Xil_DCacheFlushRange>
		if (CurBdPtr == RingPtr->HwTail) {
 1005578:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 100557c:	e1530004 	cmp	r3, r4
 1005580:	1affffde 	bne	1005500 <XAxiDma_BdRingFromHw+0x5c>
	BdCount -= BdPartialCount;

	/* If BdCount is non-zero then BDs were found to return. Set return
	 * parameters, update pointers and counters, return success
	 */
	if (BdCount) {
 1005584:	e0560007 	subs	r0, r6, r7
 1005588:	0a000017 	beq	10055ec <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = RingPtr->HwHead;
		if (!RingPtr->Cyclic) {
 100558c:	e5953068 	ldr	r3, [r5, #104]	; 0x68
		*BdSetPtr = RingPtr->HwHead;
 1005590:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
		if (!RingPtr->Cyclic) {
 1005594:	e3530000 	cmp	r3, #0
		*BdSetPtr = RingPtr->HwHead;
 1005598:	e5892000 	str	r2, [r9]
		if (!RingPtr->Cyclic) {
 100559c:	1a000005 	bne	10055b8 <XAxiDma_BdRingFromHw+0x114>
			RingPtr->HwCnt -= BdCount;
 10055a0:	e5951058 	ldr	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 10055a4:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
			RingPtr->HwCnt -= BdCount;
 10055a8:	e0411000 	sub	r1, r1, r0
			RingPtr->PostCnt += BdCount;
 10055ac:	e0833000 	add	r3, r3, r0
			RingPtr->HwCnt -= BdCount;
 10055b0:	e5851058 	str	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 10055b4:	e585305c 	str	r3, [r5, #92]	; 0x5c
		}
		XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->HwHead, BdCount);
 10055b8:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 10055bc:	e5951028 	ldr	r1, [r5, #40]	; 0x28
 10055c0:	e0030093 	mul	r3, r3, r0
 10055c4:	e0933002 	adds	r3, r3, r2
 10055c8:	23a02001 	movcs	r2, #1
 10055cc:	33a02000 	movcc	r2, #0
 10055d0:	e1510003 	cmp	r1, r3
 10055d4:	33822001 	orrcc	r2, r2, #1
 10055d8:	e3520000 	cmp	r2, #0
 10055dc:	1595202c 	ldrne	r2, [r5, #44]	; 0x2c
 10055e0:	10433002 	subne	r3, r3, r2
 10055e4:	e585303c 	str	r3, [r5, #60]	; 0x3c
	else {
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}
}
 10055e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*BdSetPtr = (XAxiDma_Bd *)NULL;
 10055ec:	e3a00000 	mov	r0, #0
 10055f0:	e5890000 	str	r0, [r9]
		return 0;
 10055f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

010055f8 <XAxiDma_BdRingFree>:
 *
 *****************************************************************************/
int XAxiDma_BdRingFree(XAxiDma_BdRing * RingPtr, int NumBd,
		      XAxiDma_Bd * BdSetPtr)
{
	if (NumBd < 0) {
 10055f8:	e251c000 	subs	ip, r1, #0
{
 10055fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1005600:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 1005604:	ba000023 	blt	1005698 <XAxiDma_BdRingFree+0xa0>
	}

	/* If the BD Set to free is empty, do nothing
	 */
	if (NumBd == 0) {
		return XST_SUCCESS;
 1005608:	01a0000c 	moveq	r0, ip
	if (NumBd == 0) {
 100560c:	0a000017 	beq	1005670 <XAxiDma_BdRingFree+0x78>
	}

	/* Make sure we are in sync with XAxiDma_BdRingFromHw() */
	if ((RingPtr->PostCnt < NumBd) || (RingPtr->PostHead != BdSetPtr)) {
 1005610:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
 1005614:	e5903044 	ldr	r3, [r0, #68]	; 0x44
 1005618:	e151000c 	cmp	r1, ip
 100561c:	ba000015 	blt	1005678 <XAxiDma_BdRingFree+0x80>
 1005620:	e1520003 	cmp	r2, r3
 1005624:	1a000013 	bne	1005678 <XAxiDma_BdRingFree+0x80>
	}

	/* Update pointers and counters */
	RingPtr->FreeCnt += NumBd;
	RingPtr->PostCnt -= NumBd;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1005628:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->PostCnt -= NumBd;
 100562c:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1005630:	e590e028 	ldr	lr, [r0, #40]	; 0x28
	RingPtr->PostCnt -= NumBd;
 1005634:	e580105c 	str	r1, [r0, #92]	; 0x5c
	RingPtr->FreeCnt += NumBd;
 1005638:	e5901050 	ldr	r1, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 100563c:	e0030c93 	mul	r3, r3, ip
	RingPtr->FreeCnt += NumBd;
 1005640:	e081c00c 	add	ip, r1, ip
 1005644:	e580c050 	str	ip, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1005648:	e0932002 	adds	r2, r3, r2
 100564c:	23a03001 	movcs	r3, #1
 1005650:	33a03000 	movcc	r3, #0
 1005654:	e15e0002 	cmp	lr, r2
 1005658:	33833001 	orrcc	r3, r3, #1
 100565c:	e3530000 	cmp	r3, #0
 1005660:	1590302c 	ldrne	r3, [r0, #44]	; 0x2c
 1005664:	10422003 	subne	r2, r2, r3
 1005668:	e5802044 	str	r2, [r0, #68]	; 0x44

	return XST_SUCCESS;
 100566c:	e3a00000 	mov	r0, #0
}
 1005670:	e28dd00c 	add	sp, sp, #12
 1005674:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingFree: Error free BDs: "
 1005678:	e3070d0c 	movw	r0, #32012	; 0x7d0c
 100567c:	e58d2000 	str	r2, [sp]
 1005680:	e3400105 	movt	r0, #261	; 0x105
 1005684:	e1a0200c 	mov	r2, ip
 1005688:	fa001ac6 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 100568c:	e300020e 	movw	r0, #526	; 0x20e
}
 1005690:	e28dd00c 	add	sp, sp, #12
 1005694:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR,
 1005698:	e3070cec 	movw	r0, #31980	; 0x7cec
 100569c:	e3400105 	movt	r0, #261	; 0x105
 10056a0:	fa001ac0 	blx	100c1a8 <printf>
		return XST_INVALID_PARAM;
 10056a4:	e3a0000f 	mov	r0, #15
 10056a8:	eafffff0 	b	1005670 <XAxiDma_BdRingFree+0x78>

010056ac <XAxiDma_BdRingCheck>:
	u32 AddrV;
	u32 AddrP;
	int i;

	/* Is the list created */
	if (RingPtr->AllCnt == 0) {
 10056ac:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 10056b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (RingPtr->AllCnt == 0) {
 10056b4:	e3520000 	cmp	r2, #0
 10056b8:	0a000058 	beq	1005820 <XAxiDma_BdRingCheck+0x174>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't check if channel is running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 10056bc:	e5903008 	ldr	r3, [r0, #8]
 10056c0:	e1a04000 	mov	r4, r0
 10056c4:	e3530001 	cmp	r3, #1
 10056c8:	0a00005f 	beq	100584c <XAxiDma_BdRingCheck+0x1a0>

		return XST_IS_STARTED;
	}

	/* RunState doesn't make sense */
	else if (RingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10056cc:	e5903008 	ldr	r3, [r0, #8]
 10056d0:	e3530002 	cmp	r3, #2
 10056d4:	1a000045 	bne	10057f0 <XAxiDma_BdRingCheck+0x144>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal pointers point to correct memory space */
	AddrV = (UINTPTR) RingPtr->FreeHead;
 10056d8:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 10056dc:	e5905024 	ldr	r5, [r0, #36]	; 0x24
 10056e0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
 10056e4:	e1550001 	cmp	r5, r1
 10056e8:	8a000034 	bhi	10057c0 <XAxiDma_BdRingCheck+0x114>
 10056ec:	e1510003 	cmp	r1, r3
 10056f0:	8a000032 	bhi	10057c0 <XAxiDma_BdRingCheck+0x114>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PreHead;
 10056f4:	e5901038 	ldr	r1, [r0, #56]	; 0x38
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 10056f8:	e1550001 	cmp	r5, r1
 10056fc:	91510003 	cmpls	r1, r3
 1005700:	8a000040 	bhi	1005808 <XAxiDma_BdRingCheck+0x15c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwHead;
 1005704:	e590103c 	ldr	r1, [r0, #60]	; 0x3c
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005708:	e1510003 	cmp	r1, r3
 100570c:	91550001 	cmpls	r5, r1
 1005710:	8a000047 	bhi	1005834 <XAxiDma_BdRingCheck+0x188>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwTail;
 1005714:	e5901040 	ldr	r1, [r0, #64]	; 0x40
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005718:	e1510003 	cmp	r1, r3
 100571c:	91550001 	cmpls	r5, r1
 1005720:	8a00002c 	bhi	10057d8 <XAxiDma_BdRingCheck+0x12c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PostHead;
 1005724:	e5901044 	ldr	r1, [r0, #68]	; 0x44
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1005728:	e1510003 	cmp	r1, r3
 100572c:	91550001 	cmpls	r5, r1
 1005730:	8a00004a 	bhi	1005860 <XAxiDma_BdRingCheck+0x1b4>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal counters add up */
	if ((RingPtr->HwCnt + RingPtr->PreCnt + RingPtr->FreeCnt +
 1005734:	e5903058 	ldr	r3, [r0, #88]	; 0x58
 1005738:	e590c054 	ldr	ip, [r0, #84]	; 0x54
 100573c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
 1005740:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
 1005744:	e083300c 	add	r3, r3, ip
 1005748:	e0833000 	add	r3, r3, r0
 100574c:	e0833001 	add	r3, r3, r1
 1005750:	e1520003 	cmp	r2, r3
 1005754:	1a000050 	bne	100589c <XAxiDma_BdRingCheck+0x1f0>
		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify BDs are linked correctly */
	AddrV = RingPtr->FirstBdAddr;
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 1005758:	e5946020 	ldr	r6, [r4, #32]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 100575c:	e3520001 	cmp	r2, #1
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 1005760:	e5942030 	ldr	r2, [r4, #48]	; 0x30
 1005764:	e0866002 	add	r6, r6, r2
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1005768:	da000042 	ble	1005878 <XAxiDma_BdRingCheck+0x1cc>
 100576c:	e3a07001 	mov	r7, #1
 1005770:	ea000005 	b	100578c <XAxiDma_BdRingCheck+0xe0>
 1005774:	e5942060 	ldr	r2, [r4, #96]	; 0x60

			return XST_DMA_SG_LIST_ERROR;
		}

		/* Move on to next BD */
		AddrV += RingPtr->Separation;
 1005778:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < RingPtr->AllCnt; i++) {
 100577c:	e1520007 	cmp	r2, r7
		AddrV += RingPtr->Separation;
 1005780:	e0855003 	add	r5, r5, r3
		AddrP += RingPtr->Separation;
 1005784:	e0866003 	add	r6, r6, r3
	for (i = 1; i < RingPtr->AllCnt; i++) {
 1005788:	da00003a 	ble	1005878 <XAxiDma_BdRingCheck+0x1cc>
		XAXIDMA_CACHE_INVALIDATE(AddrV);
 100578c:	e3a01034 	mov	r1, #52	; 0x34
 1005790:	e1a00005 	mov	r0, r5
 1005794:	eb000b87 	bl	10085b8 <Xil_DCacheInvalidateRange>
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 1005798:	e5951000 	ldr	r1, [r5]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 100579c:	e2877001 	add	r7, r7, #1
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10057a0:	e1510006 	cmp	r1, r6
 10057a4:	0afffff2 	beq	1005774 <XAxiDma_BdRingCheck+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Next Bd "
 10057a8:	e3070f34 	movw	r0, #32564	; 0x7f34
 10057ac:	e1a02006 	mov	r2, r6
 10057b0:	e3400105 	movt	r0, #261	; 0x105
 10057b4:	fa001a7b 	blx	100c1a8 <printf>
			return XST_DMA_SG_LIST_ERROR;
 10057b8:	e300020e 	movw	r0, #526	; 0x20e
 10057bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: FreeHead wrong "
 10057c0:	e3070dd4 	movw	r0, #32212	; 0x7dd4
 10057c4:	e1a02005 	mov	r2, r5
 10057c8:	e3400105 	movt	r0, #261	; 0x105
 10057cc:	fa001a75 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 10057d0:	e300020e 	movw	r0, #526	; 0x20e
 10057d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwTail wrong %x, "
 10057d8:	e3070e90 	movw	r0, #32400	; 0x7e90
 10057dc:	e1a02005 	mov	r2, r5
 10057e0:	e3400105 	movt	r0, #261	; 0x105
 10057e4:	fa001a6f 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 10057e8:	e300020e 	movw	r0, #526	; 0x20e
 10057ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: unknown BD ring "
 10057f0:	e5901008 	ldr	r1, [r0, #8]
 10057f4:	e3070dac 	movw	r0, #32172	; 0x7dac
 10057f8:	e3400105 	movt	r0, #261	; 0x105
 10057fc:	fa001a69 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1005800:	e300020e 	movw	r0, #526	; 0x20e
 1005804:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PreHead wrong %x, "
 1005808:	e3070e14 	movw	r0, #32276	; 0x7e14
 100580c:	e1a02005 	mov	r2, r5
 1005810:	e3400105 	movt	r0, #261	; 0x105
 1005814:	fa001a63 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1005818:	e300020e 	movw	r0, #526	; 0x20e
 100581c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: no BDs\r\n");
 1005820:	e3070d60 	movw	r0, #32096	; 0x7d60
 1005824:	e3400105 	movt	r0, #261	; 0x105
 1005828:	fa001a83 	blx	100c23c <puts>
		return XST_DMA_SG_NO_LIST;
 100582c:	e300020b 	movw	r0, #523	; 0x20b
 1005830:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwHead wrong %x, "
 1005834:	e3070e54 	movw	r0, #32340	; 0x7e54
 1005838:	e1a02005 	mov	r2, r5
 100583c:	e3400105 	movt	r0, #261	; 0x105
 1005840:	fa001a58 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1005844:	e300020e 	movw	r0, #526	; 0x20e
 1005848:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Bd ring is "
 100584c:	e3070d78 	movw	r0, #32120	; 0x7d78
 1005850:	e3400105 	movt	r0, #261	; 0x105
 1005854:	fa001a78 	blx	100c23c <puts>
		return XST_IS_STARTED;
 1005858:	e3a00017 	mov	r0, #23
 100585c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PostHead wrong "
 1005860:	e3070ecc 	movw	r0, #32460	; 0x7ecc
 1005864:	e1a02005 	mov	r2, r5
 1005868:	e3400105 	movt	r0, #261	; 0x105
 100586c:	fa001a4d 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1005870:	e300020e 	movw	r0, #526	; 0x20e
 1005874:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	}

	XAXIDMA_CACHE_INVALIDATE(AddrV);
 1005878:	e3a01034 	mov	r1, #52	; 0x34
 100587c:	e1a00005 	mov	r0, r5
 1005880:	eb000b4c 	bl	10085b8 <Xil_DCacheInvalidateRange>
	/* Last BD should point back to the beginning of ring */
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 1005884:	e5951000 	ldr	r1, [r5]
	    RingPtr->FirstBdPhysAddr) {
 1005888:	e5942020 	ldr	r2, [r4, #32]
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 100588c:	e1510002 	cmp	r1, r2
 1005890:	1a000006 	bne	10058b0 <XAxiDma_BdRingCheck+0x204>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* No problems found */
	return XST_SUCCESS;
 1005894:	e3a00000 	mov	r0, #0
}
 1005898:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: internal counter "
 100589c:	e3070f0c 	movw	r0, #32524	; 0x7f0c
 10058a0:	e3400105 	movt	r0, #261	; 0x105
 10058a4:	fa001a64 	blx	100c23c <puts>
		return XST_DMA_SG_LIST_ERROR;
 10058a8:	e300020e 	movw	r0, #526	; 0x20e
 10058ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: last Bd Next BD "
 10058b0:	e3070f64 	movw	r0, #32612	; 0x7f64
 10058b4:	e3400105 	movt	r0, #261	; 0x105
 10058b8:	fa001a3a 	blx	100c1a8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 10058bc:	e300020e 	movw	r0, #526	; 0x20e
 10058c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010058c4 <XAxiDma_BdRingDumpRegs>:
 * @return	None
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_BdRingDumpRegs(XAxiDma_BdRing *RingPtr) {
 10058c4:	e1a03000 	mov	r3, r0
 10058c8:	e92d4070 	push	{r4, r5, r6, lr}
	UINTPTR RegBase = RingPtr->ChanBase;
 10058cc:	e5934000 	ldr	r4, [r3]
	int RingIndex = RingPtr->RingIndex;

	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 10058d0:	e3070f9c 	movw	r0, #32668	; 0x7f9c
 10058d4:	e3400105 	movt	r0, #261	; 0x105
	int RingIndex = RingPtr->RingIndex;
 10058d8:	e5935064 	ldr	r5, [r3, #100]	; 0x64
	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 10058dc:	e1a01004 	mov	r1, r4
 10058e0:	eb000e14 	bl	1009138 <xil_printf>
	xil_printf("Control REG: %08x\r\n",
 10058e4:	e3070fb4 	movw	r0, #32692	; 0x7fb4
	return *(volatile u32 *) Addr;
 10058e8:	e5941000 	ldr	r1, [r4]
 10058ec:	e3400105 	movt	r0, #261	; 0x105
 10058f0:	eb000e10 	bl	1009138 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET));
	xil_printf("Status REG: %08x\r\n",
 10058f4:	e3070fc8 	movw	r0, #32712	; 0x7fc8
 10058f8:	e5941004 	ldr	r1, [r4, #4]
 10058fc:	e3400105 	movt	r0, #261	; 0x105
 1005900:	eb000e0c 	bl	1009138 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_SR_OFFSET));

	if (RingIndex) {
 1005904:	e3550000 	cmp	r5, #0
 1005908:	0a00000f 	beq	100594c <XAxiDma_BdRingDumpRegs+0x88>
	xil_printf("Cur BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 100590c:	e2855001 	add	r5, r5, #1
	xil_printf("Cur BD REG: %08x\r\n",
 1005910:	e3070fdc 	movw	r0, #32732	; 0x7fdc
 1005914:	e7941285 	ldr	r1, [r4, r5, lsl #5]
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1005918:	e1a05285 	lsl	r5, r5, #5
	xil_printf("Cur BD REG: %08x\r\n",
 100591c:	e3400105 	movt	r0, #261	; 0x105
 1005920:	eb000e04 	bl	1009138 <xil_printf>
		XAXIDMA_RX_CDESC0_OFFSET + ((RingIndex - 1) *
		XAXIDMA_RX_NDESC_OFFSET)));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1005924:	e2455040 	sub	r5, r5, #64	; 0x40
 1005928:	e2844048 	add	r4, r4, #72	; 0x48
	xil_printf("Tail BD REG: %08x\r\n",
 100592c:	e3070ff0 	movw	r0, #32752	; 0x7ff0
 1005930:	e7951004 	ldr	r1, [r5, r4]
 1005934:	e3400105 	movt	r0, #261	; 0x105
 1005938:	eb000dfe 	bl	1009138 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CDESC_OFFSET));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_TDESC_OFFSET));
	}

	xil_printf("\r\n");
 100593c:	e307075c 	movw	r0, #30556	; 0x775c
}
 1005940:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 1005944:	e3400105 	movt	r0, #261	; 0x105
 1005948:	ea000dfa 	b	1009138 <xil_printf>
	xil_printf("Cur BD REG: %08x\r\n",
 100594c:	e3070fdc 	movw	r0, #32732	; 0x7fdc
 1005950:	e5941008 	ldr	r1, [r4, #8]
 1005954:	e3400105 	movt	r0, #261	; 0x105
 1005958:	eb000df6 	bl	1009138 <xil_printf>
	xil_printf("Tail BD REG: %08x\r\n",
 100595c:	e3070ff0 	movw	r0, #32752	; 0x7ff0
 1005960:	e5941010 	ldr	r1, [r4, #16]
 1005964:	e3400105 	movt	r0, #261	; 0x105
 1005968:	eb000df2 	bl	1009138 <xil_printf>
	xil_printf("\r\n");
 100596c:	e307075c 	movw	r0, #30556	; 0x775c
}
 1005970:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 1005974:	e3400105 	movt	r0, #261	; 0x105
 1005978:	ea000dee 	b	1009138 <xil_printf>

0100597c <StubErrCallBack>:
******************************************************************************/
static void StubErrCallBack(void *CallBackRef, u32 ErrorMask)
{
	(void) ((void *)CallBackRef);
	(void) ErrorMask;
	Xil_AssertVoidAlways();
 100597c:	e3080004 	movw	r0, #32772	; 0x8004
{
 1005980:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1005984:	e3a010a7 	mov	r1, #167	; 0xa7
 1005988:	e3400105 	movt	r0, #261	; 0x105
 100598c:	eb000ad5 	bl	10084e8 <Xil_Assert>
 1005990:	e30a3480 	movw	r3, #42112	; 0xa480
 1005994:	e3a02001 	mov	r2, #1
 1005998:	e340310a 	movt	r3, #266	; 0x10a
 100599c:	e5832000 	str	r2, [r3]
}
 10059a0:	e8bd8010 	pop	{r4, pc}

010059a4 <XClk_Wiz_CfgInitialize>:
{
 10059a4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10059a8:	e2504000 	subs	r4, r0, #0
 10059ac:	0a00001e 	beq	1005a2c <XClk_Wiz_CfgInitialize+0x88>
 10059b0:	e30a5480 	movw	r5, #42112	; 0xa480
	Xil_AssertNonvoid(CfgPtr != NULL);
 10059b4:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 10059b8:	e340510a 	movt	r5, #266	; 0x10a
 10059bc:	e3a03000 	mov	r3, #0
 10059c0:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(CfgPtr != NULL);
 10059c4:	0a000021 	beq	1005a50 <XClk_Wiz_CfgInitialize+0xac>
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 10059c8:	e3520000 	cmp	r2, #0
 10059cc:	e1a06002 	mov	r6, r2
 10059d0:	0a00000d 	beq	1005a0c <XClk_Wiz_CfgInitialize+0x68>
	InstancePtr->Config = *CfgPtr;
 10059d4:	e3a02058 	mov	r2, #88	; 0x58
 10059d8:	eb001848 	bl	100bb00 <memcpy>
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 10059dc:	e305397c 	movw	r3, #22908	; 0x597c
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 10059e0:	e3012111 	movw	r2, #4369	; 0x1111
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 10059e4:	e3403100 	movt	r3, #256	; 0x100
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 10059e8:	e3412111 	movt	r2, #4369	; 0x1111
	InstancePtr->Config.BaseAddr = EffectiveAddr;
 10059ec:	e5846004 	str	r6, [r4, #4]
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 10059f0:	e5843060 	str	r3, [r4, #96]	; 0x60
	InstancePtr->ClkGlitchCallBack      = StubErrCallBack;
 10059f4:	e5843068 	str	r3, [r4, #104]	; 0x68
	InstancePtr->ClkStopCallBack        = StubErrCallBack;
 10059f8:	e5843070 	str	r3, [r4, #112]	; 0x70
	InstancePtr->ErrorCallBack = StubErrCallBack;
 10059fc:	e5843078 	str	r3, [r4, #120]	; 0x78
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1005a00:	e5842080 	str	r2, [r4, #128]	; 0x80
}
 1005a04:	e3a00000 	mov	r0, #0
 1005a08:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1005a0c:	e3080004 	movw	r0, #32772	; 0x8004
 1005a10:	e3a01065 	mov	r1, #101	; 0x65
 1005a14:	e3400105 	movt	r0, #261	; 0x105
 1005a18:	eb000ab2 	bl	10084e8 <Xil_Assert>
 1005a1c:	e3a03001 	mov	r3, #1
}
 1005a20:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1005a24:	e5853000 	str	r3, [r5]
}
 1005a28:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005a2c:	e3080004 	movw	r0, #32772	; 0x8004
 1005a30:	e3a01063 	mov	r1, #99	; 0x63
 1005a34:	e3400105 	movt	r0, #261	; 0x105
 1005a38:	eb000aaa 	bl	10084e8 <Xil_Assert>
 1005a3c:	e30a3480 	movw	r3, #42112	; 0xa480
 1005a40:	e3a02001 	mov	r2, #1
 1005a44:	e340310a 	movt	r3, #266	; 0x10a
 1005a48:	e5832000 	str	r2, [r3]
 1005a4c:	eaffffec 	b	1005a04 <XClk_Wiz_CfgInitialize+0x60>
	Xil_AssertNonvoid(CfgPtr != NULL);
 1005a50:	e3080004 	movw	r0, #32772	; 0x8004
 1005a54:	e3a01064 	mov	r1, #100	; 0x64
 1005a58:	e3400105 	movt	r0, #261	; 0x105
 1005a5c:	eb000aa1 	bl	10084e8 <Xil_Assert>
 1005a60:	e3a03001 	mov	r3, #1
 1005a64:	e5853000 	str	r3, [r5]
 1005a68:	eaffffe5 	b	1005a04 <XClk_Wiz_CfgInitialize+0x60>

01005a6c <XClk_Wiz_GetInterruptSettings>:
	Xil_AssertVoid(InstancePtr != NULL);
 1005a6c:	e3500000 	cmp	r0, #0
 1005a70:	0a00000b 	beq	1005aa4 <XClk_Wiz_GetInterruptSettings+0x38>
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 1005a74:	e5902004 	ldr	r2, [r0, #4]
	Xil_AssertVoid(InstancePtr != NULL);
 1005a78:	e30a3480 	movw	r3, #42112	; 0xa480
 1005a7c:	e340310a 	movt	r3, #266	; 0x10a
 1005a80:	e3a01000 	mov	r1, #0
 1005a84:	e5831000 	str	r1, [r3]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1005a88:	e592300c 	ldr	r3, [r2, #12]
*
****************************************************************************/
static inline u32 XCLK_WIZ_GET_BITFIELD_VALUE(UINTPTR BaseAddress,
		u32 RegisterOffset, u32 BitMask, u32 BitShift) {
	return ((XClk_Wiz_ReadReg((BaseAddress), (RegisterOffset)) \
		  & (BitMask)) >> (BitShift));
 1005a8c:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 1005a90:	e5803058 	str	r3, [r0, #88]	; 0x58
 1005a94:	e5923010 	ldr	r3, [r2, #16]
 1005a98:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkIntrEnable = XCLK_WIZ_GET_BITFIELD_VALUE
 1005a9c:	e580305c 	str	r3, [r0, #92]	; 0x5c
 1005aa0:	e12fff1e 	bx	lr
	Xil_AssertVoid(InstancePtr != NULL);
 1005aa4:	e3080004 	movw	r0, #32772	; 0x8004
{
 1005aa8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005aac:	e3a01086 	mov	r1, #134	; 0x86
 1005ab0:	e3400105 	movt	r0, #261	; 0x105
 1005ab4:	eb000a8b 	bl	10084e8 <Xil_Assert>
 1005ab8:	e30a3480 	movw	r3, #42112	; 0xa480
 1005abc:	e3a02001 	mov	r2, #1
 1005ac0:	e340310a 	movt	r3, #266	; 0x10a
 1005ac4:	e5832000 	str	r2, [r3]
}
 1005ac8:	e8bd8010 	pop	{r4, pc}

01005acc <XClk_Wiz_LookupConfig>:
	extern XClk_Wiz_Config XClk_Wiz_ConfigTable[];
	XClk_Wiz_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0; Index < XPAR_XCLK_WIZ_NUM_INSTANCES; Index++) {
		if (XClk_Wiz_ConfigTable[Index].DeviceId == DeviceId) {
 1005acc:	e30833f8 	movw	r3, #33784	; 0x83f8
 1005ad0:	e3403105 	movt	r3, #261	; 0x105
 1005ad4:	e5932000 	ldr	r2, [r3]
			break;
		}
	}

	return CfgPtr;
}
 1005ad8:	e1520000 	cmp	r2, r0
 1005adc:	01a00003 	moveq	r0, r3
 1005ae0:	13a00000 	movne	r0, #0
 1005ae4:	e12fff1e 	bx	lr

01005ae8 <XGpioPs_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XGpioPs_CfgInitialize(XGpioPs *InstancePtr, const XGpioPs_Config *ConfigPtr,
				u32 EffectiveAddr)
{
 1005ae8:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status = XST_SUCCESS;
	u8 i;
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005aec:	e2504000 	subs	r4, r0, #0
 1005af0:	0a00004b 	beq	1005c24 <XGpioPs_CfgInitialize+0x13c>
 1005af4:	e30a5480 	movw	r5, #42112	; 0xa480
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1005af8:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005afc:	e340510a 	movt	r5, #266	; 0x10a
 1005b00:	e3a03000 	mov	r3, #0
 1005b04:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1005b08:	0a00004e 	beq	1005c48 <XGpioPs_CfgInitialize+0x160>
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1005b0c:	e3520000 	cmp	r2, #0
 1005b10:	0a00002d 	beq	1005bcc <XGpioPs_CfgInitialize+0xe4>
	 * Set some default values for instance data, don't indicate the device
	 * is ready to use until everything has been initialized successfully.
	 */
	InstancePtr->IsReady = 0U;
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1005b14:	e1d100b0 	ldrh	r0, [r1]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1005b18:	e3071588 	movw	r1, #30088	; 0x7588
 1005b1c:	e3401100 	movt	r1, #256	; 0x100
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
 1005b20:	e1c420f4 	strd	r2, [r4, #4]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1005b24:	e584100c 	str	r1, [r4, #12]
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1005b28:	e1c400b0 	strh	r0, [r4]
	InstancePtr->Platform = XGetPlatform_Info();
 1005b2c:	eb000cf2 	bl	1008efc <XGetPlatform_Info>

	/* Initialize the Bank data based on platform */
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1005b30:	e3500001 	cmp	r0, #1
	InstancePtr->Platform = XGetPlatform_Info();
 1005b34:	e5840014 	str	r0, [r4, #20]
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1005b38:	0a00002b 	beq	1005bec <XGpioPs_CfgInitialize+0x104>
		 *	142 - 173, Bank 5
		 */
		InstancePtr->MaxPinNum = (u32)174;
		InstancePtr->MaxBanks = (u8)6;
	}
        else if (InstancePtr->Platform == (u32)XPLAT_VERSAL)
 1005b3c:	e3500006 	cmp	r0, #6
 1005b40:	0a00002e 	beq	1005c00 <XGpioPs_CfgInitialize+0x118>
		 *	0 - 31,  Bank 0
		 *	32 - 53, Bank 1
		 *	54 - 85, Bank 2
		 *	86 - 117, Bank 3
		 */
		InstancePtr->MaxPinNum = (u32)118;
 1005b44:	e3a02076 	mov	r2, #118	; 0x76
		InstancePtr->MaxBanks = (u8)4;
 1005b48:	e3a03004 	mov	r3, #4
		InstancePtr->MaxPinNum = (u32)118;
 1005b4c:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)4;
 1005b50:	e5c4301c 	strb	r3, [r4, #28]
{
 1005b54:	e3a02000 	mov	r2, #0
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1005b58:	e3e0c000 	mvn	ip, #0
 1005b5c:	e1a03002 	mov	r3, r2
 1005b60:	ea000008 	b	1005b88 <XGpioPs_CfgInitialize+0xa0>

                       }
                }
                else
                {
		XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005b64:	e5941004 	ldr	r1, [r4, #4]
 1005b68:	e2811f85 	add	r1, r1, #532	; 0x214
 1005b6c:	e781c303 	str	ip, [r1, r3, lsl #6]
 1005b70:	e2822001 	add	r2, r2, #1
	for (i=(u8)0U;i<InstancePtr->MaxBanks;i++) {
 1005b74:	e5d4101c 	ldrb	r1, [r4, #28]
 1005b78:	e6ef3072 	uxtb	r3, r2
 1005b7c:	e1510003 	cmp	r1, r3
 1005b80:	9a00000c 	bls	1005bb8 <XGpioPs_CfgInitialize+0xd0>
 1005b84:	e5940014 	ldr	r0, [r4, #20]
                if (InstancePtr->Platform == XPLAT_VERSAL){
 1005b88:	e3500006 	cmp	r0, #6
 1005b8c:	1afffff4 	bne	1005b64 <XGpioPs_CfgInitialize+0x7c>
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 1005b90:	e5941020 	ldr	r1, [r4, #32]
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 1005b94:	e2430001 	sub	r0, r3, #1
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 1005b98:	e3510000 	cmp	r1, #0
 1005b9c:	1a000002 	bne	1005bac <XGpioPs_CfgInitialize+0xc4>
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 1005ba0:	e3500001 	cmp	r0, #1
 1005ba4:	8affffee 	bhi	1005b64 <XGpioPs_CfgInitialize+0x7c>
 1005ba8:	eafffff0 	b	1005b70 <XGpioPs_CfgInitialize+0x88>
                                if(i==(u32)XGPIOPS_TWO)
 1005bac:	e3530002 	cmp	r3, #2
 1005bb0:	1affffeb 	bne	1005b64 <XGpioPs_CfgInitialize+0x7c>
 1005bb4:	eaffffed 	b	1005b70 <XGpioPs_CfgInitialize+0x88>
					  XGPIOPS_INTDIS_OFFSET, 0xFFFFFFFFU);
                }
	}

	/* Indicate the component is now ready to use. */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1005bb8:	e3013111 	movw	r3, #4369	; 0x1111
 1005bbc:	e3413111 	movt	r3, #4369	; 0x1111
 1005bc0:	e5843008 	str	r3, [r4, #8]

	return Status;
}
 1005bc4:	e3a00000 	mov	r0, #0
 1005bc8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1005bcc:	e3080010 	movw	r0, #32784	; 0x8010
 1005bd0:	e3a01068 	mov	r1, #104	; 0x68
 1005bd4:	e3400105 	movt	r0, #261	; 0x105
 1005bd8:	eb000a42 	bl	10084e8 <Xil_Assert>
 1005bdc:	e3a03001 	mov	r3, #1
}
 1005be0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1005be4:	e5853000 	str	r3, [r5]
}
 1005be8:	e8bd8070 	pop	{r4, r5, r6, pc}
		InstancePtr->MaxPinNum = (u32)174;
 1005bec:	e3a020ae 	mov	r2, #174	; 0xae
		InstancePtr->MaxBanks = (u8)6;
 1005bf0:	e3a03006 	mov	r3, #6
		InstancePtr->MaxPinNum = (u32)174;
 1005bf4:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)6;
 1005bf8:	e5c4301c 	strb	r3, [r4, #28]
 1005bfc:	eaffffd4 	b	1005b54 <XGpioPs_CfgInitialize+0x6c>
                if(InstancePtr->PmcGpio == (u32)FALSE)
 1005c00:	e5943020 	ldr	r3, [r4, #32]
 1005c04:	e3530000 	cmp	r3, #0
                        InstancePtr->MaxPinNum = (u32)58;
 1005c08:	03a0203a 	moveq	r2, #58	; 0x3a
                        InstancePtr->MaxBanks = (u8)4;
 1005c0c:	03a03004 	moveq	r3, #4
                        InstancePtr->MaxPinNum = (u32)116;
 1005c10:	13a02074 	movne	r2, #116	; 0x74
                        InstancePtr->MaxBanks = (u8)5;
 1005c14:	13a03005 	movne	r3, #5
                        InstancePtr->MaxPinNum = (u32)116;
 1005c18:	e5842018 	str	r2, [r4, #24]
                        InstancePtr->MaxBanks = (u8)5;
 1005c1c:	e5c4301c 	strb	r3, [r4, #28]
 1005c20:	eaffffcb 	b	1005b54 <XGpioPs_CfgInitialize+0x6c>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005c24:	e3080010 	movw	r0, #32784	; 0x8010
 1005c28:	e3a01066 	mov	r1, #102	; 0x66
 1005c2c:	e3400105 	movt	r0, #261	; 0x105
 1005c30:	eb000a2c 	bl	10084e8 <Xil_Assert>
 1005c34:	e30a3480 	movw	r3, #42112	; 0xa480
 1005c38:	e3a02001 	mov	r2, #1
 1005c3c:	e340310a 	movt	r3, #266	; 0x10a
 1005c40:	e5832000 	str	r2, [r3]
 1005c44:	eaffffde 	b	1005bc4 <XGpioPs_CfgInitialize+0xdc>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1005c48:	e3080010 	movw	r0, #32784	; 0x8010
 1005c4c:	e3a01067 	mov	r1, #103	; 0x67
 1005c50:	e3400105 	movt	r0, #261	; 0x105
 1005c54:	eb000a23 	bl	10084e8 <Xil_Assert>
 1005c58:	e3a03001 	mov	r3, #1
 1005c5c:	e5853000 	str	r3, [r5]
 1005c60:	eaffffd7 	b	1005bc4 <XGpioPs_CfgInitialize+0xdc>

01005c64 <XGpioPs_Read>:
* @note		This function is used for reading the state of all the GPIO pins
*		of specified bank.
*
*****************************************************************************/
u32 XGpioPs_Read(const XGpioPs *InstancePtr, u8 Bank)
{
 1005c64:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005c68:	e2506000 	subs	r6, r0, #0
 1005c6c:	0a00001f 	beq	1005cf0 <XGpioPs_Read+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005c70:	e5962008 	ldr	r2, [r6, #8]
 1005c74:	e3013111 	movw	r3, #4369	; 0x1111
 1005c78:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005c7c:	e30a5480 	movw	r5, #42112	; 0xa480
 1005c80:	e340510a 	movt	r5, #266	; 0x10a
 1005c84:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005c88:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005c8c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005c90:	1a000006 	bne	1005cb0 <XGpioPs_Read+0x4c>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1005c94:	e5d6301c 	ldrb	r3, [r6, #28]
 1005c98:	e1530001 	cmp	r3, r1
 1005c9c:	9a00000b 	bls	1005cd0 <XGpioPs_Read+0x6c>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005ca0:	e5963004 	ldr	r3, [r6, #4]
 1005ca4:	e2811018 	add	r1, r1, #24
	return *(volatile u32 *) Addr;
 1005ca8:	e7930101 	ldr	r0, [r3, r1, lsl #2]
 1005cac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005cb0:	e3080010 	movw	r0, #32784	; 0x8010
 1005cb4:	e3a010e0 	mov	r1, #224	; 0xe0
 1005cb8:	e3400105 	movt	r0, #261	; 0x105
 1005cbc:	eb000a09 	bl	10084e8 <Xil_Assert>
 1005cc0:	e3a03001 	mov	r3, #1
 1005cc4:	e1a00004 	mov	r0, r4
 1005cc8:	e5853000 	str	r3, [r5]
 1005ccc:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1005cd0:	e3080010 	movw	r0, #32784	; 0x8010
 1005cd4:	e3a010e1 	mov	r1, #225	; 0xe1
 1005cd8:	e3400105 	movt	r0, #261	; 0x105
 1005cdc:	eb000a01 	bl	10084e8 <Xil_Assert>
 1005ce0:	e3a03001 	mov	r3, #1
 1005ce4:	e1a00004 	mov	r0, r4
 1005ce8:	e5853000 	str	r3, [r5]
				 ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
				 XGPIOPS_DATA_RO_OFFSET);
}
 1005cec:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005cf0:	e3080010 	movw	r0, #32784	; 0x8010
 1005cf4:	e3a010df 	mov	r1, #223	; 0xdf
 1005cf8:	e3400105 	movt	r0, #261	; 0x105
 1005cfc:	eb0009f9 	bl	10084e8 <Xil_Assert>
 1005d00:	e30a3480 	movw	r3, #42112	; 0xa480
 1005d04:	e3a02001 	mov	r2, #1
 1005d08:	e340310a 	movt	r3, #266	; 0x10a
 1005d0c:	e1a00006 	mov	r0, r6
 1005d10:	e5832000 	str	r2, [r3]
 1005d14:	e8bd8070 	pop	{r4, r5, r6, pc}

01005d18 <XGpioPs_Write>:
*		the bank. The previous state of the pins is not maintained.
*
*****************************************************************************/
void XGpioPs_Write(const XGpioPs *InstancePtr, u8 Bank, u32 Data)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1005d18:	e3500000 	cmp	r0, #0
{
 1005d1c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005d20:	0a00001d 	beq	1005d9c <XGpioPs_Write+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005d24:	e590c008 	ldr	ip, [r0, #8]
 1005d28:	e3013111 	movw	r3, #4369	; 0x1111
 1005d2c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005d30:	e30a4480 	movw	r4, #42112	; 0xa480
 1005d34:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005d38:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005d3c:	e3a03000 	mov	r3, #0
 1005d40:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005d44:	1a000006 	bne	1005d64 <XGpioPs_Write+0x4c>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005d48:	e5d0301c 	ldrb	r3, [r0, #28]
 1005d4c:	e1530001 	cmp	r3, r1
 1005d50:	9a00000a 	bls	1005d80 <XGpioPs_Write+0x68>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005d54:	e5903004 	ldr	r3, [r0, #4]
 1005d58:	e2811010 	add	r1, r1, #16
	*LocalAddr = Value;
 1005d5c:	e7832101 	str	r2, [r3, r1, lsl #2]
 1005d60:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005d64:	e3080010 	movw	r0, #32784	; 0x8010
 1005d68:	e3001127 	movw	r1, #295	; 0x127
 1005d6c:	e3400105 	movt	r0, #261	; 0x105
 1005d70:	eb0009dc 	bl	10084e8 <Xil_Assert>
 1005d74:	e3a03001 	mov	r3, #1
 1005d78:	e5843000 	str	r3, [r4]
 1005d7c:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005d80:	e3080010 	movw	r0, #32784	; 0x8010
 1005d84:	e3a01f4a 	mov	r1, #296	; 0x128
 1005d88:	e3400105 	movt	r0, #261	; 0x105
 1005d8c:	eb0009d5 	bl	10084e8 <Xil_Assert>
 1005d90:	e3a03001 	mov	r3, #1
 1005d94:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
			  XGPIOPS_DATA_OFFSET, Data);
}
 1005d98:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005d9c:	e3080010 	movw	r0, #32784	; 0x8010
 1005da0:	e3001126 	movw	r1, #294	; 0x126
 1005da4:	e3400105 	movt	r0, #261	; 0x105
 1005da8:	eb0009ce 	bl	10084e8 <Xil_Assert>
 1005dac:	e30a3480 	movw	r3, #42112	; 0xa480
 1005db0:	e3a02001 	mov	r2, #1
 1005db4:	e340310a 	movt	r3, #266	; 0x10a
 1005db8:	e5832000 	str	r2, [r3]
 1005dbc:	e8bd8010 	pop	{r4, pc}

01005dc0 <XGpioPs_SetDirection>:
*		not maintained.
*
*****************************************************************************/
void XGpioPs_SetDirection(const XGpioPs *InstancePtr, u8 Bank, u32 Direction)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1005dc0:	e3500000 	cmp	r0, #0
{
 1005dc4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005dc8:	0a00001e 	beq	1005e48 <XGpioPs_SetDirection+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005dcc:	e590c008 	ldr	ip, [r0, #8]
 1005dd0:	e3013111 	movw	r3, #4369	; 0x1111
 1005dd4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005dd8:	e30a4480 	movw	r4, #42112	; 0xa480
 1005ddc:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005de0:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005de4:	e3a03000 	mov	r3, #0
 1005de8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005dec:	1a000007 	bne	1005e10 <XGpioPs_SetDirection+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005df0:	e5d0301c 	ldrb	r3, [r0, #28]
 1005df4:	e1530001 	cmp	r3, r1
 1005df8:	9a00000b 	bls	1005e2c <XGpioPs_SetDirection+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005dfc:	e5900004 	ldr	r0, [r0, #4]
 1005e00:	e3a03f81 	mov	r3, #516	; 0x204
 1005e04:	e0831301 	add	r1, r3, r1, lsl #6
 1005e08:	e7812000 	str	r2, [r1, r0]
 1005e0c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e10:	e3080010 	movw	r0, #32784	; 0x8010
 1005e14:	e3001186 	movw	r1, #390	; 0x186
 1005e18:	e3400105 	movt	r0, #261	; 0x105
 1005e1c:	eb0009b1 	bl	10084e8 <Xil_Assert>
 1005e20:	e3a03001 	mov	r3, #1
 1005e24:	e5843000 	str	r3, [r4]
 1005e28:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005e2c:	e3080010 	movw	r0, #32784	; 0x8010
 1005e30:	e3001187 	movw	r1, #391	; 0x187
 1005e34:	e3400105 	movt	r0, #261	; 0x105
 1005e38:	eb0009aa 	bl	10084e8 <Xil_Assert>
 1005e3c:	e3a03001 	mov	r3, #1
 1005e40:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_DIRM_OFFSET, Direction);
}
 1005e44:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005e48:	e3080010 	movw	r0, #32784	; 0x8010
 1005e4c:	e3001185 	movw	r1, #389	; 0x185
 1005e50:	e3400105 	movt	r0, #261	; 0x105
 1005e54:	eb0009a3 	bl	10084e8 <Xil_Assert>
 1005e58:	e30a3480 	movw	r3, #42112	; 0xa480
 1005e5c:	e3a02001 	mov	r2, #1
 1005e60:	e340310a 	movt	r3, #266	; 0x10a
 1005e64:	e5832000 	str	r2, [r3]
 1005e68:	e8bd8010 	pop	{r4, pc}

01005e6c <XGpioPs_GetDirection>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetDirection(const XGpioPs *InstancePtr, u8 Bank)
{
 1005e6c:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005e70:	e2506000 	subs	r6, r0, #0
 1005e74:	0a000020 	beq	1005efc <XGpioPs_GetDirection+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e78:	e5962008 	ldr	r2, [r6, #8]
 1005e7c:	e3013111 	movw	r3, #4369	; 0x1111
 1005e80:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005e84:	e30a5480 	movw	r5, #42112	; 0xa480
 1005e88:	e340510a 	movt	r5, #266	; 0x10a
 1005e8c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e90:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005e94:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005e98:	1a000007 	bne	1005ebc <XGpioPs_GetDirection+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1005e9c:	e5d6301c 	ldrb	r3, [r6, #28]
 1005ea0:	e1530001 	cmp	r3, r1
 1005ea4:	9a00000c 	bls	1005edc <XGpioPs_GetDirection+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1005ea8:	e5962004 	ldr	r2, [r6, #4]
 1005eac:	e3a03f81 	mov	r3, #516	; 0x204
 1005eb0:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1005eb4:	e7910002 	ldr	r0, [r1, r2]
 1005eb8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ebc:	e3080010 	movw	r0, #32784	; 0x8010
 1005ec0:	e30011d5 	movw	r1, #469	; 0x1d5
 1005ec4:	e3400105 	movt	r0, #261	; 0x105
 1005ec8:	eb000986 	bl	10084e8 <Xil_Assert>
 1005ecc:	e3a03001 	mov	r3, #1
 1005ed0:	e1a00004 	mov	r0, r4
 1005ed4:	e5853000 	str	r3, [r5]
 1005ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1005edc:	e3080010 	movw	r0, #32784	; 0x8010
 1005ee0:	e30011d6 	movw	r1, #470	; 0x1d6
 1005ee4:	e3400105 	movt	r0, #261	; 0x105
 1005ee8:	eb00097e 	bl	10084e8 <Xil_Assert>
 1005eec:	e3a03001 	mov	r3, #1
 1005ef0:	e1a00004 	mov	r0, r4
 1005ef4:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_DIRM_OFFSET);
}
 1005ef8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005efc:	e3080010 	movw	r0, #32784	; 0x8010
 1005f00:	e3a01f75 	mov	r1, #468	; 0x1d4
 1005f04:	e3400105 	movt	r0, #261	; 0x105
 1005f08:	eb000976 	bl	10084e8 <Xil_Assert>
 1005f0c:	e30a3480 	movw	r3, #42112	; 0xa480
 1005f10:	e3a02001 	mov	r2, #1
 1005f14:	e340310a 	movt	r3, #266	; 0x10a
 1005f18:	e1a00006 	mov	r0, r6
 1005f1c:	e5832000 	str	r2, [r3]
 1005f20:	e8bd8070 	pop	{r4, r5, r6, pc}

01005f24 <XGpioPs_SetOutputEnable>:
*		Enables is not maintained.
*
*****************************************************************************/
void XGpioPs_SetOutputEnable(const XGpioPs *InstancePtr, u8 Bank, u32 OpEnable)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1005f24:	e3500000 	cmp	r0, #0
{
 1005f28:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1005f2c:	0a00001e 	beq	1005fac <XGpioPs_SetOutputEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f30:	e590c008 	ldr	ip, [r0, #8]
 1005f34:	e3013111 	movw	r3, #4369	; 0x1111
 1005f38:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1005f3c:	e30a4480 	movw	r4, #42112	; 0xa480
 1005f40:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f44:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1005f48:	e3a03000 	mov	r3, #0
 1005f4c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f50:	1a000007 	bne	1005f74 <XGpioPs_SetOutputEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005f54:	e5d0301c 	ldrb	r3, [r0, #28]
 1005f58:	e1530001 	cmp	r3, r1
 1005f5c:	9a00000b 	bls	1005f90 <XGpioPs_SetOutputEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1005f60:	e5900004 	ldr	r0, [r0, #4]
 1005f64:	e3a03f82 	mov	r3, #520	; 0x208
 1005f68:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1005f6c:	e7812000 	str	r2, [r1, r0]
 1005f70:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005f74:	e3080010 	movw	r0, #32784	; 0x8010
 1005f78:	e3a01e22 	mov	r1, #544	; 0x220
 1005f7c:	e3400105 	movt	r0, #261	; 0x105
 1005f80:	eb000958 	bl	10084e8 <Xil_Assert>
 1005f84:	e3a03001 	mov	r3, #1
 1005f88:	e5843000 	str	r3, [r4]
 1005f8c:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1005f90:	e3080010 	movw	r0, #32784	; 0x8010
 1005f94:	e3001221 	movw	r1, #545	; 0x221
 1005f98:	e3400105 	movt	r0, #261	; 0x105
 1005f9c:	eb000951 	bl	10084e8 <Xil_Assert>
 1005fa0:	e3a03001 	mov	r3, #1
 1005fa4:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_OUTEN_OFFSET, OpEnable);
}
 1005fa8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1005fac:	e3080010 	movw	r0, #32784	; 0x8010
 1005fb0:	e300121f 	movw	r1, #543	; 0x21f
 1005fb4:	e3400105 	movt	r0, #261	; 0x105
 1005fb8:	eb00094a 	bl	10084e8 <Xil_Assert>
 1005fbc:	e30a3480 	movw	r3, #42112	; 0xa480
 1005fc0:	e3a02001 	mov	r2, #1
 1005fc4:	e340310a 	movt	r3, #266	; 0x10a
 1005fc8:	e5832000 	str	r2, [r3]
 1005fcc:	e8bd8010 	pop	{r4, pc}

01005fd0 <XGpioPs_GetOutputEnable>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetOutputEnable(const XGpioPs *InstancePtr, u8 Bank)
{
 1005fd0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005fd4:	e2506000 	subs	r6, r0, #0
 1005fd8:	0a000020 	beq	1006060 <XGpioPs_GetOutputEnable+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005fdc:	e5962008 	ldr	r2, [r6, #8]
 1005fe0:	e3013111 	movw	r3, #4369	; 0x1111
 1005fe4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005fe8:	e30a5480 	movw	r5, #42112	; 0xa480
 1005fec:	e340510a 	movt	r5, #266	; 0x10a
 1005ff0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ff4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1005ff8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1005ffc:	1a000007 	bne	1006020 <XGpioPs_GetOutputEnable+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006000:	e5d6301c 	ldrb	r3, [r6, #28]
 1006004:	e1530001 	cmp	r3, r1
 1006008:	9a00000c 	bls	1006040 <XGpioPs_GetOutputEnable+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100600c:	e5962004 	ldr	r2, [r6, #4]
 1006010:	e3a03f82 	mov	r3, #520	; 0x208
 1006014:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1006018:	e7910002 	ldr	r0, [r1, r2]
 100601c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006020:	e3080010 	movw	r0, #32784	; 0x8010
 1006024:	e3a01f9d 	mov	r1, #628	; 0x274
 1006028:	e3400105 	movt	r0, #261	; 0x105
 100602c:	eb00092d 	bl	10084e8 <Xil_Assert>
 1006030:	e3a03001 	mov	r3, #1
 1006034:	e1a00004 	mov	r0, r4
 1006038:	e5853000 	str	r3, [r5]
 100603c:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006040:	e3080010 	movw	r0, #32784	; 0x8010
 1006044:	e3001275 	movw	r1, #629	; 0x275
 1006048:	e3400105 	movt	r0, #261	; 0x105
 100604c:	eb000925 	bl	10084e8 <Xil_Assert>
 1006050:	e3a03001 	mov	r3, #1
 1006054:	e1a00004 	mov	r0, r4
 1006058:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_OUTEN_OFFSET);
}
 100605c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006060:	e3080010 	movw	r0, #32784	; 0x8010
 1006064:	e3001273 	movw	r1, #627	; 0x273
 1006068:	e3400105 	movt	r0, #261	; 0x105
 100606c:	eb00091d 	bl	10084e8 <Xil_Assert>
 1006070:	e30a3480 	movw	r3, #42112	; 0xa480
 1006074:	e3a02001 	mov	r2, #1
 1006078:	e340310a 	movt	r3, #266	; 0x10a
 100607c:	e1a00006 	mov	r0, r6
 1006080:	e5832000 	str	r2, [r3]
 1006084:	e8bd8070 	pop	{r4, r5, r6, pc}

01006088 <XGpioPs_GetBankPin>:
#ifdef versal
void XGpioPs_GetBankPin(const XGpioPs *InstancePtr,u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#else
void XGpioPs_GetBankPin(u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#endif
{
 1006088:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	u32 XGpioPsPinTable[6] = {0};
 100608c:	e3a05000 	mov	r5, #0
{
 1006090:	e24dd01c 	sub	sp, sp, #28
 1006094:	e1a04000 	mov	r4, r0
 1006098:	e1a06001 	mov	r6, r1
 100609c:	e1a07002 	mov	r7, r2
	u32 XGpioPsPinTable[6] = {0};
 10060a0:	e58d5004 	str	r5, [sp, #4]
 10060a4:	e58d5000 	str	r5, [sp]
 10060a8:	e58d5008 	str	r5, [sp, #8]
 10060ac:	e58d500c 	str	r5, [sp, #12]
 10060b0:	e58d5010 	str	r5, [sp, #16]
 10060b4:	e58d5014 	str	r5, [sp, #20]
#ifdef versal
        u8 i=(u8)0;
#endif
	u32 Platform = XGetPlatform_Info();
 10060b8:	eb000b8f 	bl	1008efc <XGetPlatform_Info>

	if (Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 10060bc:	e3500001 	cmp	r0, #1
 10060c0:	0a000022 	beq	1006150 <XGpioPs_GetBankPin+0xc8>
                }

        }
#endif
        else {
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 10060c4:	e3a0201f 	mov	r2, #31
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 10060c8:	e3a03035 	mov	r3, #53	; 0x35
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */

		*BankNumber = 0U;
		while (*BankNumber < XGPIOPS_FOUR) {
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10060cc:	e354001f 	cmp	r4, #31
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 10060d0:	e58d2000 	str	r2, [sp]
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 10060d4:	e58d3004 	str	r3, [sp, #4]
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
 10060d8:	e3a02055 	mov	r2, #85	; 0x55
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */
 10060dc:	e3a03075 	mov	r3, #117	; 0x75
 10060e0:	e1cd20f8 	strd	r2, [sp, #8]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10060e4:	9a000034 	bls	10061bc <XGpioPs_GetBankPin+0x134>
 10060e8:	e3540035 	cmp	r4, #53	; 0x35
				break;
			}
			(*BankNumber)++;
 10060ec:	e3a03001 	mov	r3, #1
 10060f0:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 10060f4:	9a000013 	bls	1006148 <XGpioPs_GetBankPin+0xc0>
 10060f8:	e3540055 	cmp	r4, #85	; 0x55
			(*BankNumber)++;
 10060fc:	e3a03002 	mov	r3, #2
 1006100:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006104:	9a00000f 	bls	1006148 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1006108:	e3a03003 	mov	r3, #3
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 100610c:	e3540075 	cmp	r4, #117	; 0x75
			(*BankNumber)++;
 1006110:	e5c63000 	strb	r3, [r6]
 1006114:	83a03004 	movhi	r3, #4
 1006118:	85c63000 	strbhi	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 100611c:	9a000009 	bls	1006148 <XGpioPs_GetBankPin+0xc0>
        }
#endif

        else {
		*PinNumberInBank = (u8)((u32)PinNumber %
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1006120:	e28d2018 	add	r2, sp, #24
		*PinNumberInBank = (u8)((u32)PinNumber %
 1006124:	e1a00004 	mov	r0, r4
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1006128:	e0823103 	add	r3, r2, r3, lsl #2
 100612c:	e513101c 	ldr	r1, [r3, #-28]	; 0xffffffe4
		*PinNumberInBank = (u8)((u32)PinNumber %
 1006130:	e2811001 	add	r1, r1, #1
 1006134:	fa000e72 	blx	1009b04 <__aeabi_uidivmod>
 1006138:	e6ef4071 	uxtb	r4, r1
 100613c:	e5c74000 	strb	r4, [r7]
        }
}
 1006140:	e28dd01c 	add	sp, sp, #28
 1006144:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1006148:	e5d63000 	ldrb	r3, [r6]
 100614c:	eafffff3 	b	1006120 <XGpioPs_GetBankPin+0x98>
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006150:	e3540019 	cmp	r4, #25
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1006154:	e3a01019 	mov	r1, #25
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1006158:	e3a0304d 	mov	r3, #77	; 0x4d
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 100615c:	e3a02033 	mov	r2, #51	; 0x33
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1006160:	e58d1000 	str	r1, [sp]
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1006164:	e3a0c06d 	mov	ip, #109	; 0x6d
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1006168:	e3a0108d 	mov	r1, #141	; 0x8d
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 100616c:	e58d3008 	str	r3, [sp, #8]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1006170:	e3a030ad 	mov	r3, #173	; 0xad
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1006174:	e58d1010 	str	r1, [sp, #16]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1006178:	e58d3014 	str	r3, [sp, #20]
 100617c:	828d1008 	addhi	r1, sp, #8
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1006180:	e58d2004 	str	r2, [sp, #4]
			(*BankNumber)++;
 1006184:	83a03002 	movhi	r3, #2
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1006188:	e58dc00c 	str	ip, [sp, #12]
			(*BankNumber)++;
 100618c:	85c60000 	strbhi	r0, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006190:	8a000001 	bhi	100619c <XGpioPs_GetBankPin+0x114>
 1006194:	ea000008 	b	10061bc <XGpioPs_GetBankPin+0x134>
 1006198:	e4912004 	ldr	r2, [r1], #4
 100619c:	e1540002 	cmp	r4, r2
 10061a0:	9affffe8 	bls	1006148 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 10061a4:	e5c63000 	strb	r3, [r6]
 10061a8:	e2833001 	add	r3, r3, #1
		while (*BankNumber < XGPIOPS_SIX) {
 10061ac:	e3530007 	cmp	r3, #7
 10061b0:	1afffff8 	bne	1006198 <XGpioPs_GetBankPin+0x110>
 10061b4:	e3a03006 	mov	r3, #6
 10061b8:	eaffffd8 	b	1006120 <XGpioPs_GetBankPin+0x98>
		*BankNumber = 0U;
 10061bc:	e5c65000 	strb	r5, [r6]
	if (*BankNumber == (u8)0) {
 10061c0:	eaffffdd 	b	100613c <XGpioPs_GetBankPin+0xb4>

010061c4 <XGpioPs_ReadPin>:
{
 10061c4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10061c8:	e2506000 	subs	r6, r0, #0
{
 10061cc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10061d0:	0a00002a 	beq	1006280 <XGpioPs_ReadPin+0xbc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10061d4:	e5962008 	ldr	r2, [r6, #8]
 10061d8:	e3013111 	movw	r3, #4369	; 0x1111
 10061dc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10061e0:	e30a5480 	movw	r5, #42112	; 0xa480
 10061e4:	e340510a 	movt	r5, #266	; 0x10a
 10061e8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10061ec:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10061f0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10061f4:	1a000018 	bne	100625c <XGpioPs_ReadPin+0x98>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10061f8:	e5963018 	ldr	r3, [r6, #24]
 10061fc:	e1530001 	cmp	r3, r1
 1006200:	9a00000c 	bls	1006238 <XGpioPs_ReadPin+0x74>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006204:	e6ef0071 	uxtb	r0, r1
 1006208:	e28d2007 	add	r2, sp, #7
 100620c:	e28d1006 	add	r1, sp, #6
 1006210:	ebffff9c 	bl	1006088 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006214:	e5dd3006 	ldrb	r3, [sp, #6]
 1006218:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 100621c:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006220:	e2833018 	add	r3, r3, #24
 1006224:	e7920103 	ldr	r0, [r2, r3, lsl #2]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006228:	e1a04430 	lsr	r4, r0, r4
 100622c:	e2040001 	and	r0, r4, #1
}
 1006230:	e28dd008 	add	sp, sp, #8
 1006234:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006238:	e3080010 	movw	r0, #32784	; 0x8010
 100623c:	e3001106 	movw	r1, #262	; 0x106
 1006240:	e3400105 	movt	r0, #261	; 0x105
 1006244:	eb0008a7 	bl	10084e8 <Xil_Assert>
 1006248:	e3a03001 	mov	r3, #1
 100624c:	e1a00004 	mov	r0, r4
 1006250:	e5853000 	str	r3, [r5]
}
 1006254:	e28dd008 	add	sp, sp, #8
 1006258:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100625c:	e3080010 	movw	r0, #32784	; 0x8010
 1006260:	e3001105 	movw	r1, #261	; 0x105
 1006264:	e3400105 	movt	r0, #261	; 0x105
 1006268:	eb00089e 	bl	10084e8 <Xil_Assert>
 100626c:	e3a03001 	mov	r3, #1
 1006270:	e1a00004 	mov	r0, r4
 1006274:	e5853000 	str	r3, [r5]
}
 1006278:	e28dd008 	add	sp, sp, #8
 100627c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006280:	e3080010 	movw	r0, #32784	; 0x8010
 1006284:	e3a01f41 	mov	r1, #260	; 0x104
 1006288:	e3400105 	movt	r0, #261	; 0x105
 100628c:	eb000895 	bl	10084e8 <Xil_Assert>
 1006290:	e30a3480 	movw	r3, #42112	; 0xa480
 1006294:	e3a02001 	mov	r2, #1
 1006298:	e340310a 	movt	r3, #266	; 0x10a
 100629c:	e1a00006 	mov	r0, r6
 10062a0:	e5832000 	str	r2, [r3]
 10062a4:	eaffffe1 	b	1006230 <XGpioPs_ReadPin+0x6c>

010062a8 <XGpioPs_WritePin>:
{
 10062a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10062ac:	e2505000 	subs	r5, r0, #0
{
 10062b0:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 10062b4:	0a000032 	beq	1006384 <XGpioPs_WritePin+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062b8:	e5953008 	ldr	r3, [r5, #8]
 10062bc:	e1a07002 	mov	r7, r2
 10062c0:	e3012111 	movw	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10062c4:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062c8:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10062cc:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062d0:	e1530002 	cmp	r3, r2
	Xil_AssertVoid(InstancePtr != NULL);
 10062d4:	e3a06000 	mov	r6, #0
 10062d8:	e5846000 	str	r6, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10062dc:	1a000020 	bne	1006364 <XGpioPs_WritePin+0xbc>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10062e0:	e5953018 	ldr	r3, [r5, #24]
 10062e4:	e1530001 	cmp	r3, r1
 10062e8:	9a000015 	bls	1006344 <XGpioPs_WritePin+0x9c>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10062ec:	e6ef0071 	uxtb	r0, r1
 10062f0:	e28d2007 	add	r2, sp, #7
 10062f4:	e28d1006 	add	r1, sp, #6
 10062f8:	ebffff62 	bl	1006088 <XGpioPs_GetBankPin>
	if (PinNumber > 15U) {
 10062fc:	e5dd3007 	ldrb	r3, [sp, #7]
 1006300:	e353000f 	cmp	r3, #15
		PinNumber -= (u8)16;
 1006304:	82433010 	subhi	r3, r3, #16
		RegOffset = XGPIOPS_DATA_MSW_OFFSET;
 1006308:	83a06004 	movhi	r6, #4
		PinNumber -= (u8)16;
 100630c:	86ef3073 	uxtbhi	r3, r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006310:	e5952004 	ldr	r2, [r5, #4]
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1006314:	e3a01000 	mov	r1, #0
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006318:	e5dd0006 	ldrb	r0, [sp, #6]
	DataVar &= (u32)0x01;
 100631c:	e2077001 	and	r7, r7, #1
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1006320:	e34f1fff 	movt	r1, #65535	; 0xffff
 1006324:	e3a0c001 	mov	ip, #1
 1006328:	e1811317 	orr	r1, r1, r7, lsl r3
 100632c:	e2833010 	add	r3, r3, #16
 1006330:	e1c1331c 	bic	r3, r1, ip, lsl r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006334:	e0822180 	add	r2, r2, r0, lsl #3
	*LocalAddr = Value;
 1006338:	e7823006 	str	r3, [r2, r6]
}
 100633c:	e28dd00c 	add	sp, sp, #12
 1006340:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006344:	e3080010 	movw	r0, #32784	; 0x8010
 1006348:	e3001151 	movw	r1, #337	; 0x151
 100634c:	e3400105 	movt	r0, #261	; 0x105
 1006350:	eb000864 	bl	10084e8 <Xil_Assert>
 1006354:	e3a03001 	mov	r3, #1
 1006358:	e5843000 	str	r3, [r4]
}
 100635c:	e28dd00c 	add	sp, sp, #12
 1006360:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006364:	e3080010 	movw	r0, #32784	; 0x8010
 1006368:	e3a01e15 	mov	r1, #336	; 0x150
 100636c:	e3400105 	movt	r0, #261	; 0x105
 1006370:	eb00085c 	bl	10084e8 <Xil_Assert>
 1006374:	e3a03001 	mov	r3, #1
 1006378:	e5843000 	str	r3, [r4]
}
 100637c:	e28dd00c 	add	sp, sp, #12
 1006380:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006384:	e3080010 	movw	r0, #32784	; 0x8010
 1006388:	e300114f 	movw	r1, #335	; 0x14f
 100638c:	e3400105 	movt	r0, #261	; 0x105
 1006390:	eb000854 	bl	10084e8 <Xil_Assert>
 1006394:	e30a3480 	movw	r3, #42112	; 0xa480
 1006398:	e3a02001 	mov	r2, #1
 100639c:	e340310a 	movt	r3, #266	; 0x10a
 10063a0:	e5832000 	str	r2, [r3]
 10063a4:	eaffffec 	b	100635c <XGpioPs_WritePin+0xb4>

010063a8 <XGpioPs_SetDirectionPin>:
{
 10063a8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10063ac:	e2505000 	subs	r5, r0, #0
{
 10063b0:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 10063b4:	0a00003b 	beq	10064a8 <XGpioPs_SetDirectionPin+0x100>
 10063b8:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063bc:	e5952008 	ldr	r2, [r5, #8]
 10063c0:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10063c4:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063c8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10063cc:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063d0:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10063d4:	e3a03000 	mov	r3, #0
 10063d8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10063dc:	1a000015 	bne	1006438 <XGpioPs_SetDirectionPin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10063e0:	e5953018 	ldr	r3, [r5, #24]
 10063e4:	e1530001 	cmp	r3, r1
 10063e8:	9a000026 	bls	1006488 <XGpioPs_SetDirectionPin+0xe0>
	Xil_AssertVoid(Direction <= (u32)1);
 10063ec:	e3560001 	cmp	r6, #1
 10063f0:	8a000018 	bhi	1006458 <XGpioPs_SetDirectionPin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10063f4:	e6ef0071 	uxtb	r0, r1
 10063f8:	e28d2007 	add	r2, sp, #7
 10063fc:	e28d1006 	add	r1, sp, #6
 1006400:	ebffff20 	bl	1006088 <XGpioPs_GetBankPin>
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006404:	e5dd2006 	ldrb	r2, [sp, #6]
 1006408:	e3a03f81 	mov	r3, #516	; 0x204
 100640c:	e5951004 	ldr	r1, [r5, #4]
	if (Direction!=(u32)0) { /*  Output Direction */
 1006410:	e3560000 	cmp	r6, #0
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006414:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1006418:	e7932001 	ldr	r2, [r3, r1]
	if (Direction!=(u32)0) { /*  Output Direction */
 100641c:	1a000015 	bne	1006478 <XGpioPs_SetDirectionPin+0xd0>
		DirModeReg &= ~ ((u32)1 << (u32)PinNumber);
 1006420:	e5dd0007 	ldrb	r0, [sp, #7]
 1006424:	e3a0c001 	mov	ip, #1
 1006428:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 100642c:	e7832001 	str	r2, [r3, r1]
}
 1006430:	e28dd008 	add	sp, sp, #8
 1006434:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006438:	e3080010 	movw	r0, #32784	; 0x8010
 100643c:	e30011aa 	movw	r1, #426	; 0x1aa
 1006440:	e3400105 	movt	r0, #261	; 0x105
 1006444:	eb000827 	bl	10084e8 <Xil_Assert>
 1006448:	e3a03001 	mov	r3, #1
 100644c:	e5843000 	str	r3, [r4]
}
 1006450:	e28dd008 	add	sp, sp, #8
 1006454:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Direction <= (u32)1);
 1006458:	e3080010 	movw	r0, #32784	; 0x8010
 100645c:	e3a01f6b 	mov	r1, #428	; 0x1ac
 1006460:	e3400105 	movt	r0, #261	; 0x105
 1006464:	eb00081f 	bl	10084e8 <Xil_Assert>
 1006468:	e3a03001 	mov	r3, #1
 100646c:	e5843000 	str	r3, [r4]
}
 1006470:	e28dd008 	add	sp, sp, #8
 1006474:	e8bd8070 	pop	{r4, r5, r6, pc}
		DirModeReg |= ((u32)1 << (u32)PinNumber);
 1006478:	e5dd0007 	ldrb	r0, [sp, #7]
 100647c:	e3a0c001 	mov	ip, #1
 1006480:	e182201c 	orr	r2, r2, ip, lsl r0
 1006484:	eaffffe8 	b	100642c <XGpioPs_SetDirectionPin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006488:	e3080010 	movw	r0, #32784	; 0x8010
 100648c:	e30011ab 	movw	r1, #427	; 0x1ab
 1006490:	e3400105 	movt	r0, #261	; 0x105
 1006494:	eb000813 	bl	10084e8 <Xil_Assert>
 1006498:	e3a03001 	mov	r3, #1
 100649c:	e5843000 	str	r3, [r4]
}
 10064a0:	e28dd008 	add	sp, sp, #8
 10064a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10064a8:	e3080010 	movw	r0, #32784	; 0x8010
 10064ac:	e30011a9 	movw	r1, #425	; 0x1a9
 10064b0:	e3400105 	movt	r0, #261	; 0x105
 10064b4:	eb00080b 	bl	10084e8 <Xil_Assert>
 10064b8:	e30a3480 	movw	r3, #42112	; 0xa480
 10064bc:	e3a02001 	mov	r2, #1
 10064c0:	e340310a 	movt	r3, #266	; 0x10a
 10064c4:	e5832000 	str	r2, [r3]
 10064c8:	eaffffe0 	b	1006450 <XGpioPs_SetDirectionPin+0xa8>

010064cc <XGpioPs_GetDirectionPin>:
{
 10064cc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10064d0:	e2506000 	subs	r6, r0, #0
{
 10064d4:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10064d8:	0a00002b 	beq	100658c <XGpioPs_GetDirectionPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10064dc:	e5962008 	ldr	r2, [r6, #8]
 10064e0:	e3013111 	movw	r3, #4369	; 0x1111
 10064e4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10064e8:	e30a5480 	movw	r5, #42112	; 0xa480
 10064ec:	e340510a 	movt	r5, #266	; 0x10a
 10064f0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10064f4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10064f8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10064fc:	1a000019 	bne	1006568 <XGpioPs_GetDirectionPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006500:	e5963018 	ldr	r3, [r6, #24]
 1006504:	e1530001 	cmp	r3, r1
 1006508:	9a00000d 	bls	1006544 <XGpioPs_GetDirectionPin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 100650c:	e6ef0071 	uxtb	r0, r1
 1006510:	e28d2007 	add	r2, sp, #7
 1006514:	e28d1006 	add	r1, sp, #6
 1006518:	ebfffeda 	bl	1006088 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100651c:	e5dd1006 	ldrb	r1, [sp, #6]
 1006520:	e3a03f81 	mov	r3, #516	; 0x204
 1006524:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006528:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100652c:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1006530:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006534:	e1a04430 	lsr	r4, r0, r4
 1006538:	e2040001 	and	r0, r4, #1
}
 100653c:	e28dd008 	add	sp, sp, #8
 1006540:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006544:	e3080010 	movw	r0, #32784	; 0x8010
 1006548:	e3a01f7f 	mov	r1, #508	; 0x1fc
 100654c:	e3400105 	movt	r0, #261	; 0x105
 1006550:	eb0007e4 	bl	10084e8 <Xil_Assert>
 1006554:	e3a03001 	mov	r3, #1
 1006558:	e1a00004 	mov	r0, r4
 100655c:	e5853000 	str	r3, [r5]
}
 1006560:	e28dd008 	add	sp, sp, #8
 1006564:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006568:	e3080010 	movw	r0, #32784	; 0x8010
 100656c:	e30011fb 	movw	r1, #507	; 0x1fb
 1006570:	e3400105 	movt	r0, #261	; 0x105
 1006574:	eb0007db 	bl	10084e8 <Xil_Assert>
 1006578:	e3a03001 	mov	r3, #1
 100657c:	e1a00004 	mov	r0, r4
 1006580:	e5853000 	str	r3, [r5]
}
 1006584:	e28dd008 	add	sp, sp, #8
 1006588:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 100658c:	e3080010 	movw	r0, #32784	; 0x8010
 1006590:	e30011fa 	movw	r1, #506	; 0x1fa
 1006594:	e3400105 	movt	r0, #261	; 0x105
 1006598:	eb0007d2 	bl	10084e8 <Xil_Assert>
 100659c:	e30a3480 	movw	r3, #42112	; 0xa480
 10065a0:	e3a02001 	mov	r2, #1
 10065a4:	e340310a 	movt	r3, #266	; 0x10a
 10065a8:	e1a00006 	mov	r0, r6
 10065ac:	e5832000 	str	r2, [r3]
 10065b0:	eaffffe1 	b	100653c <XGpioPs_GetDirectionPin+0x70>

010065b4 <XGpioPs_SetOutputEnablePin>:
{
 10065b4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10065b8:	e2505000 	subs	r5, r0, #0
{
 10065bc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 10065c0:	0a00003b 	beq	10066b4 <XGpioPs_SetOutputEnablePin+0x100>
 10065c4:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10065c8:	e5952008 	ldr	r2, [r5, #8]
 10065cc:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10065d0:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10065d4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10065d8:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10065dc:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10065e0:	e3a03000 	mov	r3, #0
 10065e4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10065e8:	1a000015 	bne	1006644 <XGpioPs_SetOutputEnablePin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10065ec:	e5953018 	ldr	r3, [r5, #24]
 10065f0:	e1530001 	cmp	r3, r1
 10065f4:	9a000026 	bls	1006694 <XGpioPs_SetOutputEnablePin+0xe0>
	Xil_AssertVoid(OpEnable <= (u32)1);
 10065f8:	e3560001 	cmp	r6, #1
 10065fc:	8a000018 	bhi	1006664 <XGpioPs_SetOutputEnablePin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006600:	e6ef0071 	uxtb	r0, r1
 1006604:	e28d2007 	add	r2, sp, #7
 1006608:	e28d1006 	add	r1, sp, #6
 100660c:	ebfffe9d 	bl	1006088 <XGpioPs_GetBankPin>
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006610:	e5dd2006 	ldrb	r2, [sp, #6]
 1006614:	e3a03f82 	mov	r3, #520	; 0x208
 1006618:	e5951004 	ldr	r1, [r5, #4]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 100661c:	e3560000 	cmp	r6, #0
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006620:	e0833302 	add	r3, r3, r2, lsl #6
 1006624:	e7932001 	ldr	r2, [r3, r1]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1006628:	1a000015 	bne	1006684 <XGpioPs_SetOutputEnablePin+0xd0>
		OpEnableReg &= ~ ((u32)1 << (u32)PinNumber);
 100662c:	e5dd0007 	ldrb	r0, [sp, #7]
 1006630:	e3a0c001 	mov	ip, #1
 1006634:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1006638:	e7832001 	str	r2, [r3, r1]
}
 100663c:	e28dd008 	add	sp, sp, #8
 1006640:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006644:	e3080010 	movw	r0, #32784	; 0x8010
 1006648:	e3a01f92 	mov	r1, #584	; 0x248
 100664c:	e3400105 	movt	r0, #261	; 0x105
 1006650:	eb0007a4 	bl	10084e8 <Xil_Assert>
 1006654:	e3a03001 	mov	r3, #1
 1006658:	e5843000 	str	r3, [r4]
}
 100665c:	e28dd008 	add	sp, sp, #8
 1006660:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(OpEnable <= (u32)1);
 1006664:	e3080010 	movw	r0, #32784	; 0x8010
 1006668:	e300124a 	movw	r1, #586	; 0x24a
 100666c:	e3400105 	movt	r0, #261	; 0x105
 1006670:	eb00079c 	bl	10084e8 <Xil_Assert>
 1006674:	e3a03001 	mov	r3, #1
 1006678:	e5843000 	str	r3, [r4]
}
 100667c:	e28dd008 	add	sp, sp, #8
 1006680:	e8bd8070 	pop	{r4, r5, r6, pc}
		OpEnableReg |= ((u32)1 << (u32)PinNumber);
 1006684:	e5dd0007 	ldrb	r0, [sp, #7]
 1006688:	e3a0c001 	mov	ip, #1
 100668c:	e182201c 	orr	r2, r2, ip, lsl r0
 1006690:	eaffffe8 	b	1006638 <XGpioPs_SetOutputEnablePin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006694:	e3080010 	movw	r0, #32784	; 0x8010
 1006698:	e3001249 	movw	r1, #585	; 0x249
 100669c:	e3400105 	movt	r0, #261	; 0x105
 10066a0:	eb000790 	bl	10084e8 <Xil_Assert>
 10066a4:	e3a03001 	mov	r3, #1
 10066a8:	e5843000 	str	r3, [r4]
}
 10066ac:	e28dd008 	add	sp, sp, #8
 10066b0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10066b4:	e3080010 	movw	r0, #32784	; 0x8010
 10066b8:	e3001247 	movw	r1, #583	; 0x247
 10066bc:	e3400105 	movt	r0, #261	; 0x105
 10066c0:	eb000788 	bl	10084e8 <Xil_Assert>
 10066c4:	e30a3480 	movw	r3, #42112	; 0xa480
 10066c8:	e3a02001 	mov	r2, #1
 10066cc:	e340310a 	movt	r3, #266	; 0x10a
 10066d0:	e5832000 	str	r2, [r3]
 10066d4:	eaffffe0 	b	100665c <XGpioPs_SetOutputEnablePin+0xa8>

010066d8 <XGpioPs_GetOutputEnablePin>:
{
 10066d8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10066dc:	e2506000 	subs	r6, r0, #0
{
 10066e0:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 10066e4:	0a00002b 	beq	1006798 <XGpioPs_GetOutputEnablePin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10066e8:	e5962008 	ldr	r2, [r6, #8]
 10066ec:	e3013111 	movw	r3, #4369	; 0x1111
 10066f0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10066f4:	e30a5480 	movw	r5, #42112	; 0xa480
 10066f8:	e340510a 	movt	r5, #266	; 0x10a
 10066fc:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006700:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006704:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006708:	1a000019 	bne	1006774 <XGpioPs_GetOutputEnablePin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 100670c:	e5963018 	ldr	r3, [r6, #24]
 1006710:	e1530001 	cmp	r3, r1
 1006714:	9a00000d 	bls	1006750 <XGpioPs_GetOutputEnablePin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006718:	e6ef0071 	uxtb	r0, r1
 100671c:	e28d2007 	add	r2, sp, #7
 1006720:	e28d1006 	add	r1, sp, #6
 1006724:	ebfffe57 	bl	1006088 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006728:	e5dd1006 	ldrb	r1, [sp, #6]
 100672c:	e3a03f82 	mov	r3, #520	; 0x208
 1006730:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006734:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006738:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 100673c:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006740:	e1a04430 	lsr	r4, r0, r4
 1006744:	e2040001 	and	r0, r4, #1
}
 1006748:	e28dd008 	add	sp, sp, #8
 100674c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006750:	e3080010 	movw	r0, #32784	; 0x8010
 1006754:	e300129b 	movw	r1, #667	; 0x29b
 1006758:	e3400105 	movt	r0, #261	; 0x105
 100675c:	eb000761 	bl	10084e8 <Xil_Assert>
 1006760:	e3a03001 	mov	r3, #1
 1006764:	e1a00004 	mov	r0, r4
 1006768:	e5853000 	str	r3, [r5]
}
 100676c:	e28dd008 	add	sp, sp, #8
 1006770:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006774:	e3080010 	movw	r0, #32784	; 0x8010
 1006778:	e300129a 	movw	r1, #666	; 0x29a
 100677c:	e3400105 	movt	r0, #261	; 0x105
 1006780:	eb000758 	bl	10084e8 <Xil_Assert>
 1006784:	e3a03001 	mov	r3, #1
 1006788:	e1a00004 	mov	r0, r4
 100678c:	e5853000 	str	r3, [r5]
}
 1006790:	e28dd008 	add	sp, sp, #8
 1006794:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006798:	e3080010 	movw	r0, #32784	; 0x8010
 100679c:	e3001299 	movw	r1, #665	; 0x299
 10067a0:	e3400105 	movt	r0, #261	; 0x105
 10067a4:	eb00074f 	bl	10084e8 <Xil_Assert>
 10067a8:	e30a3480 	movw	r3, #42112	; 0xa480
 10067ac:	e3a02001 	mov	r2, #1
 10067b0:	e340310a 	movt	r3, #266	; 0x10a
 10067b4:	e1a00006 	mov	r0, r6
 10067b8:	e5832000 	str	r2, [r3]
 10067bc:	eaffffe1 	b	1006748 <XGpioPs_GetOutputEnablePin+0x70>

010067c0 <XGpioPs_LookupConfig>:
{
	XGpioPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XGPIOPS_NUM_INSTANCES; Index++) {
		if (XGpioPs_ConfigTable[Index].DeviceId == DeviceId) {
 10067c0:	e30833ac 	movw	r3, #33708	; 0x83ac
 10067c4:	e3403105 	movt	r3, #261	; 0x105
 10067c8:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XGpioPs_Config *)CfgPtr;
}
 10067cc:	e1520000 	cmp	r2, r0
 10067d0:	01a00003 	moveq	r0, r3
 10067d4:	13a00000 	movne	r0, #0
 10067d8:	e12fff1e 	bx	lr

010067dc <XGpioPs_IntrEnable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 10067dc:	e3500000 	cmp	r0, #0
{
 10067e0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10067e4:	0a00001e 	beq	1006864 <XGpioPs_IntrEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10067e8:	e590c008 	ldr	ip, [r0, #8]
 10067ec:	e3013111 	movw	r3, #4369	; 0x1111
 10067f0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10067f4:	e30a4480 	movw	r4, #42112	; 0xa480
 10067f8:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10067fc:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006800:	e3a03000 	mov	r3, #0
 1006804:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006808:	1a000007 	bne	100682c <XGpioPs_IntrEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 100680c:	e5d0301c 	ldrb	r3, [r0, #28]
 1006810:	e1530001 	cmp	r3, r1
 1006814:	9a00000b 	bls	1006848 <XGpioPs_IntrEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006818:	e5900004 	ldr	r0, [r0, #4]
 100681c:	e3a03e21 	mov	r3, #528	; 0x210
 1006820:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1006824:	e7812000 	str	r2, [r1, r0]
 1006828:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100682c:	e308001c 	movw	r0, #32796	; 0x801c
 1006830:	e3a01063 	mov	r1, #99	; 0x63
 1006834:	e3400105 	movt	r0, #261	; 0x105
 1006838:	eb00072a 	bl	10084e8 <Xil_Assert>
 100683c:	e3a03001 	mov	r3, #1
 1006840:	e5843000 	str	r3, [r4]
 1006844:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006848:	e308001c 	movw	r0, #32796	; 0x801c
 100684c:	e3a01064 	mov	r1, #100	; 0x64
 1006850:	e3400105 	movt	r0, #261	; 0x105
 1006854:	eb000723 	bl	10084e8 <Xil_Assert>
 1006858:	e3a03001 	mov	r3, #1
 100685c:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, Mask);
}
 1006860:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006864:	e308001c 	movw	r0, #32796	; 0x801c
 1006868:	e3a01062 	mov	r1, #98	; 0x62
 100686c:	e3400105 	movt	r0, #261	; 0x105
 1006870:	eb00071c 	bl	10084e8 <Xil_Assert>
 1006874:	e30a3480 	movw	r3, #42112	; 0xa480
 1006878:	e3a02001 	mov	r2, #1
 100687c:	e340310a 	movt	r3, #266	; 0x10a
 1006880:	e5832000 	str	r2, [r3]
 1006884:	e8bd8010 	pop	{r4, pc}

01006888 <XGpioPs_IntrEnablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006888:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 100688c:	e2505000 	subs	r5, r0, #0
{
 1006890:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1006894:	0a000029 	beq	1006940 <XGpioPs_IntrEnablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006898:	e5950008 	ldr	r0, [r5, #8]
 100689c:	e3013111 	movw	r3, #4369	; 0x1111
 10068a0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10068a4:	e30a4480 	movw	r4, #42112	; 0xa480
 10068a8:	e340410a 	movt	r4, #266	; 0x10a
 10068ac:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10068b0:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10068b4:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10068b8:	1a000018 	bne	1006920 <XGpioPs_IntrEnablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10068bc:	e5953018 	ldr	r3, [r5, #24]
 10068c0:	e1530001 	cmp	r3, r1
 10068c4:	9a00000d 	bls	1006900 <XGpioPs_IntrEnablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10068c8:	e6ef0071 	uxtb	r0, r1
 10068cc:	e28d2007 	add	r2, sp, #7
 10068d0:	e28d1006 	add	r1, sp, #6
 10068d4:	ebfffdeb 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 10068d8:	e5ddc007 	ldrb	ip, [sp, #7]
 10068dc:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10068e0:	e5dd0006 	ldrb	r0, [sp, #6]
 10068e4:	e3a03e21 	mov	r3, #528	; 0x210
 10068e8:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 10068ec:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10068f0:	e0833300 	add	r3, r3, r0, lsl #6
 10068f4:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, IntrReg);
}
 10068f8:	e28dd00c 	add	sp, sp, #12
 10068fc:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006900:	e308001c 	movw	r0, #32796	; 0x801c
 1006904:	e3a01088 	mov	r1, #136	; 0x88
 1006908:	e3400105 	movt	r0, #261	; 0x105
 100690c:	eb0006f5 	bl	10084e8 <Xil_Assert>
 1006910:	e3a03001 	mov	r3, #1
 1006914:	e5843000 	str	r3, [r4]
}
 1006918:	e28dd00c 	add	sp, sp, #12
 100691c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006920:	e308001c 	movw	r0, #32796	; 0x801c
 1006924:	e3a01087 	mov	r1, #135	; 0x87
 1006928:	e3400105 	movt	r0, #261	; 0x105
 100692c:	eb0006ed 	bl	10084e8 <Xil_Assert>
 1006930:	e3a03001 	mov	r3, #1
 1006934:	e5843000 	str	r3, [r4]
}
 1006938:	e28dd00c 	add	sp, sp, #12
 100693c:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006940:	e308001c 	movw	r0, #32796	; 0x801c
 1006944:	e3a01086 	mov	r1, #134	; 0x86
 1006948:	e3400105 	movt	r0, #261	; 0x105
 100694c:	eb0006e5 	bl	10084e8 <Xil_Assert>
 1006950:	e30a3480 	movw	r3, #42112	; 0xa480
 1006954:	e3a02001 	mov	r2, #1
 1006958:	e340310a 	movt	r3, #266	; 0x10a
 100695c:	e5832000 	str	r2, [r3]
 1006960:	eaffffe4 	b	10068f8 <XGpioPs_IntrEnablePin+0x70>

01006964 <XGpioPs_IntrDisable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006964:	e3500000 	cmp	r0, #0
{
 1006968:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100696c:	0a00001e 	beq	10069ec <XGpioPs_IntrDisable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006970:	e590c008 	ldr	ip, [r0, #8]
 1006974:	e3013111 	movw	r3, #4369	; 0x1111
 1006978:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100697c:	e30a4480 	movw	r4, #42112	; 0xa480
 1006980:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006984:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006988:	e3a03000 	mov	r3, #0
 100698c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006990:	1a000007 	bne	10069b4 <XGpioPs_IntrDisable+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006994:	e5d0301c 	ldrb	r3, [r0, #28]
 1006998:	e1530001 	cmp	r3, r1
 100699c:	9a00000b 	bls	10069d0 <XGpioPs_IntrDisable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10069a0:	e5900004 	ldr	r0, [r0, #4]
 10069a4:	e3a03f85 	mov	r3, #532	; 0x214
 10069a8:	e0831301 	add	r1, r3, r1, lsl #6
 10069ac:	e7812000 	str	r2, [r1, r0]
 10069b0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10069b4:	e308001c 	movw	r0, #32796	; 0x801c
 10069b8:	e3a010ac 	mov	r1, #172	; 0xac
 10069bc:	e3400105 	movt	r0, #261	; 0x105
 10069c0:	eb0006c8 	bl	10084e8 <Xil_Assert>
 10069c4:	e3a03001 	mov	r3, #1
 10069c8:	e5843000 	str	r3, [r4]
 10069cc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10069d0:	e308001c 	movw	r0, #32796	; 0x801c
 10069d4:	e3a010ad 	mov	r1, #173	; 0xad
 10069d8:	e3400105 	movt	r0, #261	; 0x105
 10069dc:	eb0006c1 	bl	10084e8 <Xil_Assert>
 10069e0:	e3a03001 	mov	r3, #1
 10069e4:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, Mask);
}
 10069e8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10069ec:	e308001c 	movw	r0, #32796	; 0x801c
 10069f0:	e3a010ab 	mov	r1, #171	; 0xab
 10069f4:	e3400105 	movt	r0, #261	; 0x105
 10069f8:	eb0006ba 	bl	10084e8 <Xil_Assert>
 10069fc:	e30a3480 	movw	r3, #42112	; 0xa480
 1006a00:	e3a02001 	mov	r2, #1
 1006a04:	e340310a 	movt	r3, #266	; 0x10a
 1006a08:	e5832000 	str	r2, [r3]
 1006a0c:	e8bd8010 	pop	{r4, pc}

01006a10 <XGpioPs_IntrDisablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006a10:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1006a14:	e2505000 	subs	r5, r0, #0
{
 1006a18:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1006a1c:	0a000029 	beq	1006ac8 <XGpioPs_IntrDisablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a20:	e5950008 	ldr	r0, [r5, #8]
 1006a24:	e3013111 	movw	r3, #4369	; 0x1111
 1006a28:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006a2c:	e30a4480 	movw	r4, #42112	; 0xa480
 1006a30:	e340410a 	movt	r4, #266	; 0x10a
 1006a34:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a38:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006a3c:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a40:	1a000018 	bne	1006aa8 <XGpioPs_IntrDisablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006a44:	e5953018 	ldr	r3, [r5, #24]
 1006a48:	e1530001 	cmp	r3, r1
 1006a4c:	9a00000d 	bls	1006a88 <XGpioPs_IntrDisablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006a50:	e6ef0071 	uxtb	r0, r1
 1006a54:	e28d2007 	add	r2, sp, #7
 1006a58:	e28d1006 	add	r1, sp, #6
 1006a5c:	ebfffd89 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1006a60:	e5ddc007 	ldrb	ip, [sp, #7]
 1006a64:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006a68:	e5dd0006 	ldrb	r0, [sp, #6]
 1006a6c:	e3a03f85 	mov	r3, #532	; 0x214
 1006a70:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1006a74:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006a78:	e0833300 	add	r3, r3, r0, lsl #6
 1006a7c:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, IntrReg);
}
 1006a80:	e28dd00c 	add	sp, sp, #12
 1006a84:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006a88:	e308001c 	movw	r0, #32796	; 0x801c
 1006a8c:	e3a010d1 	mov	r1, #209	; 0xd1
 1006a90:	e3400105 	movt	r0, #261	; 0x105
 1006a94:	eb000693 	bl	10084e8 <Xil_Assert>
 1006a98:	e3a03001 	mov	r3, #1
 1006a9c:	e5843000 	str	r3, [r4]
}
 1006aa0:	e28dd00c 	add	sp, sp, #12
 1006aa4:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006aa8:	e308001c 	movw	r0, #32796	; 0x801c
 1006aac:	e3a010d0 	mov	r1, #208	; 0xd0
 1006ab0:	e3400105 	movt	r0, #261	; 0x105
 1006ab4:	eb00068b 	bl	10084e8 <Xil_Assert>
 1006ab8:	e3a03001 	mov	r3, #1
 1006abc:	e5843000 	str	r3, [r4]
}
 1006ac0:	e28dd00c 	add	sp, sp, #12
 1006ac4:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006ac8:	e308001c 	movw	r0, #32796	; 0x801c
 1006acc:	e3a010cf 	mov	r1, #207	; 0xcf
 1006ad0:	e3400105 	movt	r0, #261	; 0x105
 1006ad4:	eb000683 	bl	10084e8 <Xil_Assert>
 1006ad8:	e30a3480 	movw	r3, #42112	; 0xa480
 1006adc:	e3a02001 	mov	r2, #1
 1006ae0:	e340310a 	movt	r3, #266	; 0x10a
 1006ae4:	e5832000 	str	r2, [r3]
 1006ae8:	eaffffe4 	b	1006a80 <XGpioPs_IntrDisablePin+0x70>

01006aec <XGpioPs_IntrGetEnabled>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabled(const XGpioPs *InstancePtr, u8 Bank)
{
 1006aec:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrMask;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1006af0:	e2506000 	subs	r6, r0, #0
 1006af4:	0a000021 	beq	1006b80 <XGpioPs_IntrGetEnabled+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006af8:	e5962008 	ldr	r2, [r6, #8]
 1006afc:	e3013111 	movw	r3, #4369	; 0x1111
 1006b00:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006b04:	e30a5480 	movw	r5, #42112	; 0xa480
 1006b08:	e340510a 	movt	r5, #266	; 0x10a
 1006b0c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b10:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006b14:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b18:	1a000008 	bne	1006b40 <XGpioPs_IntrGetEnabled+0x54>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006b1c:	e5d6301c 	ldrb	r3, [r6, #28]
 1006b20:	e1530001 	cmp	r3, r1
 1006b24:	9a00000d 	bls	1006b60 <XGpioPs_IntrGetEnabled+0x74>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	IntrMask = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006b28:	e5962004 	ldr	r2, [r6, #4]
 1006b2c:	e3a03f83 	mov	r3, #524	; 0x20c
 1006b30:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1006b34:	e7914002 	ldr	r4, [r1, r2]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);
	return (~IntrMask);
 1006b38:	e1e00004 	mvn	r0, r4
 1006b3c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b40:	e308001c 	movw	r0, #32796	; 0x801c
 1006b44:	e3a010f6 	mov	r1, #246	; 0xf6
 1006b48:	e3400105 	movt	r0, #261	; 0x105
 1006b4c:	eb000665 	bl	10084e8 <Xil_Assert>
 1006b50:	e3a03001 	mov	r3, #1
 1006b54:	e1a00004 	mov	r0, r4
 1006b58:	e5853000 	str	r3, [r5]
 1006b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006b60:	e308001c 	movw	r0, #32796	; 0x801c
 1006b64:	e3a010f7 	mov	r1, #247	; 0xf7
 1006b68:	e3400105 	movt	r0, #261	; 0x105
 1006b6c:	eb00065d 	bl	10084e8 <Xil_Assert>
 1006b70:	e3a03001 	mov	r3, #1
 1006b74:	e1a00004 	mov	r0, r4
 1006b78:	e5853000 	str	r3, [r5]
}
 1006b7c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006b80:	e308001c 	movw	r0, #32796	; 0x801c
 1006b84:	e3a010f5 	mov	r1, #245	; 0xf5
 1006b88:	e3400105 	movt	r0, #261	; 0x105
 1006b8c:	eb000655 	bl	10084e8 <Xil_Assert>
 1006b90:	e30a3480 	movw	r3, #42112	; 0xa480
 1006b94:	e3a02001 	mov	r2, #1
 1006b98:	e340310a 	movt	r3, #266	; 0x10a
 1006b9c:	e1a00006 	mov	r0, r6
 1006ba0:	e5832000 	str	r2, [r3]
 1006ba4:	e8bd8070 	pop	{r4, r5, r6, pc}

01006ba8 <XGpioPs_IntrGetEnabledPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabledPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006ba8:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1006bac:	e2506000 	subs	r6, r0, #0
{
 1006bb0:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006bb4:	0a00002b 	beq	1006c68 <XGpioPs_IntrGetEnabledPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bb8:	e5962008 	ldr	r2, [r6, #8]
 1006bbc:	e3013111 	movw	r3, #4369	; 0x1111
 1006bc0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006bc4:	e30a5480 	movw	r5, #42112	; 0xa480
 1006bc8:	e340510a 	movt	r5, #266	; 0x10a
 1006bcc:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bd0:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006bd4:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bd8:	1a000019 	bne	1006c44 <XGpioPs_IntrGetEnabledPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006bdc:	e5963018 	ldr	r3, [r6, #24]
 1006be0:	e1530001 	cmp	r3, r1
 1006be4:	9a00000d 	bls	1006c20 <XGpioPs_IntrGetEnabledPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006be8:	e6ef0071 	uxtb	r0, r1
 1006bec:	e28d2007 	add	r2, sp, #7
 1006bf0:	e28d1006 	add	r1, sp, #6
 1006bf4:	ebfffd23 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006bf8:	e5dd1006 	ldrb	r1, [sp, #6]
 1006bfc:	e3a03f83 	mov	r3, #524	; 0x20c
 1006c00:	e5962004 	ldr	r2, [r6, #4]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1006c04:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006c08:	e0833301 	add	r3, r3, r1, lsl #6
 1006c0c:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1006c10:	e1e04430 	mvn	r4, r0, lsr r4
 1006c14:	e2040001 	and	r0, r4, #1
}
 1006c18:	e28dd008 	add	sp, sp, #8
 1006c1c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006c20:	e308001c 	movw	r0, #32796	; 0x801c
 1006c24:	e300111f 	movw	r1, #287	; 0x11f
 1006c28:	e3400105 	movt	r0, #261	; 0x105
 1006c2c:	eb00062d 	bl	10084e8 <Xil_Assert>
 1006c30:	e3a03001 	mov	r3, #1
 1006c34:	e1a00004 	mov	r0, r4
 1006c38:	e5853000 	str	r3, [r5]
}
 1006c3c:	e28dd008 	add	sp, sp, #8
 1006c40:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c44:	e308001c 	movw	r0, #32796	; 0x801c
 1006c48:	e300111e 	movw	r1, #286	; 0x11e
 1006c4c:	e3400105 	movt	r0, #261	; 0x105
 1006c50:	eb000624 	bl	10084e8 <Xil_Assert>
 1006c54:	e3a03001 	mov	r3, #1
 1006c58:	e1a00004 	mov	r0, r4
 1006c5c:	e5853000 	str	r3, [r5]
}
 1006c60:	e28dd008 	add	sp, sp, #8
 1006c64:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006c68:	e308001c 	movw	r0, #32796	; 0x801c
 1006c6c:	e300111d 	movw	r1, #285	; 0x11d
 1006c70:	e3400105 	movt	r0, #261	; 0x105
 1006c74:	eb00061b 	bl	10084e8 <Xil_Assert>
 1006c78:	e30a3480 	movw	r3, #42112	; 0xa480
 1006c7c:	e3a02001 	mov	r2, #1
 1006c80:	e340310a 	movt	r3, #266	; 0x10a
 1006c84:	e1a00006 	mov	r0, r6
 1006c88:	e5832000 	str	r2, [r3]
 1006c8c:	eaffffe1 	b	1006c18 <XGpioPs_IntrGetEnabledPin+0x70>

01006c90 <XGpioPs_IntrGetStatus>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatus(const XGpioPs *InstancePtr, u8 Bank)
{
 1006c90:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006c94:	e2506000 	subs	r6, r0, #0
 1006c98:	0a000020 	beq	1006d20 <XGpioPs_IntrGetStatus+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c9c:	e5962008 	ldr	r2, [r6, #8]
 1006ca0:	e3013111 	movw	r3, #4369	; 0x1111
 1006ca4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006ca8:	e30a5480 	movw	r5, #42112	; 0xa480
 1006cac:	e340510a 	movt	r5, #266	; 0x10a
 1006cb0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006cb4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006cb8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006cbc:	1a000007 	bne	1006ce0 <XGpioPs_IntrGetStatus+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006cc0:	e5d6301c 	ldrb	r3, [r6, #28]
 1006cc4:	e1530001 	cmp	r3, r1
 1006cc8:	9a00000c 	bls	1006d00 <XGpioPs_IntrGetStatus+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006ccc:	e5962004 	ldr	r2, [r6, #4]
 1006cd0:	e3a03f86 	mov	r3, #536	; 0x218
 1006cd4:	e0831301 	add	r1, r3, r1, lsl #6
 1006cd8:	e7910002 	ldr	r0, [r1, r2]
 1006cdc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006ce0:	e308001c 	movw	r0, #32796	; 0x801c
 1006ce4:	e3a01d05 	mov	r1, #320	; 0x140
 1006ce8:	e3400105 	movt	r0, #261	; 0x105
 1006cec:	eb0005fd 	bl	10084e8 <Xil_Assert>
 1006cf0:	e3a03001 	mov	r3, #1
 1006cf4:	e1a00004 	mov	r0, r4
 1006cf8:	e5853000 	str	r3, [r5]
 1006cfc:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006d00:	e308001c 	movw	r0, #32796	; 0x801c
 1006d04:	e3001141 	movw	r1, #321	; 0x141
 1006d08:	e3400105 	movt	r0, #261	; 0x105
 1006d0c:	eb0005f5 	bl	10084e8 <Xil_Assert>
 1006d10:	e3a03001 	mov	r3, #1
 1006d14:	e1a00004 	mov	r0, r4
 1006d18:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_INTSTS_OFFSET);
}
 1006d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d20:	e308001c 	movw	r0, #32796	; 0x801c
 1006d24:	e300113f 	movw	r1, #319	; 0x13f
 1006d28:	e3400105 	movt	r0, #261	; 0x105
 1006d2c:	eb0005ed 	bl	10084e8 <Xil_Assert>
 1006d30:	e30a3480 	movw	r3, #42112	; 0xa480
 1006d34:	e3a02001 	mov	r2, #1
 1006d38:	e340310a 	movt	r3, #266	; 0x10a
 1006d3c:	e1a00006 	mov	r0, r6
 1006d40:	e5832000 	str	r2, [r3]
 1006d44:	e8bd8070 	pop	{r4, r5, r6, pc}

01006d48 <XGpioPs_IntrGetStatusPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatusPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006d48:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d4c:	e2506000 	subs	r6, r0, #0
{
 1006d50:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d54:	0a00002b 	beq	1006e08 <XGpioPs_IntrGetStatusPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d58:	e5962008 	ldr	r2, [r6, #8]
 1006d5c:	e3013111 	movw	r3, #4369	; 0x1111
 1006d60:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d64:	e30a5480 	movw	r5, #42112	; 0xa480
 1006d68:	e340510a 	movt	r5, #266	; 0x10a
 1006d6c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d70:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d74:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d78:	1a000019 	bne	1006de4 <XGpioPs_IntrGetStatusPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006d7c:	e5963018 	ldr	r3, [r6, #24]
 1006d80:	e1530001 	cmp	r3, r1
 1006d84:	9a00000d 	bls	1006dc0 <XGpioPs_IntrGetStatusPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006d88:	e6ef0071 	uxtb	r0, r1
 1006d8c:	e28d2007 	add	r2, sp, #7
 1006d90:	e28d1006 	add	r1, sp, #6
 1006d94:	ebfffcbb 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006d98:	e5dd1006 	ldrb	r1, [sp, #6]
 1006d9c:	e3a03f86 	mov	r3, #536	; 0x218
 1006da0:	e5962004 	ldr	r2, [r6, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 1006da4:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006da8:	e0833301 	add	r3, r3, r1, lsl #6
 1006dac:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 1006db0:	e1a04430 	lsr	r4, r0, r4
 1006db4:	e2040001 	and	r0, r4, #1
}
 1006db8:	e28dd008 	add	sp, sp, #8
 1006dbc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006dc0:	e308001c 	movw	r0, #32796	; 0x801c
 1006dc4:	e3a01f5a 	mov	r1, #360	; 0x168
 1006dc8:	e3400105 	movt	r0, #261	; 0x105
 1006dcc:	eb0005c5 	bl	10084e8 <Xil_Assert>
 1006dd0:	e3a03001 	mov	r3, #1
 1006dd4:	e1a00004 	mov	r0, r4
 1006dd8:	e5853000 	str	r3, [r5]
}
 1006ddc:	e28dd008 	add	sp, sp, #8
 1006de0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006de4:	e308001c 	movw	r0, #32796	; 0x801c
 1006de8:	e3001167 	movw	r1, #359	; 0x167
 1006dec:	e3400105 	movt	r0, #261	; 0x105
 1006df0:	eb0005bc 	bl	10084e8 <Xil_Assert>
 1006df4:	e3a03001 	mov	r3, #1
 1006df8:	e1a00004 	mov	r0, r4
 1006dfc:	e5853000 	str	r3, [r5]
}
 1006e00:	e28dd008 	add	sp, sp, #8
 1006e04:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006e08:	e308001c 	movw	r0, #32796	; 0x801c
 1006e0c:	e3001166 	movw	r1, #358	; 0x166
 1006e10:	e3400105 	movt	r0, #261	; 0x105
 1006e14:	eb0005b3 	bl	10084e8 <Xil_Assert>
 1006e18:	e30a3480 	movw	r3, #42112	; 0xa480
 1006e1c:	e3a02001 	mov	r2, #1
 1006e20:	e340310a 	movt	r3, #266	; 0x10a
 1006e24:	e1a00006 	mov	r0, r6
 1006e28:	e5832000 	str	r2, [r3]
 1006e2c:	eaffffe1 	b	1006db8 <XGpioPs_IntrGetStatusPin+0x70>

01006e30 <XGpioPs_IntrClear>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClear(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006e30:	e3500000 	cmp	r0, #0
{
 1006e34:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006e38:	0a00001e 	beq	1006eb8 <XGpioPs_IntrClear+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006e3c:	e590c008 	ldr	ip, [r0, #8]
 1006e40:	e3013111 	movw	r3, #4369	; 0x1111
 1006e44:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006e48:	e30a4480 	movw	r4, #42112	; 0xa480
 1006e4c:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006e50:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006e54:	e3a03000 	mov	r3, #0
 1006e58:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006e5c:	1a000007 	bne	1006e80 <XGpioPs_IntrClear+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006e60:	e5d0301c 	ldrb	r3, [r0, #28]
 1006e64:	e1530001 	cmp	r3, r1
 1006e68:	9a00000b 	bls	1006e9c <XGpioPs_IntrClear+0x6c>
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	/* Clear the currently pending interrupts. */
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006e6c:	e5900004 	ldr	r0, [r0, #4]
 1006e70:	e3a03f86 	mov	r3, #536	; 0x218
 1006e74:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1006e78:	e7812000 	str	r2, [r1, r0]
 1006e7c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006e80:	e308001c 	movw	r0, #32796	; 0x801c
 1006e84:	e3a01f63 	mov	r1, #396	; 0x18c
 1006e88:	e3400105 	movt	r0, #261	; 0x105
 1006e8c:	eb000595 	bl	10084e8 <Xil_Assert>
 1006e90:	e3a03001 	mov	r3, #1
 1006e94:	e5843000 	str	r3, [r4]
 1006e98:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006e9c:	e308001c 	movw	r0, #32796	; 0x801c
 1006ea0:	e300118d 	movw	r1, #397	; 0x18d
 1006ea4:	e3400105 	movt	r0, #261	; 0x105
 1006ea8:	eb00058e 	bl	10084e8 <Xil_Assert>
 1006eac:	e3a03001 	mov	r3, #1
 1006eb0:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, Mask);
}
 1006eb4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006eb8:	e308001c 	movw	r0, #32796	; 0x801c
 1006ebc:	e300118b 	movw	r1, #395	; 0x18b
 1006ec0:	e3400105 	movt	r0, #261	; 0x105
 1006ec4:	eb000587 	bl	10084e8 <Xil_Assert>
 1006ec8:	e30a3480 	movw	r3, #42112	; 0xa480
 1006ecc:	e3a02001 	mov	r2, #1
 1006ed0:	e340310a 	movt	r3, #266	; 0x10a
 1006ed4:	e5832000 	str	r2, [r3]
 1006ed8:	e8bd8010 	pop	{r4, pc}

01006edc <XGpioPs_IntrClearPin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClearPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1006edc:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1006ee0:	e2505000 	subs	r5, r0, #0
{
 1006ee4:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1006ee8:	0a00002a 	beq	1006f98 <XGpioPs_IntrClearPin+0xbc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006eec:	e5950008 	ldr	r0, [r5, #8]
 1006ef0:	e3013111 	movw	r3, #4369	; 0x1111
 1006ef4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006ef8:	e30a4480 	movw	r4, #42112	; 0xa480
 1006efc:	e340410a 	movt	r4, #266	; 0x10a
 1006f00:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f04:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006f08:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f0c:	1a000019 	bne	1006f78 <XGpioPs_IntrClearPin+0x9c>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006f10:	e5953018 	ldr	r3, [r5, #24]
 1006f14:	e1530001 	cmp	r3, r1
 1006f18:	9a00000e 	bls	1006f58 <XGpioPs_IntrClearPin+0x7c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006f1c:	e6ef0071 	uxtb	r0, r1
 1006f20:	e28d2007 	add	r2, sp, #7
 1006f24:	e28d1006 	add	r1, sp, #6
 1006f28:	ebfffc56 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	/* Clear the specified pending interrupts. */
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006f2c:	e5dd2006 	ldrb	r2, [sp, #6]
 1006f30:	e3a03f86 	mov	r3, #536	; 0x218
 1006f34:	e5951004 	ldr	r1, [r5, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	IntrReg &= ((u32)1 << PinNumber);
 1006f38:	e3a0c001 	mov	ip, #1
 1006f3c:	e5dd0007 	ldrb	r0, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006f40:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1006f44:	e7932001 	ldr	r2, [r3, r1]
	IntrReg &= ((u32)1 << PinNumber);
 1006f48:	e002201c 	and	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1006f4c:	e7832001 	str	r2, [r3, r1]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, IntrReg);
}
 1006f50:	e28dd00c 	add	sp, sp, #12
 1006f54:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1006f58:	e308001c 	movw	r0, #32796	; 0x801c
 1006f5c:	e30011b1 	movw	r1, #433	; 0x1b1
 1006f60:	e3400105 	movt	r0, #261	; 0x105
 1006f64:	eb00055f 	bl	10084e8 <Xil_Assert>
 1006f68:	e3a03001 	mov	r3, #1
 1006f6c:	e5843000 	str	r3, [r4]
}
 1006f70:	e28dd00c 	add	sp, sp, #12
 1006f74:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f78:	e308001c 	movw	r0, #32796	; 0x801c
 1006f7c:	e3a01e1b 	mov	r1, #432	; 0x1b0
 1006f80:	e3400105 	movt	r0, #261	; 0x105
 1006f84:	eb000557 	bl	10084e8 <Xil_Assert>
 1006f88:	e3a03001 	mov	r3, #1
 1006f8c:	e5843000 	str	r3, [r4]
}
 1006f90:	e28dd00c 	add	sp, sp, #12
 1006f94:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006f98:	e308001c 	movw	r0, #32796	; 0x801c
 1006f9c:	e30011af 	movw	r1, #431	; 0x1af
 1006fa0:	e3400105 	movt	r0, #261	; 0x105
 1006fa4:	eb00054f 	bl	10084e8 <Xil_Assert>
 1006fa8:	e30a3480 	movw	r3, #42112	; 0xa480
 1006fac:	e3a02001 	mov	r2, #1
 1006fb0:	e340310a 	movt	r3, #266	; 0x10a
 1006fb4:	e5832000 	str	r2, [r3]
 1006fb8:	eaffffe4 	b	1006f50 <XGpioPs_IntrClearPin+0x74>

01006fbc <XGpioPs_SetIntrType>:
*
*****************************************************************************/
void XGpioPs_SetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 IntrType,
			  u32 IntrPolarity, u32 IntrOnAny)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006fbc:	e3500000 	cmp	r0, #0
{
 1006fc0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006fc4:	0a000025 	beq	1007060 <XGpioPs_SetIntrType+0xa4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006fc8:	e590e008 	ldr	lr, [r0, #8]
 1006fcc:	e301c111 	movw	ip, #4369	; 0x1111
 1006fd0:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006fd4:	e30a4480 	movw	r4, #42112	; 0xa480
 1006fd8:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006fdc:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1006fe0:	e3a0c000 	mov	ip, #0
 1006fe4:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006fe8:	1a00000e 	bne	1007028 <XGpioPs_SetIntrType+0x6c>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006fec:	e5d0c01c 	ldrb	ip, [r0, #28]
 1006ff0:	e15c0001 	cmp	ip, r1
 1006ff4:	9a000012 	bls	1007044 <XGpioPs_SetIntrType+0x88>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006ff8:	e1a01301 	lsl	r1, r1, #6
 1006ffc:	e590e004 	ldr	lr, [r0, #4]
 1007000:	e2814f87 	add	r4, r1, #540	; 0x21c
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTTYPE_OFFSET, IntrType);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007004:	e281ce22 	add	ip, r1, #544	; 0x220
 1007008:	e784200e 	str	r2, [r4, lr]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTPOL_OFFSET, IntrPolarity);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100700c:	e2811f89 	add	r1, r1, #548	; 0x224
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007010:	e5902004 	ldr	r2, [r0, #4]
 1007014:	e78c3002 	str	r3, [ip, r2]
 1007018:	e59d2008 	ldr	r2, [sp, #8]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100701c:	e5903004 	ldr	r3, [r0, #4]
 1007020:	e7812003 	str	r2, [r1, r3]
 1007024:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007028:	e308001c 	movw	r0, #32796	; 0x801c
 100702c:	e30011e5 	movw	r1, #485	; 0x1e5
 1007030:	e3400105 	movt	r0, #261	; 0x105
 1007034:	eb00052b 	bl	10084e8 <Xil_Assert>
 1007038:	e3a03001 	mov	r3, #1
 100703c:	e5843000 	str	r3, [r4]
 1007040:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007044:	e308001c 	movw	r0, #32796	; 0x801c
 1007048:	e30011e6 	movw	r1, #486	; 0x1e6
 100704c:	e3400105 	movt	r0, #261	; 0x105
 1007050:	eb000524 	bl	10084e8 <Xil_Assert>
 1007054:	e3a03001 	mov	r3, #1
 1007058:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAny);
}
 100705c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007060:	e308001c 	movw	r0, #32796	; 0x801c
 1007064:	e3a01f79 	mov	r1, #484	; 0x1e4
 1007068:	e3400105 	movt	r0, #261	; 0x105
 100706c:	eb00051d 	bl	10084e8 <Xil_Assert>
 1007070:	e30a3480 	movw	r3, #42112	; 0xa480
 1007074:	e3a02001 	mov	r2, #1
 1007078:	e340310a 	movt	r3, #266	; 0x10a
 100707c:	e5832000 	str	r2, [r3]
 1007080:	e8bd8010 	pop	{r4, pc}

01007084 <XGpioPs_GetIntrType>:
*****************************************************************************/
void XGpioPs_GetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 *IntrType,
			  u32 *IntrPolarity, u32 *IntrOnAny)

{
	Xil_AssertVoid(InstancePtr != NULL);
 1007084:	e3500000 	cmp	r0, #0
{
 1007088:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100708c:	0a000028 	beq	1007134 <XGpioPs_GetIntrType+0xb0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007090:	e590e008 	ldr	lr, [r0, #8]
 1007094:	e301c111 	movw	ip, #4369	; 0x1111
 1007098:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100709c:	e30a4480 	movw	r4, #42112	; 0xa480
 10070a0:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10070a4:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 10070a8:	e3a0c000 	mov	ip, #0
 10070ac:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10070b0:	1a000011 	bne	10070fc <XGpioPs_GetIntrType+0x78>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10070b4:	e5d0c01c 	ldrb	ip, [r0, #28]
 10070b8:	e15c0001 	cmp	ip, r1
 10070bc:	9a000015 	bls	1007118 <XGpioPs_GetIntrType+0x94>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10070c0:	e590e004 	ldr	lr, [r0, #4]
 10070c4:	e1a01301 	lsl	r1, r1, #6
 10070c8:	e2814f87 	add	r4, r1, #540	; 0x21c
				     ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				     XGPIOPS_INTTYPE_OFFSET);

	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10070cc:	e281ce22 	add	ip, r1, #544	; 0x220
	return *(volatile u32 *) Addr;
 10070d0:	e794e00e 	ldr	lr, [r4, lr]
					 ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					 XGPIOPS_INTPOL_OFFSET);

	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10070d4:	e2811f89 	add	r1, r1, #548	; 0x224
	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10070d8:	e582e000 	str	lr, [r2]
	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10070dc:	e5902004 	ldr	r2, [r0, #4]
 10070e0:	e79c2002 	ldr	r2, [ip, r2]
 10070e4:	e5832000 	str	r2, [r3]
	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10070e8:	e5903004 	ldr	r3, [r0, #4]
 10070ec:	e59d2008 	ldr	r2, [sp, #8]
 10070f0:	e7913003 	ldr	r3, [r1, r3]
 10070f4:	e5823000 	str	r3, [r2]
 10070f8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10070fc:	e308001c 	movw	r0, #32796	; 0x801c
 1007100:	e3001219 	movw	r1, #537	; 0x219
 1007104:	e3400105 	movt	r0, #261	; 0x105
 1007108:	eb0004f6 	bl	10084e8 <Xil_Assert>
 100710c:	e3a03001 	mov	r3, #1
 1007110:	e5843000 	str	r3, [r4]
 1007114:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007118:	e308001c 	movw	r0, #32796	; 0x801c
 100711c:	e300121a 	movw	r1, #538	; 0x21a
 1007120:	e3400105 	movt	r0, #261	; 0x105
 1007124:	eb0004ef 	bl	10084e8 <Xil_Assert>
 1007128:	e3a03001 	mov	r3, #1
 100712c:	e5843000 	str	r3, [r4]
				      ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				      XGPIOPS_INTANY_OFFSET);
}
 1007130:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007134:	e308001c 	movw	r0, #32796	; 0x801c
 1007138:	e3a01f86 	mov	r1, #536	; 0x218
 100713c:	e3400105 	movt	r0, #261	; 0x105
 1007140:	eb0004e8 	bl	10084e8 <Xil_Assert>
 1007144:	e30a3480 	movw	r3, #42112	; 0xa480
 1007148:	e3a02001 	mov	r2, #1
 100714c:	e340310a 	movt	r3, #266	; 0x10a
 1007150:	e5832000 	str	r2, [r3]
 1007154:	e8bd8010 	pop	{r4, pc}

01007158 <XGpioPs_SetIntrTypePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_SetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin, u8 IrqType)
{
 1007158:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrPolReg;
	u32 IntrOnAnyReg;
	u8 Bank;
	u8 PinNumber;

	Xil_AssertVoid(InstancePtr != NULL);
 100715c:	e2505000 	subs	r5, r0, #0
{
 1007160:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1007164:	0a000055 	beq	10072c0 <XGpioPs_SetIntrTypePin+0x168>
 1007168:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100716c:	e5952008 	ldr	r2, [r5, #8]
 1007170:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007174:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007178:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100717c:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007180:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007184:	e3a03000 	mov	r3, #0
 1007188:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100718c:	1a000019 	bne	10071f8 <XGpioPs_SetIntrTypePin+0xa0>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007190:	e5953018 	ldr	r3, [r5, #24]
 1007194:	e1530001 	cmp	r3, r1
 1007198:	9a00001e 	bls	1007218 <XGpioPs_SetIntrTypePin+0xc0>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 100719c:	e3560004 	cmp	r6, #4
 10071a0:	8a00003e 	bhi	10072a0 <XGpioPs_SetIntrTypePin+0x148>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 10071a4:	e6ef0071 	uxtb	r0, r1
 10071a8:	e28d2007 	add	r2, sp, #7
 10071ac:	e28d1006 	add	r1, sp, #6
 10071b0:	ebfffbb4 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10071b4:	e5dd3006 	ldrb	r3, [sp, #6]

	IntrOnAnyReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
					((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					XGPIOPS_INTANY_OFFSET);

	switch (IrqType) {
 10071b8:	e2466001 	sub	r6, r6, #1
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10071bc:	e5952004 	ldr	r2, [r5, #4]
		case XGPIOPS_IRQ_TYPE_LEVEL_HIGH:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
			break;
		case XGPIOPS_IRQ_TYPE_LEVEL_LOW:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 10071c0:	e3a0e001 	mov	lr, #1
 10071c4:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10071c8:	e1a03303 	lsl	r3, r3, #6
 10071cc:	e0832002 	add	r2, r3, r2
 10071d0:	e592121c 	ldr	r1, [r2, #540]	; 0x21c
 10071d4:	e5920220 	ldr	r0, [r2, #544]	; 0x220
 10071d8:	e592c224 	ldr	ip, [r2, #548]	; 0x224
	switch (IrqType) {
 10071dc:	e3560003 	cmp	r6, #3
 10071e0:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
 10071e4:	ea00003e 	b	10072e4 <XGpioPs_SetIntrTypePin+0x18c>
 10071e8:	01007278 	.word	0x01007278
 10071ec:	01007268 	.word	0x01007268
 10071f0:	01007238 	.word	0x01007238
 10071f4:	01007290 	.word	0x01007290
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10071f8:	e308001c 	movw	r0, #32796	; 0x801c
 10071fc:	e3001249 	movw	r1, #585	; 0x249
 1007200:	e3400105 	movt	r0, #261	; 0x105
 1007204:	eb0004b7 	bl	10084e8 <Xil_Assert>
 1007208:	e3a03001 	mov	r3, #1
 100720c:	e5843000 	str	r3, [r4]
			  XGPIOPS_INTPOL_OFFSET, IntrPolReg);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAnyReg);
}
 1007210:	e28dd008 	add	sp, sp, #8
 1007214:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007218:	e308001c 	movw	r0, #32796	; 0x801c
 100721c:	e300124a 	movw	r1, #586	; 0x24a
 1007220:	e3400105 	movt	r0, #261	; 0x105
 1007224:	eb0004af 	bl	10084e8 <Xil_Assert>
 1007228:	e3a03001 	mov	r3, #1
 100722c:	e5843000 	str	r3, [r4]
}
 1007230:	e28dd008 	add	sp, sp, #8
 1007234:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1007238:	e1a0e41e 	lsl	lr, lr, r4
 100723c:	e1c1100e 	bic	r1, r1, lr
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1007240:	e180000e 	orr	r0, r0, lr
	*LocalAddr = Value;
 1007244:	e582121c 	str	r1, [r2, #540]	; 0x21c
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007248:	e2831e22 	add	r1, r3, #544	; 0x220
 100724c:	e5952004 	ldr	r2, [r5, #4]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007250:	e2833f89 	add	r3, r3, #548	; 0x224
 1007254:	e7810002 	str	r0, [r1, r2]
 1007258:	e5952004 	ldr	r2, [r5, #4]
 100725c:	e783c002 	str	ip, [r3, r2]
}
 1007260:	e28dd008 	add	sp, sp, #8
 1007264:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1007268:	e1a0e41e 	lsl	lr, lr, r4
 100726c:	e18e1001 	orr	r1, lr, r1
			IntrOnAnyReg |= ((u32)1 << (u32)PinNumber);
 1007270:	e18cc00e 	orr	ip, ip, lr
			break;
 1007274:	eafffff2 	b	1007244 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1007278:	e1a0e41e 	lsl	lr, lr, r4
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 100727c:	e1e0400e 	mvn	r4, lr
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1007280:	e18e1001 	orr	r1, lr, r1
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1007284:	e0000004 	and	r0, r0, r4
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 1007288:	e00cc004 	and	ip, ip, r4
			break;
 100728c:	eaffffec 	b	1007244 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1007290:	e1e0e41e 	mvn	lr, lr, lsl r4
 1007294:	e001100e 	and	r1, r1, lr
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1007298:	e000000e 	and	r0, r0, lr
			break;
 100729c:	eaffffe8 	b	1007244 <XGpioPs_SetIntrTypePin+0xec>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 10072a0:	e308001c 	movw	r0, #32796	; 0x801c
 10072a4:	e300124b 	movw	r1, #587	; 0x24b
 10072a8:	e3400105 	movt	r0, #261	; 0x105
 10072ac:	eb00048d 	bl	10084e8 <Xil_Assert>
 10072b0:	e3a03001 	mov	r3, #1
 10072b4:	e5843000 	str	r3, [r4]
}
 10072b8:	e28dd008 	add	sp, sp, #8
 10072bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10072c0:	e308001c 	movw	r0, #32796	; 0x801c
 10072c4:	e3a01f92 	mov	r1, #584	; 0x248
 10072c8:	e3400105 	movt	r0, #261	; 0x105
 10072cc:	eb000485 	bl	10084e8 <Xil_Assert>
 10072d0:	e30a3480 	movw	r3, #42112	; 0xa480
 10072d4:	e3a02001 	mov	r2, #1
 10072d8:	e340310a 	movt	r3, #266	; 0x10a
 10072dc:	e5832000 	str	r2, [r3]
 10072e0:	eaffffca 	b	1007210 <XGpioPs_SetIntrTypePin+0xb8>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 10072e4:	e1a0e41e 	lsl	lr, lr, r4
 10072e8:	e18e1001 	orr	r1, lr, r1
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 10072ec:	e180000e 	orr	r0, r0, lr
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 10072f0:	e1ccc00e 	bic	ip, ip, lr
			break;
 10072f4:	eaffffd2 	b	1007244 <XGpioPs_SetIntrTypePin+0xec>

010072f8 <XGpioPs_GetIntrTypePin>:
* @note		Use XGPIOPS_IRQ_TYPE_* defined in xgpiops.h for the IRQ type
*		returned by this function.
*
*****************************************************************************/
u8 XGpioPs_GetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin)
{
 10072f8:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrOnAny;
	u8 Bank;
	u8 PinNumber;
	u8 IrqType;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10072fc:	e2506000 	subs	r6, r0, #0
{
 1007300:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007304:	0a000034 	beq	10073dc <XGpioPs_GetIntrTypePin+0xe4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007308:	e5962008 	ldr	r2, [r6, #8]
 100730c:	e3013111 	movw	r3, #4369	; 0x1111
 1007310:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007314:	e30a5480 	movw	r5, #42112	; 0xa480
 1007318:	e340510a 	movt	r5, #266	; 0x10a
 100731c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007320:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007324:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007328:	1a00001e 	bne	10073a8 <XGpioPs_GetIntrTypePin+0xb0>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 100732c:	e5963018 	ldr	r3, [r6, #24]
 1007330:	e1530001 	cmp	r3, r1
 1007334:	9a000012 	bls	1007384 <XGpioPs_GetIntrTypePin+0x8c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007338:	e6ef0071 	uxtb	r0, r1
 100733c:	e28d2007 	add	r2, sp, #7
 1007340:	e28d1006 	add	r1, sp, #6
 1007344:	ebfffb4f 	bl	1006088 <XGpioPs_GetBankPin>
#endif

	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007348:	e5dd2006 	ldrb	r2, [sp, #6]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 100734c:	e3a00001 	mov	r0, #1
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007350:	e5963004 	ldr	r3, [r6, #4]
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1007354:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007358:	e0833302 	add	r3, r3, r2, lsl #6
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 100735c:	e1a04410 	lsl	r4, r0, r4
	return *(volatile u32 *) Addr;
 1007360:	e593221c 	ldr	r2, [r3, #540]	; 0x21c

	if (IntrType == ((u32)1 << PinNumber)) {
 1007364:	e1d42002 	bics	r2, r4, r2
 1007368:	0a000011 	beq	10073b4 <XGpioPs_GetIntrTypePin+0xbc>
 100736c:	e5933220 	ldr	r3, [r3, #544]	; 0x220

		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTPOL_OFFSET) & ((u32)1 << PinNumber);

		if (IntrPol == ((u32)1 << PinNumber)) {
 1007370:	e1d43003 	bics	r3, r4, r3
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_HIGH;
		} else {
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_LOW;
 1007374:	03a00003 	moveq	r0, #3
 1007378:	13a00004 	movne	r0, #4
		}
	}

	return IrqType;
}
 100737c:	e28dd008 	add	sp, sp, #8
 1007380:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1007384:	e308001c 	movw	r0, #32796	; 0x801c
 1007388:	e30012a3 	movw	r1, #675	; 0x2a3
 100738c:	e3400105 	movt	r0, #261	; 0x105
 1007390:	eb000454 	bl	10084e8 <Xil_Assert>
 1007394:	e3a03001 	mov	r3, #1
 1007398:	e1a00004 	mov	r0, r4
 100739c:	e5853000 	str	r3, [r5]
}
 10073a0:	e28dd008 	add	sp, sp, #8
 10073a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10073a8:	e308001c 	movw	r0, #32796	; 0x801c
 10073ac:	e30012a2 	movw	r1, #674	; 0x2a2
 10073b0:	eafffff5 	b	100738c <XGpioPs_GetIntrTypePin+0x94>
 10073b4:	e5932224 	ldr	r2, [r3, #548]	; 0x224
 10073b8:	e5930220 	ldr	r0, [r3, #544]	; 0x220
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 10073bc:	e1d43002 	bics	r3, r4, r2
		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10073c0:	e0000004 	and	r0, r0, r4
			IrqType = XGPIOPS_IRQ_TYPE_EDGE_BOTH;
 10073c4:	03a00002 	moveq	r0, #2
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 10073c8:	0affffeb 	beq	100737c <XGpioPs_GetIntrTypePin+0x84>
	Xil_AssertNonvoid(InstancePtr != NULL);
 10073cc:	e0540000 	subs	r0, r4, r0
 10073d0:	13a00001 	movne	r0, #1
}
 10073d4:	e28dd008 	add	sp, sp, #8
 10073d8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10073dc:	e308001c 	movw	r0, #32796	; 0x801c
 10073e0:	e30012a1 	movw	r1, #673	; 0x2a1
 10073e4:	e3400105 	movt	r0, #261	; 0x105
 10073e8:	eb00043e 	bl	10084e8 <Xil_Assert>
 10073ec:	e30a3480 	movw	r3, #42112	; 0xa480
 10073f0:	e3a02001 	mov	r2, #1
 10073f4:	e340310a 	movt	r3, #266	; 0x10a
 10073f8:	e1a00006 	mov	r0, r6
 10073fc:	e5832000 	str	r2, [r3]
 1007400:	eaffffdd 	b	100737c <XGpioPs_GetIntrTypePin+0x84>

01007404 <XGpioPs_SetCallbackHandler>:
*
******************************************************************************/
void XGpioPs_SetCallbackHandler(XGpioPs *InstancePtr, void *CallBackRef,
				 XGpioPs_Handler FuncPointer)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1007404:	e3500000 	cmp	r0, #0
{
 1007408:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 100740c:	0a000014 	beq	1007464 <XGpioPs_SetCallbackHandler+0x60>
 1007410:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertVoid(FuncPointer != NULL);
 1007414:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1007418:	e340410a 	movt	r4, #266	; 0x10a
 100741c:	e3a03000 	mov	r3, #0
 1007420:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 1007424:	0a000017 	beq	1007488 <XGpioPs_SetCallbackHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007428:	e590c008 	ldr	ip, [r0, #8]
 100742c:	e3013111 	movw	r3, #4369	; 0x1111
 1007430:	e3413111 	movt	r3, #4369	; 0x1111
 1007434:	e15c0003 	cmp	ip, r3
 1007438:	1a000002 	bne	1007448 <XGpioPs_SetCallbackHandler+0x44>

	InstancePtr->Handler = FuncPointer;
 100743c:	e580200c 	str	r2, [r0, #12]
	InstancePtr->CallBackRef = CallBackRef;
 1007440:	e5801010 	str	r1, [r0, #16]
 1007444:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007448:	e308001c 	movw	r0, #32796	; 0x801c
 100744c:	e30012ea 	movw	r1, #746	; 0x2ea
 1007450:	e3400105 	movt	r0, #261	; 0x105
 1007454:	eb000423 	bl	10084e8 <Xil_Assert>
 1007458:	e3a03001 	mov	r3, #1
 100745c:	e5843000 	str	r3, [r4]
}
 1007460:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007464:	e308001c 	movw	r0, #32796	; 0x801c
 1007468:	e3a01fba 	mov	r1, #744	; 0x2e8
 100746c:	e3400105 	movt	r0, #261	; 0x105
 1007470:	eb00041c 	bl	10084e8 <Xil_Assert>
 1007474:	e30a3480 	movw	r3, #42112	; 0xa480
 1007478:	e3a02001 	mov	r2, #1
 100747c:	e340310a 	movt	r3, #266	; 0x10a
 1007480:	e5832000 	str	r2, [r3]
 1007484:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 1007488:	e308001c 	movw	r0, #32796	; 0x801c
 100748c:	e30012e9 	movw	r1, #745	; 0x2e9
 1007490:	e3400105 	movt	r0, #261	; 0x105
 1007494:	eb000413 	bl	10084e8 <Xil_Assert>
 1007498:	e3a03001 	mov	r3, #1
 100749c:	e5843000 	str	r3, [r4]
 10074a0:	e8bd8010 	pop	{r4, pc}

010074a4 <XGpioPs_IntrHandler>:
* @note		This function does not save and restore the processor context
*		such that the user must provide this processing.
*
******************************************************************************/
void XGpioPs_IntrHandler(const XGpioPs *InstancePtr)
{
 10074a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	u8 Bank;
	u32 IntrStatus;
	u32 IntrEnabled;

	Xil_AssertVoid(InstancePtr != NULL);
 10074a8:	e2506000 	subs	r6, r0, #0
 10074ac:	0a00002c 	beq	1007564 <XGpioPs_IntrHandler+0xc0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10074b0:	e5962008 	ldr	r2, [r6, #8]
 10074b4:	e3013111 	movw	r3, #4369	; 0x1111
 10074b8:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10074bc:	e30a4480 	movw	r4, #42112	; 0xa480
 10074c0:	e340410a 	movt	r4, #266	; 0x10a
 10074c4:	e3a07000 	mov	r7, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10074c8:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10074cc:	e5847000 	str	r7, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10074d0:	1a00001c 	bne	1007548 <XGpioPs_IntrHandler+0xa4>

	for (Bank = 0U; Bank < InstancePtr->MaxBanks; Bank++) {
 10074d4:	e5d6301c 	ldrb	r3, [r6, #28]
 10074d8:	e1530007 	cmp	r3, r7
 10074dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 10074e0:	e1a04007 	mov	r4, r7
 10074e4:	ea000003 	b	10074f8 <XGpioPs_IntrHandler+0x54>
 10074e8:	e5d6301c 	ldrb	r3, [r6, #28]
 10074ec:	e6ef4077 	uxtb	r4, r7
 10074f0:	e1530004 	cmp	r3, r4
 10074f4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
			if((Bank == XGPIOPS_ONE) || (Bank == XGPIOPS_TWO)) {
				continue;
			}
		}
#endif
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 10074f8:	e1a01004 	mov	r1, r4
 10074fc:	e1a00006 	mov	r0, r6
 1007500:	ebfffde2 	bl	1006c90 <XGpioPs_IntrGetStatus>
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1007504:	e1a01004 	mov	r1, r4
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1007508:	e1a05000 	mov	r5, r0
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 100750c:	e1a00006 	mov	r0, r6
 1007510:	e2877001 	add	r7, r7, #1
 1007514:	ebfffd74 	bl	1006aec <XGpioPs_IntrGetEnabled>
		if ((IntrStatus & IntrEnabled) != (u32)0) {
 1007518:	e0155000 	ands	r5, r5, r0
 100751c:	0afffff1 	beq	10074e8 <XGpioPs_IntrHandler+0x44>
			XGpioPs_IntrClear(InstancePtr, Bank,
 1007520:	e1a02005 	mov	r2, r5
 1007524:	e1a01004 	mov	r1, r4
 1007528:	e1a00006 	mov	r0, r6
 100752c:	ebfffe3f 	bl	1006e30 <XGpioPs_IntrClear>
					(IntrStatus & IntrEnabled));
			InstancePtr->Handler(InstancePtr->
 1007530:	e1a02005 	mov	r2, r5
 1007534:	e1a01004 	mov	r1, r4
 1007538:	e596300c 	ldr	r3, [r6, #12]
 100753c:	e5960010 	ldr	r0, [r6, #16]
 1007540:	e12fff33 	blx	r3
 1007544:	eaffffe7 	b	10074e8 <XGpioPs_IntrHandler+0x44>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007548:	e308001c 	movw	r0, #32796	; 0x801c
 100754c:	e3a01fc2 	mov	r1, #776	; 0x308
 1007550:	e3400105 	movt	r0, #261	; 0x105
 1007554:	eb0003e3 	bl	10084e8 <Xil_Assert>
 1007558:	e3a03001 	mov	r3, #1
 100755c:	e5843000 	str	r3, [r4]
 1007560:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007564:	e308001c 	movw	r0, #32796	; 0x801c
 1007568:	e3001307 	movw	r1, #775	; 0x307
 100756c:	e3400105 	movt	r0, #261	; 0x105
 1007570:	eb0003dc 	bl	10084e8 <Xil_Assert>
 1007574:	e30a3480 	movw	r3, #42112	; 0xa480
 1007578:	e3a02001 	mov	r2, #1
 100757c:	e340310a 	movt	r3, #266	; 0x10a
 1007580:	e5832000 	str	r2, [r3]
 1007584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007588 <StubHandler>:
{
	(void) CallBackRef;
	(void) Bank;
	(void) Status;

	Xil_AssertVoidAlways();
 1007588:	e308001c 	movw	r0, #32796	; 0x801c
{
 100758c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 1007590:	e3001337 	movw	r1, #823	; 0x337
 1007594:	e3400105 	movt	r0, #261	; 0x105
 1007598:	eb0003d2 	bl	10084e8 <Xil_Assert>
 100759c:	e30a3480 	movw	r3, #42112	; 0xa480
 10075a0:	e3a02001 	mov	r2, #1
 10075a4:	e340310a 	movt	r3, #266	; 0x10a
 10075a8:	e5832000 	str	r2, [r3]
}
 10075ac:	e8bd8010 	pop	{r4, pc}

010075b0 <XScuGic_InterruptHandler>:
*
* @note		None.
*
******************************************************************************/
void XScuGic_InterruptHandler(XScuGic *InstancePtr)
{
 10075b0:	e92d4070 	push	{r4, r5, r6, lr}
#endif
	    XScuGic_VectorTableEntry *TablePtr;

	    /* Assert that the pointer to the instance is valid
	     */
	    Xil_AssertVoid(InstancePtr != NULL);
 10075b4:	e2505000 	subs	r5, r0, #0
 10075b8:	0a000011 	beq	1007604 <XScuGic_InterruptHandler+0x54>
	     * clear the interrupt in the GIC.
	     */
#if defined (GICv3)
	    InterruptID = XScuGic_get_IntID();
#else
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 10075bc:	e5953000 	ldr	r3, [r5]
	    Xil_AssertVoid(InstancePtr != NULL);
 10075c0:	e30a2480 	movw	r2, #42112	; 0xa480
 10075c4:	e340210a 	movt	r2, #266	; 0x10a
 10075c8:	e3a01000 	mov	r1, #0
 10075cc:	e5821000 	str	r1, [r2]
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 10075d0:	e5932004 	ldr	r2, [r3, #4]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 10075d4:	e592400c 	ldr	r4, [r2, #12]
	    InterruptID = IntIDFull & XSCUGIC_ACK_INTID_MASK;
 10075d8:	e7e91054 	ubfx	r1, r4, #0, #10
#endif
	    if (XSCUGIC_MAX_NUM_INTR_INPUTS <= InterruptID) {
 10075dc:	e351005e 	cmp	r1, #94	; 0x5e
 10075e0:	8a000005 	bhi	10075fc <XScuGic_InterruptHandler+0x4c>
	     * based on the IRQSource. A software trigger is cleared by
	     *.the ACK.
	     */
	    TablePtr = &(InstancePtr->Config->HandlerTable[InterruptID]);
		if (TablePtr != NULL) {
			TablePtr->Handler(TablePtr->CallBackRef);
 10075e4:	e0833181 	add	r3, r3, r1, lsl #3
 10075e8:	e593200c 	ldr	r2, [r3, #12]
 10075ec:	e5930010 	ldr	r0, [r3, #16]
 10075f0:	e12fff32 	blx	r2
 10075f4:	e5953000 	ldr	r3, [r5]
 10075f8:	e5932004 	ldr	r2, [r3, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10075fc:	e5824010 	str	r4, [r2, #16]
#endif
	    /*
	     * Return from the interrupt. Change security domains
	     * could happen here.
	     */
}
 1007600:	e8bd8070 	pop	{r4, r5, r6, pc}
	    Xil_AssertVoid(InstancePtr != NULL);
 1007604:	e308002c 	movw	r0, #32812	; 0x802c
 1007608:	e3a0107d 	mov	r1, #125	; 0x7d
 100760c:	e3400105 	movt	r0, #261	; 0x105
 1007610:	eb0003b4 	bl	10084e8 <Xil_Assert>
 1007614:	e30a3480 	movw	r3, #42112	; 0xa480
 1007618:	e3a02001 	mov	r2, #1
 100761c:	e340310a 	movt	r3, #266	; 0x10a
 1007620:	e5832000 	str	r2, [r3]
 1007624:	e8bd8070 	pop	{r4, r5, r6, pc}

01007628 <StubHandler>:
static void StubHandler(void *CallBackRef)
{
	/*
	 * verify that the inputs are valid
	 */
	Xil_AssertVoid(CallBackRef != NULL);
 1007628:	e3500000 	cmp	r0, #0
 100762c:	0a000007 	beq	1007650 <StubHandler+0x28>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1007630:	e5903008 	ldr	r3, [r0, #8]
	Xil_AssertVoid(CallBackRef != NULL);
 1007634:	e30a2480 	movw	r2, #42112	; 0xa480
 1007638:	e340210a 	movt	r2, #266	; 0x10a
 100763c:	e3a01000 	mov	r1, #0
 1007640:	e5821000 	str	r1, [r2]
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1007644:	e2833001 	add	r3, r3, #1
 1007648:	e5803008 	str	r3, [r0, #8]
 100764c:	e12fff1e 	bx	lr
	Xil_AssertVoid(CallBackRef != NULL);
 1007650:	e308003c 	movw	r0, #32828	; 0x803c
{
 1007654:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CallBackRef != NULL);
 1007658:	e30012e5 	movw	r1, #741	; 0x2e5
 100765c:	e3400105 	movt	r0, #261	; 0x105
 1007660:	eb0003a0 	bl	10084e8 <Xil_Assert>
 1007664:	e30a3480 	movw	r3, #42112	; 0xa480
 1007668:	e3a02001 	mov	r2, #1
 100766c:	e340310a 	movt	r3, #266	; 0x10a
 1007670:	e5832000 	str	r2, [r3]
}
 1007674:	e8bd8010 	pop	{r4, pc}

01007678 <XScuGic_Connect>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007678:	e3500000 	cmp	r0, #0
{
 100767c:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007680:	0a000021 	beq	100770c <XScuGic_Connect+0x94>
 1007684:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007688:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertNonvoid(InstancePtr != NULL);
 100768c:	e340410a 	movt	r4, #266	; 0x10a
 1007690:	e3a0c000 	mov	ip, #0
 1007694:	e584c000 	str	ip, [r4]
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007698:	8a000013 	bhi	10076ec <XScuGic_Connect+0x74>
	Xil_AssertNonvoid(Handler != NULL);
 100769c:	e3520000 	cmp	r2, #0
 10076a0:	0a000022 	beq	1007730 <XScuGic_Connect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10076a4:	e590e004 	ldr	lr, [r0, #4]
 10076a8:	e301c111 	movw	ip, #4369	; 0x1111
 10076ac:	e341c111 	movt	ip, #4369	; 0x1111
 10076b0:	e15e000c 	cmp	lr, ip
 10076b4:	1a000004 	bne	10076cc <XScuGic_Connect+0x54>
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)Handler;
 10076b8:	e5900000 	ldr	r0, [r0]
 10076bc:	e0801181 	add	r1, r0, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = CallBackRef;
 10076c0:	e1c120fc 	strd	r2, [r1, #12]
}
 10076c4:	e3a00000 	mov	r0, #0
 10076c8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10076cc:	e308003c 	movw	r0, #32828	; 0x803c
 10076d0:	e30011e1 	movw	r1, #481	; 0x1e1
 10076d4:	e3400105 	movt	r0, #261	; 0x105
 10076d8:	eb000382 	bl	10084e8 <Xil_Assert>
 10076dc:	e3a03001 	mov	r3, #1
}
 10076e0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10076e4:	e5843000 	str	r3, [r4]
}
 10076e8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10076ec:	e308003c 	movw	r0, #32828	; 0x803c
 10076f0:	e30011df 	movw	r1, #479	; 0x1df
 10076f4:	e3400105 	movt	r0, #261	; 0x105
 10076f8:	eb00037a 	bl	10084e8 <Xil_Assert>
 10076fc:	e3a03001 	mov	r3, #1
}
 1007700:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007704:	e5843000 	str	r3, [r4]
}
 1007708:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 100770c:	e308003c 	movw	r0, #32828	; 0x803c
 1007710:	e30011de 	movw	r1, #478	; 0x1de
 1007714:	e3400105 	movt	r0, #261	; 0x105
 1007718:	eb000372 	bl	10084e8 <Xil_Assert>
 100771c:	e30a3480 	movw	r3, #42112	; 0xa480
 1007720:	e3a02001 	mov	r2, #1
 1007724:	e340310a 	movt	r3, #266	; 0x10a
 1007728:	e5832000 	str	r2, [r3]
 100772c:	eaffffe4 	b	10076c4 <XScuGic_Connect+0x4c>
	Xil_AssertNonvoid(Handler != NULL);
 1007730:	e308003c 	movw	r0, #32828	; 0x803c
 1007734:	e3a01e1e 	mov	r1, #480	; 0x1e0
 1007738:	e3400105 	movt	r0, #261	; 0x105
 100773c:	eb000369 	bl	10084e8 <Xil_Assert>
 1007740:	e3a03001 	mov	r3, #1
 1007744:	e5843000 	str	r3, [r4]
 1007748:	eaffffdd 	b	10076c4 <XScuGic_Connect+0x4c>

0100774c <XScuGic_Disconnect>:
	Xil_AssertVoid(InstancePtr != NULL);
 100774c:	e3500000 	cmp	r0, #0
{
 1007750:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007754:	0a000026 	beq	10077f4 <XScuGic_Disconnect+0xa8>
 1007758:	e30a4480 	movw	r4, #42112	; 0xa480
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 100775c:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1007760:	e340410a 	movt	r4, #266	; 0x10a
 1007764:	e3a03000 	mov	r3, #0
 1007768:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 100776c:	8a000019 	bhi	10077d8 <XScuGic_Disconnect+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007770:	e5902004 	ldr	r2, [r0, #4]
 1007774:	e3013111 	movw	r3, #4369	; 0x1111
 1007778:	e3413111 	movt	r3, #4369	; 0x1111
 100777c:	e1520003 	cmp	r2, r3
 1007780:	1a00000d 	bne	10077bc <XScuGic_Disconnect+0x70>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1007784:	e5903000 	ldr	r3, [r0]
	Mask = 0x00000001U << (Int_Id % 32U);
 1007788:	e201201f 	and	r2, r1, #31
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 100778c:	e1a0c2a1 	lsr	ip, r1, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1007790:	e3a0e001 	mov	lr, #1
 1007794:	e1a0e21e 	lsl	lr, lr, r2
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1007798:	e3072628 	movw	r2, #30248	; 0x7628
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 100779c:	e5934008 	ldr	r4, [r3, #8]
 10077a0:	e28cc060 	add	ip, ip, #96	; 0x60
 10077a4:	e0831181 	add	r1, r3, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10077a8:	e3402100 	movt	r2, #256	; 0x100
 10077ac:	e784e10c 	str	lr, [r4, ip, lsl #2]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 10077b0:	e5810010 	str	r0, [r1, #16]
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10077b4:	e581200c 	str	r2, [r1, #12]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 10077b8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10077bc:	e308003c 	movw	r0, #32828	; 0x803c
 10077c0:	e3001206 	movw	r1, #518	; 0x206
 10077c4:	e3400105 	movt	r0, #261	; 0x105
 10077c8:	eb000346 	bl	10084e8 <Xil_Assert>
 10077cc:	e3a03001 	mov	r3, #1
 10077d0:	e5843000 	str	r3, [r4]
}
 10077d4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10077d8:	e308003c 	movw	r0, #32828	; 0x803c
 10077dc:	e3001205 	movw	r1, #517	; 0x205
 10077e0:	e3400105 	movt	r0, #261	; 0x105
 10077e4:	eb00033f 	bl	10084e8 <Xil_Assert>
 10077e8:	e3a03001 	mov	r3, #1
 10077ec:	e5843000 	str	r3, [r4]
 10077f0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10077f4:	e308003c 	movw	r0, #32828	; 0x803c
 10077f8:	e3a01f81 	mov	r1, #516	; 0x204
 10077fc:	e3400105 	movt	r0, #261	; 0x105
 1007800:	eb000338 	bl	10084e8 <Xil_Assert>
 1007804:	e30a3480 	movw	r3, #42112	; 0xa480
 1007808:	e3a02001 	mov	r2, #1
 100780c:	e340310a 	movt	r3, #266	; 0x10a
 1007810:	e5832000 	str	r2, [r3]
 1007814:	e8bd8010 	pop	{r4, pc}

01007818 <XScuGic_SoftwareIntr>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007818:	e3500000 	cmp	r0, #0
{
 100781c:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007820:	0a000025 	beq	10078bc <XScuGic_SoftwareIntr+0xa4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007824:	e590c004 	ldr	ip, [r0, #4]
 1007828:	e3013111 	movw	r3, #4369	; 0x1111
 100782c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007830:	e30a4480 	movw	r4, #42112	; 0xa480
 1007834:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007838:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 100783c:	e3a03000 	mov	r3, #0
 1007840:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007844:	1a00000c 	bne	100787c <XScuGic_SoftwareIntr+0x64>
	Xil_AssertNonvoid(Int_Id <= 15U);
 1007848:	e351000f 	cmp	r1, #15
 100784c:	8a000012 	bhi	100789c <XScuGic_SoftwareIntr+0x84>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 1007850:	e35200ff 	cmp	r2, #255	; 0xff
 1007854:	8a000021 	bhi	10078e0 <XScuGic_SoftwareIntr+0xc8>
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1007858:	e5900000 	ldr	r0, [r0]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 100785c:	e1811802 	orr	r1, r1, r2, lsl #16
 1007860:	e3a0300f 	mov	r3, #15
 1007864:	e34030ff 	movt	r3, #255	; 0xff
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 1007868:	e5902008 	ldr	r2, [r0, #8]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 100786c:	e0033001 	and	r3, r3, r1
 1007870:	e5823f00 	str	r3, [r2, #3840]	; 0xf00
}
 1007874:	e3a00000 	mov	r0, #0
 1007878:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100787c:	e308003c 	movw	r0, #32828	; 0x803c
 1007880:	e30012b3 	movw	r1, #691	; 0x2b3
 1007884:	e3400105 	movt	r0, #261	; 0x105
 1007888:	eb000316 	bl	10084e8 <Xil_Assert>
 100788c:	e3a03001 	mov	r3, #1
}
 1007890:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007894:	e5843000 	str	r3, [r4]
}
 1007898:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id <= 15U);
 100789c:	e308003c 	movw	r0, #32828	; 0x803c
 10078a0:	e3a01fad 	mov	r1, #692	; 0x2b4
 10078a4:	e3400105 	movt	r0, #261	; 0x105
 10078a8:	eb00030e 	bl	10084e8 <Xil_Assert>
 10078ac:	e3a03001 	mov	r3, #1
}
 10078b0:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id <= 15U);
 10078b4:	e5843000 	str	r3, [r4]
}
 10078b8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10078bc:	e308003c 	movw	r0, #32828	; 0x803c
 10078c0:	e30012b2 	movw	r1, #690	; 0x2b2
 10078c4:	e3400105 	movt	r0, #261	; 0x105
 10078c8:	eb000306 	bl	10084e8 <Xil_Assert>
 10078cc:	e30a3480 	movw	r3, #42112	; 0xa480
 10078d0:	e3a02001 	mov	r2, #1
 10078d4:	e340310a 	movt	r3, #266	; 0x10a
 10078d8:	e5832000 	str	r2, [r3]
 10078dc:	eaffffe4 	b	1007874 <XScuGic_SoftwareIntr+0x5c>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 10078e0:	e308003c 	movw	r0, #32828	; 0x803c
 10078e4:	e30012b5 	movw	r1, #693	; 0x2b5
 10078e8:	e3400105 	movt	r0, #261	; 0x105
 10078ec:	eb0002fd 	bl	10084e8 <Xil_Assert>
 10078f0:	e3a03001 	mov	r3, #1
 10078f4:	e5843000 	str	r3, [r4]
 10078f8:	eaffffdd 	b	1007874 <XScuGic_SoftwareIntr+0x5c>

010078fc <XScuGic_SetPriorityTriggerType>:
	u32 Index;
#endif
	u8 LocalPriority;
	LocalPriority = Priority;

	Xil_AssertVoid(InstancePtr != NULL);
 10078fc:	e3500000 	cmp	r0, #0
{
 1007900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007904:	0a000033 	beq	10079d8 <XScuGic_SetPriorityTriggerType+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007908:	e590e004 	ldr	lr, [r0, #4]
 100790c:	e301c111 	movw	ip, #4369	; 0x1111
 1007910:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007914:	e30a4480 	movw	r4, #42112	; 0xa480
 1007918:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100791c:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1007920:	e3a0c000 	mov	ip, #0
 1007924:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007928:	1a00001c 	bne	10079a0 <XScuGic_SetPriorityTriggerType+0xa4>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 100792c:	e351005e 	cmp	r1, #94	; 0x5e
 1007930:	8a000021 	bhi	10079bc <XScuGic_SetPriorityTriggerType+0xc0>
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1007934:	e3530003 	cmp	r3, #3
 1007938:	8a00002f 	bhi	10079fc <XScuGic_SetPriorityTriggerType+0x100>
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 100793c:	e35200f8 	cmp	r2, #248	; 0xf8
 1007940:	8a000034 	bhi	1007a18 <XScuGic_SetPriorityTriggerType+0x11c>
#endif

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007944:	e5905000 	ldr	r5, [r0]
 1007948:	e3c1e003 	bic	lr, r1, #3
	LocalPriority = LocalPriority & (u8)XSCUGIC_INTR_PRIO_MASK;
	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 100794c:	e2010003 	and	r0, r1, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007950:	e28eeb01 	add	lr, lr, #1024	; 0x400
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1007954:	e1a04180 	lsl	r4, r0, #3
 1007958:	e3a080ff 	mov	r8, #255	; 0xff
	RegValue = XScuGic_DistReadReg(InstancePtr,
 100795c:	e5956008 	ldr	r6, [r5, #8]
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1007960:	e20220f8 	and	r2, r2, #248	; 0xf8
				RegValue);

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007964:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 1007968:	e201100f 	and	r1, r1, #15
 100796c:	e1a01081 	lsl	r1, r1, #1
 1007970:	e3a07003 	mov	r7, #3
	return *(volatile u32 *) Addr;
 1007974:	e79e0006 	ldr	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007978:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 100797c:	e1c00418 	bic	r0, r0, r8, lsl r4
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 1007980:	e1800412 	orr	r0, r0, r2, lsl r4
	*LocalAddr = Value;
 1007984:	e78e0006 	str	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007988:	e5950008 	ldr	r0, [r5, #8]
	return *(volatile u32 *) Addr;
 100798c:	e790210c 	ldr	r2, [r0, ip, lsl #2]
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 1007990:	e1c22117 	bic	r2, r2, r7, lsl r1
	RegValue |= (u32)Trigger << ((Int_Id%16U)*2U);
 1007994:	e1821113 	orr	r1, r2, r3, lsl r1
	*LocalAddr = Value;
 1007998:	e780110c 	str	r1, [r0, ip, lsl #2]
 100799c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10079a0:	e308003c 	movw	r0, #32828	; 0x803c
 10079a4:	e3001312 	movw	r1, #786	; 0x312
 10079a8:	e3400105 	movt	r0, #261	; 0x105
 10079ac:	eb0002cd 	bl	10084e8 <Xil_Assert>
 10079b0:	e3a03001 	mov	r3, #1
 10079b4:	e5843000 	str	r3, [r4]
 10079b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10079bc:	e308003c 	movw	r0, #32828	; 0x803c
 10079c0:	e3001313 	movw	r1, #787	; 0x313
 10079c4:	e3400105 	movt	r0, #261	; 0x105
 10079c8:	eb0002c6 	bl	10084e8 <Xil_Assert>
 10079cc:	e3a03001 	mov	r3, #1
 10079d0:	e5843000 	str	r3, [r4]
 10079d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10079d8:	e308003c 	movw	r0, #32828	; 0x803c
 10079dc:	e3001311 	movw	r1, #785	; 0x311
 10079e0:	e3400105 	movt	r0, #261	; 0x105
 10079e4:	eb0002bf 	bl	10084e8 <Xil_Assert>
 10079e8:	e30a3480 	movw	r3, #42112	; 0xa480
 10079ec:	e3a02001 	mov	r2, #1
 10079f0:	e340310a 	movt	r3, #266	; 0x10a
 10079f4:	e5832000 	str	r2, [r3]
 10079f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 10079fc:	e308003c 	movw	r0, #32828	; 0x803c
 1007a00:	e3a01fc5 	mov	r1, #788	; 0x314
 1007a04:	e3400105 	movt	r0, #261	; 0x105
 1007a08:	eb0002b6 	bl	10084e8 <Xil_Assert>
 1007a0c:	e3a03001 	mov	r3, #1
 1007a10:	e5843000 	str	r3, [r4]
 1007a14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1007a18:	e308003c 	movw	r0, #32828	; 0x803c
 1007a1c:	e3001315 	movw	r1, #789	; 0x315
 1007a20:	e3400105 	movt	r0, #261	; 0x105
 1007a24:	eb0002af 	bl	10084e8 <Xil_Assert>
 1007a28:	e3a03001 	mov	r3, #1
 1007a2c:	e5843000 	str	r3, [r4]
	 * Write the value back to the register.
	 */
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_INT_CFG_OFFSET_CALC(Int_Id),
				RegValue);

}
 1007a30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01007a34 <XScuGic_GetPriorityTriggerType>:
void XScuGic_GetPriorityTriggerType(XScuGic *InstancePtr, u32 Int_Id,
					u8 *Priority, u8 *Trigger)
{
	u32 RegValue;

	Xil_AssertVoid(InstancePtr != NULL);
 1007a34:	e3500000 	cmp	r0, #0
{
 1007a38:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007a3c:	0a000030 	beq	1007b04 <XScuGic_GetPriorityTriggerType+0xd0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a40:	e590e004 	ldr	lr, [r0, #4]
 1007a44:	e301c111 	movw	ip, #4369	; 0x1111
 1007a48:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007a4c:	e30a4480 	movw	r4, #42112	; 0xa480
 1007a50:	e340410a 	movt	r4, #266	; 0x10a
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a54:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1007a58:	e3a0c000 	mov	ip, #0
 1007a5c:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a60:	1a000019 	bne	1007acc <XScuGic_GetPriorityTriggerType+0x98>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007a64:	e351005e 	cmp	r1, #94	; 0x5e
 1007a68:	8a00001e 	bhi	1007ae8 <XScuGic_GetPriorityTriggerType+0xb4>
	Xil_AssertVoid(Priority != NULL);
 1007a6c:	e3520000 	cmp	r2, #0
 1007a70:	0a00002c 	beq	1007b28 <XScuGic_GetPriorityTriggerType+0xf4>
	Xil_AssertVoid(Trigger != NULL);
 1007a74:	e3530000 	cmp	r3, #0
 1007a78:	0a000031 	beq	1007b44 <XScuGic_GetPriorityTriggerType+0x110>

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007a7c:	e590c000 	ldr	ip, [r0]

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 1007a80:	e201e003 	and	lr, r1, #3
 1007a84:	e1a0418e 	lsl	r4, lr, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007a88:	e3c15003 	bic	r5, r1, #3
 1007a8c:	e2855b01 	add	r5, r5, #1024	; 0x400
 1007a90:	e59ce008 	ldr	lr, [ip, #8]
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007a94:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1007a98:	e201100f 	and	r1, r1, #15
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007a9c:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1007aa0:	e1a01081 	lsl	r1, r1, #1
	return *(volatile u32 *) Addr;
 1007aa4:	e795e00e 	ldr	lr, [r5, lr]
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 1007aa8:	e1a0e43e 	lsr	lr, lr, r4
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);
 1007aac:	e5c2e000 	strb	lr, [r2]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007ab0:	e5902000 	ldr	r2, [r0]
 1007ab4:	e5922008 	ldr	r2, [r2, #8]
 1007ab8:	e792210c 	ldr	r2, [r2, ip, lsl #2]
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1007abc:	e1a01132 	lsr	r1, r2, r1

	*Trigger = (u8)(RegValue & XSCUGIC_INT_CFG_MASK);
 1007ac0:	e2011003 	and	r1, r1, #3
 1007ac4:	e5c31000 	strb	r1, [r3]
 1007ac8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007acc:	e308003c 	movw	r0, #32828	; 0x803c
 1007ad0:	e3001367 	movw	r1, #871	; 0x367
 1007ad4:	e3400105 	movt	r0, #261	; 0x105
 1007ad8:	eb000282 	bl	10084e8 <Xil_Assert>
 1007adc:	e3a03001 	mov	r3, #1
 1007ae0:	e5843000 	str	r3, [r4]
 1007ae4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007ae8:	e308003c 	movw	r0, #32828	; 0x803c
 1007aec:	e3a01fda 	mov	r1, #872	; 0x368
 1007af0:	e3400105 	movt	r0, #261	; 0x105
 1007af4:	eb00027b 	bl	10084e8 <Xil_Assert>
 1007af8:	e3a03001 	mov	r3, #1
 1007afc:	e5843000 	str	r3, [r4]
 1007b00:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007b04:	e308003c 	movw	r0, #32828	; 0x803c
 1007b08:	e3001366 	movw	r1, #870	; 0x366
 1007b0c:	e3400105 	movt	r0, #261	; 0x105
 1007b10:	eb000274 	bl	10084e8 <Xil_Assert>
 1007b14:	e30a3480 	movw	r3, #42112	; 0xa480
 1007b18:	e3a02001 	mov	r2, #1
 1007b1c:	e340310a 	movt	r3, #266	; 0x10a
 1007b20:	e5832000 	str	r2, [r3]
 1007b24:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Priority != NULL);
 1007b28:	e308003c 	movw	r0, #32828	; 0x803c
 1007b2c:	e3001369 	movw	r1, #873	; 0x369
 1007b30:	e3400105 	movt	r0, #261	; 0x105
 1007b34:	eb00026b 	bl	10084e8 <Xil_Assert>
 1007b38:	e3a03001 	mov	r3, #1
 1007b3c:	e5843000 	str	r3, [r4]
 1007b40:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Trigger != NULL);
 1007b44:	e308003c 	movw	r0, #32828	; 0x803c
 1007b48:	e300136a 	movw	r1, #874	; 0x36a
 1007b4c:	e3400105 	movt	r0, #261	; 0x105
 1007b50:	eb000264 	bl	10084e8 <Xil_Assert>
 1007b54:	e3a03001 	mov	r3, #1
 1007b58:	e5843000 	str	r3, [r4]
}
 1007b5c:	e8bd8070 	pop	{r4, r5, r6, pc}

01007b60 <XScuGic_InterruptMaptoCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 1007b60:	e3500000 	cmp	r0, #0
{
 1007b64:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007b68:	0a000010 	beq	1007bb0 <XScuGic_InterruptMaptoCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007b6c:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1007b70:	e30ac480 	movw	ip, #42112	; 0xa480
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007b74:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 1007b78:	e340c10a 	movt	ip, #266	; 0x10a
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007b7c:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 1007b80:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007b84:	e593e008 	ldr	lr, [r3, #8]
			XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 1007b88:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 1007b8c:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 1007b90:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 1007b94:	e2022003 	and	r2, r2, #3
 1007b98:	e790100e 	ldr	r1, [r0, lr]

	RegValue |= (Cpu_Id) << (Offset*8U);
 1007b9c:	e1a02182 	lsl	r2, r2, #3
 1007ba0:	e6ef3073 	uxtb	r3, r3
 1007ba4:	e1813213 	orr	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 1007ba8:	e780300e 	str	r3, [r0, lr]
 1007bac:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007bb0:	e308003c 	movw	r0, #32828	; 0x803c
 1007bb4:	e30013a5 	movw	r1, #933	; 0x3a5
 1007bb8:	e3400105 	movt	r0, #261	; 0x105
 1007bbc:	eb000249 	bl	10084e8 <Xil_Assert>
 1007bc0:	e30a3480 	movw	r3, #42112	; 0xa480
 1007bc4:	e3a02001 	mov	r2, #1
 1007bc8:	e340310a 	movt	r3, #266	; 0x10a
 1007bcc:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
					XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
					RegValue);
#endif
}
 1007bd0:	e8bd8010 	pop	{r4, pc}

01007bd4 <XScuGic_Enable>:
{
 1007bd4:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1007bd8:	e3003040 	movw	r3, #64	; 0x40
	Xil_AssertVoid(InstancePtr != NULL);
 1007bdc:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1007be0:	e3403106 	movt	r3, #262	; 0x106
{
 1007be4:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1007be8:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1007bec:	0a000024 	beq	1007c84 <XScuGic_Enable+0xb0>
 1007bf0:	e30a5480 	movw	r5, #42112	; 0xa480
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007bf4:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1007bf8:	e340510a 	movt	r5, #266	; 0x10a
 1007bfc:	e3a03000 	mov	r3, #0
 1007c00:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007c04:	8a000017 	bhi	1007c68 <XScuGic_Enable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007c08:	e5962004 	ldr	r2, [r6, #4]
 1007c0c:	e3013111 	movw	r3, #4369	; 0x1111
 1007c10:	e3413111 	movt	r3, #4369	; 0x1111
 1007c14:	e1520003 	cmp	r2, r3
 1007c18:	1a00000b 	bne	1007c4c <XScuGic_Enable+0x78>
	XScuGic_InterruptMaptoCpu(InstancePtr, Cpu_Id, Int_Id);
 1007c1c:	e1a02004 	mov	r2, r4
 1007c20:	e6ef1071 	uxtb	r1, r1
 1007c24:	ebffffcd 	bl	1007b60 <XScuGic_InterruptMaptoCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1007c28:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1007c2c:	e204101f 	and	r1, r4, #31
 1007c30:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1007c34:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1007c38:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1007c3c:	e5922008 	ldr	r2, [r2, #8]
 1007c40:	e2844040 	add	r4, r4, #64	; 0x40
 1007c44:	e7823104 	str	r3, [r2, r4, lsl #2]
 1007c48:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007c4c:	e308003c 	movw	r0, #32828	; 0x803c
 1007c50:	e300123d 	movw	r1, #573	; 0x23d
 1007c54:	e3400105 	movt	r0, #261	; 0x105
 1007c58:	eb000222 	bl	10084e8 <Xil_Assert>
 1007c5c:	e3a03001 	mov	r3, #1
 1007c60:	e5853000 	str	r3, [r5]
}
 1007c64:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007c68:	e308003c 	movw	r0, #32828	; 0x803c
 1007c6c:	e3a01f8f 	mov	r1, #572	; 0x23c
 1007c70:	e3400105 	movt	r0, #261	; 0x105
 1007c74:	eb00021b 	bl	10084e8 <Xil_Assert>
 1007c78:	e3a03001 	mov	r3, #1
 1007c7c:	e5853000 	str	r3, [r5]
 1007c80:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007c84:	e308003c 	movw	r0, #32828	; 0x803c
 1007c88:	e300123b 	movw	r1, #571	; 0x23b
 1007c8c:	e3400105 	movt	r0, #261	; 0x105
 1007c90:	eb000214 	bl	10084e8 <Xil_Assert>
 1007c94:	e30a3480 	movw	r3, #42112	; 0xa480
 1007c98:	e3a02001 	mov	r2, #1
 1007c9c:	e340310a 	movt	r3, #266	; 0x10a
 1007ca0:	e5832000 	str	r2, [r3]
 1007ca4:	e8bd8070 	pop	{r4, r5, r6, pc}

01007ca8 <XScuGic_InterruptUnmapFromCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 1007ca8:	e3500000 	cmp	r0, #0
{
 1007cac:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007cb0:	0a000010 	beq	1007cf8 <XScuGic_InterruptUnmapFromCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007cb4:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1007cb8:	e30ac480 	movw	ip, #42112	; 0xa480
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007cbc:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 1007cc0:	e340c10a 	movt	ip, #266	; 0x10a
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007cc4:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 1007cc8:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1007ccc:	e593e008 	ldr	lr, [r3, #8]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 1007cd0:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 1007cd4:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 1007cd8:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 1007cdc:	e2022003 	and	r2, r2, #3
	return *(volatile u32 *) Addr;
 1007ce0:	e790100e 	ldr	r1, [r0, lr]

	RegValue &= ~(Cpu_Id << (Offset*8U));
 1007ce4:	e1a02182 	lsl	r2, r2, #3
 1007ce8:	e6ef3073 	uxtb	r3, r3
 1007cec:	e1c13213 	bic	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 1007cf0:	e780300e 	str	r3, [r0, lr]
 1007cf4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007cf8:	e308003c 	movw	r0, #32828	; 0x803c
 1007cfc:	e30013d1 	movw	r1, #977	; 0x3d1
 1007d00:	e3400105 	movt	r0, #261	; 0x105
 1007d04:	eb0001f7 	bl	10084e8 <Xil_Assert>
 1007d08:	e30a3480 	movw	r3, #42112	; 0xa480
 1007d0c:	e3a02001 	mov	r2, #1
 1007d10:	e340310a 	movt	r3, #266	; 0x10a
 1007d14:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
			RegValue);
#endif
}
 1007d18:	e8bd8010 	pop	{r4, pc}

01007d1c <XScuGic_Disable>:
{
 1007d1c:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1007d20:	e3003040 	movw	r3, #64	; 0x40
	Xil_AssertVoid(InstancePtr != NULL);
 1007d24:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1007d28:	e3403106 	movt	r3, #262	; 0x106
{
 1007d2c:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1007d30:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1007d34:	0a000024 	beq	1007dcc <XScuGic_Disable+0xb0>
 1007d38:	e30a5480 	movw	r5, #42112	; 0xa480
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007d3c:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1007d40:	e340510a 	movt	r5, #266	; 0x10a
 1007d44:	e3a03000 	mov	r3, #0
 1007d48:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007d4c:	8a000017 	bhi	1007db0 <XScuGic_Disable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007d50:	e5962004 	ldr	r2, [r6, #4]
 1007d54:	e3013111 	movw	r3, #4369	; 0x1111
 1007d58:	e3413111 	movt	r3, #4369	; 0x1111
 1007d5c:	e1520003 	cmp	r2, r3
 1007d60:	1a00000b 	bne	1007d94 <XScuGic_Disable+0x78>
	XScuGic_InterruptUnmapFromCpu(InstancePtr, Cpu_Id, Int_Id);
 1007d64:	e1a02004 	mov	r2, r4
 1007d68:	e6ef1071 	uxtb	r1, r1
 1007d6c:	ebffffcd 	bl	1007ca8 <XScuGic_InterruptUnmapFromCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1007d70:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1007d74:	e204101f 	and	r1, r4, #31
 1007d78:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1007d7c:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1007d80:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1007d84:	e5922008 	ldr	r2, [r2, #8]
 1007d88:	e2844060 	add	r4, r4, #96	; 0x60
 1007d8c:	e7823104 	str	r3, [r2, r4, lsl #2]
 1007d90:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007d94:	e308003c 	movw	r0, #32828	; 0x803c
 1007d98:	e3a01f9e 	mov	r1, #632	; 0x278
 1007d9c:	e3400105 	movt	r0, #261	; 0x105
 1007da0:	eb0001d0 	bl	10084e8 <Xil_Assert>
 1007da4:	e3a03001 	mov	r3, #1
 1007da8:	e5853000 	str	r3, [r5]
}
 1007dac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1007db0:	e308003c 	movw	r0, #32828	; 0x803c
 1007db4:	e3001277 	movw	r1, #631	; 0x277
 1007db8:	e3400105 	movt	r0, #261	; 0x105
 1007dbc:	eb0001c9 	bl	10084e8 <Xil_Assert>
 1007dc0:	e3a03001 	mov	r3, #1
 1007dc4:	e5853000 	str	r3, [r5]
 1007dc8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007dcc:	e308003c 	movw	r0, #32828	; 0x803c
 1007dd0:	e3001276 	movw	r1, #630	; 0x276
 1007dd4:	e3400105 	movt	r0, #261	; 0x105
 1007dd8:	eb0001c2 	bl	10084e8 <Xil_Assert>
 1007ddc:	e30a3480 	movw	r3, #42112	; 0xa480
 1007de0:	e3a02001 	mov	r2, #1
 1007de4:	e340310a 	movt	r3, #266	; 0x10a
 1007de8:	e5832000 	str	r2, [r3]
 1007dec:	e8bd8070 	pop	{r4, r5, r6, pc}

01007df0 <XScuGic_UnmapAllInterruptsFromCpu>:
{
	u32 Int_Id;
	u32 Target_Cpu;
	u32 LocalCpuID = (1U << Cpu_Id);

	Xil_AssertVoid(InstancePtr != NULL);
 1007df0:	e3500000 	cmp	r0, #0
{
 1007df4:	e92d4010 	push	{r4, lr}
	u32 LocalCpuID = (1U << Cpu_Id);
 1007df8:	e3a04001 	mov	r4, #1
 1007dfc:	e1a01114 	lsl	r1, r4, r1
	Xil_AssertVoid(InstancePtr != NULL);
 1007e00:	0a000011 	beq	1007e4c <XScuGic_UnmapAllInterruptsFromCpu+0x5c>

	LocalCpuID |= LocalCpuID << 8U;
 1007e04:	e1811401 	orr	r1, r1, r1, lsl #8
	Xil_AssertVoid(InstancePtr != NULL);
 1007e08:	e30a3480 	movw	r3, #42112	; 0xa480
 1007e0c:	e340310a 	movt	r3, #266	; 0x10a
	LocalCpuID |= LocalCpuID << 16U;

	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1007e10:	e590c000 	ldr	ip, [r0]
	LocalCpuID |= LocalCpuID << 16U;
 1007e14:	e1811801 	orr	r1, r1, r1, lsl #16
	Xil_AssertVoid(InstancePtr != NULL);
 1007e18:	e3a02000 	mov	r2, #0
 1007e1c:	e5832000 	str	r2, [r3]
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007e20:	e3a03020 	mov	r3, #32
 1007e24:	e1e00001 	mvn	r0, r1
		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1007e28:	e59c2008 	ldr	r2, [ip, #8]
 1007e2c:	e2822b02 	add	r2, r2, #2048	; 0x800
	return *(volatile u32 *) Addr;
 1007e30:	e7921003 	ldr	r1, [r2, r3]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));
		/* Remove LocalCpuID from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1007e34:	e0011000 	and	r1, r1, r0
	*LocalAddr = Value;
 1007e38:	e7821003 	str	r1, [r2, r3]
			Int_Id = Int_Id+4U) {
 1007e3c:	e2833004 	add	r3, r3, #4
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007e40:	e3530060 	cmp	r3, #96	; 0x60
 1007e44:	1afffff7 	bne	1007e28 <XScuGic_UnmapAllInterruptsFromCpu+0x38>
 1007e48:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007e4c:	e308003c 	movw	r0, #32828	; 0x803c
 1007e50:	e30013f1 	movw	r1, #1009	; 0x3f1
 1007e54:	e3400105 	movt	r0, #261	; 0x105
 1007e58:	eb0001a2 	bl	10084e8 <Xil_Assert>
 1007e5c:	e30a3480 	movw	r3, #42112	; 0xa480
 1007e60:	e340310a 	movt	r3, #266	; 0x10a
 1007e64:	e5834000 	str	r4, [r3]
 1007e68:	e8bd8010 	pop	{r4, pc}

01007e6c <XScuGic_Stop>:
{
	u32 Int_Id;
	u32 RegValue;
	u32 Target_Cpu;
	u32 DistDisable = 1; /* Track distributor status*/
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1007e6c:	e3003040 	movw	r3, #64	; 0x40

	Xil_AssertVoid(InstancePtr != NULL);
 1007e70:	e3500000 	cmp	r0, #0
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1007e74:	e3403106 	movt	r3, #262	; 0x106
{
 1007e78:	e92d4070 	push	{r4, r5, r6, lr}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1007e7c:	e593e000 	ldr	lr, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1007e80:	0a000027 	beq	1007f24 <XScuGic_Stop+0xb8>
 1007e84:	e30a3480 	movw	r3, #42112	; 0xa480
 1007e88:	e3a02000 	mov	r2, #0

	/* If distributor is already disabled, no need to do anything */
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1007e8c:	e5904000 	ldr	r4, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1007e90:	e340310a 	movt	r3, #266	; 0x10a
 1007e94:	e5832000 	str	r2, [r3]
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1007e98:	e5941008 	ldr	r1, [r4, #8]
	return *(volatile u32 *) Addr;
 1007e9c:	e5913000 	ldr	r3, [r1]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 1007ea0:	e3130001 	tst	r3, #1
 1007ea4:	08bd8070 	popeq	{r4, r5, r6, pc}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1007ea8:	e3a0c001 	mov	ip, #1
	/*
	 * Check if the interrupt are targeted to current cpu only or not.
	 * Also remove current cpu from interrupt target register for all
	 * interrupts.
	 */
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007eac:	e3a02020 	mov	r2, #32
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1007eb0:	e1a0ee1c 	lsl	lr, ip, lr
	LocalCpuID |= LocalCpuID << 8U;
 1007eb4:	e18ee40e 	orr	lr, lr, lr, lsl #8
	LocalCpuID |= LocalCpuID << 16U;
 1007eb8:	e18ee80e 	orr	lr, lr, lr, lsl #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007ebc:	e1e0500e 	mvn	r5, lr
 1007ec0:	ea000000 	b	1007ec8 <XScuGic_Stop+0x5c>
 1007ec4:	e5941008 	ldr	r1, [r4, #8]
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1007ec8:	e2820b02 	add	r0, r2, #2048	; 0x800
			Int_Id = Int_Id+4U) {
 1007ecc:	e2822004 	add	r2, r2, #4
 1007ed0:	e7903001 	ldr	r3, [r0, r1]
		if ((Target_Cpu != LocalCpuID) && (Target_Cpu != 0)) {
			/*
			 * If any other CPU is also programmed to target
			 * register, GIC distributor can not be disabled.
			 */
			DistDisable = 0;
 1007ed4:	e15e0003 	cmp	lr, r3
 1007ed8:	13530000 	cmpne	r3, #0
		}

		/* Remove current CPU from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1007edc:	e0033005 	and	r3, r3, r5
			DistDisable = 0;
 1007ee0:	13a0c000 	movne	ip, #0
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007ee4:	e3520060 	cmp	r2, #96	; 0x60
	*LocalAddr = Value;
 1007ee8:	e7803001 	str	r3, [r0, r1]
 1007eec:	1afffff4 	bne	1007ec4 <XScuGic_Stop+0x58>

	/*
	 * If GIC distributor is safe to be disabled, disable all the interrupt
	 * and then disable distributor.
	 */
	if (DistDisable == 1) {
 1007ef0:	e35c0001 	cmp	ip, #1
 1007ef4:	18bd8070 	popne	{r4, r5, r6, pc}
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
				Int_Id = Int_Id+32U) {
			/*
			 * Disable all the interrupts
			 */
			XScuGic_DistWriteReg(InstancePtr,
 1007ef8:	e5941008 	ldr	r1, [r4, #8]
 1007efc:	e3e03000 	mvn	r3, #0
 1007f00:	e3a02000 	mov	r2, #0
 1007f04:	e5813180 	str	r3, [r1, #384]	; 0x180
 1007f08:	e5941008 	ldr	r1, [r4, #8]
 1007f0c:	e5813184 	str	r3, [r1, #388]	; 0x184
 1007f10:	e5941008 	ldr	r1, [r4, #8]
 1007f14:	e5813188 	str	r3, [r1, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1007f18:	e5943008 	ldr	r3, [r4, #8]
	*LocalAddr = Value;
 1007f1c:	e5832000 	str	r2, [r3]
							Int_Id),
			0xFFFFFFFFU);
		}
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET, 0U);
	}
}
 1007f20:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007f24:	e308003c 	movw	r0, #32828	; 0x803c
 1007f28:	e3001419 	movw	r1, #1049	; 0x419
 1007f2c:	e3400105 	movt	r0, #261	; 0x105
 1007f30:	eb00016c 	bl	10084e8 <Xil_Assert>
 1007f34:	e30a3480 	movw	r3, #42112	; 0xa480
 1007f38:	e3a02001 	mov	r2, #1
 1007f3c:	e340310a 	movt	r3, #266	; 0x10a
 1007f40:	e5832000 	str	r2, [r3]
 1007f44:	e8bd8070 	pop	{r4, r5, r6, pc}

01007f48 <XScuGic_CfgInitialize>:
{
 1007f48:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007f4c:	e2504000 	subs	r4, r0, #0
 1007f50:	0a000049 	beq	100807c <XScuGic_CfgInitialize+0x134>
 1007f54:	e30a5480 	movw	r5, #42112	; 0xa480
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1007f58:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007f5c:	e340510a 	movt	r5, #266	; 0x10a
 1007f60:	e3a02000 	mov	r2, #0
 1007f64:	e5852000 	str	r2, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1007f68:	0a00004c 	beq	10080a0 <XScuGic_CfgInitialize+0x158>
	if(InstancePtr->IsReady != XIL_COMPONENT_IS_READY) {
 1007f6c:	e5940004 	ldr	r0, [r4, #4]
 1007f70:	e3013111 	movw	r3, #4369	; 0x1111
 1007f74:	e3413111 	movt	r3, #4369	; 0x1111
 1007f78:	e1500003 	cmp	r0, r3
 1007f7c:	0a00001e 	beq	1007ffc <XScuGic_CfgInitialize+0xb4>
						= (Xil_InterruptHandler)StubHandler;
 1007f80:	e307c628 	movw	ip, #30248	; 0x7628
 1007f84:	e1a03001 	mov	r3, r1
 1007f88:	e340c100 	movt	ip, #256	; 0x100
 1007f8c:	e2810fbe 	add	r0, r1, #760	; 0x2f8
		InstancePtr->IsReady = 0U;
 1007f90:	e5842004 	str	r2, [r4, #4]
		InstancePtr->Config = ConfigPtr;
 1007f94:	e5841000 	str	r1, [r4]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 1007f98:	e593200c 	ldr	r2, [r3, #12]
 1007f9c:	e2833008 	add	r3, r3, #8
			InstancePtr->Config->HandlerTable[Int_Id].CallBackRef =
 1007fa0:	e5834008 	str	r4, [r3, #8]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 1007fa4:	e3520000 	cmp	r2, #0
						= (Xil_InterruptHandler)StubHandler;
 1007fa8:	0583c004 	streq	ip, [r3, #4]
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1007fac:	e1500003 	cmp	r0, r3
 1007fb0:	1afffff8 	bne	1007f98 <XScuGic_CfgInitialize+0x50>
		XScuGic_Stop(InstancePtr);
 1007fb4:	e1a00004 	mov	r0, r4
 1007fb8:	ebffffab 	bl	1007e6c <XScuGic_Stop>
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1007fbc:	e5941000 	ldr	r1, [r4]
	Xil_AssertVoid(InstancePtr != NULL);
 1007fc0:	e3a03000 	mov	r3, #0
 1007fc4:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 1007fc8:	e5910008 	ldr	r0, [r1, #8]
 1007fcc:	e5903000 	ldr	r3, [r0]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 1007fd0:	e2133001 	ands	r3, r3, #1
 1007fd4:	0a00000a 	beq	1008004 <XScuGic_CfgInitialize+0xbc>
	XScuGic_CPUWriteReg(InstancePtr, XSCUGIC_CPU_PRIOR_OFFSET, 0xF0U);
 1007fd8:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1007fdc:	e3a0c0f0 	mov	ip, #240	; 0xf0
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1007fe0:	e3013111 	movw	r3, #4369	; 0x1111
 1007fe4:	e3a00007 	mov	r0, #7
 1007fe8:	e3413111 	movt	r3, #4369	; 0x1111
 1007fec:	e582c004 	str	ip, [r2, #4]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1007ff0:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1007ff4:	e5820000 	str	r0, [r2]
 1007ff8:	e5843004 	str	r3, [r4, #4]
}
 1007ffc:	e3a00000 	mov	r0, #0
 1008000:	e8bd8070 	pop	{r4, r5, r6, pc}
 1008004:	e1a0c003 	mov	ip, r3
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008008:	e3a02020 	mov	r2, #32
 100800c:	e5803000 	str	r3, [r0]
		XScuGic_DistWriteReg(InstancePtr,
 1008010:	e1a03222 	lsr	r3, r2, #4
 1008014:	e5910008 	ldr	r0, [r1, #8]
			Int_Id = Int_Id+16U) {
 1008018:	e2822010 	add	r2, r2, #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 100801c:	e3520060 	cmp	r2, #96	; 0x60
		XScuGic_DistWriteReg(InstancePtr,
 1008020:	e2833c03 	add	r3, r3, #768	; 0x300
 1008024:	e780c103 	str	ip, [r0, r3, lsl #2]
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008028:	1afffff8 	bne	1008010 <XScuGic_CfgInitialize+0xc8>
 100802c:	e30a00a0 	movw	r0, #41120	; 0xa0a0
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008030:	e3a03000 	mov	r3, #0
 1008034:	e34a00a0 	movt	r0, #41120	; 0xa0a0
		XScuGic_DistWriteReg(InstancePtr,
 1008038:	e5912008 	ldr	r2, [r1, #8]
 100803c:	e2822b01 	add	r2, r2, #1024	; 0x400
 1008040:	e7820003 	str	r0, [r2, r3]
			Int_Id = Int_Id+4U) {
 1008044:	e2833004 	add	r3, r3, #4
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008048:	e3530060 	cmp	r3, #96	; 0x60
 100804c:	1afffff9 	bne	1008038 <XScuGic_CfgInitialize+0xf0>
		XScuGic_DistWriteReg(InstancePtr,
 1008050:	e5910008 	ldr	r0, [r1, #8]
 1008054:	e3e03000 	mvn	r3, #0
 1008058:	e3a02001 	mov	r2, #1
 100805c:	e5803180 	str	r3, [r0, #384]	; 0x180
 1008060:	e5910008 	ldr	r0, [r1, #8]
 1008064:	e5803184 	str	r3, [r0, #388]	; 0x184
 1008068:	e5910008 	ldr	r0, [r1, #8]
 100806c:	e5803188 	str	r3, [r0, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1008070:	e5913008 	ldr	r3, [r1, #8]
	*LocalAddr = Value;
 1008074:	e5832000 	str	r2, [r3]
 1008078:	eaffffd6 	b	1007fd8 <XScuGic_CfgInitialize+0x90>
	Xil_AssertNonvoid(InstancePtr != NULL);
 100807c:	e308003c 	movw	r0, #32828	; 0x803c
 1008080:	e3001181 	movw	r1, #385	; 0x181
 1008084:	e3400105 	movt	r0, #261	; 0x105
 1008088:	eb000116 	bl	10084e8 <Xil_Assert>
 100808c:	e30a3480 	movw	r3, #42112	; 0xa480
 1008090:	e3a02001 	mov	r2, #1
 1008094:	e340310a 	movt	r3, #266	; 0x10a
 1008098:	e5832000 	str	r2, [r3]
 100809c:	eaffffd6 	b	1007ffc <XScuGic_CfgInitialize+0xb4>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 10080a0:	e308003c 	movw	r0, #32828	; 0x803c
 10080a4:	e3001182 	movw	r1, #386	; 0x182
 10080a8:	e3400105 	movt	r0, #261	; 0x105
 10080ac:	eb00010d 	bl	10084e8 <Xil_Assert>
 10080b0:	e3a03001 	mov	r3, #1
 10080b4:	e5853000 	str	r3, [r5]
 10080b8:	eaffffcf 	b	1007ffc <XScuGic_CfgInitialize+0xb4>

010080bc <XScuGic_SetCpuID>:
* @note		None
*
*****************************************************************************/
void XScuGic_SetCpuID(u32 CpuCoreId)
{
	Xil_AssertVoid(CpuCoreId <= 1U);
 10080bc:	e3500001 	cmp	r0, #1
 10080c0:	8a000007 	bhi	10080e4 <XScuGic_SetCpuID+0x28>
 10080c4:	e30a2480 	movw	r2, #42112	; 0xa480

	CpuId = CpuCoreId;
 10080c8:	e3003040 	movw	r3, #64	; 0x40
	Xil_AssertVoid(CpuCoreId <= 1U);
 10080cc:	e340210a 	movt	r2, #266	; 0x10a
 10080d0:	e3a01000 	mov	r1, #0
	CpuId = CpuCoreId;
 10080d4:	e3403106 	movt	r3, #262	; 0x106
	Xil_AssertVoid(CpuCoreId <= 1U);
 10080d8:	e5821000 	str	r1, [r2]
	CpuId = CpuCoreId;
 10080dc:	e5830000 	str	r0, [r3]
 10080e0:	e12fff1e 	bx	lr
	Xil_AssertVoid(CpuCoreId <= 1U);
 10080e4:	e308003c 	movw	r0, #32828	; 0x803c
{
 10080e8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CpuCoreId <= 1U);
 10080ec:	e300145d 	movw	r1, #1117	; 0x45d
 10080f0:	e3400105 	movt	r0, #261	; 0x105
 10080f4:	eb0000fb 	bl	10084e8 <Xil_Assert>
 10080f8:	e30a3480 	movw	r3, #42112	; 0xa480
 10080fc:	e3a02001 	mov	r2, #1
 1008100:	e340310a 	movt	r3, #266	; 0x10a
 1008104:	e5832000 	str	r2, [r3]
}
 1008108:	e8bd8010 	pop	{r4, pc}

0100810c <XScuGic_GetCpuID>:
* @note        None.
*
*****************************************************************************/
u32 XScuGic_GetCpuID(void)
{
	return CpuId;
 100810c:	e3003040 	movw	r3, #64	; 0x40
 1008110:	e3403106 	movt	r3, #262	; 0x106
}
 1008114:	e5930000 	ldr	r0, [r3]
 1008118:	e12fff1e 	bx	lr

0100811c <XScuGic_LookupConfig>:
{
	XScuGic_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_SCUGIC_NUM_INSTANCES; Index++) {
		if (XScuGic_ConfigTable[Index].DeviceId == DeviceId) {
 100811c:	e3083450 	movw	r3, #33872	; 0x8450
 1008120:	e3403105 	movt	r3, #261	; 0x105
 1008124:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuGic_Config *)CfgPtr;
}
 1008128:	e1520000 	cmp	r2, r0
 100812c:	01a00003 	moveq	r0, r3
 1008130:	13a00000 	movne	r0, #0
 1008134:	e12fff1e 	bx	lr

01008138 <XScuTimer_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XScuTimer_CfgInitialize(XScuTimer *InstancePtr,
			 XScuTimer_Config *ConfigPtr, u32 EffectiveAddress)
{
 1008138:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;
	Xil_AssertNonvoid(InstancePtr != NULL);
 100813c:	e2505000 	subs	r5, r0, #0
 1008140:	0a000016 	beq	10081a0 <XScuTimer_CfgInitialize+0x68>
 1008144:	e30a6480 	movw	r6, #42112	; 0xa480
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008148:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 100814c:	e340610a 	movt	r6, #266	; 0x10a
 1008150:	e3a03000 	mov	r3, #0
 1008154:	e1a04001 	mov	r4, r1
 1008158:	e5863000 	str	r3, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 100815c:	0a000019 	beq	10081c8 <XScuTimer_CfgInitialize+0x90>
	 * If the device is started, disallow the initialize and return a
	 * status indicating it is started. This allows the user to stop the
	 * device and reinitialize, but prevents a user from inadvertently
	 * initializing.
	 */
	if (InstancePtr->IsStarted != XIL_COMPONENT_IS_STARTED) {
 1008160:	e595000c 	ldr	r0, [r5, #12]
 1008164:	e3021222 	movw	r1, #8738	; 0x2222
 1008168:	e3421222 	movt	r1, #8738	; 0x2222
 100816c:	e1500001 	cmp	r0, r1
 1008170:	0a000008 	beq	1008198 <XScuTimer_CfgInitialize+0x60>
		/*
		 * Copy configuration into the instance structure.
		 */
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1008174:	e1d4c0b0 	ldrh	ip, [r4]
		InstancePtr->IsStarted = (u32)0;

		/*
		 * Indicate the instance is ready to use, successfully initialized.
		 */
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1008178:	e3011111 	movw	r1, #4369	; 0x1111
 100817c:	e3411111 	movt	r1, #4369	; 0x1111

		Status =(s32)XST_SUCCESS;
 1008180:	e1a00003 	mov	r0, r3
		InstancePtr->Config.BaseAddr = EffectiveAddress;
 1008184:	e5852004 	str	r2, [r5, #4]
		InstancePtr->IsStarted = (u32)0;
 1008188:	e585300c 	str	r3, [r5, #12]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 100818c:	e1c5c0b0 	strh	ip, [r5]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1008190:	e5851008 	str	r1, [r5, #8]
	}
	else {
		Status = (s32)XST_DEVICE_IS_STARTED;
	}
	return Status;
}
 1008194:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 1008198:	e3a00005 	mov	r0, #5
 100819c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10081a0:	e3080048 	movw	r0, #32840	; 0x8048
 10081a4:	e3a01054 	mov	r1, #84	; 0x54
 10081a8:	e3400105 	movt	r0, #261	; 0x105
 10081ac:	eb0000cd 	bl	10084e8 <Xil_Assert>
 10081b0:	e30a3480 	movw	r3, #42112	; 0xa480
 10081b4:	e3a02001 	mov	r2, #1
 10081b8:	e340310a 	movt	r3, #266	; 0x10a
 10081bc:	e1a00005 	mov	r0, r5
 10081c0:	e5832000 	str	r2, [r3]
 10081c4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 10081c8:	e3080048 	movw	r0, #32840	; 0x8048
 10081cc:	e3a01055 	mov	r1, #85	; 0x55
 10081d0:	e3400105 	movt	r0, #261	; 0x105
 10081d4:	eb0000c3 	bl	10084e8 <Xil_Assert>
 10081d8:	e3a03001 	mov	r3, #1
 10081dc:	e1a00004 	mov	r0, r4
 10081e0:	e5863000 	str	r3, [r6]
 10081e4:	e8bd8070 	pop	{r4, r5, r6, pc}

010081e8 <XScuTimer_Start>:
******************************************************************************/
void XScuTimer_Start(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 10081e8:	e3500000 	cmp	r0, #0
{
 10081ec:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10081f0:	0a000017 	beq	1008254 <XScuTimer_Start+0x6c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10081f4:	e5901008 	ldr	r1, [r0, #8]
 10081f8:	e3013111 	movw	r3, #4369	; 0x1111
 10081fc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1008200:	e30a4480 	movw	r4, #42112	; 0xa480
 1008204:	e340410a 	movt	r4, #266	; 0x10a
 1008208:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100820c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1008210:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008214:	1a000007 	bne	1008238 <XScuTimer_Start+0x50>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1008218:	e5901004 	ldr	r1, [r0, #4]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is started.
	 */
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 100821c:	e3022222 	movw	r2, #8738	; 0x2222
 1008220:	e3422222 	movt	r2, #8738	; 0x2222
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1008224:	e5913008 	ldr	r3, [r1, #8]
	Register |= XSCUTIMER_CONTROL_ENABLE_MASK;
 1008228:	e3833001 	orr	r3, r3, #1
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100822c:	e5813008 	str	r3, [r1, #8]
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 1008230:	e580200c 	str	r2, [r0, #12]
 1008234:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008238:	e3080048 	movw	r0, #32840	; 0x8048
 100823c:	e3a01089 	mov	r1, #137	; 0x89
 1008240:	e3400105 	movt	r0, #261	; 0x105
 1008244:	eb0000a7 	bl	10084e8 <Xil_Assert>
 1008248:	e3a03001 	mov	r3, #1
 100824c:	e5843000 	str	r3, [r4]
}
 1008250:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008254:	e3080048 	movw	r0, #32840	; 0x8048
 1008258:	e3a01088 	mov	r1, #136	; 0x88
 100825c:	e3400105 	movt	r0, #261	; 0x105
 1008260:	eb0000a0 	bl	10084e8 <Xil_Assert>
 1008264:	e30a3480 	movw	r3, #42112	; 0xa480
 1008268:	e3a02001 	mov	r2, #1
 100826c:	e340310a 	movt	r3, #266	; 0x10a
 1008270:	e5832000 	str	r2, [r3]
 1008274:	e8bd8010 	pop	{r4, pc}

01008278 <XScuTimer_Stop>:
******************************************************************************/
void XScuTimer_Stop(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1008278:	e3500000 	cmp	r0, #0
{
 100827c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1008280:	0a000015 	beq	10082dc <XScuTimer_Stop+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008284:	e5901008 	ldr	r1, [r0, #8]
 1008288:	e3013111 	movw	r3, #4369	; 0x1111
 100828c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1008290:	e30a4480 	movw	r4, #42112	; 0xa480
 1008294:	e340410a 	movt	r4, #266	; 0x10a
 1008298:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100829c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10082a0:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10082a4:	1a000005 	bne	10082c0 <XScuTimer_Stop+0x48>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 10082a8:	e5901004 	ldr	r1, [r0, #4]
	return *(volatile u32 *) Addr;
 10082ac:	e5913008 	ldr	r3, [r1, #8]
				  XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear the 'timer enable' bit in the register.
	 */
	Register &= (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 10082b0:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 10082b4:	e5813008 	str	r3, [r1, #8]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is stopped.
	 */
	InstancePtr->IsStarted = (u32)0;
 10082b8:	e580200c 	str	r2, [r0, #12]
 10082bc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10082c0:	e3080048 	movw	r0, #32840	; 0x8048
 10082c4:	e3a010b3 	mov	r1, #179	; 0xb3
 10082c8:	e3400105 	movt	r0, #261	; 0x105
 10082cc:	eb000085 	bl	10084e8 <Xil_Assert>
 10082d0:	e3a03001 	mov	r3, #1
 10082d4:	e5843000 	str	r3, [r4]
}
 10082d8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10082dc:	e3080048 	movw	r0, #32840	; 0x8048
 10082e0:	e3a010b2 	mov	r1, #178	; 0xb2
 10082e4:	e3400105 	movt	r0, #261	; 0x105
 10082e8:	eb00007e 	bl	10084e8 <Xil_Assert>
 10082ec:	e30a3480 	movw	r3, #42112	; 0xa480
 10082f0:	e3a02001 	mov	r2, #1
 10082f4:	e340310a 	movt	r3, #266	; 0x10a
 10082f8:	e5832000 	str	r2, [r3]
 10082fc:	e8bd8010 	pop	{r4, pc}

01008300 <XScuTimer_SetPrescaler>:
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
 1008300:	e3500000 	cmp	r0, #0
{
 1008304:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1008308:	0a000015 	beq	1008364 <XScuTimer_SetPrescaler+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100830c:	e590e008 	ldr	lr, [r0, #8]
 1008310:	e3012111 	movw	r2, #4369	; 0x1111
 1008314:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1008318:	e30a4480 	movw	r4, #42112	; 0xa480
 100831c:	e340410a 	movt	r4, #266	; 0x10a
 1008320:	e3a0c000 	mov	ip, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008324:	e15e0002 	cmp	lr, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1008328:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100832c:	1a000005 	bne	1008348 <XScuTimer_SetPrescaler+0x48>
	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1008330:	e5902004 	ldr	r2, [r0, #4]
	return *(volatile u32 *) Addr;
 1008334:	e5923008 	ldr	r3, [r2, #8]
					XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear all of the prescaler control bits in the register.
	 */
	ControlReg &= (u32)(~XSCUTIMER_CONTROL_PRESCALER_MASK);
 1008338:	e3c33cff 	bic	r3, r3, #65280	; 0xff00

	/*
	 * Set the prescaler value.
	 */
	ControlReg |= (((u32)PrescalerValue) << XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 100833c:	e1833401 	orr	r3, r3, r1, lsl #8
	*LocalAddr = Value;
 1008340:	e5823008 	str	r3, [r2, #8]
 1008344:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008348:	e3080048 	movw	r0, #32840	; 0x8048
 100834c:	e3a010e1 	mov	r1, #225	; 0xe1
 1008350:	e3400105 	movt	r0, #261	; 0x105
 1008354:	eb000063 	bl	10084e8 <Xil_Assert>
 1008358:	e3a03001 	mov	r3, #1
 100835c:	e5843000 	str	r3, [r4]
	/*
	 * Write the register with the new values.
	 */
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
			  XSCUTIMER_CONTROL_OFFSET, ControlReg);
}
 1008360:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008364:	e3080048 	movw	r0, #32840	; 0x8048
 1008368:	e3a010e0 	mov	r1, #224	; 0xe0
 100836c:	e3400105 	movt	r0, #261	; 0x105
 1008370:	eb00005c 	bl	10084e8 <Xil_Assert>
 1008374:	e30a3480 	movw	r3, #42112	; 0xa480
 1008378:	e3a02001 	mov	r2, #1
 100837c:	e340310a 	movt	r3, #266	; 0x10a
 1008380:	e5832000 	str	r2, [r3]
 1008384:	e8bd8010 	pop	{r4, pc}

01008388 <XScuTimer_GetPrescaler>:
*
* @note		None.
*
****************************************************************************/
u8 XScuTimer_GetPrescaler(XScuTimer *InstancePtr)
{
 1008388:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 100838c:	e2506000 	subs	r6, r0, #0
 1008390:	0a000014 	beq	10083e8 <XScuTimer_GetPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008394:	e5962008 	ldr	r2, [r6, #8]
 1008398:	e3013111 	movw	r3, #4369	; 0x1111
 100839c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10083a0:	e30a5480 	movw	r5, #42112	; 0xa480
 10083a4:	e340510a 	movt	r5, #266	; 0x10a
 10083a8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10083ac:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10083b0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10083b4:	1a000003 	bne	10083c8 <XScuTimer_GetPrescaler+0x40>

	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 10083b8:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 10083bc:	e5930008 	ldr	r0, [r3, #8]
				    XSCUTIMER_CONTROL_OFFSET);
	ControlReg &= XSCUTIMER_CONTROL_PRESCALER_MASK;

	return (u8)(ControlReg >> XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 10083c0:	e7e70450 	ubfx	r0, r0, #8, #8
 10083c4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10083c8:	e3080048 	movw	r0, #32840	; 0x8048
 10083cc:	e300110d 	movw	r1, #269	; 0x10d
 10083d0:	e3400105 	movt	r0, #261	; 0x105
 10083d4:	eb000043 	bl	10084e8 <Xil_Assert>
 10083d8:	e3a03001 	mov	r3, #1
 10083dc:	e1a00004 	mov	r0, r4
 10083e0:	e5853000 	str	r3, [r5]
}
 10083e4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10083e8:	e3080048 	movw	r0, #32840	; 0x8048
 10083ec:	e3a01f43 	mov	r1, #268	; 0x10c
 10083f0:	e3400105 	movt	r0, #261	; 0x105
 10083f4:	eb00003b 	bl	10084e8 <Xil_Assert>
 10083f8:	e30a3480 	movw	r3, #42112	; 0xa480
 10083fc:	e3a02001 	mov	r2, #1
 1008400:	e340310a 	movt	r3, #266	; 0x10a
 1008404:	e1a00006 	mov	r0, r6
 1008408:	e5832000 	str	r2, [r3]
 100840c:	e8bd8070 	pop	{r4, r5, r6, pc}

01008410 <XScuTimer_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XScuTimer_SelfTest(XScuTimer *InstancePtr)
{
 1008410:	e92d4070 	push	{r4, r5, r6, lr}

	/*
	 * Assert to ensure the inputs are valid and the instance has been
	 * initialized.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008414:	e2505000 	subs	r5, r0, #0
 1008418:	0a000021 	beq	10084a4 <XScuTimer_SelfTest+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100841c:	e5952008 	ldr	r2, [r5, #8]
 1008420:	e3013111 	movw	r3, #4369	; 0x1111
 1008424:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008428:	e30a6480 	movw	r6, #42112	; 0xa480
 100842c:	e340610a 	movt	r6, #266	; 0x10a
 1008430:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008434:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008438:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100843c:	1a000010 	bne	1008484 <XScuTimer_SelfTest+0x74>

	/*
	 * Save the contents of the Control Register and stop the timer.
	 */
	CtrlOrig = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1008440:	e5952004 	ldr	r2, [r5, #4]
	*LocalAddr = Value;
 1008444:	e30f400f 	movw	r4, #61455	; 0xf00f
 1008448:	e34a455a 	movt	r4, #42330	; 0xa55a
	return *(volatile u32 *) Addr;
 100844c:	e5923008 	ldr	r3, [r2, #8]
				  XSCUTIMER_CONTROL_OFFSET);
	Register = CtrlOrig & (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 1008450:	e3c31001 	bic	r1, r3, #1
	*LocalAddr = Value;
 1008454:	e5821008 	str	r1, [r2, #8]
	return *(volatile u32 *) Addr;
 1008458:	e5952004 	ldr	r2, [r5, #4]
 100845c:	e5921000 	ldr	r1, [r2]
	*LocalAddr = Value;
 1008460:	e5824000 	str	r4, [r2]
	return *(volatile u32 *) Addr;
 1008464:	e5952004 	ldr	r2, [r5, #4]
 1008468:	e5920000 	ldr	r0, [r2]
	*LocalAddr = Value;
 100846c:	e5821000 	str	r1, [r2]

	/*
	 * Restore the contents of the Load Register and Control Register.
	 */
	XScuTimer_LoadTimer(InstancePtr, LoadOrig);
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
 1008470:	e5952004 	ldr	r2, [r5, #4]

	/*
	 * Return a Failure if the contents of the Load Register do not
	 * match with the value written to it.
	 */
	if (Register != XSCUTIMER_SELFTEST_VALUE) {
 1008474:	e0500004 	subs	r0, r0, r4
 1008478:	13a00001 	movne	r0, #1
 100847c:	e5823008 	str	r3, [r2, #8]
 1008480:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008484:	e3080054 	movw	r0, #32852	; 0x8054
 1008488:	e3a0105b 	mov	r1, #91	; 0x5b
 100848c:	e3400105 	movt	r0, #261	; 0x105
 1008490:	eb000014 	bl	10084e8 <Xil_Assert>
 1008494:	e3a03001 	mov	r3, #1
 1008498:	e1a00004 	mov	r0, r4
 100849c:	e5863000 	str	r3, [r6]
	else {
		Status = (s32)XST_SUCCESS;
	}

	return Status;
}
 10084a0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10084a4:	e3080054 	movw	r0, #32852	; 0x8054
 10084a8:	e3a0105a 	mov	r1, #90	; 0x5a
 10084ac:	e3400105 	movt	r0, #261	; 0x105
 10084b0:	eb00000c 	bl	10084e8 <Xil_Assert>
 10084b4:	e30a3480 	movw	r3, #42112	; 0xa480
 10084b8:	e3a02001 	mov	r2, #1
 10084bc:	e340310a 	movt	r3, #266	; 0x10a
 10084c0:	e1a00005 	mov	r0, r5
 10084c4:	e5832000 	str	r2, [r3]
 10084c8:	e8bd8070 	pop	{r4, r5, r6, pc}

010084cc <XScuTimer_LookupConfig>:
{
	XScuTimer_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < XPAR_XSCUTIMER_NUM_INSTANCES; Index++) {
		if (XScuTimer_ConfigTable[Index].DeviceId == DeviceId) {
 10084cc:	e30833b4 	movw	r3, #33716	; 0x83b4
 10084d0:	e3403105 	movt	r3, #261	; 0x105
 10084d4:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuTimer_Config *)CfgPtr;
}
 10084d8:	e1520000 	cmp	r2, r0
 10084dc:	01a00003 	moveq	r0, r3
 10084e0:	13a00000 	movne	r0, #0
 10084e4:	e12fff1e 	bx	lr

010084e8 <Xil_Assert>:
*
******************************************************************************/
void Xil_Assert(const char8 *File, s32 Line)
{
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
 10084e8:	e3003044 	movw	r3, #68	; 0x44
 10084ec:	e3403106 	movt	r3, #262	; 0x106
 10084f0:	e5933000 	ldr	r3, [r3]
 10084f4:	e3530000 	cmp	r3, #0
 10084f8:	0a000009 	beq	1008524 <Xil_Assert+0x3c>
{
 10084fc:	e92d4010 	push	{r4, lr}
		(*Xil_AssertCallbackRoutine)(File, Line);
 1008500:	e12fff33 	blx	r3
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait != 0) {
 1008504:	e30833bc 	movw	r3, #33724	; 0x83bc
 1008508:	e3403105 	movt	r3, #261	; 0x105
 100850c:	e5933000 	ldr	r3, [r3]
 1008510:	e3530000 	cmp	r3, #0
 1008514:	08bd8010 	popeq	{r4, pc}
 1008518:	e3530000 	cmp	r3, #0
 100851c:	1afffffb 	bne	1008510 <Xil_Assert+0x28>
 1008520:	e8bd8010 	pop	{r4, pc}
 1008524:	e30833bc 	movw	r3, #33724	; 0x83bc
 1008528:	e3403105 	movt	r3, #261	; 0x105
 100852c:	e5933000 	ldr	r3, [r3]
 1008530:	e3530000 	cmp	r3, #0
 1008534:	012fff1e 	bxeq	lr
 1008538:	e3530000 	cmp	r3, #0
 100853c:	1afffffb 	bne	1008530 <Xil_Assert+0x48>
 1008540:	e12fff1e 	bx	lr

01008544 <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
 1008544:	e3003044 	movw	r3, #68	; 0x44
 1008548:	e3403106 	movt	r3, #262	; 0x106
 100854c:	e5830000 	str	r0, [r3]
}
 1008550:	e12fff1e 	bx	lr

01008554 <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
	(void) NullParameter;
}
 1008554:	e12fff1e 	bx	lr

01008558 <print>:
 * print -- do a raw print of a string
 */
#include "xil_printf.h"

void print(const char8 *ptr)
{
 1008558:	e92d4010 	push	{r4, lr}
 100855c:	e1a04000 	mov	r4, r0
#if HYP_GUEST && EL1_NONSECURE && XEN_USE_PV_CONSOLE
	XPVXenConsole_Write(ptr);
#else
#ifdef STDOUT_BASEADDRESS
  while (*ptr != (char8)0) {
 1008560:	e5d00000 	ldrb	r0, [r0]
 1008564:	e3500000 	cmp	r0, #0
 1008568:	08bd8010 	popeq	{r4, pc}
    outbyte (*ptr);
 100856c:	eb00025e 	bl	1008eec <outbyte>
  while (*ptr != (char8)0) {
 1008570:	e5f40001 	ldrb	r0, [r4, #1]!
 1008574:	e3500000 	cmp	r0, #0
 1008578:	1afffffb 	bne	100856c <print+0x14>
 100857c:	e8bd8010 	pop	{r4, pc}

01008580 <Xil_DCacheInvalidateLine>:
****************************************************************************/
void Xil_DCacheInvalidateLine(u32 adr)
{
	u32 currmask;

	currmask = mfcpsr();
 1008580:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008584:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1008588:	e129f002 	msr	CPSR_fc, r2
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100858c:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008590:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008594:	e5820770 	str	r0, [r2, #1904]	; 0x770
****************************************************************************/
void Xil_L2CacheInvalidateLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, (u32)adr);
	/* synchronize the processor */
	dsb();
 1008598:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100859c:	e3a02000 	mov	r2, #0
 10085a0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10085a4:	e3c0001f 	bic	r0, r0, #31
 10085a8:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 10085ac:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10085b0:	e129f003 	msr	CPSR_fc, r3
}
 10085b4:	e12fff1e 	bx	lr

010085b8 <Xil_DCacheInvalidateRange>:
	currmask = mfcpsr();
 10085b8:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10085bc:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10085c0:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10085c4:	e3510000 	cmp	r1, #0
 10085c8:	0a000031 	beq	1008694 <Xil_DCacheInvalidateRange+0xdc>
{
 10085cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10085d0:	e3a02000 	mov	r2, #0
		end = tempadr + len;
 10085d4:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10085d8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		if ((tempadr & (cacheline-1U)) != 0U) {
 10085dc:	e310001f 	tst	r0, #31
 10085e0:	0a00000d 	beq	100861c <Xil_DCacheInvalidateRange+0x64>
			tempadr &= (~(cacheline - 1U));
 10085e4:	e3c0001f 	bic	r0, r0, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10085e8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10085ec:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 10085f0:	f57ff04f 	dsb	sy
 10085f4:	e3a03a02 	mov	r3, #8192	; 0x2000
 10085f8:	e3a0e003 	mov	lr, #3
 10085fc:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008600:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1008604:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1008608:	e5830770 	str	r0, [r3, #1904]	; 0x770
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, adr);
#endif
	/* synchronize the processor */
	dsb();
 100860c:	f57ff04f 	dsb	sy
			tempadr += cacheline;
 1008610:	e2800020 	add	r0, r0, #32
 1008614:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1008618:	e5832730 	str	r2, [r3, #1840]	; 0x730
		if ((tempend & (cacheline-1U)) != 0U) {
 100861c:	e311001f 	tst	r1, #31
 1008620:	0a00000d 	beq	100865c <Xil_DCacheInvalidateRange+0xa4>
			tempend &= (~(cacheline - 1U));
 1008624:	e3c1101f 	bic	r1, r1, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008628:	e3a02000 	mov	r2, #0
 100862c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1008630:	ee071f3e 	mcr	15, 0, r1, cr7, cr14, {1}
	dsb();
 1008634:	f57ff04f 	dsb	sy
 1008638:	e3a03a02 	mov	r3, #8192	; 0x2000
 100863c:	e3a0e003 	mov	lr, #3
 1008640:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008644:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1008648:	e58317b0 	str	r1, [r3, #1968]	; 0x7b0
 100864c:	e5831770 	str	r1, [r3, #1904]	; 0x770
	dsb();
 1008650:	f57ff04f 	dsb	sy
 1008654:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1008658:	e5832730 	str	r2, [r3, #1840]	; 0x730
		while (tempadr < tempend) {
 100865c:	e1500001 	cmp	r0, r1
 1008660:	2a000008 	bcs	1008688 <Xil_DCacheInvalidateRange+0xd0>
			*L2CCOffset = tempadr;
 1008664:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008668:	e3a02000 	mov	r2, #0
 100866c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008670:	e5830770 	str	r0, [r3, #1904]	; 0x770
 1008674:	e5832730 	str	r2, [r3, #1840]	; 0x730
			asm_cp15_inval_dc_line_mva_poc(tempadr);
 1008678:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			tempadr += cacheline;
 100867c:	e2800020 	add	r0, r0, #32
		while (tempadr < tempend) {
 1008680:	e1500001 	cmp	r0, r1
 1008684:	3afffff9 	bcc	1008670 <Xil_DCacheInvalidateRange+0xb8>
	dsb();
 1008688:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 100868c:	e129f00c 	msr	CPSR_fc, ip
}
 1008690:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	dsb();
 1008694:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008698:	e129f00c 	msr	CPSR_fc, ip
 100869c:	e12fff1e 	bx	lr

010086a0 <Xil_DCacheFlushLine>:
	currmask = mfcpsr();
 10086a0:	e10f1000 	mrs	r1, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10086a4:	e38130c0 	orr	r3, r1, #192	; 0xc0
 10086a8:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10086ac:	e3a02000 	mov	r2, #0
 10086b0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10086b4:	e3c0301f 	bic	r3, r0, #31
 10086b8:	ee073f3e 	mcr	15, 0, r3, cr7, cr14, {1}
	dsb();
 10086bc:	f57ff04f 	dsb	sy
 10086c0:	e3a03a02 	mov	r3, #8192	; 0x2000
 10086c4:	e3a0c003 	mov	ip, #3
 10086c8:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10086cc:	e583cf40 	str	ip, [r3, #3904]	; 0xf40
 10086d0:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 10086d4:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 10086d8:	f57ff04f 	dsb	sy
 10086dc:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10086e0:	e5832730 	str	r2, [r3, #1840]	; 0x730
	mtcpsr(currmask);
 10086e4:	e129f001 	msr	CPSR_fc, r1
}
 10086e8:	e12fff1e 	bx	lr

010086ec <Xil_DCacheFlushRange>:
	currmask = mfcpsr();
 10086ec:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10086f0:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10086f4:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10086f8:	e3510000 	cmp	r1, #0
 10086fc:	0a00000c 	beq	1008734 <Xil_DCacheFlushRange+0x48>
		end = LocalAddr + len;
 1008700:	e0801001 	add	r1, r0, r1
		LocalAddr &= ~(cacheline - 1U);
 1008704:	e3c0001f 	bic	r0, r0, #31
		while (LocalAddr < end) {
 1008708:	e1510000 	cmp	r1, r0
 100870c:	9a000008 	bls	1008734 <Xil_DCacheFlushRange+0x48>
			*L2CCOffset = LocalAddr;
 1008710:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008714:	e3a02000 	mov	r2, #0
 1008718:	e34f38f0 	movt	r3, #63728	; 0xf8f0
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 100871c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			*L2CCOffset = LocalAddr;
 1008720:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1008724:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008728:	e1510000 	cmp	r1, r0
 100872c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008730:	8afffff9 	bhi	100871c <Xil_DCacheFlushRange+0x30>
	dsb();
 1008734:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008738:	e129f00c 	msr	CPSR_fc, ip
}
 100873c:	e12fff1e 	bx	lr

01008740 <Xil_DCacheStoreLine>:
	currmask = mfcpsr();
 1008740:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008744:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1008748:	e129f002 	msr	CPSR_fc, r2
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100874c:	e3a02000 	mov	r2, #0
 1008750:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1008754:	e3c0201f 	bic	r2, r0, #31
 1008758:	ee072f3a 	mcr	15, 0, r2, cr7, cr10, {1}
	dsb();
 100875c:	f57ff04f 	dsb	sy
 1008760:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008764:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008768:	e58207b0 	str	r0, [r2, #1968]	; 0x7b0
****************************************************************************/
void Xil_L2CacheStoreLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
	/* synchronize the processor */
	dsb();
 100876c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008770:	e129f003 	msr	CPSR_fc, r3
}
 1008774:	e12fff1e 	bx	lr

01008778 <Xil_ICacheInvalidateLine>:
	currmask = mfcpsr();
 1008778:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 100877c:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1008780:	e129f002 	msr	CPSR_fc, r2
 1008784:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008788:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 100878c:	e5820770 	str	r0, [r2, #1904]	; 0x770
	dsb();
 1008790:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008794:	e3a02001 	mov	r2, #1
 1008798:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 100879c:	e3c0001f 	bic	r0, r0, #31
 10087a0:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 10087a4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10087a8:	e129f003 	msr	CPSR_fc, r3
}
 10087ac:	e12fff1e 	bx	lr

010087b0 <Xil_ICacheInvalidateRange>:
	currmask = mfcpsr();
 10087b0:	e10f2000 	mrs	r2, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10087b4:	e38230c0 	orr	r3, r2, #192	; 0xc0
 10087b8:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10087bc:	e3510000 	cmp	r1, #0
 10087c0:	0a00000d 	beq	10087fc <Xil_ICacheInvalidateRange+0x4c>
		end = LocalAddr + len;
 10087c4:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10087c8:	e3a03001 	mov	r3, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 10087cc:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10087d0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
		while (LocalAddr < end) {
 10087d4:	e1510000 	cmp	r1, r0
 10087d8:	9a000007 	bls	10087fc <Xil_ICacheInvalidateRange+0x4c>
		*L2CCOffset = LocalAddr;
 10087dc:	e3a03a02 	mov	r3, #8192	; 0x2000
 10087e0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10087e4:	e5830770 	str	r0, [r3, #1904]	; 0x770
		dsb();
 10087e8:	f57ff04f 	dsb	sy
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 10087ec:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 10087f0:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 10087f4:	e1510000 	cmp	r1, r0
 10087f8:	8afffff9 	bhi	10087e4 <Xil_ICacheInvalidateRange+0x34>
	dsb();
 10087fc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008800:	e129f002 	msr	CPSR_fc, r2
}
 1008804:	e12fff1e 	bx	lr

01008808 <Xil_L1DCacheInvalidate>:
{
 1008808:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 100880c:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008810:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1008814:	e129f003 	msr	CPSR_fc, r3
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008818:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 100881c:	e3130004 	tst	r3, #4
 1008820:	1a00001e 	bne	10088a0 <Xil_L1DCacheInvalidate+0x98>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008824:	e3a04000 	mov	r4, #0
 1008828:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 100882c:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1008830:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 1008834:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1008838:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 100883c:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1008840:	e1a00380 	lsl	r0, r0, #7
 1008844:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1008848:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 100884c:	fa000415 	blx	10098a8 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1008850:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 1008854:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1008858:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 100885c:	e3500000 	cmp	r0, #0
 1008860:	e1a0cf04 	lsl	ip, r4, #30
 1008864:	13a03000 	movne	r3, #0
 1008868:	11a02003 	movne	r2, r3
 100886c:	0a000005 	beq	1008888 <Xil_L1DCacheInvalidate+0x80>
			C7Reg = Way | Set;
 1008870:	e182100c 	orr	r1, r2, ip
			asm_cp15_inval_dc_line_sw(C7Reg);
 1008874:	ee071f56 	mcr	15, 0, r1, cr7, cr6, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1008878:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 100887c:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1008880:	e1500003 	cmp	r0, r3
 1008884:	1afffff9 	bne	1008870 <Xil_L1DCacheInvalidate+0x68>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 1008888:	e1550004 	cmp	r5, r4
 100888c:	e2844001 	add	r4, r4, #1
 1008890:	1afffff1 	bne	100885c <Xil_L1DCacheInvalidate+0x54>
	dsb();
 1008894:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008898:	e129f006 	msr	CPSR_fc, r6
}
 100889c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	stack_size=stack_start-stack_end;
 10088a0:	e3011800 	movw	r1, #6144	; 0x1800
 10088a4:	e3000000 	movw	r0, #0
 10088a8:	e3400000 	movt	r0, #0
 10088ac:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 10088b0:	e0411000 	sub	r1, r1, r0
 10088b4:	ebffff8c 	bl	10086ec <Xil_DCacheFlushRange>
 10088b8:	eaffffd9 	b	1008824 <Xil_L1DCacheInvalidate+0x1c>

010088bc <Xil_L1DCacheEnable>:
{
 10088bc:	e92d4010 	push	{r4, lr}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10088c0:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 10088c4:	e3140004 	tst	r4, #4
 10088c8:	18bd8010 	popne	{r4, pc}
	Xil_L1DCacheInvalidate();
 10088cc:	ebffffcd 	bl	1008808 <Xil_L1DCacheInvalidate>
	CtrlReg |= (XREG_CP15_CONTROL_C_BIT);
 10088d0:	e3844004 	orr	r4, r4, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10088d4:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
}
 10088d8:	e8bd8010 	pop	{r4, pc}

010088dc <Xil_L1DCacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10088dc:	e3a03000 	mov	r3, #0
 10088e0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10088e4:	e3c0001f 	bic	r0, r0, #31
 10088e8:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 10088ec:	f57ff04f 	dsb	sy
}
 10088f0:	e12fff1e 	bx	lr

010088f4 <Xil_L1DCacheInvalidateRange>:
	currmask = mfcpsr();
 10088f4:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10088f8:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10088fc:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1008900:	e3510000 	cmp	r1, #0
 1008904:	0a000009 	beq	1008930 <Xil_L1DCacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1008908:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 100890c:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008910:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1008914:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1008918:	e1510000 	cmp	r1, r0
 100891c:	9a000003 	bls	1008930 <Xil_L1DCacheInvalidateRange+0x3c>
			asm_cp15_inval_dc_line_mva_poc(LocalAddr);
 1008920:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			LocalAddr += cacheline;
 1008924:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008928:	e1510000 	cmp	r1, r0
 100892c:	8afffffb 	bhi	1008920 <Xil_L1DCacheInvalidateRange+0x2c>
	dsb();
 1008930:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008934:	e129f003 	msr	CPSR_fc, r3
}
 1008938:	e12fff1e 	bx	lr

0100893c <Xil_L1DCacheFlush>:
{
 100893c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1008940:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008944:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1008948:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 100894c:	e3a04000 	mov	r4, #0
 1008950:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1008954:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1008958:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 100895c:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1008960:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1008964:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1008968:	e1a00380 	lsl	r0, r0, #7
 100896c:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1008970:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 1008974:	fa0003cb 	blx	10098a8 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1008978:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 100897c:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1008980:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1008984:	e3500000 	cmp	r0, #0
 1008988:	e1a0cf04 	lsl	ip, r4, #30
 100898c:	13a03000 	movne	r3, #0
 1008990:	11a02003 	movne	r2, r3
 1008994:	0a000005 	beq	10089b0 <Xil_L1DCacheFlush+0x74>
			C7Reg = Way | Set;
 1008998:	e182100c 	orr	r1, r2, ip
			asm_cp15_clean_inval_dc_line_sw(C7Reg);
 100899c:	ee071f5e 	mcr	15, 0, r1, cr7, cr14, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10089a0:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 10089a4:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10089a8:	e1500003 	cmp	r0, r3
 10089ac:	1afffff9 	bne	1008998 <Xil_L1DCacheFlush+0x5c>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 10089b0:	e1550004 	cmp	r5, r4
 10089b4:	e2844001 	add	r4, r4, #1
 10089b8:	1afffff1 	bne	1008984 <Xil_L1DCacheFlush+0x48>
	dsb();
 10089bc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10089c0:	e129f006 	msr	CPSR_fc, r6
}
 10089c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010089c8 <Xil_L1DCacheDisable>:
{
 10089c8:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheFlush();
 10089cc:	ebffffda 	bl	100893c <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10089d0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 10089d4:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10089d8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10089dc:	e8bd8010 	pop	{r4, pc}

010089e0 <Xil_DCacheFlush>:
{
 10089e0:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 10089e4:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10089e8:	e38430c0 	orr	r3, r4, #192	; 0xc0
 10089ec:	e129f003 	msr	CPSR_fc, r3
	Xil_L1DCacheFlush();
 10089f0:	ebffffd1 	bl	100893c <Xil_L1DCacheFlush>
 10089f4:	e3a02a02 	mov	r2, #8192	; 0x2000
 10089f8:	e3a01003 	mov	r1, #3
 10089fc:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008a00:	e30f3fff 	movw	r3, #65535	; 0xffff
 1008a04:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1008a08:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1008a0c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1008a10:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1008a14:	e3530000 	cmp	r3, #0
 1008a18:	1afffffb 	bne	1008a0c <Xil_DCacheFlush+0x2c>
	*LocalAddr = Value;
 1008a1c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008a20:	e3a02000 	mov	r2, #0
 1008a24:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008a28:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008a2c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008a30:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008a34:	e129f004 	msr	CPSR_fc, r4
}
 1008a38:	e8bd8010 	pop	{r4, pc}

01008a3c <Xil_L1DCacheFlushLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008a3c:	e3a03000 	mov	r3, #0
 1008a40:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1008a44:	e3c0001f 	bic	r0, r0, #31
 1008a48:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 1008a4c:	f57ff04f 	dsb	sy
}
 1008a50:	e12fff1e 	bx	lr

01008a54 <Xil_L1DCacheFlushRange>:
	currmask = mfcpsr();
 1008a54:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008a58:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1008a5c:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1008a60:	e3510000 	cmp	r1, #0
 1008a64:	0a000009 	beq	1008a90 <Xil_L1DCacheFlushRange+0x3c>
		end = LocalAddr + len;
 1008a68:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008a6c:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008a70:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008a74:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1008a78:	e1510000 	cmp	r1, r0
 1008a7c:	9a000003 	bls	1008a90 <Xil_L1DCacheFlushRange+0x3c>
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1008a80:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			LocalAddr += cacheline;
 1008a84:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008a88:	e1510000 	cmp	r1, r0
 1008a8c:	8afffffb 	bhi	1008a80 <Xil_L1DCacheFlushRange+0x2c>
	dsb();
 1008a90:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008a94:	e129f003 	msr	CPSR_fc, r3
}
 1008a98:	e12fff1e 	bx	lr

01008a9c <Xil_L1DCacheStoreLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1008a9c:	e3a03000 	mov	r3, #0
 1008aa0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1008aa4:	e3c0001f 	bic	r0, r0, #31
 1008aa8:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
	dsb();
 1008aac:	f57ff04f 	dsb	sy
}
 1008ab0:	e12fff1e 	bx	lr

01008ab4 <Xil_L1ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008ab4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 1008ab8:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1008abc:	112fff1e 	bxne	lr
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008ac0:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1008ac4:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1008ac8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1008acc:	e12fff1e 	bx	lr

01008ad0 <Xil_L1ICacheDisable>:
	dsb();
 1008ad0:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008ad4:	e3a03000 	mov	r3, #0
 1008ad8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008adc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1008ae0:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1008ae4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1008ae8:	e12fff1e 	bx	lr

01008aec <Xil_L1ICacheInvalidate>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008aec:	e3a03001 	mov	r3, #1
 1008af0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008af4:	e3a03000 	mov	r3, #0
 1008af8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 1008afc:	f57ff04f 	dsb	sy
}
 1008b00:	e12fff1e 	bx	lr

01008b04 <Xil_L1ICacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008b04:	e3a03001 	mov	r3, #1
 1008b08:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 1008b0c:	e3c0001f 	bic	r0, r0, #31
 1008b10:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 1008b14:	f57ff04f 	dsb	sy
}
 1008b18:	e12fff1e 	bx	lr

01008b1c <Xil_L1ICacheInvalidateRange>:
	currmask = mfcpsr();
 1008b1c:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008b20:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1008b24:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1008b28:	e3510000 	cmp	r1, #0
 1008b2c:	0a000009 	beq	1008b58 <Xil_L1ICacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1008b30:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008b34:	e3a02001 	mov	r2, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008b38:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008b3c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1008b40:	e1510000 	cmp	r1, r0
 1008b44:	9a000003 	bls	1008b58 <Xil_L1ICacheInvalidateRange+0x3c>
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1008b48:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 1008b4c:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008b50:	e1510000 	cmp	r1, r0
 1008b54:	8afffffb 	bhi	1008b48 <Xil_L1ICacheInvalidateRange+0x2c>
	dsb();
 1008b58:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008b5c:	e129f003 	msr	CPSR_fc, r3
}
 1008b60:	e12fff1e 	bx	lr

01008b64 <Xil_L2CacheDisable>:
	return *(volatile u32 *) Addr;
 1008b64:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008b68:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008b6c:	e5932100 	ldr	r2, [r3, #256]	; 0x100
    if((L2CCReg & 0x1U) != 0U) {
 1008b70:	e3120001 	tst	r2, #1
 1008b74:	012fff1e 	bxeq	lr
	*LocalAddr = Value;
 1008b78:	e30f2fff 	movw	r2, #65535	; 0xffff
 1008b7c:	e3a01003 	mov	r1, #3
 1008b80:	e5831f40 	str	r1, [r3, #3904]	; 0xf40
 1008b84:	e58327fc 	str	r2, [r3, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1008b88:	e59327fc 	ldr	r2, [r3, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1008b8c:	e6ff2072 	uxth	r2, r2
	while(ResultL2Cache != (u32)0U) {
 1008b90:	e3520000 	cmp	r2, #0
 1008b94:	0a000004 	beq	1008bac <Xil_L2CacheDisable+0x48>
 1008b98:	e1a02003 	mov	r2, r3
 1008b9c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
		ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1008ba0:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1008ba4:	e3530000 	cmp	r3, #0
 1008ba8:	1afffffb 	bne	1008b9c <Xil_L2CacheDisable+0x38>
	*LocalAddr = Value;
 1008bac:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008bb0:	e3a02000 	mov	r2, #0
 1008bb4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008bb8:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008bbc:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008bc0:	f57ff04f 	dsb	sy
	return *(volatile u32 *) Addr;
 1008bc4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	    Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 1008bc8:	e3c22001 	bic	r2, r2, #1
	*LocalAddr = Value;
 1008bcc:	e5832100 	str	r2, [r3, #256]	; 0x100
		dsb();
 1008bd0:	f57ff04f 	dsb	sy
}
 1008bd4:	e12fff1e 	bx	lr

01008bd8 <Xil_DCacheDisable>:
{
 1008bd8:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 1008bdc:	ebffffe0 	bl	1008b64 <Xil_L2CacheDisable>
	Xil_L1DCacheFlush();
 1008be0:	ebffff55 	bl	100893c <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008be4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 1008be8:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1008bec:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1008bf0:	e8bd8010 	pop	{r4, pc}

01008bf4 <Xil_ICacheDisable>:
{
 1008bf4:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 1008bf8:	ebffffd9 	bl	1008b64 <Xil_L2CacheDisable>
	dsb();
 1008bfc:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008c00:	e3a03000 	mov	r3, #0
 1008c04:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008c08:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1008c0c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1008c10:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1008c14:	e8bd8010 	pop	{r4, pc}

01008c18 <Xil_L2CacheInvalidate>:
	return *(volatile u32 *) Addr;
 1008c18:	e3a03a02 	mov	r3, #8192	; 0x2000
{
 1008c1c:	e92d4010 	push	{r4, lr}
 1008c20:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008c24:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) != 0U) {
 1008c28:	e3130001 	tst	r3, #1
 1008c2c:	1a00000d 	bne	1008c68 <Xil_L2CacheInvalidate+0x50>
	*LocalAddr = Value;
 1008c30:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008c34:	e30f3fff 	movw	r3, #65535	; 0xffff
 1008c38:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008c3c:	e582377c 	str	r3, [r2, #1916]	; 0x77c
	return *(volatile u32 *) Addr;
 1008c40:	e592377c 	ldr	r3, [r2, #1916]	; 0x77c
	ResultDCache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET)
 1008c44:	e6ff3073 	uxth	r3, r3
	while(ResultDCache != (u32)0U) {
 1008c48:	e3530000 	cmp	r3, #0
 1008c4c:	1afffffb 	bne	1008c40 <Xil_L2CacheInvalidate+0x28>
	*LocalAddr = Value;
 1008c50:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008c54:	e3a02000 	mov	r2, #0
 1008c58:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008c5c:	e5832730 	str	r2, [r3, #1840]	; 0x730
	dsb();
 1008c60:	f57ff04f 	dsb	sy
}
 1008c64:	e8bd8010 	pop	{r4, pc}
	stack_size=stack_start-stack_end;
 1008c68:	e3011800 	movw	r1, #6144	; 0x1800
 1008c6c:	e3000000 	movw	r0, #0
 1008c70:	e3400000 	movt	r0, #0
 1008c74:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1008c78:	e0411000 	sub	r1, r1, r0
 1008c7c:	ebfffe9a 	bl	10086ec <Xil_DCacheFlushRange>
 1008c80:	eaffffea 	b	1008c30 <Xil_L2CacheInvalidate+0x18>

01008c84 <Xil_DCacheInvalidate>:
{
 1008c84:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1008c88:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008c8c:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1008c90:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1008c94:	ebffffdf 	bl	1008c18 <Xil_L2CacheInvalidate>
	Xil_L1DCacheInvalidate();
 1008c98:	ebfffeda 	bl	1008808 <Xil_L1DCacheInvalidate>
	mtcpsr(currmask);
 1008c9c:	e129f004 	msr	CPSR_fc, r4
}
 1008ca0:	e8bd8010 	pop	{r4, pc}

01008ca4 <Xil_ICacheInvalidate>:
{
 1008ca4:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1008ca8:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008cac:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1008cb0:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1008cb4:	ebffffd7 	bl	1008c18 <Xil_L2CacheInvalidate>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1008cb8:	e3a03001 	mov	r3, #1
 1008cbc:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008cc0:	e3a03000 	mov	r3, #0
 1008cc4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 1008cc8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008ccc:	e129f004 	msr	CPSR_fc, r4
}
 1008cd0:	e8bd8010 	pop	{r4, pc}

01008cd4 <Xil_L2CacheEnable.part.0>:
void Xil_L2CacheEnable(void)
 1008cd4:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 1008cd8:	e3a04a02 	mov	r4, #8192	; 0x2000
 1008cdc:	e34f48f0 	movt	r4, #63728	; 0xf8f0
	*LocalAddr = Value;
 1008ce0:	e3001111 	movw	r1, #273	; 0x111
 1008ce4:	e3002121 	movw	r2, #289	; 0x121
	return *(volatile u32 *) Addr;
 1008ce8:	e5943104 	ldr	r3, [r4, #260]	; 0x104
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
 1008cec:	e3c3380e 	bic	r3, r3, #917504	; 0xe0000
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
 1008cf0:	e3833472 	orr	r3, r3, #1912602624	; 0x72000000
 1008cf4:	e3833836 	orr	r3, r3, #3538944	; 0x360000
	*LocalAddr = Value;
 1008cf8:	e5843104 	str	r3, [r4, #260]	; 0x104
 1008cfc:	e5841108 	str	r1, [r4, #264]	; 0x108
 1008d00:	e584210c 	str	r2, [r4, #268]	; 0x10c
	return *(volatile u32 *) Addr;
 1008d04:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	*LocalAddr = Value;
 1008d08:	e5843220 	str	r3, [r4, #544]	; 0x220
		Xil_L2CacheInvalidate();
 1008d0c:	ebffffc1 	bl	1008c18 <Xil_L2CacheInvalidate>
	return *(volatile u32 *) Addr;
 1008d10:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	*LocalAddr = Value;
 1008d14:	e3a02000 	mov	r2, #0
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 1008d18:	e3833001 	orr	r3, r3, #1
 1008d1c:	e5843100 	str	r3, [r4, #256]	; 0x100
 1008d20:	e5842730 	str	r2, [r4, #1840]	; 0x730
	    dsb();
 1008d24:	f57ff04f 	dsb	sy
}
 1008d28:	e8bd8010 	pop	{r4, pc}

01008d2c <Xil_L2CacheEnable>:
	return *(volatile u32 *) Addr;
 1008d2c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008d30:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008d34:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1008d38:	e3130001 	tst	r3, #1
 1008d3c:	112fff1e 	bxne	lr
 1008d40:	eaffffe3 	b	1008cd4 <Xil_L2CacheEnable.part.0>

01008d44 <Xil_DCacheEnable>:
{
 1008d44:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheEnable();
 1008d48:	ebfffedb 	bl	10088bc <Xil_L1DCacheEnable>
 1008d4c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008d50:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008d54:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1008d58:	e3130001 	tst	r3, #1
 1008d5c:	18bd8010 	popne	{r4, pc}
}
 1008d60:	e8bd4010 	pop	{r4, lr}
 1008d64:	eaffffda 	b	1008cd4 <Xil_L2CacheEnable.part.0>

01008d68 <Xil_ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1008d68:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 1008d6c:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1008d70:	1a000002 	bne	1008d80 <Xil_ICacheEnable+0x18>
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1008d74:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1008d78:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1008d7c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
 1008d80:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008d84:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008d88:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1008d8c:	e3130001 	tst	r3, #1
 1008d90:	112fff1e 	bxne	lr
 1008d94:	eaffffce 	b	1008cd4 <Xil_L2CacheEnable.part.0>

01008d98 <Xil_L2CacheInvalidateLine>:
	*LocalAddr = Value;
 1008d98:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008d9c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008da0:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1008da4:	f57ff04f 	dsb	sy
}
 1008da8:	e12fff1e 	bx	lr

01008dac <Xil_L2CacheInvalidateRange>:
	currmask = mfcpsr();
 1008dac:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008db0:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1008db4:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1008db8:	e3510000 	cmp	r1, #0
 1008dbc:	0a000011 	beq	1008e08 <Xil_L2CacheInvalidateRange+0x5c>
		end = LocalAddr + len;
 1008dc0:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008dc4:	e3c0001f 	bic	r0, r0, #31
 1008dc8:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 1008dcc:	e1510000 	cmp	r1, r0
 1008dd0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008dd4:	e3a02003 	mov	r2, #3
 1008dd8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1008ddc:	9a000005 	bls	1008df8 <Xil_L2CacheInvalidateRange+0x4c>
 1008de0:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 1008de4:	e5830770 	str	r0, [r3, #1904]	; 0x770
			LocalAddr += cacheline;
 1008de8:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008dec:	e1510000 	cmp	r1, r0
 1008df0:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008df4:	8afffffa 	bhi	1008de4 <Xil_L2CacheInvalidateRange+0x38>
 1008df8:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008dfc:	e3a02000 	mov	r2, #0
 1008e00:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008e04:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008e08:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008e0c:	e129f00c 	msr	CPSR_fc, ip
}
 1008e10:	e12fff1e 	bx	lr

01008e14 <Xil_L2CacheFlush>:
 1008e14:	e3a02a02 	mov	r2, #8192	; 0x2000
 1008e18:	e3a01003 	mov	r1, #3
 1008e1c:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1008e20:	e30f3fff 	movw	r3, #65535	; 0xffff
 1008e24:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1008e28:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1008e2c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1008e30:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1008e34:	e3530000 	cmp	r3, #0
 1008e38:	1afffffb 	bne	1008e2c <Xil_L2CacheFlush+0x18>
	*LocalAddr = Value;
 1008e3c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008e40:	e3a02000 	mov	r2, #0
 1008e44:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008e48:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008e4c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008e50:	f57ff04f 	dsb	sy
}
 1008e54:	e12fff1e 	bx	lr

01008e58 <Xil_L2CacheFlushLine>:
 1008e58:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008e5c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008e60:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1008e64:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1008e68:	f57ff04f 	dsb	sy
}
 1008e6c:	e12fff1e 	bx	lr

01008e70 <Xil_L2CacheFlushRange>:
	currmask = mfcpsr();
 1008e70:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1008e74:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1008e78:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1008e7c:	e3510000 	cmp	r1, #0
 1008e80:	0a000011 	beq	1008ecc <Xil_L2CacheFlushRange+0x5c>
		end = LocalAddr + len;
 1008e84:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1008e88:	e3c0001f 	bic	r0, r0, #31
 1008e8c:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 1008e90:	e1510000 	cmp	r1, r0
 1008e94:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008e98:	e3a02003 	mov	r2, #3
 1008e9c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1008ea0:	9a000005 	bls	1008ebc <Xil_L2CacheFlushRange+0x4c>
 1008ea4:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 1008ea8:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1008eac:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1008eb0:	e1510000 	cmp	r1, r0
 1008eb4:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1008eb8:	8afffffa 	bhi	1008ea8 <Xil_L2CacheFlushRange+0x38>
 1008ebc:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008ec0:	e3a02000 	mov	r2, #0
 1008ec4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008ec8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1008ecc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1008ed0:	e129f00c 	msr	CPSR_fc, ip
}
 1008ed4:	e12fff1e 	bx	lr

01008ed8 <Xil_L2CacheStoreLine>:
 1008ed8:	e3a03a02 	mov	r3, #8192	; 0x2000
 1008edc:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1008ee0:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
	dsb();
 1008ee4:	f57ff04f 	dsb	sy
}
 1008ee8:	e12fff1e 	bx	lr

01008eec <outbyte>:
#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
	 XUartPs_SendByte(STDOUT_BASEADDRESS, c);
 1008eec:	e1a01000 	mov	r1, r0
 1008ef0:	e3a00a01 	mov	r0, #4096	; 0x1000
 1008ef4:	e34e0000 	movt	r0, #57344	; 0xe000
 1008ef8:	ea0001ea 	b	10096a8 <XUartPs_SendByte>

01008efc <XGetPlatform_Info>:
#elif (__microblaze__)
	return XPLAT_MICROBLAZE;
#else
	return XPLAT_ZYNQ;
#endif
}
 1008efc:	e3a00004 	mov	r0, #4
 1008f00:	e12fff1e 	bx	lr

01008f04 <getnum>:
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
static s32 getnum( charptr* linep)
{
 1008f04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1008f08:	e1a07000 	mov	r7, r0
    s32 n;
    s32 ResultIsDigit = 0;
    charptr cptr;
    n = 0;
    cptr = *linep;
 1008f0c:	e5906000 	ldr	r6, [r0]
	if(cptr != NULL){
 1008f10:	e3560000 	cmp	r6, #0
 1008f14:	0a00001b 	beq	1008f88 <getnum+0x84>
		ResultIsDigit = isdigit(((s32)*cptr));
 1008f18:	fa000817 	blx	100af7c <__locale_ctype_ptr>
 1008f1c:	e5d63000 	ldrb	r3, [r6]
 1008f20:	e0800003 	add	r0, r0, r3
	}
    while (ResultIsDigit != 0) {
 1008f24:	e5d05001 	ldrb	r5, [r0, #1]
 1008f28:	e2155004 	ands	r5, r5, #4
 1008f2c:	0a000012 	beq	1008f7c <getnum+0x78>
 1008f30:	e2864001 	add	r4, r6, #1
 1008f34:	e3a05000 	mov	r5, #0
		if(cptr != NULL){
 1008f38:	e3540001 	cmp	r4, #1
 1008f3c:	0a000013 	beq	1008f90 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
			cptr += 1;
			if(cptr != NULL){
 1008f40:	e3540000 	cmp	r4, #0
			cptr += 1;
 1008f44:	e1a06004 	mov	r6, r4
			if(cptr != NULL){
 1008f48:	0a000010 	beq	1008f90 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
 1008f4c:	e5543001 	ldrb	r3, [r4, #-1]
 1008f50:	e0855105 	add	r5, r5, r5, lsl #2
 1008f54:	e2844001 	add	r4, r4, #1
 1008f58:	e2433030 	sub	r3, r3, #48	; 0x30
 1008f5c:	e0835085 	add	r5, r3, r5, lsl #1
				ResultIsDigit = isdigit(((s32)*cptr));
 1008f60:	fa000805 	blx	100af7c <__locale_ctype_ptr>
			}
		}
		ResultIsDigit = isdigit(((s32)*cptr));
 1008f64:	fa000804 	blx	100af7c <__locale_ctype_ptr>
 1008f68:	e5d63000 	ldrb	r3, [r6]
 1008f6c:	e0800003 	add	r0, r0, r3
    while (ResultIsDigit != 0) {
 1008f70:	e5d03001 	ldrb	r3, [r0, #1]
 1008f74:	e3130004 	tst	r3, #4
 1008f78:	1affffee 	bne	1008f38 <getnum+0x34>
	}
    *linep = ((charptr )(cptr));
 1008f7c:	e5876000 	str	r6, [r7]
    return(n);
}
 1008f80:	e1a00005 	mov	r0, r5
 1008f84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1008f88:	e1a05006 	mov	r5, r6
 1008f8c:	eafffffa 	b	1008f7c <getnum+0x78>
		ResultIsDigit = isdigit(((s32)*cptr));
 1008f90:	fa0007f9 	blx	100af7c <__locale_ctype_ptr>
 1008f94:	e3a03000 	mov	r3, #0
 1008f98:	e5d33000 	ldrb	r3, [r3]
 1008f9c:	e7f000f0 	udf	#0

01008fa0 <padding.part.0>:
static void padding( const s32 l_flag, const struct params_s *par)
 1008fa0:	e92d4070 	push	{r4, r5, r6, lr}
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1008fa4:	e5903004 	ldr	r3, [r0, #4]
 1008fa8:	e5904000 	ldr	r4, [r0]
 1008fac:	e1540003 	cmp	r4, r3
 1008fb0:	a8bd8070 	popge	{r4, r5, r6, pc}
 1008fb4:	e1a05000 	mov	r5, r0
            outbyte( par->pad_character);
 1008fb8:	e5d5000c 	ldrb	r0, [r5, #12]
        for (; i<(par->num1); i++) {
 1008fbc:	e2844001 	add	r4, r4, #1
            outbyte( par->pad_character);
 1008fc0:	ebffffc9 	bl	1008eec <outbyte>
        for (; i<(par->num1); i++) {
 1008fc4:	e5953004 	ldr	r3, [r5, #4]
 1008fc8:	e1540003 	cmp	r4, r3
 1008fcc:	bafffff9 	blt	1008fb8 <padding.part.0+0x18>
 1008fd0:	e8bd8070 	pop	{r4, r5, r6, pc}

01008fd4 <outnum>:
{
 1008fd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char8 digits[] = "0123456789ABCDEF";
 1008fd8:	e308406c 	movw	r4, #32876	; 0x806c
 1008fdc:	e3404105 	movt	r4, #261	; 0x105
{
 1008fe0:	e1a05000 	mov	r5, r0
 1008fe4:	e1a08001 	mov	r8, r1
 1008fe8:	e1a07002 	mov	r7, r2
    const char8 digits[] = "0123456789ABCDEF";
 1008fec:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
{
 1008ff0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    const char8 digits[] = "0123456789ABCDEF";
 1008ff4:	e28d9004 	add	r9, sp, #4
 1008ff8:	e28d6018 	add	r6, sp, #24
 1008ffc:	e28dc017 	add	ip, sp, #23
 1009000:	e28de037 	add	lr, sp, #55	; 0x37
 1009004:	e5944000 	ldr	r4, [r4]
 1009008:	e8a9000f 	stmia	r9!, {r0, r1, r2, r3}
	outbuf[i] = '0';
 100900c:	e3a03030 	mov	r3, #48	; 0x30
    const char8 digits[] = "0123456789ABCDEF";
 1009010:	e5c94000 	strb	r4, [r9]
	outbuf[i] = '0';
 1009014:	e5ec3001 	strb	r3, [ip, #1]!
    for(i = 0; i<32; i++) {
 1009018:	e15c000e 	cmp	ip, lr
 100901c:	1afffffc 	bne	1009014 <outnum+0x40>
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1009020:	e5973018 	ldr	r3, [r7, #24]
 1009024:	e3530000 	cmp	r3, #0
 1009028:	1a000039 	bne	1009114 <outnum+0x140>
 100902c:	e1a03fa5 	lsr	r3, r5, #31
 1009030:	e358000a 	cmp	r8, #10
 1009034:	13a03000 	movne	r3, #0
 1009038:	02033001 	andeq	r3, r3, #1
 100903c:	e3530000 	cmp	r3, #0
		num =(-(n));
 1009040:	12655000 	rsbne	r5, r5, #0
        negative = 1;
 1009044:	13a0b001 	movne	fp, #1
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1009048:	0a000031 	beq	1009114 <outnum+0x140>
        negative = 0;
 100904c:	e1a09006 	mov	r9, r6
    i = 0;
 1009050:	e3a0a000 	mov	sl, #0
 1009054:	ea000000 	b	100905c <outnum+0x88>
		i++;
 1009058:	e1a0a004 	mov	sl, r4
		outbuf[i] = digits[(num % base)];
 100905c:	e1a00005 	mov	r0, r5
 1009060:	e1a01008 	mov	r1, r8
 1009064:	fa0002a6 	blx	1009b04 <__aeabi_uidivmod>
 1009068:	e28d3038 	add	r3, sp, #56	; 0x38
    } while (num > 0);
 100906c:	e1550008 	cmp	r5, r8
		outbuf[i] = digits[(num % base)];
 1009070:	e0831001 	add	r1, r3, r1
		i++;
 1009074:	e28a4001 	add	r4, sl, #1
		outbuf[i] = digits[(num % base)];
 1009078:	e5513034 	ldrb	r3, [r1, #-52]	; 0xffffffcc
		num /= base;
 100907c:	e1a05000 	mov	r5, r0
		i++;
 1009080:	e1a02004 	mov	r2, r4
		outbuf[i] = digits[(num % base)];
 1009084:	e4c93001 	strb	r3, [r9], #1
    } while (num > 0);
 1009088:	2afffff2 	bcs	1009058 <outnum+0x84>
    if (negative != 0) {
 100908c:	e35b0000 	cmp	fp, #0
 1009090:	0a000005 	beq	10090ac <outnum+0xd8>
		outbuf[i] = '-';
 1009094:	e28d3038 	add	r3, sp, #56	; 0x38
		i++;
 1009098:	e28a2002 	add	r2, sl, #2
		outbuf[i] = '-';
 100909c:	e0833004 	add	r3, r3, r4
 10090a0:	e2844001 	add	r4, r4, #1
 10090a4:	e3a0102d 	mov	r1, #45	; 0x2d
 10090a8:	e5431020 	strb	r1, [r3, #-32]	; 0xffffffe0
    outbuf[i] = '\0';
 10090ac:	e28d3038 	add	r3, sp, #56	; 0x38
    par->len = (s32)strlen(outbuf);
 10090b0:	e1a00006 	mov	r0, r6
    outbuf[i] = '\0';
 10090b4:	e0832002 	add	r2, r3, r2
 10090b8:	e3a03000 	mov	r3, #0
 10090bc:	e5423020 	strb	r3, [r2, #-32]	; 0xffffffe0
    par->len = (s32)strlen(outbuf);
 10090c0:	fa000e0e 	blx	100c900 <strlen>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10090c4:	e1c721d0 	ldrd	r2, [r7, #16]
    par->len = (s32)strlen(outbuf);
 10090c8:	e5870000 	str	r0, [r7]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10090cc:	e16f3f13 	clz	r3, r3
 10090d0:	e3520000 	cmp	r2, #0
 10090d4:	e1a032a3 	lsr	r3, r3, #5
 10090d8:	03a03000 	moveq	r3, #0
 10090dc:	e3530000 	cmp	r3, #0
 10090e0:	1a00000d 	bne	100911c <outnum+0x148>
 10090e4:	e0864004 	add	r4, r6, r4
	outbyte( outbuf[i] );
 10090e8:	e5740001 	ldrb	r0, [r4, #-1]!
 10090ec:	ebffff7e 	bl	1008eec <outbyte>
    while (&outbuf[i] >= outbuf) {
 10090f0:	e1540006 	cmp	r4, r6
 10090f4:	1afffffb 	bne	10090e8 <outnum+0x114>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10090f8:	e5972014 	ldr	r2, [r7, #20]
 10090fc:	e5973010 	ldr	r3, [r7, #16]
 1009100:	e3520000 	cmp	r2, #0
 1009104:	13530000 	cmpne	r3, #0
 1009108:	1a000006 	bne	1009128 <outnum+0x154>
}
 100910c:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1009110:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        negative = 0;
 1009114:	e3a0b000 	mov	fp, #0
 1009118:	eaffffcb 	b	100904c <outnum+0x78>
 100911c:	e1a00007 	mov	r0, r7
 1009120:	ebffff9e 	bl	1008fa0 <padding.part.0>
 1009124:	eaffffee 	b	10090e4 <outnum+0x110>
 1009128:	e1a00007 	mov	r0, r7
}
 100912c:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1009130:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1009134:	eaffff99 	b	1008fa0 <padding.part.0>

01009138 <xil_printf>:
void xil_printf( const char8 *ctrl1, ...){
	XPVXenConsole_Printf(ctrl1);
}
#else
void xil_printf( const char8 *ctrl1, ...)
{
 1009138:	e92d000f 	push	{r0, r1, r2, r3}
 100913c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1009140:	e24dd02c 	sub	sp, sp, #44	; 0x2c
        /* initialize all the flags for this format.   */
        dot_flag = 0;
#if defined (__aarch64__) || defined (__arch64__)
		long_flag = 0;
#endif
        par.unsigned_flag = 0;
 1009144:	e3a04000 	mov	r4, #0
		par.left_flag = 0;
		par.do_padding = 0;
        par.pad_character = ' ';
 1009148:	e3a06020 	mov	r6, #32
        par.num2=32767;
 100914c:	e3075fff 	movw	r5, #32767	; 0x7fff
    va_start( argp, ctrl1);
 1009150:	e28d204c 	add	r2, sp, #76	; 0x4c
{
 1009154:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    va_start( argp, ctrl1);
 1009158:	e58d2004 	str	r2, [sp, #4]
    char8 *ctrl = (char8 *)ctrl1;
 100915c:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1009160:	e3530000 	cmp	r3, #0
 1009164:	0a00000a 	beq	1009194 <xil_printf+0x5c>
 1009168:	e5d30000 	ldrb	r0, [r3]
 100916c:	e3500000 	cmp	r0, #0
 1009170:	0a000007 	beq	1009194 <xil_printf+0x5c>
        if (*ctrl != '%') {
 1009174:	e3500025 	cmp	r0, #37	; 0x25
 1009178:	0a000009 	beq	10091a4 <xil_printf+0x6c>
            outbyte(*ctrl);
 100917c:	ebffff5a 	bl	1008eec <outbyte>
			ctrl += 1;
 1009180:	e59d3008 	ldr	r3, [sp, #8]
 1009184:	e2833001 	add	r3, r3, #1
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1009188:	e3530000 	cmp	r3, #0
			ctrl += 1;
 100918c:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1009190:	1afffff4 	bne	1009168 <xil_printf+0x30>
                continue;
        }
        goto try_next;
    }
    va_end( argp);
}
 1009194:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1009198:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 100919c:	e28dd010 	add	sp, sp, #16
 10091a0:	e12fff1e 	bx	lr
        dot_flag = 0;
 10091a4:	e3a08000 	mov	r8, #0
        par.unsigned_flag = 0;
 10091a8:	e58d4024 	str	r4, [sp, #36]	; 0x24
		par.left_flag = 0;
 10091ac:	e58d4020 	str	r4, [sp, #32]
		par.do_padding = 0;
 10091b0:	e58d401c 	str	r4, [sp, #28]
        par.pad_character = ' ';
 10091b4:	e5cd6018 	strb	r6, [sp, #24]
		par.num1=0;
 10091b8:	e1cd41f0 	strd	r4, [sp, #16]
		par.len=0;
 10091bc:	e58d400c 	str	r4, [sp, #12]
			ctrl += 1;
 10091c0:	e2832001 	add	r2, r3, #1
		if(ctrl != NULL) {
 10091c4:	e3520000 	cmp	r2, #0
			ctrl += 1;
 10091c8:	e58d2008 	str	r2, [sp, #8]
		if(ctrl != NULL) {
 10091cc:	0afffff0 	beq	1009194 <xil_printf+0x5c>
			ch = *ctrl;
 10091d0:	e5d37001 	ldrb	r7, [r3, #1]
        if (isdigit((s32)ch) != 0) {
 10091d4:	fa000768 	blx	100af7c <__locale_ctype_ptr>
 10091d8:	e2879001 	add	r9, r7, #1
 10091dc:	e7d03009 	ldrb	r3, [r0, r9]
 10091e0:	e3130004 	tst	r3, #4
 10091e4:	0a000016 	beq	1009244 <xil_printf+0x10c>
            if (dot_flag != 0) {
 10091e8:	e3580000 	cmp	r8, #0
 10091ec:	1a0000d9 	bne	1009558 <xil_printf+0x420>
				if(ctrl != NULL) {
 10091f0:	e59d3008 	ldr	r3, [sp, #8]
                if (ch == '0') {
 10091f4:	e3570030 	cmp	r7, #48	; 0x30
                    par.pad_character = '0';
 10091f8:	05cd7018 	strbeq	r7, [sp, #24]
				if(ctrl != NULL) {
 10091fc:	e3530000 	cmp	r3, #0
 1009200:	0affffe3 	beq	1009194 <xil_printf+0x5c>
			par.num1 = getnum(&ctrl);
 1009204:	e28d0008 	add	r0, sp, #8
 1009208:	ebffff3d 	bl	1008f04 <getnum>
 100920c:	e59d3008 	ldr	r3, [sp, #8]
                par.do_padding = 1;
 1009210:	e3a02001 	mov	r2, #1
			par.num1 = getnum(&ctrl);
 1009214:	e58d0010 	str	r0, [sp, #16]
                par.do_padding = 1;
 1009218:	e58d201c 	str	r2, [sp, #28]
            if(ctrl != NULL) {
 100921c:	e3530000 	cmp	r3, #0
 1009220:	0affffdb 	beq	1009194 <xil_printf+0x5c>
			ctrl -= 1;
 1009224:	e2433001 	sub	r3, r3, #1
 1009228:	e58d3008 	str	r3, [sp, #8]
		if(ctrl != NULL) {
 100922c:	e3530000 	cmp	r3, #0
 1009230:	1affffe2 	bne	10091c0 <xil_printf+0x88>
}
 1009234:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1009238:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 100923c:	e28dd010 	add	sp, sp, #16
 1009240:	e12fff1e 	bx	lr
        switch (tolower((s32)ch)) {
 1009244:	fa00074c 	blx	100af7c <__locale_ctype_ptr>
 1009248:	e7d03009 	ldrb	r3, [r0, r9]
 100924c:	e2033003 	and	r3, r3, #3
 1009250:	e3530001 	cmp	r3, #1
 1009254:	02877020 	addeq	r7, r7, #32
 1009258:	e2477025 	sub	r7, r7, #37	; 0x25
 100925c:	e3570053 	cmp	r7, #83	; 0x53
 1009260:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
 1009264:	ea00005c 	b	10093dc <xil_printf+0x2a4>
 1009268:	010094a0 	.word	0x010094a0
 100926c:	010093dc 	.word	0x010093dc
 1009270:	010093dc 	.word	0x010093dc
 1009274:	010093dc 	.word	0x010093dc
 1009278:	010093dc 	.word	0x010093dc
 100927c:	010093dc 	.word	0x010093dc
 1009280:	010093dc 	.word	0x010093dc
 1009284:	010093dc 	.word	0x010093dc
 1009288:	010094ac 	.word	0x010094ac
 100928c:	01009494 	.word	0x01009494
 1009290:	010093dc 	.word	0x010093dc
 1009294:	010093dc 	.word	0x010093dc
 1009298:	010093dc 	.word	0x010093dc
 100929c:	010093dc 	.word	0x010093dc
 10092a0:	010093dc 	.word	0x010093dc
 10092a4:	010093dc 	.word	0x010093dc
 10092a8:	010093dc 	.word	0x010093dc
 10092ac:	010093dc 	.word	0x010093dc
 10092b0:	010093dc 	.word	0x010093dc
 10092b4:	010093dc 	.word	0x010093dc
 10092b8:	010093dc 	.word	0x010093dc
 10092bc:	010093dc 	.word	0x010093dc
 10092c0:	010093dc 	.word	0x010093dc
 10092c4:	010093dc 	.word	0x010093dc
 10092c8:	010093dc 	.word	0x010093dc
 10092cc:	010093dc 	.word	0x010093dc
 10092d0:	010093dc 	.word	0x010093dc
 10092d4:	010093dc 	.word	0x010093dc
 10092d8:	010093dc 	.word	0x010093dc
 10092dc:	010093dc 	.word	0x010093dc
 10092e0:	010093dc 	.word	0x010093dc
 10092e4:	010093dc 	.word	0x010093dc
 10092e8:	010093dc 	.word	0x010093dc
 10092ec:	010093dc 	.word	0x010093dc
 10092f0:	010093dc 	.word	0x010093dc
 10092f4:	010093dc 	.word	0x010093dc
 10092f8:	010093dc 	.word	0x010093dc
 10092fc:	010093dc 	.word	0x010093dc
 1009300:	010093dc 	.word	0x010093dc
 1009304:	010093dc 	.word	0x010093dc
 1009308:	010093dc 	.word	0x010093dc
 100930c:	010093dc 	.word	0x010093dc
 1009310:	010093dc 	.word	0x010093dc
 1009314:	010093dc 	.word	0x010093dc
 1009318:	010093dc 	.word	0x010093dc
 100931c:	010093dc 	.word	0x010093dc
 1009320:	010093dc 	.word	0x010093dc
 1009324:	010093dc 	.word	0x010093dc
 1009328:	010093dc 	.word	0x010093dc
 100932c:	010093dc 	.word	0x010093dc
 1009330:	010093dc 	.word	0x010093dc
 1009334:	0100946c 	.word	0x0100946c
 1009338:	010093dc 	.word	0x010093dc
 100933c:	010093dc 	.word	0x010093dc
 1009340:	010093dc 	.word	0x010093dc
 1009344:	0100940c 	.word	0x0100940c
 1009348:	010093dc 	.word	0x010093dc
 100934c:	010093dc 	.word	0x010093dc
 1009350:	010093dc 	.word	0x010093dc
 1009354:	010093dc 	.word	0x010093dc
 1009358:	010093dc 	.word	0x010093dc
 100935c:	010093dc 	.word	0x010093dc
 1009360:	010093f4 	.word	0x010093f4
 1009364:	010093c0 	.word	0x010093c0
 1009368:	010093dc 	.word	0x010093dc
 100936c:	010093dc 	.word	0x010093dc
 1009370:	010093dc 	.word	0x010093dc
 1009374:	010093dc 	.word	0x010093dc
 1009378:	010093c0 	.word	0x010093c0
 100937c:	010093dc 	.word	0x010093dc
 1009380:	010093dc 	.word	0x010093dc
 1009384:	01009550 	.word	0x01009550
 1009388:	010093dc 	.word	0x010093dc
 100938c:	010093dc 	.word	0x010093dc
 1009390:	010093dc 	.word	0x010093dc
 1009394:	0100946c 	.word	0x0100946c
 1009398:	010093dc 	.word	0x010093dc
 100939c:	010093dc 	.word	0x010093dc
 10093a0:	010094bc 	.word	0x010094bc
 10093a4:	010093dc 	.word	0x010093dc
 10093a8:	010093b8 	.word	0x010093b8
 10093ac:	010093dc 	.word	0x010093dc
 10093b0:	010093dc 	.word	0x010093dc
 10093b4:	0100946c 	.word	0x0100946c
                par.unsigned_flag = 1;
 10093b8:	e3a03001 	mov	r3, #1
 10093bc:	e58d3024 	str	r3, [sp, #36]	; 0x24
                    outnum( va_arg(argp, s32), 10L, &par);
 10093c0:	e59d3004 	ldr	r3, [sp, #4]
 10093c4:	e28d200c 	add	r2, sp, #12
 10093c8:	e3a0100a 	mov	r1, #10
 10093cc:	e283c004 	add	ip, r3, #4
 10093d0:	e5930000 	ldr	r0, [r3]
 10093d4:	e58dc004 	str	ip, [sp, #4]
 10093d8:	ebfffefd 	bl	1008fd4 <outnum>
			if(ctrl != NULL) {
 10093dc:	e59d3008 	ldr	r3, [sp, #8]
 10093e0:	e3530000 	cmp	r3, #0
 10093e4:	0affff6a 	beq	1009194 <xil_printf+0x5c>
				ctrl += 1;
 10093e8:	e2833001 	add	r3, r3, #1
 10093ec:	e58d3008 	str	r3, [sp, #8]
 10093f0:	eaffff5a 	b	1009160 <xil_printf+0x28>
                outbyte( va_arg( argp, s32));
 10093f4:	e59d3004 	ldr	r3, [sp, #4]
 10093f8:	e2832004 	add	r2, r3, #4
 10093fc:	e5d30000 	ldrb	r0, [r3]
 1009400:	e58d2004 	str	r2, [sp, #4]
 1009404:	ebfffeb8 	bl	1008eec <outbyte>
        if(Check == 1) {
 1009408:	eafffff3 	b	10093dc <xil_printf+0x2a4>
                switch (*ctrl) {
 100940c:	e59d3008 	ldr	r3, [sp, #8]
 1009410:	e5d30000 	ldrb	r0, [r3]
 1009414:	e2403061 	sub	r3, r0, #97	; 0x61
 1009418:	e3530011 	cmp	r3, #17
 100941c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1009420:	ea000065 	b	10095bc <xil_printf+0x484>
 1009424:	01009590 	.word	0x01009590
 1009428:	010095bc 	.word	0x010095bc
 100942c:	010095bc 	.word	0x010095bc
 1009430:	010095bc 	.word	0x010095bc
 1009434:	010095bc 	.word	0x010095bc
 1009438:	010095bc 	.word	0x010095bc
 100943c:	010095bc 	.word	0x010095bc
 1009440:	0100959c 	.word	0x0100959c
 1009444:	010095bc 	.word	0x010095bc
 1009448:	010095bc 	.word	0x010095bc
 100944c:	010095bc 	.word	0x010095bc
 1009450:	010095bc 	.word	0x010095bc
 1009454:	010095bc 	.word	0x010095bc
 1009458:	010095a8 	.word	0x010095a8
 100945c:	010095bc 	.word	0x010095bc
 1009460:	010095bc 	.word	0x010095bc
 1009464:	010095bc 	.word	0x010095bc
 1009468:	01009578 	.word	0x01009578
                outnum((s32)va_arg(argp, s32), 16L, &par);
 100946c:	e59d3004 	ldr	r3, [sp, #4]
                par.unsigned_flag = 1;
 1009470:	e3a01001 	mov	r1, #1
 1009474:	e58d1024 	str	r1, [sp, #36]	; 0x24
                outnum((s32)va_arg(argp, s32), 16L, &par);
 1009478:	e28d200c 	add	r2, sp, #12
 100947c:	e3a01010 	mov	r1, #16
 1009480:	e283c004 	add	ip, r3, #4
 1009484:	e5930000 	ldr	r0, [r3]
 1009488:	e58dc004 	str	ip, [sp, #4]
 100948c:	ebfffed0 	bl	1008fd4 <outnum>
        if(Check == 1) {
 1009490:	eaffffd1 	b	10093dc <xil_printf+0x2a4>
 1009494:	e59d3008 	ldr	r3, [sp, #8]
                dot_flag = 1;
 1009498:	e3a08001 	mov	r8, #1
 100949c:	eaffff62 	b	100922c <xil_printf+0xf4>
                outbyte( '%');
 10094a0:	e3a00025 	mov	r0, #37	; 0x25
 10094a4:	ebfffe90 	bl	1008eec <outbyte>
        if(Check == 1) {
 10094a8:	eaffffcb 	b	10093dc <xil_printf+0x2a4>
                par.left_flag = 1;
 10094ac:	e3a02001 	mov	r2, #1
 10094b0:	e59d3008 	ldr	r3, [sp, #8]
 10094b4:	e58d2020 	str	r2, [sp, #32]
        if(Check == 1) {
 10094b8:	eaffff5b 	b	100922c <xil_printf+0xf4>
                outs( va_arg( argp, char *), &par);
 10094bc:	e59d3004 	ldr	r3, [sp, #4]
 10094c0:	e5937000 	ldr	r7, [r3]
 10094c4:	e2833004 	add	r3, r3, #4
 10094c8:	e58d3004 	str	r3, [sp, #4]
	if(LocalPtr != NULL) {
 10094cc:	e3570000 	cmp	r7, #0
 10094d0:	0a000002 	beq	10094e0 <xil_printf+0x3a8>
		par->len = (s32)strlen( LocalPtr);
 10094d4:	e1a00007 	mov	r0, r7
 10094d8:	fa000d08 	blx	100c900 <strlen>
 10094dc:	e58d000c 	str	r0, [sp, #12]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 10094e0:	e1cd21dc 	ldrd	r2, [sp, #28]
 10094e4:	e16f3f13 	clz	r3, r3
 10094e8:	e3520000 	cmp	r2, #0
 10094ec:	e1a032a3 	lsr	r3, r3, #5
 10094f0:	03a03000 	moveq	r3, #0
 10094f4:	e3530000 	cmp	r3, #0
 10094f8:	1a00001b 	bne	100956c <xil_printf+0x434>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 10094fc:	e5d73000 	ldrb	r3, [r7]
 1009500:	e3530000 	cmp	r3, #0
 1009504:	1a000007 	bne	1009528 <xil_printf+0x3f0>
 1009508:	ea000009 	b	1009534 <xil_printf+0x3fc>
		(par->num2)--;
 100950c:	e2433001 	sub	r3, r3, #1
 1009510:	e58d3014 	str	r3, [sp, #20]
        outbyte(*LocalPtr);
 1009514:	e5d70000 	ldrb	r0, [r7]
 1009518:	ebfffe73 	bl	1008eec <outbyte>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 100951c:	e5f73001 	ldrb	r3, [r7, #1]!
 1009520:	e3530000 	cmp	r3, #0
 1009524:	0a000002 	beq	1009534 <xil_printf+0x3fc>
 1009528:	e59d3014 	ldr	r3, [sp, #20]
 100952c:	e3530000 	cmp	r3, #0
 1009530:	1afffff5 	bne	100950c <xil_printf+0x3d4>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1009534:	e1cd21dc 	ldrd	r2, [sp, #28]
 1009538:	e3520000 	cmp	r2, #0
 100953c:	13530000 	cmpne	r3, #0
 1009540:	0affffa5 	beq	10093dc <xil_printf+0x2a4>
 1009544:	e28d000c 	add	r0, sp, #12
 1009548:	ebfffe94 	bl	1008fa0 <padding.part.0>
 100954c:	eaffffa2 	b	10093dc <xil_printf+0x2a4>
 1009550:	e59d3008 	ldr	r3, [sp, #8]
 1009554:	eaffff34 	b	100922c <xil_printf+0xf4>
                par.num2 = getnum(&ctrl);
 1009558:	e28d0008 	add	r0, sp, #8
 100955c:	ebfffe68 	bl	1008f04 <getnum>
 1009560:	e59d3008 	ldr	r3, [sp, #8]
 1009564:	e58d0014 	str	r0, [sp, #20]
 1009568:	eaffff2b 	b	100921c <xil_printf+0xe4>
 100956c:	e28d000c 	add	r0, sp, #12
 1009570:	ebfffe8a 	bl	1008fa0 <padding.part.0>
 1009574:	eaffffe0 	b	10094fc <xil_printf+0x3c4>
                        outbyte( ((char8)0x0D));
 1009578:	e3a0000d 	mov	r0, #13
 100957c:	ebfffe5a 	bl	1008eec <outbyte>
                ctrl += 1;
 1009580:	e59d3008 	ldr	r3, [sp, #8]
 1009584:	e2833001 	add	r3, r3, #1
 1009588:	e58d3008 	str	r3, [sp, #8]
        if(Check == 1) {
 100958c:	eaffff26 	b	100922c <xil_printf+0xf4>
                        outbyte( ((char8)0x07));
 1009590:	e3a00007 	mov	r0, #7
 1009594:	ebfffe54 	bl	1008eec <outbyte>
                        break;
 1009598:	eafffff8 	b	1009580 <xil_printf+0x448>
                        outbyte( ((char8)0x08));
 100959c:	e3a00008 	mov	r0, #8
 10095a0:	ebfffe51 	bl	1008eec <outbyte>
                        break;
 10095a4:	eafffff5 	b	1009580 <xil_printf+0x448>
                        outbyte( ((char8)0x0D));
 10095a8:	e3a0000d 	mov	r0, #13
 10095ac:	ebfffe4e 	bl	1008eec <outbyte>
                        outbyte( ((char8)0x0A));
 10095b0:	e3a0000a 	mov	r0, #10
 10095b4:	ebfffe4c 	bl	1008eec <outbyte>
                        break;
 10095b8:	eafffff0 	b	1009580 <xil_printf+0x448>
                        outbyte( *ctrl);
 10095bc:	ebfffe4a 	bl	1008eec <outbyte>
                        break;
 10095c0:	eaffffee 	b	1009580 <xil_printf+0x448>

010095c4 <Xil_ExceptionNullHandler>:
*
*****************************************************************************/
static void Xil_ExceptionNullHandler(void *Data)
{
	(void) Data;
DieLoop: goto DieLoop;
 10095c4:	eafffffe 	b	10095c4 <Xil_ExceptionNullHandler>

010095c8 <Xil_DataAbortHandler>:
*
* @note		None.
*
****************************************************************************/

void Xil_DataAbortHandler(void *CallBackRef){
 10095c8:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

        xdbg_printf(XDBG_DEBUG_ERROR, "Data abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_DATA_FAULT_STATUS);
 10095cc:	ee151f10 	mrc	15, 0, r1, cr5, cr0, {0}
	        mfcp(XREG_CP15_DATA_FAULT_STATUS,FaultStatus);
	    #else
	        { volatile register u32 Reg __asm(XREG_CP15_DATA_FAULT_STATUS);
	        FaultStatus = Reg; }
	    #endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Data abort with Data Fault Status Register  %lx\n",FaultStatus);
 10095d0:	e3080080 	movw	r0, #32896	; 0x8080
 10095d4:	e3400105 	movt	r0, #261	; 0x105
 10095d8:	fa000af2 	blx	100c1a8 <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Data abort %lx\n",DataAbortAddr);
 10095dc:	e30a348c 	movw	r3, #42124	; 0xa48c
 10095e0:	e30800b4 	movw	r0, #32948	; 0x80b4
 10095e4:	e340310a 	movt	r3, #266	; 0x10a
 10095e8:	e3400105 	movt	r0, #261	; 0x105
 10095ec:	e5931000 	ldr	r1, [r3]
 10095f0:	fa000aec 	blx	100c1a8 <printf>
#endif
	while(1) {
		;
 10095f4:	eafffffe 	b	10095f4 <Xil_DataAbortHandler+0x2c>

010095f8 <Xil_PrefetchAbortHandler>:
* @return	None.
*
* @note		None.
*
****************************************************************************/
void Xil_PrefetchAbortHandler(void *CallBackRef){
 10095f8:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

    xdbg_printf(XDBG_DEBUG_ERROR, "Prefetch abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_INST_FAULT_STATUS);
 10095fc:	ee151f30 	mrc	15, 0, r1, cr5, cr0, {1}
			mfcp(XREG_CP15_INST_FAULT_STATUS,FaultStatus);
	    #else
			{ volatile register u32 Reg __asm(XREG_CP15_INST_FAULT_STATUS);
			FaultStatus = Reg; }
		#endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Prefetch abort with Instruction Fault Status Register  %lx\n",FaultStatus);
 1009600:	e30800e4 	movw	r0, #32996	; 0x80e4
 1009604:	e3400105 	movt	r0, #261	; 0x105
 1009608:	fa000ae6 	blx	100c1a8 <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Prefetch abort %lx\n",PrefetchAbortAddr);
 100960c:	e30a3488 	movw	r3, #42120	; 0xa488
 1009610:	e3080120 	movw	r0, #33056	; 0x8120
 1009614:	e340310a 	movt	r3, #266	; 0x10a
 1009618:	e3400105 	movt	r0, #261	; 0x105
 100961c:	e5931000 	ldr	r1, [r3]
 1009620:	fa000ae0 	blx	100c1a8 <printf>
#endif
	while(1) {
		;
 1009624:	eafffffe 	b	1009624 <Xil_PrefetchAbortHandler+0x2c>

01009628 <Xil_UndefinedExceptionHandler>:
* @note		None.
*
****************************************************************************/
void Xil_UndefinedExceptionHandler(void *CallBackRef){
	(void) CallBackRef;
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 1009628:	e30a3484 	movw	r3, #42116	; 0xa484
 100962c:	e3080154 	movw	r0, #33108	; 0x8154
 1009630:	e340310a 	movt	r3, #266	; 0x10a
void Xil_UndefinedExceptionHandler(void *CallBackRef){
 1009634:	e92d4010 	push	{r4, lr}
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 1009638:	e3400105 	movt	r0, #261	; 0x105
 100963c:	e5931000 	ldr	r1, [r3]
 1009640:	fa000ad8 	blx	100c1a8 <printf>
	while(1) {
		;
 1009644:	eafffffe 	b	1009644 <Xil_UndefinedExceptionHandler+0x1c>

01009648 <Xil_ExceptionInit>:
}
 1009648:	e12fff1e 	bx	lr

0100964c <Xil_ExceptionRegisterHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 100964c:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009650:	e3403105 	movt	r3, #261	; 0x105
	XExc_VectorTable[Exception_id].Data = Data;
 1009654:	e083c180 	add	ip, r3, r0, lsl #3
	XExc_VectorTable[Exception_id].Handler = Handler;
 1009658:	e7831180 	str	r1, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 100965c:	e58c2004 	str	r2, [ip, #4]
}
 1009660:	e12fff1e 	bx	lr

01009664 <Xil_GetExceptionRegisterHandler>:
	*Handler = XExc_VectorTable[Exception_id].Handler;
 1009664:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009668:	e3403105 	movt	r3, #261	; 0x105
 100966c:	e793c180 	ldr	ip, [r3, r0, lsl #3]
	*Data = XExc_VectorTable[Exception_id].Data;
 1009670:	e0833180 	add	r3, r3, r0, lsl #3
	*Handler = XExc_VectorTable[Exception_id].Handler;
 1009674:	e581c000 	str	ip, [r1]
	*Data = XExc_VectorTable[Exception_id].Data;
 1009678:	e5933004 	ldr	r3, [r3, #4]
 100967c:	e5823000 	str	r3, [r2]
}
 1009680:	e12fff1e 	bx	lr

01009684 <Xil_ExceptionRemoveHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 1009684:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009688:	e30925c4 	movw	r2, #38340	; 0x95c4
 100968c:	e3403105 	movt	r3, #261	; 0x105
 1009690:	e3402100 	movt	r2, #256	; 0x100
	XExc_VectorTable[Exception_id].Data = Data;
 1009694:	e0831180 	add	r1, r3, r0, lsl #3
 1009698:	e3a0c000 	mov	ip, #0
	XExc_VectorTable[Exception_id].Handler = Handler;
 100969c:	e7832180 	str	r2, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 10096a0:	e581c004 	str	ip, [r1, #4]
}
 10096a4:	e12fff1e 	bx	lr

010096a8 <XUartPs_SendByte>:
*
*****************************************************************************/
void XUartPs_SendByte(u32 BaseAddress, u8 Data)
{
	/* Wait until there is space in TX FIFO */
	while (XUartPs_IsTransmitFull(BaseAddress)) {
 10096a8:	e280202c 	add	r2, r0, #44	; 0x2c
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 10096ac:	e5923000 	ldr	r3, [r2]
 10096b0:	e3130010 	tst	r3, #16
 10096b4:	1afffffc 	bne	10096ac <XUartPs_SendByte+0x4>
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10096b8:	e5801030 	str	r1, [r0, #48]	; 0x30
		;
	}

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, (u32)Data);
}
 10096bc:	e12fff1e 	bx	lr

010096c0 <XUartPs_RecvByte>:
*****************************************************************************/
u8 XUartPs_RecvByte(u32 BaseAddress)
{
	u32 RecievedByte;
	/* Wait until there is data */
	while (!XUartPs_IsReceiveData(BaseAddress)) {
 10096c0:	e280202c 	add	r2, r0, #44	; 0x2c
	return *(volatile u32 *) Addr;
 10096c4:	e5923000 	ldr	r3, [r2]
 10096c8:	e3130002 	tst	r3, #2
 10096cc:	1afffffc 	bne	10096c4 <XUartPs_RecvByte+0x4>
 10096d0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
		;
	}
	RecievedByte = XUartPs_ReadReg(BaseAddress, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (u8)RecievedByte;
}
 10096d4:	e6ef0070 	uxtb	r0, r0
 10096d8:	e12fff1e 	bx	lr

010096dc <XUartPs_ResetHw>:
*
* @note		None.
*
*****************************************************************************/
void XUartPs_ResetHw(u32 BaseAddress)
{
 10096dc:	e92d4010 	push	{r4, lr}
	*LocalAddr = Value;
 10096e0:	e3031fff 	movw	r1, #16383	; 0x3fff
 10096e4:	e3a0e028 	mov	lr, #40	; 0x28
 10096e8:	e3a0c003 	mov	ip, #3
 10096ec:	e3a03000 	mov	r3, #0
 10096f0:	e3a02020 	mov	r2, #32
 10096f4:	e580100c 	str	r1, [r0, #12]
 10096f8:	e300428b 	movw	r4, #651	; 0x28b
 10096fc:	e580e000 	str	lr, [r0]
 1009700:	e3a0e00f 	mov	lr, #15
 1009704:	e580c000 	str	ip, [r0]
 1009708:	e3a0cf4a 	mov	ip, #296	; 0x128
 100970c:	e5801014 	str	r1, [r0, #20]
 1009710:	e5803004 	str	r3, [r0, #4]
 1009714:	e5802020 	str	r2, [r0, #32]
 1009718:	e5802044 	str	r2, [r0, #68]	; 0x44
 100971c:	e580301c 	str	r3, [r0, #28]
 1009720:	e5804018 	str	r4, [r0, #24]
 1009724:	e580e034 	str	lr, [r0, #52]	; 0x34
 1009728:	e580c000 	str	ip, [r0]
	 */
	XUartPs_WriteReg(BaseAddress, XUARTPS_CR_OFFSET,
				((u32)XUARTPS_CR_RX_DIS | (u32)XUARTPS_CR_TX_DIS |
						(u32)XUARTPS_CR_STOPBRK));

}
 100972c:	e8bd8010 	pop	{r4, pc}

01009730 <FIQInterrupt>:
* @note		None.
*
******************************************************************************/
void FIQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_FIQ_INT].Handler(XExc_VectorTable[
 1009730:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009734:	e3403105 	movt	r3, #261	; 0x105
 1009738:	e5932030 	ldr	r2, [r3, #48]	; 0x30
 100973c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
 1009740:	e12fff12 	bx	r2

01009744 <IRQInterrupt>:
* @note		None.
*
******************************************************************************/
void IRQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_IRQ_INT].Handler(XExc_VectorTable[
 1009744:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009748:	e3403105 	movt	r3, #261	; 0x105
 100974c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 1009750:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
 1009754:	e12fff12 	bx	r2

01009758 <UndefinedException>:
* @note		None.
*
******************************************************************************/
void UndefinedException(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_UNDEFINED_INT].Handler(XExc_VectorTable[
 1009758:	e30833c0 	movw	r3, #33728	; 0x83c0
 100975c:	e3403105 	movt	r3, #261	; 0x105
 1009760:	e5932008 	ldr	r2, [r3, #8]
 1009764:	e593000c 	ldr	r0, [r3, #12]
 1009768:	e12fff12 	bx	r2

0100976c <SWInterrupt>:
* @note		None.
*
******************************************************************************/
void SWInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_SWI_INT].Handler(XExc_VectorTable[
 100976c:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009770:	e3403105 	movt	r3, #261	; 0x105
 1009774:	e5932010 	ldr	r2, [r3, #16]
 1009778:	e5930014 	ldr	r0, [r3, #20]
 100977c:	e12fff12 	bx	r2

01009780 <DataAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void DataAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_DATA_ABORT_INT].Handler(
 1009780:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009784:	e3403105 	movt	r3, #261	; 0x105
 1009788:	e5932020 	ldr	r2, [r3, #32]
 100978c:	e5930024 	ldr	r0, [r3, #36]	; 0x24
 1009790:	e12fff12 	bx	r2

01009794 <PrefetchAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void PrefetchAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_PREFETCH_ABORT_INT].Handler(
 1009794:	e30833c0 	movw	r3, #33728	; 0x83c0
 1009798:	e3403105 	movt	r3, #261	; 0x105
 100979c:	e5932018 	ldr	r2, [r3, #24]
 10097a0:	e593001c 	ldr	r0, [r3, #28]
 10097a4:	e12fff12 	bx	r2
 10097a8:	01060010 	.word	0x01060010
 10097ac:	01060010 	.word	0x01060010
 10097b0:	01060020 	.word	0x01060020
 10097b4:	010aa494 	.word	0x010aa494
 10097b8:	00010000 	.word	0x00010000

010097bc <_start>:
	.long	__stack


	.globl	_start
_start:
	bl      __cpu_init		/* Initialize the CPU first (BSP provides this) */
 10097bc:	eb000017 	bl	1009820 <__cpu_init>

	mov	r0, #0
 10097c0:	e3a00000 	mov	r0, #0

	/* clear sbss */
	ldr 	r1,.Lsbss_start		/* calculate beginning of the SBSS */
 10097c4:	e51f1024 	ldr	r1, [pc, #-36]	; 10097a8 <PrefetchAbortInterrupt+0x14>
	ldr	r2,.Lsbss_end		/* calculate end of the SBSS */
 10097c8:	e51f2024 	ldr	r2, [pc, #-36]	; 10097ac <PrefetchAbortInterrupt+0x18>

.Lloop_sbss:
	cmp	r1,r2
 10097cc:	e1510002 	cmp	r1, r2
	bge	.Lenclsbss		/* If no SBSS, no clearing required */
 10097d0:	aa000001 	bge	10097dc <_start+0x20>
	str	r0, [r1], #4
 10097d4:	e4810004 	str	r0, [r1], #4
	b	.Lloop_sbss
 10097d8:	eafffffb 	b	10097cc <_start+0x10>

.Lenclsbss:
	/* clear bss */
	ldr	r1,.Lbss_start		/* calculate beginning of the BSS */
 10097dc:	e51f1034 	ldr	r1, [pc, #-52]	; 10097b0 <PrefetchAbortInterrupt+0x1c>
	ldr	r2,.Lbss_end		/* calculate end of the BSS */
 10097e0:	e51f2034 	ldr	r2, [pc, #-52]	; 10097b4 <PrefetchAbortInterrupt+0x20>

.Lloop_bss:
	cmp	r1,r2
 10097e4:	e1510002 	cmp	r1, r2
	bge	.Lenclbss		/* If no BSS, no clearing required */
 10097e8:	aa000001 	bge	10097f4 <_start+0x38>
	str	r0, [r1], #4
 10097ec:	e4810004 	str	r0, [r1], #4
	b	.Lloop_bss
 10097f0:	eafffffb 	b	10097e4 <_start+0x28>

.Lenclbss:

	/* set stack pointer */
	ldr	r13,.Lstack		/* stack address */
 10097f4:	e51fd044 	ldr	sp, [pc, #-68]	; 10097b8 <PrefetchAbortInterrupt+0x24>

    /* Reset and start Global Timer */
	mov	r0, #0x0
 10097f8:	e3a00000 	mov	r0, #0
	mov	r1, #0x0
 10097fc:	e3a01000 	mov	r1, #0
	#if defined SLEEP_TIMER_BASEADDR
	bl XTime_StartTTCTimer
	#endif

#if USE_AMP != 1
	bl XTime_SetTime
 1009800:	eb000015 	bl	100985c <XTime_SetTime>
	/* Setup profiling stuff */
	bl	_profile_init
#endif /* PROFILING */

   /* run global constructors */
   bl __libc_init_array
 1009804:	fa00035d 	blx	100a580 <__libc_init_array>

	/* make sure argc and argv are valid */
	mov	r0, #0
 1009808:	e3a00000 	mov	r0, #0
	mov	r1, #0
 100980c:	e3a01000 	mov	r1, #0

	/* Let her rip */
	bl	main
 1009810:	eb00305d 	bl	101598c <main>

   /* Cleanup global constructors */
   bl __libc_fini_array
 1009814:	fa00034d 	blx	100a550 <__libc_fini_array>
	/* Cleanup profiling stuff */
	bl	_profile_clean
#endif /* PROFILING */

        /* All done */
	bl	exit
 1009818:	fa000344 	blx	100a530 <exit>

.Lexit:	/* should never get here */
	b .Lexit
 100981c:	eafffffe 	b	100981c <_start+0x60>

01009820 <__cpu_init>:
	.global __cpu_init
	.align 2
__cpu_init:

/* Clear cp15 regs with unknown reset values */
	mov	r0, #0x0
 1009820:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c5, c0, 0	/* DFSR */
 1009824:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
	mcr	p15, 0, r0, c5, c0, 1	/* IFSR */
 1009828:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
	mcr	p15, 0, r0, c6, c0, 0	/* DFAR */
 100982c:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
	mcr	p15, 0, r0, c6, c0, 2	/* IFAR */
 1009830:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
	mcr	p15, 0, r0, c9, c13, 2	/* PMXEVCNTR */
 1009834:	ee090f5d 	mcr	15, 0, r0, cr9, cr13, {2}
	mcr	p15, 0, r0, c13, c0, 2	/* TPIDRURW */
 1009838:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
	mcr	p15, 0, r0, c13, c0, 3	/* TPIDRURO */
 100983c:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}

/* Reset and start Cycle Counter */
	mov	r2, #0x80000000		/* clear overflow */
 1009840:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 3
 1009844:	ee092f7c 	mcr	15, 0, r2, cr9, cr12, {3}
	mov	r2, #0xd		/* D, C, E */
 1009848:	e3a0200d 	mov	r2, #13
	mcr	p15, 0, r2, c9, c12, 0
 100984c:	ee092f1c 	mcr	15, 0, r2, cr9, cr12, {0}
	mov	r2, #0x80000000		/* enable cycle counter */
 1009850:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 1
 1009854:	ee092f3c 	mcr	15, 0, r2, cr9, cr12, {1}

	bx	lr
 1009858:	e12fff1e 	bx	lr

0100985c <XTime_SetTime>:
 100985c:	e3a03000 	mov	r3, #0
 1009860:	e3a0c000 	mov	ip, #0
 1009864:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009868:	e3a02001 	mov	r2, #1
 100986c:	e583c208 	str	ip, [r3, #520]	; 0x208
 1009870:	e5830200 	str	r0, [r3, #512]	; 0x200
 1009874:	e5831204 	str	r1, [r3, #516]	; 0x204
 1009878:	e5832208 	str	r2, [r3, #520]	; 0x208
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_COUNTER_UPPER_OFFSET,
		(u32)((u32)(Xtime_Global>>32U)));

	/* Enable Global Timer */
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_CONTROL_OFFSET, (u32)0x1);
}
 100987c:	e12fff1e 	bx	lr

01009880 <XTime_GetTime>:
	return *(volatile u32 *) Addr;
 1009880:	e3a03000 	mov	r3, #0
 1009884:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009888:	e5931204 	ldr	r1, [r3, #516]	; 0x204
 100988c:	e593c200 	ldr	ip, [r3, #512]	; 0x200
 1009890:	e5932204 	ldr	r2, [r3, #516]	; 0x204
	/* Reading Global Timer Counter Register */
	do
	{
		high = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET);
		low = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);
	} while(Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET) != high);
 1009894:	e1520001 	cmp	r2, r1
 1009898:	1afffffa 	bne	1009888 <XTime_GetTime+0x8>

	*Xtime_Global = (((XTime) high) << 32U) | (XTime) low;
 100989c:	e580c000 	str	ip, [r0]
 10098a0:	e5802004 	str	r2, [r0, #4]
}
 10098a4:	e12fff1e 	bx	lr

010098a8 <__udivsi3>:
 10098a8:	1e4a      	subs	r2, r1, #1
 10098aa:	bf08      	it	eq
 10098ac:	4770      	bxeq	lr
 10098ae:	f0c0 8124 	bcc.w	1009afa <__udivsi3+0x252>
 10098b2:	4288      	cmp	r0, r1
 10098b4:	f240 8116 	bls.w	1009ae4 <__udivsi3+0x23c>
 10098b8:	4211      	tst	r1, r2
 10098ba:	f000 8117 	beq.w	1009aec <__udivsi3+0x244>
 10098be:	fab0 f380 	clz	r3, r0
 10098c2:	fab1 f281 	clz	r2, r1
 10098c6:	eba2 0303 	sub.w	r3, r2, r3
 10098ca:	f1c3 031f 	rsb	r3, r3, #31
 10098ce:	a204      	add	r2, pc, #16	; (adr r2, 10098e0 <__udivsi3+0x38>)
 10098d0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 10098d4:	f04f 0200 	mov.w	r2, #0
 10098d8:	469f      	mov	pc, r3
 10098da:	bf00      	nop
 10098dc:	f3af 8000 	nop.w
 10098e0:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 10098e4:	bf00      	nop
 10098e6:	eb42 0202 	adc.w	r2, r2, r2
 10098ea:	bf28      	it	cs
 10098ec:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 10098f0:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 10098f4:	bf00      	nop
 10098f6:	eb42 0202 	adc.w	r2, r2, r2
 10098fa:	bf28      	it	cs
 10098fc:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 1009900:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 1009904:	bf00      	nop
 1009906:	eb42 0202 	adc.w	r2, r2, r2
 100990a:	bf28      	it	cs
 100990c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 1009910:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 1009914:	bf00      	nop
 1009916:	eb42 0202 	adc.w	r2, r2, r2
 100991a:	bf28      	it	cs
 100991c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 1009920:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 1009924:	bf00      	nop
 1009926:	eb42 0202 	adc.w	r2, r2, r2
 100992a:	bf28      	it	cs
 100992c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 1009930:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 1009934:	bf00      	nop
 1009936:	eb42 0202 	adc.w	r2, r2, r2
 100993a:	bf28      	it	cs
 100993c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 1009940:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 1009944:	bf00      	nop
 1009946:	eb42 0202 	adc.w	r2, r2, r2
 100994a:	bf28      	it	cs
 100994c:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 1009950:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 1009954:	bf00      	nop
 1009956:	eb42 0202 	adc.w	r2, r2, r2
 100995a:	bf28      	it	cs
 100995c:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 1009960:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 1009964:	bf00      	nop
 1009966:	eb42 0202 	adc.w	r2, r2, r2
 100996a:	bf28      	it	cs
 100996c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 1009970:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 1009974:	bf00      	nop
 1009976:	eb42 0202 	adc.w	r2, r2, r2
 100997a:	bf28      	it	cs
 100997c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 1009980:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 1009984:	bf00      	nop
 1009986:	eb42 0202 	adc.w	r2, r2, r2
 100998a:	bf28      	it	cs
 100998c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 1009990:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 1009994:	bf00      	nop
 1009996:	eb42 0202 	adc.w	r2, r2, r2
 100999a:	bf28      	it	cs
 100999c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 10099a0:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 10099a4:	bf00      	nop
 10099a6:	eb42 0202 	adc.w	r2, r2, r2
 10099aa:	bf28      	it	cs
 10099ac:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 10099b0:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 10099b4:	bf00      	nop
 10099b6:	eb42 0202 	adc.w	r2, r2, r2
 10099ba:	bf28      	it	cs
 10099bc:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 10099c0:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 10099c4:	bf00      	nop
 10099c6:	eb42 0202 	adc.w	r2, r2, r2
 10099ca:	bf28      	it	cs
 10099cc:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 10099d0:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 10099d4:	bf00      	nop
 10099d6:	eb42 0202 	adc.w	r2, r2, r2
 10099da:	bf28      	it	cs
 10099dc:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 10099e0:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 10099e4:	bf00      	nop
 10099e6:	eb42 0202 	adc.w	r2, r2, r2
 10099ea:	bf28      	it	cs
 10099ec:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 10099f0:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 10099f4:	bf00      	nop
 10099f6:	eb42 0202 	adc.w	r2, r2, r2
 10099fa:	bf28      	it	cs
 10099fc:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 1009a00:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 1009a04:	bf00      	nop
 1009a06:	eb42 0202 	adc.w	r2, r2, r2
 1009a0a:	bf28      	it	cs
 1009a0c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 1009a10:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 1009a14:	bf00      	nop
 1009a16:	eb42 0202 	adc.w	r2, r2, r2
 1009a1a:	bf28      	it	cs
 1009a1c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 1009a20:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 1009a24:	bf00      	nop
 1009a26:	eb42 0202 	adc.w	r2, r2, r2
 1009a2a:	bf28      	it	cs
 1009a2c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 1009a30:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 1009a34:	bf00      	nop
 1009a36:	eb42 0202 	adc.w	r2, r2, r2
 1009a3a:	bf28      	it	cs
 1009a3c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 1009a40:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 1009a44:	bf00      	nop
 1009a46:	eb42 0202 	adc.w	r2, r2, r2
 1009a4a:	bf28      	it	cs
 1009a4c:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 1009a50:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 1009a54:	bf00      	nop
 1009a56:	eb42 0202 	adc.w	r2, r2, r2
 1009a5a:	bf28      	it	cs
 1009a5c:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 1009a60:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 1009a64:	bf00      	nop
 1009a66:	eb42 0202 	adc.w	r2, r2, r2
 1009a6a:	bf28      	it	cs
 1009a6c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 1009a70:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 1009a74:	bf00      	nop
 1009a76:	eb42 0202 	adc.w	r2, r2, r2
 1009a7a:	bf28      	it	cs
 1009a7c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 1009a80:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 1009a84:	bf00      	nop
 1009a86:	eb42 0202 	adc.w	r2, r2, r2
 1009a8a:	bf28      	it	cs
 1009a8c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 1009a90:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 1009a94:	bf00      	nop
 1009a96:	eb42 0202 	adc.w	r2, r2, r2
 1009a9a:	bf28      	it	cs
 1009a9c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 1009aa0:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 1009aa4:	bf00      	nop
 1009aa6:	eb42 0202 	adc.w	r2, r2, r2
 1009aaa:	bf28      	it	cs
 1009aac:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 1009ab0:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 1009ab4:	bf00      	nop
 1009ab6:	eb42 0202 	adc.w	r2, r2, r2
 1009aba:	bf28      	it	cs
 1009abc:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 1009ac0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 1009ac4:	bf00      	nop
 1009ac6:	eb42 0202 	adc.w	r2, r2, r2
 1009aca:	bf28      	it	cs
 1009acc:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 1009ad0:	ebb0 0f01 	cmp.w	r0, r1
 1009ad4:	bf00      	nop
 1009ad6:	eb42 0202 	adc.w	r2, r2, r2
 1009ada:	bf28      	it	cs
 1009adc:	eba0 0001 	subcs.w	r0, r0, r1
 1009ae0:	4610      	mov	r0, r2
 1009ae2:	4770      	bx	lr
 1009ae4:	bf0c      	ite	eq
 1009ae6:	2001      	moveq	r0, #1
 1009ae8:	2000      	movne	r0, #0
 1009aea:	4770      	bx	lr
 1009aec:	fab1 f281 	clz	r2, r1
 1009af0:	f1c2 021f 	rsb	r2, r2, #31
 1009af4:	fa20 f002 	lsr.w	r0, r0, r2
 1009af8:	4770      	bx	lr
 1009afa:	b108      	cbz	r0, 1009b00 <__udivsi3+0x258>
 1009afc:	f04f 30ff 	mov.w	r0, #4294967295
 1009b00:	f000 b966 	b.w	1009dd0 <__aeabi_idiv0>

01009b04 <__aeabi_uidivmod>:
 1009b04:	2900      	cmp	r1, #0
 1009b06:	d0f8      	beq.n	1009afa <__udivsi3+0x252>
 1009b08:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 1009b0c:	f7ff fecc 	bl	10098a8 <__udivsi3>
 1009b10:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 1009b14:	fb02 f300 	mul.w	r3, r2, r0
 1009b18:	eba1 0103 	sub.w	r1, r1, r3
 1009b1c:	4770      	bx	lr
 1009b1e:	bf00      	nop

01009b20 <__divsi3>:
 1009b20:	2900      	cmp	r1, #0
 1009b22:	f000 813e 	beq.w	1009da2 <.divsi3_skip_div0_test+0x27c>

01009b26 <.divsi3_skip_div0_test>:
 1009b26:	ea80 0c01 	eor.w	ip, r0, r1
 1009b2a:	bf48      	it	mi
 1009b2c:	4249      	negmi	r1, r1
 1009b2e:	1e4a      	subs	r2, r1, #1
 1009b30:	f000 811f 	beq.w	1009d72 <.divsi3_skip_div0_test+0x24c>
 1009b34:	0003      	movs	r3, r0
 1009b36:	bf48      	it	mi
 1009b38:	4243      	negmi	r3, r0
 1009b3a:	428b      	cmp	r3, r1
 1009b3c:	f240 811e 	bls.w	1009d7c <.divsi3_skip_div0_test+0x256>
 1009b40:	4211      	tst	r1, r2
 1009b42:	f000 8123 	beq.w	1009d8c <.divsi3_skip_div0_test+0x266>
 1009b46:	fab3 f283 	clz	r2, r3
 1009b4a:	fab1 f081 	clz	r0, r1
 1009b4e:	eba0 0202 	sub.w	r2, r0, r2
 1009b52:	f1c2 021f 	rsb	r2, r2, #31
 1009b56:	a004      	add	r0, pc, #16	; (adr r0, 1009b68 <.divsi3_skip_div0_test+0x42>)
 1009b58:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 1009b5c:	f04f 0000 	mov.w	r0, #0
 1009b60:	4697      	mov	pc, r2
 1009b62:	bf00      	nop
 1009b64:	f3af 8000 	nop.w
 1009b68:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 1009b6c:	bf00      	nop
 1009b6e:	eb40 0000 	adc.w	r0, r0, r0
 1009b72:	bf28      	it	cs
 1009b74:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 1009b78:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 1009b7c:	bf00      	nop
 1009b7e:	eb40 0000 	adc.w	r0, r0, r0
 1009b82:	bf28      	it	cs
 1009b84:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 1009b88:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 1009b8c:	bf00      	nop
 1009b8e:	eb40 0000 	adc.w	r0, r0, r0
 1009b92:	bf28      	it	cs
 1009b94:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 1009b98:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 1009b9c:	bf00      	nop
 1009b9e:	eb40 0000 	adc.w	r0, r0, r0
 1009ba2:	bf28      	it	cs
 1009ba4:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 1009ba8:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 1009bac:	bf00      	nop
 1009bae:	eb40 0000 	adc.w	r0, r0, r0
 1009bb2:	bf28      	it	cs
 1009bb4:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 1009bb8:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 1009bbc:	bf00      	nop
 1009bbe:	eb40 0000 	adc.w	r0, r0, r0
 1009bc2:	bf28      	it	cs
 1009bc4:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 1009bc8:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 1009bcc:	bf00      	nop
 1009bce:	eb40 0000 	adc.w	r0, r0, r0
 1009bd2:	bf28      	it	cs
 1009bd4:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 1009bd8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 1009bdc:	bf00      	nop
 1009bde:	eb40 0000 	adc.w	r0, r0, r0
 1009be2:	bf28      	it	cs
 1009be4:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 1009be8:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 1009bec:	bf00      	nop
 1009bee:	eb40 0000 	adc.w	r0, r0, r0
 1009bf2:	bf28      	it	cs
 1009bf4:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 1009bf8:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 1009bfc:	bf00      	nop
 1009bfe:	eb40 0000 	adc.w	r0, r0, r0
 1009c02:	bf28      	it	cs
 1009c04:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 1009c08:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 1009c0c:	bf00      	nop
 1009c0e:	eb40 0000 	adc.w	r0, r0, r0
 1009c12:	bf28      	it	cs
 1009c14:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 1009c18:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 1009c1c:	bf00      	nop
 1009c1e:	eb40 0000 	adc.w	r0, r0, r0
 1009c22:	bf28      	it	cs
 1009c24:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 1009c28:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 1009c2c:	bf00      	nop
 1009c2e:	eb40 0000 	adc.w	r0, r0, r0
 1009c32:	bf28      	it	cs
 1009c34:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 1009c38:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 1009c3c:	bf00      	nop
 1009c3e:	eb40 0000 	adc.w	r0, r0, r0
 1009c42:	bf28      	it	cs
 1009c44:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 1009c48:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 1009c4c:	bf00      	nop
 1009c4e:	eb40 0000 	adc.w	r0, r0, r0
 1009c52:	bf28      	it	cs
 1009c54:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 1009c58:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 1009c5c:	bf00      	nop
 1009c5e:	eb40 0000 	adc.w	r0, r0, r0
 1009c62:	bf28      	it	cs
 1009c64:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 1009c68:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 1009c6c:	bf00      	nop
 1009c6e:	eb40 0000 	adc.w	r0, r0, r0
 1009c72:	bf28      	it	cs
 1009c74:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 1009c78:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 1009c7c:	bf00      	nop
 1009c7e:	eb40 0000 	adc.w	r0, r0, r0
 1009c82:	bf28      	it	cs
 1009c84:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 1009c88:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 1009c8c:	bf00      	nop
 1009c8e:	eb40 0000 	adc.w	r0, r0, r0
 1009c92:	bf28      	it	cs
 1009c94:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 1009c98:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 1009c9c:	bf00      	nop
 1009c9e:	eb40 0000 	adc.w	r0, r0, r0
 1009ca2:	bf28      	it	cs
 1009ca4:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 1009ca8:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 1009cac:	bf00      	nop
 1009cae:	eb40 0000 	adc.w	r0, r0, r0
 1009cb2:	bf28      	it	cs
 1009cb4:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 1009cb8:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 1009cbc:	bf00      	nop
 1009cbe:	eb40 0000 	adc.w	r0, r0, r0
 1009cc2:	bf28      	it	cs
 1009cc4:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 1009cc8:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 1009ccc:	bf00      	nop
 1009cce:	eb40 0000 	adc.w	r0, r0, r0
 1009cd2:	bf28      	it	cs
 1009cd4:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 1009cd8:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 1009cdc:	bf00      	nop
 1009cde:	eb40 0000 	adc.w	r0, r0, r0
 1009ce2:	bf28      	it	cs
 1009ce4:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 1009ce8:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 1009cec:	bf00      	nop
 1009cee:	eb40 0000 	adc.w	r0, r0, r0
 1009cf2:	bf28      	it	cs
 1009cf4:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 1009cf8:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 1009cfc:	bf00      	nop
 1009cfe:	eb40 0000 	adc.w	r0, r0, r0
 1009d02:	bf28      	it	cs
 1009d04:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 1009d08:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 1009d0c:	bf00      	nop
 1009d0e:	eb40 0000 	adc.w	r0, r0, r0
 1009d12:	bf28      	it	cs
 1009d14:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 1009d18:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 1009d1c:	bf00      	nop
 1009d1e:	eb40 0000 	adc.w	r0, r0, r0
 1009d22:	bf28      	it	cs
 1009d24:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 1009d28:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 1009d2c:	bf00      	nop
 1009d2e:	eb40 0000 	adc.w	r0, r0, r0
 1009d32:	bf28      	it	cs
 1009d34:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 1009d38:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 1009d3c:	bf00      	nop
 1009d3e:	eb40 0000 	adc.w	r0, r0, r0
 1009d42:	bf28      	it	cs
 1009d44:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 1009d48:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 1009d4c:	bf00      	nop
 1009d4e:	eb40 0000 	adc.w	r0, r0, r0
 1009d52:	bf28      	it	cs
 1009d54:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 1009d58:	ebb3 0f01 	cmp.w	r3, r1
 1009d5c:	bf00      	nop
 1009d5e:	eb40 0000 	adc.w	r0, r0, r0
 1009d62:	bf28      	it	cs
 1009d64:	eba3 0301 	subcs.w	r3, r3, r1
 1009d68:	f1bc 0f00 	cmp.w	ip, #0
 1009d6c:	bf48      	it	mi
 1009d6e:	4240      	negmi	r0, r0
 1009d70:	4770      	bx	lr
 1009d72:	ea9c 0f00 	teq	ip, r0
 1009d76:	bf48      	it	mi
 1009d78:	4240      	negmi	r0, r0
 1009d7a:	4770      	bx	lr
 1009d7c:	bf38      	it	cc
 1009d7e:	2000      	movcc	r0, #0
 1009d80:	bf04      	itt	eq
 1009d82:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 1009d86:	f040 0001 	orreq.w	r0, r0, #1
 1009d8a:	4770      	bx	lr
 1009d8c:	fab1 f281 	clz	r2, r1
 1009d90:	f1c2 021f 	rsb	r2, r2, #31
 1009d94:	f1bc 0f00 	cmp.w	ip, #0
 1009d98:	fa23 f002 	lsr.w	r0, r3, r2
 1009d9c:	bf48      	it	mi
 1009d9e:	4240      	negmi	r0, r0
 1009da0:	4770      	bx	lr
 1009da2:	2800      	cmp	r0, #0
 1009da4:	bfc8      	it	gt
 1009da6:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 1009daa:	bfb8      	it	lt
 1009dac:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 1009db0:	f000 b80e 	b.w	1009dd0 <__aeabi_idiv0>

01009db4 <__aeabi_idivmod>:
 1009db4:	2900      	cmp	r1, #0
 1009db6:	d0f4      	beq.n	1009da2 <.divsi3_skip_div0_test+0x27c>
 1009db8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 1009dbc:	f7ff feb3 	bl	1009b26 <.divsi3_skip_div0_test>
 1009dc0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 1009dc4:	fb02 f300 	mul.w	r3, r2, r0
 1009dc8:	eba1 0103 	sub.w	r1, r1, r3
 1009dcc:	4770      	bx	lr
 1009dce:	bf00      	nop

01009dd0 <__aeabi_idiv0>:
 1009dd0:	4770      	bx	lr
 1009dd2:	bf00      	nop

01009dd4 <__aeabi_drsub>:
 1009dd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 1009dd8:	e002      	b.n	1009de0 <__adddf3>
 1009dda:	bf00      	nop

01009ddc <__aeabi_dsub>:
 1009ddc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

01009de0 <__adddf3>:
 1009de0:	b530      	push	{r4, r5, lr}
 1009de2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 1009de6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 1009dea:	ea94 0f05 	teq	r4, r5
 1009dee:	bf08      	it	eq
 1009df0:	ea90 0f02 	teqeq	r0, r2
 1009df4:	bf1f      	itttt	ne
 1009df6:	ea54 0c00 	orrsne.w	ip, r4, r0
 1009dfa:	ea55 0c02 	orrsne.w	ip, r5, r2
 1009dfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 1009e02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 1009e06:	f000 80e2 	beq.w	1009fce <__adddf3+0x1ee>
 1009e0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 1009e0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 1009e12:	bfb8      	it	lt
 1009e14:	426d      	neglt	r5, r5
 1009e16:	dd0c      	ble.n	1009e32 <__adddf3+0x52>
 1009e18:	442c      	add	r4, r5
 1009e1a:	ea80 0202 	eor.w	r2, r0, r2
 1009e1e:	ea81 0303 	eor.w	r3, r1, r3
 1009e22:	ea82 0000 	eor.w	r0, r2, r0
 1009e26:	ea83 0101 	eor.w	r1, r3, r1
 1009e2a:	ea80 0202 	eor.w	r2, r0, r2
 1009e2e:	ea81 0303 	eor.w	r3, r1, r3
 1009e32:	2d36      	cmp	r5, #54	; 0x36
 1009e34:	bf88      	it	hi
 1009e36:	bd30      	pophi	{r4, r5, pc}
 1009e38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 1009e3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 1009e40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 1009e44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 1009e48:	d002      	beq.n	1009e50 <__adddf3+0x70>
 1009e4a:	4240      	negs	r0, r0
 1009e4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1009e50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 1009e54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 1009e58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 1009e5c:	d002      	beq.n	1009e64 <__adddf3+0x84>
 1009e5e:	4252      	negs	r2, r2
 1009e60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 1009e64:	ea94 0f05 	teq	r4, r5
 1009e68:	f000 80a7 	beq.w	1009fba <__adddf3+0x1da>
 1009e6c:	f1a4 0401 	sub.w	r4, r4, #1
 1009e70:	f1d5 0e20 	rsbs	lr, r5, #32
 1009e74:	db0d      	blt.n	1009e92 <__adddf3+0xb2>
 1009e76:	fa02 fc0e 	lsl.w	ip, r2, lr
 1009e7a:	fa22 f205 	lsr.w	r2, r2, r5
 1009e7e:	1880      	adds	r0, r0, r2
 1009e80:	f141 0100 	adc.w	r1, r1, #0
 1009e84:	fa03 f20e 	lsl.w	r2, r3, lr
 1009e88:	1880      	adds	r0, r0, r2
 1009e8a:	fa43 f305 	asr.w	r3, r3, r5
 1009e8e:	4159      	adcs	r1, r3
 1009e90:	e00e      	b.n	1009eb0 <__adddf3+0xd0>
 1009e92:	f1a5 0520 	sub.w	r5, r5, #32
 1009e96:	f10e 0e20 	add.w	lr, lr, #32
 1009e9a:	2a01      	cmp	r2, #1
 1009e9c:	fa03 fc0e 	lsl.w	ip, r3, lr
 1009ea0:	bf28      	it	cs
 1009ea2:	f04c 0c02 	orrcs.w	ip, ip, #2
 1009ea6:	fa43 f305 	asr.w	r3, r3, r5
 1009eaa:	18c0      	adds	r0, r0, r3
 1009eac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 1009eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1009eb4:	d507      	bpl.n	1009ec6 <__adddf3+0xe6>
 1009eb6:	f04f 0e00 	mov.w	lr, #0
 1009eba:	f1dc 0c00 	rsbs	ip, ip, #0
 1009ebe:	eb7e 0000 	sbcs.w	r0, lr, r0
 1009ec2:	eb6e 0101 	sbc.w	r1, lr, r1
 1009ec6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 1009eca:	d31b      	bcc.n	1009f04 <__adddf3+0x124>
 1009ecc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 1009ed0:	d30c      	bcc.n	1009eec <__adddf3+0x10c>
 1009ed2:	0849      	lsrs	r1, r1, #1
 1009ed4:	ea5f 0030 	movs.w	r0, r0, rrx
 1009ed8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 1009edc:	f104 0401 	add.w	r4, r4, #1
 1009ee0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 1009ee4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 1009ee8:	f080 809a 	bcs.w	100a020 <__adddf3+0x240>
 1009eec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 1009ef0:	bf08      	it	eq
 1009ef2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 1009ef6:	f150 0000 	adcs.w	r0, r0, #0
 1009efa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 1009efe:	ea41 0105 	orr.w	r1, r1, r5
 1009f02:	bd30      	pop	{r4, r5, pc}
 1009f04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 1009f08:	4140      	adcs	r0, r0
 1009f0a:	eb41 0101 	adc.w	r1, r1, r1
 1009f0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1009f12:	f1a4 0401 	sub.w	r4, r4, #1
 1009f16:	d1e9      	bne.n	1009eec <__adddf3+0x10c>
 1009f18:	f091 0f00 	teq	r1, #0
 1009f1c:	bf04      	itt	eq
 1009f1e:	4601      	moveq	r1, r0
 1009f20:	2000      	moveq	r0, #0
 1009f22:	fab1 f381 	clz	r3, r1
 1009f26:	bf08      	it	eq
 1009f28:	3320      	addeq	r3, #32
 1009f2a:	f1a3 030b 	sub.w	r3, r3, #11
 1009f2e:	f1b3 0220 	subs.w	r2, r3, #32
 1009f32:	da0c      	bge.n	1009f4e <__adddf3+0x16e>
 1009f34:	320c      	adds	r2, #12
 1009f36:	dd08      	ble.n	1009f4a <__adddf3+0x16a>
 1009f38:	f102 0c14 	add.w	ip, r2, #20
 1009f3c:	f1c2 020c 	rsb	r2, r2, #12
 1009f40:	fa01 f00c 	lsl.w	r0, r1, ip
 1009f44:	fa21 f102 	lsr.w	r1, r1, r2
 1009f48:	e00c      	b.n	1009f64 <__adddf3+0x184>
 1009f4a:	f102 0214 	add.w	r2, r2, #20
 1009f4e:	bfd8      	it	le
 1009f50:	f1c2 0c20 	rsble	ip, r2, #32
 1009f54:	fa01 f102 	lsl.w	r1, r1, r2
 1009f58:	fa20 fc0c 	lsr.w	ip, r0, ip
 1009f5c:	bfdc      	itt	le
 1009f5e:	ea41 010c 	orrle.w	r1, r1, ip
 1009f62:	4090      	lslle	r0, r2
 1009f64:	1ae4      	subs	r4, r4, r3
 1009f66:	bfa2      	ittt	ge
 1009f68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 1009f6c:	4329      	orrge	r1, r5
 1009f6e:	bd30      	popge	{r4, r5, pc}
 1009f70:	ea6f 0404 	mvn.w	r4, r4
 1009f74:	3c1f      	subs	r4, #31
 1009f76:	da1c      	bge.n	1009fb2 <__adddf3+0x1d2>
 1009f78:	340c      	adds	r4, #12
 1009f7a:	dc0e      	bgt.n	1009f9a <__adddf3+0x1ba>
 1009f7c:	f104 0414 	add.w	r4, r4, #20
 1009f80:	f1c4 0220 	rsb	r2, r4, #32
 1009f84:	fa20 f004 	lsr.w	r0, r0, r4
 1009f88:	fa01 f302 	lsl.w	r3, r1, r2
 1009f8c:	ea40 0003 	orr.w	r0, r0, r3
 1009f90:	fa21 f304 	lsr.w	r3, r1, r4
 1009f94:	ea45 0103 	orr.w	r1, r5, r3
 1009f98:	bd30      	pop	{r4, r5, pc}
 1009f9a:	f1c4 040c 	rsb	r4, r4, #12
 1009f9e:	f1c4 0220 	rsb	r2, r4, #32
 1009fa2:	fa20 f002 	lsr.w	r0, r0, r2
 1009fa6:	fa01 f304 	lsl.w	r3, r1, r4
 1009faa:	ea40 0003 	orr.w	r0, r0, r3
 1009fae:	4629      	mov	r1, r5
 1009fb0:	bd30      	pop	{r4, r5, pc}
 1009fb2:	fa21 f004 	lsr.w	r0, r1, r4
 1009fb6:	4629      	mov	r1, r5
 1009fb8:	bd30      	pop	{r4, r5, pc}
 1009fba:	f094 0f00 	teq	r4, #0
 1009fbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 1009fc2:	bf06      	itte	eq
 1009fc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 1009fc8:	3401      	addeq	r4, #1
 1009fca:	3d01      	subne	r5, #1
 1009fcc:	e74e      	b.n	1009e6c <__adddf3+0x8c>
 1009fce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 1009fd2:	bf18      	it	ne
 1009fd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 1009fd8:	d029      	beq.n	100a02e <__adddf3+0x24e>
 1009fda:	ea94 0f05 	teq	r4, r5
 1009fde:	bf08      	it	eq
 1009fe0:	ea90 0f02 	teqeq	r0, r2
 1009fe4:	d005      	beq.n	1009ff2 <__adddf3+0x212>
 1009fe6:	ea54 0c00 	orrs.w	ip, r4, r0
 1009fea:	bf04      	itt	eq
 1009fec:	4619      	moveq	r1, r3
 1009fee:	4610      	moveq	r0, r2
 1009ff0:	bd30      	pop	{r4, r5, pc}
 1009ff2:	ea91 0f03 	teq	r1, r3
 1009ff6:	bf1e      	ittt	ne
 1009ff8:	2100      	movne	r1, #0
 1009ffa:	2000      	movne	r0, #0
 1009ffc:	bd30      	popne	{r4, r5, pc}
 1009ffe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 100a002:	d105      	bne.n	100a010 <__adddf3+0x230>
 100a004:	0040      	lsls	r0, r0, #1
 100a006:	4149      	adcs	r1, r1
 100a008:	bf28      	it	cs
 100a00a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 100a00e:	bd30      	pop	{r4, r5, pc}
 100a010:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 100a014:	bf3c      	itt	cc
 100a016:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 100a01a:	bd30      	popcc	{r4, r5, pc}
 100a01c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 100a020:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 100a024:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 100a028:	f04f 0000 	mov.w	r0, #0
 100a02c:	bd30      	pop	{r4, r5, pc}
 100a02e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 100a032:	bf1a      	itte	ne
 100a034:	4619      	movne	r1, r3
 100a036:	4610      	movne	r0, r2
 100a038:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 100a03c:	bf1c      	itt	ne
 100a03e:	460b      	movne	r3, r1
 100a040:	4602      	movne	r2, r0
 100a042:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 100a046:	bf06      	itte	eq
 100a048:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 100a04c:	ea91 0f03 	teqeq	r1, r3
 100a050:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 100a054:	bd30      	pop	{r4, r5, pc}
 100a056:	bf00      	nop

0100a058 <__aeabi_ui2d>:
 100a058:	f090 0f00 	teq	r0, #0
 100a05c:	bf04      	itt	eq
 100a05e:	2100      	moveq	r1, #0
 100a060:	4770      	bxeq	lr
 100a062:	b530      	push	{r4, r5, lr}
 100a064:	f44f 6480 	mov.w	r4, #1024	; 0x400
 100a068:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100a06c:	f04f 0500 	mov.w	r5, #0
 100a070:	f04f 0100 	mov.w	r1, #0
 100a074:	e750      	b.n	1009f18 <__adddf3+0x138>
 100a076:	bf00      	nop

0100a078 <__aeabi_i2d>:
 100a078:	f090 0f00 	teq	r0, #0
 100a07c:	bf04      	itt	eq
 100a07e:	2100      	moveq	r1, #0
 100a080:	4770      	bxeq	lr
 100a082:	b530      	push	{r4, r5, lr}
 100a084:	f44f 6480 	mov.w	r4, #1024	; 0x400
 100a088:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100a08c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 100a090:	bf48      	it	mi
 100a092:	4240      	negmi	r0, r0
 100a094:	f04f 0100 	mov.w	r1, #0
 100a098:	e73e      	b.n	1009f18 <__adddf3+0x138>
 100a09a:	bf00      	nop

0100a09c <__aeabi_f2d>:
 100a09c:	0042      	lsls	r2, r0, #1
 100a09e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 100a0a2:	ea4f 0131 	mov.w	r1, r1, rrx
 100a0a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 100a0aa:	bf1f      	itttt	ne
 100a0ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 100a0b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 100a0b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 100a0b8:	4770      	bxne	lr
 100a0ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 100a0be:	bf08      	it	eq
 100a0c0:	4770      	bxeq	lr
 100a0c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 100a0c6:	bf04      	itt	eq
 100a0c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 100a0cc:	4770      	bxeq	lr
 100a0ce:	b530      	push	{r4, r5, lr}
 100a0d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 100a0d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 100a0d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 100a0dc:	e71c      	b.n	1009f18 <__adddf3+0x138>
 100a0de:	bf00      	nop

0100a0e0 <__aeabi_ul2d>:
 100a0e0:	ea50 0201 	orrs.w	r2, r0, r1
 100a0e4:	bf08      	it	eq
 100a0e6:	4770      	bxeq	lr
 100a0e8:	b530      	push	{r4, r5, lr}
 100a0ea:	f04f 0500 	mov.w	r5, #0
 100a0ee:	e00a      	b.n	100a106 <__aeabi_l2d+0x16>

0100a0f0 <__aeabi_l2d>:
 100a0f0:	ea50 0201 	orrs.w	r2, r0, r1
 100a0f4:	bf08      	it	eq
 100a0f6:	4770      	bxeq	lr
 100a0f8:	b530      	push	{r4, r5, lr}
 100a0fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 100a0fe:	d502      	bpl.n	100a106 <__aeabi_l2d+0x16>
 100a100:	4240      	negs	r0, r0
 100a102:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 100a106:	f44f 6480 	mov.w	r4, #1024	; 0x400
 100a10a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100a10e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 100a112:	f43f aed8 	beq.w	1009ec6 <__adddf3+0xe6>
 100a116:	f04f 0203 	mov.w	r2, #3
 100a11a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 100a11e:	bf18      	it	ne
 100a120:	3203      	addne	r2, #3
 100a122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 100a126:	bf18      	it	ne
 100a128:	3203      	addne	r2, #3
 100a12a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 100a12e:	f1c2 0320 	rsb	r3, r2, #32
 100a132:	fa00 fc03 	lsl.w	ip, r0, r3
 100a136:	fa20 f002 	lsr.w	r0, r0, r2
 100a13a:	fa01 fe03 	lsl.w	lr, r1, r3
 100a13e:	ea40 000e 	orr.w	r0, r0, lr
 100a142:	fa21 f102 	lsr.w	r1, r1, r2
 100a146:	4414      	add	r4, r2
 100a148:	e6bd      	b.n	1009ec6 <__adddf3+0xe6>
 100a14a:	bf00      	nop

0100a14c <__aeabi_frsub>:
 100a14c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 100a150:	e002      	b.n	100a158 <__addsf3>
 100a152:	bf00      	nop

0100a154 <__aeabi_fsub>:
 100a154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0100a158 <__addsf3>:
 100a158:	0042      	lsls	r2, r0, #1
 100a15a:	bf1f      	itttt	ne
 100a15c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 100a160:	ea92 0f03 	teqne	r2, r3
 100a164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 100a168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 100a16c:	d06a      	beq.n	100a244 <__addsf3+0xec>
 100a16e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 100a172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 100a176:	bfc1      	itttt	gt
 100a178:	18d2      	addgt	r2, r2, r3
 100a17a:	4041      	eorgt	r1, r0
 100a17c:	4048      	eorgt	r0, r1
 100a17e:	4041      	eorgt	r1, r0
 100a180:	bfb8      	it	lt
 100a182:	425b      	neglt	r3, r3
 100a184:	2b19      	cmp	r3, #25
 100a186:	bf88      	it	hi
 100a188:	4770      	bxhi	lr
 100a18a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 100a18e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 100a192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100a196:	bf18      	it	ne
 100a198:	4240      	negne	r0, r0
 100a19a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 100a19e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 100a1a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 100a1a6:	bf18      	it	ne
 100a1a8:	4249      	negne	r1, r1
 100a1aa:	ea92 0f03 	teq	r2, r3
 100a1ae:	d03f      	beq.n	100a230 <__addsf3+0xd8>
 100a1b0:	f1a2 0201 	sub.w	r2, r2, #1
 100a1b4:	fa41 fc03 	asr.w	ip, r1, r3
 100a1b8:	eb10 000c 	adds.w	r0, r0, ip
 100a1bc:	f1c3 0320 	rsb	r3, r3, #32
 100a1c0:	fa01 f103 	lsl.w	r1, r1, r3
 100a1c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 100a1c8:	d502      	bpl.n	100a1d0 <__addsf3+0x78>
 100a1ca:	4249      	negs	r1, r1
 100a1cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 100a1d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 100a1d4:	d313      	bcc.n	100a1fe <__addsf3+0xa6>
 100a1d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 100a1da:	d306      	bcc.n	100a1ea <__addsf3+0x92>
 100a1dc:	0840      	lsrs	r0, r0, #1
 100a1de:	ea4f 0131 	mov.w	r1, r1, rrx
 100a1e2:	f102 0201 	add.w	r2, r2, #1
 100a1e6:	2afe      	cmp	r2, #254	; 0xfe
 100a1e8:	d251      	bcs.n	100a28e <__addsf3+0x136>
 100a1ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 100a1ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 100a1f2:	bf08      	it	eq
 100a1f4:	f020 0001 	biceq.w	r0, r0, #1
 100a1f8:	ea40 0003 	orr.w	r0, r0, r3
 100a1fc:	4770      	bx	lr
 100a1fe:	0049      	lsls	r1, r1, #1
 100a200:	eb40 0000 	adc.w	r0, r0, r0
 100a204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 100a208:	f1a2 0201 	sub.w	r2, r2, #1
 100a20c:	d1ed      	bne.n	100a1ea <__addsf3+0x92>
 100a20e:	fab0 fc80 	clz	ip, r0
 100a212:	f1ac 0c08 	sub.w	ip, ip, #8
 100a216:	ebb2 020c 	subs.w	r2, r2, ip
 100a21a:	fa00 f00c 	lsl.w	r0, r0, ip
 100a21e:	bfaa      	itet	ge
 100a220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 100a224:	4252      	neglt	r2, r2
 100a226:	4318      	orrge	r0, r3
 100a228:	bfbc      	itt	lt
 100a22a:	40d0      	lsrlt	r0, r2
 100a22c:	4318      	orrlt	r0, r3
 100a22e:	4770      	bx	lr
 100a230:	f092 0f00 	teq	r2, #0
 100a234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 100a238:	bf06      	itte	eq
 100a23a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 100a23e:	3201      	addeq	r2, #1
 100a240:	3b01      	subne	r3, #1
 100a242:	e7b5      	b.n	100a1b0 <__addsf3+0x58>
 100a244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 100a248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 100a24c:	bf18      	it	ne
 100a24e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 100a252:	d021      	beq.n	100a298 <__addsf3+0x140>
 100a254:	ea92 0f03 	teq	r2, r3
 100a258:	d004      	beq.n	100a264 <__addsf3+0x10c>
 100a25a:	f092 0f00 	teq	r2, #0
 100a25e:	bf08      	it	eq
 100a260:	4608      	moveq	r0, r1
 100a262:	4770      	bx	lr
 100a264:	ea90 0f01 	teq	r0, r1
 100a268:	bf1c      	itt	ne
 100a26a:	2000      	movne	r0, #0
 100a26c:	4770      	bxne	lr
 100a26e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 100a272:	d104      	bne.n	100a27e <__addsf3+0x126>
 100a274:	0040      	lsls	r0, r0, #1
 100a276:	bf28      	it	cs
 100a278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 100a27c:	4770      	bx	lr
 100a27e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 100a282:	bf3c      	itt	cc
 100a284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 100a288:	4770      	bxcc	lr
 100a28a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 100a28e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 100a292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 100a296:	4770      	bx	lr
 100a298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 100a29c:	bf16      	itet	ne
 100a29e:	4608      	movne	r0, r1
 100a2a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 100a2a4:	4601      	movne	r1, r0
 100a2a6:	0242      	lsls	r2, r0, #9
 100a2a8:	bf06      	itte	eq
 100a2aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 100a2ae:	ea90 0f01 	teqeq	r0, r1
 100a2b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 100a2b6:	4770      	bx	lr

0100a2b8 <__aeabi_ui2f>:
 100a2b8:	f04f 0300 	mov.w	r3, #0
 100a2bc:	e004      	b.n	100a2c8 <__aeabi_i2f+0x8>
 100a2be:	bf00      	nop

0100a2c0 <__aeabi_i2f>:
 100a2c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 100a2c4:	bf48      	it	mi
 100a2c6:	4240      	negmi	r0, r0
 100a2c8:	ea5f 0c00 	movs.w	ip, r0
 100a2cc:	bf08      	it	eq
 100a2ce:	4770      	bxeq	lr
 100a2d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 100a2d4:	4601      	mov	r1, r0
 100a2d6:	f04f 0000 	mov.w	r0, #0
 100a2da:	e01c      	b.n	100a316 <__aeabi_l2f+0x2a>

0100a2dc <__aeabi_ul2f>:
 100a2dc:	ea50 0201 	orrs.w	r2, r0, r1
 100a2e0:	bf08      	it	eq
 100a2e2:	4770      	bxeq	lr
 100a2e4:	f04f 0300 	mov.w	r3, #0
 100a2e8:	e00a      	b.n	100a300 <__aeabi_l2f+0x14>
 100a2ea:	bf00      	nop

0100a2ec <__aeabi_l2f>:
 100a2ec:	ea50 0201 	orrs.w	r2, r0, r1
 100a2f0:	bf08      	it	eq
 100a2f2:	4770      	bxeq	lr
 100a2f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 100a2f8:	d502      	bpl.n	100a300 <__aeabi_l2f+0x14>
 100a2fa:	4240      	negs	r0, r0
 100a2fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 100a300:	ea5f 0c01 	movs.w	ip, r1
 100a304:	bf02      	ittt	eq
 100a306:	4684      	moveq	ip, r0
 100a308:	4601      	moveq	r1, r0
 100a30a:	2000      	moveq	r0, #0
 100a30c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 100a310:	bf08      	it	eq
 100a312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 100a316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 100a31a:	fabc f28c 	clz	r2, ip
 100a31e:	3a08      	subs	r2, #8
 100a320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 100a324:	db10      	blt.n	100a348 <__aeabi_l2f+0x5c>
 100a326:	fa01 fc02 	lsl.w	ip, r1, r2
 100a32a:	4463      	add	r3, ip
 100a32c:	fa00 fc02 	lsl.w	ip, r0, r2
 100a330:	f1c2 0220 	rsb	r2, r2, #32
 100a334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 100a338:	fa20 f202 	lsr.w	r2, r0, r2
 100a33c:	eb43 0002 	adc.w	r0, r3, r2
 100a340:	bf08      	it	eq
 100a342:	f020 0001 	biceq.w	r0, r0, #1
 100a346:	4770      	bx	lr
 100a348:	f102 0220 	add.w	r2, r2, #32
 100a34c:	fa01 fc02 	lsl.w	ip, r1, r2
 100a350:	f1c2 0220 	rsb	r2, r2, #32
 100a354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 100a358:	fa21 f202 	lsr.w	r2, r1, r2
 100a35c:	eb43 0002 	adc.w	r0, r3, r2
 100a360:	bf08      	it	eq
 100a362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 100a366:	4770      	bx	lr

0100a368 <__aeabi_uldivmod>:
 100a368:	b953      	cbnz	r3, 100a380 <__aeabi_uldivmod+0x18>
 100a36a:	b94a      	cbnz	r2, 100a380 <__aeabi_uldivmod+0x18>
 100a36c:	2900      	cmp	r1, #0
 100a36e:	bf08      	it	eq
 100a370:	2800      	cmpeq	r0, #0
 100a372:	bf1c      	itt	ne
 100a374:	f04f 31ff 	movne.w	r1, #4294967295
 100a378:	f04f 30ff 	movne.w	r0, #4294967295
 100a37c:	f7ff bd28 	b.w	1009dd0 <__aeabi_idiv0>
 100a380:	f1ad 0c08 	sub.w	ip, sp, #8
 100a384:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 100a388:	f000 f846 	bl	100a418 <__udivmoddi4>
 100a38c:	f8dd e004 	ldr.w	lr, [sp, #4]
 100a390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100a394:	b004      	add	sp, #16
 100a396:	4770      	bx	lr

0100a398 <__aeabi_f2ulz>:
 100a398:	ee07 0a90 	vmov	s15, r0
 100a39c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 100a3c8 <__aeabi_f2ulz+0x30>
 100a3a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 100a3a4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 100a3d0 <__aeabi_f2ulz+0x38>
 100a3a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 100a3ac:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 100a3b0:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 100a3b4:	ee17 1a10 	vmov	r1, s14
 100a3b8:	ee04 6b45 	vmls.f64	d6, d4, d5
 100a3bc:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 100a3c0:	ee17 0a90 	vmov	r0, s15
 100a3c4:	4770      	bx	lr
 100a3c6:	bf00      	nop
 100a3c8:	00000000 	.word	0x00000000
 100a3cc:	41f00000 	.word	0x41f00000
 100a3d0:	00000000 	.word	0x00000000
 100a3d4:	3df00000 	.word	0x3df00000

0100a3d8 <__aeabi_d2ulz>:
 100a3d8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 100a408 <__aeabi_d2ulz+0x30>
 100a3dc:	ec41 0b16 	vmov	d6, r0, r1
 100a3e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 100a3e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 100a410 <__aeabi_d2ulz+0x38>
 100a3e8:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 100a3ec:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 100a3f0:	ee17 1a10 	vmov	r1, s14
 100a3f4:	ee04 6b45 	vmls.f64	d6, d4, d5
 100a3f8:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 100a3fc:	ee17 0a90 	vmov	r0, s15
 100a400:	4770      	bx	lr
 100a402:	bf00      	nop
 100a404:	f3af 8000 	nop.w
 100a408:	00000000 	.word	0x00000000
 100a40c:	3df00000 	.word	0x3df00000
 100a410:	00000000 	.word	0x00000000
 100a414:	41f00000 	.word	0x41f00000

0100a418 <__udivmoddi4>:
 100a418:	4299      	cmp	r1, r3
 100a41a:	bf08      	it	eq
 100a41c:	4290      	cmpeq	r0, r2
 100a41e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100a422:	4604      	mov	r4, r0
 100a424:	bf38      	it	cc
 100a426:	2000      	movcc	r0, #0
 100a428:	460d      	mov	r5, r1
 100a42a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 100a42c:	bf38      	it	cc
 100a42e:	4601      	movcc	r1, r0
 100a430:	d36c      	bcc.n	100a50c <__udivmoddi4+0xf4>
 100a432:	4690      	mov	r8, r2
 100a434:	4699      	mov	r9, r3
 100a436:	fab3 f683 	clz	r6, r3
 100a43a:	2b00      	cmp	r3, #0
 100a43c:	d06f      	beq.n	100a51e <__udivmoddi4+0x106>
 100a43e:	fab5 f185 	clz	r1, r5
 100a442:	2d00      	cmp	r5, #0
 100a444:	d067      	beq.n	100a516 <__udivmoddi4+0xfe>
 100a446:	1a76      	subs	r6, r6, r1
 100a448:	f1a6 0c20 	sub.w	ip, r6, #32
 100a44c:	fa09 fb06 	lsl.w	fp, r9, r6
 100a450:	fa08 f30c 	lsl.w	r3, r8, ip
 100a454:	f1c6 0e20 	rsb	lr, r6, #32
 100a458:	ea4b 0b03 	orr.w	fp, fp, r3
 100a45c:	fa28 f30e 	lsr.w	r3, r8, lr
 100a460:	ea4b 0b03 	orr.w	fp, fp, r3
 100a464:	fa08 fa06 	lsl.w	sl, r8, r6
 100a468:	455d      	cmp	r5, fp
 100a46a:	bf08      	it	eq
 100a46c:	4554      	cmpeq	r4, sl
 100a46e:	bf3c      	itt	cc
 100a470:	2000      	movcc	r0, #0
 100a472:	4601      	movcc	r1, r0
 100a474:	d30a      	bcc.n	100a48c <__udivmoddi4+0x74>
 100a476:	2001      	movs	r0, #1
 100a478:	ebb4 040a 	subs.w	r4, r4, sl
 100a47c:	fa00 f10c 	lsl.w	r1, r0, ip
 100a480:	fa20 f30e 	lsr.w	r3, r0, lr
 100a484:	eb65 050b 	sbc.w	r5, r5, fp
 100a488:	4319      	orrs	r1, r3
 100a48a:	40b0      	lsls	r0, r6
 100a48c:	2e00      	cmp	r6, #0
 100a48e:	d03d      	beq.n	100a50c <__udivmoddi4+0xf4>
 100a490:	ea4f 085a 	mov.w	r8, sl, lsr #1
 100a494:	4632      	mov	r2, r6
 100a496:	ea48 78cb 	orr.w	r8, r8, fp, lsl #31
 100a49a:	ea4f 095b 	mov.w	r9, fp, lsr #1
 100a49e:	e00b      	b.n	100a4b8 <__udivmoddi4+0xa0>
 100a4a0:	ebb4 0308 	subs.w	r3, r4, r8
 100a4a4:	eb65 0a09 	sbc.w	sl, r5, r9
 100a4a8:	18db      	adds	r3, r3, r3
 100a4aa:	eb4a 0a0a 	adc.w	sl, sl, sl
 100a4ae:	1c5c      	adds	r4, r3, #1
 100a4b0:	f14a 0500 	adc.w	r5, sl, #0
 100a4b4:	3a01      	subs	r2, #1
 100a4b6:	d007      	beq.n	100a4c8 <__udivmoddi4+0xb0>
 100a4b8:	454d      	cmp	r5, r9
 100a4ba:	bf08      	it	eq
 100a4bc:	4544      	cmpeq	r4, r8
 100a4be:	d2ef      	bcs.n	100a4a0 <__udivmoddi4+0x88>
 100a4c0:	1924      	adds	r4, r4, r4
 100a4c2:	416d      	adcs	r5, r5
 100a4c4:	3a01      	subs	r2, #1
 100a4c6:	d1f7      	bne.n	100a4b8 <__udivmoddi4+0xa0>
 100a4c8:	fa05 fe0e 	lsl.w	lr, r5, lr
 100a4cc:	fa24 f306 	lsr.w	r3, r4, r6
 100a4d0:	fa25 fc0c 	lsr.w	ip, r5, ip
 100a4d4:	ea43 030e 	orr.w	r3, r3, lr
 100a4d8:	1900      	adds	r0, r0, r4
 100a4da:	fa25 fe06 	lsr.w	lr, r5, r6
 100a4de:	ea43 040c 	orr.w	r4, r3, ip
 100a4e2:	f1a6 0c20 	sub.w	ip, r6, #32
 100a4e6:	f1c6 0220 	rsb	r2, r6, #32
 100a4ea:	fa0e f306 	lsl.w	r3, lr, r6
 100a4ee:	fa04 fc0c 	lsl.w	ip, r4, ip
 100a4f2:	fa04 f606 	lsl.w	r6, r4, r6
 100a4f6:	ea43 030c 	orr.w	r3, r3, ip
 100a4fa:	fa24 f202 	lsr.w	r2, r4, r2
 100a4fe:	eb45 0101 	adc.w	r1, r5, r1
 100a502:	4313      	orrs	r3, r2
 100a504:	1b80      	subs	r0, r0, r6
 100a506:	4675      	mov	r5, lr
 100a508:	eb61 0103 	sbc.w	r1, r1, r3
 100a50c:	b10f      	cbz	r7, 100a512 <__udivmoddi4+0xfa>
 100a50e:	e9c7 4500 	strd	r4, r5, [r7]
 100a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a516:	fab4 f184 	clz	r1, r4
 100a51a:	3120      	adds	r1, #32
 100a51c:	e793      	b.n	100a446 <__udivmoddi4+0x2e>
 100a51e:	fab2 f682 	clz	r6, r2
 100a522:	fab5 f185 	clz	r1, r5
 100a526:	3620      	adds	r6, #32
 100a528:	2d00      	cmp	r5, #0
 100a52a:	d18c      	bne.n	100a446 <__udivmoddi4+0x2e>
 100a52c:	e7f3      	b.n	100a516 <__udivmoddi4+0xfe>
 100a52e:	bf00      	nop

0100a530 <exit>:
 100a530:	b508      	push	{r3, lr}
 100a532:	2100      	movs	r1, #0
 100a534:	4604      	mov	r4, r0
 100a536:	f006 f9cf 	bl	10108d8 <__call_exitprocs>
 100a53a:	f645 13e0 	movw	r3, #23008	; 0x59e0
 100a53e:	f2c0 1305 	movt	r3, #261	; 0x105
 100a542:	6818      	ldr	r0, [r3, #0]
 100a544:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 100a546:	b103      	cbz	r3, 100a54a <exit+0x1a>
 100a548:	4798      	blx	r3
 100a54a:	4620      	mov	r0, r4
 100a54c:	f00b ea0a 	blx	1015964 <_exit>

0100a550 <__libc_fini_array>:
 100a550:	b538      	push	{r3, r4, r5, lr}
 100a552:	f240 0410 	movw	r4, #16
 100a556:	f240 050c 	movw	r5, #12
 100a55a:	f2c0 1406 	movt	r4, #262	; 0x106
 100a55e:	f2c0 1506 	movt	r5, #262	; 0x106
 100a562:	1b64      	subs	r4, r4, r5
 100a564:	10a4      	asrs	r4, r4, #2
 100a566:	d007      	beq.n	100a578 <__libc_fini_array+0x28>
 100a568:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 100a56c:	3c01      	subs	r4, #1
 100a56e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 100a572:	4798      	blx	r3
 100a574:	2c00      	cmp	r4, #0
 100a576:	d1f9      	bne.n	100a56c <__libc_fini_array+0x1c>
 100a578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 100a57c:	f00b ba1e 	b.w	10159bc <_fini>

0100a580 <__libc_init_array>:
 100a580:	b570      	push	{r4, r5, r6, lr}
 100a582:	f240 0608 	movw	r6, #8
 100a586:	f240 0508 	movw	r5, #8
 100a58a:	f2c0 1606 	movt	r6, #262	; 0x106
 100a58e:	f2c0 1506 	movt	r5, #262	; 0x106
 100a592:	1b76      	subs	r6, r6, r5
 100a594:	10b6      	asrs	r6, r6, #2
 100a596:	d006      	beq.n	100a5a6 <__libc_init_array+0x26>
 100a598:	2400      	movs	r4, #0
 100a59a:	3401      	adds	r4, #1
 100a59c:	f855 3b04 	ldr.w	r3, [r5], #4
 100a5a0:	4798      	blx	r3
 100a5a2:	42a6      	cmp	r6, r4
 100a5a4:	d1f9      	bne.n	100a59a <__libc_init_array+0x1a>
 100a5a6:	f240 060c 	movw	r6, #12
 100a5aa:	f240 0508 	movw	r5, #8
 100a5ae:	f2c0 1606 	movt	r6, #262	; 0x106
 100a5b2:	f2c0 1506 	movt	r5, #262	; 0x106
 100a5b6:	1b76      	subs	r6, r6, r5
 100a5b8:	f00b f9fa 	bl	10159b0 <_init>
 100a5bc:	10b6      	asrs	r6, r6, #2
 100a5be:	d006      	beq.n	100a5ce <__libc_init_array+0x4e>
 100a5c0:	2400      	movs	r4, #0
 100a5c2:	3401      	adds	r4, #1
 100a5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 100a5c8:	4798      	blx	r3
 100a5ca:	42a6      	cmp	r6, r4
 100a5cc:	d1f9      	bne.n	100a5c2 <__libc_init_array+0x42>
 100a5ce:	bd70      	pop	{r4, r5, r6, pc}

0100a5d0 <currentlocale>:
 100a5d0:	4919      	ldr	r1, [pc, #100]	; (100a638 <currentlocale+0x68>)
 100a5d2:	f240 0048 	movw	r0, #72	; 0x48
 100a5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100a5d8:	f2c0 1006 	movt	r0, #262	; 0x106
 100a5dc:	f101 0520 	add.w	r5, r1, #32
 100a5e0:	f002 f8fc 	bl	100c7dc <strcpy>
 100a5e4:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 100a5e8:	f1a5 0720 	sub.w	r7, r5, #32
 100a5ec:	462c      	mov	r4, r5
 100a5ee:	4621      	mov	r1, r4
 100a5f0:	4638      	mov	r0, r7
 100a5f2:	f001 ff89 	bl	100c508 <strcmp>
 100a5f6:	3420      	adds	r4, #32
 100a5f8:	b930      	cbnz	r0, 100a608 <currentlocale+0x38>
 100a5fa:	42b4      	cmp	r4, r6
 100a5fc:	d1f7      	bne.n	100a5ee <currentlocale+0x1e>
 100a5fe:	f240 0048 	movw	r0, #72	; 0x48
 100a602:	f2c0 1006 	movt	r0, #262	; 0x106
 100a606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100a608:	f248 1780 	movw	r7, #33152	; 0x8180
 100a60c:	f240 0448 	movw	r4, #72	; 0x48
 100a610:	f2c0 1705 	movt	r7, #261	; 0x105
 100a614:	f2c0 1406 	movt	r4, #262	; 0x106
 100a618:	4639      	mov	r1, r7
 100a61a:	4620      	mov	r0, r4
 100a61c:	f001 fed6 	bl	100c3cc <strcat>
 100a620:	4629      	mov	r1, r5
 100a622:	4620      	mov	r0, r4
 100a624:	3520      	adds	r5, #32
 100a626:	f001 fed1 	bl	100c3cc <strcat>
 100a62a:	42b5      	cmp	r5, r6
 100a62c:	d1f4      	bne.n	100a618 <currentlocale+0x48>
 100a62e:	f240 0048 	movw	r0, #72	; 0x48
 100a632:	f2c0 1006 	movt	r0, #262	; 0x106
 100a636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100a638:	01058ba8 	.word	0x01058ba8

0100a63c <__loadlocale>:
 100a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100a640:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 100a644:	b08d      	sub	sp, #52	; 0x34
 100a646:	460f      	mov	r7, r1
 100a648:	4606      	mov	r6, r0
 100a64a:	4629      	mov	r1, r5
 100a64c:	4610      	mov	r0, r2
 100a64e:	4614      	mov	r4, r2
 100a650:	f001 ff5a 	bl	100c508 <strcmp>
 100a654:	b918      	cbnz	r0, 100a65e <__loadlocale+0x22>
 100a656:	4628      	mov	r0, r5
 100a658:	b00d      	add	sp, #52	; 0x34
 100a65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a65e:	f248 1184 	movw	r1, #33156	; 0x8184
 100a662:	4620      	mov	r0, r4
 100a664:	f2c0 1105 	movt	r1, #261	; 0x105
 100a668:	f001 ff4e 	bl	100c508 <strcmp>
 100a66c:	2800      	cmp	r0, #0
 100a66e:	f000 809f 	beq.w	100a7b0 <__loadlocale+0x174>
 100a672:	f248 118c 	movw	r1, #33164	; 0x818c
 100a676:	4620      	mov	r0, r4
 100a678:	f2c0 1105 	movt	r1, #261	; 0x105
 100a67c:	f001 ff44 	bl	100c508 <strcmp>
 100a680:	4680      	mov	r8, r0
 100a682:	2800      	cmp	r0, #0
 100a684:	f000 808a 	beq.w	100a79c <__loadlocale+0x160>
 100a688:	7823      	ldrb	r3, [r4, #0]
 100a68a:	2b43      	cmp	r3, #67	; 0x43
 100a68c:	f000 8098 	beq.w	100a7c0 <__loadlocale+0x184>
 100a690:	3b61      	subs	r3, #97	; 0x61
 100a692:	2b19      	cmp	r3, #25
 100a694:	d87d      	bhi.n	100a792 <__loadlocale+0x156>
 100a696:	7863      	ldrb	r3, [r4, #1]
 100a698:	3b61      	subs	r3, #97	; 0x61
 100a69a:	2b19      	cmp	r3, #25
 100a69c:	d879      	bhi.n	100a792 <__loadlocale+0x156>
 100a69e:	78a3      	ldrb	r3, [r4, #2]
 100a6a0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 100a6a4:	2a19      	cmp	r2, #25
 100a6a6:	bf8e      	itee	hi
 100a6a8:	f104 0802 	addhi.w	r8, r4, #2
 100a6ac:	f104 0803 	addls.w	r8, r4, #3
 100a6b0:	78e3      	ldrbls	r3, [r4, #3]
 100a6b2:	2b5f      	cmp	r3, #95	; 0x5f
 100a6b4:	f000 80a0 	beq.w	100a7f8 <__loadlocale+0x1bc>
 100a6b8:	2b2e      	cmp	r3, #46	; 0x2e
 100a6ba:	f000 827c 	beq.w	100abb6 <__loadlocale+0x57a>
 100a6be:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 100a6c2:	d166      	bne.n	100a792 <__loadlocale+0x156>
 100a6c4:	f10d 0910 	add.w	r9, sp, #16
 100a6c8:	f248 1198 	movw	r1, #33176	; 0x8198
 100a6cc:	f2c0 1105 	movt	r1, #261	; 0x105
 100a6d0:	4648      	mov	r0, r9
 100a6d2:	f002 f883 	bl	100c7dc <strcpy>
 100a6d6:	f898 3000 	ldrb.w	r3, [r8]
 100a6da:	2b40      	cmp	r3, #64	; 0x40
 100a6dc:	f000 828a 	beq.w	100abf4 <__loadlocale+0x5b8>
 100a6e0:	f04f 0800 	mov.w	r8, #0
 100a6e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 100a6e8:	3b41      	subs	r3, #65	; 0x41
 100a6ea:	2b34      	cmp	r3, #52	; 0x34
 100a6ec:	d851      	bhi.n	100a792 <__loadlocale+0x156>
 100a6ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 100a6f2:	019c      	.short	0x019c
 100a6f4:	016f0050 	.word	0x016f0050
 100a6f8:	01d10050 	.word	0x01d10050
 100a6fc:	01ae0050 	.word	0x01ae0050
 100a700:	01fd0050 	.word	0x01fd0050
 100a704:	01330154 	.word	0x01330154
 100a708:	00500050 	.word	0x00500050
 100a70c:	00500050 	.word	0x00500050
 100a710:	00500121 	.word	0x00500121
 100a714:	01060050 	.word	0x01060050
 100a718:	009200c6 	.word	0x009200c6
 100a71c:	00500050 	.word	0x00500050
 100a720:	00500050 	.word	0x00500050
 100a724:	00500050 	.word	0x00500050
 100a728:	00500050 	.word	0x00500050
 100a72c:	00500050 	.word	0x00500050
 100a730:	019c0050 	.word	0x019c0050
 100a734:	016f0050 	.word	0x016f0050
 100a738:	01d10050 	.word	0x01d10050
 100a73c:	01ae0050 	.word	0x01ae0050
 100a740:	01fd0050 	.word	0x01fd0050
 100a744:	01330154 	.word	0x01330154
 100a748:	00500050 	.word	0x00500050
 100a74c:	00500050 	.word	0x00500050
 100a750:	00500121 	.word	0x00500121
 100a754:	01060050 	.word	0x01060050
 100a758:	009200c6 	.word	0x009200c6
 100a75c:	f5b0 7f56 	cmp.w	r0, #856	; 0x358
 100a760:	f300 80af 	bgt.w	100a8c2 <__loadlocale+0x286>
 100a764:	f240 3307 	movw	r3, #775	; 0x307
 100a768:	4298      	cmp	r0, r3
 100a76a:	f000 80aa 	beq.w	100a8c2 <__loadlocale+0x286>
 100a76e:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
 100a772:	f280 826a 	bge.w	100ac4a <__loadlocale+0x60e>
 100a776:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 100a77a:	f000 80a2 	beq.w	100a8c2 <__loadlocale+0x286>
 100a77e:	f240 23e1 	movw	r3, #737	; 0x2e1
 100a782:	4298      	cmp	r0, r3
 100a784:	f000 809d 	beq.w	100a8c2 <__loadlocale+0x286>
 100a788:	f240 13b5 	movw	r3, #437	; 0x1b5
 100a78c:	4298      	cmp	r0, r3
 100a78e:	f000 8098 	beq.w	100a8c2 <__loadlocale+0x286>
 100a792:	2500      	movs	r5, #0
 100a794:	4628      	mov	r0, r5
 100a796:	b00d      	add	sp, #52	; 0x34
 100a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a79c:	f10d 0910 	add.w	r9, sp, #16
 100a7a0:	f248 1190 	movw	r1, #33168	; 0x8190
 100a7a4:	f2c0 1105 	movt	r1, #261	; 0x105
 100a7a8:	4648      	mov	r0, r9
 100a7aa:	f002 f817 	bl	100c7dc <strcpy>
 100a7ae:	e799      	b.n	100a6e4 <__loadlocale+0xa8>
 100a7b0:	f248 118c 	movw	r1, #33164	; 0x818c
 100a7b4:	4620      	mov	r0, r4
 100a7b6:	f2c0 1105 	movt	r1, #261	; 0x105
 100a7ba:	f002 f80f 	bl	100c7dc <strcpy>
 100a7be:	e758      	b.n	100a672 <__loadlocale+0x36>
 100a7c0:	7863      	ldrb	r3, [r4, #1]
 100a7c2:	3b2d      	subs	r3, #45	; 0x2d
 100a7c4:	2b01      	cmp	r3, #1
 100a7c6:	d8e4      	bhi.n	100a792 <__loadlocale+0x156>
 100a7c8:	f104 0802 	add.w	r8, r4, #2
 100a7cc:	f10d 0910 	add.w	r9, sp, #16
 100a7d0:	4641      	mov	r1, r8
 100a7d2:	4648      	mov	r0, r9
 100a7d4:	f002 f802 	bl	100c7dc <strcpy>
 100a7d8:	4648      	mov	r0, r9
 100a7da:	2140      	movs	r1, #64	; 0x40
 100a7dc:	f001 fe16 	bl	100c40c <strchr>
 100a7e0:	b108      	cbz	r0, 100a7e6 <__loadlocale+0x1aa>
 100a7e2:	2300      	movs	r3, #0
 100a7e4:	7003      	strb	r3, [r0, #0]
 100a7e6:	4648      	mov	r0, r9
 100a7e8:	f002 f88a 	bl	100c900 <strlen>
 100a7ec:	4480      	add	r8, r0
 100a7ee:	f1b8 0f00 	cmp.w	r8, #0
 100a7f2:	f43f af75 	beq.w	100a6e0 <__loadlocale+0xa4>
 100a7f6:	e76e      	b.n	100a6d6 <__loadlocale+0x9a>
 100a7f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 100a7fc:	3b41      	subs	r3, #65	; 0x41
 100a7fe:	2b19      	cmp	r3, #25
 100a800:	d8c7      	bhi.n	100a792 <__loadlocale+0x156>
 100a802:	f898 3002 	ldrb.w	r3, [r8, #2]
 100a806:	3b41      	subs	r3, #65	; 0x41
 100a808:	2b19      	cmp	r3, #25
 100a80a:	d8c2      	bhi.n	100a792 <__loadlocale+0x156>
 100a80c:	f898 3003 	ldrb.w	r3, [r8, #3]
 100a810:	f108 0803 	add.w	r8, r8, #3
 100a814:	e750      	b.n	100a6b8 <__loadlocale+0x7c>
 100a816:	f248 11b0 	movw	r1, #33200	; 0x81b0
 100a81a:	4648      	mov	r0, r9
 100a81c:	f2c0 1105 	movt	r1, #261	; 0x105
 100a820:	f001 fdb2 	bl	100c388 <strcasecmp>
 100a824:	b140      	cbz	r0, 100a838 <__loadlocale+0x1fc>
 100a826:	f248 11b8 	movw	r1, #33208	; 0x81b8
 100a82a:	4648      	mov	r0, r9
 100a82c:	f2c0 1105 	movt	r1, #261	; 0x105
 100a830:	f001 fdaa 	bl	100c388 <strcasecmp>
 100a834:	2800      	cmp	r0, #0
 100a836:	d1ac      	bne.n	100a792 <__loadlocale+0x156>
 100a838:	f248 11b0 	movw	r1, #33200	; 0x81b0
 100a83c:	4648      	mov	r0, r9
 100a83e:	f2c0 1105 	movt	r1, #261	; 0x105
 100a842:	f24b 6a89 	movw	sl, #46729	; 0xb689
 100a846:	f240 6b25 	movw	fp, #1573	; 0x625
 100a84a:	f2c0 1a00 	movt	sl, #256	; 0x100
 100a84e:	f2c0 1b01 	movt	fp, #257	; 0x101
 100a852:	f001 ffc3 	bl	100c7dc <strcpy>
 100a856:	2306      	movs	r3, #6
 100a858:	2f02      	cmp	r7, #2
 100a85a:	f000 81af 	beq.w	100abbc <__loadlocale+0x580>
 100a85e:	2f06      	cmp	r7, #6
 100a860:	d104      	bne.n	100a86c <__loadlocale+0x230>
 100a862:	4649      	mov	r1, r9
 100a864:	f506 70a5 	add.w	r0, r6, #330	; 0x14a
 100a868:	f001 ffb8 	bl	100c7dc <strcpy>
 100a86c:	4621      	mov	r1, r4
 100a86e:	4628      	mov	r0, r5
 100a870:	f001 ffb4 	bl	100c7dc <strcpy>
 100a874:	4605      	mov	r5, r0
 100a876:	4628      	mov	r0, r5
 100a878:	b00d      	add	sp, #52	; 0x34
 100a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100a87e:	f248 2138 	movw	r1, #33336	; 0x8238
 100a882:	2203      	movs	r2, #3
 100a884:	f2c0 1105 	movt	r1, #261	; 0x105
 100a888:	4648      	mov	r0, r9
 100a88a:	f002 f8a7 	bl	100c9dc <strncasecmp>
 100a88e:	2800      	cmp	r0, #0
 100a890:	f47f af7f 	bne.w	100a792 <__loadlocale+0x156>
 100a894:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100a898:	f248 213c 	movw	r1, #33340	; 0x823c
 100a89c:	f2c0 1105 	movt	r1, #261	; 0x105
 100a8a0:	2b2d      	cmp	r3, #45	; 0x2d
 100a8a2:	bf0c      	ite	eq
 100a8a4:	a805      	addeq	r0, sp, #20
 100a8a6:	f10d 0013 	addne.w	r0, sp, #19
 100a8aa:	f001 fd6d 	bl	100c388 <strcasecmp>
 100a8ae:	2800      	cmp	r0, #0
 100a8b0:	f47f af6f 	bne.w	100a792 <__loadlocale+0x156>
 100a8b4:	f248 2140 	movw	r1, #33344	; 0x8240
 100a8b8:	4648      	mov	r0, r9
 100a8ba:	f2c0 1105 	movt	r1, #261	; 0x105
 100a8be:	f001 ff8d 	bl	100c7dc <strcpy>
 100a8c2:	2f02      	cmp	r7, #2
 100a8c4:	d1cb      	bne.n	100a85e <__loadlocale+0x222>
 100a8c6:	4649      	mov	r1, r9
 100a8c8:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 100a8cc:	f001 ff86 	bl	100c7dc <strcpy>
 100a8d0:	4630      	mov	r0, r6
 100a8d2:	4649      	mov	r1, r9
 100a8d4:	f240 620d 	movw	r2, #1549	; 0x60d
 100a8d8:	f24b 6365 	movw	r3, #46693	; 0xb665
 100a8dc:	f2c0 1201 	movt	r2, #257	; 0x101
 100a8e0:	f2c0 1300 	movt	r3, #256	; 0x100
 100a8e4:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 100a8e8:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 100a8ec:	2201      	movs	r2, #1
 100a8ee:	f886 2128 	strb.w	r2, [r6, #296]	; 0x128
 100a8f2:	f006 f85f 	bl	10109b4 <__set_ctype>
 100a8f6:	2000      	movs	r0, #0
 100a8f8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
 100a8fc:	e7b6      	b.n	100a86c <__loadlocale+0x230>
 100a8fe:	f248 11d4 	movw	r1, #33236	; 0x81d4
 100a902:	4648      	mov	r0, r9
 100a904:	f2c0 1105 	movt	r1, #261	; 0x105
 100a908:	f001 fd3e 	bl	100c388 <strcasecmp>
 100a90c:	2800      	cmp	r0, #0
 100a90e:	f47f af40 	bne.w	100a792 <__loadlocale+0x156>
 100a912:	f248 11d4 	movw	r1, #33236	; 0x81d4
 100a916:	4648      	mov	r0, r9
 100a918:	f2c0 1105 	movt	r1, #261	; 0x105
 100a91c:	f64b 0a91 	movw	sl, #47249	; 0xb891
 100a920:	f001 ff5c 	bl	100c7dc <strcpy>
 100a924:	f240 6bc9 	movw	fp, #1737	; 0x6c9
 100a928:	f2c0 1a00 	movt	sl, #256	; 0x100
 100a92c:	2302      	movs	r3, #2
 100a92e:	f2c0 1b01 	movt	fp, #257	; 0x101
 100a932:	e791      	b.n	100a858 <__loadlocale+0x21c>
 100a934:	f248 2128 	movw	r1, #33320	; 0x8228
 100a938:	4648      	mov	r0, r9
 100a93a:	f2c0 1105 	movt	r1, #261	; 0x105
 100a93e:	f001 fd23 	bl	100c388 <strcasecmp>
 100a942:	2800      	cmp	r0, #0
 100a944:	f47f af25 	bne.w	100a792 <__loadlocale+0x156>
 100a948:	f248 2130 	movw	r1, #33328	; 0x8230
 100a94c:	4648      	mov	r0, r9
 100a94e:	f2c0 1105 	movt	r1, #261	; 0x105
 100a952:	f001 ff43 	bl	100c7dc <strcpy>
 100a956:	e7b4      	b.n	100a8c2 <__loadlocale+0x286>
 100a958:	f248 11f8 	movw	r1, #33272	; 0x81f8
 100a95c:	2204      	movs	r2, #4
 100a95e:	f2c0 1105 	movt	r1, #261	; 0x105
 100a962:	4648      	mov	r0, r9
 100a964:	f002 f83a 	bl	100c9dc <strncasecmp>
 100a968:	2800      	cmp	r0, #0
 100a96a:	f47f af12 	bne.w	100a792 <__loadlocale+0x156>
 100a96e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 100a972:	2b2d      	cmp	r3, #45	; 0x2d
 100a974:	bf08      	it	eq
 100a976:	f89d 3015 	ldrbeq.w	r3, [sp, #21]
 100a97a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100a97e:	2b52      	cmp	r3, #82	; 0x52
 100a980:	f000 8172 	beq.w	100ac68 <__loadlocale+0x62c>
 100a984:	2b55      	cmp	r3, #85	; 0x55
 100a986:	f47f af04 	bne.w	100a792 <__loadlocale+0x156>
 100a98a:	f248 2108 	movw	r1, #33288	; 0x8208
 100a98e:	4648      	mov	r0, r9
 100a990:	f2c0 1105 	movt	r1, #261	; 0x105
 100a994:	f001 ff22 	bl	100c7dc <strcpy>
 100a998:	e793      	b.n	100a8c2 <__loadlocale+0x286>
 100a99a:	f248 11c0 	movw	r1, #33216	; 0x81c0
 100a99e:	4648      	mov	r0, r9
 100a9a0:	f2c0 1105 	movt	r1, #261	; 0x105
 100a9a4:	f001 fcf0 	bl	100c388 <strcasecmp>
 100a9a8:	2800      	cmp	r0, #0
 100a9aa:	f47f aef2 	bne.w	100a792 <__loadlocale+0x156>
 100a9ae:	f248 11c0 	movw	r1, #33216	; 0x81c0
 100a9b2:	4648      	mov	r0, r9
 100a9b4:	f2c0 1105 	movt	r1, #261	; 0x105
 100a9b8:	f64b 1acd 	movw	sl, #47565	; 0xb9cd
 100a9bc:	f001 ff0e 	bl	100c7dc <strcpy>
 100a9c0:	f240 7b8d 	movw	fp, #1933	; 0x78d
 100a9c4:	f2c0 1a00 	movt	sl, #256	; 0x100
 100a9c8:	2308      	movs	r3, #8
 100a9ca:	f2c0 1b01 	movt	fp, #257	; 0x101
 100a9ce:	e743      	b.n	100a858 <__loadlocale+0x21c>
 100a9d0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 100a9d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100a9d8:	2b50      	cmp	r3, #80	; 0x50
 100a9da:	f47f aeda 	bne.w	100a792 <__loadlocale+0x156>
 100a9de:	2202      	movs	r2, #2
 100a9e0:	f248 11f4 	movw	r1, #33268	; 0x81f4
 100a9e4:	4648      	mov	r0, r9
 100a9e6:	f2c0 1105 	movt	r1, #261	; 0x105
 100a9ea:	f002 f877 	bl	100cadc <strncpy>
 100a9ee:	220a      	movs	r2, #10
 100a9f0:	a903      	add	r1, sp, #12
 100a9f2:	f10d 0012 	add.w	r0, sp, #18
 100a9f6:	f002 f965 	bl	100ccc4 <strtol>
 100a9fa:	9b03      	ldr	r3, [sp, #12]
 100a9fc:	781b      	ldrb	r3, [r3, #0]
 100a9fe:	2b00      	cmp	r3, #0
 100aa00:	f47f aec7 	bne.w	100a792 <__loadlocale+0x156>
 100aa04:	f240 335a 	movw	r3, #858	; 0x35a
 100aa08:	4298      	cmp	r0, r3
 100aa0a:	f77f aea7 	ble.w	100a75c <__loadlocale+0x120>
 100aa0e:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
 100aa12:	f040 80fc 	bne.w	100ac0e <__loadlocale+0x5d2>
 100aa16:	f64b 0a91 	movw	sl, #47249	; 0xb891
 100aa1a:	f240 6bc9 	movw	fp, #1737	; 0x6c9
 100aa1e:	f2c0 1a00 	movt	sl, #256	; 0x100
 100aa22:	f2c0 1b01 	movt	fp, #257	; 0x101
 100aa26:	2302      	movs	r3, #2
 100aa28:	e716      	b.n	100a858 <__loadlocale+0x21c>
 100aa2a:	f248 1190 	movw	r1, #33168	; 0x8190
 100aa2e:	4648      	mov	r0, r9
 100aa30:	f2c0 1105 	movt	r1, #261	; 0x105
 100aa34:	f001 fca8 	bl	100c388 <strcasecmp>
 100aa38:	2800      	cmp	r0, #0
 100aa3a:	f47f aeaa 	bne.w	100a792 <__loadlocale+0x156>
 100aa3e:	f248 1190 	movw	r1, #33168	; 0x8190
 100aa42:	4648      	mov	r0, r9
 100aa44:	f2c0 1105 	movt	r1, #261	; 0x105
 100aa48:	f001 fec8 	bl	100c7dc <strcpy>
 100aa4c:	e739      	b.n	100a8c2 <__loadlocale+0x286>
 100aa4e:	f248 2110 	movw	r1, #33296	; 0x8210
 100aa52:	2208      	movs	r2, #8
 100aa54:	f2c0 1105 	movt	r1, #261	; 0x105
 100aa58:	4648      	mov	r0, r9
 100aa5a:	f001 ffbf 	bl	100c9dc <strncasecmp>
 100aa5e:	2800      	cmp	r0, #0
 100aa60:	f47f ae97 	bne.w	100a792 <__loadlocale+0x156>
 100aa64:	f89d 3018 	ldrb.w	r3, [sp, #24]
 100aa68:	f248 211c 	movw	r1, #33308	; 0x821c
 100aa6c:	f2c0 1105 	movt	r1, #261	; 0x105
 100aa70:	2b2d      	cmp	r3, #45	; 0x2d
 100aa72:	bf0c      	ite	eq
 100aa74:	f10d 0019 	addeq.w	r0, sp, #25
 100aa78:	a806      	addne	r0, sp, #24
 100aa7a:	f001 fc85 	bl	100c388 <strcasecmp>
 100aa7e:	2800      	cmp	r0, #0
 100aa80:	f47f ae87 	bne.w	100a792 <__loadlocale+0x156>
 100aa84:	f248 2120 	movw	r1, #33312	; 0x8220
 100aa88:	4648      	mov	r0, r9
 100aa8a:	f2c0 1105 	movt	r1, #261	; 0x105
 100aa8e:	f001 fea5 	bl	100c7dc <strcpy>
 100aa92:	e716      	b.n	100a8c2 <__loadlocale+0x286>
 100aa94:	f248 11c4 	movw	r1, #33220	; 0x81c4
 100aa98:	2203      	movs	r2, #3
 100aa9a:	f2c0 1105 	movt	r1, #261	; 0x105
 100aa9e:	4648      	mov	r0, r9
 100aaa0:	f001 ff9c 	bl	100c9dc <strncasecmp>
 100aaa4:	2800      	cmp	r0, #0
 100aaa6:	f47f ae74 	bne.w	100a792 <__loadlocale+0x156>
 100aaaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100aaae:	f248 11c8 	movw	r1, #33224	; 0x81c8
 100aab2:	f2c0 1105 	movt	r1, #261	; 0x105
 100aab6:	2b2d      	cmp	r3, #45	; 0x2d
 100aab8:	bf0c      	ite	eq
 100aaba:	a805      	addeq	r0, sp, #20
 100aabc:	f10d 0013 	addne.w	r0, sp, #19
 100aac0:	f001 fc62 	bl	100c388 <strcasecmp>
 100aac4:	2800      	cmp	r0, #0
 100aac6:	f47f ae64 	bne.w	100a792 <__loadlocale+0x156>
 100aaca:	f248 11cc 	movw	r1, #33228	; 0x81cc
 100aace:	4648      	mov	r0, r9
 100aad0:	f2c0 1105 	movt	r1, #261	; 0x105
 100aad4:	f64b 1a15 	movw	sl, #47381	; 0xb915
 100aad8:	f001 fe80 	bl	100c7dc <strcpy>
 100aadc:	f240 7b1d 	movw	fp, #1821	; 0x71d
 100aae0:	f2c0 1a00 	movt	sl, #256	; 0x100
 100aae4:	2303      	movs	r3, #3
 100aae6:	f2c0 1b01 	movt	fp, #257	; 0x101
 100aaea:	e6b5      	b.n	100a858 <__loadlocale+0x21c>
 100aaec:	f248 11dc 	movw	r1, #33244	; 0x81dc
 100aaf0:	2203      	movs	r2, #3
 100aaf2:	f2c0 1105 	movt	r1, #261	; 0x105
 100aaf6:	4648      	mov	r0, r9
 100aaf8:	f001 ff70 	bl	100c9dc <strncasecmp>
 100aafc:	2800      	cmp	r0, #0
 100aafe:	f47f ae48 	bne.w	100a792 <__loadlocale+0x156>
 100ab02:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100ab06:	f248 11e0 	movw	r1, #33248	; 0x81e0
 100ab0a:	2204      	movs	r2, #4
 100ab0c:	f2c0 1105 	movt	r1, #261	; 0x105
 100ab10:	2b2d      	cmp	r3, #45	; 0x2d
 100ab12:	bf0c      	ite	eq
 100ab14:	f10d 0814 	addeq.w	r8, sp, #20
 100ab18:	f10d 0813 	addne.w	r8, sp, #19
 100ab1c:	4640      	mov	r0, r8
 100ab1e:	f001 ff5d 	bl	100c9dc <strncasecmp>
 100ab22:	2800      	cmp	r0, #0
 100ab24:	f47f ae35 	bne.w	100a792 <__loadlocale+0x156>
 100ab28:	f898 3004 	ldrb.w	r3, [r8, #4]
 100ab2c:	220a      	movs	r2, #10
 100ab2e:	a903      	add	r1, sp, #12
 100ab30:	2b2d      	cmp	r3, #45	; 0x2d
 100ab32:	bf14      	ite	ne
 100ab34:	f108 0004 	addne.w	r0, r8, #4
 100ab38:	f108 0005 	addeq.w	r0, r8, #5
 100ab3c:	f002 f8c2 	bl	100ccc4 <strtol>
 100ab40:	f1a0 030c 	sub.w	r3, r0, #12
 100ab44:	1e42      	subs	r2, r0, #1
 100ab46:	fab3 f383 	clz	r3, r3
 100ab4a:	4680      	mov	r8, r0
 100ab4c:	095b      	lsrs	r3, r3, #5
 100ab4e:	2a0f      	cmp	r2, #15
 100ab50:	bf88      	it	hi
 100ab52:	f043 0301 	orrhi.w	r3, r3, #1
 100ab56:	2b00      	cmp	r3, #0
 100ab58:	f47f ae1b 	bne.w	100a792 <__loadlocale+0x156>
 100ab5c:	9b03      	ldr	r3, [sp, #12]
 100ab5e:	781b      	ldrb	r3, [r3, #0]
 100ab60:	2b00      	cmp	r3, #0
 100ab62:	f47f ae16 	bne.w	100a792 <__loadlocale+0x156>
 100ab66:	f248 11e8 	movw	r1, #33256	; 0x81e8
 100ab6a:	4648      	mov	r0, r9
 100ab6c:	f2c0 1105 	movt	r1, #261	; 0x105
 100ab70:	f001 fe34 	bl	100c7dc <strcpy>
 100ab74:	f246 6267 	movw	r2, #26215	; 0x6667
 100ab78:	f2c6 6266 	movt	r2, #26214	; 0x6666
 100ab7c:	f1b8 0f0a 	cmp.w	r8, #10
 100ab80:	f04f 000a 	mov.w	r0, #10
 100ab84:	bfc8      	it	gt
 100ab86:	f10d 011a 	addgt.w	r1, sp, #26
 100ab8a:	fb82 c208 	smull	ip, r2, r2, r8
 100ab8e:	bfcc      	ite	gt
 100ab90:	2331      	movgt	r3, #49	; 0x31
 100ab92:	f10d 0119 	addle.w	r1, sp, #25
 100ab96:	f04f 0c00 	mov.w	ip, #0
 100ab9a:	bfc8      	it	gt
 100ab9c:	f88d 3019 	strbgt.w	r3, [sp, #25]
 100aba0:	ea4f 73e8 	mov.w	r3, r8, asr #31
 100aba4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 100aba8:	f881 c001 	strb.w	ip, [r1, #1]
 100abac:	fb00 8313 	mls	r3, r0, r3, r8
 100abb0:	3330      	adds	r3, #48	; 0x30
 100abb2:	700b      	strb	r3, [r1, #0]
 100abb4:	e685      	b.n	100a8c2 <__loadlocale+0x286>
 100abb6:	f108 0801 	add.w	r8, r8, #1
 100abba:	e607      	b.n	100a7cc <__loadlocale+0x190>
 100abbc:	4649      	mov	r1, r9
 100abbe:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 100abc2:	9301      	str	r3, [sp, #4]
 100abc4:	f001 fe0a 	bl	100c7dc <strcpy>
 100abc8:	9b01      	ldr	r3, [sp, #4]
 100abca:	4649      	mov	r1, r9
 100abcc:	f8c6 b0e0 	str.w	fp, [r6, #224]	; 0xe0
 100abd0:	4630      	mov	r0, r6
 100abd2:	f8c6 a0e4 	str.w	sl, [r6, #228]	; 0xe4
 100abd6:	f088 0801 	eor.w	r8, r8, #1
 100abda:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
 100abde:	f005 fee9 	bl	10109b4 <__set_ctype>
 100abe2:	f018 0801 	ands.w	r8, r8, #1
 100abe6:	d067      	beq.n	100acb8 <__loadlocale+0x67c>
 100abe8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 100abec:	2b55      	cmp	r3, #85	; 0x55
 100abee:	d043      	beq.n	100ac78 <__loadlocale+0x63c>
 100abf0:	2001      	movs	r0, #1
 100abf2:	e681      	b.n	100a8f8 <__loadlocale+0x2bc>
 100abf4:	f108 0001 	add.w	r0, r8, #1
 100abf8:	f248 11a4 	movw	r1, #33188	; 0x81a4
 100abfc:	f2c0 1105 	movt	r1, #261	; 0x105
 100ac00:	f001 fc82 	bl	100c508 <strcmp>
 100ac04:	fab0 f880 	clz	r8, r0
 100ac08:	ea4f 1858 	mov.w	r8, r8, lsr #5
 100ac0c:	e56a      	b.n	100a6e4 <__loadlocale+0xa8>
 100ac0e:	dc0f      	bgt.n	100ac30 <__loadlocale+0x5f4>
 100ac10:	f240 3362 	movw	r3, #866	; 0x362
 100ac14:	4298      	cmp	r0, r3
 100ac16:	f43f ae54 	beq.w	100a8c2 <__loadlocale+0x286>
 100ac1a:	f240 336a 	movw	r3, #874	; 0x36a
 100ac1e:	4298      	cmp	r0, r3
 100ac20:	f43f ae4f 	beq.w	100a8c2 <__loadlocale+0x286>
 100ac24:	f240 335e 	movw	r3, #862	; 0x35e
 100ac28:	4298      	cmp	r0, r3
 100ac2a:	f47f adb2 	bne.w	100a792 <__loadlocale+0x156>
 100ac2e:	e648      	b.n	100a8c2 <__loadlocale+0x286>
 100ac30:	f240 4365 	movw	r3, #1125	; 0x465
 100ac34:	4298      	cmp	r0, r3
 100ac36:	f43f ae44 	beq.w	100a8c2 <__loadlocale+0x286>
 100ac3a:	f6ff adaa 	blt.w	100a792 <__loadlocale+0x156>
 100ac3e:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
 100ac42:	2808      	cmp	r0, #8
 100ac44:	f63f ada5 	bhi.w	100a792 <__loadlocale+0x156>
 100ac48:	e63b      	b.n	100a8c2 <__loadlocale+0x286>
 100ac4a:	f5b0 7f55 	cmp.w	r0, #852	; 0x354
 100ac4e:	f43f ae38 	beq.w	100a8c2 <__loadlocale+0x286>
 100ac52:	f240 3357 	movw	r3, #855	; 0x357
 100ac56:	4298      	cmp	r0, r3
 100ac58:	f43f ae33 	beq.w	100a8c2 <__loadlocale+0x286>
 100ac5c:	f240 3352 	movw	r3, #850	; 0x352
 100ac60:	4298      	cmp	r0, r3
 100ac62:	f47f ad96 	bne.w	100a792 <__loadlocale+0x156>
 100ac66:	e62c      	b.n	100a8c2 <__loadlocale+0x286>
 100ac68:	f248 2100 	movw	r1, #33280	; 0x8200
 100ac6c:	4648      	mov	r0, r9
 100ac6e:	f2c0 1105 	movt	r1, #261	; 0x105
 100ac72:	f001 fdb3 	bl	100c7dc <strcpy>
 100ac76:	e624      	b.n	100a8c2 <__loadlocale+0x286>
 100ac78:	f248 2148 	movw	r1, #33352	; 0x8248
 100ac7c:	463a      	mov	r2, r7
 100ac7e:	f2c0 1105 	movt	r1, #261	; 0x105
 100ac82:	4620      	mov	r0, r4
 100ac84:	f001 fed8 	bl	100ca38 <strncmp>
 100ac88:	2800      	cmp	r0, #0
 100ac8a:	d0b1      	beq.n	100abf0 <__loadlocale+0x5b4>
 100ac8c:	f248 214c 	movw	r1, #33356	; 0x824c
 100ac90:	463a      	mov	r2, r7
 100ac92:	f2c0 1105 	movt	r1, #261	; 0x105
 100ac96:	4620      	mov	r0, r4
 100ac98:	f001 fece 	bl	100ca38 <strncmp>
 100ac9c:	2800      	cmp	r0, #0
 100ac9e:	d0a7      	beq.n	100abf0 <__loadlocale+0x5b4>
 100aca0:	463a      	mov	r2, r7
 100aca2:	f248 2150 	movw	r1, #33360	; 0x8250
 100aca6:	4620      	mov	r0, r4
 100aca8:	f2c0 1105 	movt	r1, #261	; 0x105
 100acac:	f001 fec4 	bl	100ca38 <strncmp>
 100acb0:	fab0 f080 	clz	r0, r0
 100acb4:	0940      	lsrs	r0, r0, #5
 100acb6:	e61f      	b.n	100a8f8 <__loadlocale+0x2bc>
 100acb8:	4640      	mov	r0, r8
 100acba:	e61d      	b.n	100a8f8 <__loadlocale+0x2bc>

0100acbc <__get_locale_env>:
 100acbc:	b538      	push	{r3, r4, r5, lr}
 100acbe:	460d      	mov	r5, r1
 100acc0:	f248 2154 	movw	r1, #33364	; 0x8254
 100acc4:	f2c0 1105 	movt	r1, #261	; 0x105
 100acc8:	4604      	mov	r4, r0
 100acca:	f007 faf7 	bl	10122bc <_getenv_r>
 100acce:	b108      	cbz	r0, 100acd4 <__get_locale_env+0x18>
 100acd0:	7803      	ldrb	r3, [r0, #0]
 100acd2:	b9a3      	cbnz	r3, 100acfe <__get_locale_env+0x42>
 100acd4:	f645 13e4 	movw	r3, #23012	; 0x59e4
 100acd8:	f2c0 1305 	movt	r3, #261	; 0x105
 100acdc:	4620      	mov	r0, r4
 100acde:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 100ace2:	f007 faeb 	bl	10122bc <_getenv_r>
 100ace6:	b108      	cbz	r0, 100acec <__get_locale_env+0x30>
 100ace8:	7803      	ldrb	r3, [r0, #0]
 100acea:	b943      	cbnz	r3, 100acfe <__get_locale_env+0x42>
 100acec:	f248 215c 	movw	r1, #33372	; 0x825c
 100acf0:	4620      	mov	r0, r4
 100acf2:	f2c0 1105 	movt	r1, #261	; 0x105
 100acf6:	f007 fae1 	bl	10122bc <_getenv_r>
 100acfa:	b908      	cbnz	r0, 100ad00 <__get_locale_env+0x44>
 100acfc:	4803      	ldr	r0, [pc, #12]	; (100ad0c <__get_locale_env+0x50>)
 100acfe:	bd38      	pop	{r3, r4, r5, pc}
 100ad00:	7802      	ldrb	r2, [r0, #0]
 100ad02:	4b02      	ldr	r3, [pc, #8]	; (100ad0c <__get_locale_env+0x50>)
 100ad04:	2a00      	cmp	r2, #0
 100ad06:	bf08      	it	eq
 100ad08:	4618      	moveq	r0, r3
 100ad0a:	bd38      	pop	{r3, r4, r5, pc}
 100ad0c:	01058cf4 	.word	0x01058cf4

0100ad10 <_setlocale_r>:
 100ad10:	2906      	cmp	r1, #6
 100ad12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100ad16:	4681      	mov	r9, r0
 100ad18:	b083      	sub	sp, #12
 100ad1a:	d868      	bhi.n	100adee <_setlocale_r+0xde>
 100ad1c:	468b      	mov	fp, r1
 100ad1e:	4692      	mov	sl, r2
 100ad20:	2a00      	cmp	r2, #0
 100ad22:	f000 80a3 	beq.w	100ae6c <_setlocale_r+0x15c>
 100ad26:	f8df 8228 	ldr.w	r8, [pc, #552]	; 100af50 <_setlocale_r+0x240>
 100ad2a:	4e86      	ldr	r6, [pc, #536]	; (100af44 <_setlocale_r+0x234>)
 100ad2c:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
 100ad30:	4644      	mov	r4, r8
 100ad32:	4635      	mov	r5, r6
 100ad34:	4629      	mov	r1, r5
 100ad36:	4620      	mov	r0, r4
 100ad38:	3420      	adds	r4, #32
 100ad3a:	f001 fd4f 	bl	100c7dc <strcpy>
 100ad3e:	42bc      	cmp	r4, r7
 100ad40:	f105 0520 	add.w	r5, r5, #32
 100ad44:	d1f6      	bne.n	100ad34 <_setlocale_r+0x24>
 100ad46:	f89a 3000 	ldrb.w	r3, [sl]
 100ad4a:	bbb3      	cbnz	r3, 100adba <_setlocale_r+0xaa>
 100ad4c:	f1bb 0f00 	cmp.w	fp, #0
 100ad50:	f040 8098 	bne.w	100ae84 <_setlocale_r+0x174>
 100ad54:	4645      	mov	r5, r8
 100ad56:	2401      	movs	r4, #1
 100ad58:	4621      	mov	r1, r4
 100ad5a:	4648      	mov	r0, r9
 100ad5c:	f7ff ffae 	bl	100acbc <__get_locale_env>
 100ad60:	3401      	adds	r4, #1
 100ad62:	4607      	mov	r7, r0
 100ad64:	f001 fdcc 	bl	100c900 <strlen>
 100ad68:	4639      	mov	r1, r7
 100ad6a:	281f      	cmp	r0, #31
 100ad6c:	4628      	mov	r0, r5
 100ad6e:	f105 0520 	add.w	r5, r5, #32
 100ad72:	d83c      	bhi.n	100adee <_setlocale_r+0xde>
 100ad74:	f001 fd32 	bl	100c7dc <strcpy>
 100ad78:	2c07      	cmp	r4, #7
 100ad7a:	d1ed      	bne.n	100ad58 <_setlocale_r+0x48>
 100ad7c:	4f72      	ldr	r7, [pc, #456]	; (100af48 <_setlocale_r+0x238>)
 100ad7e:	f648 3a88 	movw	sl, #35720	; 0x8b88
 100ad82:	f2c0 1a05 	movt	sl, #261	; 0x105
 100ad86:	4645      	mov	r5, r8
 100ad88:	2401      	movs	r4, #1
 100ad8a:	46bb      	mov	fp, r7
 100ad8c:	4631      	mov	r1, r6
 100ad8e:	4658      	mov	r0, fp
 100ad90:	f001 fd24 	bl	100c7dc <strcpy>
 100ad94:	462a      	mov	r2, r5
 100ad96:	4621      	mov	r1, r4
 100ad98:	4650      	mov	r0, sl
 100ad9a:	f7ff fc4f 	bl	100a63c <__loadlocale>
 100ad9e:	f10b 0b20 	add.w	fp, fp, #32
 100ada2:	3620      	adds	r6, #32
 100ada4:	3520      	adds	r5, #32
 100ada6:	4603      	mov	r3, r0
 100ada8:	2800      	cmp	r0, #0
 100adaa:	d07c      	beq.n	100aea6 <_setlocale_r+0x196>
 100adac:	3401      	adds	r4, #1
 100adae:	2c07      	cmp	r4, #7
 100adb0:	d1ec      	bne.n	100ad8c <_setlocale_r+0x7c>
 100adb2:	b003      	add	sp, #12
 100adb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100adb8:	e40a      	b.n	100a5d0 <currentlocale>
 100adba:	f1bb 0f00 	cmp.w	fp, #0
 100adbe:	d01e      	beq.n	100adfe <_setlocale_r+0xee>
 100adc0:	4650      	mov	r0, sl
 100adc2:	f001 fd9d 	bl	100c900 <strlen>
 100adc6:	281f      	cmp	r0, #31
 100adc8:	d811      	bhi.n	100adee <_setlocale_r+0xde>
 100adca:	4c60      	ldr	r4, [pc, #384]	; (100af4c <_setlocale_r+0x23c>)
 100adcc:	4651      	mov	r1, sl
 100adce:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 100add2:	4620      	mov	r0, r4
 100add4:	f001 fd02 	bl	100c7dc <strcpy>
 100add8:	4622      	mov	r2, r4
 100adda:	4659      	mov	r1, fp
 100addc:	f648 3088 	movw	r0, #35720	; 0x8b88
 100ade0:	f2c0 1005 	movt	r0, #261	; 0x105
 100ade4:	b003      	add	sp, #12
 100ade6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100adea:	f7ff bc27 	b.w	100a63c <__loadlocale>
 100adee:	2300      	movs	r3, #0
 100adf0:	2216      	movs	r2, #22
 100adf2:	f8c9 2000 	str.w	r2, [r9]
 100adf6:	4618      	mov	r0, r3
 100adf8:	b003      	add	sp, #12
 100adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100adfe:	212f      	movs	r1, #47	; 0x2f
 100ae00:	4650      	mov	r0, sl
 100ae02:	f001 fb03 	bl	100c40c <strchr>
 100ae06:	4604      	mov	r4, r0
 100ae08:	2800      	cmp	r0, #0
 100ae0a:	f000 808b 	beq.w	100af24 <_setlocale_r+0x214>
 100ae0e:	7842      	ldrb	r2, [r0, #1]
 100ae10:	2a2f      	cmp	r2, #47	; 0x2f
 100ae12:	bf08      	it	eq
 100ae14:	1c43      	addeq	r3, r0, #1
 100ae16:	d104      	bne.n	100ae22 <_setlocale_r+0x112>
 100ae18:	461c      	mov	r4, r3
 100ae1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 100ae1e:	2a2f      	cmp	r2, #47	; 0x2f
 100ae20:	d0fa      	beq.n	100ae18 <_setlocale_r+0x108>
 100ae22:	2a00      	cmp	r2, #0
 100ae24:	d0e3      	beq.n	100adee <_setlocale_r+0xde>
 100ae26:	46c3      	mov	fp, r8
 100ae28:	2501      	movs	r5, #1
 100ae2a:	eba4 020a 	sub.w	r2, r4, sl
 100ae2e:	2a1f      	cmp	r2, #31
 100ae30:	dcdd      	bgt.n	100adee <_setlocale_r+0xde>
 100ae32:	3201      	adds	r2, #1
 100ae34:	4651      	mov	r1, sl
 100ae36:	4658      	mov	r0, fp
 100ae38:	3501      	adds	r5, #1
 100ae3a:	f001 fd31 	bl	100c8a0 <strlcpy>
 100ae3e:	7823      	ldrb	r3, [r4, #0]
 100ae40:	2b2f      	cmp	r3, #47	; 0x2f
 100ae42:	d103      	bne.n	100ae4c <_setlocale_r+0x13c>
 100ae44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 100ae48:	2b2f      	cmp	r3, #47	; 0x2f
 100ae4a:	d0fb      	beq.n	100ae44 <_setlocale_r+0x134>
 100ae4c:	2b00      	cmp	r3, #0
 100ae4e:	d059      	beq.n	100af04 <_setlocale_r+0x1f4>
 100ae50:	4622      	mov	r2, r4
 100ae52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 100ae56:	2b00      	cmp	r3, #0
 100ae58:	bf18      	it	ne
 100ae5a:	2b2f      	cmpne	r3, #47	; 0x2f
 100ae5c:	d1f9      	bne.n	100ae52 <_setlocale_r+0x142>
 100ae5e:	2d07      	cmp	r5, #7
 100ae60:	f10b 0b20 	add.w	fp, fp, #32
 100ae64:	46a2      	mov	sl, r4
 100ae66:	d089      	beq.n	100ad7c <_setlocale_r+0x6c>
 100ae68:	4614      	mov	r4, r2
 100ae6a:	e7de      	b.n	100ae2a <_setlocale_r+0x11a>
 100ae6c:	2900      	cmp	r1, #0
 100ae6e:	d0a0      	beq.n	100adb2 <_setlocale_r+0xa2>
 100ae70:	f648 3388 	movw	r3, #35720	; 0x8b88
 100ae74:	f2c0 1305 	movt	r3, #261	; 0x105
 100ae78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 100ae7c:	4618      	mov	r0, r3
 100ae7e:	b003      	add	sp, #12
 100ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ae84:	4659      	mov	r1, fp
 100ae86:	4648      	mov	r0, r9
 100ae88:	f7ff ff18 	bl	100acbc <__get_locale_env>
 100ae8c:	4605      	mov	r5, r0
 100ae8e:	f001 fd37 	bl	100c900 <strlen>
 100ae92:	281f      	cmp	r0, #31
 100ae94:	d8ab      	bhi.n	100adee <_setlocale_r+0xde>
 100ae96:	4c2d      	ldr	r4, [pc, #180]	; (100af4c <_setlocale_r+0x23c>)
 100ae98:	4629      	mov	r1, r5
 100ae9a:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 100ae9e:	4620      	mov	r0, r4
 100aea0:	f001 fc9c 	bl	100c7dc <strcpy>
 100aea4:	e798      	b.n	100add8 <_setlocale_r+0xc8>
 100aea6:	2c01      	cmp	r4, #1
 100aea8:	f8d9 b000 	ldr.w	fp, [r9]
 100aeac:	d027      	beq.n	100aefe <_setlocale_r+0x1ee>
 100aeae:	f648 3688 	movw	r6, #35720	; 0x8b88
 100aeb2:	f248 1a8c 	movw	sl, #33164	; 0x818c
 100aeb6:	f2c0 1605 	movt	r6, #261	; 0x105
 100aeba:	f2c0 1a05 	movt	sl, #261	; 0x105
 100aebe:	2501      	movs	r5, #1
 100aec0:	e004      	b.n	100aecc <_setlocale_r+0x1bc>
 100aec2:	3501      	adds	r5, #1
 100aec4:	f108 0820 	add.w	r8, r8, #32
 100aec8:	42a5      	cmp	r5, r4
 100aeca:	d018      	beq.n	100aefe <_setlocale_r+0x1ee>
 100aecc:	4639      	mov	r1, r7
 100aece:	4640      	mov	r0, r8
 100aed0:	9301      	str	r3, [sp, #4]
 100aed2:	f001 fc83 	bl	100c7dc <strcpy>
 100aed6:	4642      	mov	r2, r8
 100aed8:	4629      	mov	r1, r5
 100aeda:	4630      	mov	r0, r6
 100aedc:	3720      	adds	r7, #32
 100aede:	f7ff fbad 	bl	100a63c <__loadlocale>
 100aee2:	9b01      	ldr	r3, [sp, #4]
 100aee4:	2800      	cmp	r0, #0
 100aee6:	d1ec      	bne.n	100aec2 <_setlocale_r+0x1b2>
 100aee8:	4651      	mov	r1, sl
 100aeea:	4640      	mov	r0, r8
 100aeec:	f001 fc76 	bl	100c7dc <strcpy>
 100aef0:	4642      	mov	r2, r8
 100aef2:	4629      	mov	r1, r5
 100aef4:	4630      	mov	r0, r6
 100aef6:	f7ff fba1 	bl	100a63c <__loadlocale>
 100aefa:	9b01      	ldr	r3, [sp, #4]
 100aefc:	e7e1      	b.n	100aec2 <_setlocale_r+0x1b2>
 100aefe:	f8c9 b000 	str.w	fp, [r9]
 100af02:	e778      	b.n	100adf6 <_setlocale_r+0xe6>
 100af04:	2d07      	cmp	r5, #7
 100af06:	bf1c      	itt	ne
 100af08:	4b10      	ldrne	r3, [pc, #64]	; (100af4c <_setlocale_r+0x23c>)
 100af0a:	eb03 1545 	addne.w	r5, r3, r5, lsl #5
 100af0e:	f43f af35 	beq.w	100ad7c <_setlocale_r+0x6c>
 100af12:	f1a5 0120 	sub.w	r1, r5, #32
 100af16:	4628      	mov	r0, r5
 100af18:	3520      	adds	r5, #32
 100af1a:	f001 fc5f 	bl	100c7dc <strcpy>
 100af1e:	42bd      	cmp	r5, r7
 100af20:	d1f7      	bne.n	100af12 <_setlocale_r+0x202>
 100af22:	e72b      	b.n	100ad7c <_setlocale_r+0x6c>
 100af24:	4650      	mov	r0, sl
 100af26:	f001 fceb 	bl	100c900 <strlen>
 100af2a:	281f      	cmp	r0, #31
 100af2c:	f63f af5f 	bhi.w	100adee <_setlocale_r+0xde>
 100af30:	4644      	mov	r4, r8
 100af32:	4620      	mov	r0, r4
 100af34:	4651      	mov	r1, sl
 100af36:	3420      	adds	r4, #32
 100af38:	f001 fc50 	bl	100c7dc <strcpy>
 100af3c:	42bc      	cmp	r4, r7
 100af3e:	d1f8      	bne.n	100af32 <_setlocale_r+0x222>
 100af40:	e71c      	b.n	100ad7c <_setlocale_r+0x6c>
 100af42:	bf00      	nop
 100af44:	01058ba8 	.word	0x01058ba8
 100af48:	01060230 	.word	0x01060230
 100af4c:	01060130 	.word	0x01060130
 100af50:	01060150 	.word	0x01060150

0100af54 <__locale_mb_cur_max>:
 100af54:	f248 7358 	movw	r3, #34648	; 0x8758
 100af58:	f2c0 1305 	movt	r3, #261	; 0x105
 100af5c:	f648 3288 	movw	r2, #35720	; 0x8b88
 100af60:	f2c0 1205 	movt	r2, #261	; 0x105
 100af64:	681b      	ldr	r3, [r3, #0]
 100af66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100af68:	2b00      	cmp	r3, #0
 100af6a:	bf08      	it	eq
 100af6c:	4613      	moveq	r3, r2
 100af6e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 100af72:	4770      	bx	lr

0100af74 <__locale_ctype_ptr_l>:
 100af74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 100af78:	4770      	bx	lr
 100af7a:	bf00      	nop

0100af7c <__locale_ctype_ptr>:
 100af7c:	f248 7358 	movw	r3, #34648	; 0x8758
 100af80:	f2c0 1305 	movt	r3, #261	; 0x105
 100af84:	f648 3288 	movw	r2, #35720	; 0x8b88
 100af88:	f2c0 1205 	movt	r2, #261	; 0x105
 100af8c:	681b      	ldr	r3, [r3, #0]
 100af8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100af90:	2b00      	cmp	r3, #0
 100af92:	bf08      	it	eq
 100af94:	4613      	moveq	r3, r2
 100af96:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 100af9a:	4770      	bx	lr

0100af9c <setlocale>:
 100af9c:	f248 7358 	movw	r3, #34648	; 0x8758
 100afa0:	f2c0 1305 	movt	r3, #261	; 0x105
 100afa4:	460a      	mov	r2, r1
 100afa6:	4601      	mov	r1, r0
 100afa8:	6818      	ldr	r0, [r3, #0]
 100afaa:	f7ff beb1 	b.w	100ad10 <_setlocale_r>
 100afae:	bf00      	nop

0100afb0 <memalign>:
 100afb0:	f248 7358 	movw	r3, #34648	; 0x8758
 100afb4:	f2c0 1305 	movt	r3, #261	; 0x105
 100afb8:	460a      	mov	r2, r1
 100afba:	4601      	mov	r1, r0
 100afbc:	6818      	ldr	r0, [r3, #0]
 100afbe:	f000 b801 	b.w	100afc4 <_memalign_r>
 100afc2:	bf00      	nop

0100afc4 <_memalign_r>:
 100afc4:	2908      	cmp	r1, #8
 100afc6:	d962      	bls.n	100b08e <_memalign_r+0xca>
 100afc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100afcc:	f102 050b 	add.w	r5, r2, #11
 100afd0:	2d16      	cmp	r5, #22
 100afd2:	4607      	mov	r7, r0
 100afd4:	bf8d      	iteet	hi
 100afd6:	f025 0507 	bichi.w	r5, r5, #7
 100afda:	2300      	movls	r3, #0
 100afdc:	2510      	movls	r5, #16
 100afde:	0feb      	lsrhi	r3, r5, #31
 100afe0:	4295      	cmp	r5, r2
 100afe2:	bf2c      	ite	cs
 100afe4:	461a      	movcs	r2, r3
 100afe6:	f043 0201 	orrcc.w	r2, r3, #1
 100afea:	2a00      	cmp	r2, #0
 100afec:	d149      	bne.n	100b082 <_memalign_r+0xbe>
 100afee:	2910      	cmp	r1, #16
 100aff0:	bf38      	it	cc
 100aff2:	2110      	movcc	r1, #16
 100aff4:	460c      	mov	r4, r1
 100aff6:	3110      	adds	r1, #16
 100aff8:	4429      	add	r1, r5
 100affa:	f000 f86d 	bl	100b0d8 <_malloc_r>
 100affe:	4606      	mov	r6, r0
 100b000:	b3e0      	cbz	r0, 100b07c <_memalign_r+0xb8>
 100b002:	4638      	mov	r0, r7
 100b004:	f1a6 0808 	sub.w	r8, r6, #8
 100b008:	f001 f8ba 	bl	100c180 <__malloc_lock>
 100b00c:	4621      	mov	r1, r4
 100b00e:	4630      	mov	r0, r6
 100b010:	f7fe fd78 	bl	1009b04 <__aeabi_uidivmod>
 100b014:	b341      	cbz	r1, 100b068 <_memalign_r+0xa4>
 100b016:	1e63      	subs	r3, r4, #1
 100b018:	4261      	negs	r1, r4
 100b01a:	4433      	add	r3, r6
 100b01c:	4638      	mov	r0, r7
 100b01e:	4019      	ands	r1, r3
 100b020:	f856 3c04 	ldr.w	r3, [r6, #-4]
 100b024:	3908      	subs	r1, #8
 100b026:	eba1 0208 	sub.w	r2, r1, r8
 100b02a:	f023 0303 	bic.w	r3, r3, #3
 100b02e:	2a0f      	cmp	r2, #15
 100b030:	bfdc      	itt	le
 100b032:	1909      	addle	r1, r1, r4
 100b034:	eba1 0208 	suble.w	r2, r1, r8
 100b038:	1a9b      	subs	r3, r3, r2
 100b03a:	4688      	mov	r8, r1
 100b03c:	eb08 0403 	add.w	r4, r8, r3
 100b040:	f043 0301 	orr.w	r3, r3, #1
 100b044:	f8c8 3004 	str.w	r3, [r8, #4]
 100b048:	4631      	mov	r1, r6
 100b04a:	6863      	ldr	r3, [r4, #4]
 100b04c:	f043 0301 	orr.w	r3, r3, #1
 100b050:	6063      	str	r3, [r4, #4]
 100b052:	f856 3c04 	ldr.w	r3, [r6, #-4]
 100b056:	f003 0301 	and.w	r3, r3, #1
 100b05a:	431a      	orrs	r2, r3
 100b05c:	f846 2c04 	str.w	r2, [r6, #-4]
 100b060:	f006 fe0e 	bl	1011c80 <_free_r>
 100b064:	f108 0608 	add.w	r6, r8, #8
 100b068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 100b06c:	f023 0303 	bic.w	r3, r3, #3
 100b070:	1b5b      	subs	r3, r3, r5
 100b072:	2b0f      	cmp	r3, #15
 100b074:	dc0e      	bgt.n	100b094 <_memalign_r+0xd0>
 100b076:	4638      	mov	r0, r7
 100b078:	f001 f884 	bl	100c184 <__malloc_unlock>
 100b07c:	4630      	mov	r0, r6
 100b07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100b082:	2600      	movs	r6, #0
 100b084:	230c      	movs	r3, #12
 100b086:	6003      	str	r3, [r0, #0]
 100b088:	4630      	mov	r0, r6
 100b08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100b08e:	4611      	mov	r1, r2
 100b090:	f000 b822 	b.w	100b0d8 <_malloc_r>
 100b094:	eb08 0205 	add.w	r2, r8, r5
 100b098:	f043 0301 	orr.w	r3, r3, #1
 100b09c:	f102 0108 	add.w	r1, r2, #8
 100b0a0:	4638      	mov	r0, r7
 100b0a2:	6053      	str	r3, [r2, #4]
 100b0a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 100b0a8:	f003 0301 	and.w	r3, r3, #1
 100b0ac:	431d      	orrs	r5, r3
 100b0ae:	f8c8 5004 	str.w	r5, [r8, #4]
 100b0b2:	f006 fde5 	bl	1011c80 <_free_r>
 100b0b6:	e7de      	b.n	100b076 <_memalign_r+0xb2>

0100b0b8 <malloc>:
 100b0b8:	f248 7358 	movw	r3, #34648	; 0x8758
 100b0bc:	f2c0 1305 	movt	r3, #261	; 0x105
 100b0c0:	4601      	mov	r1, r0
 100b0c2:	6818      	ldr	r0, [r3, #0]
 100b0c4:	f000 b808 	b.w	100b0d8 <_malloc_r>

0100b0c8 <free>:
 100b0c8:	f248 7358 	movw	r3, #34648	; 0x8758
 100b0cc:	f2c0 1305 	movt	r3, #261	; 0x105
 100b0d0:	4601      	mov	r1, r0
 100b0d2:	6818      	ldr	r0, [r3, #0]
 100b0d4:	f006 bdd4 	b.w	1011c80 <_free_r>

0100b0d8 <_malloc_r>:
 100b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100b0dc:	f101 050b 	add.w	r5, r1, #11
 100b0e0:	2d16      	cmp	r5, #22
 100b0e2:	b083      	sub	sp, #12
 100b0e4:	4607      	mov	r7, r0
 100b0e6:	d82c      	bhi.n	100b142 <_malloc_r+0x6a>
 100b0e8:	2910      	cmp	r1, #16
 100b0ea:	d823      	bhi.n	100b134 <_malloc_r+0x5c>
 100b0ec:	f001 f848 	bl	100c180 <__malloc_lock>
 100b0f0:	2510      	movs	r5, #16
 100b0f2:	2002      	movs	r0, #2
 100b0f4:	2318      	movs	r3, #24
 100b0f6:	f648 5614 	movw	r6, #36116	; 0x8d14
 100b0fa:	f2c0 1605 	movt	r6, #261	; 0x105
 100b0fe:	4433      	add	r3, r6
 100b100:	f1a3 0108 	sub.w	r1, r3, #8
 100b104:	685a      	ldr	r2, [r3, #4]
 100b106:	428a      	cmp	r2, r1
 100b108:	d04f      	beq.n	100b1aa <_malloc_r+0xd2>
 100b10a:	6853      	ldr	r3, [r2, #4]
 100b10c:	f102 0408 	add.w	r4, r2, #8
 100b110:	68d1      	ldr	r1, [r2, #12]
 100b112:	4638      	mov	r0, r7
 100b114:	f023 0303 	bic.w	r3, r3, #3
 100b118:	6895      	ldr	r5, [r2, #8]
 100b11a:	441a      	add	r2, r3
 100b11c:	6853      	ldr	r3, [r2, #4]
 100b11e:	60e9      	str	r1, [r5, #12]
 100b120:	f043 0301 	orr.w	r3, r3, #1
 100b124:	608d      	str	r5, [r1, #8]
 100b126:	6053      	str	r3, [r2, #4]
 100b128:	f001 f82c 	bl	100c184 <__malloc_unlock>
 100b12c:	4620      	mov	r0, r4
 100b12e:	b003      	add	sp, #12
 100b130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b134:	2400      	movs	r4, #0
 100b136:	230c      	movs	r3, #12
 100b138:	4620      	mov	r0, r4
 100b13a:	603b      	str	r3, [r7, #0]
 100b13c:	b003      	add	sp, #12
 100b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b142:	f025 0507 	bic.w	r5, r5, #7
 100b146:	42a9      	cmp	r1, r5
 100b148:	bf94      	ite	ls
 100b14a:	2100      	movls	r1, #0
 100b14c:	2101      	movhi	r1, #1
 100b14e:	ea51 73d5 	orrs.w	r3, r1, r5, lsr #31
 100b152:	d1ef      	bne.n	100b134 <_malloc_r+0x5c>
 100b154:	f001 f814 	bl	100c180 <__malloc_lock>
 100b158:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 100b15c:	f0c0 81c5 	bcc.w	100b4ea <_malloc_r+0x412>
 100b160:	0a6b      	lsrs	r3, r5, #9
 100b162:	f000 8111 	beq.w	100b388 <_malloc_r+0x2b0>
 100b166:	2b04      	cmp	r3, #4
 100b168:	f200 819b 	bhi.w	100b4a2 <_malloc_r+0x3ca>
 100b16c:	09ab      	lsrs	r3, r5, #6
 100b16e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 100b172:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 100b176:	00c3      	lsls	r3, r0, #3
 100b178:	f648 5614 	movw	r6, #36116	; 0x8d14
 100b17c:	f2c0 1605 	movt	r6, #261	; 0x105
 100b180:	4433      	add	r3, r6
 100b182:	f1a3 0408 	sub.w	r4, r3, #8
 100b186:	685b      	ldr	r3, [r3, #4]
 100b188:	429c      	cmp	r4, r3
 100b18a:	d106      	bne.n	100b19a <_malloc_r+0xc2>
 100b18c:	e012      	b.n	100b1b4 <_malloc_r+0xdc>
 100b18e:	2900      	cmp	r1, #0
 100b190:	f280 8155 	bge.w	100b43e <_malloc_r+0x366>
 100b194:	68db      	ldr	r3, [r3, #12]
 100b196:	429c      	cmp	r4, r3
 100b198:	d00c      	beq.n	100b1b4 <_malloc_r+0xdc>
 100b19a:	685a      	ldr	r2, [r3, #4]
 100b19c:	f022 0203 	bic.w	r2, r2, #3
 100b1a0:	1b51      	subs	r1, r2, r5
 100b1a2:	290f      	cmp	r1, #15
 100b1a4:	ddf3      	ble.n	100b18e <_malloc_r+0xb6>
 100b1a6:	4660      	mov	r0, ip
 100b1a8:	e004      	b.n	100b1b4 <_malloc_r+0xdc>
 100b1aa:	68da      	ldr	r2, [r3, #12]
 100b1ac:	4293      	cmp	r3, r2
 100b1ae:	bf08      	it	eq
 100b1b0:	3002      	addeq	r0, #2
 100b1b2:	d1aa      	bne.n	100b10a <_malloc_r+0x32>
 100b1b4:	6932      	ldr	r2, [r6, #16]
 100b1b6:	f8df e480 	ldr.w	lr, [pc, #1152]	; 100b638 <_malloc_r+0x560>
 100b1ba:	4572      	cmp	r2, lr
 100b1bc:	bf08      	it	eq
 100b1be:	6871      	ldreq	r1, [r6, #4]
 100b1c0:	d029      	beq.n	100b216 <_malloc_r+0x13e>
 100b1c2:	6853      	ldr	r3, [r2, #4]
 100b1c4:	f023 0c03 	bic.w	ip, r3, #3
 100b1c8:	ebac 0305 	sub.w	r3, ip, r5
 100b1cc:	2b0f      	cmp	r3, #15
 100b1ce:	f300 8190 	bgt.w	100b4f2 <_malloc_r+0x41a>
 100b1d2:	2b00      	cmp	r3, #0
 100b1d4:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 100b1d8:	f280 8114 	bge.w	100b404 <_malloc_r+0x32c>
 100b1dc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 100b1e0:	f080 813f 	bcs.w	100b462 <_malloc_r+0x38a>
 100b1e4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 100b1e8:	2101      	movs	r1, #1
 100b1ea:	eb0c 0401 	add.w	r4, ip, r1
 100b1ee:	6873      	ldr	r3, [r6, #4]
 100b1f0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 100b1f4:	f856 9034 	ldr.w	r9, [r6, r4, lsl #3]
 100b1f8:	fa01 fc0c 	lsl.w	ip, r1, ip
 100b1fc:	eb06 08c4 	add.w	r8, r6, r4, lsl #3
 100b200:	ea4c 0103 	orr.w	r1, ip, r3
 100b204:	f1a8 0308 	sub.w	r3, r8, #8
 100b208:	6071      	str	r1, [r6, #4]
 100b20a:	e9c2 9302 	strd	r9, r3, [r2, #8]
 100b20e:	f846 2034 	str.w	r2, [r6, r4, lsl #3]
 100b212:	f8c9 200c 	str.w	r2, [r9, #12]
 100b216:	1083      	asrs	r3, r0, #2
 100b218:	2401      	movs	r4, #1
 100b21a:	409c      	lsls	r4, r3
 100b21c:	428c      	cmp	r4, r1
 100b21e:	f240 80b9 	bls.w	100b394 <_malloc_r+0x2bc>
 100b222:	68b4      	ldr	r4, [r6, #8]
 100b224:	6863      	ldr	r3, [r4, #4]
 100b226:	f023 0803 	bic.w	r8, r3, #3
 100b22a:	45a8      	cmp	r8, r5
 100b22c:	eba8 0205 	sub.w	r2, r8, r5
 100b230:	bf2c      	ite	cs
 100b232:	2300      	movcs	r3, #0
 100b234:	2301      	movcc	r3, #1
 100b236:	2a0f      	cmp	r2, #15
 100b238:	bfd8      	it	le
 100b23a:	f043 0301 	orrle.w	r3, r3, #1
 100b23e:	2b00      	cmp	r3, #0
 100b240:	f000 80ed 	beq.w	100b41e <_malloc_r+0x346>
 100b244:	f240 29f4 	movw	r9, #756	; 0x2f4
 100b248:	f2c0 1906 	movt	r9, #262	; 0x106
 100b24c:	f8d6 3408 	ldr.w	r3, [r6, #1032]	; 0x408
 100b250:	4638      	mov	r0, r7
 100b252:	f8d9 1000 	ldr.w	r1, [r9]
 100b256:	eb04 0b08 	add.w	fp, r4, r8
 100b25a:	3301      	adds	r3, #1
 100b25c:	4429      	add	r1, r5
 100b25e:	bf17      	itett	ne
 100b260:	f501 5180 	addne.w	r1, r1, #4096	; 0x1000
 100b264:	f101 0310 	addeq.w	r3, r1, #16
 100b268:	310f      	addne	r1, #15
 100b26a:	f421 637f 	bicne.w	r3, r1, #4080	; 0xff0
 100b26e:	bf18      	it	ne
 100b270:	f023 030f 	bicne.w	r3, r3, #15
 100b274:	9301      	str	r3, [sp, #4]
 100b276:	4619      	mov	r1, r3
 100b278:	f000 ffe8 	bl	100c24c <_sbrk_r>
 100b27c:	9b01      	ldr	r3, [sp, #4]
 100b27e:	f1b0 3fff 	cmp.w	r0, #4294967295
 100b282:	4682      	mov	sl, r0
 100b284:	f000 8181 	beq.w	100b58a <_malloc_r+0x4b2>
 100b288:	42b4      	cmp	r4, r6
 100b28a:	bf18      	it	ne
 100b28c:	4583      	cmpne	fp, r0
 100b28e:	f200 817c 	bhi.w	100b58a <_malloc_r+0x4b2>
 100b292:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100b296:	45d3      	cmp	fp, sl
 100b298:	4418      	add	r0, r3
 100b29a:	f8c9 0004 	str.w	r0, [r9, #4]
 100b29e:	f000 8166 	beq.w	100b56e <_malloc_r+0x496>
 100b2a2:	f8d6 2408 	ldr.w	r2, [r6, #1032]	; 0x408
 100b2a6:	3201      	adds	r2, #1
 100b2a8:	bf0f      	iteee	eq
 100b2aa:	f8c6 a408 	streq.w	sl, [r6, #1032]	; 0x408
 100b2ae:	ebaa 0b0b 	subne.w	fp, sl, fp
 100b2b2:	4458      	addne	r0, fp
 100b2b4:	f8c9 0004 	strne.w	r0, [r9, #4]
 100b2b8:	f01a 0b07 	ands.w	fp, sl, #7
 100b2bc:	4638      	mov	r0, r7
 100b2be:	bf1f      	itttt	ne
 100b2c0:	f1cb 0208 	rsbne	r2, fp, #8
 100b2c4:	f5cb 5b80 	rsbne	fp, fp, #4096	; 0x1000
 100b2c8:	4492      	addne	sl, r2
 100b2ca:	f10b 0b08 	addne.w	fp, fp, #8
 100b2ce:	4453      	add	r3, sl
 100b2d0:	bf08      	it	eq
 100b2d2:	f44f 5b80 	moveq.w	fp, #4096	; 0x1000
 100b2d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 100b2da:	ebab 0b03 	sub.w	fp, fp, r3
 100b2de:	4659      	mov	r1, fp
 100b2e0:	f000 ffb4 	bl	100c24c <_sbrk_r>
 100b2e4:	f8c6 a008 	str.w	sl, [r6, #8]
 100b2e8:	1c43      	adds	r3, r0, #1
 100b2ea:	bf18      	it	ne
 100b2ec:	eba0 010a 	subne.w	r1, r0, sl
 100b2f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100b2f4:	bf15      	itete	ne
 100b2f6:	4459      	addne	r1, fp
 100b2f8:	2101      	moveq	r1, #1
 100b2fa:	f041 0101 	orrne.w	r1, r1, #1
 100b2fe:	f04f 0b00 	moveq.w	fp, #0
 100b302:	42b4      	cmp	r4, r6
 100b304:	4458      	add	r0, fp
 100b306:	f8ca 1004 	str.w	r1, [sl, #4]
 100b30a:	f8c9 0004 	str.w	r0, [r9, #4]
 100b30e:	f000 813a 	beq.w	100b586 <_malloc_r+0x4ae>
 100b312:	f1b8 0f0f 	cmp.w	r8, #15
 100b316:	bf9c      	itt	ls
 100b318:	2301      	movls	r3, #1
 100b31a:	f8ca 3004 	strls.w	r3, [sl, #4]
 100b31e:	d92e      	bls.n	100b37e <_malloc_r+0x2a6>
 100b320:	f1a8 030c 	sub.w	r3, r8, #12
 100b324:	6862      	ldr	r2, [r4, #4]
 100b326:	f023 0307 	bic.w	r3, r3, #7
 100b32a:	f04f 0c05 	mov.w	ip, #5
 100b32e:	18e1      	adds	r1, r4, r3
 100b330:	2b0f      	cmp	r3, #15
 100b332:	f002 0201 	and.w	r2, r2, #1
 100b336:	ea42 0203 	orr.w	r2, r2, r3
 100b33a:	6062      	str	r2, [r4, #4]
 100b33c:	e9c1 cc01 	strd	ip, ip, [r1, #4]
 100b340:	f200 8159 	bhi.w	100b5f6 <_malloc_r+0x51e>
 100b344:	f8da 1004 	ldr.w	r1, [sl, #4]
 100b348:	4654      	mov	r4, sl
 100b34a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 100b34e:	4283      	cmp	r3, r0
 100b350:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 100b354:	bf38      	it	cc
 100b356:	f8c9 002c 	strcc.w	r0, [r9, #44]	; 0x2c
 100b35a:	4283      	cmp	r3, r0
 100b35c:	bf38      	it	cc
 100b35e:	f8c9 0030 	strcc.w	r0, [r9, #48]	; 0x30
 100b362:	f021 0103 	bic.w	r1, r1, #3
 100b366:	1b4a      	subs	r2, r1, r5
 100b368:	2a0f      	cmp	r2, #15
 100b36a:	bfcc      	ite	gt
 100b36c:	2300      	movgt	r3, #0
 100b36e:	2301      	movle	r3, #1
 100b370:	42a9      	cmp	r1, r5
 100b372:	bf2c      	ite	cs
 100b374:	4619      	movcs	r1, r3
 100b376:	f043 0101 	orrcc.w	r1, r3, #1
 100b37a:	2900      	cmp	r1, #0
 100b37c:	d04f      	beq.n	100b41e <_malloc_r+0x346>
 100b37e:	4638      	mov	r0, r7
 100b380:	2400      	movs	r4, #0
 100b382:	f000 feff 	bl	100c184 <__malloc_unlock>
 100b386:	e6d1      	b.n	100b12c <_malloc_r+0x54>
 100b388:	f44f 7300 	mov.w	r3, #512	; 0x200
 100b38c:	2040      	movs	r0, #64	; 0x40
 100b38e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 100b392:	e6f1      	b.n	100b178 <_malloc_r+0xa0>
 100b394:	420c      	tst	r4, r1
 100b396:	d105      	bne.n	100b3a4 <_malloc_r+0x2cc>
 100b398:	f020 0003 	bic.w	r0, r0, #3
 100b39c:	0064      	lsls	r4, r4, #1
 100b39e:	3004      	adds	r0, #4
 100b3a0:	420c      	tst	r4, r1
 100b3a2:	d0fb      	beq.n	100b39c <_malloc_r+0x2c4>
 100b3a4:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 100b3a8:	4680      	mov	r8, r0
 100b3aa:	46cc      	mov	ip, r9
 100b3ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 100b3b0:	459c      	cmp	ip, r3
 100b3b2:	d106      	bne.n	100b3c2 <_malloc_r+0x2ea>
 100b3b4:	e081      	b.n	100b4ba <_malloc_r+0x3e2>
 100b3b6:	2a00      	cmp	r2, #0
 100b3b8:	f280 8088 	bge.w	100b4cc <_malloc_r+0x3f4>
 100b3bc:	68db      	ldr	r3, [r3, #12]
 100b3be:	459c      	cmp	ip, r3
 100b3c0:	d07b      	beq.n	100b4ba <_malloc_r+0x3e2>
 100b3c2:	6859      	ldr	r1, [r3, #4]
 100b3c4:	f021 0103 	bic.w	r1, r1, #3
 100b3c8:	1b4a      	subs	r2, r1, r5
 100b3ca:	2a0f      	cmp	r2, #15
 100b3cc:	ddf3      	ble.n	100b3b6 <_malloc_r+0x2de>
 100b3ce:	68dc      	ldr	r4, [r3, #12]
 100b3d0:	eb03 0c05 	add.w	ip, r3, r5
 100b3d4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 100b3d8:	f045 0501 	orr.w	r5, r5, #1
 100b3dc:	4638      	mov	r0, r7
 100b3de:	605d      	str	r5, [r3, #4]
 100b3e0:	f042 0501 	orr.w	r5, r2, #1
 100b3e4:	f8c8 400c 	str.w	r4, [r8, #12]
 100b3e8:	f8c4 8008 	str.w	r8, [r4, #8]
 100b3ec:	f103 0408 	add.w	r4, r3, #8
 100b3f0:	e9c6 cc04 	strd	ip, ip, [r6, #16]
 100b3f4:	e9cc ee02 	strd	lr, lr, [ip, #8]
 100b3f8:	f8cc 5004 	str.w	r5, [ip, #4]
 100b3fc:	505a      	str	r2, [r3, r1]
 100b3fe:	f000 fec1 	bl	100c184 <__malloc_unlock>
 100b402:	e693      	b.n	100b12c <_malloc_r+0x54>
 100b404:	4494      	add	ip, r2
 100b406:	4638      	mov	r0, r7
 100b408:	f102 0408 	add.w	r4, r2, #8
 100b40c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 100b410:	f043 0301 	orr.w	r3, r3, #1
 100b414:	f8cc 3004 	str.w	r3, [ip, #4]
 100b418:	f000 feb4 	bl	100c184 <__malloc_unlock>
 100b41c:	e686      	b.n	100b12c <_malloc_r+0x54>
 100b41e:	1963      	adds	r3, r4, r5
 100b420:	f042 0201 	orr.w	r2, r2, #1
 100b424:	4638      	mov	r0, r7
 100b426:	f045 0501 	orr.w	r5, r5, #1
 100b42a:	6065      	str	r5, [r4, #4]
 100b42c:	3408      	adds	r4, #8
 100b42e:	60b3      	str	r3, [r6, #8]
 100b430:	605a      	str	r2, [r3, #4]
 100b432:	f000 fea7 	bl	100c184 <__malloc_unlock>
 100b436:	4620      	mov	r0, r4
 100b438:	b003      	add	sp, #12
 100b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b43e:	441a      	add	r2, r3
 100b440:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
 100b444:	4638      	mov	r0, r7
 100b446:	f103 0408 	add.w	r4, r3, #8
 100b44a:	6851      	ldr	r1, [r2, #4]
 100b44c:	60f5      	str	r5, [r6, #12]
 100b44e:	f041 0101 	orr.w	r1, r1, #1
 100b452:	60ae      	str	r6, [r5, #8]
 100b454:	6051      	str	r1, [r2, #4]
 100b456:	f000 fe95 	bl	100c184 <__malloc_unlock>
 100b45a:	4620      	mov	r0, r4
 100b45c:	b003      	add	sp, #12
 100b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b462:	ea4f 215c 	mov.w	r1, ip, lsr #9
 100b466:	2904      	cmp	r1, #4
 100b468:	d956      	bls.n	100b518 <_malloc_r+0x440>
 100b46a:	2914      	cmp	r1, #20
 100b46c:	f200 809b 	bhi.w	100b5a6 <_malloc_r+0x4ce>
 100b470:	f101 035c 	add.w	r3, r1, #92	; 0x5c
 100b474:	315b      	adds	r1, #91	; 0x5b
 100b476:	00db      	lsls	r3, r3, #3
 100b478:	18f4      	adds	r4, r6, r3
 100b47a:	58f3      	ldr	r3, [r6, r3]
 100b47c:	3c08      	subs	r4, #8
 100b47e:	429c      	cmp	r4, r3
 100b480:	f000 8086 	beq.w	100b590 <_malloc_r+0x4b8>
 100b484:	6859      	ldr	r1, [r3, #4]
 100b486:	f021 0103 	bic.w	r1, r1, #3
 100b48a:	4561      	cmp	r1, ip
 100b48c:	d902      	bls.n	100b494 <_malloc_r+0x3bc>
 100b48e:	689b      	ldr	r3, [r3, #8]
 100b490:	429c      	cmp	r4, r3
 100b492:	d1f7      	bne.n	100b484 <_malloc_r+0x3ac>
 100b494:	68dc      	ldr	r4, [r3, #12]
 100b496:	6871      	ldr	r1, [r6, #4]
 100b498:	e9c2 3402 	strd	r3, r4, [r2, #8]
 100b49c:	60a2      	str	r2, [r4, #8]
 100b49e:	60da      	str	r2, [r3, #12]
 100b4a0:	e6b9      	b.n	100b216 <_malloc_r+0x13e>
 100b4a2:	2b14      	cmp	r3, #20
 100b4a4:	d93f      	bls.n	100b526 <_malloc_r+0x44e>
 100b4a6:	2b54      	cmp	r3, #84	; 0x54
 100b4a8:	f200 8086 	bhi.w	100b5b8 <_malloc_r+0x4e0>
 100b4ac:	0b2b      	lsrs	r3, r5, #12
 100b4ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 100b4b2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 100b4b6:	00c3      	lsls	r3, r0, #3
 100b4b8:	e65e      	b.n	100b178 <_malloc_r+0xa0>
 100b4ba:	f108 0801 	add.w	r8, r8, #1
 100b4be:	f10c 0c08 	add.w	ip, ip, #8
 100b4c2:	f018 0f03 	tst.w	r8, #3
 100b4c6:	f47f af71 	bne.w	100b3ac <_malloc_r+0x2d4>
 100b4ca:	e036      	b.n	100b53a <_malloc_r+0x462>
 100b4cc:	4419      	add	r1, r3
 100b4ce:	461c      	mov	r4, r3
 100b4d0:	68da      	ldr	r2, [r3, #12]
 100b4d2:	4638      	mov	r0, r7
 100b4d4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 100b4d8:	684b      	ldr	r3, [r1, #4]
 100b4da:	f043 0301 	orr.w	r3, r3, #1
 100b4de:	604b      	str	r3, [r1, #4]
 100b4e0:	60ea      	str	r2, [r5, #12]
 100b4e2:	6095      	str	r5, [r2, #8]
 100b4e4:	f000 fe4e 	bl	100c184 <__malloc_unlock>
 100b4e8:	e620      	b.n	100b12c <_malloc_r+0x54>
 100b4ea:	08e8      	lsrs	r0, r5, #3
 100b4ec:	f105 0308 	add.w	r3, r5, #8
 100b4f0:	e601      	b.n	100b0f6 <_malloc_r+0x1e>
 100b4f2:	1951      	adds	r1, r2, r5
 100b4f4:	4638      	mov	r0, r7
 100b4f6:	f045 0501 	orr.w	r5, r5, #1
 100b4fa:	6055      	str	r5, [r2, #4]
 100b4fc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 100b500:	f043 0501 	orr.w	r5, r3, #1
 100b504:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 100b508:	f102 0408 	add.w	r4, r2, #8
 100b50c:	604d      	str	r5, [r1, #4]
 100b50e:	f842 300c 	str.w	r3, [r2, ip]
 100b512:	f000 fe37 	bl	100c184 <__malloc_unlock>
 100b516:	e609      	b.n	100b12c <_malloc_r+0x54>
 100b518:	ea4f 119c 	mov.w	r1, ip, lsr #6
 100b51c:	f101 0339 	add.w	r3, r1, #57	; 0x39
 100b520:	3138      	adds	r1, #56	; 0x38
 100b522:	00db      	lsls	r3, r3, #3
 100b524:	e7a8      	b.n	100b478 <_malloc_r+0x3a0>
 100b526:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 100b52a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 100b52e:	00c3      	lsls	r3, r0, #3
 100b530:	e622      	b.n	100b178 <_malloc_r+0xa0>
 100b532:	f859 3908 	ldr.w	r3, [r9], #-8
 100b536:	454b      	cmp	r3, r9
 100b538:	d17c      	bne.n	100b634 <_malloc_r+0x55c>
 100b53a:	f010 0f03 	tst.w	r0, #3
 100b53e:	f100 30ff 	add.w	r0, r0, #4294967295
 100b542:	d1f6      	bne.n	100b532 <_malloc_r+0x45a>
 100b544:	6873      	ldr	r3, [r6, #4]
 100b546:	ea23 0304 	bic.w	r3, r3, r4
 100b54a:	6073      	str	r3, [r6, #4]
 100b54c:	0064      	lsls	r4, r4, #1
 100b54e:	429c      	cmp	r4, r3
 100b550:	bf8c      	ite	hi
 100b552:	2200      	movhi	r2, #0
 100b554:	2201      	movls	r2, #1
 100b556:	2c00      	cmp	r4, #0
 100b558:	bf08      	it	eq
 100b55a:	2200      	moveq	r2, #0
 100b55c:	b91a      	cbnz	r2, 100b566 <_malloc_r+0x48e>
 100b55e:	e660      	b.n	100b222 <_malloc_r+0x14a>
 100b560:	0064      	lsls	r4, r4, #1
 100b562:	f108 0804 	add.w	r8, r8, #4
 100b566:	421c      	tst	r4, r3
 100b568:	d0fa      	beq.n	100b560 <_malloc_r+0x488>
 100b56a:	4640      	mov	r0, r8
 100b56c:	e71a      	b.n	100b3a4 <_malloc_r+0x2cc>
 100b56e:	f3cb 020b 	ubfx	r2, fp, #0, #12
 100b572:	2a00      	cmp	r2, #0
 100b574:	f47f ae95 	bne.w	100b2a2 <_malloc_r+0x1ca>
 100b578:	68b4      	ldr	r4, [r6, #8]
 100b57a:	eb08 0103 	add.w	r1, r8, r3
 100b57e:	f041 0101 	orr.w	r1, r1, #1
 100b582:	6061      	str	r1, [r4, #4]
 100b584:	e6e1      	b.n	100b34a <_malloc_r+0x272>
 100b586:	4654      	mov	r4, sl
 100b588:	e6df      	b.n	100b34a <_malloc_r+0x272>
 100b58a:	68b4      	ldr	r4, [r6, #8]
 100b58c:	6861      	ldr	r1, [r4, #4]
 100b58e:	e6e8      	b.n	100b362 <_malloc_r+0x28a>
 100b590:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 100b594:	f04f 0801 	mov.w	r8, #1
 100b598:	6871      	ldr	r1, [r6, #4]
 100b59a:	fa08 fc0c 	lsl.w	ip, r8, ip
 100b59e:	ea4c 0101 	orr.w	r1, ip, r1
 100b5a2:	6071      	str	r1, [r6, #4]
 100b5a4:	e778      	b.n	100b498 <_malloc_r+0x3c0>
 100b5a6:	2954      	cmp	r1, #84	; 0x54
 100b5a8:	d810      	bhi.n	100b5cc <_malloc_r+0x4f4>
 100b5aa:	ea4f 311c 	mov.w	r1, ip, lsr #12
 100b5ae:	f101 036f 	add.w	r3, r1, #111	; 0x6f
 100b5b2:	316e      	adds	r1, #110	; 0x6e
 100b5b4:	00db      	lsls	r3, r3, #3
 100b5b6:	e75f      	b.n	100b478 <_malloc_r+0x3a0>
 100b5b8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 100b5bc:	d810      	bhi.n	100b5e0 <_malloc_r+0x508>
 100b5be:	0beb      	lsrs	r3, r5, #15
 100b5c0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 100b5c4:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 100b5c8:	00c3      	lsls	r3, r0, #3
 100b5ca:	e5d5      	b.n	100b178 <_malloc_r+0xa0>
 100b5cc:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 100b5d0:	d81b      	bhi.n	100b60a <_malloc_r+0x532>
 100b5d2:	ea4f 31dc 	mov.w	r1, ip, lsr #15
 100b5d6:	f101 0378 	add.w	r3, r1, #120	; 0x78
 100b5da:	3177      	adds	r1, #119	; 0x77
 100b5dc:	00db      	lsls	r3, r3, #3
 100b5de:	e74b      	b.n	100b478 <_malloc_r+0x3a0>
 100b5e0:	f240 5254 	movw	r2, #1364	; 0x554
 100b5e4:	4293      	cmp	r3, r2
 100b5e6:	d81f      	bhi.n	100b628 <_malloc_r+0x550>
 100b5e8:	0cab      	lsrs	r3, r5, #18
 100b5ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 100b5ee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 100b5f2:	00c3      	lsls	r3, r0, #3
 100b5f4:	e5c0      	b.n	100b178 <_malloc_r+0xa0>
 100b5f6:	f104 0108 	add.w	r1, r4, #8
 100b5fa:	4638      	mov	r0, r7
 100b5fc:	f006 fb40 	bl	1011c80 <_free_r>
 100b600:	68b4      	ldr	r4, [r6, #8]
 100b602:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100b606:	6861      	ldr	r1, [r4, #4]
 100b608:	e69f      	b.n	100b34a <_malloc_r+0x272>
 100b60a:	f240 5354 	movw	r3, #1364	; 0x554
 100b60e:	4299      	cmp	r1, r3
 100b610:	bf9b      	ittet	ls
 100b612:	ea4f 419c 	movls.w	r1, ip, lsr #18
 100b616:	f101 037d 	addls.w	r3, r1, #125	; 0x7d
 100b61a:	f44f 737e 	movhi.w	r3, #1016	; 0x3f8
 100b61e:	317c      	addls	r1, #124	; 0x7c
 100b620:	bf8c      	ite	hi
 100b622:	217e      	movhi	r1, #126	; 0x7e
 100b624:	00db      	lslls	r3, r3, #3
 100b626:	e727      	b.n	100b478 <_malloc_r+0x3a0>
 100b628:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 100b62c:	207f      	movs	r0, #127	; 0x7f
 100b62e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 100b632:	e5a1      	b.n	100b178 <_malloc_r+0xa0>
 100b634:	6873      	ldr	r3, [r6, #4]
 100b636:	e789      	b.n	100b54c <_malloc_r+0x474>
 100b638:	01058d1c 	.word	0x01058d1c

0100b63c <_mbtowc_r>:
 100b63c:	b430      	push	{r4, r5}
 100b63e:	f248 7458 	movw	r4, #34648	; 0x8758
 100b642:	f2c0 1405 	movt	r4, #261	; 0x105
 100b646:	f648 3588 	movw	r5, #35720	; 0x8b88
 100b64a:	f2c0 1505 	movt	r5, #261	; 0x105
 100b64e:	6824      	ldr	r4, [r4, #0]
 100b650:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100b652:	2c00      	cmp	r4, #0
 100b654:	bf08      	it	eq
 100b656:	462c      	moveq	r4, r5
 100b658:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 100b65c:	46a4      	mov	ip, r4
 100b65e:	bc30      	pop	{r4, r5}
 100b660:	4760      	bx	ip
 100b662:	bf00      	nop

0100b664 <__ascii_mbtowc>:
 100b664:	b082      	sub	sp, #8
 100b666:	b151      	cbz	r1, 100b67e <__ascii_mbtowc+0x1a>
 100b668:	4610      	mov	r0, r2
 100b66a:	b132      	cbz	r2, 100b67a <__ascii_mbtowc+0x16>
 100b66c:	b14b      	cbz	r3, 100b682 <__ascii_mbtowc+0x1e>
 100b66e:	7813      	ldrb	r3, [r2, #0]
 100b670:	600b      	str	r3, [r1, #0]
 100b672:	7812      	ldrb	r2, [r2, #0]
 100b674:	1c10      	adds	r0, r2, #0
 100b676:	bf18      	it	ne
 100b678:	2001      	movne	r0, #1
 100b67a:	b002      	add	sp, #8
 100b67c:	4770      	bx	lr
 100b67e:	a901      	add	r1, sp, #4
 100b680:	e7f2      	b.n	100b668 <__ascii_mbtowc+0x4>
 100b682:	f06f 0001 	mvn.w	r0, #1
 100b686:	e7f8      	b.n	100b67a <__ascii_mbtowc+0x16>

0100b688 <__utf8_mbtowc>:
 100b688:	b5f0      	push	{r4, r5, r6, r7, lr}
 100b68a:	b083      	sub	sp, #12
 100b68c:	4607      	mov	r7, r0
 100b68e:	9c08      	ldr	r4, [sp, #32]
 100b690:	2900      	cmp	r1, #0
 100b692:	d035      	beq.n	100b700 <__utf8_mbtowc+0x78>
 100b694:	4610      	mov	r0, r2
 100b696:	b34a      	cbz	r2, 100b6ec <__utf8_mbtowc+0x64>
 100b698:	2b00      	cmp	r3, #0
 100b69a:	f000 80db 	beq.w	100b854 <__utf8_mbtowc+0x1cc>
 100b69e:	6826      	ldr	r6, [r4, #0]
 100b6a0:	bb36      	cbnz	r6, 100b6f0 <__utf8_mbtowc+0x68>
 100b6a2:	7810      	ldrb	r0, [r2, #0]
 100b6a4:	2501      	movs	r5, #1
 100b6a6:	b338      	cbz	r0, 100b6f8 <__utf8_mbtowc+0x70>
 100b6a8:	287f      	cmp	r0, #127	; 0x7f
 100b6aa:	dd66      	ble.n	100b77a <__utf8_mbtowc+0xf2>
 100b6ac:	f1a0 0cc0 	sub.w	ip, r0, #192	; 0xc0
 100b6b0:	f1bc 0f1f 	cmp.w	ip, #31
 100b6b4:	d826      	bhi.n	100b704 <__utf8_mbtowc+0x7c>
 100b6b6:	7120      	strb	r0, [r4, #4]
 100b6b8:	b926      	cbnz	r6, 100b6c4 <__utf8_mbtowc+0x3c>
 100b6ba:	2601      	movs	r6, #1
 100b6bc:	42b3      	cmp	r3, r6
 100b6be:	6026      	str	r6, [r4, #0]
 100b6c0:	f240 80c8 	bls.w	100b854 <__utf8_mbtowc+0x1cc>
 100b6c4:	5d52      	ldrb	r2, [r2, r5]
 100b6c6:	3501      	adds	r5, #1
 100b6c8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100b6cc:	2b3f      	cmp	r3, #63	; 0x3f
 100b6ce:	f200 80c7 	bhi.w	100b860 <__utf8_mbtowc+0x1d8>
 100b6d2:	28c1      	cmp	r0, #193	; 0xc1
 100b6d4:	f340 80c4 	ble.w	100b860 <__utf8_mbtowc+0x1d8>
 100b6d8:	0183      	lsls	r3, r0, #6
 100b6da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100b6de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 100b6e2:	4628      	mov	r0, r5
 100b6e4:	4313      	orrs	r3, r2
 100b6e6:	2200      	movs	r2, #0
 100b6e8:	6022      	str	r2, [r4, #0]
 100b6ea:	600b      	str	r3, [r1, #0]
 100b6ec:	b003      	add	sp, #12
 100b6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100b6f0:	7920      	ldrb	r0, [r4, #4]
 100b6f2:	2500      	movs	r5, #0
 100b6f4:	2800      	cmp	r0, #0
 100b6f6:	d1d7      	bne.n	100b6a8 <__utf8_mbtowc+0x20>
 100b6f8:	6008      	str	r0, [r1, #0]
 100b6fa:	6020      	str	r0, [r4, #0]
 100b6fc:	b003      	add	sp, #12
 100b6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100b700:	a901      	add	r1, sp, #4
 100b702:	e7c7      	b.n	100b694 <__utf8_mbtowc+0xc>
 100b704:	f1a0 0ce0 	sub.w	ip, r0, #224	; 0xe0
 100b708:	f1bc 0f0f 	cmp.w	ip, #15
 100b70c:	d83b      	bhi.n	100b786 <__utf8_mbtowc+0xfe>
 100b70e:	7120      	strb	r0, [r4, #4]
 100b710:	2e00      	cmp	r6, #0
 100b712:	f000 8088 	beq.w	100b826 <__utf8_mbtowc+0x19e>
 100b716:	f1b3 3fff 	cmp.w	r3, #4294967295
 100b71a:	bf18      	it	ne
 100b71c:	3301      	addne	r3, #1
 100b71e:	2e01      	cmp	r6, #1
 100b720:	bf18      	it	ne
 100b722:	f894 c005 	ldrbne.w	ip, [r4, #5]
 100b726:	f000 8082 	beq.w	100b82e <__utf8_mbtowc+0x1a6>
 100b72a:	f1bc 0f9f 	cmp.w	ip, #159	; 0x9f
 100b72e:	bfd8      	it	le
 100b730:	28e0      	cmple	r0, #224	; 0xe0
 100b732:	f000 8095 	beq.w	100b860 <__utf8_mbtowc+0x1d8>
 100b736:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 100b73a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100b73e:	f200 808f 	bhi.w	100b860 <__utf8_mbtowc+0x1d8>
 100b742:	2e01      	cmp	r6, #1
 100b744:	f884 c005 	strb.w	ip, [r4, #5]
 100b748:	d07f      	beq.n	100b84a <__utf8_mbtowc+0x1c2>
 100b74a:	5d53      	ldrb	r3, [r2, r5]
 100b74c:	3501      	adds	r5, #1
 100b74e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 100b752:	2a3f      	cmp	r2, #63	; 0x3f
 100b754:	f200 8084 	bhi.w	100b860 <__utf8_mbtowc+0x1d8>
 100b758:	0300      	lsls	r0, r0, #12
 100b75a:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 100b75e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 100b762:	f40c 6c7c 	and.w	ip, ip, #4032	; 0xfc0
 100b766:	b283      	uxth	r3, r0
 100b768:	4628      	mov	r0, r5
 100b76a:	ea43 0c0c 	orr.w	ip, r3, ip
 100b76e:	2500      	movs	r5, #0
 100b770:	ea4c 0202 	orr.w	r2, ip, r2
 100b774:	6025      	str	r5, [r4, #0]
 100b776:	600a      	str	r2, [r1, #0]
 100b778:	e7b8      	b.n	100b6ec <__utf8_mbtowc+0x64>
 100b77a:	2300      	movs	r3, #0
 100b77c:	6023      	str	r3, [r4, #0]
 100b77e:	6008      	str	r0, [r1, #0]
 100b780:	2001      	movs	r0, #1
 100b782:	b003      	add	sp, #12
 100b784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100b786:	f1a0 0cf0 	sub.w	ip, r0, #240	; 0xf0
 100b78a:	f1bc 0f04 	cmp.w	ip, #4
 100b78e:	d867      	bhi.n	100b860 <__utf8_mbtowc+0x1d8>
 100b790:	7120      	strb	r0, [r4, #4]
 100b792:	2e00      	cmp	r6, #0
 100b794:	d050      	beq.n	100b838 <__utf8_mbtowc+0x1b0>
 100b796:	f1b3 3fff 	cmp.w	r3, #4294967295
 100b79a:	bf18      	it	ne
 100b79c:	3301      	addne	r3, #1
 100b79e:	2e01      	cmp	r6, #1
 100b7a0:	bf18      	it	ne
 100b7a2:	f894 c005 	ldrbne.w	ip, [r4, #5]
 100b7a6:	d04b      	beq.n	100b840 <__utf8_mbtowc+0x1b8>
 100b7a8:	28f0      	cmp	r0, #240	; 0xf0
 100b7aa:	d056      	beq.n	100b85a <__utf8_mbtowc+0x1d2>
 100b7ac:	f1a0 0ef4 	sub.w	lr, r0, #244	; 0xf4
 100b7b0:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 100b7b4:	fabe fe8e 	clz	lr, lr
 100b7b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 100b7bc:	bfd8      	it	le
 100b7be:	f04f 0e00 	movle.w	lr, #0
 100b7c2:	f1be 0f00 	cmp.w	lr, #0
 100b7c6:	d14b      	bne.n	100b860 <__utf8_mbtowc+0x1d8>
 100b7c8:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 100b7cc:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100b7d0:	d846      	bhi.n	100b860 <__utf8_mbtowc+0x1d8>
 100b7d2:	2e01      	cmp	r6, #1
 100b7d4:	f884 c005 	strb.w	ip, [r4, #5]
 100b7d8:	d047      	beq.n	100b86a <__utf8_mbtowc+0x1e2>
 100b7da:	1c5e      	adds	r6, r3, #1
 100b7dc:	6826      	ldr	r6, [r4, #0]
 100b7de:	bf18      	it	ne
 100b7e0:	3301      	addne	r3, #1
 100b7e2:	2e02      	cmp	r6, #2
 100b7e4:	d045      	beq.n	100b872 <__utf8_mbtowc+0x1ea>
 100b7e6:	79a6      	ldrb	r6, [r4, #6]
 100b7e8:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
 100b7ec:	2b3f      	cmp	r3, #63	; 0x3f
 100b7ee:	d837      	bhi.n	100b860 <__utf8_mbtowc+0x1d8>
 100b7f0:	5d52      	ldrb	r2, [r2, r5]
 100b7f2:	3501      	adds	r5, #1
 100b7f4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100b7f8:	2b3f      	cmp	r3, #63	; 0x3f
 100b7fa:	d831      	bhi.n	100b860 <__utf8_mbtowc+0x1d8>
 100b7fc:	0483      	lsls	r3, r0, #18
 100b7fe:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
 100b802:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 100b806:	f40c 3c7c 	and.w	ip, ip, #258048	; 0x3f000
 100b80a:	01b0      	lsls	r0, r6, #6
 100b80c:	ea43 030c 	orr.w	r3, r3, ip
 100b810:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
 100b814:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100b818:	4303      	orrs	r3, r0
 100b81a:	4628      	mov	r0, r5
 100b81c:	4313      	orrs	r3, r2
 100b81e:	2200      	movs	r2, #0
 100b820:	600b      	str	r3, [r1, #0]
 100b822:	6022      	str	r2, [r4, #0]
 100b824:	e762      	b.n	100b6ec <__utf8_mbtowc+0x64>
 100b826:	2601      	movs	r6, #1
 100b828:	42b3      	cmp	r3, r6
 100b82a:	6026      	str	r6, [r4, #0]
 100b82c:	d912      	bls.n	100b854 <__utf8_mbtowc+0x1cc>
 100b82e:	f812 c005 	ldrb.w	ip, [r2, r5]
 100b832:	2601      	movs	r6, #1
 100b834:	4435      	add	r5, r6
 100b836:	e778      	b.n	100b72a <__utf8_mbtowc+0xa2>
 100b838:	2601      	movs	r6, #1
 100b83a:	42b3      	cmp	r3, r6
 100b83c:	6026      	str	r6, [r4, #0]
 100b83e:	d909      	bls.n	100b854 <__utf8_mbtowc+0x1cc>
 100b840:	f812 c005 	ldrb.w	ip, [r2, r5]
 100b844:	2601      	movs	r6, #1
 100b846:	4435      	add	r5, r6
 100b848:	e7ae      	b.n	100b7a8 <__utf8_mbtowc+0x120>
 100b84a:	2602      	movs	r6, #2
 100b84c:	42b3      	cmp	r3, r6
 100b84e:	6026      	str	r6, [r4, #0]
 100b850:	f47f af7b 	bne.w	100b74a <__utf8_mbtowc+0xc2>
 100b854:	f06f 0001 	mvn.w	r0, #1
 100b858:	e748      	b.n	100b6ec <__utf8_mbtowc+0x64>
 100b85a:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 100b85e:	dcb3      	bgt.n	100b7c8 <__utf8_mbtowc+0x140>
 100b860:	238a      	movs	r3, #138	; 0x8a
 100b862:	f04f 30ff 	mov.w	r0, #4294967295
 100b866:	603b      	str	r3, [r7, #0]
 100b868:	e740      	b.n	100b6ec <__utf8_mbtowc+0x64>
 100b86a:	2602      	movs	r6, #2
 100b86c:	42b3      	cmp	r3, r6
 100b86e:	6026      	str	r6, [r4, #0]
 100b870:	d0f0      	beq.n	100b854 <__utf8_mbtowc+0x1cc>
 100b872:	5d56      	ldrb	r6, [r2, r5]
 100b874:	3501      	adds	r5, #1
 100b876:	f1a6 0e80 	sub.w	lr, r6, #128	; 0x80
 100b87a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100b87e:	d8ef      	bhi.n	100b860 <__utf8_mbtowc+0x1d8>
 100b880:	f04f 0e03 	mov.w	lr, #3
 100b884:	4573      	cmp	r3, lr
 100b886:	71a6      	strb	r6, [r4, #6]
 100b888:	f8c4 e000 	str.w	lr, [r4]
 100b88c:	d1b0      	bne.n	100b7f0 <__utf8_mbtowc+0x168>
 100b88e:	e7e1      	b.n	100b854 <__utf8_mbtowc+0x1cc>

0100b890 <__sjis_mbtowc>:
 100b890:	b4f0      	push	{r4, r5, r6, r7}
 100b892:	b082      	sub	sp, #8
 100b894:	4606      	mov	r6, r0
 100b896:	9f06      	ldr	r7, [sp, #24]
 100b898:	2900      	cmp	r1, #0
 100b89a:	d035      	beq.n	100b908 <__sjis_mbtowc+0x78>
 100b89c:	4610      	mov	r0, r2
 100b89e:	b332      	cbz	r2, 100b8ee <__sjis_mbtowc+0x5e>
 100b8a0:	2b00      	cmp	r3, #0
 100b8a2:	d033      	beq.n	100b90c <__sjis_mbtowc+0x7c>
 100b8a4:	6838      	ldr	r0, [r7, #0]
 100b8a6:	7814      	ldrb	r4, [r2, #0]
 100b8a8:	bb20      	cbnz	r0, 100b8f4 <__sjis_mbtowc+0x64>
 100b8aa:	f1a4 0581 	sub.w	r5, r4, #129	; 0x81
 100b8ae:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
 100b8b2:	280f      	cmp	r0, #15
 100b8b4:	bf88      	it	hi
 100b8b6:	2d1e      	cmphi	r5, #30
 100b8b8:	d81e      	bhi.n	100b8f8 <__sjis_mbtowc+0x68>
 100b8ba:	2001      	movs	r0, #1
 100b8bc:	4283      	cmp	r3, r0
 100b8be:	713c      	strb	r4, [r7, #4]
 100b8c0:	6038      	str	r0, [r7, #0]
 100b8c2:	d923      	bls.n	100b90c <__sjis_mbtowc+0x7c>
 100b8c4:	7854      	ldrb	r4, [r2, #1]
 100b8c6:	2002      	movs	r0, #2
 100b8c8:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 100b8cc:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
 100b8d0:	2a7c      	cmp	r2, #124	; 0x7c
 100b8d2:	bf88      	it	hi
 100b8d4:	2b3e      	cmphi	r3, #62	; 0x3e
 100b8d6:	bf95      	itete	ls
 100b8d8:	793a      	ldrbls	r2, [r7, #4]
 100b8da:	f04f 30ff 	movhi.w	r0, #4294967295
 100b8de:	2300      	movls	r3, #0
 100b8e0:	238a      	movhi	r3, #138	; 0x8a
 100b8e2:	bf8f      	iteee	hi
 100b8e4:	6033      	strhi	r3, [r6, #0]
 100b8e6:	eb04 2402 	addls.w	r4, r4, r2, lsl #8
 100b8ea:	600c      	strls	r4, [r1, #0]
 100b8ec:	603b      	strls	r3, [r7, #0]
 100b8ee:	b002      	add	sp, #8
 100b8f0:	bcf0      	pop	{r4, r5, r6, r7}
 100b8f2:	4770      	bx	lr
 100b8f4:	2801      	cmp	r0, #1
 100b8f6:	d0e7      	beq.n	100b8c8 <__sjis_mbtowc+0x38>
 100b8f8:	600c      	str	r4, [r1, #0]
 100b8fa:	7810      	ldrb	r0, [r2, #0]
 100b8fc:	3000      	adds	r0, #0
 100b8fe:	bf18      	it	ne
 100b900:	2001      	movne	r0, #1
 100b902:	b002      	add	sp, #8
 100b904:	bcf0      	pop	{r4, r5, r6, r7}
 100b906:	4770      	bx	lr
 100b908:	a901      	add	r1, sp, #4
 100b90a:	e7c7      	b.n	100b89c <__sjis_mbtowc+0xc>
 100b90c:	f06f 0001 	mvn.w	r0, #1
 100b910:	e7ed      	b.n	100b8ee <__sjis_mbtowc+0x5e>
 100b912:	bf00      	nop

0100b914 <__eucjp_mbtowc>:
 100b914:	b4f0      	push	{r4, r5, r6, r7}
 100b916:	b082      	sub	sp, #8
 100b918:	4607      	mov	r7, r0
 100b91a:	9e06      	ldr	r6, [sp, #24]
 100b91c:	2900      	cmp	r1, #0
 100b91e:	d040      	beq.n	100b9a2 <__eucjp_mbtowc+0x8e>
 100b920:	4610      	mov	r0, r2
 100b922:	b37a      	cbz	r2, 100b984 <__eucjp_mbtowc+0x70>
 100b924:	2b00      	cmp	r3, #0
 100b926:	d048      	beq.n	100b9ba <__eucjp_mbtowc+0xa6>
 100b928:	6830      	ldr	r0, [r6, #0]
 100b92a:	7814      	ldrb	r4, [r2, #0]
 100b92c:	bb68      	cbnz	r0, 100b98a <__eucjp_mbtowc+0x76>
 100b92e:	f1a4 058e 	sub.w	r5, r4, #142	; 0x8e
 100b932:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
 100b936:	285d      	cmp	r0, #93	; 0x5d
 100b938:	bf88      	it	hi
 100b93a:	2d01      	cmphi	r5, #1
 100b93c:	d829      	bhi.n	100b992 <__eucjp_mbtowc+0x7e>
 100b93e:	2001      	movs	r0, #1
 100b940:	4283      	cmp	r3, r0
 100b942:	7134      	strb	r4, [r6, #4]
 100b944:	6030      	str	r0, [r6, #0]
 100b946:	d938      	bls.n	100b9ba <__eucjp_mbtowc+0xa6>
 100b948:	7854      	ldrb	r4, [r2, #1]
 100b94a:	2002      	movs	r0, #2
 100b94c:	f1a4 05a1 	sub.w	r5, r4, #161	; 0xa1
 100b950:	2d5d      	cmp	r5, #93	; 0x5d
 100b952:	d835      	bhi.n	100b9c0 <__eucjp_mbtowc+0xac>
 100b954:	7935      	ldrb	r5, [r6, #4]
 100b956:	2d8f      	cmp	r5, #143	; 0x8f
 100b958:	d125      	bne.n	100b9a6 <__eucjp_mbtowc+0x92>
 100b95a:	4298      	cmp	r0, r3
 100b95c:	7174      	strb	r4, [r6, #5]
 100b95e:	f04f 0402 	mov.w	r4, #2
 100b962:	6034      	str	r4, [r6, #0]
 100b964:	4604      	mov	r4, r0
 100b966:	d228      	bcs.n	100b9ba <__eucjp_mbtowc+0xa6>
 100b968:	5d14      	ldrb	r4, [r2, r4]
 100b96a:	3001      	adds	r0, #1
 100b96c:	f1a4 03a1 	sub.w	r3, r4, #161	; 0xa1
 100b970:	2b5d      	cmp	r3, #93	; 0x5d
 100b972:	d825      	bhi.n	100b9c0 <__eucjp_mbtowc+0xac>
 100b974:	7972      	ldrb	r2, [r6, #5]
 100b976:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 100b97a:	2300      	movs	r3, #0
 100b97c:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 100b980:	600c      	str	r4, [r1, #0]
 100b982:	6033      	str	r3, [r6, #0]
 100b984:	b002      	add	sp, #8
 100b986:	bcf0      	pop	{r4, r5, r6, r7}
 100b988:	4770      	bx	lr
 100b98a:	2801      	cmp	r0, #1
 100b98c:	d0de      	beq.n	100b94c <__eucjp_mbtowc+0x38>
 100b98e:	2802      	cmp	r0, #2
 100b990:	d011      	beq.n	100b9b6 <__eucjp_mbtowc+0xa2>
 100b992:	600c      	str	r4, [r1, #0]
 100b994:	7810      	ldrb	r0, [r2, #0]
 100b996:	3000      	adds	r0, #0
 100b998:	bf18      	it	ne
 100b99a:	2001      	movne	r0, #1
 100b99c:	b002      	add	sp, #8
 100b99e:	bcf0      	pop	{r4, r5, r6, r7}
 100b9a0:	4770      	bx	lr
 100b9a2:	a901      	add	r1, sp, #4
 100b9a4:	e7bc      	b.n	100b920 <__eucjp_mbtowc+0xc>
 100b9a6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 100b9aa:	2300      	movs	r3, #0
 100b9ac:	600c      	str	r4, [r1, #0]
 100b9ae:	6033      	str	r3, [r6, #0]
 100b9b0:	b002      	add	sp, #8
 100b9b2:	bcf0      	pop	{r4, r5, r6, r7}
 100b9b4:	4770      	bx	lr
 100b9b6:	2001      	movs	r0, #1
 100b9b8:	e7d8      	b.n	100b96c <__eucjp_mbtowc+0x58>
 100b9ba:	f06f 0001 	mvn.w	r0, #1
 100b9be:	e7e1      	b.n	100b984 <__eucjp_mbtowc+0x70>
 100b9c0:	238a      	movs	r3, #138	; 0x8a
 100b9c2:	f04f 30ff 	mov.w	r0, #4294967295
 100b9c6:	603b      	str	r3, [r7, #0]
 100b9c8:	e7dc      	b.n	100b984 <__eucjp_mbtowc+0x70>
 100b9ca:	bf00      	nop

0100b9cc <__jis_mbtowc>:
 100b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100b9d0:	b083      	sub	sp, #12
 100b9d2:	4682      	mov	sl, r0
 100b9d4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 100b9d8:	2900      	cmp	r1, #0
 100b9da:	d042      	beq.n	100ba62 <__jis_mbtowc+0x96>
 100b9dc:	2a00      	cmp	r2, #0
 100b9de:	d043      	beq.n	100ba68 <__jis_mbtowc+0x9c>
 100b9e0:	2b00      	cmp	r3, #0
 100b9e2:	d07d      	beq.n	100bae0 <__jis_mbtowc+0x114>
 100b9e4:	f89e 4000 	ldrb.w	r4, [lr]
 100b9e8:	4610      	mov	r0, r2
 100b9ea:	f645 376c 	movw	r7, #23404	; 0x5b6c
 100b9ee:	3a01      	subs	r2, #1
 100b9f0:	f1c0 0801 	rsb	r8, r0, #1
 100b9f4:	f2c0 1705 	movt	r7, #261	; 0x105
 100b9f8:	7855      	ldrb	r5, [r2, #1]
 100b9fa:	eb02 0c08 	add.w	ip, r2, r8
 100b9fe:	f102 0b01 	add.w	fp, r2, #1
 100ba02:	2d28      	cmp	r5, #40	; 0x28
 100ba04:	d06a      	beq.n	100badc <__jis_mbtowc+0x110>
 100ba06:	d81d      	bhi.n	100ba44 <__jis_mbtowc+0x78>
 100ba08:	2d1b      	cmp	r5, #27
 100ba0a:	bf08      	it	eq
 100ba0c:	2600      	moveq	r6, #0
 100ba0e:	d00a      	beq.n	100ba26 <__jis_mbtowc+0x5a>
 100ba10:	2d24      	cmp	r5, #36	; 0x24
 100ba12:	bf08      	it	eq
 100ba14:	2601      	moveq	r6, #1
 100ba16:	d006      	beq.n	100ba26 <__jis_mbtowc+0x5a>
 100ba18:	b30d      	cbz	r5, 100ba5e <__jis_mbtowc+0x92>
 100ba1a:	f1a5 0621 	sub.w	r6, r5, #33	; 0x21
 100ba1e:	2e5e      	cmp	r6, #94	; 0x5e
 100ba20:	bf34      	ite	cc
 100ba22:	2607      	movcc	r6, #7
 100ba24:	2608      	movcs	r6, #8
 100ba26:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 100ba2a:	443c      	add	r4, r7
 100ba2c:	eb04 0906 	add.w	r9, r4, r6
 100ba30:	5da4      	ldrb	r4, [r4, r6]
 100ba32:	f899 6048 	ldrb.w	r6, [r9, #72]	; 0x48
 100ba36:	2e05      	cmp	r6, #5
 100ba38:	d855      	bhi.n	100bae6 <__jis_mbtowc+0x11a>
 100ba3a:	e8df f006 	tbb	[pc, r6]
 100ba3e:	2d23      	.short	0x2d23
 100ba40:	1b4c4839 	.word	0x1b4c4839
 100ba44:	2d42      	cmp	r5, #66	; 0x42
 100ba46:	bf08      	it	eq
 100ba48:	2604      	moveq	r6, #4
 100ba4a:	d0ec      	beq.n	100ba26 <__jis_mbtowc+0x5a>
 100ba4c:	2d4a      	cmp	r5, #74	; 0x4a
 100ba4e:	bf08      	it	eq
 100ba50:	2605      	moveq	r6, #5
 100ba52:	d0e8      	beq.n	100ba26 <__jis_mbtowc+0x5a>
 100ba54:	2d40      	cmp	r5, #64	; 0x40
 100ba56:	bf08      	it	eq
 100ba58:	2603      	moveq	r6, #3
 100ba5a:	d1de      	bne.n	100ba1a <__jis_mbtowc+0x4e>
 100ba5c:	e7e3      	b.n	100ba26 <__jis_mbtowc+0x5a>
 100ba5e:	2606      	movs	r6, #6
 100ba60:	e7e1      	b.n	100ba26 <__jis_mbtowc+0x5a>
 100ba62:	a901      	add	r1, sp, #4
 100ba64:	2a00      	cmp	r2, #0
 100ba66:	d1bb      	bne.n	100b9e0 <__jis_mbtowc+0x14>
 100ba68:	2001      	movs	r0, #1
 100ba6a:	f8ce 2000 	str.w	r2, [lr]
 100ba6e:	b003      	add	sp, #12
 100ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ba74:	2300      	movs	r3, #0
 100ba76:	f8ce 3000 	str.w	r3, [lr]
 100ba7a:	4618      	mov	r0, r3
 100ba7c:	600b      	str	r3, [r1, #0]
 100ba7e:	b003      	add	sp, #12
 100ba80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ba84:	2300      	movs	r3, #0
 100ba86:	f8ce 3000 	str.w	r3, [lr]
 100ba8a:	7803      	ldrb	r3, [r0, #0]
 100ba8c:	f10c 0001 	add.w	r0, ip, #1
 100ba90:	600b      	str	r3, [r1, #0]
 100ba92:	b003      	add	sp, #12
 100ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ba98:	f88e 5004 	strb.w	r5, [lr, #4]
 100ba9c:	eb0b 0508 	add.w	r5, fp, r8
 100baa0:	429d      	cmp	r5, r3
 100baa2:	465a      	mov	r2, fp
 100baa4:	d3a8      	bcc.n	100b9f8 <__jis_mbtowc+0x2c>
 100baa6:	f8ce 4000 	str.w	r4, [lr]
 100baaa:	f06f 0001 	mvn.w	r0, #1
 100baae:	e7e6      	b.n	100ba7e <__jis_mbtowc+0xb2>
 100bab0:	f89e 2004 	ldrb.w	r2, [lr, #4]
 100bab4:	2301      	movs	r3, #1
 100bab6:	f8ce 3000 	str.w	r3, [lr]
 100baba:	eb0c 0003 	add.w	r0, ip, r3
 100babe:	f89b 3000 	ldrb.w	r3, [fp]
 100bac2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 100bac6:	600b      	str	r3, [r1, #0]
 100bac8:	b003      	add	sp, #12
 100baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100bace:	1c90      	adds	r0, r2, #2
 100bad0:	eb0b 0508 	add.w	r5, fp, r8
 100bad4:	e7e4      	b.n	100baa0 <__jis_mbtowc+0xd4>
 100bad6:	eb0b 0508 	add.w	r5, fp, r8
 100bada:	e7e1      	b.n	100baa0 <__jis_mbtowc+0xd4>
 100badc:	2602      	movs	r6, #2
 100bade:	e7a2      	b.n	100ba26 <__jis_mbtowc+0x5a>
 100bae0:	f06f 0001 	mvn.w	r0, #1
 100bae4:	e7cb      	b.n	100ba7e <__jis_mbtowc+0xb2>
 100bae6:	238a      	movs	r3, #138	; 0x8a
 100bae8:	f04f 30ff 	mov.w	r0, #4294967295
 100baec:	f8ca 3000 	str.w	r3, [sl]
 100baf0:	e7c5      	b.n	100ba7e <__jis_mbtowc+0xb2>
 100baf2:	bf00      	nop
	...

0100bb00 <memcpy>:
 100bb00:	e1a0c000 	mov	ip, r0
 100bb04:	e3520040 	cmp	r2, #64	; 0x40
 100bb08:	aa000028 	bge	100bbb0 <memcpy+0xb0>
 100bb0c:	e202303c 	and	r3, r2, #60	; 0x3c
 100bb10:	e08cc003 	add	ip, ip, r3
 100bb14:	e0811003 	add	r1, r1, r3
 100bb18:	e263303a 	rsb	r3, r3, #58	; 0x3a
 100bb1c:	e08ff083 	add	pc, pc, r3, lsl #1
 100bb20:	e511303c 	ldr	r3, [r1, #-60]	; 0xffffffc4
 100bb24:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
 100bb28:	e5113038 	ldr	r3, [r1, #-56]	; 0xffffffc8
 100bb2c:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
 100bb30:	e5113034 	ldr	r3, [r1, #-52]	; 0xffffffcc
 100bb34:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
 100bb38:	e5113030 	ldr	r3, [r1, #-48]	; 0xffffffd0
 100bb3c:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
 100bb40:	e511302c 	ldr	r3, [r1, #-44]	; 0xffffffd4
 100bb44:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
 100bb48:	e5113028 	ldr	r3, [r1, #-40]	; 0xffffffd8
 100bb4c:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
 100bb50:	e5113024 	ldr	r3, [r1, #-36]	; 0xffffffdc
 100bb54:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
 100bb58:	e5113020 	ldr	r3, [r1, #-32]	; 0xffffffe0
 100bb5c:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
 100bb60:	e511301c 	ldr	r3, [r1, #-28]	; 0xffffffe4
 100bb64:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
 100bb68:	e5113018 	ldr	r3, [r1, #-24]	; 0xffffffe8
 100bb6c:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
 100bb70:	e5113014 	ldr	r3, [r1, #-20]	; 0xffffffec
 100bb74:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
 100bb78:	e5113010 	ldr	r3, [r1, #-16]
 100bb7c:	e50c3010 	str	r3, [ip, #-16]
 100bb80:	e511300c 	ldr	r3, [r1, #-12]
 100bb84:	e50c300c 	str	r3, [ip, #-12]
 100bb88:	e5113008 	ldr	r3, [r1, #-8]
 100bb8c:	e50c3008 	str	r3, [ip, #-8]
 100bb90:	e5113004 	ldr	r3, [r1, #-4]
 100bb94:	e50c3004 	str	r3, [ip, #-4]
 100bb98:	e1b02f82 	lsls	r2, r2, #31
 100bb9c:	20d130b2 	ldrhcs	r3, [r1], #2
 100bba0:	15d11000 	ldrbne	r1, [r1]
 100bba4:	20cc30b2 	strhcs	r3, [ip], #2
 100bba8:	15cc1000 	strbne	r1, [ip]
 100bbac:	e12fff1e 	bx	lr
 100bbb0:	e52da020 	str	sl, [sp, #-32]!	; 0xffffffe0
 100bbb4:	e201a007 	and	sl, r1, #7
 100bbb8:	e20c3007 	and	r3, ip, #7
 100bbbc:	e153000a 	cmp	r3, sl
 100bbc0:	1a0000f1 	bne	100bf8c <memcpy+0x48c>
 100bbc4:	eeb00a40 	vmov.f32	s0, s0
 100bbc8:	e1b0ae8c 	lsls	sl, ip, #29
 100bbcc:	0a000008 	beq	100bbf4 <memcpy+0xf4>
 100bbd0:	e27aa000 	rsbs	sl, sl, #0
 100bbd4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 100bbd8:	44913004 	ldrmi	r3, [r1], #4
 100bbdc:	448c3004 	strmi	r3, [ip], #4
 100bbe0:	e1b0a10a 	lsls	sl, sl, #2
 100bbe4:	20d130b2 	ldrhcs	r3, [r1], #2
 100bbe8:	14d1a001 	ldrbne	sl, [r1], #1
 100bbec:	20cc30b2 	strhcs	r3, [ip], #2
 100bbf0:	14cca001 	strbne	sl, [ip], #1
 100bbf4:	e252a040 	subs	sl, r2, #64	; 0x40
 100bbf8:	ba000017 	blt	100bc5c <memcpy+0x15c>
 100bbfc:	e35a0c02 	cmp	sl, #512	; 0x200
 100bc00:	aa000032 	bge	100bcd0 <memcpy+0x1d0>
 100bc04:	ed910b00 	vldr	d0, [r1]
 100bc08:	e25aa040 	subs	sl, sl, #64	; 0x40
 100bc0c:	ed911b02 	vldr	d1, [r1, #8]
 100bc10:	ed8c0b00 	vstr	d0, [ip]
 100bc14:	ed910b04 	vldr	d0, [r1, #16]
 100bc18:	ed8c1b02 	vstr	d1, [ip, #8]
 100bc1c:	ed911b06 	vldr	d1, [r1, #24]
 100bc20:	ed8c0b04 	vstr	d0, [ip, #16]
 100bc24:	ed910b08 	vldr	d0, [r1, #32]
 100bc28:	ed8c1b06 	vstr	d1, [ip, #24]
 100bc2c:	ed911b0a 	vldr	d1, [r1, #40]	; 0x28
 100bc30:	ed8c0b08 	vstr	d0, [ip, #32]
 100bc34:	ed910b0c 	vldr	d0, [r1, #48]	; 0x30
 100bc38:	ed8c1b0a 	vstr	d1, [ip, #40]	; 0x28
 100bc3c:	ed911b0e 	vldr	d1, [r1, #56]	; 0x38
 100bc40:	ed8c0b0c 	vstr	d0, [ip, #48]	; 0x30
 100bc44:	e2811040 	add	r1, r1, #64	; 0x40
 100bc48:	ed8c1b0e 	vstr	d1, [ip, #56]	; 0x38
 100bc4c:	e28cc040 	add	ip, ip, #64	; 0x40
 100bc50:	aaffffeb 	bge	100bc04 <memcpy+0x104>
 100bc54:	e31a003f 	tst	sl, #63	; 0x3f
 100bc58:	0a00001a 	beq	100bcc8 <memcpy+0x1c8>
 100bc5c:	e20a3038 	and	r3, sl, #56	; 0x38
 100bc60:	e08cc003 	add	ip, ip, r3
 100bc64:	e0811003 	add	r1, r1, r3
 100bc68:	e2633034 	rsb	r3, r3, #52	; 0x34
 100bc6c:	e08ff003 	add	pc, pc, r3
 100bc70:	ed110b0e 	vldr	d0, [r1, #-56]	; 0xffffffc8
 100bc74:	ed0c0b0e 	vstr	d0, [ip, #-56]	; 0xffffffc8
 100bc78:	ed110b0c 	vldr	d0, [r1, #-48]	; 0xffffffd0
 100bc7c:	ed0c0b0c 	vstr	d0, [ip, #-48]	; 0xffffffd0
 100bc80:	ed110b0a 	vldr	d0, [r1, #-40]	; 0xffffffd8
 100bc84:	ed0c0b0a 	vstr	d0, [ip, #-40]	; 0xffffffd8
 100bc88:	ed110b08 	vldr	d0, [r1, #-32]	; 0xffffffe0
 100bc8c:	ed0c0b08 	vstr	d0, [ip, #-32]	; 0xffffffe0
 100bc90:	ed110b06 	vldr	d0, [r1, #-24]	; 0xffffffe8
 100bc94:	ed0c0b06 	vstr	d0, [ip, #-24]	; 0xffffffe8
 100bc98:	ed110b04 	vldr	d0, [r1, #-16]
 100bc9c:	ed0c0b04 	vstr	d0, [ip, #-16]
 100bca0:	ed110b02 	vldr	d0, [r1, #-8]
 100bca4:	ed0c0b02 	vstr	d0, [ip, #-8]
 100bca8:	e31a0004 	tst	sl, #4
 100bcac:	14913004 	ldrne	r3, [r1], #4
 100bcb0:	148c3004 	strne	r3, [ip], #4
 100bcb4:	e1b0af8a 	lsls	sl, sl, #31
 100bcb8:	20d130b2 	ldrhcs	r3, [r1], #2
 100bcbc:	15d1a000 	ldrbne	sl, [r1]
 100bcc0:	20cc30b2 	strhcs	r3, [ip], #2
 100bcc4:	15cca000 	strbne	sl, [ip]
 100bcc8:	e49da020 	ldr	sl, [sp], #32
 100bccc:	e12fff1e 	bx	lr
 100bcd0:	ed913b00 	vldr	d3, [r1]
 100bcd4:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100bcd8:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100bcdc:	ed916b30 	vldr	d6, [r1, #192]	; 0xc0
 100bce0:	ed917b40 	vldr	d7, [r1, #256]	; 0x100
 100bce4:	ed910b02 	vldr	d0, [r1, #8]
 100bce8:	ed911b04 	vldr	d1, [r1, #16]
 100bcec:	ed912b06 	vldr	d2, [r1, #24]
 100bcf0:	e2811020 	add	r1, r1, #32
 100bcf4:	e25aad0a 	subs	sl, sl, #640	; 0x280
 100bcf8:	ba000055 	blt	100be54 <memcpy+0x354>
 100bcfc:	ed8c3b00 	vstr	d3, [ip]
 100bd00:	ed913b00 	vldr	d3, [r1]
 100bd04:	ed8c0b02 	vstr	d0, [ip, #8]
 100bd08:	ed910b02 	vldr	d0, [r1, #8]
 100bd0c:	ed8c1b04 	vstr	d1, [ip, #16]
 100bd10:	ed911b04 	vldr	d1, [r1, #16]
 100bd14:	ed8c2b06 	vstr	d2, [ip, #24]
 100bd18:	ed912b06 	vldr	d2, [r1, #24]
 100bd1c:	ed8c3b08 	vstr	d3, [ip, #32]
 100bd20:	ed913b48 	vldr	d3, [r1, #288]	; 0x120
 100bd24:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100bd28:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100bd2c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100bd30:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100bd34:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100bd38:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100bd3c:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 100bd40:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100bd44:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100bd48:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100bd4c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100bd50:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100bd54:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100bd58:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100bd5c:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 100bd60:	ed914b58 	vldr	d4, [r1, #352]	; 0x160
 100bd64:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100bd68:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100bd6c:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100bd70:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100bd74:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100bd78:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100bd7c:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 100bd80:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100bd84:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 100bd88:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 100bd8c:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 100bd90:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 100bd94:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 100bd98:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 100bd9c:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 100bda0:	ed915b68 	vldr	d5, [r1, #416]	; 0x1a0
 100bda4:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 100bda8:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 100bdac:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 100bdb0:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 100bdb4:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 100bdb8:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 100bdbc:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 100bdc0:	e28110c0 	add	r1, r1, #192	; 0xc0
 100bdc4:	ed8c6b00 	vstr	d6, [ip]
 100bdc8:	ed916b00 	vldr	d6, [r1]
 100bdcc:	ed8c0b02 	vstr	d0, [ip, #8]
 100bdd0:	ed910b02 	vldr	d0, [r1, #8]
 100bdd4:	ed8c1b04 	vstr	d1, [ip, #16]
 100bdd8:	ed911b04 	vldr	d1, [r1, #16]
 100bddc:	ed8c2b06 	vstr	d2, [ip, #24]
 100bde0:	ed912b06 	vldr	d2, [r1, #24]
 100bde4:	ed8c6b08 	vstr	d6, [ip, #32]
 100bde8:	ed916b48 	vldr	d6, [r1, #288]	; 0x120
 100bdec:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100bdf0:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100bdf4:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100bdf8:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100bdfc:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100be00:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100be04:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 100be08:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 100be0c:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100be10:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100be14:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100be18:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100be1c:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100be20:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100be24:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 100be28:	ed917b58 	vldr	d7, [r1, #352]	; 0x160
 100be2c:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100be30:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100be34:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100be38:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100be3c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100be40:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100be44:	e28cc080 	add	ip, ip, #128	; 0x80
 100be48:	e2811080 	add	r1, r1, #128	; 0x80
 100be4c:	e25aad05 	subs	sl, sl, #320	; 0x140
 100be50:	aaffffa9 	bge	100bcfc <memcpy+0x1fc>
 100be54:	ed8c3b00 	vstr	d3, [ip]
 100be58:	ed913b00 	vldr	d3, [r1]
 100be5c:	ed8c0b02 	vstr	d0, [ip, #8]
 100be60:	ed910b02 	vldr	d0, [r1, #8]
 100be64:	ed8c1b04 	vstr	d1, [ip, #16]
 100be68:	ed911b04 	vldr	d1, [r1, #16]
 100be6c:	ed8c2b06 	vstr	d2, [ip, #24]
 100be70:	ed912b06 	vldr	d2, [r1, #24]
 100be74:	ed8c3b08 	vstr	d3, [ip, #32]
 100be78:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100be7c:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100be80:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100be84:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100be88:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100be8c:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100be90:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 100be94:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100be98:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100be9c:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100bea0:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100bea4:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100bea8:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100beac:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100beb0:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 100beb4:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100beb8:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100bebc:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100bec0:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100bec4:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100bec8:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100becc:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 100bed0:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100bed4:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 100bed8:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 100bedc:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 100bee0:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 100bee4:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 100bee8:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 100beec:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 100bef0:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 100bef4:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 100bef8:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 100befc:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 100bf00:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 100bf04:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 100bf08:	e28110c0 	add	r1, r1, #192	; 0xc0
 100bf0c:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 100bf10:	ed8c6b00 	vstr	d6, [ip]
 100bf14:	ed916b00 	vldr	d6, [r1]
 100bf18:	ed8c0b02 	vstr	d0, [ip, #8]
 100bf1c:	ed910b02 	vldr	d0, [r1, #8]
 100bf20:	ed8c1b04 	vstr	d1, [ip, #16]
 100bf24:	ed911b04 	vldr	d1, [r1, #16]
 100bf28:	ed8c2b06 	vstr	d2, [ip, #24]
 100bf2c:	ed912b06 	vldr	d2, [r1, #24]
 100bf30:	ed8c6b08 	vstr	d6, [ip, #32]
 100bf34:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100bf38:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100bf3c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100bf40:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100bf44:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100bf48:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100bf4c:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 100bf50:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 100bf54:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100bf58:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100bf5c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100bf60:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100bf64:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100bf68:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100bf6c:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 100bf70:	e2811060 	add	r1, r1, #96	; 0x60
 100bf74:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100bf78:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100bf7c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100bf80:	e28cc080 	add	ip, ip, #128	; 0x80
 100bf84:	e28aad05 	add	sl, sl, #320	; 0x140
 100bf88:	eaffff1d 	b	100bc04 <memcpy+0x104>
 100bf8c:	f5d1f000 	pld	[r1]
 100bf90:	f5d1f040 	pld	[r1, #64]	; 0x40
 100bf94:	e1b0ae8c 	lsls	sl, ip, #29
 100bf98:	f5d1f080 	pld	[r1, #128]	; 0x80
 100bf9c:	0a000008 	beq	100bfc4 <memcpy+0x4c4>
 100bfa0:	e27aa000 	rsbs	sl, sl, #0
 100bfa4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 100bfa8:	44913004 	ldrmi	r3, [r1], #4
 100bfac:	448c3004 	strmi	r3, [ip], #4
 100bfb0:	e1b0a10a 	lsls	sl, sl, #2
 100bfb4:	14d13001 	ldrbne	r3, [r1], #1
 100bfb8:	20d1a0b2 	ldrhcs	sl, [r1], #2
 100bfbc:	14cc3001 	strbne	r3, [ip], #1
 100bfc0:	20cca0b2 	strhcs	sl, [ip], #2
 100bfc4:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
 100bfc8:	e2522040 	subs	r2, r2, #64	; 0x40
 100bfcc:	449da020 	ldrmi	sl, [sp], #32
 100bfd0:	4afffecd 	bmi	100bb0c <memcpy+0xc>
 100bfd4:	f5d1f100 	pld	[r1, #256]	; 0x100
 100bfd8:	e2411004 	sub	r1, r1, #4
 100bfdc:	e24cc008 	sub	ip, ip, #8
 100bfe0:	e252a040 	subs	sl, r2, #64	; 0x40
 100bfe4:	e5912004 	ldr	r2, [r1, #4]
 100bfe8:	e5913008 	ldr	r3, [r1, #8]
 100bfec:	e1cd40f8 	strd	r4, [sp, #8]
 100bff0:	e591400c 	ldr	r4, [r1, #12]
 100bff4:	e5915010 	ldr	r5, [r1, #16]
 100bff8:	e1cd61f0 	strd	r6, [sp, #16]
 100bffc:	e5916014 	ldr	r6, [r1, #20]
 100c000:	e5917018 	ldr	r7, [r1, #24]
 100c004:	e1cd81f8 	strd	r8, [sp, #24]
 100c008:	e591801c 	ldr	r8, [r1, #28]
 100c00c:	e5b19020 	ldr	r9, [r1, #32]!
 100c010:	ea000018 	b	100c078 <memcpy+0x578>
 100c014:	e1a00000 	nop			; (mov r0, r0)
 100c018:	e1a00000 	nop			; (mov r0, r0)
 100c01c:	e1a00000 	nop			; (mov r0, r0)
 100c020:	e1a00000 	nop			; (mov r0, r0)
 100c024:	e1a00000 	nop			; (mov r0, r0)
 100c028:	e1a00000 	nop			; (mov r0, r0)
 100c02c:	e1a00000 	nop			; (mov r0, r0)
 100c030:	e1a00000 	nop			; (mov r0, r0)
 100c034:	e1a00000 	nop			; (mov r0, r0)
 100c038:	e1a00000 	nop			; (mov r0, r0)
 100c03c:	e1a00000 	nop			; (mov r0, r0)
 100c040:	f5d1f124 	pld	[r1, #292]	; 0x124
 100c044:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 100c048:	e5912024 	ldr	r2, [r1, #36]	; 0x24
 100c04c:	e5913028 	ldr	r3, [r1, #40]	; 0x28
 100c050:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 100c054:	e591402c 	ldr	r4, [r1, #44]	; 0x2c
 100c058:	e5915030 	ldr	r5, [r1, #48]	; 0x30
 100c05c:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 100c060:	e5916034 	ldr	r6, [r1, #52]	; 0x34
 100c064:	e5917038 	ldr	r7, [r1, #56]	; 0x38
 100c068:	e1ec84f0 	strd	r8, [ip, #64]!	; 0x40
 100c06c:	e591803c 	ldr	r8, [r1, #60]	; 0x3c
 100c070:	e5b19040 	ldr	r9, [r1, #64]!	; 0x40
 100c074:	e25aa040 	subs	sl, sl, #64	; 0x40
 100c078:	e1cc20f8 	strd	r2, [ip, #8]
 100c07c:	e5912004 	ldr	r2, [r1, #4]
 100c080:	e5913008 	ldr	r3, [r1, #8]
 100c084:	e1cc41f0 	strd	r4, [ip, #16]
 100c088:	e591400c 	ldr	r4, [r1, #12]
 100c08c:	e5915010 	ldr	r5, [r1, #16]
 100c090:	e1cc61f8 	strd	r6, [ip, #24]
 100c094:	e5916014 	ldr	r6, [r1, #20]
 100c098:	e5917018 	ldr	r7, [r1, #24]
 100c09c:	e1cc82f0 	strd	r8, [ip, #32]
 100c0a0:	e591801c 	ldr	r8, [r1, #28]
 100c0a4:	e5919020 	ldr	r9, [r1, #32]
 100c0a8:	2affffe4 	bcs	100c040 <memcpy+0x540>
 100c0ac:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 100c0b0:	e2811024 	add	r1, r1, #36	; 0x24
 100c0b4:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 100c0b8:	e1cd40d8 	ldrd	r4, [sp, #8]
 100c0bc:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 100c0c0:	e1cd61d0 	ldrd	r6, [sp, #16]
 100c0c4:	e1cc84f0 	strd	r8, [ip, #64]	; 0x40
 100c0c8:	e1cd81d8 	ldrd	r8, [sp, #24]
 100c0cc:	e28cc048 	add	ip, ip, #72	; 0x48
 100c0d0:	e21a203f 	ands	r2, sl, #63	; 0x3f
 100c0d4:	e49da020 	ldr	sl, [sp], #32
 100c0d8:	1afffe8b 	bne	100bb0c <memcpy+0xc>
 100c0dc:	e12fff1e 	bx	lr

0100c0e0 <memset>:
 100c0e0:	b4f0      	push	{r4, r5, r6, r7}
 100c0e2:	0786      	lsls	r6, r0, #30
 100c0e4:	d046      	beq.n	100c174 <memset+0x94>
 100c0e6:	1e54      	subs	r4, r2, #1
 100c0e8:	2a00      	cmp	r2, #0
 100c0ea:	d03c      	beq.n	100c166 <memset+0x86>
 100c0ec:	b2ca      	uxtb	r2, r1
 100c0ee:	4603      	mov	r3, r0
 100c0f0:	e002      	b.n	100c0f8 <memset+0x18>
 100c0f2:	f114 34ff 	adds.w	r4, r4, #4294967295
 100c0f6:	d336      	bcc.n	100c166 <memset+0x86>
 100c0f8:	f803 2b01 	strb.w	r2, [r3], #1
 100c0fc:	079d      	lsls	r5, r3, #30
 100c0fe:	d1f8      	bne.n	100c0f2 <memset+0x12>
 100c100:	2c03      	cmp	r4, #3
 100c102:	d929      	bls.n	100c158 <memset+0x78>
 100c104:	b2cd      	uxtb	r5, r1
 100c106:	2c0f      	cmp	r4, #15
 100c108:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 100c10c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 100c110:	d933      	bls.n	100c17a <memset+0x9a>
 100c112:	f1a4 0610 	sub.w	r6, r4, #16
 100c116:	f103 0720 	add.w	r7, r3, #32
 100c11a:	f103 0210 	add.w	r2, r3, #16
 100c11e:	0936      	lsrs	r6, r6, #4
 100c120:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 100c124:	e942 5504 	strd	r5, r5, [r2, #-16]
 100c128:	e942 5502 	strd	r5, r5, [r2, #-8]
 100c12c:	3210      	adds	r2, #16
 100c12e:	42ba      	cmp	r2, r7
 100c130:	d1f8      	bne.n	100c124 <memset+0x44>
 100c132:	1c72      	adds	r2, r6, #1
 100c134:	f014 0f0c 	tst.w	r4, #12
 100c138:	f004 060f 	and.w	r6, r4, #15
 100c13c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 100c140:	d013      	beq.n	100c16a <memset+0x8a>
 100c142:	1f33      	subs	r3, r6, #4
 100c144:	f023 0303 	bic.w	r3, r3, #3
 100c148:	3304      	adds	r3, #4
 100c14a:	4413      	add	r3, r2
 100c14c:	f842 5b04 	str.w	r5, [r2], #4
 100c150:	4293      	cmp	r3, r2
 100c152:	d1fb      	bne.n	100c14c <memset+0x6c>
 100c154:	f006 0403 	and.w	r4, r6, #3
 100c158:	b12c      	cbz	r4, 100c166 <memset+0x86>
 100c15a:	b2c9      	uxtb	r1, r1
 100c15c:	441c      	add	r4, r3
 100c15e:	f803 1b01 	strb.w	r1, [r3], #1
 100c162:	429c      	cmp	r4, r3
 100c164:	d1fb      	bne.n	100c15e <memset+0x7e>
 100c166:	bcf0      	pop	{r4, r5, r6, r7}
 100c168:	4770      	bx	lr
 100c16a:	4634      	mov	r4, r6
 100c16c:	4613      	mov	r3, r2
 100c16e:	2c00      	cmp	r4, #0
 100c170:	d1f3      	bne.n	100c15a <memset+0x7a>
 100c172:	e7f8      	b.n	100c166 <memset+0x86>
 100c174:	4614      	mov	r4, r2
 100c176:	4603      	mov	r3, r0
 100c178:	e7c2      	b.n	100c100 <memset+0x20>
 100c17a:	461a      	mov	r2, r3
 100c17c:	4626      	mov	r6, r4
 100c17e:	e7e0      	b.n	100c142 <memset+0x62>

0100c180 <__malloc_lock>:
 100c180:	4770      	bx	lr
 100c182:	bf00      	nop

0100c184 <__malloc_unlock>:
 100c184:	4770      	bx	lr
 100c186:	bf00      	nop

0100c188 <_printf_r>:
 100c188:	b40e      	push	{r1, r2, r3}
 100c18a:	b510      	push	{r4, lr}
 100c18c:	b083      	sub	sp, #12
 100c18e:	ac05      	add	r4, sp, #20
 100c190:	6881      	ldr	r1, [r0, #8]
 100c192:	f854 2b04 	ldr.w	r2, [r4], #4
 100c196:	4623      	mov	r3, r4
 100c198:	9401      	str	r4, [sp, #4]
 100c19a:	f002 fb55 	bl	100e848 <_vfprintf_r>
 100c19e:	b003      	add	sp, #12
 100c1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100c1a4:	b003      	add	sp, #12
 100c1a6:	4770      	bx	lr

0100c1a8 <printf>:
 100c1a8:	b40f      	push	{r0, r1, r2, r3}
 100c1aa:	f248 7358 	movw	r3, #34648	; 0x8758
 100c1ae:	b510      	push	{r4, lr}
 100c1b0:	b082      	sub	sp, #8
 100c1b2:	ac04      	add	r4, sp, #16
 100c1b4:	f2c0 1305 	movt	r3, #261	; 0x105
 100c1b8:	f854 2b04 	ldr.w	r2, [r4], #4
 100c1bc:	6818      	ldr	r0, [r3, #0]
 100c1be:	4623      	mov	r3, r4
 100c1c0:	9401      	str	r4, [sp, #4]
 100c1c2:	6881      	ldr	r1, [r0, #8]
 100c1c4:	f002 fb40 	bl	100e848 <_vfprintf_r>
 100c1c8:	b002      	add	sp, #8
 100c1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100c1ce:	b004      	add	sp, #16
 100c1d0:	4770      	bx	lr
 100c1d2:	bf00      	nop

0100c1d4 <_puts_r>:
 100c1d4:	b530      	push	{r4, r5, lr}
 100c1d6:	4605      	mov	r5, r0
 100c1d8:	b089      	sub	sp, #36	; 0x24
 100c1da:	4608      	mov	r0, r1
 100c1dc:	460c      	mov	r4, r1
 100c1de:	f000 fb8f 	bl	100c900 <strlen>
 100c1e2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 100c1e4:	f647 1378 	movw	r3, #31096	; 0x7978
 100c1e8:	9404      	str	r4, [sp, #16]
 100c1ea:	f2c0 1305 	movt	r3, #261	; 0x105
 100c1ee:	68ac      	ldr	r4, [r5, #8]
 100c1f0:	9306      	str	r3, [sp, #24]
 100c1f2:	2302      	movs	r3, #2
 100c1f4:	1c41      	adds	r1, r0, #1
 100c1f6:	9005      	str	r0, [sp, #20]
 100c1f8:	9103      	str	r1, [sp, #12]
 100c1fa:	2001      	movs	r0, #1
 100c1fc:	a904      	add	r1, sp, #16
 100c1fe:	9007      	str	r0, [sp, #28]
 100c200:	e9cd 1301 	strd	r1, r3, [sp, #4]
 100c204:	b1b2      	cbz	r2, 100c234 <_puts_r+0x60>
 100c206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 100c20a:	049a      	lsls	r2, r3, #18
 100c20c:	d406      	bmi.n	100c21c <_puts_r+0x48>
 100c20e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 100c210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 100c214:	81a3      	strh	r3, [r4, #12]
 100c216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 100c21a:	6662      	str	r2, [r4, #100]	; 0x64
 100c21c:	4621      	mov	r1, r4
 100c21e:	4628      	mov	r0, r5
 100c220:	aa01      	add	r2, sp, #4
 100c222:	f005 fe25 	bl	1011e70 <__sfvwrite_r>
 100c226:	2800      	cmp	r0, #0
 100c228:	bf14      	ite	ne
 100c22a:	f04f 30ff 	movne.w	r0, #4294967295
 100c22e:	200a      	moveq	r0, #10
 100c230:	b009      	add	sp, #36	; 0x24
 100c232:	bd30      	pop	{r4, r5, pc}
 100c234:	4628      	mov	r0, r5
 100c236:	f005 fca9 	bl	1011b8c <__sinit>
 100c23a:	e7e4      	b.n	100c206 <_puts_r+0x32>

0100c23c <puts>:
 100c23c:	f248 7358 	movw	r3, #34648	; 0x8758
 100c240:	f2c0 1305 	movt	r3, #261	; 0x105
 100c244:	4601      	mov	r1, r0
 100c246:	6818      	ldr	r0, [r3, #0]
 100c248:	f7ff bfc4 	b.w	100c1d4 <_puts_r>

0100c24c <_sbrk_r>:
 100c24c:	b538      	push	{r3, r4, r5, lr}
 100c24e:	f24a 4490 	movw	r4, #42128	; 0xa490
 100c252:	f2c0 140a 	movt	r4, #266	; 0x10a
 100c256:	4605      	mov	r5, r0
 100c258:	4608      	mov	r0, r1
 100c25a:	2300      	movs	r3, #0
 100c25c:	6023      	str	r3, [r4, #0]
 100c25e:	f009 ead2 	blx	1015804 <_sbrk>
 100c262:	1c43      	adds	r3, r0, #1
 100c264:	d000      	beq.n	100c268 <_sbrk_r+0x1c>
 100c266:	bd38      	pop	{r3, r4, r5, pc}
 100c268:	6823      	ldr	r3, [r4, #0]
 100c26a:	2b00      	cmp	r3, #0
 100c26c:	d0fb      	beq.n	100c266 <_sbrk_r+0x1a>
 100c26e:	602b      	str	r3, [r5, #0]
 100c270:	bd38      	pop	{r3, r4, r5, pc}
 100c272:	bf00      	nop

0100c274 <_snprintf_r>:
 100c274:	b408      	push	{r3}
 100c276:	b570      	push	{r4, r5, r6, lr}
 100c278:	1e14      	subs	r4, r2, #0
 100c27a:	4605      	mov	r5, r0
 100c27c:	b09d      	sub	sp, #116	; 0x74
 100c27e:	bfbe      	ittt	lt
 100c280:	228b      	movlt	r2, #139	; 0x8b
 100c282:	f04f 30ff 	movlt.w	r0, #4294967295
 100c286:	602a      	strlt	r2, [r5, #0]
 100c288:	db17      	blt.n	100c2ba <_snprintf_r+0x46>
 100c28a:	f44f 7302 	mov.w	r3, #520	; 0x208
 100c28e:	9102      	str	r1, [sp, #8]
 100c290:	9106      	str	r1, [sp, #24]
 100c292:	f8ad 3014 	strh.w	r3, [sp, #20]
 100c296:	d115      	bne.n	100c2c4 <_snprintf_r+0x50>
 100c298:	ae22      	add	r6, sp, #136	; 0x88
 100c29a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100c29c:	a902      	add	r1, sp, #8
 100c29e:	9404      	str	r4, [sp, #16]
 100c2a0:	4633      	mov	r3, r6
 100c2a2:	9407      	str	r4, [sp, #28]
 100c2a4:	9601      	str	r6, [sp, #4]
 100c2a6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100c2aa:	f8ad 4016 	strh.w	r4, [sp, #22]
 100c2ae:	f000 fd23 	bl	100ccf8 <_svfprintf_r>
 100c2b2:	1c43      	adds	r3, r0, #1
 100c2b4:	da01      	bge.n	100c2ba <_snprintf_r+0x46>
 100c2b6:	238b      	movs	r3, #139	; 0x8b
 100c2b8:	602b      	str	r3, [r5, #0]
 100c2ba:	b01d      	add	sp, #116	; 0x74
 100c2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100c2c0:	b001      	add	sp, #4
 100c2c2:	4770      	bx	lr
 100c2c4:	ab22      	add	r3, sp, #136	; 0x88
 100c2c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100c2c8:	a902      	add	r1, sp, #8
 100c2ca:	9301      	str	r3, [sp, #4]
 100c2cc:	3c01      	subs	r4, #1
 100c2ce:	9404      	str	r4, [sp, #16]
 100c2d0:	9407      	str	r4, [sp, #28]
 100c2d2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100c2d6:	f8ad 4016 	strh.w	r4, [sp, #22]
 100c2da:	f000 fd0d 	bl	100ccf8 <_svfprintf_r>
 100c2de:	1c42      	adds	r2, r0, #1
 100c2e0:	f04f 0200 	mov.w	r2, #0
 100c2e4:	bfbc      	itt	lt
 100c2e6:	238b      	movlt	r3, #139	; 0x8b
 100c2e8:	602b      	strlt	r3, [r5, #0]
 100c2ea:	9b02      	ldr	r3, [sp, #8]
 100c2ec:	701a      	strb	r2, [r3, #0]
 100c2ee:	b01d      	add	sp, #116	; 0x74
 100c2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100c2f4:	b001      	add	sp, #4
 100c2f6:	4770      	bx	lr

0100c2f8 <snprintf>:
 100c2f8:	b40c      	push	{r2, r3}
 100c2fa:	f248 7358 	movw	r3, #34648	; 0x8758
 100c2fe:	f2c0 1305 	movt	r3, #261	; 0x105
 100c302:	b570      	push	{r4, r5, r6, lr}
 100c304:	1e0c      	subs	r4, r1, #0
 100c306:	681d      	ldr	r5, [r3, #0]
 100c308:	b09c      	sub	sp, #112	; 0x70
 100c30a:	bfbe      	ittt	lt
 100c30c:	238b      	movlt	r3, #139	; 0x8b
 100c30e:	f04f 30ff 	movlt.w	r0, #4294967295
 100c312:	602b      	strlt	r3, [r5, #0]
 100c314:	db18      	blt.n	100c348 <snprintf+0x50>
 100c316:	f44f 7302 	mov.w	r3, #520	; 0x208
 100c31a:	9002      	str	r0, [sp, #8]
 100c31c:	9006      	str	r0, [sp, #24]
 100c31e:	f8ad 3014 	strh.w	r3, [sp, #20]
 100c322:	d116      	bne.n	100c352 <snprintf+0x5a>
 100c324:	ae21      	add	r6, sp, #132	; 0x84
 100c326:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100c328:	a902      	add	r1, sp, #8
 100c32a:	4628      	mov	r0, r5
 100c32c:	4633      	mov	r3, r6
 100c32e:	9404      	str	r4, [sp, #16]
 100c330:	9407      	str	r4, [sp, #28]
 100c332:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100c336:	9601      	str	r6, [sp, #4]
 100c338:	f8ad 4016 	strh.w	r4, [sp, #22]
 100c33c:	f000 fcdc 	bl	100ccf8 <_svfprintf_r>
 100c340:	1c43      	adds	r3, r0, #1
 100c342:	da01      	bge.n	100c348 <snprintf+0x50>
 100c344:	238b      	movs	r3, #139	; 0x8b
 100c346:	602b      	str	r3, [r5, #0]
 100c348:	b01c      	add	sp, #112	; 0x70
 100c34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100c34e:	b002      	add	sp, #8
 100c350:	4770      	bx	lr
 100c352:	ab21      	add	r3, sp, #132	; 0x84
 100c354:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100c356:	a902      	add	r1, sp, #8
 100c358:	4628      	mov	r0, r5
 100c35a:	9301      	str	r3, [sp, #4]
 100c35c:	3c01      	subs	r4, #1
 100c35e:	9404      	str	r4, [sp, #16]
 100c360:	9407      	str	r4, [sp, #28]
 100c362:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100c366:	f8ad 4016 	strh.w	r4, [sp, #22]
 100c36a:	f000 fcc5 	bl	100ccf8 <_svfprintf_r>
 100c36e:	1c42      	adds	r2, r0, #1
 100c370:	f04f 0200 	mov.w	r2, #0
 100c374:	bfbc      	itt	lt
 100c376:	238b      	movlt	r3, #139	; 0x8b
 100c378:	602b      	strlt	r3, [r5, #0]
 100c37a:	9b02      	ldr	r3, [sp, #8]
 100c37c:	701a      	strb	r2, [r3, #0]
 100c37e:	b01c      	add	sp, #112	; 0x70
 100c380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100c384:	b002      	add	sp, #8
 100c386:	4770      	bx	lr

0100c388 <strcasecmp>:
 100c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100c38a:	4607      	mov	r7, r0
 100c38c:	460e      	mov	r6, r1
 100c38e:	f817 4b01 	ldrb.w	r4, [r7], #1
 100c392:	f7fe fdf3 	bl	100af7c <__locale_ctype_ptr>
 100c396:	f816 5b01 	ldrb.w	r5, [r6], #1
 100c39a:	4420      	add	r0, r4
 100c39c:	7843      	ldrb	r3, [r0, #1]
 100c39e:	f003 0303 	and.w	r3, r3, #3
 100c3a2:	2b01      	cmp	r3, #1
 100c3a4:	bf08      	it	eq
 100c3a6:	3420      	addeq	r4, #32
 100c3a8:	f7fe fde8 	bl	100af7c <__locale_ctype_ptr>
 100c3ac:	4428      	add	r0, r5
 100c3ae:	7843      	ldrb	r3, [r0, #1]
 100c3b0:	f003 0303 	and.w	r3, r3, #3
 100c3b4:	2b01      	cmp	r3, #1
 100c3b6:	d004      	beq.n	100c3c2 <strcasecmp+0x3a>
 100c3b8:	1b60      	subs	r0, r4, r5
 100c3ba:	d101      	bne.n	100c3c0 <strcasecmp+0x38>
 100c3bc:	2d00      	cmp	r5, #0
 100c3be:	d1e6      	bne.n	100c38e <strcasecmp+0x6>
 100c3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100c3c2:	f105 0020 	add.w	r0, r5, #32
 100c3c6:	1a20      	subs	r0, r4, r0
 100c3c8:	d0e1      	beq.n	100c38e <strcasecmp+0x6>
 100c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0100c3cc <strcat>:
 100c3cc:	0783      	lsls	r3, r0, #30
 100c3ce:	b510      	push	{r4, lr}
 100c3d0:	4604      	mov	r4, r0
 100c3d2:	d111      	bne.n	100c3f8 <strcat+0x2c>
 100c3d4:	6822      	ldr	r2, [r4, #0]
 100c3d6:	4620      	mov	r0, r4
 100c3d8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100c3dc:	ea23 0302 	bic.w	r3, r3, r2
 100c3e0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100c3e4:	d108      	bne.n	100c3f8 <strcat+0x2c>
 100c3e6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 100c3ea:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100c3ee:	ea23 0302 	bic.w	r3, r3, r2
 100c3f2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100c3f6:	d0f6      	beq.n	100c3e6 <strcat+0x1a>
 100c3f8:	7803      	ldrb	r3, [r0, #0]
 100c3fa:	b11b      	cbz	r3, 100c404 <strcat+0x38>
 100c3fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100c400:	2b00      	cmp	r3, #0
 100c402:	d1fb      	bne.n	100c3fc <strcat+0x30>
 100c404:	f000 f9ea 	bl	100c7dc <strcpy>
 100c408:	4620      	mov	r0, r4
 100c40a:	bd10      	pop	{r4, pc}

0100c40c <strchr>:
 100c40c:	b2c9      	uxtb	r1, r1
 100c40e:	f000 0303 	and.w	r3, r0, #3
 100c412:	2900      	cmp	r1, #0
 100c414:	d042      	beq.n	100c49c <strchr+0x90>
 100c416:	b17b      	cbz	r3, 100c438 <strchr+0x2c>
 100c418:	7803      	ldrb	r3, [r0, #0]
 100c41a:	2b00      	cmp	r3, #0
 100c41c:	d066      	beq.n	100c4ec <strchr+0xe0>
 100c41e:	4299      	cmp	r1, r3
 100c420:	d061      	beq.n	100c4e6 <strchr+0xda>
 100c422:	1c43      	adds	r3, r0, #1
 100c424:	e005      	b.n	100c432 <strchr+0x26>
 100c426:	f813 2b01 	ldrb.w	r2, [r3], #1
 100c42a:	2a00      	cmp	r2, #0
 100c42c:	d05c      	beq.n	100c4e8 <strchr+0xdc>
 100c42e:	428a      	cmp	r2, r1
 100c430:	d059      	beq.n	100c4e6 <strchr+0xda>
 100c432:	079a      	lsls	r2, r3, #30
 100c434:	4618      	mov	r0, r3
 100c436:	d1f6      	bne.n	100c426 <strchr+0x1a>
 100c438:	b470      	push	{r4, r5, r6}
 100c43a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 100c43e:	6804      	ldr	r4, [r0, #0]
 100c440:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 100c444:	ea86 0504 	eor.w	r5, r6, r4
 100c448:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 100c44c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 100c450:	ea23 0304 	bic.w	r3, r3, r4
 100c454:	ea22 0205 	bic.w	r2, r2, r5
 100c458:	4313      	orrs	r3, r2
 100c45a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100c45e:	d10f      	bne.n	100c480 <strchr+0x74>
 100c460:	f850 4f04 	ldr.w	r4, [r0, #4]!
 100c464:	ea84 0506 	eor.w	r5, r4, r6
 100c468:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 100c46c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 100c470:	ea23 0304 	bic.w	r3, r3, r4
 100c474:	ea22 0205 	bic.w	r2, r2, r5
 100c478:	4313      	orrs	r3, r2
 100c47a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100c47e:	d0ef      	beq.n	100c460 <strchr+0x54>
 100c480:	7803      	ldrb	r3, [r0, #0]
 100c482:	b143      	cbz	r3, 100c496 <strchr+0x8a>
 100c484:	4299      	cmp	r1, r3
 100c486:	d102      	bne.n	100c48e <strchr+0x82>
 100c488:	e006      	b.n	100c498 <strchr+0x8c>
 100c48a:	428b      	cmp	r3, r1
 100c48c:	d004      	beq.n	100c498 <strchr+0x8c>
 100c48e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100c492:	2b00      	cmp	r3, #0
 100c494:	d1f9      	bne.n	100c48a <strchr+0x7e>
 100c496:	4618      	mov	r0, r3
 100c498:	bc70      	pop	{r4, r5, r6}
 100c49a:	4770      	bx	lr
 100c49c:	b15b      	cbz	r3, 100c4b6 <strchr+0xaa>
 100c49e:	7803      	ldrb	r3, [r0, #0]
 100c4a0:	b30b      	cbz	r3, 100c4e6 <strchr+0xda>
 100c4a2:	1c43      	adds	r3, r0, #1
 100c4a4:	e001      	b.n	100c4aa <strchr+0x9e>
 100c4a6:	7802      	ldrb	r2, [r0, #0]
 100c4a8:	b1ea      	cbz	r2, 100c4e6 <strchr+0xda>
 100c4aa:	f013 0f03 	tst.w	r3, #3
 100c4ae:	4618      	mov	r0, r3
 100c4b0:	f103 0301 	add.w	r3, r3, #1
 100c4b4:	d1f7      	bne.n	100c4a6 <strchr+0x9a>
 100c4b6:	6802      	ldr	r2, [r0, #0]
 100c4b8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100c4bc:	ea23 0302 	bic.w	r3, r3, r2
 100c4c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100c4c4:	d108      	bne.n	100c4d8 <strchr+0xcc>
 100c4c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 100c4ca:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100c4ce:	ea23 0302 	bic.w	r3, r3, r2
 100c4d2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100c4d6:	d0f6      	beq.n	100c4c6 <strchr+0xba>
 100c4d8:	7803      	ldrb	r3, [r0, #0]
 100c4da:	b123      	cbz	r3, 100c4e6 <strchr+0xda>
 100c4dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100c4e0:	2b00      	cmp	r3, #0
 100c4e2:	d1fb      	bne.n	100c4dc <strchr+0xd0>
 100c4e4:	4770      	bx	lr
 100c4e6:	4770      	bx	lr
 100c4e8:	4610      	mov	r0, r2
 100c4ea:	4770      	bx	lr
 100c4ec:	4618      	mov	r0, r3
 100c4ee:	4770      	bx	lr
	...
 100c500:	eba2 0003 	sub.w	r0, r2, r3
 100c504:	4770      	bx	lr
 100c506:	bf00      	nop

0100c508 <strcmp>:
 100c508:	7802      	ldrb	r2, [r0, #0]
 100c50a:	780b      	ldrb	r3, [r1, #0]
 100c50c:	2a01      	cmp	r2, #1
 100c50e:	bf28      	it	cs
 100c510:	429a      	cmpcs	r2, r3
 100c512:	d1f5      	bne.n	100c500 <strchr+0xf4>
 100c514:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 100c518:	ea40 0401 	orr.w	r4, r0, r1
 100c51c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 100c520:	f06f 0c00 	mvn.w	ip, #0
 100c524:	ea4f 7244 	mov.w	r2, r4, lsl #29
 100c528:	b312      	cbz	r2, 100c570 <strcmp+0x68>
 100c52a:	ea80 0401 	eor.w	r4, r0, r1
 100c52e:	f014 0f07 	tst.w	r4, #7
 100c532:	d16a      	bne.n	100c60a <strcmp+0x102>
 100c534:	f000 0407 	and.w	r4, r0, #7
 100c538:	f020 0007 	bic.w	r0, r0, #7
 100c53c:	f004 0503 	and.w	r5, r4, #3
 100c540:	f021 0107 	bic.w	r1, r1, #7
 100c544:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100c548:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 100c54c:	f014 0f04 	tst.w	r4, #4
 100c550:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 100c554:	fa0c f405 	lsl.w	r4, ip, r5
 100c558:	ea62 0204 	orn	r2, r2, r4
 100c55c:	ea66 0604 	orn	r6, r6, r4
 100c560:	d00a      	beq.n	100c578 <strcmp+0x70>
 100c562:	ea63 0304 	orn	r3, r3, r4
 100c566:	4662      	mov	r2, ip
 100c568:	ea67 0704 	orn	r7, r7, r4
 100c56c:	4666      	mov	r6, ip
 100c56e:	e003      	b.n	100c578 <strcmp+0x70>
 100c570:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 100c574:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 100c578:	fa82 f54c 	uadd8	r5, r2, ip
 100c57c:	ea82 0406 	eor.w	r4, r2, r6
 100c580:	faa4 f48c 	sel	r4, r4, ip
 100c584:	bb6c      	cbnz	r4, 100c5e2 <strcmp+0xda>
 100c586:	fa83 f54c 	uadd8	r5, r3, ip
 100c58a:	ea83 0507 	eor.w	r5, r3, r7
 100c58e:	faa5 f58c 	sel	r5, r5, ip
 100c592:	b995      	cbnz	r5, 100c5ba <strcmp+0xb2>
 100c594:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 100c598:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 100c59c:	fa82 f54c 	uadd8	r5, r2, ip
 100c5a0:	ea82 0406 	eor.w	r4, r2, r6
 100c5a4:	faa4 f48c 	sel	r4, r4, ip
 100c5a8:	fa83 f54c 	uadd8	r5, r3, ip
 100c5ac:	ea83 0507 	eor.w	r5, r3, r7
 100c5b0:	faa5 f58c 	sel	r5, r5, ip
 100c5b4:	4325      	orrs	r5, r4
 100c5b6:	d0db      	beq.n	100c570 <strcmp+0x68>
 100c5b8:	b99c      	cbnz	r4, 100c5e2 <strcmp+0xda>
 100c5ba:	ba2d      	rev	r5, r5
 100c5bc:	fab5 f485 	clz	r4, r5
 100c5c0:	f024 0407 	bic.w	r4, r4, #7
 100c5c4:	fa27 f104 	lsr.w	r1, r7, r4
 100c5c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 100c5cc:	fa23 f304 	lsr.w	r3, r3, r4
 100c5d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 100c5d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100c5d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100c5dc:	eba0 0001 	sub.w	r0, r0, r1
 100c5e0:	4770      	bx	lr
 100c5e2:	ba24      	rev	r4, r4
 100c5e4:	fab4 f484 	clz	r4, r4
 100c5e8:	f024 0407 	bic.w	r4, r4, #7
 100c5ec:	fa26 f104 	lsr.w	r1, r6, r4
 100c5f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 100c5f4:	fa22 f204 	lsr.w	r2, r2, r4
 100c5f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 100c5fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100c600:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100c604:	eba0 0001 	sub.w	r0, r0, r1
 100c608:	4770      	bx	lr
 100c60a:	f014 0f03 	tst.w	r4, #3
 100c60e:	d13c      	bne.n	100c68a <strcmp+0x182>
 100c610:	f010 0403 	ands.w	r4, r0, #3
 100c614:	d128      	bne.n	100c668 <strcmp+0x160>
 100c616:	f850 2b08 	ldr.w	r2, [r0], #8
 100c61a:	f851 3b08 	ldr.w	r3, [r1], #8
 100c61e:	fa82 f54c 	uadd8	r5, r2, ip
 100c622:	ea82 0503 	eor.w	r5, r2, r3
 100c626:	faa5 f58c 	sel	r5, r5, ip
 100c62a:	b95d      	cbnz	r5, 100c644 <strcmp+0x13c>
 100c62c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 100c630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 100c634:	fa82 f54c 	uadd8	r5, r2, ip
 100c638:	ea82 0503 	eor.w	r5, r2, r3
 100c63c:	faa5 f58c 	sel	r5, r5, ip
 100c640:	2d00      	cmp	r5, #0
 100c642:	d0e8      	beq.n	100c616 <strcmp+0x10e>
 100c644:	ba2d      	rev	r5, r5
 100c646:	fab5 f485 	clz	r4, r5
 100c64a:	f024 0407 	bic.w	r4, r4, #7
 100c64e:	fa23 f104 	lsr.w	r1, r3, r4
 100c652:	fa22 f204 	lsr.w	r2, r2, r4
 100c656:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 100c65a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100c65e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100c662:	eba0 0001 	sub.w	r0, r0, r1
 100c666:	4770      	bx	lr
 100c668:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 100c66c:	f020 0003 	bic.w	r0, r0, #3
 100c670:	f850 2b08 	ldr.w	r2, [r0], #8
 100c674:	f021 0103 	bic.w	r1, r1, #3
 100c678:	f851 3b08 	ldr.w	r3, [r1], #8
 100c67c:	fa0c f404 	lsl.w	r4, ip, r4
 100c680:	ea62 0204 	orn	r2, r2, r4
 100c684:	ea63 0304 	orn	r3, r3, r4
 100c688:	e7c9      	b.n	100c61e <strcmp+0x116>
 100c68a:	f010 0403 	ands.w	r4, r0, #3
 100c68e:	d01a      	beq.n	100c6c6 <strcmp+0x1be>
 100c690:	eba1 0104 	sub.w	r1, r1, r4
 100c694:	f020 0003 	bic.w	r0, r0, #3
 100c698:	07e4      	lsls	r4, r4, #31
 100c69a:	f850 2b04 	ldr.w	r2, [r0], #4
 100c69e:	d006      	beq.n	100c6ae <strcmp+0x1a6>
 100c6a0:	d20f      	bcs.n	100c6c2 <strcmp+0x1ba>
 100c6a2:	788b      	ldrb	r3, [r1, #2]
 100c6a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 100c6a8:	1ae4      	subs	r4, r4, r3
 100c6aa:	d106      	bne.n	100c6ba <strcmp+0x1b2>
 100c6ac:	b12b      	cbz	r3, 100c6ba <strcmp+0x1b2>
 100c6ae:	78cb      	ldrb	r3, [r1, #3]
 100c6b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 100c6b4:	1ae4      	subs	r4, r4, r3
 100c6b6:	d100      	bne.n	100c6ba <strcmp+0x1b2>
 100c6b8:	b91b      	cbnz	r3, 100c6c2 <strcmp+0x1ba>
 100c6ba:	4620      	mov	r0, r4
 100c6bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 100c6c0:	4770      	bx	lr
 100c6c2:	f101 0104 	add.w	r1, r1, #4
 100c6c6:	f850 2b04 	ldr.w	r2, [r0], #4
 100c6ca:	07cc      	lsls	r4, r1, #31
 100c6cc:	f021 0103 	bic.w	r1, r1, #3
 100c6d0:	f851 3b04 	ldr.w	r3, [r1], #4
 100c6d4:	d848      	bhi.n	100c768 <strcmp+0x260>
 100c6d6:	d224      	bcs.n	100c722 <strcmp+0x21a>
 100c6d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 100c6dc:	fa82 f54c 	uadd8	r5, r2, ip
 100c6e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 100c6e4:	faa5 f58c 	sel	r5, r5, ip
 100c6e8:	d10a      	bne.n	100c700 <strcmp+0x1f8>
 100c6ea:	b965      	cbnz	r5, 100c706 <strcmp+0x1fe>
 100c6ec:	f851 3b04 	ldr.w	r3, [r1], #4
 100c6f0:	ea84 0402 	eor.w	r4, r4, r2
 100c6f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 100c6f8:	d10e      	bne.n	100c718 <strcmp+0x210>
 100c6fa:	f850 2b04 	ldr.w	r2, [r0], #4
 100c6fe:	e7eb      	b.n	100c6d8 <strcmp+0x1d0>
 100c700:	ea4f 2313 	mov.w	r3, r3, lsr #8
 100c704:	e055      	b.n	100c7b2 <strcmp+0x2aa>
 100c706:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 100c70a:	d14d      	bne.n	100c7a8 <strcmp+0x2a0>
 100c70c:	7808      	ldrb	r0, [r1, #0]
 100c70e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100c712:	f1c0 0000 	rsb	r0, r0, #0
 100c716:	4770      	bx	lr
 100c718:	ea4f 6212 	mov.w	r2, r2, lsr #24
 100c71c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 100c720:	e047      	b.n	100c7b2 <strcmp+0x2aa>
 100c722:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 100c726:	fa82 f54c 	uadd8	r5, r2, ip
 100c72a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 100c72e:	faa5 f58c 	sel	r5, r5, ip
 100c732:	d10a      	bne.n	100c74a <strcmp+0x242>
 100c734:	b965      	cbnz	r5, 100c750 <strcmp+0x248>
 100c736:	f851 3b04 	ldr.w	r3, [r1], #4
 100c73a:	ea84 0402 	eor.w	r4, r4, r2
 100c73e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 100c742:	d10c      	bne.n	100c75e <strcmp+0x256>
 100c744:	f850 2b04 	ldr.w	r2, [r0], #4
 100c748:	e7eb      	b.n	100c722 <strcmp+0x21a>
 100c74a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 100c74e:	e030      	b.n	100c7b2 <strcmp+0x2aa>
 100c750:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 100c754:	d128      	bne.n	100c7a8 <strcmp+0x2a0>
 100c756:	880b      	ldrh	r3, [r1, #0]
 100c758:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100c75c:	e029      	b.n	100c7b2 <strcmp+0x2aa>
 100c75e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100c762:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 100c766:	e024      	b.n	100c7b2 <strcmp+0x2aa>
 100c768:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 100c76c:	fa82 f54c 	uadd8	r5, r2, ip
 100c770:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 100c774:	faa5 f58c 	sel	r5, r5, ip
 100c778:	d10a      	bne.n	100c790 <strcmp+0x288>
 100c77a:	b965      	cbnz	r5, 100c796 <strcmp+0x28e>
 100c77c:	f851 3b04 	ldr.w	r3, [r1], #4
 100c780:	ea84 0402 	eor.w	r4, r4, r2
 100c784:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 100c788:	d109      	bne.n	100c79e <strcmp+0x296>
 100c78a:	f850 2b04 	ldr.w	r2, [r0], #4
 100c78e:	e7eb      	b.n	100c768 <strcmp+0x260>
 100c790:	ea4f 6313 	mov.w	r3, r3, lsr #24
 100c794:	e00d      	b.n	100c7b2 <strcmp+0x2aa>
 100c796:	f015 0fff 	tst.w	r5, #255	; 0xff
 100c79a:	d105      	bne.n	100c7a8 <strcmp+0x2a0>
 100c79c:	680b      	ldr	r3, [r1, #0]
 100c79e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 100c7a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 100c7a6:	e004      	b.n	100c7b2 <strcmp+0x2aa>
 100c7a8:	f04f 0000 	mov.w	r0, #0
 100c7ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100c7b0:	4770      	bx	lr
 100c7b2:	ba12      	rev	r2, r2
 100c7b4:	ba1b      	rev	r3, r3
 100c7b6:	fa82 f44c 	uadd8	r4, r2, ip
 100c7ba:	ea82 0403 	eor.w	r4, r2, r3
 100c7be:	faa4 f58c 	sel	r5, r4, ip
 100c7c2:	fab5 f485 	clz	r4, r5
 100c7c6:	fa02 f204 	lsl.w	r2, r2, r4
 100c7ca:	fa03 f304 	lsl.w	r3, r3, r4
 100c7ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 100c7d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100c7d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 100c7da:	4770      	bx	lr

0100c7dc <strcpy>:
 100c7dc:	f891 f000 	pld	[r1]
 100c7e0:	ea80 0201 	eor.w	r2, r0, r1
 100c7e4:	4684      	mov	ip, r0
 100c7e6:	f012 0f03 	tst.w	r2, #3
 100c7ea:	d151      	bne.n	100c890 <strcpy+0xb4>
 100c7ec:	f011 0f03 	tst.w	r1, #3
 100c7f0:	d134      	bne.n	100c85c <strcpy+0x80>
 100c7f2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 100c7f6:	f011 0f04 	tst.w	r1, #4
 100c7fa:	f851 3b04 	ldr.w	r3, [r1], #4
 100c7fe:	d00b      	beq.n	100c818 <strcpy+0x3c>
 100c800:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 100c804:	439a      	bics	r2, r3
 100c806:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100c80a:	bf04      	itt	eq
 100c80c:	f84c 3b04 	streq.w	r3, [ip], #4
 100c810:	f851 3b04 	ldreq.w	r3, [r1], #4
 100c814:	d118      	bne.n	100c848 <strcpy+0x6c>
 100c816:	bf00      	nop
 100c818:	f891 f008 	pld	[r1, #8]
 100c81c:	f851 4b04 	ldr.w	r4, [r1], #4
 100c820:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 100c824:	439a      	bics	r2, r3
 100c826:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100c82a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 100c82e:	d10b      	bne.n	100c848 <strcpy+0x6c>
 100c830:	f84c 3b04 	str.w	r3, [ip], #4
 100c834:	43a2      	bics	r2, r4
 100c836:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100c83a:	bf04      	itt	eq
 100c83c:	f851 3b04 	ldreq.w	r3, [r1], #4
 100c840:	f84c 4b04 	streq.w	r4, [ip], #4
 100c844:	d0e8      	beq.n	100c818 <strcpy+0x3c>
 100c846:	4623      	mov	r3, r4
 100c848:	f80c 3b01 	strb.w	r3, [ip], #1
 100c84c:	f013 0fff 	tst.w	r3, #255	; 0xff
 100c850:	ea4f 2333 	mov.w	r3, r3, ror #8
 100c854:	d1f8      	bne.n	100c848 <strcpy+0x6c>
 100c856:	f85d 4b04 	ldr.w	r4, [sp], #4
 100c85a:	4770      	bx	lr
 100c85c:	f011 0f01 	tst.w	r1, #1
 100c860:	d006      	beq.n	100c870 <strcpy+0x94>
 100c862:	f811 2b01 	ldrb.w	r2, [r1], #1
 100c866:	f80c 2b01 	strb.w	r2, [ip], #1
 100c86a:	2a00      	cmp	r2, #0
 100c86c:	bf08      	it	eq
 100c86e:	4770      	bxeq	lr
 100c870:	f011 0f02 	tst.w	r1, #2
 100c874:	d0bd      	beq.n	100c7f2 <strcpy+0x16>
 100c876:	f831 2b02 	ldrh.w	r2, [r1], #2
 100c87a:	f012 0fff 	tst.w	r2, #255	; 0xff
 100c87e:	bf16      	itet	ne
 100c880:	f82c 2b02 	strhne.w	r2, [ip], #2
 100c884:	f88c 2000 	strbeq.w	r2, [ip]
 100c888:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 100c88c:	d1b1      	bne.n	100c7f2 <strcpy+0x16>
 100c88e:	4770      	bx	lr
 100c890:	f811 2b01 	ldrb.w	r2, [r1], #1
 100c894:	f80c 2b01 	strb.w	r2, [ip], #1
 100c898:	2a00      	cmp	r2, #0
 100c89a:	d1f9      	bne.n	100c890 <strcpy+0xb4>
 100c89c:	4770      	bx	lr
 100c89e:	bf00      	nop

0100c8a0 <strlcpy>:
 100c8a0:	b19a      	cbz	r2, 100c8ca <strlcpy+0x2a>
 100c8a2:	2a01      	cmp	r2, #1
 100c8a4:	d019      	beq.n	100c8da <strlcpy+0x3a>
 100c8a6:	b470      	push	{r4, r5, r6}
 100c8a8:	460b      	mov	r3, r1
 100c8aa:	4605      	mov	r5, r0
 100c8ac:	e001      	b.n	100c8b2 <strlcpy+0x12>
 100c8ae:	42e0      	cmn	r0, r4
 100c8b0:	d017      	beq.n	100c8e2 <strlcpy+0x42>
 100c8b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 100c8b6:	f805 6b01 	strb.w	r6, [r5], #1
 100c8ba:	43ec      	mvns	r4, r5
 100c8bc:	4414      	add	r4, r2
 100c8be:	2e00      	cmp	r6, #0
 100c8c0:	d1f5      	bne.n	100c8ae <strlcpy+0xe>
 100c8c2:	1a58      	subs	r0, r3, r1
 100c8c4:	3801      	subs	r0, #1
 100c8c6:	bc70      	pop	{r4, r5, r6}
 100c8c8:	4770      	bx	lr
 100c8ca:	460b      	mov	r3, r1
 100c8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 100c8d0:	2a00      	cmp	r2, #0
 100c8d2:	d1fb      	bne.n	100c8cc <strlcpy+0x2c>
 100c8d4:	1a58      	subs	r0, r3, r1
 100c8d6:	3801      	subs	r0, #1
 100c8d8:	4770      	bx	lr
 100c8da:	2200      	movs	r2, #0
 100c8dc:	460b      	mov	r3, r1
 100c8de:	7002      	strb	r2, [r0, #0]
 100c8e0:	e7f4      	b.n	100c8cc <strlcpy+0x2c>
 100c8e2:	2200      	movs	r2, #0
 100c8e4:	702a      	strb	r2, [r5, #0]
 100c8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 100c8ea:	2a00      	cmp	r2, #0
 100c8ec:	d1fb      	bne.n	100c8e6 <strlcpy+0x46>
 100c8ee:	1a58      	subs	r0, r3, r1
 100c8f0:	3801      	subs	r0, #1
 100c8f2:	bc70      	pop	{r4, r5, r6}
 100c8f4:	4770      	bx	lr
 100c8f6:	bf00      	nop
	...

0100c900 <strlen>:
 100c900:	f890 f000 	pld	[r0]
 100c904:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 100c908:	f020 0107 	bic.w	r1, r0, #7
 100c90c:	f06f 0c00 	mvn.w	ip, #0
 100c910:	f010 0407 	ands.w	r4, r0, #7
 100c914:	f891 f020 	pld	[r1, #32]
 100c918:	f040 8049 	bne.w	100c9ae <strlen+0xae>
 100c91c:	f04f 0400 	mov.w	r4, #0
 100c920:	f06f 0007 	mvn.w	r0, #7
 100c924:	e9d1 2300 	ldrd	r2, r3, [r1]
 100c928:	f891 f040 	pld	[r1, #64]	; 0x40
 100c92c:	f100 0008 	add.w	r0, r0, #8
 100c930:	fa82 f24c 	uadd8	r2, r2, ip
 100c934:	faa4 f28c 	sel	r2, r4, ip
 100c938:	fa83 f34c 	uadd8	r3, r3, ip
 100c93c:	faa2 f38c 	sel	r3, r2, ip
 100c940:	bb4b      	cbnz	r3, 100c996 <strlen+0x96>
 100c942:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 100c946:	fa82 f24c 	uadd8	r2, r2, ip
 100c94a:	f100 0008 	add.w	r0, r0, #8
 100c94e:	faa4 f28c 	sel	r2, r4, ip
 100c952:	fa83 f34c 	uadd8	r3, r3, ip
 100c956:	faa2 f38c 	sel	r3, r2, ip
 100c95a:	b9e3      	cbnz	r3, 100c996 <strlen+0x96>
 100c95c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 100c960:	fa82 f24c 	uadd8	r2, r2, ip
 100c964:	f100 0008 	add.w	r0, r0, #8
 100c968:	faa4 f28c 	sel	r2, r4, ip
 100c96c:	fa83 f34c 	uadd8	r3, r3, ip
 100c970:	faa2 f38c 	sel	r3, r2, ip
 100c974:	b97b      	cbnz	r3, 100c996 <strlen+0x96>
 100c976:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 100c97a:	f101 0120 	add.w	r1, r1, #32
 100c97e:	fa82 f24c 	uadd8	r2, r2, ip
 100c982:	f100 0008 	add.w	r0, r0, #8
 100c986:	faa4 f28c 	sel	r2, r4, ip
 100c98a:	fa83 f34c 	uadd8	r3, r3, ip
 100c98e:	faa2 f38c 	sel	r3, r2, ip
 100c992:	2b00      	cmp	r3, #0
 100c994:	d0c6      	beq.n	100c924 <strlen+0x24>
 100c996:	2a00      	cmp	r2, #0
 100c998:	bf04      	itt	eq
 100c99a:	3004      	addeq	r0, #4
 100c99c:	461a      	moveq	r2, r3
 100c99e:	ba12      	rev	r2, r2
 100c9a0:	fab2 f282 	clz	r2, r2
 100c9a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 100c9a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 100c9ac:	4770      	bx	lr
 100c9ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 100c9b2:	f004 0503 	and.w	r5, r4, #3
 100c9b6:	f1c4 0000 	rsb	r0, r4, #0
 100c9ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100c9be:	f014 0f04 	tst.w	r4, #4
 100c9c2:	f891 f040 	pld	[r1, #64]	; 0x40
 100c9c6:	fa0c f505 	lsl.w	r5, ip, r5
 100c9ca:	ea62 0205 	orn	r2, r2, r5
 100c9ce:	bf1c      	itt	ne
 100c9d0:	ea63 0305 	ornne	r3, r3, r5
 100c9d4:	4662      	movne	r2, ip
 100c9d6:	f04f 0400 	mov.w	r4, #0
 100c9da:	e7a9      	b.n	100c930 <strlen+0x30>

0100c9dc <strncasecmp>:
 100c9dc:	b34a      	cbz	r2, 100ca32 <strncasecmp+0x56>
 100c9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100c9e2:	4606      	mov	r6, r0
 100c9e4:	460f      	mov	r7, r1
 100c9e6:	eb00 0802 	add.w	r8, r0, r2
 100c9ea:	e004      	b.n	100c9f6 <strncasecmp+0x1a>
 100c9ec:	1b60      	subs	r0, r4, r5
 100c9ee:	d11b      	bne.n	100ca28 <strncasecmp+0x4c>
 100c9f0:	b1e5      	cbz	r5, 100ca2c <strncasecmp+0x50>
 100c9f2:	45b0      	cmp	r8, r6
 100c9f4:	d01a      	beq.n	100ca2c <strncasecmp+0x50>
 100c9f6:	f816 4b01 	ldrb.w	r4, [r6], #1
 100c9fa:	f7fe fabf 	bl	100af7c <__locale_ctype_ptr>
 100c9fe:	f817 5b01 	ldrb.w	r5, [r7], #1
 100ca02:	4420      	add	r0, r4
 100ca04:	7843      	ldrb	r3, [r0, #1]
 100ca06:	f003 0303 	and.w	r3, r3, #3
 100ca0a:	2b01      	cmp	r3, #1
 100ca0c:	bf08      	it	eq
 100ca0e:	3420      	addeq	r4, #32
 100ca10:	f7fe fab4 	bl	100af7c <__locale_ctype_ptr>
 100ca14:	4428      	add	r0, r5
 100ca16:	7843      	ldrb	r3, [r0, #1]
 100ca18:	f003 0303 	and.w	r3, r3, #3
 100ca1c:	2b01      	cmp	r3, #1
 100ca1e:	d1e5      	bne.n	100c9ec <strncasecmp+0x10>
 100ca20:	f105 0020 	add.w	r0, r5, #32
 100ca24:	1a20      	subs	r0, r4, r0
 100ca26:	d0e4      	beq.n	100c9f2 <strncasecmp+0x16>
 100ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100ca2c:	2000      	movs	r0, #0
 100ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100ca32:	2000      	movs	r0, #0
 100ca34:	4770      	bx	lr
 100ca36:	bf00      	nop

0100ca38 <strncmp>:
 100ca38:	2a00      	cmp	r2, #0
 100ca3a:	d049      	beq.n	100cad0 <strncmp+0x98>
 100ca3c:	ea40 0301 	orr.w	r3, r0, r1
 100ca40:	f013 0303 	ands.w	r3, r3, #3
 100ca44:	b4f0      	push	{r4, r5, r6, r7}
 100ca46:	d125      	bne.n	100ca94 <strncmp+0x5c>
 100ca48:	2a03      	cmp	r2, #3
 100ca4a:	d923      	bls.n	100ca94 <strncmp+0x5c>
 100ca4c:	6804      	ldr	r4, [r0, #0]
 100ca4e:	680d      	ldr	r5, [r1, #0]
 100ca50:	42ac      	cmp	r4, r5
 100ca52:	d11f      	bne.n	100ca94 <strncmp+0x5c>
 100ca54:	3a04      	subs	r2, #4
 100ca56:	d038      	beq.n	100caca <strncmp+0x92>
 100ca58:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 100ca5c:	ea25 0404 	bic.w	r4, r5, r4
 100ca60:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100ca64:	d131      	bne.n	100caca <strncmp+0x92>
 100ca66:	1d07      	adds	r7, r0, #4
 100ca68:	1d0d      	adds	r5, r1, #4
 100ca6a:	e00d      	b.n	100ca88 <strncmp+0x50>
 100ca6c:	f857 3b04 	ldr.w	r3, [r7], #4
 100ca70:	680e      	ldr	r6, [r1, #0]
 100ca72:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 100ca76:	42b3      	cmp	r3, r6
 100ca78:	ea24 0403 	bic.w	r4, r4, r3
 100ca7c:	d10a      	bne.n	100ca94 <strncmp+0x5c>
 100ca7e:	3a04      	subs	r2, #4
 100ca80:	d023      	beq.n	100caca <strncmp+0x92>
 100ca82:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100ca86:	d120      	bne.n	100caca <strncmp+0x92>
 100ca88:	2a03      	cmp	r2, #3
 100ca8a:	4629      	mov	r1, r5
 100ca8c:	4638      	mov	r0, r7
 100ca8e:	f105 0504 	add.w	r5, r5, #4
 100ca92:	d8eb      	bhi.n	100ca6c <strncmp+0x34>
 100ca94:	7804      	ldrb	r4, [r0, #0]
 100ca96:	780e      	ldrb	r6, [r1, #0]
 100ca98:	42a6      	cmp	r6, r4
 100ca9a:	d11b      	bne.n	100cad4 <strncmp+0x9c>
 100ca9c:	2a01      	cmp	r2, #1
 100ca9e:	bf18      	it	ne
 100caa0:	2e00      	cmpne	r6, #0
 100caa2:	d012      	beq.n	100caca <strncmp+0x92>
 100caa4:	4605      	mov	r5, r0
 100caa6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 100caaa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 100caae:	42b4      	cmp	r4, r6
 100cab0:	ea6f 0305 	mvn.w	r3, r5
 100cab4:	4413      	add	r3, r2
 100cab6:	d10d      	bne.n	100cad4 <strncmp+0x9c>
 100cab8:	42d8      	cmn	r0, r3
 100caba:	bf0c      	ite	eq
 100cabc:	2301      	moveq	r3, #1
 100cabe:	2300      	movne	r3, #0
 100cac0:	2c00      	cmp	r4, #0
 100cac2:	bf08      	it	eq
 100cac4:	2301      	moveq	r3, #1
 100cac6:	2b00      	cmp	r3, #0
 100cac8:	d0ed      	beq.n	100caa6 <strncmp+0x6e>
 100caca:	2000      	movs	r0, #0
 100cacc:	bcf0      	pop	{r4, r5, r6, r7}
 100cace:	4770      	bx	lr
 100cad0:	4610      	mov	r0, r2
 100cad2:	4770      	bx	lr
 100cad4:	1ba0      	subs	r0, r4, r6
 100cad6:	bcf0      	pop	{r4, r5, r6, r7}
 100cad8:	4770      	bx	lr
 100cada:	bf00      	nop

0100cadc <strncpy>:
 100cadc:	2a03      	cmp	r2, #3
 100cade:	ea40 0301 	orr.w	r3, r0, r1
 100cae2:	b470      	push	{r4, r5, r6}
 100cae4:	f3c3 0401 	ubfx	r4, r3, #0, #2
 100cae8:	bf94      	ite	ls
 100caea:	2500      	movls	r5, #0
 100caec:	2501      	movhi	r5, #1
 100caee:	2c00      	cmp	r4, #0
 100caf0:	4606      	mov	r6, r0
 100caf2:	bf18      	it	ne
 100caf4:	2500      	movne	r5, #0
 100caf6:	b9a5      	cbnz	r5, 100cb22 <strncpy+0x46>
 100caf8:	b18a      	cbz	r2, 100cb1e <strncpy+0x42>
 100cafa:	780c      	ldrb	r4, [r1, #0]
 100cafc:	4633      	mov	r3, r6
 100cafe:	1e55      	subs	r5, r2, #1
 100cb00:	f803 4b01 	strb.w	r4, [r3], #1
 100cb04:	b1fc      	cbz	r4, 100cb46 <strncpy+0x6a>
 100cb06:	4432      	add	r2, r6
 100cb08:	442e      	add	r6, r5
 100cb0a:	e004      	b.n	100cb16 <strncpy+0x3a>
 100cb0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 100cb10:	f803 4b01 	strb.w	r4, [r3], #1
 100cb14:	b1bc      	cbz	r4, 100cb46 <strncpy+0x6a>
 100cb16:	429a      	cmp	r2, r3
 100cb18:	eba6 0503 	sub.w	r5, r6, r3
 100cb1c:	d1f6      	bne.n	100cb0c <strncpy+0x30>
 100cb1e:	bc70      	pop	{r4, r5, r6}
 100cb20:	4770      	bx	lr
 100cb22:	460b      	mov	r3, r1
 100cb24:	4619      	mov	r1, r3
 100cb26:	f853 5b04 	ldr.w	r5, [r3], #4
 100cb2a:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 100cb2e:	ea24 0405 	bic.w	r4, r4, r5
 100cb32:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100cb36:	d1e0      	bne.n	100cafa <strncpy+0x1e>
 100cb38:	3a04      	subs	r2, #4
 100cb3a:	f846 5b04 	str.w	r5, [r6], #4
 100cb3e:	2a03      	cmp	r2, #3
 100cb40:	4619      	mov	r1, r3
 100cb42:	d8ef      	bhi.n	100cb24 <strncpy+0x48>
 100cb44:	e7d8      	b.n	100caf8 <strncpy+0x1c>
 100cb46:	2d00      	cmp	r5, #0
 100cb48:	d0e9      	beq.n	100cb1e <strncpy+0x42>
 100cb4a:	441d      	add	r5, r3
 100cb4c:	2200      	movs	r2, #0
 100cb4e:	f803 2b01 	strb.w	r2, [r3], #1
 100cb52:	42ab      	cmp	r3, r5
 100cb54:	d1fb      	bne.n	100cb4e <strncpy+0x72>
 100cb56:	bc70      	pop	{r4, r5, r6}
 100cb58:	4770      	bx	lr
 100cb5a:	bf00      	nop

0100cb5c <_strtol_l.isra.0>:
 100cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100cb60:	b083      	sub	sp, #12
 100cb62:	460f      	mov	r7, r1
 100cb64:	4690      	mov	r8, r2
 100cb66:	9001      	str	r0, [sp, #4]
 100cb68:	461e      	mov	r6, r3
 100cb6a:	468b      	mov	fp, r1
 100cb6c:	e000      	b.n	100cb70 <_strtol_l.isra.0+0x14>
 100cb6e:	46ab      	mov	fp, r5
 100cb70:	465d      	mov	r5, fp
 100cb72:	980c      	ldr	r0, [sp, #48]	; 0x30
 100cb74:	f815 4b01 	ldrb.w	r4, [r5], #1
 100cb78:	f7fe f9fc 	bl	100af74 <__locale_ctype_ptr_l>
 100cb7c:	4420      	add	r0, r4
 100cb7e:	7842      	ldrb	r2, [r0, #1]
 100cb80:	f012 0208 	ands.w	r2, r2, #8
 100cb84:	d1f3      	bne.n	100cb6e <_strtol_l.isra.0+0x12>
 100cb86:	2c2d      	cmp	r4, #45	; 0x2d
 100cb88:	d061      	beq.n	100cc4e <_strtol_l.isra.0+0xf2>
 100cb8a:	2c2b      	cmp	r4, #43	; 0x2b
 100cb8c:	4692      	mov	sl, r2
 100cb8e:	bf04      	itt	eq
 100cb90:	782c      	ldrbeq	r4, [r5, #0]
 100cb92:	f10b 0502 	addeq.w	r5, fp, #2
 100cb96:	f036 0310 	bics.w	r3, r6, #16
 100cb9a:	d103      	bne.n	100cba4 <_strtol_l.isra.0+0x48>
 100cb9c:	2c30      	cmp	r4, #48	; 0x30
 100cb9e:	d05c      	beq.n	100cc5a <_strtol_l.isra.0+0xfe>
 100cba0:	b906      	cbnz	r6, 100cba4 <_strtol_l.isra.0+0x48>
 100cba2:	260a      	movs	r6, #10
 100cba4:	46b3      	mov	fp, r6
 100cba6:	f1ba 0f00 	cmp.w	sl, #0
 100cbaa:	4659      	mov	r1, fp
 100cbac:	bf14      	ite	ne
 100cbae:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 100cbb2:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 100cbb6:	4648      	mov	r0, r9
 100cbb8:	f7fc ffa4 	bl	1009b04 <__aeabi_uidivmod>
 100cbbc:	2200      	movs	r2, #0
 100cbbe:	4686      	mov	lr, r0
 100cbc0:	4610      	mov	r0, r2
 100cbc2:	e00e      	b.n	100cbe2 <_strtol_l.isra.0+0x86>
 100cbc4:	ebae 0400 	sub.w	r4, lr, r0
 100cbc8:	4299      	cmp	r1, r3
 100cbca:	fab4 f484 	clz	r4, r4
 100cbce:	ea4f 1454 	mov.w	r4, r4, lsr #5
 100cbd2:	bfa8      	it	ge
 100cbd4:	2400      	movge	r4, #0
 100cbd6:	b9f4      	cbnz	r4, 100cc16 <_strtol_l.isra.0+0xba>
 100cbd8:	fb0b 3000 	mla	r0, fp, r0, r3
 100cbdc:	2201      	movs	r2, #1
 100cbde:	f815 4b01 	ldrb.w	r4, [r5], #1
 100cbe2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 100cbe6:	2b09      	cmp	r3, #9
 100cbe8:	d90c      	bls.n	100cc04 <_strtol_l.isra.0+0xa8>
 100cbea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 100cbee:	2b19      	cmp	r3, #25
 100cbf0:	bf98      	it	ls
 100cbf2:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
 100cbf6:	d905      	bls.n	100cc04 <_strtol_l.isra.0+0xa8>
 100cbf8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 100cbfc:	2b19      	cmp	r3, #25
 100cbfe:	d80d      	bhi.n	100cc1c <_strtol_l.isra.0+0xc0>
 100cc00:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 100cc04:	429e      	cmp	r6, r3
 100cc06:	dd09      	ble.n	100cc1c <_strtol_l.isra.0+0xc0>
 100cc08:	4586      	cmp	lr, r0
 100cc0a:	bf2c      	ite	cs
 100cc0c:	2400      	movcs	r4, #0
 100cc0e:	2401      	movcc	r4, #1
 100cc10:	ea54 72d2 	orrs.w	r2, r4, r2, lsr #31
 100cc14:	d0d6      	beq.n	100cbc4 <_strtol_l.isra.0+0x68>
 100cc16:	f04f 32ff 	mov.w	r2, #4294967295
 100cc1a:	e7e0      	b.n	100cbde <_strtol_l.isra.0+0x82>
 100cc1c:	1c53      	adds	r3, r2, #1
 100cc1e:	d00c      	beq.n	100cc3a <_strtol_l.isra.0+0xde>
 100cc20:	f1ba 0f00 	cmp.w	sl, #0
 100cc24:	d000      	beq.n	100cc28 <_strtol_l.isra.0+0xcc>
 100cc26:	4240      	negs	r0, r0
 100cc28:	f1b8 0f00 	cmp.w	r8, #0
 100cc2c:	d002      	beq.n	100cc34 <_strtol_l.isra.0+0xd8>
 100cc2e:	bb1a      	cbnz	r2, 100cc78 <_strtol_l.isra.0+0x11c>
 100cc30:	f8c8 7000 	str.w	r7, [r8]
 100cc34:	b003      	add	sp, #12
 100cc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100cc3a:	9a01      	ldr	r2, [sp, #4]
 100cc3c:	2322      	movs	r3, #34	; 0x22
 100cc3e:	4648      	mov	r0, r9
 100cc40:	6013      	str	r3, [r2, #0]
 100cc42:	f1b8 0f00 	cmp.w	r8, #0
 100cc46:	d0f5      	beq.n	100cc34 <_strtol_l.isra.0+0xd8>
 100cc48:	1e6f      	subs	r7, r5, #1
 100cc4a:	4648      	mov	r0, r9
 100cc4c:	e7f0      	b.n	100cc30 <_strtol_l.isra.0+0xd4>
 100cc4e:	782c      	ldrb	r4, [r5, #0]
 100cc50:	f04f 0a01 	mov.w	sl, #1
 100cc54:	f10b 0502 	add.w	r5, fp, #2
 100cc58:	e79d      	b.n	100cb96 <_strtol_l.isra.0+0x3a>
 100cc5a:	782b      	ldrb	r3, [r5, #0]
 100cc5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100cc60:	2b58      	cmp	r3, #88	; 0x58
 100cc62:	d104      	bne.n	100cc6e <_strtol_l.isra.0+0x112>
 100cc64:	2610      	movs	r6, #16
 100cc66:	786c      	ldrb	r4, [r5, #1]
 100cc68:	46b3      	mov	fp, r6
 100cc6a:	3502      	adds	r5, #2
 100cc6c:	e79b      	b.n	100cba6 <_strtol_l.isra.0+0x4a>
 100cc6e:	2e00      	cmp	r6, #0
 100cc70:	d198      	bne.n	100cba4 <_strtol_l.isra.0+0x48>
 100cc72:	2608      	movs	r6, #8
 100cc74:	46b3      	mov	fp, r6
 100cc76:	e796      	b.n	100cba6 <_strtol_l.isra.0+0x4a>
 100cc78:	4681      	mov	r9, r0
 100cc7a:	e7e5      	b.n	100cc48 <_strtol_l.isra.0+0xec>

0100cc7c <_strtol_r>:
 100cc7c:	b530      	push	{r4, r5, lr}
 100cc7e:	f248 7458 	movw	r4, #34648	; 0x8758
 100cc82:	f2c0 1405 	movt	r4, #261	; 0x105
 100cc86:	b083      	sub	sp, #12
 100cc88:	f648 3588 	movw	r5, #35720	; 0x8b88
 100cc8c:	f2c0 1505 	movt	r5, #261	; 0x105
 100cc90:	6824      	ldr	r4, [r4, #0]
 100cc92:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100cc94:	2c00      	cmp	r4, #0
 100cc96:	bf08      	it	eq
 100cc98:	462c      	moveq	r4, r5
 100cc9a:	9400      	str	r4, [sp, #0]
 100cc9c:	f7ff ff5e 	bl	100cb5c <_strtol_l.isra.0>
 100cca0:	b003      	add	sp, #12
 100cca2:	bd30      	pop	{r4, r5, pc}

0100cca4 <strtol_l>:
 100cca4:	b510      	push	{r4, lr}
 100cca6:	f248 7458 	movw	r4, #34648	; 0x8758
 100ccaa:	b082      	sub	sp, #8
 100ccac:	f2c0 1405 	movt	r4, #261	; 0x105
 100ccb0:	9300      	str	r3, [sp, #0]
 100ccb2:	4613      	mov	r3, r2
 100ccb4:	460a      	mov	r2, r1
 100ccb6:	4601      	mov	r1, r0
 100ccb8:	6820      	ldr	r0, [r4, #0]
 100ccba:	f7ff ff4f 	bl	100cb5c <_strtol_l.isra.0>
 100ccbe:	b002      	add	sp, #8
 100ccc0:	bd10      	pop	{r4, pc}
 100ccc2:	bf00      	nop

0100ccc4 <strtol>:
 100ccc4:	f248 7358 	movw	r3, #34648	; 0x8758
 100ccc8:	f2c0 1305 	movt	r3, #261	; 0x105
 100cccc:	b570      	push	{r4, r5, r6, lr}
 100ccce:	b082      	sub	sp, #8
 100ccd0:	681e      	ldr	r6, [r3, #0]
 100ccd2:	f648 3588 	movw	r5, #35720	; 0x8b88
 100ccd6:	f2c0 1505 	movt	r5, #261	; 0x105
 100ccda:	4613      	mov	r3, r2
 100ccdc:	460a      	mov	r2, r1
 100ccde:	4601      	mov	r1, r0
 100cce0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 100cce2:	4630      	mov	r0, r6
 100cce4:	2c00      	cmp	r4, #0
 100cce6:	bf08      	it	eq
 100cce8:	462c      	moveq	r4, r5
 100ccea:	9400      	str	r4, [sp, #0]
 100ccec:	f7ff ff36 	bl	100cb5c <_strtol_l.isra.0>
 100ccf0:	b002      	add	sp, #8
 100ccf2:	bd70      	pop	{r4, r5, r6, pc}
 100ccf4:	0000      	movs	r0, r0
	...

0100ccf8 <_svfprintf_r>:
 100ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100ccfc:	460c      	mov	r4, r1
 100ccfe:	ed2d 8b0a 	vpush	{d8-d12}
 100cd02:	4615      	mov	r5, r2
 100cd04:	4682      	mov	sl, r0
 100cd06:	b0d5      	sub	sp, #340	; 0x154
 100cd08:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 100cd0c:	9108      	str	r1, [sp, #32]
 100cd0e:	9309      	str	r3, [sp, #36]	; 0x24
 100cd10:	f005 fade 	bl	10122d0 <_localeconv_r>
 100cd14:	6803      	ldr	r3, [r0, #0]
 100cd16:	4618      	mov	r0, r3
 100cd18:	9317      	str	r3, [sp, #92]	; 0x5c
 100cd1a:	f7ff fdf1 	bl	100c900 <strlen>
 100cd1e:	2208      	movs	r2, #8
 100cd20:	2100      	movs	r1, #0
 100cd22:	9016      	str	r0, [sp, #88]	; 0x58
 100cd24:	4658      	mov	r0, fp
 100cd26:	f7ff f9db 	bl	100c0e0 <memset>
 100cd2a:	89a3      	ldrh	r3, [r4, #12]
 100cd2c:	061a      	lsls	r2, r3, #24
 100cd2e:	d503      	bpl.n	100cd38 <_svfprintf_r+0x40>
 100cd30:	6923      	ldr	r3, [r4, #16]
 100cd32:	2b00      	cmp	r3, #0
 100cd34:	f000 87d7 	beq.w	100dce6 <_svfprintf_r+0xfee>
 100cd38:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 100cd3c:	f248 7858 	movw	r8, #34648	; 0x8758
 100cd40:	ed9f 8b75 	vldr	d8, [pc, #468]	; 100cf18 <_svfprintf_r+0x220>
 100cd44:	f2c0 1805 	movt	r8, #261	; 0x105
 100cd48:	462f      	mov	r7, r5
 100cd4a:	2300      	movs	r3, #0
 100cd4c:	f648 3188 	movw	r1, #35720	; 0x8b88
 100cd50:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cd54:	f2c0 1105 	movt	r1, #261	; 0x105
 100cd58:	9312      	str	r3, [sp, #72]	; 0x48
 100cd5a:	910f      	str	r1, [sp, #60]	; 0x3c
 100cd5c:	9315      	str	r3, [sp, #84]	; 0x54
 100cd5e:	9318      	str	r3, [sp, #96]	; 0x60
 100cd60:	9314      	str	r3, [sp, #80]	; 0x50
 100cd62:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 100cd66:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 100cd6a:	9305      	str	r3, [sp, #20]
 100cd6c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 100cd70:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 100cd74:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 100cd78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 100cd7a:	463c      	mov	r4, r7
 100cd7c:	f8d8 3000 	ldr.w	r3, [r8]
 100cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100cd82:	2b00      	cmp	r3, #0
 100cd84:	bf08      	it	eq
 100cd86:	4633      	moveq	r3, r6
 100cd88:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 100cd8c:	f7fe f8e2 	bl	100af54 <__locale_mb_cur_max>
 100cd90:	f8cd b000 	str.w	fp, [sp]
 100cd94:	4622      	mov	r2, r4
 100cd96:	a920      	add	r1, sp, #128	; 0x80
 100cd98:	4603      	mov	r3, r0
 100cd9a:	4650      	mov	r0, sl
 100cd9c:	47a8      	blx	r5
 100cd9e:	2800      	cmp	r0, #0
 100cda0:	4603      	mov	r3, r0
 100cda2:	f000 8083 	beq.w	100ceac <_svfprintf_r+0x1b4>
 100cda6:	db79      	blt.n	100ce9c <_svfprintf_r+0x1a4>
 100cda8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100cdaa:	2a25      	cmp	r2, #37	; 0x25
 100cdac:	d001      	beq.n	100cdb2 <_svfprintf_r+0xba>
 100cdae:	441c      	add	r4, r3
 100cdb0:	e7e4      	b.n	100cd7c <_svfprintf_r+0x84>
 100cdb2:	1be6      	subs	r6, r4, r7
 100cdb4:	4605      	mov	r5, r0
 100cdb6:	d17c      	bne.n	100ceb2 <_svfprintf_r+0x1ba>
 100cdb8:	2300      	movs	r3, #0
 100cdba:	1c67      	adds	r7, r4, #1
 100cdbc:	461e      	mov	r6, r3
 100cdbe:	9306      	str	r3, [sp, #24]
 100cdc0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100cdc4:	f04f 32ff 	mov.w	r2, #4294967295
 100cdc8:	7863      	ldrb	r3, [r4, #1]
 100cdca:	240a      	movs	r4, #10
 100cdcc:	9204      	str	r2, [sp, #16]
 100cdce:	3701      	adds	r7, #1
 100cdd0:	f1a3 0220 	sub.w	r2, r3, #32
 100cdd4:	2a5a      	cmp	r2, #90	; 0x5a
 100cdd6:	f200 83b7 	bhi.w	100d548 <_svfprintf_r+0x850>
 100cdda:	e8df f012 	tbh	[pc, r2, lsl #1]
 100cdde:	01f3      	.short	0x01f3
 100cde0:	03b503b5 	.word	0x03b503b5
 100cde4:	03b501ef 	.word	0x03b501ef
 100cde8:	03b503b5 	.word	0x03b503b5
 100cdec:	03b501d2 	.word	0x03b501d2
 100cdf0:	01c403b5 	.word	0x01c403b5
 100cdf4:	03b5037a 	.word	0x03b5037a
 100cdf8:	020f0229 	.word	0x020f0229
 100cdfc:	020b03b5 	.word	0x020b03b5
 100ce00:	01a201a2 	.word	0x01a201a2
 100ce04:	01a201a2 	.word	0x01a201a2
 100ce08:	01a201a2 	.word	0x01a201a2
 100ce0c:	01a201a2 	.word	0x01a201a2
 100ce10:	03b501a2 	.word	0x03b501a2
 100ce14:	03b503b5 	.word	0x03b503b5
 100ce18:	03b503b5 	.word	0x03b503b5
 100ce1c:	03b503b5 	.word	0x03b503b5
 100ce20:	03b5037f 	.word	0x03b5037f
 100ce24:	03100350 	.word	0x03100350
 100ce28:	037f037f 	.word	0x037f037f
 100ce2c:	03b5037f 	.word	0x03b5037f
 100ce30:	03b503b5 	.word	0x03b503b5
 100ce34:	02e603b5 	.word	0x02e603b5
 100ce38:	03b503b5 	.word	0x03b503b5
 100ce3c:	03b502da 	.word	0x03b502da
 100ce40:	03b503b5 	.word	0x03b503b5
 100ce44:	03b502aa 	.word	0x03b502aa
 100ce48:	03b5029b 	.word	0x03b5029b
 100ce4c:	026d03b5 	.word	0x026d03b5
 100ce50:	03b503b5 	.word	0x03b503b5
 100ce54:	03b503b5 	.word	0x03b503b5
 100ce58:	03b503b5 	.word	0x03b503b5
 100ce5c:	03b503b5 	.word	0x03b503b5
 100ce60:	03b5037f 	.word	0x03b5037f
 100ce64:	02410350 	.word	0x02410350
 100ce68:	037f037f 	.word	0x037f037f
 100ce6c:	0237037f 	.word	0x0237037f
 100ce70:	005b0241 	.word	0x005b0241
 100ce74:	022d03b5 	.word	0x022d03b5
 100ce78:	02fb03b5 	.word	0x02fb03b5
 100ce7c:	01af02ea 	.word	0x01af02ea
 100ce80:	03b5005b 	.word	0x03b5005b
 100ce84:	005d02aa 	.word	0x005d02aa
 100ce88:	03b501fd 	.word	0x03b501fd
 100ce8c:	00a103b5 	.word	0x00a103b5
 100ce90:	005d03b5 	.word	0x005d03b5
 100ce94:	f046 0620 	orr.w	r6, r6, #32
 100ce98:	783b      	ldrb	r3, [r7, #0]
 100ce9a:	e798      	b.n	100cdce <_svfprintf_r+0xd6>
 100ce9c:	2208      	movs	r2, #8
 100ce9e:	2100      	movs	r1, #0
 100cea0:	4658      	mov	r0, fp
 100cea2:	f7ff f91d 	bl	100c0e0 <memset>
 100cea6:	2301      	movs	r3, #1
 100cea8:	441c      	add	r4, r3
 100ceaa:	e767      	b.n	100cd7c <_svfprintf_r+0x84>
 100ceac:	1be6      	subs	r6, r4, r7
 100ceae:	4605      	mov	r5, r0
 100ceb0:	d012      	beq.n	100ced8 <_svfprintf_r+0x1e0>
 100ceb2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100ceb6:	e9c9 7600 	strd	r7, r6, [r9]
 100ceba:	3301      	adds	r3, #1
 100cebc:	4432      	add	r2, r6
 100cebe:	2b07      	cmp	r3, #7
 100cec0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100cec4:	bfd8      	it	le
 100cec6:	f109 0908 	addle.w	r9, r9, #8
 100ceca:	dc19      	bgt.n	100cf00 <_svfprintf_r+0x208>
 100cecc:	9b05      	ldr	r3, [sp, #20]
 100cece:	4433      	add	r3, r6
 100ced0:	9305      	str	r3, [sp, #20]
 100ced2:	2d00      	cmp	r5, #0
 100ced4:	f47f af70 	bne.w	100cdb8 <_svfprintf_r+0xc0>
 100ced8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 100ceda:	2b00      	cmp	r3, #0
 100cedc:	f041 826d 	bne.w	100e3ba <_svfprintf_r+0x16c2>
 100cee0:	9b08      	ldr	r3, [sp, #32]
 100cee2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 100cee6:	f013 0f40 	tst.w	r3, #64	; 0x40
 100ceea:	9b05      	ldr	r3, [sp, #20]
 100ceec:	bf18      	it	ne
 100ceee:	f04f 33ff 	movne.w	r3, #4294967295
 100cef2:	9305      	str	r3, [sp, #20]
 100cef4:	9805      	ldr	r0, [sp, #20]
 100cef6:	b055      	add	sp, #340	; 0x154
 100cef8:	ecbd 8b0a 	vpop	{d8-d12}
 100cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100cf00:	aa28      	add	r2, sp, #160	; 0xa0
 100cf02:	9908      	ldr	r1, [sp, #32]
 100cf04:	4650      	mov	r0, sl
 100cf06:	f006 fa4f 	bl	10133a8 <__ssprint_r>
 100cf0a:	2800      	cmp	r0, #0
 100cf0c:	d1e8      	bne.n	100cee0 <_svfprintf_r+0x1e8>
 100cf0e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100cf12:	e7db      	b.n	100cecc <_svfprintf_r+0x1d4>
 100cf14:	f3af 8000 	nop.w
	...
 100cf20:	06b0      	lsls	r0, r6, #26
 100cf22:	930e      	str	r3, [sp, #56]	; 0x38
 100cf24:	f248 23bc 	movw	r3, #33468	; 0x82bc
 100cf28:	f2c0 1305 	movt	r3, #261	; 0x105
 100cf2c:	9315      	str	r3, [sp, #84]	; 0x54
 100cf2e:	f140 81cc 	bpl.w	100d2ca <_svfprintf_r+0x5d2>
 100cf32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100cf34:	3507      	adds	r5, #7
 100cf36:	f025 0307 	bic.w	r3, r5, #7
 100cf3a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 100cf3e:	9309      	str	r3, [sp, #36]	; 0x24
 100cf40:	ea54 0305 	orrs.w	r3, r4, r5
 100cf44:	f006 0301 	and.w	r3, r6, #1
 100cf48:	bf08      	it	eq
 100cf4a:	2300      	moveq	r3, #0
 100cf4c:	2b00      	cmp	r3, #0
 100cf4e:	f040 81d8 	bne.w	100d302 <_svfprintf_r+0x60a>
 100cf52:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100cf56:	9303      	str	r3, [sp, #12]
 100cf58:	2302      	movs	r3, #2
 100cf5a:	9904      	ldr	r1, [sp, #16]
 100cf5c:	2200      	movs	r2, #0
 100cf5e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100cf62:	1c4a      	adds	r2, r1, #1
 100cf64:	f000 826c 	beq.w	100d440 <_svfprintf_r+0x748>
 100cf68:	ea54 0205 	orrs.w	r2, r4, r5
 100cf6c:	9a03      	ldr	r2, [sp, #12]
 100cf6e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 100cf72:	bf14      	ite	ne
 100cf74:	2201      	movne	r2, #1
 100cf76:	2200      	moveq	r2, #0
 100cf78:	2900      	cmp	r1, #0
 100cf7a:	bf18      	it	ne
 100cf7c:	2201      	movne	r2, #1
 100cf7e:	2a00      	cmp	r2, #0
 100cf80:	f040 873e 	bne.w	100de00 <_svfprintf_r+0x1108>
 100cf84:	2b00      	cmp	r3, #0
 100cf86:	f040 84da 	bne.w	100d93e <_svfprintf_r+0xc46>
 100cf8a:	9a03      	ldr	r2, [sp, #12]
 100cf8c:	9304      	str	r3, [sp, #16]
 100cf8e:	f012 0201 	ands.w	r2, r2, #1
 100cf92:	9207      	str	r2, [sp, #28]
 100cf94:	bf04      	itt	eq
 100cf96:	ab54      	addeq	r3, sp, #336	; 0x150
 100cf98:	930b      	streq	r3, [sp, #44]	; 0x2c
 100cf9a:	d005      	beq.n	100cfa8 <_svfprintf_r+0x2b0>
 100cf9c:	2330      	movs	r3, #48	; 0x30
 100cf9e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 100cfa2:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100cfa6:	930b      	str	r3, [sp, #44]	; 0x2c
 100cfa8:	2300      	movs	r3, #0
 100cfaa:	9a04      	ldr	r2, [sp, #16]
 100cfac:	930a      	str	r3, [sp, #40]	; 0x28
 100cfae:	9313      	str	r3, [sp, #76]	; 0x4c
 100cfb0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100cfb4:	9b07      	ldr	r3, [sp, #28]
 100cfb6:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100cfba:	4293      	cmp	r3, r2
 100cfbc:	bfb8      	it	lt
 100cfbe:	4613      	movlt	r3, r2
 100cfc0:	9303      	str	r3, [sp, #12]
 100cfc2:	b111      	cbz	r1, 100cfca <_svfprintf_r+0x2d2>
 100cfc4:	9b03      	ldr	r3, [sp, #12]
 100cfc6:	3301      	adds	r3, #1
 100cfc8:	9303      	str	r3, [sp, #12]
 100cfca:	f016 0302 	ands.w	r3, r6, #2
 100cfce:	930c      	str	r3, [sp, #48]	; 0x30
 100cfd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100cfd2:	bf1e      	ittt	ne
 100cfd4:	9b03      	ldrne	r3, [sp, #12]
 100cfd6:	3302      	addne	r3, #2
 100cfd8:	9303      	strne	r3, [sp, #12]
 100cfda:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 100cfde:	930d      	str	r3, [sp, #52]	; 0x34
 100cfe0:	d104      	bne.n	100cfec <_svfprintf_r+0x2f4>
 100cfe2:	9b06      	ldr	r3, [sp, #24]
 100cfe4:	9803      	ldr	r0, [sp, #12]
 100cfe6:	1a1c      	subs	r4, r3, r0
 100cfe8:	2c00      	cmp	r4, #0
 100cfea:	dc60      	bgt.n	100d0ae <_svfprintf_r+0x3b6>
 100cfec:	b189      	cbz	r1, 100d012 <_svfprintf_r+0x31a>
 100cfee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100cff0:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 100cff4:	3201      	adds	r2, #1
 100cff6:	f8c9 0000 	str.w	r0, [r9]
 100cffa:	3101      	adds	r1, #1
 100cffc:	2001      	movs	r0, #1
 100cffe:	2907      	cmp	r1, #7
 100d000:	f8c9 0004 	str.w	r0, [r9, #4]
 100d004:	922a      	str	r2, [sp, #168]	; 0xa8
 100d006:	bfd8      	it	le
 100d008:	f109 0908 	addle.w	r9, r9, #8
 100d00c:	9129      	str	r1, [sp, #164]	; 0xa4
 100d00e:	f300 843e 	bgt.w	100d88e <_svfprintf_r+0xb96>
 100d012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100d014:	b183      	cbz	r3, 100d038 <_svfprintf_r+0x340>
 100d016:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d018:	a91e      	add	r1, sp, #120	; 0x78
 100d01a:	3202      	adds	r2, #2
 100d01c:	f8c9 1000 	str.w	r1, [r9]
 100d020:	3301      	adds	r3, #1
 100d022:	2102      	movs	r1, #2
 100d024:	2b07      	cmp	r3, #7
 100d026:	f8c9 1004 	str.w	r1, [r9, #4]
 100d02a:	922a      	str	r2, [sp, #168]	; 0xa8
 100d02c:	bfd8      	it	le
 100d02e:	f109 0908 	addle.w	r9, r9, #8
 100d032:	9329      	str	r3, [sp, #164]	; 0xa4
 100d034:	f300 8437 	bgt.w	100d8a6 <_svfprintf_r+0xbae>
 100d038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100d03a:	2b80      	cmp	r3, #128	; 0x80
 100d03c:	f000 8309 	beq.w	100d652 <_svfprintf_r+0x95a>
 100d040:	9b04      	ldr	r3, [sp, #16]
 100d042:	9907      	ldr	r1, [sp, #28]
 100d044:	1a5c      	subs	r4, r3, r1
 100d046:	2c00      	cmp	r4, #0
 100d048:	f300 8350 	bgt.w	100d6ec <_svfprintf_r+0x9f4>
 100d04c:	05f5      	lsls	r5, r6, #23
 100d04e:	f100 82a1 	bmi.w	100d594 <_svfprintf_r+0x89c>
 100d052:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d054:	9907      	ldr	r1, [sp, #28]
 100d056:	3301      	adds	r3, #1
 100d058:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100d05a:	2b07      	cmp	r3, #7
 100d05c:	440a      	add	r2, r1
 100d05e:	f8c9 1004 	str.w	r1, [r9, #4]
 100d062:	f8c9 0000 	str.w	r0, [r9]
 100d066:	922a      	str	r2, [sp, #168]	; 0xa8
 100d068:	9329      	str	r3, [sp, #164]	; 0xa4
 100d06a:	f300 8404 	bgt.w	100d876 <_svfprintf_r+0xb7e>
 100d06e:	f109 0908 	add.w	r9, r9, #8
 100d072:	0771      	lsls	r1, r6, #29
 100d074:	d505      	bpl.n	100d082 <_svfprintf_r+0x38a>
 100d076:	9b06      	ldr	r3, [sp, #24]
 100d078:	9903      	ldr	r1, [sp, #12]
 100d07a:	1a5c      	subs	r4, r3, r1
 100d07c:	2c00      	cmp	r4, #0
 100d07e:	f300 841e 	bgt.w	100d8be <_svfprintf_r+0xbc6>
 100d082:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 100d086:	9803      	ldr	r0, [sp, #12]
 100d088:	4281      	cmp	r1, r0
 100d08a:	bfac      	ite	ge
 100d08c:	185b      	addge	r3, r3, r1
 100d08e:	181b      	addlt	r3, r3, r0
 100d090:	9305      	str	r3, [sp, #20]
 100d092:	2a00      	cmp	r2, #0
 100d094:	f040 838b 	bne.w	100d7ae <_svfprintf_r+0xab6>
 100d098:	2300      	movs	r3, #0
 100d09a:	9329      	str	r3, [sp, #164]	; 0xa4
 100d09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100d09e:	b11b      	cbz	r3, 100d0a8 <_svfprintf_r+0x3b0>
 100d0a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 100d0a2:	4650      	mov	r0, sl
 100d0a4:	f004 fdec 	bl	1011c80 <_free_r>
 100d0a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d0ac:	e664      	b.n	100cd78 <_svfprintf_r+0x80>
 100d0ae:	2c10      	cmp	r4, #16
 100d0b0:	f645 35fc 	movw	r5, #23548	; 0x5bfc
 100d0b4:	bfc8      	it	gt
 100d0b6:	961b      	strgt	r6, [sp, #108]	; 0x6c
 100d0b8:	f2c0 1505 	movt	r5, #261	; 0x105
 100d0bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100d0be:	bfc4      	itt	gt
 100d0c0:	2310      	movgt	r3, #16
 100d0c2:	9e08      	ldrgt	r6, [sp, #32]
 100d0c4:	dc03      	bgt.n	100d0ce <_svfprintf_r+0x3d6>
 100d0c6:	e01e      	b.n	100d106 <_svfprintf_r+0x40e>
 100d0c8:	3c10      	subs	r4, #16
 100d0ca:	2c10      	cmp	r4, #16
 100d0cc:	dd1a      	ble.n	100d104 <_svfprintf_r+0x40c>
 100d0ce:	3101      	adds	r1, #1
 100d0d0:	3210      	adds	r2, #16
 100d0d2:	2907      	cmp	r1, #7
 100d0d4:	e9c9 5300 	strd	r5, r3, [r9]
 100d0d8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d0dc:	f109 0908 	add.w	r9, r9, #8
 100d0e0:	ddf2      	ble.n	100d0c8 <_svfprintf_r+0x3d0>
 100d0e2:	aa28      	add	r2, sp, #160	; 0xa0
 100d0e4:	4631      	mov	r1, r6
 100d0e6:	4650      	mov	r0, sl
 100d0e8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d0ec:	f006 f95c 	bl	10133a8 <__ssprint_r>
 100d0f0:	2800      	cmp	r0, #0
 100d0f2:	f040 8364 	bne.w	100d7be <_svfprintf_r+0xac6>
 100d0f6:	3c10      	subs	r4, #16
 100d0f8:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d0fc:	2c10      	cmp	r4, #16
 100d0fe:	f04f 0310 	mov.w	r3, #16
 100d102:	dce4      	bgt.n	100d0ce <_svfprintf_r+0x3d6>
 100d104:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 100d106:	3101      	adds	r1, #1
 100d108:	4422      	add	r2, r4
 100d10a:	2907      	cmp	r1, #7
 100d10c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d110:	e9c9 5400 	strd	r5, r4, [r9]
 100d114:	f300 86f5 	bgt.w	100df02 <_svfprintf_r+0x120a>
 100d118:	f109 0908 	add.w	r9, r9, #8
 100d11c:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d120:	e764      	b.n	100cfec <_svfprintf_r+0x2f4>
 100d122:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100d126:	2100      	movs	r1, #0
 100d128:	f817 3b01 	ldrb.w	r3, [r7], #1
 100d12c:	fb04 2101 	mla	r1, r4, r1, r2
 100d130:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100d134:	2a09      	cmp	r2, #9
 100d136:	d9f7      	bls.n	100d128 <_svfprintf_r+0x430>
 100d138:	9106      	str	r1, [sp, #24]
 100d13a:	e649      	b.n	100cdd0 <_svfprintf_r+0xd8>
 100d13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d13e:	f046 0202 	orr.w	r2, r6, #2
 100d142:	f248 21bc 	movw	r1, #33468	; 0x82bc
 100d146:	9203      	str	r2, [sp, #12]
 100d148:	f2c0 1105 	movt	r1, #261	; 0x105
 100d14c:	f647 0230 	movw	r2, #30768	; 0x7830
 100d150:	f853 4b04 	ldr.w	r4, [r3], #4
 100d154:	2500      	movs	r5, #0
 100d156:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 100d15a:	2278      	movs	r2, #120	; 0x78
 100d15c:	9115      	str	r1, [sp, #84]	; 0x54
 100d15e:	9309      	str	r3, [sp, #36]	; 0x24
 100d160:	2302      	movs	r3, #2
 100d162:	920e      	str	r2, [sp, #56]	; 0x38
 100d164:	e6f9      	b.n	100cf5a <_svfprintf_r+0x262>
 100d166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d168:	783b      	ldrb	r3, [r7, #0]
 100d16a:	f852 1b04 	ldr.w	r1, [r2], #4
 100d16e:	2900      	cmp	r1, #0
 100d170:	9106      	str	r1, [sp, #24]
 100d172:	bfa8      	it	ge
 100d174:	9209      	strge	r2, [sp, #36]	; 0x24
 100d176:	f6bf ae2a 	bge.w	100cdce <_svfprintf_r+0xd6>
 100d17a:	4249      	negs	r1, r1
 100d17c:	9209      	str	r2, [sp, #36]	; 0x24
 100d17e:	9106      	str	r1, [sp, #24]
 100d180:	e057      	b.n	100d232 <_svfprintf_r+0x53a>
 100d182:	4650      	mov	r0, sl
 100d184:	f005 f8a4 	bl	10122d0 <_localeconv_r>
 100d188:	6843      	ldr	r3, [r0, #4]
 100d18a:	4618      	mov	r0, r3
 100d18c:	931a      	str	r3, [sp, #104]	; 0x68
 100d18e:	f7ff fbb7 	bl	100c900 <strlen>
 100d192:	4605      	mov	r5, r0
 100d194:	9019      	str	r0, [sp, #100]	; 0x64
 100d196:	4650      	mov	r0, sl
 100d198:	f005 f89a 	bl	10122d0 <_localeconv_r>
 100d19c:	6883      	ldr	r3, [r0, #8]
 100d19e:	2d00      	cmp	r5, #0
 100d1a0:	bf18      	it	ne
 100d1a2:	2b00      	cmpne	r3, #0
 100d1a4:	9314      	str	r3, [sp, #80]	; 0x50
 100d1a6:	f43f ae77 	beq.w	100ce98 <_svfprintf_r+0x1a0>
 100d1aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100d1ac:	781a      	ldrb	r2, [r3, #0]
 100d1ae:	783b      	ldrb	r3, [r7, #0]
 100d1b0:	2a00      	cmp	r2, #0
 100d1b2:	f43f ae0c 	beq.w	100cdce <_svfprintf_r+0xd6>
 100d1b6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 100d1ba:	e608      	b.n	100cdce <_svfprintf_r+0xd6>
 100d1bc:	f046 0601 	orr.w	r6, r6, #1
 100d1c0:	783b      	ldrb	r3, [r7, #0]
 100d1c2:	e604      	b.n	100cdce <_svfprintf_r+0xd6>
 100d1c4:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 100d1c8:	783b      	ldrb	r3, [r7, #0]
 100d1ca:	2a00      	cmp	r2, #0
 100d1cc:	f47f adff 	bne.w	100cdce <_svfprintf_r+0xd6>
 100d1d0:	2220      	movs	r2, #32
 100d1d2:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100d1d6:	e5fa      	b.n	100cdce <_svfprintf_r+0xd6>
 100d1d8:	06b0      	lsls	r0, r6, #26
 100d1da:	930e      	str	r3, [sp, #56]	; 0x38
 100d1dc:	f140 8531 	bpl.w	100dc42 <_svfprintf_r+0xf4a>
 100d1e0:	9603      	str	r6, [sp, #12]
 100d1e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100d1e4:	2301      	movs	r3, #1
 100d1e6:	3507      	adds	r5, #7
 100d1e8:	f025 0207 	bic.w	r2, r5, #7
 100d1ec:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100d1f0:	9209      	str	r2, [sp, #36]	; 0x24
 100d1f2:	e6b2      	b.n	100cf5a <_svfprintf_r+0x262>
 100d1f4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 100d1f8:	783b      	ldrb	r3, [r7, #0]
 100d1fa:	e5e8      	b.n	100cdce <_svfprintf_r+0xd6>
 100d1fc:	4639      	mov	r1, r7
 100d1fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 100d202:	2b2a      	cmp	r3, #42	; 0x2a
 100d204:	f001 82e5 	beq.w	100e7d2 <_svfprintf_r+0x1ada>
 100d208:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100d20c:	460f      	mov	r7, r1
 100d20e:	2a09      	cmp	r2, #9
 100d210:	bf84      	itt	hi
 100d212:	2200      	movhi	r2, #0
 100d214:	9204      	strhi	r2, [sp, #16]
 100d216:	f63f addb 	bhi.w	100cdd0 <_svfprintf_r+0xd8>
 100d21a:	2100      	movs	r1, #0
 100d21c:	f817 3b01 	ldrb.w	r3, [r7], #1
 100d220:	fb04 2101 	mla	r1, r4, r1, r2
 100d224:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100d228:	2a09      	cmp	r2, #9
 100d22a:	d9f7      	bls.n	100d21c <_svfprintf_r+0x524>
 100d22c:	9104      	str	r1, [sp, #16]
 100d22e:	e5cf      	b.n	100cdd0 <_svfprintf_r+0xd8>
 100d230:	783b      	ldrb	r3, [r7, #0]
 100d232:	f046 0604 	orr.w	r6, r6, #4
 100d236:	e5ca      	b.n	100cdce <_svfprintf_r+0xd6>
 100d238:	783b      	ldrb	r3, [r7, #0]
 100d23a:	2b6c      	cmp	r3, #108	; 0x6c
 100d23c:	bf09      	itett	eq
 100d23e:	f046 0620 	orreq.w	r6, r6, #32
 100d242:	f046 0610 	orrne.w	r6, r6, #16
 100d246:	787b      	ldrbeq	r3, [r7, #1]
 100d248:	3701      	addeq	r7, #1
 100d24a:	e5c0      	b.n	100cdce <_svfprintf_r+0xd6>
 100d24c:	783b      	ldrb	r3, [r7, #0]
 100d24e:	2b68      	cmp	r3, #104	; 0x68
 100d250:	bf09      	itett	eq
 100d252:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 100d256:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 100d25a:	787b      	ldrbeq	r3, [r7, #1]
 100d25c:	3701      	addeq	r7, #1
 100d25e:	e5b6      	b.n	100cdce <_svfprintf_r+0xd6>
 100d260:	06b5      	lsls	r5, r6, #26
 100d262:	930e      	str	r3, [sp, #56]	; 0x38
 100d264:	f140 84d5 	bpl.w	100dc12 <_svfprintf_r+0xf1a>
 100d268:	9603      	str	r6, [sp, #12]
 100d26a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100d26c:	3507      	adds	r5, #7
 100d26e:	f025 0307 	bic.w	r3, r5, #7
 100d272:	4619      	mov	r1, r3
 100d274:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 100d278:	4614      	mov	r4, r2
 100d27a:	461d      	mov	r5, r3
 100d27c:	9109      	str	r1, [sp, #36]	; 0x24
 100d27e:	2a00      	cmp	r2, #0
 100d280:	f173 0300 	sbcs.w	r3, r3, #0
 100d284:	f2c0 80cf 	blt.w	100d426 <_svfprintf_r+0x72e>
 100d288:	9b04      	ldr	r3, [sp, #16]
 100d28a:	3301      	adds	r3, #1
 100d28c:	f000 8173 	beq.w	100d576 <_svfprintf_r+0x87e>
 100d290:	ea54 0305 	orrs.w	r3, r4, r5
 100d294:	9a04      	ldr	r2, [sp, #16]
 100d296:	9b03      	ldr	r3, [sp, #12]
 100d298:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 100d29c:	bf14      	ite	ne
 100d29e:	2301      	movne	r3, #1
 100d2a0:	2300      	moveq	r3, #0
 100d2a2:	2a00      	cmp	r2, #0
 100d2a4:	bf18      	it	ne
 100d2a6:	2301      	movne	r3, #1
 100d2a8:	2b00      	cmp	r3, #0
 100d2aa:	f040 8163 	bne.w	100d574 <_svfprintf_r+0x87c>
 100d2ae:	aa54      	add	r2, sp, #336	; 0x150
 100d2b0:	9304      	str	r3, [sp, #16]
 100d2b2:	920b      	str	r2, [sp, #44]	; 0x2c
 100d2b4:	9307      	str	r3, [sp, #28]
 100d2b6:	e677      	b.n	100cfa8 <_svfprintf_r+0x2b0>
 100d2b8:	06b0      	lsls	r0, r6, #26
 100d2ba:	930e      	str	r3, [sp, #56]	; 0x38
 100d2bc:	f248 036c 	movw	r3, #32876	; 0x806c
 100d2c0:	f2c0 1305 	movt	r3, #261	; 0x105
 100d2c4:	9315      	str	r3, [sp, #84]	; 0x54
 100d2c6:	f53f ae34 	bmi.w	100cf32 <_svfprintf_r+0x23a>
 100d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d2cc:	06f1      	lsls	r1, r6, #27
 100d2ce:	f853 4b04 	ldr.w	r4, [r3], #4
 100d2d2:	9309      	str	r3, [sp, #36]	; 0x24
 100d2d4:	d40b      	bmi.n	100d2ee <_svfprintf_r+0x5f6>
 100d2d6:	0672      	lsls	r2, r6, #25
 100d2d8:	bf44      	itt	mi
 100d2da:	b2a4      	uxthmi	r4, r4
 100d2dc:	2500      	movmi	r5, #0
 100d2de:	f53f ae2f 	bmi.w	100cf40 <_svfprintf_r+0x248>
 100d2e2:	05b3      	lsls	r3, r6, #22
 100d2e4:	bf44      	itt	mi
 100d2e6:	b2e4      	uxtbmi	r4, r4
 100d2e8:	2500      	movmi	r5, #0
 100d2ea:	f53f ae29 	bmi.w	100cf40 <_svfprintf_r+0x248>
 100d2ee:	2500      	movs	r5, #0
 100d2f0:	ea54 0305 	orrs.w	r3, r4, r5
 100d2f4:	f006 0301 	and.w	r3, r6, #1
 100d2f8:	bf08      	it	eq
 100d2fa:	2300      	moveq	r3, #0
 100d2fc:	2b00      	cmp	r3, #0
 100d2fe:	f43f ae28 	beq.w	100cf52 <_svfprintf_r+0x25a>
 100d302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100d304:	f046 0602 	orr.w	r6, r6, #2
 100d308:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100d30c:	2330      	movs	r3, #48	; 0x30
 100d30e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 100d312:	e61e      	b.n	100cf52 <_svfprintf_r+0x25a>
 100d314:	06b4      	lsls	r4, r6, #26
 100d316:	930e      	str	r3, [sp, #56]	; 0x38
 100d318:	f046 0310 	orr.w	r3, r6, #16
 100d31c:	9303      	str	r3, [sp, #12]
 100d31e:	f53f af60 	bmi.w	100d1e2 <_svfprintf_r+0x4ea>
 100d322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d324:	1d1a      	adds	r2, r3, #4
 100d326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d328:	2500      	movs	r5, #0
 100d32a:	9209      	str	r2, [sp, #36]	; 0x24
 100d32c:	681c      	ldr	r4, [r3, #0]
 100d32e:	2301      	movs	r3, #1
 100d330:	e613      	b.n	100cf5a <_svfprintf_r+0x262>
 100d332:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100d334:	930e      	str	r3, [sp, #56]	; 0x38
 100d336:	2300      	movs	r3, #0
 100d338:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100d33c:	f855 2b04 	ldr.w	r2, [r5], #4
 100d340:	920b      	str	r2, [sp, #44]	; 0x2c
 100d342:	2a00      	cmp	r2, #0
 100d344:	f000 84bb 	beq.w	100dcbe <_svfprintf_r+0xfc6>
 100d348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100d34a:	2b53      	cmp	r3, #83	; 0x53
 100d34c:	f000 8600 	beq.w	100df50 <_svfprintf_r+0x1258>
 100d350:	f016 0310 	ands.w	r3, r6, #16
 100d354:	9310      	str	r3, [sp, #64]	; 0x40
 100d356:	f040 85fb 	bne.w	100df50 <_svfprintf_r+0x1258>
 100d35a:	9a04      	ldr	r2, [sp, #16]
 100d35c:	1c53      	adds	r3, r2, #1
 100d35e:	f001 801b 	beq.w	100e398 <_svfprintf_r+0x16a0>
 100d362:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d364:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100d366:	f005 f853 	bl	1012410 <memchr>
 100d36a:	900a      	str	r0, [sp, #40]	; 0x28
 100d36c:	2800      	cmp	r0, #0
 100d36e:	f001 81dc 	beq.w	100e72a <_svfprintf_r+0x1a32>
 100d372:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 100d376:	9509      	str	r5, [sp, #36]	; 0x24
 100d378:	1a9a      	subs	r2, r3, r2
 100d37a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100d37c:	9207      	str	r2, [sp, #28]
 100d37e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100d382:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 100d386:	9304      	str	r3, [sp, #16]
 100d388:	9313      	str	r3, [sp, #76]	; 0x4c
 100d38a:	9203      	str	r2, [sp, #12]
 100d38c:	9311      	str	r3, [sp, #68]	; 0x44
 100d38e:	930a      	str	r3, [sp, #40]	; 0x28
 100d390:	e617      	b.n	100cfc2 <_svfprintf_r+0x2ca>
 100d392:	06b4      	lsls	r4, r6, #26
 100d394:	930e      	str	r3, [sp, #56]	; 0x38
 100d396:	f046 0310 	orr.w	r3, r6, #16
 100d39a:	d40f      	bmi.n	100d3bc <_svfprintf_r+0x6c4>
 100d39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d39e:	3204      	adds	r2, #4
 100d3a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 100d3a2:	2500      	movs	r5, #0
 100d3a4:	9209      	str	r2, [sp, #36]	; 0x24
 100d3a6:	680c      	ldr	r4, [r1, #0]
 100d3a8:	e00f      	b.n	100d3ca <_svfprintf_r+0x6d2>
 100d3aa:	f046 0608 	orr.w	r6, r6, #8
 100d3ae:	783b      	ldrb	r3, [r7, #0]
 100d3b0:	e50d      	b.n	100cdce <_svfprintf_r+0xd6>
 100d3b2:	06b0      	lsls	r0, r6, #26
 100d3b4:	930e      	str	r3, [sp, #56]	; 0x38
 100d3b6:	f140 845e 	bpl.w	100dc76 <_svfprintf_r+0xf7e>
 100d3ba:	4633      	mov	r3, r6
 100d3bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100d3be:	3507      	adds	r5, #7
 100d3c0:	f025 0207 	bic.w	r2, r5, #7
 100d3c4:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100d3c8:	9209      	str	r2, [sp, #36]	; 0x24
 100d3ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 100d3ce:	9303      	str	r3, [sp, #12]
 100d3d0:	2300      	movs	r3, #0
 100d3d2:	e5c2      	b.n	100cf5a <_svfprintf_r+0x262>
 100d3d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d3d6:	06b0      	lsls	r0, r6, #26
 100d3d8:	f102 0304 	add.w	r3, r2, #4
 100d3dc:	f100 8441 	bmi.w	100dc62 <_svfprintf_r+0xf6a>
 100d3e0:	06f1      	lsls	r1, r6, #27
 100d3e2:	f100 8608 	bmi.w	100dff6 <_svfprintf_r+0x12fe>
 100d3e6:	0672      	lsls	r2, r6, #25
 100d3e8:	f100 87c4 	bmi.w	100e374 <_svfprintf_r+0x167c>
 100d3ec:	05b5      	lsls	r5, r6, #22
 100d3ee:	f140 8602 	bpl.w	100dff6 <_svfprintf_r+0x12fe>
 100d3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d3f4:	9309      	str	r3, [sp, #36]	; 0x24
 100d3f6:	9b05      	ldr	r3, [sp, #20]
 100d3f8:	6812      	ldr	r2, [r2, #0]
 100d3fa:	7013      	strb	r3, [r2, #0]
 100d3fc:	e4bc      	b.n	100cd78 <_svfprintf_r+0x80>
 100d3fe:	930e      	str	r3, [sp, #56]	; 0x38
 100d400:	f046 0310 	orr.w	r3, r6, #16
 100d404:	06b6      	lsls	r6, r6, #26
 100d406:	9303      	str	r3, [sp, #12]
 100d408:	f53f af2f 	bmi.w	100d26a <_svfprintf_r+0x572>
 100d40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d40e:	1d1a      	adds	r2, r3, #4
 100d410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d412:	9209      	str	r2, [sp, #36]	; 0x24
 100d414:	681c      	ldr	r4, [r3, #0]
 100d416:	17e5      	asrs	r5, r4, #31
 100d418:	4622      	mov	r2, r4
 100d41a:	2a00      	cmp	r2, #0
 100d41c:	462b      	mov	r3, r5
 100d41e:	f173 0300 	sbcs.w	r3, r3, #0
 100d422:	f6bf af31 	bge.w	100d288 <_svfprintf_r+0x590>
 100d426:	4264      	negs	r4, r4
 100d428:	9904      	ldr	r1, [sp, #16]
 100d42a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 100d42e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100d432:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 100d436:	1c4a      	adds	r2, r1, #1
 100d438:	f04f 0301 	mov.w	r3, #1
 100d43c:	f47f ad94 	bne.w	100cf68 <_svfprintf_r+0x270>
 100d440:	2b01      	cmp	r3, #1
 100d442:	f000 8098 	beq.w	100d576 <_svfprintf_r+0x87e>
 100d446:	2b02      	cmp	r3, #2
 100d448:	bf18      	it	ne
 100d44a:	a954      	addne	r1, sp, #336	; 0x150
 100d44c:	f040 818f 	bne.w	100d76e <_svfprintf_r+0xa76>
 100d450:	ab54      	add	r3, sp, #336	; 0x150
 100d452:	9e15      	ldr	r6, [sp, #84]	; 0x54
 100d454:	461a      	mov	r2, r3
 100d456:	f004 010f 	and.w	r1, r4, #15
 100d45a:	0923      	lsrs	r3, r4, #4
 100d45c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 100d460:	0928      	lsrs	r0, r5, #4
 100d462:	5c71      	ldrb	r1, [r6, r1]
 100d464:	461c      	mov	r4, r3
 100d466:	4605      	mov	r5, r0
 100d468:	ea54 0305 	orrs.w	r3, r4, r5
 100d46c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 100d470:	d1f1      	bne.n	100d456 <_svfprintf_r+0x75e>
 100d472:	ab54      	add	r3, sp, #336	; 0x150
 100d474:	920b      	str	r2, [sp, #44]	; 0x2c
 100d476:	1a9b      	subs	r3, r3, r2
 100d478:	9e03      	ldr	r6, [sp, #12]
 100d47a:	9307      	str	r3, [sp, #28]
 100d47c:	e594      	b.n	100cfa8 <_svfprintf_r+0x2b0>
 100d47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d480:	2b43      	cmp	r3, #67	; 0x43
 100d482:	930e      	str	r3, [sp, #56]	; 0x38
 100d484:	f102 0504 	add.w	r5, r2, #4
 100d488:	d002      	beq.n	100d490 <_svfprintf_r+0x798>
 100d48a:	06f3      	lsls	r3, r6, #27
 100d48c:	f140 8402 	bpl.w	100dc94 <_svfprintf_r+0xf9c>
 100d490:	2208      	movs	r2, #8
 100d492:	2100      	movs	r1, #0
 100d494:	a826      	add	r0, sp, #152	; 0x98
 100d496:	ac3b      	add	r4, sp, #236	; 0xec
 100d498:	f7fe fe22 	bl	100c0e0 <memset>
 100d49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100d49e:	ab26      	add	r3, sp, #152	; 0x98
 100d4a0:	4621      	mov	r1, r4
 100d4a2:	4650      	mov	r0, sl
 100d4a4:	6812      	ldr	r2, [r2, #0]
 100d4a6:	f003 f829 	bl	10104fc <_wcrtomb_r>
 100d4aa:	1c43      	adds	r3, r0, #1
 100d4ac:	9007      	str	r0, [sp, #28]
 100d4ae:	f001 80eb 	beq.w	100e688 <_svfprintf_r+0x1990>
 100d4b2:	9b07      	ldr	r3, [sp, #28]
 100d4b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100d4b8:	9303      	str	r3, [sp, #12]
 100d4ba:	2300      	movs	r3, #0
 100d4bc:	9509      	str	r5, [sp, #36]	; 0x24
 100d4be:	4619      	mov	r1, r3
 100d4c0:	940b      	str	r4, [sp, #44]	; 0x2c
 100d4c2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100d4c6:	930a      	str	r3, [sp, #40]	; 0x28
 100d4c8:	9304      	str	r3, [sp, #16]
 100d4ca:	9313      	str	r3, [sp, #76]	; 0x4c
 100d4cc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100d4d0:	e57b      	b.n	100cfca <_svfprintf_r+0x2d2>
 100d4d2:	232b      	movs	r3, #43	; 0x2b
 100d4d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100d4d8:	783b      	ldrb	r3, [r7, #0]
 100d4da:	e478      	b.n	100cdce <_svfprintf_r+0xd6>
 100d4dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100d4de:	930e      	str	r3, [sp, #56]	; 0x38
 100d4e0:	3507      	adds	r5, #7
 100d4e2:	ed9f 7bbd 	vldr	d7, [pc, #756]	; 100d7d8 <_svfprintf_r+0xae0>
 100d4e6:	f025 0307 	bic.w	r3, r5, #7
 100d4ea:	ecb3 8b02 	vldmia	r3!, {d8}
 100d4ee:	eeb0 6bc8 	vabs.f64	d6, d8
 100d4f2:	9309      	str	r3, [sp, #36]	; 0x24
 100d4f4:	eeb4 6b47 	vcmp.f64	d6, d7
 100d4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d4fc:	f340 8309 	ble.w	100db12 <_svfprintf_r+0xe1a>
 100d500:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 100d504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d508:	bf58      	it	pl
 100d50a:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 100d50e:	d502      	bpl.n	100d516 <_svfprintf_r+0x81e>
 100d510:	212d      	movs	r1, #45	; 0x2d
 100d512:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100d516:	f248 23ac 	movw	r3, #33452	; 0x82ac
 100d51a:	f248 24b0 	movw	r4, #33456	; 0x82b0
 100d51e:	f2c0 1305 	movt	r3, #261	; 0x105
 100d522:	f2c0 1405 	movt	r4, #261	; 0x105
 100d526:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100d528:	2200      	movs	r2, #0
 100d52a:	2003      	movs	r0, #3
 100d52c:	920a      	str	r2, [sp, #40]	; 0x28
 100d52e:	2d47      	cmp	r5, #71	; 0x47
 100d530:	bfc8      	it	gt
 100d532:	4623      	movgt	r3, r4
 100d534:	9003      	str	r0, [sp, #12]
 100d536:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 100d53a:	930b      	str	r3, [sp, #44]	; 0x2c
 100d53c:	9007      	str	r0, [sp, #28]
 100d53e:	9204      	str	r2, [sp, #16]
 100d540:	9213      	str	r2, [sp, #76]	; 0x4c
 100d542:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100d546:	e53c      	b.n	100cfc2 <_svfprintf_r+0x2ca>
 100d548:	461a      	mov	r2, r3
 100d54a:	930e      	str	r3, [sp, #56]	; 0x38
 100d54c:	2b00      	cmp	r3, #0
 100d54e:	f43f acc3 	beq.w	100ced8 <_svfprintf_r+0x1e0>
 100d552:	2300      	movs	r3, #0
 100d554:	2001      	movs	r0, #1
 100d556:	4619      	mov	r1, r3
 100d558:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100d55c:	930a      	str	r3, [sp, #40]	; 0x28
 100d55e:	9304      	str	r3, [sp, #16]
 100d560:	9313      	str	r3, [sp, #76]	; 0x4c
 100d562:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100d566:	ab3b      	add	r3, sp, #236	; 0xec
 100d568:	9003      	str	r0, [sp, #12]
 100d56a:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 100d56e:	9007      	str	r0, [sp, #28]
 100d570:	930b      	str	r3, [sp, #44]	; 0x2c
 100d572:	e52a      	b.n	100cfca <_svfprintf_r+0x2d2>
 100d574:	9603      	str	r6, [sp, #12]
 100d576:	2d00      	cmp	r5, #0
 100d578:	bf08      	it	eq
 100d57a:	2c0a      	cmpeq	r4, #10
 100d57c:	f080 8544 	bcs.w	100e008 <_svfprintf_r+0x1310>
 100d580:	2301      	movs	r3, #1
 100d582:	3430      	adds	r4, #48	; 0x30
 100d584:	9307      	str	r3, [sp, #28]
 100d586:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100d58a:	9e03      	ldr	r6, [sp, #12]
 100d58c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 100d590:	930b      	str	r3, [sp, #44]	; 0x2c
 100d592:	e509      	b.n	100cfa8 <_svfprintf_r+0x2b0>
 100d594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100d596:	2b65      	cmp	r3, #101	; 0x65
 100d598:	f340 8124 	ble.w	100d7e4 <_svfprintf_r+0xaec>
 100d59c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100d5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d5a4:	f040 81d1 	bne.w	100d94a <_svfprintf_r+0xc52>
 100d5a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d5aa:	3201      	adds	r2, #1
 100d5ac:	2101      	movs	r1, #1
 100d5ae:	922a      	str	r2, [sp, #168]	; 0xa8
 100d5b0:	3301      	adds	r3, #1
 100d5b2:	f248 22d8 	movw	r2, #33496	; 0x82d8
 100d5b6:	2b07      	cmp	r3, #7
 100d5b8:	f2c0 1205 	movt	r2, #261	; 0x105
 100d5bc:	9329      	str	r3, [sp, #164]	; 0xa4
 100d5be:	e9c9 2100 	strd	r2, r1, [r9]
 100d5c2:	bfd8      	it	le
 100d5c4:	f109 0908 	addle.w	r9, r9, #8
 100d5c8:	f300 84b6 	bgt.w	100df38 <_svfprintf_r+0x1240>
 100d5cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100d5ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100d5d0:	4293      	cmp	r3, r2
 100d5d2:	f280 8298 	bge.w	100db06 <_svfprintf_r+0xe0e>
 100d5d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 100d5d8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100d5dc:	f8c9 1000 	str.w	r1, [r9]
 100d5e0:	3301      	adds	r3, #1
 100d5e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 100d5e4:	2b07      	cmp	r3, #7
 100d5e6:	440a      	add	r2, r1
 100d5e8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d5ec:	f8c9 1004 	str.w	r1, [r9, #4]
 100d5f0:	bfd8      	it	le
 100d5f2:	f109 0908 	addle.w	r9, r9, #8
 100d5f6:	f300 8356 	bgt.w	100dca6 <_svfprintf_r+0xfae>
 100d5fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100d5fc:	1e5c      	subs	r4, r3, #1
 100d5fe:	2c00      	cmp	r4, #0
 100d600:	f77f ad37 	ble.w	100d072 <_svfprintf_r+0x37a>
 100d604:	2c10      	cmp	r4, #16
 100d606:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d608:	f340 84d0 	ble.w	100dfac <_svfprintf_r+0x12b4>
 100d60c:	9604      	str	r6, [sp, #16]
 100d60e:	2510      	movs	r5, #16
 100d610:	4626      	mov	r6, r4
 100d612:	4619      	mov	r1, r3
 100d614:	9c08      	ldr	r4, [sp, #32]
 100d616:	e003      	b.n	100d620 <_svfprintf_r+0x928>
 100d618:	3e10      	subs	r6, #16
 100d61a:	2e10      	cmp	r6, #16
 100d61c:	f340 84c3 	ble.w	100dfa6 <_svfprintf_r+0x12ae>
 100d620:	3101      	adds	r1, #1
 100d622:	4b6f      	ldr	r3, [pc, #444]	; (100d7e0 <_svfprintf_r+0xae8>)
 100d624:	2907      	cmp	r1, #7
 100d626:	f102 0210 	add.w	r2, r2, #16
 100d62a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d62e:	e9c9 3500 	strd	r3, r5, [r9]
 100d632:	f109 0908 	add.w	r9, r9, #8
 100d636:	ddef      	ble.n	100d618 <_svfprintf_r+0x920>
 100d638:	aa28      	add	r2, sp, #160	; 0xa0
 100d63a:	4621      	mov	r1, r4
 100d63c:	4650      	mov	r0, sl
 100d63e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d642:	f005 feb1 	bl	10133a8 <__ssprint_r>
 100d646:	2800      	cmp	r0, #0
 100d648:	f040 80b9 	bne.w	100d7be <_svfprintf_r+0xac6>
 100d64c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d650:	e7e2      	b.n	100d618 <_svfprintf_r+0x920>
 100d652:	9b06      	ldr	r3, [sp, #24]
 100d654:	9903      	ldr	r1, [sp, #12]
 100d656:	1a5c      	subs	r4, r3, r1
 100d658:	2c00      	cmp	r4, #0
 100d65a:	f77f acf1 	ble.w	100d040 <_svfprintf_r+0x348>
 100d65e:	2c10      	cmp	r4, #16
 100d660:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d662:	dd26      	ble.n	100d6b2 <_svfprintf_r+0x9ba>
 100d664:	960c      	str	r6, [sp, #48]	; 0x30
 100d666:	2510      	movs	r5, #16
 100d668:	4626      	mov	r6, r4
 100d66a:	4619      	mov	r1, r3
 100d66c:	9c08      	ldr	r4, [sp, #32]
 100d66e:	e002      	b.n	100d676 <_svfprintf_r+0x97e>
 100d670:	3e10      	subs	r6, #16
 100d672:	2e10      	cmp	r6, #16
 100d674:	dd1a      	ble.n	100d6ac <_svfprintf_r+0x9b4>
 100d676:	3101      	adds	r1, #1
 100d678:	4b59      	ldr	r3, [pc, #356]	; (100d7e0 <_svfprintf_r+0xae8>)
 100d67a:	2907      	cmp	r1, #7
 100d67c:	f102 0210 	add.w	r2, r2, #16
 100d680:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d684:	e9c9 3500 	strd	r3, r5, [r9]
 100d688:	f109 0908 	add.w	r9, r9, #8
 100d68c:	ddf0      	ble.n	100d670 <_svfprintf_r+0x978>
 100d68e:	aa28      	add	r2, sp, #160	; 0xa0
 100d690:	4621      	mov	r1, r4
 100d692:	4650      	mov	r0, sl
 100d694:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d698:	f005 fe86 	bl	10133a8 <__ssprint_r>
 100d69c:	2800      	cmp	r0, #0
 100d69e:	f040 808e 	bne.w	100d7be <_svfprintf_r+0xac6>
 100d6a2:	3e10      	subs	r6, #16
 100d6a4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d6a8:	2e10      	cmp	r6, #16
 100d6aa:	dce4      	bgt.n	100d676 <_svfprintf_r+0x97e>
 100d6ac:	4634      	mov	r4, r6
 100d6ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 100d6b0:	460b      	mov	r3, r1
 100d6b2:	3301      	adds	r3, #1
 100d6b4:	494a      	ldr	r1, [pc, #296]	; (100d7e0 <_svfprintf_r+0xae8>)
 100d6b6:	2b07      	cmp	r3, #7
 100d6b8:	4422      	add	r2, r4
 100d6ba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d6be:	e9c9 1400 	strd	r1, r4, [r9]
 100d6c2:	bfd8      	it	le
 100d6c4:	f109 0908 	addle.w	r9, r9, #8
 100d6c8:	f77f acba 	ble.w	100d040 <_svfprintf_r+0x348>
 100d6cc:	aa28      	add	r2, sp, #160	; 0xa0
 100d6ce:	9908      	ldr	r1, [sp, #32]
 100d6d0:	4650      	mov	r0, sl
 100d6d2:	f005 fe69 	bl	10133a8 <__ssprint_r>
 100d6d6:	2800      	cmp	r0, #0
 100d6d8:	d171      	bne.n	100d7be <_svfprintf_r+0xac6>
 100d6da:	9b04      	ldr	r3, [sp, #16]
 100d6dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d6e0:	9907      	ldr	r1, [sp, #28]
 100d6e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d6e4:	1a5c      	subs	r4, r3, r1
 100d6e6:	2c00      	cmp	r4, #0
 100d6e8:	f77f acb0 	ble.w	100d04c <_svfprintf_r+0x354>
 100d6ec:	2c10      	cmp	r4, #16
 100d6ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d6f0:	dd25      	ble.n	100d73e <_svfprintf_r+0xa46>
 100d6f2:	9604      	str	r6, [sp, #16]
 100d6f4:	2510      	movs	r5, #16
 100d6f6:	4626      	mov	r6, r4
 100d6f8:	4619      	mov	r1, r3
 100d6fa:	9c08      	ldr	r4, [sp, #32]
 100d6fc:	e002      	b.n	100d704 <_svfprintf_r+0xa0c>
 100d6fe:	3e10      	subs	r6, #16
 100d700:	2e10      	cmp	r6, #16
 100d702:	dd19      	ble.n	100d738 <_svfprintf_r+0xa40>
 100d704:	3101      	adds	r1, #1
 100d706:	4b36      	ldr	r3, [pc, #216]	; (100d7e0 <_svfprintf_r+0xae8>)
 100d708:	2907      	cmp	r1, #7
 100d70a:	f102 0210 	add.w	r2, r2, #16
 100d70e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d712:	e9c9 3500 	strd	r3, r5, [r9]
 100d716:	f109 0908 	add.w	r9, r9, #8
 100d71a:	ddf0      	ble.n	100d6fe <_svfprintf_r+0xa06>
 100d71c:	aa28      	add	r2, sp, #160	; 0xa0
 100d71e:	4621      	mov	r1, r4
 100d720:	4650      	mov	r0, sl
 100d722:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d726:	f005 fe3f 	bl	10133a8 <__ssprint_r>
 100d72a:	2800      	cmp	r0, #0
 100d72c:	d147      	bne.n	100d7be <_svfprintf_r+0xac6>
 100d72e:	3e10      	subs	r6, #16
 100d730:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d734:	2e10      	cmp	r6, #16
 100d736:	dce5      	bgt.n	100d704 <_svfprintf_r+0xa0c>
 100d738:	4634      	mov	r4, r6
 100d73a:	9e04      	ldr	r6, [sp, #16]
 100d73c:	460b      	mov	r3, r1
 100d73e:	3301      	adds	r3, #1
 100d740:	4927      	ldr	r1, [pc, #156]	; (100d7e0 <_svfprintf_r+0xae8>)
 100d742:	2b07      	cmp	r3, #7
 100d744:	4422      	add	r2, r4
 100d746:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d74a:	e9c9 1400 	strd	r1, r4, [r9]
 100d74e:	bfd8      	it	le
 100d750:	f109 0908 	addle.w	r9, r9, #8
 100d754:	f77f ac7a 	ble.w	100d04c <_svfprintf_r+0x354>
 100d758:	aa28      	add	r2, sp, #160	; 0xa0
 100d75a:	9908      	ldr	r1, [sp, #32]
 100d75c:	4650      	mov	r0, sl
 100d75e:	f005 fe23 	bl	10133a8 <__ssprint_r>
 100d762:	bb60      	cbnz	r0, 100d7be <_svfprintf_r+0xac6>
 100d764:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d766:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d76a:	e46f      	b.n	100d04c <_svfprintf_r+0x354>
 100d76c:	4611      	mov	r1, r2
 100d76e:	08e2      	lsrs	r2, r4, #3
 100d770:	08e8      	lsrs	r0, r5, #3
 100d772:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 100d776:	f004 0307 	and.w	r3, r4, #7
 100d77a:	4605      	mov	r5, r0
 100d77c:	3330      	adds	r3, #48	; 0x30
 100d77e:	4614      	mov	r4, r2
 100d780:	ea54 0005 	orrs.w	r0, r4, r5
 100d784:	f801 3c01 	strb.w	r3, [r1, #-1]
 100d788:	f101 32ff 	add.w	r2, r1, #4294967295
 100d78c:	d1ee      	bne.n	100d76c <_svfprintf_r+0xa74>
 100d78e:	9e03      	ldr	r6, [sp, #12]
 100d790:	920b      	str	r2, [sp, #44]	; 0x2c
 100d792:	4630      	mov	r0, r6
 100d794:	2b30      	cmp	r3, #48	; 0x30
 100d796:	bf0c      	ite	eq
 100d798:	2000      	moveq	r0, #0
 100d79a:	f000 0001 	andne.w	r0, r0, #1
 100d79e:	2800      	cmp	r0, #0
 100d7a0:	f040 840f 	bne.w	100dfc2 <_svfprintf_r+0x12ca>
 100d7a4:	ab54      	add	r3, sp, #336	; 0x150
 100d7a6:	1a9b      	subs	r3, r3, r2
 100d7a8:	9307      	str	r3, [sp, #28]
 100d7aa:	f7ff bbfd 	b.w	100cfa8 <_svfprintf_r+0x2b0>
 100d7ae:	aa28      	add	r2, sp, #160	; 0xa0
 100d7b0:	9908      	ldr	r1, [sp, #32]
 100d7b2:	4650      	mov	r0, sl
 100d7b4:	f005 fdf8 	bl	10133a8 <__ssprint_r>
 100d7b8:	2800      	cmp	r0, #0
 100d7ba:	f43f ac6d 	beq.w	100d098 <_svfprintf_r+0x3a0>
 100d7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100d7c0:	2b00      	cmp	r3, #0
 100d7c2:	f43f ab8d 	beq.w	100cee0 <_svfprintf_r+0x1e8>
 100d7c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 100d7c8:	4650      	mov	r0, sl
 100d7ca:	f004 fa59 	bl	1011c80 <_free_r>
 100d7ce:	f7ff bb87 	b.w	100cee0 <_svfprintf_r+0x1e8>
 100d7d2:	bf00      	nop
 100d7d4:	f3af 8000 	nop.w
 100d7d8:	ffffffff 	.word	0xffffffff
 100d7dc:	7fefffff 	.word	0x7fefffff
 100d7e0:	01055c0c 	.word	0x01055c0c
 100d7e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100d7e6:	3201      	adds	r2, #1
 100d7e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100d7ea:	f109 0308 	add.w	r3, r9, #8
 100d7ee:	2c01      	cmp	r4, #1
 100d7f0:	f100 0101 	add.w	r1, r0, #1
 100d7f4:	f340 8134 	ble.w	100da60 <_svfprintf_r+0xd68>
 100d7f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100d7fa:	2907      	cmp	r1, #7
 100d7fc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d800:	f8c9 0000 	str.w	r0, [r9]
 100d804:	f04f 0001 	mov.w	r0, #1
 100d808:	f8c9 0004 	str.w	r0, [r9, #4]
 100d80c:	f300 8163 	bgt.w	100dad6 <_svfprintf_r+0xdde>
 100d810:	3101      	adds	r1, #1
 100d812:	9816      	ldr	r0, [sp, #88]	; 0x58
 100d814:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100d816:	2907      	cmp	r1, #7
 100d818:	4402      	add	r2, r0
 100d81a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d81e:	e9c3 4000 	strd	r4, r0, [r3]
 100d822:	bfd8      	it	le
 100d824:	3308      	addle	r3, #8
 100d826:	f300 8162 	bgt.w	100daee <_svfprintf_r+0xdf6>
 100d82a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100d82e:	1c48      	adds	r0, r1, #1
 100d830:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100d832:	f103 0908 	add.w	r9, r3, #8
 100d836:	4684      	mov	ip, r0
 100d838:	3c01      	subs	r4, #1
 100d83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100d83e:	f000 8122 	beq.w	100da86 <_svfprintf_r+0xd8e>
 100d842:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100d844:	2807      	cmp	r0, #7
 100d846:	4422      	add	r2, r4
 100d848:	605c      	str	r4, [r3, #4]
 100d84a:	f105 0501 	add.w	r5, r5, #1
 100d84e:	922a      	str	r2, [sp, #168]	; 0xa8
 100d850:	601d      	str	r5, [r3, #0]
 100d852:	9029      	str	r0, [sp, #164]	; 0xa4
 100d854:	f300 82de 	bgt.w	100de14 <_svfprintf_r+0x111c>
 100d858:	f103 0410 	add.w	r4, r3, #16
 100d85c:	1c88      	adds	r0, r1, #2
 100d85e:	464b      	mov	r3, r9
 100d860:	46a1      	mov	r9, r4
 100d862:	9918      	ldr	r1, [sp, #96]	; 0x60
 100d864:	2807      	cmp	r0, #7
 100d866:	9029      	str	r0, [sp, #164]	; 0xa4
 100d868:	440a      	add	r2, r1
 100d86a:	922a      	str	r2, [sp, #168]	; 0xa8
 100d86c:	6059      	str	r1, [r3, #4]
 100d86e:	a922      	add	r1, sp, #136	; 0x88
 100d870:	6019      	str	r1, [r3, #0]
 100d872:	f77f abfe 	ble.w	100d072 <_svfprintf_r+0x37a>
 100d876:	aa28      	add	r2, sp, #160	; 0xa0
 100d878:	9908      	ldr	r1, [sp, #32]
 100d87a:	4650      	mov	r0, sl
 100d87c:	f005 fd94 	bl	10133a8 <__ssprint_r>
 100d880:	2800      	cmp	r0, #0
 100d882:	d19c      	bne.n	100d7be <_svfprintf_r+0xac6>
 100d884:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d886:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d88a:	f7ff bbf2 	b.w	100d072 <_svfprintf_r+0x37a>
 100d88e:	aa28      	add	r2, sp, #160	; 0xa0
 100d890:	9908      	ldr	r1, [sp, #32]
 100d892:	4650      	mov	r0, sl
 100d894:	f005 fd88 	bl	10133a8 <__ssprint_r>
 100d898:	2800      	cmp	r0, #0
 100d89a:	d190      	bne.n	100d7be <_svfprintf_r+0xac6>
 100d89c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d89e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d8a2:	f7ff bbb6 	b.w	100d012 <_svfprintf_r+0x31a>
 100d8a6:	aa28      	add	r2, sp, #160	; 0xa0
 100d8a8:	9908      	ldr	r1, [sp, #32]
 100d8aa:	4650      	mov	r0, sl
 100d8ac:	f005 fd7c 	bl	10133a8 <__ssprint_r>
 100d8b0:	2800      	cmp	r0, #0
 100d8b2:	d184      	bne.n	100d7be <_svfprintf_r+0xac6>
 100d8b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d8b6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d8ba:	f7ff bbbd 	b.w	100d038 <_svfprintf_r+0x340>
 100d8be:	2c10      	cmp	r4, #16
 100d8c0:	f645 35fc 	movw	r5, #23548	; 0x5bfc
 100d8c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d8c6:	f2c0 1505 	movt	r5, #261	; 0x105
 100d8ca:	dd24      	ble.n	100d916 <_svfprintf_r+0xc1e>
 100d8cc:	9704      	str	r7, [sp, #16]
 100d8ce:	2610      	movs	r6, #16
 100d8d0:	462f      	mov	r7, r5
 100d8d2:	4619      	mov	r1, r3
 100d8d4:	9d08      	ldr	r5, [sp, #32]
 100d8d6:	e002      	b.n	100d8de <_svfprintf_r+0xbe6>
 100d8d8:	3c10      	subs	r4, #16
 100d8da:	2c10      	cmp	r4, #16
 100d8dc:	dd18      	ble.n	100d910 <_svfprintf_r+0xc18>
 100d8de:	3101      	adds	r1, #1
 100d8e0:	3210      	adds	r2, #16
 100d8e2:	2907      	cmp	r1, #7
 100d8e4:	e9c9 7600 	strd	r7, r6, [r9]
 100d8e8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100d8ec:	f109 0908 	add.w	r9, r9, #8
 100d8f0:	ddf2      	ble.n	100d8d8 <_svfprintf_r+0xbe0>
 100d8f2:	aa28      	add	r2, sp, #160	; 0xa0
 100d8f4:	4629      	mov	r1, r5
 100d8f6:	4650      	mov	r0, sl
 100d8f8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100d8fc:	f005 fd54 	bl	10133a8 <__ssprint_r>
 100d900:	2800      	cmp	r0, #0
 100d902:	f47f af5c 	bne.w	100d7be <_svfprintf_r+0xac6>
 100d906:	3c10      	subs	r4, #16
 100d908:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100d90c:	2c10      	cmp	r4, #16
 100d90e:	dce6      	bgt.n	100d8de <_svfprintf_r+0xbe6>
 100d910:	463d      	mov	r5, r7
 100d912:	9f04      	ldr	r7, [sp, #16]
 100d914:	460b      	mov	r3, r1
 100d916:	3301      	adds	r3, #1
 100d918:	4422      	add	r2, r4
 100d91a:	2b07      	cmp	r3, #7
 100d91c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100d920:	e9c9 5400 	strd	r5, r4, [r9]
 100d924:	f77f abad 	ble.w	100d082 <_svfprintf_r+0x38a>
 100d928:	aa28      	add	r2, sp, #160	; 0xa0
 100d92a:	9908      	ldr	r1, [sp, #32]
 100d92c:	4650      	mov	r0, sl
 100d92e:	f005 fd3b 	bl	10133a8 <__ssprint_r>
 100d932:	2800      	cmp	r0, #0
 100d934:	f47f af43 	bne.w	100d7be <_svfprintf_r+0xac6>
 100d938:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100d93a:	f7ff bba2 	b.w	100d082 <_svfprintf_r+0x38a>
 100d93e:	ab54      	add	r3, sp, #336	; 0x150
 100d940:	9204      	str	r2, [sp, #16]
 100d942:	930b      	str	r3, [sp, #44]	; 0x2c
 100d944:	9207      	str	r2, [sp, #28]
 100d946:	f7ff bb2f 	b.w	100cfa8 <_svfprintf_r+0x2b0>
 100d94a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100d94c:	2900      	cmp	r1, #0
 100d94e:	f340 82a2 	ble.w	100de96 <_svfprintf_r+0x119e>
 100d952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100d954:	9912      	ldr	r1, [sp, #72]	; 0x48
 100d956:	428b      	cmp	r3, r1
 100d958:	bfa8      	it	ge
 100d95a:	460b      	movge	r3, r1
 100d95c:	2b00      	cmp	r3, #0
 100d95e:	461c      	mov	r4, r3
 100d960:	dd0f      	ble.n	100d982 <_svfprintf_r+0xc8a>
 100d962:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d964:	4422      	add	r2, r4
 100d966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100d968:	3301      	adds	r3, #1
 100d96a:	f8c9 4004 	str.w	r4, [r9, #4]
 100d96e:	2b07      	cmp	r3, #7
 100d970:	922a      	str	r2, [sp, #168]	; 0xa8
 100d972:	f8c9 1000 	str.w	r1, [r9]
 100d976:	bfd8      	it	le
 100d978:	f109 0908 	addle.w	r9, r9, #8
 100d97c:	9329      	str	r3, [sp, #164]	; 0xa4
 100d97e:	f300 84e1 	bgt.w	100e344 <_svfprintf_r+0x164c>
 100d982:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100d984:	2c00      	cmp	r4, #0
 100d986:	bfa8      	it	ge
 100d988:	1b1b      	subge	r3, r3, r4
 100d98a:	2b00      	cmp	r3, #0
 100d98c:	461c      	mov	r4, r3
 100d98e:	f300 81b9 	bgt.w	100dd04 <_svfprintf_r+0x100c>
 100d992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100d994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100d996:	440b      	add	r3, r1
 100d998:	0571      	lsls	r1, r6, #21
 100d99a:	461d      	mov	r5, r3
 100d99c:	f100 81db 	bmi.w	100dd56 <_svfprintf_r+0x105e>
 100d9a0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100d9a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100d9a4:	429c      	cmp	r4, r3
 100d9a6:	db02      	blt.n	100d9ae <_svfprintf_r+0xcb6>
 100d9a8:	07f3      	lsls	r3, r6, #31
 100d9aa:	f140 84d8 	bpl.w	100e35e <_svfprintf_r+0x1666>
 100d9ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100d9b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 100d9b2:	3301      	adds	r3, #1
 100d9b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100d9b6:	2b07      	cmp	r3, #7
 100d9b8:	440a      	add	r2, r1
 100d9ba:	f8c9 1004 	str.w	r1, [r9, #4]
 100d9be:	f8c9 0000 	str.w	r0, [r9]
 100d9c2:	bfd8      	it	le
 100d9c4:	f109 0908 	addle.w	r9, r9, #8
 100d9c8:	922a      	str	r2, [sp, #168]	; 0xa8
 100d9ca:	9329      	str	r3, [sp, #164]	; 0xa4
 100d9cc:	f300 85c4 	bgt.w	100e558 <_svfprintf_r+0x1860>
 100d9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100d9d2:	4619      	mov	r1, r3
 100d9d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100d9d6:	4419      	add	r1, r3
 100d9d8:	1b1b      	subs	r3, r3, r4
 100d9da:	1b4c      	subs	r4, r1, r5
 100d9dc:	429c      	cmp	r4, r3
 100d9de:	bfa8      	it	ge
 100d9e0:	461c      	movge	r4, r3
 100d9e2:	2c00      	cmp	r4, #0
 100d9e4:	dd0e      	ble.n	100da04 <_svfprintf_r+0xd0c>
 100d9e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100d9e8:	4422      	add	r2, r4
 100d9ea:	f8c9 5000 	str.w	r5, [r9]
 100d9ee:	3101      	adds	r1, #1
 100d9f0:	f8c9 4004 	str.w	r4, [r9, #4]
 100d9f4:	2907      	cmp	r1, #7
 100d9f6:	922a      	str	r2, [sp, #168]	; 0xa8
 100d9f8:	9129      	str	r1, [sp, #164]	; 0xa4
 100d9fa:	bfd8      	it	le
 100d9fc:	f109 0908 	addle.w	r9, r9, #8
 100da00:	f300 85b8 	bgt.w	100e574 <_svfprintf_r+0x187c>
 100da04:	2c00      	cmp	r4, #0
 100da06:	bfac      	ite	ge
 100da08:	1b1c      	subge	r4, r3, r4
 100da0a:	461c      	movlt	r4, r3
 100da0c:	2c00      	cmp	r4, #0
 100da0e:	f77f ab30 	ble.w	100d072 <_svfprintf_r+0x37a>
 100da12:	2c10      	cmp	r4, #16
 100da14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100da16:	f340 82c9 	ble.w	100dfac <_svfprintf_r+0x12b4>
 100da1a:	9604      	str	r6, [sp, #16]
 100da1c:	2510      	movs	r5, #16
 100da1e:	4626      	mov	r6, r4
 100da20:	4619      	mov	r1, r3
 100da22:	9c08      	ldr	r4, [sp, #32]
 100da24:	e003      	b.n	100da2e <_svfprintf_r+0xd36>
 100da26:	3e10      	subs	r6, #16
 100da28:	2e10      	cmp	r6, #16
 100da2a:	f340 82bc 	ble.w	100dfa6 <_svfprintf_r+0x12ae>
 100da2e:	3101      	adds	r1, #1
 100da30:	4bb9      	ldr	r3, [pc, #740]	; (100dd18 <_svfprintf_r+0x1020>)
 100da32:	2907      	cmp	r1, #7
 100da34:	f102 0210 	add.w	r2, r2, #16
 100da38:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100da3c:	e9c9 3500 	strd	r3, r5, [r9]
 100da40:	f109 0908 	add.w	r9, r9, #8
 100da44:	ddef      	ble.n	100da26 <_svfprintf_r+0xd2e>
 100da46:	aa28      	add	r2, sp, #160	; 0xa0
 100da48:	4621      	mov	r1, r4
 100da4a:	4650      	mov	r0, sl
 100da4c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100da50:	f005 fcaa 	bl	10133a8 <__ssprint_r>
 100da54:	2800      	cmp	r0, #0
 100da56:	f47f aeb2 	bne.w	100d7be <_svfprintf_r+0xac6>
 100da5a:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100da5e:	e7e2      	b.n	100da26 <_svfprintf_r+0xd2e>
 100da60:	07f4      	lsls	r4, r6, #31
 100da62:	f53f aec9 	bmi.w	100d7f8 <_svfprintf_r+0xb00>
 100da66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 100da68:	2907      	cmp	r1, #7
 100da6a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100da6e:	f8c9 4000 	str.w	r4, [r9]
 100da72:	f04f 0401 	mov.w	r4, #1
 100da76:	f8c9 4004 	str.w	r4, [r9, #4]
 100da7a:	f300 81cb 	bgt.w	100de14 <_svfprintf_r+0x111c>
 100da7e:	3002      	adds	r0, #2
 100da80:	f109 0910 	add.w	r9, r9, #16
 100da84:	e6ed      	b.n	100d862 <_svfprintf_r+0xb6a>
 100da86:	2c00      	cmp	r4, #0
 100da88:	f77f aeeb 	ble.w	100d862 <_svfprintf_r+0xb6a>
 100da8c:	2c10      	cmp	r4, #16
 100da8e:	f340 869e 	ble.w	100e7ce <_svfprintf_r+0x1ad6>
 100da92:	2510      	movs	r5, #16
 100da94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 100da98:	e005      	b.n	100daa6 <_svfprintf_r+0xdae>
 100da9a:	3c10      	subs	r4, #16
 100da9c:	f101 0c01 	add.w	ip, r1, #1
 100daa0:	2c10      	cmp	r4, #16
 100daa2:	f340 8302 	ble.w	100e0aa <_svfprintf_r+0x13b2>
 100daa6:	489c      	ldr	r0, [pc, #624]	; (100dd18 <_svfprintf_r+0x1020>)
 100daa8:	4661      	mov	r1, ip
 100daaa:	2907      	cmp	r1, #7
 100daac:	f102 0210 	add.w	r2, r2, #16
 100dab0:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 100dab4:	e9c3 0500 	strd	r0, r5, [r3]
 100dab8:	f103 0308 	add.w	r3, r3, #8
 100dabc:	dded      	ble.n	100da9a <_svfprintf_r+0xda2>
 100dabe:	aa28      	add	r2, sp, #160	; 0xa0
 100dac0:	4649      	mov	r1, r9
 100dac2:	4650      	mov	r0, sl
 100dac4:	f005 fc70 	bl	10133a8 <__ssprint_r>
 100dac8:	ab2b      	add	r3, sp, #172	; 0xac
 100daca:	2800      	cmp	r0, #0
 100dacc:	f47f ae77 	bne.w	100d7be <_svfprintf_r+0xac6>
 100dad0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100dad4:	e7e1      	b.n	100da9a <_svfprintf_r+0xda2>
 100dad6:	aa28      	add	r2, sp, #160	; 0xa0
 100dad8:	9908      	ldr	r1, [sp, #32]
 100dada:	4650      	mov	r0, sl
 100dadc:	f005 fc64 	bl	10133a8 <__ssprint_r>
 100dae0:	2800      	cmp	r0, #0
 100dae2:	f47f ae6c 	bne.w	100d7be <_svfprintf_r+0xac6>
 100dae6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100dae8:	ab2b      	add	r3, sp, #172	; 0xac
 100daea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100daec:	e690      	b.n	100d810 <_svfprintf_r+0xb18>
 100daee:	aa28      	add	r2, sp, #160	; 0xa0
 100daf0:	9908      	ldr	r1, [sp, #32]
 100daf2:	4650      	mov	r0, sl
 100daf4:	f005 fc58 	bl	10133a8 <__ssprint_r>
 100daf8:	2800      	cmp	r0, #0
 100dafa:	f47f ae60 	bne.w	100d7be <_svfprintf_r+0xac6>
 100dafe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100db00:	ab2b      	add	r3, sp, #172	; 0xac
 100db02:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100db04:	e691      	b.n	100d82a <_svfprintf_r+0xb32>
 100db06:	07f4      	lsls	r4, r6, #31
 100db08:	bf58      	it	pl
 100db0a:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 100db0c:	f57f aab1 	bpl.w	100d072 <_svfprintf_r+0x37a>
 100db10:	e561      	b.n	100d5d6 <_svfprintf_r+0x8de>
 100db12:	eeb4 8b48 	vcmp.f64	d8, d8
 100db16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100db1a:	f180 862f 	bvs.w	100e77c <_svfprintf_r+0x1a84>
 100db1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100db20:	f023 0420 	bic.w	r4, r3, #32
 100db24:	2c41      	cmp	r4, #65	; 0x41
 100db26:	f040 82e6 	bne.w	100e0f6 <_svfprintf_r+0x13fe>
 100db2a:	2b61      	cmp	r3, #97	; 0x61
 100db2c:	f04f 0230 	mov.w	r2, #48	; 0x30
 100db30:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 100db34:	bf0c      	ite	eq
 100db36:	2378      	moveq	r3, #120	; 0x78
 100db38:	2358      	movne	r3, #88	; 0x58
 100db3a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100db3e:	9b04      	ldr	r3, [sp, #16]
 100db40:	2b63      	cmp	r3, #99	; 0x63
 100db42:	f300 848e 	bgt.w	100e462 <_svfprintf_r+0x176a>
 100db46:	2300      	movs	r3, #0
 100db48:	930a      	str	r3, [sp, #40]	; 0x28
 100db4a:	ab3b      	add	r3, sp, #236	; 0xec
 100db4c:	930b      	str	r3, [sp, #44]	; 0x2c
 100db4e:	ee18 3a90 	vmov	r3, s17
 100db52:	2b00      	cmp	r3, #0
 100db54:	f280 855a 	bge.w	100e60c <_svfprintf_r+0x1914>
 100db58:	eeb1 0b48 	vneg.f64	d0, d8
 100db5c:	232d      	movs	r3, #45	; 0x2d
 100db5e:	930c      	str	r3, [sp, #48]	; 0x30
 100db60:	a81f      	add	r0, sp, #124	; 0x7c
 100db62:	f005 fb99 	bl	1013298 <frexp>
 100db66:	9a04      	ldr	r2, [sp, #16]
 100db68:	990e      	ldr	r1, [sp, #56]	; 0x38
 100db6a:	f248 20bc 	movw	r0, #33468	; 0x82bc
 100db6e:	f2c0 1005 	movt	r0, #261	; 0x105
 100db72:	3a01      	subs	r2, #1
 100db74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100db76:	ee20 0b0b 	vmul.f64	d0, d0, d11
 100db7a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100db7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100db82:	bf04      	itt	eq
 100db84:	2301      	moveq	r3, #1
 100db86:	931f      	streq	r3, [sp, #124]	; 0x7c
 100db88:	f248 036c 	movw	r3, #32876	; 0x806c
 100db8c:	f2c0 1305 	movt	r3, #261	; 0x105
 100db90:	2961      	cmp	r1, #97	; 0x61
 100db92:	bf18      	it	ne
 100db94:	4618      	movne	r0, r3
 100db96:	e005      	b.n	100dba4 <_svfprintf_r+0xeac>
 100db98:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100db9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100dba0:	d015      	beq.n	100dbce <_svfprintf_r+0xed6>
 100dba2:	461d      	mov	r5, r3
 100dba4:	ee20 0b09 	vmul.f64	d0, d0, d9
 100dba8:	f1b2 3fff 	cmp.w	r2, #4294967295
 100dbac:	462b      	mov	r3, r5
 100dbae:	4611      	mov	r1, r2
 100dbb0:	f102 32ff 	add.w	r2, r2, #4294967295
 100dbb4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 100dbb8:	ee17 ca90 	vmov	ip, s15
 100dbbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 100dbc0:	ee30 0b46 	vsub.f64	d0, d0, d6
 100dbc4:	f810 c00c 	ldrb.w	ip, [r0, ip]
 100dbc8:	f803 cb01 	strb.w	ip, [r3], #1
 100dbcc:	d1e4      	bne.n	100db98 <_svfprintf_r+0xea0>
 100dbce:	eeb4 0bca 	vcmpe.f64	d0, d10
 100dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100dbd6:	f300 855f 	bgt.w	100e698 <_svfprintf_r+0x19a0>
 100dbda:	eeb4 0b4a 	vcmp.f64	d0, d10
 100dbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100dbe2:	d104      	bne.n	100dbee <_svfprintf_r+0xef6>
 100dbe4:	ee17 2a90 	vmov	r2, s15
 100dbe8:	07d2      	lsls	r2, r2, #31
 100dbea:	f100 8555 	bmi.w	100e698 <_svfprintf_r+0x19a0>
 100dbee:	2900      	cmp	r1, #0
 100dbf0:	bfa2      	ittt	ge
 100dbf2:	1c4a      	addge	r2, r1, #1
 100dbf4:	18d2      	addge	r2, r2, r3
 100dbf6:	2130      	movge	r1, #48	; 0x30
 100dbf8:	db03      	blt.n	100dc02 <_svfprintf_r+0xf0a>
 100dbfa:	f803 1b01 	strb.w	r1, [r3], #1
 100dbfe:	4293      	cmp	r3, r2
 100dc00:	d1fb      	bne.n	100dbfa <_svfprintf_r+0xf02>
 100dc02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100dc04:	f046 0602 	orr.w	r6, r6, #2
 100dc08:	1a9b      	subs	r3, r3, r2
 100dc0a:	9312      	str	r3, [sp, #72]	; 0x48
 100dc0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100dc0e:	9310      	str	r3, [sp, #64]	; 0x40
 100dc10:	e2b5      	b.n	100e17e <_svfprintf_r+0x1486>
 100dc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100dc14:	06f4      	lsls	r4, r6, #27
 100dc16:	f103 0204 	add.w	r2, r3, #4
 100dc1a:	f100 85ea 	bmi.w	100e7f2 <_svfprintf_r+0x1afa>
 100dc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100dc20:	0670      	lsls	r0, r6, #25
 100dc22:	bf48      	it	mi
 100dc24:	f9b3 4000 	ldrshmi.w	r4, [r3]
 100dc28:	d404      	bmi.n	100dc34 <_svfprintf_r+0xf3c>
 100dc2a:	05b1      	lsls	r1, r6, #22
 100dc2c:	f140 83a9 	bpl.w	100e382 <_svfprintf_r+0x168a>
 100dc30:	f993 4000 	ldrsb.w	r4, [r3]
 100dc34:	17e5      	asrs	r5, r4, #31
 100dc36:	9209      	str	r2, [sp, #36]	; 0x24
 100dc38:	9603      	str	r6, [sp, #12]
 100dc3a:	4622      	mov	r2, r4
 100dc3c:	462b      	mov	r3, r5
 100dc3e:	f7ff bb1e 	b.w	100d27e <_svfprintf_r+0x586>
 100dc42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100dc44:	06f1      	lsls	r1, r6, #27
 100dc46:	f852 4b04 	ldr.w	r4, [r2], #4
 100dc4a:	f100 85d5 	bmi.w	100e7f8 <_svfprintf_r+0x1b00>
 100dc4e:	0673      	lsls	r3, r6, #25
 100dc50:	9209      	str	r2, [sp, #36]	; 0x24
 100dc52:	9603      	str	r6, [sp, #12]
 100dc54:	f140 823b 	bpl.w	100e0ce <_svfprintf_r+0x13d6>
 100dc58:	b2a4      	uxth	r4, r4
 100dc5a:	2500      	movs	r5, #0
 100dc5c:	2301      	movs	r3, #1
 100dc5e:	f7ff b97c 	b.w	100cf5a <_svfprintf_r+0x262>
 100dc62:	9905      	ldr	r1, [sp, #20]
 100dc64:	6812      	ldr	r2, [r2, #0]
 100dc66:	9309      	str	r3, [sp, #36]	; 0x24
 100dc68:	17cd      	asrs	r5, r1, #31
 100dc6a:	4608      	mov	r0, r1
 100dc6c:	4629      	mov	r1, r5
 100dc6e:	e9c2 0100 	strd	r0, r1, [r2]
 100dc72:	f7ff b881 	b.w	100cd78 <_svfprintf_r+0x80>
 100dc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100dc78:	06f1      	lsls	r1, r6, #27
 100dc7a:	f852 4b04 	ldr.w	r4, [r2], #4
 100dc7e:	f100 85db 	bmi.w	100e838 <_svfprintf_r+0x1b40>
 100dc82:	0673      	lsls	r3, r6, #25
 100dc84:	f140 822b 	bpl.w	100e0de <_svfprintf_r+0x13e6>
 100dc88:	4633      	mov	r3, r6
 100dc8a:	9209      	str	r2, [sp, #36]	; 0x24
 100dc8c:	b2a4      	uxth	r4, r4
 100dc8e:	2500      	movs	r5, #0
 100dc90:	f7ff bb9b 	b.w	100d3ca <_svfprintf_r+0x6d2>
 100dc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100dc96:	2201      	movs	r2, #1
 100dc98:	ac3b      	add	r4, sp, #236	; 0xec
 100dc9a:	9203      	str	r2, [sp, #12]
 100dc9c:	9207      	str	r2, [sp, #28]
 100dc9e:	681b      	ldr	r3, [r3, #0]
 100dca0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 100dca4:	e409      	b.n	100d4ba <_svfprintf_r+0x7c2>
 100dca6:	aa28      	add	r2, sp, #160	; 0xa0
 100dca8:	9908      	ldr	r1, [sp, #32]
 100dcaa:	4650      	mov	r0, sl
 100dcac:	f005 fb7c 	bl	10133a8 <__ssprint_r>
 100dcb0:	2800      	cmp	r0, #0
 100dcb2:	f47f ad84 	bne.w	100d7be <_svfprintf_r+0xac6>
 100dcb6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100dcb8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100dcbc:	e49d      	b.n	100d5fa <_svfprintf_r+0x902>
 100dcbe:	9804      	ldr	r0, [sp, #16]
 100dcc0:	f248 23d0 	movw	r3, #33488	; 0x82d0
 100dcc4:	9204      	str	r2, [sp, #16]
 100dcc6:	f2c0 1305 	movt	r3, #261	; 0x105
 100dcca:	2806      	cmp	r0, #6
 100dccc:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 100dcd0:	4611      	mov	r1, r2
 100dcd2:	9213      	str	r2, [sp, #76]	; 0x4c
 100dcd4:	bf28      	it	cs
 100dcd6:	2006      	movcs	r0, #6
 100dcd8:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100dcdc:	9003      	str	r0, [sp, #12]
 100dcde:	9007      	str	r0, [sp, #28]
 100dce0:	930b      	str	r3, [sp, #44]	; 0x2c
 100dce2:	f7ff b96e 	b.w	100cfc2 <_svfprintf_r+0x2ca>
 100dce6:	2140      	movs	r1, #64	; 0x40
 100dce8:	4650      	mov	r0, sl
 100dcea:	f7fd f9f5 	bl	100b0d8 <_malloc_r>
 100dcee:	9b08      	ldr	r3, [sp, #32]
 100dcf0:	6018      	str	r0, [r3, #0]
 100dcf2:	6118      	str	r0, [r3, #16]
 100dcf4:	2800      	cmp	r0, #0
 100dcf6:	f000 8591 	beq.w	100e81c <_svfprintf_r+0x1b24>
 100dcfa:	9a08      	ldr	r2, [sp, #32]
 100dcfc:	2340      	movs	r3, #64	; 0x40
 100dcfe:	6153      	str	r3, [r2, #20]
 100dd00:	f7ff b81a 	b.w	100cd38 <_svfprintf_r+0x40>
 100dd04:	2c10      	cmp	r4, #16
 100dd06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100dd08:	f340 82a9 	ble.w	100e25e <_svfprintf_r+0x1566>
 100dd0c:	9604      	str	r6, [sp, #16]
 100dd0e:	2510      	movs	r5, #16
 100dd10:	4626      	mov	r6, r4
 100dd12:	4619      	mov	r1, r3
 100dd14:	9c08      	ldr	r4, [sp, #32]
 100dd16:	e005      	b.n	100dd24 <_svfprintf_r+0x102c>
 100dd18:	01055c0c 	.word	0x01055c0c
 100dd1c:	3e10      	subs	r6, #16
 100dd1e:	2e10      	cmp	r6, #16
 100dd20:	f340 829a 	ble.w	100e258 <_svfprintf_r+0x1560>
 100dd24:	3101      	adds	r1, #1
 100dd26:	4bb7      	ldr	r3, [pc, #732]	; (100e004 <_svfprintf_r+0x130c>)
 100dd28:	2907      	cmp	r1, #7
 100dd2a:	f102 0210 	add.w	r2, r2, #16
 100dd2e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100dd32:	e9c9 3500 	strd	r3, r5, [r9]
 100dd36:	f109 0908 	add.w	r9, r9, #8
 100dd3a:	ddef      	ble.n	100dd1c <_svfprintf_r+0x1024>
 100dd3c:	aa28      	add	r2, sp, #160	; 0xa0
 100dd3e:	4621      	mov	r1, r4
 100dd40:	4650      	mov	r0, sl
 100dd42:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100dd46:	f005 fb2f 	bl	10133a8 <__ssprint_r>
 100dd4a:	2800      	cmp	r0, #0
 100dd4c:	f47f ad37 	bne.w	100d7be <_svfprintf_r+0xac6>
 100dd50:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100dd54:	e7e2      	b.n	100dd1c <_svfprintf_r+0x1024>
 100dd56:	9911      	ldr	r1, [sp, #68]	; 0x44
 100dd58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100dd5a:	2b00      	cmp	r3, #0
 100dd5c:	bfd8      	it	le
 100dd5e:	2900      	cmple	r1, #0
 100dd60:	f340 8556 	ble.w	100e810 <_svfprintf_r+0x1b18>
 100dd64:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 100dd68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 100dd6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100dd6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 100dd70:	960c      	str	r6, [sp, #48]	; 0x30
 100dd72:	461e      	mov	r6, r3
 100dd74:	4401      	add	r1, r0
 100dd76:	9107      	str	r1, [sp, #28]
 100dd78:	2e00      	cmp	r6, #0
 100dd7a:	d044      	beq.n	100de06 <_svfprintf_r+0x110e>
 100dd7c:	3e01      	subs	r6, #1
 100dd7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100dd80:	9919      	ldr	r1, [sp, #100]	; 0x64
 100dd82:	3301      	adds	r3, #1
 100dd84:	981a      	ldr	r0, [sp, #104]	; 0x68
 100dd86:	2b07      	cmp	r3, #7
 100dd88:	440a      	add	r2, r1
 100dd8a:	f8c9 1004 	str.w	r1, [r9, #4]
 100dd8e:	f8c9 0000 	str.w	r0, [r9]
 100dd92:	bfd8      	it	le
 100dd94:	f109 0908 	addle.w	r9, r9, #8
 100dd98:	922a      	str	r2, [sp, #168]	; 0xa8
 100dd9a:	9329      	str	r3, [sp, #164]	; 0xa4
 100dd9c:	f300 80c0 	bgt.w	100df20 <_svfprintf_r+0x1228>
 100dda0:	9814      	ldr	r0, [sp, #80]	; 0x50
 100dda2:	9907      	ldr	r1, [sp, #28]
 100dda4:	7803      	ldrb	r3, [r0, #0]
 100dda6:	1b4c      	subs	r4, r1, r5
 100dda8:	9104      	str	r1, [sp, #16]
 100ddaa:	429c      	cmp	r4, r3
 100ddac:	bfa8      	it	ge
 100ddae:	461c      	movge	r4, r3
 100ddb0:	2c00      	cmp	r4, #0
 100ddb2:	dd0e      	ble.n	100ddd2 <_svfprintf_r+0x10da>
 100ddb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ddb6:	4422      	add	r2, r4
 100ddb8:	f8c9 5000 	str.w	r5, [r9]
 100ddbc:	3301      	adds	r3, #1
 100ddbe:	922a      	str	r2, [sp, #168]	; 0xa8
 100ddc0:	2b07      	cmp	r3, #7
 100ddc2:	f8c9 4004 	str.w	r4, [r9, #4]
 100ddc6:	9329      	str	r3, [sp, #164]	; 0xa4
 100ddc8:	f300 8107 	bgt.w	100dfda <_svfprintf_r+0x12e2>
 100ddcc:	7803      	ldrb	r3, [r0, #0]
 100ddce:	f109 0908 	add.w	r9, r9, #8
 100ddd2:	2c00      	cmp	r4, #0
 100ddd4:	bfac      	ite	ge
 100ddd6:	1b1c      	subge	r4, r3, r4
 100ddd8:	461c      	movlt	r4, r3
 100ddda:	2c00      	cmp	r4, #0
 100dddc:	dc29      	bgt.n	100de32 <_svfprintf_r+0x113a>
 100ddde:	441d      	add	r5, r3
 100dde0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100dde2:	2e00      	cmp	r6, #0
 100dde4:	bfd8      	it	le
 100dde6:	2b00      	cmple	r3, #0
 100dde8:	dcc6      	bgt.n	100dd78 <_svfprintf_r+0x1080>
 100ddea:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 100ddee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 100ddf2:	9904      	ldr	r1, [sp, #16]
 100ddf4:	462b      	mov	r3, r5
 100ddf6:	428d      	cmp	r5, r1
 100ddf8:	bf28      	it	cs
 100ddfa:	460b      	movcs	r3, r1
 100ddfc:	461d      	mov	r5, r3
 100ddfe:	e5cf      	b.n	100d9a0 <_svfprintf_r+0xca8>
 100de00:	9603      	str	r6, [sp, #12]
 100de02:	f7ff bb1d 	b.w	100d440 <_svfprintf_r+0x748>
 100de06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100de08:	3b01      	subs	r3, #1
 100de0a:	9314      	str	r3, [sp, #80]	; 0x50
 100de0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100de0e:	3b01      	subs	r3, #1
 100de10:	9311      	str	r3, [sp, #68]	; 0x44
 100de12:	e7b4      	b.n	100dd7e <_svfprintf_r+0x1086>
 100de14:	aa28      	add	r2, sp, #160	; 0xa0
 100de16:	9908      	ldr	r1, [sp, #32]
 100de18:	4650      	mov	r0, sl
 100de1a:	f005 fac5 	bl	10133a8 <__ssprint_r>
 100de1e:	2800      	cmp	r0, #0
 100de20:	f47f accd 	bne.w	100d7be <_svfprintf_r+0xac6>
 100de24:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100de26:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 100de2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100de2c:	ab2b      	add	r3, sp, #172	; 0xac
 100de2e:	3001      	adds	r0, #1
 100de30:	e517      	b.n	100d862 <_svfprintf_r+0xb6a>
 100de32:	2c10      	cmp	r4, #16
 100de34:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100de36:	dd1f      	ble.n	100de78 <_svfprintf_r+0x1180>
 100de38:	2710      	movs	r7, #16
 100de3a:	e002      	b.n	100de42 <_svfprintf_r+0x114a>
 100de3c:	3c10      	subs	r4, #16
 100de3e:	2c10      	cmp	r4, #16
 100de40:	dd1a      	ble.n	100de78 <_svfprintf_r+0x1180>
 100de42:	3101      	adds	r1, #1
 100de44:	4b6f      	ldr	r3, [pc, #444]	; (100e004 <_svfprintf_r+0x130c>)
 100de46:	2907      	cmp	r1, #7
 100de48:	f102 0210 	add.w	r2, r2, #16
 100de4c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100de50:	e9c9 3700 	strd	r3, r7, [r9]
 100de54:	f109 0908 	add.w	r9, r9, #8
 100de58:	ddf0      	ble.n	100de3c <_svfprintf_r+0x1144>
 100de5a:	aa28      	add	r2, sp, #160	; 0xa0
 100de5c:	4641      	mov	r1, r8
 100de5e:	4650      	mov	r0, sl
 100de60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100de64:	f005 faa0 	bl	10133a8 <__ssprint_r>
 100de68:	2800      	cmp	r0, #0
 100de6a:	f47f aca8 	bne.w	100d7be <_svfprintf_r+0xac6>
 100de6e:	3c10      	subs	r4, #16
 100de70:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100de74:	2c10      	cmp	r4, #16
 100de76:	dce4      	bgt.n	100de42 <_svfprintf_r+0x114a>
 100de78:	3101      	adds	r1, #1
 100de7a:	4b62      	ldr	r3, [pc, #392]	; (100e004 <_svfprintf_r+0x130c>)
 100de7c:	2907      	cmp	r1, #7
 100de7e:	4422      	add	r2, r4
 100de80:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100de84:	e9c9 3400 	strd	r3, r4, [r9]
 100de88:	f300 8337 	bgt.w	100e4fa <_svfprintf_r+0x1802>
 100de8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100de8e:	f109 0908 	add.w	r9, r9, #8
 100de92:	781b      	ldrb	r3, [r3, #0]
 100de94:	e7a3      	b.n	100ddde <_svfprintf_r+0x10e6>
 100de96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100de98:	3201      	adds	r2, #1
 100de9a:	f248 20d8 	movw	r0, #33496	; 0x82d8
 100de9e:	2401      	movs	r4, #1
 100dea0:	3301      	adds	r3, #1
 100dea2:	f2c0 1005 	movt	r0, #261	; 0x105
 100dea6:	2b07      	cmp	r3, #7
 100dea8:	e9c9 0400 	strd	r0, r4, [r9]
 100deac:	922a      	str	r2, [sp, #168]	; 0xa8
 100deae:	bfd8      	it	le
 100deb0:	f109 0908 	addle.w	r9, r9, #8
 100deb4:	9329      	str	r3, [sp, #164]	; 0xa4
 100deb6:	f300 822c 	bgt.w	100e312 <_svfprintf_r+0x161a>
 100deba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100debc:	430b      	orrs	r3, r1
 100debe:	f000 8338 	beq.w	100e532 <_svfprintf_r+0x183a>
 100dec2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100dec4:	9816      	ldr	r0, [sp, #88]	; 0x58
 100dec6:	3301      	adds	r3, #1
 100dec8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100deca:	2b07      	cmp	r3, #7
 100decc:	4402      	add	r2, r0
 100dece:	f8c9 0004 	str.w	r0, [r9, #4]
 100ded2:	f8c9 4000 	str.w	r4, [r9]
 100ded6:	bfd8      	it	le
 100ded8:	f109 0908 	addle.w	r9, r9, #8
 100dedc:	922a      	str	r2, [sp, #168]	; 0xa8
 100dede:	9329      	str	r3, [sp, #164]	; 0xa4
 100dee0:	f300 8319 	bgt.w	100e516 <_svfprintf_r+0x181e>
 100dee4:	2900      	cmp	r1, #0
 100dee6:	f2c0 8397 	blt.w	100e618 <_svfprintf_r+0x1920>
 100deea:	3301      	adds	r3, #1
 100deec:	9912      	ldr	r1, [sp, #72]	; 0x48
 100deee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100def0:	2b07      	cmp	r3, #7
 100def2:	440a      	add	r2, r1
 100def4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100def8:	e9c9 0100 	strd	r0, r1, [r9]
 100defc:	f77f a8b7 	ble.w	100d06e <_svfprintf_r+0x376>
 100df00:	e4b9      	b.n	100d876 <_svfprintf_r+0xb7e>
 100df02:	aa28      	add	r2, sp, #160	; 0xa0
 100df04:	9908      	ldr	r1, [sp, #32]
 100df06:	4650      	mov	r0, sl
 100df08:	f005 fa4e 	bl	10133a8 <__ssprint_r>
 100df0c:	2800      	cmp	r0, #0
 100df0e:	f47f ac56 	bne.w	100d7be <_svfprintf_r+0xac6>
 100df12:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100df16:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100df1a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100df1c:	f7ff b866 	b.w	100cfec <_svfprintf_r+0x2f4>
 100df20:	aa28      	add	r2, sp, #160	; 0xa0
 100df22:	4641      	mov	r1, r8
 100df24:	4650      	mov	r0, sl
 100df26:	f005 fa3f 	bl	10133a8 <__ssprint_r>
 100df2a:	2800      	cmp	r0, #0
 100df2c:	f47f ac47 	bne.w	100d7be <_svfprintf_r+0xac6>
 100df30:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100df32:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100df36:	e733      	b.n	100dda0 <_svfprintf_r+0x10a8>
 100df38:	aa28      	add	r2, sp, #160	; 0xa0
 100df3a:	9908      	ldr	r1, [sp, #32]
 100df3c:	4650      	mov	r0, sl
 100df3e:	f005 fa33 	bl	10133a8 <__ssprint_r>
 100df42:	2800      	cmp	r0, #0
 100df44:	f47f ac3b 	bne.w	100d7be <_svfprintf_r+0xac6>
 100df48:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100df4c:	f7ff bb3e 	b.w	100d5cc <_svfprintf_r+0x8d4>
 100df50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100df52:	2208      	movs	r2, #8
 100df54:	2100      	movs	r1, #0
 100df56:	a826      	add	r0, sp, #152	; 0x98
 100df58:	9321      	str	r3, [sp, #132]	; 0x84
 100df5a:	f7fe f8c1 	bl	100c0e0 <memset>
 100df5e:	9b04      	ldr	r3, [sp, #16]
 100df60:	1c5a      	adds	r2, r3, #1
 100df62:	f000 8196 	beq.w	100e292 <_svfprintf_r+0x159a>
 100df66:	2400      	movs	r4, #0
 100df68:	9603      	str	r6, [sp, #12]
 100df6a:	f8cd 9010 	str.w	r9, [sp, #16]
 100df6e:	4626      	mov	r6, r4
 100df70:	4699      	mov	r9, r3
 100df72:	9509      	str	r5, [sp, #36]	; 0x24
 100df74:	e009      	b.n	100df8a <_svfprintf_r+0x1292>
 100df76:	f002 fac1 	bl	10104fc <_wcrtomb_r>
 100df7a:	1833      	adds	r3, r6, r0
 100df7c:	3001      	adds	r0, #1
 100df7e:	f000 8383 	beq.w	100e688 <_svfprintf_r+0x1990>
 100df82:	454b      	cmp	r3, r9
 100df84:	dc0a      	bgt.n	100df9c <_svfprintf_r+0x12a4>
 100df86:	461e      	mov	r6, r3
 100df88:	d008      	beq.n	100df9c <_svfprintf_r+0x12a4>
 100df8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100df8c:	ab26      	add	r3, sp, #152	; 0x98
 100df8e:	a93b      	add	r1, sp, #236	; 0xec
 100df90:	4650      	mov	r0, sl
 100df92:	5915      	ldr	r5, [r2, r4]
 100df94:	3404      	adds	r4, #4
 100df96:	462a      	mov	r2, r5
 100df98:	2d00      	cmp	r5, #0
 100df9a:	d1ec      	bne.n	100df76 <_svfprintf_r+0x127e>
 100df9c:	9607      	str	r6, [sp, #28]
 100df9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100dfa0:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 100dfa4:	e183      	b.n	100e2ae <_svfprintf_r+0x15b6>
 100dfa6:	4634      	mov	r4, r6
 100dfa8:	9e04      	ldr	r6, [sp, #16]
 100dfaa:	460b      	mov	r3, r1
 100dfac:	3301      	adds	r3, #1
 100dfae:	4915      	ldr	r1, [pc, #84]	; (100e004 <_svfprintf_r+0x130c>)
 100dfb0:	2b07      	cmp	r3, #7
 100dfb2:	4422      	add	r2, r4
 100dfb4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100dfb8:	e9c9 1400 	strd	r1, r4, [r9]
 100dfbc:	f77f a857 	ble.w	100d06e <_svfprintf_r+0x376>
 100dfc0:	e459      	b.n	100d876 <_svfprintf_r+0xb7e>
 100dfc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100dfc4:	3902      	subs	r1, #2
 100dfc6:	2330      	movs	r3, #48	; 0x30
 100dfc8:	9e03      	ldr	r6, [sp, #12]
 100dfca:	910b      	str	r1, [sp, #44]	; 0x2c
 100dfcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 100dfd0:	ab54      	add	r3, sp, #336	; 0x150
 100dfd2:	1a5b      	subs	r3, r3, r1
 100dfd4:	9307      	str	r3, [sp, #28]
 100dfd6:	f7fe bfe7 	b.w	100cfa8 <_svfprintf_r+0x2b0>
 100dfda:	aa28      	add	r2, sp, #160	; 0xa0
 100dfdc:	4641      	mov	r1, r8
 100dfde:	4650      	mov	r0, sl
 100dfe0:	f005 f9e2 	bl	10133a8 <__ssprint_r>
 100dfe4:	2800      	cmp	r0, #0
 100dfe6:	f47f abea 	bne.w	100d7be <_svfprintf_r+0xac6>
 100dfea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100dfec:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100dff0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100dff2:	781b      	ldrb	r3, [r3, #0]
 100dff4:	e6ed      	b.n	100ddd2 <_svfprintf_r+0x10da>
 100dff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100dff8:	6812      	ldr	r2, [r2, #0]
 100dffa:	9309      	str	r3, [sp, #36]	; 0x24
 100dffc:	9b05      	ldr	r3, [sp, #20]
 100dffe:	6013      	str	r3, [r2, #0]
 100e000:	f7fe beba 	b.w	100cd78 <_svfprintf_r+0x80>
 100e004:	01055c0c 	.word	0x01055c0c
 100e008:	9b03      	ldr	r3, [sp, #12]
 100e00a:	2200      	movs	r2, #0
 100e00c:	f8cd 901c 	str.w	r9, [sp, #28]
 100e010:	ae54      	add	r6, sp, #336	; 0x150
 100e012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 100e016:	970c      	str	r7, [sp, #48]	; 0x30
 100e018:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 100e01c:	4691      	mov	r9, r2
 100e01e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100e022:	461f      	mov	r7, r3
 100e024:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 100e028:	e008      	b.n	100e03c <_svfprintf_r+0x1344>
 100e02a:	f7fc f99d 	bl	100a368 <__aeabi_uldivmod>
 100e02e:	2d00      	cmp	r5, #0
 100e030:	bf08      	it	eq
 100e032:	2c0a      	cmpeq	r4, #10
 100e034:	d329      	bcc.n	100e08a <_svfprintf_r+0x1392>
 100e036:	4604      	mov	r4, r0
 100e038:	4656      	mov	r6, sl
 100e03a:	460d      	mov	r5, r1
 100e03c:	220a      	movs	r2, #10
 100e03e:	2300      	movs	r3, #0
 100e040:	4620      	mov	r0, r4
 100e042:	4629      	mov	r1, r5
 100e044:	f7fc f990 	bl	100a368 <__aeabi_uldivmod>
 100e048:	f109 0901 	add.w	r9, r9, #1
 100e04c:	4620      	mov	r0, r4
 100e04e:	4629      	mov	r1, r5
 100e050:	f106 3aff 	add.w	sl, r6, #4294967295
 100e054:	2300      	movs	r3, #0
 100e056:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 100e05a:	220a      	movs	r2, #10
 100e05c:	f806 cc01 	strb.w	ip, [r6, #-1]
 100e060:	2f00      	cmp	r7, #0
 100e062:	d0e2      	beq.n	100e02a <_svfprintf_r+0x1332>
 100e064:	f898 6000 	ldrb.w	r6, [r8]
 100e068:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 100e06c:	bf18      	it	ne
 100e06e:	f04f 0c01 	movne.w	ip, #1
 100e072:	454e      	cmp	r6, r9
 100e074:	bf18      	it	ne
 100e076:	f04f 0c00 	movne.w	ip, #0
 100e07a:	f1bc 0f00 	cmp.w	ip, #0
 100e07e:	d0d4      	beq.n	100e02a <_svfprintf_r+0x1332>
 100e080:	429d      	cmp	r5, r3
 100e082:	bf08      	it	eq
 100e084:	4294      	cmpeq	r4, r2
 100e086:	f080 8285 	bcs.w	100e594 <_svfprintf_r+0x189c>
 100e08a:	4652      	mov	r2, sl
 100e08c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 100e090:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 100e094:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 100e098:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100e09c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 100e0a0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 100e0a4:	9e03      	ldr	r6, [sp, #12]
 100e0a6:	f7ff bb7d 	b.w	100d7a4 <_svfprintf_r+0xaac>
 100e0aa:	f103 0108 	add.w	r1, r3, #8
 100e0ae:	4660      	mov	r0, ip
 100e0b0:	4db8      	ldr	r5, [pc, #736]	; (100e394 <_svfprintf_r+0x169c>)
 100e0b2:	2807      	cmp	r0, #7
 100e0b4:	4422      	add	r2, r4
 100e0b6:	605c      	str	r4, [r3, #4]
 100e0b8:	922a      	str	r2, [sp, #168]	; 0xa8
 100e0ba:	601d      	str	r5, [r3, #0]
 100e0bc:	9029      	str	r0, [sp, #164]	; 0xa4
 100e0be:	f73f aea9 	bgt.w	100de14 <_svfprintf_r+0x111c>
 100e0c2:	3001      	adds	r0, #1
 100e0c4:	f101 0908 	add.w	r9, r1, #8
 100e0c8:	460b      	mov	r3, r1
 100e0ca:	f7ff bbca 	b.w	100d862 <_svfprintf_r+0xb6a>
 100e0ce:	05b5      	lsls	r5, r6, #22
 100e0d0:	f04f 0301 	mov.w	r3, #1
 100e0d4:	bf48      	it	mi
 100e0d6:	b2e4      	uxtbmi	r4, r4
 100e0d8:	2500      	movs	r5, #0
 100e0da:	f7fe bf3e 	b.w	100cf5a <_svfprintf_r+0x262>
 100e0de:	05b5      	lsls	r5, r6, #22
 100e0e0:	bf45      	ittet	mi
 100e0e2:	9209      	strmi	r2, [sp, #36]	; 0x24
 100e0e4:	b2e4      	uxtbmi	r4, r4
 100e0e6:	9209      	strpl	r2, [sp, #36]	; 0x24
 100e0e8:	4633      	movmi	r3, r6
 100e0ea:	bf4e      	itee	mi
 100e0ec:	2500      	movmi	r5, #0
 100e0ee:	2500      	movpl	r5, #0
 100e0f0:	4633      	movpl	r3, r6
 100e0f2:	f7ff b96a 	b.w	100d3ca <_svfprintf_r+0x6d2>
 100e0f6:	9b04      	ldr	r3, [sp, #16]
 100e0f8:	1c5a      	adds	r2, r3, #1
 100e0fa:	f000 816a 	beq.w	100e3d2 <_svfprintf_r+0x16da>
 100e0fe:	2b00      	cmp	r3, #0
 100e100:	bf08      	it	eq
 100e102:	2c47      	cmpeq	r4, #71	; 0x47
 100e104:	f040 8167 	bne.w	100e3d6 <_svfprintf_r+0x16de>
 100e108:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100e10c:	930d      	str	r3, [sp, #52]	; 0x34
 100e10e:	ee18 3a90 	vmov	r3, s17
 100e112:	2b00      	cmp	r3, #0
 100e114:	f04f 0301 	mov.w	r3, #1
 100e118:	9304      	str	r3, [sp, #16]
 100e11a:	f2c0 8311 	blt.w	100e740 <_svfprintf_r+0x1a48>
 100e11e:	eeb0 cb48 	vmov.f64	d12, d8
 100e122:	461d      	mov	r5, r3
 100e124:	2300      	movs	r3, #0
 100e126:	930c      	str	r3, [sp, #48]	; 0x30
 100e128:	ab26      	add	r3, sp, #152	; 0x98
 100e12a:	aa21      	add	r2, sp, #132	; 0x84
 100e12c:	9301      	str	r3, [sp, #4]
 100e12e:	2102      	movs	r1, #2
 100e130:	9200      	str	r2, [sp, #0]
 100e132:	ab1f      	add	r3, sp, #124	; 0x7c
 100e134:	462a      	mov	r2, r5
 100e136:	eeb0 0b4c 	vmov.f64	d0, d12
 100e13a:	4650      	mov	r0, sl
 100e13c:	f002 fce8 	bl	1010b10 <_dtoa_r>
 100e140:	2c47      	cmp	r4, #71	; 0x47
 100e142:	900b      	str	r0, [sp, #44]	; 0x2c
 100e144:	f040 8177 	bne.w	100e436 <_svfprintf_r+0x173e>
 100e148:	07f3      	lsls	r3, r6, #31
 100e14a:	f100 8174 	bmi.w	100e436 <_svfprintf_r+0x173e>
 100e14e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100e150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100e152:	2c47      	cmp	r4, #71	; 0x47
 100e154:	eba3 0302 	sub.w	r3, r3, r2
 100e158:	9312      	str	r3, [sp, #72]	; 0x48
 100e15a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100e15c:	9310      	str	r3, [sp, #64]	; 0x40
 100e15e:	f040 81b1 	bne.w	100e4c4 <_svfprintf_r+0x17cc>
 100e162:	9a04      	ldr	r2, [sp, #16]
 100e164:	f113 0f03 	cmn.w	r3, #3
 100e168:	bfa8      	it	ge
 100e16a:	429a      	cmpge	r2, r3
 100e16c:	f280 8185 	bge.w	100e47a <_svfprintf_r+0x1782>
 100e170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100e172:	2200      	movs	r2, #0
 100e174:	920a      	str	r2, [sp, #40]	; 0x28
 100e176:	3b02      	subs	r3, #2
 100e178:	930e      	str	r3, [sp, #56]	; 0x38
 100e17a:	f023 0420 	bic.w	r4, r3, #32
 100e17e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e180:	2c41      	cmp	r4, #65	; 0x41
 100e182:	f103 32ff 	add.w	r2, r3, #4294967295
 100e186:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 100e18a:	921f      	str	r2, [sp, #124]	; 0x7c
 100e18c:	bf04      	itt	eq
 100e18e:	330f      	addeq	r3, #15
 100e190:	b2db      	uxtbeq	r3, r3
 100e192:	2a00      	cmp	r2, #0
 100e194:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 100e198:	bfb7      	itett	lt
 100e19a:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 100e19c:	232b      	movge	r3, #43	; 0x2b
 100e19e:	f1c3 0201 	rsblt	r2, r3, #1
 100e1a2:	232d      	movlt	r3, #45	; 0x2d
 100e1a4:	2a09      	cmp	r2, #9
 100e1a6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 100e1aa:	f340 82d5 	ble.w	100e758 <_svfprintf_r+0x1a60>
 100e1ae:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 100e1b2:	f246 6567 	movw	r5, #26215	; 0x6667
 100e1b6:	f04f 0e0a 	mov.w	lr, #10
 100e1ba:	f2c6 6566 	movt	r5, #26214	; 0x6666
 100e1be:	4664      	mov	r4, ip
 100e1c0:	e000      	b.n	100e1c4 <_svfprintf_r+0x14cc>
 100e1c2:	460c      	mov	r4, r1
 100e1c4:	fb85 3002 	smull	r3, r0, r5, r2
 100e1c8:	17d3      	asrs	r3, r2, #31
 100e1ca:	2a63      	cmp	r2, #99	; 0x63
 100e1cc:	f104 31ff 	add.w	r1, r4, #4294967295
 100e1d0:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 100e1d4:	fb0e 2013 	mls	r0, lr, r3, r2
 100e1d8:	461a      	mov	r2, r3
 100e1da:	f100 0030 	add.w	r0, r0, #48	; 0x30
 100e1de:	f804 0c01 	strb.w	r0, [r4, #-1]
 100e1e2:	dcee      	bgt.n	100e1c2 <_svfprintf_r+0x14ca>
 100e1e4:	1ea2      	subs	r2, r4, #2
 100e1e6:	3330      	adds	r3, #48	; 0x30
 100e1e8:	4594      	cmp	ip, r2
 100e1ea:	b2db      	uxtb	r3, r3
 100e1ec:	f801 3c01 	strb.w	r3, [r1, #-1]
 100e1f0:	f240 831f 	bls.w	100e832 <_svfprintf_r+0x1b3a>
 100e1f4:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 100e1f8:	e001      	b.n	100e1fe <_svfprintf_r+0x1506>
 100e1fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 100e1fe:	458c      	cmp	ip, r1
 100e200:	f802 3b01 	strb.w	r3, [r2], #1
 100e204:	d1f9      	bne.n	100e1fa <_svfprintf_r+0x1502>
 100e206:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 100e20a:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 100e20e:	1b1b      	subs	r3, r3, r4
 100e210:	aa22      	add	r2, sp, #136	; 0x88
 100e212:	440b      	add	r3, r1
 100e214:	1a9b      	subs	r3, r3, r2
 100e216:	9318      	str	r3, [sp, #96]	; 0x60
 100e218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e21a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 100e21c:	2b01      	cmp	r3, #1
 100e21e:	441a      	add	r2, r3
 100e220:	9207      	str	r2, [sp, #28]
 100e222:	f340 82be 	ble.w	100e7a2 <_svfprintf_r+0x1aaa>
 100e226:	9b07      	ldr	r3, [sp, #28]
 100e228:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e22a:	4413      	add	r3, r2
 100e22c:	9307      	str	r3, [sp, #28]
 100e22e:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100e232:	2200      	movs	r2, #0
 100e234:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 100e238:	9b07      	ldr	r3, [sp, #28]
 100e23a:	9213      	str	r2, [sp, #76]	; 0x4c
 100e23c:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100e240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100e244:	9303      	str	r3, [sp, #12]
 100e246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100e248:	2b00      	cmp	r3, #0
 100e24a:	f040 8134 	bne.w	100e4b6 <_svfprintf_r+0x17be>
 100e24e:	9304      	str	r3, [sp, #16]
 100e250:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100e254:	f7fe beb5 	b.w	100cfc2 <_svfprintf_r+0x2ca>
 100e258:	4634      	mov	r4, r6
 100e25a:	9e04      	ldr	r6, [sp, #16]
 100e25c:	460b      	mov	r3, r1
 100e25e:	3301      	adds	r3, #1
 100e260:	494c      	ldr	r1, [pc, #304]	; (100e394 <_svfprintf_r+0x169c>)
 100e262:	2b07      	cmp	r3, #7
 100e264:	4422      	add	r2, r4
 100e266:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e26a:	e9c9 1400 	strd	r1, r4, [r9]
 100e26e:	bfd8      	it	le
 100e270:	f109 0908 	addle.w	r9, r9, #8
 100e274:	f77f ab8d 	ble.w	100d992 <_svfprintf_r+0xc9a>
 100e278:	aa28      	add	r2, sp, #160	; 0xa0
 100e27a:	9908      	ldr	r1, [sp, #32]
 100e27c:	4650      	mov	r0, sl
 100e27e:	f005 f893 	bl	10133a8 <__ssprint_r>
 100e282:	2800      	cmp	r0, #0
 100e284:	f47f aa9b 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e288:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e28a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e28e:	f7ff bb80 	b.w	100d992 <_svfprintf_r+0xc9a>
 100e292:	2300      	movs	r3, #0
 100e294:	aa26      	add	r2, sp, #152	; 0x98
 100e296:	4619      	mov	r1, r3
 100e298:	9200      	str	r2, [sp, #0]
 100e29a:	4650      	mov	r0, sl
 100e29c:	aa21      	add	r2, sp, #132	; 0x84
 100e29e:	f002 f983 	bl	10105a8 <_wcsrtombs_r>
 100e2a2:	1c43      	adds	r3, r0, #1
 100e2a4:	9007      	str	r0, [sp, #28]
 100e2a6:	f000 81ef 	beq.w	100e688 <_svfprintf_r+0x1990>
 100e2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e2ac:	9321      	str	r3, [sp, #132]	; 0x84
 100e2ae:	9b07      	ldr	r3, [sp, #28]
 100e2b0:	2b00      	cmp	r3, #0
 100e2b2:	d03b      	beq.n	100e32c <_svfprintf_r+0x1634>
 100e2b4:	2b63      	cmp	r3, #99	; 0x63
 100e2b6:	f340 8087 	ble.w	100e3c8 <_svfprintf_r+0x16d0>
 100e2ba:	1c59      	adds	r1, r3, #1
 100e2bc:	4650      	mov	r0, sl
 100e2be:	f7fc ff0b 	bl	100b0d8 <_malloc_r>
 100e2c2:	900b      	str	r0, [sp, #44]	; 0x2c
 100e2c4:	2800      	cmp	r0, #0
 100e2c6:	f000 81df 	beq.w	100e688 <_svfprintf_r+0x1990>
 100e2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e2cc:	930a      	str	r3, [sp, #40]	; 0x28
 100e2ce:	2208      	movs	r2, #8
 100e2d0:	2100      	movs	r1, #0
 100e2d2:	a826      	add	r0, sp, #152	; 0x98
 100e2d4:	f7fd ff04 	bl	100c0e0 <memset>
 100e2d8:	9c07      	ldr	r4, [sp, #28]
 100e2da:	ab26      	add	r3, sp, #152	; 0x98
 100e2dc:	aa21      	add	r2, sp, #132	; 0x84
 100e2de:	9300      	str	r3, [sp, #0]
 100e2e0:	4650      	mov	r0, sl
 100e2e2:	4623      	mov	r3, r4
 100e2e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100e2e6:	f002 f95f 	bl	10105a8 <_wcsrtombs_r>
 100e2ea:	4284      	cmp	r4, r0
 100e2ec:	f040 8287 	bne.w	100e7fe <_svfprintf_r+0x1b06>
 100e2f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100e2f2:	2300      	movs	r3, #0
 100e2f4:	9509      	str	r5, [sp, #36]	; 0x24
 100e2f6:	9304      	str	r3, [sp, #16]
 100e2f8:	4614      	mov	r4, r2
 100e2fa:	9a07      	ldr	r2, [sp, #28]
 100e2fc:	9313      	str	r3, [sp, #76]	; 0x4c
 100e2fe:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100e302:	54a3      	strb	r3, [r4, r2]
 100e304:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100e308:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100e30c:	9303      	str	r3, [sp, #12]
 100e30e:	f7fe be58 	b.w	100cfc2 <_svfprintf_r+0x2ca>
 100e312:	aa28      	add	r2, sp, #160	; 0xa0
 100e314:	9908      	ldr	r1, [sp, #32]
 100e316:	4650      	mov	r0, sl
 100e318:	f005 f846 	bl	10133a8 <__ssprint_r>
 100e31c:	2800      	cmp	r0, #0
 100e31e:	f47f aa4e 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e322:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100e324:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e328:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e32a:	e5c6      	b.n	100deba <_svfprintf_r+0x11c2>
 100e32c:	9b07      	ldr	r3, [sp, #28]
 100e32e:	9509      	str	r5, [sp, #36]	; 0x24
 100e330:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100e334:	e9cd 3303 	strd	r3, r3, [sp, #12]
 100e338:	9313      	str	r3, [sp, #76]	; 0x4c
 100e33a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100e33e:	930a      	str	r3, [sp, #40]	; 0x28
 100e340:	f7fe be3f 	b.w	100cfc2 <_svfprintf_r+0x2ca>
 100e344:	aa28      	add	r2, sp, #160	; 0xa0
 100e346:	9908      	ldr	r1, [sp, #32]
 100e348:	4650      	mov	r0, sl
 100e34a:	f005 f82d 	bl	10133a8 <__ssprint_r>
 100e34e:	2800      	cmp	r0, #0
 100e350:	f47f aa35 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e354:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e356:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e35a:	f7ff bb12 	b.w	100d982 <_svfprintf_r+0xc8a>
 100e35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e360:	4619      	mov	r1, r3
 100e362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e364:	4419      	add	r1, r3
 100e366:	1b1b      	subs	r3, r3, r4
 100e368:	1b4c      	subs	r4, r1, r5
 100e36a:	429c      	cmp	r4, r3
 100e36c:	bfa8      	it	ge
 100e36e:	461c      	movge	r4, r3
 100e370:	f7ff bb48 	b.w	100da04 <_svfprintf_r+0xd0c>
 100e374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e376:	9309      	str	r3, [sp, #36]	; 0x24
 100e378:	9b05      	ldr	r3, [sp, #20]
 100e37a:	6812      	ldr	r2, [r2, #0]
 100e37c:	8013      	strh	r3, [r2, #0]
 100e37e:	f7fe bcfb 	b.w	100cd78 <_svfprintf_r+0x80>
 100e382:	681c      	ldr	r4, [r3, #0]
 100e384:	9209      	str	r2, [sp, #36]	; 0x24
 100e386:	9603      	str	r6, [sp, #12]
 100e388:	17e5      	asrs	r5, r4, #31
 100e38a:	4622      	mov	r2, r4
 100e38c:	462b      	mov	r3, r5
 100e38e:	f7fe bf76 	b.w	100d27e <_svfprintf_r+0x586>
 100e392:	bf00      	nop
 100e394:	01055c0c 	.word	0x01055c0c
 100e398:	9c10      	ldr	r4, [sp, #64]	; 0x40
 100e39a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100e39c:	9404      	str	r4, [sp, #16]
 100e39e:	f7fe faaf 	bl	100c900 <strlen>
 100e3a2:	9509      	str	r5, [sp, #36]	; 0x24
 100e3a4:	9413      	str	r4, [sp, #76]	; 0x4c
 100e3a6:	9411      	str	r4, [sp, #68]	; 0x44
 100e3a8:	940a      	str	r4, [sp, #40]	; 0x28
 100e3aa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100e3ae:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 100e3b2:	9007      	str	r0, [sp, #28]
 100e3b4:	9303      	str	r3, [sp, #12]
 100e3b6:	f7fe be04 	b.w	100cfc2 <_svfprintf_r+0x2ca>
 100e3ba:	4650      	mov	r0, sl
 100e3bc:	aa28      	add	r2, sp, #160	; 0xa0
 100e3be:	9908      	ldr	r1, [sp, #32]
 100e3c0:	f004 fff2 	bl	10133a8 <__ssprint_r>
 100e3c4:	f7fe bd8c 	b.w	100cee0 <_svfprintf_r+0x1e8>
 100e3c8:	2300      	movs	r3, #0
 100e3ca:	930a      	str	r3, [sp, #40]	; 0x28
 100e3cc:	ab3b      	add	r3, sp, #236	; 0xec
 100e3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 100e3d0:	e77d      	b.n	100e2ce <_svfprintf_r+0x15d6>
 100e3d2:	2306      	movs	r3, #6
 100e3d4:	9304      	str	r3, [sp, #16]
 100e3d6:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100e3da:	930d      	str	r3, [sp, #52]	; 0x34
 100e3dc:	ee18 3a90 	vmov	r3, s17
 100e3e0:	2b00      	cmp	r3, #0
 100e3e2:	f2c0 81ad 	blt.w	100e740 <_svfprintf_r+0x1a48>
 100e3e6:	eeb0 cb48 	vmov.f64	d12, d8
 100e3ea:	2300      	movs	r3, #0
 100e3ec:	930c      	str	r3, [sp, #48]	; 0x30
 100e3ee:	2c46      	cmp	r4, #70	; 0x46
 100e3f0:	f040 80f9 	bne.w	100e5e6 <_svfprintf_r+0x18ee>
 100e3f4:	ab26      	add	r3, sp, #152	; 0x98
 100e3f6:	aa21      	add	r2, sp, #132	; 0x84
 100e3f8:	9301      	str	r3, [sp, #4]
 100e3fa:	2103      	movs	r1, #3
 100e3fc:	ab1f      	add	r3, sp, #124	; 0x7c
 100e3fe:	9200      	str	r2, [sp, #0]
 100e400:	eeb0 0b4c 	vmov.f64	d0, d12
 100e404:	9a04      	ldr	r2, [sp, #16]
 100e406:	4650      	mov	r0, sl
 100e408:	f002 fb82 	bl	1010b10 <_dtoa_r>
 100e40c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 100e40e:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e416:	7802      	ldrb	r2, [r0, #0]
 100e418:	4603      	mov	r3, r0
 100e41a:	bf14      	ite	ne
 100e41c:	2301      	movne	r3, #1
 100e41e:	2300      	moveq	r3, #0
 100e420:	2a30      	cmp	r2, #48	; 0x30
 100e422:	bf14      	ite	ne
 100e424:	2300      	movne	r3, #0
 100e426:	f003 0301 	andeq.w	r3, r3, #1
 100e42a:	900b      	str	r0, [sp, #44]	; 0x2c
 100e42c:	2b00      	cmp	r3, #0
 100e42e:	f040 81db 	bne.w	100e7e8 <_svfprintf_r+0x1af0>
 100e432:	9b04      	ldr	r3, [sp, #16]
 100e434:	441d      	add	r5, r3
 100e436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e438:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100e43c:	441d      	add	r5, r3
 100e43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e442:	bf08      	it	eq
 100e444:	462b      	moveq	r3, r5
 100e446:	f43f ae83 	beq.w	100e150 <_svfprintf_r+0x1458>
 100e44a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100e44c:	42ab      	cmp	r3, r5
 100e44e:	f4bf ae7f 	bcs.w	100e150 <_svfprintf_r+0x1458>
 100e452:	2130      	movs	r1, #48	; 0x30
 100e454:	1c5a      	adds	r2, r3, #1
 100e456:	9226      	str	r2, [sp, #152]	; 0x98
 100e458:	7019      	strb	r1, [r3, #0]
 100e45a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100e45c:	429d      	cmp	r5, r3
 100e45e:	d8f9      	bhi.n	100e454 <_svfprintf_r+0x175c>
 100e460:	e676      	b.n	100e150 <_svfprintf_r+0x1458>
 100e462:	1c59      	adds	r1, r3, #1
 100e464:	4650      	mov	r0, sl
 100e466:	f7fc fe37 	bl	100b0d8 <_malloc_r>
 100e46a:	900b      	str	r0, [sp, #44]	; 0x2c
 100e46c:	2800      	cmp	r0, #0
 100e46e:	f000 810b 	beq.w	100e688 <_svfprintf_r+0x1990>
 100e472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e474:	930a      	str	r3, [sp, #40]	; 0x28
 100e476:	f7ff bb6a 	b.w	100db4e <_svfprintf_r+0xe56>
 100e47a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e47c:	4619      	mov	r1, r3
 100e47e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e480:	4299      	cmp	r1, r3
 100e482:	f300 809c 	bgt.w	100e5be <_svfprintf_r+0x18c6>
 100e486:	07f5      	lsls	r5, r6, #31
 100e488:	f140 814c 	bpl.w	100e724 <_svfprintf_r+0x1a2c>
 100e48c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e48e:	4413      	add	r3, r2
 100e490:	9307      	str	r3, [sp, #28]
 100e492:	0574      	lsls	r4, r6, #21
 100e494:	d503      	bpl.n	100e49e <_svfprintf_r+0x17a6>
 100e496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e498:	2b00      	cmp	r3, #0
 100e49a:	f300 8118 	bgt.w	100e6ce <_svfprintf_r+0x19d6>
 100e49e:	9b07      	ldr	r3, [sp, #28]
 100e4a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100e4a4:	9303      	str	r3, [sp, #12]
 100e4a6:	2367      	movs	r3, #103	; 0x67
 100e4a8:	930e      	str	r3, [sp, #56]	; 0x38
 100e4aa:	2300      	movs	r3, #0
 100e4ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 100e4ae:	930a      	str	r3, [sp, #40]	; 0x28
 100e4b0:	9313      	str	r3, [sp, #76]	; 0x4c
 100e4b2:	9311      	str	r3, [sp, #68]	; 0x44
 100e4b4:	e6c7      	b.n	100e246 <_svfprintf_r+0x154e>
 100e4b6:	212d      	movs	r1, #45	; 0x2d
 100e4b8:	2300      	movs	r3, #0
 100e4ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100e4be:	9304      	str	r3, [sp, #16]
 100e4c0:	f7fe bd80 	b.w	100cfc4 <_svfprintf_r+0x2cc>
 100e4c4:	2c46      	cmp	r4, #70	; 0x46
 100e4c6:	f040 81b1 	bne.w	100e82c <_svfprintf_r+0x1b34>
 100e4ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 100e4cc:	f006 0301 	and.w	r3, r6, #1
 100e4d0:	9a04      	ldr	r2, [sp, #16]
 100e4d2:	2900      	cmp	r1, #0
 100e4d4:	ea43 0302 	orr.w	r3, r3, r2
 100e4d8:	f340 8167 	ble.w	100e7aa <_svfprintf_r+0x1ab2>
 100e4dc:	2b00      	cmp	r3, #0
 100e4de:	f040 8134 	bne.w	100e74a <_svfprintf_r+0x1a52>
 100e4e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e4e4:	9307      	str	r3, [sp, #28]
 100e4e6:	2366      	movs	r3, #102	; 0x66
 100e4e8:	930e      	str	r3, [sp, #56]	; 0x38
 100e4ea:	0572      	lsls	r2, r6, #21
 100e4ec:	f100 80f1 	bmi.w	100e6d2 <_svfprintf_r+0x19da>
 100e4f0:	9b07      	ldr	r3, [sp, #28]
 100e4f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100e4f6:	9303      	str	r3, [sp, #12]
 100e4f8:	e7d7      	b.n	100e4aa <_svfprintf_r+0x17b2>
 100e4fa:	aa28      	add	r2, sp, #160	; 0xa0
 100e4fc:	4641      	mov	r1, r8
 100e4fe:	4650      	mov	r0, sl
 100e500:	f004 ff52 	bl	10133a8 <__ssprint_r>
 100e504:	2800      	cmp	r0, #0
 100e506:	f47f a95a 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e50a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100e50c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e510:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e512:	781b      	ldrb	r3, [r3, #0]
 100e514:	e463      	b.n	100ddde <_svfprintf_r+0x10e6>
 100e516:	aa28      	add	r2, sp, #160	; 0xa0
 100e518:	9908      	ldr	r1, [sp, #32]
 100e51a:	4650      	mov	r0, sl
 100e51c:	f004 ff44 	bl	10133a8 <__ssprint_r>
 100e520:	2800      	cmp	r0, #0
 100e522:	f47f a94c 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e526:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100e528:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e52c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100e530:	e4d8      	b.n	100dee4 <_svfprintf_r+0x11ec>
 100e532:	07f0      	lsls	r0, r6, #31
 100e534:	f57e ad9d 	bpl.w	100d072 <_svfprintf_r+0x37a>
 100e538:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e53a:	9916      	ldr	r1, [sp, #88]	; 0x58
 100e53c:	3301      	adds	r3, #1
 100e53e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100e540:	2b07      	cmp	r3, #7
 100e542:	440a      	add	r2, r1
 100e544:	f8c9 1004 	str.w	r1, [r9, #4]
 100e548:	f8c9 0000 	str.w	r0, [r9]
 100e54c:	922a      	str	r2, [sp, #168]	; 0xa8
 100e54e:	9329      	str	r3, [sp, #164]	; 0xa4
 100e550:	dce1      	bgt.n	100e516 <_svfprintf_r+0x181e>
 100e552:	f109 0908 	add.w	r9, r9, #8
 100e556:	e4c8      	b.n	100deea <_svfprintf_r+0x11f2>
 100e558:	aa28      	add	r2, sp, #160	; 0xa0
 100e55a:	9908      	ldr	r1, [sp, #32]
 100e55c:	4650      	mov	r0, sl
 100e55e:	f004 ff23 	bl	10133a8 <__ssprint_r>
 100e562:	2800      	cmp	r0, #0
 100e564:	f47f a92b 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e568:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100e56a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e56e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e570:	f7ff ba2e 	b.w	100d9d0 <_svfprintf_r+0xcd8>
 100e574:	aa28      	add	r2, sp, #160	; 0xa0
 100e576:	9908      	ldr	r1, [sp, #32]
 100e578:	4650      	mov	r0, sl
 100e57a:	f004 ff15 	bl	10133a8 <__ssprint_r>
 100e57e:	2800      	cmp	r0, #0
 100e580:	f47f a91d 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e584:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100e586:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e58a:	9912      	ldr	r1, [sp, #72]	; 0x48
 100e58c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e58e:	1acb      	subs	r3, r1, r3
 100e590:	f7ff ba38 	b.w	100da04 <_svfprintf_r+0xd0c>
 100e594:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100e596:	991a      	ldr	r1, [sp, #104]	; 0x68
 100e598:	ebaa 0a02 	sub.w	sl, sl, r2
 100e59c:	4650      	mov	r0, sl
 100e59e:	f7fe fa9d 	bl	100cadc <strncpy>
 100e5a2:	f898 3001 	ldrb.w	r3, [r8, #1]
 100e5a6:	b10b      	cbz	r3, 100e5ac <_svfprintf_r+0x18b4>
 100e5a8:	f108 0801 	add.w	r8, r8, #1
 100e5ac:	4620      	mov	r0, r4
 100e5ae:	4629      	mov	r1, r5
 100e5b0:	220a      	movs	r2, #10
 100e5b2:	2300      	movs	r3, #0
 100e5b4:	f7fb fed8 	bl	100a368 <__aeabi_uldivmod>
 100e5b8:	f04f 0900 	mov.w	r9, #0
 100e5bc:	e53b      	b.n	100e036 <_svfprintf_r+0x133e>
 100e5be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e5c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e5c2:	189a      	adds	r2, r3, r2
 100e5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e5c6:	9207      	str	r2, [sp, #28]
 100e5c8:	2b00      	cmp	r3, #0
 100e5ca:	bfc4      	itt	gt
 100e5cc:	2367      	movgt	r3, #103	; 0x67
 100e5ce:	930e      	strgt	r3, [sp, #56]	; 0x38
 100e5d0:	dc8b      	bgt.n	100e4ea <_svfprintf_r+0x17f2>
 100e5d2:	f1c3 0301 	rsb	r3, r3, #1
 100e5d6:	2167      	movs	r1, #103	; 0x67
 100e5d8:	441a      	add	r2, r3
 100e5da:	910e      	str	r1, [sp, #56]	; 0x38
 100e5dc:	9207      	str	r2, [sp, #28]
 100e5de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100e5e2:	9303      	str	r3, [sp, #12]
 100e5e4:	e761      	b.n	100e4aa <_svfprintf_r+0x17b2>
 100e5e6:	2c45      	cmp	r4, #69	; 0x45
 100e5e8:	f040 8110 	bne.w	100e80c <_svfprintf_r+0x1b14>
 100e5ec:	9b04      	ldr	r3, [sp, #16]
 100e5ee:	aa26      	add	r2, sp, #152	; 0x98
 100e5f0:	2102      	movs	r1, #2
 100e5f2:	9201      	str	r2, [sp, #4]
 100e5f4:	1c5d      	adds	r5, r3, #1
 100e5f6:	eeb0 0b4c 	vmov.f64	d0, d12
 100e5fa:	ab21      	add	r3, sp, #132	; 0x84
 100e5fc:	4650      	mov	r0, sl
 100e5fe:	9300      	str	r3, [sp, #0]
 100e600:	462a      	mov	r2, r5
 100e602:	ab1f      	add	r3, sp, #124	; 0x7c
 100e604:	f002 fa84 	bl	1010b10 <_dtoa_r>
 100e608:	900b      	str	r0, [sp, #44]	; 0x2c
 100e60a:	e714      	b.n	100e436 <_svfprintf_r+0x173e>
 100e60c:	2300      	movs	r3, #0
 100e60e:	eeb0 0b48 	vmov.f64	d0, d8
 100e612:	930c      	str	r3, [sp, #48]	; 0x30
 100e614:	f7ff baa4 	b.w	100db60 <_svfprintf_r+0xe68>
 100e618:	424c      	negs	r4, r1
 100e61a:	3110      	adds	r1, #16
 100e61c:	da1d      	bge.n	100e65a <_svfprintf_r+0x1962>
 100e61e:	2510      	movs	r5, #16
 100e620:	e002      	b.n	100e628 <_svfprintf_r+0x1930>
 100e622:	3c10      	subs	r4, #16
 100e624:	2c10      	cmp	r4, #16
 100e626:	dd18      	ble.n	100e65a <_svfprintf_r+0x1962>
 100e628:	3301      	adds	r3, #1
 100e62a:	4985      	ldr	r1, [pc, #532]	; (100e840 <_svfprintf_r+0x1b48>)
 100e62c:	2b07      	cmp	r3, #7
 100e62e:	f102 0210 	add.w	r2, r2, #16
 100e632:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e636:	e9c9 1500 	strd	r1, r5, [r9]
 100e63a:	f109 0908 	add.w	r9, r9, #8
 100e63e:	ddf0      	ble.n	100e622 <_svfprintf_r+0x192a>
 100e640:	aa28      	add	r2, sp, #160	; 0xa0
 100e642:	9908      	ldr	r1, [sp, #32]
 100e644:	4650      	mov	r0, sl
 100e646:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e64a:	f004 fead 	bl	10133a8 <__ssprint_r>
 100e64e:	2800      	cmp	r0, #0
 100e650:	f47f a8b5 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e654:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100e658:	e7e3      	b.n	100e622 <_svfprintf_r+0x192a>
 100e65a:	3301      	adds	r3, #1
 100e65c:	4978      	ldr	r1, [pc, #480]	; (100e840 <_svfprintf_r+0x1b48>)
 100e65e:	2b07      	cmp	r3, #7
 100e660:	4422      	add	r2, r4
 100e662:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e666:	e9c9 1400 	strd	r1, r4, [r9]
 100e66a:	f77f af72 	ble.w	100e552 <_svfprintf_r+0x185a>
 100e66e:	aa28      	add	r2, sp, #160	; 0xa0
 100e670:	9908      	ldr	r1, [sp, #32]
 100e672:	4650      	mov	r0, sl
 100e674:	f004 fe98 	bl	10133a8 <__ssprint_r>
 100e678:	2800      	cmp	r0, #0
 100e67a:	f47f a8a0 	bne.w	100d7be <_svfprintf_r+0xac6>
 100e67e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e680:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e684:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e686:	e430      	b.n	100deea <_svfprintf_r+0x11f2>
 100e688:	9a08      	ldr	r2, [sp, #32]
 100e68a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 100e68e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100e692:	8193      	strh	r3, [r2, #12]
 100e694:	f7fe bc27 	b.w	100cee6 <_svfprintf_r+0x1ee>
 100e698:	9526      	str	r5, [sp, #152]	; 0x98
 100e69a:	4619      	mov	r1, r3
 100e69c:	7bc5      	ldrb	r5, [r0, #15]
 100e69e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 100e6a2:	4295      	cmp	r5, r2
 100e6a4:	d10a      	bne.n	100e6bc <_svfprintf_r+0x19c4>
 100e6a6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 100e6aa:	f801 cc01 	strb.w	ip, [r1, #-1]
 100e6ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 100e6b0:	1e4a      	subs	r2, r1, #1
 100e6b2:	9226      	str	r2, [sp, #152]	; 0x98
 100e6b4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 100e6b8:	4295      	cmp	r5, r2
 100e6ba:	d0f6      	beq.n	100e6aa <_svfprintf_r+0x19b2>
 100e6bc:	2a39      	cmp	r2, #57	; 0x39
 100e6be:	bf16      	itet	ne
 100e6c0:	3201      	addne	r2, #1
 100e6c2:	7a82      	ldrbeq	r2, [r0, #10]
 100e6c4:	b2d2      	uxtbne	r2, r2
 100e6c6:	f801 2c01 	strb.w	r2, [r1, #-1]
 100e6ca:	f7ff ba9a 	b.w	100dc02 <_svfprintf_r+0xf0a>
 100e6ce:	2367      	movs	r3, #103	; 0x67
 100e6d0:	930e      	str	r3, [sp, #56]	; 0x38
 100e6d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e6d4:	2200      	movs	r2, #0
 100e6d6:	9213      	str	r2, [sp, #76]	; 0x4c
 100e6d8:	9211      	str	r2, [sp, #68]	; 0x44
 100e6da:	7803      	ldrb	r3, [r0, #0]
 100e6dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 100e6de:	2bff      	cmp	r3, #255	; 0xff
 100e6e0:	d00b      	beq.n	100e6fa <_svfprintf_r+0x1a02>
 100e6e2:	4293      	cmp	r3, r2
 100e6e4:	da09      	bge.n	100e6fa <_svfprintf_r+0x1a02>
 100e6e6:	7841      	ldrb	r1, [r0, #1]
 100e6e8:	1ad2      	subs	r2, r2, r3
 100e6ea:	b1b9      	cbz	r1, 100e71c <_svfprintf_r+0x1a24>
 100e6ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100e6ee:	3001      	adds	r0, #1
 100e6f0:	3301      	adds	r3, #1
 100e6f2:	9311      	str	r3, [sp, #68]	; 0x44
 100e6f4:	460b      	mov	r3, r1
 100e6f6:	2bff      	cmp	r3, #255	; 0xff
 100e6f8:	d1f3      	bne.n	100e6e2 <_svfprintf_r+0x19ea>
 100e6fa:	9210      	str	r2, [sp, #64]	; 0x40
 100e6fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100e6fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 100e700:	9907      	ldr	r1, [sp, #28]
 100e702:	4413      	add	r3, r2
 100e704:	2200      	movs	r2, #0
 100e706:	920a      	str	r2, [sp, #40]	; 0x28
 100e708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100e70a:	9014      	str	r0, [sp, #80]	; 0x50
 100e70c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 100e70e:	fb02 1303 	mla	r3, r2, r3, r1
 100e712:	9307      	str	r3, [sp, #28]
 100e714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100e718:	9303      	str	r3, [sp, #12]
 100e71a:	e594      	b.n	100e246 <_svfprintf_r+0x154e>
 100e71c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 100e71e:	3101      	adds	r1, #1
 100e720:	9113      	str	r1, [sp, #76]	; 0x4c
 100e722:	e7dc      	b.n	100e6de <_svfprintf_r+0x19e6>
 100e724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e726:	9307      	str	r3, [sp, #28]
 100e728:	e6b3      	b.n	100e492 <_svfprintf_r+0x179a>
 100e72a:	9b04      	ldr	r3, [sp, #16]
 100e72c:	9509      	str	r5, [sp, #36]	; 0x24
 100e72e:	9004      	str	r0, [sp, #16]
 100e730:	9303      	str	r3, [sp, #12]
 100e732:	9307      	str	r3, [sp, #28]
 100e734:	9013      	str	r0, [sp, #76]	; 0x4c
 100e736:	9011      	str	r0, [sp, #68]	; 0x44
 100e738:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100e73c:	f7fe bc41 	b.w	100cfc2 <_svfprintf_r+0x2ca>
 100e740:	232d      	movs	r3, #45	; 0x2d
 100e742:	eeb1 cb48 	vneg.f64	d12, d8
 100e746:	930c      	str	r3, [sp, #48]	; 0x30
 100e748:	e651      	b.n	100e3ee <_svfprintf_r+0x16f6>
 100e74a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e74c:	18cb      	adds	r3, r1, r3
 100e74e:	2166      	movs	r1, #102	; 0x66
 100e750:	441a      	add	r2, r3
 100e752:	910e      	str	r1, [sp, #56]	; 0x38
 100e754:	9207      	str	r2, [sp, #28]
 100e756:	e6c8      	b.n	100e4ea <_svfprintf_r+0x17f2>
 100e758:	2c41      	cmp	r4, #65	; 0x41
 100e75a:	a922      	add	r1, sp, #136	; 0x88
 100e75c:	bf08      	it	eq
 100e75e:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 100e762:	f102 0230 	add.w	r2, r2, #48	; 0x30
 100e766:	bf1e      	ittt	ne
 100e768:	2330      	movne	r3, #48	; 0x30
 100e76a:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 100e76e:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 100e772:	f803 2b01 	strb.w	r2, [r3], #1
 100e776:	1a5b      	subs	r3, r3, r1
 100e778:	9318      	str	r3, [sp, #96]	; 0x60
 100e77a:	e54d      	b.n	100e218 <_svfprintf_r+0x1520>
 100e77c:	ee18 3a90 	vmov	r3, s17
 100e780:	f248 24b8 	movw	r4, #33464	; 0x82b8
 100e784:	f2c0 1405 	movt	r4, #261	; 0x105
 100e788:	2b00      	cmp	r3, #0
 100e78a:	f248 23b4 	movw	r3, #33460	; 0x82b4
 100e78e:	f2c0 1305 	movt	r3, #261	; 0x105
 100e792:	bfb6      	itet	lt
 100e794:	212d      	movlt	r1, #45	; 0x2d
 100e796:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 100e79a:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 100e79e:	f7fe bec2 	b.w	100d526 <_svfprintf_r+0x82e>
 100e7a2:	07f3      	lsls	r3, r6, #31
 100e7a4:	f57f ad43 	bpl.w	100e22e <_svfprintf_r+0x1536>
 100e7a8:	e53d      	b.n	100e226 <_svfprintf_r+0x152e>
 100e7aa:	b92b      	cbnz	r3, 100e7b8 <_svfprintf_r+0x1ac0>
 100e7ac:	2301      	movs	r3, #1
 100e7ae:	2266      	movs	r2, #102	; 0x66
 100e7b0:	9303      	str	r3, [sp, #12]
 100e7b2:	920e      	str	r2, [sp, #56]	; 0x38
 100e7b4:	9307      	str	r3, [sp, #28]
 100e7b6:	e678      	b.n	100e4aa <_svfprintf_r+0x17b2>
 100e7b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e7ba:	2266      	movs	r2, #102	; 0x66
 100e7bc:	920e      	str	r2, [sp, #56]	; 0x38
 100e7be:	9a04      	ldr	r2, [sp, #16]
 100e7c0:	3301      	adds	r3, #1
 100e7c2:	441a      	add	r2, r3
 100e7c4:	9207      	str	r2, [sp, #28]
 100e7c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100e7ca:	9303      	str	r3, [sp, #12]
 100e7cc:	e66d      	b.n	100e4aa <_svfprintf_r+0x17b2>
 100e7ce:	4649      	mov	r1, r9
 100e7d0:	e46e      	b.n	100e0b0 <_svfprintf_r+0x13b8>
 100e7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e7d4:	787b      	ldrb	r3, [r7, #1]
 100e7d6:	460f      	mov	r7, r1
 100e7d8:	f852 0b04 	ldr.w	r0, [r2], #4
 100e7dc:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 100e7e0:	9209      	str	r2, [sp, #36]	; 0x24
 100e7e2:	9104      	str	r1, [sp, #16]
 100e7e4:	f7fe baf3 	b.w	100cdce <_svfprintf_r+0xd6>
 100e7e8:	9b04      	ldr	r3, [sp, #16]
 100e7ea:	f1c3 0501 	rsb	r5, r3, #1
 100e7ee:	951f      	str	r5, [sp, #124]	; 0x7c
 100e7f0:	e61f      	b.n	100e432 <_svfprintf_r+0x173a>
 100e7f2:	9603      	str	r6, [sp, #12]
 100e7f4:	f7fe be0c 	b.w	100d410 <_svfprintf_r+0x718>
 100e7f8:	9603      	str	r6, [sp, #12]
 100e7fa:	f7fe bd94 	b.w	100d326 <_svfprintf_r+0x62e>
 100e7fe:	9a08      	ldr	r2, [sp, #32]
 100e800:	8993      	ldrh	r3, [r2, #12]
 100e802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100e806:	8193      	strh	r3, [r2, #12]
 100e808:	f7fe bfd9 	b.w	100d7be <_svfprintf_r+0xac6>
 100e80c:	9d04      	ldr	r5, [sp, #16]
 100e80e:	e48b      	b.n	100e128 <_svfprintf_r+0x1430>
 100e810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e812:	9912      	ldr	r1, [sp, #72]	; 0x48
 100e814:	440b      	add	r3, r1
 100e816:	9304      	str	r3, [sp, #16]
 100e818:	f7ff baeb 	b.w	100ddf2 <_svfprintf_r+0x10fa>
 100e81c:	230c      	movs	r3, #12
 100e81e:	f04f 32ff 	mov.w	r2, #4294967295
 100e822:	f8ca 3000 	str.w	r3, [sl]
 100e826:	9205      	str	r2, [sp, #20]
 100e828:	f7fe bb64 	b.w	100cef4 <_svfprintf_r+0x1fc>
 100e82c:	2300      	movs	r3, #0
 100e82e:	930a      	str	r3, [sp, #40]	; 0x28
 100e830:	e4a5      	b.n	100e17e <_svfprintf_r+0x1486>
 100e832:	2302      	movs	r3, #2
 100e834:	9318      	str	r3, [sp, #96]	; 0x60
 100e836:	e4ef      	b.n	100e218 <_svfprintf_r+0x1520>
 100e838:	4633      	mov	r3, r6
 100e83a:	f7fe bdb1 	b.w	100d3a0 <_svfprintf_r+0x6a8>
 100e83e:	bf00      	nop
 100e840:	01055c0c 	.word	0x01055c0c
 100e844:	00000000 	.word	0x00000000

0100e848 <_vfprintf_r>:
 100e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100e84c:	4615      	mov	r5, r2
 100e84e:	ed2d 8b0a 	vpush	{d8-d12}
 100e852:	461c      	mov	r4, r3
 100e854:	4682      	mov	sl, r0
 100e856:	b0d5      	sub	sp, #340	; 0x154
 100e858:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 100e85c:	9105      	str	r1, [sp, #20]
 100e85e:	f003 fd37 	bl	10122d0 <_localeconv_r>
 100e862:	9409      	str	r4, [sp, #36]	; 0x24
 100e864:	6803      	ldr	r3, [r0, #0]
 100e866:	4618      	mov	r0, r3
 100e868:	9317      	str	r3, [sp, #92]	; 0x5c
 100e86a:	f7fe f849 	bl	100c900 <strlen>
 100e86e:	2208      	movs	r2, #8
 100e870:	2100      	movs	r1, #0
 100e872:	9015      	str	r0, [sp, #84]	; 0x54
 100e874:	4658      	mov	r0, fp
 100e876:	f7fd fc33 	bl	100c0e0 <memset>
 100e87a:	f1ba 0f00 	cmp.w	sl, #0
 100e87e:	d004      	beq.n	100e88a <_vfprintf_r+0x42>
 100e880:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 100e884:	2b00      	cmp	r3, #0
 100e886:	f000 8440 	beq.w	100f10a <_vfprintf_r+0x8c2>
 100e88a:	9905      	ldr	r1, [sp, #20]
 100e88c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 100e890:	b293      	uxth	r3, r2
 100e892:	0498      	lsls	r0, r3, #18
 100e894:	d407      	bmi.n	100e8a6 <_vfprintf_r+0x5e>
 100e896:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 100e89a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 100e89c:	818b      	strh	r3, [r1, #12]
 100e89e:	b29b      	uxth	r3, r3
 100e8a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 100e8a4:	664a      	str	r2, [r1, #100]	; 0x64
 100e8a6:	071a      	lsls	r2, r3, #28
 100e8a8:	f140 80be 	bpl.w	100ea28 <_vfprintf_r+0x1e0>
 100e8ac:	9a05      	ldr	r2, [sp, #20]
 100e8ae:	6912      	ldr	r2, [r2, #16]
 100e8b0:	2a00      	cmp	r2, #0
 100e8b2:	f000 80b9 	beq.w	100ea28 <_vfprintf_r+0x1e0>
 100e8b6:	f003 031a 	and.w	r3, r3, #26
 100e8ba:	2b0a      	cmp	r3, #10
 100e8bc:	f000 80c2 	beq.w	100ea44 <_vfprintf_r+0x1fc>
 100e8c0:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 100e8c4:	f248 7858 	movw	r8, #34648	; 0x8758
 100e8c8:	ed9f 8b81 	vldr	d8, [pc, #516]	; 100ead0 <_vfprintf_r+0x288>
 100e8cc:	f2c0 1805 	movt	r8, #261	; 0x105
 100e8d0:	462f      	mov	r7, r5
 100e8d2:	2300      	movs	r3, #0
 100e8d4:	f648 3188 	movw	r1, #35720	; 0x8b88
 100e8d8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e8dc:	f2c0 1105 	movt	r1, #261	; 0x105
 100e8e0:	9312      	str	r3, [sp, #72]	; 0x48
 100e8e2:	910f      	str	r1, [sp, #60]	; 0x3c
 100e8e4:	9316      	str	r3, [sp, #88]	; 0x58
 100e8e6:	9318      	str	r3, [sp, #96]	; 0x60
 100e8e8:	9314      	str	r3, [sp, #80]	; 0x50
 100e8ea:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 100e8ee:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 100e8f2:	9306      	str	r3, [sp, #24]
 100e8f4:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 100e8f8:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 100e8fc:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 100e900:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 100e902:	463c      	mov	r4, r7
 100e904:	f8d8 3000 	ldr.w	r3, [r8]
 100e908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100e90a:	2b00      	cmp	r3, #0
 100e90c:	bf08      	it	eq
 100e90e:	4633      	moveq	r3, r6
 100e910:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 100e914:	f7fc fb1e 	bl	100af54 <__locale_mb_cur_max>
 100e918:	f8cd b000 	str.w	fp, [sp]
 100e91c:	4622      	mov	r2, r4
 100e91e:	a920      	add	r1, sp, #128	; 0x80
 100e920:	4603      	mov	r3, r0
 100e922:	4650      	mov	r0, sl
 100e924:	47a8      	blx	r5
 100e926:	2800      	cmp	r0, #0
 100e928:	4603      	mov	r3, r0
 100e92a:	f000 80a1 	beq.w	100ea70 <_vfprintf_r+0x228>
 100e92e:	f2c0 8097 	blt.w	100ea60 <_vfprintf_r+0x218>
 100e932:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100e934:	2a25      	cmp	r2, #37	; 0x25
 100e936:	d001      	beq.n	100e93c <_vfprintf_r+0xf4>
 100e938:	441c      	add	r4, r3
 100e93a:	e7e3      	b.n	100e904 <_vfprintf_r+0xbc>
 100e93c:	1be6      	subs	r6, r4, r7
 100e93e:	4605      	mov	r5, r0
 100e940:	f040 8099 	bne.w	100ea76 <_vfprintf_r+0x22e>
 100e944:	2300      	movs	r3, #0
 100e946:	1c67      	adds	r7, r4, #1
 100e948:	461e      	mov	r6, r3
 100e94a:	9307      	str	r3, [sp, #28]
 100e94c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100e950:	f04f 32ff 	mov.w	r2, #4294967295
 100e954:	7863      	ldrb	r3, [r4, #1]
 100e956:	240a      	movs	r4, #10
 100e958:	9204      	str	r2, [sp, #16]
 100e95a:	3701      	adds	r7, #1
 100e95c:	f1a3 0220 	sub.w	r2, r3, #32
 100e960:	2a5a      	cmp	r2, #90	; 0x5a
 100e962:	f200 83d7 	bhi.w	100f114 <_vfprintf_r+0x8cc>
 100e966:	e8df f012 	tbh	[pc, r2, lsl #1]
 100e96a:	01de      	.short	0x01de
 100e96c:	03d503d5 	.word	0x03d503d5
 100e970:	03d501da 	.word	0x03d501da
 100e974:	03d503d5 	.word	0x03d503d5
 100e978:	03d5020d 	.word	0x03d5020d
 100e97c:	01ff03d5 	.word	0x01ff03d5
 100e980:	03d501fa 	.word	0x03d501fa
 100e984:	022e01f6 	.word	0x022e01f6
 100e988:	022a03d5 	.word	0x022a03d5
 100e98c:	01b801b8 	.word	0x01b801b8
 100e990:	01b801b8 	.word	0x01b801b8
 100e994:	01b801b8 	.word	0x01b801b8
 100e998:	01b801b8 	.word	0x01b801b8
 100e99c:	03d501b8 	.word	0x03d501b8
 100e9a0:	03d503d5 	.word	0x03d503d5
 100e9a4:	03d503d5 	.word	0x03d503d5
 100e9a8:	03d503d5 	.word	0x03d503d5
 100e9ac:	03d50248 	.word	0x03d50248
 100e9b0:	03270367 	.word	0x03270367
 100e9b4:	02480248 	.word	0x02480248
 100e9b8:	03d50248 	.word	0x03d50248
 100e9bc:	03d503d5 	.word	0x03d503d5
 100e9c0:	032303d5 	.word	0x032303d5
 100e9c4:	03d503d5 	.word	0x03d503d5
 100e9c8:	03d50317 	.word	0x03d50317
 100e9cc:	03d503d5 	.word	0x03d503d5
 100e9d0:	03d502e7 	.word	0x03d502e7
 100e9d4:	03d502d8 	.word	0x03d502d8
 100e9d8:	02aa03d5 	.word	0x02aa03d5
 100e9dc:	03d503d5 	.word	0x03d503d5
 100e9e0:	03d503d5 	.word	0x03d503d5
 100e9e4:	03d503d5 	.word	0x03d503d5
 100e9e8:	03d503d5 	.word	0x03d503d5
 100e9ec:	03d50248 	.word	0x03d50248
 100e9f0:	027e0367 	.word	0x027e0367
 100e9f4:	02480248 	.word	0x02480248
 100e9f8:	03c60248 	.word	0x03c60248
 100e9fc:	005b027e 	.word	0x005b027e
 100ea00:	03bc03d5 	.word	0x03bc03d5
 100ea04:	03a703d5 	.word	0x03a703d5
 100ea08:	01c50391 	.word	0x01c50391
 100ea0c:	03d5005b 	.word	0x03d5005b
 100ea10:	005d02e7 	.word	0x005d02e7
 100ea14:	03d501e8 	.word	0x03d501e8
 100ea18:	00b703d5 	.word	0x00b703d5
 100ea1c:	005d03d5 	.word	0x005d03d5
 100ea20:	f046 0620 	orr.w	r6, r6, #32
 100ea24:	783b      	ldrb	r3, [r7, #0]
 100ea26:	e798      	b.n	100e95a <_vfprintf_r+0x112>
 100ea28:	9905      	ldr	r1, [sp, #20]
 100ea2a:	4650      	mov	r0, sl
 100ea2c:	f001 fef0 	bl	1010810 <__swsetup_r>
 100ea30:	2800      	cmp	r0, #0
 100ea32:	f041 83df 	bne.w	10101f4 <_vfprintf_r+0x19ac>
 100ea36:	9b05      	ldr	r3, [sp, #20]
 100ea38:	899b      	ldrh	r3, [r3, #12]
 100ea3a:	f003 031a 	and.w	r3, r3, #26
 100ea3e:	2b0a      	cmp	r3, #10
 100ea40:	f47f af3e 	bne.w	100e8c0 <_vfprintf_r+0x78>
 100ea44:	9b05      	ldr	r3, [sp, #20]
 100ea46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 100ea4a:	2b00      	cmp	r3, #0
 100ea4c:	f6ff af38 	blt.w	100e8c0 <_vfprintf_r+0x78>
 100ea50:	4623      	mov	r3, r4
 100ea52:	462a      	mov	r2, r5
 100ea54:	9905      	ldr	r1, [sp, #20]
 100ea56:	4650      	mov	r0, sl
 100ea58:	f001 fcd4 	bl	1010404 <__sbprintf>
 100ea5c:	9006      	str	r0, [sp, #24]
 100ea5e:	e027      	b.n	100eab0 <_vfprintf_r+0x268>
 100ea60:	2208      	movs	r2, #8
 100ea62:	2100      	movs	r1, #0
 100ea64:	4658      	mov	r0, fp
 100ea66:	f7fd fb3b 	bl	100c0e0 <memset>
 100ea6a:	2301      	movs	r3, #1
 100ea6c:	441c      	add	r4, r3
 100ea6e:	e749      	b.n	100e904 <_vfprintf_r+0xbc>
 100ea70:	1be6      	subs	r6, r4, r7
 100ea72:	4605      	mov	r5, r0
 100ea74:	d012      	beq.n	100ea9c <_vfprintf_r+0x254>
 100ea76:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100ea7a:	e9c9 7600 	strd	r7, r6, [r9]
 100ea7e:	3301      	adds	r3, #1
 100ea80:	4432      	add	r2, r6
 100ea82:	2b07      	cmp	r3, #7
 100ea84:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100ea88:	bfd8      	it	le
 100ea8a:	f109 0908 	addle.w	r9, r9, #8
 100ea8e:	dc15      	bgt.n	100eabc <_vfprintf_r+0x274>
 100ea90:	9b06      	ldr	r3, [sp, #24]
 100ea92:	4433      	add	r3, r6
 100ea94:	9306      	str	r3, [sp, #24]
 100ea96:	2d00      	cmp	r5, #0
 100ea98:	f47f af54 	bne.w	100e944 <_vfprintf_r+0xfc>
 100ea9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 100ea9e:	2b00      	cmp	r3, #0
 100eaa0:	f041 81fa 	bne.w	100fe98 <_vfprintf_r+0x1650>
 100eaa4:	9b05      	ldr	r3, [sp, #20]
 100eaa6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 100eaaa:	0659      	lsls	r1, r3, #25
 100eaac:	f101 83a2 	bmi.w	10101f4 <_vfprintf_r+0x19ac>
 100eab0:	9806      	ldr	r0, [sp, #24]
 100eab2:	b055      	add	sp, #340	; 0x154
 100eab4:	ecbd 8b0a 	vpop	{d8-d12}
 100eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100eabc:	aa28      	add	r2, sp, #160	; 0xa0
 100eabe:	9905      	ldr	r1, [sp, #20]
 100eac0:	4650      	mov	r0, sl
 100eac2:	f005 fbf3 	bl	10142ac <__sprint_r>
 100eac6:	2800      	cmp	r0, #0
 100eac8:	d1ec      	bne.n	100eaa4 <_vfprintf_r+0x25c>
 100eaca:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100eace:	e7df      	b.n	100ea90 <_vfprintf_r+0x248>
	...
 100ead8:	06b0      	lsls	r0, r6, #26
 100eada:	930e      	str	r3, [sp, #56]	; 0x38
 100eadc:	f248 23bc 	movw	r3, #33468	; 0x82bc
 100eae0:	f2c0 1305 	movt	r3, #261	; 0x105
 100eae4:	9316      	str	r3, [sp, #88]	; 0x58
 100eae6:	f140 81f3 	bpl.w	100eed0 <_vfprintf_r+0x688>
 100eaea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100eaec:	3507      	adds	r5, #7
 100eaee:	f025 0307 	bic.w	r3, r5, #7
 100eaf2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 100eaf6:	9309      	str	r3, [sp, #36]	; 0x24
 100eaf8:	ea54 0305 	orrs.w	r3, r4, r5
 100eafc:	f006 0301 	and.w	r3, r6, #1
 100eb00:	bf08      	it	eq
 100eb02:	2300      	moveq	r3, #0
 100eb04:	2b00      	cmp	r3, #0
 100eb06:	f040 81ff 	bne.w	100ef08 <_vfprintf_r+0x6c0>
 100eb0a:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100eb0e:	9303      	str	r3, [sp, #12]
 100eb10:	2302      	movs	r3, #2
 100eb12:	9904      	ldr	r1, [sp, #16]
 100eb14:	2200      	movs	r2, #0
 100eb16:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100eb1a:	1c4a      	adds	r2, r1, #1
 100eb1c:	f000 826d 	beq.w	100effa <_vfprintf_r+0x7b2>
 100eb20:	ea54 0205 	orrs.w	r2, r4, r5
 100eb24:	9a03      	ldr	r2, [sp, #12]
 100eb26:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 100eb2a:	bf14      	ite	ne
 100eb2c:	2201      	movne	r2, #1
 100eb2e:	2200      	moveq	r2, #0
 100eb30:	2900      	cmp	r1, #0
 100eb32:	bf18      	it	ne
 100eb34:	2201      	movne	r2, #1
 100eb36:	2a00      	cmp	r2, #0
 100eb38:	f040 8745 	bne.w	100f9c6 <_vfprintf_r+0x117e>
 100eb3c:	2b00      	cmp	r3, #0
 100eb3e:	f040 8510 	bne.w	100f562 <_vfprintf_r+0xd1a>
 100eb42:	9a03      	ldr	r2, [sp, #12]
 100eb44:	9304      	str	r3, [sp, #16]
 100eb46:	f012 0201 	ands.w	r2, r2, #1
 100eb4a:	9208      	str	r2, [sp, #32]
 100eb4c:	bf04      	itt	eq
 100eb4e:	ab54      	addeq	r3, sp, #336	; 0x150
 100eb50:	930b      	streq	r3, [sp, #44]	; 0x2c
 100eb52:	d005      	beq.n	100eb60 <_vfprintf_r+0x318>
 100eb54:	2330      	movs	r3, #48	; 0x30
 100eb56:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 100eb5a:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100eb5e:	930b      	str	r3, [sp, #44]	; 0x2c
 100eb60:	2300      	movs	r3, #0
 100eb62:	9a04      	ldr	r2, [sp, #16]
 100eb64:	930a      	str	r3, [sp, #40]	; 0x28
 100eb66:	9313      	str	r3, [sp, #76]	; 0x4c
 100eb68:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100eb6c:	9b08      	ldr	r3, [sp, #32]
 100eb6e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100eb72:	4293      	cmp	r3, r2
 100eb74:	bfb8      	it	lt
 100eb76:	4613      	movlt	r3, r2
 100eb78:	9303      	str	r3, [sp, #12]
 100eb7a:	b111      	cbz	r1, 100eb82 <_vfprintf_r+0x33a>
 100eb7c:	9b03      	ldr	r3, [sp, #12]
 100eb7e:	3301      	adds	r3, #1
 100eb80:	9303      	str	r3, [sp, #12]
 100eb82:	f016 0302 	ands.w	r3, r6, #2
 100eb86:	930c      	str	r3, [sp, #48]	; 0x30
 100eb88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100eb8a:	bf1e      	ittt	ne
 100eb8c:	9b03      	ldrne	r3, [sp, #12]
 100eb8e:	3302      	addne	r3, #2
 100eb90:	9303      	strne	r3, [sp, #12]
 100eb92:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 100eb96:	930d      	str	r3, [sp, #52]	; 0x34
 100eb98:	d104      	bne.n	100eba4 <_vfprintf_r+0x35c>
 100eb9a:	9b07      	ldr	r3, [sp, #28]
 100eb9c:	9803      	ldr	r0, [sp, #12]
 100eb9e:	1a1c      	subs	r4, r3, r0
 100eba0:	2c00      	cmp	r4, #0
 100eba2:	dc60      	bgt.n	100ec66 <_vfprintf_r+0x41e>
 100eba4:	b189      	cbz	r1, 100ebca <_vfprintf_r+0x382>
 100eba6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100eba8:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 100ebac:	3201      	adds	r2, #1
 100ebae:	f8c9 0000 	str.w	r0, [r9]
 100ebb2:	3101      	adds	r1, #1
 100ebb4:	2001      	movs	r0, #1
 100ebb6:	2907      	cmp	r1, #7
 100ebb8:	f8c9 0004 	str.w	r0, [r9, #4]
 100ebbc:	922a      	str	r2, [sp, #168]	; 0xa8
 100ebbe:	bfd8      	it	le
 100ebc0:	f109 0908 	addle.w	r9, r9, #8
 100ebc4:	9129      	str	r1, [sp, #164]	; 0xa4
 100ebc6:	f300 846f 	bgt.w	100f4a8 <_vfprintf_r+0xc60>
 100ebca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100ebcc:	b183      	cbz	r3, 100ebf0 <_vfprintf_r+0x3a8>
 100ebce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ebd0:	a91e      	add	r1, sp, #120	; 0x78
 100ebd2:	3202      	adds	r2, #2
 100ebd4:	f8c9 1000 	str.w	r1, [r9]
 100ebd8:	3301      	adds	r3, #1
 100ebda:	2102      	movs	r1, #2
 100ebdc:	2b07      	cmp	r3, #7
 100ebde:	f8c9 1004 	str.w	r1, [r9, #4]
 100ebe2:	922a      	str	r2, [sp, #168]	; 0xa8
 100ebe4:	bfd8      	it	le
 100ebe6:	f109 0908 	addle.w	r9, r9, #8
 100ebea:	9329      	str	r3, [sp, #164]	; 0xa4
 100ebec:	f300 8469 	bgt.w	100f4c2 <_vfprintf_r+0xc7a>
 100ebf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100ebf2:	2b80      	cmp	r3, #128	; 0x80
 100ebf4:	f000 8313 	beq.w	100f21e <_vfprintf_r+0x9d6>
 100ebf8:	9b04      	ldr	r3, [sp, #16]
 100ebfa:	9908      	ldr	r1, [sp, #32]
 100ebfc:	1a5c      	subs	r4, r3, r1
 100ebfe:	2c00      	cmp	r4, #0
 100ec00:	f300 8355 	bgt.w	100f2ae <_vfprintf_r+0xa66>
 100ec04:	05f5      	lsls	r5, r6, #23
 100ec06:	f100 82ab 	bmi.w	100f160 <_vfprintf_r+0x918>
 100ec0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ec0c:	9908      	ldr	r1, [sp, #32]
 100ec0e:	3301      	adds	r3, #1
 100ec10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100ec12:	2b07      	cmp	r3, #7
 100ec14:	440a      	add	r2, r1
 100ec16:	f8c9 1004 	str.w	r1, [r9, #4]
 100ec1a:	f8c9 0000 	str.w	r0, [r9]
 100ec1e:	922a      	str	r2, [sp, #168]	; 0xa8
 100ec20:	9329      	str	r3, [sp, #164]	; 0xa4
 100ec22:	f300 83ec 	bgt.w	100f3fe <_vfprintf_r+0xbb6>
 100ec26:	f109 0908 	add.w	r9, r9, #8
 100ec2a:	0770      	lsls	r0, r6, #29
 100ec2c:	d505      	bpl.n	100ec3a <_vfprintf_r+0x3f2>
 100ec2e:	9b07      	ldr	r3, [sp, #28]
 100ec30:	9903      	ldr	r1, [sp, #12]
 100ec32:	1a5c      	subs	r4, r3, r1
 100ec34:	2c00      	cmp	r4, #0
 100ec36:	f300 8451 	bgt.w	100f4dc <_vfprintf_r+0xc94>
 100ec3a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 100ec3e:	9803      	ldr	r0, [sp, #12]
 100ec40:	4281      	cmp	r1, r0
 100ec42:	bfac      	ite	ge
 100ec44:	185b      	addge	r3, r3, r1
 100ec46:	181b      	addlt	r3, r3, r0
 100ec48:	9306      	str	r3, [sp, #24]
 100ec4a:	2a00      	cmp	r2, #0
 100ec4c:	f040 8390 	bne.w	100f370 <_vfprintf_r+0xb28>
 100ec50:	2300      	movs	r3, #0
 100ec52:	9329      	str	r3, [sp, #164]	; 0xa4
 100ec54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100ec56:	b11b      	cbz	r3, 100ec60 <_vfprintf_r+0x418>
 100ec58:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ec5a:	4650      	mov	r0, sl
 100ec5c:	f003 f810 	bl	1011c80 <_free_r>
 100ec60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ec64:	e64c      	b.n	100e900 <_vfprintf_r+0xb8>
 100ec66:	2c10      	cmp	r4, #16
 100ec68:	f645 451c 	movw	r5, #23580	; 0x5c1c
 100ec6c:	bfc8      	it	gt
 100ec6e:	961b      	strgt	r6, [sp, #108]	; 0x6c
 100ec70:	f2c0 1505 	movt	r5, #261	; 0x105
 100ec74:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100ec76:	bfc4      	itt	gt
 100ec78:	2310      	movgt	r3, #16
 100ec7a:	9e05      	ldrgt	r6, [sp, #20]
 100ec7c:	dc03      	bgt.n	100ec86 <_vfprintf_r+0x43e>
 100ec7e:	e01e      	b.n	100ecbe <_vfprintf_r+0x476>
 100ec80:	3c10      	subs	r4, #16
 100ec82:	2c10      	cmp	r4, #16
 100ec84:	dd1a      	ble.n	100ecbc <_vfprintf_r+0x474>
 100ec86:	3101      	adds	r1, #1
 100ec88:	3210      	adds	r2, #16
 100ec8a:	2907      	cmp	r1, #7
 100ec8c:	e9c9 5300 	strd	r5, r3, [r9]
 100ec90:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ec94:	f109 0908 	add.w	r9, r9, #8
 100ec98:	ddf2      	ble.n	100ec80 <_vfprintf_r+0x438>
 100ec9a:	aa28      	add	r2, sp, #160	; 0xa0
 100ec9c:	4631      	mov	r1, r6
 100ec9e:	4650      	mov	r0, sl
 100eca0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100eca4:	f005 fb02 	bl	10142ac <__sprint_r>
 100eca8:	2800      	cmp	r0, #0
 100ecaa:	f040 8369 	bne.w	100f380 <_vfprintf_r+0xb38>
 100ecae:	3c10      	subs	r4, #16
 100ecb0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100ecb4:	2c10      	cmp	r4, #16
 100ecb6:	f04f 0310 	mov.w	r3, #16
 100ecba:	dce4      	bgt.n	100ec86 <_vfprintf_r+0x43e>
 100ecbc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 100ecbe:	3101      	adds	r1, #1
 100ecc0:	4422      	add	r2, r4
 100ecc2:	2907      	cmp	r1, #7
 100ecc4:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ecc8:	e9c9 5400 	strd	r5, r4, [r9]
 100eccc:	f300 867e 	bgt.w	100f9cc <_vfprintf_r+0x1184>
 100ecd0:	f109 0908 	add.w	r9, r9, #8
 100ecd4:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100ecd8:	e764      	b.n	100eba4 <_vfprintf_r+0x35c>
 100ecda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100ecde:	2100      	movs	r1, #0
 100ece0:	f817 3b01 	ldrb.w	r3, [r7], #1
 100ece4:	fb04 2101 	mla	r1, r4, r1, r2
 100ece8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100ecec:	2a09      	cmp	r2, #9
 100ecee:	d9f7      	bls.n	100ece0 <_vfprintf_r+0x498>
 100ecf0:	9107      	str	r1, [sp, #28]
 100ecf2:	e633      	b.n	100e95c <_vfprintf_r+0x114>
 100ecf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ecf6:	f046 0202 	orr.w	r2, r6, #2
 100ecfa:	f248 21bc 	movw	r1, #33468	; 0x82bc
 100ecfe:	9203      	str	r2, [sp, #12]
 100ed00:	f2c0 1105 	movt	r1, #261	; 0x105
 100ed04:	f647 0230 	movw	r2, #30768	; 0x7830
 100ed08:	f853 4b04 	ldr.w	r4, [r3], #4
 100ed0c:	2500      	movs	r5, #0
 100ed0e:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 100ed12:	2278      	movs	r2, #120	; 0x78
 100ed14:	9116      	str	r1, [sp, #88]	; 0x58
 100ed16:	9309      	str	r3, [sp, #36]	; 0x24
 100ed18:	2302      	movs	r3, #2
 100ed1a:	920e      	str	r2, [sp, #56]	; 0x38
 100ed1c:	e6f9      	b.n	100eb12 <_vfprintf_r+0x2ca>
 100ed1e:	f046 0601 	orr.w	r6, r6, #1
 100ed22:	783b      	ldrb	r3, [r7, #0]
 100ed24:	e619      	b.n	100e95a <_vfprintf_r+0x112>
 100ed26:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 100ed2a:	783b      	ldrb	r3, [r7, #0]
 100ed2c:	2a00      	cmp	r2, #0
 100ed2e:	f47f ae14 	bne.w	100e95a <_vfprintf_r+0x112>
 100ed32:	2220      	movs	r2, #32
 100ed34:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100ed38:	e60f      	b.n	100e95a <_vfprintf_r+0x112>
 100ed3a:	06b0      	lsls	r0, r6, #26
 100ed3c:	930e      	str	r3, [sp, #56]	; 0x38
 100ed3e:	f140 857a 	bpl.w	100f836 <_vfprintf_r+0xfee>
 100ed42:	9603      	str	r6, [sp, #12]
 100ed44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100ed46:	2301      	movs	r3, #1
 100ed48:	3507      	adds	r5, #7
 100ed4a:	f025 0207 	bic.w	r2, r5, #7
 100ed4e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100ed52:	9209      	str	r2, [sp, #36]	; 0x24
 100ed54:	e6dd      	b.n	100eb12 <_vfprintf_r+0x2ca>
 100ed56:	783b      	ldrb	r3, [r7, #0]
 100ed58:	f046 0604 	orr.w	r6, r6, #4
 100ed5c:	e5fd      	b.n	100e95a <_vfprintf_r+0x112>
 100ed5e:	232b      	movs	r3, #43	; 0x2b
 100ed60:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100ed64:	783b      	ldrb	r3, [r7, #0]
 100ed66:	e5f8      	b.n	100e95a <_vfprintf_r+0x112>
 100ed68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ed6a:	783b      	ldrb	r3, [r7, #0]
 100ed6c:	f852 1b04 	ldr.w	r1, [r2], #4
 100ed70:	2900      	cmp	r1, #0
 100ed72:	9107      	str	r1, [sp, #28]
 100ed74:	bfa8      	it	ge
 100ed76:	9209      	strge	r2, [sp, #36]	; 0x24
 100ed78:	f6bf adef 	bge.w	100e95a <_vfprintf_r+0x112>
 100ed7c:	4249      	negs	r1, r1
 100ed7e:	9209      	str	r2, [sp, #36]	; 0x24
 100ed80:	9107      	str	r1, [sp, #28]
 100ed82:	e7e9      	b.n	100ed58 <_vfprintf_r+0x510>
 100ed84:	4650      	mov	r0, sl
 100ed86:	f003 faa3 	bl	10122d0 <_localeconv_r>
 100ed8a:	6843      	ldr	r3, [r0, #4]
 100ed8c:	4618      	mov	r0, r3
 100ed8e:	931a      	str	r3, [sp, #104]	; 0x68
 100ed90:	f7fd fdb6 	bl	100c900 <strlen>
 100ed94:	4605      	mov	r5, r0
 100ed96:	9019      	str	r0, [sp, #100]	; 0x64
 100ed98:	4650      	mov	r0, sl
 100ed9a:	f003 fa99 	bl	10122d0 <_localeconv_r>
 100ed9e:	6883      	ldr	r3, [r0, #8]
 100eda0:	2d00      	cmp	r5, #0
 100eda2:	bf18      	it	ne
 100eda4:	2b00      	cmpne	r3, #0
 100eda6:	9314      	str	r3, [sp, #80]	; 0x50
 100eda8:	f43f ae3c 	beq.w	100ea24 <_vfprintf_r+0x1dc>
 100edac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100edae:	781a      	ldrb	r2, [r3, #0]
 100edb0:	783b      	ldrb	r3, [r7, #0]
 100edb2:	2a00      	cmp	r2, #0
 100edb4:	f43f add1 	beq.w	100e95a <_vfprintf_r+0x112>
 100edb8:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 100edbc:	e5cd      	b.n	100e95a <_vfprintf_r+0x112>
 100edbe:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 100edc2:	783b      	ldrb	r3, [r7, #0]
 100edc4:	e5c9      	b.n	100e95a <_vfprintf_r+0x112>
 100edc6:	4639      	mov	r1, r7
 100edc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 100edcc:	2b2a      	cmp	r3, #42	; 0x2a
 100edce:	f001 82d9 	beq.w	1010384 <_vfprintf_r+0x1b3c>
 100edd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100edd6:	460f      	mov	r7, r1
 100edd8:	2a09      	cmp	r2, #9
 100edda:	bf84      	itt	hi
 100eddc:	2200      	movhi	r2, #0
 100edde:	9204      	strhi	r2, [sp, #16]
 100ede0:	f63f adbc 	bhi.w	100e95c <_vfprintf_r+0x114>
 100ede4:	2100      	movs	r1, #0
 100ede6:	f817 3b01 	ldrb.w	r3, [r7], #1
 100edea:	fb04 2101 	mla	r1, r4, r1, r2
 100edee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100edf2:	2a09      	cmp	r2, #9
 100edf4:	d9f7      	bls.n	100ede6 <_vfprintf_r+0x59e>
 100edf6:	9104      	str	r1, [sp, #16]
 100edf8:	e5b0      	b.n	100e95c <_vfprintf_r+0x114>
 100edfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100edfc:	930e      	str	r3, [sp, #56]	; 0x38
 100edfe:	3507      	adds	r5, #7
 100ee00:	ed9f 7bab 	vldr	d7, [pc, #684]	; 100f0b0 <_vfprintf_r+0x868>
 100ee04:	f025 0307 	bic.w	r3, r5, #7
 100ee08:	ecb3 8b02 	vldmia	r3!, {d8}
 100ee0c:	eeb0 6bc8 	vabs.f64	d6, d8
 100ee10:	9309      	str	r3, [sp, #36]	; 0x24
 100ee12:	eeb4 6b47 	vcmp.f64	d6, d7
 100ee16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ee1a:	f340 848c 	ble.w	100f736 <_vfprintf_r+0xeee>
 100ee1e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 100ee22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ee26:	bf58      	it	pl
 100ee28:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 100ee2c:	d502      	bpl.n	100ee34 <_vfprintf_r+0x5ec>
 100ee2e:	212d      	movs	r1, #45	; 0x2d
 100ee30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100ee34:	f248 23ac 	movw	r3, #33452	; 0x82ac
 100ee38:	f248 24b0 	movw	r4, #33456	; 0x82b0
 100ee3c:	f2c0 1305 	movt	r3, #261	; 0x105
 100ee40:	f2c0 1405 	movt	r4, #261	; 0x105
 100ee44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100ee46:	2200      	movs	r2, #0
 100ee48:	2003      	movs	r0, #3
 100ee4a:	920a      	str	r2, [sp, #40]	; 0x28
 100ee4c:	2d47      	cmp	r5, #71	; 0x47
 100ee4e:	bfc8      	it	gt
 100ee50:	4623      	movgt	r3, r4
 100ee52:	9003      	str	r0, [sp, #12]
 100ee54:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 100ee58:	930b      	str	r3, [sp, #44]	; 0x2c
 100ee5a:	9008      	str	r0, [sp, #32]
 100ee5c:	9204      	str	r2, [sp, #16]
 100ee5e:	9213      	str	r2, [sp, #76]	; 0x4c
 100ee60:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100ee64:	e689      	b.n	100eb7a <_vfprintf_r+0x332>
 100ee66:	06b5      	lsls	r5, r6, #26
 100ee68:	930e      	str	r3, [sp, #56]	; 0x38
 100ee6a:	f140 84f4 	bpl.w	100f856 <_vfprintf_r+0x100e>
 100ee6e:	9603      	str	r6, [sp, #12]
 100ee70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100ee72:	3507      	adds	r5, #7
 100ee74:	f025 0307 	bic.w	r3, r5, #7
 100ee78:	4619      	mov	r1, r3
 100ee7a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 100ee7e:	4614      	mov	r4, r2
 100ee80:	461d      	mov	r5, r3
 100ee82:	9109      	str	r1, [sp, #36]	; 0x24
 100ee84:	2a00      	cmp	r2, #0
 100ee86:	f173 0300 	sbcs.w	r3, r3, #0
 100ee8a:	f2c0 80a9 	blt.w	100efe0 <_vfprintf_r+0x798>
 100ee8e:	9b04      	ldr	r3, [sp, #16]
 100ee90:	3301      	adds	r3, #1
 100ee92:	f000 8156 	beq.w	100f142 <_vfprintf_r+0x8fa>
 100ee96:	ea54 0305 	orrs.w	r3, r4, r5
 100ee9a:	9a04      	ldr	r2, [sp, #16]
 100ee9c:	9b03      	ldr	r3, [sp, #12]
 100ee9e:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 100eea2:	bf14      	ite	ne
 100eea4:	2301      	movne	r3, #1
 100eea6:	2300      	moveq	r3, #0
 100eea8:	2a00      	cmp	r2, #0
 100eeaa:	bf18      	it	ne
 100eeac:	2301      	movne	r3, #1
 100eeae:	2b00      	cmp	r3, #0
 100eeb0:	f040 8146 	bne.w	100f140 <_vfprintf_r+0x8f8>
 100eeb4:	aa54      	add	r2, sp, #336	; 0x150
 100eeb6:	9304      	str	r3, [sp, #16]
 100eeb8:	920b      	str	r2, [sp, #44]	; 0x2c
 100eeba:	9308      	str	r3, [sp, #32]
 100eebc:	e650      	b.n	100eb60 <_vfprintf_r+0x318>
 100eebe:	06b0      	lsls	r0, r6, #26
 100eec0:	930e      	str	r3, [sp, #56]	; 0x38
 100eec2:	f248 036c 	movw	r3, #32876	; 0x806c
 100eec6:	f2c0 1305 	movt	r3, #261	; 0x105
 100eeca:	9316      	str	r3, [sp, #88]	; 0x58
 100eecc:	f53f ae0d 	bmi.w	100eaea <_vfprintf_r+0x2a2>
 100eed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100eed2:	06f1      	lsls	r1, r6, #27
 100eed4:	f853 4b04 	ldr.w	r4, [r3], #4
 100eed8:	9309      	str	r3, [sp, #36]	; 0x24
 100eeda:	d40b      	bmi.n	100eef4 <_vfprintf_r+0x6ac>
 100eedc:	0672      	lsls	r2, r6, #25
 100eede:	bf44      	itt	mi
 100eee0:	b2a4      	uxthmi	r4, r4
 100eee2:	2500      	movmi	r5, #0
 100eee4:	f53f ae08 	bmi.w	100eaf8 <_vfprintf_r+0x2b0>
 100eee8:	05b3      	lsls	r3, r6, #22
 100eeea:	bf44      	itt	mi
 100eeec:	b2e4      	uxtbmi	r4, r4
 100eeee:	2500      	movmi	r5, #0
 100eef0:	f53f ae02 	bmi.w	100eaf8 <_vfprintf_r+0x2b0>
 100eef4:	2500      	movs	r5, #0
 100eef6:	ea54 0305 	orrs.w	r3, r4, r5
 100eefa:	f006 0301 	and.w	r3, r6, #1
 100eefe:	bf08      	it	eq
 100ef00:	2300      	moveq	r3, #0
 100ef02:	2b00      	cmp	r3, #0
 100ef04:	f43f ae01 	beq.w	100eb0a <_vfprintf_r+0x2c2>
 100ef08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100ef0a:	f046 0602 	orr.w	r6, r6, #2
 100ef0e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100ef12:	2330      	movs	r3, #48	; 0x30
 100ef14:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 100ef18:	e5f7      	b.n	100eb0a <_vfprintf_r+0x2c2>
 100ef1a:	06b4      	lsls	r4, r6, #26
 100ef1c:	930e      	str	r3, [sp, #56]	; 0x38
 100ef1e:	f046 0310 	orr.w	r3, r6, #16
 100ef22:	9303      	str	r3, [sp, #12]
 100ef24:	f53f af0e 	bmi.w	100ed44 <_vfprintf_r+0x4fc>
 100ef28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ef2a:	1d1a      	adds	r2, r3, #4
 100ef2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ef2e:	2500      	movs	r5, #0
 100ef30:	9209      	str	r2, [sp, #36]	; 0x24
 100ef32:	681c      	ldr	r4, [r3, #0]
 100ef34:	2301      	movs	r3, #1
 100ef36:	e5ec      	b.n	100eb12 <_vfprintf_r+0x2ca>
 100ef38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100ef3a:	930e      	str	r3, [sp, #56]	; 0x38
 100ef3c:	2300      	movs	r3, #0
 100ef3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100ef42:	f855 2b04 	ldr.w	r2, [r5], #4
 100ef46:	920b      	str	r2, [sp, #44]	; 0x2c
 100ef48:	2a00      	cmp	r2, #0
 100ef4a:	f000 84d9 	beq.w	100f900 <_vfprintf_r+0x10b8>
 100ef4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100ef50:	2b53      	cmp	r3, #83	; 0x53
 100ef52:	f000 8556 	beq.w	100fa02 <_vfprintf_r+0x11ba>
 100ef56:	f016 0310 	ands.w	r3, r6, #16
 100ef5a:	9310      	str	r3, [sp, #64]	; 0x40
 100ef5c:	f040 8551 	bne.w	100fa02 <_vfprintf_r+0x11ba>
 100ef60:	9a04      	ldr	r2, [sp, #16]
 100ef62:	1c53      	adds	r3, r2, #1
 100ef64:	f000 8787 	beq.w	100fe76 <_vfprintf_r+0x162e>
 100ef68:	9910      	ldr	r1, [sp, #64]	; 0x40
 100ef6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100ef6c:	f003 fa50 	bl	1012410 <memchr>
 100ef70:	900a      	str	r0, [sp, #40]	; 0x28
 100ef72:	2800      	cmp	r0, #0
 100ef74:	f001 81e5 	beq.w	1010342 <_vfprintf_r+0x1afa>
 100ef78:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 100ef7c:	9509      	str	r5, [sp, #36]	; 0x24
 100ef7e:	1a9a      	subs	r2, r3, r2
 100ef80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100ef82:	9208      	str	r2, [sp, #32]
 100ef84:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100ef88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 100ef8c:	9304      	str	r3, [sp, #16]
 100ef8e:	9313      	str	r3, [sp, #76]	; 0x4c
 100ef90:	9203      	str	r2, [sp, #12]
 100ef92:	9311      	str	r3, [sp, #68]	; 0x44
 100ef94:	930a      	str	r3, [sp, #40]	; 0x28
 100ef96:	e5f0      	b.n	100eb7a <_vfprintf_r+0x332>
 100ef98:	06b4      	lsls	r4, r6, #26
 100ef9a:	930e      	str	r3, [sp, #56]	; 0x38
 100ef9c:	f046 0310 	orr.w	r3, r6, #16
 100efa0:	d479      	bmi.n	100f096 <_vfprintf_r+0x84e>
 100efa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100efa4:	3204      	adds	r2, #4
 100efa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 100efa8:	2500      	movs	r5, #0
 100efaa:	9209      	str	r2, [sp, #36]	; 0x24
 100efac:	680c      	ldr	r4, [r1, #0]
 100efae:	e079      	b.n	100f0a4 <_vfprintf_r+0x85c>
 100efb0:	f046 0608 	orr.w	r6, r6, #8
 100efb4:	783b      	ldrb	r3, [r7, #0]
 100efb6:	e4d0      	b.n	100e95a <_vfprintf_r+0x112>
 100efb8:	930e      	str	r3, [sp, #56]	; 0x38
 100efba:	f046 0310 	orr.w	r3, r6, #16
 100efbe:	06b6      	lsls	r6, r6, #26
 100efc0:	9303      	str	r3, [sp, #12]
 100efc2:	f53f af55 	bmi.w	100ee70 <_vfprintf_r+0x628>
 100efc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100efc8:	1d1a      	adds	r2, r3, #4
 100efca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100efcc:	9209      	str	r2, [sp, #36]	; 0x24
 100efce:	681c      	ldr	r4, [r3, #0]
 100efd0:	17e5      	asrs	r5, r4, #31
 100efd2:	4622      	mov	r2, r4
 100efd4:	2a00      	cmp	r2, #0
 100efd6:	462b      	mov	r3, r5
 100efd8:	f173 0300 	sbcs.w	r3, r3, #0
 100efdc:	f6bf af57 	bge.w	100ee8e <_vfprintf_r+0x646>
 100efe0:	4264      	negs	r4, r4
 100efe2:	9904      	ldr	r1, [sp, #16]
 100efe4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 100efe8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100efec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 100eff0:	1c4a      	adds	r2, r1, #1
 100eff2:	f04f 0301 	mov.w	r3, #1
 100eff6:	f47f ad93 	bne.w	100eb20 <_vfprintf_r+0x2d8>
 100effa:	2b01      	cmp	r3, #1
 100effc:	f000 80a1 	beq.w	100f142 <_vfprintf_r+0x8fa>
 100f000:	2b02      	cmp	r3, #2
 100f002:	bf18      	it	ne
 100f004:	a954      	addne	r1, sp, #336	; 0x150
 100f006:	f040 8193 	bne.w	100f330 <_vfprintf_r+0xae8>
 100f00a:	ab54      	add	r3, sp, #336	; 0x150
 100f00c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 100f00e:	461a      	mov	r2, r3
 100f010:	f004 010f 	and.w	r1, r4, #15
 100f014:	0923      	lsrs	r3, r4, #4
 100f016:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 100f01a:	0928      	lsrs	r0, r5, #4
 100f01c:	5c71      	ldrb	r1, [r6, r1]
 100f01e:	461c      	mov	r4, r3
 100f020:	4605      	mov	r5, r0
 100f022:	ea54 0305 	orrs.w	r3, r4, r5
 100f026:	f802 1d01 	strb.w	r1, [r2, #-1]!
 100f02a:	d1f1      	bne.n	100f010 <_vfprintf_r+0x7c8>
 100f02c:	ab54      	add	r3, sp, #336	; 0x150
 100f02e:	920b      	str	r2, [sp, #44]	; 0x2c
 100f030:	1a9b      	subs	r3, r3, r2
 100f032:	9e03      	ldr	r6, [sp, #12]
 100f034:	9308      	str	r3, [sp, #32]
 100f036:	e593      	b.n	100eb60 <_vfprintf_r+0x318>
 100f038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f03a:	2b43      	cmp	r3, #67	; 0x43
 100f03c:	930e      	str	r3, [sp, #56]	; 0x38
 100f03e:	f102 0504 	add.w	r5, r2, #4
 100f042:	d002      	beq.n	100f04a <_vfprintf_r+0x802>
 100f044:	06f3      	lsls	r3, r6, #27
 100f046:	f140 841e 	bpl.w	100f886 <_vfprintf_r+0x103e>
 100f04a:	2208      	movs	r2, #8
 100f04c:	2100      	movs	r1, #0
 100f04e:	a826      	add	r0, sp, #152	; 0x98
 100f050:	ac3b      	add	r4, sp, #236	; 0xec
 100f052:	f7fd f845 	bl	100c0e0 <memset>
 100f056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f058:	ab26      	add	r3, sp, #152	; 0x98
 100f05a:	4621      	mov	r1, r4
 100f05c:	4650      	mov	r0, sl
 100f05e:	6812      	ldr	r2, [r2, #0]
 100f060:	f001 fa4c 	bl	10104fc <_wcrtomb_r>
 100f064:	1c43      	adds	r3, r0, #1
 100f066:	9008      	str	r0, [sp, #32]
 100f068:	f001 80ce 	beq.w	1010208 <_vfprintf_r+0x19c0>
 100f06c:	9b08      	ldr	r3, [sp, #32]
 100f06e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100f072:	9303      	str	r3, [sp, #12]
 100f074:	2300      	movs	r3, #0
 100f076:	9509      	str	r5, [sp, #36]	; 0x24
 100f078:	4619      	mov	r1, r3
 100f07a:	940b      	str	r4, [sp, #44]	; 0x2c
 100f07c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100f080:	930a      	str	r3, [sp, #40]	; 0x28
 100f082:	9304      	str	r3, [sp, #16]
 100f084:	9313      	str	r3, [sp, #76]	; 0x4c
 100f086:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100f08a:	e57a      	b.n	100eb82 <_vfprintf_r+0x33a>
 100f08c:	06b0      	lsls	r0, r6, #26
 100f08e:	930e      	str	r3, [sp, #56]	; 0x38
 100f090:	f140 8343 	bpl.w	100f71a <_vfprintf_r+0xed2>
 100f094:	4633      	mov	r3, r6
 100f096:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100f098:	3507      	adds	r5, #7
 100f09a:	f025 0207 	bic.w	r2, r5, #7
 100f09e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100f0a2:	9209      	str	r2, [sp, #36]	; 0x24
 100f0a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 100f0a8:	9303      	str	r3, [sp, #12]
 100f0aa:	2300      	movs	r3, #0
 100f0ac:	e531      	b.n	100eb12 <_vfprintf_r+0x2ca>
 100f0ae:	bf00      	nop
 100f0b0:	ffffffff 	.word	0xffffffff
 100f0b4:	7fefffff 	.word	0x7fefffff
 100f0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f0ba:	06b0      	lsls	r0, r6, #26
 100f0bc:	f102 0304 	add.w	r3, r2, #4
 100f0c0:	f100 8321 	bmi.w	100f706 <_vfprintf_r+0xebe>
 100f0c4:	06f1      	lsls	r1, r6, #27
 100f0c6:	f100 8517 	bmi.w	100faf8 <_vfprintf_r+0x12b0>
 100f0ca:	0672      	lsls	r2, r6, #25
 100f0cc:	f100 86c4 	bmi.w	100fe58 <_vfprintf_r+0x1610>
 100f0d0:	05b5      	lsls	r5, r6, #22
 100f0d2:	f140 8511 	bpl.w	100faf8 <_vfprintf_r+0x12b0>
 100f0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f0d8:	9309      	str	r3, [sp, #36]	; 0x24
 100f0da:	9b06      	ldr	r3, [sp, #24]
 100f0dc:	6812      	ldr	r2, [r2, #0]
 100f0de:	7013      	strb	r3, [r2, #0]
 100f0e0:	e40e      	b.n	100e900 <_vfprintf_r+0xb8>
 100f0e2:	783b      	ldrb	r3, [r7, #0]
 100f0e4:	2b6c      	cmp	r3, #108	; 0x6c
 100f0e6:	bf09      	itett	eq
 100f0e8:	f046 0620 	orreq.w	r6, r6, #32
 100f0ec:	f046 0610 	orrne.w	r6, r6, #16
 100f0f0:	787b      	ldrbeq	r3, [r7, #1]
 100f0f2:	3701      	addeq	r7, #1
 100f0f4:	e431      	b.n	100e95a <_vfprintf_r+0x112>
 100f0f6:	783b      	ldrb	r3, [r7, #0]
 100f0f8:	2b68      	cmp	r3, #104	; 0x68
 100f0fa:	bf09      	itett	eq
 100f0fc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 100f100:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 100f104:	787b      	ldrbeq	r3, [r7, #1]
 100f106:	3701      	addeq	r7, #1
 100f108:	e427      	b.n	100e95a <_vfprintf_r+0x112>
 100f10a:	4650      	mov	r0, sl
 100f10c:	f002 fd3e 	bl	1011b8c <__sinit>
 100f110:	f7ff bbbb 	b.w	100e88a <_vfprintf_r+0x42>
 100f114:	461a      	mov	r2, r3
 100f116:	930e      	str	r3, [sp, #56]	; 0x38
 100f118:	2b00      	cmp	r3, #0
 100f11a:	f43f acbf 	beq.w	100ea9c <_vfprintf_r+0x254>
 100f11e:	2300      	movs	r3, #0
 100f120:	2001      	movs	r0, #1
 100f122:	4619      	mov	r1, r3
 100f124:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100f128:	930a      	str	r3, [sp, #40]	; 0x28
 100f12a:	9304      	str	r3, [sp, #16]
 100f12c:	9313      	str	r3, [sp, #76]	; 0x4c
 100f12e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100f132:	ab3b      	add	r3, sp, #236	; 0xec
 100f134:	9003      	str	r0, [sp, #12]
 100f136:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 100f13a:	9008      	str	r0, [sp, #32]
 100f13c:	930b      	str	r3, [sp, #44]	; 0x2c
 100f13e:	e520      	b.n	100eb82 <_vfprintf_r+0x33a>
 100f140:	9603      	str	r6, [sp, #12]
 100f142:	2d00      	cmp	r5, #0
 100f144:	bf08      	it	eq
 100f146:	2c0a      	cmpeq	r4, #10
 100f148:	f080 8486 	bcs.w	100fa58 <_vfprintf_r+0x1210>
 100f14c:	2301      	movs	r3, #1
 100f14e:	3430      	adds	r4, #48	; 0x30
 100f150:	9308      	str	r3, [sp, #32]
 100f152:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100f156:	9e03      	ldr	r6, [sp, #12]
 100f158:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 100f15c:	930b      	str	r3, [sp, #44]	; 0x2c
 100f15e:	e4ff      	b.n	100eb60 <_vfprintf_r+0x318>
 100f160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100f162:	2b65      	cmp	r3, #101	; 0x65
 100f164:	f340 8156 	ble.w	100f414 <_vfprintf_r+0xbcc>
 100f168:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f170:	f040 81fd 	bne.w	100f56e <_vfprintf_r+0xd26>
 100f174:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f176:	3201      	adds	r2, #1
 100f178:	2101      	movs	r1, #1
 100f17a:	922a      	str	r2, [sp, #168]	; 0xa8
 100f17c:	3301      	adds	r3, #1
 100f17e:	f248 22d8 	movw	r2, #33496	; 0x82d8
 100f182:	2b07      	cmp	r3, #7
 100f184:	f2c0 1205 	movt	r2, #261	; 0x105
 100f188:	9329      	str	r3, [sp, #164]	; 0xa4
 100f18a:	e9c9 2100 	strd	r2, r1, [r9]
 100f18e:	bfd8      	it	le
 100f190:	f109 0908 	addle.w	r9, r9, #8
 100f194:	f300 8429 	bgt.w	100f9ea <_vfprintf_r+0x11a2>
 100f198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100f19a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100f19c:	4293      	cmp	r3, r2
 100f19e:	f280 82ac 	bge.w	100f6fa <_vfprintf_r+0xeb2>
 100f1a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 100f1a4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100f1a8:	f8c9 1000 	str.w	r1, [r9]
 100f1ac:	3301      	adds	r3, #1
 100f1ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 100f1b0:	2b07      	cmp	r3, #7
 100f1b2:	440a      	add	r2, r1
 100f1b4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f1b8:	f8c9 1004 	str.w	r1, [r9, #4]
 100f1bc:	bfd8      	it	le
 100f1be:	f109 0908 	addle.w	r9, r9, #8
 100f1c2:	f300 8391 	bgt.w	100f8e8 <_vfprintf_r+0x10a0>
 100f1c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f1c8:	1e5c      	subs	r4, r3, #1
 100f1ca:	2c00      	cmp	r4, #0
 100f1cc:	f77f ad2d 	ble.w	100ec2a <_vfprintf_r+0x3e2>
 100f1d0:	2c10      	cmp	r4, #16
 100f1d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f1d4:	f340 83d4 	ble.w	100f980 <_vfprintf_r+0x1138>
 100f1d8:	9604      	str	r6, [sp, #16]
 100f1da:	2510      	movs	r5, #16
 100f1dc:	4626      	mov	r6, r4
 100f1de:	4619      	mov	r1, r3
 100f1e0:	9c05      	ldr	r4, [sp, #20]
 100f1e2:	e003      	b.n	100f1ec <_vfprintf_r+0x9a4>
 100f1e4:	3e10      	subs	r6, #16
 100f1e6:	2e10      	cmp	r6, #16
 100f1e8:	f340 8495 	ble.w	100fb16 <_vfprintf_r+0x12ce>
 100f1ec:	3101      	adds	r1, #1
 100f1ee:	4bc2      	ldr	r3, [pc, #776]	; (100f4f8 <_vfprintf_r+0xcb0>)
 100f1f0:	2907      	cmp	r1, #7
 100f1f2:	f102 0210 	add.w	r2, r2, #16
 100f1f6:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f1fa:	e9c9 3500 	strd	r3, r5, [r9]
 100f1fe:	f109 0908 	add.w	r9, r9, #8
 100f202:	ddef      	ble.n	100f1e4 <_vfprintf_r+0x99c>
 100f204:	aa28      	add	r2, sp, #160	; 0xa0
 100f206:	4621      	mov	r1, r4
 100f208:	4650      	mov	r0, sl
 100f20a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f20e:	f005 f84d 	bl	10142ac <__sprint_r>
 100f212:	2800      	cmp	r0, #0
 100f214:	f040 80b4 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f218:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f21c:	e7e2      	b.n	100f1e4 <_vfprintf_r+0x99c>
 100f21e:	9b07      	ldr	r3, [sp, #28]
 100f220:	9903      	ldr	r1, [sp, #12]
 100f222:	1a5c      	subs	r4, r3, r1
 100f224:	2c00      	cmp	r4, #0
 100f226:	f77f ace7 	ble.w	100ebf8 <_vfprintf_r+0x3b0>
 100f22a:	2c10      	cmp	r4, #16
 100f22c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f22e:	dd26      	ble.n	100f27e <_vfprintf_r+0xa36>
 100f230:	960c      	str	r6, [sp, #48]	; 0x30
 100f232:	2510      	movs	r5, #16
 100f234:	4626      	mov	r6, r4
 100f236:	4619      	mov	r1, r3
 100f238:	9c05      	ldr	r4, [sp, #20]
 100f23a:	e002      	b.n	100f242 <_vfprintf_r+0x9fa>
 100f23c:	3e10      	subs	r6, #16
 100f23e:	2e10      	cmp	r6, #16
 100f240:	dd1a      	ble.n	100f278 <_vfprintf_r+0xa30>
 100f242:	3101      	adds	r1, #1
 100f244:	4bac      	ldr	r3, [pc, #688]	; (100f4f8 <_vfprintf_r+0xcb0>)
 100f246:	2907      	cmp	r1, #7
 100f248:	f102 0210 	add.w	r2, r2, #16
 100f24c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f250:	e9c9 3500 	strd	r3, r5, [r9]
 100f254:	f109 0908 	add.w	r9, r9, #8
 100f258:	ddf0      	ble.n	100f23c <_vfprintf_r+0x9f4>
 100f25a:	aa28      	add	r2, sp, #160	; 0xa0
 100f25c:	4621      	mov	r1, r4
 100f25e:	4650      	mov	r0, sl
 100f260:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f264:	f005 f822 	bl	10142ac <__sprint_r>
 100f268:	2800      	cmp	r0, #0
 100f26a:	f040 8089 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f26e:	3e10      	subs	r6, #16
 100f270:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f274:	2e10      	cmp	r6, #16
 100f276:	dce4      	bgt.n	100f242 <_vfprintf_r+0x9fa>
 100f278:	4634      	mov	r4, r6
 100f27a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 100f27c:	460b      	mov	r3, r1
 100f27e:	3301      	adds	r3, #1
 100f280:	499d      	ldr	r1, [pc, #628]	; (100f4f8 <_vfprintf_r+0xcb0>)
 100f282:	2b07      	cmp	r3, #7
 100f284:	4422      	add	r2, r4
 100f286:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f28a:	e9c9 1400 	strd	r1, r4, [r9]
 100f28e:	bfd8      	it	le
 100f290:	f109 0908 	addle.w	r9, r9, #8
 100f294:	f77f acb0 	ble.w	100ebf8 <_vfprintf_r+0x3b0>
 100f298:	aa28      	add	r2, sp, #160	; 0xa0
 100f29a:	9905      	ldr	r1, [sp, #20]
 100f29c:	4650      	mov	r0, sl
 100f29e:	f005 f805 	bl	10142ac <__sprint_r>
 100f2a2:	2800      	cmp	r0, #0
 100f2a4:	d16c      	bne.n	100f380 <_vfprintf_r+0xb38>
 100f2a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f2a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f2ac:	e4a4      	b.n	100ebf8 <_vfprintf_r+0x3b0>
 100f2ae:	2c10      	cmp	r4, #16
 100f2b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f2b2:	dd25      	ble.n	100f300 <_vfprintf_r+0xab8>
 100f2b4:	9604      	str	r6, [sp, #16]
 100f2b6:	2510      	movs	r5, #16
 100f2b8:	4626      	mov	r6, r4
 100f2ba:	4619      	mov	r1, r3
 100f2bc:	9c05      	ldr	r4, [sp, #20]
 100f2be:	e002      	b.n	100f2c6 <_vfprintf_r+0xa7e>
 100f2c0:	3e10      	subs	r6, #16
 100f2c2:	2e10      	cmp	r6, #16
 100f2c4:	dd19      	ble.n	100f2fa <_vfprintf_r+0xab2>
 100f2c6:	3101      	adds	r1, #1
 100f2c8:	4b8b      	ldr	r3, [pc, #556]	; (100f4f8 <_vfprintf_r+0xcb0>)
 100f2ca:	2907      	cmp	r1, #7
 100f2cc:	f102 0210 	add.w	r2, r2, #16
 100f2d0:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f2d4:	e9c9 3500 	strd	r3, r5, [r9]
 100f2d8:	f109 0908 	add.w	r9, r9, #8
 100f2dc:	ddf0      	ble.n	100f2c0 <_vfprintf_r+0xa78>
 100f2de:	aa28      	add	r2, sp, #160	; 0xa0
 100f2e0:	4621      	mov	r1, r4
 100f2e2:	4650      	mov	r0, sl
 100f2e4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f2e8:	f004 ffe0 	bl	10142ac <__sprint_r>
 100f2ec:	2800      	cmp	r0, #0
 100f2ee:	d147      	bne.n	100f380 <_vfprintf_r+0xb38>
 100f2f0:	3e10      	subs	r6, #16
 100f2f2:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f2f6:	2e10      	cmp	r6, #16
 100f2f8:	dce5      	bgt.n	100f2c6 <_vfprintf_r+0xa7e>
 100f2fa:	4634      	mov	r4, r6
 100f2fc:	9e04      	ldr	r6, [sp, #16]
 100f2fe:	460b      	mov	r3, r1
 100f300:	3301      	adds	r3, #1
 100f302:	497d      	ldr	r1, [pc, #500]	; (100f4f8 <_vfprintf_r+0xcb0>)
 100f304:	2b07      	cmp	r3, #7
 100f306:	4422      	add	r2, r4
 100f308:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f30c:	e9c9 1400 	strd	r1, r4, [r9]
 100f310:	bfd8      	it	le
 100f312:	f109 0908 	addle.w	r9, r9, #8
 100f316:	f77f ac75 	ble.w	100ec04 <_vfprintf_r+0x3bc>
 100f31a:	aa28      	add	r2, sp, #160	; 0xa0
 100f31c:	9905      	ldr	r1, [sp, #20]
 100f31e:	4650      	mov	r0, sl
 100f320:	f004 ffc4 	bl	10142ac <__sprint_r>
 100f324:	bb60      	cbnz	r0, 100f380 <_vfprintf_r+0xb38>
 100f326:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f328:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f32c:	e46a      	b.n	100ec04 <_vfprintf_r+0x3bc>
 100f32e:	4611      	mov	r1, r2
 100f330:	08e2      	lsrs	r2, r4, #3
 100f332:	08e8      	lsrs	r0, r5, #3
 100f334:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 100f338:	f004 0307 	and.w	r3, r4, #7
 100f33c:	4605      	mov	r5, r0
 100f33e:	3330      	adds	r3, #48	; 0x30
 100f340:	4614      	mov	r4, r2
 100f342:	ea54 0005 	orrs.w	r0, r4, r5
 100f346:	f801 3c01 	strb.w	r3, [r1, #-1]
 100f34a:	f101 32ff 	add.w	r2, r1, #4294967295
 100f34e:	d1ee      	bne.n	100f32e <_vfprintf_r+0xae6>
 100f350:	9e03      	ldr	r6, [sp, #12]
 100f352:	920b      	str	r2, [sp, #44]	; 0x2c
 100f354:	4630      	mov	r0, r6
 100f356:	2b30      	cmp	r3, #48	; 0x30
 100f358:	bf0c      	ite	eq
 100f35a:	2000      	moveq	r0, #0
 100f35c:	f000 0001 	andne.w	r0, r0, #1
 100f360:	2800      	cmp	r0, #0
 100f362:	f040 829a 	bne.w	100f89a <_vfprintf_r+0x1052>
 100f366:	ab54      	add	r3, sp, #336	; 0x150
 100f368:	1a9b      	subs	r3, r3, r2
 100f36a:	9308      	str	r3, [sp, #32]
 100f36c:	f7ff bbf8 	b.w	100eb60 <_vfprintf_r+0x318>
 100f370:	aa28      	add	r2, sp, #160	; 0xa0
 100f372:	9905      	ldr	r1, [sp, #20]
 100f374:	4650      	mov	r0, sl
 100f376:	f004 ff99 	bl	10142ac <__sprint_r>
 100f37a:	2800      	cmp	r0, #0
 100f37c:	f43f ac68 	beq.w	100ec50 <_vfprintf_r+0x408>
 100f380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f382:	2b00      	cmp	r3, #0
 100f384:	f43f ab8e 	beq.w	100eaa4 <_vfprintf_r+0x25c>
 100f388:	990a      	ldr	r1, [sp, #40]	; 0x28
 100f38a:	4650      	mov	r0, sl
 100f38c:	f002 fc78 	bl	1011c80 <_free_r>
 100f390:	f7ff bb88 	b.w	100eaa4 <_vfprintf_r+0x25c>
 100f394:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f396:	3201      	adds	r2, #1
 100f398:	f248 20d8 	movw	r0, #33496	; 0x82d8
 100f39c:	2401      	movs	r4, #1
 100f39e:	3301      	adds	r3, #1
 100f3a0:	f2c0 1005 	movt	r0, #261	; 0x105
 100f3a4:	2b07      	cmp	r3, #7
 100f3a6:	e9c9 0400 	strd	r0, r4, [r9]
 100f3aa:	922a      	str	r2, [sp, #168]	; 0xa8
 100f3ac:	bfd8      	it	le
 100f3ae:	f109 0908 	addle.w	r9, r9, #8
 100f3b2:	9329      	str	r3, [sp, #164]	; 0xa4
 100f3b4:	f300 865e 	bgt.w	1010074 <_vfprintf_r+0x182c>
 100f3b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f3ba:	430b      	orrs	r3, r1
 100f3bc:	f000 8685 	beq.w	10100ca <_vfprintf_r+0x1882>
 100f3c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f3c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 100f3c4:	3301      	adds	r3, #1
 100f3c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100f3c8:	2b07      	cmp	r3, #7
 100f3ca:	4402      	add	r2, r0
 100f3cc:	f8c9 0004 	str.w	r0, [r9, #4]
 100f3d0:	f8c9 4000 	str.w	r4, [r9]
 100f3d4:	bfd8      	it	le
 100f3d6:	f109 0908 	addle.w	r9, r9, #8
 100f3da:	922a      	str	r2, [sp, #168]	; 0xa8
 100f3dc:	9329      	str	r3, [sp, #164]	; 0xa4
 100f3de:	f300 8657 	bgt.w	1010090 <_vfprintf_r+0x1848>
 100f3e2:	2900      	cmp	r1, #0
 100f3e4:	f2c0 86cc 	blt.w	1010180 <_vfprintf_r+0x1938>
 100f3e8:	3301      	adds	r3, #1
 100f3ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 100f3ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100f3ee:	2b07      	cmp	r3, #7
 100f3f0:	440a      	add	r2, r1
 100f3f2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f3f6:	e9c9 0100 	strd	r0, r1, [r9]
 100f3fa:	f77f ac14 	ble.w	100ec26 <_vfprintf_r+0x3de>
 100f3fe:	aa28      	add	r2, sp, #160	; 0xa0
 100f400:	9905      	ldr	r1, [sp, #20]
 100f402:	4650      	mov	r0, sl
 100f404:	f004 ff52 	bl	10142ac <__sprint_r>
 100f408:	2800      	cmp	r0, #0
 100f40a:	d1b9      	bne.n	100f380 <_vfprintf_r+0xb38>
 100f40c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f40e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f412:	e40a      	b.n	100ec2a <_vfprintf_r+0x3e2>
 100f414:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100f416:	3201      	adds	r2, #1
 100f418:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100f41a:	f109 0308 	add.w	r3, r9, #8
 100f41e:	2c01      	cmp	r4, #1
 100f420:	f100 0101 	add.w	r1, r0, #1
 100f424:	f340 812e 	ble.w	100f684 <_vfprintf_r+0xe3c>
 100f428:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100f42a:	2907      	cmp	r1, #7
 100f42c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f430:	f8c9 0000 	str.w	r0, [r9]
 100f434:	f04f 0001 	mov.w	r0, #1
 100f438:	f8c9 0004 	str.w	r0, [r9, #4]
 100f43c:	f300 82ab 	bgt.w	100f996 <_vfprintf_r+0x114e>
 100f440:	3101      	adds	r1, #1
 100f442:	9815      	ldr	r0, [sp, #84]	; 0x54
 100f444:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100f446:	2907      	cmp	r1, #7
 100f448:	4402      	add	r2, r0
 100f44a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f44e:	e9c3 4000 	strd	r4, r0, [r3]
 100f452:	bfd8      	it	le
 100f454:	3308      	addle	r3, #8
 100f456:	f300 82aa 	bgt.w	100f9ae <_vfprintf_r+0x1166>
 100f45a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100f45e:	1c48      	adds	r0, r1, #1
 100f460:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100f462:	f103 0908 	add.w	r9, r3, #8
 100f466:	4684      	mov	ip, r0
 100f468:	3c01      	subs	r4, #1
 100f46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f46e:	f000 811c 	beq.w	100f6aa <_vfprintf_r+0xe62>
 100f472:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100f474:	2807      	cmp	r0, #7
 100f476:	4422      	add	r2, r4
 100f478:	605c      	str	r4, [r3, #4]
 100f47a:	f105 0501 	add.w	r5, r5, #1
 100f47e:	922a      	str	r2, [sp, #168]	; 0xa8
 100f480:	601d      	str	r5, [r3, #0]
 100f482:	9029      	str	r0, [sp, #164]	; 0xa4
 100f484:	f300 8221 	bgt.w	100f8ca <_vfprintf_r+0x1082>
 100f488:	f103 0410 	add.w	r4, r3, #16
 100f48c:	1c88      	adds	r0, r1, #2
 100f48e:	464b      	mov	r3, r9
 100f490:	46a1      	mov	r9, r4
 100f492:	9918      	ldr	r1, [sp, #96]	; 0x60
 100f494:	2807      	cmp	r0, #7
 100f496:	9029      	str	r0, [sp, #164]	; 0xa4
 100f498:	440a      	add	r2, r1
 100f49a:	922a      	str	r2, [sp, #168]	; 0xa8
 100f49c:	6059      	str	r1, [r3, #4]
 100f49e:	a922      	add	r1, sp, #136	; 0x88
 100f4a0:	6019      	str	r1, [r3, #0]
 100f4a2:	f77f abc2 	ble.w	100ec2a <_vfprintf_r+0x3e2>
 100f4a6:	e7aa      	b.n	100f3fe <_vfprintf_r+0xbb6>
 100f4a8:	aa28      	add	r2, sp, #160	; 0xa0
 100f4aa:	9905      	ldr	r1, [sp, #20]
 100f4ac:	4650      	mov	r0, sl
 100f4ae:	f004 fefd 	bl	10142ac <__sprint_r>
 100f4b2:	2800      	cmp	r0, #0
 100f4b4:	f47f af64 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f4b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f4ba:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f4be:	f7ff bb84 	b.w	100ebca <_vfprintf_r+0x382>
 100f4c2:	aa28      	add	r2, sp, #160	; 0xa0
 100f4c4:	9905      	ldr	r1, [sp, #20]
 100f4c6:	4650      	mov	r0, sl
 100f4c8:	f004 fef0 	bl	10142ac <__sprint_r>
 100f4cc:	2800      	cmp	r0, #0
 100f4ce:	f47f af57 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f4d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f4d4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f4d8:	f7ff bb8a 	b.w	100ebf0 <_vfprintf_r+0x3a8>
 100f4dc:	2c10      	cmp	r4, #16
 100f4de:	f645 451c 	movw	r5, #23580	; 0x5c1c
 100f4e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f4e4:	f2c0 1505 	movt	r5, #261	; 0x105
 100f4e8:	dd27      	ble.n	100f53a <_vfprintf_r+0xcf2>
 100f4ea:	9704      	str	r7, [sp, #16]
 100f4ec:	2610      	movs	r6, #16
 100f4ee:	462f      	mov	r7, r5
 100f4f0:	4619      	mov	r1, r3
 100f4f2:	9d05      	ldr	r5, [sp, #20]
 100f4f4:	e005      	b.n	100f502 <_vfprintf_r+0xcba>
 100f4f6:	bf00      	nop
 100f4f8:	01055c2c 	.word	0x01055c2c
 100f4fc:	3c10      	subs	r4, #16
 100f4fe:	2c10      	cmp	r4, #16
 100f500:	dd18      	ble.n	100f534 <_vfprintf_r+0xcec>
 100f502:	3101      	adds	r1, #1
 100f504:	3210      	adds	r2, #16
 100f506:	2907      	cmp	r1, #7
 100f508:	e9c9 7600 	strd	r7, r6, [r9]
 100f50c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f510:	f109 0908 	add.w	r9, r9, #8
 100f514:	ddf2      	ble.n	100f4fc <_vfprintf_r+0xcb4>
 100f516:	aa28      	add	r2, sp, #160	; 0xa0
 100f518:	4629      	mov	r1, r5
 100f51a:	4650      	mov	r0, sl
 100f51c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f520:	f004 fec4 	bl	10142ac <__sprint_r>
 100f524:	2800      	cmp	r0, #0
 100f526:	f47f af2b 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f52a:	3c10      	subs	r4, #16
 100f52c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f530:	2c10      	cmp	r4, #16
 100f532:	dce6      	bgt.n	100f502 <_vfprintf_r+0xcba>
 100f534:	463d      	mov	r5, r7
 100f536:	9f04      	ldr	r7, [sp, #16]
 100f538:	460b      	mov	r3, r1
 100f53a:	3301      	adds	r3, #1
 100f53c:	4422      	add	r2, r4
 100f53e:	2b07      	cmp	r3, #7
 100f540:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f544:	e9c9 5400 	strd	r5, r4, [r9]
 100f548:	f77f ab77 	ble.w	100ec3a <_vfprintf_r+0x3f2>
 100f54c:	aa28      	add	r2, sp, #160	; 0xa0
 100f54e:	9905      	ldr	r1, [sp, #20]
 100f550:	4650      	mov	r0, sl
 100f552:	f004 feab 	bl	10142ac <__sprint_r>
 100f556:	2800      	cmp	r0, #0
 100f558:	f47f af12 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f55c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f55e:	f7ff bb6c 	b.w	100ec3a <_vfprintf_r+0x3f2>
 100f562:	ab54      	add	r3, sp, #336	; 0x150
 100f564:	9204      	str	r2, [sp, #16]
 100f566:	930b      	str	r3, [sp, #44]	; 0x2c
 100f568:	9208      	str	r2, [sp, #32]
 100f56a:	f7ff baf9 	b.w	100eb60 <_vfprintf_r+0x318>
 100f56e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100f570:	2900      	cmp	r1, #0
 100f572:	f77f af0f 	ble.w	100f394 <_vfprintf_r+0xb4c>
 100f576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f578:	9912      	ldr	r1, [sp, #72]	; 0x48
 100f57a:	428b      	cmp	r3, r1
 100f57c:	bfa8      	it	ge
 100f57e:	460b      	movge	r3, r1
 100f580:	2b00      	cmp	r3, #0
 100f582:	461c      	mov	r4, r3
 100f584:	dd0f      	ble.n	100f5a6 <_vfprintf_r+0xd5e>
 100f586:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f588:	4422      	add	r2, r4
 100f58a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100f58c:	3301      	adds	r3, #1
 100f58e:	f8c9 4004 	str.w	r4, [r9, #4]
 100f592:	2b07      	cmp	r3, #7
 100f594:	922a      	str	r2, [sp, #168]	; 0xa8
 100f596:	f8c9 1000 	str.w	r1, [r9]
 100f59a:	bfd8      	it	le
 100f59c:	f109 0908 	addle.w	r9, r9, #8
 100f5a0:	9329      	str	r3, [sp, #164]	; 0xa4
 100f5a2:	f300 8441 	bgt.w	100fe28 <_vfprintf_r+0x15e0>
 100f5a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f5a8:	2c00      	cmp	r4, #0
 100f5aa:	bfa8      	it	ge
 100f5ac:	1b1b      	subge	r3, r3, r4
 100f5ae:	2b00      	cmp	r3, #0
 100f5b0:	461c      	mov	r4, r3
 100f5b2:	f300 81b9 	bgt.w	100f928 <_vfprintf_r+0x10e0>
 100f5b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100f5b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f5ba:	440b      	add	r3, r1
 100f5bc:	0571      	lsls	r1, r6, #21
 100f5be:	461d      	mov	r5, r3
 100f5c0:	f100 8389 	bmi.w	100fcd6 <_vfprintf_r+0x148e>
 100f5c4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100f5c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f5c8:	429c      	cmp	r4, r3
 100f5ca:	db02      	blt.n	100f5d2 <_vfprintf_r+0xd8a>
 100f5cc:	07f3      	lsls	r3, r6, #31
 100f5ce:	f140 8438 	bpl.w	100fe42 <_vfprintf_r+0x15fa>
 100f5d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f5d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 100f5d6:	3301      	adds	r3, #1
 100f5d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100f5da:	2b07      	cmp	r3, #7
 100f5dc:	440a      	add	r2, r1
 100f5de:	f8c9 1004 	str.w	r1, [r9, #4]
 100f5e2:	f8c9 0000 	str.w	r0, [r9]
 100f5e6:	bfd8      	it	le
 100f5e8:	f109 0908 	addle.w	r9, r9, #8
 100f5ec:	922a      	str	r2, [sp, #168]	; 0xa8
 100f5ee:	9329      	str	r3, [sp, #164]	; 0xa4
 100f5f0:	f300 857f 	bgt.w	10100f2 <_vfprintf_r+0x18aa>
 100f5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f5f6:	4619      	mov	r1, r3
 100f5f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f5fa:	4419      	add	r1, r3
 100f5fc:	1b1b      	subs	r3, r3, r4
 100f5fe:	1b4c      	subs	r4, r1, r5
 100f600:	429c      	cmp	r4, r3
 100f602:	bfa8      	it	ge
 100f604:	461c      	movge	r4, r3
 100f606:	2c00      	cmp	r4, #0
 100f608:	dd0e      	ble.n	100f628 <_vfprintf_r+0xde0>
 100f60a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100f60c:	4422      	add	r2, r4
 100f60e:	f8c9 5000 	str.w	r5, [r9]
 100f612:	3101      	adds	r1, #1
 100f614:	f8c9 4004 	str.w	r4, [r9, #4]
 100f618:	2907      	cmp	r1, #7
 100f61a:	922a      	str	r2, [sp, #168]	; 0xa8
 100f61c:	9129      	str	r1, [sp, #164]	; 0xa4
 100f61e:	bfd8      	it	le
 100f620:	f109 0908 	addle.w	r9, r9, #8
 100f624:	f300 8573 	bgt.w	101010e <_vfprintf_r+0x18c6>
 100f628:	2c00      	cmp	r4, #0
 100f62a:	bfac      	ite	ge
 100f62c:	1b1c      	subge	r4, r3, r4
 100f62e:	461c      	movlt	r4, r3
 100f630:	2c00      	cmp	r4, #0
 100f632:	f77f aafa 	ble.w	100ec2a <_vfprintf_r+0x3e2>
 100f636:	2c10      	cmp	r4, #16
 100f638:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f63a:	f340 81a1 	ble.w	100f980 <_vfprintf_r+0x1138>
 100f63e:	9604      	str	r6, [sp, #16]
 100f640:	2510      	movs	r5, #16
 100f642:	4626      	mov	r6, r4
 100f644:	4619      	mov	r1, r3
 100f646:	9c05      	ldr	r4, [sp, #20]
 100f648:	e003      	b.n	100f652 <_vfprintf_r+0xe0a>
 100f64a:	3e10      	subs	r6, #16
 100f64c:	2e10      	cmp	r6, #16
 100f64e:	f340 8194 	ble.w	100f97a <_vfprintf_r+0x1132>
 100f652:	3101      	adds	r1, #1
 100f654:	4bb9      	ldr	r3, [pc, #740]	; (100f93c <_vfprintf_r+0x10f4>)
 100f656:	2907      	cmp	r1, #7
 100f658:	f102 0210 	add.w	r2, r2, #16
 100f65c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f660:	e9c9 3500 	strd	r3, r5, [r9]
 100f664:	f109 0908 	add.w	r9, r9, #8
 100f668:	ddef      	ble.n	100f64a <_vfprintf_r+0xe02>
 100f66a:	aa28      	add	r2, sp, #160	; 0xa0
 100f66c:	4621      	mov	r1, r4
 100f66e:	4650      	mov	r0, sl
 100f670:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f674:	f004 fe1a 	bl	10142ac <__sprint_r>
 100f678:	2800      	cmp	r0, #0
 100f67a:	f47f ae81 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f67e:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f682:	e7e2      	b.n	100f64a <_vfprintf_r+0xe02>
 100f684:	07f4      	lsls	r4, r6, #31
 100f686:	f53f aecf 	bmi.w	100f428 <_vfprintf_r+0xbe0>
 100f68a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 100f68c:	2907      	cmp	r1, #7
 100f68e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f692:	f8c9 4000 	str.w	r4, [r9]
 100f696:	f04f 0401 	mov.w	r4, #1
 100f69a:	f8c9 4004 	str.w	r4, [r9, #4]
 100f69e:	f300 8114 	bgt.w	100f8ca <_vfprintf_r+0x1082>
 100f6a2:	3002      	adds	r0, #2
 100f6a4:	f109 0910 	add.w	r9, r9, #16
 100f6a8:	e6f3      	b.n	100f492 <_vfprintf_r+0xc4a>
 100f6aa:	2c00      	cmp	r4, #0
 100f6ac:	f77f aef1 	ble.w	100f492 <_vfprintf_r+0xc4a>
 100f6b0:	2c10      	cmp	r4, #16
 100f6b2:	f340 8672 	ble.w	101039a <_vfprintf_r+0x1b52>
 100f6b6:	2510      	movs	r5, #16
 100f6b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 100f6bc:	e005      	b.n	100f6ca <_vfprintf_r+0xe82>
 100f6be:	3c10      	subs	r4, #16
 100f6c0:	f101 0c01 	add.w	ip, r1, #1
 100f6c4:	2c10      	cmp	r4, #16
 100f6c6:	f340 80f4 	ble.w	100f8b2 <_vfprintf_r+0x106a>
 100f6ca:	489c      	ldr	r0, [pc, #624]	; (100f93c <_vfprintf_r+0x10f4>)
 100f6cc:	4661      	mov	r1, ip
 100f6ce:	2907      	cmp	r1, #7
 100f6d0:	f102 0210 	add.w	r2, r2, #16
 100f6d4:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 100f6d8:	e9c3 0500 	strd	r0, r5, [r3]
 100f6dc:	f103 0308 	add.w	r3, r3, #8
 100f6e0:	dded      	ble.n	100f6be <_vfprintf_r+0xe76>
 100f6e2:	aa28      	add	r2, sp, #160	; 0xa0
 100f6e4:	4649      	mov	r1, r9
 100f6e6:	4650      	mov	r0, sl
 100f6e8:	f004 fde0 	bl	10142ac <__sprint_r>
 100f6ec:	ab2b      	add	r3, sp, #172	; 0xac
 100f6ee:	2800      	cmp	r0, #0
 100f6f0:	f47f ae46 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f6f4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f6f8:	e7e1      	b.n	100f6be <_vfprintf_r+0xe76>
 100f6fa:	07f4      	lsls	r4, r6, #31
 100f6fc:	bf58      	it	pl
 100f6fe:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 100f700:	f57f aa93 	bpl.w	100ec2a <_vfprintf_r+0x3e2>
 100f704:	e54d      	b.n	100f1a2 <_vfprintf_r+0x95a>
 100f706:	9906      	ldr	r1, [sp, #24]
 100f708:	6812      	ldr	r2, [r2, #0]
 100f70a:	9309      	str	r3, [sp, #36]	; 0x24
 100f70c:	17cd      	asrs	r5, r1, #31
 100f70e:	4608      	mov	r0, r1
 100f710:	4629      	mov	r1, r5
 100f712:	e9c2 0100 	strd	r0, r1, [r2]
 100f716:	f7ff b8f3 	b.w	100e900 <_vfprintf_r+0xb8>
 100f71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f71c:	06f1      	lsls	r1, r6, #27
 100f71e:	f852 4b04 	ldr.w	r4, [r2], #4
 100f722:	f100 865b 	bmi.w	10103dc <_vfprintf_r+0x1b94>
 100f726:	0673      	lsls	r3, r6, #25
 100f728:	f140 81f9 	bpl.w	100fb1e <_vfprintf_r+0x12d6>
 100f72c:	4633      	mov	r3, r6
 100f72e:	9209      	str	r2, [sp, #36]	; 0x24
 100f730:	b2a4      	uxth	r4, r4
 100f732:	2500      	movs	r5, #0
 100f734:	e4b6      	b.n	100f0a4 <_vfprintf_r+0x85c>
 100f736:	eeb4 8b48 	vcmp.f64	d8, d8
 100f73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f73e:	f180 85d6 	bvs.w	10102ee <_vfprintf_r+0x1aa6>
 100f742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100f744:	f023 0420 	bic.w	r4, r3, #32
 100f748:	2c41      	cmp	r4, #65	; 0x41
 100f74a:	f040 81f4 	bne.w	100fb36 <_vfprintf_r+0x12ee>
 100f74e:	2b61      	cmp	r3, #97	; 0x61
 100f750:	f04f 0230 	mov.w	r2, #48	; 0x30
 100f754:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 100f758:	bf0c      	ite	eq
 100f75a:	2378      	moveq	r3, #120	; 0x78
 100f75c:	2358      	movne	r3, #88	; 0x58
 100f75e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100f762:	9b04      	ldr	r3, [sp, #16]
 100f764:	2b63      	cmp	r3, #99	; 0x63
 100f766:	f300 839e 	bgt.w	100fea6 <_vfprintf_r+0x165e>
 100f76a:	2300      	movs	r3, #0
 100f76c:	930a      	str	r3, [sp, #40]	; 0x28
 100f76e:	ab3b      	add	r3, sp, #236	; 0xec
 100f770:	930b      	str	r3, [sp, #44]	; 0x2c
 100f772:	ee18 3a90 	vmov	r3, s17
 100f776:	2b00      	cmp	r3, #0
 100f778:	f280 8523 	bge.w	10101c2 <_vfprintf_r+0x197a>
 100f77c:	eeb1 0b48 	vneg.f64	d0, d8
 100f780:	232d      	movs	r3, #45	; 0x2d
 100f782:	930c      	str	r3, [sp, #48]	; 0x30
 100f784:	a81f      	add	r0, sp, #124	; 0x7c
 100f786:	f003 fd87 	bl	1013298 <frexp>
 100f78a:	9a04      	ldr	r2, [sp, #16]
 100f78c:	990e      	ldr	r1, [sp, #56]	; 0x38
 100f78e:	f248 20bc 	movw	r0, #33468	; 0x82bc
 100f792:	f2c0 1005 	movt	r0, #261	; 0x105
 100f796:	3a01      	subs	r2, #1
 100f798:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100f79a:	ee20 0b0b 	vmul.f64	d0, d0, d11
 100f79e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100f7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f7a6:	bf04      	itt	eq
 100f7a8:	2301      	moveq	r3, #1
 100f7aa:	931f      	streq	r3, [sp, #124]	; 0x7c
 100f7ac:	f248 036c 	movw	r3, #32876	; 0x806c
 100f7b0:	f2c0 1305 	movt	r3, #261	; 0x105
 100f7b4:	2961      	cmp	r1, #97	; 0x61
 100f7b6:	bf18      	it	ne
 100f7b8:	4618      	movne	r0, r3
 100f7ba:	e005      	b.n	100f7c8 <_vfprintf_r+0xf80>
 100f7bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100f7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f7c4:	d015      	beq.n	100f7f2 <_vfprintf_r+0xfaa>
 100f7c6:	461d      	mov	r5, r3
 100f7c8:	ee20 0b09 	vmul.f64	d0, d0, d9
 100f7cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 100f7d0:	462b      	mov	r3, r5
 100f7d2:	4611      	mov	r1, r2
 100f7d4:	f102 32ff 	add.w	r2, r2, #4294967295
 100f7d8:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 100f7dc:	ee17 ca90 	vmov	ip, s15
 100f7e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 100f7e4:	ee30 0b46 	vsub.f64	d0, d0, d6
 100f7e8:	f810 c00c 	ldrb.w	ip, [r0, ip]
 100f7ec:	f803 cb01 	strb.w	ip, [r3], #1
 100f7f0:	d1e4      	bne.n	100f7bc <_vfprintf_r+0xf74>
 100f7f2:	eeb4 0bca 	vcmpe.f64	d0, d10
 100f7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f7fa:	f300 852b 	bgt.w	1010254 <_vfprintf_r+0x1a0c>
 100f7fe:	eeb4 0b4a 	vcmp.f64	d0, d10
 100f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f806:	d104      	bne.n	100f812 <_vfprintf_r+0xfca>
 100f808:	ee17 2a90 	vmov	r2, s15
 100f80c:	07d2      	lsls	r2, r2, #31
 100f80e:	f100 8521 	bmi.w	1010254 <_vfprintf_r+0x1a0c>
 100f812:	2900      	cmp	r1, #0
 100f814:	bfa2      	ittt	ge
 100f816:	1c4a      	addge	r2, r1, #1
 100f818:	18d2      	addge	r2, r2, r3
 100f81a:	2130      	movge	r1, #48	; 0x30
 100f81c:	db03      	blt.n	100f826 <_vfprintf_r+0xfde>
 100f81e:	f803 1b01 	strb.w	r1, [r3], #1
 100f822:	4293      	cmp	r3, r2
 100f824:	d1fb      	bne.n	100f81e <_vfprintf_r+0xfd6>
 100f826:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100f828:	f046 0602 	orr.w	r6, r6, #2
 100f82c:	1a9b      	subs	r3, r3, r2
 100f82e:	9312      	str	r3, [sp, #72]	; 0x48
 100f830:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100f832:	9310      	str	r3, [sp, #64]	; 0x40
 100f834:	e1c3      	b.n	100fbbe <_vfprintf_r+0x1376>
 100f836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f838:	06f1      	lsls	r1, r6, #27
 100f83a:	f852 4b04 	ldr.w	r4, [r2], #4
 100f83e:	f100 85be 	bmi.w	10103be <_vfprintf_r+0x1b76>
 100f842:	0673      	lsls	r3, r6, #25
 100f844:	9209      	str	r2, [sp, #36]	; 0x24
 100f846:	9603      	str	r6, [sp, #12]
 100f848:	f140 815d 	bpl.w	100fb06 <_vfprintf_r+0x12be>
 100f84c:	b2a4      	uxth	r4, r4
 100f84e:	2500      	movs	r5, #0
 100f850:	2301      	movs	r3, #1
 100f852:	f7ff b95e 	b.w	100eb12 <_vfprintf_r+0x2ca>
 100f856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100f858:	06f4      	lsls	r4, r6, #27
 100f85a:	f103 0204 	add.w	r2, r3, #4
 100f85e:	f100 85c0 	bmi.w	10103e2 <_vfprintf_r+0x1b9a>
 100f862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100f864:	0670      	lsls	r0, r6, #25
 100f866:	bf48      	it	mi
 100f868:	f9b3 4000 	ldrshmi.w	r4, [r3]
 100f86c:	d404      	bmi.n	100f878 <_vfprintf_r+0x1030>
 100f86e:	05b1      	lsls	r1, r6, #22
 100f870:	f140 82f9 	bpl.w	100fe66 <_vfprintf_r+0x161e>
 100f874:	f993 4000 	ldrsb.w	r4, [r3]
 100f878:	17e5      	asrs	r5, r4, #31
 100f87a:	9209      	str	r2, [sp, #36]	; 0x24
 100f87c:	9603      	str	r6, [sp, #12]
 100f87e:	4622      	mov	r2, r4
 100f880:	462b      	mov	r3, r5
 100f882:	f7ff baff 	b.w	100ee84 <_vfprintf_r+0x63c>
 100f886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100f888:	2201      	movs	r2, #1
 100f88a:	ac3b      	add	r4, sp, #236	; 0xec
 100f88c:	9203      	str	r2, [sp, #12]
 100f88e:	9208      	str	r2, [sp, #32]
 100f890:	681b      	ldr	r3, [r3, #0]
 100f892:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 100f896:	f7ff bbed 	b.w	100f074 <_vfprintf_r+0x82c>
 100f89a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100f89c:	3902      	subs	r1, #2
 100f89e:	2330      	movs	r3, #48	; 0x30
 100f8a0:	9e03      	ldr	r6, [sp, #12]
 100f8a2:	910b      	str	r1, [sp, #44]	; 0x2c
 100f8a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 100f8a8:	ab54      	add	r3, sp, #336	; 0x150
 100f8aa:	1a5b      	subs	r3, r3, r1
 100f8ac:	9308      	str	r3, [sp, #32]
 100f8ae:	f7ff b957 	b.w	100eb60 <_vfprintf_r+0x318>
 100f8b2:	f103 0108 	add.w	r1, r3, #8
 100f8b6:	4660      	mov	r0, ip
 100f8b8:	4d20      	ldr	r5, [pc, #128]	; (100f93c <_vfprintf_r+0x10f4>)
 100f8ba:	2807      	cmp	r0, #7
 100f8bc:	4422      	add	r2, r4
 100f8be:	605c      	str	r4, [r3, #4]
 100f8c0:	922a      	str	r2, [sp, #168]	; 0xa8
 100f8c2:	601d      	str	r5, [r3, #0]
 100f8c4:	9029      	str	r0, [sp, #164]	; 0xa4
 100f8c6:	f340 829d 	ble.w	100fe04 <_vfprintf_r+0x15bc>
 100f8ca:	aa28      	add	r2, sp, #160	; 0xa0
 100f8cc:	9905      	ldr	r1, [sp, #20]
 100f8ce:	4650      	mov	r0, sl
 100f8d0:	f004 fcec 	bl	10142ac <__sprint_r>
 100f8d4:	2800      	cmp	r0, #0
 100f8d6:	f47f ad53 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f8da:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100f8dc:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 100f8e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f8e2:	ab2b      	add	r3, sp, #172	; 0xac
 100f8e4:	3001      	adds	r0, #1
 100f8e6:	e5d4      	b.n	100f492 <_vfprintf_r+0xc4a>
 100f8e8:	aa28      	add	r2, sp, #160	; 0xa0
 100f8ea:	9905      	ldr	r1, [sp, #20]
 100f8ec:	4650      	mov	r0, sl
 100f8ee:	f004 fcdd 	bl	10142ac <__sprint_r>
 100f8f2:	2800      	cmp	r0, #0
 100f8f4:	f47f ad44 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f8f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f8fa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f8fe:	e462      	b.n	100f1c6 <_vfprintf_r+0x97e>
 100f900:	9804      	ldr	r0, [sp, #16]
 100f902:	f248 23d0 	movw	r3, #33488	; 0x82d0
 100f906:	9204      	str	r2, [sp, #16]
 100f908:	f2c0 1305 	movt	r3, #261	; 0x105
 100f90c:	2806      	cmp	r0, #6
 100f90e:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 100f912:	4611      	mov	r1, r2
 100f914:	9213      	str	r2, [sp, #76]	; 0x4c
 100f916:	bf28      	it	cs
 100f918:	2006      	movcs	r0, #6
 100f91a:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100f91e:	9003      	str	r0, [sp, #12]
 100f920:	9008      	str	r0, [sp, #32]
 100f922:	930b      	str	r3, [sp, #44]	; 0x2c
 100f924:	f7ff b929 	b.w	100eb7a <_vfprintf_r+0x332>
 100f928:	2c10      	cmp	r4, #16
 100f92a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f92c:	f340 81ba 	ble.w	100fca4 <_vfprintf_r+0x145c>
 100f930:	9604      	str	r6, [sp, #16]
 100f932:	2510      	movs	r5, #16
 100f934:	4626      	mov	r6, r4
 100f936:	4619      	mov	r1, r3
 100f938:	9c05      	ldr	r4, [sp, #20]
 100f93a:	e005      	b.n	100f948 <_vfprintf_r+0x1100>
 100f93c:	01055c2c 	.word	0x01055c2c
 100f940:	3e10      	subs	r6, #16
 100f942:	2e10      	cmp	r6, #16
 100f944:	f340 81ab 	ble.w	100fc9e <_vfprintf_r+0x1456>
 100f948:	3101      	adds	r1, #1
 100f94a:	4bbc      	ldr	r3, [pc, #752]	; (100fc3c <_vfprintf_r+0x13f4>)
 100f94c:	2907      	cmp	r1, #7
 100f94e:	f102 0210 	add.w	r2, r2, #16
 100f952:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100f956:	e9c9 3500 	strd	r3, r5, [r9]
 100f95a:	f109 0908 	add.w	r9, r9, #8
 100f95e:	ddef      	ble.n	100f940 <_vfprintf_r+0x10f8>
 100f960:	aa28      	add	r2, sp, #160	; 0xa0
 100f962:	4621      	mov	r1, r4
 100f964:	4650      	mov	r0, sl
 100f966:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f96a:	f004 fc9f 	bl	10142ac <__sprint_r>
 100f96e:	2800      	cmp	r0, #0
 100f970:	f47f ad06 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f974:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100f978:	e7e2      	b.n	100f940 <_vfprintf_r+0x10f8>
 100f97a:	4634      	mov	r4, r6
 100f97c:	9e04      	ldr	r6, [sp, #16]
 100f97e:	460b      	mov	r3, r1
 100f980:	3301      	adds	r3, #1
 100f982:	49ae      	ldr	r1, [pc, #696]	; (100fc3c <_vfprintf_r+0x13f4>)
 100f984:	2b07      	cmp	r3, #7
 100f986:	4422      	add	r2, r4
 100f988:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f98c:	e9c9 1400 	strd	r1, r4, [r9]
 100f990:	f77f a949 	ble.w	100ec26 <_vfprintf_r+0x3de>
 100f994:	e533      	b.n	100f3fe <_vfprintf_r+0xbb6>
 100f996:	aa28      	add	r2, sp, #160	; 0xa0
 100f998:	9905      	ldr	r1, [sp, #20]
 100f99a:	4650      	mov	r0, sl
 100f99c:	f004 fc86 	bl	10142ac <__sprint_r>
 100f9a0:	2800      	cmp	r0, #0
 100f9a2:	f47f aced 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f9a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f9a8:	ab2b      	add	r3, sp, #172	; 0xac
 100f9aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100f9ac:	e548      	b.n	100f440 <_vfprintf_r+0xbf8>
 100f9ae:	aa28      	add	r2, sp, #160	; 0xa0
 100f9b0:	9905      	ldr	r1, [sp, #20]
 100f9b2:	4650      	mov	r0, sl
 100f9b4:	f004 fc7a 	bl	10142ac <__sprint_r>
 100f9b8:	2800      	cmp	r0, #0
 100f9ba:	f47f ace1 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f9be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f9c0:	ab2b      	add	r3, sp, #172	; 0xac
 100f9c2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100f9c4:	e549      	b.n	100f45a <_vfprintf_r+0xc12>
 100f9c6:	9603      	str	r6, [sp, #12]
 100f9c8:	f7ff bb17 	b.w	100effa <_vfprintf_r+0x7b2>
 100f9cc:	aa28      	add	r2, sp, #160	; 0xa0
 100f9ce:	9905      	ldr	r1, [sp, #20]
 100f9d0:	4650      	mov	r0, sl
 100f9d2:	f004 fc6b 	bl	10142ac <__sprint_r>
 100f9d6:	2800      	cmp	r0, #0
 100f9d8:	f47f acd2 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f9dc:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f9e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f9e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f9e6:	f7ff b8dd 	b.w	100eba4 <_vfprintf_r+0x35c>
 100f9ea:	aa28      	add	r2, sp, #160	; 0xa0
 100f9ec:	9905      	ldr	r1, [sp, #20]
 100f9ee:	4650      	mov	r0, sl
 100f9f0:	f004 fc5c 	bl	10142ac <__sprint_r>
 100f9f4:	2800      	cmp	r0, #0
 100f9f6:	f47f acc3 	bne.w	100f380 <_vfprintf_r+0xb38>
 100f9fa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f9fe:	f7ff bbcb 	b.w	100f198 <_vfprintf_r+0x950>
 100fa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100fa04:	2208      	movs	r2, #8
 100fa06:	2100      	movs	r1, #0
 100fa08:	a826      	add	r0, sp, #152	; 0x98
 100fa0a:	9321      	str	r3, [sp, #132]	; 0x84
 100fa0c:	f7fc fb68 	bl	100c0e0 <memset>
 100fa10:	9b04      	ldr	r3, [sp, #16]
 100fa12:	1c5a      	adds	r2, r3, #1
 100fa14:	f000 81b6 	beq.w	100fd84 <_vfprintf_r+0x153c>
 100fa18:	2400      	movs	r4, #0
 100fa1a:	9603      	str	r6, [sp, #12]
 100fa1c:	f8cd 9010 	str.w	r9, [sp, #16]
 100fa20:	4626      	mov	r6, r4
 100fa22:	4699      	mov	r9, r3
 100fa24:	9509      	str	r5, [sp, #36]	; 0x24
 100fa26:	e009      	b.n	100fa3c <_vfprintf_r+0x11f4>
 100fa28:	f000 fd68 	bl	10104fc <_wcrtomb_r>
 100fa2c:	1833      	adds	r3, r6, r0
 100fa2e:	3001      	adds	r0, #1
 100fa30:	f000 83ea 	beq.w	1010208 <_vfprintf_r+0x19c0>
 100fa34:	454b      	cmp	r3, r9
 100fa36:	dc0a      	bgt.n	100fa4e <_vfprintf_r+0x1206>
 100fa38:	461e      	mov	r6, r3
 100fa3a:	d008      	beq.n	100fa4e <_vfprintf_r+0x1206>
 100fa3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100fa3e:	ab26      	add	r3, sp, #152	; 0x98
 100fa40:	a93b      	add	r1, sp, #236	; 0xec
 100fa42:	4650      	mov	r0, sl
 100fa44:	5915      	ldr	r5, [r2, r4]
 100fa46:	3404      	adds	r4, #4
 100fa48:	462a      	mov	r2, r5
 100fa4a:	2d00      	cmp	r5, #0
 100fa4c:	d1ec      	bne.n	100fa28 <_vfprintf_r+0x11e0>
 100fa4e:	9608      	str	r6, [sp, #32]
 100fa50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100fa52:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 100fa56:	e1a3      	b.n	100fda0 <_vfprintf_r+0x1558>
 100fa58:	9b03      	ldr	r3, [sp, #12]
 100fa5a:	2200      	movs	r2, #0
 100fa5c:	f8cd 9020 	str.w	r9, [sp, #32]
 100fa60:	ae54      	add	r6, sp, #336	; 0x150
 100fa62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 100fa66:	970c      	str	r7, [sp, #48]	; 0x30
 100fa68:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 100fa6c:	4691      	mov	r9, r2
 100fa6e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100fa72:	461f      	mov	r7, r3
 100fa74:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 100fa78:	e008      	b.n	100fa8c <_vfprintf_r+0x1244>
 100fa7a:	f7fa fc75 	bl	100a368 <__aeabi_uldivmod>
 100fa7e:	2d00      	cmp	r5, #0
 100fa80:	bf08      	it	eq
 100fa82:	2c0a      	cmpeq	r4, #10
 100fa84:	d329      	bcc.n	100fada <_vfprintf_r+0x1292>
 100fa86:	4604      	mov	r4, r0
 100fa88:	4656      	mov	r6, sl
 100fa8a:	460d      	mov	r5, r1
 100fa8c:	220a      	movs	r2, #10
 100fa8e:	2300      	movs	r3, #0
 100fa90:	4620      	mov	r0, r4
 100fa92:	4629      	mov	r1, r5
 100fa94:	f7fa fc68 	bl	100a368 <__aeabi_uldivmod>
 100fa98:	f109 0901 	add.w	r9, r9, #1
 100fa9c:	4620      	mov	r0, r4
 100fa9e:	4629      	mov	r1, r5
 100faa0:	f106 3aff 	add.w	sl, r6, #4294967295
 100faa4:	2300      	movs	r3, #0
 100faa6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 100faaa:	220a      	movs	r2, #10
 100faac:	f806 cc01 	strb.w	ip, [r6, #-1]
 100fab0:	2f00      	cmp	r7, #0
 100fab2:	d0e2      	beq.n	100fa7a <_vfprintf_r+0x1232>
 100fab4:	f898 6000 	ldrb.w	r6, [r8]
 100fab8:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 100fabc:	bf18      	it	ne
 100fabe:	f04f 0c01 	movne.w	ip, #1
 100fac2:	454e      	cmp	r6, r9
 100fac4:	bf18      	it	ne
 100fac6:	f04f 0c00 	movne.w	ip, #0
 100faca:	f1bc 0f00 	cmp.w	ip, #0
 100face:	d0d4      	beq.n	100fa7a <_vfprintf_r+0x1232>
 100fad0:	429d      	cmp	r5, r3
 100fad2:	bf08      	it	eq
 100fad4:	4294      	cmpeq	r4, r2
 100fad6:	f080 833e 	bcs.w	1010156 <_vfprintf_r+0x190e>
 100fada:	4652      	mov	r2, sl
 100fadc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 100fae0:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 100fae4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 100fae8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100faec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 100faf0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 100faf4:	9e03      	ldr	r6, [sp, #12]
 100faf6:	e436      	b.n	100f366 <_vfprintf_r+0xb1e>
 100faf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fafa:	6812      	ldr	r2, [r2, #0]
 100fafc:	9309      	str	r3, [sp, #36]	; 0x24
 100fafe:	9b06      	ldr	r3, [sp, #24]
 100fb00:	6013      	str	r3, [r2, #0]
 100fb02:	f7fe befd 	b.w	100e900 <_vfprintf_r+0xb8>
 100fb06:	05b5      	lsls	r5, r6, #22
 100fb08:	f04f 0301 	mov.w	r3, #1
 100fb0c:	bf48      	it	mi
 100fb0e:	b2e4      	uxtbmi	r4, r4
 100fb10:	2500      	movs	r5, #0
 100fb12:	f7fe bffe 	b.w	100eb12 <_vfprintf_r+0x2ca>
 100fb16:	4634      	mov	r4, r6
 100fb18:	460b      	mov	r3, r1
 100fb1a:	9e04      	ldr	r6, [sp, #16]
 100fb1c:	e730      	b.n	100f980 <_vfprintf_r+0x1138>
 100fb1e:	05b5      	lsls	r5, r6, #22
 100fb20:	bf45      	ittet	mi
 100fb22:	9209      	strmi	r2, [sp, #36]	; 0x24
 100fb24:	b2e4      	uxtbmi	r4, r4
 100fb26:	9209      	strpl	r2, [sp, #36]	; 0x24
 100fb28:	4633      	movmi	r3, r6
 100fb2a:	bf4e      	itee	mi
 100fb2c:	2500      	movmi	r5, #0
 100fb2e:	2500      	movpl	r5, #0
 100fb30:	4633      	movpl	r3, r6
 100fb32:	f7ff bab7 	b.w	100f0a4 <_vfprintf_r+0x85c>
 100fb36:	9b04      	ldr	r3, [sp, #16]
 100fb38:	1c5a      	adds	r2, r3, #1
 100fb3a:	f000 81bf 	beq.w	100febc <_vfprintf_r+0x1674>
 100fb3e:	2b00      	cmp	r3, #0
 100fb40:	bf08      	it	eq
 100fb42:	2c47      	cmpeq	r4, #71	; 0x47
 100fb44:	f040 81bc 	bne.w	100fec0 <_vfprintf_r+0x1678>
 100fb48:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100fb4c:	930d      	str	r3, [sp, #52]	; 0x34
 100fb4e:	ee18 3a90 	vmov	r3, s17
 100fb52:	2b00      	cmp	r3, #0
 100fb54:	f04f 0301 	mov.w	r3, #1
 100fb58:	9304      	str	r3, [sp, #16]
 100fb5a:	f2c0 83ed 	blt.w	1010338 <_vfprintf_r+0x1af0>
 100fb5e:	eeb0 cb48 	vmov.f64	d12, d8
 100fb62:	461d      	mov	r5, r3
 100fb64:	2300      	movs	r3, #0
 100fb66:	930c      	str	r3, [sp, #48]	; 0x30
 100fb68:	ab26      	add	r3, sp, #152	; 0x98
 100fb6a:	aa21      	add	r2, sp, #132	; 0x84
 100fb6c:	9301      	str	r3, [sp, #4]
 100fb6e:	2102      	movs	r1, #2
 100fb70:	9200      	str	r2, [sp, #0]
 100fb72:	ab1f      	add	r3, sp, #124	; 0x7c
 100fb74:	462a      	mov	r2, r5
 100fb76:	eeb0 0b4c 	vmov.f64	d0, d12
 100fb7a:	4650      	mov	r0, sl
 100fb7c:	f000 ffc8 	bl	1010b10 <_dtoa_r>
 100fb80:	2c47      	cmp	r4, #71	; 0x47
 100fb82:	900b      	str	r0, [sp, #44]	; 0x2c
 100fb84:	f040 81cc 	bne.w	100ff20 <_vfprintf_r+0x16d8>
 100fb88:	07f3      	lsls	r3, r6, #31
 100fb8a:	f100 81c9 	bmi.w	100ff20 <_vfprintf_r+0x16d8>
 100fb8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100fb90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100fb92:	2c47      	cmp	r4, #71	; 0x47
 100fb94:	eba3 0302 	sub.w	r3, r3, r2
 100fb98:	9312      	str	r3, [sp, #72]	; 0x48
 100fb9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100fb9c:	9310      	str	r3, [sp, #64]	; 0x40
 100fb9e:	f040 8247 	bne.w	1010030 <_vfprintf_r+0x17e8>
 100fba2:	9a04      	ldr	r2, [sp, #16]
 100fba4:	f113 0f03 	cmn.w	r3, #3
 100fba8:	bfa8      	it	ge
 100fbaa:	429a      	cmpge	r2, r3
 100fbac:	f280 8222 	bge.w	100fff4 <_vfprintf_r+0x17ac>
 100fbb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100fbb2:	2200      	movs	r2, #0
 100fbb4:	920a      	str	r2, [sp, #40]	; 0x28
 100fbb6:	3b02      	subs	r3, #2
 100fbb8:	930e      	str	r3, [sp, #56]	; 0x38
 100fbba:	f023 0420 	bic.w	r4, r3, #32
 100fbbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100fbc0:	2c41      	cmp	r4, #65	; 0x41
 100fbc2:	f103 32ff 	add.w	r2, r3, #4294967295
 100fbc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 100fbca:	921f      	str	r2, [sp, #124]	; 0x7c
 100fbcc:	bf04      	itt	eq
 100fbce:	330f      	addeq	r3, #15
 100fbd0:	b2db      	uxtbeq	r3, r3
 100fbd2:	2a00      	cmp	r2, #0
 100fbd4:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 100fbd8:	bfb7      	itett	lt
 100fbda:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 100fbdc:	232b      	movge	r3, #43	; 0x2b
 100fbde:	f1c3 0201 	rsblt	r2, r3, #1
 100fbe2:	232d      	movlt	r3, #45	; 0x2d
 100fbe4:	2a09      	cmp	r2, #9
 100fbe6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 100fbea:	f340 8393 	ble.w	1010314 <_vfprintf_r+0x1acc>
 100fbee:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 100fbf2:	f246 6567 	movw	r5, #26215	; 0x6667
 100fbf6:	f04f 0e0a 	mov.w	lr, #10
 100fbfa:	f2c6 6566 	movt	r5, #26214	; 0x6666
 100fbfe:	4664      	mov	r4, ip
 100fc00:	e000      	b.n	100fc04 <_vfprintf_r+0x13bc>
 100fc02:	460c      	mov	r4, r1
 100fc04:	fb85 3002 	smull	r3, r0, r5, r2
 100fc08:	17d3      	asrs	r3, r2, #31
 100fc0a:	2a63      	cmp	r2, #99	; 0x63
 100fc0c:	f104 31ff 	add.w	r1, r4, #4294967295
 100fc10:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 100fc14:	fb0e 2013 	mls	r0, lr, r3, r2
 100fc18:	461a      	mov	r2, r3
 100fc1a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 100fc1e:	f804 0c01 	strb.w	r0, [r4, #-1]
 100fc22:	dcee      	bgt.n	100fc02 <_vfprintf_r+0x13ba>
 100fc24:	1ea2      	subs	r2, r4, #2
 100fc26:	3330      	adds	r3, #48	; 0x30
 100fc28:	4594      	cmp	ip, r2
 100fc2a:	b2db      	uxtb	r3, r3
 100fc2c:	f801 3c01 	strb.w	r3, [r1, #-1]
 100fc30:	f240 83c2 	bls.w	10103b8 <_vfprintf_r+0x1b70>
 100fc34:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 100fc38:	e004      	b.n	100fc44 <_vfprintf_r+0x13fc>
 100fc3a:	bf00      	nop
 100fc3c:	01055c2c 	.word	0x01055c2c
 100fc40:	f811 3b01 	ldrb.w	r3, [r1], #1
 100fc44:	4561      	cmp	r1, ip
 100fc46:	f802 3b01 	strb.w	r3, [r2], #1
 100fc4a:	d1f9      	bne.n	100fc40 <_vfprintf_r+0x13f8>
 100fc4c:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 100fc50:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 100fc54:	1b1b      	subs	r3, r3, r4
 100fc56:	aa22      	add	r2, sp, #136	; 0x88
 100fc58:	440b      	add	r3, r1
 100fc5a:	1a9b      	subs	r3, r3, r2
 100fc5c:	9318      	str	r3, [sp, #96]	; 0x60
 100fc5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100fc60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 100fc62:	2b01      	cmp	r3, #1
 100fc64:	441a      	add	r2, r3
 100fc66:	9208      	str	r2, [sp, #32]
 100fc68:	f340 8376 	ble.w	1010358 <_vfprintf_r+0x1b10>
 100fc6c:	9b08      	ldr	r3, [sp, #32]
 100fc6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 100fc70:	4413      	add	r3, r2
 100fc72:	9308      	str	r3, [sp, #32]
 100fc74:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100fc78:	2200      	movs	r2, #0
 100fc7a:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 100fc7e:	9b08      	ldr	r3, [sp, #32]
 100fc80:	9213      	str	r2, [sp, #76]	; 0x4c
 100fc82:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100fc86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100fc8a:	9303      	str	r3, [sp, #12]
 100fc8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100fc8e:	2b00      	cmp	r3, #0
 100fc90:	f040 81e9 	bne.w	1010066 <_vfprintf_r+0x181e>
 100fc94:	9304      	str	r3, [sp, #16]
 100fc96:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100fc9a:	f7fe bf6e 	b.w	100eb7a <_vfprintf_r+0x332>
 100fc9e:	4634      	mov	r4, r6
 100fca0:	9e04      	ldr	r6, [sp, #16]
 100fca2:	460b      	mov	r3, r1
 100fca4:	3301      	adds	r3, #1
 100fca6:	49af      	ldr	r1, [pc, #700]	; (100ff64 <_vfprintf_r+0x171c>)
 100fca8:	2b07      	cmp	r3, #7
 100fcaa:	4422      	add	r2, r4
 100fcac:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100fcb0:	e9c9 1400 	strd	r1, r4, [r9]
 100fcb4:	bfd8      	it	le
 100fcb6:	f109 0908 	addle.w	r9, r9, #8
 100fcba:	f77f ac7c 	ble.w	100f5b6 <_vfprintf_r+0xd6e>
 100fcbe:	aa28      	add	r2, sp, #160	; 0xa0
 100fcc0:	9905      	ldr	r1, [sp, #20]
 100fcc2:	4650      	mov	r0, sl
 100fcc4:	f004 faf2 	bl	10142ac <__sprint_r>
 100fcc8:	2800      	cmp	r0, #0
 100fcca:	f47f ab59 	bne.w	100f380 <_vfprintf_r+0xb38>
 100fcce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100fcd0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100fcd4:	e46f      	b.n	100f5b6 <_vfprintf_r+0xd6e>
 100fcd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 100fcd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100fcda:	2b00      	cmp	r3, #0
 100fcdc:	bfd8      	it	le
 100fcde:	2900      	cmple	r1, #0
 100fce0:	f340 8370 	ble.w	10103c4 <_vfprintf_r+0x1b7c>
 100fce4:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 100fce8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 100fcec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100fcee:	9812      	ldr	r0, [sp, #72]	; 0x48
 100fcf0:	960c      	str	r6, [sp, #48]	; 0x30
 100fcf2:	461e      	mov	r6, r3
 100fcf4:	4401      	add	r1, r0
 100fcf6:	9108      	str	r1, [sp, #32]
 100fcf8:	2e00      	cmp	r6, #0
 100fcfa:	f000 8127 	beq.w	100ff4c <_vfprintf_r+0x1704>
 100fcfe:	3e01      	subs	r6, #1
 100fd00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100fd02:	9919      	ldr	r1, [sp, #100]	; 0x64
 100fd04:	3301      	adds	r3, #1
 100fd06:	981a      	ldr	r0, [sp, #104]	; 0x68
 100fd08:	2b07      	cmp	r3, #7
 100fd0a:	440a      	add	r2, r1
 100fd0c:	f8c9 1004 	str.w	r1, [r9, #4]
 100fd10:	f8c9 0000 	str.w	r0, [r9]
 100fd14:	bfd8      	it	le
 100fd16:	f109 0908 	addle.w	r9, r9, #8
 100fd1a:	922a      	str	r2, [sp, #168]	; 0xa8
 100fd1c:	9329      	str	r3, [sp, #164]	; 0xa4
 100fd1e:	f300 814f 	bgt.w	100ffc0 <_vfprintf_r+0x1778>
 100fd22:	9814      	ldr	r0, [sp, #80]	; 0x50
 100fd24:	9908      	ldr	r1, [sp, #32]
 100fd26:	7803      	ldrb	r3, [r0, #0]
 100fd28:	1b4c      	subs	r4, r1, r5
 100fd2a:	9104      	str	r1, [sp, #16]
 100fd2c:	429c      	cmp	r4, r3
 100fd2e:	bfa8      	it	ge
 100fd30:	461c      	movge	r4, r3
 100fd32:	2c00      	cmp	r4, #0
 100fd34:	dd0e      	ble.n	100fd54 <_vfprintf_r+0x150c>
 100fd36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100fd38:	4422      	add	r2, r4
 100fd3a:	f8c9 5000 	str.w	r5, [r9]
 100fd3e:	3301      	adds	r3, #1
 100fd40:	922a      	str	r2, [sp, #168]	; 0xa8
 100fd42:	2b07      	cmp	r3, #7
 100fd44:	f8c9 4004 	str.w	r4, [r9, #4]
 100fd48:	9329      	str	r3, [sp, #164]	; 0xa4
 100fd4a:	f300 8145 	bgt.w	100ffd8 <_vfprintf_r+0x1790>
 100fd4e:	7803      	ldrb	r3, [r0, #0]
 100fd50:	f109 0908 	add.w	r9, r9, #8
 100fd54:	2c00      	cmp	r4, #0
 100fd56:	bfac      	ite	ge
 100fd58:	1b1c      	subge	r4, r3, r4
 100fd5a:	461c      	movlt	r4, r3
 100fd5c:	2c00      	cmp	r4, #0
 100fd5e:	f300 80fc 	bgt.w	100ff5a <_vfprintf_r+0x1712>
 100fd62:	441d      	add	r5, r3
 100fd64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100fd66:	2e00      	cmp	r6, #0
 100fd68:	bfd8      	it	le
 100fd6a:	2b00      	cmple	r3, #0
 100fd6c:	dcc4      	bgt.n	100fcf8 <_vfprintf_r+0x14b0>
 100fd6e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 100fd72:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 100fd76:	9904      	ldr	r1, [sp, #16]
 100fd78:	462b      	mov	r3, r5
 100fd7a:	428d      	cmp	r5, r1
 100fd7c:	bf28      	it	cs
 100fd7e:	460b      	movcs	r3, r1
 100fd80:	461d      	mov	r5, r3
 100fd82:	e41f      	b.n	100f5c4 <_vfprintf_r+0xd7c>
 100fd84:	2300      	movs	r3, #0
 100fd86:	aa26      	add	r2, sp, #152	; 0x98
 100fd88:	4619      	mov	r1, r3
 100fd8a:	9200      	str	r2, [sp, #0]
 100fd8c:	4650      	mov	r0, sl
 100fd8e:	aa21      	add	r2, sp, #132	; 0x84
 100fd90:	f000 fc0a 	bl	10105a8 <_wcsrtombs_r>
 100fd94:	1c43      	adds	r3, r0, #1
 100fd96:	9008      	str	r0, [sp, #32]
 100fd98:	f000 8236 	beq.w	1010208 <_vfprintf_r+0x19c0>
 100fd9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100fd9e:	9321      	str	r3, [sp, #132]	; 0x84
 100fda0:	9b08      	ldr	r3, [sp, #32]
 100fda2:	2b00      	cmp	r3, #0
 100fda4:	d034      	beq.n	100fe10 <_vfprintf_r+0x15c8>
 100fda6:	2b63      	cmp	r3, #99	; 0x63
 100fda8:	f340 8229 	ble.w	10101fe <_vfprintf_r+0x19b6>
 100fdac:	1c59      	adds	r1, r3, #1
 100fdae:	4650      	mov	r0, sl
 100fdb0:	f7fb f992 	bl	100b0d8 <_malloc_r>
 100fdb4:	900b      	str	r0, [sp, #44]	; 0x2c
 100fdb6:	2800      	cmp	r0, #0
 100fdb8:	f000 8226 	beq.w	1010208 <_vfprintf_r+0x19c0>
 100fdbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100fdbe:	930a      	str	r3, [sp, #40]	; 0x28
 100fdc0:	2208      	movs	r2, #8
 100fdc2:	2100      	movs	r1, #0
 100fdc4:	a826      	add	r0, sp, #152	; 0x98
 100fdc6:	f7fc f98b 	bl	100c0e0 <memset>
 100fdca:	9c08      	ldr	r4, [sp, #32]
 100fdcc:	ab26      	add	r3, sp, #152	; 0x98
 100fdce:	aa21      	add	r2, sp, #132	; 0x84
 100fdd0:	9300      	str	r3, [sp, #0]
 100fdd2:	4650      	mov	r0, sl
 100fdd4:	4623      	mov	r3, r4
 100fdd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100fdd8:	f000 fbe6 	bl	10105a8 <_wcsrtombs_r>
 100fddc:	4284      	cmp	r4, r0
 100fdde:	f040 82e4 	bne.w	10103aa <_vfprintf_r+0x1b62>
 100fde2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100fde4:	2300      	movs	r3, #0
 100fde6:	9509      	str	r5, [sp, #36]	; 0x24
 100fde8:	9304      	str	r3, [sp, #16]
 100fdea:	4614      	mov	r4, r2
 100fdec:	9a08      	ldr	r2, [sp, #32]
 100fdee:	9313      	str	r3, [sp, #76]	; 0x4c
 100fdf0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100fdf4:	54a3      	strb	r3, [r4, r2]
 100fdf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100fdfa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100fdfe:	9303      	str	r3, [sp, #12]
 100fe00:	f7fe bebb 	b.w	100eb7a <_vfprintf_r+0x332>
 100fe04:	3001      	adds	r0, #1
 100fe06:	f101 0908 	add.w	r9, r1, #8
 100fe0a:	460b      	mov	r3, r1
 100fe0c:	f7ff bb41 	b.w	100f492 <_vfprintf_r+0xc4a>
 100fe10:	9b08      	ldr	r3, [sp, #32]
 100fe12:	9509      	str	r5, [sp, #36]	; 0x24
 100fe14:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100fe18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 100fe1c:	9313      	str	r3, [sp, #76]	; 0x4c
 100fe1e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100fe22:	930a      	str	r3, [sp, #40]	; 0x28
 100fe24:	f7fe bea9 	b.w	100eb7a <_vfprintf_r+0x332>
 100fe28:	aa28      	add	r2, sp, #160	; 0xa0
 100fe2a:	9905      	ldr	r1, [sp, #20]
 100fe2c:	4650      	mov	r0, sl
 100fe2e:	f004 fa3d 	bl	10142ac <__sprint_r>
 100fe32:	2800      	cmp	r0, #0
 100fe34:	f47f aaa4 	bne.w	100f380 <_vfprintf_r+0xb38>
 100fe38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100fe3a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100fe3e:	f7ff bbb2 	b.w	100f5a6 <_vfprintf_r+0xd5e>
 100fe42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100fe44:	4619      	mov	r1, r3
 100fe46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100fe48:	4419      	add	r1, r3
 100fe4a:	1b1b      	subs	r3, r3, r4
 100fe4c:	1b4c      	subs	r4, r1, r5
 100fe4e:	429c      	cmp	r4, r3
 100fe50:	bfa8      	it	ge
 100fe52:	461c      	movge	r4, r3
 100fe54:	f7ff bbe8 	b.w	100f628 <_vfprintf_r+0xde0>
 100fe58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fe5a:	9309      	str	r3, [sp, #36]	; 0x24
 100fe5c:	9b06      	ldr	r3, [sp, #24]
 100fe5e:	6812      	ldr	r2, [r2, #0]
 100fe60:	8013      	strh	r3, [r2, #0]
 100fe62:	f7fe bd4d 	b.w	100e900 <_vfprintf_r+0xb8>
 100fe66:	681c      	ldr	r4, [r3, #0]
 100fe68:	9209      	str	r2, [sp, #36]	; 0x24
 100fe6a:	9603      	str	r6, [sp, #12]
 100fe6c:	17e5      	asrs	r5, r4, #31
 100fe6e:	4622      	mov	r2, r4
 100fe70:	462b      	mov	r3, r5
 100fe72:	f7ff b807 	b.w	100ee84 <_vfprintf_r+0x63c>
 100fe76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 100fe78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100fe7a:	9404      	str	r4, [sp, #16]
 100fe7c:	f7fc fd40 	bl	100c900 <strlen>
 100fe80:	9413      	str	r4, [sp, #76]	; 0x4c
 100fe82:	9411      	str	r4, [sp, #68]	; 0x44
 100fe84:	940a      	str	r4, [sp, #40]	; 0x28
 100fe86:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100fe8a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 100fe8e:	e9cd 0508 	strd	r0, r5, [sp, #32]
 100fe92:	9303      	str	r3, [sp, #12]
 100fe94:	f7fe be71 	b.w	100eb7a <_vfprintf_r+0x332>
 100fe98:	4650      	mov	r0, sl
 100fe9a:	aa28      	add	r2, sp, #160	; 0xa0
 100fe9c:	9905      	ldr	r1, [sp, #20]
 100fe9e:	f004 fa05 	bl	10142ac <__sprint_r>
 100fea2:	f7fe bdff 	b.w	100eaa4 <_vfprintf_r+0x25c>
 100fea6:	1c59      	adds	r1, r3, #1
 100fea8:	4650      	mov	r0, sl
 100feaa:	f7fb f915 	bl	100b0d8 <_malloc_r>
 100feae:	900b      	str	r0, [sp, #44]	; 0x2c
 100feb0:	2800      	cmp	r0, #0
 100feb2:	f000 81a9 	beq.w	1010208 <_vfprintf_r+0x19c0>
 100feb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100feb8:	930a      	str	r3, [sp, #40]	; 0x28
 100feba:	e45a      	b.n	100f772 <_vfprintf_r+0xf2a>
 100febc:	2306      	movs	r3, #6
 100febe:	9304      	str	r3, [sp, #16]
 100fec0:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100fec4:	930d      	str	r3, [sp, #52]	; 0x34
 100fec6:	ee18 3a90 	vmov	r3, s17
 100feca:	2b00      	cmp	r3, #0
 100fecc:	f2c0 8234 	blt.w	1010338 <_vfprintf_r+0x1af0>
 100fed0:	eeb0 cb48 	vmov.f64	d12, d8
 100fed4:	2300      	movs	r3, #0
 100fed6:	930c      	str	r3, [sp, #48]	; 0x30
 100fed8:	2c46      	cmp	r4, #70	; 0x46
 100feda:	f040 8178 	bne.w	10101ce <_vfprintf_r+0x1986>
 100fede:	ab26      	add	r3, sp, #152	; 0x98
 100fee0:	aa21      	add	r2, sp, #132	; 0x84
 100fee2:	9301      	str	r3, [sp, #4]
 100fee4:	2103      	movs	r1, #3
 100fee6:	ab1f      	add	r3, sp, #124	; 0x7c
 100fee8:	9200      	str	r2, [sp, #0]
 100feea:	eeb0 0b4c 	vmov.f64	d0, d12
 100feee:	9a04      	ldr	r2, [sp, #16]
 100fef0:	4650      	mov	r0, sl
 100fef2:	f000 fe0d 	bl	1010b10 <_dtoa_r>
 100fef6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 100fef8:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100fefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ff00:	7802      	ldrb	r2, [r0, #0]
 100ff02:	4603      	mov	r3, r0
 100ff04:	bf14      	ite	ne
 100ff06:	2301      	movne	r3, #1
 100ff08:	2300      	moveq	r3, #0
 100ff0a:	2a30      	cmp	r2, #48	; 0x30
 100ff0c:	bf14      	ite	ne
 100ff0e:	2300      	movne	r3, #0
 100ff10:	f003 0301 	andeq.w	r3, r3, #1
 100ff14:	900b      	str	r0, [sp, #44]	; 0x2c
 100ff16:	2b00      	cmp	r3, #0
 100ff18:	f040 8242 	bne.w	10103a0 <_vfprintf_r+0x1b58>
 100ff1c:	9b04      	ldr	r3, [sp, #16]
 100ff1e:	441d      	add	r5, r3
 100ff20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100ff22:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100ff26:	441d      	add	r5, r3
 100ff28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ff2c:	bf08      	it	eq
 100ff2e:	462b      	moveq	r3, r5
 100ff30:	f43f ae2e 	beq.w	100fb90 <_vfprintf_r+0x1348>
 100ff34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100ff36:	42ab      	cmp	r3, r5
 100ff38:	f4bf ae2a 	bcs.w	100fb90 <_vfprintf_r+0x1348>
 100ff3c:	2130      	movs	r1, #48	; 0x30
 100ff3e:	1c5a      	adds	r2, r3, #1
 100ff40:	9226      	str	r2, [sp, #152]	; 0x98
 100ff42:	7019      	strb	r1, [r3, #0]
 100ff44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100ff46:	429d      	cmp	r5, r3
 100ff48:	d8f9      	bhi.n	100ff3e <_vfprintf_r+0x16f6>
 100ff4a:	e621      	b.n	100fb90 <_vfprintf_r+0x1348>
 100ff4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100ff4e:	3b01      	subs	r3, #1
 100ff50:	9314      	str	r3, [sp, #80]	; 0x50
 100ff52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100ff54:	3b01      	subs	r3, #1
 100ff56:	9311      	str	r3, [sp, #68]	; 0x44
 100ff58:	e6d2      	b.n	100fd00 <_vfprintf_r+0x14b8>
 100ff5a:	2c10      	cmp	r4, #16
 100ff5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100ff5e:	dd21      	ble.n	100ffa4 <_vfprintf_r+0x175c>
 100ff60:	2710      	movs	r7, #16
 100ff62:	e004      	b.n	100ff6e <_vfprintf_r+0x1726>
 100ff64:	01055c2c 	.word	0x01055c2c
 100ff68:	3c10      	subs	r4, #16
 100ff6a:	2c10      	cmp	r4, #16
 100ff6c:	dd1a      	ble.n	100ffa4 <_vfprintf_r+0x175c>
 100ff6e:	3101      	adds	r1, #1
 100ff70:	4bb7      	ldr	r3, [pc, #732]	; (1010250 <_vfprintf_r+0x1a08>)
 100ff72:	2907      	cmp	r1, #7
 100ff74:	f102 0210 	add.w	r2, r2, #16
 100ff78:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ff7c:	e9c9 3700 	strd	r3, r7, [r9]
 100ff80:	f109 0908 	add.w	r9, r9, #8
 100ff84:	ddf0      	ble.n	100ff68 <_vfprintf_r+0x1720>
 100ff86:	aa28      	add	r2, sp, #160	; 0xa0
 100ff88:	4641      	mov	r1, r8
 100ff8a:	4650      	mov	r0, sl
 100ff8c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ff90:	f004 f98c 	bl	10142ac <__sprint_r>
 100ff94:	2800      	cmp	r0, #0
 100ff96:	f47f a9f3 	bne.w	100f380 <_vfprintf_r+0xb38>
 100ff9a:	3c10      	subs	r4, #16
 100ff9c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100ffa0:	2c10      	cmp	r4, #16
 100ffa2:	dce4      	bgt.n	100ff6e <_vfprintf_r+0x1726>
 100ffa4:	3101      	adds	r1, #1
 100ffa6:	4baa      	ldr	r3, [pc, #680]	; (1010250 <_vfprintf_r+0x1a08>)
 100ffa8:	2907      	cmp	r1, #7
 100ffaa:	4422      	add	r2, r4
 100ffac:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ffb0:	e9c9 3400 	strd	r3, r4, [r9]
 100ffb4:	dc7b      	bgt.n	10100ae <_vfprintf_r+0x1866>
 100ffb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100ffb8:	f109 0908 	add.w	r9, r9, #8
 100ffbc:	781b      	ldrb	r3, [r3, #0]
 100ffbe:	e6d0      	b.n	100fd62 <_vfprintf_r+0x151a>
 100ffc0:	aa28      	add	r2, sp, #160	; 0xa0
 100ffc2:	4641      	mov	r1, r8
 100ffc4:	4650      	mov	r0, sl
 100ffc6:	f004 f971 	bl	10142ac <__sprint_r>
 100ffca:	2800      	cmp	r0, #0
 100ffcc:	f47f a9d8 	bne.w	100f380 <_vfprintf_r+0xb38>
 100ffd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ffd2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ffd6:	e6a4      	b.n	100fd22 <_vfprintf_r+0x14da>
 100ffd8:	aa28      	add	r2, sp, #160	; 0xa0
 100ffda:	4641      	mov	r1, r8
 100ffdc:	4650      	mov	r0, sl
 100ffde:	f004 f965 	bl	10142ac <__sprint_r>
 100ffe2:	2800      	cmp	r0, #0
 100ffe4:	f47f a9cc 	bne.w	100f380 <_vfprintf_r+0xb38>
 100ffe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100ffea:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ffee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100fff0:	781b      	ldrb	r3, [r3, #0]
 100fff2:	e6af      	b.n	100fd54 <_vfprintf_r+0x150c>
 100fff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100fff6:	4619      	mov	r1, r3
 100fff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100fffa:	4299      	cmp	r1, r3
 100fffc:	f300 8097 	bgt.w	101012e <_vfprintf_r+0x18e6>
 1010000:	07f5      	lsls	r5, r6, #31
 1010002:	f140 8121 	bpl.w	1010248 <_vfprintf_r+0x1a00>
 1010006:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1010008:	4413      	add	r3, r2
 101000a:	9308      	str	r3, [sp, #32]
 101000c:	0574      	lsls	r4, r6, #21
 101000e:	d503      	bpl.n	1010018 <_vfprintf_r+0x17d0>
 1010010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010012:	2b00      	cmp	r3, #0
 1010014:	f300 8139 	bgt.w	101028a <_vfprintf_r+0x1a42>
 1010018:	9b08      	ldr	r3, [sp, #32]
 101001a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101001e:	9303      	str	r3, [sp, #12]
 1010020:	2367      	movs	r3, #103	; 0x67
 1010022:	930e      	str	r3, [sp, #56]	; 0x38
 1010024:	2300      	movs	r3, #0
 1010026:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 1010028:	930a      	str	r3, [sp, #40]	; 0x28
 101002a:	9313      	str	r3, [sp, #76]	; 0x4c
 101002c:	9311      	str	r3, [sp, #68]	; 0x44
 101002e:	e62d      	b.n	100fc8c <_vfprintf_r+0x1444>
 1010030:	2c46      	cmp	r4, #70	; 0x46
 1010032:	f040 81cf 	bne.w	10103d4 <_vfprintf_r+0x1b8c>
 1010036:	9910      	ldr	r1, [sp, #64]	; 0x40
 1010038:	f006 0301 	and.w	r3, r6, #1
 101003c:	9a04      	ldr	r2, [sp, #16]
 101003e:	2900      	cmp	r1, #0
 1010040:	ea43 0302 	orr.w	r3, r3, r2
 1010044:	f340 818c 	ble.w	1010360 <_vfprintf_r+0x1b18>
 1010048:	2b00      	cmp	r3, #0
 101004a:	f040 8149 	bne.w	10102e0 <_vfprintf_r+0x1a98>
 101004e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010050:	9308      	str	r3, [sp, #32]
 1010052:	2366      	movs	r3, #102	; 0x66
 1010054:	930e      	str	r3, [sp, #56]	; 0x38
 1010056:	0572      	lsls	r2, r6, #21
 1010058:	f100 8119 	bmi.w	101028e <_vfprintf_r+0x1a46>
 101005c:	9b08      	ldr	r3, [sp, #32]
 101005e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010062:	9303      	str	r3, [sp, #12]
 1010064:	e7de      	b.n	1010024 <_vfprintf_r+0x17dc>
 1010066:	212d      	movs	r1, #45	; 0x2d
 1010068:	2300      	movs	r3, #0
 101006a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 101006e:	9304      	str	r3, [sp, #16]
 1010070:	f7fe bd84 	b.w	100eb7c <_vfprintf_r+0x334>
 1010074:	aa28      	add	r2, sp, #160	; 0xa0
 1010076:	9905      	ldr	r1, [sp, #20]
 1010078:	4650      	mov	r0, sl
 101007a:	f004 f917 	bl	10142ac <__sprint_r>
 101007e:	2800      	cmp	r0, #0
 1010080:	f47f a97e 	bne.w	100f380 <_vfprintf_r+0xb38>
 1010084:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010086:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101008a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 101008c:	f7ff b994 	b.w	100f3b8 <_vfprintf_r+0xb70>
 1010090:	aa28      	add	r2, sp, #160	; 0xa0
 1010092:	9905      	ldr	r1, [sp, #20]
 1010094:	4650      	mov	r0, sl
 1010096:	f004 f909 	bl	10142ac <__sprint_r>
 101009a:	2800      	cmp	r0, #0
 101009c:	f47f a970 	bne.w	100f380 <_vfprintf_r+0xb38>
 10100a0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 10100a2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10100a6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 10100aa:	f7ff b99a 	b.w	100f3e2 <_vfprintf_r+0xb9a>
 10100ae:	aa28      	add	r2, sp, #160	; 0xa0
 10100b0:	4641      	mov	r1, r8
 10100b2:	4650      	mov	r0, sl
 10100b4:	f004 f8fa 	bl	10142ac <__sprint_r>
 10100b8:	2800      	cmp	r0, #0
 10100ba:	f47f a961 	bne.w	100f380 <_vfprintf_r+0xb38>
 10100be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 10100c0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10100c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10100c6:	781b      	ldrb	r3, [r3, #0]
 10100c8:	e64b      	b.n	100fd62 <_vfprintf_r+0x151a>
 10100ca:	07f0      	lsls	r0, r6, #31
 10100cc:	f57e adad 	bpl.w	100ec2a <_vfprintf_r+0x3e2>
 10100d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10100d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 10100d4:	3301      	adds	r3, #1
 10100d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 10100d8:	2b07      	cmp	r3, #7
 10100da:	440a      	add	r2, r1
 10100dc:	f8c9 1004 	str.w	r1, [r9, #4]
 10100e0:	f8c9 0000 	str.w	r0, [r9]
 10100e4:	922a      	str	r2, [sp, #168]	; 0xa8
 10100e6:	9329      	str	r3, [sp, #164]	; 0xa4
 10100e8:	dcd2      	bgt.n	1010090 <_vfprintf_r+0x1848>
 10100ea:	f109 0908 	add.w	r9, r9, #8
 10100ee:	f7ff b97b 	b.w	100f3e8 <_vfprintf_r+0xba0>
 10100f2:	aa28      	add	r2, sp, #160	; 0xa0
 10100f4:	9905      	ldr	r1, [sp, #20]
 10100f6:	4650      	mov	r0, sl
 10100f8:	f004 f8d8 	bl	10142ac <__sprint_r>
 10100fc:	2800      	cmp	r0, #0
 10100fe:	f47f a93f 	bne.w	100f380 <_vfprintf_r+0xb38>
 1010102:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 1010104:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010108:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101010a:	f7ff ba73 	b.w	100f5f4 <_vfprintf_r+0xdac>
 101010e:	aa28      	add	r2, sp, #160	; 0xa0
 1010110:	9905      	ldr	r1, [sp, #20]
 1010112:	4650      	mov	r0, sl
 1010114:	f004 f8ca 	bl	10142ac <__sprint_r>
 1010118:	2800      	cmp	r0, #0
 101011a:	f47f a931 	bne.w	100f380 <_vfprintf_r+0xb38>
 101011e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1010120:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010124:	9912      	ldr	r1, [sp, #72]	; 0x48
 1010126:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010128:	1acb      	subs	r3, r1, r3
 101012a:	f7ff ba7d 	b.w	100f628 <_vfprintf_r+0xde0>
 101012e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1010130:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1010132:	189a      	adds	r2, r3, r2
 1010134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010136:	9208      	str	r2, [sp, #32]
 1010138:	2b00      	cmp	r3, #0
 101013a:	bfc4      	itt	gt
 101013c:	2367      	movgt	r3, #103	; 0x67
 101013e:	930e      	strgt	r3, [sp, #56]	; 0x38
 1010140:	dc89      	bgt.n	1010056 <_vfprintf_r+0x180e>
 1010142:	f1c3 0301 	rsb	r3, r3, #1
 1010146:	2167      	movs	r1, #103	; 0x67
 1010148:	441a      	add	r2, r3
 101014a:	910e      	str	r1, [sp, #56]	; 0x38
 101014c:	9208      	str	r2, [sp, #32]
 101014e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1010152:	9303      	str	r3, [sp, #12]
 1010154:	e766      	b.n	1010024 <_vfprintf_r+0x17dc>
 1010156:	9a19      	ldr	r2, [sp, #100]	; 0x64
 1010158:	991a      	ldr	r1, [sp, #104]	; 0x68
 101015a:	ebaa 0a02 	sub.w	sl, sl, r2
 101015e:	4650      	mov	r0, sl
 1010160:	f7fc fcbc 	bl	100cadc <strncpy>
 1010164:	f898 3001 	ldrb.w	r3, [r8, #1]
 1010168:	b10b      	cbz	r3, 101016e <_vfprintf_r+0x1926>
 101016a:	f108 0801 	add.w	r8, r8, #1
 101016e:	4620      	mov	r0, r4
 1010170:	4629      	mov	r1, r5
 1010172:	220a      	movs	r2, #10
 1010174:	2300      	movs	r3, #0
 1010176:	f7fa f8f7 	bl	100a368 <__aeabi_uldivmod>
 101017a:	f04f 0900 	mov.w	r9, #0
 101017e:	e482      	b.n	100fa86 <_vfprintf_r+0x123e>
 1010180:	424c      	negs	r4, r1
 1010182:	3110      	adds	r1, #16
 1010184:	da48      	bge.n	1010218 <_vfprintf_r+0x19d0>
 1010186:	2510      	movs	r5, #16
 1010188:	e002      	b.n	1010190 <_vfprintf_r+0x1948>
 101018a:	3c10      	subs	r4, #16
 101018c:	2c10      	cmp	r4, #16
 101018e:	dd43      	ble.n	1010218 <_vfprintf_r+0x19d0>
 1010190:	3301      	adds	r3, #1
 1010192:	492f      	ldr	r1, [pc, #188]	; (1010250 <_vfprintf_r+0x1a08>)
 1010194:	2b07      	cmp	r3, #7
 1010196:	f102 0210 	add.w	r2, r2, #16
 101019a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101019e:	e9c9 1500 	strd	r1, r5, [r9]
 10101a2:	f109 0908 	add.w	r9, r9, #8
 10101a6:	ddf0      	ble.n	101018a <_vfprintf_r+0x1942>
 10101a8:	aa28      	add	r2, sp, #160	; 0xa0
 10101aa:	9905      	ldr	r1, [sp, #20]
 10101ac:	4650      	mov	r0, sl
 10101ae:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10101b2:	f004 f87b 	bl	10142ac <__sprint_r>
 10101b6:	2800      	cmp	r0, #0
 10101b8:	f47f a8e2 	bne.w	100f380 <_vfprintf_r+0xb38>
 10101bc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 10101c0:	e7e3      	b.n	101018a <_vfprintf_r+0x1942>
 10101c2:	2300      	movs	r3, #0
 10101c4:	eeb0 0b48 	vmov.f64	d0, d8
 10101c8:	930c      	str	r3, [sp, #48]	; 0x30
 10101ca:	f7ff badb 	b.w	100f784 <_vfprintf_r+0xf3c>
 10101ce:	2c45      	cmp	r4, #69	; 0x45
 10101d0:	f040 80fd 	bne.w	10103ce <_vfprintf_r+0x1b86>
 10101d4:	9b04      	ldr	r3, [sp, #16]
 10101d6:	aa26      	add	r2, sp, #152	; 0x98
 10101d8:	2102      	movs	r1, #2
 10101da:	9201      	str	r2, [sp, #4]
 10101dc:	1c5d      	adds	r5, r3, #1
 10101de:	eeb0 0b4c 	vmov.f64	d0, d12
 10101e2:	ab21      	add	r3, sp, #132	; 0x84
 10101e4:	4650      	mov	r0, sl
 10101e6:	9300      	str	r3, [sp, #0]
 10101e8:	462a      	mov	r2, r5
 10101ea:	ab1f      	add	r3, sp, #124	; 0x7c
 10101ec:	f000 fc90 	bl	1010b10 <_dtoa_r>
 10101f0:	900b      	str	r0, [sp, #44]	; 0x2c
 10101f2:	e695      	b.n	100ff20 <_vfprintf_r+0x16d8>
 10101f4:	f04f 33ff 	mov.w	r3, #4294967295
 10101f8:	9306      	str	r3, [sp, #24]
 10101fa:	f7fe bc59 	b.w	100eab0 <_vfprintf_r+0x268>
 10101fe:	2300      	movs	r3, #0
 1010200:	930a      	str	r3, [sp, #40]	; 0x28
 1010202:	ab3b      	add	r3, sp, #236	; 0xec
 1010204:	930b      	str	r3, [sp, #44]	; 0x2c
 1010206:	e5db      	b.n	100fdc0 <_vfprintf_r+0x1578>
 1010208:	9a05      	ldr	r2, [sp, #20]
 101020a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 101020e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1010212:	8193      	strh	r3, [r2, #12]
 1010214:	f7fe bc49 	b.w	100eaaa <_vfprintf_r+0x262>
 1010218:	3301      	adds	r3, #1
 101021a:	490d      	ldr	r1, [pc, #52]	; (1010250 <_vfprintf_r+0x1a08>)
 101021c:	2b07      	cmp	r3, #7
 101021e:	4422      	add	r2, r4
 1010220:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1010224:	e9c9 1400 	strd	r1, r4, [r9]
 1010228:	f77f af5f 	ble.w	10100ea <_vfprintf_r+0x18a2>
 101022c:	aa28      	add	r2, sp, #160	; 0xa0
 101022e:	9905      	ldr	r1, [sp, #20]
 1010230:	4650      	mov	r0, sl
 1010232:	f004 f83b 	bl	10142ac <__sprint_r>
 1010236:	2800      	cmp	r0, #0
 1010238:	f47f a8a2 	bne.w	100f380 <_vfprintf_r+0xb38>
 101023c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101023e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010242:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1010244:	f7ff b8d0 	b.w	100f3e8 <_vfprintf_r+0xba0>
 1010248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101024a:	9308      	str	r3, [sp, #32]
 101024c:	e6de      	b.n	101000c <_vfprintf_r+0x17c4>
 101024e:	bf00      	nop
 1010250:	01055c2c 	.word	0x01055c2c
 1010254:	9526      	str	r5, [sp, #152]	; 0x98
 1010256:	4619      	mov	r1, r3
 1010258:	7bc5      	ldrb	r5, [r0, #15]
 101025a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 101025e:	4295      	cmp	r5, r2
 1010260:	d10a      	bne.n	1010278 <_vfprintf_r+0x1a30>
 1010262:	f04f 0c30 	mov.w	ip, #48	; 0x30
 1010266:	f801 cc01 	strb.w	ip, [r1, #-1]
 101026a:	9926      	ldr	r1, [sp, #152]	; 0x98
 101026c:	1e4a      	subs	r2, r1, #1
 101026e:	9226      	str	r2, [sp, #152]	; 0x98
 1010270:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 1010274:	4295      	cmp	r5, r2
 1010276:	d0f6      	beq.n	1010266 <_vfprintf_r+0x1a1e>
 1010278:	2a39      	cmp	r2, #57	; 0x39
 101027a:	bf16      	itet	ne
 101027c:	3201      	addne	r2, #1
 101027e:	7a82      	ldrbeq	r2, [r0, #10]
 1010280:	b2d2      	uxtbne	r2, r2
 1010282:	f801 2c01 	strb.w	r2, [r1, #-1]
 1010286:	f7ff bace 	b.w	100f826 <_vfprintf_r+0xfde>
 101028a:	2367      	movs	r3, #103	; 0x67
 101028c:	930e      	str	r3, [sp, #56]	; 0x38
 101028e:	9814      	ldr	r0, [sp, #80]	; 0x50
 1010290:	2200      	movs	r2, #0
 1010292:	9213      	str	r2, [sp, #76]	; 0x4c
 1010294:	9211      	str	r2, [sp, #68]	; 0x44
 1010296:	7803      	ldrb	r3, [r0, #0]
 1010298:	9a10      	ldr	r2, [sp, #64]	; 0x40
 101029a:	2bff      	cmp	r3, #255	; 0xff
 101029c:	d00b      	beq.n	10102b6 <_vfprintf_r+0x1a6e>
 101029e:	4293      	cmp	r3, r2
 10102a0:	da09      	bge.n	10102b6 <_vfprintf_r+0x1a6e>
 10102a2:	7841      	ldrb	r1, [r0, #1]
 10102a4:	1ad2      	subs	r2, r2, r3
 10102a6:	b1b9      	cbz	r1, 10102d8 <_vfprintf_r+0x1a90>
 10102a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10102aa:	3001      	adds	r0, #1
 10102ac:	3301      	adds	r3, #1
 10102ae:	9311      	str	r3, [sp, #68]	; 0x44
 10102b0:	460b      	mov	r3, r1
 10102b2:	2bff      	cmp	r3, #255	; 0xff
 10102b4:	d1f3      	bne.n	101029e <_vfprintf_r+0x1a56>
 10102b6:	9210      	str	r2, [sp, #64]	; 0x40
 10102b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10102ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 10102bc:	9908      	ldr	r1, [sp, #32]
 10102be:	4413      	add	r3, r2
 10102c0:	2200      	movs	r2, #0
 10102c2:	920a      	str	r2, [sp, #40]	; 0x28
 10102c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 10102c6:	9014      	str	r0, [sp, #80]	; 0x50
 10102c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 10102ca:	fb02 1303 	mla	r3, r2, r3, r1
 10102ce:	9308      	str	r3, [sp, #32]
 10102d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10102d4:	9303      	str	r3, [sp, #12]
 10102d6:	e4d9      	b.n	100fc8c <_vfprintf_r+0x1444>
 10102d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 10102da:	3101      	adds	r1, #1
 10102dc:	9113      	str	r1, [sp, #76]	; 0x4c
 10102de:	e7dc      	b.n	101029a <_vfprintf_r+0x1a52>
 10102e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 10102e2:	18cb      	adds	r3, r1, r3
 10102e4:	2166      	movs	r1, #102	; 0x66
 10102e6:	441a      	add	r2, r3
 10102e8:	910e      	str	r1, [sp, #56]	; 0x38
 10102ea:	9208      	str	r2, [sp, #32]
 10102ec:	e6b3      	b.n	1010056 <_vfprintf_r+0x180e>
 10102ee:	ee18 3a90 	vmov	r3, s17
 10102f2:	f248 24b8 	movw	r4, #33464	; 0x82b8
 10102f6:	f2c0 1405 	movt	r4, #261	; 0x105
 10102fa:	2b00      	cmp	r3, #0
 10102fc:	f248 23b4 	movw	r3, #33460	; 0x82b4
 1010300:	f2c0 1305 	movt	r3, #261	; 0x105
 1010304:	bfb6      	itet	lt
 1010306:	212d      	movlt	r1, #45	; 0x2d
 1010308:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 101030c:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 1010310:	f7fe bd98 	b.w	100ee44 <_vfprintf_r+0x5fc>
 1010314:	2c41      	cmp	r4, #65	; 0x41
 1010316:	a922      	add	r1, sp, #136	; 0x88
 1010318:	bf08      	it	eq
 101031a:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 101031e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1010322:	bf1e      	ittt	ne
 1010324:	2330      	movne	r3, #48	; 0x30
 1010326:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 101032a:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 101032e:	f803 2b01 	strb.w	r2, [r3], #1
 1010332:	1a5b      	subs	r3, r3, r1
 1010334:	9318      	str	r3, [sp, #96]	; 0x60
 1010336:	e492      	b.n	100fc5e <_vfprintf_r+0x1416>
 1010338:	232d      	movs	r3, #45	; 0x2d
 101033a:	eeb1 cb48 	vneg.f64	d12, d8
 101033e:	930c      	str	r3, [sp, #48]	; 0x30
 1010340:	e5ca      	b.n	100fed8 <_vfprintf_r+0x1690>
 1010342:	9b04      	ldr	r3, [sp, #16]
 1010344:	9509      	str	r5, [sp, #36]	; 0x24
 1010346:	9004      	str	r0, [sp, #16]
 1010348:	9303      	str	r3, [sp, #12]
 101034a:	9308      	str	r3, [sp, #32]
 101034c:	9013      	str	r0, [sp, #76]	; 0x4c
 101034e:	9011      	str	r0, [sp, #68]	; 0x44
 1010350:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1010354:	f7fe bc11 	b.w	100eb7a <_vfprintf_r+0x332>
 1010358:	07f3      	lsls	r3, r6, #31
 101035a:	f57f ac8b 	bpl.w	100fc74 <_vfprintf_r+0x142c>
 101035e:	e485      	b.n	100fc6c <_vfprintf_r+0x1424>
 1010360:	b92b      	cbnz	r3, 101036e <_vfprintf_r+0x1b26>
 1010362:	2301      	movs	r3, #1
 1010364:	2266      	movs	r2, #102	; 0x66
 1010366:	9303      	str	r3, [sp, #12]
 1010368:	920e      	str	r2, [sp, #56]	; 0x38
 101036a:	9308      	str	r3, [sp, #32]
 101036c:	e65a      	b.n	1010024 <_vfprintf_r+0x17dc>
 101036e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 1010370:	2266      	movs	r2, #102	; 0x66
 1010372:	920e      	str	r2, [sp, #56]	; 0x38
 1010374:	9a04      	ldr	r2, [sp, #16]
 1010376:	3301      	adds	r3, #1
 1010378:	441a      	add	r2, r3
 101037a:	9208      	str	r2, [sp, #32]
 101037c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1010380:	9303      	str	r3, [sp, #12]
 1010382:	e64f      	b.n	1010024 <_vfprintf_r+0x17dc>
 1010384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1010386:	787b      	ldrb	r3, [r7, #1]
 1010388:	460f      	mov	r7, r1
 101038a:	f852 0b04 	ldr.w	r0, [r2], #4
 101038e:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1010392:	9209      	str	r2, [sp, #36]	; 0x24
 1010394:	9104      	str	r1, [sp, #16]
 1010396:	f7fe bae0 	b.w	100e95a <_vfprintf_r+0x112>
 101039a:	4649      	mov	r1, r9
 101039c:	f7ff ba8c 	b.w	100f8b8 <_vfprintf_r+0x1070>
 10103a0:	9b04      	ldr	r3, [sp, #16]
 10103a2:	f1c3 0501 	rsb	r5, r3, #1
 10103a6:	951f      	str	r5, [sp, #124]	; 0x7c
 10103a8:	e5b8      	b.n	100ff1c <_vfprintf_r+0x16d4>
 10103aa:	9a05      	ldr	r2, [sp, #20]
 10103ac:	8993      	ldrh	r3, [r2, #12]
 10103ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10103b2:	8193      	strh	r3, [r2, #12]
 10103b4:	f7fe bfe4 	b.w	100f380 <_vfprintf_r+0xb38>
 10103b8:	2302      	movs	r3, #2
 10103ba:	9318      	str	r3, [sp, #96]	; 0x60
 10103bc:	e44f      	b.n	100fc5e <_vfprintf_r+0x1416>
 10103be:	9603      	str	r6, [sp, #12]
 10103c0:	f7fe bdb4 	b.w	100ef2c <_vfprintf_r+0x6e4>
 10103c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10103c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 10103c8:	440b      	add	r3, r1
 10103ca:	9304      	str	r3, [sp, #16]
 10103cc:	e4d3      	b.n	100fd76 <_vfprintf_r+0x152e>
 10103ce:	9d04      	ldr	r5, [sp, #16]
 10103d0:	f7ff bbca 	b.w	100fb68 <_vfprintf_r+0x1320>
 10103d4:	2300      	movs	r3, #0
 10103d6:	930a      	str	r3, [sp, #40]	; 0x28
 10103d8:	f7ff bbf1 	b.w	100fbbe <_vfprintf_r+0x1376>
 10103dc:	4633      	mov	r3, r6
 10103de:	f7fe bde2 	b.w	100efa6 <_vfprintf_r+0x75e>
 10103e2:	9603      	str	r6, [sp, #12]
 10103e4:	f7fe bdf1 	b.w	100efca <_vfprintf_r+0x782>

010103e8 <vfprintf>:
 10103e8:	b410      	push	{r4}
 10103ea:	f248 7458 	movw	r4, #34648	; 0x8758
 10103ee:	f2c0 1405 	movt	r4, #261	; 0x105
 10103f2:	4613      	mov	r3, r2
 10103f4:	460a      	mov	r2, r1
 10103f6:	4601      	mov	r1, r0
 10103f8:	6820      	ldr	r0, [r4, #0]
 10103fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 10103fe:	f7fe ba23 	b.w	100e848 <_vfprintf_r>
 1010402:	bf00      	nop

01010404 <__sbprintf>:
 1010404:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010406:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 101040a:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 101040c:	460c      	mov	r4, r1
 101040e:	898d      	ldrh	r5, [r1, #12]
 1010410:	2700      	movs	r7, #0
 1010412:	9706      	str	r7, [sp, #24]
 1010414:	4669      	mov	r1, sp
 1010416:	89e7      	ldrh	r7, [r4, #14]
 1010418:	f025 0502 	bic.w	r5, r5, #2
 101041c:	9619      	str	r6, [sp, #100]	; 0x64
 101041e:	f8ad 500c 	strh.w	r5, [sp, #12]
 1010422:	69e6      	ldr	r6, [r4, #28]
 1010424:	6a65      	ldr	r5, [r4, #36]	; 0x24
 1010426:	f8ad 700e 	strh.w	r7, [sp, #14]
 101042a:	9607      	str	r6, [sp, #28]
 101042c:	ae1a      	add	r6, sp, #104	; 0x68
 101042e:	9509      	str	r5, [sp, #36]	; 0x24
 1010430:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1010434:	9600      	str	r6, [sp, #0]
 1010436:	9604      	str	r6, [sp, #16]
 1010438:	4606      	mov	r6, r0
 101043a:	9502      	str	r5, [sp, #8]
 101043c:	9505      	str	r5, [sp, #20]
 101043e:	f7fe fa03 	bl	100e848 <_vfprintf_r>
 1010442:	1e05      	subs	r5, r0, #0
 1010444:	db07      	blt.n	1010456 <__sbprintf+0x52>
 1010446:	4630      	mov	r0, r6
 1010448:	4669      	mov	r1, sp
 101044a:	f001 fa8d 	bl	1011968 <_fflush_r>
 101044e:	2800      	cmp	r0, #0
 1010450:	bf18      	it	ne
 1010452:	f04f 35ff 	movne.w	r5, #4294967295
 1010456:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 101045a:	4628      	mov	r0, r5
 101045c:	065b      	lsls	r3, r3, #25
 101045e:	bf42      	ittt	mi
 1010460:	89a3      	ldrhmi	r3, [r4, #12]
 1010462:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 1010466:	81a3      	strhmi	r3, [r4, #12]
 1010468:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 101046c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101046e:	bf00      	nop

01010470 <_vsnprintf_r>:
 1010470:	b530      	push	{r4, r5, lr}
 1010472:	1e14      	subs	r4, r2, #0
 1010474:	4605      	mov	r5, r0
 1010476:	b09b      	sub	sp, #108	; 0x6c
 1010478:	bfbe      	ittt	lt
 101047a:	238b      	movlt	r3, #139	; 0x8b
 101047c:	f04f 30ff 	movlt.w	r0, #4294967295
 1010480:	602b      	strlt	r3, [r5, #0]
 1010482:	db15      	blt.n	10104b0 <_vsnprintf_r+0x40>
 1010484:	461a      	mov	r2, r3
 1010486:	9100      	str	r1, [sp, #0]
 1010488:	f44f 7302 	mov.w	r3, #520	; 0x208
 101048c:	9104      	str	r1, [sp, #16]
 101048e:	f8ad 300c 	strh.w	r3, [sp, #12]
 1010492:	4669      	mov	r1, sp
 1010494:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 1010496:	d10d      	bne.n	10104b4 <_vsnprintf_r+0x44>
 1010498:	9402      	str	r4, [sp, #8]
 101049a:	9405      	str	r4, [sp, #20]
 101049c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10104a0:	f8ad 400e 	strh.w	r4, [sp, #14]
 10104a4:	f7fc fc28 	bl	100ccf8 <_svfprintf_r>
 10104a8:	1c43      	adds	r3, r0, #1
 10104aa:	da01      	bge.n	10104b0 <_vsnprintf_r+0x40>
 10104ac:	238b      	movs	r3, #139	; 0x8b
 10104ae:	602b      	str	r3, [r5, #0]
 10104b0:	b01b      	add	sp, #108	; 0x6c
 10104b2:	bd30      	pop	{r4, r5, pc}
 10104b4:	3c01      	subs	r4, #1
 10104b6:	9402      	str	r4, [sp, #8]
 10104b8:	9405      	str	r4, [sp, #20]
 10104ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10104be:	f8ad 400e 	strh.w	r4, [sp, #14]
 10104c2:	f7fc fc19 	bl	100ccf8 <_svfprintf_r>
 10104c6:	1c42      	adds	r2, r0, #1
 10104c8:	f04f 0200 	mov.w	r2, #0
 10104cc:	bfbc      	itt	lt
 10104ce:	238b      	movlt	r3, #139	; 0x8b
 10104d0:	602b      	strlt	r3, [r5, #0]
 10104d2:	9b00      	ldr	r3, [sp, #0]
 10104d4:	701a      	strb	r2, [r3, #0]
 10104d6:	b01b      	add	sp, #108	; 0x6c
 10104d8:	bd30      	pop	{r4, r5, pc}
 10104da:	bf00      	nop

010104dc <vsnprintf>:
 10104dc:	b510      	push	{r4, lr}
 10104de:	f248 7458 	movw	r4, #34648	; 0x8758
 10104e2:	b082      	sub	sp, #8
 10104e4:	f2c0 1405 	movt	r4, #261	; 0x105
 10104e8:	9300      	str	r3, [sp, #0]
 10104ea:	4613      	mov	r3, r2
 10104ec:	460a      	mov	r2, r1
 10104ee:	4601      	mov	r1, r0
 10104f0:	6820      	ldr	r0, [r4, #0]
 10104f2:	f7ff ffbd 	bl	1010470 <_vsnprintf_r>
 10104f6:	b002      	add	sp, #8
 10104f8:	bd10      	pop	{r4, pc}
 10104fa:	bf00      	nop

010104fc <_wcrtomb_r>:
 10104fc:	b570      	push	{r4, r5, r6, lr}
 10104fe:	4605      	mov	r5, r0
 1010500:	b084      	sub	sp, #16
 1010502:	f500 748a 	add.w	r4, r0, #276	; 0x114
 1010506:	b103      	cbz	r3, 101050a <_wcrtomb_r+0xe>
 1010508:	461c      	mov	r4, r3
 101050a:	f248 7358 	movw	r3, #34648	; 0x8758
 101050e:	f2c0 1305 	movt	r3, #261	; 0x105
 1010512:	681b      	ldr	r3, [r3, #0]
 1010514:	6b58      	ldr	r0, [r3, #52]	; 0x34
 1010516:	f648 3388 	movw	r3, #35720	; 0x8b88
 101051a:	f2c0 1305 	movt	r3, #261	; 0x105
 101051e:	2800      	cmp	r0, #0
 1010520:	bf08      	it	eq
 1010522:	4618      	moveq	r0, r3
 1010524:	b161      	cbz	r1, 1010540 <_wcrtomb_r+0x44>
 1010526:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 101052a:	4623      	mov	r3, r4
 101052c:	4628      	mov	r0, r5
 101052e:	47b0      	blx	r6
 1010530:	1c43      	adds	r3, r0, #1
 1010532:	bf01      	itttt	eq
 1010534:	2200      	moveq	r2, #0
 1010536:	238a      	moveq	r3, #138	; 0x8a
 1010538:	6022      	streq	r2, [r4, #0]
 101053a:	602b      	streq	r3, [r5, #0]
 101053c:	b004      	add	sp, #16
 101053e:	bd70      	pop	{r4, r5, r6, pc}
 1010540:	460a      	mov	r2, r1
 1010542:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 1010546:	4623      	mov	r3, r4
 1010548:	a901      	add	r1, sp, #4
 101054a:	4628      	mov	r0, r5
 101054c:	47b0      	blx	r6
 101054e:	e7ef      	b.n	1010530 <_wcrtomb_r+0x34>

01010550 <wcrtomb>:
 1010550:	f248 7358 	movw	r3, #34648	; 0x8758
 1010554:	f2c0 1305 	movt	r3, #261	; 0x105
 1010558:	b570      	push	{r4, r5, r6, lr}
 101055a:	b084      	sub	sp, #16
 101055c:	681d      	ldr	r5, [r3, #0]
 101055e:	f505 768a 	add.w	r6, r5, #276	; 0x114
 1010562:	b102      	cbz	r2, 1010566 <wcrtomb+0x16>
 1010564:	4616      	mov	r6, r2
 1010566:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 1010568:	f648 3388 	movw	r3, #35720	; 0x8b88
 101056c:	f2c0 1305 	movt	r3, #261	; 0x105
 1010570:	2c00      	cmp	r4, #0
 1010572:	bf08      	it	eq
 1010574:	461c      	moveq	r4, r3
 1010576:	b170      	cbz	r0, 1010596 <wcrtomb+0x46>
 1010578:	460a      	mov	r2, r1
 101057a:	4633      	mov	r3, r6
 101057c:	4601      	mov	r1, r0
 101057e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1010582:	4628      	mov	r0, r5
 1010584:	47a0      	blx	r4
 1010586:	1c43      	adds	r3, r0, #1
 1010588:	bf01      	itttt	eq
 101058a:	2200      	moveq	r2, #0
 101058c:	238a      	moveq	r3, #138	; 0x8a
 101058e:	6032      	streq	r2, [r6, #0]
 1010590:	602b      	streq	r3, [r5, #0]
 1010592:	b004      	add	sp, #16
 1010594:	bd70      	pop	{r4, r5, r6, pc}
 1010596:	4602      	mov	r2, r0
 1010598:	4633      	mov	r3, r6
 101059a:	a901      	add	r1, sp, #4
 101059c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 10105a0:	4628      	mov	r0, r5
 10105a2:	47a0      	blx	r4
 10105a4:	e7ef      	b.n	1010586 <wcrtomb+0x36>
 10105a6:	bf00      	nop

010105a8 <_wcsrtombs_r>:
 10105a8:	b510      	push	{r4, lr}
 10105aa:	b082      	sub	sp, #8
 10105ac:	9c04      	ldr	r4, [sp, #16]
 10105ae:	9300      	str	r3, [sp, #0]
 10105b0:	f04f 33ff 	mov.w	r3, #4294967295
 10105b4:	9401      	str	r4, [sp, #4]
 10105b6:	f004 feff 	bl	10153b8 <_wcsnrtombs_r>
 10105ba:	b002      	add	sp, #8
 10105bc:	bd10      	pop	{r4, pc}
 10105be:	bf00      	nop

010105c0 <wcsrtombs>:
 10105c0:	b510      	push	{r4, lr}
 10105c2:	f248 7458 	movw	r4, #34648	; 0x8758
 10105c6:	b082      	sub	sp, #8
 10105c8:	f2c0 1405 	movt	r4, #261	; 0x105
 10105cc:	9200      	str	r2, [sp, #0]
 10105ce:	460a      	mov	r2, r1
 10105d0:	9301      	str	r3, [sp, #4]
 10105d2:	4601      	mov	r1, r0
 10105d4:	f04f 33ff 	mov.w	r3, #4294967295
 10105d8:	6820      	ldr	r0, [r4, #0]
 10105da:	f004 feed 	bl	10153b8 <_wcsnrtombs_r>
 10105de:	b002      	add	sp, #8
 10105e0:	bd10      	pop	{r4, pc}
 10105e2:	bf00      	nop

010105e4 <_wctomb_r>:
 10105e4:	b430      	push	{r4, r5}
 10105e6:	f248 7458 	movw	r4, #34648	; 0x8758
 10105ea:	f2c0 1405 	movt	r4, #261	; 0x105
 10105ee:	f648 3588 	movw	r5, #35720	; 0x8b88
 10105f2:	f2c0 1505 	movt	r5, #261	; 0x105
 10105f6:	6824      	ldr	r4, [r4, #0]
 10105f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 10105fa:	2c00      	cmp	r4, #0
 10105fc:	bf08      	it	eq
 10105fe:	462c      	moveq	r4, r5
 1010600:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1010604:	46a4      	mov	ip, r4
 1010606:	bc30      	pop	{r4, r5}
 1010608:	4760      	bx	ip
 101060a:	bf00      	nop

0101060c <__ascii_wctomb>:
 101060c:	b141      	cbz	r1, 1010620 <__ascii_wctomb+0x14>
 101060e:	2aff      	cmp	r2, #255	; 0xff
 1010610:	bf95      	itete	ls
 1010612:	700a      	strbls	r2, [r1, #0]
 1010614:	f04f 31ff 	movhi.w	r1, #4294967295
 1010618:	2101      	movls	r1, #1
 101061a:	238a      	movhi	r3, #138	; 0x8a
 101061c:	bf88      	it	hi
 101061e:	6003      	strhi	r3, [r0, #0]
 1010620:	4608      	mov	r0, r1
 1010622:	4770      	bx	lr

01010624 <__utf8_wctomb>:
 1010624:	b3c1      	cbz	r1, 1010698 <__utf8_wctomb+0x74>
 1010626:	2a7f      	cmp	r2, #127	; 0x7f
 1010628:	bf9c      	itt	ls
 101062a:	700a      	strbls	r2, [r1, #0]
 101062c:	2301      	movls	r3, #1
 101062e:	d931      	bls.n	1010694 <__utf8_wctomb+0x70>
 1010630:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 1010634:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 1010638:	d322      	bcc.n	1010680 <__utf8_wctomb+0x5c>
 101063a:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 101063e:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 1010642:	d32c      	bcc.n	101069e <__utf8_wctomb+0x7a>
 1010644:	f5a2 3380 	sub.w	r3, r2, #65536	; 0x10000
 1010648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 101064c:	d237      	bcs.n	10106be <__utf8_wctomb+0x9a>
 101064e:	f3c2 1385 	ubfx	r3, r2, #6, #6
 1010652:	f3c2 3005 	ubfx	r0, r2, #12, #6
 1010656:	b410      	push	{r4}
 1010658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 101065c:	0c94      	lsrs	r4, r2, #18
 101065e:	708b      	strb	r3, [r1, #2]
 1010660:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1010664:	2304      	movs	r3, #4
 1010666:	f064 040f 	orn	r4, r4, #15
 101066a:	f060 007f 	orn	r0, r0, #127	; 0x7f
 101066e:	700c      	strb	r4, [r1, #0]
 1010670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1010674:	7048      	strb	r0, [r1, #1]
 1010676:	4618      	mov	r0, r3
 1010678:	70ca      	strb	r2, [r1, #3]
 101067a:	f85d 4b04 	ldr.w	r4, [sp], #4
 101067e:	4770      	bx	lr
 1010680:	0993      	lsrs	r3, r2, #6
 1010682:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1010686:	f063 033f 	orn	r3, r3, #63	; 0x3f
 101068a:	700b      	strb	r3, [r1, #0]
 101068c:	2302      	movs	r3, #2
 101068e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1010692:	704a      	strb	r2, [r1, #1]
 1010694:	4618      	mov	r0, r3
 1010696:	4770      	bx	lr
 1010698:	460b      	mov	r3, r1
 101069a:	4618      	mov	r0, r3
 101069c:	4770      	bx	lr
 101069e:	0b10      	lsrs	r0, r2, #12
 10106a0:	f3c2 1385 	ubfx	r3, r2, #6, #6
 10106a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 10106a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10106ac:	f060 001f 	orn	r0, r0, #31
 10106b0:	704b      	strb	r3, [r1, #1]
 10106b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 10106b6:	7008      	strb	r0, [r1, #0]
 10106b8:	2303      	movs	r3, #3
 10106ba:	708a      	strb	r2, [r1, #2]
 10106bc:	e7ea      	b.n	1010694 <__utf8_wctomb+0x70>
 10106be:	228a      	movs	r2, #138	; 0x8a
 10106c0:	f04f 33ff 	mov.w	r3, #4294967295
 10106c4:	6002      	str	r2, [r0, #0]
 10106c6:	e7e5      	b.n	1010694 <__utf8_wctomb+0x70>

010106c8 <__sjis_wctomb>:
 10106c8:	b2d3      	uxtb	r3, r2
 10106ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 10106ce:	b1e9      	cbz	r1, 101070c <__sjis_wctomb+0x44>
 10106d0:	b1c2      	cbz	r2, 1010704 <__sjis_wctomb+0x3c>
 10106d2:	b430      	push	{r4, r5}
 10106d4:	f102 057f 	add.w	r5, r2, #127	; 0x7f
 10106d8:	f102 0420 	add.w	r4, r2, #32
 10106dc:	b2ed      	uxtb	r5, r5
 10106de:	b2e4      	uxtb	r4, r4
 10106e0:	2c0f      	cmp	r4, #15
 10106e2:	bf88      	it	hi
 10106e4:	2d1e      	cmphi	r5, #30
 10106e6:	d814      	bhi.n	1010712 <__sjis_wctomb+0x4a>
 10106e8:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 10106ec:	f083 0580 	eor.w	r5, r3, #128	; 0x80
 10106f0:	2d7c      	cmp	r5, #124	; 0x7c
 10106f2:	bf88      	it	hi
 10106f4:	2c3e      	cmphi	r4, #62	; 0x3e
 10106f6:	d80c      	bhi.n	1010712 <__sjis_wctomb+0x4a>
 10106f8:	700a      	strb	r2, [r1, #0]
 10106fa:	2202      	movs	r2, #2
 10106fc:	704b      	strb	r3, [r1, #1]
 10106fe:	4610      	mov	r0, r2
 1010700:	bc30      	pop	{r4, r5}
 1010702:	4770      	bx	lr
 1010704:	2201      	movs	r2, #1
 1010706:	700b      	strb	r3, [r1, #0]
 1010708:	4610      	mov	r0, r2
 101070a:	4770      	bx	lr
 101070c:	460a      	mov	r2, r1
 101070e:	4610      	mov	r0, r2
 1010710:	4770      	bx	lr
 1010712:	238a      	movs	r3, #138	; 0x8a
 1010714:	f04f 32ff 	mov.w	r2, #4294967295
 1010718:	6003      	str	r3, [r0, #0]
 101071a:	e7f0      	b.n	10106fe <__sjis_wctomb+0x36>

0101071c <__eucjp_wctomb>:
 101071c:	b2d3      	uxtb	r3, r2
 101071e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1010722:	b381      	cbz	r1, 1010786 <__eucjp_wctomb+0x6a>
 1010724:	b18a      	cbz	r2, 101074a <__eucjp_wctomb+0x2e>
 1010726:	b430      	push	{r4, r5}
 1010728:	f102 045f 	add.w	r4, r2, #95	; 0x5f
 101072c:	f102 0572 	add.w	r5, r2, #114	; 0x72
 1010730:	b2e4      	uxtb	r4, r4
 1010732:	b2ed      	uxtb	r5, r5
 1010734:	2c5d      	cmp	r4, #93	; 0x5d
 1010736:	bf88      	it	hi
 1010738:	2d01      	cmphi	r5, #1
 101073a:	d90a      	bls.n	1010752 <__eucjp_wctomb+0x36>
 101073c:	f04f 32ff 	mov.w	r2, #4294967295
 1010740:	238a      	movs	r3, #138	; 0x8a
 1010742:	6003      	str	r3, [r0, #0]
 1010744:	4610      	mov	r0, r2
 1010746:	bc30      	pop	{r4, r5}
 1010748:	4770      	bx	lr
 101074a:	2201      	movs	r2, #1
 101074c:	700b      	strb	r3, [r1, #0]
 101074e:	4610      	mov	r0, r2
 1010750:	4770      	bx	lr
 1010752:	f103 055f 	add.w	r5, r3, #95	; 0x5f
 1010756:	b2ed      	uxtb	r5, r5
 1010758:	2d5d      	cmp	r5, #93	; 0x5d
 101075a:	bf9e      	ittt	ls
 101075c:	700a      	strbls	r2, [r1, #0]
 101075e:	704b      	strbls	r3, [r1, #1]
 1010760:	2202      	movls	r2, #2
 1010762:	d9ef      	bls.n	1010744 <__eucjp_wctomb+0x28>
 1010764:	2c5d      	cmp	r4, #93	; 0x5d
 1010766:	d8e9      	bhi.n	101073c <__eucjp_wctomb+0x20>
 1010768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 101076c:	f103 045f 	add.w	r4, r3, #95	; 0x5f
 1010770:	b2e4      	uxtb	r4, r4
 1010772:	2c5d      	cmp	r4, #93	; 0x5d
 1010774:	d8e2      	bhi.n	101073c <__eucjp_wctomb+0x20>
 1010776:	704a      	strb	r2, [r1, #1]
 1010778:	2203      	movs	r2, #3
 101077a:	208f      	movs	r0, #143	; 0x8f
 101077c:	708b      	strb	r3, [r1, #2]
 101077e:	7008      	strb	r0, [r1, #0]
 1010780:	4610      	mov	r0, r2
 1010782:	bc30      	pop	{r4, r5}
 1010784:	4770      	bx	lr
 1010786:	460a      	mov	r2, r1
 1010788:	4610      	mov	r0, r2
 101078a:	4770      	bx	lr

0101078c <__jis_wctomb>:
 101078c:	b430      	push	{r4, r5}
 101078e:	b2d4      	uxtb	r4, r2
 1010790:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1010794:	b391      	cbz	r1, 10107fc <__jis_wctomb+0x70>
 1010796:	b17a      	cbz	r2, 10107b8 <__jis_wctomb+0x2c>
 1010798:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 101079c:	2d5d      	cmp	r5, #93	; 0x5d
 101079e:	d831      	bhi.n	1010804 <__jis_wctomb+0x78>
 10107a0:	f1a4 0521 	sub.w	r5, r4, #33	; 0x21
 10107a4:	2d5d      	cmp	r5, #93	; 0x5d
 10107a6:	d82d      	bhi.n	1010804 <__jis_wctomb+0x78>
 10107a8:	6818      	ldr	r0, [r3, #0]
 10107aa:	b1c8      	cbz	r0, 10107e0 <__jis_wctomb+0x54>
 10107ac:	2302      	movs	r3, #2
 10107ae:	704c      	strb	r4, [r1, #1]
 10107b0:	4618      	mov	r0, r3
 10107b2:	700a      	strb	r2, [r1, #0]
 10107b4:	bc30      	pop	{r4, r5}
 10107b6:	4770      	bx	lr
 10107b8:	6818      	ldr	r0, [r3, #0]
 10107ba:	b178      	cbz	r0, 10107dc <__jis_wctomb+0x50>
 10107bc:	601a      	str	r2, [r3, #0]
 10107be:	3103      	adds	r1, #3
 10107c0:	221b      	movs	r2, #27
 10107c2:	2328      	movs	r3, #40	; 0x28
 10107c4:	f801 2c03 	strb.w	r2, [r1, #-3]
 10107c8:	2242      	movs	r2, #66	; 0x42
 10107ca:	f801 3c02 	strb.w	r3, [r1, #-2]
 10107ce:	2304      	movs	r3, #4
 10107d0:	f801 2c01 	strb.w	r2, [r1, #-1]
 10107d4:	700c      	strb	r4, [r1, #0]
 10107d6:	4618      	mov	r0, r3
 10107d8:	bc30      	pop	{r4, r5}
 10107da:	4770      	bx	lr
 10107dc:	2301      	movs	r3, #1
 10107de:	e7f9      	b.n	10107d4 <__jis_wctomb+0x48>
 10107e0:	2001      	movs	r0, #1
 10107e2:	3103      	adds	r1, #3
 10107e4:	6018      	str	r0, [r3, #0]
 10107e6:	201b      	movs	r0, #27
 10107e8:	2324      	movs	r3, #36	; 0x24
 10107ea:	f801 0c03 	strb.w	r0, [r1, #-3]
 10107ee:	f801 3c02 	strb.w	r3, [r1, #-2]
 10107f2:	2042      	movs	r0, #66	; 0x42
 10107f4:	2305      	movs	r3, #5
 10107f6:	f801 0c01 	strb.w	r0, [r1, #-1]
 10107fa:	e7d8      	b.n	10107ae <__jis_wctomb+0x22>
 10107fc:	2301      	movs	r3, #1
 10107fe:	4618      	mov	r0, r3
 1010800:	bc30      	pop	{r4, r5}
 1010802:	4770      	bx	lr
 1010804:	228a      	movs	r2, #138	; 0x8a
 1010806:	f04f 33ff 	mov.w	r3, #4294967295
 101080a:	6002      	str	r2, [r0, #0]
 101080c:	e7e3      	b.n	10107d6 <__jis_wctomb+0x4a>
 101080e:	bf00      	nop

01010810 <__swsetup_r>:
 1010810:	b538      	push	{r3, r4, r5, lr}
 1010812:	f248 7358 	movw	r3, #34648	; 0x8758
 1010816:	f2c0 1305 	movt	r3, #261	; 0x105
 101081a:	4605      	mov	r5, r0
 101081c:	460c      	mov	r4, r1
 101081e:	6818      	ldr	r0, [r3, #0]
 1010820:	b110      	cbz	r0, 1010828 <__swsetup_r+0x18>
 1010822:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1010824:	2b00      	cmp	r3, #0
 1010826:	d03f      	beq.n	10108a8 <__swsetup_r+0x98>
 1010828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 101082c:	b293      	uxth	r3, r2
 101082e:	0718      	lsls	r0, r3, #28
 1010830:	bf48      	it	mi
 1010832:	6920      	ldrmi	r0, [r4, #16]
 1010834:	d41c      	bmi.n	1010870 <__swsetup_r+0x60>
 1010836:	06d9      	lsls	r1, r3, #27
 1010838:	d545      	bpl.n	10108c6 <__swsetup_r+0xb6>
 101083a:	0758      	lsls	r0, r3, #29
 101083c:	bf58      	it	pl
 101083e:	6920      	ldrpl	r0, [r4, #16]
 1010840:	d512      	bpl.n	1010868 <__swsetup_r+0x58>
 1010842:	6b21      	ldr	r1, [r4, #48]	; 0x30
 1010844:	b151      	cbz	r1, 101085c <__swsetup_r+0x4c>
 1010846:	f104 0340 	add.w	r3, r4, #64	; 0x40
 101084a:	4299      	cmp	r1, r3
 101084c:	d004      	beq.n	1010858 <__swsetup_r+0x48>
 101084e:	4628      	mov	r0, r5
 1010850:	f001 fa16 	bl	1011c80 <_free_r>
 1010854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1010858:	2300      	movs	r3, #0
 101085a:	6323      	str	r3, [r4, #48]	; 0x30
 101085c:	6920      	ldr	r0, [r4, #16]
 101085e:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 1010862:	2300      	movs	r3, #0
 1010864:	e9c4 0300 	strd	r0, r3, [r4]
 1010868:	f042 0308 	orr.w	r3, r2, #8
 101086c:	81a3      	strh	r3, [r4, #12]
 101086e:	b29b      	uxth	r3, r3
 1010870:	b1e8      	cbz	r0, 10108ae <__swsetup_r+0x9e>
 1010872:	f013 0201 	ands.w	r2, r3, #1
 1010876:	d007      	beq.n	1010888 <__swsetup_r+0x78>
 1010878:	6963      	ldr	r3, [r4, #20]
 101087a:	2200      	movs	r2, #0
 101087c:	60a2      	str	r2, [r4, #8]
 101087e:	425b      	negs	r3, r3
 1010880:	61a3      	str	r3, [r4, #24]
 1010882:	b138      	cbz	r0, 1010894 <__swsetup_r+0x84>
 1010884:	2000      	movs	r0, #0
 1010886:	bd38      	pop	{r3, r4, r5, pc}
 1010888:	0799      	lsls	r1, r3, #30
 101088a:	bf58      	it	pl
 101088c:	6962      	ldrpl	r2, [r4, #20]
 101088e:	60a2      	str	r2, [r4, #8]
 1010890:	2800      	cmp	r0, #0
 1010892:	d1f7      	bne.n	1010884 <__swsetup_r+0x74>
 1010894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1010898:	061a      	lsls	r2, r3, #24
 101089a:	bf42      	ittt	mi
 101089c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 10108a0:	81a3      	strhmi	r3, [r4, #12]
 10108a2:	f04f 30ff 	movmi.w	r0, #4294967295
 10108a6:	bd38      	pop	{r3, r4, r5, pc}
 10108a8:	f001 f970 	bl	1011b8c <__sinit>
 10108ac:	e7bc      	b.n	1010828 <__swsetup_r+0x18>
 10108ae:	f403 7220 	and.w	r2, r3, #640	; 0x280
 10108b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 10108b6:	d0dc      	beq.n	1010872 <__swsetup_r+0x62>
 10108b8:	4628      	mov	r0, r5
 10108ba:	4621      	mov	r1, r4
 10108bc:	f001 fd56 	bl	101236c <__smakebuf_r>
 10108c0:	89a3      	ldrh	r3, [r4, #12]
 10108c2:	6920      	ldr	r0, [r4, #16]
 10108c4:	e7d5      	b.n	1010872 <__swsetup_r+0x62>
 10108c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 10108ca:	2309      	movs	r3, #9
 10108cc:	f04f 30ff 	mov.w	r0, #4294967295
 10108d0:	602b      	str	r3, [r5, #0]
 10108d2:	81a2      	strh	r2, [r4, #12]
 10108d4:	bd38      	pop	{r3, r4, r5, pc}
 10108d6:	bf00      	nop

010108d8 <__call_exitprocs>:
 10108d8:	f645 13e0 	movw	r3, #23008	; 0x59e0
 10108dc:	f2c0 1305 	movt	r3, #261	; 0x105
 10108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10108e4:	b085      	sub	sp, #20
 10108e6:	681b      	ldr	r3, [r3, #0]
 10108e8:	460f      	mov	r7, r1
 10108ea:	468a      	mov	sl, r1
 10108ec:	f24b 02c9 	movw	r2, #45257	; 0xb0c9
 10108f0:	f2c0 1200 	movt	r2, #256	; 0x100
 10108f4:	9203      	str	r2, [sp, #12]
 10108f6:	e9cd 0300 	strd	r0, r3, [sp]
 10108fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 10108fe:	9302      	str	r3, [sp, #8]
 1010900:	9b01      	ldr	r3, [sp, #4]
 1010902:	f8dd b008 	ldr.w	fp, [sp, #8]
 1010906:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 101090a:	b32e      	cbz	r6, 1010958 <__call_exitprocs+0x80>
 101090c:	f04f 0801 	mov.w	r8, #1
 1010910:	6874      	ldr	r4, [r6, #4]
 1010912:	1e65      	subs	r5, r4, #1
 1010914:	bf5e      	ittt	pl
 1010916:	3401      	addpl	r4, #1
 1010918:	2700      	movpl	r7, #0
 101091a:	eb06 0484 	addpl.w	r4, r6, r4, lsl #2
 101091e:	d40a      	bmi.n	1010936 <__call_exitprocs+0x5e>
 1010920:	f1ba 0f00 	cmp.w	sl, #0
 1010924:	d01b      	beq.n	101095e <__call_exitprocs+0x86>
 1010926:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 101092a:	4553      	cmp	r3, sl
 101092c:	d017      	beq.n	101095e <__call_exitprocs+0x86>
 101092e:	3d01      	subs	r5, #1
 1010930:	3c04      	subs	r4, #4
 1010932:	1c6b      	adds	r3, r5, #1
 1010934:	d1f4      	bne.n	1010920 <__call_exitprocs+0x48>
 1010936:	9b03      	ldr	r3, [sp, #12]
 1010938:	b173      	cbz	r3, 1010958 <__call_exitprocs+0x80>
 101093a:	e9d6 3200 	ldrd	r3, r2, [r6]
 101093e:	2a00      	cmp	r2, #0
 1010940:	d133      	bne.n	10109aa <__call_exitprocs+0xd2>
 1010942:	2b00      	cmp	r3, #0
 1010944:	d031      	beq.n	10109aa <__call_exitprocs+0xd2>
 1010946:	4630      	mov	r0, r6
 1010948:	f8cb 3000 	str.w	r3, [fp]
 101094c:	f7fa fbbc 	bl	100b0c8 <free>
 1010950:	f8db 6000 	ldr.w	r6, [fp]
 1010954:	2e00      	cmp	r6, #0
 1010956:	d1db      	bne.n	1010910 <__call_exitprocs+0x38>
 1010958:	b005      	add	sp, #20
 101095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101095e:	6873      	ldr	r3, [r6, #4]
 1010960:	6822      	ldr	r2, [r4, #0]
 1010962:	3b01      	subs	r3, #1
 1010964:	42ab      	cmp	r3, r5
 1010966:	bf0c      	ite	eq
 1010968:	6075      	streq	r5, [r6, #4]
 101096a:	6027      	strne	r7, [r4, #0]
 101096c:	2a00      	cmp	r2, #0
 101096e:	d0de      	beq.n	101092e <__call_exitprocs+0x56>
 1010970:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 1010974:	fa08 f305 	lsl.w	r3, r8, r5
 1010978:	f8d6 9004 	ldr.w	r9, [r6, #4]
 101097c:	420b      	tst	r3, r1
 101097e:	d108      	bne.n	1010992 <__call_exitprocs+0xba>
 1010980:	4790      	blx	r2
 1010982:	6873      	ldr	r3, [r6, #4]
 1010984:	454b      	cmp	r3, r9
 1010986:	d1bb      	bne.n	1010900 <__call_exitprocs+0x28>
 1010988:	f8db 3000 	ldr.w	r3, [fp]
 101098c:	42b3      	cmp	r3, r6
 101098e:	d0ce      	beq.n	101092e <__call_exitprocs+0x56>
 1010990:	e7b6      	b.n	1010900 <__call_exitprocs+0x28>
 1010992:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 1010996:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 101099a:	4203      	tst	r3, r0
 101099c:	d102      	bne.n	10109a4 <__call_exitprocs+0xcc>
 101099e:	9800      	ldr	r0, [sp, #0]
 10109a0:	4790      	blx	r2
 10109a2:	e7ee      	b.n	1010982 <__call_exitprocs+0xaa>
 10109a4:	4608      	mov	r0, r1
 10109a6:	4790      	blx	r2
 10109a8:	e7eb      	b.n	1010982 <__call_exitprocs+0xaa>
 10109aa:	46b3      	mov	fp, r6
 10109ac:	461e      	mov	r6, r3
 10109ae:	2e00      	cmp	r6, #0
 10109b0:	d1ae      	bne.n	1010910 <__call_exitprocs+0x38>
 10109b2:	e7d1      	b.n	1010958 <__call_exitprocs+0x80>

010109b4 <__set_ctype>:
 10109b4:	f645 433c 	movw	r3, #23612	; 0x5c3c
 10109b8:	f2c0 1305 	movt	r3, #261	; 0x105
 10109bc:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 10109c0:	4770      	bx	lr
 10109c2:	bf00      	nop
 10109c4:	0000      	movs	r0, r0
	...

010109c8 <quorem>:
 10109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10109cc:	b085      	sub	sp, #20
 10109ce:	6903      	ldr	r3, [r0, #16]
 10109d0:	690d      	ldr	r5, [r1, #16]
 10109d2:	42ab      	cmp	r3, r5
 10109d4:	bfb8      	it	lt
 10109d6:	2000      	movlt	r0, #0
 10109d8:	f2c0 8097 	blt.w	1010b0a <quorem+0x142>
 10109dc:	3d01      	subs	r5, #1
 10109de:	f101 0414 	add.w	r4, r1, #20
 10109e2:	f100 0914 	add.w	r9, r0, #20
 10109e6:	9101      	str	r1, [sp, #4]
 10109e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 10109ec:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 10109f0:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 10109f4:	4680      	mov	r8, r0
 10109f6:	f102 0b01 	add.w	fp, r2, #1
 10109fa:	eb09 020a 	add.w	r2, r9, sl
 10109fe:	9203      	str	r2, [sp, #12]
 1010a00:	eb04 070a 	add.w	r7, r4, sl
 1010a04:	4618      	mov	r0, r3
 1010a06:	4659      	mov	r1, fp
 1010a08:	9302      	str	r3, [sp, #8]
 1010a0a:	f7f8 ff4d 	bl	10098a8 <__udivsi3>
 1010a0e:	9b02      	ldr	r3, [sp, #8]
 1010a10:	455b      	cmp	r3, fp
 1010a12:	4606      	mov	r6, r0
 1010a14:	d33f      	bcc.n	1010a96 <quorem+0xce>
 1010a16:	2000      	movs	r0, #0
 1010a18:	46a6      	mov	lr, r4
 1010a1a:	4602      	mov	r2, r0
 1010a1c:	46cc      	mov	ip, r9
 1010a1e:	f85e bb04 	ldr.w	fp, [lr], #4
 1010a22:	f8dc 1000 	ldr.w	r1, [ip]
 1010a26:	4577      	cmp	r7, lr
 1010a28:	fa1f f38b 	uxth.w	r3, fp
 1010a2c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 1010a30:	fb06 0303 	mla	r3, r6, r3, r0
 1010a34:	ea4f 4013 	mov.w	r0, r3, lsr #16
 1010a38:	b29b      	uxth	r3, r3
 1010a3a:	eba2 0303 	sub.w	r3, r2, r3
 1010a3e:	fb06 000b 	mla	r0, r6, fp, r0
 1010a42:	fa13 f381 	uxtah	r3, r3, r1
 1010a46:	fa1f fb83 	uxth.w	fp, r3
 1010a4a:	b282      	uxth	r2, r0
 1010a4c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1010a50:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
 1010a54:	eb02 4323 	add.w	r3, r2, r3, asr #16
 1010a58:	ea4b 4103 	orr.w	r1, fp, r3, lsl #16
 1010a5c:	ea4f 4223 	mov.w	r2, r3, asr #16
 1010a60:	f84c 1b04 	str.w	r1, [ip], #4
 1010a64:	d2db      	bcs.n	1010a1e <quorem+0x56>
 1010a66:	f859 300a 	ldr.w	r3, [r9, sl]
 1010a6a:	b9a3      	cbnz	r3, 1010a96 <quorem+0xce>
 1010a6c:	9a03      	ldr	r2, [sp, #12]
 1010a6e:	1f13      	subs	r3, r2, #4
 1010a70:	4599      	cmp	r9, r3
 1010a72:	d20e      	bcs.n	1010a92 <quorem+0xca>
 1010a74:	f852 3c04 	ldr.w	r3, [r2, #-4]
 1010a78:	b95b      	cbnz	r3, 1010a92 <quorem+0xca>
 1010a7a:	f1a2 0308 	sub.w	r3, r2, #8
 1010a7e:	e001      	b.n	1010a84 <quorem+0xbc>
 1010a80:	6812      	ldr	r2, [r2, #0]
 1010a82:	b932      	cbnz	r2, 1010a92 <quorem+0xca>
 1010a84:	4599      	cmp	r9, r3
 1010a86:	461a      	mov	r2, r3
 1010a88:	f105 35ff 	add.w	r5, r5, #4294967295
 1010a8c:	f1a3 0304 	sub.w	r3, r3, #4
 1010a90:	d3f6      	bcc.n	1010a80 <quorem+0xb8>
 1010a92:	f8c8 5010 	str.w	r5, [r8, #16]
 1010a96:	9901      	ldr	r1, [sp, #4]
 1010a98:	4640      	mov	r0, r8
 1010a9a:	f001 ffdd 	bl	1012a58 <__mcmp>
 1010a9e:	2800      	cmp	r0, #0
 1010aa0:	db32      	blt.n	1010b08 <quorem+0x140>
 1010aa2:	3601      	adds	r6, #1
 1010aa4:	4648      	mov	r0, r9
 1010aa6:	f04f 0c00 	mov.w	ip, #0
 1010aaa:	f854 2b04 	ldr.w	r2, [r4], #4
 1010aae:	6803      	ldr	r3, [r0, #0]
 1010ab0:	42a7      	cmp	r7, r4
 1010ab2:	b291      	uxth	r1, r2
 1010ab4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 1010ab8:	ebac 0101 	sub.w	r1, ip, r1
 1010abc:	ebc2 4c13 	rsb	ip, r2, r3, lsr #16
 1010ac0:	fa11 f383 	uxtah	r3, r1, r3
 1010ac4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
 1010ac8:	b29b      	uxth	r3, r3
 1010aca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 1010ace:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 1010ad2:	f840 3b04 	str.w	r3, [r0], #4
 1010ad6:	d2e8      	bcs.n	1010aaa <quorem+0xe2>
 1010ad8:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 1010adc:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 1010ae0:	b992      	cbnz	r2, 1010b08 <quorem+0x140>
 1010ae2:	1f1a      	subs	r2, r3, #4
 1010ae4:	4591      	cmp	r9, r2
 1010ae6:	d20d      	bcs.n	1010b04 <quorem+0x13c>
 1010ae8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 1010aec:	b952      	cbnz	r2, 1010b04 <quorem+0x13c>
 1010aee:	3b08      	subs	r3, #8
 1010af0:	e001      	b.n	1010af6 <quorem+0x12e>
 1010af2:	6812      	ldr	r2, [r2, #0]
 1010af4:	b932      	cbnz	r2, 1010b04 <quorem+0x13c>
 1010af6:	4599      	cmp	r9, r3
 1010af8:	461a      	mov	r2, r3
 1010afa:	f105 35ff 	add.w	r5, r5, #4294967295
 1010afe:	f1a3 0304 	sub.w	r3, r3, #4
 1010b02:	d3f6      	bcc.n	1010af2 <quorem+0x12a>
 1010b04:	f8c8 5010 	str.w	r5, [r8, #16]
 1010b08:	4630      	mov	r0, r6
 1010b0a:	b005      	add	sp, #20
 1010b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01010b10 <_dtoa_r>:
 1010b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1010b14:	b093      	sub	sp, #76	; 0x4c
 1010b16:	ec57 6b10 	vmov	r6, r7, d0
 1010b1a:	4604      	mov	r4, r0
 1010b1c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 1010b1e:	468a      	mov	sl, r1
 1010b20:	e9cd 3207 	strd	r3, r2, [sp, #28]
 1010b24:	e9cd 6700 	strd	r6, r7, [sp]
 1010b28:	b14d      	cbz	r5, 1010b3e <_dtoa_r+0x2e>
 1010b2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 1010b2c:	2301      	movs	r3, #1
 1010b2e:	4629      	mov	r1, r5
 1010b30:	4093      	lsls	r3, r2
 1010b32:	e9c5 2301 	strd	r2, r3, [r5, #4]
 1010b36:	f001 fd49 	bl	10125cc <_Bfree>
 1010b3a:	2300      	movs	r3, #0
 1010b3c:	6423      	str	r3, [r4, #64]	; 0x40
 1010b3e:	1e3e      	subs	r6, r7, #0
 1010b40:	bfbf      	itttt	lt
 1010b42:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 1010b46:	9601      	strlt	r6, [sp, #4]
 1010b48:	9a1c      	ldrlt	r2, [sp, #112]	; 0x70
 1010b4a:	2301      	movlt	r3, #1
 1010b4c:	bfa5      	ittet	ge
 1010b4e:	9a1c      	ldrge	r2, [sp, #112]	; 0x70
 1010b50:	2300      	movge	r3, #0
 1010b52:	6013      	strlt	r3, [r2, #0]
 1010b54:	6013      	strge	r3, [r2, #0]
 1010b56:	2300      	movs	r3, #0
 1010b58:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 1010b5c:	43b3      	bics	r3, r6
 1010b5e:	f000 80b1 	beq.w	1010cc4 <_dtoa_r+0x1b4>
 1010b62:	ed9d 7b00 	vldr	d7, [sp]
 1010b66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1010b6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 1010b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010b72:	d10e      	bne.n	1010b92 <_dtoa_r+0x82>
 1010b74:	9a07      	ldr	r2, [sp, #28]
 1010b76:	2301      	movs	r3, #1
 1010b78:	6013      	str	r3, [r2, #0]
 1010b7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1010b7c:	2b00      	cmp	r3, #0
 1010b7e:	f000 8358 	beq.w	1011232 <_dtoa_r+0x722>
 1010b82:	4bc3      	ldr	r3, [pc, #780]	; (1010e90 <_dtoa_r+0x380>)
 1010b84:	1e5e      	subs	r6, r3, #1
 1010b86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 1010b88:	6013      	str	r3, [r2, #0]
 1010b8a:	4630      	mov	r0, r6
 1010b8c:	b013      	add	sp, #76	; 0x4c
 1010b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1010b92:	aa10      	add	r2, sp, #64	; 0x40
 1010b94:	a911      	add	r1, sp, #68	; 0x44
 1010b96:	ed9d 0b02 	vldr	d0, [sp, #8]
 1010b9a:	4620      	mov	r0, r4
 1010b9c:	f002 f87e 	bl	1012c9c <__d2b>
 1010ba0:	ea5f 5b16 	movs.w	fp, r6, lsr #20
 1010ba4:	4680      	mov	r8, r0
 1010ba6:	f040 80a1 	bne.w	1010cec <_dtoa_r+0x1dc>
 1010baa:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
 1010bae:	eb01 0b03 	add.w	fp, r1, r3
 1010bb2:	f20b 4332 	addw	r3, fp, #1074	; 0x432
 1010bb6:	2b20      	cmp	r3, #32
 1010bb8:	f340 8343 	ble.w	1011242 <_dtoa_r+0x732>
 1010bbc:	f20b 4212 	addw	r2, fp, #1042	; 0x412
 1010bc0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 1010bc4:	409e      	lsls	r6, r3
 1010bc6:	4613      	mov	r3, r2
 1010bc8:	9a00      	ldr	r2, [sp, #0]
 1010bca:	fa22 f303 	lsr.w	r3, r2, r3
 1010bce:	4333      	orrs	r3, r6
 1010bd0:	ee07 3a90 	vmov	s15, r3
 1010bd4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 1010bd8:	2301      	movs	r3, #1
 1010bda:	f10b 3bff 	add.w	fp, fp, #4294967295
 1010bde:	930c      	str	r3, [sp, #48]	; 0x30
 1010be0:	ed8d 7b04 	vstr	d7, [sp, #16]
 1010be4:	9805      	ldr	r0, [sp, #20]
 1010be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 1010bea:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 1010bee:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 1010bf2:	ec43 2b13 	vmov	d3, r2, r3
 1010bf6:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 1010e78 <_dtoa_r+0x368>
 1010bfa:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 1010e80 <_dtoa_r+0x370>
 1010bfe:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 1010e88 <_dtoa_r+0x378>
 1010c02:	ee33 6b46 	vsub.f64	d6, d3, d6
 1010c06:	ee06 7b04 	vmla.f64	d7, d6, d4
 1010c0a:	ee06 ba90 	vmov	s13, fp
 1010c0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1010c12:	ee06 7b05 	vmla.f64	d7, d6, d5
 1010c16:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 1010c1a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 1010c1e:	ee16 5a90 	vmov	r5, s13
 1010c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010c26:	d508      	bpl.n	1010c3a <_dtoa_r+0x12a>
 1010c28:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1010c2c:	eeb4 6b47 	vcmp.f64	d6, d7
 1010c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010c34:	bf18      	it	ne
 1010c36:	f105 35ff 	addne.w	r5, r5, #4294967295
 1010c3a:	2d16      	cmp	r5, #22
 1010c3c:	eba1 0b0b 	sub.w	fp, r1, fp
 1010c40:	f10b 36ff 	add.w	r6, fp, #4294967295
 1010c44:	f200 82e7 	bhi.w	1011216 <_dtoa_r+0x706>
 1010c48:	f645 5350 	movw	r3, #23888	; 0x5d50
 1010c4c:	f2c0 1305 	movt	r3, #261	; 0x105
 1010c50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 1010c54:	ed9d 6b02 	vldr	d6, [sp, #8]
 1010c58:	ed93 7b00 	vldr	d7, [r3]
 1010c5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1010c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010c64:	d55b      	bpl.n	1010d1e <_dtoa_r+0x20e>
 1010c66:	2e00      	cmp	r6, #0
 1010c68:	f04f 0300 	mov.w	r3, #0
 1010c6c:	f105 35ff 	add.w	r5, r5, #4294967295
 1010c70:	930d      	str	r3, [sp, #52]	; 0x34
 1010c72:	bfa4      	itt	ge
 1010c74:	2300      	movge	r3, #0
 1010c76:	9309      	strge	r3, [sp, #36]	; 0x24
 1010c78:	f2c0 82d6 	blt.w	1011228 <_dtoa_r+0x718>
 1010c7c:	2d00      	cmp	r5, #0
 1010c7e:	da56      	bge.n	1010d2e <_dtoa_r+0x21e>
 1010c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010c82:	f1ba 0f09 	cmp.w	sl, #9
 1010c86:	9504      	str	r5, [sp, #16]
 1010c88:	eba3 0305 	sub.w	r3, r3, r5
 1010c8c:	9309      	str	r3, [sp, #36]	; 0x24
 1010c8e:	f1c5 0300 	rsb	r3, r5, #0
 1010c92:	f04f 0500 	mov.w	r5, #0
 1010c96:	930b      	str	r3, [sp, #44]	; 0x2c
 1010c98:	d851      	bhi.n	1010d3e <_dtoa_r+0x22e>
 1010c9a:	f1ba 0f05 	cmp.w	sl, #5
 1010c9e:	bfc4      	itt	gt
 1010ca0:	f1aa 0a04 	subgt.w	sl, sl, #4
 1010ca4:	f04f 0900 	movgt.w	r9, #0
 1010ca8:	dc01      	bgt.n	1010cae <_dtoa_r+0x19e>
 1010caa:	f04f 0901 	mov.w	r9, #1
 1010cae:	f1aa 0302 	sub.w	r3, sl, #2
 1010cb2:	2b03      	cmp	r3, #3
 1010cb4:	f200 8477 	bhi.w	10115a6 <_dtoa_r+0xa96>
 1010cb8:	e8df f013 	tbh	[pc, r3, lsl #1]
 1010cbc:	0367036a 	.word	0x0367036a
 1010cc0:	035b033d 	.word	0x035b033d
 1010cc4:	9a07      	ldr	r2, [sp, #28]
 1010cc6:	f242 730f 	movw	r3, #9999	; 0x270f
 1010cca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 1010cce:	6013      	str	r3, [r2, #0]
 1010cd0:	9b00      	ldr	r3, [sp, #0]
 1010cd2:	4333      	orrs	r3, r6
 1010cd4:	d119      	bne.n	1010d0a <_dtoa_r+0x1fa>
 1010cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1010cd8:	f248 26e0 	movw	r6, #33504	; 0x82e0
 1010cdc:	f2c0 1605 	movt	r6, #261	; 0x105
 1010ce0:	2b00      	cmp	r3, #0
 1010ce2:	f43f af52 	beq.w	1010b8a <_dtoa_r+0x7a>
 1010ce6:	f106 0308 	add.w	r3, r6, #8
 1010cea:	e74c      	b.n	1010b86 <_dtoa_r+0x76>
 1010cec:	9903      	ldr	r1, [sp, #12]
 1010cee:	2000      	movs	r0, #0
 1010cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1010cf4:	f2ab 3bff 	subw	fp, fp, #1023	; 0x3ff
 1010cf8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 1010cfc:	900c      	str	r0, [sp, #48]	; 0x30
 1010cfe:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1010d02:	9910      	ldr	r1, [sp, #64]	; 0x40
 1010d04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1010d08:	e771      	b.n	1010bee <_dtoa_r+0xde>
 1010d0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1010d0c:	f248 26dc 	movw	r6, #33500	; 0x82dc
 1010d10:	f2c0 1605 	movt	r6, #261	; 0x105
 1010d14:	2b00      	cmp	r3, #0
 1010d16:	f43f af38 	beq.w	1010b8a <_dtoa_r+0x7a>
 1010d1a:	1cf3      	adds	r3, r6, #3
 1010d1c:	e733      	b.n	1010b86 <_dtoa_r+0x76>
 1010d1e:	2e00      	cmp	r6, #0
 1010d20:	f04f 0300 	mov.w	r3, #0
 1010d24:	930d      	str	r3, [sp, #52]	; 0x34
 1010d26:	bfa8      	it	ge
 1010d28:	9309      	strge	r3, [sp, #36]	; 0x24
 1010d2a:	f2c0 827d 	blt.w	1011228 <_dtoa_r+0x718>
 1010d2e:	f1ba 0f09 	cmp.w	sl, #9
 1010d32:	f04f 0300 	mov.w	r3, #0
 1010d36:	442e      	add	r6, r5
 1010d38:	9504      	str	r5, [sp, #16]
 1010d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 1010d3c:	d9ad      	bls.n	1010c9a <_dtoa_r+0x18a>
 1010d3e:	f04f 0a00 	mov.w	sl, #0
 1010d42:	f04f 37ff 	mov.w	r7, #4294967295
 1010d46:	46d1      	mov	r9, sl
 1010d48:	2301      	movs	r3, #1
 1010d4a:	f8cd a020 	str.w	sl, [sp, #32]
 1010d4e:	930a      	str	r3, [sp, #40]	; 0x28
 1010d50:	2100      	movs	r1, #0
 1010d52:	970e      	str	r7, [sp, #56]	; 0x38
 1010d54:	6461      	str	r1, [r4, #68]	; 0x44
 1010d56:	4620      	mov	r0, r4
 1010d58:	f001 fc12 	bl	1012580 <_Balloc>
 1010d5c:	4683      	mov	fp, r0
 1010d5e:	6420      	str	r0, [r4, #64]	; 0x40
 1010d60:	f1b9 0f00 	cmp.w	r9, #0
 1010d64:	f000 80e2 	beq.w	1010f2c <_dtoa_r+0x41c>
 1010d68:	9a04      	ldr	r2, [sp, #16]
 1010d6a:	2a00      	cmp	r2, #0
 1010d6c:	f340 827a 	ble.w	1011264 <_dtoa_r+0x754>
 1010d70:	f002 010f 	and.w	r1, r2, #15
 1010d74:	f645 5350 	movw	r3, #23888	; 0x5d50
 1010d78:	f2c0 1305 	movt	r3, #261	; 0x105
 1010d7c:	1112      	asrs	r2, r2, #4
 1010d7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1010d82:	ed93 6b00 	vldr	d6, [r3]
 1010d86:	06d3      	lsls	r3, r2, #27
 1010d88:	f140 82d1 	bpl.w	101132e <_dtoa_r+0x81e>
 1010d8c:	f645 6340 	movw	r3, #24128	; 0x5e40
 1010d90:	f2c0 1305 	movt	r3, #261	; 0x105
 1010d94:	ed9d 5b02 	vldr	d5, [sp, #8]
 1010d98:	f002 020f 	and.w	r2, r2, #15
 1010d9c:	2103      	movs	r1, #3
 1010d9e:	ed93 7b08 	vldr	d7, [r3, #32]
 1010da2:	ee85 5b07 	vdiv.f64	d5, d5, d7
 1010da6:	f645 6340 	movw	r3, #24128	; 0x5e40
 1010daa:	f2c0 1305 	movt	r3, #261	; 0x105
 1010dae:	b152      	cbz	r2, 1010dc6 <_dtoa_r+0x2b6>
 1010db0:	07d0      	lsls	r0, r2, #31
 1010db2:	d504      	bpl.n	1010dbe <_dtoa_r+0x2ae>
 1010db4:	ed93 7b00 	vldr	d7, [r3]
 1010db8:	3101      	adds	r1, #1
 1010dba:	ee26 6b07 	vmul.f64	d6, d6, d7
 1010dbe:	1052      	asrs	r2, r2, #1
 1010dc0:	f103 0308 	add.w	r3, r3, #8
 1010dc4:	d1f4      	bne.n	1010db0 <_dtoa_r+0x2a0>
 1010dc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 1010dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1010dcc:	b13b      	cbz	r3, 1010dde <_dtoa_r+0x2ce>
 1010dce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 1010dd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1010dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010dda:	f100 83b3 	bmi.w	1011544 <_dtoa_r+0xa34>
 1010dde:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 1010de2:	ee05 1a90 	vmov	s11, r1
 1010de6:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 1010dea:	ee05 6b07 	vmla.f64	d6, d5, d7
 1010dee:	ed8d 6b00 	vstr	d6, [sp]
 1010df2:	9b01      	ldr	r3, [sp, #4]
 1010df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 1010df8:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1010dfc:	2f00      	cmp	r7, #0
 1010dfe:	d07d      	beq.n	1010efc <_dtoa_r+0x3ec>
 1010e00:	f8dd e010 	ldr.w	lr, [sp, #16]
 1010e04:	463a      	mov	r2, r7
 1010e06:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 1010e0a:	f645 5c50 	movw	ip, #23888	; 0x5d50
 1010e0e:	ec41 0b15 	vmov	d5, r0, r1
 1010e12:	f2c0 1c05 	movt	ip, #261	; 0x105
 1010e16:	980a      	ldr	r0, [sp, #40]	; 0x28
 1010e18:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 1010e1c:	f10b 0301 	add.w	r3, fp, #1
 1010e20:	ed1c 3b02 	vldr	d3, [ip, #-8]
 1010e24:	ee16 1a90 	vmov	r1, s13
 1010e28:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 1010e2c:	ee37 7b44 	vsub.f64	d7, d7, d4
 1010e30:	3130      	adds	r1, #48	; 0x30
 1010e32:	b2c9      	uxtb	r1, r1
 1010e34:	2800      	cmp	r0, #0
 1010e36:	f000 82ae 	beq.w	1011396 <_dtoa_r+0x886>
 1010e3a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 1010e3e:	f88b 1000 	strb.w	r1, [fp]
 1010e42:	ee84 6b03 	vdiv.f64	d6, d4, d3
 1010e46:	ee36 6b45 	vsub.f64	d6, d6, d5
 1010e4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1010e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010e52:	dc3e      	bgt.n	1010ed2 <_dtoa_r+0x3c2>
 1010e54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 1010e58:	ee32 5b47 	vsub.f64	d5, d2, d7
 1010e5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 1010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010e64:	f300 8473 	bgt.w	101174e <_dtoa_r+0xc3e>
 1010e68:	2a01      	cmp	r2, #1
 1010e6a:	d05b      	beq.n	1010f24 <_dtoa_r+0x414>
 1010e6c:	445a      	add	r2, fp
 1010e6e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 1010e72:	e019      	b.n	1010ea8 <_dtoa_r+0x398>
 1010e74:	f3af 8000 	nop.w
 1010e78:	636f4361 	.word	0x636f4361
 1010e7c:	3fd287a7 	.word	0x3fd287a7
 1010e80:	8b60c8b3 	.word	0x8b60c8b3
 1010e84:	3fc68a28 	.word	0x3fc68a28
 1010e88:	509f79fb 	.word	0x509f79fb
 1010e8c:	3fd34413 	.word	0x3fd34413
 1010e90:	010582d9 	.word	0x010582d9
 1010e94:	ee32 5b47 	vsub.f64	d5, d2, d7
 1010e98:	eeb4 5bc6 	vcmpe.f64	d5, d6
 1010e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010ea0:	f100 8455 	bmi.w	101174e <_dtoa_r+0xc3e>
 1010ea4:	4293      	cmp	r3, r2
 1010ea6:	d03d      	beq.n	1010f24 <_dtoa_r+0x414>
 1010ea8:	ee27 5b04 	vmul.f64	d5, d7, d4
 1010eac:	ee26 6b04 	vmul.f64	d6, d6, d4
 1010eb0:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 1010eb4:	ee17 1a90 	vmov	r1, s15
 1010eb8:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 1010ebc:	ee35 7b43 	vsub.f64	d7, d5, d3
 1010ec0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1010ec4:	3130      	adds	r1, #48	; 0x30
 1010ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010eca:	b2c9      	uxtb	r1, r1
 1010ecc:	f803 1b01 	strb.w	r1, [r3], #1
 1010ed0:	d5e0      	bpl.n	1010e94 <_dtoa_r+0x384>
 1010ed2:	465e      	mov	r6, fp
 1010ed4:	f10e 0201 	add.w	r2, lr, #1
 1010ed8:	469b      	mov	fp, r3
 1010eda:	9204      	str	r2, [sp, #16]
 1010edc:	e0e3      	b.n	10110a6 <_dtoa_r+0x596>
 1010ede:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 1010ee2:	ee06 1a90 	vmov	s13, r1
 1010ee6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1010eea:	ee06 5b07 	vmla.f64	d5, d6, d7
 1010eee:	ed8d 5b00 	vstr	d5, [sp]
 1010ef2:	9b01      	ldr	r3, [sp, #4]
 1010ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 1010ef8:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1010efc:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 1010f00:	ec41 0b15 	vmov	d5, r0, r1
 1010f04:	ee37 7b46 	vsub.f64	d7, d7, d6
 1010f08:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1010f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010f10:	f300 8345 	bgt.w	101159e <_dtoa_r+0xa8e>
 1010f14:	eeb1 5b45 	vneg.f64	d5, d5
 1010f18:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1010f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010f20:	f100 8171 	bmi.w	1011206 <_dtoa_r+0x6f6>
 1010f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1010f28:	e9cd 2300 	strd	r2, r3, [sp]
 1010f2c:	9a04      	ldr	r2, [sp, #16]
 1010f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1010f30:	4611      	mov	r1, r2
 1010f32:	290e      	cmp	r1, #14
 1010f34:	ea6f 0203 	mvn.w	r2, r3
 1010f38:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 1010f3c:	bfc8      	it	gt
 1010f3e:	2200      	movgt	r2, #0
 1010f40:	2a00      	cmp	r2, #0
 1010f42:	f040 814a 	bne.w	10111da <_dtoa_r+0x6ca>
 1010f46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 1010f48:	2a00      	cmp	r2, #0
 1010f4a:	f000 8182 	beq.w	1011252 <_dtoa_r+0x742>
 1010f4e:	f1ba 0f01 	cmp.w	sl, #1
 1010f52:	f340 8316 	ble.w	1011582 <_dtoa_r+0xa72>
 1010f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010f58:	1e7a      	subs	r2, r7, #1
 1010f5a:	4293      	cmp	r3, r2
 1010f5c:	bfaf      	iteee	ge
 1010f5e:	1a9b      	subge	r3, r3, r2
 1010f60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 1010f62:	920b      	strlt	r2, [sp, #44]	; 0x2c
 1010f64:	1ad3      	sublt	r3, r2, r3
 1010f66:	bfbc      	itt	lt
 1010f68:	18ed      	addlt	r5, r5, r3
 1010f6a:	2300      	movlt	r3, #0
 1010f6c:	2f00      	cmp	r7, #0
 1010f6e:	9302      	str	r3, [sp, #8]
 1010f70:	bfa5      	ittet	ge
 1010f72:	19f6      	addge	r6, r6, r7
 1010f74:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 1010f76:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 1010f78:	930c      	strge	r3, [sp, #48]	; 0x30
 1010f7a:	bfb5      	itete	lt
 1010f7c:	1bdb      	sublt	r3, r3, r7
 1010f7e:	19db      	addge	r3, r3, r7
 1010f80:	930c      	strlt	r3, [sp, #48]	; 0x30
 1010f82:	9309      	strge	r3, [sp, #36]	; 0x24
 1010f84:	2101      	movs	r1, #1
 1010f86:	4620      	mov	r0, r4
 1010f88:	f001 fc0c 	bl	10127a4 <__i2b>
 1010f8c:	4681      	mov	r9, r0
 1010f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1010f90:	2a00      	cmp	r2, #0
 1010f92:	bfc8      	it	gt
 1010f94:	2e00      	cmpgt	r6, #0
 1010f96:	dd09      	ble.n	1010fac <_dtoa_r+0x49c>
 1010f98:	42b2      	cmp	r2, r6
 1010f9a:	4613      	mov	r3, r2
 1010f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 1010f9e:	bfa8      	it	ge
 1010fa0:	4633      	movge	r3, r6
 1010fa2:	1af6      	subs	r6, r6, r3
 1010fa4:	1ac9      	subs	r1, r1, r3
 1010fa6:	1ad2      	subs	r2, r2, r3
 1010fa8:	9109      	str	r1, [sp, #36]	; 0x24
 1010faa:	920c      	str	r2, [sp, #48]	; 0x30
 1010fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010fae:	b163      	cbz	r3, 1010fca <_dtoa_r+0x4ba>
 1010fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1010fb2:	2b00      	cmp	r3, #0
 1010fb4:	f000 810a 	beq.w	10111cc <_dtoa_r+0x6bc>
 1010fb8:	9b02      	ldr	r3, [sp, #8]
 1010fba:	2b00      	cmp	r3, #0
 1010fbc:	f300 8294 	bgt.w	10114e8 <_dtoa_r+0x9d8>
 1010fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010fc2:	9a02      	ldr	r2, [sp, #8]
 1010fc4:	1a9a      	subs	r2, r3, r2
 1010fc6:	f040 8102 	bne.w	10111ce <_dtoa_r+0x6be>
 1010fca:	2101      	movs	r1, #1
 1010fcc:	4620      	mov	r0, r4
 1010fce:	f001 fbe9 	bl	10127a4 <__i2b>
 1010fd2:	2d00      	cmp	r5, #0
 1010fd4:	9002      	str	r0, [sp, #8]
 1010fd6:	f300 8174 	bgt.w	10112c2 <_dtoa_r+0x7b2>
 1010fda:	f1ba 0f01 	cmp.w	sl, #1
 1010fde:	f340 82a5 	ble.w	101152c <_dtoa_r+0xa1c>
 1010fe2:	2300      	movs	r3, #0
 1010fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 1010fe6:	2001      	movs	r0, #1
 1010fe8:	2d00      	cmp	r5, #0
 1010fea:	f040 8176 	bne.w	10112da <_dtoa_r+0x7ca>
 1010fee:	4430      	add	r0, r6
 1010ff0:	f010 001f 	ands.w	r0, r0, #31
 1010ff4:	f000 8134 	beq.w	1011260 <_dtoa_r+0x750>
 1010ff8:	f1c0 0320 	rsb	r3, r0, #32
 1010ffc:	2b04      	cmp	r3, #4
 1010ffe:	f340 83fe 	ble.w	10117fe <_dtoa_r+0xcee>
 1011002:	f1c0 001c 	rsb	r0, r0, #28
 1011006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1011008:	4406      	add	r6, r0
 101100a:	4403      	add	r3, r0
 101100c:	9309      	str	r3, [sp, #36]	; 0x24
 101100e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1011010:	4403      	add	r3, r0
 1011012:	930c      	str	r3, [sp, #48]	; 0x30
 1011014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1011016:	2b00      	cmp	r3, #0
 1011018:	dd05      	ble.n	1011026 <_dtoa_r+0x516>
 101101a:	4641      	mov	r1, r8
 101101c:	461a      	mov	r2, r3
 101101e:	4620      	mov	r0, r4
 1011020:	f001 fcbc 	bl	101299c <__lshift>
 1011024:	4680      	mov	r8, r0
 1011026:	2e00      	cmp	r6, #0
 1011028:	dd05      	ble.n	1011036 <_dtoa_r+0x526>
 101102a:	4632      	mov	r2, r6
 101102c:	9902      	ldr	r1, [sp, #8]
 101102e:	4620      	mov	r0, r4
 1011030:	f001 fcb4 	bl	101299c <__lshift>
 1011034:	9002      	str	r0, [sp, #8]
 1011036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1011038:	f1ba 0f02 	cmp.w	sl, #2
 101103c:	bfd4      	ite	le
 101103e:	2500      	movle	r5, #0
 1011040:	2501      	movgt	r5, #1
 1011042:	2b00      	cmp	r3, #0
 1011044:	f040 8153 	bne.w	10112ee <_dtoa_r+0x7de>
 1011048:	2f00      	cmp	r7, #0
 101104a:	bfcc      	ite	gt
 101104c:	2500      	movgt	r5, #0
 101104e:	f005 0501 	andle.w	r5, r5, #1
 1011052:	2d00      	cmp	r5, #0
 1011054:	d03c      	beq.n	10110d0 <_dtoa_r+0x5c0>
 1011056:	2f00      	cmp	r7, #0
 1011058:	f040 80d8 	bne.w	101120c <_dtoa_r+0x6fc>
 101105c:	463b      	mov	r3, r7
 101105e:	9902      	ldr	r1, [sp, #8]
 1011060:	2205      	movs	r2, #5
 1011062:	4620      	mov	r0, r4
 1011064:	f001 fabc 	bl	10125e0 <__multadd>
 1011068:	4601      	mov	r1, r0
 101106a:	9002      	str	r0, [sp, #8]
 101106c:	4640      	mov	r0, r8
 101106e:	f001 fcf3 	bl	1012a58 <__mcmp>
 1011072:	2800      	cmp	r0, #0
 1011074:	f340 80ca 	ble.w	101120c <_dtoa_r+0x6fc>
 1011078:	9a04      	ldr	r2, [sp, #16]
 101107a:	465b      	mov	r3, fp
 101107c:	465e      	mov	r6, fp
 101107e:	f102 0a01 	add.w	sl, r2, #1
 1011082:	2231      	movs	r2, #49	; 0x31
 1011084:	f803 2b01 	strb.w	r2, [r3], #1
 1011088:	469b      	mov	fp, r3
 101108a:	9902      	ldr	r1, [sp, #8]
 101108c:	4620      	mov	r0, r4
 101108e:	f10a 0301 	add.w	r3, sl, #1
 1011092:	9304      	str	r3, [sp, #16]
 1011094:	f001 fa9a 	bl	10125cc <_Bfree>
 1011098:	f1b9 0f00 	cmp.w	r9, #0
 101109c:	d003      	beq.n	10110a6 <_dtoa_r+0x596>
 101109e:	4649      	mov	r1, r9
 10110a0:	4620      	mov	r0, r4
 10110a2:	f001 fa93 	bl	10125cc <_Bfree>
 10110a6:	4641      	mov	r1, r8
 10110a8:	4620      	mov	r0, r4
 10110aa:	f001 fa8f 	bl	10125cc <_Bfree>
 10110ae:	2300      	movs	r3, #0
 10110b0:	f88b 3000 	strb.w	r3, [fp]
 10110b4:	9b07      	ldr	r3, [sp, #28]
 10110b6:	461a      	mov	r2, r3
 10110b8:	9b04      	ldr	r3, [sp, #16]
 10110ba:	6013      	str	r3, [r2, #0]
 10110bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 10110be:	2b00      	cmp	r3, #0
 10110c0:	f43f ad63 	beq.w	1010b8a <_dtoa_r+0x7a>
 10110c4:	4630      	mov	r0, r6
 10110c6:	f8c3 b000 	str.w	fp, [r3]
 10110ca:	b013      	add	sp, #76	; 0x4c
 10110cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10110d0:	9b04      	ldr	r3, [sp, #16]
 10110d2:	3301      	adds	r3, #1
 10110d4:	9304      	str	r3, [sp, #16]
 10110d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 10110d8:	2b00      	cmp	r3, #0
 10110da:	f000 818e 	beq.w	10113fa <_dtoa_r+0x8ea>
 10110de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 10110e0:	2b00      	cmp	r3, #0
 10110e2:	dd05      	ble.n	10110f0 <_dtoa_r+0x5e0>
 10110e4:	4649      	mov	r1, r9
 10110e6:	461a      	mov	r2, r3
 10110e8:	4620      	mov	r0, r4
 10110ea:	f001 fc57 	bl	101299c <__lshift>
 10110ee:	4681      	mov	r9, r0
 10110f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10110f2:	2b00      	cmp	r3, #0
 10110f4:	f040 8315 	bne.w	1011722 <_dtoa_r+0xc12>
 10110f8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 10110fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 1011100:	f10b 33ff 	add.w	r3, fp, #4294967295
 1011104:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 1011108:	443b      	add	r3, r7
 101110a:	9a00      	ldr	r2, [sp, #0]
 101110c:	465f      	mov	r7, fp
 101110e:	930b      	str	r3, [sp, #44]	; 0x2c
 1011110:	f002 0201 	and.w	r2, r2, #1
 1011114:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 1011118:	9208      	str	r2, [sp, #32]
 101111a:	9d02      	ldr	r5, [sp, #8]
 101111c:	4640      	mov	r0, r8
 101111e:	4629      	mov	r1, r5
 1011120:	f7ff fc52 	bl	10109c8 <quorem>
 1011124:	4649      	mov	r1, r9
 1011126:	4683      	mov	fp, r0
 1011128:	4640      	mov	r0, r8
 101112a:	f001 fc95 	bl	1012a58 <__mcmp>
 101112e:	4629      	mov	r1, r5
 1011130:	4652      	mov	r2, sl
 1011132:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 1011136:	9300      	str	r3, [sp, #0]
 1011138:	4606      	mov	r6, r0
 101113a:	4620      	mov	r0, r4
 101113c:	f001 fcaa 	bl	1012a94 <__mdiff>
 1011140:	68c3      	ldr	r3, [r0, #12]
 1011142:	4605      	mov	r5, r0
 1011144:	4601      	mov	r1, r0
 1011146:	2b00      	cmp	r3, #0
 1011148:	f040 81e1 	bne.w	101150e <_dtoa_r+0x9fe>
 101114c:	4640      	mov	r0, r8
 101114e:	f001 fc83 	bl	1012a58 <__mcmp>
 1011152:	4629      	mov	r1, r5
 1011154:	900a      	str	r0, [sp, #40]	; 0x28
 1011156:	4620      	mov	r0, r4
 1011158:	f001 fa38 	bl	10125cc <_Bfree>
 101115c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101115e:	9908      	ldr	r1, [sp, #32]
 1011160:	461a      	mov	r2, r3
 1011162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1011164:	431a      	orrs	r2, r3
 1011166:	430a      	orrs	r2, r1
 1011168:	f000 8321 	beq.w	10117ae <_dtoa_r+0xc9e>
 101116c:	2e00      	cmp	r6, #0
 101116e:	f107 0501 	add.w	r5, r7, #1
 1011172:	f2c0 82ae 	blt.w	10116d2 <_dtoa_r+0xbc2>
 1011176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1011178:	4316      	orrs	r6, r2
 101117a:	9a08      	ldr	r2, [sp, #32]
 101117c:	4332      	orrs	r2, r6
 101117e:	f000 82a8 	beq.w	10116d2 <_dtoa_r+0xbc2>
 1011182:	2b00      	cmp	r3, #0
 1011184:	f300 82e8 	bgt.w	1011758 <_dtoa_r+0xc48>
 1011188:	9b00      	ldr	r3, [sp, #0]
 101118a:	703b      	strb	r3, [r7, #0]
 101118c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101118e:	42bb      	cmp	r3, r7
 1011190:	f000 82f0 	beq.w	1011774 <_dtoa_r+0xc64>
 1011194:	4641      	mov	r1, r8
 1011196:	2300      	movs	r3, #0
 1011198:	220a      	movs	r2, #10
 101119a:	4620      	mov	r0, r4
 101119c:	f001 fa20 	bl	10125e0 <__multadd>
 10111a0:	45d1      	cmp	r9, sl
 10111a2:	4649      	mov	r1, r9
 10111a4:	f04f 0300 	mov.w	r3, #0
 10111a8:	f04f 020a 	mov.w	r2, #10
 10111ac:	4680      	mov	r8, r0
 10111ae:	4620      	mov	r0, r4
 10111b0:	f000 81b2 	beq.w	1011518 <_dtoa_r+0xa08>
 10111b4:	f001 fa14 	bl	10125e0 <__multadd>
 10111b8:	4651      	mov	r1, sl
 10111ba:	2300      	movs	r3, #0
 10111bc:	220a      	movs	r2, #10
 10111be:	462f      	mov	r7, r5
 10111c0:	4681      	mov	r9, r0
 10111c2:	4620      	mov	r0, r4
 10111c4:	f001 fa0c 	bl	10125e0 <__multadd>
 10111c8:	4682      	mov	sl, r0
 10111ca:	e7a6      	b.n	101111a <_dtoa_r+0x60a>
 10111cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 10111ce:	4641      	mov	r1, r8
 10111d0:	4620      	mov	r0, r4
 10111d2:	f001 fb91 	bl	10128f8 <__pow5mult>
 10111d6:	4680      	mov	r8, r0
 10111d8:	e6f7      	b.n	1010fca <_dtoa_r+0x4ba>
 10111da:	f645 5350 	movw	r3, #23888	; 0x5d50
 10111de:	f2c0 1305 	movt	r3, #261	; 0x105
 10111e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 10111e6:	2f00      	cmp	r7, #0
 10111e8:	460a      	mov	r2, r1
 10111ea:	ed93 5b00 	vldr	d5, [r3]
 10111ee:	bfc8      	it	gt
 10111f0:	2200      	movgt	r2, #0
 10111f2:	9b08      	ldr	r3, [sp, #32]
 10111f4:	bfd8      	it	le
 10111f6:	2201      	movle	r2, #1
 10111f8:	ea12 73d3 	ands.w	r3, r2, r3, lsr #31
 10111fc:	f000 81ed 	beq.w	10115da <_dtoa_r+0xaca>
 1011200:	2f00      	cmp	r7, #0
 1011202:	f000 814a 	beq.w	101149a <_dtoa_r+0x98a>
 1011206:	2300      	movs	r3, #0
 1011208:	9302      	str	r3, [sp, #8]
 101120a:	4699      	mov	r9, r3
 101120c:	9b08      	ldr	r3, [sp, #32]
 101120e:	465e      	mov	r6, fp
 1011210:	ea6f 0a03 	mvn.w	sl, r3
 1011214:	e739      	b.n	101108a <_dtoa_r+0x57a>
 1011216:	2e00      	cmp	r6, #0
 1011218:	f04f 0301 	mov.w	r3, #1
 101121c:	930d      	str	r3, [sp, #52]	; 0x34
 101121e:	bfa4      	itt	ge
 1011220:	2300      	movge	r3, #0
 1011222:	9309      	strge	r3, [sp, #36]	; 0x24
 1011224:	f6bf ad2a 	bge.w	1010c7c <_dtoa_r+0x16c>
 1011228:	f1cb 0301 	rsb	r3, fp, #1
 101122c:	2600      	movs	r6, #0
 101122e:	9309      	str	r3, [sp, #36]	; 0x24
 1011230:	e524      	b.n	1010c7c <_dtoa_r+0x16c>
 1011232:	f248 26d8 	movw	r6, #33496	; 0x82d8
 1011236:	f2c0 1605 	movt	r6, #261	; 0x105
 101123a:	4630      	mov	r0, r6
 101123c:	b013      	add	sp, #76	; 0x4c
 101123e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1011242:	9a00      	ldr	r2, [sp, #0]
 1011244:	f1c3 0320 	rsb	r3, r3, #32
 1011248:	fa02 f303 	lsl.w	r3, r2, r3
 101124c:	ee07 3a90 	vmov	s15, r3
 1011250:	e4c0      	b.n	1010bd4 <_dtoa_r+0xc4>
 1011252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011254:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1011258:	9302      	str	r3, [sp, #8]
 101125a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101125c:	930c      	str	r3, [sp, #48]	; 0x30
 101125e:	e696      	b.n	1010f8e <_dtoa_r+0x47e>
 1011260:	201c      	movs	r0, #28
 1011262:	e6d0      	b.n	1011006 <_dtoa_r+0x4f6>
 1011264:	f000 8115 	beq.w	1011492 <_dtoa_r+0x982>
 1011268:	9b04      	ldr	r3, [sp, #16]
 101126a:	f645 5250 	movw	r2, #23888	; 0x5d50
 101126e:	f2c0 1205 	movt	r2, #261	; 0x105
 1011272:	ed9d 7b02 	vldr	d7, [sp, #8]
 1011276:	425b      	negs	r3, r3
 1011278:	f003 010f 	and.w	r1, r3, #15
 101127c:	111b      	asrs	r3, r3, #4
 101127e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 1011282:	ed92 5b00 	vldr	d5, [r2]
 1011286:	ee27 5b05 	vmul.f64	d5, d7, d5
 101128a:	f000 82ad 	beq.w	10117e8 <_dtoa_r+0xcd8>
 101128e:	f645 6240 	movw	r2, #24128	; 0x5e40
 1011292:	f2c0 1205 	movt	r2, #261	; 0x105
 1011296:	2000      	movs	r0, #0
 1011298:	2102      	movs	r1, #2
 101129a:	eeb0 7b45 	vmov.f64	d7, d5
 101129e:	f013 0f01 	tst.w	r3, #1
 10112a2:	d005      	beq.n	10112b0 <_dtoa_r+0x7a0>
 10112a4:	ed92 6b00 	vldr	d6, [r2]
 10112a8:	3101      	adds	r1, #1
 10112aa:	4648      	mov	r0, r9
 10112ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 10112b0:	105b      	asrs	r3, r3, #1
 10112b2:	f102 0208 	add.w	r2, r2, #8
 10112b6:	d1f2      	bne.n	101129e <_dtoa_r+0x78e>
 10112b8:	2800      	cmp	r0, #0
 10112ba:	bf08      	it	eq
 10112bc:	eeb0 7b45 	vmoveq.f64	d7, d5
 10112c0:	e583      	b.n	1010dca <_dtoa_r+0x2ba>
 10112c2:	4601      	mov	r1, r0
 10112c4:	462a      	mov	r2, r5
 10112c6:	4620      	mov	r0, r4
 10112c8:	f001 fb16 	bl	10128f8 <__pow5mult>
 10112cc:	f1ba 0f01 	cmp.w	sl, #1
 10112d0:	9002      	str	r0, [sp, #8]
 10112d2:	f340 80f1 	ble.w	10114b8 <_dtoa_r+0x9a8>
 10112d6:	2300      	movs	r3, #0
 10112d8:	930b      	str	r3, [sp, #44]	; 0x2c
 10112da:	9a02      	ldr	r2, [sp, #8]
 10112dc:	6913      	ldr	r3, [r2, #16]
 10112de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 10112e2:	6918      	ldr	r0, [r3, #16]
 10112e4:	f001 fa10 	bl	1012708 <__hi0bits>
 10112e8:	f1c0 0020 	rsb	r0, r0, #32
 10112ec:	e67f      	b.n	1010fee <_dtoa_r+0x4de>
 10112ee:	9902      	ldr	r1, [sp, #8]
 10112f0:	4640      	mov	r0, r8
 10112f2:	f001 fbb1 	bl	1012a58 <__mcmp>
 10112f6:	2800      	cmp	r0, #0
 10112f8:	f6bf aea6 	bge.w	1011048 <_dtoa_r+0x538>
 10112fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 10112fe:	2300      	movs	r3, #0
 1011300:	4641      	mov	r1, r8
 1011302:	220a      	movs	r2, #10
 1011304:	4620      	mov	r0, r4
 1011306:	429e      	cmp	r6, r3
 1011308:	bfcc      	ite	gt
 101130a:	2500      	movgt	r5, #0
 101130c:	f005 0501 	andle.w	r5, r5, #1
 1011310:	f001 f966 	bl	10125e0 <__multadd>
 1011314:	9b04      	ldr	r3, [sp, #16]
 1011316:	1e5e      	subs	r6, r3, #1
 1011318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101131a:	4680      	mov	r8, r0
 101131c:	2b00      	cmp	r3, #0
 101131e:	f040 8252 	bne.w	10117c6 <_dtoa_r+0xcb6>
 1011322:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 1011324:	2d00      	cmp	r5, #0
 1011326:	d068      	beq.n	10113fa <_dtoa_r+0x8ea>
 1011328:	9604      	str	r6, [sp, #16]
 101132a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 101132c:	e693      	b.n	1011056 <_dtoa_r+0x546>
 101132e:	ed9d 5b00 	vldr	d5, [sp]
 1011332:	2102      	movs	r1, #2
 1011334:	e537      	b.n	1010da6 <_dtoa_r+0x296>
 1011336:	2301      	movs	r3, #1
 1011338:	930a      	str	r3, [sp, #40]	; 0x28
 101133a:	9b08      	ldr	r3, [sp, #32]
 101133c:	2b00      	cmp	r3, #0
 101133e:	f340 80f1 	ble.w	1011524 <_dtoa_r+0xa14>
 1011342:	461f      	mov	r7, r3
 1011344:	461a      	mov	r2, r3
 1011346:	930e      	str	r3, [sp, #56]	; 0x38
 1011348:	2f0e      	cmp	r7, #14
 101134a:	bf8c      	ite	hi
 101134c:	f04f 0900 	movhi.w	r9, #0
 1011350:	f009 0901 	andls.w	r9, r9, #1
 1011354:	2a17      	cmp	r2, #23
 1011356:	f04f 0100 	mov.w	r1, #0
 101135a:	6461      	str	r1, [r4, #68]	; 0x44
 101135c:	f77f acfb 	ble.w	1010d56 <_dtoa_r+0x246>
 1011360:	2304      	movs	r3, #4
 1011362:	005b      	lsls	r3, r3, #1
 1011364:	3101      	adds	r1, #1
 1011366:	f103 0014 	add.w	r0, r3, #20
 101136a:	4290      	cmp	r0, r2
 101136c:	d9f9      	bls.n	1011362 <_dtoa_r+0x852>
 101136e:	6461      	str	r1, [r4, #68]	; 0x44
 1011370:	e4f1      	b.n	1010d56 <_dtoa_r+0x246>
 1011372:	2301      	movs	r3, #1
 1011374:	930a      	str	r3, [sp, #40]	; 0x28
 1011376:	9a04      	ldr	r2, [sp, #16]
 1011378:	9b08      	ldr	r3, [sp, #32]
 101137a:	4413      	add	r3, r2
 101137c:	930e      	str	r3, [sp, #56]	; 0x38
 101137e:	1c5f      	adds	r7, r3, #1
 1011380:	2f01      	cmp	r7, #1
 1011382:	463a      	mov	r2, r7
 1011384:	bfb8      	it	lt
 1011386:	2201      	movlt	r2, #1
 1011388:	e7de      	b.n	1011348 <_dtoa_r+0x838>
 101138a:	2300      	movs	r3, #0
 101138c:	930a      	str	r3, [sp, #40]	; 0x28
 101138e:	e7f2      	b.n	1011376 <_dtoa_r+0x866>
 1011390:	2300      	movs	r3, #0
 1011392:	930a      	str	r3, [sp, #40]	; 0x28
 1011394:	e7d1      	b.n	101133a <_dtoa_r+0x82a>
 1011396:	2a01      	cmp	r2, #1
 1011398:	ee25 3b03 	vmul.f64	d3, d5, d3
 101139c:	f88b 1000 	strb.w	r1, [fp]
 10113a0:	d011      	beq.n	10113c6 <_dtoa_r+0x8b6>
 10113a2:	445a      	add	r2, fp
 10113a4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 10113a8:	ee27 6b04 	vmul.f64	d6, d7, d4
 10113ac:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 10113b0:	ee17 1a90 	vmov	r1, s15
 10113b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 10113b8:	ee36 7b45 	vsub.f64	d7, d6, d5
 10113bc:	3130      	adds	r1, #48	; 0x30
 10113be:	f803 1b01 	strb.w	r1, [r3], #1
 10113c2:	4293      	cmp	r3, r2
 10113c4:	d1f0      	bne.n	10113a8 <_dtoa_r+0x898>
 10113c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 10113ca:	ee33 5b06 	vadd.f64	d5, d3, d6
 10113ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 10113d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10113d6:	f100 819d 	bmi.w	1011714 <_dtoa_r+0xc04>
 10113da:	ee36 6b43 	vsub.f64	d6, d6, d3
 10113de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 10113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10113e6:	f77f ad9d 	ble.w	1010f24 <_dtoa_r+0x414>
 10113ea:	e000      	b.n	10113ee <_dtoa_r+0x8de>
 10113ec:	460b      	mov	r3, r1
 10113ee:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 10113f2:	1e59      	subs	r1, r3, #1
 10113f4:	2a30      	cmp	r2, #48	; 0x30
 10113f6:	d0f9      	beq.n	10113ec <_dtoa_r+0x8dc>
 10113f8:	e56b      	b.n	1010ed2 <_dtoa_r+0x3c2>
 10113fa:	465d      	mov	r5, fp
 10113fc:	2601      	movs	r6, #1
 10113fe:	f8dd a008 	ldr.w	sl, [sp, #8]
 1011402:	e002      	b.n	101140a <_dtoa_r+0x8fa>
 1011404:	f001 f8ec 	bl	10125e0 <__multadd>
 1011408:	4680      	mov	r8, r0
 101140a:	4651      	mov	r1, sl
 101140c:	4640      	mov	r0, r8
 101140e:	f7ff fadb 	bl	10109c8 <quorem>
 1011412:	42be      	cmp	r6, r7
 1011414:	f04f 0300 	mov.w	r3, #0
 1011418:	f04f 020a 	mov.w	r2, #10
 101141c:	4641      	mov	r1, r8
 101141e:	f106 0601 	add.w	r6, r6, #1
 1011422:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 1011426:	4620      	mov	r0, r4
 1011428:	f805 cb01 	strb.w	ip, [r5], #1
 101142c:	dbea      	blt.n	1011404 <_dtoa_r+0x8f4>
 101142e:	2600      	movs	r6, #0
 1011430:	f8cd c000 	str.w	ip, [sp]
 1011434:	4641      	mov	r1, r8
 1011436:	2201      	movs	r2, #1
 1011438:	4620      	mov	r0, r4
 101143a:	f001 faaf 	bl	101299c <__lshift>
 101143e:	9902      	ldr	r1, [sp, #8]
 1011440:	4680      	mov	r8, r0
 1011442:	f001 fb09 	bl	1012a58 <__mcmp>
 1011446:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 101144a:	2800      	cmp	r0, #0
 101144c:	f340 8118 	ble.w	1011680 <_dtoa_r+0xb70>
 1011450:	1e6b      	subs	r3, r5, #1
 1011452:	e004      	b.n	101145e <_dtoa_r+0x94e>
 1011454:	459b      	cmp	fp, r3
 1011456:	f000 8124 	beq.w	10116a2 <_dtoa_r+0xb92>
 101145a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 101145e:	2a39      	cmp	r2, #57	; 0x39
 1011460:	f103 0501 	add.w	r5, r3, #1
 1011464:	d0f6      	beq.n	1011454 <_dtoa_r+0x944>
 1011466:	3201      	adds	r2, #1
 1011468:	701a      	strb	r2, [r3, #0]
 101146a:	9902      	ldr	r1, [sp, #8]
 101146c:	4620      	mov	r0, r4
 101146e:	f001 f8ad 	bl	10125cc <_Bfree>
 1011472:	f1b9 0f00 	cmp.w	r9, #0
 1011476:	f000 8111 	beq.w	101169c <_dtoa_r+0xb8c>
 101147a:	2e00      	cmp	r6, #0
 101147c:	bf18      	it	ne
 101147e:	454e      	cmpne	r6, r9
 1011480:	f000 81b7 	beq.w	10117f2 <_dtoa_r+0xce2>
 1011484:	4631      	mov	r1, r6
 1011486:	4620      	mov	r0, r4
 1011488:	465e      	mov	r6, fp
 101148a:	f001 f89f 	bl	10125cc <_Bfree>
 101148e:	46ab      	mov	fp, r5
 1011490:	e605      	b.n	101109e <_dtoa_r+0x58e>
 1011492:	ed9d 7b00 	vldr	d7, [sp]
 1011496:	2102      	movs	r1, #2
 1011498:	e497      	b.n	1010dca <_dtoa_r+0x2ba>
 101149a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 101149e:	9702      	str	r7, [sp, #8]
 10114a0:	46b9      	mov	r9, r7
 10114a2:	ee25 5b07 	vmul.f64	d5, d5, d7
 10114a6:	ed9d 7b00 	vldr	d7, [sp]
 10114aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 10114ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10114b2:	f6bf aeab 	bge.w	101120c <_dtoa_r+0x6fc>
 10114b6:	e5df      	b.n	1011078 <_dtoa_r+0x568>
 10114b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 10114bc:	2900      	cmp	r1, #0
 10114be:	f47f af0a 	bne.w	10112d6 <_dtoa_r+0x7c6>
 10114c2:	f3c2 0313 	ubfx	r3, r2, #0, #20
 10114c6:	2b00      	cmp	r3, #0
 10114c8:	f040 8196 	bne.w	10117f8 <_dtoa_r+0xce8>
 10114cc:	2300      	movs	r3, #0
 10114ce:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 10114d2:	4013      	ands	r3, r2
 10114d4:	2b00      	cmp	r3, #0
 10114d6:	f000 8152 	beq.w	101177e <_dtoa_r+0xc6e>
 10114da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10114dc:	3601      	adds	r6, #1
 10114de:	3301      	adds	r3, #1
 10114e0:	9309      	str	r3, [sp, #36]	; 0x24
 10114e2:	2301      	movs	r3, #1
 10114e4:	930b      	str	r3, [sp, #44]	; 0x2c
 10114e6:	e57e      	b.n	1010fe6 <_dtoa_r+0x4d6>
 10114e8:	461a      	mov	r2, r3
 10114ea:	4649      	mov	r1, r9
 10114ec:	4620      	mov	r0, r4
 10114ee:	f001 fa03 	bl	10128f8 <__pow5mult>
 10114f2:	4642      	mov	r2, r8
 10114f4:	4601      	mov	r1, r0
 10114f6:	4681      	mov	r9, r0
 10114f8:	4620      	mov	r0, r4
 10114fa:	f001 f95d 	bl	10127b8 <__multiply>
 10114fe:	4641      	mov	r1, r8
 1011500:	900f      	str	r0, [sp, #60]	; 0x3c
 1011502:	4620      	mov	r0, r4
 1011504:	f001 f862 	bl	10125cc <_Bfree>
 1011508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 101150a:	4698      	mov	r8, r3
 101150c:	e558      	b.n	1010fc0 <_dtoa_r+0x4b0>
 101150e:	4620      	mov	r0, r4
 1011510:	f001 f85c 	bl	10125cc <_Bfree>
 1011514:	2301      	movs	r3, #1
 1011516:	e629      	b.n	101116c <_dtoa_r+0x65c>
 1011518:	f001 f862 	bl	10125e0 <__multadd>
 101151c:	462f      	mov	r7, r5
 101151e:	4681      	mov	r9, r0
 1011520:	4682      	mov	sl, r0
 1011522:	e5fa      	b.n	101111a <_dtoa_r+0x60a>
 1011524:	2301      	movs	r3, #1
 1011526:	9308      	str	r3, [sp, #32]
 1011528:	461f      	mov	r7, r3
 101152a:	e411      	b.n	1010d50 <_dtoa_r+0x240>
 101152c:	e9dd 1200 	ldrd	r1, r2, [sp]
 1011530:	2900      	cmp	r1, #0
 1011532:	f47f ad56 	bne.w	1010fe2 <_dtoa_r+0x4d2>
 1011536:	f3c2 0313 	ubfx	r3, r2, #0, #20
 101153a:	2b00      	cmp	r3, #0
 101153c:	d0c6      	beq.n	10114cc <_dtoa_r+0x9bc>
 101153e:	9b00      	ldr	r3, [sp, #0]
 1011540:	930b      	str	r3, [sp, #44]	; 0x2c
 1011542:	e550      	b.n	1010fe6 <_dtoa_r+0x4d6>
 1011544:	2f00      	cmp	r7, #0
 1011546:	f43f acca 	beq.w	1010ede <_dtoa_r+0x3ce>
 101154a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 101154c:	2a00      	cmp	r2, #0
 101154e:	f77f ace9 	ble.w	1010f24 <_dtoa_r+0x414>
 1011552:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 1011556:	3101      	adds	r1, #1
 1011558:	9b04      	ldr	r3, [sp, #16]
 101155a:	f103 3eff 	add.w	lr, r3, #4294967295
 101155e:	ee27 7b06 	vmul.f64	d7, d7, d6
 1011562:	ee06 1a90 	vmov	s13, r1
 1011566:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 101156a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 101156e:	ee06 5b07 	vmla.f64	d5, d6, d7
 1011572:	ed8d 5b00 	vstr	d5, [sp]
 1011576:	9b01      	ldr	r3, [sp, #4]
 1011578:	e9dd 0100 	ldrd	r0, r1, [sp]
 101157c:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1011580:	e441      	b.n	1010e06 <_dtoa_r+0x2f6>
 1011582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1011584:	2a00      	cmp	r2, #0
 1011586:	f000 8099 	beq.w	10116bc <_dtoa_r+0xbac>
 101158a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101158c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 1011590:	441e      	add	r6, r3
 1011592:	18d3      	adds	r3, r2, r3
 1011594:	9309      	str	r3, [sp, #36]	; 0x24
 1011596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011598:	920c      	str	r2, [sp, #48]	; 0x30
 101159a:	9302      	str	r3, [sp, #8]
 101159c:	e4f2      	b.n	1010f84 <_dtoa_r+0x474>
 101159e:	2300      	movs	r3, #0
 10115a0:	9302      	str	r3, [sp, #8]
 10115a2:	4699      	mov	r9, r3
 10115a4:	e568      	b.n	1011078 <_dtoa_r+0x568>
 10115a6:	2100      	movs	r1, #0
 10115a8:	4620      	mov	r0, r4
 10115aa:	6461      	str	r1, [r4, #68]	; 0x44
 10115ac:	f000 ffe8 	bl	1012580 <_Balloc>
 10115b0:	9a04      	ldr	r2, [sp, #16]
 10115b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10115b4:	2a0e      	cmp	r2, #14
 10115b6:	4683      	mov	fp, r0
 10115b8:	6420      	str	r0, [r4, #64]	; 0x40
 10115ba:	f300 8126 	bgt.w	101180a <_dtoa_r+0xcfa>
 10115be:	2b00      	cmp	r3, #0
 10115c0:	f2c0 8123 	blt.w	101180a <_dtoa_r+0xcfa>
 10115c4:	9a04      	ldr	r2, [sp, #16]
 10115c6:	f645 5350 	movw	r3, #23888	; 0x5d50
 10115ca:	f2c0 1305 	movt	r3, #261	; 0x105
 10115ce:	f04f 37ff 	mov.w	r7, #4294967295
 10115d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 10115d6:	ed93 5b00 	vldr	d5, [r3]
 10115da:	9a04      	ldr	r2, [sp, #16]
 10115dc:	2f01      	cmp	r7, #1
 10115de:	465b      	mov	r3, fp
 10115e0:	ed9d 7b00 	vldr	d7, [sp]
 10115e4:	f102 0201 	add.w	r2, r2, #1
 10115e8:	9204      	str	r2, [sp, #16]
 10115ea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 10115ee:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 10115f2:	ee16 2a10 	vmov	r2, s12
 10115f6:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 10115fa:	ee04 7b45 	vmls.f64	d7, d4, d5
 10115fe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1011602:	f803 2b01 	strb.w	r2, [r3], #1
 1011606:	d022      	beq.n	101164e <_dtoa_r+0xb3e>
 1011608:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 101160c:	ee27 7b03 	vmul.f64	d7, d7, d3
 1011610:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1011614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011618:	d079      	beq.n	101170e <_dtoa_r+0xbfe>
 101161a:	2201      	movs	r2, #1
 101161c:	e006      	b.n	101162c <_dtoa_r+0xb1c>
 101161e:	ee27 7b03 	vmul.f64	d7, d7, d3
 1011622:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1011626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101162a:	d070      	beq.n	101170e <_dtoa_r+0xbfe>
 101162c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 1011630:	3201      	adds	r2, #1
 1011632:	42ba      	cmp	r2, r7
 1011634:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 1011638:	ee16 1a10 	vmov	r1, s12
 101163c:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 1011640:	ee04 7b45 	vmls.f64	d7, d4, d5
 1011644:	f101 0130 	add.w	r1, r1, #48	; 0x30
 1011648:	f803 1b01 	strb.w	r1, [r3], #1
 101164c:	d1e7      	bne.n	101161e <_dtoa_r+0xb0e>
 101164e:	ee37 7b07 	vadd.f64	d7, d7, d7
 1011652:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101165a:	f340 8098 	ble.w	101178e <_dtoa_r+0xc7e>
 101165e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1011662:	465e      	mov	r6, fp
 1011664:	3b01      	subs	r3, #1
 1011666:	e003      	b.n	1011670 <_dtoa_r+0xb60>
 1011668:	429e      	cmp	r6, r3
 101166a:	d021      	beq.n	10116b0 <_dtoa_r+0xba0>
 101166c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 1011670:	2939      	cmp	r1, #57	; 0x39
 1011672:	f103 0b01 	add.w	fp, r3, #1
 1011676:	d0f7      	beq.n	1011668 <_dtoa_r+0xb58>
 1011678:	1c4a      	adds	r2, r1, #1
 101167a:	b2d2      	uxtb	r2, r2
 101167c:	701a      	strb	r2, [r3, #0]
 101167e:	e512      	b.n	10110a6 <_dtoa_r+0x596>
 1011680:	d103      	bne.n	101168a <_dtoa_r+0xb7a>
 1011682:	9b00      	ldr	r3, [sp, #0]
 1011684:	07db      	lsls	r3, r3, #31
 1011686:	f53f aee3 	bmi.w	1011450 <_dtoa_r+0x940>
 101168a:	1e6b      	subs	r3, r5, #1
 101168c:	e001      	b.n	1011692 <_dtoa_r+0xb82>
 101168e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 1011692:	2a30      	cmp	r2, #48	; 0x30
 1011694:	f103 0501 	add.w	r5, r3, #1
 1011698:	d0f9      	beq.n	101168e <_dtoa_r+0xb7e>
 101169a:	e6e6      	b.n	101146a <_dtoa_r+0x95a>
 101169c:	465e      	mov	r6, fp
 101169e:	46ab      	mov	fp, r5
 10116a0:	e501      	b.n	10110a6 <_dtoa_r+0x596>
 10116a2:	9b04      	ldr	r3, [sp, #16]
 10116a4:	3301      	adds	r3, #1
 10116a6:	9304      	str	r3, [sp, #16]
 10116a8:	2331      	movs	r3, #49	; 0x31
 10116aa:	f88b 3000 	strb.w	r3, [fp]
 10116ae:	e6dc      	b.n	101146a <_dtoa_r+0x95a>
 10116b0:	9a04      	ldr	r2, [sp, #16]
 10116b2:	3201      	adds	r2, #1
 10116b4:	9204      	str	r2, [sp, #16]
 10116b6:	2231      	movs	r2, #49	; 0x31
 10116b8:	701a      	strb	r2, [r3, #0]
 10116ba:	e4f4      	b.n	10110a6 <_dtoa_r+0x596>
 10116bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10116be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10116c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10116c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 10116c6:	920c      	str	r2, [sp, #48]	; 0x30
 10116c8:	441e      	add	r6, r3
 10116ca:	18d3      	adds	r3, r2, r3
 10116cc:	9102      	str	r1, [sp, #8]
 10116ce:	9309      	str	r3, [sp, #36]	; 0x24
 10116d0:	e458      	b.n	1010f84 <_dtoa_r+0x474>
 10116d2:	2b00      	cmp	r3, #0
 10116d4:	465e      	mov	r6, fp
 10116d6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 10116da:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 10116de:	dd10      	ble.n	1011702 <_dtoa_r+0xbf2>
 10116e0:	4641      	mov	r1, r8
 10116e2:	2201      	movs	r2, #1
 10116e4:	4620      	mov	r0, r4
 10116e6:	f001 f959 	bl	101299c <__lshift>
 10116ea:	9902      	ldr	r1, [sp, #8]
 10116ec:	4680      	mov	r8, r0
 10116ee:	f001 f9b3 	bl	1012a58 <__mcmp>
 10116f2:	2800      	cmp	r0, #0
 10116f4:	dd73      	ble.n	10117de <_dtoa_r+0xcce>
 10116f6:	9b00      	ldr	r3, [sp, #0]
 10116f8:	2b39      	cmp	r3, #57	; 0x39
 10116fa:	d042      	beq.n	1011782 <_dtoa_r+0xc72>
 10116fc:	4633      	mov	r3, r6
 10116fe:	3331      	adds	r3, #49	; 0x31
 1011700:	9300      	str	r3, [sp, #0]
 1011702:	9b00      	ldr	r3, [sp, #0]
 1011704:	464e      	mov	r6, r9
 1011706:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 101170a:	703b      	strb	r3, [r7, #0]
 101170c:	e6ad      	b.n	101146a <_dtoa_r+0x95a>
 101170e:	465e      	mov	r6, fp
 1011710:	469b      	mov	fp, r3
 1011712:	e4c8      	b.n	10110a6 <_dtoa_r+0x596>
 1011714:	f10e 0201 	add.w	r2, lr, #1
 1011718:	465e      	mov	r6, fp
 101171a:	9204      	str	r2, [sp, #16]
 101171c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1011720:	e7a0      	b.n	1011664 <_dtoa_r+0xb54>
 1011722:	f8d9 1004 	ldr.w	r1, [r9, #4]
 1011726:	4620      	mov	r0, r4
 1011728:	f000 ff2a 	bl	1012580 <_Balloc>
 101172c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 1011730:	f109 010c 	add.w	r1, r9, #12
 1011734:	3302      	adds	r3, #2
 1011736:	009a      	lsls	r2, r3, #2
 1011738:	4605      	mov	r5, r0
 101173a:	300c      	adds	r0, #12
 101173c:	f7fa e9e0 	blx	100bb00 <memcpy>
 1011740:	4629      	mov	r1, r5
 1011742:	2201      	movs	r2, #1
 1011744:	4620      	mov	r0, r4
 1011746:	f001 f929 	bl	101299c <__lshift>
 101174a:	900a      	str	r0, [sp, #40]	; 0x28
 101174c:	e4d6      	b.n	10110fc <_dtoa_r+0x5ec>
 101174e:	f10e 0201 	add.w	r2, lr, #1
 1011752:	465e      	mov	r6, fp
 1011754:	9204      	str	r2, [sp, #16]
 1011756:	e785      	b.n	1011664 <_dtoa_r+0xb54>
 1011758:	9b00      	ldr	r3, [sp, #0]
 101175a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 101175e:	2b39      	cmp	r3, #57	; 0x39
 1011760:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1011764:	d00d      	beq.n	1011782 <_dtoa_r+0xc72>
 1011766:	9b00      	ldr	r3, [sp, #0]
 1011768:	464e      	mov	r6, r9
 101176a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 101176e:	3301      	adds	r3, #1
 1011770:	703b      	strb	r3, [r7, #0]
 1011772:	e67a      	b.n	101146a <_dtoa_r+0x95a>
 1011774:	464e      	mov	r6, r9
 1011776:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 101177a:	46d1      	mov	r9, sl
 101177c:	e65a      	b.n	1011434 <_dtoa_r+0x924>
 101177e:	930b      	str	r3, [sp, #44]	; 0x2c
 1011780:	e431      	b.n	1010fe6 <_dtoa_r+0x4d6>
 1011782:	2239      	movs	r2, #57	; 0x39
 1011784:	464e      	mov	r6, r9
 1011786:	703a      	strb	r2, [r7, #0]
 1011788:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 101178c:	e660      	b.n	1011450 <_dtoa_r+0x940>
 101178e:	eeb4 7b45 	vcmp.f64	d7, d5
 1011792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011796:	d1ba      	bne.n	101170e <_dtoa_r+0xbfe>
 1011798:	ee16 2a10 	vmov	r2, s12
 101179c:	465e      	mov	r6, fp
 101179e:	07d1      	lsls	r1, r2, #31
 10117a0:	bf48      	it	mi
 10117a2:	f813 1c01 	ldrbmi.w	r1, [r3, #-1]
 10117a6:	f53f af5d 	bmi.w	1011664 <_dtoa_r+0xb54>
 10117aa:	469b      	mov	fp, r3
 10117ac:	e47b      	b.n	10110a6 <_dtoa_r+0x596>
 10117ae:	9a00      	ldr	r2, [sp, #0]
 10117b0:	465b      	mov	r3, fp
 10117b2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 10117b6:	1c7d      	adds	r5, r7, #1
 10117b8:	2a39      	cmp	r2, #57	; 0x39
 10117ba:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 10117be:	d0e0      	beq.n	1011782 <_dtoa_r+0xc72>
 10117c0:	2e00      	cmp	r6, #0
 10117c2:	dc9c      	bgt.n	10116fe <_dtoa_r+0xbee>
 10117c4:	e79d      	b.n	1011702 <_dtoa_r+0xbf2>
 10117c6:	4649      	mov	r1, r9
 10117c8:	2300      	movs	r3, #0
 10117ca:	220a      	movs	r2, #10
 10117cc:	4620      	mov	r0, r4
 10117ce:	f000 ff07 	bl	10125e0 <__multadd>
 10117d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 10117d4:	4681      	mov	r9, r0
 10117d6:	2d00      	cmp	r5, #0
 10117d8:	f43f ac81 	beq.w	10110de <_dtoa_r+0x5ce>
 10117dc:	e5a4      	b.n	1011328 <_dtoa_r+0x818>
 10117de:	d190      	bne.n	1011702 <_dtoa_r+0xbf2>
 10117e0:	9b00      	ldr	r3, [sp, #0]
 10117e2:	07da      	lsls	r2, r3, #31
 10117e4:	d58d      	bpl.n	1011702 <_dtoa_r+0xbf2>
 10117e6:	e786      	b.n	10116f6 <_dtoa_r+0xbe6>
 10117e8:	eeb0 7b45 	vmov.f64	d7, d5
 10117ec:	2102      	movs	r1, #2
 10117ee:	f7ff baec 	b.w	1010dca <_dtoa_r+0x2ba>
 10117f2:	465e      	mov	r6, fp
 10117f4:	46ab      	mov	fp, r5
 10117f6:	e452      	b.n	101109e <_dtoa_r+0x58e>
 10117f8:	9b00      	ldr	r3, [sp, #0]
 10117fa:	930b      	str	r3, [sp, #44]	; 0x2c
 10117fc:	e56d      	b.n	10112da <_dtoa_r+0x7ca>
 10117fe:	f43f ac09 	beq.w	1011014 <_dtoa_r+0x504>
 1011802:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 1011806:	f7ff bbfe 	b.w	1011006 <_dtoa_r+0x4f6>
 101180a:	2200      	movs	r2, #0
 101180c:	f04f 37ff 	mov.w	r7, #4294967295
 1011810:	9208      	str	r2, [sp, #32]
 1011812:	2201      	movs	r2, #1
 1011814:	970e      	str	r7, [sp, #56]	; 0x38
 1011816:	920a      	str	r2, [sp, #40]	; 0x28
 1011818:	f7ff bb99 	b.w	1010f4e <_dtoa_r+0x43e>

0101181c <__sflush_r>:
 101181c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 1011820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1011824:	460c      	mov	r4, r1
 1011826:	b29a      	uxth	r2, r3
 1011828:	4680      	mov	r8, r0
 101182a:	0711      	lsls	r1, r2, #28
 101182c:	d446      	bmi.n	10118bc <__sflush_r+0xa0>
 101182e:	6862      	ldr	r2, [r4, #4]
 1011830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1011834:	81a3      	strh	r3, [r4, #12]
 1011836:	2a00      	cmp	r2, #0
 1011838:	dd5b      	ble.n	10118f2 <__sflush_r+0xd6>
 101183a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 101183c:	2d00      	cmp	r5, #0
 101183e:	d055      	beq.n	10118ec <__sflush_r+0xd0>
 1011840:	b29b      	uxth	r3, r3
 1011842:	2200      	movs	r2, #0
 1011844:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 1011848:	f8d8 6000 	ldr.w	r6, [r8]
 101184c:	69e1      	ldr	r1, [r4, #28]
 101184e:	f8c8 2000 	str.w	r2, [r8]
 1011852:	bf18      	it	ne
 1011854:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 1011856:	d109      	bne.n	101186c <__sflush_r+0x50>
 1011858:	2301      	movs	r3, #1
 101185a:	463a      	mov	r2, r7
 101185c:	4640      	mov	r0, r8
 101185e:	47a8      	blx	r5
 1011860:	1c43      	adds	r3, r0, #1
 1011862:	4602      	mov	r2, r0
 1011864:	d049      	beq.n	10118fa <__sflush_r+0xde>
 1011866:	89a3      	ldrh	r3, [r4, #12]
 1011868:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 101186a:	69e1      	ldr	r1, [r4, #28]
 101186c:	075f      	lsls	r7, r3, #29
 101186e:	d505      	bpl.n	101187c <__sflush_r+0x60>
 1011870:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1011872:	6860      	ldr	r0, [r4, #4]
 1011874:	1a12      	subs	r2, r2, r0
 1011876:	b10b      	cbz	r3, 101187c <__sflush_r+0x60>
 1011878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 101187a:	1ad2      	subs	r2, r2, r3
 101187c:	2300      	movs	r3, #0
 101187e:	4640      	mov	r0, r8
 1011880:	47a8      	blx	r5
 1011882:	1c45      	adds	r5, r0, #1
 1011884:	d04d      	beq.n	1011922 <__sflush_r+0x106>
 1011886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101188a:	2100      	movs	r1, #0
 101188c:	6922      	ldr	r2, [r4, #16]
 101188e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 1011892:	6061      	str	r1, [r4, #4]
 1011894:	81a3      	strh	r3, [r4, #12]
 1011896:	6022      	str	r2, [r4, #0]
 1011898:	04da      	lsls	r2, r3, #19
 101189a:	d500      	bpl.n	101189e <__sflush_r+0x82>
 101189c:	6520      	str	r0, [r4, #80]	; 0x50
 101189e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 10118a0:	f8c8 6000 	str.w	r6, [r8]
 10118a4:	b311      	cbz	r1, 10118ec <__sflush_r+0xd0>
 10118a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 10118aa:	4299      	cmp	r1, r3
 10118ac:	d002      	beq.n	10118b4 <__sflush_r+0x98>
 10118ae:	4640      	mov	r0, r8
 10118b0:	f000 f9e6 	bl	1011c80 <_free_r>
 10118b4:	2000      	movs	r0, #0
 10118b6:	6320      	str	r0, [r4, #48]	; 0x30
 10118b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10118bc:	6926      	ldr	r6, [r4, #16]
 10118be:	b1ae      	cbz	r6, 10118ec <__sflush_r+0xd0>
 10118c0:	0791      	lsls	r1, r2, #30
 10118c2:	6825      	ldr	r5, [r4, #0]
 10118c4:	6026      	str	r6, [r4, #0]
 10118c6:	bf0c      	ite	eq
 10118c8:	6963      	ldreq	r3, [r4, #20]
 10118ca:	2300      	movne	r3, #0
 10118cc:	1bad      	subs	r5, r5, r6
 10118ce:	60a3      	str	r3, [r4, #8]
 10118d0:	e00a      	b.n	10118e8 <__sflush_r+0xcc>
 10118d2:	462b      	mov	r3, r5
 10118d4:	4632      	mov	r2, r6
 10118d6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 10118d8:	4640      	mov	r0, r8
 10118da:	69e1      	ldr	r1, [r4, #28]
 10118dc:	47b8      	blx	r7
 10118de:	2800      	cmp	r0, #0
 10118e0:	eba5 0500 	sub.w	r5, r5, r0
 10118e4:	4406      	add	r6, r0
 10118e6:	dd14      	ble.n	1011912 <__sflush_r+0xf6>
 10118e8:	2d00      	cmp	r5, #0
 10118ea:	dcf2      	bgt.n	10118d2 <__sflush_r+0xb6>
 10118ec:	2000      	movs	r0, #0
 10118ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10118f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 10118f4:	2a00      	cmp	r2, #0
 10118f6:	dca0      	bgt.n	101183a <__sflush_r+0x1e>
 10118f8:	e7f8      	b.n	10118ec <__sflush_r+0xd0>
 10118fa:	f8d8 3000 	ldr.w	r3, [r8]
 10118fe:	2b00      	cmp	r3, #0
 1011900:	d0b1      	beq.n	1011866 <__sflush_r+0x4a>
 1011902:	2b16      	cmp	r3, #22
 1011904:	bf18      	it	ne
 1011906:	2b1d      	cmpne	r3, #29
 1011908:	bf04      	itt	eq
 101190a:	f8c8 6000 	streq.w	r6, [r8]
 101190e:	4638      	moveq	r0, r7
 1011910:	d0ed      	beq.n	10118ee <__sflush_r+0xd2>
 1011912:	89a3      	ldrh	r3, [r4, #12]
 1011914:	f04f 30ff 	mov.w	r0, #4294967295
 1011918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 101191c:	81a3      	strh	r3, [r4, #12]
 101191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1011922:	f8d8 5000 	ldr.w	r5, [r8]
 1011926:	2d1d      	cmp	r5, #29
 1011928:	bf88      	it	hi
 101192a:	f9b4 200c 	ldrshhi.w	r2, [r4, #12]
 101192e:	d905      	bls.n	101193c <__sflush_r+0x120>
 1011930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1011934:	f04f 30ff 	mov.w	r0, #4294967295
 1011938:	81a2      	strh	r2, [r4, #12]
 101193a:	e7d8      	b.n	10118ee <__sflush_r+0xd2>
 101193c:	2301      	movs	r3, #1
 101193e:	f2c2 0340 	movt	r3, #8256	; 0x2040
 1011942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1011946:	40eb      	lsrs	r3, r5
 1011948:	43db      	mvns	r3, r3
 101194a:	f013 0301 	ands.w	r3, r3, #1
 101194e:	d1ef      	bne.n	1011930 <__sflush_r+0x114>
 1011950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 1011954:	6921      	ldr	r1, [r4, #16]
 1011956:	6063      	str	r3, [r4, #4]
 1011958:	04d3      	lsls	r3, r2, #19
 101195a:	81a2      	strh	r2, [r4, #12]
 101195c:	6021      	str	r1, [r4, #0]
 101195e:	d59e      	bpl.n	101189e <__sflush_r+0x82>
 1011960:	2d00      	cmp	r5, #0
 1011962:	d19c      	bne.n	101189e <__sflush_r+0x82>
 1011964:	e79a      	b.n	101189c <__sflush_r+0x80>
 1011966:	bf00      	nop

01011968 <_fflush_r>:
 1011968:	b510      	push	{r4, lr}
 101196a:	4604      	mov	r4, r0
 101196c:	b082      	sub	sp, #8
 101196e:	b108      	cbz	r0, 1011974 <_fflush_r+0xc>
 1011970:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1011972:	b123      	cbz	r3, 101197e <_fflush_r+0x16>
 1011974:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 1011978:	b948      	cbnz	r0, 101198e <_fflush_r+0x26>
 101197a:	b002      	add	sp, #8
 101197c:	bd10      	pop	{r4, pc}
 101197e:	9101      	str	r1, [sp, #4]
 1011980:	f000 f904 	bl	1011b8c <__sinit>
 1011984:	9901      	ldr	r1, [sp, #4]
 1011986:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 101198a:	2800      	cmp	r0, #0
 101198c:	d0f5      	beq.n	101197a <_fflush_r+0x12>
 101198e:	4620      	mov	r0, r4
 1011990:	b002      	add	sp, #8
 1011992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1011996:	f7ff bf41 	b.w	101181c <__sflush_r>
 101199a:	bf00      	nop

0101199c <fflush>:
 101199c:	b138      	cbz	r0, 10119ae <fflush+0x12>
 101199e:	f248 7358 	movw	r3, #34648	; 0x8758
 10119a2:	f2c0 1305 	movt	r3, #261	; 0x105
 10119a6:	4601      	mov	r1, r0
 10119a8:	6818      	ldr	r0, [r3, #0]
 10119aa:	f7ff bfdd 	b.w	1011968 <_fflush_r>
 10119ae:	f645 13e0 	movw	r3, #23008	; 0x59e0
 10119b2:	f2c0 1305 	movt	r3, #261	; 0x105
 10119b6:	f641 1169 	movw	r1, #6505	; 0x1969
 10119ba:	f2c0 1101 	movt	r1, #257	; 0x101
 10119be:	6818      	ldr	r0, [r3, #0]
 10119c0:	f000 bc10 	b.w	10121e4 <_fwalk_reent>

010119c4 <__fp_lock>:
 10119c4:	2000      	movs	r0, #0
 10119c6:	4770      	bx	lr

010119c8 <_cleanup_r>:
 10119c8:	f245 41e1 	movw	r1, #21729	; 0x54e1
 10119cc:	f2c0 1101 	movt	r1, #257	; 0x101
 10119d0:	f000 bc08 	b.w	10121e4 <_fwalk_reent>

010119d4 <__sinit.part.0>:
 10119d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10119d8:	2400      	movs	r4, #0
 10119da:	6845      	ldr	r5, [r0, #4]
 10119dc:	4607      	mov	r7, r0
 10119de:	2203      	movs	r2, #3
 10119e0:	4621      	mov	r1, r4
 10119e2:	f8c0 22e4 	str.w	r2, [r0, #740]	; 0x2e4
 10119e6:	f641 13c9 	movw	r3, #6601	; 0x19c9
 10119ea:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 10119ee:	f2c0 1301 	movt	r3, #257	; 0x101
 10119f2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 10119f6:	2208      	movs	r2, #8
 10119f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 10119fa:	2304      	movs	r3, #4
 10119fc:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 1011a00:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 1011a04:	60eb      	str	r3, [r5, #12]
 1011a06:	f243 3b19 	movw	fp, #13081	; 0x3319
 1011a0a:	666c      	str	r4, [r5, #100]	; 0x64
 1011a0c:	f2c0 1b01 	movt	fp, #257	; 0x101
 1011a10:	602c      	str	r4, [r5, #0]
 1011a12:	f243 3a41 	movw	sl, #13121	; 0x3341
 1011a16:	606c      	str	r4, [r5, #4]
 1011a18:	f2c0 1a01 	movt	sl, #257	; 0x101
 1011a1c:	60ac      	str	r4, [r5, #8]
 1011a1e:	f243 3981 	movw	r9, #13185	; 0x3381
 1011a22:	612c      	str	r4, [r5, #16]
 1011a24:	f2c0 1901 	movt	r9, #257	; 0x101
 1011a28:	616c      	str	r4, [r5, #20]
 1011a2a:	f243 38a1 	movw	r8, #13217	; 0x33a1
 1011a2e:	61ac      	str	r4, [r5, #24]
 1011a30:	f2c0 1801 	movt	r8, #257	; 0x101
 1011a34:	f7fa fb54 	bl	100c0e0 <memset>
 1011a38:	68be      	ldr	r6, [r7, #8]
 1011a3a:	4621      	mov	r1, r4
 1011a3c:	61ed      	str	r5, [r5, #28]
 1011a3e:	f8c5 b020 	str.w	fp, [r5, #32]
 1011a42:	2208      	movs	r2, #8
 1011a44:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 1011a48:	2309      	movs	r3, #9
 1011a4a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 1011a4e:	f2c0 0301 	movt	r3, #1
 1011a52:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 1011a56:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 1011a5a:	60f3      	str	r3, [r6, #12]
 1011a5c:	6674      	str	r4, [r6, #100]	; 0x64
 1011a5e:	e9c6 4400 	strd	r4, r4, [r6]
 1011a62:	60b4      	str	r4, [r6, #8]
 1011a64:	e9c6 4404 	strd	r4, r4, [r6, #16]
 1011a68:	61b4      	str	r4, [r6, #24]
 1011a6a:	f7fa fb39 	bl	100c0e0 <memset>
 1011a6e:	68fd      	ldr	r5, [r7, #12]
 1011a70:	4621      	mov	r1, r4
 1011a72:	61f6      	str	r6, [r6, #28]
 1011a74:	f8c6 b020 	str.w	fp, [r6, #32]
 1011a78:	2312      	movs	r3, #18
 1011a7a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 1011a7e:	f2c0 0302 	movt	r3, #2
 1011a82:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 1011a86:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 1011a8a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 1011a8e:	2208      	movs	r2, #8
 1011a90:	60eb      	str	r3, [r5, #12]
 1011a92:	666c      	str	r4, [r5, #100]	; 0x64
 1011a94:	e9c5 4400 	strd	r4, r4, [r5]
 1011a98:	60ac      	str	r4, [r5, #8]
 1011a9a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 1011a9e:	61ac      	str	r4, [r5, #24]
 1011aa0:	f7fa fb1e 	bl	100c0e0 <memset>
 1011aa4:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 1011aa8:	2301      	movs	r3, #1
 1011aaa:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 1011aae:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 1011ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 1011ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

01011ab8 <__fp_unlock>:
 1011ab8:	2000      	movs	r0, #0
 1011aba:	4770      	bx	lr

01011abc <__sfmoreglue>:
 1011abc:	1e4a      	subs	r2, r1, #1
 1011abe:	b570      	push	{r4, r5, r6, lr}
 1011ac0:	2568      	movs	r5, #104	; 0x68
 1011ac2:	fb05 f502 	mul.w	r5, r5, r2
 1011ac6:	460e      	mov	r6, r1
 1011ac8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 1011acc:	f7f9 fb04 	bl	100b0d8 <_malloc_r>
 1011ad0:	4604      	mov	r4, r0
 1011ad2:	b140      	cbz	r0, 1011ae6 <__sfmoreglue+0x2a>
 1011ad4:	300c      	adds	r0, #12
 1011ad6:	2100      	movs	r1, #0
 1011ad8:	6066      	str	r6, [r4, #4]
 1011ada:	f105 0268 	add.w	r2, r5, #104	; 0x68
 1011ade:	60a0      	str	r0, [r4, #8]
 1011ae0:	6021      	str	r1, [r4, #0]
 1011ae2:	f7fa fafd 	bl	100c0e0 <memset>
 1011ae6:	4620      	mov	r0, r4
 1011ae8:	bd70      	pop	{r4, r5, r6, pc}
 1011aea:	bf00      	nop

01011aec <__sfp>:
 1011aec:	f645 13e0 	movw	r3, #23008	; 0x59e0
 1011af0:	f2c0 1305 	movt	r3, #261	; 0x105
 1011af4:	b570      	push	{r4, r5, r6, lr}
 1011af6:	4606      	mov	r6, r0
 1011af8:	681d      	ldr	r5, [r3, #0]
 1011afa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1011afc:	b353      	cbz	r3, 1011b54 <__sfp+0x68>
 1011afe:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 1011b02:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 1011b06:	3b01      	subs	r3, #1
 1011b08:	d504      	bpl.n	1011b14 <__sfp+0x28>
 1011b0a:	e01f      	b.n	1011b4c <__sfp+0x60>
 1011b0c:	3b01      	subs	r3, #1
 1011b0e:	3468      	adds	r4, #104	; 0x68
 1011b10:	1c5a      	adds	r2, r3, #1
 1011b12:	d01b      	beq.n	1011b4c <__sfp+0x60>
 1011b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1011b18:	2a00      	cmp	r2, #0
 1011b1a:	d1f7      	bne.n	1011b0c <__sfp+0x20>
 1011b1c:	2500      	movs	r5, #0
 1011b1e:	2301      	movs	r3, #1
 1011b20:	6665      	str	r5, [r4, #100]	; 0x64
 1011b22:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 1011b26:	6025      	str	r5, [r4, #0]
 1011b28:	4629      	mov	r1, r5
 1011b2a:	60e3      	str	r3, [r4, #12]
 1011b2c:	2208      	movs	r2, #8
 1011b2e:	6065      	str	r5, [r4, #4]
 1011b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 1011b34:	60a5      	str	r5, [r4, #8]
 1011b36:	e9c4 5504 	strd	r5, r5, [r4, #16]
 1011b3a:	61a5      	str	r5, [r4, #24]
 1011b3c:	f7fa fad0 	bl	100c0e0 <memset>
 1011b40:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 1011b44:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 1011b48:	4620      	mov	r0, r4
 1011b4a:	bd70      	pop	{r4, r5, r6, pc}
 1011b4c:	6828      	ldr	r0, [r5, #0]
 1011b4e:	b128      	cbz	r0, 1011b5c <__sfp+0x70>
 1011b50:	4605      	mov	r5, r0
 1011b52:	e7d6      	b.n	1011b02 <__sfp+0x16>
 1011b54:	4628      	mov	r0, r5
 1011b56:	f7ff ff3d 	bl	10119d4 <__sinit.part.0>
 1011b5a:	e7d0      	b.n	1011afe <__sfp+0x12>
 1011b5c:	2104      	movs	r1, #4
 1011b5e:	4630      	mov	r0, r6
 1011b60:	f7ff ffac 	bl	1011abc <__sfmoreglue>
 1011b64:	6028      	str	r0, [r5, #0]
 1011b66:	2800      	cmp	r0, #0
 1011b68:	d1f2      	bne.n	1011b50 <__sfp+0x64>
 1011b6a:	230c      	movs	r3, #12
 1011b6c:	4604      	mov	r4, r0
 1011b6e:	6033      	str	r3, [r6, #0]
 1011b70:	e7ea      	b.n	1011b48 <__sfp+0x5c>
 1011b72:	bf00      	nop

01011b74 <_cleanup>:
 1011b74:	f645 13e0 	movw	r3, #23008	; 0x59e0
 1011b78:	f2c0 1305 	movt	r3, #261	; 0x105
 1011b7c:	f245 41e1 	movw	r1, #21729	; 0x54e1
 1011b80:	f2c0 1101 	movt	r1, #257	; 0x101
 1011b84:	6818      	ldr	r0, [r3, #0]
 1011b86:	f000 bb2d 	b.w	10121e4 <_fwalk_reent>
 1011b8a:	bf00      	nop

01011b8c <__sinit>:
 1011b8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1011b8e:	b103      	cbz	r3, 1011b92 <__sinit+0x6>
 1011b90:	4770      	bx	lr
 1011b92:	e71f      	b.n	10119d4 <__sinit.part.0>

01011b94 <__sfp_lock_acquire>:
 1011b94:	4770      	bx	lr
 1011b96:	bf00      	nop

01011b98 <__sfp_lock_release>:
 1011b98:	4770      	bx	lr
 1011b9a:	bf00      	nop

01011b9c <__sinit_lock_acquire>:
 1011b9c:	4770      	bx	lr
 1011b9e:	bf00      	nop

01011ba0 <__sinit_lock_release>:
 1011ba0:	4770      	bx	lr
 1011ba2:	bf00      	nop

01011ba4 <__fp_lock_all>:
 1011ba4:	f248 7358 	movw	r3, #34648	; 0x8758
 1011ba8:	f2c0 1305 	movt	r3, #261	; 0x105
 1011bac:	f641 11c5 	movw	r1, #6597	; 0x19c5
 1011bb0:	f2c0 1101 	movt	r1, #257	; 0x101
 1011bb4:	6818      	ldr	r0, [r3, #0]
 1011bb6:	f000 baf1 	b.w	101219c <_fwalk>
 1011bba:	bf00      	nop

01011bbc <__fp_unlock_all>:
 1011bbc:	f248 7358 	movw	r3, #34648	; 0x8758
 1011bc0:	f2c0 1305 	movt	r3, #261	; 0x105
 1011bc4:	f641 21b9 	movw	r1, #6841	; 0x1ab9
 1011bc8:	f2c0 1101 	movt	r1, #257	; 0x101
 1011bcc:	6818      	ldr	r0, [r3, #0]
 1011bce:	f000 bae5 	b.w	101219c <_fwalk>
 1011bd2:	bf00      	nop

01011bd4 <_malloc_trim_r>:
 1011bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1011bd6:	f648 5714 	movw	r7, #36116	; 0x8d14
 1011bda:	f2c0 1705 	movt	r7, #261	; 0x105
 1011bde:	460c      	mov	r4, r1
 1011be0:	4606      	mov	r6, r0
 1011be2:	f7fa facd 	bl	100c180 <__malloc_lock>
 1011be6:	68bb      	ldr	r3, [r7, #8]
 1011be8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 1011bec:	310f      	adds	r1, #15
 1011bee:	685d      	ldr	r5, [r3, #4]
 1011bf0:	f025 0503 	bic.w	r5, r5, #3
 1011bf4:	4429      	add	r1, r5
 1011bf6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 1011bfa:	f021 010f 	bic.w	r1, r1, #15
 1011bfe:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 1011c02:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 1011c06:	db07      	blt.n	1011c18 <_malloc_trim_r+0x44>
 1011c08:	2100      	movs	r1, #0
 1011c0a:	4630      	mov	r0, r6
 1011c0c:	f7fa fb1e 	bl	100c24c <_sbrk_r>
 1011c10:	68bb      	ldr	r3, [r7, #8]
 1011c12:	442b      	add	r3, r5
 1011c14:	4298      	cmp	r0, r3
 1011c16:	d004      	beq.n	1011c22 <_malloc_trim_r+0x4e>
 1011c18:	4630      	mov	r0, r6
 1011c1a:	f7fa fab3 	bl	100c184 <__malloc_unlock>
 1011c1e:	2000      	movs	r0, #0
 1011c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1011c22:	4261      	negs	r1, r4
 1011c24:	4630      	mov	r0, r6
 1011c26:	f7fa fb11 	bl	100c24c <_sbrk_r>
 1011c2a:	3001      	adds	r0, #1
 1011c2c:	d010      	beq.n	1011c50 <_malloc_trim_r+0x7c>
 1011c2e:	68ba      	ldr	r2, [r7, #8]
 1011c30:	f240 23f8 	movw	r3, #760	; 0x2f8
 1011c34:	f2c0 1306 	movt	r3, #262	; 0x106
 1011c38:	1b2d      	subs	r5, r5, r4
 1011c3a:	4630      	mov	r0, r6
 1011c3c:	f045 0501 	orr.w	r5, r5, #1
 1011c40:	6819      	ldr	r1, [r3, #0]
 1011c42:	6055      	str	r5, [r2, #4]
 1011c44:	1b09      	subs	r1, r1, r4
 1011c46:	6019      	str	r1, [r3, #0]
 1011c48:	f7fa fa9c 	bl	100c184 <__malloc_unlock>
 1011c4c:	2001      	movs	r0, #1
 1011c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1011c50:	2100      	movs	r1, #0
 1011c52:	4630      	mov	r0, r6
 1011c54:	f7fa fafa 	bl	100c24c <_sbrk_r>
 1011c58:	68ba      	ldr	r2, [r7, #8]
 1011c5a:	1a83      	subs	r3, r0, r2
 1011c5c:	2b0f      	cmp	r3, #15
 1011c5e:	dddb      	ble.n	1011c18 <_malloc_trim_r+0x44>
 1011c60:	f249 141c 	movw	r4, #37148	; 0x911c
 1011c64:	f2c0 1405 	movt	r4, #261	; 0x105
 1011c68:	f240 21f8 	movw	r1, #760	; 0x2f8
 1011c6c:	f2c0 1106 	movt	r1, #262	; 0x106
 1011c70:	6824      	ldr	r4, [r4, #0]
 1011c72:	f043 0301 	orr.w	r3, r3, #1
 1011c76:	6053      	str	r3, [r2, #4]
 1011c78:	1b00      	subs	r0, r0, r4
 1011c7a:	6008      	str	r0, [r1, #0]
 1011c7c:	e7cc      	b.n	1011c18 <_malloc_trim_r+0x44>
 1011c7e:	bf00      	nop

01011c80 <_free_r>:
 1011c80:	2900      	cmp	r1, #0
 1011c82:	d060      	beq.n	1011d46 <_free_r+0xc6>
 1011c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1011c86:	460f      	mov	r7, r1
 1011c88:	4606      	mov	r6, r0
 1011c8a:	f7fa fa79 	bl	100c180 <__malloc_lock>
 1011c8e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 1011c92:	f648 5214 	movw	r2, #36116	; 0x8d14
 1011c96:	f2c0 1205 	movt	r2, #261	; 0x105
 1011c9a:	f1a7 0008 	sub.w	r0, r7, #8
 1011c9e:	f02c 0301 	bic.w	r3, ip, #1
 1011ca2:	18c4      	adds	r4, r0, r3
 1011ca4:	6891      	ldr	r1, [r2, #8]
 1011ca6:	6865      	ldr	r5, [r4, #4]
 1011ca8:	42a1      	cmp	r1, r4
 1011caa:	f025 0503 	bic.w	r5, r5, #3
 1011cae:	d07f      	beq.n	1011db0 <_free_r+0x130>
 1011cb0:	f01c 0f01 	tst.w	ip, #1
 1011cb4:	6065      	str	r5, [r4, #4]
 1011cb6:	eb04 0105 	add.w	r1, r4, r5
 1011cba:	d133      	bne.n	1011d24 <_free_r+0xa4>
 1011cbc:	f857 7c08 	ldr.w	r7, [r7, #-8]
 1011cc0:	f102 0c08 	add.w	ip, r2, #8
 1011cc4:	6849      	ldr	r1, [r1, #4]
 1011cc6:	1bc0      	subs	r0, r0, r7
 1011cc8:	443b      	add	r3, r7
 1011cca:	f001 0101 	and.w	r1, r1, #1
 1011cce:	6887      	ldr	r7, [r0, #8]
 1011cd0:	4567      	cmp	r7, ip
 1011cd2:	d061      	beq.n	1011d98 <_free_r+0x118>
 1011cd4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 1011cd8:	f8c7 e00c 	str.w	lr, [r7, #12]
 1011cdc:	f8ce 7008 	str.w	r7, [lr, #8]
 1011ce0:	2900      	cmp	r1, #0
 1011ce2:	f000 8090 	beq.w	1011e06 <_free_r+0x186>
 1011ce6:	f043 0101 	orr.w	r1, r3, #1
 1011cea:	6041      	str	r1, [r0, #4]
 1011cec:	6023      	str	r3, [r4, #0]
 1011cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1011cf2:	d231      	bcs.n	1011d58 <_free_r+0xd8>
 1011cf4:	08db      	lsrs	r3, r3, #3
 1011cf6:	2101      	movs	r1, #1
 1011cf8:	185d      	adds	r5, r3, r1
 1011cfa:	6854      	ldr	r4, [r2, #4]
 1011cfc:	109b      	asrs	r3, r3, #2
 1011cfe:	f852 7035 	ldr.w	r7, [r2, r5, lsl #3]
 1011d02:	fa01 f303 	lsl.w	r3, r1, r3
 1011d06:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 1011d0a:	4323      	orrs	r3, r4
 1011d0c:	3908      	subs	r1, #8
 1011d0e:	6053      	str	r3, [r2, #4]
 1011d10:	e9c0 7102 	strd	r7, r1, [r0, #8]
 1011d14:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
 1011d18:	60f8      	str	r0, [r7, #12]
 1011d1a:	4630      	mov	r0, r6
 1011d1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1011d20:	f7fa ba30 	b.w	100c184 <__malloc_unlock>
 1011d24:	6849      	ldr	r1, [r1, #4]
 1011d26:	07c9      	lsls	r1, r1, #31
 1011d28:	d40e      	bmi.n	1011d48 <_free_r+0xc8>
 1011d2a:	442b      	add	r3, r5
 1011d2c:	f102 0c08 	add.w	ip, r2, #8
 1011d30:	68a1      	ldr	r1, [r4, #8]
 1011d32:	f043 0501 	orr.w	r5, r3, #1
 1011d36:	4561      	cmp	r1, ip
 1011d38:	d06d      	beq.n	1011e16 <_free_r+0x196>
 1011d3a:	68e4      	ldr	r4, [r4, #12]
 1011d3c:	60cc      	str	r4, [r1, #12]
 1011d3e:	60a1      	str	r1, [r4, #8]
 1011d40:	6045      	str	r5, [r0, #4]
 1011d42:	50c3      	str	r3, [r0, r3]
 1011d44:	e7d3      	b.n	1011cee <_free_r+0x6e>
 1011d46:	4770      	bx	lr
 1011d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1011d4c:	f043 0101 	orr.w	r1, r3, #1
 1011d50:	f847 1c04 	str.w	r1, [r7, #-4]
 1011d54:	6023      	str	r3, [r4, #0]
 1011d56:	d3cd      	bcc.n	1011cf4 <_free_r+0x74>
 1011d58:	0a59      	lsrs	r1, r3, #9
 1011d5a:	2904      	cmp	r1, #4
 1011d5c:	d848      	bhi.n	1011df0 <_free_r+0x170>
 1011d5e:	0999      	lsrs	r1, r3, #6
 1011d60:	f101 0439 	add.w	r4, r1, #57	; 0x39
 1011d64:	f101 0538 	add.w	r5, r1, #56	; 0x38
 1011d68:	00e1      	lsls	r1, r4, #3
 1011d6a:	1854      	adds	r4, r2, r1
 1011d6c:	5851      	ldr	r1, [r2, r1]
 1011d6e:	3c08      	subs	r4, #8
 1011d70:	428c      	cmp	r4, r1
 1011d72:	d057      	beq.n	1011e24 <_free_r+0x1a4>
 1011d74:	684a      	ldr	r2, [r1, #4]
 1011d76:	f022 0203 	bic.w	r2, r2, #3
 1011d7a:	429a      	cmp	r2, r3
 1011d7c:	d902      	bls.n	1011d84 <_free_r+0x104>
 1011d7e:	6889      	ldr	r1, [r1, #8]
 1011d80:	428c      	cmp	r4, r1
 1011d82:	d1f7      	bne.n	1011d74 <_free_r+0xf4>
 1011d84:	68cc      	ldr	r4, [r1, #12]
 1011d86:	e9c0 1402 	strd	r1, r4, [r0, #8]
 1011d8a:	60a0      	str	r0, [r4, #8]
 1011d8c:	60c8      	str	r0, [r1, #12]
 1011d8e:	4630      	mov	r0, r6
 1011d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1011d94:	f7fa b9f6 	b.w	100c184 <__malloc_unlock>
 1011d98:	2900      	cmp	r1, #0
 1011d9a:	d164      	bne.n	1011e66 <_free_r+0x1e6>
 1011d9c:	68a1      	ldr	r1, [r4, #8]
 1011d9e:	442b      	add	r3, r5
 1011da0:	68e2      	ldr	r2, [r4, #12]
 1011da2:	f043 0401 	orr.w	r4, r3, #1
 1011da6:	60ca      	str	r2, [r1, #12]
 1011da8:	6091      	str	r1, [r2, #8]
 1011daa:	6044      	str	r4, [r0, #4]
 1011dac:	50c3      	str	r3, [r0, r3]
 1011dae:	e7b4      	b.n	1011d1a <_free_r+0x9a>
 1011db0:	f01c 0f01 	tst.w	ip, #1
 1011db4:	442b      	add	r3, r5
 1011db6:	d107      	bne.n	1011dc8 <_free_r+0x148>
 1011db8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 1011dbc:	1a40      	subs	r0, r0, r1
 1011dbe:	440b      	add	r3, r1
 1011dc0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 1011dc4:	60e1      	str	r1, [r4, #12]
 1011dc6:	608c      	str	r4, [r1, #8]
 1011dc8:	f249 1120 	movw	r1, #37152	; 0x9120
 1011dcc:	f2c0 1105 	movt	r1, #261	; 0x105
 1011dd0:	f043 0401 	orr.w	r4, r3, #1
 1011dd4:	6044      	str	r4, [r0, #4]
 1011dd6:	6809      	ldr	r1, [r1, #0]
 1011dd8:	6090      	str	r0, [r2, #8]
 1011dda:	4299      	cmp	r1, r3
 1011ddc:	d89d      	bhi.n	1011d1a <_free_r+0x9a>
 1011dde:	f240 23f4 	movw	r3, #756	; 0x2f4
 1011de2:	f2c0 1306 	movt	r3, #262	; 0x106
 1011de6:	4630      	mov	r0, r6
 1011de8:	6819      	ldr	r1, [r3, #0]
 1011dea:	f7ff fef3 	bl	1011bd4 <_malloc_trim_r>
 1011dee:	e794      	b.n	1011d1a <_free_r+0x9a>
 1011df0:	2914      	cmp	r1, #20
 1011df2:	d90a      	bls.n	1011e0a <_free_r+0x18a>
 1011df4:	2954      	cmp	r1, #84	; 0x54
 1011df6:	d81d      	bhi.n	1011e34 <_free_r+0x1b4>
 1011df8:	0b19      	lsrs	r1, r3, #12
 1011dfa:	f101 046f 	add.w	r4, r1, #111	; 0x6f
 1011dfe:	f101 056e 	add.w	r5, r1, #110	; 0x6e
 1011e02:	00e1      	lsls	r1, r4, #3
 1011e04:	e7b1      	b.n	1011d6a <_free_r+0xea>
 1011e06:	442b      	add	r3, r5
 1011e08:	e792      	b.n	1011d30 <_free_r+0xb0>
 1011e0a:	f101 045c 	add.w	r4, r1, #92	; 0x5c
 1011e0e:	f101 055b 	add.w	r5, r1, #91	; 0x5b
 1011e12:	00e1      	lsls	r1, r4, #3
 1011e14:	e7a9      	b.n	1011d6a <_free_r+0xea>
 1011e16:	e9c2 0004 	strd	r0, r0, [r2, #16]
 1011e1a:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 1011e1e:	6045      	str	r5, [r0, #4]
 1011e20:	50c3      	str	r3, [r0, r3]
 1011e22:	e77a      	b.n	1011d1a <_free_r+0x9a>
 1011e24:	6853      	ldr	r3, [r2, #4]
 1011e26:	10ad      	asrs	r5, r5, #2
 1011e28:	2701      	movs	r7, #1
 1011e2a:	fa07 f505 	lsl.w	r5, r7, r5
 1011e2e:	431d      	orrs	r5, r3
 1011e30:	6055      	str	r5, [r2, #4]
 1011e32:	e7a8      	b.n	1011d86 <_free_r+0x106>
 1011e34:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 1011e38:	d806      	bhi.n	1011e48 <_free_r+0x1c8>
 1011e3a:	0bd9      	lsrs	r1, r3, #15
 1011e3c:	f101 0478 	add.w	r4, r1, #120	; 0x78
 1011e40:	f101 0577 	add.w	r5, r1, #119	; 0x77
 1011e44:	00e1      	lsls	r1, r4, #3
 1011e46:	e790      	b.n	1011d6a <_free_r+0xea>
 1011e48:	f240 5454 	movw	r4, #1364	; 0x554
 1011e4c:	42a1      	cmp	r1, r4
 1011e4e:	bf9d      	ittte	ls
 1011e50:	0c99      	lsrls	r1, r3, #18
 1011e52:	f101 047d 	addls.w	r4, r1, #125	; 0x7d
 1011e56:	f101 057c 	addls.w	r5, r1, #124	; 0x7c
 1011e5a:	f44f 717e 	movhi.w	r1, #1016	; 0x3f8
 1011e5e:	bf8c      	ite	hi
 1011e60:	257e      	movhi	r5, #126	; 0x7e
 1011e62:	00e1      	lslls	r1, r4, #3
 1011e64:	e781      	b.n	1011d6a <_free_r+0xea>
 1011e66:	f043 0201 	orr.w	r2, r3, #1
 1011e6a:	6042      	str	r2, [r0, #4]
 1011e6c:	6023      	str	r3, [r4, #0]
 1011e6e:	e754      	b.n	1011d1a <_free_r+0x9a>

01011e70 <__sfvwrite_r>:
 1011e70:	6893      	ldr	r3, [r2, #8]
 1011e72:	2b00      	cmp	r3, #0
 1011e74:	f000 8114 	beq.w	10120a0 <__sfvwrite_r+0x230>
 1011e78:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 1011e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1011e80:	f01c 0f08 	tst.w	ip, #8
 1011e84:	b083      	sub	sp, #12
 1011e86:	460c      	mov	r4, r1
 1011e88:	4681      	mov	r9, r0
 1011e8a:	4690      	mov	r8, r2
 1011e8c:	d038      	beq.n	1011f00 <__sfvwrite_r+0x90>
 1011e8e:	690b      	ldr	r3, [r1, #16]
 1011e90:	b3b3      	cbz	r3, 1011f00 <__sfvwrite_r+0x90>
 1011e92:	f01c 0302 	ands.w	r3, ip, #2
 1011e96:	f8d8 6000 	ldr.w	r6, [r8]
 1011e9a:	d03f      	beq.n	1011f1c <__sfvwrite_r+0xac>
 1011e9c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1011ea0:	2700      	movs	r7, #0
 1011ea2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1011ea6:	f44f 4a7c 	mov.w	sl, #64512	; 0xfc00
 1011eaa:	f6c7 7aff 	movt	sl, #32767	; 0x7fff
 1011eae:	463d      	mov	r5, r7
 1011eb0:	4555      	cmp	r5, sl
 1011eb2:	462b      	mov	r3, r5
 1011eb4:	463a      	mov	r2, r7
 1011eb6:	4661      	mov	r1, ip
 1011eb8:	bf28      	it	cs
 1011eba:	4653      	movcs	r3, sl
 1011ebc:	4648      	mov	r0, r9
 1011ebe:	b1dd      	cbz	r5, 1011ef8 <__sfvwrite_r+0x88>
 1011ec0:	47d8      	blx	fp
 1011ec2:	2800      	cmp	r0, #0
 1011ec4:	4407      	add	r7, r0
 1011ec6:	eba5 0500 	sub.w	r5, r5, r0
 1011eca:	f340 80df 	ble.w	101208c <__sfvwrite_r+0x21c>
 1011ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 1011ed2:	1a18      	subs	r0, r3, r0
 1011ed4:	f8c8 0008 	str.w	r0, [r8, #8]
 1011ed8:	2800      	cmp	r0, #0
 1011eda:	f000 80c6 	beq.w	101206a <__sfvwrite_r+0x1fa>
 1011ede:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1011ee2:	4555      	cmp	r5, sl
 1011ee4:	462b      	mov	r3, r5
 1011ee6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1011eea:	bf28      	it	cs
 1011eec:	4653      	movcs	r3, sl
 1011eee:	463a      	mov	r2, r7
 1011ef0:	4661      	mov	r1, ip
 1011ef2:	4648      	mov	r0, r9
 1011ef4:	2d00      	cmp	r5, #0
 1011ef6:	d1e3      	bne.n	1011ec0 <__sfvwrite_r+0x50>
 1011ef8:	e9d6 7500 	ldrd	r7, r5, [r6]
 1011efc:	3608      	adds	r6, #8
 1011efe:	e7d7      	b.n	1011eb0 <__sfvwrite_r+0x40>
 1011f00:	4621      	mov	r1, r4
 1011f02:	4648      	mov	r0, r9
 1011f04:	f7fe fc84 	bl	1010810 <__swsetup_r>
 1011f08:	2800      	cmp	r0, #0
 1011f0a:	f040 8144 	bne.w	1012196 <__sfvwrite_r+0x326>
 1011f0e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1011f12:	f8d8 6000 	ldr.w	r6, [r8]
 1011f16:	f01c 0302 	ands.w	r3, ip, #2
 1011f1a:	d1bf      	bne.n	1011e9c <__sfvwrite_r+0x2c>
 1011f1c:	f01c 0a01 	ands.w	sl, ip, #1
 1011f20:	f040 80c0 	bne.w	10120a4 <__sfvwrite_r+0x234>
 1011f24:	68a7      	ldr	r7, [r4, #8]
 1011f26:	4655      	mov	r5, sl
 1011f28:	6820      	ldr	r0, [r4, #0]
 1011f2a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 1011f2e:	f6c7 73ff 	movt	r3, #32767	; 0x7fff
 1011f32:	9301      	str	r3, [sp, #4]
 1011f34:	2d00      	cmp	r5, #0
 1011f36:	d057      	beq.n	1011fe8 <__sfvwrite_r+0x178>
 1011f38:	f41c 7f00 	tst.w	ip, #512	; 0x200
 1011f3c:	f000 80c6 	beq.w	10120cc <__sfvwrite_r+0x25c>
 1011f40:	42af      	cmp	r7, r5
 1011f42:	463b      	mov	r3, r7
 1011f44:	f200 80f6 	bhi.w	1012134 <__sfvwrite_r+0x2c4>
 1011f48:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 1011f4c:	d02f      	beq.n	1011fae <__sfvwrite_r+0x13e>
 1011f4e:	6962      	ldr	r2, [r4, #20]
 1011f50:	f105 0b01 	add.w	fp, r5, #1
 1011f54:	6921      	ldr	r1, [r4, #16]
 1011f56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1011f5a:	1a47      	subs	r7, r0, r1
 1011f5c:	44bb      	add	fp, r7
 1011f5e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 1011f62:	1052      	asrs	r2, r2, #1
 1011f64:	4593      	cmp	fp, r2
 1011f66:	bf94      	ite	ls
 1011f68:	4693      	movls	fp, r2
 1011f6a:	465a      	movhi	r2, fp
 1011f6c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 1011f70:	f000 80f8 	beq.w	1012164 <__sfvwrite_r+0x2f4>
 1011f74:	4611      	mov	r1, r2
 1011f76:	4648      	mov	r0, r9
 1011f78:	f7f9 f8ae 	bl	100b0d8 <_malloc_r>
 1011f7c:	2800      	cmp	r0, #0
 1011f7e:	f000 8104 	beq.w	101218a <__sfvwrite_r+0x31a>
 1011f82:	463a      	mov	r2, r7
 1011f84:	6921      	ldr	r1, [r4, #16]
 1011f86:	9000      	str	r0, [sp, #0]
 1011f88:	f7f9 edba 	blx	100bb00 <memcpy>
 1011f8c:	89a2      	ldrh	r2, [r4, #12]
 1011f8e:	9b00      	ldr	r3, [sp, #0]
 1011f90:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 1011f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1011f98:	81a2      	strh	r2, [r4, #12]
 1011f9a:	19d8      	adds	r0, r3, r7
 1011f9c:	6123      	str	r3, [r4, #16]
 1011f9e:	ebab 0707 	sub.w	r7, fp, r7
 1011fa2:	462b      	mov	r3, r5
 1011fa4:	60a7      	str	r7, [r4, #8]
 1011fa6:	462f      	mov	r7, r5
 1011fa8:	6020      	str	r0, [r4, #0]
 1011faa:	f8c4 b014 	str.w	fp, [r4, #20]
 1011fae:	461a      	mov	r2, r3
 1011fb0:	4651      	mov	r1, sl
 1011fb2:	9300      	str	r3, [sp, #0]
 1011fb4:	f000 fa7c 	bl	10124b0 <memmove>
 1011fb8:	68a1      	ldr	r1, [r4, #8]
 1011fba:	46ab      	mov	fp, r5
 1011fbc:	6822      	ldr	r2, [r4, #0]
 1011fbe:	2500      	movs	r5, #0
 1011fc0:	9b00      	ldr	r3, [sp, #0]
 1011fc2:	1bcf      	subs	r7, r1, r7
 1011fc4:	60a7      	str	r7, [r4, #8]
 1011fc6:	4413      	add	r3, r2
 1011fc8:	6023      	str	r3, [r4, #0]
 1011fca:	f8d8 0008 	ldr.w	r0, [r8, #8]
 1011fce:	44da      	add	sl, fp
 1011fd0:	eba0 000b 	sub.w	r0, r0, fp
 1011fd4:	f8c8 0008 	str.w	r0, [r8, #8]
 1011fd8:	2800      	cmp	r0, #0
 1011fda:	d046      	beq.n	101206a <__sfvwrite_r+0x1fa>
 1011fdc:	68a7      	ldr	r7, [r4, #8]
 1011fde:	6820      	ldr	r0, [r4, #0]
 1011fe0:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1011fe4:	2d00      	cmp	r5, #0
 1011fe6:	d1a7      	bne.n	1011f38 <__sfvwrite_r+0xc8>
 1011fe8:	e9d6 a500 	ldrd	sl, r5, [r6]
 1011fec:	3608      	adds	r6, #8
 1011fee:	e7a1      	b.n	1011f34 <__sfvwrite_r+0xc4>
 1011ff0:	f10b 0308 	add.w	r3, fp, #8
 1011ff4:	f853 7c04 	ldr.w	r7, [r3, #-4]
 1011ff8:	469b      	mov	fp, r3
 1011ffa:	f853 6c08 	ldr.w	r6, [r3, #-8]
 1011ffe:	3308      	adds	r3, #8
 1012000:	2f00      	cmp	r7, #0
 1012002:	d0f7      	beq.n	1011ff4 <__sfvwrite_r+0x184>
 1012004:	463a      	mov	r2, r7
 1012006:	210a      	movs	r1, #10
 1012008:	4630      	mov	r0, r6
 101200a:	f000 fa01 	bl	1012410 <memchr>
 101200e:	2800      	cmp	r0, #0
 1012010:	d059      	beq.n	10120c6 <__sfvwrite_r+0x256>
 1012012:	3001      	adds	r0, #1
 1012014:	eba0 0a06 	sub.w	sl, r0, r6
 1012018:	4653      	mov	r3, sl
 101201a:	6922      	ldr	r2, [r4, #16]
 101201c:	42bb      	cmp	r3, r7
 101201e:	6820      	ldr	r0, [r4, #0]
 1012020:	6961      	ldr	r1, [r4, #20]
 1012022:	bf28      	it	cs
 1012024:	463b      	movcs	r3, r7
 1012026:	68a5      	ldr	r5, [r4, #8]
 1012028:	4290      	cmp	r0, r2
 101202a:	440d      	add	r5, r1
 101202c:	bf94      	ite	ls
 101202e:	2200      	movls	r2, #0
 1012030:	2201      	movhi	r2, #1
 1012032:	42ab      	cmp	r3, r5
 1012034:	bfd8      	it	le
 1012036:	2200      	movle	r2, #0
 1012038:	b9da      	cbnz	r2, 1012072 <__sfvwrite_r+0x202>
 101203a:	4299      	cmp	r1, r3
 101203c:	f300 8084 	bgt.w	1012148 <__sfvwrite_r+0x2d8>
 1012040:	460b      	mov	r3, r1
 1012042:	6a65      	ldr	r5, [r4, #36]	; 0x24
 1012044:	4632      	mov	r2, r6
 1012046:	69e1      	ldr	r1, [r4, #28]
 1012048:	4648      	mov	r0, r9
 101204a:	47a8      	blx	r5
 101204c:	1e05      	subs	r5, r0, #0
 101204e:	dd1d      	ble.n	101208c <__sfvwrite_r+0x21c>
 1012050:	ebba 0a05 	subs.w	sl, sl, r5
 1012054:	bf18      	it	ne
 1012056:	2001      	movne	r0, #1
 1012058:	d06f      	beq.n	101213a <__sfvwrite_r+0x2ca>
 101205a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 101205e:	442e      	add	r6, r5
 1012060:	1b7f      	subs	r7, r7, r5
 1012062:	1b5d      	subs	r5, r3, r5
 1012064:	f8c8 5008 	str.w	r5, [r8, #8]
 1012068:	bb15      	cbnz	r5, 10120b0 <__sfvwrite_r+0x240>
 101206a:	2000      	movs	r0, #0
 101206c:	b003      	add	sp, #12
 101206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012072:	4631      	mov	r1, r6
 1012074:	462a      	mov	r2, r5
 1012076:	f000 fa1b 	bl	10124b0 <memmove>
 101207a:	6823      	ldr	r3, [r4, #0]
 101207c:	4621      	mov	r1, r4
 101207e:	4648      	mov	r0, r9
 1012080:	442b      	add	r3, r5
 1012082:	6023      	str	r3, [r4, #0]
 1012084:	f7ff fc70 	bl	1011968 <_fflush_r>
 1012088:	2800      	cmp	r0, #0
 101208a:	d0e1      	beq.n	1012050 <__sfvwrite_r+0x1e0>
 101208c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1012090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1012094:	f04f 30ff 	mov.w	r0, #4294967295
 1012098:	81a3      	strh	r3, [r4, #12]
 101209a:	b003      	add	sp, #12
 101209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10120a0:	2000      	movs	r0, #0
 10120a2:	4770      	bx	lr
 10120a4:	469a      	mov	sl, r3
 10120a6:	4618      	mov	r0, r3
 10120a8:	461f      	mov	r7, r3
 10120aa:	4633      	mov	r3, r6
 10120ac:	469b      	mov	fp, r3
 10120ae:	4656      	mov	r6, sl
 10120b0:	2f00      	cmp	r7, #0
 10120b2:	d09d      	beq.n	1011ff0 <__sfvwrite_r+0x180>
 10120b4:	2800      	cmp	r0, #0
 10120b6:	d1af      	bne.n	1012018 <__sfvwrite_r+0x1a8>
 10120b8:	463a      	mov	r2, r7
 10120ba:	210a      	movs	r1, #10
 10120bc:	4630      	mov	r0, r6
 10120be:	f000 f9a7 	bl	1012410 <memchr>
 10120c2:	2800      	cmp	r0, #0
 10120c4:	d1a5      	bne.n	1012012 <__sfvwrite_r+0x1a2>
 10120c6:	1c7b      	adds	r3, r7, #1
 10120c8:	469a      	mov	sl, r3
 10120ca:	e7a6      	b.n	101201a <__sfvwrite_r+0x1aa>
 10120cc:	6923      	ldr	r3, [r4, #16]
 10120ce:	4283      	cmp	r3, r0
 10120d0:	d319      	bcc.n	1012106 <__sfvwrite_r+0x296>
 10120d2:	f8d4 b014 	ldr.w	fp, [r4, #20]
 10120d6:	45ab      	cmp	fp, r5
 10120d8:	d815      	bhi.n	1012106 <__sfvwrite_r+0x296>
 10120da:	9b01      	ldr	r3, [sp, #4]
 10120dc:	4659      	mov	r1, fp
 10120de:	429d      	cmp	r5, r3
 10120e0:	bf94      	ite	ls
 10120e2:	4628      	movls	r0, r5
 10120e4:	f06f 4000 	mvnhi.w	r0, #2147483648	; 0x80000000
 10120e8:	f7f7 fd1a 	bl	1009b20 <__divsi3>
 10120ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 10120ee:	4652      	mov	r2, sl
 10120f0:	69e1      	ldr	r1, [r4, #28]
 10120f2:	fb0b f300 	mul.w	r3, fp, r0
 10120f6:	4648      	mov	r0, r9
 10120f8:	47b8      	blx	r7
 10120fa:	f1b0 0b00 	subs.w	fp, r0, #0
 10120fe:	ddc5      	ble.n	101208c <__sfvwrite_r+0x21c>
 1012100:	eba5 050b 	sub.w	r5, r5, fp
 1012104:	e761      	b.n	1011fca <__sfvwrite_r+0x15a>
 1012106:	42af      	cmp	r7, r5
 1012108:	4651      	mov	r1, sl
 101210a:	bf28      	it	cs
 101210c:	462f      	movcs	r7, r5
 101210e:	463a      	mov	r2, r7
 1012110:	46bb      	mov	fp, r7
 1012112:	f000 f9cd 	bl	10124b0 <memmove>
 1012116:	68a3      	ldr	r3, [r4, #8]
 1012118:	6822      	ldr	r2, [r4, #0]
 101211a:	1bdb      	subs	r3, r3, r7
 101211c:	60a3      	str	r3, [r4, #8]
 101211e:	443a      	add	r2, r7
 1012120:	6022      	str	r2, [r4, #0]
 1012122:	2b00      	cmp	r3, #0
 1012124:	d1ec      	bne.n	1012100 <__sfvwrite_r+0x290>
 1012126:	4621      	mov	r1, r4
 1012128:	4648      	mov	r0, r9
 101212a:	f7ff fc1d 	bl	1011968 <_fflush_r>
 101212e:	2800      	cmp	r0, #0
 1012130:	d0e6      	beq.n	1012100 <__sfvwrite_r+0x290>
 1012132:	e7ab      	b.n	101208c <__sfvwrite_r+0x21c>
 1012134:	462f      	mov	r7, r5
 1012136:	462b      	mov	r3, r5
 1012138:	e739      	b.n	1011fae <__sfvwrite_r+0x13e>
 101213a:	4621      	mov	r1, r4
 101213c:	4648      	mov	r0, r9
 101213e:	f7ff fc13 	bl	1011968 <_fflush_r>
 1012142:	2800      	cmp	r0, #0
 1012144:	d089      	beq.n	101205a <__sfvwrite_r+0x1ea>
 1012146:	e7a1      	b.n	101208c <__sfvwrite_r+0x21c>
 1012148:	461a      	mov	r2, r3
 101214a:	4631      	mov	r1, r6
 101214c:	9300      	str	r3, [sp, #0]
 101214e:	461d      	mov	r5, r3
 1012150:	f000 f9ae 	bl	10124b0 <memmove>
 1012154:	68a1      	ldr	r1, [r4, #8]
 1012156:	6822      	ldr	r2, [r4, #0]
 1012158:	9b00      	ldr	r3, [sp, #0]
 101215a:	1ac9      	subs	r1, r1, r3
 101215c:	4413      	add	r3, r2
 101215e:	60a1      	str	r1, [r4, #8]
 1012160:	6023      	str	r3, [r4, #0]
 1012162:	e775      	b.n	1012050 <__sfvwrite_r+0x1e0>
 1012164:	4648      	mov	r0, r9
 1012166:	f000 fe89 	bl	1012e7c <_realloc_r>
 101216a:	4603      	mov	r3, r0
 101216c:	2800      	cmp	r0, #0
 101216e:	f47f af14 	bne.w	1011f9a <__sfvwrite_r+0x12a>
 1012172:	6921      	ldr	r1, [r4, #16]
 1012174:	4648      	mov	r0, r9
 1012176:	f7ff fd83 	bl	1011c80 <_free_r>
 101217a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101217e:	220c      	movs	r2, #12
 1012180:	f8c9 2000 	str.w	r2, [r9]
 1012184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1012188:	e782      	b.n	1012090 <__sfvwrite_r+0x220>
 101218a:	220c      	movs	r2, #12
 101218c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1012190:	f8c9 2000 	str.w	r2, [r9]
 1012194:	e77c      	b.n	1012090 <__sfvwrite_r+0x220>
 1012196:	f04f 30ff 	mov.w	r0, #4294967295
 101219a:	e767      	b.n	101206c <__sfvwrite_r+0x1fc>

0101219c <_fwalk>:
 101219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10121a0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 10121a4:	d01a      	beq.n	10121dc <_fwalk+0x40>
 10121a6:	4688      	mov	r8, r1
 10121a8:	2600      	movs	r6, #0
 10121aa:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 10121ae:	3d01      	subs	r5, #1
 10121b0:	d40e      	bmi.n	10121d0 <_fwalk+0x34>
 10121b2:	89a3      	ldrh	r3, [r4, #12]
 10121b4:	3d01      	subs	r5, #1
 10121b6:	2b01      	cmp	r3, #1
 10121b8:	d906      	bls.n	10121c8 <_fwalk+0x2c>
 10121ba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 10121be:	4620      	mov	r0, r4
 10121c0:	3301      	adds	r3, #1
 10121c2:	d001      	beq.n	10121c8 <_fwalk+0x2c>
 10121c4:	47c0      	blx	r8
 10121c6:	4306      	orrs	r6, r0
 10121c8:	1c6b      	adds	r3, r5, #1
 10121ca:	f104 0468 	add.w	r4, r4, #104	; 0x68
 10121ce:	d1f0      	bne.n	10121b2 <_fwalk+0x16>
 10121d0:	683f      	ldr	r7, [r7, #0]
 10121d2:	2f00      	cmp	r7, #0
 10121d4:	d1e9      	bne.n	10121aa <_fwalk+0xe>
 10121d6:	4630      	mov	r0, r6
 10121d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10121dc:	463e      	mov	r6, r7
 10121de:	4630      	mov	r0, r6
 10121e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

010121e4 <_fwalk_reent>:
 10121e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10121e8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 10121ec:	d01e      	beq.n	101222c <_fwalk_reent+0x48>
 10121ee:	4688      	mov	r8, r1
 10121f0:	4606      	mov	r6, r0
 10121f2:	f04f 0900 	mov.w	r9, #0
 10121f6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 10121fa:	3d01      	subs	r5, #1
 10121fc:	d410      	bmi.n	1012220 <_fwalk_reent+0x3c>
 10121fe:	89a3      	ldrh	r3, [r4, #12]
 1012200:	3d01      	subs	r5, #1
 1012202:	2b01      	cmp	r3, #1
 1012204:	d908      	bls.n	1012218 <_fwalk_reent+0x34>
 1012206:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 101220a:	4621      	mov	r1, r4
 101220c:	4630      	mov	r0, r6
 101220e:	3301      	adds	r3, #1
 1012210:	d002      	beq.n	1012218 <_fwalk_reent+0x34>
 1012212:	47c0      	blx	r8
 1012214:	ea49 0900 	orr.w	r9, r9, r0
 1012218:	1c6b      	adds	r3, r5, #1
 101221a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 101221e:	d1ee      	bne.n	10121fe <_fwalk_reent+0x1a>
 1012220:	683f      	ldr	r7, [r7, #0]
 1012222:	2f00      	cmp	r7, #0
 1012224:	d1e7      	bne.n	10121f6 <_fwalk_reent+0x12>
 1012226:	4648      	mov	r0, r9
 1012228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 101222c:	46b9      	mov	r9, r7
 101222e:	4648      	mov	r0, r9
 1012230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

01012234 <_findenv_r>:
 1012234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1012238:	f249 1724 	movw	r7, #37156	; 0x9124
 101223c:	f2c0 1705 	movt	r7, #261	; 0x105
 1012240:	460d      	mov	r5, r1
 1012242:	4616      	mov	r6, r2
 1012244:	4680      	mov	r8, r0
 1012246:	f003 f947 	bl	10154d8 <__env_lock>
 101224a:	f8d7 9000 	ldr.w	r9, [r7]
 101224e:	f1b9 0f00 	cmp.w	r9, #0
 1012252:	d021      	beq.n	1012298 <_findenv_r+0x64>
 1012254:	782a      	ldrb	r2, [r5, #0]
 1012256:	462c      	mov	r4, r5
 1012258:	2a3d      	cmp	r2, #61	; 0x3d
 101225a:	bf18      	it	ne
 101225c:	2a00      	cmpne	r2, #0
 101225e:	d005      	beq.n	101226c <_findenv_r+0x38>
 1012260:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 1012264:	2a00      	cmp	r2, #0
 1012266:	bf18      	it	ne
 1012268:	2a3d      	cmpne	r2, #61	; 0x3d
 101226a:	d1f9      	bne.n	1012260 <_findenv_r+0x2c>
 101226c:	2a3d      	cmp	r2, #61	; 0x3d
 101226e:	d013      	beq.n	1012298 <_findenv_r+0x64>
 1012270:	f8d9 0000 	ldr.w	r0, [r9]
 1012274:	1b64      	subs	r4, r4, r5
 1012276:	b178      	cbz	r0, 1012298 <_findenv_r+0x64>
 1012278:	4622      	mov	r2, r4
 101227a:	4629      	mov	r1, r5
 101227c:	f7fa fbdc 	bl	100ca38 <strncmp>
 1012280:	b930      	cbnz	r0, 1012290 <_findenv_r+0x5c>
 1012282:	f8d9 3000 	ldr.w	r3, [r9]
 1012286:	eb03 0a04 	add.w	sl, r3, r4
 101228a:	5d1b      	ldrb	r3, [r3, r4]
 101228c:	2b3d      	cmp	r3, #61	; 0x3d
 101228e:	d009      	beq.n	10122a4 <_findenv_r+0x70>
 1012290:	f859 0f04 	ldr.w	r0, [r9, #4]!
 1012294:	2800      	cmp	r0, #0
 1012296:	d1ef      	bne.n	1012278 <_findenv_r+0x44>
 1012298:	4640      	mov	r0, r8
 101229a:	f003 f91f 	bl	10154dc <__env_unlock>
 101229e:	2000      	movs	r0, #0
 10122a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10122a4:	683b      	ldr	r3, [r7, #0]
 10122a6:	4640      	mov	r0, r8
 10122a8:	eba9 0303 	sub.w	r3, r9, r3
 10122ac:	109b      	asrs	r3, r3, #2
 10122ae:	6033      	str	r3, [r6, #0]
 10122b0:	f003 f914 	bl	10154dc <__env_unlock>
 10122b4:	f10a 0001 	add.w	r0, sl, #1
 10122b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

010122bc <_getenv_r>:
 10122bc:	b500      	push	{lr}
 10122be:	b083      	sub	sp, #12
 10122c0:	aa01      	add	r2, sp, #4
 10122c2:	f7ff ffb7 	bl	1012234 <_findenv_r>
 10122c6:	b003      	add	sp, #12
 10122c8:	f85d fb04 	ldr.w	pc, [sp], #4

010122cc <__localeconv_l>:
 10122cc:	30f0      	adds	r0, #240	; 0xf0
 10122ce:	4770      	bx	lr

010122d0 <_localeconv_r>:
 10122d0:	f248 7258 	movw	r2, #34648	; 0x8758
 10122d4:	f2c0 1205 	movt	r2, #261	; 0x105
 10122d8:	f648 3388 	movw	r3, #35720	; 0x8b88
 10122dc:	f2c0 1305 	movt	r3, #261	; 0x105
 10122e0:	6812      	ldr	r2, [r2, #0]
 10122e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
 10122e4:	2800      	cmp	r0, #0
 10122e6:	bf08      	it	eq
 10122e8:	4618      	moveq	r0, r3
 10122ea:	30f0      	adds	r0, #240	; 0xf0
 10122ec:	4770      	bx	lr
 10122ee:	bf00      	nop

010122f0 <localeconv>:
 10122f0:	f248 7258 	movw	r2, #34648	; 0x8758
 10122f4:	f2c0 1205 	movt	r2, #261	; 0x105
 10122f8:	f648 3388 	movw	r3, #35720	; 0x8b88
 10122fc:	f2c0 1305 	movt	r3, #261	; 0x105
 1012300:	6812      	ldr	r2, [r2, #0]
 1012302:	6b50      	ldr	r0, [r2, #52]	; 0x34
 1012304:	2800      	cmp	r0, #0
 1012306:	bf08      	it	eq
 1012308:	4618      	moveq	r0, r3
 101230a:	30f0      	adds	r0, #240	; 0xf0
 101230c:	4770      	bx	lr
 101230e:	bf00      	nop

01012310 <__swhatbuf_r>:
 1012310:	b570      	push	{r4, r5, r6, lr}
 1012312:	460c      	mov	r4, r1
 1012314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1012318:	b096      	sub	sp, #88	; 0x58
 101231a:	4615      	mov	r5, r2
 101231c:	461e      	mov	r6, r3
 101231e:	2900      	cmp	r1, #0
 1012320:	db14      	blt.n	101234c <__swhatbuf_r+0x3c>
 1012322:	466a      	mov	r2, sp
 1012324:	f003 f9b6 	bl	1015694 <_fstat_r>
 1012328:	2800      	cmp	r0, #0
 101232a:	db0f      	blt.n	101234c <__swhatbuf_r+0x3c>
 101232c:	9a01      	ldr	r2, [sp, #4]
 101232e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 1012332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 1012336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 101233a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 101233e:	fab2 f282 	clz	r2, r2
 1012342:	0952      	lsrs	r2, r2, #5
 1012344:	6032      	str	r2, [r6, #0]
 1012346:	602b      	str	r3, [r5, #0]
 1012348:	b016      	add	sp, #88	; 0x58
 101234a:	bd70      	pop	{r4, r5, r6, pc}
 101234c:	89a2      	ldrh	r2, [r4, #12]
 101234e:	2300      	movs	r3, #0
 1012350:	6033      	str	r3, [r6, #0]
 1012352:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 1012356:	d004      	beq.n	1012362 <__swhatbuf_r+0x52>
 1012358:	4618      	mov	r0, r3
 101235a:	2340      	movs	r3, #64	; 0x40
 101235c:	602b      	str	r3, [r5, #0]
 101235e:	b016      	add	sp, #88	; 0x58
 1012360:	bd70      	pop	{r4, r5, r6, pc}
 1012362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 1012366:	602b      	str	r3, [r5, #0]
 1012368:	b016      	add	sp, #88	; 0x58
 101236a:	bd70      	pop	{r4, r5, r6, pc}

0101236c <__smakebuf_r>:
 101236c:	898a      	ldrh	r2, [r1, #12]
 101236e:	460b      	mov	r3, r1
 1012370:	0792      	lsls	r2, r2, #30
 1012372:	d506      	bpl.n	1012382 <__smakebuf_r+0x16>
 1012374:	f101 0243 	add.w	r2, r1, #67	; 0x43
 1012378:	2101      	movs	r1, #1
 101237a:	601a      	str	r2, [r3, #0]
 101237c:	e9c3 2104 	strd	r2, r1, [r3, #16]
 1012380:	4770      	bx	lr
 1012382:	b570      	push	{r4, r5, r6, lr}
 1012384:	b082      	sub	sp, #8
 1012386:	ab01      	add	r3, sp, #4
 1012388:	4606      	mov	r6, r0
 101238a:	466a      	mov	r2, sp
 101238c:	460c      	mov	r4, r1
 101238e:	f7ff ffbf 	bl	1012310 <__swhatbuf_r>
 1012392:	9900      	ldr	r1, [sp, #0]
 1012394:	4605      	mov	r5, r0
 1012396:	4630      	mov	r0, r6
 1012398:	f7f8 fe9e 	bl	100b0d8 <_malloc_r>
 101239c:	b198      	cbz	r0, 10123c6 <__smakebuf_r+0x5a>
 101239e:	9900      	ldr	r1, [sp, #0]
 10123a0:	f641 13c9 	movw	r3, #6601	; 0x19c9
 10123a4:	9a01      	ldr	r2, [sp, #4]
 10123a6:	f2c0 1301 	movt	r3, #257	; 0x101
 10123aa:	63f3      	str	r3, [r6, #60]	; 0x3c
 10123ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10123b0:	6020      	str	r0, [r4, #0]
 10123b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 10123b6:	6120      	str	r0, [r4, #16]
 10123b8:	6161      	str	r1, [r4, #20]
 10123ba:	81a3      	strh	r3, [r4, #12]
 10123bc:	b99a      	cbnz	r2, 10123e6 <__smakebuf_r+0x7a>
 10123be:	432b      	orrs	r3, r5
 10123c0:	81a3      	strh	r3, [r4, #12]
 10123c2:	b002      	add	sp, #8
 10123c4:	bd70      	pop	{r4, r5, r6, pc}
 10123c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10123ca:	059a      	lsls	r2, r3, #22
 10123cc:	d4f9      	bmi.n	10123c2 <__smakebuf_r+0x56>
 10123ce:	f023 0303 	bic.w	r3, r3, #3
 10123d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 10123d6:	f043 0302 	orr.w	r3, r3, #2
 10123da:	6022      	str	r2, [r4, #0]
 10123dc:	81a3      	strh	r3, [r4, #12]
 10123de:	2301      	movs	r3, #1
 10123e0:	e9c4 2304 	strd	r2, r3, [r4, #16]
 10123e4:	e7ed      	b.n	10123c2 <__smakebuf_r+0x56>
 10123e6:	4630      	mov	r0, r6
 10123e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 10123ec:	f003 f968 	bl	10156c0 <_isatty_r>
 10123f0:	b910      	cbnz	r0, 10123f8 <__smakebuf_r+0x8c>
 10123f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10123f6:	e7e2      	b.n	10123be <__smakebuf_r+0x52>
 10123f8:	89a3      	ldrh	r3, [r4, #12]
 10123fa:	f023 0303 	bic.w	r3, r3, #3
 10123fe:	f043 0301 	orr.w	r3, r3, #1
 1012402:	b21b      	sxth	r3, r3
 1012404:	e7db      	b.n	10123be <__smakebuf_r+0x52>
 1012406:	bf00      	nop
	...

01012410 <memchr>:
 1012410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 1012414:	2a10      	cmp	r2, #16
 1012416:	db2b      	blt.n	1012470 <memchr+0x60>
 1012418:	f010 0f07 	tst.w	r0, #7
 101241c:	d008      	beq.n	1012430 <memchr+0x20>
 101241e:	f810 3b01 	ldrb.w	r3, [r0], #1
 1012422:	3a01      	subs	r2, #1
 1012424:	428b      	cmp	r3, r1
 1012426:	d02d      	beq.n	1012484 <memchr+0x74>
 1012428:	f010 0f07 	tst.w	r0, #7
 101242c:	b342      	cbz	r2, 1012480 <memchr+0x70>
 101242e:	d1f6      	bne.n	101241e <memchr+0xe>
 1012430:	b4f0      	push	{r4, r5, r6, r7}
 1012432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 1012436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 101243a:	f022 0407 	bic.w	r4, r2, #7
 101243e:	f07f 0700 	mvns.w	r7, #0
 1012442:	2300      	movs	r3, #0
 1012444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 1012448:	3c08      	subs	r4, #8
 101244a:	ea85 0501 	eor.w	r5, r5, r1
 101244e:	ea86 0601 	eor.w	r6, r6, r1
 1012452:	fa85 f547 	uadd8	r5, r5, r7
 1012456:	faa3 f587 	sel	r5, r3, r7
 101245a:	fa86 f647 	uadd8	r6, r6, r7
 101245e:	faa5 f687 	sel	r6, r5, r7
 1012462:	b98e      	cbnz	r6, 1012488 <memchr+0x78>
 1012464:	d1ee      	bne.n	1012444 <memchr+0x34>
 1012466:	bcf0      	pop	{r4, r5, r6, r7}
 1012468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101246c:	f002 0207 	and.w	r2, r2, #7
 1012470:	b132      	cbz	r2, 1012480 <memchr+0x70>
 1012472:	f810 3b01 	ldrb.w	r3, [r0], #1
 1012476:	3a01      	subs	r2, #1
 1012478:	ea83 0301 	eor.w	r3, r3, r1
 101247c:	b113      	cbz	r3, 1012484 <memchr+0x74>
 101247e:	d1f8      	bne.n	1012472 <memchr+0x62>
 1012480:	2000      	movs	r0, #0
 1012482:	4770      	bx	lr
 1012484:	3801      	subs	r0, #1
 1012486:	4770      	bx	lr
 1012488:	2d00      	cmp	r5, #0
 101248a:	bf06      	itte	eq
 101248c:	4635      	moveq	r5, r6
 101248e:	3803      	subeq	r0, #3
 1012490:	3807      	subne	r0, #7
 1012492:	f015 0f01 	tst.w	r5, #1
 1012496:	d107      	bne.n	10124a8 <memchr+0x98>
 1012498:	3001      	adds	r0, #1
 101249a:	f415 7f80 	tst.w	r5, #256	; 0x100
 101249e:	bf02      	ittt	eq
 10124a0:	3001      	addeq	r0, #1
 10124a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 10124a6:	3001      	addeq	r0, #1
 10124a8:	bcf0      	pop	{r4, r5, r6, r7}
 10124aa:	3801      	subs	r0, #1
 10124ac:	4770      	bx	lr
 10124ae:	bf00      	nop

010124b0 <memmove>:
 10124b0:	4288      	cmp	r0, r1
 10124b2:	b4f0      	push	{r4, r5, r6, r7}
 10124b4:	d90d      	bls.n	10124d2 <memmove+0x22>
 10124b6:	188b      	adds	r3, r1, r2
 10124b8:	4283      	cmp	r3, r0
 10124ba:	d90a      	bls.n	10124d2 <memmove+0x22>
 10124bc:	1884      	adds	r4, r0, r2
 10124be:	b132      	cbz	r2, 10124ce <memmove+0x1e>
 10124c0:	4622      	mov	r2, r4
 10124c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 10124c6:	4299      	cmp	r1, r3
 10124c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 10124cc:	d1f9      	bne.n	10124c2 <memmove+0x12>
 10124ce:	bcf0      	pop	{r4, r5, r6, r7}
 10124d0:	4770      	bx	lr
 10124d2:	2a0f      	cmp	r2, #15
 10124d4:	d80e      	bhi.n	10124f4 <memmove+0x44>
 10124d6:	4603      	mov	r3, r0
 10124d8:	1e54      	subs	r4, r2, #1
 10124da:	2a00      	cmp	r2, #0
 10124dc:	d0f7      	beq.n	10124ce <memmove+0x1e>
 10124de:	3401      	adds	r4, #1
 10124e0:	3b01      	subs	r3, #1
 10124e2:	440c      	add	r4, r1
 10124e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 10124e8:	42a1      	cmp	r1, r4
 10124ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 10124ee:	d1f9      	bne.n	10124e4 <memmove+0x34>
 10124f0:	bcf0      	pop	{r4, r5, r6, r7}
 10124f2:	4770      	bx	lr
 10124f4:	ea40 0301 	orr.w	r3, r0, r1
 10124f8:	079b      	lsls	r3, r3, #30
 10124fa:	d13d      	bne.n	1012578 <memmove+0xc8>
 10124fc:	f1a2 0510 	sub.w	r5, r2, #16
 1012500:	f101 0420 	add.w	r4, r1, #32
 1012504:	f101 0610 	add.w	r6, r1, #16
 1012508:	f100 0710 	add.w	r7, r0, #16
 101250c:	092d      	lsrs	r5, r5, #4
 101250e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 1012512:	f856 3c10 	ldr.w	r3, [r6, #-16]
 1012516:	3610      	adds	r6, #16
 1012518:	3710      	adds	r7, #16
 101251a:	f847 3c20 	str.w	r3, [r7, #-32]
 101251e:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 1012522:	f847 3c1c 	str.w	r3, [r7, #-28]
 1012526:	f856 3c18 	ldr.w	r3, [r6, #-24]
 101252a:	f847 3c18 	str.w	r3, [r7, #-24]
 101252e:	f856 3c14 	ldr.w	r3, [r6, #-20]
 1012532:	42a6      	cmp	r6, r4
 1012534:	f847 3c14 	str.w	r3, [r7, #-20]
 1012538:	d1eb      	bne.n	1012512 <memmove+0x62>
 101253a:	1c6b      	adds	r3, r5, #1
 101253c:	f012 0f0c 	tst.w	r2, #12
 1012540:	f002 050f 	and.w	r5, r2, #15
 1012544:	ea4f 1303 	mov.w	r3, r3, lsl #4
 1012548:	4419      	add	r1, r3
 101254a:	bf08      	it	eq
 101254c:	462a      	moveq	r2, r5
 101254e:	4403      	add	r3, r0
 1012550:	d0c2      	beq.n	10124d8 <memmove+0x28>
 1012552:	1f1f      	subs	r7, r3, #4
 1012554:	460e      	mov	r6, r1
 1012556:	f856 cb04 	ldr.w	ip, [r6], #4
 101255a:	1bac      	subs	r4, r5, r6
 101255c:	440c      	add	r4, r1
 101255e:	f847 cf04 	str.w	ip, [r7, #4]!
 1012562:	2c03      	cmp	r4, #3
 1012564:	d8f7      	bhi.n	1012556 <memmove+0xa6>
 1012566:	1f2c      	subs	r4, r5, #4
 1012568:	f002 0203 	and.w	r2, r2, #3
 101256c:	f024 0403 	bic.w	r4, r4, #3
 1012570:	3404      	adds	r4, #4
 1012572:	4423      	add	r3, r4
 1012574:	4421      	add	r1, r4
 1012576:	e7af      	b.n	10124d8 <memmove+0x28>
 1012578:	1e54      	subs	r4, r2, #1
 101257a:	4603      	mov	r3, r0
 101257c:	e7af      	b.n	10124de <memmove+0x2e>
 101257e:	bf00      	nop

01012580 <_Balloc>:
 1012580:	b538      	push	{r3, r4, r5, lr}
 1012582:	4605      	mov	r5, r0
 1012584:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 1012586:	460c      	mov	r4, r1
 1012588:	b14b      	cbz	r3, 101259e <_Balloc+0x1e>
 101258a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 101258e:	b180      	cbz	r0, 10125b2 <_Balloc+0x32>
 1012590:	6802      	ldr	r2, [r0, #0]
 1012592:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 1012596:	2300      	movs	r3, #0
 1012598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 101259c:	bd38      	pop	{r3, r4, r5, pc}
 101259e:	2221      	movs	r2, #33	; 0x21
 10125a0:	2104      	movs	r1, #4
 10125a2:	f002 ff53 	bl	101544c <_calloc_r>
 10125a6:	4603      	mov	r3, r0
 10125a8:	64e8      	str	r0, [r5, #76]	; 0x4c
 10125aa:	2800      	cmp	r0, #0
 10125ac:	d1ed      	bne.n	101258a <_Balloc+0xa>
 10125ae:	2000      	movs	r0, #0
 10125b0:	bd38      	pop	{r3, r4, r5, pc}
 10125b2:	2101      	movs	r1, #1
 10125b4:	4628      	mov	r0, r5
 10125b6:	fa01 f504 	lsl.w	r5, r1, r4
 10125ba:	1d6a      	adds	r2, r5, #5
 10125bc:	0092      	lsls	r2, r2, #2
 10125be:	f002 ff45 	bl	101544c <_calloc_r>
 10125c2:	2800      	cmp	r0, #0
 10125c4:	d0f3      	beq.n	10125ae <_Balloc+0x2e>
 10125c6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 10125ca:	e7e4      	b.n	1012596 <_Balloc+0x16>

010125cc <_Bfree>:
 10125cc:	b131      	cbz	r1, 10125dc <_Bfree+0x10>
 10125ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 10125d0:	684a      	ldr	r2, [r1, #4]
 10125d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 10125d6:	6008      	str	r0, [r1, #0]
 10125d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 10125dc:	4770      	bx	lr
 10125de:	bf00      	nop

010125e0 <__multadd>:
 10125e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10125e2:	f101 0714 	add.w	r7, r1, #20
 10125e6:	690c      	ldr	r4, [r1, #16]
 10125e8:	b083      	sub	sp, #12
 10125ea:	460d      	mov	r5, r1
 10125ec:	4606      	mov	r6, r0
 10125ee:	f04f 0c00 	mov.w	ip, #0
 10125f2:	6838      	ldr	r0, [r7, #0]
 10125f4:	f10c 0c01 	add.w	ip, ip, #1
 10125f8:	4564      	cmp	r4, ip
 10125fa:	b281      	uxth	r1, r0
 10125fc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1012600:	fb02 3301 	mla	r3, r2, r1, r3
 1012604:	ea4f 4113 	mov.w	r1, r3, lsr #16
 1012608:	b29b      	uxth	r3, r3
 101260a:	fb02 1000 	mla	r0, r2, r0, r1
 101260e:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 1012612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 1012616:	f847 1b04 	str.w	r1, [r7], #4
 101261a:	dcea      	bgt.n	10125f2 <__multadd+0x12>
 101261c:	b13b      	cbz	r3, 101262e <__multadd+0x4e>
 101261e:	68aa      	ldr	r2, [r5, #8]
 1012620:	42a2      	cmp	r2, r4
 1012622:	dd07      	ble.n	1012634 <__multadd+0x54>
 1012624:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1012628:	3401      	adds	r4, #1
 101262a:	6153      	str	r3, [r2, #20]
 101262c:	612c      	str	r4, [r5, #16]
 101262e:	4628      	mov	r0, r5
 1012630:	b003      	add	sp, #12
 1012632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1012634:	6869      	ldr	r1, [r5, #4]
 1012636:	4630      	mov	r0, r6
 1012638:	9301      	str	r3, [sp, #4]
 101263a:	3101      	adds	r1, #1
 101263c:	f7ff ffa0 	bl	1012580 <_Balloc>
 1012640:	692a      	ldr	r2, [r5, #16]
 1012642:	f105 010c 	add.w	r1, r5, #12
 1012646:	3202      	adds	r2, #2
 1012648:	0092      	lsls	r2, r2, #2
 101264a:	4607      	mov	r7, r0
 101264c:	300c      	adds	r0, #12
 101264e:	f7f9 ea58 	blx	100bb00 <memcpy>
 1012652:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 1012654:	6869      	ldr	r1, [r5, #4]
 1012656:	9b01      	ldr	r3, [sp, #4]
 1012658:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 101265c:	6028      	str	r0, [r5, #0]
 101265e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 1012662:	463d      	mov	r5, r7
 1012664:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1012668:	3401      	adds	r4, #1
 101266a:	6153      	str	r3, [r2, #20]
 101266c:	612c      	str	r4, [r5, #16]
 101266e:	e7de      	b.n	101262e <__multadd+0x4e>

01012670 <__s2b>:
 1012670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1012674:	461d      	mov	r5, r3
 1012676:	f648 6639 	movw	r6, #36409	; 0x8e39
 101267a:	3308      	adds	r3, #8
 101267c:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 1012680:	4607      	mov	r7, r0
 1012682:	460c      	mov	r4, r1
 1012684:	2d09      	cmp	r5, #9
 1012686:	fb86 0103 	smull	r0, r1, r6, r3
 101268a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 101268e:	4690      	mov	r8, r2
 1012690:	9e08      	ldr	r6, [sp, #32]
 1012692:	ebc3 0261 	rsb	r2, r3, r1, asr #1
 1012696:	dd35      	ble.n	1012704 <__s2b+0x94>
 1012698:	2301      	movs	r3, #1
 101269a:	2100      	movs	r1, #0
 101269c:	005b      	lsls	r3, r3, #1
 101269e:	3101      	adds	r1, #1
 10126a0:	429a      	cmp	r2, r3
 10126a2:	dcfb      	bgt.n	101269c <__s2b+0x2c>
 10126a4:	4638      	mov	r0, r7
 10126a6:	f7ff ff6b 	bl	1012580 <_Balloc>
 10126aa:	f1b8 0f09 	cmp.w	r8, #9
 10126ae:	f04f 0301 	mov.w	r3, #1
 10126b2:	bfdc      	itt	le
 10126b4:	340a      	addle	r4, #10
 10126b6:	f04f 0809 	movle.w	r8, #9
 10126ba:	6146      	str	r6, [r0, #20]
 10126bc:	6103      	str	r3, [r0, #16]
 10126be:	dd10      	ble.n	10126e2 <__s2b+0x72>
 10126c0:	f104 0909 	add.w	r9, r4, #9
 10126c4:	4444      	add	r4, r8
 10126c6:	464e      	mov	r6, r9
 10126c8:	f816 3b01 	ldrb.w	r3, [r6], #1
 10126cc:	4601      	mov	r1, r0
 10126ce:	220a      	movs	r2, #10
 10126d0:	4638      	mov	r0, r7
 10126d2:	3b30      	subs	r3, #48	; 0x30
 10126d4:	f7ff ff84 	bl	10125e0 <__multadd>
 10126d8:	42b4      	cmp	r4, r6
 10126da:	d1f5      	bne.n	10126c8 <__s2b+0x58>
 10126dc:	f1a8 0408 	sub.w	r4, r8, #8
 10126e0:	444c      	add	r4, r9
 10126e2:	4545      	cmp	r5, r8
 10126e4:	dd0c      	ble.n	1012700 <__s2b+0x90>
 10126e6:	eba5 0508 	sub.w	r5, r5, r8
 10126ea:	4425      	add	r5, r4
 10126ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 10126f0:	4601      	mov	r1, r0
 10126f2:	220a      	movs	r2, #10
 10126f4:	4638      	mov	r0, r7
 10126f6:	3b30      	subs	r3, #48	; 0x30
 10126f8:	f7ff ff72 	bl	10125e0 <__multadd>
 10126fc:	42a5      	cmp	r5, r4
 10126fe:	d1f5      	bne.n	10126ec <__s2b+0x7c>
 1012700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1012704:	2100      	movs	r1, #0
 1012706:	e7cd      	b.n	10126a4 <__s2b+0x34>

01012708 <__hi0bits>:
 1012708:	0c02      	lsrs	r2, r0, #16
 101270a:	4603      	mov	r3, r0
 101270c:	2000      	movs	r0, #0
 101270e:	0412      	lsls	r2, r2, #16
 1012710:	b90a      	cbnz	r2, 1012716 <__hi0bits+0xe>
 1012712:	041b      	lsls	r3, r3, #16
 1012714:	2010      	movs	r0, #16
 1012716:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 101271a:	bf04      	itt	eq
 101271c:	021b      	lsleq	r3, r3, #8
 101271e:	3008      	addeq	r0, #8
 1012720:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 1012724:	bf04      	itt	eq
 1012726:	011b      	lsleq	r3, r3, #4
 1012728:	3004      	addeq	r0, #4
 101272a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 101272e:	bf04      	itt	eq
 1012730:	009b      	lsleq	r3, r3, #2
 1012732:	3002      	addeq	r0, #2
 1012734:	2b00      	cmp	r3, #0
 1012736:	db05      	blt.n	1012744 <__hi0bits+0x3c>
 1012738:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 101273c:	f100 0001 	add.w	r0, r0, #1
 1012740:	bf08      	it	eq
 1012742:	2020      	moveq	r0, #32
 1012744:	4770      	bx	lr
 1012746:	bf00      	nop

01012748 <__lo0bits>:
 1012748:	6803      	ldr	r3, [r0, #0]
 101274a:	4601      	mov	r1, r0
 101274c:	f013 0207 	ands.w	r2, r3, #7
 1012750:	d009      	beq.n	1012766 <__lo0bits+0x1e>
 1012752:	07da      	lsls	r2, r3, #31
 1012754:	d422      	bmi.n	101279c <__lo0bits+0x54>
 1012756:	0798      	lsls	r0, r3, #30
 1012758:	bf4b      	itete	mi
 101275a:	085b      	lsrmi	r3, r3, #1
 101275c:	089b      	lsrpl	r3, r3, #2
 101275e:	2001      	movmi	r0, #1
 1012760:	2002      	movpl	r0, #2
 1012762:	600b      	str	r3, [r1, #0]
 1012764:	4770      	bx	lr
 1012766:	b298      	uxth	r0, r3
 1012768:	b9b0      	cbnz	r0, 1012798 <__lo0bits+0x50>
 101276a:	0c1b      	lsrs	r3, r3, #16
 101276c:	2010      	movs	r0, #16
 101276e:	f013 0fff 	tst.w	r3, #255	; 0xff
 1012772:	bf04      	itt	eq
 1012774:	0a1b      	lsreq	r3, r3, #8
 1012776:	3008      	addeq	r0, #8
 1012778:	071a      	lsls	r2, r3, #28
 101277a:	bf04      	itt	eq
 101277c:	091b      	lsreq	r3, r3, #4
 101277e:	3004      	addeq	r0, #4
 1012780:	079a      	lsls	r2, r3, #30
 1012782:	bf04      	itt	eq
 1012784:	089b      	lsreq	r3, r3, #2
 1012786:	3002      	addeq	r0, #2
 1012788:	07da      	lsls	r2, r3, #31
 101278a:	d403      	bmi.n	1012794 <__lo0bits+0x4c>
 101278c:	085b      	lsrs	r3, r3, #1
 101278e:	f100 0001 	add.w	r0, r0, #1
 1012792:	d005      	beq.n	10127a0 <__lo0bits+0x58>
 1012794:	600b      	str	r3, [r1, #0]
 1012796:	4770      	bx	lr
 1012798:	4610      	mov	r0, r2
 101279a:	e7e8      	b.n	101276e <__lo0bits+0x26>
 101279c:	2000      	movs	r0, #0
 101279e:	4770      	bx	lr
 10127a0:	2020      	movs	r0, #32
 10127a2:	4770      	bx	lr

010127a4 <__i2b>:
 10127a4:	b510      	push	{r4, lr}
 10127a6:	460c      	mov	r4, r1
 10127a8:	2101      	movs	r1, #1
 10127aa:	f7ff fee9 	bl	1012580 <_Balloc>
 10127ae:	2201      	movs	r2, #1
 10127b0:	6144      	str	r4, [r0, #20]
 10127b2:	6102      	str	r2, [r0, #16]
 10127b4:	bd10      	pop	{r4, pc}
 10127b6:	bf00      	nop

010127b8 <__multiply>:
 10127b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10127bc:	b083      	sub	sp, #12
 10127be:	690d      	ldr	r5, [r1, #16]
 10127c0:	6913      	ldr	r3, [r2, #16]
 10127c2:	429d      	cmp	r5, r3
 10127c4:	bfb5      	itete	lt
 10127c6:	4614      	movlt	r4, r2
 10127c8:	460c      	movge	r4, r1
 10127ca:	461f      	movlt	r7, r3
 10127cc:	469b      	movge	fp, r3
 10127ce:	68a3      	ldr	r3, [r4, #8]
 10127d0:	bfae      	itee	ge
 10127d2:	462f      	movge	r7, r5
 10127d4:	46ab      	movlt	fp, r5
 10127d6:	460d      	movlt	r5, r1
 10127d8:	eb07 080b 	add.w	r8, r7, fp
 10127dc:	6861      	ldr	r1, [r4, #4]
 10127de:	bfa8      	it	ge
 10127e0:	4615      	movge	r5, r2
 10127e2:	4543      	cmp	r3, r8
 10127e4:	bfb8      	it	lt
 10127e6:	3101      	addlt	r1, #1
 10127e8:	f7ff feca 	bl	1012580 <_Balloc>
 10127ec:	f100 0a14 	add.w	sl, r0, #20
 10127f0:	4603      	mov	r3, r0
 10127f2:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 10127f6:	9000      	str	r0, [sp, #0]
 10127f8:	45ca      	cmp	sl, r9
 10127fa:	bf3c      	itt	cc
 10127fc:	4653      	movcc	r3, sl
 10127fe:	2000      	movcc	r0, #0
 1012800:	d203      	bcs.n	101280a <__multiply+0x52>
 1012802:	f843 0b04 	str.w	r0, [r3], #4
 1012806:	4599      	cmp	r9, r3
 1012808:	d8fb      	bhi.n	1012802 <__multiply+0x4a>
 101280a:	f105 0e14 	add.w	lr, r5, #20
 101280e:	f104 0314 	add.w	r3, r4, #20
 1012812:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 1012816:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 101281a:	45de      	cmp	lr, fp
 101281c:	bf3c      	itt	cc
 101281e:	f8cd 8004 	strcc.w	r8, [sp, #4]
 1012822:	4698      	movcc	r8, r3
 1012824:	d306      	bcc.n	1012834 <__multiply+0x7c>
 1012826:	e051      	b.n	10128cc <__multiply+0x114>
 1012828:	0c24      	lsrs	r4, r4, #16
 101282a:	d12a      	bne.n	1012882 <__multiply+0xca>
 101282c:	45f3      	cmp	fp, lr
 101282e:	f10a 0a04 	add.w	sl, sl, #4
 1012832:	d949      	bls.n	10128c8 <__multiply+0x110>
 1012834:	f85e 4b04 	ldr.w	r4, [lr], #4
 1012838:	b2a6      	uxth	r6, r4
 101283a:	2e00      	cmp	r6, #0
 101283c:	d0f4      	beq.n	1012828 <__multiply+0x70>
 101283e:	4645      	mov	r5, r8
 1012840:	4654      	mov	r4, sl
 1012842:	2300      	movs	r3, #0
 1012844:	f855 1b04 	ldr.w	r1, [r5], #4
 1012848:	6820      	ldr	r0, [r4, #0]
 101284a:	42af      	cmp	r7, r5
 101284c:	b28a      	uxth	r2, r1
 101284e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 1012852:	fa1f fc80 	uxth.w	ip, r0
 1012856:	ea4f 4010 	mov.w	r0, r0, lsr #16
 101285a:	fb06 c202 	mla	r2, r6, r2, ip
 101285e:	fb06 0101 	mla	r1, r6, r1, r0
 1012862:	4413      	add	r3, r2
 1012864:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 1012868:	b29b      	uxth	r3, r3
 101286a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 101286e:	ea4f 4311 	mov.w	r3, r1, lsr #16
 1012872:	f844 2b04 	str.w	r2, [r4], #4
 1012876:	d8e5      	bhi.n	1012844 <__multiply+0x8c>
 1012878:	6023      	str	r3, [r4, #0]
 101287a:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 101287e:	0c24      	lsrs	r4, r4, #16
 1012880:	d0d4      	beq.n	101282c <__multiply+0x74>
 1012882:	f8da 3000 	ldr.w	r3, [sl]
 1012886:	4645      	mov	r5, r8
 1012888:	4656      	mov	r6, sl
 101288a:	2200      	movs	r2, #0
 101288c:	4618      	mov	r0, r3
 101288e:	8829      	ldrh	r1, [r5, #0]
 1012890:	0c00      	lsrs	r0, r0, #16
 1012892:	b29b      	uxth	r3, r3
 1012894:	fb04 0001 	mla	r0, r4, r1, r0
 1012898:	4402      	add	r2, r0
 101289a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 101289e:	f846 3b04 	str.w	r3, [r6], #4
 10128a2:	f855 3b04 	ldr.w	r3, [r5], #4
 10128a6:	6830      	ldr	r0, [r6, #0]
 10128a8:	42af      	cmp	r7, r5
 10128aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 10128ae:	b281      	uxth	r1, r0
 10128b0:	fb04 1303 	mla	r3, r4, r3, r1
 10128b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 10128b8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 10128bc:	d8e7      	bhi.n	101288e <__multiply+0xd6>
 10128be:	45f3      	cmp	fp, lr
 10128c0:	6033      	str	r3, [r6, #0]
 10128c2:	f10a 0a04 	add.w	sl, sl, #4
 10128c6:	d8b5      	bhi.n	1012834 <__multiply+0x7c>
 10128c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 10128cc:	f1b8 0f00 	cmp.w	r8, #0
 10128d0:	dd0b      	ble.n	10128ea <__multiply+0x132>
 10128d2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 10128d6:	f1a9 0904 	sub.w	r9, r9, #4
 10128da:	b11b      	cbz	r3, 10128e4 <__multiply+0x12c>
 10128dc:	e005      	b.n	10128ea <__multiply+0x132>
 10128de:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 10128e2:	b913      	cbnz	r3, 10128ea <__multiply+0x132>
 10128e4:	f1b8 0801 	subs.w	r8, r8, #1
 10128e8:	d1f9      	bne.n	10128de <__multiply+0x126>
 10128ea:	9800      	ldr	r0, [sp, #0]
 10128ec:	f8c0 8010 	str.w	r8, [r0, #16]
 10128f0:	b003      	add	sp, #12
 10128f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10128f6:	bf00      	nop

010128f8 <__pow5mult>:
 10128f8:	f012 0303 	ands.w	r3, r2, #3
 10128fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1012900:	4614      	mov	r4, r2
 1012902:	4607      	mov	r7, r0
 1012904:	bf08      	it	eq
 1012906:	460d      	moveq	r5, r1
 1012908:	d12d      	bne.n	1012966 <__pow5mult+0x6e>
 101290a:	10a4      	asrs	r4, r4, #2
 101290c:	d01c      	beq.n	1012948 <__pow5mult+0x50>
 101290e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 1012910:	b3ae      	cbz	r6, 101297e <__pow5mult+0x86>
 1012912:	07e3      	lsls	r3, r4, #31
 1012914:	f04f 0800 	mov.w	r8, #0
 1012918:	d406      	bmi.n	1012928 <__pow5mult+0x30>
 101291a:	1064      	asrs	r4, r4, #1
 101291c:	d014      	beq.n	1012948 <__pow5mult+0x50>
 101291e:	6830      	ldr	r0, [r6, #0]
 1012920:	b1a8      	cbz	r0, 101294e <__pow5mult+0x56>
 1012922:	4606      	mov	r6, r0
 1012924:	07e3      	lsls	r3, r4, #31
 1012926:	d5f8      	bpl.n	101291a <__pow5mult+0x22>
 1012928:	4632      	mov	r2, r6
 101292a:	4629      	mov	r1, r5
 101292c:	4638      	mov	r0, r7
 101292e:	f7ff ff43 	bl	10127b8 <__multiply>
 1012932:	b1b5      	cbz	r5, 1012962 <__pow5mult+0x6a>
 1012934:	686a      	ldr	r2, [r5, #4]
 1012936:	1064      	asrs	r4, r4, #1
 1012938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 101293a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 101293e:	6029      	str	r1, [r5, #0]
 1012940:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1012944:	4605      	mov	r5, r0
 1012946:	d1ea      	bne.n	101291e <__pow5mult+0x26>
 1012948:	4628      	mov	r0, r5
 101294a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101294e:	4632      	mov	r2, r6
 1012950:	4631      	mov	r1, r6
 1012952:	4638      	mov	r0, r7
 1012954:	f7ff ff30 	bl	10127b8 <__multiply>
 1012958:	6030      	str	r0, [r6, #0]
 101295a:	4606      	mov	r6, r0
 101295c:	f8c0 8000 	str.w	r8, [r0]
 1012960:	e7e0      	b.n	1012924 <__pow5mult+0x2c>
 1012962:	4605      	mov	r5, r0
 1012964:	e7d9      	b.n	101291a <__pow5mult+0x22>
 1012966:	1e5a      	subs	r2, r3, #1
 1012968:	f645 5540 	movw	r5, #23872	; 0x5d40
 101296c:	f2c0 1505 	movt	r5, #261	; 0x105
 1012970:	2300      	movs	r3, #0
 1012972:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 1012976:	f7ff fe33 	bl	10125e0 <__multadd>
 101297a:	4605      	mov	r5, r0
 101297c:	e7c5      	b.n	101290a <__pow5mult+0x12>
 101297e:	2101      	movs	r1, #1
 1012980:	4638      	mov	r0, r7
 1012982:	f7ff fdfd 	bl	1012580 <_Balloc>
 1012986:	2301      	movs	r3, #1
 1012988:	f240 2271 	movw	r2, #625	; 0x271
 101298c:	4606      	mov	r6, r0
 101298e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 1012992:	2300      	movs	r3, #0
 1012994:	64b8      	str	r0, [r7, #72]	; 0x48
 1012996:	6003      	str	r3, [r0, #0]
 1012998:	e7bb      	b.n	1012912 <__pow5mult+0x1a>
 101299a:	bf00      	nop

0101299c <__lshift>:
 101299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10129a0:	ea4f 1962 	mov.w	r9, r2, asr #5
 10129a4:	690e      	ldr	r6, [r1, #16]
 10129a6:	460d      	mov	r5, r1
 10129a8:	688b      	ldr	r3, [r1, #8]
 10129aa:	4690      	mov	r8, r2
 10129ac:	444e      	add	r6, r9
 10129ae:	4607      	mov	r7, r0
 10129b0:	1c74      	adds	r4, r6, #1
 10129b2:	6849      	ldr	r1, [r1, #4]
 10129b4:	429c      	cmp	r4, r3
 10129b6:	dd03      	ble.n	10129c0 <__lshift+0x24>
 10129b8:	005b      	lsls	r3, r3, #1
 10129ba:	3101      	adds	r1, #1
 10129bc:	429c      	cmp	r4, r3
 10129be:	dcfb      	bgt.n	10129b8 <__lshift+0x1c>
 10129c0:	4638      	mov	r0, r7
 10129c2:	f7ff fddd 	bl	1012580 <_Balloc>
 10129c6:	f1b9 0f00 	cmp.w	r9, #0
 10129ca:	4684      	mov	ip, r0
 10129cc:	f100 0014 	add.w	r0, r0, #20
 10129d0:	dd0e      	ble.n	10129f0 <__lshift+0x54>
 10129d2:	f109 0905 	add.w	r9, r9, #5
 10129d6:	4603      	mov	r3, r0
 10129d8:	2100      	movs	r1, #0
 10129da:	ea4f 0989 	mov.w	r9, r9, lsl #2
 10129de:	eb0c 0209 	add.w	r2, ip, r9
 10129e2:	f843 1b04 	str.w	r1, [r3], #4
 10129e6:	4293      	cmp	r3, r2
 10129e8:	d1fb      	bne.n	10129e2 <__lshift+0x46>
 10129ea:	f1a9 0914 	sub.w	r9, r9, #20
 10129ee:	4448      	add	r0, r9
 10129f0:	6929      	ldr	r1, [r5, #16]
 10129f2:	f018 081f 	ands.w	r8, r8, #31
 10129f6:	f105 0314 	add.w	r3, r5, #20
 10129fa:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 10129fe:	d022      	beq.n	1012a46 <__lshift+0xaa>
 1012a00:	f1c8 0220 	rsb	r2, r8, #32
 1012a04:	f04f 0900 	mov.w	r9, #0
 1012a08:	6819      	ldr	r1, [r3, #0]
 1012a0a:	fa01 f108 	lsl.w	r1, r1, r8
 1012a0e:	ea41 0109 	orr.w	r1, r1, r9
 1012a12:	f840 1b04 	str.w	r1, [r0], #4
 1012a16:	f853 1b04 	ldr.w	r1, [r3], #4
 1012a1a:	4573      	cmp	r3, lr
 1012a1c:	fa21 f902 	lsr.w	r9, r1, r2
 1012a20:	d3f2      	bcc.n	1012a08 <__lshift+0x6c>
 1012a22:	f1b9 0f00 	cmp.w	r9, #0
 1012a26:	bf18      	it	ne
 1012a28:	4626      	movne	r6, r4
 1012a2a:	f8c0 9000 	str.w	r9, [r0]
 1012a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1012a30:	4660      	mov	r0, ip
 1012a32:	686a      	ldr	r2, [r5, #4]
 1012a34:	f8cc 6010 	str.w	r6, [ip, #16]
 1012a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 1012a3c:	6029      	str	r1, [r5, #0]
 1012a3e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1012a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1012a46:	3804      	subs	r0, #4
 1012a48:	f853 2b04 	ldr.w	r2, [r3], #4
 1012a4c:	459e      	cmp	lr, r3
 1012a4e:	f840 2f04 	str.w	r2, [r0, #4]!
 1012a52:	d8f9      	bhi.n	1012a48 <__lshift+0xac>
 1012a54:	e7eb      	b.n	1012a2e <__lshift+0x92>
 1012a56:	bf00      	nop

01012a58 <__mcmp>:
 1012a58:	b430      	push	{r4, r5}
 1012a5a:	4605      	mov	r5, r0
 1012a5c:	690a      	ldr	r2, [r1, #16]
 1012a5e:	6900      	ldr	r0, [r0, #16]
 1012a60:	1a80      	subs	r0, r0, r2
 1012a62:	d110      	bne.n	1012a86 <__mcmp+0x2e>
 1012a64:	0092      	lsls	r2, r2, #2
 1012a66:	3514      	adds	r5, #20
 1012a68:	3114      	adds	r1, #20
 1012a6a:	18ab      	adds	r3, r5, r2
 1012a6c:	4411      	add	r1, r2
 1012a6e:	e001      	b.n	1012a74 <__mcmp+0x1c>
 1012a70:	429d      	cmp	r5, r3
 1012a72:	d208      	bcs.n	1012a86 <__mcmp+0x2e>
 1012a74:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 1012a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 1012a7c:	4294      	cmp	r4, r2
 1012a7e:	d0f7      	beq.n	1012a70 <__mcmp+0x18>
 1012a80:	bf28      	it	cs
 1012a82:	2001      	movcs	r0, #1
 1012a84:	d301      	bcc.n	1012a8a <__mcmp+0x32>
 1012a86:	bc30      	pop	{r4, r5}
 1012a88:	4770      	bx	lr
 1012a8a:	f04f 30ff 	mov.w	r0, #4294967295
 1012a8e:	bc30      	pop	{r4, r5}
 1012a90:	4770      	bx	lr
 1012a92:	bf00      	nop

01012a94 <__mdiff>:
 1012a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1012a98:	460f      	mov	r7, r1
 1012a9a:	690d      	ldr	r5, [r1, #16]
 1012a9c:	4616      	mov	r6, r2
 1012a9e:	6911      	ldr	r1, [r2, #16]
 1012aa0:	4684      	mov	ip, r0
 1012aa2:	f107 0414 	add.w	r4, r7, #20
 1012aa6:	f102 0914 	add.w	r9, r2, #20
 1012aaa:	1a6d      	subs	r5, r5, r1
 1012aac:	2d00      	cmp	r5, #0
 1012aae:	d15f      	bne.n	1012b70 <__mdiff+0xdc>
 1012ab0:	0089      	lsls	r1, r1, #2
 1012ab2:	1863      	adds	r3, r4, r1
 1012ab4:	4449      	add	r1, r9
 1012ab6:	e001      	b.n	1012abc <__mdiff+0x28>
 1012ab8:	42a3      	cmp	r3, r4
 1012aba:	d964      	bls.n	1012b86 <__mdiff+0xf2>
 1012abc:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 1012ac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 1012ac4:	4290      	cmp	r0, r2
 1012ac6:	d0f7      	beq.n	1012ab8 <__mdiff+0x24>
 1012ac8:	d355      	bcc.n	1012b76 <__mdiff+0xe2>
 1012aca:	4660      	mov	r0, ip
 1012acc:	6879      	ldr	r1, [r7, #4]
 1012ace:	f7ff fd57 	bl	1012580 <_Balloc>
 1012ad2:	f8d7 8010 	ldr.w	r8, [r7, #16]
 1012ad6:	6933      	ldr	r3, [r6, #16]
 1012ad8:	46cc      	mov	ip, r9
 1012ada:	4627      	mov	r7, r4
 1012adc:	2200      	movs	r2, #0
 1012ade:	eb04 0e88 	add.w	lr, r4, r8, lsl #2
 1012ae2:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 1012ae6:	60c5      	str	r5, [r0, #12]
 1012ae8:	f100 0514 	add.w	r5, r0, #20
 1012aec:	e000      	b.n	1012af0 <__mdiff+0x5c>
 1012aee:	4625      	mov	r5, r4
 1012af0:	f857 ab04 	ldr.w	sl, [r7], #4
 1012af4:	462c      	mov	r4, r5
 1012af6:	f85c 1b04 	ldr.w	r1, [ip], #4
 1012afa:	fa12 f38a 	uxtah	r3, r2, sl
 1012afe:	45e1      	cmp	r9, ip
 1012b00:	fa1f fb81 	uxth.w	fp, r1
 1012b04:	ea4f 4211 	mov.w	r2, r1, lsr #16
 1012b08:	eba3 030b 	sub.w	r3, r3, fp
 1012b0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 1012b10:	463e      	mov	r6, r7
 1012b12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 1012b16:	b29b      	uxth	r3, r3
 1012b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1012b1c:	ea4f 4222 	mov.w	r2, r2, asr #16
 1012b20:	f844 3b04 	str.w	r3, [r4], #4
 1012b24:	d8e3      	bhi.n	1012aee <__mdiff+0x5a>
 1012b26:	45be      	cmp	lr, r7
 1012b28:	d917      	bls.n	1012b5a <__mdiff+0xc6>
 1012b2a:	4625      	mov	r5, r4
 1012b2c:	f856 1b04 	ldr.w	r1, [r6], #4
 1012b30:	45b6      	cmp	lr, r6
 1012b32:	fa12 f381 	uxtah	r3, r2, r1
 1012b36:	ea4f 4223 	mov.w	r2, r3, asr #16
 1012b3a:	b29b      	uxth	r3, r3
 1012b3c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 1012b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1012b44:	ea4f 4222 	mov.w	r2, r2, asr #16
 1012b48:	f845 3b04 	str.w	r3, [r5], #4
 1012b4c:	d8ee      	bhi.n	1012b2c <__mdiff+0x98>
 1012b4e:	f10e 35ff 	add.w	r5, lr, #4294967295
 1012b52:	1bed      	subs	r5, r5, r7
 1012b54:	f025 0503 	bic.w	r5, r5, #3
 1012b58:	4425      	add	r5, r4
 1012b5a:	b92b      	cbnz	r3, 1012b68 <__mdiff+0xd4>
 1012b5c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 1012b60:	f108 38ff 	add.w	r8, r8, #4294967295
 1012b64:	2b00      	cmp	r3, #0
 1012b66:	d0f9      	beq.n	1012b5c <__mdiff+0xc8>
 1012b68:	f8c0 8010 	str.w	r8, [r0, #16]
 1012b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012b70:	bfa8      	it	ge
 1012b72:	2500      	movge	r5, #0
 1012b74:	daa9      	bge.n	1012aca <__mdiff+0x36>
 1012b76:	4622      	mov	r2, r4
 1012b78:	463b      	mov	r3, r7
 1012b7a:	464c      	mov	r4, r9
 1012b7c:	4637      	mov	r7, r6
 1012b7e:	4691      	mov	r9, r2
 1012b80:	461e      	mov	r6, r3
 1012b82:	2501      	movs	r5, #1
 1012b84:	e7a1      	b.n	1012aca <__mdiff+0x36>
 1012b86:	4660      	mov	r0, ip
 1012b88:	2100      	movs	r1, #0
 1012b8a:	f7ff fcf9 	bl	1012580 <_Balloc>
 1012b8e:	2201      	movs	r2, #1
 1012b90:	2300      	movs	r3, #0
 1012b92:	e9c0 2304 	strd	r2, r3, [r0, #16]
 1012b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012b9a:	bf00      	nop

01012b9c <__ulp>:
 1012b9c:	ee10 2a90 	vmov	r2, s1
 1012ba0:	2300      	movs	r3, #0
 1012ba2:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 1012ba6:	401a      	ands	r2, r3
 1012ba8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 1012bac:	2b00      	cmp	r3, #0
 1012bae:	dd04      	ble.n	1012bba <__ulp+0x1e>
 1012bb0:	2000      	movs	r0, #0
 1012bb2:	4619      	mov	r1, r3
 1012bb4:	ec41 0b10 	vmov	d0, r0, r1
 1012bb8:	4770      	bx	lr
 1012bba:	425b      	negs	r3, r3
 1012bbc:	151b      	asrs	r3, r3, #20
 1012bbe:	2b13      	cmp	r3, #19
 1012bc0:	dc07      	bgt.n	1012bd2 <__ulp+0x36>
 1012bc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 1012bc6:	2000      	movs	r0, #0
 1012bc8:	fa42 f103 	asr.w	r1, r2, r3
 1012bcc:	ec41 0b10 	vmov	d0, r0, r1
 1012bd0:	4770      	bx	lr
 1012bd2:	3b14      	subs	r3, #20
 1012bd4:	2100      	movs	r1, #0
 1012bd6:	2b1e      	cmp	r3, #30
 1012bd8:	bfd6      	itet	le
 1012bda:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 1012bde:	2301      	movgt	r3, #1
 1012be0:	fa22 f303 	lsrle.w	r3, r2, r3
 1012be4:	4618      	mov	r0, r3
 1012be6:	ec41 0b10 	vmov	d0, r0, r1
 1012bea:	4770      	bx	lr

01012bec <__b2d>:
 1012bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1012bee:	f100 0614 	add.w	r6, r0, #20
 1012bf2:	6904      	ldr	r4, [r0, #16]
 1012bf4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 1012bf8:	1f27      	subs	r7, r4, #4
 1012bfa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 1012bfe:	4628      	mov	r0, r5
 1012c00:	f7ff fd82 	bl	1012708 <__hi0bits>
 1012c04:	280a      	cmp	r0, #10
 1012c06:	f1c0 0320 	rsb	r3, r0, #32
 1012c0a:	600b      	str	r3, [r1, #0]
 1012c0c:	dd24      	ble.n	1012c58 <__b2d+0x6c>
 1012c0e:	42be      	cmp	r6, r7
 1012c10:	f1a0 000b 	sub.w	r0, r0, #11
 1012c14:	d219      	bcs.n	1012c4a <__b2d+0x5e>
 1012c16:	f854 1c08 	ldr.w	r1, [r4, #-8]
 1012c1a:	b1c0      	cbz	r0, 1012c4e <__b2d+0x62>
 1012c1c:	f1c0 0720 	rsb	r7, r0, #32
 1012c20:	4085      	lsls	r5, r0
 1012c22:	fa21 f307 	lsr.w	r3, r1, r7
 1012c26:	4081      	lsls	r1, r0
 1012c28:	431d      	orrs	r5, r3
 1012c2a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1012c2e:	f1a4 0508 	sub.w	r5, r4, #8
 1012c32:	42ae      	cmp	r6, r5
 1012c34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1012c38:	d203      	bcs.n	1012c42 <__b2d+0x56>
 1012c3a:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 1012c3e:	40f8      	lsrs	r0, r7
 1012c40:	4301      	orrs	r1, r0
 1012c42:	460a      	mov	r2, r1
 1012c44:	ec43 2b10 	vmov	d0, r2, r3
 1012c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1012c4a:	4601      	mov	r1, r0
 1012c4c:	b9e8      	cbnz	r0, 1012c8a <__b2d+0x9e>
 1012c4e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1012c52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1012c56:	e7f4      	b.n	1012c42 <__b2d+0x56>
 1012c58:	f1c0 0c0b 	rsb	ip, r0, #11
 1012c5c:	42be      	cmp	r6, r7
 1012c5e:	fa25 f10c 	lsr.w	r1, r5, ip
 1012c62:	f100 0015 	add.w	r0, r0, #21
 1012c66:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1012c6a:	bf38      	it	cc
 1012c6c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 1012c70:	fa05 f000 	lsl.w	r0, r5, r0
 1012c74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1012c78:	bf2c      	ite	cs
 1012c7a:	2100      	movcs	r1, #0
 1012c7c:	fa21 f10c 	lsrcc.w	r1, r1, ip
 1012c80:	ea40 0201 	orr.w	r2, r0, r1
 1012c84:	ec43 2b10 	vmov	d0, r2, r3
 1012c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1012c8a:	fa05 f000 	lsl.w	r0, r5, r0
 1012c8e:	2100      	movs	r1, #0
 1012c90:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 1012c94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1012c98:	e7d3      	b.n	1012c42 <__b2d+0x56>
 1012c9a:	bf00      	nop

01012c9c <__d2b>:
 1012c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1012ca0:	4688      	mov	r8, r1
 1012ca2:	b083      	sub	sp, #12
 1012ca4:	2101      	movs	r1, #1
 1012ca6:	ec55 4b10 	vmov	r4, r5, d0
 1012caa:	4617      	mov	r7, r2
 1012cac:	f7ff fc68 	bl	1012580 <_Balloc>
 1012cb0:	f3c5 560a 	ubfx	r6, r5, #20, #11
 1012cb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 1012cb8:	4681      	mov	r9, r0
 1012cba:	b10e      	cbz	r6, 1012cc0 <__d2b+0x24>
 1012cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1012cc0:	2c00      	cmp	r4, #0
 1012cc2:	9301      	str	r3, [sp, #4]
 1012cc4:	d029      	beq.n	1012d1a <__d2b+0x7e>
 1012cc6:	4668      	mov	r0, sp
 1012cc8:	9400      	str	r4, [sp, #0]
 1012cca:	f7ff fd3d 	bl	1012748 <__lo0bits>
 1012cce:	b9c0      	cbnz	r0, 1012d02 <__d2b+0x66>
 1012cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 1012cd4:	f8c9 2014 	str.w	r2, [r9, #20]
 1012cd8:	2b00      	cmp	r3, #0
 1012cda:	f8c9 3018 	str.w	r3, [r9, #24]
 1012cde:	bf14      	ite	ne
 1012ce0:	2102      	movne	r1, #2
 1012ce2:	2101      	moveq	r1, #1
 1012ce4:	f8c9 1010 	str.w	r1, [r9, #16]
 1012ce8:	b30e      	cbz	r6, 1012d2e <__d2b+0x92>
 1012cea:	f2a6 4633 	subw	r6, r6, #1075	; 0x433
 1012cee:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 1012cf2:	4406      	add	r6, r0
 1012cf4:	4648      	mov	r0, r9
 1012cf6:	f8c8 6000 	str.w	r6, [r8]
 1012cfa:	603b      	str	r3, [r7, #0]
 1012cfc:	b003      	add	sp, #12
 1012cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1012d02:	9b01      	ldr	r3, [sp, #4]
 1012d04:	f1c0 0220 	rsb	r2, r0, #32
 1012d08:	9900      	ldr	r1, [sp, #0]
 1012d0a:	fa03 f202 	lsl.w	r2, r3, r2
 1012d0e:	40c3      	lsrs	r3, r0
 1012d10:	430a      	orrs	r2, r1
 1012d12:	9301      	str	r3, [sp, #4]
 1012d14:	f8c9 2014 	str.w	r2, [r9, #20]
 1012d18:	e7de      	b.n	1012cd8 <__d2b+0x3c>
 1012d1a:	a801      	add	r0, sp, #4
 1012d1c:	f7ff fd14 	bl	1012748 <__lo0bits>
 1012d20:	9b01      	ldr	r3, [sp, #4]
 1012d22:	2101      	movs	r1, #1
 1012d24:	e9c9 1304 	strd	r1, r3, [r9, #16]
 1012d28:	3020      	adds	r0, #32
 1012d2a:	2e00      	cmp	r6, #0
 1012d2c:	d1dd      	bne.n	1012cea <__d2b+0x4e>
 1012d2e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 1012d32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 1012d36:	f8c8 0000 	str.w	r0, [r8]
 1012d3a:	6918      	ldr	r0, [r3, #16]
 1012d3c:	f7ff fce4 	bl	1012708 <__hi0bits>
 1012d40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 1012d44:	6038      	str	r0, [r7, #0]
 1012d46:	4648      	mov	r0, r9
 1012d48:	b003      	add	sp, #12
 1012d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1012d4e:	bf00      	nop

01012d50 <__ratio>:
 1012d50:	b530      	push	{r4, r5, lr}
 1012d52:	b087      	sub	sp, #28
 1012d54:	460c      	mov	r4, r1
 1012d56:	a904      	add	r1, sp, #16
 1012d58:	4605      	mov	r5, r0
 1012d5a:	f7ff ff47 	bl	1012bec <__b2d>
 1012d5e:	4620      	mov	r0, r4
 1012d60:	a905      	add	r1, sp, #20
 1012d62:	ed8d 0b00 	vstr	d0, [sp]
 1012d66:	f7ff ff41 	bl	1012bec <__b2d>
 1012d6a:	6920      	ldr	r0, [r4, #16]
 1012d6c:	6929      	ldr	r1, [r5, #16]
 1012d6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 1012d72:	1a09      	subs	r1, r1, r0
 1012d74:	1ad3      	subs	r3, r2, r3
 1012d76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 1012d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 1012d7e:	2b00      	cmp	r3, #0
 1012d80:	ed8d 0b02 	vstr	d0, [sp, #8]
 1012d84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 1012d88:	dd0c      	ble.n	1012da4 <__ratio+0x54>
 1012d8a:	9a01      	ldr	r2, [sp, #4]
 1012d8c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 1012d90:	e9cd 0100 	strd	r0, r1, [sp]
 1012d94:	ed9d 7b00 	vldr	d7, [sp]
 1012d98:	ed9d 6b02 	vldr	d6, [sp, #8]
 1012d9c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 1012da0:	b007      	add	sp, #28
 1012da2:	bd30      	pop	{r4, r5, pc}
 1012da4:	9a03      	ldr	r2, [sp, #12]
 1012da6:	eba2 5503 	sub.w	r5, r2, r3, lsl #20
 1012daa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 1012dae:	e7f1      	b.n	1012d94 <__ratio+0x44>

01012db0 <_mprec_log10>:
 1012db0:	2817      	cmp	r0, #23
 1012db2:	dd08      	ble.n	1012dc6 <_mprec_log10+0x16>
 1012db4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 1012db8:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 1012dbc:	3801      	subs	r0, #1
 1012dbe:	ee20 0b07 	vmul.f64	d0, d0, d7
 1012dc2:	d1fb      	bne.n	1012dbc <_mprec_log10+0xc>
 1012dc4:	4770      	bx	lr
 1012dc6:	f645 5340 	movw	r3, #23872	; 0x5d40
 1012dca:	f2c0 1305 	movt	r3, #261	; 0x105
 1012dce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 1012dd2:	ed90 0b04 	vldr	d0, [r0, #16]
 1012dd6:	4770      	bx	lr

01012dd8 <__copybits>:
 1012dd8:	b470      	push	{r4, r5, r6}
 1012dda:	3901      	subs	r1, #1
 1012ddc:	6914      	ldr	r4, [r2, #16]
 1012dde:	f102 0314 	add.w	r3, r2, #20
 1012de2:	1149      	asrs	r1, r1, #5
 1012de4:	1c4e      	adds	r6, r1, #1
 1012de6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 1012dea:	428b      	cmp	r3, r1
 1012dec:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 1012df0:	d20c      	bcs.n	1012e0c <__copybits+0x34>
 1012df2:	1f04      	subs	r4, r0, #4
 1012df4:	f853 5b04 	ldr.w	r5, [r3], #4
 1012df8:	4299      	cmp	r1, r3
 1012dfa:	f844 5f04 	str.w	r5, [r4, #4]!
 1012dfe:	d8f9      	bhi.n	1012df4 <__copybits+0x1c>
 1012e00:	1a8b      	subs	r3, r1, r2
 1012e02:	3b15      	subs	r3, #21
 1012e04:	f023 0303 	bic.w	r3, r3, #3
 1012e08:	3304      	adds	r3, #4
 1012e0a:	4418      	add	r0, r3
 1012e0c:	4286      	cmp	r6, r0
 1012e0e:	d904      	bls.n	1012e1a <__copybits+0x42>
 1012e10:	2300      	movs	r3, #0
 1012e12:	f840 3b04 	str.w	r3, [r0], #4
 1012e16:	4286      	cmp	r6, r0
 1012e18:	d8fb      	bhi.n	1012e12 <__copybits+0x3a>
 1012e1a:	bc70      	pop	{r4, r5, r6}
 1012e1c:	4770      	bx	lr
 1012e1e:	bf00      	nop

01012e20 <__any_on>:
 1012e20:	6903      	ldr	r3, [r0, #16]
 1012e22:	114a      	asrs	r2, r1, #5
 1012e24:	b410      	push	{r4}
 1012e26:	4293      	cmp	r3, r2
 1012e28:	f100 0414 	add.w	r4, r0, #20
 1012e2c:	bfb8      	it	lt
 1012e2e:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 1012e32:	db02      	blt.n	1012e3a <__any_on+0x1a>
 1012e34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 1012e38:	dc0e      	bgt.n	1012e58 <__any_on+0x38>
 1012e3a:	429c      	cmp	r4, r3
 1012e3c:	d21b      	bcs.n	1012e76 <__any_on+0x56>
 1012e3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 1012e42:	3b04      	subs	r3, #4
 1012e44:	b118      	cbz	r0, 1012e4e <__any_on+0x2e>
 1012e46:	e012      	b.n	1012e6e <__any_on+0x4e>
 1012e48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 1012e4c:	b97a      	cbnz	r2, 1012e6e <__any_on+0x4e>
 1012e4e:	429c      	cmp	r4, r3
 1012e50:	d3fa      	bcc.n	1012e48 <__any_on+0x28>
 1012e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 1012e56:	4770      	bx	lr
 1012e58:	f011 011f 	ands.w	r1, r1, #31
 1012e5c:	d0ed      	beq.n	1012e3a <__any_on+0x1a>
 1012e5e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 1012e62:	fa20 f201 	lsr.w	r2, r0, r1
 1012e66:	fa02 f101 	lsl.w	r1, r2, r1
 1012e6a:	4288      	cmp	r0, r1
 1012e6c:	d0e5      	beq.n	1012e3a <__any_on+0x1a>
 1012e6e:	2001      	movs	r0, #1
 1012e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 1012e74:	4770      	bx	lr
 1012e76:	2000      	movs	r0, #0
 1012e78:	e7eb      	b.n	1012e52 <__any_on+0x32>
 1012e7a:	bf00      	nop

01012e7c <_realloc_r>:
 1012e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1012e80:	4692      	mov	sl, r2
 1012e82:	b083      	sub	sp, #12
 1012e84:	2900      	cmp	r1, #0
 1012e86:	f000 80df 	beq.w	1013048 <_realloc_r+0x1cc>
 1012e8a:	460d      	mov	r5, r1
 1012e8c:	4680      	mov	r8, r0
 1012e8e:	f7f9 f977 	bl	100c180 <__malloc_lock>
 1012e92:	f10a 040b 	add.w	r4, sl, #11
 1012e96:	2c16      	cmp	r4, #22
 1012e98:	f855 1c04 	ldr.w	r1, [r5, #-4]
 1012e9c:	bf88      	it	hi
 1012e9e:	f024 0407 	bichi.w	r4, r4, #7
 1012ea2:	f1a5 0708 	sub.w	r7, r5, #8
 1012ea6:	bf99      	ittee	ls
 1012ea8:	2210      	movls	r2, #16
 1012eaa:	2300      	movls	r3, #0
 1012eac:	0fe3      	lsrhi	r3, r4, #31
 1012eae:	4622      	movhi	r2, r4
 1012eb0:	f021 0603 	bic.w	r6, r1, #3
 1012eb4:	bf98      	it	ls
 1012eb6:	4614      	movls	r4, r2
 1012eb8:	4554      	cmp	r4, sl
 1012eba:	bf38      	it	cc
 1012ebc:	f043 0301 	orrcc.w	r3, r3, #1
 1012ec0:	2b00      	cmp	r3, #0
 1012ec2:	f040 80c7 	bne.w	1013054 <_realloc_r+0x1d8>
 1012ec6:	4296      	cmp	r6, r2
 1012ec8:	eb07 0906 	add.w	r9, r7, r6
 1012ecc:	f280 808b 	bge.w	1012fe6 <_realloc_r+0x16a>
 1012ed0:	f648 5b14 	movw	fp, #36116	; 0x8d14
 1012ed4:	f2c0 1b05 	movt	fp, #261	; 0x105
 1012ed8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 1012edc:	f8db 3008 	ldr.w	r3, [fp, #8]
 1012ee0:	454b      	cmp	r3, r9
 1012ee2:	f000 80c0 	beq.w	1013066 <_realloc_r+0x1ea>
 1012ee6:	f020 0301 	bic.w	r3, r0, #1
 1012eea:	444b      	add	r3, r9
 1012eec:	685b      	ldr	r3, [r3, #4]
 1012eee:	07db      	lsls	r3, r3, #31
 1012ef0:	f100 80a0 	bmi.w	1013034 <_realloc_r+0x1b8>
 1012ef4:	f020 0003 	bic.w	r0, r0, #3
 1012ef8:	1833      	adds	r3, r6, r0
 1012efa:	4293      	cmp	r3, r2
 1012efc:	f280 810c 	bge.w	1013118 <_realloc_r+0x29c>
 1012f00:	07c9      	lsls	r1, r1, #31
 1012f02:	d40f      	bmi.n	1012f24 <_realloc_r+0xa8>
 1012f04:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1012f08:	1afb      	subs	r3, r7, r3
 1012f0a:	6859      	ldr	r1, [r3, #4]
 1012f0c:	f021 0103 	bic.w	r1, r1, #3
 1012f10:	4408      	add	r0, r1
 1012f12:	eb00 0c06 	add.w	ip, r0, r6
 1012f16:	4594      	cmp	ip, r2
 1012f18:	f280 811f 	bge.w	101315a <_realloc_r+0x2de>
 1012f1c:	eb06 0c01 	add.w	ip, r6, r1
 1012f20:	4594      	cmp	ip, r2
 1012f22:	da2a      	bge.n	1012f7a <_realloc_r+0xfe>
 1012f24:	4651      	mov	r1, sl
 1012f26:	4640      	mov	r0, r8
 1012f28:	f7f8 f8d6 	bl	100b0d8 <_malloc_r>
 1012f2c:	4682      	mov	sl, r0
 1012f2e:	b1e8      	cbz	r0, 1012f6c <_realloc_r+0xf0>
 1012f30:	f855 3c04 	ldr.w	r3, [r5, #-4]
 1012f34:	f1a0 0208 	sub.w	r2, r0, #8
 1012f38:	f023 0301 	bic.w	r3, r3, #1
 1012f3c:	443b      	add	r3, r7
 1012f3e:	4293      	cmp	r3, r2
 1012f40:	f000 80f4 	beq.w	101312c <_realloc_r+0x2b0>
 1012f44:	1f32      	subs	r2, r6, #4
 1012f46:	2a24      	cmp	r2, #36	; 0x24
 1012f48:	f200 8103 	bhi.w	1013152 <_realloc_r+0x2d6>
 1012f4c:	2a13      	cmp	r2, #19
 1012f4e:	6829      	ldr	r1, [r5, #0]
 1012f50:	bf9c      	itt	ls
 1012f52:	4603      	movls	r3, r0
 1012f54:	462a      	movls	r2, r5
 1012f56:	f200 80f1 	bhi.w	101313c <_realloc_r+0x2c0>
 1012f5a:	6019      	str	r1, [r3, #0]
 1012f5c:	6851      	ldr	r1, [r2, #4]
 1012f5e:	6059      	str	r1, [r3, #4]
 1012f60:	6892      	ldr	r2, [r2, #8]
 1012f62:	609a      	str	r2, [r3, #8]
 1012f64:	4629      	mov	r1, r5
 1012f66:	4640      	mov	r0, r8
 1012f68:	f7fe fe8a 	bl	1011c80 <_free_r>
 1012f6c:	4640      	mov	r0, r8
 1012f6e:	f7f9 f909 	bl	100c184 <__malloc_unlock>
 1012f72:	4650      	mov	r0, sl
 1012f74:	b003      	add	sp, #12
 1012f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012f7a:	469a      	mov	sl, r3
 1012f7c:	68d9      	ldr	r1, [r3, #12]
 1012f7e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1012f82:	1f32      	subs	r2, r6, #4
 1012f84:	2a24      	cmp	r2, #36	; 0x24
 1012f86:	eb03 090c 	add.w	r9, r3, ip
 1012f8a:	60c1      	str	r1, [r0, #12]
 1012f8c:	6088      	str	r0, [r1, #8]
 1012f8e:	f200 80f6 	bhi.w	101317e <_realloc_r+0x302>
 1012f92:	2a13      	cmp	r2, #19
 1012f94:	6829      	ldr	r1, [r5, #0]
 1012f96:	bf98      	it	ls
 1012f98:	4652      	movls	r2, sl
 1012f9a:	d91c      	bls.n	1012fd6 <_realloc_r+0x15a>
 1012f9c:	6099      	str	r1, [r3, #8]
 1012f9e:	2a1b      	cmp	r2, #27
 1012fa0:	6869      	ldr	r1, [r5, #4]
 1012fa2:	bf98      	it	ls
 1012fa4:	f103 0210 	addls.w	r2, r3, #16
 1012fa8:	60d9      	str	r1, [r3, #12]
 1012faa:	68a9      	ldr	r1, [r5, #8]
 1012fac:	bf98      	it	ls
 1012fae:	3508      	addls	r5, #8
 1012fb0:	d911      	bls.n	1012fd6 <_realloc_r+0x15a>
 1012fb2:	6119      	str	r1, [r3, #16]
 1012fb4:	2a24      	cmp	r2, #36	; 0x24
 1012fb6:	68e9      	ldr	r1, [r5, #12]
 1012fb8:	bf14      	ite	ne
 1012fba:	f103 0218 	addne.w	r2, r3, #24
 1012fbe:	f103 0220 	addeq.w	r2, r3, #32
 1012fc2:	6159      	str	r1, [r3, #20]
 1012fc4:	6929      	ldr	r1, [r5, #16]
 1012fc6:	bf11      	iteee	ne
 1012fc8:	3510      	addne	r5, #16
 1012fca:	6199      	streq	r1, [r3, #24]
 1012fcc:	6969      	ldreq	r1, [r5, #20]
 1012fce:	61d9      	streq	r1, [r3, #28]
 1012fd0:	bf04      	itt	eq
 1012fd2:	69a9      	ldreq	r1, [r5, #24]
 1012fd4:	3518      	addeq	r5, #24
 1012fd6:	6011      	str	r1, [r2, #0]
 1012fd8:	461f      	mov	r7, r3
 1012fda:	6869      	ldr	r1, [r5, #4]
 1012fdc:	4666      	mov	r6, ip
 1012fde:	6051      	str	r1, [r2, #4]
 1012fe0:	68ab      	ldr	r3, [r5, #8]
 1012fe2:	4655      	mov	r5, sl
 1012fe4:	6093      	str	r3, [r2, #8]
 1012fe6:	1b32      	subs	r2, r6, r4
 1012fe8:	687b      	ldr	r3, [r7, #4]
 1012fea:	2a0f      	cmp	r2, #15
 1012fec:	f003 0301 	and.w	r3, r3, #1
 1012ff0:	d80f      	bhi.n	1013012 <_realloc_r+0x196>
 1012ff2:	4333      	orrs	r3, r6
 1012ff4:	607b      	str	r3, [r7, #4]
 1012ff6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1012ffa:	f043 0301 	orr.w	r3, r3, #1
 1012ffe:	f8c9 3004 	str.w	r3, [r9, #4]
 1013002:	4640      	mov	r0, r8
 1013004:	46aa      	mov	sl, r5
 1013006:	f7f9 f8bd 	bl	100c184 <__malloc_unlock>
 101300a:	4650      	mov	r0, sl
 101300c:	b003      	add	sp, #12
 101300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013012:	1939      	adds	r1, r7, r4
 1013014:	4323      	orrs	r3, r4
 1013016:	f042 0201 	orr.w	r2, r2, #1
 101301a:	607b      	str	r3, [r7, #4]
 101301c:	604a      	str	r2, [r1, #4]
 101301e:	4640      	mov	r0, r8
 1013020:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1013024:	3108      	adds	r1, #8
 1013026:	f043 0301 	orr.w	r3, r3, #1
 101302a:	f8c9 3004 	str.w	r3, [r9, #4]
 101302e:	f7fe fe27 	bl	1011c80 <_free_r>
 1013032:	e7e6      	b.n	1013002 <_realloc_r+0x186>
 1013034:	07c8      	lsls	r0, r1, #31
 1013036:	f53f af75 	bmi.w	1012f24 <_realloc_r+0xa8>
 101303a:	f855 3c08 	ldr.w	r3, [r5, #-8]
 101303e:	1afb      	subs	r3, r7, r3
 1013040:	6859      	ldr	r1, [r3, #4]
 1013042:	f021 0103 	bic.w	r1, r1, #3
 1013046:	e769      	b.n	1012f1c <_realloc_r+0xa0>
 1013048:	4611      	mov	r1, r2
 101304a:	b003      	add	sp, #12
 101304c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1013050:	f7f8 b842 	b.w	100b0d8 <_malloc_r>
 1013054:	f04f 0a00 	mov.w	sl, #0
 1013058:	230c      	movs	r3, #12
 101305a:	4650      	mov	r0, sl
 101305c:	f8c8 3000 	str.w	r3, [r8]
 1013060:	b003      	add	sp, #12
 1013062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013066:	f020 0003 	bic.w	r0, r0, #3
 101306a:	f104 0c10 	add.w	ip, r4, #16
 101306e:	1833      	adds	r3, r6, r0
 1013070:	4563      	cmp	r3, ip
 1013072:	f280 8098 	bge.w	10131a6 <_realloc_r+0x32a>
 1013076:	07cb      	lsls	r3, r1, #31
 1013078:	f53f af54 	bmi.w	1012f24 <_realloc_r+0xa8>
 101307c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1013080:	1afb      	subs	r3, r7, r3
 1013082:	6859      	ldr	r1, [r3, #4]
 1013084:	f021 0103 	bic.w	r1, r1, #3
 1013088:	4408      	add	r0, r1
 101308a:	eb00 0906 	add.w	r9, r0, r6
 101308e:	45cc      	cmp	ip, r9
 1013090:	f73f af44 	bgt.w	1012f1c <_realloc_r+0xa0>
 1013094:	469a      	mov	sl, r3
 1013096:	68d9      	ldr	r1, [r3, #12]
 1013098:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 101309c:	1f32      	subs	r2, r6, #4
 101309e:	2a24      	cmp	r2, #36	; 0x24
 10130a0:	60c1      	str	r1, [r0, #12]
 10130a2:	6088      	str	r0, [r1, #8]
 10130a4:	f200 809c 	bhi.w	10131e0 <_realloc_r+0x364>
 10130a8:	2a13      	cmp	r2, #19
 10130aa:	6829      	ldr	r1, [r5, #0]
 10130ac:	bf98      	it	ls
 10130ae:	4652      	movls	r2, sl
 10130b0:	d91c      	bls.n	10130ec <_realloc_r+0x270>
 10130b2:	6099      	str	r1, [r3, #8]
 10130b4:	2a1b      	cmp	r2, #27
 10130b6:	6869      	ldr	r1, [r5, #4]
 10130b8:	bf98      	it	ls
 10130ba:	f103 0210 	addls.w	r2, r3, #16
 10130be:	60d9      	str	r1, [r3, #12]
 10130c0:	68a9      	ldr	r1, [r5, #8]
 10130c2:	bf98      	it	ls
 10130c4:	3508      	addls	r5, #8
 10130c6:	d911      	bls.n	10130ec <_realloc_r+0x270>
 10130c8:	6119      	str	r1, [r3, #16]
 10130ca:	2a24      	cmp	r2, #36	; 0x24
 10130cc:	68e9      	ldr	r1, [r5, #12]
 10130ce:	bf14      	ite	ne
 10130d0:	f103 0218 	addne.w	r2, r3, #24
 10130d4:	f103 0220 	addeq.w	r2, r3, #32
 10130d8:	6159      	str	r1, [r3, #20]
 10130da:	6929      	ldr	r1, [r5, #16]
 10130dc:	bf11      	iteee	ne
 10130de:	3510      	addne	r5, #16
 10130e0:	6199      	streq	r1, [r3, #24]
 10130e2:	6969      	ldreq	r1, [r5, #20]
 10130e4:	61d9      	streq	r1, [r3, #28]
 10130e6:	bf04      	itt	eq
 10130e8:	69a9      	ldreq	r1, [r5, #24]
 10130ea:	3518      	addeq	r5, #24
 10130ec:	6011      	str	r1, [r2, #0]
 10130ee:	6869      	ldr	r1, [r5, #4]
 10130f0:	6051      	str	r1, [r2, #4]
 10130f2:	68a9      	ldr	r1, [r5, #8]
 10130f4:	6091      	str	r1, [r2, #8]
 10130f6:	1919      	adds	r1, r3, r4
 10130f8:	eba9 0204 	sub.w	r2, r9, r4
 10130fc:	f8cb 1008 	str.w	r1, [fp, #8]
 1013100:	f042 0201 	orr.w	r2, r2, #1
 1013104:	604a      	str	r2, [r1, #4]
 1013106:	4640      	mov	r0, r8
 1013108:	685a      	ldr	r2, [r3, #4]
 101310a:	f002 0201 	and.w	r2, r2, #1
 101310e:	4314      	orrs	r4, r2
 1013110:	605c      	str	r4, [r3, #4]
 1013112:	f7f9 f837 	bl	100c184 <__malloc_unlock>
 1013116:	e778      	b.n	101300a <_realloc_r+0x18e>
 1013118:	f8d9 200c 	ldr.w	r2, [r9, #12]
 101311c:	461e      	mov	r6, r3
 101311e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 1013122:	eb07 0903 	add.w	r9, r7, r3
 1013126:	60ca      	str	r2, [r1, #12]
 1013128:	6091      	str	r1, [r2, #8]
 101312a:	e75c      	b.n	1012fe6 <_realloc_r+0x16a>
 101312c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 1013130:	f023 0303 	bic.w	r3, r3, #3
 1013134:	441e      	add	r6, r3
 1013136:	eb07 0906 	add.w	r9, r7, r6
 101313a:	e754      	b.n	1012fe6 <_realloc_r+0x16a>
 101313c:	6001      	str	r1, [r0, #0]
 101313e:	2a1b      	cmp	r2, #27
 1013140:	686b      	ldr	r3, [r5, #4]
 1013142:	6043      	str	r3, [r0, #4]
 1013144:	d823      	bhi.n	101318e <_realloc_r+0x312>
 1013146:	f105 0208 	add.w	r2, r5, #8
 101314a:	f100 0308 	add.w	r3, r0, #8
 101314e:	68a9      	ldr	r1, [r5, #8]
 1013150:	e703      	b.n	1012f5a <_realloc_r+0xde>
 1013152:	4629      	mov	r1, r5
 1013154:	f7ff f9ac 	bl	10124b0 <memmove>
 1013158:	e704      	b.n	1012f64 <_realloc_r+0xe8>
 101315a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 101315e:	469a      	mov	sl, r3
 1013160:	f8d9 0008 	ldr.w	r0, [r9, #8]
 1013164:	1f32      	subs	r2, r6, #4
 1013166:	2a24      	cmp	r2, #36	; 0x24
 1013168:	eb03 090c 	add.w	r9, r3, ip
 101316c:	60c1      	str	r1, [r0, #12]
 101316e:	6088      	str	r0, [r1, #8]
 1013170:	68d9      	ldr	r1, [r3, #12]
 1013172:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1013176:	60c1      	str	r1, [r0, #12]
 1013178:	6088      	str	r0, [r1, #8]
 101317a:	f67f af0a 	bls.w	1012f92 <_realloc_r+0x116>
 101317e:	4629      	mov	r1, r5
 1013180:	4650      	mov	r0, sl
 1013182:	4666      	mov	r6, ip
 1013184:	461f      	mov	r7, r3
 1013186:	4655      	mov	r5, sl
 1013188:	f7ff f992 	bl	10124b0 <memmove>
 101318c:	e72b      	b.n	1012fe6 <_realloc_r+0x16a>
 101318e:	68ab      	ldr	r3, [r5, #8]
 1013190:	2a24      	cmp	r2, #36	; 0x24
 1013192:	6083      	str	r3, [r0, #8]
 1013194:	68eb      	ldr	r3, [r5, #12]
 1013196:	60c3      	str	r3, [r0, #12]
 1013198:	d018      	beq.n	10131cc <_realloc_r+0x350>
 101319a:	f105 0210 	add.w	r2, r5, #16
 101319e:	f100 0310 	add.w	r3, r0, #16
 10131a2:	6929      	ldr	r1, [r5, #16]
 10131a4:	e6d9      	b.n	1012f5a <_realloc_r+0xde>
 10131a6:	4427      	add	r7, r4
 10131a8:	1b1b      	subs	r3, r3, r4
 10131aa:	f8cb 7008 	str.w	r7, [fp, #8]
 10131ae:	f043 0301 	orr.w	r3, r3, #1
 10131b2:	607b      	str	r3, [r7, #4]
 10131b4:	4640      	mov	r0, r8
 10131b6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 10131ba:	46aa      	mov	sl, r5
 10131bc:	f003 0301 	and.w	r3, r3, #1
 10131c0:	431c      	orrs	r4, r3
 10131c2:	f845 4c04 	str.w	r4, [r5, #-4]
 10131c6:	f7f8 ffdd 	bl	100c184 <__malloc_unlock>
 10131ca:	e71e      	b.n	101300a <_realloc_r+0x18e>
 10131cc:	6929      	ldr	r1, [r5, #16]
 10131ce:	f105 0218 	add.w	r2, r5, #24
 10131d2:	f100 0318 	add.w	r3, r0, #24
 10131d6:	6101      	str	r1, [r0, #16]
 10131d8:	6969      	ldr	r1, [r5, #20]
 10131da:	6141      	str	r1, [r0, #20]
 10131dc:	69a9      	ldr	r1, [r5, #24]
 10131de:	e6bc      	b.n	1012f5a <_realloc_r+0xde>
 10131e0:	4629      	mov	r1, r5
 10131e2:	4650      	mov	r0, sl
 10131e4:	9301      	str	r3, [sp, #4]
 10131e6:	f7ff f963 	bl	10124b0 <memmove>
 10131ea:	9b01      	ldr	r3, [sp, #4]
 10131ec:	e783      	b.n	10130f6 <_realloc_r+0x27a>
 10131ee:	bf00      	nop

010131f0 <cleanup_glue>:
 10131f0:	b538      	push	{r3, r4, r5, lr}
 10131f2:	460c      	mov	r4, r1
 10131f4:	6809      	ldr	r1, [r1, #0]
 10131f6:	4605      	mov	r5, r0
 10131f8:	b109      	cbz	r1, 10131fe <cleanup_glue+0xe>
 10131fa:	f7ff fff9 	bl	10131f0 <cleanup_glue>
 10131fe:	4621      	mov	r1, r4
 1013200:	4628      	mov	r0, r5
 1013202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1013206:	f7fe bd3b 	b.w	1011c80 <_free_r>
 101320a:	bf00      	nop

0101320c <_reclaim_reent>:
 101320c:	f248 7358 	movw	r3, #34648	; 0x8758
 1013210:	f2c0 1305 	movt	r3, #261	; 0x105
 1013214:	681b      	ldr	r3, [r3, #0]
 1013216:	4283      	cmp	r3, r0
 1013218:	d03b      	beq.n	1013292 <_reclaim_reent+0x86>
 101321a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 101321c:	b570      	push	{r4, r5, r6, lr}
 101321e:	4605      	mov	r5, r0
 1013220:	b18b      	cbz	r3, 1013246 <_reclaim_reent+0x3a>
 1013222:	2600      	movs	r6, #0
 1013224:	5999      	ldr	r1, [r3, r6]
 1013226:	b139      	cbz	r1, 1013238 <_reclaim_reent+0x2c>
 1013228:	680c      	ldr	r4, [r1, #0]
 101322a:	4628      	mov	r0, r5
 101322c:	f7fe fd28 	bl	1011c80 <_free_r>
 1013230:	4621      	mov	r1, r4
 1013232:	2c00      	cmp	r4, #0
 1013234:	d1f8      	bne.n	1013228 <_reclaim_reent+0x1c>
 1013236:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 1013238:	3604      	adds	r6, #4
 101323a:	2e80      	cmp	r6, #128	; 0x80
 101323c:	d1f2      	bne.n	1013224 <_reclaim_reent+0x18>
 101323e:	4619      	mov	r1, r3
 1013240:	4628      	mov	r0, r5
 1013242:	f7fe fd1d 	bl	1011c80 <_free_r>
 1013246:	6c29      	ldr	r1, [r5, #64]	; 0x40
 1013248:	b111      	cbz	r1, 1013250 <_reclaim_reent+0x44>
 101324a:	4628      	mov	r0, r5
 101324c:	f7fe fd18 	bl	1011c80 <_free_r>
 1013250:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 1013254:	b151      	cbz	r1, 101326c <_reclaim_reent+0x60>
 1013256:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 101325a:	42b1      	cmp	r1, r6
 101325c:	d006      	beq.n	101326c <_reclaim_reent+0x60>
 101325e:	680c      	ldr	r4, [r1, #0]
 1013260:	4628      	mov	r0, r5
 1013262:	f7fe fd0d 	bl	1011c80 <_free_r>
 1013266:	42a6      	cmp	r6, r4
 1013268:	4621      	mov	r1, r4
 101326a:	d1f8      	bne.n	101325e <_reclaim_reent+0x52>
 101326c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 101326e:	b111      	cbz	r1, 1013276 <_reclaim_reent+0x6a>
 1013270:	4628      	mov	r0, r5
 1013272:	f7fe fd05 	bl	1011c80 <_free_r>
 1013276:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1013278:	b153      	cbz	r3, 1013290 <_reclaim_reent+0x84>
 101327a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 101327c:	4628      	mov	r0, r5
 101327e:	4798      	blx	r3
 1013280:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 1013284:	b121      	cbz	r1, 1013290 <_reclaim_reent+0x84>
 1013286:	4628      	mov	r0, r5
 1013288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101328c:	f7ff bfb0 	b.w	10131f0 <cleanup_glue>
 1013290:	bd70      	pop	{r4, r5, r6, pc}
 1013292:	4770      	bx	lr
 1013294:	0000      	movs	r0, r0
	...

01013298 <frexp>:
 1013298:	b430      	push	{r4, r5}
 101329a:	b082      	sub	sp, #8
 101329c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10132a0:	f6c7 74ef 	movt	r4, #32751	; 0x7fef
 10132a4:	ed8d 0b00 	vstr	d0, [sp]
 10132a8:	2500      	movs	r5, #0
 10132aa:	9b01      	ldr	r3, [sp, #4]
 10132ac:	6005      	str	r5, [r0, #0]
 10132ae:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10132b2:	42a1      	cmp	r1, r4
 10132b4:	dc24      	bgt.n	1013300 <frexp+0x68>
 10132b6:	9c00      	ldr	r4, [sp, #0]
 10132b8:	ea51 0204 	orrs.w	r2, r1, r4
 10132bc:	d020      	beq.n	1013300 <frexp+0x68>
 10132be:	462c      	mov	r4, r5
 10132c0:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 10132c4:	401c      	ands	r4, r3
 10132c6:	b954      	cbnz	r4, 10132de <frexp+0x46>
 10132c8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 1013310 <frexp+0x78>
 10132cc:	f06f 0535 	mvn.w	r5, #53	; 0x35
 10132d0:	ee20 7b07 	vmul.f64	d7, d0, d7
 10132d4:	ed8d 7b00 	vstr	d7, [sp]
 10132d8:	9b01      	ldr	r3, [sp, #4]
 10132da:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10132de:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
 10132e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 10132e6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 10132ea:	1509      	asrs	r1, r1, #20
 10132ec:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 10132f0:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 10132f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 10132f8:	4429      	add	r1, r5
 10132fa:	e9cd 2300 	strd	r2, r3, [sp]
 10132fe:	6001      	str	r1, [r0, #0]
 1013300:	ed9d 0b00 	vldr	d0, [sp]
 1013304:	b002      	add	sp, #8
 1013306:	bc30      	pop	{r4, r5}
 1013308:	4770      	bx	lr
 101330a:	bf00      	nop
 101330c:	f3af 8000 	nop.w
 1013310:	00000000 	.word	0x00000000
 1013314:	43500000 	.word	0x43500000

01013318 <__sread>:
 1013318:	b510      	push	{r4, lr}
 101331a:	460c      	mov	r4, r1
 101331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1013320:	f002 f9f8 	bl	1015714 <_read_r>
 1013324:	2800      	cmp	r0, #0
 1013326:	bfab      	itete	ge
 1013328:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 101332a:	89a3      	ldrhlt	r3, [r4, #12]
 101332c:	181b      	addge	r3, r3, r0
 101332e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 1013332:	bfac      	ite	ge
 1013334:	6523      	strge	r3, [r4, #80]	; 0x50
 1013336:	81a3      	strhlt	r3, [r4, #12]
 1013338:	bd10      	pop	{r4, pc}
 101333a:	bf00      	nop

0101333c <__seofread>:
 101333c:	2000      	movs	r0, #0
 101333e:	4770      	bx	lr

01013340 <__swrite>:
 1013340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1013344:	4616      	mov	r6, r2
 1013346:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 101334a:	461f      	mov	r7, r3
 101334c:	460c      	mov	r4, r1
 101334e:	4605      	mov	r5, r0
 1013350:	05d3      	lsls	r3, r2, #23
 1013352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1013356:	d409      	bmi.n	101336c <__swrite+0x2c>
 1013358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 101335c:	463b      	mov	r3, r7
 101335e:	81a2      	strh	r2, [r4, #12]
 1013360:	4628      	mov	r0, r5
 1013362:	4632      	mov	r2, r6
 1013364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1013368:	f002 b85a 	b.w	1015420 <_write_r>
 101336c:	2200      	movs	r2, #0
 101336e:	2302      	movs	r3, #2
 1013370:	f002 f9ba 	bl	10156e8 <_lseek_r>
 1013374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1013378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 101337c:	e7ec      	b.n	1013358 <__swrite+0x18>
 101337e:	bf00      	nop

01013380 <__sseek>:
 1013380:	b510      	push	{r4, lr}
 1013382:	460c      	mov	r4, r1
 1013384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1013388:	f002 f9ae 	bl	10156e8 <_lseek_r>
 101338c:	89a3      	ldrh	r3, [r4, #12]
 101338e:	1c42      	adds	r2, r0, #1
 1013390:	bf16      	itet	ne
 1013392:	6520      	strne	r0, [r4, #80]	; 0x50
 1013394:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 1013398:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 101339c:	81a3      	strh	r3, [r4, #12]
 101339e:	bd10      	pop	{r4, pc}

010133a0 <__sclose>:
 10133a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 10133a4:	f002 b884 	b.w	10154b0 <_close_r>

010133a8 <__ssprint_r>:
 10133a8:	6893      	ldr	r3, [r2, #8]
 10133aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10133ae:	4692      	mov	sl, r2
 10133b0:	b083      	sub	sp, #12
 10133b2:	2b00      	cmp	r3, #0
 10133b4:	d06e      	beq.n	1013494 <__ssprint_r+0xec>
 10133b6:	6817      	ldr	r7, [r2, #0]
 10133b8:	4681      	mov	r9, r0
 10133ba:	460c      	mov	r4, r1
 10133bc:	6808      	ldr	r0, [r1, #0]
 10133be:	3708      	adds	r7, #8
 10133c0:	688d      	ldr	r5, [r1, #8]
 10133c2:	e042      	b.n	101344a <__ssprint_r+0xa2>
 10133c4:	89a3      	ldrh	r3, [r4, #12]
 10133c6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 10133ca:	d02d      	beq.n	1013428 <__ssprint_r+0x80>
 10133cc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 10133d0:	1a45      	subs	r5, r0, r1
 10133d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 10133d6:	eb05 0806 	add.w	r8, r5, r6
 10133da:	f108 0801 	add.w	r8, r8, #1
 10133de:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 10133e2:	1052      	asrs	r2, r2, #1
 10133e4:	4590      	cmp	r8, r2
 10133e6:	bf94      	ite	ls
 10133e8:	4690      	movls	r8, r2
 10133ea:	4642      	movhi	r2, r8
 10133ec:	055b      	lsls	r3, r3, #21
 10133ee:	d538      	bpl.n	1013462 <__ssprint_r+0xba>
 10133f0:	4611      	mov	r1, r2
 10133f2:	4648      	mov	r0, r9
 10133f4:	f7f7 fe70 	bl	100b0d8 <_malloc_r>
 10133f8:	2800      	cmp	r0, #0
 10133fa:	d03c      	beq.n	1013476 <__ssprint_r+0xce>
 10133fc:	462a      	mov	r2, r5
 10133fe:	6921      	ldr	r1, [r4, #16]
 1013400:	9001      	str	r0, [sp, #4]
 1013402:	f7f8 eb7e 	blx	100bb00 <memcpy>
 1013406:	89a2      	ldrh	r2, [r4, #12]
 1013408:	9b01      	ldr	r3, [sp, #4]
 101340a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 101340e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1013412:	81a2      	strh	r2, [r4, #12]
 1013414:	1958      	adds	r0, r3, r5
 1013416:	f8c4 8014 	str.w	r8, [r4, #20]
 101341a:	eba8 0505 	sub.w	r5, r8, r5
 101341e:	46b0      	mov	r8, r6
 1013420:	60a5      	str	r5, [r4, #8]
 1013422:	4635      	mov	r5, r6
 1013424:	6123      	str	r3, [r4, #16]
 1013426:	6020      	str	r0, [r4, #0]
 1013428:	4642      	mov	r2, r8
 101342a:	4659      	mov	r1, fp
 101342c:	f7ff f840 	bl	10124b0 <memmove>
 1013430:	f8da 2008 	ldr.w	r2, [sl, #8]
 1013434:	68a3      	ldr	r3, [r4, #8]
 1013436:	6820      	ldr	r0, [r4, #0]
 1013438:	1b96      	subs	r6, r2, r6
 101343a:	1b5d      	subs	r5, r3, r5
 101343c:	60a5      	str	r5, [r4, #8]
 101343e:	4440      	add	r0, r8
 1013440:	6020      	str	r0, [r4, #0]
 1013442:	f8ca 6008 	str.w	r6, [sl, #8]
 1013446:	b32e      	cbz	r6, 1013494 <__ssprint_r+0xec>
 1013448:	3708      	adds	r7, #8
 101344a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 101344e:	46a8      	mov	r8, r5
 1013450:	f857 bc08 	ldr.w	fp, [r7, #-8]
 1013454:	2e00      	cmp	r6, #0
 1013456:	d0f7      	beq.n	1013448 <__ssprint_r+0xa0>
 1013458:	42ae      	cmp	r6, r5
 101345a:	d2b3      	bcs.n	10133c4 <__ssprint_r+0x1c>
 101345c:	4635      	mov	r5, r6
 101345e:	46b0      	mov	r8, r6
 1013460:	e7e2      	b.n	1013428 <__ssprint_r+0x80>
 1013462:	4648      	mov	r0, r9
 1013464:	f7ff fd0a 	bl	1012e7c <_realloc_r>
 1013468:	4603      	mov	r3, r0
 101346a:	2800      	cmp	r0, #0
 101346c:	d1d2      	bne.n	1013414 <__ssprint_r+0x6c>
 101346e:	6921      	ldr	r1, [r4, #16]
 1013470:	4648      	mov	r0, r9
 1013472:	f7fe fc05 	bl	1011c80 <_free_r>
 1013476:	230c      	movs	r3, #12
 1013478:	f8c9 3000 	str.w	r3, [r9]
 101347c:	89a3      	ldrh	r3, [r4, #12]
 101347e:	f04f 30ff 	mov.w	r0, #4294967295
 1013482:	2200      	movs	r2, #0
 1013484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1013488:	81a3      	strh	r3, [r4, #12]
 101348a:	e9ca 2201 	strd	r2, r2, [sl, #4]
 101348e:	b003      	add	sp, #12
 1013490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013494:	2000      	movs	r0, #0
 1013496:	f8ca 0004 	str.w	r0, [sl, #4]
 101349a:	b003      	add	sp, #12
 101349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

010134a0 <_svfiprintf_r>:
 10134a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10134a4:	b0c7      	sub	sp, #284	; 0x11c
 10134a6:	460c      	mov	r4, r1
 10134a8:	4683      	mov	fp, r0
 10134aa:	9109      	str	r1, [sp, #36]	; 0x24
 10134ac:	4615      	mov	r5, r2
 10134ae:	a816      	add	r0, sp, #88	; 0x58
 10134b0:	2208      	movs	r2, #8
 10134b2:	2100      	movs	r1, #0
 10134b4:	9307      	str	r3, [sp, #28]
 10134b6:	f7f8 fe13 	bl	100c0e0 <memset>
 10134ba:	89a3      	ldrh	r3, [r4, #12]
 10134bc:	061b      	lsls	r3, r3, #24
 10134be:	d503      	bpl.n	10134c8 <_svfiprintf_r+0x28>
 10134c0:	6923      	ldr	r3, [r4, #16]
 10134c2:	2b00      	cmp	r3, #0
 10134c4:	f000 853f 	beq.w	1013f46 <_svfiprintf_r+0xaa6>
 10134c8:	f248 7958 	movw	r9, #34648	; 0x8758
 10134cc:	f2c0 1905 	movt	r9, #261	; 0x105
 10134d0:	46aa      	mov	sl, r5
 10134d2:	2300      	movs	r3, #0
 10134d4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10134d8:	930c      	str	r3, [sp, #48]	; 0x30
 10134da:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 10134de:	930f      	str	r3, [sp, #60]	; 0x3c
 10134e0:	9304      	str	r3, [sp, #16]
 10134e2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 10134e6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 10134ea:	f648 3688 	movw	r6, #35720	; 0x8b88
 10134ee:	f2c0 1605 	movt	r6, #261	; 0x105
 10134f2:	4654      	mov	r4, sl
 10134f4:	f8d9 3000 	ldr.w	r3, [r9]
 10134f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 10134fa:	2b00      	cmp	r3, #0
 10134fc:	bf08      	it	eq
 10134fe:	4633      	moveq	r3, r6
 1013500:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 1013504:	f7f7 fd26 	bl	100af54 <__locale_mb_cur_max>
 1013508:	ab16      	add	r3, sp, #88	; 0x58
 101350a:	4622      	mov	r2, r4
 101350c:	9300      	str	r3, [sp, #0]
 101350e:	a914      	add	r1, sp, #80	; 0x50
 1013510:	4603      	mov	r3, r0
 1013512:	4658      	mov	r0, fp
 1013514:	47a8      	blx	r5
 1013516:	2800      	cmp	r0, #0
 1013518:	4603      	mov	r3, r0
 101351a:	f000 8086 	beq.w	101362a <_svfiprintf_r+0x18a>
 101351e:	db7c      	blt.n	101361a <_svfiprintf_r+0x17a>
 1013520:	9a14      	ldr	r2, [sp, #80]	; 0x50
 1013522:	2a25      	cmp	r2, #37	; 0x25
 1013524:	d001      	beq.n	101352a <_svfiprintf_r+0x8a>
 1013526:	441c      	add	r4, r3
 1013528:	e7e4      	b.n	10134f4 <_svfiprintf_r+0x54>
 101352a:	ebb4 060a 	subs.w	r6, r4, sl
 101352e:	4605      	mov	r5, r0
 1013530:	d17f      	bne.n	1013632 <_svfiprintf_r+0x192>
 1013532:	2300      	movs	r3, #0
 1013534:	9306      	str	r3, [sp, #24]
 1013536:	461e      	mov	r6, r3
 1013538:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 101353c:	7863      	ldrb	r3, [r4, #1]
 101353e:	f104 0a01 	add.w	sl, r4, #1
 1013542:	f04f 32ff 	mov.w	r2, #4294967295
 1013546:	9203      	str	r2, [sp, #12]
 1013548:	f10a 0a01 	add.w	sl, sl, #1
 101354c:	f1a3 0220 	sub.w	r2, r3, #32
 1013550:	2a5a      	cmp	r2, #90	; 0x5a
 1013552:	f200 8322 	bhi.w	1013b9a <_svfiprintf_r+0x6fa>
 1013556:	e8df f012 	tbh	[pc, r2, lsl #1]
 101355a:	01d2      	.short	0x01d2
 101355c:	03200320 	.word	0x03200320
 1013560:	032001cd 	.word	0x032001cd
 1013564:	03200320 	.word	0x03200320
 1013568:	032001af 	.word	0x032001af
 101356c:	01a00320 	.word	0x01a00320
 1013570:	0320025e 	.word	0x0320025e
 1013574:	01f4020f 	.word	0x01f4020f
 1013578:	01ef0320 	.word	0x01ef0320
 101357c:	015e015e 	.word	0x015e015e
 1013580:	015e015e 	.word	0x015e015e
 1013584:	015e015e 	.word	0x015e015e
 1013588:	015e015e 	.word	0x015e015e
 101358c:	0320015e 	.word	0x0320015e
 1013590:	03200320 	.word	0x03200320
 1013594:	03200320 	.word	0x03200320
 1013598:	03200320 	.word	0x03200320
 101359c:	03200320 	.word	0x03200320
 10135a0:	0220016c 	.word	0x0220016c
 10135a4:	03200320 	.word	0x03200320
 10135a8:	03200320 	.word	0x03200320
 10135ac:	03200320 	.word	0x03200320
 10135b0:	03200320 	.word	0x03200320
 10135b4:	03200320 	.word	0x03200320
 10135b8:	03200214 	.word	0x03200214
 10135bc:	03200320 	.word	0x03200320
 10135c0:	032002c9 	.word	0x032002c9
 10135c4:	032002bc 	.word	0x032002bc
 10135c8:	02900320 	.word	0x02900320
 10135cc:	03200320 	.word	0x03200320
 10135d0:	03200320 	.word	0x03200320
 10135d4:	03200320 	.word	0x03200320
 10135d8:	03200320 	.word	0x03200320
 10135dc:	03200320 	.word	0x03200320
 10135e0:	0276016c 	.word	0x0276016c
 10135e4:	03200320 	.word	0x03200320
 10135e8:	02fe0320 	.word	0x02fe0320
 10135ec:	005b0276 	.word	0x005b0276
 10135f0:	02f10320 	.word	0x02f10320
 10135f4:	030b0320 	.word	0x030b0320
 10135f8:	0264018f 	.word	0x0264018f
 10135fc:	0320005b 	.word	0x0320005b
 1013600:	005d02c9 	.word	0x005d02c9
 1013604:	032001dd 	.word	0x032001dd
 1013608:	009b0320 	.word	0x009b0320
 101360c:	005d0320 	.word	0x005d0320
 1013610:	f046 0620 	orr.w	r6, r6, #32
 1013614:	f89a 3000 	ldrb.w	r3, [sl]
 1013618:	e796      	b.n	1013548 <_svfiprintf_r+0xa8>
 101361a:	2208      	movs	r2, #8
 101361c:	2100      	movs	r1, #0
 101361e:	a816      	add	r0, sp, #88	; 0x58
 1013620:	f7f8 fd5e 	bl	100c0e0 <memset>
 1013624:	2301      	movs	r3, #1
 1013626:	441c      	add	r4, r3
 1013628:	e764      	b.n	10134f4 <_svfiprintf_r+0x54>
 101362a:	ebb4 060a 	subs.w	r6, r4, sl
 101362e:	4605      	mov	r5, r0
 1013630:	d012      	beq.n	1013658 <_svfiprintf_r+0x1b8>
 1013632:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1013636:	e9c8 a600 	strd	sl, r6, [r8]
 101363a:	3301      	adds	r3, #1
 101363c:	4432      	add	r2, r6
 101363e:	2b07      	cmp	r3, #7
 1013640:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1013644:	bfd8      	it	le
 1013646:	f108 0808 	addle.w	r8, r8, #8
 101364a:	dc17      	bgt.n	101367c <_svfiprintf_r+0x1dc>
 101364c:	9b04      	ldr	r3, [sp, #16]
 101364e:	4433      	add	r3, r6
 1013650:	9304      	str	r3, [sp, #16]
 1013652:	2d00      	cmp	r5, #0
 1013654:	f47f af6d 	bne.w	1013532 <_svfiprintf_r+0x92>
 1013658:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 101365a:	2b00      	cmp	r3, #0
 101365c:	f040 8586 	bne.w	101416c <_svfiprintf_r+0xccc>
 1013660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1013662:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 1013666:	f013 0f40 	tst.w	r3, #64	; 0x40
 101366a:	9b04      	ldr	r3, [sp, #16]
 101366c:	bf18      	it	ne
 101366e:	f04f 33ff 	movne.w	r3, #4294967295
 1013672:	9304      	str	r3, [sp, #16]
 1013674:	9804      	ldr	r0, [sp, #16]
 1013676:	b047      	add	sp, #284	; 0x11c
 1013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101367c:	aa1a      	add	r2, sp, #104	; 0x68
 101367e:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013680:	4658      	mov	r0, fp
 1013682:	f7ff fe91 	bl	10133a8 <__ssprint_r>
 1013686:	2800      	cmp	r0, #0
 1013688:	d1ea      	bne.n	1013660 <_svfiprintf_r+0x1c0>
 101368a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 101368e:	e7dd      	b.n	101364c <_svfiprintf_r+0x1ac>
 1013690:	06b4      	lsls	r4, r6, #26
 1013692:	f248 22bc 	movw	r2, #33468	; 0x82bc
 1013696:	f2c0 1205 	movt	r2, #261	; 0x105
 101369a:	920c      	str	r2, [sp, #48]	; 0x30
 101369c:	f140 81f5 	bpl.w	1013a8a <_svfiprintf_r+0x5ea>
 10136a0:	9d07      	ldr	r5, [sp, #28]
 10136a2:	3507      	adds	r5, #7
 10136a4:	f025 0207 	bic.w	r2, r5, #7
 10136a8:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10136ac:	9207      	str	r2, [sp, #28]
 10136ae:	ea54 0205 	orrs.w	r2, r4, r5
 10136b2:	f006 0201 	and.w	r2, r6, #1
 10136b6:	bf08      	it	eq
 10136b8:	2200      	moveq	r2, #0
 10136ba:	2a00      	cmp	r2, #0
 10136bc:	f040 8201 	bne.w	1013ac2 <_svfiprintf_r+0x622>
 10136c0:	f426 6780 	bic.w	r7, r6, #1024	; 0x400
 10136c4:	2302      	movs	r3, #2
 10136c6:	9903      	ldr	r1, [sp, #12]
 10136c8:	2200      	movs	r2, #0
 10136ca:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10136ce:	1c4a      	adds	r2, r1, #1
 10136d0:	f000 8182 	beq.w	10139d8 <_svfiprintf_r+0x538>
 10136d4:	ea54 0205 	orrs.w	r2, r4, r5
 10136d8:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 10136dc:	bf14      	ite	ne
 10136de:	2201      	movne	r2, #1
 10136e0:	2200      	moveq	r2, #0
 10136e2:	2900      	cmp	r1, #0
 10136e4:	bf18      	it	ne
 10136e6:	2201      	movne	r2, #1
 10136e8:	2a00      	cmp	r2, #0
 10136ea:	f040 8417 	bne.w	1013f1c <_svfiprintf_r+0xa7c>
 10136ee:	2b00      	cmp	r3, #0
 10136f0:	f040 83f0 	bne.w	1013ed4 <_svfiprintf_r+0xa34>
 10136f4:	f017 0201 	ands.w	r2, r7, #1
 10136f8:	9303      	str	r3, [sp, #12]
 10136fa:	9205      	str	r2, [sp, #20]
 10136fc:	bf04      	itt	eq
 10136fe:	ab46      	addeq	r3, sp, #280	; 0x118
 1013700:	930b      	streq	r3, [sp, #44]	; 0x2c
 1013702:	d005      	beq.n	1013710 <_svfiprintf_r+0x270>
 1013704:	2330      	movs	r3, #48	; 0x30
 1013706:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 101370a:	f20d 1317 	addw	r3, sp, #279	; 0x117
 101370e:	930b      	str	r3, [sp, #44]	; 0x2c
 1013710:	9b05      	ldr	r3, [sp, #20]
 1013712:	9a03      	ldr	r2, [sp, #12]
 1013714:	4293      	cmp	r3, r2
 1013716:	bfb8      	it	lt
 1013718:	4613      	movlt	r3, r2
 101371a:	9302      	str	r3, [sp, #8]
 101371c:	2300      	movs	r3, #0
 101371e:	9308      	str	r3, [sp, #32]
 1013720:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 1013724:	b113      	cbz	r3, 101372c <_svfiprintf_r+0x28c>
 1013726:	9b02      	ldr	r3, [sp, #8]
 1013728:	3301      	adds	r3, #1
 101372a:	9302      	str	r3, [sp, #8]
 101372c:	f016 0302 	ands.w	r3, r6, #2
 1013730:	bf1e      	ittt	ne
 1013732:	9a02      	ldrne	r2, [sp, #8]
 1013734:	3202      	addne	r2, #2
 1013736:	9202      	strne	r2, [sp, #8]
 1013738:	f016 0084 	ands.w	r0, r6, #132	; 0x84
 101373c:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1013740:	900a      	str	r0, [sp, #40]	; 0x28
 1013742:	d105      	bne.n	1013750 <_svfiprintf_r+0x2b0>
 1013744:	9806      	ldr	r0, [sp, #24]
 1013746:	9c02      	ldr	r4, [sp, #8]
 1013748:	1b04      	subs	r4, r0, r4
 101374a:	2c00      	cmp	r4, #0
 101374c:	f300 8326 	bgt.w	1013d9c <_svfiprintf_r+0x8fc>
 1013750:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 1013754:	1c48      	adds	r0, r1, #1
 1013756:	f108 0708 	add.w	r7, r8, #8
 101375a:	b1ac      	cbz	r4, 1013788 <_svfiprintf_r+0x2e8>
 101375c:	2807      	cmp	r0, #7
 101375e:	f10d 044b 	add.w	r4, sp, #75	; 0x4b
 1013762:	f102 0201 	add.w	r2, r2, #1
 1013766:	f8c8 4000 	str.w	r4, [r8]
 101376a:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 101376e:	f04f 0401 	mov.w	r4, #1
 1013772:	f8c8 4004 	str.w	r4, [r8, #4]
 1013776:	f300 8355 	bgt.w	1013e24 <_svfiprintf_r+0x984>
 101377a:	1c8d      	adds	r5, r1, #2
 101377c:	f108 0410 	add.w	r4, r8, #16
 1013780:	4601      	mov	r1, r0
 1013782:	46b8      	mov	r8, r7
 1013784:	4628      	mov	r0, r5
 1013786:	4627      	mov	r7, r4
 1013788:	b18b      	cbz	r3, 10137ae <_svfiprintf_r+0x30e>
 101378a:	2807      	cmp	r0, #7
 101378c:	ab13      	add	r3, sp, #76	; 0x4c
 101378e:	f102 0202 	add.w	r2, r2, #2
 1013792:	f8c8 3000 	str.w	r3, [r8]
 1013796:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 101379a:	f04f 0302 	mov.w	r3, #2
 101379e:	f8c8 3004 	str.w	r3, [r8, #4]
 10137a2:	f300 834f 	bgt.w	1013e44 <_svfiprintf_r+0x9a4>
 10137a6:	4601      	mov	r1, r0
 10137a8:	46b8      	mov	r8, r7
 10137aa:	3001      	adds	r0, #1
 10137ac:	3708      	adds	r7, #8
 10137ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 10137b0:	2b80      	cmp	r3, #128	; 0x80
 10137b2:	f000 825f 	beq.w	1013c74 <_svfiprintf_r+0x7d4>
 10137b6:	9b03      	ldr	r3, [sp, #12]
 10137b8:	9c05      	ldr	r4, [sp, #20]
 10137ba:	1b1c      	subs	r4, r3, r4
 10137bc:	2c00      	cmp	r4, #0
 10137be:	f300 829c 	bgt.w	1013cfa <_svfiprintf_r+0x85a>
 10137c2:	9b05      	ldr	r3, [sp, #20]
 10137c4:	2807      	cmp	r0, #7
 10137c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10137c8:	441a      	add	r2, r3
 10137ca:	901b      	str	r0, [sp, #108]	; 0x6c
 10137cc:	921c      	str	r2, [sp, #112]	; 0x70
 10137ce:	f8c8 1000 	str.w	r1, [r8]
 10137d2:	f8c8 3004 	str.w	r3, [r8, #4]
 10137d6:	f300 82c7 	bgt.w	1013d68 <_svfiprintf_r+0x8c8>
 10137da:	0773      	lsls	r3, r6, #29
 10137dc:	d505      	bpl.n	10137ea <_svfiprintf_r+0x34a>
 10137de:	9b06      	ldr	r3, [sp, #24]
 10137e0:	9902      	ldr	r1, [sp, #8]
 10137e2:	1a5c      	subs	r4, r3, r1
 10137e4:	2c00      	cmp	r4, #0
 10137e6:	f300 833b 	bgt.w	1013e60 <_svfiprintf_r+0x9c0>
 10137ea:	9b04      	ldr	r3, [sp, #16]
 10137ec:	9906      	ldr	r1, [sp, #24]
 10137ee:	9802      	ldr	r0, [sp, #8]
 10137f0:	4281      	cmp	r1, r0
 10137f2:	bfac      	ite	ge
 10137f4:	185b      	addge	r3, r3, r1
 10137f6:	181b      	addlt	r3, r3, r0
 10137f8:	9304      	str	r3, [sp, #16]
 10137fa:	2a00      	cmp	r2, #0
 10137fc:	f040 82bd 	bne.w	1013d7a <_svfiprintf_r+0x8da>
 1013800:	2300      	movs	r3, #0
 1013802:	931b      	str	r3, [sp, #108]	; 0x6c
 1013804:	9b08      	ldr	r3, [sp, #32]
 1013806:	b11b      	cbz	r3, 1013810 <_svfiprintf_r+0x370>
 1013808:	9908      	ldr	r1, [sp, #32]
 101380a:	4658      	mov	r0, fp
 101380c:	f7fe fa38 	bl	1011c80 <_free_r>
 1013810:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013814:	e669      	b.n	10134ea <_svfiprintf_r+0x4a>
 1013816:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101381a:	2100      	movs	r1, #0
 101381c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1013820:	200a      	movs	r0, #10
 1013822:	fb00 2101 	mla	r1, r0, r1, r2
 1013826:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101382a:	2a09      	cmp	r2, #9
 101382c:	d9f6      	bls.n	101381c <_svfiprintf_r+0x37c>
 101382e:	9106      	str	r1, [sp, #24]
 1013830:	e68c      	b.n	101354c <_svfiprintf_r+0xac>
 1013832:	9a07      	ldr	r2, [sp, #28]
 1013834:	2b43      	cmp	r3, #67	; 0x43
 1013836:	f102 0404 	add.w	r4, r2, #4
 101383a:	d002      	beq.n	1013842 <_svfiprintf_r+0x3a2>
 101383c:	06f7      	lsls	r7, r6, #27
 101383e:	f140 8379 	bpl.w	1013f34 <_svfiprintf_r+0xa94>
 1013842:	2208      	movs	r2, #8
 1013844:	2100      	movs	r1, #0
 1013846:	a818      	add	r0, sp, #96	; 0x60
 1013848:	ad2d      	add	r5, sp, #180	; 0xb4
 101384a:	f7f8 fc49 	bl	100c0e0 <memset>
 101384e:	9a07      	ldr	r2, [sp, #28]
 1013850:	ab18      	add	r3, sp, #96	; 0x60
 1013852:	4629      	mov	r1, r5
 1013854:	4658      	mov	r0, fp
 1013856:	6812      	ldr	r2, [r2, #0]
 1013858:	f7fc fe50 	bl	10104fc <_wcrtomb_r>
 101385c:	1c43      	adds	r3, r0, #1
 101385e:	9005      	str	r0, [sp, #20]
 1013860:	f000 84bf 	beq.w	10141e2 <_svfiprintf_r+0xd42>
 1013864:	9b05      	ldr	r3, [sp, #20]
 1013866:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101386a:	9302      	str	r3, [sp, #8]
 101386c:	2300      	movs	r3, #0
 101386e:	9407      	str	r4, [sp, #28]
 1013870:	950b      	str	r5, [sp, #44]	; 0x2c
 1013872:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1013876:	e19d      	b.n	1013bb4 <_svfiprintf_r+0x714>
 1013878:	06b2      	lsls	r2, r6, #26
 101387a:	f100 81d0 	bmi.w	1013c1e <_svfiprintf_r+0x77e>
 101387e:	9a07      	ldr	r2, [sp, #28]
 1013880:	06f3      	lsls	r3, r6, #27
 1013882:	f852 4b04 	ldr.w	r4, [r2], #4
 1013886:	f100 84c3 	bmi.w	1014210 <_svfiprintf_r+0xd70>
 101388a:	0677      	lsls	r7, r6, #25
 101388c:	f140 8436 	bpl.w	10140fc <_svfiprintf_r+0xc5c>
 1013890:	4633      	mov	r3, r6
 1013892:	9207      	str	r2, [sp, #28]
 1013894:	b2a4      	uxth	r4, r4
 1013896:	2500      	movs	r5, #0
 1013898:	e1c9      	b.n	1013c2e <_svfiprintf_r+0x78e>
 101389a:	9a07      	ldr	r2, [sp, #28]
 101389c:	f89a 3000 	ldrb.w	r3, [sl]
 10138a0:	f852 1b04 	ldr.w	r1, [r2], #4
 10138a4:	2900      	cmp	r1, #0
 10138a6:	9106      	str	r1, [sp, #24]
 10138a8:	bfa8      	it	ge
 10138aa:	9207      	strge	r2, [sp, #28]
 10138ac:	f6bf ae4c 	bge.w	1013548 <_svfiprintf_r+0xa8>
 10138b0:	4249      	negs	r1, r1
 10138b2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 10138b6:	e061      	b.n	101397c <_svfiprintf_r+0x4dc>
 10138b8:	4658      	mov	r0, fp
 10138ba:	f7fe fd09 	bl	10122d0 <_localeconv_r>
 10138be:	6843      	ldr	r3, [r0, #4]
 10138c0:	4618      	mov	r0, r3
 10138c2:	930f      	str	r3, [sp, #60]	; 0x3c
 10138c4:	f7f9 f81c 	bl	100c900 <strlen>
 10138c8:	4604      	mov	r4, r0
 10138ca:	900e      	str	r0, [sp, #56]	; 0x38
 10138cc:	4658      	mov	r0, fp
 10138ce:	f7fe fcff 	bl	10122d0 <_localeconv_r>
 10138d2:	6883      	ldr	r3, [r0, #8]
 10138d4:	2c00      	cmp	r4, #0
 10138d6:	bf18      	it	ne
 10138d8:	2b00      	cmpne	r3, #0
 10138da:	930d      	str	r3, [sp, #52]	; 0x34
 10138dc:	f43f ae9a 	beq.w	1013614 <_svfiprintf_r+0x174>
 10138e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10138e2:	781a      	ldrb	r2, [r3, #0]
 10138e4:	f89a 3000 	ldrb.w	r3, [sl]
 10138e8:	2a00      	cmp	r2, #0
 10138ea:	f43f ae2d 	beq.w	1013548 <_svfiprintf_r+0xa8>
 10138ee:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 10138f2:	e629      	b.n	1013548 <_svfiprintf_r+0xa8>
 10138f4:	f046 0601 	orr.w	r6, r6, #1
 10138f8:	f89a 3000 	ldrb.w	r3, [sl]
 10138fc:	e624      	b.n	1013548 <_svfiprintf_r+0xa8>
 10138fe:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1013902:	f89a 3000 	ldrb.w	r3, [sl]
 1013906:	2a00      	cmp	r2, #0
 1013908:	f47f ae1e 	bne.w	1013548 <_svfiprintf_r+0xa8>
 101390c:	2220      	movs	r2, #32
 101390e:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1013912:	e619      	b.n	1013548 <_svfiprintf_r+0xa8>
 1013914:	06b0      	lsls	r0, r6, #26
 1013916:	f100 8178 	bmi.w	1013c0a <_svfiprintf_r+0x76a>
 101391a:	9a07      	ldr	r2, [sp, #28]
 101391c:	06f1      	lsls	r1, r6, #27
 101391e:	f852 4b04 	ldr.w	r4, [r2], #4
 1013922:	f100 8478 	bmi.w	1014216 <_svfiprintf_r+0xd76>
 1013926:	0673      	lsls	r3, r6, #25
 1013928:	9207      	str	r2, [sp, #28]
 101392a:	4637      	mov	r7, r6
 101392c:	f140 83f1 	bpl.w	1014112 <_svfiprintf_r+0xc72>
 1013930:	b2a4      	uxth	r4, r4
 1013932:	2500      	movs	r5, #0
 1013934:	2301      	movs	r3, #1
 1013936:	e6c6      	b.n	10136c6 <_svfiprintf_r+0x226>
 1013938:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 101393c:	f89a 3000 	ldrb.w	r3, [sl]
 1013940:	e602      	b.n	1013548 <_svfiprintf_r+0xa8>
 1013942:	4651      	mov	r1, sl
 1013944:	f811 3b01 	ldrb.w	r3, [r1], #1
 1013948:	2b2a      	cmp	r3, #42	; 0x2a
 101394a:	f000 8452 	beq.w	10141f2 <_svfiprintf_r+0xd52>
 101394e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1013952:	468a      	mov	sl, r1
 1013954:	2a09      	cmp	r2, #9
 1013956:	bf84      	itt	hi
 1013958:	2200      	movhi	r2, #0
 101395a:	9203      	strhi	r2, [sp, #12]
 101395c:	f63f adf6 	bhi.w	101354c <_svfiprintf_r+0xac>
 1013960:	2100      	movs	r1, #0
 1013962:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1013966:	200a      	movs	r0, #10
 1013968:	fb00 2101 	mla	r1, r0, r1, r2
 101396c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1013970:	2a09      	cmp	r2, #9
 1013972:	d9f6      	bls.n	1013962 <_svfiprintf_r+0x4c2>
 1013974:	9103      	str	r1, [sp, #12]
 1013976:	e5e9      	b.n	101354c <_svfiprintf_r+0xac>
 1013978:	f89a 3000 	ldrb.w	r3, [sl]
 101397c:	f046 0604 	orr.w	r6, r6, #4
 1013980:	e5e2      	b.n	1013548 <_svfiprintf_r+0xa8>
 1013982:	06b1      	lsls	r1, r6, #26
 1013984:	f046 0310 	orr.w	r3, r6, #16
 1013988:	f100 814a 	bmi.w	1013c20 <_svfiprintf_r+0x780>
 101398c:	9a07      	ldr	r2, [sp, #28]
 101398e:	3204      	adds	r2, #4
 1013990:	9907      	ldr	r1, [sp, #28]
 1013992:	2500      	movs	r5, #0
 1013994:	9207      	str	r2, [sp, #28]
 1013996:	680c      	ldr	r4, [r1, #0]
 1013998:	e149      	b.n	1013c2e <_svfiprintf_r+0x78e>
 101399a:	f046 0710 	orr.w	r7, r6, #16
 101399e:	06b6      	lsls	r6, r6, #26
 10139a0:	f100 810d 	bmi.w	1013bbe <_svfiprintf_r+0x71e>
 10139a4:	9b07      	ldr	r3, [sp, #28]
 10139a6:	1d1a      	adds	r2, r3, #4
 10139a8:	9b07      	ldr	r3, [sp, #28]
 10139aa:	9207      	str	r2, [sp, #28]
 10139ac:	681c      	ldr	r4, [r3, #0]
 10139ae:	17e5      	asrs	r5, r4, #31
 10139b0:	4622      	mov	r2, r4
 10139b2:	2a00      	cmp	r2, #0
 10139b4:	462b      	mov	r3, r5
 10139b6:	f173 0300 	sbcs.w	r3, r3, #0
 10139ba:	f280 810f 	bge.w	1013bdc <_svfiprintf_r+0x73c>
 10139be:	4264      	negs	r4, r4
 10139c0:	9903      	ldr	r1, [sp, #12]
 10139c2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 10139c6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10139ca:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 10139ce:	1c4a      	adds	r2, r1, #1
 10139d0:	f04f 0301 	mov.w	r3, #1
 10139d4:	f47f ae7e 	bne.w	10136d4 <_svfiprintf_r+0x234>
 10139d8:	2b01      	cmp	r3, #1
 10139da:	f000 8281 	beq.w	1013ee0 <_svfiprintf_r+0xa40>
 10139de:	2b02      	cmp	r3, #2
 10139e0:	bf18      	it	ne
 10139e2:	a946      	addne	r1, sp, #280	; 0x118
 10139e4:	f040 8128 	bne.w	1013c38 <_svfiprintf_r+0x798>
 10139e8:	ab46      	add	r3, sp, #280	; 0x118
 10139ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 10139ec:	461a      	mov	r2, r3
 10139ee:	f004 010f 	and.w	r1, r4, #15
 10139f2:	0923      	lsrs	r3, r4, #4
 10139f4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 10139f8:	0928      	lsrs	r0, r5, #4
 10139fa:	5c71      	ldrb	r1, [r6, r1]
 10139fc:	461c      	mov	r4, r3
 10139fe:	4605      	mov	r5, r0
 1013a00:	ea54 0305 	orrs.w	r3, r4, r5
 1013a04:	f802 1d01 	strb.w	r1, [r2, #-1]!
 1013a08:	d1f1      	bne.n	10139ee <_svfiprintf_r+0x54e>
 1013a0a:	ab46      	add	r3, sp, #280	; 0x118
 1013a0c:	920b      	str	r2, [sp, #44]	; 0x2c
 1013a0e:	1a9b      	subs	r3, r3, r2
 1013a10:	463e      	mov	r6, r7
 1013a12:	9305      	str	r3, [sp, #20]
 1013a14:	e67c      	b.n	1013710 <_svfiprintf_r+0x270>
 1013a16:	232b      	movs	r3, #43	; 0x2b
 1013a18:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1013a1c:	f89a 3000 	ldrb.w	r3, [sl]
 1013a20:	e592      	b.n	1013548 <_svfiprintf_r+0xa8>
 1013a22:	9b07      	ldr	r3, [sp, #28]
 1013a24:	f647 0230 	movw	r2, #30768	; 0x7830
 1013a28:	f248 21bc 	movw	r1, #33468	; 0x82bc
 1013a2c:	f046 0702 	orr.w	r7, r6, #2
 1013a30:	f2c0 1105 	movt	r1, #261	; 0x105
 1013a34:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 1013a38:	f853 4b04 	ldr.w	r4, [r3], #4
 1013a3c:	2500      	movs	r5, #0
 1013a3e:	910c      	str	r1, [sp, #48]	; 0x30
 1013a40:	9307      	str	r3, [sp, #28]
 1013a42:	2302      	movs	r3, #2
 1013a44:	e63f      	b.n	10136c6 <_svfiprintf_r+0x226>
 1013a46:	06b5      	lsls	r5, r6, #26
 1013a48:	f100 80b8 	bmi.w	1013bbc <_svfiprintf_r+0x71c>
 1013a4c:	9b07      	ldr	r3, [sp, #28]
 1013a4e:	06f4      	lsls	r4, r6, #27
 1013a50:	f103 0204 	add.w	r2, r3, #4
 1013a54:	f100 83d9 	bmi.w	101420a <_svfiprintf_r+0xd6a>
 1013a58:	9b07      	ldr	r3, [sp, #28]
 1013a5a:	0670      	lsls	r0, r6, #25
 1013a5c:	bf48      	it	mi
 1013a5e:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1013a62:	d404      	bmi.n	1013a6e <_svfiprintf_r+0x5ce>
 1013a64:	05b1      	lsls	r1, r6, #22
 1013a66:	f140 837a 	bpl.w	101415e <_svfiprintf_r+0xcbe>
 1013a6a:	f993 4000 	ldrsb.w	r4, [r3]
 1013a6e:	17e5      	asrs	r5, r4, #31
 1013a70:	9207      	str	r2, [sp, #28]
 1013a72:	4637      	mov	r7, r6
 1013a74:	4622      	mov	r2, r4
 1013a76:	462b      	mov	r3, r5
 1013a78:	e0ab      	b.n	1013bd2 <_svfiprintf_r+0x732>
 1013a7a:	06b4      	lsls	r4, r6, #26
 1013a7c:	f248 026c 	movw	r2, #32876	; 0x806c
 1013a80:	f2c0 1205 	movt	r2, #261	; 0x105
 1013a84:	920c      	str	r2, [sp, #48]	; 0x30
 1013a86:	f53f ae0b 	bmi.w	10136a0 <_svfiprintf_r+0x200>
 1013a8a:	9a07      	ldr	r2, [sp, #28]
 1013a8c:	06f0      	lsls	r0, r6, #27
 1013a8e:	f852 4b04 	ldr.w	r4, [r2], #4
 1013a92:	9207      	str	r2, [sp, #28]
 1013a94:	d40b      	bmi.n	1013aae <_svfiprintf_r+0x60e>
 1013a96:	0671      	lsls	r1, r6, #25
 1013a98:	bf44      	itt	mi
 1013a9a:	b2a4      	uxthmi	r4, r4
 1013a9c:	2500      	movmi	r5, #0
 1013a9e:	f53f ae06 	bmi.w	10136ae <_svfiprintf_r+0x20e>
 1013aa2:	05b2      	lsls	r2, r6, #22
 1013aa4:	bf44      	itt	mi
 1013aa6:	b2e4      	uxtbmi	r4, r4
 1013aa8:	2500      	movmi	r5, #0
 1013aaa:	f53f ae00 	bmi.w	10136ae <_svfiprintf_r+0x20e>
 1013aae:	2500      	movs	r5, #0
 1013ab0:	ea54 0205 	orrs.w	r2, r4, r5
 1013ab4:	f006 0201 	and.w	r2, r6, #1
 1013ab8:	bf08      	it	eq
 1013aba:	2200      	moveq	r2, #0
 1013abc:	2a00      	cmp	r2, #0
 1013abe:	f43f adff 	beq.w	10136c0 <_svfiprintf_r+0x220>
 1013ac2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 1013ac6:	f046 0602 	orr.w	r6, r6, #2
 1013aca:	2330      	movs	r3, #48	; 0x30
 1013acc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 1013ad0:	e5f6      	b.n	10136c0 <_svfiprintf_r+0x220>
 1013ad2:	06b4      	lsls	r4, r6, #26
 1013ad4:	f046 0710 	orr.w	r7, r6, #16
 1013ad8:	f100 8098 	bmi.w	1013c0c <_svfiprintf_r+0x76c>
 1013adc:	9b07      	ldr	r3, [sp, #28]
 1013ade:	1d1a      	adds	r2, r3, #4
 1013ae0:	9b07      	ldr	r3, [sp, #28]
 1013ae2:	2500      	movs	r5, #0
 1013ae4:	9207      	str	r2, [sp, #28]
 1013ae6:	681c      	ldr	r4, [r3, #0]
 1013ae8:	2301      	movs	r3, #1
 1013aea:	e5ec      	b.n	10136c6 <_svfiprintf_r+0x226>
 1013aec:	9d07      	ldr	r5, [sp, #28]
 1013aee:	2200      	movs	r2, #0
 1013af0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1013af4:	f855 1b04 	ldr.w	r1, [r5], #4
 1013af8:	910b      	str	r1, [sp, #44]	; 0x2c
 1013afa:	2900      	cmp	r1, #0
 1013afc:	f000 82f1 	beq.w	10140e2 <_svfiprintf_r+0xc42>
 1013b00:	2b53      	cmp	r3, #83	; 0x53
 1013b02:	f000 8231 	beq.w	1013f68 <_svfiprintf_r+0xac8>
 1013b06:	f016 0410 	ands.w	r4, r6, #16
 1013b0a:	f040 822d 	bne.w	1013f68 <_svfiprintf_r+0xac8>
 1013b0e:	9a03      	ldr	r2, [sp, #12]
 1013b10:	1c53      	adds	r3, r2, #1
 1013b12:	f000 8343 	beq.w	101419c <_svfiprintf_r+0xcfc>
 1013b16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 1013b18:	4621      	mov	r1, r4
 1013b1a:	4638      	mov	r0, r7
 1013b1c:	f7fe fc78 	bl	1012410 <memchr>
 1013b20:	9008      	str	r0, [sp, #32]
 1013b22:	2800      	cmp	r0, #0
 1013b24:	f000 8332 	beq.w	101418c <_svfiprintf_r+0xcec>
 1013b28:	1bc3      	subs	r3, r0, r7
 1013b2a:	4622      	mov	r2, r4
 1013b2c:	9305      	str	r3, [sp, #20]
 1013b2e:	9403      	str	r4, [sp, #12]
 1013b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1013b34:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1013b38:	9302      	str	r3, [sp, #8]
 1013b3a:	e5f1      	b.n	1013720 <_svfiprintf_r+0x280>
 1013b3c:	f89a 3000 	ldrb.w	r3, [sl]
 1013b40:	2b6c      	cmp	r3, #108	; 0x6c
 1013b42:	bf09      	itett	eq
 1013b44:	f046 0620 	orreq.w	r6, r6, #32
 1013b48:	f046 0610 	orrne.w	r6, r6, #16
 1013b4c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1013b50:	f10a 0a01 	addeq.w	sl, sl, #1
 1013b54:	e4f8      	b.n	1013548 <_svfiprintf_r+0xa8>
 1013b56:	f89a 3000 	ldrb.w	r3, [sl]
 1013b5a:	2b68      	cmp	r3, #104	; 0x68
 1013b5c:	bf09      	itett	eq
 1013b5e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 1013b62:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1013b66:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1013b6a:	f10a 0a01 	addeq.w	sl, sl, #1
 1013b6e:	e4eb      	b.n	1013548 <_svfiprintf_r+0xa8>
 1013b70:	9a07      	ldr	r2, [sp, #28]
 1013b72:	06b7      	lsls	r7, r6, #26
 1013b74:	f102 0304 	add.w	r3, r2, #4
 1013b78:	f100 81d2 	bmi.w	1013f20 <_svfiprintf_r+0xa80>
 1013b7c:	06f5      	lsls	r5, r6, #27
 1013b7e:	f100 825d 	bmi.w	101403c <_svfiprintf_r+0xb9c>
 1013b82:	0674      	lsls	r4, r6, #25
 1013b84:	f100 82e4 	bmi.w	1014150 <_svfiprintf_r+0xcb0>
 1013b88:	05b0      	lsls	r0, r6, #22
 1013b8a:	f140 8257 	bpl.w	101403c <_svfiprintf_r+0xb9c>
 1013b8e:	9a07      	ldr	r2, [sp, #28]
 1013b90:	9307      	str	r3, [sp, #28]
 1013b92:	9b04      	ldr	r3, [sp, #16]
 1013b94:	6812      	ldr	r2, [r2, #0]
 1013b96:	7013      	strb	r3, [r2, #0]
 1013b98:	e4a7      	b.n	10134ea <_svfiprintf_r+0x4a>
 1013b9a:	2b00      	cmp	r3, #0
 1013b9c:	f43f ad5c 	beq.w	1013658 <_svfiprintf_r+0x1b8>
 1013ba0:	2201      	movs	r2, #1
 1013ba2:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1013ba6:	9202      	str	r2, [sp, #8]
 1013ba8:	2300      	movs	r3, #0
 1013baa:	9205      	str	r2, [sp, #20]
 1013bac:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1013bb0:	ab2d      	add	r3, sp, #180	; 0xb4
 1013bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 1013bb4:	2300      	movs	r3, #0
 1013bb6:	9308      	str	r3, [sp, #32]
 1013bb8:	9303      	str	r3, [sp, #12]
 1013bba:	e5b7      	b.n	101372c <_svfiprintf_r+0x28c>
 1013bbc:	4637      	mov	r7, r6
 1013bbe:	9d07      	ldr	r5, [sp, #28]
 1013bc0:	3507      	adds	r5, #7
 1013bc2:	f025 0307 	bic.w	r3, r5, #7
 1013bc6:	4619      	mov	r1, r3
 1013bc8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 1013bcc:	4614      	mov	r4, r2
 1013bce:	461d      	mov	r5, r3
 1013bd0:	9107      	str	r1, [sp, #28]
 1013bd2:	2a00      	cmp	r2, #0
 1013bd4:	f173 0300 	sbcs.w	r3, r3, #0
 1013bd8:	f6ff aef1 	blt.w	10139be <_svfiprintf_r+0x51e>
 1013bdc:	9b03      	ldr	r3, [sp, #12]
 1013bde:	3301      	adds	r3, #1
 1013be0:	f000 817e 	beq.w	1013ee0 <_svfiprintf_r+0xa40>
 1013be4:	ea54 0305 	orrs.w	r3, r4, r5
 1013be8:	9a03      	ldr	r2, [sp, #12]
 1013bea:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 1013bee:	bf14      	ite	ne
 1013bf0:	2301      	movne	r3, #1
 1013bf2:	2300      	moveq	r3, #0
 1013bf4:	2a00      	cmp	r2, #0
 1013bf6:	bf18      	it	ne
 1013bf8:	2301      	movne	r3, #1
 1013bfa:	2b00      	cmp	r3, #0
 1013bfc:	f040 816f 	bne.w	1013ede <_svfiprintf_r+0xa3e>
 1013c00:	aa46      	add	r2, sp, #280	; 0x118
 1013c02:	9303      	str	r3, [sp, #12]
 1013c04:	920b      	str	r2, [sp, #44]	; 0x2c
 1013c06:	9305      	str	r3, [sp, #20]
 1013c08:	e582      	b.n	1013710 <_svfiprintf_r+0x270>
 1013c0a:	4637      	mov	r7, r6
 1013c0c:	9d07      	ldr	r5, [sp, #28]
 1013c0e:	2301      	movs	r3, #1
 1013c10:	3507      	adds	r5, #7
 1013c12:	f025 0207 	bic.w	r2, r5, #7
 1013c16:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1013c1a:	9207      	str	r2, [sp, #28]
 1013c1c:	e553      	b.n	10136c6 <_svfiprintf_r+0x226>
 1013c1e:	4633      	mov	r3, r6
 1013c20:	9d07      	ldr	r5, [sp, #28]
 1013c22:	3507      	adds	r5, #7
 1013c24:	f025 0207 	bic.w	r2, r5, #7
 1013c28:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1013c2c:	9207      	str	r2, [sp, #28]
 1013c2e:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
 1013c32:	2300      	movs	r3, #0
 1013c34:	e547      	b.n	10136c6 <_svfiprintf_r+0x226>
 1013c36:	4611      	mov	r1, r2
 1013c38:	08e2      	lsrs	r2, r4, #3
 1013c3a:	08e8      	lsrs	r0, r5, #3
 1013c3c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1013c40:	f004 0307 	and.w	r3, r4, #7
 1013c44:	4605      	mov	r5, r0
 1013c46:	3330      	adds	r3, #48	; 0x30
 1013c48:	4614      	mov	r4, r2
 1013c4a:	ea54 0005 	orrs.w	r0, r4, r5
 1013c4e:	f801 3c01 	strb.w	r3, [r1, #-1]
 1013c52:	f101 32ff 	add.w	r2, r1, #4294967295
 1013c56:	d1ee      	bne.n	1013c36 <_svfiprintf_r+0x796>
 1013c58:	2b30      	cmp	r3, #48	; 0x30
 1013c5a:	bf0c      	ite	eq
 1013c5c:	2300      	moveq	r3, #0
 1013c5e:	f007 0301 	andne.w	r3, r7, #1
 1013c62:	920b      	str	r2, [sp, #44]	; 0x2c
 1013c64:	2b00      	cmp	r3, #0
 1013c66:	f040 81cd 	bne.w	1014004 <_svfiprintf_r+0xb64>
 1013c6a:	ab46      	add	r3, sp, #280	; 0x118
 1013c6c:	463e      	mov	r6, r7
 1013c6e:	1a9b      	subs	r3, r3, r2
 1013c70:	9305      	str	r3, [sp, #20]
 1013c72:	e54d      	b.n	1013710 <_svfiprintf_r+0x270>
 1013c74:	9b06      	ldr	r3, [sp, #24]
 1013c76:	9c02      	ldr	r4, [sp, #8]
 1013c78:	1b1c      	subs	r4, r3, r4
 1013c7a:	2c00      	cmp	r4, #0
 1013c7c:	f77f ad9b 	ble.w	10137b6 <_svfiprintf_r+0x316>
 1013c80:	2c10      	cmp	r4, #16
 1013c82:	4db8      	ldr	r5, [pc, #736]	; (1013f64 <_svfiprintf_r+0xac4>)
 1013c84:	f340 82aa 	ble.w	10141dc <_svfiprintf_r+0xd3c>
 1013c88:	960a      	str	r6, [sp, #40]	; 0x28
 1013c8a:	2710      	movs	r7, #16
 1013c8c:	462e      	mov	r6, r5
 1013c8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1013c90:	e002      	b.n	1013c98 <_svfiprintf_r+0x7f8>
 1013c92:	3c10      	subs	r4, #16
 1013c94:	2c10      	cmp	r4, #16
 1013c96:	dd17      	ble.n	1013cc8 <_svfiprintf_r+0x828>
 1013c98:	3101      	adds	r1, #1
 1013c9a:	3210      	adds	r2, #16
 1013c9c:	2907      	cmp	r1, #7
 1013c9e:	e9c8 6700 	strd	r6, r7, [r8]
 1013ca2:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1013ca6:	f108 0808 	add.w	r8, r8, #8
 1013caa:	ddf2      	ble.n	1013c92 <_svfiprintf_r+0x7f2>
 1013cac:	aa1a      	add	r2, sp, #104	; 0x68
 1013cae:	4629      	mov	r1, r5
 1013cb0:	4658      	mov	r0, fp
 1013cb2:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013cb6:	f7ff fb77 	bl	10133a8 <__ssprint_r>
 1013cba:	2800      	cmp	r0, #0
 1013cbc:	d165      	bne.n	1013d8a <_svfiprintf_r+0x8ea>
 1013cbe:	3c10      	subs	r4, #16
 1013cc0:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1013cc4:	2c10      	cmp	r4, #16
 1013cc6:	dce7      	bgt.n	1013c98 <_svfiprintf_r+0x7f8>
 1013cc8:	4635      	mov	r5, r6
 1013cca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1013ccc:	3101      	adds	r1, #1
 1013cce:	f108 0308 	add.w	r3, r8, #8
 1013cd2:	2907      	cmp	r1, #7
 1013cd4:	4422      	add	r2, r4
 1013cd6:	f8c8 5000 	str.w	r5, [r8]
 1013cda:	921c      	str	r2, [sp, #112]	; 0x70
 1013cdc:	f8c8 4004 	str.w	r4, [r8, #4]
 1013ce0:	911b      	str	r1, [sp, #108]	; 0x6c
 1013ce2:	f300 819b 	bgt.w	101401c <_svfiprintf_r+0xb7c>
 1013ce6:	f103 0708 	add.w	r7, r3, #8
 1013cea:	4698      	mov	r8, r3
 1013cec:	9c05      	ldr	r4, [sp, #20]
 1013cee:	1c48      	adds	r0, r1, #1
 1013cf0:	9b03      	ldr	r3, [sp, #12]
 1013cf2:	1b1c      	subs	r4, r3, r4
 1013cf4:	2c00      	cmp	r4, #0
 1013cf6:	f77f ad64 	ble.w	10137c2 <_svfiprintf_r+0x322>
 1013cfa:	2c10      	cmp	r4, #16
 1013cfc:	4d99      	ldr	r5, [pc, #612]	; (1013f64 <_svfiprintf_r+0xac4>)
 1013cfe:	f340 8210 	ble.w	1014122 <_svfiprintf_r+0xc82>
 1013d02:	9603      	str	r6, [sp, #12]
 1013d04:	2710      	movs	r7, #16
 1013d06:	462e      	mov	r6, r5
 1013d08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1013d0a:	e002      	b.n	1013d12 <_svfiprintf_r+0x872>
 1013d0c:	3c10      	subs	r4, #16
 1013d0e:	2c10      	cmp	r4, #16
 1013d10:	dd16      	ble.n	1013d40 <_svfiprintf_r+0x8a0>
 1013d12:	3101      	adds	r1, #1
 1013d14:	3210      	adds	r2, #16
 1013d16:	2907      	cmp	r1, #7
 1013d18:	e9c8 6700 	strd	r6, r7, [r8]
 1013d1c:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1013d20:	f108 0808 	add.w	r8, r8, #8
 1013d24:	ddf2      	ble.n	1013d0c <_svfiprintf_r+0x86c>
 1013d26:	aa1a      	add	r2, sp, #104	; 0x68
 1013d28:	4629      	mov	r1, r5
 1013d2a:	4658      	mov	r0, fp
 1013d2c:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013d30:	f7ff fb3a 	bl	10133a8 <__ssprint_r>
 1013d34:	bb48      	cbnz	r0, 1013d8a <_svfiprintf_r+0x8ea>
 1013d36:	3c10      	subs	r4, #16
 1013d38:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1013d3c:	2c10      	cmp	r4, #16
 1013d3e:	dce8      	bgt.n	1013d12 <_svfiprintf_r+0x872>
 1013d40:	4635      	mov	r5, r6
 1013d42:	9e03      	ldr	r6, [sp, #12]
 1013d44:	1c48      	adds	r0, r1, #1
 1013d46:	f108 0308 	add.w	r3, r8, #8
 1013d4a:	2807      	cmp	r0, #7
 1013d4c:	4422      	add	r2, r4
 1013d4e:	f8c8 5000 	str.w	r5, [r8]
 1013d52:	921c      	str	r2, [sp, #112]	; 0x70
 1013d54:	f8c8 4004 	str.w	r4, [r8, #4]
 1013d58:	901b      	str	r0, [sp, #108]	; 0x6c
 1013d5a:	f300 80d0 	bgt.w	1013efe <_svfiprintf_r+0xa5e>
 1013d5e:	3001      	adds	r0, #1
 1013d60:	f103 0708 	add.w	r7, r3, #8
 1013d64:	4698      	mov	r8, r3
 1013d66:	e52c      	b.n	10137c2 <_svfiprintf_r+0x322>
 1013d68:	aa1a      	add	r2, sp, #104	; 0x68
 1013d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013d6c:	4658      	mov	r0, fp
 1013d6e:	f7ff fb1b 	bl	10133a8 <__ssprint_r>
 1013d72:	b950      	cbnz	r0, 1013d8a <_svfiprintf_r+0x8ea>
 1013d74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1013d76:	af1d      	add	r7, sp, #116	; 0x74
 1013d78:	e52f      	b.n	10137da <_svfiprintf_r+0x33a>
 1013d7a:	aa1a      	add	r2, sp, #104	; 0x68
 1013d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013d7e:	4658      	mov	r0, fp
 1013d80:	f7ff fb12 	bl	10133a8 <__ssprint_r>
 1013d84:	2800      	cmp	r0, #0
 1013d86:	f43f ad3b 	beq.w	1013800 <_svfiprintf_r+0x360>
 1013d8a:	9b08      	ldr	r3, [sp, #32]
 1013d8c:	2b00      	cmp	r3, #0
 1013d8e:	f43f ac67 	beq.w	1013660 <_svfiprintf_r+0x1c0>
 1013d92:	9908      	ldr	r1, [sp, #32]
 1013d94:	4658      	mov	r0, fp
 1013d96:	f7fd ff73 	bl	1011c80 <_free_r>
 1013d9a:	e461      	b.n	1013660 <_svfiprintf_r+0x1c0>
 1013d9c:	2c10      	cmp	r4, #16
 1013d9e:	f645 6568 	movw	r5, #24168	; 0x5e68
 1013da2:	f2c0 1505 	movt	r5, #261	; 0x105
 1013da6:	dd23      	ble.n	1013df0 <_svfiprintf_r+0x950>
 1013da8:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 1013dac:	2710      	movs	r7, #16
 1013dae:	462e      	mov	r6, r5
 1013db0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1013db2:	e002      	b.n	1013dba <_svfiprintf_r+0x91a>
 1013db4:	3c10      	subs	r4, #16
 1013db6:	2c10      	cmp	r4, #16
 1013db8:	dd17      	ble.n	1013dea <_svfiprintf_r+0x94a>
 1013dba:	3101      	adds	r1, #1
 1013dbc:	3210      	adds	r2, #16
 1013dbe:	2907      	cmp	r1, #7
 1013dc0:	e9c8 6700 	strd	r6, r7, [r8]
 1013dc4:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1013dc8:	f108 0808 	add.w	r8, r8, #8
 1013dcc:	ddf2      	ble.n	1013db4 <_svfiprintf_r+0x914>
 1013dce:	aa1a      	add	r2, sp, #104	; 0x68
 1013dd0:	4629      	mov	r1, r5
 1013dd2:	4658      	mov	r0, fp
 1013dd4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013dd8:	f7ff fae6 	bl	10133a8 <__ssprint_r>
 1013ddc:	2800      	cmp	r0, #0
 1013dde:	d1d4      	bne.n	1013d8a <_svfiprintf_r+0x8ea>
 1013de0:	3c10      	subs	r4, #16
 1013de2:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1013de6:	2c10      	cmp	r4, #16
 1013de8:	dce7      	bgt.n	1013dba <_svfiprintf_r+0x91a>
 1013dea:	4635      	mov	r5, r6
 1013dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1013dee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 1013df0:	3101      	adds	r1, #1
 1013df2:	4422      	add	r2, r4
 1013df4:	2907      	cmp	r1, #7
 1013df6:	e9c8 5400 	strd	r5, r4, [r8]
 1013dfa:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1013dfe:	bfd8      	it	le
 1013e00:	f108 0808 	addle.w	r8, r8, #8
 1013e04:	f77f aca4 	ble.w	1013750 <_svfiprintf_r+0x2b0>
 1013e08:	aa1a      	add	r2, sp, #104	; 0x68
 1013e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013e0c:	4658      	mov	r0, fp
 1013e0e:	9310      	str	r3, [sp, #64]	; 0x40
 1013e10:	f7ff faca 	bl	10133a8 <__ssprint_r>
 1013e14:	2800      	cmp	r0, #0
 1013e16:	d1b8      	bne.n	1013d8a <_svfiprintf_r+0x8ea>
 1013e18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1013e1a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013e1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1013e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1013e22:	e495      	b.n	1013750 <_svfiprintf_r+0x2b0>
 1013e24:	aa1a      	add	r2, sp, #104	; 0x68
 1013e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013e28:	4658      	mov	r0, fp
 1013e2a:	9310      	str	r3, [sp, #64]	; 0x40
 1013e2c:	f7ff fabc 	bl	10133a8 <__ssprint_r>
 1013e30:	2800      	cmp	r0, #0
 1013e32:	d1aa      	bne.n	1013d8a <_svfiprintf_r+0x8ea>
 1013e34:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1013e36:	af1f      	add	r7, sp, #124	; 0x7c
 1013e38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1013e3a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013e3e:	1c48      	adds	r0, r1, #1
 1013e40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1013e42:	e4a1      	b.n	1013788 <_svfiprintf_r+0x2e8>
 1013e44:	aa1a      	add	r2, sp, #104	; 0x68
 1013e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013e48:	4658      	mov	r0, fp
 1013e4a:	f7ff faad 	bl	10133a8 <__ssprint_r>
 1013e4e:	2800      	cmp	r0, #0
 1013e50:	d19b      	bne.n	1013d8a <_svfiprintf_r+0x8ea>
 1013e52:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1013e54:	af1f      	add	r7, sp, #124	; 0x7c
 1013e56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1013e58:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013e5c:	1c48      	adds	r0, r1, #1
 1013e5e:	e4a6      	b.n	10137ae <_svfiprintf_r+0x30e>
 1013e60:	2c10      	cmp	r4, #16
 1013e62:	f645 6568 	movw	r5, #24168	; 0x5e68
 1013e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 1013e68:	f2c0 1505 	movt	r5, #261	; 0x105
 1013e6c:	bfc4      	itt	gt
 1013e6e:	2610      	movgt	r6, #16
 1013e70:	f8dd 8024 	ldrgt.w	r8, [sp, #36]	; 0x24
 1013e74:	dc03      	bgt.n	1013e7e <_svfiprintf_r+0x9de>
 1013e76:	e01a      	b.n	1013eae <_svfiprintf_r+0xa0e>
 1013e78:	3c10      	subs	r4, #16
 1013e7a:	2c10      	cmp	r4, #16
 1013e7c:	dd17      	ble.n	1013eae <_svfiprintf_r+0xa0e>
 1013e7e:	3301      	adds	r3, #1
 1013e80:	3210      	adds	r2, #16
 1013e82:	2b07      	cmp	r3, #7
 1013e84:	e9c7 5600 	strd	r5, r6, [r7]
 1013e88:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1013e8c:	f107 0708 	add.w	r7, r7, #8
 1013e90:	ddf2      	ble.n	1013e78 <_svfiprintf_r+0x9d8>
 1013e92:	aa1a      	add	r2, sp, #104	; 0x68
 1013e94:	4641      	mov	r1, r8
 1013e96:	4658      	mov	r0, fp
 1013e98:	af1d      	add	r7, sp, #116	; 0x74
 1013e9a:	f7ff fa85 	bl	10133a8 <__ssprint_r>
 1013e9e:	2800      	cmp	r0, #0
 1013ea0:	f47f af73 	bne.w	1013d8a <_svfiprintf_r+0x8ea>
 1013ea4:	3c10      	subs	r4, #16
 1013ea6:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1013eaa:	2c10      	cmp	r4, #16
 1013eac:	dce7      	bgt.n	1013e7e <_svfiprintf_r+0x9de>
 1013eae:	3301      	adds	r3, #1
 1013eb0:	4422      	add	r2, r4
 1013eb2:	2b07      	cmp	r3, #7
 1013eb4:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1013eb8:	e9c7 5400 	strd	r5, r4, [r7]
 1013ebc:	f77f ac95 	ble.w	10137ea <_svfiprintf_r+0x34a>
 1013ec0:	aa1a      	add	r2, sp, #104	; 0x68
 1013ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013ec4:	4658      	mov	r0, fp
 1013ec6:	f7ff fa6f 	bl	10133a8 <__ssprint_r>
 1013eca:	2800      	cmp	r0, #0
 1013ecc:	f47f af5d 	bne.w	1013d8a <_svfiprintf_r+0x8ea>
 1013ed0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1013ed2:	e48a      	b.n	10137ea <_svfiprintf_r+0x34a>
 1013ed4:	ab46      	add	r3, sp, #280	; 0x118
 1013ed6:	9203      	str	r2, [sp, #12]
 1013ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 1013eda:	9205      	str	r2, [sp, #20]
 1013edc:	e418      	b.n	1013710 <_svfiprintf_r+0x270>
 1013ede:	4637      	mov	r7, r6
 1013ee0:	2d00      	cmp	r5, #0
 1013ee2:	bf08      	it	eq
 1013ee4:	2c0a      	cmpeq	r4, #10
 1013ee6:	f080 80b0 	bcs.w	101404a <_svfiprintf_r+0xbaa>
 1013eea:	2301      	movs	r3, #1
 1013eec:	3430      	adds	r4, #48	; 0x30
 1013eee:	9305      	str	r3, [sp, #20]
 1013ef0:	463e      	mov	r6, r7
 1013ef2:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1013ef6:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1013efa:	930b      	str	r3, [sp, #44]	; 0x2c
 1013efc:	e408      	b.n	1013710 <_svfiprintf_r+0x270>
 1013efe:	aa1a      	add	r2, sp, #104	; 0x68
 1013f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 1013f02:	4658      	mov	r0, fp
 1013f04:	f7ff fa50 	bl	10133a8 <__ssprint_r>
 1013f08:	2800      	cmp	r0, #0
 1013f0a:	f47f af3e 	bne.w	1013d8a <_svfiprintf_r+0x8ea>
 1013f0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1013f10:	af1f      	add	r7, sp, #124	; 0x7c
 1013f12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1013f14:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1013f18:	3001      	adds	r0, #1
 1013f1a:	e452      	b.n	10137c2 <_svfiprintf_r+0x322>
 1013f1c:	4637      	mov	r7, r6
 1013f1e:	e55b      	b.n	10139d8 <_svfiprintf_r+0x538>
 1013f20:	9904      	ldr	r1, [sp, #16]
 1013f22:	6812      	ldr	r2, [r2, #0]
 1013f24:	9307      	str	r3, [sp, #28]
 1013f26:	17cd      	asrs	r5, r1, #31
 1013f28:	4608      	mov	r0, r1
 1013f2a:	4629      	mov	r1, r5
 1013f2c:	e9c2 0100 	strd	r0, r1, [r2]
 1013f30:	f7ff badb 	b.w	10134ea <_svfiprintf_r+0x4a>
 1013f34:	9b07      	ldr	r3, [sp, #28]
 1013f36:	2201      	movs	r2, #1
 1013f38:	ad2d      	add	r5, sp, #180	; 0xb4
 1013f3a:	9202      	str	r2, [sp, #8]
 1013f3c:	9205      	str	r2, [sp, #20]
 1013f3e:	681b      	ldr	r3, [r3, #0]
 1013f40:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1013f44:	e492      	b.n	101386c <_svfiprintf_r+0x3cc>
 1013f46:	2140      	movs	r1, #64	; 0x40
 1013f48:	4658      	mov	r0, fp
 1013f4a:	f7f7 f8c5 	bl	100b0d8 <_malloc_r>
 1013f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1013f50:	6018      	str	r0, [r3, #0]
 1013f52:	6118      	str	r0, [r3, #16]
 1013f54:	2800      	cmp	r0, #0
 1013f56:	f000 8160 	beq.w	101421a <_svfiprintf_r+0xd7a>
 1013f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1013f5c:	2340      	movs	r3, #64	; 0x40
 1013f5e:	6153      	str	r3, [r2, #20]
 1013f60:	f7ff bab2 	b.w	10134c8 <_svfiprintf_r+0x28>
 1013f64:	01055e78 	.word	0x01055e78
 1013f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1013f6a:	2208      	movs	r2, #8
 1013f6c:	2100      	movs	r1, #0
 1013f6e:	a818      	add	r0, sp, #96	; 0x60
 1013f70:	9315      	str	r3, [sp, #84]	; 0x54
 1013f72:	f7f8 f8b5 	bl	100c0e0 <memset>
 1013f76:	9f03      	ldr	r7, [sp, #12]
 1013f78:	1c7b      	adds	r3, r7, #1
 1013f7a:	f000 80d4 	beq.w	1014126 <_svfiprintf_r+0xc86>
 1013f7e:	2400      	movs	r4, #0
 1013f80:	9602      	str	r6, [sp, #8]
 1013f82:	9503      	str	r5, [sp, #12]
 1013f84:	4626      	mov	r6, r4
 1013f86:	e009      	b.n	1013f9c <_svfiprintf_r+0xafc>
 1013f88:	f7fc fab8 	bl	10104fc <_wcrtomb_r>
 1013f8c:	1833      	adds	r3, r6, r0
 1013f8e:	3001      	adds	r0, #1
 1013f90:	f000 8127 	beq.w	10141e2 <_svfiprintf_r+0xd42>
 1013f94:	42bb      	cmp	r3, r7
 1013f96:	dc0a      	bgt.n	1013fae <_svfiprintf_r+0xb0e>
 1013f98:	461e      	mov	r6, r3
 1013f9a:	d008      	beq.n	1013fae <_svfiprintf_r+0xb0e>
 1013f9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1013f9e:	ab18      	add	r3, sp, #96	; 0x60
 1013fa0:	a92d      	add	r1, sp, #180	; 0xb4
 1013fa2:	4658      	mov	r0, fp
 1013fa4:	5915      	ldr	r5, [r2, r4]
 1013fa6:	3404      	adds	r4, #4
 1013fa8:	462a      	mov	r2, r5
 1013faa:	2d00      	cmp	r5, #0
 1013fac:	d1ec      	bne.n	1013f88 <_svfiprintf_r+0xae8>
 1013fae:	9605      	str	r6, [sp, #20]
 1013fb0:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 1013fb4:	9b05      	ldr	r3, [sp, #20]
 1013fb6:	2b00      	cmp	r3, #0
 1013fb8:	f000 80c3 	beq.w	1014142 <_svfiprintf_r+0xca2>
 1013fbc:	2b63      	cmp	r3, #99	; 0x63
 1013fbe:	f300 80dc 	bgt.w	101417a <_svfiprintf_r+0xcda>
 1013fc2:	2300      	movs	r3, #0
 1013fc4:	9308      	str	r3, [sp, #32]
 1013fc6:	ab2d      	add	r3, sp, #180	; 0xb4
 1013fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 1013fca:	2208      	movs	r2, #8
 1013fcc:	2100      	movs	r1, #0
 1013fce:	a818      	add	r0, sp, #96	; 0x60
 1013fd0:	f7f8 f886 	bl	100c0e0 <memset>
 1013fd4:	9c05      	ldr	r4, [sp, #20]
 1013fd6:	ab18      	add	r3, sp, #96	; 0x60
 1013fd8:	aa15      	add	r2, sp, #84	; 0x54
 1013fda:	9300      	str	r3, [sp, #0]
 1013fdc:	4658      	mov	r0, fp
 1013fde:	4623      	mov	r3, r4
 1013fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1013fe2:	f7fc fae1 	bl	10105a8 <_wcsrtombs_r>
 1013fe6:	4284      	cmp	r4, r0
 1013fe8:	f040 811f 	bne.w	101422a <_svfiprintf_r+0xd8a>
 1013fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1013fee:	2400      	movs	r4, #0
 1013ff0:	9507      	str	r5, [sp, #28]
 1013ff2:	9403      	str	r4, [sp, #12]
 1013ff4:	4619      	mov	r1, r3
 1013ff6:	9b05      	ldr	r3, [sp, #20]
 1013ff8:	54cc      	strb	r4, [r1, r3]
 1013ffa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1013ffe:	9302      	str	r3, [sp, #8]
 1014000:	f7ff bb8e 	b.w	1013720 <_svfiprintf_r+0x280>
 1014004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1014006:	3902      	subs	r1, #2
 1014008:	2330      	movs	r3, #48	; 0x30
 101400a:	463e      	mov	r6, r7
 101400c:	910b      	str	r1, [sp, #44]	; 0x2c
 101400e:	f802 3c01 	strb.w	r3, [r2, #-1]
 1014012:	ab46      	add	r3, sp, #280	; 0x118
 1014014:	1a5b      	subs	r3, r3, r1
 1014016:	9305      	str	r3, [sp, #20]
 1014018:	f7ff bb7a 	b.w	1013710 <_svfiprintf_r+0x270>
 101401c:	aa1a      	add	r2, sp, #104	; 0x68
 101401e:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014020:	4658      	mov	r0, fp
 1014022:	f7ff f9c1 	bl	10133a8 <__ssprint_r>
 1014026:	2800      	cmp	r0, #0
 1014028:	f47f aeaf 	bne.w	1013d8a <_svfiprintf_r+0x8ea>
 101402c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 101402e:	af1f      	add	r7, sp, #124	; 0x7c
 1014030:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014032:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014036:	1c48      	adds	r0, r1, #1
 1014038:	f7ff bbbd 	b.w	10137b6 <_svfiprintf_r+0x316>
 101403c:	9a07      	ldr	r2, [sp, #28]
 101403e:	6812      	ldr	r2, [r2, #0]
 1014040:	9307      	str	r3, [sp, #28]
 1014042:	9b04      	ldr	r3, [sp, #16]
 1014044:	6013      	str	r3, [r2, #0]
 1014046:	f7ff ba50 	b.w	10134ea <_svfiprintf_r+0x4a>
 101404a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 101404e:	2200      	movs	r2, #0
 1014050:	9702      	str	r7, [sp, #8]
 1014052:	ae46      	add	r6, sp, #280	; 0x118
 1014054:	f8cd a020 	str.w	sl, [sp, #32]
 1014058:	4617      	mov	r7, r2
 101405a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 101405e:	4699      	mov	r9, r3
 1014060:	f8cd 8014 	str.w	r8, [sp, #20]
 1014064:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 1014068:	e008      	b.n	101407c <_svfiprintf_r+0xbdc>
 101406a:	f7f6 f97d 	bl	100a368 <__aeabi_uldivmod>
 101406e:	2d00      	cmp	r5, #0
 1014070:	bf08      	it	eq
 1014072:	2c0a      	cmpeq	r4, #10
 1014074:	d328      	bcc.n	10140c8 <_svfiprintf_r+0xc28>
 1014076:	4604      	mov	r4, r0
 1014078:	4646      	mov	r6, r8
 101407a:	460d      	mov	r5, r1
 101407c:	220a      	movs	r2, #10
 101407e:	2300      	movs	r3, #0
 1014080:	4620      	mov	r0, r4
 1014082:	4629      	mov	r1, r5
 1014084:	f7f6 f970 	bl	100a368 <__aeabi_uldivmod>
 1014088:	3701      	adds	r7, #1
 101408a:	4620      	mov	r0, r4
 101408c:	4629      	mov	r1, r5
 101408e:	f106 38ff 	add.w	r8, r6, #4294967295
 1014092:	2300      	movs	r3, #0
 1014094:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1014098:	220a      	movs	r2, #10
 101409a:	f806 cc01 	strb.w	ip, [r6, #-1]
 101409e:	f1b9 0f00 	cmp.w	r9, #0
 10140a2:	d0e2      	beq.n	101406a <_svfiprintf_r+0xbca>
 10140a4:	f89a 6000 	ldrb.w	r6, [sl]
 10140a8:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 10140ac:	bf18      	it	ne
 10140ae:	f04f 0c01 	movne.w	ip, #1
 10140b2:	42be      	cmp	r6, r7
 10140b4:	bf18      	it	ne
 10140b6:	f04f 0c00 	movne.w	ip, #0
 10140ba:	f1bc 0f00 	cmp.w	ip, #0
 10140be:	d0d4      	beq.n	101406a <_svfiprintf_r+0xbca>
 10140c0:	429d      	cmp	r5, r3
 10140c2:	bf08      	it	eq
 10140c4:	4294      	cmpeq	r4, r2
 10140c6:	d275      	bcs.n	10141b4 <_svfiprintf_r+0xd14>
 10140c8:	4642      	mov	r2, r8
 10140ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 10140ce:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 10140d2:	9f02      	ldr	r7, [sp, #8]
 10140d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 10140d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 10140dc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 10140e0:	e5c3      	b.n	1013c6a <_svfiprintf_r+0x7ca>
 10140e2:	9b03      	ldr	r3, [sp, #12]
 10140e4:	f248 22d0 	movw	r2, #33488	; 0x82d0
 10140e8:	9507      	str	r5, [sp, #28]
 10140ea:	f2c0 1205 	movt	r2, #261	; 0x105
 10140ee:	2b06      	cmp	r3, #6
 10140f0:	920b      	str	r2, [sp, #44]	; 0x2c
 10140f2:	bf28      	it	cs
 10140f4:	2306      	movcs	r3, #6
 10140f6:	9305      	str	r3, [sp, #20]
 10140f8:	9302      	str	r3, [sp, #8]
 10140fa:	e55b      	b.n	1013bb4 <_svfiprintf_r+0x714>
 10140fc:	05b5      	lsls	r5, r6, #22
 10140fe:	bf45      	ittet	mi
 1014100:	9207      	strmi	r2, [sp, #28]
 1014102:	b2e4      	uxtbmi	r4, r4
 1014104:	9207      	strpl	r2, [sp, #28]
 1014106:	4633      	movmi	r3, r6
 1014108:	bf4e      	itee	mi
 101410a:	2500      	movmi	r5, #0
 101410c:	2500      	movpl	r5, #0
 101410e:	4633      	movpl	r3, r6
 1014110:	e58d      	b.n	1013c2e <_svfiprintf_r+0x78e>
 1014112:	05b5      	lsls	r5, r6, #22
 1014114:	f04f 0301 	mov.w	r3, #1
 1014118:	bf48      	it	mi
 101411a:	b2e4      	uxtbmi	r4, r4
 101411c:	2500      	movs	r5, #0
 101411e:	f7ff bad2 	b.w	10136c6 <_svfiprintf_r+0x226>
 1014122:	463b      	mov	r3, r7
 1014124:	e611      	b.n	1013d4a <_svfiprintf_r+0x8aa>
 1014126:	2300      	movs	r3, #0
 1014128:	aa18      	add	r2, sp, #96	; 0x60
 101412a:	4619      	mov	r1, r3
 101412c:	9200      	str	r2, [sp, #0]
 101412e:	4658      	mov	r0, fp
 1014130:	aa15      	add	r2, sp, #84	; 0x54
 1014132:	f7fc fa39 	bl	10105a8 <_wcsrtombs_r>
 1014136:	1c43      	adds	r3, r0, #1
 1014138:	9005      	str	r0, [sp, #20]
 101413a:	d052      	beq.n	10141e2 <_svfiprintf_r+0xd42>
 101413c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101413e:	9315      	str	r3, [sp, #84]	; 0x54
 1014140:	e738      	b.n	1013fb4 <_svfiprintf_r+0xb14>
 1014142:	9b05      	ldr	r3, [sp, #20]
 1014144:	9507      	str	r5, [sp, #28]
 1014146:	e9cd 3302 	strd	r3, r3, [sp, #8]
 101414a:	9308      	str	r3, [sp, #32]
 101414c:	f7ff bae8 	b.w	1013720 <_svfiprintf_r+0x280>
 1014150:	9a07      	ldr	r2, [sp, #28]
 1014152:	9307      	str	r3, [sp, #28]
 1014154:	9b04      	ldr	r3, [sp, #16]
 1014156:	6812      	ldr	r2, [r2, #0]
 1014158:	8013      	strh	r3, [r2, #0]
 101415a:	f7ff b9c6 	b.w	10134ea <_svfiprintf_r+0x4a>
 101415e:	681c      	ldr	r4, [r3, #0]
 1014160:	4637      	mov	r7, r6
 1014162:	9207      	str	r2, [sp, #28]
 1014164:	17e5      	asrs	r5, r4, #31
 1014166:	4622      	mov	r2, r4
 1014168:	462b      	mov	r3, r5
 101416a:	e532      	b.n	1013bd2 <_svfiprintf_r+0x732>
 101416c:	4658      	mov	r0, fp
 101416e:	aa1a      	add	r2, sp, #104	; 0x68
 1014170:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014172:	f7ff f919 	bl	10133a8 <__ssprint_r>
 1014176:	f7ff ba73 	b.w	1013660 <_svfiprintf_r+0x1c0>
 101417a:	1c59      	adds	r1, r3, #1
 101417c:	4658      	mov	r0, fp
 101417e:	f7f6 ffab 	bl	100b0d8 <_malloc_r>
 1014182:	900b      	str	r0, [sp, #44]	; 0x2c
 1014184:	b368      	cbz	r0, 10141e2 <_svfiprintf_r+0xd42>
 1014186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014188:	9308      	str	r3, [sp, #32]
 101418a:	e71e      	b.n	1013fca <_svfiprintf_r+0xb2a>
 101418c:	9b03      	ldr	r3, [sp, #12]
 101418e:	9507      	str	r5, [sp, #28]
 1014190:	9302      	str	r3, [sp, #8]
 1014192:	9305      	str	r3, [sp, #20]
 1014194:	9b08      	ldr	r3, [sp, #32]
 1014196:	9303      	str	r3, [sp, #12]
 1014198:	f7ff bac2 	b.w	1013720 <_svfiprintf_r+0x280>
 101419c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101419e:	9403      	str	r4, [sp, #12]
 10141a0:	f7f8 fbae 	bl	100c900 <strlen>
 10141a4:	9507      	str	r5, [sp, #28]
 10141a6:	9408      	str	r4, [sp, #32]
 10141a8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 10141ac:	9005      	str	r0, [sp, #20]
 10141ae:	9302      	str	r3, [sp, #8]
 10141b0:	f7ff bab6 	b.w	1013720 <_svfiprintf_r+0x280>
 10141b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 10141b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 10141b8:	eba8 0802 	sub.w	r8, r8, r2
 10141bc:	4640      	mov	r0, r8
 10141be:	f7f8 fc8d 	bl	100cadc <strncpy>
 10141c2:	f89a 3001 	ldrb.w	r3, [sl, #1]
 10141c6:	b10b      	cbz	r3, 10141cc <_svfiprintf_r+0xd2c>
 10141c8:	f10a 0a01 	add.w	sl, sl, #1
 10141cc:	4620      	mov	r0, r4
 10141ce:	4629      	mov	r1, r5
 10141d0:	220a      	movs	r2, #10
 10141d2:	2300      	movs	r3, #0
 10141d4:	f7f6 f8c8 	bl	100a368 <__aeabi_uldivmod>
 10141d8:	2700      	movs	r7, #0
 10141da:	e74c      	b.n	1014076 <_svfiprintf_r+0xbd6>
 10141dc:	463b      	mov	r3, r7
 10141de:	4601      	mov	r1, r0
 10141e0:	e577      	b.n	1013cd2 <_svfiprintf_r+0x832>
 10141e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10141e4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 10141e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10141ec:	8193      	strh	r3, [r2, #12]
 10141ee:	f7ff ba3a 	b.w	1013666 <_svfiprintf_r+0x1c6>
 10141f2:	9a07      	ldr	r2, [sp, #28]
 10141f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 10141f8:	468a      	mov	sl, r1
 10141fa:	f852 0b04 	ldr.w	r0, [r2], #4
 10141fe:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1014202:	9207      	str	r2, [sp, #28]
 1014204:	9103      	str	r1, [sp, #12]
 1014206:	f7ff b99f 	b.w	1013548 <_svfiprintf_r+0xa8>
 101420a:	4637      	mov	r7, r6
 101420c:	f7ff bbcc 	b.w	10139a8 <_svfiprintf_r+0x508>
 1014210:	4633      	mov	r3, r6
 1014212:	f7ff bbbd 	b.w	1013990 <_svfiprintf_r+0x4f0>
 1014216:	4637      	mov	r7, r6
 1014218:	e462      	b.n	1013ae0 <_svfiprintf_r+0x640>
 101421a:	230c      	movs	r3, #12
 101421c:	f04f 32ff 	mov.w	r2, #4294967295
 1014220:	f8cb 3000 	str.w	r3, [fp]
 1014224:	9204      	str	r2, [sp, #16]
 1014226:	f7ff ba25 	b.w	1013674 <_svfiprintf_r+0x1d4>
 101422a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101422c:	8993      	ldrh	r3, [r2, #12]
 101422e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1014232:	8193      	strh	r3, [r2, #12]
 1014234:	e5a9      	b.n	1013d8a <_svfiprintf_r+0x8ea>
 1014236:	bf00      	nop

01014238 <__sprint_r.part.0>:
 1014238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101423c:	4693      	mov	fp, r2
 101423e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 1014240:	049c      	lsls	r4, r3, #18
 1014242:	d52c      	bpl.n	101429e <__sprint_r.part.0+0x66>
 1014244:	6893      	ldr	r3, [r2, #8]
 1014246:	460e      	mov	r6, r1
 1014248:	6812      	ldr	r2, [r2, #0]
 101424a:	4607      	mov	r7, r0
 101424c:	f102 0908 	add.w	r9, r2, #8
 1014250:	b31b      	cbz	r3, 101429a <__sprint_r.part.0+0x62>
 1014252:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 1014256:	ea5f 089a 	movs.w	r8, sl, lsr #2
 101425a:	d014      	beq.n	1014286 <__sprint_r.part.0+0x4e>
 101425c:	3d04      	subs	r5, #4
 101425e:	2400      	movs	r4, #0
 1014260:	e001      	b.n	1014266 <__sprint_r.part.0+0x2e>
 1014262:	45a0      	cmp	r8, r4
 1014264:	d00d      	beq.n	1014282 <__sprint_r.part.0+0x4a>
 1014266:	4632      	mov	r2, r6
 1014268:	f855 1f04 	ldr.w	r1, [r5, #4]!
 101426c:	4638      	mov	r0, r7
 101426e:	3401      	adds	r4, #1
 1014270:	f001 f9da 	bl	1015628 <_fputwc_r>
 1014274:	1c43      	adds	r3, r0, #1
 1014276:	d1f4      	bne.n	1014262 <__sprint_r.part.0+0x2a>
 1014278:	2300      	movs	r3, #0
 101427a:	e9cb 3301 	strd	r3, r3, [fp, #4]
 101427e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1014282:	f8db 3008 	ldr.w	r3, [fp, #8]
 1014286:	f02a 0a03 	bic.w	sl, sl, #3
 101428a:	f109 0908 	add.w	r9, r9, #8
 101428e:	eba3 030a 	sub.w	r3, r3, sl
 1014292:	f8cb 3008 	str.w	r3, [fp, #8]
 1014296:	2b00      	cmp	r3, #0
 1014298:	d1db      	bne.n	1014252 <__sprint_r.part.0+0x1a>
 101429a:	2000      	movs	r0, #0
 101429c:	e7ec      	b.n	1014278 <__sprint_r.part.0+0x40>
 101429e:	f7fd fde7 	bl	1011e70 <__sfvwrite_r>
 10142a2:	2300      	movs	r3, #0
 10142a4:	e9cb 3301 	strd	r3, r3, [fp, #4]
 10142a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

010142ac <__sprint_r>:
 10142ac:	6893      	ldr	r3, [r2, #8]
 10142ae:	b103      	cbz	r3, 10142b2 <__sprint_r+0x6>
 10142b0:	e7c2      	b.n	1014238 <__sprint_r.part.0>
 10142b2:	b410      	push	{r4}
 10142b4:	4618      	mov	r0, r3
 10142b6:	6053      	str	r3, [r2, #4]
 10142b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 10142bc:	4770      	bx	lr
 10142be:	bf00      	nop

010142c0 <_vfiprintf_r>:
 10142c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10142c4:	b0c7      	sub	sp, #284	; 0x11c
 10142c6:	4683      	mov	fp, r0
 10142c8:	4615      	mov	r5, r2
 10142ca:	9106      	str	r1, [sp, #24]
 10142cc:	a816      	add	r0, sp, #88	; 0x58
 10142ce:	2208      	movs	r2, #8
 10142d0:	2100      	movs	r1, #0
 10142d2:	461c      	mov	r4, r3
 10142d4:	9307      	str	r3, [sp, #28]
 10142d6:	f7f7 ff03 	bl	100c0e0 <memset>
 10142da:	f1bb 0f00 	cmp.w	fp, #0
 10142de:	d004      	beq.n	10142ea <_vfiprintf_r+0x2a>
 10142e0:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 10142e4:	2b00      	cmp	r3, #0
 10142e6:	f000 83ac 	beq.w	1014a42 <_vfiprintf_r+0x782>
 10142ea:	9906      	ldr	r1, [sp, #24]
 10142ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 10142f0:	b293      	uxth	r3, r2
 10142f2:	049e      	lsls	r6, r3, #18
 10142f4:	d407      	bmi.n	1014306 <_vfiprintf_r+0x46>
 10142f6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 10142fa:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 10142fc:	818b      	strh	r3, [r1, #12]
 10142fe:	b29b      	uxth	r3, r3
 1014300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 1014304:	664a      	str	r2, [r1, #100]	; 0x64
 1014306:	0718      	lsls	r0, r3, #28
 1014308:	f140 80af 	bpl.w	101446a <_vfiprintf_r+0x1aa>
 101430c:	9a06      	ldr	r2, [sp, #24]
 101430e:	6912      	ldr	r2, [r2, #16]
 1014310:	2a00      	cmp	r2, #0
 1014312:	f000 80aa 	beq.w	101446a <_vfiprintf_r+0x1aa>
 1014316:	f003 031a 	and.w	r3, r3, #26
 101431a:	2b0a      	cmp	r3, #10
 101431c:	f000 80b3 	beq.w	1014486 <_vfiprintf_r+0x1c6>
 1014320:	2300      	movs	r3, #0
 1014322:	930c      	str	r3, [sp, #48]	; 0x30
 1014324:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 1014328:	f248 7858 	movw	r8, #34648	; 0x8758
 101432c:	930d      	str	r3, [sp, #52]	; 0x34
 101432e:	f2c0 1805 	movt	r8, #261	; 0x105
 1014332:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 1014336:	462f      	mov	r7, r5
 1014338:	9303      	str	r3, [sp, #12]
 101433a:	ab1d      	add	r3, sp, #116	; 0x74
 101433c:	931a      	str	r3, [sp, #104]	; 0x68
 101433e:	4699      	mov	r9, r3
 1014340:	f648 3688 	movw	r6, #35720	; 0x8b88
 1014344:	f2c0 1605 	movt	r6, #261	; 0x105
 1014348:	463c      	mov	r4, r7
 101434a:	f8d8 3000 	ldr.w	r3, [r8]
 101434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 1014350:	2b00      	cmp	r3, #0
 1014352:	bf08      	it	eq
 1014354:	4633      	moveq	r3, r6
 1014356:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 101435a:	f7f6 fdfb 	bl	100af54 <__locale_mb_cur_max>
 101435e:	ab16      	add	r3, sp, #88	; 0x58
 1014360:	4622      	mov	r2, r4
 1014362:	9300      	str	r3, [sp, #0]
 1014364:	a914      	add	r1, sp, #80	; 0x50
 1014366:	4603      	mov	r3, r0
 1014368:	4658      	mov	r0, fp
 101436a:	47a8      	blx	r5
 101436c:	2800      	cmp	r0, #0
 101436e:	4603      	mov	r3, r0
 1014370:	f000 809f 	beq.w	10144b2 <_vfiprintf_r+0x1f2>
 1014374:	f2c0 8095 	blt.w	10144a2 <_vfiprintf_r+0x1e2>
 1014378:	9a14      	ldr	r2, [sp, #80]	; 0x50
 101437a:	2a25      	cmp	r2, #37	; 0x25
 101437c:	d001      	beq.n	1014382 <_vfiprintf_r+0xc2>
 101437e:	441c      	add	r4, r3
 1014380:	e7e3      	b.n	101434a <_vfiprintf_r+0x8a>
 1014382:	1be6      	subs	r6, r4, r7
 1014384:	4605      	mov	r5, r0
 1014386:	f040 8097 	bne.w	10144b8 <_vfiprintf_r+0x1f8>
 101438a:	2300      	movs	r3, #0
 101438c:	9305      	str	r3, [sp, #20]
 101438e:	461e      	mov	r6, r3
 1014390:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1014394:	7863      	ldrb	r3, [r4, #1]
 1014396:	1c67      	adds	r7, r4, #1
 1014398:	f04f 3aff 	mov.w	sl, #4294967295
 101439c:	3701      	adds	r7, #1
 101439e:	f1a3 0220 	sub.w	r2, r3, #32
 10143a2:	2a5a      	cmp	r2, #90	; 0x5a
 10143a4:	f200 8351 	bhi.w	1014a4a <_vfiprintf_r+0x78a>
 10143a8:	e8df f012 	tbh	[pc, r2, lsl #1]
 10143ac:	034f01bb 	.word	0x034f01bb
 10143b0:	0207034f 	.word	0x0207034f
 10143b4:	034f034f 	.word	0x034f034f
 10143b8:	01ea034f 	.word	0x01ea034f
 10143bc:	034f034f 	.word	0x034f034f
 10143c0:	01d701dc 	.word	0x01d701dc
 10143c4:	0223034f 	.word	0x0223034f
 10143c8:	034f020b 	.word	0x034f020b
 10143cc:	019a0227 	.word	0x019a0227
 10143d0:	019a019a 	.word	0x019a019a
 10143d4:	019a019a 	.word	0x019a019a
 10143d8:	019a019a 	.word	0x019a019a
 10143dc:	019a019a 	.word	0x019a019a
 10143e0:	034f034f 	.word	0x034f034f
 10143e4:	034f034f 	.word	0x034f034f
 10143e8:	034f034f 	.word	0x034f034f
 10143ec:	034f034f 	.word	0x034f034f
 10143f0:	02ee034f 	.word	0x02ee034f
 10143f4:	034f02e0 	.word	0x034f02e0
 10143f8:	034f034f 	.word	0x034f034f
 10143fc:	034f034f 	.word	0x034f034f
 1014400:	034f034f 	.word	0x034f034f
 1014404:	034f034f 	.word	0x034f034f
 1014408:	0311034f 	.word	0x0311034f
 101440c:	034f034f 	.word	0x034f034f
 1014410:	02b8034f 	.word	0x02b8034f
 1014414:	02aa034f 	.word	0x02aa034f
 1014418:	034f034f 	.word	0x034f034f
 101441c:	034f027e 	.word	0x034f027e
 1014420:	034f034f 	.word	0x034f034f
 1014424:	034f034f 	.word	0x034f034f
 1014428:	034f034f 	.word	0x034f034f
 101442c:	034f034f 	.word	0x034f034f
 1014430:	02ee034f 	.word	0x02ee034f
 1014434:	034f0235 	.word	0x034f0235
 1014438:	034f034f 	.word	0x034f034f
 101443c:	0235022b 	.word	0x0235022b
 1014440:	034f005b 	.word	0x034f005b
 1014444:	034f0341 	.word	0x034f0341
 1014448:	0331031c 	.word	0x0331031c
 101444c:	005b01a8 	.word	0x005b01a8
 1014450:	02b8034f 	.word	0x02b8034f
 1014454:	01c5005d 	.word	0x01c5005d
 1014458:	034f034f 	.word	0x034f034f
 101445c:	034f00b2 	.word	0x034f00b2
 1014460:	005d      	.short	0x005d
 1014462:	f046 0620 	orr.w	r6, r6, #32
 1014466:	783b      	ldrb	r3, [r7, #0]
 1014468:	e798      	b.n	101439c <_vfiprintf_r+0xdc>
 101446a:	9906      	ldr	r1, [sp, #24]
 101446c:	4658      	mov	r0, fp
 101446e:	f7fc f9cf 	bl	1010810 <__swsetup_r>
 1014472:	2800      	cmp	r0, #0
 1014474:	f040 86c4 	bne.w	1015200 <_vfiprintf_r+0xf40>
 1014478:	9b06      	ldr	r3, [sp, #24]
 101447a:	899b      	ldrh	r3, [r3, #12]
 101447c:	f003 031a 	and.w	r3, r3, #26
 1014480:	2b0a      	cmp	r3, #10
 1014482:	f47f af4d 	bne.w	1014320 <_vfiprintf_r+0x60>
 1014486:	9b06      	ldr	r3, [sp, #24]
 1014488:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 101448c:	2b00      	cmp	r3, #0
 101448e:	f6ff af47 	blt.w	1014320 <_vfiprintf_r+0x60>
 1014492:	4623      	mov	r3, r4
 1014494:	462a      	mov	r2, r5
 1014496:	9906      	ldr	r1, [sp, #24]
 1014498:	4658      	mov	r0, fp
 101449a:	f000 fedd 	bl	1015258 <__sbprintf>
 101449e:	9003      	str	r0, [sp, #12]
 10144a0:	e02f      	b.n	1014502 <_vfiprintf_r+0x242>
 10144a2:	2208      	movs	r2, #8
 10144a4:	2100      	movs	r1, #0
 10144a6:	a816      	add	r0, sp, #88	; 0x58
 10144a8:	f7f7 fe1a 	bl	100c0e0 <memset>
 10144ac:	2301      	movs	r3, #1
 10144ae:	441c      	add	r4, r3
 10144b0:	e74b      	b.n	101434a <_vfiprintf_r+0x8a>
 10144b2:	1be6      	subs	r6, r4, r7
 10144b4:	4605      	mov	r5, r0
 10144b6:	d01a      	beq.n	10144ee <_vfiprintf_r+0x22e>
 10144b8:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 10144bc:	e9c9 7600 	strd	r7, r6, [r9]
 10144c0:	3301      	adds	r3, #1
 10144c2:	4432      	add	r2, r6
 10144c4:	2b07      	cmp	r3, #7
 10144c6:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 10144ca:	dd1e      	ble.n	101450a <_vfiprintf_r+0x24a>
 10144cc:	2a00      	cmp	r2, #0
 10144ce:	f000 84ce 	beq.w	1014e6e <_vfiprintf_r+0xbae>
 10144d2:	aa1a      	add	r2, sp, #104	; 0x68
 10144d4:	9906      	ldr	r1, [sp, #24]
 10144d6:	4658      	mov	r0, fp
 10144d8:	f7ff feae 	bl	1014238 <__sprint_r.part.0>
 10144dc:	b958      	cbnz	r0, 10144f6 <_vfiprintf_r+0x236>
 10144de:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10144e2:	9b03      	ldr	r3, [sp, #12]
 10144e4:	4433      	add	r3, r6
 10144e6:	9303      	str	r3, [sp, #12]
 10144e8:	2d00      	cmp	r5, #0
 10144ea:	f47f af4e 	bne.w	101438a <_vfiprintf_r+0xca>
 10144ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 10144f0:	2b00      	cmp	r3, #0
 10144f2:	f040 8633 	bne.w	101515c <_vfiprintf_r+0xe9c>
 10144f6:	9b06      	ldr	r3, [sp, #24]
 10144f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 10144fc:	065b      	lsls	r3, r3, #25
 10144fe:	f100 867f 	bmi.w	1015200 <_vfiprintf_r+0xf40>
 1014502:	9803      	ldr	r0, [sp, #12]
 1014504:	b047      	add	sp, #284	; 0x11c
 1014506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101450a:	f109 0908 	add.w	r9, r9, #8
 101450e:	e7e8      	b.n	10144e2 <_vfiprintf_r+0x222>
 1014510:	06b1      	lsls	r1, r6, #26
 1014512:	f248 22bc 	movw	r2, #33468	; 0x82bc
 1014516:	f2c0 1205 	movt	r2, #261	; 0x105
 101451a:	920c      	str	r2, [sp, #48]	; 0x30
 101451c:	f140 81cc 	bpl.w	10148b8 <_vfiprintf_r+0x5f8>
 1014520:	9d07      	ldr	r5, [sp, #28]
 1014522:	3507      	adds	r5, #7
 1014524:	f025 0207 	bic.w	r2, r5, #7
 1014528:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101452c:	9207      	str	r2, [sp, #28]
 101452e:	ea54 0205 	orrs.w	r2, r4, r5
 1014532:	f006 0201 	and.w	r2, r6, #1
 1014536:	bf08      	it	eq
 1014538:	2200      	moveq	r2, #0
 101453a:	2a00      	cmp	r2, #0
 101453c:	f040 81d8 	bne.w	10148f0 <_vfiprintf_r+0x630>
 1014540:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 1014544:	9302      	str	r3, [sp, #8]
 1014546:	2302      	movs	r3, #2
 1014548:	f1ba 3fff 	cmp.w	sl, #4294967295
 101454c:	f04f 0200 	mov.w	r2, #0
 1014550:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1014554:	f000 818a 	beq.w	101486c <_vfiprintf_r+0x5ac>
 1014558:	ea54 0205 	orrs.w	r2, r4, r5
 101455c:	9a02      	ldr	r2, [sp, #8]
 101455e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 1014562:	bf14      	ite	ne
 1014564:	2201      	movne	r2, #1
 1014566:	2200      	moveq	r2, #0
 1014568:	f1ba 0f00 	cmp.w	sl, #0
 101456c:	bf18      	it	ne
 101456e:	2201      	movne	r2, #1
 1014570:	2a00      	cmp	r2, #0
 1014572:	f040 84ac 	bne.w	1014ece <_vfiprintf_r+0xc0e>
 1014576:	2b00      	cmp	r3, #0
 1014578:	f040 845e 	bne.w	1014e38 <_vfiprintf_r+0xb78>
 101457c:	9a02      	ldr	r2, [sp, #8]
 101457e:	469a      	mov	sl, r3
 1014580:	f012 0201 	ands.w	r2, r2, #1
 1014584:	9204      	str	r2, [sp, #16]
 1014586:	bf04      	itt	eq
 1014588:	ab46      	addeq	r3, sp, #280	; 0x118
 101458a:	930b      	streq	r3, [sp, #44]	; 0x2c
 101458c:	d005      	beq.n	101459a <_vfiprintf_r+0x2da>
 101458e:	2330      	movs	r3, #48	; 0x30
 1014590:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 1014594:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1014598:	930b      	str	r3, [sp, #44]	; 0x2c
 101459a:	9b04      	ldr	r3, [sp, #16]
 101459c:	4553      	cmp	r3, sl
 101459e:	bfb8      	it	lt
 10145a0:	4653      	movlt	r3, sl
 10145a2:	9302      	str	r3, [sp, #8]
 10145a4:	2300      	movs	r3, #0
 10145a6:	9308      	str	r3, [sp, #32]
 10145a8:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 10145ac:	b113      	cbz	r3, 10145b4 <_vfiprintf_r+0x2f4>
 10145ae:	9b02      	ldr	r3, [sp, #8]
 10145b0:	3301      	adds	r3, #1
 10145b2:	9302      	str	r3, [sp, #8]
 10145b4:	f016 0302 	ands.w	r3, r6, #2
 10145b8:	9309      	str	r3, [sp, #36]	; 0x24
 10145ba:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	; 0x6c
 10145be:	bf18      	it	ne
 10145c0:	9b02      	ldrne	r3, [sp, #8]
 10145c2:	f102 0101 	add.w	r1, r2, #1
 10145c6:	bf1c      	itt	ne
 10145c8:	3302      	addne	r3, #2
 10145ca:	9302      	strne	r3, [sp, #8]
 10145cc:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 10145d0:	4608      	mov	r0, r1
 10145d2:	930a      	str	r3, [sp, #40]	; 0x28
 10145d4:	d105      	bne.n	10145e2 <_vfiprintf_r+0x322>
 10145d6:	9b05      	ldr	r3, [sp, #20]
 10145d8:	9c02      	ldr	r4, [sp, #8]
 10145da:	1b1c      	subs	r4, r3, r4
 10145dc:	2c00      	cmp	r4, #0
 10145de:	f300 8381 	bgt.w	1014ce4 <_vfiprintf_r+0xa24>
 10145e2:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 10145e6:	f109 0108 	add.w	r1, r9, #8
 10145ea:	b194      	cbz	r4, 1014612 <_vfiprintf_r+0x352>
 10145ec:	2807      	cmp	r0, #7
 10145ee:	f10d 024b 	add.w	r2, sp, #75	; 0x4b
 10145f2:	f10c 0c01 	add.w	ip, ip, #1
 10145f6:	f8c9 2000 	str.w	r2, [r9]
 10145fa:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 10145fe:	f04f 0201 	mov.w	r2, #1
 1014602:	f8c9 2004 	str.w	r2, [r9, #4]
 1014606:	f300 834b 	bgt.w	1014ca0 <_vfiprintf_r+0x9e0>
 101460a:	4602      	mov	r2, r0
 101460c:	4689      	mov	r9, r1
 101460e:	3001      	adds	r0, #1
 1014610:	3108      	adds	r1, #8
 1014612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1014614:	b303      	cbz	r3, 1014658 <_vfiprintf_r+0x398>
 1014616:	2807      	cmp	r0, #7
 1014618:	ab13      	add	r3, sp, #76	; 0x4c
 101461a:	f10c 0c02 	add.w	ip, ip, #2
 101461e:	f8c9 3000 	str.w	r3, [r9]
 1014622:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 1014626:	f04f 0302 	mov.w	r3, #2
 101462a:	f8c9 3004 	str.w	r3, [r9, #4]
 101462e:	f340 8354 	ble.w	1014cda <_vfiprintf_r+0xa1a>
 1014632:	f1bc 0f00 	cmp.w	ip, #0
 1014636:	f000 8430 	beq.w	1014e9a <_vfiprintf_r+0xbda>
 101463a:	aa1a      	add	r2, sp, #104	; 0x68
 101463c:	9906      	ldr	r1, [sp, #24]
 101463e:	4658      	mov	r0, fp
 1014640:	f7ff fdfa 	bl	1014238 <__sprint_r.part.0>
 1014644:	2800      	cmp	r0, #0
 1014646:	f040 8322 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 101464a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 101464c:	a91f      	add	r1, sp, #124	; 0x7c
 101464e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1014652:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014656:	1c50      	adds	r0, r2, #1
 1014658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101465a:	2b80      	cmp	r3, #128	; 0x80
 101465c:	f000 8266 	beq.w	1014b2c <_vfiprintf_r+0x86c>
 1014660:	9b04      	ldr	r3, [sp, #16]
 1014662:	ebaa 0403 	sub.w	r4, sl, r3
 1014666:	2c00      	cmp	r4, #0
 1014668:	f300 82c2 	bgt.w	1014bf0 <_vfiprintf_r+0x930>
 101466c:	9a04      	ldr	r2, [sp, #16]
 101466e:	2807      	cmp	r0, #7
 1014670:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 1014672:	901b      	str	r0, [sp, #108]	; 0x6c
 1014674:	4613      	mov	r3, r2
 1014676:	f8c9 2004 	str.w	r2, [r9, #4]
 101467a:	4463      	add	r3, ip
 101467c:	f8c9 4000 	str.w	r4, [r9]
 1014680:	931c      	str	r3, [sp, #112]	; 0x70
 1014682:	dd0c      	ble.n	101469e <_vfiprintf_r+0x3de>
 1014684:	2b00      	cmp	r3, #0
 1014686:	f000 837b 	beq.w	1014d80 <_vfiprintf_r+0xac0>
 101468a:	aa1a      	add	r2, sp, #104	; 0x68
 101468c:	9906      	ldr	r1, [sp, #24]
 101468e:	4658      	mov	r0, fp
 1014690:	f7ff fdd2 	bl	1014238 <__sprint_r.part.0>
 1014694:	2800      	cmp	r0, #0
 1014696:	f040 82fa 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 101469a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 101469c:	a91d      	add	r1, sp, #116	; 0x74
 101469e:	0772      	lsls	r2, r6, #29
 10146a0:	d505      	bpl.n	10146ae <_vfiprintf_r+0x3ee>
 10146a2:	9a05      	ldr	r2, [sp, #20]
 10146a4:	9802      	ldr	r0, [sp, #8]
 10146a6:	1a14      	subs	r4, r2, r0
 10146a8:	2c00      	cmp	r4, #0
 10146aa:	f300 8372 	bgt.w	1014d92 <_vfiprintf_r+0xad2>
 10146ae:	9a03      	ldr	r2, [sp, #12]
 10146b0:	9905      	ldr	r1, [sp, #20]
 10146b2:	9802      	ldr	r0, [sp, #8]
 10146b4:	4281      	cmp	r1, r0
 10146b6:	bfac      	ite	ge
 10146b8:	1852      	addge	r2, r2, r1
 10146ba:	1812      	addlt	r2, r2, r0
 10146bc:	9203      	str	r2, [sp, #12]
 10146be:	2b00      	cmp	r3, #0
 10146c0:	f040 82dd 	bne.w	1014c7e <_vfiprintf_r+0x9be>
 10146c4:	9908      	ldr	r1, [sp, #32]
 10146c6:	2300      	movs	r3, #0
 10146c8:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10146cc:	931b      	str	r3, [sp, #108]	; 0x6c
 10146ce:	2900      	cmp	r1, #0
 10146d0:	f43f ae36 	beq.w	1014340 <_vfiprintf_r+0x80>
 10146d4:	4658      	mov	r0, fp
 10146d6:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10146da:	f7fd fad1 	bl	1011c80 <_free_r>
 10146de:	e62f      	b.n	1014340 <_vfiprintf_r+0x80>
 10146e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10146e4:	2100      	movs	r1, #0
 10146e6:	f817 3b01 	ldrb.w	r3, [r7], #1
 10146ea:	200a      	movs	r0, #10
 10146ec:	fb00 2101 	mla	r1, r0, r1, r2
 10146f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10146f4:	2a09      	cmp	r2, #9
 10146f6:	d9f6      	bls.n	10146e6 <_vfiprintf_r+0x426>
 10146f8:	9105      	str	r1, [sp, #20]
 10146fa:	e650      	b.n	101439e <_vfiprintf_r+0xde>
 10146fc:	9b07      	ldr	r3, [sp, #28]
 10146fe:	f046 0202 	orr.w	r2, r6, #2
 1014702:	f248 21bc 	movw	r1, #33468	; 0x82bc
 1014706:	9202      	str	r2, [sp, #8]
 1014708:	f2c0 1105 	movt	r1, #261	; 0x105
 101470c:	f647 0230 	movw	r2, #30768	; 0x7830
 1014710:	f853 4b04 	ldr.w	r4, [r3], #4
 1014714:	2500      	movs	r5, #0
 1014716:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 101471a:	910c      	str	r1, [sp, #48]	; 0x30
 101471c:	9307      	str	r3, [sp, #28]
 101471e:	2302      	movs	r3, #2
 1014720:	e712      	b.n	1014548 <_vfiprintf_r+0x288>
 1014722:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1014726:	783b      	ldrb	r3, [r7, #0]
 1014728:	2a00      	cmp	r2, #0
 101472a:	f47f ae37 	bne.w	101439c <_vfiprintf_r+0xdc>
 101472e:	2220      	movs	r2, #32
 1014730:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1014734:	e632      	b.n	101439c <_vfiprintf_r+0xdc>
 1014736:	06b2      	lsls	r2, r6, #26
 1014738:	f100 81c1 	bmi.w	1014abe <_vfiprintf_r+0x7fe>
 101473c:	9a07      	ldr	r2, [sp, #28]
 101473e:	06f3      	lsls	r3, r6, #27
 1014740:	f852 4b04 	ldr.w	r4, [r2], #4
 1014744:	f100 8571 	bmi.w	101522a <_vfiprintf_r+0xf6a>
 1014748:	0675      	lsls	r5, r6, #25
 101474a:	9207      	str	r2, [sp, #28]
 101474c:	9602      	str	r6, [sp, #8]
 101474e:	f140 84c7 	bpl.w	10150e0 <_vfiprintf_r+0xe20>
 1014752:	b2a4      	uxth	r4, r4
 1014754:	2500      	movs	r5, #0
 1014756:	2301      	movs	r3, #1
 1014758:	e6f6      	b.n	1014548 <_vfiprintf_r+0x288>
 101475a:	232b      	movs	r3, #43	; 0x2b
 101475c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1014760:	783b      	ldrb	r3, [r7, #0]
 1014762:	e61b      	b.n	101439c <_vfiprintf_r+0xdc>
 1014764:	9a07      	ldr	r2, [sp, #28]
 1014766:	783b      	ldrb	r3, [r7, #0]
 1014768:	f852 1b04 	ldr.w	r1, [r2], #4
 101476c:	2900      	cmp	r1, #0
 101476e:	9105      	str	r1, [sp, #20]
 1014770:	bfa8      	it	ge
 1014772:	9207      	strge	r2, [sp, #28]
 1014774:	f6bf ae12 	bge.w	101439c <_vfiprintf_r+0xdc>
 1014778:	4249      	negs	r1, r1
 101477a:	9207      	str	r2, [sp, #28]
 101477c:	9105      	str	r1, [sp, #20]
 101477e:	e039      	b.n	10147f4 <_vfiprintf_r+0x534>
 1014780:	4658      	mov	r0, fp
 1014782:	f7fd fda5 	bl	10122d0 <_localeconv_r>
 1014786:	6843      	ldr	r3, [r0, #4]
 1014788:	4618      	mov	r0, r3
 101478a:	930e      	str	r3, [sp, #56]	; 0x38
 101478c:	f7f8 f8b8 	bl	100c900 <strlen>
 1014790:	4604      	mov	r4, r0
 1014792:	900f      	str	r0, [sp, #60]	; 0x3c
 1014794:	4658      	mov	r0, fp
 1014796:	f7fd fd9b 	bl	10122d0 <_localeconv_r>
 101479a:	6883      	ldr	r3, [r0, #8]
 101479c:	2c00      	cmp	r4, #0
 101479e:	bf18      	it	ne
 10147a0:	2b00      	cmpne	r3, #0
 10147a2:	930d      	str	r3, [sp, #52]	; 0x34
 10147a4:	f43f ae5f 	beq.w	1014466 <_vfiprintf_r+0x1a6>
 10147a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10147aa:	781a      	ldrb	r2, [r3, #0]
 10147ac:	783b      	ldrb	r3, [r7, #0]
 10147ae:	2a00      	cmp	r2, #0
 10147b0:	f43f adf4 	beq.w	101439c <_vfiprintf_r+0xdc>
 10147b4:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 10147b8:	e5f0      	b.n	101439c <_vfiprintf_r+0xdc>
 10147ba:	f046 0601 	orr.w	r6, r6, #1
 10147be:	783b      	ldrb	r3, [r7, #0]
 10147c0:	e5ec      	b.n	101439c <_vfiprintf_r+0xdc>
 10147c2:	4639      	mov	r1, r7
 10147c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 10147c8:	2b2a      	cmp	r3, #42	; 0x2a
 10147ca:	f000 851e 	beq.w	101520a <_vfiprintf_r+0xf4a>
 10147ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10147d2:	460f      	mov	r7, r1
 10147d4:	2a09      	cmp	r2, #9
 10147d6:	f04f 0a00 	mov.w	sl, #0
 10147da:	f63f ade0 	bhi.w	101439e <_vfiprintf_r+0xde>
 10147de:	f817 3b01 	ldrb.w	r3, [r7], #1
 10147e2:	210a      	movs	r1, #10
 10147e4:	fb01 2a0a 	mla	sl, r1, sl, r2
 10147e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10147ec:	2a09      	cmp	r2, #9
 10147ee:	d9f6      	bls.n	10147de <_vfiprintf_r+0x51e>
 10147f0:	e5d5      	b.n	101439e <_vfiprintf_r+0xde>
 10147f2:	783b      	ldrb	r3, [r7, #0]
 10147f4:	f046 0604 	orr.w	r6, r6, #4
 10147f8:	e5d0      	b.n	101439c <_vfiprintf_r+0xdc>
 10147fa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 10147fe:	783b      	ldrb	r3, [r7, #0]
 1014800:	e5cc      	b.n	101439c <_vfiprintf_r+0xdc>
 1014802:	783b      	ldrb	r3, [r7, #0]
 1014804:	2b68      	cmp	r3, #104	; 0x68
 1014806:	bf09      	itett	eq
 1014808:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 101480c:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1014810:	787b      	ldrbeq	r3, [r7, #1]
 1014812:	3701      	addeq	r7, #1
 1014814:	e5c2      	b.n	101439c <_vfiprintf_r+0xdc>
 1014816:	06b3      	lsls	r3, r6, #26
 1014818:	f100 8128 	bmi.w	1014a6c <_vfiprintf_r+0x7ac>
 101481c:	9b07      	ldr	r3, [sp, #28]
 101481e:	06f5      	lsls	r5, r6, #27
 1014820:	f103 0204 	add.w	r2, r3, #4
 1014824:	f100 8504 	bmi.w	1015230 <_vfiprintf_r+0xf70>
 1014828:	9b07      	ldr	r3, [sp, #28]
 101482a:	0674      	lsls	r4, r6, #25
 101482c:	bf48      	it	mi
 101482e:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1014832:	d404      	bmi.n	101483e <_vfiprintf_r+0x57e>
 1014834:	05b0      	lsls	r0, r6, #22
 1014836:	f140 848a 	bpl.w	101514e <_vfiprintf_r+0xe8e>
 101483a:	f993 4000 	ldrsb.w	r4, [r3]
 101483e:	17e5      	asrs	r5, r4, #31
 1014840:	9207      	str	r2, [sp, #28]
 1014842:	4622      	mov	r2, r4
 1014844:	2a00      	cmp	r2, #0
 1014846:	462b      	mov	r3, r5
 1014848:	f173 0300 	sbcs.w	r3, r3, #0
 101484c:	9602      	str	r6, [sp, #8]
 101484e:	f280 811d 	bge.w	1014a8c <_vfiprintf_r+0x7cc>
 1014852:	4264      	negs	r4, r4
 1014854:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1014858:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 101485c:	f04f 0301 	mov.w	r3, #1
 1014860:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1014864:	f1ba 3fff 	cmp.w	sl, #4294967295
 1014868:	f47f ae76 	bne.w	1014558 <_vfiprintf_r+0x298>
 101486c:	2b01      	cmp	r3, #1
 101486e:	f000 8304 	beq.w	1014e7a <_vfiprintf_r+0xbba>
 1014872:	2b02      	cmp	r3, #2
 1014874:	bf18      	it	ne
 1014876:	a946      	addne	r1, sp, #280	; 0x118
 1014878:	f040 8139 	bne.w	1014aee <_vfiprintf_r+0x82e>
 101487c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 101487e:	aa46      	add	r2, sp, #280	; 0x118
 1014880:	f004 010f 	and.w	r1, r4, #15
 1014884:	0923      	lsrs	r3, r4, #4
 1014886:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 101488a:	0928      	lsrs	r0, r5, #4
 101488c:	5c71      	ldrb	r1, [r6, r1]
 101488e:	461c      	mov	r4, r3
 1014890:	4605      	mov	r5, r0
 1014892:	ea54 0305 	orrs.w	r3, r4, r5
 1014896:	f802 1d01 	strb.w	r1, [r2, #-1]!
 101489a:	d1f1      	bne.n	1014880 <_vfiprintf_r+0x5c0>
 101489c:	ab46      	add	r3, sp, #280	; 0x118
 101489e:	920b      	str	r2, [sp, #44]	; 0x2c
 10148a0:	1a9b      	subs	r3, r3, r2
 10148a2:	9e02      	ldr	r6, [sp, #8]
 10148a4:	9304      	str	r3, [sp, #16]
 10148a6:	e678      	b.n	101459a <_vfiprintf_r+0x2da>
 10148a8:	06b1      	lsls	r1, r6, #26
 10148aa:	f248 026c 	movw	r2, #32876	; 0x806c
 10148ae:	f2c0 1205 	movt	r2, #261	; 0x105
 10148b2:	920c      	str	r2, [sp, #48]	; 0x30
 10148b4:	f53f ae34 	bmi.w	1014520 <_vfiprintf_r+0x260>
 10148b8:	9a07      	ldr	r2, [sp, #28]
 10148ba:	f852 4b04 	ldr.w	r4, [r2], #4
 10148be:	9207      	str	r2, [sp, #28]
 10148c0:	06f2      	lsls	r2, r6, #27
 10148c2:	d40b      	bmi.n	10148dc <_vfiprintf_r+0x61c>
 10148c4:	0675      	lsls	r5, r6, #25
 10148c6:	bf44      	itt	mi
 10148c8:	b2a4      	uxthmi	r4, r4
 10148ca:	2500      	movmi	r5, #0
 10148cc:	f53f ae2f 	bmi.w	101452e <_vfiprintf_r+0x26e>
 10148d0:	05b0      	lsls	r0, r6, #22
 10148d2:	bf44      	itt	mi
 10148d4:	b2e4      	uxtbmi	r4, r4
 10148d6:	2500      	movmi	r5, #0
 10148d8:	f53f ae29 	bmi.w	101452e <_vfiprintf_r+0x26e>
 10148dc:	2500      	movs	r5, #0
 10148de:	ea54 0205 	orrs.w	r2, r4, r5
 10148e2:	f006 0201 	and.w	r2, r6, #1
 10148e6:	bf08      	it	eq
 10148e8:	2200      	moveq	r2, #0
 10148ea:	2a00      	cmp	r2, #0
 10148ec:	f43f ae28 	beq.w	1014540 <_vfiprintf_r+0x280>
 10148f0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 10148f4:	f046 0602 	orr.w	r6, r6, #2
 10148f8:	2330      	movs	r3, #48	; 0x30
 10148fa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 10148fe:	e61f      	b.n	1014540 <_vfiprintf_r+0x280>
 1014900:	06b1      	lsls	r1, r6, #26
 1014902:	f046 0310 	orr.w	r3, r6, #16
 1014906:	9302      	str	r3, [sp, #8]
 1014908:	f100 80da 	bmi.w	1014ac0 <_vfiprintf_r+0x800>
 101490c:	9b07      	ldr	r3, [sp, #28]
 101490e:	1d1a      	adds	r2, r3, #4
 1014910:	9b07      	ldr	r3, [sp, #28]
 1014912:	2500      	movs	r5, #0
 1014914:	9207      	str	r2, [sp, #28]
 1014916:	681c      	ldr	r4, [r3, #0]
 1014918:	2301      	movs	r3, #1
 101491a:	e615      	b.n	1014548 <_vfiprintf_r+0x288>
 101491c:	9d07      	ldr	r5, [sp, #28]
 101491e:	2200      	movs	r2, #0
 1014920:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1014924:	f855 1b04 	ldr.w	r1, [r5], #4
 1014928:	910b      	str	r1, [sp, #44]	; 0x2c
 101492a:	2900      	cmp	r1, #0
 101492c:	f000 8373 	beq.w	1015016 <_vfiprintf_r+0xd56>
 1014930:	2b53      	cmp	r3, #83	; 0x53
 1014932:	f000 82ff 	beq.w	1014f34 <_vfiprintf_r+0xc74>
 1014936:	f016 0410 	ands.w	r4, r6, #16
 101493a:	f040 82fb 	bne.w	1014f34 <_vfiprintf_r+0xc74>
 101493e:	f1ba 3fff 	cmp.w	sl, #4294967295
 1014942:	f000 8420 	beq.w	1015186 <_vfiprintf_r+0xec6>
 1014946:	4652      	mov	r2, sl
 1014948:	4621      	mov	r1, r4
 101494a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101494c:	f7fd fd60 	bl	1012410 <memchr>
 1014950:	9008      	str	r0, [sp, #32]
 1014952:	2800      	cmp	r0, #0
 1014954:	f000 840e 	beq.w	1015174 <_vfiprintf_r+0xeb4>
 1014958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101495a:	46a2      	mov	sl, r4
 101495c:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1014960:	1a83      	subs	r3, r0, r2
 1014962:	9304      	str	r3, [sp, #16]
 1014964:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1014968:	9302      	str	r3, [sp, #8]
 101496a:	e61d      	b.n	10145a8 <_vfiprintf_r+0x2e8>
 101496c:	06b2      	lsls	r2, r6, #26
 101496e:	f046 0310 	orr.w	r3, r6, #16
 1014972:	9302      	str	r3, [sp, #8]
 1014974:	d47b      	bmi.n	1014a6e <_vfiprintf_r+0x7ae>
 1014976:	9b07      	ldr	r3, [sp, #28]
 1014978:	1d1a      	adds	r2, r3, #4
 101497a:	9b07      	ldr	r3, [sp, #28]
 101497c:	9207      	str	r2, [sp, #28]
 101497e:	681c      	ldr	r4, [r3, #0]
 1014980:	17e5      	asrs	r5, r4, #31
 1014982:	4622      	mov	r2, r4
 1014984:	462b      	mov	r3, r5
 1014986:	e07c      	b.n	1014a82 <_vfiprintf_r+0x7c2>
 1014988:	9a07      	ldr	r2, [sp, #28]
 101498a:	2b43      	cmp	r3, #67	; 0x43
 101498c:	f102 0404 	add.w	r4, r2, #4
 1014990:	d002      	beq.n	1014998 <_vfiprintf_r+0x6d8>
 1014992:	06f1      	lsls	r1, r6, #27
 1014994:	f140 82b5 	bpl.w	1014f02 <_vfiprintf_r+0xc42>
 1014998:	2208      	movs	r2, #8
 101499a:	2100      	movs	r1, #0
 101499c:	a818      	add	r0, sp, #96	; 0x60
 101499e:	ad2d      	add	r5, sp, #180	; 0xb4
 10149a0:	f7f7 fb9e 	bl	100c0e0 <memset>
 10149a4:	9a07      	ldr	r2, [sp, #28]
 10149a6:	ab18      	add	r3, sp, #96	; 0x60
 10149a8:	4629      	mov	r1, r5
 10149aa:	4658      	mov	r0, fp
 10149ac:	6812      	ldr	r2, [r2, #0]
 10149ae:	f7fb fda5 	bl	10104fc <_wcrtomb_r>
 10149b2:	1c43      	adds	r3, r0, #1
 10149b4:	9004      	str	r0, [sp, #16]
 10149b6:	f000 8413 	beq.w	10151e0 <_vfiprintf_r+0xf20>
 10149ba:	9b04      	ldr	r3, [sp, #16]
 10149bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10149c0:	9302      	str	r3, [sp, #8]
 10149c2:	2300      	movs	r3, #0
 10149c4:	9407      	str	r4, [sp, #28]
 10149c6:	950b      	str	r5, [sp, #44]	; 0x2c
 10149c8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10149cc:	e04a      	b.n	1014a64 <_vfiprintf_r+0x7a4>
 10149ce:	06b1      	lsls	r1, r6, #26
 10149d0:	f046 0310 	orr.w	r3, r6, #16
 10149d4:	d47e      	bmi.n	1014ad4 <_vfiprintf_r+0x814>
 10149d6:	9a07      	ldr	r2, [sp, #28]
 10149d8:	3204      	adds	r2, #4
 10149da:	9907      	ldr	r1, [sp, #28]
 10149dc:	2500      	movs	r5, #0
 10149de:	9207      	str	r2, [sp, #28]
 10149e0:	680c      	ldr	r4, [r1, #0]
 10149e2:	e07e      	b.n	1014ae2 <_vfiprintf_r+0x822>
 10149e4:	9a07      	ldr	r2, [sp, #28]
 10149e6:	06b1      	lsls	r1, r6, #26
 10149e8:	f102 0304 	add.w	r3, r2, #4
 10149ec:	f100 8278 	bmi.w	1014ee0 <_vfiprintf_r+0xc20>
 10149f0:	06f5      	lsls	r5, r6, #27
 10149f2:	f100 8309 	bmi.w	1015008 <_vfiprintf_r+0xd48>
 10149f6:	0674      	lsls	r4, r6, #25
 10149f8:	f100 83a2 	bmi.w	1015140 <_vfiprintf_r+0xe80>
 10149fc:	05b0      	lsls	r0, r6, #22
 10149fe:	f140 8303 	bpl.w	1015008 <_vfiprintf_r+0xd48>
 1014a02:	9a07      	ldr	r2, [sp, #28]
 1014a04:	9307      	str	r3, [sp, #28]
 1014a06:	9b03      	ldr	r3, [sp, #12]
 1014a08:	6812      	ldr	r2, [r2, #0]
 1014a0a:	7013      	strb	r3, [r2, #0]
 1014a0c:	e498      	b.n	1014340 <_vfiprintf_r+0x80>
 1014a0e:	06b2      	lsls	r2, r6, #26
 1014a10:	d45f      	bmi.n	1014ad2 <_vfiprintf_r+0x812>
 1014a12:	9a07      	ldr	r2, [sp, #28]
 1014a14:	06f3      	lsls	r3, r6, #27
 1014a16:	f852 4b04 	ldr.w	r4, [r2], #4
 1014a1a:	f100 840c 	bmi.w	1015236 <_vfiprintf_r+0xf76>
 1014a1e:	0675      	lsls	r5, r6, #25
 1014a20:	f140 8353 	bpl.w	10150ca <_vfiprintf_r+0xe0a>
 1014a24:	4633      	mov	r3, r6
 1014a26:	9207      	str	r2, [sp, #28]
 1014a28:	b2a4      	uxth	r4, r4
 1014a2a:	2500      	movs	r5, #0
 1014a2c:	e059      	b.n	1014ae2 <_vfiprintf_r+0x822>
 1014a2e:	783b      	ldrb	r3, [r7, #0]
 1014a30:	2b6c      	cmp	r3, #108	; 0x6c
 1014a32:	bf09      	itett	eq
 1014a34:	f046 0620 	orreq.w	r6, r6, #32
 1014a38:	f046 0610 	orrne.w	r6, r6, #16
 1014a3c:	787b      	ldrbeq	r3, [r7, #1]
 1014a3e:	3701      	addeq	r7, #1
 1014a40:	e4ac      	b.n	101439c <_vfiprintf_r+0xdc>
 1014a42:	4658      	mov	r0, fp
 1014a44:	f7fd f8a2 	bl	1011b8c <__sinit>
 1014a48:	e44f      	b.n	10142ea <_vfiprintf_r+0x2a>
 1014a4a:	2b00      	cmp	r3, #0
 1014a4c:	f43f ad4f 	beq.w	10144ee <_vfiprintf_r+0x22e>
 1014a50:	2201      	movs	r2, #1
 1014a52:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1014a56:	9202      	str	r2, [sp, #8]
 1014a58:	2300      	movs	r3, #0
 1014a5a:	9204      	str	r2, [sp, #16]
 1014a5c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1014a60:	ab2d      	add	r3, sp, #180	; 0xb4
 1014a62:	930b      	str	r3, [sp, #44]	; 0x2c
 1014a64:	2300      	movs	r3, #0
 1014a66:	9308      	str	r3, [sp, #32]
 1014a68:	469a      	mov	sl, r3
 1014a6a:	e5a3      	b.n	10145b4 <_vfiprintf_r+0x2f4>
 1014a6c:	9602      	str	r6, [sp, #8]
 1014a6e:	9d07      	ldr	r5, [sp, #28]
 1014a70:	3507      	adds	r5, #7
 1014a72:	f025 0307 	bic.w	r3, r5, #7
 1014a76:	4619      	mov	r1, r3
 1014a78:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 1014a7c:	4614      	mov	r4, r2
 1014a7e:	461d      	mov	r5, r3
 1014a80:	9107      	str	r1, [sp, #28]
 1014a82:	2a00      	cmp	r2, #0
 1014a84:	f173 0300 	sbcs.w	r3, r3, #0
 1014a88:	f6ff aee3 	blt.w	1014852 <_vfiprintf_r+0x592>
 1014a8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 1014a90:	f000 81f3 	beq.w	1014e7a <_vfiprintf_r+0xbba>
 1014a94:	ea54 0305 	orrs.w	r3, r4, r5
 1014a98:	9b02      	ldr	r3, [sp, #8]
 1014a9a:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 1014a9e:	bf14      	ite	ne
 1014aa0:	2301      	movne	r3, #1
 1014aa2:	2300      	moveq	r3, #0
 1014aa4:	f1ba 0f00 	cmp.w	sl, #0
 1014aa8:	bf18      	it	ne
 1014aaa:	2301      	movne	r3, #1
 1014aac:	2b00      	cmp	r3, #0
 1014aae:	f040 81e3 	bne.w	1014e78 <_vfiprintf_r+0xbb8>
 1014ab2:	469a      	mov	sl, r3
 1014ab4:	ab46      	add	r3, sp, #280	; 0x118
 1014ab6:	f8cd a010 	str.w	sl, [sp, #16]
 1014aba:	930b      	str	r3, [sp, #44]	; 0x2c
 1014abc:	e56d      	b.n	101459a <_vfiprintf_r+0x2da>
 1014abe:	9602      	str	r6, [sp, #8]
 1014ac0:	9d07      	ldr	r5, [sp, #28]
 1014ac2:	2301      	movs	r3, #1
 1014ac4:	3507      	adds	r5, #7
 1014ac6:	f025 0207 	bic.w	r2, r5, #7
 1014aca:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1014ace:	9207      	str	r2, [sp, #28]
 1014ad0:	e53a      	b.n	1014548 <_vfiprintf_r+0x288>
 1014ad2:	4633      	mov	r3, r6
 1014ad4:	9d07      	ldr	r5, [sp, #28]
 1014ad6:	3507      	adds	r5, #7
 1014ad8:	f025 0207 	bic.w	r2, r5, #7
 1014adc:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1014ae0:	9207      	str	r2, [sp, #28]
 1014ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 1014ae6:	9302      	str	r3, [sp, #8]
 1014ae8:	2300      	movs	r3, #0
 1014aea:	e52d      	b.n	1014548 <_vfiprintf_r+0x288>
 1014aec:	4611      	mov	r1, r2
 1014aee:	08e2      	lsrs	r2, r4, #3
 1014af0:	08e8      	lsrs	r0, r5, #3
 1014af2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1014af6:	f004 0307 	and.w	r3, r4, #7
 1014afa:	4605      	mov	r5, r0
 1014afc:	3330      	adds	r3, #48	; 0x30
 1014afe:	4614      	mov	r4, r2
 1014b00:	ea54 0005 	orrs.w	r0, r4, r5
 1014b04:	f801 3c01 	strb.w	r3, [r1, #-1]
 1014b08:	f101 32ff 	add.w	r2, r1, #4294967295
 1014b0c:	d1ee      	bne.n	1014aec <_vfiprintf_r+0x82c>
 1014b0e:	9e02      	ldr	r6, [sp, #8]
 1014b10:	920b      	str	r2, [sp, #44]	; 0x2c
 1014b12:	4630      	mov	r0, r6
 1014b14:	2b30      	cmp	r3, #48	; 0x30
 1014b16:	bf0c      	ite	eq
 1014b18:	2000      	moveq	r0, #0
 1014b1a:	f000 0001 	andne.w	r0, r0, #1
 1014b1e:	2800      	cmp	r0, #0
 1014b20:	f040 8266 	bne.w	1014ff0 <_vfiprintf_r+0xd30>
 1014b24:	ab46      	add	r3, sp, #280	; 0x118
 1014b26:	1a9b      	subs	r3, r3, r2
 1014b28:	9304      	str	r3, [sp, #16]
 1014b2a:	e536      	b.n	101459a <_vfiprintf_r+0x2da>
 1014b2c:	9b05      	ldr	r3, [sp, #20]
 1014b2e:	9c02      	ldr	r4, [sp, #8]
 1014b30:	1b1c      	subs	r4, r3, r4
 1014b32:	2c00      	cmp	r4, #0
 1014b34:	f77f ad94 	ble.w	1014660 <_vfiprintf_r+0x3a0>
 1014b38:	2c10      	cmp	r4, #16
 1014b3a:	4dbe      	ldr	r5, [pc, #760]	; (1014e34 <_vfiprintf_r+0xb74>)
 1014b3c:	f340 834d 	ble.w	10151da <_vfiprintf_r+0xf1a>
 1014b40:	9609      	str	r6, [sp, #36]	; 0x24
 1014b42:	4666      	mov	r6, ip
 1014b44:	970a      	str	r7, [sp, #40]	; 0x28
 1014b46:	462f      	mov	r7, r5
 1014b48:	9d06      	ldr	r5, [sp, #24]
 1014b4a:	e00a      	b.n	1014b62 <_vfiprintf_r+0x8a2>
 1014b4c:	f7ff fb74 	bl	1014238 <__sprint_r.part.0>
 1014b50:	2800      	cmp	r0, #0
 1014b52:	f040 809c 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 1014b56:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1014b5a:	1c51      	adds	r1, r2, #1
 1014b5c:	3c10      	subs	r4, #16
 1014b5e:	2c10      	cmp	r4, #16
 1014b60:	dd1c      	ble.n	1014b9c <_vfiprintf_r+0x8dc>
 1014b62:	1c50      	adds	r0, r2, #1
 1014b64:	3610      	adds	r6, #16
 1014b66:	2807      	cmp	r0, #7
 1014b68:	f8c9 7000 	str.w	r7, [r9]
 1014b6c:	f102 0102 	add.w	r1, r2, #2
 1014b70:	f04f 0310 	mov.w	r3, #16
 1014b74:	961c      	str	r6, [sp, #112]	; 0x70
 1014b76:	4602      	mov	r2, r0
 1014b78:	f8c9 3004 	str.w	r3, [r9, #4]
 1014b7c:	f109 0908 	add.w	r9, r9, #8
 1014b80:	901b      	str	r0, [sp, #108]	; 0x6c
 1014b82:	ddeb      	ble.n	1014b5c <_vfiprintf_r+0x89c>
 1014b84:	aa1a      	add	r2, sp, #104	; 0x68
 1014b86:	4629      	mov	r1, r5
 1014b88:	4658      	mov	r0, fp
 1014b8a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014b8e:	2e00      	cmp	r6, #0
 1014b90:	d1dc      	bne.n	1014b4c <_vfiprintf_r+0x88c>
 1014b92:	3c10      	subs	r4, #16
 1014b94:	2101      	movs	r1, #1
 1014b96:	2c10      	cmp	r4, #16
 1014b98:	4632      	mov	r2, r6
 1014b9a:	dce2      	bgt.n	1014b62 <_vfiprintf_r+0x8a2>
 1014b9c:	46b4      	mov	ip, r6
 1014b9e:	463d      	mov	r5, r7
 1014ba0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1014ba2:	f109 0308 	add.w	r3, r9, #8
 1014ba6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 1014ba8:	2907      	cmp	r1, #7
 1014baa:	44a4      	add	ip, r4
 1014bac:	f8c9 5000 	str.w	r5, [r9]
 1014bb0:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1014bb4:	f8c9 4004 	str.w	r4, [r9, #4]
 1014bb8:	911b      	str	r1, [sp, #108]	; 0x6c
 1014bba:	f340 818a 	ble.w	1014ed2 <_vfiprintf_r+0xc12>
 1014bbe:	f1bc 0f00 	cmp.w	ip, #0
 1014bc2:	f000 82ac 	beq.w	101511e <_vfiprintf_r+0xe5e>
 1014bc6:	aa1a      	add	r2, sp, #104	; 0x68
 1014bc8:	9906      	ldr	r1, [sp, #24]
 1014bca:	4658      	mov	r0, fp
 1014bcc:	f7ff fb34 	bl	1014238 <__sprint_r.part.0>
 1014bd0:	2800      	cmp	r0, #0
 1014bd2:	d15c      	bne.n	1014c8e <_vfiprintf_r+0x9ce>
 1014bd4:	9b04      	ldr	r3, [sp, #16]
 1014bd6:	a91f      	add	r1, sp, #124	; 0x7c
 1014bd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1014bda:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014bde:	ebaa 0403 	sub.w	r4, sl, r3
 1014be2:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1014be6:	2c00      	cmp	r4, #0
 1014be8:	f102 0001 	add.w	r0, r2, #1
 1014bec:	f77f ad3e 	ble.w	101466c <_vfiprintf_r+0x3ac>
 1014bf0:	2c10      	cmp	r4, #16
 1014bf2:	4d90      	ldr	r5, [pc, #576]	; (1014e34 <_vfiprintf_r+0xb74>)
 1014bf4:	f340 827c 	ble.w	10150f0 <_vfiprintf_r+0xe30>
 1014bf8:	9609      	str	r6, [sp, #36]	; 0x24
 1014bfa:	f04f 0a10 	mov.w	sl, #16
 1014bfe:	970a      	str	r7, [sp, #40]	; 0x28
 1014c00:	4666      	mov	r6, ip
 1014c02:	462f      	mov	r7, r5
 1014c04:	9d06      	ldr	r5, [sp, #24]
 1014c06:	e009      	b.n	1014c1c <_vfiprintf_r+0x95c>
 1014c08:	f7ff fb16 	bl	1014238 <__sprint_r.part.0>
 1014c0c:	2800      	cmp	r0, #0
 1014c0e:	d13e      	bne.n	1014c8e <_vfiprintf_r+0x9ce>
 1014c10:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1014c14:	1c50      	adds	r0, r2, #1
 1014c16:	3c10      	subs	r4, #16
 1014c18:	2c10      	cmp	r4, #16
 1014c1a:	dd1a      	ble.n	1014c52 <_vfiprintf_r+0x992>
 1014c1c:	1c51      	adds	r1, r2, #1
 1014c1e:	3610      	adds	r6, #16
 1014c20:	2907      	cmp	r1, #7
 1014c22:	f8c9 7000 	str.w	r7, [r9]
 1014c26:	f102 0002 	add.w	r0, r2, #2
 1014c2a:	f8c9 a004 	str.w	sl, [r9, #4]
 1014c2e:	961c      	str	r6, [sp, #112]	; 0x70
 1014c30:	460a      	mov	r2, r1
 1014c32:	f109 0908 	add.w	r9, r9, #8
 1014c36:	911b      	str	r1, [sp, #108]	; 0x6c
 1014c38:	dded      	ble.n	1014c16 <_vfiprintf_r+0x956>
 1014c3a:	aa1a      	add	r2, sp, #104	; 0x68
 1014c3c:	4629      	mov	r1, r5
 1014c3e:	4658      	mov	r0, fp
 1014c40:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014c44:	2e00      	cmp	r6, #0
 1014c46:	d1df      	bne.n	1014c08 <_vfiprintf_r+0x948>
 1014c48:	3c10      	subs	r4, #16
 1014c4a:	2001      	movs	r0, #1
 1014c4c:	2c10      	cmp	r4, #16
 1014c4e:	4632      	mov	r2, r6
 1014c50:	dce4      	bgt.n	1014c1c <_vfiprintf_r+0x95c>
 1014c52:	46b4      	mov	ip, r6
 1014c54:	463d      	mov	r5, r7
 1014c56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1014c58:	f109 0308 	add.w	r3, r9, #8
 1014c5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 1014c5e:	2807      	cmp	r0, #7
 1014c60:	44a4      	add	ip, r4
 1014c62:	f8c9 5000 	str.w	r5, [r9]
 1014c66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1014c6a:	f8c9 4004 	str.w	r4, [r9, #4]
 1014c6e:	901b      	str	r0, [sp, #108]	; 0x6c
 1014c70:	f300 80e8 	bgt.w	1014e44 <_vfiprintf_r+0xb84>
 1014c74:	3001      	adds	r0, #1
 1014c76:	f103 0108 	add.w	r1, r3, #8
 1014c7a:	4699      	mov	r9, r3
 1014c7c:	e4f6      	b.n	101466c <_vfiprintf_r+0x3ac>
 1014c7e:	aa1a      	add	r2, sp, #104	; 0x68
 1014c80:	9906      	ldr	r1, [sp, #24]
 1014c82:	4658      	mov	r0, fp
 1014c84:	f7ff fad8 	bl	1014238 <__sprint_r.part.0>
 1014c88:	2800      	cmp	r0, #0
 1014c8a:	f43f ad1b 	beq.w	10146c4 <_vfiprintf_r+0x404>
 1014c8e:	9b08      	ldr	r3, [sp, #32]
 1014c90:	2b00      	cmp	r3, #0
 1014c92:	f43f ac30 	beq.w	10144f6 <_vfiprintf_r+0x236>
 1014c96:	9908      	ldr	r1, [sp, #32]
 1014c98:	4658      	mov	r0, fp
 1014c9a:	f7fc fff1 	bl	1011c80 <_free_r>
 1014c9e:	e42a      	b.n	10144f6 <_vfiprintf_r+0x236>
 1014ca0:	f1bc 0f00 	cmp.w	ip, #0
 1014ca4:	d00e      	beq.n	1014cc4 <_vfiprintf_r+0xa04>
 1014ca6:	aa1a      	add	r2, sp, #104	; 0x68
 1014ca8:	9906      	ldr	r1, [sp, #24]
 1014caa:	4658      	mov	r0, fp
 1014cac:	f7ff fac4 	bl	1014238 <__sprint_r.part.0>
 1014cb0:	2800      	cmp	r0, #0
 1014cb2:	d1ec      	bne.n	1014c8e <_vfiprintf_r+0x9ce>
 1014cb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1014cb6:	a91f      	add	r1, sp, #124	; 0x7c
 1014cb8:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1014cbc:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014cc0:	1c50      	adds	r0, r2, #1
 1014cc2:	e4a6      	b.n	1014612 <_vfiprintf_r+0x352>
 1014cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1014cc6:	2b00      	cmp	r3, #0
 1014cc8:	f000 8114 	beq.w	1014ef4 <_vfiprintf_r+0xc34>
 1014ccc:	a91f      	add	r1, sp, #124	; 0x7c
 1014cce:	2302      	movs	r3, #2
 1014cd0:	4610      	mov	r0, r2
 1014cd2:	931e      	str	r3, [sp, #120]	; 0x78
 1014cd4:	469c      	mov	ip, r3
 1014cd6:	ab13      	add	r3, sp, #76	; 0x4c
 1014cd8:	931d      	str	r3, [sp, #116]	; 0x74
 1014cda:	4602      	mov	r2, r0
 1014cdc:	4689      	mov	r9, r1
 1014cde:	3001      	adds	r0, #1
 1014ce0:	3108      	adds	r1, #8
 1014ce2:	e4b9      	b.n	1014658 <_vfiprintf_r+0x398>
 1014ce4:	2c10      	cmp	r4, #16
 1014ce6:	f645 6588 	movw	r5, #24200	; 0x5e88
 1014cea:	f2c0 1505 	movt	r5, #261	; 0x105
 1014cee:	f340 8256 	ble.w	101519e <_vfiprintf_r+0xede>
 1014cf2:	9610      	str	r6, [sp, #64]	; 0x40
 1014cf4:	2310      	movs	r3, #16
 1014cf6:	9711      	str	r7, [sp, #68]	; 0x44
 1014cf8:	4666      	mov	r6, ip
 1014cfa:	9f06      	ldr	r7, [sp, #24]
 1014cfc:	e00c      	b.n	1014d18 <_vfiprintf_r+0xa58>
 1014cfe:	f7ff fa9b 	bl	1014238 <__sprint_r.part.0>
 1014d02:	2800      	cmp	r0, #0
 1014d04:	d1c3      	bne.n	1014c8e <_vfiprintf_r+0x9ce>
 1014d06:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1014d0a:	2310      	movs	r3, #16
 1014d0c:	f102 0e01 	add.w	lr, r2, #1
 1014d10:	3c10      	subs	r4, #16
 1014d12:	1c51      	adds	r1, r2, #1
 1014d14:	2c10      	cmp	r4, #16
 1014d16:	dd1d      	ble.n	1014d54 <_vfiprintf_r+0xa94>
 1014d18:	2907      	cmp	r1, #7
 1014d1a:	f106 0610 	add.w	r6, r6, #16
 1014d1e:	f8c9 5000 	str.w	r5, [r9]
 1014d22:	f102 0e02 	add.w	lr, r2, #2
 1014d26:	f8c9 3004 	str.w	r3, [r9, #4]
 1014d2a:	460a      	mov	r2, r1
 1014d2c:	961c      	str	r6, [sp, #112]	; 0x70
 1014d2e:	f109 0908 	add.w	r9, r9, #8
 1014d32:	911b      	str	r1, [sp, #108]	; 0x6c
 1014d34:	ddec      	ble.n	1014d10 <_vfiprintf_r+0xa50>
 1014d36:	aa1a      	add	r2, sp, #104	; 0x68
 1014d38:	4639      	mov	r1, r7
 1014d3a:	4658      	mov	r0, fp
 1014d3c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014d40:	2e00      	cmp	r6, #0
 1014d42:	d1dc      	bne.n	1014cfe <_vfiprintf_r+0xa3e>
 1014d44:	3c10      	subs	r4, #16
 1014d46:	4632      	mov	r2, r6
 1014d48:	2c10      	cmp	r4, #16
 1014d4a:	f04f 0e01 	mov.w	lr, #1
 1014d4e:	f102 0101 	add.w	r1, r2, #1
 1014d52:	dce1      	bgt.n	1014d18 <_vfiprintf_r+0xa58>
 1014d54:	46b4      	mov	ip, r6
 1014d56:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 1014d5a:	f1be 0f07 	cmp.w	lr, #7
 1014d5e:	44a4      	add	ip, r4
 1014d60:	f8c9 5000 	str.w	r5, [r9]
 1014d64:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1014d68:	f8c9 4004 	str.w	r4, [r9, #4]
 1014d6c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 1014d70:	f300 809a 	bgt.w	1014ea8 <_vfiprintf_r+0xbe8>
 1014d74:	f109 0908 	add.w	r9, r9, #8
 1014d78:	f10e 0001 	add.w	r0, lr, #1
 1014d7c:	4672      	mov	r2, lr
 1014d7e:	e430      	b.n	10145e2 <_vfiprintf_r+0x322>
 1014d80:	0771      	lsls	r1, r6, #29
 1014d82:	931b      	str	r3, [sp, #108]	; 0x6c
 1014d84:	d54c      	bpl.n	1014e20 <_vfiprintf_r+0xb60>
 1014d86:	9a05      	ldr	r2, [sp, #20]
 1014d88:	9902      	ldr	r1, [sp, #8]
 1014d8a:	1a54      	subs	r4, r2, r1
 1014d8c:	2c00      	cmp	r4, #0
 1014d8e:	dd47      	ble.n	1014e20 <_vfiprintf_r+0xb60>
 1014d90:	a91d      	add	r1, sp, #116	; 0x74
 1014d92:	2c10      	cmp	r4, #16
 1014d94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1014d96:	f340 8204 	ble.w	10151a2 <_vfiprintf_r+0xee2>
 1014d9a:	f645 6588 	movw	r5, #24200	; 0x5e88
 1014d9e:	2610      	movs	r6, #16
 1014da0:	f2c0 1505 	movt	r5, #261	; 0x105
 1014da4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 1014da8:	e00c      	b.n	1014dc4 <_vfiprintf_r+0xb04>
 1014daa:	f7ff fa45 	bl	1014238 <__sprint_r.part.0>
 1014dae:	a91d      	add	r1, sp, #116	; 0x74
 1014db0:	2800      	cmp	r0, #0
 1014db2:	f47f af6c 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 1014db6:	e9dd 031b 	ldrd	r0, r3, [sp, #108]	; 0x6c
 1014dba:	f100 0c01 	add.w	ip, r0, #1
 1014dbe:	3c10      	subs	r4, #16
 1014dc0:	2c10      	cmp	r4, #16
 1014dc2:	dd18      	ble.n	1014df6 <_vfiprintf_r+0xb36>
 1014dc4:	1c42      	adds	r2, r0, #1
 1014dc6:	3310      	adds	r3, #16
 1014dc8:	2a07      	cmp	r2, #7
 1014dca:	600d      	str	r5, [r1, #0]
 1014dcc:	f100 0c02 	add.w	ip, r0, #2
 1014dd0:	604e      	str	r6, [r1, #4]
 1014dd2:	931c      	str	r3, [sp, #112]	; 0x70
 1014dd4:	4610      	mov	r0, r2
 1014dd6:	f101 0108 	add.w	r1, r1, #8
 1014dda:	921b      	str	r2, [sp, #108]	; 0x6c
 1014ddc:	ddef      	ble.n	1014dbe <_vfiprintf_r+0xafe>
 1014dde:	aa1a      	add	r2, sp, #104	; 0x68
 1014de0:	4649      	mov	r1, r9
 1014de2:	4658      	mov	r0, fp
 1014de4:	2b00      	cmp	r3, #0
 1014de6:	d1e0      	bne.n	1014daa <_vfiprintf_r+0xaea>
 1014de8:	3c10      	subs	r4, #16
 1014dea:	f04f 0c01 	mov.w	ip, #1
 1014dee:	2c10      	cmp	r4, #16
 1014df0:	4618      	mov	r0, r3
 1014df2:	a91d      	add	r1, sp, #116	; 0x74
 1014df4:	dce6      	bgt.n	1014dc4 <_vfiprintf_r+0xb04>
 1014df6:	f1bc 0f07 	cmp.w	ip, #7
 1014dfa:	4423      	add	r3, r4
 1014dfc:	600d      	str	r5, [r1, #0]
 1014dfe:	931c      	str	r3, [sp, #112]	; 0x70
 1014e00:	604c      	str	r4, [r1, #4]
 1014e02:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 1014e06:	f77f ac52 	ble.w	10146ae <_vfiprintf_r+0x3ee>
 1014e0a:	b14b      	cbz	r3, 1014e20 <_vfiprintf_r+0xb60>
 1014e0c:	aa1a      	add	r2, sp, #104	; 0x68
 1014e0e:	9906      	ldr	r1, [sp, #24]
 1014e10:	4658      	mov	r0, fp
 1014e12:	f7ff fa11 	bl	1014238 <__sprint_r.part.0>
 1014e16:	2800      	cmp	r0, #0
 1014e18:	f47f af39 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 1014e1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 1014e1e:	e446      	b.n	10146ae <_vfiprintf_r+0x3ee>
 1014e20:	9b03      	ldr	r3, [sp, #12]
 1014e22:	9a05      	ldr	r2, [sp, #20]
 1014e24:	9902      	ldr	r1, [sp, #8]
 1014e26:	428a      	cmp	r2, r1
 1014e28:	bfac      	ite	ge
 1014e2a:	189b      	addge	r3, r3, r2
 1014e2c:	185b      	addlt	r3, r3, r1
 1014e2e:	9303      	str	r3, [sp, #12]
 1014e30:	e448      	b.n	10146c4 <_vfiprintf_r+0x404>
 1014e32:	bf00      	nop
 1014e34:	01055e98 	.word	0x01055e98
 1014e38:	ab46      	add	r3, sp, #280	; 0x118
 1014e3a:	4692      	mov	sl, r2
 1014e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 1014e3e:	9204      	str	r2, [sp, #16]
 1014e40:	f7ff bbab 	b.w	101459a <_vfiprintf_r+0x2da>
 1014e44:	f1bc 0f00 	cmp.w	ip, #0
 1014e48:	f000 80c8 	beq.w	1014fdc <_vfiprintf_r+0xd1c>
 1014e4c:	aa1a      	add	r2, sp, #104	; 0x68
 1014e4e:	9906      	ldr	r1, [sp, #24]
 1014e50:	4658      	mov	r0, fp
 1014e52:	f7ff f9f1 	bl	1014238 <__sprint_r.part.0>
 1014e56:	2800      	cmp	r0, #0
 1014e58:	f47f af19 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 1014e5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1014e5e:	a91f      	add	r1, sp, #124	; 0x7c
 1014e60:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1014e64:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014e68:	3001      	adds	r0, #1
 1014e6a:	f7ff bbff 	b.w	101466c <_vfiprintf_r+0x3ac>
 1014e6e:	921b      	str	r2, [sp, #108]	; 0x6c
 1014e70:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014e74:	f7ff bb35 	b.w	10144e2 <_vfiprintf_r+0x222>
 1014e78:	9602      	str	r6, [sp, #8]
 1014e7a:	2d00      	cmp	r5, #0
 1014e7c:	bf08      	it	eq
 1014e7e:	2c0a      	cmpeq	r4, #10
 1014e80:	f080 80d6 	bcs.w	1015030 <_vfiprintf_r+0xd70>
 1014e84:	2301      	movs	r3, #1
 1014e86:	3430      	adds	r4, #48	; 0x30
 1014e88:	9304      	str	r3, [sp, #16]
 1014e8a:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1014e8e:	9e02      	ldr	r6, [sp, #8]
 1014e90:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1014e94:	930b      	str	r3, [sp, #44]	; 0x2c
 1014e96:	f7ff bb80 	b.w	101459a <_vfiprintf_r+0x2da>
 1014e9a:	a91f      	add	r1, sp, #124	; 0x7c
 1014e9c:	2001      	movs	r0, #1
 1014e9e:	4662      	mov	r2, ip
 1014ea0:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014ea4:	f7ff bbd8 	b.w	1014658 <_vfiprintf_r+0x398>
 1014ea8:	f1bc 0f00 	cmp.w	ip, #0
 1014eac:	d032      	beq.n	1014f14 <_vfiprintf_r+0xc54>
 1014eae:	aa1a      	add	r2, sp, #104	; 0x68
 1014eb0:	9906      	ldr	r1, [sp, #24]
 1014eb2:	4658      	mov	r0, fp
 1014eb4:	f7ff f9c0 	bl	1014238 <__sprint_r.part.0>
 1014eb8:	2800      	cmp	r0, #0
 1014eba:	f47f aee8 	bne.w	1014c8e <_vfiprintf_r+0x9ce>
 1014ebe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1014ec0:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014ec4:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1014ec8:	1c50      	adds	r0, r2, #1
 1014eca:	f7ff bb8a 	b.w	10145e2 <_vfiprintf_r+0x322>
 1014ece:	9602      	str	r6, [sp, #8]
 1014ed0:	e4cc      	b.n	101486c <_vfiprintf_r+0x5ac>
 1014ed2:	1c48      	adds	r0, r1, #1
 1014ed4:	460a      	mov	r2, r1
 1014ed6:	4699      	mov	r9, r3
 1014ed8:	f103 0108 	add.w	r1, r3, #8
 1014edc:	f7ff bbc0 	b.w	1014660 <_vfiprintf_r+0x3a0>
 1014ee0:	9903      	ldr	r1, [sp, #12]
 1014ee2:	6812      	ldr	r2, [r2, #0]
 1014ee4:	9307      	str	r3, [sp, #28]
 1014ee6:	17cd      	asrs	r5, r1, #31
 1014ee8:	4608      	mov	r0, r1
 1014eea:	4629      	mov	r1, r5
 1014eec:	e9c2 0100 	strd	r0, r1, [r2]
 1014ef0:	f7ff ba26 	b.w	1014340 <_vfiprintf_r+0x80>
 1014ef4:	4610      	mov	r0, r2
 1014ef6:	a91f      	add	r1, sp, #124	; 0x7c
 1014ef8:	4662      	mov	r2, ip
 1014efa:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014efe:	f7ff bbab 	b.w	1014658 <_vfiprintf_r+0x398>
 1014f02:	9b07      	ldr	r3, [sp, #28]
 1014f04:	2201      	movs	r2, #1
 1014f06:	ad2d      	add	r5, sp, #180	; 0xb4
 1014f08:	9202      	str	r2, [sp, #8]
 1014f0a:	9204      	str	r2, [sp, #16]
 1014f0c:	681b      	ldr	r3, [r3, #0]
 1014f0e:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1014f12:	e556      	b.n	10149c2 <_vfiprintf_r+0x702>
 1014f14:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1014f18:	2a00      	cmp	r2, #0
 1014f1a:	f040 8107 	bne.w	101512c <_vfiprintf_r+0xe6c>
 1014f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1014f20:	2b00      	cmp	r3, #0
 1014f22:	f040 8165 	bne.w	10151f0 <_vfiprintf_r+0xf30>
 1014f26:	4662      	mov	r2, ip
 1014f28:	a91f      	add	r1, sp, #124	; 0x7c
 1014f2a:	2001      	movs	r0, #1
 1014f2c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1014f30:	f7ff bb96 	b.w	1014660 <_vfiprintf_r+0x3a0>
 1014f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014f36:	2208      	movs	r2, #8
 1014f38:	2100      	movs	r1, #0
 1014f3a:	a818      	add	r0, sp, #96	; 0x60
 1014f3c:	9315      	str	r3, [sp, #84]	; 0x54
 1014f3e:	f7f7 f8cf 	bl	100c0e0 <memset>
 1014f42:	f1ba 3fff 	cmp.w	sl, #4294967295
 1014f46:	f000 80d5 	beq.w	10150f4 <_vfiprintf_r+0xe34>
 1014f4a:	2400      	movs	r4, #0
 1014f4c:	9602      	str	r6, [sp, #8]
 1014f4e:	9507      	str	r5, [sp, #28]
 1014f50:	4626      	mov	r6, r4
 1014f52:	e009      	b.n	1014f68 <_vfiprintf_r+0xca8>
 1014f54:	f7fb fad2 	bl	10104fc <_wcrtomb_r>
 1014f58:	1833      	adds	r3, r6, r0
 1014f5a:	3001      	adds	r0, #1
 1014f5c:	f000 8140 	beq.w	10151e0 <_vfiprintf_r+0xf20>
 1014f60:	4553      	cmp	r3, sl
 1014f62:	dc0a      	bgt.n	1014f7a <_vfiprintf_r+0xcba>
 1014f64:	461e      	mov	r6, r3
 1014f66:	d008      	beq.n	1014f7a <_vfiprintf_r+0xcba>
 1014f68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1014f6a:	ab18      	add	r3, sp, #96	; 0x60
 1014f6c:	a92d      	add	r1, sp, #180	; 0xb4
 1014f6e:	4658      	mov	r0, fp
 1014f70:	5915      	ldr	r5, [r2, r4]
 1014f72:	3404      	adds	r4, #4
 1014f74:	462a      	mov	r2, r5
 1014f76:	2d00      	cmp	r5, #0
 1014f78:	d1ec      	bne.n	1014f54 <_vfiprintf_r+0xc94>
 1014f7a:	9604      	str	r6, [sp, #16]
 1014f7c:	9d07      	ldr	r5, [sp, #28]
 1014f7e:	9e02      	ldr	r6, [sp, #8]
 1014f80:	9b04      	ldr	r3, [sp, #16]
 1014f82:	2b00      	cmp	r3, #0
 1014f84:	f000 80c4 	beq.w	1015110 <_vfiprintf_r+0xe50>
 1014f88:	2b63      	cmp	r3, #99	; 0x63
 1014f8a:	f340 80ee 	ble.w	101516a <_vfiprintf_r+0xeaa>
 1014f8e:	1c59      	adds	r1, r3, #1
 1014f90:	4658      	mov	r0, fp
 1014f92:	f7f6 f8a1 	bl	100b0d8 <_malloc_r>
 1014f96:	900b      	str	r0, [sp, #44]	; 0x2c
 1014f98:	2800      	cmp	r0, #0
 1014f9a:	f000 8121 	beq.w	10151e0 <_vfiprintf_r+0xf20>
 1014f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014fa0:	9308      	str	r3, [sp, #32]
 1014fa2:	2208      	movs	r2, #8
 1014fa4:	2100      	movs	r1, #0
 1014fa6:	a818      	add	r0, sp, #96	; 0x60
 1014fa8:	f7f7 f89a 	bl	100c0e0 <memset>
 1014fac:	9c04      	ldr	r4, [sp, #16]
 1014fae:	ab18      	add	r3, sp, #96	; 0x60
 1014fb0:	aa15      	add	r2, sp, #84	; 0x54
 1014fb2:	9300      	str	r3, [sp, #0]
 1014fb4:	4658      	mov	r0, fp
 1014fb6:	4623      	mov	r3, r4
 1014fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1014fba:	f7fb faf5 	bl	10105a8 <_wcsrtombs_r>
 1014fbe:	4284      	cmp	r4, r0
 1014fc0:	f040 812d 	bne.w	101521e <_vfiprintf_r+0xf5e>
 1014fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014fc6:	2400      	movs	r4, #0
 1014fc8:	9507      	str	r5, [sp, #28]
 1014fca:	46a2      	mov	sl, r4
 1014fcc:	4619      	mov	r1, r3
 1014fce:	9b04      	ldr	r3, [sp, #16]
 1014fd0:	54cc      	strb	r4, [r1, r3]
 1014fd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1014fd6:	9302      	str	r3, [sp, #8]
 1014fd8:	f7ff bae6 	b.w	10145a8 <_vfiprintf_r+0x2e8>
 1014fdc:	9b04      	ldr	r3, [sp, #16]
 1014fde:	a91f      	add	r1, sp, #124	; 0x7c
 1014fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1014fe2:	931c      	str	r3, [sp, #112]	; 0x70
 1014fe4:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
 1014fe8:	2201      	movs	r2, #1
 1014fea:	921b      	str	r2, [sp, #108]	; 0x6c
 1014fec:	f7ff bb57 	b.w	101469e <_vfiprintf_r+0x3de>
 1014ff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1014ff2:	3902      	subs	r1, #2
 1014ff4:	2330      	movs	r3, #48	; 0x30
 1014ff6:	9e02      	ldr	r6, [sp, #8]
 1014ff8:	910b      	str	r1, [sp, #44]	; 0x2c
 1014ffa:	f802 3c01 	strb.w	r3, [r2, #-1]
 1014ffe:	ab46      	add	r3, sp, #280	; 0x118
 1015000:	1a5b      	subs	r3, r3, r1
 1015002:	9304      	str	r3, [sp, #16]
 1015004:	f7ff bac9 	b.w	101459a <_vfiprintf_r+0x2da>
 1015008:	9a07      	ldr	r2, [sp, #28]
 101500a:	6812      	ldr	r2, [r2, #0]
 101500c:	9307      	str	r3, [sp, #28]
 101500e:	9b03      	ldr	r3, [sp, #12]
 1015010:	6013      	str	r3, [r2, #0]
 1015012:	f7ff b995 	b.w	1014340 <_vfiprintf_r+0x80>
 1015016:	4653      	mov	r3, sl
 1015018:	2b06      	cmp	r3, #6
 101501a:	f248 22d0 	movw	r2, #33488	; 0x82d0
 101501e:	9507      	str	r5, [sp, #28]
 1015020:	bf28      	it	cs
 1015022:	2306      	movcs	r3, #6
 1015024:	f2c0 1205 	movt	r2, #261	; 0x105
 1015028:	9304      	str	r3, [sp, #16]
 101502a:	920b      	str	r2, [sp, #44]	; 0x2c
 101502c:	9302      	str	r3, [sp, #8]
 101502e:	e519      	b.n	1014a64 <_vfiprintf_r+0x7a4>
 1015030:	9b02      	ldr	r3, [sp, #8]
 1015032:	2200      	movs	r2, #0
 1015034:	f8cd 9010 	str.w	r9, [sp, #16]
 1015038:	ae46      	add	r6, sp, #280	; 0x118
 101503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 101503e:	9709      	str	r7, [sp, #36]	; 0x24
 1015040:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 1015044:	4691      	mov	r9, r2
 1015046:	f8cd a020 	str.w	sl, [sp, #32]
 101504a:	461f      	mov	r7, r3
 101504c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 1015050:	e008      	b.n	1015064 <_vfiprintf_r+0xda4>
 1015052:	f7f5 f989 	bl	100a368 <__aeabi_uldivmod>
 1015056:	2d00      	cmp	r5, #0
 1015058:	bf08      	it	eq
 101505a:	2c0a      	cmpeq	r4, #10
 101505c:	d328      	bcc.n	10150b0 <_vfiprintf_r+0xdf0>
 101505e:	4604      	mov	r4, r0
 1015060:	4656      	mov	r6, sl
 1015062:	460d      	mov	r5, r1
 1015064:	220a      	movs	r2, #10
 1015066:	2300      	movs	r3, #0
 1015068:	4620      	mov	r0, r4
 101506a:	4629      	mov	r1, r5
 101506c:	f7f5 f97c 	bl	100a368 <__aeabi_uldivmod>
 1015070:	f109 0901 	add.w	r9, r9, #1
 1015074:	4620      	mov	r0, r4
 1015076:	4629      	mov	r1, r5
 1015078:	f106 3aff 	add.w	sl, r6, #4294967295
 101507c:	2300      	movs	r3, #0
 101507e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1015082:	220a      	movs	r2, #10
 1015084:	f806 cc01 	strb.w	ip, [r6, #-1]
 1015088:	2f00      	cmp	r7, #0
 101508a:	d0e2      	beq.n	1015052 <_vfiprintf_r+0xd92>
 101508c:	f898 6000 	ldrb.w	r6, [r8]
 1015090:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1015094:	bf18      	it	ne
 1015096:	f04f 0c01 	movne.w	ip, #1
 101509a:	454e      	cmp	r6, r9
 101509c:	bf18      	it	ne
 101509e:	f04f 0c00 	movne.w	ip, #0
 10150a2:	f1bc 0f00 	cmp.w	ip, #0
 10150a6:	d0d4      	beq.n	1015052 <_vfiprintf_r+0xd92>
 10150a8:	429d      	cmp	r5, r3
 10150aa:	bf08      	it	eq
 10150ac:	4294      	cmpeq	r4, r2
 10150ae:	d27f      	bcs.n	10151b0 <_vfiprintf_r+0xef0>
 10150b0:	4652      	mov	r2, sl
 10150b2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 10150b6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 10150ba:	f8dd 9010 	ldr.w	r9, [sp, #16]
 10150be:	f8dd a020 	ldr.w	sl, [sp, #32]
 10150c2:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 10150c6:	9e02      	ldr	r6, [sp, #8]
 10150c8:	e52c      	b.n	1014b24 <_vfiprintf_r+0x864>
 10150ca:	05b0      	lsls	r0, r6, #22
 10150cc:	bf45      	ittet	mi
 10150ce:	9207      	strmi	r2, [sp, #28]
 10150d0:	b2e4      	uxtbmi	r4, r4
 10150d2:	9207      	strpl	r2, [sp, #28]
 10150d4:	4633      	movmi	r3, r6
 10150d6:	bf4e      	itee	mi
 10150d8:	2500      	movmi	r5, #0
 10150da:	2500      	movpl	r5, #0
 10150dc:	4633      	movpl	r3, r6
 10150de:	e500      	b.n	1014ae2 <_vfiprintf_r+0x822>
 10150e0:	05b0      	lsls	r0, r6, #22
 10150e2:	f04f 0500 	mov.w	r5, #0
 10150e6:	bf48      	it	mi
 10150e8:	b2e4      	uxtbmi	r4, r4
 10150ea:	2301      	movs	r3, #1
 10150ec:	f7ff ba2c 	b.w	1014548 <_vfiprintf_r+0x288>
 10150f0:	460b      	mov	r3, r1
 10150f2:	e5b4      	b.n	1014c5e <_vfiprintf_r+0x99e>
 10150f4:	2300      	movs	r3, #0
 10150f6:	aa18      	add	r2, sp, #96	; 0x60
 10150f8:	4619      	mov	r1, r3
 10150fa:	9200      	str	r2, [sp, #0]
 10150fc:	4658      	mov	r0, fp
 10150fe:	aa15      	add	r2, sp, #84	; 0x54
 1015100:	f7fb fa52 	bl	10105a8 <_wcsrtombs_r>
 1015104:	1c43      	adds	r3, r0, #1
 1015106:	9004      	str	r0, [sp, #16]
 1015108:	d06a      	beq.n	10151e0 <_vfiprintf_r+0xf20>
 101510a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 101510c:	9315      	str	r3, [sp, #84]	; 0x54
 101510e:	e737      	b.n	1014f80 <_vfiprintf_r+0xcc0>
 1015110:	9b04      	ldr	r3, [sp, #16]
 1015112:	9507      	str	r5, [sp, #28]
 1015114:	9302      	str	r3, [sp, #8]
 1015116:	469a      	mov	sl, r3
 1015118:	9308      	str	r3, [sp, #32]
 101511a:	f7ff ba45 	b.w	10145a8 <_vfiprintf_r+0x2e8>
 101511e:	a91f      	add	r1, sp, #124	; 0x7c
 1015120:	2001      	movs	r0, #1
 1015122:	4662      	mov	r2, ip
 1015124:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015128:	f7ff ba9a 	b.w	1014660 <_vfiprintf_r+0x3a0>
 101512c:	2201      	movs	r2, #1
 101512e:	f10d 014b 	add.w	r1, sp, #75	; 0x4b
 1015132:	4610      	mov	r0, r2
 1015134:	911d      	str	r1, [sp, #116]	; 0x74
 1015136:	921e      	str	r2, [sp, #120]	; 0x78
 1015138:	4694      	mov	ip, r2
 101513a:	a91f      	add	r1, sp, #124	; 0x7c
 101513c:	f7ff ba65 	b.w	101460a <_vfiprintf_r+0x34a>
 1015140:	9a07      	ldr	r2, [sp, #28]
 1015142:	9307      	str	r3, [sp, #28]
 1015144:	9b03      	ldr	r3, [sp, #12]
 1015146:	6812      	ldr	r2, [r2, #0]
 1015148:	8013      	strh	r3, [r2, #0]
 101514a:	f7ff b8f9 	b.w	1014340 <_vfiprintf_r+0x80>
 101514e:	681c      	ldr	r4, [r3, #0]
 1015150:	9207      	str	r2, [sp, #28]
 1015152:	9602      	str	r6, [sp, #8]
 1015154:	17e5      	asrs	r5, r4, #31
 1015156:	4622      	mov	r2, r4
 1015158:	462b      	mov	r3, r5
 101515a:	e492      	b.n	1014a82 <_vfiprintf_r+0x7c2>
 101515c:	4658      	mov	r0, fp
 101515e:	aa1a      	add	r2, sp, #104	; 0x68
 1015160:	9906      	ldr	r1, [sp, #24]
 1015162:	f7ff f869 	bl	1014238 <__sprint_r.part.0>
 1015166:	f7ff b9c6 	b.w	10144f6 <_vfiprintf_r+0x236>
 101516a:	2300      	movs	r3, #0
 101516c:	9308      	str	r3, [sp, #32]
 101516e:	ab2d      	add	r3, sp, #180	; 0xb4
 1015170:	930b      	str	r3, [sp, #44]	; 0x2c
 1015172:	e716      	b.n	1014fa2 <_vfiprintf_r+0xce2>
 1015174:	f8cd a008 	str.w	sl, [sp, #8]
 1015178:	f8cd a010 	str.w	sl, [sp, #16]
 101517c:	9507      	str	r5, [sp, #28]
 101517e:	f8dd a020 	ldr.w	sl, [sp, #32]
 1015182:	f7ff ba11 	b.w	10145a8 <_vfiprintf_r+0x2e8>
 1015186:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1015188:	46a2      	mov	sl, r4
 101518a:	f7f7 fbb9 	bl	100c900 <strlen>
 101518e:	9507      	str	r5, [sp, #28]
 1015190:	9408      	str	r4, [sp, #32]
 1015192:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1015196:	9004      	str	r0, [sp, #16]
 1015198:	9302      	str	r3, [sp, #8]
 101519a:	f7ff ba05 	b.w	10145a8 <_vfiprintf_r+0x2e8>
 101519e:	468e      	mov	lr, r1
 10151a0:	e5db      	b.n	1014d5a <_vfiprintf_r+0xa9a>
 10151a2:	f645 6588 	movw	r5, #24200	; 0x5e88
 10151a6:	f100 0c01 	add.w	ip, r0, #1
 10151aa:	f2c0 1505 	movt	r5, #261	; 0x105
 10151ae:	e622      	b.n	1014df6 <_vfiprintf_r+0xb36>
 10151b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 10151b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 10151b4:	ebaa 0a02 	sub.w	sl, sl, r2
 10151b8:	4650      	mov	r0, sl
 10151ba:	f7f7 fc8f 	bl	100cadc <strncpy>
 10151be:	f898 3001 	ldrb.w	r3, [r8, #1]
 10151c2:	b10b      	cbz	r3, 10151c8 <_vfiprintf_r+0xf08>
 10151c4:	f108 0801 	add.w	r8, r8, #1
 10151c8:	4620      	mov	r0, r4
 10151ca:	4629      	mov	r1, r5
 10151cc:	220a      	movs	r2, #10
 10151ce:	2300      	movs	r3, #0
 10151d0:	f7f5 f8ca 	bl	100a368 <__aeabi_uldivmod>
 10151d4:	f04f 0900 	mov.w	r9, #0
 10151d8:	e741      	b.n	101505e <_vfiprintf_r+0xd9e>
 10151da:	460b      	mov	r3, r1
 10151dc:	4601      	mov	r1, r0
 10151de:	e4e3      	b.n	1014ba8 <_vfiprintf_r+0x8e8>
 10151e0:	9a06      	ldr	r2, [sp, #24]
 10151e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 10151e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10151ea:	8193      	strh	r3, [r2, #12]
 10151ec:	f7ff b986 	b.w	10144fc <_vfiprintf_r+0x23c>
 10151f0:	2302      	movs	r3, #2
 10151f2:	aa13      	add	r2, sp, #76	; 0x4c
 10151f4:	931e      	str	r3, [sp, #120]	; 0x78
 10151f6:	469c      	mov	ip, r3
 10151f8:	921d      	str	r2, [sp, #116]	; 0x74
 10151fa:	a91f      	add	r1, sp, #124	; 0x7c
 10151fc:	2001      	movs	r0, #1
 10151fe:	e56c      	b.n	1014cda <_vfiprintf_r+0xa1a>
 1015200:	f04f 33ff 	mov.w	r3, #4294967295
 1015204:	9303      	str	r3, [sp, #12]
 1015206:	f7ff b97c 	b.w	1014502 <_vfiprintf_r+0x242>
 101520a:	9a07      	ldr	r2, [sp, #28]
 101520c:	787b      	ldrb	r3, [r7, #1]
 101520e:	460f      	mov	r7, r1
 1015210:	f852 0b04 	ldr.w	r0, [r2], #4
 1015214:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
 1015218:	9207      	str	r2, [sp, #28]
 101521a:	f7ff b8bf 	b.w	101439c <_vfiprintf_r+0xdc>
 101521e:	9a06      	ldr	r2, [sp, #24]
 1015220:	8993      	ldrh	r3, [r2, #12]
 1015222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1015226:	8193      	strh	r3, [r2, #12]
 1015228:	e531      	b.n	1014c8e <_vfiprintf_r+0x9ce>
 101522a:	9602      	str	r6, [sp, #8]
 101522c:	f7ff bb70 	b.w	1014910 <_vfiprintf_r+0x650>
 1015230:	9602      	str	r6, [sp, #8]
 1015232:	f7ff bba2 	b.w	101497a <_vfiprintf_r+0x6ba>
 1015236:	4633      	mov	r3, r6
 1015238:	f7ff bbcf 	b.w	10149da <_vfiprintf_r+0x71a>

0101523c <vfiprintf>:
 101523c:	b410      	push	{r4}
 101523e:	f248 7458 	movw	r4, #34648	; 0x8758
 1015242:	f2c0 1405 	movt	r4, #261	; 0x105
 1015246:	4613      	mov	r3, r2
 1015248:	460a      	mov	r2, r1
 101524a:	4601      	mov	r1, r0
 101524c:	6820      	ldr	r0, [r4, #0]
 101524e:	f85d 4b04 	ldr.w	r4, [sp], #4
 1015252:	f7ff b835 	b.w	10142c0 <_vfiprintf_r>
 1015256:	bf00      	nop

01015258 <__sbprintf>:
 1015258:	b5f0      	push	{r4, r5, r6, r7, lr}
 101525a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 101525e:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 1015260:	460c      	mov	r4, r1
 1015262:	898d      	ldrh	r5, [r1, #12]
 1015264:	2700      	movs	r7, #0
 1015266:	9706      	str	r7, [sp, #24]
 1015268:	4669      	mov	r1, sp
 101526a:	89e7      	ldrh	r7, [r4, #14]
 101526c:	f025 0502 	bic.w	r5, r5, #2
 1015270:	9619      	str	r6, [sp, #100]	; 0x64
 1015272:	f8ad 500c 	strh.w	r5, [sp, #12]
 1015276:	69e6      	ldr	r6, [r4, #28]
 1015278:	6a65      	ldr	r5, [r4, #36]	; 0x24
 101527a:	f8ad 700e 	strh.w	r7, [sp, #14]
 101527e:	9607      	str	r6, [sp, #28]
 1015280:	ae1a      	add	r6, sp, #104	; 0x68
 1015282:	9509      	str	r5, [sp, #36]	; 0x24
 1015284:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1015288:	9600      	str	r6, [sp, #0]
 101528a:	9604      	str	r6, [sp, #16]
 101528c:	4606      	mov	r6, r0
 101528e:	9502      	str	r5, [sp, #8]
 1015290:	9505      	str	r5, [sp, #20]
 1015292:	f7ff f815 	bl	10142c0 <_vfiprintf_r>
 1015296:	1e05      	subs	r5, r0, #0
 1015298:	db07      	blt.n	10152aa <__sbprintf+0x52>
 101529a:	4630      	mov	r0, r6
 101529c:	4669      	mov	r1, sp
 101529e:	f7fc fb63 	bl	1011968 <_fflush_r>
 10152a2:	2800      	cmp	r0, #0
 10152a4:	bf18      	it	ne
 10152a6:	f04f 35ff 	movne.w	r5, #4294967295
 10152aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 10152ae:	4628      	mov	r0, r5
 10152b0:	065b      	lsls	r3, r3, #25
 10152b2:	bf42      	ittt	mi
 10152b4:	89a3      	ldrhmi	r3, [r4, #12]
 10152b6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 10152ba:	81a3      	strhmi	r3, [r4, #12]
 10152bc:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 10152c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10152c2:	bf00      	nop

010152c4 <_wcsnrtombs_l>:
 10152c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10152c8:	b08b      	sub	sp, #44	; 0x2c
 10152ca:	e9dd 9414 	ldrd	r9, r4, [sp, #80]	; 0x50
 10152ce:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 10152d2:	2c00      	cmp	r4, #0
 10152d4:	d058      	beq.n	1015388 <_wcsnrtombs_l+0xc4>
 10152d6:	6816      	ldr	r6, [r2, #0]
 10152d8:	2900      	cmp	r1, #0
 10152da:	d05a      	beq.n	1015392 <_wcsnrtombs_l+0xce>
 10152dc:	f1b9 0f00 	cmp.w	r9, #0
 10152e0:	d064      	beq.n	10153ac <_wcsnrtombs_l+0xe8>
 10152e2:	1e5d      	subs	r5, r3, #1
 10152e4:	2b00      	cmp	r3, #0
 10152e6:	d063      	beq.n	10153b0 <_wcsnrtombs_l+0xec>
 10152e8:	9205      	str	r2, [sp, #20]
 10152ea:	3e04      	subs	r6, #4
 10152ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 10152f0:	f04f 0800 	mov.w	r8, #0
 10152f4:	9104      	str	r1, [sp, #16]
 10152f6:	46cb      	mov	fp, r9
 10152f8:	e00a      	b.n	1015310 <_wcsnrtombs_l+0x4c>
 10152fa:	9b03      	ldr	r3, [sp, #12]
 10152fc:	bb13      	cbnz	r3, 1015344 <_wcsnrtombs_l+0x80>
 10152fe:	6833      	ldr	r3, [r6, #0]
 1015300:	2b00      	cmp	r3, #0
 1015302:	d035      	beq.n	1015370 <_wcsnrtombs_l+0xac>
 1015304:	4559      	cmp	r1, fp
 1015306:	d255      	bcs.n	10153b4 <_wcsnrtombs_l+0xf0>
 1015308:	3d01      	subs	r5, #1
 101530a:	4688      	mov	r8, r1
 101530c:	1c6b      	adds	r3, r5, #1
 101530e:	d015      	beq.n	101533c <_wcsnrtombs_l+0x78>
 1015310:	6827      	ldr	r7, [r4, #0]
 1015312:	4623      	mov	r3, r4
 1015314:	f856 2f04 	ldr.w	r2, [r6, #4]!
 1015318:	a907      	add	r1, sp, #28
 101531a:	9802      	ldr	r0, [sp, #8]
 101531c:	9701      	str	r7, [sp, #4]
 101531e:	f8da 70e0 	ldr.w	r7, [sl, #224]	; 0xe0
 1015322:	f8d4 9004 	ldr.w	r9, [r4, #4]
 1015326:	47b8      	blx	r7
 1015328:	1c42      	adds	r2, r0, #1
 101532a:	d035      	beq.n	1015398 <_wcsnrtombs_l+0xd4>
 101532c:	eb00 0108 	add.w	r1, r0, r8
 1015330:	4559      	cmp	r1, fp
 1015332:	d9e2      	bls.n	10152fa <_wcsnrtombs_l+0x36>
 1015334:	f8dd b004 	ldr.w	fp, [sp, #4]
 1015338:	e9c4 b900 	strd	fp, r9, [r4]
 101533c:	4640      	mov	r0, r8
 101533e:	b00b      	add	sp, #44	; 0x2c
 1015340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1015344:	2800      	cmp	r0, #0
 1015346:	dd0c      	ble.n	1015362 <_wcsnrtombs_l+0x9e>
 1015348:	9b04      	ldr	r3, [sp, #16]
 101534a:	aa07      	add	r2, sp, #28
 101534c:	4418      	add	r0, r3
 101534e:	3b01      	subs	r3, #1
 1015350:	f100 3cff 	add.w	ip, r0, #4294967295
 1015354:	f812 7b01 	ldrb.w	r7, [r2], #1
 1015358:	f803 7f01 	strb.w	r7, [r3, #1]!
 101535c:	4563      	cmp	r3, ip
 101535e:	d1f9      	bne.n	1015354 <_wcsnrtombs_l+0x90>
 1015360:	9004      	str	r0, [sp, #16]
 1015362:	9a05      	ldr	r2, [sp, #20]
 1015364:	6813      	ldr	r3, [r2, #0]
 1015366:	3304      	adds	r3, #4
 1015368:	6013      	str	r3, [r2, #0]
 101536a:	6833      	ldr	r3, [r6, #0]
 101536c:	2b00      	cmp	r3, #0
 101536e:	d1c9      	bne.n	1015304 <_wcsnrtombs_l+0x40>
 1015370:	9a03      	ldr	r2, [sp, #12]
 1015372:	b10a      	cbz	r2, 1015378 <_wcsnrtombs_l+0xb4>
 1015374:	9a05      	ldr	r2, [sp, #20]
 1015376:	6013      	str	r3, [r2, #0]
 1015378:	f101 38ff 	add.w	r8, r1, #4294967295
 101537c:	2300      	movs	r3, #0
 101537e:	6023      	str	r3, [r4, #0]
 1015380:	4640      	mov	r0, r8
 1015382:	b00b      	add	sp, #44	; 0x2c
 1015384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1015388:	f500 748e 	add.w	r4, r0, #284	; 0x11c
 101538c:	6816      	ldr	r6, [r2, #0]
 101538e:	2900      	cmp	r1, #0
 1015390:	d1a4      	bne.n	10152dc <_wcsnrtombs_l+0x18>
 1015392:	f04f 39ff 	mov.w	r9, #4294967295
 1015396:	e7a4      	b.n	10152e2 <_wcsnrtombs_l+0x1e>
 1015398:	9902      	ldr	r1, [sp, #8]
 101539a:	4680      	mov	r8, r0
 101539c:	228a      	movs	r2, #138	; 0x8a
 101539e:	2300      	movs	r3, #0
 10153a0:	4640      	mov	r0, r8
 10153a2:	600a      	str	r2, [r1, #0]
 10153a4:	6023      	str	r3, [r4, #0]
 10153a6:	b00b      	add	sp, #44	; 0x2c
 10153a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10153ac:	46c8      	mov	r8, r9
 10153ae:	e7c5      	b.n	101533c <_wcsnrtombs_l+0x78>
 10153b0:	4698      	mov	r8, r3
 10153b2:	e7c3      	b.n	101533c <_wcsnrtombs_l+0x78>
 10153b4:	4688      	mov	r8, r1
 10153b6:	e7c1      	b.n	101533c <_wcsnrtombs_l+0x78>

010153b8 <_wcsnrtombs_r>:
 10153b8:	f248 7058 	movw	r0, #34648	; 0x8758
 10153bc:	f2c0 1005 	movt	r0, #261	; 0x105
 10153c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10153c2:	b085      	sub	sp, #20
 10153c4:	6800      	ldr	r0, [r0, #0]
 10153c6:	f648 3588 	movw	r5, #35720	; 0x8b88
 10153ca:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 10153ce:	f2c0 1505 	movt	r5, #261	; 0x105
 10153d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 10153d4:	9700      	str	r7, [sp, #0]
 10153d6:	2c00      	cmp	r4, #0
 10153d8:	bf08      	it	eq
 10153da:	462c      	moveq	r4, r5
 10153dc:	e9cd 6401 	strd	r6, r4, [sp, #4]
 10153e0:	f7ff ff70 	bl	10152c4 <_wcsnrtombs_l>
 10153e4:	b005      	add	sp, #20
 10153e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

010153e8 <wcsnrtombs>:
 10153e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 10153ea:	f248 7458 	movw	r4, #34648	; 0x8758
 10153ee:	f2c0 1405 	movt	r4, #261	; 0x105
 10153f2:	b085      	sub	sp, #20
 10153f4:	f648 3588 	movw	r5, #35720	; 0x8b88
 10153f8:	f2c0 1505 	movt	r5, #261	; 0x105
 10153fc:	6827      	ldr	r7, [r4, #0]
 10153fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1015400:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 1015402:	9300      	str	r3, [sp, #0]
 1015404:	4613      	mov	r3, r2
 1015406:	2c00      	cmp	r4, #0
 1015408:	bf08      	it	eq
 101540a:	462c      	moveq	r4, r5
 101540c:	460a      	mov	r2, r1
 101540e:	9402      	str	r4, [sp, #8]
 1015410:	4601      	mov	r1, r0
 1015412:	9601      	str	r6, [sp, #4]
 1015414:	4638      	mov	r0, r7
 1015416:	f7ff ff55 	bl	10152c4 <_wcsnrtombs_l>
 101541a:	b005      	add	sp, #20
 101541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101541e:	bf00      	nop

01015420 <_write_r>:
 1015420:	b570      	push	{r4, r5, r6, lr}
 1015422:	460d      	mov	r5, r1
 1015424:	f24a 4490 	movw	r4, #42128	; 0xa490
 1015428:	f2c0 140a 	movt	r4, #266	; 0x10a
 101542c:	4611      	mov	r1, r2
 101542e:	4606      	mov	r6, r0
 1015430:	461a      	mov	r2, r3
 1015432:	4628      	mov	r0, r5
 1015434:	2300      	movs	r3, #0
 1015436:	6023      	str	r3, [r4, #0]
 1015438:	f000 ea52 	blx	10158e0 <_write>
 101543c:	1c43      	adds	r3, r0, #1
 101543e:	d000      	beq.n	1015442 <_write_r+0x22>
 1015440:	bd70      	pop	{r4, r5, r6, pc}
 1015442:	6823      	ldr	r3, [r4, #0]
 1015444:	2b00      	cmp	r3, #0
 1015446:	d0fb      	beq.n	1015440 <_write_r+0x20>
 1015448:	6033      	str	r3, [r6, #0]
 101544a:	bd70      	pop	{r4, r5, r6, pc}

0101544c <_calloc_r>:
 101544c:	b510      	push	{r4, lr}
 101544e:	fb02 f101 	mul.w	r1, r2, r1
 1015452:	f7f5 fe41 	bl	100b0d8 <_malloc_r>
 1015456:	4604      	mov	r4, r0
 1015458:	b170      	cbz	r0, 1015478 <_calloc_r+0x2c>
 101545a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 101545e:	f022 0203 	bic.w	r2, r2, #3
 1015462:	3a04      	subs	r2, #4
 1015464:	2a24      	cmp	r2, #36	; 0x24
 1015466:	d81d      	bhi.n	10154a4 <_calloc_r+0x58>
 1015468:	2a13      	cmp	r2, #19
 101546a:	bf98      	it	ls
 101546c:	4602      	movls	r2, r0
 101546e:	d805      	bhi.n	101547c <_calloc_r+0x30>
 1015470:	2300      	movs	r3, #0
 1015472:	e9c2 3300 	strd	r3, r3, [r2]
 1015476:	6093      	str	r3, [r2, #8]
 1015478:	4620      	mov	r0, r4
 101547a:	bd10      	pop	{r4, pc}
 101547c:	2a1b      	cmp	r2, #27
 101547e:	f04f 0300 	mov.w	r3, #0
 1015482:	bf98      	it	ls
 1015484:	f100 0208 	addls.w	r2, r0, #8
 1015488:	e9c0 3300 	strd	r3, r3, [r0]
 101548c:	d9f0      	bls.n	1015470 <_calloc_r+0x24>
 101548e:	2a24      	cmp	r2, #36	; 0x24
 1015490:	e9c0 3302 	strd	r3, r3, [r0, #8]
 1015494:	bf11      	iteee	ne
 1015496:	f100 0210 	addne.w	r2, r0, #16
 101549a:	6103      	streq	r3, [r0, #16]
 101549c:	f100 0218 	addeq.w	r2, r0, #24
 10154a0:	6143      	streq	r3, [r0, #20]
 10154a2:	e7e5      	b.n	1015470 <_calloc_r+0x24>
 10154a4:	2100      	movs	r1, #0
 10154a6:	f7f6 fe1b 	bl	100c0e0 <memset>
 10154aa:	4620      	mov	r0, r4
 10154ac:	bd10      	pop	{r4, pc}
 10154ae:	bf00      	nop

010154b0 <_close_r>:
 10154b0:	b538      	push	{r3, r4, r5, lr}
 10154b2:	f24a 4490 	movw	r4, #42128	; 0xa490
 10154b6:	f2c0 140a 	movt	r4, #266	; 0x10a
 10154ba:	4605      	mov	r5, r0
 10154bc:	4608      	mov	r0, r1
 10154be:	2300      	movs	r3, #0
 10154c0:	6023      	str	r3, [r4, #0]
 10154c2:	f000 ea60 	blx	1015984 <_close>
 10154c6:	1c43      	adds	r3, r0, #1
 10154c8:	d000      	beq.n	10154cc <_close_r+0x1c>
 10154ca:	bd38      	pop	{r3, r4, r5, pc}
 10154cc:	6823      	ldr	r3, [r4, #0]
 10154ce:	2b00      	cmp	r3, #0
 10154d0:	d0fb      	beq.n	10154ca <_close_r+0x1a>
 10154d2:	602b      	str	r3, [r5, #0]
 10154d4:	bd38      	pop	{r3, r4, r5, pc}
 10154d6:	bf00      	nop

010154d8 <__env_lock>:
 10154d8:	4770      	bx	lr
 10154da:	bf00      	nop

010154dc <__env_unlock>:
 10154dc:	4770      	bx	lr
 10154de:	bf00      	nop

010154e0 <_fclose_r>:
 10154e0:	b570      	push	{r4, r5, r6, lr}
 10154e2:	b139      	cbz	r1, 10154f4 <_fclose_r+0x14>
 10154e4:	4605      	mov	r5, r0
 10154e6:	460c      	mov	r4, r1
 10154e8:	b108      	cbz	r0, 10154ee <_fclose_r+0xe>
 10154ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 10154ec:	b383      	cbz	r3, 1015550 <_fclose_r+0x70>
 10154ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10154f2:	b913      	cbnz	r3, 10154fa <_fclose_r+0x1a>
 10154f4:	2600      	movs	r6, #0
 10154f6:	4630      	mov	r0, r6
 10154f8:	bd70      	pop	{r4, r5, r6, pc}
 10154fa:	4621      	mov	r1, r4
 10154fc:	4628      	mov	r0, r5
 10154fe:	f7fc f98d 	bl	101181c <__sflush_r>
 1015502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1015504:	4606      	mov	r6, r0
 1015506:	b133      	cbz	r3, 1015516 <_fclose_r+0x36>
 1015508:	69e1      	ldr	r1, [r4, #28]
 101550a:	4628      	mov	r0, r5
 101550c:	4798      	blx	r3
 101550e:	2800      	cmp	r0, #0
 1015510:	bfb8      	it	lt
 1015512:	f04f 36ff 	movlt.w	r6, #4294967295
 1015516:	89a3      	ldrh	r3, [r4, #12]
 1015518:	061b      	lsls	r3, r3, #24
 101551a:	d420      	bmi.n	101555e <_fclose_r+0x7e>
 101551c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 101551e:	b141      	cbz	r1, 1015532 <_fclose_r+0x52>
 1015520:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1015524:	4299      	cmp	r1, r3
 1015526:	d002      	beq.n	101552e <_fclose_r+0x4e>
 1015528:	4628      	mov	r0, r5
 101552a:	f7fc fba9 	bl	1011c80 <_free_r>
 101552e:	2300      	movs	r3, #0
 1015530:	6323      	str	r3, [r4, #48]	; 0x30
 1015532:	6c61      	ldr	r1, [r4, #68]	; 0x44
 1015534:	b121      	cbz	r1, 1015540 <_fclose_r+0x60>
 1015536:	4628      	mov	r0, r5
 1015538:	f7fc fba2 	bl	1011c80 <_free_r>
 101553c:	2300      	movs	r3, #0
 101553e:	6463      	str	r3, [r4, #68]	; 0x44
 1015540:	f7fc fb28 	bl	1011b94 <__sfp_lock_acquire>
 1015544:	2300      	movs	r3, #0
 1015546:	81a3      	strh	r3, [r4, #12]
 1015548:	f7fc fb26 	bl	1011b98 <__sfp_lock_release>
 101554c:	4630      	mov	r0, r6
 101554e:	bd70      	pop	{r4, r5, r6, pc}
 1015550:	f7fc fb1c 	bl	1011b8c <__sinit>
 1015554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1015558:	2b00      	cmp	r3, #0
 101555a:	d0cb      	beq.n	10154f4 <_fclose_r+0x14>
 101555c:	e7cd      	b.n	10154fa <_fclose_r+0x1a>
 101555e:	6921      	ldr	r1, [r4, #16]
 1015560:	4628      	mov	r0, r5
 1015562:	f7fc fb8d 	bl	1011c80 <_free_r>
 1015566:	e7d9      	b.n	101551c <_fclose_r+0x3c>

01015568 <fclose>:
 1015568:	f248 7358 	movw	r3, #34648	; 0x8758
 101556c:	f2c0 1305 	movt	r3, #261	; 0x105
 1015570:	4601      	mov	r1, r0
 1015572:	6818      	ldr	r0, [r3, #0]
 1015574:	f7ff bfb4 	b.w	10154e0 <_fclose_r>

01015578 <__fputwc>:
 1015578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 101557c:	b082      	sub	sp, #8
 101557e:	4680      	mov	r8, r0
 1015580:	4689      	mov	r9, r1
 1015582:	4614      	mov	r4, r2
 1015584:	f7f5 fce6 	bl	100af54 <__locale_mb_cur_max>
 1015588:	2801      	cmp	r0, #1
 101558a:	d103      	bne.n	1015594 <__fputwc+0x1c>
 101558c:	f109 33ff 	add.w	r3, r9, #4294967295
 1015590:	2bfe      	cmp	r3, #254	; 0xfe
 1015592:	d938      	bls.n	1015606 <__fputwc+0x8e>
 1015594:	466d      	mov	r5, sp
 1015596:	464a      	mov	r2, r9
 1015598:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 101559c:	4640      	mov	r0, r8
 101559e:	4629      	mov	r1, r5
 10155a0:	f7fa ffac 	bl	10104fc <_wcrtomb_r>
 10155a4:	1c42      	adds	r2, r0, #1
 10155a6:	4606      	mov	r6, r0
 10155a8:	d038      	beq.n	101561c <__fputwc+0xa4>
 10155aa:	b398      	cbz	r0, 1015614 <__fputwc+0x9c>
 10155ac:	f89d c000 	ldrb.w	ip, [sp]
 10155b0:	f1c5 0a01 	rsb	sl, r5, #1
 10155b4:	e00a      	b.n	10155cc <__fputwc+0x54>
 10155b6:	6823      	ldr	r3, [r4, #0]
 10155b8:	1c5a      	adds	r2, r3, #1
 10155ba:	6022      	str	r2, [r4, #0]
 10155bc:	f883 c000 	strb.w	ip, [r3]
 10155c0:	eb0a 0305 	add.w	r3, sl, r5
 10155c4:	429e      	cmp	r6, r3
 10155c6:	d925      	bls.n	1015614 <__fputwc+0x9c>
 10155c8:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 10155cc:	68a3      	ldr	r3, [r4, #8]
 10155ce:	f103 3eff 	add.w	lr, r3, #4294967295
 10155d2:	f8c4 e008 	str.w	lr, [r4, #8]
 10155d6:	f1be 0f00 	cmp.w	lr, #0
 10155da:	daec      	bge.n	10155b6 <__fputwc+0x3e>
 10155dc:	69a7      	ldr	r7, [r4, #24]
 10155de:	4661      	mov	r1, ip
 10155e0:	4622      	mov	r2, r4
 10155e2:	4640      	mov	r0, r8
 10155e4:	45be      	cmp	lr, r7
 10155e6:	bfb4      	ite	lt
 10155e8:	2300      	movlt	r3, #0
 10155ea:	2301      	movge	r3, #1
 10155ec:	f1bc 0f0a 	cmp.w	ip, #10
 10155f0:	bf08      	it	eq
 10155f2:	2300      	moveq	r3, #0
 10155f4:	2b00      	cmp	r3, #0
 10155f6:	d1de      	bne.n	10155b6 <__fputwc+0x3e>
 10155f8:	f000 f8a2 	bl	1015740 <__swbuf_r>
 10155fc:	1c43      	adds	r3, r0, #1
 10155fe:	d1df      	bne.n	10155c0 <__fputwc+0x48>
 1015600:	b002      	add	sp, #8
 1015602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1015606:	fa5f fc89 	uxtb.w	ip, r9
 101560a:	4606      	mov	r6, r0
 101560c:	466d      	mov	r5, sp
 101560e:	f88d c000 	strb.w	ip, [sp]
 1015612:	e7cd      	b.n	10155b0 <__fputwc+0x38>
 1015614:	4648      	mov	r0, r9
 1015616:	b002      	add	sp, #8
 1015618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 101561c:	89a3      	ldrh	r3, [r4, #12]
 101561e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1015622:	81a3      	strh	r3, [r4, #12]
 1015624:	e7ec      	b.n	1015600 <__fputwc+0x88>
 1015626:	bf00      	nop

01015628 <_fputwc_r>:
 1015628:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 101562c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 1015630:	d10b      	bne.n	101564a <_fputwc_r+0x22>
 1015632:	b410      	push	{r4}
 1015634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1015638:	6e54      	ldr	r4, [r2, #100]	; 0x64
 101563a:	8193      	strh	r3, [r2, #12]
 101563c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 1015640:	6654      	str	r4, [r2, #100]	; 0x64
 1015642:	f85d 4b04 	ldr.w	r4, [sp], #4
 1015646:	f7ff bf97 	b.w	1015578 <__fputwc>
 101564a:	f7ff bf95 	b.w	1015578 <__fputwc>
 101564e:	bf00      	nop

01015650 <fputwc>:
 1015650:	f248 7358 	movw	r3, #34648	; 0x8758
 1015654:	f2c0 1305 	movt	r3, #261	; 0x105
 1015658:	b570      	push	{r4, r5, r6, lr}
 101565a:	4606      	mov	r6, r0
 101565c:	681d      	ldr	r5, [r3, #0]
 101565e:	460c      	mov	r4, r1
 1015660:	b10d      	cbz	r5, 1015666 <fputwc+0x16>
 1015662:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1015664:	b18b      	cbz	r3, 101568a <fputwc+0x3a>
 1015666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101566a:	049a      	lsls	r2, r3, #18
 101566c:	d406      	bmi.n	101567c <fputwc+0x2c>
 101566e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 1015670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1015674:	81a3      	strh	r3, [r4, #12]
 1015676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 101567a:	6662      	str	r2, [r4, #100]	; 0x64
 101567c:	4622      	mov	r2, r4
 101567e:	4631      	mov	r1, r6
 1015680:	4628      	mov	r0, r5
 1015682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1015686:	f7ff bf77 	b.w	1015578 <__fputwc>
 101568a:	4628      	mov	r0, r5
 101568c:	f7fc fa7e 	bl	1011b8c <__sinit>
 1015690:	e7e9      	b.n	1015666 <fputwc+0x16>
 1015692:	bf00      	nop

01015694 <_fstat_r>:
 1015694:	b538      	push	{r3, r4, r5, lr}
 1015696:	460b      	mov	r3, r1
 1015698:	f24a 4490 	movw	r4, #42128	; 0xa490
 101569c:	f2c0 140a 	movt	r4, #266	; 0x10a
 10156a0:	4605      	mov	r5, r0
 10156a2:	4611      	mov	r1, r2
 10156a4:	4618      	mov	r0, r3
 10156a6:	2300      	movs	r3, #0
 10156a8:	6023      	str	r3, [r4, #0]
 10156aa:	f000 e94c 	blx	1015944 <_fstat>
 10156ae:	1c43      	adds	r3, r0, #1
 10156b0:	d000      	beq.n	10156b4 <_fstat_r+0x20>
 10156b2:	bd38      	pop	{r3, r4, r5, pc}
 10156b4:	6823      	ldr	r3, [r4, #0]
 10156b6:	2b00      	cmp	r3, #0
 10156b8:	d0fb      	beq.n	10156b2 <_fstat_r+0x1e>
 10156ba:	602b      	str	r3, [r5, #0]
 10156bc:	bd38      	pop	{r3, r4, r5, pc}
 10156be:	bf00      	nop

010156c0 <_isatty_r>:
 10156c0:	b538      	push	{r3, r4, r5, lr}
 10156c2:	f24a 4490 	movw	r4, #42128	; 0xa490
 10156c6:	f2c0 140a 	movt	r4, #266	; 0x10a
 10156ca:	4605      	mov	r5, r0
 10156cc:	4608      	mov	r0, r1
 10156ce:	2300      	movs	r3, #0
 10156d0:	6023      	str	r3, [r4, #0]
 10156d2:	f000 e94e 	blx	1015970 <_isatty>
 10156d6:	1c43      	adds	r3, r0, #1
 10156d8:	d000      	beq.n	10156dc <_isatty_r+0x1c>
 10156da:	bd38      	pop	{r3, r4, r5, pc}
 10156dc:	6823      	ldr	r3, [r4, #0]
 10156de:	2b00      	cmp	r3, #0
 10156e0:	d0fb      	beq.n	10156da <_isatty_r+0x1a>
 10156e2:	602b      	str	r3, [r5, #0]
 10156e4:	bd38      	pop	{r3, r4, r5, pc}
 10156e6:	bf00      	nop

010156e8 <_lseek_r>:
 10156e8:	b570      	push	{r4, r5, r6, lr}
 10156ea:	460d      	mov	r5, r1
 10156ec:	f24a 4490 	movw	r4, #42128	; 0xa490
 10156f0:	f2c0 140a 	movt	r4, #266	; 0x10a
 10156f4:	4611      	mov	r1, r2
 10156f6:	4606      	mov	r6, r0
 10156f8:	461a      	mov	r2, r3
 10156fa:	4628      	mov	r0, r5
 10156fc:	2300      	movs	r3, #0
 10156fe:	6023      	str	r3, [r4, #0]
 1015700:	f000 e8ac 	blx	101585c <_lseek>
 1015704:	1c43      	adds	r3, r0, #1
 1015706:	d000      	beq.n	101570a <_lseek_r+0x22>
 1015708:	bd70      	pop	{r4, r5, r6, pc}
 101570a:	6823      	ldr	r3, [r4, #0]
 101570c:	2b00      	cmp	r3, #0
 101570e:	d0fb      	beq.n	1015708 <_lseek_r+0x20>
 1015710:	6033      	str	r3, [r6, #0]
 1015712:	bd70      	pop	{r4, r5, r6, pc}

01015714 <_read_r>:
 1015714:	b570      	push	{r4, r5, r6, lr}
 1015716:	460d      	mov	r5, r1
 1015718:	f24a 4490 	movw	r4, #42128	; 0xa490
 101571c:	f2c0 140a 	movt	r4, #266	; 0x10a
 1015720:	4611      	mov	r1, r2
 1015722:	4606      	mov	r6, r0
 1015724:	461a      	mov	r2, r3
 1015726:	4628      	mov	r0, r5
 1015728:	2300      	movs	r3, #0
 101572a:	6023      	str	r3, [r4, #0]
 101572c:	f000 e908 	blx	1015940 <_read>
 1015730:	1c43      	adds	r3, r0, #1
 1015732:	d000      	beq.n	1015736 <_read_r+0x22>
 1015734:	bd70      	pop	{r4, r5, r6, pc}
 1015736:	6823      	ldr	r3, [r4, #0]
 1015738:	2b00      	cmp	r3, #0
 101573a:	d0fb      	beq.n	1015734 <_read_r+0x20>
 101573c:	6033      	str	r3, [r6, #0]
 101573e:	bd70      	pop	{r4, r5, r6, pc}

01015740 <__swbuf_r>:
 1015740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1015742:	460d      	mov	r5, r1
 1015744:	4614      	mov	r4, r2
 1015746:	4606      	mov	r6, r0
 1015748:	b110      	cbz	r0, 1015750 <__swbuf_r+0x10>
 101574a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 101574c:	2b00      	cmp	r3, #0
 101574e:	d03a      	beq.n	10157c6 <__swbuf_r+0x86>
 1015750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1015754:	69a3      	ldr	r3, [r4, #24]
 1015756:	b291      	uxth	r1, r2
 1015758:	0708      	lsls	r0, r1, #28
 101575a:	60a3      	str	r3, [r4, #8]
 101575c:	d51e      	bpl.n	101579c <__swbuf_r+0x5c>
 101575e:	6923      	ldr	r3, [r4, #16]
 1015760:	b1e3      	cbz	r3, 101579c <__swbuf_r+0x5c>
 1015762:	b2ed      	uxtb	r5, r5
 1015764:	0489      	lsls	r1, r1, #18
 1015766:	462f      	mov	r7, r5
 1015768:	d525      	bpl.n	10157b6 <__swbuf_r+0x76>
 101576a:	6822      	ldr	r2, [r4, #0]
 101576c:	6961      	ldr	r1, [r4, #20]
 101576e:	1ad3      	subs	r3, r2, r3
 1015770:	4299      	cmp	r1, r3
 1015772:	bfc8      	it	gt
 1015774:	3301      	addgt	r3, #1
 1015776:	dd32      	ble.n	10157de <__swbuf_r+0x9e>
 1015778:	68a1      	ldr	r1, [r4, #8]
 101577a:	1c50      	adds	r0, r2, #1
 101577c:	6020      	str	r0, [r4, #0]
 101577e:	3901      	subs	r1, #1
 1015780:	60a1      	str	r1, [r4, #8]
 1015782:	7015      	strb	r5, [r2, #0]
 1015784:	6962      	ldr	r2, [r4, #20]
 1015786:	429a      	cmp	r2, r3
 1015788:	d020      	beq.n	10157cc <__swbuf_r+0x8c>
 101578a:	7b23      	ldrb	r3, [r4, #12]
 101578c:	2d0a      	cmp	r5, #10
 101578e:	bf14      	ite	ne
 1015790:	2500      	movne	r5, #0
 1015792:	f003 0501 	andeq.w	r5, r3, #1
 1015796:	b9cd      	cbnz	r5, 10157cc <__swbuf_r+0x8c>
 1015798:	4638      	mov	r0, r7
 101579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101579c:	4621      	mov	r1, r4
 101579e:	4630      	mov	r0, r6
 10157a0:	f7fb f836 	bl	1010810 <__swsetup_r>
 10157a4:	b9c0      	cbnz	r0, 10157d8 <__swbuf_r+0x98>
 10157a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 10157aa:	b2ed      	uxtb	r5, r5
 10157ac:	6923      	ldr	r3, [r4, #16]
 10157ae:	462f      	mov	r7, r5
 10157b0:	b291      	uxth	r1, r2
 10157b2:	0489      	lsls	r1, r1, #18
 10157b4:	d4d9      	bmi.n	101576a <__swbuf_r+0x2a>
 10157b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 10157b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 10157bc:	81a2      	strh	r2, [r4, #12]
 10157be:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 10157c2:	6661      	str	r1, [r4, #100]	; 0x64
 10157c4:	e7d1      	b.n	101576a <__swbuf_r+0x2a>
 10157c6:	f7fc f9e1 	bl	1011b8c <__sinit>
 10157ca:	e7c1      	b.n	1015750 <__swbuf_r+0x10>
 10157cc:	4621      	mov	r1, r4
 10157ce:	4630      	mov	r0, r6
 10157d0:	f7fc f8ca 	bl	1011968 <_fflush_r>
 10157d4:	2800      	cmp	r0, #0
 10157d6:	d0df      	beq.n	1015798 <__swbuf_r+0x58>
 10157d8:	f04f 37ff 	mov.w	r7, #4294967295
 10157dc:	e7dc      	b.n	1015798 <__swbuf_r+0x58>
 10157de:	4621      	mov	r1, r4
 10157e0:	4630      	mov	r0, r6
 10157e2:	f7fc f8c1 	bl	1011968 <_fflush_r>
 10157e6:	2800      	cmp	r0, #0
 10157e8:	d1f6      	bne.n	10157d8 <__swbuf_r+0x98>
 10157ea:	6822      	ldr	r2, [r4, #0]
 10157ec:	2301      	movs	r3, #1
 10157ee:	e7c3      	b.n	1015778 <__swbuf_r+0x38>

010157f0 <__swbuf>:
 10157f0:	f248 7358 	movw	r3, #34648	; 0x8758
 10157f4:	f2c0 1305 	movt	r3, #261	; 0x105
 10157f8:	460a      	mov	r2, r1
 10157fa:	4601      	mov	r1, r0
 10157fc:	6818      	ldr	r0, [r3, #0]
 10157fe:	f7ff bf9f 	b.w	1015740 <__swbuf_r>
 1015802:	bf00      	nop

01015804 <_sbrk>:
  static u8 *heap = NULL;
  u8 *prev_heap;
  static u8 *HeapEndPtr = (u8 *)&_heap_end;
  caddr_t Status;

  if (heap == NULL) {
 1015804:	e300232c 	movw	r2, #812	; 0x32c
 1015808:	e3402106 	movt	r2, #262	; 0x106
 101580c:	e5923000 	ldr	r3, [r2]
 1015810:	e3530000 	cmp	r3, #0
    heap = (u8 *)&_heap_start;
 1015814:	030a14a0 	movweq	r1, #42144	; 0xa4a0
 1015818:	0340110a 	movteq	r1, #266	; 0x10a
 101581c:	01a03001 	moveq	r3, r1
 1015820:	05821000 	streq	r1, [r2]
  }
  prev_heap = heap;

	if (((heap + incr) <= HeapEndPtr) && (prev_heap != NULL)) {
 1015824:	e30a14a0 	movw	r1, #42144	; 0xa4a0
 1015828:	e0830000 	add	r0, r3, r0
 101582c:	e3401d0a 	movt	r1, #3338	; 0xd0a
 1015830:	e1500001 	cmp	r0, r1
  heap += incr;
	  Status = (caddr_t) ((void *)prev_heap);
	} else {
	  Status = (caddr_t) -1;
 1015834:	83e03000 	mvnhi	r3, #0
  heap += incr;
 1015838:	95820000 	strls	r0, [r2]
  }

  return Status;
}
 101583c:	e1a00003 	mov	r0, r3
 1015840:	e12fff1e 	bx	lr

01015844 <lseek>:
#endif
/*
 * lseek --  Since a serial port is non-seekable, we return an error.
 */
__attribute__((weak)) off_t lseek(s32 fd, off_t offset, s32 whence)
{
 1015844:	e92d4010 	push	{r4, lr}
  (void)fd;
  (void)offset;
  (void)whence;
  errno = ESPIPE;
 1015848:	eb000041 	bl	1015954 <__errno>
 101584c:	e3a0301d 	mov	r3, #29
 1015850:	e5803000 	str	r3, [r0]
  return ((off_t)-1);
}
 1015854:	e3e00000 	mvn	r0, #0
 1015858:	e8bd8010 	pop	{r4, pc}

0101585c <_lseek>:
 101585c:	e92d4010 	push	{r4, lr}
 1015860:	eb00003b 	bl	1015954 <__errno>
 1015864:	e3a0301d 	mov	r3, #29
 1015868:	e5803000 	str	r3, [r0]
 101586c:	e3e00000 	mvn	r0, #0
 1015870:	e8bd8010 	pop	{r4, pc}

01015874 <write>:
 *          open will only return an error.
 */
__attribute__((weak)) sint32
write (sint32 fd, char8* buf, sint32 nbytes)

{
 1015874:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
#ifdef STDOUT_BASEADDRESS
  s32 i;
  char8* LocalBuf = buf;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
 1015878:	e2526000 	subs	r6, r2, #0
 101587c:	da000015 	ble	10158d8 <write+0x64>
 1015880:	e1a04001 	mov	r4, r1
 1015884:	e3a03000 	mov	r3, #0
 1015888:	ea000003 	b	101589c <write+0x28>
	}
	if(LocalBuf != NULL) {
	    if (*LocalBuf == '\n') {
	      outbyte ('\r');
	    }
	    outbyte (*LocalBuf);
 101588c:	ebffcd96 	bl	1008eec <outbyte>
  for (i = 0; i < nbytes; i++) {
 1015890:	e1560005 	cmp	r6, r5
 1015894:	e1a03005 	mov	r3, r5
 1015898:	da00000e 	ble	10158d8 <write+0x64>
	if(LocalBuf != NULL) {
 101589c:	e3540000 	cmp	r4, #0
 10158a0:	e2835001 	add	r5, r3, #1
 10158a4:	0a00000b 	beq	10158d8 <write+0x64>
	if(LocalBuf != NULL) {
 10158a8:	e0947003 	adds	r7, r4, r3
 10158ac:	0a000009 	beq	10158d8 <write+0x64>
	    if (*LocalBuf == '\n') {
 10158b0:	e7d40003 	ldrb	r0, [r4, r3]
 10158b4:	e350000a 	cmp	r0, #10
 10158b8:	1afffff3 	bne	101588c <write+0x18>
	      outbyte ('\r');
 10158bc:	e3a0000d 	mov	r0, #13
 10158c0:	ebffcd89 	bl	1008eec <outbyte>
 10158c4:	e5d70000 	ldrb	r0, [r7]
	    outbyte (*LocalBuf);
 10158c8:	ebffcd87 	bl	1008eec <outbyte>
  for (i = 0; i < nbytes; i++) {
 10158cc:	e1560005 	cmp	r6, r5
 10158d0:	e1a03005 	mov	r3, r5
 10158d4:	cafffff0 	bgt	101589c <write+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 10158d8:	e1a00006 	mov	r0, r6
 10158dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010158e0 <_write>:
 10158e0:	eaffffe3 	b	1015874 <write>

010158e4 <read>:
  s32 i;
  s32 numbytes = 0;
  char8* LocalBuf = buf;

  (void)fd;
  if(LocalBuf != NULL) {
 10158e4:	e3510000 	cmp	r1, #0
 10158e8:	0a000012 	beq	1015938 <read+0x54>
	for (i = 0; i < nbytes; i++) {
 10158ec:	e3520000 	cmp	r2, #0
 10158f0:	da00000f 	ble	1015934 <read+0x50>
 10158f4:	e2422001 	sub	r2, r2, #1
{
 10158f8:	e92d4070 	push	{r4, r5, r6, lr}
 10158fc:	e2414001 	sub	r4, r1, #1
 1015900:	e0815002 	add	r5, r1, r2
 1015904:	e2616002 	rsb	r6, r1, #2
 1015908:	ea000001 	b	1015914 <read+0x30>
	for (i = 0; i < nbytes; i++) {
 101590c:	e1540005 	cmp	r4, r5
 1015910:	0a000005 	beq	101592c <read+0x48>
		numbytes++;
		*(LocalBuf + i) = inbyte();
 1015914:	eb000017 	bl	1015978 <inbyte>
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1015918:	e350000d 	cmp	r0, #13
 101591c:	1350000a 	cmpne	r0, #10
 1015920:	e0861004 	add	r1, r6, r4
		*(LocalBuf + i) = inbyte();
 1015924:	e5e40001 	strb	r0, [r4, #1]!
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1015928:	1afffff7 	bne	101590c <read+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 101592c:	e1a00001 	mov	r0, r1
 1015930:	e8bd8070 	pop	{r4, r5, r6, pc}
  s32 numbytes = 0;
 1015934:	e3a01000 	mov	r1, #0
}
 1015938:	e1a00001 	mov	r0, r1
 101593c:	e12fff1e 	bx	lr

01015940 <_read>:
 1015940:	eaffffe7 	b	10158e4 <read>

01015944 <_fstat>:
 * fstat -- Since we have no file system, we just return an error.
 */
__attribute__((weak)) s32 _fstat(s32 fd, struct stat *buf)
{
  (void)fd;
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 1015944:	e3a03a02 	mov	r3, #8192	; 0x2000

  return (0);
}
 1015948:	e3a00000 	mov	r0, #0
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 101594c:	e5813004 	str	r3, [r1, #4]
}
 1015950:	e12fff1e 	bx	lr

01015954 <__errno>:
#endif

__attribute__((weak)) sint32 *
__errno (void)
{
  return &_REENT->_errno;
 1015954:	e3083758 	movw	r3, #34648	; 0x8758
 1015958:	e3403105 	movt	r3, #261	; 0x105
}
 101595c:	e5930000 	ldr	r0, [r3]
 1015960:	e12fff1e 	bx	lr

01015964 <_exit>:
*/
__attribute__((weak)) void _exit (sint32 status)
{
  (void)status;
  while (1) {
	;
 1015964:	eafffffe 	b	1015964 <_exit>

01015968 <isatty>:
 */
__attribute__((weak)) sint32 isatty(sint32 fd)
{
  (void)fd;
  return (1);
}
 1015968:	e3a00001 	mov	r0, #1
 101596c:	e12fff1e 	bx	lr

01015970 <_isatty>:
 1015970:	e3a00001 	mov	r0, #1
 1015974:	e12fff1e 	bx	lr

01015978 <inbyte>:
#ifdef __cplusplus
}
#endif 

char inbyte(void) {
	 return XUartPs_RecvByte(STDIN_BASEADDRESS);
 1015978:	e3a00a01 	mov	r0, #4096	; 0x1000
 101597c:	e34e0000 	movt	r0, #57344	; 0xe000
 1015980:	eaffcf4e 	b	10096c0 <XUartPs_RecvByte>

01015984 <_close>:

__attribute__((weak)) s32 _close(s32 fd)
{
  (void)fd;
  return (0);
}
 1015984:	e3a00000 	mov	r0, #0
 1015988:	e12fff1e 	bx	lr

0101598c <main>:

//uint8_t src_buffer[16384] __attribute__((aligned(32)));
//uint8_t dest_buffer[16384] __attribute__((aligned(32)));

int main()
{
 101598c:	e92d4010 	push	{r4, lr}
	int res, i = 0;

	Xil_DCacheDisable();
 1015990:	ebffcc90 	bl	1008bd8 <Xil_DCacheDisable>

	hal_init();
 1015994:	ebffb715 	bl	10035f0 <hal_init>
	acq_init();
 1015998:	ebffabc1 	bl	10008a4 <acq_init>

	acq_hacks_init();
 101599c:	ebffaaf8 	bl	1000584 <acq_hacks_init>
	acq_hacks_run();
 10159a0:	ebffaaf8 	bl	1000588 <acq_hacks_run>

    cleanup_platform();
 10159a4:	ebffb99f 	bl	1004028 <cleanup_platform>
}
 10159a8:	e3a00000 	mov	r0, #0
 10159ac:	e8bd8010 	pop	{r4, pc}

Disassembly of section .init:

010159b0 <_init>:
 10159b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10159b2:	bf00      	nop
 10159b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10159b6:	bc08      	pop	{r3}
 10159b8:	469e      	mov	lr, r3
 10159ba:	4770      	bx	lr

Disassembly of section .fini:

010159bc <_fini>:
 10159bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10159be:	bf00      	nop
 10159c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10159c2:	bc08      	pop	{r3}
 10159c4:	469e      	mov	lr, r3
 10159c6:	4770      	bx	lr
