
../Release/ps_app.elf:     file format elf32-littlearm

SYMBOL TABLE:
01000000 l    d  .text	00000000 .text
010167c4 l    d  .init	00000000 .init
010167d0 l    d  .fini	00000000 .fini
010167e0 l    d  .rodata	00000000 .rodata
010597c8 l    d  .data	00000000 .data
0105a600 l    d  .eh_frame	00000000 .eh_frame
0105c000 l    d  .mmu_tbl	00000000 .mmu_tbl
01060000 l    d  .ARM.exidx	00000000 .ARM.exidx
01060008 l    d  .init_array	00000000 .init_array
0106000c l    d  .fini_array	00000000 .fini_array
01060010 l    d  .ARM.attributes	00000000 .ARM.attributes
01060020 l    d  .bss	00000000 .bss
0116a4d4 l    d  .heap	00000000 .heap
00000000 l    d  .stack	00000000 .stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 asm_vectors.o
010000a0 l       .text	00000000 Undefined
010000bc l       .text	00000000 SVCHandler
01000100 l       .text	00000000 PrefetchAbortHandler
010000e0 l       .text	00000000 DataAbortHandler
01000020 l       .text	00000000 IRQHandler
01000060 l       .text	00000000 FIQHandler
0100007c l       .text	00000000 FIQLoop
00000000 l    df *ABS*	00000000 boot.o
f8f02000 l       *ABS*	00000000 PSS_L2CC_BASE_ADDR
f8000000 l       *ABS*	00000000 PSS_SLCR_BASE_ADDR
0fffff00 l       *ABS*	00000000 RESERVED
fe00000f l       *ABS*	00000000 LRemap
f8f0277c l       *ABS*	00000000 L2CCWay
f8f02730 l       *ABS*	00000000 L2CCSync
f8f02100 l       *ABS*	00000000 L2CCCrtl
f8f02104 l       *ABS*	00000000 L2CCAuxCrtl
f8f02108 l       *ABS*	00000000 L2CCTAGLatReg
f8f0210c l       *ABS*	00000000 L2CCDataLatReg
f8f02220 l       *ABS*	00000000 L2CCIntClear
f8f0221c l       *ABS*	00000000 L2CCIntRaw
f8000004 l       *ABS*	00000000 SLCRlockReg
f8000008 l       *ABS*	00000000 SLCRUnlockReg
f8000a1c l       *ABS*	00000000 SLCRL2cRamReg
f8000244 l       *ABS*	00000000 SLCRCPURSTReg
f800d010 l       *ABS*	00000000 EFUSEStaus
00001005 l       *ABS*	00000000 CRValMmuCac
00002000 l       *ABS*	00000000 CRValHiVectorAddr
72360000 l       *ABS*	00000000 L2CCAuxControl
00000001 l       *ABS*	00000000 L2CCControl
00000111 l       *ABS*	00000000 L2CCTAGLatency
00000121 l       *ABS*	00000000 L2CCDataLatency
0000767b l       *ABS*	00000000 SLCRlockKey
0000df0d l       *ABS*	00000000 SLCRUnlockKey
00020202 l       *ABS*	00000000 SLCRL2cRamConfig
40000000 l       *ABS*	00000000 FPEXC_EN
01000144 l       .text	00000000 CheckEFUSE
0100013c l       .text	00000000 EndlessLoop0
0100017c l       .text	00000000 OKToRun
010003c8 l       .text	00000000 invalidate_dcache
01000324 l       .text	00000000 Sync
01000444 l       .text	00000000 finished
010003dc l       .text	00000000 loop1
01000438 l       .text	00000000 skip
01000418 l       .text	00000000 loop2
0100041c l       .text	00000000 loop3
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
0105a600 l     O .eh_frame	00000000 
010004dc l     F .text	00000000 deregister_tm_clones
01000500 l     F .text	00000000 register_tm_clones
0100052c l     F .text	00000000 __do_global_dtors_aux
01060020 l       .bss	00000001 completed.10177
0106000c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0100055c l     F .text	00000000 frame_dummy
01060024 l       .bss	00000018 object.10182
01060008 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 acq_hacks.c
00000000 l    df *ABS*	00000000 acquire.c
00000000 l    df *ABS*	00000000 clkwiz_interface.c
00000000 l    df *ABS*	00000000 demo_norway.c
00000000 l    df *ABS*	00000000 fabric_config.c
00000000 l    df *ABS*	00000000 hal.c
010036fc l     F .text	0000012c d_printf.constprop.5
01003828 l     F .text	0000000c d_printf.constprop.6
01003834 l     F .text	0000012c d_printf.constprop.7
01003960 l     F .text	00000038 d_read_timing.part.3
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mipi_csi_hacks.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 trigger.c
00000000 l    df *ABS*	00000000 xaxidma.c
00000000 l    df *ABS*	00000000 xaxidma_sinit.c
00000000 l    df *ABS*	00000000 xaxidma_bdring.c
00000000 l    df *ABS*	00000000 xaxidma_g.c
00000000 l    df *ABS*	00000000 xclk_wiz.c
010066c8 l     F .text	00000028 StubErrCallBack
00000000 l    df *ABS*	00000000 xclk_wiz_sinit.c
00000000 l    df *ABS*	00000000 xgpiops.c
00000000 l    df *ABS*	00000000 xgpiops_sinit.c
00000000 l    df *ABS*	00000000 xgpiops_intr.c
00000000 l    df *ABS*	00000000 xgpiops_g.c
00000000 l    df *ABS*	00000000 xscugic_intr.c
00000000 l    df *ABS*	00000000 xscugic.c
01008374 l     F .text	00000050 StubHandler
01060040 l     O .bss	00000004 CpuId
00000000 l    df *ABS*	00000000 xscugic_sinit.c
00000000 l    df *ABS*	00000000 xscugic_selftest.c
00000000 l    df *ABS*	00000000 xscutimer.c
00000000 l    df *ABS*	00000000 xscutimer_selftest.c
00000000 l    df *ABS*	00000000 xscutimer_sinit.c
00000000 l    df *ABS*	00000000 xscutimer_g.c
00000000 l    df *ABS*	00000000 xil_assert.c
01060044 l     O .bss	00000004 Xil_AssertCallbackRoutine
00000000 l    df *ABS*	00000000 print.c
00000000 l    df *ABS*	00000000 xil_cache.c
01009ad4 l     F .text	00000058 Xil_L2CacheEnable.part.0
00000000 l    df *ABS*	00000000 outbyte.c
00000000 l    df *ABS*	00000000 xplatform_info.c
00000000 l    df *ABS*	00000000 xil_printf.c
01009d04 l     F .text	0000009c getnum
01009da0 l     F .text	00000034 padding.part.0
01009dd4 l     F .text	00000164 outnum
00000000 l    df *ABS*	00000000 xil_exception.c
0100a3c4 l     F .text	00000004 Xil_ExceptionNullHandler
00000000 l    df *ABS*	00000000 xuartps_hw.c
00000000 l    df *ABS*	00000000 xclk_wiz_g.c
00000000 l    df *ABS*	00000000 xscugic_g.c
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 xil-crt0.S
00000000 l    df *ABS*	00000000 translation_table.o
00000000 l       *ABS*	00000000 SECT
00100000 l       *ABS*	00000000 DDR_START
0fffffff l       *ABS*	00000000 DDR_END
0ff00000 l       *ABS*	00000000 DDR_SIZE
000000ff l       *ABS*	00000000 DDR_REG
00000300 l       *ABS*	00000000 UNDEF_REG
00000000 l    df *ABS*	00000000 cpu_init.o
00000000 l    df *ABS*	00000000 xtime_l.c
00000000 l    df *ABS*	00000000 _udivsi3.o
0100a6a8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _divsi3.o
0100a926 l       .text	00000000 .divsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
01059c38 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0100b3d0 l     F .text	0000006c currentlocale
010567fc l     O .rodata	0000001c categories
01060048 l     O .bss	000000e7 global_locale_string
01060130 l     O .bss	000000e0 new_categories.6704
01060210 l     O .bss	000000e0 saved_categories.6705
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
01056984 l     O .rodata	00000048 JIS_state_table
010569cc l     O .rodata	00000048 JIS_action_table
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncasecmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0100d95c l     F .text	00000120 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
01056a14 l     O .rodata	00000010 blanks.8644
01056a24 l     O .rodata	00000010 zeroes.8645
00000000 l    df *ABS*	00000000 vfprintf.c
01011204 l     F .text	0000006a __sbprintf
01056a34 l     O .rodata	00000010 blanks.8659
01056a44 l     O .rodata	00000010 zeroes.8660
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 dtoa.c
010117c8 l     F .text	00000148 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010127c4 l     F .text	00000004 __fp_lock
010127d4 l     F .text	000000e4 __sinit.part.0
010128b8 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
01056b58 l     O .rodata	0000000c p05.7430
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
01056c80 l     O .rodata	00000010 blanks.8623
01056c90 l     O .rodata	00000010 zeroes.8624
00000000 l    df *ABS*	00000000 vfprintf.c
01015038 l     F .text	00000074 __sprint_r.part.0
01016058 l     F .text	0000006a __sbprintf
01056ca0 l     O .rodata	00000010 blanks.8637
01056cb0 l     O .rodata	00000010 zeroes.8638
00000000 l    df *ABS*	00000000 wcsnrtombs.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
01060328 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 envlock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 _sbrk.c
0106032c l     O .bss	00000004 heap.5714
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 write.c
01016674 l     F .text	0000006c write.localalias.0
00000000 l    df *ABS*	00000000 read.c
010166e4 l     F .text	0000005c read.localalias.0
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 inbyte.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 crtstuff.c
0105a600 l     O .eh_frame	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 g:/xilinx/vitis/2019.2/gnu/aarch32/nt/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/8.2.0/thumb/v7-a+fp/hard/crtn.o
01013bb0 g     F .text	00000028 _mprec_log10
00010400 g       .stack	00000000 _supervisor_stack_end
01013c20 g     F .text	0000005a __any_on
010164c0 g     F .text	00000026 _isatty_r
010063f8 g     F .text	00000218 XAxiDma_BdRingCheck
01056c30 g     O .rodata	00000028 __mprec_tinytens
0100991c g     F .text	00000048 Xil_L1ICacheInvalidateRange
010598d0 g     O .data	00000058 XClk_Wiz_ConfigTable
0100d5dc g     F .text	000000c2 strcpy
01013ff0 g     F .text	0000001a cleanup_glue
01005e78 g     F .text	000000d8 XAxiDma_BdRingUnAlloc
0100cfd4 g     F .text	00000068 _puts_r
010164e8 g     F .text	0000002c _lseek_r
01000000 g       .text	00000000 _vector_table
01009964 g     F .text	00000074 Xil_L2CacheDisable
0105a604 g       .eh_frame	00000000 __eh_framehdr_start
0105a600 g       .data	00000000 ___CTORS_LIST___
01004b38 g     F .text	000001ac trig_dump_state
010095b0 g     F .text	00000058 Xil_ICacheInvalidateRange
010097c8 g     F .text	00000018 Xil_L1DCacheDisable
00000400 g       *ABS*	00000000 _ABORT_STACK_SIZE
01009358 g     F .text	00000028 print
0100aef0 g     F .text	0000005a .hidden __floatdidf
0100cfa8 g     F .text	0000002a printf
010112fc g     F .text	00000054 _wcrtomb_r
01014180 g     F .text	00000020 __sseek
0101298c g     F .text	00000008 __sinit
010027f4 g     F .text	00000068 acq_get_ll_pointer
01006344 g     F .text	000000b4 XAxiDma_BdRingFree
01016540 g     F .text	000000b0 __swbuf_r
010066f0 g     F .text	000000c8 XClk_Wiz_CfgInitialize
0100a3f8 g     F .text	00000030 Xil_PrefetchAbortHandler
01161d60 g     O .bss	00000004 mipi_dma_config
01006f10 g     F .text	000000e4 XGpioPs_ReadPin
0100bb10 g     F .text	00000244 _setlocale_r
010128bc g     F .text	0000002e __sfmoreglue
01009b98 g     F .text	00000014 Xil_L2CacheInvalidateLine
0100cf84 g     F .text	00000002 __malloc_unlock
01006d1c g     F .text	000000b8 XGpioPs_GetOutputEnable
01004ce4 g     F .text	00000094 trig_init
01009100 g     F .text	00000088 XScuTimer_SetPrescaler
010092e8 g     F .text	0000005c Xil_Assert
01008e08 g     F .text	00000050 XScuGic_SetCpuID
01008c94 g     F .text	00000174 XScuGic_CfgInitialize
010117b4 g     F .text	0000000e __set_ctype
01004820 g     F .text	00000004 enable_caches
01000588 g     F .text	00000004 acq_hacks_init
010132b0 g     F .text	000000ce memmove
01012974 g     F .text	00000016 _cleanup
00010c00 g       .stack	00000000 __supervisor_stack
0100d0f8 g     F .text	00000090 snprintf
0100bd7c g     F .text	00000020 __locale_ctype_ptr
010011ec g     F .text	000003e4 acq_prepare_triggered
01013380 g     F .text	0000004c _Balloc
01005498 g     F .text	00000028 XAxiDma_SelectKeyHole
01060008 g       .ARM.exidx	00000000 __exidx_end
010070f4 g     F .text	00000124 XGpioPs_SetDirectionPin
0100a4a8 g     F .text	00000018 XUartPs_SendByte
01002ce0 g     F .text	000000d4 clkwiz_init
01008780 g     F .text	0000012c XScuGic_GetPriorityTriggerType
00011400 g       .stack	00000000 _undef_stack_end
01016754  w    F .text	00000010 __errno
0100a448 g     F .text	00000004 Xil_ExceptionInit
010130cc g     F .text	00000004 __localeconv_l
010039b0 g     F .text	000001a8 bogo_calibrate
010114c8 g     F .text	00000054 __sjis_wctomb
01060010 g       .ARM.attributes	00000000 __sbss_start
01016494 g     F .text	0000002a _fstat_r
0116a4d0 g     O .bss	00000004 errno
0101413c g     F .text	00000004 __seofread
0100a594 g     F .text	00000014 PrefetchAbortInterrupt
0100a4c0 g     F .text	0000001c XUartPs_RecvByte
0100af58 g     F .text	00000160 .hidden __aeabi_fadd
0100af54 g     F .text	00000164 .hidden __subsf3
0105a600 g       .data	00000000 __fixup_start
01009cfc g     F .text	00000008 XGetPlatform_Info
010097e0 g     F .text	0000005c Xil_DCacheFlush
0100012c g       .text	00000000 _boot
01009a84 g     F .text	00000020 Xil_DCacheInvalidate
01008648 g     F .text	00000138 XScuGic_SetPriorityTriggerType
010079dc g     F .text	000000b8 XGpioPs_IntrGetStatus
0101151c g     F .text	00000070 __eucjp_wctomb
010009c0 g     F .text	000001c4 _acq_irq_fifo_gen_rst
0105988c g     O .data	00000008 XScuTimer_ConfigTable
0105a600 g       .data	00000000 __fixup_end
01161d64 g     O .bss	00000750 mipi_dma
010056f4 g     F .text	00000184 XAxiDma_UpdateBdRingCDesc
0100c900 g     F .text	000005e0 memcpy
010069b0 g     F .text	000000b4 XGpioPs_Read
0105a600 g     O .data	00000000 .hidden __TMC_END__
010127c8 g     F .text	0000000c _cleanup_r
0100daf8 g     F .text	00001b4c _svfprintf_r
0100ae78 g     F .text	00000022 .hidden __floatsidf
0100a428 g     F .text	00000020 Xil_UndefinedExceptionHandler
0105c000 g       .mmu_tbl	00000000 __mmu_tbl_start
01060010 g       .ARM.attributes	00000000 __sdata_start
0105a600 g       .data	00000000 __DTOR_END__
01002754 g     F .text	000000a0 acq_debug_dump_waveraw
0100b168 g     F .text	00000000 .hidden __aeabi_uldivmod
01009aa4 g     F .text	00000030 Xil_ICacheInvalidate
0100d03c g     F .text	00000010 puts
0100482c g     F .text	00000004 init_platform
00011000 g       .stack	00000000 __abort_stack
01060010 g       .fini_array	00000000 __fini_array_end
010597c4 g       .rodata	00000000 __rodata_end
01013b50 g     F .text	00000060 __ratio
01009bac g     F .text	00000068 Xil_L2CacheInvalidateRange
010030a4 g     F .text	00000278 clkwiz_dump_state
0100beb8 g     F .text	00000010 malloc
0100cf88 g     F .text	00000020 _printf_r
0100a6a8 g     F .text	0000025c .hidden __udivsi3
01016768  w    F .text	00000008 isatty
01016744  w    F .text	00000010 _fstat
0105a600 g       .data	00000000 __data1_start
0100b0c0 g     F .text	0000001c .hidden __aeabi_i2f
01056b68 g     O .rodata	000000c8 __mprec_tens
010597c4 g       .data	00000000 __sbss2_end
01004834 g     F .text	00000030 trig_zero_levels
010112dc g     F .text	0000001e vsnprintf
0116a4c4 g     O .bss	00000004 UndefinedExceptionAddr
01004548 g     F .text	00000010 d_dump_timing_ex
010602f4 g     O .bss	00000004 __malloc_top_pad
01003bf0 g     F .text	000001d8 d_printf
0106003c g     O .bss	00000004 test_sizeptr
010597c8 g     O .data	00000000 .hidden __dso_handle
0100ae58 g     F .text	0000001e .hidden __aeabi_ui2d
00010400 g       .stack	00000000 __irq_stack
010130d0 g     F .text	0000001e _localeconv_r
010135a4 g     F .text	00000012 __i2b
01012c70 g     F .text	0000032c __sfvwrite_r
010094a0 g     F .text	0000004c Xil_DCacheFlushLine
01004828 g     F .text	00000004 init_uart
0100b218 g     F .text	00000116 .hidden __udivmoddi4
0100abd4 g     F .text	00000000 .hidden __aeabi_drsub
0100d04c g     F .text	00000026 _sbrk_r
010082d4 g     F .text	00000028 StubHandler
0100a620 g       .text	00000000 __cpu_init
01059928 g     O .data	00000304 XScuGic_ConfigTable
01004314 g     F .text	00000028 d_read_global_timer
01016514 g     F .text	0000002c _read_r
01005dbc g     F .text	0000001c XAxiDma_BdRingGetCoalesce
010162e0 g     F .text	00000088 _fclose_r
01009b2c g     F .text	00000018 Xil_L2CacheEnable
0101279c g     F .text	00000028 fflush
01060320 g     O .bss	00000004 __malloc_max_sbrked_mem
010054c0 g     F .text	00000028 XAxiDma_SelectCyclicMode
01008e58 g     F .text	00000010 XScuGic_GetCpuID
0100ae9c g     F .text	00000042 .hidden __extendsfdf2
0100abe0 g     F .text	00000276 .hidden __adddf3
01004698 g     F .text	00000090 csi_hack_start_frame
0100433c g     F .text	00000070 d_start_timing
00000800 g       *ABS*	00000000 _SUPERVISOR_STACK_SIZE
0d16a4e0 g       .heap	00000000 _heap_end
010139ec g     F .text	000000ae __b2d
01060000 g       .ARM.exidx	00000000 __exidx_start
01016644  w    F .text	00000018 lseek
01016770  w    F .text	00000008 _isatty
0100a544 g     F .text	00000014 IRQInterrupt
01005114 g     F .text	000000b0 XAxiDma_Pause
010567f8 g     O .rodata	00000004 _global_impure_ptr
01013c7c g     F .text	00000372 _realloc_r
0100d7dc g     F .text	0000005a strncasecmp
0100b380 g     F .text	00000050 __libc_init_array
0116a4d4 g       .bss	00000000 __bss_end
01004ac4 g     F .text	00000074 trig_configure_holdoff
0100daa4 g     F .text	0000001e strtol_l
010161e8 g     F .text	00000036 wcsnrtombs
010597c4 g       .data	00000000 __rodata1_start
01006a64 g     F .text	000000a8 XGpioPs_Write
01016428 g     F .text	00000026 _fputwc_r
01056c58 g     O .rodata	00000028 __mprec_bigtens
010619fa g       .ARM.attributes	00000000 __ARM.attributes_end
01013470 g     F .text	00000098 __s2b
0100a56c g     F .text	00000014 SWInterrupt
0100ae58 g     F .text	0000001e .hidden __floatunsidf
01016604  w    F .text	00000040 _sbrk
01013858 g     F .text	0000003a __mcmp
01060010 g       .ARM.attributes	00000000 __tbss_start
01000fb0 g     F .text	000000b8 acq_get_next_alloc
010597fc g     O .data	00000088 XAxiDma_ConfigTable
010129a4 g     F .text	00000016 __fp_lock_all
01008e68 g     F .text	0000001c XScuGic_LookupConfig
010167c4 g     F .init	00000000 _init
01003bbc g     F .text	00000034 gpio_led_write
01001784 g     F .text	00000064 acq_force_stop
01009c14 g     F .text	00000044 Xil_L2CacheFlush
0100dac4 g     F .text	00000030 strtol
010094ec g     F .text	00000054 Xil_DCacheFlushRange
010017e8 g     F .text	00000640 acq_debug_dump
0100b1d8 g     F .text	00000040 .hidden __aeabi_d2ulz
0100af54 g     F .text	00000164 .hidden __aeabi_fsub
0100b350 g     F .text	00000030 __libc_fini_array
0101158c g     F .text	00000082 __jis_wctomb
01007d08 g     F .text	000000c8 XGpioPs_SetIntrType
01008bb8 g     F .text	000000dc XScuGic_Stop
010089f4 g     F .text	00000074 XScuGic_InterruptUnmapFromCpu
0101400c g     F .text	00000088 _reclaim_reent
00011400 g       .stack	00000000 __fiq_stack
01013508 g     F .text	0000003e __hi0bits
0100a44c g     F .text	00000018 Xil_ExceptionRegisterHandler
010567e0 g     O .rodata	00000018 fabcfg_dummy_tests
01059894 g     O .data	00000004 Xil_AssertWait
0116a4e0 g       .heap	00000000 _heap_start
01007300 g     F .text	00000124 XGpioPs_SetOutputEnablePin
00000400 g       *ABS*	00000000 _IRQ_STACK_SIZE
0100b0ec g     F .text	0000007c .hidden __floatdisf
01060010 g       .ARM.attributes	00000000 __sbss_end
010096dc g     F .text	00000018 Xil_L1DCacheInvalidateLine
0100775c g     F .text	000000dc XGpioPs_IntrDisablePin
0100983c g     F .text	00000018 Xil_L1DCacheFlushLine
00000400 g       *ABS*	00000000 _FIQ_STACK_SIZE
01016674  w    F .text	0000006c write
0100012c g       .text	00000000 _prestart
01007b7c g     F .text	000000ac XGpioPs_IntrClear
01001068 g     F .text	00000138 acq_append_next_alloc
0105a5fc g     O .data	00000004 environ
01005878 g     F .text	00000218 XAxiDma_BdRingCreate
0100abe0 g     F .text	00000276 .hidden __aeabi_dadd
01009354 g     F .text	00000004 XNullHandler
0100d1cc g     F .text	00000040 strcat
01009f38 g     F .text	0000048c xil_printf
0100b198 g     F .text	00000040 .hidden __aeabi_f2ulz
010136f8 g     F .text	000000a2 __pow5mult
0100aee0 g     F .text	0000006a .hidden __aeabi_ul2d
00011800 g       .stack	00000000 __undef_stack
01000b84 g     F .text	0000007c _acq_irq_error_dma
010067b8 g     F .text	00000060 XClk_Wiz_GetInterruptSettings
0100a920 g     F .text	00000000 .hidden __aeabi_idiv
010042d4 g     F .text	00000020 d_iskeypress
01009078 g     F .text	00000088 XScuTimer_Stop
010167e0 g     O .rodata	00040000 norway_512x512_grey
01056818 g     O .rodata	0000016c __C_locale
01008044 g     F .text	0000010c XGpioPs_GetIntrTypePin
01009210 g     F .text	000000bc XScuTimer_SelfTest
010043ac g     F .text	00000080 d_stop_timing
0116a4c8 g     O .bss	00000004 PrefetchAbortAddr
0100547c g     F .text	0000001c XAxiDma_Busy
01008498 g     F .text	000000cc XScuGic_Disconnect
0105a600 g       .data	00000000 __CTOR_LIST__
0105c000 g       .mmu_tbl	00000000 MMUTable
0100d074 g     F .text	00000084 _snprintf_r
010597c4 g       .data	00000000 __sbss2_start
0100babc g     F .text	00000054 __get_locale_env
01009904 g     F .text	00000018 Xil_L1ICacheInvalidateLine
01012994 g     F .text	00000002 __sfp_lock_acquire
01013210 g     F .text	00000000 memchr
01012a80 g     F .text	000001f0 _free_r
0100bd54 g     F .text	00000020 __locale_mb_cur_max
010113a8 g     F .text	00000016 _wcsrtombs_r
010098b4 g     F .text	0000001c Xil_L1ICacheEnable
0100058c g     F .text	00000434 acq_hacks_run
01000cd8 g     F .text	00000018 _acq_wait_for_ndone
010116d8 g     F .text	000000dc __call_exitprocs
01160340 g     O .bss	00000fa0 test_sizes
0100abdc g     F .text	0000027a .hidden __aeabi_dsub
0105a1cc g     O .data	00000020 __default_locale
0105a5f4 g     O .data	00000004 __malloc_sbrk_base
0100a5bc g       .text	00000064 _start
010093b8 g     F .text	000000e8 Xil_DCacheInvalidateRange
0100aee0 g     F .text	0000006a .hidden __floatundidf
0101665c  w    F .text	00000018 _lseek
010098d0 g     F .text	0000001c Xil_L1ICacheDisable
010167e0 g       .rodata	00000000 __rodata_start
010597e4 g     O .data	00000018 acq_substate_to_str
0101379c g     F .text	000000ba __lshift
010166e4  w    F .text	0000005c read
01007424 g     F .text	000000e8 XGpioPs_GetOutputEnablePin
0100b0c0 g     F .text	0000001c .hidden __floatsisf
010141a8 g     F .text	000000f8 __ssprint_r
01060010 g       *ABS*	00000000 _SDA_BASE_
01060340 g     O .bss	00100000 buffer
0100c690 g     F .text	00000082 __sjis_mbtowc
0100d6a0 g     F .text	00000056 strlcpy
0100d838 g     F .text	000000a2 strncmp
01009578 g     F .text	00000038 Xil_ICacheInvalidateLine
010113c0 g     F .text	00000022 wcsrtombs
0105a600 g       .data	00000000 __data_end
01007dd0 g     F .text	000000d4 XGpioPs_GetIntrType
01006b0c g     F .text	000000ac XGpioPs_SetDirection
010135b8 g     F .text	0000013e __multiply
010044c8 g     F .text	00000080 d_dump_timing
01006dd4 g     F .text	0000013c XGpioPs_GetBankPin
0116a4e0 g       .heap	00000000 HeapBase
0100d8dc g     F .text	0000007e strncpy
010602f8 g     O .bss	00000028 __malloc_current_mallinfo
01013a9c g     F .text	000000b2 __d2b
0100d188 g     F .text	00000044 strcasecmp
01008a68 g     F .text	000000d4 XScuGic_Disable
01004450 g     F .text	00000078 d_read_timing_us
01000d30 g     F .text	000000b8 acq_write_training
010162b0 g     F .text	00000026 _close_r
0100a558 g     F .text	00000014 UndefinedException
0116a4cc g     O .bss	00000004 DataAbortAddr
0100ae78 g     F .text	00000022 .hidden __aeabi_i2d
01006818 g     F .text	0000001c XClk_Wiz_LookupConfig
01008e84 g     F .text	000000b4 XScuGic_SelfTest
010099f4 g     F .text	00000024 Xil_ICacheDisable
010099d8 g     F .text	0000001c Xil_DCacheDisable
00010000 g       .stack	00000000 _irq_stack_end
0100b0dc g     F .text	0000008c .hidden __floatundisf
01011610 g     F .text	000000c6 __swsetup_r
0100abd0  w    F .text	00000002 .hidden __aeabi_ldiv0
011612e0 g     O .bss	00000880 g_acq_state
010128ec g     F .text	00000086 __sfp
01013bd8 g     F .text	00000046 __copybits
0105a1ec g     O .data	00000408 __malloc_av_
0100b0b8 g     F .text	00000024 .hidden __aeabi_ui2f
010129a0 g     F .text	00000002 __sinit_lock_release
01011270 g     F .text	0000006a _vsnprintf_r
0105a604 g       .eh_frame	00000000 __eh_framehdr_end
01014118 g     F .text	00000022 __sread
01009cec g     F .text	00000010 outbyte
01002db4 g     F .text	000002f0 clkwiz_change_mipi_freq
0100cf80 g     F .text	00000002 __malloc_lock
0106000c g       .fini_array	00000000 __fini_array_start
01012768 g     F .text	00000032 _fflush_r
0100c488 g     F .text	00000208 __utf8_mbtowc
0101624c g     F .text	00000062 _calloc_r
010096bc g     F .text	00000020 Xil_L1DCacheEnable
011624c0 g     O .bss	00008000 src_buffer
01005f50 g     F .text	000002a0 XAxiDma_BdRingToHw
01005a90 g     F .text	00000138 XAxiDma_BdRingClone
01006610 g     F .text	000000b8 XAxiDma_BdRingDumpRegs
01002b34 g     F .text	000001ac acq_copy_slow_mipi
01060020 g       .bss	00000000 __bss_start
00010000 g       *ABS*	00000000 _STACK_SIZE
01060010 g       .ARM.attributes	00000000 __tdata_start
01060010 g       .ARM.attributes	00000000 __tdata_end
0100cee0 g     F .text	000000a0 memset
0101678c g     F .text	00000038 main
010054e8 g     F .text	000001ac XAxiDma_SimpleTransfer
010042c8 g     F .text	0000000c d_waitkey
01060324 g     O .bss	00000004 __malloc_max_total_mem
0c000000 g       *ABS*	00000000 _HEAP_SIZE
0100b0ec g     F .text	0000007c .hidden __aeabi_l2f
010165f0 g     F .text	00000012 __swbuf
0100c714 g     F .text	000000b6 __eucjp_mbtowc
0100a6a8 g     F .text	00000000 .hidden __aeabi_uidiv
01008f38 g     F .text	000000b0 XScuTimer_CfgInitialize
010141a0 g     F .text	00000008 __sclose
01008fe8 g     F .text	00000090 XScuTimer_Start
01016368 g     F .text	00000010 fclose
01001768 g     F .text	0000001c acq_is_done
0100da7c g     F .text	00000028 _strtol_r
01013034 g     F .text	00000088 _findenv_r
0106000c g       .init_array	00000000 __init_array_end
01004824 g     F .text	00000004 disable_caches
01011910 g     F .text	00000d0c _dtoa_r
0100bed8 g     F .text	00000564 _malloc_r
01009608 g     F .text	000000b4 Xil_L1DCacheInvalidate
0101140c g     F .text	00000018 __ascii_wctomb
0100aef0 g     F .text	0000005a .hidden __aeabi_l2d
01011424 g     F .text	000000a4 __utf8_wctomb
010075d4 g     F .text	000000dc XGpioPs_IntrEnablePin
01006ff4 g     F .text	00000100 XGpioPs_WritePin
010076b0 g     F .text	000000ac XGpioPs_IntrDisable
010162dc g     F .text	00000002 __env_unlock
01012f9c g     F .text	00000048 _fwalk
00000000 g       .stack	00000000 _stack_end
0116a4c0 g     O .bss	00000004 Xil_AssertStatus
01000cf0 g     F .text	00000040 _acq_core_dma_start
0100c43c g     F .text	00000026 _mbtowc_r
0100b0dc g     F .text	0000008c .hidden __aeabi_ul2f
0100b198 g     F .text	00000040 .hidden __fixunssfdi
01005cf4 g     F .text	00000054 XAxiDma_BdRingStart
0105a600 g       .data	00000000 ___DTORS_END___
0100a920 g     F .text	00000294 .hidden __divsi3
01009854 g     F .text	00000048 Xil_L1DCacheFlushRange
0100a65c g     F .text	00000024 XTime_SetTime
01060010 g       .ARM.attributes	00000000 __sdata_end
010129d4 g     F .text	000000aa _malloc_trim_r
010160c4 g     F .text	000000f4 _wcsnrtombs_l
010597c4 g       .data	00000000 __sdata2_start
0105a600 g       .data	00000000 __CTOR_END__
0105a600 g       .data	00000000 ___DTORS_LIST___
01003574 g     F .text	00000164 fabcfg_init
0100d308 g     F .text	000002dc strcmp
0100989c g     F .text	00000018 Xil_L1DCacheStoreLine
0100442c g     F .text	00000024 d_read_timing
010092cc g     F .text	0000001c XScuTimer_LookupConfig
01005d48 g     F .text	00000074 XAxiDma_BdRingSetCoalesce
0105a600 g       .data	00000000 __DTOR_LIST__
0101603c g     F .text	0000001a vfiprintf
01004ed8 g     F .text	0000023c XAxiDma_CfgInitialize
0100b1d8 g     F .text	00000040 .hidden __fixunsdfdi
010167d0 g     F .fini	00000000 _fini
01009b68 g     F .text	00000030 Xil_ICacheEnable
0100bdb0 g     F .text	00000012 memalign
010051c4 g     F .text	000002b8 XAxiDma_Resume
01009cd8 g     F .text	00000014 Xil_L2CacheStoreLine
010602f0 g     O .bss	00000004 _PathLocale
00010c00 g       .stack	00000000 _abort_stack_end
010161b8 g     F .text	00000030 _wcsnrtombs_r
01016220 g     F .text	0000002c _write_r
01001e28 g     F .text	0000092c _acq_irq_rx_handler
010036d8 g     F .text	00000024 irq_xscutimer
0100bd9c g     F .text	00000012 setlocale
01004d78 g     F .text	00000114 XAxiDma_Reset
01004784 g     F .text	0000009c csi_hack_send_line_data
0100af4c g     F .text	0000016c .hidden __aeabi_frsub
01004558 g     F .text	00000140 csi_hack_init
01059c30 g     O .data	00000004 _impure_ptr
0101261c g     F .text	0000014a __sflush_r
01060008 g       .init_array	00000000 __preinit_array_end
010142a0 g     F .text	00000d96 _svfiprintf_r
0100b43c g     F .text	00000680 __loadlocale
010597cc g     O .data	00000018 acq_state_to_str
010597c4 g       .data	00000000 __sdata2_end
0100c464 g     F .text	00000024 __ascii_mbtowc
0101399c g     F .text	00000050 __ulp
010129bc g     F .text	00000016 __fp_unlock_all
01006c70 g     F .text	000000ac XGpioPs_SetOutputEnable
0100285c g     F .text	000002d8 acq_debug_dump_wave
01016778 g     F .text	0000000c inbyte
010033b0 g     F .text	000001c4 fabcfg_dump_state
01008920 g     F .text	000000d4 XScuGic_Enable
01059898 g     O .data	00000038 XExc_VectorTable
0100750c g     F .text	0000001c XGpioPs_LookupConfig
010130f0 g     F .text	0000001e localeconv
0105a600 g       .data	00000000 ___CTORS_END___
01013110 g     F .text	0000005c __swhatbuf_r
00010000 g       .stack	00000000 __stack
0100a904 g     F .text	0000001a .hidden __aeabi_uidivmod
0100a484 g     F .text	00000024 Xil_ExceptionRemoveHandler
0d16a4e0 g       .heap	00000000 HeapLimit
01004728 g     F .text	0000005c csi_hack_stop_frame
010166e0  w    F .text	00000004 _write
01000c74 g     F .text	00000064 _acq_reset_trigger
00011800 g       .stack	00000000 _end
0100a4dc g     F .text	00000054 XUartPs_ResetHw
01059884 g     O .data	00000008 XGpioPs_ConfigTable
010597c4 g       .data	00000000 __rodata1_end
01004830 g     F .text	00000004 cleanup_platform
01016378 g     F .text	000000ae __fputwc
01008150 g     F .text	000000a0 XGpioPs_SetCallbackHandler
0105a600 g       .data	00000000 __data1_end
0100a580 g     F .text	00000014 DataAbortInterrupt
01005dd8 g     F .text	000000a0 XAxiDma_BdRingAlloc
010081f0 g     F .text	000000e4 XGpioPs_IntrHandler
01007218 g     F .text	000000e8 XGpioPs_GetDirectionPin
01014140 g     F .text	0000003e __swrite
01004864 g     F .text	0000014c trig_write_levels
0105a5f8 g     O .data	00000004 __malloc_trim_threshold
0116a4e0 g       .heap	00000000 _heap
0100b330 g     F .text	00000020 exit
010150c0 g     F .text	00000f7c _vfiprintf_r
01161b60 g     O .bss	000001f8 g_hal
01012fe4 g     F .text	00000050 _fwalk_reent
0100c7cc g     F .text	00000126 __jis_mbtowc
0100b0b8 g     F .text	00000024 .hidden __floatunsisf
01013894 g     F .text	00000106 __mdiff
01007c28 g     F .text	000000e0 XGpioPs_IntrClearPin
0100bdc4 g     F .text	000000f4 _memalign_r
01008b3c g     F .text	0000007c XScuGic_UnmapAllInterruptsFromCpu
01060010 g       .ARM.attributes	00000000 __tbss_end
01012998 g     F .text	00000002 __sfp_lock_release
01000c00 g     F .text	00000074 _acq_reset_PL_fifo
01003b58 g     F .text	00000064 bogo_delay
01056a54 g     O .rodata	00000101 _ctype_
01016740  w    F .text	00000004 _read
0100abd0  w    F .text	00000002 .hidden __aeabi_idiv0
01060008 g       .init_array	00000000 __init_array_start
01006834 g     F .text	0000017c XGpioPs_CfgInitialize
01009188 g     F .text	00000088 XScuTimer_GetPrescaler
01007ea4 g     F .text	000001a0 XGpioPs_SetIntrTypePin
010061f0 g     F .text	00000154 XAxiDma_BdRingFromHw
01016764  w    F .text	00000004 _exit
01009380 g     F .text	00000038 Xil_DCacheInvalidateLine
01005694 g     F .text	00000030 XAxiDma_LookupConfig
0101316c g     F .text	0000009a __smakebuf_r
0100a530 g     F .text	00000014 FIQInterrupt
01008564 g     F .text	000000e4 XScuGic_SoftwareIntr
0100d700 g     F .text	000000dc strlen
0100331c g     F .text	00000094 clkwiz_commit
0100bd74 g     F .text	00000006 __locale_ctype_ptr_l
00010000 g       .stack	00000000 _stack
01004e8c g     F .text	0000004c XAxiDma_ResetIsDone
01006bb8 g     F .text	000000b8 XGpioPs_GetDirection
010150ac g     F .text	00000012 __sprint_r
0100d20c g     F .text	000000e4 strchr
01009344 g     F .text	00000010 Xil_AssertSetCallback
0100ae9c g     F .text	00000042 .hidden __aeabi_f2d
010082fc g     F .text	00000078 XScuGic_InterruptHandler
010597c8 g       .data	00000000 __data_start
01009c70 g     F .text	00000068 Xil_L2CacheFlushRange
010083c4 g     F .text	000000d4 XScuGic_Connect
01009540 g     F .text	00000038 Xil_DCacheStoreLine
01005bc8 g     F .text	0000012c XAxiDma_StartBdRingHw
01009a18 g     F .text	0000006c Xil_L2CacheInvalidate
010113e4 g     F .text	00000026 _wctomb_r
010162d8 g     F .text	00000002 __env_lock
00011000 g       .stack	00000000 _fiq_stack_end
010042f4 g     F .text	00000020 d_getkey
0100abdc g     F .text	0000027a .hidden __subdf3
0100f648 g     F .text	00001ba0 _vfprintf_r
0100973c g     F .text	0000008c Xil_L1DCacheFlush
01060008 g       .init_array	00000000 __preinit_array_start
00000400 g       *ABS*	00000000 _UNDEF_STACK_SIZE
01007a94 g     F .text	000000e8 XGpioPs_IntrGetStatusPin
010098ec g     F .text	00000018 Xil_L1ICacheInvalidate
01013548 g     F .text	0000005c __lo0bits
0100abb4 g     F .text	0000001a .hidden __aeabi_idivmod
01000de8 g     F .text	000001c8 acq_init
010088ac g     F .text	00000074 XScuGic_InterruptMaptoCpu
01009c58 g     F .text	00000018 Xil_L2CacheFlushLine
010056c4 g     F .text	00000030 XAxiDma_LookupConfigBaseAddr
0100a3c8 g     F .text	00000030 Xil_DataAbortHandler
010597c4 g       *ABS*	00000000 _SDA2_BASE_
0100a680 g     F .text	00000028 XTime_GetTime
01011350 g     F .text	00000056 wcrtomb
010011a0 g     F .text	0000004c acq_free_all_alloc
010015d0 g     F .text	00000198 acq_start
0100a464 g     F .text	00000020 Xil_GetExceptionRegisterHandler
01003998 g     F .text	00000018 d_xilinx_assert
01014098 g     F .text	00000080 frexp
01007528 g     F .text	000000ac XGpioPs_IntrEnable
0100af58 g     F .text	00000160 .hidden __addsf3
010078f4 g     F .text	000000e8 XGpioPs_IntrGetEnabledPin
01060000 g       .mmu_tbl	00000000 __mmu_tbl_end
010049b0 g     F .text	00000114 trig_configure_edge
0105a060 g     O .data	0000016c __global_locale
01007838 g     F .text	000000bc XGpioPs_IntrGetEnabled
01009b44 g     F .text	00000024 Xil_DCacheEnable
01003dc8 g     F .text	00000500 hal_init
01060010 g       .ARM.attributes	00000000 __ARM.attributes_start
010111e8 g     F .text	0000001a vfprintf
010096f4 g     F .text	00000048 Xil_L1DCacheInvalidateRange
01016450 g     F .text	00000042 fputwc
01016784  w    F .text	00000008 _close
0100bec8 g     F .text	00000010 free
0101299c g     F .text	00000002 __sinit_lock_acquire
010133e0 g     F .text	00000090 __multadd
010133cc g     F .text	00000012 _Bfree
010130bc g     F .text	00000010 _getenv_r



Disassembly of section .text:

01000000 <_vector_table>:

.globl _vector_table

.section .vectors
_vector_table:
	B	_boot
 1000000:	ea000049 	b	100012c <_boot>
	B	Undefined
 1000004:	ea000025 	b	10000a0 <Undefined>
	B	SVCHandler
 1000008:	ea00002b 	b	10000bc <SVCHandler>
	B	PrefetchAbortHandler
 100000c:	ea00003b 	b	1000100 <PrefetchAbortHandler>
	B	DataAbortHandler
 1000010:	ea000032 	b	10000e0 <DataAbortHandler>
	NOP	/* Placeholder for address exception vector*/
 1000014:	e320f000 	nop	{0}
	B	IRQHandler
 1000018:	ea000000 	b	1000020 <IRQHandler>
	B	FIQHandler
 100001c:	ea00000f 	b	1000060 <FIQHandler>

01000020 <IRQHandler>:


IRQHandler:					/* IRQ vector handler */

	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code*/
 1000020:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000024:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000028:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100002c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000030:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000034:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000038:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	ldr	r2, =prof_pc
	subs	r3, lr, #0
	str	r3, [r2]
#endif

	bl	IRQInterrupt			/* IRQ vector */
 100003c:	eb002940 	bl	100a544 <IRQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000040:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000044:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000048:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100004c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000050:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000054:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000058:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}


	subs	pc, lr, #4			/* adjust return */
 100005c:	e25ef004 	subs	pc, lr, #4

01000060 <FIQHandler>:


FIQHandler:					/* FIQ vector handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000060:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
#if FPU_HARD_FLOAT_ABI_ENABLED
	vpush {d0-d7}
 1000064:	ed2d0b10 	vpush	{d0-d7}
	vpush {d16-d31}
 1000068:	ed6d0b20 	vpush	{d16-d31}
	vmrs r1, FPSCR
 100006c:	eef11a10 	vmrs	r1, fpscr
	push {r1}
 1000070:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	vmrs r1, FPEXC
 1000074:	eef81a10 	vmrs	r1, fpexc
	push {r1}
 1000078:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)

0100007c <FIQLoop>:
#endif

FIQLoop:
	bl	FIQInterrupt			/* FIQ vector */
 100007c:	eb00292b 	bl	100a530 <FIQInterrupt>

#if FPU_HARD_FLOAT_ABI_ENABLED
	pop 	{r1}
 1000080:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPEXC, r1
 1000084:	eee81a10 	vmsr	fpexc, r1
	pop 	{r1}
 1000088:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	vmsr    FPSCR, r1
 100008c:	eee11a10 	vmsr	fpscr, r1
	vpop    {d16-d31}
 1000090:	ecfd0b20 	vpop	{d16-d31}
	vpop    {d0-d7}
 1000094:	ecbd0b10 	vpop	{d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000098:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	subs	pc, lr, #4			/* adjust return */
 100009c:	e25ef004 	subs	pc, lr, #4

010000a0 <Undefined>:


Undefined:					/* Undefined handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000a0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =UndefinedExceptionAddr
 10000a4:	e59f0074 	ldr	r0, [pc, #116]	; 1000120 <PrefetchAbortHandler+0x20>
	sub     r1, lr, #4
 10000a8:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Store address of instruction causing undefined exception */
 10000ac:	e5801000 	str	r1, [r0]

	bl	UndefinedException		/* UndefinedException: call C function here */
 10000b0:	eb002928 	bl	100a558 <UndefinedException>
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000b4:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	movs	pc, lr
 10000b8:	e1b0f00e 	movs	pc, lr

010000bc <SVCHandler>:

SVCHandler:					/* SWI handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000bc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	tst	r0, #0x20			/* check the T bit */
 10000c0:	e3100020 	tst	r0, #32
	ldrneh	r0, [lr,#-2]			/* Thumb mode */
 10000c4:	115e00b2 	ldrhne	r0, [lr, #-2]
	bicne	r0, r0, #0xff00			/* Thumb mode */
 10000c8:	13c00cff 	bicne	r0, r0, #65280	; 0xff00
	ldreq	r0, [lr,#-4]			/* ARM mode */
 10000cc:	051e0004 	ldreq	r0, [lr, #-4]
	biceq	r0, r0, #0xff000000		/* ARM mode */
 10000d0:	03c004ff 	biceq	r0, r0, #-16777216	; 0xff000000

	bl	SWInterrupt			/* SWInterrupt: call C function here */
 10000d4:	eb002924 	bl	100a56c <SWInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000d8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	movs	pc, lr		/*return to the next instruction after the SWI instruction */
 10000dc:	e1b0f00e 	movs	pc, lr

010000e0 <DataAbortHandler>:


DataAbortHandler:				/* Data Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 10000e0:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 10000e4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =DataAbortAddr
 10000e8:	e59f0034 	ldr	r0, [pc, #52]	; 1000124 <PrefetchAbortHandler+0x24>
	sub     r1, lr, #8
 10000ec:	e24e1008 	sub	r1, lr, #8
	str     r1, [r0]            		/* Stores instruction causing data abort */
 10000f0:	e5801000 	str	r1, [r0]

	bl	DataAbortInterrupt		/*DataAbortInterrupt :call C function here */
 10000f4:	eb002921 	bl	100a580 <DataAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 10000f8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #8			/* points to the instruction that caused the Data Abort exception */
 10000fc:	e25ef008 	subs	pc, lr, #8

01000100 <PrefetchAbortHandler>:

PrefetchAbortHandler:				/* Prefetch Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
 1000100:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
 1000104:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr     r0, =PrefetchAbortAddr
 1000108:	e59f0018 	ldr	r0, [pc, #24]	; 1000128 <PrefetchAbortHandler+0x28>
	sub     r1, lr, #4
 100010c:	e24e1004 	sub	r1, lr, #4
	str     r1, [r0]            		/* Stores instruction causing prefetch abort */
 1000110:	e5801000 	str	r1, [r0]

	bl	PrefetchAbortInterrupt		/* PrefetchAbortInterrupt: call C function here */
 1000114:	eb00291e 	bl	100a594 <PrefetchAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
 1000118:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* points to the instruction that caused the Prefetch Abort exception */
 100011c:	e25ef004 	subs	pc, lr, #4
	ldr     r0, =UndefinedExceptionAddr
 1000120:	0116a4c4 	.word	0x0116a4c4
	ldr     r0, =DataAbortAddr
 1000124:	0116a4cc 	.word	0x0116a4cc
	ldr     r0, =PrefetchAbortAddr
 1000128:	0116a4c8 	.word	0x0116a4c8

0100012c <_boot>:
_prestart:
_boot:

#if XPAR_CPU_ID==0
        /* only allow cpu0 through */
	mrc	p15,0,r1,c0,c0,5
 100012c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
	and	r1, r1, #0xf
 1000130:	e201100f 	and	r1, r1, #15
        cmp	r1, #0
 1000134:	e3510000 	cmp	r1, #0
	beq	CheckEFUSE
 1000138:	0a000001 	beq	1000144 <CheckEFUSE>

0100013c <EndlessLoop0>:
	EndlessLoop0:
		wfe
 100013c:	e320f002 	wfe
	b	EndlessLoop0
 1000140:	eafffffd 	b	100013c <EndlessLoop0>

01000144 <CheckEFUSE>:

CheckEFUSE:
        ldr r0,=EFUSEStaus
 1000144:	e59f030c 	ldr	r0, [pc, #780]	; 1000458 <finished+0x14>
        ldr r1,[r0]                             /* Read eFuse setting */
 1000148:	e5901000 	ldr	r1, [r0]
        ands r1,r1,#0x80                        /* Check whether device is having single core */
 100014c:	e2111080 	ands	r1, r1, #128	; 0x80
	beq OKToRun
 1000150:	0a000009 	beq	100017c <OKToRun>

 /* single core device, reset cpu1 */
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 1000154:	e59f0300 	ldr	r0, [pc, #768]	; 100045c <finished+0x18>
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000158:	e59f1300 	ldr	r1, [pc, #768]	; 1000460 <finished+0x1c>
        str     r1, [r0]                        /* Unlock SLCR */
 100015c:	e5801000 	str	r1, [r0]

	ldr r0,=SLCRCPURSTReg
 1000160:	e59f02fc 	ldr	r0, [pc, #764]	; 1000464 <finished+0x20>
	ldr r1,[r0]                             /* Read CPU Software Reset Control register */
 1000164:	e5901000 	ldr	r1, [r0]
	orr r1,r1,#0x22
 1000168:	e3811022 	orr	r1, r1, #34	; 0x22
        str r1,[r0]                             /* Reset CPU1 */
 100016c:	e5801000 	str	r1, [r0]

        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000170:	e59f02f0 	ldr	r0, [pc, #752]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 1000174:	e59f12f0 	ldr	r1, [pc, #752]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000178:	e5801000 	str	r1, [r0]

0100017c <OKToRun>:
	        wfe
	b	EndlessLoop1
#endif

OKToRun:
	mrc     p15, 0, r0, c0, c0, 0		/* Get the revision */
 100017c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and     r5, r0, #0x00f00000
 1000180:	e200560f 	and	r5, r0, #15728640	; 0xf00000
	and     r6, r0, #0x0000000f
 1000184:	e200600f 	and	r6, r0, #15
	orr     r6, r6, r5, lsr #20-4
 1000188:	e1866825 	orr	r6, r6, r5, lsr #16

#ifdef CONFIG_ARM_ERRATA_742230
        cmp     r6, #0x22                       /* only present up to r2p2 */
 100018c:	e3560022 	cmp	r6, #34	; 0x22
        mrcle   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 1000190:	de1faf30 	mrcle	15, 0, sl, cr15, cr0, {1}
        orrle   r10, r10, #1 << 4               /* set bit #4 */
 1000194:	d38aa010 	orrle	sl, sl, #16
        mcrle   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 1000198:	de0faf30 	mcrle	15, 0, sl, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	teq     r5, #0x00200000                 /* only present in r2p* */
 100019c:	e3350602 	teq	r5, #2097152	; 0x200000
	mrceq   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
 10001a0:	0e1faf30 	mrceq	15, 0, sl, cr15, cr0, {1}
	orreq   r10, r10, #1 << 6               /* set bit #6 */
 10001a4:	038aa040 	orreq	sl, sl, #64	; 0x40
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
 10001a8:	0e0faf30 	mcreq	15, 0, sl, cr15, cr0, {1}
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
 10001ac:	e59f02bc 	ldr	r0, [pc, #700]	; 1000470 <finished+0x2c>
	mcr	p15, 0, r0, c12, c0, 0
 10001b0:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
 10001b4:	e59f72b8 	ldr	r7, [pc, #696]	; 1000474 <finished+0x30>
	ldr	r6, =0xffff
 10001b8:	e59f62b8 	ldr	r6, [pc, #696]	; 1000478 <finished+0x34>
	str	r6, [r7]
 10001bc:	e5876000 	str	r6, [r7]

	/* Invalidate caches and TLBs */
	mov	r0,#0				/* r0 = 0  */
 10001c0:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */
 10001c4:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */
 10001c8:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */
 10001cc:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	bl	invalidate_dcache		/* invalidate dcache */
 10001d0:	eb00007c 	bl	10003c8 <invalidate_dcache>

	/* Disable MMU, if enabled */
	mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */
 10001d4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x1			/* clear bit 0 */
 10001d8:	e3c00001 	bic	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 0		/* write value back */
 10001dc:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	add	r2, r2, #0x100000		/* next section */
	subs	r3, r3, #1
	bge	shareable_loop			/* loop till 1G is covered */
#endif

	mrs	r0, cpsr			/* get the current PSR */
 10001e0:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the irq stack pointer */
 10001e4:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 10001e8:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
 10001ec:	e3822012 	orr	r2, r2, #18
	msr	cpsr, r2
 10001f0:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 10001f4:	e59fd280 	ldr	sp, [pc, #640]	; 100047c <finished+0x38>
	bic r2, r2, #(0x1 << 9)    		 /* Set EE bit to little-endian */
 10001f8:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 10001fc:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000200:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
 1000204:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000208:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
 100020c:	e3822013 	orr	r2, r2, #19
	msr	cpsr, r2
 1000210:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000214:	e59fd264 	ldr	sp, [pc, #612]	; 1000480 <finished+0x3c>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000218:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100021c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000220:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
 1000224:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000228:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
 100022c:	e3822017 	orr	r2, r2, #23
	msr	cpsr, r2
 1000230:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000234:	e59fd248 	ldr	sp, [pc, #584]	; 1000484 <finished+0x40>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000238:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100023c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000240:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
 1000244:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000248:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
 100024c:	e3822011 	orr	r2, r2, #17
	msr	cpsr, r2
 1000250:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000254:	e59fd22c 	ldr	sp, [pc, #556]	; 1000488 <finished+0x44>
	bic r2, r2, #(0x1 << 9)    		/* Set EE bit to little-endian */
 1000258:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100025c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000260:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
 1000264:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000268:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
 100026c:	e382201b 	orr	r2, r2, #27
	msr	cpsr, r2
 1000270:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 1000274:	e59fd210 	ldr	sp, [pc, #528]	; 100048c <finished+0x48>
	bic r2, r2, #(0x1 << 9)     		/* Set EE bit to little-endian */
 1000278:	e3c22c02 	bic	r2, r2, #512	; 0x200
	msr spsr_fsxc,r2
 100027c:	e16ff002 	msr	SPSR_fsxc, r2

	mrs	r0, cpsr			/* get the current PSR */
 1000280:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the system stack pointer */
 1000284:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
 1000288:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
 100028c:	e382201f 	orr	r2, r2, #31
	msr	cpsr, r2
 1000290:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000294:	e59fd1f4 	ldr	sp, [pc, #500]	; 1000490 <finished+0x4c>

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
 1000298:	e59f71f4 	ldr	r7, [pc, #500]	; 1000494 <finished+0x50>
	ldr	r0, [r7]
 100029c:	e5970000 	ldr	r0, [r7]
	orr	r0, r0, #0x1
 10002a0:	e3800001 	orr	r0, r0, #1
	str	r0, [r7]
 10002a4:	e5870000 	str	r0, [r7]

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
 10002a8:	e59f01e8 	ldr	r0, [pc, #488]	; 1000498 <finished+0x54>
	orr	r0, r0, #0x5B			/* Outer-cacheable, WB */
 10002ac:	e380005b 	orr	r0, r0, #91	; 0x5b
	mcr	15, 0, r0, c2, c0, 0		/* TTB0 */
 10002b0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}

	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
 10002b4:	e3e00000 	mvn	r0, #0
	mcr	p15,0,r0,c3,c0,0
 10002b8:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
 10002bc:	e59f01d8 	ldr	r0, [pc, #472]	; 100049c <finished+0x58>
	mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */
 10002c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	dsb					/* dsb	allow the MMU to start up */
 10002c4:	f57ff04f 	dsb	sy
	isb					/* isb	flush prefetch buffer */
 10002c8:	f57ff06f 	isb	sy

	/* Write to ACTLR */
	mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/
 10002cc:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x01 << 6)		/* set SMP bit */
 10002d0:	e3800040 	orr	r0, r0, #64	; 0x40
	orr	r0, r0, #(0x01 )		/* Cache/TLB maintenance broadcast */
 10002d4:	e3800001 	orr	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/
 10002d8:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

/* Invalidate L2 Cache and enable L2 Cache*/
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10002dc:	e59f01bc 	ldr	r0, [pc, #444]	; 10004a0 <finished+0x5c>
	mov	r1, #0				/* force the disable bit */
 10002e0:	e3a01000 	mov	r1, #0
	str	r1, [r0]			/* disable the L2 Caches */
 10002e4:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10002e8:	e59f01b4 	ldr	r0, [pc, #436]	; 10004a4 <finished+0x60>
	ldr	r1,[r0]				/* read the register */
 10002ec:	e5901000 	ldr	r1, [r0]
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10002f0:	e59f21b0 	ldr	r2, [pc, #432]	; 10004a8 <finished+0x64>
	orr	r1,r1,r2
 10002f4:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* store the Aux Control Register */
 10002f8:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10002fc:	e59f01a8 	ldr	r0, [pc, #424]	; 10004ac <finished+0x68>
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 1000300:	e59f11a8 	ldr	r1, [pc, #424]	; 10004b0 <finished+0x6c>
	str	r1, [r0]			/* store the TAG Latency register Register */
 1000304:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 1000308:	e59f01a4 	ldr	r0, [pc, #420]	; 10004b4 <finished+0x70>
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 100030c:	e59f11a4 	ldr	r1, [pc, #420]	; 10004b8 <finished+0x74>
	str	r1, [r0]			/* store the Data Latency register Register */
 1000310:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 1000314:	e59f01a0 	ldr	r0, [pc, #416]	; 10004bc <finished+0x78>
	ldr	r2, =0xFFFF
 1000318:	e59f2158 	ldr	r2, [pc, #344]	; 1000478 <finished+0x34>
	str	r2, [r0]			/* force invalidate */
 100031c:	e5802000 	str	r2, [r0]

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 1000320:	e59f0198 	ldr	r0, [pc, #408]	; 10004c0 <finished+0x7c>

01000324 <Sync>:
						/* Load L2CC base address base + sync register*/
	/* poll for completion */
Sync:	ldr	r1, [r0]
 1000324:	e5901000 	ldr	r1, [r0]
	cmp	r1, #0
 1000328:	e3510000 	cmp	r1, #0
	bne	Sync
 100032c:	1afffffc 	bne	1000324 <Sync>

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 1000330:	e59f018c 	ldr	r0, [pc, #396]	; 10004c4 <finished+0x80>
	ldr	r1,[r0]
 1000334:	e5901000 	ldr	r1, [r0]
	ldr	r0,=L2CCIntClear
 1000338:	e59f0188 	ldr	r0, [pc, #392]	; 10004c8 <finished+0x84>
	str	r1,[r0]
 100033c:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
 1000340:	e59f0114 	ldr	r0, [pc, #276]	; 100045c <finished+0x18>
	ldr	r1,=SLCRUnlockKey	    	/* set unlock key */
 1000344:	e59f1114 	ldr	r1, [pc, #276]	; 1000460 <finished+0x1c>
	str	r1, [r0]		    	/* Unlock SLCR */
 1000348:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 100034c:	e59f0178 	ldr	r0, [pc, #376]	; 10004cc <finished+0x88>
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 1000350:	e59f1178 	ldr	r1, [pc, #376]	; 10004d0 <finished+0x8c>
	str	r1, [r0]	        	/* store the L2c Ram Control Register */
 1000354:	e5801000 	str	r1, [r0]

	ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000358:	e59f0108 	ldr	r0, [pc, #264]	; 1000468 <finished+0x24>
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100035c:	e59f1108 	ldr	r1, [pc, #264]	; 100046c <finished+0x28>
	str	r1, [r0]	        	/* lock SLCR */
 1000360:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 1000364:	e59f0134 	ldr	r0, [pc, #308]	; 10004a0 <finished+0x5c>
	ldr	r1,[r0]				/* read the register */
 1000368:	e5901000 	ldr	r1, [r0]
	mov	r2, #L2CCControl		/* set the enable bit */
 100036c:	e3a02001 	mov	r2, #1
	orr	r1,r1,r2
 1000370:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* enable the L2 Caches */
 1000374:	e5801000 	str	r1, [r0]
#endif

	mov	r0, r0
 1000378:	e1a00000 	nop			; (mov r0, r0)
	mrc	p15, 0, r1, c1, c0, 2		/* read cp access control register (CACR) into r1 */
 100037c:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr	r1, r1, #(0xf << 20)		/* enable full access for p10 & p11 */
 1000380:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr	p15, 0, r1, c1, c0, 2		/* write back into CACR */
 1000384:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}

	/* enable vfp */
	fmrx	r1, FPEXC			/* read the exception register */
 1000388:	eef81a10 	vmrs	r1, fpexc
	orr	r1,r1, #FPEXC_EN		/* set VFP enable bit, leave the others in orig state */
 100038c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
	fmxr	FPEXC, r1			/* write back the exception register */
 1000390:	eee81a10 	vmsr	fpexc, r1

	mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */
 1000394:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #(0x01 << 11)		/* #0x8000 */
 1000398:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15,0,r0,c1,c0,0
 100039c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */
 10003a0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */
 10003a4:	e3800004 	orr	r0, r0, #4
	orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */
 10003a8:	e3800002 	orr	r0, r0, #2
	mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */
 10003ac:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

	mrs	r0, cpsr			/* get the current PSR */
 10003b0:	e10f0000 	mrs	r0, CPSR
	bic	r0, r0, #0x100			/* enable asynchronous abort exception */
 10003b4:	e3c00c01 	bic	r0, r0, #256	; 0x100
	msr	cpsr_xsf, r0
 10003b8:	e12ef000 	msr	CPSR_fsx, r0


	b	_start				/* jump to C startup code */
 10003bc:	ea00287e 	b	100a5bc <_start>
	and	r0, r0, r0			/* no op */
 10003c0:	e0000000 	and	r0, r0, r0

.Ldone:	b	.Ldone				/* Paranoia: we should never get here */
 10003c4:	eafffffe 	b	10003c4 <Sync+0xa0>

010003c8 <invalidate_dcache>:
 * the whole D-cache. Need to invalidate each line.
 *
 *************************************************************************
 */
invalidate_dcache:
	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */
 10003c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
	ands	r3, r0, #0x7000000
 10003cc:	e2103407 	ands	r3, r0, #117440512	; 0x7000000
	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */
 10003d0:	e1a03ba3 	lsr	r3, r3, #23
	beq	finished
 10003d4:	0a00001a 	beq	1000444 <finished>
	mov	r10, #0				/* start with level 0 */
 10003d8:	e3a0a000 	mov	sl, #0

010003dc <loop1>:
loop1:
	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */
 10003dc:	e08a20aa 	add	r2, sl, sl, lsr #1
	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */
 10003e0:	e1a01230 	lsr	r1, r0, r2
	and	r1, r1, #7			/* get those 3 bits alone */
 10003e4:	e2011007 	and	r1, r1, #7
	cmp	r1, #2
 10003e8:	e3510002 	cmp	r1, #2
	blt	skip				/* no cache or only instruction cache at this level */
 10003ec:	ba000011 	blt	1000438 <skip>
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
 10003f0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	isb					/* isb to sync the change to the CacheSizeID reg */
 10003f4:	f57ff06f 	isb	sy
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
 10003f8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
	and	r2, r1, #7			/* extract the line length field */
 10003fc:	e2012007 	and	r2, r1, #7
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
 1000400:	e2822004 	add	r2, r2, #4
	ldr	r4, =0x3ff
 1000404:	e59f40c8 	ldr	r4, [pc, #200]	; 10004d4 <finished+0x90>
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
 1000408:	e01441a1 	ands	r4, r4, r1, lsr #3
	clz	r5, r4				/* r5 is the bit position of the way size increment */
 100040c:	e16f5f14 	clz	r5, r4
	ldr	r7, =0x7fff
 1000410:	e59f70c0 	ldr	r7, [pc, #192]	; 10004d8 <finished+0x94>
	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */
 1000414:	e01776a1 	ands	r7, r7, r1, lsr #13

01000418 <loop2>:
loop2:
	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */
 1000418:	e1a09004 	mov	r9, r4

0100041c <loop3>:
loop3:
	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */
 100041c:	e18ab519 	orr	fp, sl, r9, lsl r5
	orr	r11, r11, r7, lsl r2		/* factor in the index number */
 1000420:	e18bb217 	orr	fp, fp, r7, lsl r2
	mcr	p15, 0, r11, c7, c6, 2		/* invalidate by set/way */
 1000424:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
	subs	r9, r9, #1			/* decrement the way number */
 1000428:	e2599001 	subs	r9, r9, #1
	bge	loop3
 100042c:	aafffffa 	bge	100041c <loop3>
	subs	r7, r7, #1			/* decrement the index */
 1000430:	e2577001 	subs	r7, r7, #1
	bge	loop2
 1000434:	aafffff7 	bge	1000418 <loop2>

01000438 <skip>:
skip:
	add	r10, r10, #2			/* increment the cache number */
 1000438:	e28aa002 	add	sl, sl, #2
	cmp	r3, r10
 100043c:	e153000a 	cmp	r3, sl
	bgt	loop1
 1000440:	caffffe5 	bgt	10003dc <loop1>

01000444 <finished>:

finished:
	mov	r10, #0				/* switch back to cache level 0 */
 1000444:	e3a0a000 	mov	sl, #0
	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */
 1000448:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	dsb
 100044c:	f57ff04f 	dsb	sy
	isb
 1000450:	f57ff06f 	isb	sy

	bx	lr
 1000454:	e12fff1e 	bx	lr
        ldr r0,=EFUSEStaus
 1000458:	f800d010 	.word	0xf800d010
        ldr     r0,=SLCRUnlockReg               /* Load SLCR base address base + unlock register */
 100045c:	f8000008 	.word	0xf8000008
        ldr     r1,=SLCRUnlockKey               /* set unlock key */
 1000460:	0000df0d 	.word	0x0000df0d
	ldr r0,=SLCRCPURSTReg
 1000464:	f8000244 	.word	0xf8000244
        ldr	r0,=SLCRlockReg         	/* Load SLCR base address base + lock register */
 1000468:	f8000004 	.word	0xf8000004
	ldr	r1,=SLCRlockKey	        	/* set lock key */
 100046c:	0000767b 	.word	0x0000767b
	ldr	r0, =vector_base
 1000470:	01000000 	.word	0x01000000
	ldr	r7, =0xf8f0000c
 1000474:	f8f0000c 	.word	0xf8f0000c
	ldr	r6, =0xffff
 1000478:	0000ffff 	.word	0x0000ffff
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
 100047c:	00010400 	.word	0x00010400
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
 1000480:	00010c00 	.word	0x00010c00
	ldr	r13,=Abort_stack		/* Abort stack pointer */
 1000484:	00011000 	.word	0x00011000
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
 1000488:	00011400 	.word	0x00011400
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
 100048c:	00011800 	.word	0x00011800
	ldr	r13,=SYS_stack			/* SYS stack pointer */
 1000490:	00010000 	.word	0x00010000
	ldr	r7, =0xf8f00000
 1000494:	f8f00000 	.word	0xf8f00000
	ldr	r0,=TblBase			/* Load MMU translation table base */
 1000498:	0105c000 	.word	0x0105c000
	ldr	r0,=CRValMmuCac
 100049c:	00001005 	.word	0x00001005
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
 10004a0:	f8f02100 	.word	0xf8f02100
	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
 10004a4:	f8f02104 	.word	0xf8f02104
	ldr	r2,=L2CCAuxControl		/* set the default bits */
 10004a8:	72360000 	.word	0x72360000
	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
 10004ac:	f8f02108 	.word	0xf8f02108
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
 10004b0:	00000111 	.word	0x00000111
	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
 10004b4:	f8f0210c 	.word	0xf8f0210c
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
 10004b8:	00000121 	.word	0x00000121
	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
 10004bc:	f8f0277c 	.word	0xf8f0277c
	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
 10004c0:	f8f02730 	.word	0xf8f02730
	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
 10004c4:	f8f0221c 	.word	0xf8f0221c
	ldr	r0,=L2CCIntClear
 10004c8:	f8f02220 	.word	0xf8f02220
	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
 10004cc:	f8000a1c 	.word	0xf8000a1c
	ldr	r1,=SLCRL2cRamConfig        	/* set the configuration value */
 10004d0:	00020202 	.word	0x00020202
	ldr	r4, =0x3ff
 10004d4:	000003ff 	.word	0x000003ff
	ldr	r7, =0x7fff
 10004d8:	00007fff 	.word	0x00007fff

010004dc <deregister_tm_clones>:
 10004dc:	f24a 6000 	movw	r0, #42496	; 0xa600
 10004e0:	f2c0 1005 	movt	r0, #261	; 0x105
 10004e4:	f24a 6300 	movw	r3, #42496	; 0xa600
 10004e8:	f2c0 1305 	movt	r3, #261	; 0x105
 10004ec:	4283      	cmp	r3, r0
 10004ee:	d005      	beq.n	10004fc <deregister_tm_clones+0x20>
 10004f0:	f240 0300 	movw	r3, #0
 10004f4:	f2c0 0300 	movt	r3, #0
 10004f8:	b103      	cbz	r3, 10004fc <deregister_tm_clones+0x20>
 10004fa:	4718      	bx	r3
 10004fc:	4770      	bx	lr
 10004fe:	bf00      	nop

01000500 <register_tm_clones>:
 1000500:	f24a 6000 	movw	r0, #42496	; 0xa600
 1000504:	f2c0 1005 	movt	r0, #261	; 0x105
 1000508:	f24a 6100 	movw	r1, #42496	; 0xa600
 100050c:	f2c0 1105 	movt	r1, #261	; 0x105
 1000510:	1a09      	subs	r1, r1, r0
 1000512:	1089      	asrs	r1, r1, #2
 1000514:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 1000518:	1049      	asrs	r1, r1, #1
 100051a:	d005      	beq.n	1000528 <register_tm_clones+0x28>
 100051c:	f240 0300 	movw	r3, #0
 1000520:	f2c0 0300 	movt	r3, #0
 1000524:	b103      	cbz	r3, 1000528 <register_tm_clones+0x28>
 1000526:	4718      	bx	r3
 1000528:	4770      	bx	lr
 100052a:	bf00      	nop

0100052c <__do_global_dtors_aux>:
 100052c:	b510      	push	{r4, lr}
 100052e:	f240 0420 	movw	r4, #32
 1000532:	f2c0 1406 	movt	r4, #262	; 0x106
 1000536:	7823      	ldrb	r3, [r4, #0]
 1000538:	b973      	cbnz	r3, 1000558 <__do_global_dtors_aux+0x2c>
 100053a:	f7ff ffcf 	bl	10004dc <deregister_tm_clones>
 100053e:	f240 0300 	movw	r3, #0
 1000542:	f2c0 0300 	movt	r3, #0
 1000546:	b12b      	cbz	r3, 1000554 <__do_global_dtors_aux+0x28>
 1000548:	f24a 6000 	movw	r0, #42496	; 0xa600
 100054c:	f2c0 1005 	movt	r0, #261	; 0x105
 1000550:	f3af 8000 	nop.w
 1000554:	2301      	movs	r3, #1
 1000556:	7023      	strb	r3, [r4, #0]
 1000558:	bd10      	pop	{r4, pc}
 100055a:	bf00      	nop

0100055c <frame_dummy>:
 100055c:	b508      	push	{r3, lr}
 100055e:	f240 0300 	movw	r3, #0
 1000562:	f2c0 0300 	movt	r3, #0
 1000566:	b14b      	cbz	r3, 100057c <frame_dummy+0x20>
 1000568:	f240 0124 	movw	r1, #36	; 0x24
 100056c:	f24a 6000 	movw	r0, #42496	; 0xa600
 1000570:	f2c0 1106 	movt	r1, #262	; 0x106
 1000574:	f2c0 1005 	movt	r0, #261	; 0x105
 1000578:	f3af 8000 	nop.w
 100057c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1000580:	e7be      	b.n	1000500 <register_tm_clones>
 1000582:	bf00      	nop
 1000584:	0000      	movs	r0, r0
	...

01000588 <acq_hacks_init>:
 */
uint8_t buffer[BUFFER_SIZE] __attribute__((aligned(32)));

void acq_hacks_init()
{
}
 1000588:	e12fff1e 	bx	lr

0100058c <acq_hacks_run>:

void acq_hacks_run()
{
 100058c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int acqd_waves = 0;
	float microsec, last_frame_time = 1e6;
	int trig_level = 0x80;
	int trig_hyst = 0x04;
	int trig_edge = TRIG_EDGE_RISING;
	int64_t trig_holdoff = 0;
 1000590:	e3a0a000 	mov	sl, #0
{
 1000594:	ed2d8b08 	vpush	{d8-d11}
 1000598:	e24dd024 	sub	sp, sp, #36	; 0x24
	int64_t trig_holdoff = 0;
 100059c:	e3a0b000 	mov	fp, #0
	int trig_edge = TRIG_EDGE_RISING;
 10005a0:	e3a07002 	mov	r7, #2

	wave_size_bytes = N_WAVESIZE;
	wave_size_counts = wave_size_bytes / 8;
	n_waves = N_WAVES;

	csi_hack_init();
 10005a4:	eb000feb 	bl	1004558 <csi_hack_init>
	memset(buffer, 0, 32);
 10005a8:	e3000340 	movw	r0, #832	; 0x340
 10005ac:	e3a02020 	mov	r2, #32
 10005b0:	e3a01000 	mov	r1, #0
 10005b4:	e3400106 	movt	r0, #262	; 0x106
 10005b8:	fa003248 	blx	100cee0 <memset>
	for(i = 0; i < (sizeof(buffer) - 32); i++) {
		buffer[i + 30] = norway_512x512_grey[i];
	}
	*/

	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, 450);
 10005bc:	ed9f0af9 	vldr	s0, [pc, #996]	; 10009a8 <acq_hacks_run+0x41c>
	int trig_hyst = 0x04;
 10005c0:	e3a06004 	mov	r6, #4
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, 450);
 10005c4:	e59f03f0 	ldr	r0, [pc, #1008]	; 10009bc <acq_hacks_run+0x430>
	int trig_level = 0x80;
 10005c8:	e3a05080 	mov	r5, #128	; 0x80
	clkwiz_change_mipi_freq(&g_hal.clkwiz_mipi, 450);
 10005cc:	eb0009f8 	bl	1002db4 <clkwiz_change_mipi_freq>

	d_printf(D_WARN, "starting trigger engine...");
 10005d0:	e3061cc0 	movw	r1, #27840	; 0x6cc0
 10005d4:	e3a00003 	mov	r0, #3
 10005d8:	e3401105 	movt	r1, #261	; 0x105
	float microsec, last_frame_time = 1e6;
 10005dc:	ed9f8af2 	vldr	s16, [pc, #968]	; 10009ac <acq_hacks_run+0x420>
	d_printf(D_WARN, "starting trigger engine...");
 10005e0:	eb000d82 	bl	1003bf0 <d_printf>
	trig_init();
 10005e4:	eb0011be 	bl	1004ce4 <trig_init>

	d_printf(D_WARN, "starting acquisition hacks...");
 10005e8:	e3061cdc 	movw	r1, #27868	; 0x6cdc
	int acqd_waves = 0;
 10005ec:	e3a03000 	mov	r3, #0
	d_printf(D_WARN, "starting acquisition hacks...");
 10005f0:	e3a00003 	mov	r0, #3
 10005f4:	e3401105 	movt	r1, #261	; 0x105
		*/

		csi_hack_stop_frame();

		d_stop_timing(2);
		microsec += d_read_timing_us(2);
 10005f8:	eddfbaec 	vldr	s23, [pc, #944]	; 10009b0 <acq_hacks_run+0x424>

		acqd_waves += g_acq_state.num_acq_made;

		//d_printf(D_INFO, "Done sending %d waves (%d KB) -- took %.4f microseconds", n_waves, bytes / 1024, microsec);
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
				bytes / microsec, 1e6 / last_frame_time, (uint32_t)g_acq_state.stats.num_fifo_stall_total, \
 10005fc:	ed9fbaec 	vldr	s22, [pc, #944]	; 10009b4 <acq_hacks_run+0x428>
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 1000600:	eddf8aec 	vldr	s17, [pc, #944]	; 10009b8 <acq_hacks_run+0x42c>
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 1000604:	ed9f9be3 	vldr	d9, [pc, #908]	; 1000998 <acq_hacks_run+0x40c>
	int acqd_waves = 0;
 1000608:	e58d301c 	str	r3, [sp, #28]
	d_printf(D_WARN, "starting acquisition hacks...");
 100060c:	eb000d77 	bl	1003bf0 <d_printf>
		d_start_timing(5);
 1000610:	e3a00005 	mov	r0, #5
 1000614:	eb000f48 	bl	100433c <d_start_timing>
		acq_free_all_alloc();
 1000618:	eb0002e0 	bl	10011a0 <acq_free_all_alloc>
		res = acq_prepare_triggered(ACQ_MODE_8BIT | ACQ_MODE_1CH, 0, wave_size_counts, n_waves);
 100061c:	e3a03080 	mov	r3, #128	; 0x80
 1000620:	e3a02b01 	mov	r2, #1024	; 0x400
 1000624:	e3a01000 	mov	r1, #0
 1000628:	e3a00021 	mov	r0, #33	; 0x21
 100062c:	eb0002ee 	bl	10011ec <acq_prepare_triggered>
		if(res != ACQRES_OK) {
 1000630:	e3500000 	cmp	r0, #0
 1000634:	1a0000be 	bne	1000934 <acq_hacks_run+0x3a8>
		d_start_timing(4);
 1000638:	e3a00004 	mov	r0, #4
 100063c:	eb000f3e 	bl	100433c <d_start_timing>
		res = acq_start();
 1000640:	eb0003e2 	bl	10015d0 <acq_start>
		if(res != ACQRES_OK) {
 1000644:	e2504000 	subs	r4, r0, #0
 1000648:	1a0000c0 	bne	1000950 <acq_hacks_run+0x3c4>
		trig_configure_edge(TRIG_ADCSRC1, trig_level, trig_hyst, trig_edge);
 100064c:	e6ff1075 	uxth	r1, r5
 1000650:	e1a03007 	mov	r3, r7
 1000654:	e6ff2076 	uxth	r2, r6
				case 'O': trig_holdoff += 100000L; break;  // Add 0.1ms holdoff
 1000658:	e30896a0 	movw	r9, #34464	; 0x86a0
 100065c:	e3409001 	movt	r9, #1
		trig_configure_edge(TRIG_ADCSRC1, trig_level, trig_hyst, trig_edge);
 1000660:	eb0010d2 	bl	10049b0 <trig_configure_edge>
		trig_configure_holdoff(trig_holdoff);
 1000664:	e1a0000a 	mov	r0, sl
 1000668:	e1a0100b 	mov	r1, fp
 100066c:	eb001114 	bl	1004ac4 <trig_configure_holdoff>
			switch(toupper(d_getkey())) {
 1000670:	eb000f1f 	bl	10042f4 <d_getkey>
 1000674:	e1a08000 	mov	r8, r0
 1000678:	fa002dbf 	blx	100bd7c <__locale_ctype_ptr>
 100067c:	e0800008 	add	r0, r0, r8
 1000680:	e5d03001 	ldrb	r3, [r0, #1]
 1000684:	e2033003 	and	r3, r3, #3
 1000688:	e3530002 	cmp	r3, #2
 100068c:	02488020 	subeq	r8, r8, #32
 1000690:	e2488045 	sub	r8, r8, #69	; 0x45
 1000694:	e3580014 	cmp	r8, #20
 1000698:	979ff108 	ldrls	pc, [pc, r8, lsl #2]
 100069c:	ea00009b 	b	1000910 <acq_hacks_run+0x384>
 10006a0:	0100096c 	.word	0x0100096c
 10006a4:	010008c8 	.word	0x010008c8
 10006a8:	01000908 	.word	0x01000908
 10006ac:	01000900 	.word	0x01000900
 10006b0:	01000910 	.word	0x01000910
 10006b4:	01000910 	.word	0x01000910
 10006b8:	01000910 	.word	0x01000910
 10006bc:	01000910 	.word	0x01000910
 10006c0:	01000910 	.word	0x01000910
 10006c4:	01000910 	.word	0x01000910
 10006c8:	010008f4 	.word	0x010008f4
 10006cc:	010008d0 	.word	0x010008d0
 10006d0:	01000910 	.word	0x01000910
 10006d4:	010006f4 	.word	0x010006f4
 10006d8:	01000910 	.word	0x01000910
 10006dc:	010008ec 	.word	0x010008ec
 10006e0:	01000910 	.word	0x01000910
 10006e4:	01000910 	.word	0x01000910
 10006e8:	01000910 	.word	0x01000910
 10006ec:	01000910 	.word	0x01000910
 10006f0:	010008e4 	.word	0x010008e4
				case 'R': trig_edge = TRIG_EDGE_RISING; break;
 10006f4:	e3a07002 	mov	r7, #2
			if(trig_level > 255) {
 10006f8:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
 10006fc:	e1c320d0 	ldrd	r2, [r3]
 1000700:	e6e85015 	usat	r5, #8, r5
			if(trig_hyst > 63) {
 1000704:	e6e66016 	usat	r6, #6, r6
			if(trig_holdoff < 0L) {
 1000708:	e152000a 	cmp	r2, sl
 100070c:	e0d3300b 	sbcs	r3, r3, fp
 1000710:	b28fbfa2 	addlt	fp, pc, #648	; 0x288
 1000714:	b1cba0d0 	ldrdlt	sl, [fp]
 1000718:	e35a0000 	cmp	sl, #0
 100071c:	e2db3000 	sbcs	r3, fp, #0
 1000720:	b3a0a000 	movlt	sl, #0
 1000724:	b3a0b000 	movlt	fp, #0
				trig_configure_edge(TRIG_ADCSRC1, trig_level, trig_hyst, trig_edge);
 1000728:	e1a03007 	mov	r3, r7
 100072c:	e6ff2076 	uxth	r2, r6
 1000730:	e6ff1075 	uxth	r1, r5
 1000734:	e3a00000 	mov	r0, #0
 1000738:	eb00109c 	bl	10049b0 <trig_configure_edge>
				trig_configure_holdoff(trig_holdoff);
 100073c:	e1a0000a 	mov	r0, sl
 1000740:	e1a0100b 	mov	r1, fp
 1000744:	eb0010de 	bl	1004ac4 <trig_configure_holdoff>

	reg &= FAB_CFG_ADDR_MASK;

	// Wrapped in dsb to ensure synchronous read
	//dsb();
	res = _FAB_CFG_ACCESS(reg);
 1000748:	e3a03000 	mov	r3, #0
				d_printf(D_INFO, "level:0x%02x, hyst:0x%02x, edge:0x%02x, hold:0x%08x", (uint8_t)trig_level, (uint8_t)trig_hyst, (uint8_t)trig_edge, fabcfg_read(FAB_CFG_TRIG_HOLDOFF));
 100074c:	e3061d30 	movw	r1, #27952	; 0x6d30
 1000750:	e3443001 	movt	r3, #16385	; 0x4001
 1000754:	e3401105 	movt	r1, #261	; 0x105
 1000758:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
 100075c:	e1a02005 	mov	r2, r5
 1000760:	e1a03006 	mov	r3, r6
 1000764:	e58d7000 	str	r7, [sp]
 1000768:	e3a00002 	mov	r0, #2
 100076c:	e58dc004 	str	ip, [sp, #4]
 1000770:	eb000d1e 	bl	1003bf0 <d_printf>
		} while(!acq_is_done());
 1000774:	eb0003fb 	bl	1001768 <acq_is_done>
 1000778:	e3500000 	cmp	r0, #0
 100077c:	0affffbb 	beq	1000670 <acq_hacks_run+0xe4>
		d_stop_timing(4);
 1000780:	e3a00004 	mov	r0, #4
 1000784:	eb000f08 	bl	10043ac <d_stop_timing>
		microsec = d_read_timing_us(4);
 1000788:	e3a00004 	mov	r0, #4
 100078c:	eb000f2f 	bl	1004450 <d_read_timing_us>
		Xil_DCacheInvalidateRange(buffer, sizeof(buffer));
 1000790:	e3000340 	movw	r0, #832	; 0x340
 1000794:	e3a01601 	mov	r1, #1048576	; 0x100000
 1000798:	e3400106 	movt	r0, #262	; 0x106
 100079c:	eb002305 	bl	10093b8 <Xil_DCacheInvalidateRange>
		dsb();
 10007a0:	f57ff04f 	dsb	sy
		d_start_timing(3);
 10007a4:	e3009340 	movw	r9, #832	; 0x340
 10007a8:	e3a00003 	mov	r0, #3
 10007ac:	e3409106 	movt	r9, #262	; 0x106
 10007b0:	e2898601 	add	r8, r9, #1048576	; 0x100000
 10007b4:	eb000ee0 	bl	100433c <d_start_timing>
			acq_copy_slow_mipi(i, (uint8_t*)(buffer + (wave_size_bytes * i)));
 10007b8:	e1a01009 	mov	r1, r9
 10007bc:	e1a00004 	mov	r0, r4
 10007c0:	e2899a02 	add	r9, r9, #8192	; 0x2000
		for(i = 0; i < n_waves; i++) {
 10007c4:	e2844001 	add	r4, r4, #1
			acq_copy_slow_mipi(i, (uint8_t*)(buffer + (wave_size_bytes * i)));
 10007c8:	eb0008d9 	bl	1002b34 <acq_copy_slow_mipi>
		for(i = 0; i < n_waves; i++) {
 10007cc:	e1580009 	cmp	r8, r9
 10007d0:	1afffff8 	bne	10007b8 <acq_hacks_run+0x22c>
		Xil_DCacheFlushRange(buffer, sizeof(buffer));
 10007d4:	e3000340 	movw	r0, #832	; 0x340
 10007d8:	e3a01601 	mov	r1, #1048576	; 0x100000
 10007dc:	e3400106 	movt	r0, #262	; 0x106
 10007e0:	eb002341 	bl	10094ec <Xil_DCacheFlushRange>
		dsb();
 10007e4:	f57ff04f 	dsb	sy
		d_stop_timing(3);
 10007e8:	e3a00003 	mov	r0, #3
 10007ec:	eb000eee 	bl	10043ac <d_stop_timing>
 */
static inline void fabcfg_write(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;
	//dsb();
	_FAB_CFG_ACCESS(reg) = data;
 10007f0:	e3a03000 	mov	r3, #0
 10007f4:	e3002ffe 	movw	r2, #4094	; 0xffe
 10007f8:	e3443001 	movt	r3, #16385	; 0x4001
		d_start_timing(2);
 10007fc:	e3a00002 	mov	r0, #2
 1000800:	e5832104 	str	r2, [r3, #260]	; 0x104
 1000804:	eb000ecc 	bl	100433c <d_start_timing>
		csi_hack_start_frame(N_CSI_LINES - 1);
 1000808:	e3a000ff 	mov	r0, #255	; 0xff
 100080c:	eb000fa1 	bl	1004698 <csi_hack_start_frame>
		csi_hack_send_line_data(buffer, BUFFER_SIZE);
 1000810:	e3000340 	movw	r0, #832	; 0x340
 1000814:	e3a01601 	mov	r1, #1048576	; 0x100000
 1000818:	e3400106 	movt	r0, #262	; 0x106
 100081c:	eb000fd8 	bl	1004784 <csi_hack_send_line_data>
		csi_hack_stop_frame();
 1000820:	eb000fc0 	bl	1004728 <csi_hack_stop_frame>
		d_stop_timing(2);
 1000824:	e3a00002 	mov	r0, #2
 1000828:	eb000edf 	bl	10043ac <d_stop_timing>
		microsec += d_read_timing_us(2);
 100082c:	e3a00002 	mov	r0, #2
 1000830:	eb000f06 	bl	1004450 <d_read_timing_us>
		acqd_waves += g_acq_state.num_acq_made;
 1000834:	e30132e0 	movw	r3, #4832	; 0x12e0
		microsec += d_read_timing_us(2);
 1000838:	ee300a2b 	vadd.f32	s0, s0, s23
		acqd_waves += g_acq_state.num_acq_made;
 100083c:	e3403116 	movt	r3, #278	; 0x116
 1000840:	e5932774 	ldr	r2, [r3, #1908]	; 0x774
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 1000844:	e59317c4 	ldr	r1, [r3, #1988]	; 0x7c4
				bytes / microsec, 1e6 / last_frame_time, (uint32_t)g_acq_state.stats.num_fifo_stall_total, \
 1000848:	e59347c0 	ldr	r4, [r3, #1984]	; 0x7c0
		acqd_waves += g_acq_state.num_acq_made;
 100084c:	e59d301c 	ldr	r3, [sp, #28]
				bytes / microsec, 1e6 / last_frame_time, (uint32_t)g_acq_state.stats.num_fifo_stall_total, \
 1000850:	ee8baa00 	vdiv.f32	s20, s22, s0
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 1000854:	e1a00004 	mov	r0, r4
		acqd_waves += g_acq_state.num_acq_made;
 1000858:	e0838002 	add	r8, r3, r2
 100085c:	e58d801c 	str	r8, [sp, #28]
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 1000860:	fa002a1d 	blx	100b0dc <__aeabi_ul2f>
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 1000864:	eef70ac8 	vcvt.f64.f32	d16, s16
 1000868:	e3061d64 	movw	r1, #28004	; 0x6d64
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 100086c:	ee078a90 	vmov	s15, r8
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 1000870:	e3401105 	movt	r1, #261	; 0x105
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 1000874:	eeb87ae7 	vcvt.f32.s32	s14, s15
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 1000878:	e59d301c 	ldr	r3, [sp, #28]
 100087c:	eec91b20 	vdiv.f64	d17, d9, d16
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 1000880:	ee070a90 	vmov	s15, r0
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 1000884:	e3a00002 	mov	r0, #2
 1000888:	e58d300c 	str	r3, [sp, #12]
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 100088c:	eec77a87 	vdiv.f32	s15, s15, s14
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 1000890:	e58d4008 	str	r4, [sp, #8]
 1000894:	eeb7aaca 	vcvt.f64.f32	d10, s20
 1000898:	ec532b1a 	vmov	r2, r3, d10
				acqd_waves, ((float)(g_acq_state.stats.num_fifo_stall_total) / acqd_waves) * 100);
 100089c:	ee677aa8 	vmul.f32	s15, s15, s17
		d_printf(D_INFO, "%.4f MB/s (%.4f fps, %d stalls, %d waves, %.4f%% stall rate)", \
 10008a0:	eef70ae7 	vcvt.f64.f32	d16, s15
 10008a4:	edcd1b00 	vstr	d17, [sp]
 10008a8:	edcd0b04 	vstr	d16, [sp, #16]
 10008ac:	eb000ccf 	bl	1003bf0 <d_printf>

		//bogo_delay(10000);

		d_stop_timing(5);
 10008b0:	e3a00005 	mov	r0, #5
 10008b4:	eb000ebc 	bl	10043ac <d_stop_timing>
		last_frame_time = d_read_timing_us(5);
 10008b8:	e3a00005 	mov	r0, #5
 10008bc:	eb000ee3 	bl	1004450 <d_read_timing_us>
 10008c0:	eeb08a40 	vmov.f32	s16, s0
		d_start_timing(5);
 10008c4:	eaffff51 	b	1000610 <acq_hacks_run+0x84>
				case 'F': trig_edge = TRIG_EDGE_FALLING; break;
 10008c8:	e3a07001 	mov	r7, #1
 10008cc:	eaffff89 	b	10006f8 <acq_hacks_run+0x16c>
				case 'P': trig_holdoff -= 100000L; break;  // Remove 0.1ms holdoff
 10008d0:	e3073960 	movw	r3, #31072	; 0x7960
 10008d4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 10008d8:	e09aa003 	adds	sl, sl, r3
 10008dc:	e2cbb000 	sbc	fp, fp, #0
 10008e0:	eaffff84 	b	10006f8 <acq_hacks_run+0x16c>
				case 'Y': trig_hyst += 1; break;
 10008e4:	e2866001 	add	r6, r6, #1
 10008e8:	eaffff82 	b	10006f8 <acq_hacks_run+0x16c>
				case 'T': trig_level += 1; break;
 10008ec:	e2855001 	add	r5, r5, #1
 10008f0:	eaffff80 	b	10006f8 <acq_hacks_run+0x16c>
				case 'O': trig_holdoff += 100000L; break;  // Add 0.1ms holdoff
 10008f4:	e09aa009 	adds	sl, sl, r9
 10008f8:	e2abb000 	adc	fp, fp, #0
 10008fc:	eaffff7d 	b	10006f8 <acq_hacks_run+0x16c>
				case 'H': trig_hyst -= 1; break;
 1000900:	e2466001 	sub	r6, r6, #1
 1000904:	eaffff7b 	b	10006f8 <acq_hacks_run+0x16c>
				case 'G': trig_level -= 1; break;
 1000908:	e2455001 	sub	r5, r5, #1
 100090c:	eaffff79 	b	10006f8 <acq_hacks_run+0x16c>
			if(trig_level > 255) {
 1000910:	e28f3088 	add	r3, pc, #136	; 0x88
 1000914:	e1c320d0 	ldrd	r2, [r3]
 1000918:	e6e85015 	usat	r5, #8, r5
			if(trig_hyst > 63) {
 100091c:	e6e66016 	usat	r6, #6, r6
			if(trig_holdoff < 0L) {
 1000920:	e152000a 	cmp	r2, sl
 1000924:	e0d3300b 	sbcs	r3, r3, fp
 1000928:	b28fb070 	addlt	fp, pc, #112	; 0x70
 100092c:	b1cba0d0 	ldrdlt	sl, [fp]
			if(!no_key) {
 1000930:	eaffff8f 	b	1000774 <acq_hacks_run+0x1e8>
			d_printf(D_ERROR, "acq_prepare_triggered error: %d", res);
 1000934:	e3061cfc 	movw	r1, #27900	; 0x6cfc
 1000938:	e1a02000 	mov	r2, r0
 100093c:	e3401105 	movt	r1, #261	; 0x105
 1000940:	e3a00004 	mov	r0, #4
 1000944:	eb000ca9 	bl	1003bf0 <d_printf>
			exit(-1);
 1000948:	e3e00000 	mvn	r0, #0
 100094c:	fa002a77 	blx	100b330 <exit>
			d_printf(D_ERROR, "acq_start error: %d", res);
 1000950:	e3061d1c 	movw	r1, #27932	; 0x6d1c
 1000954:	e3a00004 	mov	r0, #4
 1000958:	e1a02004 	mov	r2, r4
 100095c:	e3401105 	movt	r1, #261	; 0x105
 1000960:	eb000ca2 	bl	1003bf0 <d_printf>
			exit(-1);
 1000964:	e3e00000 	mvn	r0, #0
 1000968:	fa002a70 	blx	100b330 <exit>
			if(trig_level > 255) {
 100096c:	e28f302c 	add	r3, pc, #44	; 0x2c
 1000970:	e1c320d0 	ldrd	r2, [r3]
 1000974:	e6e85015 	usat	r5, #8, r5
			if(trig_hyst > 63) {
 1000978:	e6e66016 	usat	r6, #6, r6
				case 'E': trig_edge = TRIG_EDGE_BOTH; break;
 100097c:	e3a07003 	mov	r7, #3
 1000980:	e152000a 	cmp	r2, sl
 1000984:	e0d3300b 	sbcs	r3, r3, fp
 1000988:	b28fb010 	addlt	fp, pc, #16
 100098c:	b1cba0d0 	ldrdlt	sl, [fp]
			if(!no_key) {
 1000990:	eaffff64 	b	1000728 <acq_hacks_run+0x19c>
 1000994:	e320f000 	nop	{0}
 1000998:	00000000 	.word	0x00000000
 100099c:	412e8480 	.word	0x412e8480
 10009a0:	fc23ac00 	.word	0xfc23ac00
 10009a4:	00000006 	.word	0x00000006
 10009a8:	43e10000 	.word	0x43e10000
 10009ac:	49742400 	.word	0x49742400
 10009b0:	00000000 	.word	0x00000000
 10009b4:	49800000 	.word	0x49800000
 10009b8:	42c80000 	.word	0x42c80000
 10009bc:	01161cc0 	.word	0x01161cc0

010009c0 <_acq_irq_fifo_gen_rst>:
 */
static inline void fabcfg_clear(uint32_t reg, uint32_t data)
{
	reg &= FAB_CFG_ADDR_MASK;
	//dsb();
	_FAB_CFG_ACCESS(reg) &= ~data;
 10009c0:	e3a01000 	mov	r1, #0
 * problem...
 *
 * @param	Argument passed from SCUGIC.  Not used.
 */
void _acq_irq_fifo_gen_rst(void *none)
{
 10009c4:	e92d4070 	push	{r4, r5, r6, lr}
 10009c8:	e3441001 	movt	r1, #16385	; 0x4001
 10009cc:	e24dd008 	sub	sp, sp, #8
 10009d0:	e5913050 	ldr	r3, [r1, #80]	; 0x50
 10009d4:	e7f33053 	ubfx	r3, r3, #0, #20
 10009d8:	e5813050 	str	r3, [r1, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 10009dc:	e5913050 	ldr	r3, [r1, #80]	; 0x50
 10009e0:	e3833455 	orr	r3, r3, #1426063360	; 0x55000000
 10009e4:	e3833605 	orr	r3, r3, #5242880	; 0x500000
 10009e8:	e5813050 	str	r3, [r1, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 10009ec:	e5913058 	ldr	r3, [r1, #88]	; 0x58
	//d_printf(D_ERROR, "acquire: FIFO stall, recovering");

	fabcfg_clear(FAB_CFG_ACQ_CTRL_A, 0xfff00000);
	fabcfg_set(FAB_CFG_ACQ_CTRL_A,   0x55500000);

	if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_RG_FIFO_STALL)) {
 10009f0:	e3130010 	tst	r3, #16
 10009f4:	0a000052 	beq	1000b44 <_acq_irq_fifo_gen_rst+0x184>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10009f8:	e5910050 	ldr	r0, [r1, #80]	; 0x50
		fabcfg_clear(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_RUN | ACQ_CTRL_A_AXI_RUN);
		fabcfg_set(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET | ACQ_CTRL_A_TRIG_RST | ACQ_CTRL_A_ABORT);

		// Wait until both FIFO level readouts report 0x0000
		while(((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_A) & ACQ_STATUS_A_FIFO_MASK) != 0) && \
 10009fc:	e3a03000 	mov	r3, #0
	res = _FAB_CFG_ACCESS(reg);
 1000a00:	e1a02001 	mov	r2, r1
 1000a04:	e34f3fff 	movt	r3, #65535	; 0xffff
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000a08:	e3c00003 	bic	r0, r0, #3
 1000a0c:	e5810050 	str	r0, [r1, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1000a10:	e5910050 	ldr	r0, [r1, #80]	; 0x50
 1000a14:	e3800068 	orr	r0, r0, #104	; 0x68
 1000a18:	e5810050 	str	r0, [r1, #80]	; 0x50
 1000a1c:	ea000002 	b	1000a2c <_acq_irq_fifo_gen_rst+0x6c>
	res = _FAB_CFG_ACCESS(reg);
 1000a20:	e592105c 	ldr	r1, [r2, #92]	; 0x5c
 1000a24:	e1110003 	tst	r1, r3
 1000a28:	0a000002 	beq	1000a38 <_acq_irq_fifo_gen_rst+0x78>
 1000a2c:	e5921058 	ldr	r1, [r2, #88]	; 0x58
 1000a30:	e1110003 	tst	r1, r3
 1000a34:	1afffff9 	bne	1000a20 <_acq_irq_fifo_gen_rst+0x60>
			  ((fabcfg_read_no_dsb(FAB_CFG_ACQ_STATUS_B) & ACQ_STATUS_B_FIFO_MASK) != 0)) ;

		fabcfg_clear(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET | ACQ_CTRL_A_TRIG_RST | ACQ_CTRL_A_ABORT);

		// Reset the current acquisition and try again.  Set a tracking flag for diagnostics/debug.
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 1000a38:	e30142e0 	movw	r4, #4832	; 0x12e0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000a3c:	e3a01000 	mov	r1, #0
 1000a40:	e3404116 	movt	r4, #278	; 0x116
 1000a44:	e3441001 	movt	r1, #16385	; 0x4001
 1000a48:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
 1000a4c:	e2846008 	add	r6, r4, #8
 1000a50:	e5910050 	ldr	r0, [r1, #80]	; 0x50
		g_acq_state.acq_current->trigger_at = 0;
 1000a54:	e3a0c000 	mov	ip, #0
		g_acq_state.state = ACQSTATE_WAIT_TRIG; // TODO: maybe need another state here
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL; // TODO: maybe need another state here

		XAxiDma_Reset(&g_acq_state.dma);
		while(!XAxiDma_ResetIsDone(&g_acq_state.dma));
 1000a58:	e1a05006 	mov	r5, r6
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 1000a5c:	e1d321b0 	ldrh	r2, [r3, #16]
 1000a60:	e3c00068 	bic	r0, r0, #104	; 0x68
 1000a64:	e5810050 	str	r0, [r1, #80]	; 0x50
		g_acq_state.state = ACQSTATE_WAIT_TRIG; // TODO: maybe need another state here
 1000a68:	e3a01003 	mov	r1, #3
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 1000a6c:	e3822004 	orr	r2, r2, #4
		g_acq_state.acq_current->trigger_at = 0;
 1000a70:	e583c00c 	str	ip, [r3, #12]
		g_acq_state.acq_current->flags |= ACQBUF_FLAG_NOTE_FIFOSTALL;
 1000a74:	e1c321b0 	strh	r2, [r3, #16]
		XAxiDma_Reset(&g_acq_state.dma);
 1000a78:	e1a00006 	mov	r0, r6
		g_acq_state.sub_state = ACQSUBST_PRE_TRIG_FILL; // TODO: maybe need another state here
 1000a7c:	e3a03001 	mov	r3, #1
 1000a80:	e884000a 	stm	r4, {r1, r3}
		XAxiDma_Reset(&g_acq_state.dma);
 1000a84:	eb0010bb 	bl	1004d78 <XAxiDma_Reset>
		while(!XAxiDma_ResetIsDone(&g_acq_state.dma));
 1000a88:	e1a00005 	mov	r0, r5
 1000a8c:	eb0010fe 	bl	1004e8c <XAxiDma_ResetIsDone>
 1000a90:	e3500000 	cmp	r0, #0
 1000a94:	0afffffb 	beq	1000a88 <_acq_irq_fifo_gen_rst+0xc8>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1000a98:	e5940008 	ldr	r0, [r4, #8]
 */
int _acq_core_dma_start(uint32_t *buff_ptr, uint32_t buff_sz)
{
	int error;

	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 1000a9c:	e3a03001 	mov	r3, #1
		if(_acq_core_dma_start(g_acq_state.acq_current->buff_acq, g_acq_state.pre_buffsz) != ACQRES_OK) {
 1000aa0:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1000aa4:	e5902030 	ldr	r2, [r0, #48]	; 0x30
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 1000aa8:	e5911008 	ldr	r1, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1000aac:	e3822a07 	orr	r2, r2, #28672	; 0x7000
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1000ab0:	e5802030 	str	r2, [r0, #48]	; 0x30
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 1000ab4:	e59f00c4 	ldr	r0, [pc, #196]	; 1000b80 <_acq_irq_fifo_gen_rst+0x1c0>
 1000ab8:	e5962758 	ldr	r2, [r6, #1880]	; 0x758
 1000abc:	eb001289 	bl	10054e8 <XAxiDma_SimpleTransfer>

	if(error != XST_SUCCESS) {
 1000ac0:	e2502000 	subs	r2, r0, #0
 1000ac4:	1a000023 	bne	1000b58 <_acq_irq_fifo_gen_rst+0x198>
	res = _FAB_CFG_ACCESS(reg);
 1000ac8:	e3a03000 	mov	r3, #0
		g_acq_state.stats.num_fifo_stall_total++;
 1000acc:	e59427c0 	ldr	r2, [r4, #1984]	; 0x7c0
 1000ad0:	e3443001 	movt	r3, #16385	; 0x4001
 1000ad4:	e59407c4 	ldr	r0, [r4, #1988]	; 0x7c4
 1000ad8:	e5931058 	ldr	r1, [r3, #88]	; 0x58
 1000adc:	e2922001 	adds	r2, r2, #1
 1000ae0:	e2a00000 	adc	r0, r0, #0
		stat_a = fabcfg_read(FAB_CFG_ACQ_STATUS_A);
 1000ae4:	e58d1000 	str	r1, [sp]
 1000ae8:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
		stat_b = fabcfg_read(FAB_CFG_ACQ_STATUS_B);
 1000aec:	e58d1004 	str	r1, [sp, #4]
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000af0:	e5931050 	ldr	r1, [r3, #80]	; 0x50
 1000af4:	e3c11802 	bic	r1, r1, #131072	; 0x20000
 1000af8:	e3c11010 	bic	r1, r1, #16
 1000afc:	e5831050 	str	r1, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1000b00:	e5931050 	ldr	r1, [r3, #80]	; 0x50
 1000b04:	e3811f41 	orr	r1, r1, #260	; 0x104
 1000b08:	e3811003 	orr	r1, r1, #3
 1000b0c:	e5831050 	str	r1, [r3, #80]	; 0x50
		g_acq_state.stats.num_fifo_stall_total++;
 1000b10:	e58427c0 	str	r2, [r4, #1984]	; 0x7c0
 1000b14:	e58407c4 	str	r0, [r4, #1988]	; 0x7c4
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000b18:	e3a03000 	mov	r3, #0
 1000b1c:	e3443001 	movt	r3, #16385	; 0x4001
 1000b20:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1000b24:	e7f32052 	ubfx	r2, r2, #0, #20
 1000b28:	e5832050 	str	r2, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1000b2c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1000b30:	e3822466 	orr	r2, r2, #1711276032	; 0x66000000
 1000b34:	e3822606 	orr	r2, r2, #6291456	; 0x600000
 1000b38:	e5832050 	str	r2, [r3, #80]	; 0x50
}
 1000b3c:	e28dd008 	add	sp, sp, #8
 1000b40:	e8bd8070 	pop	{r4, r5, r6, pc}
		d_printf(D_ERROR, "acquire: FIFO stall interrupt without FIFO stall signal!");
 1000b44:	e3061df4 	movw	r1, #28148	; 0x6df4
 1000b48:	e3a00004 	mov	r0, #4
 1000b4c:	e3401105 	movt	r1, #261	; 0x105
 1000b50:	eb000c26 	bl	1003bf0 <d_printf>
 1000b54:	eaffffef 	b	1000b18 <_acq_irq_fifo_gen_rst+0x158>
		d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1000b58:	e3061da4 	movw	r1, #28068	; 0x6da4
 1000b5c:	e3a00004 	mov	r0, #4
 1000b60:	e3401105 	movt	r1, #261	; 0x105
 1000b64:	eb000c21 	bl	1003bf0 <d_printf>
			d_printf(D_ERROR, "acquire: FIFO stall not recovered");
 1000b68:	e3061dd0 	movw	r1, #28112	; 0x6dd0
 1000b6c:	e3a00004 	mov	r0, #4
 1000b70:	e3401105 	movt	r1, #261	; 0x105
}
 1000b74:	e28dd008 	add	sp, sp, #8
 1000b78:	e8bd4070 	pop	{r4, r5, r6, lr}
			d_printf(D_ERROR, "acquire: FIFO stall not recovered");
 1000b7c:	ea000c1b 	b	1003bf0 <d_printf>
 1000b80:	011612e8 	.word	0x011612e8

01000b84 <_acq_irq_error_dma>:
{
 1000b84:	e92d4070 	push	{r4, r5, r6, lr}
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000b88:	e3a04000 	mov	r4, #0
 1000b8c:	e3444001 	movt	r4, #16385	; 0x4001
	g_acq_state.stats.num_err_total++;
 1000b90:	e30132e0 	movw	r3, #4832	; 0x12e0
 1000b94:	e3403116 	movt	r3, #278	; 0x116
	g_acq_state.state = ACQSTATE_UNINIT;
 1000b98:	e3a05000 	mov	r5, #0
 1000b9c:	e5941050 	ldr	r1, [r4, #80]	; 0x50
	XAxiDma_Reset(&g_acq_state.dma);
 1000ba0:	e2830008 	add	r0, r3, #8
	g_acq_state.stats.num_err_total++;
 1000ba4:	e59327b8 	ldr	r2, [r3, #1976]	; 0x7b8
 1000ba8:	e593e7bc 	ldr	lr, [r3, #1980]	; 0x7bc
 1000bac:	e7f31051 	ubfx	r1, r1, #0, #20
 1000bb0:	e5841050 	str	r1, [r4, #80]	; 0x50
 1000bb4:	e2922001 	adds	r2, r2, #1
	_FAB_CFG_ACCESS(reg) |= data;
 1000bb8:	e5941050 	ldr	r1, [r4, #80]	; 0x50
 1000bbc:	e0aee005 	adc	lr, lr, r5
 1000bc0:	e3811433 	orr	r1, r1, #855638016	; 0x33000000
 1000bc4:	e3811603 	orr	r1, r1, #3145728	; 0x300000
 1000bc8:	e5841050 	str	r1, [r4, #80]	; 0x50
 1000bcc:	e58327b8 	str	r2, [r3, #1976]	; 0x7b8
 1000bd0:	e583e7bc 	str	lr, [r3, #1980]	; 0x7bc
	g_acq_state.state = ACQSTATE_UNINIT;
 1000bd4:	e5835000 	str	r5, [r3]
	g_acq_state.sub_state = ACQSUBST_NONE;
 1000bd8:	e5835004 	str	r5, [r3, #4]
	XAxiDma_Reset(&g_acq_state.dma);
 1000bdc:	eb001065 	bl	1004d78 <XAxiDma_Reset>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000be0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
 1000be4:	e7f33053 	ubfx	r3, r3, #0, #20
 1000be8:	e5843050 	str	r3, [r4, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1000bec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
 1000bf0:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 1000bf4:	e3833501 	orr	r3, r3, #4194304	; 0x400000
 1000bf8:	e5843050 	str	r3, [r4, #80]	; 0x50
}
 1000bfc:	e8bd8070 	pop	{r4, r5, r6, pc}

01000c00 <_acq_reset_PL_fifo>:
 1000c00:	e3a03000 	mov	r3, #0
{
 1000c04:	e24dd008 	sub	sp, sp, #8
	for(i = 0; i < 20; i++) {
 1000c08:	e1a01003 	mov	r1, r3
 1000c0c:	e3443001 	movt	r3, #16385	; 0x4001
 1000c10:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1000c14:	e3822020 	orr	r2, r2, #32
 1000c18:	e5832050 	str	r2, [r3, #80]	; 0x50
 1000c1c:	e58d1004 	str	r1, [sp, #4]
 1000c20:	e59d3004 	ldr	r3, [sp, #4]
 1000c24:	e3530013 	cmp	r3, #19
 1000c28:	ca000006 	bgt	1000c48 <_acq_reset_PL_fifo+0x48>
		asm __volatile__("nop");
 1000c2c:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 1000c30:	e59d3004 	ldr	r3, [sp, #4]
 1000c34:	e2833001 	add	r3, r3, #1
 1000c38:	e58d3004 	str	r3, [sp, #4]
 1000c3c:	e59d3004 	ldr	r3, [sp, #4]
 1000c40:	e3530013 	cmp	r3, #19
 1000c44:	dafffff8 	ble	1000c2c <_acq_reset_PL_fifo+0x2c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000c48:	e3a03000 	mov	r3, #0
 1000c4c:	e3443001 	movt	r3, #16385	; 0x4001
 1000c50:	e5931050 	ldr	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1000c54:	e1a02003 	mov	r2, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000c58:	e3c11020 	bic	r1, r1, #32
 1000c5c:	e5831050 	str	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1000c60:	e5923050 	ldr	r3, [r2, #80]	; 0x50
	while(fabcfg_test(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET)) ;
 1000c64:	e3130020 	tst	r3, #32
 1000c68:	1afffffc 	bne	1000c60 <_acq_reset_PL_fifo+0x60>
}
 1000c6c:	e28dd008 	add	sp, sp, #8
 1000c70:	e12fff1e 	bx	lr

01000c74 <_acq_reset_trigger>:
	_FAB_CFG_ACCESS(reg) |= data;
 1000c74:	e3a03000 	mov	r3, #0
{
 1000c78:	e24dd008 	sub	sp, sp, #8
	for(i = 0; i < 10; i++) {
 1000c7c:	e1a01003 	mov	r1, r3
 1000c80:	e3443001 	movt	r3, #16385	; 0x4001
 1000c84:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1000c88:	e3822008 	orr	r2, r2, #8
 1000c8c:	e5832050 	str	r2, [r3, #80]	; 0x50
 1000c90:	e58d1004 	str	r1, [sp, #4]
 1000c94:	e59d3004 	ldr	r3, [sp, #4]
 1000c98:	e3530009 	cmp	r3, #9
 1000c9c:	ca000006 	bgt	1000cbc <_acq_reset_trigger+0x48>
		asm __volatile__("nop");
 1000ca0:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 1000ca4:	e59d3004 	ldr	r3, [sp, #4]
 1000ca8:	e2833001 	add	r3, r3, #1
 1000cac:	e58d3004 	str	r3, [sp, #4]
 1000cb0:	e59d3004 	ldr	r3, [sp, #4]
 1000cb4:	e3530009 	cmp	r3, #9
 1000cb8:	dafffff8 	ble	1000ca0 <_acq_reset_trigger+0x2c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000cbc:	e3a03000 	mov	r3, #0
 1000cc0:	e3443001 	movt	r3, #16385	; 0x4001
 1000cc4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1000cc8:	e3c22008 	bic	r2, r2, #8
 1000ccc:	e5832050 	str	r2, [r3, #80]	; 0x50
}
 1000cd0:	e28dd008 	add	sp, sp, #8
 1000cd4:	e12fff1e 	bx	lr

01000cd8 <_acq_wait_for_ndone>:
	res = _FAB_CFG_ACCESS(reg);
 1000cd8:	e3a02000 	mov	r2, #0
 1000cdc:	e3442001 	movt	r2, #16385	; 0x4001
 1000ce0:	e5923058 	ldr	r3, [r2, #88]	; 0x58
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) ;
 1000ce4:	e3130001 	tst	r3, #1
 1000ce8:	1afffffc 	bne	1000ce0 <_acq_wait_for_ndone+0x8>
 1000cec:	e12fff1e 	bx	lr

01000cf0 <_acq_core_dma_start>:
{
 1000cf0:	e92d4010 	push	{r4, lr}
	error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)buff_ptr, buff_sz, XAXIDMA_DEVICE_TO_DMA);
 1000cf4:	e1a02001 	mov	r2, r1
 1000cf8:	e3a03001 	mov	r3, #1
 1000cfc:	e1a01000 	mov	r1, r0
 1000d00:	e59f0024 	ldr	r0, [pc, #36]	; 1000d2c <_acq_core_dma_start+0x3c>
 1000d04:	eb0011f7 	bl	10054e8 <XAxiDma_SimpleTransfer>
	if(error != XST_SUCCESS) {
 1000d08:	e3500000 	cmp	r0, #0
 1000d0c:	08bd8010 	popeq	{r4, pc}
		d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1000d10:	e3061da4 	movw	r1, #28068	; 0x6da4
 1000d14:	e1a02000 	mov	r2, r0
 1000d18:	e3401105 	movt	r1, #261	; 0x105
 1000d1c:	e3a00004 	mov	r0, #4
 1000d20:	eb000bb2 	bl	1003bf0 <d_printf>
		return ACQRES_DMA_FAIL;
 1000d24:	e3e00004 	mvn	r0, #4
	}

	return ACQRES_OK;
}
 1000d28:	e8bd8010 	pop	{r4, pc}
 1000d2c:	011612e8 	.word	0x011612e8

01000d30 <acq_write_training>:
void acq_write_training()
{
	int i;
	uint32_t train_regA = 0, train_regB = 0;

	d_printf(D_INFO, "acquire: start loading train values");
 1000d30:	e3061e30 	movw	r1, #28208	; 0x6e30
{
 1000d34:	e92d4070 	push	{r4, r5, r6, lr}
	d_printf(D_INFO, "acquire: start loading train values");
 1000d38:	e3a00002 	mov	r0, #2
 1000d3c:	e3401105 	movt	r1, #261	; 0x105
 1000d40:	eb000baa 	bl	1003bf0 <d_printf>

	// 5 LSBs from each line train value are stored into A and B registers
	for(i = 0; i < 4; i++) {
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000d44:	e301c2e0 	movw	ip, #4832	; 0x12e0
	_FAB_CFG_ACCESS(reg) = data;
 1000d48:	e3a00000 	mov	r0, #0
 1000d4c:	e340c116 	movt	ip, #278	; 0x116
 1000d50:	e3440001 	movt	r0, #16385	; 0x4001
 1000d54:	e5dc3879 	ldrb	r3, [ip, #2169]	; 0x879
	res = _FAB_CFG_ACCESS(reg);
 1000d58:	e1a02000 	mov	r2, r0
	}

	for(i = 0; i < 4; i++) {
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000d5c:	e5dc187d 	ldrb	r1, [ip, #2173]	; 0x87d
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000d60:	e5dc4878 	ldrb	r4, [ip, #2168]	; 0x878
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000d64:	e5dce87c 	ldrb	lr, [ip, #2172]	; 0x87c
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000d68:	e203301f 	and	r3, r3, #31
 1000d6c:	e1a03583 	lsl	r3, r3, #11
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000d70:	e201101f 	and	r1, r1, #31
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000d74:	e5dc687b 	ldrb	r6, [ip, #2171]	; 0x87b
 1000d78:	e204401f 	and	r4, r4, #31
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000d7c:	e1a01581 	lsl	r1, r1, #11
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000d80:	e1833184 	orr	r3, r3, r4, lsl #3
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000d84:	e5dc487e 	ldrb	r4, [ip, #2174]	; 0x87e
 1000d88:	e20ee01f 	and	lr, lr, #31
 1000d8c:	e5dc587f 	ldrb	r5, [ip, #2175]	; 0x87f
 1000d90:	e181118e 	orr	r1, r1, lr, lsl #3
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000d94:	e5dce87a 	ldrb	lr, [ip, #2170]	; 0x87a
 1000d98:	e1833d86 	orr	r3, r3, r6, lsl #27
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000d9c:	e204401f 	and	r4, r4, #31
 1000da0:	e1811984 	orr	r1, r1, r4, lsl #19
		train_regA |= (g_acq_state.line_train[i + 0] & 31) << (3 + (8 * i));
 1000da4:	e20ec01f 	and	ip, lr, #31
 1000da8:	e183398c 	orr	r3, r3, ip, lsl #19
		train_regB |= (g_acq_state.line_train[i + 4] & 31) << (3 + (8 * i));
 1000dac:	e1811d85 	orr	r1, r1, r5, lsl #27
	}

	fabcfg_write(FAB_CFG_ACQ_TRAIN_A, train_regA | ACQ_TRAIN_A_LOAD);
 1000db0:	e3833001 	orr	r3, r3, #1
	_FAB_CFG_ACCESS(reg) = data;
 1000db4:	e5803064 	str	r3, [r0, #100]	; 0x64
 1000db8:	e5801068 	str	r1, [r0, #104]	; 0x68
	res = _FAB_CFG_ACCESS(reg);
 1000dbc:	e5923060 	ldr	r3, [r2, #96]	; 0x60
	fabcfg_write(FAB_CFG_ACQ_TRAIN_B, train_regB);

	// Verify "DL" bit is clear
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_C, ACQ_STATUS_C_DELAY_LOADED)) ;
 1000dc0:	e3130a02 	tst	r3, #8192	; 0x2000
 1000dc4:	1afffffc 	bne	1000dbc <acq_write_training+0x8c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1000dc8:	e5923064 	ldr	r3, [r2, #100]	; 0x64
	while(!fabcfg_test(FAB_CFG_ACQ_STATUS_C, ACQ_STATUS_C_DELAY_LOADED)) {
		//outbyte('C');
	}
#endif

	d_printf(D_INFO, "acquire: training values loaded");
 1000dcc:	e3061e54 	movw	r1, #28244	; 0x6e54
 1000dd0:	e3401105 	movt	r1, #261	; 0x105
 1000dd4:	e3a00002 	mov	r0, #2
}
 1000dd8:	e8bd4070 	pop	{r4, r5, r6, lr}
 1000ddc:	e3c33001 	bic	r3, r3, #1
 1000de0:	e5823064 	str	r3, [r2, #100]	; 0x64
	d_printf(D_INFO, "acquire: training values loaded");
 1000de4:	ea000b81 	b	1003bf0 <d_printf>

01000de8 <acq_init>:
{
 1000de8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	g_acq_state.state = ACQSTATE_UNINIT;
 1000dec:	e30142e0 	movw	r4, #4832	; 0x12e0
 1000df0:	e3404116 	movt	r4, #278	; 0x116
 1000df4:	e3a02000 	mov	r2, #0
 1000df8:	e1a03004 	mov	r3, r4
	g_acq_state.acq_first = NULL;
 1000dfc:	e3a06000 	mov	r6, #0
 1000e00:	e3a07000 	mov	r7, #0
	g_acq_state.state = ACQSTATE_UNINIT;
 1000e04:	e4832870 	str	r2, [r3], #2160	; 0x870
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 1000e08:	e1a00002 	mov	r0, r2
	g_acq_state.acq_first = NULL;
 1000e0c:	e1c360f0 	strd	r6, [r3]
	g_acq_state.last_debug_timer = 0;
 1000e10:	e2842b02 	add	r2, r4, #2048	; 0x800
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 1000e14:	e2845008 	add	r5, r4, #8
	g_acq_state.last_debug_timer = 0;
 1000e18:	e1c260f0 	strd	r6, [r2]
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 1000e1c:	eb00121c 	bl	1005694 <XAxiDma_LookupConfig>
 1000e20:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 1000e24:	e1a00005 	mov	r0, r5
 1000e28:	e1a01003 	mov	r1, r3
	g_acq_state.dma_config = XAxiDma_LookupConfig(ACQ_DMA_ENGINE);
 1000e2c:	e5843758 	str	r3, [r4, #1880]	; 0x758
	error = XAxiDma_CfgInitialize(&g_acq_state.dma, g_acq_state.dma_config);
 1000e30:	eb001028 	bl	1004ed8 <XAxiDma_CfgInitialize>
	if(error != XST_SUCCESS) {
 1000e34:	e3500000 	cmp	r0, #0
 1000e38:	1a000046 	bne	1000f58 <acq_init+0x170>
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 1000e3c:	e5943758 	ldr	r3, [r4, #1880]	; 0x758
 1000e40:	e3061eb0 	movw	r1, #28336	; 0x6eb0
 1000e44:	e3a00002 	mov	r0, #2
 1000e48:	e3401105 	movt	r1, #261	; 0x105
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 1000e4c:	e1a04005 	mov	r4, r5
	d_printf(D_INFO, "acquire: DMA initialised @ 0x%08x", g_acq_state.dma_config->BaseAddr);
 1000e50:	e5932004 	ldr	r2, [r3, #4]
 1000e54:	eb000b65 	bl	1003bf0 <d_printf>
	XAxiDma_Reset(&g_acq_state.dma);
 1000e58:	e1a00005 	mov	r0, r5
 1000e5c:	eb000fc5 	bl	1004d78 <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&g_acq_state.dma)) ;
 1000e60:	e1a00004 	mov	r0, r4
 1000e64:	eb001008 	bl	1004e8c <XAxiDma_ResetIsDone>
 1000e68:	e3500000 	cmp	r0, #0
 1000e6c:	0afffffb 	beq	1000e60 <acq_init+0x78>
	d_printf(D_INFO, "acquire: DMA reset OK");
 1000e70:	e3061ed4 	movw	r1, #28372	; 0x6ed4
 1000e74:	e3a00002 	mov	r0, #2
 1000e78:	e3401105 	movt	r1, #261	; 0x105
 1000e7c:	eb000b5b 	bl	1003bf0 <d_printf>
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ, ACQ_DMA_RX_IRQ_PRIO, ACQ_DMA_RX_IRQ_TRIG);
 1000e80:	e3010b60 	movw	r0, #7008	; 0x1b60
 1000e84:	e3a03003 	mov	r3, #3
 1000e88:	e3400116 	movt	r0, #278	; 0x116
 1000e8c:	e3a02040 	mov	r2, #64	; 0x40
 1000e90:	e3a0103d 	mov	r1, #61	; 0x3d
 1000e94:	eb001deb 	bl	1008648 <XScuGic_SetPriorityTriggerType>
	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ, \
 1000e98:	e3012e28 	movw	r2, #7720	; 0x1e28
 1000e9c:	e3010b60 	movw	r0, #7008	; 0x1b60
 1000ea0:	e3402100 	movt	r2, #256	; 0x100
 1000ea4:	e3400116 	movt	r0, #278	; 0x116
 1000ea8:	e59f30fc 	ldr	r3, [pc, #252]	; 1000fac <acq_init+0x1c4>
 1000eac:	e3a0103d 	mov	r1, #61	; 0x3d
 1000eb0:	eb001d43 	bl	10083c4 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 1000eb4:	e2504000 	subs	r4, r0, #0
 1000eb8:	1a000034 	bne	1000f90 <acq_init+0x1a8>
	d_printf(D_INFO, "acquire: SCUGIC connected for DMA IRQ");
 1000ebc:	e3061f2c 	movw	r1, #28460	; 0x6f2c
 1000ec0:	e3a00002 	mov	r0, #2
 1000ec4:	e3401105 	movt	r1, #261	; 0x105
 1000ec8:	eb000b48 	bl	1003bf0 <d_printf>
	XScuGic_SetPriorityTriggerType(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ, ACQ_FIFO_STALL_IRQ_PRIO, \
 1000ecc:	e3010b60 	movw	r0, #7008	; 0x1b60
 1000ed0:	e3a03003 	mov	r3, #3
 1000ed4:	e3400116 	movt	r0, #278	; 0x116
 1000ed8:	e3a02060 	mov	r2, #96	; 0x60
 1000edc:	e3a0103e 	mov	r1, #62	; 0x3e
 1000ee0:	eb001dd8 	bl	1008648 <XScuGic_SetPriorityTriggerType>
	error = XScuGic_Connect(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ, \
 1000ee4:	e30029c0 	movw	r2, #2496	; 0x9c0
 1000ee8:	e3010b60 	movw	r0, #7008	; 0x1b60
 1000eec:	e1a03004 	mov	r3, r4
 1000ef0:	e3402100 	movt	r2, #256	; 0x100
 1000ef4:	e3400116 	movt	r0, #278	; 0x116
 1000ef8:	e3a0103e 	mov	r1, #62	; 0x3e
 1000efc:	eb001d30 	bl	10083c4 <XScuGic_Connect>
	if(error != XST_SUCCESS) {
 1000f00:	e2504000 	subs	r4, r0, #0
 1000f04:	1a00001a 	bne	1000f74 <acq_init+0x18c>
	d_printf(D_INFO, "acquire: SCUGIC connected for FIFO stall IRQ");
 1000f08:	e3061f94 	movw	r1, #28564	; 0x6f94
 1000f0c:	e3a00002 	mov	r0, #2
 1000f10:	e3401105 	movt	r1, #261	; 0x105
 1000f14:	eb000b35 	bl	1003bf0 <d_printf>
	XScuGic_Enable(&g_hal.xscu_gic, ACQ_DMA_RX_IRQ);
 1000f18:	e3010b60 	movw	r0, #7008	; 0x1b60
 1000f1c:	e3a0103d 	mov	r1, #61	; 0x3d
 1000f20:	e3400116 	movt	r0, #278	; 0x116
 1000f24:	eb001e7d 	bl	1008920 <XScuGic_Enable>
	XScuGic_Enable(&g_hal.xscu_gic, ACQ_FIFO_STALL_IRQ);
 1000f28:	e3010b60 	movw	r0, #7008	; 0x1b60
 1000f2c:	e3a0103e 	mov	r1, #62	; 0x3e
 1000f30:	e3400116 	movt	r0, #278	; 0x116
 1000f34:	eb001e79 	bl	1008920 <XScuGic_Enable>
	d_printf(D_INFO, "acquire: SCUGIC configured");
 1000f38:	e3061fc4 	movw	r1, #28612	; 0x6fc4
 1000f3c:	e3a00002 	mov	r0, #2
 1000f40:	e3401105 	movt	r1, #261	; 0x105
 1000f44:	eb000b29 	bl	1003bf0 <d_printf>
	for(i = 0; i < 8; i++) {
 1000f48:	e5854870 	str	r4, [r5, #2160]	; 0x870
 1000f4c:	e5854874 	str	r4, [r5, #2164]	; 0x874
}
 1000f50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	acq_write_training();
 1000f54:	eaffff75 	b	1000d30 <acq_write_training>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA engine! (error=%d)", error);
 1000f58:	e3061e74 	movw	r1, #28276	; 0x6e74
 1000f5c:	e1a02000 	mov	r2, r0
 1000f60:	e3401105 	movt	r1, #261	; 0x105
 1000f64:	e3a00004 	mov	r0, #4
 1000f68:	eb000b20 	bl	1003bf0 <d_printf>
		exit(-1);
 1000f6c:	e3e00000 	mvn	r0, #0
 1000f70:	fa0028ee 	blx	100b330 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise FIFO stall IRQ! (error=%d)", error);
 1000f74:	e3061f54 	movw	r1, #28500	; 0x6f54
 1000f78:	e3a00004 	mov	r0, #4
 1000f7c:	e1a02004 	mov	r2, r4
 1000f80:	e3401105 	movt	r1, #261	; 0x105
 1000f84:	eb000b19 	bl	1003bf0 <d_printf>
		exit(-1);
 1000f88:	e3e00000 	mvn	r0, #0
 1000f8c:	fa0028e7 	blx	100b330 <exit>
		d_printf(D_ERROR, "acquire: fatal: unable to initialise DMA-IRQ engine! (error=%d)", error);
 1000f90:	e3061eec 	movw	r1, #28396	; 0x6eec
 1000f94:	e3a00004 	mov	r0, #4
 1000f98:	e1a02004 	mov	r2, r4
 1000f9c:	e3401105 	movt	r1, #261	; 0x105
 1000fa0:	eb000b12 	bl	1003bf0 <d_printf>
		exit(-1);
 1000fa4:	e3e00000 	mvn	r0, #0
 1000fa8:	fa0028e0 	blx	100b330 <exit>
 1000fac:	01161368 	.word	0x01161368

01000fb0 <acq_get_next_alloc>:
 *
 * If this fails (e.g. no memory) ACQRES_MALLOC_FAIL is returned and values in `next`
 * are left unchanged; otherwise ACQRES_OK is returned.
 */
int acq_get_next_alloc(struct acq_buffer_t *next)
{
 1000fb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	} else {
		next->buff_acq = work;
	}
#endif

	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000fb4:	e30152e0 	movw	r5, #4832	; 0x12e0
 1000fb8:	e3405116 	movt	r5, #278	; 0x116
{
 1000fbc:	e1a04000 	mov	r4, r0
	//d_printf(D_ERROR, "buf_sz: req:%d actual:%d (align_error: %d)", g_acq_state.total_buffsz, buf_sz, g_acq_state.total_buffsz % ACQ_BUFFER_ALIGN);

	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000fc0:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1000fc4:	e5956768 	ldr	r6, [r5, #1896]	; 0x768
 1000fc8:	e0866000 	add	r6, r6, r0
 1000fcc:	e3c6601f 	bic	r6, r6, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1000fd0:	e1a01006 	mov	r1, r6
 1000fd4:	fa002b75 	blx	100bdb0 <memalign>

	if(work == NULL) {
 1000fd8:	e250e000 	subs	lr, r0, #0
 1000fdc:	0a000013 	beq	1001030 <acq_get_next_alloc+0x80>
	next->buff_alloc = work;
	next->buff_acq = work;

	//d_printf(D_EXINFO, "acquire: next = 0x%08x, next->buff_acq = 0x%08x, work.buff_alloc [malloc] = 0x%08x", next, next->buff_acq, work);

	g_acq_state.stats.num_alloc_total++;
 1000fe0:	e59537e0 	ldr	r3, [r5, #2016]	; 0x7e0
	next->idx = 0;
 1000fe4:	e3a01000 	mov	r1, #0
	g_acq_state.stats.num_alloc_total++;
 1000fe8:	e595c7e4 	ldr	ip, [r5, #2020]	; 0x7e4

	return ACQRES_OK;
 1000fec:	e1a00001 	mov	r0, r1
	next->pre_sz = g_acq_state.pre_buffsz;
 1000ff0:	e5956760 	ldr	r6, [r5, #1888]	; 0x760
	next->flags = ACQBUF_FLAG_ALLOC;
 1000ff4:	e3a07080 	mov	r7, #128	; 0x80
	g_acq_state.stats.num_alloc_total++;
 1000ff8:	e2933001 	adds	r3, r3, #1
	next->idx = 0;
 1000ffc:	e5841000 	str	r1, [r4]
	next->trigger_at = 0;
 1001000:	e584100c 	str	r1, [r4, #12]
	g_acq_state.stats.num_alloc_total++;
 1001004:	e0acc001 	adc	ip, ip, r1
	next->next = NULL;
 1001008:	e584101c 	str	r1, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 100100c:	e5951764 	ldr	r1, [r5, #1892]	; 0x764
	next->flags = ACQBUF_FLAG_ALLOC;
 1001010:	e1c471b0 	strh	r7, [r4, #16]
	next->pre_sz = g_acq_state.pre_buffsz;
 1001014:	e5846014 	str	r6, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 1001018:	e5841018 	str	r1, [r4, #24]
	next->buff_alloc = work;
 100101c:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 1001020:	e584e008 	str	lr, [r4, #8]
	g_acq_state.stats.num_alloc_total++;
 1001024:	e58537e0 	str	r3, [r5, #2016]	; 0x7e0
 1001028:	e585c7e4 	str	ip, [r5, #2020]	; 0x7e4
}
 100102c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1001030:	e3061fe0 	movw	r1, #28640	; 0x6fe0
 1001034:	e1a02006 	mov	r2, r6
 1001038:	e3401105 	movt	r1, #261	; 0x105
 100103c:	e3a00004 	mov	r0, #4
 1001040:	eb000aea 	bl	1003bf0 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1001044:	e59537d8 	ldr	r3, [r5, #2008]	; 0x7d8
		return ACQRES_MALLOC_FAIL;
 1001048:	e3e00000 	mvn	r0, #0
		g_acq_state.stats.num_alloc_err_total++;
 100104c:	e59527dc 	ldr	r2, [r5, #2012]	; 0x7dc
 1001050:	e2855e7e 	add	r5, r5, #2016	; 0x7e0
 1001054:	e2933001 	adds	r3, r3, #1
 1001058:	e2a22000 	adc	r2, r2, #0
 100105c:	e5053008 	str	r3, [r5, #-8]
 1001060:	e5052004 	str	r2, [r5, #-4]
		return ACQRES_MALLOC_FAIL;
 1001064:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01001068 <acq_append_next_alloc>:
/*
 * Append a new acquisition buffer to the linked list and set the current pointer to reference
 * this acquisition pointer.
 */
int acq_append_next_alloc()
{
 1001068:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct acq_buffer_t *next;
	int res;

	next = malloc(sizeof(struct acq_buffer_t));
 100106c:	e3a00020 	mov	r0, #32
 1001070:	fa002b90 	blx	100beb8 <malloc>

	/*
	 * Allocate the struct that stores the buffer info first.  This is
	 * just a few bytes, but could fail if we are near the memory limit.
	 */
	if(next == 0) {
 1001074:	e2504000 	subs	r4, r0, #0
 1001078:	0a000039 	beq	1001164 <acq_append_next_alloc+0xfc>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100107c:	e30152e0 	movw	r5, #4832	; 0x12e0
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1001080:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1001084:	e3405116 	movt	r5, #278	; 0x116
		g_acq_state.stats.num_alloc_err_total++;
		return ACQRES_MALLOC_FAIL;
	}

	// ?
	next->next = NULL;
 1001088:	e3a06000 	mov	r6, #0
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100108c:	e5957768 	ldr	r7, [r5, #1896]	; 0x768
	next->flags = ACQBUF_FLAG_ALLOC;
 1001090:	e3a08080 	mov	r8, #128	; 0x80
	next->next = NULL;
 1001094:	e584601c 	str	r6, [r4, #28]
	next->trigger_at = 0;
 1001098:	e584600c 	str	r6, [r4, #12]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 100109c:	e0877000 	add	r7, r7, r0
	next->flags = ACQBUF_FLAG_ALLOC;
 10010a0:	e1c481b0 	strh	r8, [r4, #16]
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 10010a4:	e3c7701f 	bic	r7, r7, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 10010a8:	e1a01007 	mov	r1, r7
 10010ac:	fa002b3f 	blx	100bdb0 <memalign>
	if(work == NULL) {
 10010b0:	e250e000 	subs	lr, r0, #0
 10010b4:	0a000017 	beq	1001118 <acq_append_next_alloc+0xb0>
	/*
	 * Set current acquisition next pointer to this structure, increase the index
	 * to be one higher than the last index then move the current pointer to reference
	 * this structure.
	 */
	g_acq_state.acq_current->next = next;
 10010b8:	e5957874 	ldr	r7, [r5, #2164]	; 0x874
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
	g_acq_state.acq_current = next;
	g_acq_state.stats.num_alloc_total++;

	return ACQRES_OK;
 10010bc:	e1a00006 	mov	r0, r6
	g_acq_state.stats.num_alloc_total++;
 10010c0:	e59517e0 	ldr	r1, [r5, #2016]	; 0x7e0
	next->idx = 0;
 10010c4:	e5846000 	str	r6, [r4]
	g_acq_state.stats.num_alloc_total++;
 10010c8:	e59527e4 	ldr	r2, [r5, #2020]	; 0x7e4
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 10010cc:	e5973000 	ldr	r3, [r7]
	g_acq_state.stats.num_alloc_total++;
 10010d0:	e2911002 	adds	r1, r1, #2
	next->trigger_at = 0;
 10010d4:	e584600c 	str	r6, [r4, #12]
	next->flags = ACQBUF_FLAG_ALLOC;
 10010d8:	e1c481b0 	strh	r8, [r4, #16]
	g_acq_state.stats.num_alloc_total++;
 10010dc:	e2a22000 	adc	r2, r2, #0
	next->pre_sz = g_acq_state.pre_buffsz;
 10010e0:	e5958760 	ldr	r8, [r5, #1888]	; 0x760
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 10010e4:	e2833001 	add	r3, r3, #1
	next->next = NULL;
 10010e8:	e584601c 	str	r6, [r4, #28]
	next->post_sz = g_acq_state.post_buffsz;
 10010ec:	e5956764 	ldr	r6, [r5, #1892]	; 0x764
	next->buff_alloc = work;
 10010f0:	e584e004 	str	lr, [r4, #4]
	next->buff_acq = work;
 10010f4:	e584e008 	str	lr, [r4, #8]
	next->pre_sz = g_acq_state.pre_buffsz;
 10010f8:	e5848014 	str	r8, [r4, #20]
	next->post_sz = g_acq_state.post_buffsz;
 10010fc:	e5846018 	str	r6, [r4, #24]
	g_acq_state.acq_current->next = next;
 1001100:	e587401c 	str	r4, [r7, #28]
	g_acq_state.stats.num_alloc_total++;
 1001104:	e58517e0 	str	r1, [r5, #2016]	; 0x7e0
 1001108:	e58527e4 	str	r2, [r5, #2020]	; 0x7e4
	g_acq_state.acq_current->next->idx = g_acq_state.acq_current->idx + 1;
 100110c:	e5843000 	str	r3, [r4]
	g_acq_state.acq_current = next;
 1001110:	e5854874 	str	r4, [r5, #2164]	; 0x874
}
 1001114:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1001118:	e3061fe0 	movw	r1, #28640	; 0x6fe0
 100111c:	e1a02007 	mov	r2, r7
 1001120:	e3401105 	movt	r1, #261	; 0x105
 1001124:	e3a00004 	mov	r0, #4
 1001128:	eb000ab0 	bl	1003bf0 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 100112c:	e59537d8 	ldr	r3, [r5, #2008]	; 0x7d8
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1001130:	e3071054 	movw	r1, #28756	; 0x7054
		g_acq_state.stats.num_alloc_err_total++;
 1001134:	e595c7dc 	ldr	ip, [r5, #2012]	; 0x7dc
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1001138:	e3401105 	movt	r1, #261	; 0x105
 100113c:	e3e02000 	mvn	r2, #0
 1001140:	e3a00004 	mov	r0, #4
		g_acq_state.stats.num_alloc_err_total++;
 1001144:	e2933001 	adds	r3, r3, #1
 1001148:	e2855e7e 	add	r5, r5, #2016	; 0x7e0
 100114c:	e0acc006 	adc	ip, ip, r6
 1001150:	e5053008 	str	r3, [r5, #-8]
 1001154:	e505c004 	str	ip, [r5, #-4]
		d_printf(D_ERROR, "acq_append_next_alloc: acq_get_next_alloc failed: %d", res);
 1001158:	eb000aa4 	bl	1003bf0 <d_printf>
		return ACQRES_MALLOC_FAIL;
 100115c:	e3e00000 	mvn	r0, #0
		return res;
 1001160:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for alloc structure", sizeof(struct acq_buffer_t));
 1001164:	e3071018 	movw	r1, #28696	; 0x7018
 1001168:	e3a02020 	mov	r2, #32
 100116c:	e3401105 	movt	r1, #261	; 0x105
 1001170:	e3a00004 	mov	r0, #4
 1001174:	eb000a9d 	bl	1003bf0 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1001178:	e59f201c 	ldr	r2, [pc, #28]	; 100119c <acq_append_next_alloc+0x134>
 100117c:	e3e00000 	mvn	r0, #0
 1001180:	e5123008 	ldr	r3, [r2, #-8]
 1001184:	e5121004 	ldr	r1, [r2, #-4]
 1001188:	e2933001 	adds	r3, r3, #1
 100118c:	e2a11000 	adc	r1, r1, #0
 1001190:	e5023008 	str	r3, [r2, #-8]
 1001194:	e5021004 	str	r1, [r2, #-4]
		return ACQRES_MALLOC_FAIL;
 1001198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 100119c:	01161ac0 	.word	0x01161ac0

010011a0 <acq_free_all_alloc>:
/*
 * Free all acquisition buffers safely.
 */
void acq_free_all_alloc()
{
	struct acq_buffer_t *next = g_acq_state.acq_first;
 10011a0:	e30132e0 	movw	r3, #4832	; 0x12e0
{
 10011a4:	e92d4070 	push	{r4, r5, r6, lr}
	struct acq_buffer_t *next = g_acq_state.acq_first;
 10011a8:	e3403116 	movt	r3, #278	; 0x116
 10011ac:	e5934870 	ldr	r4, [r3, #2160]	; 0x870
	/*
	 * Iterate through the list of allocations starting at the first allocation,
	 * copy the next pointer, free the current allocation and repeat until we reach
	 * a NULL next pointer.
	 */
	while(next != NULL) {
 10011b0:	e3540000 	cmp	r4, #0
 10011b4:	0a000006 	beq	10011d4 <acq_free_all_alloc+0x34>
		next_next = next->next;
 10011b8:	e594501c 	ldr	r5, [r4, #28]

		// Free the buffer *and* the acquisition structure
		free(next->buff_alloc);
 10011bc:	e5940004 	ldr	r0, [r4, #4]
 10011c0:	fa002b40 	blx	100bec8 <free>
		free(next);
 10011c4:	e1a00004 	mov	r0, r4
 10011c8:	fa002b3e 	blx	100bec8 <free>
	while(next != NULL) {
 10011cc:	e2554000 	subs	r4, r5, #0
 10011d0:	1afffff8 	bne	10011b8 <acq_free_all_alloc+0x18>

		next = next_next;
	}

	g_acq_state.acq_first = NULL;
 10011d4:	e59f300c 	ldr	r3, [pc, #12]	; 10011e8 <acq_free_all_alloc+0x48>
 10011d8:	e3a00000 	mov	r0, #0
 10011dc:	e3a01000 	mov	r1, #0
 10011e0:	e1c300f0 	strd	r0, [r3]
	g_acq_state.acq_current = NULL;
}
 10011e4:	e8bd8070 	pop	{r4, r5, r6, pc}
 10011e8:	01161b50 	.word	0x01161b50

010011ec <acq_prepare_triggered>:
	uint32_t align_mask;
	uint32_t demux;
	int i, error = 0;

	// How can we acquire an empty buffer of no waveforms?
	if(num_acq == 0 || total_sz == 0) {
 10011ec:	e16fcf12 	clz	ip, r2
 10011f0:	e3530000 	cmp	r3, #0
 10011f4:	e1a0c2ac 	lsr	ip, ip, #5
 10011f8:	03a0c001 	moveq	ip, #1
{
 10011fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if(num_acq == 0 || total_sz == 0) {
 1001200:	e35c0000 	cmp	ip, #0
{
 1001204:	e24dd010 	sub	sp, sp, #16
	if(num_acq == 0 || total_sz == 0) {
 1001208:	1a0000e4 	bne	10015a0 <acq_prepare_triggered+0x3b4>
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 8-bit, 12-bit or 14-bit set
	if(!(mode_flags & (ACQ_MODE_8BIT | ACQ_MODE_12BIT | ACQ_MODE_14BIT))) {
 100120c:	e3100007 	tst	r0, #7
 1001210:	e1a08000 	mov	r8, r0
 1001214:	0a0000e1 	beq	10015a0 <acq_prepare_triggered+0x3b4>
		return ACQRES_PARAM_FAIL;
	}

	// Must have at least one of 1ch, 2ch or 4ch set
	if(!(mode_flags & (ACQ_MODE_1CH | ACQ_MODE_2CH | ACQ_MODE_4CH))) {
 1001218:	e31000e0 	tst	r0, #224	; 0xe0
 100121c:	0a0000df 	beq	10015a0 <acq_prepare_triggered+0x3b4>
		return ACQRES_PARAM_FAIL;
	}

	// Must not have "CONTINUOUS" or "TRIGGERED" set
	if(mode_flags & (ACQ_MODE_TRIGGERED | ACQ_MODE_CONTINUOUS)) {
 1001220:	e3100c03 	tst	r0, #768	; 0x300
 1001224:	1a0000dd 	bne	10015a0 <acq_prepare_triggered+0x3b4>

	/*
	 * Compute the pre and post trigger buffer sizes, and verify that everything is
	 * lined up nicely along the required sample boundaries.
	 */
	if(bias_point == 0) {
 1001228:	e3510000 	cmp	r1, #0
 100122c:	e1a00002 	mov	r0, r2
		pre_sz = total_sz / 2;
 1001230:	01a020a2 	lsreq	r2, r2, #1
 1001234:	e1a07003 	mov	r7, r3
		post_sz = total_sz / 2;
 1001238:	01a03002 	moveq	r3, r2
	if(bias_point == 0) {
 100123c:	0a000003 	beq	1001250 <acq_prepare_triggered+0x64>
	} else if(bias_point < 0) {
 1001240:	e1a03001 	mov	r3, r1
		pre_sz = -bias_point;
 1001244:	b2612000 	rsblt	r2, r1, #0
		post_sz = total_sz - pre_sz;
 1001248:	b0813000 	addlt	r3, r1, r0
	} else if(bias_point > 0) {
		post_sz = bias_point;
		pre_sz = total_sz - post_sz;
 100124c:	a0402003 	subge	r2, r0, r3
	}

	error = 0;

	if(mode_flags & ACQ_MODE_8BIT) {
 1001250:	e2189001 	ands	r9, r8, #1
 1001254:	1a000069 	bne	1001400 <acq_prepare_triggered+0x214>
		if(pre_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
			error = 1;
		}
	}

	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001258:	e3180006 	tst	r8, #6
	error = 0;
 100125c:	e1a01009 	mov	r1, r9
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001260:	1a00006d 	bne	100141c <acq_prepare_triggered+0x230>
		if(pre_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
			error = 1;
		}
	}

	if(pre_sz < ACQ_MIN_PREPOST_SIZE || post_sz < ACQ_MIN_PREPOST_SIZE) {
 1001264:	e353001f 	cmp	r3, #31
 1001268:	8352001f 	cmphi	r2, #31
 100126c:	93a01001 	movls	r1, #1
 1001270:	83a01000 	movhi	r1, #0
		error = 1;
	}

	if(error) {
 1001274:	e19c1001 	orrs	r1, ip, r1
 1001278:	1a0000a9 	bne	1001524 <acq_prepare_triggered+0x338>
		total_sz *= 4;
		pre_sampct = pre_sz;
		post_sampct = post_sz;
		post_sz *= 4;
		pre_sz *= 4;
	} else if(mode_flags & (ACQ_MODE_8BIT)) {
 100127c:	e3590000 	cmp	r9, #0
		// 8 samples per readout (64-bit)
		total_sz *= 8;
 1001280:	11a00180 	lslne	r0, r0, #3
		pre_sampct = pre_sz;
		post_sampct = post_sz;
		post_sz *= 8;
 1001284:	11a0c183 	lslne	ip, r3, #3
		pre_sz *= 8;
 1001288:	11a0e182 	lslne	lr, r2, #3
 100128c:	01a0c003 	moveq	ip, r3
 1001290:	01a0e002 	moveq	lr, r2
	uint32_t pre_sz = 0, post_sz = 0, pre_sampct = 0, post_sampct = 0;
 1001294:	01a03009 	moveq	r3, r9
 1001298:	01a02009 	moveq	r2, r9
	/*
	 * Ensure that the total acquisition size doesn't exceed the available memory.  If
	 * that's OK, then free any existing buffers and allocate the memory blocks.  Include an
	 * allocation penalty in our size calculation.
	 */
	total_acq_sz = (total_sz + ACQ_BUFFER_ALIGN) * num_acq;
 100129c:	e2801020 	add	r1, r0, #32
	g_acq_state.pre_buffsz = pre_sz;
 10012a0:	e30162e0 	movw	r6, #4832	; 0x12e0
	total_acq_sz = (total_sz + ACQ_BUFFER_ALIGN) * num_acq;
 10012a4:	e0010197 	mul	r1, r7, r1
	g_acq_state.pre_buffsz = pre_sz;
 10012a8:	e3406116 	movt	r6, #278	; 0x116
 10012ac:	e586e760 	str	lr, [r6, #1888]	; 0x760
	g_acq_state.post_buffsz = post_sz;
 10012b0:	e586c764 	str	ip, [r6, #1892]	; 0x764
	g_acq_state.pre_sampct = pre_sampct;
 10012b4:	e5862778 	str	r2, [r6, #1912]	; 0x778

	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 10012b8:	e3510303 	cmp	r1, #201326592	; 0xc000000
	g_acq_state.post_sampct = post_sampct;
 10012bc:	e586377c 	str	r3, [r6, #1916]	; 0x77c
	g_acq_state.total_buffsz = total_sz;
 10012c0:	e5860768 	str	r0, [r6, #1896]	; 0x768
	if(total_acq_sz > ACQ_TOTAL_MEMORY_AVAIL) {
 10012c4:	8a0000b7 	bhi	10015a8 <acq_prepare_triggered+0x3bc>
	struct acq_buffer_t *next = g_acq_state.acq_first;
 10012c8:	e5964870 	ldr	r4, [r6, #2160]	; 0x870
		return ACQRES_TOTAL_MALLOC_FAIL;
	}

	g_acq_state.state = ACQSTATE_UNINIT;
 10012cc:	e3a03000 	mov	r3, #0
 10012d0:	e5863000 	str	r3, [r6]
	while(next != NULL) {
 10012d4:	e1540003 	cmp	r4, r3
 10012d8:	0a000006 	beq	10012f8 <acq_prepare_triggered+0x10c>
		next_next = next->next;
 10012dc:	e594501c 	ldr	r5, [r4, #28]
		free(next->buff_alloc);
 10012e0:	e5940004 	ldr	r0, [r4, #4]
 10012e4:	fa002af7 	blx	100bec8 <free>
		free(next);
 10012e8:	e1a00004 	mov	r0, r4
 10012ec:	fa002af5 	blx	100bec8 <free>
	while(next != NULL) {
 10012f0:	e2554000 	subs	r4, r5, #0
 10012f4:	1afffff8 	bne	10012dc <acq_prepare_triggered+0xf0>
	g_acq_state.acq_first = NULL;
 10012f8:	e59fa2cc 	ldr	sl, [pc, #716]	; 10015cc <acq_prepare_triggered+0x3e0>
 10012fc:	e3a02000 	mov	r2, #0
 1001300:	e3a03000 	mov	r3, #0
	acq_free_all_alloc();

	first = malloc(sizeof(struct acq_buffer_t));
 1001304:	e3a00020 	mov	r0, #32
	g_acq_state.acq_first = NULL;
 1001308:	e1ca20f0 	strd	r2, [sl]
	first = malloc(sizeof(struct acq_buffer_t));
 100130c:	fa002ae9 	blx	100beb8 <malloc>

	if(first == NULL) {
 1001310:	e2505000 	subs	r5, r0, #0
 1001314:	0a0000a5 	beq	10015b0 <acq_prepare_triggered+0x3c4>
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1001318:	e5964768 	ldr	r4, [r6, #1896]	; 0x768
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 100131c:	e3a00020 	mov	r0, #32
	buf_sz = (g_acq_state.total_buffsz + ACQ_BUFFER_ALIGN) & ~(ACQ_BUFFER_ALIGN_AMOD);
 1001320:	e0844000 	add	r4, r4, r0
 1001324:	e3c4401f 	bic	r4, r4, #31
	work = memalign(ACQ_BUFFER_ALIGN, buf_sz);
 1001328:	e1a01004 	mov	r1, r4
 100132c:	fa002a9f 	blx	100bdb0 <memalign>
	if(work == NULL) {
 1001330:	e2503000 	subs	r3, r0, #0
 1001334:	0a000081 	beq	1001540 <acq_prepare_triggered+0x354>
	g_acq_state.stats.num_alloc_total++;
 1001338:	e1a0c00a 	mov	ip, sl
	next->idx = 0;
 100133c:	e3a02000 	mov	r2, #0
	g_acq_state.stats.num_alloc_total++;
 1001340:	e16c09d0 	ldrd	r0, [ip, #-144]!	; 0xffffff70
	 * Allocate all subsequent blocks on start up.  We can't allocate these in the IRQ. Then set
	 * the current pointer back to the first so that we start acquiring from that wave buffer.
	 *
	 * If at any point this fails, bail out and free memory.
	 */
	for(i = 0; i < num_acq; i++) {
 1001344:	e1a04002 	mov	r4, r2
	next->buff_alloc = work;
 1001348:	e5853004 	str	r3, [r5, #4]
	next->buff_acq = work;
 100134c:	e5853008 	str	r3, [r5, #8]
	g_acq_state.stats.num_alloc_total++;
 1001350:	e2903001 	adds	r3, r0, #1
	next->pre_sz = g_acq_state.pre_buffsz;
 1001354:	e596e760 	ldr	lr, [r6, #1888]	; 0x760
	g_acq_state.stats.num_alloc_total++;
 1001358:	e0a11002 	adc	r1, r1, r2
 100135c:	e58c3000 	str	r3, [ip]
 1001360:	e58c1004 	str	r1, [ip, #4]
	next->flags = ACQBUF_FLAG_ALLOC;
 1001364:	e3a03080 	mov	r3, #128	; 0x80
	next->post_sz = g_acq_state.post_buffsz;
 1001368:	e5961764 	ldr	r1, [r6, #1892]	; 0x764
	g_acq_state.acq_first = first;
 100136c:	e5865870 	str	r5, [r6, #2160]	; 0x870
 1001370:	e5865874 	str	r5, [r6, #2164]	; 0x874
	next->idx = 0;
 1001374:	e5852000 	str	r2, [r5]
	next->trigger_at = 0;
 1001378:	e585200c 	str	r2, [r5, #12]
	next->next = NULL;
 100137c:	e585201c 	str	r2, [r5, #28]
	next->pre_sz = g_acq_state.pre_buffsz;
 1001380:	e585e014 	str	lr, [r5, #20]
	next->post_sz = g_acq_state.post_buffsz;
 1001384:	e5851018 	str	r1, [r5, #24]
	next->flags = ACQBUF_FLAG_ALLOC;
 1001388:	e1c531b0 	strh	r3, [r5, #16]
	for(i = 0; i < num_acq; i++) {
 100138c:	ea000002 	b	100139c <acq_prepare_triggered+0x1b0>
 1001390:	e2844001 	add	r4, r4, #1
 1001394:	e1570004 	cmp	r7, r4
 1001398:	9a000033 	bls	100146c <acq_prepare_triggered+0x280>
		// d_printf(D_EXINFO, "acq_current: 0x%08x", g_acq_state.acq_current);

		error = acq_append_next_alloc();
 100139c:	ebffff31 	bl	1001068 <acq_append_next_alloc>
		if(error != ACQRES_OK) {
 10013a0:	e2505000 	subs	r5, r0, #0
 10013a4:	0afffff9 	beq	1001390 <acq_prepare_triggered+0x1a4>
			d_printf(D_ERROR, "acquire: error %d while allocating buffer #%d, aborting allocation", error, i);
 10013a8:	e3071198 	movw	r1, #29080	; 0x7198
 10013ac:	e1a03004 	mov	r3, r4
 10013b0:	e3401105 	movt	r1, #261	; 0x105
 10013b4:	e1a02005 	mov	r2, r5
 10013b8:	e3a00004 	mov	r0, #4
 10013bc:	eb000a0b 	bl	1003bf0 <d_printf>
	struct acq_buffer_t *next = g_acq_state.acq_first;
 10013c0:	e5964870 	ldr	r4, [r6, #2160]	; 0x870
	while(next != NULL) {
 10013c4:	e3540000 	cmp	r4, #0
 10013c8:	0a000006 	beq	10013e8 <acq_prepare_triggered+0x1fc>
		next_next = next->next;
 10013cc:	e594601c 	ldr	r6, [r4, #28]
		free(next->buff_alloc);
 10013d0:	e5940004 	ldr	r0, [r4, #4]
 10013d4:	fa002abb 	blx	100bec8 <free>
		free(next);
 10013d8:	e1a00004 	mov	r0, r4
 10013dc:	fa002ab9 	blx	100bec8 <free>
	while(next != NULL) {
 10013e0:	e2564000 	subs	r4, r6, #0
 10013e4:	1afffff8 	bne	10013cc <acq_prepare_triggered+0x1e0>
	g_acq_state.acq_first = NULL;
 10013e8:	e3a02000 	mov	r2, #0
 10013ec:	e3a03000 	mov	r3, #0
 10013f0:	e1ca20f0 	strd	r2, [sl]

	g_acq_state.demux_reg = demux;
	//fabcfg_write(FAB_CFG_ACQ_DEMUX_MODE, demux);

	return ACQRES_OK;
}
 10013f4:	e1a00005 	mov	r0, r5
 10013f8:	e28dd010 	add	sp, sp, #16
 10013fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		if(pre_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
 1001400:	e3120007 	tst	r2, #7
 1001404:	1a000043 	bne	1001518 <acq_prepare_triggered+0x32c>
		if(post_sz & ACQ_SAMPLES_ALIGN_8B_AMOD) {
 1001408:	e213c007 	ands	ip, r3, #7
 100140c:	13a0c001 	movne	ip, #1
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001410:	e3180006 	tst	r8, #6
			error = 1;
 1001414:	e1a0100c 	mov	r1, ip
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001418:	0affff91 	beq	1001264 <acq_prepare_triggered+0x78>
		if(post_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
 100141c:	e3130003 	tst	r3, #3
 1001420:	1a000008 	bne	1001448 <acq_prepare_triggered+0x25c>
		if(pre_sz & ACQ_SAMPLES_ALIGN_PR_AMOD) {
 1001424:	e202c003 	and	ip, r2, #3
 1001428:	e19c1001 	orrs	r1, ip, r1
 100142c:	1a000005 	bne	1001448 <acq_prepare_triggered+0x25c>
	if(error) {
 1001430:	e352001f 	cmp	r2, #31
 1001434:	8353001f 	cmphi	r3, #31
		total_sz *= 4;
 1001438:	81a00100 	lslhi	r0, r0, #2
		post_sz *= 4;
 100143c:	81a0c103 	lslhi	ip, r3, #2
		pre_sz *= 4;
 1001440:	81a0e102 	lslhi	lr, r2, #2
	if(error) {
 1001444:	8affff94 	bhi	100129c <acq_prepare_triggered+0xb0>
		align_mask = ACQ_SAMPLES_ALIGN_PR_AMOD;
 1001448:	e3a0c003 	mov	ip, #3
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d total_sz=%d req_align_mask=0x%08x test=0x%08x)", \
 100144c:	e203e007 	and	lr, r3, #7
 1001450:	e307108c 	movw	r1, #28812	; 0x708c
 1001454:	e88d5001 	stm	sp, {r0, ip, lr}
 1001458:	e3401105 	movt	r1, #261	; 0x105
 100145c:	e3a00004 	mov	r0, #4
		return ACQRES_ALIGN_FAIL;
 1001460:	e3e05001 	mvn	r5, #1
		d_printf(D_ERROR, "acquire: pre or post buffers not aligned to required sample boundary or too small (pre=%d post=%d total_sz=%d req_align_mask=0x%08x test=0x%08x)", \
 1001464:	eb0009e1 	bl	1003bf0 <d_printf>
		return ACQRES_ALIGN_FAIL;
 1001468:	eaffffe1 	b	10013f4 <acq_prepare_triggered+0x208>
	g_acq_state.acq_current = g_acq_state.acq_first;
 100146c:	e5961870 	ldr	r1, [r6, #2160]	; 0x870
	_FAB_CFG_ACCESS(reg) = data;
 1001470:	e3a03000 	mov	r3, #0
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 1001474:	e5962778 	ldr	r2, [r6, #1912]	; 0x778
 1001478:	e3443001 	movt	r3, #16385	; 0x4001
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 100147c:	e388cc01 	orr	ip, r8, #256	; 0x100
	g_acq_state.state = ACQSTATE_STOPPED;
 1001480:	e3a00001 	mov	r0, #1
	g_acq_state.acq_current = g_acq_state.acq_first;
 1001484:	e5861874 	str	r1, [r6, #2164]	; 0x874
	g_acq_state.state = ACQSTATE_STOPPED;
 1001488:	e3a01000 	mov	r1, #0
	fabcfg_write(FAB_CFG_ACQ_SIZE_A, g_acq_state.pre_sampct - 1);
 100148c:	e2422001 	sub	r2, r2, #1
	g_acq_state.num_acq_request = num_acq;
 1001490:	e5867770 	str	r7, [r6, #1904]	; 0x770
	g_acq_state.num_acq_made = 0;
 1001494:	e5865774 	str	r5, [r6, #1908]	; 0x774
	if(mode_flags & ACQ_MODE_8BIT) {
 1001498:	e3590000 	cmp	r9, #0
	g_acq_state.acq_mode_flags = mode_flags | ACQ_MODE_TRIGGERED;
 100149c:	e586c75c 	str	ip, [r6, #1884]	; 0x75c
	g_acq_state.state = ACQSTATE_STOPPED;
 10014a0:	e1c600f0 	strd	r0, [r6]
 10014a4:	e5832040 	str	r2, [r3, #64]	; 0x40
	fabcfg_write(FAB_CFG_ACQ_SIZE_B, g_acq_state.post_sampct - 1);
 10014a8:	e596277c 	ldr	r2, [r6, #1916]	; 0x77c
 10014ac:	e2422001 	sub	r2, r2, #1
 10014b0:	e5832044 	str	r2, [r3, #68]	; 0x44
	if(mode_flags & ACQ_MODE_8BIT) {
 10014b4:	1a00001c 	bne	100152c <acq_prepare_triggered+0x340>
	} else if(mode_flags & ACQ_MODE_12BIT) {
 10014b8:	e3180002 	tst	r8, #2
 10014bc:	1a000032 	bne	100158c <acq_prepare_triggered+0x3a0>
	} else if(mode_flags & ACQ_MODE_14BIT) {
 10014c0:	e2083004 	and	r3, r8, #4
 10014c4:	e3530000 	cmp	r3, #0
 10014c8:	03a01004 	moveq	r1, #4
 10014cc:	13a01024 	movne	r1, #36	; 0x24
 10014d0:	03a02002 	moveq	r2, #2
 10014d4:	13a02022 	movne	r2, #34	; 0x22
 10014d8:	03a03001 	moveq	r3, #1
 10014dc:	13a03021 	movne	r3, #33	; 0x21
 10014e0:	03a00000 	moveq	r0, #0
 10014e4:	13a00020 	movne	r0, #32
	if(mode_flags & ACQ_MODE_1CH) {
 10014e8:	e3180020 	tst	r8, #32
 10014ec:	1a000005 	bne	1001508 <acq_prepare_triggered+0x31c>
	} else if(mode_flags & ACQ_MODE_2CH) {
 10014f0:	e3180040 	tst	r8, #64	; 0x40
		demux |= ADCDEMUX_2CH;
 10014f4:	11a03002 	movne	r3, r2
	} else if(mode_flags & ACQ_MODE_2CH) {
 10014f8:	1a000002 	bne	1001508 <acq_prepare_triggered+0x31c>
		demux |= ADCDEMUX_4CH;
 10014fc:	e3180080 	tst	r8, #128	; 0x80
 1001500:	01a03000 	moveq	r3, r0
 1001504:	11a03001 	movne	r3, r1
}
 1001508:	e1a00005 	mov	r0, r5
	g_acq_state.demux_reg = demux;
 100150c:	e5863780 	str	r3, [r6, #1920]	; 0x780
}
 1001510:	e28dd010 	add	sp, sp, #16
 1001514:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001518:	e3180006 	tst	r8, #6
			error = 1;
 100151c:	13a01001 	movne	r1, #1
	if(mode_flags & (ACQ_MODE_12BIT | ACQ_MODE_14BIT)) {
 1001520:	1affffbd 	bne	100141c <acq_prepare_triggered+0x230>
	if(error) {
 1001524:	e3a0c007 	mov	ip, #7
 1001528:	eaffffc7 	b	100144c <acq_prepare_triggered+0x260>
 100152c:	e3a0100c 	mov	r1, #12
 1001530:	e3a0200a 	mov	r2, #10
 1001534:	e3a03009 	mov	r3, #9
		demux |= ADCDEMUX_8BIT;
 1001538:	e3a00008 	mov	r0, #8
 100153c:	eaffffe9 	b	10014e8 <acq_prepare_triggered+0x2fc>
		d_printf(D_ERROR, "acquire: failed to allocate %d bytes for allocbuffer", buf_sz);
 1001540:	e3061fe0 	movw	r1, #28640	; 0x6fe0
 1001544:	e1a02004 	mov	r2, r4
 1001548:	e3401105 	movt	r1, #261	; 0x105
 100154c:	e3a00004 	mov	r0, #4
 1001550:	eb0009a6 	bl	1003bf0 <d_printf>
		g_acq_state.stats.num_alloc_err_total++;
 1001554:	e51a3098 	ldr	r3, [sl, #-152]	; 0xffffff68
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 1001558:	e3071164 	movw	r1, #29028	; 0x7164
		g_acq_state.stats.num_alloc_err_total++;
 100155c:	e51a2094 	ldr	r2, [sl, #-148]	; 0xffffff6c
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 1001560:	e3401105 	movt	r1, #261	; 0x105
 1001564:	e3a00004 	mov	r0, #4
		return ACQRES_MALLOC_FAIL;
 1001568:	e3e05000 	mvn	r5, #0
		g_acq_state.stats.num_alloc_err_total++;
 100156c:	e2933001 	adds	r3, r3, #1
 1001570:	e2a22000 	adc	r2, r2, #0
 1001574:	e50a3098 	str	r3, [sl, #-152]	; 0xffffff68
 1001578:	e50a2094 	str	r2, [sl, #-148]	; 0xffffff6c
		d_printf(D_ERROR, "acquire: unable to get allocation for first buffer");
 100157c:	eb00099b 	bl	1003bf0 <d_printf>
}
 1001580:	e1a00005 	mov	r0, r5
 1001584:	e28dd010 	add	sp, sp, #16
 1001588:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 100158c:	e3a01014 	mov	r1, #20
 1001590:	e3a02012 	mov	r2, #18
 1001594:	e3a03011 	mov	r3, #17
		demux |= ADCDEMUX_12BIT;
 1001598:	e3a00010 	mov	r0, #16
 100159c:	eaffffd1 	b	10014e8 <acq_prepare_triggered+0x2fc>
		return ACQRES_PARAM_FAIL;
 10015a0:	e3e05002 	mvn	r5, #2
 10015a4:	eaffff92 	b	10013f4 <acq_prepare_triggered+0x208>
		return ACQRES_TOTAL_MALLOC_FAIL;
 10015a8:	e3e05003 	mvn	r5, #3
 10015ac:	eaffff90 	b	10013f4 <acq_prepare_triggered+0x208>
		d_printf(D_ERROR, "acquire: unable to allocate %d bytes for first entry in acquisition", sizeof(struct acq_buffer_t));
 10015b0:	e3071120 	movw	r1, #28960	; 0x7120
 10015b4:	e3a02020 	mov	r2, #32
 10015b8:	e3401105 	movt	r1, #261	; 0x105
 10015bc:	e3a00004 	mov	r0, #4
 10015c0:	eb00098a 	bl	1003bf0 <d_printf>
		return ACQRES_MALLOC_FAIL;
 10015c4:	e3e05000 	mvn	r5, #0
 10015c8:	eaffff89 	b	10013f4 <acq_prepare_triggered+0x208>
 10015cc:	01161b50 	.word	0x01161b50

010015d0 <acq_start>:
 * 			ACQRES_NOT_IMPLEMENTED if the mode is not presently supported;
 * 			ACQRES_DMA_FAIL if DMA task could not be started;
 * 			ACQRES_OK if acquisition task started successfully.
 */
int acq_start()
{
 10015d0:	e92d40d0 	push	{r4, r6, r7, lr}
		fabcfg_write(FAB_CFG_ACQ_CTRL_A,  (ACQ_CTRL_A_DEPTH_MUX | ACQ_CTRL_A_POST_TRIG_MODE));
		fabcfg_write(FAB_CFG_ACQ_CTRL_A, ~(ACQ_CTRL_A_DEPTH_MUX | ACQ_CTRL_A_POST_TRIG_MODE));
	}
	*/

	if(g_acq_state.state == ACQSTATE_UNINIT) {
 10015d4:	e30142e0 	movw	r4, #4832	; 0x12e0
 10015d8:	e3404116 	movt	r4, #278	; 0x116
{
 10015dc:	e24dd008 	sub	sp, sp, #8
	if(g_acq_state.state == ACQSTATE_UNINIT) {
 10015e0:	e5943000 	ldr	r3, [r4]
 10015e4:	e3530000 	cmp	r3, #0
 10015e8:	0a00005c 	beq	1001760 <acq_start+0x190>
	if(!(g_acq_state.state == ACQSTATE_STOPPED || g_acq_state.state == ACQSTATE_DONE)) {
		return ACQRES_NOT_STOPPED;
	}
#endif

	if(g_acq_state.acq_mode_flags & ACQ_MODE_TRIGGERED) {
 10015ec:	e594375c 	ldr	r3, [r4, #1884]	; 0x75c
 10015f0:	e3130c01 	tst	r3, #256	; 0x100
 10015f4:	0a000050 	beq	100173c <acq_start+0x16c>
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 10015f8:	e5942008 	ldr	r2, [r4, #8]

		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 10015fc:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
	return *(volatile u32 *) Addr;
 1001600:	e5923030 	ldr	r3, [r2, #48]	; 0x30
 1001604:	e5910008 	ldr	r0, [r1, #8]
		XAxiDma_IntrEnable(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
 1001608:	e3833a07 	orr	r3, r3, #28672	; 0x7000
	*LocalAddr = Value;
 100160c:	e5823030 	str	r3, [r2, #48]	; 0x30
		Xil_DCacheFlushRange((INTPTR)g_acq_state.acq_current->buff_acq, g_acq_state.total_buffsz);
 1001610:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
 1001614:	eb001fb4 	bl	10094ec <Xil_DCacheFlushRange>
		dsb();
 1001618:	f57ff04f 	dsb	sy

		error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)g_acq_state.acq_current->buff_acq, \
 100161c:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
 1001620:	e2840008 	add	r0, r4, #8
 1001624:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1001628:	e3a03001 	mov	r3, #1
 100162c:	e5911008 	ldr	r1, [r1, #8]
 1001630:	eb000fac 	bl	10054e8 <XAxiDma_SimpleTransfer>
				g_acq_state.pre_buffsz, XAXIDMA_DEVICE_TO_DMA);

		if(error != XST_SUCCESS) {
 1001634:	e3500000 	cmp	r0, #0
 1001638:	1a000041 	bne	1001744 <acq_start+0x174>
			return ACQRES_DMA_FAIL;
		}

		// Ensure we clear the overrun flag as this is a new packet.  If this is not cleared
		// we cannot recover from overrun.
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 100163c:	e594c874 	ldr	ip, [r4, #2164]	; 0x874
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001640:	e3a03000 	mov	r3, #0
 1001644:	e3443001 	movt	r3, #16385	; 0x4001

		// Set the state machine
		g_acq_state.state = ACQSTATE_PREP;
 1001648:	e3a06002 	mov	r6, #2
 100164c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1001650:	e3a07001 	mov	r7, #1
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 1001654:	e1dc11b0 	ldrh	r1, [ip, #16]
		g_acq_state.state = ACQSTATE_PREP;
 1001658:	e1c460f0 	strd	r6, [r4]
 100165c:	e3c22010 	bic	r2, r2, #16
		g_acq_state.acq_current->flags &= ~ACQBUF_FLAG_PKT_OVERRUN;
 1001660:	e3c11002 	bic	r1, r1, #2
 1001664:	e1cc11b0 	strh	r1, [ip, #16]
 1001668:	e5832050 	str	r2, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 100166c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1001670:	e3822020 	orr	r2, r2, #32
 1001674:	e5832050 	str	r2, [r3, #80]	; 0x50
	for(i = 0; i < 20; i++) {
 1001678:	e58d0004 	str	r0, [sp, #4]
 100167c:	e59d3004 	ldr	r3, [sp, #4]
 1001680:	e3530013 	cmp	r3, #19
 1001684:	ca000006 	bgt	10016a4 <acq_start+0xd4>
		asm __volatile__("nop");
 1001688:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 100168c:	e59d3004 	ldr	r3, [sp, #4]
 1001690:	e2833001 	add	r3, r3, #1
 1001694:	e58d3004 	str	r3, [sp, #4]
 1001698:	e59d3004 	ldr	r3, [sp, #4]
 100169c:	e3530013 	cmp	r3, #19
 10016a0:	dafffff8 	ble	1001688 <acq_start+0xb8>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10016a4:	e3a03000 	mov	r3, #0
 10016a8:	e3443001 	movt	r3, #16385	; 0x4001
 10016ac:	e5932050 	ldr	r2, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 10016b0:	e1a01003 	mov	r1, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 10016b4:	e3c22020 	bic	r2, r2, #32
 10016b8:	e5832050 	str	r2, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 10016bc:	e5913050 	ldr	r3, [r1, #80]	; 0x50
	while(fabcfg_test(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET)) ;
 10016c0:	e2133020 	ands	r3, r3, #32
 10016c4:	1afffffc 	bne	10016bc <acq_start+0xec>
	_FAB_CFG_ACCESS(reg) |= data;
 10016c8:	e5912050 	ldr	r2, [r1, #80]	; 0x50
 10016cc:	e3822008 	orr	r2, r2, #8
 10016d0:	e5812050 	str	r2, [r1, #80]	; 0x50
	for(i = 0; i < 10; i++) {
 10016d4:	e58d3000 	str	r3, [sp]
 10016d8:	e59d3000 	ldr	r3, [sp]
 10016dc:	e3530009 	cmp	r3, #9
 10016e0:	ca000006 	bgt	1001700 <acq_start+0x130>
		asm __volatile__("nop");
 10016e4:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 10016e8:	e59d3000 	ldr	r3, [sp]
 10016ec:	e2833001 	add	r3, r3, #1
 10016f0:	e58d3000 	str	r3, [sp]
 10016f4:	e59d3000 	ldr	r3, [sp]
 10016f8:	e3530009 	cmp	r3, #9
 10016fc:	dafffff8 	ble	10016e4 <acq_start+0x114>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001700:	e3a03000 	mov	r3, #0
 1001704:	e3443001 	movt	r3, #16385	; 0x4001
 1001708:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 100170c:	e3c22008 	bic	r2, r2, #8
 1001710:	e5832050 	str	r2, [r3, #80]	; 0x50
 1001714:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1001718:	e3c22802 	bic	r2, r2, #131072	; 0x20000
 100171c:	e3c22040 	bic	r2, r2, #64	; 0x40
 1001720:	e5832050 	str	r2, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1001724:	e5931050 	ldr	r1, [r3, #80]	; 0x50
 1001728:	e3811f41 	orr	r1, r1, #260	; 0x104
 100172c:	e3811003 	orr	r1, r1, #3
 1001730:	e5831050 	str	r1, [r3, #80]	; 0x50

		return ACQRES_OK;
	} else {
		return ACQRES_NOT_IMPLEMENTED;
	}
}
 1001734:	e28dd008 	add	sp, sp, #8
 1001738:	e8bd80d0 	pop	{r4, r6, r7, pc}
		return ACQRES_NOT_IMPLEMENTED;
 100173c:	e3e00006 	mvn	r0, #6
 1001740:	eafffffb 	b	1001734 <acq_start+0x164>
			d_printf(D_ERROR, "acquire: unable to start transfer, error %d", error);
 1001744:	e3061da4 	movw	r1, #28068	; 0x6da4
 1001748:	e1a02000 	mov	r2, r0
 100174c:	e3401105 	movt	r1, #261	; 0x105
 1001750:	e3a00004 	mov	r0, #4
 1001754:	eb000925 	bl	1003bf0 <d_printf>
			return ACQRES_DMA_FAIL;
 1001758:	e3e00004 	mvn	r0, #4
 100175c:	eafffff4 	b	1001734 <acq_start+0x164>
		return ACQRES_NOT_INITIALISED;
 1001760:	e3e00005 	mvn	r0, #5
 1001764:	eafffff2 	b	1001734 <acq_start+0x164>

01001768 <acq_is_done>:
/*
 * Returns TRUE if the requested acquisition is complete.
 */
bool acq_is_done()
{
	return (g_acq_state.state == ACQSTATE_DONE);
 1001768:	e30132e0 	movw	r3, #4832	; 0x12e0
 100176c:	e3403116 	movt	r3, #278	; 0x116
 1001770:	e5930000 	ldr	r0, [r3]
}
 1001774:	e2400005 	sub	r0, r0, #5
 1001778:	e16f0f10 	clz	r0, r0
 100177c:	e1a002a0 	lsr	r0, r0, #5
 1001780:	e12fff1e 	bx	lr

01001784 <acq_force_stop>:
 *
 * @return	ACQRES_DMA_FAIL if DMA task could not be stopped;
 * 			ACQRES_SUCCESS if stop signal sent.
 */
int acq_force_stop()
{
 1001784:	e92d4010 	push	{r4, lr}
	int error;

	error = XAxiDma_Pause(&g_acq_state.dma);
 1001788:	e59f4054 	ldr	r4, [pc, #84]	; 10017e4 <acq_force_stop+0x60>
 100178c:	e1a00004 	mov	r0, r4
 1001790:	eb000e5f 	bl	1005114 <XAxiDma_Pause>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001794:	e3a03000 	mov	r3, #0
	fabcfg_clear(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_AXI_RUN);

	//XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_AXI_RUN, 0);		// AXI bus activity stopped

	if(error != XST_SUCCESS) {
 1001798:	e3500000 	cmp	r0, #0
 100179c:	e3443001 	movt	r3, #16385	; 0x4001
 10017a0:	e5931050 	ldr	r1, [r3, #80]	; 0x50
 10017a4:	e3c11002 	bic	r1, r1, #2
 10017a8:	e5831050 	str	r1, [r3, #80]	; 0x50
 10017ac:	1a000005 	bne	10017c8 <acq_force_stop+0x44>
	_FAB_CFG_ACCESS(reg) |= data;
 10017b0:	e5931050 	ldr	r1, [r3, #80]	; 0x50
	}

	fabcfg_set(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_ABORT);
	//XGpioPs_WritePin(&g_hal.xgpio_ps, ACQ_EMIO_ABORT, 1);

	g_acq_state.state = ACQSTATE_STOPPED;
 10017b4:	e3a02001 	mov	r2, #1
 10017b8:	e3811040 	orr	r1, r1, #64	; 0x40
 10017bc:	e5831050 	str	r1, [r3, #80]	; 0x50
 10017c0:	e5042008 	str	r2, [r4, #-8]

	return ACQRES_OK;
}
 10017c4:	e8bd8010 	pop	{r4, pc}
		d_printf(D_ERROR, "acquire: unable to pause transfer, error %d", error);
 10017c8:	e30711dc 	movw	r1, #29148	; 0x71dc
 10017cc:	e1a02000 	mov	r2, r0
 10017d0:	e3401105 	movt	r1, #261	; 0x105
 10017d4:	e3a00004 	mov	r0, #4
 10017d8:	eb000904 	bl	1003bf0 <d_printf>
		return ACQRES_DMA_FAIL;
 10017dc:	e3e00004 	mvn	r0, #4
 10017e0:	e8bd8010 	pop	{r4, pc}
 10017e4:	011612e8 	.word	0x011612e8

010017e8 <acq_debug_dump>:

/*
 * Dump state of acquire engine for debugging purposes.
 */
void acq_debug_dump()
{
 10017e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t sample_delta;
	uint32_t msb, lsb;
	float time_delta_us, acq_rate = NAN, sample_rate = NAN;

	// Calculate acquisition rate if last debug timer is set
	if(g_acq_state.last_debug_timer != 0) {
 10017ec:	e30142e0 	movw	r4, #4832	; 0x12e0
 10017f0:	e3404116 	movt	r4, #278	; 0x116
{
 10017f4:	ed2d8b02 	vpush	{d8}
	if(g_acq_state.last_debug_timer != 0) {
 10017f8:	e2847b02 	add	r7, r4, #2048	; 0x800
{
 10017fc:	e24dde77 	sub	sp, sp, #1904	; 0x770
	if(g_acq_state.last_debug_timer != 0) {
 1001800:	e1c720d0 	ldrd	r2, [r7]
{
 1001804:	e24dd00c 	sub	sp, sp, #12
	void *sp = NULL;  // approximately the stack
 1001808:	e3a05000 	mov	r5, #0
 100180c:	e58d576c 	str	r5, [sp, #1900]	; 0x76c
	if(g_acq_state.last_debug_timer != 0) {
 1001810:	e1923003 	orrs	r3, r2, r3
 1001814:	1a00011f 	bne	1001c98 <acq_debug_dump+0x4b0>
 1001818:	e284ae7a 	add	sl, r4, #1952	; 0x7a0
 100181c:	e2849e7d 	add	r9, r4, #2000	; 0x7d0
 1001820:	e58d5748 	str	r5, [sp, #1864]	; 0x748
 1001824:	e58d5754 	str	r5, [sp, #1876]	; 0x754
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
			}
		}
	}

	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **   ", &g_acq_state);
 1001828:	e30122e0 	movw	r2, #4832	; 0x12e0
 100182c:	e3071208 	movw	r1, #29192	; 0x7208
 1001830:	e3402116 	movt	r2, #278	; 0x116
 1001834:	e3401105 	movt	r1, #261	; 0x105
 1001838:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x                  ", g_acq_state.acq_mode_flags);
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100183c:	e30957cc 	movw	r5, #38860	; 0x97cc
	d_printf(D_INFO, "** Acquisition State (g_acq_state: 0x%08x) **   ", &g_acq_state);
 1001840:	eb0008ea 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001844:	e307123c 	movw	r1, #29244	; 0x723c
 1001848:	e3a00002 	mov	r0, #2
 100184c:	e3401105 	movt	r1, #261	; 0x105
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 1001850:	e3405105 	movt	r5, #261	; 0x105
	d_printf(D_INFO, "                                                ");
 1001854:	eb0008e5 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
 1001858:	e28d2e76 	add	r2, sp, #1888	; 0x760
 100185c:	e3071270 	movw	r1, #29296	; 0x7270
 1001860:	e282200c 	add	r2, r2, #12
 1001864:	e3401105 	movt	r1, #261	; 0x105
 1001868:	e3a00002 	mov	r0, #2
	d_printf(D_INFO, "sub_state             = %d [%s]                 ", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
	d_printf(D_INFO, "acq_current           = 0x%08x                  ", g_acq_state.acq_current);
	d_printf(D_INFO, "acq_first             = 0x%08x                  ", g_acq_state.acq_first);
	d_printf(D_INFO, "dma                   = 0x%08x                  ", g_acq_state.dma);
 100186c:	e59f85ac 	ldr	r8, [pc, #1452]	; 1001e20 <acq_debug_dump+0x638>
	d_printf(D_INFO, "I think the stack is at 0x%08x or thereabouts   ", (void*)&sp);
 1001870:	eb0008de 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001874:	e307123c 	movw	r1, #29244	; 0x723c
 1001878:	e3a00002 	mov	r0, #2
 100187c:	e3401105 	movt	r1, #261	; 0x105
	res = _FAB_CFG_ACCESS(reg);
 1001880:	e3a06000 	mov	r6, #0
 1001884:	eb0008d9 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "acq_mode_flags        = 0x%08x                  ", g_acq_state.acq_mode_flags);
 1001888:	e30712a4 	movw	r1, #29348	; 0x72a4
 100188c:	e594275c 	ldr	r2, [r4, #1884]	; 0x75c
 1001890:	e3401105 	movt	r1, #261	; 0x105
 1001894:	e3a00002 	mov	r0, #2
 1001898:	eb0008d4 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 100189c:	e5942000 	ldr	r2, [r4]
 10018a0:	e30712d8 	movw	r1, #29400	; 0x72d8
 10018a4:	e3401105 	movt	r1, #261	; 0x105
 10018a8:	e3a00002 	mov	r0, #2
 10018ac:	e3446001 	movt	r6, #16385	; 0x4001
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "acq_current->flags    = 0x%04x                  ", g_acq_state.acq_current->flags);
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)             ", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
	d_printf(D_INFO, "                                                ");
	d_printf(D_INFO, "s.num_acq_total       = %llu                    ", g_acq_state.stats.num_acq_total);
	d_printf(D_INFO, "s.num_alloc_err_total = %llu                    ", g_acq_state.stats.num_alloc_err_total);
 10018b0:	e59fb56c 	ldr	fp, [pc, #1388]	; 1001e24 <acq_debug_dump+0x63c>
	d_printf(D_INFO, "state                 = %d [%s]                 ", g_acq_state.state, acq_state_to_str[g_acq_state.state]);
 10018b4:	e7953102 	ldr	r3, [r5, r2, lsl #2]
 10018b8:	eb0008cc 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "sub_state             = %d [%s]                 ", g_acq_state.sub_state, acq_substate_to_str[g_acq_state.sub_state]);
 10018bc:	e5942004 	ldr	r2, [r4, #4]
 10018c0:	e3a00002 	mov	r0, #2
 10018c4:	e307130c 	movw	r1, #29452	; 0x730c
 10018c8:	e3401105 	movt	r1, #261	; 0x105
 10018cc:	e0855012 	add	r5, r5, r2, lsl r0
 10018d0:	e5953018 	ldr	r3, [r5, #24]
 10018d4:	eb0008c5 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "acq_current           = 0x%08x                  ", g_acq_state.acq_current);
 10018d8:	e3071340 	movw	r1, #29504	; 0x7340
 10018dc:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
 10018e0:	e3401105 	movt	r1, #261	; 0x105
 10018e4:	e3a00002 	mov	r0, #2
 10018e8:	eb0008c0 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "acq_first             = 0x%08x                  ", g_acq_state.acq_first);
 10018ec:	e3071374 	movw	r1, #29556	; 0x7374
 10018f0:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
 10018f4:	e3401105 	movt	r1, #261	; 0x105
 10018f8:	e3a00002 	mov	r0, #2
 10018fc:	eb0008bb 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "dma                   = 0x%08x                  ", g_acq_state.dma);
 1001900:	e2881008 	add	r1, r8, #8
 1001904:	e3002748 	movw	r2, #1864	; 0x748
 1001908:	e1a0000d 	mov	r0, sp
 100190c:	eb002bfb 	bl	100c900 <memcpy>
 1001910:	e30713a8 	movw	r1, #29608	; 0x73a8
 1001914:	e898000c 	ldm	r8, {r2, r3}
 1001918:	e3401105 	movt	r1, #261	; 0x105
 100191c:	e3a00002 	mov	r0, #2
 1001920:	eb0008b2 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "dma_config            = 0x%08x                  ", g_acq_state.dma_config);
 1001924:	e30713dc 	movw	r1, #29660	; 0x73dc
 1001928:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
 100192c:	e3401105 	movt	r1, #261	; 0x105
 1001930:	e3a00002 	mov	r0, #2
 1001934:	eb0008ad 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "demux_reg             = 0x%02x                  ", g_acq_state.demux_reg);
 1001938:	e3071410 	movw	r1, #29712	; 0x7410
 100193c:	e5942780 	ldr	r2, [r4, #1920]	; 0x780
 1001940:	e3401105 	movt	r1, #261	; 0x105
 1001944:	e3a00002 	mov	r0, #2
 1001948:	eb0008a8 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 100194c:	e307123c 	movw	r1, #29244	; 0x723c
 1001950:	e3a00002 	mov	r0, #2
 1001954:	e3401105 	movt	r1, #261	; 0x105
 1001958:	eb0008a4 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "R_acq_ctrl_a          = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_CTRL_A), g_acq_state.dbg_isr_acq_ctrl_a);
 100195c:	e3071444 	movw	r1, #29764	; 0x7444
 1001960:	e5962050 	ldr	r2, [r6, #80]	; 0x50
 1001964:	e5943784 	ldr	r3, [r4, #1924]	; 0x784
 1001968:	e3401105 	movt	r1, #261	; 0x105
 100196c:	e3a00002 	mov	r0, #2
 1001970:	eb00089e 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "R_acq_status_a        = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_A), g_acq_state.dbg_isr_acq_status_a);
 1001974:	e3071478 	movw	r1, #29816	; 0x7478
 1001978:	e5962058 	ldr	r2, [r6, #88]	; 0x58
 100197c:	e5943788 	ldr	r3, [r4, #1928]	; 0x788
 1001980:	e3401105 	movt	r1, #261	; 0x105
 1001984:	e3a00002 	mov	r0, #2
 1001988:	eb000898 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "R_acq_status_b        = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_B), g_acq_state.dbg_isr_acq_status_b);
 100198c:	e30714ac 	movw	r1, #29868	; 0x74ac
 1001990:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
 1001994:	e594378c 	ldr	r3, [r4, #1932]	; 0x78c
 1001998:	e3401105 	movt	r1, #261	; 0x105
 100199c:	e3a00002 	mov	r0, #2
 10019a0:	eb000892 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "R_acq_trigger_ptr     = 0x%08x (last_isr:0x%08x)", fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR), g_acq_state.dbg_isr_acq_trig_ptr);
 10019a4:	e30714e0 	movw	r1, #29920	; 0x74e0
 10019a8:	e5962048 	ldr	r2, [r6, #72]	; 0x48
 10019ac:	e5943790 	ldr	r3, [r4, #1936]	; 0x790
 10019b0:	e3401105 	movt	r1, #261	; 0x105
 10019b4:	e3a00002 	mov	r0, #2
 10019b8:	eb00088c 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 10019bc:	e307123c 	movw	r1, #29244	; 0x723c
 10019c0:	e3a00002 	mov	r0, #2
 10019c4:	e3401105 	movt	r1, #261	; 0x105
 10019c8:	eb000888 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "pre_buffsz            = %d bytes (0x%08x)       ", g_acq_state.pre_buffsz, g_acq_state.pre_buffsz);
 10019cc:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
 10019d0:	e3071514 	movw	r1, #29972	; 0x7514
 10019d4:	e3401105 	movt	r1, #261	; 0x105
 10019d8:	e3a00002 	mov	r0, #2
 10019dc:	e1a02003 	mov	r2, r3
 10019e0:	eb000882 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "post_buffsz           = %d bytes (0x%08x)       ", g_acq_state.post_buffsz, g_acq_state.post_buffsz);
 10019e4:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
 10019e8:	e3071548 	movw	r1, #30024	; 0x7548
 10019ec:	e3401105 	movt	r1, #261	; 0x105
 10019f0:	e3a00002 	mov	r0, #2
 10019f4:	e1a02003 	mov	r2, r3
 10019f8:	eb00087c 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "total_buffsz          = %d bytes (0x%08x)       ", g_acq_state.total_buffsz, g_acq_state.total_buffsz);
 10019fc:	e5943768 	ldr	r3, [r4, #1896]	; 0x768
 1001a00:	e307157c 	movw	r1, #30076	; 0x757c
 1001a04:	e3401105 	movt	r1, #261	; 0x105
 1001a08:	e3a00002 	mov	r0, #2
 1001a0c:	e1a02003 	mov	r2, r3
 1001a10:	eb000876 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "pre_sampct            = %d wavewords            ", g_acq_state.pre_sampct);
 1001a14:	e30715b0 	movw	r1, #30128	; 0x75b0
 1001a18:	e5942778 	ldr	r2, [r4, #1912]	; 0x778
 1001a1c:	e3401105 	movt	r1, #261	; 0x105
 1001a20:	e3a00002 	mov	r0, #2
 1001a24:	eb000871 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "post_sampct           = %d wavewords            ", g_acq_state.post_sampct);
 1001a28:	e30715e4 	movw	r1, #30180	; 0x75e4
 1001a2c:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
 1001a30:	e3401105 	movt	r1, #261	; 0x105
 1001a34:	e3a00002 	mov	r0, #2
 1001a38:	eb00086c 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "num_acq_request       = %d waves                ", g_acq_state.num_acq_request);
 1001a3c:	e3071618 	movw	r1, #30232	; 0x7618
 1001a40:	e5942770 	ldr	r2, [r4, #1904]	; 0x770
 1001a44:	e3401105 	movt	r1, #261	; 0x105
 1001a48:	e3a00002 	mov	r0, #2
 1001a4c:	eb000867 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "num_acq_made          = %d waves                ", g_acq_state.num_acq_made);
 1001a50:	e307164c 	movw	r1, #30284	; 0x764c
 1001a54:	e5942774 	ldr	r2, [r4, #1908]	; 0x774
 1001a58:	e3401105 	movt	r1, #261	; 0x105
 1001a5c:	e3a00002 	mov	r0, #2
 1001a60:	eb000862 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001a64:	e307123c 	movw	r1, #29244	; 0x723c
 1001a68:	e3a00002 	mov	r0, #2
 1001a6c:	e3401105 	movt	r1, #261	; 0x105
 1001a70:	eb00085e 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "acq_current->flags    = 0x%04x                  ", g_acq_state.acq_current->flags);
 1001a74:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
 1001a78:	e3071680 	movw	r1, #30336	; 0x7680
 1001a7c:	e3401105 	movt	r1, #261	; 0x105
 1001a80:	e3a00002 	mov	r0, #2
 1001a84:	e1d321b0 	ldrh	r2, [r3, #16]
 1001a88:	eb000858 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "acq_current->trig_at  = %d (0x%08x)             ", g_acq_state.acq_current->trigger_at, g_acq_state.acq_current->trigger_at);
 1001a8c:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
 1001a90:	e30716b4 	movw	r1, #30388	; 0x76b4
 1001a94:	e3401105 	movt	r1, #261	; 0x105
 1001a98:	e3a00002 	mov	r0, #2
 1001a9c:	e593300c 	ldr	r3, [r3, #12]
 1001aa0:	e1a02003 	mov	r2, r3
 1001aa4:	eb000851 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001aa8:	e307123c 	movw	r1, #29244	; 0x723c
 1001aac:	e3a00002 	mov	r0, #2
 1001ab0:	e3401105 	movt	r1, #261	; 0x105
 1001ab4:	eb00084d 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_acq_total       = %llu                    ", g_acq_state.stats.num_acq_total);
 1001ab8:	e30716e8 	movw	r1, #30440	; 0x76e8
 1001abc:	e14a20d8 	ldrd	r2, [sl, #-8]
 1001ac0:	e3401105 	movt	r1, #261	; 0x105
 1001ac4:	e3a00002 	mov	r0, #2
 1001ac8:	eb000848 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_alloc_err_total = %llu                    ", g_acq_state.stats.num_alloc_err_total);
 1001acc:	e307171c 	movw	r1, #30492	; 0x771c
 1001ad0:	e14b20d8 	ldrd	r2, [fp, #-8]
 1001ad4:	e3401105 	movt	r1, #261	; 0x105
 1001ad8:	e3a00002 	mov	r0, #2
 1001adc:	eb000843 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_alloc_total     = %llu                    ", g_acq_state.stats.num_alloc_total);
 1001ae0:	e3071750 	movw	r1, #30544	; 0x7750
 1001ae4:	e1cb20d0 	ldrd	r2, [fp]
 1001ae8:	e3401105 	movt	r1, #261	; 0x105
 1001aec:	e3a00002 	mov	r0, #2
 1001af0:	eb00083e 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_err_total       = %llu                    ", g_acq_state.stats.num_err_total);
 1001af4:	e3071784 	movw	r1, #30596	; 0x7784
 1001af8:	e14b22d8 	ldrd	r2, [fp, #-40]	; 0xffffffd8
 1001afc:	e3401105 	movt	r1, #261	; 0x105
 1001b00:	e3a00002 	mov	r0, #2
 1001b04:	eb000839 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_post_total      = %llu                    ", g_acq_state.stats.num_post_total);
 1001b08:	e30717b8 	movw	r1, #30648	; 0x77b8
 1001b0c:	e14b23d0 	ldrd	r2, [fp, #-48]	; 0xffffffd0
 1001b10:	e3401105 	movt	r1, #261	; 0x105
 1001b14:	e3a00002 	mov	r0, #2
 1001b18:	eb000834 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_pre_total       = %llu                    ", g_acq_state.stats.num_pre_total);
 1001b1c:	e30717ec 	movw	r1, #30700	; 0x77ec
 1001b20:	e1ca20d0 	ldrd	r2, [sl]
 1001b24:	e3401105 	movt	r1, #261	; 0x105
 1001b28:	e3a00002 	mov	r0, #2
 1001b2c:	eb00082f 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_pre_fill_total  = %llu                    ", g_acq_state.stats.num_pre_fill_total);
 1001b30:	e3071820 	movw	r1, #30752	; 0x7820
 1001b34:	e14b23d8 	ldrd	r2, [fp, #-56]	; 0xffffffc8
 1001b38:	e3401105 	movt	r1, #261	; 0x105
 1001b3c:	e3a00002 	mov	r0, #2
 1001b40:	eb00082a 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_samples         = %llu                    ", g_acq_state.stats.num_samples);
 1001b44:	e3071854 	movw	r1, #30804	; 0x7854
 1001b48:	e14920d8 	ldrd	r2, [r9, #-8]
 1001b4c:	e3401105 	movt	r1, #261	; 0x105
 1001b50:	e3a00002 	mov	r0, #2
 1001b54:	eb000825 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_samples_raw     = %llu                    ", g_acq_state.stats.num_samples_raw);
 1001b58:	e3071888 	movw	r1, #30856	; 0x7888
 1001b5c:	e1c920d0 	ldrd	r2, [r9]
 1001b60:	e3401105 	movt	r1, #261	; 0x105
 1001b64:	e3a00002 	mov	r0, #2
 1001b68:	eb000820 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_irqs            = %llu                    ", g_acq_state.stats.num_irqs);
 1001b6c:	e30718bc 	movw	r1, #30908	; 0x78bc
 1001b70:	e1cb20d8 	ldrd	r2, [fp, #8]
 1001b74:	e3401105 	movt	r1, #261	; 0x105
 1001b78:	e3a00002 	mov	r0, #2
 1001b7c:	eb00081b 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_fifo_full       = %llu                    ", g_acq_state.stats.num_fifo_full);
 1001b80:	e30718f0 	movw	r1, #30960	; 0x78f0
 1001b84:	e1cb21d0 	ldrd	r2, [fp, #16]
 1001b88:	e3401105 	movt	r1, #261	; 0x105
 1001b8c:	e3a00002 	mov	r0, #2
 1001b90:	eb000816 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "s.num_fifo_pkt_dscd   = %llu                    ", g_acq_state.stats.num_fifo_pkt_dscd);
 1001b94:	e3071924 	movw	r1, #31012	; 0x7924
 1001b98:	e14720d8 	ldrd	r2, [r7, #-8]
 1001b9c:	e3401105 	movt	r1, #261	; 0x105
 1001ba0:	e3a00002 	mov	r0, #2
 1001ba4:	eb000811 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001ba8:	e307123c 	movw	r1, #29244	; 0x723c
 1001bac:	e3a00002 	mov	r0, #2
 1001bb0:	e3401105 	movt	r1, #261	; 0x105
 1001bb4:	eb00080d 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "Approx acq. rate      = %d acq/s                ", (int)acq_rate);
 1001bb8:	e3071958 	movw	r1, #31064	; 0x7958
 1001bbc:	e59d2754 	ldr	r2, [sp, #1876]	; 0x754
 1001bc0:	e3401105 	movt	r1, #261	; 0x105
 1001bc4:	e3a00002 	mov	r0, #2
 1001bc8:	eb000808 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "Approx sample rate    = %d Ksa/s                ", (int)sample_rate);
 1001bcc:	e307198c 	movw	r1, #31116	; 0x798c
 1001bd0:	e59d2748 	ldr	r2, [sp, #1864]	; 0x748
 1001bd4:	e3401105 	movt	r1, #261	; 0x105
 1001bd8:	e3a00002 	mov	r0, #2
 1001bdc:	eb000803 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "Debug delta           = %d us                   ", (int)time_delta_us);
 1001be0:	eefd7ac8 	vcvt.s32.f32	s15, s16
 1001be4:	e30719c0 	movw	r1, #31168	; 0x79c0
 1001be8:	e3401105 	movt	r1, #261	; 0x105
 1001bec:	e3a00002 	mov	r0, #2
 1001bf0:	ee172a90 	vmov	r2, s15
 1001bf4:	eb0007fd 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001bf8:	e307123c 	movw	r1, #29244	; 0x723c
 1001bfc:	e3a00002 	mov	r0, #2
 1001c00:	e3401105 	movt	r1, #261	; 0x105
 1001c04:	eb0007f9 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "** End **                                       ");
 1001c08:	e30719f4 	movw	r1, #31220	; 0x79f4
 1001c0c:	e3a00002 	mov	r0, #2
 1001c10:	e3401105 	movt	r1, #261	; 0x105
 1001c14:	eb0007f5 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001c18:	e307123c 	movw	r1, #29244	; 0x723c
 1001c1c:	e3a00002 	mov	r0, #2
 1001c20:	e3401105 	movt	r1, #261	; 0x105
 1001c24:	eb0007f1 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001c28:	e307123c 	movw	r1, #29244	; 0x723c
 1001c2c:	e3a00002 	mov	r0, #2
 1001c30:	e3401105 	movt	r1, #261	; 0x105
 1001c34:	eb0007ed 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001c38:	e307123c 	movw	r1, #29244	; 0x723c
 1001c3c:	e3a00002 	mov	r0, #2
 1001c40:	e3401105 	movt	r1, #261	; 0x105
 1001c44:	eb0007e9 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001c48:	e307123c 	movw	r1, #29244	; 0x723c
 1001c4c:	e3a00002 	mov	r0, #2
 1001c50:	e3401105 	movt	r1, #261	; 0x105
 1001c54:	eb0007e5 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                                                ");
 1001c58:	e307123c 	movw	r1, #29244	; 0x723c
 1001c5c:	e3a00002 	mov	r0, #2
 1001c60:	e3401105 	movt	r1, #261	; 0x105
 1001c64:	eb0007e1 	bl	1003bf0 <d_printf>

	// Save last state...
	g_acq_state.stat_last = g_acq_state.stats;
 1001c68:	e2881e79 	add	r1, r8, #1936	; 0x790
 1001c6c:	e2880b02 	add	r0, r8, #2048	; 0x800
 1001c70:	e3a02068 	mov	r2, #104	; 0x68
 1001c74:	eb002b21 	bl	100c900 <memcpy>
	g_acq_state.last_debug_timer = timer_value;
 1001c78:	e59d3758 	ldr	r3, [sp, #1880]	; 0x758
 1001c7c:	e5873000 	str	r3, [r7]
 1001c80:	e59d375c 	ldr	r3, [sp, #1884]	; 0x75c
 1001c84:	e5873004 	str	r3, [r7, #4]
}
 1001c88:	e28dde77 	add	sp, sp, #1904	; 0x770
 1001c8c:	e28dd00c 	add	sp, sp, #12
 1001c90:	ecbd8b02 	vpop	{d8}
 1001c94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_read_global_timer(&lsb, &msb);
 1001c98:	e28d0e77 	add	r0, sp, #1904	; 0x770
 1001c9c:	e28d1e77 	add	r1, sp, #1904	; 0x770
 1001ca0:	e2800004 	add	r0, r0, #4
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001ca4:	e284ae7a 	add	sl, r4, #1952	; 0x7a0
		d_read_global_timer(&lsb, &msb);
 1001ca8:	eb000999 	bl	1004314 <d_read_global_timer>
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001cac:	e59d3774 	ldr	r3, [sp, #1908]	; 0x774
 1001cb0:	e2849e7d 	add	r9, r4, #2000	; 0x7d0
		time_delta = timer_value - g_acq_state.last_debug_timer;
 1001cb4:	e5970000 	ldr	r0, [r7]
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001cb8:	e59d2770 	ldr	r2, [sp, #1904]	; 0x770
		time_delta = timer_value - g_acq_state.last_debug_timer;
 1001cbc:	e5971004 	ldr	r1, [r7, #4]
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001cc0:	e0530000 	subs	r0, r3, r0
		timer_value = (((uint64_t)msb) << 32) | lsb;
 1001cc4:	e58d3758 	str	r3, [sp, #1880]	; 0x758
 1001cc8:	e58d275c 	str	r2, [sp, #1884]	; 0x75c
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001ccc:	e0c21001 	sbc	r1, r2, r1
 1001cd0:	fa002482 	blx	100aee0 <__aeabi_ul2d>
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001cd4:	e51ac008 	ldr	ip, [sl, #-8]
 1001cd8:	e5943808 	ldr	r3, [r4, #2056]	; 0x808
 1001cdc:	e594280c 	ldr	r2, [r4, #2060]	; 0x80c
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001ce0:	ec410b31 	vmov	d17, r0, r1
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001ce4:	e51a1004 	ldr	r1, [sl, #-4]
 1001ce8:	e05c3003 	subs	r3, ip, r3
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001cec:	eddf0b47 	vldr	d16, [pc, #284]	; 1001e10 <acq_debug_dump+0x628>
		acq_delta = g_acq_state.stats.num_acq_total - g_acq_state.stat_last.num_acq_total;
 1001cf0:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1001cf4:	e0c13002 	sbc	r3, r1, r2
 1001cf8:	e58d374c 	str	r3, [sp, #1868]	; 0x74c
		if(acq_delta > 0) {
 1001cfc:	e28d3d1d 	add	r3, sp, #1856	; 0x740
 1001d00:	e2833008 	add	r3, r3, #8
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001d04:	ee610ba0 	vmul.f64	d16, d17, d16
		if(acq_delta > 0) {
 1001d08:	e1c320d0 	ldrd	r2, [r3]
 1001d0c:	e1923003 	orrs	r3, r2, r3
		time_delta_us = time_delta * XSCUTIMER_TICKS_TO_US;
 1001d10:	eeb78be0 	vcvt.f32.f64	s16, d16
		if(acq_delta > 0) {
 1001d14:	1a00001d 	bne	1001d90 <acq_debug_dump+0x5a8>
 1001d18:	e5992000 	ldr	r2, [r9]
 1001d1c:	e5943840 	ldr	r3, [r4, #2112]	; 0x840
 1001d20:	e5941844 	ldr	r1, [r4, #2116]	; 0x844
 1001d24:	e5990004 	ldr	r0, [r9, #4]
 1001d28:	e0523003 	subs	r3, r2, r3
 1001d2c:	e58d3760 	str	r3, [sp, #1888]	; 0x760
 1001d30:	e0c03001 	sbc	r3, r0, r1
 1001d34:	e58d3764 	str	r3, [sp, #1892]	; 0x764
		if(sample_delta > 0) {
 1001d38:	e28d3e76 	add	r3, sp, #1888	; 0x760
 1001d3c:	e1c320d0 	ldrd	r2, [r3]
 1001d40:	e1923003 	orrs	r3, r2, r3
 1001d44:	0a00002d 	beq	1001e00 <acq_debug_dump+0x618>
			if(time_delta_us > 0) {
 1001d48:	eeb58ac0 	vcmpe.f32	s16, #0.0
 1001d4c:	e3a03000 	mov	r3, #0
 1001d50:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1001d54:	d58d3748 	strle	r3, [sp, #1864]	; 0x748
 1001d58:	d58d3754 	strle	r3, [sp, #1876]	; 0x754
 1001d5c:	dafffeb1 	ble	1001828 <acq_debug_dump+0x40>
 1001d60:	e58d3754 	str	r3, [sp, #1876]	; 0x754
				sample_rate = ((float)sample_delta / time_delta_us) * 1e3;
 1001d64:	e28d3e76 	add	r3, sp, #1888	; 0x760
 1001d68:	e1c300d0 	ldrd	r0, [r3]
 1001d6c:	fa0024da 	blx	100b0dc <__aeabi_ul2f>
 1001d70:	ee070a90 	vmov	s15, r0
 1001d74:	ed9f7a27 	vldr	s14, [pc, #156]	; 1001e18 <acq_debug_dump+0x630>
 1001d78:	eec77a88 	vdiv.f32	s15, s15, s16
 1001d7c:	ee677a87 	vmul.f32	s15, s15, s14
 1001d80:	eefd7ae7 	vcvt.s32.f32	s15, s15
 1001d84:	ee173a90 	vmov	r3, s15
 1001d88:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1001d8c:	eafffea5 	b	1001828 <acq_debug_dump+0x40>
			if(time_delta_us > 0) {
 1001d90:	e5990000 	ldr	r0, [r9]
 1001d94:	e5943840 	ldr	r3, [r4, #2112]	; 0x840
 1001d98:	e5942844 	ldr	r2, [r4, #2116]	; 0x844
 1001d9c:	e5991004 	ldr	r1, [r9, #4]
 1001da0:	e0503003 	subs	r3, r0, r3
 1001da4:	eeb58ac0 	vcmpe.f32	s16, #0.0
 1001da8:	e58d3760 	str	r3, [sp, #1888]	; 0x760
 1001dac:	e0c13002 	sbc	r3, r1, r2
 1001db0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1001db4:	e58d3764 	str	r3, [sp, #1892]	; 0x764
 1001db8:	daffffde 	ble	1001d38 <acq_debug_dump+0x550>
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 1001dbc:	e28d3d1d 	add	r3, sp, #1856	; 0x740
 1001dc0:	e2833008 	add	r3, r3, #8
 1001dc4:	e1c300d0 	ldrd	r0, [r3]
 1001dc8:	fa0024c3 	blx	100b0dc <__aeabi_ul2f>
 1001dcc:	ee070a90 	vmov	s15, r0
		if(sample_delta > 0) {
 1001dd0:	e28d3e76 	add	r3, sp, #1888	; 0x760
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 1001dd4:	ed9f7a10 	vldr	s14, [pc, #64]	; 1001e1c <acq_debug_dump+0x634>
 1001dd8:	eec77a88 	vdiv.f32	s15, s15, s16
		if(sample_delta > 0) {
 1001ddc:	e1c320d0 	ldrd	r2, [r3]
 1001de0:	e1923003 	orrs	r3, r2, r3
 1001de4:	058d5748 	streq	r5, [sp, #1864]	; 0x748
				acq_rate = ((float)acq_delta / time_delta_us) * 1e6;
 1001de8:	ee677a87 	vmul.f32	s15, s15, s14
 1001dec:	eefd7ae7 	vcvt.s32.f32	s15, s15
 1001df0:	ee173a90 	vmov	r3, s15
 1001df4:	e58d3754 	str	r3, [sp, #1876]	; 0x754
		if(sample_delta > 0) {
 1001df8:	1affffd9 	bne	1001d64 <acq_debug_dump+0x57c>
 1001dfc:	eafffe89 	b	1001828 <acq_debug_dump+0x40>
 1001e00:	e3a03000 	mov	r3, #0
 1001e04:	e58d3748 	str	r3, [sp, #1864]	; 0x748
 1001e08:	e58d3754 	str	r3, [sp, #1876]	; 0x754
 1001e0c:	eafffe85 	b	1001828 <acq_debug_dump+0x40>
 1001e10:	a17f0000 	.word	0xa17f0000
 1001e14:	3f689374 	.word	0x3f689374
 1001e18:	447a0000 	.word	0x447a0000
 1001e1c:	49742400 	.word	0x49742400
 1001e20:	011612e8 	.word	0x011612e8
 1001e24:	01161ac0 	.word	0x01161ac0

01001e28 <_acq_irq_rx_handler>:
	status = XAxiDma_BdRingGetIrq(bd_ring);
 1001e28:	e5902000 	ldr	r2, [r0]
 1001e2c:	e3a00a07 	mov	r0, #28672	; 0x7000
{
 1001e30:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 1001e34:	e30142e0 	movw	r4, #4832	; 0x12e0
 1001e38:	e3404116 	movt	r4, #278	; 0x116
{
 1001e3c:	e24dd01c 	sub	sp, sp, #28
	return *(volatile u32 *) Addr;
 1001e40:	e5923004 	ldr	r3, [r2, #4]
	XAxiDma_IntrAckIrq(&g_acq_state.dma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
 1001e44:	e5941008 	ldr	r1, [r4, #8]
	if(status & XAXIDMA_IRQ_ERROR_MASK) {
 1001e48:	e2135901 	ands	r5, r3, #16384	; 0x4000
	*LocalAddr = Value;
 1001e4c:	e5810004 	str	r0, [r1, #4]
	status = XAxiDma_BdRingGetIrq(bd_ring);
 1001e50:	e0031000 	and	r1, r3, r0
 1001e54:	e5821004 	str	r1, [r2, #4]
	if(status & XAXIDMA_IRQ_ERROR_MASK) {
 1001e58:	1a000013 	bne	1001eac <_acq_irq_rx_handler+0x84>
	if(status & XAXIDMA_IRQ_IOC_MASK) {
 1001e5c:	e3130a01 	tst	r3, #4096	; 0x1000
 1001e60:	0a000006 	beq	1001e80 <_acq_irq_rx_handler+0x58>
		switch(g_acq_state.sub_state) {
 1001e64:	e5943004 	ldr	r3, [r4, #4]
 1001e68:	e3530002 	cmp	r3, #2
 1001e6c:	0a0000b4 	beq	1002144 <_acq_irq_rx_handler+0x31c>
 1001e70:	e3530003 	cmp	r3, #3
 1001e74:	0a00007a 	beq	1002064 <_acq_irq_rx_handler+0x23c>
 1001e78:	e3530001 	cmp	r3, #1
 1001e7c:	0a000027 	beq	1001f20 <_acq_irq_rx_handler+0xf8>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001e80:	e3a03000 	mov	r3, #0
 1001e84:	e3443001 	movt	r3, #16385	; 0x4001
 1001e88:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1001e8c:	e7f32052 	ubfx	r2, r2, #0, #20
 1001e90:	e5832050 	str	r2, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1001e94:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1001e98:	e3822422 	orr	r2, r2, #570425344	; 0x22000000
 1001e9c:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 1001ea0:	e5832050 	str	r2, [r3, #80]	; 0x50
}
 1001ea4:	e28dd01c 	add	sp, sp, #28
 1001ea8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001eac:	e3a05000 	mov	r5, #0
	g_acq_state.stats.num_err_total++;
 1001eb0:	e59437b8 	ldr	r3, [r4, #1976]	; 0x7b8
 1001eb4:	e3445001 	movt	r5, #16385	; 0x4001
 1001eb8:	e594c7bc 	ldr	ip, [r4, #1980]	; 0x7bc
 1001ebc:	e5952050 	ldr	r2, [r5, #80]	; 0x50
	g_acq_state.state = ACQSTATE_UNINIT;
 1001ec0:	e3a0e000 	mov	lr, #0
	g_acq_state.stats.num_err_total++;
 1001ec4:	e2933001 	adds	r3, r3, #1
	XAxiDma_Reset(&g_acq_state.dma);
 1001ec8:	e2840008 	add	r0, r4, #8
	g_acq_state.stats.num_err_total++;
 1001ecc:	e0acc00e 	adc	ip, ip, lr
 1001ed0:	e7f32052 	ubfx	r2, r2, #0, #20
 1001ed4:	e5852050 	str	r2, [r5, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1001ed8:	e5952050 	ldr	r2, [r5, #80]	; 0x50
 1001edc:	e3822433 	orr	r2, r2, #855638016	; 0x33000000
 1001ee0:	e3822603 	orr	r2, r2, #3145728	; 0x300000
 1001ee4:	e5852050 	str	r2, [r5, #80]	; 0x50
 1001ee8:	e58437b8 	str	r3, [r4, #1976]	; 0x7b8
 1001eec:	e584c7bc 	str	ip, [r4, #1980]	; 0x7bc
	g_acq_state.state = ACQSTATE_UNINIT;
 1001ef0:	e584e000 	str	lr, [r4]
	g_acq_state.sub_state = ACQSUBST_NONE;
 1001ef4:	e584e004 	str	lr, [r4, #4]
	XAxiDma_Reset(&g_acq_state.dma);
 1001ef8:	eb000b9e 	bl	1004d78 <XAxiDma_Reset>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001efc:	e5953050 	ldr	r3, [r5, #80]	; 0x50
 1001f00:	e7f33053 	ubfx	r3, r3, #0, #20
 1001f04:	e5853050 	str	r3, [r5, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1001f08:	e5953050 	ldr	r3, [r5, #80]	; 0x50
 1001f0c:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 1001f10:	e3833501 	orr	r3, r3, #4194304	; 0x400000
 1001f14:	e5853050 	str	r3, [r5, #80]	; 0x50
}
 1001f18:	e28dd01c 	add	sp, sp, #28
 1001f1c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001f20:	e3a06000 	mov	r6, #0
				error = XAxiDma_SimpleTransfer(&g_acq_state.dma, (uint32_t)g_acq_state.acq_current->buff_acq, \
 1001f24:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
 1001f28:	e3446001 	movt	r6, #16385	; 0x4001
 1001f2c:	e2840008 	add	r0, r4, #8
 1001f30:	e5962050 	ldr	r2, [r6, #80]	; 0x50
 1001f34:	e5911008 	ldr	r1, [r1, #8]
 1001f38:	e3c22802 	bic	r2, r2, #131072	; 0x20000
 1001f3c:	e3c22012 	bic	r2, r2, #18
 1001f40:	e5862050 	str	r2, [r6, #80]	; 0x50
 1001f44:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1001f48:	eb000d66 	bl	10054e8 <XAxiDma_SimpleTransfer>
				if(error != XST_SUCCESS) {
 1001f4c:	e2507000 	subs	r7, r0, #0
 1001f50:	1a000155 	bne	10024ac <_acq_irq_rx_handler+0x684>
	res = _FAB_CFG_ACCESS(reg);
 1001f54:	e5963058 	ldr	r3, [r6, #88]	; 0x58
				if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DATA_LOSS)) {
 1001f58:	e3130004 	tst	r3, #4
					g_acq_state.state = ACQSTATE_WAIT_TRIG;
 1001f5c:	03a02003 	moveq	r2, #3
 1001f60:	03a03002 	moveq	r3, #2
 1001f64:	01c420f0 	strdeq	r2, [r4]
				if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DATA_LOSS)) {
 1001f68:	1a00012d 	bne	1002424 <_acq_irq_rx_handler+0x5fc>
	_FAB_CFG_ACCESS(reg) |= data;
 1001f6c:	e3a03000 	mov	r3, #0
	for(i = 0; i < 10; i++) {
 1001f70:	e1a01003 	mov	r1, r3
 1001f74:	e3443001 	movt	r3, #16385	; 0x4001
 1001f78:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1001f7c:	e3822008 	orr	r2, r2, #8
 1001f80:	e5832050 	str	r2, [r3, #80]	; 0x50
 1001f84:	e58d1004 	str	r1, [sp, #4]
 1001f88:	e59d3004 	ldr	r3, [sp, #4]
 1001f8c:	e3530009 	cmp	r3, #9
 1001f90:	ca000006 	bgt	1001fb0 <_acq_irq_rx_handler+0x188>
		asm __volatile__("nop");
 1001f94:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 1001f98:	e59d3004 	ldr	r3, [sp, #4]
 1001f9c:	e2833001 	add	r3, r3, #1
 1001fa0:	e58d3004 	str	r3, [sp, #4]
 1001fa4:	e59d3004 	ldr	r3, [sp, #4]
 1001fa8:	e3530009 	cmp	r3, #9
 1001fac:	dafffff8 	ble	1001f94 <_acq_irq_rx_handler+0x16c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1001fb0:	e3a01000 	mov	r1, #0
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 1001fb4:	e59f2780 	ldr	r2, [pc, #1920]	; 100273c <_acq_irq_rx_handler+0x914>
 1001fb8:	e3441001 	movt	r1, #16385	; 0x4001
 1001fbc:	e3a06000 	mov	r6, #0
 1001fc0:	e591c050 	ldr	ip, [r1, #80]	; 0x50
 1001fc4:	e5120008 	ldr	r0, [r2, #-8]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1001fc8:	e1a03002 	mov	r3, r2
 1001fcc:	e5927004 	ldr	r7, [r2, #4]
 1001fd0:	e3ccc008 	bic	ip, ip, #8
 1001fd4:	e581c050 	str	ip, [r1, #80]	; 0x50
				g_acq_state.stats.num_pre_fill_total++;
 1001fd8:	e242c020 	sub	ip, r2, #32
 1001fdc:	e591e050 	ldr	lr, [r1, #80]	; 0x50
 1001fe0:	e3cee004 	bic	lr, lr, #4
 1001fe4:	e581e050 	str	lr, [r1, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1001fe8:	e591e050 	ldr	lr, [r1, #80]	; 0x50
 1001fec:	e38ee002 	orr	lr, lr, #2
 1001ff0:	e581e050 	str	lr, [r1, #80]	; 0x50
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 1001ff4:	e5941760 	ldr	r1, [r4, #1888]	; 0x760
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1001ff8:	e8124100 	ldmda	r2, {r8, lr}
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 1001ffc:	e0900001 	adds	r0, r0, r1
 1002000:	e0a88006 	adc	r8, r8, r6
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1002004:	e09e1001 	adds	r1, lr, r1
 1002008:	e1a04001 	mov	r4, r1
 100200c:	e0a71006 	adc	r1, r7, r6
 1002010:	e1a05001 	mov	r5, r1
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 1002014:	e5020008 	str	r0, [r2, #-8]
				g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 1002018:	e04343f0 	strd	r4, [r3], #-48	; 0xffffffd0
				g_acq_state.stats.num_acq_total++;
 100201c:	e9130011 	ldmdb	r3, {r0, r4}
				g_acq_state.stats.num_pre_total++;
 1002020:	e5931000 	ldr	r1, [r3]
 1002024:	e593e004 	ldr	lr, [r3, #4]
				g_acq_state.stats.num_acq_total++;
 1002028:	e2900001 	adds	r0, r0, #1
				g_acq_state.stats.num_samples += g_acq_state.pre_buffsz;
 100202c:	e5028004 	str	r8, [r2, #-4]
				g_acq_state.stats.num_pre_fill_total++;
 1002030:	e5122028 	ldr	r2, [r2, #-40]	; 0xffffffd8
				g_acq_state.stats.num_acq_total++;
 1002034:	e0a44006 	adc	r4, r4, r6
 1002038:	e5030008 	str	r0, [r3, #-8]
				g_acq_state.stats.num_pre_total++;
 100203c:	e2911001 	adds	r1, r1, #1
				g_acq_state.stats.num_pre_fill_total++;
 1002040:	e51c0004 	ldr	r0, [ip, #-4]
				g_acq_state.stats.num_pre_total++;
 1002044:	e0aee006 	adc	lr, lr, r6
				g_acq_state.stats.num_pre_fill_total++;
 1002048:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 100204c:	e5034004 	str	r4, [r3, #-4]
				g_acq_state.stats.num_pre_total++;
 1002050:	e8834002 	stm	r3, {r1, lr}
				g_acq_state.stats.num_pre_fill_total++;
 1002054:	e0a00006 	adc	r0, r0, r6
 1002058:	e50c2008 	str	r2, [ip, #-8]
 100205c:	e50c0004 	str	r0, [ip, #-4]
				break;
 1002060:	eaffff86 	b	1001e80 <_acq_irq_rx_handler+0x58>
	res = _FAB_CFG_ACCESS(reg);
 1002064:	e3a06000 	mov	r6, #0
 1002068:	e3446001 	movt	r6, #16385	; 0x4001
 100206c:	e5963058 	ldr	r3, [r6, #88]	; 0x58
				if(!fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) {
 1002070:	e2137001 	ands	r7, r3, #1
 1002074:	0a00012b 	beq	1002528 <_acq_irq_rx_handler+0x700>
	_FAB_CFG_ACCESS(reg) |= data;
 1002078:	e5963050 	ldr	r3, [r6, #80]	; 0x50
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 100207c:	e3a07004 	mov	r7, #4
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 1002080:	e2841e7d 	add	r1, r4, #2000	; 0x7d0
 1002084:	e5912000 	ldr	r2, [r1]
 1002088:	e591e004 	ldr	lr, [r1, #4]
 100208c:	e3a0c000 	mov	ip, #0
 1002090:	e1833007 	orr	r3, r3, r7
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 1002094:	e5940874 	ldr	r0, [r4, #2164]	; 0x874
 1002098:	e5863050 	str	r3, [r6, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) &= ~data;
 100209c:	e5963050 	ldr	r3, [r6, #80]	; 0x50
 10020a0:	e1d081b0 	ldrh	r8, [r0, #16]
 10020a4:	e3c33802 	bic	r3, r3, #131072	; 0x20000
 10020a8:	e3c33003 	bic	r3, r3, #3
 10020ac:	e5863050 	str	r3, [r6, #80]	; 0x50
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 10020b0:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
				g_acq_state.sub_state = ACQSUBST_DONE_WAVE;
 10020b4:	e5847004 	str	r7, [r4, #4]
				g_acq_state.state = ACQSTATE_RUNNING;
 10020b8:	e5847000 	str	r7, [r4]
				g_acq_state.stats.num_samples_raw += g_acq_state.post_buffsz;
 10020bc:	e0922003 	adds	r2, r2, r3
 10020c0:	e0aee00c 	adc	lr, lr, ip
 10020c4:	e8814004 	stm	r1, {r2, lr}
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 10020c8:	e3882001 	orr	r2, r8, #1
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 10020cc:	e2188002 	ands	r8, r8, #2
				g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_DONE;
 10020d0:	e1c021b0 	strh	r2, [r0, #16]
				if(g_acq_state.acq_current->flags & ACQBUF_FLAG_PKT_OVERRUN) {
 10020d4:	1a000095 	bne	1002330 <_acq_irq_rx_handler+0x508>
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10020d8:	e5112008 	ldr	r2, [r1, #-8]
					g_acq_state.num_acq_made++;
 10020dc:	e5949774 	ldr	r9, [r4, #1908]	; 0x774
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10020e0:	e5115004 	ldr	r5, [r1, #-4]
 10020e4:	e092e003 	adds	lr, r2, r3
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 10020e8:	e5943770 	ldr	r3, [r4, #1904]	; 0x770
					g_acq_state.num_acq_made++;
 10020ec:	e2892001 	add	r2, r9, #1
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 10020f0:	e501e008 	str	lr, [r1, #-8]
 10020f4:	e0a5c00c 	adc	ip, r5, ip
					g_acq_state.num_acq_made++;
 10020f8:	e5842774 	str	r2, [r4, #1908]	; 0x774
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 10020fc:	e1520003 	cmp	r2, r3
					g_acq_state.stats.num_samples += g_acq_state.post_buffsz;
 1002100:	e501c004 	str	ip, [r1, #-4]
					if(g_acq_state.num_acq_made >= g_acq_state.num_acq_request) {
 1002104:	2a000085 	bcs	1002320 <_acq_irq_rx_handler+0x4f8>
						if(g_acq_state.acq_current->next != NULL) {
 1002108:	e590101c 	ldr	r1, [r0, #28]
 100210c:	e3510000 	cmp	r1, #0
 1002110:	0a000170 	beq	10026d8 <_acq_irq_rx_handler+0x8b0>
							g_acq_state.acq_current = g_acq_state.acq_current->next;
 1002114:	e5841874 	str	r1, [r4, #2164]	; 0x874
							error = acq_start();
 1002118:	ebfffd2c 	bl	10015d0 <acq_start>
							if(error != ACQRES_OK) {
 100211c:	e2502000 	subs	r2, r0, #0
 1002120:	1a000172 	bne	10026f0 <_acq_irq_rx_handler+0x8c8>
				g_acq_state.stats.num_post_total++;
 1002124:	e59f2614 	ldr	r2, [pc, #1556]	; 1002740 <_acq_irq_rx_handler+0x918>
 1002128:	e5923000 	ldr	r3, [r2]
 100212c:	e5921004 	ldr	r1, [r2, #4]
 1002130:	e2933001 	adds	r3, r3, #1
 1002134:	e2a11000 	adc	r1, r1, #0
 1002138:	e5823000 	str	r3, [r2]
 100213c:	e5821004 	str	r1, [r2, #4]
				break;
 1002140:	eaffff4e 	b	1001e80 <_acq_irq_rx_handler+0x58>
	res = _FAB_CFG_ACCESS(reg);
 1002144:	e3a03000 	mov	r3, #0
 1002148:	e3443001 	movt	r3, #16385	; 0x4001
 100214c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
				if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_HAVE_TRIG)) {
 1002150:	e3120002 	tst	r2, #2
 1002154:	0a000040 	beq	100225c <_acq_irq_rx_handler+0x434>
	_FAB_CFG_ACCESS(reg) |= data;
 1002158:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 100215c:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
 1002160:	e3822010 	orr	r2, r2, #16
 1002164:	e5832050 	str	r2, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002168:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 100216c:	e3c22002 	bic	r2, r2, #2
 1002170:	e5832050 	str	r2, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1002174:	e5933058 	ldr	r3, [r3, #88]	; 0x58
					if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DATA_LOSS)) {
 1002178:	e3130004 	tst	r3, #4
 100217c:	0a000008 	beq	10021a4 <_acq_irq_rx_handler+0x37c>
						g_acq_state.stats.num_fifo_full++;
 1002180:	e59437f0 	ldr	r3, [r4, #2032]	; 0x7f0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1002184:	e1d1c1b0 	ldrh	ip, [r1, #16]
						g_acq_state.stats.num_fifo_full++;
 1002188:	e59407f4 	ldr	r0, [r4, #2036]	; 0x7f4
 100218c:	e2933001 	adds	r3, r3, #1
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1002190:	e38cc002 	orr	ip, ip, #2
						g_acq_state.stats.num_fifo_full++;
 1002194:	e2a00000 	adc	r0, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 1002198:	e1c1c1b0 	strh	ip, [r1, #16]
						g_acq_state.stats.num_fifo_full++;
 100219c:	e58437f0 	str	r3, [r4, #2032]	; 0x7f0
 10021a0:	e58407f4 	str	r0, [r4, #2036]	; 0x7f4
					addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 10021a4:	e591c008 	ldr	ip, [r1, #8]
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, addr, \
 10021a8:	e3a03001 	mov	r3, #1
					addr = ((uint32_t)g_acq_state.acq_current->buff_acq) + g_acq_state.pre_buffsz;
 10021ac:	e5941760 	ldr	r1, [r4, #1888]	; 0x760
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, addr, \
 10021b0:	e5942764 	ldr	r2, [r4, #1892]	; 0x764
 10021b4:	e59f0588 	ldr	r0, [pc, #1416]	; 1002744 <_acq_irq_rx_handler+0x91c>
 10021b8:	e08c1001 	add	r1, ip, r1
 10021bc:	eb000cc9 	bl	10054e8 <XAxiDma_SimpleTransfer>
					if(error != XST_SUCCESS) {
 10021c0:	e2506000 	subs	r6, r0, #0
 10021c4:	1a000110 	bne	100260c <_acq_irq_rx_handler+0x7e4>
	res = _FAB_CFG_ACCESS(reg);
 10021c8:	e3a01000 	mov	r1, #0
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 10021cc:	e5940874 	ldr	r0, [r4, #2164]	; 0x874
 10021d0:	e3441001 	movt	r1, #16385	; 0x4001
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10021d4:	e59f3560 	ldr	r3, [pc, #1376]	; 100273c <_acq_irq_rx_handler+0x914>
 10021d8:	e5912048 	ldr	r2, [r1, #72]	; 0x48
					g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 10021dc:	e3a0c003 	mov	ip, #3
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10021e0:	e3a05000 	mov	r5, #0
					g_acq_state.acq_current->trigger_at = fabcfg_read(FAB_CFG_ACQ_TRIGGER_PTR);
 10021e4:	e580200c 	str	r2, [r0, #12]
	_FAB_CFG_ACCESS(reg) |= data;
 10021e8:	e5912050 	ldr	r2, [r1, #80]	; 0x50
 10021ec:	e3822802 	orr	r2, r2, #131072	; 0x20000
 10021f0:	e3822006 	orr	r2, r2, #6
 10021f4:	e5812050 	str	r2, [r1, #80]	; 0x50
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 10021f8:	e590200c 	ldr	r2, [r0, #12]
 10021fc:	e8934001 	ldm	r3, {r0, lr}
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1002200:	e5131008 	ldr	r1, [r3, #-8]
					g_acq_state.sub_state = ACQSUBST_POST_TRIG;
 1002204:	e584c004 	str	ip, [r4, #4]
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1002208:	e513c004 	ldr	ip, [r3, #-4]
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 100220c:	e0900002 	adds	r0, r0, r2
 1002210:	e0aee005 	adc	lr, lr, r5
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 1002214:	e0912002 	adds	r2, r1, r2
					g_acq_state.stats.num_samples_raw += g_acq_state.acq_current->trigger_at;
 1002218:	e8834001 	stm	r3, {r0, lr}
					g_acq_state.stats.num_samples += g_acq_state.acq_current->trigger_at;
 100221c:	e0ac1005 	adc	r1, ip, r5
 1002220:	e5032008 	str	r2, [r3, #-8]
 1002224:	e5031004 	str	r1, [r3, #-4]
				g_acq_state.stats.num_acq_total++;
 1002228:	e59f3518 	ldr	r3, [pc, #1304]	; 1002748 <_acq_irq_rx_handler+0x920>
 100222c:	e9131002 	ldmdb	r3, {r1, ip}
				g_acq_state.stats.num_pre_total++;
 1002230:	e5932000 	ldr	r2, [r3]
 1002234:	e5930004 	ldr	r0, [r3, #4]
				g_acq_state.stats.num_acq_total++;
 1002238:	e2911001 	adds	r1, r1, #1
 100223c:	e2acc000 	adc	ip, ip, #0
				g_acq_state.stats.num_pre_total++;
 1002240:	e2922001 	adds	r2, r2, #1
				g_acq_state.stats.num_acq_total++;
 1002244:	e5031008 	str	r1, [r3, #-8]
				g_acq_state.stats.num_pre_total++;
 1002248:	e2a01000 	adc	r1, r0, #0
				g_acq_state.stats.num_acq_total++;
 100224c:	e503c004 	str	ip, [r3, #-4]
				g_acq_state.stats.num_pre_total++;
 1002250:	e5832000 	str	r2, [r3]
 1002254:	e5831004 	str	r1, [r3, #4]
				break;
 1002258:	eaffff08 	b	1001e80 <_acq_irq_rx_handler+0x58>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100225c:	e5931050 	ldr	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1002260:	e1a02003 	mov	r2, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002264:	e3c11002 	bic	r1, r1, #2
 1002268:	e5831050 	str	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 100226c:	e5923058 	ldr	r3, [r2, #88]	; 0x58
	while(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DONE)) ;
 1002270:	e2133001 	ands	r3, r3, #1
 1002274:	1afffffc 	bne	100226c <_acq_irq_rx_handler+0x444>
 1002278:	e5921058 	ldr	r1, [r2, #88]	; 0x58
					if(fabcfg_test(FAB_CFG_ACQ_STATUS_A, ACQ_STATUS_A_DATA_LOSS)) {
 100227c:	e3110004 	tst	r1, #4
 1002280:	1a0000be 	bne	1002580 <_acq_irq_rx_handler+0x758>
 1002284:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
					error = XAxiDma_SimpleTransfer(&g_acq_state.dma, g_acq_state.acq_current->buff_acq, \
 1002288:	e5931008 	ldr	r1, [r3, #8]
 100228c:	e3a03001 	mov	r3, #1
 1002290:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
 1002294:	e59f04a8 	ldr	r0, [pc, #1192]	; 1002744 <_acq_irq_rx_handler+0x91c>
 1002298:	eb000c92 	bl	10054e8 <XAxiDma_SimpleTransfer>
					if(error != XST_SUCCESS) {
 100229c:	e2506000 	subs	r6, r0, #0
 10022a0:	1a0000fa 	bne	1002690 <_acq_irq_rx_handler+0x868>
	_FAB_CFG_ACCESS(reg) |= data;
 10022a4:	e3a03000 	mov	r3, #0
 10022a8:	e3443001 	movt	r3, #16385	; 0x4001
 10022ac:	e5931050 	ldr	r1, [r3, #80]	; 0x50
 10022b0:	e3811008 	orr	r1, r1, #8
 10022b4:	e5831050 	str	r1, [r3, #80]	; 0x50
	for(i = 0; i < 10; i++) {
 10022b8:	e58d6008 	str	r6, [sp, #8]
 10022bc:	e59d3008 	ldr	r3, [sp, #8]
 10022c0:	e3530009 	cmp	r3, #9
 10022c4:	ca000006 	bgt	10022e4 <_acq_irq_rx_handler+0x4bc>
		asm __volatile__("nop");
 10022c8:	e320f000 	nop	{0}
	for(i = 0; i < 10; i++) {
 10022cc:	e59d3008 	ldr	r3, [sp, #8]
 10022d0:	e2833001 	add	r3, r3, #1
 10022d4:	e58d3008 	str	r3, [sp, #8]
 10022d8:	e59d3008 	ldr	r3, [sp, #8]
 10022dc:	e3530009 	cmp	r3, #9
 10022e0:	dafffff8 	ble	10022c8 <_acq_irq_rx_handler+0x4a0>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10022e4:	e3a03000 	mov	r3, #0
					g_acq_state.stats.num_samples_raw += g_acq_state.pre_buffsz;
 10022e8:	e59fc44c 	ldr	ip, [pc, #1100]	; 100273c <_acq_irq_rx_handler+0x914>
 10022ec:	e3443001 	movt	r3, #16385	; 0x4001
 10022f0:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 10022f4:	e1cc00d0 	ldrd	r0, [ip]
 10022f8:	e3c22008 	bic	r2, r2, #8
 10022fc:	e5832050 	str	r2, [r3, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1002300:	e5932050 	ldr	r2, [r3, #80]	; 0x50
 1002304:	e3822002 	orr	r2, r2, #2
 1002308:	e5832050 	str	r2, [r3, #80]	; 0x50
 100230c:	e594e760 	ldr	lr, [r4, #1888]	; 0x760
 1002310:	e090200e 	adds	r2, r0, lr
 1002314:	e2a13000 	adc	r3, r1, #0
 1002318:	e1cc20f0 	strd	r2, [ip]
 100231c:	eaffffc1 	b	1002228 <_acq_irq_rx_handler+0x400>
						g_acq_state.state = ACQSTATE_DONE;
 1002320:	e3a02005 	mov	r2, #5
 1002324:	e3a03005 	mov	r3, #5
 1002328:	e1c420f0 	strd	r2, [r4]
 100232c:	eaffff7c 	b	1002124 <_acq_irq_rx_handler+0x2fc>
					g_acq_state.stats.num_fifo_pkt_dscd++;
 1002330:	e59437f8 	ldr	r3, [r4, #2040]	; 0x7f8
 1002334:	e5961050 	ldr	r1, [r6, #80]	; 0x50
 1002338:	e59407fc 	ldr	r0, [r4, #2044]	; 0x7fc
 100233c:	e2933001 	adds	r3, r3, #1
 1002340:	e3811020 	orr	r1, r1, #32
 1002344:	e58437f8 	str	r3, [r4, #2040]	; 0x7f8
 1002348:	e0a0000c 	adc	r0, r0, ip
 100234c:	e58407fc 	str	r0, [r4, #2044]	; 0x7fc
 1002350:	e5861050 	str	r1, [r6, #80]	; 0x50
	for(i = 0; i < 20; i++) {
 1002354:	e58d5014 	str	r5, [sp, #20]
 1002358:	e59d3014 	ldr	r3, [sp, #20]
 100235c:	e3530013 	cmp	r3, #19
 1002360:	ca000006 	bgt	1002380 <_acq_irq_rx_handler+0x558>
		asm __volatile__("nop");
 1002364:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 1002368:	e59d3014 	ldr	r3, [sp, #20]
 100236c:	e2833001 	add	r3, r3, #1
 1002370:	e58d3014 	str	r3, [sp, #20]
 1002374:	e59d3014 	ldr	r3, [sp, #20]
 1002378:	e3530013 	cmp	r3, #19
 100237c:	dafffff8 	ble	1002364 <_acq_irq_rx_handler+0x53c>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002380:	e3a03000 	mov	r3, #0
 1002384:	e3443001 	movt	r3, #16385	; 0x4001
 1002388:	e5932050 	ldr	r2, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 100238c:	e1a06003 	mov	r6, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002390:	e3c22020 	bic	r2, r2, #32
 1002394:	e5832050 	str	r2, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1002398:	e5963050 	ldr	r3, [r6, #80]	; 0x50
	while(fabcfg_test(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET)) ;
 100239c:	e2135020 	ands	r5, r3, #32
 10023a0:	1afffffc 	bne	1002398 <_acq_irq_rx_handler+0x570>
					error = acq_start();
 10023a4:	ebfffc89 	bl	10015d0 <acq_start>
					if(error != ACQRES_OK) {
 10023a8:	e2502000 	subs	r2, r0, #0
 10023ac:	0affff5c 	beq	1002124 <_acq_irq_rx_handler+0x2fc>
						d_printf(D_ERROR, "acquire: unable to reset current transfer, error %d", error);
 10023b0:	e3071a98 	movw	r1, #31384	; 0x7a98
 10023b4:	e3a00004 	mov	r0, #4
 10023b8:	e3401105 	movt	r1, #261	; 0x105
 10023bc:	eb00060b 	bl	1003bf0 <d_printf>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10023c0:	e5963050 	ldr	r3, [r6, #80]	; 0x50
	g_acq_state.stats.num_err_total++;
 10023c4:	e59f1380 	ldr	r1, [pc, #896]	; 100274c <_acq_irq_rx_handler+0x924>
	XAxiDma_Reset(&g_acq_state.dma);
 10023c8:	e59f0374 	ldr	r0, [pc, #884]	; 1002744 <_acq_irq_rx_handler+0x91c>
 10023cc:	e7f33053 	ubfx	r3, r3, #0, #20
 10023d0:	e5863050 	str	r3, [r6, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 10023d4:	e5962050 	ldr	r2, [r6, #80]	; 0x50
	g_acq_state.stats.num_err_total++;
 10023d8:	e9111008 	ldmdb	r1, {r3, ip}
 10023dc:	e3822433 	orr	r2, r2, #855638016	; 0x33000000
 10023e0:	e3822603 	orr	r2, r2, #3145728	; 0x300000
 10023e4:	e2933001 	adds	r3, r3, #1
 10023e8:	e5862050 	str	r2, [r6, #80]	; 0x50
 10023ec:	e2ac2000 	adc	r2, ip, #0
	g_acq_state.state = ACQSTATE_UNINIT;
 10023f0:	e5845000 	str	r5, [r4]
	g_acq_state.sub_state = ACQSUBST_NONE;
 10023f4:	e5845004 	str	r5, [r4, #4]
	g_acq_state.stats.num_err_total++;
 10023f8:	e5013008 	str	r3, [r1, #-8]
 10023fc:	e5012004 	str	r2, [r1, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1002400:	eb000a5c 	bl	1004d78 <XAxiDma_Reset>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002404:	e5963050 	ldr	r3, [r6, #80]	; 0x50
 1002408:	e7f33053 	ubfx	r3, r3, #0, #20
 100240c:	e5863050 	str	r3, [r6, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 1002410:	e5963050 	ldr	r3, [r6, #80]	; 0x50
 1002414:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 1002418:	e3833501 	orr	r3, r3, #4194304	; 0x400000
 100241c:	e5863050 	str	r3, [r6, #80]	; 0x50
	return;
 1002420:	eafffe9f 	b	1001ea4 <_acq_irq_rx_handler+0x7c>
 1002424:	e5963050 	ldr	r3, [r6, #80]	; 0x50
 1002428:	e3833020 	orr	r3, r3, #32
 100242c:	e5863050 	str	r3, [r6, #80]	; 0x50
	for(i = 0; i < 20; i++) {
 1002430:	e58d700c 	str	r7, [sp, #12]
 1002434:	e59d300c 	ldr	r3, [sp, #12]
 1002438:	e3530013 	cmp	r3, #19
 100243c:	ca000006 	bgt	100245c <_acq_irq_rx_handler+0x634>
		asm __volatile__("nop");
 1002440:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 1002444:	e59d300c 	ldr	r3, [sp, #12]
 1002448:	e2833001 	add	r3, r3, #1
 100244c:	e58d300c 	str	r3, [sp, #12]
 1002450:	e59d300c 	ldr	r3, [sp, #12]
 1002454:	e3530013 	cmp	r3, #19
 1002458:	dafffff8 	ble	1002440 <_acq_irq_rx_handler+0x618>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100245c:	e3a03000 	mov	r3, #0
 1002460:	e3443001 	movt	r3, #16385	; 0x4001
 1002464:	e5931050 	ldr	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1002468:	e1a02003 	mov	r2, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 100246c:	e3c11020 	bic	r1, r1, #32
 1002470:	e5831050 	str	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 1002474:	e5923050 	ldr	r3, [r2, #80]	; 0x50
	while(fabcfg_test(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET)) ;
 1002478:	e3130020 	tst	r3, #32
 100247c:	1afffffc 	bne	1002474 <_acq_irq_rx_handler+0x64c>
					g_acq_state.stats.num_fifo_full++;
 1002480:	e59f22c8 	ldr	r2, [pc, #712]	; 1002750 <_acq_irq_rx_handler+0x928>
					g_acq_state.state = ACQSTATE_PREP;
 1002484:	e3a01001 	mov	r1, #1
 1002488:	e3a00002 	mov	r0, #2
 100248c:	e1c400f0 	strd	r0, [r4]
					g_acq_state.stats.num_fifo_full++;
 1002490:	e5923000 	ldr	r3, [r2]
 1002494:	e5921004 	ldr	r1, [r2, #4]
 1002498:	e2933001 	adds	r3, r3, #1
 100249c:	e2a11000 	adc	r1, r1, #0
 10024a0:	e5823000 	str	r3, [r2]
 10024a4:	e5821004 	str	r1, [r2, #4]
 10024a8:	eafffeaf 	b	1001f6c <_acq_irq_rx_handler+0x144>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10024ac:	e5961050 	ldr	r1, [r6, #80]	; 0x50
	XAxiDma_Reset(&g_acq_state.dma);
 10024b0:	e2840008 	add	r0, r4, #8
	g_acq_state.stats.num_err_total++;
 10024b4:	e59437b8 	ldr	r3, [r4, #1976]	; 0x7b8
 10024b8:	e594c7bc 	ldr	ip, [r4, #1980]	; 0x7bc
 10024bc:	e7f31051 	ubfx	r1, r1, #0, #20
 10024c0:	e5861050 	str	r1, [r6, #80]	; 0x50
 10024c4:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) |= data;
 10024c8:	e5961050 	ldr	r1, [r6, #80]	; 0x50
 10024cc:	e2acc000 	adc	ip, ip, #0
 10024d0:	e3811433 	orr	r1, r1, #855638016	; 0x33000000
 10024d4:	e3811603 	orr	r1, r1, #3145728	; 0x300000
 10024d8:	e5861050 	str	r1, [r6, #80]	; 0x50
 10024dc:	e58437b8 	str	r3, [r4, #1976]	; 0x7b8
	g_acq_state.state = ACQSTATE_UNINIT;
 10024e0:	e5845000 	str	r5, [r4]
	g_acq_state.sub_state = ACQSUBST_NONE;
 10024e4:	e5845004 	str	r5, [r4, #4]
	g_acq_state.stats.num_err_total++;
 10024e8:	e584c7bc 	str	ip, [r4, #1980]	; 0x7bc
	XAxiDma_Reset(&g_acq_state.dma);
 10024ec:	eb000a21 	bl	1004d78 <XAxiDma_Reset>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10024f0:	e5963050 	ldr	r3, [r6, #80]	; 0x50
					d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 10024f4:	e3071a28 	movw	r1, #31272	; 0x7a28
 10024f8:	e1a02007 	mov	r2, r7
 10024fc:	e3401105 	movt	r1, #261	; 0x105
 1002500:	e3a00004 	mov	r0, #4
 1002504:	e7f33053 	ubfx	r3, r3, #0, #20
 1002508:	e5863050 	str	r3, [r6, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 100250c:	e5963050 	ldr	r3, [r6, #80]	; 0x50
 1002510:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 1002514:	e3833501 	orr	r3, r3, #4194304	; 0x400000
 1002518:	e5863050 	str	r3, [r6, #80]	; 0x50
}
 100251c:	e28dd01c 	add	sp, sp, #28
 1002520:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1002524:	ea0005b1 	b	1003bf0 <d_printf>
					d_printf(D_ERROR, "acquire: PL reports not done, but DMA complete! (0x%08x)", fabcfg_read(FAB_CFG_ACQ_STATUS_A));
 1002528:	e3071a5c 	movw	r1, #31324	; 0x7a5c
	res = _FAB_CFG_ACCESS(reg);
 100252c:	e5962058 	ldr	r2, [r6, #88]	; 0x58
 1002530:	e3a00004 	mov	r0, #4
 1002534:	e3401105 	movt	r1, #261	; 0x105
 1002538:	eb0005ac 	bl	1003bf0 <d_printf>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100253c:	e5962050 	ldr	r2, [r6, #80]	; 0x50
	XAxiDma_Reset(&g_acq_state.dma);
 1002540:	e2840008 	add	r0, r4, #8
	g_acq_state.stats.num_err_total++;
 1002544:	e59437b8 	ldr	r3, [r4, #1976]	; 0x7b8
 1002548:	e594c7bc 	ldr	ip, [r4, #1980]	; 0x7bc
 100254c:	e7f32052 	ubfx	r2, r2, #0, #20
 1002550:	e5862050 	str	r2, [r6, #80]	; 0x50
 1002554:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) |= data;
 1002558:	e5962050 	ldr	r2, [r6, #80]	; 0x50
 100255c:	e2acc000 	adc	ip, ip, #0
 1002560:	e3822433 	orr	r2, r2, #855638016	; 0x33000000
 1002564:	e3822603 	orr	r2, r2, #3145728	; 0x300000
 1002568:	e5862050 	str	r2, [r6, #80]	; 0x50
	g_acq_state.state = ACQSTATE_UNINIT;
 100256c:	e5847000 	str	r7, [r4]
	g_acq_state.sub_state = ACQSUBST_NONE;
 1002570:	e5847004 	str	r7, [r4, #4]
	g_acq_state.stats.num_err_total++;
 1002574:	e58437b8 	str	r3, [r4, #1976]	; 0x7b8
 1002578:	e584c7bc 	str	ip, [r4, #1980]	; 0x7bc
 100257c:	eaffff9f 	b	1002400 <_acq_irq_rx_handler+0x5d8>
 1002580:	e5921050 	ldr	r1, [r2, #80]	; 0x50
 1002584:	e3811020 	orr	r1, r1, #32
 1002588:	e5821050 	str	r1, [r2, #80]	; 0x50
	for(i = 0; i < 20; i++) {
 100258c:	e58d3010 	str	r3, [sp, #16]
 1002590:	e59d3010 	ldr	r3, [sp, #16]
 1002594:	e3530013 	cmp	r3, #19
 1002598:	ca000006 	bgt	10025b8 <_acq_irq_rx_handler+0x790>
		asm __volatile__("nop");
 100259c:	e320f000 	nop	{0}
	for(i = 0; i < 20; i++) {
 10025a0:	e59d3010 	ldr	r3, [sp, #16]
 10025a4:	e2833001 	add	r3, r3, #1
 10025a8:	e58d3010 	str	r3, [sp, #16]
 10025ac:	e59d3010 	ldr	r3, [sp, #16]
 10025b0:	e3530013 	cmp	r3, #19
 10025b4:	dafffff8 	ble	100259c <_acq_irq_rx_handler+0x774>
	_FAB_CFG_ACCESS(reg) &= ~data;
 10025b8:	e3a03000 	mov	r3, #0
 10025bc:	e3443001 	movt	r3, #16385	; 0x4001
 10025c0:	e5931050 	ldr	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 10025c4:	e1a02003 	mov	r2, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 10025c8:	e3c11020 	bic	r1, r1, #32
 10025cc:	e5831050 	str	r1, [r3, #80]	; 0x50
	res = _FAB_CFG_ACCESS(reg);
 10025d0:	e5923050 	ldr	r3, [r2, #80]	; 0x50
	while(fabcfg_test(FAB_CFG_ACQ_CTRL_A, ACQ_CTRL_A_FIFO_RESET)) ;
 10025d4:	e3130020 	tst	r3, #32
 10025d8:	1afffffc 	bne	10025d0 <_acq_irq_rx_handler+0x7a8>
						g_acq_state.stats.num_fifo_full++;
 10025dc:	e59f116c 	ldr	r1, [pc, #364]	; 1002750 <_acq_irq_rx_handler+0x928>
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10025e0:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
						g_acq_state.stats.num_fifo_full++;
 10025e4:	e5912000 	ldr	r2, [r1]
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10025e8:	e1d3c1b0 	ldrh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 10025ec:	e5910004 	ldr	r0, [r1, #4]
 10025f0:	e2922001 	adds	r2, r2, #1
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10025f4:	e38cc002 	orr	ip, ip, #2
						g_acq_state.stats.num_fifo_full++;
 10025f8:	e2a00000 	adc	r0, r0, #0
						g_acq_state.acq_current->flags |= ACQBUF_FLAG_PKT_OVERRUN;
 10025fc:	e1c3c1b0 	strh	ip, [r3, #16]
						g_acq_state.stats.num_fifo_full++;
 1002600:	e5812000 	str	r2, [r1]
 1002604:	e5810004 	str	r0, [r1, #4]
 1002608:	eaffff1e 	b	1002288 <_acq_irq_rx_handler+0x460>
	_FAB_CFG_ACCESS(reg) &= ~data;
 100260c:	e3a05000 	mov	r5, #0
	g_acq_state.stats.num_err_total++;
 1002610:	e59f2134 	ldr	r2, [pc, #308]	; 100274c <_acq_irq_rx_handler+0x924>
 1002614:	e3445001 	movt	r5, #16385	; 0x4001
	g_acq_state.state = ACQSTATE_UNINIT;
 1002618:	e3a0c000 	mov	ip, #0
 100261c:	e5951050 	ldr	r1, [r5, #80]	; 0x50
	g_acq_state.stats.num_err_total++;
 1002620:	e5123008 	ldr	r3, [r2, #-8]
 1002624:	e5120004 	ldr	r0, [r2, #-4]
 1002628:	e7f31051 	ubfx	r1, r1, #0, #20
 100262c:	e5851050 	str	r1, [r5, #80]	; 0x50
 1002630:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) |= data;
 1002634:	e5951050 	ldr	r1, [r5, #80]	; 0x50
 1002638:	e0a0000c 	adc	r0, r0, ip
 100263c:	e3811433 	orr	r1, r1, #855638016	; 0x33000000
 1002640:	e3811603 	orr	r1, r1, #3145728	; 0x300000
 1002644:	e5851050 	str	r1, [r5, #80]	; 0x50
 1002648:	e5023008 	str	r3, [r2, #-8]
 100264c:	e5020004 	str	r0, [r2, #-4]
	XAxiDma_Reset(&g_acq_state.dma);
 1002650:	e59f00ec 	ldr	r0, [pc, #236]	; 1002744 <_acq_irq_rx_handler+0x91c>
	g_acq_state.state = ACQSTATE_UNINIT;
 1002654:	e584c000 	str	ip, [r4]
	g_acq_state.sub_state = ACQSUBST_NONE;
 1002658:	e584c004 	str	ip, [r4, #4]
	XAxiDma_Reset(&g_acq_state.dma);
 100265c:	eb0009c5 	bl	1004d78 <XAxiDma_Reset>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002660:	e5953050 	ldr	r3, [r5, #80]	; 0x50
						d_printf(D_ERROR, "acquire: unable to start transfer in IRQ, error %d", error);
 1002664:	e3071a28 	movw	r1, #31272	; 0x7a28
 1002668:	e1a02006 	mov	r2, r6
 100266c:	e3401105 	movt	r1, #261	; 0x105
 1002670:	e3a00004 	mov	r0, #4
 1002674:	e7f33053 	ubfx	r3, r3, #0, #20
 1002678:	e5853050 	str	r3, [r5, #80]	; 0x50
	_FAB_CFG_ACCESS(reg) |= data;
 100267c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
 1002680:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 1002684:	e3833501 	orr	r3, r3, #4194304	; 0x400000
 1002688:	e5853050 	str	r3, [r5, #80]	; 0x50
 100268c:	eaffffa2 	b	100251c <_acq_irq_rx_handler+0x6f4>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002690:	e3a05000 	mov	r5, #0
	g_acq_state.stats.num_err_total++;
 1002694:	e59f10b0 	ldr	r1, [pc, #176]	; 100274c <_acq_irq_rx_handler+0x924>
 1002698:	e3445001 	movt	r5, #16385	; 0x4001
	g_acq_state.state = ACQSTATE_UNINIT;
 100269c:	e3a0c000 	mov	ip, #0
 10026a0:	e5952050 	ldr	r2, [r5, #80]	; 0x50
	g_acq_state.stats.num_err_total++;
 10026a4:	e5113008 	ldr	r3, [r1, #-8]
 10026a8:	e5110004 	ldr	r0, [r1, #-4]
 10026ac:	e7f32052 	ubfx	r2, r2, #0, #20
 10026b0:	e5852050 	str	r2, [r5, #80]	; 0x50
 10026b4:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) |= data;
 10026b8:	e5952050 	ldr	r2, [r5, #80]	; 0x50
 10026bc:	e0a0000c 	adc	r0, r0, ip
 10026c0:	e3822433 	orr	r2, r2, #855638016	; 0x33000000
 10026c4:	e3822603 	orr	r2, r2, #3145728	; 0x300000
 10026c8:	e5852050 	str	r2, [r5, #80]	; 0x50
 10026cc:	e5013008 	str	r3, [r1, #-8]
 10026d0:	e5010004 	str	r0, [r1, #-4]
 10026d4:	eaffffdd 	b	1002650 <_acq_irq_rx_handler+0x828>
							d_printf(D_ERROR, "acquire: NULL deref trying to move to next wavebuffer; something's wrong! (%d acq made, %d requested)", \
 10026d8:	e3071b00 	movw	r1, #31488	; 0x7b00
 10026dc:	e1a00007 	mov	r0, r7
 10026e0:	e3401105 	movt	r1, #261	; 0x105
 10026e4:	eb000541 	bl	1003bf0 <d_printf>
							acq_debug_dump();
 10026e8:	ebfffc3e 	bl	10017e8 <acq_debug_dump>
 10026ec:	eafffe8c 	b	1002124 <_acq_irq_rx_handler+0x2fc>
								d_printf(D_ERROR, "acquire: unable to start next transfer, error %d", error);
 10026f0:	e3071acc 	movw	r1, #31436	; 0x7acc
 10026f4:	e1a00007 	mov	r0, r7
 10026f8:	e3401105 	movt	r1, #261	; 0x105
 10026fc:	eb00053b 	bl	1003bf0 <d_printf>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1002700:	e5962050 	ldr	r2, [r6, #80]	; 0x50
	XAxiDma_Reset(&g_acq_state.dma);
 1002704:	e2840008 	add	r0, r4, #8
	g_acq_state.stats.num_err_total++;
 1002708:	e59437b8 	ldr	r3, [r4, #1976]	; 0x7b8
 100270c:	e594c7bc 	ldr	ip, [r4, #1980]	; 0x7bc
 1002710:	e7f32052 	ubfx	r2, r2, #0, #20
 1002714:	e5862050 	str	r2, [r6, #80]	; 0x50
 1002718:	e2933001 	adds	r3, r3, #1
	_FAB_CFG_ACCESS(reg) |= data;
 100271c:	e5962050 	ldr	r2, [r6, #80]	; 0x50
 1002720:	e2acc000 	adc	ip, ip, #0
 1002724:	e3822433 	orr	r2, r2, #855638016	; 0x33000000
 1002728:	e3822603 	orr	r2, r2, #3145728	; 0x300000
 100272c:	e5862050 	str	r2, [r6, #80]	; 0x50
	g_acq_state.state = ACQSTATE_UNINIT;
 1002730:	e5848000 	str	r8, [r4]
	g_acq_state.sub_state = ACQSUBST_NONE;
 1002734:	e5848004 	str	r8, [r4, #4]
 1002738:	eaffff8d 	b	1002574 <_acq_irq_rx_handler+0x74c>
 100273c:	01161ab0 	.word	0x01161ab0
 1002740:	01161a90 	.word	0x01161a90
 1002744:	011612e8 	.word	0x011612e8
 1002748:	01161a80 	.word	0x01161a80
 100274c:	01161aa0 	.word	0x01161aa0
 1002750:	01161ad0 	.word	0x01161ad0

01002754 <acq_debug_dump_waveraw>:

/*
 * Dump raw contents of buffer in active acquisition.
 */
void acq_debug_dump_waveraw()
{
 1002754:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	uint32_t sz;
	uint32_t i;

	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
		sz = g_acq_state.pre_buffsz;
 1002758:	e30152e0 	movw	r5, #4832	; 0x12e0
 100275c:	e3405116 	movt	r5, #278	; 0x116
	}

	sz /= 4;

	for(i = 0; i <= sz; i += 2) {
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 1002760:	e3077bc8 	movw	r7, #31688	; 0x7bc8
 1002764:	e3407105 	movt	r7, #261	; 0x105
		sz = g_acq_state.pre_buffsz;
 1002768:	e3a04000 	mov	r4, #0
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 100276c:	e5953004 	ldr	r3, [r5, #4]
{
 1002770:	e24dd00c 	sub	sp, sp, #12
		sz = g_acq_state.pre_buffsz;
 1002774:	e5952760 	ldr	r2, [r5, #1888]	; 0x760
	if(g_acq_state.sub_state == ACQSUBST_PRE_TRIG_FILL || g_acq_state.sub_state == ACQSUBST_PRE_TRIG_WAIT) {
 1002778:	e2433001 	sub	r3, r3, #1
 100277c:	e3530001 	cmp	r3, #1
		sz = g_acq_state.post_buffsz;
 1002780:	85956764 	ldrhi	r6, [r5, #1892]	; 0x764
		sz = g_acq_state.pre_buffsz;
 1002784:	91a06002 	movls	r6, r2
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1002788:	93071b68 	movwls	r1, #31592	; 0x7b68
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100278c:	83071b98 	movwhi	r1, #31640	; 0x7b98
		d_printf(D_INFO, "** Waveform Data (Pre-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 1002790:	93401105 	movtls	r1, #261	; 0x105
 1002794:	93a00002 	movls	r0, #2
 1002798:	e3c66007 	bic	r6, r6, #7
		d_printf(D_INFO, "** Waveform Data (Post-Trigger) -- %d bytes **", g_acq_state.pre_buffsz);
 100279c:	83401105 	movthi	r1, #261	; 0x105
 10027a0:	e2866008 	add	r6, r6, #8
 10027a4:	83a00002 	movhi	r0, #2
 10027a8:	eb000510 	bl	1003bf0 <d_printf>
		d_printf(D_INFO, "0x%08x: 0x%08x 0x%08x", i * 4, *(g_acq_state.acq_current->buff_acq + i), *(g_acq_state.acq_current->buff_acq + i + 1));
 10027ac:	e5953874 	ldr	r3, [r5, #2164]	; 0x874
 10027b0:	e1a02004 	mov	r2, r4
 10027b4:	e1a01007 	mov	r1, r7
 10027b8:	e3a00002 	mov	r0, #2
 10027bc:	e593c008 	ldr	ip, [r3, #8]
 10027c0:	e7bc3004 	ldr	r3, [ip, r4]!
 10027c4:	e2844008 	add	r4, r4, #8
 10027c8:	e59cc004 	ldr	ip, [ip, #4]
 10027cc:	e58dc000 	str	ip, [sp]
 10027d0:	eb000506 	bl	1003bf0 <d_printf>
	for(i = 0; i <= sz; i += 2) {
 10027d4:	e1560004 	cmp	r6, r4
 10027d8:	1afffff3 	bne	10027ac <acq_debug_dump_waveraw+0x58>
	}

	d_printf(D_INFO, "** End of Waveform Data **");
 10027dc:	e3071be0 	movw	r1, #31712	; 0x7be0
 10027e0:	e3a00002 	mov	r0, #2
 10027e4:	e3401105 	movt	r1, #261	; 0x105
}
 10027e8:	e28dd00c 	add	sp, sp, #12
 10027ec:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "** End of Waveform Data **");
 10027f0:	ea0004fe 	b	1003bf0 <d_printf>

010027f4 <acq_get_ll_pointer>:
 * @return	ACQRES_OK if waveform found (trigger state disregarded)
 * 			ACQRES_WAVE_NOT_FOUND if... well... the waveform wasn't found
 */
int acq_get_ll_pointer(int index, struct acq_buffer_t **buff)
{
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 10027f4:	e30132e0 	movw	r3, #4832	; 0x12e0
 10027f8:	e3403116 	movt	r3, #278	; 0x116
 10027fc:	e5933870 	ldr	r3, [r3, #2160]	; 0x870

	while(wave != NULL) {
 1002800:	e3530000 	cmp	r3, #0
 1002804:	0a000009 	beq	1002830 <acq_get_ll_pointer+0x3c>
		//d_printf(D_EXINFO, "explore: 0x%08x (%d) (buff_acq:0x%08x, trigger_at:0x%08x %d)", \
				wave, wave->idx, wave->buff_acq, wave->trigger_at, wave->trigger_at);

		if(wave->idx == index)
 1002808:	e5932000 	ldr	r2, [r3]
 100280c:	e1500002 	cmp	r0, r2
 1002810:	1a000003 	bne	1002824 <acq_get_ll_pointer+0x30>
 1002814:	ea00000d 	b	1002850 <acq_get_ll_pointer+0x5c>
 1002818:	e5932000 	ldr	r2, [r3]
 100281c:	e1520000 	cmp	r2, r0
 1002820:	0a00000a 	beq	1002850 <acq_get_ll_pointer+0x5c>
			break;

		wave = wave->next;
 1002824:	e593301c 	ldr	r3, [r3, #28]
	while(wave != NULL) {
 1002828:	e3530000 	cmp	r3, #0
 100282c:	1afffff9 	bne	1002818 <acq_get_ll_pointer+0x24>
	}

	if(wave == NULL) {
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1002830:	e3071bfc 	movw	r1, #31740	; 0x7bfc
 1002834:	e1a02000 	mov	r2, r0
{
 1002838:	e92d4010 	push	{r4, lr}
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 100283c:	e3401105 	movt	r1, #261	; 0x105
 1002840:	e3a00004 	mov	r0, #4
 1002844:	eb0004e9 	bl	1003bf0 <d_printf>
 1002848:	e3e00008 	mvn	r0, #8
		return ACQRES_WAVE_NOT_FOUND;
	}

	*buff = wave;
	return ACQRES_OK;
}
 100284c:	e8bd8010 	pop	{r4, pc}
	return ACQRES_OK;
 1002850:	e3a00000 	mov	r0, #0
	*buff = wave;
 1002854:	e5813000 	str	r3, [r1]
}
 1002858:	e12fff1e 	bx	lr

0100285c <acq_debug_dump_wave>:
 * Dump information from a wave N.
 *
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 */
void acq_debug_dump_wave(int index)
{
 100285c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002860:	e30162e0 	movw	r6, #4832	; 0x12e0
 1002864:	e3406116 	movt	r6, #278	; 0x116
{
 1002868:	e24dd008 	sub	sp, sp, #8
 100286c:	e1a05000 	mov	r5, r0
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002870:	e5964870 	ldr	r4, [r6, #2160]	; 0x870
	while(wave != NULL) {
 1002874:	e3540000 	cmp	r4, #0
 1002878:	0a000009 	beq	10028a4 <acq_debug_dump_wave+0x48>
		if(wave->idx == index)
 100287c:	e5943000 	ldr	r3, [r4]
 1002880:	e1530000 	cmp	r3, r0
 1002884:	1a000003 	bne	1002898 <acq_debug_dump_wave+0x3c>
 1002888:	ea000011 	b	10028d4 <acq_debug_dump_wave+0x78>
 100288c:	e5943000 	ldr	r3, [r4]
 1002890:	e1550003 	cmp	r5, r3
 1002894:	0a00000e 	beq	10028d4 <acq_debug_dump_wave+0x78>
		wave = wave->next;
 1002898:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 100289c:	e3540000 	cmp	r4, #0
 10028a0:	1afffff9 	bne	100288c <acq_debug_dump_wave+0x30>
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 10028a4:	e3071bfc 	movw	r1, #31740	; 0x7bfc
 10028a8:	e1a02005 	mov	r2, r5
 10028ac:	e3401105 	movt	r1, #261	; 0x105
 10028b0:	e3a00004 	mov	r0, #4
 10028b4:	eb0004cd 	bl	1003bf0 <d_printf>
	uint32_t *addr2;
	uint32_t *deref;
	int first, i;

	if(acq_get_ll_pointer(index, &wave) != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 10028b8:	e3071ccc 	movw	r1, #31948	; 0x7ccc
 10028bc:	e1a02005 	mov	r2, r5
 10028c0:	e3401105 	movt	r1, #261	; 0x105
 10028c4:	e3a00004 	mov	r0, #4
	} else {
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
	}

	d_printf(D_INFO, "");
}
 10028c8:	e28dd008 	add	sp, sp, #8
 10028cc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 10028d0:	ea0004c6 	b	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 10028d4:	e3091478 	movw	r1, #38008	; 0x9478
 10028d8:	e3a00002 	mov	r0, #2
 10028dc:	e3401105 	movt	r1, #261	; 0x105
 10028e0:	eb0004c2 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "** Waveinfo for index %d **", index);
 10028e4:	e3071d00 	movw	r1, #32000	; 0x7d00
 10028e8:	e1a02005 	mov	r2, r5
 10028ec:	e3401105 	movt	r1, #261	; 0x105
 10028f0:	e3a00002 	mov	r0, #2
 10028f4:	eb0004bd 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 10028f8:	e3091478 	movw	r1, #38008	; 0x9478
 10028fc:	e3a00002 	mov	r0, #2
 1002900:	e3401105 	movt	r1, #261	; 0x105
 1002904:	eb0004b9 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "buff_acq address      = 0x%08x", wave->buff_acq);
 1002908:	e3071d1c 	movw	r1, #32028	; 0x7d1c
 100290c:	e5942008 	ldr	r2, [r4, #8]
 1002910:	e3401105 	movt	r1, #261	; 0x105
 1002914:	e3a00002 	mov	r0, #2
 1002918:	eb0004b4 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "buff_alloc address    = 0x%08x", wave->buff_alloc);
 100291c:	e3071d3c 	movw	r1, #32060	; 0x7d3c
 1002920:	e5942004 	ldr	r2, [r4, #4]
 1002924:	e3401105 	movt	r1, #261	; 0x105
 1002928:	e3a00002 	mov	r0, #2
 100292c:	eb0004af 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 1002930:	e3091478 	movw	r1, #38008	; 0x9478
 1002934:	e3a00002 	mov	r0, #2
 1002938:	e3401105 	movt	r1, #261	; 0x105
 100293c:	eb0004ab 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "idx                   = %d", wave->idx);
 1002940:	e3071d5c 	movw	r1, #32092	; 0x7d5c
 1002944:	e5942000 	ldr	r2, [r4]
 1002948:	e3401105 	movt	r1, #261	; 0x105
 100294c:	e3a00002 	mov	r0, #2
 1002950:	eb0004a6 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "flags                 = 0x%04x", wave->flags);
 1002954:	e3071d78 	movw	r1, #32120	; 0x7d78
 1002958:	e1d421b0 	ldrh	r2, [r4, #16]
 100295c:	e3401105 	movt	r1, #261	; 0x105
 1002960:	e3a00002 	mov	r0, #2
 1002964:	eb0004a1 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "trigger_at            = 0x%08x", wave->trigger_at);
 1002968:	e3071d98 	movw	r1, #32152	; 0x7d98
 100296c:	e594200c 	ldr	r2, [r4, #12]
 1002970:	e3401105 	movt	r1, #261	; 0x105
 1002974:	e3a00002 	mov	r0, #2
 1002978:	eb00049c 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "trigger_at(div8)      = 0x%08x (%d)", wave->trigger_at >> 3, wave->trigger_at >> 3);
 100297c:	e594300c 	ldr	r3, [r4, #12]
 1002980:	e3071db8 	movw	r1, #32184	; 0x7db8
 1002984:	e3401105 	movt	r1, #261	; 0x105
 1002988:	e3a00002 	mov	r0, #2
 100298c:	e1a031a3 	lsr	r3, r3, #3
 1002990:	e1a02003 	mov	r2, r3
 1002994:	eb000495 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "trigger_at(div16)     = 0x%08x (%d)", wave->trigger_at >> 4, wave->trigger_at >> 4);
 1002998:	e594300c 	ldr	r3, [r4, #12]
 100299c:	e3071ddc 	movw	r1, #32220	; 0x7ddc
 10029a0:	e3401105 	movt	r1, #261	; 0x105
 10029a4:	e3a00002 	mov	r0, #2
 10029a8:	e1a03223 	lsr	r3, r3, #4
 10029ac:	e1a02003 	mov	r2, r3
 10029b0:	eb00048e 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 10029b4:	e3091478 	movw	r1, #38008	; 0x9478
 10029b8:	e3a00002 	mov	r0, #2
 10029bc:	e3401105 	movt	r1, #261	; 0x105
 10029c0:	eb00048a 	bl	1003bf0 <d_printf>
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 10029c4:	e594300c 	ldr	r3, [r4, #12]
 10029c8:	e3530000 	cmp	r3, #0
 10029cc:	ba000002 	blt	10029dc <acq_debug_dump_wave+0x180>
 10029d0:	e1d431b0 	ldrh	r3, [r4, #16]
 10029d4:	e3130001 	tst	r3, #1
 10029d8:	1a00000a 	bne	1002a08 <acq_debug_dump_wave+0x1ac>
		d_printf(D_ERROR, "Trigger invalid for waveindex %d or wave not done", index);
 10029dc:	e3071c98 	movw	r1, #31896	; 0x7c98
 10029e0:	e1a02005 	mov	r2, r5
 10029e4:	e3401105 	movt	r1, #261	; 0x105
 10029e8:	e3a00004 	mov	r0, #4
 10029ec:	eb00047f 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 10029f0:	e3091478 	movw	r1, #38008	; 0x9478
 10029f4:	e3a00002 	mov	r0, #2
 10029f8:	e3401105 	movt	r1, #261	; 0x105
}
 10029fc:	e28dd008 	add	sp, sp, #8
 1002a00:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	d_printf(D_INFO, "");
 1002a04:	ea000479 	b	1003bf0 <d_printf>
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 1002a08:	e5961768 	ldr	r1, [r6, #1896]	; 0x768
 1002a0c:	e5940008 	ldr	r0, [r4, #8]
 1002a10:	eb001a68 	bl	10093b8 <Xil_DCacheInvalidateRange>
		dmb();
 1002a14:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 1002a18:	e594700c 	ldr	r7, [r4, #12]
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 1002a1c:	e3a03000 	mov	r3, #0
		end = g_acq_state.pre_sampct * 2;
 1002a20:	e5969778 	ldr	r9, [r6, #1912]	; 0x778
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 1002a24:	e3071c18 	movw	r1, #31768	; 0x7c18
 1002a28:	e58d3000 	str	r3, [sp]
 1002a2c:	e3401105 	movt	r1, #261	; 0x105
 1002a30:	e3a00002 	mov	r0, #2
		start = (((wave->trigger_at >> 3) + 1) * 2);
 1002a34:	e1a071a7 	lsr	r7, r7, #3
		end = g_acq_state.pre_sampct * 2;
 1002a38:	e1a09089 	lsl	r9, r9, #1
		start = (((wave->trigger_at >> 3) + 1) * 2);
 1002a3c:	e2877001 	add	r7, r7, #1
 1002a40:	e1a08087 	lsl	r8, r7, #1
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 1002a44:	e1a02009 	mov	r2, r9
 1002a48:	e1a03008 	mov	r3, r8
		for(i = start; i < end; i += 2) {
 1002a4c:	e1a05008 	mov	r5, r8
		d_printf(D_INFO, "sz=%d, start=%d, end_post=%d", end, start, end_post);
 1002a50:	eb000466 	bl	1003bf0 <d_printf>
		for(i = start; i < end; i += 2) {
 1002a54:	e1580009 	cmp	r8, r9
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002a58:	3307ac38 	movwcc	sl, #31800	; 0x7c38
 1002a5c:	31a07187 	lslcc	r7, r7, #3
 1002a60:	3340a105 	movtcc	sl, #261	; 0x105
		for(i = start; i < end; i += 2) {
 1002a64:	2a00000b 	bcs	1002a98 <acq_debug_dump_wave+0x23c>
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002a68:	e594c008 	ldr	ip, [r4, #8]
 1002a6c:	e1a02005 	mov	r2, r5
 1002a70:	e1a0100a 	mov	r1, sl
		for(i = start; i < end; i += 2) {
 1002a74:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[96m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002a78:	e3a00000 	mov	r0, #0
 1002a7c:	e7bc3007 	ldr	r3, [ip, r7]!
 1002a80:	e2877008 	add	r7, r7, #8
 1002a84:	e59cc004 	ldr	ip, [ip, #4]
 1002a88:	e58dc000 	str	ip, [sp]
 1002a8c:	eb000457 	bl	1003bf0 <d_printf>
		for(i = start; i < end; i += 2) {
 1002a90:	e1590005 	cmp	r9, r5
 1002a94:	8afffff3 	bhi	1002a68 <acq_debug_dump_wave+0x20c>
{
 1002a98:	e3a07000 	mov	r7, #0
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002a9c:	e3079c58 	movw	r9, #31832	; 0x7c58
		for(i = 0; i < start; i += 2) {
 1002aa0:	e1a05007 	mov	r5, r7
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002aa4:	e3409105 	movt	r9, #261	; 0x105
 1002aa8:	e594c008 	ldr	ip, [r4, #8]
 1002aac:	e1a02005 	mov	r2, r5
 1002ab0:	e1a01009 	mov	r1, r9
		for(i = 0; i < start; i += 2) {
 1002ab4:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[95m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002ab8:	e3a00000 	mov	r0, #0
 1002abc:	e7bc3007 	ldr	r3, [ip, r7]!
 1002ac0:	e2877008 	add	r7, r7, #8
 1002ac4:	e59cc004 	ldr	ip, [ip, #4]
 1002ac8:	e58dc000 	str	ip, [sp]
 1002acc:	eb000447 	bl	1003bf0 <d_printf>
		for(i = 0; i < start; i += 2) {
 1002ad0:	e1580005 	cmp	r8, r5
 1002ad4:	8afffff3 	bhi	1002aa8 <acq_debug_dump_wave+0x24c>
		start = g_acq_state.pre_sampct * 2;
 1002ad8:	e5963778 	ldr	r3, [r6, #1912]	; 0x778
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002adc:	e596777c 	ldr	r7, [r6, #1916]	; 0x77c
 1002ae0:	e0837007 	add	r7, r3, r7
		for(i = start; i < end; i += 2) {
 1002ae4:	e1a05083 	lsl	r5, r3, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002ae8:	e1a07087 	lsl	r7, r7, #1
		for(i = start; i < end; i += 2) {
 1002aec:	e1550007 	cmp	r5, r7
 1002af0:	2affffbe 	bcs	10029f0 <acq_debug_dump_wave+0x194>
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002af4:	e3078c78 	movw	r8, #31864	; 0x7c78
 1002af8:	e1a06183 	lsl	r6, r3, #3
 1002afc:	e3408105 	movt	r8, #261	; 0x105
 1002b00:	e594c008 	ldr	ip, [r4, #8]
 1002b04:	e1a02005 	mov	r2, r5
 1002b08:	e1a01008 	mov	r1, r8
		for(i = start; i < end; i += 2) {
 1002b0c:	e2855002 	add	r5, r5, #2
			d_printf(D_RAW, "\033[97m%8d 0x%08x 0x%08x\033[0m\r\n", i, wave->buff_acq[i], wave->buff_acq[i + 1]);
 1002b10:	e3a00000 	mov	r0, #0
 1002b14:	e7bc3006 	ldr	r3, [ip, r6]!
 1002b18:	e2866008 	add	r6, r6, #8
 1002b1c:	e59cc004 	ldr	ip, [ip, #4]
 1002b20:	e58dc000 	str	ip, [sp]
 1002b24:	eb000431 	bl	1003bf0 <d_printf>
		for(i = start; i < end; i += 2) {
 1002b28:	e1570005 	cmp	r7, r5
 1002b2c:	8afffff3 	bhi	1002b00 <acq_debug_dump_wave+0x2a4>
 1002b30:	eaffffae 	b	10029f0 <acq_debug_dump_wave+0x194>

01002b34 <acq_copy_slow_mipi>:
 * @param	index	Index of wave to dump. Function will explore LL to find the waveform.
 * @param	buffer	Buffer to place assembled waveform.  The buffer must be at least as large as the
 * 					total_buffsz parameter or buffer overflow could occur.
 */
int acq_copy_slow_mipi(int index, uint32_t *buffer)
{
 1002b34:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002b38:	e30152e0 	movw	r5, #4832	; 0x12e0
 1002b3c:	e3405116 	movt	r5, #278	; 0x116
{
 1002b40:	e24dd00c 	sub	sp, sp, #12
 1002b44:	e1a06000 	mov	r6, r0
	struct acq_buffer_t *wave = g_acq_state.acq_first;
 1002b48:	e5954870 	ldr	r4, [r5, #2160]	; 0x870
	while(wave != NULL) {
 1002b4c:	e3540000 	cmp	r4, #0
 1002b50:	0a00000a 	beq	1002b80 <acq_copy_slow_mipi+0x4c>
		if(wave->idx == index)
 1002b54:	e5943000 	ldr	r3, [r4]
 1002b58:	e1a07001 	mov	r7, r1
 1002b5c:	e1530000 	cmp	r3, r0
 1002b60:	1a000003 	bne	1002b74 <acq_copy_slow_mipi+0x40>
 1002b64:	ea000012 	b	1002bb4 <acq_copy_slow_mipi+0x80>
 1002b68:	e5943000 	ldr	r3, [r4]
 1002b6c:	e1560003 	cmp	r6, r3
 1002b70:	0a00000f 	beq	1002bb4 <acq_copy_slow_mipi+0x80>
		wave = wave->next;
 1002b74:	e594401c 	ldr	r4, [r4, #28]
	while(wave != NULL) {
 1002b78:	e3540000 	cmp	r4, #0
 1002b7c:	1afffff9 	bne	1002b68 <acq_copy_slow_mipi+0x34>
		d_printf(D_ERROR, "Unable to find waveindex %d", index);
 1002b80:	e3071bfc 	movw	r1, #31740	; 0x7bfc
 1002b84:	e1a02006 	mov	r2, r6
 1002b88:	e3401105 	movt	r1, #261	; 0x105
 1002b8c:	e3a00004 	mov	r0, #4
 1002b90:	eb000416 	bl	1003bf0 <d_printf>

	// Find the LL pointer to this waveindex
	res = acq_get_ll_pointer(index, &wave);

	if(res != ACQRES_OK) {
		d_printf(D_ERROR, "Unable to dump for waveindex %d: couldn't find wave", index);
 1002b94:	e3071ccc 	movw	r1, #31948	; 0x7ccc
 1002b98:	e1a02006 	mov	r2, r6
 1002b9c:	e3401105 	movt	r1, #261	; 0x105
 1002ba0:	e3a00004 	mov	r0, #4
 1002ba4:	eb000411 	bl	1003bf0 <d_printf>
		return res;
 1002ba8:	e3e00008 	mvn	r0, #8
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
		buffer += start;
	} else {
		return ACQRES_WAVE_NOT_READY;
	}
}
 1002bac:	e28dd00c 	add	sp, sp, #12
 1002bb0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if(!(wave->trigger_at & TRIGGER_INVALID_MASK) && (wave->flags & ACQBUF_FLAG_PKT_DONE)) {
 1002bb4:	e594300c 	ldr	r3, [r4, #12]
 1002bb8:	e3530000 	cmp	r3, #0
 1002bbc:	ba000002 	blt	1002bcc <acq_copy_slow_mipi+0x98>
 1002bc0:	e1d431b0 	ldrh	r3, [r4, #16]
 1002bc4:	e3130001 	tst	r3, #1
 1002bc8:	1a000002 	bne	1002bd8 <acq_copy_slow_mipi+0xa4>
		return ACQRES_WAVE_NOT_READY;
 1002bcc:	e3e00009 	mvn	r0, #9
}
 1002bd0:	e28dd00c 	add	sp, sp, #12
 1002bd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		Xil_DCacheInvalidateRange((INTPTR)wave->buff_acq, g_acq_state.total_buffsz);
 1002bd8:	e5951768 	ldr	r1, [r5, #1896]	; 0x768
 1002bdc:	e5940008 	ldr	r0, [r4, #8]
 1002be0:	eb0019f4 	bl	10093b8 <Xil_DCacheInvalidateRange>
		dmb();
 1002be4:	f57ff05f 	dmb	sy
		start = (((wave->trigger_at >> 3) + 1) * 2);
 1002be8:	e594600c 	ldr	r6, [r4, #12]
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 1002bec:	e3a00001 	mov	r0, #1
		end = g_acq_state.pre_sampct * 2;
 1002bf0:	e5959778 	ldr	r9, [r5, #1912]	; 0x778
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 1002bf4:	e3071e00 	movw	r1, #32256	; 0x7e00
 1002bf8:	e5942008 	ldr	r2, [r4, #8]
 1002bfc:	e3401105 	movt	r1, #261	; 0x105
		start = (((wave->trigger_at >> 3) + 1) * 2);
 1002c00:	e1a061a6 	lsr	r6, r6, #3
 1002c04:	e0866000 	add	r6, r6, r0
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002c08:	e0498006 	sub	r8, r9, r6
 1002c0c:	e1a06186 	lsl	r6, r6, #3
 1002c10:	e1a08188 	lsl	r8, r8, #3
 1002c14:	e1a09189 	lsl	r9, r9, #3
		d_printf(D_EXINFO, "X. pointer: 0x%08x", wave->buff_acq);
 1002c18:	eb0003f4 	bl	1003bf0 <d_printf>
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002c1c:	e5942008 	ldr	r2, [r4, #8]
 1002c20:	e3071e14 	movw	r1, #32276	; 0x7e14
 1002c24:	e1a03006 	mov	r3, r6
 1002c28:	e1cd80f0 	strd	r8, [sp]
 1002c2c:	e3401105 	movt	r1, #261	; 0x105
 1002c30:	e3a00001 	mov	r0, #1
 1002c34:	e0822006 	add	r2, r2, r6
		buffer += (end - start);
 1002c38:	e0879008 	add	r9, r7, r8
		d_printf(D_EXINFO, "0. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002c3c:	eb0003eb 	bl	1003bf0 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002c40:	e5941008 	ldr	r1, [r4, #8]
 1002c44:	e1a02008 	mov	r2, r8
 1002c48:	e1a00007 	mov	r0, r7
		buffer += start;
 1002c4c:	e0897006 	add	r7, r9, r6
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002c50:	e0811006 	add	r1, r1, r6
 1002c54:	eb002729 	bl	100c900 <memcpy>
		d_printf(D_EXINFO, "1. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq, 0, start * 4, start * 4);
 1002c58:	e3071e4c 	movw	r1, #32332	; 0x7e4c
 1002c5c:	e5942008 	ldr	r2, [r4, #8]
 1002c60:	e3a03000 	mov	r3, #0
 1002c64:	e58d6004 	str	r6, [sp, #4]
 1002c68:	e58d6000 	str	r6, [sp]
 1002c6c:	e3401105 	movt	r1, #261	; 0x105
 1002c70:	e3a00001 	mov	r0, #1
 1002c74:	eb0003dd 	bl	1003bf0 <d_printf>
		memcpy(buffer, wave->buff_acq, start * 4);
 1002c78:	e1a02006 	mov	r2, r6
 1002c7c:	e5941008 	ldr	r1, [r4, #8]
 1002c80:	e1a00009 	mov	r0, r9
 1002c84:	eb00271d 	bl	100c900 <memcpy>
		start = g_acq_state.pre_sampct * 2;
 1002c88:	e595c778 	ldr	ip, [r5, #1912]	; 0x778
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002c8c:	e3071e84 	movw	r1, #32388	; 0x7e84
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002c90:	e595677c 	ldr	r6, [r5, #1916]	; 0x77c
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002c94:	e3401105 	movt	r1, #261	; 0x105
 1002c98:	e5942008 	ldr	r2, [r4, #8]
 1002c9c:	e3a00001 	mov	r0, #1
		end = (g_acq_state.pre_sampct + g_acq_state.post_sampct) * 2;
 1002ca0:	e08c3006 	add	r3, ip, r6
		d_printf(D_EXINFO, "2. pointer: 0x%08x, start: %6d, bytes: %6d, end: %6d", wave->buff_acq + start, start * 4, (end - start) * 4, ((start * 4) + ((end - start) * 4)));
 1002ca4:	e1a0518c 	lsl	r5, ip, #3
 1002ca8:	e1a06186 	lsl	r6, r6, #3
 1002cac:	e1a03183 	lsl	r3, r3, #3
 1002cb0:	e0822005 	add	r2, r2, r5
 1002cb4:	e58d3004 	str	r3, [sp, #4]
 1002cb8:	e58d6000 	str	r6, [sp]
 1002cbc:	e1a03005 	mov	r3, r5
 1002cc0:	eb0003ca 	bl	1003bf0 <d_printf>
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002cc4:	e5941008 	ldr	r1, [r4, #8]
 1002cc8:	e1a00007 	mov	r0, r7
 1002ccc:	e1a02006 	mov	r2, r6
 1002cd0:	e0811005 	add	r1, r1, r5
}
 1002cd4:	e28dd00c 	add	sp, sp, #12
 1002cd8:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
		memcpy(buffer, wave->buff_acq + start, (end - start) * 4);
 1002cdc:	ea002707 	b	100c900 <memcpy>

01002ce0 <clkwiz_init>:
 * an empty `struct clkwiz_interface_t`. For reasons unknown to me,
 * the refclk frequency stored in the ClkWiz is invalid, so an external
 * refclk must be specified as `refclk_freq`.
 */
void clkwiz_init(struct clkwiz_interface_t *ifc, uint32_t device_id, float refclk_freq)
{
 1002ce0:	e92d4010 	push	{r4, lr}
 1002ce4:	e1a04000 	mov	r4, r0
 1002ce8:	ed2d8b02 	vpush	{d8}
	int i;
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 1002cec:	e1a00001 	mov	r0, r1
{
 1002cf0:	e24dd008 	sub	sp, sp, #8
 1002cf4:	eeb08a40 	vmov.f32	s16, s0
	XClk_Wiz_Config *clkcfg = XClk_Wiz_LookupConfig(device_id);
 1002cf8:	eb000ec6 	bl	1006818 <XClk_Wiz_LookupConfig>

	D_ASSERT(clkcfg != NULL);
 1002cfc:	e2503000 	subs	r3, r0, #0
 1002d00:	0a000022 	beq	1002d90 <clkwiz_init+0xb0>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 1002d04:	eef77a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 1002d08:	eeb48ae7 	vcmpe.f32	s16, s15
 1002d0c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002d10:	da000012 	ble	1002d60 <clkwiz_init+0x80>
 1002d14:	eddf7a25 	vldr	s15, [pc, #148]	; 1002db0 <clkwiz_init+0xd0>
 1002d18:	eeb48ae7 	vcmpe.f32	s16, s15
 1002d1c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002d20:	5a00000e 	bpl	1002d60 <clkwiz_init+0x80>

	ifc->wiz_cfg = clkcfg;
 1002d24:	e5843000 	str	r3, [r4]
	ifc->refclk_freq = refclk_freq;

	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 1002d28:	e1a01003 	mov	r1, r3
 1002d2c:	e5932004 	ldr	r2, [r3, #4]
 1002d30:	e2840008 	add	r0, r4, #8
	ifc->refclk_freq = refclk_freq;
 1002d34:	ed848a24 	vstr	s16, [r4, #144]	; 0x90
	XClk_Wiz_CfgInitialize(&ifc->wiz, ifc->wiz_cfg, ifc->wiz_cfg->BaseAddr);
 1002d38:	eb000e6c 	bl	10066f0 <XClk_Wiz_CfgInitialize>

	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 1002d3c:	e5943000 	ldr	r3, [r4]
 1002d40:	e3081028 	movw	r1, #32808	; 0x8028
 1002d44:	e3401105 	movt	r1, #261	; 0x105
 1002d48:	e3a00002 	mov	r0, #2
 1002d4c:	e5932004 	ldr	r2, [r3, #4]
}
 1002d50:	e28dd008 	add	sp, sp, #8
 1002d54:	ecbd8b02 	vpop	{d8}
 1002d58:	e8bd4010 	pop	{r4, lr}
	d_printf(D_INFO, "clkwiz: initialised configuration @ 0x%08x", ifc->wiz_cfg->BaseAddr);
 1002d5c:	ea0003a3 	b	1003bf0 <d_printf>
	D_ASSERT(refclk_freq > 1.0f && refclk_freq < 800.0f);  // Basic sanity check on refclk
 1002d60:	e3073fa4 	movw	r3, #32676	; 0x7fa4
 1002d64:	e3072ffc 	movw	r2, #32764	; 0x7ffc
 1002d68:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 1002d6c:	e3403105 	movt	r3, #261	; 0x105
 1002d70:	e3402105 	movt	r2, #261	; 0x105
 1002d74:	e3a00020 	mov	r0, #32
 1002d78:	e58d0000 	str	r0, [sp]
 1002d7c:	e3a00004 	mov	r0, #4
 1002d80:	e3401105 	movt	r1, #261	; 0x105
 1002d84:	eb000399 	bl	1003bf0 <d_printf>
 1002d88:	e3e00062 	mvn	r0, #98	; 0x62
 1002d8c:	fa002167 	blx	100b330 <exit>
	D_ASSERT(clkcfg != NULL);
 1002d90:	e3a0001f 	mov	r0, #31
 1002d94:	e3073fa4 	movw	r3, #32676	; 0x7fa4
 1002d98:	e3072fc0 	movw	r2, #32704	; 0x7fc0
 1002d9c:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 1002da0:	e58d0000 	str	r0, [sp]
 1002da4:	e3403105 	movt	r3, #261	; 0x105
 1002da8:	e3402105 	movt	r2, #261	; 0x105
 1002dac:	eafffff2 	b	1002d7c <clkwiz_init+0x9c>
 1002db0:	44480000 	.word	0x44480000

01002db4 <clkwiz_change_mipi_freq>:
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
	int solved = 0, solver_iters = 0;
	uint32_t ccfg_0, clkout_div;

	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 1002db4:	eeb50ac0 	vcmpe.f32	s0, #0.0
 1002db8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
{
 1002dbc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1002dc0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 1002dc4:	da00009e 	ble	1003044 <clkwiz_change_mipi_freq+0x290>
 1002dc8:	ed9f7aae 	vldr	s14, [pc, #696]	; 1003088 <clkwiz_change_mipi_freq+0x2d4>
 1002dcc:	eeb40ac7 	vcmpe.f32	s0, s14
 1002dd0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002dd4:	5a00009a 	bpl	1003044 <clkwiz_change_mipi_freq+0x290>

	// Compute the closest divider assuming an 800MHz FBOUT.
	// Above 600MHz divider is forced to 1.
	if(new_freq >= 600) {
 1002dd8:	eddf7aab 	vldr	s15, [pc, #684]	; 100308c <clkwiz_change_mipi_freq+0x2d8>
 1002ddc:	e1a06000 	mov	r6, r0
 1002de0:	eeb40ae7 	vcmpe.f32	s0, s15
 1002de4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002de8:	ba000075 	blt	1002fc4 <clkwiz_change_mipi_freq+0x210>
 1002dec:	eeb73a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 1002df0:	e3a05001 	mov	r5, #1
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 1002df4:	eddf6aa5 	vldr	s13, [pc, #660]	; 1003090 <clkwiz_change_mipi_freq+0x2dc>
	int solved = 0, solver_iters = 0;
 1002df8:	e3a00000 	mov	r0, #0
	 * with minimal error, though the search algorithm could be substantially improved
	 * with e.g. a binary search.
	 */
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 1002dfc:	edd64a24 	vldr	s9, [r6, #144]	; 0x90
	int solved = 0, solver_iters = 0;
 1002e00:	e1a0e000 	mov	lr, r0
	float freq = 0.0f, best_error = 1e10f, error = 0.0f, best_freq = 0;
 1002e04:	ed9f7aa2 	vldr	s14, [pc, #648]	; 1003094 <clkwiz_change_mipi_freq+0x2e0>
	int best_fb_mult = 0, best_fb_frac = 0;
 1002e08:	e1a04000 	mov	r4, r0
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 1002e0c:	ed9f5aa1 	vldr	s10, [pc, #644]	; 1003098 <clkwiz_change_mipi_freq+0x2e4>
	int best_fb_mult = 0, best_fb_frac = 0;
 1002e10:	e1a07000 	mov	r7, r0

			// Skip invalid frequencies.
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 1002e14:	eddf5a9c 	vldr	s11, [pc, #624]	; 100308c <clkwiz_change_mipi_freq+0x2d8>
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 1002e18:	e1a03000 	mov	r3, r0
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 1002e1c:	eddf3a9e 	vldr	s7, [pc, #632]	; 100309c <clkwiz_change_mipi_freq+0x2e8>
				best_fb_mult = fb_mult;
				best_fb_frac = fb_frac;
				best_fbout_freq = fbout_freq;

				// If < 10Hz error, end
				if(best_error < 1e-5) {
 1002e20:	eddf1b94 	vldr	d17, [pc, #592]	; 1003078 <clkwiz_change_mipi_freq+0x2c4>
	float fbout_freq = 800.0f, best_fbout_freq = 0.0f;
 1002e24:	eef07a66 	vmov.f32	s15, s13
 1002e28:	eeb04a47 	vmov.f32	s8, s14
 1002e2c:	e1a0c004 	mov	ip, r4
 1002e30:	ee073a10 	vmov	s14, r3
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 1002e34:	e3a04000 	mov	r4, #0
 1002e38:	eeb86ac7 	vcvt.f32.s32	s12, s14
 1002e3c:	ee161a90 	vmov	r1, s13
 1002e40:	ee172a90 	vmov	r2, s15
 1002e44:	ea000007 	b	1002e68 <clkwiz_change_mipi_freq+0xb4>
				best_error = error;
 1002e48:	eeb04a47 	vmov.f32	s8, s14
 1002e4c:	e1a0c004 	mov	ip, r4
				best_freq = freq;
 1002e50:	ee161a90 	vmov	r1, s13
 1002e54:	e1a07003 	mov	r7, r3
				best_fbout_freq = fbout_freq;
 1002e58:	ee172a90 	vmov	r2, s15
		for(fb_frac = 0; fb_frac < 1000; fb_frac++) {
 1002e5c:	e2844001 	add	r4, r4, #1
 1002e60:	e3540ffa 	cmp	r4, #1000	; 0x3e8
 1002e64:	0a000062 	beq	1002ff4 <clkwiz_change_mipi_freq+0x240>
			fbout_freq = ifc->refclk_freq * (fb_mult + (fb_frac / 1000.0f));
 1002e68:	ee074a90 	vmov	s15, r4
 1002e6c:	eeb87ae7 	vcvt.f32.s32	s14, s15
 1002e70:	eec77a05 	vdiv.f32	s15, s14, s10
 1002e74:	ee777a86 	vadd.f32	s15, s15, s12
 1002e78:	ee677aa4 	vmul.f32	s15, s15, s9
			if(fbout_freq < FBOUT_MIN_FREQ || fbout_freq > FBOUT_MAX_FREQ) {
 1002e7c:	eef47ae5 	vcmpe.f32	s15, s11
 1002e80:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002e84:	4afffff4 	bmi	1002e5c <clkwiz_change_mipi_freq+0xa8>
 1002e88:	eef47ae3 	vcmpe.f32	s15, s7
 1002e8c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002e90:	cafffff1 	bgt	1002e5c <clkwiz_change_mipi_freq+0xa8>
			freq = fbout_freq / div;
 1002e94:	eec76a83 	vdiv.f32	s13, s15, s6
			solver_iters++;
 1002e98:	e2800001 	add	r0, r0, #1
			error = fabs(new_freq - freq);
 1002e9c:	ee307a66 	vsub.f32	s14, s0, s13
 1002ea0:	eeb07ac7 	vabs.f32	s14, s14
			if(error < best_error) {
 1002ea4:	eeb47ac4 	vcmpe.f32	s14, s8
 1002ea8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002eac:	5affffea 	bpl	1002e5c <clkwiz_change_mipi_freq+0xa8>
				if(best_error < 1e-5) {
 1002eb0:	eef70ac7 	vcvt.f64.f32	d16, s14
 1002eb4:	eef40be1 	vcmpe.f64	d16, d17
 1002eb8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002ebc:	5affffe1 	bpl	1002e48 <clkwiz_change_mipi_freq+0x94>
 1002ec0:	e1a07003 	mov	r7, r3
					solved = 1;
 1002ec4:	e3a0e001 	mov	lr, #1
	for(fb_mult = 0; fb_mult < 8; fb_mult++) {
 1002ec8:	e2833001 	add	r3, r3, #1
 1002ecc:	e3530008 	cmp	r3, #8
 1002ed0:	1affffd4 	bne	1002e28 <clkwiz_change_mipi_freq+0x74>
			}
		}
	}

	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 1002ed4:	eef71ac7 	vcvt.f64.f32	d17, s14
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 1002ed8:	e35e0000 	cmp	lr, #0
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 1002edc:	eddf3b67 	vldr	d19, [pc, #412]	; 1003080 <clkwiz_change_mipi_freq+0x2cc>
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 1002ee0:	13a0c059 	movne	ip, #89	; 0x59
 1002ee4:	eef70ae7 	vcvt.f64.f32	d16, s15
 1002ee8:	03a0c04e 	moveq	ip, #78	; 0x4e
 1002eec:	eef72ae6 	vcvt.f64.f32	d18, s13
 1002ef0:	e308107c 	movw	r1, #32892	; 0x807c
 1002ef4:	eeb70ac0 	vcvt.f64.f32	d0, s0
 1002ef8:	e3401105 	movt	r1, #261	; 0x105
			best_fb_mult, best_fb_frac, best_fbout_freq, best_freq, new_freq, (int)(best_error * 1e6), solver_iters, (solved) ? 'Y' : 'N');
 1002efc:	ee611ba3 	vmul.f64	d17, d17, d19
	d_printf(D_INFO, "Mult=%4d, Frac=%4d, fbout_freq=%7.2f MHz, mipi_freq=%7.2f MHz, target=%7.2f MHz, best_error=%6d Hz, iters=%d, solved=%c", \
 1002f00:	e1a03004 	mov	r3, r4
 1002f04:	e1a02007 	mov	r2, r7
 1002f08:	e58d001c 	str	r0, [sp, #28]
 1002f0c:	e58dc020 	str	ip, [sp, #32]
 1002f10:	e3a00002 	mov	r0, #2
 1002f14:	edcd0b00 	vstr	d16, [sp]
 1002f18:	edcd2b02 	vstr	d18, [sp, #8]
 1002f1c:	eefd7be1 	vcvt.s32.f64	s15, d17
 1002f20:	ed8d0b04 	vstr	d0, [sp, #16]
 1002f24:	edcd7a06 	vstr	s15, [sp, #24]
 1002f28:	eb000330 	bl	1003bf0 <d_printf>

	// Write the settings to the registers and commit the clock change.
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 1002f2c:	e5962000 	ldr	r2, [r6]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 1002f30:	e1a03804 	lsl	r3, r4, #16
 1002f34:	e3a01000 	mov	r1, #0
 1002f38:	e1833407 	orr	r3, r3, r7, lsl #8
 1002f3c:	e30c0350 	movw	r0, #50000	; 0xc350
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x200, ccfg_0);
 1002f40:	e5922004 	ldr	r2, [r2, #4]
	ccfg_0 = 0x04000001 | ((best_fb_mult & 0xff) << 8) | ((best_fb_frac & 0x3ff) << 16);
 1002f44:	e3833341 	orr	r3, r3, #67108865	; 0x4000001
 1002f48:	e5823200 	str	r3, [r2, #512]	; 0x200
 1002f4c:	e5821204 	str	r1, [r2, #516]	; 0x204
 1002f50:	e5825208 	str	r5, [r2, #520]	; 0x208
 1002f54:	e582120c 	str	r1, [r2, #524]	; 0x20c
 1002f58:	e5820210 	str	r0, [r2, #528]	; 0x210
 1002f5c:	e5825214 	str	r5, [r2, #532]	; 0x214
 1002f60:	e5821218 	str	r1, [r2, #536]	; 0x218
 1002f64:	e582021c 	str	r0, [r2, #540]	; 0x21c
	return *(volatile u32 *) Addr;
 1002f68:	e5923004 	ldr	r3, [r2, #4]
void clkwiz_commit(struct clkwiz_interface_t *ifc)
{
	int timeout = 100000;

	// Check that MMCM is locked already
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 1002f6c:	e3130001 	tst	r3, #1
 1002f70:	0a00002a 	beq	1003020 <clkwiz_change_mipi_freq+0x26c>
	*LocalAddr = Value;
 1002f74:	e3a03003 	mov	r3, #3
 1002f78:	e582325c 	str	r3, [r2, #604]	; 0x25c
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
	}

	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x03);	// Load and SEN set
	asm("nop");
 1002f7c:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1002f80:	e5962000 	ldr	r2, [r6]
	int timeout = 100000;
 1002f84:	e30836a0 	movw	r3, #34464	; 0x86a0
 1002f88:	e3a00000 	mov	r0, #0
 1002f8c:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1002f90:	e5922004 	ldr	r2, [r2, #4]
 1002f94:	e2821004 	add	r1, r2, #4
 1002f98:	e582025c 	str	r0, [r2, #604]	; 0x25c
 1002f9c:	ea000001 	b	1002fa8 <clkwiz_change_mipi_freq+0x1f4>

	// Wait for re-lock
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 1002fa0:	e2533001 	subs	r3, r3, #1
 1002fa4:	3a000004 	bcc	1002fbc <clkwiz_change_mipi_freq+0x208>
	return *(volatile u32 *) Addr;
 1002fa8:	e5912000 	ldr	r2, [r1]
 1002fac:	e3120001 	tst	r2, #1
 1002fb0:	0afffffa 	beq	1002fa0 <clkwiz_change_mipi_freq+0x1ec>

	if(timeout == 0) {
 1002fb4:	e3530000 	cmp	r3, #0
 1002fb8:	0a000012 	beq	1003008 <clkwiz_change_mipi_freq+0x254>
}
 1002fbc:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1002fc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		for(div = 1; div < 106; div++) {
 1002fc4:	e3a05001 	mov	r5, #1
 1002fc8:	ea000002 	b	1002fd8 <clkwiz_change_mipi_freq+0x224>
 1002fcc:	e2855001 	add	r5, r5, #1
 1002fd0:	e355006a 	cmp	r5, #106	; 0x6a
 1002fd4:	0a000018 	beq	100303c <clkwiz_change_mipi_freq+0x288>
			freq = fbout_freq / div;
 1002fd8:	ee075a90 	vmov	s15, r5
 1002fdc:	eeb83ae7 	vcvt.f32.s32	s6, s15
 1002fe0:	eec77a03 	vdiv.f32	s15, s14, s6
			if(freq <= new_freq) {
 1002fe4:	eeb40ae7 	vcmpe.f32	s0, s15
 1002fe8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 1002fec:	bafffff6 	blt	1002fcc <clkwiz_change_mipi_freq+0x218>
 1002ff0:	eaffff7f 	b	1002df4 <clkwiz_change_mipi_freq+0x40>
 1002ff4:	eeb07a44 	vmov.f32	s14, s8
 1002ff8:	e1a0400c 	mov	r4, ip
 1002ffc:	ee061a90 	vmov	s13, r1
 1003000:	ee072a90 	vmov	s15, r2
 1003004:	eaffffaf 	b	1002ec8 <clkwiz_change_mipi_freq+0x114>
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 1003008:	e3081128 	movw	r1, #33064	; 0x8128
 100300c:	e3a00004 	mov	r0, #4
 1003010:	e3401105 	movt	r1, #261	; 0x105
}
 1003014:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1003018:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 100301c:	ea0002f3 	b	1003bf0 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 1003020:	e30810f4 	movw	r1, #33012	; 0x80f4
 1003024:	e3a00004 	mov	r0, #4
 1003028:	e3401105 	movt	r1, #261	; 0x105
 100302c:	eb0002ef 	bl	1003bf0 <d_printf>
 1003030:	e5963000 	ldr	r3, [r6]
 1003034:	e5932004 	ldr	r2, [r3, #4]
 1003038:	eaffffcd 	b	1002f74 <clkwiz_change_mipi_freq+0x1c0>
 100303c:	ed9f3a17 	vldr	s6, [pc, #92]	; 10030a0 <clkwiz_change_mipi_freq+0x2ec>
 1003040:	eaffff6b 	b	1002df4 <clkwiz_change_mipi_freq+0x40>
	D_ASSERT(new_freq > 0.0f && new_freq < 800.0f);
 1003044:	e3a00039 	mov	r0, #57	; 0x39
 1003048:	e3073fa4 	movw	r3, #32676	; 0x7fa4
 100304c:	e3082054 	movw	r2, #32852	; 0x8054
 1003050:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 1003054:	e58d0000 	str	r0, [sp]
 1003058:	e3403105 	movt	r3, #261	; 0x105
 100305c:	e3a00004 	mov	r0, #4
 1003060:	e3402105 	movt	r2, #261	; 0x105
 1003064:	e3401105 	movt	r1, #261	; 0x105
 1003068:	eb0002e0 	bl	1003bf0 <d_printf>
 100306c:	e3e00062 	mvn	r0, #98	; 0x62
 1003070:	fa0020ae 	blx	100b330 <exit>
 1003074:	e320f000 	nop	{0}
 1003078:	88e368f1 	.word	0x88e368f1
 100307c:	3ee4f8b5 	.word	0x3ee4f8b5
 1003080:	00000000 	.word	0x00000000
 1003084:	412e8480 	.word	0x412e8480
 1003088:	44480000 	.word	0x44480000
 100308c:	44160000 	.word	0x44160000
 1003090:	00000000 	.word	0x00000000
 1003094:	501502f9 	.word	0x501502f9
 1003098:	447a0000 	.word	0x447a0000
 100309c:	44960000 	.word	0x44960000
 10030a0:	42d40000 	.word	0x42d40000

010030a4 <clkwiz_dump_state>:
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 10030a4:	e5903000 	ldr	r3, [r0]
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 10030a8:	e3081164 	movw	r1, #33124	; 0x8164
{
 10030ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 10030b0:	e1a02000 	mov	r2, r0
{
 10030b4:	ed2d8b04 	vpush	{d8-d9}
 10030b8:	e1a08000 	mov	r8, r0
 10030bc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 10030c0:	e3401105 	movt	r1, #261	; 0x105
	ccfg_0 = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x200);
 10030c4:	e5933004 	ldr	r3, [r3, #4]
	uint32_t base_addr = 0x208;
 10030c8:	e3a04f82 	mov	r4, #520	; 0x208
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 10030cc:	eddf7a91 	vldr	s15, [pc, #580]	; 1003318 <clkwiz_dump_state+0x274>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 10030d0:	e3a05001 	mov	r5, #1
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 10030d4:	ed909a24 	vldr	s18, [r0, #144]	; 0x90
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 10030d8:	e3a00002 	mov	r0, #2
 10030dc:	e5936200 	ldr	r6, [r3, #512]	; 0x200
 10030e0:	e3a09000 	mov	r9, #0
 10030e4:	e593b204 	ldr	fp, [r3, #516]	; 0x204
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 10030e8:	eeb08a67 	vmov.f32	s16, s15
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 10030ec:	e7e93856 	ubfx	r3, r6, #16, #10
	clkfbout_mult    =   (ccfg_0 & 0x0000ff00) >> 8;
 10030f0:	e7e7a456 	ubfx	sl, r6, #8, #8
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 10030f4:	e6ef7076 	uxtb	r7, r6
	clkfbout_frac    =   (ccfg_0 & 0x03ff0000) >> 16;
 10030f8:	ee083a90 	vmov	s17, r3
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 10030fc:	eef86ae8 	vcvt.f32.s32	s13, s17
 1003100:	ee07aa10 	vmov	s14, sl
 1003104:	eeb87ac7 	vcvt.f32.s32	s14, s14
 1003108:	eec69aa7 	vdiv.f32	s19, s13, s15
 100310c:	ee799a87 	vadd.f32	s19, s19, s14
	d_printf(D_INFO, "** ClkWiz debug dump for ifc @ 0x%08x **", ifc);
 1003110:	eb0002b6 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 1003114:	e3091478 	movw	r1, #38008	; 0x9478
 1003118:	e3a00002 	mov	r0, #2
 100311c:	e3401105 	movt	r1, #261	; 0x105
 1003120:	eb0002b2 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 1003124:	e5983000 	ldr	r3, [r8]
 1003128:	e3081190 	movw	r1, #33168	; 0x8190
 100312c:	e3401105 	movt	r1, #261	; 0x105
 1003130:	e3a00002 	mov	r0, #2
	fbout_freq = ifc->refclk_freq * (clkfbout_mult + (clkfbout_frac / 1000.0f));
 1003134:	ee299a89 	vmul.f32	s18, s19, s18
	d_printf(D_INFO, "Register base:          0x%08x", ifc->wiz_cfg->BaseAddr);
 1003138:	e5932004 	ldr	r2, [r3, #4]
 100313c:	eb0002ab 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "Configured refclk freq: %2.5f MHz", ifc->refclk_freq);
 1003140:	edd87a24 	vldr	s15, [r8, #144]	; 0x90
 1003144:	e30811b0 	movw	r1, #33200	; 0x81b0
 1003148:	e3401105 	movt	r1, #261	; 0x105
 100314c:	e3a00002 	mov	r0, #2
 1003150:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003154:	ec532b30 	vmov	r2, r3, d16
 1003158:	eb0002a4 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "CLKCFG0 register:       0x%08x", ccfg_0);
 100315c:	e30811d4 	movw	r1, #33236	; 0x81d4
 1003160:	e1a02006 	mov	r2, r6
 1003164:	e3401105 	movt	r1, #261	; 0x105
 1003168:	e3a00002 	mov	r0, #2
 100316c:	eb00029f 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "CLKFBOUT register:      0x%08x", clkfbout_phase);
 1003170:	e30811f4 	movw	r1, #33268	; 0x81f4
 1003174:	e1a0200b 	mov	r2, fp
 1003178:	e3401105 	movt	r1, #261	; 0x105
 100317c:	e3a00002 	mov	r0, #2
 1003180:	eb00029a 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 1003184:	e3091478 	movw	r1, #38008	; 0x9478
 1003188:	e3a00002 	mov	r0, #2
 100318c:	e3401105 	movt	r1, #261	; 0x105
	clkfbout_frac_en = !!(ccfg_0 & (1 << 26));
 1003190:	e7e06d56 	ubfx	r6, r6, #26, #1
	d_printf(D_INFO, "");
 1003194:	eb000295 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "Overall divide:         %d", clk_divide);
 1003198:	e3081214 	movw	r1, #33300	; 0x8214
 100319c:	e1a02007 	mov	r2, r7
 10031a0:	e3401105 	movt	r1, #261	; 0x105
 10031a4:	e3a00002 	mov	r0, #2
 10031a8:	eb000290 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "CLKFBOUT multiplier:    %2.5f (MULT=%d, FRAC=%d, FRAC_EN=%d)", \
 10031ac:	eef70ae9 	vcvt.f64.f32	d16, s19
 10031b0:	e3081230 	movw	r1, #33328	; 0x8230
 10031b4:	edcd8a01 	vstr	s17, [sp, #4]
 10031b8:	e3401105 	movt	r1, #261	; 0x105
 10031bc:	e3a00002 	mov	r0, #2
 10031c0:	e58da000 	str	sl, [sp]
 10031c4:	e58d6008 	str	r6, [sp, #8]
 10031c8:	ec532b30 	vmov	r2, r3, d16
 10031cc:	eb000287 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "FBOUT frequency:        %2.5f MHz", fbout_freq);
 10031d0:	eef70ac9 	vcvt.f64.f32	d16, s18
 10031d4:	e3081270 	movw	r1, #33392	; 0x8270
 10031d8:	e3401105 	movt	r1, #261	; 0x105
 10031dc:	e3a00002 	mov	r0, #2
 10031e0:	ec532b30 	vmov	r2, r3, d16
 10031e4:	eb000281 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 10031e8:	e3091478 	movw	r1, #38008	; 0x9478
 10031ec:	e3a00002 	mov	r0, #2
 10031f0:	e3401105 	movt	r1, #261	; 0x105
 10031f4:	eb00027d 	bl	1003bf0 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 10031f8:	ee077a90 	vmov	s15, r7
 10031fc:	eef88ae7 	vcvt.f32.s32	s17, s15
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 1003200:	e5983000 	ldr	r3, [r8]
		if(i > 1) {
 1003204:	e3550001 	cmp	r5, #1
 1003208:	ee079a10 	vmov	s14, r9
			clk_frac = 0;
 100320c:	e3a00000 	mov	r0, #0
		reg_divfrac = XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, base_addr);
 1003210:	e5933004 	ldr	r3, [r3, #4]
 1003214:	e793c004 	ldr	ip, [r3, r4]
* @note		C-style signature:
* 		u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)
*
******************************************************************************/
static inline u32 XClk_Wiz_ReadReg(UINTPTR BaseAddress, u32 RegOffset)  {
			return (Xil_In32((BaseAddress) + (u32)(RegOffset)));
 1003218:	e2832004 	add	r2, r3, #4
 100321c:	e2833008 	add	r3, r3, #8
 1003220:	e7927004 	ldr	r7, [r2, r4]
 1003224:	e7936004 	ldr	r6, [r3, r4]
		clk_frac_en = !!(reg_divfrac & 0x00040000);
 1003228:	e7e0395c 	ubfx	r3, ip, #18, #1
		clk_div     =   (reg_divfrac & 0x000000ff);
 100322c:	e6ef207c 	uxtb	r2, ip
		if(i > 1) {
 1003230:	0a000031 	beq	10032fc <clkwiz_dump_state+0x258>
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1003234:	ee072a90 	vmov	s15, r2
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1003238:	e3081294 	movw	r1, #33428	; 0x8294
 100323c:	e58dc000 	str	ip, [sp]
 1003240:	e3401105 	movt	r1, #261	; 0x105
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1003244:	eef87ae7 	vcvt.f32.s32	s15, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1003248:	e58d3020 	str	r3, [sp, #32]
 100324c:	e1a03004 	mov	r3, r4
 1003250:	e58d0010 	str	r0, [sp, #16]
 1003254:	e3a00002 	mov	r0, #2
 1003258:	e58d200c 	str	r2, [sp, #12]
 100325c:	e1a02005 	mov	r2, r5
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1003260:	ee777a87 	vadd.f32	s15, s15, s14
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 1003264:	e2855001 	add	r5, r5, #1
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1003268:	e58d6008 	str	r6, [sp, #8]
		base_addr += 12;
 100326c:	e284400c 	add	r4, r4, #12
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1003270:	e58d7004 	str	r7, [sp, #4]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1003274:	ee897a27 	vdiv.f32	s14, s18, s15
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1003278:	eef70ae7 	vcvt.f64.f32	d16, s15
 100327c:	edcd0b06 	vstr	d16, [sp, #24]
		clk_freq    = (fbout_freq / (clk_div + (clk_frac / 1000.0f))) / clk_divide;
 1003280:	eec79a28 	vdiv.f32	s19, s14, s17
		d_printf(D_INFO, "Clock #%d: BaseAddr=0x%04x DivFrac=0x%08x Phase=0x%08x Duty=0x%08x Int=%4d Frac=%4d Div=%2.5f FracEn=%d", \
 1003284:	eb000259 	bl	1003bf0 <d_printf>
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1003288:	ee077a90 	vmov	s15, r7
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100328c:	e30812fc 	movw	r1, #33532	; 0x82fc
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1003290:	eeb87a67 	vcvt.f32.u32	s14, s15
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 1003294:	e3401105 	movt	r1, #261	; 0x105
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 1003298:	ee076a90 	vmov	s15, r6
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 100329c:	e3a00002 	mov	r0, #2
				clk_freq, reg_duty / 1000.0f, reg_phase / 1000.0f);
 10032a0:	eef87a67 	vcvt.f32.u32	s15, s15
 10032a4:	eec76a08 	vdiv.f32	s13, s14, s16
 10032a8:	ee877a88 	vdiv.f32	s14, s15, s16
		d_printf(D_INFO, "          OutputFreq=%2.5f MHz, OutputDuty=%2.3f%%, OutputPhase=%2.2f deg", \
 10032ac:	eef70ae9 	vcvt.f64.f32	d16, s19
 10032b0:	ec532b30 	vmov	r2, r3, d16
 10032b4:	eef71ae6 	vcvt.f64.f32	d17, s13
 10032b8:	eeb77ac7 	vcvt.f64.f32	d7, s14
 10032bc:	edcd1b02 	vstr	d17, [sp, #8]
 10032c0:	ed8d7b00 	vstr	d7, [sp]
 10032c4:	eb000249 	bl	1003bf0 <d_printf>
		d_printf(D_INFO, "");
 10032c8:	e3091478 	movw	r1, #38008	; 0x9478
 10032cc:	e3a00002 	mov	r0, #2
 10032d0:	e3401105 	movt	r1, #261	; 0x105
 10032d4:	eb000245 	bl	1003bf0 <d_printf>
	for(i = 1; i < CLKWIZ_MAX_CLOCKS; i++) {
 10032d8:	e3550007 	cmp	r5, #7
 10032dc:	1affffc7 	bne	1003200 <clkwiz_dump_state+0x15c>
	d_printf(D_INFO, "");
 10032e0:	e3091478 	movw	r1, #38008	; 0x9478
 10032e4:	e3a00002 	mov	r0, #2
 10032e8:	e3401105 	movt	r1, #261	; 0x105
}
 10032ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
 10032f0:	ecbd8b04 	vpop	{d8-d9}
 10032f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	d_printf(D_INFO, "");
 10032f8:	ea00023c 	b	1003bf0 <d_printf>
		clk_frac    =   (reg_divfrac & 0x0003ff00);
 10032fc:	e3a00cff 	mov	r0, #65280	; 0xff00
 1003300:	e3400003 	movt	r0, #3
 1003304:	e000000c 	and	r0, r0, ip
 1003308:	ee070a90 	vmov	s15, r0
 100330c:	eef87ae7 	vcvt.f32.s32	s15, s15
 1003310:	ee877a88 	vdiv.f32	s14, s15, s16
 1003314:	eaffffc6 	b	1003234 <clkwiz_dump_state+0x190>
 1003318:	447a0000 	.word	0x447a0000

0100331c <clkwiz_commit>:
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 100331c:	e5903000 	ldr	r3, [r0]
{
 1003320:	e92d4010 	push	{r4, lr}
 1003324:	e1a04000 	mov	r4, r0
	if(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1)) {
 1003328:	e5933004 	ldr	r3, [r3, #4]
 100332c:	e5932004 	ldr	r2, [r3, #4]
 1003330:	e3120001 	tst	r2, #1
 1003334:	0a000016 	beq	1003394 <clkwiz_commit+0x78>
	*LocalAddr = Value;
 1003338:	e3a02003 	mov	r2, #3
 100333c:	e583225c 	str	r2, [r3, #604]	; 0x25c
	asm("nop");
 1003340:	e320f000 	nop	{0}
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1003344:	e5942000 	ldr	r2, [r4]
	int timeout = 100000;
 1003348:	e30836a0 	movw	r3, #34464	; 0x86a0
 100334c:	e3a00000 	mov	r0, #0
 1003350:	e3403001 	movt	r3, #1
	XClk_Wiz_WriteReg(ifc->wiz_cfg->BaseAddr, 0x25c, 0x00);	// Load and SEN cleared
 1003354:	e5922004 	ldr	r2, [r2, #4]
 1003358:	e2821004 	add	r1, r2, #4
 100335c:	e582025c 	str	r0, [r2, #604]	; 0x25c
 1003360:	ea000001 	b	100336c <clkwiz_commit+0x50>
	while(!(XClk_Wiz_ReadReg(ifc->wiz_cfg->BaseAddr, 0x04) & 1) && (timeout-- > 0)) ;
 1003364:	e2533001 	subs	r3, r3, #1
 1003368:	38bd8010 	popcc	{r4, pc}
	return *(volatile u32 *) Addr;
 100336c:	e5912000 	ldr	r2, [r1]
 1003370:	e3120001 	tst	r2, #1
 1003374:	0afffffa 	beq	1003364 <clkwiz_commit+0x48>
	if(timeout == 0) {
 1003378:	e3530000 	cmp	r3, #0
 100337c:	18bd8010 	popne	{r4, pc}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 1003380:	e3081128 	movw	r1, #33064	; 0x8128
 1003384:	e3a00004 	mov	r0, #4
 1003388:	e3401105 	movt	r1, #261	; 0x105
	}
}
 100338c:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "Timeout waiting for MMCM to lock onto new configuration.");
 1003390:	ea000216 	b	1003bf0 <d_printf>
		d_printf(D_ERROR, "MMCM not locked. Unable to change clock frequency.");
 1003394:	e30810f4 	movw	r1, #33012	; 0x80f4
 1003398:	e3a00004 	mov	r0, #4
 100339c:	e3401105 	movt	r1, #261	; 0x105
 10033a0:	eb000212 	bl	1003bf0 <d_printf>
 10033a4:	e5943000 	ldr	r3, [r4]
 10033a8:	e5933004 	ldr	r3, [r3, #4]
 10033ac:	eaffffe1 	b	1003338 <clkwiz_commit+0x1c>

010033b0 <fabcfg_dump_state>:
 */
void fabcfg_dump_state()
{
	int i;

	d_printf(D_INFO, "");
 10033b0:	e3091478 	movw	r1, #38008	; 0x9478
{
 10033b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "");
 10033b8:	e3a00002 	mov	r0, #2
{
 10033bc:	e24dd014 	sub	sp, sp, #20
	d_printf(D_INFO, "");
 10033c0:	e3401105 	movt	r1, #261	; 0x105
 10033c4:	e3a07060 	mov	r7, #96	; 0x60
 10033c8:	eb000208 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "FabCfg: Memory map (including unimplemented registers)");
 10033cc:	e3081348 	movw	r1, #33608	; 0x8348
 10033d0:	e3a00002 	mov	r0, #2
 10033d4:	e3401105 	movt	r1, #261	; 0x105
	d_printf(D_INFO, "                 0          4          8          c");

	for(i = 0; i < 1023; i += 16) {
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 10033d8:	e30853b4 	movw	r5, #33716	; 0x83b4
	d_printf(D_INFO, "FabCfg: Memory map (including unimplemented registers)");
 10033dc:	eb000203 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "                 0          4          8          c");
 10033e0:	e3081380 	movw	r1, #33664	; 0x8380
 10033e4:	e3a00002 	mov	r0, #2
 10033e8:	e3401105 	movt	r1, #261	; 0x105
 10033ec:	e3447001 	movt	r7, #16385	; 0x4001
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 10033f0:	e3405105 	movt	r5, #261	; 0x105
	d_printf(D_INFO, "                 0          4          8          c");
 10033f4:	e3a06040 	mov	r6, #64	; 0x40
	for(i = 0; i < 1023; i += 16) {
 10033f8:	e3a04000 	mov	r4, #0
	d_printf(D_INFO, "                 0          4          8          c");
 10033fc:	eb0001fb 	bl	1003bf0 <d_printf>
	reg &= FAB_CFG_ADDR_MASK;
 1003400:	e2842004 	add	r2, r4, #4
 1003404:	e2840008 	add	r0, r4, #8
 1003408:	e284100c 	add	r1, r4, #12
 100340c:	e2022fff 	and	r2, r2, #1020	; 0x3fc
 1003410:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 1003414:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 1003418:	e2843101 	add	r3, r4, #1073741824	; 0x40000000
	res = _FAB_CFG_ACCESS(reg);
 100341c:	e2822101 	add	r2, r2, #1073741824	; 0x40000000
 1003420:	e2800101 	add	r0, r0, #1073741824	; 0x40000000
 1003424:	e2811101 	add	r1, r1, #1073741824	; 0x40000000
 1003428:	e2822801 	add	r2, r2, #65536	; 0x10000
 100342c:	e2800801 	add	r0, r0, #65536	; 0x10000
 1003430:	e2811801 	add	r1, r1, #65536	; 0x10000
 1003434:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003438:	e5933000 	ldr	r3, [r3]
 100343c:	e2466002 	sub	r6, r6, #2
 1003440:	e592e000 	ldr	lr, [r2]
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 1003444:	e1a02004 	mov	r2, r4
 1003448:	e590c000 	ldr	ip, [r0]
 100344c:	e5910000 	ldr	r0, [r1]
 1003450:	e1a01005 	mov	r1, r5
 1003454:	f7d4f007 	pld	[r4, r7]
 1003458:	e58de000 	str	lr, [sp]
 100345c:	e58d0008 	str	r0, [sp, #8]
 1003460:	e3a00002 	mov	r0, #2
 1003464:	e58dc004 	str	ip, [sp, #4]
 1003468:	eb0001e0 	bl	1003bf0 <d_printf>
	reg &= FAB_CFG_ADDR_MASK;
 100346c:	e284c014 	add	ip, r4, #20
 1003470:	e2840018 	add	r0, r4, #24
 1003474:	e284101c 	add	r1, r4, #28
 1003478:	e20ccfff 	and	ip, ip, #1020	; 0x3fc
 100347c:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 1003480:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 1003484:	e2843801 	add	r3, r4, #65536	; 0x10000
	res = _FAB_CFG_ACCESS(reg);
 1003488:	e28cc101 	add	ip, ip, #1073741824	; 0x40000000
 100348c:	e2800101 	add	r0, r0, #1073741824	; 0x40000000
 1003490:	e2811101 	add	r1, r1, #1073741824	; 0x40000000
 1003494:	e28cc801 	add	ip, ip, #65536	; 0x10000
 1003498:	e2811801 	add	r1, r1, #65536	; 0x10000
 100349c:	e2833141 	add	r3, r3, #1073741840	; 0x40000010
 10034a0:	e2800801 	add	r0, r0, #65536	; 0x10000
 10034a4:	e5933000 	ldr	r3, [r3]
 10034a8:	e2842010 	add	r2, r4, #16
 10034ac:	e59ce000 	ldr	lr, [ip]
 10034b0:	e2844020 	add	r4, r4, #32
 10034b4:	e5900000 	ldr	r0, [r0]
 10034b8:	e591c000 	ldr	ip, [r1]
 10034bc:	e1a01005 	mov	r1, r5
 10034c0:	e58de000 	str	lr, [sp]
 10034c4:	e58d0004 	str	r0, [sp, #4]
 10034c8:	e3a00002 	mov	r0, #2
 10034cc:	e58dc008 	str	ip, [sp, #8]
 10034d0:	eb0001c6 	bl	1003bf0 <d_printf>
 10034d4:	e3540e3e 	cmp	r4, #992	; 0x3e0
 10034d8:	1affffc8 	bne	1003400 <fabcfg_dump_state+0x50>
 10034dc:	e1a05206 	lsl	r5, r6, #4
 10034e0:	e30863b4 	movw	r6, #33716	; 0x83b4
 10034e4:	e3406105 	movt	r6, #261	; 0x105
 10034e8:	e2855e3e 	add	r5, r5, #992	; 0x3e0
	reg &= FAB_CFG_ADDR_MASK;
 10034ec:	e284c004 	add	ip, r4, #4
 10034f0:	e2841008 	add	r1, r4, #8
 10034f4:	e284000c 	add	r0, r4, #12
 10034f8:	e20ccfff 	and	ip, ip, #1020	; 0x3fc
 10034fc:	e2011fff 	and	r1, r1, #1020	; 0x3fc
 1003500:	e2000fff 	and	r0, r0, #1020	; 0x3fc
 1003504:	e2843101 	add	r3, r4, #1073741824	; 0x40000000
	res = _FAB_CFG_ACCESS(reg);
 1003508:	e28cc101 	add	ip, ip, #1073741824	; 0x40000000
 100350c:	e2811101 	add	r1, r1, #1073741824	; 0x40000000
 1003510:	e2800101 	add	r0, r0, #1073741824	; 0x40000000
 1003514:	e28cc801 	add	ip, ip, #65536	; 0x10000
 1003518:	e2811801 	add	r1, r1, #65536	; 0x10000
 100351c:	e2800801 	add	r0, r0, #65536	; 0x10000
 1003520:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003524:	e5933000 	ldr	r3, [r3]
 1003528:	e1a02004 	mov	r2, r4
 100352c:	e59c7000 	ldr	r7, [ip]
	for(i = 0; i < 1023; i += 16) {
 1003530:	e2844010 	add	r4, r4, #16
 1003534:	e591e000 	ldr	lr, [r1]
		d_printf(D_INFO, "0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x", i, \
 1003538:	e1a01006 	mov	r1, r6
 100353c:	e590c000 	ldr	ip, [r0]
 1003540:	e3a00002 	mov	r0, #2
 1003544:	e58d7000 	str	r7, [sp]
 1003548:	e58de004 	str	lr, [sp, #4]
 100354c:	e58dc008 	str	ip, [sp, #8]
 1003550:	eb0001a6 	bl	1003bf0 <d_printf>
	for(i = 0; i < 1023; i += 16) {
 1003554:	e1540005 	cmp	r4, r5
 1003558:	1affffe3 	bne	10034ec <fabcfg_dump_state+0x13c>
				fabcfg_read(i), fabcfg_read(i + 4), fabcfg_read(i + 8), fabcfg_read(i + 12));
	}

	d_printf(D_INFO, "");
 100355c:	e3091478 	movw	r1, #38008	; 0x9478
 1003560:	e3a00002 	mov	r0, #2
 1003564:	e3401105 	movt	r1, #261	; 0x105
}
 1003568:	e28dd014 	add	sp, sp, #20
 100356c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	d_printf(D_INFO, "");
 1003570:	ea00019e 	b	1003bf0 <d_printf>

01003574 <fabcfg_init>:
{
 1003574:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 1003578:	e3a04000 	mov	r4, #0
 100357c:	e3444001 	movt	r4, #16385	; 0x4001
 1003580:	e30813d8 	movw	r1, #33752	; 0x83d8
 1003584:	e1a02004 	mov	r2, r4
{
 1003588:	e24dd00c 	sub	sp, sp, #12
	d_printf(D_INFO, "FabCfg: Initialising @ 0x%08x", FAB_CFG_BASE_ADDRESS);
 100358c:	e3401105 	movt	r1, #261	; 0x105
 1003590:	e3a00002 	mov	r0, #2
 1003594:	eb000195 	bl	1003bf0 <d_printf>
 1003598:	e5942008 	ldr	r2, [r4, #8]
	if(magic == FAB_CFG_MAGIC_VALUE) {
 100359c:	e3073670 	movw	r3, #30320	; 0x7670
 10035a0:	e345336d 	movt	r3, #21357	; 0x536d
 10035a4:	e1520003 	cmp	r2, r3
 10035a8:	1a000044 	bne	10036c0 <fabcfg_init+0x14c>
		d_printf(D_INFO, "FabCfg: Magic value: 0x%08x - OK", magic);
 10035ac:	e30813f8 	movw	r1, #33784	; 0x83f8
 10035b0:	e30667e0 	movw	r6, #26592	; 0x67e0
 10035b4:	e3401105 	movt	r1, #261	; 0x105
 10035b8:	e3a00002 	mov	r0, #2
 10035bc:	e3406105 	movt	r6, #261	; 0x105
	_FAB_CFG_ACCESS(reg) = data;
 10035c0:	e3058678 	movw	r8, #22136	; 0x5678
 10035c4:	e3047321 	movw	r7, #17185	; 0x4321
 10035c8:	e2869018 	add	r9, r6, #24
 10035cc:	eb000187 	bl	1003bf0 <d_printf>
 10035d0:	e3418234 	movt	r8, #4660	; 0x1234
	d_printf(D_INFO, "FabCfg: Running %d test patterns of register interface", FBCFG_NUM_TEST_PATTERNS);
 10035d4:	e308141c 	movw	r1, #33820	; 0x841c
 10035d8:	e3487765 	movt	r7, #34661	; 0x8765
 10035dc:	e3401105 	movt	r1, #261	; 0x105
 10035e0:	e3a02006 	mov	r2, #6
 10035e4:	e3a00002 	mov	r0, #2
 10035e8:	eb000180 	bl	1003bf0 <d_printf>
		fabcfg_write(FAB_CFG_DUMMY1, fabcfg_dummy_tests[i]);
 10035ec:	e4965004 	ldr	r5, [r6], #4
 10035f0:	e5845000 	str	r5, [r4]
	res = _FAB_CFG_ACCESS(reg);
 10035f4:	e5942000 	ldr	r2, [r4]
		if(test == fabcfg_dummy_tests[i]) {
 10035f8:	e1550002 	cmp	r5, r2
 10035fc:	0a000029 	beq	10036a8 <fabcfg_init+0x134>
			d_printf(D_ERROR, "FabCfg: DummyTest1 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 1003600:	e30814b0 	movw	r1, #33968	; 0x84b0
 1003604:	e5163004 	ldr	r3, [r6, #-4]
 1003608:	e3401105 	movt	r1, #261	; 0x105
 100360c:	e3a00004 	mov	r0, #4
 1003610:	eb000176 	bl	1003bf0 <d_printf>
 1003614:	e5942004 	ldr	r2, [r4, #4]
		if(test == fabcfg_dummy_tests[i]) {
 1003618:	e1550002 	cmp	r5, r2
 100361c:	0a00001c 	beq	1003694 <fabcfg_init+0x120>
			d_printf(D_ERROR, "FabCfg: DummyTest2 value: 0x%08x - Not OK, Expect 0x%08x", test, fabcfg_dummy_tests[i]);
 1003620:	e30814ec 	movw	r1, #34028	; 0x84ec
 1003624:	e1a03005 	mov	r3, r5
 1003628:	e3401105 	movt	r1, #261	; 0x105
 100362c:	e3a00004 	mov	r0, #4
 1003630:	eb00016e 	bl	1003bf0 <d_printf>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 1003634:	e1590006 	cmp	r9, r6
	_FAB_CFG_ACCESS(reg) = data;
 1003638:	e5848000 	str	r8, [r4]
 100363c:	e5847004 	str	r7, [r4, #4]
 1003640:	1affffe9 	bne	10035ec <fabcfg_init+0x78>
	d_printf(D_INFO, "FabCfg: All tests passed");
 1003644:	e3081528 	movw	r1, #34088	; 0x8528
 1003648:	e3a00002 	mov	r0, #2
 100364c:	e3401105 	movt	r1, #261	; 0x105
 1003650:	eb000166 	bl	1003bf0 <d_printf>
	res = _FAB_CFG_ACCESS(reg);
 1003654:	e3a02000 	mov	r2, #0
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 1003658:	e3081544 	movw	r1, #34116	; 0x8544
 100365c:	e3442001 	movt	r2, #16385	; 0x4001
 1003660:	e3401105 	movt	r1, #261	; 0x105
 1003664:	e592300c 	ldr	r3, [r2, #12]
 1003668:	e3a00002 	mov	r0, #2
 100366c:	e592e010 	ldr	lr, [r2, #16]
 1003670:	e7e72453 	ubfx	r2, r3, #8, #8
	ver_uh = (version & 0xffff0000) >> 16;
 1003674:	e1a0c823 	lsr	ip, r3, #16
	d_printf(D_INFO, "FabCfg: Bitstream version %d.%02d, code 0x%04x, userid 0x%08x", \
 1003678:	e58de004 	str	lr, [sp, #4]
 100367c:	e6ef3073 	uxtb	r3, r3
 1003680:	e58dc000 	str	ip, [sp]
 1003684:	eb000159 	bl	1003bf0 <d_printf>
}
 1003688:	e28dd00c 	add	sp, sp, #12
 100368c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
	fabcfg_dump_state();
 1003690:	eaffff46 	b	10033b0 <fabcfg_dump_state>
	for(i = 0; i < FBCFG_NUM_TEST_PATTERNS; i++) {
 1003694:	e1590006 	cmp	r9, r6
	_FAB_CFG_ACCESS(reg) = data;
 1003698:	e5848000 	str	r8, [r4]
 100369c:	e5847004 	str	r7, [r4, #4]
 10036a0:	1affffd1 	bne	10035ec <fabcfg_init+0x78>
 10036a4:	eaffffe6 	b	1003644 <fabcfg_init+0xd0>
			d_printf(D_EXINFO, "FabCfg: DummyTest1 value: 0x%08x - OK", test);
 10036a8:	e3081488 	movw	r1, #33928	; 0x8488
 10036ac:	e1a02005 	mov	r2, r5
 10036b0:	e3401105 	movt	r1, #261	; 0x105
 10036b4:	e3a00001 	mov	r0, #1
 10036b8:	eb00014c 	bl	1003bf0 <d_printf>
 10036bc:	eaffffd4 	b	1003614 <fabcfg_init+0xa0>
		d_printf(D_ERROR, "FabCfg: Magic value: 0x%08x - Not OK, Expect 0x%08x", magic, FAB_CFG_MAGIC_VALUE);
 10036c0:	e3081454 	movw	r1, #33876	; 0x8454
 10036c4:	e3a00004 	mov	r0, #4
 10036c8:	e3401105 	movt	r1, #261	; 0x105
 10036cc:	eb000147 	bl	1003bf0 <d_printf>
		exit(-1);
 10036d0:	e3e00000 	mvn	r0, #0
 10036d4:	fa001f15 	blx	100b330 <exit>

010036d8 <irq_xscutimer>:
 */
volatile void irq_xscutimer(void *callback)
{
	XScuTimer *timer = (XScuTimer *) callback;

	if(XScuTimer_IsExpired(timer)) {
 10036d8:	e5903004 	ldr	r3, [r0, #4]
 10036dc:	e593300c 	ldr	r3, [r3, #12]
 10036e0:	e3130001 	tst	r3, #1
		g_hal.g_timer_overflow++;
 10036e4:	13013b60 	movwne	r3, #7008	; 0x1b60
 10036e8:	13403116 	movtne	r3, #278	; 0x116
 10036ec:	1593204c 	ldrne	r2, [r3, #76]	; 0x4c
 10036f0:	12822001 	addne	r2, r2, #1
 10036f4:	1583204c 	strne	r2, [r3, #76]	; 0x4c
	}
}
 10036f8:	e12fff1e 	bx	lr

010036fc <d_printf.constprop.5>:
 * @param	...			Varadic args
 *
 * @note	For formats besides D_RAW, this function appends \r\n to all outputs and prints info/warn/error code and
 * 			optionally prints the system timer.
 */
void d_printf(int debug_code, char *fmt, ...)
 10036fc:	e92d000e 	push	{r1, r2, r3}
			case D_EXINFO:
				print("[--] ");							// dull white text (default)
				break;

			case D_INFO:
				print("\033[0;97m[ii] "); 				// bright white text
 1003700:	e3080584 	movw	r0, #34180	; 0x8584
void d_printf(int debug_code, char *fmt, ...)
 1003704:	e92d40d0 	push	{r4, r6, r7, lr}
 1003708:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100370c:	e24dd01c 	sub	sp, sp, #28
				print("\033[0;97m[ii] "); 				// bright white text
 1003710:	e3400105 	movt	r0, #261	; 0x105
 1003714:	eb00170f 	bl	1009358 <print>
				print("\033[97;41m[EE]\033[0;91m ");	// red text
				break;
		}

#if DBG_PRINT_TIMES == 1
		if(g_hal.g_timer_have_init) {
 1003718:	e3013b60 	movw	r3, #7008	; 0x1b60
 100371c:	e3403116 	movt	r3, #278	; 0x116
 1003720:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 1003724:	e3540000 	cmp	r4, #0
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
			sec = total_usec / 1000000;
			usec = total_usec % 1000000;
		} else {
			sec = 0;
			usec = 0;
 1003728:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 100372c:	0a00001b 	beq	10037a0 <d_printf.constprop.5+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003730:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003734:	eddf3b37 	vldr	d19, [pc, #220]	; 1003818 <d_printf.constprop.5+0x11c>
 1003738:	eddf2b38 	vldr	d18, [pc, #224]	; 1003820 <d_printf.constprop.5+0x124>
 100373c:	e5922004 	ldr	r2, [r2, #4]
 1003740:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1003744:	e1e02002 	mvn	r2, r2
 1003748:	ee073a90 	vmov	s15, r3
 100374c:	eef80b67 	vcvt.f64.u32	d16, s15
 1003750:	ee072a90 	vmov	s15, r2
 1003754:	eef81b67 	vcvt.f64.u32	d17, s15
 1003758:	ee600ba3 	vmul.f64	d16, d16, d19
 100375c:	ee410ba2 	vmla.f64	d16, d17, d18
 1003760:	ec510b30 	vmov	r0, r1, d16
 1003764:	fa001e9b 	blx	100b1d8 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 1003768:	e3042240 	movw	r2, #16960	; 0x4240
 100376c:	e3a03000 	mov	r3, #0
 1003770:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003774:	e1a06000 	mov	r6, r0
 1003778:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 100377c:	fa001e79 	blx	100b168 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 1003780:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 1003784:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 1003788:	e340200f 	movt	r2, #15
 100378c:	e3a03000 	mov	r3, #0
 1003790:	e1a00006 	mov	r0, r6
 1003794:	e1a01007 	mov	r1, r7
 1003798:	fa001e72 	blx	100b168 <__aeabi_uldivmod>
 100379c:	e1a03002 	mov	r3, r2
		}

		if(debug_code != D_RAW) {
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 10037a0:	e3082594 	movw	r2, #34196	; 0x8594
 10037a4:	e58d3000 	str	r3, [sp]
 10037a8:	e3402105 	movt	r2, #261	; 0x105
 10037ac:	e1a03004 	mov	r3, r4
 10037b0:	e3a01a01 	mov	r1, #4096	; 0x1000
 10037b4:	e28d000c 	add	r0, sp, #12
 10037b8:	fa00264e 	blx	100d0f8 <snprintf>
			print(time_buffer);
 10037bc:	e28d000c 	add	r0, sp, #12
 10037c0:	eb0016e4 	bl	1009358 <print>
		}
#endif

		va_list args;
		va_start(args, fmt);
 10037c4:	e28dca01 	add	ip, sp, #4096	; 0x1000

		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10037c8:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 10037cc:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10037d0:	e282202c 	add	r2, r2, #44	; 0x2c
 10037d4:	e1a0300c 	mov	r3, ip
 10037d8:	e5922000 	ldr	r2, [r2]
 10037dc:	e3a01a01 	mov	r1, #4096	; 0x1000
 10037e0:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 10037e4:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 10037e8:	fa0036bb 	blx	10112dc <vsnprintf>
		print(buffer);
 10037ec:	e28d0018 	add	r0, sp, #24
 10037f0:	eb0016d8 	bl	1009358 <print>

		if(debug_code != D_RAW) {
			print("\033[m\r\n");
 10037f4:	e30805a0 	movw	r0, #34208	; 0x85a0
 10037f8:	e3400105 	movt	r0, #261	; 0x105
 10037fc:	eb0016d5 	bl	1009358 <print>
		}

		va_end(args);
	}
}
 1003800:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1003804:	e28dd01c 	add	sp, sp, #28
 1003808:	e8bd40d0 	pop	{r4, r6, r7, lr}
 100380c:	e28dd00c 	add	sp, sp, #12
 1003810:	e12fff1e 	bx	lr
 1003814:	e320f000 	nop	{0}
 1003818:	a17f0000 	.word	0xa17f0000
 100381c:	41689374 	.word	0x41689374
 1003820:	a17f0000 	.word	0xa17f0000
 1003824:	3f689374 	.word	0x3f689374

01003828 <d_printf.constprop.6>:
void d_printf(int debug_code, char *fmt, ...)
 1003828:	e92d000e 	push	{r1, r2, r3}
}
 100382c:	e28dd00c 	add	sp, sp, #12
 1003830:	e12fff1e 	bx	lr

01003834 <d_printf.constprop.7>:
void d_printf(int debug_code, char *fmt, ...)
 1003834:	e92d000e 	push	{r1, r2, r3}
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003838:	e30805a8 	movw	r0, #34216	; 0x85a8
void d_printf(int debug_code, char *fmt, ...)
 100383c:	e92d40d0 	push	{r4, r6, r7, lr}
 1003840:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1003844:	e24dd01c 	sub	sp, sp, #28
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003848:	e3400105 	movt	r0, #261	; 0x105
 100384c:	eb0016c1 	bl	1009358 <print>
		if(g_hal.g_timer_have_init) {
 1003850:	e3013b60 	movw	r3, #7008	; 0x1b60
 1003854:	e3403116 	movt	r3, #278	; 0x116
 1003858:	e5934050 	ldr	r4, [r3, #80]	; 0x50
 100385c:	e3540000 	cmp	r4, #0
			usec = 0;
 1003860:	01a03004 	moveq	r3, r4
		if(g_hal.g_timer_have_init) {
 1003864:	0a00001b 	beq	10038d8 <d_printf.constprop.7+0xa4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003868:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 100386c:	eddf3b37 	vldr	d19, [pc, #220]	; 1003950 <d_printf.constprop.7+0x11c>
 1003870:	eddf2b38 	vldr	d18, [pc, #224]	; 1003958 <d_printf.constprop.7+0x124>
 1003874:	e5922004 	ldr	r2, [r2, #4]
 1003878:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 100387c:	e1e02002 	mvn	r2, r2
 1003880:	ee073a90 	vmov	s15, r3
 1003884:	eef80b67 	vcvt.f64.u32	d16, s15
 1003888:	ee072a90 	vmov	s15, r2
 100388c:	eef81b67 	vcvt.f64.u32	d17, s15
 1003890:	ee600ba3 	vmul.f64	d16, d16, d19
 1003894:	ee410ba2 	vmla.f64	d16, d17, d18
 1003898:	ec510b30 	vmov	r0, r1, d16
 100389c:	fa001e4d 	blx	100b1d8 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 10038a0:	e3042240 	movw	r2, #16960	; 0x4240
 10038a4:	e3a03000 	mov	r3, #0
 10038a8:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 10038ac:	e1a06000 	mov	r6, r0
 10038b0:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 10038b4:	fa001e2b 	blx	100b168 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 10038b8:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 10038bc:	e1a04000 	mov	r4, r0
			usec = total_usec % 1000000;
 10038c0:	e340200f 	movt	r2, #15
 10038c4:	e3a03000 	mov	r3, #0
 10038c8:	e1a00006 	mov	r0, r6
 10038cc:	e1a01007 	mov	r1, r7
 10038d0:	fa001e24 	blx	100b168 <__aeabi_uldivmod>
 10038d4:	e1a03002 	mov	r3, r2
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 10038d8:	e3082594 	movw	r2, #34196	; 0x8594
 10038dc:	e58d3000 	str	r3, [sp]
 10038e0:	e3402105 	movt	r2, #261	; 0x105
 10038e4:	e1a03004 	mov	r3, r4
 10038e8:	e3a01a01 	mov	r1, #4096	; 0x1000
 10038ec:	e28d000c 	add	r0, sp, #12
 10038f0:	fa002600 	blx	100d0f8 <snprintf>
			print(time_buffer);
 10038f4:	e28d000c 	add	r0, sp, #12
 10038f8:	eb001696 	bl	1009358 <print>
		va_start(args, fmt);
 10038fc:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003900:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1003904:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003908:	e282202c 	add	r2, r2, #44	; 0x2c
 100390c:	e1a0300c 	mov	r3, ip
 1003910:	e5922000 	ldr	r2, [r2]
 1003914:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003918:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 100391c:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003920:	fa00366d 	blx	10112dc <vsnprintf>
		print(buffer);
 1003924:	e28d0018 	add	r0, sp, #24
 1003928:	eb00168a 	bl	1009358 <print>
			print("\033[m\r\n");
 100392c:	e30805a0 	movw	r0, #34208	; 0x85a0
 1003930:	e3400105 	movt	r0, #261	; 0x105
 1003934:	eb001687 	bl	1009358 <print>
}
 1003938:	e28dda01 	add	sp, sp, #4096	; 0x1000
 100393c:	e28dd01c 	add	sp, sp, #28
 1003940:	e8bd40d0 	pop	{r4, r6, r7, lr}
 1003944:	e28dd00c 	add	sp, sp, #12
 1003948:	e12fff1e 	bx	lr
 100394c:	e320f000 	nop	{0}
 1003950:	a17f0000 	.word	0xa17f0000
 1003954:	41689374 	.word	0x41689374
 1003958:	a17f0000 	.word	0xa17f0000
 100395c:	3f689374 	.word	0x3f689374

01003960 <d_read_timing.part.3>:
 *
 * @param	Timer index (0-15)
 *
 * @return	64-bit counter value
 */
uint64_t d_read_timing(int index)
 1003960:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
{
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1003964:	e30001de 	movw	r0, #478	; 0x1de
uint64_t d_read_timing(int index)
 1003968:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100396c:	e30835c0 	movw	r3, #34240	; 0x85c0
 1003970:	e30825d0 	movw	r2, #34256	; 0x85d0
 1003974:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 1003978:	e58d0000 	str	r0, [sp]
 100397c:	e3403105 	movt	r3, #261	; 0x105
 1003980:	e3a00004 	mov	r0, #4
 1003984:	e3402105 	movt	r2, #261	; 0x105
 1003988:	e3401105 	movt	r1, #261	; 0x105
 100398c:	ebffffa8 	bl	1003834 <d_printf.constprop.7>
 1003990:	e3e00062 	mvn	r0, #98	; 0x62
 1003994:	fa001e65 	blx	100b330 <exit>

01003998 <d_xilinx_assert>:
/**
 * Xilinx assert handler.
 */
void d_xilinx_assert(const char8 *file, s32 line)
{
	d_printf(D_ERROR, "Assert failed at line %d of file `%s'\r\n", line, file);
 1003998:	e1a02001 	mov	r2, r1
 100399c:	e30815ec 	movw	r1, #34284	; 0x85ec
 10039a0:	e1a03000 	mov	r3, r0
 10039a4:	e3401105 	movt	r1, #261	; 0x105
 10039a8:	e3a00004 	mov	r0, #4
 10039ac:	eaffffa0 	b	1003834 <d_printf.constprop.7>

010039b0 <bogo_calibrate>:
{
 10039b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 10039b4:	e3016b60 	movw	r6, #7008	; 0x1b60
 10039b8:	e3406116 	movt	r6, #278	; 0x116
 10039bc:	e3a03000 	mov	r3, #0
 10039c0:	e3443020 	movt	r3, #16416	; 0x4020
 10039c4:	e3a02002 	mov	r2, #2
 10039c8:	e596a014 	ldr	sl, [r6, #20]
	uint64_t timing_total = 0;
 10039cc:	e3a0b000 	mov	fp, #0
{
 10039d0:	ed2d8b02 	vpush	{d8}
 10039d4:	e24dd024 	sub	sp, sp, #36	; 0x24
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 10039d8:	ed9f8a5c 	vldr	s16, [pc, #368]	; 1003b50 <bogo_calibrate+0x1a0>
	while(iters--) {
 10039dc:	e3e08000 	mvn	r8, #0
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 10039e0:	e58d2010 	str	r2, [sp, #16]
	while(iters--) {
 10039e4:	e3e09000 	mvn	r9, #0
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 10039e8:	ee073a90 	vmov	s15, r3
	uint64_t timing_total = 0;
 10039ec:	e1a0200b 	mov	r2, fp
 10039f0:	e28aa004 	add	sl, sl, #4
	g_hal.bogo_cal = 2.5f; // Ensure some FPU operation still happens
 10039f4:	e5863158 	str	r3, [r6, #344]	; 0x158
 10039f8:	e59a7000 	ldr	r7, [sl]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 10039fc:	ee687a27 	vmul.f32	s15, s16, s15
 1003a00:	e58d2018 	str	r2, [sp, #24]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003a04:	e3770c01 	cmn	r7, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003a08:	e1e07007 	mvn	r7, r7
		msb = g_hal.g_timer_overflow;
 1003a0c:	9596304c 	ldrls	r3, [r6, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 1003a10:	e5867058 	str	r7, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003a14:	ee170a90 	vmov	r0, s15
		msb = g_hal.g_timer_overflow;
 1003a18:	958d301c 	strls	r3, [sp, #28]
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003a1c:	e59d301c 	ldr	r3, [sp, #28]
	g_hal.timers[index] = timer_value;
 1003a20:	e586305c 	str	r3, [r6, #92]	; 0x5c
 1003a24:	e58d3014 	str	r3, [sp, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003a28:	fa001dda 	blx	100b198 <__aeabi_f2ulz>
	while(iters--) {
 1003a2c:	e2504001 	subs	r4, r0, #1
 1003a30:	e59d2018 	ldr	r2, [sp, #24]
 1003a34:	e2c15000 	sbc	r5, r1, #0
 1003a38:	e1903001 	orrs	r3, r0, r1
 1003a3c:	e59d3014 	ldr	r3, [sp, #20]
 1003a40:	0a000009 	beq	1003a6c <bogo_calibrate+0xbc>
		__asm__("nop");
 1003a44:	e320f000 	nop	{0}
	while(iters--) {
 1003a48:	e2544001 	subs	r4, r4, #1
 1003a4c:	e2c55000 	sbc	r5, r5, #0
 1003a50:	e1550009 	cmp	r5, r9
 1003a54:	01540008 	cmpeq	r4, r8
 1003a58:	1afffff9 	bne	1003a44 <bogo_calibrate+0x94>
 1003a5c:	e596a014 	ldr	sl, [r6, #20]
 1003a60:	e5967058 	ldr	r7, [r6, #88]	; 0x58
 1003a64:	e596305c 	ldr	r3, [r6, #92]	; 0x5c
 1003a68:	e28aa004 	add	sl, sl, #4
 1003a6c:	e59a1000 	ldr	r1, [sl]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003a70:	e3710c01 	cmn	r1, #256	; 0x100
 1003a74:	8a00000e 	bhi	1003ab4 <bogo_calibrate+0x104>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003a78:	e1e01001 	mvn	r1, r1
		msb = g_hal.g_timer_overflow;
 1003a7c:	e596004c 	ldr	r0, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003a80:	e0517007 	subs	r7, r1, r7
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003a84:	e59d1010 	ldr	r1, [sp, #16]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003a88:	e58670d8 	str	r7, [r6, #216]	; 0xd8
 1003a8c:	e0c03003 	sbc	r3, r0, r3
		timing_total += d_read_timing(0);
 1003a90:	e09bb007 	adds	fp, fp, r7
 1003a94:	e0a22003 	adc	r2, r2, r3
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003a98:	e3510001 	cmp	r1, #1
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003a9c:	e58630dc 	str	r3, [r6, #220]	; 0xdc
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003aa0:	0a00000e 	beq	1003ae0 <bogo_calibrate+0x130>
 1003aa4:	e3a03001 	mov	r3, #1
 1003aa8:	edd67a56 	vldr	s15, [r6, #344]	; 0x158
 1003aac:	e58d3010 	str	r3, [sp, #16]
 1003ab0:	eaffffd0 	b	10039f8 <bogo_calibrate+0x48>
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1003ab4:	e1e01001 	mvn	r1, r1
 1003ab8:	e3a00000 	mov	r0, #0
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003abc:	e0517007 	subs	r7, r1, r7
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003ac0:	e59d1010 	ldr	r1, [sp, #16]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003ac4:	e0c03003 	sbc	r3, r0, r3
		timing_total += d_read_timing(0);
 1003ac8:	e09bb007 	adds	fp, fp, r7
 1003acc:	e0a22003 	adc	r2, r2, r3
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003ad0:	e58670d8 	str	r7, [r6, #216]	; 0xd8
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003ad4:	e3510001 	cmp	r1, #1
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1003ad8:	e58630dc 	str	r3, [r6, #220]	; 0xdc
	for(i = 0; i < BOGOCAL_ITERCNT; i++) {
 1003adc:	1afffff0 	bne	1003aa4 <bogo_calibrate+0xf4>
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 1003ae0:	e1a0000b 	mov	r0, fp
 1003ae4:	e1a01002 	mov	r1, r2
 1003ae8:	fa001cfc 	blx	100aee0 <__aeabi_ul2d>
 1003aec:	eddf0b15 	vldr	d16, [pc, #84]	; 1003b48 <bogo_calibrate+0x198>
 1003af0:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003af4:	e3081614 	movw	r1, #34324	; 0x8614
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003af8:	ed9f6a15 	vldr	s12, [pc, #84]	; 1003b54 <bogo_calibrate+0x1a4>
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003afc:	e3401105 	movt	r1, #261	; 0x105
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003b00:	eeb07a04 	vmov.f32	s14, #4	; 0x40200000  2.5
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003b04:	e3a00002 	mov	r0, #2
	us_total = timing_total * XSCUTIMER_TICKS_TO_US;
 1003b08:	ee610ba0 	vmul.f64	d16, d17, d16
 1003b0c:	eef77be0 	vcvt.f32.f64	s15, d16
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003b10:	eec66a27 	vdiv.f32	s13, s12, s15
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003b14:	eef70ae7 	vcvt.f64.f32	d16, s15
 1003b18:	edcd0b00 	vstr	d16, [sp]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003b1c:	ee667a87 	vmul.f32	s15, s13, s14
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003b20:	eef70ae6 	vcvt.f64.f32	d16, s13
 1003b24:	eef71ae7 	vcvt.f64.f32	d17, s15
 1003b28:	edcd0b02 	vstr	d16, [sp, #8]
	g_hal.bogo_cal = (((float)(BOGOCAL_ITERAMT * BOGOCAL_ITERCNT) / (float)us_total)) * 2.5f;
 1003b2c:	edc67a56 	vstr	s15, [r6, #344]	; 0x158
	d_printf(D_INFO, "BogoDelay: calibrated: 1us = %2.3f cycles (total time %2.1f us) (%2.2f BogoMIPS)", \
 1003b30:	ec532b31 	vmov	r2, r3, d17
 1003b34:	ebfffef0 	bl	10036fc <d_printf.constprop.5>
}
 1003b38:	e28dd024 	add	sp, sp, #36	; 0x24
 1003b3c:	ecbd8b02 	vpop	{d8}
 1003b40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1003b44:	e320f000 	nop	{0}
 1003b48:	a17f0000 	.word	0xa17f0000
 1003b4c:	3f689374 	.word	0x3f689374
 1003b50:	47c35000 	.word	0x47c35000
 1003b54:	48435000 	.word	0x48435000

01003b58 <bogo_delay>:
{
 1003b58:	e92d4030 	push	{r4, r5, lr}
 1003b5c:	e24dd00c 	sub	sp, sp, #12
 1003b60:	e58d0004 	str	r0, [sp, #4]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003b64:	e3013b60 	movw	r3, #7008	; 0x1b60
 1003b68:	e3403116 	movt	r3, #278	; 0x116
 1003b6c:	eddd7a01 	vldr	s15, [sp, #4]
 1003b70:	ed937a56 	vldr	s14, [r3, #344]	; 0x158
 1003b74:	eef87a67 	vcvt.f32.u32	s15, s15
 1003b78:	ee677a87 	vmul.f32	s15, s15, s14
 1003b7c:	ee170a90 	vmov	r0, s15
 1003b80:	fa001d84 	blx	100b198 <__aeabi_f2ulz>
	while(iters--) {
 1003b84:	e2504001 	subs	r4, r0, #1
 1003b88:	e2c15000 	sbc	r5, r1, #0
 1003b8c:	e1903001 	orrs	r3, r0, r1
 1003b90:	0a000007 	beq	1003bb4 <bogo_delay+0x5c>
 1003b94:	e3e02000 	mvn	r2, #0
 1003b98:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 1003b9c:	e320f000 	nop	{0}
	while(iters--) {
 1003ba0:	e2544001 	subs	r4, r4, #1
 1003ba4:	e2c55000 	sbc	r5, r5, #0
 1003ba8:	e1550003 	cmp	r5, r3
 1003bac:	01540002 	cmpeq	r4, r2
 1003bb0:	1afffff9 	bne	1003b9c <bogo_delay+0x44>
}
 1003bb4:	e28dd00c 	add	sp, sp, #12
 1003bb8:	e8bd8030 	pop	{r4, r5, pc}

01003bbc <gpio_led_write>:
	enable = !!(enable);
 1003bbc:	e2912000 	adds	r2, r1, #0
 1003bc0:	13a02001 	movne	r2, #1
	switch(index) {
 1003bc4:	e3500000 	cmp	r0, #0
 1003bc8:	0a000004 	beq	1003be0 <gpio_led_write+0x24>
 1003bcc:	e3500001 	cmp	r0, #1
 1003bd0:	112fff1e 	bxne	lr
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, enable);
 1003bd4:	e3a01025 	mov	r1, #37	; 0x25
 1003bd8:	e59f000c 	ldr	r0, [pc, #12]	; 1003bec <gpio_led_write+0x30>
 1003bdc:	ea000d04 	b	1006ff4 <XGpioPs_WritePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, enable);
 1003be0:	e3a01009 	mov	r1, #9
 1003be4:	e59f0000 	ldr	r0, [pc]	; 1003bec <gpio_led_write+0x30>
 1003be8:	ea000d01 	b	1006ff4 <XGpioPs_WritePin>
 1003bec:	01161b84 	.word	0x01161b84

01003bf0 <d_printf>:
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003bf0:	e3500001 	cmp	r0, #1
{
 1003bf4:	e92d000e 	push	{r1, r2, r3}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003bf8:	d3a03000 	movle	r3, #0
 1003bfc:	c3a03001 	movgt	r3, #1
 1003c00:	e3500000 	cmp	r0, #0
 1003c04:	03a03001 	moveq	r3, #1
{
 1003c08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003c0c:	e3530000 	cmp	r3, #0
{
 1003c10:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1003c14:	e24dd018 	sub	sp, sp, #24
	if(debug_code == D_RAW || debug_code >= DBG_LEVEL) {
 1003c18:	0a00003b 	beq	1003d0c <d_printf+0x11c>
		switch(debug_code) {
 1003c1c:	e2403001 	sub	r3, r0, #1
 1003c20:	e1a04000 	mov	r4, r0
 1003c24:	e3530003 	cmp	r3, #3
 1003c28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1003c2c:	ea000006 	b	1003c4c <d_printf+0x5c>
 1003c30:	01003d20 	.word	0x01003d20
 1003c34:	01003d30 	.word	0x01003d30
 1003c38:	01003d40 	.word	0x01003d40
 1003c3c:	01003c40 	.word	0x01003c40
				print("\033[97;41m[EE]\033[0;91m ");	// red text
 1003c40:	e30805a8 	movw	r0, #34216	; 0x85a8
 1003c44:	e3400105 	movt	r0, #261	; 0x105
 1003c48:	eb0015c2 	bl	1009358 <print>
		if(g_hal.g_timer_have_init) {
 1003c4c:	e3013b60 	movw	r3, #7008	; 0x1b60
 1003c50:	e3403116 	movt	r3, #278	; 0x116
 1003c54:	e5935050 	ldr	r5, [r3, #80]	; 0x50
 1003c58:	e3550000 	cmp	r5, #0
			usec = 0;
 1003c5c:	01a03005 	moveq	r3, r5
		if(g_hal.g_timer_have_init) {
 1003c60:	0a00001b 	beq	1003cd4 <d_printf+0xe4>
			timer = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003c64:	e5932014 	ldr	r2, [r3, #20]
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003c68:	eddf3b52 	vldr	d19, [pc, #328]	; 1003db8 <d_printf+0x1c8>
 1003c6c:	eddf2b53 	vldr	d18, [pc, #332]	; 1003dc0 <d_printf+0x1d0>
 1003c70:	e5922004 	ldr	r2, [r2, #4]
 1003c74:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
 1003c78:	e1e02002 	mvn	r2, r2
 1003c7c:	ee073a90 	vmov	s15, r3
 1003c80:	eef80b67 	vcvt.f64.u32	d16, s15
 1003c84:	ee072a90 	vmov	s15, r2
 1003c88:	eef81b67 	vcvt.f64.u32	d17, s15
 1003c8c:	ee600ba3 	vmul.f64	d16, d16, d19
 1003c90:	ee410ba2 	vmla.f64	d16, d17, d18
 1003c94:	ec510b30 	vmov	r0, r1, d16
 1003c98:	fa001d4e 	blx	100b1d8 <__aeabi_d2ulz>
			sec = total_usec / 1000000;
 1003c9c:	e3042240 	movw	r2, #16960	; 0x4240
 1003ca0:	e3a03000 	mov	r3, #0
 1003ca4:	e340200f 	movt	r2, #15
			total_usec = (XSCUTIMER_OVERFLOW_TIME_US * g_hal.g_timer_overflow) + ((0xffffffff - timer) * XSCUTIMER_TICKS_TO_US);
 1003ca8:	e1a06000 	mov	r6, r0
 1003cac:	e1a07001 	mov	r7, r1
			sec = total_usec / 1000000;
 1003cb0:	fa001d2c 	blx	100b168 <__aeabi_uldivmod>
			usec = total_usec % 1000000;
 1003cb4:	e3042240 	movw	r2, #16960	; 0x4240
			sec = total_usec / 1000000;
 1003cb8:	e1a05000 	mov	r5, r0
			usec = total_usec % 1000000;
 1003cbc:	e340200f 	movt	r2, #15
 1003cc0:	e3a03000 	mov	r3, #0
 1003cc4:	e1a00006 	mov	r0, r6
 1003cc8:	e1a01007 	mov	r1, r7
 1003ccc:	fa001d25 	blx	100b168 <__aeabi_uldivmod>
 1003cd0:	e1a03002 	mov	r3, r2
		if(debug_code != D_RAW) {
 1003cd4:	e3540000 	cmp	r4, #0
 1003cd8:	1a00001c 	bne	1003d50 <d_printf+0x160>
		va_start(args, fmt);
 1003cdc:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003ce0:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1003ce4:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003ce8:	e282202c 	add	r2, r2, #44	; 0x2c
 1003cec:	e1a0300c 	mov	r3, ip
 1003cf0:	e28d0018 	add	r0, sp, #24
 1003cf4:	e5922000 	ldr	r2, [r2]
 1003cf8:	e3a01a01 	mov	r1, #4096	; 0x1000
		va_start(args, fmt);
 1003cfc:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003d00:	fa003575 	blx	10112dc <vsnprintf>
		print(buffer);
 1003d04:	e28d0018 	add	r0, sp, #24
 1003d08:	eb001592 	bl	1009358 <print>
}
 1003d0c:	e28dda01 	add	sp, sp, #4096	; 0x1000
 1003d10:	e28dd018 	add	sp, sp, #24
 1003d14:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 1003d18:	e28dd00c 	add	sp, sp, #12
 1003d1c:	e12fff1e 	bx	lr
				print("[--] ");							// dull white text (default)
 1003d20:	e3080668 	movw	r0, #34408	; 0x8668
 1003d24:	e3400105 	movt	r0, #261	; 0x105
 1003d28:	eb00158a 	bl	1009358 <print>
				break;
 1003d2c:	eaffffc6 	b	1003c4c <d_printf+0x5c>
				print("\033[0;97m[ii] "); 				// bright white text
 1003d30:	e3080584 	movw	r0, #34180	; 0x8584
 1003d34:	e3400105 	movt	r0, #261	; 0x105
 1003d38:	eb001586 	bl	1009358 <print>
				break;
 1003d3c:	eaffffc2 	b	1003c4c <d_printf+0x5c>
				print("\033[30;103m[WW]\033[0;93m ");	// yellow text
 1003d40:	e3080670 	movw	r0, #34416	; 0x8670
 1003d44:	e3400105 	movt	r0, #261	; 0x105
 1003d48:	eb001582 	bl	1009358 <print>
				break;
 1003d4c:	eaffffbe 	b	1003c4c <d_printf+0x5c>
			snprintf(time_buffer, DBG_BUFFSIZE, "[%3u.%06u] ", (unsigned int)sec, (unsigned int)usec);
 1003d50:	e3082594 	movw	r2, #34196	; 0x8594
 1003d54:	e58d3000 	str	r3, [sp]
 1003d58:	e3402105 	movt	r2, #261	; 0x105
 1003d5c:	e1a03005 	mov	r3, r5
 1003d60:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003d64:	e28d000c 	add	r0, sp, #12
 1003d68:	fa0024e2 	blx	100d0f8 <snprintf>
			print(time_buffer);
 1003d6c:	e28d000c 	add	r0, sp, #12
 1003d70:	eb001578 	bl	1009358 <print>
		va_start(args, fmt);
 1003d74:	e28dca01 	add	ip, sp, #4096	; 0x1000
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003d78:	e28d2a01 	add	r2, sp, #4096	; 0x1000
		va_start(args, fmt);
 1003d7c:	e28cc030 	add	ip, ip, #48	; 0x30
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003d80:	e282202c 	add	r2, r2, #44	; 0x2c
 1003d84:	e1a0300c 	mov	r3, ip
 1003d88:	e5922000 	ldr	r2, [r2]
 1003d8c:	e3a01a01 	mov	r1, #4096	; 0x1000
 1003d90:	e28d0018 	add	r0, sp, #24
		va_start(args, fmt);
 1003d94:	e58dc008 	str	ip, [sp, #8]
		vsnprintf(buffer, DBG_BUFFSIZE, fmt, args);
 1003d98:	fa00354f 	blx	10112dc <vsnprintf>
		print(buffer);
 1003d9c:	e28d0018 	add	r0, sp, #24
 1003da0:	eb00156c 	bl	1009358 <print>
			print("\033[m\r\n");
 1003da4:	e30805a0 	movw	r0, #34208	; 0x85a0
 1003da8:	e3400105 	movt	r0, #261	; 0x105
 1003dac:	eb001569 	bl	1009358 <print>
}
 1003db0:	eaffffd5 	b	1003d0c <d_printf+0x11c>
 1003db4:	e320f000 	nop	{0}
 1003db8:	a17f0000 	.word	0xa17f0000
 1003dbc:	41689374 	.word	0x41689374
 1003dc0:	a17f0000 	.word	0xa17f0000
 1003dc4:	3f689374 	.word	0x3f689374

01003dc8 <hal_init>:
{
 1003dc8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	g_hal.bogo_cal = 1.0f;
 1003dcc:	e3016b60 	movw	r6, #7008	; 0x1b60
{
 1003dd0:	e24dd010 	sub	sp, sp, #16
	g_hal.bogo_cal = 1.0f;
 1003dd4:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
 1003dd8:	e3406116 	movt	r6, #278	; 0x116
 1003ddc:	e5863158 	str	r3, [r6, #344]	; 0x158
	init_platform();
 1003de0:	eb000291 	bl	100482c <init_platform>
	Xil_AssertSetCallback(&d_xilinx_assert);
 1003de4:	e3030998 	movw	r0, #14744	; 0x3998
 1003de8:	e3400100 	movt	r0, #256	; 0x100
 1003dec:	eb001554 	bl	1009344 <Xil_AssertSetCallback>
	d_printf(D_RAW, "\r\n\r\n\033[2J\033[0m\r\n");
 1003df0:	e3081688 	movw	r1, #34440	; 0x8688
 1003df4:	e3a00000 	mov	r0, #0
 1003df8:	e3401105 	movt	r1, #261	; 0x105
 1003dfc:	ebffff7b 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "ps_app: Zynq application for YAOS Oscilloscope Project (%s)", PS_APP_VERSION_TAG);
 1003e00:	e3082698 	movw	r2, #34456	; 0x8698
 1003e04:	e30816a8 	movw	r1, #34472	; 0x86a8
 1003e08:	e3402105 	movt	r2, #261	; 0x105
 1003e0c:	e3401105 	movt	r1, #261	; 0x105
 1003e10:	e3a00002 	mov	r0, #2
 1003e14:	ebfffe38 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "Built %s %s", __DATE__, __TIME__);
 1003e18:	e30836e4 	movw	r3, #34532	; 0x86e4
 1003e1c:	e30826f0 	movw	r2, #34544	; 0x86f0
 1003e20:	e30816fc 	movw	r1, #34556	; 0x86fc
 1003e24:	e3403105 	movt	r3, #261	; 0x105
 1003e28:	e3402105 	movt	r2, #261	; 0x105
 1003e2c:	e3401105 	movt	r1, #261	; 0x105
 1003e30:	e3a00002 	mov	r0, #2
 1003e34:	ebfffe30 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "");
 1003e38:	e3091478 	movw	r1, #38008	; 0x9478
 1003e3c:	e3a00002 	mov	r0, #2
 1003e40:	e3401105 	movt	r1, #261	; 0x105
 1003e44:	ebfffe2c 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "Application (C) 2020 Tomato Engineering Ltd.");
 1003e48:	e3081708 	movw	r1, #34568	; 0x8708
 1003e4c:	e3a00002 	mov	r0, #2
 1003e50:	e3401105 	movt	r1, #261	; 0x105
 1003e54:	ebfffe28 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "Parts       (C) 2005 - 2015 Xilinx, Inc.");
 1003e58:	e3081738 	movw	r1, #34616	; 0x8738
 1003e5c:	e3a00002 	mov	r0, #2
 1003e60:	e3401105 	movt	r1, #261	; 0x105
 1003e64:	ebfffe24 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "");
 1003e68:	e3091478 	movw	r1, #38008	; 0x9478
 1003e6c:	e3a00002 	mov	r0, #2
 1003e70:	e3401105 	movt	r1, #261	; 0x105
 1003e74:	ebfffe20 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "Application is licenced under the MIT Licence");
 1003e78:	e3081764 	movw	r1, #34660	; 0x8764
 1003e7c:	e3a00002 	mov	r0, #2
 1003e80:	e3401105 	movt	r1, #261	; 0x105
 1003e84:	ebfffe1c 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "For information see LICENCE in the Git repository");
 1003e88:	e3081794 	movw	r1, #34708	; 0x8794
 1003e8c:	e3a00002 	mov	r0, #2
 1003e90:	e3401105 	movt	r1, #261	; 0x105
 1003e94:	ebfffe18 	bl	10036fc <d_printf.constprop.5>
	d_printf(D_INFO, "");
 1003e98:	e3091478 	movw	r1, #38008	; 0x9478
 1003e9c:	e3a00002 	mov	r0, #2
 1003ea0:	e3401105 	movt	r1, #261	; 0x105
 1003ea4:	ebfffe14 	bl	10036fc <d_printf.constprop.5>
	Xil_ICacheEnable();
 1003ea8:	eb00172e 	bl	1009b68 <Xil_ICacheEnable>
	Xil_DCacheDisable();
 1003eac:	eb0016c9 	bl	10099d8 <Xil_DCacheDisable>
	d_printf(D_INFO, "boot: enabled D- and I-cache");
 1003eb0:	e30817c8 	movw	r1, #34760	; 0x87c8
 1003eb4:	e3a00002 	mov	r0, #2
 1003eb8:	e3401105 	movt	r1, #261	; 0x105
 1003ebc:	ebfffe0e 	bl	10036fc <d_printf.constprop.5>
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 1003ec0:	e3a00000 	mov	r0, #0
 1003ec4:	eb0013e7 	bl	1008e68 <XScuGic_LookupConfig>
	if(g_hal.xscu_gic_cfg == NULL) {
 1003ec8:	e3500000 	cmp	r0, #0
	g_hal.xscu_gic_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
 1003ecc:	e586000c 	str	r0, [r6, #12]
	if(g_hal.xscu_gic_cfg == NULL) {
 1003ed0:	0a0000c5 	beq	10041ec <hal_init+0x424>
	error = XScuGic_CfgInitialize(&g_hal.xscu_gic, g_hal.xscu_gic_cfg, g_hal.xscu_gic_cfg->CpuBaseAddress);
 1003ed4:	e1a01000 	mov	r1, r0
 1003ed8:	e5902004 	ldr	r2, [r0, #4]
 1003edc:	e1a00006 	mov	r0, r6
 1003ee0:	eb00136b 	bl	1008c94 <XScuGic_CfgInitialize>
	if(error != XST_SUCCESS) {
 1003ee4:	e3500000 	cmp	r0, #0
 1003ee8:	1a0000e8 	bne	1004290 <hal_init+0x4c8>
	error = XScuGic_SelfTest(&g_hal.xscu_gic);
 1003eec:	e1a00006 	mov	r0, r6
 1003ef0:	eb0013e3 	bl	1008e84 <XScuGic_SelfTest>
	if(error != XST_SUCCESS) {
 1003ef4:	e2508000 	subs	r8, r0, #0
 1003ef8:	1a0000dd 	bne	1004274 <hal_init+0x4ac>
	Xil_ExceptionInit();
 1003efc:	eb001951 	bl	100a448 <Xil_ExceptionInit>
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &g_hal.xscu_gic);
 1003f00:	e30812fc 	movw	r1, #33532	; 0x82fc
 1003f04:	e1a02006 	mov	r2, r6
 1003f08:	e3401100 	movt	r1, #256	; 0x100
 1003f0c:	e3a00005 	mov	r0, #5
 1003f10:	eb00194d 	bl	100a44c <Xil_ExceptionRegisterHandler>
	Xil_ExceptionEnable();
 1003f14:	e10f3000 	mrs	r3, CPSR
 1003f18:	e3c33080 	bic	r3, r3, #128	; 0x80
 1003f1c:	e129f003 	msr	CPSR_fc, r3
	d_printf(D_INFO, "XScuGic: interrupt controller ready");
 1003f20:	e3081868 	movw	r1, #34920	; 0x8868
 1003f24:	e3a00002 	mov	r0, #2
 1003f28:	e3401105 	movt	r1, #261	; 0x105
 1003f2c:	ebfffdf2 	bl	10036fc <d_printf.constprop.5>
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 1003f30:	e1a00008 	mov	r0, r8
 1003f34:	eb0014e4 	bl	10092cc <XScuTimer_LookupConfig>
 1003f38:	e1a03000 	mov	r3, r0
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 1003f3c:	e2860010 	add	r0, r6, #16
 1003f40:	e5932004 	ldr	r2, [r3, #4]
 1003f44:	e1a01003 	mov	r1, r3
	g_hal.xscu_timer_cfg = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
 1003f48:	e5863020 	str	r3, [r6, #32]
	error = XScuTimer_CfgInitialize(&g_hal.xscu_timer, g_hal.xscu_timer_cfg, g_hal.xscu_timer_cfg->BaseAddr);
 1003f4c:	eb0013f9 	bl	1008f38 <XScuTimer_CfgInitialize>
	if (error != XST_SUCCESS) {
 1003f50:	e3500000 	cmp	r0, #0
 1003f54:	1a0000bf 	bne	1004258 <hal_init+0x490>
	error = XScuTimer_SelfTest(&g_hal.xscu_timer);
 1003f58:	e2860010 	add	r0, r6, #16
 1003f5c:	eb0014ab 	bl	1009210 <XScuTimer_SelfTest>
	if (error != XST_SUCCESS) {
 1003f60:	e3500000 	cmp	r0, #0
 1003f64:	1a0000b4 	bne	100423c <hal_init+0x474>
	d_printf(D_INFO, "XScuTimer: ready");
 1003f68:	e30818ec 	movw	r1, #35052	; 0x88ec
 1003f6c:	e3a00002 	mov	r0, #2
 1003f70:	e3401105 	movt	r1, #261	; 0x105
 1003f74:	ebfffde0 	bl	10036fc <d_printf.constprop.5>
	error = XScuGic_Connect(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)irq_xscutimer, (void *)&g_hal.xscu_timer);
 1003f78:	e30326d8 	movw	r2, #14040	; 0x36d8
 1003f7c:	e2863010 	add	r3, r6, #16
 1003f80:	e3402100 	movt	r2, #256	; 0x100
 1003f84:	e3a0101d 	mov	r1, #29
 1003f88:	e1a00006 	mov	r0, r6
 1003f8c:	eb00110c 	bl	10083c4 <XScuGic_Connect>
	if (error != XST_SUCCESS) {
 1003f90:	e3500000 	cmp	r0, #0
 1003f94:	1a0000a1 	bne	1004220 <hal_init+0x458>
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1003f98:	e5963014 	ldr	r3, [r6, #20]
	*LocalAddr = Value;
 1003f9c:	e3e02000 	mvn	r2, #0
	g_hal.g_timer_overflow = 0;
 1003fa0:	e586004c 	str	r0, [r6, #76]	; 0x4c
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 1003fa4:	e3a0101d 	mov	r1, #29
 1003fa8:	e1a00006 	mov	r0, r6
 1003fac:	e5832000 	str	r2, [r3]
	XScuTimer_EnableAutoReload(&g_hal.xscu_timer);
 1003fb0:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 1003fb4:	e5923008 	ldr	r3, [r2, #8]
 1003fb8:	e3833002 	orr	r3, r3, #2
	*LocalAddr = Value;
 1003fbc:	e5823008 	str	r3, [r2, #8]
	XScuTimer_EnableInterrupt(&g_hal.xscu_timer);
 1003fc0:	e5962014 	ldr	r2, [r6, #20]
	return *(volatile u32 *) Addr;
 1003fc4:	e5923008 	ldr	r3, [r2, #8]
 1003fc8:	e3833004 	orr	r3, r3, #4
	*LocalAddr = Value;
 1003fcc:	e5823008 	str	r3, [r2, #8]
	XScuGic_Enable(&g_hal.xscu_gic, XPAR_SCUTIMER_INTR);
 1003fd0:	eb001252 	bl	1008920 <XScuGic_Enable>
	XScuTimer_Start(&g_hal.xscu_timer);
 1003fd4:	e2860010 	add	r0, r6, #16
 1003fd8:	eb001402 	bl	1008fe8 <XScuTimer_Start>
	g_hal.g_timer_have_init = 1;
 1003fdc:	e3a03001 	mov	r3, #1
 1003fe0:	e5863050 	str	r3, [r6, #80]	; 0x50
	bogo_calibrate();
 1003fe4:	ebfffe71 	bl	10039b0 <bogo_calibrate>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003fe8:	e596a014 	ldr	sl, [r6, #20]
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1003fec:	ed9f7ab1 	vldr	s14, [pc, #708]	; 10042b8 <hal_init+0x4f0>
 1003ff0:	edd67a56 	vldr	s15, [r6, #344]	; 0x158
	return *(volatile u32 *) Addr;
 1003ff4:	e59a8004 	ldr	r8, [sl, #4]
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1003ff8:	e28aa004 	add	sl, sl, #4
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1003ffc:	e3780c01 	cmn	r8, #256	; 0x100
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1004000:	ee677a27 	vmul.f32	s15, s14, s15
		msb = g_hal.g_timer_overflow;
 1004004:	9596904c 	ldrls	r9, [r6, #76]	; 0x4c
	timer_value = (((uint64_t)msb) << 32) | lsb;
 1004008:	e1e08008 	mvn	r8, r8
	g_hal.timers[index] = timer_value;
 100400c:	e1c685f8 	strd	r8, [r6, #88]	; 0x58
	uint64_t iters = (uint64_t)((float)(delay * g_hal.bogo_cal));
 1004010:	ee170a90 	vmov	r0, s15
 1004014:	fa001c5f 	blx	100b198 <__aeabi_f2ulz>
	while(iters--) {
 1004018:	e2504001 	subs	r4, r0, #1
 100401c:	e2c15000 	sbc	r5, r1, #0
 1004020:	e1903001 	orrs	r3, r0, r1
 1004024:	0a00000a 	beq	1004054 <hal_init+0x28c>
 1004028:	e3e02000 	mvn	r2, #0
 100402c:	e3e03000 	mvn	r3, #0
		__asm__("nop");
 1004030:	e320f000 	nop	{0}
	while(iters--) {
 1004034:	e2544001 	subs	r4, r4, #1
 1004038:	e2c55000 	sbc	r5, r5, #0
 100403c:	e1550003 	cmp	r5, r3
 1004040:	01540002 	cmpeq	r4, r2
 1004044:	1afffff9 	bne	1004030 <hal_init+0x268>
 1004048:	e596a014 	ldr	sl, [r6, #20]
 100404c:	e1c685d8 	ldrd	r8, [r6, #88]	; 0x58
 1004050:	e28aa004 	add	sl, sl, #4
 1004054:	e59a4000 	ldr	r4, [sl]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1004058:	e3740c01 	cmn	r4, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 100405c:	e1e04004 	mvn	r4, r4
		msb = g_hal.g_timer_overflow;
 1004060:	9596704c 	ldrls	r7, [r6, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 1004064:	e0544008 	subs	r4, r4, r8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004068:	e1a00004 	mov	r0, r4
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 100406c:	e0c75009 	sbc	r5, r7, r9
 1004070:	e1c64df8 	strd	r4, [r6, #216]	; 0xd8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004074:	e1a01005 	mov	r1, r5
 1004078:	fa001b9c 	blx	100aef0 <__aeabi_l2d>
 100407c:	eddf0b8b 	vldr	d16, [pc, #556]	; 10042b0 <hal_init+0x4e8>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1004080:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004084:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1004088:	e0a55005 	adc	r5, r5, r5
 100408c:	e3082940 	movw	r2, #35136	; 0x8940
 1004090:	e3081958 	movw	r1, #35160	; 0x8958
 1004094:	e3402105 	movt	r2, #261	; 0x105
 1004098:	e3401105 	movt	r1, #261	; 0x105
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 100409c:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10040a0:	e3a00002 	mov	r0, #2
 10040a4:	e58d4000 	str	r4, [sp]
 10040a8:	e58d5004 	str	r5, [sp, #4]
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10040ac:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10040b0:	eef70ae7 	vcvt.f64.f32	d16, s15
 10040b4:	edcd0b02 	vstr	d16, [sp, #8]
 10040b8:	ebfffd8f 	bl	10036fc <d_printf.constprop.5>
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 10040bc:	e3a00000 	mov	r0, #0
 10040c0:	eb000d11 	bl	100750c <XGpioPs_LookupConfig>
 10040c4:	e1a03000 	mov	r3, r0
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 10040c8:	e59f01f0 	ldr	r0, [pc, #496]	; 10042c0 <hal_init+0x4f8>
 10040cc:	e5932004 	ldr	r2, [r3, #4]
 10040d0:	e1a01003 	mov	r1, r3
	g_hal.xgpio_ps_cfg = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
 10040d4:	e5863048 	str	r3, [r6, #72]	; 0x48
	error = XGpioPs_CfgInitialize(&g_hal.xgpio_ps, g_hal.xgpio_ps_cfg, g_hal.xgpio_ps_cfg->BaseAddr);
 10040d8:	eb0009d5 	bl	1006834 <XGpioPs_CfgInitialize>
	if (error != XST_SUCCESS) {
 10040dc:	e2504000 	subs	r4, r0, #0
 10040e0:	1a000047 	bne	1004204 <hal_init+0x43c>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 0, 0x00000000);
 10040e4:	e1a02004 	mov	r2, r4
 10040e8:	e1a01004 	mov	r1, r4
 10040ec:	e59f01cc 	ldr	r0, [pc, #460]	; 10042c0 <hal_init+0x4f8>
 10040f0:	eb000a85 	bl	1006b0c <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 1, 0x00000000);
 10040f4:	e1a02004 	mov	r2, r4
 10040f8:	e3a01001 	mov	r1, #1
 10040fc:	e59f01bc 	ldr	r0, [pc, #444]	; 10042c0 <hal_init+0x4f8>
 1004100:	eb000a81 	bl	1006b0c <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 2, 0x00000000);
 1004104:	e1a02004 	mov	r2, r4
 1004108:	e3a01002 	mov	r1, #2
 100410c:	e59f01ac 	ldr	r0, [pc, #428]	; 10042c0 <hal_init+0x4f8>
 1004110:	eb000a7d 	bl	1006b0c <XGpioPs_SetDirection>
	XGpioPs_SetDirection(&g_hal.xgpio_ps, 3, 0x00000000);
 1004114:	e1a02004 	mov	r2, r4
 1004118:	e3a01003 	mov	r1, #3
 100411c:	e59f019c 	ldr	r0, [pc, #412]	; 10042c0 <hal_init+0x4f8>
 1004120:	eb000a79 	bl	1006b0c <XGpioPs_SetDirection>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 1004124:	e3a02001 	mov	r2, #1
 1004128:	e3a01009 	mov	r1, #9
 100412c:	e59f018c 	ldr	r0, [pc, #396]	; 10042c0 <hal_init+0x4f8>
 1004130:	eb000bef 	bl	10070f4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, 1);
 1004134:	e3a02001 	mov	r2, #1
 1004138:	e3a01009 	mov	r1, #9
 100413c:	e59f017c 	ldr	r0, [pc, #380]	; 10042c0 <hal_init+0x4f8>
 1004140:	eb000c6e 	bl	1007300 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 1004144:	e3a02001 	mov	r2, #1
 1004148:	e3a01025 	mov	r1, #37	; 0x25
 100414c:	e59f016c 	ldr	r0, [pc, #364]	; 10042c0 <hal_init+0x4f8>
 1004150:	eb000be7 	bl	10070f4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, 1);
 1004154:	e3a02001 	mov	r2, #1
 1004158:	e3a01025 	mov	r1, #37	; 0x25
 100415c:	e59f015c 	ldr	r0, [pc, #348]	; 10042c0 <hal_init+0x4f8>
 1004160:	eb000c66 	bl	1007300 <XGpioPs_SetOutputEnablePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_0_PIN, enable);
 1004164:	e1a02004 	mov	r2, r4
 1004168:	e3a01009 	mov	r1, #9
 100416c:	e59f014c 	ldr	r0, [pc, #332]	; 10042c0 <hal_init+0x4f8>
 1004170:	eb000b9f 	bl	1006ff4 <XGpioPs_WritePin>
			XGpioPs_WritePin(&g_hal.xgpio_ps, GPIO_PS_LED_1_PIN, enable);
 1004174:	e1a02004 	mov	r2, r4
 1004178:	e3a01025 	mov	r1, #37	; 0x25
 100417c:	e59f013c 	ldr	r0, [pc, #316]	; 10042c0 <hal_init+0x4f8>
 1004180:	e3a04a01 	mov	r4, #4096	; 0x1000
 1004184:	eb000b9a 	bl	1006ff4 <XGpioPs_WritePin>
	d_printf(D_INFO, "XGpioPs: ready");
 1004188:	e30819b0 	movw	r1, #35248	; 0x89b0
 100418c:	e3a00002 	mov	r0, #2
 1004190:	e3401105 	movt	r1, #261	; 0x105
 1004194:	e34e4000 	movt	r4, #57344	; 0xe000
 1004198:	ebfffd57 	bl	10036fc <d_printf.constprop.5>
	fabcfg_init();
 100419c:	ebfffcf4 	bl	1003574 <fabcfg_init>
	d_printf(D_INFO, "XUartPs: resetting RX FIFO");
 10041a0:	e30819c0 	movw	r1, #35264	; 0x89c0
 10041a4:	e3a00002 	mov	r0, #2
 10041a8:	e3401105 	movt	r1, #261	; 0x105
 10041ac:	ebfffd52 	bl	10036fc <d_printf.constprop.5>
 10041b0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 10041b4:	e3130002 	tst	r3, #2
 10041b8:	1a000005 	bne	10041d4 <hal_init+0x40c>
		d_printf(D_EXINFO, "XUartPs: FIFO = 0x%02x", XUartPs_RecvByte(STDIN_BASEADDRESS));
 10041bc:	e3a00a01 	mov	r0, #4096	; 0x1000
 10041c0:	e34e0000 	movt	r0, #57344	; 0xe000
 10041c4:	eb0018bd 	bl	100a4c0 <XUartPs_RecvByte>
 10041c8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 10041cc:	e3130002 	tst	r3, #2
 10041d0:	0afffff9 	beq	10041bc <hal_init+0x3f4>
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 10041d4:	ed9f0a38 	vldr	s0, [pc, #224]	; 10042bc <hal_init+0x4f4>
 10041d8:	e3a01000 	mov	r1, #0
 10041dc:	e59f00e0 	ldr	r0, [pc, #224]	; 10042c4 <hal_init+0x4fc>
}
 10041e0:	e28dd010 	add	sp, sp, #16
 10041e4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
	clkwiz_init(&g_hal.clkwiz_mipi, CLKWIZ_CFG_MIPI, CLKWIZ_CFG_MIPI_REFCLK);
 10041e8:	eafffabc 	b	1002ce0 <clkwiz_init>
		d_printf(D_ERROR, "XScuGic: configuration lookup returns NULL");
 10041ec:	e30817e8 	movw	r1, #34792	; 0x87e8
 10041f0:	e3a00004 	mov	r0, #4
 10041f4:	e3401105 	movt	r1, #261	; 0x105
 10041f8:	ebfffd8d 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 10041fc:	e3e00000 	mvn	r0, #0
 1004200:	fa001c4a 	blx	100b330 <exit>
		d_printf(D_ERROR, "XGpioPs: returned error code: %d, unable to start", error);
 1004204:	e308197c 	movw	r1, #35196	; 0x897c
 1004208:	e3a00004 	mov	r0, #4
 100420c:	e1a02004 	mov	r2, r4
 1004210:	e3401105 	movt	r1, #261	; 0x105
 1004214:	ebfffd86 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 1004218:	e3e00000 	mvn	r0, #0
 100421c:	fa001c43 	blx	100b330 <exit>
		d_printf(D_ERROR, "XScuTimer: unable to connect interrupt handler: error code %d", error);
 1004220:	e3081900 	movw	r1, #35072	; 0x8900
 1004224:	e1a02000 	mov	r2, r0
 1004228:	e3401105 	movt	r1, #261	; 0x105
 100422c:	e3a00004 	mov	r0, #4
 1004230:	ebfffd7f 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 1004234:	e3e00000 	mvn	r0, #0
 1004238:	fa001c3c 	blx	100b330 <exit>
		d_printf(D_ERROR, "XScuTimer: self test failed with error %d", error);
 100423c:	e30818c0 	movw	r1, #35008	; 0x88c0
 1004240:	e1a02000 	mov	r2, r0
 1004244:	e3401105 	movt	r1, #261	; 0x105
 1004248:	e3a00004 	mov	r0, #4
 100424c:	ebfffd78 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 1004250:	e3e00000 	mvn	r0, #0
 1004254:	fa001c35 	blx	100b330 <exit>
		d_printf(D_ERROR, "XScuTimer: returned error code: %d, unable to start", error);
 1004258:	e308188c 	movw	r1, #34956	; 0x888c
 100425c:	e1a02000 	mov	r2, r0
 1004260:	e3401105 	movt	r1, #261	; 0x105
 1004264:	e3a00004 	mov	r0, #4
 1004268:	ebfffd71 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 100426c:	e3e00000 	mvn	r0, #0
 1004270:	fa001c2e 	blx	100b330 <exit>
		d_printf(D_ERROR, "XScuGic: self test failed error %d", error);
 1004274:	e3081844 	movw	r1, #34884	; 0x8844
 1004278:	e3a00004 	mov	r0, #4
 100427c:	e1a02008 	mov	r2, r8
 1004280:	e3401105 	movt	r1, #261	; 0x105
 1004284:	ebfffd6a 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 1004288:	e3e00000 	mvn	r0, #0
 100428c:	fa001c27 	blx	100b330 <exit>
		d_printf(D_ERROR, "XScuGic: configuration init returned error %d", error);
 1004290:	e3081814 	movw	r1, #34836	; 0x8814
 1004294:	e1a02000 	mov	r2, r0
 1004298:	e3401105 	movt	r1, #261	; 0x105
 100429c:	e3a00004 	mov	r0, #4
 10042a0:	ebfffd63 	bl	1003834 <d_printf.constprop.7>
		exit(-1);
 10042a4:	e3e00000 	mvn	r0, #0
 10042a8:	fa001c20 	blx	100b330 <exit>
 10042ac:	e320f000 	nop	{0}
 10042b0:	a17f0000 	.word	0xa17f0000
 10042b4:	3f689374 	.word	0x3f689374
 10042b8:	47c35000 	.word	0x47c35000
 10042bc:	4331c71c 	.word	0x4331c71c
 10042c0:	01161b84 	.word	0x01161b84
 10042c4:	01161cc0 	.word	0x01161cc0

010042c8 <d_waitkey>:
	res = XUartPs_RecvByte(STDIN_BASEADDRESS);
 10042c8:	e3a00a01 	mov	r0, #4096	; 0x1000
 10042cc:	e34e0000 	movt	r0, #57344	; 0xe000
 10042d0:	ea00187a 	b	100a4c0 <XUartPs_RecvByte>

010042d4 <d_iskeypress>:
	*LocalAddr = Value;
 10042d4:	e3a03a01 	mov	r3, #4096	; 0x1000
 10042d8:	e3a02003 	mov	r2, #3
 10042dc:	e34e3000 	movt	r3, #57344	; 0xe000
 10042e0:	e5832000 	str	r2, [r3]
	return *(volatile u32 *) Addr;
 10042e4:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
	return XUartPs_IsReceiveData(STDIN_BASEADDRESS);
 10042e8:	e2200002 	eor	r0, r0, #2
}
 10042ec:	e7e000d0 	ubfx	r0, r0, #1, #1
 10042f0:	e12fff1e 	bx	lr

010042f4 <d_getkey>:
 10042f4:	e3a00a01 	mov	r0, #4096	; 0x1000
 10042f8:	e34e0000 	movt	r0, #57344	; 0xe000
 10042fc:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
	if(XUartPs_IsReceiveData(STDIN_BASEADDRESS)) {
 1004300:	e3130002 	tst	r3, #2
 1004304:	0a000001 	beq	1004310 <d_getkey+0x1c>
}
 1004308:	e3a00000 	mov	r0, #0
 100430c:	e12fff1e 	bx	lr
		return XUartPs_RecvByte(STDIN_BASEADDRESS);
 1004310:	ea00186a 	b	100a4c0 <XUartPs_RecvByte>

01004314 <d_read_global_timer>:
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1004314:	e3012b60 	movw	r2, #7008	; 0x1b60
 1004318:	e3402116 	movt	r2, #278	; 0x116
 100431c:	e5923014 	ldr	r3, [r2, #20]
 1004320:	e5933004 	ldr	r3, [r3, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 1004324:	e3730c01 	cmn	r3, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1004328:	e1e03003 	mvn	r3, r3
		msb = g_hal.g_timer_overflow;
 100432c:	9592c04c 	ldrls	ip, [r2, #76]	; 0x4c
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1004330:	e5803000 	str	r3, [r0]
	*msb_ret = msb;
 1004334:	e581c000 	str	ip, [r1]
}
 1004338:	e12fff1e 	bx	lr

0100433c <d_start_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100433c:	e350000f 	cmp	r0, #15
 1004340:	ca00000b 	bgt	1004374 <d_start_timing+0x38>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 1004344:	e3013b60 	movw	r3, #7008	; 0x1b60
	g_hal.timers[index] = timer_value;
 1004348:	e280000b 	add	r0, r0, #11
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 100434c:	e3403116 	movt	r3, #278	; 0x116
 1004350:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timers[index] = timer_value;
 1004354:	e0831180 	add	r1, r3, r0, lsl #3
 1004358:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 100435c:	e3720c01 	cmn	r2, #256	; 0x100
	*lsb_ret = XSCUTIMER_LOAD_VALUE_LU - lsb;
 1004360:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 1004364:	9593c04c 	ldrls	ip, [r3, #76]	; 0x4c
	g_hal.timers[index] = timer_value;
 1004368:	e7832180 	str	r2, [r3, r0, lsl #3]
 100436c:	e581c004 	str	ip, [r1, #4]
 1004370:	e12fff1e 	bx	lr
{
 1004374:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1004378:	e30001b9 	movw	r0, #441	; 0x1b9
{
 100437c:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1004380:	e30835c0 	movw	r3, #34240	; 0x85c0
 1004384:	e30825d0 	movw	r2, #34256	; 0x85d0
 1004388:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 100438c:	e58d0000 	str	r0, [sp]
 1004390:	e3403105 	movt	r3, #261	; 0x105
 1004394:	e3a00004 	mov	r0, #4
 1004398:	e3402105 	movt	r2, #261	; 0x105
 100439c:	e3401105 	movt	r1, #261	; 0x105
 10043a0:	ebfffd23 	bl	1003834 <d_printf.constprop.7>
 10043a4:	e3e00062 	mvn	r0, #98	; 0x62
 10043a8:	fa001be0 	blx	100b330 <exit>

010043ac <d_stop_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10043ac:	e350000f 	cmp	r0, #15
 10043b0:	ca00000f 	bgt	10043f4 <d_stop_timing+0x48>
	lsb = XScuTimer_GetCounterValue(&g_hal.xscu_timer);
 10043b4:	e3013b60 	movw	r3, #7008	; 0x1b60
 10043b8:	e3403116 	movt	r3, #278	; 0x116
 10043bc:	e5932014 	ldr	r2, [r3, #20]
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10043c0:	e083c180 	add	ip, r3, r0, lsl #3
 10043c4:	e59c0058 	ldr	r0, [ip, #88]	; 0x58
 10043c8:	e5922004 	ldr	r2, [r2, #4]
	if(lsb > XSCUTIMER_NEAR_OVERFLOW) {
 10043cc:	e3720c01 	cmn	r2, #256	; 0x100
	timer_value = (((uint64_t)msb) << 32) | lsb;
 10043d0:	e1e02002 	mvn	r2, r2
		msb = g_hal.g_timer_overflow;
 10043d4:	9593104c 	ldrls	r1, [r3, #76]	; 0x4c
	g_hal.timer_deltas[index] = timer_value - g_hal.timers[index];
 10043d8:	e1a0300c 	mov	r3, ip
 10043dc:	e59cc05c 	ldr	ip, [ip, #92]	; 0x5c
 10043e0:	e0522000 	subs	r2, r2, r0
 10043e4:	e58320d8 	str	r2, [r3, #216]	; 0xd8
 10043e8:	e0c1100c 	sbc	r1, r1, ip
 10043ec:	e58310dc 	str	r1, [r3, #220]	; 0xdc
 10043f0:	e12fff1e 	bx	lr
{
 10043f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10043f8:	e30001cd 	movw	r0, #461	; 0x1cd
{
 10043fc:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1004400:	e30835c0 	movw	r3, #34240	; 0x85c0
 1004404:	e30825d0 	movw	r2, #34256	; 0x85d0
 1004408:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 100440c:	e58d0000 	str	r0, [sp]
 1004410:	e3403105 	movt	r3, #261	; 0x105
 1004414:	e3a00004 	mov	r0, #4
 1004418:	e3402105 	movt	r2, #261	; 0x105
 100441c:	e3401105 	movt	r1, #261	; 0x105
 1004420:	ebfffd03 	bl	1003834 <d_printf.constprop.7>
 1004424:	e3e00062 	mvn	r0, #98	; 0x62
 1004428:	fa001bc0 	blx	100b330 <exit>

0100442c <d_read_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100442c:	e350000f 	cmp	r0, #15
 1004430:	ca000004 	bgt	1004448 <d_read_timing+0x1c>
	return g_hal.timer_deltas[index];
 1004434:	e3013b60 	movw	r3, #7008	; 0x1b60
 1004438:	e3403116 	movt	r3, #278	; 0x116
 100443c:	e0833180 	add	r3, r3, r0, lsl #3
}
 1004440:	e1c30dd8 	ldrd	r0, [r3, #216]	; 0xd8
 1004444:	e12fff1e 	bx	lr
{
 1004448:	e92d4010 	push	{r4, lr}
 100444c:	ebfffd43 	bl	1003960 <d_read_timing.part.3>

01004450 <d_read_timing_us>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1004450:	e350000f 	cmp	r0, #15
{
 1004454:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1004458:	e24dd00c 	sub	sp, sp, #12
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100445c:	ca00000a 	bgt	100448c <d_read_timing_us+0x3c>
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004460:	e3013b60 	movw	r3, #7008	; 0x1b60
 1004464:	e3403116 	movt	r3, #278	; 0x116
 1004468:	e0833180 	add	r3, r3, r0, lsl #3
 100446c:	e1c30dd8 	ldrd	r0, [r3, #216]	; 0xd8
 1004470:	fa001a9e 	blx	100aef0 <__aeabi_l2d>
 1004474:	ed9f0b11 	vldr	d0, [pc, #68]	; 10044c0 <d_read_timing_us+0x70>
 1004478:	ec410b30 	vmov	d16, r0, r1
 100447c:	ee200b80 	vmul.f64	d0, d16, d0
}
 1004480:	eeb70bc0 	vcvt.f32.f64	s0, d0
 1004484:	e28dd00c 	add	sp, sp, #12
 1004488:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 100448c:	e30001eb 	movw	r0, #491	; 0x1eb
 1004490:	e30835c0 	movw	r3, #34240	; 0x85c0
 1004494:	e30825d0 	movw	r2, #34256	; 0x85d0
 1004498:	e3071fd0 	movw	r1, #32720	; 0x7fd0
 100449c:	e58d0000 	str	r0, [sp]
 10044a0:	e3403105 	movt	r3, #261	; 0x105
 10044a4:	e3a00004 	mov	r0, #4
 10044a8:	e3402105 	movt	r2, #261	; 0x105
 10044ac:	e3401105 	movt	r1, #261	; 0x105
 10044b0:	ebfffcdf 	bl	1003834 <d_printf.constprop.7>
 10044b4:	e3e00062 	mvn	r0, #98	; 0x62
 10044b8:	fa001b9c 	blx	100b330 <exit>
 10044bc:	e320f000 	nop	{0}
 10044c0:	a17f0000 	.word	0xa17f0000
 10044c4:	3f689374 	.word	0x3f689374

010044c8 <d_dump_timing>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10044c8:	e351000f 	cmp	r1, #15
{
 10044cc:	e92d4070 	push	{r4, r5, r6, lr}
 10044d0:	e24dd010 	sub	sp, sp, #16
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 10044d4:	ca000017 	bgt	1004538 <d_dump_timing+0x70>
	return g_hal.timer_deltas[index];
 10044d8:	e3013b60 	movw	r3, #7008	; 0x1b60
 10044dc:	e1a06000 	mov	r6, r0
 10044e0:	e3403116 	movt	r3, #278	; 0x116
 10044e4:	e0833181 	add	r3, r3, r1, lsl #3
 10044e8:	e1c34dd8 	ldrd	r4, [r3, #216]	; 0xd8
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 10044ec:	e1a00004 	mov	r0, r4
 10044f0:	e1a01005 	mov	r1, r5
 10044f4:	fa001a7d 	blx	100aef0 <__aeabi_l2d>
 10044f8:	eddf0b10 	vldr	d16, [pc, #64]	; 1004540 <d_dump_timing+0x78>
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 10044fc:	e0944004 	adds	r4, r4, r4
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004500:	ec410b31 	vmov	d17, r0, r1
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1004504:	e0a55005 	adc	r5, r5, r5
 1004508:	e3081958 	movw	r1, #35160	; 0x8958
 100450c:	e1cd40f0 	strd	r4, [sp]
 1004510:	e1a02006 	mov	r2, r6
 1004514:	e3401105 	movt	r1, #261	; 0x105
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004518:	ee610ba0 	vmul.f64	d16, d17, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 100451c:	e3a00002 	mov	r0, #2
	return g_hal.timer_deltas[index] * XSCUTIMER_TICKS_TO_US;
 1004520:	eef77be0 	vcvt.f32.f64	s15, d16
	d_printf(D_INFO, "%s [~%llu CPU cycles (~%4.1f us)]", s, (int64_t)(d_read_timing(index) * XSCUTIMER_TICKS_TO_CPUCYC), d_read_timing_us(index));
 1004524:	eef70ae7 	vcvt.f64.f32	d16, s15
 1004528:	edcd0b02 	vstr	d16, [sp, #8]
 100452c:	ebfffc72 	bl	10036fc <d_printf.constprop.5>
}
 1004530:	e28dd010 	add	sp, sp, #16
 1004534:	e8bd8070 	pop	{r4, r5, r6, pc}
 1004538:	ebfffd08 	bl	1003960 <d_read_timing.part.3>
 100453c:	e320f000 	nop	{0}
 1004540:	a17f0000 	.word	0xa17f0000
 1004544:	3f689374 	.word	0x3f689374

01004548 <d_dump_timing_ex>:
	D_ASSERT(index < NUM_DEBUG_TIMERS) ;
 1004548:	e351000f 	cmp	r1, #15
 100454c:	d12fff1e 	bxle	lr
{
 1004550:	e92d4010 	push	{r4, lr}
 1004554:	ebfffd01 	bl	1003960 <d_read_timing.part.3>

01004558 <csi_hack_init>:

XAxiDma mipi_dma;
XAxiDma_Config *mipi_dma_config;

void csi_hack_init()
{
 1004558:	e92d4010 	push	{r4, lr}
	int error;

	mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 100455c:	e3a00001 	mov	r0, #1
 1004560:	eb00044b 	bl	1005694 <XAxiDma_LookupConfig>
 1004564:	e3014d60 	movw	r4, #7520	; 0x1d60
 1004568:	e1a03000 	mov	r3, r0
	error = XAxiDma_CfgInitialize(&mipi_dma, mipi_dma_config);
 100456c:	e3010d64 	movw	r0, #7524	; 0x1d64
	mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 1004570:	e3404116 	movt	r4, #278	; 0x116
	error = XAxiDma_CfgInitialize(&mipi_dma, mipi_dma_config);
 1004574:	e1a01003 	mov	r1, r3
 1004578:	e3400116 	movt	r0, #278	; 0x116
	mipi_dma_config = XAxiDma_LookupConfig(XPAR_MIPI_DMA_DEVICE_ID);
 100457c:	e5843000 	str	r3, [r4]
	error = XAxiDma_CfgInitialize(&mipi_dma, mipi_dma_config);
 1004580:	eb000254 	bl	1004ed8 <XAxiDma_CfgInitialize>

	if(error != XST_SUCCESS) {
 1004584:	e3500000 	cmp	r0, #0
 1004588:	1a00003a 	bne	1004678 <csi_hack_init+0x120>
		d_printf(D_ERROR, "mipihacks: fatal: unable to initialise DMA engine! (error=%d)", error);
		exit(-1);
	}

	d_printf(D_INFO, "mipihacks: DMA initialised @ 0x%08x", mipi_dma_config->BaseAddr);
 100458c:	e5943000 	ldr	r3, [r4]
 1004590:	e3081a34 	movw	r1, #35380	; 0x8a34

	XAxiDma_Reset(&mipi_dma);
	while(!XAxiDma_ResetIsDone(&mipi_dma)) ;
 1004594:	e3014d64 	movw	r4, #7524	; 0x1d64
	d_printf(D_INFO, "mipihacks: DMA initialised @ 0x%08x", mipi_dma_config->BaseAddr);
 1004598:	e3a00002 	mov	r0, #2
 100459c:	e3401105 	movt	r1, #261	; 0x105
	while(!XAxiDma_ResetIsDone(&mipi_dma)) ;
 10045a0:	e3404116 	movt	r4, #278	; 0x116
	d_printf(D_INFO, "mipihacks: DMA initialised @ 0x%08x", mipi_dma_config->BaseAddr);
 10045a4:	e5932004 	ldr	r2, [r3, #4]
 10045a8:	ebfffd90 	bl	1003bf0 <d_printf>
	XAxiDma_Reset(&mipi_dma);
 10045ac:	e1a00004 	mov	r0, r4
 10045b0:	eb0001f0 	bl	1004d78 <XAxiDma_Reset>
	while(!XAxiDma_ResetIsDone(&mipi_dma)) ;
 10045b4:	e1a00004 	mov	r0, r4
 10045b8:	eb000233 	bl	1004e8c <XAxiDma_ResetIsDone>
 10045bc:	e3500000 	cmp	r0, #0
 10045c0:	0afffffb 	beq	10045b4 <csi_hack_init+0x5c>

	d_printf(D_INFO, "mipihacks: DMA reset OK");
 10045c4:	e3081a58 	movw	r1, #35416	; 0x8a58
 10045c8:	e3a00002 	mov	r0, #2
 10045cc:	e3401105 	movt	r1, #261	; 0x105
 10045d0:	ebfffd86 	bl	1003bf0 <d_printf>

	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
 10045d4:	e3a02001 	mov	r2, #1
 10045d8:	e3a0104b 	mov	r1, #75	; 0x4b
 10045dc:	e59f00b0 	ldr	r0, [pc, #176]	; 1004694 <csi_hack_init+0x13c>
 10045e0:	eb000b46 	bl	1007300 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
 10045e4:	e3a02001 	mov	r2, #1
 10045e8:	e3a0104b 	mov	r1, #75	; 0x4b
 10045ec:	e59f00a0 	ldr	r0, [pc, #160]	; 1004694 <csi_hack_init+0x13c>
 10045f0:	eb000abf 	bl	10070f4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
 10045f4:	e3a02001 	mov	r2, #1
 10045f8:	e3a0104a 	mov	r1, #74	; 0x4a
 10045fc:	e59f0090 	ldr	r0, [pc, #144]	; 1004694 <csi_hack_init+0x13c>
 1004600:	eb000b3e 	bl	1007300 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
 1004604:	e3a02001 	mov	r2, #1
 1004608:	e3a0104a 	mov	r1, #74	; 0x4a
 100460c:	e59f0080 	ldr	r0, [pc, #128]	; 1004694 <csi_hack_init+0x13c>
 1004610:	eb000ab7 	bl	10070f4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1004614:	e3a02001 	mov	r2, #1
 1004618:	e3a0104c 	mov	r1, #76	; 0x4c
 100461c:	e59f0070 	ldr	r0, [pc, #112]	; 1004694 <csi_hack_init+0x13c>
 1004620:	eb000b36 	bl	1007300 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1004624:	e3a02001 	mov	r2, #1
 1004628:	e3a0104c 	mov	r1, #76	; 0x4c
 100462c:	e59f0060 	ldr	r0, [pc, #96]	; 1004694 <csi_hack_init+0x13c>
 1004630:	eb000aaf 	bl	10070f4 <XGpioPs_SetDirectionPin>
	XGpioPs_SetOutputEnablePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 1004634:	e3a02001 	mov	r2, #1
 1004638:	e3a0104d 	mov	r1, #77	; 0x4d
 100463c:	e59f0050 	ldr	r0, [pc, #80]	; 1004694 <csi_hack_init+0x13c>
 1004640:	eb000b2e 	bl	1007300 <XGpioPs_SetOutputEnablePin>
	XGpioPs_SetDirectionPin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 1004644:	e3a02001 	mov	r2, #1
 1004648:	e3a0104d 	mov	r1, #77	; 0x4d
 100464c:	e59f0040 	ldr	r0, [pc, #64]	; 1004694 <csi_hack_init+0x13c>
 1004650:	eb000aa7 	bl	10070f4 <XGpioPs_SetDirectionPin>
 1004654:	e3a03000 	mov	r3, #0
 1004658:	e30007fe 	movw	r0, #2046	; 0x7fe
 100465c:	e3443001 	movt	r3, #16385	; 0x4001
 1004660:	e3a0102a 	mov	r1, #42	; 0x2a
 1004664:	e3a02001 	mov	r2, #1
 1004668:	e5830104 	str	r0, [r3, #260]	; 0x104
 100466c:	e5831108 	str	r1, [r3, #264]	; 0x108
 1004670:	e583210c 	str	r2, [r3, #268]	; 0x10c

	fabcfg_write(FAB_CFG_CSI_LINE_BYTE_COUNT, 2046);
	fabcfg_write(FAB_CFG_CSI_DATA_TYPE, 0x2a);
	fabcfg_write(FAB_CFG_CSI_CTRL_FLAGS, 0x01); // LSB controls clock idling mode
}
 1004674:	e8bd8010 	pop	{r4, pc}
		d_printf(D_ERROR, "mipihacks: fatal: unable to initialise DMA engine! (error=%d)", error);
 1004678:	e30819f4 	movw	r1, #35316	; 0x89f4
 100467c:	e1a02000 	mov	r2, r0
 1004680:	e3401105 	movt	r1, #261	; 0x105
 1004684:	e3a00004 	mov	r0, #4
 1004688:	ebfffd58 	bl	1003bf0 <d_printf>
		exit(-1);
 100468c:	e3e00000 	mvn	r0, #0
 1004690:	fa001b26 	blx	100b330 <exit>
 1004694:	01161b84 	.word	0x01161b84

01004698 <csi_hack_start_frame>:
 1004698:	e3a03000 	mov	r3, #0

void csi_hack_start_frame(uint32_t line_count)
{
 100469c:	e92d4010 	push	{r4, lr}
 10046a0:	e3443001 	movt	r3, #16385	; 0x4001
	fabcfg_write(FAB_CFG_CSI_LINE_COUNT, line_count);

	// Stop frame first
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 10046a4:	e3a02001 	mov	r2, #1
 10046a8:	e3a0104d 	mov	r1, #77	; 0x4d
 10046ac:	e5830100 	str	r0, [r3, #256]	; 0x100
 10046b0:	e59f006c 	ldr	r0, [pc, #108]	; 1004724 <csi_hack_start_frame+0x8c>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 0);

	//d_printf(D_ERROR, "wait - startframe?");

	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to be LOW - ack/ready
 10046b4:	e1a04000 	mov	r4, r0
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 1);
 10046b8:	eb000a4d 	bl	1006ff4 <XGpioPs_WritePin>
	bogo_delay(1); // TODO: we need a DONE signal here -- OR a Stop-Ack signal...
 10046bc:	e3a00001 	mov	r0, #1
 10046c0:	ebfffd24 	bl	1003b58 <bogo_delay>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_STOP, 0);
 10046c4:	e3a02000 	mov	r2, #0
 10046c8:	e3a0104d 	mov	r1, #77	; 0x4d
 10046cc:	e1a00004 	mov	r0, r4
 10046d0:	eb000a47 	bl	1006ff4 <XGpioPs_WritePin>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 1);
 10046d4:	e3a02001 	mov	r2, #1
 10046d8:	e3a0104b 	mov	r1, #75	; 0x4b
 10046dc:	e1a00004 	mov	r0, r4
 10046e0:	eb000a43 	bl	1006ff4 <XGpioPs_WritePin>
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to be LOW - ack/ready
 10046e4:	e3a0104f 	mov	r1, #79	; 0x4f
 10046e8:	e1a00004 	mov	r0, r4
 10046ec:	eb000a07 	bl	1006f10 <XGpioPs_ReadPin>
 10046f0:	e3500000 	cmp	r0, #0
 10046f4:	1afffffa 	bne	10046e4 <csi_hack_start_frame+0x4c>
	while(!XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go HIGH - this cmd done
 10046f8:	e59f4024 	ldr	r4, [pc, #36]	; 1004724 <csi_hack_start_frame+0x8c>
 10046fc:	e3a0104f 	mov	r1, #79	; 0x4f
 1004700:	e1a00004 	mov	r0, r4
 1004704:	eb000a01 	bl	1006f10 <XGpioPs_ReadPin>
 1004708:	e3500000 	cmp	r0, #0
 100470c:	0afffffa 	beq	10046fc <csi_hack_start_frame+0x64>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 0);
 1004710:	e3a02000 	mov	r2, #0
 1004714:	e3a0104b 	mov	r1, #75	; 0x4b
 1004718:	e59f0004 	ldr	r0, [pc, #4]	; 1004724 <csi_hack_start_frame+0x8c>

	//d_printf(D_ERROR, "done - startframe");
}
 100471c:	e8bd4010 	pop	{r4, lr}
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_FRAME, 0);
 1004720:	ea000a33 	b	1006ff4 <XGpioPs_WritePin>
 1004724:	01161b84 	.word	0x01161b84

01004728 <csi_hack_stop_frame>:

void csi_hack_stop_frame()
{
 1004728:	e92d4010 	push	{r4, lr}
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 100472c:	e3a02001 	mov	r2, #1
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 1004730:	e59f4048 	ldr	r4, [pc, #72]	; 1004780 <csi_hack_stop_frame+0x58>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 1);
 1004734:	e3a0104c 	mov	r1, #76	; 0x4c
 1004738:	e1a00004 	mov	r0, r4
 100473c:	eb000a2c 	bl	1006ff4 <XGpioPs_WritePin>
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 1004740:	e3a0104f 	mov	r1, #79	; 0x4f
 1004744:	e1a00004 	mov	r0, r4
 1004748:	eb0009f0 	bl	1006f10 <XGpioPs_ReadPin>
 100474c:	e3500000 	cmp	r0, #0
 1004750:	1afffffa 	bne	1004740 <csi_hack_stop_frame+0x18>
	while(!XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;
 1004754:	e59f4024 	ldr	r4, [pc, #36]	; 1004780 <csi_hack_stop_frame+0x58>
 1004758:	e3a0104f 	mov	r1, #79	; 0x4f
 100475c:	e1a00004 	mov	r0, r4
 1004760:	eb0009ea 	bl	1006f10 <XGpioPs_ReadPin>
 1004764:	e3500000 	cmp	r0, #0
 1004768:	0afffffa 	beq	1004758 <csi_hack_stop_frame+0x30>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 0);
 100476c:	e3a02000 	mov	r2, #0
 1004770:	e3a0104c 	mov	r1, #76	; 0x4c
 1004774:	e59f0004 	ldr	r0, [pc, #4]	; 1004780 <csi_hack_stop_frame+0x58>
}
 1004778:	e8bd4010 	pop	{r4, lr}
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_END_FRAME, 0);
 100477c:	ea000a1c 	b	1006ff4 <XGpioPs_WritePin>
 1004780:	01161b84 	.word	0x01161b84

01004784 <csi_hack_send_line_data>:
	for(i = 0; i < sz; i++) {
		d_printf(D_RAW, "%02x ", buff[i]);
	}
	*/

	error = XAxiDma_SimpleTransfer(&mipi_dma, buff, sz, XAXIDMA_DMA_TO_DEVICE);
 1004784:	e1a02001 	mov	r2, r1
 1004788:	e1a01000 	mov	r1, r0
 100478c:	e3010d64 	movw	r0, #7524	; 0x1d64
{
 1004790:	e92d4010 	push	{r4, lr}
	error = XAxiDma_SimpleTransfer(&mipi_dma, buff, sz, XAXIDMA_DMA_TO_DEVICE);
 1004794:	e3a03000 	mov	r3, #0
 1004798:	e3400116 	movt	r0, #278	; 0x116
 100479c:	eb000351 	bl	10054e8 <XAxiDma_SimpleTransfer>

	if(error != XST_SUCCESS) {
 10047a0:	e2502000 	subs	r2, r0, #0
 10047a4:	1a000017 	bne	1004808 <csi_hack_send_line_data+0x84>
	// instead - should be sufficient time to copy across
	//bogo_delay(1000);
	//d_printf(D_INFO, "mipihacks: done, initiating line xfer");

	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 10047a8:	e59f406c 	ldr	r4, [pc, #108]	; 100481c <csi_hack_send_line_data+0x98>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 1);
 10047ac:	e3a02001 	mov	r2, #1
 10047b0:	e3a0104a 	mov	r1, #74	; 0x4a
 10047b4:	e1a00004 	mov	r0, r4
 10047b8:	eb000a0d 	bl	1006ff4 <XGpioPs_WritePin>
	while( XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// wait for DONE to go LOW - ack of command
 10047bc:	e3a0104f 	mov	r1, #79	; 0x4f
 10047c0:	e1a00004 	mov	r0, r4
 10047c4:	eb0009d1 	bl	1006f10 <XGpioPs_ReadPin>
 10047c8:	e3500000 	cmp	r0, #0
 10047cc:	1afffffa 	bne	10047bc <csi_hack_send_line_data+0x38>
	while(!XGpioPs_ReadPin(&g_hal.xgpio_ps, CSI_EMIO_DONE)) ;	// then wait for DONE to go HIGH - command done
 10047d0:	e59f4044 	ldr	r4, [pc, #68]	; 100481c <csi_hack_send_line_data+0x98>
 10047d4:	e3a0104f 	mov	r1, #79	; 0x4f
 10047d8:	e1a00004 	mov	r0, r4
 10047dc:	eb0009cb 	bl	1006f10 <XGpioPs_ReadPin>
 10047e0:	e3500000 	cmp	r0, #0
 10047e4:	0afffffa 	beq	10047d4 <csi_hack_send_line_data+0x50>
	XGpioPs_WritePin(&g_hal.xgpio_ps, CSI_EMIO_START_LINES, 0);
 10047e8:	e59f002c 	ldr	r0, [pc, #44]	; 100481c <csi_hack_send_line_data+0x98>
 10047ec:	e3a02000 	mov	r2, #0
 10047f0:	e3a0104a 	mov	r1, #74	; 0x4a
 10047f4:	eb0009fe 	bl	1006ff4 <XGpioPs_WritePin>

	//d_printf(D_ERROR, "done iter");

	XAxiDma_Reset(&mipi_dma);
 10047f8:	e3010d64 	movw	r0, #7524	; 0x1d64
}
 10047fc:	e8bd4010 	pop	{r4, lr}
	XAxiDma_Reset(&mipi_dma);
 1004800:	e3400116 	movt	r0, #278	; 0x116
 1004804:	ea00015b 	b	1004d78 <XAxiDma_Reset>
		d_printf(D_ERROR, "mipihacks: unable to start transfer, error %d", error);
 1004808:	e3081a70 	movw	r1, #35440	; 0x8a70
 100480c:	e3a00004 	mov	r0, #4
 1004810:	e3401105 	movt	r1, #261	; 0x105
}
 1004814:	e8bd4010 	pop	{r4, lr}
		d_printf(D_ERROR, "mipihacks: unable to start transfer, error %d", error);
 1004818:	eafffcf4 	b	1003bf0 <d_printf>
 100481c:	01161b84 	.word	0x01161b84

01004820 <enable_caches>:
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
    Xil_DCacheEnable();
#endif
#endif
}
 1004820:	e12fff1e 	bx	lr

01004824 <disable_caches>:
 1004824:	e12fff1e 	bx	lr

01004828 <init_uart>:
 1004828:	e12fff1e 	bx	lr

0100482c <init_platform>:
 100482c:	e12fff1e 	bx	lr

01004830 <cleanup_platform>:
 1004830:	e12fff1e 	bx	lr

01004834 <trig_zero_levels>:
 1004834:	e3a03000 	mov	r3, #0
 1004838:	e1a02003 	mov	r2, r3
 100483c:	e3443001 	movt	r3, #16385	; 0x4001
 1004840:	e5832090 	str	r2, [r3, #144]	; 0x90
 1004844:	e5832094 	str	r2, [r3, #148]	; 0x94
 1004848:	e5832098 	str	r2, [r3, #152]	; 0x98
 100484c:	e583209c 	str	r2, [r3, #156]	; 0x9c
 1004850:	e58320a0 	str	r2, [r3, #160]	; 0xa0
 1004854:	e58320a4 	str	r2, [r3, #164]	; 0xa4
 1004858:	e58320a8 	str	r2, [r3, #168]	; 0xa8
 100485c:	e58320ac 	str	r2, [r3, #172]	; 0xac
	fabcfg_write(FAB_CFG_TRIG_LEVEL3, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL4, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL5, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL6, 0x00000000);
	fabcfg_write(FAB_CFG_TRIG_LEVEL7, 0x00000000);
}
 1004860:	e12fff1e 	bx	lr

01004864 <trig_write_levels>:
int trig_write_levels(int comp_group, unsigned int chan_idx, uint8_t demux_mode, int comp_pol, uint16_t trig_lvl_high, uint16_t trig_lvl_low)
{
	uint32_t reg_base;
	uint32_t reg_write;

	if(comp_group == TRIG_COMP_A) {
 1004864:	e3500000 	cmp	r0, #0
{
 1004868:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 100486c:	e1ddc1b8 	ldrh	ip, [sp, #24]
 1004870:	e1dde1bc 	ldrh	lr, [sp, #28]
	if(comp_group == TRIG_COMP_A) {
 1004874:	0a00001d 	beq	10048f0 <trig_write_levels+0x8c>
		reg_base = FAB_CFG_TRIG_LEVEL_A_BASE;
	} else if(comp_group == TRIG_COMP_B) {
 1004878:	e3500001 	cmp	r0, #1
 100487c:	1a000019 	bne	10048e8 <trig_write_levels+0x84>
	/*
	 * Compute the data that will be written to all of the registers that are relevant.
	 *
	 * The level high and low registers are packed along with the polarity and enable.
	 */
	if(trig_lvl_low > trig_lvl_high) {
 1004880:	e15e000c 	cmp	lr, ip
 1004884:	e3a060a0 	mov	r6, #160	; 0xa0
 1004888:	e3a050a4 	mov	r5, #164	; 0xa4
 100488c:	e3a040a8 	mov	r4, #168	; 0xa8
 1004890:	e3a000ac 	mov	r0, #172	; 0xac
 1004894:	e3446001 	movt	r6, #16385	; 0x4001
 1004898:	e3445001 	movt	r5, #16385	; 0x4001
 100489c:	e3444001 	movt	r4, #16385	; 0x4001
 10048a0:	e3440001 	movt	r0, #16385	; 0x4001
		reg_base = FAB_CFG_TRIG_LEVEL_B_BASE;
 10048a4:	e3a070a0 	mov	r7, #160	; 0xa0
	if(trig_lvl_low > trig_lvl_high) {
 10048a8:	8a00000e 	bhi	10048e8 <trig_write_levels+0x84>
		return TRIGRES_PARAM_FAIL;
	}

	if(demux_mode & (ADCDEMUX_12BIT | ADCDEMUX_14BIT)) {
 10048ac:	e3120030 	tst	r2, #48	; 0x30
 10048b0:	0a00001b 	beq	1004924 <trig_write_levels+0xc0>
		if(trig_lvl_high > TRIG_LVL_MAX_PREC) {
 10048b4:	e30087ff 	movw	r8, #2047	; 0x7ff
 10048b8:	e15c0008 	cmp	ip, r8
 10048bc:	21a0c008 	movcs	ip, r8
			trig_lvl_high = TRIG_LVL_MAX_PREC;
		}

		if(trig_lvl_low > TRIG_LVL_MAX_PREC) {
 10048c0:	e15e0008 	cmp	lr, r8
 10048c4:	21a0e008 	movcs	lr, r8
		if(trig_lvl_low > TRIG_LVL_MAX_8B) {
			trig_lvl_low = TRIG_LVL_MAX_8B;
		}
	}

	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 10048c8:	e1a0ca0c 	lsl	ip, ip, #20

	if(comp_pol == TRIG_COMP_POL_NORMAL) {
 10048cc:	e3530000 	cmp	r3, #0
	reg_write = (trig_lvl_low << TRIG_LVL_REG_LO_SHIFT) | (trig_lvl_high << TRIG_LVL_REG_HI_SHIFT) | TRIG_LVL_CH_ENABLE;
 10048d0:	e18cc20e 	orr	ip, ip, lr, lsl #4
 10048d4:	e38ce001 	orr	lr, ip, #1
		reg_write |= TRIG_LVL_CH_POLARITY;
 10048d8:	038ce003 	orreq	lr, ip, #3
	if(comp_pol == TRIG_COMP_POL_NORMAL) {
 10048dc:	0a000015 	beq	1004938 <trig_write_levels+0xd4>
	} else if(comp_pol != TRIG_COMP_POL_INVERT) {
 10048e0:	e3530001 	cmp	r3, #1
 10048e4:	0a000013 	beq	1004938 <trig_write_levels+0xd4>
		return TRIGRES_PARAM_FAIL;
 10048e8:	e3e00002 	mvn	r0, #2

		fabcfg_write(reg_base, reg_write);
	} else {
		return TRIGRES_NOT_IMPLEMENTED;
	}
}
 10048ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	if(trig_lvl_low > trig_lvl_high) {
 10048f0:	e15e000c 	cmp	lr, ip
 10048f4:	e3a06090 	mov	r6, #144	; 0x90
 10048f8:	e3a05094 	mov	r5, #148	; 0x94
 10048fc:	e3a04098 	mov	r4, #152	; 0x98
 1004900:	e3a0009c 	mov	r0, #156	; 0x9c
 1004904:	e3446001 	movt	r6, #16385	; 0x4001
 1004908:	e3445001 	movt	r5, #16385	; 0x4001
 100490c:	e3444001 	movt	r4, #16385	; 0x4001
 1004910:	e3440001 	movt	r0, #16385	; 0x4001
		reg_base = FAB_CFG_TRIG_LEVEL_A_BASE;
 1004914:	e3a07090 	mov	r7, #144	; 0x90
	if(trig_lvl_low > trig_lvl_high) {
 1004918:	8afffff2 	bhi	10048e8 <trig_write_levels+0x84>
	if(demux_mode & (ADCDEMUX_12BIT | ADCDEMUX_14BIT)) {
 100491c:	e3120030 	tst	r2, #48	; 0x30
 1004920:	1affffe3 	bne	10048b4 <trig_write_levels+0x50>
		if(trig_lvl_high > TRIG_LVL_MAX_8B) {
 1004924:	e35c00ff 	cmp	ip, #255	; 0xff
 1004928:	23a0c0ff 	movcs	ip, #255	; 0xff
		if(trig_lvl_low > TRIG_LVL_MAX_8B) {
 100492c:	e35e00ff 	cmp	lr, #255	; 0xff
 1004930:	23a0e0ff 	movcs	lr, #255	; 0xff
 1004934:	eaffffe3 	b	10048c8 <trig_write_levels+0x64>
	if(demux_mode & ADCDEMUX_1CH) {
 1004938:	e3120001 	tst	r2, #1
 100493c:	1a00000b 	bne	1004970 <trig_write_levels+0x10c>
	} else if(demux_mode & ADCDEMUX_2CH) {
 1004940:	e3120002 	tst	r2, #2
 1004944:	0a00000e 	beq	1004984 <trig_write_levels+0x120>
		if(chan_idx == 0 || chan_idx == 1) {
 1004948:	e3510001 	cmp	r1, #1
 100494c:	8affffe5 	bhi	10048e8 <trig_write_levels+0x84>
			reg_base += chan_idx * 4;
 1004950:	e0871101 	add	r1, r7, r1, lsl #2
 1004954:	e2813101 	add	r3, r1, #1073741824	; 0x40000000
 1004958:	e2811121 	add	r1, r1, #1073741832	; 0x40000008
 100495c:	e2833801 	add	r3, r3, #65536	; 0x10000
 1004960:	e2811801 	add	r1, r1, #65536	; 0x10000
 1004964:	e583e000 	str	lr, [r3]
 1004968:	e581e000 	str	lr, [r1]
 100496c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1004970:	e586e000 	str	lr, [r6]
 1004974:	e585e000 	str	lr, [r5]
 1004978:	e584e000 	str	lr, [r4]
 100497c:	e580e000 	str	lr, [r0]
 1004980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	} else if(demux_mode & ADCDEMUX_4CH) {
 1004984:	e3120004 	tst	r2, #4
 1004988:	0a000006 	beq	10049a8 <trig_write_levels+0x144>
		if(chan_idx <= 3) {
 100498c:	e3510003 	cmp	r1, #3
 1004990:	8affffd4 	bhi	10048e8 <trig_write_levels+0x84>
			reg_base += chan_idx * 4;
 1004994:	e1a01101 	lsl	r1, r1, #2
 1004998:	e2811101 	add	r1, r1, #1073741824	; 0x40000000
 100499c:	e2811801 	add	r1, r1, #65536	; 0x10000
 10049a0:	e781e007 	str	lr, [r1, r7]
}
 10049a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		return TRIGRES_NOT_IMPLEMENTED;
 10049a8:	e3e00006 	mvn	r0, #6
 10049ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010049b0 <trig_configure_edge>:

	//d_printf(D_INFO, "trigger: edge trigger starting (trig_lvl=0x%02x)", trig_lvl);

	//D_ASSERT(g_acq_state.state != ACQSTATE_UNINIT) ;

	if(!(edge_type == TRIG_EDGE_FALLING || edge_type == TRIG_EDGE_RISING || edge_type == TRIG_EDGE_BOTH)) {
 10049b0:	e243c001 	sub	ip, r3, #1
 10049b4:	e35c0002 	cmp	ip, #2
 10049b8:	8a000006 	bhi	10049d8 <trig_configure_edge+0x28>
		return TRIGRES_PARAM_FAIL;
	}

	if((trig_hyst * 2) > trig_lvl) {
 10049bc:	e1510082 	cmp	r1, r2, lsl #1
 10049c0:	b3a0c001 	movlt	ip, #1
 10049c4:	a3a0c000 	movge	ip, #0
		return TRIGRES_PARAM_FAIL;
	}

	if(chan_idx >= 4) {
 10049c8:	e3500003 	cmp	r0, #3
 10049cc:	838cc001 	orrhi	ip, ip, #1
 10049d0:	e35c0000 	cmp	ip, #0
 10049d4:	0a000001 	beq	10049e0 <trig_configure_edge+0x30>
 10049d8:	e3e00002 	mvn	r0, #2
	asm("cpsie I");

	//d_printf(D_INFO, "trigger: edge trigger initialised");

	//trig_dump_state();
}
 10049dc:	e12fff1e 	bx	lr
	trig_lo = trig_lvl - (trig_hyst / 2);
 10049e0:	e1a020a2 	lsr	r2, r2, #1
{
 10049e4:	e92d4010 	push	{r4, lr}
 10049e8:	e24dd008 	sub	sp, sp, #8
	trig_lo = trig_lvl - (trig_hyst / 2);
 10049ec:	e0414002 	sub	r4, r1, r2
	trig_hi = trig_lvl + (trig_hyst / 2);
 10049f0:	e0822001 	add	r2, r2, r1
	trig_lo = trig_lvl - (trig_hyst / 2);
 10049f4:	e6ff4074 	uxth	r4, r4
	trig_hi = trig_lvl + (trig_hyst / 2);
 10049f8:	e6ffe072 	uxth	lr, r2
	asm("cpsid I");
 10049fc:	f10c0080 	cpsid	i
 1004a00:	e3a02000 	mov	r2, #0
	if(edge_type == TRIG_EDGE_FALLING) {
 1004a04:	e3530001 	cmp	r3, #1
 1004a08:	e3442001 	movt	r2, #16385	; 0x4001
 1004a0c:	e582c090 	str	ip, [r2, #144]	; 0x90
 1004a10:	e582c094 	str	ip, [r2, #148]	; 0x94
 1004a14:	e582c098 	str	ip, [r2, #152]	; 0x98
 1004a18:	e582c09c 	str	ip, [r2, #156]	; 0x9c
 1004a1c:	e582c0a0 	str	ip, [r2, #160]	; 0xa0
 1004a20:	e582c0a4 	str	ip, [r2, #164]	; 0xa4
 1004a24:	e582c0a8 	str	ip, [r2, #168]	; 0xa8
 1004a28:	e582c0ac 	str	ip, [r2, #172]	; 0xac
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004a2c:	e59210b0 	ldr	r1, [r2, #176]	; 0xb0
 1004a30:	e582c0b0 	str	ip, [r2, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1004a34:	e59210b0 	ldr	r1, [r2, #176]	; 0xb0
 1004a38:	e38112c2 	orr	r1, r1, #536870924	; 0x2000000c
 1004a3c:	e58210b0 	str	r1, [r2, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004a40:	e59210b0 	ldr	r1, [r2, #176]	; 0xb0
 1004a44:	e3c1140f 	bic	r1, r1, #251658240	; 0xf000000
 1004a48:	e58210b0 	str	r1, [r2, #176]	; 0xb0
 1004a4c:	0a000018 	beq	1004ab4 <trig_configure_edge+0x104>
	} else if(edge_type == TRIG_EDGE_RISING) {
 1004a50:	e3530002 	cmp	r3, #2
	_FAB_CFG_ACCESS(reg) |= data;
 1004a54:	e59230b0 	ldr	r3, [r2, #176]	; 0xb0
 1004a58:	03833401 	orreq	r3, r3, #16777216	; 0x1000000
 1004a5c:	13833403 	orrne	r3, r3, #50331648	; 0x3000000
 1004a60:	e58230b0 	str	r3, [r2, #176]	; 0xb0
	trig_write_levels(TRIG_COMP_A, chan_idx, g_acq_state.demux_reg, TRIG_COMP_POL_NORMAL, trig_hi, trig_lo);
 1004a64:	e30122e0 	movw	r2, #4832	; 0x12e0
 1004a68:	e3a03000 	mov	r3, #0
 1004a6c:	e3402116 	movt	r2, #278	; 0x116
 1004a70:	e1a01000 	mov	r1, r0
 1004a74:	e58d4004 	str	r4, [sp, #4]
 1004a78:	e1a00003 	mov	r0, r3
 1004a7c:	e58de000 	str	lr, [sp]
 1004a80:	e5d22780 	ldrb	r2, [r2, #1920]	; 0x780
 1004a84:	ebffff76 	bl	1004864 <trig_write_levels>
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004a88:	e3a03000 	mov	r3, #0
 1004a8c:	e3443001 	movt	r3, #16385	; 0x4001
 1004a90:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1004a94:	e3c2200c 	bic	r2, r2, #12
 1004a98:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) |= data;
 1004a9c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1004aa0:	e3822081 	orr	r2, r2, #129	; 0x81
 1004aa4:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	asm("cpsie I");
 1004aa8:	f1080080 	cpsie	i
}
 1004aac:	e28dd008 	add	sp, sp, #8
 1004ab0:	e8bd8010 	pop	{r4, pc}
 1004ab4:	e59230b0 	ldr	r3, [r2, #176]	; 0xb0
 1004ab8:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
 1004abc:	e58230b0 	str	r3, [r2, #176]	; 0xb0
 1004ac0:	eaffffe7 	b	1004a64 <trig_configure_edge+0xb4>

01004ac4 <trig_configure_holdoff>:
 */
void trig_configure_holdoff(uint64_t holdoff_time_ns)
{
	uint32_t holdoff_reg;

	if(holdoff_time_ns == 0) {
 1004ac4:	e1903001 	orrs	r3, r0, r1
 1004ac8:	0a000012 	beq	1004b18 <trig_configure_holdoff+0x54>
		fabcfg_clear(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_HOLDOFF_ENABLE);
		fabcfg_write(FAB_CFG_TRIG_HOLDOFF, 0x00000000);
		return;
	}

	if(holdoff_time_ns < HOLDOFF_NS_MINIMUM) {
 1004acc:	e3a03000 	mov	r3, #0
 1004ad0:	e3e0201f 	mvn	r2, #31
 1004ad4:	e1510003 	cmp	r1, r3
 1004ad8:	01500002 	cmpeq	r0, r2
 1004adc:	81a01003 	movhi	r1, r3
 1004ae0:	81a00002 	movhi	r0, r2

	if(holdoff_time_ns > HOLDOFF_NS_MAXIMUM) {
		holdoff_time_ns = HOLDOFF_NS_MAXIMUM;
	}

	holdoff_reg = holdoff_time_ns / HOLDOFF_NS_PER_COUNT;
 1004ae4:	e3510000 	cmp	r1, #0
	_FAB_CFG_ACCESS(reg) = data;
 1004ae8:	e3a03000 	mov	r3, #0
 1004aec:	03500020 	cmpeq	r0, #32
 1004af0:	e3443001 	movt	r3, #16385	; 0x4001
 1004af4:	33a00020 	movcc	r0, #32
 1004af8:	33a01000 	movcc	r1, #0
 1004afc:	e1a021a0 	lsr	r2, r0, #3
 1004b00:	e1822e81 	orr	r2, r2, r1, lsl #29
 1004b04:	e58320c0 	str	r2, [r3, #192]	; 0xc0
	_FAB_CFG_ACCESS(reg) |= data;
 1004b08:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1004b0c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 1004b10:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	fabcfg_write(FAB_CFG_TRIG_HOLDOFF, holdoff_reg);
	fabcfg_set(FAB_CFG_TRIG_CONFIG_A, TRIG_CTRL_HOLDOFF_ENABLE);
}
 1004b14:	e12fff1e 	bx	lr
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004b18:	e3a03000 	mov	r3, #0
	_FAB_CFG_ACCESS(reg) = data;
 1004b1c:	e1a01003 	mov	r1, r3
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004b20:	e3443001 	movt	r3, #16385	; 0x4001
 1004b24:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1004b28:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 1004b2c:	e58320b0 	str	r2, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1004b30:	e58310c0 	str	r1, [r3, #192]	; 0xc0
		return;
 1004b34:	e12fff1e 	bx	lr

01004b38 <trig_dump_state>:
void trig_dump_state()
{
	uint32_t state_a;
	int i;

	d_printf(D_INFO, "");
 1004b38:	e3091478 	movw	r1, #38008	; 0x9478
{
 1004b3c:	e92d4070 	push	{r4, r5, r6, lr}
	d_printf(D_INFO, "");
 1004b40:	e3a00002 	mov	r0, #2
{
 1004b44:	e24dd028 	sub	sp, sp, #40	; 0x28
	d_printf(D_INFO, "");
 1004b48:	e3401105 	movt	r1, #261	; 0x105

	d_printf(D_INFO, "** Trigger State (Fabric) **");
	d_printf(D_INFO, "");
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1004b4c:	e3a05090 	mov	r5, #144	; 0x90
	d_printf(D_INFO, "");
 1004b50:	ebfffc26 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "** Trigger State (Fabric) **");
 1004b54:	e3081aa0 	movw	r1, #35488	; 0x8aa0
 1004b58:	e3a00002 	mov	r0, #2
 1004b5c:	e3401105 	movt	r1, #261	; 0x105

	for(i = 0; i < 8; i++) {
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1004b60:	e3086adc 	movw	r6, #35548	; 0x8adc
	d_printf(D_INFO, "** Trigger State (Fabric) **");
 1004b64:	ebfffc21 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "");
 1004b68:	e3091478 	movw	r1, #38008	; 0x9478
 1004b6c:	e3a00002 	mov	r0, #2
 1004b70:	e3401105 	movt	r1, #261	; 0x105
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1004b74:	e3445001 	movt	r5, #16385	; 0x4001
	d_printf(D_INFO, "");
 1004b78:	ebfffc1c 	bl	1003bf0 <d_printf>
	res = _FAB_CFG_ACCESS(reg);
 1004b7c:	e3a03000 	mov	r3, #0
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1004b80:	e3081ac0 	movw	r1, #35520	; 0x8ac0
 1004b84:	e3443001 	movt	r3, #16385	; 0x4001
 1004b88:	e3401105 	movt	r1, #261	; 0x105
 1004b8c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
 1004b90:	e3a00002 	mov	r0, #2
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1004b94:	e3406105 	movt	r6, #261	; 0x105
	for(i = 0; i < 8; i++) {
 1004b98:	e3a04000 	mov	r4, #0
	d_printf(D_INFO, "trig_config_a      = 0x%08x", fabcfg_read(FAB_CFG_TRIG_CONFIG_A));
 1004b9c:	ebfffc13 	bl	1003bf0 <d_printf>
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1004ba0:	e1a02004 	mov	r2, r4
 1004ba4:	e4953004 	ldr	r3, [r5], #4
 1004ba8:	e1a01006 	mov	r1, r6
	for(i = 0; i < 8; i++) {
 1004bac:	e2844001 	add	r4, r4, #1
		d_printf(D_INFO, "trig_level%d        = 0x%08x", i, fabcfg_read(FAB_CFG_TRIG_LEVEL0 + (i * 4)));
 1004bb0:	e3a00002 	mov	r0, #2
 1004bb4:	ebfffc0d 	bl	1003bf0 <d_printf>
	for(i = 0; i < 8; i++) {
 1004bb8:	e3540008 	cmp	r4, #8
 1004bbc:	1afffff7 	bne	1004ba0 <trig_dump_state+0x68>
 1004bc0:	e3a04000 	mov	r4, #0
	}

	d_printf(D_INFO, "trig_holdoff       = 0x%08x", fabcfg_read(FAB_CFG_TRIG_HOLDOFF));
 1004bc4:	e3081afc 	movw	r1, #35580	; 0x8afc
 1004bc8:	e3444001 	movt	r4, #16385	; 0x4001
 1004bcc:	e3401105 	movt	r1, #261	; 0x105
 1004bd0:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
 1004bd4:	e3a00002 	mov	r0, #2
 1004bd8:	ebfffc04 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "trig_auto_timers   = 0x%08x", fabcfg_read(FAB_CFG_TRIG_AUTO_TIMERS));
 1004bdc:	e3081b18 	movw	r1, #35608	; 0x8b18
 1004be0:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
 1004be4:	e3401105 	movt	r1, #261	; 0x105
 1004be8:	e3a00002 	mov	r0, #2
 1004bec:	ebfffbff 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "trig_delay_reg0    = 0x%08x", fabcfg_read(FAB_CFG_TRIG_DELAY_REG0));
 1004bf0:	e3081b34 	movw	r1, #35636	; 0x8b34
 1004bf4:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
 1004bf8:	e3401105 	movt	r1, #261	; 0x105
 1004bfc:	e3a00002 	mov	r0, #2
 1004c00:	ebfffbfa 	bl	1003bf0 <d_printf>
	d_printf(D_INFO, "trig_delay_reg1    = 0x%08x", fabcfg_read(FAB_CFG_TRIG_DELAY_REG1));
 1004c04:	e3081b50 	movw	r1, #35664	; 0x8b50
 1004c08:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
 1004c0c:	e3401105 	movt	r1, #261	; 0x105
 1004c10:	e3a00002 	mov	r0, #2
 1004c14:	ebfffbf5 	bl	1003bf0 <d_printf>
 1004c18:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8

	state_a = fabcfg_read(FAB_CFG_TRIG_STATE_A);

	d_printf(D_INFO, "trig_state_a       = 0x%08x [%c%c%c%c%c%c%c%c] [auto:%d] [trig:%d]",
 1004c1c:	e3081b6c 	movw	r1, #35692	; 0x8b6c
 1004c20:	e3401105 	movt	r1, #261	; 0x105
 1004c24:	e3a00002 	mov	r0, #2
 1004c28:	e3120001 	tst	r2, #1
 1004c2c:	13a03054 	movne	r3, #84	; 0x54
 1004c30:	03a03020 	moveq	r3, #32
 1004c34:	e3120002 	tst	r2, #2
 1004c38:	13a0c041 	movne	ip, #65	; 0x41
 1004c3c:	03a0c020 	moveq	ip, #32
 1004c40:	e3120004 	tst	r2, #4
 1004c44:	e58dc000 	str	ip, [sp]
 1004c48:	13a0e061 	movne	lr, #97	; 0x61
 1004c4c:	03a0e020 	moveq	lr, #32
 1004c50:	e3120008 	tst	r2, #8
 1004c54:	e58de004 	str	lr, [sp, #4]
 1004c58:	13a05073 	movne	r5, #115	; 0x73
 1004c5c:	03a05020 	moveq	r5, #32
 1004c60:	e3120010 	tst	r2, #16
 1004c64:	e58d5008 	str	r5, [sp, #8]
 1004c68:	13a0c072 	movne	ip, #114	; 0x72
 1004c6c:	03a0c020 	moveq	ip, #32
 1004c70:	e3120020 	tst	r2, #32
 1004c74:	e58dc00c 	str	ip, [sp, #12]
 1004c78:	13a0e048 	movne	lr, #72	; 0x48
 1004c7c:	03a0e020 	moveq	lr, #32
 1004c80:	e3120040 	tst	r2, #64	; 0x40
 1004c84:	e58de010 	str	lr, [sp, #16]
 1004c88:	13a0c057 	movne	ip, #87	; 0x57
 1004c8c:	03a0c020 	moveq	ip, #32
 1004c90:	e3120080 	tst	r2, #128	; 0x80
 1004c94:	e58dc014 	str	ip, [sp, #20]
 1004c98:	13a0c049 	movne	ip, #73	; 0x49
 1004c9c:	03a0c020 	moveq	ip, #32
 1004ca0:	e58dc018 	str	ip, [sp, #24]
 1004ca4:	e7e3c652 	ubfx	ip, r2, #12, #4
 1004ca8:	e58dc020 	str	ip, [sp, #32]
 1004cac:	e7e2c4d2 	ubfx	ip, r2, #9, #3
 1004cb0:	e58dc01c 	str	ip, [sp, #28]
 1004cb4:	ebfffbcd 	bl	1003bf0 <d_printf>
														(state_a & TRIG_STATE_A_ACQ_WAIT_HOLDOFF) 	? 'W' : ' ', \
														(state_a & TRIG_STATE_A_INT_ARM) 			? 'I' : ' ', \
														(state_a & TRIG_STATE_A_DBG_AU_STATE_MASK) >> TRIG_STATE_A_DBG_AU_STATE_SHIFT, \
														(state_a & TRIG_STATE_A_DBG_TRIG_STATE_MASK) >> TRIG_STATE_A_DBG_TRIG_STATE_SHIFT);

	d_printf(D_INFO, "trig_holdoff_debug = 0x%08x", fabcfg_read(FAB_CFG_TRIG_HOLDOFF_DEBUG));
 1004cb8:	e3081bb0 	movw	r1, #35760	; 0x8bb0
 1004cbc:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
 1004cc0:	e3401105 	movt	r1, #261	; 0x105
 1004cc4:	e3a00002 	mov	r0, #2
 1004cc8:	ebfffbc8 	bl	1003bf0 <d_printf>

	d_printf(D_INFO, "");
 1004ccc:	e3091478 	movw	r1, #38008	; 0x9478
 1004cd0:	e3a00002 	mov	r0, #2
 1004cd4:	e3401105 	movt	r1, #261	; 0x105

	//fabcfg_dump_state();
}
 1004cd8:	e28dd028 	add	sp, sp, #40	; 0x28
 1004cdc:	e8bd4070 	pop	{r4, r5, r6, lr}
	d_printf(D_INFO, "");
 1004ce0:	eafffbc2 	b	1003bf0 <d_printf>

01004ce4 <trig_init>:
	_FAB_CFG_ACCESS(reg) = data;
 1004ce4:	e3a03000 	mov	r3, #0
 1004ce8:	e3a0200c 	mov	r2, #12
 1004cec:	e3443001 	movt	r3, #16385	; 0x4001
 1004cf0:	e3402040 	movt	r2, #64	; 0x40
{
 1004cf4:	e92d4010 	push	{r4, lr}
 1004cf8:	e3a0c001 	mov	ip, #1
 1004cfc:	e58320b0 	str	r2, [r3, #176]	; 0xb0
 1004d00:	e3a02000 	mov	r2, #0
	d_printf(D_INFO, "trigger: defaults loaded");
 1004d04:	e3081bcc 	movw	r1, #35788	; 0x8bcc
 1004d08:	e3a00002 	mov	r0, #2
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004d0c:	e593e0b0 	ldr	lr, [r3, #176]	; 0xb0
 1004d10:	e3401105 	movt	r1, #261	; 0x105
 1004d14:	e3cee00c 	bic	lr, lr, #12
 1004d18:	e583e0b0 	str	lr, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1004d1c:	e5832090 	str	r2, [r3, #144]	; 0x90
 1004d20:	e5832094 	str	r2, [r3, #148]	; 0x94
 1004d24:	e5832098 	str	r2, [r3, #152]	; 0x98
 1004d28:	e583209c 	str	r2, [r3, #156]	; 0x9c
 1004d2c:	e58320a0 	str	r2, [r3, #160]	; 0xa0
 1004d30:	e58320a4 	str	r2, [r3, #164]	; 0xa4
 1004d34:	e58320a8 	str	r2, [r3, #168]	; 0xa8
 1004d38:	e58320ac 	str	r2, [r3, #172]	; 0xac
 1004d3c:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
 1004d40:	e58320c0 	str	r2, [r3, #192]	; 0xc0
 1004d44:	e583c0c4 	str	ip, [r3, #196]	; 0xc4
 1004d48:	e58320c4 	str	r2, [r3, #196]	; 0xc4
 1004d4c:	e583c0c8 	str	ip, [r3, #200]	; 0xc8
 1004d50:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1004d54:	e583c0cc 	str	ip, [r3, #204]	; 0xcc
 1004d58:	e58320cc 	str	r2, [r3, #204]	; 0xcc
	_FAB_CFG_ACCESS(reg) &= ~data;
 1004d5c:	e593c0b0 	ldr	ip, [r3, #176]	; 0xb0
 1004d60:	e3ccc801 	bic	ip, ip, #65536	; 0x10000
 1004d64:	e583c0b0 	str	ip, [r3, #176]	; 0xb0
	_FAB_CFG_ACCESS(reg) = data;
 1004d68:	e58320c0 	str	r2, [r3, #192]	; 0xc0
 1004d6c:	ebfffb9f 	bl	1003bf0 <d_printf>
}
 1004d70:	e8bd4010 	pop	{r4, lr}
	trig_dump_state();
 1004d74:	eaffff6f 	b	1004b38 <trig_dump_state>

01004d78 <XAxiDma_Reset>:
	UINTPTR RegBase;
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_BdRing *RxRingPtr;
	int RingIndex;

	if (InstancePtr->HasMm2S) {
 1004d78:	e5903004 	ldr	r3, [r0, #4]
{
 1004d7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if (InstancePtr->HasMm2S) {
 1004d80:	e3530000 	cmp	r3, #0
 1004d84:	0a000019 	beq	1004df0 <XAxiDma_Reset+0x78>
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* Save the locations of current BDs both rings are working on
		 * before the reset so later we can resume the rings smoothly.
		 */
		if(XAxiDma_HasSg(InstancePtr)){
 1004d88:	e5903010 	ldr	r3, [r0, #16]
 1004d8c:	e3530000 	cmp	r3, #0
 1004d90:	1a00001a 	bne	1004e00 <XAxiDma_Reset+0x88>
*
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1004d94:	e5902000 	ldr	r2, [r0]
	*LocalAddr = Value;
 1004d98:	e3a01004 	mov	r1, #4

	/* Set TX/RX Channel state */
	if (InstancePtr->HasMm2S) {
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004d9c:	e3a03002 	mov	r3, #2
 1004da0:	e5821000 	str	r1, [r2]
 1004da4:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 1004da8:	e5903008 	ldr	r3, [r0, #8]
 1004dac:	e3530000 	cmp	r3, #0
 1004db0:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004db4:	e5901744 	ldr	r1, [r0, #1860]	; 0x744
 1004db8:	e3510000 	cmp	r1, #0
 1004dbc:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
 1004dc0:	e3a03000 	mov	r3, #0
						RingIndex++) {
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);
			if (InstancePtr->HasS2Mm) {
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004dc4:	e3a0e06c 	mov	lr, #108	; 0x6c
 1004dc8:	e3a0c002 	mov	ip, #2
 1004dcc:	e022039e 	mla	r2, lr, r3, r0
						RingIndex++) {
 1004dd0:	e2833001 	add	r3, r3, #1
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004dd4:	e1530001 	cmp	r3, r1
				RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1004dd8:	e582c088 	str	ip, [r2, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004ddc:	1afffffa 	bne	1004dcc <XAxiDma_Reset+0x54>
 1004de0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	if (InstancePtr->HasMm2S) {
 1004de4:	e5903004 	ldr	r3, [r0, #4]
 1004de8:	e3530000 	cmp	r3, #0
 1004dec:	1affffe8 	bne	1004d94 <XAxiDma_Reset+0x1c>
		RegBase = InstancePtr->RegBase + XAXIDMA_RX_OFFSET;
 1004df0:	e5903000 	ldr	r3, [r0]
 1004df4:	e3a02004 	mov	r2, #4
 1004df8:	e5832030 	str	r2, [r3, #48]	; 0x30
	if (InstancePtr->HasMm2S) {
 1004dfc:	eaffffe9 	b	1004da8 <XAxiDma_Reset+0x30>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1004e00:	e1c021d4 	ldrd	r2, [r0, #20]
 1004e04:	e3530000 	cmp	r3, #0
 1004e08:	1a000018 	bne	1004e70 <XAxiDma_Reset+0xf8>
	return *(volatile u32 *) Addr;
 1004e0c:	e5923008 	ldr	r3, [r2, #8]
 1004e10:	e580305c 	str	r3, [r0, #92]	; 0x5c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004e14:	e590c744 	ldr	ip, [r0, #1860]	; 0x744
 1004e18:	e35c0000 	cmp	ip, #0
 1004e1c:	daffffdc 	ble	1004d94 <XAxiDma_Reset+0x1c>
 1004e20:	e3a0206c 	mov	r2, #108	; 0x6c
 1004e24:	e1a03000 	mov	r3, r0
 1004e28:	e02c0c92 	mla	ip, r2, ip, r0
 1004e2c:	ea000008 	b	1004e54 <XAxiDma_Reset+0xdc>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1004e30:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
 1004e34:	e3520000 	cmp	r2, #0
 1004e38:	e282e001 	add	lr, r2, #1
 1004e3c:	0a000008 	beq	1004e64 <XAxiDma_Reset+0xec>
 1004e40:	e791228e 	ldr	r2, [r1, lr, lsl #5]
 1004e44:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1004e48:	e283306c 	add	r3, r3, #108	; 0x6c
			for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1004e4c:	e15c0003 	cmp	ip, r3
 1004e50:	0affffe3 	beq	1004de4 <XAxiDma_Reset+0x6c>
				XAxiDma_BdRingSnapShotCurrBd(RxRingPtr);
 1004e54:	e5932084 	ldr	r2, [r3, #132]	; 0x84
 1004e58:	e5931080 	ldr	r1, [r3, #128]	; 0x80
 1004e5c:	e3520000 	cmp	r2, #0
 1004e60:	1afffff2 	bne	1004e30 <XAxiDma_Reset+0xb8>
 1004e64:	e5912008 	ldr	r2, [r1, #8]
 1004e68:	e58320c8 	str	r2, [r3, #200]	; 0xc8
 1004e6c:	eafffff5 	b	1004e48 <XAxiDma_Reset+0xd0>
			XAxiDma_BdRingSnapShotCurrBd(TxRingPtr);
 1004e70:	e5903078 	ldr	r3, [r0, #120]	; 0x78
 1004e74:	e3530000 	cmp	r3, #0
 1004e78:	0affffe3 	beq	1004e0c <XAxiDma_Reset+0x94>
 1004e7c:	e2833001 	add	r3, r3, #1
 1004e80:	e7923283 	ldr	r3, [r2, r3, lsl #5]
 1004e84:	e580305c 	str	r3, [r0, #92]	; 0x5c
 1004e88:	eaffffe1 	b	1004e14 <XAxiDma_Reset+0x9c>

01004e8c <XAxiDma_ResetIsDone>:
	TxRingPtr = XAxiDma_GetTxRing(InstancePtr);
	RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

	/* Check transmit channel
	 */
	if (InstancePtr->HasMm2S) {
 1004e8c:	e5903004 	ldr	r3, [r0, #4]
 1004e90:	e3530000 	cmp	r3, #0
 1004e94:	0a000003 	beq	1004ea8 <XAxiDma_ResetIsDone+0x1c>
 1004e98:	e5903014 	ldr	r3, [r0, #20]
 1004e9c:	e5933000 	ldr	r3, [r3]
		RegisterValue = XAxiDma_ReadReg(TxRingPtr->ChanBase,
			XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1004ea0:	e3130004 	tst	r3, #4
 1004ea4:	1a000009 	bne	1004ed0 <XAxiDma_ResetIsDone+0x44>
		}
	}

	/* Check receive channel
	 */
	if (InstancePtr->HasS2Mm) {
 1004ea8:	e5903008 	ldr	r3, [r0, #8]
 1004eac:	e3530000 	cmp	r3, #0
 1004eb0:	0a000004 	beq	1004ec8 <XAxiDma_ResetIsDone+0x3c>
 1004eb4:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1004eb8:	e5930000 	ldr	r0, [r3]
		RegisterValue = XAxiDma_ReadReg(RxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET);

		/* Reset is done when the reset bit is low
		 */
		if(RegisterValue & XAXIDMA_CR_RESET_MASK) {
 1004ebc:	e2200004 	eor	r0, r0, #4
 1004ec0:	e7e00150 	ubfx	r0, r0, #2, #1
 1004ec4:	e12fff1e 	bx	lr

			return 0;
		}
	}

	return 1;
 1004ec8:	e3a00001 	mov	r0, #1
}
 1004ecc:	e12fff1e 	bx	lr
			return 0;
 1004ed0:	e3a00000 	mov	r0, #0
 1004ed4:	e12fff1e 	bx	lr

01004ed8 <XAxiDma_CfgInitialize>:
{
 1004ed8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!Config) {
 1004edc:	e2515000 	subs	r5, r1, #0
	InstancePtr->Initialized = 0;
 1004ee0:	e3a01000 	mov	r1, #0
{
 1004ee4:	e24dd00c 	sub	sp, sp, #12
	InstancePtr->Initialized = 0;
 1004ee8:	e580100c 	str	r1, [r0, #12]
		return XST_INVALID_PARAM;
 1004eec:	03a0000f 	moveq	r0, #15
	if(!Config) {
 1004ef0:	0a000078 	beq	10050d8 <XAxiDma_CfgInitialize+0x200>
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1004ef4:	e3a02e75 	mov	r2, #1872	; 0x750
 1004ef8:	e1a04000 	mov	r4, r0
	BaseAddr = Config->BaseAddr;
 1004efc:	e5956004 	ldr	r6, [r5, #4]
	memset(InstancePtr, 0, sizeof(XAxiDma));
 1004f00:	fa001ff6 	blx	100cee0 <memset>
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 1004f04:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 1004f08:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
	InstancePtr->AddrWidth = Config->AddrWidth;
 1004f0c:	e595103c 	ldr	r1, [r5, #60]	; 0x3c
	if (!InstancePtr->TxNumChannels)
 1004f10:	e3530000 	cmp	r3, #0
	InstancePtr->HasMm2S = Config->HasMm2S;
 1004f14:	e595b00c 	ldr	fp, [r5, #12]
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 1004f18:	e595a018 	ldr	sl, [r5, #24]
	InstancePtr->HasSg = Config->HasSg;
 1004f1c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1004f20:	e5958038 	ldr	r8, [r5, #56]	; 0x38
	InstancePtr->TxNumChannels = Config->Mm2sNumChannels;
 1004f24:	e5843740 	str	r3, [r4, #1856]	; 0x740
		InstancePtr->TxNumChannels = 1;
 1004f28:	03a03001 	moveq	r3, #1
 1004f2c:	05843740 	streq	r3, [r4, #1856]	; 0x740
	if (!InstancePtr->RxNumChannels)
 1004f30:	e3500000 	cmp	r0, #0
	InstancePtr->RxNumChannels = Config->S2MmNumChannels;
 1004f34:	e5840744 	str	r0, [r4, #1860]	; 0x744
		InstancePtr->RxNumChannels = 1;
 1004f38:	03a00001 	moveq	r0, #1
	InstancePtr->AddrWidth = Config->AddrWidth;
 1004f3c:	e58d1004 	str	r1, [sp, #4]
	InstancePtr->HasMm2S = Config->HasMm2S;
 1004f40:	e8840840 	stm	r4, {r6, fp}
	InstancePtr->HasS2Mm = Config->HasS2Mm;
 1004f44:	e584a008 	str	sl, [r4, #8]
	InstancePtr->HasSg = Config->HasSg;
 1004f48:	e5842010 	str	r2, [r4, #16]
	InstancePtr->MicroDmaMode = Config->MicroDmaMode;
 1004f4c:	e5848748 	str	r8, [r4, #1864]	; 0x748
	InstancePtr->AddrWidth = Config->AddrWidth;
 1004f50:	e584174c 	str	r1, [r4, #1868]	; 0x74c
		InstancePtr->RxNumChannels = 1;
 1004f54:	05840744 	streq	r0, [r4, #1860]	; 0x744
	if (!InstancePtr->RxNumChannels)
 1004f58:	0a000060 	beq	10050e0 <XAxiDma_CfgInitialize+0x208>
	if ((InstancePtr->RxNumChannels > 1) ||
 1004f5c:	e3500001 	cmp	r0, #1
 1004f60:	da00005e 	ble	10050e0 <XAxiDma_CfgInitialize+0x208>
		MaxTransferLen =
 1004f64:	e30f9fff 	movw	r9, #65535	; 0xffff
	if (!InstancePtr->MicroDmaMode) {
 1004f68:	e3580000 	cmp	r8, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1004f6c:	e3a02002 	mov	r2, #2
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1004f70:	e3a03000 	mov	r3, #0
	InstancePtr->TxBdRing.RunState = AXIDMA_CHANNEL_HALTED;
 1004f74:	e584201c 	str	r2, [r4, #28]
	InstancePtr->TxBdRing.IsRxChannel = 0;
 1004f78:	e5843018 	str	r3, [r4, #24]
		InstancePtr->TxBdRing.MaxTransferLen = MaxTransferLen;
 1004f7c:	01a02009 	moveq	r2, r9
	if (!InstancePtr->MicroDmaMode) {
 1004f80:	0a000006 	beq	1004fa0 <XAxiDma_CfgInitialize+0xc8>
				((Config->Mm2SDataWidth / 4) *
 1004f84:	e5953014 	ldr	r3, [r5, #20]
 1004f88:	e5952030 	ldr	r2, [r5, #48]	; 0x30
 1004f8c:	e2831003 	add	r1, r3, #3
 1004f90:	e3530000 	cmp	r3, #0
 1004f94:	b1a03001 	movlt	r3, r1
 1004f98:	e1a03143 	asr	r3, r3, #2
 1004f9c:	e0020392 	mul	r2, r2, r3
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004fa0:	e3500000 	cmp	r0, #0
	InstancePtr->TxBdRing.RingIndex = 0;
 1004fa4:	e3a03000 	mov	r3, #0
 1004fa8:	e5842030 	str	r2, [r4, #48]	; 0x30
						 = AXIDMA_CHANNEL_HALTED;
 1004fac:	c3a0706c 	movgt	r7, #108	; 0x6c
	InstancePtr->TxBdRing.RingIndex = 0;
 1004fb0:	e5843078 	str	r3, [r4, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004fb4:	c1a02004 	movgt	r2, r4
						 = AXIDMA_CHANNEL_HALTED;
 1004fb8:	c3a0e002 	movgt	lr, #2
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1004fbc:	c3a0c001 	movgt	ip, #1
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004fc0:	da000007 	ble	1004fe4 <XAxiDma_CfgInitialize+0x10c>
						 = AXIDMA_CHANNEL_HALTED;
 1004fc4:	e0214397 	mla	r1, r7, r3, r4
 1004fc8:	e282206c 	add	r2, r2, #108	; 0x6c
 1004fcc:	e581e088 	str	lr, [r1, #136]	; 0x88
		InstancePtr->RxBdRing[Index].RingIndex = Index;
 1004fd0:	e5823078 	str	r3, [r2, #120]	; 0x78
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004fd4:	e2833001 	add	r3, r3, #1
 1004fd8:	e1500003 	cmp	r0, r3
		InstancePtr->RxBdRing[Index].IsRxChannel = 1;
 1004fdc:	e582c018 	str	ip, [r2, #24]
	for (Index = 0; Index < InstancePtr->RxNumChannels; Index++) {
 1004fe0:	1afffff7 	bne	1004fc4 <XAxiDma_CfgInitialize+0xec>
	if (InstancePtr->HasMm2S) {
 1004fe4:	e35b0000 	cmp	fp, #0
 1004fe8:	0a00000c 	beq	1005020 <XAxiDma_CfgInitialize+0x148>
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1004fec:	e5953014 	ldr	r3, [r5, #20]
		if (InstancePtr->AddrWidth > 32)
 1004ff0:	e59d2004 	ldr	r2, [sp, #4]
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1004ff4:	e595c008 	ldr	ip, [r5, #8]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 1004ff8:	e5951010 	ldr	r1, [r5, #16]
		if (InstancePtr->AddrWidth > 32)
 1004ffc:	e3520020 	cmp	r2, #32
			((unsigned int)Config->Mm2SDataWidth >> 3);
 1005000:	e1a031a3 	lsr	r3, r3, #3
		if (InstancePtr->AddrWidth > 32)
 1005004:	d3a02000 	movle	r2, #0
		InstancePtr->TxBdRing.ChanBase =
 1005008:	e5846014 	str	r6, [r4, #20]
		if (InstancePtr->AddrWidth > 32)
 100500c:	c3a02001 	movgt	r2, #1
		InstancePtr->TxBdRing.HasStsCntrlStrm =
 1005010:	e584c020 	str	ip, [r4, #32]
		InstancePtr->TxBdRing.HasDRE = Config->HasMm2SDRE;
 1005014:	e5841024 	str	r1, [r4, #36]	; 0x24
		InstancePtr->TxBdRing.DataWidth =
 1005018:	e5843028 	str	r3, [r4, #40]	; 0x28
 100501c:	e584202c 	str	r2, [r4, #44]	; 0x2c
	if (InstancePtr->HasS2Mm) {
 1005020:	e35a0000 	cmp	sl, #0
 1005024:	0a00001e 	beq	10050a4 <XAxiDma_CfgInitialize+0x1cc>
		for (Index = 0;
 1005028:	e3500000 	cmp	r0, #0
 100502c:	da00001c 	ble	10050a4 <XAxiDma_CfgInitialize+0x1cc>
			((unsigned int)Config->S2MmDataWidth >> 3);
 1005030:	e5951020 	ldr	r1, [r5, #32]
 1005034:	e3a0306c 	mov	r3, #108	; 0x6c
 1005038:	e0204093 	mla	r0, r3, r0, r4
 100503c:	e59d3004 	ldr	r3, [sp, #4]
					Config->HasStsCntrlStrm;
 1005040:	e595e008 	ldr	lr, [r5, #8]
						((Config->S2MmDataWidth / 4) *
 1005044:	e3510000 	cmp	r1, #0
					Config->HasS2MmDRE;
 1005048:	e595c01c 	ldr	ip, [r5, #28]
						((Config->S2MmDataWidth / 4) *
 100504c:	e2817003 	add	r7, r1, #3
 1005050:	a1a07001 	movge	r7, r1
 1005054:	e1a07147 	asr	r7, r7, #2
 1005058:	e3530020 	cmp	r3, #32
			((unsigned int)Config->S2MmDataWidth >> 3);
 100505c:	e1a011a1 	lsr	r1, r1, #3
 1005060:	e2866030 	add	r6, r6, #48	; 0x30
 1005064:	d3a0a000 	movle	sl, #0
 1005068:	c3a0a001 	movgt	sl, #1
 100506c:	e1a03004 	mov	r3, r4
			if (!InstancePtr->MicroDmaMode) {
 1005070:	e3580000 	cmp	r8, #0
				InstancePtr->RxBdRing[Index].MaxTransferLen =
 1005074:	e1a02009 	mov	r2, r9
			InstancePtr->RxBdRing[Index].ChanBase =
 1005078:	e5836080 	str	r6, [r3, #128]	; 0x80
			InstancePtr->RxBdRing[Index].HasStsCntrlStrm =
 100507c:	e283306c 	add	r3, r3, #108	; 0x6c
 1005080:	e583e020 	str	lr, [r3, #32]
			InstancePtr->RxBdRing[Index].HasDRE =
 1005084:	e583c024 	str	ip, [r3, #36]	; 0x24
			InstancePtr->RxBdRing[Index].DataWidth =
 1005088:	e5831028 	str	r1, [r3, #40]	; 0x28
						((Config->S2MmDataWidth / 4) *
 100508c:	15952034 	ldrne	r2, [r5, #52]	; 0x34
 1005090:	e583a02c 	str	sl, [r3, #44]	; 0x2c
 1005094:	10020792 	mulne	r2, r2, r7
 1005098:	e5832030 	str	r2, [r3, #48]	; 0x30
		for (Index = 0;
 100509c:	e1530000 	cmp	r3, r0
 10050a0:	1afffff2 	bne	1005070 <XAxiDma_CfgInitialize+0x198>
	XAxiDma_Reset(InstancePtr);
 10050a4:	e1a00004 	mov	r0, r4
 10050a8:	e3a05f7d 	mov	r5, #500	; 0x1f4
 10050ac:	ebffff31 	bl	1004d78 <XAxiDma_Reset>
	while (TimeOut) {
 10050b0:	ea000001 	b	10050bc <XAxiDma_CfgInitialize+0x1e4>
 10050b4:	e2555001 	subs	r5, r5, #1
 10050b8:	0a00000f 	beq	10050fc <XAxiDma_CfgInitialize+0x224>
		if(XAxiDma_ResetIsDone(InstancePtr)) {
 10050bc:	e1a00004 	mov	r0, r4
 10050c0:	ebffff71 	bl	1004e8c <XAxiDma_ResetIsDone>
 10050c4:	e3500000 	cmp	r0, #0
 10050c8:	0afffff9 	beq	10050b4 <XAxiDma_CfgInitialize+0x1dc>
	return XST_SUCCESS;
 10050cc:	e3a00000 	mov	r0, #0
	InstancePtr->Initialized = 1;
 10050d0:	e3a03001 	mov	r3, #1
 10050d4:	e584300c 	str	r3, [r4, #12]
}
 10050d8:	e28dd00c 	add	sp, sp, #12
 10050dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((InstancePtr->RxNumChannels > 1) ||
 10050e0:	e5943740 	ldr	r3, [r4, #1856]	; 0x740
 10050e4:	e3530001 	cmp	r3, #1
 10050e8:	caffff9d 	bgt	1004f64 <XAxiDma_CfgInitialize+0x8c>
		MaxTransferLen = (1U << Config->SgLengthWidth) - 1;
 10050ec:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 10050f0:	e3e09000 	mvn	r9, #0
 10050f4:	e1e09319 	mvn	r9, r9, lsl r3
 10050f8:	eaffff9a 	b	1004f68 <XAxiDma_CfgInitialize+0x90>
		xdbg_printf(XDBG_DEBUG_ERROR, "Failed reset in"
 10050fc:	e3080be8 	movw	r0, #35816	; 0x8be8
 1005100:	e3400105 	movt	r0, #261	; 0x105
 1005104:	fa001fcc 	blx	100d03c <puts>
		InstancePtr->Initialized = 0;
 1005108:	e584500c 	str	r5, [r4, #12]
		return XST_DMA_ERROR;
 100510c:	e3a00009 	mov	r0, #9
 1005110:	eafffff0 	b	10050d8 <XAxiDma_CfgInitialize+0x200>

01005114 <XAxiDma_Pause>:
*
*****************************************************************************/
int XAxiDma_Pause(XAxiDma * InstancePtr)
{

	if (!InstancePtr->Initialized) {
 1005114:	e590100c 	ldr	r1, [r0, #12]
{
 1005118:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 100511c:	e3510000 	cmp	r1, #0
 1005120:	0a000022 	beq	10051b0 <XAxiDma_Pause+0x9c>
					" %d\r\n",InstancePtr->Initialized);

		return XST_NOT_SGDMA;
	}

	if (InstancePtr->HasMm2S) {
 1005124:	e5903004 	ldr	r3, [r0, #4]
 1005128:	e3530000 	cmp	r3, #0
 100512c:	0a000007 	beq	1005150 <XAxiDma_Pause+0x3c>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		/* If channel is halted, then we do not need to do anything
		 */
		if(!XAxiDma_HasSg(InstancePtr)) {
 1005130:	e5903010 	ldr	r3, [r0, #16]
 1005134:	e3530000 	cmp	r3, #0
 1005138:	05902014 	ldreq	r2, [r0, #20]
 100513c:	05923000 	ldreq	r3, [r2]
			XAxiDma_WriteReg(TxRingPtr->ChanBase,
 1005140:	03c33001 	biceq	r3, r3, #1
	*LocalAddr = Value;
 1005144:	05823000 	streq	r3, [r2]
				XAxiDma_ReadReg(TxRingPtr->ChanBase,
				XAXIDMA_CR_OFFSET)
				& ~XAXIDMA_CR_RUNSTOP_MASK);
		}

		TxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1005148:	e3a03002 	mov	r3, #2
 100514c:	e580301c 	str	r3, [r0, #28]
	}

	if (InstancePtr->HasS2Mm) {
 1005150:	e5903008 	ldr	r3, [r0, #8]
 1005154:	e3530000 	cmp	r3, #0
 1005158:	0a000012 	beq	10051a8 <XAxiDma_Pause+0x94>
		int RingIndex = 0;
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 100515c:	e5904744 	ldr	r4, [r0, #1860]	; 0x744
 1005160:	e3540000 	cmp	r4, #0
 1005164:	da00000f 	ble	10051a8 <XAxiDma_Pause+0x94>
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr, RingIndex);

			/* If channel is halted, then we do not need to do anything
			 */

			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 1005168:	e5907010 	ldr	r7, [r0, #16]
 100516c:	e1a02000 	mov	r2, r0
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1005170:	e3a03000 	mov	r3, #0
					XAxiDma_ReadReg(RxRingPtr->ChanBase,
					XAXIDMA_CR_OFFSET)
					& ~XAXIDMA_CR_RUNSTOP_MASK);
			}

			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1005174:	e3a0606c 	mov	r6, #108	; 0x6c
 1005178:	e3a05002 	mov	r5, #2
			if(!XAxiDma_HasSg(InstancePtr) && !RingIndex) {
 100517c:	e3570000 	cmp	r7, #0
 1005180:	e282206c 	add	r2, r2, #108	; 0x6c
	return *(volatile u32 *) Addr;
 1005184:	0592e014 	ldreq	lr, [r2, #20]
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 1005188:	e0210396 	mla	r1, r6, r3, r0
				RingIndex++) {
 100518c:	e2833001 	add	r3, r3, #1
 1005190:	059ec000 	ldreq	ip, [lr]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 1005194:	03ccc001 	biceq	ip, ip, #1
	*LocalAddr = Value;
 1005198:	058ec000 	streq	ip, [lr]
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 100519c:	e1530004 	cmp	r3, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10051a0:	e5815088 	str	r5, [r1, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10051a4:	1afffff4 	bne	100517c <XAxiDma_Pause+0x68>
		}
	}

	return XST_SUCCESS;
 10051a8:	e3a00000 	mov	r0, #0

}
 10051ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Pause: Driver not initialized"
 10051b0:	e3080c04 	movw	r0, #35844	; 0x8c04
 10051b4:	e3400105 	movt	r0, #261	; 0x105
 10051b8:	fa001f7a 	blx	100cfa8 <printf>
		return XST_NOT_SGDMA;
 10051bc:	e3a00010 	mov	r0, #16
 10051c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010051c4 <XAxiDma_Resume>:
*****************************************************************************/
int XAxiDma_Resume(XAxiDma * InstancePtr)
{
	int Status;

	if (!InstancePtr->Initialized) {
 10051c4:	e590100c 	ldr	r1, [r0, #12]
{
 10051c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!InstancePtr->Initialized) {
 10051cc:	e3510000 	cmp	r1, #0
 10051d0:	0a000032 	beq	10052a0 <XAxiDma_Resume+0xdc>
		" %d\r\n",InstancePtr->Initialized);

		return 0;
	}

	if (InstancePtr->HasMm2S) {
 10051d4:	e5903004 	ldr	r3, [r0, #4]
 10051d8:	e1a04000 	mov	r4, r0
 10051dc:	e3530000 	cmp	r3, #0
 10051e0:	0a000028 	beq	1005288 <XAxiDma_Resume+0xc4>
		XAxiDma_BdRing *TxRingPtr;
		TxRingPtr = XAxiDma_GetTxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(TxRingPtr)) {
 10051e4:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 10051e8:	e5933004 	ldr	r3, [r3, #4]
 10051ec:	e3130001 	tst	r3, #1
 10051f0:	1a000085 	bne	100540c <XAxiDma_Resume+0x248>

			return 0;
		}
	}

	if (InstancePtr->HasS2Mm) {
 10051f4:	e5903008 	ldr	r3, [r0, #8]
 10051f8:	e3530000 	cmp	r3, #0
 10051fc:	1a000044 	bne	1005314 <XAxiDma_Resume+0x150>
		if(XAxiDma_HasSg(InstancePtr)) {
 1005200:	e5943010 	ldr	r3, [r4, #16]
 1005204:	e3530000 	cmp	r3, #0
 1005208:	1a000048 	bne	1005330 <XAxiDma_Resume+0x16c>
		TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 100520c:	e3a03001 	mov	r3, #1
 1005210:	e584301c 	str	r3, [r4, #28]
	if (InstancePtr->HasS2Mm) {
 1005214:	e5943008 	ldr	r3, [r4, #8]
 1005218:	e3530000 	cmp	r3, #0
 100521c:	0a00001c 	beq	1005294 <XAxiDma_Resume+0xd0>
 1005220:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 1005224:	e3530000 	cmp	r3, #0
 1005228:	da000019 	ble	1005294 <XAxiDma_Resume+0xd0>
 100522c:	e3a05000 	mov	r5, #0
				Status = XAxiDma_BdRingStart(RxRingPtr);
 1005230:	e2848080 	add	r8, r4, #128	; 0x80
 1005234:	e3a0606c 	mov	r6, #108	; 0x6c
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1005238:	e3a07001 	mov	r7, #1
 100523c:	ea000005 	b	1005258 <XAxiDma_Resume+0x94>
 1005240:	e0234596 	mla	r3, r6, r5, r4
					RingIndex++) {
 1005244:	e2855001 	add	r5, r5, #1
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1005248:	e5837088 	str	r7, [r3, #136]	; 0x88
		for (RingIndex = 0 ; RingIndex < InstancePtr->RxNumChannels;
 100524c:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1005250:	e1530005 	cmp	r3, r5
 1005254:	da00000e 	ble	1005294 <XAxiDma_Resume+0xd0>
			if(XAxiDma_HasSg(InstancePtr)) {
 1005258:	e5943010 	ldr	r3, [r4, #16]
 100525c:	e3530000 	cmp	r3, #0
 1005260:	0afffff6 	beq	1005240 <XAxiDma_Resume+0x7c>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 1005264:	e0208596 	mla	r0, r6, r5, r8
 1005268:	eb0002a1 	bl	1005cf4 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 100526c:	e2501000 	subs	r1, r0, #0
 1005270:	0afffff2 	beq	1005240 <XAxiDma_Resume+0x7c>
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1005274:	e3080d1c 	movw	r0, #36124	; 0x8d1c
					return XST_DMA_ERROR;
 1005278:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 100527c:	e3400105 	movt	r0, #261	; 0x105
 1005280:	fa001f48 	blx	100cfa8 <printf>
					return XST_DMA_ERROR;
 1005284:	ea000003 	b	1005298 <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasS2Mm) {
 1005288:	e5903008 	ldr	r3, [r0, #8]
 100528c:	e3530000 	cmp	r3, #0
 1005290:	1a000008 	bne	10052b8 <XAxiDma_Resume+0xf4>
	return XST_SUCCESS;
 1005294:	e3a04000 	mov	r4, #0
}
 1005298:	e1a00004 	mov	r0, r4
 100529c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 10052a0:	e3080c28 	movw	r0, #35880	; 0x8c28
		return XST_NOT_SGDMA;
 10052a4:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Resume: Driver not initialized"
 10052a8:	e3400105 	movt	r0, #261	; 0x105
 10052ac:	fa001f3d 	blx	100cfa8 <printf>
}
 10052b0:	e1a00004 	mov	r0, r4
 10052b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		XAxiDma_BdRing *RxRingPtr;
		RxRingPtr = XAxiDma_GetRxRing(InstancePtr);

		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 10052b8:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 10052bc:	e5933004 	ldr	r3, [r3, #4]
 10052c0:	e3130001 	tst	r3, #1
 10052c4:	0affffd5 	beq	1005220 <XAxiDma_Resume+0x5c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 10052c8:	e3080c6c 	movw	r0, #35948	; 0x8c6c
 10052cc:	e3400105 	movt	r0, #261	; 0x105
 10052d0:	fa001f59 	blx	100d03c <puts>
	if (!InstancePtr->Initialized) {
 10052d4:	e594100c 	ldr	r1, [r4, #12]
 10052d8:	e3510000 	cmp	r1, #0
 10052dc:	0a000058 	beq	1005444 <XAxiDma_Resume+0x280>
	if (InstancePtr->HasMm2S) {
 10052e0:	e5943004 	ldr	r3, [r4, #4]
 10052e4:	e3530000 	cmp	r3, #0
 10052e8:	0a000002 	beq	10052f8 <XAxiDma_Resume+0x134>
		if (TxRingPtr->RunState == AXIDMA_CHANNEL_HALTED) {
 10052ec:	e594301c 	ldr	r3, [r4, #28]
 10052f0:	e3530002 	cmp	r3, #2
 10052f4:	0a000048 	beq	100541c <XAxiDma_Resume+0x258>
	if (InstancePtr->HasS2Mm) {
 10052f8:	e5943008 	ldr	r3, [r4, #8]
 10052fc:	e3530000 	cmp	r3, #0
 1005300:	1a000013 	bne	1005354 <XAxiDma_Resume+0x190>
	if (InstancePtr->HasMm2S) {
 1005304:	e5943004 	ldr	r3, [r4, #4]
 1005308:	e3530000 	cmp	r3, #0
 100530c:	1affffbb 	bne	1005200 <XAxiDma_Resume+0x3c>
 1005310:	eaffffdf 	b	1005294 <XAxiDma_Resume+0xd0>
		if (!XAxiDma_BdRingHwIsStarted(RxRingPtr)) {
 1005314:	e5903080 	ldr	r3, [r0, #128]	; 0x80
 1005318:	e5933004 	ldr	r3, [r3, #4]
 100531c:	e3130001 	tst	r3, #1
 1005320:	1affffe8 	bne	10052c8 <XAxiDma_Resume+0x104>
		if(XAxiDma_HasSg(InstancePtr)) {
 1005324:	e5943010 	ldr	r3, [r4, #16]
 1005328:	e3530000 	cmp	r3, #0
 100532c:	0affffb6 	beq	100520c <XAxiDma_Resume+0x48>
			Status = XAxiDma_BdRingStart(TxRingPtr);
 1005330:	e2840014 	add	r0, r4, #20
 1005334:	eb00026e 	bl	1005cf4 <XAxiDma_BdRingStart>
			if (Status != XST_SUCCESS) {
 1005338:	e2501000 	subs	r1, r0, #0
 100533c:	0affffb2 	beq	100520c <XAxiDma_Resume+0x48>
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1005340:	e3080cf4 	movw	r0, #36084	; 0x8cf4
				return XST_DMA_ERROR;
 1005344:	e3a04009 	mov	r4, #9
				xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed"
 1005348:	e3400105 	movt	r0, #261	; 0x105
 100534c:	fa001f15 	blx	100cfa8 <printf>
				return XST_DMA_ERROR;
 1005350:	eaffffd0 	b	1005298 <XAxiDma_Resume+0xd4>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1005354:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 1005358:	e3530000 	cmp	r3, #0
 100535c:	da000042 	ble	100546c <XAxiDma_Resume+0x2a8>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1005360:	e5942088 	ldr	r2, [r4, #136]	; 0x88
			RxRingPtr = XAxiDma_GetRxIndexRing(InstancePtr,
 1005364:	e2846080 	add	r6, r4, #128	; 0x80
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1005368:	e3520002 	cmp	r2, #2
 100536c:	1a00003e 	bne	100546c <XAxiDma_Resume+0x2a8>
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 1005370:	e3a05000 	mov	r5, #0
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1005374:	e3a0706c 	mov	r7, #108	; 0x6c
 1005378:	e3a08001 	mov	r8, #1
 100537c:	ea00000e 	b	10053bc <XAxiDma_Resume+0x1f8>
 1005380:	e5962000 	ldr	r2, [r6]
 1005384:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(RxRingPtr->ChanBase,
 1005388:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 100538c:	e5823000 	str	r3, [r2]
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1005390:	e0234597 	mla	r3, r7, r5, r4
						RingIndex++) {
 1005394:	e2855001 	add	r5, r5, #1
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1005398:	e0224597 	mla	r2, r7, r5, r4
			RxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 100539c:	e5838088 	str	r8, [r3, #136]	; 0x88
		for (RingIndex = 0; RingIndex < InstancePtr->RxNumChannels;
 10053a0:	e5943744 	ldr	r3, [r4, #1860]	; 0x744
 10053a4:	e286606c 	add	r6, r6, #108	; 0x6c
 10053a8:	e1550003 	cmp	r5, r3
 10053ac:	aa000012 	bge	10053fc <XAxiDma_Resume+0x238>
			if (RxRingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 10053b0:	e5923088 	ldr	r3, [r2, #136]	; 0x88
 10053b4:	e3530002 	cmp	r3, #2
 10053b8:	1a00000f 	bne	10053fc <XAxiDma_Resume+0x238>
			if(XAxiDma_HasSg(InstancePtr)) {
 10053bc:	e5943010 	ldr	r3, [r4, #16]
 10053c0:	e3530000 	cmp	r3, #0
 10053c4:	0affffed 	beq	1005380 <XAxiDma_Resume+0x1bc>
				Status = XAxiDma_BdRingStart(RxRingPtr);
 10053c8:	e1a00006 	mov	r0, r6
 10053cc:	eb000248 	bl	1005cf4 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 10053d0:	e2501000 	subs	r1, r0, #0
 10053d4:	0affffed 	beq	1005390 <XAxiDma_Resume+0x1cc>
					xdbg_printf(XDBG_DEBUG_ERROR,
 10053d8:	e3080cb0 	movw	r0, #36016	; 0x8cb0
					return XST_DMA_ERROR;
 10053dc:	e3a04009 	mov	r4, #9
					xdbg_printf(XDBG_DEBUG_ERROR,
 10053e0:	e3400105 	movt	r0, #261	; 0x105
 10053e4:	fa001eef 	blx	100cfa8 <printf>
			xdbg_printf(XDBG_DEBUG_ERROR, "Resume: failed to start"
 10053e8:	e3080cd0 	movw	r0, #36048	; 0x8cd0
 10053ec:	e1a01004 	mov	r1, r4
 10053f0:	e3400105 	movt	r0, #261	; 0x105
 10053f4:	fa001eeb 	blx	100cfa8 <printf>
			return Status;
 10053f8:	eaffffa6 	b	1005298 <XAxiDma_Resume+0xd4>
	if (InstancePtr->HasMm2S) {
 10053fc:	e5943004 	ldr	r3, [r4, #4]
 1005400:	e3530000 	cmp	r3, #0
 1005404:	0affff82 	beq	1005214 <XAxiDma_Resume+0x50>
 1005408:	eaffff7c 	b	1005200 <XAxiDma_Resume+0x3c>
			xdbg_printf(XDBG_DEBUG_ERROR,
 100540c:	e3080c4c 	movw	r0, #35916	; 0x8c4c
 1005410:	e3400105 	movt	r0, #261	; 0x105
 1005414:	fa001f08 	blx	100d03c <puts>
			return 0;
 1005418:	eaffffad 	b	10052d4 <XAxiDma_Resume+0x110>
			if(XAxiDma_HasSg(InstancePtr)) {
 100541c:	e5943010 	ldr	r3, [r4, #16]
 1005420:	e3530000 	cmp	r3, #0
 1005424:	1a00000b 	bne	1005458 <XAxiDma_Resume+0x294>
	return *(volatile u32 *) Addr;
 1005428:	e5942014 	ldr	r2, [r4, #20]
 100542c:	e5923000 	ldr	r3, [r2]
				XAxiDma_WriteReg(TxRingPtr->ChanBase,
 1005430:	e3833001 	orr	r3, r3, #1
	*LocalAddr = Value;
 1005434:	e5823000 	str	r3, [r2]
			TxRingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1005438:	e3a03001 	mov	r3, #1
 100543c:	e584301c 	str	r3, [r4, #28]
 1005440:	eaffffac 	b	10052f8 <XAxiDma_Resume+0x134>
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 1005444:	e3080c8c 	movw	r0, #35980	; 0x8c8c
		return XST_NOT_SGDMA;
 1005448:	e3a04010 	mov	r4, #16
		xdbg_printf(XDBG_DEBUG_ERROR, "Start: Driver not initialized "
 100544c:	e3400105 	movt	r0, #261	; 0x105
 1005450:	fa001ed4 	blx	100cfa8 <printf>
		if (Status != XST_SUCCESS) {
 1005454:	eaffffe3 	b	10053e8 <XAxiDma_Resume+0x224>
				Status = XAxiDma_BdRingStart(TxRingPtr);
 1005458:	e2840014 	add	r0, r4, #20
 100545c:	eb000224 	bl	1005cf4 <XAxiDma_BdRingStart>
				if (Status != XST_SUCCESS) {
 1005460:	e2501000 	subs	r1, r0, #0
 1005464:	0afffff3 	beq	1005438 <XAxiDma_Resume+0x274>
 1005468:	eaffffda 	b	10053d8 <XAxiDma_Resume+0x214>
	if (InstancePtr->HasMm2S) {
 100546c:	e5942004 	ldr	r2, [r4, #4]
 1005470:	e3520000 	cmp	r2, #0
 1005474:	1affff61 	bne	1005200 <XAxiDma_Resume+0x3c>
 1005478:	eaffff69 	b	1005224 <XAxiDma_Resume+0x60>

0100547c <XAxiDma_Busy>:
 *
 *****************************************************************************/
u32 XAxiDma_Busy(XAxiDma *InstancePtr, int Direction)
{

	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 100547c:	e5903000 	ldr	r3, [r0]
 1005480:	e0811081 	add	r1, r1, r1, lsl #1
 1005484:	e0833201 	add	r3, r3, r1, lsl #4
	return *(volatile u32 *) Addr;
 1005488:	e5930004 	ldr	r0, [r3, #4]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_SR_OFFSET) &
				XAXIDMA_IDLE_MASK) ? FALSE : TRUE);
 100548c:	e2200002 	eor	r0, r0, #2
}
 1005490:	e7e000d0 	ubfx	r0, r0, #1, #1
 1005494:	e12fff1e 	bx	lr

01005498 <XAxiDma_SelectKeyHole>:
 *****************************************************************************/
int XAxiDma_SelectKeyHole(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 1005498:	e0811081 	add	r1, r1, r1, lsl #1
 100549c:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 10054a0:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10054a4:	e1a01201 	lsl	r1, r1, #4
 10054a8:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_KEYHOLE_MASK;
 10054ac:	13833008 	orrne	r3, r3, #8
	else
		Value &= ~XAXIDMA_CR_KEYHOLE_MASK;
 10054b0:	03c33008 	biceq	r3, r3, #8
	*LocalAddr = Value;
 10054b4:	e7813000 	str	r3, [r1, r0]
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;

}
 10054b8:	e3a00000 	mov	r0, #0
 10054bc:	e12fff1e 	bx	lr

010054c0 <XAxiDma_SelectCyclicMode>:
 *****************************************************************************/
int XAxiDma_SelectCyclicMode(XAxiDma *InstancePtr, int Direction, int Select)
{
	u32 Value;

	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10054c0:	e0811081 	add	r1, r1, r1, lsl #1
 10054c4:	e5900000 	ldr	r0, [r0]
				(XAXIDMA_RX_OFFSET * Direction),
				XAXIDMA_CR_OFFSET);

	if (Select)
 10054c8:	e3520000 	cmp	r2, #0
	Value = XAxiDma_ReadReg(InstancePtr->RegBase +
 10054cc:	e1a01201 	lsl	r1, r1, #4
	return *(volatile u32 *) Addr;
 10054d0:	e7913000 	ldr	r3, [r1, r0]
		Value |= XAXIDMA_CR_CYCLIC_MASK;
 10054d4:	13833010 	orrne	r3, r3, #16
	else
		Value &= ~XAXIDMA_CR_CYCLIC_MASK;
 10054d8:	03c33010 	biceq	r3, r3, #16
	*LocalAddr = Value;
 10054dc:	e7813000 	str	r3, [r1, r0]
	XAxiDma_WriteReg(InstancePtr->RegBase +
			(XAXIDMA_RX_OFFSET * Direction),
			XAXIDMA_CR_OFFSET, Value);

	return XST_SUCCESS;
}
 10054e0:	e3a00000 	mov	r0, #0
 10054e4:	e12fff1e 	bx	lr

010054e8 <XAxiDma_SimpleTransfer>:
	u32 WordBits;
	int RingIndex = 0;

	/* If Scatter Gather is included then, cannot submit
	 */
	if (XAxiDma_HasSg(InstancePtr)) {
 10054e8:	e590c010 	ldr	ip, [r0, #16]
{
 10054ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 10054f0:	e24dd00c 	sub	sp, sp, #12
	if (XAxiDma_HasSg(InstancePtr)) {
 10054f4:	e35c0000 	cmp	ip, #0
 10054f8:	1a00002f 	bne	10055bc <XAxiDma_SimpleTransfer+0xd4>
							" supported\r\n");

		return XST_FAILURE;
	}

	if(Direction == XAXIDMA_DMA_TO_DEVICE){
 10054fc:	e3530000 	cmp	r3, #0
 1005500:	1a000025 	bne	100559c <XAxiDma_SimpleTransfer+0xb4>
		if ((Length < 1) ||
 1005504:	e3520000 	cmp	r2, #0
 1005508:	0a000028 	beq	10055b0 <XAxiDma_SimpleTransfer+0xc8>
 100550c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
 1005510:	e1530002 	cmp	r3, r2
 1005514:	3a000025 	bcc	10055b0 <XAxiDma_SimpleTransfer+0xc8>
			(Length > InstancePtr->TxBdRing.MaxTransferLen)) {
			return XST_INVALID_PARAM;
		}

		if (!InstancePtr->HasMm2S) {
 1005518:	e5903004 	ldr	r3, [r0, #4]
 100551c:	e3530000 	cmp	r3, #0
 1005520:	0a00004f 	beq	1005664 <XAxiDma_SimpleTransfer+0x17c>
		}

		/* If the engine is doing transfer, cannot submit
		 */

		if(!(XAxiDma_ReadReg(InstancePtr->TxBdRing.ChanBase,
 1005524:	e5903014 	ldr	r3, [r0, #20]
	return *(volatile u32 *) Addr;
 1005528:	e593c004 	ldr	ip, [r3, #4]
 100552c:	e31c0001 	tst	ip, #1
 1005530:	1a000003 	bne	1005544 <XAxiDma_SimpleTransfer+0x5c>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1005534:	e590c000 	ldr	ip, [r0]
 1005538:	e59cc004 	ldr	ip, [ip, #4]
				XAXIDMA_SR_OFFSET) & XAXIDMA_HALTED_MASK)) {
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 100553c:	e31c0002 	tst	ip, #2
 1005540:	0a000033 	beq	1005614 <XAxiDma_SimpleTransfer+0x12c>
							"Engine is busy\r\n");
				return XST_FAILURE;
			}
		}

		if (!InstancePtr->MicroDmaMode) {
 1005544:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 1005548:	e35c0000 	cmp	ip, #0
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 100554c:	0590c028 	ldreq	ip, [r0, #40]	; 0x28
		}
		else {
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 1005550:	1300cfff 	movwne	ip, #4095	; 0xfff
			WordBits = (u32)((InstancePtr->TxBdRing.DataWidth) - 1);
 1005554:	024cc001 	subeq	ip, ip, #1
		}

		if ((BuffAddr & WordBits)) {
 1005558:	e11c0001 	tst	ip, r1
 100555c:	0a000002 	beq	100556c <XAxiDma_SimpleTransfer+0x84>

			if (!InstancePtr->TxBdRing.HasDRE) {
 1005560:	e590c024 	ldr	ip, [r0, #36]	; 0x24
 1005564:	e35c0000 	cmp	ip, #0
 1005568:	0a000038 	beq	1005650 <XAxiDma_SimpleTransfer+0x168>
		}


		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
				 XAXIDMA_DESTADDR_OFFSET, LOWER_32_BITS(BuffAddr));
		if (InstancePtr->AddrWidth > 32)
 100556c:	e590074c 	ldr	r0, [r0, #1868]	; 0x74c
	*LocalAddr = Value;
 1005570:	e5831018 	str	r1, [r3, #24]
 1005574:	e3500020 	cmp	r0, #32
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
					XAXIDMA_BUFFLEN_OFFSET, Length);

	}

	return XST_SUCCESS;
 1005578:	e3a00000 	mov	r0, #0
 100557c:	c3a01000 	movgt	r1, #0
 1005580:	c583101c 	strgt	r1, [r3, #28]
	return *(volatile u32 *) Addr;
 1005584:	e5931000 	ldr	r1, [r3]
		XAxiDma_WriteReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 1005588:	e3811001 	orr	r1, r1, #1
	*LocalAddr = Value;
 100558c:	e5831000 	str	r1, [r3]
 1005590:	e5832028 	str	r2, [r3, #40]	; 0x28
}
 1005594:	e28dd00c 	add	sp, sp, #12
 1005598:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 100559c:	e3530001 	cmp	r3, #1
	return XST_SUCCESS;
 10055a0:	11a0000c 	movne	r0, ip
	else if(Direction == XAXIDMA_DEVICE_TO_DMA){
 10055a4:	0a00000a 	beq	10055d4 <XAxiDma_SimpleTransfer+0xec>
}
 10055a8:	e28dd00c 	add	sp, sp, #12
 10055ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
			return XST_INVALID_PARAM;
 10055b0:	e3a0000f 	mov	r0, #15
}
 10055b4:	e28dd00c 	add	sp, sp, #12
 10055b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "Simple DMA mode is not"
 10055bc:	e3080d40 	movw	r0, #36160	; 0x8d40
 10055c0:	e3400105 	movt	r0, #261	; 0x105
 10055c4:	fa001e9c 	blx	100d03c <puts>
		return XST_FAILURE;
 10055c8:	e3a00001 	mov	r0, #1
}
 10055cc:	e28dd00c 	add	sp, sp, #12
 10055d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		if ((Length < 1) ||
 10055d4:	e3520000 	cmp	r2, #0
 10055d8:	0afffff4 	beq	10055b0 <XAxiDma_SimpleTransfer+0xc8>
 10055dc:	e590c09c 	ldr	ip, [r0, #156]	; 0x9c
 10055e0:	e15c0002 	cmp	ip, r2
 10055e4:	3afffff1 	bcc	10055b0 <XAxiDma_SimpleTransfer+0xc8>
		if (!InstancePtr->HasS2Mm) {
 10055e8:	e590c008 	ldr	ip, [r0, #8]
 10055ec:	e35c0000 	cmp	ip, #0
 10055f0:	0a000020 	beq	1005678 <XAxiDma_SimpleTransfer+0x190>
		if(!(XAxiDma_ReadReg(InstancePtr->RxBdRing[RingIndex].ChanBase,
 10055f4:	e5903080 	ldr	r3, [r0, #128]	; 0x80
	return *(volatile u32 *) Addr;
 10055f8:	e593c004 	ldr	ip, [r3, #4]
 10055fc:	e31c0001 	tst	ip, #1
 1005600:	1a000008 	bne	1005628 <XAxiDma_SimpleTransfer+0x140>
	return ((XAxiDma_ReadReg(InstancePtr->RegBase +
 1005604:	e590c000 	ldr	ip, [r0]
 1005608:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
			if (XAxiDma_Busy(InstancePtr,Direction)) {
 100560c:	e31c0002 	tst	ip, #2
 1005610:	1a000004 	bne	1005628 <XAxiDma_SimpleTransfer+0x140>
				xdbg_printf(XDBG_DEBUG_ERROR,
 1005614:	e3080d84 	movw	r0, #36228	; 0x8d84
 1005618:	e3400105 	movt	r0, #261	; 0x105
 100561c:	fa001e86 	blx	100d03c <puts>
				return XST_FAILURE;
 1005620:	e3a00001 	mov	r0, #1
 1005624:	eaffffdf 	b	10055a8 <XAxiDma_SimpleTransfer+0xc0>
		if (!InstancePtr->MicroDmaMode) {
 1005628:	e590c748 	ldr	ip, [r0, #1864]	; 0x748
 100562c:	e35c0000 	cmp	ip, #0
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 1005630:	0590c094 	ldreq	ip, [r0, #148]	; 0x94
			WordBits = XAXIDMA_MICROMODE_MIN_BUF_ALIGN;
 1005634:	1300cfff 	movwne	ip, #4095	; 0xfff
			 (u32)((InstancePtr->RxBdRing[RingIndex].DataWidth) - 1);
 1005638:	024cc001 	subeq	ip, ip, #1
		if ((BuffAddr & WordBits)) {
 100563c:	e11c0001 	tst	ip, r1
 1005640:	0affffc9 	beq	100556c <XAxiDma_SimpleTransfer+0x84>
			if (!InstancePtr->RxBdRing[RingIndex].HasDRE) {
 1005644:	e590c090 	ldr	ip, [r0, #144]	; 0x90
 1005648:	e35c0000 	cmp	ip, #0
 100564c:	1affffc6 	bne	100556c <XAxiDma_SimpleTransfer+0x84>
				xdbg_printf(XDBG_DEBUG_ERROR,
 1005650:	e3080d94 	movw	r0, #36244	; 0x8d94
 1005654:	e3400105 	movt	r0, #261	; 0x105
 1005658:	fa001e52 	blx	100cfa8 <printf>
				return XST_INVALID_PARAM;
 100565c:	e3a0000f 	mov	r0, #15
 1005660:	eaffffd0 	b	10055a8 <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "MM2S channel is not"
 1005664:	e3080d64 	movw	r0, #36196	; 0x8d64
 1005668:	e3400105 	movt	r0, #261	; 0x105
 100566c:	fa001e72 	blx	100d03c <puts>
			return XST_FAILURE;
 1005670:	e3a00001 	mov	r0, #1
 1005674:	eaffffcb 	b	10055a8 <XAxiDma_SimpleTransfer+0xc0>
			xdbg_printf(XDBG_DEBUG_ERROR, "S2MM channel is not"
 1005678:	e3080db8 	movw	r0, #36280	; 0x8db8
 100567c:	e58d3004 	str	r3, [sp, #4]
 1005680:	e3400105 	movt	r0, #261	; 0x105
 1005684:	fa001e6c 	blx	100d03c <puts>
			return XST_FAILURE;
 1005688:	e59d3004 	ldr	r3, [sp, #4]
 100568c:	e1a00003 	mov	r0, r3
 1005690:	eaffffc4 	b	10055a8 <XAxiDma_SimpleTransfer+0xc0>

01005694 <XAxiDma_LookupConfig>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].DeviceId == DeviceId) {
 1005694:	e30937fc 	movw	r3, #38908	; 0x97fc
 1005698:	e3403105 	movt	r3, #261	; 0x105
 100569c:	e5932000 	ldr	r2, [r3]
 10056a0:	e1500002 	cmp	r0, r2
 10056a4:	0a000004 	beq	10056bc <XAxiDma_LookupConfig+0x28>
 10056a8:	e5b32044 	ldr	r2, [r3, #68]!	; 0x44
 10056ac:	e1500002 	cmp	r0, r2
 10056b0:	01a00003 	moveq	r0, r3
 10056b4:	13a00000 	movne	r0, #0
 10056b8:	e12fff1e 	bx	lr
 10056bc:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 10056c0:	e12fff1e 	bx	lr

010056c4 <XAxiDma_LookupConfigBaseAddr>:
	u32 Index;

	CfgPtr = NULL;

	for (Index = 0; Index < XPAR_XAXIDMA_NUM_INSTANCES; Index++) {
		if (XAxiDma_ConfigTable[Index].BaseAddr == Baseaddr) {
 10056c4:	e30937fc 	movw	r3, #38908	; 0x97fc
 10056c8:	e3403105 	movt	r3, #261	; 0x105
 10056cc:	e5932004 	ldr	r2, [r3, #4]
 10056d0:	e1500002 	cmp	r0, r2
 10056d4:	0a000004 	beq	10056ec <XAxiDma_LookupConfigBaseAddr+0x28>
 10056d8:	e5932048 	ldr	r2, [r3, #72]	; 0x48
 10056dc:	e1500002 	cmp	r0, r2
 10056e0:	02830044 	addeq	r0, r3, #68	; 0x44
 10056e4:	13a00000 	movne	r0, #0
 10056e8:	e12fff1e 	bx	lr
 10056ec:	e1a00003 	mov	r0, r3
			break;
		}
	}

	return CfgPtr;
}
 10056f0:	e12fff1e 	bx	lr

010056f4 <XAxiDma_UpdateBdRingCDesc>:
	UINTPTR RegBase;
	UINTPTR BdPtr;
	int RingIndex = RingPtr->RingIndex;

	/* BD list has yet to be created for this channel */
	if (RingPtr->AllCnt == 0) {
 10056f4:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 10056f8:	e92d4010 	push	{r4, lr}
	if (RingPtr->AllCnt == 0) {
 10056fc:	e3520000 	cmp	r2, #0
 1005700:	0a000043 	beq	1005814 <XAxiDma_UpdateBdRingCDesc+0x120>

		return XST_DMA_SG_NO_LIST;
	}

	/* Do nothing if already started */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1005704:	e5902008 	ldr	r2, [r0, #8]
 1005708:	e1a03000 	mov	r3, r0
 100570c:	e3520001 	cmp	r2, #1
 1005710:	0a000027 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
		 * transferring)
		 */
		return XST_SUCCESS;
	}

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1005714:	e590c000 	ldr	ip, [r0]
 1005718:	e59c2004 	ldr	r2, [ip, #4]
 100571c:	e3120001 	tst	r2, #1
 1005720:	0a000023 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
		RegBase = RingPtr->ChanBase;

		/* Put a valid BD pointer in the current BD pointer register
		 * So, the hardware is ready to go when tail BD pointer is updated
		 */
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 1005724:	e5901048 	ldr	r1, [r0, #72]	; 0x48
	int RingIndex = RingPtr->RingIndex;
 1005728:	e5904064 	ldr	r4, [r0, #100]	; 0x64

		if (!XAxiDma_BdHwCompleted(BdPtr)) {
 100572c:	e591201c 	ldr	r2, [r1, #28]
 1005730:	e3520000 	cmp	r2, #0
 1005734:	ba000025 	blt	10057d0 <XAxiDma_UpdateBdRingCDesc+0xdc>
			if (RingPtr->IsRxChannel) {
 1005738:	e590e024 	ldr	lr, [r0, #36]	; 0x24
 100573c:	e5900004 	ldr	r0, [r0, #4]
 1005740:	e5932020 	ldr	r2, [r3, #32]
 1005744:	e041100e 	sub	r1, r1, lr
 1005748:	e5933018 	ldr	r3, [r3, #24]
 100574c:	e3500000 	cmp	r0, #0
 1005750:	e0811002 	add	r1, r1, r2
 1005754:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 1005758:	0a000017 	beq	10057bc <XAxiDma_UpdateBdRingCDesc+0xc8>
				if (!RingIndex) {
 100575c:	e3540000 	cmp	r4, #0
 1005760:	1a000030 	bne	1005828 <XAxiDma_UpdateBdRingCDesc+0x134>
					XAxiDma_WriteReg(RegBase,
							 XAXIDMA_CDESC_OFFSET,
							 (XAXIDMA_VIRT_TO_PHYS(BdPtr) & XAXIDMA_DESC_LSB_MASK));
					if (RingPtr->Addr_ext)
 1005764:	e3530000 	cmp	r3, #0
	*LocalAddr = Value;
 1005768:	e58c1008 	str	r1, [ip, #8]
 100576c:	0a000010 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1005770:	e58c400c 	str	r4, [ip, #12]
			}
		}

	}

	return XST_SUCCESS;
 1005774:	e1a00004 	mov	r0, r4
 1005778:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->IsRxChannel) {
 100577c:	e5931020 	ldr	r1, [r3, #32]
 1005780:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1005784:	e5930004 	ldr	r0, [r3, #4]
 1005788:	e5933018 	ldr	r3, [r3, #24]
 100578c:	e041100e 	sub	r1, r1, lr
 1005790:	e3500000 	cmp	r0, #0
 1005794:	e0812002 	add	r2, r1, r2
 1005798:	e3c2203f 	bic	r2, r2, #63	; 0x3f
 100579c:	0a00002b 	beq	1005850 <XAxiDma_UpdateBdRingCDesc+0x15c>
						if (!RingIndex) {
 10057a0:	e3540000 	cmp	r4, #0
 10057a4:	1a00002d 	bne	1005860 <XAxiDma_UpdateBdRingCDesc+0x16c>
							if (RingPtr->Addr_ext)
 10057a8:	e3530000 	cmp	r3, #0
 10057ac:	e58c2008 	str	r2, [ip, #8]
 10057b0:	1affffee 	bne	1005770 <XAxiDma_UpdateBdRingCDesc+0x7c>
		return XST_SUCCESS;
 10057b4:	e3a00000 	mov	r0, #0
 10057b8:	e8bd8010 	pop	{r4, pc}
				if (RingPtr->Addr_ext)
 10057bc:	e3530000 	cmp	r3, #0
 10057c0:	e58c1008 	str	r1, [ip, #8]
 10057c4:	0afffffa 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
 10057c8:	e58c000c 	str	r0, [ip, #12]
}
 10057cc:	e8bd8010 	pop	{r4, pc}
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 10057d0:	e590e028 	ldr	lr, [r0, #40]	; 0x28
		BdPtr = (UINTPTR)(void *)(RingPtr->BdaRestart);
 10057d4:	e1a02001 	mov	r2, r1
 10057d8:	ea000002 	b	10057e8 <XAxiDma_UpdateBdRingCDesc+0xf4>
				if (!XAxiDma_BdHwCompleted(BdPtr)) {
 10057dc:	e592001c 	ldr	r0, [r2, #28]
 10057e0:	e3500000 	cmp	r0, #0
 10057e4:	aaffffe4 	bge	100577c <XAxiDma_UpdateBdRingCDesc+0x88>
				BdPtr = XAxiDma_BdRingNext(RingPtr, BdPtr);
 10057e8:	e15e0002 	cmp	lr, r2
 10057ec:	85930030 	ldrhi	r0, [r3, #48]	; 0x30
 10057f0:	95932024 	ldrls	r2, [r3, #36]	; 0x24
 10057f4:	80822000 	addhi	r2, r2, r0
				if ((UINTPTR)BdPtr == (UINTPTR) RingPtr->BdaRestart) {
 10057f8:	e1520001 	cmp	r2, r1
 10057fc:	1afffff6 	bne	10057dc <XAxiDma_UpdateBdRingCDesc+0xe8>
					xdbg_printf(XDBG_DEBUG_ERROR,
 1005800:	e3080df0 	movw	r0, #36336	; 0x8df0
 1005804:	e3400105 	movt	r0, #261	; 0x105
 1005808:	fa001e0b 	blx	100d03c <puts>
					return XST_DMA_ERROR;
 100580c:	e3a00009 	mov	r0, #9
 1005810:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: no bds\r\n");
 1005814:	e3080dd8 	movw	r0, #36312	; 0x8dd8
 1005818:	e3400105 	movt	r0, #261	; 0x105
 100581c:	fa001e06 	blx	100d03c <puts>
		return XST_DMA_SG_NO_LIST;
 1005820:	e300020b 	movw	r0, #523	; 0x20b
 1005824:	e8bd8010 	pop	{r4, pc}
					if (RingPtr->Addr_ext)
 1005828:	e3530000 	cmp	r3, #0
					XAxiDma_WriteReg(RegBase,
 100582c:	e2844001 	add	r4, r4, #1
 1005830:	e78c1284 	str	r1, [ip, r4, lsl #5]
 1005834:	e1a04284 	lsl	r4, r4, #5
					if (RingPtr->Addr_ext)
 1005838:	0affffdd 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
								XAxiDma_WriteReg(RegBase,
 100583c:	e2444040 	sub	r4, r4, #64	; 0x40
 1005840:	e28cc044 	add	ip, ip, #68	; 0x44
 1005844:	e3a00000 	mov	r0, #0
 1005848:	e784000c 	str	r0, [r4, ip]
 100584c:	e8bd8010 	pop	{r4, pc}
						if (RingPtr->Addr_ext)
 1005850:	e3530000 	cmp	r3, #0
 1005854:	e58c2008 	str	r2, [ip, #8]
 1005858:	0affffd5 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
 100585c:	eaffffd9 	b	10057c8 <XAxiDma_UpdateBdRingCDesc+0xd4>
							if (RingPtr->Addr_ext)
 1005860:	e3530000 	cmp	r3, #0
							XAxiDma_WriteReg(RegBase,
 1005864:	e2844001 	add	r4, r4, #1
 1005868:	e78c2284 	str	r2, [ip, r4, lsl #5]
 100586c:	e1a04284 	lsl	r4, r4, #5
							if (RingPtr->Addr_ext)
 1005870:	0affffcf 	beq	10057b4 <XAxiDma_UpdateBdRingCDesc+0xc0>
 1005874:	eafffff0 	b	100583c <XAxiDma_UpdateBdRingCDesc+0x148>

01005878 <XAxiDma_BdRingCreate>:
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
u32 XAxiDma_BdRingCreate(XAxiDma_BdRing *RingPtr, UINTPTR PhysAddr,
			UINTPTR VirtAddr, u32 Alignment, int BdCount)
{
 1005878:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100587c:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
	int i;
	UINTPTR BdVirtAddr;
	UINTPTR BdPhysAddr;

	if (BdCount <= 0) {
 1005880:	e3560000 	cmp	r6, #0
 1005884:	da000078 	ble	1005a6c <XAxiDma_BdRingCreate+0x1f4>
	RingPtr->PreCnt = 0;
	RingPtr->PostCnt = 0;
	RingPtr->Cyclic = 0;

	/* Make sure Alignment parameter meets minimum requirements */
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 1005888:	e353003f 	cmp	r3, #63	; 0x3f
 100588c:	e1a05003 	mov	r5, r3
	RingPtr->AllCnt = 0;
 1005890:	e3a03000 	mov	r3, #0
 1005894:	e1a04000 	mov	r4, r0
 1005898:	e5803060 	str	r3, [r0, #96]	; 0x60
	RingPtr->FreeCnt = 0;
 100589c:	e5803050 	str	r3, [r0, #80]	; 0x50
	RingPtr->HwCnt = 0;
 10058a0:	e5803058 	str	r3, [r0, #88]	; 0x58
	RingPtr->PreCnt = 0;
 10058a4:	e5803054 	str	r3, [r0, #84]	; 0x54
	RingPtr->PostCnt = 0;
 10058a8:	e580305c 	str	r3, [r0, #92]	; 0x5c
	RingPtr->Cyclic = 0;
 10058ac:	e5803068 	str	r3, [r0, #104]	; 0x68
	if (Alignment < XAXIDMA_BD_MINIMUM_ALIGNMENT) {
 10058b0:	9a000059 	bls	1005a1c <XAxiDma_BdRingCreate+0x1a4>

		return XST_INVALID_PARAM;
	}

	/* Make sure Alignment is a power of 2 */
	if ((Alignment - 1) & Alignment) {
 10058b4:	e2453001 	sub	r3, r5, #1
 10058b8:	e1130005 	tst	r3, r5
 10058bc:	1a000064 	bne	1005a54 <XAxiDma_BdRingCreate+0x1dc>

		return XST_INVALID_PARAM;
	}

	/* Make sure PhysAddr and VirtAddr are on same Alignment */
	if ((PhysAddr % Alignment) || (VirtAddr % Alignment)) {
 10058c0:	e1a09001 	mov	r9, r1
 10058c4:	e1a01005 	mov	r1, r5
 10058c8:	e1a00009 	mov	r0, r9
 10058cc:	e1a07002 	mov	r7, r2
 10058d0:	fa00140b 	blx	100a904 <__aeabi_uidivmod>
 10058d4:	e3510000 	cmp	r1, #0
 10058d8:	1a000047 	bne	10059fc <XAxiDma_BdRingCreate+0x184>
 10058dc:	e1a01005 	mov	r1, r5
 10058e0:	e1a00007 	mov	r0, r7
 10058e4:	fa001406 	blx	100a904 <__aeabi_uidivmod>
 10058e8:	e2518000 	subs	r8, r1, #0
 10058ec:	1a000042 	bne	10059fc <XAxiDma_BdRingCreate+0x184>
		return XST_INVALID_PARAM;
	}

	/* Compute how many bytes will be between the start of adjacent BDs */
	RingPtr->Separation =
		(sizeof(XAxiDma_Bd) + (Alignment - 1)) & ~(Alignment - 1);
 10058f0:	e285303f 	add	r3, r5, #63	; 0x3f
 10058f4:	e2655000 	rsb	r5, r5, #0
 10058f8:	e0055003 	and	r5, r5, r3

	/* Must make sure the ring doesn't span address 0x00000000. If it does,
	 * then the next/prev BD traversal macros will fail.
	 */
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 10058fc:	e2473001 	sub	r3, r7, #1
 1005900:	e0020695 	mul	r2, r5, r6
	RingPtr->Separation =
 1005904:	e5845030 	str	r5, [r4, #48]	; 0x30
	if (VirtAddr > (VirtAddr + (RingPtr->Separation * BdCount) - 1)) {
 1005908:	e0833002 	add	r3, r3, r2
 100590c:	e1530007 	cmp	r3, r7
 1005910:	3a000049 	bcc	1005a3c <XAxiDma_BdRingCreate+0x1c4>
	 *  - Clear the entire space
	 *  - Setup each BD's next pointer with the physical address of the
	 *    next BD
	 *  - Put hardware information in each BD
	 */
	memset((void *) VirtAddr, 0, (RingPtr->Separation * BdCount));
 1005914:	e1a00007 	mov	r0, r7
 1005918:	fa001d70 	blx	100cee0 <memset>

	BdVirtAddr = VirtAddr;
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 100591c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 1005920:	e3560001 	cmp	r6, #1
	BdPhysAddr = PhysAddr + RingPtr->Separation;
 1005924:	e083a009 	add	sl, r3, r9
	for (i = 1; i < BdCount; i++) {
 1005928:	0a000055 	beq	1005a84 <XAxiDma_BdRingCreate+0x20c>
 100592c:	e1a05007 	mov	r5, r7
 1005930:	e3a0b001 	mov	fp, #1
		/* Put hardware information in the BDs
		 */
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
				(u32)RingPtr->HasStsCntrlStrm);

		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1005934:	e5940010 	ldr	r0, [r4, #16]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1005938:	e3cac03f 	bic	ip, sl, #63	; 0x3f
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 100593c:	e5943014 	ldr	r3, [r4, #20]
		    (((u32)(RingPtr->HasDRE)) << XAXIDMA_BD_HAS_DRE_SHIFT) |
		    RingPtr->DataWidth);

		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1005940:	e3a01034 	mov	r1, #52	; 0x34
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1005944:	e594200c 	ldr	r2, [r4, #12]
	for (i = 1; i < BdCount; i++) {
 1005948:	e28bb001 	add	fp, fp, #1
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 100594c:	e5858004 	str	r8, [r5, #4]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1005950:	e585c000 	str	ip, [r5]
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1005954:	e1833400 	orr	r3, r3, r0, lsl #8
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1005958:	e5852038 	str	r2, [r5, #56]	; 0x38
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 100595c:	e1a00005 	mov	r0, r5
		XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1005960:	e585303c 	str	r3, [r5, #60]	; 0x3c
		XAXIDMA_CACHE_FLUSH(BdVirtAddr);
 1005964:	eb000ee0 	bl	10094ec <Xil_DCacheFlushRange>
		BdVirtAddr += RingPtr->Separation;
 1005968:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < BdCount; i++) {
 100596c:	e156000b 	cmp	r6, fp
		BdVirtAddr += RingPtr->Separation;
 1005970:	e0855003 	add	r5, r5, r3
		BdPhysAddr += RingPtr->Separation;
 1005974:	e08aa003 	add	sl, sl, r3
	for (i = 1; i < BdCount; i++) {
 1005978:	1affffed 	bne	1005934 <XAxiDma_BdRingCreate+0xbc>
 100597c:	e1a0e005 	mov	lr, r5

	/* Setup the last BD's hardware information */
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
		(u32)RingPtr->HasStsCntrlStrm);

	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1005980:	e5941010 	ldr	r1, [r4, #16]
	/* Setup and initialize pointers and counters */
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
	RingPtr->FirstBdAddr = VirtAddr;
	RingPtr->FirstBdPhysAddr = PhysAddr;
	RingPtr->LastBdAddr = BdVirtAddr;
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 1005984:	e0853003 	add	r3, r5, r3
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 1005988:	e5942014 	ldr	r2, [r4, #20]
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 100598c:	e0433007 	sub	r3, r3, r7
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 1005990:	e594000c 	ldr	r0, [r4, #12]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 1005994:	e3c9c03f 	bic	ip, r9, #63	; 0x3f
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 1005998:	e3a08000 	mov	r8, #0
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_OFFSET,
 100599c:	e58ec000 	str	ip, [lr]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_NDESC_MSB_OFFSET,
 10059a0:	e5858004 	str	r8, [r5, #4]
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 10059a4:	e1822401 	orr	r2, r2, r1, lsl #8
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10059a8:	e3a01002 	mov	r1, #2
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_STSCNTRL_OFFSET,
 10059ac:	e5850038 	str	r0, [r5, #56]	; 0x38
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 10059b0:	e3a00040 	mov	r0, #64	; 0x40
	XAxiDma_BdWrite(BdVirtAddr, XAXIDMA_BD_HAS_DRE_OFFSET,
 10059b4:	e585203c 	str	r2, [r5, #60]	; 0x3c
	RingPtr->Length = RingPtr->LastBdAddr - RingPtr->FirstBdAddr +
 10059b8:	e584302c 	str	r3, [r4, #44]	; 0x2c
	RingPtr->FirstBdAddr = VirtAddr;
 10059bc:	e5847024 	str	r7, [r4, #36]	; 0x24
	RingPtr->FirstBdPhysAddr = PhysAddr;
 10059c0:	e5849020 	str	r9, [r4, #32]
	RingPtr->LastBdAddr = BdVirtAddr;
 10059c4:	e5845028 	str	r5, [r4, #40]	; 0x28
	RingPtr->AllCnt = BdCount;
 10059c8:	e5846060 	str	r6, [r4, #96]	; 0x60
	RingPtr->FreeCnt = BdCount;
 10059cc:	e5846050 	str	r6, [r4, #80]	; 0x50
	RingPtr->FreeHead = (XAxiDma_Bd *) VirtAddr;
 10059d0:	e5847034 	str	r7, [r4, #52]	; 0x34
	RingPtr->PreHead = (XAxiDma_Bd *) VirtAddr;
 10059d4:	e5847038 	str	r7, [r4, #56]	; 0x38
	RingPtr->HwHead = (XAxiDma_Bd *) VirtAddr;
 10059d8:	e584703c 	str	r7, [r4, #60]	; 0x3c
	RingPtr->HwTail = (XAxiDma_Bd *) VirtAddr;
 10059dc:	e5847040 	str	r7, [r4, #64]	; 0x40
	RingPtr->PostHead = (XAxiDma_Bd *) VirtAddr;
 10059e0:	e5847044 	str	r7, [r4, #68]	; 0x44
	RingPtr->BdaRestart = (XAxiDma_Bd *) VirtAddr;
 10059e4:	e5847048 	str	r7, [r4, #72]	; 0x48
	RingPtr->RunState = AXIDMA_CHANNEL_HALTED;
 10059e8:	e5841008 	str	r1, [r4, #8]
	RingPtr->CyclicBd = (XAxiDma_Bd *) malloc(sizeof(XAxiDma_Bd));
 10059ec:	fa001931 	blx	100beb8 <malloc>
 10059f0:	e584004c 	str	r0, [r4, #76]	; 0x4c

	return XST_SUCCESS;
}
 10059f4:	e1a00008 	mov	r0, r8
 10059f8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 10059fc:	e3080eac 	movw	r0, #36524	; 0x8eac
 1005a00:	e1a02007 	mov	r2, r7
 1005a04:	e1a01009 	mov	r1, r9
		return XST_INVALID_PARAM;
 1005a08:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: Physical address"
 1005a0c:	e3400105 	movt	r0, #261	; 0x105
 1005a10:	fa001d64 	blx	100cfa8 <printf>
}
 1005a14:	e1a00008 	mov	r0, r8
 1005a18:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 1005a1c:	e3080e44 	movw	r0, #36420	; 0x8e44
 1005a20:	e1a01005 	mov	r1, r5
 1005a24:	e3a02040 	mov	r2, #64	; 0x40
		return XST_INVALID_PARAM;
 1005a28:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment too "
 1005a2c:	e3400105 	movt	r0, #261	; 0x105
 1005a30:	fa001d5c 	blx	100cfa8 <printf>
}
 1005a34:	e1a00008 	mov	r0, r8
 1005a38:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1005a3c:	e3080f00 	movw	r0, #36608	; 0x8f00
		return XST_DMA_SG_LIST_ERROR;
 1005a40:	e300820e 	movw	r8, #526	; 0x20e
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: BD space cross "
 1005a44:	e3400105 	movt	r0, #261	; 0x105
 1005a48:	fa001d7b 	blx	100d03c <puts>
}
 1005a4c:	e1a00008 	mov	r0, r8
 1005a50:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1005a54:	e3080e84 	movw	r0, #36484	; 0x8e84
 1005a58:	e1a01005 	mov	r1, r5
 1005a5c:	e3400105 	movt	r0, #261	; 0x105
		return XST_INVALID_PARAM;
 1005a60:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: alignment not"
 1005a64:	fa001d4f 	blx	100cfa8 <printf>
		return XST_INVALID_PARAM;
 1005a68:	eaffffe1 	b	10059f4 <XAxiDma_BdRingCreate+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 1005a6c:	e3080e18 	movw	r0, #36376	; 0x8e18
 1005a70:	e1a01006 	mov	r1, r6
 1005a74:	e3400105 	movt	r0, #261	; 0x105
		return XST_INVALID_PARAM;
 1005a78:	e3a0800f 	mov	r8, #15
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCreate: non-positive BD"
 1005a7c:	fa001d49 	blx	100cfa8 <printf>
		return XST_INVALID_PARAM;
 1005a80:	eaffffdb 	b	10059f4 <XAxiDma_BdRingCreate+0x17c>
	for (i = 1; i < BdCount; i++) {
 1005a84:	e1a0e007 	mov	lr, r7
 1005a88:	e1a05007 	mov	r5, r7
 1005a8c:	eaffffbb 	b	1005980 <XAxiDma_BdRingCreate+0x108>

01005a90 <XAxiDma_BdRingClone>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingClone(XAxiDma_BdRing * RingPtr, XAxiDma_Bd * SrcBdPtr)
{
 1005a90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 1005a94:	e24dd044 	sub	sp, sp, #68	; 0x44
	UINTPTR CurBd;
	u32 Save;
	XAxiDma_Bd TmpBd;

	/* Can't do this function if there isn't a ring */
	if (RingPtr->AllCnt == 0) {
 1005a98:	e5905060 	ldr	r5, [r0, #96]	; 0x60
 1005a9c:	e3550000 	cmp	r5, #0
 1005aa0:	0a00003d 	beq	1005b9c <XAxiDma_BdRingClone+0x10c>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't do this function with the channel running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1005aa4:	e5903008 	ldr	r3, [r0, #8]
 1005aa8:	e1a06000 	mov	r6, r0
 1005aac:	e3530001 	cmp	r3, #1
 1005ab0:	0a00003f 	beq	1005bb4 <XAxiDma_BdRingClone+0x124>

		return XST_DEVICE_IS_STARTED;
	}

	/* Can't do this function with some of the BDs in use */
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1005ab4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
 1005ab8:	e1550003 	cmp	r5, r3
	}

	/* Make a copy of the template then modify it by clearing
	 * the complete bit in status/control field
	 */
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 1005abc:	01a0c001 	moveq	ip, r1
 1005ac0:	01a0400d 	moveq	r4, sp
 1005ac4:	028c7040 	addeq	r7, ip, #64	; 0x40
	if (RingPtr->FreeCnt != RingPtr->AllCnt) {
 1005ac8:	1a00002b 	bne	1005b7c <XAxiDma_BdRingClone+0xec>
	memcpy(&TmpBd, SrcBdPtr, sizeof(XAxiDma_Bd));
 1005acc:	e59c0000 	ldr	r0, [ip]
 1005ad0:	e28cc010 	add	ip, ip, #16
 1005ad4:	e51c100c 	ldr	r1, [ip, #-12]
 1005ad8:	e1a0e004 	mov	lr, r4
 1005adc:	e51c2008 	ldr	r2, [ip, #-8]
 1005ae0:	e2844010 	add	r4, r4, #16
 1005ae4:	e51c3004 	ldr	r3, [ip, #-4]
 1005ae8:	e15c0007 	cmp	ip, r7
 1005aec:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
 1005af0:	1afffff5 	bne	1005acc <XAxiDma_BdRingClone+0x3c>

	Save = XAxiDma_BdRead(&TmpBd, XAXIDMA_BD_STS_OFFSET);
 1005af4:	e59d301c 	ldr	r3, [sp, #28]
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);

	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1005af8:	e3550000 	cmp	r5, #0
 1005afc:	c3a05000 	movgt	r5, #0
 1005b00:	c28d7038 	addgt	r7, sp, #56	; 0x38
 1005b04:	e5964024 	ldr	r4, [r6, #36]	; 0x24
	Save &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1005b08:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(&TmpBd, XAXIDMA_BD_STS_OFFSET, Save);
 1005b0c:	e58d301c 	str	r3, [sp, #28]
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1005b10:	da000016 	ble	1005b70 <XAxiDma_BdRingClone+0xe0>
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {

		memcpy((void *)((UINTPTR)CurBd + XAXIDMA_BD_START_CLEAR),
 1005b14:	e28d3008 	add	r3, sp, #8
 1005b18:	e2842008 	add	r2, r4, #8
 1005b1c:	e593e000 	ldr	lr, [r3]
 1005b20:	e2833010 	add	r3, r3, #16
 1005b24:	e513c00c 	ldr	ip, [r3, #-12]
 1005b28:	e2822010 	add	r2, r2, #16
 1005b2c:	e5130008 	ldr	r0, [r3, #-8]
 1005b30:	e5131004 	ldr	r1, [r3, #-4]
 1005b34:	e1530007 	cmp	r3, r7
 1005b38:	e502e010 	str	lr, [r2, #-16]
 1005b3c:	e502c00c 	str	ip, [r2, #-12]
 1005b40:	e5020008 	str	r0, [r2, #-8]
 1005b44:	e5021004 	str	r1, [r2, #-4]
 1005b48:	1afffff3 	bne	1005b1c <XAxiDma_BdRingClone+0x8c>
		    (void *)((UINTPTR)(&TmpBd) + XAXIDMA_BD_START_CLEAR),
		    XAXIDMA_BD_BYTES_TO_CLEAR);

		XAXIDMA_CACHE_FLUSH(CurBd);
 1005b4c:	e1a00004 	mov	r0, r4
 1005b50:	e3a01034 	mov	r1, #52	; 0x34
 1005b54:	eb000e64 	bl	10094ec <Xil_DCacheFlushRange>
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1005b58:	e5962060 	ldr	r2, [r6, #96]	; 0x60
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1005b5c:	e2855001 	add	r5, r5, #1
 1005b60:	e5963030 	ldr	r3, [r6, #48]	; 0x30
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1005b64:	e1520005 	cmp	r2, r5
	     i < RingPtr->AllCnt; i++, CurBd += RingPtr->Separation) {
 1005b68:	e0844003 	add	r4, r4, r3
	for (i = 0, CurBd = RingPtr->FirstBdAddr;
 1005b6c:	caffffe8 	bgt	1005b14 <XAxiDma_BdRingClone+0x84>
	}

	return XST_SUCCESS;
 1005b70:	e3a00000 	mov	r0, #0
}
 1005b74:	e28dd044 	add	sp, sp, #68	; 0x44
 1005b78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: some bds already "
 1005b7c:	e3080f70 	movw	r0, #36720	; 0x8f70
 1005b80:	e1a02005 	mov	r2, r5
 1005b84:	e1a01003 	mov	r1, r3
 1005b88:	e3400105 	movt	r0, #261	; 0x105
 1005b8c:	fa001d05 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1005b90:	e300020e 	movw	r0, #526	; 0x20e
}
 1005b94:	e28dd044 	add	sp, sp, #68	; 0x44
 1005b98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: no bds\r\n");
 1005b9c:	e3080f24 	movw	r0, #36644	; 0x8f24
 1005ba0:	e3400105 	movt	r0, #261	; 0x105
 1005ba4:	fa001d24 	blx	100d03c <puts>
		return XST_DMA_SG_NO_LIST;
 1005ba8:	e300020b 	movw	r0, #523	; 0x20b
}
 1005bac:	e28dd044 	add	sp, sp, #68	; 0x44
 1005bb0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingClone: bd ring started "
 1005bb4:	e3080f3c 	movw	r0, #36668	; 0x8f3c
 1005bb8:	e3400105 	movt	r0, #261	; 0x105
 1005bbc:	fa001d1e 	blx	100d03c <puts>
		return XST_DEVICE_IS_STARTED;
 1005bc0:	e3a00005 	mov	r0, #5
 1005bc4:	eaffffea 	b	1005b74 <XAxiDma_BdRingClone+0xe4>

01005bc8 <XAxiDma_StartBdRingHw>:
int XAxiDma_StartBdRingHw(XAxiDma_BdRing * RingPtr)
{
	UINTPTR RegBase;
	int RingIndex = RingPtr->RingIndex;

	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1005bc8:	e5903000 	ldr	r3, [r0]
{
 1005bcc:	e92d4070 	push	{r4, r5, r6, lr}
	int RingIndex = RingPtr->RingIndex;
 1005bd0:	e5906064 	ldr	r6, [r0, #100]	; 0x64
	return *(volatile u32 *) Addr;
 1005bd4:	e5932004 	ldr	r2, [r3, #4]
	if (!XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1005bd8:	e3120001 	tst	r2, #1
 1005bdc:	15932000 	ldrne	r2, [r3]
		/* Start the hardware
		*/
		RegBase = RingPtr->ChanBase;
		XAxiDma_WriteReg(RegBase, XAXIDMA_CR_OFFSET,
 1005be0:	13822001 	orrne	r2, r2, #1
	*LocalAddr = Value;
 1005be4:	15832000 	strne	r2, [r3]
	return *(volatile u32 *) Addr;
 1005be8:	e5933004 	ldr	r3, [r3, #4]
			XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET)
			| XAXIDMA_CR_RUNSTOP_MASK);
	}

	if (XAxiDma_BdRingHwIsStarted(RingPtr)) {
 1005bec:	e2135001 	ands	r5, r3, #1
 1005bf0:	1a000026 	bne	1005c90 <XAxiDma_StartBdRingHw+0xc8>
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;

		/* If there are unprocessed BDs then we want the channel to begin
		 * processing right away
		 */
		if (RingPtr->HwCnt > 0) {
 1005bf4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
		RingPtr->RunState = AXIDMA_CHANNEL_NOT_HALTED;
 1005bf8:	e3a02001 	mov	r2, #1
 1005bfc:	e5802008 	str	r2, [r0, #8]
		if (RingPtr->HwCnt > 0) {
 1005c00:	e3530000 	cmp	r3, #0
 1005c04:	da00001f 	ble	1005c88 <XAxiDma_StartBdRingHw+0xc0>

			XAXIDMA_CACHE_INVALIDATE(RingPtr->HwTail);
 1005c08:	e1a04000 	mov	r4, r0
 1005c0c:	e3a01034 	mov	r1, #52	; 0x34
 1005c10:	e5900040 	ldr	r0, [r0, #64]	; 0x40
 1005c14:	eb000de7 	bl	10093b8 <Xil_DCacheInvalidateRange>
			if (RingPtr->Cyclic) {
 1005c18:	e5942068 	ldr	r2, [r4, #104]	; 0x68
 1005c1c:	e3520000 	cmp	r2, #0
 1005c20:	1a00001c 	bne	1005c98 <XAxiDma_StartBdRingHw+0xd0>
							 XAXIDMA_TDESC_MSB_OFFSET,
							 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->CyclicBd)));
				return XST_SUCCESS;
			}

			if ((XAxiDma_BdRead(RingPtr->HwTail,
 1005c24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
 1005c28:	e593101c 	ldr	r1, [r3, #28]
 1005c2c:	e3510000 	cmp	r1, #0
 1005c30:	ba000014 	blt	1005c88 <XAxiDma_StartBdRingHw+0xc0>
				    XAXIDMA_BD_STS_OFFSET) &
				XAXIDMA_BD_STS_COMPLETE_MASK) == 0) {
				if (RingPtr->IsRxChannel) {
 1005c34:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 1005c38:	e5940004 	ldr	r0, [r4, #4]
 1005c3c:	e594c020 	ldr	ip, [r4, #32]
 1005c40:	e0433001 	sub	r3, r3, r1
 1005c44:	e594e018 	ldr	lr, [r4, #24]
 1005c48:	e3500000 	cmp	r0, #0
 1005c4c:	e5941000 	ldr	r1, [r4]
 1005c50:	e083300c 	add	r3, r3, ip
 1005c54:	e3c3303f 	bic	r3, r3, #63	; 0x3f
 1005c58:	0a000007 	beq	1005c7c <XAxiDma_StartBdRingHw+0xb4>
					if (!RingIndex) {
 1005c5c:	e3560000 	cmp	r6, #0
 1005c60:	1a00001b 	bne	1005cd4 <XAxiDma_StartBdRingHw+0x10c>
						XAxiDma_WriteReg(RingPtr->ChanBase,
							XAXIDMA_TDESC_OFFSET, (XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail) & XAXIDMA_DESC_LSB_MASK));
						if (RingPtr->Addr_ext)
 1005c64:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 1005c68:	e5813010 	str	r3, [r1, #16]
 1005c6c:	0a000005 	beq	1005c88 <XAxiDma_StartBdRingHw+0xc0>
 1005c70:	e5816014 	str	r6, [r1, #20]
								 UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
				}
			}
		}

		return XST_SUCCESS;
 1005c74:	e1a00006 	mov	r0, r6
 1005c78:	e8bd8070 	pop	{r4, r5, r6, pc}
					if (RingPtr->Addr_ext)
 1005c7c:	e35e0000 	cmp	lr, #0
 1005c80:	e5813010 	str	r3, [r1, #16]
 1005c84:	1a000010 	bne	1005ccc <XAxiDma_StartBdRingHw+0x104>
		return XST_SUCCESS;
 1005c88:	e3a00000 	mov	r0, #0
 1005c8c:	e8bd8070 	pop	{r4, r5, r6, pc}
	}

	return XST_DMA_ERROR;
 1005c90:	e3a00009 	mov	r0, #9
}
 1005c94:	e8bd8070 	pop	{r4, r5, r6, pc}
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1005c98:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
 1005c9c:	e594c024 	ldr	ip, [r4, #36]	; 0x24
				if (RingPtr->Addr_ext)
 1005ca0:	e5940018 	ldr	r0, [r4, #24]
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1005ca4:	e5941020 	ldr	r1, [r4, #32]
 1005ca8:	e5942000 	ldr	r2, [r4]
 1005cac:	e043300c 	sub	r3, r3, ip
				if (RingPtr->Addr_ext)
 1005cb0:	e3500000 	cmp	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1005cb4:	e0833001 	add	r3, r3, r1
 1005cb8:	e5823010 	str	r3, [r2, #16]
				if (RingPtr->Addr_ext)
 1005cbc:	0afffff1 	beq	1005c88 <XAxiDma_StartBdRingHw+0xc0>
 1005cc0:	e5825014 	str	r5, [r2, #20]
				return XST_SUCCESS;
 1005cc4:	e1a00005 	mov	r0, r5
 1005cc8:	e8bd8070 	pop	{r4, r5, r6, pc}
 1005ccc:	e5810014 	str	r0, [r1, #20]
 1005cd0:	e8bd8070 	pop	{r4, r5, r6, pc}
						XAxiDma_WriteReg(RingPtr->ChanBase,
 1005cd4:	e2466001 	sub	r6, r6, #1
						if (RingPtr->Addr_ext)
 1005cd8:	e35e0000 	cmp	lr, #0
						XAxiDma_WriteReg(RingPtr->ChanBase,
 1005cdc:	e0816286 	add	r6, r1, r6, lsl #5
 1005ce0:	e5863048 	str	r3, [r6, #72]	; 0x48
						if (RingPtr->Addr_ext)
 1005ce4:	0affffe7 	beq	1005c88 <XAxiDma_StartBdRingHw+0xc0>
 1005ce8:	e586204c 	str	r2, [r6, #76]	; 0x4c
		return XST_SUCCESS;
 1005cec:	e1a00002 	mov	r0, r2
 1005cf0:	e8bd8070 	pop	{r4, r5, r6, pc}

01005cf4 <XAxiDma_BdRingStart>:
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingStart(XAxiDma_BdRing * RingPtr)
{
 1005cf4:	e92d4070 	push	{r4, r5, r6, lr}
 1005cf8:	e1a05000 	mov	r5, r0
	int Status;

	Status = XAxiDma_UpdateBdRingCDesc(RingPtr);
 1005cfc:	ebfffe7c 	bl	10056f4 <XAxiDma_UpdateBdRingCDesc>
	if (Status != XST_SUCCESS) {
 1005d00:	e2504000 	subs	r4, r0, #0
 1005d04:	1a000005 	bne	1005d20 <XAxiDma_BdRingStart+0x2c>
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
			"Updating Current Descriptor Failed\n\r");
		return Status;
	}

	Status = XAxiDma_StartBdRingHw(RingPtr);
 1005d08:	e1a00005 	mov	r0, r5
 1005d0c:	ebffffad 	bl	1005bc8 <XAxiDma_StartBdRingHw>
	if (Status != XST_SUCCESS) {
 1005d10:	e2504000 	subs	r4, r0, #0
 1005d14:	1a000006 	bne	1005d34 <XAxiDma_BdRingStart+0x40>
			"Starting Hardware Failed\n\r");
		return Status;
	}

	return XST_SUCCESS;
}
 1005d18:	e1a00004 	mov	r0, r4
 1005d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1005d20:	e3080fa0 	movw	r0, #36768	; 0x8fa0
 1005d24:	e3400105 	movt	r0, #261	; 0x105
 1005d28:	fa001c9e 	blx	100cfa8 <printf>
}
 1005d2c:	e1a00004 	mov	r0, r4
 1005d30:	e8bd8070 	pop	{r4, r5, r6, pc}
		 xdbg_printf(XDBG_DEBUG_ERROR, "BdRingStart: "
 1005d34:	e3080fd4 	movw	r0, #36820	; 0x8fd4
 1005d38:	e3400105 	movt	r0, #261	; 0x105
 1005d3c:	fa001c99 	blx	100cfa8 <printf>
}
 1005d40:	e1a00004 	mov	r0, r4
 1005d44:	e8bd8070 	pop	{r4, r5, r6, pc}

01005d48 <XAxiDma_BdRingSetCoalesce>:
	return *(volatile u32 *) Addr;
 1005d48:	e590c000 	ldr	ip, [r0]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	if (Counter != XAXIDMA_NO_CHANGE) {
 1005d4c:	e3710001 	cmn	r1, #1
{
 1005d50:	e92d4010 	push	{r4, lr}
 1005d54:	e59c3000 	ldr	r3, [ip]
	if (Counter != XAXIDMA_NO_CHANGE) {
 1005d58:	0a000004 	beq	1005d70 <XAxiDma_BdRingSetCoalesce+0x28>
		if ((Counter == 0) || (Counter > 0xFF)) {
 1005d5c:	e241e001 	sub	lr, r1, #1
 1005d60:	e35e00fe 	cmp	lr, #254	; 0xfe
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
			"invalid  coalescing threshold %d", (int)Counter);
			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_COALESCE_MASK) |
 1005d64:	93c338ff 	bicls	r3, r3, #16711680	; 0xff0000
 1005d68:	91833801 	orrls	r3, r3, r1, lsl #16
		if ((Counter == 0) || (Counter > 0xFF)) {
 1005d6c:	8a00000d 	bhi	1005da8 <XAxiDma_BdRingSetCoalesce+0x60>
			(Counter << XAXIDMA_COALESCE_SHIFT);
	}

	if (Timer != XAXIDMA_NO_CHANGE) {
 1005d70:	e3720001 	cmn	r2, #1
 1005d74:	0a000002 	beq	1005d84 <XAxiDma_BdRingSetCoalesce+0x3c>
		if (Timer > 0xFF) {
 1005d78:	e35200ff 	cmp	r2, #255	; 0xff
			"invalid  delay counter %d", (int)Timer);

			return XST_FAILURE;
		}

		Cr = (Cr & ~XAXIDMA_DELAY_MASK) |
 1005d7c:	97df3c12 	bfils	r3, r2, #24, #8
		if (Timer > 0xFF) {
 1005d80:	8a000002 	bhi	1005d90 <XAxiDma_BdRingSetCoalesce+0x48>
			(Timer << XAXIDMA_DELAY_SHIFT);
	}

	XAxiDma_WriteReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET, Cr);

	return XST_SUCCESS;
 1005d84:	e3a00000 	mov	r0, #0
	*LocalAddr = Value;
 1005d88:	e58c3000 	str	r3, [ip]
}
 1005d8c:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1005d90:	e3090030 	movw	r0, #36912	; 0x9030
 1005d94:	e1a01002 	mov	r1, r2
 1005d98:	e3400105 	movt	r0, #261	; 0x105
 1005d9c:	fa001c81 	blx	100cfa8 <printf>
			return XST_FAILURE;
 1005da0:	e3a00001 	mov	r0, #1
 1005da4:	e8bd8010 	pop	{r4, pc}
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingSetCoalesce: "
 1005da8:	e3080ffc 	movw	r0, #36860	; 0x8ffc
 1005dac:	e3400105 	movt	r0, #261	; 0x105
 1005db0:	fa001c7c 	blx	100cfa8 <printf>
			return XST_FAILURE;
 1005db4:	e3a00001 	mov	r0, #1
 1005db8:	e8bd8010 	pop	{r4, pc}

01005dbc <XAxiDma_BdRingGetCoalesce>:
	return *(volatile u32 *) Addr;
 1005dbc:	e5903000 	ldr	r3, [r0]
 1005dc0:	e5933000 	ldr	r3, [r3]
{
	u32 Cr;

	Cr = XAxiDma_ReadReg(RingPtr->ChanBase, XAXIDMA_CR_OFFSET);

	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1005dc4:	e7e70853 	ubfx	r0, r3, #16, #8
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1005dc8:	e1a03c23 	lsr	r3, r3, #24
	*CounterPtr = ((Cr & XAXIDMA_COALESCE_MASK) >> XAXIDMA_COALESCE_SHIFT);
 1005dcc:	e5810000 	str	r0, [r1]
	*TimerPtr = ((Cr & XAXIDMA_DELAY_MASK) >> XAXIDMA_DELAY_SHIFT);
 1005dd0:	e5823000 	str	r3, [r2]
}
 1005dd4:	e12fff1e 	bx	lr

01005dd8 <XAxiDma_BdRingAlloc>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd ** BdSetPtr)
{
 1005dd8:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1005ddc:	e251e000 	subs	lr, r1, #0
 1005de0:	da00001f 	ble	1005e64 <XAxiDma_BdRingAlloc+0x8c>

		return XST_INVALID_PARAM;
	}

	/* Enough free BDs available for the request? */
	if (RingPtr->FreeCnt < NumBd) {
 1005de4:	e590c050 	ldr	ip, [r0, #80]	; 0x50
 1005de8:	e15c000e 	cmp	ip, lr
 1005dec:	ba000015 	blt	1005e48 <XAxiDma_BdRingAlloc+0x70>
		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead forward */
	*BdSetPtr = RingPtr->FreeHead;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1005df0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->FreeCnt -= NumBd;
 1005df4:	e04cc00e 	sub	ip, ip, lr
	*BdSetPtr = RingPtr->FreeHead;
 1005df8:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1005dfc:	e5904028 	ldr	r4, [r0, #40]	; 0x28
 1005e00:	e0030e93 	mul	r3, r3, lr
	*BdSetPtr = RingPtr->FreeHead;
 1005e04:	e5821000 	str	r1, [r2]
	RingPtr->FreeCnt -= NumBd;
 1005e08:	e580c050 	str	ip, [r0, #80]	; 0x50
 1005e0c:	e0933001 	adds	r3, r3, r1
	RingPtr->PreCnt += NumBd;

	return XST_SUCCESS;
 1005e10:	e3a01000 	mov	r1, #0
 1005e14:	23a02001 	movcs	r2, #1
 1005e18:	33a02000 	movcc	r2, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1005e1c:	e1540003 	cmp	r4, r3
 1005e20:	33822001 	orrcc	r2, r2, #1
 1005e24:	e3520000 	cmp	r2, #0
 1005e28:	1590202c 	ldrne	r2, [r0, #44]	; 0x2c
 1005e2c:	10433002 	subne	r3, r3, r2
	RingPtr->PreCnt += NumBd;
 1005e30:	e5902054 	ldr	r2, [r0, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->FreeHead, NumBd);
 1005e34:	e5803034 	str	r3, [r0, #52]	; 0x34
	RingPtr->PreCnt += NumBd;
 1005e38:	e082e00e 	add	lr, r2, lr
 1005e3c:	e580e054 	str	lr, [r0, #84]	; 0x54
}
 1005e40:	e1a00001 	mov	r0, r1
 1005e44:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1005e48:	e3090088 	movw	r0, #37000	; 0x9088
 1005e4c:	e1a0200c 	mov	r2, ip
 1005e50:	e3400105 	movt	r0, #261	; 0x105
 1005e54:	fa001c53 	blx	100cfa8 <printf>
		return XST_FAILURE;
 1005e58:	e3a01001 	mov	r1, #1
}
 1005e5c:	e1a00001 	mov	r0, r1
 1005e60:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingAlloc: negative BD "
 1005e64:	e3090060 	movw	r0, #36960	; 0x9060
 1005e68:	e3400105 	movt	r0, #261	; 0x105
 1005e6c:	fa001c4d 	blx	100cfa8 <printf>
		return XST_INVALID_PARAM;
 1005e70:	e3a0100f 	mov	r1, #15
 1005e74:	eafffff1 	b	1005e40 <XAxiDma_BdRingAlloc+0x68>

01005e78 <XAxiDma_BdRingUnAlloc>:
int XAxiDma_BdRingUnAlloc(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
	XAxiDma_Bd *TmpBd;

	if (NumBd <= 0) {
 1005e78:	e251c000 	subs	ip, r1, #0
{
 1005e7c:	e92d4010 	push	{r4, lr}
	if (NumBd <= 0) {
 1005e80:	da00002d 	ble	1005f3c <XAxiDma_BdRingUnAlloc+0xc4>

		return XST_INVALID_PARAM;
	}

	/* Enough BDs in the preprocessing state for the request? */
	if (RingPtr->PreCnt < NumBd) {
 1005e84:	e5901054 	ldr	r1, [r0, #84]	; 0x54
 1005e88:	e1a03000 	mov	r3, r0
 1005e8c:	e151000c 	cmp	r1, ip
 1005e90:	ba000023 	blt	1005f24 <XAxiDma_BdRingUnAlloc+0xac>

	/* The last BD in the BD set must has the FreeHead as its next BD.
	 * Otherwise, this is not a valid operation.
	 */
	TmpBd = BdSetPtr;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, TmpBd, NumBd);
 1005e94:	e5900030 	ldr	r0, [r0, #48]	; 0x30
 1005e98:	e5934028 	ldr	r4, [r3, #40]	; 0x28
 1005e9c:	e0000c90 	mul	r0, r0, ip
 1005ea0:	e0902002 	adds	r2, r0, r2
 1005ea4:	23a0e001 	movcs	lr, #1
 1005ea8:	33a0e000 	movcc	lr, #0
 1005eac:	e1540002 	cmp	r4, r2
 1005eb0:	338ee001 	orrcc	lr, lr, #1
 1005eb4:	e35e0000 	cmp	lr, #0
 1005eb8:	1593e02c 	ldrne	lr, [r3, #44]	; 0x2c
 1005ebc:	1042200e 	subne	r2, r2, lr

	if (TmpBd != RingPtr->FreeHead) {
 1005ec0:	e593e034 	ldr	lr, [r3, #52]	; 0x34
 1005ec4:	e15e0002 	cmp	lr, r2
 1005ec8:	1a000010 	bne	1005f10 <XAxiDma_BdRingUnAlloc+0x98>

		return XST_FAILURE;
	}

	/* Set the return argument and move FreeHead backward */
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005ecc:	e593e024 	ldr	lr, [r3, #36]	; 0x24
 1005ed0:	e0522000 	subs	r2, r2, r0
 1005ed4:	33a00001 	movcc	r0, #1
 1005ed8:	23a00000 	movcs	r0, #0
	RingPtr->FreeCnt += NumBd;
	RingPtr->PreCnt -= NumBd;
 1005edc:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005ee0:	e15e0002 	cmp	lr, r2
 1005ee4:	83800001 	orrhi	r0, r0, #1
	RingPtr->FreeCnt += NumBd;
 1005ee8:	e593e050 	ldr	lr, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005eec:	e3500000 	cmp	r0, #0
	RingPtr->PreCnt -= NumBd;
 1005ef0:	e5831054 	str	r1, [r3, #84]	; 0x54
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005ef4:	1593002c 	ldrne	r0, [r3, #44]	; 0x2c
	RingPtr->FreeCnt += NumBd;
 1005ef8:	e08ec00c 	add	ip, lr, ip
 1005efc:	e583c050 	str	ip, [r3, #80]	; 0x50
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005f00:	10822000 	addne	r2, r2, r0

	return XST_SUCCESS;
 1005f04:	e3a00000 	mov	r0, #0
	XAXIDMA_RING_SEEKBACK(RingPtr, RingPtr->FreeHead, NumBd);
 1005f08:	e5832034 	str	r2, [r3, #52]	; 0x34
}
 1005f0c:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1005f10:	e3090100 	movw	r0, #37120	; 0x9100
 1005f14:	e3400105 	movt	r0, #261	; 0x105
 1005f18:	fa001c47 	blx	100d03c <puts>
		return XST_FAILURE;
 1005f1c:	e3a00001 	mov	r0, #1
 1005f20:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR,
 1005f24:	e30900d0 	movw	r0, #37072	; 0x90d0
 1005f28:	e1a0200c 	mov	r2, ip
 1005f2c:	e3400105 	movt	r0, #261	; 0x105
 1005f30:	fa001c1c 	blx	100cfa8 <printf>
		return XST_FAILURE;
 1005f34:	e3a00001 	mov	r0, #1
 1005f38:	e8bd8010 	pop	{r4, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingUnAlloc: negative BD"
 1005f3c:	e30900a8 	movw	r0, #37032	; 0x90a8
 1005f40:	e3400105 	movt	r0, #261	; 0x105
 1005f44:	fa001c17 	blx	100cfa8 <printf>
		return XST_INVALID_PARAM;
 1005f48:	e3a0000f 	mov	r0, #15
 1005f4c:	e8bd8010 	pop	{r4, pc}

01005f50 <XAxiDma_BdRingToHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingToHw(XAxiDma_BdRing * RingPtr, int NumBd,
	XAxiDma_Bd * BdSetPtr)
{
 1005f50:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	int i;
	u32 BdCr;
	u32 BdSts;
	int RingIndex = RingPtr->RingIndex;

	if (NumBd < 0) {
 1005f54:	e2516000 	subs	r6, r1, #0
{
 1005f58:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 1005f5c:	ba000069 	blt	1006108 <XAxiDma_BdRingToHw+0x1b8>

		return XST_INVALID_PARAM;
	}

	/* If the commit set is empty, do nothing */
	if (NumBd == 0) {
 1005f60:	0a000052 	beq	10060b0 <XAxiDma_BdRingToHw+0x160>
		return XST_SUCCESS;
	}

	/* Make sure we are in sync with XAxiDma_BdRingAlloc() */
	if ((RingPtr->PreCnt < NumBd) || (RingPtr->PreHead != BdSetPtr)) {
 1005f64:	e5903054 	ldr	r3, [r0, #84]	; 0x54
 1005f68:	e1a05000 	mov	r5, r0
 1005f6c:	e1530006 	cmp	r3, r6
 1005f70:	ba000051 	blt	10060bc <XAxiDma_BdRingToHw+0x16c>
 1005f74:	e5903038 	ldr	r3, [r0, #56]	; 0x38
 1005f78:	e1530002 	cmp	r3, r2
 1005f7c:	1a00004e 	bne	10060bc <XAxiDma_BdRingToHw+0x16c>
	BdSts = XAxiDma_BdGetSts(CurBdPtr);

	/* In case of Tx channel, the first BD should have been marked
	 * as start-of-frame
	 */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005f80:	e5901004 	ldr	r1, [r0, #4]
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1005f84:	e1a04002 	mov	r4, r2
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1005f88:	e592301c 	ldr	r3, [r2, #28]
	int RingIndex = RingPtr->RingIndex;
 1005f8c:	e5907064 	ldr	r7, [r0, #100]	; 0x64
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005f90:	e3510000 	cmp	r1, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 1005f94:	e5921018 	ldr	r1, [r2, #24]
	BdSts = XAxiDma_BdGetSts(CurBdPtr);
 1005f98:	e203333f 	and	r3, r3, #-67108864	; 0xfc000000
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 1005f9c:	0a00004c 	beq	10060d4 <XAxiDma_BdRingToHw+0x184>
		return XST_FAILURE;
	}

	/* Clear the completed status bit
	 */
	for (i = 0; i < NumBd - 1; i++) {
 1005fa0:	e2468001 	sub	r8, r6, #1
 1005fa4:	e3580000 	cmp	r8, #0
 1005fa8:	da00001e 	ble	1006028 <XAxiDma_BdRingToHw+0xd8>

		/* Make sure the length value in the BD is non-zero. */
		if (XAxiDma_BdGetLength(CurBdPtr,
 1005fac:	e595001c 	ldr	r0, [r5, #28]
 1005fb0:	e1110000 	tst	r1, r0
 1005fb4:	13a09000 	movne	r9, #0
 1005fb8:	1a000003 	bne	1005fcc <XAxiDma_BdRingToHw+0x7c>
 1005fbc:	ea00004b 	b	10060f0 <XAxiDma_BdRingToHw+0x1a0>
 1005fc0:	e595001c 	ldr	r0, [r5, #28]
 1005fc4:	e1110000 	tst	r1, r0
 1005fc8:	0a000048 	beq	10060f0 <XAxiDma_BdRingToHw+0x1a0>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");

			return XST_FAILURE;
		}

		BdSts &=  ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1005fcc:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

		/* Flush the current BD so DMA core could see the updates */
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1005fd0:	e1a00002 	mov	r0, r2
		XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 1005fd4:	e584301c 	str	r3, [r4, #28]
		XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1005fd8:	e3a01034 	mov	r1, #52	; 0x34
 1005fdc:	eb000d42 	bl	10094ec <Xil_DCacheFlushRange>

		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1005fe0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
	for (i = 0; i < NumBd - 1; i++) {
 1005fe4:	e2899001 	add	r9, r9, #1
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1005fe8:	e1530004 	cmp	r3, r4
 1005fec:	85953030 	ldrhi	r3, [r5, #48]	; 0x30
 1005ff0:	95954024 	ldrls	r4, [r5, #36]	; 0x24
 1005ff4:	80844003 	addhi	r4, r4, r3
	for (i = 0; i < NumBd - 1; i++) {
 1005ff8:	e1590008 	cmp	r9, r8
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 1005ffc:	e1a02004 	mov	r2, r4
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 1006000:	e5941018 	ldr	r1, [r4, #24]
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1006004:	e594301c 	ldr	r3, [r4, #28]
	for (i = 0; i < NumBd - 1; i++) {
 1006008:	baffffec 	blt	1005fc0 <XAxiDma_BdRingToHw+0x70>
	}

	/* In case of Tx channel, the last BD should have EOF bit set */
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) {
 100600c:	e5950004 	ldr	r0, [r5, #4]
 1006010:	e3500000 	cmp	r0, #0
 1006014:	1a000003 	bne	1006028 <XAxiDma_BdRingToHw+0xd8>
 1006018:	e3110301 	tst	r1, #67108864	; 0x4000000
 100601c:	0a000058 	beq	1006184 <XAxiDma_BdRingToHw+0x234>
 1006020:	e5921018 	ldr	r1, [r2, #24]
 1006024:	e1a04002 	mov	r4, r2

		return XST_FAILURE;
	}

	/* Make sure the length value in the last BD is non-zero. */
	if (XAxiDma_BdGetLength(CurBdPtr,
 1006028:	e595001c 	ldr	r0, [r5, #28]
 100602c:	e1110000 	tst	r1, r0
 1006030:	0a00002e 	beq	10060f0 <XAxiDma_BdRingToHw+0x1a0>
		return XST_FAILURE;
	}

	/* The last BD should also have the completed status bit cleared
	 */
	BdSts &= ~XAXIDMA_BD_STS_COMPLETE_MASK;
 1006034:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);

	/* Flush the last BD so DMA core could see the updates */
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1006038:	e3a01034 	mov	r1, #52	; 0x34
	XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 100603c:	e584301c 	str	r3, [r4, #28]
	XAXIDMA_CACHE_FLUSH(CurBdPtr);
 1006040:	e1a00002 	mov	r0, r2
 1006044:	e58d2004 	str	r2, [sp, #4]
 1006048:	eb000d27 	bl	10094ec <Xil_DCacheFlushRange>
	DATA_SYNC;
 100604c:	f57ff04f 	dsb	sy

	/* This set has completed pre-processing, adjust ring pointers and
	 * counters
	 */
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1006050:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1006054:	e5950038 	ldr	r0, [r5, #56]	; 0x38
 1006058:	e595c028 	ldr	ip, [r5, #40]	; 0x28
 100605c:	e59d2004 	ldr	r2, [sp, #4]
 1006060:	e0030693 	mul	r3, r3, r6
	RingPtr->PreCnt -= NumBd;
	RingPtr->HwTail = CurBdPtr;
 1006064:	e5852040 	str	r2, [r5, #64]	; 0x40
 1006068:	e0933000 	adds	r3, r3, r0
	RingPtr->HwCnt += NumBd;

	/* If it is running, signal the engine to begin processing */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 100606c:	e5950008 	ldr	r0, [r5, #8]
 1006070:	23a01001 	movcs	r1, #1
 1006074:	33a01000 	movcc	r1, #0
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1006078:	e15c0003 	cmp	ip, r3
 100607c:	33811001 	orrcc	r1, r1, #1
 1006080:	e3510000 	cmp	r1, #0
 1006084:	1595102c 	ldrne	r1, [r5, #44]	; 0x2c
 1006088:	10433001 	subne	r3, r3, r1
	RingPtr->PreCnt -= NumBd;
 100608c:	e5951054 	ldr	r1, [r5, #84]	; 0x54
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PreHead, NumBd);
 1006090:	e5853038 	str	r3, [r5, #56]	; 0x38
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1006094:	e3500001 	cmp	r0, #1
	RingPtr->HwCnt += NumBd;
 1006098:	e5953058 	ldr	r3, [r5, #88]	; 0x58
	RingPtr->PreCnt -= NumBd;
 100609c:	e0411006 	sub	r1, r1, r6
 10060a0:	e5851054 	str	r1, [r5, #84]	; 0x54
	RingPtr->HwCnt += NumBd;
 10060a4:	e0836006 	add	r6, r3, r6
 10060a8:	e5856058 	str	r6, [r5, #88]	; 0x58
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 10060ac:	0a00001a 	beq	100611c <XAxiDma_BdRingToHw+0x1cc>
		return XST_SUCCESS;
 10060b0:	e3a00000 	mov	r0, #0
								UPPER_32_BITS(XAXIDMA_VIRT_TO_PHYS(RingPtr->HwTail)));
			}
	}

	return XST_SUCCESS;
}
 10060b4:	e28dd00c 	add	sp, sp, #12
 10060b8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "Bd ring has problems\r\n");
 10060bc:	e309014c 	movw	r0, #37196	; 0x914c
 10060c0:	e3400105 	movt	r0, #261	; 0x105
 10060c4:	fa001bdc 	blx	100d03c <puts>
		return XST_DMA_SG_LIST_ERROR;
 10060c8:	e300020e 	movw	r0, #526	; 0x20e
}
 10060cc:	e28dd00c 	add	sp, sp, #12
 10060d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
	if (!(RingPtr->IsRxChannel) && !(BdCr & XAXIDMA_BD_CTRL_TXSOF_MASK)) {
 10060d4:	e3110302 	tst	r1, #134217728	; 0x8000000
 10060d8:	0a000024 	beq	1006170 <XAxiDma_BdRingToHw+0x220>
	for (i = 0; i < NumBd - 1; i++) {
 10060dc:	e2468001 	sub	r8, r6, #1
 10060e0:	e3580000 	cmp	r8, #0
	BdCr = XAxiDma_BdGetCtrl(CurBdPtr);
 10060e4:	d2011303 	andle	r1, r1, #201326592	; 0xc000000
	for (i = 0; i < NumBd - 1; i++) {
 10060e8:	caffffaf 	bgt	1005fac <XAxiDma_BdRingToHw+0x5c>
 10060ec:	eaffffc9 	b	1006018 <XAxiDma_BdRingToHw+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "0 length bd\r\n");
 10060f0:	e3090184 	movw	r0, #37252	; 0x9184
 10060f4:	e3400105 	movt	r0, #261	; 0x105
 10060f8:	fa001bcf 	blx	100d03c <puts>
			return XST_FAILURE;
 10060fc:	e3a00001 	mov	r0, #1
}
 1006100:	e28dd00c 	add	sp, sp, #12
 1006104:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingToHw: negative BD number "
 1006108:	e3090128 	movw	r0, #37160	; 0x9128
 100610c:	e3400105 	movt	r0, #261	; 0x105
 1006110:	fa001ba4 	blx	100cfa8 <printf>
		return XST_INVALID_PARAM;
 1006114:	e3a0000f 	mov	r0, #15
 1006118:	eaffffeb 	b	10060cc <XAxiDma_BdRingToHw+0x17c>
			if (RingPtr->Cyclic) {
 100611c:	e5952068 	ldr	r2, [r5, #104]	; 0x68
 1006120:	e5951000 	ldr	r1, [r5]
 1006124:	e5953020 	ldr	r3, [r5, #32]
 1006128:	e3520000 	cmp	r2, #0
 100612c:	e595c024 	ldr	ip, [r5, #36]	; 0x24
 1006130:	e595e018 	ldr	lr, [r5, #24]
 1006134:	1a000017 	bne	1006198 <XAxiDma_BdRingToHw+0x248>
			if (RingPtr->IsRxChannel) {
 1006138:	e5950004 	ldr	r0, [r5, #4]
 100613c:	e043300c 	sub	r3, r3, ip
 1006140:	e0834004 	add	r4, r3, r4
 1006144:	e3c4403f 	bic	r4, r4, #63	; 0x3f
 1006148:	e3500000 	cmp	r0, #0
 100614c:	0a00001a 	beq	10061bc <XAxiDma_BdRingToHw+0x26c>
				if (!RingIndex) {
 1006150:	e3570000 	cmp	r7, #0
 1006154:	1a00001d 	bne	10061d0 <XAxiDma_BdRingToHw+0x280>
					if (RingPtr->Addr_ext)
 1006158:	e35e0000 	cmp	lr, #0
	*LocalAddr = Value;
 100615c:	e5814010 	str	r4, [r1, #16]
	return XST_SUCCESS;
 1006160:	11a00007 	movne	r0, r7
 1006164:	15817014 	strne	r7, [r1, #20]
					if (RingPtr->Addr_ext)
 1006168:	1affffd7 	bne	10060cc <XAxiDma_BdRingToHw+0x17c>
 100616c:	eaffffcf 	b	10060b0 <XAxiDma_BdRingToHw+0x160>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx first BD does not have "
 1006170:	e3090164 	movw	r0, #37220	; 0x9164
 1006174:	e3400105 	movt	r0, #261	; 0x105
 1006178:	fa001baf 	blx	100d03c <puts>
		return XST_FAILURE;
 100617c:	e3a00001 	mov	r0, #1
 1006180:	eaffffd1 	b	10060cc <XAxiDma_BdRingToHw+0x17c>
		xdbg_printf(XDBG_DEBUG_ERROR, "Tx last BD does not have "
 1006184:	e3090194 	movw	r0, #37268	; 0x9194
 1006188:	e3400105 	movt	r0, #261	; 0x105
 100618c:	fa001baa 	blx	100d03c <puts>
		return XST_FAILURE;
 1006190:	e3a00001 	mov	r0, #1
 1006194:	eaffffcc 	b	10060cc <XAxiDma_BdRingToHw+0x17c>
				XAxiDma_WriteReg(RingPtr->ChanBase,
 1006198:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
				if (RingPtr->Addr_ext)
 100619c:	e35e0000 	cmp	lr, #0
 10061a0:	13a00000 	movne	r0, #0
				XAxiDma_WriteReg(RingPtr->ChanBase,
 10061a4:	e042c00c 	sub	ip, r2, ip
 10061a8:	e08c3003 	add	r3, ip, r3
 10061ac:	e5813010 	str	r3, [r1, #16]
 10061b0:	15810014 	strne	r0, [r1, #20]
				if (RingPtr->Addr_ext)
 10061b4:	1affffc4 	bne	10060cc <XAxiDma_BdRingToHw+0x17c>
 10061b8:	eaffffbc 	b	10060b0 <XAxiDma_BdRingToHw+0x160>
				if (RingPtr->Addr_ext)
 10061bc:	e35e0000 	cmp	lr, #0
 10061c0:	e5814010 	str	r4, [r1, #16]
 10061c4:	15810014 	strne	r0, [r1, #20]
 10061c8:	1affffbf 	bne	10060cc <XAxiDma_BdRingToHw+0x17c>
 10061cc:	eaffffb7 	b	10060b0 <XAxiDma_BdRingToHw+0x160>
					XAxiDma_WriteReg(RingPtr->ChanBase,
 10061d0:	e2477001 	sub	r7, r7, #1
					if (RingPtr->Addr_ext)
 10061d4:	e35e0000 	cmp	lr, #0
					XAxiDma_WriteReg(RingPtr->ChanBase,
 10061d8:	e0811287 	add	r1, r1, r7, lsl #5
	return XST_SUCCESS;
 10061dc:	11a00002 	movne	r0, r2
 10061e0:	e5814048 	str	r4, [r1, #72]	; 0x48
 10061e4:	1581204c 	strne	r2, [r1, #76]	; 0x4c
					if (RingPtr->Addr_ext)
 10061e8:	1affffb7 	bne	10060cc <XAxiDma_BdRingToHw+0x17c>
 10061ec:	eaffffaf 	b	10060b0 <XAxiDma_BdRingToHw+0x160>

010061f0 <XAxiDma_BdRingFromHw>:
 *		This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
int XAxiDma_BdRingFromHw(XAxiDma_BdRing * RingPtr, int BdLimit,
			     XAxiDma_Bd ** BdSetPtr)
{
 10061f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10061f4:	e1a09002 	mov	r9, r2
	BdPartialCount = 0;
	BdSts = 0;
	BdCr = 0;

	/* If no BDs in work group, then there's nothing to search */
	if (RingPtr->HwCnt == 0) {
 10061f8:	e5908058 	ldr	r8, [r0, #88]	; 0x58
 10061fc:	e3580000 	cmp	r8, #0
 1006200:	0a00004c 	beq	1006338 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}

	if (BdLimit > RingPtr->HwCnt) {
 1006204:	e1580001 	cmp	r8, r1
 1006208:	a1a08001 	movge	r8, r1
	 *    BD.
	 *  - RingPtr->HwTail is reached
	 *  - The number of requested BDs has been processed
	 */

	while (BdCount < BdLimit) {
 100620c:	e3580000 	cmp	r8, #0
 1006210:	da000048 	ble	1006338 <XAxiDma_BdRingFromHw+0x148>
	CurBdPtr = RingPtr->HwHead;
 1006214:	e3a07000 	mov	r7, #0
 1006218:	e1a05000 	mov	r5, r0
 100621c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
 1006220:	e1a06007 	mov	r6, r7
 1006224:	ea00000f 	b	1006268 <XAxiDma_BdRingFromHw+0x78>
		 * For tx BDs, EOF bit is in the control word
		 * For rx BDs, EOF bit is in the status word
		 */
		if (((!(RingPtr->IsRxChannel) &&
		(BdCr & XAXIDMA_BD_CTRL_TXEOF_MASK)) ||
		((RingPtr->IsRxChannel) && (BdSts &
 1006228:	e3130301 	tst	r3, #67108864	; 0x4000000
 100622c:	0a00001b 	beq	10062a0 <XAxiDma_BdRingFromHw+0xb0>
		}
		else {
			BdPartialCount++;
		}

		if (RingPtr->Cyclic) {
 1006230:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount = 0;
 1006234:	e3a07000 	mov	r7, #0
		if (RingPtr->Cyclic) {
 1006238:	e3520000 	cmp	r2, #0
 100623c:	1a00001b 	bne	10062b0 <XAxiDma_BdRingFromHw+0xc0>
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
		}

		/* Reached the end of the work group */
		if (CurBdPtr == RingPtr->HwTail) {
 1006240:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 1006244:	e1530004 	cmp	r3, r4
 1006248:	0a000020 	beq	10062d0 <XAxiDma_BdRingFromHw+0xe0>
			break;
		}

		/* Move on to the next BD in work group */
		CurBdPtr = (XAxiDma_Bd *)((void *)XAxiDma_BdRingNext(RingPtr, CurBdPtr));
 100624c:	e5953028 	ldr	r3, [r5, #40]	; 0x28
 1006250:	e1540003 	cmp	r4, r3
 1006254:	35953030 	ldrcc	r3, [r5, #48]	; 0x30
 1006258:	25954024 	ldrcs	r4, [r5, #36]	; 0x24
 100625c:	30844003 	addcc	r4, r4, r3
	while (BdCount < BdLimit) {
 1006260:	e1580006 	cmp	r8, r6
 1006264:	0a000019 	beq	10062d0 <XAxiDma_BdRingFromHw+0xe0>
		XAXIDMA_CACHE_INVALIDATE(CurBdPtr);
 1006268:	e3a01034 	mov	r1, #52	; 0x34
 100626c:	e1a00004 	mov	r0, r4
 1006270:	eb000c50 	bl	10093b8 <Xil_DCacheInvalidateRange>
		BdSts = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_STS_OFFSET);
 1006274:	e594301c 	ldr	r3, [r4, #28]
 1006278:	e284001c 	add	r0, r4, #28
		BdCr = XAxiDma_BdRead(CurBdPtr, XAXIDMA_BD_CTRL_LEN_OFFSET);
 100627c:	e5941018 	ldr	r1, [r4, #24]
		if (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)) {
 1006280:	e3530000 	cmp	r3, #0
 1006284:	aa000011 	bge	10062d0 <XAxiDma_BdRingFromHw+0xe0>
		if (((!(RingPtr->IsRxChannel) &&
 1006288:	e5952004 	ldr	r2, [r5, #4]
		BdCount++;
 100628c:	e2866001 	add	r6, r6, #1
		if (((!(RingPtr->IsRxChannel) &&
 1006290:	e3520000 	cmp	r2, #0
 1006294:	1affffe3 	bne	1006228 <XAxiDma_BdRingFromHw+0x38>
 1006298:	e3110301 	tst	r1, #67108864	; 0x4000000
 100629c:	1affffe3 	bne	1006230 <XAxiDma_BdRingFromHw+0x40>
		if (RingPtr->Cyclic) {
 10062a0:	e5952068 	ldr	r2, [r5, #104]	; 0x68
			BdPartialCount++;
 10062a4:	e2877001 	add	r7, r7, #1
		if (RingPtr->Cyclic) {
 10062a8:	e3520000 	cmp	r2, #0
 10062ac:	0affffe3 	beq	1006240 <XAxiDma_BdRingFromHw+0x50>
			BdSts = BdSts & ~XAXIDMA_BD_STS_COMPLETE_MASK;
 10062b0:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 10062b4:	e3a01034 	mov	r1, #52	; 0x34
			XAxiDma_BdWrite(CurBdPtr, XAXIDMA_BD_STS_OFFSET, BdSts);
 10062b8:	e5803000 	str	r3, [r0]
			XAXIDMA_CACHE_FLUSH(CurBdPtr);
 10062bc:	e1a00004 	mov	r0, r4
 10062c0:	eb000c89 	bl	10094ec <Xil_DCacheFlushRange>
		if (CurBdPtr == RingPtr->HwTail) {
 10062c4:	e5953040 	ldr	r3, [r5, #64]	; 0x40
 10062c8:	e1530004 	cmp	r3, r4
 10062cc:	1affffde 	bne	100624c <XAxiDma_BdRingFromHw+0x5c>
	BdCount -= BdPartialCount;

	/* If BdCount is non-zero then BDs were found to return. Set return
	 * parameters, update pointers and counters, return success
	 */
	if (BdCount) {
 10062d0:	e0560007 	subs	r0, r6, r7
 10062d4:	0a000017 	beq	1006338 <XAxiDma_BdRingFromHw+0x148>
		*BdSetPtr = RingPtr->HwHead;
		if (!RingPtr->Cyclic) {
 10062d8:	e5953068 	ldr	r3, [r5, #104]	; 0x68
		*BdSetPtr = RingPtr->HwHead;
 10062dc:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
		if (!RingPtr->Cyclic) {
 10062e0:	e3530000 	cmp	r3, #0
		*BdSetPtr = RingPtr->HwHead;
 10062e4:	e5892000 	str	r2, [r9]
		if (!RingPtr->Cyclic) {
 10062e8:	1a000005 	bne	1006304 <XAxiDma_BdRingFromHw+0x114>
			RingPtr->HwCnt -= BdCount;
 10062ec:	e5951058 	ldr	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 10062f0:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
			RingPtr->HwCnt -= BdCount;
 10062f4:	e0411000 	sub	r1, r1, r0
			RingPtr->PostCnt += BdCount;
 10062f8:	e0833000 	add	r3, r3, r0
			RingPtr->HwCnt -= BdCount;
 10062fc:	e5851058 	str	r1, [r5, #88]	; 0x58
			RingPtr->PostCnt += BdCount;
 1006300:	e585305c 	str	r3, [r5, #92]	; 0x5c
		}
		XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->HwHead, BdCount);
 1006304:	e5953030 	ldr	r3, [r5, #48]	; 0x30
 1006308:	e5951028 	ldr	r1, [r5, #40]	; 0x28
 100630c:	e0030093 	mul	r3, r3, r0
 1006310:	e0933002 	adds	r3, r3, r2
 1006314:	23a02001 	movcs	r2, #1
 1006318:	33a02000 	movcc	r2, #0
 100631c:	e1510003 	cmp	r1, r3
 1006320:	33822001 	orrcc	r2, r2, #1
 1006324:	e3520000 	cmp	r2, #0
 1006328:	1595202c 	ldrne	r2, [r5, #44]	; 0x2c
 100632c:	10433002 	subne	r3, r3, r2
 1006330:	e585303c 	str	r3, [r5, #60]	; 0x3c
	else {
		*BdSetPtr = (XAxiDma_Bd *)NULL;

		return 0;
	}
}
 1006334:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		*BdSetPtr = (XAxiDma_Bd *)NULL;
 1006338:	e3a00000 	mov	r0, #0
 100633c:	e5890000 	str	r0, [r9]
		return 0;
 1006340:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

01006344 <XAxiDma_BdRingFree>:
 *
 *****************************************************************************/
int XAxiDma_BdRingFree(XAxiDma_BdRing * RingPtr, int NumBd,
		      XAxiDma_Bd * BdSetPtr)
{
	if (NumBd < 0) {
 1006344:	e251c000 	subs	ip, r1, #0
{
 1006348:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 100634c:	e24dd00c 	sub	sp, sp, #12
	if (NumBd < 0) {
 1006350:	ba000023 	blt	10063e4 <XAxiDma_BdRingFree+0xa0>
	}

	/* If the BD Set to free is empty, do nothing
	 */
	if (NumBd == 0) {
		return XST_SUCCESS;
 1006354:	01a0000c 	moveq	r0, ip
	if (NumBd == 0) {
 1006358:	0a000017 	beq	10063bc <XAxiDma_BdRingFree+0x78>
	}

	/* Make sure we are in sync with XAxiDma_BdRingFromHw() */
	if ((RingPtr->PostCnt < NumBd) || (RingPtr->PostHead != BdSetPtr)) {
 100635c:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
 1006360:	e5903044 	ldr	r3, [r0, #68]	; 0x44
 1006364:	e151000c 	cmp	r1, ip
 1006368:	ba000015 	blt	10063c4 <XAxiDma_BdRingFree+0x80>
 100636c:	e1520003 	cmp	r2, r3
 1006370:	1a000013 	bne	10063c4 <XAxiDma_BdRingFree+0x80>
	}

	/* Update pointers and counters */
	RingPtr->FreeCnt += NumBd;
	RingPtr->PostCnt -= NumBd;
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1006374:	e5903030 	ldr	r3, [r0, #48]	; 0x30
	RingPtr->PostCnt -= NumBd;
 1006378:	e041100c 	sub	r1, r1, ip
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 100637c:	e590e028 	ldr	lr, [r0, #40]	; 0x28
	RingPtr->PostCnt -= NumBd;
 1006380:	e580105c 	str	r1, [r0, #92]	; 0x5c
	RingPtr->FreeCnt += NumBd;
 1006384:	e5901050 	ldr	r1, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1006388:	e0030c93 	mul	r3, r3, ip
	RingPtr->FreeCnt += NumBd;
 100638c:	e081c00c 	add	ip, r1, ip
 1006390:	e580c050 	str	ip, [r0, #80]	; 0x50
	XAXIDMA_RING_SEEKAHEAD(RingPtr, RingPtr->PostHead, NumBd);
 1006394:	e0932002 	adds	r2, r3, r2
 1006398:	23a03001 	movcs	r3, #1
 100639c:	33a03000 	movcc	r3, #0
 10063a0:	e15e0002 	cmp	lr, r2
 10063a4:	33833001 	orrcc	r3, r3, #1
 10063a8:	e3530000 	cmp	r3, #0
 10063ac:	1590302c 	ldrne	r3, [r0, #44]	; 0x2c
 10063b0:	10422003 	subne	r2, r2, r3
 10063b4:	e5802044 	str	r2, [r0, #68]	; 0x44

	return XST_SUCCESS;
 10063b8:	e3a00000 	mov	r0, #0
}
 10063bc:	e28dd00c 	add	sp, sp, #12
 10063c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingFree: Error free BDs: "
 10063c4:	e30901d4 	movw	r0, #37332	; 0x91d4
 10063c8:	e58d2000 	str	r2, [sp]
 10063cc:	e3400105 	movt	r0, #261	; 0x105
 10063d0:	e1a0200c 	mov	r2, ip
 10063d4:	fa001af3 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 10063d8:	e300020e 	movw	r0, #526	; 0x20e
}
 10063dc:	e28dd00c 	add	sp, sp, #12
 10063e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
		xdbg_printf(XDBG_DEBUG_ERROR,
 10063e4:	e30901b4 	movw	r0, #37300	; 0x91b4
 10063e8:	e3400105 	movt	r0, #261	; 0x105
 10063ec:	fa001aed 	blx	100cfa8 <printf>
		return XST_INVALID_PARAM;
 10063f0:	e3a0000f 	mov	r0, #15
 10063f4:	eafffff0 	b	10063bc <XAxiDma_BdRingFree+0x78>

010063f8 <XAxiDma_BdRingCheck>:
	u32 AddrV;
	u32 AddrP;
	int i;

	/* Is the list created */
	if (RingPtr->AllCnt == 0) {
 10063f8:	e5902060 	ldr	r2, [r0, #96]	; 0x60
{
 10063fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (RingPtr->AllCnt == 0) {
 1006400:	e3520000 	cmp	r2, #0
 1006404:	0a000058 	beq	100656c <XAxiDma_BdRingCheck+0x174>

		return XST_DMA_SG_NO_LIST;
	}

	/* Can't check if channel is running */
	if (RingPtr->RunState == AXIDMA_CHANNEL_NOT_HALTED) {
 1006408:	e5903008 	ldr	r3, [r0, #8]
 100640c:	e1a04000 	mov	r4, r0
 1006410:	e3530001 	cmp	r3, #1
 1006414:	0a00005f 	beq	1006598 <XAxiDma_BdRingCheck+0x1a0>

		return XST_IS_STARTED;
	}

	/* RunState doesn't make sense */
	else if (RingPtr->RunState != AXIDMA_CHANNEL_HALTED) {
 1006418:	e5903008 	ldr	r3, [r0, #8]
 100641c:	e3530002 	cmp	r3, #2
 1006420:	1a000045 	bne	100653c <XAxiDma_BdRingCheck+0x144>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal pointers point to correct memory space */
	AddrV = (UINTPTR) RingPtr->FreeHead;
 1006424:	e5901034 	ldr	r1, [r0, #52]	; 0x34
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1006428:	e5905024 	ldr	r5, [r0, #36]	; 0x24
 100642c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
 1006430:	e1550001 	cmp	r5, r1
 1006434:	8a000034 	bhi	100650c <XAxiDma_BdRingCheck+0x114>
 1006438:	e1510003 	cmp	r1, r3
 100643c:	8a000032 	bhi	100650c <XAxiDma_BdRingCheck+0x114>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PreHead;
 1006440:	e5901038 	ldr	r1, [r0, #56]	; 0x38
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1006444:	e1550001 	cmp	r5, r1
 1006448:	91510003 	cmpls	r1, r3
 100644c:	8a000040 	bhi	1006554 <XAxiDma_BdRingCheck+0x15c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwHead;
 1006450:	e590103c 	ldr	r1, [r0, #60]	; 0x3c
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1006454:	e1510003 	cmp	r1, r3
 1006458:	91550001 	cmpls	r5, r1
 100645c:	8a000047 	bhi	1006580 <XAxiDma_BdRingCheck+0x188>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->HwTail;
 1006460:	e5901040 	ldr	r1, [r0, #64]	; 0x40
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1006464:	e1510003 	cmp	r1, r3
 1006468:	91550001 	cmpls	r5, r1
 100646c:	8a00002c 	bhi	1006524 <XAxiDma_BdRingCheck+0x12c>
			(unsigned int)RingPtr->LastBdAddr);

		return XST_DMA_SG_LIST_ERROR;
	}

	AddrV = (UINTPTR) RingPtr->PostHead;
 1006470:	e5901044 	ldr	r1, [r0, #68]	; 0x44
	if ((AddrV < RingPtr->FirstBdAddr) || (AddrV > RingPtr->LastBdAddr)) {
 1006474:	e1510003 	cmp	r1, r3
 1006478:	91550001 	cmpls	r5, r1
 100647c:	8a00004a 	bhi	10065ac <XAxiDma_BdRingCheck+0x1b4>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify internal counters add up */
	if ((RingPtr->HwCnt + RingPtr->PreCnt + RingPtr->FreeCnt +
 1006480:	e5903058 	ldr	r3, [r0, #88]	; 0x58
 1006484:	e590c054 	ldr	ip, [r0, #84]	; 0x54
 1006488:	e5900050 	ldr	r0, [r0, #80]	; 0x50
 100648c:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
 1006490:	e083300c 	add	r3, r3, ip
 1006494:	e0833000 	add	r3, r3, r0
 1006498:	e0833001 	add	r3, r3, r1
 100649c:	e1520003 	cmp	r2, r3
 10064a0:	1a000050 	bne	10065e8 <XAxiDma_BdRingCheck+0x1f0>
		return XST_DMA_SG_LIST_ERROR;
	}

	/* Verify BDs are linked correctly */
	AddrV = RingPtr->FirstBdAddr;
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 10064a4:	e5946020 	ldr	r6, [r4, #32]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10064a8:	e3520001 	cmp	r2, #1
	AddrP = RingPtr->FirstBdPhysAddr + RingPtr->Separation;
 10064ac:	e5942030 	ldr	r2, [r4, #48]	; 0x30
 10064b0:	e0866002 	add	r6, r6, r2
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10064b4:	da000042 	ble	10065c4 <XAxiDma_BdRingCheck+0x1cc>
 10064b8:	e3a07001 	mov	r7, #1
 10064bc:	ea000005 	b	10064d8 <XAxiDma_BdRingCheck+0xe0>
 10064c0:	e5942060 	ldr	r2, [r4, #96]	; 0x60

			return XST_DMA_SG_LIST_ERROR;
		}

		/* Move on to next BD */
		AddrV += RingPtr->Separation;
 10064c4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10064c8:	e1520007 	cmp	r2, r7
		AddrV += RingPtr->Separation;
 10064cc:	e0855003 	add	r5, r5, r3
		AddrP += RingPtr->Separation;
 10064d0:	e0866003 	add	r6, r6, r3
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10064d4:	da00003a 	ble	10065c4 <XAxiDma_BdRingCheck+0x1cc>
		XAXIDMA_CACHE_INVALIDATE(AddrV);
 10064d8:	e3a01034 	mov	r1, #52	; 0x34
 10064dc:	e1a00005 	mov	r0, r5
 10064e0:	eb000bb4 	bl	10093b8 <Xil_DCacheInvalidateRange>
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10064e4:	e5951000 	ldr	r1, [r5]
	for (i = 1; i < RingPtr->AllCnt; i++) {
 10064e8:	e2877001 	add	r7, r7, #1
		if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) != AddrP) {
 10064ec:	e1510006 	cmp	r1, r6
 10064f0:	0afffff2 	beq	10064c0 <XAxiDma_BdRingCheck+0xc8>
			xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Next Bd "
 10064f4:	e30903fc 	movw	r0, #37884	; 0x93fc
 10064f8:	e1a02006 	mov	r2, r6
 10064fc:	e3400105 	movt	r0, #261	; 0x105
 1006500:	fa001aa8 	blx	100cfa8 <printf>
			return XST_DMA_SG_LIST_ERROR;
 1006504:	e300020e 	movw	r0, #526	; 0x20e
 1006508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: FreeHead wrong "
 100650c:	e309029c 	movw	r0, #37532	; 0x929c
 1006510:	e1a02005 	mov	r2, r5
 1006514:	e3400105 	movt	r0, #261	; 0x105
 1006518:	fa001aa2 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 100651c:	e300020e 	movw	r0, #526	; 0x20e
 1006520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwTail wrong %x, "
 1006524:	e3090358 	movw	r0, #37720	; 0x9358
 1006528:	e1a02005 	mov	r2, r5
 100652c:	e3400105 	movt	r0, #261	; 0x105
 1006530:	fa001a9c 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1006534:	e300020e 	movw	r0, #526	; 0x20e
 1006538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: unknown BD ring "
 100653c:	e5901008 	ldr	r1, [r0, #8]
 1006540:	e3090274 	movw	r0, #37492	; 0x9274
 1006544:	e3400105 	movt	r0, #261	; 0x105
 1006548:	fa001a96 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 100654c:	e300020e 	movw	r0, #526	; 0x20e
 1006550:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PreHead wrong %x, "
 1006554:	e30902dc 	movw	r0, #37596	; 0x92dc
 1006558:	e1a02005 	mov	r2, r5
 100655c:	e3400105 	movt	r0, #261	; 0x105
 1006560:	fa001a90 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1006564:	e300020e 	movw	r0, #526	; 0x20e
 1006568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: no BDs\r\n");
 100656c:	e3090228 	movw	r0, #37416	; 0x9228
 1006570:	e3400105 	movt	r0, #261	; 0x105
 1006574:	fa001ab0 	blx	100d03c <puts>
		return XST_DMA_SG_NO_LIST;
 1006578:	e300020b 	movw	r0, #523	; 0x20b
 100657c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: HwHead wrong %x, "
 1006580:	e309031c 	movw	r0, #37660	; 0x931c
 1006584:	e1a02005 	mov	r2, r5
 1006588:	e3400105 	movt	r0, #261	; 0x105
 100658c:	fa001a85 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1006590:	e300020e 	movw	r0, #526	; 0x20e
 1006594:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: Bd ring is "
 1006598:	e3090240 	movw	r0, #37440	; 0x9240
 100659c:	e3400105 	movt	r0, #261	; 0x105
 10065a0:	fa001aa5 	blx	100d03c <puts>
		return XST_IS_STARTED;
 10065a4:	e3a00017 	mov	r0, #23
 10065a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: PostHead wrong "
 10065ac:	e3090394 	movw	r0, #37780	; 0x9394
 10065b0:	e1a02005 	mov	r2, r5
 10065b4:	e3400105 	movt	r0, #261	; 0x105
 10065b8:	fa001a7a 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 10065bc:	e300020e 	movw	r0, #526	; 0x20e
 10065c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	}

	XAXIDMA_CACHE_INVALIDATE(AddrV);
 10065c4:	e3a01034 	mov	r1, #52	; 0x34
 10065c8:	e1a00005 	mov	r0, r5
 10065cc:	eb000b79 	bl	10093b8 <Xil_DCacheInvalidateRange>
	/* Last BD should point back to the beginning of ring */
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 10065d0:	e5951000 	ldr	r1, [r5]
	    RingPtr->FirstBdPhysAddr) {
 10065d4:	e5942020 	ldr	r2, [r4, #32]
	if (XAxiDma_BdRead(AddrV, XAXIDMA_BD_NDESC_OFFSET) !=
 10065d8:	e1510002 	cmp	r1, r2
 10065dc:	1a000006 	bne	10065fc <XAxiDma_BdRingCheck+0x204>

		return XST_DMA_SG_LIST_ERROR;
	}

	/* No problems found */
	return XST_SUCCESS;
 10065e0:	e3a00000 	mov	r0, #0
}
 10065e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: internal counter "
 10065e8:	e30903d4 	movw	r0, #37844	; 0x93d4
 10065ec:	e3400105 	movt	r0, #261	; 0x105
 10065f0:	fa001a91 	blx	100d03c <puts>
		return XST_DMA_SG_LIST_ERROR;
 10065f4:	e300020e 	movw	r0, #526	; 0x20e
 10065f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		xdbg_printf(XDBG_DEBUG_ERROR, "BdRingCheck: last Bd Next BD "
 10065fc:	e309042c 	movw	r0, #37932	; 0x942c
 1006600:	e3400105 	movt	r0, #261	; 0x105
 1006604:	fa001a67 	blx	100cfa8 <printf>
		return XST_DMA_SG_LIST_ERROR;
 1006608:	e300020e 	movw	r0, #526	; 0x20e
 100660c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01006610 <XAxiDma_BdRingDumpRegs>:
 * @return	None
 *
 * @note	This function can be used only when DMA is in SG mode
 *
 *****************************************************************************/
void XAxiDma_BdRingDumpRegs(XAxiDma_BdRing *RingPtr) {
 1006610:	e1a03000 	mov	r3, r0
 1006614:	e92d4070 	push	{r4, r5, r6, lr}
	UINTPTR RegBase = RingPtr->ChanBase;
 1006618:	e5934000 	ldr	r4, [r3]
	int RingIndex = RingPtr->RingIndex;

	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 100661c:	e3090464 	movw	r0, #37988	; 0x9464
 1006620:	e3400105 	movt	r0, #261	; 0x105
	int RingIndex = RingPtr->RingIndex;
 1006624:	e5935064 	ldr	r5, [r3, #100]	; 0x64
	xil_printf("Dump registers %p:\r\n", (void *)RegBase);
 1006628:	e1a01004 	mov	r1, r4
 100662c:	eb000e41 	bl	1009f38 <xil_printf>
	xil_printf("Control REG: %08x\r\n",
 1006630:	e309047c 	movw	r0, #38012	; 0x947c
	return *(volatile u32 *) Addr;
 1006634:	e5941000 	ldr	r1, [r4]
 1006638:	e3400105 	movt	r0, #261	; 0x105
 100663c:	eb000e3d 	bl	1009f38 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CR_OFFSET));
	xil_printf("Status REG: %08x\r\n",
 1006640:	e3090490 	movw	r0, #38032	; 0x9490
 1006644:	e5941004 	ldr	r1, [r4, #4]
 1006648:	e3400105 	movt	r0, #261	; 0x105
 100664c:	eb000e39 	bl	1009f38 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_SR_OFFSET));

	if (RingIndex) {
 1006650:	e3550000 	cmp	r5, #0
 1006654:	0a00000f 	beq	1006698 <XAxiDma_BdRingDumpRegs+0x88>
	xil_printf("Cur BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1006658:	e2855001 	add	r5, r5, #1
	xil_printf("Cur BD REG: %08x\r\n",
 100665c:	e30904a4 	movw	r0, #38052	; 0x94a4
 1006660:	e7941285 	ldr	r1, [r4, r5, lsl #5]
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1006664:	e1a05285 	lsl	r5, r5, #5
	xil_printf("Cur BD REG: %08x\r\n",
 1006668:	e3400105 	movt	r0, #261	; 0x105
 100666c:	eb000e31 	bl	1009f38 <xil_printf>
		XAXIDMA_RX_CDESC0_OFFSET + ((RingIndex - 1) *
		XAXIDMA_RX_NDESC_OFFSET)));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase,
 1006670:	e2455040 	sub	r5, r5, #64	; 0x40
 1006674:	e2844048 	add	r4, r4, #72	; 0x48
	xil_printf("Tail BD REG: %08x\r\n",
 1006678:	e30904b8 	movw	r0, #38072	; 0x94b8
 100667c:	e7951004 	ldr	r1, [r5, r4]
 1006680:	e3400105 	movt	r0, #261	; 0x105
 1006684:	eb000e2b 	bl	1009f38 <xil_printf>
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_CDESC_OFFSET));
	xil_printf("Tail BD REG: %08x\r\n",
		(unsigned int)XAxiDma_ReadReg(RegBase, XAXIDMA_TDESC_OFFSET));
	}

	xil_printf("\r\n");
 1006688:	e3080c24 	movw	r0, #35876	; 0x8c24
}
 100668c:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 1006690:	e3400105 	movt	r0, #261	; 0x105
 1006694:	ea000e27 	b	1009f38 <xil_printf>
	xil_printf("Cur BD REG: %08x\r\n",
 1006698:	e30904a4 	movw	r0, #38052	; 0x94a4
 100669c:	e5941008 	ldr	r1, [r4, #8]
 10066a0:	e3400105 	movt	r0, #261	; 0x105
 10066a4:	eb000e23 	bl	1009f38 <xil_printf>
	xil_printf("Tail BD REG: %08x\r\n",
 10066a8:	e30904b8 	movw	r0, #38072	; 0x94b8
 10066ac:	e5941010 	ldr	r1, [r4, #16]
 10066b0:	e3400105 	movt	r0, #261	; 0x105
 10066b4:	eb000e1f 	bl	1009f38 <xil_printf>
	xil_printf("\r\n");
 10066b8:	e3080c24 	movw	r0, #35876	; 0x8c24
}
 10066bc:	e8bd4070 	pop	{r4, r5, r6, lr}
	xil_printf("\r\n");
 10066c0:	e3400105 	movt	r0, #261	; 0x105
 10066c4:	ea000e1b 	b	1009f38 <xil_printf>

010066c8 <StubErrCallBack>:
******************************************************************************/
static void StubErrCallBack(void *CallBackRef, u32 ErrorMask)
{
	(void) ((void *)CallBackRef);
	(void) ErrorMask;
	Xil_AssertVoidAlways();
 10066c8:	e30904cc 	movw	r0, #38092	; 0x94cc
{
 10066cc:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 10066d0:	e3a010a7 	mov	r1, #167	; 0xa7
 10066d4:	e3400105 	movt	r0, #261	; 0x105
 10066d8:	eb000b02 	bl	10092e8 <Xil_Assert>
 10066dc:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10066e0:	e3a02001 	mov	r2, #1
 10066e4:	e3403116 	movt	r3, #278	; 0x116
 10066e8:	e5832000 	str	r2, [r3]
}
 10066ec:	e8bd8010 	pop	{r4, pc}

010066f0 <XClk_Wiz_CfgInitialize>:
{
 10066f0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10066f4:	e2504000 	subs	r4, r0, #0
 10066f8:	0a00001e 	beq	1006778 <XClk_Wiz_CfgInitialize+0x88>
 10066fc:	e30a54c0 	movw	r5, #42176	; 0xa4c0
	Xil_AssertNonvoid(CfgPtr != NULL);
 1006700:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006704:	e3405116 	movt	r5, #278	; 0x116
 1006708:	e3a03000 	mov	r3, #0
 100670c:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(CfgPtr != NULL);
 1006710:	0a000021 	beq	100679c <XClk_Wiz_CfgInitialize+0xac>
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1006714:	e3520000 	cmp	r2, #0
 1006718:	e1a06002 	mov	r6, r2
 100671c:	0a00000d 	beq	1006758 <XClk_Wiz_CfgInitialize+0x68>
	InstancePtr->Config = *CfgPtr;
 1006720:	e3a02058 	mov	r2, #88	; 0x58
 1006724:	eb001875 	bl	100c900 <memcpy>
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1006728:	e30636c8 	movw	r3, #26312	; 0x66c8
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 100672c:	e3012111 	movw	r2, #4369	; 0x1111
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 1006730:	e3403100 	movt	r3, #256	; 0x100
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 1006734:	e3412111 	movt	r2, #4369	; 0x1111
	InstancePtr->Config.BaseAddr = EffectiveAddr;
 1006738:	e5846004 	str	r6, [r4, #4]
	InstancePtr->ClkOutOfRangeCallBack  = StubErrCallBack;
 100673c:	e5843060 	str	r3, [r4, #96]	; 0x60
	InstancePtr->ClkGlitchCallBack      = StubErrCallBack;
 1006740:	e5843068 	str	r3, [r4, #104]	; 0x68
	InstancePtr->ClkStopCallBack        = StubErrCallBack;
 1006744:	e5843070 	str	r3, [r4, #112]	; 0x70
	InstancePtr->ErrorCallBack = StubErrCallBack;
 1006748:	e5843078 	str	r3, [r4, #120]	; 0x78
	InstancePtr->IsReady = (u32)(XIL_COMPONENT_IS_READY);
 100674c:	e5842080 	str	r2, [r4, #128]	; 0x80
}
 1006750:	e3a00000 	mov	r0, #0
 1006754:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1006758:	e30904cc 	movw	r0, #38092	; 0x94cc
 100675c:	e3a01065 	mov	r1, #101	; 0x65
 1006760:	e3400105 	movt	r0, #261	; 0x105
 1006764:	eb000adf 	bl	10092e8 <Xil_Assert>
 1006768:	e3a03001 	mov	r3, #1
}
 100676c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid((UINTPTR *)EffectiveAddr != NULL);
 1006770:	e5853000 	str	r3, [r5]
}
 1006774:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006778:	e30904cc 	movw	r0, #38092	; 0x94cc
 100677c:	e3a01063 	mov	r1, #99	; 0x63
 1006780:	e3400105 	movt	r0, #261	; 0x105
 1006784:	eb000ad7 	bl	10092e8 <Xil_Assert>
 1006788:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 100678c:	e3a02001 	mov	r2, #1
 1006790:	e3403116 	movt	r3, #278	; 0x116
 1006794:	e5832000 	str	r2, [r3]
 1006798:	eaffffec 	b	1006750 <XClk_Wiz_CfgInitialize+0x60>
	Xil_AssertNonvoid(CfgPtr != NULL);
 100679c:	e30904cc 	movw	r0, #38092	; 0x94cc
 10067a0:	e3a01064 	mov	r1, #100	; 0x64
 10067a4:	e3400105 	movt	r0, #261	; 0x105
 10067a8:	eb000ace 	bl	10092e8 <Xil_Assert>
 10067ac:	e3a03001 	mov	r3, #1
 10067b0:	e5853000 	str	r3, [r5]
 10067b4:	eaffffe5 	b	1006750 <XClk_Wiz_CfgInitialize+0x60>

010067b8 <XClk_Wiz_GetInterruptSettings>:
	Xil_AssertVoid(InstancePtr != NULL);
 10067b8:	e3500000 	cmp	r0, #0
 10067bc:	0a00000b 	beq	10067f0 <XClk_Wiz_GetInterruptSettings+0x38>
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 10067c0:	e5902004 	ldr	r2, [r0, #4]
	Xil_AssertVoid(InstancePtr != NULL);
 10067c4:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10067c8:	e3403116 	movt	r3, #278	; 0x116
 10067cc:	e3a01000 	mov	r1, #0
 10067d0:	e5831000 	str	r1, [r3]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 10067d4:	e592300c 	ldr	r3, [r2, #12]
*
****************************************************************************/
static inline u32 XCLK_WIZ_GET_BITFIELD_VALUE(UINTPTR BaseAddress,
		u32 RegisterOffset, u32 BitMask, u32 BitShift) {
	return ((XClk_Wiz_ReadReg((BaseAddress), (RegisterOffset)) \
		  & (BitMask)) >> (BitShift));
 10067d8:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkWizIntrStatus = XCLK_WIZ_GET_BITFIELD_VALUE
 10067dc:	e5803058 	str	r3, [r0, #88]	; 0x58
 10067e0:	e5923010 	ldr	r3, [r2, #16]
 10067e4:	e6ff3073 	uxth	r3, r3
	InstancePtr->ClkIntrEnable = XCLK_WIZ_GET_BITFIELD_VALUE
 10067e8:	e580305c 	str	r3, [r0, #92]	; 0x5c
 10067ec:	e12fff1e 	bx	lr
	Xil_AssertVoid(InstancePtr != NULL);
 10067f0:	e30904cc 	movw	r0, #38092	; 0x94cc
{
 10067f4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10067f8:	e3a01086 	mov	r1, #134	; 0x86
 10067fc:	e3400105 	movt	r0, #261	; 0x105
 1006800:	eb000ab8 	bl	10092e8 <Xil_Assert>
 1006804:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006808:	e3a02001 	mov	r2, #1
 100680c:	e3403116 	movt	r3, #278	; 0x116
 1006810:	e5832000 	str	r2, [r3]
}
 1006814:	e8bd8010 	pop	{r4, pc}

01006818 <XClk_Wiz_LookupConfig>:
	extern XClk_Wiz_Config XClk_Wiz_ConfigTable[];
	XClk_Wiz_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0; Index < XPAR_XCLK_WIZ_NUM_INSTANCES; Index++) {
		if (XClk_Wiz_ConfigTable[Index].DeviceId == DeviceId) {
 1006818:	e30938d0 	movw	r3, #39120	; 0x98d0
 100681c:	e3403105 	movt	r3, #261	; 0x105
 1006820:	e5932000 	ldr	r2, [r3]
			break;
		}
	}

	return CfgPtr;
}
 1006824:	e1520000 	cmp	r2, r0
 1006828:	01a00003 	moveq	r0, r3
 100682c:	13a00000 	movne	r0, #0
 1006830:	e12fff1e 	bx	lr

01006834 <XGpioPs_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XGpioPs_CfgInitialize(XGpioPs *InstancePtr, const XGpioPs_Config *ConfigPtr,
				u32 EffectiveAddr)
{
 1006834:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status = XST_SUCCESS;
	u8 i;
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006838:	e2504000 	subs	r4, r0, #0
 100683c:	0a00004b 	beq	1006970 <XGpioPs_CfgInitialize+0x13c>
 1006840:	e30a54c0 	movw	r5, #42176	; 0xa4c0
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1006844:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006848:	e3405116 	movt	r5, #278	; 0x116
 100684c:	e3a03000 	mov	r3, #0
 1006850:	e5853000 	str	r3, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1006854:	0a00004e 	beq	1006994 <XGpioPs_CfgInitialize+0x160>
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1006858:	e3520000 	cmp	r2, #0
 100685c:	0a00002d 	beq	1006918 <XGpioPs_CfgInitialize+0xe4>
	 * Set some default values for instance data, don't indicate the device
	 * is ready to use until everything has been initialized successfully.
	 */
	InstancePtr->IsReady = 0U;
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1006860:	e1d100b0 	ldrh	r0, [r1]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1006864:	e30812d4 	movw	r1, #33492	; 0x82d4
 1006868:	e3401100 	movt	r1, #256	; 0x100
	InstancePtr->GpioConfig.BaseAddr = EffectiveAddr;
 100686c:	e1c420f4 	strd	r2, [r4, #4]
	InstancePtr->Handler = (XGpioPs_Handler)StubHandler;
 1006870:	e584100c 	str	r1, [r4, #12]
	InstancePtr->GpioConfig.DeviceId = ConfigPtr->DeviceId;
 1006874:	e1c400b0 	strh	r0, [r4]
	InstancePtr->Platform = XGetPlatform_Info();
 1006878:	eb000d1f 	bl	1009cfc <XGetPlatform_Info>

	/* Initialize the Bank data based on platform */
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 100687c:	e3500001 	cmp	r0, #1
	InstancePtr->Platform = XGetPlatform_Info();
 1006880:	e5840014 	str	r0, [r4, #20]
	if (InstancePtr->Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1006884:	0a00002b 	beq	1006938 <XGpioPs_CfgInitialize+0x104>
		 *	142 - 173, Bank 5
		 */
		InstancePtr->MaxPinNum = (u32)174;
		InstancePtr->MaxBanks = (u8)6;
	}
        else if (InstancePtr->Platform == (u32)XPLAT_VERSAL)
 1006888:	e3500006 	cmp	r0, #6
 100688c:	0a00002e 	beq	100694c <XGpioPs_CfgInitialize+0x118>
		 *	0 - 31,  Bank 0
		 *	32 - 53, Bank 1
		 *	54 - 85, Bank 2
		 *	86 - 117, Bank 3
		 */
		InstancePtr->MaxPinNum = (u32)118;
 1006890:	e3a02076 	mov	r2, #118	; 0x76
		InstancePtr->MaxBanks = (u8)4;
 1006894:	e3a03004 	mov	r3, #4
		InstancePtr->MaxPinNum = (u32)118;
 1006898:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)4;
 100689c:	e5c4301c 	strb	r3, [r4, #28]
{
 10068a0:	e3a02000 	mov	r2, #0
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 10068a4:	e3e0c000 	mvn	ip, #0
 10068a8:	e1a03002 	mov	r3, r2
 10068ac:	ea000008 	b	10068d4 <XGpioPs_CfgInitialize+0xa0>

                       }
                }
                else
                {
		XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10068b0:	e5941004 	ldr	r1, [r4, #4]
 10068b4:	e2811f85 	add	r1, r1, #532	; 0x214
 10068b8:	e781c303 	str	ip, [r1, r3, lsl #6]
 10068bc:	e2822001 	add	r2, r2, #1
	for (i=(u8)0U;i<InstancePtr->MaxBanks;i++) {
 10068c0:	e5d4101c 	ldrb	r1, [r4, #28]
 10068c4:	e6ef3072 	uxtb	r3, r2
 10068c8:	e1510003 	cmp	r1, r3
 10068cc:	9a00000c 	bls	1006904 <XGpioPs_CfgInitialize+0xd0>
 10068d0:	e5940014 	ldr	r0, [r4, #20]
                if (InstancePtr->Platform == XPLAT_VERSAL){
 10068d4:	e3500006 	cmp	r0, #6
 10068d8:	1afffff4 	bne	10068b0 <XGpioPs_CfgInitialize+0x7c>
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10068dc:	e5941020 	ldr	r1, [r4, #32]
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10068e0:	e2430001 	sub	r0, r3, #1
                        if(InstancePtr->PmcGpio == (u32)FALSE)
 10068e4:	e3510000 	cmp	r1, #0
 10068e8:	1a000002 	bne	10068f8 <XGpioPs_CfgInitialize+0xc4>
                                if((i== (u8)XGPIOPS_ONE)||(i== (u8)XGPIOPS_TWO))
 10068ec:	e3500001 	cmp	r0, #1
 10068f0:	8affffee 	bhi	10068b0 <XGpioPs_CfgInitialize+0x7c>
 10068f4:	eafffff0 	b	10068bc <XGpioPs_CfgInitialize+0x88>
                                if(i==(u32)XGPIOPS_TWO)
 10068f8:	e3530002 	cmp	r3, #2
 10068fc:	1affffeb 	bne	10068b0 <XGpioPs_CfgInitialize+0x7c>
 1006900:	eaffffed 	b	10068bc <XGpioPs_CfgInitialize+0x88>
					  XGPIOPS_INTDIS_OFFSET, 0xFFFFFFFFU);
                }
	}

	/* Indicate the component is now ready to use. */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1006904:	e3013111 	movw	r3, #4369	; 0x1111
 1006908:	e3413111 	movt	r3, #4369	; 0x1111
 100690c:	e5843008 	str	r3, [r4, #8]

	return Status;
}
 1006910:	e3a00000 	mov	r0, #0
 1006914:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1006918:	e30904d8 	movw	r0, #38104	; 0x94d8
 100691c:	e3a01068 	mov	r1, #104	; 0x68
 1006920:	e3400105 	movt	r0, #261	; 0x105
 1006924:	eb000a6f 	bl	10092e8 <Xil_Assert>
 1006928:	e3a03001 	mov	r3, #1
}
 100692c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(EffectiveAddr != (u32)0);
 1006930:	e5853000 	str	r3, [r5]
}
 1006934:	e8bd8070 	pop	{r4, r5, r6, pc}
		InstancePtr->MaxPinNum = (u32)174;
 1006938:	e3a020ae 	mov	r2, #174	; 0xae
		InstancePtr->MaxBanks = (u8)6;
 100693c:	e3a03006 	mov	r3, #6
		InstancePtr->MaxPinNum = (u32)174;
 1006940:	e5842018 	str	r2, [r4, #24]
		InstancePtr->MaxBanks = (u8)6;
 1006944:	e5c4301c 	strb	r3, [r4, #28]
 1006948:	eaffffd4 	b	10068a0 <XGpioPs_CfgInitialize+0x6c>
                if(InstancePtr->PmcGpio == (u32)FALSE)
 100694c:	e5943020 	ldr	r3, [r4, #32]
 1006950:	e3530000 	cmp	r3, #0
                        InstancePtr->MaxPinNum = (u32)58;
 1006954:	03a0203a 	moveq	r2, #58	; 0x3a
                        InstancePtr->MaxBanks = (u8)4;
 1006958:	03a03004 	moveq	r3, #4
                        InstancePtr->MaxPinNum = (u32)116;
 100695c:	13a02074 	movne	r2, #116	; 0x74
                        InstancePtr->MaxBanks = (u8)5;
 1006960:	13a03005 	movne	r3, #5
                        InstancePtr->MaxPinNum = (u32)116;
 1006964:	e5842018 	str	r2, [r4, #24]
                        InstancePtr->MaxBanks = (u8)5;
 1006968:	e5c4301c 	strb	r3, [r4, #28]
 100696c:	eaffffcb 	b	10068a0 <XGpioPs_CfgInitialize+0x6c>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006970:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006974:	e3a01066 	mov	r1, #102	; 0x66
 1006978:	e3400105 	movt	r0, #261	; 0x105
 100697c:	eb000a59 	bl	10092e8 <Xil_Assert>
 1006980:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006984:	e3a02001 	mov	r2, #1
 1006988:	e3403116 	movt	r3, #278	; 0x116
 100698c:	e5832000 	str	r2, [r3]
 1006990:	eaffffde 	b	1006910 <XGpioPs_CfgInitialize+0xdc>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1006994:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006998:	e3a01067 	mov	r1, #103	; 0x67
 100699c:	e3400105 	movt	r0, #261	; 0x105
 10069a0:	eb000a50 	bl	10092e8 <Xil_Assert>
 10069a4:	e3a03001 	mov	r3, #1
 10069a8:	e5853000 	str	r3, [r5]
 10069ac:	eaffffd7 	b	1006910 <XGpioPs_CfgInitialize+0xdc>

010069b0 <XGpioPs_Read>:
* @note		This function is used for reading the state of all the GPIO pins
*		of specified bank.
*
*****************************************************************************/
u32 XGpioPs_Read(const XGpioPs *InstancePtr, u8 Bank)
{
 10069b0:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10069b4:	e2506000 	subs	r6, r0, #0
 10069b8:	0a00001f 	beq	1006a3c <XGpioPs_Read+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10069bc:	e5962008 	ldr	r2, [r6, #8]
 10069c0:	e3013111 	movw	r3, #4369	; 0x1111
 10069c4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10069c8:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 10069cc:	e3405116 	movt	r5, #278	; 0x116
 10069d0:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10069d4:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10069d8:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10069dc:	1a000006 	bne	10069fc <XGpioPs_Read+0x4c>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10069e0:	e5d6301c 	ldrb	r3, [r6, #28]
 10069e4:	e1530001 	cmp	r3, r1
 10069e8:	9a00000b 	bls	1006a1c <XGpioPs_Read+0x6c>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10069ec:	e5963004 	ldr	r3, [r6, #4]
 10069f0:	e2811018 	add	r1, r1, #24
	return *(volatile u32 *) Addr;
 10069f4:	e7930101 	ldr	r0, [r3, r1, lsl #2]
 10069f8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10069fc:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006a00:	e3a010e0 	mov	r1, #224	; 0xe0
 1006a04:	e3400105 	movt	r0, #261	; 0x105
 1006a08:	eb000a36 	bl	10092e8 <Xil_Assert>
 1006a0c:	e3a03001 	mov	r3, #1
 1006a10:	e1a00004 	mov	r0, r4
 1006a14:	e5853000 	str	r3, [r5]
 1006a18:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006a1c:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006a20:	e3a010e1 	mov	r1, #225	; 0xe1
 1006a24:	e3400105 	movt	r0, #261	; 0x105
 1006a28:	eb000a2e 	bl	10092e8 <Xil_Assert>
 1006a2c:	e3a03001 	mov	r3, #1
 1006a30:	e1a00004 	mov	r0, r4
 1006a34:	e5853000 	str	r3, [r5]
				 ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
				 XGPIOPS_DATA_RO_OFFSET);
}
 1006a38:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006a3c:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006a40:	e3a010df 	mov	r1, #223	; 0xdf
 1006a44:	e3400105 	movt	r0, #261	; 0x105
 1006a48:	eb000a26 	bl	10092e8 <Xil_Assert>
 1006a4c:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006a50:	e3a02001 	mov	r2, #1
 1006a54:	e3403116 	movt	r3, #278	; 0x116
 1006a58:	e1a00006 	mov	r0, r6
 1006a5c:	e5832000 	str	r2, [r3]
 1006a60:	e8bd8070 	pop	{r4, r5, r6, pc}

01006a64 <XGpioPs_Write>:
*		the bank. The previous state of the pins is not maintained.
*
*****************************************************************************/
void XGpioPs_Write(const XGpioPs *InstancePtr, u8 Bank, u32 Data)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006a64:	e3500000 	cmp	r0, #0
{
 1006a68:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006a6c:	0a00001d 	beq	1006ae8 <XGpioPs_Write+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a70:	e590c008 	ldr	ip, [r0, #8]
 1006a74:	e3013111 	movw	r3, #4369	; 0x1111
 1006a78:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006a7c:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1006a80:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a84:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006a88:	e3a03000 	mov	r3, #0
 1006a8c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006a90:	1a000006 	bne	1006ab0 <XGpioPs_Write+0x4c>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006a94:	e5d0301c 	ldrb	r3, [r0, #28]
 1006a98:	e1530001 	cmp	r3, r1
 1006a9c:	9a00000a 	bls	1006acc <XGpioPs_Write+0x68>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006aa0:	e5903004 	ldr	r3, [r0, #4]
 1006aa4:	e2811010 	add	r1, r1, #16
	*LocalAddr = Value;
 1006aa8:	e7832101 	str	r2, [r3, r1, lsl #2]
 1006aac:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006ab0:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006ab4:	e3001127 	movw	r1, #295	; 0x127
 1006ab8:	e3400105 	movt	r0, #261	; 0x105
 1006abc:	eb000a09 	bl	10092e8 <Xil_Assert>
 1006ac0:	e3a03001 	mov	r3, #1
 1006ac4:	e5843000 	str	r3, [r4]
 1006ac8:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006acc:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006ad0:	e3a01f4a 	mov	r1, #296	; 0x128
 1006ad4:	e3400105 	movt	r0, #261	; 0x105
 1006ad8:	eb000a02 	bl	10092e8 <Xil_Assert>
 1006adc:	e3a03001 	mov	r3, #1
 1006ae0:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_DATA_BANK_OFFSET) +
			  XGPIOPS_DATA_OFFSET, Data);
}
 1006ae4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006ae8:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006aec:	e3001126 	movw	r1, #294	; 0x126
 1006af0:	e3400105 	movt	r0, #261	; 0x105
 1006af4:	eb0009fb 	bl	10092e8 <Xil_Assert>
 1006af8:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006afc:	e3a02001 	mov	r2, #1
 1006b00:	e3403116 	movt	r3, #278	; 0x116
 1006b04:	e5832000 	str	r2, [r3]
 1006b08:	e8bd8010 	pop	{r4, pc}

01006b0c <XGpioPs_SetDirection>:
*		not maintained.
*
*****************************************************************************/
void XGpioPs_SetDirection(const XGpioPs *InstancePtr, u8 Bank, u32 Direction)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006b0c:	e3500000 	cmp	r0, #0
{
 1006b10:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006b14:	0a00001e 	beq	1006b94 <XGpioPs_SetDirection+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b18:	e590c008 	ldr	ip, [r0, #8]
 1006b1c:	e3013111 	movw	r3, #4369	; 0x1111
 1006b20:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006b24:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1006b28:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b2c:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006b30:	e3a03000 	mov	r3, #0
 1006b34:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b38:	1a000007 	bne	1006b5c <XGpioPs_SetDirection+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006b3c:	e5d0301c 	ldrb	r3, [r0, #28]
 1006b40:	e1530001 	cmp	r3, r1
 1006b44:	9a00000b 	bls	1006b78 <XGpioPs_SetDirection+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006b48:	e5900004 	ldr	r0, [r0, #4]
 1006b4c:	e3a03f81 	mov	r3, #516	; 0x204
 1006b50:	e0831301 	add	r1, r3, r1, lsl #6
 1006b54:	e7812000 	str	r2, [r1, r0]
 1006b58:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006b5c:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006b60:	e3001186 	movw	r1, #390	; 0x186
 1006b64:	e3400105 	movt	r0, #261	; 0x105
 1006b68:	eb0009de 	bl	10092e8 <Xil_Assert>
 1006b6c:	e3a03001 	mov	r3, #1
 1006b70:	e5843000 	str	r3, [r4]
 1006b74:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006b78:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006b7c:	e3001187 	movw	r1, #391	; 0x187
 1006b80:	e3400105 	movt	r0, #261	; 0x105
 1006b84:	eb0009d7 	bl	10092e8 <Xil_Assert>
 1006b88:	e3a03001 	mov	r3, #1
 1006b8c:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_DIRM_OFFSET, Direction);
}
 1006b90:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006b94:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006b98:	e3001185 	movw	r1, #389	; 0x185
 1006b9c:	e3400105 	movt	r0, #261	; 0x105
 1006ba0:	eb0009d0 	bl	10092e8 <Xil_Assert>
 1006ba4:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006ba8:	e3a02001 	mov	r2, #1
 1006bac:	e3403116 	movt	r3, #278	; 0x116
 1006bb0:	e5832000 	str	r2, [r3]
 1006bb4:	e8bd8010 	pop	{r4, pc}

01006bb8 <XGpioPs_GetDirection>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetDirection(const XGpioPs *InstancePtr, u8 Bank)
{
 1006bb8:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006bbc:	e2506000 	subs	r6, r0, #0
 1006bc0:	0a000020 	beq	1006c48 <XGpioPs_GetDirection+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bc4:	e5962008 	ldr	r2, [r6, #8]
 1006bc8:	e3013111 	movw	r3, #4369	; 0x1111
 1006bcc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006bd0:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1006bd4:	e3405116 	movt	r5, #278	; 0x116
 1006bd8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006bdc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006be0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006be4:	1a000007 	bne	1006c08 <XGpioPs_GetDirection+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006be8:	e5d6301c 	ldrb	r3, [r6, #28]
 1006bec:	e1530001 	cmp	r3, r1
 1006bf0:	9a00000c 	bls	1006c28 <XGpioPs_GetDirection+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006bf4:	e5962004 	ldr	r2, [r6, #4]
 1006bf8:	e3a03f81 	mov	r3, #516	; 0x204
 1006bfc:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1006c00:	e7910002 	ldr	r0, [r1, r2]
 1006c04:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c08:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006c0c:	e30011d5 	movw	r1, #469	; 0x1d5
 1006c10:	e3400105 	movt	r0, #261	; 0x105
 1006c14:	eb0009b3 	bl	10092e8 <Xil_Assert>
 1006c18:	e3a03001 	mov	r3, #1
 1006c1c:	e1a00004 	mov	r0, r4
 1006c20:	e5853000 	str	r3, [r5]
 1006c24:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006c28:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006c2c:	e30011d6 	movw	r1, #470	; 0x1d6
 1006c30:	e3400105 	movt	r0, #261	; 0x105
 1006c34:	eb0009ab 	bl	10092e8 <Xil_Assert>
 1006c38:	e3a03001 	mov	r3, #1
 1006c3c:	e1a00004 	mov	r0, r4
 1006c40:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_DIRM_OFFSET);
}
 1006c44:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006c48:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006c4c:	e3a01f75 	mov	r1, #468	; 0x1d4
 1006c50:	e3400105 	movt	r0, #261	; 0x105
 1006c54:	eb0009a3 	bl	10092e8 <Xil_Assert>
 1006c58:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006c5c:	e3a02001 	mov	r2, #1
 1006c60:	e3403116 	movt	r3, #278	; 0x116
 1006c64:	e1a00006 	mov	r0, r6
 1006c68:	e5832000 	str	r2, [r3]
 1006c6c:	e8bd8070 	pop	{r4, r5, r6, pc}

01006c70 <XGpioPs_SetOutputEnable>:
*		Enables is not maintained.
*
*****************************************************************************/
void XGpioPs_SetOutputEnable(const XGpioPs *InstancePtr, u8 Bank, u32 OpEnable)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1006c70:	e3500000 	cmp	r0, #0
{
 1006c74:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006c78:	0a00001e 	beq	1006cf8 <XGpioPs_SetOutputEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c7c:	e590c008 	ldr	ip, [r0, #8]
 1006c80:	e3013111 	movw	r3, #4369	; 0x1111
 1006c84:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1006c88:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1006c8c:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c90:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1006c94:	e3a03000 	mov	r3, #0
 1006c98:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006c9c:	1a000007 	bne	1006cc0 <XGpioPs_SetOutputEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006ca0:	e5d0301c 	ldrb	r3, [r0, #28]
 1006ca4:	e1530001 	cmp	r3, r1
 1006ca8:	9a00000b 	bls	1006cdc <XGpioPs_SetOutputEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1006cac:	e5900004 	ldr	r0, [r0, #4]
 1006cb0:	e3a03f82 	mov	r3, #520	; 0x208
 1006cb4:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1006cb8:	e7812000 	str	r2, [r1, r0]
 1006cbc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006cc0:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006cc4:	e3a01e22 	mov	r1, #544	; 0x220
 1006cc8:	e3400105 	movt	r0, #261	; 0x105
 1006ccc:	eb000985 	bl	10092e8 <Xil_Assert>
 1006cd0:	e3a03001 	mov	r3, #1
 1006cd4:	e5843000 	str	r3, [r4]
 1006cd8:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1006cdc:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006ce0:	e3001221 	movw	r1, #545	; 0x221
 1006ce4:	e3400105 	movt	r0, #261	; 0x105
 1006ce8:	eb00097e 	bl	10092e8 <Xil_Assert>
 1006cec:	e3a03001 	mov	r3, #1
 1006cf0:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_OUTEN_OFFSET, OpEnable);
}
 1006cf4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1006cf8:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006cfc:	e300121f 	movw	r1, #543	; 0x21f
 1006d00:	e3400105 	movt	r0, #261	; 0x105
 1006d04:	eb000977 	bl	10092e8 <Xil_Assert>
 1006d08:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006d0c:	e3a02001 	mov	r2, #1
 1006d10:	e3403116 	movt	r3, #278	; 0x116
 1006d14:	e5832000 	str	r2, [r3]
 1006d18:	e8bd8010 	pop	{r4, pc}

01006d1c <XGpioPs_GetOutputEnable>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_GetOutputEnable(const XGpioPs *InstancePtr, u8 Bank)
{
 1006d1c:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d20:	e2506000 	subs	r6, r0, #0
 1006d24:	0a000020 	beq	1006dac <XGpioPs_GetOutputEnable+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d28:	e5962008 	ldr	r2, [r6, #8]
 1006d2c:	e3013111 	movw	r3, #4369	; 0x1111
 1006d30:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d34:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1006d38:	e3405116 	movt	r5, #278	; 0x116
 1006d3c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d40:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006d44:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d48:	1a000007 	bne	1006d6c <XGpioPs_GetOutputEnable+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006d4c:	e5d6301c 	ldrb	r3, [r6, #28]
 1006d50:	e1530001 	cmp	r3, r1
 1006d54:	9a00000c 	bls	1006d8c <XGpioPs_GetOutputEnable+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006d58:	e5962004 	ldr	r2, [r6, #4]
 1006d5c:	e3a03f82 	mov	r3, #520	; 0x208
 1006d60:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1006d64:	e7910002 	ldr	r0, [r1, r2]
 1006d68:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006d6c:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006d70:	e3a01f9d 	mov	r1, #628	; 0x274
 1006d74:	e3400105 	movt	r0, #261	; 0x105
 1006d78:	eb00095a 	bl	10092e8 <Xil_Assert>
 1006d7c:	e3a03001 	mov	r3, #1
 1006d80:	e1a00004 	mov	r0, r4
 1006d84:	e5853000 	str	r3, [r5]
 1006d88:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1006d8c:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006d90:	e3001275 	movw	r1, #629	; 0x275
 1006d94:	e3400105 	movt	r0, #261	; 0x105
 1006d98:	eb000952 	bl	10092e8 <Xil_Assert>
 1006d9c:	e3a03001 	mov	r3, #1
 1006da0:	e1a00004 	mov	r0, r4
 1006da4:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_OUTEN_OFFSET);
}
 1006da8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006dac:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006db0:	e3001273 	movw	r1, #627	; 0x273
 1006db4:	e3400105 	movt	r0, #261	; 0x105
 1006db8:	eb00094a 	bl	10092e8 <Xil_Assert>
 1006dbc:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006dc0:	e3a02001 	mov	r2, #1
 1006dc4:	e3403116 	movt	r3, #278	; 0x116
 1006dc8:	e1a00006 	mov	r0, r6
 1006dcc:	e5832000 	str	r2, [r3]
 1006dd0:	e8bd8070 	pop	{r4, r5, r6, pc}

01006dd4 <XGpioPs_GetBankPin>:
#ifdef versal
void XGpioPs_GetBankPin(const XGpioPs *InstancePtr,u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#else
void XGpioPs_GetBankPin(u8 PinNumber, u8 *BankNumber, u8 *PinNumberInBank)
#endif
{
 1006dd4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	u32 XGpioPsPinTable[6] = {0};
 1006dd8:	e3a05000 	mov	r5, #0
{
 1006ddc:	e24dd01c 	sub	sp, sp, #28
 1006de0:	e1a04000 	mov	r4, r0
 1006de4:	e1a06001 	mov	r6, r1
 1006de8:	e1a07002 	mov	r7, r2
	u32 XGpioPsPinTable[6] = {0};
 1006dec:	e58d5004 	str	r5, [sp, #4]
 1006df0:	e58d5000 	str	r5, [sp]
 1006df4:	e58d5008 	str	r5, [sp, #8]
 1006df8:	e58d500c 	str	r5, [sp, #12]
 1006dfc:	e58d5010 	str	r5, [sp, #16]
 1006e00:	e58d5014 	str	r5, [sp, #20]
#ifdef versal
        u8 i=(u8)0;
#endif
	u32 Platform = XGetPlatform_Info();
 1006e04:	eb000bbc 	bl	1009cfc <XGetPlatform_Info>

	if (Platform == (u32)XPLAT_ZYNQ_ULTRA_MP) {
 1006e08:	e3500001 	cmp	r0, #1
 1006e0c:	0a000022 	beq	1006e9c <XGpioPs_GetBankPin+0xc8>
                }

        }
#endif
        else {
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 1006e10:	e3a0201f 	mov	r2, #31
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 1006e14:	e3a03035 	mov	r3, #53	; 0x35
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */

		*BankNumber = 0U;
		while (*BankNumber < XGPIOPS_FOUR) {
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e18:	e354001f 	cmp	r4, #31
		XGpioPsPinTable[0] = (u32)31; /* 0 - 31, Bank 0 */
 1006e1c:	e58d2000 	str	r2, [sp]
		XGpioPsPinTable[1] = (u32)53; /* 32 - 53, Bank 1 */
 1006e20:	e58d3004 	str	r3, [sp, #4]
		XGpioPsPinTable[2] = (u32)85; /* 54 - 85, Bank 2 */
 1006e24:	e3a02055 	mov	r2, #85	; 0x55
		XGpioPsPinTable[3] = (u32)117; /* 86 - 117 Bank 3 */
 1006e28:	e3a03075 	mov	r3, #117	; 0x75
 1006e2c:	e1cd20f8 	strd	r2, [sp, #8]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e30:	9a000034 	bls	1006f08 <XGpioPs_GetBankPin+0x134>
 1006e34:	e3540035 	cmp	r4, #53	; 0x35
				break;
			}
			(*BankNumber)++;
 1006e38:	e3a03001 	mov	r3, #1
 1006e3c:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e40:	9a000013 	bls	1006e94 <XGpioPs_GetBankPin+0xc0>
 1006e44:	e3540055 	cmp	r4, #85	; 0x55
			(*BankNumber)++;
 1006e48:	e3a03002 	mov	r3, #2
 1006e4c:	e5c63000 	strb	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e50:	9a00000f 	bls	1006e94 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1006e54:	e3a03003 	mov	r3, #3
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e58:	e3540075 	cmp	r4, #117	; 0x75
			(*BankNumber)++;
 1006e5c:	e5c63000 	strb	r3, [r6]
 1006e60:	83a03004 	movhi	r3, #4
 1006e64:	85c63000 	strbhi	r3, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e68:	9a000009 	bls	1006e94 <XGpioPs_GetBankPin+0xc0>
        }
#endif

        else {
		*PinNumberInBank = (u8)((u32)PinNumber %
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1006e6c:	e28d2018 	add	r2, sp, #24
		*PinNumberInBank = (u8)((u32)PinNumber %
 1006e70:	e1a00004 	mov	r0, r4
					(XGpioPsPinTable[*BankNumber - (u8)1] + (u32)1));
 1006e74:	e0823103 	add	r3, r2, r3, lsl #2
 1006e78:	e513101c 	ldr	r1, [r3, #-28]	; 0xffffffe4
		*PinNumberInBank = (u8)((u32)PinNumber %
 1006e7c:	e2811001 	add	r1, r1, #1
 1006e80:	fa000e9f 	blx	100a904 <__aeabi_uidivmod>
 1006e84:	e6ef4071 	uxtb	r4, r1
 1006e88:	e5c74000 	strb	r4, [r7]
        }
}
 1006e8c:	e28dd01c 	add	sp, sp, #28
 1006e90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1006e94:	e5d63000 	ldrb	r3, [r6]
 1006e98:	eafffff3 	b	1006e6c <XGpioPs_GetBankPin+0x98>
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006e9c:	e3540019 	cmp	r4, #25
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1006ea0:	e3a01019 	mov	r1, #25
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1006ea4:	e3a0304d 	mov	r3, #77	; 0x4d
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1006ea8:	e3a02033 	mov	r2, #51	; 0x33
		XGpioPsPinTable[0] = (u32)25; /* 0 - 25, Bank 0 */
 1006eac:	e58d1000 	str	r1, [sp]
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1006eb0:	e3a0c06d 	mov	ip, #109	; 0x6d
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1006eb4:	e3a0108d 	mov	r1, #141	; 0x8d
		XGpioPsPinTable[2] = (u32)77; /* 52 - 77, Bank 2 */
 1006eb8:	e58d3008 	str	r3, [sp, #8]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1006ebc:	e3a030ad 	mov	r3, #173	; 0xad
		XGpioPsPinTable[4] = (u32)141; /* 110 - 141, Bank 4 */
 1006ec0:	e58d1010 	str	r1, [sp, #16]
		XGpioPsPinTable[5] = (u32)173; /* 142 - 173 Bank 5 */
 1006ec4:	e58d3014 	str	r3, [sp, #20]
 1006ec8:	828d1008 	addhi	r1, sp, #8
		XGpioPsPinTable[1] = (u32)51; /* 26 - 51, Bank 1 */
 1006ecc:	e58d2004 	str	r2, [sp, #4]
			(*BankNumber)++;
 1006ed0:	83a03002 	movhi	r3, #2
		XGpioPsPinTable[3] = (u32)109; /* 78 - 109, Bank 3 */
 1006ed4:	e58dc00c 	str	ip, [sp, #12]
			(*BankNumber)++;
 1006ed8:	85c60000 	strbhi	r0, [r6]
			if (PinNumber <= XGpioPsPinTable[*BankNumber]) {
 1006edc:	8a000001 	bhi	1006ee8 <XGpioPs_GetBankPin+0x114>
 1006ee0:	ea000008 	b	1006f08 <XGpioPs_GetBankPin+0x134>
 1006ee4:	e4912004 	ldr	r2, [r1], #4
 1006ee8:	e1540002 	cmp	r4, r2
 1006eec:	9affffe8 	bls	1006e94 <XGpioPs_GetBankPin+0xc0>
			(*BankNumber)++;
 1006ef0:	e5c63000 	strb	r3, [r6]
 1006ef4:	e2833001 	add	r3, r3, #1
		while (*BankNumber < XGPIOPS_SIX) {
 1006ef8:	e3530007 	cmp	r3, #7
 1006efc:	1afffff8 	bne	1006ee4 <XGpioPs_GetBankPin+0x110>
 1006f00:	e3a03006 	mov	r3, #6
 1006f04:	eaffffd8 	b	1006e6c <XGpioPs_GetBankPin+0x98>
		*BankNumber = 0U;
 1006f08:	e5c65000 	strb	r5, [r6]
	if (*BankNumber == (u8)0) {
 1006f0c:	eaffffdd 	b	1006e88 <XGpioPs_GetBankPin+0xb4>

01006f10 <XGpioPs_ReadPin>:
{
 1006f10:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f14:	e2506000 	subs	r6, r0, #0
{
 1006f18:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f1c:	0a00002a 	beq	1006fcc <XGpioPs_ReadPin+0xbc>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f20:	e5962008 	ldr	r2, [r6, #8]
 1006f24:	e3013111 	movw	r3, #4369	; 0x1111
 1006f28:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f2c:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1006f30:	e3405116 	movt	r5, #278	; 0x116
 1006f34:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f38:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006f3c:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006f40:	1a000018 	bne	1006fa8 <XGpioPs_ReadPin+0x98>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006f44:	e5963018 	ldr	r3, [r6, #24]
 1006f48:	e1530001 	cmp	r3, r1
 1006f4c:	9a00000c 	bls	1006f84 <XGpioPs_ReadPin+0x74>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1006f50:	e6ef0071 	uxtb	r0, r1
 1006f54:	e28d2007 	add	r2, sp, #7
 1006f58:	e28d1006 	add	r1, sp, #6
 1006f5c:	ebffff9c 	bl	1006dd4 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006f60:	e5dd3006 	ldrb	r3, [sp, #6]
 1006f64:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006f68:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1006f6c:	e2833018 	add	r3, r3, #24
 1006f70:	e7920103 	ldr	r0, [r2, r3, lsl #2]
				 XGPIOPS_DATA_RO_OFFSET) >> (u32)PinNumber) & (u32)1;
 1006f74:	e1a04430 	lsr	r4, r0, r4
 1006f78:	e2040001 	and	r0, r4, #1
}
 1006f7c:	e28dd008 	add	sp, sp, #8
 1006f80:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1006f84:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006f88:	e3001106 	movw	r1, #262	; 0x106
 1006f8c:	e3400105 	movt	r0, #261	; 0x105
 1006f90:	eb0008d4 	bl	10092e8 <Xil_Assert>
 1006f94:	e3a03001 	mov	r3, #1
 1006f98:	e1a00004 	mov	r0, r4
 1006f9c:	e5853000 	str	r3, [r5]
}
 1006fa0:	e28dd008 	add	sp, sp, #8
 1006fa4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1006fa8:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006fac:	e3001105 	movw	r1, #261	; 0x105
 1006fb0:	e3400105 	movt	r0, #261	; 0x105
 1006fb4:	eb0008cb 	bl	10092e8 <Xil_Assert>
 1006fb8:	e3a03001 	mov	r3, #1
 1006fbc:	e1a00004 	mov	r0, r4
 1006fc0:	e5853000 	str	r3, [r5]
}
 1006fc4:	e28dd008 	add	sp, sp, #8
 1006fc8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1006fcc:	e30904d8 	movw	r0, #38104	; 0x94d8
 1006fd0:	e3a01f41 	mov	r1, #260	; 0x104
 1006fd4:	e3400105 	movt	r0, #261	; 0x105
 1006fd8:	eb0008c2 	bl	10092e8 <Xil_Assert>
 1006fdc:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1006fe0:	e3a02001 	mov	r2, #1
 1006fe4:	e3403116 	movt	r3, #278	; 0x116
 1006fe8:	e1a00006 	mov	r0, r6
 1006fec:	e5832000 	str	r2, [r3]
 1006ff0:	eaffffe1 	b	1006f7c <XGpioPs_ReadPin+0x6c>

01006ff4 <XGpioPs_WritePin>:
{
 1006ff4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1006ff8:	e2505000 	subs	r5, r0, #0
{
 1006ffc:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1007000:	0a000032 	beq	10070d0 <XGpioPs_WritePin+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007004:	e5953008 	ldr	r3, [r5, #8]
 1007008:	e1a07002 	mov	r7, r2
 100700c:	e3012111 	movw	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007010:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007014:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007018:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100701c:	e1530002 	cmp	r3, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1007020:	e3a06000 	mov	r6, #0
 1007024:	e5846000 	str	r6, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007028:	1a000020 	bne	10070b0 <XGpioPs_WritePin+0xbc>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 100702c:	e5953018 	ldr	r3, [r5, #24]
 1007030:	e1530001 	cmp	r3, r1
 1007034:	9a000015 	bls	1007090 <XGpioPs_WritePin+0x9c>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007038:	e6ef0071 	uxtb	r0, r1
 100703c:	e28d2007 	add	r2, sp, #7
 1007040:	e28d1006 	add	r1, sp, #6
 1007044:	ebffff62 	bl	1006dd4 <XGpioPs_GetBankPin>
	if (PinNumber > 15U) {
 1007048:	e5dd3007 	ldrb	r3, [sp, #7]
 100704c:	e353000f 	cmp	r3, #15
		PinNumber -= (u8)16;
 1007050:	82433010 	subhi	r3, r3, #16
		RegOffset = XGPIOPS_DATA_MSW_OFFSET;
 1007054:	83a06004 	movhi	r6, #4
		PinNumber -= (u8)16;
 1007058:	86ef3073 	uxtbhi	r3, r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100705c:	e5952004 	ldr	r2, [r5, #4]
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 1007060:	e3a01000 	mov	r1, #0
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007064:	e5dd0006 	ldrb	r0, [sp, #6]
	DataVar &= (u32)0x01;
 1007068:	e2077001 	and	r7, r7, #1
	Value = ~((u32)1 << (PinNumber + 16U)) & ((DataVar << PinNumber) | 0xFFFF0000U);
 100706c:	e34f1fff 	movt	r1, #65535	; 0xffff
 1007070:	e3a0c001 	mov	ip, #1
 1007074:	e1811317 	orr	r1, r1, r7, lsl r3
 1007078:	e2833010 	add	r3, r3, #16
 100707c:	e1c1331c 	bic	r3, r1, ip, lsl r3
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007080:	e0822180 	add	r2, r2, r0, lsl #3
	*LocalAddr = Value;
 1007084:	e7823006 	str	r3, [r2, r6]
}
 1007088:	e28dd00c 	add	sp, sp, #12
 100708c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007090:	e30904d8 	movw	r0, #38104	; 0x94d8
 1007094:	e3001151 	movw	r1, #337	; 0x151
 1007098:	e3400105 	movt	r0, #261	; 0x105
 100709c:	eb000891 	bl	10092e8 <Xil_Assert>
 10070a0:	e3a03001 	mov	r3, #1
 10070a4:	e5843000 	str	r3, [r4]
}
 10070a8:	e28dd00c 	add	sp, sp, #12
 10070ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10070b0:	e30904d8 	movw	r0, #38104	; 0x94d8
 10070b4:	e3a01e15 	mov	r1, #336	; 0x150
 10070b8:	e3400105 	movt	r0, #261	; 0x105
 10070bc:	eb000889 	bl	10092e8 <Xil_Assert>
 10070c0:	e3a03001 	mov	r3, #1
 10070c4:	e5843000 	str	r3, [r4]
}
 10070c8:	e28dd00c 	add	sp, sp, #12
 10070cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10070d0:	e30904d8 	movw	r0, #38104	; 0x94d8
 10070d4:	e300114f 	movw	r1, #335	; 0x14f
 10070d8:	e3400105 	movt	r0, #261	; 0x105
 10070dc:	eb000881 	bl	10092e8 <Xil_Assert>
 10070e0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10070e4:	e3a02001 	mov	r2, #1
 10070e8:	e3403116 	movt	r3, #278	; 0x116
 10070ec:	e5832000 	str	r2, [r3]
 10070f0:	eaffffec 	b	10070a8 <XGpioPs_WritePin+0xb4>

010070f4 <XGpioPs_SetDirectionPin>:
{
 10070f4:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10070f8:	e2505000 	subs	r5, r0, #0
{
 10070fc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1007100:	0a00003b 	beq	10071f4 <XGpioPs_SetDirectionPin+0x100>
 1007104:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007108:	e5952008 	ldr	r2, [r5, #8]
 100710c:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007110:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007114:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007118:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100711c:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007120:	e3a03000 	mov	r3, #0
 1007124:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007128:	1a000015 	bne	1007184 <XGpioPs_SetDirectionPin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 100712c:	e5953018 	ldr	r3, [r5, #24]
 1007130:	e1530001 	cmp	r3, r1
 1007134:	9a000026 	bls	10071d4 <XGpioPs_SetDirectionPin+0xe0>
	Xil_AssertVoid(Direction <= (u32)1);
 1007138:	e3560001 	cmp	r6, #1
 100713c:	8a000018 	bhi	10071a4 <XGpioPs_SetDirectionPin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007140:	e6ef0071 	uxtb	r0, r1
 1007144:	e28d2007 	add	r2, sp, #7
 1007148:	e28d1006 	add	r1, sp, #6
 100714c:	ebffff20 	bl	1006dd4 <XGpioPs_GetBankPin>
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007150:	e5dd2006 	ldrb	r2, [sp, #6]
 1007154:	e3a03f81 	mov	r3, #516	; 0x204
 1007158:	e5951004 	ldr	r1, [r5, #4]
	if (Direction!=(u32)0) { /*  Output Direction */
 100715c:	e3560000 	cmp	r6, #0
	DirModeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007160:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1007164:	e7932001 	ldr	r2, [r3, r1]
	if (Direction!=(u32)0) { /*  Output Direction */
 1007168:	1a000015 	bne	10071c4 <XGpioPs_SetDirectionPin+0xd0>
		DirModeReg &= ~ ((u32)1 << (u32)PinNumber);
 100716c:	e5dd0007 	ldrb	r0, [sp, #7]
 1007170:	e3a0c001 	mov	ip, #1
 1007174:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1007178:	e7832001 	str	r2, [r3, r1]
}
 100717c:	e28dd008 	add	sp, sp, #8
 1007180:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007184:	e30904d8 	movw	r0, #38104	; 0x94d8
 1007188:	e30011aa 	movw	r1, #426	; 0x1aa
 100718c:	e3400105 	movt	r0, #261	; 0x105
 1007190:	eb000854 	bl	10092e8 <Xil_Assert>
 1007194:	e3a03001 	mov	r3, #1
 1007198:	e5843000 	str	r3, [r4]
}
 100719c:	e28dd008 	add	sp, sp, #8
 10071a0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Direction <= (u32)1);
 10071a4:	e30904d8 	movw	r0, #38104	; 0x94d8
 10071a8:	e3a01f6b 	mov	r1, #428	; 0x1ac
 10071ac:	e3400105 	movt	r0, #261	; 0x105
 10071b0:	eb00084c 	bl	10092e8 <Xil_Assert>
 10071b4:	e3a03001 	mov	r3, #1
 10071b8:	e5843000 	str	r3, [r4]
}
 10071bc:	e28dd008 	add	sp, sp, #8
 10071c0:	e8bd8070 	pop	{r4, r5, r6, pc}
		DirModeReg |= ((u32)1 << (u32)PinNumber);
 10071c4:	e5dd0007 	ldrb	r0, [sp, #7]
 10071c8:	e3a0c001 	mov	ip, #1
 10071cc:	e182201c 	orr	r2, r2, ip, lsl r0
 10071d0:	eaffffe8 	b	1007178 <XGpioPs_SetDirectionPin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10071d4:	e30904d8 	movw	r0, #38104	; 0x94d8
 10071d8:	e30011ab 	movw	r1, #427	; 0x1ab
 10071dc:	e3400105 	movt	r0, #261	; 0x105
 10071e0:	eb000840 	bl	10092e8 <Xil_Assert>
 10071e4:	e3a03001 	mov	r3, #1
 10071e8:	e5843000 	str	r3, [r4]
}
 10071ec:	e28dd008 	add	sp, sp, #8
 10071f0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10071f4:	e30904d8 	movw	r0, #38104	; 0x94d8
 10071f8:	e30011a9 	movw	r1, #425	; 0x1a9
 10071fc:	e3400105 	movt	r0, #261	; 0x105
 1007200:	eb000838 	bl	10092e8 <Xil_Assert>
 1007204:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007208:	e3a02001 	mov	r2, #1
 100720c:	e3403116 	movt	r3, #278	; 0x116
 1007210:	e5832000 	str	r2, [r3]
 1007214:	eaffffe0 	b	100719c <XGpioPs_SetDirectionPin+0xa8>

01007218 <XGpioPs_GetDirectionPin>:
{
 1007218:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 100721c:	e2506000 	subs	r6, r0, #0
{
 1007220:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007224:	0a00002b 	beq	10072d8 <XGpioPs_GetDirectionPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007228:	e5962008 	ldr	r2, [r6, #8]
 100722c:	e3013111 	movw	r3, #4369	; 0x1111
 1007230:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007234:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1007238:	e3405116 	movt	r5, #278	; 0x116
 100723c:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007240:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007244:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007248:	1a000019 	bne	10072b4 <XGpioPs_GetDirectionPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 100724c:	e5963018 	ldr	r3, [r6, #24]
 1007250:	e1530001 	cmp	r3, r1
 1007254:	9a00000d 	bls	1007290 <XGpioPs_GetDirectionPin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007258:	e6ef0071 	uxtb	r0, r1
 100725c:	e28d2007 	add	r2, sp, #7
 1007260:	e28d1006 	add	r1, sp, #6
 1007264:	ebfffeda 	bl	1006dd4 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007268:	e5dd1006 	ldrb	r1, [sp, #6]
 100726c:	e3a03f81 	mov	r3, #516	; 0x204
 1007270:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1007274:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007278:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 100727c:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_DIRM_OFFSET) >> (u32)PinNumber) & (u32)1;
 1007280:	e1a04430 	lsr	r4, r0, r4
 1007284:	e2040001 	and	r0, r4, #1
}
 1007288:	e28dd008 	add	sp, sp, #8
 100728c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1007290:	e30904d8 	movw	r0, #38104	; 0x94d8
 1007294:	e3a01f7f 	mov	r1, #508	; 0x1fc
 1007298:	e3400105 	movt	r0, #261	; 0x105
 100729c:	eb000811 	bl	10092e8 <Xil_Assert>
 10072a0:	e3a03001 	mov	r3, #1
 10072a4:	e1a00004 	mov	r0, r4
 10072a8:	e5853000 	str	r3, [r5]
}
 10072ac:	e28dd008 	add	sp, sp, #8
 10072b0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10072b4:	e30904d8 	movw	r0, #38104	; 0x94d8
 10072b8:	e30011fb 	movw	r1, #507	; 0x1fb
 10072bc:	e3400105 	movt	r0, #261	; 0x105
 10072c0:	eb000808 	bl	10092e8 <Xil_Assert>
 10072c4:	e3a03001 	mov	r3, #1
 10072c8:	e1a00004 	mov	r0, r4
 10072cc:	e5853000 	str	r3, [r5]
}
 10072d0:	e28dd008 	add	sp, sp, #8
 10072d4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10072d8:	e30904d8 	movw	r0, #38104	; 0x94d8
 10072dc:	e30011fa 	movw	r1, #506	; 0x1fa
 10072e0:	e3400105 	movt	r0, #261	; 0x105
 10072e4:	eb0007ff 	bl	10092e8 <Xil_Assert>
 10072e8:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10072ec:	e3a02001 	mov	r2, #1
 10072f0:	e3403116 	movt	r3, #278	; 0x116
 10072f4:	e1a00006 	mov	r0, r6
 10072f8:	e5832000 	str	r2, [r3]
 10072fc:	eaffffe1 	b	1007288 <XGpioPs_GetDirectionPin+0x70>

01007300 <XGpioPs_SetOutputEnablePin>:
{
 1007300:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007304:	e2505000 	subs	r5, r0, #0
{
 1007308:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 100730c:	0a00003b 	beq	1007400 <XGpioPs_SetOutputEnablePin+0x100>
 1007310:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007314:	e5952008 	ldr	r2, [r5, #8]
 1007318:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 100731c:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007320:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007324:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007328:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 100732c:	e3a03000 	mov	r3, #0
 1007330:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007334:	1a000015 	bne	1007390 <XGpioPs_SetOutputEnablePin+0x90>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007338:	e5953018 	ldr	r3, [r5, #24]
 100733c:	e1530001 	cmp	r3, r1
 1007340:	9a000026 	bls	10073e0 <XGpioPs_SetOutputEnablePin+0xe0>
	Xil_AssertVoid(OpEnable <= (u32)1);
 1007344:	e3560001 	cmp	r6, #1
 1007348:	8a000018 	bhi	10073b0 <XGpioPs_SetOutputEnablePin+0xb0>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 100734c:	e6ef0071 	uxtb	r0, r1
 1007350:	e28d2007 	add	r2, sp, #7
 1007354:	e28d1006 	add	r1, sp, #6
 1007358:	ebfffe9d 	bl	1006dd4 <XGpioPs_GetBankPin>
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100735c:	e5dd2006 	ldrb	r2, [sp, #6]
 1007360:	e3a03f82 	mov	r3, #520	; 0x208
 1007364:	e5951004 	ldr	r1, [r5, #4]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1007368:	e3560000 	cmp	r6, #0
	OpEnableReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100736c:	e0833302 	add	r3, r3, r2, lsl #6
 1007370:	e7932001 	ldr	r2, [r3, r1]
	if (OpEnable != (u32)0) { /*  Enable Output Enable */
 1007374:	1a000015 	bne	10073d0 <XGpioPs_SetOutputEnablePin+0xd0>
		OpEnableReg &= ~ ((u32)1 << (u32)PinNumber);
 1007378:	e5dd0007 	ldrb	r0, [sp, #7]
 100737c:	e3a0c001 	mov	ip, #1
 1007380:	e1c2201c 	bic	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1007384:	e7832001 	str	r2, [r3, r1]
}
 1007388:	e28dd008 	add	sp, sp, #8
 100738c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007390:	e30904d8 	movw	r0, #38104	; 0x94d8
 1007394:	e3a01f92 	mov	r1, #584	; 0x248
 1007398:	e3400105 	movt	r0, #261	; 0x105
 100739c:	eb0007d1 	bl	10092e8 <Xil_Assert>
 10073a0:	e3a03001 	mov	r3, #1
 10073a4:	e5843000 	str	r3, [r4]
}
 10073a8:	e28dd008 	add	sp, sp, #8
 10073ac:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(OpEnable <= (u32)1);
 10073b0:	e30904d8 	movw	r0, #38104	; 0x94d8
 10073b4:	e300124a 	movw	r1, #586	; 0x24a
 10073b8:	e3400105 	movt	r0, #261	; 0x105
 10073bc:	eb0007c9 	bl	10092e8 <Xil_Assert>
 10073c0:	e3a03001 	mov	r3, #1
 10073c4:	e5843000 	str	r3, [r4]
}
 10073c8:	e28dd008 	add	sp, sp, #8
 10073cc:	e8bd8070 	pop	{r4, r5, r6, pc}
		OpEnableReg |= ((u32)1 << (u32)PinNumber);
 10073d0:	e5dd0007 	ldrb	r0, [sp, #7]
 10073d4:	e3a0c001 	mov	ip, #1
 10073d8:	e182201c 	orr	r2, r2, ip, lsl r0
 10073dc:	eaffffe8 	b	1007384 <XGpioPs_SetOutputEnablePin+0x84>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10073e0:	e30904d8 	movw	r0, #38104	; 0x94d8
 10073e4:	e3001249 	movw	r1, #585	; 0x249
 10073e8:	e3400105 	movt	r0, #261	; 0x105
 10073ec:	eb0007bd 	bl	10092e8 <Xil_Assert>
 10073f0:	e3a03001 	mov	r3, #1
 10073f4:	e5843000 	str	r3, [r4]
}
 10073f8:	e28dd008 	add	sp, sp, #8
 10073fc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007400:	e30904d8 	movw	r0, #38104	; 0x94d8
 1007404:	e3001247 	movw	r1, #583	; 0x247
 1007408:	e3400105 	movt	r0, #261	; 0x105
 100740c:	eb0007b5 	bl	10092e8 <Xil_Assert>
 1007410:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007414:	e3a02001 	mov	r2, #1
 1007418:	e3403116 	movt	r3, #278	; 0x116
 100741c:	e5832000 	str	r2, [r3]
 1007420:	eaffffe0 	b	10073a8 <XGpioPs_SetOutputEnablePin+0xa8>

01007424 <XGpioPs_GetOutputEnablePin>:
{
 1007424:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007428:	e2506000 	subs	r6, r0, #0
{
 100742c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007430:	0a00002b 	beq	10074e4 <XGpioPs_GetOutputEnablePin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007434:	e5962008 	ldr	r2, [r6, #8]
 1007438:	e3013111 	movw	r3, #4369	; 0x1111
 100743c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007440:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1007444:	e3405116 	movt	r5, #278	; 0x116
 1007448:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100744c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007450:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007454:	1a000019 	bne	10074c0 <XGpioPs_GetOutputEnablePin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1007458:	e5963018 	ldr	r3, [r6, #24]
 100745c:	e1530001 	cmp	r3, r1
 1007460:	9a00000d 	bls	100749c <XGpioPs_GetOutputEnablePin+0x78>
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007464:	e6ef0071 	uxtb	r0, r1
 1007468:	e28d2007 	add	r2, sp, #7
 100746c:	e28d1006 	add	r1, sp, #6
 1007470:	ebfffe57 	bl	1006dd4 <XGpioPs_GetBankPin>
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007474:	e5dd1006 	ldrb	r1, [sp, #6]
 1007478:	e3a03f82 	mov	r3, #520	; 0x208
 100747c:	e5962004 	ldr	r2, [r6, #4]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 1007480:	e5dd4007 	ldrb	r4, [sp, #7]
	return (XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007484:	e0833301 	add	r3, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1007488:	e7930002 	ldr	r0, [r3, r2]
				 XGPIOPS_OUTEN_OFFSET) >> (u32)PinNumber) & (u32)1;
 100748c:	e1a04430 	lsr	r4, r0, r4
 1007490:	e2040001 	and	r0, r4, #1
}
 1007494:	e28dd008 	add	sp, sp, #8
 1007498:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 100749c:	e30904d8 	movw	r0, #38104	; 0x94d8
 10074a0:	e300129b 	movw	r1, #667	; 0x29b
 10074a4:	e3400105 	movt	r0, #261	; 0x105
 10074a8:	eb00078e 	bl	10092e8 <Xil_Assert>
 10074ac:	e3a03001 	mov	r3, #1
 10074b0:	e1a00004 	mov	r0, r4
 10074b4:	e5853000 	str	r3, [r5]
}
 10074b8:	e28dd008 	add	sp, sp, #8
 10074bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10074c0:	e30904d8 	movw	r0, #38104	; 0x94d8
 10074c4:	e300129a 	movw	r1, #666	; 0x29a
 10074c8:	e3400105 	movt	r0, #261	; 0x105
 10074cc:	eb000785 	bl	10092e8 <Xil_Assert>
 10074d0:	e3a03001 	mov	r3, #1
 10074d4:	e1a00004 	mov	r0, r4
 10074d8:	e5853000 	str	r3, [r5]
}
 10074dc:	e28dd008 	add	sp, sp, #8
 10074e0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10074e4:	e30904d8 	movw	r0, #38104	; 0x94d8
 10074e8:	e3001299 	movw	r1, #665	; 0x299
 10074ec:	e3400105 	movt	r0, #261	; 0x105
 10074f0:	eb00077c 	bl	10092e8 <Xil_Assert>
 10074f4:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10074f8:	e3a02001 	mov	r2, #1
 10074fc:	e3403116 	movt	r3, #278	; 0x116
 1007500:	e1a00006 	mov	r0, r6
 1007504:	e5832000 	str	r2, [r3]
 1007508:	eaffffe1 	b	1007494 <XGpioPs_GetOutputEnablePin+0x70>

0100750c <XGpioPs_LookupConfig>:
{
	XGpioPs_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_XGPIOPS_NUM_INSTANCES; Index++) {
		if (XGpioPs_ConfigTable[Index].DeviceId == DeviceId) {
 100750c:	e3093884 	movw	r3, #39044	; 0x9884
 1007510:	e3403105 	movt	r3, #261	; 0x105
 1007514:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XGpioPs_Config *)CfgPtr;
}
 1007518:	e1520000 	cmp	r2, r0
 100751c:	01a00003 	moveq	r0, r3
 1007520:	13a00000 	movne	r0, #0
 1007524:	e12fff1e 	bx	lr

01007528 <XGpioPs_IntrEnable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1007528:	e3500000 	cmp	r0, #0
{
 100752c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007530:	0a00001e 	beq	10075b0 <XGpioPs_IntrEnable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007534:	e590c008 	ldr	ip, [r0, #8]
 1007538:	e3013111 	movw	r3, #4369	; 0x1111
 100753c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007540:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1007544:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007548:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 100754c:	e3a03000 	mov	r3, #0
 1007550:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007554:	1a000007 	bne	1007578 <XGpioPs_IntrEnable+0x50>
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007558:	e5d0301c 	ldrb	r3, [r0, #28]
 100755c:	e1530001 	cmp	r3, r1
 1007560:	9a00000b 	bls	1007594 <XGpioPs_IntrEnable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007564:	e5900004 	ldr	r0, [r0, #4]
 1007568:	e3a03e21 	mov	r3, #528	; 0x210
 100756c:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1007570:	e7812000 	str	r2, [r1, r0]
 1007574:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007578:	e30904e4 	movw	r0, #38116	; 0x94e4
 100757c:	e3a01063 	mov	r1, #99	; 0x63
 1007580:	e3400105 	movt	r0, #261	; 0x105
 1007584:	eb000757 	bl	10092e8 <Xil_Assert>
 1007588:	e3a03001 	mov	r3, #1
 100758c:	e5843000 	str	r3, [r4]
 1007590:	e8bd8010 	pop	{r4, pc}
        Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007594:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007598:	e3a01064 	mov	r1, #100	; 0x64
 100759c:	e3400105 	movt	r0, #261	; 0x105
 10075a0:	eb000750 	bl	10092e8 <Xil_Assert>
 10075a4:	e3a03001 	mov	r3, #1
 10075a8:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, Mask);
}
 10075ac:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10075b0:	e30904e4 	movw	r0, #38116	; 0x94e4
 10075b4:	e3a01062 	mov	r1, #98	; 0x62
 10075b8:	e3400105 	movt	r0, #261	; 0x105
 10075bc:	eb000749 	bl	10092e8 <Xil_Assert>
 10075c0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10075c4:	e3a02001 	mov	r2, #1
 10075c8:	e3403116 	movt	r3, #278	; 0x116
 10075cc:	e5832000 	str	r2, [r3]
 10075d0:	e8bd8010 	pop	{r4, pc}

010075d4 <XGpioPs_IntrEnablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrEnablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 10075d4:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 10075d8:	e2505000 	subs	r5, r0, #0
{
 10075dc:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 10075e0:	0a000029 	beq	100768c <XGpioPs_IntrEnablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10075e4:	e5950008 	ldr	r0, [r5, #8]
 10075e8:	e3013111 	movw	r3, #4369	; 0x1111
 10075ec:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10075f0:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 10075f4:	e3404116 	movt	r4, #278	; 0x116
 10075f8:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10075fc:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007600:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007604:	1a000018 	bne	100766c <XGpioPs_IntrEnablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007608:	e5953018 	ldr	r3, [r5, #24]
 100760c:	e1530001 	cmp	r3, r1
 1007610:	9a00000d 	bls	100764c <XGpioPs_IntrEnablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007614:	e6ef0071 	uxtb	r0, r1
 1007618:	e28d2007 	add	r2, sp, #7
 100761c:	e28d1006 	add	r1, sp, #6
 1007620:	ebfffdeb 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 1007624:	e5ddc007 	ldrb	ip, [sp, #7]
 1007628:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100762c:	e5dd0006 	ldrb	r0, [sp, #6]
 1007630:	e3a03e21 	mov	r3, #528	; 0x210
 1007634:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 1007638:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 100763c:	e0833300 	add	r3, r3, r0, lsl #6
 1007640:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTEN_OFFSET, IntrReg);
}
 1007644:	e28dd00c 	add	sp, sp, #12
 1007648:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 100764c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007650:	e3a01088 	mov	r1, #136	; 0x88
 1007654:	e3400105 	movt	r0, #261	; 0x105
 1007658:	eb000722 	bl	10092e8 <Xil_Assert>
 100765c:	e3a03001 	mov	r3, #1
 1007660:	e5843000 	str	r3, [r4]
}
 1007664:	e28dd00c 	add	sp, sp, #12
 1007668:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100766c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007670:	e3a01087 	mov	r1, #135	; 0x87
 1007674:	e3400105 	movt	r0, #261	; 0x105
 1007678:	eb00071a 	bl	10092e8 <Xil_Assert>
 100767c:	e3a03001 	mov	r3, #1
 1007680:	e5843000 	str	r3, [r4]
}
 1007684:	e28dd00c 	add	sp, sp, #12
 1007688:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 100768c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007690:	e3a01086 	mov	r1, #134	; 0x86
 1007694:	e3400105 	movt	r0, #261	; 0x105
 1007698:	eb000712 	bl	10092e8 <Xil_Assert>
 100769c:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10076a0:	e3a02001 	mov	r2, #1
 10076a4:	e3403116 	movt	r3, #278	; 0x116
 10076a8:	e5832000 	str	r2, [r3]
 10076ac:	eaffffe4 	b	1007644 <XGpioPs_IntrEnablePin+0x70>

010076b0 <XGpioPs_IntrDisable>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisable(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 10076b0:	e3500000 	cmp	r0, #0
{
 10076b4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10076b8:	0a00001e 	beq	1007738 <XGpioPs_IntrDisable+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10076bc:	e590c008 	ldr	ip, [r0, #8]
 10076c0:	e3013111 	movw	r3, #4369	; 0x1111
 10076c4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 10076c8:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 10076cc:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10076d0:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10076d4:	e3a03000 	mov	r3, #0
 10076d8:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10076dc:	1a000007 	bne	1007700 <XGpioPs_IntrDisable+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 10076e0:	e5d0301c 	ldrb	r3, [r0, #28]
 10076e4:	e1530001 	cmp	r3, r1
 10076e8:	9a00000b 	bls	100771c <XGpioPs_IntrDisable+0x6c>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10076ec:	e5900004 	ldr	r0, [r0, #4]
 10076f0:	e3a03f85 	mov	r3, #532	; 0x214
 10076f4:	e0831301 	add	r1, r3, r1, lsl #6
 10076f8:	e7812000 	str	r2, [r1, r0]
 10076fc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007700:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007704:	e3a010ac 	mov	r1, #172	; 0xac
 1007708:	e3400105 	movt	r0, #261	; 0x105
 100770c:	eb0006f5 	bl	10092e8 <Xil_Assert>
 1007710:	e3a03001 	mov	r3, #1
 1007714:	e5843000 	str	r3, [r4]
 1007718:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 100771c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007720:	e3a010ad 	mov	r1, #173	; 0xad
 1007724:	e3400105 	movt	r0, #261	; 0x105
 1007728:	eb0006ee 	bl	10092e8 <Xil_Assert>
 100772c:	e3a03001 	mov	r3, #1
 1007730:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, Mask);
}
 1007734:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007738:	e30904e4 	movw	r0, #38116	; 0x94e4
 100773c:	e3a010ab 	mov	r1, #171	; 0xab
 1007740:	e3400105 	movt	r0, #261	; 0x105
 1007744:	eb0006e7 	bl	10092e8 <Xil_Assert>
 1007748:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 100774c:	e3a02001 	mov	r2, #1
 1007750:	e3403116 	movt	r3, #278	; 0x116
 1007754:	e5832000 	str	r2, [r3]
 1007758:	e8bd8010 	pop	{r4, pc}

0100775c <XGpioPs_IntrDisablePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrDisablePin(const XGpioPs *InstancePtr, u32 Pin)
{
 100775c:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1007760:	e2505000 	subs	r5, r0, #0
{
 1007764:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1007768:	0a000029 	beq	1007814 <XGpioPs_IntrDisablePin+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100776c:	e5950008 	ldr	r0, [r5, #8]
 1007770:	e3013111 	movw	r3, #4369	; 0x1111
 1007774:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007778:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 100777c:	e3404116 	movt	r4, #278	; 0x116
 1007780:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007784:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007788:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100778c:	1a000018 	bne	10077f4 <XGpioPs_IntrDisablePin+0x98>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007790:	e5953018 	ldr	r3, [r5, #24]
 1007794:	e1530001 	cmp	r3, r1
 1007798:	9a00000d 	bls	10077d4 <XGpioPs_IntrDisablePin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 100779c:	e6ef0071 	uxtb	r0, r1
 10077a0:	e28d2007 	add	r2, sp, #7
 10077a4:	e28d1006 	add	r1, sp, #6
 10077a8:	ebfffd89 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	IntrReg = ((u32)1 << (u32)PinNumber);
 10077ac:	e5ddc007 	ldrb	ip, [sp, #7]
 10077b0:	e3a02001 	mov	r2, #1
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10077b4:	e5dd0006 	ldrb	r0, [sp, #6]
 10077b8:	e3a03f85 	mov	r3, #532	; 0x214
 10077bc:	e5951004 	ldr	r1, [r5, #4]
	IntrReg = ((u32)1 << (u32)PinNumber);
 10077c0:	e1a02c12 	lsl	r2, r2, ip
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 10077c4:	e0833300 	add	r3, r3, r0, lsl #6
 10077c8:	e7832001 	str	r2, [r3, r1]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTDIS_OFFSET, IntrReg);
}
 10077cc:	e28dd00c 	add	sp, sp, #12
 10077d0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 10077d4:	e30904e4 	movw	r0, #38116	; 0x94e4
 10077d8:	e3a010d1 	mov	r1, #209	; 0xd1
 10077dc:	e3400105 	movt	r0, #261	; 0x105
 10077e0:	eb0006c0 	bl	10092e8 <Xil_Assert>
 10077e4:	e3a03001 	mov	r3, #1
 10077e8:	e5843000 	str	r3, [r4]
}
 10077ec:	e28dd00c 	add	sp, sp, #12
 10077f0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10077f4:	e30904e4 	movw	r0, #38116	; 0x94e4
 10077f8:	e3a010d0 	mov	r1, #208	; 0xd0
 10077fc:	e3400105 	movt	r0, #261	; 0x105
 1007800:	eb0006b8 	bl	10092e8 <Xil_Assert>
 1007804:	e3a03001 	mov	r3, #1
 1007808:	e5843000 	str	r3, [r4]
}
 100780c:	e28dd00c 	add	sp, sp, #12
 1007810:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007814:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007818:	e3a010cf 	mov	r1, #207	; 0xcf
 100781c:	e3400105 	movt	r0, #261	; 0x105
 1007820:	eb0006b0 	bl	10092e8 <Xil_Assert>
 1007824:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007828:	e3a02001 	mov	r2, #1
 100782c:	e3403116 	movt	r3, #278	; 0x116
 1007830:	e5832000 	str	r2, [r3]
 1007834:	eaffffe4 	b	10077cc <XGpioPs_IntrDisablePin+0x70>

01007838 <XGpioPs_IntrGetEnabled>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabled(const XGpioPs *InstancePtr, u8 Bank)
{
 1007838:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrMask;

	Xil_AssertNonvoid(InstancePtr != NULL);
 100783c:	e2506000 	subs	r6, r0, #0
 1007840:	0a000021 	beq	10078cc <XGpioPs_IntrGetEnabled+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007844:	e5962008 	ldr	r2, [r6, #8]
 1007848:	e3013111 	movw	r3, #4369	; 0x1111
 100784c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007850:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1007854:	e3405116 	movt	r5, #278	; 0x116
 1007858:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100785c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007860:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007864:	1a000008 	bne	100788c <XGpioPs_IntrGetEnabled+0x54>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1007868:	e5d6301c 	ldrb	r3, [r6, #28]
 100786c:	e1530001 	cmp	r3, r1
 1007870:	9a00000d 	bls	10078ac <XGpioPs_IntrGetEnabled+0x74>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	IntrMask = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007874:	e5962004 	ldr	r2, [r6, #4]
 1007878:	e3a03f83 	mov	r3, #524	; 0x20c
 100787c:	e0831301 	add	r1, r3, r1, lsl #6
	return *(volatile u32 *) Addr;
 1007880:	e7914002 	ldr	r4, [r1, r2]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);
	return (~IntrMask);
 1007884:	e1e00004 	mvn	r0, r4
 1007888:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100788c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007890:	e3a010f6 	mov	r1, #246	; 0xf6
 1007894:	e3400105 	movt	r0, #261	; 0x105
 1007898:	eb000692 	bl	10092e8 <Xil_Assert>
 100789c:	e3a03001 	mov	r3, #1
 10078a0:	e1a00004 	mov	r0, r4
 10078a4:	e5853000 	str	r3, [r5]
 10078a8:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 10078ac:	e30904e4 	movw	r0, #38116	; 0x94e4
 10078b0:	e3a010f7 	mov	r1, #247	; 0xf7
 10078b4:	e3400105 	movt	r0, #261	; 0x105
 10078b8:	eb00068a 	bl	10092e8 <Xil_Assert>
 10078bc:	e3a03001 	mov	r3, #1
 10078c0:	e1a00004 	mov	r0, r4
 10078c4:	e5853000 	str	r3, [r5]
}
 10078c8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10078cc:	e30904e4 	movw	r0, #38116	; 0x94e4
 10078d0:	e3a010f5 	mov	r1, #245	; 0xf5
 10078d4:	e3400105 	movt	r0, #261	; 0x105
 10078d8:	eb000682 	bl	10092e8 <Xil_Assert>
 10078dc:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10078e0:	e3a02001 	mov	r2, #1
 10078e4:	e3403116 	movt	r3, #278	; 0x116
 10078e8:	e1a00006 	mov	r0, r6
 10078ec:	e5832000 	str	r2, [r3]
 10078f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010078f4 <XGpioPs_IntrGetEnabledPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetEnabledPin(const XGpioPs *InstancePtr, u32 Pin)
{
 10078f4:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 10078f8:	e2506000 	subs	r6, r0, #0
{
 10078fc:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007900:	0a00002b 	beq	10079b4 <XGpioPs_IntrGetEnabledPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007904:	e5962008 	ldr	r2, [r6, #8]
 1007908:	e3013111 	movw	r3, #4369	; 0x1111
 100790c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007910:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1007914:	e3405116 	movt	r5, #278	; 0x116
 1007918:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100791c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007920:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007924:	1a000019 	bne	1007990 <XGpioPs_IntrGetEnabledPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1007928:	e5963018 	ldr	r3, [r6, #24]
 100792c:	e1530001 	cmp	r3, r1
 1007930:	9a00000d 	bls	100796c <XGpioPs_IntrGetEnabledPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007934:	e6ef0071 	uxtb	r0, r1
 1007938:	e28d2007 	add	r2, sp, #7
 100793c:	e28d1006 	add	r1, sp, #6
 1007940:	ebfffd23 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007944:	e5dd1006 	ldrb	r1, [sp, #6]
 1007948:	e3a03f83 	mov	r3, #524	; 0x20c
 100794c:	e5962004 	ldr	r2, [r6, #4]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTMASK_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 1007950:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg  = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007954:	e0833301 	add	r3, r3, r1, lsl #6
 1007958:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? FALSE : TRUE);
 100795c:	e1e04430 	mvn	r4, r0, lsr r4
 1007960:	e2040001 	and	r0, r4, #1
}
 1007964:	e28dd008 	add	sp, sp, #8
 1007968:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 100796c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007970:	e300111f 	movw	r1, #287	; 0x11f
 1007974:	e3400105 	movt	r0, #261	; 0x105
 1007978:	eb00065a 	bl	10092e8 <Xil_Assert>
 100797c:	e3a03001 	mov	r3, #1
 1007980:	e1a00004 	mov	r0, r4
 1007984:	e5853000 	str	r3, [r5]
}
 1007988:	e28dd008 	add	sp, sp, #8
 100798c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007990:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007994:	e300111e 	movw	r1, #286	; 0x11e
 1007998:	e3400105 	movt	r0, #261	; 0x105
 100799c:	eb000651 	bl	10092e8 <Xil_Assert>
 10079a0:	e3a03001 	mov	r3, #1
 10079a4:	e1a00004 	mov	r0, r4
 10079a8:	e5853000 	str	r3, [r5]
}
 10079ac:	e28dd008 	add	sp, sp, #8
 10079b0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10079b4:	e30904e4 	movw	r0, #38116	; 0x94e4
 10079b8:	e300111d 	movw	r1, #285	; 0x11d
 10079bc:	e3400105 	movt	r0, #261	; 0x105
 10079c0:	eb000648 	bl	10092e8 <Xil_Assert>
 10079c4:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10079c8:	e3a02001 	mov	r2, #1
 10079cc:	e3403116 	movt	r3, #278	; 0x116
 10079d0:	e1a00006 	mov	r0, r6
 10079d4:	e5832000 	str	r2, [r3]
 10079d8:	eaffffe1 	b	1007964 <XGpioPs_IntrGetEnabledPin+0x70>

010079dc <XGpioPs_IntrGetStatus>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatus(const XGpioPs *InstancePtr, u8 Bank)
{
 10079dc:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10079e0:	e2506000 	subs	r6, r0, #0
 10079e4:	0a000020 	beq	1007a6c <XGpioPs_IntrGetStatus+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10079e8:	e5962008 	ldr	r2, [r6, #8]
 10079ec:	e3013111 	movw	r3, #4369	; 0x1111
 10079f0:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10079f4:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 10079f8:	e3405116 	movt	r5, #278	; 0x116
 10079fc:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a00:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007a04:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a08:	1a000007 	bne	1007a2c <XGpioPs_IntrGetStatus+0x50>
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1007a0c:	e5d6301c 	ldrb	r3, [r6, #28]
 1007a10:	e1530001 	cmp	r3, r1
 1007a14:	9a00000c 	bls	1007a4c <XGpioPs_IntrGetStatus+0x70>
        } else {
                Xil_AssertNonvoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	return XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007a18:	e5962004 	ldr	r2, [r6, #4]
 1007a1c:	e3a03f86 	mov	r3, #536	; 0x218
 1007a20:	e0831301 	add	r1, r3, r1, lsl #6
 1007a24:	e7910002 	ldr	r0, [r1, r2]
 1007a28:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007a2c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007a30:	e3a01d05 	mov	r1, #320	; 0x140
 1007a34:	e3400105 	movt	r0, #261	; 0x105
 1007a38:	eb00062a 	bl	10092e8 <Xil_Assert>
 1007a3c:	e3a03001 	mov	r3, #1
 1007a40:	e1a00004 	mov	r0, r4
 1007a44:	e5853000 	str	r3, [r5]
 1007a48:	e8bd8070 	pop	{r4, r5, r6, pc}
        Xil_AssertNonvoid(Bank < InstancePtr->MaxBanks);
 1007a4c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007a50:	e3001141 	movw	r1, #321	; 0x141
 1007a54:	e3400105 	movt	r0, #261	; 0x105
 1007a58:	eb000622 	bl	10092e8 <Xil_Assert>
 1007a5c:	e3a03001 	mov	r3, #1
 1007a60:	e1a00004 	mov	r0, r4
 1007a64:	e5853000 	str	r3, [r5]
				((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				XGPIOPS_INTSTS_OFFSET);
}
 1007a68:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007a6c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007a70:	e300113f 	movw	r1, #319	; 0x13f
 1007a74:	e3400105 	movt	r0, #261	; 0x105
 1007a78:	eb00061a 	bl	10092e8 <Xil_Assert>
 1007a7c:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007a80:	e3a02001 	mov	r2, #1
 1007a84:	e3403116 	movt	r3, #278	; 0x116
 1007a88:	e1a00006 	mov	r0, r6
 1007a8c:	e5832000 	str	r2, [r3]
 1007a90:	e8bd8070 	pop	{r4, r5, r6, pc}

01007a94 <XGpioPs_IntrGetStatusPin>:
*
* @note		None.
*
*****************************************************************************/
u32 XGpioPs_IntrGetStatusPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1007a94:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1007a98:	e2506000 	subs	r6, r0, #0
{
 1007a9c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007aa0:	0a00002b 	beq	1007b54 <XGpioPs_IntrGetStatusPin+0xc0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007aa4:	e5962008 	ldr	r2, [r6, #8]
 1007aa8:	e3013111 	movw	r3, #4369	; 0x1111
 1007aac:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007ab0:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1007ab4:	e3405116 	movt	r5, #278	; 0x116
 1007ab8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007abc:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007ac0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ac4:	1a000019 	bne	1007b30 <XGpioPs_IntrGetStatusPin+0x9c>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1007ac8:	e5963018 	ldr	r3, [r6, #24]
 1007acc:	e1530001 	cmp	r3, r1
 1007ad0:	9a00000d 	bls	1007b0c <XGpioPs_IntrGetStatusPin+0x78>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007ad4:	e6ef0071 	uxtb	r0, r1
 1007ad8:	e28d2007 	add	r2, sp, #7
 1007adc:	e28d1006 	add	r1, sp, #6
 1007ae0:	ebfffcbb 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007ae4:	e5dd1006 	ldrb	r1, [sp, #6]
 1007ae8:	e3a03f86 	mov	r3, #536	; 0x218
 1007aec:	e5962004 	ldr	r2, [r6, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 1007af0:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007af4:	e0833301 	add	r3, r3, r1, lsl #6
 1007af8:	e7930002 	ldr	r0, [r3, r2]
	return (((IntrReg & ((u32)1 << PinNumber)) != (u32)0)? TRUE : FALSE);
 1007afc:	e1a04430 	lsr	r4, r0, r4
 1007b00:	e2040001 	and	r0, r4, #1
}
 1007b04:	e28dd008 	add	sp, sp, #8
 1007b08:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1007b0c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007b10:	e3a01f5a 	mov	r1, #360	; 0x168
 1007b14:	e3400105 	movt	r0, #261	; 0x105
 1007b18:	eb0005f2 	bl	10092e8 <Xil_Assert>
 1007b1c:	e3a03001 	mov	r3, #1
 1007b20:	e1a00004 	mov	r0, r4
 1007b24:	e5853000 	str	r3, [r5]
}
 1007b28:	e28dd008 	add	sp, sp, #8
 1007b2c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b30:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007b34:	e3001167 	movw	r1, #359	; 0x167
 1007b38:	e3400105 	movt	r0, #261	; 0x105
 1007b3c:	eb0005e9 	bl	10092e8 <Xil_Assert>
 1007b40:	e3a03001 	mov	r3, #1
 1007b44:	e1a00004 	mov	r0, r4
 1007b48:	e5853000 	str	r3, [r5]
}
 1007b4c:	e28dd008 	add	sp, sp, #8
 1007b50:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1007b54:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007b58:	e3001166 	movw	r1, #358	; 0x166
 1007b5c:	e3400105 	movt	r0, #261	; 0x105
 1007b60:	eb0005e0 	bl	10092e8 <Xil_Assert>
 1007b64:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007b68:	e3a02001 	mov	r2, #1
 1007b6c:	e3403116 	movt	r3, #278	; 0x116
 1007b70:	e1a00006 	mov	r0, r6
 1007b74:	e5832000 	str	r2, [r3]
 1007b78:	eaffffe1 	b	1007b04 <XGpioPs_IntrGetStatusPin+0x70>

01007b7c <XGpioPs_IntrClear>:
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClear(const XGpioPs *InstancePtr, u8 Bank, u32 Mask)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1007b7c:	e3500000 	cmp	r0, #0
{
 1007b80:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007b84:	0a00001e 	beq	1007c04 <XGpioPs_IntrClear+0x88>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b88:	e590c008 	ldr	ip, [r0, #8]
 1007b8c:	e3013111 	movw	r3, #4369	; 0x1111
 1007b90:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007b94:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1007b98:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007b9c:	e15c0003 	cmp	ip, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007ba0:	e3a03000 	mov	r3, #0
 1007ba4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ba8:	1a000007 	bne	1007bcc <XGpioPs_IntrClear+0x50>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007bac:	e5d0301c 	ldrb	r3, [r0, #28]
 1007bb0:	e1530001 	cmp	r3, r1
 1007bb4:	9a00000b 	bls	1007be8 <XGpioPs_IntrClear+0x6c>
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	/* Clear the currently pending interrupts. */
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007bb8:	e5900004 	ldr	r0, [r0, #4]
 1007bbc:	e3a03f86 	mov	r3, #536	; 0x218
 1007bc0:	e0831301 	add	r1, r3, r1, lsl #6
	*LocalAddr = Value;
 1007bc4:	e7812000 	str	r2, [r1, r0]
 1007bc8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007bcc:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007bd0:	e3a01f63 	mov	r1, #396	; 0x18c
 1007bd4:	e3400105 	movt	r0, #261	; 0x105
 1007bd8:	eb0005c2 	bl	10092e8 <Xil_Assert>
 1007bdc:	e3a03001 	mov	r3, #1
 1007be0:	e5843000 	str	r3, [r4]
 1007be4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007be8:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007bec:	e300118d 	movw	r1, #397	; 0x18d
 1007bf0:	e3400105 	movt	r0, #261	; 0x105
 1007bf4:	eb0005bb 	bl	10092e8 <Xil_Assert>
 1007bf8:	e3a03001 	mov	r3, #1
 1007bfc:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, Mask);
}
 1007c00:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007c04:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007c08:	e300118b 	movw	r1, #395	; 0x18b
 1007c0c:	e3400105 	movt	r0, #261	; 0x105
 1007c10:	eb0005b4 	bl	10092e8 <Xil_Assert>
 1007c14:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007c18:	e3a02001 	mov	r2, #1
 1007c1c:	e3403116 	movt	r3, #278	; 0x116
 1007c20:	e5832000 	str	r2, [r3]
 1007c24:	e8bd8010 	pop	{r4, pc}

01007c28 <XGpioPs_IntrClearPin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_IntrClearPin(const XGpioPs *InstancePtr, u32 Pin)
{
 1007c28:	e92d4030 	push	{r4, r5, lr}
	u8 Bank;
	u8 PinNumber;
	u32 IntrReg;

	Xil_AssertVoid(InstancePtr != NULL);
 1007c2c:	e2505000 	subs	r5, r0, #0
{
 1007c30:	e24dd00c 	sub	sp, sp, #12
	Xil_AssertVoid(InstancePtr != NULL);
 1007c34:	0a00002a 	beq	1007ce4 <XGpioPs_IntrClearPin+0xbc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007c38:	e5950008 	ldr	r0, [r5, #8]
 1007c3c:	e3013111 	movw	r3, #4369	; 0x1111
 1007c40:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007c44:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1007c48:	e3404116 	movt	r4, #278	; 0x116
 1007c4c:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007c50:	e1500003 	cmp	r0, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007c54:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007c58:	1a000019 	bne	1007cc4 <XGpioPs_IntrClearPin+0x9c>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007c5c:	e5953018 	ldr	r3, [r5, #24]
 1007c60:	e1530001 	cmp	r3, r1
 1007c64:	9a00000e 	bls	1007ca4 <XGpioPs_IntrClearPin+0x7c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007c68:	e6ef0071 	uxtb	r0, r1
 1007c6c:	e28d2007 	add	r2, sp, #7
 1007c70:	e28d1006 	add	r1, sp, #6
 1007c74:	ebfffc56 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	/* Clear the specified pending interrupts. */
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007c78:	e5dd2006 	ldrb	r2, [sp, #6]
 1007c7c:	e3a03f86 	mov	r3, #536	; 0x218
 1007c80:	e5951004 	ldr	r1, [r5, #4]
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTSTS_OFFSET);

	IntrReg &= ((u32)1 << PinNumber);
 1007c84:	e3a0c001 	mov	ip, #1
 1007c88:	e5dd0007 	ldrb	r0, [sp, #7]
	IntrReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007c8c:	e0833302 	add	r3, r3, r2, lsl #6
	return *(volatile u32 *) Addr;
 1007c90:	e7932001 	ldr	r2, [r3, r1]
	IntrReg &= ((u32)1 << PinNumber);
 1007c94:	e002201c 	and	r2, r2, ip, lsl r0
	*LocalAddr = Value;
 1007c98:	e7832001 	str	r2, [r3, r1]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTSTS_OFFSET, IntrReg);
}
 1007c9c:	e28dd00c 	add	sp, sp, #12
 1007ca0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007ca4:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007ca8:	e30011b1 	movw	r1, #433	; 0x1b1
 1007cac:	e3400105 	movt	r0, #261	; 0x105
 1007cb0:	eb00058c 	bl	10092e8 <Xil_Assert>
 1007cb4:	e3a03001 	mov	r3, #1
 1007cb8:	e5843000 	str	r3, [r4]
}
 1007cbc:	e28dd00c 	add	sp, sp, #12
 1007cc0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007cc4:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007cc8:	e3a01e1b 	mov	r1, #432	; 0x1b0
 1007ccc:	e3400105 	movt	r0, #261	; 0x105
 1007cd0:	eb000584 	bl	10092e8 <Xil_Assert>
 1007cd4:	e3a03001 	mov	r3, #1
 1007cd8:	e5843000 	str	r3, [r4]
}
 1007cdc:	e28dd00c 	add	sp, sp, #12
 1007ce0:	e8bd8030 	pop	{r4, r5, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007ce4:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007ce8:	e30011af 	movw	r1, #431	; 0x1af
 1007cec:	e3400105 	movt	r0, #261	; 0x105
 1007cf0:	eb00057c 	bl	10092e8 <Xil_Assert>
 1007cf4:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007cf8:	e3a02001 	mov	r2, #1
 1007cfc:	e3403116 	movt	r3, #278	; 0x116
 1007d00:	e5832000 	str	r2, [r3]
 1007d04:	eaffffe4 	b	1007c9c <XGpioPs_IntrClearPin+0x74>

01007d08 <XGpioPs_SetIntrType>:
*
*****************************************************************************/
void XGpioPs_SetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 IntrType,
			  u32 IntrPolarity, u32 IntrOnAny)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1007d08:	e3500000 	cmp	r0, #0
{
 1007d0c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007d10:	0a000025 	beq	1007dac <XGpioPs_SetIntrType+0xa4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007d14:	e590e008 	ldr	lr, [r0, #8]
 1007d18:	e301c111 	movw	ip, #4369	; 0x1111
 1007d1c:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007d20:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1007d24:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007d28:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1007d2c:	e3a0c000 	mov	ip, #0
 1007d30:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007d34:	1a00000e 	bne	1007d74 <XGpioPs_SetIntrType+0x6c>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007d38:	e5d0c01c 	ldrb	ip, [r0, #28]
 1007d3c:	e15c0001 	cmp	ip, r1
 1007d40:	9a000012 	bls	1007d90 <XGpioPs_SetIntrType+0x88>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007d44:	e1a01301 	lsl	r1, r1, #6
 1007d48:	e590e004 	ldr	lr, [r0, #4]
 1007d4c:	e2814f87 	add	r4, r1, #540	; 0x21c
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTTYPE_OFFSET, IntrType);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007d50:	e281ce22 	add	ip, r1, #544	; 0x220
 1007d54:	e784200e 	str	r2, [r4, lr]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTPOL_OFFSET, IntrPolarity);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007d58:	e2811f89 	add	r1, r1, #548	; 0x224
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007d5c:	e5902004 	ldr	r2, [r0, #4]
 1007d60:	e78c3002 	str	r3, [ip, r2]
 1007d64:	e59d2008 	ldr	r2, [sp, #8]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007d68:	e5903004 	ldr	r3, [r0, #4]
 1007d6c:	e7812003 	str	r2, [r1, r3]
 1007d70:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007d74:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007d78:	e30011e5 	movw	r1, #485	; 0x1e5
 1007d7c:	e3400105 	movt	r0, #261	; 0x105
 1007d80:	eb000558 	bl	10092e8 <Xil_Assert>
 1007d84:	e3a03001 	mov	r3, #1
 1007d88:	e5843000 	str	r3, [r4]
 1007d8c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007d90:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007d94:	e30011e6 	movw	r1, #486	; 0x1e6
 1007d98:	e3400105 	movt	r0, #261	; 0x105
 1007d9c:	eb000551 	bl	10092e8 <Xil_Assert>
 1007da0:	e3a03001 	mov	r3, #1
 1007da4:	e5843000 	str	r3, [r4]
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAny);
}
 1007da8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007dac:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007db0:	e3a01f79 	mov	r1, #484	; 0x1e4
 1007db4:	e3400105 	movt	r0, #261	; 0x105
 1007db8:	eb00054a 	bl	10092e8 <Xil_Assert>
 1007dbc:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007dc0:	e3a02001 	mov	r2, #1
 1007dc4:	e3403116 	movt	r3, #278	; 0x116
 1007dc8:	e5832000 	str	r2, [r3]
 1007dcc:	e8bd8010 	pop	{r4, pc}

01007dd0 <XGpioPs_GetIntrType>:
*****************************************************************************/
void XGpioPs_GetIntrType(const XGpioPs *InstancePtr, u8 Bank, u32 *IntrType,
			  u32 *IntrPolarity, u32 *IntrOnAny)

{
	Xil_AssertVoid(InstancePtr != NULL);
 1007dd0:	e3500000 	cmp	r0, #0
{
 1007dd4:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1007dd8:	0a000028 	beq	1007e80 <XGpioPs_GetIntrType+0xb0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ddc:	e590e008 	ldr	lr, [r0, #8]
 1007de0:	e301c111 	movw	ip, #4369	; 0x1111
 1007de4:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007de8:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1007dec:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007df0:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 1007df4:	e3a0c000 	mov	ip, #0
 1007df8:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007dfc:	1a000011 	bne	1007e48 <XGpioPs_GetIntrType+0x78>
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007e00:	e5d0c01c 	ldrb	ip, [r0, #28]
 1007e04:	e15c0001 	cmp	ip, r1
 1007e08:	9a000015 	bls	1007e64 <XGpioPs_GetIntrType+0x94>
        } else {
                Xil_AssertVoid((Bank !=XGPIOPS_ONE) && (Bank !=XGPIOPS_TWO));
        }
#endif

	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007e0c:	e590e004 	ldr	lr, [r0, #4]
 1007e10:	e1a01301 	lsl	r1, r1, #6
 1007e14:	e2814f87 	add	r4, r1, #540	; 0x21c
				     ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				     XGPIOPS_INTTYPE_OFFSET);

	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007e18:	e281ce22 	add	ip, r1, #544	; 0x220
	return *(volatile u32 *) Addr;
 1007e1c:	e794e00e 	ldr	lr, [r4, lr]
					 ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					 XGPIOPS_INTPOL_OFFSET);

	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007e20:	e2811f89 	add	r1, r1, #548	; 0x224
	*IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007e24:	e582e000 	str	lr, [r2]
	*IntrPolarity = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007e28:	e5902004 	ldr	r2, [r0, #4]
 1007e2c:	e79c2002 	ldr	r2, [ip, r2]
 1007e30:	e5832000 	str	r2, [r3]
	*IntrOnAny = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007e34:	e5903004 	ldr	r3, [r0, #4]
 1007e38:	e59d2008 	ldr	r2, [sp, #8]
 1007e3c:	e7913003 	ldr	r3, [r1, r3]
 1007e40:	e5823000 	str	r3, [r2]
 1007e44:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007e48:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007e4c:	e3001219 	movw	r1, #537	; 0x219
 1007e50:	e3400105 	movt	r0, #261	; 0x105
 1007e54:	eb000523 	bl	10092e8 <Xil_Assert>
 1007e58:	e3a03001 	mov	r3, #1
 1007e5c:	e5843000 	str	r3, [r4]
 1007e60:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Bank < InstancePtr->MaxBanks);
 1007e64:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007e68:	e300121a 	movw	r1, #538	; 0x21a
 1007e6c:	e3400105 	movt	r0, #261	; 0x105
 1007e70:	eb00051c 	bl	10092e8 <Xil_Assert>
 1007e74:	e3a03001 	mov	r3, #1
 1007e78:	e5843000 	str	r3, [r4]
				      ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				      XGPIOPS_INTANY_OFFSET);
}
 1007e7c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1007e80:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007e84:	e3a01f86 	mov	r1, #536	; 0x218
 1007e88:	e3400105 	movt	r0, #261	; 0x105
 1007e8c:	eb000515 	bl	10092e8 <Xil_Assert>
 1007e90:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1007e94:	e3a02001 	mov	r2, #1
 1007e98:	e3403116 	movt	r3, #278	; 0x116
 1007e9c:	e5832000 	str	r2, [r3]
 1007ea0:	e8bd8010 	pop	{r4, pc}

01007ea4 <XGpioPs_SetIntrTypePin>:
*
* @note		None.
*
*****************************************************************************/
void XGpioPs_SetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin, u8 IrqType)
{
 1007ea4:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrPolReg;
	u32 IntrOnAnyReg;
	u8 Bank;
	u8 PinNumber;

	Xil_AssertVoid(InstancePtr != NULL);
 1007ea8:	e2505000 	subs	r5, r0, #0
{
 1007eac:	e24dd008 	sub	sp, sp, #8
	Xil_AssertVoid(InstancePtr != NULL);
 1007eb0:	0a000055 	beq	100800c <XGpioPs_SetIntrTypePin+0x168>
 1007eb4:	e1a06002 	mov	r6, r2
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007eb8:	e5952008 	ldr	r2, [r5, #8]
 1007ebc:	e3013111 	movw	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007ec0:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ec4:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1007ec8:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ecc:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1007ed0:	e3a03000 	mov	r3, #0
 1007ed4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007ed8:	1a000019 	bne	1007f44 <XGpioPs_SetIntrTypePin+0xa0>
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007edc:	e5953018 	ldr	r3, [r5, #24]
 1007ee0:	e1530001 	cmp	r3, r1
 1007ee4:	9a00001e 	bls	1007f64 <XGpioPs_SetIntrTypePin+0xc0>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 1007ee8:	e3560004 	cmp	r6, #4
 1007eec:	8a00003e 	bhi	1007fec <XGpioPs_SetIntrTypePin+0x148>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1007ef0:	e6ef0071 	uxtb	r0, r1
 1007ef4:	e28d2007 	add	r2, sp, #7
 1007ef8:	e28d1006 	add	r1, sp, #6
 1007efc:	ebfffbb4 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007f00:	e5dd3006 	ldrb	r3, [sp, #6]

	IntrOnAnyReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
					((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
					XGPIOPS_INTANY_OFFSET);

	switch (IrqType) {
 1007f04:	e2466001 	sub	r6, r6, #1
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007f08:	e5952004 	ldr	r2, [r5, #4]
		case XGPIOPS_IRQ_TYPE_LEVEL_HIGH:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
			break;
		case XGPIOPS_IRQ_TYPE_LEVEL_LOW:
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1007f0c:	e3a0e001 	mov	lr, #1
 1007f10:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrTypeReg = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1007f14:	e1a03303 	lsl	r3, r3, #6
 1007f18:	e0832002 	add	r2, r3, r2
 1007f1c:	e592121c 	ldr	r1, [r2, #540]	; 0x21c
 1007f20:	e5920220 	ldr	r0, [r2, #544]	; 0x220
 1007f24:	e592c224 	ldr	ip, [r2, #548]	; 0x224
	switch (IrqType) {
 1007f28:	e3560003 	cmp	r6, #3
 1007f2c:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
 1007f30:	ea00003e 	b	1008030 <XGpioPs_SetIntrTypePin+0x18c>
 1007f34:	01007fc4 	.word	0x01007fc4
 1007f38:	01007fb4 	.word	0x01007fb4
 1007f3c:	01007f84 	.word	0x01007f84
 1007f40:	01007fdc 	.word	0x01007fdc
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1007f44:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007f48:	e3001249 	movw	r1, #585	; 0x249
 1007f4c:	e3400105 	movt	r0, #261	; 0x105
 1007f50:	eb0004e4 	bl	10092e8 <Xil_Assert>
 1007f54:	e3a03001 	mov	r3, #1
 1007f58:	e5843000 	str	r3, [r4]
			  XGPIOPS_INTPOL_OFFSET, IntrPolReg);

	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
			  ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
			  XGPIOPS_INTANY_OFFSET, IntrOnAnyReg);
}
 1007f5c:	e28dd008 	add	sp, sp, #8
 1007f60:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Pin < InstancePtr->MaxPinNum);
 1007f64:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007f68:	e300124a 	movw	r1, #586	; 0x24a
 1007f6c:	e3400105 	movt	r0, #261	; 0x105
 1007f70:	eb0004dc 	bl	10092e8 <Xil_Assert>
 1007f74:	e3a03001 	mov	r3, #1
 1007f78:	e5843000 	str	r3, [r4]
}
 1007f7c:	e28dd008 	add	sp, sp, #8
 1007f80:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1007f84:	e1a0e41e 	lsl	lr, lr, r4
 1007f88:	e1c1100e 	bic	r1, r1, lr
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1007f8c:	e180000e 	orr	r0, r0, lr
	*LocalAddr = Value;
 1007f90:	e582121c 	str	r1, [r2, #540]	; 0x21c
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007f94:	e2831e22 	add	r1, r3, #544	; 0x220
 1007f98:	e5952004 	ldr	r2, [r5, #4]
	XGpioPs_WriteReg(InstancePtr->GpioConfig.BaseAddr,
 1007f9c:	e2833f89 	add	r3, r3, #548	; 0x224
 1007fa0:	e7810002 	str	r0, [r1, r2]
 1007fa4:	e5952004 	ldr	r2, [r5, #4]
 1007fa8:	e783c002 	str	ip, [r3, r2]
}
 1007fac:	e28dd008 	add	sp, sp, #8
 1007fb0:	e8bd8070 	pop	{r4, r5, r6, pc}
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1007fb4:	e1a0e41e 	lsl	lr, lr, r4
 1007fb8:	e18e1001 	orr	r1, lr, r1
			IntrOnAnyReg |= ((u32)1 << (u32)PinNumber);
 1007fbc:	e18cc00e 	orr	ip, ip, lr
			break;
 1007fc0:	eafffff2 	b	1007f90 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1007fc4:	e1a0e41e 	lsl	lr, lr, r4
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1007fc8:	e1e0400e 	mvn	r4, lr
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1007fcc:	e18e1001 	orr	r1, lr, r1
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1007fd0:	e0000004 	and	r0, r0, r4
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 1007fd4:	e00cc004 	and	ip, ip, r4
			break;
 1007fd8:	eaffffec 	b	1007f90 <XGpioPs_SetIntrTypePin+0xec>
			IntrTypeReg &= ~((u32)1 << (u32)PinNumber);
 1007fdc:	e1e0e41e 	mvn	lr, lr, lsl r4
 1007fe0:	e001100e 	and	r1, r1, lr
			IntrPolReg &= ~((u32)1 << (u32)PinNumber);
 1007fe4:	e000000e 	and	r0, r0, lr
			break;
 1007fe8:	eaffffe8 	b	1007f90 <XGpioPs_SetIntrTypePin+0xec>
	Xil_AssertVoid(IrqType <= XGPIOPS_IRQ_TYPE_LEVEL_LOW);
 1007fec:	e30904e4 	movw	r0, #38116	; 0x94e4
 1007ff0:	e300124b 	movw	r1, #587	; 0x24b
 1007ff4:	e3400105 	movt	r0, #261	; 0x105
 1007ff8:	eb0004ba 	bl	10092e8 <Xil_Assert>
 1007ffc:	e3a03001 	mov	r3, #1
 1008000:	e5843000 	str	r3, [r4]
}
 1008004:	e28dd008 	add	sp, sp, #8
 1008008:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 100800c:	e30904e4 	movw	r0, #38116	; 0x94e4
 1008010:	e3a01f92 	mov	r1, #584	; 0x248
 1008014:	e3400105 	movt	r0, #261	; 0x105
 1008018:	eb0004b2 	bl	10092e8 <Xil_Assert>
 100801c:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008020:	e3a02001 	mov	r2, #1
 1008024:	e3403116 	movt	r3, #278	; 0x116
 1008028:	e5832000 	str	r2, [r3]
 100802c:	eaffffca 	b	1007f5c <XGpioPs_SetIntrTypePin+0xb8>
			IntrTypeReg |= ((u32)1 << (u32)PinNumber);
 1008030:	e1a0e41e 	lsl	lr, lr, r4
 1008034:	e18e1001 	orr	r1, lr, r1
			IntrPolReg |= ((u32)1 << (u32)PinNumber);
 1008038:	e180000e 	orr	r0, r0, lr
			IntrOnAnyReg &= ~((u32)1 << (u32)PinNumber);
 100803c:	e1ccc00e 	bic	ip, ip, lr
			break;
 1008040:	eaffffd2 	b	1007f90 <XGpioPs_SetIntrTypePin+0xec>

01008044 <XGpioPs_GetIntrTypePin>:
* @note		Use XGPIOPS_IRQ_TYPE_* defined in xgpiops.h for the IRQ type
*		returned by this function.
*
*****************************************************************************/
u8 XGpioPs_GetIntrTypePin(const XGpioPs *InstancePtr, u32 Pin)
{
 1008044:	e92d4070 	push	{r4, r5, r6, lr}
	u32 IntrOnAny;
	u8 Bank;
	u8 PinNumber;
	u8 IrqType;

	Xil_AssertNonvoid(InstancePtr != NULL);
 1008048:	e2506000 	subs	r6, r0, #0
{
 100804c:	e24dd008 	sub	sp, sp, #8
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008050:	0a000034 	beq	1008128 <XGpioPs_GetIntrTypePin+0xe4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008054:	e5962008 	ldr	r2, [r6, #8]
 1008058:	e3013111 	movw	r3, #4369	; 0x1111
 100805c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008060:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1008064:	e3405116 	movt	r5, #278	; 0x116
 1008068:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100806c:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008070:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008074:	1a00001e 	bne	10080f4 <XGpioPs_GetIntrTypePin+0xb0>
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 1008078:	e5963018 	ldr	r3, [r6, #24]
 100807c:	e1530001 	cmp	r3, r1
 1008080:	9a000012 	bls	10080d0 <XGpioPs_GetIntrTypePin+0x8c>

	/* Get the Bank number and Pin number within the bank. */
#ifdef versal
	XGpioPs_GetBankPin(InstancePtr,(u8)Pin, &Bank, &PinNumber);
#else
	XGpioPs_GetBankPin((u8)Pin, &Bank, &PinNumber);
 1008084:	e6ef0071 	uxtb	r0, r1
 1008088:	e28d2007 	add	r2, sp, #7
 100808c:	e28d1006 	add	r1, sp, #6
 1008090:	ebfffb4f 	bl	1006dd4 <XGpioPs_GetBankPin>
#endif

	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 1008094:	e5dd2006 	ldrb	r2, [sp, #6]
				    ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 1008098:	e3a00001 	mov	r0, #1
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100809c:	e5963004 	ldr	r3, [r6, #4]
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 10080a0:	e5dd4007 	ldrb	r4, [sp, #7]
	IntrType = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 10080a4:	e0833302 	add	r3, r3, r2, lsl #6
				    XGPIOPS_INTTYPE_OFFSET) & ((u32)1 << PinNumber);
 10080a8:	e1a04410 	lsl	r4, r0, r4
	return *(volatile u32 *) Addr;
 10080ac:	e593221c 	ldr	r2, [r3, #540]	; 0x21c

	if (IntrType == ((u32)1 << PinNumber)) {
 10080b0:	e1d42002 	bics	r2, r4, r2
 10080b4:	0a000011 	beq	1008100 <XGpioPs_GetIntrTypePin+0xbc>
 10080b8:	e5933220 	ldr	r3, [r3, #544]	; 0x220

		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
				   ((u32)(Bank) * XGPIOPS_REG_MASK_OFFSET) +
				   XGPIOPS_INTPOL_OFFSET) & ((u32)1 << PinNumber);

		if (IntrPol == ((u32)1 << PinNumber)) {
 10080bc:	e1d43003 	bics	r3, r4, r3
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_HIGH;
		} else {
			IrqType = XGPIOPS_IRQ_TYPE_LEVEL_LOW;
 10080c0:	03a00003 	moveq	r0, #3
 10080c4:	13a00004 	movne	r0, #4
		}
	}

	return IrqType;
}
 10080c8:	e28dd008 	add	sp, sp, #8
 10080cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(Pin < InstancePtr->MaxPinNum);
 10080d0:	e30904e4 	movw	r0, #38116	; 0x94e4
 10080d4:	e30012a3 	movw	r1, #675	; 0x2a3
 10080d8:	e3400105 	movt	r0, #261	; 0x105
 10080dc:	eb000481 	bl	10092e8 <Xil_Assert>
 10080e0:	e3a03001 	mov	r3, #1
 10080e4:	e1a00004 	mov	r0, r4
 10080e8:	e5853000 	str	r3, [r5]
}
 10080ec:	e28dd008 	add	sp, sp, #8
 10080f0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10080f4:	e30904e4 	movw	r0, #38116	; 0x94e4
 10080f8:	e30012a2 	movw	r1, #674	; 0x2a2
 10080fc:	eafffff5 	b	10080d8 <XGpioPs_GetIntrTypePin+0x94>
 1008100:	e5932224 	ldr	r2, [r3, #548]	; 0x224
 1008104:	e5930220 	ldr	r0, [r3, #544]	; 0x220
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 1008108:	e1d43002 	bics	r3, r4, r2
		IntrPol = XGpioPs_ReadReg(InstancePtr->GpioConfig.BaseAddr,
 100810c:	e0000004 	and	r0, r0, r4
			IrqType = XGPIOPS_IRQ_TYPE_EDGE_BOTH;
 1008110:	03a00002 	moveq	r0, #2
		if (IntrOnAny == ((u32)1 << PinNumber)) {
 1008114:	0affffeb 	beq	10080c8 <XGpioPs_GetIntrTypePin+0x84>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008118:	e0540000 	subs	r0, r4, r0
 100811c:	13a00001 	movne	r0, #1
}
 1008120:	e28dd008 	add	sp, sp, #8
 1008124:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008128:	e30904e4 	movw	r0, #38116	; 0x94e4
 100812c:	e30012a1 	movw	r1, #673	; 0x2a1
 1008130:	e3400105 	movt	r0, #261	; 0x105
 1008134:	eb00046b 	bl	10092e8 <Xil_Assert>
 1008138:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 100813c:	e3a02001 	mov	r2, #1
 1008140:	e3403116 	movt	r3, #278	; 0x116
 1008144:	e1a00006 	mov	r0, r6
 1008148:	e5832000 	str	r2, [r3]
 100814c:	eaffffdd 	b	10080c8 <XGpioPs_GetIntrTypePin+0x84>

01008150 <XGpioPs_SetCallbackHandler>:
*
******************************************************************************/
void XGpioPs_SetCallbackHandler(XGpioPs *InstancePtr, void *CallBackRef,
				 XGpioPs_Handler FuncPointer)
{
	Xil_AssertVoid(InstancePtr != NULL);
 1008150:	e3500000 	cmp	r0, #0
{
 1008154:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1008158:	0a000014 	beq	10081b0 <XGpioPs_SetCallbackHandler+0x60>
 100815c:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertVoid(FuncPointer != NULL);
 1008160:	e3520000 	cmp	r2, #0
	Xil_AssertVoid(InstancePtr != NULL);
 1008164:	e3404116 	movt	r4, #278	; 0x116
 1008168:	e3a03000 	mov	r3, #0
 100816c:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(FuncPointer != NULL);
 1008170:	0a000017 	beq	10081d4 <XGpioPs_SetCallbackHandler+0x84>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008174:	e590c008 	ldr	ip, [r0, #8]
 1008178:	e3013111 	movw	r3, #4369	; 0x1111
 100817c:	e3413111 	movt	r3, #4369	; 0x1111
 1008180:	e15c0003 	cmp	ip, r3
 1008184:	1a000002 	bne	1008194 <XGpioPs_SetCallbackHandler+0x44>

	InstancePtr->Handler = FuncPointer;
 1008188:	e580200c 	str	r2, [r0, #12]
	InstancePtr->CallBackRef = CallBackRef;
 100818c:	e5801010 	str	r1, [r0, #16]
 1008190:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008194:	e30904e4 	movw	r0, #38116	; 0x94e4
 1008198:	e30012ea 	movw	r1, #746	; 0x2ea
 100819c:	e3400105 	movt	r0, #261	; 0x105
 10081a0:	eb000450 	bl	10092e8 <Xil_Assert>
 10081a4:	e3a03001 	mov	r3, #1
 10081a8:	e5843000 	str	r3, [r4]
}
 10081ac:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10081b0:	e30904e4 	movw	r0, #38116	; 0x94e4
 10081b4:	e3a01fba 	mov	r1, #744	; 0x2e8
 10081b8:	e3400105 	movt	r0, #261	; 0x105
 10081bc:	eb000449 	bl	10092e8 <Xil_Assert>
 10081c0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10081c4:	e3a02001 	mov	r2, #1
 10081c8:	e3403116 	movt	r3, #278	; 0x116
 10081cc:	e5832000 	str	r2, [r3]
 10081d0:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(FuncPointer != NULL);
 10081d4:	e30904e4 	movw	r0, #38116	; 0x94e4
 10081d8:	e30012e9 	movw	r1, #745	; 0x2e9
 10081dc:	e3400105 	movt	r0, #261	; 0x105
 10081e0:	eb000440 	bl	10092e8 <Xil_Assert>
 10081e4:	e3a03001 	mov	r3, #1
 10081e8:	e5843000 	str	r3, [r4]
 10081ec:	e8bd8010 	pop	{r4, pc}

010081f0 <XGpioPs_IntrHandler>:
* @note		This function does not save and restore the processor context
*		such that the user must provide this processing.
*
******************************************************************************/
void XGpioPs_IntrHandler(const XGpioPs *InstancePtr)
{
 10081f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	u8 Bank;
	u32 IntrStatus;
	u32 IntrEnabled;

	Xil_AssertVoid(InstancePtr != NULL);
 10081f4:	e2506000 	subs	r6, r0, #0
 10081f8:	0a00002c 	beq	10082b0 <XGpioPs_IntrHandler+0xc0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10081fc:	e5962008 	ldr	r2, [r6, #8]
 1008200:	e3013111 	movw	r3, #4369	; 0x1111
 1008204:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1008208:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 100820c:	e3404116 	movt	r4, #278	; 0x116
 1008210:	e3a07000 	mov	r7, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008214:	e1520003 	cmp	r2, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1008218:	e5847000 	str	r7, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100821c:	1a00001c 	bne	1008294 <XGpioPs_IntrHandler+0xa4>

	for (Bank = 0U; Bank < InstancePtr->MaxBanks; Bank++) {
 1008220:	e5d6301c 	ldrb	r3, [r6, #28]
 1008224:	e1530007 	cmp	r3, r7
 1008228:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 100822c:	e1a04007 	mov	r4, r7
 1008230:	ea000003 	b	1008244 <XGpioPs_IntrHandler+0x54>
 1008234:	e5d6301c 	ldrb	r3, [r6, #28]
 1008238:	e6ef4077 	uxtb	r4, r7
 100823c:	e1530004 	cmp	r3, r4
 1008240:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
			if((Bank == XGPIOPS_ONE) || (Bank == XGPIOPS_TWO)) {
				continue;
			}
		}
#endif
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1008244:	e1a01004 	mov	r1, r4
 1008248:	e1a00006 	mov	r0, r6
 100824c:	ebfffde2 	bl	10079dc <XGpioPs_IntrGetStatus>
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1008250:	e1a01004 	mov	r1, r4
		IntrStatus = XGpioPs_IntrGetStatus(InstancePtr, Bank);
 1008254:	e1a05000 	mov	r5, r0
		IntrEnabled = XGpioPs_IntrGetEnabled(InstancePtr,Bank);
 1008258:	e1a00006 	mov	r0, r6
 100825c:	e2877001 	add	r7, r7, #1
 1008260:	ebfffd74 	bl	1007838 <XGpioPs_IntrGetEnabled>
		if ((IntrStatus & IntrEnabled) != (u32)0) {
 1008264:	e0155000 	ands	r5, r5, r0
 1008268:	0afffff1 	beq	1008234 <XGpioPs_IntrHandler+0x44>
			XGpioPs_IntrClear(InstancePtr, Bank,
 100826c:	e1a02005 	mov	r2, r5
 1008270:	e1a01004 	mov	r1, r4
 1008274:	e1a00006 	mov	r0, r6
 1008278:	ebfffe3f 	bl	1007b7c <XGpioPs_IntrClear>
					(IntrStatus & IntrEnabled));
			InstancePtr->Handler(InstancePtr->
 100827c:	e1a02005 	mov	r2, r5
 1008280:	e1a01004 	mov	r1, r4
 1008284:	e596300c 	ldr	r3, [r6, #12]
 1008288:	e5960010 	ldr	r0, [r6, #16]
 100828c:	e12fff33 	blx	r3
 1008290:	eaffffe7 	b	1008234 <XGpioPs_IntrHandler+0x44>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008294:	e30904e4 	movw	r0, #38116	; 0x94e4
 1008298:	e3a01fc2 	mov	r1, #776	; 0x308
 100829c:	e3400105 	movt	r0, #261	; 0x105
 10082a0:	eb000410 	bl	10092e8 <Xil_Assert>
 10082a4:	e3a03001 	mov	r3, #1
 10082a8:	e5843000 	str	r3, [r4]
 10082ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10082b0:	e30904e4 	movw	r0, #38116	; 0x94e4
 10082b4:	e3001307 	movw	r1, #775	; 0x307
 10082b8:	e3400105 	movt	r0, #261	; 0x105
 10082bc:	eb000409 	bl	10092e8 <Xil_Assert>
 10082c0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10082c4:	e3a02001 	mov	r2, #1
 10082c8:	e3403116 	movt	r3, #278	; 0x116
 10082cc:	e5832000 	str	r2, [r3]
 10082d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010082d4 <StubHandler>:
{
	(void) CallBackRef;
	(void) Bank;
	(void) Status;

	Xil_AssertVoidAlways();
 10082d4:	e30904e4 	movw	r0, #38116	; 0x94e4
{
 10082d8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoidAlways();
 10082dc:	e3001337 	movw	r1, #823	; 0x337
 10082e0:	e3400105 	movt	r0, #261	; 0x105
 10082e4:	eb0003ff 	bl	10092e8 <Xil_Assert>
 10082e8:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10082ec:	e3a02001 	mov	r2, #1
 10082f0:	e3403116 	movt	r3, #278	; 0x116
 10082f4:	e5832000 	str	r2, [r3]
}
 10082f8:	e8bd8010 	pop	{r4, pc}

010082fc <XScuGic_InterruptHandler>:
*
* @note		None.
*
******************************************************************************/
void XScuGic_InterruptHandler(XScuGic *InstancePtr)
{
 10082fc:	e92d4070 	push	{r4, r5, r6, lr}
#endif
	    XScuGic_VectorTableEntry *TablePtr;

	    /* Assert that the pointer to the instance is valid
	     */
	    Xil_AssertVoid(InstancePtr != NULL);
 1008300:	e2505000 	subs	r5, r0, #0
 1008304:	0a000011 	beq	1008350 <XScuGic_InterruptHandler+0x54>
	     * clear the interrupt in the GIC.
	     */
#if defined (GICv3)
	    InterruptID = XScuGic_get_IntID();
#else
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 1008308:	e5953000 	ldr	r3, [r5]
	    Xil_AssertVoid(InstancePtr != NULL);
 100830c:	e30a24c0 	movw	r2, #42176	; 0xa4c0
 1008310:	e3402116 	movt	r2, #278	; 0x116
 1008314:	e3a01000 	mov	r1, #0
 1008318:	e5821000 	str	r1, [r2]
	    IntIDFull = XScuGic_CPUReadReg(InstancePtr, XSCUGIC_INT_ACK_OFFSET);
 100831c:	e5932004 	ldr	r2, [r3, #4]
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1008320:	e592400c 	ldr	r4, [r2, #12]
	    InterruptID = IntIDFull & XSCUGIC_ACK_INTID_MASK;
 1008324:	e7e91054 	ubfx	r1, r4, #0, #10
#endif
	    if (XSCUGIC_MAX_NUM_INTR_INPUTS <= InterruptID) {
 1008328:	e351005e 	cmp	r1, #94	; 0x5e
 100832c:	8a000005 	bhi	1008348 <XScuGic_InterruptHandler+0x4c>
	     * based on the IRQSource. A software trigger is cleared by
	     *.the ACK.
	     */
	    TablePtr = &(InstancePtr->Config->HandlerTable[InterruptID]);
		if (TablePtr != NULL) {
			TablePtr->Handler(TablePtr->CallBackRef);
 1008330:	e0833181 	add	r3, r3, r1, lsl #3
 1008334:	e593200c 	ldr	r2, [r3, #12]
 1008338:	e5930010 	ldr	r0, [r3, #16]
 100833c:	e12fff32 	blx	r2
 1008340:	e5953000 	ldr	r3, [r5]
 1008344:	e5932004 	ldr	r2, [r3, #4]
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 1008348:	e5824010 	str	r4, [r2, #16]
#endif
	    /*
	     * Return from the interrupt. Change security domains
	     * could happen here.
	     */
}
 100834c:	e8bd8070 	pop	{r4, r5, r6, pc}
	    Xil_AssertVoid(InstancePtr != NULL);
 1008350:	e30904f4 	movw	r0, #38132	; 0x94f4
 1008354:	e3a0107d 	mov	r1, #125	; 0x7d
 1008358:	e3400105 	movt	r0, #261	; 0x105
 100835c:	eb0003e1 	bl	10092e8 <Xil_Assert>
 1008360:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008364:	e3a02001 	mov	r2, #1
 1008368:	e3403116 	movt	r3, #278	; 0x116
 100836c:	e5832000 	str	r2, [r3]
 1008370:	e8bd8070 	pop	{r4, r5, r6, pc}

01008374 <StubHandler>:
static void StubHandler(void *CallBackRef)
{
	/*
	 * verify that the inputs are valid
	 */
	Xil_AssertVoid(CallBackRef != NULL);
 1008374:	e3500000 	cmp	r0, #0
 1008378:	0a000007 	beq	100839c <StubHandler+0x28>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 100837c:	e5903008 	ldr	r3, [r0, #8]
	Xil_AssertVoid(CallBackRef != NULL);
 1008380:	e30a24c0 	movw	r2, #42176	; 0xa4c0
 1008384:	e3402116 	movt	r2, #278	; 0x116
 1008388:	e3a01000 	mov	r1, #0
 100838c:	e5821000 	str	r1, [r2]
	((XScuGic *)((void *)CallBackRef))->UnhandledInterrupts++;
 1008390:	e2833001 	add	r3, r3, #1
 1008394:	e5803008 	str	r3, [r0, #8]
 1008398:	e12fff1e 	bx	lr
	Xil_AssertVoid(CallBackRef != NULL);
 100839c:	e3090504 	movw	r0, #38148	; 0x9504
{
 10083a0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CallBackRef != NULL);
 10083a4:	e30012e5 	movw	r1, #741	; 0x2e5
 10083a8:	e3400105 	movt	r0, #261	; 0x105
 10083ac:	eb0003cd 	bl	10092e8 <Xil_Assert>
 10083b0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10083b4:	e3a02001 	mov	r2, #1
 10083b8:	e3403116 	movt	r3, #278	; 0x116
 10083bc:	e5832000 	str	r2, [r3]
}
 10083c0:	e8bd8010 	pop	{r4, pc}

010083c4 <XScuGic_Connect>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 10083c4:	e3500000 	cmp	r0, #0
{
 10083c8:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10083cc:	0a000021 	beq	1008458 <XScuGic_Connect+0x94>
 10083d0:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10083d4:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertNonvoid(InstancePtr != NULL);
 10083d8:	e3404116 	movt	r4, #278	; 0x116
 10083dc:	e3a0c000 	mov	ip, #0
 10083e0:	e584c000 	str	ip, [r4]
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10083e4:	8a000013 	bhi	1008438 <XScuGic_Connect+0x74>
	Xil_AssertNonvoid(Handler != NULL);
 10083e8:	e3520000 	cmp	r2, #0
 10083ec:	0a000022 	beq	100847c <XScuGic_Connect+0xb8>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10083f0:	e590e004 	ldr	lr, [r0, #4]
 10083f4:	e301c111 	movw	ip, #4369	; 0x1111
 10083f8:	e341c111 	movt	ip, #4369	; 0x1111
 10083fc:	e15e000c 	cmp	lr, ip
 1008400:	1a000004 	bne	1008418 <XScuGic_Connect+0x54>
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)Handler;
 1008404:	e5900000 	ldr	r0, [r0]
 1008408:	e0801181 	add	r1, r0, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = CallBackRef;
 100840c:	e1c120fc 	strd	r2, [r1, #12]
}
 1008410:	e3a00000 	mov	r0, #0
 1008414:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008418:	e3090504 	movw	r0, #38148	; 0x9504
 100841c:	e30011e1 	movw	r1, #481	; 0x1e1
 1008420:	e3400105 	movt	r0, #261	; 0x105
 1008424:	eb0003af 	bl	10092e8 <Xil_Assert>
 1008428:	e3a03001 	mov	r3, #1
}
 100842c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008430:	e5843000 	str	r3, [r4]
}
 1008434:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008438:	e3090504 	movw	r0, #38148	; 0x9504
 100843c:	e30011df 	movw	r1, #479	; 0x1df
 1008440:	e3400105 	movt	r0, #261	; 0x105
 1008444:	eb0003a7 	bl	10092e8 <Xil_Assert>
 1008448:	e3a03001 	mov	r3, #1
}
 100844c:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008450:	e5843000 	str	r3, [r4]
}
 1008454:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008458:	e3090504 	movw	r0, #38148	; 0x9504
 100845c:	e30011de 	movw	r1, #478	; 0x1de
 1008460:	e3400105 	movt	r0, #261	; 0x105
 1008464:	eb00039f 	bl	10092e8 <Xil_Assert>
 1008468:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 100846c:	e3a02001 	mov	r2, #1
 1008470:	e3403116 	movt	r3, #278	; 0x116
 1008474:	e5832000 	str	r2, [r3]
 1008478:	eaffffe4 	b	1008410 <XScuGic_Connect+0x4c>
	Xil_AssertNonvoid(Handler != NULL);
 100847c:	e3090504 	movw	r0, #38148	; 0x9504
 1008480:	e3a01e1e 	mov	r1, #480	; 0x1e0
 1008484:	e3400105 	movt	r0, #261	; 0x105
 1008488:	eb000396 	bl	10092e8 <Xil_Assert>
 100848c:	e3a03001 	mov	r3, #1
 1008490:	e5843000 	str	r3, [r4]
 1008494:	eaffffdd 	b	1008410 <XScuGic_Connect+0x4c>

01008498 <XScuGic_Disconnect>:
	Xil_AssertVoid(InstancePtr != NULL);
 1008498:	e3500000 	cmp	r0, #0
{
 100849c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10084a0:	0a000026 	beq	1008540 <XScuGic_Disconnect+0xa8>
 10084a4:	e30a44c0 	movw	r4, #42176	; 0xa4c0
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10084a8:	e351005e 	cmp	r1, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 10084ac:	e3404116 	movt	r4, #278	; 0x116
 10084b0:	e3a03000 	mov	r3, #0
 10084b4:	e5843000 	str	r3, [r4]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10084b8:	8a000019 	bhi	1008524 <XScuGic_Disconnect+0x8c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10084bc:	e5902004 	ldr	r2, [r0, #4]
 10084c0:	e3013111 	movw	r3, #4369	; 0x1111
 10084c4:	e3413111 	movt	r3, #4369	; 0x1111
 10084c8:	e1520003 	cmp	r2, r3
 10084cc:	1a00000d 	bne	1008508 <XScuGic_Disconnect+0x70>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10084d0:	e5903000 	ldr	r3, [r0]
	Mask = 0x00000001U << (Int_Id % 32U);
 10084d4:	e201201f 	and	r2, r1, #31
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10084d8:	e1a0c2a1 	lsr	ip, r1, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 10084dc:	e3a0e001 	mov	lr, #1
 10084e0:	e1a0e21e 	lsl	lr, lr, r2
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10084e4:	e3082374 	movw	r2, #33652	; 0x8374
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 10084e8:	e5934008 	ldr	r4, [r3, #8]
 10084ec:	e28cc060 	add	ip, ip, #96	; 0x60
 10084f0:	e0831181 	add	r1, r3, r1, lsl #3
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 10084f4:	e3402100 	movt	r2, #256	; 0x100
 10084f8:	e784e10c 	str	lr, [r4, ip, lsl #2]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 10084fc:	e5810010 	str	r0, [r1, #16]
	InstancePtr->Config->HandlerTable[Int_Id].Handler = (Xil_InterruptHandler)StubHandler;
 1008500:	e581200c 	str	r2, [r1, #12]
	InstancePtr->Config->HandlerTable[Int_Id].CallBackRef = InstancePtr;
 1008504:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008508:	e3090504 	movw	r0, #38148	; 0x9504
 100850c:	e3001206 	movw	r1, #518	; 0x206
 1008510:	e3400105 	movt	r0, #261	; 0x105
 1008514:	eb000373 	bl	10092e8 <Xil_Assert>
 1008518:	e3a03001 	mov	r3, #1
 100851c:	e5843000 	str	r3, [r4]
}
 1008520:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008524:	e3090504 	movw	r0, #38148	; 0x9504
 1008528:	e3001205 	movw	r1, #517	; 0x205
 100852c:	e3400105 	movt	r0, #261	; 0x105
 1008530:	eb00036c 	bl	10092e8 <Xil_Assert>
 1008534:	e3a03001 	mov	r3, #1
 1008538:	e5843000 	str	r3, [r4]
 100853c:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008540:	e3090504 	movw	r0, #38148	; 0x9504
 1008544:	e3a01f81 	mov	r1, #516	; 0x204
 1008548:	e3400105 	movt	r0, #261	; 0x105
 100854c:	eb000365 	bl	10092e8 <Xil_Assert>
 1008550:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008554:	e3a02001 	mov	r2, #1
 1008558:	e3403116 	movt	r3, #278	; 0x116
 100855c:	e5832000 	str	r2, [r3]
 1008560:	e8bd8010 	pop	{r4, pc}

01008564 <XScuGic_SoftwareIntr>:
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008564:	e3500000 	cmp	r0, #0
{
 1008568:	e92d4010 	push	{r4, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 100856c:	0a000025 	beq	1008608 <XScuGic_SoftwareIntr+0xa4>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008570:	e590c004 	ldr	ip, [r0, #4]
 1008574:	e3013111 	movw	r3, #4369	; 0x1111
 1008578:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 100857c:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1008580:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008584:	e15c0003 	cmp	ip, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008588:	e3a03000 	mov	r3, #0
 100858c:	e5843000 	str	r3, [r4]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008590:	1a00000c 	bne	10085c8 <XScuGic_SoftwareIntr+0x64>
	Xil_AssertNonvoid(Int_Id <= 15U);
 1008594:	e351000f 	cmp	r1, #15
 1008598:	8a000012 	bhi	10085e8 <XScuGic_SoftwareIntr+0x84>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 100859c:	e35200ff 	cmp	r2, #255	; 0xff
 10085a0:	8a000021 	bhi	100862c <XScuGic_SoftwareIntr+0xc8>
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 10085a4:	e5900000 	ldr	r0, [r0]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 10085a8:	e1811802 	orr	r1, r1, r2, lsl #16
 10085ac:	e3a0300f 	mov	r3, #15
 10085b0:	e34030ff 	movt	r3, #255	; 0xff
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_SFI_TRIG_OFFSET, Mask);
 10085b4:	e5902008 	ldr	r2, [r0, #8]
	Mask = ((Cpu_Id << 16U) | Int_Id) &
 10085b8:	e0033001 	and	r3, r3, r1
 10085bc:	e5823f00 	str	r3, [r2, #3840]	; 0xf00
}
 10085c0:	e3a00000 	mov	r0, #0
 10085c4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10085c8:	e3090504 	movw	r0, #38148	; 0x9504
 10085cc:	e30012b3 	movw	r1, #691	; 0x2b3
 10085d0:	e3400105 	movt	r0, #261	; 0x105
 10085d4:	eb000343 	bl	10092e8 <Xil_Assert>
 10085d8:	e3a03001 	mov	r3, #1
}
 10085dc:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10085e0:	e5843000 	str	r3, [r4]
}
 10085e4:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(Int_Id <= 15U);
 10085e8:	e3090504 	movw	r0, #38148	; 0x9504
 10085ec:	e3a01fad 	mov	r1, #692	; 0x2b4
 10085f0:	e3400105 	movt	r0, #261	; 0x105
 10085f4:	eb00033b 	bl	10092e8 <Xil_Assert>
 10085f8:	e3a03001 	mov	r3, #1
}
 10085fc:	e3a00000 	mov	r0, #0
	Xil_AssertNonvoid(Int_Id <= 15U);
 1008600:	e5843000 	str	r3, [r4]
}
 1008604:	e8bd8010 	pop	{r4, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008608:	e3090504 	movw	r0, #38148	; 0x9504
 100860c:	e30012b2 	movw	r1, #690	; 0x2b2
 1008610:	e3400105 	movt	r0, #261	; 0x105
 1008614:	eb000333 	bl	10092e8 <Xil_Assert>
 1008618:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 100861c:	e3a02001 	mov	r2, #1
 1008620:	e3403116 	movt	r3, #278	; 0x116
 1008624:	e5832000 	str	r2, [r3]
 1008628:	eaffffe4 	b	10085c0 <XScuGic_SoftwareIntr+0x5c>
	Xil_AssertNonvoid(Cpu_Id <= 255U);
 100862c:	e3090504 	movw	r0, #38148	; 0x9504
 1008630:	e30012b5 	movw	r1, #693	; 0x2b5
 1008634:	e3400105 	movt	r0, #261	; 0x105
 1008638:	eb00032a 	bl	10092e8 <Xil_Assert>
 100863c:	e3a03001 	mov	r3, #1
 1008640:	e5843000 	str	r3, [r4]
 1008644:	eaffffdd 	b	10085c0 <XScuGic_SoftwareIntr+0x5c>

01008648 <XScuGic_SetPriorityTriggerType>:
	u32 Index;
#endif
	u8 LocalPriority;
	LocalPriority = Priority;

	Xil_AssertVoid(InstancePtr != NULL);
 1008648:	e3500000 	cmp	r0, #0
{
 100864c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1008650:	0a000033 	beq	1008724 <XScuGic_SetPriorityTriggerType+0xdc>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008654:	e590e004 	ldr	lr, [r0, #4]
 1008658:	e301c111 	movw	ip, #4369	; 0x1111
 100865c:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1008660:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1008664:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008668:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 100866c:	e3a0c000 	mov	ip, #0
 1008670:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008674:	1a00001c 	bne	10086ec <XScuGic_SetPriorityTriggerType+0xa4>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008678:	e351005e 	cmp	r1, #94	; 0x5e
 100867c:	8a000021 	bhi	1008708 <XScuGic_SetPriorityTriggerType+0xc0>
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1008680:	e3530003 	cmp	r3, #3
 1008684:	8a00002f 	bhi	1008748 <XScuGic_SetPriorityTriggerType+0x100>
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1008688:	e35200f8 	cmp	r2, #248	; 0xf8
 100868c:	8a000034 	bhi	1008764 <XScuGic_SetPriorityTriggerType+0x11c>
#endif

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1008690:	e5905000 	ldr	r5, [r0]
 1008694:	e3c1e003 	bic	lr, r1, #3
	LocalPriority = LocalPriority & (u8)XSCUGIC_INTR_PRIO_MASK;
	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 1008698:	e2010003 	and	r0, r1, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 100869c:	e28eeb01 	add	lr, lr, #1024	; 0x400
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 10086a0:	e1a04180 	lsl	r4, r0, #3
 10086a4:	e3a080ff 	mov	r8, #255	; 0xff
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10086a8:	e5956008 	ldr	r6, [r5, #8]
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 10086ac:	e20220f8 	and	r2, r2, #248	; 0xf8
				RegValue);

	/*
	 * Determine the register to write to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10086b0:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 10086b4:	e201100f 	and	r1, r1, #15
 10086b8:	e1a01081 	lsl	r1, r1, #1
 10086bc:	e3a07003 	mov	r7, #3
	return *(volatile u32 *) Addr;
 10086c0:	e79e0006 	ldr	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10086c4:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue &= ~(XSCUGIC_PRIORITY_MASK << ((Int_Id%4U)*8U));
 10086c8:	e1c00418 	bic	r0, r0, r8, lsl r4
	RegValue |= (u32)LocalPriority << ((Int_Id%4U)*8U);
 10086cc:	e1800412 	orr	r0, r0, r2, lsl r4
	*LocalAddr = Value;
 10086d0:	e78e0006 	str	r0, [lr, r6]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10086d4:	e5950008 	ldr	r0, [r5, #8]
	return *(volatile u32 *) Addr;
 10086d8:	e790210c 	ldr	r2, [r0, ip, lsl #2]
	RegValue &= ~(XSCUGIC_INT_CFG_MASK << ((Int_Id%16U)*2U));
 10086dc:	e1c22117 	bic	r2, r2, r7, lsl r1
	RegValue |= (u32)Trigger << ((Int_Id%16U)*2U);
 10086e0:	e1821113 	orr	r1, r2, r3, lsl r1
	*LocalAddr = Value;
 10086e4:	e780110c 	str	r1, [r0, ip, lsl #2]
 10086e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10086ec:	e3090504 	movw	r0, #38148	; 0x9504
 10086f0:	e3001312 	movw	r1, #786	; 0x312
 10086f4:	e3400105 	movt	r0, #261	; 0x105
 10086f8:	eb0002fa 	bl	10092e8 <Xil_Assert>
 10086fc:	e3a03001 	mov	r3, #1
 1008700:	e5843000 	str	r3, [r4]
 1008704:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008708:	e3090504 	movw	r0, #38148	; 0x9504
 100870c:	e3001313 	movw	r1, #787	; 0x313
 1008710:	e3400105 	movt	r0, #261	; 0x105
 1008714:	eb0002f3 	bl	10092e8 <Xil_Assert>
 1008718:	e3a03001 	mov	r3, #1
 100871c:	e5843000 	str	r3, [r4]
 1008720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008724:	e3090504 	movw	r0, #38148	; 0x9504
 1008728:	e3001311 	movw	r1, #785	; 0x311
 100872c:	e3400105 	movt	r0, #261	; 0x105
 1008730:	eb0002ec 	bl	10092e8 <Xil_Assert>
 1008734:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008738:	e3a02001 	mov	r2, #1
 100873c:	e3403116 	movt	r3, #278	; 0x116
 1008740:	e5832000 	str	r2, [r3]
 1008744:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(Trigger <= (u8)XSCUGIC_INT_CFG_MASK);
 1008748:	e3090504 	movw	r0, #38148	; 0x9504
 100874c:	e3a01fc5 	mov	r1, #788	; 0x314
 1008750:	e3400105 	movt	r0, #261	; 0x105
 1008754:	eb0002e3 	bl	10092e8 <Xil_Assert>
 1008758:	e3a03001 	mov	r3, #1
 100875c:	e5843000 	str	r3, [r4]
 1008760:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	Xil_AssertVoid(LocalPriority <= (u8)XSCUGIC_MAX_INTR_PRIO_VAL);
 1008764:	e3090504 	movw	r0, #38148	; 0x9504
 1008768:	e3001315 	movw	r1, #789	; 0x315
 100876c:	e3400105 	movt	r0, #261	; 0x105
 1008770:	eb0002dc 	bl	10092e8 <Xil_Assert>
 1008774:	e3a03001 	mov	r3, #1
 1008778:	e5843000 	str	r3, [r4]
	 * Write the value back to the register.
	 */
	XScuGic_DistWriteReg(InstancePtr, XSCUGIC_INT_CFG_OFFSET_CALC(Int_Id),
				RegValue);

}
 100877c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

01008780 <XScuGic_GetPriorityTriggerType>:
void XScuGic_GetPriorityTriggerType(XScuGic *InstancePtr, u32 Int_Id,
					u8 *Priority, u8 *Trigger)
{
	u32 RegValue;

	Xil_AssertVoid(InstancePtr != NULL);
 1008780:	e3500000 	cmp	r0, #0
{
 1008784:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1008788:	0a000030 	beq	1008850 <XScuGic_GetPriorityTriggerType+0xd0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100878c:	e590e004 	ldr	lr, [r0, #4]
 1008790:	e301c111 	movw	ip, #4369	; 0x1111
 1008794:	e341c111 	movt	ip, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1008798:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 100879c:	e3404116 	movt	r4, #278	; 0x116
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10087a0:	e15e000c 	cmp	lr, ip
	Xil_AssertVoid(InstancePtr != NULL);
 10087a4:	e3a0c000 	mov	ip, #0
 10087a8:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10087ac:	1a000019 	bne	1008818 <XScuGic_GetPriorityTriggerType+0x98>
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10087b0:	e351005e 	cmp	r1, #94	; 0x5e
 10087b4:	8a00001e 	bhi	1008834 <XScuGic_GetPriorityTriggerType+0xb4>
	Xil_AssertVoid(Priority != NULL);
 10087b8:	e3520000 	cmp	r2, #0
 10087bc:	0a00002c 	beq	1008874 <XScuGic_GetPriorityTriggerType+0xf4>
	Xil_AssertVoid(Trigger != NULL);
 10087c0:	e3530000 	cmp	r3, #0
 10087c4:	0a000031 	beq	1008890 <XScuGic_GetPriorityTriggerType+0x110>

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10087c8:	e590c000 	ldr	ip, [r0]

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 10087cc:	e201e003 	and	lr, r1, #3
 10087d0:	e1a0418e 	lsl	r4, lr, #3
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10087d4:	e3c15003 	bic	r5, r1, #3
 10087d8:	e2855b01 	add	r5, r5, #1024	; 0x400
 10087dc:	e59ce008 	ldr	lr, [ip, #8]
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);

	/*
	 * Determine the register to read to using the Int_Id.
	 */
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10087e0:	e1a0c221 	lsr	ip, r1, #4

	/*
	 * Shift and Mask the correct bits for the priority and trigger in the
	 * register
	 */
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10087e4:	e201100f 	and	r1, r1, #15
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10087e8:	e28ccc03 	add	ip, ip, #768	; 0x300
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 10087ec:	e1a01081 	lsl	r1, r1, #1
	return *(volatile u32 *) Addr;
 10087f0:	e795e00e 	ldr	lr, [r5, lr]
	RegValue = RegValue >> ((Int_Id%4U)*8U);
 10087f4:	e1a0e43e 	lsr	lr, lr, r4
	*Priority = (u8)(RegValue & XSCUGIC_PRIORITY_MASK);
 10087f8:	e5c2e000 	strb	lr, [r2]
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10087fc:	e5902000 	ldr	r2, [r0]
 1008800:	e5922008 	ldr	r2, [r2, #8]
 1008804:	e792210c 	ldr	r2, [r2, ip, lsl #2]
	RegValue = RegValue >> ((Int_Id%16U)*2U);
 1008808:	e1a01132 	lsr	r1, r2, r1

	*Trigger = (u8)(RegValue & XSCUGIC_INT_CFG_MASK);
 100880c:	e2011003 	and	r1, r1, #3
 1008810:	e5c31000 	strb	r1, [r3]
 1008814:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008818:	e3090504 	movw	r0, #38148	; 0x9504
 100881c:	e3001367 	movw	r1, #871	; 0x367
 1008820:	e3400105 	movt	r0, #261	; 0x105
 1008824:	eb0002af 	bl	10092e8 <Xil_Assert>
 1008828:	e3a03001 	mov	r3, #1
 100882c:	e5843000 	str	r3, [r4]
 1008830:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008834:	e3090504 	movw	r0, #38148	; 0x9504
 1008838:	e3a01fda 	mov	r1, #872	; 0x368
 100883c:	e3400105 	movt	r0, #261	; 0x105
 1008840:	eb0002a8 	bl	10092e8 <Xil_Assert>
 1008844:	e3a03001 	mov	r3, #1
 1008848:	e5843000 	str	r3, [r4]
 100884c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008850:	e3090504 	movw	r0, #38148	; 0x9504
 1008854:	e3001366 	movw	r1, #870	; 0x366
 1008858:	e3400105 	movt	r0, #261	; 0x105
 100885c:	eb0002a1 	bl	10092e8 <Xil_Assert>
 1008860:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008864:	e3a02001 	mov	r2, #1
 1008868:	e3403116 	movt	r3, #278	; 0x116
 100886c:	e5832000 	str	r2, [r3]
 1008870:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Priority != NULL);
 1008874:	e3090504 	movw	r0, #38148	; 0x9504
 1008878:	e3001369 	movw	r1, #873	; 0x369
 100887c:	e3400105 	movt	r0, #261	; 0x105
 1008880:	eb000298 	bl	10092e8 <Xil_Assert>
 1008884:	e3a03001 	mov	r3, #1
 1008888:	e5843000 	str	r3, [r4]
 100888c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Trigger != NULL);
 1008890:	e3090504 	movw	r0, #38148	; 0x9504
 1008894:	e300136a 	movw	r1, #874	; 0x36a
 1008898:	e3400105 	movt	r0, #261	; 0x105
 100889c:	eb000291 	bl	10092e8 <Xil_Assert>
 10088a0:	e3a03001 	mov	r3, #1
 10088a4:	e5843000 	str	r3, [r4]
}
 10088a8:	e8bd8070 	pop	{r4, r5, r6, pc}

010088ac <XScuGic_InterruptMaptoCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 10088ac:	e3500000 	cmp	r0, #0
{
 10088b0:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10088b4:	0a000010 	beq	10088fc <XScuGic_InterruptMaptoCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10088b8:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 10088bc:	e30ac4c0 	movw	ip, #42176	; 0xa4c0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10088c0:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 10088c4:	e340c116 	movt	ip, #278	; 0x116
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10088c8:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 10088cc:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 10088d0:	e593e008 	ldr	lr, [r3, #8]
			XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 10088d4:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 10088d8:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 10088dc:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 10088e0:	e2022003 	and	r2, r2, #3
 10088e4:	e790100e 	ldr	r1, [r0, lr]

	RegValue |= (Cpu_Id) << (Offset*8U);
 10088e8:	e1a02182 	lsl	r2, r2, #3
 10088ec:	e6ef3073 	uxtb	r3, r3
 10088f0:	e1813213 	orr	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 10088f4:	e780300e 	str	r3, [r0, lr]
 10088f8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10088fc:	e3090504 	movw	r0, #38148	; 0x9504
 1008900:	e30013a5 	movw	r1, #933	; 0x3a5
 1008904:	e3400105 	movt	r0, #261	; 0x105
 1008908:	eb000276 	bl	10092e8 <Xil_Assert>
 100890c:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008910:	e3a02001 	mov	r2, #1
 1008914:	e3403116 	movt	r3, #278	; 0x116
 1008918:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
					XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
					RegValue);
#endif
}
 100891c:	e8bd8010 	pop	{r4, pc}

01008920 <XScuGic_Enable>:
{
 1008920:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1008924:	e3003040 	movw	r3, #64	; 0x40
	Xil_AssertVoid(InstancePtr != NULL);
 1008928:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 100892c:	e3403106 	movt	r3, #262	; 0x106
{
 1008930:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1008934:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1008938:	0a000024 	beq	10089d0 <XScuGic_Enable+0xb0>
 100893c:	e30a54c0 	movw	r5, #42176	; 0xa4c0
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008940:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1008944:	e3405116 	movt	r5, #278	; 0x116
 1008948:	e3a03000 	mov	r3, #0
 100894c:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008950:	8a000017 	bhi	10089b4 <XScuGic_Enable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008954:	e5962004 	ldr	r2, [r6, #4]
 1008958:	e3013111 	movw	r3, #4369	; 0x1111
 100895c:	e3413111 	movt	r3, #4369	; 0x1111
 1008960:	e1520003 	cmp	r2, r3
 1008964:	1a00000b 	bne	1008998 <XScuGic_Enable+0x78>
	XScuGic_InterruptMaptoCpu(InstancePtr, Cpu_Id, Int_Id);
 1008968:	e1a02004 	mov	r2, r4
 100896c:	e6ef1071 	uxtb	r1, r1
 1008970:	ebffffcd 	bl	10088ac <XScuGic_InterruptMaptoCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1008974:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1008978:	e204101f 	and	r1, r4, #31
 100897c:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1008980:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1008984:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_ENABLE_SET_OFFSET +
 1008988:	e5922008 	ldr	r2, [r2, #8]
 100898c:	e2844040 	add	r4, r4, #64	; 0x40
 1008990:	e7823104 	str	r3, [r2, r4, lsl #2]
 1008994:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008998:	e3090504 	movw	r0, #38148	; 0x9504
 100899c:	e300123d 	movw	r1, #573	; 0x23d
 10089a0:	e3400105 	movt	r0, #261	; 0x105
 10089a4:	eb00024f 	bl	10092e8 <Xil_Assert>
 10089a8:	e3a03001 	mov	r3, #1
 10089ac:	e5853000 	str	r3, [r5]
}
 10089b0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 10089b4:	e3090504 	movw	r0, #38148	; 0x9504
 10089b8:	e3a01f8f 	mov	r1, #572	; 0x23c
 10089bc:	e3400105 	movt	r0, #261	; 0x105
 10089c0:	eb000248 	bl	10092e8 <Xil_Assert>
 10089c4:	e3a03001 	mov	r3, #1
 10089c8:	e5853000 	str	r3, [r5]
 10089cc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10089d0:	e3090504 	movw	r0, #38148	; 0x9504
 10089d4:	e300123b 	movw	r1, #571	; 0x23b
 10089d8:	e3400105 	movt	r0, #261	; 0x105
 10089dc:	eb000241 	bl	10092e8 <Xil_Assert>
 10089e0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10089e4:	e3a02001 	mov	r2, #1
 10089e8:	e3403116 	movt	r3, #278	; 0x116
 10089ec:	e5832000 	str	r2, [r3]
 10089f0:	e8bd8070 	pop	{r4, r5, r6, pc}

010089f4 <XScuGic_InterruptUnmapFromCpu>:
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_IROUTER_OFFSET_CALC(Temp),
						  (Cpu_Id-1));
	}
#else
	u32 Offset;
	Xil_AssertVoid(InstancePtr != NULL);
 10089f4:	e3500000 	cmp	r0, #0
{
 10089f8:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 10089fc:	0a000010 	beq	1008a44 <XScuGic_InterruptUnmapFromCpu+0x50>
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1008a00:	e5903000 	ldr	r3, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1008a04:	e30ac4c0 	movw	ip, #42176	; 0xa4c0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1008a08:	e3c20003 	bic	r0, r2, #3
	Xil_AssertVoid(InstancePtr != NULL);
 1008a0c:	e340c116 	movt	ip, #278	; 0x116
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1008a10:	e2800b02 	add	r0, r0, #2048	; 0x800
	Xil_AssertVoid(InstancePtr != NULL);
 1008a14:	e3a04000 	mov	r4, #0
	RegValue = XScuGic_DistReadReg(InstancePtr,
 1008a18:	e593e008 	ldr	lr, [r3, #8]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));

	Offset = (Int_Id & 0x3U);
	Cpu_Id = (0x1U << Cpu_Id);
 1008a1c:	e3a03001 	mov	r3, #1
	Xil_AssertVoid(InstancePtr != NULL);
 1008a20:	e58c4000 	str	r4, [ip]
	Cpu_Id = (0x1U << Cpu_Id);
 1008a24:	e1a03113 	lsl	r3, r3, r1
	Offset = (Int_Id & 0x3U);
 1008a28:	e2022003 	and	r2, r2, #3
	return *(volatile u32 *) Addr;
 1008a2c:	e790100e 	ldr	r1, [r0, lr]

	RegValue &= ~(Cpu_Id << (Offset*8U));
 1008a30:	e1a02182 	lsl	r2, r2, #3
 1008a34:	e6ef3073 	uxtb	r3, r3
 1008a38:	e1c13213 	bic	r3, r1, r3, lsl r2
	*LocalAddr = Value;
 1008a3c:	e780300e 	str	r3, [r0, lr]
 1008a40:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008a44:	e3090504 	movw	r0, #38148	; 0x9504
 1008a48:	e30013d1 	movw	r1, #977	; 0x3d1
 1008a4c:	e3400105 	movt	r0, #261	; 0x105
 1008a50:	eb000224 	bl	10092e8 <Xil_Assert>
 1008a54:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008a58:	e3a02001 	mov	r2, #1
 1008a5c:	e3403116 	movt	r3, #278	; 0x116
 1008a60:	e5832000 	str	r2, [r3]
	XScuGic_DistWriteReg(InstancePtr,
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id),
			RegValue);
#endif
}
 1008a64:	e8bd8010 	pop	{r4, pc}

01008a68 <XScuGic_Disable>:
{
 1008a68:	e92d4070 	push	{r4, r5, r6, lr}
	u8 Cpu_Id = (u8)CpuId;
 1008a6c:	e3003040 	movw	r3, #64	; 0x40
	Xil_AssertVoid(InstancePtr != NULL);
 1008a70:	e2506000 	subs	r6, r0, #0
	u8 Cpu_Id = (u8)CpuId;
 1008a74:	e3403106 	movt	r3, #262	; 0x106
{
 1008a78:	e1a04001 	mov	r4, r1
	u8 Cpu_Id = (u8)CpuId;
 1008a7c:	e5931000 	ldr	r1, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1008a80:	0a000024 	beq	1008b18 <XScuGic_Disable+0xb0>
 1008a84:	e30a54c0 	movw	r5, #42176	; 0xa4c0
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008a88:	e354005e 	cmp	r4, #94	; 0x5e
	Xil_AssertVoid(InstancePtr != NULL);
 1008a8c:	e3405116 	movt	r5, #278	; 0x116
 1008a90:	e3a03000 	mov	r3, #0
 1008a94:	e5853000 	str	r3, [r5]
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008a98:	8a000017 	bhi	1008afc <XScuGic_Disable+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008a9c:	e5962004 	ldr	r2, [r6, #4]
 1008aa0:	e3013111 	movw	r3, #4369	; 0x1111
 1008aa4:	e3413111 	movt	r3, #4369	; 0x1111
 1008aa8:	e1520003 	cmp	r2, r3
 1008aac:	1a00000b 	bne	1008ae0 <XScuGic_Disable+0x78>
	XScuGic_InterruptUnmapFromCpu(InstancePtr, Cpu_Id, Int_Id);
 1008ab0:	e1a02004 	mov	r2, r4
 1008ab4:	e6ef1071 	uxtb	r1, r1
 1008ab8:	ebffffcd 	bl	10089f4 <XScuGic_InterruptUnmapFromCpu>
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1008abc:	e5962000 	ldr	r2, [r6]
	Mask = 0x00000001U << (Int_Id % 32U);
 1008ac0:	e204101f 	and	r1, r4, #31
 1008ac4:	e3a03001 	mov	r3, #1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1008ac8:	e1a042a4 	lsr	r4, r4, #5
	Mask = 0x00000001U << (Int_Id % 32U);
 1008acc:	e1a03113 	lsl	r3, r3, r1
	XScuGic_DistWriteReg(InstancePtr, (u32)XSCUGIC_DISABLE_OFFSET +
 1008ad0:	e5922008 	ldr	r2, [r2, #8]
 1008ad4:	e2844060 	add	r4, r4, #96	; 0x60
 1008ad8:	e7823104 	str	r3, [r2, r4, lsl #2]
 1008adc:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008ae0:	e3090504 	movw	r0, #38148	; 0x9504
 1008ae4:	e3a01f9e 	mov	r1, #632	; 0x278
 1008ae8:	e3400105 	movt	r0, #261	; 0x105
 1008aec:	eb0001fd 	bl	10092e8 <Xil_Assert>
 1008af0:	e3a03001 	mov	r3, #1
 1008af4:	e5853000 	str	r3, [r5]
}
 1008af8:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS);
 1008afc:	e3090504 	movw	r0, #38148	; 0x9504
 1008b00:	e3001277 	movw	r1, #631	; 0x277
 1008b04:	e3400105 	movt	r0, #261	; 0x105
 1008b08:	eb0001f6 	bl	10092e8 <Xil_Assert>
 1008b0c:	e3a03001 	mov	r3, #1
 1008b10:	e5853000 	str	r3, [r5]
 1008b14:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008b18:	e3090504 	movw	r0, #38148	; 0x9504
 1008b1c:	e3001276 	movw	r1, #630	; 0x276
 1008b20:	e3400105 	movt	r0, #261	; 0x105
 1008b24:	eb0001ef 	bl	10092e8 <Xil_Assert>
 1008b28:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008b2c:	e3a02001 	mov	r2, #1
 1008b30:	e3403116 	movt	r3, #278	; 0x116
 1008b34:	e5832000 	str	r2, [r3]
 1008b38:	e8bd8070 	pop	{r4, r5, r6, pc}

01008b3c <XScuGic_UnmapAllInterruptsFromCpu>:
{
	u32 Int_Id;
	u32 Target_Cpu;
	u32 LocalCpuID = (1U << Cpu_Id);

	Xil_AssertVoid(InstancePtr != NULL);
 1008b3c:	e3500000 	cmp	r0, #0
{
 1008b40:	e92d4010 	push	{r4, lr}
	u32 LocalCpuID = (1U << Cpu_Id);
 1008b44:	e3a04001 	mov	r4, #1
 1008b48:	e1a01114 	lsl	r1, r4, r1
	Xil_AssertVoid(InstancePtr != NULL);
 1008b4c:	0a000011 	beq	1008b98 <XScuGic_UnmapAllInterruptsFromCpu+0x5c>

	LocalCpuID |= LocalCpuID << 8U;
 1008b50:	e1811401 	orr	r1, r1, r1, lsl #8
	Xil_AssertVoid(InstancePtr != NULL);
 1008b54:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008b58:	e3403116 	movt	r3, #278	; 0x116
	LocalCpuID |= LocalCpuID << 16U;

	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1008b5c:	e590c000 	ldr	ip, [r0]
	LocalCpuID |= LocalCpuID << 16U;
 1008b60:	e1811801 	orr	r1, r1, r1, lsl #16
	Xil_AssertVoid(InstancePtr != NULL);
 1008b64:	e3a02000 	mov	r2, #0
 1008b68:	e5832000 	str	r2, [r3]
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008b6c:	e3a03020 	mov	r3, #32
 1008b70:	e1e00001 	mvn	r0, r1
		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1008b74:	e59c2008 	ldr	r2, [ip, #8]
 1008b78:	e2822b02 	add	r2, r2, #2048	; 0x800
	return *(volatile u32 *) Addr;
 1008b7c:	e7921003 	ldr	r1, [r2, r3]
				XSCUGIC_SPI_TARGET_OFFSET_CALC(Int_Id));
		/* Remove LocalCpuID from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1008b80:	e0011000 	and	r1, r1, r0
	*LocalAddr = Value;
 1008b84:	e7821003 	str	r1, [r2, r3]
			Int_Id = Int_Id+4U) {
 1008b88:	e2833004 	add	r3, r3, #4
	for (Int_Id = 32U; Int_Id  < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008b8c:	e3530060 	cmp	r3, #96	; 0x60
 1008b90:	1afffff7 	bne	1008b74 <XScuGic_UnmapAllInterruptsFromCpu+0x38>
 1008b94:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008b98:	e3090504 	movw	r0, #38148	; 0x9504
 1008b9c:	e30013f1 	movw	r1, #1009	; 0x3f1
 1008ba0:	e3400105 	movt	r0, #261	; 0x105
 1008ba4:	eb0001cf 	bl	10092e8 <Xil_Assert>
 1008ba8:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008bac:	e3403116 	movt	r3, #278	; 0x116
 1008bb0:	e5834000 	str	r4, [r3]
 1008bb4:	e8bd8010 	pop	{r4, pc}

01008bb8 <XScuGic_Stop>:
{
	u32 Int_Id;
	u32 RegValue;
	u32 Target_Cpu;
	u32 DistDisable = 1; /* Track distributor status*/
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1008bb8:	e3003040 	movw	r3, #64	; 0x40

	Xil_AssertVoid(InstancePtr != NULL);
 1008bbc:	e3500000 	cmp	r0, #0
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1008bc0:	e3403106 	movt	r3, #262	; 0x106
{
 1008bc4:	e92d4070 	push	{r4, r5, r6, lr}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1008bc8:	e593e000 	ldr	lr, [r3]
	Xil_AssertVoid(InstancePtr != NULL);
 1008bcc:	0a000027 	beq	1008c70 <XScuGic_Stop+0xb8>
 1008bd0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008bd4:	e3a02000 	mov	r2, #0

	/* If distributor is already disabled, no need to do anything */
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1008bd8:	e5904000 	ldr	r4, [r0]
	Xil_AssertVoid(InstancePtr != NULL);
 1008bdc:	e3403116 	movt	r3, #278	; 0x116
 1008be0:	e5832000 	str	r2, [r3]
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1008be4:	e5941008 	ldr	r1, [r4, #8]
	return *(volatile u32 *) Addr;
 1008be8:	e5913000 	ldr	r3, [r1]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 1008bec:	e3130001 	tst	r3, #1
 1008bf0:	08bd8070 	popeq	{r4, r5, r6, pc}
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1008bf4:	e3a0c001 	mov	ip, #1
	/*
	 * Check if the interrupt are targeted to current cpu only or not.
	 * Also remove current cpu from interrupt target register for all
	 * interrupts.
	 */
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008bf8:	e3a02020 	mov	r2, #32
	u32 LocalCpuID = ((u32)0x1 << CpuId);
 1008bfc:	e1a0ee1c 	lsl	lr, ip, lr
	LocalCpuID |= LocalCpuID << 8U;
 1008c00:	e18ee40e 	orr	lr, lr, lr, lsl #8
	LocalCpuID |= LocalCpuID << 16U;
 1008c04:	e18ee80e 	orr	lr, lr, lr, lsl #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008c08:	e1e0500e 	mvn	r5, lr
 1008c0c:	ea000000 	b	1008c14 <XScuGic_Stop+0x5c>
 1008c10:	e5941008 	ldr	r1, [r4, #8]
			Int_Id = Int_Id+4U) {

		Target_Cpu = XScuGic_DistReadReg(InstancePtr,
 1008c14:	e2820b02 	add	r0, r2, #2048	; 0x800
			Int_Id = Int_Id+4U) {
 1008c18:	e2822004 	add	r2, r2, #4
 1008c1c:	e7903001 	ldr	r3, [r0, r1]
		if ((Target_Cpu != LocalCpuID) && (Target_Cpu != 0)) {
			/*
			 * If any other CPU is also programmed to target
			 * register, GIC distributor can not be disabled.
			 */
			DistDisable = 0;
 1008c20:	e15e0003 	cmp	lr, r3
 1008c24:	13530000 	cmpne	r3, #0
		}

		/* Remove current CPU from interrupt target register */
		Target_Cpu &= (~LocalCpuID);
 1008c28:	e0033005 	and	r3, r3, r5
			DistDisable = 0;
 1008c2c:	13a0c000 	movne	ip, #0
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008c30:	e3520060 	cmp	r2, #96	; 0x60
	*LocalAddr = Value;
 1008c34:	e7803001 	str	r3, [r0, r1]
 1008c38:	1afffff4 	bne	1008c10 <XScuGic_Stop+0x58>

	/*
	 * If GIC distributor is safe to be disabled, disable all the interrupt
	 * and then disable distributor.
	 */
	if (DistDisable == 1) {
 1008c3c:	e35c0001 	cmp	ip, #1
 1008c40:	18bd8070 	popne	{r4, r5, r6, pc}
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
				Int_Id = Int_Id+32U) {
			/*
			 * Disable all the interrupts
			 */
			XScuGic_DistWriteReg(InstancePtr,
 1008c44:	e5941008 	ldr	r1, [r4, #8]
 1008c48:	e3e03000 	mvn	r3, #0
 1008c4c:	e3a02000 	mov	r2, #0
 1008c50:	e5813180 	str	r3, [r1, #384]	; 0x180
 1008c54:	e5941008 	ldr	r1, [r4, #8]
 1008c58:	e5813184 	str	r3, [r1, #388]	; 0x184
 1008c5c:	e5941008 	ldr	r1, [r4, #8]
 1008c60:	e5813188 	str	r3, [r1, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1008c64:	e5943008 	ldr	r3, [r4, #8]
	*LocalAddr = Value;
 1008c68:	e5832000 	str	r2, [r3]
							Int_Id),
			0xFFFFFFFFU);
		}
		XScuGic_DistWriteReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET, 0U);
	}
}
 1008c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1008c70:	e3090504 	movw	r0, #38148	; 0x9504
 1008c74:	e3001419 	movw	r1, #1049	; 0x419
 1008c78:	e3400105 	movt	r0, #261	; 0x105
 1008c7c:	eb000199 	bl	10092e8 <Xil_Assert>
 1008c80:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008c84:	e3a02001 	mov	r2, #1
 1008c88:	e3403116 	movt	r3, #278	; 0x116
 1008c8c:	e5832000 	str	r2, [r3]
 1008c90:	e8bd8070 	pop	{r4, r5, r6, pc}

01008c94 <XScuGic_CfgInitialize>:
{
 1008c94:	e92d4070 	push	{r4, r5, r6, lr}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008c98:	e2504000 	subs	r4, r0, #0
 1008c9c:	0a000049 	beq	1008dc8 <XScuGic_CfgInitialize+0x134>
 1008ca0:	e30a54c0 	movw	r5, #42176	; 0xa4c0
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008ca4:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008ca8:	e3405116 	movt	r5, #278	; 0x116
 1008cac:	e3a02000 	mov	r2, #0
 1008cb0:	e5852000 	str	r2, [r5]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008cb4:	0a00004c 	beq	1008dec <XScuGic_CfgInitialize+0x158>
	if(InstancePtr->IsReady != XIL_COMPONENT_IS_READY) {
 1008cb8:	e5940004 	ldr	r0, [r4, #4]
 1008cbc:	e3013111 	movw	r3, #4369	; 0x1111
 1008cc0:	e3413111 	movt	r3, #4369	; 0x1111
 1008cc4:	e1500003 	cmp	r0, r3
 1008cc8:	0a00001e 	beq	1008d48 <XScuGic_CfgInitialize+0xb4>
						= (Xil_InterruptHandler)StubHandler;
 1008ccc:	e308c374 	movw	ip, #33652	; 0x8374
 1008cd0:	e1a03001 	mov	r3, r1
 1008cd4:	e340c100 	movt	ip, #256	; 0x100
 1008cd8:	e2810fbe 	add	r0, r1, #760	; 0x2f8
		InstancePtr->IsReady = 0U;
 1008cdc:	e5842004 	str	r2, [r4, #4]
		InstancePtr->Config = ConfigPtr;
 1008ce0:	e5841000 	str	r1, [r4]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 1008ce4:	e593200c 	ldr	r2, [r3, #12]
 1008ce8:	e2833008 	add	r3, r3, #8
			InstancePtr->Config->HandlerTable[Int_Id].CallBackRef =
 1008cec:	e5834008 	str	r4, [r3, #8]
			if ((InstancePtr->Config->HandlerTable[Int_Id].Handler
 1008cf0:	e3520000 	cmp	r2, #0
						= (Xil_InterruptHandler)StubHandler;
 1008cf4:	0583c004 	streq	ip, [r3, #4]
		for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008cf8:	e1500003 	cmp	r0, r3
 1008cfc:	1afffff8 	bne	1008ce4 <XScuGic_CfgInitialize+0x50>
		XScuGic_Stop(InstancePtr);
 1008d00:	e1a00004 	mov	r0, r4
 1008d04:	ebffffab 	bl	1008bb8 <XScuGic_Stop>
	RegValue = XScuGic_DistReadReg(InstancePtr, XSCUGIC_DIST_EN_OFFSET);
 1008d08:	e5941000 	ldr	r1, [r4]
	Xil_AssertVoid(InstancePtr != NULL);
 1008d0c:	e3a03000 	mov	r3, #0
 1008d10:	e5853000 	str	r3, [r5]
	return *(volatile u32 *) Addr;
 1008d14:	e5910008 	ldr	r0, [r1, #8]
 1008d18:	e5903000 	ldr	r3, [r0]
	if ((RegValue & XSCUGIC_EN_INT_MASK) == 0U) {
 1008d1c:	e2133001 	ands	r3, r3, #1
 1008d20:	0a00000a 	beq	1008d50 <XScuGic_CfgInitialize+0xbc>
	XScuGic_CPUWriteReg(InstancePtr, XSCUGIC_CPU_PRIOR_OFFSET, 0xF0U);
 1008d24:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1008d28:	e3a0c0f0 	mov	ip, #240	; 0xf0
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1008d2c:	e3013111 	movw	r3, #4369	; 0x1111
 1008d30:	e3a00007 	mov	r0, #7
 1008d34:	e3413111 	movt	r3, #4369	; 0x1111
 1008d38:	e582c004 	str	ip, [r2, #4]
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1008d3c:	e5912004 	ldr	r2, [r1, #4]
	*LocalAddr = Value;
 1008d40:	e5820000 	str	r0, [r2]
 1008d44:	e5843004 	str	r3, [r4, #4]
}
 1008d48:	e3a00000 	mov	r0, #0
 1008d4c:	e8bd8070 	pop	{r4, r5, r6, pc}
 1008d50:	e1a0c003 	mov	ip, r3
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008d54:	e3a02020 	mov	r2, #32
 1008d58:	e5803000 	str	r3, [r0]
		XScuGic_DistWriteReg(InstancePtr,
 1008d5c:	e1a03222 	lsr	r3, r2, #4
 1008d60:	e5910008 	ldr	r0, [r1, #8]
			Int_Id = Int_Id+16U) {
 1008d64:	e2822010 	add	r2, r2, #16
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008d68:	e3520060 	cmp	r2, #96	; 0x60
		XScuGic_DistWriteReg(InstancePtr,
 1008d6c:	e2833c03 	add	r3, r3, #768	; 0x300
 1008d70:	e780c103 	str	ip, [r0, r3, lsl #2]
	for (Int_Id = 32U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008d74:	1afffff8 	bne	1008d5c <XScuGic_CfgInitialize+0xc8>
 1008d78:	e30a00a0 	movw	r0, #41120	; 0xa0a0
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008d7c:	e3a03000 	mov	r3, #0
 1008d80:	e34a00a0 	movt	r0, #41120	; 0xa0a0
		XScuGic_DistWriteReg(InstancePtr,
 1008d84:	e5912008 	ldr	r2, [r1, #8]
 1008d88:	e2822b01 	add	r2, r2, #1024	; 0x400
 1008d8c:	e7820003 	str	r0, [r2, r3]
			Int_Id = Int_Id+4U) {
 1008d90:	e2833004 	add	r3, r3, #4
	for (Int_Id = 0U; Int_Id < XSCUGIC_MAX_NUM_INTR_INPUTS;
 1008d94:	e3530060 	cmp	r3, #96	; 0x60
 1008d98:	1afffff9 	bne	1008d84 <XScuGic_CfgInitialize+0xf0>
		XScuGic_DistWriteReg(InstancePtr,
 1008d9c:	e5910008 	ldr	r0, [r1, #8]
 1008da0:	e3e03000 	mvn	r3, #0
 1008da4:	e3a02001 	mov	r2, #1
 1008da8:	e5803180 	str	r3, [r0, #384]	; 0x180
 1008dac:	e5910008 	ldr	r0, [r1, #8]
 1008db0:	e5803184 	str	r3, [r0, #388]	; 0x184
 1008db4:	e5910008 	ldr	r0, [r1, #8]
 1008db8:	e5803188 	str	r3, [r0, #392]	; 0x188
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
 1008dbc:	e5913008 	ldr	r3, [r1, #8]
	*LocalAddr = Value;
 1008dc0:	e5832000 	str	r2, [r3]
 1008dc4:	eaffffd6 	b	1008d24 <XScuGic_CfgInitialize+0x90>
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008dc8:	e3090504 	movw	r0, #38148	; 0x9504
 1008dcc:	e3001181 	movw	r1, #385	; 0x181
 1008dd0:	e3400105 	movt	r0, #261	; 0x105
 1008dd4:	eb000143 	bl	10092e8 <Xil_Assert>
 1008dd8:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008ddc:	e3a02001 	mov	r2, #1
 1008de0:	e3403116 	movt	r3, #278	; 0x116
 1008de4:	e5832000 	str	r2, [r3]
 1008de8:	eaffffd6 	b	1008d48 <XScuGic_CfgInitialize+0xb4>
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008dec:	e3090504 	movw	r0, #38148	; 0x9504
 1008df0:	e3001182 	movw	r1, #386	; 0x182
 1008df4:	e3400105 	movt	r0, #261	; 0x105
 1008df8:	eb00013a 	bl	10092e8 <Xil_Assert>
 1008dfc:	e3a03001 	mov	r3, #1
 1008e00:	e5853000 	str	r3, [r5]
 1008e04:	eaffffcf 	b	1008d48 <XScuGic_CfgInitialize+0xb4>

01008e08 <XScuGic_SetCpuID>:
* @note		None
*
*****************************************************************************/
void XScuGic_SetCpuID(u32 CpuCoreId)
{
	Xil_AssertVoid(CpuCoreId <= 1U);
 1008e08:	e3500001 	cmp	r0, #1
 1008e0c:	8a000007 	bhi	1008e30 <XScuGic_SetCpuID+0x28>
 1008e10:	e30a24c0 	movw	r2, #42176	; 0xa4c0

	CpuId = CpuCoreId;
 1008e14:	e3003040 	movw	r3, #64	; 0x40
	Xil_AssertVoid(CpuCoreId <= 1U);
 1008e18:	e3402116 	movt	r2, #278	; 0x116
 1008e1c:	e3a01000 	mov	r1, #0
	CpuId = CpuCoreId;
 1008e20:	e3403106 	movt	r3, #262	; 0x106
	Xil_AssertVoid(CpuCoreId <= 1U);
 1008e24:	e5821000 	str	r1, [r2]
	CpuId = CpuCoreId;
 1008e28:	e5830000 	str	r0, [r3]
 1008e2c:	e12fff1e 	bx	lr
	Xil_AssertVoid(CpuCoreId <= 1U);
 1008e30:	e3090504 	movw	r0, #38148	; 0x9504
{
 1008e34:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(CpuCoreId <= 1U);
 1008e38:	e300145d 	movw	r1, #1117	; 0x45d
 1008e3c:	e3400105 	movt	r0, #261	; 0x105
 1008e40:	eb000128 	bl	10092e8 <Xil_Assert>
 1008e44:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008e48:	e3a02001 	mov	r2, #1
 1008e4c:	e3403116 	movt	r3, #278	; 0x116
 1008e50:	e5832000 	str	r2, [r3]
}
 1008e54:	e8bd8010 	pop	{r4, pc}

01008e58 <XScuGic_GetCpuID>:
* @note        None.
*
*****************************************************************************/
u32 XScuGic_GetCpuID(void)
{
	return CpuId;
 1008e58:	e3003040 	movw	r3, #64	; 0x40
 1008e5c:	e3403106 	movt	r3, #262	; 0x106
}
 1008e60:	e5930000 	ldr	r0, [r3]
 1008e64:	e12fff1e 	bx	lr

01008e68 <XScuGic_LookupConfig>:
{
	XScuGic_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < (u32)XPAR_SCUGIC_NUM_INSTANCES; Index++) {
		if (XScuGic_ConfigTable[Index].DeviceId == DeviceId) {
 1008e68:	e3093928 	movw	r3, #39208	; 0x9928
 1008e6c:	e3403105 	movt	r3, #261	; 0x105
 1008e70:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuGic_Config *)CfgPtr;
}
 1008e74:	e1520000 	cmp	r2, r0
 1008e78:	01a00003 	moveq	r0, r3
 1008e7c:	13a00000 	movne	r0, #0
 1008e80:	e12fff1e 	bx	lr

01008e84 <XScuGic_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32  XScuGic_SelfTest(XScuGic *InstancePtr)
{
 1008e84:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;

	/*
	 * Assert the arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008e88:	e2506000 	subs	r6, r0, #0
 1008e8c:	0a00001f 	beq	1008f10 <XScuGic_SelfTest+0x8c>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008e90:	e5962004 	ldr	r2, [r6, #4]
 1008e94:	e3013111 	movw	r3, #4369	; 0x1111
 1008e98:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008e9c:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 1008ea0:	e3405116 	movt	r5, #278	; 0x116
 1008ea4:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008ea8:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008eac:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008eb0:	1a00000e 	bne	1008ef0 <XScuGic_SelfTest+0x6c>

	/*
	 * Read the ID registers.
	 */
	for (Index = 0U; Index <= 3U; Index++) {
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1008eb4:	e5963000 	ldr	r3, [r6]
			((u32)XSCUGIC_PCELLID_OFFSET + (Index * 4U))) <<
			(Index * 8U);
	}

	if (XSCUGIC_PCELL_ID != RegValue1) {
 1008eb8:	e30f400d 	movw	r4, #61453	; 0xf00d
 1008ebc:	e34b4105 	movt	r4, #45317	; 0xb105
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1008ec0:	e5933008 	ldr	r3, [r3, #8]
	return *(volatile u32 *) Addr;
 1008ec4:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
 1008ec8:	e5931ff4 	ldr	r1, [r3, #4084]	; 0xff4
 1008ecc:	e5930ff8 	ldr	r0, [r3, #4088]	; 0xff8
 1008ed0:	e5933ffc 	ldr	r3, [r3, #4092]	; 0xffc
			((u32)XSCUGIC_PCELLID_OFFSET + (Index * 4U))) <<
 1008ed4:	e1a00800 	lsl	r0, r0, #16
		RegValue1 |= XScuGic_DistReadReg(InstancePtr,
 1008ed8:	e1800401 	orr	r0, r0, r1, lsl #8
 1008edc:	e1800c03 	orr	r0, r0, r3, lsl #24
 1008ee0:	e1800002 	orr	r0, r0, r2
	if (XSCUGIC_PCELL_ID != RegValue1) {
 1008ee4:	e0500004 	subs	r0, r0, r4
 1008ee8:	13a00001 	movne	r0, #1
		Status = XST_FAILURE;
	} else {
		Status = XST_SUCCESS;
	}
	return Status;
}
 1008eec:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008ef0:	e3090510 	movw	r0, #38160	; 0x9510
 1008ef4:	e3a0105e 	mov	r1, #94	; 0x5e
 1008ef8:	e3400105 	movt	r0, #261	; 0x105
 1008efc:	eb0000f9 	bl	10092e8 <Xil_Assert>
 1008f00:	e3a03001 	mov	r3, #1
 1008f04:	e1a00004 	mov	r0, r4
 1008f08:	e5853000 	str	r3, [r5]
 1008f0c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008f10:	e3090510 	movw	r0, #38160	; 0x9510
 1008f14:	e3a0105d 	mov	r1, #93	; 0x5d
 1008f18:	e3400105 	movt	r0, #261	; 0x105
 1008f1c:	eb0000f1 	bl	10092e8 <Xil_Assert>
 1008f20:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008f24:	e3a02001 	mov	r2, #1
 1008f28:	e3403116 	movt	r3, #278	; 0x116
 1008f2c:	e1a00006 	mov	r0, r6
 1008f30:	e5832000 	str	r2, [r3]
 1008f34:	e8bd8070 	pop	{r4, r5, r6, pc}

01008f38 <XScuTimer_CfgInitialize>:
* @note		None.
*
******************************************************************************/
s32 XScuTimer_CfgInitialize(XScuTimer *InstancePtr,
			 XScuTimer_Config *ConfigPtr, u32 EffectiveAddress)
{
 1008f38:	e92d4070 	push	{r4, r5, r6, lr}
	s32 Status;
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008f3c:	e2505000 	subs	r5, r0, #0
 1008f40:	0a000016 	beq	1008fa0 <XScuTimer_CfgInitialize+0x68>
 1008f44:	e30a64c0 	movw	r6, #42176	; 0xa4c0
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008f48:	e3510000 	cmp	r1, #0
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008f4c:	e3406116 	movt	r6, #278	; 0x116
 1008f50:	e3a03000 	mov	r3, #0
 1008f54:	e1a04001 	mov	r4, r1
 1008f58:	e5863000 	str	r3, [r6]
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008f5c:	0a000019 	beq	1008fc8 <XScuTimer_CfgInitialize+0x90>
	 * If the device is started, disallow the initialize and return a
	 * status indicating it is started. This allows the user to stop the
	 * device and reinitialize, but prevents a user from inadvertently
	 * initializing.
	 */
	if (InstancePtr->IsStarted != XIL_COMPONENT_IS_STARTED) {
 1008f60:	e595000c 	ldr	r0, [r5, #12]
 1008f64:	e3021222 	movw	r1, #8738	; 0x2222
 1008f68:	e3421222 	movt	r1, #8738	; 0x2222
 1008f6c:	e1500001 	cmp	r0, r1
 1008f70:	0a000008 	beq	1008f98 <XScuTimer_CfgInitialize+0x60>
		/*
		 * Copy configuration into the instance structure.
		 */
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1008f74:	e1d4c0b0 	ldrh	ip, [r4]
		InstancePtr->IsStarted = (u32)0;

		/*
		 * Indicate the instance is ready to use, successfully initialized.
		 */
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1008f78:	e3011111 	movw	r1, #4369	; 0x1111
 1008f7c:	e3411111 	movt	r1, #4369	; 0x1111

		Status =(s32)XST_SUCCESS;
 1008f80:	e1a00003 	mov	r0, r3
		InstancePtr->Config.BaseAddr = EffectiveAddress;
 1008f84:	e5852004 	str	r2, [r5, #4]
		InstancePtr->IsStarted = (u32)0;
 1008f88:	e585300c 	str	r3, [r5, #12]
		InstancePtr->Config.DeviceId = ConfigPtr->DeviceId;
 1008f8c:	e1c5c0b0 	strh	ip, [r5]
		InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
 1008f90:	e5851008 	str	r1, [r5, #8]
	}
	else {
		Status = (s32)XST_DEVICE_IS_STARTED;
	}
	return Status;
}
 1008f94:	e8bd8070 	pop	{r4, r5, r6, pc}
		Status = (s32)XST_DEVICE_IS_STARTED;
 1008f98:	e3a00005 	mov	r0, #5
 1008f9c:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 1008fa0:	e3090524 	movw	r0, #38180	; 0x9524
 1008fa4:	e3a01054 	mov	r1, #84	; 0x54
 1008fa8:	e3400105 	movt	r0, #261	; 0x105
 1008fac:	eb0000cd 	bl	10092e8 <Xil_Assert>
 1008fb0:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1008fb4:	e3a02001 	mov	r2, #1
 1008fb8:	e3403116 	movt	r3, #278	; 0x116
 1008fbc:	e1a00005 	mov	r0, r5
 1008fc0:	e5832000 	str	r2, [r3]
 1008fc4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(ConfigPtr != NULL);
 1008fc8:	e3090524 	movw	r0, #38180	; 0x9524
 1008fcc:	e3a01055 	mov	r1, #85	; 0x55
 1008fd0:	e3400105 	movt	r0, #261	; 0x105
 1008fd4:	eb0000c3 	bl	10092e8 <Xil_Assert>
 1008fd8:	e3a03001 	mov	r3, #1
 1008fdc:	e1a00004 	mov	r0, r4
 1008fe0:	e5863000 	str	r3, [r6]
 1008fe4:	e8bd8070 	pop	{r4, r5, r6, pc}

01008fe8 <XScuTimer_Start>:
******************************************************************************/
void XScuTimer_Start(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1008fe8:	e3500000 	cmp	r0, #0
{
 1008fec:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1008ff0:	0a000017 	beq	1009054 <XScuTimer_Start+0x6c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1008ff4:	e5901008 	ldr	r1, [r0, #8]
 1008ff8:	e3013111 	movw	r3, #4369	; 0x1111
 1008ffc:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1009000:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1009004:	e3404116 	movt	r4, #278	; 0x116
 1009008:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100900c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 1009010:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009014:	1a000007 	bne	1009038 <XScuTimer_Start+0x50>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1009018:	e5901004 	ldr	r1, [r0, #4]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is started.
	 */
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 100901c:	e3022222 	movw	r2, #8738	; 0x2222
 1009020:	e3422222 	movt	r2, #8738	; 0x2222
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 1009024:	e5913008 	ldr	r3, [r1, #8]
	Register |= XSCUTIMER_CONTROL_ENABLE_MASK;
 1009028:	e3833001 	orr	r3, r3, #1
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100902c:	e5813008 	str	r3, [r1, #8]
	InstancePtr->IsStarted = XIL_COMPONENT_IS_STARTED;
 1009030:	e580200c 	str	r2, [r0, #12]
 1009034:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009038:	e3090524 	movw	r0, #38180	; 0x9524
 100903c:	e3a01089 	mov	r1, #137	; 0x89
 1009040:	e3400105 	movt	r0, #261	; 0x105
 1009044:	eb0000a7 	bl	10092e8 <Xil_Assert>
 1009048:	e3a03001 	mov	r3, #1
 100904c:	e5843000 	str	r3, [r4]
}
 1009050:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1009054:	e3090524 	movw	r0, #38180	; 0x9524
 1009058:	e3a01088 	mov	r1, #136	; 0x88
 100905c:	e3400105 	movt	r0, #261	; 0x105
 1009060:	eb0000a0 	bl	10092e8 <Xil_Assert>
 1009064:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1009068:	e3a02001 	mov	r2, #1
 100906c:	e3403116 	movt	r3, #278	; 0x116
 1009070:	e5832000 	str	r2, [r3]
 1009074:	e8bd8010 	pop	{r4, pc}

01009078 <XScuTimer_Stop>:
******************************************************************************/
void XScuTimer_Stop(XScuTimer *InstancePtr)
{
	u32 Register;

	Xil_AssertVoid(InstancePtr != NULL);
 1009078:	e3500000 	cmp	r0, #0
{
 100907c:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1009080:	0a000015 	beq	10090dc <XScuTimer_Stop+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009084:	e5901008 	ldr	r1, [r0, #8]
 1009088:	e3013111 	movw	r3, #4369	; 0x1111
 100908c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1009090:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 1009094:	e3404116 	movt	r4, #278	; 0x116
 1009098:	e3a02000 	mov	r2, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100909c:	e1510003 	cmp	r1, r3
	Xil_AssertVoid(InstancePtr != NULL);
 10090a0:	e5842000 	str	r2, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10090a4:	1a000005 	bne	10090c0 <XScuTimer_Stop+0x48>

	/*
	 * Read the contents of the Control register.
	 */
	Register = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 10090a8:	e5901004 	ldr	r1, [r0, #4]
	return *(volatile u32 *) Addr;
 10090ac:	e5913008 	ldr	r3, [r1, #8]
				  XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear the 'timer enable' bit in the register.
	 */
	Register &= (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 10090b0:	e3c33001 	bic	r3, r3, #1
	*LocalAddr = Value;
 10090b4:	e5813008 	str	r3, [r1, #8]
			XSCUTIMER_CONTROL_OFFSET, Register);

	/*
	 * Indicate that the device is stopped.
	 */
	InstancePtr->IsStarted = (u32)0;
 10090b8:	e580200c 	str	r2, [r0, #12]
 10090bc:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10090c0:	e3090524 	movw	r0, #38180	; 0x9524
 10090c4:	e3a010b3 	mov	r1, #179	; 0xb3
 10090c8:	e3400105 	movt	r0, #261	; 0x105
 10090cc:	eb000085 	bl	10092e8 <Xil_Assert>
 10090d0:	e3a03001 	mov	r3, #1
 10090d4:	e5843000 	str	r3, [r4]
}
 10090d8:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 10090dc:	e3090524 	movw	r0, #38180	; 0x9524
 10090e0:	e3a010b2 	mov	r1, #178	; 0xb2
 10090e4:	e3400105 	movt	r0, #261	; 0x105
 10090e8:	eb00007e 	bl	10092e8 <Xil_Assert>
 10090ec:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10090f0:	e3a02001 	mov	r2, #1
 10090f4:	e3403116 	movt	r3, #278	; 0x116
 10090f8:	e5832000 	str	r2, [r3]
 10090fc:	e8bd8010 	pop	{r4, pc}

01009100 <XScuTimer_SetPrescaler>:
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
 1009100:	e3500000 	cmp	r0, #0
{
 1009104:	e92d4010 	push	{r4, lr}
	Xil_AssertVoid(InstancePtr != NULL);
 1009108:	0a000015 	beq	1009164 <XScuTimer_SetPrescaler+0x64>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100910c:	e590e008 	ldr	lr, [r0, #8]
 1009110:	e3012111 	movw	r2, #4369	; 0x1111
 1009114:	e3412111 	movt	r2, #4369	; 0x1111
	Xil_AssertVoid(InstancePtr != NULL);
 1009118:	e30a44c0 	movw	r4, #42176	; 0xa4c0
 100911c:	e3404116 	movt	r4, #278	; 0x116
 1009120:	e3a0c000 	mov	ip, #0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009124:	e15e0002 	cmp	lr, r2
	Xil_AssertVoid(InstancePtr != NULL);
 1009128:	e584c000 	str	ip, [r4]
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100912c:	1a000005 	bne	1009148 <XScuTimer_SetPrescaler+0x48>
	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1009130:	e5902004 	ldr	r2, [r0, #4]
	return *(volatile u32 *) Addr;
 1009134:	e5923008 	ldr	r3, [r2, #8]
					XSCUTIMER_CONTROL_OFFSET);

	/*
	 * Clear all of the prescaler control bits in the register.
	 */
	ControlReg &= (u32)(~XSCUTIMER_CONTROL_PRESCALER_MASK);
 1009138:	e3c33cff 	bic	r3, r3, #65280	; 0xff00

	/*
	 * Set the prescaler value.
	 */
	ControlReg |= (((u32)PrescalerValue) << XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 100913c:	e1833401 	orr	r3, r3, r1, lsl #8
	*LocalAddr = Value;
 1009140:	e5823008 	str	r3, [r2, #8]
 1009144:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009148:	e3090524 	movw	r0, #38180	; 0x9524
 100914c:	e3a010e1 	mov	r1, #225	; 0xe1
 1009150:	e3400105 	movt	r0, #261	; 0x105
 1009154:	eb000063 	bl	10092e8 <Xil_Assert>
 1009158:	e3a03001 	mov	r3, #1
 100915c:	e5843000 	str	r3, [r4]
	/*
	 * Write the register with the new values.
	 */
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
			  XSCUTIMER_CONTROL_OFFSET, ControlReg);
}
 1009160:	e8bd8010 	pop	{r4, pc}
	Xil_AssertVoid(InstancePtr != NULL);
 1009164:	e3090524 	movw	r0, #38180	; 0x9524
 1009168:	e3a010e0 	mov	r1, #224	; 0xe0
 100916c:	e3400105 	movt	r0, #261	; 0x105
 1009170:	eb00005c 	bl	10092e8 <Xil_Assert>
 1009174:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 1009178:	e3a02001 	mov	r2, #1
 100917c:	e3403116 	movt	r3, #278	; 0x116
 1009180:	e5832000 	str	r2, [r3]
 1009184:	e8bd8010 	pop	{r4, pc}

01009188 <XScuTimer_GetPrescaler>:
*
* @note		None.
*
****************************************************************************/
u8 XScuTimer_GetPrescaler(XScuTimer *InstancePtr)
{
 1009188:	e92d4070 	push	{r4, r5, r6, lr}
	u32 ControlReg;

	/*
	 * Assert to validate input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 100918c:	e2506000 	subs	r6, r0, #0
 1009190:	0a000014 	beq	10091e8 <XScuTimer_GetPrescaler+0x60>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009194:	e5962008 	ldr	r2, [r6, #8]
 1009198:	e3013111 	movw	r3, #4369	; 0x1111
 100919c:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 10091a0:	e30a54c0 	movw	r5, #42176	; 0xa4c0
 10091a4:	e3405116 	movt	r5, #278	; 0x116
 10091a8:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10091ac:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 10091b0:	e5854000 	str	r4, [r5]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10091b4:	1a000003 	bne	10091c8 <XScuTimer_GetPrescaler+0x40>

	/*
	 * Read the Timer control register.
	 */
	ControlReg = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 10091b8:	e5963004 	ldr	r3, [r6, #4]
	return *(volatile u32 *) Addr;
 10091bc:	e5930008 	ldr	r0, [r3, #8]
				    XSCUTIMER_CONTROL_OFFSET);
	ControlReg &= XSCUTIMER_CONTROL_PRESCALER_MASK;

	return (u8)(ControlReg >> XSCUTIMER_CONTROL_PRESCALER_SHIFT);
 10091c0:	e7e70450 	ubfx	r0, r0, #8, #8
 10091c4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 10091c8:	e3090524 	movw	r0, #38180	; 0x9524
 10091cc:	e300110d 	movw	r1, #269	; 0x10d
 10091d0:	e3400105 	movt	r0, #261	; 0x105
 10091d4:	eb000043 	bl	10092e8 <Xil_Assert>
 10091d8:	e3a03001 	mov	r3, #1
 10091dc:	e1a00004 	mov	r0, r4
 10091e0:	e5853000 	str	r3, [r5]
}
 10091e4:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10091e8:	e3090524 	movw	r0, #38180	; 0x9524
 10091ec:	e3a01f43 	mov	r1, #268	; 0x10c
 10091f0:	e3400105 	movt	r0, #261	; 0x105
 10091f4:	eb00003b 	bl	10092e8 <Xil_Assert>
 10091f8:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10091fc:	e3a02001 	mov	r2, #1
 1009200:	e3403116 	movt	r3, #278	; 0x116
 1009204:	e1a00006 	mov	r0, r6
 1009208:	e5832000 	str	r2, [r3]
 100920c:	e8bd8070 	pop	{r4, r5, r6, pc}

01009210 <XScuTimer_SelfTest>:
*
* @note		None.
*
******************************************************************************/
s32 XScuTimer_SelfTest(XScuTimer *InstancePtr)
{
 1009210:	e92d4070 	push	{r4, r5, r6, lr}

	/*
	 * Assert to ensure the inputs are valid and the instance has been
	 * initialized.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
 1009214:	e2505000 	subs	r5, r0, #0
 1009218:	0a000021 	beq	10092a4 <XScuTimer_SelfTest+0x94>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100921c:	e5952008 	ldr	r2, [r5, #8]
 1009220:	e3013111 	movw	r3, #4369	; 0x1111
 1009224:	e3413111 	movt	r3, #4369	; 0x1111
	Xil_AssertNonvoid(InstancePtr != NULL);
 1009228:	e30a64c0 	movw	r6, #42176	; 0xa4c0
 100922c:	e3406116 	movt	r6, #278	; 0x116
 1009230:	e3a04000 	mov	r4, #0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009234:	e1520003 	cmp	r2, r3
	Xil_AssertNonvoid(InstancePtr != NULL);
 1009238:	e5864000 	str	r4, [r6]
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 100923c:	1a000010 	bne	1009284 <XScuTimer_SelfTest+0x74>

	/*
	 * Save the contents of the Control Register and stop the timer.
	 */
	CtrlOrig = XScuTimer_ReadReg(InstancePtr->Config.BaseAddr,
 1009240:	e5952004 	ldr	r2, [r5, #4]
	*LocalAddr = Value;
 1009244:	e30f400f 	movw	r4, #61455	; 0xf00f
 1009248:	e34a455a 	movt	r4, #42330	; 0xa55a
	return *(volatile u32 *) Addr;
 100924c:	e5923008 	ldr	r3, [r2, #8]
				  XSCUTIMER_CONTROL_OFFSET);
	Register = CtrlOrig & (u32)(~XSCUTIMER_CONTROL_ENABLE_MASK);
 1009250:	e3c31001 	bic	r1, r3, #1
	*LocalAddr = Value;
 1009254:	e5821008 	str	r1, [r2, #8]
	return *(volatile u32 *) Addr;
 1009258:	e5952004 	ldr	r2, [r5, #4]
 100925c:	e5921000 	ldr	r1, [r2]
	*LocalAddr = Value;
 1009260:	e5824000 	str	r4, [r2]
	return *(volatile u32 *) Addr;
 1009264:	e5952004 	ldr	r2, [r5, #4]
 1009268:	e5920000 	ldr	r0, [r2]
	*LocalAddr = Value;
 100926c:	e5821000 	str	r1, [r2]

	/*
	 * Restore the contents of the Load Register and Control Register.
	 */
	XScuTimer_LoadTimer(InstancePtr, LoadOrig);
	XScuTimer_WriteReg(InstancePtr->Config.BaseAddr,
 1009270:	e5952004 	ldr	r2, [r5, #4]

	/*
	 * Return a Failure if the contents of the Load Register do not
	 * match with the value written to it.
	 */
	if (Register != XSCUTIMER_SELFTEST_VALUE) {
 1009274:	e0500004 	subs	r0, r0, r4
 1009278:	13a00001 	movne	r0, #1
 100927c:	e5823008 	str	r3, [r2, #8]
 1009280:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
 1009284:	e3090530 	movw	r0, #38192	; 0x9530
 1009288:	e3a0105b 	mov	r1, #91	; 0x5b
 100928c:	e3400105 	movt	r0, #261	; 0x105
 1009290:	eb000014 	bl	10092e8 <Xil_Assert>
 1009294:	e3a03001 	mov	r3, #1
 1009298:	e1a00004 	mov	r0, r4
 100929c:	e5863000 	str	r3, [r6]
	else {
		Status = (s32)XST_SUCCESS;
	}

	return Status;
}
 10092a0:	e8bd8070 	pop	{r4, r5, r6, pc}
	Xil_AssertNonvoid(InstancePtr != NULL);
 10092a4:	e3090530 	movw	r0, #38192	; 0x9530
 10092a8:	e3a0105a 	mov	r1, #90	; 0x5a
 10092ac:	e3400105 	movt	r0, #261	; 0x105
 10092b0:	eb00000c 	bl	10092e8 <Xil_Assert>
 10092b4:	e30a34c0 	movw	r3, #42176	; 0xa4c0
 10092b8:	e3a02001 	mov	r2, #1
 10092bc:	e3403116 	movt	r3, #278	; 0x116
 10092c0:	e1a00005 	mov	r0, r5
 10092c4:	e5832000 	str	r2, [r3]
 10092c8:	e8bd8070 	pop	{r4, r5, r6, pc}

010092cc <XScuTimer_LookupConfig>:
{
	XScuTimer_Config *CfgPtr = NULL;
	u32 Index;

	for (Index = 0U; Index < XPAR_XSCUTIMER_NUM_INSTANCES; Index++) {
		if (XScuTimer_ConfigTable[Index].DeviceId == DeviceId) {
 10092cc:	e309388c 	movw	r3, #39052	; 0x988c
 10092d0:	e3403105 	movt	r3, #261	; 0x105
 10092d4:	e1d320b0 	ldrh	r2, [r3]
			break;
		}
	}

	return (XScuTimer_Config *)CfgPtr;
}
 10092d8:	e1520000 	cmp	r2, r0
 10092dc:	01a00003 	moveq	r0, r3
 10092e0:	13a00000 	movne	r0, #0
 10092e4:	e12fff1e 	bx	lr

010092e8 <Xil_Assert>:
*
******************************************************************************/
void Xil_Assert(const char8 *File, s32 Line)
{
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
 10092e8:	e3003044 	movw	r3, #68	; 0x44
 10092ec:	e3403106 	movt	r3, #262	; 0x106
 10092f0:	e5933000 	ldr	r3, [r3]
 10092f4:	e3530000 	cmp	r3, #0
 10092f8:	0a000009 	beq	1009324 <Xil_Assert+0x3c>
{
 10092fc:	e92d4010 	push	{r4, lr}
		(*Xil_AssertCallbackRoutine)(File, Line);
 1009300:	e12fff33 	blx	r3
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait != 0) {
 1009304:	e3093894 	movw	r3, #39060	; 0x9894
 1009308:	e3403105 	movt	r3, #261	; 0x105
 100930c:	e5933000 	ldr	r3, [r3]
 1009310:	e3530000 	cmp	r3, #0
 1009314:	08bd8010 	popeq	{r4, pc}
 1009318:	e3530000 	cmp	r3, #0
 100931c:	1afffffb 	bne	1009310 <Xil_Assert+0x28>
 1009320:	e8bd8010 	pop	{r4, pc}
 1009324:	e3093894 	movw	r3, #39060	; 0x9894
 1009328:	e3403105 	movt	r3, #261	; 0x105
 100932c:	e5933000 	ldr	r3, [r3]
 1009330:	e3530000 	cmp	r3, #0
 1009334:	012fff1e 	bxeq	lr
 1009338:	e3530000 	cmp	r3, #0
 100933c:	1afffffb 	bne	1009330 <Xil_Assert+0x48>
 1009340:	e12fff1e 	bx	lr

01009344 <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
 1009344:	e3003044 	movw	r3, #68	; 0x44
 1009348:	e3403106 	movt	r3, #262	; 0x106
 100934c:	e5830000 	str	r0, [r3]
}
 1009350:	e12fff1e 	bx	lr

01009354 <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
	(void) NullParameter;
}
 1009354:	e12fff1e 	bx	lr

01009358 <print>:
 * print -- do a raw print of a string
 */
#include "xil_printf.h"

void print(const char8 *ptr)
{
 1009358:	e92d4010 	push	{r4, lr}
 100935c:	e1a04000 	mov	r4, r0
#if HYP_GUEST && EL1_NONSECURE && XEN_USE_PV_CONSOLE
	XPVXenConsole_Write(ptr);
#else
#ifdef STDOUT_BASEADDRESS
  while (*ptr != (char8)0) {
 1009360:	e5d00000 	ldrb	r0, [r0]
 1009364:	e3500000 	cmp	r0, #0
 1009368:	08bd8010 	popeq	{r4, pc}
    outbyte (*ptr);
 100936c:	eb00025e 	bl	1009cec <outbyte>
  while (*ptr != (char8)0) {
 1009370:	e5f40001 	ldrb	r0, [r4, #1]!
 1009374:	e3500000 	cmp	r0, #0
 1009378:	1afffffb 	bne	100936c <print+0x14>
 100937c:	e8bd8010 	pop	{r4, pc}

01009380 <Xil_DCacheInvalidateLine>:
****************************************************************************/
void Xil_DCacheInvalidateLine(u32 adr)
{
	u32 currmask;

	currmask = mfcpsr();
 1009380:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009384:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1009388:	e129f002 	msr	CPSR_fc, r2
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100938c:	e3a02a02 	mov	r2, #8192	; 0x2000
 1009390:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1009394:	e5820770 	str	r0, [r2, #1904]	; 0x770
****************************************************************************/
void Xil_L2CacheInvalidateLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, (u32)adr);
	/* synchronize the processor */
	dsb();
 1009398:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100939c:	e3a02000 	mov	r2, #0
 10093a0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10093a4:	e3c0001f 	bic	r0, r0, #31
 10093a8:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 10093ac:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10093b0:	e129f003 	msr	CPSR_fc, r3
}
 10093b4:	e12fff1e 	bx	lr

010093b8 <Xil_DCacheInvalidateRange>:
	currmask = mfcpsr();
 10093b8:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10093bc:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10093c0:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10093c4:	e3510000 	cmp	r1, #0
 10093c8:	0a000031 	beq	1009494 <Xil_DCacheInvalidateRange+0xdc>
{
 10093cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10093d0:	e3a02000 	mov	r2, #0
		end = tempadr + len;
 10093d4:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10093d8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		if ((tempadr & (cacheline-1U)) != 0U) {
 10093dc:	e310001f 	tst	r0, #31
 10093e0:	0a00000d 	beq	100941c <Xil_DCacheInvalidateRange+0x64>
			tempadr &= (~(cacheline - 1U));
 10093e4:	e3c0001f 	bic	r0, r0, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10093e8:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10093ec:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 10093f0:	f57ff04f 	dsb	sy
 10093f4:	e3a03a02 	mov	r3, #8192	; 0x2000
 10093f8:	e3a0e003 	mov	lr, #3
 10093fc:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009400:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1009404:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1009408:	e5830770 	str	r0, [r3, #1904]	; 0x770
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, adr);
#endif
	/* synchronize the processor */
	dsb();
 100940c:	f57ff04f 	dsb	sy
			tempadr += cacheline;
 1009410:	e2800020 	add	r0, r0, #32
 1009414:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1009418:	e5832730 	str	r2, [r3, #1840]	; 0x730
		if ((tempend & (cacheline-1U)) != 0U) {
 100941c:	e311001f 	tst	r1, #31
 1009420:	0a00000d 	beq	100945c <Xil_DCacheInvalidateRange+0xa4>
			tempend &= (~(cacheline - 1U));
 1009424:	e3c1101f 	bic	r1, r1, #31
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1009428:	e3a02000 	mov	r2, #0
 100942c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1009430:	ee071f3e 	mcr	15, 0, r1, cr7, cr14, {1}
	dsb();
 1009434:	f57ff04f 	dsb	sy
 1009438:	e3a03a02 	mov	r3, #8192	; 0x2000
 100943c:	e3a0e003 	mov	lr, #3
 1009440:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009444:	e583ef40 	str	lr, [r3, #3904]	; 0xf40
 1009448:	e58317b0 	str	r1, [r3, #1968]	; 0x7b0
 100944c:	e5831770 	str	r1, [r3, #1904]	; 0x770
	dsb();
 1009450:	f57ff04f 	dsb	sy
 1009454:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1009458:	e5832730 	str	r2, [r3, #1840]	; 0x730
		while (tempadr < tempend) {
 100945c:	e1500001 	cmp	r0, r1
 1009460:	2a000008 	bcs	1009488 <Xil_DCacheInvalidateRange+0xd0>
			*L2CCOffset = tempadr;
 1009464:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009468:	e3a02000 	mov	r2, #0
 100946c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009470:	e5830770 	str	r0, [r3, #1904]	; 0x770
 1009474:	e5832730 	str	r2, [r3, #1840]	; 0x730
			asm_cp15_inval_dc_line_mva_poc(tempadr);
 1009478:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			tempadr += cacheline;
 100947c:	e2800020 	add	r0, r0, #32
		while (tempadr < tempend) {
 1009480:	e1500001 	cmp	r0, r1
 1009484:	3afffff9 	bcc	1009470 <Xil_DCacheInvalidateRange+0xb8>
	dsb();
 1009488:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 100948c:	e129f00c 	msr	CPSR_fc, ip
}
 1009490:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	dsb();
 1009494:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009498:	e129f00c 	msr	CPSR_fc, ip
 100949c:	e12fff1e 	bx	lr

010094a0 <Xil_DCacheFlushLine>:
	currmask = mfcpsr();
 10094a0:	e10f1000 	mrs	r1, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10094a4:	e38130c0 	orr	r3, r1, #192	; 0xc0
 10094a8:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10094ac:	e3a02000 	mov	r2, #0
 10094b0:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10094b4:	e3c0301f 	bic	r3, r0, #31
 10094b8:	ee073f3e 	mcr	15, 0, r3, cr7, cr14, {1}
	dsb();
 10094bc:	f57ff04f 	dsb	sy
 10094c0:	e3a03a02 	mov	r3, #8192	; 0x2000
 10094c4:	e3a0c003 	mov	ip, #3
 10094c8:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10094cc:	e583cf40 	str	ip, [r3, #3904]	; 0xf40
 10094d0:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 10094d4:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 10094d8:	f57ff04f 	dsb	sy
 10094dc:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 10094e0:	e5832730 	str	r2, [r3, #1840]	; 0x730
	mtcpsr(currmask);
 10094e4:	e129f001 	msr	CPSR_fc, r1
}
 10094e8:	e12fff1e 	bx	lr

010094ec <Xil_DCacheFlushRange>:
	currmask = mfcpsr();
 10094ec:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10094f0:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 10094f4:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10094f8:	e3510000 	cmp	r1, #0
 10094fc:	0a00000c 	beq	1009534 <Xil_DCacheFlushRange+0x48>
		end = LocalAddr + len;
 1009500:	e0801001 	add	r1, r0, r1
		LocalAddr &= ~(cacheline - 1U);
 1009504:	e3c0001f 	bic	r0, r0, #31
		while (LocalAddr < end) {
 1009508:	e1510000 	cmp	r1, r0
 100950c:	9a000008 	bls	1009534 <Xil_DCacheFlushRange+0x48>
			*L2CCOffset = LocalAddr;
 1009510:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009514:	e3a02000 	mov	r2, #0
 1009518:	e34f38f0 	movt	r3, #63728	; 0xf8f0
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 100951c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			*L2CCOffset = LocalAddr;
 1009520:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1009524:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1009528:	e1510000 	cmp	r1, r0
 100952c:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1009530:	8afffff9 	bhi	100951c <Xil_DCacheFlushRange+0x30>
	dsb();
 1009534:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009538:	e129f00c 	msr	CPSR_fc, ip
}
 100953c:	e12fff1e 	bx	lr

01009540 <Xil_DCacheStoreLine>:
	currmask = mfcpsr();
 1009540:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009544:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1009548:	e129f002 	msr	CPSR_fc, r2
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100954c:	e3a02000 	mov	r2, #0
 1009550:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1009554:	e3c0201f 	bic	r2, r0, #31
 1009558:	ee072f3a 	mcr	15, 0, r2, cr7, cr10, {1}
	dsb();
 100955c:	f57ff04f 	dsb	sy
 1009560:	e3a02a02 	mov	r2, #8192	; 0x2000
 1009564:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1009568:	e58207b0 	str	r0, [r2, #1968]	; 0x7b0
****************************************************************************/
void Xil_L2CacheStoreLine(u32 adr)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
	/* synchronize the processor */
	dsb();
 100956c:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009570:	e129f003 	msr	CPSR_fc, r3
}
 1009574:	e12fff1e 	bx	lr

01009578 <Xil_ICacheInvalidateLine>:
	currmask = mfcpsr();
 1009578:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 100957c:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1009580:	e129f002 	msr	CPSR_fc, r2
 1009584:	e3a02a02 	mov	r2, #8192	; 0x2000
 1009588:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 100958c:	e5820770 	str	r0, [r2, #1904]	; 0x770
	dsb();
 1009590:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1009594:	e3a02001 	mov	r2, #1
 1009598:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 100959c:	e3c0001f 	bic	r0, r0, #31
 10095a0:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 10095a4:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10095a8:	e129f003 	msr	CPSR_fc, r3
}
 10095ac:	e12fff1e 	bx	lr

010095b0 <Xil_ICacheInvalidateRange>:
	currmask = mfcpsr();
 10095b0:	e10f2000 	mrs	r2, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10095b4:	e38230c0 	orr	r3, r2, #192	; 0xc0
 10095b8:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 10095bc:	e3510000 	cmp	r1, #0
 10095c0:	0a00000d 	beq	10095fc <Xil_ICacheInvalidateRange+0x4c>
		end = LocalAddr + len;
 10095c4:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10095c8:	e3a03001 	mov	r3, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 10095cc:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10095d0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
		while (LocalAddr < end) {
 10095d4:	e1510000 	cmp	r1, r0
 10095d8:	9a000007 	bls	10095fc <Xil_ICacheInvalidateRange+0x4c>
		*L2CCOffset = LocalAddr;
 10095dc:	e3a03a02 	mov	r3, #8192	; 0x2000
 10095e0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10095e4:	e5830770 	str	r0, [r3, #1904]	; 0x770
		dsb();
 10095e8:	f57ff04f 	dsb	sy
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 10095ec:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 10095f0:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 10095f4:	e1510000 	cmp	r1, r0
 10095f8:	8afffff9 	bhi	10095e4 <Xil_ICacheInvalidateRange+0x34>
	dsb();
 10095fc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009600:	e129f002 	msr	CPSR_fc, r2
}
 1009604:	e12fff1e 	bx	lr

01009608 <Xil_L1DCacheInvalidate>:
{
 1009608:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 100960c:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009610:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1009614:	e129f003 	msr	CPSR_fc, r3
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1009618:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 100961c:	e3130004 	tst	r3, #4
 1009620:	1a00001e 	bne	10096a0 <Xil_L1DCacheInvalidate+0x98>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1009624:	e3a04000 	mov	r4, #0
 1009628:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 100962c:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1009630:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 1009634:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1009638:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 100963c:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1009640:	e1a00380 	lsl	r0, r0, #7
 1009644:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1009648:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 100964c:	fa000415 	blx	100a6a8 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1009650:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 1009654:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1009658:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 100965c:	e3500000 	cmp	r0, #0
 1009660:	e1a0cf04 	lsl	ip, r4, #30
 1009664:	13a03000 	movne	r3, #0
 1009668:	11a02003 	movne	r2, r3
 100966c:	0a000005 	beq	1009688 <Xil_L1DCacheInvalidate+0x80>
			C7Reg = Way | Set;
 1009670:	e182100c 	orr	r1, r2, ip
			asm_cp15_inval_dc_line_sw(C7Reg);
 1009674:	ee071f56 	mcr	15, 0, r1, cr7, cr6, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1009678:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 100967c:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1009680:	e1500003 	cmp	r0, r3
 1009684:	1afffff9 	bne	1009670 <Xil_L1DCacheInvalidate+0x68>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 1009688:	e1550004 	cmp	r5, r4
 100968c:	e2844001 	add	r4, r4, #1
 1009690:	1afffff1 	bne	100965c <Xil_L1DCacheInvalidate+0x54>
	dsb();
 1009694:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009698:	e129f006 	msr	CPSR_fc, r6
}
 100969c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	stack_size=stack_start-stack_end;
 10096a0:	e3011800 	movw	r1, #6144	; 0x1800
 10096a4:	e3000000 	movw	r0, #0
 10096a8:	e3400000 	movt	r0, #0
 10096ac:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 10096b0:	e0411000 	sub	r1, r1, r0
 10096b4:	ebffff8c 	bl	10094ec <Xil_DCacheFlushRange>
 10096b8:	eaffffd9 	b	1009624 <Xil_L1DCacheInvalidate+0x1c>

010096bc <Xil_L1DCacheEnable>:
{
 10096bc:	e92d4010 	push	{r4, lr}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10096c0:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_C_BIT)) != 0U) {
 10096c4:	e3140004 	tst	r4, #4
 10096c8:	18bd8010 	popne	{r4, pc}
	Xil_L1DCacheInvalidate();
 10096cc:	ebffffcd 	bl	1009608 <Xil_L1DCacheInvalidate>
	CtrlReg |= (XREG_CP15_CONTROL_C_BIT);
 10096d0:	e3844004 	orr	r4, r4, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10096d4:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
}
 10096d8:	e8bd8010 	pop	{r4, pc}

010096dc <Xil_L1DCacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 10096dc:	e3a03000 	mov	r3, #0
 10096e0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10096e4:	e3c0001f 	bic	r0, r0, #31
 10096e8:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	dsb();
 10096ec:	f57ff04f 	dsb	sy
}
 10096f0:	e12fff1e 	bx	lr

010096f4 <Xil_L1DCacheInvalidateRange>:
	currmask = mfcpsr();
 10096f4:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10096f8:	e38320c0 	orr	r2, r3, #192	; 0xc0
 10096fc:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1009700:	e3510000 	cmp	r1, #0
 1009704:	0a000009 	beq	1009730 <Xil_L1DCacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1009708:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 100970c:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1009710:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 1009714:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1009718:	e1510000 	cmp	r1, r0
 100971c:	9a000003 	bls	1009730 <Xil_L1DCacheInvalidateRange+0x3c>
			asm_cp15_inval_dc_line_mva_poc(LocalAddr);
 1009720:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			LocalAddr += cacheline;
 1009724:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1009728:	e1510000 	cmp	r1, r0
 100972c:	8afffffb 	bhi	1009720 <Xil_L1DCacheInvalidateRange+0x2c>
	dsb();
 1009730:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009734:	e129f003 	msr	CPSR_fc, r3
}
 1009738:	e12fff1e 	bx	lr

0100973c <Xil_L1DCacheFlush>:
{
 100973c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	currmask = mfcpsr();
 1009740:	e10f6000 	mrs	r6, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009744:	e38630c0 	orr	r3, r6, #192	; 0xc0
 1009748:	e129f003 	msr	CPSR_fc, r3
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
 100974c:	e3a04000 	mov	r4, #0
 1009750:	ee404f10 	mcr	15, 2, r4, cr0, cr0, {0}
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
 1009754:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
	CacheSize = (CsidReg >> 13U) & 0x1FFU;
 1009758:	e7e806d3 	ubfx	r0, r3, #13, #9
	NumWays = (CsidReg & 0x3ffU) >> 3U;
 100975c:	e7e651d3 	ubfx	r5, r3, #3, #7
	CacheSize +=1U;
 1009760:	e2800001 	add	r0, r0, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1009764:	e2033007 	and	r3, r3, #7
	NumSet = CacheSize/NumWays;
 1009768:	e1a00380 	lsl	r0, r0, #7
 100976c:	e2851001 	add	r1, r5, #1
	LineSize = (CsidReg & 0x07U) + 4U;
 1009770:	e2837004 	add	r7, r3, #4
	NumSet = CacheSize/NumWays;
 1009774:	fa0003cb 	blx	100a6a8 <__udivsi3>
			Set += (0x00000001U << LineSize);
 1009778:	e3a0e001 	mov	lr, #1
	NumSet /= (0x00000001U << LineSize);
 100977c:	e1a00730 	lsr	r0, r0, r7
			Set += (0x00000001U << LineSize);
 1009780:	e1a0e71e 	lsl	lr, lr, r7
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 1009784:	e3500000 	cmp	r0, #0
 1009788:	e1a0cf04 	lsl	ip, r4, #30
 100978c:	13a03000 	movne	r3, #0
 1009790:	11a02003 	movne	r2, r3
 1009794:	0a000005 	beq	10097b0 <Xil_L1DCacheFlush+0x74>
			C7Reg = Way | Set;
 1009798:	e182100c 	orr	r1, r2, ip
			asm_cp15_clean_inval_dc_line_sw(C7Reg);
 100979c:	ee071f5e 	mcr	15, 0, r1, cr7, cr14, {2}
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10097a0:	e2833001 	add	r3, r3, #1
			Set += (0x00000001U << LineSize);
 10097a4:	e082200e 	add	r2, r2, lr
		for (SetIndex =0U; SetIndex < NumSet; SetIndex++) {
 10097a8:	e1500003 	cmp	r0, r3
 10097ac:	1afffff9 	bne	1009798 <Xil_L1DCacheFlush+0x5c>
	for (WayIndex =0U; WayIndex < NumWays; WayIndex++) {
 10097b0:	e1550004 	cmp	r5, r4
 10097b4:	e2844001 	add	r4, r4, #1
 10097b8:	1afffff1 	bne	1009784 <Xil_L1DCacheFlush+0x48>
	dsb();
 10097bc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 10097c0:	e129f006 	msr	CPSR_fc, r6
}
 10097c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010097c8 <Xil_L1DCacheDisable>:
{
 10097c8:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheFlush();
 10097cc:	ebffffda 	bl	100973c <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10097d0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 10097d4:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10097d8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10097dc:	e8bd8010 	pop	{r4, pc}

010097e0 <Xil_DCacheFlush>:
{
 10097e0:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 10097e4:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 10097e8:	e38430c0 	orr	r3, r4, #192	; 0xc0
 10097ec:	e129f003 	msr	CPSR_fc, r3
	Xil_L1DCacheFlush();
 10097f0:	ebffffd1 	bl	100973c <Xil_L1DCacheFlush>
 10097f4:	e3a02a02 	mov	r2, #8192	; 0x2000
 10097f8:	e3a01003 	mov	r1, #3
 10097fc:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1009800:	e30f3fff 	movw	r3, #65535	; 0xffff
 1009804:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1009808:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 100980c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1009810:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1009814:	e3530000 	cmp	r3, #0
 1009818:	1afffffb 	bne	100980c <Xil_DCacheFlush+0x2c>
	*LocalAddr = Value;
 100981c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009820:	e3a02000 	mov	r2, #0
 1009824:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009828:	e5832730 	str	r2, [r3, #1840]	; 0x730
 100982c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1009830:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009834:	e129f004 	msr	CPSR_fc, r4
}
 1009838:	e8bd8010 	pop	{r4, pc}

0100983c <Xil_L1DCacheFlushLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100983c:	e3a03000 	mov	r3, #0
 1009840:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 1009844:	e3c0001f 	bic	r0, r0, #31
 1009848:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
	dsb();
 100984c:	f57ff04f 	dsb	sy
}
 1009850:	e12fff1e 	bx	lr

01009854 <Xil_L1DCacheFlushRange>:
	currmask = mfcpsr();
 1009854:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009858:	e38320c0 	orr	r2, r3, #192	; 0xc0
 100985c:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1009860:	e3510000 	cmp	r1, #0
 1009864:	0a000009 	beq	1009890 <Xil_L1DCacheFlushRange+0x3c>
		end = LocalAddr + len;
 1009868:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100986c:	e3a02000 	mov	r2, #0
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1009870:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 1009874:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1009878:	e1510000 	cmp	r1, r0
 100987c:	9a000003 	bls	1009890 <Xil_L1DCacheFlushRange+0x3c>
			asm_cp15_clean_inval_dc_line_mva_poc(LocalAddr);
 1009880:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			LocalAddr += cacheline;
 1009884:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1009888:	e1510000 	cmp	r1, r0
 100988c:	8afffffb 	bhi	1009880 <Xil_L1DCacheFlushRange+0x2c>
	dsb();
 1009890:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009894:	e129f003 	msr	CPSR_fc, r3
}
 1009898:	e12fff1e 	bx	lr

0100989c <Xil_L1DCacheStoreLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0U);
 100989c:	e3a03000 	mov	r3, #0
 10098a0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1FU)));
 10098a4:	e3c0001f 	bic	r0, r0, #31
 10098a8:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
	dsb();
 10098ac:	f57ff04f 	dsb	sy
}
 10098b0:	e12fff1e 	bx	lr

010098b4 <Xil_L1ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10098b4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 10098b8:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 10098bc:	112fff1e 	bxne	lr
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10098c0:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 10098c4:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10098c8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10098cc:	e12fff1e 	bx	lr

010098d0 <Xil_L1ICacheDisable>:
	dsb();
 10098d0:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10098d4:	e3a03000 	mov	r3, #0
 10098d8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10098dc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 10098e0:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10098e4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10098e8:	e12fff1e 	bx	lr

010098ec <Xil_L1ICacheInvalidate>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 10098ec:	e3a03001 	mov	r3, #1
 10098f0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 10098f4:	e3a03000 	mov	r3, #0
 10098f8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 10098fc:	f57ff04f 	dsb	sy
}
 1009900:	e12fff1e 	bx	lr

01009904 <Xil_L1ICacheInvalidateLine>:
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1009904:	e3a03001 	mov	r3, #1
 1009908:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1FU)));
 100990c:	e3c0001f 	bic	r0, r0, #31
 1009910:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
	dsb();
 1009914:	f57ff04f 	dsb	sy
}
 1009918:	e12fff1e 	bx	lr

0100991c <Xil_L1ICacheInvalidateRange>:
	currmask = mfcpsr();
 100991c:	e10f3000 	mrs	r3, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009920:	e38320c0 	orr	r2, r3, #192	; 0xc0
 1009924:	e129f002 	msr	CPSR_fc, r2
	if (len != 0U) {
 1009928:	e3510000 	cmp	r1, #0
 100992c:	0a000009 	beq	1009958 <Xil_L1ICacheInvalidateRange+0x3c>
		end = LocalAddr + len;
 1009930:	e0801001 	add	r1, r0, r1
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1009934:	e3a02001 	mov	r2, #1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1009938:	e3c0001f 	bic	r0, r0, #31
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 100993c:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}
		while (LocalAddr < end) {
 1009940:	e1510000 	cmp	r1, r0
 1009944:	9a000003 	bls	1009958 <Xil_L1ICacheInvalidateRange+0x3c>
			asm_cp15_inval_ic_line_mva_pou(LocalAddr);
 1009948:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			LocalAddr += cacheline;
 100994c:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1009950:	e1510000 	cmp	r1, r0
 1009954:	8afffffb 	bhi	1009948 <Xil_L1ICacheInvalidateRange+0x2c>
	dsb();
 1009958:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 100995c:	e129f003 	msr	CPSR_fc, r3
}
 1009960:	e12fff1e 	bx	lr

01009964 <Xil_L2CacheDisable>:
	return *(volatile u32 *) Addr;
 1009964:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009968:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 100996c:	e5932100 	ldr	r2, [r3, #256]	; 0x100
    if((L2CCReg & 0x1U) != 0U) {
 1009970:	e3120001 	tst	r2, #1
 1009974:	012fff1e 	bxeq	lr
	*LocalAddr = Value;
 1009978:	e30f2fff 	movw	r2, #65535	; 0xffff
 100997c:	e3a01003 	mov	r1, #3
 1009980:	e5831f40 	str	r1, [r3, #3904]	; 0xf40
 1009984:	e58327fc 	str	r2, [r3, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1009988:	e59327fc 	ldr	r2, [r3, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 100998c:	e6ff2072 	uxth	r2, r2
	while(ResultL2Cache != (u32)0U) {
 1009990:	e3520000 	cmp	r2, #0
 1009994:	0a000004 	beq	10099ac <Xil_L2CacheDisable+0x48>
 1009998:	e1a02003 	mov	r2, r3
 100999c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
		ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 10099a0:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 10099a4:	e3530000 	cmp	r3, #0
 10099a8:	1afffffb 	bne	100999c <Xil_L2CacheDisable+0x38>
	*LocalAddr = Value;
 10099ac:	e3a03a02 	mov	r3, #8192	; 0x2000
 10099b0:	e3a02000 	mov	r2, #0
 10099b4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 10099b8:	e5832730 	str	r2, [r3, #1840]	; 0x730
 10099bc:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 10099c0:	f57ff04f 	dsb	sy
	return *(volatile u32 *) Addr;
 10099c4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	    Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 10099c8:	e3c22001 	bic	r2, r2, #1
	*LocalAddr = Value;
 10099cc:	e5832100 	str	r2, [r3, #256]	; 0x100
		dsb();
 10099d0:	f57ff04f 	dsb	sy
}
 10099d4:	e12fff1e 	bx	lr

010099d8 <Xil_DCacheDisable>:
{
 10099d8:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 10099dc:	ebffffe0 	bl	1009964 <Xil_L2CacheDisable>
	Xil_L1DCacheFlush();
 10099e0:	ebffff55 	bl	100973c <Xil_L1DCacheFlush>
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 10099e4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
 10099e8:	e3c33004 	bic	r3, r3, #4
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 10099ec:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 10099f0:	e8bd8010 	pop	{r4, pc}

010099f4 <Xil_ICacheDisable>:
{
 10099f4:	e92d4010 	push	{r4, lr}
	Xil_L2CacheDisable();
 10099f8:	ebffffd9 	bl	1009964 <Xil_L2CacheDisable>
	dsb();
 10099fc:	f57ff04f 	dsb	sy
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1009a00:	e3a03000 	mov	r3, #0
 1009a04:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1009a08:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
 1009a0c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1009a10:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1009a14:	e8bd8010 	pop	{r4, pc}

01009a18 <Xil_L2CacheInvalidate>:
	return *(volatile u32 *) Addr;
 1009a18:	e3a03a02 	mov	r3, #8192	; 0x2000
{
 1009a1c:	e92d4010 	push	{r4, lr}
 1009a20:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009a24:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) != 0U) {
 1009a28:	e3130001 	tst	r3, #1
 1009a2c:	1a00000d 	bne	1009a68 <Xil_L2CacheInvalidate+0x50>
	*LocalAddr = Value;
 1009a30:	e3a02a02 	mov	r2, #8192	; 0x2000
 1009a34:	e30f3fff 	movw	r3, #65535	; 0xffff
 1009a38:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1009a3c:	e582377c 	str	r3, [r2, #1916]	; 0x77c
	return *(volatile u32 *) Addr;
 1009a40:	e592377c 	ldr	r3, [r2, #1916]	; 0x77c
	ResultDCache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET)
 1009a44:	e6ff3073 	uxth	r3, r3
	while(ResultDCache != (u32)0U) {
 1009a48:	e3530000 	cmp	r3, #0
 1009a4c:	1afffffb 	bne	1009a40 <Xil_L2CacheInvalidate+0x28>
	*LocalAddr = Value;
 1009a50:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009a54:	e3a02000 	mov	r2, #0
 1009a58:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009a5c:	e5832730 	str	r2, [r3, #1840]	; 0x730
	dsb();
 1009a60:	f57ff04f 	dsb	sy
}
 1009a64:	e8bd8010 	pop	{r4, pc}
	stack_size=stack_start-stack_end;
 1009a68:	e3011800 	movw	r1, #6144	; 0x1800
 1009a6c:	e3000000 	movw	r0, #0
 1009a70:	e3400000 	movt	r0, #0
 1009a74:	e3401001 	movt	r1, #1
		Xil_DCacheFlushRange(stack_end, stack_size);
 1009a78:	e0411000 	sub	r1, r1, r0
 1009a7c:	ebfffe9a 	bl	10094ec <Xil_DCacheFlushRange>
 1009a80:	eaffffea 	b	1009a30 <Xil_L2CacheInvalidate+0x18>

01009a84 <Xil_DCacheInvalidate>:
{
 1009a84:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1009a88:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009a8c:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1009a90:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1009a94:	ebffffdf 	bl	1009a18 <Xil_L2CacheInvalidate>
	Xil_L1DCacheInvalidate();
 1009a98:	ebfffeda 	bl	1009608 <Xil_L1DCacheInvalidate>
	mtcpsr(currmask);
 1009a9c:	e129f004 	msr	CPSR_fc, r4
}
 1009aa0:	e8bd8010 	pop	{r4, pc}

01009aa4 <Xil_ICacheInvalidate>:
{
 1009aa4:	e92d4010 	push	{r4, lr}
	currmask = mfcpsr();
 1009aa8:	e10f4000 	mrs	r4, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009aac:	e38430c0 	orr	r3, r4, #192	; 0xc0
 1009ab0:	e129f003 	msr	CPSR_fc, r3
	Xil_L2CacheInvalidate();
 1009ab4:	ebffffd7 	bl	1009a18 <Xil_L2CacheInvalidate>
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1U);
 1009ab8:	e3a03001 	mov	r3, #1
 1009abc:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1009ac0:	e3a03000 	mov	r3, #0
 1009ac4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	dsb();
 1009ac8:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009acc:	e129f004 	msr	CPSR_fc, r4
}
 1009ad0:	e8bd8010 	pop	{r4, pc}

01009ad4 <Xil_L2CacheEnable.part.0>:
void Xil_L2CacheEnable(void)
 1009ad4:	e92d4010 	push	{r4, lr}
	return *(volatile u32 *) Addr;
 1009ad8:	e3a04a02 	mov	r4, #8192	; 0x2000
 1009adc:	e34f48f0 	movt	r4, #63728	; 0xf8f0
	*LocalAddr = Value;
 1009ae0:	e3001111 	movw	r1, #273	; 0x111
 1009ae4:	e3002121 	movw	r2, #289	; 0x121
	return *(volatile u32 *) Addr;
 1009ae8:	e5943104 	ldr	r3, [r4, #260]	; 0x104
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
 1009aec:	e3c3380e 	bic	r3, r3, #917504	; 0xe0000
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
 1009af0:	e3833472 	orr	r3, r3, #1912602624	; 0x72000000
 1009af4:	e3833836 	orr	r3, r3, #3538944	; 0x360000
	*LocalAddr = Value;
 1009af8:	e5843104 	str	r3, [r4, #260]	; 0x104
 1009afc:	e5841108 	str	r1, [r4, #264]	; 0x108
 1009b00:	e584210c 	str	r2, [r4, #268]	; 0x10c
	return *(volatile u32 *) Addr;
 1009b04:	e594321c 	ldr	r3, [r4, #540]	; 0x21c
	*LocalAddr = Value;
 1009b08:	e5843220 	str	r3, [r4, #544]	; 0x220
		Xil_L2CacheInvalidate();
 1009b0c:	ebffffc1 	bl	1009a18 <Xil_L2CacheInvalidate>
	return *(volatile u32 *) Addr;
 1009b10:	e5943100 	ldr	r3, [r4, #256]	; 0x100
	*LocalAddr = Value;
 1009b14:	e3a02000 	mov	r2, #0
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
 1009b18:	e3833001 	orr	r3, r3, #1
 1009b1c:	e5843100 	str	r3, [r4, #256]	; 0x100
 1009b20:	e5842730 	str	r2, [r4, #1840]	; 0x730
	    dsb();
 1009b24:	f57ff04f 	dsb	sy
}
 1009b28:	e8bd8010 	pop	{r4, pc}

01009b2c <Xil_L2CacheEnable>:
	return *(volatile u32 *) Addr;
 1009b2c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009b30:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009b34:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1009b38:	e3130001 	tst	r3, #1
 1009b3c:	112fff1e 	bxne	lr
 1009b40:	eaffffe3 	b	1009ad4 <Xil_L2CacheEnable.part.0>

01009b44 <Xil_DCacheEnable>:
{
 1009b44:	e92d4010 	push	{r4, lr}
	Xil_L1DCacheEnable();
 1009b48:	ebfffedb 	bl	10096bc <Xil_L1DCacheEnable>
 1009b4c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009b50:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009b54:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1009b58:	e3130001 	tst	r3, #1
 1009b5c:	18bd8010 	popne	{r4, pc}
}
 1009b60:	e8bd4010 	pop	{r4, lr}
 1009b64:	eaffffda 	b	1009ad4 <Xil_L2CacheEnable.part.0>

01009b68 <Xil_ICacheEnable>:
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
 1009b68:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	if ((CtrlReg & (XREG_CP15_CONTROL_I_BIT)) != 0U) {
 1009b6c:	e2132a01 	ands	r2, r3, #4096	; 0x1000
 1009b70:	1a000002 	bne	1009b80 <Xil_ICacheEnable+0x18>
	mtcp(XREG_CP15_INVAL_IC_POU, 0U);
 1009b74:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
 1009b78:	e3833a01 	orr	r3, r3, #4096	; 0x1000
	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
 1009b7c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
 1009b80:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009b84:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009b88:	e5933100 	ldr	r3, [r3, #256]	; 0x100
	if ((L2CCReg & 0x01U) == 0U) {
 1009b8c:	e3130001 	tst	r3, #1
 1009b90:	112fff1e 	bxne	lr
 1009b94:	eaffffce 	b	1009ad4 <Xil_L2CacheEnable.part.0>

01009b98 <Xil_L2CacheInvalidateLine>:
	*LocalAddr = Value;
 1009b98:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009b9c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009ba0:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1009ba4:	f57ff04f 	dsb	sy
}
 1009ba8:	e12fff1e 	bx	lr

01009bac <Xil_L2CacheInvalidateRange>:
	currmask = mfcpsr();
 1009bac:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009bb0:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1009bb4:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1009bb8:	e3510000 	cmp	r1, #0
 1009bbc:	0a000011 	beq	1009c08 <Xil_L2CacheInvalidateRange+0x5c>
		end = LocalAddr + len;
 1009bc0:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1009bc4:	e3c0001f 	bic	r0, r0, #31
 1009bc8:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 1009bcc:	e1510000 	cmp	r1, r0
 1009bd0:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009bd4:	e3a02003 	mov	r2, #3
 1009bd8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1009bdc:	9a000005 	bls	1009bf8 <Xil_L2CacheInvalidateRange+0x4c>
 1009be0:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 1009be4:	e5830770 	str	r0, [r3, #1904]	; 0x770
			LocalAddr += cacheline;
 1009be8:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1009bec:	e1510000 	cmp	r1, r0
 1009bf0:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1009bf4:	8afffffa 	bhi	1009be4 <Xil_L2CacheInvalidateRange+0x38>
 1009bf8:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009bfc:	e3a02000 	mov	r2, #0
 1009c00:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009c04:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1009c08:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009c0c:	e129f00c 	msr	CPSR_fc, ip
}
 1009c10:	e12fff1e 	bx	lr

01009c14 <Xil_L2CacheFlush>:
 1009c14:	e3a02a02 	mov	r2, #8192	; 0x2000
 1009c18:	e3a01003 	mov	r1, #3
 1009c1c:	e34f28f0 	movt	r2, #63728	; 0xf8f0
 1009c20:	e30f3fff 	movw	r3, #65535	; 0xffff
 1009c24:	e5821f40 	str	r1, [r2, #3904]	; 0xf40
 1009c28:	e58237fc 	str	r3, [r2, #2044]	; 0x7fc
	return *(volatile u32 *) Addr;
 1009c2c:	e59237fc 	ldr	r3, [r2, #2044]	; 0x7fc
	ResultL2Cache = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET)
 1009c30:	e6ff3073 	uxth	r3, r3
	while(ResultL2Cache != (u32)0U) {
 1009c34:	e3530000 	cmp	r3, #0
 1009c38:	1afffffb 	bne	1009c2c <Xil_L2CacheFlush+0x18>
	*LocalAddr = Value;
 1009c3c:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009c40:	e3a02000 	mov	r2, #0
 1009c44:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009c48:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1009c4c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1009c50:	f57ff04f 	dsb	sy
}
 1009c54:	e12fff1e 	bx	lr

01009c58 <Xil_L2CacheFlushLine>:
 1009c58:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009c5c:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009c60:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
 1009c64:	e5830770 	str	r0, [r3, #1904]	; 0x770
	dsb();
 1009c68:	f57ff04f 	dsb	sy
}
 1009c6c:	e12fff1e 	bx	lr

01009c70 <Xil_L2CacheFlushRange>:
	currmask = mfcpsr();
 1009c70:	e10fc000 	mrs	ip, CPSR
	mtcpsr(currmask | IRQ_FIQ_MASK);
 1009c74:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 1009c78:	e129f003 	msr	CPSR_fc, r3
	if (len != 0U) {
 1009c7c:	e3510000 	cmp	r1, #0
 1009c80:	0a000011 	beq	1009ccc <Xil_L2CacheFlushRange+0x5c>
		end = LocalAddr + len;
 1009c84:	e0801001 	add	r1, r0, r1
		LocalAddr = LocalAddr & ~(cacheline - 1U);
 1009c88:	e3c0001f 	bic	r0, r0, #31
 1009c8c:	e3a03a02 	mov	r3, #8192	; 0x2000
		while (LocalAddr < end) {
 1009c90:	e1510000 	cmp	r1, r0
 1009c94:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009c98:	e3a02003 	mov	r2, #3
 1009c9c:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
 1009ca0:	9a000005 	bls	1009cbc <Xil_L2CacheFlushRange+0x4c>
 1009ca4:	e3a02000 	mov	r2, #0
			*L2CCOffset = LocalAddr;
 1009ca8:	e58307f0 	str	r0, [r3, #2032]	; 0x7f0
			LocalAddr += cacheline;
 1009cac:	e2800020 	add	r0, r0, #32
		while (LocalAddr < end) {
 1009cb0:	e1510000 	cmp	r1, r0
 1009cb4:	e5832730 	str	r2, [r3, #1840]	; 0x730
 1009cb8:	8afffffa 	bhi	1009ca8 <Xil_L2CacheFlushRange+0x38>
 1009cbc:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009cc0:	e3a02000 	mov	r2, #0
 1009cc4:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009cc8:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
	dsb();
 1009ccc:	f57ff04f 	dsb	sy
	mtcpsr(currmask);
 1009cd0:	e129f00c 	msr	CPSR_fc, ip
}
 1009cd4:	e12fff1e 	bx	lr

01009cd8 <Xil_L2CacheStoreLine>:
 1009cd8:	e3a03a02 	mov	r3, #8192	; 0x2000
 1009cdc:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 1009ce0:	e58307b0 	str	r0, [r3, #1968]	; 0x7b0
	dsb();
 1009ce4:	f57ff04f 	dsb	sy
}
 1009ce8:	e12fff1e 	bx	lr

01009cec <outbyte>:
#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
	 XUartPs_SendByte(STDOUT_BASEADDRESS, c);
 1009cec:	e1a01000 	mov	r1, r0
 1009cf0:	e3a00a01 	mov	r0, #4096	; 0x1000
 1009cf4:	e34e0000 	movt	r0, #57344	; 0xe000
 1009cf8:	ea0001ea 	b	100a4a8 <XUartPs_SendByte>

01009cfc <XGetPlatform_Info>:
#elif (__microblaze__)
	return XPLAT_MICROBLAZE;
#else
	return XPLAT_ZYNQ;
#endif
}
 1009cfc:	e3a00004 	mov	r0, #4
 1009d00:	e12fff1e 	bx	lr

01009d04 <getnum>:
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
static s32 getnum( charptr* linep)
{
 1009d04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 1009d08:	e1a07000 	mov	r7, r0
    s32 n;
    s32 ResultIsDigit = 0;
    charptr cptr;
    n = 0;
    cptr = *linep;
 1009d0c:	e5906000 	ldr	r6, [r0]
	if(cptr != NULL){
 1009d10:	e3560000 	cmp	r6, #0
 1009d14:	0a00001b 	beq	1009d88 <getnum+0x84>
		ResultIsDigit = isdigit(((s32)*cptr));
 1009d18:	fa000817 	blx	100bd7c <__locale_ctype_ptr>
 1009d1c:	e5d63000 	ldrb	r3, [r6]
 1009d20:	e0800003 	add	r0, r0, r3
	}
    while (ResultIsDigit != 0) {
 1009d24:	e5d05001 	ldrb	r5, [r0, #1]
 1009d28:	e2155004 	ands	r5, r5, #4
 1009d2c:	0a000012 	beq	1009d7c <getnum+0x78>
 1009d30:	e2864001 	add	r4, r6, #1
 1009d34:	e3a05000 	mov	r5, #0
		if(cptr != NULL){
 1009d38:	e3540001 	cmp	r4, #1
 1009d3c:	0a000013 	beq	1009d90 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
			cptr += 1;
			if(cptr != NULL){
 1009d40:	e3540000 	cmp	r4, #0
			cptr += 1;
 1009d44:	e1a06004 	mov	r6, r4
			if(cptr != NULL){
 1009d48:	0a000010 	beq	1009d90 <getnum+0x8c>
			n = ((n*10) + (((s32)*cptr) - (s32)'0'));
 1009d4c:	e5543001 	ldrb	r3, [r4, #-1]
 1009d50:	e0855105 	add	r5, r5, r5, lsl #2
 1009d54:	e2844001 	add	r4, r4, #1
 1009d58:	e2433030 	sub	r3, r3, #48	; 0x30
 1009d5c:	e0835085 	add	r5, r3, r5, lsl #1
				ResultIsDigit = isdigit(((s32)*cptr));
 1009d60:	fa000805 	blx	100bd7c <__locale_ctype_ptr>
			}
		}
		ResultIsDigit = isdigit(((s32)*cptr));
 1009d64:	fa000804 	blx	100bd7c <__locale_ctype_ptr>
 1009d68:	e5d63000 	ldrb	r3, [r6]
 1009d6c:	e0800003 	add	r0, r0, r3
    while (ResultIsDigit != 0) {
 1009d70:	e5d03001 	ldrb	r3, [r0, #1]
 1009d74:	e3130004 	tst	r3, #4
 1009d78:	1affffee 	bne	1009d38 <getnum+0x34>
	}
    *linep = ((charptr )(cptr));
 1009d7c:	e5876000 	str	r6, [r7]
    return(n);
}
 1009d80:	e1a00005 	mov	r0, r5
 1009d84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1009d88:	e1a05006 	mov	r5, r6
 1009d8c:	eafffffa 	b	1009d7c <getnum+0x78>
		ResultIsDigit = isdigit(((s32)*cptr));
 1009d90:	fa0007f9 	blx	100bd7c <__locale_ctype_ptr>
 1009d94:	e3a03000 	mov	r3, #0
 1009d98:	e5d33000 	ldrb	r3, [r3]
 1009d9c:	e7f000f0 	udf	#0

01009da0 <padding.part.0>:
static void padding( const s32 l_flag, const struct params_s *par)
 1009da0:	e92d4070 	push	{r4, r5, r6, lr}
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1009da4:	e5903004 	ldr	r3, [r0, #4]
 1009da8:	e5904000 	ldr	r4, [r0]
 1009dac:	e1540003 	cmp	r4, r3
 1009db0:	a8bd8070 	popge	{r4, r5, r6, pc}
 1009db4:	e1a05000 	mov	r5, r0
            outbyte( par->pad_character);
 1009db8:	e5d5000c 	ldrb	r0, [r5, #12]
        for (; i<(par->num1); i++) {
 1009dbc:	e2844001 	add	r4, r4, #1
            outbyte( par->pad_character);
 1009dc0:	ebffffc9 	bl	1009cec <outbyte>
        for (; i<(par->num1); i++) {
 1009dc4:	e5953004 	ldr	r3, [r5, #4]
 1009dc8:	e1540003 	cmp	r4, r3
 1009dcc:	bafffff9 	blt	1009db8 <padding.part.0+0x18>
 1009dd0:	e8bd8070 	pop	{r4, r5, r6, pc}

01009dd4 <outnum>:
{
 1009dd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char8 digits[] = "0123456789ABCDEF";
 1009dd8:	e3094548 	movw	r4, #38216	; 0x9548
 1009ddc:	e3404105 	movt	r4, #261	; 0x105
{
 1009de0:	e1a05000 	mov	r5, r0
 1009de4:	e1a08001 	mov	r8, r1
 1009de8:	e1a07002 	mov	r7, r2
    const char8 digits[] = "0123456789ABCDEF";
 1009dec:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
{
 1009df0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    const char8 digits[] = "0123456789ABCDEF";
 1009df4:	e28d9004 	add	r9, sp, #4
 1009df8:	e28d6018 	add	r6, sp, #24
 1009dfc:	e28dc017 	add	ip, sp, #23
 1009e00:	e28de037 	add	lr, sp, #55	; 0x37
 1009e04:	e5944000 	ldr	r4, [r4]
 1009e08:	e8a9000f 	stmia	r9!, {r0, r1, r2, r3}
	outbuf[i] = '0';
 1009e0c:	e3a03030 	mov	r3, #48	; 0x30
    const char8 digits[] = "0123456789ABCDEF";
 1009e10:	e5c94000 	strb	r4, [r9]
	outbuf[i] = '0';
 1009e14:	e5ec3001 	strb	r3, [ip, #1]!
    for(i = 0; i<32; i++) {
 1009e18:	e15c000e 	cmp	ip, lr
 1009e1c:	1afffffc 	bne	1009e14 <outnum+0x40>
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1009e20:	e5973018 	ldr	r3, [r7, #24]
 1009e24:	e3530000 	cmp	r3, #0
 1009e28:	1a000039 	bne	1009f14 <outnum+0x140>
 1009e2c:	e1a03fa5 	lsr	r3, r5, #31
 1009e30:	e358000a 	cmp	r8, #10
 1009e34:	13a03000 	movne	r3, #0
 1009e38:	02033001 	andeq	r3, r3, #1
 1009e3c:	e3530000 	cmp	r3, #0
		num =(-(n));
 1009e40:	12655000 	rsbne	r5, r5, #0
        negative = 1;
 1009e44:	13a0b001 	movne	fp, #1
    if ((par->unsigned_flag == 0) && (base == 10) && (n < 0L)) {
 1009e48:	0a000031 	beq	1009f14 <outnum+0x140>
        negative = 0;
 1009e4c:	e1a09006 	mov	r9, r6
    i = 0;
 1009e50:	e3a0a000 	mov	sl, #0
 1009e54:	ea000000 	b	1009e5c <outnum+0x88>
		i++;
 1009e58:	e1a0a004 	mov	sl, r4
		outbuf[i] = digits[(num % base)];
 1009e5c:	e1a00005 	mov	r0, r5
 1009e60:	e1a01008 	mov	r1, r8
 1009e64:	fa0002a6 	blx	100a904 <__aeabi_uidivmod>
 1009e68:	e28d3038 	add	r3, sp, #56	; 0x38
    } while (num > 0);
 1009e6c:	e1550008 	cmp	r5, r8
		outbuf[i] = digits[(num % base)];
 1009e70:	e0831001 	add	r1, r3, r1
		i++;
 1009e74:	e28a4001 	add	r4, sl, #1
		outbuf[i] = digits[(num % base)];
 1009e78:	e5513034 	ldrb	r3, [r1, #-52]	; 0xffffffcc
		num /= base;
 1009e7c:	e1a05000 	mov	r5, r0
		i++;
 1009e80:	e1a02004 	mov	r2, r4
		outbuf[i] = digits[(num % base)];
 1009e84:	e4c93001 	strb	r3, [r9], #1
    } while (num > 0);
 1009e88:	2afffff2 	bcs	1009e58 <outnum+0x84>
    if (negative != 0) {
 1009e8c:	e35b0000 	cmp	fp, #0
 1009e90:	0a000005 	beq	1009eac <outnum+0xd8>
		outbuf[i] = '-';
 1009e94:	e28d3038 	add	r3, sp, #56	; 0x38
		i++;
 1009e98:	e28a2002 	add	r2, sl, #2
		outbuf[i] = '-';
 1009e9c:	e0833004 	add	r3, r3, r4
 1009ea0:	e2844001 	add	r4, r4, #1
 1009ea4:	e3a0102d 	mov	r1, #45	; 0x2d
 1009ea8:	e5431020 	strb	r1, [r3, #-32]	; 0xffffffe0
    outbuf[i] = '\0';
 1009eac:	e28d3038 	add	r3, sp, #56	; 0x38
    par->len = (s32)strlen(outbuf);
 1009eb0:	e1a00006 	mov	r0, r6
    outbuf[i] = '\0';
 1009eb4:	e0832002 	add	r2, r3, r2
 1009eb8:	e3a03000 	mov	r3, #0
 1009ebc:	e5423020 	strb	r3, [r2, #-32]	; 0xffffffe0
    par->len = (s32)strlen(outbuf);
 1009ec0:	fa000e0e 	blx	100d700 <strlen>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1009ec4:	e1c721d0 	ldrd	r2, [r7, #16]
    par->len = (s32)strlen(outbuf);
 1009ec8:	e5870000 	str	r0, [r7]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1009ecc:	e16f3f13 	clz	r3, r3
 1009ed0:	e3520000 	cmp	r2, #0
 1009ed4:	e1a032a3 	lsr	r3, r3, #5
 1009ed8:	03a03000 	moveq	r3, #0
 1009edc:	e3530000 	cmp	r3, #0
 1009ee0:	1a00000d 	bne	1009f1c <outnum+0x148>
 1009ee4:	e0864004 	add	r4, r6, r4
	outbyte( outbuf[i] );
 1009ee8:	e5740001 	ldrb	r0, [r4, #-1]!
 1009eec:	ebffff7e 	bl	1009cec <outbyte>
    while (&outbuf[i] >= outbuf) {
 1009ef0:	e1540006 	cmp	r4, r6
 1009ef4:	1afffffb 	bne	1009ee8 <outnum+0x114>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 1009ef8:	e5972014 	ldr	r2, [r7, #20]
 1009efc:	e5973010 	ldr	r3, [r7, #16]
 1009f00:	e3520000 	cmp	r2, #0
 1009f04:	13530000 	cmpne	r3, #0
 1009f08:	1a000006 	bne	1009f28 <outnum+0x154>
}
 1009f0c:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1009f10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        negative = 0;
 1009f14:	e3a0b000 	mov	fp, #0
 1009f18:	eaffffcb 	b	1009e4c <outnum+0x78>
 1009f1c:	e1a00007 	mov	r0, r7
 1009f20:	ebffff9e 	bl	1009da0 <padding.part.0>
 1009f24:	eaffffee 	b	1009ee4 <outnum+0x110>
 1009f28:	e1a00007 	mov	r0, r7
}
 1009f2c:	e28dd03c 	add	sp, sp, #60	; 0x3c
 1009f30:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1009f34:	eaffff99 	b	1009da0 <padding.part.0>

01009f38 <xil_printf>:
void xil_printf( const char8 *ctrl1, ...){
	XPVXenConsole_Printf(ctrl1);
}
#else
void xil_printf( const char8 *ctrl1, ...)
{
 1009f38:	e92d000f 	push	{r0, r1, r2, r3}
 1009f3c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 1009f40:	e24dd02c 	sub	sp, sp, #44	; 0x2c
        /* initialize all the flags for this format.   */
        dot_flag = 0;
#if defined (__aarch64__) || defined (__arch64__)
		long_flag = 0;
#endif
        par.unsigned_flag = 0;
 1009f44:	e3a04000 	mov	r4, #0
		par.left_flag = 0;
		par.do_padding = 0;
        par.pad_character = ' ';
 1009f48:	e3a06020 	mov	r6, #32
        par.num2=32767;
 1009f4c:	e3075fff 	movw	r5, #32767	; 0x7fff
    va_start( argp, ctrl1);
 1009f50:	e28d204c 	add	r2, sp, #76	; 0x4c
{
 1009f54:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    va_start( argp, ctrl1);
 1009f58:	e58d2004 	str	r2, [sp, #4]
    char8 *ctrl = (char8 *)ctrl1;
 1009f5c:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1009f60:	e3530000 	cmp	r3, #0
 1009f64:	0a00000a 	beq	1009f94 <xil_printf+0x5c>
 1009f68:	e5d30000 	ldrb	r0, [r3]
 1009f6c:	e3500000 	cmp	r0, #0
 1009f70:	0a000007 	beq	1009f94 <xil_printf+0x5c>
        if (*ctrl != '%') {
 1009f74:	e3500025 	cmp	r0, #37	; 0x25
 1009f78:	0a000009 	beq	1009fa4 <xil_printf+0x6c>
            outbyte(*ctrl);
 1009f7c:	ebffff5a 	bl	1009cec <outbyte>
			ctrl += 1;
 1009f80:	e59d3008 	ldr	r3, [sp, #8]
 1009f84:	e2833001 	add	r3, r3, #1
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1009f88:	e3530000 	cmp	r3, #0
			ctrl += 1;
 1009f8c:	e58d3008 	str	r3, [sp, #8]
    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
 1009f90:	1afffff4 	bne	1009f68 <xil_printf+0x30>
                continue;
        }
        goto try_next;
    }
    va_end( argp);
}
 1009f94:	e28dd02c 	add	sp, sp, #44	; 0x2c
 1009f98:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 1009f9c:	e28dd010 	add	sp, sp, #16
 1009fa0:	e12fff1e 	bx	lr
        dot_flag = 0;
 1009fa4:	e3a08000 	mov	r8, #0
        par.unsigned_flag = 0;
 1009fa8:	e58d4024 	str	r4, [sp, #36]	; 0x24
		par.left_flag = 0;
 1009fac:	e58d4020 	str	r4, [sp, #32]
		par.do_padding = 0;
 1009fb0:	e58d401c 	str	r4, [sp, #28]
        par.pad_character = ' ';
 1009fb4:	e5cd6018 	strb	r6, [sp, #24]
		par.num1=0;
 1009fb8:	e1cd41f0 	strd	r4, [sp, #16]
		par.len=0;
 1009fbc:	e58d400c 	str	r4, [sp, #12]
			ctrl += 1;
 1009fc0:	e2832001 	add	r2, r3, #1
		if(ctrl != NULL) {
 1009fc4:	e3520000 	cmp	r2, #0
			ctrl += 1;
 1009fc8:	e58d2008 	str	r2, [sp, #8]
		if(ctrl != NULL) {
 1009fcc:	0afffff0 	beq	1009f94 <xil_printf+0x5c>
			ch = *ctrl;
 1009fd0:	e5d37001 	ldrb	r7, [r3, #1]
        if (isdigit((s32)ch) != 0) {
 1009fd4:	fa000768 	blx	100bd7c <__locale_ctype_ptr>
 1009fd8:	e2879001 	add	r9, r7, #1
 1009fdc:	e7d03009 	ldrb	r3, [r0, r9]
 1009fe0:	e3130004 	tst	r3, #4
 1009fe4:	0a000016 	beq	100a044 <xil_printf+0x10c>
            if (dot_flag != 0) {
 1009fe8:	e3580000 	cmp	r8, #0
 1009fec:	1a0000d9 	bne	100a358 <xil_printf+0x420>
				if(ctrl != NULL) {
 1009ff0:	e59d3008 	ldr	r3, [sp, #8]
                if (ch == '0') {
 1009ff4:	e3570030 	cmp	r7, #48	; 0x30
                    par.pad_character = '0';
 1009ff8:	05cd7018 	strbeq	r7, [sp, #24]
				if(ctrl != NULL) {
 1009ffc:	e3530000 	cmp	r3, #0
 100a000:	0affffe3 	beq	1009f94 <xil_printf+0x5c>
			par.num1 = getnum(&ctrl);
 100a004:	e28d0008 	add	r0, sp, #8
 100a008:	ebffff3d 	bl	1009d04 <getnum>
 100a00c:	e59d3008 	ldr	r3, [sp, #8]
                par.do_padding = 1;
 100a010:	e3a02001 	mov	r2, #1
			par.num1 = getnum(&ctrl);
 100a014:	e58d0010 	str	r0, [sp, #16]
                par.do_padding = 1;
 100a018:	e58d201c 	str	r2, [sp, #28]
            if(ctrl != NULL) {
 100a01c:	e3530000 	cmp	r3, #0
 100a020:	0affffdb 	beq	1009f94 <xil_printf+0x5c>
			ctrl -= 1;
 100a024:	e2433001 	sub	r3, r3, #1
 100a028:	e58d3008 	str	r3, [sp, #8]
		if(ctrl != NULL) {
 100a02c:	e3530000 	cmp	r3, #0
 100a030:	1affffe2 	bne	1009fc0 <xil_printf+0x88>
}
 100a034:	e28dd02c 	add	sp, sp, #44	; 0x2c
 100a038:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
 100a03c:	e28dd010 	add	sp, sp, #16
 100a040:	e12fff1e 	bx	lr
        switch (tolower((s32)ch)) {
 100a044:	fa00074c 	blx	100bd7c <__locale_ctype_ptr>
 100a048:	e7d03009 	ldrb	r3, [r0, r9]
 100a04c:	e2033003 	and	r3, r3, #3
 100a050:	e3530001 	cmp	r3, #1
 100a054:	02877020 	addeq	r7, r7, #32
 100a058:	e2477025 	sub	r7, r7, #37	; 0x25
 100a05c:	e3570053 	cmp	r7, #83	; 0x53
 100a060:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
 100a064:	ea00005c 	b	100a1dc <xil_printf+0x2a4>
 100a068:	0100a2a0 	.word	0x0100a2a0
 100a06c:	0100a1dc 	.word	0x0100a1dc
 100a070:	0100a1dc 	.word	0x0100a1dc
 100a074:	0100a1dc 	.word	0x0100a1dc
 100a078:	0100a1dc 	.word	0x0100a1dc
 100a07c:	0100a1dc 	.word	0x0100a1dc
 100a080:	0100a1dc 	.word	0x0100a1dc
 100a084:	0100a1dc 	.word	0x0100a1dc
 100a088:	0100a2ac 	.word	0x0100a2ac
 100a08c:	0100a294 	.word	0x0100a294
 100a090:	0100a1dc 	.word	0x0100a1dc
 100a094:	0100a1dc 	.word	0x0100a1dc
 100a098:	0100a1dc 	.word	0x0100a1dc
 100a09c:	0100a1dc 	.word	0x0100a1dc
 100a0a0:	0100a1dc 	.word	0x0100a1dc
 100a0a4:	0100a1dc 	.word	0x0100a1dc
 100a0a8:	0100a1dc 	.word	0x0100a1dc
 100a0ac:	0100a1dc 	.word	0x0100a1dc
 100a0b0:	0100a1dc 	.word	0x0100a1dc
 100a0b4:	0100a1dc 	.word	0x0100a1dc
 100a0b8:	0100a1dc 	.word	0x0100a1dc
 100a0bc:	0100a1dc 	.word	0x0100a1dc
 100a0c0:	0100a1dc 	.word	0x0100a1dc
 100a0c4:	0100a1dc 	.word	0x0100a1dc
 100a0c8:	0100a1dc 	.word	0x0100a1dc
 100a0cc:	0100a1dc 	.word	0x0100a1dc
 100a0d0:	0100a1dc 	.word	0x0100a1dc
 100a0d4:	0100a1dc 	.word	0x0100a1dc
 100a0d8:	0100a1dc 	.word	0x0100a1dc
 100a0dc:	0100a1dc 	.word	0x0100a1dc
 100a0e0:	0100a1dc 	.word	0x0100a1dc
 100a0e4:	0100a1dc 	.word	0x0100a1dc
 100a0e8:	0100a1dc 	.word	0x0100a1dc
 100a0ec:	0100a1dc 	.word	0x0100a1dc
 100a0f0:	0100a1dc 	.word	0x0100a1dc
 100a0f4:	0100a1dc 	.word	0x0100a1dc
 100a0f8:	0100a1dc 	.word	0x0100a1dc
 100a0fc:	0100a1dc 	.word	0x0100a1dc
 100a100:	0100a1dc 	.word	0x0100a1dc
 100a104:	0100a1dc 	.word	0x0100a1dc
 100a108:	0100a1dc 	.word	0x0100a1dc
 100a10c:	0100a1dc 	.word	0x0100a1dc
 100a110:	0100a1dc 	.word	0x0100a1dc
 100a114:	0100a1dc 	.word	0x0100a1dc
 100a118:	0100a1dc 	.word	0x0100a1dc
 100a11c:	0100a1dc 	.word	0x0100a1dc
 100a120:	0100a1dc 	.word	0x0100a1dc
 100a124:	0100a1dc 	.word	0x0100a1dc
 100a128:	0100a1dc 	.word	0x0100a1dc
 100a12c:	0100a1dc 	.word	0x0100a1dc
 100a130:	0100a1dc 	.word	0x0100a1dc
 100a134:	0100a26c 	.word	0x0100a26c
 100a138:	0100a1dc 	.word	0x0100a1dc
 100a13c:	0100a1dc 	.word	0x0100a1dc
 100a140:	0100a1dc 	.word	0x0100a1dc
 100a144:	0100a20c 	.word	0x0100a20c
 100a148:	0100a1dc 	.word	0x0100a1dc
 100a14c:	0100a1dc 	.word	0x0100a1dc
 100a150:	0100a1dc 	.word	0x0100a1dc
 100a154:	0100a1dc 	.word	0x0100a1dc
 100a158:	0100a1dc 	.word	0x0100a1dc
 100a15c:	0100a1dc 	.word	0x0100a1dc
 100a160:	0100a1f4 	.word	0x0100a1f4
 100a164:	0100a1c0 	.word	0x0100a1c0
 100a168:	0100a1dc 	.word	0x0100a1dc
 100a16c:	0100a1dc 	.word	0x0100a1dc
 100a170:	0100a1dc 	.word	0x0100a1dc
 100a174:	0100a1dc 	.word	0x0100a1dc
 100a178:	0100a1c0 	.word	0x0100a1c0
 100a17c:	0100a1dc 	.word	0x0100a1dc
 100a180:	0100a1dc 	.word	0x0100a1dc
 100a184:	0100a350 	.word	0x0100a350
 100a188:	0100a1dc 	.word	0x0100a1dc
 100a18c:	0100a1dc 	.word	0x0100a1dc
 100a190:	0100a1dc 	.word	0x0100a1dc
 100a194:	0100a26c 	.word	0x0100a26c
 100a198:	0100a1dc 	.word	0x0100a1dc
 100a19c:	0100a1dc 	.word	0x0100a1dc
 100a1a0:	0100a2bc 	.word	0x0100a2bc
 100a1a4:	0100a1dc 	.word	0x0100a1dc
 100a1a8:	0100a1b8 	.word	0x0100a1b8
 100a1ac:	0100a1dc 	.word	0x0100a1dc
 100a1b0:	0100a1dc 	.word	0x0100a1dc
 100a1b4:	0100a26c 	.word	0x0100a26c
                par.unsigned_flag = 1;
 100a1b8:	e3a03001 	mov	r3, #1
 100a1bc:	e58d3024 	str	r3, [sp, #36]	; 0x24
                    outnum( va_arg(argp, s32), 10L, &par);
 100a1c0:	e59d3004 	ldr	r3, [sp, #4]
 100a1c4:	e28d200c 	add	r2, sp, #12
 100a1c8:	e3a0100a 	mov	r1, #10
 100a1cc:	e283c004 	add	ip, r3, #4
 100a1d0:	e5930000 	ldr	r0, [r3]
 100a1d4:	e58dc004 	str	ip, [sp, #4]
 100a1d8:	ebfffefd 	bl	1009dd4 <outnum>
			if(ctrl != NULL) {
 100a1dc:	e59d3008 	ldr	r3, [sp, #8]
 100a1e0:	e3530000 	cmp	r3, #0
 100a1e4:	0affff6a 	beq	1009f94 <xil_printf+0x5c>
				ctrl += 1;
 100a1e8:	e2833001 	add	r3, r3, #1
 100a1ec:	e58d3008 	str	r3, [sp, #8]
 100a1f0:	eaffff5a 	b	1009f60 <xil_printf+0x28>
                outbyte( va_arg( argp, s32));
 100a1f4:	e59d3004 	ldr	r3, [sp, #4]
 100a1f8:	e2832004 	add	r2, r3, #4
 100a1fc:	e5d30000 	ldrb	r0, [r3]
 100a200:	e58d2004 	str	r2, [sp, #4]
 100a204:	ebfffeb8 	bl	1009cec <outbyte>
        if(Check == 1) {
 100a208:	eafffff3 	b	100a1dc <xil_printf+0x2a4>
                switch (*ctrl) {
 100a20c:	e59d3008 	ldr	r3, [sp, #8]
 100a210:	e5d30000 	ldrb	r0, [r3]
 100a214:	e2403061 	sub	r3, r0, #97	; 0x61
 100a218:	e3530011 	cmp	r3, #17
 100a21c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100a220:	ea000065 	b	100a3bc <xil_printf+0x484>
 100a224:	0100a390 	.word	0x0100a390
 100a228:	0100a3bc 	.word	0x0100a3bc
 100a22c:	0100a3bc 	.word	0x0100a3bc
 100a230:	0100a3bc 	.word	0x0100a3bc
 100a234:	0100a3bc 	.word	0x0100a3bc
 100a238:	0100a3bc 	.word	0x0100a3bc
 100a23c:	0100a3bc 	.word	0x0100a3bc
 100a240:	0100a39c 	.word	0x0100a39c
 100a244:	0100a3bc 	.word	0x0100a3bc
 100a248:	0100a3bc 	.word	0x0100a3bc
 100a24c:	0100a3bc 	.word	0x0100a3bc
 100a250:	0100a3bc 	.word	0x0100a3bc
 100a254:	0100a3bc 	.word	0x0100a3bc
 100a258:	0100a3a8 	.word	0x0100a3a8
 100a25c:	0100a3bc 	.word	0x0100a3bc
 100a260:	0100a3bc 	.word	0x0100a3bc
 100a264:	0100a3bc 	.word	0x0100a3bc
 100a268:	0100a378 	.word	0x0100a378
                outnum((s32)va_arg(argp, s32), 16L, &par);
 100a26c:	e59d3004 	ldr	r3, [sp, #4]
                par.unsigned_flag = 1;
 100a270:	e3a01001 	mov	r1, #1
 100a274:	e58d1024 	str	r1, [sp, #36]	; 0x24
                outnum((s32)va_arg(argp, s32), 16L, &par);
 100a278:	e28d200c 	add	r2, sp, #12
 100a27c:	e3a01010 	mov	r1, #16
 100a280:	e283c004 	add	ip, r3, #4
 100a284:	e5930000 	ldr	r0, [r3]
 100a288:	e58dc004 	str	ip, [sp, #4]
 100a28c:	ebfffed0 	bl	1009dd4 <outnum>
        if(Check == 1) {
 100a290:	eaffffd1 	b	100a1dc <xil_printf+0x2a4>
 100a294:	e59d3008 	ldr	r3, [sp, #8]
                dot_flag = 1;
 100a298:	e3a08001 	mov	r8, #1
 100a29c:	eaffff62 	b	100a02c <xil_printf+0xf4>
                outbyte( '%');
 100a2a0:	e3a00025 	mov	r0, #37	; 0x25
 100a2a4:	ebfffe90 	bl	1009cec <outbyte>
        if(Check == 1) {
 100a2a8:	eaffffcb 	b	100a1dc <xil_printf+0x2a4>
                par.left_flag = 1;
 100a2ac:	e3a02001 	mov	r2, #1
 100a2b0:	e59d3008 	ldr	r3, [sp, #8]
 100a2b4:	e58d2020 	str	r2, [sp, #32]
        if(Check == 1) {
 100a2b8:	eaffff5b 	b	100a02c <xil_printf+0xf4>
                outs( va_arg( argp, char *), &par);
 100a2bc:	e59d3004 	ldr	r3, [sp, #4]
 100a2c0:	e5937000 	ldr	r7, [r3]
 100a2c4:	e2833004 	add	r3, r3, #4
 100a2c8:	e58d3004 	str	r3, [sp, #4]
	if(LocalPtr != NULL) {
 100a2cc:	e3570000 	cmp	r7, #0
 100a2d0:	0a000002 	beq	100a2e0 <xil_printf+0x3a8>
		par->len = (s32)strlen( LocalPtr);
 100a2d4:	e1a00007 	mov	r0, r7
 100a2d8:	fa000d08 	blx	100d700 <strlen>
 100a2dc:	e58d000c 	str	r0, [sp, #12]
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 100a2e0:	e1cd21dc 	ldrd	r2, [sp, #28]
 100a2e4:	e16f3f13 	clz	r3, r3
 100a2e8:	e3520000 	cmp	r2, #0
 100a2ec:	e1a032a3 	lsr	r3, r3, #5
 100a2f0:	03a03000 	moveq	r3, #0
 100a2f4:	e3530000 	cmp	r3, #0
 100a2f8:	1a00001b 	bne	100a36c <xil_printf+0x434>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 100a2fc:	e5d73000 	ldrb	r3, [r7]
 100a300:	e3530000 	cmp	r3, #0
 100a304:	1a000007 	bne	100a328 <xil_printf+0x3f0>
 100a308:	ea000009 	b	100a334 <xil_printf+0x3fc>
		(par->num2)--;
 100a30c:	e2433001 	sub	r3, r3, #1
 100a310:	e58d3014 	str	r3, [sp, #20]
        outbyte(*LocalPtr);
 100a314:	e5d70000 	ldrb	r0, [r7]
 100a318:	ebfffe73 	bl	1009cec <outbyte>
    while (((*LocalPtr) != (char8)0) && ((par->num2) != 0)) {
 100a31c:	e5f73001 	ldrb	r3, [r7, #1]!
 100a320:	e3530000 	cmp	r3, #0
 100a324:	0a000002 	beq	100a334 <xil_printf+0x3fc>
 100a328:	e59d3014 	ldr	r3, [sp, #20]
 100a32c:	e3530000 	cmp	r3, #0
 100a330:	1afffff5 	bne	100a30c <xil_printf+0x3d4>
    if ((par->do_padding != 0) && (l_flag != 0) && (par->len < par->num1)) {
 100a334:	e1cd21dc 	ldrd	r2, [sp, #28]
 100a338:	e3520000 	cmp	r2, #0
 100a33c:	13530000 	cmpne	r3, #0
 100a340:	0affffa5 	beq	100a1dc <xil_printf+0x2a4>
 100a344:	e28d000c 	add	r0, sp, #12
 100a348:	ebfffe94 	bl	1009da0 <padding.part.0>
 100a34c:	eaffffa2 	b	100a1dc <xil_printf+0x2a4>
 100a350:	e59d3008 	ldr	r3, [sp, #8]
 100a354:	eaffff34 	b	100a02c <xil_printf+0xf4>
                par.num2 = getnum(&ctrl);
 100a358:	e28d0008 	add	r0, sp, #8
 100a35c:	ebfffe68 	bl	1009d04 <getnum>
 100a360:	e59d3008 	ldr	r3, [sp, #8]
 100a364:	e58d0014 	str	r0, [sp, #20]
 100a368:	eaffff2b 	b	100a01c <xil_printf+0xe4>
 100a36c:	e28d000c 	add	r0, sp, #12
 100a370:	ebfffe8a 	bl	1009da0 <padding.part.0>
 100a374:	eaffffe0 	b	100a2fc <xil_printf+0x3c4>
                        outbyte( ((char8)0x0D));
 100a378:	e3a0000d 	mov	r0, #13
 100a37c:	ebfffe5a 	bl	1009cec <outbyte>
                ctrl += 1;
 100a380:	e59d3008 	ldr	r3, [sp, #8]
 100a384:	e2833001 	add	r3, r3, #1
 100a388:	e58d3008 	str	r3, [sp, #8]
        if(Check == 1) {
 100a38c:	eaffff26 	b	100a02c <xil_printf+0xf4>
                        outbyte( ((char8)0x07));
 100a390:	e3a00007 	mov	r0, #7
 100a394:	ebfffe54 	bl	1009cec <outbyte>
                        break;
 100a398:	eafffff8 	b	100a380 <xil_printf+0x448>
                        outbyte( ((char8)0x08));
 100a39c:	e3a00008 	mov	r0, #8
 100a3a0:	ebfffe51 	bl	1009cec <outbyte>
                        break;
 100a3a4:	eafffff5 	b	100a380 <xil_printf+0x448>
                        outbyte( ((char8)0x0D));
 100a3a8:	e3a0000d 	mov	r0, #13
 100a3ac:	ebfffe4e 	bl	1009cec <outbyte>
                        outbyte( ((char8)0x0A));
 100a3b0:	e3a0000a 	mov	r0, #10
 100a3b4:	ebfffe4c 	bl	1009cec <outbyte>
                        break;
 100a3b8:	eafffff0 	b	100a380 <xil_printf+0x448>
                        outbyte( *ctrl);
 100a3bc:	ebfffe4a 	bl	1009cec <outbyte>
                        break;
 100a3c0:	eaffffee 	b	100a380 <xil_printf+0x448>

0100a3c4 <Xil_ExceptionNullHandler>:
*
*****************************************************************************/
static void Xil_ExceptionNullHandler(void *Data)
{
	(void) Data;
DieLoop: goto DieLoop;
 100a3c4:	eafffffe 	b	100a3c4 <Xil_ExceptionNullHandler>

0100a3c8 <Xil_DataAbortHandler>:
*
* @note		None.
*
****************************************************************************/

void Xil_DataAbortHandler(void *CallBackRef){
 100a3c8:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

        xdbg_printf(XDBG_DEBUG_ERROR, "Data abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_DATA_FAULT_STATUS);
 100a3cc:	ee151f10 	mrc	15, 0, r1, cr5, cr0, {0}
	        mfcp(XREG_CP15_DATA_FAULT_STATUS,FaultStatus);
	    #else
	        { volatile register u32 Reg __asm(XREG_CP15_DATA_FAULT_STATUS);
	        FaultStatus = Reg; }
	    #endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Data abort with Data Fault Status Register  %lx\n",FaultStatus);
 100a3d0:	e309055c 	movw	r0, #38236	; 0x955c
 100a3d4:	e3400105 	movt	r0, #261	; 0x105
 100a3d8:	fa000af2 	blx	100cfa8 <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Data abort %lx\n",DataAbortAddr);
 100a3dc:	e30a34cc 	movw	r3, #42188	; 0xa4cc
 100a3e0:	e3090590 	movw	r0, #38288	; 0x9590
 100a3e4:	e3403116 	movt	r3, #278	; 0x116
 100a3e8:	e3400105 	movt	r0, #261	; 0x105
 100a3ec:	e5931000 	ldr	r1, [r3]
 100a3f0:	fa000aec 	blx	100cfa8 <printf>
#endif
	while(1) {
		;
 100a3f4:	eafffffe 	b	100a3f4 <Xil_DataAbortHandler+0x2c>

0100a3f8 <Xil_PrefetchAbortHandler>:
* @return	None.
*
* @note		None.
*
****************************************************************************/
void Xil_PrefetchAbortHandler(void *CallBackRef){
 100a3f8:	e92d4010 	push	{r4, lr}
#ifdef DEBUG
	u32 FaultStatus;

    xdbg_printf(XDBG_DEBUG_ERROR, "Prefetch abort \n");
        #ifdef __GNUC__
	FaultStatus = mfcp(XREG_CP15_INST_FAULT_STATUS);
 100a3fc:	ee151f30 	mrc	15, 0, r1, cr5, cr0, {1}
			mfcp(XREG_CP15_INST_FAULT_STATUS,FaultStatus);
	    #else
			{ volatile register u32 Reg __asm(XREG_CP15_INST_FAULT_STATUS);
			FaultStatus = Reg; }
		#endif
	xdbg_printf(XDBG_DEBUG_GENERAL, "Prefetch abort with Instruction Fault Status Register  %lx\n",FaultStatus);
 100a400:	e30905c0 	movw	r0, #38336	; 0x95c0
 100a404:	e3400105 	movt	r0, #261	; 0x105
 100a408:	fa000ae6 	blx	100cfa8 <printf>
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of Instruction causing Prefetch abort %lx\n",PrefetchAbortAddr);
 100a40c:	e30a34c8 	movw	r3, #42184	; 0xa4c8
 100a410:	e30905fc 	movw	r0, #38396	; 0x95fc
 100a414:	e3403116 	movt	r3, #278	; 0x116
 100a418:	e3400105 	movt	r0, #261	; 0x105
 100a41c:	e5931000 	ldr	r1, [r3]
 100a420:	fa000ae0 	blx	100cfa8 <printf>
#endif
	while(1) {
		;
 100a424:	eafffffe 	b	100a424 <Xil_PrefetchAbortHandler+0x2c>

0100a428 <Xil_UndefinedExceptionHandler>:
* @note		None.
*
****************************************************************************/
void Xil_UndefinedExceptionHandler(void *CallBackRef){
	(void) CallBackRef;
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 100a428:	e30a34c4 	movw	r3, #42180	; 0xa4c4
 100a42c:	e3090630 	movw	r0, #38448	; 0x9630
 100a430:	e3403116 	movt	r3, #278	; 0x116
void Xil_UndefinedExceptionHandler(void *CallBackRef){
 100a434:	e92d4010 	push	{r4, lr}
	xdbg_printf(XDBG_DEBUG_GENERAL, "Address of the undefined instruction %lx\n",UndefinedExceptionAddr);
 100a438:	e3400105 	movt	r0, #261	; 0x105
 100a43c:	e5931000 	ldr	r1, [r3]
 100a440:	fa000ad8 	blx	100cfa8 <printf>
	while(1) {
		;
 100a444:	eafffffe 	b	100a444 <Xil_UndefinedExceptionHandler+0x1c>

0100a448 <Xil_ExceptionInit>:
}
 100a448:	e12fff1e 	bx	lr

0100a44c <Xil_ExceptionRegisterHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 100a44c:	e3093898 	movw	r3, #39064	; 0x9898
 100a450:	e3403105 	movt	r3, #261	; 0x105
	XExc_VectorTable[Exception_id].Data = Data;
 100a454:	e083c180 	add	ip, r3, r0, lsl #3
	XExc_VectorTable[Exception_id].Handler = Handler;
 100a458:	e7831180 	str	r1, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 100a45c:	e58c2004 	str	r2, [ip, #4]
}
 100a460:	e12fff1e 	bx	lr

0100a464 <Xil_GetExceptionRegisterHandler>:
	*Handler = XExc_VectorTable[Exception_id].Handler;
 100a464:	e3093898 	movw	r3, #39064	; 0x9898
 100a468:	e3403105 	movt	r3, #261	; 0x105
 100a46c:	e793c180 	ldr	ip, [r3, r0, lsl #3]
	*Data = XExc_VectorTable[Exception_id].Data;
 100a470:	e0833180 	add	r3, r3, r0, lsl #3
	*Handler = XExc_VectorTable[Exception_id].Handler;
 100a474:	e581c000 	str	ip, [r1]
	*Data = XExc_VectorTable[Exception_id].Data;
 100a478:	e5933004 	ldr	r3, [r3, #4]
 100a47c:	e5823000 	str	r3, [r2]
}
 100a480:	e12fff1e 	bx	lr

0100a484 <Xil_ExceptionRemoveHandler>:
	XExc_VectorTable[Exception_id].Handler = Handler;
 100a484:	e3093898 	movw	r3, #39064	; 0x9898
 100a488:	e30a23c4 	movw	r2, #41924	; 0xa3c4
 100a48c:	e3403105 	movt	r3, #261	; 0x105
 100a490:	e3402100 	movt	r2, #256	; 0x100
	XExc_VectorTable[Exception_id].Data = Data;
 100a494:	e0831180 	add	r1, r3, r0, lsl #3
 100a498:	e3a0c000 	mov	ip, #0
	XExc_VectorTable[Exception_id].Handler = Handler;
 100a49c:	e7832180 	str	r2, [r3, r0, lsl #3]
	XExc_VectorTable[Exception_id].Data = Data;
 100a4a0:	e581c004 	str	ip, [r1, #4]
}
 100a4a4:	e12fff1e 	bx	lr

0100a4a8 <XUartPs_SendByte>:
*
*****************************************************************************/
void XUartPs_SendByte(u32 BaseAddress, u8 Data)
{
	/* Wait until there is space in TX FIFO */
	while (XUartPs_IsTransmitFull(BaseAddress)) {
 100a4a8:	e280202c 	add	r2, r0, #44	; 0x2c
* @return	The 32 bit Value read from the specified input address.
*
******************************************************************************/
static INLINE u32 Xil_In32(UINTPTR Addr)
{
	return *(volatile u32 *) Addr;
 100a4ac:	e5923000 	ldr	r3, [r2]
 100a4b0:	e3130010 	tst	r3, #16
 100a4b4:	1afffffc 	bne	100a4ac <XUartPs_SendByte+0x4>
******************************************************************************/
static INLINE void Xil_Out32(UINTPTR Addr, u32 Value)
{
#ifndef ENABLE_SAFETY
	volatile u32 *LocalAddr = (volatile u32 *)Addr;
	*LocalAddr = Value;
 100a4b8:	e5801030 	str	r1, [r0, #48]	; 0x30
		;
	}

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, (u32)Data);
}
 100a4bc:	e12fff1e 	bx	lr

0100a4c0 <XUartPs_RecvByte>:
*****************************************************************************/
u8 XUartPs_RecvByte(u32 BaseAddress)
{
	u32 RecievedByte;
	/* Wait until there is data */
	while (!XUartPs_IsReceiveData(BaseAddress)) {
 100a4c0:	e280202c 	add	r2, r0, #44	; 0x2c
	return *(volatile u32 *) Addr;
 100a4c4:	e5923000 	ldr	r3, [r2]
 100a4c8:	e3130002 	tst	r3, #2
 100a4cc:	1afffffc 	bne	100a4c4 <XUartPs_RecvByte+0x4>
 100a4d0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
		;
	}
	RecievedByte = XUartPs_ReadReg(BaseAddress, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (u8)RecievedByte;
}
 100a4d4:	e6ef0070 	uxtb	r0, r0
 100a4d8:	e12fff1e 	bx	lr

0100a4dc <XUartPs_ResetHw>:
*
* @note		None.
*
*****************************************************************************/
void XUartPs_ResetHw(u32 BaseAddress)
{
 100a4dc:	e92d4010 	push	{r4, lr}
	*LocalAddr = Value;
 100a4e0:	e3031fff 	movw	r1, #16383	; 0x3fff
 100a4e4:	e3a0e028 	mov	lr, #40	; 0x28
 100a4e8:	e3a0c003 	mov	ip, #3
 100a4ec:	e3a03000 	mov	r3, #0
 100a4f0:	e3a02020 	mov	r2, #32
 100a4f4:	e580100c 	str	r1, [r0, #12]
 100a4f8:	e300428b 	movw	r4, #651	; 0x28b
 100a4fc:	e580e000 	str	lr, [r0]
 100a500:	e3a0e00f 	mov	lr, #15
 100a504:	e580c000 	str	ip, [r0]
 100a508:	e3a0cf4a 	mov	ip, #296	; 0x128
 100a50c:	e5801014 	str	r1, [r0, #20]
 100a510:	e5803004 	str	r3, [r0, #4]
 100a514:	e5802020 	str	r2, [r0, #32]
 100a518:	e5802044 	str	r2, [r0, #68]	; 0x44
 100a51c:	e580301c 	str	r3, [r0, #28]
 100a520:	e5804018 	str	r4, [r0, #24]
 100a524:	e580e034 	str	lr, [r0, #52]	; 0x34
 100a528:	e580c000 	str	ip, [r0]
	 */
	XUartPs_WriteReg(BaseAddress, XUARTPS_CR_OFFSET,
				((u32)XUARTPS_CR_RX_DIS | (u32)XUARTPS_CR_TX_DIS |
						(u32)XUARTPS_CR_STOPBRK));

}
 100a52c:	e8bd8010 	pop	{r4, pc}

0100a530 <FIQInterrupt>:
* @note		None.
*
******************************************************************************/
void FIQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_FIQ_INT].Handler(XExc_VectorTable[
 100a530:	e3093898 	movw	r3, #39064	; 0x9898
 100a534:	e3403105 	movt	r3, #261	; 0x105
 100a538:	e5932030 	ldr	r2, [r3, #48]	; 0x30
 100a53c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
 100a540:	e12fff12 	bx	r2

0100a544 <IRQInterrupt>:
* @note		None.
*
******************************************************************************/
void IRQInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_IRQ_INT].Handler(XExc_VectorTable[
 100a544:	e3093898 	movw	r3, #39064	; 0x9898
 100a548:	e3403105 	movt	r3, #261	; 0x105
 100a54c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
 100a550:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
 100a554:	e12fff12 	bx	r2

0100a558 <UndefinedException>:
* @note		None.
*
******************************************************************************/
void UndefinedException(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_UNDEFINED_INT].Handler(XExc_VectorTable[
 100a558:	e3093898 	movw	r3, #39064	; 0x9898
 100a55c:	e3403105 	movt	r3, #261	; 0x105
 100a560:	e5932008 	ldr	r2, [r3, #8]
 100a564:	e593000c 	ldr	r0, [r3, #12]
 100a568:	e12fff12 	bx	r2

0100a56c <SWInterrupt>:
* @note		None.
*
******************************************************************************/
void SWInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_SWI_INT].Handler(XExc_VectorTable[
 100a56c:	e3093898 	movw	r3, #39064	; 0x9898
 100a570:	e3403105 	movt	r3, #261	; 0x105
 100a574:	e5932010 	ldr	r2, [r3, #16]
 100a578:	e5930014 	ldr	r0, [r3, #20]
 100a57c:	e12fff12 	bx	r2

0100a580 <DataAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void DataAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_DATA_ABORT_INT].Handler(
 100a580:	e3093898 	movw	r3, #39064	; 0x9898
 100a584:	e3403105 	movt	r3, #261	; 0x105
 100a588:	e5932020 	ldr	r2, [r3, #32]
 100a58c:	e5930024 	ldr	r0, [r3, #36]	; 0x24
 100a590:	e12fff12 	bx	r2

0100a594 <PrefetchAbortInterrupt>:
* @note		None.
*
******************************************************************************/
void PrefetchAbortInterrupt(void)
{
	XExc_VectorTable[XIL_EXCEPTION_ID_PREFETCH_ABORT_INT].Handler(
 100a594:	e3093898 	movw	r3, #39064	; 0x9898
 100a598:	e3403105 	movt	r3, #261	; 0x105
 100a59c:	e5932018 	ldr	r2, [r3, #24]
 100a5a0:	e593001c 	ldr	r0, [r3, #28]
 100a5a4:	e12fff12 	bx	r2
 100a5a8:	01060010 	.word	0x01060010
 100a5ac:	01060010 	.word	0x01060010
 100a5b0:	01060020 	.word	0x01060020
 100a5b4:	0116a4d4 	.word	0x0116a4d4
 100a5b8:	00010000 	.word	0x00010000

0100a5bc <_start>:
	.long	__stack


	.globl	_start
_start:
	bl      __cpu_init		/* Initialize the CPU first (BSP provides this) */
 100a5bc:	eb000017 	bl	100a620 <__cpu_init>

	mov	r0, #0
 100a5c0:	e3a00000 	mov	r0, #0

	/* clear sbss */
	ldr 	r1,.Lsbss_start		/* calculate beginning of the SBSS */
 100a5c4:	e51f1024 	ldr	r1, [pc, #-36]	; 100a5a8 <PrefetchAbortInterrupt+0x14>
	ldr	r2,.Lsbss_end		/* calculate end of the SBSS */
 100a5c8:	e51f2024 	ldr	r2, [pc, #-36]	; 100a5ac <PrefetchAbortInterrupt+0x18>

.Lloop_sbss:
	cmp	r1,r2
 100a5cc:	e1510002 	cmp	r1, r2
	bge	.Lenclsbss		/* If no SBSS, no clearing required */
 100a5d0:	aa000001 	bge	100a5dc <_start+0x20>
	str	r0, [r1], #4
 100a5d4:	e4810004 	str	r0, [r1], #4
	b	.Lloop_sbss
 100a5d8:	eafffffb 	b	100a5cc <_start+0x10>

.Lenclsbss:
	/* clear bss */
	ldr	r1,.Lbss_start		/* calculate beginning of the BSS */
 100a5dc:	e51f1034 	ldr	r1, [pc, #-52]	; 100a5b0 <PrefetchAbortInterrupt+0x1c>
	ldr	r2,.Lbss_end		/* calculate end of the BSS */
 100a5e0:	e51f2034 	ldr	r2, [pc, #-52]	; 100a5b4 <PrefetchAbortInterrupt+0x20>

.Lloop_bss:
	cmp	r1,r2
 100a5e4:	e1510002 	cmp	r1, r2
	bge	.Lenclbss		/* If no BSS, no clearing required */
 100a5e8:	aa000001 	bge	100a5f4 <_start+0x38>
	str	r0, [r1], #4
 100a5ec:	e4810004 	str	r0, [r1], #4
	b	.Lloop_bss
 100a5f0:	eafffffb 	b	100a5e4 <_start+0x28>

.Lenclbss:

	/* set stack pointer */
	ldr	r13,.Lstack		/* stack address */
 100a5f4:	e51fd044 	ldr	sp, [pc, #-68]	; 100a5b8 <PrefetchAbortInterrupt+0x24>

    /* Reset and start Global Timer */
	mov	r0, #0x0
 100a5f8:	e3a00000 	mov	r0, #0
	mov	r1, #0x0
 100a5fc:	e3a01000 	mov	r1, #0
	#if defined SLEEP_TIMER_BASEADDR
	bl XTime_StartTTCTimer
	#endif

#if USE_AMP != 1
	bl XTime_SetTime
 100a600:	eb000015 	bl	100a65c <XTime_SetTime>
	/* Setup profiling stuff */
	bl	_profile_init
#endif /* PROFILING */

   /* run global constructors */
   bl __libc_init_array
 100a604:	fa00035d 	blx	100b380 <__libc_init_array>

	/* make sure argc and argv are valid */
	mov	r0, #0
 100a608:	e3a00000 	mov	r0, #0
	mov	r1, #0
 100a60c:	e3a01000 	mov	r1, #0

	/* Let her rip */
	bl	main
 100a610:	eb00305d 	bl	101678c <main>

   /* Cleanup global constructors */
   bl __libc_fini_array
 100a614:	fa00034d 	blx	100b350 <__libc_fini_array>
	/* Cleanup profiling stuff */
	bl	_profile_clean
#endif /* PROFILING */

        /* All done */
	bl	exit
 100a618:	fa000344 	blx	100b330 <exit>

.Lexit:	/* should never get here */
	b .Lexit
 100a61c:	eafffffe 	b	100a61c <_start+0x60>

0100a620 <__cpu_init>:
	.global __cpu_init
	.align 2
__cpu_init:

/* Clear cp15 regs with unknown reset values */
	mov	r0, #0x0
 100a620:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c5, c0, 0	/* DFSR */
 100a624:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
	mcr	p15, 0, r0, c5, c0, 1	/* IFSR */
 100a628:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
	mcr	p15, 0, r0, c6, c0, 0	/* DFAR */
 100a62c:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
	mcr	p15, 0, r0, c6, c0, 2	/* IFAR */
 100a630:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
	mcr	p15, 0, r0, c9, c13, 2	/* PMXEVCNTR */
 100a634:	ee090f5d 	mcr	15, 0, r0, cr9, cr13, {2}
	mcr	p15, 0, r0, c13, c0, 2	/* TPIDRURW */
 100a638:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
	mcr	p15, 0, r0, c13, c0, 3	/* TPIDRURO */
 100a63c:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}

/* Reset and start Cycle Counter */
	mov	r2, #0x80000000		/* clear overflow */
 100a640:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 3
 100a644:	ee092f7c 	mcr	15, 0, r2, cr9, cr12, {3}
	mov	r2, #0xd		/* D, C, E */
 100a648:	e3a0200d 	mov	r2, #13
	mcr	p15, 0, r2, c9, c12, 0
 100a64c:	ee092f1c 	mcr	15, 0, r2, cr9, cr12, {0}
	mov	r2, #0x80000000		/* enable cycle counter */
 100a650:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 1
 100a654:	ee092f3c 	mcr	15, 0, r2, cr9, cr12, {1}

	bx	lr
 100a658:	e12fff1e 	bx	lr

0100a65c <XTime_SetTime>:
 100a65c:	e3a03000 	mov	r3, #0
 100a660:	e3a0c000 	mov	ip, #0
 100a664:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 100a668:	e3a02001 	mov	r2, #1
 100a66c:	e583c208 	str	ip, [r3, #520]	; 0x208
 100a670:	e5830200 	str	r0, [r3, #512]	; 0x200
 100a674:	e5831204 	str	r1, [r3, #516]	; 0x204
 100a678:	e5832208 	str	r2, [r3, #520]	; 0x208
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_COUNTER_UPPER_OFFSET,
		(u32)((u32)(Xtime_Global>>32U)));

	/* Enable Global Timer */
	Xil_Out32((u32)GLOBAL_TMR_BASEADDR + (u32)GTIMER_CONTROL_OFFSET, (u32)0x1);
}
 100a67c:	e12fff1e 	bx	lr

0100a680 <XTime_GetTime>:
	return *(volatile u32 *) Addr;
 100a680:	e3a03000 	mov	r3, #0
 100a684:	e34f38f0 	movt	r3, #63728	; 0xf8f0
 100a688:	e5931204 	ldr	r1, [r3, #516]	; 0x204
 100a68c:	e593c200 	ldr	ip, [r3, #512]	; 0x200
 100a690:	e5932204 	ldr	r2, [r3, #516]	; 0x204
	/* Reading Global Timer Counter Register */
	do
	{
		high = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET);
		low = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);
	} while(Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET) != high);
 100a694:	e1520001 	cmp	r2, r1
 100a698:	1afffffa 	bne	100a688 <XTime_GetTime+0x8>

	*Xtime_Global = (((XTime) high) << 32U) | (XTime) low;
 100a69c:	e580c000 	str	ip, [r0]
 100a6a0:	e5802004 	str	r2, [r0, #4]
}
 100a6a4:	e12fff1e 	bx	lr

0100a6a8 <__udivsi3>:
 100a6a8:	1e4a      	subs	r2, r1, #1
 100a6aa:	bf08      	it	eq
 100a6ac:	4770      	bxeq	lr
 100a6ae:	f0c0 8124 	bcc.w	100a8fa <__udivsi3+0x252>
 100a6b2:	4288      	cmp	r0, r1
 100a6b4:	f240 8116 	bls.w	100a8e4 <__udivsi3+0x23c>
 100a6b8:	4211      	tst	r1, r2
 100a6ba:	f000 8117 	beq.w	100a8ec <__udivsi3+0x244>
 100a6be:	fab0 f380 	clz	r3, r0
 100a6c2:	fab1 f281 	clz	r2, r1
 100a6c6:	eba2 0303 	sub.w	r3, r2, r3
 100a6ca:	f1c3 031f 	rsb	r3, r3, #31
 100a6ce:	a204      	add	r2, pc, #16	; (adr r2, 100a6e0 <__udivsi3+0x38>)
 100a6d0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 100a6d4:	f04f 0200 	mov.w	r2, #0
 100a6d8:	469f      	mov	pc, r3
 100a6da:	bf00      	nop
 100a6dc:	f3af 8000 	nop.w
 100a6e0:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 100a6e4:	bf00      	nop
 100a6e6:	eb42 0202 	adc.w	r2, r2, r2
 100a6ea:	bf28      	it	cs
 100a6ec:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 100a6f0:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 100a6f4:	bf00      	nop
 100a6f6:	eb42 0202 	adc.w	r2, r2, r2
 100a6fa:	bf28      	it	cs
 100a6fc:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 100a700:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 100a704:	bf00      	nop
 100a706:	eb42 0202 	adc.w	r2, r2, r2
 100a70a:	bf28      	it	cs
 100a70c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 100a710:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 100a714:	bf00      	nop
 100a716:	eb42 0202 	adc.w	r2, r2, r2
 100a71a:	bf28      	it	cs
 100a71c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 100a720:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 100a724:	bf00      	nop
 100a726:	eb42 0202 	adc.w	r2, r2, r2
 100a72a:	bf28      	it	cs
 100a72c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 100a730:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 100a734:	bf00      	nop
 100a736:	eb42 0202 	adc.w	r2, r2, r2
 100a73a:	bf28      	it	cs
 100a73c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 100a740:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 100a744:	bf00      	nop
 100a746:	eb42 0202 	adc.w	r2, r2, r2
 100a74a:	bf28      	it	cs
 100a74c:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 100a750:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 100a754:	bf00      	nop
 100a756:	eb42 0202 	adc.w	r2, r2, r2
 100a75a:	bf28      	it	cs
 100a75c:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 100a760:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 100a764:	bf00      	nop
 100a766:	eb42 0202 	adc.w	r2, r2, r2
 100a76a:	bf28      	it	cs
 100a76c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 100a770:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 100a774:	bf00      	nop
 100a776:	eb42 0202 	adc.w	r2, r2, r2
 100a77a:	bf28      	it	cs
 100a77c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 100a780:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 100a784:	bf00      	nop
 100a786:	eb42 0202 	adc.w	r2, r2, r2
 100a78a:	bf28      	it	cs
 100a78c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 100a790:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 100a794:	bf00      	nop
 100a796:	eb42 0202 	adc.w	r2, r2, r2
 100a79a:	bf28      	it	cs
 100a79c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 100a7a0:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 100a7a4:	bf00      	nop
 100a7a6:	eb42 0202 	adc.w	r2, r2, r2
 100a7aa:	bf28      	it	cs
 100a7ac:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 100a7b0:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 100a7b4:	bf00      	nop
 100a7b6:	eb42 0202 	adc.w	r2, r2, r2
 100a7ba:	bf28      	it	cs
 100a7bc:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 100a7c0:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 100a7c4:	bf00      	nop
 100a7c6:	eb42 0202 	adc.w	r2, r2, r2
 100a7ca:	bf28      	it	cs
 100a7cc:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 100a7d0:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 100a7d4:	bf00      	nop
 100a7d6:	eb42 0202 	adc.w	r2, r2, r2
 100a7da:	bf28      	it	cs
 100a7dc:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 100a7e0:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 100a7e4:	bf00      	nop
 100a7e6:	eb42 0202 	adc.w	r2, r2, r2
 100a7ea:	bf28      	it	cs
 100a7ec:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 100a7f0:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 100a7f4:	bf00      	nop
 100a7f6:	eb42 0202 	adc.w	r2, r2, r2
 100a7fa:	bf28      	it	cs
 100a7fc:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 100a800:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 100a804:	bf00      	nop
 100a806:	eb42 0202 	adc.w	r2, r2, r2
 100a80a:	bf28      	it	cs
 100a80c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 100a810:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 100a814:	bf00      	nop
 100a816:	eb42 0202 	adc.w	r2, r2, r2
 100a81a:	bf28      	it	cs
 100a81c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 100a820:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 100a824:	bf00      	nop
 100a826:	eb42 0202 	adc.w	r2, r2, r2
 100a82a:	bf28      	it	cs
 100a82c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 100a830:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 100a834:	bf00      	nop
 100a836:	eb42 0202 	adc.w	r2, r2, r2
 100a83a:	bf28      	it	cs
 100a83c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 100a840:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 100a844:	bf00      	nop
 100a846:	eb42 0202 	adc.w	r2, r2, r2
 100a84a:	bf28      	it	cs
 100a84c:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 100a850:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 100a854:	bf00      	nop
 100a856:	eb42 0202 	adc.w	r2, r2, r2
 100a85a:	bf28      	it	cs
 100a85c:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 100a860:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 100a864:	bf00      	nop
 100a866:	eb42 0202 	adc.w	r2, r2, r2
 100a86a:	bf28      	it	cs
 100a86c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 100a870:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 100a874:	bf00      	nop
 100a876:	eb42 0202 	adc.w	r2, r2, r2
 100a87a:	bf28      	it	cs
 100a87c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 100a880:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 100a884:	bf00      	nop
 100a886:	eb42 0202 	adc.w	r2, r2, r2
 100a88a:	bf28      	it	cs
 100a88c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 100a890:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 100a894:	bf00      	nop
 100a896:	eb42 0202 	adc.w	r2, r2, r2
 100a89a:	bf28      	it	cs
 100a89c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 100a8a0:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 100a8a4:	bf00      	nop
 100a8a6:	eb42 0202 	adc.w	r2, r2, r2
 100a8aa:	bf28      	it	cs
 100a8ac:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 100a8b0:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 100a8b4:	bf00      	nop
 100a8b6:	eb42 0202 	adc.w	r2, r2, r2
 100a8ba:	bf28      	it	cs
 100a8bc:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 100a8c0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 100a8c4:	bf00      	nop
 100a8c6:	eb42 0202 	adc.w	r2, r2, r2
 100a8ca:	bf28      	it	cs
 100a8cc:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 100a8d0:	ebb0 0f01 	cmp.w	r0, r1
 100a8d4:	bf00      	nop
 100a8d6:	eb42 0202 	adc.w	r2, r2, r2
 100a8da:	bf28      	it	cs
 100a8dc:	eba0 0001 	subcs.w	r0, r0, r1
 100a8e0:	4610      	mov	r0, r2
 100a8e2:	4770      	bx	lr
 100a8e4:	bf0c      	ite	eq
 100a8e6:	2001      	moveq	r0, #1
 100a8e8:	2000      	movne	r0, #0
 100a8ea:	4770      	bx	lr
 100a8ec:	fab1 f281 	clz	r2, r1
 100a8f0:	f1c2 021f 	rsb	r2, r2, #31
 100a8f4:	fa20 f002 	lsr.w	r0, r0, r2
 100a8f8:	4770      	bx	lr
 100a8fa:	b108      	cbz	r0, 100a900 <__udivsi3+0x258>
 100a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 100a900:	f000 b966 	b.w	100abd0 <__aeabi_idiv0>

0100a904 <__aeabi_uidivmod>:
 100a904:	2900      	cmp	r1, #0
 100a906:	d0f8      	beq.n	100a8fa <__udivsi3+0x252>
 100a908:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 100a90c:	f7ff fecc 	bl	100a6a8 <__udivsi3>
 100a910:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 100a914:	fb02 f300 	mul.w	r3, r2, r0
 100a918:	eba1 0103 	sub.w	r1, r1, r3
 100a91c:	4770      	bx	lr
 100a91e:	bf00      	nop

0100a920 <__divsi3>:
 100a920:	2900      	cmp	r1, #0
 100a922:	f000 813e 	beq.w	100aba2 <.divsi3_skip_div0_test+0x27c>

0100a926 <.divsi3_skip_div0_test>:
 100a926:	ea80 0c01 	eor.w	ip, r0, r1
 100a92a:	bf48      	it	mi
 100a92c:	4249      	negmi	r1, r1
 100a92e:	1e4a      	subs	r2, r1, #1
 100a930:	f000 811f 	beq.w	100ab72 <.divsi3_skip_div0_test+0x24c>
 100a934:	0003      	movs	r3, r0
 100a936:	bf48      	it	mi
 100a938:	4243      	negmi	r3, r0
 100a93a:	428b      	cmp	r3, r1
 100a93c:	f240 811e 	bls.w	100ab7c <.divsi3_skip_div0_test+0x256>
 100a940:	4211      	tst	r1, r2
 100a942:	f000 8123 	beq.w	100ab8c <.divsi3_skip_div0_test+0x266>
 100a946:	fab3 f283 	clz	r2, r3
 100a94a:	fab1 f081 	clz	r0, r1
 100a94e:	eba0 0202 	sub.w	r2, r0, r2
 100a952:	f1c2 021f 	rsb	r2, r2, #31
 100a956:	a004      	add	r0, pc, #16	; (adr r0, 100a968 <.divsi3_skip_div0_test+0x42>)
 100a958:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 100a95c:	f04f 0000 	mov.w	r0, #0
 100a960:	4697      	mov	pc, r2
 100a962:	bf00      	nop
 100a964:	f3af 8000 	nop.w
 100a968:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 100a96c:	bf00      	nop
 100a96e:	eb40 0000 	adc.w	r0, r0, r0
 100a972:	bf28      	it	cs
 100a974:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 100a978:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 100a97c:	bf00      	nop
 100a97e:	eb40 0000 	adc.w	r0, r0, r0
 100a982:	bf28      	it	cs
 100a984:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 100a988:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 100a98c:	bf00      	nop
 100a98e:	eb40 0000 	adc.w	r0, r0, r0
 100a992:	bf28      	it	cs
 100a994:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 100a998:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 100a99c:	bf00      	nop
 100a99e:	eb40 0000 	adc.w	r0, r0, r0
 100a9a2:	bf28      	it	cs
 100a9a4:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 100a9a8:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 100a9ac:	bf00      	nop
 100a9ae:	eb40 0000 	adc.w	r0, r0, r0
 100a9b2:	bf28      	it	cs
 100a9b4:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 100a9b8:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 100a9bc:	bf00      	nop
 100a9be:	eb40 0000 	adc.w	r0, r0, r0
 100a9c2:	bf28      	it	cs
 100a9c4:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 100a9c8:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 100a9cc:	bf00      	nop
 100a9ce:	eb40 0000 	adc.w	r0, r0, r0
 100a9d2:	bf28      	it	cs
 100a9d4:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 100a9d8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 100a9dc:	bf00      	nop
 100a9de:	eb40 0000 	adc.w	r0, r0, r0
 100a9e2:	bf28      	it	cs
 100a9e4:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 100a9e8:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 100a9ec:	bf00      	nop
 100a9ee:	eb40 0000 	adc.w	r0, r0, r0
 100a9f2:	bf28      	it	cs
 100a9f4:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 100a9f8:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 100a9fc:	bf00      	nop
 100a9fe:	eb40 0000 	adc.w	r0, r0, r0
 100aa02:	bf28      	it	cs
 100aa04:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 100aa08:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 100aa0c:	bf00      	nop
 100aa0e:	eb40 0000 	adc.w	r0, r0, r0
 100aa12:	bf28      	it	cs
 100aa14:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 100aa18:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 100aa1c:	bf00      	nop
 100aa1e:	eb40 0000 	adc.w	r0, r0, r0
 100aa22:	bf28      	it	cs
 100aa24:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 100aa28:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 100aa2c:	bf00      	nop
 100aa2e:	eb40 0000 	adc.w	r0, r0, r0
 100aa32:	bf28      	it	cs
 100aa34:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 100aa38:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 100aa3c:	bf00      	nop
 100aa3e:	eb40 0000 	adc.w	r0, r0, r0
 100aa42:	bf28      	it	cs
 100aa44:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 100aa48:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 100aa4c:	bf00      	nop
 100aa4e:	eb40 0000 	adc.w	r0, r0, r0
 100aa52:	bf28      	it	cs
 100aa54:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 100aa58:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 100aa5c:	bf00      	nop
 100aa5e:	eb40 0000 	adc.w	r0, r0, r0
 100aa62:	bf28      	it	cs
 100aa64:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 100aa68:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 100aa6c:	bf00      	nop
 100aa6e:	eb40 0000 	adc.w	r0, r0, r0
 100aa72:	bf28      	it	cs
 100aa74:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 100aa78:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 100aa7c:	bf00      	nop
 100aa7e:	eb40 0000 	adc.w	r0, r0, r0
 100aa82:	bf28      	it	cs
 100aa84:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 100aa88:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 100aa8c:	bf00      	nop
 100aa8e:	eb40 0000 	adc.w	r0, r0, r0
 100aa92:	bf28      	it	cs
 100aa94:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 100aa98:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 100aa9c:	bf00      	nop
 100aa9e:	eb40 0000 	adc.w	r0, r0, r0
 100aaa2:	bf28      	it	cs
 100aaa4:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 100aaa8:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 100aaac:	bf00      	nop
 100aaae:	eb40 0000 	adc.w	r0, r0, r0
 100aab2:	bf28      	it	cs
 100aab4:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 100aab8:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 100aabc:	bf00      	nop
 100aabe:	eb40 0000 	adc.w	r0, r0, r0
 100aac2:	bf28      	it	cs
 100aac4:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 100aac8:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 100aacc:	bf00      	nop
 100aace:	eb40 0000 	adc.w	r0, r0, r0
 100aad2:	bf28      	it	cs
 100aad4:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 100aad8:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 100aadc:	bf00      	nop
 100aade:	eb40 0000 	adc.w	r0, r0, r0
 100aae2:	bf28      	it	cs
 100aae4:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 100aae8:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 100aaec:	bf00      	nop
 100aaee:	eb40 0000 	adc.w	r0, r0, r0
 100aaf2:	bf28      	it	cs
 100aaf4:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 100aaf8:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 100aafc:	bf00      	nop
 100aafe:	eb40 0000 	adc.w	r0, r0, r0
 100ab02:	bf28      	it	cs
 100ab04:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 100ab08:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 100ab0c:	bf00      	nop
 100ab0e:	eb40 0000 	adc.w	r0, r0, r0
 100ab12:	bf28      	it	cs
 100ab14:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 100ab18:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 100ab1c:	bf00      	nop
 100ab1e:	eb40 0000 	adc.w	r0, r0, r0
 100ab22:	bf28      	it	cs
 100ab24:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 100ab28:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 100ab2c:	bf00      	nop
 100ab2e:	eb40 0000 	adc.w	r0, r0, r0
 100ab32:	bf28      	it	cs
 100ab34:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 100ab38:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 100ab3c:	bf00      	nop
 100ab3e:	eb40 0000 	adc.w	r0, r0, r0
 100ab42:	bf28      	it	cs
 100ab44:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 100ab48:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 100ab4c:	bf00      	nop
 100ab4e:	eb40 0000 	adc.w	r0, r0, r0
 100ab52:	bf28      	it	cs
 100ab54:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 100ab58:	ebb3 0f01 	cmp.w	r3, r1
 100ab5c:	bf00      	nop
 100ab5e:	eb40 0000 	adc.w	r0, r0, r0
 100ab62:	bf28      	it	cs
 100ab64:	eba3 0301 	subcs.w	r3, r3, r1
 100ab68:	f1bc 0f00 	cmp.w	ip, #0
 100ab6c:	bf48      	it	mi
 100ab6e:	4240      	negmi	r0, r0
 100ab70:	4770      	bx	lr
 100ab72:	ea9c 0f00 	teq	ip, r0
 100ab76:	bf48      	it	mi
 100ab78:	4240      	negmi	r0, r0
 100ab7a:	4770      	bx	lr
 100ab7c:	bf38      	it	cc
 100ab7e:	2000      	movcc	r0, #0
 100ab80:	bf04      	itt	eq
 100ab82:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 100ab86:	f040 0001 	orreq.w	r0, r0, #1
 100ab8a:	4770      	bx	lr
 100ab8c:	fab1 f281 	clz	r2, r1
 100ab90:	f1c2 021f 	rsb	r2, r2, #31
 100ab94:	f1bc 0f00 	cmp.w	ip, #0
 100ab98:	fa23 f002 	lsr.w	r0, r3, r2
 100ab9c:	bf48      	it	mi
 100ab9e:	4240      	negmi	r0, r0
 100aba0:	4770      	bx	lr
 100aba2:	2800      	cmp	r0, #0
 100aba4:	bfc8      	it	gt
 100aba6:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 100abaa:	bfb8      	it	lt
 100abac:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 100abb0:	f000 b80e 	b.w	100abd0 <__aeabi_idiv0>

0100abb4 <__aeabi_idivmod>:
 100abb4:	2900      	cmp	r1, #0
 100abb6:	d0f4      	beq.n	100aba2 <.divsi3_skip_div0_test+0x27c>
 100abb8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 100abbc:	f7ff feb3 	bl	100a926 <.divsi3_skip_div0_test>
 100abc0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 100abc4:	fb02 f300 	mul.w	r3, r2, r0
 100abc8:	eba1 0103 	sub.w	r1, r1, r3
 100abcc:	4770      	bx	lr
 100abce:	bf00      	nop

0100abd0 <__aeabi_idiv0>:
 100abd0:	4770      	bx	lr
 100abd2:	bf00      	nop

0100abd4 <__aeabi_drsub>:
 100abd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 100abd8:	e002      	b.n	100abe0 <__adddf3>
 100abda:	bf00      	nop

0100abdc <__aeabi_dsub>:
 100abdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0100abe0 <__adddf3>:
 100abe0:	b530      	push	{r4, r5, lr}
 100abe2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 100abe6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 100abea:	ea94 0f05 	teq	r4, r5
 100abee:	bf08      	it	eq
 100abf0:	ea90 0f02 	teqeq	r0, r2
 100abf4:	bf1f      	itttt	ne
 100abf6:	ea54 0c00 	orrsne.w	ip, r4, r0
 100abfa:	ea55 0c02 	orrsne.w	ip, r5, r2
 100abfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 100ac02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 100ac06:	f000 80e2 	beq.w	100adce <__adddf3+0x1ee>
 100ac0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 100ac0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 100ac12:	bfb8      	it	lt
 100ac14:	426d      	neglt	r5, r5
 100ac16:	dd0c      	ble.n	100ac32 <__adddf3+0x52>
 100ac18:	442c      	add	r4, r5
 100ac1a:	ea80 0202 	eor.w	r2, r0, r2
 100ac1e:	ea81 0303 	eor.w	r3, r1, r3
 100ac22:	ea82 0000 	eor.w	r0, r2, r0
 100ac26:	ea83 0101 	eor.w	r1, r3, r1
 100ac2a:	ea80 0202 	eor.w	r2, r0, r2
 100ac2e:	ea81 0303 	eor.w	r3, r1, r3
 100ac32:	2d36      	cmp	r5, #54	; 0x36
 100ac34:	bf88      	it	hi
 100ac36:	bd30      	pophi	{r4, r5, pc}
 100ac38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 100ac3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 100ac40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 100ac44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 100ac48:	d002      	beq.n	100ac50 <__adddf3+0x70>
 100ac4a:	4240      	negs	r0, r0
 100ac4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 100ac50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 100ac54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 100ac58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 100ac5c:	d002      	beq.n	100ac64 <__adddf3+0x84>
 100ac5e:	4252      	negs	r2, r2
 100ac60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 100ac64:	ea94 0f05 	teq	r4, r5
 100ac68:	f000 80a7 	beq.w	100adba <__adddf3+0x1da>
 100ac6c:	f1a4 0401 	sub.w	r4, r4, #1
 100ac70:	f1d5 0e20 	rsbs	lr, r5, #32
 100ac74:	db0d      	blt.n	100ac92 <__adddf3+0xb2>
 100ac76:	fa02 fc0e 	lsl.w	ip, r2, lr
 100ac7a:	fa22 f205 	lsr.w	r2, r2, r5
 100ac7e:	1880      	adds	r0, r0, r2
 100ac80:	f141 0100 	adc.w	r1, r1, #0
 100ac84:	fa03 f20e 	lsl.w	r2, r3, lr
 100ac88:	1880      	adds	r0, r0, r2
 100ac8a:	fa43 f305 	asr.w	r3, r3, r5
 100ac8e:	4159      	adcs	r1, r3
 100ac90:	e00e      	b.n	100acb0 <__adddf3+0xd0>
 100ac92:	f1a5 0520 	sub.w	r5, r5, #32
 100ac96:	f10e 0e20 	add.w	lr, lr, #32
 100ac9a:	2a01      	cmp	r2, #1
 100ac9c:	fa03 fc0e 	lsl.w	ip, r3, lr
 100aca0:	bf28      	it	cs
 100aca2:	f04c 0c02 	orrcs.w	ip, ip, #2
 100aca6:	fa43 f305 	asr.w	r3, r3, r5
 100acaa:	18c0      	adds	r0, r0, r3
 100acac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 100acb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 100acb4:	d507      	bpl.n	100acc6 <__adddf3+0xe6>
 100acb6:	f04f 0e00 	mov.w	lr, #0
 100acba:	f1dc 0c00 	rsbs	ip, ip, #0
 100acbe:	eb7e 0000 	sbcs.w	r0, lr, r0
 100acc2:	eb6e 0101 	sbc.w	r1, lr, r1
 100acc6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 100acca:	d31b      	bcc.n	100ad04 <__adddf3+0x124>
 100accc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 100acd0:	d30c      	bcc.n	100acec <__adddf3+0x10c>
 100acd2:	0849      	lsrs	r1, r1, #1
 100acd4:	ea5f 0030 	movs.w	r0, r0, rrx
 100acd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 100acdc:	f104 0401 	add.w	r4, r4, #1
 100ace0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 100ace4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 100ace8:	f080 809a 	bcs.w	100ae20 <__adddf3+0x240>
 100acec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 100acf0:	bf08      	it	eq
 100acf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 100acf6:	f150 0000 	adcs.w	r0, r0, #0
 100acfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 100acfe:	ea41 0105 	orr.w	r1, r1, r5
 100ad02:	bd30      	pop	{r4, r5, pc}
 100ad04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 100ad08:	4140      	adcs	r0, r0
 100ad0a:	eb41 0101 	adc.w	r1, r1, r1
 100ad0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 100ad12:	f1a4 0401 	sub.w	r4, r4, #1
 100ad16:	d1e9      	bne.n	100acec <__adddf3+0x10c>
 100ad18:	f091 0f00 	teq	r1, #0
 100ad1c:	bf04      	itt	eq
 100ad1e:	4601      	moveq	r1, r0
 100ad20:	2000      	moveq	r0, #0
 100ad22:	fab1 f381 	clz	r3, r1
 100ad26:	bf08      	it	eq
 100ad28:	3320      	addeq	r3, #32
 100ad2a:	f1a3 030b 	sub.w	r3, r3, #11
 100ad2e:	f1b3 0220 	subs.w	r2, r3, #32
 100ad32:	da0c      	bge.n	100ad4e <__adddf3+0x16e>
 100ad34:	320c      	adds	r2, #12
 100ad36:	dd08      	ble.n	100ad4a <__adddf3+0x16a>
 100ad38:	f102 0c14 	add.w	ip, r2, #20
 100ad3c:	f1c2 020c 	rsb	r2, r2, #12
 100ad40:	fa01 f00c 	lsl.w	r0, r1, ip
 100ad44:	fa21 f102 	lsr.w	r1, r1, r2
 100ad48:	e00c      	b.n	100ad64 <__adddf3+0x184>
 100ad4a:	f102 0214 	add.w	r2, r2, #20
 100ad4e:	bfd8      	it	le
 100ad50:	f1c2 0c20 	rsble	ip, r2, #32
 100ad54:	fa01 f102 	lsl.w	r1, r1, r2
 100ad58:	fa20 fc0c 	lsr.w	ip, r0, ip
 100ad5c:	bfdc      	itt	le
 100ad5e:	ea41 010c 	orrle.w	r1, r1, ip
 100ad62:	4090      	lslle	r0, r2
 100ad64:	1ae4      	subs	r4, r4, r3
 100ad66:	bfa2      	ittt	ge
 100ad68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 100ad6c:	4329      	orrge	r1, r5
 100ad6e:	bd30      	popge	{r4, r5, pc}
 100ad70:	ea6f 0404 	mvn.w	r4, r4
 100ad74:	3c1f      	subs	r4, #31
 100ad76:	da1c      	bge.n	100adb2 <__adddf3+0x1d2>
 100ad78:	340c      	adds	r4, #12
 100ad7a:	dc0e      	bgt.n	100ad9a <__adddf3+0x1ba>
 100ad7c:	f104 0414 	add.w	r4, r4, #20
 100ad80:	f1c4 0220 	rsb	r2, r4, #32
 100ad84:	fa20 f004 	lsr.w	r0, r0, r4
 100ad88:	fa01 f302 	lsl.w	r3, r1, r2
 100ad8c:	ea40 0003 	orr.w	r0, r0, r3
 100ad90:	fa21 f304 	lsr.w	r3, r1, r4
 100ad94:	ea45 0103 	orr.w	r1, r5, r3
 100ad98:	bd30      	pop	{r4, r5, pc}
 100ad9a:	f1c4 040c 	rsb	r4, r4, #12
 100ad9e:	f1c4 0220 	rsb	r2, r4, #32
 100ada2:	fa20 f002 	lsr.w	r0, r0, r2
 100ada6:	fa01 f304 	lsl.w	r3, r1, r4
 100adaa:	ea40 0003 	orr.w	r0, r0, r3
 100adae:	4629      	mov	r1, r5
 100adb0:	bd30      	pop	{r4, r5, pc}
 100adb2:	fa21 f004 	lsr.w	r0, r1, r4
 100adb6:	4629      	mov	r1, r5
 100adb8:	bd30      	pop	{r4, r5, pc}
 100adba:	f094 0f00 	teq	r4, #0
 100adbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 100adc2:	bf06      	itte	eq
 100adc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 100adc8:	3401      	addeq	r4, #1
 100adca:	3d01      	subne	r5, #1
 100adcc:	e74e      	b.n	100ac6c <__adddf3+0x8c>
 100adce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 100add2:	bf18      	it	ne
 100add4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 100add8:	d029      	beq.n	100ae2e <__adddf3+0x24e>
 100adda:	ea94 0f05 	teq	r4, r5
 100adde:	bf08      	it	eq
 100ade0:	ea90 0f02 	teqeq	r0, r2
 100ade4:	d005      	beq.n	100adf2 <__adddf3+0x212>
 100ade6:	ea54 0c00 	orrs.w	ip, r4, r0
 100adea:	bf04      	itt	eq
 100adec:	4619      	moveq	r1, r3
 100adee:	4610      	moveq	r0, r2
 100adf0:	bd30      	pop	{r4, r5, pc}
 100adf2:	ea91 0f03 	teq	r1, r3
 100adf6:	bf1e      	ittt	ne
 100adf8:	2100      	movne	r1, #0
 100adfa:	2000      	movne	r0, #0
 100adfc:	bd30      	popne	{r4, r5, pc}
 100adfe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 100ae02:	d105      	bne.n	100ae10 <__adddf3+0x230>
 100ae04:	0040      	lsls	r0, r0, #1
 100ae06:	4149      	adcs	r1, r1
 100ae08:	bf28      	it	cs
 100ae0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 100ae0e:	bd30      	pop	{r4, r5, pc}
 100ae10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 100ae14:	bf3c      	itt	cc
 100ae16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 100ae1a:	bd30      	popcc	{r4, r5, pc}
 100ae1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 100ae20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 100ae24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 100ae28:	f04f 0000 	mov.w	r0, #0
 100ae2c:	bd30      	pop	{r4, r5, pc}
 100ae2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 100ae32:	bf1a      	itte	ne
 100ae34:	4619      	movne	r1, r3
 100ae36:	4610      	movne	r0, r2
 100ae38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 100ae3c:	bf1c      	itt	ne
 100ae3e:	460b      	movne	r3, r1
 100ae40:	4602      	movne	r2, r0
 100ae42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 100ae46:	bf06      	itte	eq
 100ae48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 100ae4c:	ea91 0f03 	teqeq	r1, r3
 100ae50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 100ae54:	bd30      	pop	{r4, r5, pc}
 100ae56:	bf00      	nop

0100ae58 <__aeabi_ui2d>:
 100ae58:	f090 0f00 	teq	r0, #0
 100ae5c:	bf04      	itt	eq
 100ae5e:	2100      	moveq	r1, #0
 100ae60:	4770      	bxeq	lr
 100ae62:	b530      	push	{r4, r5, lr}
 100ae64:	f44f 6480 	mov.w	r4, #1024	; 0x400
 100ae68:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100ae6c:	f04f 0500 	mov.w	r5, #0
 100ae70:	f04f 0100 	mov.w	r1, #0
 100ae74:	e750      	b.n	100ad18 <__adddf3+0x138>
 100ae76:	bf00      	nop

0100ae78 <__aeabi_i2d>:
 100ae78:	f090 0f00 	teq	r0, #0
 100ae7c:	bf04      	itt	eq
 100ae7e:	2100      	moveq	r1, #0
 100ae80:	4770      	bxeq	lr
 100ae82:	b530      	push	{r4, r5, lr}
 100ae84:	f44f 6480 	mov.w	r4, #1024	; 0x400
 100ae88:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100ae8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 100ae90:	bf48      	it	mi
 100ae92:	4240      	negmi	r0, r0
 100ae94:	f04f 0100 	mov.w	r1, #0
 100ae98:	e73e      	b.n	100ad18 <__adddf3+0x138>
 100ae9a:	bf00      	nop

0100ae9c <__aeabi_f2d>:
 100ae9c:	0042      	lsls	r2, r0, #1
 100ae9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 100aea2:	ea4f 0131 	mov.w	r1, r1, rrx
 100aea6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 100aeaa:	bf1f      	itttt	ne
 100aeac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 100aeb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 100aeb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 100aeb8:	4770      	bxne	lr
 100aeba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 100aebe:	bf08      	it	eq
 100aec0:	4770      	bxeq	lr
 100aec2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 100aec6:	bf04      	itt	eq
 100aec8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 100aecc:	4770      	bxeq	lr
 100aece:	b530      	push	{r4, r5, lr}
 100aed0:	f44f 7460 	mov.w	r4, #896	; 0x380
 100aed4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 100aed8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 100aedc:	e71c      	b.n	100ad18 <__adddf3+0x138>
 100aede:	bf00      	nop

0100aee0 <__aeabi_ul2d>:
 100aee0:	ea50 0201 	orrs.w	r2, r0, r1
 100aee4:	bf08      	it	eq
 100aee6:	4770      	bxeq	lr
 100aee8:	b530      	push	{r4, r5, lr}
 100aeea:	f04f 0500 	mov.w	r5, #0
 100aeee:	e00a      	b.n	100af06 <__aeabi_l2d+0x16>

0100aef0 <__aeabi_l2d>:
 100aef0:	ea50 0201 	orrs.w	r2, r0, r1
 100aef4:	bf08      	it	eq
 100aef6:	4770      	bxeq	lr
 100aef8:	b530      	push	{r4, r5, lr}
 100aefa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 100aefe:	d502      	bpl.n	100af06 <__aeabi_l2d+0x16>
 100af00:	4240      	negs	r0, r0
 100af02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 100af06:	f44f 6480 	mov.w	r4, #1024	; 0x400
 100af0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 100af0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 100af12:	f43f aed8 	beq.w	100acc6 <__adddf3+0xe6>
 100af16:	f04f 0203 	mov.w	r2, #3
 100af1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 100af1e:	bf18      	it	ne
 100af20:	3203      	addne	r2, #3
 100af22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 100af26:	bf18      	it	ne
 100af28:	3203      	addne	r2, #3
 100af2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 100af2e:	f1c2 0320 	rsb	r3, r2, #32
 100af32:	fa00 fc03 	lsl.w	ip, r0, r3
 100af36:	fa20 f002 	lsr.w	r0, r0, r2
 100af3a:	fa01 fe03 	lsl.w	lr, r1, r3
 100af3e:	ea40 000e 	orr.w	r0, r0, lr
 100af42:	fa21 f102 	lsr.w	r1, r1, r2
 100af46:	4414      	add	r4, r2
 100af48:	e6bd      	b.n	100acc6 <__adddf3+0xe6>
 100af4a:	bf00      	nop

0100af4c <__aeabi_frsub>:
 100af4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 100af50:	e002      	b.n	100af58 <__addsf3>
 100af52:	bf00      	nop

0100af54 <__aeabi_fsub>:
 100af54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0100af58 <__addsf3>:
 100af58:	0042      	lsls	r2, r0, #1
 100af5a:	bf1f      	itttt	ne
 100af5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 100af60:	ea92 0f03 	teqne	r2, r3
 100af64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 100af68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 100af6c:	d06a      	beq.n	100b044 <__addsf3+0xec>
 100af6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 100af72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 100af76:	bfc1      	itttt	gt
 100af78:	18d2      	addgt	r2, r2, r3
 100af7a:	4041      	eorgt	r1, r0
 100af7c:	4048      	eorgt	r0, r1
 100af7e:	4041      	eorgt	r1, r0
 100af80:	bfb8      	it	lt
 100af82:	425b      	neglt	r3, r3
 100af84:	2b19      	cmp	r3, #25
 100af86:	bf88      	it	hi
 100af88:	4770      	bxhi	lr
 100af8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 100af8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 100af92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100af96:	bf18      	it	ne
 100af98:	4240      	negne	r0, r0
 100af9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 100af9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 100afa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 100afa6:	bf18      	it	ne
 100afa8:	4249      	negne	r1, r1
 100afaa:	ea92 0f03 	teq	r2, r3
 100afae:	d03f      	beq.n	100b030 <__addsf3+0xd8>
 100afb0:	f1a2 0201 	sub.w	r2, r2, #1
 100afb4:	fa41 fc03 	asr.w	ip, r1, r3
 100afb8:	eb10 000c 	adds.w	r0, r0, ip
 100afbc:	f1c3 0320 	rsb	r3, r3, #32
 100afc0:	fa01 f103 	lsl.w	r1, r1, r3
 100afc4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 100afc8:	d502      	bpl.n	100afd0 <__addsf3+0x78>
 100afca:	4249      	negs	r1, r1
 100afcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 100afd0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 100afd4:	d313      	bcc.n	100affe <__addsf3+0xa6>
 100afd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 100afda:	d306      	bcc.n	100afea <__addsf3+0x92>
 100afdc:	0840      	lsrs	r0, r0, #1
 100afde:	ea4f 0131 	mov.w	r1, r1, rrx
 100afe2:	f102 0201 	add.w	r2, r2, #1
 100afe6:	2afe      	cmp	r2, #254	; 0xfe
 100afe8:	d251      	bcs.n	100b08e <__addsf3+0x136>
 100afea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 100afee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 100aff2:	bf08      	it	eq
 100aff4:	f020 0001 	biceq.w	r0, r0, #1
 100aff8:	ea40 0003 	orr.w	r0, r0, r3
 100affc:	4770      	bx	lr
 100affe:	0049      	lsls	r1, r1, #1
 100b000:	eb40 0000 	adc.w	r0, r0, r0
 100b004:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 100b008:	f1a2 0201 	sub.w	r2, r2, #1
 100b00c:	d1ed      	bne.n	100afea <__addsf3+0x92>
 100b00e:	fab0 fc80 	clz	ip, r0
 100b012:	f1ac 0c08 	sub.w	ip, ip, #8
 100b016:	ebb2 020c 	subs.w	r2, r2, ip
 100b01a:	fa00 f00c 	lsl.w	r0, r0, ip
 100b01e:	bfaa      	itet	ge
 100b020:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 100b024:	4252      	neglt	r2, r2
 100b026:	4318      	orrge	r0, r3
 100b028:	bfbc      	itt	lt
 100b02a:	40d0      	lsrlt	r0, r2
 100b02c:	4318      	orrlt	r0, r3
 100b02e:	4770      	bx	lr
 100b030:	f092 0f00 	teq	r2, #0
 100b034:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 100b038:	bf06      	itte	eq
 100b03a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 100b03e:	3201      	addeq	r2, #1
 100b040:	3b01      	subne	r3, #1
 100b042:	e7b5      	b.n	100afb0 <__addsf3+0x58>
 100b044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 100b048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 100b04c:	bf18      	it	ne
 100b04e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 100b052:	d021      	beq.n	100b098 <__addsf3+0x140>
 100b054:	ea92 0f03 	teq	r2, r3
 100b058:	d004      	beq.n	100b064 <__addsf3+0x10c>
 100b05a:	f092 0f00 	teq	r2, #0
 100b05e:	bf08      	it	eq
 100b060:	4608      	moveq	r0, r1
 100b062:	4770      	bx	lr
 100b064:	ea90 0f01 	teq	r0, r1
 100b068:	bf1c      	itt	ne
 100b06a:	2000      	movne	r0, #0
 100b06c:	4770      	bxne	lr
 100b06e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 100b072:	d104      	bne.n	100b07e <__addsf3+0x126>
 100b074:	0040      	lsls	r0, r0, #1
 100b076:	bf28      	it	cs
 100b078:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 100b07c:	4770      	bx	lr
 100b07e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 100b082:	bf3c      	itt	cc
 100b084:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 100b088:	4770      	bxcc	lr
 100b08a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 100b08e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 100b092:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 100b096:	4770      	bx	lr
 100b098:	ea7f 6222 	mvns.w	r2, r2, asr #24
 100b09c:	bf16      	itet	ne
 100b09e:	4608      	movne	r0, r1
 100b0a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 100b0a4:	4601      	movne	r1, r0
 100b0a6:	0242      	lsls	r2, r0, #9
 100b0a8:	bf06      	itte	eq
 100b0aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 100b0ae:	ea90 0f01 	teqeq	r0, r1
 100b0b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 100b0b6:	4770      	bx	lr

0100b0b8 <__aeabi_ui2f>:
 100b0b8:	f04f 0300 	mov.w	r3, #0
 100b0bc:	e004      	b.n	100b0c8 <__aeabi_i2f+0x8>
 100b0be:	bf00      	nop

0100b0c0 <__aeabi_i2f>:
 100b0c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 100b0c4:	bf48      	it	mi
 100b0c6:	4240      	negmi	r0, r0
 100b0c8:	ea5f 0c00 	movs.w	ip, r0
 100b0cc:	bf08      	it	eq
 100b0ce:	4770      	bxeq	lr
 100b0d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 100b0d4:	4601      	mov	r1, r0
 100b0d6:	f04f 0000 	mov.w	r0, #0
 100b0da:	e01c      	b.n	100b116 <__aeabi_l2f+0x2a>

0100b0dc <__aeabi_ul2f>:
 100b0dc:	ea50 0201 	orrs.w	r2, r0, r1
 100b0e0:	bf08      	it	eq
 100b0e2:	4770      	bxeq	lr
 100b0e4:	f04f 0300 	mov.w	r3, #0
 100b0e8:	e00a      	b.n	100b100 <__aeabi_l2f+0x14>
 100b0ea:	bf00      	nop

0100b0ec <__aeabi_l2f>:
 100b0ec:	ea50 0201 	orrs.w	r2, r0, r1
 100b0f0:	bf08      	it	eq
 100b0f2:	4770      	bxeq	lr
 100b0f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 100b0f8:	d502      	bpl.n	100b100 <__aeabi_l2f+0x14>
 100b0fa:	4240      	negs	r0, r0
 100b0fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 100b100:	ea5f 0c01 	movs.w	ip, r1
 100b104:	bf02      	ittt	eq
 100b106:	4684      	moveq	ip, r0
 100b108:	4601      	moveq	r1, r0
 100b10a:	2000      	moveq	r0, #0
 100b10c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 100b110:	bf08      	it	eq
 100b112:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 100b116:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 100b11a:	fabc f28c 	clz	r2, ip
 100b11e:	3a08      	subs	r2, #8
 100b120:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 100b124:	db10      	blt.n	100b148 <__aeabi_l2f+0x5c>
 100b126:	fa01 fc02 	lsl.w	ip, r1, r2
 100b12a:	4463      	add	r3, ip
 100b12c:	fa00 fc02 	lsl.w	ip, r0, r2
 100b130:	f1c2 0220 	rsb	r2, r2, #32
 100b134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 100b138:	fa20 f202 	lsr.w	r2, r0, r2
 100b13c:	eb43 0002 	adc.w	r0, r3, r2
 100b140:	bf08      	it	eq
 100b142:	f020 0001 	biceq.w	r0, r0, #1
 100b146:	4770      	bx	lr
 100b148:	f102 0220 	add.w	r2, r2, #32
 100b14c:	fa01 fc02 	lsl.w	ip, r1, r2
 100b150:	f1c2 0220 	rsb	r2, r2, #32
 100b154:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 100b158:	fa21 f202 	lsr.w	r2, r1, r2
 100b15c:	eb43 0002 	adc.w	r0, r3, r2
 100b160:	bf08      	it	eq
 100b162:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 100b166:	4770      	bx	lr

0100b168 <__aeabi_uldivmod>:
 100b168:	b953      	cbnz	r3, 100b180 <__aeabi_uldivmod+0x18>
 100b16a:	b94a      	cbnz	r2, 100b180 <__aeabi_uldivmod+0x18>
 100b16c:	2900      	cmp	r1, #0
 100b16e:	bf08      	it	eq
 100b170:	2800      	cmpeq	r0, #0
 100b172:	bf1c      	itt	ne
 100b174:	f04f 31ff 	movne.w	r1, #4294967295
 100b178:	f04f 30ff 	movne.w	r0, #4294967295
 100b17c:	f7ff bd28 	b.w	100abd0 <__aeabi_idiv0>
 100b180:	f1ad 0c08 	sub.w	ip, sp, #8
 100b184:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 100b188:	f000 f846 	bl	100b218 <__udivmoddi4>
 100b18c:	f8dd e004 	ldr.w	lr, [sp, #4]
 100b190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100b194:	b004      	add	sp, #16
 100b196:	4770      	bx	lr

0100b198 <__aeabi_f2ulz>:
 100b198:	ee07 0a90 	vmov	s15, r0
 100b19c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 100b1c8 <__aeabi_f2ulz+0x30>
 100b1a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 100b1a4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 100b1d0 <__aeabi_f2ulz+0x38>
 100b1a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 100b1ac:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 100b1b0:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 100b1b4:	ee17 1a10 	vmov	r1, s14
 100b1b8:	ee04 6b45 	vmls.f64	d6, d4, d5
 100b1bc:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 100b1c0:	ee17 0a90 	vmov	r0, s15
 100b1c4:	4770      	bx	lr
 100b1c6:	bf00      	nop
 100b1c8:	00000000 	.word	0x00000000
 100b1cc:	41f00000 	.word	0x41f00000
 100b1d0:	00000000 	.word	0x00000000
 100b1d4:	3df00000 	.word	0x3df00000

0100b1d8 <__aeabi_d2ulz>:
 100b1d8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 100b208 <__aeabi_d2ulz+0x30>
 100b1dc:	ec41 0b16 	vmov	d6, r0, r1
 100b1e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 100b1e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 100b210 <__aeabi_d2ulz+0x38>
 100b1e8:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 100b1ec:	eeb8 4b47 	vcvt.f64.u32	d4, s14
 100b1f0:	ee17 1a10 	vmov	r1, s14
 100b1f4:	ee04 6b45 	vmls.f64	d6, d4, d5
 100b1f8:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 100b1fc:	ee17 0a90 	vmov	r0, s15
 100b200:	4770      	bx	lr
 100b202:	bf00      	nop
 100b204:	f3af 8000 	nop.w
 100b208:	00000000 	.word	0x00000000
 100b20c:	3df00000 	.word	0x3df00000
 100b210:	00000000 	.word	0x00000000
 100b214:	41f00000 	.word	0x41f00000

0100b218 <__udivmoddi4>:
 100b218:	4299      	cmp	r1, r3
 100b21a:	bf08      	it	eq
 100b21c:	4290      	cmpeq	r0, r2
 100b21e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100b222:	4604      	mov	r4, r0
 100b224:	bf38      	it	cc
 100b226:	2000      	movcc	r0, #0
 100b228:	460d      	mov	r5, r1
 100b22a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 100b22c:	bf38      	it	cc
 100b22e:	4601      	movcc	r1, r0
 100b230:	d36c      	bcc.n	100b30c <__udivmoddi4+0xf4>
 100b232:	4690      	mov	r8, r2
 100b234:	4699      	mov	r9, r3
 100b236:	fab3 f683 	clz	r6, r3
 100b23a:	2b00      	cmp	r3, #0
 100b23c:	d06f      	beq.n	100b31e <__udivmoddi4+0x106>
 100b23e:	fab5 f185 	clz	r1, r5
 100b242:	2d00      	cmp	r5, #0
 100b244:	d067      	beq.n	100b316 <__udivmoddi4+0xfe>
 100b246:	1a76      	subs	r6, r6, r1
 100b248:	f1a6 0c20 	sub.w	ip, r6, #32
 100b24c:	fa09 fb06 	lsl.w	fp, r9, r6
 100b250:	fa08 f30c 	lsl.w	r3, r8, ip
 100b254:	f1c6 0e20 	rsb	lr, r6, #32
 100b258:	ea4b 0b03 	orr.w	fp, fp, r3
 100b25c:	fa28 f30e 	lsr.w	r3, r8, lr
 100b260:	ea4b 0b03 	orr.w	fp, fp, r3
 100b264:	fa08 fa06 	lsl.w	sl, r8, r6
 100b268:	455d      	cmp	r5, fp
 100b26a:	bf08      	it	eq
 100b26c:	4554      	cmpeq	r4, sl
 100b26e:	bf3c      	itt	cc
 100b270:	2000      	movcc	r0, #0
 100b272:	4601      	movcc	r1, r0
 100b274:	d30a      	bcc.n	100b28c <__udivmoddi4+0x74>
 100b276:	2001      	movs	r0, #1
 100b278:	ebb4 040a 	subs.w	r4, r4, sl
 100b27c:	fa00 f10c 	lsl.w	r1, r0, ip
 100b280:	fa20 f30e 	lsr.w	r3, r0, lr
 100b284:	eb65 050b 	sbc.w	r5, r5, fp
 100b288:	4319      	orrs	r1, r3
 100b28a:	40b0      	lsls	r0, r6
 100b28c:	2e00      	cmp	r6, #0
 100b28e:	d03d      	beq.n	100b30c <__udivmoddi4+0xf4>
 100b290:	ea4f 085a 	mov.w	r8, sl, lsr #1
 100b294:	4632      	mov	r2, r6
 100b296:	ea48 78cb 	orr.w	r8, r8, fp, lsl #31
 100b29a:	ea4f 095b 	mov.w	r9, fp, lsr #1
 100b29e:	e00b      	b.n	100b2b8 <__udivmoddi4+0xa0>
 100b2a0:	ebb4 0308 	subs.w	r3, r4, r8
 100b2a4:	eb65 0a09 	sbc.w	sl, r5, r9
 100b2a8:	18db      	adds	r3, r3, r3
 100b2aa:	eb4a 0a0a 	adc.w	sl, sl, sl
 100b2ae:	1c5c      	adds	r4, r3, #1
 100b2b0:	f14a 0500 	adc.w	r5, sl, #0
 100b2b4:	3a01      	subs	r2, #1
 100b2b6:	d007      	beq.n	100b2c8 <__udivmoddi4+0xb0>
 100b2b8:	454d      	cmp	r5, r9
 100b2ba:	bf08      	it	eq
 100b2bc:	4544      	cmpeq	r4, r8
 100b2be:	d2ef      	bcs.n	100b2a0 <__udivmoddi4+0x88>
 100b2c0:	1924      	adds	r4, r4, r4
 100b2c2:	416d      	adcs	r5, r5
 100b2c4:	3a01      	subs	r2, #1
 100b2c6:	d1f7      	bne.n	100b2b8 <__udivmoddi4+0xa0>
 100b2c8:	fa05 fe0e 	lsl.w	lr, r5, lr
 100b2cc:	fa24 f306 	lsr.w	r3, r4, r6
 100b2d0:	fa25 fc0c 	lsr.w	ip, r5, ip
 100b2d4:	ea43 030e 	orr.w	r3, r3, lr
 100b2d8:	1900      	adds	r0, r0, r4
 100b2da:	fa25 fe06 	lsr.w	lr, r5, r6
 100b2de:	ea43 040c 	orr.w	r4, r3, ip
 100b2e2:	f1a6 0c20 	sub.w	ip, r6, #32
 100b2e6:	f1c6 0220 	rsb	r2, r6, #32
 100b2ea:	fa0e f306 	lsl.w	r3, lr, r6
 100b2ee:	fa04 fc0c 	lsl.w	ip, r4, ip
 100b2f2:	fa04 f606 	lsl.w	r6, r4, r6
 100b2f6:	ea43 030c 	orr.w	r3, r3, ip
 100b2fa:	fa24 f202 	lsr.w	r2, r4, r2
 100b2fe:	eb45 0101 	adc.w	r1, r5, r1
 100b302:	4313      	orrs	r3, r2
 100b304:	1b80      	subs	r0, r0, r6
 100b306:	4675      	mov	r5, lr
 100b308:	eb61 0103 	sbc.w	r1, r1, r3
 100b30c:	b10f      	cbz	r7, 100b312 <__udivmoddi4+0xfa>
 100b30e:	e9c7 4500 	strd	r4, r5, [r7]
 100b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b316:	fab4 f184 	clz	r1, r4
 100b31a:	3120      	adds	r1, #32
 100b31c:	e793      	b.n	100b246 <__udivmoddi4+0x2e>
 100b31e:	fab2 f682 	clz	r6, r2
 100b322:	fab5 f185 	clz	r1, r5
 100b326:	3620      	adds	r6, #32
 100b328:	2d00      	cmp	r5, #0
 100b32a:	d18c      	bne.n	100b246 <__udivmoddi4+0x2e>
 100b32c:	e7f3      	b.n	100b316 <__udivmoddi4+0xfe>
 100b32e:	bf00      	nop

0100b330 <exit>:
 100b330:	b508      	push	{r3, lr}
 100b332:	2100      	movs	r1, #0
 100b334:	4604      	mov	r4, r0
 100b336:	f006 f9cf 	bl	10116d8 <__call_exitprocs>
 100b33a:	f246 73f8 	movw	r3, #26616	; 0x67f8
 100b33e:	f2c0 1305 	movt	r3, #261	; 0x105
 100b342:	6818      	ldr	r0, [r3, #0]
 100b344:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 100b346:	b103      	cbz	r3, 100b34a <exit+0x1a>
 100b348:	4798      	blx	r3
 100b34a:	4620      	mov	r0, r4
 100b34c:	f00b ea0a 	blx	1016764 <_exit>

0100b350 <__libc_fini_array>:
 100b350:	b538      	push	{r3, r4, r5, lr}
 100b352:	f240 0410 	movw	r4, #16
 100b356:	f240 050c 	movw	r5, #12
 100b35a:	f2c0 1406 	movt	r4, #262	; 0x106
 100b35e:	f2c0 1506 	movt	r5, #262	; 0x106
 100b362:	1b64      	subs	r4, r4, r5
 100b364:	10a4      	asrs	r4, r4, #2
 100b366:	d007      	beq.n	100b378 <__libc_fini_array+0x28>
 100b368:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 100b36c:	3c01      	subs	r4, #1
 100b36e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 100b372:	4798      	blx	r3
 100b374:	2c00      	cmp	r4, #0
 100b376:	d1f9      	bne.n	100b36c <__libc_fini_array+0x1c>
 100b378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 100b37c:	f00b ba28 	b.w	10167d0 <_fini>

0100b380 <__libc_init_array>:
 100b380:	b570      	push	{r4, r5, r6, lr}
 100b382:	f240 0608 	movw	r6, #8
 100b386:	f240 0508 	movw	r5, #8
 100b38a:	f2c0 1606 	movt	r6, #262	; 0x106
 100b38e:	f2c0 1506 	movt	r5, #262	; 0x106
 100b392:	1b76      	subs	r6, r6, r5
 100b394:	10b6      	asrs	r6, r6, #2
 100b396:	d006      	beq.n	100b3a6 <__libc_init_array+0x26>
 100b398:	2400      	movs	r4, #0
 100b39a:	3401      	adds	r4, #1
 100b39c:	f855 3b04 	ldr.w	r3, [r5], #4
 100b3a0:	4798      	blx	r3
 100b3a2:	42a6      	cmp	r6, r4
 100b3a4:	d1f9      	bne.n	100b39a <__libc_init_array+0x1a>
 100b3a6:	f240 060c 	movw	r6, #12
 100b3aa:	f240 0508 	movw	r5, #8
 100b3ae:	f2c0 1606 	movt	r6, #262	; 0x106
 100b3b2:	f2c0 1506 	movt	r5, #262	; 0x106
 100b3b6:	1b76      	subs	r6, r6, r5
 100b3b8:	f00b fa04 	bl	10167c4 <_init>
 100b3bc:	10b6      	asrs	r6, r6, #2
 100b3be:	d006      	beq.n	100b3ce <__libc_init_array+0x4e>
 100b3c0:	2400      	movs	r4, #0
 100b3c2:	3401      	adds	r4, #1
 100b3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 100b3c8:	4798      	blx	r3
 100b3ca:	42a6      	cmp	r6, r4
 100b3cc:	d1f9      	bne.n	100b3c2 <__libc_init_array+0x42>
 100b3ce:	bd70      	pop	{r4, r5, r6, pc}

0100b3d0 <currentlocale>:
 100b3d0:	4919      	ldr	r1, [pc, #100]	; (100b438 <currentlocale+0x68>)
 100b3d2:	f240 0048 	movw	r0, #72	; 0x48
 100b3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100b3d8:	f2c0 1006 	movt	r0, #262	; 0x106
 100b3dc:	f101 0520 	add.w	r5, r1, #32
 100b3e0:	f002 f8fc 	bl	100d5dc <strcpy>
 100b3e4:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 100b3e8:	f1a5 0720 	sub.w	r7, r5, #32
 100b3ec:	462c      	mov	r4, r5
 100b3ee:	4621      	mov	r1, r4
 100b3f0:	4638      	mov	r0, r7
 100b3f2:	f001 ff89 	bl	100d308 <strcmp>
 100b3f6:	3420      	adds	r4, #32
 100b3f8:	b930      	cbnz	r0, 100b408 <currentlocale+0x38>
 100b3fa:	42b4      	cmp	r4, r6
 100b3fc:	d1f7      	bne.n	100b3ee <currentlocale+0x1e>
 100b3fe:	f240 0048 	movw	r0, #72	; 0x48
 100b402:	f2c0 1006 	movt	r0, #262	; 0x106
 100b406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100b408:	f249 675c 	movw	r7, #38492	; 0x965c
 100b40c:	f240 0448 	movw	r4, #72	; 0x48
 100b410:	f2c0 1705 	movt	r7, #261	; 0x105
 100b414:	f2c0 1406 	movt	r4, #262	; 0x106
 100b418:	4639      	mov	r1, r7
 100b41a:	4620      	mov	r0, r4
 100b41c:	f001 fed6 	bl	100d1cc <strcat>
 100b420:	4629      	mov	r1, r5
 100b422:	4620      	mov	r0, r4
 100b424:	3520      	adds	r5, #32
 100b426:	f001 fed1 	bl	100d1cc <strcat>
 100b42a:	42b5      	cmp	r5, r6
 100b42c:	d1f4      	bne.n	100b418 <currentlocale+0x48>
 100b42e:	f240 0048 	movw	r0, #72	; 0x48
 100b432:	f2c0 1006 	movt	r0, #262	; 0x106
 100b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100b438:	0105a080 	.word	0x0105a080

0100b43c <__loadlocale>:
 100b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100b440:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 100b444:	b08d      	sub	sp, #52	; 0x34
 100b446:	460f      	mov	r7, r1
 100b448:	4606      	mov	r6, r0
 100b44a:	4629      	mov	r1, r5
 100b44c:	4610      	mov	r0, r2
 100b44e:	4614      	mov	r4, r2
 100b450:	f001 ff5a 	bl	100d308 <strcmp>
 100b454:	b918      	cbnz	r0, 100b45e <__loadlocale+0x22>
 100b456:	4628      	mov	r0, r5
 100b458:	b00d      	add	sp, #52	; 0x34
 100b45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b45e:	f249 6160 	movw	r1, #38496	; 0x9660
 100b462:	4620      	mov	r0, r4
 100b464:	f2c0 1105 	movt	r1, #261	; 0x105
 100b468:	f001 ff4e 	bl	100d308 <strcmp>
 100b46c:	2800      	cmp	r0, #0
 100b46e:	f000 809f 	beq.w	100b5b0 <__loadlocale+0x174>
 100b472:	f249 6168 	movw	r1, #38504	; 0x9668
 100b476:	4620      	mov	r0, r4
 100b478:	f2c0 1105 	movt	r1, #261	; 0x105
 100b47c:	f001 ff44 	bl	100d308 <strcmp>
 100b480:	4680      	mov	r8, r0
 100b482:	2800      	cmp	r0, #0
 100b484:	f000 808a 	beq.w	100b59c <__loadlocale+0x160>
 100b488:	7823      	ldrb	r3, [r4, #0]
 100b48a:	2b43      	cmp	r3, #67	; 0x43
 100b48c:	f000 8098 	beq.w	100b5c0 <__loadlocale+0x184>
 100b490:	3b61      	subs	r3, #97	; 0x61
 100b492:	2b19      	cmp	r3, #25
 100b494:	d87d      	bhi.n	100b592 <__loadlocale+0x156>
 100b496:	7863      	ldrb	r3, [r4, #1]
 100b498:	3b61      	subs	r3, #97	; 0x61
 100b49a:	2b19      	cmp	r3, #25
 100b49c:	d879      	bhi.n	100b592 <__loadlocale+0x156>
 100b49e:	78a3      	ldrb	r3, [r4, #2]
 100b4a0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 100b4a4:	2a19      	cmp	r2, #25
 100b4a6:	bf8e      	itee	hi
 100b4a8:	f104 0802 	addhi.w	r8, r4, #2
 100b4ac:	f104 0803 	addls.w	r8, r4, #3
 100b4b0:	78e3      	ldrbls	r3, [r4, #3]
 100b4b2:	2b5f      	cmp	r3, #95	; 0x5f
 100b4b4:	f000 80a0 	beq.w	100b5f8 <__loadlocale+0x1bc>
 100b4b8:	2b2e      	cmp	r3, #46	; 0x2e
 100b4ba:	f000 827c 	beq.w	100b9b6 <__loadlocale+0x57a>
 100b4be:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 100b4c2:	d166      	bne.n	100b592 <__loadlocale+0x156>
 100b4c4:	f10d 0910 	add.w	r9, sp, #16
 100b4c8:	f249 6174 	movw	r1, #38516	; 0x9674
 100b4cc:	f2c0 1105 	movt	r1, #261	; 0x105
 100b4d0:	4648      	mov	r0, r9
 100b4d2:	f002 f883 	bl	100d5dc <strcpy>
 100b4d6:	f898 3000 	ldrb.w	r3, [r8]
 100b4da:	2b40      	cmp	r3, #64	; 0x40
 100b4dc:	f000 828a 	beq.w	100b9f4 <__loadlocale+0x5b8>
 100b4e0:	f04f 0800 	mov.w	r8, #0
 100b4e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 100b4e8:	3b41      	subs	r3, #65	; 0x41
 100b4ea:	2b34      	cmp	r3, #52	; 0x34
 100b4ec:	d851      	bhi.n	100b592 <__loadlocale+0x156>
 100b4ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 100b4f2:	019c      	.short	0x019c
 100b4f4:	016f0050 	.word	0x016f0050
 100b4f8:	01d10050 	.word	0x01d10050
 100b4fc:	01ae0050 	.word	0x01ae0050
 100b500:	01fd0050 	.word	0x01fd0050
 100b504:	01330154 	.word	0x01330154
 100b508:	00500050 	.word	0x00500050
 100b50c:	00500050 	.word	0x00500050
 100b510:	00500121 	.word	0x00500121
 100b514:	01060050 	.word	0x01060050
 100b518:	009200c6 	.word	0x009200c6
 100b51c:	00500050 	.word	0x00500050
 100b520:	00500050 	.word	0x00500050
 100b524:	00500050 	.word	0x00500050
 100b528:	00500050 	.word	0x00500050
 100b52c:	00500050 	.word	0x00500050
 100b530:	019c0050 	.word	0x019c0050
 100b534:	016f0050 	.word	0x016f0050
 100b538:	01d10050 	.word	0x01d10050
 100b53c:	01ae0050 	.word	0x01ae0050
 100b540:	01fd0050 	.word	0x01fd0050
 100b544:	01330154 	.word	0x01330154
 100b548:	00500050 	.word	0x00500050
 100b54c:	00500050 	.word	0x00500050
 100b550:	00500121 	.word	0x00500121
 100b554:	01060050 	.word	0x01060050
 100b558:	009200c6 	.word	0x009200c6
 100b55c:	f5b0 7f56 	cmp.w	r0, #856	; 0x358
 100b560:	f300 80af 	bgt.w	100b6c2 <__loadlocale+0x286>
 100b564:	f240 3307 	movw	r3, #775	; 0x307
 100b568:	4298      	cmp	r0, r3
 100b56a:	f000 80aa 	beq.w	100b6c2 <__loadlocale+0x286>
 100b56e:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
 100b572:	f280 826a 	bge.w	100ba4a <__loadlocale+0x60e>
 100b576:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 100b57a:	f000 80a2 	beq.w	100b6c2 <__loadlocale+0x286>
 100b57e:	f240 23e1 	movw	r3, #737	; 0x2e1
 100b582:	4298      	cmp	r0, r3
 100b584:	f000 809d 	beq.w	100b6c2 <__loadlocale+0x286>
 100b588:	f240 13b5 	movw	r3, #437	; 0x1b5
 100b58c:	4298      	cmp	r0, r3
 100b58e:	f000 8098 	beq.w	100b6c2 <__loadlocale+0x286>
 100b592:	2500      	movs	r5, #0
 100b594:	4628      	mov	r0, r5
 100b596:	b00d      	add	sp, #52	; 0x34
 100b598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b59c:	f10d 0910 	add.w	r9, sp, #16
 100b5a0:	f249 616c 	movw	r1, #38508	; 0x966c
 100b5a4:	f2c0 1105 	movt	r1, #261	; 0x105
 100b5a8:	4648      	mov	r0, r9
 100b5aa:	f002 f817 	bl	100d5dc <strcpy>
 100b5ae:	e799      	b.n	100b4e4 <__loadlocale+0xa8>
 100b5b0:	f249 6168 	movw	r1, #38504	; 0x9668
 100b5b4:	4620      	mov	r0, r4
 100b5b6:	f2c0 1105 	movt	r1, #261	; 0x105
 100b5ba:	f002 f80f 	bl	100d5dc <strcpy>
 100b5be:	e758      	b.n	100b472 <__loadlocale+0x36>
 100b5c0:	7863      	ldrb	r3, [r4, #1]
 100b5c2:	3b2d      	subs	r3, #45	; 0x2d
 100b5c4:	2b01      	cmp	r3, #1
 100b5c6:	d8e4      	bhi.n	100b592 <__loadlocale+0x156>
 100b5c8:	f104 0802 	add.w	r8, r4, #2
 100b5cc:	f10d 0910 	add.w	r9, sp, #16
 100b5d0:	4641      	mov	r1, r8
 100b5d2:	4648      	mov	r0, r9
 100b5d4:	f002 f802 	bl	100d5dc <strcpy>
 100b5d8:	4648      	mov	r0, r9
 100b5da:	2140      	movs	r1, #64	; 0x40
 100b5dc:	f001 fe16 	bl	100d20c <strchr>
 100b5e0:	b108      	cbz	r0, 100b5e6 <__loadlocale+0x1aa>
 100b5e2:	2300      	movs	r3, #0
 100b5e4:	7003      	strb	r3, [r0, #0]
 100b5e6:	4648      	mov	r0, r9
 100b5e8:	f002 f88a 	bl	100d700 <strlen>
 100b5ec:	4480      	add	r8, r0
 100b5ee:	f1b8 0f00 	cmp.w	r8, #0
 100b5f2:	f43f af75 	beq.w	100b4e0 <__loadlocale+0xa4>
 100b5f6:	e76e      	b.n	100b4d6 <__loadlocale+0x9a>
 100b5f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 100b5fc:	3b41      	subs	r3, #65	; 0x41
 100b5fe:	2b19      	cmp	r3, #25
 100b600:	d8c7      	bhi.n	100b592 <__loadlocale+0x156>
 100b602:	f898 3002 	ldrb.w	r3, [r8, #2]
 100b606:	3b41      	subs	r3, #65	; 0x41
 100b608:	2b19      	cmp	r3, #25
 100b60a:	d8c2      	bhi.n	100b592 <__loadlocale+0x156>
 100b60c:	f898 3003 	ldrb.w	r3, [r8, #3]
 100b610:	f108 0803 	add.w	r8, r8, #3
 100b614:	e750      	b.n	100b4b8 <__loadlocale+0x7c>
 100b616:	f249 618c 	movw	r1, #38540	; 0x968c
 100b61a:	4648      	mov	r0, r9
 100b61c:	f2c0 1105 	movt	r1, #261	; 0x105
 100b620:	f001 fdb2 	bl	100d188 <strcasecmp>
 100b624:	b140      	cbz	r0, 100b638 <__loadlocale+0x1fc>
 100b626:	f249 6194 	movw	r1, #38548	; 0x9694
 100b62a:	4648      	mov	r0, r9
 100b62c:	f2c0 1105 	movt	r1, #261	; 0x105
 100b630:	f001 fdaa 	bl	100d188 <strcasecmp>
 100b634:	2800      	cmp	r0, #0
 100b636:	d1ac      	bne.n	100b592 <__loadlocale+0x156>
 100b638:	f249 618c 	movw	r1, #38540	; 0x968c
 100b63c:	4648      	mov	r0, r9
 100b63e:	f2c0 1105 	movt	r1, #261	; 0x105
 100b642:	f24c 4a89 	movw	sl, #50313	; 0xc489
 100b646:	f241 4b25 	movw	fp, #5157	; 0x1425
 100b64a:	f2c0 1a00 	movt	sl, #256	; 0x100
 100b64e:	f2c0 1b01 	movt	fp, #257	; 0x101
 100b652:	f001 ffc3 	bl	100d5dc <strcpy>
 100b656:	2306      	movs	r3, #6
 100b658:	2f02      	cmp	r7, #2
 100b65a:	f000 81af 	beq.w	100b9bc <__loadlocale+0x580>
 100b65e:	2f06      	cmp	r7, #6
 100b660:	d104      	bne.n	100b66c <__loadlocale+0x230>
 100b662:	4649      	mov	r1, r9
 100b664:	f506 70a5 	add.w	r0, r6, #330	; 0x14a
 100b668:	f001 ffb8 	bl	100d5dc <strcpy>
 100b66c:	4621      	mov	r1, r4
 100b66e:	4628      	mov	r0, r5
 100b670:	f001 ffb4 	bl	100d5dc <strcpy>
 100b674:	4605      	mov	r5, r0
 100b676:	4628      	mov	r0, r5
 100b678:	b00d      	add	sp, #52	; 0x34
 100b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100b67e:	f249 7114 	movw	r1, #38676	; 0x9714
 100b682:	2203      	movs	r2, #3
 100b684:	f2c0 1105 	movt	r1, #261	; 0x105
 100b688:	4648      	mov	r0, r9
 100b68a:	f002 f8a7 	bl	100d7dc <strncasecmp>
 100b68e:	2800      	cmp	r0, #0
 100b690:	f47f af7f 	bne.w	100b592 <__loadlocale+0x156>
 100b694:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100b698:	f249 7118 	movw	r1, #38680	; 0x9718
 100b69c:	f2c0 1105 	movt	r1, #261	; 0x105
 100b6a0:	2b2d      	cmp	r3, #45	; 0x2d
 100b6a2:	bf0c      	ite	eq
 100b6a4:	a805      	addeq	r0, sp, #20
 100b6a6:	f10d 0013 	addne.w	r0, sp, #19
 100b6aa:	f001 fd6d 	bl	100d188 <strcasecmp>
 100b6ae:	2800      	cmp	r0, #0
 100b6b0:	f47f af6f 	bne.w	100b592 <__loadlocale+0x156>
 100b6b4:	f249 711c 	movw	r1, #38684	; 0x971c
 100b6b8:	4648      	mov	r0, r9
 100b6ba:	f2c0 1105 	movt	r1, #261	; 0x105
 100b6be:	f001 ff8d 	bl	100d5dc <strcpy>
 100b6c2:	2f02      	cmp	r7, #2
 100b6c4:	d1cb      	bne.n	100b65e <__loadlocale+0x222>
 100b6c6:	4649      	mov	r1, r9
 100b6c8:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 100b6cc:	f001 ff86 	bl	100d5dc <strcpy>
 100b6d0:	4630      	mov	r0, r6
 100b6d2:	4649      	mov	r1, r9
 100b6d4:	f241 420d 	movw	r2, #5133	; 0x140d
 100b6d8:	f24c 4365 	movw	r3, #50277	; 0xc465
 100b6dc:	f2c0 1201 	movt	r2, #257	; 0x101
 100b6e0:	f2c0 1300 	movt	r3, #256	; 0x100
 100b6e4:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 100b6e8:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 100b6ec:	2201      	movs	r2, #1
 100b6ee:	f886 2128 	strb.w	r2, [r6, #296]	; 0x128
 100b6f2:	f006 f85f 	bl	10117b4 <__set_ctype>
 100b6f6:	2000      	movs	r0, #0
 100b6f8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
 100b6fc:	e7b6      	b.n	100b66c <__loadlocale+0x230>
 100b6fe:	f249 61b0 	movw	r1, #38576	; 0x96b0
 100b702:	4648      	mov	r0, r9
 100b704:	f2c0 1105 	movt	r1, #261	; 0x105
 100b708:	f001 fd3e 	bl	100d188 <strcasecmp>
 100b70c:	2800      	cmp	r0, #0
 100b70e:	f47f af40 	bne.w	100b592 <__loadlocale+0x156>
 100b712:	f249 61b0 	movw	r1, #38576	; 0x96b0
 100b716:	4648      	mov	r0, r9
 100b718:	f2c0 1105 	movt	r1, #261	; 0x105
 100b71c:	f24c 6a91 	movw	sl, #50833	; 0xc691
 100b720:	f001 ff5c 	bl	100d5dc <strcpy>
 100b724:	f241 4bc9 	movw	fp, #5321	; 0x14c9
 100b728:	f2c0 1a00 	movt	sl, #256	; 0x100
 100b72c:	2302      	movs	r3, #2
 100b72e:	f2c0 1b01 	movt	fp, #257	; 0x101
 100b732:	e791      	b.n	100b658 <__loadlocale+0x21c>
 100b734:	f249 7104 	movw	r1, #38660	; 0x9704
 100b738:	4648      	mov	r0, r9
 100b73a:	f2c0 1105 	movt	r1, #261	; 0x105
 100b73e:	f001 fd23 	bl	100d188 <strcasecmp>
 100b742:	2800      	cmp	r0, #0
 100b744:	f47f af25 	bne.w	100b592 <__loadlocale+0x156>
 100b748:	f249 710c 	movw	r1, #38668	; 0x970c
 100b74c:	4648      	mov	r0, r9
 100b74e:	f2c0 1105 	movt	r1, #261	; 0x105
 100b752:	f001 ff43 	bl	100d5dc <strcpy>
 100b756:	e7b4      	b.n	100b6c2 <__loadlocale+0x286>
 100b758:	f249 61d4 	movw	r1, #38612	; 0x96d4
 100b75c:	2204      	movs	r2, #4
 100b75e:	f2c0 1105 	movt	r1, #261	; 0x105
 100b762:	4648      	mov	r0, r9
 100b764:	f002 f83a 	bl	100d7dc <strncasecmp>
 100b768:	2800      	cmp	r0, #0
 100b76a:	f47f af12 	bne.w	100b592 <__loadlocale+0x156>
 100b76e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 100b772:	2b2d      	cmp	r3, #45	; 0x2d
 100b774:	bf08      	it	eq
 100b776:	f89d 3015 	ldrbeq.w	r3, [sp, #21]
 100b77a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100b77e:	2b52      	cmp	r3, #82	; 0x52
 100b780:	f000 8172 	beq.w	100ba68 <__loadlocale+0x62c>
 100b784:	2b55      	cmp	r3, #85	; 0x55
 100b786:	f47f af04 	bne.w	100b592 <__loadlocale+0x156>
 100b78a:	f249 61e4 	movw	r1, #38628	; 0x96e4
 100b78e:	4648      	mov	r0, r9
 100b790:	f2c0 1105 	movt	r1, #261	; 0x105
 100b794:	f001 ff22 	bl	100d5dc <strcpy>
 100b798:	e793      	b.n	100b6c2 <__loadlocale+0x286>
 100b79a:	f249 619c 	movw	r1, #38556	; 0x969c
 100b79e:	4648      	mov	r0, r9
 100b7a0:	f2c0 1105 	movt	r1, #261	; 0x105
 100b7a4:	f001 fcf0 	bl	100d188 <strcasecmp>
 100b7a8:	2800      	cmp	r0, #0
 100b7aa:	f47f aef2 	bne.w	100b592 <__loadlocale+0x156>
 100b7ae:	f249 619c 	movw	r1, #38556	; 0x969c
 100b7b2:	4648      	mov	r0, r9
 100b7b4:	f2c0 1105 	movt	r1, #261	; 0x105
 100b7b8:	f24c 7acd 	movw	sl, #51149	; 0xc7cd
 100b7bc:	f001 ff0e 	bl	100d5dc <strcpy>
 100b7c0:	f241 5b8d 	movw	fp, #5517	; 0x158d
 100b7c4:	f2c0 1a00 	movt	sl, #256	; 0x100
 100b7c8:	2308      	movs	r3, #8
 100b7ca:	f2c0 1b01 	movt	fp, #257	; 0x101
 100b7ce:	e743      	b.n	100b658 <__loadlocale+0x21c>
 100b7d0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 100b7d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100b7d8:	2b50      	cmp	r3, #80	; 0x50
 100b7da:	f47f aeda 	bne.w	100b592 <__loadlocale+0x156>
 100b7de:	2202      	movs	r2, #2
 100b7e0:	f249 61d0 	movw	r1, #38608	; 0x96d0
 100b7e4:	4648      	mov	r0, r9
 100b7e6:	f2c0 1105 	movt	r1, #261	; 0x105
 100b7ea:	f002 f877 	bl	100d8dc <strncpy>
 100b7ee:	220a      	movs	r2, #10
 100b7f0:	a903      	add	r1, sp, #12
 100b7f2:	f10d 0012 	add.w	r0, sp, #18
 100b7f6:	f002 f965 	bl	100dac4 <strtol>
 100b7fa:	9b03      	ldr	r3, [sp, #12]
 100b7fc:	781b      	ldrb	r3, [r3, #0]
 100b7fe:	2b00      	cmp	r3, #0
 100b800:	f47f aec7 	bne.w	100b592 <__loadlocale+0x156>
 100b804:	f240 335a 	movw	r3, #858	; 0x35a
 100b808:	4298      	cmp	r0, r3
 100b80a:	f77f aea7 	ble.w	100b55c <__loadlocale+0x120>
 100b80e:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
 100b812:	f040 80fc 	bne.w	100ba0e <__loadlocale+0x5d2>
 100b816:	f24c 6a91 	movw	sl, #50833	; 0xc691
 100b81a:	f241 4bc9 	movw	fp, #5321	; 0x14c9
 100b81e:	f2c0 1a00 	movt	sl, #256	; 0x100
 100b822:	f2c0 1b01 	movt	fp, #257	; 0x101
 100b826:	2302      	movs	r3, #2
 100b828:	e716      	b.n	100b658 <__loadlocale+0x21c>
 100b82a:	f249 616c 	movw	r1, #38508	; 0x966c
 100b82e:	4648      	mov	r0, r9
 100b830:	f2c0 1105 	movt	r1, #261	; 0x105
 100b834:	f001 fca8 	bl	100d188 <strcasecmp>
 100b838:	2800      	cmp	r0, #0
 100b83a:	f47f aeaa 	bne.w	100b592 <__loadlocale+0x156>
 100b83e:	f249 616c 	movw	r1, #38508	; 0x966c
 100b842:	4648      	mov	r0, r9
 100b844:	f2c0 1105 	movt	r1, #261	; 0x105
 100b848:	f001 fec8 	bl	100d5dc <strcpy>
 100b84c:	e739      	b.n	100b6c2 <__loadlocale+0x286>
 100b84e:	f249 61ec 	movw	r1, #38636	; 0x96ec
 100b852:	2208      	movs	r2, #8
 100b854:	f2c0 1105 	movt	r1, #261	; 0x105
 100b858:	4648      	mov	r0, r9
 100b85a:	f001 ffbf 	bl	100d7dc <strncasecmp>
 100b85e:	2800      	cmp	r0, #0
 100b860:	f47f ae97 	bne.w	100b592 <__loadlocale+0x156>
 100b864:	f89d 3018 	ldrb.w	r3, [sp, #24]
 100b868:	f249 61f8 	movw	r1, #38648	; 0x96f8
 100b86c:	f2c0 1105 	movt	r1, #261	; 0x105
 100b870:	2b2d      	cmp	r3, #45	; 0x2d
 100b872:	bf0c      	ite	eq
 100b874:	f10d 0019 	addeq.w	r0, sp, #25
 100b878:	a806      	addne	r0, sp, #24
 100b87a:	f001 fc85 	bl	100d188 <strcasecmp>
 100b87e:	2800      	cmp	r0, #0
 100b880:	f47f ae87 	bne.w	100b592 <__loadlocale+0x156>
 100b884:	f249 61fc 	movw	r1, #38652	; 0x96fc
 100b888:	4648      	mov	r0, r9
 100b88a:	f2c0 1105 	movt	r1, #261	; 0x105
 100b88e:	f001 fea5 	bl	100d5dc <strcpy>
 100b892:	e716      	b.n	100b6c2 <__loadlocale+0x286>
 100b894:	f249 61a0 	movw	r1, #38560	; 0x96a0
 100b898:	2203      	movs	r2, #3
 100b89a:	f2c0 1105 	movt	r1, #261	; 0x105
 100b89e:	4648      	mov	r0, r9
 100b8a0:	f001 ff9c 	bl	100d7dc <strncasecmp>
 100b8a4:	2800      	cmp	r0, #0
 100b8a6:	f47f ae74 	bne.w	100b592 <__loadlocale+0x156>
 100b8aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100b8ae:	f249 61a4 	movw	r1, #38564	; 0x96a4
 100b8b2:	f2c0 1105 	movt	r1, #261	; 0x105
 100b8b6:	2b2d      	cmp	r3, #45	; 0x2d
 100b8b8:	bf0c      	ite	eq
 100b8ba:	a805      	addeq	r0, sp, #20
 100b8bc:	f10d 0013 	addne.w	r0, sp, #19
 100b8c0:	f001 fc62 	bl	100d188 <strcasecmp>
 100b8c4:	2800      	cmp	r0, #0
 100b8c6:	f47f ae64 	bne.w	100b592 <__loadlocale+0x156>
 100b8ca:	f249 61a8 	movw	r1, #38568	; 0x96a8
 100b8ce:	4648      	mov	r0, r9
 100b8d0:	f2c0 1105 	movt	r1, #261	; 0x105
 100b8d4:	f24c 7a15 	movw	sl, #50965	; 0xc715
 100b8d8:	f001 fe80 	bl	100d5dc <strcpy>
 100b8dc:	f241 5b1d 	movw	fp, #5405	; 0x151d
 100b8e0:	f2c0 1a00 	movt	sl, #256	; 0x100
 100b8e4:	2303      	movs	r3, #3
 100b8e6:	f2c0 1b01 	movt	fp, #257	; 0x101
 100b8ea:	e6b5      	b.n	100b658 <__loadlocale+0x21c>
 100b8ec:	f249 61b8 	movw	r1, #38584	; 0x96b8
 100b8f0:	2203      	movs	r2, #3
 100b8f2:	f2c0 1105 	movt	r1, #261	; 0x105
 100b8f6:	4648      	mov	r0, r9
 100b8f8:	f001 ff70 	bl	100d7dc <strncasecmp>
 100b8fc:	2800      	cmp	r0, #0
 100b8fe:	f47f ae48 	bne.w	100b592 <__loadlocale+0x156>
 100b902:	f89d 3013 	ldrb.w	r3, [sp, #19]
 100b906:	f249 61bc 	movw	r1, #38588	; 0x96bc
 100b90a:	2204      	movs	r2, #4
 100b90c:	f2c0 1105 	movt	r1, #261	; 0x105
 100b910:	2b2d      	cmp	r3, #45	; 0x2d
 100b912:	bf0c      	ite	eq
 100b914:	f10d 0814 	addeq.w	r8, sp, #20
 100b918:	f10d 0813 	addne.w	r8, sp, #19
 100b91c:	4640      	mov	r0, r8
 100b91e:	f001 ff5d 	bl	100d7dc <strncasecmp>
 100b922:	2800      	cmp	r0, #0
 100b924:	f47f ae35 	bne.w	100b592 <__loadlocale+0x156>
 100b928:	f898 3004 	ldrb.w	r3, [r8, #4]
 100b92c:	220a      	movs	r2, #10
 100b92e:	a903      	add	r1, sp, #12
 100b930:	2b2d      	cmp	r3, #45	; 0x2d
 100b932:	bf14      	ite	ne
 100b934:	f108 0004 	addne.w	r0, r8, #4
 100b938:	f108 0005 	addeq.w	r0, r8, #5
 100b93c:	f002 f8c2 	bl	100dac4 <strtol>
 100b940:	f1a0 030c 	sub.w	r3, r0, #12
 100b944:	1e42      	subs	r2, r0, #1
 100b946:	fab3 f383 	clz	r3, r3
 100b94a:	4680      	mov	r8, r0
 100b94c:	095b      	lsrs	r3, r3, #5
 100b94e:	2a0f      	cmp	r2, #15
 100b950:	bf88      	it	hi
 100b952:	f043 0301 	orrhi.w	r3, r3, #1
 100b956:	2b00      	cmp	r3, #0
 100b958:	f47f ae1b 	bne.w	100b592 <__loadlocale+0x156>
 100b95c:	9b03      	ldr	r3, [sp, #12]
 100b95e:	781b      	ldrb	r3, [r3, #0]
 100b960:	2b00      	cmp	r3, #0
 100b962:	f47f ae16 	bne.w	100b592 <__loadlocale+0x156>
 100b966:	f249 61c4 	movw	r1, #38596	; 0x96c4
 100b96a:	4648      	mov	r0, r9
 100b96c:	f2c0 1105 	movt	r1, #261	; 0x105
 100b970:	f001 fe34 	bl	100d5dc <strcpy>
 100b974:	f246 6267 	movw	r2, #26215	; 0x6667
 100b978:	f2c6 6266 	movt	r2, #26214	; 0x6666
 100b97c:	f1b8 0f0a 	cmp.w	r8, #10
 100b980:	f04f 000a 	mov.w	r0, #10
 100b984:	bfc8      	it	gt
 100b986:	f10d 011a 	addgt.w	r1, sp, #26
 100b98a:	fb82 c208 	smull	ip, r2, r2, r8
 100b98e:	bfcc      	ite	gt
 100b990:	2331      	movgt	r3, #49	; 0x31
 100b992:	f10d 0119 	addle.w	r1, sp, #25
 100b996:	f04f 0c00 	mov.w	ip, #0
 100b99a:	bfc8      	it	gt
 100b99c:	f88d 3019 	strbgt.w	r3, [sp, #25]
 100b9a0:	ea4f 73e8 	mov.w	r3, r8, asr #31
 100b9a4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 100b9a8:	f881 c001 	strb.w	ip, [r1, #1]
 100b9ac:	fb00 8313 	mls	r3, r0, r3, r8
 100b9b0:	3330      	adds	r3, #48	; 0x30
 100b9b2:	700b      	strb	r3, [r1, #0]
 100b9b4:	e685      	b.n	100b6c2 <__loadlocale+0x286>
 100b9b6:	f108 0801 	add.w	r8, r8, #1
 100b9ba:	e607      	b.n	100b5cc <__loadlocale+0x190>
 100b9bc:	4649      	mov	r1, r9
 100b9be:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 100b9c2:	9301      	str	r3, [sp, #4]
 100b9c4:	f001 fe0a 	bl	100d5dc <strcpy>
 100b9c8:	9b01      	ldr	r3, [sp, #4]
 100b9ca:	4649      	mov	r1, r9
 100b9cc:	f8c6 b0e0 	str.w	fp, [r6, #224]	; 0xe0
 100b9d0:	4630      	mov	r0, r6
 100b9d2:	f8c6 a0e4 	str.w	sl, [r6, #228]	; 0xe4
 100b9d6:	f088 0801 	eor.w	r8, r8, #1
 100b9da:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
 100b9de:	f005 fee9 	bl	10117b4 <__set_ctype>
 100b9e2:	f018 0801 	ands.w	r8, r8, #1
 100b9e6:	d067      	beq.n	100bab8 <__loadlocale+0x67c>
 100b9e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 100b9ec:	2b55      	cmp	r3, #85	; 0x55
 100b9ee:	d043      	beq.n	100ba78 <__loadlocale+0x63c>
 100b9f0:	2001      	movs	r0, #1
 100b9f2:	e681      	b.n	100b6f8 <__loadlocale+0x2bc>
 100b9f4:	f108 0001 	add.w	r0, r8, #1
 100b9f8:	f249 6180 	movw	r1, #38528	; 0x9680
 100b9fc:	f2c0 1105 	movt	r1, #261	; 0x105
 100ba00:	f001 fc82 	bl	100d308 <strcmp>
 100ba04:	fab0 f880 	clz	r8, r0
 100ba08:	ea4f 1858 	mov.w	r8, r8, lsr #5
 100ba0c:	e56a      	b.n	100b4e4 <__loadlocale+0xa8>
 100ba0e:	dc0f      	bgt.n	100ba30 <__loadlocale+0x5f4>
 100ba10:	f240 3362 	movw	r3, #866	; 0x362
 100ba14:	4298      	cmp	r0, r3
 100ba16:	f43f ae54 	beq.w	100b6c2 <__loadlocale+0x286>
 100ba1a:	f240 336a 	movw	r3, #874	; 0x36a
 100ba1e:	4298      	cmp	r0, r3
 100ba20:	f43f ae4f 	beq.w	100b6c2 <__loadlocale+0x286>
 100ba24:	f240 335e 	movw	r3, #862	; 0x35e
 100ba28:	4298      	cmp	r0, r3
 100ba2a:	f47f adb2 	bne.w	100b592 <__loadlocale+0x156>
 100ba2e:	e648      	b.n	100b6c2 <__loadlocale+0x286>
 100ba30:	f240 4365 	movw	r3, #1125	; 0x465
 100ba34:	4298      	cmp	r0, r3
 100ba36:	f43f ae44 	beq.w	100b6c2 <__loadlocale+0x286>
 100ba3a:	f6ff adaa 	blt.w	100b592 <__loadlocale+0x156>
 100ba3e:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
 100ba42:	2808      	cmp	r0, #8
 100ba44:	f63f ada5 	bhi.w	100b592 <__loadlocale+0x156>
 100ba48:	e63b      	b.n	100b6c2 <__loadlocale+0x286>
 100ba4a:	f5b0 7f55 	cmp.w	r0, #852	; 0x354
 100ba4e:	f43f ae38 	beq.w	100b6c2 <__loadlocale+0x286>
 100ba52:	f240 3357 	movw	r3, #855	; 0x357
 100ba56:	4298      	cmp	r0, r3
 100ba58:	f43f ae33 	beq.w	100b6c2 <__loadlocale+0x286>
 100ba5c:	f240 3352 	movw	r3, #850	; 0x352
 100ba60:	4298      	cmp	r0, r3
 100ba62:	f47f ad96 	bne.w	100b592 <__loadlocale+0x156>
 100ba66:	e62c      	b.n	100b6c2 <__loadlocale+0x286>
 100ba68:	f249 61dc 	movw	r1, #38620	; 0x96dc
 100ba6c:	4648      	mov	r0, r9
 100ba6e:	f2c0 1105 	movt	r1, #261	; 0x105
 100ba72:	f001 fdb3 	bl	100d5dc <strcpy>
 100ba76:	e624      	b.n	100b6c2 <__loadlocale+0x286>
 100ba78:	f249 7124 	movw	r1, #38692	; 0x9724
 100ba7c:	463a      	mov	r2, r7
 100ba7e:	f2c0 1105 	movt	r1, #261	; 0x105
 100ba82:	4620      	mov	r0, r4
 100ba84:	f001 fed8 	bl	100d838 <strncmp>
 100ba88:	2800      	cmp	r0, #0
 100ba8a:	d0b1      	beq.n	100b9f0 <__loadlocale+0x5b4>
 100ba8c:	f249 7128 	movw	r1, #38696	; 0x9728
 100ba90:	463a      	mov	r2, r7
 100ba92:	f2c0 1105 	movt	r1, #261	; 0x105
 100ba96:	4620      	mov	r0, r4
 100ba98:	f001 fece 	bl	100d838 <strncmp>
 100ba9c:	2800      	cmp	r0, #0
 100ba9e:	d0a7      	beq.n	100b9f0 <__loadlocale+0x5b4>
 100baa0:	463a      	mov	r2, r7
 100baa2:	f249 712c 	movw	r1, #38700	; 0x972c
 100baa6:	4620      	mov	r0, r4
 100baa8:	f2c0 1105 	movt	r1, #261	; 0x105
 100baac:	f001 fec4 	bl	100d838 <strncmp>
 100bab0:	fab0 f080 	clz	r0, r0
 100bab4:	0940      	lsrs	r0, r0, #5
 100bab6:	e61f      	b.n	100b6f8 <__loadlocale+0x2bc>
 100bab8:	4640      	mov	r0, r8
 100baba:	e61d      	b.n	100b6f8 <__loadlocale+0x2bc>

0100babc <__get_locale_env>:
 100babc:	b538      	push	{r3, r4, r5, lr}
 100babe:	460d      	mov	r5, r1
 100bac0:	f249 7130 	movw	r1, #38704	; 0x9730
 100bac4:	f2c0 1105 	movt	r1, #261	; 0x105
 100bac8:	4604      	mov	r4, r0
 100baca:	f007 faf7 	bl	10130bc <_getenv_r>
 100bace:	b108      	cbz	r0, 100bad4 <__get_locale_env+0x18>
 100bad0:	7803      	ldrb	r3, [r0, #0]
 100bad2:	b9a3      	cbnz	r3, 100bafe <__get_locale_env+0x42>
 100bad4:	f246 73fc 	movw	r3, #26620	; 0x67fc
 100bad8:	f2c0 1305 	movt	r3, #261	; 0x105
 100badc:	4620      	mov	r0, r4
 100bade:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 100bae2:	f007 faeb 	bl	10130bc <_getenv_r>
 100bae6:	b108      	cbz	r0, 100baec <__get_locale_env+0x30>
 100bae8:	7803      	ldrb	r3, [r0, #0]
 100baea:	b943      	cbnz	r3, 100bafe <__get_locale_env+0x42>
 100baec:	f249 7138 	movw	r1, #38712	; 0x9738
 100baf0:	4620      	mov	r0, r4
 100baf2:	f2c0 1105 	movt	r1, #261	; 0x105
 100baf6:	f007 fae1 	bl	10130bc <_getenv_r>
 100bafa:	b908      	cbnz	r0, 100bb00 <__get_locale_env+0x44>
 100bafc:	4803      	ldr	r0, [pc, #12]	; (100bb0c <__get_locale_env+0x50>)
 100bafe:	bd38      	pop	{r3, r4, r5, pc}
 100bb00:	7802      	ldrb	r2, [r0, #0]
 100bb02:	4b02      	ldr	r3, [pc, #8]	; (100bb0c <__get_locale_env+0x50>)
 100bb04:	2a00      	cmp	r2, #0
 100bb06:	bf08      	it	eq
 100bb08:	4618      	moveq	r0, r3
 100bb0a:	bd38      	pop	{r3, r4, r5, pc}
 100bb0c:	0105a1cc 	.word	0x0105a1cc

0100bb10 <_setlocale_r>:
 100bb10:	2906      	cmp	r1, #6
 100bb12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100bb16:	4681      	mov	r9, r0
 100bb18:	b083      	sub	sp, #12
 100bb1a:	d868      	bhi.n	100bbee <_setlocale_r+0xde>
 100bb1c:	468b      	mov	fp, r1
 100bb1e:	4692      	mov	sl, r2
 100bb20:	2a00      	cmp	r2, #0
 100bb22:	f000 80a3 	beq.w	100bc6c <_setlocale_r+0x15c>
 100bb26:	f8df 8228 	ldr.w	r8, [pc, #552]	; 100bd50 <_setlocale_r+0x240>
 100bb2a:	4e86      	ldr	r6, [pc, #536]	; (100bd44 <_setlocale_r+0x234>)
 100bb2c:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
 100bb30:	4644      	mov	r4, r8
 100bb32:	4635      	mov	r5, r6
 100bb34:	4629      	mov	r1, r5
 100bb36:	4620      	mov	r0, r4
 100bb38:	3420      	adds	r4, #32
 100bb3a:	f001 fd4f 	bl	100d5dc <strcpy>
 100bb3e:	42bc      	cmp	r4, r7
 100bb40:	f105 0520 	add.w	r5, r5, #32
 100bb44:	d1f6      	bne.n	100bb34 <_setlocale_r+0x24>
 100bb46:	f89a 3000 	ldrb.w	r3, [sl]
 100bb4a:	bbb3      	cbnz	r3, 100bbba <_setlocale_r+0xaa>
 100bb4c:	f1bb 0f00 	cmp.w	fp, #0
 100bb50:	f040 8098 	bne.w	100bc84 <_setlocale_r+0x174>
 100bb54:	4645      	mov	r5, r8
 100bb56:	2401      	movs	r4, #1
 100bb58:	4621      	mov	r1, r4
 100bb5a:	4648      	mov	r0, r9
 100bb5c:	f7ff ffae 	bl	100babc <__get_locale_env>
 100bb60:	3401      	adds	r4, #1
 100bb62:	4607      	mov	r7, r0
 100bb64:	f001 fdcc 	bl	100d700 <strlen>
 100bb68:	4639      	mov	r1, r7
 100bb6a:	281f      	cmp	r0, #31
 100bb6c:	4628      	mov	r0, r5
 100bb6e:	f105 0520 	add.w	r5, r5, #32
 100bb72:	d83c      	bhi.n	100bbee <_setlocale_r+0xde>
 100bb74:	f001 fd32 	bl	100d5dc <strcpy>
 100bb78:	2c07      	cmp	r4, #7
 100bb7a:	d1ed      	bne.n	100bb58 <_setlocale_r+0x48>
 100bb7c:	4f72      	ldr	r7, [pc, #456]	; (100bd48 <_setlocale_r+0x238>)
 100bb7e:	f24a 0a60 	movw	sl, #41056	; 0xa060
 100bb82:	f2c0 1a05 	movt	sl, #261	; 0x105
 100bb86:	4645      	mov	r5, r8
 100bb88:	2401      	movs	r4, #1
 100bb8a:	46bb      	mov	fp, r7
 100bb8c:	4631      	mov	r1, r6
 100bb8e:	4658      	mov	r0, fp
 100bb90:	f001 fd24 	bl	100d5dc <strcpy>
 100bb94:	462a      	mov	r2, r5
 100bb96:	4621      	mov	r1, r4
 100bb98:	4650      	mov	r0, sl
 100bb9a:	f7ff fc4f 	bl	100b43c <__loadlocale>
 100bb9e:	f10b 0b20 	add.w	fp, fp, #32
 100bba2:	3620      	adds	r6, #32
 100bba4:	3520      	adds	r5, #32
 100bba6:	4603      	mov	r3, r0
 100bba8:	2800      	cmp	r0, #0
 100bbaa:	d07c      	beq.n	100bca6 <_setlocale_r+0x196>
 100bbac:	3401      	adds	r4, #1
 100bbae:	2c07      	cmp	r4, #7
 100bbb0:	d1ec      	bne.n	100bb8c <_setlocale_r+0x7c>
 100bbb2:	b003      	add	sp, #12
 100bbb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100bbb8:	e40a      	b.n	100b3d0 <currentlocale>
 100bbba:	f1bb 0f00 	cmp.w	fp, #0
 100bbbe:	d01e      	beq.n	100bbfe <_setlocale_r+0xee>
 100bbc0:	4650      	mov	r0, sl
 100bbc2:	f001 fd9d 	bl	100d700 <strlen>
 100bbc6:	281f      	cmp	r0, #31
 100bbc8:	d811      	bhi.n	100bbee <_setlocale_r+0xde>
 100bbca:	4c60      	ldr	r4, [pc, #384]	; (100bd4c <_setlocale_r+0x23c>)
 100bbcc:	4651      	mov	r1, sl
 100bbce:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 100bbd2:	4620      	mov	r0, r4
 100bbd4:	f001 fd02 	bl	100d5dc <strcpy>
 100bbd8:	4622      	mov	r2, r4
 100bbda:	4659      	mov	r1, fp
 100bbdc:	f24a 0060 	movw	r0, #41056	; 0xa060
 100bbe0:	f2c0 1005 	movt	r0, #261	; 0x105
 100bbe4:	b003      	add	sp, #12
 100bbe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100bbea:	f7ff bc27 	b.w	100b43c <__loadlocale>
 100bbee:	2300      	movs	r3, #0
 100bbf0:	2216      	movs	r2, #22
 100bbf2:	f8c9 2000 	str.w	r2, [r9]
 100bbf6:	4618      	mov	r0, r3
 100bbf8:	b003      	add	sp, #12
 100bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100bbfe:	212f      	movs	r1, #47	; 0x2f
 100bc00:	4650      	mov	r0, sl
 100bc02:	f001 fb03 	bl	100d20c <strchr>
 100bc06:	4604      	mov	r4, r0
 100bc08:	2800      	cmp	r0, #0
 100bc0a:	f000 808b 	beq.w	100bd24 <_setlocale_r+0x214>
 100bc0e:	7842      	ldrb	r2, [r0, #1]
 100bc10:	2a2f      	cmp	r2, #47	; 0x2f
 100bc12:	bf08      	it	eq
 100bc14:	1c43      	addeq	r3, r0, #1
 100bc16:	d104      	bne.n	100bc22 <_setlocale_r+0x112>
 100bc18:	461c      	mov	r4, r3
 100bc1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 100bc1e:	2a2f      	cmp	r2, #47	; 0x2f
 100bc20:	d0fa      	beq.n	100bc18 <_setlocale_r+0x108>
 100bc22:	2a00      	cmp	r2, #0
 100bc24:	d0e3      	beq.n	100bbee <_setlocale_r+0xde>
 100bc26:	46c3      	mov	fp, r8
 100bc28:	2501      	movs	r5, #1
 100bc2a:	eba4 020a 	sub.w	r2, r4, sl
 100bc2e:	2a1f      	cmp	r2, #31
 100bc30:	dcdd      	bgt.n	100bbee <_setlocale_r+0xde>
 100bc32:	3201      	adds	r2, #1
 100bc34:	4651      	mov	r1, sl
 100bc36:	4658      	mov	r0, fp
 100bc38:	3501      	adds	r5, #1
 100bc3a:	f001 fd31 	bl	100d6a0 <strlcpy>
 100bc3e:	7823      	ldrb	r3, [r4, #0]
 100bc40:	2b2f      	cmp	r3, #47	; 0x2f
 100bc42:	d103      	bne.n	100bc4c <_setlocale_r+0x13c>
 100bc44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 100bc48:	2b2f      	cmp	r3, #47	; 0x2f
 100bc4a:	d0fb      	beq.n	100bc44 <_setlocale_r+0x134>
 100bc4c:	2b00      	cmp	r3, #0
 100bc4e:	d059      	beq.n	100bd04 <_setlocale_r+0x1f4>
 100bc50:	4622      	mov	r2, r4
 100bc52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 100bc56:	2b00      	cmp	r3, #0
 100bc58:	bf18      	it	ne
 100bc5a:	2b2f      	cmpne	r3, #47	; 0x2f
 100bc5c:	d1f9      	bne.n	100bc52 <_setlocale_r+0x142>
 100bc5e:	2d07      	cmp	r5, #7
 100bc60:	f10b 0b20 	add.w	fp, fp, #32
 100bc64:	46a2      	mov	sl, r4
 100bc66:	d089      	beq.n	100bb7c <_setlocale_r+0x6c>
 100bc68:	4614      	mov	r4, r2
 100bc6a:	e7de      	b.n	100bc2a <_setlocale_r+0x11a>
 100bc6c:	2900      	cmp	r1, #0
 100bc6e:	d0a0      	beq.n	100bbb2 <_setlocale_r+0xa2>
 100bc70:	f24a 0360 	movw	r3, #41056	; 0xa060
 100bc74:	f2c0 1305 	movt	r3, #261	; 0x105
 100bc78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 100bc7c:	4618      	mov	r0, r3
 100bc7e:	b003      	add	sp, #12
 100bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100bc84:	4659      	mov	r1, fp
 100bc86:	4648      	mov	r0, r9
 100bc88:	f7ff ff18 	bl	100babc <__get_locale_env>
 100bc8c:	4605      	mov	r5, r0
 100bc8e:	f001 fd37 	bl	100d700 <strlen>
 100bc92:	281f      	cmp	r0, #31
 100bc94:	d8ab      	bhi.n	100bbee <_setlocale_r+0xde>
 100bc96:	4c2d      	ldr	r4, [pc, #180]	; (100bd4c <_setlocale_r+0x23c>)
 100bc98:	4629      	mov	r1, r5
 100bc9a:	eb04 144b 	add.w	r4, r4, fp, lsl #5
 100bc9e:	4620      	mov	r0, r4
 100bca0:	f001 fc9c 	bl	100d5dc <strcpy>
 100bca4:	e798      	b.n	100bbd8 <_setlocale_r+0xc8>
 100bca6:	2c01      	cmp	r4, #1
 100bca8:	f8d9 b000 	ldr.w	fp, [r9]
 100bcac:	d027      	beq.n	100bcfe <_setlocale_r+0x1ee>
 100bcae:	f24a 0660 	movw	r6, #41056	; 0xa060
 100bcb2:	f249 6a68 	movw	sl, #38504	; 0x9668
 100bcb6:	f2c0 1605 	movt	r6, #261	; 0x105
 100bcba:	f2c0 1a05 	movt	sl, #261	; 0x105
 100bcbe:	2501      	movs	r5, #1
 100bcc0:	e004      	b.n	100bccc <_setlocale_r+0x1bc>
 100bcc2:	3501      	adds	r5, #1
 100bcc4:	f108 0820 	add.w	r8, r8, #32
 100bcc8:	42a5      	cmp	r5, r4
 100bcca:	d018      	beq.n	100bcfe <_setlocale_r+0x1ee>
 100bccc:	4639      	mov	r1, r7
 100bcce:	4640      	mov	r0, r8
 100bcd0:	9301      	str	r3, [sp, #4]
 100bcd2:	f001 fc83 	bl	100d5dc <strcpy>
 100bcd6:	4642      	mov	r2, r8
 100bcd8:	4629      	mov	r1, r5
 100bcda:	4630      	mov	r0, r6
 100bcdc:	3720      	adds	r7, #32
 100bcde:	f7ff fbad 	bl	100b43c <__loadlocale>
 100bce2:	9b01      	ldr	r3, [sp, #4]
 100bce4:	2800      	cmp	r0, #0
 100bce6:	d1ec      	bne.n	100bcc2 <_setlocale_r+0x1b2>
 100bce8:	4651      	mov	r1, sl
 100bcea:	4640      	mov	r0, r8
 100bcec:	f001 fc76 	bl	100d5dc <strcpy>
 100bcf0:	4642      	mov	r2, r8
 100bcf2:	4629      	mov	r1, r5
 100bcf4:	4630      	mov	r0, r6
 100bcf6:	f7ff fba1 	bl	100b43c <__loadlocale>
 100bcfa:	9b01      	ldr	r3, [sp, #4]
 100bcfc:	e7e1      	b.n	100bcc2 <_setlocale_r+0x1b2>
 100bcfe:	f8c9 b000 	str.w	fp, [r9]
 100bd02:	e778      	b.n	100bbf6 <_setlocale_r+0xe6>
 100bd04:	2d07      	cmp	r5, #7
 100bd06:	bf1c      	itt	ne
 100bd08:	4b10      	ldrne	r3, [pc, #64]	; (100bd4c <_setlocale_r+0x23c>)
 100bd0a:	eb03 1545 	addne.w	r5, r3, r5, lsl #5
 100bd0e:	f43f af35 	beq.w	100bb7c <_setlocale_r+0x6c>
 100bd12:	f1a5 0120 	sub.w	r1, r5, #32
 100bd16:	4628      	mov	r0, r5
 100bd18:	3520      	adds	r5, #32
 100bd1a:	f001 fc5f 	bl	100d5dc <strcpy>
 100bd1e:	42bd      	cmp	r5, r7
 100bd20:	d1f7      	bne.n	100bd12 <_setlocale_r+0x202>
 100bd22:	e72b      	b.n	100bb7c <_setlocale_r+0x6c>
 100bd24:	4650      	mov	r0, sl
 100bd26:	f001 fceb 	bl	100d700 <strlen>
 100bd2a:	281f      	cmp	r0, #31
 100bd2c:	f63f af5f 	bhi.w	100bbee <_setlocale_r+0xde>
 100bd30:	4644      	mov	r4, r8
 100bd32:	4620      	mov	r0, r4
 100bd34:	4651      	mov	r1, sl
 100bd36:	3420      	adds	r4, #32
 100bd38:	f001 fc50 	bl	100d5dc <strcpy>
 100bd3c:	42bc      	cmp	r4, r7
 100bd3e:	d1f8      	bne.n	100bd32 <_setlocale_r+0x222>
 100bd40:	e71c      	b.n	100bb7c <_setlocale_r+0x6c>
 100bd42:	bf00      	nop
 100bd44:	0105a080 	.word	0x0105a080
 100bd48:	01060230 	.word	0x01060230
 100bd4c:	01060130 	.word	0x01060130
 100bd50:	01060150 	.word	0x01060150

0100bd54 <__locale_mb_cur_max>:
 100bd54:	f649 4330 	movw	r3, #39984	; 0x9c30
 100bd58:	f2c0 1305 	movt	r3, #261	; 0x105
 100bd5c:	f24a 0260 	movw	r2, #41056	; 0xa060
 100bd60:	f2c0 1205 	movt	r2, #261	; 0x105
 100bd64:	681b      	ldr	r3, [r3, #0]
 100bd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100bd68:	2b00      	cmp	r3, #0
 100bd6a:	bf08      	it	eq
 100bd6c:	4613      	moveq	r3, r2
 100bd6e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 100bd72:	4770      	bx	lr

0100bd74 <__locale_ctype_ptr_l>:
 100bd74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 100bd78:	4770      	bx	lr
 100bd7a:	bf00      	nop

0100bd7c <__locale_ctype_ptr>:
 100bd7c:	f649 4330 	movw	r3, #39984	; 0x9c30
 100bd80:	f2c0 1305 	movt	r3, #261	; 0x105
 100bd84:	f24a 0260 	movw	r2, #41056	; 0xa060
 100bd88:	f2c0 1205 	movt	r2, #261	; 0x105
 100bd8c:	681b      	ldr	r3, [r3, #0]
 100bd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100bd90:	2b00      	cmp	r3, #0
 100bd92:	bf08      	it	eq
 100bd94:	4613      	moveq	r3, r2
 100bd96:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 100bd9a:	4770      	bx	lr

0100bd9c <setlocale>:
 100bd9c:	f649 4330 	movw	r3, #39984	; 0x9c30
 100bda0:	f2c0 1305 	movt	r3, #261	; 0x105
 100bda4:	460a      	mov	r2, r1
 100bda6:	4601      	mov	r1, r0
 100bda8:	6818      	ldr	r0, [r3, #0]
 100bdaa:	f7ff beb1 	b.w	100bb10 <_setlocale_r>
 100bdae:	bf00      	nop

0100bdb0 <memalign>:
 100bdb0:	f649 4330 	movw	r3, #39984	; 0x9c30
 100bdb4:	f2c0 1305 	movt	r3, #261	; 0x105
 100bdb8:	460a      	mov	r2, r1
 100bdba:	4601      	mov	r1, r0
 100bdbc:	6818      	ldr	r0, [r3, #0]
 100bdbe:	f000 b801 	b.w	100bdc4 <_memalign_r>
 100bdc2:	bf00      	nop

0100bdc4 <_memalign_r>:
 100bdc4:	2908      	cmp	r1, #8
 100bdc6:	d962      	bls.n	100be8e <_memalign_r+0xca>
 100bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100bdcc:	f102 050b 	add.w	r5, r2, #11
 100bdd0:	2d16      	cmp	r5, #22
 100bdd2:	4607      	mov	r7, r0
 100bdd4:	bf8d      	iteet	hi
 100bdd6:	f025 0507 	bichi.w	r5, r5, #7
 100bdda:	2300      	movls	r3, #0
 100bddc:	2510      	movls	r5, #16
 100bdde:	0feb      	lsrhi	r3, r5, #31
 100bde0:	4295      	cmp	r5, r2
 100bde2:	bf2c      	ite	cs
 100bde4:	461a      	movcs	r2, r3
 100bde6:	f043 0201 	orrcc.w	r2, r3, #1
 100bdea:	2a00      	cmp	r2, #0
 100bdec:	d149      	bne.n	100be82 <_memalign_r+0xbe>
 100bdee:	2910      	cmp	r1, #16
 100bdf0:	bf38      	it	cc
 100bdf2:	2110      	movcc	r1, #16
 100bdf4:	460c      	mov	r4, r1
 100bdf6:	3110      	adds	r1, #16
 100bdf8:	4429      	add	r1, r5
 100bdfa:	f000 f86d 	bl	100bed8 <_malloc_r>
 100bdfe:	4606      	mov	r6, r0
 100be00:	b3e0      	cbz	r0, 100be7c <_memalign_r+0xb8>
 100be02:	4638      	mov	r0, r7
 100be04:	f1a6 0808 	sub.w	r8, r6, #8
 100be08:	f001 f8ba 	bl	100cf80 <__malloc_lock>
 100be0c:	4621      	mov	r1, r4
 100be0e:	4630      	mov	r0, r6
 100be10:	f7fe fd78 	bl	100a904 <__aeabi_uidivmod>
 100be14:	b341      	cbz	r1, 100be68 <_memalign_r+0xa4>
 100be16:	1e63      	subs	r3, r4, #1
 100be18:	4261      	negs	r1, r4
 100be1a:	4433      	add	r3, r6
 100be1c:	4638      	mov	r0, r7
 100be1e:	4019      	ands	r1, r3
 100be20:	f856 3c04 	ldr.w	r3, [r6, #-4]
 100be24:	3908      	subs	r1, #8
 100be26:	eba1 0208 	sub.w	r2, r1, r8
 100be2a:	f023 0303 	bic.w	r3, r3, #3
 100be2e:	2a0f      	cmp	r2, #15
 100be30:	bfdc      	itt	le
 100be32:	1909      	addle	r1, r1, r4
 100be34:	eba1 0208 	suble.w	r2, r1, r8
 100be38:	1a9b      	subs	r3, r3, r2
 100be3a:	4688      	mov	r8, r1
 100be3c:	eb08 0403 	add.w	r4, r8, r3
 100be40:	f043 0301 	orr.w	r3, r3, #1
 100be44:	f8c8 3004 	str.w	r3, [r8, #4]
 100be48:	4631      	mov	r1, r6
 100be4a:	6863      	ldr	r3, [r4, #4]
 100be4c:	f043 0301 	orr.w	r3, r3, #1
 100be50:	6063      	str	r3, [r4, #4]
 100be52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 100be56:	f003 0301 	and.w	r3, r3, #1
 100be5a:	431a      	orrs	r2, r3
 100be5c:	f846 2c04 	str.w	r2, [r6, #-4]
 100be60:	f006 fe0e 	bl	1012a80 <_free_r>
 100be64:	f108 0608 	add.w	r6, r8, #8
 100be68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 100be6c:	f023 0303 	bic.w	r3, r3, #3
 100be70:	1b5b      	subs	r3, r3, r5
 100be72:	2b0f      	cmp	r3, #15
 100be74:	dc0e      	bgt.n	100be94 <_memalign_r+0xd0>
 100be76:	4638      	mov	r0, r7
 100be78:	f001 f884 	bl	100cf84 <__malloc_unlock>
 100be7c:	4630      	mov	r0, r6
 100be7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100be82:	2600      	movs	r6, #0
 100be84:	230c      	movs	r3, #12
 100be86:	6003      	str	r3, [r0, #0]
 100be88:	4630      	mov	r0, r6
 100be8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100be8e:	4611      	mov	r1, r2
 100be90:	f000 b822 	b.w	100bed8 <_malloc_r>
 100be94:	eb08 0205 	add.w	r2, r8, r5
 100be98:	f043 0301 	orr.w	r3, r3, #1
 100be9c:	f102 0108 	add.w	r1, r2, #8
 100bea0:	4638      	mov	r0, r7
 100bea2:	6053      	str	r3, [r2, #4]
 100bea4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 100bea8:	f003 0301 	and.w	r3, r3, #1
 100beac:	431d      	orrs	r5, r3
 100beae:	f8c8 5004 	str.w	r5, [r8, #4]
 100beb2:	f006 fde5 	bl	1012a80 <_free_r>
 100beb6:	e7de      	b.n	100be76 <_memalign_r+0xb2>

0100beb8 <malloc>:
 100beb8:	f649 4330 	movw	r3, #39984	; 0x9c30
 100bebc:	f2c0 1305 	movt	r3, #261	; 0x105
 100bec0:	4601      	mov	r1, r0
 100bec2:	6818      	ldr	r0, [r3, #0]
 100bec4:	f000 b808 	b.w	100bed8 <_malloc_r>

0100bec8 <free>:
 100bec8:	f649 4330 	movw	r3, #39984	; 0x9c30
 100becc:	f2c0 1305 	movt	r3, #261	; 0x105
 100bed0:	4601      	mov	r1, r0
 100bed2:	6818      	ldr	r0, [r3, #0]
 100bed4:	f006 bdd4 	b.w	1012a80 <_free_r>

0100bed8 <_malloc_r>:
 100bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100bedc:	f101 050b 	add.w	r5, r1, #11
 100bee0:	2d16      	cmp	r5, #22
 100bee2:	b083      	sub	sp, #12
 100bee4:	4607      	mov	r7, r0
 100bee6:	d82c      	bhi.n	100bf42 <_malloc_r+0x6a>
 100bee8:	2910      	cmp	r1, #16
 100beea:	d823      	bhi.n	100bf34 <_malloc_r+0x5c>
 100beec:	f001 f848 	bl	100cf80 <__malloc_lock>
 100bef0:	2510      	movs	r5, #16
 100bef2:	2002      	movs	r0, #2
 100bef4:	2318      	movs	r3, #24
 100bef6:	f24a 16ec 	movw	r6, #41452	; 0xa1ec
 100befa:	f2c0 1605 	movt	r6, #261	; 0x105
 100befe:	4433      	add	r3, r6
 100bf00:	f1a3 0108 	sub.w	r1, r3, #8
 100bf04:	685a      	ldr	r2, [r3, #4]
 100bf06:	428a      	cmp	r2, r1
 100bf08:	d04f      	beq.n	100bfaa <_malloc_r+0xd2>
 100bf0a:	6853      	ldr	r3, [r2, #4]
 100bf0c:	f102 0408 	add.w	r4, r2, #8
 100bf10:	68d1      	ldr	r1, [r2, #12]
 100bf12:	4638      	mov	r0, r7
 100bf14:	f023 0303 	bic.w	r3, r3, #3
 100bf18:	6895      	ldr	r5, [r2, #8]
 100bf1a:	441a      	add	r2, r3
 100bf1c:	6853      	ldr	r3, [r2, #4]
 100bf1e:	60e9      	str	r1, [r5, #12]
 100bf20:	f043 0301 	orr.w	r3, r3, #1
 100bf24:	608d      	str	r5, [r1, #8]
 100bf26:	6053      	str	r3, [r2, #4]
 100bf28:	f001 f82c 	bl	100cf84 <__malloc_unlock>
 100bf2c:	4620      	mov	r0, r4
 100bf2e:	b003      	add	sp, #12
 100bf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100bf34:	2400      	movs	r4, #0
 100bf36:	230c      	movs	r3, #12
 100bf38:	4620      	mov	r0, r4
 100bf3a:	603b      	str	r3, [r7, #0]
 100bf3c:	b003      	add	sp, #12
 100bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100bf42:	f025 0507 	bic.w	r5, r5, #7
 100bf46:	42a9      	cmp	r1, r5
 100bf48:	bf94      	ite	ls
 100bf4a:	2100      	movls	r1, #0
 100bf4c:	2101      	movhi	r1, #1
 100bf4e:	ea51 73d5 	orrs.w	r3, r1, r5, lsr #31
 100bf52:	d1ef      	bne.n	100bf34 <_malloc_r+0x5c>
 100bf54:	f001 f814 	bl	100cf80 <__malloc_lock>
 100bf58:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 100bf5c:	f0c0 81c5 	bcc.w	100c2ea <_malloc_r+0x412>
 100bf60:	0a6b      	lsrs	r3, r5, #9
 100bf62:	f000 8111 	beq.w	100c188 <_malloc_r+0x2b0>
 100bf66:	2b04      	cmp	r3, #4
 100bf68:	f200 819b 	bhi.w	100c2a2 <_malloc_r+0x3ca>
 100bf6c:	09ab      	lsrs	r3, r5, #6
 100bf6e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 100bf72:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 100bf76:	00c3      	lsls	r3, r0, #3
 100bf78:	f24a 16ec 	movw	r6, #41452	; 0xa1ec
 100bf7c:	f2c0 1605 	movt	r6, #261	; 0x105
 100bf80:	4433      	add	r3, r6
 100bf82:	f1a3 0408 	sub.w	r4, r3, #8
 100bf86:	685b      	ldr	r3, [r3, #4]
 100bf88:	429c      	cmp	r4, r3
 100bf8a:	d106      	bne.n	100bf9a <_malloc_r+0xc2>
 100bf8c:	e012      	b.n	100bfb4 <_malloc_r+0xdc>
 100bf8e:	2900      	cmp	r1, #0
 100bf90:	f280 8155 	bge.w	100c23e <_malloc_r+0x366>
 100bf94:	68db      	ldr	r3, [r3, #12]
 100bf96:	429c      	cmp	r4, r3
 100bf98:	d00c      	beq.n	100bfb4 <_malloc_r+0xdc>
 100bf9a:	685a      	ldr	r2, [r3, #4]
 100bf9c:	f022 0203 	bic.w	r2, r2, #3
 100bfa0:	1b51      	subs	r1, r2, r5
 100bfa2:	290f      	cmp	r1, #15
 100bfa4:	ddf3      	ble.n	100bf8e <_malloc_r+0xb6>
 100bfa6:	4660      	mov	r0, ip
 100bfa8:	e004      	b.n	100bfb4 <_malloc_r+0xdc>
 100bfaa:	68da      	ldr	r2, [r3, #12]
 100bfac:	4293      	cmp	r3, r2
 100bfae:	bf08      	it	eq
 100bfb0:	3002      	addeq	r0, #2
 100bfb2:	d1aa      	bne.n	100bf0a <_malloc_r+0x32>
 100bfb4:	6932      	ldr	r2, [r6, #16]
 100bfb6:	f8df e480 	ldr.w	lr, [pc, #1152]	; 100c438 <_malloc_r+0x560>
 100bfba:	4572      	cmp	r2, lr
 100bfbc:	bf08      	it	eq
 100bfbe:	6871      	ldreq	r1, [r6, #4]
 100bfc0:	d029      	beq.n	100c016 <_malloc_r+0x13e>
 100bfc2:	6853      	ldr	r3, [r2, #4]
 100bfc4:	f023 0c03 	bic.w	ip, r3, #3
 100bfc8:	ebac 0305 	sub.w	r3, ip, r5
 100bfcc:	2b0f      	cmp	r3, #15
 100bfce:	f300 8190 	bgt.w	100c2f2 <_malloc_r+0x41a>
 100bfd2:	2b00      	cmp	r3, #0
 100bfd4:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 100bfd8:	f280 8114 	bge.w	100c204 <_malloc_r+0x32c>
 100bfdc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 100bfe0:	f080 813f 	bcs.w	100c262 <_malloc_r+0x38a>
 100bfe4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 100bfe8:	2101      	movs	r1, #1
 100bfea:	eb0c 0401 	add.w	r4, ip, r1
 100bfee:	6873      	ldr	r3, [r6, #4]
 100bff0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 100bff4:	f856 9034 	ldr.w	r9, [r6, r4, lsl #3]
 100bff8:	fa01 fc0c 	lsl.w	ip, r1, ip
 100bffc:	eb06 08c4 	add.w	r8, r6, r4, lsl #3
 100c000:	ea4c 0103 	orr.w	r1, ip, r3
 100c004:	f1a8 0308 	sub.w	r3, r8, #8
 100c008:	6071      	str	r1, [r6, #4]
 100c00a:	e9c2 9302 	strd	r9, r3, [r2, #8]
 100c00e:	f846 2034 	str.w	r2, [r6, r4, lsl #3]
 100c012:	f8c9 200c 	str.w	r2, [r9, #12]
 100c016:	1083      	asrs	r3, r0, #2
 100c018:	2401      	movs	r4, #1
 100c01a:	409c      	lsls	r4, r3
 100c01c:	428c      	cmp	r4, r1
 100c01e:	f240 80b9 	bls.w	100c194 <_malloc_r+0x2bc>
 100c022:	68b4      	ldr	r4, [r6, #8]
 100c024:	6863      	ldr	r3, [r4, #4]
 100c026:	f023 0803 	bic.w	r8, r3, #3
 100c02a:	45a8      	cmp	r8, r5
 100c02c:	eba8 0205 	sub.w	r2, r8, r5
 100c030:	bf2c      	ite	cs
 100c032:	2300      	movcs	r3, #0
 100c034:	2301      	movcc	r3, #1
 100c036:	2a0f      	cmp	r2, #15
 100c038:	bfd8      	it	le
 100c03a:	f043 0301 	orrle.w	r3, r3, #1
 100c03e:	2b00      	cmp	r3, #0
 100c040:	f000 80ed 	beq.w	100c21e <_malloc_r+0x346>
 100c044:	f240 29f4 	movw	r9, #756	; 0x2f4
 100c048:	f2c0 1906 	movt	r9, #262	; 0x106
 100c04c:	f8d6 3408 	ldr.w	r3, [r6, #1032]	; 0x408
 100c050:	4638      	mov	r0, r7
 100c052:	f8d9 1000 	ldr.w	r1, [r9]
 100c056:	eb04 0b08 	add.w	fp, r4, r8
 100c05a:	3301      	adds	r3, #1
 100c05c:	4429      	add	r1, r5
 100c05e:	bf17      	itett	ne
 100c060:	f501 5180 	addne.w	r1, r1, #4096	; 0x1000
 100c064:	f101 0310 	addeq.w	r3, r1, #16
 100c068:	310f      	addne	r1, #15
 100c06a:	f421 637f 	bicne.w	r3, r1, #4080	; 0xff0
 100c06e:	bf18      	it	ne
 100c070:	f023 030f 	bicne.w	r3, r3, #15
 100c074:	9301      	str	r3, [sp, #4]
 100c076:	4619      	mov	r1, r3
 100c078:	f000 ffe8 	bl	100d04c <_sbrk_r>
 100c07c:	9b01      	ldr	r3, [sp, #4]
 100c07e:	f1b0 3fff 	cmp.w	r0, #4294967295
 100c082:	4682      	mov	sl, r0
 100c084:	f000 8181 	beq.w	100c38a <_malloc_r+0x4b2>
 100c088:	42b4      	cmp	r4, r6
 100c08a:	bf18      	it	ne
 100c08c:	4583      	cmpne	fp, r0
 100c08e:	f200 817c 	bhi.w	100c38a <_malloc_r+0x4b2>
 100c092:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100c096:	45d3      	cmp	fp, sl
 100c098:	4418      	add	r0, r3
 100c09a:	f8c9 0004 	str.w	r0, [r9, #4]
 100c09e:	f000 8166 	beq.w	100c36e <_malloc_r+0x496>
 100c0a2:	f8d6 2408 	ldr.w	r2, [r6, #1032]	; 0x408
 100c0a6:	3201      	adds	r2, #1
 100c0a8:	bf0f      	iteee	eq
 100c0aa:	f8c6 a408 	streq.w	sl, [r6, #1032]	; 0x408
 100c0ae:	ebaa 0b0b 	subne.w	fp, sl, fp
 100c0b2:	4458      	addne	r0, fp
 100c0b4:	f8c9 0004 	strne.w	r0, [r9, #4]
 100c0b8:	f01a 0b07 	ands.w	fp, sl, #7
 100c0bc:	4638      	mov	r0, r7
 100c0be:	bf1f      	itttt	ne
 100c0c0:	f1cb 0208 	rsbne	r2, fp, #8
 100c0c4:	f5cb 5b80 	rsbne	fp, fp, #4096	; 0x1000
 100c0c8:	4492      	addne	sl, r2
 100c0ca:	f10b 0b08 	addne.w	fp, fp, #8
 100c0ce:	4453      	add	r3, sl
 100c0d0:	bf08      	it	eq
 100c0d2:	f44f 5b80 	moveq.w	fp, #4096	; 0x1000
 100c0d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 100c0da:	ebab 0b03 	sub.w	fp, fp, r3
 100c0de:	4659      	mov	r1, fp
 100c0e0:	f000 ffb4 	bl	100d04c <_sbrk_r>
 100c0e4:	f8c6 a008 	str.w	sl, [r6, #8]
 100c0e8:	1c43      	adds	r3, r0, #1
 100c0ea:	bf18      	it	ne
 100c0ec:	eba0 010a 	subne.w	r1, r0, sl
 100c0f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100c0f4:	bf15      	itete	ne
 100c0f6:	4459      	addne	r1, fp
 100c0f8:	2101      	moveq	r1, #1
 100c0fa:	f041 0101 	orrne.w	r1, r1, #1
 100c0fe:	f04f 0b00 	moveq.w	fp, #0
 100c102:	42b4      	cmp	r4, r6
 100c104:	4458      	add	r0, fp
 100c106:	f8ca 1004 	str.w	r1, [sl, #4]
 100c10a:	f8c9 0004 	str.w	r0, [r9, #4]
 100c10e:	f000 813a 	beq.w	100c386 <_malloc_r+0x4ae>
 100c112:	f1b8 0f0f 	cmp.w	r8, #15
 100c116:	bf9c      	itt	ls
 100c118:	2301      	movls	r3, #1
 100c11a:	f8ca 3004 	strls.w	r3, [sl, #4]
 100c11e:	d92e      	bls.n	100c17e <_malloc_r+0x2a6>
 100c120:	f1a8 030c 	sub.w	r3, r8, #12
 100c124:	6862      	ldr	r2, [r4, #4]
 100c126:	f023 0307 	bic.w	r3, r3, #7
 100c12a:	f04f 0c05 	mov.w	ip, #5
 100c12e:	18e1      	adds	r1, r4, r3
 100c130:	2b0f      	cmp	r3, #15
 100c132:	f002 0201 	and.w	r2, r2, #1
 100c136:	ea42 0203 	orr.w	r2, r2, r3
 100c13a:	6062      	str	r2, [r4, #4]
 100c13c:	e9c1 cc01 	strd	ip, ip, [r1, #4]
 100c140:	f200 8159 	bhi.w	100c3f6 <_malloc_r+0x51e>
 100c144:	f8da 1004 	ldr.w	r1, [sl, #4]
 100c148:	4654      	mov	r4, sl
 100c14a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 100c14e:	4283      	cmp	r3, r0
 100c150:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 100c154:	bf38      	it	cc
 100c156:	f8c9 002c 	strcc.w	r0, [r9, #44]	; 0x2c
 100c15a:	4283      	cmp	r3, r0
 100c15c:	bf38      	it	cc
 100c15e:	f8c9 0030 	strcc.w	r0, [r9, #48]	; 0x30
 100c162:	f021 0103 	bic.w	r1, r1, #3
 100c166:	1b4a      	subs	r2, r1, r5
 100c168:	2a0f      	cmp	r2, #15
 100c16a:	bfcc      	ite	gt
 100c16c:	2300      	movgt	r3, #0
 100c16e:	2301      	movle	r3, #1
 100c170:	42a9      	cmp	r1, r5
 100c172:	bf2c      	ite	cs
 100c174:	4619      	movcs	r1, r3
 100c176:	f043 0101 	orrcc.w	r1, r3, #1
 100c17a:	2900      	cmp	r1, #0
 100c17c:	d04f      	beq.n	100c21e <_malloc_r+0x346>
 100c17e:	4638      	mov	r0, r7
 100c180:	2400      	movs	r4, #0
 100c182:	f000 feff 	bl	100cf84 <__malloc_unlock>
 100c186:	e6d1      	b.n	100bf2c <_malloc_r+0x54>
 100c188:	f44f 7300 	mov.w	r3, #512	; 0x200
 100c18c:	2040      	movs	r0, #64	; 0x40
 100c18e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 100c192:	e6f1      	b.n	100bf78 <_malloc_r+0xa0>
 100c194:	420c      	tst	r4, r1
 100c196:	d105      	bne.n	100c1a4 <_malloc_r+0x2cc>
 100c198:	f020 0003 	bic.w	r0, r0, #3
 100c19c:	0064      	lsls	r4, r4, #1
 100c19e:	3004      	adds	r0, #4
 100c1a0:	420c      	tst	r4, r1
 100c1a2:	d0fb      	beq.n	100c19c <_malloc_r+0x2c4>
 100c1a4:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 100c1a8:	4680      	mov	r8, r0
 100c1aa:	46cc      	mov	ip, r9
 100c1ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 100c1b0:	459c      	cmp	ip, r3
 100c1b2:	d106      	bne.n	100c1c2 <_malloc_r+0x2ea>
 100c1b4:	e081      	b.n	100c2ba <_malloc_r+0x3e2>
 100c1b6:	2a00      	cmp	r2, #0
 100c1b8:	f280 8088 	bge.w	100c2cc <_malloc_r+0x3f4>
 100c1bc:	68db      	ldr	r3, [r3, #12]
 100c1be:	459c      	cmp	ip, r3
 100c1c0:	d07b      	beq.n	100c2ba <_malloc_r+0x3e2>
 100c1c2:	6859      	ldr	r1, [r3, #4]
 100c1c4:	f021 0103 	bic.w	r1, r1, #3
 100c1c8:	1b4a      	subs	r2, r1, r5
 100c1ca:	2a0f      	cmp	r2, #15
 100c1cc:	ddf3      	ble.n	100c1b6 <_malloc_r+0x2de>
 100c1ce:	68dc      	ldr	r4, [r3, #12]
 100c1d0:	eb03 0c05 	add.w	ip, r3, r5
 100c1d4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 100c1d8:	f045 0501 	orr.w	r5, r5, #1
 100c1dc:	4638      	mov	r0, r7
 100c1de:	605d      	str	r5, [r3, #4]
 100c1e0:	f042 0501 	orr.w	r5, r2, #1
 100c1e4:	f8c8 400c 	str.w	r4, [r8, #12]
 100c1e8:	f8c4 8008 	str.w	r8, [r4, #8]
 100c1ec:	f103 0408 	add.w	r4, r3, #8
 100c1f0:	e9c6 cc04 	strd	ip, ip, [r6, #16]
 100c1f4:	e9cc ee02 	strd	lr, lr, [ip, #8]
 100c1f8:	f8cc 5004 	str.w	r5, [ip, #4]
 100c1fc:	505a      	str	r2, [r3, r1]
 100c1fe:	f000 fec1 	bl	100cf84 <__malloc_unlock>
 100c202:	e693      	b.n	100bf2c <_malloc_r+0x54>
 100c204:	4494      	add	ip, r2
 100c206:	4638      	mov	r0, r7
 100c208:	f102 0408 	add.w	r4, r2, #8
 100c20c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 100c210:	f043 0301 	orr.w	r3, r3, #1
 100c214:	f8cc 3004 	str.w	r3, [ip, #4]
 100c218:	f000 feb4 	bl	100cf84 <__malloc_unlock>
 100c21c:	e686      	b.n	100bf2c <_malloc_r+0x54>
 100c21e:	1963      	adds	r3, r4, r5
 100c220:	f042 0201 	orr.w	r2, r2, #1
 100c224:	4638      	mov	r0, r7
 100c226:	f045 0501 	orr.w	r5, r5, #1
 100c22a:	6065      	str	r5, [r4, #4]
 100c22c:	3408      	adds	r4, #8
 100c22e:	60b3      	str	r3, [r6, #8]
 100c230:	605a      	str	r2, [r3, #4]
 100c232:	f000 fea7 	bl	100cf84 <__malloc_unlock>
 100c236:	4620      	mov	r0, r4
 100c238:	b003      	add	sp, #12
 100c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c23e:	441a      	add	r2, r3
 100c240:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
 100c244:	4638      	mov	r0, r7
 100c246:	f103 0408 	add.w	r4, r3, #8
 100c24a:	6851      	ldr	r1, [r2, #4]
 100c24c:	60f5      	str	r5, [r6, #12]
 100c24e:	f041 0101 	orr.w	r1, r1, #1
 100c252:	60ae      	str	r6, [r5, #8]
 100c254:	6051      	str	r1, [r2, #4]
 100c256:	f000 fe95 	bl	100cf84 <__malloc_unlock>
 100c25a:	4620      	mov	r0, r4
 100c25c:	b003      	add	sp, #12
 100c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c262:	ea4f 215c 	mov.w	r1, ip, lsr #9
 100c266:	2904      	cmp	r1, #4
 100c268:	d956      	bls.n	100c318 <_malloc_r+0x440>
 100c26a:	2914      	cmp	r1, #20
 100c26c:	f200 809b 	bhi.w	100c3a6 <_malloc_r+0x4ce>
 100c270:	f101 035c 	add.w	r3, r1, #92	; 0x5c
 100c274:	315b      	adds	r1, #91	; 0x5b
 100c276:	00db      	lsls	r3, r3, #3
 100c278:	18f4      	adds	r4, r6, r3
 100c27a:	58f3      	ldr	r3, [r6, r3]
 100c27c:	3c08      	subs	r4, #8
 100c27e:	429c      	cmp	r4, r3
 100c280:	f000 8086 	beq.w	100c390 <_malloc_r+0x4b8>
 100c284:	6859      	ldr	r1, [r3, #4]
 100c286:	f021 0103 	bic.w	r1, r1, #3
 100c28a:	4561      	cmp	r1, ip
 100c28c:	d902      	bls.n	100c294 <_malloc_r+0x3bc>
 100c28e:	689b      	ldr	r3, [r3, #8]
 100c290:	429c      	cmp	r4, r3
 100c292:	d1f7      	bne.n	100c284 <_malloc_r+0x3ac>
 100c294:	68dc      	ldr	r4, [r3, #12]
 100c296:	6871      	ldr	r1, [r6, #4]
 100c298:	e9c2 3402 	strd	r3, r4, [r2, #8]
 100c29c:	60a2      	str	r2, [r4, #8]
 100c29e:	60da      	str	r2, [r3, #12]
 100c2a0:	e6b9      	b.n	100c016 <_malloc_r+0x13e>
 100c2a2:	2b14      	cmp	r3, #20
 100c2a4:	d93f      	bls.n	100c326 <_malloc_r+0x44e>
 100c2a6:	2b54      	cmp	r3, #84	; 0x54
 100c2a8:	f200 8086 	bhi.w	100c3b8 <_malloc_r+0x4e0>
 100c2ac:	0b2b      	lsrs	r3, r5, #12
 100c2ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 100c2b2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 100c2b6:	00c3      	lsls	r3, r0, #3
 100c2b8:	e65e      	b.n	100bf78 <_malloc_r+0xa0>
 100c2ba:	f108 0801 	add.w	r8, r8, #1
 100c2be:	f10c 0c08 	add.w	ip, ip, #8
 100c2c2:	f018 0f03 	tst.w	r8, #3
 100c2c6:	f47f af71 	bne.w	100c1ac <_malloc_r+0x2d4>
 100c2ca:	e036      	b.n	100c33a <_malloc_r+0x462>
 100c2cc:	4419      	add	r1, r3
 100c2ce:	461c      	mov	r4, r3
 100c2d0:	68da      	ldr	r2, [r3, #12]
 100c2d2:	4638      	mov	r0, r7
 100c2d4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 100c2d8:	684b      	ldr	r3, [r1, #4]
 100c2da:	f043 0301 	orr.w	r3, r3, #1
 100c2de:	604b      	str	r3, [r1, #4]
 100c2e0:	60ea      	str	r2, [r5, #12]
 100c2e2:	6095      	str	r5, [r2, #8]
 100c2e4:	f000 fe4e 	bl	100cf84 <__malloc_unlock>
 100c2e8:	e620      	b.n	100bf2c <_malloc_r+0x54>
 100c2ea:	08e8      	lsrs	r0, r5, #3
 100c2ec:	f105 0308 	add.w	r3, r5, #8
 100c2f0:	e601      	b.n	100bef6 <_malloc_r+0x1e>
 100c2f2:	1951      	adds	r1, r2, r5
 100c2f4:	4638      	mov	r0, r7
 100c2f6:	f045 0501 	orr.w	r5, r5, #1
 100c2fa:	6055      	str	r5, [r2, #4]
 100c2fc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 100c300:	f043 0501 	orr.w	r5, r3, #1
 100c304:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 100c308:	f102 0408 	add.w	r4, r2, #8
 100c30c:	604d      	str	r5, [r1, #4]
 100c30e:	f842 300c 	str.w	r3, [r2, ip]
 100c312:	f000 fe37 	bl	100cf84 <__malloc_unlock>
 100c316:	e609      	b.n	100bf2c <_malloc_r+0x54>
 100c318:	ea4f 119c 	mov.w	r1, ip, lsr #6
 100c31c:	f101 0339 	add.w	r3, r1, #57	; 0x39
 100c320:	3138      	adds	r1, #56	; 0x38
 100c322:	00db      	lsls	r3, r3, #3
 100c324:	e7a8      	b.n	100c278 <_malloc_r+0x3a0>
 100c326:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 100c32a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 100c32e:	00c3      	lsls	r3, r0, #3
 100c330:	e622      	b.n	100bf78 <_malloc_r+0xa0>
 100c332:	f859 3908 	ldr.w	r3, [r9], #-8
 100c336:	454b      	cmp	r3, r9
 100c338:	d17c      	bne.n	100c434 <_malloc_r+0x55c>
 100c33a:	f010 0f03 	tst.w	r0, #3
 100c33e:	f100 30ff 	add.w	r0, r0, #4294967295
 100c342:	d1f6      	bne.n	100c332 <_malloc_r+0x45a>
 100c344:	6873      	ldr	r3, [r6, #4]
 100c346:	ea23 0304 	bic.w	r3, r3, r4
 100c34a:	6073      	str	r3, [r6, #4]
 100c34c:	0064      	lsls	r4, r4, #1
 100c34e:	429c      	cmp	r4, r3
 100c350:	bf8c      	ite	hi
 100c352:	2200      	movhi	r2, #0
 100c354:	2201      	movls	r2, #1
 100c356:	2c00      	cmp	r4, #0
 100c358:	bf08      	it	eq
 100c35a:	2200      	moveq	r2, #0
 100c35c:	b91a      	cbnz	r2, 100c366 <_malloc_r+0x48e>
 100c35e:	e660      	b.n	100c022 <_malloc_r+0x14a>
 100c360:	0064      	lsls	r4, r4, #1
 100c362:	f108 0804 	add.w	r8, r8, #4
 100c366:	421c      	tst	r4, r3
 100c368:	d0fa      	beq.n	100c360 <_malloc_r+0x488>
 100c36a:	4640      	mov	r0, r8
 100c36c:	e71a      	b.n	100c1a4 <_malloc_r+0x2cc>
 100c36e:	f3cb 020b 	ubfx	r2, fp, #0, #12
 100c372:	2a00      	cmp	r2, #0
 100c374:	f47f ae95 	bne.w	100c0a2 <_malloc_r+0x1ca>
 100c378:	68b4      	ldr	r4, [r6, #8]
 100c37a:	eb08 0103 	add.w	r1, r8, r3
 100c37e:	f041 0101 	orr.w	r1, r1, #1
 100c382:	6061      	str	r1, [r4, #4]
 100c384:	e6e1      	b.n	100c14a <_malloc_r+0x272>
 100c386:	4654      	mov	r4, sl
 100c388:	e6df      	b.n	100c14a <_malloc_r+0x272>
 100c38a:	68b4      	ldr	r4, [r6, #8]
 100c38c:	6861      	ldr	r1, [r4, #4]
 100c38e:	e6e8      	b.n	100c162 <_malloc_r+0x28a>
 100c390:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 100c394:	f04f 0801 	mov.w	r8, #1
 100c398:	6871      	ldr	r1, [r6, #4]
 100c39a:	fa08 fc0c 	lsl.w	ip, r8, ip
 100c39e:	ea4c 0101 	orr.w	r1, ip, r1
 100c3a2:	6071      	str	r1, [r6, #4]
 100c3a4:	e778      	b.n	100c298 <_malloc_r+0x3c0>
 100c3a6:	2954      	cmp	r1, #84	; 0x54
 100c3a8:	d810      	bhi.n	100c3cc <_malloc_r+0x4f4>
 100c3aa:	ea4f 311c 	mov.w	r1, ip, lsr #12
 100c3ae:	f101 036f 	add.w	r3, r1, #111	; 0x6f
 100c3b2:	316e      	adds	r1, #110	; 0x6e
 100c3b4:	00db      	lsls	r3, r3, #3
 100c3b6:	e75f      	b.n	100c278 <_malloc_r+0x3a0>
 100c3b8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 100c3bc:	d810      	bhi.n	100c3e0 <_malloc_r+0x508>
 100c3be:	0beb      	lsrs	r3, r5, #15
 100c3c0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 100c3c4:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 100c3c8:	00c3      	lsls	r3, r0, #3
 100c3ca:	e5d5      	b.n	100bf78 <_malloc_r+0xa0>
 100c3cc:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 100c3d0:	d81b      	bhi.n	100c40a <_malloc_r+0x532>
 100c3d2:	ea4f 31dc 	mov.w	r1, ip, lsr #15
 100c3d6:	f101 0378 	add.w	r3, r1, #120	; 0x78
 100c3da:	3177      	adds	r1, #119	; 0x77
 100c3dc:	00db      	lsls	r3, r3, #3
 100c3de:	e74b      	b.n	100c278 <_malloc_r+0x3a0>
 100c3e0:	f240 5254 	movw	r2, #1364	; 0x554
 100c3e4:	4293      	cmp	r3, r2
 100c3e6:	d81f      	bhi.n	100c428 <_malloc_r+0x550>
 100c3e8:	0cab      	lsrs	r3, r5, #18
 100c3ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 100c3ee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 100c3f2:	00c3      	lsls	r3, r0, #3
 100c3f4:	e5c0      	b.n	100bf78 <_malloc_r+0xa0>
 100c3f6:	f104 0108 	add.w	r1, r4, #8
 100c3fa:	4638      	mov	r0, r7
 100c3fc:	f006 fb40 	bl	1012a80 <_free_r>
 100c400:	68b4      	ldr	r4, [r6, #8]
 100c402:	f8d9 0004 	ldr.w	r0, [r9, #4]
 100c406:	6861      	ldr	r1, [r4, #4]
 100c408:	e69f      	b.n	100c14a <_malloc_r+0x272>
 100c40a:	f240 5354 	movw	r3, #1364	; 0x554
 100c40e:	4299      	cmp	r1, r3
 100c410:	bf9b      	ittet	ls
 100c412:	ea4f 419c 	movls.w	r1, ip, lsr #18
 100c416:	f101 037d 	addls.w	r3, r1, #125	; 0x7d
 100c41a:	f44f 737e 	movhi.w	r3, #1016	; 0x3f8
 100c41e:	317c      	addls	r1, #124	; 0x7c
 100c420:	bf8c      	ite	hi
 100c422:	217e      	movhi	r1, #126	; 0x7e
 100c424:	00db      	lslls	r3, r3, #3
 100c426:	e727      	b.n	100c278 <_malloc_r+0x3a0>
 100c428:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 100c42c:	207f      	movs	r0, #127	; 0x7f
 100c42e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 100c432:	e5a1      	b.n	100bf78 <_malloc_r+0xa0>
 100c434:	6873      	ldr	r3, [r6, #4]
 100c436:	e789      	b.n	100c34c <_malloc_r+0x474>
 100c438:	0105a1f4 	.word	0x0105a1f4

0100c43c <_mbtowc_r>:
 100c43c:	b430      	push	{r4, r5}
 100c43e:	f649 4430 	movw	r4, #39984	; 0x9c30
 100c442:	f2c0 1405 	movt	r4, #261	; 0x105
 100c446:	f24a 0560 	movw	r5, #41056	; 0xa060
 100c44a:	f2c0 1505 	movt	r5, #261	; 0x105
 100c44e:	6824      	ldr	r4, [r4, #0]
 100c450:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100c452:	2c00      	cmp	r4, #0
 100c454:	bf08      	it	eq
 100c456:	462c      	moveq	r4, r5
 100c458:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 100c45c:	46a4      	mov	ip, r4
 100c45e:	bc30      	pop	{r4, r5}
 100c460:	4760      	bx	ip
 100c462:	bf00      	nop

0100c464 <__ascii_mbtowc>:
 100c464:	b082      	sub	sp, #8
 100c466:	b151      	cbz	r1, 100c47e <__ascii_mbtowc+0x1a>
 100c468:	4610      	mov	r0, r2
 100c46a:	b132      	cbz	r2, 100c47a <__ascii_mbtowc+0x16>
 100c46c:	b14b      	cbz	r3, 100c482 <__ascii_mbtowc+0x1e>
 100c46e:	7813      	ldrb	r3, [r2, #0]
 100c470:	600b      	str	r3, [r1, #0]
 100c472:	7812      	ldrb	r2, [r2, #0]
 100c474:	1c10      	adds	r0, r2, #0
 100c476:	bf18      	it	ne
 100c478:	2001      	movne	r0, #1
 100c47a:	b002      	add	sp, #8
 100c47c:	4770      	bx	lr
 100c47e:	a901      	add	r1, sp, #4
 100c480:	e7f2      	b.n	100c468 <__ascii_mbtowc+0x4>
 100c482:	f06f 0001 	mvn.w	r0, #1
 100c486:	e7f8      	b.n	100c47a <__ascii_mbtowc+0x16>

0100c488 <__utf8_mbtowc>:
 100c488:	b5f0      	push	{r4, r5, r6, r7, lr}
 100c48a:	b083      	sub	sp, #12
 100c48c:	4607      	mov	r7, r0
 100c48e:	9c08      	ldr	r4, [sp, #32]
 100c490:	2900      	cmp	r1, #0
 100c492:	d035      	beq.n	100c500 <__utf8_mbtowc+0x78>
 100c494:	4610      	mov	r0, r2
 100c496:	b34a      	cbz	r2, 100c4ec <__utf8_mbtowc+0x64>
 100c498:	2b00      	cmp	r3, #0
 100c49a:	f000 80db 	beq.w	100c654 <__utf8_mbtowc+0x1cc>
 100c49e:	6826      	ldr	r6, [r4, #0]
 100c4a0:	bb36      	cbnz	r6, 100c4f0 <__utf8_mbtowc+0x68>
 100c4a2:	7810      	ldrb	r0, [r2, #0]
 100c4a4:	2501      	movs	r5, #1
 100c4a6:	b338      	cbz	r0, 100c4f8 <__utf8_mbtowc+0x70>
 100c4a8:	287f      	cmp	r0, #127	; 0x7f
 100c4aa:	dd66      	ble.n	100c57a <__utf8_mbtowc+0xf2>
 100c4ac:	f1a0 0cc0 	sub.w	ip, r0, #192	; 0xc0
 100c4b0:	f1bc 0f1f 	cmp.w	ip, #31
 100c4b4:	d826      	bhi.n	100c504 <__utf8_mbtowc+0x7c>
 100c4b6:	7120      	strb	r0, [r4, #4]
 100c4b8:	b926      	cbnz	r6, 100c4c4 <__utf8_mbtowc+0x3c>
 100c4ba:	2601      	movs	r6, #1
 100c4bc:	42b3      	cmp	r3, r6
 100c4be:	6026      	str	r6, [r4, #0]
 100c4c0:	f240 80c8 	bls.w	100c654 <__utf8_mbtowc+0x1cc>
 100c4c4:	5d52      	ldrb	r2, [r2, r5]
 100c4c6:	3501      	adds	r5, #1
 100c4c8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100c4cc:	2b3f      	cmp	r3, #63	; 0x3f
 100c4ce:	f200 80c7 	bhi.w	100c660 <__utf8_mbtowc+0x1d8>
 100c4d2:	28c1      	cmp	r0, #193	; 0xc1
 100c4d4:	f340 80c4 	ble.w	100c660 <__utf8_mbtowc+0x1d8>
 100c4d8:	0183      	lsls	r3, r0, #6
 100c4da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100c4de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 100c4e2:	4628      	mov	r0, r5
 100c4e4:	4313      	orrs	r3, r2
 100c4e6:	2200      	movs	r2, #0
 100c4e8:	6022      	str	r2, [r4, #0]
 100c4ea:	600b      	str	r3, [r1, #0]
 100c4ec:	b003      	add	sp, #12
 100c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100c4f0:	7920      	ldrb	r0, [r4, #4]
 100c4f2:	2500      	movs	r5, #0
 100c4f4:	2800      	cmp	r0, #0
 100c4f6:	d1d7      	bne.n	100c4a8 <__utf8_mbtowc+0x20>
 100c4f8:	6008      	str	r0, [r1, #0]
 100c4fa:	6020      	str	r0, [r4, #0]
 100c4fc:	b003      	add	sp, #12
 100c4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100c500:	a901      	add	r1, sp, #4
 100c502:	e7c7      	b.n	100c494 <__utf8_mbtowc+0xc>
 100c504:	f1a0 0ce0 	sub.w	ip, r0, #224	; 0xe0
 100c508:	f1bc 0f0f 	cmp.w	ip, #15
 100c50c:	d83b      	bhi.n	100c586 <__utf8_mbtowc+0xfe>
 100c50e:	7120      	strb	r0, [r4, #4]
 100c510:	2e00      	cmp	r6, #0
 100c512:	f000 8088 	beq.w	100c626 <__utf8_mbtowc+0x19e>
 100c516:	f1b3 3fff 	cmp.w	r3, #4294967295
 100c51a:	bf18      	it	ne
 100c51c:	3301      	addne	r3, #1
 100c51e:	2e01      	cmp	r6, #1
 100c520:	bf18      	it	ne
 100c522:	f894 c005 	ldrbne.w	ip, [r4, #5]
 100c526:	f000 8082 	beq.w	100c62e <__utf8_mbtowc+0x1a6>
 100c52a:	f1bc 0f9f 	cmp.w	ip, #159	; 0x9f
 100c52e:	bfd8      	it	le
 100c530:	28e0      	cmple	r0, #224	; 0xe0
 100c532:	f000 8095 	beq.w	100c660 <__utf8_mbtowc+0x1d8>
 100c536:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 100c53a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100c53e:	f200 808f 	bhi.w	100c660 <__utf8_mbtowc+0x1d8>
 100c542:	2e01      	cmp	r6, #1
 100c544:	f884 c005 	strb.w	ip, [r4, #5]
 100c548:	d07f      	beq.n	100c64a <__utf8_mbtowc+0x1c2>
 100c54a:	5d53      	ldrb	r3, [r2, r5]
 100c54c:	3501      	adds	r5, #1
 100c54e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 100c552:	2a3f      	cmp	r2, #63	; 0x3f
 100c554:	f200 8084 	bhi.w	100c660 <__utf8_mbtowc+0x1d8>
 100c558:	0300      	lsls	r0, r0, #12
 100c55a:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 100c55e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 100c562:	f40c 6c7c 	and.w	ip, ip, #4032	; 0xfc0
 100c566:	b283      	uxth	r3, r0
 100c568:	4628      	mov	r0, r5
 100c56a:	ea43 0c0c 	orr.w	ip, r3, ip
 100c56e:	2500      	movs	r5, #0
 100c570:	ea4c 0202 	orr.w	r2, ip, r2
 100c574:	6025      	str	r5, [r4, #0]
 100c576:	600a      	str	r2, [r1, #0]
 100c578:	e7b8      	b.n	100c4ec <__utf8_mbtowc+0x64>
 100c57a:	2300      	movs	r3, #0
 100c57c:	6023      	str	r3, [r4, #0]
 100c57e:	6008      	str	r0, [r1, #0]
 100c580:	2001      	movs	r0, #1
 100c582:	b003      	add	sp, #12
 100c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100c586:	f1a0 0cf0 	sub.w	ip, r0, #240	; 0xf0
 100c58a:	f1bc 0f04 	cmp.w	ip, #4
 100c58e:	d867      	bhi.n	100c660 <__utf8_mbtowc+0x1d8>
 100c590:	7120      	strb	r0, [r4, #4]
 100c592:	2e00      	cmp	r6, #0
 100c594:	d050      	beq.n	100c638 <__utf8_mbtowc+0x1b0>
 100c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 100c59a:	bf18      	it	ne
 100c59c:	3301      	addne	r3, #1
 100c59e:	2e01      	cmp	r6, #1
 100c5a0:	bf18      	it	ne
 100c5a2:	f894 c005 	ldrbne.w	ip, [r4, #5]
 100c5a6:	d04b      	beq.n	100c640 <__utf8_mbtowc+0x1b8>
 100c5a8:	28f0      	cmp	r0, #240	; 0xf0
 100c5aa:	d056      	beq.n	100c65a <__utf8_mbtowc+0x1d2>
 100c5ac:	f1a0 0ef4 	sub.w	lr, r0, #244	; 0xf4
 100c5b0:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 100c5b4:	fabe fe8e 	clz	lr, lr
 100c5b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 100c5bc:	bfd8      	it	le
 100c5be:	f04f 0e00 	movle.w	lr, #0
 100c5c2:	f1be 0f00 	cmp.w	lr, #0
 100c5c6:	d14b      	bne.n	100c660 <__utf8_mbtowc+0x1d8>
 100c5c8:	f1ac 0e80 	sub.w	lr, ip, #128	; 0x80
 100c5cc:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100c5d0:	d846      	bhi.n	100c660 <__utf8_mbtowc+0x1d8>
 100c5d2:	2e01      	cmp	r6, #1
 100c5d4:	f884 c005 	strb.w	ip, [r4, #5]
 100c5d8:	d047      	beq.n	100c66a <__utf8_mbtowc+0x1e2>
 100c5da:	1c5e      	adds	r6, r3, #1
 100c5dc:	6826      	ldr	r6, [r4, #0]
 100c5de:	bf18      	it	ne
 100c5e0:	3301      	addne	r3, #1
 100c5e2:	2e02      	cmp	r6, #2
 100c5e4:	d045      	beq.n	100c672 <__utf8_mbtowc+0x1ea>
 100c5e6:	79a6      	ldrb	r6, [r4, #6]
 100c5e8:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
 100c5ec:	2b3f      	cmp	r3, #63	; 0x3f
 100c5ee:	d837      	bhi.n	100c660 <__utf8_mbtowc+0x1d8>
 100c5f0:	5d52      	ldrb	r2, [r2, r5]
 100c5f2:	3501      	adds	r5, #1
 100c5f4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 100c5f8:	2b3f      	cmp	r3, #63	; 0x3f
 100c5fa:	d831      	bhi.n	100c660 <__utf8_mbtowc+0x1d8>
 100c5fc:	0483      	lsls	r3, r0, #18
 100c5fe:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
 100c602:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 100c606:	f40c 3c7c 	and.w	ip, ip, #258048	; 0x3f000
 100c60a:	01b0      	lsls	r0, r6, #6
 100c60c:	ea43 030c 	orr.w	r3, r3, ip
 100c610:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
 100c614:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 100c618:	4303      	orrs	r3, r0
 100c61a:	4628      	mov	r0, r5
 100c61c:	4313      	orrs	r3, r2
 100c61e:	2200      	movs	r2, #0
 100c620:	600b      	str	r3, [r1, #0]
 100c622:	6022      	str	r2, [r4, #0]
 100c624:	e762      	b.n	100c4ec <__utf8_mbtowc+0x64>
 100c626:	2601      	movs	r6, #1
 100c628:	42b3      	cmp	r3, r6
 100c62a:	6026      	str	r6, [r4, #0]
 100c62c:	d912      	bls.n	100c654 <__utf8_mbtowc+0x1cc>
 100c62e:	f812 c005 	ldrb.w	ip, [r2, r5]
 100c632:	2601      	movs	r6, #1
 100c634:	4435      	add	r5, r6
 100c636:	e778      	b.n	100c52a <__utf8_mbtowc+0xa2>
 100c638:	2601      	movs	r6, #1
 100c63a:	42b3      	cmp	r3, r6
 100c63c:	6026      	str	r6, [r4, #0]
 100c63e:	d909      	bls.n	100c654 <__utf8_mbtowc+0x1cc>
 100c640:	f812 c005 	ldrb.w	ip, [r2, r5]
 100c644:	2601      	movs	r6, #1
 100c646:	4435      	add	r5, r6
 100c648:	e7ae      	b.n	100c5a8 <__utf8_mbtowc+0x120>
 100c64a:	2602      	movs	r6, #2
 100c64c:	42b3      	cmp	r3, r6
 100c64e:	6026      	str	r6, [r4, #0]
 100c650:	f47f af7b 	bne.w	100c54a <__utf8_mbtowc+0xc2>
 100c654:	f06f 0001 	mvn.w	r0, #1
 100c658:	e748      	b.n	100c4ec <__utf8_mbtowc+0x64>
 100c65a:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 100c65e:	dcb3      	bgt.n	100c5c8 <__utf8_mbtowc+0x140>
 100c660:	238a      	movs	r3, #138	; 0x8a
 100c662:	f04f 30ff 	mov.w	r0, #4294967295
 100c666:	603b      	str	r3, [r7, #0]
 100c668:	e740      	b.n	100c4ec <__utf8_mbtowc+0x64>
 100c66a:	2602      	movs	r6, #2
 100c66c:	42b3      	cmp	r3, r6
 100c66e:	6026      	str	r6, [r4, #0]
 100c670:	d0f0      	beq.n	100c654 <__utf8_mbtowc+0x1cc>
 100c672:	5d56      	ldrb	r6, [r2, r5]
 100c674:	3501      	adds	r5, #1
 100c676:	f1a6 0e80 	sub.w	lr, r6, #128	; 0x80
 100c67a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 100c67e:	d8ef      	bhi.n	100c660 <__utf8_mbtowc+0x1d8>
 100c680:	f04f 0e03 	mov.w	lr, #3
 100c684:	4573      	cmp	r3, lr
 100c686:	71a6      	strb	r6, [r4, #6]
 100c688:	f8c4 e000 	str.w	lr, [r4]
 100c68c:	d1b0      	bne.n	100c5f0 <__utf8_mbtowc+0x168>
 100c68e:	e7e1      	b.n	100c654 <__utf8_mbtowc+0x1cc>

0100c690 <__sjis_mbtowc>:
 100c690:	b4f0      	push	{r4, r5, r6, r7}
 100c692:	b082      	sub	sp, #8
 100c694:	4606      	mov	r6, r0
 100c696:	9f06      	ldr	r7, [sp, #24]
 100c698:	2900      	cmp	r1, #0
 100c69a:	d035      	beq.n	100c708 <__sjis_mbtowc+0x78>
 100c69c:	4610      	mov	r0, r2
 100c69e:	b332      	cbz	r2, 100c6ee <__sjis_mbtowc+0x5e>
 100c6a0:	2b00      	cmp	r3, #0
 100c6a2:	d033      	beq.n	100c70c <__sjis_mbtowc+0x7c>
 100c6a4:	6838      	ldr	r0, [r7, #0]
 100c6a6:	7814      	ldrb	r4, [r2, #0]
 100c6a8:	bb20      	cbnz	r0, 100c6f4 <__sjis_mbtowc+0x64>
 100c6aa:	f1a4 0581 	sub.w	r5, r4, #129	; 0x81
 100c6ae:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
 100c6b2:	280f      	cmp	r0, #15
 100c6b4:	bf88      	it	hi
 100c6b6:	2d1e      	cmphi	r5, #30
 100c6b8:	d81e      	bhi.n	100c6f8 <__sjis_mbtowc+0x68>
 100c6ba:	2001      	movs	r0, #1
 100c6bc:	4283      	cmp	r3, r0
 100c6be:	713c      	strb	r4, [r7, #4]
 100c6c0:	6038      	str	r0, [r7, #0]
 100c6c2:	d923      	bls.n	100c70c <__sjis_mbtowc+0x7c>
 100c6c4:	7854      	ldrb	r4, [r2, #1]
 100c6c6:	2002      	movs	r0, #2
 100c6c8:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 100c6cc:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
 100c6d0:	2a7c      	cmp	r2, #124	; 0x7c
 100c6d2:	bf88      	it	hi
 100c6d4:	2b3e      	cmphi	r3, #62	; 0x3e
 100c6d6:	bf95      	itete	ls
 100c6d8:	793a      	ldrbls	r2, [r7, #4]
 100c6da:	f04f 30ff 	movhi.w	r0, #4294967295
 100c6de:	2300      	movls	r3, #0
 100c6e0:	238a      	movhi	r3, #138	; 0x8a
 100c6e2:	bf8f      	iteee	hi
 100c6e4:	6033      	strhi	r3, [r6, #0]
 100c6e6:	eb04 2402 	addls.w	r4, r4, r2, lsl #8
 100c6ea:	600c      	strls	r4, [r1, #0]
 100c6ec:	603b      	strls	r3, [r7, #0]
 100c6ee:	b002      	add	sp, #8
 100c6f0:	bcf0      	pop	{r4, r5, r6, r7}
 100c6f2:	4770      	bx	lr
 100c6f4:	2801      	cmp	r0, #1
 100c6f6:	d0e7      	beq.n	100c6c8 <__sjis_mbtowc+0x38>
 100c6f8:	600c      	str	r4, [r1, #0]
 100c6fa:	7810      	ldrb	r0, [r2, #0]
 100c6fc:	3000      	adds	r0, #0
 100c6fe:	bf18      	it	ne
 100c700:	2001      	movne	r0, #1
 100c702:	b002      	add	sp, #8
 100c704:	bcf0      	pop	{r4, r5, r6, r7}
 100c706:	4770      	bx	lr
 100c708:	a901      	add	r1, sp, #4
 100c70a:	e7c7      	b.n	100c69c <__sjis_mbtowc+0xc>
 100c70c:	f06f 0001 	mvn.w	r0, #1
 100c710:	e7ed      	b.n	100c6ee <__sjis_mbtowc+0x5e>
 100c712:	bf00      	nop

0100c714 <__eucjp_mbtowc>:
 100c714:	b4f0      	push	{r4, r5, r6, r7}
 100c716:	b082      	sub	sp, #8
 100c718:	4607      	mov	r7, r0
 100c71a:	9e06      	ldr	r6, [sp, #24]
 100c71c:	2900      	cmp	r1, #0
 100c71e:	d040      	beq.n	100c7a2 <__eucjp_mbtowc+0x8e>
 100c720:	4610      	mov	r0, r2
 100c722:	b37a      	cbz	r2, 100c784 <__eucjp_mbtowc+0x70>
 100c724:	2b00      	cmp	r3, #0
 100c726:	d048      	beq.n	100c7ba <__eucjp_mbtowc+0xa6>
 100c728:	6830      	ldr	r0, [r6, #0]
 100c72a:	7814      	ldrb	r4, [r2, #0]
 100c72c:	bb68      	cbnz	r0, 100c78a <__eucjp_mbtowc+0x76>
 100c72e:	f1a4 058e 	sub.w	r5, r4, #142	; 0x8e
 100c732:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
 100c736:	285d      	cmp	r0, #93	; 0x5d
 100c738:	bf88      	it	hi
 100c73a:	2d01      	cmphi	r5, #1
 100c73c:	d829      	bhi.n	100c792 <__eucjp_mbtowc+0x7e>
 100c73e:	2001      	movs	r0, #1
 100c740:	4283      	cmp	r3, r0
 100c742:	7134      	strb	r4, [r6, #4]
 100c744:	6030      	str	r0, [r6, #0]
 100c746:	d938      	bls.n	100c7ba <__eucjp_mbtowc+0xa6>
 100c748:	7854      	ldrb	r4, [r2, #1]
 100c74a:	2002      	movs	r0, #2
 100c74c:	f1a4 05a1 	sub.w	r5, r4, #161	; 0xa1
 100c750:	2d5d      	cmp	r5, #93	; 0x5d
 100c752:	d835      	bhi.n	100c7c0 <__eucjp_mbtowc+0xac>
 100c754:	7935      	ldrb	r5, [r6, #4]
 100c756:	2d8f      	cmp	r5, #143	; 0x8f
 100c758:	d125      	bne.n	100c7a6 <__eucjp_mbtowc+0x92>
 100c75a:	4298      	cmp	r0, r3
 100c75c:	7174      	strb	r4, [r6, #5]
 100c75e:	f04f 0402 	mov.w	r4, #2
 100c762:	6034      	str	r4, [r6, #0]
 100c764:	4604      	mov	r4, r0
 100c766:	d228      	bcs.n	100c7ba <__eucjp_mbtowc+0xa6>
 100c768:	5d14      	ldrb	r4, [r2, r4]
 100c76a:	3001      	adds	r0, #1
 100c76c:	f1a4 03a1 	sub.w	r3, r4, #161	; 0xa1
 100c770:	2b5d      	cmp	r3, #93	; 0x5d
 100c772:	d825      	bhi.n	100c7c0 <__eucjp_mbtowc+0xac>
 100c774:	7972      	ldrb	r2, [r6, #5]
 100c776:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 100c77a:	2300      	movs	r3, #0
 100c77c:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 100c780:	600c      	str	r4, [r1, #0]
 100c782:	6033      	str	r3, [r6, #0]
 100c784:	b002      	add	sp, #8
 100c786:	bcf0      	pop	{r4, r5, r6, r7}
 100c788:	4770      	bx	lr
 100c78a:	2801      	cmp	r0, #1
 100c78c:	d0de      	beq.n	100c74c <__eucjp_mbtowc+0x38>
 100c78e:	2802      	cmp	r0, #2
 100c790:	d011      	beq.n	100c7b6 <__eucjp_mbtowc+0xa2>
 100c792:	600c      	str	r4, [r1, #0]
 100c794:	7810      	ldrb	r0, [r2, #0]
 100c796:	3000      	adds	r0, #0
 100c798:	bf18      	it	ne
 100c79a:	2001      	movne	r0, #1
 100c79c:	b002      	add	sp, #8
 100c79e:	bcf0      	pop	{r4, r5, r6, r7}
 100c7a0:	4770      	bx	lr
 100c7a2:	a901      	add	r1, sp, #4
 100c7a4:	e7bc      	b.n	100c720 <__eucjp_mbtowc+0xc>
 100c7a6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 100c7aa:	2300      	movs	r3, #0
 100c7ac:	600c      	str	r4, [r1, #0]
 100c7ae:	6033      	str	r3, [r6, #0]
 100c7b0:	b002      	add	sp, #8
 100c7b2:	bcf0      	pop	{r4, r5, r6, r7}
 100c7b4:	4770      	bx	lr
 100c7b6:	2001      	movs	r0, #1
 100c7b8:	e7d8      	b.n	100c76c <__eucjp_mbtowc+0x58>
 100c7ba:	f06f 0001 	mvn.w	r0, #1
 100c7be:	e7e1      	b.n	100c784 <__eucjp_mbtowc+0x70>
 100c7c0:	238a      	movs	r3, #138	; 0x8a
 100c7c2:	f04f 30ff 	mov.w	r0, #4294967295
 100c7c6:	603b      	str	r3, [r7, #0]
 100c7c8:	e7dc      	b.n	100c784 <__eucjp_mbtowc+0x70>
 100c7ca:	bf00      	nop

0100c7cc <__jis_mbtowc>:
 100c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100c7d0:	b083      	sub	sp, #12
 100c7d2:	4682      	mov	sl, r0
 100c7d4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 100c7d8:	2900      	cmp	r1, #0
 100c7da:	d042      	beq.n	100c862 <__jis_mbtowc+0x96>
 100c7dc:	2a00      	cmp	r2, #0
 100c7de:	d043      	beq.n	100c868 <__jis_mbtowc+0x9c>
 100c7e0:	2b00      	cmp	r3, #0
 100c7e2:	d07d      	beq.n	100c8e0 <__jis_mbtowc+0x114>
 100c7e4:	f89e 4000 	ldrb.w	r4, [lr]
 100c7e8:	4610      	mov	r0, r2
 100c7ea:	f646 1784 	movw	r7, #27012	; 0x6984
 100c7ee:	3a01      	subs	r2, #1
 100c7f0:	f1c0 0801 	rsb	r8, r0, #1
 100c7f4:	f2c0 1705 	movt	r7, #261	; 0x105
 100c7f8:	7855      	ldrb	r5, [r2, #1]
 100c7fa:	eb02 0c08 	add.w	ip, r2, r8
 100c7fe:	f102 0b01 	add.w	fp, r2, #1
 100c802:	2d28      	cmp	r5, #40	; 0x28
 100c804:	d06a      	beq.n	100c8dc <__jis_mbtowc+0x110>
 100c806:	d81d      	bhi.n	100c844 <__jis_mbtowc+0x78>
 100c808:	2d1b      	cmp	r5, #27
 100c80a:	bf08      	it	eq
 100c80c:	2600      	moveq	r6, #0
 100c80e:	d00a      	beq.n	100c826 <__jis_mbtowc+0x5a>
 100c810:	2d24      	cmp	r5, #36	; 0x24
 100c812:	bf08      	it	eq
 100c814:	2601      	moveq	r6, #1
 100c816:	d006      	beq.n	100c826 <__jis_mbtowc+0x5a>
 100c818:	b30d      	cbz	r5, 100c85e <__jis_mbtowc+0x92>
 100c81a:	f1a5 0621 	sub.w	r6, r5, #33	; 0x21
 100c81e:	2e5e      	cmp	r6, #94	; 0x5e
 100c820:	bf34      	ite	cc
 100c822:	2607      	movcc	r6, #7
 100c824:	2608      	movcs	r6, #8
 100c826:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 100c82a:	443c      	add	r4, r7
 100c82c:	eb04 0906 	add.w	r9, r4, r6
 100c830:	5da4      	ldrb	r4, [r4, r6]
 100c832:	f899 6048 	ldrb.w	r6, [r9, #72]	; 0x48
 100c836:	2e05      	cmp	r6, #5
 100c838:	d855      	bhi.n	100c8e6 <__jis_mbtowc+0x11a>
 100c83a:	e8df f006 	tbb	[pc, r6]
 100c83e:	2d23      	.short	0x2d23
 100c840:	1b4c4839 	.word	0x1b4c4839
 100c844:	2d42      	cmp	r5, #66	; 0x42
 100c846:	bf08      	it	eq
 100c848:	2604      	moveq	r6, #4
 100c84a:	d0ec      	beq.n	100c826 <__jis_mbtowc+0x5a>
 100c84c:	2d4a      	cmp	r5, #74	; 0x4a
 100c84e:	bf08      	it	eq
 100c850:	2605      	moveq	r6, #5
 100c852:	d0e8      	beq.n	100c826 <__jis_mbtowc+0x5a>
 100c854:	2d40      	cmp	r5, #64	; 0x40
 100c856:	bf08      	it	eq
 100c858:	2603      	moveq	r6, #3
 100c85a:	d1de      	bne.n	100c81a <__jis_mbtowc+0x4e>
 100c85c:	e7e3      	b.n	100c826 <__jis_mbtowc+0x5a>
 100c85e:	2606      	movs	r6, #6
 100c860:	e7e1      	b.n	100c826 <__jis_mbtowc+0x5a>
 100c862:	a901      	add	r1, sp, #4
 100c864:	2a00      	cmp	r2, #0
 100c866:	d1bb      	bne.n	100c7e0 <__jis_mbtowc+0x14>
 100c868:	2001      	movs	r0, #1
 100c86a:	f8ce 2000 	str.w	r2, [lr]
 100c86e:	b003      	add	sp, #12
 100c870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c874:	2300      	movs	r3, #0
 100c876:	f8ce 3000 	str.w	r3, [lr]
 100c87a:	4618      	mov	r0, r3
 100c87c:	600b      	str	r3, [r1, #0]
 100c87e:	b003      	add	sp, #12
 100c880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c884:	2300      	movs	r3, #0
 100c886:	f8ce 3000 	str.w	r3, [lr]
 100c88a:	7803      	ldrb	r3, [r0, #0]
 100c88c:	f10c 0001 	add.w	r0, ip, #1
 100c890:	600b      	str	r3, [r1, #0]
 100c892:	b003      	add	sp, #12
 100c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c898:	f88e 5004 	strb.w	r5, [lr, #4]
 100c89c:	eb0b 0508 	add.w	r5, fp, r8
 100c8a0:	429d      	cmp	r5, r3
 100c8a2:	465a      	mov	r2, fp
 100c8a4:	d3a8      	bcc.n	100c7f8 <__jis_mbtowc+0x2c>
 100c8a6:	f8ce 4000 	str.w	r4, [lr]
 100c8aa:	f06f 0001 	mvn.w	r0, #1
 100c8ae:	e7e6      	b.n	100c87e <__jis_mbtowc+0xb2>
 100c8b0:	f89e 2004 	ldrb.w	r2, [lr, #4]
 100c8b4:	2301      	movs	r3, #1
 100c8b6:	f8ce 3000 	str.w	r3, [lr]
 100c8ba:	eb0c 0003 	add.w	r0, ip, r3
 100c8be:	f89b 3000 	ldrb.w	r3, [fp]
 100c8c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 100c8c6:	600b      	str	r3, [r1, #0]
 100c8c8:	b003      	add	sp, #12
 100c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c8ce:	1c90      	adds	r0, r2, #2
 100c8d0:	eb0b 0508 	add.w	r5, fp, r8
 100c8d4:	e7e4      	b.n	100c8a0 <__jis_mbtowc+0xd4>
 100c8d6:	eb0b 0508 	add.w	r5, fp, r8
 100c8da:	e7e1      	b.n	100c8a0 <__jis_mbtowc+0xd4>
 100c8dc:	2602      	movs	r6, #2
 100c8de:	e7a2      	b.n	100c826 <__jis_mbtowc+0x5a>
 100c8e0:	f06f 0001 	mvn.w	r0, #1
 100c8e4:	e7cb      	b.n	100c87e <__jis_mbtowc+0xb2>
 100c8e6:	238a      	movs	r3, #138	; 0x8a
 100c8e8:	f04f 30ff 	mov.w	r0, #4294967295
 100c8ec:	f8ca 3000 	str.w	r3, [sl]
 100c8f0:	e7c5      	b.n	100c87e <__jis_mbtowc+0xb2>
 100c8f2:	bf00      	nop
	...

0100c900 <memcpy>:
 100c900:	e1a0c000 	mov	ip, r0
 100c904:	e3520040 	cmp	r2, #64	; 0x40
 100c908:	aa000028 	bge	100c9b0 <memcpy+0xb0>
 100c90c:	e202303c 	and	r3, r2, #60	; 0x3c
 100c910:	e08cc003 	add	ip, ip, r3
 100c914:	e0811003 	add	r1, r1, r3
 100c918:	e263303a 	rsb	r3, r3, #58	; 0x3a
 100c91c:	e08ff083 	add	pc, pc, r3, lsl #1
 100c920:	e511303c 	ldr	r3, [r1, #-60]	; 0xffffffc4
 100c924:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
 100c928:	e5113038 	ldr	r3, [r1, #-56]	; 0xffffffc8
 100c92c:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
 100c930:	e5113034 	ldr	r3, [r1, #-52]	; 0xffffffcc
 100c934:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
 100c938:	e5113030 	ldr	r3, [r1, #-48]	; 0xffffffd0
 100c93c:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
 100c940:	e511302c 	ldr	r3, [r1, #-44]	; 0xffffffd4
 100c944:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
 100c948:	e5113028 	ldr	r3, [r1, #-40]	; 0xffffffd8
 100c94c:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
 100c950:	e5113024 	ldr	r3, [r1, #-36]	; 0xffffffdc
 100c954:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
 100c958:	e5113020 	ldr	r3, [r1, #-32]	; 0xffffffe0
 100c95c:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
 100c960:	e511301c 	ldr	r3, [r1, #-28]	; 0xffffffe4
 100c964:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
 100c968:	e5113018 	ldr	r3, [r1, #-24]	; 0xffffffe8
 100c96c:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
 100c970:	e5113014 	ldr	r3, [r1, #-20]	; 0xffffffec
 100c974:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
 100c978:	e5113010 	ldr	r3, [r1, #-16]
 100c97c:	e50c3010 	str	r3, [ip, #-16]
 100c980:	e511300c 	ldr	r3, [r1, #-12]
 100c984:	e50c300c 	str	r3, [ip, #-12]
 100c988:	e5113008 	ldr	r3, [r1, #-8]
 100c98c:	e50c3008 	str	r3, [ip, #-8]
 100c990:	e5113004 	ldr	r3, [r1, #-4]
 100c994:	e50c3004 	str	r3, [ip, #-4]
 100c998:	e1b02f82 	lsls	r2, r2, #31
 100c99c:	20d130b2 	ldrhcs	r3, [r1], #2
 100c9a0:	15d11000 	ldrbne	r1, [r1]
 100c9a4:	20cc30b2 	strhcs	r3, [ip], #2
 100c9a8:	15cc1000 	strbne	r1, [ip]
 100c9ac:	e12fff1e 	bx	lr
 100c9b0:	e52da020 	str	sl, [sp, #-32]!	; 0xffffffe0
 100c9b4:	e201a007 	and	sl, r1, #7
 100c9b8:	e20c3007 	and	r3, ip, #7
 100c9bc:	e153000a 	cmp	r3, sl
 100c9c0:	1a0000f1 	bne	100cd8c <memcpy+0x48c>
 100c9c4:	eeb00a40 	vmov.f32	s0, s0
 100c9c8:	e1b0ae8c 	lsls	sl, ip, #29
 100c9cc:	0a000008 	beq	100c9f4 <memcpy+0xf4>
 100c9d0:	e27aa000 	rsbs	sl, sl, #0
 100c9d4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 100c9d8:	44913004 	ldrmi	r3, [r1], #4
 100c9dc:	448c3004 	strmi	r3, [ip], #4
 100c9e0:	e1b0a10a 	lsls	sl, sl, #2
 100c9e4:	20d130b2 	ldrhcs	r3, [r1], #2
 100c9e8:	14d1a001 	ldrbne	sl, [r1], #1
 100c9ec:	20cc30b2 	strhcs	r3, [ip], #2
 100c9f0:	14cca001 	strbne	sl, [ip], #1
 100c9f4:	e252a040 	subs	sl, r2, #64	; 0x40
 100c9f8:	ba000017 	blt	100ca5c <memcpy+0x15c>
 100c9fc:	e35a0c02 	cmp	sl, #512	; 0x200
 100ca00:	aa000032 	bge	100cad0 <memcpy+0x1d0>
 100ca04:	ed910b00 	vldr	d0, [r1]
 100ca08:	e25aa040 	subs	sl, sl, #64	; 0x40
 100ca0c:	ed911b02 	vldr	d1, [r1, #8]
 100ca10:	ed8c0b00 	vstr	d0, [ip]
 100ca14:	ed910b04 	vldr	d0, [r1, #16]
 100ca18:	ed8c1b02 	vstr	d1, [ip, #8]
 100ca1c:	ed911b06 	vldr	d1, [r1, #24]
 100ca20:	ed8c0b04 	vstr	d0, [ip, #16]
 100ca24:	ed910b08 	vldr	d0, [r1, #32]
 100ca28:	ed8c1b06 	vstr	d1, [ip, #24]
 100ca2c:	ed911b0a 	vldr	d1, [r1, #40]	; 0x28
 100ca30:	ed8c0b08 	vstr	d0, [ip, #32]
 100ca34:	ed910b0c 	vldr	d0, [r1, #48]	; 0x30
 100ca38:	ed8c1b0a 	vstr	d1, [ip, #40]	; 0x28
 100ca3c:	ed911b0e 	vldr	d1, [r1, #56]	; 0x38
 100ca40:	ed8c0b0c 	vstr	d0, [ip, #48]	; 0x30
 100ca44:	e2811040 	add	r1, r1, #64	; 0x40
 100ca48:	ed8c1b0e 	vstr	d1, [ip, #56]	; 0x38
 100ca4c:	e28cc040 	add	ip, ip, #64	; 0x40
 100ca50:	aaffffeb 	bge	100ca04 <memcpy+0x104>
 100ca54:	e31a003f 	tst	sl, #63	; 0x3f
 100ca58:	0a00001a 	beq	100cac8 <memcpy+0x1c8>
 100ca5c:	e20a3038 	and	r3, sl, #56	; 0x38
 100ca60:	e08cc003 	add	ip, ip, r3
 100ca64:	e0811003 	add	r1, r1, r3
 100ca68:	e2633034 	rsb	r3, r3, #52	; 0x34
 100ca6c:	e08ff003 	add	pc, pc, r3
 100ca70:	ed110b0e 	vldr	d0, [r1, #-56]	; 0xffffffc8
 100ca74:	ed0c0b0e 	vstr	d0, [ip, #-56]	; 0xffffffc8
 100ca78:	ed110b0c 	vldr	d0, [r1, #-48]	; 0xffffffd0
 100ca7c:	ed0c0b0c 	vstr	d0, [ip, #-48]	; 0xffffffd0
 100ca80:	ed110b0a 	vldr	d0, [r1, #-40]	; 0xffffffd8
 100ca84:	ed0c0b0a 	vstr	d0, [ip, #-40]	; 0xffffffd8
 100ca88:	ed110b08 	vldr	d0, [r1, #-32]	; 0xffffffe0
 100ca8c:	ed0c0b08 	vstr	d0, [ip, #-32]	; 0xffffffe0
 100ca90:	ed110b06 	vldr	d0, [r1, #-24]	; 0xffffffe8
 100ca94:	ed0c0b06 	vstr	d0, [ip, #-24]	; 0xffffffe8
 100ca98:	ed110b04 	vldr	d0, [r1, #-16]
 100ca9c:	ed0c0b04 	vstr	d0, [ip, #-16]
 100caa0:	ed110b02 	vldr	d0, [r1, #-8]
 100caa4:	ed0c0b02 	vstr	d0, [ip, #-8]
 100caa8:	e31a0004 	tst	sl, #4
 100caac:	14913004 	ldrne	r3, [r1], #4
 100cab0:	148c3004 	strne	r3, [ip], #4
 100cab4:	e1b0af8a 	lsls	sl, sl, #31
 100cab8:	20d130b2 	ldrhcs	r3, [r1], #2
 100cabc:	15d1a000 	ldrbne	sl, [r1]
 100cac0:	20cc30b2 	strhcs	r3, [ip], #2
 100cac4:	15cca000 	strbne	sl, [ip]
 100cac8:	e49da020 	ldr	sl, [sp], #32
 100cacc:	e12fff1e 	bx	lr
 100cad0:	ed913b00 	vldr	d3, [r1]
 100cad4:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100cad8:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100cadc:	ed916b30 	vldr	d6, [r1, #192]	; 0xc0
 100cae0:	ed917b40 	vldr	d7, [r1, #256]	; 0x100
 100cae4:	ed910b02 	vldr	d0, [r1, #8]
 100cae8:	ed911b04 	vldr	d1, [r1, #16]
 100caec:	ed912b06 	vldr	d2, [r1, #24]
 100caf0:	e2811020 	add	r1, r1, #32
 100caf4:	e25aad0a 	subs	sl, sl, #640	; 0x280
 100caf8:	ba000055 	blt	100cc54 <memcpy+0x354>
 100cafc:	ed8c3b00 	vstr	d3, [ip]
 100cb00:	ed913b00 	vldr	d3, [r1]
 100cb04:	ed8c0b02 	vstr	d0, [ip, #8]
 100cb08:	ed910b02 	vldr	d0, [r1, #8]
 100cb0c:	ed8c1b04 	vstr	d1, [ip, #16]
 100cb10:	ed911b04 	vldr	d1, [r1, #16]
 100cb14:	ed8c2b06 	vstr	d2, [ip, #24]
 100cb18:	ed912b06 	vldr	d2, [r1, #24]
 100cb1c:	ed8c3b08 	vstr	d3, [ip, #32]
 100cb20:	ed913b48 	vldr	d3, [r1, #288]	; 0x120
 100cb24:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100cb28:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100cb2c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100cb30:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100cb34:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100cb38:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100cb3c:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 100cb40:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100cb44:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100cb48:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100cb4c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100cb50:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100cb54:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100cb58:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100cb5c:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 100cb60:	ed914b58 	vldr	d4, [r1, #352]	; 0x160
 100cb64:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100cb68:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100cb6c:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100cb70:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100cb74:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100cb78:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100cb7c:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 100cb80:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100cb84:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 100cb88:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 100cb8c:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 100cb90:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 100cb94:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 100cb98:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 100cb9c:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 100cba0:	ed915b68 	vldr	d5, [r1, #416]	; 0x1a0
 100cba4:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 100cba8:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 100cbac:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 100cbb0:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 100cbb4:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 100cbb8:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 100cbbc:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 100cbc0:	e28110c0 	add	r1, r1, #192	; 0xc0
 100cbc4:	ed8c6b00 	vstr	d6, [ip]
 100cbc8:	ed916b00 	vldr	d6, [r1]
 100cbcc:	ed8c0b02 	vstr	d0, [ip, #8]
 100cbd0:	ed910b02 	vldr	d0, [r1, #8]
 100cbd4:	ed8c1b04 	vstr	d1, [ip, #16]
 100cbd8:	ed911b04 	vldr	d1, [r1, #16]
 100cbdc:	ed8c2b06 	vstr	d2, [ip, #24]
 100cbe0:	ed912b06 	vldr	d2, [r1, #24]
 100cbe4:	ed8c6b08 	vstr	d6, [ip, #32]
 100cbe8:	ed916b48 	vldr	d6, [r1, #288]	; 0x120
 100cbec:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100cbf0:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100cbf4:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100cbf8:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100cbfc:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100cc00:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100cc04:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 100cc08:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 100cc0c:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100cc10:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100cc14:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100cc18:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100cc1c:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100cc20:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100cc24:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 100cc28:	ed917b58 	vldr	d7, [r1, #352]	; 0x160
 100cc2c:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100cc30:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100cc34:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100cc38:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100cc3c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100cc40:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100cc44:	e28cc080 	add	ip, ip, #128	; 0x80
 100cc48:	e2811080 	add	r1, r1, #128	; 0x80
 100cc4c:	e25aad05 	subs	sl, sl, #320	; 0x140
 100cc50:	aaffffa9 	bge	100cafc <memcpy+0x1fc>
 100cc54:	ed8c3b00 	vstr	d3, [ip]
 100cc58:	ed913b00 	vldr	d3, [r1]
 100cc5c:	ed8c0b02 	vstr	d0, [ip, #8]
 100cc60:	ed910b02 	vldr	d0, [r1, #8]
 100cc64:	ed8c1b04 	vstr	d1, [ip, #16]
 100cc68:	ed911b04 	vldr	d1, [r1, #16]
 100cc6c:	ed8c2b06 	vstr	d2, [ip, #24]
 100cc70:	ed912b06 	vldr	d2, [r1, #24]
 100cc74:	ed8c3b08 	vstr	d3, [ip, #32]
 100cc78:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100cc7c:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100cc80:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100cc84:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100cc88:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100cc8c:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100cc90:	ed8c4b10 	vstr	d4, [ip, #64]	; 0x40
 100cc94:	ed914b10 	vldr	d4, [r1, #64]	; 0x40
 100cc98:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100cc9c:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100cca0:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100cca4:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100cca8:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100ccac:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100ccb0:	ed8c4b18 	vstr	d4, [ip, #96]	; 0x60
 100ccb4:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100ccb8:	ed910b1a 	vldr	d0, [r1, #104]	; 0x68
 100ccbc:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100ccc0:	ed911b1c 	vldr	d1, [r1, #112]	; 0x70
 100ccc4:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100ccc8:	ed912b1e 	vldr	d2, [r1, #120]	; 0x78
 100cccc:	ed8c5b20 	vstr	d5, [ip, #128]	; 0x80
 100ccd0:	ed915b20 	vldr	d5, [r1, #128]	; 0x80
 100ccd4:	ed8c0b22 	vstr	d0, [ip, #136]	; 0x88
 100ccd8:	ed910b22 	vldr	d0, [r1, #136]	; 0x88
 100ccdc:	ed8c1b24 	vstr	d1, [ip, #144]	; 0x90
 100cce0:	ed911b24 	vldr	d1, [r1, #144]	; 0x90
 100cce4:	ed8c2b26 	vstr	d2, [ip, #152]	; 0x98
 100cce8:	ed912b26 	vldr	d2, [r1, #152]	; 0x98
 100ccec:	ed8c5b28 	vstr	d5, [ip, #160]	; 0xa0
 100ccf0:	ed8c0b2a 	vstr	d0, [ip, #168]	; 0xa8
 100ccf4:	ed910b2a 	vldr	d0, [r1, #168]	; 0xa8
 100ccf8:	ed8c1b2c 	vstr	d1, [ip, #176]	; 0xb0
 100ccfc:	ed911b2c 	vldr	d1, [r1, #176]	; 0xb0
 100cd00:	ed8c2b2e 	vstr	d2, [ip, #184]	; 0xb8
 100cd04:	ed912b2e 	vldr	d2, [r1, #184]	; 0xb8
 100cd08:	e28110c0 	add	r1, r1, #192	; 0xc0
 100cd0c:	e28cc0c0 	add	ip, ip, #192	; 0xc0
 100cd10:	ed8c6b00 	vstr	d6, [ip]
 100cd14:	ed916b00 	vldr	d6, [r1]
 100cd18:	ed8c0b02 	vstr	d0, [ip, #8]
 100cd1c:	ed910b02 	vldr	d0, [r1, #8]
 100cd20:	ed8c1b04 	vstr	d1, [ip, #16]
 100cd24:	ed911b04 	vldr	d1, [r1, #16]
 100cd28:	ed8c2b06 	vstr	d2, [ip, #24]
 100cd2c:	ed912b06 	vldr	d2, [r1, #24]
 100cd30:	ed8c6b08 	vstr	d6, [ip, #32]
 100cd34:	ed8c0b0a 	vstr	d0, [ip, #40]	; 0x28
 100cd38:	ed910b0a 	vldr	d0, [r1, #40]	; 0x28
 100cd3c:	ed8c1b0c 	vstr	d1, [ip, #48]	; 0x30
 100cd40:	ed911b0c 	vldr	d1, [r1, #48]	; 0x30
 100cd44:	ed8c2b0e 	vstr	d2, [ip, #56]	; 0x38
 100cd48:	ed912b0e 	vldr	d2, [r1, #56]	; 0x38
 100cd4c:	ed8c7b10 	vstr	d7, [ip, #64]	; 0x40
 100cd50:	ed917b10 	vldr	d7, [r1, #64]	; 0x40
 100cd54:	ed8c0b12 	vstr	d0, [ip, #72]	; 0x48
 100cd58:	ed910b12 	vldr	d0, [r1, #72]	; 0x48
 100cd5c:	ed8c1b14 	vstr	d1, [ip, #80]	; 0x50
 100cd60:	ed911b14 	vldr	d1, [r1, #80]	; 0x50
 100cd64:	ed8c2b16 	vstr	d2, [ip, #88]	; 0x58
 100cd68:	ed912b16 	vldr	d2, [r1, #88]	; 0x58
 100cd6c:	ed8c7b18 	vstr	d7, [ip, #96]	; 0x60
 100cd70:	e2811060 	add	r1, r1, #96	; 0x60
 100cd74:	ed8c0b1a 	vstr	d0, [ip, #104]	; 0x68
 100cd78:	ed8c1b1c 	vstr	d1, [ip, #112]	; 0x70
 100cd7c:	ed8c2b1e 	vstr	d2, [ip, #120]	; 0x78
 100cd80:	e28cc080 	add	ip, ip, #128	; 0x80
 100cd84:	e28aad05 	add	sl, sl, #320	; 0x140
 100cd88:	eaffff1d 	b	100ca04 <memcpy+0x104>
 100cd8c:	f5d1f000 	pld	[r1]
 100cd90:	f5d1f040 	pld	[r1, #64]	; 0x40
 100cd94:	e1b0ae8c 	lsls	sl, ip, #29
 100cd98:	f5d1f080 	pld	[r1, #128]	; 0x80
 100cd9c:	0a000008 	beq	100cdc4 <memcpy+0x4c4>
 100cda0:	e27aa000 	rsbs	sl, sl, #0
 100cda4:	e0422eaa 	sub	r2, r2, sl, lsr #29
 100cda8:	44913004 	ldrmi	r3, [r1], #4
 100cdac:	448c3004 	strmi	r3, [ip], #4
 100cdb0:	e1b0a10a 	lsls	sl, sl, #2
 100cdb4:	14d13001 	ldrbne	r3, [r1], #1
 100cdb8:	20d1a0b2 	ldrhcs	sl, [r1], #2
 100cdbc:	14cc3001 	strbne	r3, [ip], #1
 100cdc0:	20cca0b2 	strhcs	sl, [ip], #2
 100cdc4:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
 100cdc8:	e2522040 	subs	r2, r2, #64	; 0x40
 100cdcc:	449da020 	ldrmi	sl, [sp], #32
 100cdd0:	4afffecd 	bmi	100c90c <memcpy+0xc>
 100cdd4:	f5d1f100 	pld	[r1, #256]	; 0x100
 100cdd8:	e2411004 	sub	r1, r1, #4
 100cddc:	e24cc008 	sub	ip, ip, #8
 100cde0:	e252a040 	subs	sl, r2, #64	; 0x40
 100cde4:	e5912004 	ldr	r2, [r1, #4]
 100cde8:	e5913008 	ldr	r3, [r1, #8]
 100cdec:	e1cd40f8 	strd	r4, [sp, #8]
 100cdf0:	e591400c 	ldr	r4, [r1, #12]
 100cdf4:	e5915010 	ldr	r5, [r1, #16]
 100cdf8:	e1cd61f0 	strd	r6, [sp, #16]
 100cdfc:	e5916014 	ldr	r6, [r1, #20]
 100ce00:	e5917018 	ldr	r7, [r1, #24]
 100ce04:	e1cd81f8 	strd	r8, [sp, #24]
 100ce08:	e591801c 	ldr	r8, [r1, #28]
 100ce0c:	e5b19020 	ldr	r9, [r1, #32]!
 100ce10:	ea000018 	b	100ce78 <memcpy+0x578>
 100ce14:	e1a00000 	nop			; (mov r0, r0)
 100ce18:	e1a00000 	nop			; (mov r0, r0)
 100ce1c:	e1a00000 	nop			; (mov r0, r0)
 100ce20:	e1a00000 	nop			; (mov r0, r0)
 100ce24:	e1a00000 	nop			; (mov r0, r0)
 100ce28:	e1a00000 	nop			; (mov r0, r0)
 100ce2c:	e1a00000 	nop			; (mov r0, r0)
 100ce30:	e1a00000 	nop			; (mov r0, r0)
 100ce34:	e1a00000 	nop			; (mov r0, r0)
 100ce38:	e1a00000 	nop			; (mov r0, r0)
 100ce3c:	e1a00000 	nop			; (mov r0, r0)
 100ce40:	f5d1f124 	pld	[r1, #292]	; 0x124
 100ce44:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 100ce48:	e5912024 	ldr	r2, [r1, #36]	; 0x24
 100ce4c:	e5913028 	ldr	r3, [r1, #40]	; 0x28
 100ce50:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 100ce54:	e591402c 	ldr	r4, [r1, #44]	; 0x2c
 100ce58:	e5915030 	ldr	r5, [r1, #48]	; 0x30
 100ce5c:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 100ce60:	e5916034 	ldr	r6, [r1, #52]	; 0x34
 100ce64:	e5917038 	ldr	r7, [r1, #56]	; 0x38
 100ce68:	e1ec84f0 	strd	r8, [ip, #64]!	; 0x40
 100ce6c:	e591803c 	ldr	r8, [r1, #60]	; 0x3c
 100ce70:	e5b19040 	ldr	r9, [r1, #64]!	; 0x40
 100ce74:	e25aa040 	subs	sl, sl, #64	; 0x40
 100ce78:	e1cc20f8 	strd	r2, [ip, #8]
 100ce7c:	e5912004 	ldr	r2, [r1, #4]
 100ce80:	e5913008 	ldr	r3, [r1, #8]
 100ce84:	e1cc41f0 	strd	r4, [ip, #16]
 100ce88:	e591400c 	ldr	r4, [r1, #12]
 100ce8c:	e5915010 	ldr	r5, [r1, #16]
 100ce90:	e1cc61f8 	strd	r6, [ip, #24]
 100ce94:	e5916014 	ldr	r6, [r1, #20]
 100ce98:	e5917018 	ldr	r7, [r1, #24]
 100ce9c:	e1cc82f0 	strd	r8, [ip, #32]
 100cea0:	e591801c 	ldr	r8, [r1, #28]
 100cea4:	e5919020 	ldr	r9, [r1, #32]
 100cea8:	2affffe4 	bcs	100ce40 <memcpy+0x540>
 100ceac:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
 100ceb0:	e2811024 	add	r1, r1, #36	; 0x24
 100ceb4:	e1cc43f0 	strd	r4, [ip, #48]	; 0x30
 100ceb8:	e1cd40d8 	ldrd	r4, [sp, #8]
 100cebc:	e1cc63f8 	strd	r6, [ip, #56]	; 0x38
 100cec0:	e1cd61d0 	ldrd	r6, [sp, #16]
 100cec4:	e1cc84f0 	strd	r8, [ip, #64]	; 0x40
 100cec8:	e1cd81d8 	ldrd	r8, [sp, #24]
 100cecc:	e28cc048 	add	ip, ip, #72	; 0x48
 100ced0:	e21a203f 	ands	r2, sl, #63	; 0x3f
 100ced4:	e49da020 	ldr	sl, [sp], #32
 100ced8:	1afffe8b 	bne	100c90c <memcpy+0xc>
 100cedc:	e12fff1e 	bx	lr

0100cee0 <memset>:
 100cee0:	b4f0      	push	{r4, r5, r6, r7}
 100cee2:	0786      	lsls	r6, r0, #30
 100cee4:	d046      	beq.n	100cf74 <memset+0x94>
 100cee6:	1e54      	subs	r4, r2, #1
 100cee8:	2a00      	cmp	r2, #0
 100ceea:	d03c      	beq.n	100cf66 <memset+0x86>
 100ceec:	b2ca      	uxtb	r2, r1
 100ceee:	4603      	mov	r3, r0
 100cef0:	e002      	b.n	100cef8 <memset+0x18>
 100cef2:	f114 34ff 	adds.w	r4, r4, #4294967295
 100cef6:	d336      	bcc.n	100cf66 <memset+0x86>
 100cef8:	f803 2b01 	strb.w	r2, [r3], #1
 100cefc:	079d      	lsls	r5, r3, #30
 100cefe:	d1f8      	bne.n	100cef2 <memset+0x12>
 100cf00:	2c03      	cmp	r4, #3
 100cf02:	d929      	bls.n	100cf58 <memset+0x78>
 100cf04:	b2cd      	uxtb	r5, r1
 100cf06:	2c0f      	cmp	r4, #15
 100cf08:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 100cf0c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 100cf10:	d933      	bls.n	100cf7a <memset+0x9a>
 100cf12:	f1a4 0610 	sub.w	r6, r4, #16
 100cf16:	f103 0720 	add.w	r7, r3, #32
 100cf1a:	f103 0210 	add.w	r2, r3, #16
 100cf1e:	0936      	lsrs	r6, r6, #4
 100cf20:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 100cf24:	e942 5504 	strd	r5, r5, [r2, #-16]
 100cf28:	e942 5502 	strd	r5, r5, [r2, #-8]
 100cf2c:	3210      	adds	r2, #16
 100cf2e:	42ba      	cmp	r2, r7
 100cf30:	d1f8      	bne.n	100cf24 <memset+0x44>
 100cf32:	1c72      	adds	r2, r6, #1
 100cf34:	f014 0f0c 	tst.w	r4, #12
 100cf38:	f004 060f 	and.w	r6, r4, #15
 100cf3c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 100cf40:	d013      	beq.n	100cf6a <memset+0x8a>
 100cf42:	1f33      	subs	r3, r6, #4
 100cf44:	f023 0303 	bic.w	r3, r3, #3
 100cf48:	3304      	adds	r3, #4
 100cf4a:	4413      	add	r3, r2
 100cf4c:	f842 5b04 	str.w	r5, [r2], #4
 100cf50:	4293      	cmp	r3, r2
 100cf52:	d1fb      	bne.n	100cf4c <memset+0x6c>
 100cf54:	f006 0403 	and.w	r4, r6, #3
 100cf58:	b12c      	cbz	r4, 100cf66 <memset+0x86>
 100cf5a:	b2c9      	uxtb	r1, r1
 100cf5c:	441c      	add	r4, r3
 100cf5e:	f803 1b01 	strb.w	r1, [r3], #1
 100cf62:	429c      	cmp	r4, r3
 100cf64:	d1fb      	bne.n	100cf5e <memset+0x7e>
 100cf66:	bcf0      	pop	{r4, r5, r6, r7}
 100cf68:	4770      	bx	lr
 100cf6a:	4634      	mov	r4, r6
 100cf6c:	4613      	mov	r3, r2
 100cf6e:	2c00      	cmp	r4, #0
 100cf70:	d1f3      	bne.n	100cf5a <memset+0x7a>
 100cf72:	e7f8      	b.n	100cf66 <memset+0x86>
 100cf74:	4614      	mov	r4, r2
 100cf76:	4603      	mov	r3, r0
 100cf78:	e7c2      	b.n	100cf00 <memset+0x20>
 100cf7a:	461a      	mov	r2, r3
 100cf7c:	4626      	mov	r6, r4
 100cf7e:	e7e0      	b.n	100cf42 <memset+0x62>

0100cf80 <__malloc_lock>:
 100cf80:	4770      	bx	lr
 100cf82:	bf00      	nop

0100cf84 <__malloc_unlock>:
 100cf84:	4770      	bx	lr
 100cf86:	bf00      	nop

0100cf88 <_printf_r>:
 100cf88:	b40e      	push	{r1, r2, r3}
 100cf8a:	b510      	push	{r4, lr}
 100cf8c:	b083      	sub	sp, #12
 100cf8e:	ac05      	add	r4, sp, #20
 100cf90:	6881      	ldr	r1, [r0, #8]
 100cf92:	f854 2b04 	ldr.w	r2, [r4], #4
 100cf96:	4623      	mov	r3, r4
 100cf98:	9401      	str	r4, [sp, #4]
 100cf9a:	f002 fb55 	bl	100f648 <_vfprintf_r>
 100cf9e:	b003      	add	sp, #12
 100cfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100cfa4:	b003      	add	sp, #12
 100cfa6:	4770      	bx	lr

0100cfa8 <printf>:
 100cfa8:	b40f      	push	{r0, r1, r2, r3}
 100cfaa:	f649 4330 	movw	r3, #39984	; 0x9c30
 100cfae:	b510      	push	{r4, lr}
 100cfb0:	b082      	sub	sp, #8
 100cfb2:	ac04      	add	r4, sp, #16
 100cfb4:	f2c0 1305 	movt	r3, #261	; 0x105
 100cfb8:	f854 2b04 	ldr.w	r2, [r4], #4
 100cfbc:	6818      	ldr	r0, [r3, #0]
 100cfbe:	4623      	mov	r3, r4
 100cfc0:	9401      	str	r4, [sp, #4]
 100cfc2:	6881      	ldr	r1, [r0, #8]
 100cfc4:	f002 fb40 	bl	100f648 <_vfprintf_r>
 100cfc8:	b002      	add	sp, #8
 100cfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100cfce:	b004      	add	sp, #16
 100cfd0:	4770      	bx	lr
 100cfd2:	bf00      	nop

0100cfd4 <_puts_r>:
 100cfd4:	b530      	push	{r4, r5, lr}
 100cfd6:	4605      	mov	r5, r0
 100cfd8:	b089      	sub	sp, #36	; 0x24
 100cfda:	4608      	mov	r0, r1
 100cfdc:	460c      	mov	r4, r1
 100cfde:	f000 fb8f 	bl	100d700 <strlen>
 100cfe2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 100cfe4:	f648 6340 	movw	r3, #36416	; 0x8e40
 100cfe8:	9404      	str	r4, [sp, #16]
 100cfea:	f2c0 1305 	movt	r3, #261	; 0x105
 100cfee:	68ac      	ldr	r4, [r5, #8]
 100cff0:	9306      	str	r3, [sp, #24]
 100cff2:	2302      	movs	r3, #2
 100cff4:	1c41      	adds	r1, r0, #1
 100cff6:	9005      	str	r0, [sp, #20]
 100cff8:	9103      	str	r1, [sp, #12]
 100cffa:	2001      	movs	r0, #1
 100cffc:	a904      	add	r1, sp, #16
 100cffe:	9007      	str	r0, [sp, #28]
 100d000:	e9cd 1301 	strd	r1, r3, [sp, #4]
 100d004:	b1b2      	cbz	r2, 100d034 <_puts_r+0x60>
 100d006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 100d00a:	049a      	lsls	r2, r3, #18
 100d00c:	d406      	bmi.n	100d01c <_puts_r+0x48>
 100d00e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 100d010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 100d014:	81a3      	strh	r3, [r4, #12]
 100d016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 100d01a:	6662      	str	r2, [r4, #100]	; 0x64
 100d01c:	4621      	mov	r1, r4
 100d01e:	4628      	mov	r0, r5
 100d020:	aa01      	add	r2, sp, #4
 100d022:	f005 fe25 	bl	1012c70 <__sfvwrite_r>
 100d026:	2800      	cmp	r0, #0
 100d028:	bf14      	ite	ne
 100d02a:	f04f 30ff 	movne.w	r0, #4294967295
 100d02e:	200a      	moveq	r0, #10
 100d030:	b009      	add	sp, #36	; 0x24
 100d032:	bd30      	pop	{r4, r5, pc}
 100d034:	4628      	mov	r0, r5
 100d036:	f005 fca9 	bl	101298c <__sinit>
 100d03a:	e7e4      	b.n	100d006 <_puts_r+0x32>

0100d03c <puts>:
 100d03c:	f649 4330 	movw	r3, #39984	; 0x9c30
 100d040:	f2c0 1305 	movt	r3, #261	; 0x105
 100d044:	4601      	mov	r1, r0
 100d046:	6818      	ldr	r0, [r3, #0]
 100d048:	f7ff bfc4 	b.w	100cfd4 <_puts_r>

0100d04c <_sbrk_r>:
 100d04c:	b538      	push	{r3, r4, r5, lr}
 100d04e:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 100d052:	f2c0 1416 	movt	r4, #278	; 0x116
 100d056:	4605      	mov	r5, r0
 100d058:	4608      	mov	r0, r1
 100d05a:	2300      	movs	r3, #0
 100d05c:	6023      	str	r3, [r4, #0]
 100d05e:	f009 ead2 	blx	1016604 <_sbrk>
 100d062:	1c43      	adds	r3, r0, #1
 100d064:	d000      	beq.n	100d068 <_sbrk_r+0x1c>
 100d066:	bd38      	pop	{r3, r4, r5, pc}
 100d068:	6823      	ldr	r3, [r4, #0]
 100d06a:	2b00      	cmp	r3, #0
 100d06c:	d0fb      	beq.n	100d066 <_sbrk_r+0x1a>
 100d06e:	602b      	str	r3, [r5, #0]
 100d070:	bd38      	pop	{r3, r4, r5, pc}
 100d072:	bf00      	nop

0100d074 <_snprintf_r>:
 100d074:	b408      	push	{r3}
 100d076:	b570      	push	{r4, r5, r6, lr}
 100d078:	1e14      	subs	r4, r2, #0
 100d07a:	4605      	mov	r5, r0
 100d07c:	b09d      	sub	sp, #116	; 0x74
 100d07e:	bfbe      	ittt	lt
 100d080:	228b      	movlt	r2, #139	; 0x8b
 100d082:	f04f 30ff 	movlt.w	r0, #4294967295
 100d086:	602a      	strlt	r2, [r5, #0]
 100d088:	db17      	blt.n	100d0ba <_snprintf_r+0x46>
 100d08a:	f44f 7302 	mov.w	r3, #520	; 0x208
 100d08e:	9102      	str	r1, [sp, #8]
 100d090:	9106      	str	r1, [sp, #24]
 100d092:	f8ad 3014 	strh.w	r3, [sp, #20]
 100d096:	d115      	bne.n	100d0c4 <_snprintf_r+0x50>
 100d098:	ae22      	add	r6, sp, #136	; 0x88
 100d09a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100d09c:	a902      	add	r1, sp, #8
 100d09e:	9404      	str	r4, [sp, #16]
 100d0a0:	4633      	mov	r3, r6
 100d0a2:	9407      	str	r4, [sp, #28]
 100d0a4:	9601      	str	r6, [sp, #4]
 100d0a6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100d0aa:	f8ad 4016 	strh.w	r4, [sp, #22]
 100d0ae:	f000 fd23 	bl	100daf8 <_svfprintf_r>
 100d0b2:	1c43      	adds	r3, r0, #1
 100d0b4:	da01      	bge.n	100d0ba <_snprintf_r+0x46>
 100d0b6:	238b      	movs	r3, #139	; 0x8b
 100d0b8:	602b      	str	r3, [r5, #0]
 100d0ba:	b01d      	add	sp, #116	; 0x74
 100d0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100d0c0:	b001      	add	sp, #4
 100d0c2:	4770      	bx	lr
 100d0c4:	ab22      	add	r3, sp, #136	; 0x88
 100d0c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100d0c8:	a902      	add	r1, sp, #8
 100d0ca:	9301      	str	r3, [sp, #4]
 100d0cc:	3c01      	subs	r4, #1
 100d0ce:	9404      	str	r4, [sp, #16]
 100d0d0:	9407      	str	r4, [sp, #28]
 100d0d2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100d0d6:	f8ad 4016 	strh.w	r4, [sp, #22]
 100d0da:	f000 fd0d 	bl	100daf8 <_svfprintf_r>
 100d0de:	1c42      	adds	r2, r0, #1
 100d0e0:	f04f 0200 	mov.w	r2, #0
 100d0e4:	bfbc      	itt	lt
 100d0e6:	238b      	movlt	r3, #139	; 0x8b
 100d0e8:	602b      	strlt	r3, [r5, #0]
 100d0ea:	9b02      	ldr	r3, [sp, #8]
 100d0ec:	701a      	strb	r2, [r3, #0]
 100d0ee:	b01d      	add	sp, #116	; 0x74
 100d0f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100d0f4:	b001      	add	sp, #4
 100d0f6:	4770      	bx	lr

0100d0f8 <snprintf>:
 100d0f8:	b40c      	push	{r2, r3}
 100d0fa:	f649 4330 	movw	r3, #39984	; 0x9c30
 100d0fe:	f2c0 1305 	movt	r3, #261	; 0x105
 100d102:	b570      	push	{r4, r5, r6, lr}
 100d104:	1e0c      	subs	r4, r1, #0
 100d106:	681d      	ldr	r5, [r3, #0]
 100d108:	b09c      	sub	sp, #112	; 0x70
 100d10a:	bfbe      	ittt	lt
 100d10c:	238b      	movlt	r3, #139	; 0x8b
 100d10e:	f04f 30ff 	movlt.w	r0, #4294967295
 100d112:	602b      	strlt	r3, [r5, #0]
 100d114:	db18      	blt.n	100d148 <snprintf+0x50>
 100d116:	f44f 7302 	mov.w	r3, #520	; 0x208
 100d11a:	9002      	str	r0, [sp, #8]
 100d11c:	9006      	str	r0, [sp, #24]
 100d11e:	f8ad 3014 	strh.w	r3, [sp, #20]
 100d122:	d116      	bne.n	100d152 <snprintf+0x5a>
 100d124:	ae21      	add	r6, sp, #132	; 0x84
 100d126:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100d128:	a902      	add	r1, sp, #8
 100d12a:	4628      	mov	r0, r5
 100d12c:	4633      	mov	r3, r6
 100d12e:	9404      	str	r4, [sp, #16]
 100d130:	9407      	str	r4, [sp, #28]
 100d132:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100d136:	9601      	str	r6, [sp, #4]
 100d138:	f8ad 4016 	strh.w	r4, [sp, #22]
 100d13c:	f000 fcdc 	bl	100daf8 <_svfprintf_r>
 100d140:	1c43      	adds	r3, r0, #1
 100d142:	da01      	bge.n	100d148 <snprintf+0x50>
 100d144:	238b      	movs	r3, #139	; 0x8b
 100d146:	602b      	str	r3, [r5, #0]
 100d148:	b01c      	add	sp, #112	; 0x70
 100d14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100d14e:	b002      	add	sp, #8
 100d150:	4770      	bx	lr
 100d152:	ab21      	add	r3, sp, #132	; 0x84
 100d154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100d156:	a902      	add	r1, sp, #8
 100d158:	4628      	mov	r0, r5
 100d15a:	9301      	str	r3, [sp, #4]
 100d15c:	3c01      	subs	r4, #1
 100d15e:	9404      	str	r4, [sp, #16]
 100d160:	9407      	str	r4, [sp, #28]
 100d162:	f64f 74ff 	movw	r4, #65535	; 0xffff
 100d166:	f8ad 4016 	strh.w	r4, [sp, #22]
 100d16a:	f000 fcc5 	bl	100daf8 <_svfprintf_r>
 100d16e:	1c42      	adds	r2, r0, #1
 100d170:	f04f 0200 	mov.w	r2, #0
 100d174:	bfbc      	itt	lt
 100d176:	238b      	movlt	r3, #139	; 0x8b
 100d178:	602b      	strlt	r3, [r5, #0]
 100d17a:	9b02      	ldr	r3, [sp, #8]
 100d17c:	701a      	strb	r2, [r3, #0]
 100d17e:	b01c      	add	sp, #112	; 0x70
 100d180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100d184:	b002      	add	sp, #8
 100d186:	4770      	bx	lr

0100d188 <strcasecmp>:
 100d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100d18a:	4607      	mov	r7, r0
 100d18c:	460e      	mov	r6, r1
 100d18e:	f817 4b01 	ldrb.w	r4, [r7], #1
 100d192:	f7fe fdf3 	bl	100bd7c <__locale_ctype_ptr>
 100d196:	f816 5b01 	ldrb.w	r5, [r6], #1
 100d19a:	4420      	add	r0, r4
 100d19c:	7843      	ldrb	r3, [r0, #1]
 100d19e:	f003 0303 	and.w	r3, r3, #3
 100d1a2:	2b01      	cmp	r3, #1
 100d1a4:	bf08      	it	eq
 100d1a6:	3420      	addeq	r4, #32
 100d1a8:	f7fe fde8 	bl	100bd7c <__locale_ctype_ptr>
 100d1ac:	4428      	add	r0, r5
 100d1ae:	7843      	ldrb	r3, [r0, #1]
 100d1b0:	f003 0303 	and.w	r3, r3, #3
 100d1b4:	2b01      	cmp	r3, #1
 100d1b6:	d004      	beq.n	100d1c2 <strcasecmp+0x3a>
 100d1b8:	1b60      	subs	r0, r4, r5
 100d1ba:	d101      	bne.n	100d1c0 <strcasecmp+0x38>
 100d1bc:	2d00      	cmp	r5, #0
 100d1be:	d1e6      	bne.n	100d18e <strcasecmp+0x6>
 100d1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100d1c2:	f105 0020 	add.w	r0, r5, #32
 100d1c6:	1a20      	subs	r0, r4, r0
 100d1c8:	d0e1      	beq.n	100d18e <strcasecmp+0x6>
 100d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0100d1cc <strcat>:
 100d1cc:	0783      	lsls	r3, r0, #30
 100d1ce:	b510      	push	{r4, lr}
 100d1d0:	4604      	mov	r4, r0
 100d1d2:	d111      	bne.n	100d1f8 <strcat+0x2c>
 100d1d4:	6822      	ldr	r2, [r4, #0]
 100d1d6:	4620      	mov	r0, r4
 100d1d8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100d1dc:	ea23 0302 	bic.w	r3, r3, r2
 100d1e0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100d1e4:	d108      	bne.n	100d1f8 <strcat+0x2c>
 100d1e6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 100d1ea:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100d1ee:	ea23 0302 	bic.w	r3, r3, r2
 100d1f2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100d1f6:	d0f6      	beq.n	100d1e6 <strcat+0x1a>
 100d1f8:	7803      	ldrb	r3, [r0, #0]
 100d1fa:	b11b      	cbz	r3, 100d204 <strcat+0x38>
 100d1fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100d200:	2b00      	cmp	r3, #0
 100d202:	d1fb      	bne.n	100d1fc <strcat+0x30>
 100d204:	f000 f9ea 	bl	100d5dc <strcpy>
 100d208:	4620      	mov	r0, r4
 100d20a:	bd10      	pop	{r4, pc}

0100d20c <strchr>:
 100d20c:	b2c9      	uxtb	r1, r1
 100d20e:	f000 0303 	and.w	r3, r0, #3
 100d212:	2900      	cmp	r1, #0
 100d214:	d042      	beq.n	100d29c <strchr+0x90>
 100d216:	b17b      	cbz	r3, 100d238 <strchr+0x2c>
 100d218:	7803      	ldrb	r3, [r0, #0]
 100d21a:	2b00      	cmp	r3, #0
 100d21c:	d066      	beq.n	100d2ec <strchr+0xe0>
 100d21e:	4299      	cmp	r1, r3
 100d220:	d061      	beq.n	100d2e6 <strchr+0xda>
 100d222:	1c43      	adds	r3, r0, #1
 100d224:	e005      	b.n	100d232 <strchr+0x26>
 100d226:	f813 2b01 	ldrb.w	r2, [r3], #1
 100d22a:	2a00      	cmp	r2, #0
 100d22c:	d05c      	beq.n	100d2e8 <strchr+0xdc>
 100d22e:	428a      	cmp	r2, r1
 100d230:	d059      	beq.n	100d2e6 <strchr+0xda>
 100d232:	079a      	lsls	r2, r3, #30
 100d234:	4618      	mov	r0, r3
 100d236:	d1f6      	bne.n	100d226 <strchr+0x1a>
 100d238:	b470      	push	{r4, r5, r6}
 100d23a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 100d23e:	6804      	ldr	r4, [r0, #0]
 100d240:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 100d244:	ea86 0504 	eor.w	r5, r6, r4
 100d248:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 100d24c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 100d250:	ea23 0304 	bic.w	r3, r3, r4
 100d254:	ea22 0205 	bic.w	r2, r2, r5
 100d258:	4313      	orrs	r3, r2
 100d25a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100d25e:	d10f      	bne.n	100d280 <strchr+0x74>
 100d260:	f850 4f04 	ldr.w	r4, [r0, #4]!
 100d264:	ea84 0506 	eor.w	r5, r4, r6
 100d268:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 100d26c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 100d270:	ea23 0304 	bic.w	r3, r3, r4
 100d274:	ea22 0205 	bic.w	r2, r2, r5
 100d278:	4313      	orrs	r3, r2
 100d27a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100d27e:	d0ef      	beq.n	100d260 <strchr+0x54>
 100d280:	7803      	ldrb	r3, [r0, #0]
 100d282:	b143      	cbz	r3, 100d296 <strchr+0x8a>
 100d284:	4299      	cmp	r1, r3
 100d286:	d102      	bne.n	100d28e <strchr+0x82>
 100d288:	e006      	b.n	100d298 <strchr+0x8c>
 100d28a:	428b      	cmp	r3, r1
 100d28c:	d004      	beq.n	100d298 <strchr+0x8c>
 100d28e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100d292:	2b00      	cmp	r3, #0
 100d294:	d1f9      	bne.n	100d28a <strchr+0x7e>
 100d296:	4618      	mov	r0, r3
 100d298:	bc70      	pop	{r4, r5, r6}
 100d29a:	4770      	bx	lr
 100d29c:	b15b      	cbz	r3, 100d2b6 <strchr+0xaa>
 100d29e:	7803      	ldrb	r3, [r0, #0]
 100d2a0:	b30b      	cbz	r3, 100d2e6 <strchr+0xda>
 100d2a2:	1c43      	adds	r3, r0, #1
 100d2a4:	e001      	b.n	100d2aa <strchr+0x9e>
 100d2a6:	7802      	ldrb	r2, [r0, #0]
 100d2a8:	b1ea      	cbz	r2, 100d2e6 <strchr+0xda>
 100d2aa:	f013 0f03 	tst.w	r3, #3
 100d2ae:	4618      	mov	r0, r3
 100d2b0:	f103 0301 	add.w	r3, r3, #1
 100d2b4:	d1f7      	bne.n	100d2a6 <strchr+0x9a>
 100d2b6:	6802      	ldr	r2, [r0, #0]
 100d2b8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100d2bc:	ea23 0302 	bic.w	r3, r3, r2
 100d2c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100d2c4:	d108      	bne.n	100d2d8 <strchr+0xcc>
 100d2c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 100d2ca:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 100d2ce:	ea23 0302 	bic.w	r3, r3, r2
 100d2d2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 100d2d6:	d0f6      	beq.n	100d2c6 <strchr+0xba>
 100d2d8:	7803      	ldrb	r3, [r0, #0]
 100d2da:	b123      	cbz	r3, 100d2e6 <strchr+0xda>
 100d2dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 100d2e0:	2b00      	cmp	r3, #0
 100d2e2:	d1fb      	bne.n	100d2dc <strchr+0xd0>
 100d2e4:	4770      	bx	lr
 100d2e6:	4770      	bx	lr
 100d2e8:	4610      	mov	r0, r2
 100d2ea:	4770      	bx	lr
 100d2ec:	4618      	mov	r0, r3
 100d2ee:	4770      	bx	lr
	...
 100d300:	eba2 0003 	sub.w	r0, r2, r3
 100d304:	4770      	bx	lr
 100d306:	bf00      	nop

0100d308 <strcmp>:
 100d308:	7802      	ldrb	r2, [r0, #0]
 100d30a:	780b      	ldrb	r3, [r1, #0]
 100d30c:	2a01      	cmp	r2, #1
 100d30e:	bf28      	it	cs
 100d310:	429a      	cmpcs	r2, r3
 100d312:	d1f5      	bne.n	100d300 <strchr+0xf4>
 100d314:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 100d318:	ea40 0401 	orr.w	r4, r0, r1
 100d31c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 100d320:	f06f 0c00 	mvn.w	ip, #0
 100d324:	ea4f 7244 	mov.w	r2, r4, lsl #29
 100d328:	b312      	cbz	r2, 100d370 <strcmp+0x68>
 100d32a:	ea80 0401 	eor.w	r4, r0, r1
 100d32e:	f014 0f07 	tst.w	r4, #7
 100d332:	d16a      	bne.n	100d40a <strcmp+0x102>
 100d334:	f000 0407 	and.w	r4, r0, #7
 100d338:	f020 0007 	bic.w	r0, r0, #7
 100d33c:	f004 0503 	and.w	r5, r4, #3
 100d340:	f021 0107 	bic.w	r1, r1, #7
 100d344:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100d348:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 100d34c:	f014 0f04 	tst.w	r4, #4
 100d350:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 100d354:	fa0c f405 	lsl.w	r4, ip, r5
 100d358:	ea62 0204 	orn	r2, r2, r4
 100d35c:	ea66 0604 	orn	r6, r6, r4
 100d360:	d00a      	beq.n	100d378 <strcmp+0x70>
 100d362:	ea63 0304 	orn	r3, r3, r4
 100d366:	4662      	mov	r2, ip
 100d368:	ea67 0704 	orn	r7, r7, r4
 100d36c:	4666      	mov	r6, ip
 100d36e:	e003      	b.n	100d378 <strcmp+0x70>
 100d370:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 100d374:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 100d378:	fa82 f54c 	uadd8	r5, r2, ip
 100d37c:	ea82 0406 	eor.w	r4, r2, r6
 100d380:	faa4 f48c 	sel	r4, r4, ip
 100d384:	bb6c      	cbnz	r4, 100d3e2 <strcmp+0xda>
 100d386:	fa83 f54c 	uadd8	r5, r3, ip
 100d38a:	ea83 0507 	eor.w	r5, r3, r7
 100d38e:	faa5 f58c 	sel	r5, r5, ip
 100d392:	b995      	cbnz	r5, 100d3ba <strcmp+0xb2>
 100d394:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 100d398:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 100d39c:	fa82 f54c 	uadd8	r5, r2, ip
 100d3a0:	ea82 0406 	eor.w	r4, r2, r6
 100d3a4:	faa4 f48c 	sel	r4, r4, ip
 100d3a8:	fa83 f54c 	uadd8	r5, r3, ip
 100d3ac:	ea83 0507 	eor.w	r5, r3, r7
 100d3b0:	faa5 f58c 	sel	r5, r5, ip
 100d3b4:	4325      	orrs	r5, r4
 100d3b6:	d0db      	beq.n	100d370 <strcmp+0x68>
 100d3b8:	b99c      	cbnz	r4, 100d3e2 <strcmp+0xda>
 100d3ba:	ba2d      	rev	r5, r5
 100d3bc:	fab5 f485 	clz	r4, r5
 100d3c0:	f024 0407 	bic.w	r4, r4, #7
 100d3c4:	fa27 f104 	lsr.w	r1, r7, r4
 100d3c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 100d3cc:	fa23 f304 	lsr.w	r3, r3, r4
 100d3d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 100d3d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100d3d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100d3dc:	eba0 0001 	sub.w	r0, r0, r1
 100d3e0:	4770      	bx	lr
 100d3e2:	ba24      	rev	r4, r4
 100d3e4:	fab4 f484 	clz	r4, r4
 100d3e8:	f024 0407 	bic.w	r4, r4, #7
 100d3ec:	fa26 f104 	lsr.w	r1, r6, r4
 100d3f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 100d3f4:	fa22 f204 	lsr.w	r2, r2, r4
 100d3f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 100d3fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100d400:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100d404:	eba0 0001 	sub.w	r0, r0, r1
 100d408:	4770      	bx	lr
 100d40a:	f014 0f03 	tst.w	r4, #3
 100d40e:	d13c      	bne.n	100d48a <strcmp+0x182>
 100d410:	f010 0403 	ands.w	r4, r0, #3
 100d414:	d128      	bne.n	100d468 <strcmp+0x160>
 100d416:	f850 2b08 	ldr.w	r2, [r0], #8
 100d41a:	f851 3b08 	ldr.w	r3, [r1], #8
 100d41e:	fa82 f54c 	uadd8	r5, r2, ip
 100d422:	ea82 0503 	eor.w	r5, r2, r3
 100d426:	faa5 f58c 	sel	r5, r5, ip
 100d42a:	b95d      	cbnz	r5, 100d444 <strcmp+0x13c>
 100d42c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 100d430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 100d434:	fa82 f54c 	uadd8	r5, r2, ip
 100d438:	ea82 0503 	eor.w	r5, r2, r3
 100d43c:	faa5 f58c 	sel	r5, r5, ip
 100d440:	2d00      	cmp	r5, #0
 100d442:	d0e8      	beq.n	100d416 <strcmp+0x10e>
 100d444:	ba2d      	rev	r5, r5
 100d446:	fab5 f485 	clz	r4, r5
 100d44a:	f024 0407 	bic.w	r4, r4, #7
 100d44e:	fa23 f104 	lsr.w	r1, r3, r4
 100d452:	fa22 f204 	lsr.w	r2, r2, r4
 100d456:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 100d45a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100d45e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100d462:	eba0 0001 	sub.w	r0, r0, r1
 100d466:	4770      	bx	lr
 100d468:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 100d46c:	f020 0003 	bic.w	r0, r0, #3
 100d470:	f850 2b08 	ldr.w	r2, [r0], #8
 100d474:	f021 0103 	bic.w	r1, r1, #3
 100d478:	f851 3b08 	ldr.w	r3, [r1], #8
 100d47c:	fa0c f404 	lsl.w	r4, ip, r4
 100d480:	ea62 0204 	orn	r2, r2, r4
 100d484:	ea63 0304 	orn	r3, r3, r4
 100d488:	e7c9      	b.n	100d41e <strcmp+0x116>
 100d48a:	f010 0403 	ands.w	r4, r0, #3
 100d48e:	d01a      	beq.n	100d4c6 <strcmp+0x1be>
 100d490:	eba1 0104 	sub.w	r1, r1, r4
 100d494:	f020 0003 	bic.w	r0, r0, #3
 100d498:	07e4      	lsls	r4, r4, #31
 100d49a:	f850 2b04 	ldr.w	r2, [r0], #4
 100d49e:	d006      	beq.n	100d4ae <strcmp+0x1a6>
 100d4a0:	d20f      	bcs.n	100d4c2 <strcmp+0x1ba>
 100d4a2:	788b      	ldrb	r3, [r1, #2]
 100d4a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 100d4a8:	1ae4      	subs	r4, r4, r3
 100d4aa:	d106      	bne.n	100d4ba <strcmp+0x1b2>
 100d4ac:	b12b      	cbz	r3, 100d4ba <strcmp+0x1b2>
 100d4ae:	78cb      	ldrb	r3, [r1, #3]
 100d4b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 100d4b4:	1ae4      	subs	r4, r4, r3
 100d4b6:	d100      	bne.n	100d4ba <strcmp+0x1b2>
 100d4b8:	b91b      	cbnz	r3, 100d4c2 <strcmp+0x1ba>
 100d4ba:	4620      	mov	r0, r4
 100d4bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 100d4c0:	4770      	bx	lr
 100d4c2:	f101 0104 	add.w	r1, r1, #4
 100d4c6:	f850 2b04 	ldr.w	r2, [r0], #4
 100d4ca:	07cc      	lsls	r4, r1, #31
 100d4cc:	f021 0103 	bic.w	r1, r1, #3
 100d4d0:	f851 3b04 	ldr.w	r3, [r1], #4
 100d4d4:	d848      	bhi.n	100d568 <strcmp+0x260>
 100d4d6:	d224      	bcs.n	100d522 <strcmp+0x21a>
 100d4d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 100d4dc:	fa82 f54c 	uadd8	r5, r2, ip
 100d4e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 100d4e4:	faa5 f58c 	sel	r5, r5, ip
 100d4e8:	d10a      	bne.n	100d500 <strcmp+0x1f8>
 100d4ea:	b965      	cbnz	r5, 100d506 <strcmp+0x1fe>
 100d4ec:	f851 3b04 	ldr.w	r3, [r1], #4
 100d4f0:	ea84 0402 	eor.w	r4, r4, r2
 100d4f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 100d4f8:	d10e      	bne.n	100d518 <strcmp+0x210>
 100d4fa:	f850 2b04 	ldr.w	r2, [r0], #4
 100d4fe:	e7eb      	b.n	100d4d8 <strcmp+0x1d0>
 100d500:	ea4f 2313 	mov.w	r3, r3, lsr #8
 100d504:	e055      	b.n	100d5b2 <strcmp+0x2aa>
 100d506:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 100d50a:	d14d      	bne.n	100d5a8 <strcmp+0x2a0>
 100d50c:	7808      	ldrb	r0, [r1, #0]
 100d50e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100d512:	f1c0 0000 	rsb	r0, r0, #0
 100d516:	4770      	bx	lr
 100d518:	ea4f 6212 	mov.w	r2, r2, lsr #24
 100d51c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 100d520:	e047      	b.n	100d5b2 <strcmp+0x2aa>
 100d522:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 100d526:	fa82 f54c 	uadd8	r5, r2, ip
 100d52a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 100d52e:	faa5 f58c 	sel	r5, r5, ip
 100d532:	d10a      	bne.n	100d54a <strcmp+0x242>
 100d534:	b965      	cbnz	r5, 100d550 <strcmp+0x248>
 100d536:	f851 3b04 	ldr.w	r3, [r1], #4
 100d53a:	ea84 0402 	eor.w	r4, r4, r2
 100d53e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 100d542:	d10c      	bne.n	100d55e <strcmp+0x256>
 100d544:	f850 2b04 	ldr.w	r2, [r0], #4
 100d548:	e7eb      	b.n	100d522 <strcmp+0x21a>
 100d54a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 100d54e:	e030      	b.n	100d5b2 <strcmp+0x2aa>
 100d550:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 100d554:	d128      	bne.n	100d5a8 <strcmp+0x2a0>
 100d556:	880b      	ldrh	r3, [r1, #0]
 100d558:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100d55c:	e029      	b.n	100d5b2 <strcmp+0x2aa>
 100d55e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 100d562:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 100d566:	e024      	b.n	100d5b2 <strcmp+0x2aa>
 100d568:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 100d56c:	fa82 f54c 	uadd8	r5, r2, ip
 100d570:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 100d574:	faa5 f58c 	sel	r5, r5, ip
 100d578:	d10a      	bne.n	100d590 <strcmp+0x288>
 100d57a:	b965      	cbnz	r5, 100d596 <strcmp+0x28e>
 100d57c:	f851 3b04 	ldr.w	r3, [r1], #4
 100d580:	ea84 0402 	eor.w	r4, r4, r2
 100d584:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 100d588:	d109      	bne.n	100d59e <strcmp+0x296>
 100d58a:	f850 2b04 	ldr.w	r2, [r0], #4
 100d58e:	e7eb      	b.n	100d568 <strcmp+0x260>
 100d590:	ea4f 6313 	mov.w	r3, r3, lsr #24
 100d594:	e00d      	b.n	100d5b2 <strcmp+0x2aa>
 100d596:	f015 0fff 	tst.w	r5, #255	; 0xff
 100d59a:	d105      	bne.n	100d5a8 <strcmp+0x2a0>
 100d59c:	680b      	ldr	r3, [r1, #0]
 100d59e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 100d5a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 100d5a6:	e004      	b.n	100d5b2 <strcmp+0x2aa>
 100d5a8:	f04f 0000 	mov.w	r0, #0
 100d5ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100d5b0:	4770      	bx	lr
 100d5b2:	ba12      	rev	r2, r2
 100d5b4:	ba1b      	rev	r3, r3
 100d5b6:	fa82 f44c 	uadd8	r4, r2, ip
 100d5ba:	ea82 0403 	eor.w	r4, r2, r3
 100d5be:	faa4 f58c 	sel	r5, r4, ip
 100d5c2:	fab5 f485 	clz	r4, r5
 100d5c6:	fa02 f204 	lsl.w	r2, r2, r4
 100d5ca:	fa03 f304 	lsl.w	r3, r3, r4
 100d5ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 100d5d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 100d5d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 100d5da:	4770      	bx	lr

0100d5dc <strcpy>:
 100d5dc:	f891 f000 	pld	[r1]
 100d5e0:	ea80 0201 	eor.w	r2, r0, r1
 100d5e4:	4684      	mov	ip, r0
 100d5e6:	f012 0f03 	tst.w	r2, #3
 100d5ea:	d151      	bne.n	100d690 <strcpy+0xb4>
 100d5ec:	f011 0f03 	tst.w	r1, #3
 100d5f0:	d134      	bne.n	100d65c <strcpy+0x80>
 100d5f2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 100d5f6:	f011 0f04 	tst.w	r1, #4
 100d5fa:	f851 3b04 	ldr.w	r3, [r1], #4
 100d5fe:	d00b      	beq.n	100d618 <strcpy+0x3c>
 100d600:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 100d604:	439a      	bics	r2, r3
 100d606:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100d60a:	bf04      	itt	eq
 100d60c:	f84c 3b04 	streq.w	r3, [ip], #4
 100d610:	f851 3b04 	ldreq.w	r3, [r1], #4
 100d614:	d118      	bne.n	100d648 <strcpy+0x6c>
 100d616:	bf00      	nop
 100d618:	f891 f008 	pld	[r1, #8]
 100d61c:	f851 4b04 	ldr.w	r4, [r1], #4
 100d620:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 100d624:	439a      	bics	r2, r3
 100d626:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100d62a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 100d62e:	d10b      	bne.n	100d648 <strcpy+0x6c>
 100d630:	f84c 3b04 	str.w	r3, [ip], #4
 100d634:	43a2      	bics	r2, r4
 100d636:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 100d63a:	bf04      	itt	eq
 100d63c:	f851 3b04 	ldreq.w	r3, [r1], #4
 100d640:	f84c 4b04 	streq.w	r4, [ip], #4
 100d644:	d0e8      	beq.n	100d618 <strcpy+0x3c>
 100d646:	4623      	mov	r3, r4
 100d648:	f80c 3b01 	strb.w	r3, [ip], #1
 100d64c:	f013 0fff 	tst.w	r3, #255	; 0xff
 100d650:	ea4f 2333 	mov.w	r3, r3, ror #8
 100d654:	d1f8      	bne.n	100d648 <strcpy+0x6c>
 100d656:	f85d 4b04 	ldr.w	r4, [sp], #4
 100d65a:	4770      	bx	lr
 100d65c:	f011 0f01 	tst.w	r1, #1
 100d660:	d006      	beq.n	100d670 <strcpy+0x94>
 100d662:	f811 2b01 	ldrb.w	r2, [r1], #1
 100d666:	f80c 2b01 	strb.w	r2, [ip], #1
 100d66a:	2a00      	cmp	r2, #0
 100d66c:	bf08      	it	eq
 100d66e:	4770      	bxeq	lr
 100d670:	f011 0f02 	tst.w	r1, #2
 100d674:	d0bd      	beq.n	100d5f2 <strcpy+0x16>
 100d676:	f831 2b02 	ldrh.w	r2, [r1], #2
 100d67a:	f012 0fff 	tst.w	r2, #255	; 0xff
 100d67e:	bf16      	itet	ne
 100d680:	f82c 2b02 	strhne.w	r2, [ip], #2
 100d684:	f88c 2000 	strbeq.w	r2, [ip]
 100d688:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 100d68c:	d1b1      	bne.n	100d5f2 <strcpy+0x16>
 100d68e:	4770      	bx	lr
 100d690:	f811 2b01 	ldrb.w	r2, [r1], #1
 100d694:	f80c 2b01 	strb.w	r2, [ip], #1
 100d698:	2a00      	cmp	r2, #0
 100d69a:	d1f9      	bne.n	100d690 <strcpy+0xb4>
 100d69c:	4770      	bx	lr
 100d69e:	bf00      	nop

0100d6a0 <strlcpy>:
 100d6a0:	b19a      	cbz	r2, 100d6ca <strlcpy+0x2a>
 100d6a2:	2a01      	cmp	r2, #1
 100d6a4:	d019      	beq.n	100d6da <strlcpy+0x3a>
 100d6a6:	b470      	push	{r4, r5, r6}
 100d6a8:	460b      	mov	r3, r1
 100d6aa:	4605      	mov	r5, r0
 100d6ac:	e001      	b.n	100d6b2 <strlcpy+0x12>
 100d6ae:	42e0      	cmn	r0, r4
 100d6b0:	d017      	beq.n	100d6e2 <strlcpy+0x42>
 100d6b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 100d6b6:	f805 6b01 	strb.w	r6, [r5], #1
 100d6ba:	43ec      	mvns	r4, r5
 100d6bc:	4414      	add	r4, r2
 100d6be:	2e00      	cmp	r6, #0
 100d6c0:	d1f5      	bne.n	100d6ae <strlcpy+0xe>
 100d6c2:	1a58      	subs	r0, r3, r1
 100d6c4:	3801      	subs	r0, #1
 100d6c6:	bc70      	pop	{r4, r5, r6}
 100d6c8:	4770      	bx	lr
 100d6ca:	460b      	mov	r3, r1
 100d6cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 100d6d0:	2a00      	cmp	r2, #0
 100d6d2:	d1fb      	bne.n	100d6cc <strlcpy+0x2c>
 100d6d4:	1a58      	subs	r0, r3, r1
 100d6d6:	3801      	subs	r0, #1
 100d6d8:	4770      	bx	lr
 100d6da:	2200      	movs	r2, #0
 100d6dc:	460b      	mov	r3, r1
 100d6de:	7002      	strb	r2, [r0, #0]
 100d6e0:	e7f4      	b.n	100d6cc <strlcpy+0x2c>
 100d6e2:	2200      	movs	r2, #0
 100d6e4:	702a      	strb	r2, [r5, #0]
 100d6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 100d6ea:	2a00      	cmp	r2, #0
 100d6ec:	d1fb      	bne.n	100d6e6 <strlcpy+0x46>
 100d6ee:	1a58      	subs	r0, r3, r1
 100d6f0:	3801      	subs	r0, #1
 100d6f2:	bc70      	pop	{r4, r5, r6}
 100d6f4:	4770      	bx	lr
 100d6f6:	bf00      	nop
	...

0100d700 <strlen>:
 100d700:	f890 f000 	pld	[r0]
 100d704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 100d708:	f020 0107 	bic.w	r1, r0, #7
 100d70c:	f06f 0c00 	mvn.w	ip, #0
 100d710:	f010 0407 	ands.w	r4, r0, #7
 100d714:	f891 f020 	pld	[r1, #32]
 100d718:	f040 8049 	bne.w	100d7ae <strlen+0xae>
 100d71c:	f04f 0400 	mov.w	r4, #0
 100d720:	f06f 0007 	mvn.w	r0, #7
 100d724:	e9d1 2300 	ldrd	r2, r3, [r1]
 100d728:	f891 f040 	pld	[r1, #64]	; 0x40
 100d72c:	f100 0008 	add.w	r0, r0, #8
 100d730:	fa82 f24c 	uadd8	r2, r2, ip
 100d734:	faa4 f28c 	sel	r2, r4, ip
 100d738:	fa83 f34c 	uadd8	r3, r3, ip
 100d73c:	faa2 f38c 	sel	r3, r2, ip
 100d740:	bb4b      	cbnz	r3, 100d796 <strlen+0x96>
 100d742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 100d746:	fa82 f24c 	uadd8	r2, r2, ip
 100d74a:	f100 0008 	add.w	r0, r0, #8
 100d74e:	faa4 f28c 	sel	r2, r4, ip
 100d752:	fa83 f34c 	uadd8	r3, r3, ip
 100d756:	faa2 f38c 	sel	r3, r2, ip
 100d75a:	b9e3      	cbnz	r3, 100d796 <strlen+0x96>
 100d75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 100d760:	fa82 f24c 	uadd8	r2, r2, ip
 100d764:	f100 0008 	add.w	r0, r0, #8
 100d768:	faa4 f28c 	sel	r2, r4, ip
 100d76c:	fa83 f34c 	uadd8	r3, r3, ip
 100d770:	faa2 f38c 	sel	r3, r2, ip
 100d774:	b97b      	cbnz	r3, 100d796 <strlen+0x96>
 100d776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 100d77a:	f101 0120 	add.w	r1, r1, #32
 100d77e:	fa82 f24c 	uadd8	r2, r2, ip
 100d782:	f100 0008 	add.w	r0, r0, #8
 100d786:	faa4 f28c 	sel	r2, r4, ip
 100d78a:	fa83 f34c 	uadd8	r3, r3, ip
 100d78e:	faa2 f38c 	sel	r3, r2, ip
 100d792:	2b00      	cmp	r3, #0
 100d794:	d0c6      	beq.n	100d724 <strlen+0x24>
 100d796:	2a00      	cmp	r2, #0
 100d798:	bf04      	itt	eq
 100d79a:	3004      	addeq	r0, #4
 100d79c:	461a      	moveq	r2, r3
 100d79e:	ba12      	rev	r2, r2
 100d7a0:	fab2 f282 	clz	r2, r2
 100d7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 100d7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 100d7ac:	4770      	bx	lr
 100d7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 100d7b2:	f004 0503 	and.w	r5, r4, #3
 100d7b6:	f1c4 0000 	rsb	r0, r4, #0
 100d7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100d7be:	f014 0f04 	tst.w	r4, #4
 100d7c2:	f891 f040 	pld	[r1, #64]	; 0x40
 100d7c6:	fa0c f505 	lsl.w	r5, ip, r5
 100d7ca:	ea62 0205 	orn	r2, r2, r5
 100d7ce:	bf1c      	itt	ne
 100d7d0:	ea63 0305 	ornne	r3, r3, r5
 100d7d4:	4662      	movne	r2, ip
 100d7d6:	f04f 0400 	mov.w	r4, #0
 100d7da:	e7a9      	b.n	100d730 <strlen+0x30>

0100d7dc <strncasecmp>:
 100d7dc:	b34a      	cbz	r2, 100d832 <strncasecmp+0x56>
 100d7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100d7e2:	4606      	mov	r6, r0
 100d7e4:	460f      	mov	r7, r1
 100d7e6:	eb00 0802 	add.w	r8, r0, r2
 100d7ea:	e004      	b.n	100d7f6 <strncasecmp+0x1a>
 100d7ec:	1b60      	subs	r0, r4, r5
 100d7ee:	d11b      	bne.n	100d828 <strncasecmp+0x4c>
 100d7f0:	b1e5      	cbz	r5, 100d82c <strncasecmp+0x50>
 100d7f2:	45b0      	cmp	r8, r6
 100d7f4:	d01a      	beq.n	100d82c <strncasecmp+0x50>
 100d7f6:	f816 4b01 	ldrb.w	r4, [r6], #1
 100d7fa:	f7fe fabf 	bl	100bd7c <__locale_ctype_ptr>
 100d7fe:	f817 5b01 	ldrb.w	r5, [r7], #1
 100d802:	4420      	add	r0, r4
 100d804:	7843      	ldrb	r3, [r0, #1]
 100d806:	f003 0303 	and.w	r3, r3, #3
 100d80a:	2b01      	cmp	r3, #1
 100d80c:	bf08      	it	eq
 100d80e:	3420      	addeq	r4, #32
 100d810:	f7fe fab4 	bl	100bd7c <__locale_ctype_ptr>
 100d814:	4428      	add	r0, r5
 100d816:	7843      	ldrb	r3, [r0, #1]
 100d818:	f003 0303 	and.w	r3, r3, #3
 100d81c:	2b01      	cmp	r3, #1
 100d81e:	d1e5      	bne.n	100d7ec <strncasecmp+0x10>
 100d820:	f105 0020 	add.w	r0, r5, #32
 100d824:	1a20      	subs	r0, r4, r0
 100d826:	d0e4      	beq.n	100d7f2 <strncasecmp+0x16>
 100d828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100d82c:	2000      	movs	r0, #0
 100d82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100d832:	2000      	movs	r0, #0
 100d834:	4770      	bx	lr
 100d836:	bf00      	nop

0100d838 <strncmp>:
 100d838:	2a00      	cmp	r2, #0
 100d83a:	d049      	beq.n	100d8d0 <strncmp+0x98>
 100d83c:	ea40 0301 	orr.w	r3, r0, r1
 100d840:	f013 0303 	ands.w	r3, r3, #3
 100d844:	b4f0      	push	{r4, r5, r6, r7}
 100d846:	d125      	bne.n	100d894 <strncmp+0x5c>
 100d848:	2a03      	cmp	r2, #3
 100d84a:	d923      	bls.n	100d894 <strncmp+0x5c>
 100d84c:	6804      	ldr	r4, [r0, #0]
 100d84e:	680d      	ldr	r5, [r1, #0]
 100d850:	42ac      	cmp	r4, r5
 100d852:	d11f      	bne.n	100d894 <strncmp+0x5c>
 100d854:	3a04      	subs	r2, #4
 100d856:	d038      	beq.n	100d8ca <strncmp+0x92>
 100d858:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 100d85c:	ea25 0404 	bic.w	r4, r5, r4
 100d860:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100d864:	d131      	bne.n	100d8ca <strncmp+0x92>
 100d866:	1d07      	adds	r7, r0, #4
 100d868:	1d0d      	adds	r5, r1, #4
 100d86a:	e00d      	b.n	100d888 <strncmp+0x50>
 100d86c:	f857 3b04 	ldr.w	r3, [r7], #4
 100d870:	680e      	ldr	r6, [r1, #0]
 100d872:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 100d876:	42b3      	cmp	r3, r6
 100d878:	ea24 0403 	bic.w	r4, r4, r3
 100d87c:	d10a      	bne.n	100d894 <strncmp+0x5c>
 100d87e:	3a04      	subs	r2, #4
 100d880:	d023      	beq.n	100d8ca <strncmp+0x92>
 100d882:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100d886:	d120      	bne.n	100d8ca <strncmp+0x92>
 100d888:	2a03      	cmp	r2, #3
 100d88a:	4629      	mov	r1, r5
 100d88c:	4638      	mov	r0, r7
 100d88e:	f105 0504 	add.w	r5, r5, #4
 100d892:	d8eb      	bhi.n	100d86c <strncmp+0x34>
 100d894:	7804      	ldrb	r4, [r0, #0]
 100d896:	780e      	ldrb	r6, [r1, #0]
 100d898:	42a6      	cmp	r6, r4
 100d89a:	d11b      	bne.n	100d8d4 <strncmp+0x9c>
 100d89c:	2a01      	cmp	r2, #1
 100d89e:	bf18      	it	ne
 100d8a0:	2e00      	cmpne	r6, #0
 100d8a2:	d012      	beq.n	100d8ca <strncmp+0x92>
 100d8a4:	4605      	mov	r5, r0
 100d8a6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 100d8aa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 100d8ae:	42b4      	cmp	r4, r6
 100d8b0:	ea6f 0305 	mvn.w	r3, r5
 100d8b4:	4413      	add	r3, r2
 100d8b6:	d10d      	bne.n	100d8d4 <strncmp+0x9c>
 100d8b8:	42d8      	cmn	r0, r3
 100d8ba:	bf0c      	ite	eq
 100d8bc:	2301      	moveq	r3, #1
 100d8be:	2300      	movne	r3, #0
 100d8c0:	2c00      	cmp	r4, #0
 100d8c2:	bf08      	it	eq
 100d8c4:	2301      	moveq	r3, #1
 100d8c6:	2b00      	cmp	r3, #0
 100d8c8:	d0ed      	beq.n	100d8a6 <strncmp+0x6e>
 100d8ca:	2000      	movs	r0, #0
 100d8cc:	bcf0      	pop	{r4, r5, r6, r7}
 100d8ce:	4770      	bx	lr
 100d8d0:	4610      	mov	r0, r2
 100d8d2:	4770      	bx	lr
 100d8d4:	1ba0      	subs	r0, r4, r6
 100d8d6:	bcf0      	pop	{r4, r5, r6, r7}
 100d8d8:	4770      	bx	lr
 100d8da:	bf00      	nop

0100d8dc <strncpy>:
 100d8dc:	2a03      	cmp	r2, #3
 100d8de:	ea40 0301 	orr.w	r3, r0, r1
 100d8e2:	b470      	push	{r4, r5, r6}
 100d8e4:	f3c3 0401 	ubfx	r4, r3, #0, #2
 100d8e8:	bf94      	ite	ls
 100d8ea:	2500      	movls	r5, #0
 100d8ec:	2501      	movhi	r5, #1
 100d8ee:	2c00      	cmp	r4, #0
 100d8f0:	4606      	mov	r6, r0
 100d8f2:	bf18      	it	ne
 100d8f4:	2500      	movne	r5, #0
 100d8f6:	b9a5      	cbnz	r5, 100d922 <strncpy+0x46>
 100d8f8:	b18a      	cbz	r2, 100d91e <strncpy+0x42>
 100d8fa:	780c      	ldrb	r4, [r1, #0]
 100d8fc:	4633      	mov	r3, r6
 100d8fe:	1e55      	subs	r5, r2, #1
 100d900:	f803 4b01 	strb.w	r4, [r3], #1
 100d904:	b1fc      	cbz	r4, 100d946 <strncpy+0x6a>
 100d906:	4432      	add	r2, r6
 100d908:	442e      	add	r6, r5
 100d90a:	e004      	b.n	100d916 <strncpy+0x3a>
 100d90c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 100d910:	f803 4b01 	strb.w	r4, [r3], #1
 100d914:	b1bc      	cbz	r4, 100d946 <strncpy+0x6a>
 100d916:	429a      	cmp	r2, r3
 100d918:	eba6 0503 	sub.w	r5, r6, r3
 100d91c:	d1f6      	bne.n	100d90c <strncpy+0x30>
 100d91e:	bc70      	pop	{r4, r5, r6}
 100d920:	4770      	bx	lr
 100d922:	460b      	mov	r3, r1
 100d924:	4619      	mov	r1, r3
 100d926:	f853 5b04 	ldr.w	r5, [r3], #4
 100d92a:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 100d92e:	ea24 0405 	bic.w	r4, r4, r5
 100d932:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100d936:	d1e0      	bne.n	100d8fa <strncpy+0x1e>
 100d938:	3a04      	subs	r2, #4
 100d93a:	f846 5b04 	str.w	r5, [r6], #4
 100d93e:	2a03      	cmp	r2, #3
 100d940:	4619      	mov	r1, r3
 100d942:	d8ef      	bhi.n	100d924 <strncpy+0x48>
 100d944:	e7d8      	b.n	100d8f8 <strncpy+0x1c>
 100d946:	2d00      	cmp	r5, #0
 100d948:	d0e9      	beq.n	100d91e <strncpy+0x42>
 100d94a:	441d      	add	r5, r3
 100d94c:	2200      	movs	r2, #0
 100d94e:	f803 2b01 	strb.w	r2, [r3], #1
 100d952:	42ab      	cmp	r3, r5
 100d954:	d1fb      	bne.n	100d94e <strncpy+0x72>
 100d956:	bc70      	pop	{r4, r5, r6}
 100d958:	4770      	bx	lr
 100d95a:	bf00      	nop

0100d95c <_strtol_l.isra.0>:
 100d95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100d960:	b083      	sub	sp, #12
 100d962:	460f      	mov	r7, r1
 100d964:	4690      	mov	r8, r2
 100d966:	9001      	str	r0, [sp, #4]
 100d968:	461e      	mov	r6, r3
 100d96a:	468b      	mov	fp, r1
 100d96c:	e000      	b.n	100d970 <_strtol_l.isra.0+0x14>
 100d96e:	46ab      	mov	fp, r5
 100d970:	465d      	mov	r5, fp
 100d972:	980c      	ldr	r0, [sp, #48]	; 0x30
 100d974:	f815 4b01 	ldrb.w	r4, [r5], #1
 100d978:	f7fe f9fc 	bl	100bd74 <__locale_ctype_ptr_l>
 100d97c:	4420      	add	r0, r4
 100d97e:	7842      	ldrb	r2, [r0, #1]
 100d980:	f012 0208 	ands.w	r2, r2, #8
 100d984:	d1f3      	bne.n	100d96e <_strtol_l.isra.0+0x12>
 100d986:	2c2d      	cmp	r4, #45	; 0x2d
 100d988:	d061      	beq.n	100da4e <_strtol_l.isra.0+0xf2>
 100d98a:	2c2b      	cmp	r4, #43	; 0x2b
 100d98c:	4692      	mov	sl, r2
 100d98e:	bf04      	itt	eq
 100d990:	782c      	ldrbeq	r4, [r5, #0]
 100d992:	f10b 0502 	addeq.w	r5, fp, #2
 100d996:	f036 0310 	bics.w	r3, r6, #16
 100d99a:	d103      	bne.n	100d9a4 <_strtol_l.isra.0+0x48>
 100d99c:	2c30      	cmp	r4, #48	; 0x30
 100d99e:	d05c      	beq.n	100da5a <_strtol_l.isra.0+0xfe>
 100d9a0:	b906      	cbnz	r6, 100d9a4 <_strtol_l.isra.0+0x48>
 100d9a2:	260a      	movs	r6, #10
 100d9a4:	46b3      	mov	fp, r6
 100d9a6:	f1ba 0f00 	cmp.w	sl, #0
 100d9aa:	4659      	mov	r1, fp
 100d9ac:	bf14      	ite	ne
 100d9ae:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 100d9b2:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 100d9b6:	4648      	mov	r0, r9
 100d9b8:	f7fc ffa4 	bl	100a904 <__aeabi_uidivmod>
 100d9bc:	2200      	movs	r2, #0
 100d9be:	4686      	mov	lr, r0
 100d9c0:	4610      	mov	r0, r2
 100d9c2:	e00e      	b.n	100d9e2 <_strtol_l.isra.0+0x86>
 100d9c4:	ebae 0400 	sub.w	r4, lr, r0
 100d9c8:	4299      	cmp	r1, r3
 100d9ca:	fab4 f484 	clz	r4, r4
 100d9ce:	ea4f 1454 	mov.w	r4, r4, lsr #5
 100d9d2:	bfa8      	it	ge
 100d9d4:	2400      	movge	r4, #0
 100d9d6:	b9f4      	cbnz	r4, 100da16 <_strtol_l.isra.0+0xba>
 100d9d8:	fb0b 3000 	mla	r0, fp, r0, r3
 100d9dc:	2201      	movs	r2, #1
 100d9de:	f815 4b01 	ldrb.w	r4, [r5], #1
 100d9e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 100d9e6:	2b09      	cmp	r3, #9
 100d9e8:	d90c      	bls.n	100da04 <_strtol_l.isra.0+0xa8>
 100d9ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 100d9ee:	2b19      	cmp	r3, #25
 100d9f0:	bf98      	it	ls
 100d9f2:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
 100d9f6:	d905      	bls.n	100da04 <_strtol_l.isra.0+0xa8>
 100d9f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 100d9fc:	2b19      	cmp	r3, #25
 100d9fe:	d80d      	bhi.n	100da1c <_strtol_l.isra.0+0xc0>
 100da00:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 100da04:	429e      	cmp	r6, r3
 100da06:	dd09      	ble.n	100da1c <_strtol_l.isra.0+0xc0>
 100da08:	4586      	cmp	lr, r0
 100da0a:	bf2c      	ite	cs
 100da0c:	2400      	movcs	r4, #0
 100da0e:	2401      	movcc	r4, #1
 100da10:	ea54 72d2 	orrs.w	r2, r4, r2, lsr #31
 100da14:	d0d6      	beq.n	100d9c4 <_strtol_l.isra.0+0x68>
 100da16:	f04f 32ff 	mov.w	r2, #4294967295
 100da1a:	e7e0      	b.n	100d9de <_strtol_l.isra.0+0x82>
 100da1c:	1c53      	adds	r3, r2, #1
 100da1e:	d00c      	beq.n	100da3a <_strtol_l.isra.0+0xde>
 100da20:	f1ba 0f00 	cmp.w	sl, #0
 100da24:	d000      	beq.n	100da28 <_strtol_l.isra.0+0xcc>
 100da26:	4240      	negs	r0, r0
 100da28:	f1b8 0f00 	cmp.w	r8, #0
 100da2c:	d002      	beq.n	100da34 <_strtol_l.isra.0+0xd8>
 100da2e:	bb1a      	cbnz	r2, 100da78 <_strtol_l.isra.0+0x11c>
 100da30:	f8c8 7000 	str.w	r7, [r8]
 100da34:	b003      	add	sp, #12
 100da36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100da3a:	9a01      	ldr	r2, [sp, #4]
 100da3c:	2322      	movs	r3, #34	; 0x22
 100da3e:	4648      	mov	r0, r9
 100da40:	6013      	str	r3, [r2, #0]
 100da42:	f1b8 0f00 	cmp.w	r8, #0
 100da46:	d0f5      	beq.n	100da34 <_strtol_l.isra.0+0xd8>
 100da48:	1e6f      	subs	r7, r5, #1
 100da4a:	4648      	mov	r0, r9
 100da4c:	e7f0      	b.n	100da30 <_strtol_l.isra.0+0xd4>
 100da4e:	782c      	ldrb	r4, [r5, #0]
 100da50:	f04f 0a01 	mov.w	sl, #1
 100da54:	f10b 0502 	add.w	r5, fp, #2
 100da58:	e79d      	b.n	100d996 <_strtol_l.isra.0+0x3a>
 100da5a:	782b      	ldrb	r3, [r5, #0]
 100da5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 100da60:	2b58      	cmp	r3, #88	; 0x58
 100da62:	d104      	bne.n	100da6e <_strtol_l.isra.0+0x112>
 100da64:	2610      	movs	r6, #16
 100da66:	786c      	ldrb	r4, [r5, #1]
 100da68:	46b3      	mov	fp, r6
 100da6a:	3502      	adds	r5, #2
 100da6c:	e79b      	b.n	100d9a6 <_strtol_l.isra.0+0x4a>
 100da6e:	2e00      	cmp	r6, #0
 100da70:	d198      	bne.n	100d9a4 <_strtol_l.isra.0+0x48>
 100da72:	2608      	movs	r6, #8
 100da74:	46b3      	mov	fp, r6
 100da76:	e796      	b.n	100d9a6 <_strtol_l.isra.0+0x4a>
 100da78:	4681      	mov	r9, r0
 100da7a:	e7e5      	b.n	100da48 <_strtol_l.isra.0+0xec>

0100da7c <_strtol_r>:
 100da7c:	b530      	push	{r4, r5, lr}
 100da7e:	f649 4430 	movw	r4, #39984	; 0x9c30
 100da82:	f2c0 1405 	movt	r4, #261	; 0x105
 100da86:	b083      	sub	sp, #12
 100da88:	f24a 0560 	movw	r5, #41056	; 0xa060
 100da8c:	f2c0 1505 	movt	r5, #261	; 0x105
 100da90:	6824      	ldr	r4, [r4, #0]
 100da92:	6b64      	ldr	r4, [r4, #52]	; 0x34
 100da94:	2c00      	cmp	r4, #0
 100da96:	bf08      	it	eq
 100da98:	462c      	moveq	r4, r5
 100da9a:	9400      	str	r4, [sp, #0]
 100da9c:	f7ff ff5e 	bl	100d95c <_strtol_l.isra.0>
 100daa0:	b003      	add	sp, #12
 100daa2:	bd30      	pop	{r4, r5, pc}

0100daa4 <strtol_l>:
 100daa4:	b510      	push	{r4, lr}
 100daa6:	f649 4430 	movw	r4, #39984	; 0x9c30
 100daaa:	b082      	sub	sp, #8
 100daac:	f2c0 1405 	movt	r4, #261	; 0x105
 100dab0:	9300      	str	r3, [sp, #0]
 100dab2:	4613      	mov	r3, r2
 100dab4:	460a      	mov	r2, r1
 100dab6:	4601      	mov	r1, r0
 100dab8:	6820      	ldr	r0, [r4, #0]
 100daba:	f7ff ff4f 	bl	100d95c <_strtol_l.isra.0>
 100dabe:	b002      	add	sp, #8
 100dac0:	bd10      	pop	{r4, pc}
 100dac2:	bf00      	nop

0100dac4 <strtol>:
 100dac4:	f649 4330 	movw	r3, #39984	; 0x9c30
 100dac8:	f2c0 1305 	movt	r3, #261	; 0x105
 100dacc:	b570      	push	{r4, r5, r6, lr}
 100dace:	b082      	sub	sp, #8
 100dad0:	681e      	ldr	r6, [r3, #0]
 100dad2:	f24a 0560 	movw	r5, #41056	; 0xa060
 100dad6:	f2c0 1505 	movt	r5, #261	; 0x105
 100dada:	4613      	mov	r3, r2
 100dadc:	460a      	mov	r2, r1
 100dade:	4601      	mov	r1, r0
 100dae0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 100dae2:	4630      	mov	r0, r6
 100dae4:	2c00      	cmp	r4, #0
 100dae6:	bf08      	it	eq
 100dae8:	462c      	moveq	r4, r5
 100daea:	9400      	str	r4, [sp, #0]
 100daec:	f7ff ff36 	bl	100d95c <_strtol_l.isra.0>
 100daf0:	b002      	add	sp, #8
 100daf2:	bd70      	pop	{r4, r5, r6, pc}
 100daf4:	0000      	movs	r0, r0
	...

0100daf8 <_svfprintf_r>:
 100daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100dafc:	460c      	mov	r4, r1
 100dafe:	ed2d 8b0a 	vpush	{d8-d12}
 100db02:	4615      	mov	r5, r2
 100db04:	4682      	mov	sl, r0
 100db06:	b0d5      	sub	sp, #340	; 0x154
 100db08:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 100db0c:	9108      	str	r1, [sp, #32]
 100db0e:	9309      	str	r3, [sp, #36]	; 0x24
 100db10:	f005 fade 	bl	10130d0 <_localeconv_r>
 100db14:	6803      	ldr	r3, [r0, #0]
 100db16:	4618      	mov	r0, r3
 100db18:	9317      	str	r3, [sp, #92]	; 0x5c
 100db1a:	f7ff fdf1 	bl	100d700 <strlen>
 100db1e:	2208      	movs	r2, #8
 100db20:	2100      	movs	r1, #0
 100db22:	9016      	str	r0, [sp, #88]	; 0x58
 100db24:	4658      	mov	r0, fp
 100db26:	f7ff f9db 	bl	100cee0 <memset>
 100db2a:	89a3      	ldrh	r3, [r4, #12]
 100db2c:	061a      	lsls	r2, r3, #24
 100db2e:	d503      	bpl.n	100db38 <_svfprintf_r+0x40>
 100db30:	6923      	ldr	r3, [r4, #16]
 100db32:	2b00      	cmp	r3, #0
 100db34:	f000 87d7 	beq.w	100eae6 <_svfprintf_r+0xfee>
 100db38:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 100db3c:	f649 4830 	movw	r8, #39984	; 0x9c30
 100db40:	ed9f 8b75 	vldr	d8, [pc, #468]	; 100dd18 <_svfprintf_r+0x220>
 100db44:	f2c0 1805 	movt	r8, #261	; 0x105
 100db48:	462f      	mov	r7, r5
 100db4a:	2300      	movs	r3, #0
 100db4c:	f24a 0160 	movw	r1, #41056	; 0xa060
 100db50:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100db54:	f2c0 1105 	movt	r1, #261	; 0x105
 100db58:	9312      	str	r3, [sp, #72]	; 0x48
 100db5a:	910f      	str	r1, [sp, #60]	; 0x3c
 100db5c:	9315      	str	r3, [sp, #84]	; 0x54
 100db5e:	9318      	str	r3, [sp, #96]	; 0x60
 100db60:	9314      	str	r3, [sp, #80]	; 0x50
 100db62:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 100db66:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 100db6a:	9305      	str	r3, [sp, #20]
 100db6c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 100db70:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 100db74:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 100db78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 100db7a:	463c      	mov	r4, r7
 100db7c:	f8d8 3000 	ldr.w	r3, [r8]
 100db80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100db82:	2b00      	cmp	r3, #0
 100db84:	bf08      	it	eq
 100db86:	4633      	moveq	r3, r6
 100db88:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 100db8c:	f7fe f8e2 	bl	100bd54 <__locale_mb_cur_max>
 100db90:	f8cd b000 	str.w	fp, [sp]
 100db94:	4622      	mov	r2, r4
 100db96:	a920      	add	r1, sp, #128	; 0x80
 100db98:	4603      	mov	r3, r0
 100db9a:	4650      	mov	r0, sl
 100db9c:	47a8      	blx	r5
 100db9e:	2800      	cmp	r0, #0
 100dba0:	4603      	mov	r3, r0
 100dba2:	f000 8083 	beq.w	100dcac <_svfprintf_r+0x1b4>
 100dba6:	db79      	blt.n	100dc9c <_svfprintf_r+0x1a4>
 100dba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100dbaa:	2a25      	cmp	r2, #37	; 0x25
 100dbac:	d001      	beq.n	100dbb2 <_svfprintf_r+0xba>
 100dbae:	441c      	add	r4, r3
 100dbb0:	e7e4      	b.n	100db7c <_svfprintf_r+0x84>
 100dbb2:	1be6      	subs	r6, r4, r7
 100dbb4:	4605      	mov	r5, r0
 100dbb6:	d17c      	bne.n	100dcb2 <_svfprintf_r+0x1ba>
 100dbb8:	2300      	movs	r3, #0
 100dbba:	1c67      	adds	r7, r4, #1
 100dbbc:	461e      	mov	r6, r3
 100dbbe:	9306      	str	r3, [sp, #24]
 100dbc0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100dbc4:	f04f 32ff 	mov.w	r2, #4294967295
 100dbc8:	7863      	ldrb	r3, [r4, #1]
 100dbca:	240a      	movs	r4, #10
 100dbcc:	9204      	str	r2, [sp, #16]
 100dbce:	3701      	adds	r7, #1
 100dbd0:	f1a3 0220 	sub.w	r2, r3, #32
 100dbd4:	2a5a      	cmp	r2, #90	; 0x5a
 100dbd6:	f200 83b7 	bhi.w	100e348 <_svfprintf_r+0x850>
 100dbda:	e8df f012 	tbh	[pc, r2, lsl #1]
 100dbde:	01f3      	.short	0x01f3
 100dbe0:	03b503b5 	.word	0x03b503b5
 100dbe4:	03b501ef 	.word	0x03b501ef
 100dbe8:	03b503b5 	.word	0x03b503b5
 100dbec:	03b501d2 	.word	0x03b501d2
 100dbf0:	01c403b5 	.word	0x01c403b5
 100dbf4:	03b5037a 	.word	0x03b5037a
 100dbf8:	020f0229 	.word	0x020f0229
 100dbfc:	020b03b5 	.word	0x020b03b5
 100dc00:	01a201a2 	.word	0x01a201a2
 100dc04:	01a201a2 	.word	0x01a201a2
 100dc08:	01a201a2 	.word	0x01a201a2
 100dc0c:	01a201a2 	.word	0x01a201a2
 100dc10:	03b501a2 	.word	0x03b501a2
 100dc14:	03b503b5 	.word	0x03b503b5
 100dc18:	03b503b5 	.word	0x03b503b5
 100dc1c:	03b503b5 	.word	0x03b503b5
 100dc20:	03b5037f 	.word	0x03b5037f
 100dc24:	03100350 	.word	0x03100350
 100dc28:	037f037f 	.word	0x037f037f
 100dc2c:	03b5037f 	.word	0x03b5037f
 100dc30:	03b503b5 	.word	0x03b503b5
 100dc34:	02e603b5 	.word	0x02e603b5
 100dc38:	03b503b5 	.word	0x03b503b5
 100dc3c:	03b502da 	.word	0x03b502da
 100dc40:	03b503b5 	.word	0x03b503b5
 100dc44:	03b502aa 	.word	0x03b502aa
 100dc48:	03b5029b 	.word	0x03b5029b
 100dc4c:	026d03b5 	.word	0x026d03b5
 100dc50:	03b503b5 	.word	0x03b503b5
 100dc54:	03b503b5 	.word	0x03b503b5
 100dc58:	03b503b5 	.word	0x03b503b5
 100dc5c:	03b503b5 	.word	0x03b503b5
 100dc60:	03b5037f 	.word	0x03b5037f
 100dc64:	02410350 	.word	0x02410350
 100dc68:	037f037f 	.word	0x037f037f
 100dc6c:	0237037f 	.word	0x0237037f
 100dc70:	005b0241 	.word	0x005b0241
 100dc74:	022d03b5 	.word	0x022d03b5
 100dc78:	02fb03b5 	.word	0x02fb03b5
 100dc7c:	01af02ea 	.word	0x01af02ea
 100dc80:	03b5005b 	.word	0x03b5005b
 100dc84:	005d02aa 	.word	0x005d02aa
 100dc88:	03b501fd 	.word	0x03b501fd
 100dc8c:	00a103b5 	.word	0x00a103b5
 100dc90:	005d03b5 	.word	0x005d03b5
 100dc94:	f046 0620 	orr.w	r6, r6, #32
 100dc98:	783b      	ldrb	r3, [r7, #0]
 100dc9a:	e798      	b.n	100dbce <_svfprintf_r+0xd6>
 100dc9c:	2208      	movs	r2, #8
 100dc9e:	2100      	movs	r1, #0
 100dca0:	4658      	mov	r0, fp
 100dca2:	f7ff f91d 	bl	100cee0 <memset>
 100dca6:	2301      	movs	r3, #1
 100dca8:	441c      	add	r4, r3
 100dcaa:	e767      	b.n	100db7c <_svfprintf_r+0x84>
 100dcac:	1be6      	subs	r6, r4, r7
 100dcae:	4605      	mov	r5, r0
 100dcb0:	d012      	beq.n	100dcd8 <_svfprintf_r+0x1e0>
 100dcb2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100dcb6:	e9c9 7600 	strd	r7, r6, [r9]
 100dcba:	3301      	adds	r3, #1
 100dcbc:	4432      	add	r2, r6
 100dcbe:	2b07      	cmp	r3, #7
 100dcc0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100dcc4:	bfd8      	it	le
 100dcc6:	f109 0908 	addle.w	r9, r9, #8
 100dcca:	dc19      	bgt.n	100dd00 <_svfprintf_r+0x208>
 100dccc:	9b05      	ldr	r3, [sp, #20]
 100dcce:	4433      	add	r3, r6
 100dcd0:	9305      	str	r3, [sp, #20]
 100dcd2:	2d00      	cmp	r5, #0
 100dcd4:	f47f af70 	bne.w	100dbb8 <_svfprintf_r+0xc0>
 100dcd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 100dcda:	2b00      	cmp	r3, #0
 100dcdc:	f041 826d 	bne.w	100f1ba <_svfprintf_r+0x16c2>
 100dce0:	9b08      	ldr	r3, [sp, #32]
 100dce2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 100dce6:	f013 0f40 	tst.w	r3, #64	; 0x40
 100dcea:	9b05      	ldr	r3, [sp, #20]
 100dcec:	bf18      	it	ne
 100dcee:	f04f 33ff 	movne.w	r3, #4294967295
 100dcf2:	9305      	str	r3, [sp, #20]
 100dcf4:	9805      	ldr	r0, [sp, #20]
 100dcf6:	b055      	add	sp, #340	; 0x154
 100dcf8:	ecbd 8b0a 	vpop	{d8-d12}
 100dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100dd00:	aa28      	add	r2, sp, #160	; 0xa0
 100dd02:	9908      	ldr	r1, [sp, #32]
 100dd04:	4650      	mov	r0, sl
 100dd06:	f006 fa4f 	bl	10141a8 <__ssprint_r>
 100dd0a:	2800      	cmp	r0, #0
 100dd0c:	d1e8      	bne.n	100dce0 <_svfprintf_r+0x1e8>
 100dd0e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100dd12:	e7db      	b.n	100dccc <_svfprintf_r+0x1d4>
 100dd14:	f3af 8000 	nop.w
	...
 100dd20:	06b0      	lsls	r0, r6, #26
 100dd22:	930e      	str	r3, [sp, #56]	; 0x38
 100dd24:	f249 7394 	movw	r3, #38804	; 0x9794
 100dd28:	f2c0 1305 	movt	r3, #261	; 0x105
 100dd2c:	9315      	str	r3, [sp, #84]	; 0x54
 100dd2e:	f140 81cc 	bpl.w	100e0ca <_svfprintf_r+0x5d2>
 100dd32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100dd34:	3507      	adds	r5, #7
 100dd36:	f025 0307 	bic.w	r3, r5, #7
 100dd3a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 100dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 100dd40:	ea54 0305 	orrs.w	r3, r4, r5
 100dd44:	f006 0301 	and.w	r3, r6, #1
 100dd48:	bf08      	it	eq
 100dd4a:	2300      	moveq	r3, #0
 100dd4c:	2b00      	cmp	r3, #0
 100dd4e:	f040 81d8 	bne.w	100e102 <_svfprintf_r+0x60a>
 100dd52:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100dd56:	9303      	str	r3, [sp, #12]
 100dd58:	2302      	movs	r3, #2
 100dd5a:	9904      	ldr	r1, [sp, #16]
 100dd5c:	2200      	movs	r2, #0
 100dd5e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100dd62:	1c4a      	adds	r2, r1, #1
 100dd64:	f000 826c 	beq.w	100e240 <_svfprintf_r+0x748>
 100dd68:	ea54 0205 	orrs.w	r2, r4, r5
 100dd6c:	9a03      	ldr	r2, [sp, #12]
 100dd6e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 100dd72:	bf14      	ite	ne
 100dd74:	2201      	movne	r2, #1
 100dd76:	2200      	moveq	r2, #0
 100dd78:	2900      	cmp	r1, #0
 100dd7a:	bf18      	it	ne
 100dd7c:	2201      	movne	r2, #1
 100dd7e:	2a00      	cmp	r2, #0
 100dd80:	f040 873e 	bne.w	100ec00 <_svfprintf_r+0x1108>
 100dd84:	2b00      	cmp	r3, #0
 100dd86:	f040 84da 	bne.w	100e73e <_svfprintf_r+0xc46>
 100dd8a:	9a03      	ldr	r2, [sp, #12]
 100dd8c:	9304      	str	r3, [sp, #16]
 100dd8e:	f012 0201 	ands.w	r2, r2, #1
 100dd92:	9207      	str	r2, [sp, #28]
 100dd94:	bf04      	itt	eq
 100dd96:	ab54      	addeq	r3, sp, #336	; 0x150
 100dd98:	930b      	streq	r3, [sp, #44]	; 0x2c
 100dd9a:	d005      	beq.n	100dda8 <_svfprintf_r+0x2b0>
 100dd9c:	2330      	movs	r3, #48	; 0x30
 100dd9e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 100dda2:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100dda6:	930b      	str	r3, [sp, #44]	; 0x2c
 100dda8:	2300      	movs	r3, #0
 100ddaa:	9a04      	ldr	r2, [sp, #16]
 100ddac:	930a      	str	r3, [sp, #40]	; 0x28
 100ddae:	9313      	str	r3, [sp, #76]	; 0x4c
 100ddb0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100ddb4:	9b07      	ldr	r3, [sp, #28]
 100ddb6:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100ddba:	4293      	cmp	r3, r2
 100ddbc:	bfb8      	it	lt
 100ddbe:	4613      	movlt	r3, r2
 100ddc0:	9303      	str	r3, [sp, #12]
 100ddc2:	b111      	cbz	r1, 100ddca <_svfprintf_r+0x2d2>
 100ddc4:	9b03      	ldr	r3, [sp, #12]
 100ddc6:	3301      	adds	r3, #1
 100ddc8:	9303      	str	r3, [sp, #12]
 100ddca:	f016 0302 	ands.w	r3, r6, #2
 100ddce:	930c      	str	r3, [sp, #48]	; 0x30
 100ddd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ddd2:	bf1e      	ittt	ne
 100ddd4:	9b03      	ldrne	r3, [sp, #12]
 100ddd6:	3302      	addne	r3, #2
 100ddd8:	9303      	strne	r3, [sp, #12]
 100ddda:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 100ddde:	930d      	str	r3, [sp, #52]	; 0x34
 100dde0:	d104      	bne.n	100ddec <_svfprintf_r+0x2f4>
 100dde2:	9b06      	ldr	r3, [sp, #24]
 100dde4:	9803      	ldr	r0, [sp, #12]
 100dde6:	1a1c      	subs	r4, r3, r0
 100dde8:	2c00      	cmp	r4, #0
 100ddea:	dc60      	bgt.n	100deae <_svfprintf_r+0x3b6>
 100ddec:	b189      	cbz	r1, 100de12 <_svfprintf_r+0x31a>
 100ddee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100ddf0:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 100ddf4:	3201      	adds	r2, #1
 100ddf6:	f8c9 0000 	str.w	r0, [r9]
 100ddfa:	3101      	adds	r1, #1
 100ddfc:	2001      	movs	r0, #1
 100ddfe:	2907      	cmp	r1, #7
 100de00:	f8c9 0004 	str.w	r0, [r9, #4]
 100de04:	922a      	str	r2, [sp, #168]	; 0xa8
 100de06:	bfd8      	it	le
 100de08:	f109 0908 	addle.w	r9, r9, #8
 100de0c:	9129      	str	r1, [sp, #164]	; 0xa4
 100de0e:	f300 843e 	bgt.w	100e68e <_svfprintf_r+0xb96>
 100de12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100de14:	b183      	cbz	r3, 100de38 <_svfprintf_r+0x340>
 100de16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100de18:	a91e      	add	r1, sp, #120	; 0x78
 100de1a:	3202      	adds	r2, #2
 100de1c:	f8c9 1000 	str.w	r1, [r9]
 100de20:	3301      	adds	r3, #1
 100de22:	2102      	movs	r1, #2
 100de24:	2b07      	cmp	r3, #7
 100de26:	f8c9 1004 	str.w	r1, [r9, #4]
 100de2a:	922a      	str	r2, [sp, #168]	; 0xa8
 100de2c:	bfd8      	it	le
 100de2e:	f109 0908 	addle.w	r9, r9, #8
 100de32:	9329      	str	r3, [sp, #164]	; 0xa4
 100de34:	f300 8437 	bgt.w	100e6a6 <_svfprintf_r+0xbae>
 100de38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100de3a:	2b80      	cmp	r3, #128	; 0x80
 100de3c:	f000 8309 	beq.w	100e452 <_svfprintf_r+0x95a>
 100de40:	9b04      	ldr	r3, [sp, #16]
 100de42:	9907      	ldr	r1, [sp, #28]
 100de44:	1a5c      	subs	r4, r3, r1
 100de46:	2c00      	cmp	r4, #0
 100de48:	f300 8350 	bgt.w	100e4ec <_svfprintf_r+0x9f4>
 100de4c:	05f5      	lsls	r5, r6, #23
 100de4e:	f100 82a1 	bmi.w	100e394 <_svfprintf_r+0x89c>
 100de52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100de54:	9907      	ldr	r1, [sp, #28]
 100de56:	3301      	adds	r3, #1
 100de58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100de5a:	2b07      	cmp	r3, #7
 100de5c:	440a      	add	r2, r1
 100de5e:	f8c9 1004 	str.w	r1, [r9, #4]
 100de62:	f8c9 0000 	str.w	r0, [r9]
 100de66:	922a      	str	r2, [sp, #168]	; 0xa8
 100de68:	9329      	str	r3, [sp, #164]	; 0xa4
 100de6a:	f300 8404 	bgt.w	100e676 <_svfprintf_r+0xb7e>
 100de6e:	f109 0908 	add.w	r9, r9, #8
 100de72:	0771      	lsls	r1, r6, #29
 100de74:	d505      	bpl.n	100de82 <_svfprintf_r+0x38a>
 100de76:	9b06      	ldr	r3, [sp, #24]
 100de78:	9903      	ldr	r1, [sp, #12]
 100de7a:	1a5c      	subs	r4, r3, r1
 100de7c:	2c00      	cmp	r4, #0
 100de7e:	f300 841e 	bgt.w	100e6be <_svfprintf_r+0xbc6>
 100de82:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 100de86:	9803      	ldr	r0, [sp, #12]
 100de88:	4281      	cmp	r1, r0
 100de8a:	bfac      	ite	ge
 100de8c:	185b      	addge	r3, r3, r1
 100de8e:	181b      	addlt	r3, r3, r0
 100de90:	9305      	str	r3, [sp, #20]
 100de92:	2a00      	cmp	r2, #0
 100de94:	f040 838b 	bne.w	100e5ae <_svfprintf_r+0xab6>
 100de98:	2300      	movs	r3, #0
 100de9a:	9329      	str	r3, [sp, #164]	; 0xa4
 100de9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100de9e:	b11b      	cbz	r3, 100dea8 <_svfprintf_r+0x3b0>
 100dea0:	990a      	ldr	r1, [sp, #40]	; 0x28
 100dea2:	4650      	mov	r0, sl
 100dea4:	f004 fdec 	bl	1012a80 <_free_r>
 100dea8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100deac:	e664      	b.n	100db78 <_svfprintf_r+0x80>
 100deae:	2c10      	cmp	r4, #16
 100deb0:	f646 2514 	movw	r5, #27156	; 0x6a14
 100deb4:	bfc8      	it	gt
 100deb6:	961b      	strgt	r6, [sp, #108]	; 0x6c
 100deb8:	f2c0 1505 	movt	r5, #261	; 0x105
 100debc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100debe:	bfc4      	itt	gt
 100dec0:	2310      	movgt	r3, #16
 100dec2:	9e08      	ldrgt	r6, [sp, #32]
 100dec4:	dc03      	bgt.n	100dece <_svfprintf_r+0x3d6>
 100dec6:	e01e      	b.n	100df06 <_svfprintf_r+0x40e>
 100dec8:	3c10      	subs	r4, #16
 100deca:	2c10      	cmp	r4, #16
 100decc:	dd1a      	ble.n	100df04 <_svfprintf_r+0x40c>
 100dece:	3101      	adds	r1, #1
 100ded0:	3210      	adds	r2, #16
 100ded2:	2907      	cmp	r1, #7
 100ded4:	e9c9 5300 	strd	r5, r3, [r9]
 100ded8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100dedc:	f109 0908 	add.w	r9, r9, #8
 100dee0:	ddf2      	ble.n	100dec8 <_svfprintf_r+0x3d0>
 100dee2:	aa28      	add	r2, sp, #160	; 0xa0
 100dee4:	4631      	mov	r1, r6
 100dee6:	4650      	mov	r0, sl
 100dee8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100deec:	f006 f95c 	bl	10141a8 <__ssprint_r>
 100def0:	2800      	cmp	r0, #0
 100def2:	f040 8364 	bne.w	100e5be <_svfprintf_r+0xac6>
 100def6:	3c10      	subs	r4, #16
 100def8:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100defc:	2c10      	cmp	r4, #16
 100defe:	f04f 0310 	mov.w	r3, #16
 100df02:	dce4      	bgt.n	100dece <_svfprintf_r+0x3d6>
 100df04:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 100df06:	3101      	adds	r1, #1
 100df08:	4422      	add	r2, r4
 100df0a:	2907      	cmp	r1, #7
 100df0c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100df10:	e9c9 5400 	strd	r5, r4, [r9]
 100df14:	f300 86f5 	bgt.w	100ed02 <_svfprintf_r+0x120a>
 100df18:	f109 0908 	add.w	r9, r9, #8
 100df1c:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100df20:	e764      	b.n	100ddec <_svfprintf_r+0x2f4>
 100df22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100df26:	2100      	movs	r1, #0
 100df28:	f817 3b01 	ldrb.w	r3, [r7], #1
 100df2c:	fb04 2101 	mla	r1, r4, r1, r2
 100df30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100df34:	2a09      	cmp	r2, #9
 100df36:	d9f7      	bls.n	100df28 <_svfprintf_r+0x430>
 100df38:	9106      	str	r1, [sp, #24]
 100df3a:	e649      	b.n	100dbd0 <_svfprintf_r+0xd8>
 100df3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100df3e:	f046 0202 	orr.w	r2, r6, #2
 100df42:	f249 7194 	movw	r1, #38804	; 0x9794
 100df46:	9203      	str	r2, [sp, #12]
 100df48:	f2c0 1105 	movt	r1, #261	; 0x105
 100df4c:	f647 0230 	movw	r2, #30768	; 0x7830
 100df50:	f853 4b04 	ldr.w	r4, [r3], #4
 100df54:	2500      	movs	r5, #0
 100df56:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 100df5a:	2278      	movs	r2, #120	; 0x78
 100df5c:	9115      	str	r1, [sp, #84]	; 0x54
 100df5e:	9309      	str	r3, [sp, #36]	; 0x24
 100df60:	2302      	movs	r3, #2
 100df62:	920e      	str	r2, [sp, #56]	; 0x38
 100df64:	e6f9      	b.n	100dd5a <_svfprintf_r+0x262>
 100df66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100df68:	783b      	ldrb	r3, [r7, #0]
 100df6a:	f852 1b04 	ldr.w	r1, [r2], #4
 100df6e:	2900      	cmp	r1, #0
 100df70:	9106      	str	r1, [sp, #24]
 100df72:	bfa8      	it	ge
 100df74:	9209      	strge	r2, [sp, #36]	; 0x24
 100df76:	f6bf ae2a 	bge.w	100dbce <_svfprintf_r+0xd6>
 100df7a:	4249      	negs	r1, r1
 100df7c:	9209      	str	r2, [sp, #36]	; 0x24
 100df7e:	9106      	str	r1, [sp, #24]
 100df80:	e057      	b.n	100e032 <_svfprintf_r+0x53a>
 100df82:	4650      	mov	r0, sl
 100df84:	f005 f8a4 	bl	10130d0 <_localeconv_r>
 100df88:	6843      	ldr	r3, [r0, #4]
 100df8a:	4618      	mov	r0, r3
 100df8c:	931a      	str	r3, [sp, #104]	; 0x68
 100df8e:	f7ff fbb7 	bl	100d700 <strlen>
 100df92:	4605      	mov	r5, r0
 100df94:	9019      	str	r0, [sp, #100]	; 0x64
 100df96:	4650      	mov	r0, sl
 100df98:	f005 f89a 	bl	10130d0 <_localeconv_r>
 100df9c:	6883      	ldr	r3, [r0, #8]
 100df9e:	2d00      	cmp	r5, #0
 100dfa0:	bf18      	it	ne
 100dfa2:	2b00      	cmpne	r3, #0
 100dfa4:	9314      	str	r3, [sp, #80]	; 0x50
 100dfa6:	f43f ae77 	beq.w	100dc98 <_svfprintf_r+0x1a0>
 100dfaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100dfac:	781a      	ldrb	r2, [r3, #0]
 100dfae:	783b      	ldrb	r3, [r7, #0]
 100dfb0:	2a00      	cmp	r2, #0
 100dfb2:	f43f ae0c 	beq.w	100dbce <_svfprintf_r+0xd6>
 100dfb6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 100dfba:	e608      	b.n	100dbce <_svfprintf_r+0xd6>
 100dfbc:	f046 0601 	orr.w	r6, r6, #1
 100dfc0:	783b      	ldrb	r3, [r7, #0]
 100dfc2:	e604      	b.n	100dbce <_svfprintf_r+0xd6>
 100dfc4:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 100dfc8:	783b      	ldrb	r3, [r7, #0]
 100dfca:	2a00      	cmp	r2, #0
 100dfcc:	f47f adff 	bne.w	100dbce <_svfprintf_r+0xd6>
 100dfd0:	2220      	movs	r2, #32
 100dfd2:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100dfd6:	e5fa      	b.n	100dbce <_svfprintf_r+0xd6>
 100dfd8:	06b0      	lsls	r0, r6, #26
 100dfda:	930e      	str	r3, [sp, #56]	; 0x38
 100dfdc:	f140 8531 	bpl.w	100ea42 <_svfprintf_r+0xf4a>
 100dfe0:	9603      	str	r6, [sp, #12]
 100dfe2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100dfe4:	2301      	movs	r3, #1
 100dfe6:	3507      	adds	r5, #7
 100dfe8:	f025 0207 	bic.w	r2, r5, #7
 100dfec:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100dff0:	9209      	str	r2, [sp, #36]	; 0x24
 100dff2:	e6b2      	b.n	100dd5a <_svfprintf_r+0x262>
 100dff4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 100dff8:	783b      	ldrb	r3, [r7, #0]
 100dffa:	e5e8      	b.n	100dbce <_svfprintf_r+0xd6>
 100dffc:	4639      	mov	r1, r7
 100dffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 100e002:	2b2a      	cmp	r3, #42	; 0x2a
 100e004:	f001 82e5 	beq.w	100f5d2 <_svfprintf_r+0x1ada>
 100e008:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100e00c:	460f      	mov	r7, r1
 100e00e:	2a09      	cmp	r2, #9
 100e010:	bf84      	itt	hi
 100e012:	2200      	movhi	r2, #0
 100e014:	9204      	strhi	r2, [sp, #16]
 100e016:	f63f addb 	bhi.w	100dbd0 <_svfprintf_r+0xd8>
 100e01a:	2100      	movs	r1, #0
 100e01c:	f817 3b01 	ldrb.w	r3, [r7], #1
 100e020:	fb04 2101 	mla	r1, r4, r1, r2
 100e024:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100e028:	2a09      	cmp	r2, #9
 100e02a:	d9f7      	bls.n	100e01c <_svfprintf_r+0x524>
 100e02c:	9104      	str	r1, [sp, #16]
 100e02e:	e5cf      	b.n	100dbd0 <_svfprintf_r+0xd8>
 100e030:	783b      	ldrb	r3, [r7, #0]
 100e032:	f046 0604 	orr.w	r6, r6, #4
 100e036:	e5ca      	b.n	100dbce <_svfprintf_r+0xd6>
 100e038:	783b      	ldrb	r3, [r7, #0]
 100e03a:	2b6c      	cmp	r3, #108	; 0x6c
 100e03c:	bf09      	itett	eq
 100e03e:	f046 0620 	orreq.w	r6, r6, #32
 100e042:	f046 0610 	orrne.w	r6, r6, #16
 100e046:	787b      	ldrbeq	r3, [r7, #1]
 100e048:	3701      	addeq	r7, #1
 100e04a:	e5c0      	b.n	100dbce <_svfprintf_r+0xd6>
 100e04c:	783b      	ldrb	r3, [r7, #0]
 100e04e:	2b68      	cmp	r3, #104	; 0x68
 100e050:	bf09      	itett	eq
 100e052:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 100e056:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 100e05a:	787b      	ldrbeq	r3, [r7, #1]
 100e05c:	3701      	addeq	r7, #1
 100e05e:	e5b6      	b.n	100dbce <_svfprintf_r+0xd6>
 100e060:	06b5      	lsls	r5, r6, #26
 100e062:	930e      	str	r3, [sp, #56]	; 0x38
 100e064:	f140 84d5 	bpl.w	100ea12 <_svfprintf_r+0xf1a>
 100e068:	9603      	str	r6, [sp, #12]
 100e06a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100e06c:	3507      	adds	r5, #7
 100e06e:	f025 0307 	bic.w	r3, r5, #7
 100e072:	4619      	mov	r1, r3
 100e074:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 100e078:	4614      	mov	r4, r2
 100e07a:	461d      	mov	r5, r3
 100e07c:	9109      	str	r1, [sp, #36]	; 0x24
 100e07e:	2a00      	cmp	r2, #0
 100e080:	f173 0300 	sbcs.w	r3, r3, #0
 100e084:	f2c0 80cf 	blt.w	100e226 <_svfprintf_r+0x72e>
 100e088:	9b04      	ldr	r3, [sp, #16]
 100e08a:	3301      	adds	r3, #1
 100e08c:	f000 8173 	beq.w	100e376 <_svfprintf_r+0x87e>
 100e090:	ea54 0305 	orrs.w	r3, r4, r5
 100e094:	9a04      	ldr	r2, [sp, #16]
 100e096:	9b03      	ldr	r3, [sp, #12]
 100e098:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 100e09c:	bf14      	ite	ne
 100e09e:	2301      	movne	r3, #1
 100e0a0:	2300      	moveq	r3, #0
 100e0a2:	2a00      	cmp	r2, #0
 100e0a4:	bf18      	it	ne
 100e0a6:	2301      	movne	r3, #1
 100e0a8:	2b00      	cmp	r3, #0
 100e0aa:	f040 8163 	bne.w	100e374 <_svfprintf_r+0x87c>
 100e0ae:	aa54      	add	r2, sp, #336	; 0x150
 100e0b0:	9304      	str	r3, [sp, #16]
 100e0b2:	920b      	str	r2, [sp, #44]	; 0x2c
 100e0b4:	9307      	str	r3, [sp, #28]
 100e0b6:	e677      	b.n	100dda8 <_svfprintf_r+0x2b0>
 100e0b8:	06b0      	lsls	r0, r6, #26
 100e0ba:	930e      	str	r3, [sp, #56]	; 0x38
 100e0bc:	f249 5348 	movw	r3, #38216	; 0x9548
 100e0c0:	f2c0 1305 	movt	r3, #261	; 0x105
 100e0c4:	9315      	str	r3, [sp, #84]	; 0x54
 100e0c6:	f53f ae34 	bmi.w	100dd32 <_svfprintf_r+0x23a>
 100e0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e0cc:	06f1      	lsls	r1, r6, #27
 100e0ce:	f853 4b04 	ldr.w	r4, [r3], #4
 100e0d2:	9309      	str	r3, [sp, #36]	; 0x24
 100e0d4:	d40b      	bmi.n	100e0ee <_svfprintf_r+0x5f6>
 100e0d6:	0672      	lsls	r2, r6, #25
 100e0d8:	bf44      	itt	mi
 100e0da:	b2a4      	uxthmi	r4, r4
 100e0dc:	2500      	movmi	r5, #0
 100e0de:	f53f ae2f 	bmi.w	100dd40 <_svfprintf_r+0x248>
 100e0e2:	05b3      	lsls	r3, r6, #22
 100e0e4:	bf44      	itt	mi
 100e0e6:	b2e4      	uxtbmi	r4, r4
 100e0e8:	2500      	movmi	r5, #0
 100e0ea:	f53f ae29 	bmi.w	100dd40 <_svfprintf_r+0x248>
 100e0ee:	2500      	movs	r5, #0
 100e0f0:	ea54 0305 	orrs.w	r3, r4, r5
 100e0f4:	f006 0301 	and.w	r3, r6, #1
 100e0f8:	bf08      	it	eq
 100e0fa:	2300      	moveq	r3, #0
 100e0fc:	2b00      	cmp	r3, #0
 100e0fe:	f43f ae28 	beq.w	100dd52 <_svfprintf_r+0x25a>
 100e102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100e104:	f046 0602 	orr.w	r6, r6, #2
 100e108:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100e10c:	2330      	movs	r3, #48	; 0x30
 100e10e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 100e112:	e61e      	b.n	100dd52 <_svfprintf_r+0x25a>
 100e114:	06b4      	lsls	r4, r6, #26
 100e116:	930e      	str	r3, [sp, #56]	; 0x38
 100e118:	f046 0310 	orr.w	r3, r6, #16
 100e11c:	9303      	str	r3, [sp, #12]
 100e11e:	f53f af60 	bmi.w	100dfe2 <_svfprintf_r+0x4ea>
 100e122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e124:	1d1a      	adds	r2, r3, #4
 100e126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e128:	2500      	movs	r5, #0
 100e12a:	9209      	str	r2, [sp, #36]	; 0x24
 100e12c:	681c      	ldr	r4, [r3, #0]
 100e12e:	2301      	movs	r3, #1
 100e130:	e613      	b.n	100dd5a <_svfprintf_r+0x262>
 100e132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100e134:	930e      	str	r3, [sp, #56]	; 0x38
 100e136:	2300      	movs	r3, #0
 100e138:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100e13c:	f855 2b04 	ldr.w	r2, [r5], #4
 100e140:	920b      	str	r2, [sp, #44]	; 0x2c
 100e142:	2a00      	cmp	r2, #0
 100e144:	f000 84bb 	beq.w	100eabe <_svfprintf_r+0xfc6>
 100e148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100e14a:	2b53      	cmp	r3, #83	; 0x53
 100e14c:	f000 8600 	beq.w	100ed50 <_svfprintf_r+0x1258>
 100e150:	f016 0310 	ands.w	r3, r6, #16
 100e154:	9310      	str	r3, [sp, #64]	; 0x40
 100e156:	f040 85fb 	bne.w	100ed50 <_svfprintf_r+0x1258>
 100e15a:	9a04      	ldr	r2, [sp, #16]
 100e15c:	1c53      	adds	r3, r2, #1
 100e15e:	f001 801b 	beq.w	100f198 <_svfprintf_r+0x16a0>
 100e162:	9910      	ldr	r1, [sp, #64]	; 0x40
 100e164:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100e166:	f005 f853 	bl	1013210 <memchr>
 100e16a:	900a      	str	r0, [sp, #40]	; 0x28
 100e16c:	2800      	cmp	r0, #0
 100e16e:	f001 81dc 	beq.w	100f52a <_svfprintf_r+0x1a32>
 100e172:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 100e176:	9509      	str	r5, [sp, #36]	; 0x24
 100e178:	1a9a      	subs	r2, r3, r2
 100e17a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e17c:	9207      	str	r2, [sp, #28]
 100e17e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100e182:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 100e186:	9304      	str	r3, [sp, #16]
 100e188:	9313      	str	r3, [sp, #76]	; 0x4c
 100e18a:	9203      	str	r2, [sp, #12]
 100e18c:	9311      	str	r3, [sp, #68]	; 0x44
 100e18e:	930a      	str	r3, [sp, #40]	; 0x28
 100e190:	e617      	b.n	100ddc2 <_svfprintf_r+0x2ca>
 100e192:	06b4      	lsls	r4, r6, #26
 100e194:	930e      	str	r3, [sp, #56]	; 0x38
 100e196:	f046 0310 	orr.w	r3, r6, #16
 100e19a:	d40f      	bmi.n	100e1bc <_svfprintf_r+0x6c4>
 100e19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e19e:	3204      	adds	r2, #4
 100e1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 100e1a2:	2500      	movs	r5, #0
 100e1a4:	9209      	str	r2, [sp, #36]	; 0x24
 100e1a6:	680c      	ldr	r4, [r1, #0]
 100e1a8:	e00f      	b.n	100e1ca <_svfprintf_r+0x6d2>
 100e1aa:	f046 0608 	orr.w	r6, r6, #8
 100e1ae:	783b      	ldrb	r3, [r7, #0]
 100e1b0:	e50d      	b.n	100dbce <_svfprintf_r+0xd6>
 100e1b2:	06b0      	lsls	r0, r6, #26
 100e1b4:	930e      	str	r3, [sp, #56]	; 0x38
 100e1b6:	f140 845e 	bpl.w	100ea76 <_svfprintf_r+0xf7e>
 100e1ba:	4633      	mov	r3, r6
 100e1bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100e1be:	3507      	adds	r5, #7
 100e1c0:	f025 0207 	bic.w	r2, r5, #7
 100e1c4:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100e1c8:	9209      	str	r2, [sp, #36]	; 0x24
 100e1ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 100e1ce:	9303      	str	r3, [sp, #12]
 100e1d0:	2300      	movs	r3, #0
 100e1d2:	e5c2      	b.n	100dd5a <_svfprintf_r+0x262>
 100e1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e1d6:	06b0      	lsls	r0, r6, #26
 100e1d8:	f102 0304 	add.w	r3, r2, #4
 100e1dc:	f100 8441 	bmi.w	100ea62 <_svfprintf_r+0xf6a>
 100e1e0:	06f1      	lsls	r1, r6, #27
 100e1e2:	f100 8608 	bmi.w	100edf6 <_svfprintf_r+0x12fe>
 100e1e6:	0672      	lsls	r2, r6, #25
 100e1e8:	f100 87c4 	bmi.w	100f174 <_svfprintf_r+0x167c>
 100e1ec:	05b5      	lsls	r5, r6, #22
 100e1ee:	f140 8602 	bpl.w	100edf6 <_svfprintf_r+0x12fe>
 100e1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e1f4:	9309      	str	r3, [sp, #36]	; 0x24
 100e1f6:	9b05      	ldr	r3, [sp, #20]
 100e1f8:	6812      	ldr	r2, [r2, #0]
 100e1fa:	7013      	strb	r3, [r2, #0]
 100e1fc:	e4bc      	b.n	100db78 <_svfprintf_r+0x80>
 100e1fe:	930e      	str	r3, [sp, #56]	; 0x38
 100e200:	f046 0310 	orr.w	r3, r6, #16
 100e204:	06b6      	lsls	r6, r6, #26
 100e206:	9303      	str	r3, [sp, #12]
 100e208:	f53f af2f 	bmi.w	100e06a <_svfprintf_r+0x572>
 100e20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e20e:	1d1a      	adds	r2, r3, #4
 100e210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e212:	9209      	str	r2, [sp, #36]	; 0x24
 100e214:	681c      	ldr	r4, [r3, #0]
 100e216:	17e5      	asrs	r5, r4, #31
 100e218:	4622      	mov	r2, r4
 100e21a:	2a00      	cmp	r2, #0
 100e21c:	462b      	mov	r3, r5
 100e21e:	f173 0300 	sbcs.w	r3, r3, #0
 100e222:	f6bf af31 	bge.w	100e088 <_svfprintf_r+0x590>
 100e226:	4264      	negs	r4, r4
 100e228:	9904      	ldr	r1, [sp, #16]
 100e22a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 100e22e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100e232:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 100e236:	1c4a      	adds	r2, r1, #1
 100e238:	f04f 0301 	mov.w	r3, #1
 100e23c:	f47f ad94 	bne.w	100dd68 <_svfprintf_r+0x270>
 100e240:	2b01      	cmp	r3, #1
 100e242:	f000 8098 	beq.w	100e376 <_svfprintf_r+0x87e>
 100e246:	2b02      	cmp	r3, #2
 100e248:	bf18      	it	ne
 100e24a:	a954      	addne	r1, sp, #336	; 0x150
 100e24c:	f040 818f 	bne.w	100e56e <_svfprintf_r+0xa76>
 100e250:	ab54      	add	r3, sp, #336	; 0x150
 100e252:	9e15      	ldr	r6, [sp, #84]	; 0x54
 100e254:	461a      	mov	r2, r3
 100e256:	f004 010f 	and.w	r1, r4, #15
 100e25a:	0923      	lsrs	r3, r4, #4
 100e25c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 100e260:	0928      	lsrs	r0, r5, #4
 100e262:	5c71      	ldrb	r1, [r6, r1]
 100e264:	461c      	mov	r4, r3
 100e266:	4605      	mov	r5, r0
 100e268:	ea54 0305 	orrs.w	r3, r4, r5
 100e26c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 100e270:	d1f1      	bne.n	100e256 <_svfprintf_r+0x75e>
 100e272:	ab54      	add	r3, sp, #336	; 0x150
 100e274:	920b      	str	r2, [sp, #44]	; 0x2c
 100e276:	1a9b      	subs	r3, r3, r2
 100e278:	9e03      	ldr	r6, [sp, #12]
 100e27a:	9307      	str	r3, [sp, #28]
 100e27c:	e594      	b.n	100dda8 <_svfprintf_r+0x2b0>
 100e27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e280:	2b43      	cmp	r3, #67	; 0x43
 100e282:	930e      	str	r3, [sp, #56]	; 0x38
 100e284:	f102 0504 	add.w	r5, r2, #4
 100e288:	d002      	beq.n	100e290 <_svfprintf_r+0x798>
 100e28a:	06f3      	lsls	r3, r6, #27
 100e28c:	f140 8402 	bpl.w	100ea94 <_svfprintf_r+0xf9c>
 100e290:	2208      	movs	r2, #8
 100e292:	2100      	movs	r1, #0
 100e294:	a826      	add	r0, sp, #152	; 0x98
 100e296:	ac3b      	add	r4, sp, #236	; 0xec
 100e298:	f7fe fe22 	bl	100cee0 <memset>
 100e29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100e29e:	ab26      	add	r3, sp, #152	; 0x98
 100e2a0:	4621      	mov	r1, r4
 100e2a2:	4650      	mov	r0, sl
 100e2a4:	6812      	ldr	r2, [r2, #0]
 100e2a6:	f003 f829 	bl	10112fc <_wcrtomb_r>
 100e2aa:	1c43      	adds	r3, r0, #1
 100e2ac:	9007      	str	r0, [sp, #28]
 100e2ae:	f001 80eb 	beq.w	100f488 <_svfprintf_r+0x1990>
 100e2b2:	9b07      	ldr	r3, [sp, #28]
 100e2b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100e2b8:	9303      	str	r3, [sp, #12]
 100e2ba:	2300      	movs	r3, #0
 100e2bc:	9509      	str	r5, [sp, #36]	; 0x24
 100e2be:	4619      	mov	r1, r3
 100e2c0:	940b      	str	r4, [sp, #44]	; 0x2c
 100e2c2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100e2c6:	930a      	str	r3, [sp, #40]	; 0x28
 100e2c8:	9304      	str	r3, [sp, #16]
 100e2ca:	9313      	str	r3, [sp, #76]	; 0x4c
 100e2cc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100e2d0:	e57b      	b.n	100ddca <_svfprintf_r+0x2d2>
 100e2d2:	232b      	movs	r3, #43	; 0x2b
 100e2d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100e2d8:	783b      	ldrb	r3, [r7, #0]
 100e2da:	e478      	b.n	100dbce <_svfprintf_r+0xd6>
 100e2dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100e2de:	930e      	str	r3, [sp, #56]	; 0x38
 100e2e0:	3507      	adds	r5, #7
 100e2e2:	ed9f 7bbd 	vldr	d7, [pc, #756]	; 100e5d8 <_svfprintf_r+0xae0>
 100e2e6:	f025 0307 	bic.w	r3, r5, #7
 100e2ea:	ecb3 8b02 	vldmia	r3!, {d8}
 100e2ee:	eeb0 6bc8 	vabs.f64	d6, d8
 100e2f2:	9309      	str	r3, [sp, #36]	; 0x24
 100e2f4:	eeb4 6b47 	vcmp.f64	d6, d7
 100e2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e2fc:	f340 8309 	ble.w	100e912 <_svfprintf_r+0xe1a>
 100e300:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 100e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e308:	bf58      	it	pl
 100e30a:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 100e30e:	d502      	bpl.n	100e316 <_svfprintf_r+0x81e>
 100e310:	212d      	movs	r1, #45	; 0x2d
 100e312:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100e316:	f249 7384 	movw	r3, #38788	; 0x9784
 100e31a:	f249 7488 	movw	r4, #38792	; 0x9788
 100e31e:	f2c0 1305 	movt	r3, #261	; 0x105
 100e322:	f2c0 1405 	movt	r4, #261	; 0x105
 100e326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100e328:	2200      	movs	r2, #0
 100e32a:	2003      	movs	r0, #3
 100e32c:	920a      	str	r2, [sp, #40]	; 0x28
 100e32e:	2d47      	cmp	r5, #71	; 0x47
 100e330:	bfc8      	it	gt
 100e332:	4623      	movgt	r3, r4
 100e334:	9003      	str	r0, [sp, #12]
 100e336:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 100e33a:	930b      	str	r3, [sp, #44]	; 0x2c
 100e33c:	9007      	str	r0, [sp, #28]
 100e33e:	9204      	str	r2, [sp, #16]
 100e340:	9213      	str	r2, [sp, #76]	; 0x4c
 100e342:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100e346:	e53c      	b.n	100ddc2 <_svfprintf_r+0x2ca>
 100e348:	461a      	mov	r2, r3
 100e34a:	930e      	str	r3, [sp, #56]	; 0x38
 100e34c:	2b00      	cmp	r3, #0
 100e34e:	f43f acc3 	beq.w	100dcd8 <_svfprintf_r+0x1e0>
 100e352:	2300      	movs	r3, #0
 100e354:	2001      	movs	r0, #1
 100e356:	4619      	mov	r1, r3
 100e358:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100e35c:	930a      	str	r3, [sp, #40]	; 0x28
 100e35e:	9304      	str	r3, [sp, #16]
 100e360:	9313      	str	r3, [sp, #76]	; 0x4c
 100e362:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100e366:	ab3b      	add	r3, sp, #236	; 0xec
 100e368:	9003      	str	r0, [sp, #12]
 100e36a:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 100e36e:	9007      	str	r0, [sp, #28]
 100e370:	930b      	str	r3, [sp, #44]	; 0x2c
 100e372:	e52a      	b.n	100ddca <_svfprintf_r+0x2d2>
 100e374:	9603      	str	r6, [sp, #12]
 100e376:	2d00      	cmp	r5, #0
 100e378:	bf08      	it	eq
 100e37a:	2c0a      	cmpeq	r4, #10
 100e37c:	f080 8544 	bcs.w	100ee08 <_svfprintf_r+0x1310>
 100e380:	2301      	movs	r3, #1
 100e382:	3430      	adds	r4, #48	; 0x30
 100e384:	9307      	str	r3, [sp, #28]
 100e386:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100e38a:	9e03      	ldr	r6, [sp, #12]
 100e38c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 100e390:	930b      	str	r3, [sp, #44]	; 0x2c
 100e392:	e509      	b.n	100dda8 <_svfprintf_r+0x2b0>
 100e394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100e396:	2b65      	cmp	r3, #101	; 0x65
 100e398:	f340 8124 	ble.w	100e5e4 <_svfprintf_r+0xaec>
 100e39c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100e3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e3a4:	f040 81d1 	bne.w	100e74a <_svfprintf_r+0xc52>
 100e3a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e3aa:	3201      	adds	r2, #1
 100e3ac:	2101      	movs	r1, #1
 100e3ae:	922a      	str	r2, [sp, #168]	; 0xa8
 100e3b0:	3301      	adds	r3, #1
 100e3b2:	f249 72b0 	movw	r2, #38832	; 0x97b0
 100e3b6:	2b07      	cmp	r3, #7
 100e3b8:	f2c0 1205 	movt	r2, #261	; 0x105
 100e3bc:	9329      	str	r3, [sp, #164]	; 0xa4
 100e3be:	e9c9 2100 	strd	r2, r1, [r9]
 100e3c2:	bfd8      	it	le
 100e3c4:	f109 0908 	addle.w	r9, r9, #8
 100e3c8:	f300 84b6 	bgt.w	100ed38 <_svfprintf_r+0x1240>
 100e3cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100e3ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100e3d0:	4293      	cmp	r3, r2
 100e3d2:	f280 8298 	bge.w	100e906 <_svfprintf_r+0xe0e>
 100e3d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 100e3d8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100e3dc:	f8c9 1000 	str.w	r1, [r9]
 100e3e0:	3301      	adds	r3, #1
 100e3e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 100e3e4:	2b07      	cmp	r3, #7
 100e3e6:	440a      	add	r2, r1
 100e3e8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e3ec:	f8c9 1004 	str.w	r1, [r9, #4]
 100e3f0:	bfd8      	it	le
 100e3f2:	f109 0908 	addle.w	r9, r9, #8
 100e3f6:	f300 8356 	bgt.w	100eaa6 <_svfprintf_r+0xfae>
 100e3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e3fc:	1e5c      	subs	r4, r3, #1
 100e3fe:	2c00      	cmp	r4, #0
 100e400:	f77f ad37 	ble.w	100de72 <_svfprintf_r+0x37a>
 100e404:	2c10      	cmp	r4, #16
 100e406:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e408:	f340 84d0 	ble.w	100edac <_svfprintf_r+0x12b4>
 100e40c:	9604      	str	r6, [sp, #16]
 100e40e:	2510      	movs	r5, #16
 100e410:	4626      	mov	r6, r4
 100e412:	4619      	mov	r1, r3
 100e414:	9c08      	ldr	r4, [sp, #32]
 100e416:	e003      	b.n	100e420 <_svfprintf_r+0x928>
 100e418:	3e10      	subs	r6, #16
 100e41a:	2e10      	cmp	r6, #16
 100e41c:	f340 84c3 	ble.w	100eda6 <_svfprintf_r+0x12ae>
 100e420:	3101      	adds	r1, #1
 100e422:	4b6f      	ldr	r3, [pc, #444]	; (100e5e0 <_svfprintf_r+0xae8>)
 100e424:	2907      	cmp	r1, #7
 100e426:	f102 0210 	add.w	r2, r2, #16
 100e42a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e42e:	e9c9 3500 	strd	r3, r5, [r9]
 100e432:	f109 0908 	add.w	r9, r9, #8
 100e436:	ddef      	ble.n	100e418 <_svfprintf_r+0x920>
 100e438:	aa28      	add	r2, sp, #160	; 0xa0
 100e43a:	4621      	mov	r1, r4
 100e43c:	4650      	mov	r0, sl
 100e43e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e442:	f005 feb1 	bl	10141a8 <__ssprint_r>
 100e446:	2800      	cmp	r0, #0
 100e448:	f040 80b9 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e44c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100e450:	e7e2      	b.n	100e418 <_svfprintf_r+0x920>
 100e452:	9b06      	ldr	r3, [sp, #24]
 100e454:	9903      	ldr	r1, [sp, #12]
 100e456:	1a5c      	subs	r4, r3, r1
 100e458:	2c00      	cmp	r4, #0
 100e45a:	f77f acf1 	ble.w	100de40 <_svfprintf_r+0x348>
 100e45e:	2c10      	cmp	r4, #16
 100e460:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e462:	dd26      	ble.n	100e4b2 <_svfprintf_r+0x9ba>
 100e464:	960c      	str	r6, [sp, #48]	; 0x30
 100e466:	2510      	movs	r5, #16
 100e468:	4626      	mov	r6, r4
 100e46a:	4619      	mov	r1, r3
 100e46c:	9c08      	ldr	r4, [sp, #32]
 100e46e:	e002      	b.n	100e476 <_svfprintf_r+0x97e>
 100e470:	3e10      	subs	r6, #16
 100e472:	2e10      	cmp	r6, #16
 100e474:	dd1a      	ble.n	100e4ac <_svfprintf_r+0x9b4>
 100e476:	3101      	adds	r1, #1
 100e478:	4b59      	ldr	r3, [pc, #356]	; (100e5e0 <_svfprintf_r+0xae8>)
 100e47a:	2907      	cmp	r1, #7
 100e47c:	f102 0210 	add.w	r2, r2, #16
 100e480:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e484:	e9c9 3500 	strd	r3, r5, [r9]
 100e488:	f109 0908 	add.w	r9, r9, #8
 100e48c:	ddf0      	ble.n	100e470 <_svfprintf_r+0x978>
 100e48e:	aa28      	add	r2, sp, #160	; 0xa0
 100e490:	4621      	mov	r1, r4
 100e492:	4650      	mov	r0, sl
 100e494:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e498:	f005 fe86 	bl	10141a8 <__ssprint_r>
 100e49c:	2800      	cmp	r0, #0
 100e49e:	f040 808e 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e4a2:	3e10      	subs	r6, #16
 100e4a4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100e4a8:	2e10      	cmp	r6, #16
 100e4aa:	dce4      	bgt.n	100e476 <_svfprintf_r+0x97e>
 100e4ac:	4634      	mov	r4, r6
 100e4ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 100e4b0:	460b      	mov	r3, r1
 100e4b2:	3301      	adds	r3, #1
 100e4b4:	494a      	ldr	r1, [pc, #296]	; (100e5e0 <_svfprintf_r+0xae8>)
 100e4b6:	2b07      	cmp	r3, #7
 100e4b8:	4422      	add	r2, r4
 100e4ba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e4be:	e9c9 1400 	strd	r1, r4, [r9]
 100e4c2:	bfd8      	it	le
 100e4c4:	f109 0908 	addle.w	r9, r9, #8
 100e4c8:	f77f acba 	ble.w	100de40 <_svfprintf_r+0x348>
 100e4cc:	aa28      	add	r2, sp, #160	; 0xa0
 100e4ce:	9908      	ldr	r1, [sp, #32]
 100e4d0:	4650      	mov	r0, sl
 100e4d2:	f005 fe69 	bl	10141a8 <__ssprint_r>
 100e4d6:	2800      	cmp	r0, #0
 100e4d8:	d171      	bne.n	100e5be <_svfprintf_r+0xac6>
 100e4da:	9b04      	ldr	r3, [sp, #16]
 100e4dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e4e0:	9907      	ldr	r1, [sp, #28]
 100e4e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e4e4:	1a5c      	subs	r4, r3, r1
 100e4e6:	2c00      	cmp	r4, #0
 100e4e8:	f77f acb0 	ble.w	100de4c <_svfprintf_r+0x354>
 100e4ec:	2c10      	cmp	r4, #16
 100e4ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e4f0:	dd25      	ble.n	100e53e <_svfprintf_r+0xa46>
 100e4f2:	9604      	str	r6, [sp, #16]
 100e4f4:	2510      	movs	r5, #16
 100e4f6:	4626      	mov	r6, r4
 100e4f8:	4619      	mov	r1, r3
 100e4fa:	9c08      	ldr	r4, [sp, #32]
 100e4fc:	e002      	b.n	100e504 <_svfprintf_r+0xa0c>
 100e4fe:	3e10      	subs	r6, #16
 100e500:	2e10      	cmp	r6, #16
 100e502:	dd19      	ble.n	100e538 <_svfprintf_r+0xa40>
 100e504:	3101      	adds	r1, #1
 100e506:	4b36      	ldr	r3, [pc, #216]	; (100e5e0 <_svfprintf_r+0xae8>)
 100e508:	2907      	cmp	r1, #7
 100e50a:	f102 0210 	add.w	r2, r2, #16
 100e50e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e512:	e9c9 3500 	strd	r3, r5, [r9]
 100e516:	f109 0908 	add.w	r9, r9, #8
 100e51a:	ddf0      	ble.n	100e4fe <_svfprintf_r+0xa06>
 100e51c:	aa28      	add	r2, sp, #160	; 0xa0
 100e51e:	4621      	mov	r1, r4
 100e520:	4650      	mov	r0, sl
 100e522:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e526:	f005 fe3f 	bl	10141a8 <__ssprint_r>
 100e52a:	2800      	cmp	r0, #0
 100e52c:	d147      	bne.n	100e5be <_svfprintf_r+0xac6>
 100e52e:	3e10      	subs	r6, #16
 100e530:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100e534:	2e10      	cmp	r6, #16
 100e536:	dce5      	bgt.n	100e504 <_svfprintf_r+0xa0c>
 100e538:	4634      	mov	r4, r6
 100e53a:	9e04      	ldr	r6, [sp, #16]
 100e53c:	460b      	mov	r3, r1
 100e53e:	3301      	adds	r3, #1
 100e540:	4927      	ldr	r1, [pc, #156]	; (100e5e0 <_svfprintf_r+0xae8>)
 100e542:	2b07      	cmp	r3, #7
 100e544:	4422      	add	r2, r4
 100e546:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e54a:	e9c9 1400 	strd	r1, r4, [r9]
 100e54e:	bfd8      	it	le
 100e550:	f109 0908 	addle.w	r9, r9, #8
 100e554:	f77f ac7a 	ble.w	100de4c <_svfprintf_r+0x354>
 100e558:	aa28      	add	r2, sp, #160	; 0xa0
 100e55a:	9908      	ldr	r1, [sp, #32]
 100e55c:	4650      	mov	r0, sl
 100e55e:	f005 fe23 	bl	10141a8 <__ssprint_r>
 100e562:	bb60      	cbnz	r0, 100e5be <_svfprintf_r+0xac6>
 100e564:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e566:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e56a:	e46f      	b.n	100de4c <_svfprintf_r+0x354>
 100e56c:	4611      	mov	r1, r2
 100e56e:	08e2      	lsrs	r2, r4, #3
 100e570:	08e8      	lsrs	r0, r5, #3
 100e572:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 100e576:	f004 0307 	and.w	r3, r4, #7
 100e57a:	4605      	mov	r5, r0
 100e57c:	3330      	adds	r3, #48	; 0x30
 100e57e:	4614      	mov	r4, r2
 100e580:	ea54 0005 	orrs.w	r0, r4, r5
 100e584:	f801 3c01 	strb.w	r3, [r1, #-1]
 100e588:	f101 32ff 	add.w	r2, r1, #4294967295
 100e58c:	d1ee      	bne.n	100e56c <_svfprintf_r+0xa74>
 100e58e:	9e03      	ldr	r6, [sp, #12]
 100e590:	920b      	str	r2, [sp, #44]	; 0x2c
 100e592:	4630      	mov	r0, r6
 100e594:	2b30      	cmp	r3, #48	; 0x30
 100e596:	bf0c      	ite	eq
 100e598:	2000      	moveq	r0, #0
 100e59a:	f000 0001 	andne.w	r0, r0, #1
 100e59e:	2800      	cmp	r0, #0
 100e5a0:	f040 840f 	bne.w	100edc2 <_svfprintf_r+0x12ca>
 100e5a4:	ab54      	add	r3, sp, #336	; 0x150
 100e5a6:	1a9b      	subs	r3, r3, r2
 100e5a8:	9307      	str	r3, [sp, #28]
 100e5aa:	f7ff bbfd 	b.w	100dda8 <_svfprintf_r+0x2b0>
 100e5ae:	aa28      	add	r2, sp, #160	; 0xa0
 100e5b0:	9908      	ldr	r1, [sp, #32]
 100e5b2:	4650      	mov	r0, sl
 100e5b4:	f005 fdf8 	bl	10141a8 <__ssprint_r>
 100e5b8:	2800      	cmp	r0, #0
 100e5ba:	f43f ac6d 	beq.w	100de98 <_svfprintf_r+0x3a0>
 100e5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100e5c0:	2b00      	cmp	r3, #0
 100e5c2:	f43f ab8d 	beq.w	100dce0 <_svfprintf_r+0x1e8>
 100e5c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e5c8:	4650      	mov	r0, sl
 100e5ca:	f004 fa59 	bl	1012a80 <_free_r>
 100e5ce:	f7ff bb87 	b.w	100dce0 <_svfprintf_r+0x1e8>
 100e5d2:	bf00      	nop
 100e5d4:	f3af 8000 	nop.w
 100e5d8:	ffffffff 	.word	0xffffffff
 100e5dc:	7fefffff 	.word	0x7fefffff
 100e5e0:	01056a24 	.word	0x01056a24
 100e5e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100e5e6:	3201      	adds	r2, #1
 100e5e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100e5ea:	f109 0308 	add.w	r3, r9, #8
 100e5ee:	2c01      	cmp	r4, #1
 100e5f0:	f100 0101 	add.w	r1, r0, #1
 100e5f4:	f340 8134 	ble.w	100e860 <_svfprintf_r+0xd68>
 100e5f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100e5fa:	2907      	cmp	r1, #7
 100e5fc:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e600:	f8c9 0000 	str.w	r0, [r9]
 100e604:	f04f 0001 	mov.w	r0, #1
 100e608:	f8c9 0004 	str.w	r0, [r9, #4]
 100e60c:	f300 8163 	bgt.w	100e8d6 <_svfprintf_r+0xdde>
 100e610:	3101      	adds	r1, #1
 100e612:	9816      	ldr	r0, [sp, #88]	; 0x58
 100e614:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100e616:	2907      	cmp	r1, #7
 100e618:	4402      	add	r2, r0
 100e61a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e61e:	e9c3 4000 	strd	r4, r0, [r3]
 100e622:	bfd8      	it	le
 100e624:	3308      	addle	r3, #8
 100e626:	f300 8162 	bgt.w	100e8ee <_svfprintf_r+0xdf6>
 100e62a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100e62e:	1c48      	adds	r0, r1, #1
 100e630:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100e632:	f103 0908 	add.w	r9, r3, #8
 100e636:	4684      	mov	ip, r0
 100e638:	3c01      	subs	r4, #1
 100e63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e63e:	f000 8122 	beq.w	100e886 <_svfprintf_r+0xd8e>
 100e642:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100e644:	2807      	cmp	r0, #7
 100e646:	4422      	add	r2, r4
 100e648:	605c      	str	r4, [r3, #4]
 100e64a:	f105 0501 	add.w	r5, r5, #1
 100e64e:	922a      	str	r2, [sp, #168]	; 0xa8
 100e650:	601d      	str	r5, [r3, #0]
 100e652:	9029      	str	r0, [sp, #164]	; 0xa4
 100e654:	f300 82de 	bgt.w	100ec14 <_svfprintf_r+0x111c>
 100e658:	f103 0410 	add.w	r4, r3, #16
 100e65c:	1c88      	adds	r0, r1, #2
 100e65e:	464b      	mov	r3, r9
 100e660:	46a1      	mov	r9, r4
 100e662:	9918      	ldr	r1, [sp, #96]	; 0x60
 100e664:	2807      	cmp	r0, #7
 100e666:	9029      	str	r0, [sp, #164]	; 0xa4
 100e668:	440a      	add	r2, r1
 100e66a:	922a      	str	r2, [sp, #168]	; 0xa8
 100e66c:	6059      	str	r1, [r3, #4]
 100e66e:	a922      	add	r1, sp, #136	; 0x88
 100e670:	6019      	str	r1, [r3, #0]
 100e672:	f77f abfe 	ble.w	100de72 <_svfprintf_r+0x37a>
 100e676:	aa28      	add	r2, sp, #160	; 0xa0
 100e678:	9908      	ldr	r1, [sp, #32]
 100e67a:	4650      	mov	r0, sl
 100e67c:	f005 fd94 	bl	10141a8 <__ssprint_r>
 100e680:	2800      	cmp	r0, #0
 100e682:	d19c      	bne.n	100e5be <_svfprintf_r+0xac6>
 100e684:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e686:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e68a:	f7ff bbf2 	b.w	100de72 <_svfprintf_r+0x37a>
 100e68e:	aa28      	add	r2, sp, #160	; 0xa0
 100e690:	9908      	ldr	r1, [sp, #32]
 100e692:	4650      	mov	r0, sl
 100e694:	f005 fd88 	bl	10141a8 <__ssprint_r>
 100e698:	2800      	cmp	r0, #0
 100e69a:	d190      	bne.n	100e5be <_svfprintf_r+0xac6>
 100e69c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e69e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e6a2:	f7ff bbb6 	b.w	100de12 <_svfprintf_r+0x31a>
 100e6a6:	aa28      	add	r2, sp, #160	; 0xa0
 100e6a8:	9908      	ldr	r1, [sp, #32]
 100e6aa:	4650      	mov	r0, sl
 100e6ac:	f005 fd7c 	bl	10141a8 <__ssprint_r>
 100e6b0:	2800      	cmp	r0, #0
 100e6b2:	d184      	bne.n	100e5be <_svfprintf_r+0xac6>
 100e6b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e6b6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e6ba:	f7ff bbbd 	b.w	100de38 <_svfprintf_r+0x340>
 100e6be:	2c10      	cmp	r4, #16
 100e6c0:	f646 2514 	movw	r5, #27156	; 0x6a14
 100e6c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e6c6:	f2c0 1505 	movt	r5, #261	; 0x105
 100e6ca:	dd24      	ble.n	100e716 <_svfprintf_r+0xc1e>
 100e6cc:	9704      	str	r7, [sp, #16]
 100e6ce:	2610      	movs	r6, #16
 100e6d0:	462f      	mov	r7, r5
 100e6d2:	4619      	mov	r1, r3
 100e6d4:	9d08      	ldr	r5, [sp, #32]
 100e6d6:	e002      	b.n	100e6de <_svfprintf_r+0xbe6>
 100e6d8:	3c10      	subs	r4, #16
 100e6da:	2c10      	cmp	r4, #16
 100e6dc:	dd18      	ble.n	100e710 <_svfprintf_r+0xc18>
 100e6de:	3101      	adds	r1, #1
 100e6e0:	3210      	adds	r2, #16
 100e6e2:	2907      	cmp	r1, #7
 100e6e4:	e9c9 7600 	strd	r7, r6, [r9]
 100e6e8:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e6ec:	f109 0908 	add.w	r9, r9, #8
 100e6f0:	ddf2      	ble.n	100e6d8 <_svfprintf_r+0xbe0>
 100e6f2:	aa28      	add	r2, sp, #160	; 0xa0
 100e6f4:	4629      	mov	r1, r5
 100e6f6:	4650      	mov	r0, sl
 100e6f8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e6fc:	f005 fd54 	bl	10141a8 <__ssprint_r>
 100e700:	2800      	cmp	r0, #0
 100e702:	f47f af5c 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e706:	3c10      	subs	r4, #16
 100e708:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100e70c:	2c10      	cmp	r4, #16
 100e70e:	dce6      	bgt.n	100e6de <_svfprintf_r+0xbe6>
 100e710:	463d      	mov	r5, r7
 100e712:	9f04      	ldr	r7, [sp, #16]
 100e714:	460b      	mov	r3, r1
 100e716:	3301      	adds	r3, #1
 100e718:	4422      	add	r2, r4
 100e71a:	2b07      	cmp	r3, #7
 100e71c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100e720:	e9c9 5400 	strd	r5, r4, [r9]
 100e724:	f77f abad 	ble.w	100de82 <_svfprintf_r+0x38a>
 100e728:	aa28      	add	r2, sp, #160	; 0xa0
 100e72a:	9908      	ldr	r1, [sp, #32]
 100e72c:	4650      	mov	r0, sl
 100e72e:	f005 fd3b 	bl	10141a8 <__ssprint_r>
 100e732:	2800      	cmp	r0, #0
 100e734:	f47f af43 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e738:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e73a:	f7ff bba2 	b.w	100de82 <_svfprintf_r+0x38a>
 100e73e:	ab54      	add	r3, sp, #336	; 0x150
 100e740:	9204      	str	r2, [sp, #16]
 100e742:	930b      	str	r3, [sp, #44]	; 0x2c
 100e744:	9207      	str	r2, [sp, #28]
 100e746:	f7ff bb2f 	b.w	100dda8 <_svfprintf_r+0x2b0>
 100e74a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100e74c:	2900      	cmp	r1, #0
 100e74e:	f340 82a2 	ble.w	100ec96 <_svfprintf_r+0x119e>
 100e752:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e754:	9912      	ldr	r1, [sp, #72]	; 0x48
 100e756:	428b      	cmp	r3, r1
 100e758:	bfa8      	it	ge
 100e75a:	460b      	movge	r3, r1
 100e75c:	2b00      	cmp	r3, #0
 100e75e:	461c      	mov	r4, r3
 100e760:	dd0f      	ble.n	100e782 <_svfprintf_r+0xc8a>
 100e762:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e764:	4422      	add	r2, r4
 100e766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100e768:	3301      	adds	r3, #1
 100e76a:	f8c9 4004 	str.w	r4, [r9, #4]
 100e76e:	2b07      	cmp	r3, #7
 100e770:	922a      	str	r2, [sp, #168]	; 0xa8
 100e772:	f8c9 1000 	str.w	r1, [r9]
 100e776:	bfd8      	it	le
 100e778:	f109 0908 	addle.w	r9, r9, #8
 100e77c:	9329      	str	r3, [sp, #164]	; 0xa4
 100e77e:	f300 84e1 	bgt.w	100f144 <_svfprintf_r+0x164c>
 100e782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e784:	2c00      	cmp	r4, #0
 100e786:	bfa8      	it	ge
 100e788:	1b1b      	subge	r3, r3, r4
 100e78a:	2b00      	cmp	r3, #0
 100e78c:	461c      	mov	r4, r3
 100e78e:	f300 81b9 	bgt.w	100eb04 <_svfprintf_r+0x100c>
 100e792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100e794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e796:	440b      	add	r3, r1
 100e798:	0571      	lsls	r1, r6, #21
 100e79a:	461d      	mov	r5, r3
 100e79c:	f100 81db 	bmi.w	100eb56 <_svfprintf_r+0x105e>
 100e7a0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100e7a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e7a4:	429c      	cmp	r4, r3
 100e7a6:	db02      	blt.n	100e7ae <_svfprintf_r+0xcb6>
 100e7a8:	07f3      	lsls	r3, r6, #31
 100e7aa:	f140 84d8 	bpl.w	100f15e <_svfprintf_r+0x1666>
 100e7ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e7b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 100e7b2:	3301      	adds	r3, #1
 100e7b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100e7b6:	2b07      	cmp	r3, #7
 100e7b8:	440a      	add	r2, r1
 100e7ba:	f8c9 1004 	str.w	r1, [r9, #4]
 100e7be:	f8c9 0000 	str.w	r0, [r9]
 100e7c2:	bfd8      	it	le
 100e7c4:	f109 0908 	addle.w	r9, r9, #8
 100e7c8:	922a      	str	r2, [sp, #168]	; 0xa8
 100e7ca:	9329      	str	r3, [sp, #164]	; 0xa4
 100e7cc:	f300 85c4 	bgt.w	100f358 <_svfprintf_r+0x1860>
 100e7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100e7d2:	4619      	mov	r1, r3
 100e7d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e7d6:	4419      	add	r1, r3
 100e7d8:	1b1b      	subs	r3, r3, r4
 100e7da:	1b4c      	subs	r4, r1, r5
 100e7dc:	429c      	cmp	r4, r3
 100e7de:	bfa8      	it	ge
 100e7e0:	461c      	movge	r4, r3
 100e7e2:	2c00      	cmp	r4, #0
 100e7e4:	dd0e      	ble.n	100e804 <_svfprintf_r+0xd0c>
 100e7e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100e7e8:	4422      	add	r2, r4
 100e7ea:	f8c9 5000 	str.w	r5, [r9]
 100e7ee:	3101      	adds	r1, #1
 100e7f0:	f8c9 4004 	str.w	r4, [r9, #4]
 100e7f4:	2907      	cmp	r1, #7
 100e7f6:	922a      	str	r2, [sp, #168]	; 0xa8
 100e7f8:	9129      	str	r1, [sp, #164]	; 0xa4
 100e7fa:	bfd8      	it	le
 100e7fc:	f109 0908 	addle.w	r9, r9, #8
 100e800:	f300 85b8 	bgt.w	100f374 <_svfprintf_r+0x187c>
 100e804:	2c00      	cmp	r4, #0
 100e806:	bfac      	ite	ge
 100e808:	1b1c      	subge	r4, r3, r4
 100e80a:	461c      	movlt	r4, r3
 100e80c:	2c00      	cmp	r4, #0
 100e80e:	f77f ab30 	ble.w	100de72 <_svfprintf_r+0x37a>
 100e812:	2c10      	cmp	r4, #16
 100e814:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100e816:	f340 82c9 	ble.w	100edac <_svfprintf_r+0x12b4>
 100e81a:	9604      	str	r6, [sp, #16]
 100e81c:	2510      	movs	r5, #16
 100e81e:	4626      	mov	r6, r4
 100e820:	4619      	mov	r1, r3
 100e822:	9c08      	ldr	r4, [sp, #32]
 100e824:	e003      	b.n	100e82e <_svfprintf_r+0xd36>
 100e826:	3e10      	subs	r6, #16
 100e828:	2e10      	cmp	r6, #16
 100e82a:	f340 82bc 	ble.w	100eda6 <_svfprintf_r+0x12ae>
 100e82e:	3101      	adds	r1, #1
 100e830:	4bb9      	ldr	r3, [pc, #740]	; (100eb18 <_svfprintf_r+0x1020>)
 100e832:	2907      	cmp	r1, #7
 100e834:	f102 0210 	add.w	r2, r2, #16
 100e838:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e83c:	e9c9 3500 	strd	r3, r5, [r9]
 100e840:	f109 0908 	add.w	r9, r9, #8
 100e844:	ddef      	ble.n	100e826 <_svfprintf_r+0xd2e>
 100e846:	aa28      	add	r2, sp, #160	; 0xa0
 100e848:	4621      	mov	r1, r4
 100e84a:	4650      	mov	r0, sl
 100e84c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100e850:	f005 fcaa 	bl	10141a8 <__ssprint_r>
 100e854:	2800      	cmp	r0, #0
 100e856:	f47f aeb2 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e85a:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100e85e:	e7e2      	b.n	100e826 <_svfprintf_r+0xd2e>
 100e860:	07f4      	lsls	r4, r6, #31
 100e862:	f53f aec9 	bmi.w	100e5f8 <_svfprintf_r+0xb00>
 100e866:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 100e868:	2907      	cmp	r1, #7
 100e86a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100e86e:	f8c9 4000 	str.w	r4, [r9]
 100e872:	f04f 0401 	mov.w	r4, #1
 100e876:	f8c9 4004 	str.w	r4, [r9, #4]
 100e87a:	f300 81cb 	bgt.w	100ec14 <_svfprintf_r+0x111c>
 100e87e:	3002      	adds	r0, #2
 100e880:	f109 0910 	add.w	r9, r9, #16
 100e884:	e6ed      	b.n	100e662 <_svfprintf_r+0xb6a>
 100e886:	2c00      	cmp	r4, #0
 100e888:	f77f aeeb 	ble.w	100e662 <_svfprintf_r+0xb6a>
 100e88c:	2c10      	cmp	r4, #16
 100e88e:	f340 869e 	ble.w	100f5ce <_svfprintf_r+0x1ad6>
 100e892:	2510      	movs	r5, #16
 100e894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 100e898:	e005      	b.n	100e8a6 <_svfprintf_r+0xdae>
 100e89a:	3c10      	subs	r4, #16
 100e89c:	f101 0c01 	add.w	ip, r1, #1
 100e8a0:	2c10      	cmp	r4, #16
 100e8a2:	f340 8302 	ble.w	100eeaa <_svfprintf_r+0x13b2>
 100e8a6:	489c      	ldr	r0, [pc, #624]	; (100eb18 <_svfprintf_r+0x1020>)
 100e8a8:	4661      	mov	r1, ip
 100e8aa:	2907      	cmp	r1, #7
 100e8ac:	f102 0210 	add.w	r2, r2, #16
 100e8b0:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 100e8b4:	e9c3 0500 	strd	r0, r5, [r3]
 100e8b8:	f103 0308 	add.w	r3, r3, #8
 100e8bc:	dded      	ble.n	100e89a <_svfprintf_r+0xda2>
 100e8be:	aa28      	add	r2, sp, #160	; 0xa0
 100e8c0:	4649      	mov	r1, r9
 100e8c2:	4650      	mov	r0, sl
 100e8c4:	f005 fc70 	bl	10141a8 <__ssprint_r>
 100e8c8:	ab2b      	add	r3, sp, #172	; 0xac
 100e8ca:	2800      	cmp	r0, #0
 100e8cc:	f47f ae77 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e8d0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100e8d4:	e7e1      	b.n	100e89a <_svfprintf_r+0xda2>
 100e8d6:	aa28      	add	r2, sp, #160	; 0xa0
 100e8d8:	9908      	ldr	r1, [sp, #32]
 100e8da:	4650      	mov	r0, sl
 100e8dc:	f005 fc64 	bl	10141a8 <__ssprint_r>
 100e8e0:	2800      	cmp	r0, #0
 100e8e2:	f47f ae6c 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e8e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e8e8:	ab2b      	add	r3, sp, #172	; 0xac
 100e8ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100e8ec:	e690      	b.n	100e610 <_svfprintf_r+0xb18>
 100e8ee:	aa28      	add	r2, sp, #160	; 0xa0
 100e8f0:	9908      	ldr	r1, [sp, #32]
 100e8f2:	4650      	mov	r0, sl
 100e8f4:	f005 fc58 	bl	10141a8 <__ssprint_r>
 100e8f8:	2800      	cmp	r0, #0
 100e8fa:	f47f ae60 	bne.w	100e5be <_svfprintf_r+0xac6>
 100e8fe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100e900:	ab2b      	add	r3, sp, #172	; 0xac
 100e902:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100e904:	e691      	b.n	100e62a <_svfprintf_r+0xb32>
 100e906:	07f4      	lsls	r4, r6, #31
 100e908:	bf58      	it	pl
 100e90a:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 100e90c:	f57f aab1 	bpl.w	100de72 <_svfprintf_r+0x37a>
 100e910:	e561      	b.n	100e3d6 <_svfprintf_r+0x8de>
 100e912:	eeb4 8b48 	vcmp.f64	d8, d8
 100e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e91a:	f180 862f 	bvs.w	100f57c <_svfprintf_r+0x1a84>
 100e91e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100e920:	f023 0420 	bic.w	r4, r3, #32
 100e924:	2c41      	cmp	r4, #65	; 0x41
 100e926:	f040 82e6 	bne.w	100eef6 <_svfprintf_r+0x13fe>
 100e92a:	2b61      	cmp	r3, #97	; 0x61
 100e92c:	f04f 0230 	mov.w	r2, #48	; 0x30
 100e930:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 100e934:	bf0c      	ite	eq
 100e936:	2378      	moveq	r3, #120	; 0x78
 100e938:	2358      	movne	r3, #88	; 0x58
 100e93a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100e93e:	9b04      	ldr	r3, [sp, #16]
 100e940:	2b63      	cmp	r3, #99	; 0x63
 100e942:	f300 848e 	bgt.w	100f262 <_svfprintf_r+0x176a>
 100e946:	2300      	movs	r3, #0
 100e948:	930a      	str	r3, [sp, #40]	; 0x28
 100e94a:	ab3b      	add	r3, sp, #236	; 0xec
 100e94c:	930b      	str	r3, [sp, #44]	; 0x2c
 100e94e:	ee18 3a90 	vmov	r3, s17
 100e952:	2b00      	cmp	r3, #0
 100e954:	f280 855a 	bge.w	100f40c <_svfprintf_r+0x1914>
 100e958:	eeb1 0b48 	vneg.f64	d0, d8
 100e95c:	232d      	movs	r3, #45	; 0x2d
 100e95e:	930c      	str	r3, [sp, #48]	; 0x30
 100e960:	a81f      	add	r0, sp, #124	; 0x7c
 100e962:	f005 fb99 	bl	1014098 <frexp>
 100e966:	9a04      	ldr	r2, [sp, #16]
 100e968:	990e      	ldr	r1, [sp, #56]	; 0x38
 100e96a:	f249 7094 	movw	r0, #38804	; 0x9794
 100e96e:	f2c0 1005 	movt	r0, #261	; 0x105
 100e972:	3a01      	subs	r2, #1
 100e974:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 100e976:	ee20 0b0b 	vmul.f64	d0, d0, d11
 100e97a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100e97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e982:	bf04      	itt	eq
 100e984:	2301      	moveq	r3, #1
 100e986:	931f      	streq	r3, [sp, #124]	; 0x7c
 100e988:	f249 5348 	movw	r3, #38216	; 0x9548
 100e98c:	f2c0 1305 	movt	r3, #261	; 0x105
 100e990:	2961      	cmp	r1, #97	; 0x61
 100e992:	bf18      	it	ne
 100e994:	4618      	movne	r0, r3
 100e996:	e005      	b.n	100e9a4 <_svfprintf_r+0xeac>
 100e998:	eeb5 0b40 	vcmp.f64	d0, #0.0
 100e99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e9a0:	d015      	beq.n	100e9ce <_svfprintf_r+0xed6>
 100e9a2:	461d      	mov	r5, r3
 100e9a4:	ee20 0b09 	vmul.f64	d0, d0, d9
 100e9a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 100e9ac:	462b      	mov	r3, r5
 100e9ae:	4611      	mov	r1, r2
 100e9b0:	f102 32ff 	add.w	r2, r2, #4294967295
 100e9b4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 100e9b8:	ee17 ca90 	vmov	ip, s15
 100e9bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 100e9c0:	ee30 0b46 	vsub.f64	d0, d0, d6
 100e9c4:	f810 c00c 	ldrb.w	ip, [r0, ip]
 100e9c8:	f803 cb01 	strb.w	ip, [r3], #1
 100e9cc:	d1e4      	bne.n	100e998 <_svfprintf_r+0xea0>
 100e9ce:	eeb4 0bca 	vcmpe.f64	d0, d10
 100e9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e9d6:	f300 855f 	bgt.w	100f498 <_svfprintf_r+0x19a0>
 100e9da:	eeb4 0b4a 	vcmp.f64	d0, d10
 100e9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100e9e2:	d104      	bne.n	100e9ee <_svfprintf_r+0xef6>
 100e9e4:	ee17 2a90 	vmov	r2, s15
 100e9e8:	07d2      	lsls	r2, r2, #31
 100e9ea:	f100 8555 	bmi.w	100f498 <_svfprintf_r+0x19a0>
 100e9ee:	2900      	cmp	r1, #0
 100e9f0:	bfa2      	ittt	ge
 100e9f2:	1c4a      	addge	r2, r1, #1
 100e9f4:	18d2      	addge	r2, r2, r3
 100e9f6:	2130      	movge	r1, #48	; 0x30
 100e9f8:	db03      	blt.n	100ea02 <_svfprintf_r+0xf0a>
 100e9fa:	f803 1b01 	strb.w	r1, [r3], #1
 100e9fe:	4293      	cmp	r3, r2
 100ea00:	d1fb      	bne.n	100e9fa <_svfprintf_r+0xf02>
 100ea02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100ea04:	f046 0602 	orr.w	r6, r6, #2
 100ea08:	1a9b      	subs	r3, r3, r2
 100ea0a:	9312      	str	r3, [sp, #72]	; 0x48
 100ea0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100ea0e:	9310      	str	r3, [sp, #64]	; 0x40
 100ea10:	e2b5      	b.n	100ef7e <_svfprintf_r+0x1486>
 100ea12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ea14:	06f4      	lsls	r4, r6, #27
 100ea16:	f103 0204 	add.w	r2, r3, #4
 100ea1a:	f100 85ea 	bmi.w	100f5f2 <_svfprintf_r+0x1afa>
 100ea1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ea20:	0670      	lsls	r0, r6, #25
 100ea22:	bf48      	it	mi
 100ea24:	f9b3 4000 	ldrshmi.w	r4, [r3]
 100ea28:	d404      	bmi.n	100ea34 <_svfprintf_r+0xf3c>
 100ea2a:	05b1      	lsls	r1, r6, #22
 100ea2c:	f140 83a9 	bpl.w	100f182 <_svfprintf_r+0x168a>
 100ea30:	f993 4000 	ldrsb.w	r4, [r3]
 100ea34:	17e5      	asrs	r5, r4, #31
 100ea36:	9209      	str	r2, [sp, #36]	; 0x24
 100ea38:	9603      	str	r6, [sp, #12]
 100ea3a:	4622      	mov	r2, r4
 100ea3c:	462b      	mov	r3, r5
 100ea3e:	f7ff bb1e 	b.w	100e07e <_svfprintf_r+0x586>
 100ea42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ea44:	06f1      	lsls	r1, r6, #27
 100ea46:	f852 4b04 	ldr.w	r4, [r2], #4
 100ea4a:	f100 85d5 	bmi.w	100f5f8 <_svfprintf_r+0x1b00>
 100ea4e:	0673      	lsls	r3, r6, #25
 100ea50:	9209      	str	r2, [sp, #36]	; 0x24
 100ea52:	9603      	str	r6, [sp, #12]
 100ea54:	f140 823b 	bpl.w	100eece <_svfprintf_r+0x13d6>
 100ea58:	b2a4      	uxth	r4, r4
 100ea5a:	2500      	movs	r5, #0
 100ea5c:	2301      	movs	r3, #1
 100ea5e:	f7ff b97c 	b.w	100dd5a <_svfprintf_r+0x262>
 100ea62:	9905      	ldr	r1, [sp, #20]
 100ea64:	6812      	ldr	r2, [r2, #0]
 100ea66:	9309      	str	r3, [sp, #36]	; 0x24
 100ea68:	17cd      	asrs	r5, r1, #31
 100ea6a:	4608      	mov	r0, r1
 100ea6c:	4629      	mov	r1, r5
 100ea6e:	e9c2 0100 	strd	r0, r1, [r2]
 100ea72:	f7ff b881 	b.w	100db78 <_svfprintf_r+0x80>
 100ea76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ea78:	06f1      	lsls	r1, r6, #27
 100ea7a:	f852 4b04 	ldr.w	r4, [r2], #4
 100ea7e:	f100 85db 	bmi.w	100f638 <_svfprintf_r+0x1b40>
 100ea82:	0673      	lsls	r3, r6, #25
 100ea84:	f140 822b 	bpl.w	100eede <_svfprintf_r+0x13e6>
 100ea88:	4633      	mov	r3, r6
 100ea8a:	9209      	str	r2, [sp, #36]	; 0x24
 100ea8c:	b2a4      	uxth	r4, r4
 100ea8e:	2500      	movs	r5, #0
 100ea90:	f7ff bb9b 	b.w	100e1ca <_svfprintf_r+0x6d2>
 100ea94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ea96:	2201      	movs	r2, #1
 100ea98:	ac3b      	add	r4, sp, #236	; 0xec
 100ea9a:	9203      	str	r2, [sp, #12]
 100ea9c:	9207      	str	r2, [sp, #28]
 100ea9e:	681b      	ldr	r3, [r3, #0]
 100eaa0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 100eaa4:	e409      	b.n	100e2ba <_svfprintf_r+0x7c2>
 100eaa6:	aa28      	add	r2, sp, #160	; 0xa0
 100eaa8:	9908      	ldr	r1, [sp, #32]
 100eaaa:	4650      	mov	r0, sl
 100eaac:	f005 fb7c 	bl	10141a8 <__ssprint_r>
 100eab0:	2800      	cmp	r0, #0
 100eab2:	f47f ad84 	bne.w	100e5be <_svfprintf_r+0xac6>
 100eab6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100eab8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100eabc:	e49d      	b.n	100e3fa <_svfprintf_r+0x902>
 100eabe:	9804      	ldr	r0, [sp, #16]
 100eac0:	f249 73a8 	movw	r3, #38824	; 0x97a8
 100eac4:	9204      	str	r2, [sp, #16]
 100eac6:	f2c0 1305 	movt	r3, #261	; 0x105
 100eaca:	2806      	cmp	r0, #6
 100eacc:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 100ead0:	4611      	mov	r1, r2
 100ead2:	9213      	str	r2, [sp, #76]	; 0x4c
 100ead4:	bf28      	it	cs
 100ead6:	2006      	movcs	r0, #6
 100ead8:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100eadc:	9003      	str	r0, [sp, #12]
 100eade:	9007      	str	r0, [sp, #28]
 100eae0:	930b      	str	r3, [sp, #44]	; 0x2c
 100eae2:	f7ff b96e 	b.w	100ddc2 <_svfprintf_r+0x2ca>
 100eae6:	2140      	movs	r1, #64	; 0x40
 100eae8:	4650      	mov	r0, sl
 100eaea:	f7fd f9f5 	bl	100bed8 <_malloc_r>
 100eaee:	9b08      	ldr	r3, [sp, #32]
 100eaf0:	6018      	str	r0, [r3, #0]
 100eaf2:	6118      	str	r0, [r3, #16]
 100eaf4:	2800      	cmp	r0, #0
 100eaf6:	f000 8591 	beq.w	100f61c <_svfprintf_r+0x1b24>
 100eafa:	9a08      	ldr	r2, [sp, #32]
 100eafc:	2340      	movs	r3, #64	; 0x40
 100eafe:	6153      	str	r3, [r2, #20]
 100eb00:	f7ff b81a 	b.w	100db38 <_svfprintf_r+0x40>
 100eb04:	2c10      	cmp	r4, #16
 100eb06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100eb08:	f340 82a9 	ble.w	100f05e <_svfprintf_r+0x1566>
 100eb0c:	9604      	str	r6, [sp, #16]
 100eb0e:	2510      	movs	r5, #16
 100eb10:	4626      	mov	r6, r4
 100eb12:	4619      	mov	r1, r3
 100eb14:	9c08      	ldr	r4, [sp, #32]
 100eb16:	e005      	b.n	100eb24 <_svfprintf_r+0x102c>
 100eb18:	01056a24 	.word	0x01056a24
 100eb1c:	3e10      	subs	r6, #16
 100eb1e:	2e10      	cmp	r6, #16
 100eb20:	f340 829a 	ble.w	100f058 <_svfprintf_r+0x1560>
 100eb24:	3101      	adds	r1, #1
 100eb26:	4bb7      	ldr	r3, [pc, #732]	; (100ee04 <_svfprintf_r+0x130c>)
 100eb28:	2907      	cmp	r1, #7
 100eb2a:	f102 0210 	add.w	r2, r2, #16
 100eb2e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100eb32:	e9c9 3500 	strd	r3, r5, [r9]
 100eb36:	f109 0908 	add.w	r9, r9, #8
 100eb3a:	ddef      	ble.n	100eb1c <_svfprintf_r+0x1024>
 100eb3c:	aa28      	add	r2, sp, #160	; 0xa0
 100eb3e:	4621      	mov	r1, r4
 100eb40:	4650      	mov	r0, sl
 100eb42:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100eb46:	f005 fb2f 	bl	10141a8 <__ssprint_r>
 100eb4a:	2800      	cmp	r0, #0
 100eb4c:	f47f ad37 	bne.w	100e5be <_svfprintf_r+0xac6>
 100eb50:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100eb54:	e7e2      	b.n	100eb1c <_svfprintf_r+0x1024>
 100eb56:	9911      	ldr	r1, [sp, #68]	; 0x44
 100eb58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100eb5a:	2b00      	cmp	r3, #0
 100eb5c:	bfd8      	it	le
 100eb5e:	2900      	cmple	r1, #0
 100eb60:	f340 8556 	ble.w	100f610 <_svfprintf_r+0x1b18>
 100eb64:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 100eb68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 100eb6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100eb6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 100eb70:	960c      	str	r6, [sp, #48]	; 0x30
 100eb72:	461e      	mov	r6, r3
 100eb74:	4401      	add	r1, r0
 100eb76:	9107      	str	r1, [sp, #28]
 100eb78:	2e00      	cmp	r6, #0
 100eb7a:	d044      	beq.n	100ec06 <_svfprintf_r+0x110e>
 100eb7c:	3e01      	subs	r6, #1
 100eb7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100eb80:	9919      	ldr	r1, [sp, #100]	; 0x64
 100eb82:	3301      	adds	r3, #1
 100eb84:	981a      	ldr	r0, [sp, #104]	; 0x68
 100eb86:	2b07      	cmp	r3, #7
 100eb88:	440a      	add	r2, r1
 100eb8a:	f8c9 1004 	str.w	r1, [r9, #4]
 100eb8e:	f8c9 0000 	str.w	r0, [r9]
 100eb92:	bfd8      	it	le
 100eb94:	f109 0908 	addle.w	r9, r9, #8
 100eb98:	922a      	str	r2, [sp, #168]	; 0xa8
 100eb9a:	9329      	str	r3, [sp, #164]	; 0xa4
 100eb9c:	f300 80c0 	bgt.w	100ed20 <_svfprintf_r+0x1228>
 100eba0:	9814      	ldr	r0, [sp, #80]	; 0x50
 100eba2:	9907      	ldr	r1, [sp, #28]
 100eba4:	7803      	ldrb	r3, [r0, #0]
 100eba6:	1b4c      	subs	r4, r1, r5
 100eba8:	9104      	str	r1, [sp, #16]
 100ebaa:	429c      	cmp	r4, r3
 100ebac:	bfa8      	it	ge
 100ebae:	461c      	movge	r4, r3
 100ebb0:	2c00      	cmp	r4, #0
 100ebb2:	dd0e      	ble.n	100ebd2 <_svfprintf_r+0x10da>
 100ebb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ebb6:	4422      	add	r2, r4
 100ebb8:	f8c9 5000 	str.w	r5, [r9]
 100ebbc:	3301      	adds	r3, #1
 100ebbe:	922a      	str	r2, [sp, #168]	; 0xa8
 100ebc0:	2b07      	cmp	r3, #7
 100ebc2:	f8c9 4004 	str.w	r4, [r9, #4]
 100ebc6:	9329      	str	r3, [sp, #164]	; 0xa4
 100ebc8:	f300 8107 	bgt.w	100edda <_svfprintf_r+0x12e2>
 100ebcc:	7803      	ldrb	r3, [r0, #0]
 100ebce:	f109 0908 	add.w	r9, r9, #8
 100ebd2:	2c00      	cmp	r4, #0
 100ebd4:	bfac      	ite	ge
 100ebd6:	1b1c      	subge	r4, r3, r4
 100ebd8:	461c      	movlt	r4, r3
 100ebda:	2c00      	cmp	r4, #0
 100ebdc:	dc29      	bgt.n	100ec32 <_svfprintf_r+0x113a>
 100ebde:	441d      	add	r5, r3
 100ebe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100ebe2:	2e00      	cmp	r6, #0
 100ebe4:	bfd8      	it	le
 100ebe6:	2b00      	cmple	r3, #0
 100ebe8:	dcc6      	bgt.n	100eb78 <_svfprintf_r+0x1080>
 100ebea:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 100ebee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 100ebf2:	9904      	ldr	r1, [sp, #16]
 100ebf4:	462b      	mov	r3, r5
 100ebf6:	428d      	cmp	r5, r1
 100ebf8:	bf28      	it	cs
 100ebfa:	460b      	movcs	r3, r1
 100ebfc:	461d      	mov	r5, r3
 100ebfe:	e5cf      	b.n	100e7a0 <_svfprintf_r+0xca8>
 100ec00:	9603      	str	r6, [sp, #12]
 100ec02:	f7ff bb1d 	b.w	100e240 <_svfprintf_r+0x748>
 100ec06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100ec08:	3b01      	subs	r3, #1
 100ec0a:	9314      	str	r3, [sp, #80]	; 0x50
 100ec0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100ec0e:	3b01      	subs	r3, #1
 100ec10:	9311      	str	r3, [sp, #68]	; 0x44
 100ec12:	e7b4      	b.n	100eb7e <_svfprintf_r+0x1086>
 100ec14:	aa28      	add	r2, sp, #160	; 0xa0
 100ec16:	9908      	ldr	r1, [sp, #32]
 100ec18:	4650      	mov	r0, sl
 100ec1a:	f005 fac5 	bl	10141a8 <__ssprint_r>
 100ec1e:	2800      	cmp	r0, #0
 100ec20:	f47f accd 	bne.w	100e5be <_svfprintf_r+0xac6>
 100ec24:	9829      	ldr	r0, [sp, #164]	; 0xa4
 100ec26:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 100ec2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ec2c:	ab2b      	add	r3, sp, #172	; 0xac
 100ec2e:	3001      	adds	r0, #1
 100ec30:	e517      	b.n	100e662 <_svfprintf_r+0xb6a>
 100ec32:	2c10      	cmp	r4, #16
 100ec34:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100ec36:	dd1f      	ble.n	100ec78 <_svfprintf_r+0x1180>
 100ec38:	2710      	movs	r7, #16
 100ec3a:	e002      	b.n	100ec42 <_svfprintf_r+0x114a>
 100ec3c:	3c10      	subs	r4, #16
 100ec3e:	2c10      	cmp	r4, #16
 100ec40:	dd1a      	ble.n	100ec78 <_svfprintf_r+0x1180>
 100ec42:	3101      	adds	r1, #1
 100ec44:	4b6f      	ldr	r3, [pc, #444]	; (100ee04 <_svfprintf_r+0x130c>)
 100ec46:	2907      	cmp	r1, #7
 100ec48:	f102 0210 	add.w	r2, r2, #16
 100ec4c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ec50:	e9c9 3700 	strd	r3, r7, [r9]
 100ec54:	f109 0908 	add.w	r9, r9, #8
 100ec58:	ddf0      	ble.n	100ec3c <_svfprintf_r+0x1144>
 100ec5a:	aa28      	add	r2, sp, #160	; 0xa0
 100ec5c:	4641      	mov	r1, r8
 100ec5e:	4650      	mov	r0, sl
 100ec60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ec64:	f005 faa0 	bl	10141a8 <__ssprint_r>
 100ec68:	2800      	cmp	r0, #0
 100ec6a:	f47f aca8 	bne.w	100e5be <_svfprintf_r+0xac6>
 100ec6e:	3c10      	subs	r4, #16
 100ec70:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100ec74:	2c10      	cmp	r4, #16
 100ec76:	dce4      	bgt.n	100ec42 <_svfprintf_r+0x114a>
 100ec78:	3101      	adds	r1, #1
 100ec7a:	4b62      	ldr	r3, [pc, #392]	; (100ee04 <_svfprintf_r+0x130c>)
 100ec7c:	2907      	cmp	r1, #7
 100ec7e:	4422      	add	r2, r4
 100ec80:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100ec84:	e9c9 3400 	strd	r3, r4, [r9]
 100ec88:	f300 8337 	bgt.w	100f2fa <_svfprintf_r+0x1802>
 100ec8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100ec8e:	f109 0908 	add.w	r9, r9, #8
 100ec92:	781b      	ldrb	r3, [r3, #0]
 100ec94:	e7a3      	b.n	100ebde <_svfprintf_r+0x10e6>
 100ec96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ec98:	3201      	adds	r2, #1
 100ec9a:	f249 70b0 	movw	r0, #38832	; 0x97b0
 100ec9e:	2401      	movs	r4, #1
 100eca0:	3301      	adds	r3, #1
 100eca2:	f2c0 1005 	movt	r0, #261	; 0x105
 100eca6:	2b07      	cmp	r3, #7
 100eca8:	e9c9 0400 	strd	r0, r4, [r9]
 100ecac:	922a      	str	r2, [sp, #168]	; 0xa8
 100ecae:	bfd8      	it	le
 100ecb0:	f109 0908 	addle.w	r9, r9, #8
 100ecb4:	9329      	str	r3, [sp, #164]	; 0xa4
 100ecb6:	f300 822c 	bgt.w	100f112 <_svfprintf_r+0x161a>
 100ecba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100ecbc:	430b      	orrs	r3, r1
 100ecbe:	f000 8338 	beq.w	100f332 <_svfprintf_r+0x183a>
 100ecc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ecc4:	9816      	ldr	r0, [sp, #88]	; 0x58
 100ecc6:	3301      	adds	r3, #1
 100ecc8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 100ecca:	2b07      	cmp	r3, #7
 100eccc:	4402      	add	r2, r0
 100ecce:	f8c9 0004 	str.w	r0, [r9, #4]
 100ecd2:	f8c9 4000 	str.w	r4, [r9]
 100ecd6:	bfd8      	it	le
 100ecd8:	f109 0908 	addle.w	r9, r9, #8
 100ecdc:	922a      	str	r2, [sp, #168]	; 0xa8
 100ecde:	9329      	str	r3, [sp, #164]	; 0xa4
 100ece0:	f300 8319 	bgt.w	100f316 <_svfprintf_r+0x181e>
 100ece4:	2900      	cmp	r1, #0
 100ece6:	f2c0 8397 	blt.w	100f418 <_svfprintf_r+0x1920>
 100ecea:	3301      	adds	r3, #1
 100ecec:	9912      	ldr	r1, [sp, #72]	; 0x48
 100ecee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100ecf0:	2b07      	cmp	r3, #7
 100ecf2:	440a      	add	r2, r1
 100ecf4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100ecf8:	e9c9 0100 	strd	r0, r1, [r9]
 100ecfc:	f77f a8b7 	ble.w	100de6e <_svfprintf_r+0x376>
 100ed00:	e4b9      	b.n	100e676 <_svfprintf_r+0xb7e>
 100ed02:	aa28      	add	r2, sp, #160	; 0xa0
 100ed04:	9908      	ldr	r1, [sp, #32]
 100ed06:	4650      	mov	r0, sl
 100ed08:	f005 fa4e 	bl	10141a8 <__ssprint_r>
 100ed0c:	2800      	cmp	r0, #0
 100ed0e:	f47f ac56 	bne.w	100e5be <_svfprintf_r+0xac6>
 100ed12:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100ed16:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ed1a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ed1c:	f7ff b866 	b.w	100ddec <_svfprintf_r+0x2f4>
 100ed20:	aa28      	add	r2, sp, #160	; 0xa0
 100ed22:	4641      	mov	r1, r8
 100ed24:	4650      	mov	r0, sl
 100ed26:	f005 fa3f 	bl	10141a8 <__ssprint_r>
 100ed2a:	2800      	cmp	r0, #0
 100ed2c:	f47f ac47 	bne.w	100e5be <_svfprintf_r+0xac6>
 100ed30:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100ed32:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ed36:	e733      	b.n	100eba0 <_svfprintf_r+0x10a8>
 100ed38:	aa28      	add	r2, sp, #160	; 0xa0
 100ed3a:	9908      	ldr	r1, [sp, #32]
 100ed3c:	4650      	mov	r0, sl
 100ed3e:	f005 fa33 	bl	10141a8 <__ssprint_r>
 100ed42:	2800      	cmp	r0, #0
 100ed44:	f47f ac3b 	bne.w	100e5be <_svfprintf_r+0xac6>
 100ed48:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100ed4c:	f7ff bb3e 	b.w	100e3cc <_svfprintf_r+0x8d4>
 100ed50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100ed52:	2208      	movs	r2, #8
 100ed54:	2100      	movs	r1, #0
 100ed56:	a826      	add	r0, sp, #152	; 0x98
 100ed58:	9321      	str	r3, [sp, #132]	; 0x84
 100ed5a:	f7fe f8c1 	bl	100cee0 <memset>
 100ed5e:	9b04      	ldr	r3, [sp, #16]
 100ed60:	1c5a      	adds	r2, r3, #1
 100ed62:	f000 8196 	beq.w	100f092 <_svfprintf_r+0x159a>
 100ed66:	2400      	movs	r4, #0
 100ed68:	9603      	str	r6, [sp, #12]
 100ed6a:	f8cd 9010 	str.w	r9, [sp, #16]
 100ed6e:	4626      	mov	r6, r4
 100ed70:	4699      	mov	r9, r3
 100ed72:	9509      	str	r5, [sp, #36]	; 0x24
 100ed74:	e009      	b.n	100ed8a <_svfprintf_r+0x1292>
 100ed76:	f002 fac1 	bl	10112fc <_wcrtomb_r>
 100ed7a:	1833      	adds	r3, r6, r0
 100ed7c:	3001      	adds	r0, #1
 100ed7e:	f000 8383 	beq.w	100f488 <_svfprintf_r+0x1990>
 100ed82:	454b      	cmp	r3, r9
 100ed84:	dc0a      	bgt.n	100ed9c <_svfprintf_r+0x12a4>
 100ed86:	461e      	mov	r6, r3
 100ed88:	d008      	beq.n	100ed9c <_svfprintf_r+0x12a4>
 100ed8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 100ed8c:	ab26      	add	r3, sp, #152	; 0x98
 100ed8e:	a93b      	add	r1, sp, #236	; 0xec
 100ed90:	4650      	mov	r0, sl
 100ed92:	5915      	ldr	r5, [r2, r4]
 100ed94:	3404      	adds	r4, #4
 100ed96:	462a      	mov	r2, r5
 100ed98:	2d00      	cmp	r5, #0
 100ed9a:	d1ec      	bne.n	100ed76 <_svfprintf_r+0x127e>
 100ed9c:	9607      	str	r6, [sp, #28]
 100ed9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100eda0:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 100eda4:	e183      	b.n	100f0ae <_svfprintf_r+0x15b6>
 100eda6:	4634      	mov	r4, r6
 100eda8:	9e04      	ldr	r6, [sp, #16]
 100edaa:	460b      	mov	r3, r1
 100edac:	3301      	adds	r3, #1
 100edae:	4915      	ldr	r1, [pc, #84]	; (100ee04 <_svfprintf_r+0x130c>)
 100edb0:	2b07      	cmp	r3, #7
 100edb2:	4422      	add	r2, r4
 100edb4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100edb8:	e9c9 1400 	strd	r1, r4, [r9]
 100edbc:	f77f a857 	ble.w	100de6e <_svfprintf_r+0x376>
 100edc0:	e459      	b.n	100e676 <_svfprintf_r+0xb7e>
 100edc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100edc4:	3902      	subs	r1, #2
 100edc6:	2330      	movs	r3, #48	; 0x30
 100edc8:	9e03      	ldr	r6, [sp, #12]
 100edca:	910b      	str	r1, [sp, #44]	; 0x2c
 100edcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 100edd0:	ab54      	add	r3, sp, #336	; 0x150
 100edd2:	1a5b      	subs	r3, r3, r1
 100edd4:	9307      	str	r3, [sp, #28]
 100edd6:	f7fe bfe7 	b.w	100dda8 <_svfprintf_r+0x2b0>
 100edda:	aa28      	add	r2, sp, #160	; 0xa0
 100eddc:	4641      	mov	r1, r8
 100edde:	4650      	mov	r0, sl
 100ede0:	f005 f9e2 	bl	10141a8 <__ssprint_r>
 100ede4:	2800      	cmp	r0, #0
 100ede6:	f47f abea 	bne.w	100e5be <_svfprintf_r+0xac6>
 100edea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100edec:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100edf0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100edf2:	781b      	ldrb	r3, [r3, #0]
 100edf4:	e6ed      	b.n	100ebd2 <_svfprintf_r+0x10da>
 100edf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100edf8:	6812      	ldr	r2, [r2, #0]
 100edfa:	9309      	str	r3, [sp, #36]	; 0x24
 100edfc:	9b05      	ldr	r3, [sp, #20]
 100edfe:	6013      	str	r3, [r2, #0]
 100ee00:	f7fe beba 	b.w	100db78 <_svfprintf_r+0x80>
 100ee04:	01056a24 	.word	0x01056a24
 100ee08:	9b03      	ldr	r3, [sp, #12]
 100ee0a:	2200      	movs	r2, #0
 100ee0c:	f8cd 901c 	str.w	r9, [sp, #28]
 100ee10:	ae54      	add	r6, sp, #336	; 0x150
 100ee12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 100ee16:	970c      	str	r7, [sp, #48]	; 0x30
 100ee18:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 100ee1c:	4691      	mov	r9, r2
 100ee1e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100ee22:	461f      	mov	r7, r3
 100ee24:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 100ee28:	e008      	b.n	100ee3c <_svfprintf_r+0x1344>
 100ee2a:	f7fc f99d 	bl	100b168 <__aeabi_uldivmod>
 100ee2e:	2d00      	cmp	r5, #0
 100ee30:	bf08      	it	eq
 100ee32:	2c0a      	cmpeq	r4, #10
 100ee34:	d329      	bcc.n	100ee8a <_svfprintf_r+0x1392>
 100ee36:	4604      	mov	r4, r0
 100ee38:	4656      	mov	r6, sl
 100ee3a:	460d      	mov	r5, r1
 100ee3c:	220a      	movs	r2, #10
 100ee3e:	2300      	movs	r3, #0
 100ee40:	4620      	mov	r0, r4
 100ee42:	4629      	mov	r1, r5
 100ee44:	f7fc f990 	bl	100b168 <__aeabi_uldivmod>
 100ee48:	f109 0901 	add.w	r9, r9, #1
 100ee4c:	4620      	mov	r0, r4
 100ee4e:	4629      	mov	r1, r5
 100ee50:	f106 3aff 	add.w	sl, r6, #4294967295
 100ee54:	2300      	movs	r3, #0
 100ee56:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 100ee5a:	220a      	movs	r2, #10
 100ee5c:	f806 cc01 	strb.w	ip, [r6, #-1]
 100ee60:	2f00      	cmp	r7, #0
 100ee62:	d0e2      	beq.n	100ee2a <_svfprintf_r+0x1332>
 100ee64:	f898 6000 	ldrb.w	r6, [r8]
 100ee68:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 100ee6c:	bf18      	it	ne
 100ee6e:	f04f 0c01 	movne.w	ip, #1
 100ee72:	454e      	cmp	r6, r9
 100ee74:	bf18      	it	ne
 100ee76:	f04f 0c00 	movne.w	ip, #0
 100ee7a:	f1bc 0f00 	cmp.w	ip, #0
 100ee7e:	d0d4      	beq.n	100ee2a <_svfprintf_r+0x1332>
 100ee80:	429d      	cmp	r5, r3
 100ee82:	bf08      	it	eq
 100ee84:	4294      	cmpeq	r4, r2
 100ee86:	f080 8285 	bcs.w	100f394 <_svfprintf_r+0x189c>
 100ee8a:	4652      	mov	r2, sl
 100ee8c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 100ee90:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 100ee94:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 100ee98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100ee9c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 100eea0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 100eea4:	9e03      	ldr	r6, [sp, #12]
 100eea6:	f7ff bb7d 	b.w	100e5a4 <_svfprintf_r+0xaac>
 100eeaa:	f103 0108 	add.w	r1, r3, #8
 100eeae:	4660      	mov	r0, ip
 100eeb0:	4db8      	ldr	r5, [pc, #736]	; (100f194 <_svfprintf_r+0x169c>)
 100eeb2:	2807      	cmp	r0, #7
 100eeb4:	4422      	add	r2, r4
 100eeb6:	605c      	str	r4, [r3, #4]
 100eeb8:	922a      	str	r2, [sp, #168]	; 0xa8
 100eeba:	601d      	str	r5, [r3, #0]
 100eebc:	9029      	str	r0, [sp, #164]	; 0xa4
 100eebe:	f73f aea9 	bgt.w	100ec14 <_svfprintf_r+0x111c>
 100eec2:	3001      	adds	r0, #1
 100eec4:	f101 0908 	add.w	r9, r1, #8
 100eec8:	460b      	mov	r3, r1
 100eeca:	f7ff bbca 	b.w	100e662 <_svfprintf_r+0xb6a>
 100eece:	05b5      	lsls	r5, r6, #22
 100eed0:	f04f 0301 	mov.w	r3, #1
 100eed4:	bf48      	it	mi
 100eed6:	b2e4      	uxtbmi	r4, r4
 100eed8:	2500      	movs	r5, #0
 100eeda:	f7fe bf3e 	b.w	100dd5a <_svfprintf_r+0x262>
 100eede:	05b5      	lsls	r5, r6, #22
 100eee0:	bf45      	ittet	mi
 100eee2:	9209      	strmi	r2, [sp, #36]	; 0x24
 100eee4:	b2e4      	uxtbmi	r4, r4
 100eee6:	9209      	strpl	r2, [sp, #36]	; 0x24
 100eee8:	4633      	movmi	r3, r6
 100eeea:	bf4e      	itee	mi
 100eeec:	2500      	movmi	r5, #0
 100eeee:	2500      	movpl	r5, #0
 100eef0:	4633      	movpl	r3, r6
 100eef2:	f7ff b96a 	b.w	100e1ca <_svfprintf_r+0x6d2>
 100eef6:	9b04      	ldr	r3, [sp, #16]
 100eef8:	1c5a      	adds	r2, r3, #1
 100eefa:	f000 816a 	beq.w	100f1d2 <_svfprintf_r+0x16da>
 100eefe:	2b00      	cmp	r3, #0
 100ef00:	bf08      	it	eq
 100ef02:	2c47      	cmpeq	r4, #71	; 0x47
 100ef04:	f040 8167 	bne.w	100f1d6 <_svfprintf_r+0x16de>
 100ef08:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100ef0c:	930d      	str	r3, [sp, #52]	; 0x34
 100ef0e:	ee18 3a90 	vmov	r3, s17
 100ef12:	2b00      	cmp	r3, #0
 100ef14:	f04f 0301 	mov.w	r3, #1
 100ef18:	9304      	str	r3, [sp, #16]
 100ef1a:	f2c0 8311 	blt.w	100f540 <_svfprintf_r+0x1a48>
 100ef1e:	eeb0 cb48 	vmov.f64	d12, d8
 100ef22:	461d      	mov	r5, r3
 100ef24:	2300      	movs	r3, #0
 100ef26:	930c      	str	r3, [sp, #48]	; 0x30
 100ef28:	ab26      	add	r3, sp, #152	; 0x98
 100ef2a:	aa21      	add	r2, sp, #132	; 0x84
 100ef2c:	9301      	str	r3, [sp, #4]
 100ef2e:	2102      	movs	r1, #2
 100ef30:	9200      	str	r2, [sp, #0]
 100ef32:	ab1f      	add	r3, sp, #124	; 0x7c
 100ef34:	462a      	mov	r2, r5
 100ef36:	eeb0 0b4c 	vmov.f64	d0, d12
 100ef3a:	4650      	mov	r0, sl
 100ef3c:	f002 fce8 	bl	1011910 <_dtoa_r>
 100ef40:	2c47      	cmp	r4, #71	; 0x47
 100ef42:	900b      	str	r0, [sp, #44]	; 0x2c
 100ef44:	f040 8177 	bne.w	100f236 <_svfprintf_r+0x173e>
 100ef48:	07f3      	lsls	r3, r6, #31
 100ef4a:	f100 8174 	bmi.w	100f236 <_svfprintf_r+0x173e>
 100ef4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100ef50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100ef52:	2c47      	cmp	r4, #71	; 0x47
 100ef54:	eba3 0302 	sub.w	r3, r3, r2
 100ef58:	9312      	str	r3, [sp, #72]	; 0x48
 100ef5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100ef5c:	9310      	str	r3, [sp, #64]	; 0x40
 100ef5e:	f040 81b1 	bne.w	100f2c4 <_svfprintf_r+0x17cc>
 100ef62:	9a04      	ldr	r2, [sp, #16]
 100ef64:	f113 0f03 	cmn.w	r3, #3
 100ef68:	bfa8      	it	ge
 100ef6a:	429a      	cmpge	r2, r3
 100ef6c:	f280 8185 	bge.w	100f27a <_svfprintf_r+0x1782>
 100ef70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100ef72:	2200      	movs	r2, #0
 100ef74:	920a      	str	r2, [sp, #40]	; 0x28
 100ef76:	3b02      	subs	r3, #2
 100ef78:	930e      	str	r3, [sp, #56]	; 0x38
 100ef7a:	f023 0420 	bic.w	r4, r3, #32
 100ef7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100ef80:	2c41      	cmp	r4, #65	; 0x41
 100ef82:	f103 32ff 	add.w	r2, r3, #4294967295
 100ef86:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 100ef8a:	921f      	str	r2, [sp, #124]	; 0x7c
 100ef8c:	bf04      	itt	eq
 100ef8e:	330f      	addeq	r3, #15
 100ef90:	b2db      	uxtbeq	r3, r3
 100ef92:	2a00      	cmp	r2, #0
 100ef94:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 100ef98:	bfb7      	itett	lt
 100ef9a:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 100ef9c:	232b      	movge	r3, #43	; 0x2b
 100ef9e:	f1c3 0201 	rsblt	r2, r3, #1
 100efa2:	232d      	movlt	r3, #45	; 0x2d
 100efa4:	2a09      	cmp	r2, #9
 100efa6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 100efaa:	f340 82d5 	ble.w	100f558 <_svfprintf_r+0x1a60>
 100efae:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 100efb2:	f246 6567 	movw	r5, #26215	; 0x6667
 100efb6:	f04f 0e0a 	mov.w	lr, #10
 100efba:	f2c6 6566 	movt	r5, #26214	; 0x6666
 100efbe:	4664      	mov	r4, ip
 100efc0:	e000      	b.n	100efc4 <_svfprintf_r+0x14cc>
 100efc2:	460c      	mov	r4, r1
 100efc4:	fb85 3002 	smull	r3, r0, r5, r2
 100efc8:	17d3      	asrs	r3, r2, #31
 100efca:	2a63      	cmp	r2, #99	; 0x63
 100efcc:	f104 31ff 	add.w	r1, r4, #4294967295
 100efd0:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 100efd4:	fb0e 2013 	mls	r0, lr, r3, r2
 100efd8:	461a      	mov	r2, r3
 100efda:	f100 0030 	add.w	r0, r0, #48	; 0x30
 100efde:	f804 0c01 	strb.w	r0, [r4, #-1]
 100efe2:	dcee      	bgt.n	100efc2 <_svfprintf_r+0x14ca>
 100efe4:	1ea2      	subs	r2, r4, #2
 100efe6:	3330      	adds	r3, #48	; 0x30
 100efe8:	4594      	cmp	ip, r2
 100efea:	b2db      	uxtb	r3, r3
 100efec:	f801 3c01 	strb.w	r3, [r1, #-1]
 100eff0:	f240 831f 	bls.w	100f632 <_svfprintf_r+0x1b3a>
 100eff4:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 100eff8:	e001      	b.n	100effe <_svfprintf_r+0x1506>
 100effa:	f811 3b01 	ldrb.w	r3, [r1], #1
 100effe:	458c      	cmp	ip, r1
 100f000:	f802 3b01 	strb.w	r3, [r2], #1
 100f004:	d1f9      	bne.n	100effa <_svfprintf_r+0x1502>
 100f006:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 100f00a:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 100f00e:	1b1b      	subs	r3, r3, r4
 100f010:	aa22      	add	r2, sp, #136	; 0x88
 100f012:	440b      	add	r3, r1
 100f014:	1a9b      	subs	r3, r3, r2
 100f016:	9318      	str	r3, [sp, #96]	; 0x60
 100f018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f01a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 100f01c:	2b01      	cmp	r3, #1
 100f01e:	441a      	add	r2, r3
 100f020:	9207      	str	r2, [sp, #28]
 100f022:	f340 82be 	ble.w	100f5a2 <_svfprintf_r+0x1aaa>
 100f026:	9b07      	ldr	r3, [sp, #28]
 100f028:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100f02a:	4413      	add	r3, r2
 100f02c:	9307      	str	r3, [sp, #28]
 100f02e:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100f032:	2200      	movs	r2, #0
 100f034:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 100f038:	9b07      	ldr	r3, [sp, #28]
 100f03a:	9213      	str	r2, [sp, #76]	; 0x4c
 100f03c:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100f040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100f044:	9303      	str	r3, [sp, #12]
 100f046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100f048:	2b00      	cmp	r3, #0
 100f04a:	f040 8134 	bne.w	100f2b6 <_svfprintf_r+0x17be>
 100f04e:	9304      	str	r3, [sp, #16]
 100f050:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f054:	f7fe beb5 	b.w	100ddc2 <_svfprintf_r+0x2ca>
 100f058:	4634      	mov	r4, r6
 100f05a:	9e04      	ldr	r6, [sp, #16]
 100f05c:	460b      	mov	r3, r1
 100f05e:	3301      	adds	r3, #1
 100f060:	494c      	ldr	r1, [pc, #304]	; (100f194 <_svfprintf_r+0x169c>)
 100f062:	2b07      	cmp	r3, #7
 100f064:	4422      	add	r2, r4
 100f066:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f06a:	e9c9 1400 	strd	r1, r4, [r9]
 100f06e:	bfd8      	it	le
 100f070:	f109 0908 	addle.w	r9, r9, #8
 100f074:	f77f ab8d 	ble.w	100e792 <_svfprintf_r+0xc9a>
 100f078:	aa28      	add	r2, sp, #160	; 0xa0
 100f07a:	9908      	ldr	r1, [sp, #32]
 100f07c:	4650      	mov	r0, sl
 100f07e:	f005 f893 	bl	10141a8 <__ssprint_r>
 100f082:	2800      	cmp	r0, #0
 100f084:	f47f aa9b 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f088:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f08a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f08e:	f7ff bb80 	b.w	100e792 <_svfprintf_r+0xc9a>
 100f092:	2300      	movs	r3, #0
 100f094:	aa26      	add	r2, sp, #152	; 0x98
 100f096:	4619      	mov	r1, r3
 100f098:	9200      	str	r2, [sp, #0]
 100f09a:	4650      	mov	r0, sl
 100f09c:	aa21      	add	r2, sp, #132	; 0x84
 100f09e:	f002 f983 	bl	10113a8 <_wcsrtombs_r>
 100f0a2:	1c43      	adds	r3, r0, #1
 100f0a4:	9007      	str	r0, [sp, #28]
 100f0a6:	f000 81ef 	beq.w	100f488 <_svfprintf_r+0x1990>
 100f0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f0ac:	9321      	str	r3, [sp, #132]	; 0x84
 100f0ae:	9b07      	ldr	r3, [sp, #28]
 100f0b0:	2b00      	cmp	r3, #0
 100f0b2:	d03b      	beq.n	100f12c <_svfprintf_r+0x1634>
 100f0b4:	2b63      	cmp	r3, #99	; 0x63
 100f0b6:	f340 8087 	ble.w	100f1c8 <_svfprintf_r+0x16d0>
 100f0ba:	1c59      	adds	r1, r3, #1
 100f0bc:	4650      	mov	r0, sl
 100f0be:	f7fc ff0b 	bl	100bed8 <_malloc_r>
 100f0c2:	900b      	str	r0, [sp, #44]	; 0x2c
 100f0c4:	2800      	cmp	r0, #0
 100f0c6:	f000 81df 	beq.w	100f488 <_svfprintf_r+0x1990>
 100f0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f0cc:	930a      	str	r3, [sp, #40]	; 0x28
 100f0ce:	2208      	movs	r2, #8
 100f0d0:	2100      	movs	r1, #0
 100f0d2:	a826      	add	r0, sp, #152	; 0x98
 100f0d4:	f7fd ff04 	bl	100cee0 <memset>
 100f0d8:	9c07      	ldr	r4, [sp, #28]
 100f0da:	ab26      	add	r3, sp, #152	; 0x98
 100f0dc:	aa21      	add	r2, sp, #132	; 0x84
 100f0de:	9300      	str	r3, [sp, #0]
 100f0e0:	4650      	mov	r0, sl
 100f0e2:	4623      	mov	r3, r4
 100f0e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100f0e6:	f002 f95f 	bl	10113a8 <_wcsrtombs_r>
 100f0ea:	4284      	cmp	r4, r0
 100f0ec:	f040 8287 	bne.w	100f5fe <_svfprintf_r+0x1b06>
 100f0f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100f0f2:	2300      	movs	r3, #0
 100f0f4:	9509      	str	r5, [sp, #36]	; 0x24
 100f0f6:	9304      	str	r3, [sp, #16]
 100f0f8:	4614      	mov	r4, r2
 100f0fa:	9a07      	ldr	r2, [sp, #28]
 100f0fc:	9313      	str	r3, [sp, #76]	; 0x4c
 100f0fe:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100f102:	54a3      	strb	r3, [r4, r2]
 100f104:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100f108:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f10c:	9303      	str	r3, [sp, #12]
 100f10e:	f7fe be58 	b.w	100ddc2 <_svfprintf_r+0x2ca>
 100f112:	aa28      	add	r2, sp, #160	; 0xa0
 100f114:	9908      	ldr	r1, [sp, #32]
 100f116:	4650      	mov	r0, sl
 100f118:	f005 f846 	bl	10141a8 <__ssprint_r>
 100f11c:	2800      	cmp	r0, #0
 100f11e:	f47f aa4e 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f122:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100f124:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f128:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f12a:	e5c6      	b.n	100ecba <_svfprintf_r+0x11c2>
 100f12c:	9b07      	ldr	r3, [sp, #28]
 100f12e:	9509      	str	r5, [sp, #36]	; 0x24
 100f130:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f134:	e9cd 3303 	strd	r3, r3, [sp, #12]
 100f138:	9313      	str	r3, [sp, #76]	; 0x4c
 100f13a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100f13e:	930a      	str	r3, [sp, #40]	; 0x28
 100f140:	f7fe be3f 	b.w	100ddc2 <_svfprintf_r+0x2ca>
 100f144:	aa28      	add	r2, sp, #160	; 0xa0
 100f146:	9908      	ldr	r1, [sp, #32]
 100f148:	4650      	mov	r0, sl
 100f14a:	f005 f82d 	bl	10141a8 <__ssprint_r>
 100f14e:	2800      	cmp	r0, #0
 100f150:	f47f aa35 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f154:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f156:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f15a:	f7ff bb12 	b.w	100e782 <_svfprintf_r+0xc8a>
 100f15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f160:	4619      	mov	r1, r3
 100f162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f164:	4419      	add	r1, r3
 100f166:	1b1b      	subs	r3, r3, r4
 100f168:	1b4c      	subs	r4, r1, r5
 100f16a:	429c      	cmp	r4, r3
 100f16c:	bfa8      	it	ge
 100f16e:	461c      	movge	r4, r3
 100f170:	f7ff bb48 	b.w	100e804 <_svfprintf_r+0xd0c>
 100f174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f176:	9309      	str	r3, [sp, #36]	; 0x24
 100f178:	9b05      	ldr	r3, [sp, #20]
 100f17a:	6812      	ldr	r2, [r2, #0]
 100f17c:	8013      	strh	r3, [r2, #0]
 100f17e:	f7fe bcfb 	b.w	100db78 <_svfprintf_r+0x80>
 100f182:	681c      	ldr	r4, [r3, #0]
 100f184:	9209      	str	r2, [sp, #36]	; 0x24
 100f186:	9603      	str	r6, [sp, #12]
 100f188:	17e5      	asrs	r5, r4, #31
 100f18a:	4622      	mov	r2, r4
 100f18c:	462b      	mov	r3, r5
 100f18e:	f7fe bf76 	b.w	100e07e <_svfprintf_r+0x586>
 100f192:	bf00      	nop
 100f194:	01056a24 	.word	0x01056a24
 100f198:	9c10      	ldr	r4, [sp, #64]	; 0x40
 100f19a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100f19c:	9404      	str	r4, [sp, #16]
 100f19e:	f7fe faaf 	bl	100d700 <strlen>
 100f1a2:	9509      	str	r5, [sp, #36]	; 0x24
 100f1a4:	9413      	str	r4, [sp, #76]	; 0x4c
 100f1a6:	9411      	str	r4, [sp, #68]	; 0x44
 100f1a8:	940a      	str	r4, [sp, #40]	; 0x28
 100f1aa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f1ae:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 100f1b2:	9007      	str	r0, [sp, #28]
 100f1b4:	9303      	str	r3, [sp, #12]
 100f1b6:	f7fe be04 	b.w	100ddc2 <_svfprintf_r+0x2ca>
 100f1ba:	4650      	mov	r0, sl
 100f1bc:	aa28      	add	r2, sp, #160	; 0xa0
 100f1be:	9908      	ldr	r1, [sp, #32]
 100f1c0:	f004 fff2 	bl	10141a8 <__ssprint_r>
 100f1c4:	f7fe bd8c 	b.w	100dce0 <_svfprintf_r+0x1e8>
 100f1c8:	2300      	movs	r3, #0
 100f1ca:	930a      	str	r3, [sp, #40]	; 0x28
 100f1cc:	ab3b      	add	r3, sp, #236	; 0xec
 100f1ce:	930b      	str	r3, [sp, #44]	; 0x2c
 100f1d0:	e77d      	b.n	100f0ce <_svfprintf_r+0x15d6>
 100f1d2:	2306      	movs	r3, #6
 100f1d4:	9304      	str	r3, [sp, #16]
 100f1d6:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 100f1da:	930d      	str	r3, [sp, #52]	; 0x34
 100f1dc:	ee18 3a90 	vmov	r3, s17
 100f1e0:	2b00      	cmp	r3, #0
 100f1e2:	f2c0 81ad 	blt.w	100f540 <_svfprintf_r+0x1a48>
 100f1e6:	eeb0 cb48 	vmov.f64	d12, d8
 100f1ea:	2300      	movs	r3, #0
 100f1ec:	930c      	str	r3, [sp, #48]	; 0x30
 100f1ee:	2c46      	cmp	r4, #70	; 0x46
 100f1f0:	f040 80f9 	bne.w	100f3e6 <_svfprintf_r+0x18ee>
 100f1f4:	ab26      	add	r3, sp, #152	; 0x98
 100f1f6:	aa21      	add	r2, sp, #132	; 0x84
 100f1f8:	9301      	str	r3, [sp, #4]
 100f1fa:	2103      	movs	r1, #3
 100f1fc:	ab1f      	add	r3, sp, #124	; 0x7c
 100f1fe:	9200      	str	r2, [sp, #0]
 100f200:	eeb0 0b4c 	vmov.f64	d0, d12
 100f204:	9a04      	ldr	r2, [sp, #16]
 100f206:	4650      	mov	r0, sl
 100f208:	f002 fb82 	bl	1011910 <_dtoa_r>
 100f20c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 100f20e:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100f212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f216:	7802      	ldrb	r2, [r0, #0]
 100f218:	4603      	mov	r3, r0
 100f21a:	bf14      	ite	ne
 100f21c:	2301      	movne	r3, #1
 100f21e:	2300      	moveq	r3, #0
 100f220:	2a30      	cmp	r2, #48	; 0x30
 100f222:	bf14      	ite	ne
 100f224:	2300      	movne	r3, #0
 100f226:	f003 0301 	andeq.w	r3, r3, #1
 100f22a:	900b      	str	r0, [sp, #44]	; 0x2c
 100f22c:	2b00      	cmp	r3, #0
 100f22e:	f040 81db 	bne.w	100f5e8 <_svfprintf_r+0x1af0>
 100f232:	9b04      	ldr	r3, [sp, #16]
 100f234:	441d      	add	r5, r3
 100f236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f238:	eeb5 cb40 	vcmp.f64	d12, #0.0
 100f23c:	441d      	add	r5, r3
 100f23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100f242:	bf08      	it	eq
 100f244:	462b      	moveq	r3, r5
 100f246:	f43f ae83 	beq.w	100ef50 <_svfprintf_r+0x1458>
 100f24a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100f24c:	42ab      	cmp	r3, r5
 100f24e:	f4bf ae7f 	bcs.w	100ef50 <_svfprintf_r+0x1458>
 100f252:	2130      	movs	r1, #48	; 0x30
 100f254:	1c5a      	adds	r2, r3, #1
 100f256:	9226      	str	r2, [sp, #152]	; 0x98
 100f258:	7019      	strb	r1, [r3, #0]
 100f25a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 100f25c:	429d      	cmp	r5, r3
 100f25e:	d8f9      	bhi.n	100f254 <_svfprintf_r+0x175c>
 100f260:	e676      	b.n	100ef50 <_svfprintf_r+0x1458>
 100f262:	1c59      	adds	r1, r3, #1
 100f264:	4650      	mov	r0, sl
 100f266:	f7fc fe37 	bl	100bed8 <_malloc_r>
 100f26a:	900b      	str	r0, [sp, #44]	; 0x2c
 100f26c:	2800      	cmp	r0, #0
 100f26e:	f000 810b 	beq.w	100f488 <_svfprintf_r+0x1990>
 100f272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f274:	930a      	str	r3, [sp, #40]	; 0x28
 100f276:	f7ff bb6a 	b.w	100e94e <_svfprintf_r+0xe56>
 100f27a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f27c:	4619      	mov	r1, r3
 100f27e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f280:	4299      	cmp	r1, r3
 100f282:	f300 809c 	bgt.w	100f3be <_svfprintf_r+0x18c6>
 100f286:	07f5      	lsls	r5, r6, #31
 100f288:	f140 814c 	bpl.w	100f524 <_svfprintf_r+0x1a2c>
 100f28c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100f28e:	4413      	add	r3, r2
 100f290:	9307      	str	r3, [sp, #28]
 100f292:	0574      	lsls	r4, r6, #21
 100f294:	d503      	bpl.n	100f29e <_svfprintf_r+0x17a6>
 100f296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f298:	2b00      	cmp	r3, #0
 100f29a:	f300 8118 	bgt.w	100f4ce <_svfprintf_r+0x19d6>
 100f29e:	9b07      	ldr	r3, [sp, #28]
 100f2a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100f2a4:	9303      	str	r3, [sp, #12]
 100f2a6:	2367      	movs	r3, #103	; 0x67
 100f2a8:	930e      	str	r3, [sp, #56]	; 0x38
 100f2aa:	2300      	movs	r3, #0
 100f2ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 100f2ae:	930a      	str	r3, [sp, #40]	; 0x28
 100f2b0:	9313      	str	r3, [sp, #76]	; 0x4c
 100f2b2:	9311      	str	r3, [sp, #68]	; 0x44
 100f2b4:	e6c7      	b.n	100f046 <_svfprintf_r+0x154e>
 100f2b6:	212d      	movs	r1, #45	; 0x2d
 100f2b8:	2300      	movs	r3, #0
 100f2ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100f2be:	9304      	str	r3, [sp, #16]
 100f2c0:	f7fe bd80 	b.w	100ddc4 <_svfprintf_r+0x2cc>
 100f2c4:	2c46      	cmp	r4, #70	; 0x46
 100f2c6:	f040 81b1 	bne.w	100f62c <_svfprintf_r+0x1b34>
 100f2ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 100f2cc:	f006 0301 	and.w	r3, r6, #1
 100f2d0:	9a04      	ldr	r2, [sp, #16]
 100f2d2:	2900      	cmp	r1, #0
 100f2d4:	ea43 0302 	orr.w	r3, r3, r2
 100f2d8:	f340 8167 	ble.w	100f5aa <_svfprintf_r+0x1ab2>
 100f2dc:	2b00      	cmp	r3, #0
 100f2de:	f040 8134 	bne.w	100f54a <_svfprintf_r+0x1a52>
 100f2e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f2e4:	9307      	str	r3, [sp, #28]
 100f2e6:	2366      	movs	r3, #102	; 0x66
 100f2e8:	930e      	str	r3, [sp, #56]	; 0x38
 100f2ea:	0572      	lsls	r2, r6, #21
 100f2ec:	f100 80f1 	bmi.w	100f4d2 <_svfprintf_r+0x19da>
 100f2f0:	9b07      	ldr	r3, [sp, #28]
 100f2f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100f2f6:	9303      	str	r3, [sp, #12]
 100f2f8:	e7d7      	b.n	100f2aa <_svfprintf_r+0x17b2>
 100f2fa:	aa28      	add	r2, sp, #160	; 0xa0
 100f2fc:	4641      	mov	r1, r8
 100f2fe:	4650      	mov	r0, sl
 100f300:	f004 ff52 	bl	10141a8 <__ssprint_r>
 100f304:	2800      	cmp	r0, #0
 100f306:	f47f a95a 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f30a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100f30c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f310:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f312:	781b      	ldrb	r3, [r3, #0]
 100f314:	e463      	b.n	100ebde <_svfprintf_r+0x10e6>
 100f316:	aa28      	add	r2, sp, #160	; 0xa0
 100f318:	9908      	ldr	r1, [sp, #32]
 100f31a:	4650      	mov	r0, sl
 100f31c:	f004 ff44 	bl	10141a8 <__ssprint_r>
 100f320:	2800      	cmp	r0, #0
 100f322:	f47f a94c 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f326:	991f      	ldr	r1, [sp, #124]	; 0x7c
 100f328:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f32c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100f330:	e4d8      	b.n	100ece4 <_svfprintf_r+0x11ec>
 100f332:	07f0      	lsls	r0, r6, #31
 100f334:	f57e ad9d 	bpl.w	100de72 <_svfprintf_r+0x37a>
 100f338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f33a:	9916      	ldr	r1, [sp, #88]	; 0x58
 100f33c:	3301      	adds	r3, #1
 100f33e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 100f340:	2b07      	cmp	r3, #7
 100f342:	440a      	add	r2, r1
 100f344:	f8c9 1004 	str.w	r1, [r9, #4]
 100f348:	f8c9 0000 	str.w	r0, [r9]
 100f34c:	922a      	str	r2, [sp, #168]	; 0xa8
 100f34e:	9329      	str	r3, [sp, #164]	; 0xa4
 100f350:	dce1      	bgt.n	100f316 <_svfprintf_r+0x181e>
 100f352:	f109 0908 	add.w	r9, r9, #8
 100f356:	e4c8      	b.n	100ecea <_svfprintf_r+0x11f2>
 100f358:	aa28      	add	r2, sp, #160	; 0xa0
 100f35a:	9908      	ldr	r1, [sp, #32]
 100f35c:	4650      	mov	r0, sl
 100f35e:	f004 ff23 	bl	10141a8 <__ssprint_r>
 100f362:	2800      	cmp	r0, #0
 100f364:	f47f a92b 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f368:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 100f36a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f36e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f370:	f7ff ba2e 	b.w	100e7d0 <_svfprintf_r+0xcd8>
 100f374:	aa28      	add	r2, sp, #160	; 0xa0
 100f376:	9908      	ldr	r1, [sp, #32]
 100f378:	4650      	mov	r0, sl
 100f37a:	f004 ff15 	bl	10141a8 <__ssprint_r>
 100f37e:	2800      	cmp	r0, #0
 100f380:	f47f a91d 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f384:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100f386:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f38a:	9912      	ldr	r1, [sp, #72]	; 0x48
 100f38c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f38e:	1acb      	subs	r3, r1, r3
 100f390:	f7ff ba38 	b.w	100e804 <_svfprintf_r+0xd0c>
 100f394:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100f396:	991a      	ldr	r1, [sp, #104]	; 0x68
 100f398:	ebaa 0a02 	sub.w	sl, sl, r2
 100f39c:	4650      	mov	r0, sl
 100f39e:	f7fe fa9d 	bl	100d8dc <strncpy>
 100f3a2:	f898 3001 	ldrb.w	r3, [r8, #1]
 100f3a6:	b10b      	cbz	r3, 100f3ac <_svfprintf_r+0x18b4>
 100f3a8:	f108 0801 	add.w	r8, r8, #1
 100f3ac:	4620      	mov	r0, r4
 100f3ae:	4629      	mov	r1, r5
 100f3b0:	220a      	movs	r2, #10
 100f3b2:	2300      	movs	r3, #0
 100f3b4:	f7fb fed8 	bl	100b168 <__aeabi_uldivmod>
 100f3b8:	f04f 0900 	mov.w	r9, #0
 100f3bc:	e53b      	b.n	100ee36 <_svfprintf_r+0x133e>
 100f3be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100f3c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100f3c2:	189a      	adds	r2, r3, r2
 100f3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f3c6:	9207      	str	r2, [sp, #28]
 100f3c8:	2b00      	cmp	r3, #0
 100f3ca:	bfc4      	itt	gt
 100f3cc:	2367      	movgt	r3, #103	; 0x67
 100f3ce:	930e      	strgt	r3, [sp, #56]	; 0x38
 100f3d0:	dc8b      	bgt.n	100f2ea <_svfprintf_r+0x17f2>
 100f3d2:	f1c3 0301 	rsb	r3, r3, #1
 100f3d6:	2167      	movs	r1, #103	; 0x67
 100f3d8:	441a      	add	r2, r3
 100f3da:	910e      	str	r1, [sp, #56]	; 0x38
 100f3dc:	9207      	str	r2, [sp, #28]
 100f3de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100f3e2:	9303      	str	r3, [sp, #12]
 100f3e4:	e761      	b.n	100f2aa <_svfprintf_r+0x17b2>
 100f3e6:	2c45      	cmp	r4, #69	; 0x45
 100f3e8:	f040 8110 	bne.w	100f60c <_svfprintf_r+0x1b14>
 100f3ec:	9b04      	ldr	r3, [sp, #16]
 100f3ee:	aa26      	add	r2, sp, #152	; 0x98
 100f3f0:	2102      	movs	r1, #2
 100f3f2:	9201      	str	r2, [sp, #4]
 100f3f4:	1c5d      	adds	r5, r3, #1
 100f3f6:	eeb0 0b4c 	vmov.f64	d0, d12
 100f3fa:	ab21      	add	r3, sp, #132	; 0x84
 100f3fc:	4650      	mov	r0, sl
 100f3fe:	9300      	str	r3, [sp, #0]
 100f400:	462a      	mov	r2, r5
 100f402:	ab1f      	add	r3, sp, #124	; 0x7c
 100f404:	f002 fa84 	bl	1011910 <_dtoa_r>
 100f408:	900b      	str	r0, [sp, #44]	; 0x2c
 100f40a:	e714      	b.n	100f236 <_svfprintf_r+0x173e>
 100f40c:	2300      	movs	r3, #0
 100f40e:	eeb0 0b48 	vmov.f64	d0, d8
 100f412:	930c      	str	r3, [sp, #48]	; 0x30
 100f414:	f7ff baa4 	b.w	100e960 <_svfprintf_r+0xe68>
 100f418:	424c      	negs	r4, r1
 100f41a:	3110      	adds	r1, #16
 100f41c:	da1d      	bge.n	100f45a <_svfprintf_r+0x1962>
 100f41e:	2510      	movs	r5, #16
 100f420:	e002      	b.n	100f428 <_svfprintf_r+0x1930>
 100f422:	3c10      	subs	r4, #16
 100f424:	2c10      	cmp	r4, #16
 100f426:	dd18      	ble.n	100f45a <_svfprintf_r+0x1962>
 100f428:	3301      	adds	r3, #1
 100f42a:	4985      	ldr	r1, [pc, #532]	; (100f640 <_svfprintf_r+0x1b48>)
 100f42c:	2b07      	cmp	r3, #7
 100f42e:	f102 0210 	add.w	r2, r2, #16
 100f432:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f436:	e9c9 1500 	strd	r1, r5, [r9]
 100f43a:	f109 0908 	add.w	r9, r9, #8
 100f43e:	ddf0      	ble.n	100f422 <_svfprintf_r+0x192a>
 100f440:	aa28      	add	r2, sp, #160	; 0xa0
 100f442:	9908      	ldr	r1, [sp, #32]
 100f444:	4650      	mov	r0, sl
 100f446:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f44a:	f004 fead 	bl	10141a8 <__ssprint_r>
 100f44e:	2800      	cmp	r0, #0
 100f450:	f47f a8b5 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f454:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100f458:	e7e3      	b.n	100f422 <_svfprintf_r+0x192a>
 100f45a:	3301      	adds	r3, #1
 100f45c:	4978      	ldr	r1, [pc, #480]	; (100f640 <_svfprintf_r+0x1b48>)
 100f45e:	2b07      	cmp	r3, #7
 100f460:	4422      	add	r2, r4
 100f462:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f466:	e9c9 1400 	strd	r1, r4, [r9]
 100f46a:	f77f af72 	ble.w	100f352 <_svfprintf_r+0x185a>
 100f46e:	aa28      	add	r2, sp, #160	; 0xa0
 100f470:	9908      	ldr	r1, [sp, #32]
 100f472:	4650      	mov	r0, sl
 100f474:	f004 fe98 	bl	10141a8 <__ssprint_r>
 100f478:	2800      	cmp	r0, #0
 100f47a:	f47f a8a0 	bne.w	100e5be <_svfprintf_r+0xac6>
 100f47e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f480:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f484:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f486:	e430      	b.n	100ecea <_svfprintf_r+0x11f2>
 100f488:	9a08      	ldr	r2, [sp, #32]
 100f48a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 100f48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100f492:	8193      	strh	r3, [r2, #12]
 100f494:	f7fe bc27 	b.w	100dce6 <_svfprintf_r+0x1ee>
 100f498:	9526      	str	r5, [sp, #152]	; 0x98
 100f49a:	4619      	mov	r1, r3
 100f49c:	7bc5      	ldrb	r5, [r0, #15]
 100f49e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 100f4a2:	4295      	cmp	r5, r2
 100f4a4:	d10a      	bne.n	100f4bc <_svfprintf_r+0x19c4>
 100f4a6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 100f4aa:	f801 cc01 	strb.w	ip, [r1, #-1]
 100f4ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 100f4b0:	1e4a      	subs	r2, r1, #1
 100f4b2:	9226      	str	r2, [sp, #152]	; 0x98
 100f4b4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 100f4b8:	4295      	cmp	r5, r2
 100f4ba:	d0f6      	beq.n	100f4aa <_svfprintf_r+0x19b2>
 100f4bc:	2a39      	cmp	r2, #57	; 0x39
 100f4be:	bf16      	itet	ne
 100f4c0:	3201      	addne	r2, #1
 100f4c2:	7a82      	ldrbeq	r2, [r0, #10]
 100f4c4:	b2d2      	uxtbne	r2, r2
 100f4c6:	f801 2c01 	strb.w	r2, [r1, #-1]
 100f4ca:	f7ff ba9a 	b.w	100ea02 <_svfprintf_r+0xf0a>
 100f4ce:	2367      	movs	r3, #103	; 0x67
 100f4d0:	930e      	str	r3, [sp, #56]	; 0x38
 100f4d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 100f4d4:	2200      	movs	r2, #0
 100f4d6:	9213      	str	r2, [sp, #76]	; 0x4c
 100f4d8:	9211      	str	r2, [sp, #68]	; 0x44
 100f4da:	7803      	ldrb	r3, [r0, #0]
 100f4dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 100f4de:	2bff      	cmp	r3, #255	; 0xff
 100f4e0:	d00b      	beq.n	100f4fa <_svfprintf_r+0x1a02>
 100f4e2:	4293      	cmp	r3, r2
 100f4e4:	da09      	bge.n	100f4fa <_svfprintf_r+0x1a02>
 100f4e6:	7841      	ldrb	r1, [r0, #1]
 100f4e8:	1ad2      	subs	r2, r2, r3
 100f4ea:	b1b9      	cbz	r1, 100f51c <_svfprintf_r+0x1a24>
 100f4ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100f4ee:	3001      	adds	r0, #1
 100f4f0:	3301      	adds	r3, #1
 100f4f2:	9311      	str	r3, [sp, #68]	; 0x44
 100f4f4:	460b      	mov	r3, r1
 100f4f6:	2bff      	cmp	r3, #255	; 0xff
 100f4f8:	d1f3      	bne.n	100f4e2 <_svfprintf_r+0x19ea>
 100f4fa:	9210      	str	r2, [sp, #64]	; 0x40
 100f4fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100f4fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 100f500:	9907      	ldr	r1, [sp, #28]
 100f502:	4413      	add	r3, r2
 100f504:	2200      	movs	r2, #0
 100f506:	920a      	str	r2, [sp, #40]	; 0x28
 100f508:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100f50a:	9014      	str	r0, [sp, #80]	; 0x50
 100f50c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 100f50e:	fb02 1303 	mla	r3, r2, r3, r1
 100f512:	9307      	str	r3, [sp, #28]
 100f514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100f518:	9303      	str	r3, [sp, #12]
 100f51a:	e594      	b.n	100f046 <_svfprintf_r+0x154e>
 100f51c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 100f51e:	3101      	adds	r1, #1
 100f520:	9113      	str	r1, [sp, #76]	; 0x4c
 100f522:	e7dc      	b.n	100f4de <_svfprintf_r+0x19e6>
 100f524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100f526:	9307      	str	r3, [sp, #28]
 100f528:	e6b3      	b.n	100f292 <_svfprintf_r+0x179a>
 100f52a:	9b04      	ldr	r3, [sp, #16]
 100f52c:	9509      	str	r5, [sp, #36]	; 0x24
 100f52e:	9004      	str	r0, [sp, #16]
 100f530:	9303      	str	r3, [sp, #12]
 100f532:	9307      	str	r3, [sp, #28]
 100f534:	9013      	str	r0, [sp, #76]	; 0x4c
 100f536:	9011      	str	r0, [sp, #68]	; 0x44
 100f538:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f53c:	f7fe bc41 	b.w	100ddc2 <_svfprintf_r+0x2ca>
 100f540:	232d      	movs	r3, #45	; 0x2d
 100f542:	eeb1 cb48 	vneg.f64	d12, d8
 100f546:	930c      	str	r3, [sp, #48]	; 0x30
 100f548:	e651      	b.n	100f1ee <_svfprintf_r+0x16f6>
 100f54a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100f54c:	18cb      	adds	r3, r1, r3
 100f54e:	2166      	movs	r1, #102	; 0x66
 100f550:	441a      	add	r2, r3
 100f552:	910e      	str	r1, [sp, #56]	; 0x38
 100f554:	9207      	str	r2, [sp, #28]
 100f556:	e6c8      	b.n	100f2ea <_svfprintf_r+0x17f2>
 100f558:	2c41      	cmp	r4, #65	; 0x41
 100f55a:	a922      	add	r1, sp, #136	; 0x88
 100f55c:	bf08      	it	eq
 100f55e:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 100f562:	f102 0230 	add.w	r2, r2, #48	; 0x30
 100f566:	bf1e      	ittt	ne
 100f568:	2330      	movne	r3, #48	; 0x30
 100f56a:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 100f56e:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 100f572:	f803 2b01 	strb.w	r2, [r3], #1
 100f576:	1a5b      	subs	r3, r3, r1
 100f578:	9318      	str	r3, [sp, #96]	; 0x60
 100f57a:	e54d      	b.n	100f018 <_svfprintf_r+0x1520>
 100f57c:	ee18 3a90 	vmov	r3, s17
 100f580:	f249 7490 	movw	r4, #38800	; 0x9790
 100f584:	f2c0 1405 	movt	r4, #261	; 0x105
 100f588:	2b00      	cmp	r3, #0
 100f58a:	f249 738c 	movw	r3, #38796	; 0x978c
 100f58e:	f2c0 1305 	movt	r3, #261	; 0x105
 100f592:	bfb6      	itet	lt
 100f594:	212d      	movlt	r1, #45	; 0x2d
 100f596:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 100f59a:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 100f59e:	f7fe bec2 	b.w	100e326 <_svfprintf_r+0x82e>
 100f5a2:	07f3      	lsls	r3, r6, #31
 100f5a4:	f57f ad43 	bpl.w	100f02e <_svfprintf_r+0x1536>
 100f5a8:	e53d      	b.n	100f026 <_svfprintf_r+0x152e>
 100f5aa:	b92b      	cbnz	r3, 100f5b8 <_svfprintf_r+0x1ac0>
 100f5ac:	2301      	movs	r3, #1
 100f5ae:	2266      	movs	r2, #102	; 0x66
 100f5b0:	9303      	str	r3, [sp, #12]
 100f5b2:	920e      	str	r2, [sp, #56]	; 0x38
 100f5b4:	9307      	str	r3, [sp, #28]
 100f5b6:	e678      	b.n	100f2aa <_svfprintf_r+0x17b2>
 100f5b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100f5ba:	2266      	movs	r2, #102	; 0x66
 100f5bc:	920e      	str	r2, [sp, #56]	; 0x38
 100f5be:	9a04      	ldr	r2, [sp, #16]
 100f5c0:	3301      	adds	r3, #1
 100f5c2:	441a      	add	r2, r3
 100f5c4:	9207      	str	r2, [sp, #28]
 100f5c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100f5ca:	9303      	str	r3, [sp, #12]
 100f5cc:	e66d      	b.n	100f2aa <_svfprintf_r+0x17b2>
 100f5ce:	4649      	mov	r1, r9
 100f5d0:	e46e      	b.n	100eeb0 <_svfprintf_r+0x13b8>
 100f5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100f5d4:	787b      	ldrb	r3, [r7, #1]
 100f5d6:	460f      	mov	r7, r1
 100f5d8:	f852 0b04 	ldr.w	r0, [r2], #4
 100f5dc:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 100f5e0:	9209      	str	r2, [sp, #36]	; 0x24
 100f5e2:	9104      	str	r1, [sp, #16]
 100f5e4:	f7fe baf3 	b.w	100dbce <_svfprintf_r+0xd6>
 100f5e8:	9b04      	ldr	r3, [sp, #16]
 100f5ea:	f1c3 0501 	rsb	r5, r3, #1
 100f5ee:	951f      	str	r5, [sp, #124]	; 0x7c
 100f5f0:	e61f      	b.n	100f232 <_svfprintf_r+0x173a>
 100f5f2:	9603      	str	r6, [sp, #12]
 100f5f4:	f7fe be0c 	b.w	100e210 <_svfprintf_r+0x718>
 100f5f8:	9603      	str	r6, [sp, #12]
 100f5fa:	f7fe bd94 	b.w	100e126 <_svfprintf_r+0x62e>
 100f5fe:	9a08      	ldr	r2, [sp, #32]
 100f600:	8993      	ldrh	r3, [r2, #12]
 100f602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100f606:	8193      	strh	r3, [r2, #12]
 100f608:	f7fe bfd9 	b.w	100e5be <_svfprintf_r+0xac6>
 100f60c:	9d04      	ldr	r5, [sp, #16]
 100f60e:	e48b      	b.n	100ef28 <_svfprintf_r+0x1430>
 100f610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f612:	9912      	ldr	r1, [sp, #72]	; 0x48
 100f614:	440b      	add	r3, r1
 100f616:	9304      	str	r3, [sp, #16]
 100f618:	f7ff baeb 	b.w	100ebf2 <_svfprintf_r+0x10fa>
 100f61c:	230c      	movs	r3, #12
 100f61e:	f04f 32ff 	mov.w	r2, #4294967295
 100f622:	f8ca 3000 	str.w	r3, [sl]
 100f626:	9205      	str	r2, [sp, #20]
 100f628:	f7fe bb64 	b.w	100dcf4 <_svfprintf_r+0x1fc>
 100f62c:	2300      	movs	r3, #0
 100f62e:	930a      	str	r3, [sp, #40]	; 0x28
 100f630:	e4a5      	b.n	100ef7e <_svfprintf_r+0x1486>
 100f632:	2302      	movs	r3, #2
 100f634:	9318      	str	r3, [sp, #96]	; 0x60
 100f636:	e4ef      	b.n	100f018 <_svfprintf_r+0x1520>
 100f638:	4633      	mov	r3, r6
 100f63a:	f7fe bdb1 	b.w	100e1a0 <_svfprintf_r+0x6a8>
 100f63e:	bf00      	nop
 100f640:	01056a24 	.word	0x01056a24
 100f644:	00000000 	.word	0x00000000

0100f648 <_vfprintf_r>:
 100f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100f64c:	4615      	mov	r5, r2
 100f64e:	ed2d 8b0a 	vpush	{d8-d12}
 100f652:	461c      	mov	r4, r3
 100f654:	4682      	mov	sl, r0
 100f656:	b0d5      	sub	sp, #340	; 0x154
 100f658:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 100f65c:	9105      	str	r1, [sp, #20]
 100f65e:	f003 fd37 	bl	10130d0 <_localeconv_r>
 100f662:	9409      	str	r4, [sp, #36]	; 0x24
 100f664:	6803      	ldr	r3, [r0, #0]
 100f666:	4618      	mov	r0, r3
 100f668:	9317      	str	r3, [sp, #92]	; 0x5c
 100f66a:	f7fe f849 	bl	100d700 <strlen>
 100f66e:	2208      	movs	r2, #8
 100f670:	2100      	movs	r1, #0
 100f672:	9015      	str	r0, [sp, #84]	; 0x54
 100f674:	4658      	mov	r0, fp
 100f676:	f7fd fc33 	bl	100cee0 <memset>
 100f67a:	f1ba 0f00 	cmp.w	sl, #0
 100f67e:	d004      	beq.n	100f68a <_vfprintf_r+0x42>
 100f680:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 100f684:	2b00      	cmp	r3, #0
 100f686:	f000 8440 	beq.w	100ff0a <_vfprintf_r+0x8c2>
 100f68a:	9905      	ldr	r1, [sp, #20]
 100f68c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 100f690:	b293      	uxth	r3, r2
 100f692:	0498      	lsls	r0, r3, #18
 100f694:	d407      	bmi.n	100f6a6 <_vfprintf_r+0x5e>
 100f696:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 100f69a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 100f69c:	818b      	strh	r3, [r1, #12]
 100f69e:	b29b      	uxth	r3, r3
 100f6a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 100f6a4:	664a      	str	r2, [r1, #100]	; 0x64
 100f6a6:	071a      	lsls	r2, r3, #28
 100f6a8:	f140 80be 	bpl.w	100f828 <_vfprintf_r+0x1e0>
 100f6ac:	9a05      	ldr	r2, [sp, #20]
 100f6ae:	6912      	ldr	r2, [r2, #16]
 100f6b0:	2a00      	cmp	r2, #0
 100f6b2:	f000 80b9 	beq.w	100f828 <_vfprintf_r+0x1e0>
 100f6b6:	f003 031a 	and.w	r3, r3, #26
 100f6ba:	2b0a      	cmp	r3, #10
 100f6bc:	f000 80c2 	beq.w	100f844 <_vfprintf_r+0x1fc>
 100f6c0:	eeb4 bb00 	vmov.f64	d11, #64	; 0x3e000000  0.125
 100f6c4:	f649 4830 	movw	r8, #39984	; 0x9c30
 100f6c8:	ed9f 8b81 	vldr	d8, [pc, #516]	; 100f8d0 <_vfprintf_r+0x288>
 100f6cc:	f2c0 1805 	movt	r8, #261	; 0x105
 100f6d0:	462f      	mov	r7, r5
 100f6d2:	2300      	movs	r3, #0
 100f6d4:	f24a 0160 	movw	r1, #41056	; 0xa060
 100f6d8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f6dc:	f2c0 1105 	movt	r1, #261	; 0x105
 100f6e0:	9312      	str	r3, [sp, #72]	; 0x48
 100f6e2:	910f      	str	r1, [sp, #60]	; 0x3c
 100f6e4:	9316      	str	r3, [sp, #88]	; 0x58
 100f6e6:	9318      	str	r3, [sp, #96]	; 0x60
 100f6e8:	9314      	str	r3, [sp, #80]	; 0x50
 100f6ea:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 100f6ee:	eeb3 9b00 	vmov.f64	d9, #48	; 0x41800000  16.0
 100f6f2:	9306      	str	r3, [sp, #24]
 100f6f4:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 100f6f8:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 100f6fc:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
 100f700:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 100f702:	463c      	mov	r4, r7
 100f704:	f8d8 3000 	ldr.w	r3, [r8]
 100f708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100f70a:	2b00      	cmp	r3, #0
 100f70c:	bf08      	it	eq
 100f70e:	4633      	moveq	r3, r6
 100f710:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 100f714:	f7fc fb1e 	bl	100bd54 <__locale_mb_cur_max>
 100f718:	f8cd b000 	str.w	fp, [sp]
 100f71c:	4622      	mov	r2, r4
 100f71e:	a920      	add	r1, sp, #128	; 0x80
 100f720:	4603      	mov	r3, r0
 100f722:	4650      	mov	r0, sl
 100f724:	47a8      	blx	r5
 100f726:	2800      	cmp	r0, #0
 100f728:	4603      	mov	r3, r0
 100f72a:	f000 80a1 	beq.w	100f870 <_vfprintf_r+0x228>
 100f72e:	f2c0 8097 	blt.w	100f860 <_vfprintf_r+0x218>
 100f732:	9a20      	ldr	r2, [sp, #128]	; 0x80
 100f734:	2a25      	cmp	r2, #37	; 0x25
 100f736:	d001      	beq.n	100f73c <_vfprintf_r+0xf4>
 100f738:	441c      	add	r4, r3
 100f73a:	e7e3      	b.n	100f704 <_vfprintf_r+0xbc>
 100f73c:	1be6      	subs	r6, r4, r7
 100f73e:	4605      	mov	r5, r0
 100f740:	f040 8099 	bne.w	100f876 <_vfprintf_r+0x22e>
 100f744:	2300      	movs	r3, #0
 100f746:	1c67      	adds	r7, r4, #1
 100f748:	461e      	mov	r6, r3
 100f74a:	9307      	str	r3, [sp, #28]
 100f74c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100f750:	f04f 32ff 	mov.w	r2, #4294967295
 100f754:	7863      	ldrb	r3, [r4, #1]
 100f756:	240a      	movs	r4, #10
 100f758:	9204      	str	r2, [sp, #16]
 100f75a:	3701      	adds	r7, #1
 100f75c:	f1a3 0220 	sub.w	r2, r3, #32
 100f760:	2a5a      	cmp	r2, #90	; 0x5a
 100f762:	f200 83d7 	bhi.w	100ff14 <_vfprintf_r+0x8cc>
 100f766:	e8df f012 	tbh	[pc, r2, lsl #1]
 100f76a:	01de      	.short	0x01de
 100f76c:	03d503d5 	.word	0x03d503d5
 100f770:	03d501da 	.word	0x03d501da
 100f774:	03d503d5 	.word	0x03d503d5
 100f778:	03d5020d 	.word	0x03d5020d
 100f77c:	01ff03d5 	.word	0x01ff03d5
 100f780:	03d501fa 	.word	0x03d501fa
 100f784:	022e01f6 	.word	0x022e01f6
 100f788:	022a03d5 	.word	0x022a03d5
 100f78c:	01b801b8 	.word	0x01b801b8
 100f790:	01b801b8 	.word	0x01b801b8
 100f794:	01b801b8 	.word	0x01b801b8
 100f798:	01b801b8 	.word	0x01b801b8
 100f79c:	03d501b8 	.word	0x03d501b8
 100f7a0:	03d503d5 	.word	0x03d503d5
 100f7a4:	03d503d5 	.word	0x03d503d5
 100f7a8:	03d503d5 	.word	0x03d503d5
 100f7ac:	03d50248 	.word	0x03d50248
 100f7b0:	03270367 	.word	0x03270367
 100f7b4:	02480248 	.word	0x02480248
 100f7b8:	03d50248 	.word	0x03d50248
 100f7bc:	03d503d5 	.word	0x03d503d5
 100f7c0:	032303d5 	.word	0x032303d5
 100f7c4:	03d503d5 	.word	0x03d503d5
 100f7c8:	03d50317 	.word	0x03d50317
 100f7cc:	03d503d5 	.word	0x03d503d5
 100f7d0:	03d502e7 	.word	0x03d502e7
 100f7d4:	03d502d8 	.word	0x03d502d8
 100f7d8:	02aa03d5 	.word	0x02aa03d5
 100f7dc:	03d503d5 	.word	0x03d503d5
 100f7e0:	03d503d5 	.word	0x03d503d5
 100f7e4:	03d503d5 	.word	0x03d503d5
 100f7e8:	03d503d5 	.word	0x03d503d5
 100f7ec:	03d50248 	.word	0x03d50248
 100f7f0:	027e0367 	.word	0x027e0367
 100f7f4:	02480248 	.word	0x02480248
 100f7f8:	03c60248 	.word	0x03c60248
 100f7fc:	005b027e 	.word	0x005b027e
 100f800:	03bc03d5 	.word	0x03bc03d5
 100f804:	03a703d5 	.word	0x03a703d5
 100f808:	01c50391 	.word	0x01c50391
 100f80c:	03d5005b 	.word	0x03d5005b
 100f810:	005d02e7 	.word	0x005d02e7
 100f814:	03d501e8 	.word	0x03d501e8
 100f818:	00b703d5 	.word	0x00b703d5
 100f81c:	005d03d5 	.word	0x005d03d5
 100f820:	f046 0620 	orr.w	r6, r6, #32
 100f824:	783b      	ldrb	r3, [r7, #0]
 100f826:	e798      	b.n	100f75a <_vfprintf_r+0x112>
 100f828:	9905      	ldr	r1, [sp, #20]
 100f82a:	4650      	mov	r0, sl
 100f82c:	f001 fef0 	bl	1011610 <__swsetup_r>
 100f830:	2800      	cmp	r0, #0
 100f832:	f041 83df 	bne.w	1010ff4 <_vfprintf_r+0x19ac>
 100f836:	9b05      	ldr	r3, [sp, #20]
 100f838:	899b      	ldrh	r3, [r3, #12]
 100f83a:	f003 031a 	and.w	r3, r3, #26
 100f83e:	2b0a      	cmp	r3, #10
 100f840:	f47f af3e 	bne.w	100f6c0 <_vfprintf_r+0x78>
 100f844:	9b05      	ldr	r3, [sp, #20]
 100f846:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 100f84a:	2b00      	cmp	r3, #0
 100f84c:	f6ff af38 	blt.w	100f6c0 <_vfprintf_r+0x78>
 100f850:	4623      	mov	r3, r4
 100f852:	462a      	mov	r2, r5
 100f854:	9905      	ldr	r1, [sp, #20]
 100f856:	4650      	mov	r0, sl
 100f858:	f001 fcd4 	bl	1011204 <__sbprintf>
 100f85c:	9006      	str	r0, [sp, #24]
 100f85e:	e027      	b.n	100f8b0 <_vfprintf_r+0x268>
 100f860:	2208      	movs	r2, #8
 100f862:	2100      	movs	r1, #0
 100f864:	4658      	mov	r0, fp
 100f866:	f7fd fb3b 	bl	100cee0 <memset>
 100f86a:	2301      	movs	r3, #1
 100f86c:	441c      	add	r4, r3
 100f86e:	e749      	b.n	100f704 <_vfprintf_r+0xbc>
 100f870:	1be6      	subs	r6, r4, r7
 100f872:	4605      	mov	r5, r0
 100f874:	d012      	beq.n	100f89c <_vfprintf_r+0x254>
 100f876:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100f87a:	e9c9 7600 	strd	r7, r6, [r9]
 100f87e:	3301      	adds	r3, #1
 100f880:	4432      	add	r2, r6
 100f882:	2b07      	cmp	r3, #7
 100f884:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100f888:	bfd8      	it	le
 100f88a:	f109 0908 	addle.w	r9, r9, #8
 100f88e:	dc15      	bgt.n	100f8bc <_vfprintf_r+0x274>
 100f890:	9b06      	ldr	r3, [sp, #24]
 100f892:	4433      	add	r3, r6
 100f894:	9306      	str	r3, [sp, #24]
 100f896:	2d00      	cmp	r5, #0
 100f898:	f47f af54 	bne.w	100f744 <_vfprintf_r+0xfc>
 100f89c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 100f89e:	2b00      	cmp	r3, #0
 100f8a0:	f041 81fa 	bne.w	1010c98 <_vfprintf_r+0x1650>
 100f8a4:	9b05      	ldr	r3, [sp, #20]
 100f8a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 100f8aa:	0659      	lsls	r1, r3, #25
 100f8ac:	f101 83a2 	bmi.w	1010ff4 <_vfprintf_r+0x19ac>
 100f8b0:	9806      	ldr	r0, [sp, #24]
 100f8b2:	b055      	add	sp, #340	; 0x154
 100f8b4:	ecbd 8b0a 	vpop	{d8-d12}
 100f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100f8bc:	aa28      	add	r2, sp, #160	; 0xa0
 100f8be:	9905      	ldr	r1, [sp, #20]
 100f8c0:	4650      	mov	r0, sl
 100f8c2:	f005 fbf3 	bl	10150ac <__sprint_r>
 100f8c6:	2800      	cmp	r0, #0
 100f8c8:	d1ec      	bne.n	100f8a4 <_vfprintf_r+0x25c>
 100f8ca:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100f8ce:	e7df      	b.n	100f890 <_vfprintf_r+0x248>
	...
 100f8d8:	06b0      	lsls	r0, r6, #26
 100f8da:	930e      	str	r3, [sp, #56]	; 0x38
 100f8dc:	f249 7394 	movw	r3, #38804	; 0x9794
 100f8e0:	f2c0 1305 	movt	r3, #261	; 0x105
 100f8e4:	9316      	str	r3, [sp, #88]	; 0x58
 100f8e6:	f140 81f3 	bpl.w	100fcd0 <_vfprintf_r+0x688>
 100f8ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100f8ec:	3507      	adds	r5, #7
 100f8ee:	f025 0307 	bic.w	r3, r5, #7
 100f8f2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 100f8f6:	9309      	str	r3, [sp, #36]	; 0x24
 100f8f8:	ea54 0305 	orrs.w	r3, r4, r5
 100f8fc:	f006 0301 	and.w	r3, r6, #1
 100f900:	bf08      	it	eq
 100f902:	2300      	moveq	r3, #0
 100f904:	2b00      	cmp	r3, #0
 100f906:	f040 81ff 	bne.w	100fd08 <_vfprintf_r+0x6c0>
 100f90a:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 100f90e:	9303      	str	r3, [sp, #12]
 100f910:	2302      	movs	r3, #2
 100f912:	9904      	ldr	r1, [sp, #16]
 100f914:	2200      	movs	r2, #0
 100f916:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100f91a:	1c4a      	adds	r2, r1, #1
 100f91c:	f000 826d 	beq.w	100fdfa <_vfprintf_r+0x7b2>
 100f920:	ea54 0205 	orrs.w	r2, r4, r5
 100f924:	9a03      	ldr	r2, [sp, #12]
 100f926:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 100f92a:	bf14      	ite	ne
 100f92c:	2201      	movne	r2, #1
 100f92e:	2200      	moveq	r2, #0
 100f930:	2900      	cmp	r1, #0
 100f932:	bf18      	it	ne
 100f934:	2201      	movne	r2, #1
 100f936:	2a00      	cmp	r2, #0
 100f938:	f040 8745 	bne.w	10107c6 <_vfprintf_r+0x117e>
 100f93c:	2b00      	cmp	r3, #0
 100f93e:	f040 8510 	bne.w	1010362 <_vfprintf_r+0xd1a>
 100f942:	9a03      	ldr	r2, [sp, #12]
 100f944:	9304      	str	r3, [sp, #16]
 100f946:	f012 0201 	ands.w	r2, r2, #1
 100f94a:	9208      	str	r2, [sp, #32]
 100f94c:	bf04      	itt	eq
 100f94e:	ab54      	addeq	r3, sp, #336	; 0x150
 100f950:	930b      	streq	r3, [sp, #44]	; 0x2c
 100f952:	d005      	beq.n	100f960 <_vfprintf_r+0x318>
 100f954:	2330      	movs	r3, #48	; 0x30
 100f956:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 100f95a:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100f95e:	930b      	str	r3, [sp, #44]	; 0x2c
 100f960:	2300      	movs	r3, #0
 100f962:	9a04      	ldr	r2, [sp, #16]
 100f964:	930a      	str	r3, [sp, #40]	; 0x28
 100f966:	9313      	str	r3, [sp, #76]	; 0x4c
 100f968:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100f96c:	9b08      	ldr	r3, [sp, #32]
 100f96e:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100f972:	4293      	cmp	r3, r2
 100f974:	bfb8      	it	lt
 100f976:	4613      	movlt	r3, r2
 100f978:	9303      	str	r3, [sp, #12]
 100f97a:	b111      	cbz	r1, 100f982 <_vfprintf_r+0x33a>
 100f97c:	9b03      	ldr	r3, [sp, #12]
 100f97e:	3301      	adds	r3, #1
 100f980:	9303      	str	r3, [sp, #12]
 100f982:	f016 0302 	ands.w	r3, r6, #2
 100f986:	930c      	str	r3, [sp, #48]	; 0x30
 100f988:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 100f98a:	bf1e      	ittt	ne
 100f98c:	9b03      	ldrne	r3, [sp, #12]
 100f98e:	3302      	addne	r3, #2
 100f990:	9303      	strne	r3, [sp, #12]
 100f992:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 100f996:	930d      	str	r3, [sp, #52]	; 0x34
 100f998:	d104      	bne.n	100f9a4 <_vfprintf_r+0x35c>
 100f99a:	9b07      	ldr	r3, [sp, #28]
 100f99c:	9803      	ldr	r0, [sp, #12]
 100f99e:	1a1c      	subs	r4, r3, r0
 100f9a0:	2c00      	cmp	r4, #0
 100f9a2:	dc60      	bgt.n	100fa66 <_vfprintf_r+0x41e>
 100f9a4:	b189      	cbz	r1, 100f9ca <_vfprintf_r+0x382>
 100f9a6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100f9a8:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 100f9ac:	3201      	adds	r2, #1
 100f9ae:	f8c9 0000 	str.w	r0, [r9]
 100f9b2:	3101      	adds	r1, #1
 100f9b4:	2001      	movs	r0, #1
 100f9b6:	2907      	cmp	r1, #7
 100f9b8:	f8c9 0004 	str.w	r0, [r9, #4]
 100f9bc:	922a      	str	r2, [sp, #168]	; 0xa8
 100f9be:	bfd8      	it	le
 100f9c0:	f109 0908 	addle.w	r9, r9, #8
 100f9c4:	9129      	str	r1, [sp, #164]	; 0xa4
 100f9c6:	f300 846f 	bgt.w	10102a8 <_vfprintf_r+0xc60>
 100f9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100f9cc:	b183      	cbz	r3, 100f9f0 <_vfprintf_r+0x3a8>
 100f9ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100f9d0:	a91e      	add	r1, sp, #120	; 0x78
 100f9d2:	3202      	adds	r2, #2
 100f9d4:	f8c9 1000 	str.w	r1, [r9]
 100f9d8:	3301      	adds	r3, #1
 100f9da:	2102      	movs	r1, #2
 100f9dc:	2b07      	cmp	r3, #7
 100f9de:	f8c9 1004 	str.w	r1, [r9, #4]
 100f9e2:	922a      	str	r2, [sp, #168]	; 0xa8
 100f9e4:	bfd8      	it	le
 100f9e6:	f109 0908 	addle.w	r9, r9, #8
 100f9ea:	9329      	str	r3, [sp, #164]	; 0xa4
 100f9ec:	f300 8469 	bgt.w	10102c2 <_vfprintf_r+0xc7a>
 100f9f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100f9f2:	2b80      	cmp	r3, #128	; 0x80
 100f9f4:	f000 8313 	beq.w	101001e <_vfprintf_r+0x9d6>
 100f9f8:	9b04      	ldr	r3, [sp, #16]
 100f9fa:	9908      	ldr	r1, [sp, #32]
 100f9fc:	1a5c      	subs	r4, r3, r1
 100f9fe:	2c00      	cmp	r4, #0
 100fa00:	f300 8355 	bgt.w	10100ae <_vfprintf_r+0xa66>
 100fa04:	05f5      	lsls	r5, r6, #23
 100fa06:	f100 82ab 	bmi.w	100ff60 <_vfprintf_r+0x918>
 100fa0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100fa0c:	9908      	ldr	r1, [sp, #32]
 100fa0e:	3301      	adds	r3, #1
 100fa10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100fa12:	2b07      	cmp	r3, #7
 100fa14:	440a      	add	r2, r1
 100fa16:	f8c9 1004 	str.w	r1, [r9, #4]
 100fa1a:	f8c9 0000 	str.w	r0, [r9]
 100fa1e:	922a      	str	r2, [sp, #168]	; 0xa8
 100fa20:	9329      	str	r3, [sp, #164]	; 0xa4
 100fa22:	f300 83ec 	bgt.w	10101fe <_vfprintf_r+0xbb6>
 100fa26:	f109 0908 	add.w	r9, r9, #8
 100fa2a:	0770      	lsls	r0, r6, #29
 100fa2c:	d505      	bpl.n	100fa3a <_vfprintf_r+0x3f2>
 100fa2e:	9b07      	ldr	r3, [sp, #28]
 100fa30:	9903      	ldr	r1, [sp, #12]
 100fa32:	1a5c      	subs	r4, r3, r1
 100fa34:	2c00      	cmp	r4, #0
 100fa36:	f300 8451 	bgt.w	10102dc <_vfprintf_r+0xc94>
 100fa3a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 100fa3e:	9803      	ldr	r0, [sp, #12]
 100fa40:	4281      	cmp	r1, r0
 100fa42:	bfac      	ite	ge
 100fa44:	185b      	addge	r3, r3, r1
 100fa46:	181b      	addlt	r3, r3, r0
 100fa48:	9306      	str	r3, [sp, #24]
 100fa4a:	2a00      	cmp	r2, #0
 100fa4c:	f040 8390 	bne.w	1010170 <_vfprintf_r+0xb28>
 100fa50:	2300      	movs	r3, #0
 100fa52:	9329      	str	r3, [sp, #164]	; 0xa4
 100fa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100fa56:	b11b      	cbz	r3, 100fa60 <_vfprintf_r+0x418>
 100fa58:	990a      	ldr	r1, [sp, #40]	; 0x28
 100fa5a:	4650      	mov	r0, sl
 100fa5c:	f003 f810 	bl	1012a80 <_free_r>
 100fa60:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100fa64:	e64c      	b.n	100f700 <_vfprintf_r+0xb8>
 100fa66:	2c10      	cmp	r4, #16
 100fa68:	f646 2534 	movw	r5, #27188	; 0x6a34
 100fa6c:	bfc8      	it	gt
 100fa6e:	961b      	strgt	r6, [sp, #108]	; 0x6c
 100fa70:	f2c0 1505 	movt	r5, #261	; 0x105
 100fa74:	9929      	ldr	r1, [sp, #164]	; 0xa4
 100fa76:	bfc4      	itt	gt
 100fa78:	2310      	movgt	r3, #16
 100fa7a:	9e05      	ldrgt	r6, [sp, #20]
 100fa7c:	dc03      	bgt.n	100fa86 <_vfprintf_r+0x43e>
 100fa7e:	e01e      	b.n	100fabe <_vfprintf_r+0x476>
 100fa80:	3c10      	subs	r4, #16
 100fa82:	2c10      	cmp	r4, #16
 100fa84:	dd1a      	ble.n	100fabc <_vfprintf_r+0x474>
 100fa86:	3101      	adds	r1, #1
 100fa88:	3210      	adds	r2, #16
 100fa8a:	2907      	cmp	r1, #7
 100fa8c:	e9c9 5300 	strd	r5, r3, [r9]
 100fa90:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100fa94:	f109 0908 	add.w	r9, r9, #8
 100fa98:	ddf2      	ble.n	100fa80 <_vfprintf_r+0x438>
 100fa9a:	aa28      	add	r2, sp, #160	; 0xa0
 100fa9c:	4631      	mov	r1, r6
 100fa9e:	4650      	mov	r0, sl
 100faa0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 100faa4:	f005 fb02 	bl	10150ac <__sprint_r>
 100faa8:	2800      	cmp	r0, #0
 100faaa:	f040 8369 	bne.w	1010180 <_vfprintf_r+0xb38>
 100faae:	3c10      	subs	r4, #16
 100fab0:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 100fab4:	2c10      	cmp	r4, #16
 100fab6:	f04f 0310 	mov.w	r3, #16
 100faba:	dce4      	bgt.n	100fa86 <_vfprintf_r+0x43e>
 100fabc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 100fabe:	3101      	adds	r1, #1
 100fac0:	4422      	add	r2, r4
 100fac2:	2907      	cmp	r1, #7
 100fac4:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100fac8:	e9c9 5400 	strd	r5, r4, [r9]
 100facc:	f300 867e 	bgt.w	10107cc <_vfprintf_r+0x1184>
 100fad0:	f109 0908 	add.w	r9, r9, #8
 100fad4:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100fad8:	e764      	b.n	100f9a4 <_vfprintf_r+0x35c>
 100fada:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100fade:	2100      	movs	r1, #0
 100fae0:	f817 3b01 	ldrb.w	r3, [r7], #1
 100fae4:	fb04 2101 	mla	r1, r4, r1, r2
 100fae8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100faec:	2a09      	cmp	r2, #9
 100faee:	d9f7      	bls.n	100fae0 <_vfprintf_r+0x498>
 100faf0:	9107      	str	r1, [sp, #28]
 100faf2:	e633      	b.n	100f75c <_vfprintf_r+0x114>
 100faf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100faf6:	f046 0202 	orr.w	r2, r6, #2
 100fafa:	f249 7194 	movw	r1, #38804	; 0x9794
 100fafe:	9203      	str	r2, [sp, #12]
 100fb00:	f2c0 1105 	movt	r1, #261	; 0x105
 100fb04:	f647 0230 	movw	r2, #30768	; 0x7830
 100fb08:	f853 4b04 	ldr.w	r4, [r3], #4
 100fb0c:	2500      	movs	r5, #0
 100fb0e:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
 100fb12:	2278      	movs	r2, #120	; 0x78
 100fb14:	9116      	str	r1, [sp, #88]	; 0x58
 100fb16:	9309      	str	r3, [sp, #36]	; 0x24
 100fb18:	2302      	movs	r3, #2
 100fb1a:	920e      	str	r2, [sp, #56]	; 0x38
 100fb1c:	e6f9      	b.n	100f912 <_vfprintf_r+0x2ca>
 100fb1e:	f046 0601 	orr.w	r6, r6, #1
 100fb22:	783b      	ldrb	r3, [r7, #0]
 100fb24:	e619      	b.n	100f75a <_vfprintf_r+0x112>
 100fb26:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 100fb2a:	783b      	ldrb	r3, [r7, #0]
 100fb2c:	2a00      	cmp	r2, #0
 100fb2e:	f47f ae14 	bne.w	100f75a <_vfprintf_r+0x112>
 100fb32:	2220      	movs	r2, #32
 100fb34:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 100fb38:	e60f      	b.n	100f75a <_vfprintf_r+0x112>
 100fb3a:	06b0      	lsls	r0, r6, #26
 100fb3c:	930e      	str	r3, [sp, #56]	; 0x38
 100fb3e:	f140 857a 	bpl.w	1010636 <_vfprintf_r+0xfee>
 100fb42:	9603      	str	r6, [sp, #12]
 100fb44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100fb46:	2301      	movs	r3, #1
 100fb48:	3507      	adds	r5, #7
 100fb4a:	f025 0207 	bic.w	r2, r5, #7
 100fb4e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100fb52:	9209      	str	r2, [sp, #36]	; 0x24
 100fb54:	e6dd      	b.n	100f912 <_vfprintf_r+0x2ca>
 100fb56:	783b      	ldrb	r3, [r7, #0]
 100fb58:	f046 0604 	orr.w	r6, r6, #4
 100fb5c:	e5fd      	b.n	100f75a <_vfprintf_r+0x112>
 100fb5e:	232b      	movs	r3, #43	; 0x2b
 100fb60:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100fb64:	783b      	ldrb	r3, [r7, #0]
 100fb66:	e5f8      	b.n	100f75a <_vfprintf_r+0x112>
 100fb68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fb6a:	783b      	ldrb	r3, [r7, #0]
 100fb6c:	f852 1b04 	ldr.w	r1, [r2], #4
 100fb70:	2900      	cmp	r1, #0
 100fb72:	9107      	str	r1, [sp, #28]
 100fb74:	bfa8      	it	ge
 100fb76:	9209      	strge	r2, [sp, #36]	; 0x24
 100fb78:	f6bf adef 	bge.w	100f75a <_vfprintf_r+0x112>
 100fb7c:	4249      	negs	r1, r1
 100fb7e:	9209      	str	r2, [sp, #36]	; 0x24
 100fb80:	9107      	str	r1, [sp, #28]
 100fb82:	e7e9      	b.n	100fb58 <_vfprintf_r+0x510>
 100fb84:	4650      	mov	r0, sl
 100fb86:	f003 faa3 	bl	10130d0 <_localeconv_r>
 100fb8a:	6843      	ldr	r3, [r0, #4]
 100fb8c:	4618      	mov	r0, r3
 100fb8e:	931a      	str	r3, [sp, #104]	; 0x68
 100fb90:	f7fd fdb6 	bl	100d700 <strlen>
 100fb94:	4605      	mov	r5, r0
 100fb96:	9019      	str	r0, [sp, #100]	; 0x64
 100fb98:	4650      	mov	r0, sl
 100fb9a:	f003 fa99 	bl	10130d0 <_localeconv_r>
 100fb9e:	6883      	ldr	r3, [r0, #8]
 100fba0:	2d00      	cmp	r5, #0
 100fba2:	bf18      	it	ne
 100fba4:	2b00      	cmpne	r3, #0
 100fba6:	9314      	str	r3, [sp, #80]	; 0x50
 100fba8:	f43f ae3c 	beq.w	100f824 <_vfprintf_r+0x1dc>
 100fbac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100fbae:	781a      	ldrb	r2, [r3, #0]
 100fbb0:	783b      	ldrb	r3, [r7, #0]
 100fbb2:	2a00      	cmp	r2, #0
 100fbb4:	f43f add1 	beq.w	100f75a <_vfprintf_r+0x112>
 100fbb8:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 100fbbc:	e5cd      	b.n	100f75a <_vfprintf_r+0x112>
 100fbbe:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 100fbc2:	783b      	ldrb	r3, [r7, #0]
 100fbc4:	e5c9      	b.n	100f75a <_vfprintf_r+0x112>
 100fbc6:	4639      	mov	r1, r7
 100fbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 100fbcc:	2b2a      	cmp	r3, #42	; 0x2a
 100fbce:	f001 82d9 	beq.w	1011184 <_vfprintf_r+0x1b3c>
 100fbd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100fbd6:	460f      	mov	r7, r1
 100fbd8:	2a09      	cmp	r2, #9
 100fbda:	bf84      	itt	hi
 100fbdc:	2200      	movhi	r2, #0
 100fbde:	9204      	strhi	r2, [sp, #16]
 100fbe0:	f63f adbc 	bhi.w	100f75c <_vfprintf_r+0x114>
 100fbe4:	2100      	movs	r1, #0
 100fbe6:	f817 3b01 	ldrb.w	r3, [r7], #1
 100fbea:	fb04 2101 	mla	r1, r4, r1, r2
 100fbee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 100fbf2:	2a09      	cmp	r2, #9
 100fbf4:	d9f7      	bls.n	100fbe6 <_vfprintf_r+0x59e>
 100fbf6:	9104      	str	r1, [sp, #16]
 100fbf8:	e5b0      	b.n	100f75c <_vfprintf_r+0x114>
 100fbfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100fbfc:	930e      	str	r3, [sp, #56]	; 0x38
 100fbfe:	3507      	adds	r5, #7
 100fc00:	ed9f 7bab 	vldr	d7, [pc, #684]	; 100feb0 <_vfprintf_r+0x868>
 100fc04:	f025 0307 	bic.w	r3, r5, #7
 100fc08:	ecb3 8b02 	vldmia	r3!, {d8}
 100fc0c:	eeb0 6bc8 	vabs.f64	d6, d8
 100fc10:	9309      	str	r3, [sp, #36]	; 0x24
 100fc12:	eeb4 6b47 	vcmp.f64	d6, d7
 100fc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100fc1a:	f340 848c 	ble.w	1010536 <_vfprintf_r+0xeee>
 100fc1e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 100fc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100fc26:	bf58      	it	pl
 100fc28:	f89d 1077 	ldrbpl.w	r1, [sp, #119]	; 0x77
 100fc2c:	d502      	bpl.n	100fc34 <_vfprintf_r+0x5ec>
 100fc2e:	212d      	movs	r1, #45	; 0x2d
 100fc30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 100fc34:	f249 7384 	movw	r3, #38788	; 0x9784
 100fc38:	f249 7488 	movw	r4, #38792	; 0x9788
 100fc3c:	f2c0 1305 	movt	r3, #261	; 0x105
 100fc40:	f2c0 1405 	movt	r4, #261	; 0x105
 100fc44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100fc46:	2200      	movs	r2, #0
 100fc48:	2003      	movs	r0, #3
 100fc4a:	920a      	str	r2, [sp, #40]	; 0x28
 100fc4c:	2d47      	cmp	r5, #71	; 0x47
 100fc4e:	bfc8      	it	gt
 100fc50:	4623      	movgt	r3, r4
 100fc52:	9003      	str	r0, [sp, #12]
 100fc54:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 100fc58:	930b      	str	r3, [sp, #44]	; 0x2c
 100fc5a:	9008      	str	r0, [sp, #32]
 100fc5c:	9204      	str	r2, [sp, #16]
 100fc5e:	9213      	str	r2, [sp, #76]	; 0x4c
 100fc60:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 100fc64:	e689      	b.n	100f97a <_vfprintf_r+0x332>
 100fc66:	06b5      	lsls	r5, r6, #26
 100fc68:	930e      	str	r3, [sp, #56]	; 0x38
 100fc6a:	f140 84f4 	bpl.w	1010656 <_vfprintf_r+0x100e>
 100fc6e:	9603      	str	r6, [sp, #12]
 100fc70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100fc72:	3507      	adds	r5, #7
 100fc74:	f025 0307 	bic.w	r3, r5, #7
 100fc78:	4619      	mov	r1, r3
 100fc7a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 100fc7e:	4614      	mov	r4, r2
 100fc80:	461d      	mov	r5, r3
 100fc82:	9109      	str	r1, [sp, #36]	; 0x24
 100fc84:	2a00      	cmp	r2, #0
 100fc86:	f173 0300 	sbcs.w	r3, r3, #0
 100fc8a:	f2c0 80a9 	blt.w	100fde0 <_vfprintf_r+0x798>
 100fc8e:	9b04      	ldr	r3, [sp, #16]
 100fc90:	3301      	adds	r3, #1
 100fc92:	f000 8156 	beq.w	100ff42 <_vfprintf_r+0x8fa>
 100fc96:	ea54 0305 	orrs.w	r3, r4, r5
 100fc9a:	9a04      	ldr	r2, [sp, #16]
 100fc9c:	9b03      	ldr	r3, [sp, #12]
 100fc9e:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 100fca2:	bf14      	ite	ne
 100fca4:	2301      	movne	r3, #1
 100fca6:	2300      	moveq	r3, #0
 100fca8:	2a00      	cmp	r2, #0
 100fcaa:	bf18      	it	ne
 100fcac:	2301      	movne	r3, #1
 100fcae:	2b00      	cmp	r3, #0
 100fcb0:	f040 8146 	bne.w	100ff40 <_vfprintf_r+0x8f8>
 100fcb4:	aa54      	add	r2, sp, #336	; 0x150
 100fcb6:	9304      	str	r3, [sp, #16]
 100fcb8:	920b      	str	r2, [sp, #44]	; 0x2c
 100fcba:	9308      	str	r3, [sp, #32]
 100fcbc:	e650      	b.n	100f960 <_vfprintf_r+0x318>
 100fcbe:	06b0      	lsls	r0, r6, #26
 100fcc0:	930e      	str	r3, [sp, #56]	; 0x38
 100fcc2:	f249 5348 	movw	r3, #38216	; 0x9548
 100fcc6:	f2c0 1305 	movt	r3, #261	; 0x105
 100fcca:	9316      	str	r3, [sp, #88]	; 0x58
 100fccc:	f53f ae0d 	bmi.w	100f8ea <_vfprintf_r+0x2a2>
 100fcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100fcd2:	06f1      	lsls	r1, r6, #27
 100fcd4:	f853 4b04 	ldr.w	r4, [r3], #4
 100fcd8:	9309      	str	r3, [sp, #36]	; 0x24
 100fcda:	d40b      	bmi.n	100fcf4 <_vfprintf_r+0x6ac>
 100fcdc:	0672      	lsls	r2, r6, #25
 100fcde:	bf44      	itt	mi
 100fce0:	b2a4      	uxthmi	r4, r4
 100fce2:	2500      	movmi	r5, #0
 100fce4:	f53f ae08 	bmi.w	100f8f8 <_vfprintf_r+0x2b0>
 100fce8:	05b3      	lsls	r3, r6, #22
 100fcea:	bf44      	itt	mi
 100fcec:	b2e4      	uxtbmi	r4, r4
 100fcee:	2500      	movmi	r5, #0
 100fcf0:	f53f ae02 	bmi.w	100f8f8 <_vfprintf_r+0x2b0>
 100fcf4:	2500      	movs	r5, #0
 100fcf6:	ea54 0305 	orrs.w	r3, r4, r5
 100fcfa:	f006 0301 	and.w	r3, r6, #1
 100fcfe:	bf08      	it	eq
 100fd00:	2300      	moveq	r3, #0
 100fd02:	2b00      	cmp	r3, #0
 100fd04:	f43f ae01 	beq.w	100f90a <_vfprintf_r+0x2c2>
 100fd08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100fd0a:	f046 0602 	orr.w	r6, r6, #2
 100fd0e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 100fd12:	2330      	movs	r3, #48	; 0x30
 100fd14:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 100fd18:	e5f7      	b.n	100f90a <_vfprintf_r+0x2c2>
 100fd1a:	06b4      	lsls	r4, r6, #26
 100fd1c:	930e      	str	r3, [sp, #56]	; 0x38
 100fd1e:	f046 0310 	orr.w	r3, r6, #16
 100fd22:	9303      	str	r3, [sp, #12]
 100fd24:	f53f af0e 	bmi.w	100fb44 <_vfprintf_r+0x4fc>
 100fd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100fd2a:	1d1a      	adds	r2, r3, #4
 100fd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100fd2e:	2500      	movs	r5, #0
 100fd30:	9209      	str	r2, [sp, #36]	; 0x24
 100fd32:	681c      	ldr	r4, [r3, #0]
 100fd34:	2301      	movs	r3, #1
 100fd36:	e5ec      	b.n	100f912 <_vfprintf_r+0x2ca>
 100fd38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100fd3a:	930e      	str	r3, [sp, #56]	; 0x38
 100fd3c:	2300      	movs	r3, #0
 100fd3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100fd42:	f855 2b04 	ldr.w	r2, [r5], #4
 100fd46:	920b      	str	r2, [sp, #44]	; 0x2c
 100fd48:	2a00      	cmp	r2, #0
 100fd4a:	f000 84d9 	beq.w	1010700 <_vfprintf_r+0x10b8>
 100fd4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100fd50:	2b53      	cmp	r3, #83	; 0x53
 100fd52:	f000 8556 	beq.w	1010802 <_vfprintf_r+0x11ba>
 100fd56:	f016 0310 	ands.w	r3, r6, #16
 100fd5a:	9310      	str	r3, [sp, #64]	; 0x40
 100fd5c:	f040 8551 	bne.w	1010802 <_vfprintf_r+0x11ba>
 100fd60:	9a04      	ldr	r2, [sp, #16]
 100fd62:	1c53      	adds	r3, r2, #1
 100fd64:	f000 8787 	beq.w	1010c76 <_vfprintf_r+0x162e>
 100fd68:	9910      	ldr	r1, [sp, #64]	; 0x40
 100fd6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100fd6c:	f003 fa50 	bl	1013210 <memchr>
 100fd70:	900a      	str	r0, [sp, #40]	; 0x28
 100fd72:	2800      	cmp	r0, #0
 100fd74:	f001 81e5 	beq.w	1011142 <_vfprintf_r+0x1afa>
 100fd78:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 100fd7c:	9509      	str	r5, [sp, #36]	; 0x24
 100fd7e:	1a9a      	subs	r2, r3, r2
 100fd80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100fd82:	9208      	str	r2, [sp, #32]
 100fd84:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 100fd88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 100fd8c:	9304      	str	r3, [sp, #16]
 100fd8e:	9313      	str	r3, [sp, #76]	; 0x4c
 100fd90:	9203      	str	r2, [sp, #12]
 100fd92:	9311      	str	r3, [sp, #68]	; 0x44
 100fd94:	930a      	str	r3, [sp, #40]	; 0x28
 100fd96:	e5f0      	b.n	100f97a <_vfprintf_r+0x332>
 100fd98:	06b4      	lsls	r4, r6, #26
 100fd9a:	930e      	str	r3, [sp, #56]	; 0x38
 100fd9c:	f046 0310 	orr.w	r3, r6, #16
 100fda0:	d479      	bmi.n	100fe96 <_vfprintf_r+0x84e>
 100fda2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fda4:	3204      	adds	r2, #4
 100fda6:	9909      	ldr	r1, [sp, #36]	; 0x24
 100fda8:	2500      	movs	r5, #0
 100fdaa:	9209      	str	r2, [sp, #36]	; 0x24
 100fdac:	680c      	ldr	r4, [r1, #0]
 100fdae:	e079      	b.n	100fea4 <_vfprintf_r+0x85c>
 100fdb0:	f046 0608 	orr.w	r6, r6, #8
 100fdb4:	783b      	ldrb	r3, [r7, #0]
 100fdb6:	e4d0      	b.n	100f75a <_vfprintf_r+0x112>
 100fdb8:	930e      	str	r3, [sp, #56]	; 0x38
 100fdba:	f046 0310 	orr.w	r3, r6, #16
 100fdbe:	06b6      	lsls	r6, r6, #26
 100fdc0:	9303      	str	r3, [sp, #12]
 100fdc2:	f53f af55 	bmi.w	100fc70 <_vfprintf_r+0x628>
 100fdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100fdc8:	1d1a      	adds	r2, r3, #4
 100fdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100fdcc:	9209      	str	r2, [sp, #36]	; 0x24
 100fdce:	681c      	ldr	r4, [r3, #0]
 100fdd0:	17e5      	asrs	r5, r4, #31
 100fdd2:	4622      	mov	r2, r4
 100fdd4:	2a00      	cmp	r2, #0
 100fdd6:	462b      	mov	r3, r5
 100fdd8:	f173 0300 	sbcs.w	r3, r3, #0
 100fddc:	f6bf af57 	bge.w	100fc8e <_vfprintf_r+0x646>
 100fde0:	4264      	negs	r4, r4
 100fde2:	9904      	ldr	r1, [sp, #16]
 100fde4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 100fde8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100fdec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 100fdf0:	1c4a      	adds	r2, r1, #1
 100fdf2:	f04f 0301 	mov.w	r3, #1
 100fdf6:	f47f ad93 	bne.w	100f920 <_vfprintf_r+0x2d8>
 100fdfa:	2b01      	cmp	r3, #1
 100fdfc:	f000 80a1 	beq.w	100ff42 <_vfprintf_r+0x8fa>
 100fe00:	2b02      	cmp	r3, #2
 100fe02:	bf18      	it	ne
 100fe04:	a954      	addne	r1, sp, #336	; 0x150
 100fe06:	f040 8193 	bne.w	1010130 <_vfprintf_r+0xae8>
 100fe0a:	ab54      	add	r3, sp, #336	; 0x150
 100fe0c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 100fe0e:	461a      	mov	r2, r3
 100fe10:	f004 010f 	and.w	r1, r4, #15
 100fe14:	0923      	lsrs	r3, r4, #4
 100fe16:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 100fe1a:	0928      	lsrs	r0, r5, #4
 100fe1c:	5c71      	ldrb	r1, [r6, r1]
 100fe1e:	461c      	mov	r4, r3
 100fe20:	4605      	mov	r5, r0
 100fe22:	ea54 0305 	orrs.w	r3, r4, r5
 100fe26:	f802 1d01 	strb.w	r1, [r2, #-1]!
 100fe2a:	d1f1      	bne.n	100fe10 <_vfprintf_r+0x7c8>
 100fe2c:	ab54      	add	r3, sp, #336	; 0x150
 100fe2e:	920b      	str	r2, [sp, #44]	; 0x2c
 100fe30:	1a9b      	subs	r3, r3, r2
 100fe32:	9e03      	ldr	r6, [sp, #12]
 100fe34:	9308      	str	r3, [sp, #32]
 100fe36:	e593      	b.n	100f960 <_vfprintf_r+0x318>
 100fe38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fe3a:	2b43      	cmp	r3, #67	; 0x43
 100fe3c:	930e      	str	r3, [sp, #56]	; 0x38
 100fe3e:	f102 0504 	add.w	r5, r2, #4
 100fe42:	d002      	beq.n	100fe4a <_vfprintf_r+0x802>
 100fe44:	06f3      	lsls	r3, r6, #27
 100fe46:	f140 841e 	bpl.w	1010686 <_vfprintf_r+0x103e>
 100fe4a:	2208      	movs	r2, #8
 100fe4c:	2100      	movs	r1, #0
 100fe4e:	a826      	add	r0, sp, #152	; 0x98
 100fe50:	ac3b      	add	r4, sp, #236	; 0xec
 100fe52:	f7fd f845 	bl	100cee0 <memset>
 100fe56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fe58:	ab26      	add	r3, sp, #152	; 0x98
 100fe5a:	4621      	mov	r1, r4
 100fe5c:	4650      	mov	r0, sl
 100fe5e:	6812      	ldr	r2, [r2, #0]
 100fe60:	f001 fa4c 	bl	10112fc <_wcrtomb_r>
 100fe64:	1c43      	adds	r3, r0, #1
 100fe66:	9008      	str	r0, [sp, #32]
 100fe68:	f001 80ce 	beq.w	1011008 <_vfprintf_r+0x19c0>
 100fe6c:	9b08      	ldr	r3, [sp, #32]
 100fe6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100fe72:	9303      	str	r3, [sp, #12]
 100fe74:	2300      	movs	r3, #0
 100fe76:	9509      	str	r5, [sp, #36]	; 0x24
 100fe78:	4619      	mov	r1, r3
 100fe7a:	940b      	str	r4, [sp, #44]	; 0x2c
 100fe7c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100fe80:	930a      	str	r3, [sp, #40]	; 0x28
 100fe82:	9304      	str	r3, [sp, #16]
 100fe84:	9313      	str	r3, [sp, #76]	; 0x4c
 100fe86:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100fe8a:	e57a      	b.n	100f982 <_vfprintf_r+0x33a>
 100fe8c:	06b0      	lsls	r0, r6, #26
 100fe8e:	930e      	str	r3, [sp, #56]	; 0x38
 100fe90:	f140 8343 	bpl.w	101051a <_vfprintf_r+0xed2>
 100fe94:	4633      	mov	r3, r6
 100fe96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100fe98:	3507      	adds	r5, #7
 100fe9a:	f025 0207 	bic.w	r2, r5, #7
 100fe9e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 100fea2:	9209      	str	r2, [sp, #36]	; 0x24
 100fea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 100fea8:	9303      	str	r3, [sp, #12]
 100feaa:	2300      	movs	r3, #0
 100feac:	e531      	b.n	100f912 <_vfprintf_r+0x2ca>
 100feae:	bf00      	nop
 100feb0:	ffffffff 	.word	0xffffffff
 100feb4:	7fefffff 	.word	0x7fefffff
 100feb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100feba:	06b0      	lsls	r0, r6, #26
 100febc:	f102 0304 	add.w	r3, r2, #4
 100fec0:	f100 8321 	bmi.w	1010506 <_vfprintf_r+0xebe>
 100fec4:	06f1      	lsls	r1, r6, #27
 100fec6:	f100 8517 	bmi.w	10108f8 <_vfprintf_r+0x12b0>
 100feca:	0672      	lsls	r2, r6, #25
 100fecc:	f100 86c4 	bmi.w	1010c58 <_vfprintf_r+0x1610>
 100fed0:	05b5      	lsls	r5, r6, #22
 100fed2:	f140 8511 	bpl.w	10108f8 <_vfprintf_r+0x12b0>
 100fed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100fed8:	9309      	str	r3, [sp, #36]	; 0x24
 100feda:	9b06      	ldr	r3, [sp, #24]
 100fedc:	6812      	ldr	r2, [r2, #0]
 100fede:	7013      	strb	r3, [r2, #0]
 100fee0:	e40e      	b.n	100f700 <_vfprintf_r+0xb8>
 100fee2:	783b      	ldrb	r3, [r7, #0]
 100fee4:	2b6c      	cmp	r3, #108	; 0x6c
 100fee6:	bf09      	itett	eq
 100fee8:	f046 0620 	orreq.w	r6, r6, #32
 100feec:	f046 0610 	orrne.w	r6, r6, #16
 100fef0:	787b      	ldrbeq	r3, [r7, #1]
 100fef2:	3701      	addeq	r7, #1
 100fef4:	e431      	b.n	100f75a <_vfprintf_r+0x112>
 100fef6:	783b      	ldrb	r3, [r7, #0]
 100fef8:	2b68      	cmp	r3, #104	; 0x68
 100fefa:	bf09      	itett	eq
 100fefc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 100ff00:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 100ff04:	787b      	ldrbeq	r3, [r7, #1]
 100ff06:	3701      	addeq	r7, #1
 100ff08:	e427      	b.n	100f75a <_vfprintf_r+0x112>
 100ff0a:	4650      	mov	r0, sl
 100ff0c:	f002 fd3e 	bl	101298c <__sinit>
 100ff10:	f7ff bbbb 	b.w	100f68a <_vfprintf_r+0x42>
 100ff14:	461a      	mov	r2, r3
 100ff16:	930e      	str	r3, [sp, #56]	; 0x38
 100ff18:	2b00      	cmp	r3, #0
 100ff1a:	f43f acbf 	beq.w	100f89c <_vfprintf_r+0x254>
 100ff1e:	2300      	movs	r3, #0
 100ff20:	2001      	movs	r0, #1
 100ff22:	4619      	mov	r1, r3
 100ff24:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 100ff28:	930a      	str	r3, [sp, #40]	; 0x28
 100ff2a:	9304      	str	r3, [sp, #16]
 100ff2c:	9313      	str	r3, [sp, #76]	; 0x4c
 100ff2e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 100ff32:	ab3b      	add	r3, sp, #236	; 0xec
 100ff34:	9003      	str	r0, [sp, #12]
 100ff36:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 100ff3a:	9008      	str	r0, [sp, #32]
 100ff3c:	930b      	str	r3, [sp, #44]	; 0x2c
 100ff3e:	e520      	b.n	100f982 <_vfprintf_r+0x33a>
 100ff40:	9603      	str	r6, [sp, #12]
 100ff42:	2d00      	cmp	r5, #0
 100ff44:	bf08      	it	eq
 100ff46:	2c0a      	cmpeq	r4, #10
 100ff48:	f080 8486 	bcs.w	1010858 <_vfprintf_r+0x1210>
 100ff4c:	2301      	movs	r3, #1
 100ff4e:	3430      	adds	r4, #48	; 0x30
 100ff50:	9308      	str	r3, [sp, #32]
 100ff52:	f20d 134f 	addw	r3, sp, #335	; 0x14f
 100ff56:	9e03      	ldr	r6, [sp, #12]
 100ff58:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 100ff5c:	930b      	str	r3, [sp, #44]	; 0x2c
 100ff5e:	e4ff      	b.n	100f960 <_vfprintf_r+0x318>
 100ff60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100ff62:	2b65      	cmp	r3, #101	; 0x65
 100ff64:	f340 8156 	ble.w	1010214 <_vfprintf_r+0xbcc>
 100ff68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 100ff6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 100ff70:	f040 81fd 	bne.w	101036e <_vfprintf_r+0xd26>
 100ff74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ff76:	3201      	adds	r2, #1
 100ff78:	2101      	movs	r1, #1
 100ff7a:	922a      	str	r2, [sp, #168]	; 0xa8
 100ff7c:	3301      	adds	r3, #1
 100ff7e:	f249 72b0 	movw	r2, #38832	; 0x97b0
 100ff82:	2b07      	cmp	r3, #7
 100ff84:	f2c0 1205 	movt	r2, #261	; 0x105
 100ff88:	9329      	str	r3, [sp, #164]	; 0xa4
 100ff8a:	e9c9 2100 	strd	r2, r1, [r9]
 100ff8e:	bfd8      	it	le
 100ff90:	f109 0908 	addle.w	r9, r9, #8
 100ff94:	f300 8429 	bgt.w	10107ea <_vfprintf_r+0x11a2>
 100ff98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 100ff9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100ff9c:	4293      	cmp	r3, r2
 100ff9e:	f280 82ac 	bge.w	10104fa <_vfprintf_r+0xeb2>
 100ffa2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 100ffa4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 100ffa8:	f8c9 1000 	str.w	r1, [r9]
 100ffac:	3301      	adds	r3, #1
 100ffae:	9915      	ldr	r1, [sp, #84]	; 0x54
 100ffb0:	2b07      	cmp	r3, #7
 100ffb2:	440a      	add	r2, r1
 100ffb4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 100ffb8:	f8c9 1004 	str.w	r1, [r9, #4]
 100ffbc:	bfd8      	it	le
 100ffbe:	f109 0908 	addle.w	r9, r9, #8
 100ffc2:	f300 8391 	bgt.w	10106e8 <_vfprintf_r+0x10a0>
 100ffc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100ffc8:	1e5c      	subs	r4, r3, #1
 100ffca:	2c00      	cmp	r4, #0
 100ffcc:	f77f ad2d 	ble.w	100fa2a <_vfprintf_r+0x3e2>
 100ffd0:	2c10      	cmp	r4, #16
 100ffd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 100ffd4:	f340 83d4 	ble.w	1010780 <_vfprintf_r+0x1138>
 100ffd8:	9604      	str	r6, [sp, #16]
 100ffda:	2510      	movs	r5, #16
 100ffdc:	4626      	mov	r6, r4
 100ffde:	4619      	mov	r1, r3
 100ffe0:	9c05      	ldr	r4, [sp, #20]
 100ffe2:	e003      	b.n	100ffec <_vfprintf_r+0x9a4>
 100ffe4:	3e10      	subs	r6, #16
 100ffe6:	2e10      	cmp	r6, #16
 100ffe8:	f340 8495 	ble.w	1010916 <_vfprintf_r+0x12ce>
 100ffec:	3101      	adds	r1, #1
 100ffee:	4bc2      	ldr	r3, [pc, #776]	; (10102f8 <_vfprintf_r+0xcb0>)
 100fff0:	2907      	cmp	r1, #7
 100fff2:	f102 0210 	add.w	r2, r2, #16
 100fff6:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 100fffa:	e9c9 3500 	strd	r3, r5, [r9]
 100fffe:	f109 0908 	add.w	r9, r9, #8
 1010002:	ddef      	ble.n	100ffe4 <_vfprintf_r+0x99c>
 1010004:	aa28      	add	r2, sp, #160	; 0xa0
 1010006:	4621      	mov	r1, r4
 1010008:	4650      	mov	r0, sl
 101000a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101000e:	f005 f84d 	bl	10150ac <__sprint_r>
 1010012:	2800      	cmp	r0, #0
 1010014:	f040 80b4 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010018:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 101001c:	e7e2      	b.n	100ffe4 <_vfprintf_r+0x99c>
 101001e:	9b07      	ldr	r3, [sp, #28]
 1010020:	9903      	ldr	r1, [sp, #12]
 1010022:	1a5c      	subs	r4, r3, r1
 1010024:	2c00      	cmp	r4, #0
 1010026:	f77f ace7 	ble.w	100f9f8 <_vfprintf_r+0x3b0>
 101002a:	2c10      	cmp	r4, #16
 101002c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101002e:	dd26      	ble.n	101007e <_vfprintf_r+0xa36>
 1010030:	960c      	str	r6, [sp, #48]	; 0x30
 1010032:	2510      	movs	r5, #16
 1010034:	4626      	mov	r6, r4
 1010036:	4619      	mov	r1, r3
 1010038:	9c05      	ldr	r4, [sp, #20]
 101003a:	e002      	b.n	1010042 <_vfprintf_r+0x9fa>
 101003c:	3e10      	subs	r6, #16
 101003e:	2e10      	cmp	r6, #16
 1010040:	dd1a      	ble.n	1010078 <_vfprintf_r+0xa30>
 1010042:	3101      	adds	r1, #1
 1010044:	4bac      	ldr	r3, [pc, #688]	; (10102f8 <_vfprintf_r+0xcb0>)
 1010046:	2907      	cmp	r1, #7
 1010048:	f102 0210 	add.w	r2, r2, #16
 101004c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010050:	e9c9 3500 	strd	r3, r5, [r9]
 1010054:	f109 0908 	add.w	r9, r9, #8
 1010058:	ddf0      	ble.n	101003c <_vfprintf_r+0x9f4>
 101005a:	aa28      	add	r2, sp, #160	; 0xa0
 101005c:	4621      	mov	r1, r4
 101005e:	4650      	mov	r0, sl
 1010060:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010064:	f005 f822 	bl	10150ac <__sprint_r>
 1010068:	2800      	cmp	r0, #0
 101006a:	f040 8089 	bne.w	1010180 <_vfprintf_r+0xb38>
 101006e:	3e10      	subs	r6, #16
 1010070:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1010074:	2e10      	cmp	r6, #16
 1010076:	dce4      	bgt.n	1010042 <_vfprintf_r+0x9fa>
 1010078:	4634      	mov	r4, r6
 101007a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 101007c:	460b      	mov	r3, r1
 101007e:	3301      	adds	r3, #1
 1010080:	499d      	ldr	r1, [pc, #628]	; (10102f8 <_vfprintf_r+0xcb0>)
 1010082:	2b07      	cmp	r3, #7
 1010084:	4422      	add	r2, r4
 1010086:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101008a:	e9c9 1400 	strd	r1, r4, [r9]
 101008e:	bfd8      	it	le
 1010090:	f109 0908 	addle.w	r9, r9, #8
 1010094:	f77f acb0 	ble.w	100f9f8 <_vfprintf_r+0x3b0>
 1010098:	aa28      	add	r2, sp, #160	; 0xa0
 101009a:	9905      	ldr	r1, [sp, #20]
 101009c:	4650      	mov	r0, sl
 101009e:	f005 f805 	bl	10150ac <__sprint_r>
 10100a2:	2800      	cmp	r0, #0
 10100a4:	d16c      	bne.n	1010180 <_vfprintf_r+0xb38>
 10100a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10100a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10100ac:	e4a4      	b.n	100f9f8 <_vfprintf_r+0x3b0>
 10100ae:	2c10      	cmp	r4, #16
 10100b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10100b2:	dd25      	ble.n	1010100 <_vfprintf_r+0xab8>
 10100b4:	9604      	str	r6, [sp, #16]
 10100b6:	2510      	movs	r5, #16
 10100b8:	4626      	mov	r6, r4
 10100ba:	4619      	mov	r1, r3
 10100bc:	9c05      	ldr	r4, [sp, #20]
 10100be:	e002      	b.n	10100c6 <_vfprintf_r+0xa7e>
 10100c0:	3e10      	subs	r6, #16
 10100c2:	2e10      	cmp	r6, #16
 10100c4:	dd19      	ble.n	10100fa <_vfprintf_r+0xab2>
 10100c6:	3101      	adds	r1, #1
 10100c8:	4b8b      	ldr	r3, [pc, #556]	; (10102f8 <_vfprintf_r+0xcb0>)
 10100ca:	2907      	cmp	r1, #7
 10100cc:	f102 0210 	add.w	r2, r2, #16
 10100d0:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 10100d4:	e9c9 3500 	strd	r3, r5, [r9]
 10100d8:	f109 0908 	add.w	r9, r9, #8
 10100dc:	ddf0      	ble.n	10100c0 <_vfprintf_r+0xa78>
 10100de:	aa28      	add	r2, sp, #160	; 0xa0
 10100e0:	4621      	mov	r1, r4
 10100e2:	4650      	mov	r0, sl
 10100e4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10100e8:	f004 ffe0 	bl	10150ac <__sprint_r>
 10100ec:	2800      	cmp	r0, #0
 10100ee:	d147      	bne.n	1010180 <_vfprintf_r+0xb38>
 10100f0:	3e10      	subs	r6, #16
 10100f2:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 10100f6:	2e10      	cmp	r6, #16
 10100f8:	dce5      	bgt.n	10100c6 <_vfprintf_r+0xa7e>
 10100fa:	4634      	mov	r4, r6
 10100fc:	9e04      	ldr	r6, [sp, #16]
 10100fe:	460b      	mov	r3, r1
 1010100:	3301      	adds	r3, #1
 1010102:	497d      	ldr	r1, [pc, #500]	; (10102f8 <_vfprintf_r+0xcb0>)
 1010104:	2b07      	cmp	r3, #7
 1010106:	4422      	add	r2, r4
 1010108:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101010c:	e9c9 1400 	strd	r1, r4, [r9]
 1010110:	bfd8      	it	le
 1010112:	f109 0908 	addle.w	r9, r9, #8
 1010116:	f77f ac75 	ble.w	100fa04 <_vfprintf_r+0x3bc>
 101011a:	aa28      	add	r2, sp, #160	; 0xa0
 101011c:	9905      	ldr	r1, [sp, #20]
 101011e:	4650      	mov	r0, sl
 1010120:	f004 ffc4 	bl	10150ac <__sprint_r>
 1010124:	bb60      	cbnz	r0, 1010180 <_vfprintf_r+0xb38>
 1010126:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010128:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101012c:	e46a      	b.n	100fa04 <_vfprintf_r+0x3bc>
 101012e:	4611      	mov	r1, r2
 1010130:	08e2      	lsrs	r2, r4, #3
 1010132:	08e8      	lsrs	r0, r5, #3
 1010134:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1010138:	f004 0307 	and.w	r3, r4, #7
 101013c:	4605      	mov	r5, r0
 101013e:	3330      	adds	r3, #48	; 0x30
 1010140:	4614      	mov	r4, r2
 1010142:	ea54 0005 	orrs.w	r0, r4, r5
 1010146:	f801 3c01 	strb.w	r3, [r1, #-1]
 101014a:	f101 32ff 	add.w	r2, r1, #4294967295
 101014e:	d1ee      	bne.n	101012e <_vfprintf_r+0xae6>
 1010150:	9e03      	ldr	r6, [sp, #12]
 1010152:	920b      	str	r2, [sp, #44]	; 0x2c
 1010154:	4630      	mov	r0, r6
 1010156:	2b30      	cmp	r3, #48	; 0x30
 1010158:	bf0c      	ite	eq
 101015a:	2000      	moveq	r0, #0
 101015c:	f000 0001 	andne.w	r0, r0, #1
 1010160:	2800      	cmp	r0, #0
 1010162:	f040 829a 	bne.w	101069a <_vfprintf_r+0x1052>
 1010166:	ab54      	add	r3, sp, #336	; 0x150
 1010168:	1a9b      	subs	r3, r3, r2
 101016a:	9308      	str	r3, [sp, #32]
 101016c:	f7ff bbf8 	b.w	100f960 <_vfprintf_r+0x318>
 1010170:	aa28      	add	r2, sp, #160	; 0xa0
 1010172:	9905      	ldr	r1, [sp, #20]
 1010174:	4650      	mov	r0, sl
 1010176:	f004 ff99 	bl	10150ac <__sprint_r>
 101017a:	2800      	cmp	r0, #0
 101017c:	f43f ac68 	beq.w	100fa50 <_vfprintf_r+0x408>
 1010180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1010182:	2b00      	cmp	r3, #0
 1010184:	f43f ab8e 	beq.w	100f8a4 <_vfprintf_r+0x25c>
 1010188:	990a      	ldr	r1, [sp, #40]	; 0x28
 101018a:	4650      	mov	r0, sl
 101018c:	f002 fc78 	bl	1012a80 <_free_r>
 1010190:	f7ff bb88 	b.w	100f8a4 <_vfprintf_r+0x25c>
 1010194:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1010196:	3201      	adds	r2, #1
 1010198:	f249 70b0 	movw	r0, #38832	; 0x97b0
 101019c:	2401      	movs	r4, #1
 101019e:	3301      	adds	r3, #1
 10101a0:	f2c0 1005 	movt	r0, #261	; 0x105
 10101a4:	2b07      	cmp	r3, #7
 10101a6:	e9c9 0400 	strd	r0, r4, [r9]
 10101aa:	922a      	str	r2, [sp, #168]	; 0xa8
 10101ac:	bfd8      	it	le
 10101ae:	f109 0908 	addle.w	r9, r9, #8
 10101b2:	9329      	str	r3, [sp, #164]	; 0xa4
 10101b4:	f300 865e 	bgt.w	1010e74 <_vfprintf_r+0x182c>
 10101b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10101ba:	430b      	orrs	r3, r1
 10101bc:	f000 8685 	beq.w	1010eca <_vfprintf_r+0x1882>
 10101c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10101c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 10101c4:	3301      	adds	r3, #1
 10101c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 10101c8:	2b07      	cmp	r3, #7
 10101ca:	4402      	add	r2, r0
 10101cc:	f8c9 0004 	str.w	r0, [r9, #4]
 10101d0:	f8c9 4000 	str.w	r4, [r9]
 10101d4:	bfd8      	it	le
 10101d6:	f109 0908 	addle.w	r9, r9, #8
 10101da:	922a      	str	r2, [sp, #168]	; 0xa8
 10101dc:	9329      	str	r3, [sp, #164]	; 0xa4
 10101de:	f300 8657 	bgt.w	1010e90 <_vfprintf_r+0x1848>
 10101e2:	2900      	cmp	r1, #0
 10101e4:	f2c0 86cc 	blt.w	1010f80 <_vfprintf_r+0x1938>
 10101e8:	3301      	adds	r3, #1
 10101ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 10101ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 10101ee:	2b07      	cmp	r3, #7
 10101f0:	440a      	add	r2, r1
 10101f2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 10101f6:	e9c9 0100 	strd	r0, r1, [r9]
 10101fa:	f77f ac14 	ble.w	100fa26 <_vfprintf_r+0x3de>
 10101fe:	aa28      	add	r2, sp, #160	; 0xa0
 1010200:	9905      	ldr	r1, [sp, #20]
 1010202:	4650      	mov	r0, sl
 1010204:	f004 ff52 	bl	10150ac <__sprint_r>
 1010208:	2800      	cmp	r0, #0
 101020a:	d1b9      	bne.n	1010180 <_vfprintf_r+0xb38>
 101020c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101020e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010212:	e40a      	b.n	100fa2a <_vfprintf_r+0x3e2>
 1010214:	9c12      	ldr	r4, [sp, #72]	; 0x48
 1010216:	3201      	adds	r2, #1
 1010218:	9829      	ldr	r0, [sp, #164]	; 0xa4
 101021a:	f109 0308 	add.w	r3, r9, #8
 101021e:	2c01      	cmp	r4, #1
 1010220:	f100 0101 	add.w	r1, r0, #1
 1010224:	f340 812e 	ble.w	1010484 <_vfprintf_r+0xe3c>
 1010228:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101022a:	2907      	cmp	r1, #7
 101022c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010230:	f8c9 0000 	str.w	r0, [r9]
 1010234:	f04f 0001 	mov.w	r0, #1
 1010238:	f8c9 0004 	str.w	r0, [r9, #4]
 101023c:	f300 82ab 	bgt.w	1010796 <_vfprintf_r+0x114e>
 1010240:	3101      	adds	r1, #1
 1010242:	9815      	ldr	r0, [sp, #84]	; 0x54
 1010244:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 1010246:	2907      	cmp	r1, #7
 1010248:	4402      	add	r2, r0
 101024a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 101024e:	e9c3 4000 	strd	r4, r0, [r3]
 1010252:	bfd8      	it	le
 1010254:	3308      	addle	r3, #8
 1010256:	f300 82aa 	bgt.w	10107ae <_vfprintf_r+0x1166>
 101025a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 101025e:	1c48      	adds	r0, r1, #1
 1010260:	9c12      	ldr	r4, [sp, #72]	; 0x48
 1010262:	f103 0908 	add.w	r9, r3, #8
 1010266:	4684      	mov	ip, r0
 1010268:	3c01      	subs	r4, #1
 101026a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101026e:	f000 811c 	beq.w	10104aa <_vfprintf_r+0xe62>
 1010272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 1010274:	2807      	cmp	r0, #7
 1010276:	4422      	add	r2, r4
 1010278:	605c      	str	r4, [r3, #4]
 101027a:	f105 0501 	add.w	r5, r5, #1
 101027e:	922a      	str	r2, [sp, #168]	; 0xa8
 1010280:	601d      	str	r5, [r3, #0]
 1010282:	9029      	str	r0, [sp, #164]	; 0xa4
 1010284:	f300 8221 	bgt.w	10106ca <_vfprintf_r+0x1082>
 1010288:	f103 0410 	add.w	r4, r3, #16
 101028c:	1c88      	adds	r0, r1, #2
 101028e:	464b      	mov	r3, r9
 1010290:	46a1      	mov	r9, r4
 1010292:	9918      	ldr	r1, [sp, #96]	; 0x60
 1010294:	2807      	cmp	r0, #7
 1010296:	9029      	str	r0, [sp, #164]	; 0xa4
 1010298:	440a      	add	r2, r1
 101029a:	922a      	str	r2, [sp, #168]	; 0xa8
 101029c:	6059      	str	r1, [r3, #4]
 101029e:	a922      	add	r1, sp, #136	; 0x88
 10102a0:	6019      	str	r1, [r3, #0]
 10102a2:	f77f abc2 	ble.w	100fa2a <_vfprintf_r+0x3e2>
 10102a6:	e7aa      	b.n	10101fe <_vfprintf_r+0xbb6>
 10102a8:	aa28      	add	r2, sp, #160	; 0xa0
 10102aa:	9905      	ldr	r1, [sp, #20]
 10102ac:	4650      	mov	r0, sl
 10102ae:	f004 fefd 	bl	10150ac <__sprint_r>
 10102b2:	2800      	cmp	r0, #0
 10102b4:	f47f af64 	bne.w	1010180 <_vfprintf_r+0xb38>
 10102b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10102ba:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10102be:	f7ff bb84 	b.w	100f9ca <_vfprintf_r+0x382>
 10102c2:	aa28      	add	r2, sp, #160	; 0xa0
 10102c4:	9905      	ldr	r1, [sp, #20]
 10102c6:	4650      	mov	r0, sl
 10102c8:	f004 fef0 	bl	10150ac <__sprint_r>
 10102cc:	2800      	cmp	r0, #0
 10102ce:	f47f af57 	bne.w	1010180 <_vfprintf_r+0xb38>
 10102d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10102d4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10102d8:	f7ff bb8a 	b.w	100f9f0 <_vfprintf_r+0x3a8>
 10102dc:	2c10      	cmp	r4, #16
 10102de:	f646 2534 	movw	r5, #27188	; 0x6a34
 10102e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10102e4:	f2c0 1505 	movt	r5, #261	; 0x105
 10102e8:	dd27      	ble.n	101033a <_vfprintf_r+0xcf2>
 10102ea:	9704      	str	r7, [sp, #16]
 10102ec:	2610      	movs	r6, #16
 10102ee:	462f      	mov	r7, r5
 10102f0:	4619      	mov	r1, r3
 10102f2:	9d05      	ldr	r5, [sp, #20]
 10102f4:	e005      	b.n	1010302 <_vfprintf_r+0xcba>
 10102f6:	bf00      	nop
 10102f8:	01056a44 	.word	0x01056a44
 10102fc:	3c10      	subs	r4, #16
 10102fe:	2c10      	cmp	r4, #16
 1010300:	dd18      	ble.n	1010334 <_vfprintf_r+0xcec>
 1010302:	3101      	adds	r1, #1
 1010304:	3210      	adds	r2, #16
 1010306:	2907      	cmp	r1, #7
 1010308:	e9c9 7600 	strd	r7, r6, [r9]
 101030c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010310:	f109 0908 	add.w	r9, r9, #8
 1010314:	ddf2      	ble.n	10102fc <_vfprintf_r+0xcb4>
 1010316:	aa28      	add	r2, sp, #160	; 0xa0
 1010318:	4629      	mov	r1, r5
 101031a:	4650      	mov	r0, sl
 101031c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010320:	f004 fec4 	bl	10150ac <__sprint_r>
 1010324:	2800      	cmp	r0, #0
 1010326:	f47f af2b 	bne.w	1010180 <_vfprintf_r+0xb38>
 101032a:	3c10      	subs	r4, #16
 101032c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1010330:	2c10      	cmp	r4, #16
 1010332:	dce6      	bgt.n	1010302 <_vfprintf_r+0xcba>
 1010334:	463d      	mov	r5, r7
 1010336:	9f04      	ldr	r7, [sp, #16]
 1010338:	460b      	mov	r3, r1
 101033a:	3301      	adds	r3, #1
 101033c:	4422      	add	r2, r4
 101033e:	2b07      	cmp	r3, #7
 1010340:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1010344:	e9c9 5400 	strd	r5, r4, [r9]
 1010348:	f77f ab77 	ble.w	100fa3a <_vfprintf_r+0x3f2>
 101034c:	aa28      	add	r2, sp, #160	; 0xa0
 101034e:	9905      	ldr	r1, [sp, #20]
 1010350:	4650      	mov	r0, sl
 1010352:	f004 feab 	bl	10150ac <__sprint_r>
 1010356:	2800      	cmp	r0, #0
 1010358:	f47f af12 	bne.w	1010180 <_vfprintf_r+0xb38>
 101035c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101035e:	f7ff bb6c 	b.w	100fa3a <_vfprintf_r+0x3f2>
 1010362:	ab54      	add	r3, sp, #336	; 0x150
 1010364:	9204      	str	r2, [sp, #16]
 1010366:	930b      	str	r3, [sp, #44]	; 0x2c
 1010368:	9208      	str	r2, [sp, #32]
 101036a:	f7ff baf9 	b.w	100f960 <_vfprintf_r+0x318>
 101036e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1010370:	2900      	cmp	r1, #0
 1010372:	f77f af0f 	ble.w	1010194 <_vfprintf_r+0xb4c>
 1010376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010378:	9912      	ldr	r1, [sp, #72]	; 0x48
 101037a:	428b      	cmp	r3, r1
 101037c:	bfa8      	it	ge
 101037e:	460b      	movge	r3, r1
 1010380:	2b00      	cmp	r3, #0
 1010382:	461c      	mov	r4, r3
 1010384:	dd0f      	ble.n	10103a6 <_vfprintf_r+0xd5e>
 1010386:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1010388:	4422      	add	r2, r4
 101038a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101038c:	3301      	adds	r3, #1
 101038e:	f8c9 4004 	str.w	r4, [r9, #4]
 1010392:	2b07      	cmp	r3, #7
 1010394:	922a      	str	r2, [sp, #168]	; 0xa8
 1010396:	f8c9 1000 	str.w	r1, [r9]
 101039a:	bfd8      	it	le
 101039c:	f109 0908 	addle.w	r9, r9, #8
 10103a0:	9329      	str	r3, [sp, #164]	; 0xa4
 10103a2:	f300 8441 	bgt.w	1010c28 <_vfprintf_r+0x15e0>
 10103a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10103a8:	2c00      	cmp	r4, #0
 10103aa:	bfa8      	it	ge
 10103ac:	1b1b      	subge	r3, r3, r4
 10103ae:	2b00      	cmp	r3, #0
 10103b0:	461c      	mov	r4, r3
 10103b2:	f300 81b9 	bgt.w	1010728 <_vfprintf_r+0x10e0>
 10103b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10103b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10103ba:	440b      	add	r3, r1
 10103bc:	0571      	lsls	r1, r6, #21
 10103be:	461d      	mov	r5, r3
 10103c0:	f100 8389 	bmi.w	1010ad6 <_vfprintf_r+0x148e>
 10103c4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 10103c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10103c8:	429c      	cmp	r4, r3
 10103ca:	db02      	blt.n	10103d2 <_vfprintf_r+0xd8a>
 10103cc:	07f3      	lsls	r3, r6, #31
 10103ce:	f140 8438 	bpl.w	1010c42 <_vfprintf_r+0x15fa>
 10103d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 10103d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 10103d6:	3301      	adds	r3, #1
 10103d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 10103da:	2b07      	cmp	r3, #7
 10103dc:	440a      	add	r2, r1
 10103de:	f8c9 1004 	str.w	r1, [r9, #4]
 10103e2:	f8c9 0000 	str.w	r0, [r9]
 10103e6:	bfd8      	it	le
 10103e8:	f109 0908 	addle.w	r9, r9, #8
 10103ec:	922a      	str	r2, [sp, #168]	; 0xa8
 10103ee:	9329      	str	r3, [sp, #164]	; 0xa4
 10103f0:	f300 857f 	bgt.w	1010ef2 <_vfprintf_r+0x18aa>
 10103f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10103f6:	4619      	mov	r1, r3
 10103f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 10103fa:	4419      	add	r1, r3
 10103fc:	1b1b      	subs	r3, r3, r4
 10103fe:	1b4c      	subs	r4, r1, r5
 1010400:	429c      	cmp	r4, r3
 1010402:	bfa8      	it	ge
 1010404:	461c      	movge	r4, r3
 1010406:	2c00      	cmp	r4, #0
 1010408:	dd0e      	ble.n	1010428 <_vfprintf_r+0xde0>
 101040a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 101040c:	4422      	add	r2, r4
 101040e:	f8c9 5000 	str.w	r5, [r9]
 1010412:	3101      	adds	r1, #1
 1010414:	f8c9 4004 	str.w	r4, [r9, #4]
 1010418:	2907      	cmp	r1, #7
 101041a:	922a      	str	r2, [sp, #168]	; 0xa8
 101041c:	9129      	str	r1, [sp, #164]	; 0xa4
 101041e:	bfd8      	it	le
 1010420:	f109 0908 	addle.w	r9, r9, #8
 1010424:	f300 8573 	bgt.w	1010f0e <_vfprintf_r+0x18c6>
 1010428:	2c00      	cmp	r4, #0
 101042a:	bfac      	ite	ge
 101042c:	1b1c      	subge	r4, r3, r4
 101042e:	461c      	movlt	r4, r3
 1010430:	2c00      	cmp	r4, #0
 1010432:	f77f aafa 	ble.w	100fa2a <_vfprintf_r+0x3e2>
 1010436:	2c10      	cmp	r4, #16
 1010438:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101043a:	f340 81a1 	ble.w	1010780 <_vfprintf_r+0x1138>
 101043e:	9604      	str	r6, [sp, #16]
 1010440:	2510      	movs	r5, #16
 1010442:	4626      	mov	r6, r4
 1010444:	4619      	mov	r1, r3
 1010446:	9c05      	ldr	r4, [sp, #20]
 1010448:	e003      	b.n	1010452 <_vfprintf_r+0xe0a>
 101044a:	3e10      	subs	r6, #16
 101044c:	2e10      	cmp	r6, #16
 101044e:	f340 8194 	ble.w	101077a <_vfprintf_r+0x1132>
 1010452:	3101      	adds	r1, #1
 1010454:	4bb9      	ldr	r3, [pc, #740]	; (101073c <_vfprintf_r+0x10f4>)
 1010456:	2907      	cmp	r1, #7
 1010458:	f102 0210 	add.w	r2, r2, #16
 101045c:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010460:	e9c9 3500 	strd	r3, r5, [r9]
 1010464:	f109 0908 	add.w	r9, r9, #8
 1010468:	ddef      	ble.n	101044a <_vfprintf_r+0xe02>
 101046a:	aa28      	add	r2, sp, #160	; 0xa0
 101046c:	4621      	mov	r1, r4
 101046e:	4650      	mov	r0, sl
 1010470:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010474:	f004 fe1a 	bl	10150ac <__sprint_r>
 1010478:	2800      	cmp	r0, #0
 101047a:	f47f ae81 	bne.w	1010180 <_vfprintf_r+0xb38>
 101047e:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1010482:	e7e2      	b.n	101044a <_vfprintf_r+0xe02>
 1010484:	07f4      	lsls	r4, r6, #31
 1010486:	f53f aecf 	bmi.w	1010228 <_vfprintf_r+0xbe0>
 101048a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 101048c:	2907      	cmp	r1, #7
 101048e:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010492:	f8c9 4000 	str.w	r4, [r9]
 1010496:	f04f 0401 	mov.w	r4, #1
 101049a:	f8c9 4004 	str.w	r4, [r9, #4]
 101049e:	f300 8114 	bgt.w	10106ca <_vfprintf_r+0x1082>
 10104a2:	3002      	adds	r0, #2
 10104a4:	f109 0910 	add.w	r9, r9, #16
 10104a8:	e6f3      	b.n	1010292 <_vfprintf_r+0xc4a>
 10104aa:	2c00      	cmp	r4, #0
 10104ac:	f77f aef1 	ble.w	1010292 <_vfprintf_r+0xc4a>
 10104b0:	2c10      	cmp	r4, #16
 10104b2:	f340 8672 	ble.w	101119a <_vfprintf_r+0x1b52>
 10104b6:	2510      	movs	r5, #16
 10104b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 10104bc:	e005      	b.n	10104ca <_vfprintf_r+0xe82>
 10104be:	3c10      	subs	r4, #16
 10104c0:	f101 0c01 	add.w	ip, r1, #1
 10104c4:	2c10      	cmp	r4, #16
 10104c6:	f340 80f4 	ble.w	10106b2 <_vfprintf_r+0x106a>
 10104ca:	489c      	ldr	r0, [pc, #624]	; (101073c <_vfprintf_r+0x10f4>)
 10104cc:	4661      	mov	r1, ip
 10104ce:	2907      	cmp	r1, #7
 10104d0:	f102 0210 	add.w	r2, r2, #16
 10104d4:	e9cd c229 	strd	ip, r2, [sp, #164]	; 0xa4
 10104d8:	e9c3 0500 	strd	r0, r5, [r3]
 10104dc:	f103 0308 	add.w	r3, r3, #8
 10104e0:	dded      	ble.n	10104be <_vfprintf_r+0xe76>
 10104e2:	aa28      	add	r2, sp, #160	; 0xa0
 10104e4:	4649      	mov	r1, r9
 10104e6:	4650      	mov	r0, sl
 10104e8:	f004 fde0 	bl	10150ac <__sprint_r>
 10104ec:	ab2b      	add	r3, sp, #172	; 0xac
 10104ee:	2800      	cmp	r0, #0
 10104f0:	f47f ae46 	bne.w	1010180 <_vfprintf_r+0xb38>
 10104f4:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 10104f8:	e7e1      	b.n	10104be <_vfprintf_r+0xe76>
 10104fa:	07f4      	lsls	r4, r6, #31
 10104fc:	bf58      	it	pl
 10104fe:	9a2a      	ldrpl	r2, [sp, #168]	; 0xa8
 1010500:	f57f aa93 	bpl.w	100fa2a <_vfprintf_r+0x3e2>
 1010504:	e54d      	b.n	100ffa2 <_vfprintf_r+0x95a>
 1010506:	9906      	ldr	r1, [sp, #24]
 1010508:	6812      	ldr	r2, [r2, #0]
 101050a:	9309      	str	r3, [sp, #36]	; 0x24
 101050c:	17cd      	asrs	r5, r1, #31
 101050e:	4608      	mov	r0, r1
 1010510:	4629      	mov	r1, r5
 1010512:	e9c2 0100 	strd	r0, r1, [r2]
 1010516:	f7ff b8f3 	b.w	100f700 <_vfprintf_r+0xb8>
 101051a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101051c:	06f1      	lsls	r1, r6, #27
 101051e:	f852 4b04 	ldr.w	r4, [r2], #4
 1010522:	f100 865b 	bmi.w	10111dc <_vfprintf_r+0x1b94>
 1010526:	0673      	lsls	r3, r6, #25
 1010528:	f140 81f9 	bpl.w	101091e <_vfprintf_r+0x12d6>
 101052c:	4633      	mov	r3, r6
 101052e:	9209      	str	r2, [sp, #36]	; 0x24
 1010530:	b2a4      	uxth	r4, r4
 1010532:	2500      	movs	r5, #0
 1010534:	e4b6      	b.n	100fea4 <_vfprintf_r+0x85c>
 1010536:	eeb4 8b48 	vcmp.f64	d8, d8
 101053a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101053e:	f180 85d6 	bvs.w	10110ee <_vfprintf_r+0x1aa6>
 1010542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1010544:	f023 0420 	bic.w	r4, r3, #32
 1010548:	2c41      	cmp	r4, #65	; 0x41
 101054a:	f040 81f4 	bne.w	1010936 <_vfprintf_r+0x12ee>
 101054e:	2b61      	cmp	r3, #97	; 0x61
 1010550:	f04f 0230 	mov.w	r2, #48	; 0x30
 1010554:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 1010558:	bf0c      	ite	eq
 101055a:	2378      	moveq	r3, #120	; 0x78
 101055c:	2358      	movne	r3, #88	; 0x58
 101055e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
 1010562:	9b04      	ldr	r3, [sp, #16]
 1010564:	2b63      	cmp	r3, #99	; 0x63
 1010566:	f300 839e 	bgt.w	1010ca6 <_vfprintf_r+0x165e>
 101056a:	2300      	movs	r3, #0
 101056c:	930a      	str	r3, [sp, #40]	; 0x28
 101056e:	ab3b      	add	r3, sp, #236	; 0xec
 1010570:	930b      	str	r3, [sp, #44]	; 0x2c
 1010572:	ee18 3a90 	vmov	r3, s17
 1010576:	2b00      	cmp	r3, #0
 1010578:	f280 8523 	bge.w	1010fc2 <_vfprintf_r+0x197a>
 101057c:	eeb1 0b48 	vneg.f64	d0, d8
 1010580:	232d      	movs	r3, #45	; 0x2d
 1010582:	930c      	str	r3, [sp, #48]	; 0x30
 1010584:	a81f      	add	r0, sp, #124	; 0x7c
 1010586:	f003 fd87 	bl	1014098 <frexp>
 101058a:	9a04      	ldr	r2, [sp, #16]
 101058c:	990e      	ldr	r1, [sp, #56]	; 0x38
 101058e:	f249 7094 	movw	r0, #38804	; 0x9794
 1010592:	f2c0 1005 	movt	r0, #261	; 0x105
 1010596:	3a01      	subs	r2, #1
 1010598:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 101059a:	ee20 0b0b 	vmul.f64	d0, d0, d11
 101059e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 10105a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10105a6:	bf04      	itt	eq
 10105a8:	2301      	moveq	r3, #1
 10105aa:	931f      	streq	r3, [sp, #124]	; 0x7c
 10105ac:	f249 5348 	movw	r3, #38216	; 0x9548
 10105b0:	f2c0 1305 	movt	r3, #261	; 0x105
 10105b4:	2961      	cmp	r1, #97	; 0x61
 10105b6:	bf18      	it	ne
 10105b8:	4618      	movne	r0, r3
 10105ba:	e005      	b.n	10105c8 <_vfprintf_r+0xf80>
 10105bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 10105c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10105c4:	d015      	beq.n	10105f2 <_vfprintf_r+0xfaa>
 10105c6:	461d      	mov	r5, r3
 10105c8:	ee20 0b09 	vmul.f64	d0, d0, d9
 10105cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 10105d0:	462b      	mov	r3, r5
 10105d2:	4611      	mov	r1, r2
 10105d4:	f102 32ff 	add.w	r2, r2, #4294967295
 10105d8:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 10105dc:	ee17 ca90 	vmov	ip, s15
 10105e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 10105e4:	ee30 0b46 	vsub.f64	d0, d0, d6
 10105e8:	f810 c00c 	ldrb.w	ip, [r0, ip]
 10105ec:	f803 cb01 	strb.w	ip, [r3], #1
 10105f0:	d1e4      	bne.n	10105bc <_vfprintf_r+0xf74>
 10105f2:	eeb4 0bca 	vcmpe.f64	d0, d10
 10105f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10105fa:	f300 852b 	bgt.w	1011054 <_vfprintf_r+0x1a0c>
 10105fe:	eeb4 0b4a 	vcmp.f64	d0, d10
 1010602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010606:	d104      	bne.n	1010612 <_vfprintf_r+0xfca>
 1010608:	ee17 2a90 	vmov	r2, s15
 101060c:	07d2      	lsls	r2, r2, #31
 101060e:	f100 8521 	bmi.w	1011054 <_vfprintf_r+0x1a0c>
 1010612:	2900      	cmp	r1, #0
 1010614:	bfa2      	ittt	ge
 1010616:	1c4a      	addge	r2, r1, #1
 1010618:	18d2      	addge	r2, r2, r3
 101061a:	2130      	movge	r1, #48	; 0x30
 101061c:	db03      	blt.n	1010626 <_vfprintf_r+0xfde>
 101061e:	f803 1b01 	strb.w	r1, [r3], #1
 1010622:	4293      	cmp	r3, r2
 1010624:	d1fb      	bne.n	101061e <_vfprintf_r+0xfd6>
 1010626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1010628:	f046 0602 	orr.w	r6, r6, #2
 101062c:	1a9b      	subs	r3, r3, r2
 101062e:	9312      	str	r3, [sp, #72]	; 0x48
 1010630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1010632:	9310      	str	r3, [sp, #64]	; 0x40
 1010634:	e1c3      	b.n	10109be <_vfprintf_r+0x1376>
 1010636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1010638:	06f1      	lsls	r1, r6, #27
 101063a:	f852 4b04 	ldr.w	r4, [r2], #4
 101063e:	f100 85be 	bmi.w	10111be <_vfprintf_r+0x1b76>
 1010642:	0673      	lsls	r3, r6, #25
 1010644:	9209      	str	r2, [sp, #36]	; 0x24
 1010646:	9603      	str	r6, [sp, #12]
 1010648:	f140 815d 	bpl.w	1010906 <_vfprintf_r+0x12be>
 101064c:	b2a4      	uxth	r4, r4
 101064e:	2500      	movs	r5, #0
 1010650:	2301      	movs	r3, #1
 1010652:	f7ff b95e 	b.w	100f912 <_vfprintf_r+0x2ca>
 1010656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010658:	06f4      	lsls	r4, r6, #27
 101065a:	f103 0204 	add.w	r2, r3, #4
 101065e:	f100 85c0 	bmi.w	10111e2 <_vfprintf_r+0x1b9a>
 1010662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010664:	0670      	lsls	r0, r6, #25
 1010666:	bf48      	it	mi
 1010668:	f9b3 4000 	ldrshmi.w	r4, [r3]
 101066c:	d404      	bmi.n	1010678 <_vfprintf_r+0x1030>
 101066e:	05b1      	lsls	r1, r6, #22
 1010670:	f140 82f9 	bpl.w	1010c66 <_vfprintf_r+0x161e>
 1010674:	f993 4000 	ldrsb.w	r4, [r3]
 1010678:	17e5      	asrs	r5, r4, #31
 101067a:	9209      	str	r2, [sp, #36]	; 0x24
 101067c:	9603      	str	r6, [sp, #12]
 101067e:	4622      	mov	r2, r4
 1010680:	462b      	mov	r3, r5
 1010682:	f7ff baff 	b.w	100fc84 <_vfprintf_r+0x63c>
 1010686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010688:	2201      	movs	r2, #1
 101068a:	ac3b      	add	r4, sp, #236	; 0xec
 101068c:	9203      	str	r2, [sp, #12]
 101068e:	9208      	str	r2, [sp, #32]
 1010690:	681b      	ldr	r3, [r3, #0]
 1010692:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 1010696:	f7ff bbed 	b.w	100fe74 <_vfprintf_r+0x82c>
 101069a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101069c:	3902      	subs	r1, #2
 101069e:	2330      	movs	r3, #48	; 0x30
 10106a0:	9e03      	ldr	r6, [sp, #12]
 10106a2:	910b      	str	r1, [sp, #44]	; 0x2c
 10106a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 10106a8:	ab54      	add	r3, sp, #336	; 0x150
 10106aa:	1a5b      	subs	r3, r3, r1
 10106ac:	9308      	str	r3, [sp, #32]
 10106ae:	f7ff b957 	b.w	100f960 <_vfprintf_r+0x318>
 10106b2:	f103 0108 	add.w	r1, r3, #8
 10106b6:	4660      	mov	r0, ip
 10106b8:	4d20      	ldr	r5, [pc, #128]	; (101073c <_vfprintf_r+0x10f4>)
 10106ba:	2807      	cmp	r0, #7
 10106bc:	4422      	add	r2, r4
 10106be:	605c      	str	r4, [r3, #4]
 10106c0:	922a      	str	r2, [sp, #168]	; 0xa8
 10106c2:	601d      	str	r5, [r3, #0]
 10106c4:	9029      	str	r0, [sp, #164]	; 0xa4
 10106c6:	f340 829d 	ble.w	1010c04 <_vfprintf_r+0x15bc>
 10106ca:	aa28      	add	r2, sp, #160	; 0xa0
 10106cc:	9905      	ldr	r1, [sp, #20]
 10106ce:	4650      	mov	r0, sl
 10106d0:	f004 fcec 	bl	10150ac <__sprint_r>
 10106d4:	2800      	cmp	r0, #0
 10106d6:	f47f ad53 	bne.w	1010180 <_vfprintf_r+0xb38>
 10106da:	9829      	ldr	r0, [sp, #164]	; 0xa4
 10106dc:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 10106e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10106e2:	ab2b      	add	r3, sp, #172	; 0xac
 10106e4:	3001      	adds	r0, #1
 10106e6:	e5d4      	b.n	1010292 <_vfprintf_r+0xc4a>
 10106e8:	aa28      	add	r2, sp, #160	; 0xa0
 10106ea:	9905      	ldr	r1, [sp, #20]
 10106ec:	4650      	mov	r0, sl
 10106ee:	f004 fcdd 	bl	10150ac <__sprint_r>
 10106f2:	2800      	cmp	r0, #0
 10106f4:	f47f ad44 	bne.w	1010180 <_vfprintf_r+0xb38>
 10106f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10106fa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10106fe:	e462      	b.n	100ffc6 <_vfprintf_r+0x97e>
 1010700:	9804      	ldr	r0, [sp, #16]
 1010702:	f249 73a8 	movw	r3, #38824	; 0x97a8
 1010706:	9204      	str	r2, [sp, #16]
 1010708:	f2c0 1305 	movt	r3, #261	; 0x105
 101070c:	2806      	cmp	r0, #6
 101070e:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 1010712:	4611      	mov	r1, r2
 1010714:	9213      	str	r2, [sp, #76]	; 0x4c
 1010716:	bf28      	it	cs
 1010718:	2006      	movcs	r0, #6
 101071a:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 101071e:	9003      	str	r0, [sp, #12]
 1010720:	9008      	str	r0, [sp, #32]
 1010722:	930b      	str	r3, [sp, #44]	; 0x2c
 1010724:	f7ff b929 	b.w	100f97a <_vfprintf_r+0x332>
 1010728:	2c10      	cmp	r4, #16
 101072a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 101072c:	f340 81ba 	ble.w	1010aa4 <_vfprintf_r+0x145c>
 1010730:	9604      	str	r6, [sp, #16]
 1010732:	2510      	movs	r5, #16
 1010734:	4626      	mov	r6, r4
 1010736:	4619      	mov	r1, r3
 1010738:	9c05      	ldr	r4, [sp, #20]
 101073a:	e005      	b.n	1010748 <_vfprintf_r+0x1100>
 101073c:	01056a44 	.word	0x01056a44
 1010740:	3e10      	subs	r6, #16
 1010742:	2e10      	cmp	r6, #16
 1010744:	f340 81ab 	ble.w	1010a9e <_vfprintf_r+0x1456>
 1010748:	3101      	adds	r1, #1
 101074a:	4bbc      	ldr	r3, [pc, #752]	; (1010a3c <_vfprintf_r+0x13f4>)
 101074c:	2907      	cmp	r1, #7
 101074e:	f102 0210 	add.w	r2, r2, #16
 1010752:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010756:	e9c9 3500 	strd	r3, r5, [r9]
 101075a:	f109 0908 	add.w	r9, r9, #8
 101075e:	ddef      	ble.n	1010740 <_vfprintf_r+0x10f8>
 1010760:	aa28      	add	r2, sp, #160	; 0xa0
 1010762:	4621      	mov	r1, r4
 1010764:	4650      	mov	r0, sl
 1010766:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 101076a:	f004 fc9f 	bl	10150ac <__sprint_r>
 101076e:	2800      	cmp	r0, #0
 1010770:	f47f ad06 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010774:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1010778:	e7e2      	b.n	1010740 <_vfprintf_r+0x10f8>
 101077a:	4634      	mov	r4, r6
 101077c:	9e04      	ldr	r6, [sp, #16]
 101077e:	460b      	mov	r3, r1
 1010780:	3301      	adds	r3, #1
 1010782:	49ae      	ldr	r1, [pc, #696]	; (1010a3c <_vfprintf_r+0x13f4>)
 1010784:	2b07      	cmp	r3, #7
 1010786:	4422      	add	r2, r4
 1010788:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 101078c:	e9c9 1400 	strd	r1, r4, [r9]
 1010790:	f77f a949 	ble.w	100fa26 <_vfprintf_r+0x3de>
 1010794:	e533      	b.n	10101fe <_vfprintf_r+0xbb6>
 1010796:	aa28      	add	r2, sp, #160	; 0xa0
 1010798:	9905      	ldr	r1, [sp, #20]
 101079a:	4650      	mov	r0, sl
 101079c:	f004 fc86 	bl	10150ac <__sprint_r>
 10107a0:	2800      	cmp	r0, #0
 10107a2:	f47f aced 	bne.w	1010180 <_vfprintf_r+0xb38>
 10107a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10107a8:	ab2b      	add	r3, sp, #172	; 0xac
 10107aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 10107ac:	e548      	b.n	1010240 <_vfprintf_r+0xbf8>
 10107ae:	aa28      	add	r2, sp, #160	; 0xa0
 10107b0:	9905      	ldr	r1, [sp, #20]
 10107b2:	4650      	mov	r0, sl
 10107b4:	f004 fc7a 	bl	10150ac <__sprint_r>
 10107b8:	2800      	cmp	r0, #0
 10107ba:	f47f ace1 	bne.w	1010180 <_vfprintf_r+0xb38>
 10107be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10107c0:	ab2b      	add	r3, sp, #172	; 0xac
 10107c2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 10107c4:	e549      	b.n	101025a <_vfprintf_r+0xc12>
 10107c6:	9603      	str	r6, [sp, #12]
 10107c8:	f7ff bb17 	b.w	100fdfa <_vfprintf_r+0x7b2>
 10107cc:	aa28      	add	r2, sp, #160	; 0xa0
 10107ce:	9905      	ldr	r1, [sp, #20]
 10107d0:	4650      	mov	r0, sl
 10107d2:	f004 fc6b 	bl	10150ac <__sprint_r>
 10107d6:	2800      	cmp	r0, #0
 10107d8:	f47f acd2 	bne.w	1010180 <_vfprintf_r+0xb38>
 10107dc:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 10107e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10107e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 10107e6:	f7ff b8dd 	b.w	100f9a4 <_vfprintf_r+0x35c>
 10107ea:	aa28      	add	r2, sp, #160	; 0xa0
 10107ec:	9905      	ldr	r1, [sp, #20]
 10107ee:	4650      	mov	r0, sl
 10107f0:	f004 fc5c 	bl	10150ac <__sprint_r>
 10107f4:	2800      	cmp	r0, #0
 10107f6:	f47f acc3 	bne.w	1010180 <_vfprintf_r+0xb38>
 10107fa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 10107fe:	f7ff bbcb 	b.w	100ff98 <_vfprintf_r+0x950>
 1010802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010804:	2208      	movs	r2, #8
 1010806:	2100      	movs	r1, #0
 1010808:	a826      	add	r0, sp, #152	; 0x98
 101080a:	9321      	str	r3, [sp, #132]	; 0x84
 101080c:	f7fc fb68 	bl	100cee0 <memset>
 1010810:	9b04      	ldr	r3, [sp, #16]
 1010812:	1c5a      	adds	r2, r3, #1
 1010814:	f000 81b6 	beq.w	1010b84 <_vfprintf_r+0x153c>
 1010818:	2400      	movs	r4, #0
 101081a:	9603      	str	r6, [sp, #12]
 101081c:	f8cd 9010 	str.w	r9, [sp, #16]
 1010820:	4626      	mov	r6, r4
 1010822:	4699      	mov	r9, r3
 1010824:	9509      	str	r5, [sp, #36]	; 0x24
 1010826:	e009      	b.n	101083c <_vfprintf_r+0x11f4>
 1010828:	f000 fd68 	bl	10112fc <_wcrtomb_r>
 101082c:	1833      	adds	r3, r6, r0
 101082e:	3001      	adds	r0, #1
 1010830:	f000 83ea 	beq.w	1011008 <_vfprintf_r+0x19c0>
 1010834:	454b      	cmp	r3, r9
 1010836:	dc0a      	bgt.n	101084e <_vfprintf_r+0x1206>
 1010838:	461e      	mov	r6, r3
 101083a:	d008      	beq.n	101084e <_vfprintf_r+0x1206>
 101083c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 101083e:	ab26      	add	r3, sp, #152	; 0x98
 1010840:	a93b      	add	r1, sp, #236	; 0xec
 1010842:	4650      	mov	r0, sl
 1010844:	5915      	ldr	r5, [r2, r4]
 1010846:	3404      	adds	r4, #4
 1010848:	462a      	mov	r2, r5
 101084a:	2d00      	cmp	r5, #0
 101084c:	d1ec      	bne.n	1010828 <_vfprintf_r+0x11e0>
 101084e:	9608      	str	r6, [sp, #32]
 1010850:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1010852:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 1010856:	e1a3      	b.n	1010ba0 <_vfprintf_r+0x1558>
 1010858:	9b03      	ldr	r3, [sp, #12]
 101085a:	2200      	movs	r2, #0
 101085c:	f8cd 9020 	str.w	r9, [sp, #32]
 1010860:	ae54      	add	r6, sp, #336	; 0x150
 1010862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 1010866:	970c      	str	r7, [sp, #48]	; 0x30
 1010868:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 101086c:	4691      	mov	r9, r2
 101086e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1010872:	461f      	mov	r7, r3
 1010874:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 1010878:	e008      	b.n	101088c <_vfprintf_r+0x1244>
 101087a:	f7fa fc75 	bl	100b168 <__aeabi_uldivmod>
 101087e:	2d00      	cmp	r5, #0
 1010880:	bf08      	it	eq
 1010882:	2c0a      	cmpeq	r4, #10
 1010884:	d329      	bcc.n	10108da <_vfprintf_r+0x1292>
 1010886:	4604      	mov	r4, r0
 1010888:	4656      	mov	r6, sl
 101088a:	460d      	mov	r5, r1
 101088c:	220a      	movs	r2, #10
 101088e:	2300      	movs	r3, #0
 1010890:	4620      	mov	r0, r4
 1010892:	4629      	mov	r1, r5
 1010894:	f7fa fc68 	bl	100b168 <__aeabi_uldivmod>
 1010898:	f109 0901 	add.w	r9, r9, #1
 101089c:	4620      	mov	r0, r4
 101089e:	4629      	mov	r1, r5
 10108a0:	f106 3aff 	add.w	sl, r6, #4294967295
 10108a4:	2300      	movs	r3, #0
 10108a6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 10108aa:	220a      	movs	r2, #10
 10108ac:	f806 cc01 	strb.w	ip, [r6, #-1]
 10108b0:	2f00      	cmp	r7, #0
 10108b2:	d0e2      	beq.n	101087a <_vfprintf_r+0x1232>
 10108b4:	f898 6000 	ldrb.w	r6, [r8]
 10108b8:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 10108bc:	bf18      	it	ne
 10108be:	f04f 0c01 	movne.w	ip, #1
 10108c2:	454e      	cmp	r6, r9
 10108c4:	bf18      	it	ne
 10108c6:	f04f 0c00 	movne.w	ip, #0
 10108ca:	f1bc 0f00 	cmp.w	ip, #0
 10108ce:	d0d4      	beq.n	101087a <_vfprintf_r+0x1232>
 10108d0:	429d      	cmp	r5, r3
 10108d2:	bf08      	it	eq
 10108d4:	4294      	cmpeq	r4, r2
 10108d6:	f080 833e 	bcs.w	1010f56 <_vfprintf_r+0x190e>
 10108da:	4652      	mov	r2, sl
 10108dc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 10108e0:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 10108e4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 10108e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 10108ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 10108f0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 10108f4:	9e03      	ldr	r6, [sp, #12]
 10108f6:	e436      	b.n	1010166 <_vfprintf_r+0xb1e>
 10108f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10108fa:	6812      	ldr	r2, [r2, #0]
 10108fc:	9309      	str	r3, [sp, #36]	; 0x24
 10108fe:	9b06      	ldr	r3, [sp, #24]
 1010900:	6013      	str	r3, [r2, #0]
 1010902:	f7fe befd 	b.w	100f700 <_vfprintf_r+0xb8>
 1010906:	05b5      	lsls	r5, r6, #22
 1010908:	f04f 0301 	mov.w	r3, #1
 101090c:	bf48      	it	mi
 101090e:	b2e4      	uxtbmi	r4, r4
 1010910:	2500      	movs	r5, #0
 1010912:	f7fe bffe 	b.w	100f912 <_vfprintf_r+0x2ca>
 1010916:	4634      	mov	r4, r6
 1010918:	460b      	mov	r3, r1
 101091a:	9e04      	ldr	r6, [sp, #16]
 101091c:	e730      	b.n	1010780 <_vfprintf_r+0x1138>
 101091e:	05b5      	lsls	r5, r6, #22
 1010920:	bf45      	ittet	mi
 1010922:	9209      	strmi	r2, [sp, #36]	; 0x24
 1010924:	b2e4      	uxtbmi	r4, r4
 1010926:	9209      	strpl	r2, [sp, #36]	; 0x24
 1010928:	4633      	movmi	r3, r6
 101092a:	bf4e      	itee	mi
 101092c:	2500      	movmi	r5, #0
 101092e:	2500      	movpl	r5, #0
 1010930:	4633      	movpl	r3, r6
 1010932:	f7ff bab7 	b.w	100fea4 <_vfprintf_r+0x85c>
 1010936:	9b04      	ldr	r3, [sp, #16]
 1010938:	1c5a      	adds	r2, r3, #1
 101093a:	f000 81bf 	beq.w	1010cbc <_vfprintf_r+0x1674>
 101093e:	2b00      	cmp	r3, #0
 1010940:	bf08      	it	eq
 1010942:	2c47      	cmpeq	r4, #71	; 0x47
 1010944:	f040 81bc 	bne.w	1010cc0 <_vfprintf_r+0x1678>
 1010948:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 101094c:	930d      	str	r3, [sp, #52]	; 0x34
 101094e:	ee18 3a90 	vmov	r3, s17
 1010952:	2b00      	cmp	r3, #0
 1010954:	f04f 0301 	mov.w	r3, #1
 1010958:	9304      	str	r3, [sp, #16]
 101095a:	f2c0 83ed 	blt.w	1011138 <_vfprintf_r+0x1af0>
 101095e:	eeb0 cb48 	vmov.f64	d12, d8
 1010962:	461d      	mov	r5, r3
 1010964:	2300      	movs	r3, #0
 1010966:	930c      	str	r3, [sp, #48]	; 0x30
 1010968:	ab26      	add	r3, sp, #152	; 0x98
 101096a:	aa21      	add	r2, sp, #132	; 0x84
 101096c:	9301      	str	r3, [sp, #4]
 101096e:	2102      	movs	r1, #2
 1010970:	9200      	str	r2, [sp, #0]
 1010972:	ab1f      	add	r3, sp, #124	; 0x7c
 1010974:	462a      	mov	r2, r5
 1010976:	eeb0 0b4c 	vmov.f64	d0, d12
 101097a:	4650      	mov	r0, sl
 101097c:	f000 ffc8 	bl	1011910 <_dtoa_r>
 1010980:	2c47      	cmp	r4, #71	; 0x47
 1010982:	900b      	str	r0, [sp, #44]	; 0x2c
 1010984:	f040 81cc 	bne.w	1010d20 <_vfprintf_r+0x16d8>
 1010988:	07f3      	lsls	r3, r6, #31
 101098a:	f100 81c9 	bmi.w	1010d20 <_vfprintf_r+0x16d8>
 101098e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1010990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1010992:	2c47      	cmp	r4, #71	; 0x47
 1010994:	eba3 0302 	sub.w	r3, r3, r2
 1010998:	9312      	str	r3, [sp, #72]	; 0x48
 101099a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 101099c:	9310      	str	r3, [sp, #64]	; 0x40
 101099e:	f040 8247 	bne.w	1010e30 <_vfprintf_r+0x17e8>
 10109a2:	9a04      	ldr	r2, [sp, #16]
 10109a4:	f113 0f03 	cmn.w	r3, #3
 10109a8:	bfa8      	it	ge
 10109aa:	429a      	cmpge	r2, r3
 10109ac:	f280 8222 	bge.w	1010df4 <_vfprintf_r+0x17ac>
 10109b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 10109b2:	2200      	movs	r2, #0
 10109b4:	920a      	str	r2, [sp, #40]	; 0x28
 10109b6:	3b02      	subs	r3, #2
 10109b8:	930e      	str	r3, [sp, #56]	; 0x38
 10109ba:	f023 0420 	bic.w	r4, r3, #32
 10109be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10109c0:	2c41      	cmp	r4, #65	; 0x41
 10109c2:	f103 32ff 	add.w	r2, r3, #4294967295
 10109c6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 10109ca:	921f      	str	r2, [sp, #124]	; 0x7c
 10109cc:	bf04      	itt	eq
 10109ce:	330f      	addeq	r3, #15
 10109d0:	b2db      	uxtbeq	r3, r3
 10109d2:	2a00      	cmp	r2, #0
 10109d4:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 10109d8:	bfb7      	itett	lt
 10109da:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 10109dc:	232b      	movge	r3, #43	; 0x2b
 10109de:	f1c3 0201 	rsblt	r2, r3, #1
 10109e2:	232d      	movlt	r3, #45	; 0x2d
 10109e4:	2a09      	cmp	r2, #9
 10109e6:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 10109ea:	f340 8393 	ble.w	1011114 <_vfprintf_r+0x1acc>
 10109ee:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
 10109f2:	f246 6567 	movw	r5, #26215	; 0x6667
 10109f6:	f04f 0e0a 	mov.w	lr, #10
 10109fa:	f2c6 6566 	movt	r5, #26214	; 0x6666
 10109fe:	4664      	mov	r4, ip
 1010a00:	e000      	b.n	1010a04 <_vfprintf_r+0x13bc>
 1010a02:	460c      	mov	r4, r1
 1010a04:	fb85 3002 	smull	r3, r0, r5, r2
 1010a08:	17d3      	asrs	r3, r2, #31
 1010a0a:	2a63      	cmp	r2, #99	; 0x63
 1010a0c:	f104 31ff 	add.w	r1, r4, #4294967295
 1010a10:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 1010a14:	fb0e 2013 	mls	r0, lr, r3, r2
 1010a18:	461a      	mov	r2, r3
 1010a1a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 1010a1e:	f804 0c01 	strb.w	r0, [r4, #-1]
 1010a22:	dcee      	bgt.n	1010a02 <_vfprintf_r+0x13ba>
 1010a24:	1ea2      	subs	r2, r4, #2
 1010a26:	3330      	adds	r3, #48	; 0x30
 1010a28:	4594      	cmp	ip, r2
 1010a2a:	b2db      	uxtb	r3, r3
 1010a2c:	f801 3c01 	strb.w	r3, [r1, #-1]
 1010a30:	f240 83c2 	bls.w	10111b8 <_vfprintf_r+0x1b70>
 1010a34:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 1010a38:	e004      	b.n	1010a44 <_vfprintf_r+0x13fc>
 1010a3a:	bf00      	nop
 1010a3c:	01056a44 	.word	0x01056a44
 1010a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 1010a44:	4561      	cmp	r1, ip
 1010a46:	f802 3b01 	strb.w	r3, [r2], #1
 1010a4a:	d1f9      	bne.n	1010a40 <_vfprintf_r+0x13f8>
 1010a4c:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 1010a50:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 1010a54:	1b1b      	subs	r3, r3, r4
 1010a56:	aa22      	add	r2, sp, #136	; 0x88
 1010a58:	440b      	add	r3, r1
 1010a5a:	1a9b      	subs	r3, r3, r2
 1010a5c:	9318      	str	r3, [sp, #96]	; 0x60
 1010a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1010a60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 1010a62:	2b01      	cmp	r3, #1
 1010a64:	441a      	add	r2, r3
 1010a66:	9208      	str	r2, [sp, #32]
 1010a68:	f340 8376 	ble.w	1011158 <_vfprintf_r+0x1b10>
 1010a6c:	9b08      	ldr	r3, [sp, #32]
 1010a6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1010a70:	4413      	add	r3, r2
 1010a72:	9308      	str	r3, [sp, #32]
 1010a74:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 1010a78:	2200      	movs	r2, #0
 1010a7a:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 1010a7e:	9b08      	ldr	r3, [sp, #32]
 1010a80:	9213      	str	r2, [sp, #76]	; 0x4c
 1010a82:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 1010a86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010a8a:	9303      	str	r3, [sp, #12]
 1010a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1010a8e:	2b00      	cmp	r3, #0
 1010a90:	f040 81e9 	bne.w	1010e66 <_vfprintf_r+0x181e>
 1010a94:	9304      	str	r3, [sp, #16]
 1010a96:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1010a9a:	f7fe bf6e 	b.w	100f97a <_vfprintf_r+0x332>
 1010a9e:	4634      	mov	r4, r6
 1010aa0:	9e04      	ldr	r6, [sp, #16]
 1010aa2:	460b      	mov	r3, r1
 1010aa4:	3301      	adds	r3, #1
 1010aa6:	49af      	ldr	r1, [pc, #700]	; (1010d64 <_vfprintf_r+0x171c>)
 1010aa8:	2b07      	cmp	r3, #7
 1010aaa:	4422      	add	r2, r4
 1010aac:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1010ab0:	e9c9 1400 	strd	r1, r4, [r9]
 1010ab4:	bfd8      	it	le
 1010ab6:	f109 0908 	addle.w	r9, r9, #8
 1010aba:	f77f ac7c 	ble.w	10103b6 <_vfprintf_r+0xd6e>
 1010abe:	aa28      	add	r2, sp, #160	; 0xa0
 1010ac0:	9905      	ldr	r1, [sp, #20]
 1010ac2:	4650      	mov	r0, sl
 1010ac4:	f004 faf2 	bl	10150ac <__sprint_r>
 1010ac8:	2800      	cmp	r0, #0
 1010aca:	f47f ab59 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010ace:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010ad0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010ad4:	e46f      	b.n	10103b6 <_vfprintf_r+0xd6e>
 1010ad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 1010ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 1010ada:	2b00      	cmp	r3, #0
 1010adc:	bfd8      	it	le
 1010ade:	2900      	cmple	r1, #0
 1010ae0:	f340 8370 	ble.w	10111c4 <_vfprintf_r+0x1b7c>
 1010ae4:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
 1010ae8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 1010aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1010aee:	9812      	ldr	r0, [sp, #72]	; 0x48
 1010af0:	960c      	str	r6, [sp, #48]	; 0x30
 1010af2:	461e      	mov	r6, r3
 1010af4:	4401      	add	r1, r0
 1010af6:	9108      	str	r1, [sp, #32]
 1010af8:	2e00      	cmp	r6, #0
 1010afa:	f000 8127 	beq.w	1010d4c <_vfprintf_r+0x1704>
 1010afe:	3e01      	subs	r6, #1
 1010b00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1010b02:	9919      	ldr	r1, [sp, #100]	; 0x64
 1010b04:	3301      	adds	r3, #1
 1010b06:	981a      	ldr	r0, [sp, #104]	; 0x68
 1010b08:	2b07      	cmp	r3, #7
 1010b0a:	440a      	add	r2, r1
 1010b0c:	f8c9 1004 	str.w	r1, [r9, #4]
 1010b10:	f8c9 0000 	str.w	r0, [r9]
 1010b14:	bfd8      	it	le
 1010b16:	f109 0908 	addle.w	r9, r9, #8
 1010b1a:	922a      	str	r2, [sp, #168]	; 0xa8
 1010b1c:	9329      	str	r3, [sp, #164]	; 0xa4
 1010b1e:	f300 814f 	bgt.w	1010dc0 <_vfprintf_r+0x1778>
 1010b22:	9814      	ldr	r0, [sp, #80]	; 0x50
 1010b24:	9908      	ldr	r1, [sp, #32]
 1010b26:	7803      	ldrb	r3, [r0, #0]
 1010b28:	1b4c      	subs	r4, r1, r5
 1010b2a:	9104      	str	r1, [sp, #16]
 1010b2c:	429c      	cmp	r4, r3
 1010b2e:	bfa8      	it	ge
 1010b30:	461c      	movge	r4, r3
 1010b32:	2c00      	cmp	r4, #0
 1010b34:	dd0e      	ble.n	1010b54 <_vfprintf_r+0x150c>
 1010b36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1010b38:	4422      	add	r2, r4
 1010b3a:	f8c9 5000 	str.w	r5, [r9]
 1010b3e:	3301      	adds	r3, #1
 1010b40:	922a      	str	r2, [sp, #168]	; 0xa8
 1010b42:	2b07      	cmp	r3, #7
 1010b44:	f8c9 4004 	str.w	r4, [r9, #4]
 1010b48:	9329      	str	r3, [sp, #164]	; 0xa4
 1010b4a:	f300 8145 	bgt.w	1010dd8 <_vfprintf_r+0x1790>
 1010b4e:	7803      	ldrb	r3, [r0, #0]
 1010b50:	f109 0908 	add.w	r9, r9, #8
 1010b54:	2c00      	cmp	r4, #0
 1010b56:	bfac      	ite	ge
 1010b58:	1b1c      	subge	r4, r3, r4
 1010b5a:	461c      	movlt	r4, r3
 1010b5c:	2c00      	cmp	r4, #0
 1010b5e:	f300 80fc 	bgt.w	1010d5a <_vfprintf_r+0x1712>
 1010b62:	441d      	add	r5, r3
 1010b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1010b66:	2e00      	cmp	r6, #0
 1010b68:	bfd8      	it	le
 1010b6a:	2b00      	cmple	r3, #0
 1010b6c:	dcc4      	bgt.n	1010af8 <_vfprintf_r+0x14b0>
 1010b6e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 1010b72:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 1010b76:	9904      	ldr	r1, [sp, #16]
 1010b78:	462b      	mov	r3, r5
 1010b7a:	428d      	cmp	r5, r1
 1010b7c:	bf28      	it	cs
 1010b7e:	460b      	movcs	r3, r1
 1010b80:	461d      	mov	r5, r3
 1010b82:	e41f      	b.n	10103c4 <_vfprintf_r+0xd7c>
 1010b84:	2300      	movs	r3, #0
 1010b86:	aa26      	add	r2, sp, #152	; 0x98
 1010b88:	4619      	mov	r1, r3
 1010b8a:	9200      	str	r2, [sp, #0]
 1010b8c:	4650      	mov	r0, sl
 1010b8e:	aa21      	add	r2, sp, #132	; 0x84
 1010b90:	f000 fc0a 	bl	10113a8 <_wcsrtombs_r>
 1010b94:	1c43      	adds	r3, r0, #1
 1010b96:	9008      	str	r0, [sp, #32]
 1010b98:	f000 8236 	beq.w	1011008 <_vfprintf_r+0x19c0>
 1010b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010b9e:	9321      	str	r3, [sp, #132]	; 0x84
 1010ba0:	9b08      	ldr	r3, [sp, #32]
 1010ba2:	2b00      	cmp	r3, #0
 1010ba4:	d034      	beq.n	1010c10 <_vfprintf_r+0x15c8>
 1010ba6:	2b63      	cmp	r3, #99	; 0x63
 1010ba8:	f340 8229 	ble.w	1010ffe <_vfprintf_r+0x19b6>
 1010bac:	1c59      	adds	r1, r3, #1
 1010bae:	4650      	mov	r0, sl
 1010bb0:	f7fb f992 	bl	100bed8 <_malloc_r>
 1010bb4:	900b      	str	r0, [sp, #44]	; 0x2c
 1010bb6:	2800      	cmp	r0, #0
 1010bb8:	f000 8226 	beq.w	1011008 <_vfprintf_r+0x19c0>
 1010bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010bbe:	930a      	str	r3, [sp, #40]	; 0x28
 1010bc0:	2208      	movs	r2, #8
 1010bc2:	2100      	movs	r1, #0
 1010bc4:	a826      	add	r0, sp, #152	; 0x98
 1010bc6:	f7fc f98b 	bl	100cee0 <memset>
 1010bca:	9c08      	ldr	r4, [sp, #32]
 1010bcc:	ab26      	add	r3, sp, #152	; 0x98
 1010bce:	aa21      	add	r2, sp, #132	; 0x84
 1010bd0:	9300      	str	r3, [sp, #0]
 1010bd2:	4650      	mov	r0, sl
 1010bd4:	4623      	mov	r3, r4
 1010bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1010bd8:	f000 fbe6 	bl	10113a8 <_wcsrtombs_r>
 1010bdc:	4284      	cmp	r4, r0
 1010bde:	f040 82e4 	bne.w	10111aa <_vfprintf_r+0x1b62>
 1010be2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1010be4:	2300      	movs	r3, #0
 1010be6:	9509      	str	r5, [sp, #36]	; 0x24
 1010be8:	9304      	str	r3, [sp, #16]
 1010bea:	4614      	mov	r4, r2
 1010bec:	9a08      	ldr	r2, [sp, #32]
 1010bee:	9313      	str	r3, [sp, #76]	; 0x4c
 1010bf0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1010bf4:	54a3      	strb	r3, [r4, r2]
 1010bf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1010bfa:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1010bfe:	9303      	str	r3, [sp, #12]
 1010c00:	f7fe bebb 	b.w	100f97a <_vfprintf_r+0x332>
 1010c04:	3001      	adds	r0, #1
 1010c06:	f101 0908 	add.w	r9, r1, #8
 1010c0a:	460b      	mov	r3, r1
 1010c0c:	f7ff bb41 	b.w	1010292 <_vfprintf_r+0xc4a>
 1010c10:	9b08      	ldr	r3, [sp, #32]
 1010c12:	9509      	str	r5, [sp, #36]	; 0x24
 1010c14:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1010c18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 1010c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 1010c1e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 1010c22:	930a      	str	r3, [sp, #40]	; 0x28
 1010c24:	f7fe bea9 	b.w	100f97a <_vfprintf_r+0x332>
 1010c28:	aa28      	add	r2, sp, #160	; 0xa0
 1010c2a:	9905      	ldr	r1, [sp, #20]
 1010c2c:	4650      	mov	r0, sl
 1010c2e:	f004 fa3d 	bl	10150ac <__sprint_r>
 1010c32:	2800      	cmp	r0, #0
 1010c34:	f47f aaa4 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010c38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010c3a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010c3e:	f7ff bbb2 	b.w	10103a6 <_vfprintf_r+0xd5e>
 1010c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010c44:	4619      	mov	r1, r3
 1010c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1010c48:	4419      	add	r1, r3
 1010c4a:	1b1b      	subs	r3, r3, r4
 1010c4c:	1b4c      	subs	r4, r1, r5
 1010c4e:	429c      	cmp	r4, r3
 1010c50:	bfa8      	it	ge
 1010c52:	461c      	movge	r4, r3
 1010c54:	f7ff bbe8 	b.w	1010428 <_vfprintf_r+0xde0>
 1010c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1010c5a:	9309      	str	r3, [sp, #36]	; 0x24
 1010c5c:	9b06      	ldr	r3, [sp, #24]
 1010c5e:	6812      	ldr	r2, [r2, #0]
 1010c60:	8013      	strh	r3, [r2, #0]
 1010c62:	f7fe bd4d 	b.w	100f700 <_vfprintf_r+0xb8>
 1010c66:	681c      	ldr	r4, [r3, #0]
 1010c68:	9209      	str	r2, [sp, #36]	; 0x24
 1010c6a:	9603      	str	r6, [sp, #12]
 1010c6c:	17e5      	asrs	r5, r4, #31
 1010c6e:	4622      	mov	r2, r4
 1010c70:	462b      	mov	r3, r5
 1010c72:	f7ff b807 	b.w	100fc84 <_vfprintf_r+0x63c>
 1010c76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 1010c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1010c7a:	9404      	str	r4, [sp, #16]
 1010c7c:	f7fc fd40 	bl	100d700 <strlen>
 1010c80:	9413      	str	r4, [sp, #76]	; 0x4c
 1010c82:	9411      	str	r4, [sp, #68]	; 0x44
 1010c84:	940a      	str	r4, [sp, #40]	; 0x28
 1010c86:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1010c8a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1010c8e:	e9cd 0508 	strd	r0, r5, [sp, #32]
 1010c92:	9303      	str	r3, [sp, #12]
 1010c94:	f7fe be71 	b.w	100f97a <_vfprintf_r+0x332>
 1010c98:	4650      	mov	r0, sl
 1010c9a:	aa28      	add	r2, sp, #160	; 0xa0
 1010c9c:	9905      	ldr	r1, [sp, #20]
 1010c9e:	f004 fa05 	bl	10150ac <__sprint_r>
 1010ca2:	f7fe bdff 	b.w	100f8a4 <_vfprintf_r+0x25c>
 1010ca6:	1c59      	adds	r1, r3, #1
 1010ca8:	4650      	mov	r0, sl
 1010caa:	f7fb f915 	bl	100bed8 <_malloc_r>
 1010cae:	900b      	str	r0, [sp, #44]	; 0x2c
 1010cb0:	2800      	cmp	r0, #0
 1010cb2:	f000 81a9 	beq.w	1011008 <_vfprintf_r+0x19c0>
 1010cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010cb8:	930a      	str	r3, [sp, #40]	; 0x28
 1010cba:	e45a      	b.n	1010572 <_vfprintf_r+0xf2a>
 1010cbc:	2306      	movs	r3, #6
 1010cbe:	9304      	str	r3, [sp, #16]
 1010cc0:	f446 7380 	orr.w	r3, r6, #256	; 0x100
 1010cc4:	930d      	str	r3, [sp, #52]	; 0x34
 1010cc6:	ee18 3a90 	vmov	r3, s17
 1010cca:	2b00      	cmp	r3, #0
 1010ccc:	f2c0 8234 	blt.w	1011138 <_vfprintf_r+0x1af0>
 1010cd0:	eeb0 cb48 	vmov.f64	d12, d8
 1010cd4:	2300      	movs	r3, #0
 1010cd6:	930c      	str	r3, [sp, #48]	; 0x30
 1010cd8:	2c46      	cmp	r4, #70	; 0x46
 1010cda:	f040 8178 	bne.w	1010fce <_vfprintf_r+0x1986>
 1010cde:	ab26      	add	r3, sp, #152	; 0x98
 1010ce0:	aa21      	add	r2, sp, #132	; 0x84
 1010ce2:	9301      	str	r3, [sp, #4]
 1010ce4:	2103      	movs	r1, #3
 1010ce6:	ab1f      	add	r3, sp, #124	; 0x7c
 1010ce8:	9200      	str	r2, [sp, #0]
 1010cea:	eeb0 0b4c 	vmov.f64	d0, d12
 1010cee:	9a04      	ldr	r2, [sp, #16]
 1010cf0:	4650      	mov	r0, sl
 1010cf2:	f000 fe0d 	bl	1011910 <_dtoa_r>
 1010cf6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 1010cf8:	eeb5 cb40 	vcmp.f64	d12, #0.0
 1010cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010d00:	7802      	ldrb	r2, [r0, #0]
 1010d02:	4603      	mov	r3, r0
 1010d04:	bf14      	ite	ne
 1010d06:	2301      	movne	r3, #1
 1010d08:	2300      	moveq	r3, #0
 1010d0a:	2a30      	cmp	r2, #48	; 0x30
 1010d0c:	bf14      	ite	ne
 1010d0e:	2300      	movne	r3, #0
 1010d10:	f003 0301 	andeq.w	r3, r3, #1
 1010d14:	900b      	str	r0, [sp, #44]	; 0x2c
 1010d16:	2b00      	cmp	r3, #0
 1010d18:	f040 8242 	bne.w	10111a0 <_vfprintf_r+0x1b58>
 1010d1c:	9b04      	ldr	r3, [sp, #16]
 1010d1e:	441d      	add	r5, r3
 1010d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1010d22:	eeb5 cb40 	vcmp.f64	d12, #0.0
 1010d26:	441d      	add	r5, r3
 1010d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1010d2c:	bf08      	it	eq
 1010d2e:	462b      	moveq	r3, r5
 1010d30:	f43f ae2e 	beq.w	1010990 <_vfprintf_r+0x1348>
 1010d34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1010d36:	42ab      	cmp	r3, r5
 1010d38:	f4bf ae2a 	bcs.w	1010990 <_vfprintf_r+0x1348>
 1010d3c:	2130      	movs	r1, #48	; 0x30
 1010d3e:	1c5a      	adds	r2, r3, #1
 1010d40:	9226      	str	r2, [sp, #152]	; 0x98
 1010d42:	7019      	strb	r1, [r3, #0]
 1010d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 1010d46:	429d      	cmp	r5, r3
 1010d48:	d8f9      	bhi.n	1010d3e <_vfprintf_r+0x16f6>
 1010d4a:	e621      	b.n	1010990 <_vfprintf_r+0x1348>
 1010d4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1010d4e:	3b01      	subs	r3, #1
 1010d50:	9314      	str	r3, [sp, #80]	; 0x50
 1010d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1010d54:	3b01      	subs	r3, #1
 1010d56:	9311      	str	r3, [sp, #68]	; 0x44
 1010d58:	e6d2      	b.n	1010b00 <_vfprintf_r+0x14b8>
 1010d5a:	2c10      	cmp	r4, #16
 1010d5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 1010d5e:	dd21      	ble.n	1010da4 <_vfprintf_r+0x175c>
 1010d60:	2710      	movs	r7, #16
 1010d62:	e004      	b.n	1010d6e <_vfprintf_r+0x1726>
 1010d64:	01056a44 	.word	0x01056a44
 1010d68:	3c10      	subs	r4, #16
 1010d6a:	2c10      	cmp	r4, #16
 1010d6c:	dd1a      	ble.n	1010da4 <_vfprintf_r+0x175c>
 1010d6e:	3101      	adds	r1, #1
 1010d70:	4bb7      	ldr	r3, [pc, #732]	; (1011050 <_vfprintf_r+0x1a08>)
 1010d72:	2907      	cmp	r1, #7
 1010d74:	f102 0210 	add.w	r2, r2, #16
 1010d78:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010d7c:	e9c9 3700 	strd	r3, r7, [r9]
 1010d80:	f109 0908 	add.w	r9, r9, #8
 1010d84:	ddf0      	ble.n	1010d68 <_vfprintf_r+0x1720>
 1010d86:	aa28      	add	r2, sp, #160	; 0xa0
 1010d88:	4641      	mov	r1, r8
 1010d8a:	4650      	mov	r0, sl
 1010d8c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010d90:	f004 f98c 	bl	10150ac <__sprint_r>
 1010d94:	2800      	cmp	r0, #0
 1010d96:	f47f a9f3 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010d9a:	3c10      	subs	r4, #16
 1010d9c:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
 1010da0:	2c10      	cmp	r4, #16
 1010da2:	dce4      	bgt.n	1010d6e <_vfprintf_r+0x1726>
 1010da4:	3101      	adds	r1, #1
 1010da6:	4baa      	ldr	r3, [pc, #680]	; (1011050 <_vfprintf_r+0x1a08>)
 1010da8:	2907      	cmp	r1, #7
 1010daa:	4422      	add	r2, r4
 1010dac:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
 1010db0:	e9c9 3400 	strd	r3, r4, [r9]
 1010db4:	dc7b      	bgt.n	1010eae <_vfprintf_r+0x1866>
 1010db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1010db8:	f109 0908 	add.w	r9, r9, #8
 1010dbc:	781b      	ldrb	r3, [r3, #0]
 1010dbe:	e6d0      	b.n	1010b62 <_vfprintf_r+0x151a>
 1010dc0:	aa28      	add	r2, sp, #160	; 0xa0
 1010dc2:	4641      	mov	r1, r8
 1010dc4:	4650      	mov	r0, sl
 1010dc6:	f004 f971 	bl	10150ac <__sprint_r>
 1010dca:	2800      	cmp	r0, #0
 1010dcc:	f47f a9d8 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010dd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010dd2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010dd6:	e6a4      	b.n	1010b22 <_vfprintf_r+0x14da>
 1010dd8:	aa28      	add	r2, sp, #160	; 0xa0
 1010dda:	4641      	mov	r1, r8
 1010ddc:	4650      	mov	r0, sl
 1010dde:	f004 f965 	bl	10150ac <__sprint_r>
 1010de2:	2800      	cmp	r0, #0
 1010de4:	f47f a9cc 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1010dea:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010dee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010df0:	781b      	ldrb	r3, [r3, #0]
 1010df2:	e6af      	b.n	1010b54 <_vfprintf_r+0x150c>
 1010df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1010df6:	4619      	mov	r1, r3
 1010df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010dfa:	4299      	cmp	r1, r3
 1010dfc:	f300 8097 	bgt.w	1010f2e <_vfprintf_r+0x18e6>
 1010e00:	07f5      	lsls	r5, r6, #31
 1010e02:	f140 8121 	bpl.w	1011048 <_vfprintf_r+0x1a00>
 1010e06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1010e08:	4413      	add	r3, r2
 1010e0a:	9308      	str	r3, [sp, #32]
 1010e0c:	0574      	lsls	r4, r6, #21
 1010e0e:	d503      	bpl.n	1010e18 <_vfprintf_r+0x17d0>
 1010e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010e12:	2b00      	cmp	r3, #0
 1010e14:	f300 8139 	bgt.w	101108a <_vfprintf_r+0x1a42>
 1010e18:	9b08      	ldr	r3, [sp, #32]
 1010e1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010e1e:	9303      	str	r3, [sp, #12]
 1010e20:	2367      	movs	r3, #103	; 0x67
 1010e22:	930e      	str	r3, [sp, #56]	; 0x38
 1010e24:	2300      	movs	r3, #0
 1010e26:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 1010e28:	930a      	str	r3, [sp, #40]	; 0x28
 1010e2a:	9313      	str	r3, [sp, #76]	; 0x4c
 1010e2c:	9311      	str	r3, [sp, #68]	; 0x44
 1010e2e:	e62d      	b.n	1010a8c <_vfprintf_r+0x1444>
 1010e30:	2c46      	cmp	r4, #70	; 0x46
 1010e32:	f040 81cf 	bne.w	10111d4 <_vfprintf_r+0x1b8c>
 1010e36:	9910      	ldr	r1, [sp, #64]	; 0x40
 1010e38:	f006 0301 	and.w	r3, r6, #1
 1010e3c:	9a04      	ldr	r2, [sp, #16]
 1010e3e:	2900      	cmp	r1, #0
 1010e40:	ea43 0302 	orr.w	r3, r3, r2
 1010e44:	f340 818c 	ble.w	1011160 <_vfprintf_r+0x1b18>
 1010e48:	2b00      	cmp	r3, #0
 1010e4a:	f040 8149 	bne.w	10110e0 <_vfprintf_r+0x1a98>
 1010e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010e50:	9308      	str	r3, [sp, #32]
 1010e52:	2366      	movs	r3, #102	; 0x66
 1010e54:	930e      	str	r3, [sp, #56]	; 0x38
 1010e56:	0572      	lsls	r2, r6, #21
 1010e58:	f100 8119 	bmi.w	101108e <_vfprintf_r+0x1a46>
 1010e5c:	9b08      	ldr	r3, [sp, #32]
 1010e5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010e62:	9303      	str	r3, [sp, #12]
 1010e64:	e7de      	b.n	1010e24 <_vfprintf_r+0x17dc>
 1010e66:	212d      	movs	r1, #45	; 0x2d
 1010e68:	2300      	movs	r3, #0
 1010e6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 1010e6e:	9304      	str	r3, [sp, #16]
 1010e70:	f7fe bd84 	b.w	100f97c <_vfprintf_r+0x334>
 1010e74:	aa28      	add	r2, sp, #160	; 0xa0
 1010e76:	9905      	ldr	r1, [sp, #20]
 1010e78:	4650      	mov	r0, sl
 1010e7a:	f004 f917 	bl	10150ac <__sprint_r>
 1010e7e:	2800      	cmp	r0, #0
 1010e80:	f47f a97e 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010e84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010e86:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010e8a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1010e8c:	f7ff b994 	b.w	10101b8 <_vfprintf_r+0xb70>
 1010e90:	aa28      	add	r2, sp, #160	; 0xa0
 1010e92:	9905      	ldr	r1, [sp, #20]
 1010e94:	4650      	mov	r0, sl
 1010e96:	f004 f909 	bl	10150ac <__sprint_r>
 1010e9a:	2800      	cmp	r0, #0
 1010e9c:	f47f a970 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010ea0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 1010ea2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010ea6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1010eaa:	f7ff b99a 	b.w	10101e2 <_vfprintf_r+0xb9a>
 1010eae:	aa28      	add	r2, sp, #160	; 0xa0
 1010eb0:	4641      	mov	r1, r8
 1010eb2:	4650      	mov	r0, sl
 1010eb4:	f004 f8fa 	bl	10150ac <__sprint_r>
 1010eb8:	2800      	cmp	r0, #0
 1010eba:	f47f a961 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 1010ec0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010ec4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010ec6:	781b      	ldrb	r3, [r3, #0]
 1010ec8:	e64b      	b.n	1010b62 <_vfprintf_r+0x151a>
 1010eca:	07f0      	lsls	r0, r6, #31
 1010ecc:	f57e adad 	bpl.w	100fa2a <_vfprintf_r+0x3e2>
 1010ed0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1010ed2:	9915      	ldr	r1, [sp, #84]	; 0x54
 1010ed4:	3301      	adds	r3, #1
 1010ed6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 1010ed8:	2b07      	cmp	r3, #7
 1010eda:	440a      	add	r2, r1
 1010edc:	f8c9 1004 	str.w	r1, [r9, #4]
 1010ee0:	f8c9 0000 	str.w	r0, [r9]
 1010ee4:	922a      	str	r2, [sp, #168]	; 0xa8
 1010ee6:	9329      	str	r3, [sp, #164]	; 0xa4
 1010ee8:	dcd2      	bgt.n	1010e90 <_vfprintf_r+0x1848>
 1010eea:	f109 0908 	add.w	r9, r9, #8
 1010eee:	f7ff b97b 	b.w	10101e8 <_vfprintf_r+0xba0>
 1010ef2:	aa28      	add	r2, sp, #160	; 0xa0
 1010ef4:	9905      	ldr	r1, [sp, #20]
 1010ef6:	4650      	mov	r0, sl
 1010ef8:	f004 f8d8 	bl	10150ac <__sprint_r>
 1010efc:	2800      	cmp	r0, #0
 1010efe:	f47f a93f 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010f02:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 1010f04:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010f08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010f0a:	f7ff ba73 	b.w	10103f4 <_vfprintf_r+0xdac>
 1010f0e:	aa28      	add	r2, sp, #160	; 0xa0
 1010f10:	9905      	ldr	r1, [sp, #20]
 1010f12:	4650      	mov	r0, sl
 1010f14:	f004 f8ca 	bl	10150ac <__sprint_r>
 1010f18:	2800      	cmp	r0, #0
 1010f1a:	f47f a931 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 1010f20:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010f24:	9912      	ldr	r1, [sp, #72]	; 0x48
 1010f26:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 1010f28:	1acb      	subs	r3, r1, r3
 1010f2a:	f7ff ba7d 	b.w	1010428 <_vfprintf_r+0xde0>
 1010f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 1010f30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1010f32:	189a      	adds	r2, r3, r2
 1010f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1010f36:	9208      	str	r2, [sp, #32]
 1010f38:	2b00      	cmp	r3, #0
 1010f3a:	bfc4      	itt	gt
 1010f3c:	2367      	movgt	r3, #103	; 0x67
 1010f3e:	930e      	strgt	r3, [sp, #56]	; 0x38
 1010f40:	dc89      	bgt.n	1010e56 <_vfprintf_r+0x180e>
 1010f42:	f1c3 0301 	rsb	r3, r3, #1
 1010f46:	2167      	movs	r1, #103	; 0x67
 1010f48:	441a      	add	r2, r3
 1010f4a:	910e      	str	r1, [sp, #56]	; 0x38
 1010f4c:	9208      	str	r2, [sp, #32]
 1010f4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1010f52:	9303      	str	r3, [sp, #12]
 1010f54:	e766      	b.n	1010e24 <_vfprintf_r+0x17dc>
 1010f56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 1010f58:	991a      	ldr	r1, [sp, #104]	; 0x68
 1010f5a:	ebaa 0a02 	sub.w	sl, sl, r2
 1010f5e:	4650      	mov	r0, sl
 1010f60:	f7fc fcbc 	bl	100d8dc <strncpy>
 1010f64:	f898 3001 	ldrb.w	r3, [r8, #1]
 1010f68:	b10b      	cbz	r3, 1010f6e <_vfprintf_r+0x1926>
 1010f6a:	f108 0801 	add.w	r8, r8, #1
 1010f6e:	4620      	mov	r0, r4
 1010f70:	4629      	mov	r1, r5
 1010f72:	220a      	movs	r2, #10
 1010f74:	2300      	movs	r3, #0
 1010f76:	f7fa f8f7 	bl	100b168 <__aeabi_uldivmod>
 1010f7a:	f04f 0900 	mov.w	r9, #0
 1010f7e:	e482      	b.n	1010886 <_vfprintf_r+0x123e>
 1010f80:	424c      	negs	r4, r1
 1010f82:	3110      	adds	r1, #16
 1010f84:	da48      	bge.n	1011018 <_vfprintf_r+0x19d0>
 1010f86:	2510      	movs	r5, #16
 1010f88:	e002      	b.n	1010f90 <_vfprintf_r+0x1948>
 1010f8a:	3c10      	subs	r4, #16
 1010f8c:	2c10      	cmp	r4, #16
 1010f8e:	dd43      	ble.n	1011018 <_vfprintf_r+0x19d0>
 1010f90:	3301      	adds	r3, #1
 1010f92:	492f      	ldr	r1, [pc, #188]	; (1011050 <_vfprintf_r+0x1a08>)
 1010f94:	2b07      	cmp	r3, #7
 1010f96:	f102 0210 	add.w	r2, r2, #16
 1010f9a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1010f9e:	e9c9 1500 	strd	r1, r5, [r9]
 1010fa2:	f109 0908 	add.w	r9, r9, #8
 1010fa6:	ddf0      	ble.n	1010f8a <_vfprintf_r+0x1942>
 1010fa8:	aa28      	add	r2, sp, #160	; 0xa0
 1010faa:	9905      	ldr	r1, [sp, #20]
 1010fac:	4650      	mov	r0, sl
 1010fae:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1010fb2:	f004 f87b 	bl	10150ac <__sprint_r>
 1010fb6:	2800      	cmp	r0, #0
 1010fb8:	f47f a8e2 	bne.w	1010180 <_vfprintf_r+0xb38>
 1010fbc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 1010fc0:	e7e3      	b.n	1010f8a <_vfprintf_r+0x1942>
 1010fc2:	2300      	movs	r3, #0
 1010fc4:	eeb0 0b48 	vmov.f64	d0, d8
 1010fc8:	930c      	str	r3, [sp, #48]	; 0x30
 1010fca:	f7ff badb 	b.w	1010584 <_vfprintf_r+0xf3c>
 1010fce:	2c45      	cmp	r4, #69	; 0x45
 1010fd0:	f040 80fd 	bne.w	10111ce <_vfprintf_r+0x1b86>
 1010fd4:	9b04      	ldr	r3, [sp, #16]
 1010fd6:	aa26      	add	r2, sp, #152	; 0x98
 1010fd8:	2102      	movs	r1, #2
 1010fda:	9201      	str	r2, [sp, #4]
 1010fdc:	1c5d      	adds	r5, r3, #1
 1010fde:	eeb0 0b4c 	vmov.f64	d0, d12
 1010fe2:	ab21      	add	r3, sp, #132	; 0x84
 1010fe4:	4650      	mov	r0, sl
 1010fe6:	9300      	str	r3, [sp, #0]
 1010fe8:	462a      	mov	r2, r5
 1010fea:	ab1f      	add	r3, sp, #124	; 0x7c
 1010fec:	f000 fc90 	bl	1011910 <_dtoa_r>
 1010ff0:	900b      	str	r0, [sp, #44]	; 0x2c
 1010ff2:	e695      	b.n	1010d20 <_vfprintf_r+0x16d8>
 1010ff4:	f04f 33ff 	mov.w	r3, #4294967295
 1010ff8:	9306      	str	r3, [sp, #24]
 1010ffa:	f7fe bc59 	b.w	100f8b0 <_vfprintf_r+0x268>
 1010ffe:	2300      	movs	r3, #0
 1011000:	930a      	str	r3, [sp, #40]	; 0x28
 1011002:	ab3b      	add	r3, sp, #236	; 0xec
 1011004:	930b      	str	r3, [sp, #44]	; 0x2c
 1011006:	e5db      	b.n	1010bc0 <_vfprintf_r+0x1578>
 1011008:	9a05      	ldr	r2, [sp, #20]
 101100a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 101100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1011012:	8193      	strh	r3, [r2, #12]
 1011014:	f7fe bc49 	b.w	100f8aa <_vfprintf_r+0x262>
 1011018:	3301      	adds	r3, #1
 101101a:	490d      	ldr	r1, [pc, #52]	; (1011050 <_vfprintf_r+0x1a08>)
 101101c:	2b07      	cmp	r3, #7
 101101e:	4422      	add	r2, r4
 1011020:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 1011024:	e9c9 1400 	strd	r1, r4, [r9]
 1011028:	f77f af5f 	ble.w	1010eea <_vfprintf_r+0x18a2>
 101102c:	aa28      	add	r2, sp, #160	; 0xa0
 101102e:	9905      	ldr	r1, [sp, #20]
 1011030:	4650      	mov	r0, sl
 1011032:	f004 f83b 	bl	10150ac <__sprint_r>
 1011036:	2800      	cmp	r0, #0
 1011038:	f47f a8a2 	bne.w	1010180 <_vfprintf_r+0xb38>
 101103c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 101103e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
 1011042:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 1011044:	f7ff b8d0 	b.w	10101e8 <_vfprintf_r+0xba0>
 1011048:	9b10      	ldr	r3, [sp, #64]	; 0x40
 101104a:	9308      	str	r3, [sp, #32]
 101104c:	e6de      	b.n	1010e0c <_vfprintf_r+0x17c4>
 101104e:	bf00      	nop
 1011050:	01056a44 	.word	0x01056a44
 1011054:	9526      	str	r5, [sp, #152]	; 0x98
 1011056:	4619      	mov	r1, r3
 1011058:	7bc5      	ldrb	r5, [r0, #15]
 101105a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 101105e:	4295      	cmp	r5, r2
 1011060:	d10a      	bne.n	1011078 <_vfprintf_r+0x1a30>
 1011062:	f04f 0c30 	mov.w	ip, #48	; 0x30
 1011066:	f801 cc01 	strb.w	ip, [r1, #-1]
 101106a:	9926      	ldr	r1, [sp, #152]	; 0x98
 101106c:	1e4a      	subs	r2, r1, #1
 101106e:	9226      	str	r2, [sp, #152]	; 0x98
 1011070:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 1011074:	4295      	cmp	r5, r2
 1011076:	d0f6      	beq.n	1011066 <_vfprintf_r+0x1a1e>
 1011078:	2a39      	cmp	r2, #57	; 0x39
 101107a:	bf16      	itet	ne
 101107c:	3201      	addne	r2, #1
 101107e:	7a82      	ldrbeq	r2, [r0, #10]
 1011080:	b2d2      	uxtbne	r2, r2
 1011082:	f801 2c01 	strb.w	r2, [r1, #-1]
 1011086:	f7ff bace 	b.w	1010626 <_vfprintf_r+0xfde>
 101108a:	2367      	movs	r3, #103	; 0x67
 101108c:	930e      	str	r3, [sp, #56]	; 0x38
 101108e:	9814      	ldr	r0, [sp, #80]	; 0x50
 1011090:	2200      	movs	r2, #0
 1011092:	9213      	str	r2, [sp, #76]	; 0x4c
 1011094:	9211      	str	r2, [sp, #68]	; 0x44
 1011096:	7803      	ldrb	r3, [r0, #0]
 1011098:	9a10      	ldr	r2, [sp, #64]	; 0x40
 101109a:	2bff      	cmp	r3, #255	; 0xff
 101109c:	d00b      	beq.n	10110b6 <_vfprintf_r+0x1a6e>
 101109e:	4293      	cmp	r3, r2
 10110a0:	da09      	bge.n	10110b6 <_vfprintf_r+0x1a6e>
 10110a2:	7841      	ldrb	r1, [r0, #1]
 10110a4:	1ad2      	subs	r2, r2, r3
 10110a6:	b1b9      	cbz	r1, 10110d8 <_vfprintf_r+0x1a90>
 10110a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10110aa:	3001      	adds	r0, #1
 10110ac:	3301      	adds	r3, #1
 10110ae:	9311      	str	r3, [sp, #68]	; 0x44
 10110b0:	460b      	mov	r3, r1
 10110b2:	2bff      	cmp	r3, #255	; 0xff
 10110b4:	d1f3      	bne.n	101109e <_vfprintf_r+0x1a56>
 10110b6:	9210      	str	r2, [sp, #64]	; 0x40
 10110b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10110ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 10110bc:	9908      	ldr	r1, [sp, #32]
 10110be:	4413      	add	r3, r2
 10110c0:	2200      	movs	r2, #0
 10110c2:	920a      	str	r2, [sp, #40]	; 0x28
 10110c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 10110c6:	9014      	str	r0, [sp, #80]	; 0x50
 10110c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 10110ca:	fb02 1303 	mla	r3, r2, r3, r1
 10110ce:	9308      	str	r3, [sp, #32]
 10110d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10110d4:	9303      	str	r3, [sp, #12]
 10110d6:	e4d9      	b.n	1010a8c <_vfprintf_r+0x1444>
 10110d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 10110da:	3101      	adds	r1, #1
 10110dc:	9113      	str	r1, [sp, #76]	; 0x4c
 10110de:	e7dc      	b.n	101109a <_vfprintf_r+0x1a52>
 10110e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 10110e2:	18cb      	adds	r3, r1, r3
 10110e4:	2166      	movs	r1, #102	; 0x66
 10110e6:	441a      	add	r2, r3
 10110e8:	910e      	str	r1, [sp, #56]	; 0x38
 10110ea:	9208      	str	r2, [sp, #32]
 10110ec:	e6b3      	b.n	1010e56 <_vfprintf_r+0x180e>
 10110ee:	ee18 3a90 	vmov	r3, s17
 10110f2:	f249 7490 	movw	r4, #38800	; 0x9790
 10110f6:	f2c0 1405 	movt	r4, #261	; 0x105
 10110fa:	2b00      	cmp	r3, #0
 10110fc:	f249 738c 	movw	r3, #38796	; 0x978c
 1011100:	f2c0 1305 	movt	r3, #261	; 0x105
 1011104:	bfb6      	itet	lt
 1011106:	212d      	movlt	r1, #45	; 0x2d
 1011108:	f89d 1077 	ldrbge.w	r1, [sp, #119]	; 0x77
 101110c:	f88d 1077 	strblt.w	r1, [sp, #119]	; 0x77
 1011110:	f7fe bd98 	b.w	100fc44 <_vfprintf_r+0x5fc>
 1011114:	2c41      	cmp	r4, #65	; 0x41
 1011116:	a922      	add	r1, sp, #136	; 0x88
 1011118:	bf08      	it	eq
 101111a:	f10d 038a 	addeq.w	r3, sp, #138	; 0x8a
 101111e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1011122:	bf1e      	ittt	ne
 1011124:	2330      	movne	r3, #48	; 0x30
 1011126:	f88d 308a 	strbne.w	r3, [sp, #138]	; 0x8a
 101112a:	f10d 038b 	addne.w	r3, sp, #139	; 0x8b
 101112e:	f803 2b01 	strb.w	r2, [r3], #1
 1011132:	1a5b      	subs	r3, r3, r1
 1011134:	9318      	str	r3, [sp, #96]	; 0x60
 1011136:	e492      	b.n	1010a5e <_vfprintf_r+0x1416>
 1011138:	232d      	movs	r3, #45	; 0x2d
 101113a:	eeb1 cb48 	vneg.f64	d12, d8
 101113e:	930c      	str	r3, [sp, #48]	; 0x30
 1011140:	e5ca      	b.n	1010cd8 <_vfprintf_r+0x1690>
 1011142:	9b04      	ldr	r3, [sp, #16]
 1011144:	9509      	str	r5, [sp, #36]	; 0x24
 1011146:	9004      	str	r0, [sp, #16]
 1011148:	9303      	str	r3, [sp, #12]
 101114a:	9308      	str	r3, [sp, #32]
 101114c:	9013      	str	r0, [sp, #76]	; 0x4c
 101114e:	9011      	str	r0, [sp, #68]	; 0x44
 1011150:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
 1011154:	f7fe bc11 	b.w	100f97a <_vfprintf_r+0x332>
 1011158:	07f3      	lsls	r3, r6, #31
 101115a:	f57f ac8b 	bpl.w	1010a74 <_vfprintf_r+0x142c>
 101115e:	e485      	b.n	1010a6c <_vfprintf_r+0x1424>
 1011160:	b92b      	cbnz	r3, 101116e <_vfprintf_r+0x1b26>
 1011162:	2301      	movs	r3, #1
 1011164:	2266      	movs	r2, #102	; 0x66
 1011166:	9303      	str	r3, [sp, #12]
 1011168:	920e      	str	r2, [sp, #56]	; 0x38
 101116a:	9308      	str	r3, [sp, #32]
 101116c:	e65a      	b.n	1010e24 <_vfprintf_r+0x17dc>
 101116e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 1011170:	2266      	movs	r2, #102	; 0x66
 1011172:	920e      	str	r2, [sp, #56]	; 0x38
 1011174:	9a04      	ldr	r2, [sp, #16]
 1011176:	3301      	adds	r3, #1
 1011178:	441a      	add	r2, r3
 101117a:	9208      	str	r2, [sp, #32]
 101117c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 1011180:	9303      	str	r3, [sp, #12]
 1011182:	e64f      	b.n	1010e24 <_vfprintf_r+0x17dc>
 1011184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1011186:	787b      	ldrb	r3, [r7, #1]
 1011188:	460f      	mov	r7, r1
 101118a:	f852 0b04 	ldr.w	r0, [r2], #4
 101118e:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1011192:	9209      	str	r2, [sp, #36]	; 0x24
 1011194:	9104      	str	r1, [sp, #16]
 1011196:	f7fe bae0 	b.w	100f75a <_vfprintf_r+0x112>
 101119a:	4649      	mov	r1, r9
 101119c:	f7ff ba8c 	b.w	10106b8 <_vfprintf_r+0x1070>
 10111a0:	9b04      	ldr	r3, [sp, #16]
 10111a2:	f1c3 0501 	rsb	r5, r3, #1
 10111a6:	951f      	str	r5, [sp, #124]	; 0x7c
 10111a8:	e5b8      	b.n	1010d1c <_vfprintf_r+0x16d4>
 10111aa:	9a05      	ldr	r2, [sp, #20]
 10111ac:	8993      	ldrh	r3, [r2, #12]
 10111ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10111b2:	8193      	strh	r3, [r2, #12]
 10111b4:	f7fe bfe4 	b.w	1010180 <_vfprintf_r+0xb38>
 10111b8:	2302      	movs	r3, #2
 10111ba:	9318      	str	r3, [sp, #96]	; 0x60
 10111bc:	e44f      	b.n	1010a5e <_vfprintf_r+0x1416>
 10111be:	9603      	str	r6, [sp, #12]
 10111c0:	f7fe bdb4 	b.w	100fd2c <_vfprintf_r+0x6e4>
 10111c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 10111c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 10111c8:	440b      	add	r3, r1
 10111ca:	9304      	str	r3, [sp, #16]
 10111cc:	e4d3      	b.n	1010b76 <_vfprintf_r+0x152e>
 10111ce:	9d04      	ldr	r5, [sp, #16]
 10111d0:	f7ff bbca 	b.w	1010968 <_vfprintf_r+0x1320>
 10111d4:	2300      	movs	r3, #0
 10111d6:	930a      	str	r3, [sp, #40]	; 0x28
 10111d8:	f7ff bbf1 	b.w	10109be <_vfprintf_r+0x1376>
 10111dc:	4633      	mov	r3, r6
 10111de:	f7fe bde2 	b.w	100fda6 <_vfprintf_r+0x75e>
 10111e2:	9603      	str	r6, [sp, #12]
 10111e4:	f7fe bdf1 	b.w	100fdca <_vfprintf_r+0x782>

010111e8 <vfprintf>:
 10111e8:	b410      	push	{r4}
 10111ea:	f649 4430 	movw	r4, #39984	; 0x9c30
 10111ee:	f2c0 1405 	movt	r4, #261	; 0x105
 10111f2:	4613      	mov	r3, r2
 10111f4:	460a      	mov	r2, r1
 10111f6:	4601      	mov	r1, r0
 10111f8:	6820      	ldr	r0, [r4, #0]
 10111fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 10111fe:	f7fe ba23 	b.w	100f648 <_vfprintf_r>
 1011202:	bf00      	nop

01011204 <__sbprintf>:
 1011204:	b5f0      	push	{r4, r5, r6, r7, lr}
 1011206:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 101120a:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 101120c:	460c      	mov	r4, r1
 101120e:	898d      	ldrh	r5, [r1, #12]
 1011210:	2700      	movs	r7, #0
 1011212:	9706      	str	r7, [sp, #24]
 1011214:	4669      	mov	r1, sp
 1011216:	89e7      	ldrh	r7, [r4, #14]
 1011218:	f025 0502 	bic.w	r5, r5, #2
 101121c:	9619      	str	r6, [sp, #100]	; 0x64
 101121e:	f8ad 500c 	strh.w	r5, [sp, #12]
 1011222:	69e6      	ldr	r6, [r4, #28]
 1011224:	6a65      	ldr	r5, [r4, #36]	; 0x24
 1011226:	f8ad 700e 	strh.w	r7, [sp, #14]
 101122a:	9607      	str	r6, [sp, #28]
 101122c:	ae1a      	add	r6, sp, #104	; 0x68
 101122e:	9509      	str	r5, [sp, #36]	; 0x24
 1011230:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1011234:	9600      	str	r6, [sp, #0]
 1011236:	9604      	str	r6, [sp, #16]
 1011238:	4606      	mov	r6, r0
 101123a:	9502      	str	r5, [sp, #8]
 101123c:	9505      	str	r5, [sp, #20]
 101123e:	f7fe fa03 	bl	100f648 <_vfprintf_r>
 1011242:	1e05      	subs	r5, r0, #0
 1011244:	db07      	blt.n	1011256 <__sbprintf+0x52>
 1011246:	4630      	mov	r0, r6
 1011248:	4669      	mov	r1, sp
 101124a:	f001 fa8d 	bl	1012768 <_fflush_r>
 101124e:	2800      	cmp	r0, #0
 1011250:	bf18      	it	ne
 1011252:	f04f 35ff 	movne.w	r5, #4294967295
 1011256:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 101125a:	4628      	mov	r0, r5
 101125c:	065b      	lsls	r3, r3, #25
 101125e:	bf42      	ittt	mi
 1011260:	89a3      	ldrhmi	r3, [r4, #12]
 1011262:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 1011266:	81a3      	strhmi	r3, [r4, #12]
 1011268:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 101126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101126e:	bf00      	nop

01011270 <_vsnprintf_r>:
 1011270:	b530      	push	{r4, r5, lr}
 1011272:	1e14      	subs	r4, r2, #0
 1011274:	4605      	mov	r5, r0
 1011276:	b09b      	sub	sp, #108	; 0x6c
 1011278:	bfbe      	ittt	lt
 101127a:	238b      	movlt	r3, #139	; 0x8b
 101127c:	f04f 30ff 	movlt.w	r0, #4294967295
 1011280:	602b      	strlt	r3, [r5, #0]
 1011282:	db15      	blt.n	10112b0 <_vsnprintf_r+0x40>
 1011284:	461a      	mov	r2, r3
 1011286:	9100      	str	r1, [sp, #0]
 1011288:	f44f 7302 	mov.w	r3, #520	; 0x208
 101128c:	9104      	str	r1, [sp, #16]
 101128e:	f8ad 300c 	strh.w	r3, [sp, #12]
 1011292:	4669      	mov	r1, sp
 1011294:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 1011296:	d10d      	bne.n	10112b4 <_vsnprintf_r+0x44>
 1011298:	9402      	str	r4, [sp, #8]
 101129a:	9405      	str	r4, [sp, #20]
 101129c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10112a0:	f8ad 400e 	strh.w	r4, [sp, #14]
 10112a4:	f7fc fc28 	bl	100daf8 <_svfprintf_r>
 10112a8:	1c43      	adds	r3, r0, #1
 10112aa:	da01      	bge.n	10112b0 <_vsnprintf_r+0x40>
 10112ac:	238b      	movs	r3, #139	; 0x8b
 10112ae:	602b      	str	r3, [r5, #0]
 10112b0:	b01b      	add	sp, #108	; 0x6c
 10112b2:	bd30      	pop	{r4, r5, pc}
 10112b4:	3c01      	subs	r4, #1
 10112b6:	9402      	str	r4, [sp, #8]
 10112b8:	9405      	str	r4, [sp, #20]
 10112ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10112be:	f8ad 400e 	strh.w	r4, [sp, #14]
 10112c2:	f7fc fc19 	bl	100daf8 <_svfprintf_r>
 10112c6:	1c42      	adds	r2, r0, #1
 10112c8:	f04f 0200 	mov.w	r2, #0
 10112cc:	bfbc      	itt	lt
 10112ce:	238b      	movlt	r3, #139	; 0x8b
 10112d0:	602b      	strlt	r3, [r5, #0]
 10112d2:	9b00      	ldr	r3, [sp, #0]
 10112d4:	701a      	strb	r2, [r3, #0]
 10112d6:	b01b      	add	sp, #108	; 0x6c
 10112d8:	bd30      	pop	{r4, r5, pc}
 10112da:	bf00      	nop

010112dc <vsnprintf>:
 10112dc:	b510      	push	{r4, lr}
 10112de:	f649 4430 	movw	r4, #39984	; 0x9c30
 10112e2:	b082      	sub	sp, #8
 10112e4:	f2c0 1405 	movt	r4, #261	; 0x105
 10112e8:	9300      	str	r3, [sp, #0]
 10112ea:	4613      	mov	r3, r2
 10112ec:	460a      	mov	r2, r1
 10112ee:	4601      	mov	r1, r0
 10112f0:	6820      	ldr	r0, [r4, #0]
 10112f2:	f7ff ffbd 	bl	1011270 <_vsnprintf_r>
 10112f6:	b002      	add	sp, #8
 10112f8:	bd10      	pop	{r4, pc}
 10112fa:	bf00      	nop

010112fc <_wcrtomb_r>:
 10112fc:	b570      	push	{r4, r5, r6, lr}
 10112fe:	4605      	mov	r5, r0
 1011300:	b084      	sub	sp, #16
 1011302:	f500 748a 	add.w	r4, r0, #276	; 0x114
 1011306:	b103      	cbz	r3, 101130a <_wcrtomb_r+0xe>
 1011308:	461c      	mov	r4, r3
 101130a:	f649 4330 	movw	r3, #39984	; 0x9c30
 101130e:	f2c0 1305 	movt	r3, #261	; 0x105
 1011312:	681b      	ldr	r3, [r3, #0]
 1011314:	6b58      	ldr	r0, [r3, #52]	; 0x34
 1011316:	f24a 0360 	movw	r3, #41056	; 0xa060
 101131a:	f2c0 1305 	movt	r3, #261	; 0x105
 101131e:	2800      	cmp	r0, #0
 1011320:	bf08      	it	eq
 1011322:	4618      	moveq	r0, r3
 1011324:	b161      	cbz	r1, 1011340 <_wcrtomb_r+0x44>
 1011326:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 101132a:	4623      	mov	r3, r4
 101132c:	4628      	mov	r0, r5
 101132e:	47b0      	blx	r6
 1011330:	1c43      	adds	r3, r0, #1
 1011332:	bf01      	itttt	eq
 1011334:	2200      	moveq	r2, #0
 1011336:	238a      	moveq	r3, #138	; 0x8a
 1011338:	6022      	streq	r2, [r4, #0]
 101133a:	602b      	streq	r3, [r5, #0]
 101133c:	b004      	add	sp, #16
 101133e:	bd70      	pop	{r4, r5, r6, pc}
 1011340:	460a      	mov	r2, r1
 1011342:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 1011346:	4623      	mov	r3, r4
 1011348:	a901      	add	r1, sp, #4
 101134a:	4628      	mov	r0, r5
 101134c:	47b0      	blx	r6
 101134e:	e7ef      	b.n	1011330 <_wcrtomb_r+0x34>

01011350 <wcrtomb>:
 1011350:	f649 4330 	movw	r3, #39984	; 0x9c30
 1011354:	f2c0 1305 	movt	r3, #261	; 0x105
 1011358:	b570      	push	{r4, r5, r6, lr}
 101135a:	b084      	sub	sp, #16
 101135c:	681d      	ldr	r5, [r3, #0]
 101135e:	f505 768a 	add.w	r6, r5, #276	; 0x114
 1011362:	b102      	cbz	r2, 1011366 <wcrtomb+0x16>
 1011364:	4616      	mov	r6, r2
 1011366:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 1011368:	f24a 0360 	movw	r3, #41056	; 0xa060
 101136c:	f2c0 1305 	movt	r3, #261	; 0x105
 1011370:	2c00      	cmp	r4, #0
 1011372:	bf08      	it	eq
 1011374:	461c      	moveq	r4, r3
 1011376:	b170      	cbz	r0, 1011396 <wcrtomb+0x46>
 1011378:	460a      	mov	r2, r1
 101137a:	4633      	mov	r3, r6
 101137c:	4601      	mov	r1, r0
 101137e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1011382:	4628      	mov	r0, r5
 1011384:	47a0      	blx	r4
 1011386:	1c43      	adds	r3, r0, #1
 1011388:	bf01      	itttt	eq
 101138a:	2200      	moveq	r2, #0
 101138c:	238a      	moveq	r3, #138	; 0x8a
 101138e:	6032      	streq	r2, [r6, #0]
 1011390:	602b      	streq	r3, [r5, #0]
 1011392:	b004      	add	sp, #16
 1011394:	bd70      	pop	{r4, r5, r6, pc}
 1011396:	4602      	mov	r2, r0
 1011398:	4633      	mov	r3, r6
 101139a:	a901      	add	r1, sp, #4
 101139c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 10113a0:	4628      	mov	r0, r5
 10113a2:	47a0      	blx	r4
 10113a4:	e7ef      	b.n	1011386 <wcrtomb+0x36>
 10113a6:	bf00      	nop

010113a8 <_wcsrtombs_r>:
 10113a8:	b510      	push	{r4, lr}
 10113aa:	b082      	sub	sp, #8
 10113ac:	9c04      	ldr	r4, [sp, #16]
 10113ae:	9300      	str	r3, [sp, #0]
 10113b0:	f04f 33ff 	mov.w	r3, #4294967295
 10113b4:	9401      	str	r4, [sp, #4]
 10113b6:	f004 feff 	bl	10161b8 <_wcsnrtombs_r>
 10113ba:	b002      	add	sp, #8
 10113bc:	bd10      	pop	{r4, pc}
 10113be:	bf00      	nop

010113c0 <wcsrtombs>:
 10113c0:	b510      	push	{r4, lr}
 10113c2:	f649 4430 	movw	r4, #39984	; 0x9c30
 10113c6:	b082      	sub	sp, #8
 10113c8:	f2c0 1405 	movt	r4, #261	; 0x105
 10113cc:	9200      	str	r2, [sp, #0]
 10113ce:	460a      	mov	r2, r1
 10113d0:	9301      	str	r3, [sp, #4]
 10113d2:	4601      	mov	r1, r0
 10113d4:	f04f 33ff 	mov.w	r3, #4294967295
 10113d8:	6820      	ldr	r0, [r4, #0]
 10113da:	f004 feed 	bl	10161b8 <_wcsnrtombs_r>
 10113de:	b002      	add	sp, #8
 10113e0:	bd10      	pop	{r4, pc}
 10113e2:	bf00      	nop

010113e4 <_wctomb_r>:
 10113e4:	b430      	push	{r4, r5}
 10113e6:	f649 4430 	movw	r4, #39984	; 0x9c30
 10113ea:	f2c0 1405 	movt	r4, #261	; 0x105
 10113ee:	f24a 0560 	movw	r5, #41056	; 0xa060
 10113f2:	f2c0 1505 	movt	r5, #261	; 0x105
 10113f6:	6824      	ldr	r4, [r4, #0]
 10113f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 10113fa:	2c00      	cmp	r4, #0
 10113fc:	bf08      	it	eq
 10113fe:	462c      	moveq	r4, r5
 1011400:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1011404:	46a4      	mov	ip, r4
 1011406:	bc30      	pop	{r4, r5}
 1011408:	4760      	bx	ip
 101140a:	bf00      	nop

0101140c <__ascii_wctomb>:
 101140c:	b141      	cbz	r1, 1011420 <__ascii_wctomb+0x14>
 101140e:	2aff      	cmp	r2, #255	; 0xff
 1011410:	bf95      	itete	ls
 1011412:	700a      	strbls	r2, [r1, #0]
 1011414:	f04f 31ff 	movhi.w	r1, #4294967295
 1011418:	2101      	movls	r1, #1
 101141a:	238a      	movhi	r3, #138	; 0x8a
 101141c:	bf88      	it	hi
 101141e:	6003      	strhi	r3, [r0, #0]
 1011420:	4608      	mov	r0, r1
 1011422:	4770      	bx	lr

01011424 <__utf8_wctomb>:
 1011424:	b3c1      	cbz	r1, 1011498 <__utf8_wctomb+0x74>
 1011426:	2a7f      	cmp	r2, #127	; 0x7f
 1011428:	bf9c      	itt	ls
 101142a:	700a      	strbls	r2, [r1, #0]
 101142c:	2301      	movls	r3, #1
 101142e:	d931      	bls.n	1011494 <__utf8_wctomb+0x70>
 1011430:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 1011434:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 1011438:	d322      	bcc.n	1011480 <__utf8_wctomb+0x5c>
 101143a:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 101143e:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 1011442:	d32c      	bcc.n	101149e <__utf8_wctomb+0x7a>
 1011444:	f5a2 3380 	sub.w	r3, r2, #65536	; 0x10000
 1011448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 101144c:	d237      	bcs.n	10114be <__utf8_wctomb+0x9a>
 101144e:	f3c2 1385 	ubfx	r3, r2, #6, #6
 1011452:	f3c2 3005 	ubfx	r0, r2, #12, #6
 1011456:	b410      	push	{r4}
 1011458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 101145c:	0c94      	lsrs	r4, r2, #18
 101145e:	708b      	strb	r3, [r1, #2]
 1011460:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1011464:	2304      	movs	r3, #4
 1011466:	f064 040f 	orn	r4, r4, #15
 101146a:	f060 007f 	orn	r0, r0, #127	; 0x7f
 101146e:	700c      	strb	r4, [r1, #0]
 1011470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1011474:	7048      	strb	r0, [r1, #1]
 1011476:	4618      	mov	r0, r3
 1011478:	70ca      	strb	r2, [r1, #3]
 101147a:	f85d 4b04 	ldr.w	r4, [sp], #4
 101147e:	4770      	bx	lr
 1011480:	0993      	lsrs	r3, r2, #6
 1011482:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 1011486:	f063 033f 	orn	r3, r3, #63	; 0x3f
 101148a:	700b      	strb	r3, [r1, #0]
 101148c:	2302      	movs	r3, #2
 101148e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1011492:	704a      	strb	r2, [r1, #1]
 1011494:	4618      	mov	r0, r3
 1011496:	4770      	bx	lr
 1011498:	460b      	mov	r3, r1
 101149a:	4618      	mov	r0, r3
 101149c:	4770      	bx	lr
 101149e:	0b10      	lsrs	r0, r2, #12
 10114a0:	f3c2 1385 	ubfx	r3, r2, #6, #6
 10114a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 10114a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10114ac:	f060 001f 	orn	r0, r0, #31
 10114b0:	704b      	strb	r3, [r1, #1]
 10114b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 10114b6:	7008      	strb	r0, [r1, #0]
 10114b8:	2303      	movs	r3, #3
 10114ba:	708a      	strb	r2, [r1, #2]
 10114bc:	e7ea      	b.n	1011494 <__utf8_wctomb+0x70>
 10114be:	228a      	movs	r2, #138	; 0x8a
 10114c0:	f04f 33ff 	mov.w	r3, #4294967295
 10114c4:	6002      	str	r2, [r0, #0]
 10114c6:	e7e5      	b.n	1011494 <__utf8_wctomb+0x70>

010114c8 <__sjis_wctomb>:
 10114c8:	b2d3      	uxtb	r3, r2
 10114ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 10114ce:	b1e9      	cbz	r1, 101150c <__sjis_wctomb+0x44>
 10114d0:	b1c2      	cbz	r2, 1011504 <__sjis_wctomb+0x3c>
 10114d2:	b430      	push	{r4, r5}
 10114d4:	f102 057f 	add.w	r5, r2, #127	; 0x7f
 10114d8:	f102 0420 	add.w	r4, r2, #32
 10114dc:	b2ed      	uxtb	r5, r5
 10114de:	b2e4      	uxtb	r4, r4
 10114e0:	2c0f      	cmp	r4, #15
 10114e2:	bf88      	it	hi
 10114e4:	2d1e      	cmphi	r5, #30
 10114e6:	d814      	bhi.n	1011512 <__sjis_wctomb+0x4a>
 10114e8:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 10114ec:	f083 0580 	eor.w	r5, r3, #128	; 0x80
 10114f0:	2d7c      	cmp	r5, #124	; 0x7c
 10114f2:	bf88      	it	hi
 10114f4:	2c3e      	cmphi	r4, #62	; 0x3e
 10114f6:	d80c      	bhi.n	1011512 <__sjis_wctomb+0x4a>
 10114f8:	700a      	strb	r2, [r1, #0]
 10114fa:	2202      	movs	r2, #2
 10114fc:	704b      	strb	r3, [r1, #1]
 10114fe:	4610      	mov	r0, r2
 1011500:	bc30      	pop	{r4, r5}
 1011502:	4770      	bx	lr
 1011504:	2201      	movs	r2, #1
 1011506:	700b      	strb	r3, [r1, #0]
 1011508:	4610      	mov	r0, r2
 101150a:	4770      	bx	lr
 101150c:	460a      	mov	r2, r1
 101150e:	4610      	mov	r0, r2
 1011510:	4770      	bx	lr
 1011512:	238a      	movs	r3, #138	; 0x8a
 1011514:	f04f 32ff 	mov.w	r2, #4294967295
 1011518:	6003      	str	r3, [r0, #0]
 101151a:	e7f0      	b.n	10114fe <__sjis_wctomb+0x36>

0101151c <__eucjp_wctomb>:
 101151c:	b2d3      	uxtb	r3, r2
 101151e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1011522:	b381      	cbz	r1, 1011586 <__eucjp_wctomb+0x6a>
 1011524:	b18a      	cbz	r2, 101154a <__eucjp_wctomb+0x2e>
 1011526:	b430      	push	{r4, r5}
 1011528:	f102 045f 	add.w	r4, r2, #95	; 0x5f
 101152c:	f102 0572 	add.w	r5, r2, #114	; 0x72
 1011530:	b2e4      	uxtb	r4, r4
 1011532:	b2ed      	uxtb	r5, r5
 1011534:	2c5d      	cmp	r4, #93	; 0x5d
 1011536:	bf88      	it	hi
 1011538:	2d01      	cmphi	r5, #1
 101153a:	d90a      	bls.n	1011552 <__eucjp_wctomb+0x36>
 101153c:	f04f 32ff 	mov.w	r2, #4294967295
 1011540:	238a      	movs	r3, #138	; 0x8a
 1011542:	6003      	str	r3, [r0, #0]
 1011544:	4610      	mov	r0, r2
 1011546:	bc30      	pop	{r4, r5}
 1011548:	4770      	bx	lr
 101154a:	2201      	movs	r2, #1
 101154c:	700b      	strb	r3, [r1, #0]
 101154e:	4610      	mov	r0, r2
 1011550:	4770      	bx	lr
 1011552:	f103 055f 	add.w	r5, r3, #95	; 0x5f
 1011556:	b2ed      	uxtb	r5, r5
 1011558:	2d5d      	cmp	r5, #93	; 0x5d
 101155a:	bf9e      	ittt	ls
 101155c:	700a      	strbls	r2, [r1, #0]
 101155e:	704b      	strbls	r3, [r1, #1]
 1011560:	2202      	movls	r2, #2
 1011562:	d9ef      	bls.n	1011544 <__eucjp_wctomb+0x28>
 1011564:	2c5d      	cmp	r4, #93	; 0x5d
 1011566:	d8e9      	bhi.n	101153c <__eucjp_wctomb+0x20>
 1011568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 101156c:	f103 045f 	add.w	r4, r3, #95	; 0x5f
 1011570:	b2e4      	uxtb	r4, r4
 1011572:	2c5d      	cmp	r4, #93	; 0x5d
 1011574:	d8e2      	bhi.n	101153c <__eucjp_wctomb+0x20>
 1011576:	704a      	strb	r2, [r1, #1]
 1011578:	2203      	movs	r2, #3
 101157a:	208f      	movs	r0, #143	; 0x8f
 101157c:	708b      	strb	r3, [r1, #2]
 101157e:	7008      	strb	r0, [r1, #0]
 1011580:	4610      	mov	r0, r2
 1011582:	bc30      	pop	{r4, r5}
 1011584:	4770      	bx	lr
 1011586:	460a      	mov	r2, r1
 1011588:	4610      	mov	r0, r2
 101158a:	4770      	bx	lr

0101158c <__jis_wctomb>:
 101158c:	b430      	push	{r4, r5}
 101158e:	b2d4      	uxtb	r4, r2
 1011590:	f3c2 2207 	ubfx	r2, r2, #8, #8
 1011594:	b391      	cbz	r1, 10115fc <__jis_wctomb+0x70>
 1011596:	b17a      	cbz	r2, 10115b8 <__jis_wctomb+0x2c>
 1011598:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 101159c:	2d5d      	cmp	r5, #93	; 0x5d
 101159e:	d831      	bhi.n	1011604 <__jis_wctomb+0x78>
 10115a0:	f1a4 0521 	sub.w	r5, r4, #33	; 0x21
 10115a4:	2d5d      	cmp	r5, #93	; 0x5d
 10115a6:	d82d      	bhi.n	1011604 <__jis_wctomb+0x78>
 10115a8:	6818      	ldr	r0, [r3, #0]
 10115aa:	b1c8      	cbz	r0, 10115e0 <__jis_wctomb+0x54>
 10115ac:	2302      	movs	r3, #2
 10115ae:	704c      	strb	r4, [r1, #1]
 10115b0:	4618      	mov	r0, r3
 10115b2:	700a      	strb	r2, [r1, #0]
 10115b4:	bc30      	pop	{r4, r5}
 10115b6:	4770      	bx	lr
 10115b8:	6818      	ldr	r0, [r3, #0]
 10115ba:	b178      	cbz	r0, 10115dc <__jis_wctomb+0x50>
 10115bc:	601a      	str	r2, [r3, #0]
 10115be:	3103      	adds	r1, #3
 10115c0:	221b      	movs	r2, #27
 10115c2:	2328      	movs	r3, #40	; 0x28
 10115c4:	f801 2c03 	strb.w	r2, [r1, #-3]
 10115c8:	2242      	movs	r2, #66	; 0x42
 10115ca:	f801 3c02 	strb.w	r3, [r1, #-2]
 10115ce:	2304      	movs	r3, #4
 10115d0:	f801 2c01 	strb.w	r2, [r1, #-1]
 10115d4:	700c      	strb	r4, [r1, #0]
 10115d6:	4618      	mov	r0, r3
 10115d8:	bc30      	pop	{r4, r5}
 10115da:	4770      	bx	lr
 10115dc:	2301      	movs	r3, #1
 10115de:	e7f9      	b.n	10115d4 <__jis_wctomb+0x48>
 10115e0:	2001      	movs	r0, #1
 10115e2:	3103      	adds	r1, #3
 10115e4:	6018      	str	r0, [r3, #0]
 10115e6:	201b      	movs	r0, #27
 10115e8:	2324      	movs	r3, #36	; 0x24
 10115ea:	f801 0c03 	strb.w	r0, [r1, #-3]
 10115ee:	f801 3c02 	strb.w	r3, [r1, #-2]
 10115f2:	2042      	movs	r0, #66	; 0x42
 10115f4:	2305      	movs	r3, #5
 10115f6:	f801 0c01 	strb.w	r0, [r1, #-1]
 10115fa:	e7d8      	b.n	10115ae <__jis_wctomb+0x22>
 10115fc:	2301      	movs	r3, #1
 10115fe:	4618      	mov	r0, r3
 1011600:	bc30      	pop	{r4, r5}
 1011602:	4770      	bx	lr
 1011604:	228a      	movs	r2, #138	; 0x8a
 1011606:	f04f 33ff 	mov.w	r3, #4294967295
 101160a:	6002      	str	r2, [r0, #0]
 101160c:	e7e3      	b.n	10115d6 <__jis_wctomb+0x4a>
 101160e:	bf00      	nop

01011610 <__swsetup_r>:
 1011610:	b538      	push	{r3, r4, r5, lr}
 1011612:	f649 4330 	movw	r3, #39984	; 0x9c30
 1011616:	f2c0 1305 	movt	r3, #261	; 0x105
 101161a:	4605      	mov	r5, r0
 101161c:	460c      	mov	r4, r1
 101161e:	6818      	ldr	r0, [r3, #0]
 1011620:	b110      	cbz	r0, 1011628 <__swsetup_r+0x18>
 1011622:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1011624:	2b00      	cmp	r3, #0
 1011626:	d03f      	beq.n	10116a8 <__swsetup_r+0x98>
 1011628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 101162c:	b293      	uxth	r3, r2
 101162e:	0718      	lsls	r0, r3, #28
 1011630:	bf48      	it	mi
 1011632:	6920      	ldrmi	r0, [r4, #16]
 1011634:	d41c      	bmi.n	1011670 <__swsetup_r+0x60>
 1011636:	06d9      	lsls	r1, r3, #27
 1011638:	d545      	bpl.n	10116c6 <__swsetup_r+0xb6>
 101163a:	0758      	lsls	r0, r3, #29
 101163c:	bf58      	it	pl
 101163e:	6920      	ldrpl	r0, [r4, #16]
 1011640:	d512      	bpl.n	1011668 <__swsetup_r+0x58>
 1011642:	6b21      	ldr	r1, [r4, #48]	; 0x30
 1011644:	b151      	cbz	r1, 101165c <__swsetup_r+0x4c>
 1011646:	f104 0340 	add.w	r3, r4, #64	; 0x40
 101164a:	4299      	cmp	r1, r3
 101164c:	d004      	beq.n	1011658 <__swsetup_r+0x48>
 101164e:	4628      	mov	r0, r5
 1011650:	f001 fa16 	bl	1012a80 <_free_r>
 1011654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1011658:	2300      	movs	r3, #0
 101165a:	6323      	str	r3, [r4, #48]	; 0x30
 101165c:	6920      	ldr	r0, [r4, #16]
 101165e:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 1011662:	2300      	movs	r3, #0
 1011664:	e9c4 0300 	strd	r0, r3, [r4]
 1011668:	f042 0308 	orr.w	r3, r2, #8
 101166c:	81a3      	strh	r3, [r4, #12]
 101166e:	b29b      	uxth	r3, r3
 1011670:	b1e8      	cbz	r0, 10116ae <__swsetup_r+0x9e>
 1011672:	f013 0201 	ands.w	r2, r3, #1
 1011676:	d007      	beq.n	1011688 <__swsetup_r+0x78>
 1011678:	6963      	ldr	r3, [r4, #20]
 101167a:	2200      	movs	r2, #0
 101167c:	60a2      	str	r2, [r4, #8]
 101167e:	425b      	negs	r3, r3
 1011680:	61a3      	str	r3, [r4, #24]
 1011682:	b138      	cbz	r0, 1011694 <__swsetup_r+0x84>
 1011684:	2000      	movs	r0, #0
 1011686:	bd38      	pop	{r3, r4, r5, pc}
 1011688:	0799      	lsls	r1, r3, #30
 101168a:	bf58      	it	pl
 101168c:	6962      	ldrpl	r2, [r4, #20]
 101168e:	60a2      	str	r2, [r4, #8]
 1011690:	2800      	cmp	r0, #0
 1011692:	d1f7      	bne.n	1011684 <__swsetup_r+0x74>
 1011694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1011698:	061a      	lsls	r2, r3, #24
 101169a:	bf42      	ittt	mi
 101169c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 10116a0:	81a3      	strhmi	r3, [r4, #12]
 10116a2:	f04f 30ff 	movmi.w	r0, #4294967295
 10116a6:	bd38      	pop	{r3, r4, r5, pc}
 10116a8:	f001 f970 	bl	101298c <__sinit>
 10116ac:	e7bc      	b.n	1011628 <__swsetup_r+0x18>
 10116ae:	f403 7220 	and.w	r2, r3, #640	; 0x280
 10116b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 10116b6:	d0dc      	beq.n	1011672 <__swsetup_r+0x62>
 10116b8:	4628      	mov	r0, r5
 10116ba:	4621      	mov	r1, r4
 10116bc:	f001 fd56 	bl	101316c <__smakebuf_r>
 10116c0:	89a3      	ldrh	r3, [r4, #12]
 10116c2:	6920      	ldr	r0, [r4, #16]
 10116c4:	e7d5      	b.n	1011672 <__swsetup_r+0x62>
 10116c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 10116ca:	2309      	movs	r3, #9
 10116cc:	f04f 30ff 	mov.w	r0, #4294967295
 10116d0:	602b      	str	r3, [r5, #0]
 10116d2:	81a2      	strh	r2, [r4, #12]
 10116d4:	bd38      	pop	{r3, r4, r5, pc}
 10116d6:	bf00      	nop

010116d8 <__call_exitprocs>:
 10116d8:	f246 73f8 	movw	r3, #26616	; 0x67f8
 10116dc:	f2c0 1305 	movt	r3, #261	; 0x105
 10116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10116e4:	b085      	sub	sp, #20
 10116e6:	681b      	ldr	r3, [r3, #0]
 10116e8:	460f      	mov	r7, r1
 10116ea:	468a      	mov	sl, r1
 10116ec:	f64b 62c9 	movw	r2, #48841	; 0xbec9
 10116f0:	f2c0 1200 	movt	r2, #256	; 0x100
 10116f4:	9203      	str	r2, [sp, #12]
 10116f6:	e9cd 0300 	strd	r0, r3, [sp]
 10116fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 10116fe:	9302      	str	r3, [sp, #8]
 1011700:	9b01      	ldr	r3, [sp, #4]
 1011702:	f8dd b008 	ldr.w	fp, [sp, #8]
 1011706:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 101170a:	b32e      	cbz	r6, 1011758 <__call_exitprocs+0x80>
 101170c:	f04f 0801 	mov.w	r8, #1
 1011710:	6874      	ldr	r4, [r6, #4]
 1011712:	1e65      	subs	r5, r4, #1
 1011714:	bf5e      	ittt	pl
 1011716:	3401      	addpl	r4, #1
 1011718:	2700      	movpl	r7, #0
 101171a:	eb06 0484 	addpl.w	r4, r6, r4, lsl #2
 101171e:	d40a      	bmi.n	1011736 <__call_exitprocs+0x5e>
 1011720:	f1ba 0f00 	cmp.w	sl, #0
 1011724:	d01b      	beq.n	101175e <__call_exitprocs+0x86>
 1011726:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 101172a:	4553      	cmp	r3, sl
 101172c:	d017      	beq.n	101175e <__call_exitprocs+0x86>
 101172e:	3d01      	subs	r5, #1
 1011730:	3c04      	subs	r4, #4
 1011732:	1c6b      	adds	r3, r5, #1
 1011734:	d1f4      	bne.n	1011720 <__call_exitprocs+0x48>
 1011736:	9b03      	ldr	r3, [sp, #12]
 1011738:	b173      	cbz	r3, 1011758 <__call_exitprocs+0x80>
 101173a:	e9d6 3200 	ldrd	r3, r2, [r6]
 101173e:	2a00      	cmp	r2, #0
 1011740:	d133      	bne.n	10117aa <__call_exitprocs+0xd2>
 1011742:	2b00      	cmp	r3, #0
 1011744:	d031      	beq.n	10117aa <__call_exitprocs+0xd2>
 1011746:	4630      	mov	r0, r6
 1011748:	f8cb 3000 	str.w	r3, [fp]
 101174c:	f7fa fbbc 	bl	100bec8 <free>
 1011750:	f8db 6000 	ldr.w	r6, [fp]
 1011754:	2e00      	cmp	r6, #0
 1011756:	d1db      	bne.n	1011710 <__call_exitprocs+0x38>
 1011758:	b005      	add	sp, #20
 101175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101175e:	6873      	ldr	r3, [r6, #4]
 1011760:	6822      	ldr	r2, [r4, #0]
 1011762:	3b01      	subs	r3, #1
 1011764:	42ab      	cmp	r3, r5
 1011766:	bf0c      	ite	eq
 1011768:	6075      	streq	r5, [r6, #4]
 101176a:	6027      	strne	r7, [r4, #0]
 101176c:	2a00      	cmp	r2, #0
 101176e:	d0de      	beq.n	101172e <__call_exitprocs+0x56>
 1011770:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 1011774:	fa08 f305 	lsl.w	r3, r8, r5
 1011778:	f8d6 9004 	ldr.w	r9, [r6, #4]
 101177c:	420b      	tst	r3, r1
 101177e:	d108      	bne.n	1011792 <__call_exitprocs+0xba>
 1011780:	4790      	blx	r2
 1011782:	6873      	ldr	r3, [r6, #4]
 1011784:	454b      	cmp	r3, r9
 1011786:	d1bb      	bne.n	1011700 <__call_exitprocs+0x28>
 1011788:	f8db 3000 	ldr.w	r3, [fp]
 101178c:	42b3      	cmp	r3, r6
 101178e:	d0ce      	beq.n	101172e <__call_exitprocs+0x56>
 1011790:	e7b6      	b.n	1011700 <__call_exitprocs+0x28>
 1011792:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 1011796:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 101179a:	4203      	tst	r3, r0
 101179c:	d102      	bne.n	10117a4 <__call_exitprocs+0xcc>
 101179e:	9800      	ldr	r0, [sp, #0]
 10117a0:	4790      	blx	r2
 10117a2:	e7ee      	b.n	1011782 <__call_exitprocs+0xaa>
 10117a4:	4608      	mov	r0, r1
 10117a6:	4790      	blx	r2
 10117a8:	e7eb      	b.n	1011782 <__call_exitprocs+0xaa>
 10117aa:	46b3      	mov	fp, r6
 10117ac:	461e      	mov	r6, r3
 10117ae:	2e00      	cmp	r6, #0
 10117b0:	d1ae      	bne.n	1011710 <__call_exitprocs+0x38>
 10117b2:	e7d1      	b.n	1011758 <__call_exitprocs+0x80>

010117b4 <__set_ctype>:
 10117b4:	f646 2354 	movw	r3, #27220	; 0x6a54
 10117b8:	f2c0 1305 	movt	r3, #261	; 0x105
 10117bc:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 10117c0:	4770      	bx	lr
 10117c2:	bf00      	nop
 10117c4:	0000      	movs	r0, r0
	...

010117c8 <quorem>:
 10117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10117cc:	b085      	sub	sp, #20
 10117ce:	6903      	ldr	r3, [r0, #16]
 10117d0:	690d      	ldr	r5, [r1, #16]
 10117d2:	42ab      	cmp	r3, r5
 10117d4:	bfb8      	it	lt
 10117d6:	2000      	movlt	r0, #0
 10117d8:	f2c0 8097 	blt.w	101190a <quorem+0x142>
 10117dc:	3d01      	subs	r5, #1
 10117de:	f101 0414 	add.w	r4, r1, #20
 10117e2:	f100 0914 	add.w	r9, r0, #20
 10117e6:	9101      	str	r1, [sp, #4]
 10117e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 10117ec:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 10117f0:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 10117f4:	4680      	mov	r8, r0
 10117f6:	f102 0b01 	add.w	fp, r2, #1
 10117fa:	eb09 020a 	add.w	r2, r9, sl
 10117fe:	9203      	str	r2, [sp, #12]
 1011800:	eb04 070a 	add.w	r7, r4, sl
 1011804:	4618      	mov	r0, r3
 1011806:	4659      	mov	r1, fp
 1011808:	9302      	str	r3, [sp, #8]
 101180a:	f7f8 ff4d 	bl	100a6a8 <__udivsi3>
 101180e:	9b02      	ldr	r3, [sp, #8]
 1011810:	455b      	cmp	r3, fp
 1011812:	4606      	mov	r6, r0
 1011814:	d33f      	bcc.n	1011896 <quorem+0xce>
 1011816:	2000      	movs	r0, #0
 1011818:	46a6      	mov	lr, r4
 101181a:	4602      	mov	r2, r0
 101181c:	46cc      	mov	ip, r9
 101181e:	f85e bb04 	ldr.w	fp, [lr], #4
 1011822:	f8dc 1000 	ldr.w	r1, [ip]
 1011826:	4577      	cmp	r7, lr
 1011828:	fa1f f38b 	uxth.w	r3, fp
 101182c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 1011830:	fb06 0303 	mla	r3, r6, r3, r0
 1011834:	ea4f 4013 	mov.w	r0, r3, lsr #16
 1011838:	b29b      	uxth	r3, r3
 101183a:	eba2 0303 	sub.w	r3, r2, r3
 101183e:	fb06 000b 	mla	r0, r6, fp, r0
 1011842:	fa13 f381 	uxtah	r3, r3, r1
 1011846:	fa1f fb83 	uxth.w	fp, r3
 101184a:	b282      	uxth	r2, r0
 101184c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1011850:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
 1011854:	eb02 4323 	add.w	r3, r2, r3, asr #16
 1011858:	ea4b 4103 	orr.w	r1, fp, r3, lsl #16
 101185c:	ea4f 4223 	mov.w	r2, r3, asr #16
 1011860:	f84c 1b04 	str.w	r1, [ip], #4
 1011864:	d2db      	bcs.n	101181e <quorem+0x56>
 1011866:	f859 300a 	ldr.w	r3, [r9, sl]
 101186a:	b9a3      	cbnz	r3, 1011896 <quorem+0xce>
 101186c:	9a03      	ldr	r2, [sp, #12]
 101186e:	1f13      	subs	r3, r2, #4
 1011870:	4599      	cmp	r9, r3
 1011872:	d20e      	bcs.n	1011892 <quorem+0xca>
 1011874:	f852 3c04 	ldr.w	r3, [r2, #-4]
 1011878:	b95b      	cbnz	r3, 1011892 <quorem+0xca>
 101187a:	f1a2 0308 	sub.w	r3, r2, #8
 101187e:	e001      	b.n	1011884 <quorem+0xbc>
 1011880:	6812      	ldr	r2, [r2, #0]
 1011882:	b932      	cbnz	r2, 1011892 <quorem+0xca>
 1011884:	4599      	cmp	r9, r3
 1011886:	461a      	mov	r2, r3
 1011888:	f105 35ff 	add.w	r5, r5, #4294967295
 101188c:	f1a3 0304 	sub.w	r3, r3, #4
 1011890:	d3f6      	bcc.n	1011880 <quorem+0xb8>
 1011892:	f8c8 5010 	str.w	r5, [r8, #16]
 1011896:	9901      	ldr	r1, [sp, #4]
 1011898:	4640      	mov	r0, r8
 101189a:	f001 ffdd 	bl	1013858 <__mcmp>
 101189e:	2800      	cmp	r0, #0
 10118a0:	db32      	blt.n	1011908 <quorem+0x140>
 10118a2:	3601      	adds	r6, #1
 10118a4:	4648      	mov	r0, r9
 10118a6:	f04f 0c00 	mov.w	ip, #0
 10118aa:	f854 2b04 	ldr.w	r2, [r4], #4
 10118ae:	6803      	ldr	r3, [r0, #0]
 10118b0:	42a7      	cmp	r7, r4
 10118b2:	b291      	uxth	r1, r2
 10118b4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 10118b8:	ebac 0101 	sub.w	r1, ip, r1
 10118bc:	ebc2 4c13 	rsb	ip, r2, r3, lsr #16
 10118c0:	fa11 f383 	uxtah	r3, r1, r3
 10118c4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
 10118c8:	b29b      	uxth	r3, r3
 10118ca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 10118ce:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 10118d2:	f840 3b04 	str.w	r3, [r0], #4
 10118d6:	d2e8      	bcs.n	10118aa <quorem+0xe2>
 10118d8:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 10118dc:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 10118e0:	b992      	cbnz	r2, 1011908 <quorem+0x140>
 10118e2:	1f1a      	subs	r2, r3, #4
 10118e4:	4591      	cmp	r9, r2
 10118e6:	d20d      	bcs.n	1011904 <quorem+0x13c>
 10118e8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 10118ec:	b952      	cbnz	r2, 1011904 <quorem+0x13c>
 10118ee:	3b08      	subs	r3, #8
 10118f0:	e001      	b.n	10118f6 <quorem+0x12e>
 10118f2:	6812      	ldr	r2, [r2, #0]
 10118f4:	b932      	cbnz	r2, 1011904 <quorem+0x13c>
 10118f6:	4599      	cmp	r9, r3
 10118f8:	461a      	mov	r2, r3
 10118fa:	f105 35ff 	add.w	r5, r5, #4294967295
 10118fe:	f1a3 0304 	sub.w	r3, r3, #4
 1011902:	d3f6      	bcc.n	10118f2 <quorem+0x12a>
 1011904:	f8c8 5010 	str.w	r5, [r8, #16]
 1011908:	4630      	mov	r0, r6
 101190a:	b005      	add	sp, #20
 101190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01011910 <_dtoa_r>:
 1011910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1011914:	b093      	sub	sp, #76	; 0x4c
 1011916:	ec57 6b10 	vmov	r6, r7, d0
 101191a:	4604      	mov	r4, r0
 101191c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 101191e:	468a      	mov	sl, r1
 1011920:	e9cd 3207 	strd	r3, r2, [sp, #28]
 1011924:	e9cd 6700 	strd	r6, r7, [sp]
 1011928:	b14d      	cbz	r5, 101193e <_dtoa_r+0x2e>
 101192a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 101192c:	2301      	movs	r3, #1
 101192e:	4629      	mov	r1, r5
 1011930:	4093      	lsls	r3, r2
 1011932:	e9c5 2301 	strd	r2, r3, [r5, #4]
 1011936:	f001 fd49 	bl	10133cc <_Bfree>
 101193a:	2300      	movs	r3, #0
 101193c:	6423      	str	r3, [r4, #64]	; 0x40
 101193e:	1e3e      	subs	r6, r7, #0
 1011940:	bfbf      	itttt	lt
 1011942:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 1011946:	9601      	strlt	r6, [sp, #4]
 1011948:	9a1c      	ldrlt	r2, [sp, #112]	; 0x70
 101194a:	2301      	movlt	r3, #1
 101194c:	bfa5      	ittet	ge
 101194e:	9a1c      	ldrge	r2, [sp, #112]	; 0x70
 1011950:	2300      	movge	r3, #0
 1011952:	6013      	strlt	r3, [r2, #0]
 1011954:	6013      	strge	r3, [r2, #0]
 1011956:	2300      	movs	r3, #0
 1011958:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 101195c:	43b3      	bics	r3, r6
 101195e:	f000 80b1 	beq.w	1011ac4 <_dtoa_r+0x1b4>
 1011962:	ed9d 7b00 	vldr	d7, [sp]
 1011966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 101196a:	ed8d 7b02 	vstr	d7, [sp, #8]
 101196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011972:	d10e      	bne.n	1011992 <_dtoa_r+0x82>
 1011974:	9a07      	ldr	r2, [sp, #28]
 1011976:	2301      	movs	r3, #1
 1011978:	6013      	str	r3, [r2, #0]
 101197a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 101197c:	2b00      	cmp	r3, #0
 101197e:	f000 8358 	beq.w	1012032 <_dtoa_r+0x722>
 1011982:	4bc3      	ldr	r3, [pc, #780]	; (1011c90 <_dtoa_r+0x380>)
 1011984:	1e5e      	subs	r6, r3, #1
 1011986:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 1011988:	6013      	str	r3, [r2, #0]
 101198a:	4630      	mov	r0, r6
 101198c:	b013      	add	sp, #76	; 0x4c
 101198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1011992:	aa10      	add	r2, sp, #64	; 0x40
 1011994:	a911      	add	r1, sp, #68	; 0x44
 1011996:	ed9d 0b02 	vldr	d0, [sp, #8]
 101199a:	4620      	mov	r0, r4
 101199c:	f002 f87e 	bl	1013a9c <__d2b>
 10119a0:	ea5f 5b16 	movs.w	fp, r6, lsr #20
 10119a4:	4680      	mov	r8, r0
 10119a6:	f040 80a1 	bne.w	1011aec <_dtoa_r+0x1dc>
 10119aa:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
 10119ae:	eb01 0b03 	add.w	fp, r1, r3
 10119b2:	f20b 4332 	addw	r3, fp, #1074	; 0x432
 10119b6:	2b20      	cmp	r3, #32
 10119b8:	f340 8343 	ble.w	1012042 <_dtoa_r+0x732>
 10119bc:	f20b 4212 	addw	r2, fp, #1042	; 0x412
 10119c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 10119c4:	409e      	lsls	r6, r3
 10119c6:	4613      	mov	r3, r2
 10119c8:	9a00      	ldr	r2, [sp, #0]
 10119ca:	fa22 f303 	lsr.w	r3, r2, r3
 10119ce:	4333      	orrs	r3, r6
 10119d0:	ee07 3a90 	vmov	s15, r3
 10119d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 10119d8:	2301      	movs	r3, #1
 10119da:	f10b 3bff 	add.w	fp, fp, #4294967295
 10119de:	930c      	str	r3, [sp, #48]	; 0x30
 10119e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 10119e4:	9805      	ldr	r0, [sp, #20]
 10119e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 10119ea:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 10119ee:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 10119f2:	ec43 2b13 	vmov	d3, r2, r3
 10119f6:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 1011c78 <_dtoa_r+0x368>
 10119fa:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 1011c80 <_dtoa_r+0x370>
 10119fe:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 1011c88 <_dtoa_r+0x378>
 1011a02:	ee33 6b46 	vsub.f64	d6, d3, d6
 1011a06:	ee06 7b04 	vmla.f64	d7, d6, d4
 1011a0a:	ee06 ba90 	vmov	s13, fp
 1011a0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1011a12:	ee06 7b05 	vmla.f64	d7, d6, d5
 1011a16:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 1011a1a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 1011a1e:	ee16 5a90 	vmov	r5, s13
 1011a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011a26:	d508      	bpl.n	1011a3a <_dtoa_r+0x12a>
 1011a28:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1011a2c:	eeb4 6b47 	vcmp.f64	d6, d7
 1011a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011a34:	bf18      	it	ne
 1011a36:	f105 35ff 	addne.w	r5, r5, #4294967295
 1011a3a:	2d16      	cmp	r5, #22
 1011a3c:	eba1 0b0b 	sub.w	fp, r1, fp
 1011a40:	f10b 36ff 	add.w	r6, fp, #4294967295
 1011a44:	f200 82e7 	bhi.w	1012016 <_dtoa_r+0x706>
 1011a48:	f646 3368 	movw	r3, #27496	; 0x6b68
 1011a4c:	f2c0 1305 	movt	r3, #261	; 0x105
 1011a50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 1011a54:	ed9d 6b02 	vldr	d6, [sp, #8]
 1011a58:	ed93 7b00 	vldr	d7, [r3]
 1011a5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1011a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011a64:	d55b      	bpl.n	1011b1e <_dtoa_r+0x20e>
 1011a66:	2e00      	cmp	r6, #0
 1011a68:	f04f 0300 	mov.w	r3, #0
 1011a6c:	f105 35ff 	add.w	r5, r5, #4294967295
 1011a70:	930d      	str	r3, [sp, #52]	; 0x34
 1011a72:	bfa4      	itt	ge
 1011a74:	2300      	movge	r3, #0
 1011a76:	9309      	strge	r3, [sp, #36]	; 0x24
 1011a78:	f2c0 82d6 	blt.w	1012028 <_dtoa_r+0x718>
 1011a7c:	2d00      	cmp	r5, #0
 1011a7e:	da56      	bge.n	1011b2e <_dtoa_r+0x21e>
 1011a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1011a82:	f1ba 0f09 	cmp.w	sl, #9
 1011a86:	9504      	str	r5, [sp, #16]
 1011a88:	eba3 0305 	sub.w	r3, r3, r5
 1011a8c:	9309      	str	r3, [sp, #36]	; 0x24
 1011a8e:	f1c5 0300 	rsb	r3, r5, #0
 1011a92:	f04f 0500 	mov.w	r5, #0
 1011a96:	930b      	str	r3, [sp, #44]	; 0x2c
 1011a98:	d851      	bhi.n	1011b3e <_dtoa_r+0x22e>
 1011a9a:	f1ba 0f05 	cmp.w	sl, #5
 1011a9e:	bfc4      	itt	gt
 1011aa0:	f1aa 0a04 	subgt.w	sl, sl, #4
 1011aa4:	f04f 0900 	movgt.w	r9, #0
 1011aa8:	dc01      	bgt.n	1011aae <_dtoa_r+0x19e>
 1011aaa:	f04f 0901 	mov.w	r9, #1
 1011aae:	f1aa 0302 	sub.w	r3, sl, #2
 1011ab2:	2b03      	cmp	r3, #3
 1011ab4:	f200 8477 	bhi.w	10123a6 <_dtoa_r+0xa96>
 1011ab8:	e8df f013 	tbh	[pc, r3, lsl #1]
 1011abc:	0367036a 	.word	0x0367036a
 1011ac0:	035b033d 	.word	0x035b033d
 1011ac4:	9a07      	ldr	r2, [sp, #28]
 1011ac6:	f242 730f 	movw	r3, #9999	; 0x270f
 1011aca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 1011ace:	6013      	str	r3, [r2, #0]
 1011ad0:	9b00      	ldr	r3, [sp, #0]
 1011ad2:	4333      	orrs	r3, r6
 1011ad4:	d119      	bne.n	1011b0a <_dtoa_r+0x1fa>
 1011ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1011ad8:	f249 76b8 	movw	r6, #38840	; 0x97b8
 1011adc:	f2c0 1605 	movt	r6, #261	; 0x105
 1011ae0:	2b00      	cmp	r3, #0
 1011ae2:	f43f af52 	beq.w	101198a <_dtoa_r+0x7a>
 1011ae6:	f106 0308 	add.w	r3, r6, #8
 1011aea:	e74c      	b.n	1011986 <_dtoa_r+0x76>
 1011aec:	9903      	ldr	r1, [sp, #12]
 1011aee:	2000      	movs	r0, #0
 1011af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1011af4:	f2ab 3bff 	subw	fp, fp, #1023	; 0x3ff
 1011af8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 1011afc:	900c      	str	r0, [sp, #48]	; 0x30
 1011afe:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1011b02:	9910      	ldr	r1, [sp, #64]	; 0x40
 1011b04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1011b08:	e771      	b.n	10119ee <_dtoa_r+0xde>
 1011b0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1011b0c:	f249 76b4 	movw	r6, #38836	; 0x97b4
 1011b10:	f2c0 1605 	movt	r6, #261	; 0x105
 1011b14:	2b00      	cmp	r3, #0
 1011b16:	f43f af38 	beq.w	101198a <_dtoa_r+0x7a>
 1011b1a:	1cf3      	adds	r3, r6, #3
 1011b1c:	e733      	b.n	1011986 <_dtoa_r+0x76>
 1011b1e:	2e00      	cmp	r6, #0
 1011b20:	f04f 0300 	mov.w	r3, #0
 1011b24:	930d      	str	r3, [sp, #52]	; 0x34
 1011b26:	bfa8      	it	ge
 1011b28:	9309      	strge	r3, [sp, #36]	; 0x24
 1011b2a:	f2c0 827d 	blt.w	1012028 <_dtoa_r+0x718>
 1011b2e:	f1ba 0f09 	cmp.w	sl, #9
 1011b32:	f04f 0300 	mov.w	r3, #0
 1011b36:	442e      	add	r6, r5
 1011b38:	9504      	str	r5, [sp, #16]
 1011b3a:	930b      	str	r3, [sp, #44]	; 0x2c
 1011b3c:	d9ad      	bls.n	1011a9a <_dtoa_r+0x18a>
 1011b3e:	f04f 0a00 	mov.w	sl, #0
 1011b42:	f04f 37ff 	mov.w	r7, #4294967295
 1011b46:	46d1      	mov	r9, sl
 1011b48:	2301      	movs	r3, #1
 1011b4a:	f8cd a020 	str.w	sl, [sp, #32]
 1011b4e:	930a      	str	r3, [sp, #40]	; 0x28
 1011b50:	2100      	movs	r1, #0
 1011b52:	970e      	str	r7, [sp, #56]	; 0x38
 1011b54:	6461      	str	r1, [r4, #68]	; 0x44
 1011b56:	4620      	mov	r0, r4
 1011b58:	f001 fc12 	bl	1013380 <_Balloc>
 1011b5c:	4683      	mov	fp, r0
 1011b5e:	6420      	str	r0, [r4, #64]	; 0x40
 1011b60:	f1b9 0f00 	cmp.w	r9, #0
 1011b64:	f000 80e2 	beq.w	1011d2c <_dtoa_r+0x41c>
 1011b68:	9a04      	ldr	r2, [sp, #16]
 1011b6a:	2a00      	cmp	r2, #0
 1011b6c:	f340 827a 	ble.w	1012064 <_dtoa_r+0x754>
 1011b70:	f002 010f 	and.w	r1, r2, #15
 1011b74:	f646 3368 	movw	r3, #27496	; 0x6b68
 1011b78:	f2c0 1305 	movt	r3, #261	; 0x105
 1011b7c:	1112      	asrs	r2, r2, #4
 1011b7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1011b82:	ed93 6b00 	vldr	d6, [r3]
 1011b86:	06d3      	lsls	r3, r2, #27
 1011b88:	f140 82d1 	bpl.w	101212e <_dtoa_r+0x81e>
 1011b8c:	f646 4358 	movw	r3, #27736	; 0x6c58
 1011b90:	f2c0 1305 	movt	r3, #261	; 0x105
 1011b94:	ed9d 5b02 	vldr	d5, [sp, #8]
 1011b98:	f002 020f 	and.w	r2, r2, #15
 1011b9c:	2103      	movs	r1, #3
 1011b9e:	ed93 7b08 	vldr	d7, [r3, #32]
 1011ba2:	ee85 5b07 	vdiv.f64	d5, d5, d7
 1011ba6:	f646 4358 	movw	r3, #27736	; 0x6c58
 1011baa:	f2c0 1305 	movt	r3, #261	; 0x105
 1011bae:	b152      	cbz	r2, 1011bc6 <_dtoa_r+0x2b6>
 1011bb0:	07d0      	lsls	r0, r2, #31
 1011bb2:	d504      	bpl.n	1011bbe <_dtoa_r+0x2ae>
 1011bb4:	ed93 7b00 	vldr	d7, [r3]
 1011bb8:	3101      	adds	r1, #1
 1011bba:	ee26 6b07 	vmul.f64	d6, d6, d7
 1011bbe:	1052      	asrs	r2, r2, #1
 1011bc0:	f103 0308 	add.w	r3, r3, #8
 1011bc4:	d1f4      	bne.n	1011bb0 <_dtoa_r+0x2a0>
 1011bc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 1011bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1011bcc:	b13b      	cbz	r3, 1011bde <_dtoa_r+0x2ce>
 1011bce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 1011bd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1011bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011bda:	f100 83b3 	bmi.w	1012344 <_dtoa_r+0xa34>
 1011bde:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 1011be2:	ee05 1a90 	vmov	s11, r1
 1011be6:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 1011bea:	ee05 6b07 	vmla.f64	d6, d5, d7
 1011bee:	ed8d 6b00 	vstr	d6, [sp]
 1011bf2:	9b01      	ldr	r3, [sp, #4]
 1011bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 1011bf8:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1011bfc:	2f00      	cmp	r7, #0
 1011bfe:	d07d      	beq.n	1011cfc <_dtoa_r+0x3ec>
 1011c00:	f8dd e010 	ldr.w	lr, [sp, #16]
 1011c04:	463a      	mov	r2, r7
 1011c06:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 1011c0a:	f646 3c68 	movw	ip, #27496	; 0x6b68
 1011c0e:	ec41 0b15 	vmov	d5, r0, r1
 1011c12:	f2c0 1c05 	movt	ip, #261	; 0x105
 1011c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 1011c18:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 1011c1c:	f10b 0301 	add.w	r3, fp, #1
 1011c20:	ed1c 3b02 	vldr	d3, [ip, #-8]
 1011c24:	ee16 1a90 	vmov	r1, s13
 1011c28:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 1011c2c:	ee37 7b44 	vsub.f64	d7, d7, d4
 1011c30:	3130      	adds	r1, #48	; 0x30
 1011c32:	b2c9      	uxtb	r1, r1
 1011c34:	2800      	cmp	r0, #0
 1011c36:	f000 82ae 	beq.w	1012196 <_dtoa_r+0x886>
 1011c3a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 1011c3e:	f88b 1000 	strb.w	r1, [fp]
 1011c42:	ee84 6b03 	vdiv.f64	d6, d4, d3
 1011c46:	ee36 6b45 	vsub.f64	d6, d6, d5
 1011c4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 1011c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011c52:	dc3e      	bgt.n	1011cd2 <_dtoa_r+0x3c2>
 1011c54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 1011c58:	ee32 5b47 	vsub.f64	d5, d2, d7
 1011c5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 1011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011c64:	f300 8473 	bgt.w	101254e <_dtoa_r+0xc3e>
 1011c68:	2a01      	cmp	r2, #1
 1011c6a:	d05b      	beq.n	1011d24 <_dtoa_r+0x414>
 1011c6c:	445a      	add	r2, fp
 1011c6e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 1011c72:	e019      	b.n	1011ca8 <_dtoa_r+0x398>
 1011c74:	f3af 8000 	nop.w
 1011c78:	636f4361 	.word	0x636f4361
 1011c7c:	3fd287a7 	.word	0x3fd287a7
 1011c80:	8b60c8b3 	.word	0x8b60c8b3
 1011c84:	3fc68a28 	.word	0x3fc68a28
 1011c88:	509f79fb 	.word	0x509f79fb
 1011c8c:	3fd34413 	.word	0x3fd34413
 1011c90:	010597b1 	.word	0x010597b1
 1011c94:	ee32 5b47 	vsub.f64	d5, d2, d7
 1011c98:	eeb4 5bc6 	vcmpe.f64	d5, d6
 1011c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011ca0:	f100 8455 	bmi.w	101254e <_dtoa_r+0xc3e>
 1011ca4:	4293      	cmp	r3, r2
 1011ca6:	d03d      	beq.n	1011d24 <_dtoa_r+0x414>
 1011ca8:	ee27 5b04 	vmul.f64	d5, d7, d4
 1011cac:	ee26 6b04 	vmul.f64	d6, d6, d4
 1011cb0:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 1011cb4:	ee17 1a90 	vmov	r1, s15
 1011cb8:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 1011cbc:	ee35 7b43 	vsub.f64	d7, d5, d3
 1011cc0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 1011cc4:	3130      	adds	r1, #48	; 0x30
 1011cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011cca:	b2c9      	uxtb	r1, r1
 1011ccc:	f803 1b01 	strb.w	r1, [r3], #1
 1011cd0:	d5e0      	bpl.n	1011c94 <_dtoa_r+0x384>
 1011cd2:	465e      	mov	r6, fp
 1011cd4:	f10e 0201 	add.w	r2, lr, #1
 1011cd8:	469b      	mov	fp, r3
 1011cda:	9204      	str	r2, [sp, #16]
 1011cdc:	e0e3      	b.n	1011ea6 <_dtoa_r+0x596>
 1011cde:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 1011ce2:	ee06 1a90 	vmov	s13, r1
 1011ce6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 1011cea:	ee06 5b07 	vmla.f64	d5, d6, d7
 1011cee:	ed8d 5b00 	vstr	d5, [sp]
 1011cf2:	9b01      	ldr	r3, [sp, #4]
 1011cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 1011cf8:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1011cfc:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 1011d00:	ec41 0b15 	vmov	d5, r0, r1
 1011d04:	ee37 7b46 	vsub.f64	d7, d7, d6
 1011d08:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1011d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011d10:	f300 8345 	bgt.w	101239e <_dtoa_r+0xa8e>
 1011d14:	eeb1 5b45 	vneg.f64	d5, d5
 1011d18:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1011d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1011d20:	f100 8171 	bmi.w	1012006 <_dtoa_r+0x6f6>
 1011d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1011d28:	e9cd 2300 	strd	r2, r3, [sp]
 1011d2c:	9a04      	ldr	r2, [sp, #16]
 1011d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 1011d30:	4611      	mov	r1, r2
 1011d32:	290e      	cmp	r1, #14
 1011d34:	ea6f 0203 	mvn.w	r2, r3
 1011d38:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 1011d3c:	bfc8      	it	gt
 1011d3e:	2200      	movgt	r2, #0
 1011d40:	2a00      	cmp	r2, #0
 1011d42:	f040 814a 	bne.w	1011fda <_dtoa_r+0x6ca>
 1011d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 1011d48:	2a00      	cmp	r2, #0
 1011d4a:	f000 8182 	beq.w	1012052 <_dtoa_r+0x742>
 1011d4e:	f1ba 0f01 	cmp.w	sl, #1
 1011d52:	f340 8316 	ble.w	1012382 <_dtoa_r+0xa72>
 1011d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011d58:	1e7a      	subs	r2, r7, #1
 1011d5a:	4293      	cmp	r3, r2
 1011d5c:	bfaf      	iteee	ge
 1011d5e:	1a9b      	subge	r3, r3, r2
 1011d60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 1011d62:	920b      	strlt	r2, [sp, #44]	; 0x2c
 1011d64:	1ad3      	sublt	r3, r2, r3
 1011d66:	bfbc      	itt	lt
 1011d68:	18ed      	addlt	r5, r5, r3
 1011d6a:	2300      	movlt	r3, #0
 1011d6c:	2f00      	cmp	r7, #0
 1011d6e:	9302      	str	r3, [sp, #8]
 1011d70:	bfa5      	ittet	ge
 1011d72:	19f6      	addge	r6, r6, r7
 1011d74:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 1011d76:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 1011d78:	930c      	strge	r3, [sp, #48]	; 0x30
 1011d7a:	bfb5      	itete	lt
 1011d7c:	1bdb      	sublt	r3, r3, r7
 1011d7e:	19db      	addge	r3, r3, r7
 1011d80:	930c      	strlt	r3, [sp, #48]	; 0x30
 1011d82:	9309      	strge	r3, [sp, #36]	; 0x24
 1011d84:	2101      	movs	r1, #1
 1011d86:	4620      	mov	r0, r4
 1011d88:	f001 fc0c 	bl	10135a4 <__i2b>
 1011d8c:	4681      	mov	r9, r0
 1011d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1011d90:	2a00      	cmp	r2, #0
 1011d92:	bfc8      	it	gt
 1011d94:	2e00      	cmpgt	r6, #0
 1011d96:	dd09      	ble.n	1011dac <_dtoa_r+0x49c>
 1011d98:	42b2      	cmp	r2, r6
 1011d9a:	4613      	mov	r3, r2
 1011d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 1011d9e:	bfa8      	it	ge
 1011da0:	4633      	movge	r3, r6
 1011da2:	1af6      	subs	r6, r6, r3
 1011da4:	1ac9      	subs	r1, r1, r3
 1011da6:	1ad2      	subs	r2, r2, r3
 1011da8:	9109      	str	r1, [sp, #36]	; 0x24
 1011daa:	920c      	str	r2, [sp, #48]	; 0x30
 1011dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011dae:	b163      	cbz	r3, 1011dca <_dtoa_r+0x4ba>
 1011db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1011db2:	2b00      	cmp	r3, #0
 1011db4:	f000 810a 	beq.w	1011fcc <_dtoa_r+0x6bc>
 1011db8:	9b02      	ldr	r3, [sp, #8]
 1011dba:	2b00      	cmp	r3, #0
 1011dbc:	f300 8294 	bgt.w	10122e8 <_dtoa_r+0x9d8>
 1011dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011dc2:	9a02      	ldr	r2, [sp, #8]
 1011dc4:	1a9a      	subs	r2, r3, r2
 1011dc6:	f040 8102 	bne.w	1011fce <_dtoa_r+0x6be>
 1011dca:	2101      	movs	r1, #1
 1011dcc:	4620      	mov	r0, r4
 1011dce:	f001 fbe9 	bl	10135a4 <__i2b>
 1011dd2:	2d00      	cmp	r5, #0
 1011dd4:	9002      	str	r0, [sp, #8]
 1011dd6:	f300 8174 	bgt.w	10120c2 <_dtoa_r+0x7b2>
 1011dda:	f1ba 0f01 	cmp.w	sl, #1
 1011dde:	f340 82a5 	ble.w	101232c <_dtoa_r+0xa1c>
 1011de2:	2300      	movs	r3, #0
 1011de4:	930b      	str	r3, [sp, #44]	; 0x2c
 1011de6:	2001      	movs	r0, #1
 1011de8:	2d00      	cmp	r5, #0
 1011dea:	f040 8176 	bne.w	10120da <_dtoa_r+0x7ca>
 1011dee:	4430      	add	r0, r6
 1011df0:	f010 001f 	ands.w	r0, r0, #31
 1011df4:	f000 8134 	beq.w	1012060 <_dtoa_r+0x750>
 1011df8:	f1c0 0320 	rsb	r3, r0, #32
 1011dfc:	2b04      	cmp	r3, #4
 1011dfe:	f340 83fe 	ble.w	10125fe <_dtoa_r+0xcee>
 1011e02:	f1c0 001c 	rsb	r0, r0, #28
 1011e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1011e08:	4406      	add	r6, r0
 1011e0a:	4403      	add	r3, r0
 1011e0c:	9309      	str	r3, [sp, #36]	; 0x24
 1011e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1011e10:	4403      	add	r3, r0
 1011e12:	930c      	str	r3, [sp, #48]	; 0x30
 1011e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1011e16:	2b00      	cmp	r3, #0
 1011e18:	dd05      	ble.n	1011e26 <_dtoa_r+0x516>
 1011e1a:	4641      	mov	r1, r8
 1011e1c:	461a      	mov	r2, r3
 1011e1e:	4620      	mov	r0, r4
 1011e20:	f001 fcbc 	bl	101379c <__lshift>
 1011e24:	4680      	mov	r8, r0
 1011e26:	2e00      	cmp	r6, #0
 1011e28:	dd05      	ble.n	1011e36 <_dtoa_r+0x526>
 1011e2a:	4632      	mov	r2, r6
 1011e2c:	9902      	ldr	r1, [sp, #8]
 1011e2e:	4620      	mov	r0, r4
 1011e30:	f001 fcb4 	bl	101379c <__lshift>
 1011e34:	9002      	str	r0, [sp, #8]
 1011e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1011e38:	f1ba 0f02 	cmp.w	sl, #2
 1011e3c:	bfd4      	ite	le
 1011e3e:	2500      	movle	r5, #0
 1011e40:	2501      	movgt	r5, #1
 1011e42:	2b00      	cmp	r3, #0
 1011e44:	f040 8153 	bne.w	10120ee <_dtoa_r+0x7de>
 1011e48:	2f00      	cmp	r7, #0
 1011e4a:	bfcc      	ite	gt
 1011e4c:	2500      	movgt	r5, #0
 1011e4e:	f005 0501 	andle.w	r5, r5, #1
 1011e52:	2d00      	cmp	r5, #0
 1011e54:	d03c      	beq.n	1011ed0 <_dtoa_r+0x5c0>
 1011e56:	2f00      	cmp	r7, #0
 1011e58:	f040 80d8 	bne.w	101200c <_dtoa_r+0x6fc>
 1011e5c:	463b      	mov	r3, r7
 1011e5e:	9902      	ldr	r1, [sp, #8]
 1011e60:	2205      	movs	r2, #5
 1011e62:	4620      	mov	r0, r4
 1011e64:	f001 fabc 	bl	10133e0 <__multadd>
 1011e68:	4601      	mov	r1, r0
 1011e6a:	9002      	str	r0, [sp, #8]
 1011e6c:	4640      	mov	r0, r8
 1011e6e:	f001 fcf3 	bl	1013858 <__mcmp>
 1011e72:	2800      	cmp	r0, #0
 1011e74:	f340 80ca 	ble.w	101200c <_dtoa_r+0x6fc>
 1011e78:	9a04      	ldr	r2, [sp, #16]
 1011e7a:	465b      	mov	r3, fp
 1011e7c:	465e      	mov	r6, fp
 1011e7e:	f102 0a01 	add.w	sl, r2, #1
 1011e82:	2231      	movs	r2, #49	; 0x31
 1011e84:	f803 2b01 	strb.w	r2, [r3], #1
 1011e88:	469b      	mov	fp, r3
 1011e8a:	9902      	ldr	r1, [sp, #8]
 1011e8c:	4620      	mov	r0, r4
 1011e8e:	f10a 0301 	add.w	r3, sl, #1
 1011e92:	9304      	str	r3, [sp, #16]
 1011e94:	f001 fa9a 	bl	10133cc <_Bfree>
 1011e98:	f1b9 0f00 	cmp.w	r9, #0
 1011e9c:	d003      	beq.n	1011ea6 <_dtoa_r+0x596>
 1011e9e:	4649      	mov	r1, r9
 1011ea0:	4620      	mov	r0, r4
 1011ea2:	f001 fa93 	bl	10133cc <_Bfree>
 1011ea6:	4641      	mov	r1, r8
 1011ea8:	4620      	mov	r0, r4
 1011eaa:	f001 fa8f 	bl	10133cc <_Bfree>
 1011eae:	2300      	movs	r3, #0
 1011eb0:	f88b 3000 	strb.w	r3, [fp]
 1011eb4:	9b07      	ldr	r3, [sp, #28]
 1011eb6:	461a      	mov	r2, r3
 1011eb8:	9b04      	ldr	r3, [sp, #16]
 1011eba:	6013      	str	r3, [r2, #0]
 1011ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 1011ebe:	2b00      	cmp	r3, #0
 1011ec0:	f43f ad63 	beq.w	101198a <_dtoa_r+0x7a>
 1011ec4:	4630      	mov	r0, r6
 1011ec6:	f8c3 b000 	str.w	fp, [r3]
 1011eca:	b013      	add	sp, #76	; 0x4c
 1011ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1011ed0:	9b04      	ldr	r3, [sp, #16]
 1011ed2:	3301      	adds	r3, #1
 1011ed4:	9304      	str	r3, [sp, #16]
 1011ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1011ed8:	2b00      	cmp	r3, #0
 1011eda:	f000 818e 	beq.w	10121fa <_dtoa_r+0x8ea>
 1011ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1011ee0:	2b00      	cmp	r3, #0
 1011ee2:	dd05      	ble.n	1011ef0 <_dtoa_r+0x5e0>
 1011ee4:	4649      	mov	r1, r9
 1011ee6:	461a      	mov	r2, r3
 1011ee8:	4620      	mov	r0, r4
 1011eea:	f001 fc57 	bl	101379c <__lshift>
 1011eee:	4681      	mov	r9, r0
 1011ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011ef2:	2b00      	cmp	r3, #0
 1011ef4:	f040 8315 	bne.w	1012522 <_dtoa_r+0xc12>
 1011ef8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 1011efc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 1011f00:	f10b 33ff 	add.w	r3, fp, #4294967295
 1011f04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 1011f08:	443b      	add	r3, r7
 1011f0a:	9a00      	ldr	r2, [sp, #0]
 1011f0c:	465f      	mov	r7, fp
 1011f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 1011f10:	f002 0201 	and.w	r2, r2, #1
 1011f14:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 1011f18:	9208      	str	r2, [sp, #32]
 1011f1a:	9d02      	ldr	r5, [sp, #8]
 1011f1c:	4640      	mov	r0, r8
 1011f1e:	4629      	mov	r1, r5
 1011f20:	f7ff fc52 	bl	10117c8 <quorem>
 1011f24:	4649      	mov	r1, r9
 1011f26:	4683      	mov	fp, r0
 1011f28:	4640      	mov	r0, r8
 1011f2a:	f001 fc95 	bl	1013858 <__mcmp>
 1011f2e:	4629      	mov	r1, r5
 1011f30:	4652      	mov	r2, sl
 1011f32:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 1011f36:	9300      	str	r3, [sp, #0]
 1011f38:	4606      	mov	r6, r0
 1011f3a:	4620      	mov	r0, r4
 1011f3c:	f001 fcaa 	bl	1013894 <__mdiff>
 1011f40:	68c3      	ldr	r3, [r0, #12]
 1011f42:	4605      	mov	r5, r0
 1011f44:	4601      	mov	r1, r0
 1011f46:	2b00      	cmp	r3, #0
 1011f48:	f040 81e1 	bne.w	101230e <_dtoa_r+0x9fe>
 1011f4c:	4640      	mov	r0, r8
 1011f4e:	f001 fc83 	bl	1013858 <__mcmp>
 1011f52:	4629      	mov	r1, r5
 1011f54:	900a      	str	r0, [sp, #40]	; 0x28
 1011f56:	4620      	mov	r0, r4
 1011f58:	f001 fa38 	bl	10133cc <_Bfree>
 1011f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1011f5e:	9908      	ldr	r1, [sp, #32]
 1011f60:	461a      	mov	r2, r3
 1011f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1011f64:	431a      	orrs	r2, r3
 1011f66:	430a      	orrs	r2, r1
 1011f68:	f000 8321 	beq.w	10125ae <_dtoa_r+0xc9e>
 1011f6c:	2e00      	cmp	r6, #0
 1011f6e:	f107 0501 	add.w	r5, r7, #1
 1011f72:	f2c0 82ae 	blt.w	10124d2 <_dtoa_r+0xbc2>
 1011f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1011f78:	4316      	orrs	r6, r2
 1011f7a:	9a08      	ldr	r2, [sp, #32]
 1011f7c:	4332      	orrs	r2, r6
 1011f7e:	f000 82a8 	beq.w	10124d2 <_dtoa_r+0xbc2>
 1011f82:	2b00      	cmp	r3, #0
 1011f84:	f300 82e8 	bgt.w	1012558 <_dtoa_r+0xc48>
 1011f88:	9b00      	ldr	r3, [sp, #0]
 1011f8a:	703b      	strb	r3, [r7, #0]
 1011f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1011f8e:	42bb      	cmp	r3, r7
 1011f90:	f000 82f0 	beq.w	1012574 <_dtoa_r+0xc64>
 1011f94:	4641      	mov	r1, r8
 1011f96:	2300      	movs	r3, #0
 1011f98:	220a      	movs	r2, #10
 1011f9a:	4620      	mov	r0, r4
 1011f9c:	f001 fa20 	bl	10133e0 <__multadd>
 1011fa0:	45d1      	cmp	r9, sl
 1011fa2:	4649      	mov	r1, r9
 1011fa4:	f04f 0300 	mov.w	r3, #0
 1011fa8:	f04f 020a 	mov.w	r2, #10
 1011fac:	4680      	mov	r8, r0
 1011fae:	4620      	mov	r0, r4
 1011fb0:	f000 81b2 	beq.w	1012318 <_dtoa_r+0xa08>
 1011fb4:	f001 fa14 	bl	10133e0 <__multadd>
 1011fb8:	4651      	mov	r1, sl
 1011fba:	2300      	movs	r3, #0
 1011fbc:	220a      	movs	r2, #10
 1011fbe:	462f      	mov	r7, r5
 1011fc0:	4681      	mov	r9, r0
 1011fc2:	4620      	mov	r0, r4
 1011fc4:	f001 fa0c 	bl	10133e0 <__multadd>
 1011fc8:	4682      	mov	sl, r0
 1011fca:	e7a6      	b.n	1011f1a <_dtoa_r+0x60a>
 1011fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1011fce:	4641      	mov	r1, r8
 1011fd0:	4620      	mov	r0, r4
 1011fd2:	f001 fb91 	bl	10136f8 <__pow5mult>
 1011fd6:	4680      	mov	r8, r0
 1011fd8:	e6f7      	b.n	1011dca <_dtoa_r+0x4ba>
 1011fda:	f646 3368 	movw	r3, #27496	; 0x6b68
 1011fde:	f2c0 1305 	movt	r3, #261	; 0x105
 1011fe2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1011fe6:	2f00      	cmp	r7, #0
 1011fe8:	460a      	mov	r2, r1
 1011fea:	ed93 5b00 	vldr	d5, [r3]
 1011fee:	bfc8      	it	gt
 1011ff0:	2200      	movgt	r2, #0
 1011ff2:	9b08      	ldr	r3, [sp, #32]
 1011ff4:	bfd8      	it	le
 1011ff6:	2201      	movle	r2, #1
 1011ff8:	ea12 73d3 	ands.w	r3, r2, r3, lsr #31
 1011ffc:	f000 81ed 	beq.w	10123da <_dtoa_r+0xaca>
 1012000:	2f00      	cmp	r7, #0
 1012002:	f000 814a 	beq.w	101229a <_dtoa_r+0x98a>
 1012006:	2300      	movs	r3, #0
 1012008:	9302      	str	r3, [sp, #8]
 101200a:	4699      	mov	r9, r3
 101200c:	9b08      	ldr	r3, [sp, #32]
 101200e:	465e      	mov	r6, fp
 1012010:	ea6f 0a03 	mvn.w	sl, r3
 1012014:	e739      	b.n	1011e8a <_dtoa_r+0x57a>
 1012016:	2e00      	cmp	r6, #0
 1012018:	f04f 0301 	mov.w	r3, #1
 101201c:	930d      	str	r3, [sp, #52]	; 0x34
 101201e:	bfa4      	itt	ge
 1012020:	2300      	movge	r3, #0
 1012022:	9309      	strge	r3, [sp, #36]	; 0x24
 1012024:	f6bf ad2a 	bge.w	1011a7c <_dtoa_r+0x16c>
 1012028:	f1cb 0301 	rsb	r3, fp, #1
 101202c:	2600      	movs	r6, #0
 101202e:	9309      	str	r3, [sp, #36]	; 0x24
 1012030:	e524      	b.n	1011a7c <_dtoa_r+0x16c>
 1012032:	f249 76b0 	movw	r6, #38832	; 0x97b0
 1012036:	f2c0 1605 	movt	r6, #261	; 0x105
 101203a:	4630      	mov	r0, r6
 101203c:	b013      	add	sp, #76	; 0x4c
 101203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012042:	9a00      	ldr	r2, [sp, #0]
 1012044:	f1c3 0320 	rsb	r3, r3, #32
 1012048:	fa02 f303 	lsl.w	r3, r2, r3
 101204c:	ee07 3a90 	vmov	s15, r3
 1012050:	e4c0      	b.n	10119d4 <_dtoa_r+0xc4>
 1012052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1012054:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1012058:	9302      	str	r3, [sp, #8]
 101205a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 101205c:	930c      	str	r3, [sp, #48]	; 0x30
 101205e:	e696      	b.n	1011d8e <_dtoa_r+0x47e>
 1012060:	201c      	movs	r0, #28
 1012062:	e6d0      	b.n	1011e06 <_dtoa_r+0x4f6>
 1012064:	f000 8115 	beq.w	1012292 <_dtoa_r+0x982>
 1012068:	9b04      	ldr	r3, [sp, #16]
 101206a:	f646 3268 	movw	r2, #27496	; 0x6b68
 101206e:	f2c0 1205 	movt	r2, #261	; 0x105
 1012072:	ed9d 7b02 	vldr	d7, [sp, #8]
 1012076:	425b      	negs	r3, r3
 1012078:	f003 010f 	and.w	r1, r3, #15
 101207c:	111b      	asrs	r3, r3, #4
 101207e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 1012082:	ed92 5b00 	vldr	d5, [r2]
 1012086:	ee27 5b05 	vmul.f64	d5, d7, d5
 101208a:	f000 82ad 	beq.w	10125e8 <_dtoa_r+0xcd8>
 101208e:	f646 4258 	movw	r2, #27736	; 0x6c58
 1012092:	f2c0 1205 	movt	r2, #261	; 0x105
 1012096:	2000      	movs	r0, #0
 1012098:	2102      	movs	r1, #2
 101209a:	eeb0 7b45 	vmov.f64	d7, d5
 101209e:	f013 0f01 	tst.w	r3, #1
 10120a2:	d005      	beq.n	10120b0 <_dtoa_r+0x7a0>
 10120a4:	ed92 6b00 	vldr	d6, [r2]
 10120a8:	3101      	adds	r1, #1
 10120aa:	4648      	mov	r0, r9
 10120ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 10120b0:	105b      	asrs	r3, r3, #1
 10120b2:	f102 0208 	add.w	r2, r2, #8
 10120b6:	d1f2      	bne.n	101209e <_dtoa_r+0x78e>
 10120b8:	2800      	cmp	r0, #0
 10120ba:	bf08      	it	eq
 10120bc:	eeb0 7b45 	vmoveq.f64	d7, d5
 10120c0:	e583      	b.n	1011bca <_dtoa_r+0x2ba>
 10120c2:	4601      	mov	r1, r0
 10120c4:	462a      	mov	r2, r5
 10120c6:	4620      	mov	r0, r4
 10120c8:	f001 fb16 	bl	10136f8 <__pow5mult>
 10120cc:	f1ba 0f01 	cmp.w	sl, #1
 10120d0:	9002      	str	r0, [sp, #8]
 10120d2:	f340 80f1 	ble.w	10122b8 <_dtoa_r+0x9a8>
 10120d6:	2300      	movs	r3, #0
 10120d8:	930b      	str	r3, [sp, #44]	; 0x2c
 10120da:	9a02      	ldr	r2, [sp, #8]
 10120dc:	6913      	ldr	r3, [r2, #16]
 10120de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 10120e2:	6918      	ldr	r0, [r3, #16]
 10120e4:	f001 fa10 	bl	1013508 <__hi0bits>
 10120e8:	f1c0 0020 	rsb	r0, r0, #32
 10120ec:	e67f      	b.n	1011dee <_dtoa_r+0x4de>
 10120ee:	9902      	ldr	r1, [sp, #8]
 10120f0:	4640      	mov	r0, r8
 10120f2:	f001 fbb1 	bl	1013858 <__mcmp>
 10120f6:	2800      	cmp	r0, #0
 10120f8:	f6bf aea6 	bge.w	1011e48 <_dtoa_r+0x538>
 10120fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 10120fe:	2300      	movs	r3, #0
 1012100:	4641      	mov	r1, r8
 1012102:	220a      	movs	r2, #10
 1012104:	4620      	mov	r0, r4
 1012106:	429e      	cmp	r6, r3
 1012108:	bfcc      	ite	gt
 101210a:	2500      	movgt	r5, #0
 101210c:	f005 0501 	andle.w	r5, r5, #1
 1012110:	f001 f966 	bl	10133e0 <__multadd>
 1012114:	9b04      	ldr	r3, [sp, #16]
 1012116:	1e5e      	subs	r6, r3, #1
 1012118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101211a:	4680      	mov	r8, r0
 101211c:	2b00      	cmp	r3, #0
 101211e:	f040 8252 	bne.w	10125c6 <_dtoa_r+0xcb6>
 1012122:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 1012124:	2d00      	cmp	r5, #0
 1012126:	d068      	beq.n	10121fa <_dtoa_r+0x8ea>
 1012128:	9604      	str	r6, [sp, #16]
 101212a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 101212c:	e693      	b.n	1011e56 <_dtoa_r+0x546>
 101212e:	ed9d 5b00 	vldr	d5, [sp]
 1012132:	2102      	movs	r1, #2
 1012134:	e537      	b.n	1011ba6 <_dtoa_r+0x296>
 1012136:	2301      	movs	r3, #1
 1012138:	930a      	str	r3, [sp, #40]	; 0x28
 101213a:	9b08      	ldr	r3, [sp, #32]
 101213c:	2b00      	cmp	r3, #0
 101213e:	f340 80f1 	ble.w	1012324 <_dtoa_r+0xa14>
 1012142:	461f      	mov	r7, r3
 1012144:	461a      	mov	r2, r3
 1012146:	930e      	str	r3, [sp, #56]	; 0x38
 1012148:	2f0e      	cmp	r7, #14
 101214a:	bf8c      	ite	hi
 101214c:	f04f 0900 	movhi.w	r9, #0
 1012150:	f009 0901 	andls.w	r9, r9, #1
 1012154:	2a17      	cmp	r2, #23
 1012156:	f04f 0100 	mov.w	r1, #0
 101215a:	6461      	str	r1, [r4, #68]	; 0x44
 101215c:	f77f acfb 	ble.w	1011b56 <_dtoa_r+0x246>
 1012160:	2304      	movs	r3, #4
 1012162:	005b      	lsls	r3, r3, #1
 1012164:	3101      	adds	r1, #1
 1012166:	f103 0014 	add.w	r0, r3, #20
 101216a:	4290      	cmp	r0, r2
 101216c:	d9f9      	bls.n	1012162 <_dtoa_r+0x852>
 101216e:	6461      	str	r1, [r4, #68]	; 0x44
 1012170:	e4f1      	b.n	1011b56 <_dtoa_r+0x246>
 1012172:	2301      	movs	r3, #1
 1012174:	930a      	str	r3, [sp, #40]	; 0x28
 1012176:	9a04      	ldr	r2, [sp, #16]
 1012178:	9b08      	ldr	r3, [sp, #32]
 101217a:	4413      	add	r3, r2
 101217c:	930e      	str	r3, [sp, #56]	; 0x38
 101217e:	1c5f      	adds	r7, r3, #1
 1012180:	2f01      	cmp	r7, #1
 1012182:	463a      	mov	r2, r7
 1012184:	bfb8      	it	lt
 1012186:	2201      	movlt	r2, #1
 1012188:	e7de      	b.n	1012148 <_dtoa_r+0x838>
 101218a:	2300      	movs	r3, #0
 101218c:	930a      	str	r3, [sp, #40]	; 0x28
 101218e:	e7f2      	b.n	1012176 <_dtoa_r+0x866>
 1012190:	2300      	movs	r3, #0
 1012192:	930a      	str	r3, [sp, #40]	; 0x28
 1012194:	e7d1      	b.n	101213a <_dtoa_r+0x82a>
 1012196:	2a01      	cmp	r2, #1
 1012198:	ee25 3b03 	vmul.f64	d3, d5, d3
 101219c:	f88b 1000 	strb.w	r1, [fp]
 10121a0:	d011      	beq.n	10121c6 <_dtoa_r+0x8b6>
 10121a2:	445a      	add	r2, fp
 10121a4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 10121a8:	ee27 6b04 	vmul.f64	d6, d7, d4
 10121ac:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 10121b0:	ee17 1a90 	vmov	r1, s15
 10121b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 10121b8:	ee36 7b45 	vsub.f64	d7, d6, d5
 10121bc:	3130      	adds	r1, #48	; 0x30
 10121be:	f803 1b01 	strb.w	r1, [r3], #1
 10121c2:	4293      	cmp	r3, r2
 10121c4:	d1f0      	bne.n	10121a8 <_dtoa_r+0x898>
 10121c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 10121ca:	ee33 5b06 	vadd.f64	d5, d3, d6
 10121ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 10121d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10121d6:	f100 819d 	bmi.w	1012514 <_dtoa_r+0xc04>
 10121da:	ee36 6b43 	vsub.f64	d6, d6, d3
 10121de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 10121e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10121e6:	f77f ad9d 	ble.w	1011d24 <_dtoa_r+0x414>
 10121ea:	e000      	b.n	10121ee <_dtoa_r+0x8de>
 10121ec:	460b      	mov	r3, r1
 10121ee:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 10121f2:	1e59      	subs	r1, r3, #1
 10121f4:	2a30      	cmp	r2, #48	; 0x30
 10121f6:	d0f9      	beq.n	10121ec <_dtoa_r+0x8dc>
 10121f8:	e56b      	b.n	1011cd2 <_dtoa_r+0x3c2>
 10121fa:	465d      	mov	r5, fp
 10121fc:	2601      	movs	r6, #1
 10121fe:	f8dd a008 	ldr.w	sl, [sp, #8]
 1012202:	e002      	b.n	101220a <_dtoa_r+0x8fa>
 1012204:	f001 f8ec 	bl	10133e0 <__multadd>
 1012208:	4680      	mov	r8, r0
 101220a:	4651      	mov	r1, sl
 101220c:	4640      	mov	r0, r8
 101220e:	f7ff fadb 	bl	10117c8 <quorem>
 1012212:	42be      	cmp	r6, r7
 1012214:	f04f 0300 	mov.w	r3, #0
 1012218:	f04f 020a 	mov.w	r2, #10
 101221c:	4641      	mov	r1, r8
 101221e:	f106 0601 	add.w	r6, r6, #1
 1012222:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 1012226:	4620      	mov	r0, r4
 1012228:	f805 cb01 	strb.w	ip, [r5], #1
 101222c:	dbea      	blt.n	1012204 <_dtoa_r+0x8f4>
 101222e:	2600      	movs	r6, #0
 1012230:	f8cd c000 	str.w	ip, [sp]
 1012234:	4641      	mov	r1, r8
 1012236:	2201      	movs	r2, #1
 1012238:	4620      	mov	r0, r4
 101223a:	f001 faaf 	bl	101379c <__lshift>
 101223e:	9902      	ldr	r1, [sp, #8]
 1012240:	4680      	mov	r8, r0
 1012242:	f001 fb09 	bl	1013858 <__mcmp>
 1012246:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 101224a:	2800      	cmp	r0, #0
 101224c:	f340 8118 	ble.w	1012480 <_dtoa_r+0xb70>
 1012250:	1e6b      	subs	r3, r5, #1
 1012252:	e004      	b.n	101225e <_dtoa_r+0x94e>
 1012254:	459b      	cmp	fp, r3
 1012256:	f000 8124 	beq.w	10124a2 <_dtoa_r+0xb92>
 101225a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 101225e:	2a39      	cmp	r2, #57	; 0x39
 1012260:	f103 0501 	add.w	r5, r3, #1
 1012264:	d0f6      	beq.n	1012254 <_dtoa_r+0x944>
 1012266:	3201      	adds	r2, #1
 1012268:	701a      	strb	r2, [r3, #0]
 101226a:	9902      	ldr	r1, [sp, #8]
 101226c:	4620      	mov	r0, r4
 101226e:	f001 f8ad 	bl	10133cc <_Bfree>
 1012272:	f1b9 0f00 	cmp.w	r9, #0
 1012276:	f000 8111 	beq.w	101249c <_dtoa_r+0xb8c>
 101227a:	2e00      	cmp	r6, #0
 101227c:	bf18      	it	ne
 101227e:	454e      	cmpne	r6, r9
 1012280:	f000 81b7 	beq.w	10125f2 <_dtoa_r+0xce2>
 1012284:	4631      	mov	r1, r6
 1012286:	4620      	mov	r0, r4
 1012288:	465e      	mov	r6, fp
 101228a:	f001 f89f 	bl	10133cc <_Bfree>
 101228e:	46ab      	mov	fp, r5
 1012290:	e605      	b.n	1011e9e <_dtoa_r+0x58e>
 1012292:	ed9d 7b00 	vldr	d7, [sp]
 1012296:	2102      	movs	r1, #2
 1012298:	e497      	b.n	1011bca <_dtoa_r+0x2ba>
 101229a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 101229e:	9702      	str	r7, [sp, #8]
 10122a0:	46b9      	mov	r9, r7
 10122a2:	ee25 5b07 	vmul.f64	d5, d5, d7
 10122a6:	ed9d 7b00 	vldr	d7, [sp]
 10122aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 10122ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 10122b2:	f6bf aeab 	bge.w	101200c <_dtoa_r+0x6fc>
 10122b6:	e5df      	b.n	1011e78 <_dtoa_r+0x568>
 10122b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 10122bc:	2900      	cmp	r1, #0
 10122be:	f47f af0a 	bne.w	10120d6 <_dtoa_r+0x7c6>
 10122c2:	f3c2 0313 	ubfx	r3, r2, #0, #20
 10122c6:	2b00      	cmp	r3, #0
 10122c8:	f040 8196 	bne.w	10125f8 <_dtoa_r+0xce8>
 10122cc:	2300      	movs	r3, #0
 10122ce:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 10122d2:	4013      	ands	r3, r2
 10122d4:	2b00      	cmp	r3, #0
 10122d6:	f000 8152 	beq.w	101257e <_dtoa_r+0xc6e>
 10122da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10122dc:	3601      	adds	r6, #1
 10122de:	3301      	adds	r3, #1
 10122e0:	9309      	str	r3, [sp, #36]	; 0x24
 10122e2:	2301      	movs	r3, #1
 10122e4:	930b      	str	r3, [sp, #44]	; 0x2c
 10122e6:	e57e      	b.n	1011de6 <_dtoa_r+0x4d6>
 10122e8:	461a      	mov	r2, r3
 10122ea:	4649      	mov	r1, r9
 10122ec:	4620      	mov	r0, r4
 10122ee:	f001 fa03 	bl	10136f8 <__pow5mult>
 10122f2:	4642      	mov	r2, r8
 10122f4:	4601      	mov	r1, r0
 10122f6:	4681      	mov	r9, r0
 10122f8:	4620      	mov	r0, r4
 10122fa:	f001 f95d 	bl	10135b8 <__multiply>
 10122fe:	4641      	mov	r1, r8
 1012300:	900f      	str	r0, [sp, #60]	; 0x3c
 1012302:	4620      	mov	r0, r4
 1012304:	f001 f862 	bl	10133cc <_Bfree>
 1012308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 101230a:	4698      	mov	r8, r3
 101230c:	e558      	b.n	1011dc0 <_dtoa_r+0x4b0>
 101230e:	4620      	mov	r0, r4
 1012310:	f001 f85c 	bl	10133cc <_Bfree>
 1012314:	2301      	movs	r3, #1
 1012316:	e629      	b.n	1011f6c <_dtoa_r+0x65c>
 1012318:	f001 f862 	bl	10133e0 <__multadd>
 101231c:	462f      	mov	r7, r5
 101231e:	4681      	mov	r9, r0
 1012320:	4682      	mov	sl, r0
 1012322:	e5fa      	b.n	1011f1a <_dtoa_r+0x60a>
 1012324:	2301      	movs	r3, #1
 1012326:	9308      	str	r3, [sp, #32]
 1012328:	461f      	mov	r7, r3
 101232a:	e411      	b.n	1011b50 <_dtoa_r+0x240>
 101232c:	e9dd 1200 	ldrd	r1, r2, [sp]
 1012330:	2900      	cmp	r1, #0
 1012332:	f47f ad56 	bne.w	1011de2 <_dtoa_r+0x4d2>
 1012336:	f3c2 0313 	ubfx	r3, r2, #0, #20
 101233a:	2b00      	cmp	r3, #0
 101233c:	d0c6      	beq.n	10122cc <_dtoa_r+0x9bc>
 101233e:	9b00      	ldr	r3, [sp, #0]
 1012340:	930b      	str	r3, [sp, #44]	; 0x2c
 1012342:	e550      	b.n	1011de6 <_dtoa_r+0x4d6>
 1012344:	2f00      	cmp	r7, #0
 1012346:	f43f acca 	beq.w	1011cde <_dtoa_r+0x3ce>
 101234a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 101234c:	2a00      	cmp	r2, #0
 101234e:	f77f ace9 	ble.w	1011d24 <_dtoa_r+0x414>
 1012352:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 1012356:	3101      	adds	r1, #1
 1012358:	9b04      	ldr	r3, [sp, #16]
 101235a:	f103 3eff 	add.w	lr, r3, #4294967295
 101235e:	ee27 7b06 	vmul.f64	d7, d7, d6
 1012362:	ee06 1a90 	vmov	s13, r1
 1012366:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 101236a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 101236e:	ee06 5b07 	vmla.f64	d5, d6, d7
 1012372:	ed8d 5b00 	vstr	d5, [sp]
 1012376:	9b01      	ldr	r3, [sp, #4]
 1012378:	e9dd 0100 	ldrd	r0, r1, [sp]
 101237c:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 1012380:	e441      	b.n	1011c06 <_dtoa_r+0x2f6>
 1012382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1012384:	2a00      	cmp	r2, #0
 1012386:	f000 8099 	beq.w	10124bc <_dtoa_r+0xbac>
 101238a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101238c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 1012390:	441e      	add	r6, r3
 1012392:	18d3      	adds	r3, r2, r3
 1012394:	9309      	str	r3, [sp, #36]	; 0x24
 1012396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1012398:	920c      	str	r2, [sp, #48]	; 0x30
 101239a:	9302      	str	r3, [sp, #8]
 101239c:	e4f2      	b.n	1011d84 <_dtoa_r+0x474>
 101239e:	2300      	movs	r3, #0
 10123a0:	9302      	str	r3, [sp, #8]
 10123a2:	4699      	mov	r9, r3
 10123a4:	e568      	b.n	1011e78 <_dtoa_r+0x568>
 10123a6:	2100      	movs	r1, #0
 10123a8:	4620      	mov	r0, r4
 10123aa:	6461      	str	r1, [r4, #68]	; 0x44
 10123ac:	f000 ffe8 	bl	1013380 <_Balloc>
 10123b0:	9a04      	ldr	r2, [sp, #16]
 10123b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 10123b4:	2a0e      	cmp	r2, #14
 10123b6:	4683      	mov	fp, r0
 10123b8:	6420      	str	r0, [r4, #64]	; 0x40
 10123ba:	f300 8126 	bgt.w	101260a <_dtoa_r+0xcfa>
 10123be:	2b00      	cmp	r3, #0
 10123c0:	f2c0 8123 	blt.w	101260a <_dtoa_r+0xcfa>
 10123c4:	9a04      	ldr	r2, [sp, #16]
 10123c6:	f646 3368 	movw	r3, #27496	; 0x6b68
 10123ca:	f2c0 1305 	movt	r3, #261	; 0x105
 10123ce:	f04f 37ff 	mov.w	r7, #4294967295
 10123d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 10123d6:	ed93 5b00 	vldr	d5, [r3]
 10123da:	9a04      	ldr	r2, [sp, #16]
 10123dc:	2f01      	cmp	r7, #1
 10123de:	465b      	mov	r3, fp
 10123e0:	ed9d 7b00 	vldr	d7, [sp]
 10123e4:	f102 0201 	add.w	r2, r2, #1
 10123e8:	9204      	str	r2, [sp, #16]
 10123ea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 10123ee:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 10123f2:	ee16 2a10 	vmov	r2, s12
 10123f6:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 10123fa:	ee04 7b45 	vmls.f64	d7, d4, d5
 10123fe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 1012402:	f803 2b01 	strb.w	r2, [r3], #1
 1012406:	d022      	beq.n	101244e <_dtoa_r+0xb3e>
 1012408:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 101240c:	ee27 7b03 	vmul.f64	d7, d7, d3
 1012410:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1012414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1012418:	d079      	beq.n	101250e <_dtoa_r+0xbfe>
 101241a:	2201      	movs	r2, #1
 101241c:	e006      	b.n	101242c <_dtoa_r+0xb1c>
 101241e:	ee27 7b03 	vmul.f64	d7, d7, d3
 1012422:	eeb5 7b40 	vcmp.f64	d7, #0.0
 1012426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101242a:	d070      	beq.n	101250e <_dtoa_r+0xbfe>
 101242c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 1012430:	3201      	adds	r2, #1
 1012432:	42ba      	cmp	r2, r7
 1012434:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 1012438:	ee16 1a10 	vmov	r1, s12
 101243c:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 1012440:	ee04 7b45 	vmls.f64	d7, d4, d5
 1012444:	f101 0130 	add.w	r1, r1, #48	; 0x30
 1012448:	f803 1b01 	strb.w	r1, [r3], #1
 101244c:	d1e7      	bne.n	101241e <_dtoa_r+0xb0e>
 101244e:	ee37 7b07 	vadd.f64	d7, d7, d7
 1012452:	eeb4 7bc5 	vcmpe.f64	d7, d5
 1012456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 101245a:	f340 8098 	ble.w	101258e <_dtoa_r+0xc7e>
 101245e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1012462:	465e      	mov	r6, fp
 1012464:	3b01      	subs	r3, #1
 1012466:	e003      	b.n	1012470 <_dtoa_r+0xb60>
 1012468:	429e      	cmp	r6, r3
 101246a:	d021      	beq.n	10124b0 <_dtoa_r+0xba0>
 101246c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 1012470:	2939      	cmp	r1, #57	; 0x39
 1012472:	f103 0b01 	add.w	fp, r3, #1
 1012476:	d0f7      	beq.n	1012468 <_dtoa_r+0xb58>
 1012478:	1c4a      	adds	r2, r1, #1
 101247a:	b2d2      	uxtb	r2, r2
 101247c:	701a      	strb	r2, [r3, #0]
 101247e:	e512      	b.n	1011ea6 <_dtoa_r+0x596>
 1012480:	d103      	bne.n	101248a <_dtoa_r+0xb7a>
 1012482:	9b00      	ldr	r3, [sp, #0]
 1012484:	07db      	lsls	r3, r3, #31
 1012486:	f53f aee3 	bmi.w	1012250 <_dtoa_r+0x940>
 101248a:	1e6b      	subs	r3, r5, #1
 101248c:	e001      	b.n	1012492 <_dtoa_r+0xb82>
 101248e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 1012492:	2a30      	cmp	r2, #48	; 0x30
 1012494:	f103 0501 	add.w	r5, r3, #1
 1012498:	d0f9      	beq.n	101248e <_dtoa_r+0xb7e>
 101249a:	e6e6      	b.n	101226a <_dtoa_r+0x95a>
 101249c:	465e      	mov	r6, fp
 101249e:	46ab      	mov	fp, r5
 10124a0:	e501      	b.n	1011ea6 <_dtoa_r+0x596>
 10124a2:	9b04      	ldr	r3, [sp, #16]
 10124a4:	3301      	adds	r3, #1
 10124a6:	9304      	str	r3, [sp, #16]
 10124a8:	2331      	movs	r3, #49	; 0x31
 10124aa:	f88b 3000 	strb.w	r3, [fp]
 10124ae:	e6dc      	b.n	101226a <_dtoa_r+0x95a>
 10124b0:	9a04      	ldr	r2, [sp, #16]
 10124b2:	3201      	adds	r2, #1
 10124b4:	9204      	str	r2, [sp, #16]
 10124b6:	2231      	movs	r2, #49	; 0x31
 10124b8:	701a      	strb	r2, [r3, #0]
 10124ba:	e4f4      	b.n	1011ea6 <_dtoa_r+0x596>
 10124bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 10124be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 10124c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10124c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 10124c6:	920c      	str	r2, [sp, #48]	; 0x30
 10124c8:	441e      	add	r6, r3
 10124ca:	18d3      	adds	r3, r2, r3
 10124cc:	9102      	str	r1, [sp, #8]
 10124ce:	9309      	str	r3, [sp, #36]	; 0x24
 10124d0:	e458      	b.n	1011d84 <_dtoa_r+0x474>
 10124d2:	2b00      	cmp	r3, #0
 10124d4:	465e      	mov	r6, fp
 10124d6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 10124da:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 10124de:	dd10      	ble.n	1012502 <_dtoa_r+0xbf2>
 10124e0:	4641      	mov	r1, r8
 10124e2:	2201      	movs	r2, #1
 10124e4:	4620      	mov	r0, r4
 10124e6:	f001 f959 	bl	101379c <__lshift>
 10124ea:	9902      	ldr	r1, [sp, #8]
 10124ec:	4680      	mov	r8, r0
 10124ee:	f001 f9b3 	bl	1013858 <__mcmp>
 10124f2:	2800      	cmp	r0, #0
 10124f4:	dd73      	ble.n	10125de <_dtoa_r+0xcce>
 10124f6:	9b00      	ldr	r3, [sp, #0]
 10124f8:	2b39      	cmp	r3, #57	; 0x39
 10124fa:	d042      	beq.n	1012582 <_dtoa_r+0xc72>
 10124fc:	4633      	mov	r3, r6
 10124fe:	3331      	adds	r3, #49	; 0x31
 1012500:	9300      	str	r3, [sp, #0]
 1012502:	9b00      	ldr	r3, [sp, #0]
 1012504:	464e      	mov	r6, r9
 1012506:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 101250a:	703b      	strb	r3, [r7, #0]
 101250c:	e6ad      	b.n	101226a <_dtoa_r+0x95a>
 101250e:	465e      	mov	r6, fp
 1012510:	469b      	mov	fp, r3
 1012512:	e4c8      	b.n	1011ea6 <_dtoa_r+0x596>
 1012514:	f10e 0201 	add.w	r2, lr, #1
 1012518:	465e      	mov	r6, fp
 101251a:	9204      	str	r2, [sp, #16]
 101251c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 1012520:	e7a0      	b.n	1012464 <_dtoa_r+0xb54>
 1012522:	f8d9 1004 	ldr.w	r1, [r9, #4]
 1012526:	4620      	mov	r0, r4
 1012528:	f000 ff2a 	bl	1013380 <_Balloc>
 101252c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 1012530:	f109 010c 	add.w	r1, r9, #12
 1012534:	3302      	adds	r3, #2
 1012536:	009a      	lsls	r2, r3, #2
 1012538:	4605      	mov	r5, r0
 101253a:	300c      	adds	r0, #12
 101253c:	f7fa e9e0 	blx	100c900 <memcpy>
 1012540:	4629      	mov	r1, r5
 1012542:	2201      	movs	r2, #1
 1012544:	4620      	mov	r0, r4
 1012546:	f001 f929 	bl	101379c <__lshift>
 101254a:	900a      	str	r0, [sp, #40]	; 0x28
 101254c:	e4d6      	b.n	1011efc <_dtoa_r+0x5ec>
 101254e:	f10e 0201 	add.w	r2, lr, #1
 1012552:	465e      	mov	r6, fp
 1012554:	9204      	str	r2, [sp, #16]
 1012556:	e785      	b.n	1012464 <_dtoa_r+0xb54>
 1012558:	9b00      	ldr	r3, [sp, #0]
 101255a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 101255e:	2b39      	cmp	r3, #57	; 0x39
 1012560:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 1012564:	d00d      	beq.n	1012582 <_dtoa_r+0xc72>
 1012566:	9b00      	ldr	r3, [sp, #0]
 1012568:	464e      	mov	r6, r9
 101256a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 101256e:	3301      	adds	r3, #1
 1012570:	703b      	strb	r3, [r7, #0]
 1012572:	e67a      	b.n	101226a <_dtoa_r+0x95a>
 1012574:	464e      	mov	r6, r9
 1012576:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 101257a:	46d1      	mov	r9, sl
 101257c:	e65a      	b.n	1012234 <_dtoa_r+0x924>
 101257e:	930b      	str	r3, [sp, #44]	; 0x2c
 1012580:	e431      	b.n	1011de6 <_dtoa_r+0x4d6>
 1012582:	2239      	movs	r2, #57	; 0x39
 1012584:	464e      	mov	r6, r9
 1012586:	703a      	strb	r2, [r7, #0]
 1012588:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 101258c:	e660      	b.n	1012250 <_dtoa_r+0x940>
 101258e:	eeb4 7b45 	vcmp.f64	d7, d5
 1012592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 1012596:	d1ba      	bne.n	101250e <_dtoa_r+0xbfe>
 1012598:	ee16 2a10 	vmov	r2, s12
 101259c:	465e      	mov	r6, fp
 101259e:	07d1      	lsls	r1, r2, #31
 10125a0:	bf48      	it	mi
 10125a2:	f813 1c01 	ldrbmi.w	r1, [r3, #-1]
 10125a6:	f53f af5d 	bmi.w	1012464 <_dtoa_r+0xb54>
 10125aa:	469b      	mov	fp, r3
 10125ac:	e47b      	b.n	1011ea6 <_dtoa_r+0x596>
 10125ae:	9a00      	ldr	r2, [sp, #0]
 10125b0:	465b      	mov	r3, fp
 10125b2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 10125b6:	1c7d      	adds	r5, r7, #1
 10125b8:	2a39      	cmp	r2, #57	; 0x39
 10125ba:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 10125be:	d0e0      	beq.n	1012582 <_dtoa_r+0xc72>
 10125c0:	2e00      	cmp	r6, #0
 10125c2:	dc9c      	bgt.n	10124fe <_dtoa_r+0xbee>
 10125c4:	e79d      	b.n	1012502 <_dtoa_r+0xbf2>
 10125c6:	4649      	mov	r1, r9
 10125c8:	2300      	movs	r3, #0
 10125ca:	220a      	movs	r2, #10
 10125cc:	4620      	mov	r0, r4
 10125ce:	f000 ff07 	bl	10133e0 <__multadd>
 10125d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 10125d4:	4681      	mov	r9, r0
 10125d6:	2d00      	cmp	r5, #0
 10125d8:	f43f ac81 	beq.w	1011ede <_dtoa_r+0x5ce>
 10125dc:	e5a4      	b.n	1012128 <_dtoa_r+0x818>
 10125de:	d190      	bne.n	1012502 <_dtoa_r+0xbf2>
 10125e0:	9b00      	ldr	r3, [sp, #0]
 10125e2:	07da      	lsls	r2, r3, #31
 10125e4:	d58d      	bpl.n	1012502 <_dtoa_r+0xbf2>
 10125e6:	e786      	b.n	10124f6 <_dtoa_r+0xbe6>
 10125e8:	eeb0 7b45 	vmov.f64	d7, d5
 10125ec:	2102      	movs	r1, #2
 10125ee:	f7ff baec 	b.w	1011bca <_dtoa_r+0x2ba>
 10125f2:	465e      	mov	r6, fp
 10125f4:	46ab      	mov	fp, r5
 10125f6:	e452      	b.n	1011e9e <_dtoa_r+0x58e>
 10125f8:	9b00      	ldr	r3, [sp, #0]
 10125fa:	930b      	str	r3, [sp, #44]	; 0x2c
 10125fc:	e56d      	b.n	10120da <_dtoa_r+0x7ca>
 10125fe:	f43f ac09 	beq.w	1011e14 <_dtoa_r+0x504>
 1012602:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 1012606:	f7ff bbfe 	b.w	1011e06 <_dtoa_r+0x4f6>
 101260a:	2200      	movs	r2, #0
 101260c:	f04f 37ff 	mov.w	r7, #4294967295
 1012610:	9208      	str	r2, [sp, #32]
 1012612:	2201      	movs	r2, #1
 1012614:	970e      	str	r7, [sp, #56]	; 0x38
 1012616:	920a      	str	r2, [sp, #40]	; 0x28
 1012618:	f7ff bb99 	b.w	1011d4e <_dtoa_r+0x43e>

0101261c <__sflush_r>:
 101261c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 1012620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1012624:	460c      	mov	r4, r1
 1012626:	b29a      	uxth	r2, r3
 1012628:	4680      	mov	r8, r0
 101262a:	0711      	lsls	r1, r2, #28
 101262c:	d446      	bmi.n	10126bc <__sflush_r+0xa0>
 101262e:	6862      	ldr	r2, [r4, #4]
 1012630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1012634:	81a3      	strh	r3, [r4, #12]
 1012636:	2a00      	cmp	r2, #0
 1012638:	dd5b      	ble.n	10126f2 <__sflush_r+0xd6>
 101263a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 101263c:	2d00      	cmp	r5, #0
 101263e:	d055      	beq.n	10126ec <__sflush_r+0xd0>
 1012640:	b29b      	uxth	r3, r3
 1012642:	2200      	movs	r2, #0
 1012644:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 1012648:	f8d8 6000 	ldr.w	r6, [r8]
 101264c:	69e1      	ldr	r1, [r4, #28]
 101264e:	f8c8 2000 	str.w	r2, [r8]
 1012652:	bf18      	it	ne
 1012654:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 1012656:	d109      	bne.n	101266c <__sflush_r+0x50>
 1012658:	2301      	movs	r3, #1
 101265a:	463a      	mov	r2, r7
 101265c:	4640      	mov	r0, r8
 101265e:	47a8      	blx	r5
 1012660:	1c43      	adds	r3, r0, #1
 1012662:	4602      	mov	r2, r0
 1012664:	d049      	beq.n	10126fa <__sflush_r+0xde>
 1012666:	89a3      	ldrh	r3, [r4, #12]
 1012668:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 101266a:	69e1      	ldr	r1, [r4, #28]
 101266c:	075f      	lsls	r7, r3, #29
 101266e:	d505      	bpl.n	101267c <__sflush_r+0x60>
 1012670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1012672:	6860      	ldr	r0, [r4, #4]
 1012674:	1a12      	subs	r2, r2, r0
 1012676:	b10b      	cbz	r3, 101267c <__sflush_r+0x60>
 1012678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 101267a:	1ad2      	subs	r2, r2, r3
 101267c:	2300      	movs	r3, #0
 101267e:	4640      	mov	r0, r8
 1012680:	47a8      	blx	r5
 1012682:	1c45      	adds	r5, r0, #1
 1012684:	d04d      	beq.n	1012722 <__sflush_r+0x106>
 1012686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101268a:	2100      	movs	r1, #0
 101268c:	6922      	ldr	r2, [r4, #16]
 101268e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 1012692:	6061      	str	r1, [r4, #4]
 1012694:	81a3      	strh	r3, [r4, #12]
 1012696:	6022      	str	r2, [r4, #0]
 1012698:	04da      	lsls	r2, r3, #19
 101269a:	d500      	bpl.n	101269e <__sflush_r+0x82>
 101269c:	6520      	str	r0, [r4, #80]	; 0x50
 101269e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 10126a0:	f8c8 6000 	str.w	r6, [r8]
 10126a4:	b311      	cbz	r1, 10126ec <__sflush_r+0xd0>
 10126a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 10126aa:	4299      	cmp	r1, r3
 10126ac:	d002      	beq.n	10126b4 <__sflush_r+0x98>
 10126ae:	4640      	mov	r0, r8
 10126b0:	f000 f9e6 	bl	1012a80 <_free_r>
 10126b4:	2000      	movs	r0, #0
 10126b6:	6320      	str	r0, [r4, #48]	; 0x30
 10126b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10126bc:	6926      	ldr	r6, [r4, #16]
 10126be:	b1ae      	cbz	r6, 10126ec <__sflush_r+0xd0>
 10126c0:	0791      	lsls	r1, r2, #30
 10126c2:	6825      	ldr	r5, [r4, #0]
 10126c4:	6026      	str	r6, [r4, #0]
 10126c6:	bf0c      	ite	eq
 10126c8:	6963      	ldreq	r3, [r4, #20]
 10126ca:	2300      	movne	r3, #0
 10126cc:	1bad      	subs	r5, r5, r6
 10126ce:	60a3      	str	r3, [r4, #8]
 10126d0:	e00a      	b.n	10126e8 <__sflush_r+0xcc>
 10126d2:	462b      	mov	r3, r5
 10126d4:	4632      	mov	r2, r6
 10126d6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 10126d8:	4640      	mov	r0, r8
 10126da:	69e1      	ldr	r1, [r4, #28]
 10126dc:	47b8      	blx	r7
 10126de:	2800      	cmp	r0, #0
 10126e0:	eba5 0500 	sub.w	r5, r5, r0
 10126e4:	4406      	add	r6, r0
 10126e6:	dd14      	ble.n	1012712 <__sflush_r+0xf6>
 10126e8:	2d00      	cmp	r5, #0
 10126ea:	dcf2      	bgt.n	10126d2 <__sflush_r+0xb6>
 10126ec:	2000      	movs	r0, #0
 10126ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10126f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 10126f4:	2a00      	cmp	r2, #0
 10126f6:	dca0      	bgt.n	101263a <__sflush_r+0x1e>
 10126f8:	e7f8      	b.n	10126ec <__sflush_r+0xd0>
 10126fa:	f8d8 3000 	ldr.w	r3, [r8]
 10126fe:	2b00      	cmp	r3, #0
 1012700:	d0b1      	beq.n	1012666 <__sflush_r+0x4a>
 1012702:	2b16      	cmp	r3, #22
 1012704:	bf18      	it	ne
 1012706:	2b1d      	cmpne	r3, #29
 1012708:	bf04      	itt	eq
 101270a:	f8c8 6000 	streq.w	r6, [r8]
 101270e:	4638      	moveq	r0, r7
 1012710:	d0ed      	beq.n	10126ee <__sflush_r+0xd2>
 1012712:	89a3      	ldrh	r3, [r4, #12]
 1012714:	f04f 30ff 	mov.w	r0, #4294967295
 1012718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 101271c:	81a3      	strh	r3, [r4, #12]
 101271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1012722:	f8d8 5000 	ldr.w	r5, [r8]
 1012726:	2d1d      	cmp	r5, #29
 1012728:	bf88      	it	hi
 101272a:	f9b4 200c 	ldrshhi.w	r2, [r4, #12]
 101272e:	d905      	bls.n	101273c <__sflush_r+0x120>
 1012730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1012734:	f04f 30ff 	mov.w	r0, #4294967295
 1012738:	81a2      	strh	r2, [r4, #12]
 101273a:	e7d8      	b.n	10126ee <__sflush_r+0xd2>
 101273c:	2301      	movs	r3, #1
 101273e:	f2c2 0340 	movt	r3, #8256	; 0x2040
 1012742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1012746:	40eb      	lsrs	r3, r5
 1012748:	43db      	mvns	r3, r3
 101274a:	f013 0301 	ands.w	r3, r3, #1
 101274e:	d1ef      	bne.n	1012730 <__sflush_r+0x114>
 1012750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 1012754:	6921      	ldr	r1, [r4, #16]
 1012756:	6063      	str	r3, [r4, #4]
 1012758:	04d3      	lsls	r3, r2, #19
 101275a:	81a2      	strh	r2, [r4, #12]
 101275c:	6021      	str	r1, [r4, #0]
 101275e:	d59e      	bpl.n	101269e <__sflush_r+0x82>
 1012760:	2d00      	cmp	r5, #0
 1012762:	d19c      	bne.n	101269e <__sflush_r+0x82>
 1012764:	e79a      	b.n	101269c <__sflush_r+0x80>
 1012766:	bf00      	nop

01012768 <_fflush_r>:
 1012768:	b510      	push	{r4, lr}
 101276a:	4604      	mov	r4, r0
 101276c:	b082      	sub	sp, #8
 101276e:	b108      	cbz	r0, 1012774 <_fflush_r+0xc>
 1012770:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1012772:	b123      	cbz	r3, 101277e <_fflush_r+0x16>
 1012774:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 1012778:	b948      	cbnz	r0, 101278e <_fflush_r+0x26>
 101277a:	b002      	add	sp, #8
 101277c:	bd10      	pop	{r4, pc}
 101277e:	9101      	str	r1, [sp, #4]
 1012780:	f000 f904 	bl	101298c <__sinit>
 1012784:	9901      	ldr	r1, [sp, #4]
 1012786:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 101278a:	2800      	cmp	r0, #0
 101278c:	d0f5      	beq.n	101277a <_fflush_r+0x12>
 101278e:	4620      	mov	r0, r4
 1012790:	b002      	add	sp, #8
 1012792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1012796:	f7ff bf41 	b.w	101261c <__sflush_r>
 101279a:	bf00      	nop

0101279c <fflush>:
 101279c:	b138      	cbz	r0, 10127ae <fflush+0x12>
 101279e:	f649 4330 	movw	r3, #39984	; 0x9c30
 10127a2:	f2c0 1305 	movt	r3, #261	; 0x105
 10127a6:	4601      	mov	r1, r0
 10127a8:	6818      	ldr	r0, [r3, #0]
 10127aa:	f7ff bfdd 	b.w	1012768 <_fflush_r>
 10127ae:	f246 73f8 	movw	r3, #26616	; 0x67f8
 10127b2:	f2c0 1305 	movt	r3, #261	; 0x105
 10127b6:	f242 7169 	movw	r1, #10089	; 0x2769
 10127ba:	f2c0 1101 	movt	r1, #257	; 0x101
 10127be:	6818      	ldr	r0, [r3, #0]
 10127c0:	f000 bc10 	b.w	1012fe4 <_fwalk_reent>

010127c4 <__fp_lock>:
 10127c4:	2000      	movs	r0, #0
 10127c6:	4770      	bx	lr

010127c8 <_cleanup_r>:
 10127c8:	f246 21e1 	movw	r1, #25313	; 0x62e1
 10127cc:	f2c0 1101 	movt	r1, #257	; 0x101
 10127d0:	f000 bc08 	b.w	1012fe4 <_fwalk_reent>

010127d4 <__sinit.part.0>:
 10127d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10127d8:	2400      	movs	r4, #0
 10127da:	6845      	ldr	r5, [r0, #4]
 10127dc:	4607      	mov	r7, r0
 10127de:	2203      	movs	r2, #3
 10127e0:	4621      	mov	r1, r4
 10127e2:	f8c0 22e4 	str.w	r2, [r0, #740]	; 0x2e4
 10127e6:	f242 73c9 	movw	r3, #10185	; 0x27c9
 10127ea:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 10127ee:	f2c0 1301 	movt	r3, #257	; 0x101
 10127f2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 10127f6:	2208      	movs	r2, #8
 10127f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 10127fa:	2304      	movs	r3, #4
 10127fc:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 1012800:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 1012804:	60eb      	str	r3, [r5, #12]
 1012806:	f244 1b19 	movw	fp, #16665	; 0x4119
 101280a:	666c      	str	r4, [r5, #100]	; 0x64
 101280c:	f2c0 1b01 	movt	fp, #257	; 0x101
 1012810:	602c      	str	r4, [r5, #0]
 1012812:	f244 1a41 	movw	sl, #16705	; 0x4141
 1012816:	606c      	str	r4, [r5, #4]
 1012818:	f2c0 1a01 	movt	sl, #257	; 0x101
 101281c:	60ac      	str	r4, [r5, #8]
 101281e:	f244 1981 	movw	r9, #16769	; 0x4181
 1012822:	612c      	str	r4, [r5, #16]
 1012824:	f2c0 1901 	movt	r9, #257	; 0x101
 1012828:	616c      	str	r4, [r5, #20]
 101282a:	f244 18a1 	movw	r8, #16801	; 0x41a1
 101282e:	61ac      	str	r4, [r5, #24]
 1012830:	f2c0 1801 	movt	r8, #257	; 0x101
 1012834:	f7fa fb54 	bl	100cee0 <memset>
 1012838:	68be      	ldr	r6, [r7, #8]
 101283a:	4621      	mov	r1, r4
 101283c:	61ed      	str	r5, [r5, #28]
 101283e:	f8c5 b020 	str.w	fp, [r5, #32]
 1012842:	2208      	movs	r2, #8
 1012844:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 1012848:	2309      	movs	r3, #9
 101284a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 101284e:	f2c0 0301 	movt	r3, #1
 1012852:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 1012856:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 101285a:	60f3      	str	r3, [r6, #12]
 101285c:	6674      	str	r4, [r6, #100]	; 0x64
 101285e:	e9c6 4400 	strd	r4, r4, [r6]
 1012862:	60b4      	str	r4, [r6, #8]
 1012864:	e9c6 4404 	strd	r4, r4, [r6, #16]
 1012868:	61b4      	str	r4, [r6, #24]
 101286a:	f7fa fb39 	bl	100cee0 <memset>
 101286e:	68fd      	ldr	r5, [r7, #12]
 1012870:	4621      	mov	r1, r4
 1012872:	61f6      	str	r6, [r6, #28]
 1012874:	f8c6 b020 	str.w	fp, [r6, #32]
 1012878:	2312      	movs	r3, #18
 101287a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 101287e:	f2c0 0302 	movt	r3, #2
 1012882:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 1012886:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 101288a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 101288e:	2208      	movs	r2, #8
 1012890:	60eb      	str	r3, [r5, #12]
 1012892:	666c      	str	r4, [r5, #100]	; 0x64
 1012894:	e9c5 4400 	strd	r4, r4, [r5]
 1012898:	60ac      	str	r4, [r5, #8]
 101289a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 101289e:	61ac      	str	r4, [r5, #24]
 10128a0:	f7fa fb1e 	bl	100cee0 <memset>
 10128a4:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 10128a8:	2301      	movs	r3, #1
 10128aa:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 10128ae:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 10128b2:	63bb      	str	r3, [r7, #56]	; 0x38
 10128b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

010128b8 <__fp_unlock>:
 10128b8:	2000      	movs	r0, #0
 10128ba:	4770      	bx	lr

010128bc <__sfmoreglue>:
 10128bc:	1e4a      	subs	r2, r1, #1
 10128be:	b570      	push	{r4, r5, r6, lr}
 10128c0:	2568      	movs	r5, #104	; 0x68
 10128c2:	fb05 f502 	mul.w	r5, r5, r2
 10128c6:	460e      	mov	r6, r1
 10128c8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 10128cc:	f7f9 fb04 	bl	100bed8 <_malloc_r>
 10128d0:	4604      	mov	r4, r0
 10128d2:	b140      	cbz	r0, 10128e6 <__sfmoreglue+0x2a>
 10128d4:	300c      	adds	r0, #12
 10128d6:	2100      	movs	r1, #0
 10128d8:	6066      	str	r6, [r4, #4]
 10128da:	f105 0268 	add.w	r2, r5, #104	; 0x68
 10128de:	60a0      	str	r0, [r4, #8]
 10128e0:	6021      	str	r1, [r4, #0]
 10128e2:	f7fa fafd 	bl	100cee0 <memset>
 10128e6:	4620      	mov	r0, r4
 10128e8:	bd70      	pop	{r4, r5, r6, pc}
 10128ea:	bf00      	nop

010128ec <__sfp>:
 10128ec:	f246 73f8 	movw	r3, #26616	; 0x67f8
 10128f0:	f2c0 1305 	movt	r3, #261	; 0x105
 10128f4:	b570      	push	{r4, r5, r6, lr}
 10128f6:	4606      	mov	r6, r0
 10128f8:	681d      	ldr	r5, [r3, #0]
 10128fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 10128fc:	b353      	cbz	r3, 1012954 <__sfp+0x68>
 10128fe:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 1012902:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 1012906:	3b01      	subs	r3, #1
 1012908:	d504      	bpl.n	1012914 <__sfp+0x28>
 101290a:	e01f      	b.n	101294c <__sfp+0x60>
 101290c:	3b01      	subs	r3, #1
 101290e:	3468      	adds	r4, #104	; 0x68
 1012910:	1c5a      	adds	r2, r3, #1
 1012912:	d01b      	beq.n	101294c <__sfp+0x60>
 1012914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1012918:	2a00      	cmp	r2, #0
 101291a:	d1f7      	bne.n	101290c <__sfp+0x20>
 101291c:	2500      	movs	r5, #0
 101291e:	2301      	movs	r3, #1
 1012920:	6665      	str	r5, [r4, #100]	; 0x64
 1012922:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 1012926:	6025      	str	r5, [r4, #0]
 1012928:	4629      	mov	r1, r5
 101292a:	60e3      	str	r3, [r4, #12]
 101292c:	2208      	movs	r2, #8
 101292e:	6065      	str	r5, [r4, #4]
 1012930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 1012934:	60a5      	str	r5, [r4, #8]
 1012936:	e9c4 5504 	strd	r5, r5, [r4, #16]
 101293a:	61a5      	str	r5, [r4, #24]
 101293c:	f7fa fad0 	bl	100cee0 <memset>
 1012940:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 1012944:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 1012948:	4620      	mov	r0, r4
 101294a:	bd70      	pop	{r4, r5, r6, pc}
 101294c:	6828      	ldr	r0, [r5, #0]
 101294e:	b128      	cbz	r0, 101295c <__sfp+0x70>
 1012950:	4605      	mov	r5, r0
 1012952:	e7d6      	b.n	1012902 <__sfp+0x16>
 1012954:	4628      	mov	r0, r5
 1012956:	f7ff ff3d 	bl	10127d4 <__sinit.part.0>
 101295a:	e7d0      	b.n	10128fe <__sfp+0x12>
 101295c:	2104      	movs	r1, #4
 101295e:	4630      	mov	r0, r6
 1012960:	f7ff ffac 	bl	10128bc <__sfmoreglue>
 1012964:	6028      	str	r0, [r5, #0]
 1012966:	2800      	cmp	r0, #0
 1012968:	d1f2      	bne.n	1012950 <__sfp+0x64>
 101296a:	230c      	movs	r3, #12
 101296c:	4604      	mov	r4, r0
 101296e:	6033      	str	r3, [r6, #0]
 1012970:	e7ea      	b.n	1012948 <__sfp+0x5c>
 1012972:	bf00      	nop

01012974 <_cleanup>:
 1012974:	f246 73f8 	movw	r3, #26616	; 0x67f8
 1012978:	f2c0 1305 	movt	r3, #261	; 0x105
 101297c:	f246 21e1 	movw	r1, #25313	; 0x62e1
 1012980:	f2c0 1101 	movt	r1, #257	; 0x101
 1012984:	6818      	ldr	r0, [r3, #0]
 1012986:	f000 bb2d 	b.w	1012fe4 <_fwalk_reent>
 101298a:	bf00      	nop

0101298c <__sinit>:
 101298c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 101298e:	b103      	cbz	r3, 1012992 <__sinit+0x6>
 1012990:	4770      	bx	lr
 1012992:	e71f      	b.n	10127d4 <__sinit.part.0>

01012994 <__sfp_lock_acquire>:
 1012994:	4770      	bx	lr
 1012996:	bf00      	nop

01012998 <__sfp_lock_release>:
 1012998:	4770      	bx	lr
 101299a:	bf00      	nop

0101299c <__sinit_lock_acquire>:
 101299c:	4770      	bx	lr
 101299e:	bf00      	nop

010129a0 <__sinit_lock_release>:
 10129a0:	4770      	bx	lr
 10129a2:	bf00      	nop

010129a4 <__fp_lock_all>:
 10129a4:	f649 4330 	movw	r3, #39984	; 0x9c30
 10129a8:	f2c0 1305 	movt	r3, #261	; 0x105
 10129ac:	f242 71c5 	movw	r1, #10181	; 0x27c5
 10129b0:	f2c0 1101 	movt	r1, #257	; 0x101
 10129b4:	6818      	ldr	r0, [r3, #0]
 10129b6:	f000 baf1 	b.w	1012f9c <_fwalk>
 10129ba:	bf00      	nop

010129bc <__fp_unlock_all>:
 10129bc:	f649 4330 	movw	r3, #39984	; 0x9c30
 10129c0:	f2c0 1305 	movt	r3, #261	; 0x105
 10129c4:	f642 01b9 	movw	r1, #10425	; 0x28b9
 10129c8:	f2c0 1101 	movt	r1, #257	; 0x101
 10129cc:	6818      	ldr	r0, [r3, #0]
 10129ce:	f000 bae5 	b.w	1012f9c <_fwalk>
 10129d2:	bf00      	nop

010129d4 <_malloc_trim_r>:
 10129d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10129d6:	f24a 17ec 	movw	r7, #41452	; 0xa1ec
 10129da:	f2c0 1705 	movt	r7, #261	; 0x105
 10129de:	460c      	mov	r4, r1
 10129e0:	4606      	mov	r6, r0
 10129e2:	f7fa facd 	bl	100cf80 <__malloc_lock>
 10129e6:	68bb      	ldr	r3, [r7, #8]
 10129e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 10129ec:	310f      	adds	r1, #15
 10129ee:	685d      	ldr	r5, [r3, #4]
 10129f0:	f025 0503 	bic.w	r5, r5, #3
 10129f4:	4429      	add	r1, r5
 10129f6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 10129fa:	f021 010f 	bic.w	r1, r1, #15
 10129fe:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 1012a02:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 1012a06:	db07      	blt.n	1012a18 <_malloc_trim_r+0x44>
 1012a08:	2100      	movs	r1, #0
 1012a0a:	4630      	mov	r0, r6
 1012a0c:	f7fa fb1e 	bl	100d04c <_sbrk_r>
 1012a10:	68bb      	ldr	r3, [r7, #8]
 1012a12:	442b      	add	r3, r5
 1012a14:	4298      	cmp	r0, r3
 1012a16:	d004      	beq.n	1012a22 <_malloc_trim_r+0x4e>
 1012a18:	4630      	mov	r0, r6
 1012a1a:	f7fa fab3 	bl	100cf84 <__malloc_unlock>
 1012a1e:	2000      	movs	r0, #0
 1012a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1012a22:	4261      	negs	r1, r4
 1012a24:	4630      	mov	r0, r6
 1012a26:	f7fa fb11 	bl	100d04c <_sbrk_r>
 1012a2a:	3001      	adds	r0, #1
 1012a2c:	d010      	beq.n	1012a50 <_malloc_trim_r+0x7c>
 1012a2e:	68ba      	ldr	r2, [r7, #8]
 1012a30:	f240 23f8 	movw	r3, #760	; 0x2f8
 1012a34:	f2c0 1306 	movt	r3, #262	; 0x106
 1012a38:	1b2d      	subs	r5, r5, r4
 1012a3a:	4630      	mov	r0, r6
 1012a3c:	f045 0501 	orr.w	r5, r5, #1
 1012a40:	6819      	ldr	r1, [r3, #0]
 1012a42:	6055      	str	r5, [r2, #4]
 1012a44:	1b09      	subs	r1, r1, r4
 1012a46:	6019      	str	r1, [r3, #0]
 1012a48:	f7fa fa9c 	bl	100cf84 <__malloc_unlock>
 1012a4c:	2001      	movs	r0, #1
 1012a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1012a50:	2100      	movs	r1, #0
 1012a52:	4630      	mov	r0, r6
 1012a54:	f7fa fafa 	bl	100d04c <_sbrk_r>
 1012a58:	68ba      	ldr	r2, [r7, #8]
 1012a5a:	1a83      	subs	r3, r0, r2
 1012a5c:	2b0f      	cmp	r3, #15
 1012a5e:	dddb      	ble.n	1012a18 <_malloc_trim_r+0x44>
 1012a60:	f24a 54f4 	movw	r4, #42484	; 0xa5f4
 1012a64:	f2c0 1405 	movt	r4, #261	; 0x105
 1012a68:	f240 21f8 	movw	r1, #760	; 0x2f8
 1012a6c:	f2c0 1106 	movt	r1, #262	; 0x106
 1012a70:	6824      	ldr	r4, [r4, #0]
 1012a72:	f043 0301 	orr.w	r3, r3, #1
 1012a76:	6053      	str	r3, [r2, #4]
 1012a78:	1b00      	subs	r0, r0, r4
 1012a7a:	6008      	str	r0, [r1, #0]
 1012a7c:	e7cc      	b.n	1012a18 <_malloc_trim_r+0x44>
 1012a7e:	bf00      	nop

01012a80 <_free_r>:
 1012a80:	2900      	cmp	r1, #0
 1012a82:	d060      	beq.n	1012b46 <_free_r+0xc6>
 1012a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1012a86:	460f      	mov	r7, r1
 1012a88:	4606      	mov	r6, r0
 1012a8a:	f7fa fa79 	bl	100cf80 <__malloc_lock>
 1012a8e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 1012a92:	f24a 12ec 	movw	r2, #41452	; 0xa1ec
 1012a96:	f2c0 1205 	movt	r2, #261	; 0x105
 1012a9a:	f1a7 0008 	sub.w	r0, r7, #8
 1012a9e:	f02c 0301 	bic.w	r3, ip, #1
 1012aa2:	18c4      	adds	r4, r0, r3
 1012aa4:	6891      	ldr	r1, [r2, #8]
 1012aa6:	6865      	ldr	r5, [r4, #4]
 1012aa8:	42a1      	cmp	r1, r4
 1012aaa:	f025 0503 	bic.w	r5, r5, #3
 1012aae:	d07f      	beq.n	1012bb0 <_free_r+0x130>
 1012ab0:	f01c 0f01 	tst.w	ip, #1
 1012ab4:	6065      	str	r5, [r4, #4]
 1012ab6:	eb04 0105 	add.w	r1, r4, r5
 1012aba:	d133      	bne.n	1012b24 <_free_r+0xa4>
 1012abc:	f857 7c08 	ldr.w	r7, [r7, #-8]
 1012ac0:	f102 0c08 	add.w	ip, r2, #8
 1012ac4:	6849      	ldr	r1, [r1, #4]
 1012ac6:	1bc0      	subs	r0, r0, r7
 1012ac8:	443b      	add	r3, r7
 1012aca:	f001 0101 	and.w	r1, r1, #1
 1012ace:	6887      	ldr	r7, [r0, #8]
 1012ad0:	4567      	cmp	r7, ip
 1012ad2:	d061      	beq.n	1012b98 <_free_r+0x118>
 1012ad4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 1012ad8:	f8c7 e00c 	str.w	lr, [r7, #12]
 1012adc:	f8ce 7008 	str.w	r7, [lr, #8]
 1012ae0:	2900      	cmp	r1, #0
 1012ae2:	f000 8090 	beq.w	1012c06 <_free_r+0x186>
 1012ae6:	f043 0101 	orr.w	r1, r3, #1
 1012aea:	6041      	str	r1, [r0, #4]
 1012aec:	6023      	str	r3, [r4, #0]
 1012aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1012af2:	d231      	bcs.n	1012b58 <_free_r+0xd8>
 1012af4:	08db      	lsrs	r3, r3, #3
 1012af6:	2101      	movs	r1, #1
 1012af8:	185d      	adds	r5, r3, r1
 1012afa:	6854      	ldr	r4, [r2, #4]
 1012afc:	109b      	asrs	r3, r3, #2
 1012afe:	f852 7035 	ldr.w	r7, [r2, r5, lsl #3]
 1012b02:	fa01 f303 	lsl.w	r3, r1, r3
 1012b06:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 1012b0a:	4323      	orrs	r3, r4
 1012b0c:	3908      	subs	r1, #8
 1012b0e:	6053      	str	r3, [r2, #4]
 1012b10:	e9c0 7102 	strd	r7, r1, [r0, #8]
 1012b14:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
 1012b18:	60f8      	str	r0, [r7, #12]
 1012b1a:	4630      	mov	r0, r6
 1012b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1012b20:	f7fa ba30 	b.w	100cf84 <__malloc_unlock>
 1012b24:	6849      	ldr	r1, [r1, #4]
 1012b26:	07c9      	lsls	r1, r1, #31
 1012b28:	d40e      	bmi.n	1012b48 <_free_r+0xc8>
 1012b2a:	442b      	add	r3, r5
 1012b2c:	f102 0c08 	add.w	ip, r2, #8
 1012b30:	68a1      	ldr	r1, [r4, #8]
 1012b32:	f043 0501 	orr.w	r5, r3, #1
 1012b36:	4561      	cmp	r1, ip
 1012b38:	d06d      	beq.n	1012c16 <_free_r+0x196>
 1012b3a:	68e4      	ldr	r4, [r4, #12]
 1012b3c:	60cc      	str	r4, [r1, #12]
 1012b3e:	60a1      	str	r1, [r4, #8]
 1012b40:	6045      	str	r5, [r0, #4]
 1012b42:	50c3      	str	r3, [r0, r3]
 1012b44:	e7d3      	b.n	1012aee <_free_r+0x6e>
 1012b46:	4770      	bx	lr
 1012b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1012b4c:	f043 0101 	orr.w	r1, r3, #1
 1012b50:	f847 1c04 	str.w	r1, [r7, #-4]
 1012b54:	6023      	str	r3, [r4, #0]
 1012b56:	d3cd      	bcc.n	1012af4 <_free_r+0x74>
 1012b58:	0a59      	lsrs	r1, r3, #9
 1012b5a:	2904      	cmp	r1, #4
 1012b5c:	d848      	bhi.n	1012bf0 <_free_r+0x170>
 1012b5e:	0999      	lsrs	r1, r3, #6
 1012b60:	f101 0439 	add.w	r4, r1, #57	; 0x39
 1012b64:	f101 0538 	add.w	r5, r1, #56	; 0x38
 1012b68:	00e1      	lsls	r1, r4, #3
 1012b6a:	1854      	adds	r4, r2, r1
 1012b6c:	5851      	ldr	r1, [r2, r1]
 1012b6e:	3c08      	subs	r4, #8
 1012b70:	428c      	cmp	r4, r1
 1012b72:	d057      	beq.n	1012c24 <_free_r+0x1a4>
 1012b74:	684a      	ldr	r2, [r1, #4]
 1012b76:	f022 0203 	bic.w	r2, r2, #3
 1012b7a:	429a      	cmp	r2, r3
 1012b7c:	d902      	bls.n	1012b84 <_free_r+0x104>
 1012b7e:	6889      	ldr	r1, [r1, #8]
 1012b80:	428c      	cmp	r4, r1
 1012b82:	d1f7      	bne.n	1012b74 <_free_r+0xf4>
 1012b84:	68cc      	ldr	r4, [r1, #12]
 1012b86:	e9c0 1402 	strd	r1, r4, [r0, #8]
 1012b8a:	60a0      	str	r0, [r4, #8]
 1012b8c:	60c8      	str	r0, [r1, #12]
 1012b8e:	4630      	mov	r0, r6
 1012b90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1012b94:	f7fa b9f6 	b.w	100cf84 <__malloc_unlock>
 1012b98:	2900      	cmp	r1, #0
 1012b9a:	d164      	bne.n	1012c66 <_free_r+0x1e6>
 1012b9c:	68a1      	ldr	r1, [r4, #8]
 1012b9e:	442b      	add	r3, r5
 1012ba0:	68e2      	ldr	r2, [r4, #12]
 1012ba2:	f043 0401 	orr.w	r4, r3, #1
 1012ba6:	60ca      	str	r2, [r1, #12]
 1012ba8:	6091      	str	r1, [r2, #8]
 1012baa:	6044      	str	r4, [r0, #4]
 1012bac:	50c3      	str	r3, [r0, r3]
 1012bae:	e7b4      	b.n	1012b1a <_free_r+0x9a>
 1012bb0:	f01c 0f01 	tst.w	ip, #1
 1012bb4:	442b      	add	r3, r5
 1012bb6:	d107      	bne.n	1012bc8 <_free_r+0x148>
 1012bb8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 1012bbc:	1a40      	subs	r0, r0, r1
 1012bbe:	440b      	add	r3, r1
 1012bc0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 1012bc4:	60e1      	str	r1, [r4, #12]
 1012bc6:	608c      	str	r4, [r1, #8]
 1012bc8:	f24a 51f8 	movw	r1, #42488	; 0xa5f8
 1012bcc:	f2c0 1105 	movt	r1, #261	; 0x105
 1012bd0:	f043 0401 	orr.w	r4, r3, #1
 1012bd4:	6044      	str	r4, [r0, #4]
 1012bd6:	6809      	ldr	r1, [r1, #0]
 1012bd8:	6090      	str	r0, [r2, #8]
 1012bda:	4299      	cmp	r1, r3
 1012bdc:	d89d      	bhi.n	1012b1a <_free_r+0x9a>
 1012bde:	f240 23f4 	movw	r3, #756	; 0x2f4
 1012be2:	f2c0 1306 	movt	r3, #262	; 0x106
 1012be6:	4630      	mov	r0, r6
 1012be8:	6819      	ldr	r1, [r3, #0]
 1012bea:	f7ff fef3 	bl	10129d4 <_malloc_trim_r>
 1012bee:	e794      	b.n	1012b1a <_free_r+0x9a>
 1012bf0:	2914      	cmp	r1, #20
 1012bf2:	d90a      	bls.n	1012c0a <_free_r+0x18a>
 1012bf4:	2954      	cmp	r1, #84	; 0x54
 1012bf6:	d81d      	bhi.n	1012c34 <_free_r+0x1b4>
 1012bf8:	0b19      	lsrs	r1, r3, #12
 1012bfa:	f101 046f 	add.w	r4, r1, #111	; 0x6f
 1012bfe:	f101 056e 	add.w	r5, r1, #110	; 0x6e
 1012c02:	00e1      	lsls	r1, r4, #3
 1012c04:	e7b1      	b.n	1012b6a <_free_r+0xea>
 1012c06:	442b      	add	r3, r5
 1012c08:	e792      	b.n	1012b30 <_free_r+0xb0>
 1012c0a:	f101 045c 	add.w	r4, r1, #92	; 0x5c
 1012c0e:	f101 055b 	add.w	r5, r1, #91	; 0x5b
 1012c12:	00e1      	lsls	r1, r4, #3
 1012c14:	e7a9      	b.n	1012b6a <_free_r+0xea>
 1012c16:	e9c2 0004 	strd	r0, r0, [r2, #16]
 1012c1a:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 1012c1e:	6045      	str	r5, [r0, #4]
 1012c20:	50c3      	str	r3, [r0, r3]
 1012c22:	e77a      	b.n	1012b1a <_free_r+0x9a>
 1012c24:	6853      	ldr	r3, [r2, #4]
 1012c26:	10ad      	asrs	r5, r5, #2
 1012c28:	2701      	movs	r7, #1
 1012c2a:	fa07 f505 	lsl.w	r5, r7, r5
 1012c2e:	431d      	orrs	r5, r3
 1012c30:	6055      	str	r5, [r2, #4]
 1012c32:	e7a8      	b.n	1012b86 <_free_r+0x106>
 1012c34:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 1012c38:	d806      	bhi.n	1012c48 <_free_r+0x1c8>
 1012c3a:	0bd9      	lsrs	r1, r3, #15
 1012c3c:	f101 0478 	add.w	r4, r1, #120	; 0x78
 1012c40:	f101 0577 	add.w	r5, r1, #119	; 0x77
 1012c44:	00e1      	lsls	r1, r4, #3
 1012c46:	e790      	b.n	1012b6a <_free_r+0xea>
 1012c48:	f240 5454 	movw	r4, #1364	; 0x554
 1012c4c:	42a1      	cmp	r1, r4
 1012c4e:	bf9d      	ittte	ls
 1012c50:	0c99      	lsrls	r1, r3, #18
 1012c52:	f101 047d 	addls.w	r4, r1, #125	; 0x7d
 1012c56:	f101 057c 	addls.w	r5, r1, #124	; 0x7c
 1012c5a:	f44f 717e 	movhi.w	r1, #1016	; 0x3f8
 1012c5e:	bf8c      	ite	hi
 1012c60:	257e      	movhi	r5, #126	; 0x7e
 1012c62:	00e1      	lslls	r1, r4, #3
 1012c64:	e781      	b.n	1012b6a <_free_r+0xea>
 1012c66:	f043 0201 	orr.w	r2, r3, #1
 1012c6a:	6042      	str	r2, [r0, #4]
 1012c6c:	6023      	str	r3, [r4, #0]
 1012c6e:	e754      	b.n	1012b1a <_free_r+0x9a>

01012c70 <__sfvwrite_r>:
 1012c70:	6893      	ldr	r3, [r2, #8]
 1012c72:	2b00      	cmp	r3, #0
 1012c74:	f000 8114 	beq.w	1012ea0 <__sfvwrite_r+0x230>
 1012c78:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 1012c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1012c80:	f01c 0f08 	tst.w	ip, #8
 1012c84:	b083      	sub	sp, #12
 1012c86:	460c      	mov	r4, r1
 1012c88:	4681      	mov	r9, r0
 1012c8a:	4690      	mov	r8, r2
 1012c8c:	d038      	beq.n	1012d00 <__sfvwrite_r+0x90>
 1012c8e:	690b      	ldr	r3, [r1, #16]
 1012c90:	b3b3      	cbz	r3, 1012d00 <__sfvwrite_r+0x90>
 1012c92:	f01c 0302 	ands.w	r3, ip, #2
 1012c96:	f8d8 6000 	ldr.w	r6, [r8]
 1012c9a:	d03f      	beq.n	1012d1c <__sfvwrite_r+0xac>
 1012c9c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1012ca0:	2700      	movs	r7, #0
 1012ca2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1012ca6:	f44f 4a7c 	mov.w	sl, #64512	; 0xfc00
 1012caa:	f6c7 7aff 	movt	sl, #32767	; 0x7fff
 1012cae:	463d      	mov	r5, r7
 1012cb0:	4555      	cmp	r5, sl
 1012cb2:	462b      	mov	r3, r5
 1012cb4:	463a      	mov	r2, r7
 1012cb6:	4661      	mov	r1, ip
 1012cb8:	bf28      	it	cs
 1012cba:	4653      	movcs	r3, sl
 1012cbc:	4648      	mov	r0, r9
 1012cbe:	b1dd      	cbz	r5, 1012cf8 <__sfvwrite_r+0x88>
 1012cc0:	47d8      	blx	fp
 1012cc2:	2800      	cmp	r0, #0
 1012cc4:	4407      	add	r7, r0
 1012cc6:	eba5 0500 	sub.w	r5, r5, r0
 1012cca:	f340 80df 	ble.w	1012e8c <__sfvwrite_r+0x21c>
 1012cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 1012cd2:	1a18      	subs	r0, r3, r0
 1012cd4:	f8c8 0008 	str.w	r0, [r8, #8]
 1012cd8:	2800      	cmp	r0, #0
 1012cda:	f000 80c6 	beq.w	1012e6a <__sfvwrite_r+0x1fa>
 1012cde:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 1012ce2:	4555      	cmp	r5, sl
 1012ce4:	462b      	mov	r3, r5
 1012ce6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 1012cea:	bf28      	it	cs
 1012cec:	4653      	movcs	r3, sl
 1012cee:	463a      	mov	r2, r7
 1012cf0:	4661      	mov	r1, ip
 1012cf2:	4648      	mov	r0, r9
 1012cf4:	2d00      	cmp	r5, #0
 1012cf6:	d1e3      	bne.n	1012cc0 <__sfvwrite_r+0x50>
 1012cf8:	e9d6 7500 	ldrd	r7, r5, [r6]
 1012cfc:	3608      	adds	r6, #8
 1012cfe:	e7d7      	b.n	1012cb0 <__sfvwrite_r+0x40>
 1012d00:	4621      	mov	r1, r4
 1012d02:	4648      	mov	r0, r9
 1012d04:	f7fe fc84 	bl	1011610 <__swsetup_r>
 1012d08:	2800      	cmp	r0, #0
 1012d0a:	f040 8144 	bne.w	1012f96 <__sfvwrite_r+0x326>
 1012d0e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1012d12:	f8d8 6000 	ldr.w	r6, [r8]
 1012d16:	f01c 0302 	ands.w	r3, ip, #2
 1012d1a:	d1bf      	bne.n	1012c9c <__sfvwrite_r+0x2c>
 1012d1c:	f01c 0a01 	ands.w	sl, ip, #1
 1012d20:	f040 80c0 	bne.w	1012ea4 <__sfvwrite_r+0x234>
 1012d24:	68a7      	ldr	r7, [r4, #8]
 1012d26:	4655      	mov	r5, sl
 1012d28:	6820      	ldr	r0, [r4, #0]
 1012d2a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 1012d2e:	f6c7 73ff 	movt	r3, #32767	; 0x7fff
 1012d32:	9301      	str	r3, [sp, #4]
 1012d34:	2d00      	cmp	r5, #0
 1012d36:	d057      	beq.n	1012de8 <__sfvwrite_r+0x178>
 1012d38:	f41c 7f00 	tst.w	ip, #512	; 0x200
 1012d3c:	f000 80c6 	beq.w	1012ecc <__sfvwrite_r+0x25c>
 1012d40:	42af      	cmp	r7, r5
 1012d42:	463b      	mov	r3, r7
 1012d44:	f200 80f6 	bhi.w	1012f34 <__sfvwrite_r+0x2c4>
 1012d48:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 1012d4c:	d02f      	beq.n	1012dae <__sfvwrite_r+0x13e>
 1012d4e:	6962      	ldr	r2, [r4, #20]
 1012d50:	f105 0b01 	add.w	fp, r5, #1
 1012d54:	6921      	ldr	r1, [r4, #16]
 1012d56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1012d5a:	1a47      	subs	r7, r0, r1
 1012d5c:	44bb      	add	fp, r7
 1012d5e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 1012d62:	1052      	asrs	r2, r2, #1
 1012d64:	4593      	cmp	fp, r2
 1012d66:	bf94      	ite	ls
 1012d68:	4693      	movls	fp, r2
 1012d6a:	465a      	movhi	r2, fp
 1012d6c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 1012d70:	f000 80f8 	beq.w	1012f64 <__sfvwrite_r+0x2f4>
 1012d74:	4611      	mov	r1, r2
 1012d76:	4648      	mov	r0, r9
 1012d78:	f7f9 f8ae 	bl	100bed8 <_malloc_r>
 1012d7c:	2800      	cmp	r0, #0
 1012d7e:	f000 8104 	beq.w	1012f8a <__sfvwrite_r+0x31a>
 1012d82:	463a      	mov	r2, r7
 1012d84:	6921      	ldr	r1, [r4, #16]
 1012d86:	9000      	str	r0, [sp, #0]
 1012d88:	f7f9 edba 	blx	100c900 <memcpy>
 1012d8c:	89a2      	ldrh	r2, [r4, #12]
 1012d8e:	9b00      	ldr	r3, [sp, #0]
 1012d90:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 1012d94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1012d98:	81a2      	strh	r2, [r4, #12]
 1012d9a:	19d8      	adds	r0, r3, r7
 1012d9c:	6123      	str	r3, [r4, #16]
 1012d9e:	ebab 0707 	sub.w	r7, fp, r7
 1012da2:	462b      	mov	r3, r5
 1012da4:	60a7      	str	r7, [r4, #8]
 1012da6:	462f      	mov	r7, r5
 1012da8:	6020      	str	r0, [r4, #0]
 1012daa:	f8c4 b014 	str.w	fp, [r4, #20]
 1012dae:	461a      	mov	r2, r3
 1012db0:	4651      	mov	r1, sl
 1012db2:	9300      	str	r3, [sp, #0]
 1012db4:	f000 fa7c 	bl	10132b0 <memmove>
 1012db8:	68a1      	ldr	r1, [r4, #8]
 1012dba:	46ab      	mov	fp, r5
 1012dbc:	6822      	ldr	r2, [r4, #0]
 1012dbe:	2500      	movs	r5, #0
 1012dc0:	9b00      	ldr	r3, [sp, #0]
 1012dc2:	1bcf      	subs	r7, r1, r7
 1012dc4:	60a7      	str	r7, [r4, #8]
 1012dc6:	4413      	add	r3, r2
 1012dc8:	6023      	str	r3, [r4, #0]
 1012dca:	f8d8 0008 	ldr.w	r0, [r8, #8]
 1012dce:	44da      	add	sl, fp
 1012dd0:	eba0 000b 	sub.w	r0, r0, fp
 1012dd4:	f8c8 0008 	str.w	r0, [r8, #8]
 1012dd8:	2800      	cmp	r0, #0
 1012dda:	d046      	beq.n	1012e6a <__sfvwrite_r+0x1fa>
 1012ddc:	68a7      	ldr	r7, [r4, #8]
 1012dde:	6820      	ldr	r0, [r4, #0]
 1012de0:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 1012de4:	2d00      	cmp	r5, #0
 1012de6:	d1a7      	bne.n	1012d38 <__sfvwrite_r+0xc8>
 1012de8:	e9d6 a500 	ldrd	sl, r5, [r6]
 1012dec:	3608      	adds	r6, #8
 1012dee:	e7a1      	b.n	1012d34 <__sfvwrite_r+0xc4>
 1012df0:	f10b 0308 	add.w	r3, fp, #8
 1012df4:	f853 7c04 	ldr.w	r7, [r3, #-4]
 1012df8:	469b      	mov	fp, r3
 1012dfa:	f853 6c08 	ldr.w	r6, [r3, #-8]
 1012dfe:	3308      	adds	r3, #8
 1012e00:	2f00      	cmp	r7, #0
 1012e02:	d0f7      	beq.n	1012df4 <__sfvwrite_r+0x184>
 1012e04:	463a      	mov	r2, r7
 1012e06:	210a      	movs	r1, #10
 1012e08:	4630      	mov	r0, r6
 1012e0a:	f000 fa01 	bl	1013210 <memchr>
 1012e0e:	2800      	cmp	r0, #0
 1012e10:	d059      	beq.n	1012ec6 <__sfvwrite_r+0x256>
 1012e12:	3001      	adds	r0, #1
 1012e14:	eba0 0a06 	sub.w	sl, r0, r6
 1012e18:	4653      	mov	r3, sl
 1012e1a:	6922      	ldr	r2, [r4, #16]
 1012e1c:	42bb      	cmp	r3, r7
 1012e1e:	6820      	ldr	r0, [r4, #0]
 1012e20:	6961      	ldr	r1, [r4, #20]
 1012e22:	bf28      	it	cs
 1012e24:	463b      	movcs	r3, r7
 1012e26:	68a5      	ldr	r5, [r4, #8]
 1012e28:	4290      	cmp	r0, r2
 1012e2a:	440d      	add	r5, r1
 1012e2c:	bf94      	ite	ls
 1012e2e:	2200      	movls	r2, #0
 1012e30:	2201      	movhi	r2, #1
 1012e32:	42ab      	cmp	r3, r5
 1012e34:	bfd8      	it	le
 1012e36:	2200      	movle	r2, #0
 1012e38:	b9da      	cbnz	r2, 1012e72 <__sfvwrite_r+0x202>
 1012e3a:	4299      	cmp	r1, r3
 1012e3c:	f300 8084 	bgt.w	1012f48 <__sfvwrite_r+0x2d8>
 1012e40:	460b      	mov	r3, r1
 1012e42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 1012e44:	4632      	mov	r2, r6
 1012e46:	69e1      	ldr	r1, [r4, #28]
 1012e48:	4648      	mov	r0, r9
 1012e4a:	47a8      	blx	r5
 1012e4c:	1e05      	subs	r5, r0, #0
 1012e4e:	dd1d      	ble.n	1012e8c <__sfvwrite_r+0x21c>
 1012e50:	ebba 0a05 	subs.w	sl, sl, r5
 1012e54:	bf18      	it	ne
 1012e56:	2001      	movne	r0, #1
 1012e58:	d06f      	beq.n	1012f3a <__sfvwrite_r+0x2ca>
 1012e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 1012e5e:	442e      	add	r6, r5
 1012e60:	1b7f      	subs	r7, r7, r5
 1012e62:	1b5d      	subs	r5, r3, r5
 1012e64:	f8c8 5008 	str.w	r5, [r8, #8]
 1012e68:	bb15      	cbnz	r5, 1012eb0 <__sfvwrite_r+0x240>
 1012e6a:	2000      	movs	r0, #0
 1012e6c:	b003      	add	sp, #12
 1012e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012e72:	4631      	mov	r1, r6
 1012e74:	462a      	mov	r2, r5
 1012e76:	f000 fa1b 	bl	10132b0 <memmove>
 1012e7a:	6823      	ldr	r3, [r4, #0]
 1012e7c:	4621      	mov	r1, r4
 1012e7e:	4648      	mov	r0, r9
 1012e80:	442b      	add	r3, r5
 1012e82:	6023      	str	r3, [r4, #0]
 1012e84:	f7ff fc70 	bl	1012768 <_fflush_r>
 1012e88:	2800      	cmp	r0, #0
 1012e8a:	d0e1      	beq.n	1012e50 <__sfvwrite_r+0x1e0>
 1012e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1012e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1012e94:	f04f 30ff 	mov.w	r0, #4294967295
 1012e98:	81a3      	strh	r3, [r4, #12]
 1012e9a:	b003      	add	sp, #12
 1012e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1012ea0:	2000      	movs	r0, #0
 1012ea2:	4770      	bx	lr
 1012ea4:	469a      	mov	sl, r3
 1012ea6:	4618      	mov	r0, r3
 1012ea8:	461f      	mov	r7, r3
 1012eaa:	4633      	mov	r3, r6
 1012eac:	469b      	mov	fp, r3
 1012eae:	4656      	mov	r6, sl
 1012eb0:	2f00      	cmp	r7, #0
 1012eb2:	d09d      	beq.n	1012df0 <__sfvwrite_r+0x180>
 1012eb4:	2800      	cmp	r0, #0
 1012eb6:	d1af      	bne.n	1012e18 <__sfvwrite_r+0x1a8>
 1012eb8:	463a      	mov	r2, r7
 1012eba:	210a      	movs	r1, #10
 1012ebc:	4630      	mov	r0, r6
 1012ebe:	f000 f9a7 	bl	1013210 <memchr>
 1012ec2:	2800      	cmp	r0, #0
 1012ec4:	d1a5      	bne.n	1012e12 <__sfvwrite_r+0x1a2>
 1012ec6:	1c7b      	adds	r3, r7, #1
 1012ec8:	469a      	mov	sl, r3
 1012eca:	e7a6      	b.n	1012e1a <__sfvwrite_r+0x1aa>
 1012ecc:	6923      	ldr	r3, [r4, #16]
 1012ece:	4283      	cmp	r3, r0
 1012ed0:	d319      	bcc.n	1012f06 <__sfvwrite_r+0x296>
 1012ed2:	f8d4 b014 	ldr.w	fp, [r4, #20]
 1012ed6:	45ab      	cmp	fp, r5
 1012ed8:	d815      	bhi.n	1012f06 <__sfvwrite_r+0x296>
 1012eda:	9b01      	ldr	r3, [sp, #4]
 1012edc:	4659      	mov	r1, fp
 1012ede:	429d      	cmp	r5, r3
 1012ee0:	bf94      	ite	ls
 1012ee2:	4628      	movls	r0, r5
 1012ee4:	f06f 4000 	mvnhi.w	r0, #2147483648	; 0x80000000
 1012ee8:	f7f7 fd1a 	bl	100a920 <__divsi3>
 1012eec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 1012eee:	4652      	mov	r2, sl
 1012ef0:	69e1      	ldr	r1, [r4, #28]
 1012ef2:	fb0b f300 	mul.w	r3, fp, r0
 1012ef6:	4648      	mov	r0, r9
 1012ef8:	47b8      	blx	r7
 1012efa:	f1b0 0b00 	subs.w	fp, r0, #0
 1012efe:	ddc5      	ble.n	1012e8c <__sfvwrite_r+0x21c>
 1012f00:	eba5 050b 	sub.w	r5, r5, fp
 1012f04:	e761      	b.n	1012dca <__sfvwrite_r+0x15a>
 1012f06:	42af      	cmp	r7, r5
 1012f08:	4651      	mov	r1, sl
 1012f0a:	bf28      	it	cs
 1012f0c:	462f      	movcs	r7, r5
 1012f0e:	463a      	mov	r2, r7
 1012f10:	46bb      	mov	fp, r7
 1012f12:	f000 f9cd 	bl	10132b0 <memmove>
 1012f16:	68a3      	ldr	r3, [r4, #8]
 1012f18:	6822      	ldr	r2, [r4, #0]
 1012f1a:	1bdb      	subs	r3, r3, r7
 1012f1c:	60a3      	str	r3, [r4, #8]
 1012f1e:	443a      	add	r2, r7
 1012f20:	6022      	str	r2, [r4, #0]
 1012f22:	2b00      	cmp	r3, #0
 1012f24:	d1ec      	bne.n	1012f00 <__sfvwrite_r+0x290>
 1012f26:	4621      	mov	r1, r4
 1012f28:	4648      	mov	r0, r9
 1012f2a:	f7ff fc1d 	bl	1012768 <_fflush_r>
 1012f2e:	2800      	cmp	r0, #0
 1012f30:	d0e6      	beq.n	1012f00 <__sfvwrite_r+0x290>
 1012f32:	e7ab      	b.n	1012e8c <__sfvwrite_r+0x21c>
 1012f34:	462f      	mov	r7, r5
 1012f36:	462b      	mov	r3, r5
 1012f38:	e739      	b.n	1012dae <__sfvwrite_r+0x13e>
 1012f3a:	4621      	mov	r1, r4
 1012f3c:	4648      	mov	r0, r9
 1012f3e:	f7ff fc13 	bl	1012768 <_fflush_r>
 1012f42:	2800      	cmp	r0, #0
 1012f44:	d089      	beq.n	1012e5a <__sfvwrite_r+0x1ea>
 1012f46:	e7a1      	b.n	1012e8c <__sfvwrite_r+0x21c>
 1012f48:	461a      	mov	r2, r3
 1012f4a:	4631      	mov	r1, r6
 1012f4c:	9300      	str	r3, [sp, #0]
 1012f4e:	461d      	mov	r5, r3
 1012f50:	f000 f9ae 	bl	10132b0 <memmove>
 1012f54:	68a1      	ldr	r1, [r4, #8]
 1012f56:	6822      	ldr	r2, [r4, #0]
 1012f58:	9b00      	ldr	r3, [sp, #0]
 1012f5a:	1ac9      	subs	r1, r1, r3
 1012f5c:	4413      	add	r3, r2
 1012f5e:	60a1      	str	r1, [r4, #8]
 1012f60:	6023      	str	r3, [r4, #0]
 1012f62:	e775      	b.n	1012e50 <__sfvwrite_r+0x1e0>
 1012f64:	4648      	mov	r0, r9
 1012f66:	f000 fe89 	bl	1013c7c <_realloc_r>
 1012f6a:	4603      	mov	r3, r0
 1012f6c:	2800      	cmp	r0, #0
 1012f6e:	f47f af14 	bne.w	1012d9a <__sfvwrite_r+0x12a>
 1012f72:	6921      	ldr	r1, [r4, #16]
 1012f74:	4648      	mov	r0, r9
 1012f76:	f7ff fd83 	bl	1012a80 <_free_r>
 1012f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1012f7e:	220c      	movs	r2, #12
 1012f80:	f8c9 2000 	str.w	r2, [r9]
 1012f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1012f88:	e782      	b.n	1012e90 <__sfvwrite_r+0x220>
 1012f8a:	220c      	movs	r2, #12
 1012f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1012f90:	f8c9 2000 	str.w	r2, [r9]
 1012f94:	e77c      	b.n	1012e90 <__sfvwrite_r+0x220>
 1012f96:	f04f 30ff 	mov.w	r0, #4294967295
 1012f9a:	e767      	b.n	1012e6c <__sfvwrite_r+0x1fc>

01012f9c <_fwalk>:
 1012f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1012fa0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 1012fa4:	d01a      	beq.n	1012fdc <_fwalk+0x40>
 1012fa6:	4688      	mov	r8, r1
 1012fa8:	2600      	movs	r6, #0
 1012faa:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 1012fae:	3d01      	subs	r5, #1
 1012fb0:	d40e      	bmi.n	1012fd0 <_fwalk+0x34>
 1012fb2:	89a3      	ldrh	r3, [r4, #12]
 1012fb4:	3d01      	subs	r5, #1
 1012fb6:	2b01      	cmp	r3, #1
 1012fb8:	d906      	bls.n	1012fc8 <_fwalk+0x2c>
 1012fba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 1012fbe:	4620      	mov	r0, r4
 1012fc0:	3301      	adds	r3, #1
 1012fc2:	d001      	beq.n	1012fc8 <_fwalk+0x2c>
 1012fc4:	47c0      	blx	r8
 1012fc6:	4306      	orrs	r6, r0
 1012fc8:	1c6b      	adds	r3, r5, #1
 1012fca:	f104 0468 	add.w	r4, r4, #104	; 0x68
 1012fce:	d1f0      	bne.n	1012fb2 <_fwalk+0x16>
 1012fd0:	683f      	ldr	r7, [r7, #0]
 1012fd2:	2f00      	cmp	r7, #0
 1012fd4:	d1e9      	bne.n	1012faa <_fwalk+0xe>
 1012fd6:	4630      	mov	r0, r6
 1012fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1012fdc:	463e      	mov	r6, r7
 1012fde:	4630      	mov	r0, r6
 1012fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01012fe4 <_fwalk_reent>:
 1012fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1012fe8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 1012fec:	d01e      	beq.n	101302c <_fwalk_reent+0x48>
 1012fee:	4688      	mov	r8, r1
 1012ff0:	4606      	mov	r6, r0
 1012ff2:	f04f 0900 	mov.w	r9, #0
 1012ff6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 1012ffa:	3d01      	subs	r5, #1
 1012ffc:	d410      	bmi.n	1013020 <_fwalk_reent+0x3c>
 1012ffe:	89a3      	ldrh	r3, [r4, #12]
 1013000:	3d01      	subs	r5, #1
 1013002:	2b01      	cmp	r3, #1
 1013004:	d908      	bls.n	1013018 <_fwalk_reent+0x34>
 1013006:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 101300a:	4621      	mov	r1, r4
 101300c:	4630      	mov	r0, r6
 101300e:	3301      	adds	r3, #1
 1013010:	d002      	beq.n	1013018 <_fwalk_reent+0x34>
 1013012:	47c0      	blx	r8
 1013014:	ea49 0900 	orr.w	r9, r9, r0
 1013018:	1c6b      	adds	r3, r5, #1
 101301a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 101301e:	d1ee      	bne.n	1012ffe <_fwalk_reent+0x1a>
 1013020:	683f      	ldr	r7, [r7, #0]
 1013022:	2f00      	cmp	r7, #0
 1013024:	d1e7      	bne.n	1012ff6 <_fwalk_reent+0x12>
 1013026:	4648      	mov	r0, r9
 1013028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 101302c:	46b9      	mov	r9, r7
 101302e:	4648      	mov	r0, r9
 1013030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

01013034 <_findenv_r>:
 1013034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1013038:	f24a 57fc 	movw	r7, #42492	; 0xa5fc
 101303c:	f2c0 1705 	movt	r7, #261	; 0x105
 1013040:	460d      	mov	r5, r1
 1013042:	4616      	mov	r6, r2
 1013044:	4680      	mov	r8, r0
 1013046:	f003 f947 	bl	10162d8 <__env_lock>
 101304a:	f8d7 9000 	ldr.w	r9, [r7]
 101304e:	f1b9 0f00 	cmp.w	r9, #0
 1013052:	d021      	beq.n	1013098 <_findenv_r+0x64>
 1013054:	782a      	ldrb	r2, [r5, #0]
 1013056:	462c      	mov	r4, r5
 1013058:	2a3d      	cmp	r2, #61	; 0x3d
 101305a:	bf18      	it	ne
 101305c:	2a00      	cmpne	r2, #0
 101305e:	d005      	beq.n	101306c <_findenv_r+0x38>
 1013060:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 1013064:	2a00      	cmp	r2, #0
 1013066:	bf18      	it	ne
 1013068:	2a3d      	cmpne	r2, #61	; 0x3d
 101306a:	d1f9      	bne.n	1013060 <_findenv_r+0x2c>
 101306c:	2a3d      	cmp	r2, #61	; 0x3d
 101306e:	d013      	beq.n	1013098 <_findenv_r+0x64>
 1013070:	f8d9 0000 	ldr.w	r0, [r9]
 1013074:	1b64      	subs	r4, r4, r5
 1013076:	b178      	cbz	r0, 1013098 <_findenv_r+0x64>
 1013078:	4622      	mov	r2, r4
 101307a:	4629      	mov	r1, r5
 101307c:	f7fa fbdc 	bl	100d838 <strncmp>
 1013080:	b930      	cbnz	r0, 1013090 <_findenv_r+0x5c>
 1013082:	f8d9 3000 	ldr.w	r3, [r9]
 1013086:	eb03 0a04 	add.w	sl, r3, r4
 101308a:	5d1b      	ldrb	r3, [r3, r4]
 101308c:	2b3d      	cmp	r3, #61	; 0x3d
 101308e:	d009      	beq.n	10130a4 <_findenv_r+0x70>
 1013090:	f859 0f04 	ldr.w	r0, [r9, #4]!
 1013094:	2800      	cmp	r0, #0
 1013096:	d1ef      	bne.n	1013078 <_findenv_r+0x44>
 1013098:	4640      	mov	r0, r8
 101309a:	f003 f91f 	bl	10162dc <__env_unlock>
 101309e:	2000      	movs	r0, #0
 10130a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10130a4:	683b      	ldr	r3, [r7, #0]
 10130a6:	4640      	mov	r0, r8
 10130a8:	eba9 0303 	sub.w	r3, r9, r3
 10130ac:	109b      	asrs	r3, r3, #2
 10130ae:	6033      	str	r3, [r6, #0]
 10130b0:	f003 f914 	bl	10162dc <__env_unlock>
 10130b4:	f10a 0001 	add.w	r0, sl, #1
 10130b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

010130bc <_getenv_r>:
 10130bc:	b500      	push	{lr}
 10130be:	b083      	sub	sp, #12
 10130c0:	aa01      	add	r2, sp, #4
 10130c2:	f7ff ffb7 	bl	1013034 <_findenv_r>
 10130c6:	b003      	add	sp, #12
 10130c8:	f85d fb04 	ldr.w	pc, [sp], #4

010130cc <__localeconv_l>:
 10130cc:	30f0      	adds	r0, #240	; 0xf0
 10130ce:	4770      	bx	lr

010130d0 <_localeconv_r>:
 10130d0:	f649 4230 	movw	r2, #39984	; 0x9c30
 10130d4:	f2c0 1205 	movt	r2, #261	; 0x105
 10130d8:	f24a 0360 	movw	r3, #41056	; 0xa060
 10130dc:	f2c0 1305 	movt	r3, #261	; 0x105
 10130e0:	6812      	ldr	r2, [r2, #0]
 10130e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
 10130e4:	2800      	cmp	r0, #0
 10130e6:	bf08      	it	eq
 10130e8:	4618      	moveq	r0, r3
 10130ea:	30f0      	adds	r0, #240	; 0xf0
 10130ec:	4770      	bx	lr
 10130ee:	bf00      	nop

010130f0 <localeconv>:
 10130f0:	f649 4230 	movw	r2, #39984	; 0x9c30
 10130f4:	f2c0 1205 	movt	r2, #261	; 0x105
 10130f8:	f24a 0360 	movw	r3, #41056	; 0xa060
 10130fc:	f2c0 1305 	movt	r3, #261	; 0x105
 1013100:	6812      	ldr	r2, [r2, #0]
 1013102:	6b50      	ldr	r0, [r2, #52]	; 0x34
 1013104:	2800      	cmp	r0, #0
 1013106:	bf08      	it	eq
 1013108:	4618      	moveq	r0, r3
 101310a:	30f0      	adds	r0, #240	; 0xf0
 101310c:	4770      	bx	lr
 101310e:	bf00      	nop

01013110 <__swhatbuf_r>:
 1013110:	b570      	push	{r4, r5, r6, lr}
 1013112:	460c      	mov	r4, r1
 1013114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1013118:	b096      	sub	sp, #88	; 0x58
 101311a:	4615      	mov	r5, r2
 101311c:	461e      	mov	r6, r3
 101311e:	2900      	cmp	r1, #0
 1013120:	db14      	blt.n	101314c <__swhatbuf_r+0x3c>
 1013122:	466a      	mov	r2, sp
 1013124:	f003 f9b6 	bl	1016494 <_fstat_r>
 1013128:	2800      	cmp	r0, #0
 101312a:	db0f      	blt.n	101314c <__swhatbuf_r+0x3c>
 101312c:	9a01      	ldr	r2, [sp, #4]
 101312e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 1013132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 1013136:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 101313a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 101313e:	fab2 f282 	clz	r2, r2
 1013142:	0952      	lsrs	r2, r2, #5
 1013144:	6032      	str	r2, [r6, #0]
 1013146:	602b      	str	r3, [r5, #0]
 1013148:	b016      	add	sp, #88	; 0x58
 101314a:	bd70      	pop	{r4, r5, r6, pc}
 101314c:	89a2      	ldrh	r2, [r4, #12]
 101314e:	2300      	movs	r3, #0
 1013150:	6033      	str	r3, [r6, #0]
 1013152:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 1013156:	d004      	beq.n	1013162 <__swhatbuf_r+0x52>
 1013158:	4618      	mov	r0, r3
 101315a:	2340      	movs	r3, #64	; 0x40
 101315c:	602b      	str	r3, [r5, #0]
 101315e:	b016      	add	sp, #88	; 0x58
 1013160:	bd70      	pop	{r4, r5, r6, pc}
 1013162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 1013166:	602b      	str	r3, [r5, #0]
 1013168:	b016      	add	sp, #88	; 0x58
 101316a:	bd70      	pop	{r4, r5, r6, pc}

0101316c <__smakebuf_r>:
 101316c:	898a      	ldrh	r2, [r1, #12]
 101316e:	460b      	mov	r3, r1
 1013170:	0792      	lsls	r2, r2, #30
 1013172:	d506      	bpl.n	1013182 <__smakebuf_r+0x16>
 1013174:	f101 0243 	add.w	r2, r1, #67	; 0x43
 1013178:	2101      	movs	r1, #1
 101317a:	601a      	str	r2, [r3, #0]
 101317c:	e9c3 2104 	strd	r2, r1, [r3, #16]
 1013180:	4770      	bx	lr
 1013182:	b570      	push	{r4, r5, r6, lr}
 1013184:	b082      	sub	sp, #8
 1013186:	ab01      	add	r3, sp, #4
 1013188:	4606      	mov	r6, r0
 101318a:	466a      	mov	r2, sp
 101318c:	460c      	mov	r4, r1
 101318e:	f7ff ffbf 	bl	1013110 <__swhatbuf_r>
 1013192:	9900      	ldr	r1, [sp, #0]
 1013194:	4605      	mov	r5, r0
 1013196:	4630      	mov	r0, r6
 1013198:	f7f8 fe9e 	bl	100bed8 <_malloc_r>
 101319c:	b198      	cbz	r0, 10131c6 <__smakebuf_r+0x5a>
 101319e:	9900      	ldr	r1, [sp, #0]
 10131a0:	f242 73c9 	movw	r3, #10185	; 0x27c9
 10131a4:	9a01      	ldr	r2, [sp, #4]
 10131a6:	f2c0 1301 	movt	r3, #257	; 0x101
 10131aa:	63f3      	str	r3, [r6, #60]	; 0x3c
 10131ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10131b0:	6020      	str	r0, [r4, #0]
 10131b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 10131b6:	6120      	str	r0, [r4, #16]
 10131b8:	6161      	str	r1, [r4, #20]
 10131ba:	81a3      	strh	r3, [r4, #12]
 10131bc:	b99a      	cbnz	r2, 10131e6 <__smakebuf_r+0x7a>
 10131be:	432b      	orrs	r3, r5
 10131c0:	81a3      	strh	r3, [r4, #12]
 10131c2:	b002      	add	sp, #8
 10131c4:	bd70      	pop	{r4, r5, r6, pc}
 10131c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10131ca:	059a      	lsls	r2, r3, #22
 10131cc:	d4f9      	bmi.n	10131c2 <__smakebuf_r+0x56>
 10131ce:	f023 0303 	bic.w	r3, r3, #3
 10131d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 10131d6:	f043 0302 	orr.w	r3, r3, #2
 10131da:	6022      	str	r2, [r4, #0]
 10131dc:	81a3      	strh	r3, [r4, #12]
 10131de:	2301      	movs	r3, #1
 10131e0:	e9c4 2304 	strd	r2, r3, [r4, #16]
 10131e4:	e7ed      	b.n	10131c2 <__smakebuf_r+0x56>
 10131e6:	4630      	mov	r0, r6
 10131e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 10131ec:	f003 f968 	bl	10164c0 <_isatty_r>
 10131f0:	b910      	cbnz	r0, 10131f8 <__smakebuf_r+0x8c>
 10131f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10131f6:	e7e2      	b.n	10131be <__smakebuf_r+0x52>
 10131f8:	89a3      	ldrh	r3, [r4, #12]
 10131fa:	f023 0303 	bic.w	r3, r3, #3
 10131fe:	f043 0301 	orr.w	r3, r3, #1
 1013202:	b21b      	sxth	r3, r3
 1013204:	e7db      	b.n	10131be <__smakebuf_r+0x52>
 1013206:	bf00      	nop
	...

01013210 <memchr>:
 1013210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 1013214:	2a10      	cmp	r2, #16
 1013216:	db2b      	blt.n	1013270 <memchr+0x60>
 1013218:	f010 0f07 	tst.w	r0, #7
 101321c:	d008      	beq.n	1013230 <memchr+0x20>
 101321e:	f810 3b01 	ldrb.w	r3, [r0], #1
 1013222:	3a01      	subs	r2, #1
 1013224:	428b      	cmp	r3, r1
 1013226:	d02d      	beq.n	1013284 <memchr+0x74>
 1013228:	f010 0f07 	tst.w	r0, #7
 101322c:	b342      	cbz	r2, 1013280 <memchr+0x70>
 101322e:	d1f6      	bne.n	101321e <memchr+0xe>
 1013230:	b4f0      	push	{r4, r5, r6, r7}
 1013232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 1013236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 101323a:	f022 0407 	bic.w	r4, r2, #7
 101323e:	f07f 0700 	mvns.w	r7, #0
 1013242:	2300      	movs	r3, #0
 1013244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 1013248:	3c08      	subs	r4, #8
 101324a:	ea85 0501 	eor.w	r5, r5, r1
 101324e:	ea86 0601 	eor.w	r6, r6, r1
 1013252:	fa85 f547 	uadd8	r5, r5, r7
 1013256:	faa3 f587 	sel	r5, r3, r7
 101325a:	fa86 f647 	uadd8	r6, r6, r7
 101325e:	faa5 f687 	sel	r6, r5, r7
 1013262:	b98e      	cbnz	r6, 1013288 <memchr+0x78>
 1013264:	d1ee      	bne.n	1013244 <memchr+0x34>
 1013266:	bcf0      	pop	{r4, r5, r6, r7}
 1013268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 101326c:	f002 0207 	and.w	r2, r2, #7
 1013270:	b132      	cbz	r2, 1013280 <memchr+0x70>
 1013272:	f810 3b01 	ldrb.w	r3, [r0], #1
 1013276:	3a01      	subs	r2, #1
 1013278:	ea83 0301 	eor.w	r3, r3, r1
 101327c:	b113      	cbz	r3, 1013284 <memchr+0x74>
 101327e:	d1f8      	bne.n	1013272 <memchr+0x62>
 1013280:	2000      	movs	r0, #0
 1013282:	4770      	bx	lr
 1013284:	3801      	subs	r0, #1
 1013286:	4770      	bx	lr
 1013288:	2d00      	cmp	r5, #0
 101328a:	bf06      	itte	eq
 101328c:	4635      	moveq	r5, r6
 101328e:	3803      	subeq	r0, #3
 1013290:	3807      	subne	r0, #7
 1013292:	f015 0f01 	tst.w	r5, #1
 1013296:	d107      	bne.n	10132a8 <memchr+0x98>
 1013298:	3001      	adds	r0, #1
 101329a:	f415 7f80 	tst.w	r5, #256	; 0x100
 101329e:	bf02      	ittt	eq
 10132a0:	3001      	addeq	r0, #1
 10132a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 10132a6:	3001      	addeq	r0, #1
 10132a8:	bcf0      	pop	{r4, r5, r6, r7}
 10132aa:	3801      	subs	r0, #1
 10132ac:	4770      	bx	lr
 10132ae:	bf00      	nop

010132b0 <memmove>:
 10132b0:	4288      	cmp	r0, r1
 10132b2:	b4f0      	push	{r4, r5, r6, r7}
 10132b4:	d90d      	bls.n	10132d2 <memmove+0x22>
 10132b6:	188b      	adds	r3, r1, r2
 10132b8:	4283      	cmp	r3, r0
 10132ba:	d90a      	bls.n	10132d2 <memmove+0x22>
 10132bc:	1884      	adds	r4, r0, r2
 10132be:	b132      	cbz	r2, 10132ce <memmove+0x1e>
 10132c0:	4622      	mov	r2, r4
 10132c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 10132c6:	4299      	cmp	r1, r3
 10132c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 10132cc:	d1f9      	bne.n	10132c2 <memmove+0x12>
 10132ce:	bcf0      	pop	{r4, r5, r6, r7}
 10132d0:	4770      	bx	lr
 10132d2:	2a0f      	cmp	r2, #15
 10132d4:	d80e      	bhi.n	10132f4 <memmove+0x44>
 10132d6:	4603      	mov	r3, r0
 10132d8:	1e54      	subs	r4, r2, #1
 10132da:	2a00      	cmp	r2, #0
 10132dc:	d0f7      	beq.n	10132ce <memmove+0x1e>
 10132de:	3401      	adds	r4, #1
 10132e0:	3b01      	subs	r3, #1
 10132e2:	440c      	add	r4, r1
 10132e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 10132e8:	42a1      	cmp	r1, r4
 10132ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 10132ee:	d1f9      	bne.n	10132e4 <memmove+0x34>
 10132f0:	bcf0      	pop	{r4, r5, r6, r7}
 10132f2:	4770      	bx	lr
 10132f4:	ea40 0301 	orr.w	r3, r0, r1
 10132f8:	079b      	lsls	r3, r3, #30
 10132fa:	d13d      	bne.n	1013378 <memmove+0xc8>
 10132fc:	f1a2 0510 	sub.w	r5, r2, #16
 1013300:	f101 0420 	add.w	r4, r1, #32
 1013304:	f101 0610 	add.w	r6, r1, #16
 1013308:	f100 0710 	add.w	r7, r0, #16
 101330c:	092d      	lsrs	r5, r5, #4
 101330e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 1013312:	f856 3c10 	ldr.w	r3, [r6, #-16]
 1013316:	3610      	adds	r6, #16
 1013318:	3710      	adds	r7, #16
 101331a:	f847 3c20 	str.w	r3, [r7, #-32]
 101331e:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 1013322:	f847 3c1c 	str.w	r3, [r7, #-28]
 1013326:	f856 3c18 	ldr.w	r3, [r6, #-24]
 101332a:	f847 3c18 	str.w	r3, [r7, #-24]
 101332e:	f856 3c14 	ldr.w	r3, [r6, #-20]
 1013332:	42a6      	cmp	r6, r4
 1013334:	f847 3c14 	str.w	r3, [r7, #-20]
 1013338:	d1eb      	bne.n	1013312 <memmove+0x62>
 101333a:	1c6b      	adds	r3, r5, #1
 101333c:	f012 0f0c 	tst.w	r2, #12
 1013340:	f002 050f 	and.w	r5, r2, #15
 1013344:	ea4f 1303 	mov.w	r3, r3, lsl #4
 1013348:	4419      	add	r1, r3
 101334a:	bf08      	it	eq
 101334c:	462a      	moveq	r2, r5
 101334e:	4403      	add	r3, r0
 1013350:	d0c2      	beq.n	10132d8 <memmove+0x28>
 1013352:	1f1f      	subs	r7, r3, #4
 1013354:	460e      	mov	r6, r1
 1013356:	f856 cb04 	ldr.w	ip, [r6], #4
 101335a:	1bac      	subs	r4, r5, r6
 101335c:	440c      	add	r4, r1
 101335e:	f847 cf04 	str.w	ip, [r7, #4]!
 1013362:	2c03      	cmp	r4, #3
 1013364:	d8f7      	bhi.n	1013356 <memmove+0xa6>
 1013366:	1f2c      	subs	r4, r5, #4
 1013368:	f002 0203 	and.w	r2, r2, #3
 101336c:	f024 0403 	bic.w	r4, r4, #3
 1013370:	3404      	adds	r4, #4
 1013372:	4423      	add	r3, r4
 1013374:	4421      	add	r1, r4
 1013376:	e7af      	b.n	10132d8 <memmove+0x28>
 1013378:	1e54      	subs	r4, r2, #1
 101337a:	4603      	mov	r3, r0
 101337c:	e7af      	b.n	10132de <memmove+0x2e>
 101337e:	bf00      	nop

01013380 <_Balloc>:
 1013380:	b538      	push	{r3, r4, r5, lr}
 1013382:	4605      	mov	r5, r0
 1013384:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 1013386:	460c      	mov	r4, r1
 1013388:	b14b      	cbz	r3, 101339e <_Balloc+0x1e>
 101338a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 101338e:	b180      	cbz	r0, 10133b2 <_Balloc+0x32>
 1013390:	6802      	ldr	r2, [r0, #0]
 1013392:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 1013396:	2300      	movs	r3, #0
 1013398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 101339c:	bd38      	pop	{r3, r4, r5, pc}
 101339e:	2221      	movs	r2, #33	; 0x21
 10133a0:	2104      	movs	r1, #4
 10133a2:	f002 ff53 	bl	101624c <_calloc_r>
 10133a6:	4603      	mov	r3, r0
 10133a8:	64e8      	str	r0, [r5, #76]	; 0x4c
 10133aa:	2800      	cmp	r0, #0
 10133ac:	d1ed      	bne.n	101338a <_Balloc+0xa>
 10133ae:	2000      	movs	r0, #0
 10133b0:	bd38      	pop	{r3, r4, r5, pc}
 10133b2:	2101      	movs	r1, #1
 10133b4:	4628      	mov	r0, r5
 10133b6:	fa01 f504 	lsl.w	r5, r1, r4
 10133ba:	1d6a      	adds	r2, r5, #5
 10133bc:	0092      	lsls	r2, r2, #2
 10133be:	f002 ff45 	bl	101624c <_calloc_r>
 10133c2:	2800      	cmp	r0, #0
 10133c4:	d0f3      	beq.n	10133ae <_Balloc+0x2e>
 10133c6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 10133ca:	e7e4      	b.n	1013396 <_Balloc+0x16>

010133cc <_Bfree>:
 10133cc:	b131      	cbz	r1, 10133dc <_Bfree+0x10>
 10133ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 10133d0:	684a      	ldr	r2, [r1, #4]
 10133d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 10133d6:	6008      	str	r0, [r1, #0]
 10133d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 10133dc:	4770      	bx	lr
 10133de:	bf00      	nop

010133e0 <__multadd>:
 10133e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10133e2:	f101 0714 	add.w	r7, r1, #20
 10133e6:	690c      	ldr	r4, [r1, #16]
 10133e8:	b083      	sub	sp, #12
 10133ea:	460d      	mov	r5, r1
 10133ec:	4606      	mov	r6, r0
 10133ee:	f04f 0c00 	mov.w	ip, #0
 10133f2:	6838      	ldr	r0, [r7, #0]
 10133f4:	f10c 0c01 	add.w	ip, ip, #1
 10133f8:	4564      	cmp	r4, ip
 10133fa:	b281      	uxth	r1, r0
 10133fc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 1013400:	fb02 3301 	mla	r3, r2, r1, r3
 1013404:	ea4f 4113 	mov.w	r1, r3, lsr #16
 1013408:	b29b      	uxth	r3, r3
 101340a:	fb02 1000 	mla	r0, r2, r0, r1
 101340e:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 1013412:	ea4f 4310 	mov.w	r3, r0, lsr #16
 1013416:	f847 1b04 	str.w	r1, [r7], #4
 101341a:	dcea      	bgt.n	10133f2 <__multadd+0x12>
 101341c:	b13b      	cbz	r3, 101342e <__multadd+0x4e>
 101341e:	68aa      	ldr	r2, [r5, #8]
 1013420:	42a2      	cmp	r2, r4
 1013422:	dd07      	ble.n	1013434 <__multadd+0x54>
 1013424:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1013428:	3401      	adds	r4, #1
 101342a:	6153      	str	r3, [r2, #20]
 101342c:	612c      	str	r4, [r5, #16]
 101342e:	4628      	mov	r0, r5
 1013430:	b003      	add	sp, #12
 1013432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1013434:	6869      	ldr	r1, [r5, #4]
 1013436:	4630      	mov	r0, r6
 1013438:	9301      	str	r3, [sp, #4]
 101343a:	3101      	adds	r1, #1
 101343c:	f7ff ffa0 	bl	1013380 <_Balloc>
 1013440:	692a      	ldr	r2, [r5, #16]
 1013442:	f105 010c 	add.w	r1, r5, #12
 1013446:	3202      	adds	r2, #2
 1013448:	0092      	lsls	r2, r2, #2
 101344a:	4607      	mov	r7, r0
 101344c:	300c      	adds	r0, #12
 101344e:	f7f9 ea58 	blx	100c900 <memcpy>
 1013452:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 1013454:	6869      	ldr	r1, [r5, #4]
 1013456:	9b01      	ldr	r3, [sp, #4]
 1013458:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 101345c:	6028      	str	r0, [r5, #0]
 101345e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 1013462:	463d      	mov	r5, r7
 1013464:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1013468:	3401      	adds	r4, #1
 101346a:	6153      	str	r3, [r2, #20]
 101346c:	612c      	str	r4, [r5, #16]
 101346e:	e7de      	b.n	101342e <__multadd+0x4e>

01013470 <__s2b>:
 1013470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1013474:	461d      	mov	r5, r3
 1013476:	f648 6639 	movw	r6, #36409	; 0x8e39
 101347a:	3308      	adds	r3, #8
 101347c:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 1013480:	4607      	mov	r7, r0
 1013482:	460c      	mov	r4, r1
 1013484:	2d09      	cmp	r5, #9
 1013486:	fb86 0103 	smull	r0, r1, r6, r3
 101348a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 101348e:	4690      	mov	r8, r2
 1013490:	9e08      	ldr	r6, [sp, #32]
 1013492:	ebc3 0261 	rsb	r2, r3, r1, asr #1
 1013496:	dd35      	ble.n	1013504 <__s2b+0x94>
 1013498:	2301      	movs	r3, #1
 101349a:	2100      	movs	r1, #0
 101349c:	005b      	lsls	r3, r3, #1
 101349e:	3101      	adds	r1, #1
 10134a0:	429a      	cmp	r2, r3
 10134a2:	dcfb      	bgt.n	101349c <__s2b+0x2c>
 10134a4:	4638      	mov	r0, r7
 10134a6:	f7ff ff6b 	bl	1013380 <_Balloc>
 10134aa:	f1b8 0f09 	cmp.w	r8, #9
 10134ae:	f04f 0301 	mov.w	r3, #1
 10134b2:	bfdc      	itt	le
 10134b4:	340a      	addle	r4, #10
 10134b6:	f04f 0809 	movle.w	r8, #9
 10134ba:	6146      	str	r6, [r0, #20]
 10134bc:	6103      	str	r3, [r0, #16]
 10134be:	dd10      	ble.n	10134e2 <__s2b+0x72>
 10134c0:	f104 0909 	add.w	r9, r4, #9
 10134c4:	4444      	add	r4, r8
 10134c6:	464e      	mov	r6, r9
 10134c8:	f816 3b01 	ldrb.w	r3, [r6], #1
 10134cc:	4601      	mov	r1, r0
 10134ce:	220a      	movs	r2, #10
 10134d0:	4638      	mov	r0, r7
 10134d2:	3b30      	subs	r3, #48	; 0x30
 10134d4:	f7ff ff84 	bl	10133e0 <__multadd>
 10134d8:	42b4      	cmp	r4, r6
 10134da:	d1f5      	bne.n	10134c8 <__s2b+0x58>
 10134dc:	f1a8 0408 	sub.w	r4, r8, #8
 10134e0:	444c      	add	r4, r9
 10134e2:	4545      	cmp	r5, r8
 10134e4:	dd0c      	ble.n	1013500 <__s2b+0x90>
 10134e6:	eba5 0508 	sub.w	r5, r5, r8
 10134ea:	4425      	add	r5, r4
 10134ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 10134f0:	4601      	mov	r1, r0
 10134f2:	220a      	movs	r2, #10
 10134f4:	4638      	mov	r0, r7
 10134f6:	3b30      	subs	r3, #48	; 0x30
 10134f8:	f7ff ff72 	bl	10133e0 <__multadd>
 10134fc:	42a5      	cmp	r5, r4
 10134fe:	d1f5      	bne.n	10134ec <__s2b+0x7c>
 1013500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1013504:	2100      	movs	r1, #0
 1013506:	e7cd      	b.n	10134a4 <__s2b+0x34>

01013508 <__hi0bits>:
 1013508:	0c02      	lsrs	r2, r0, #16
 101350a:	4603      	mov	r3, r0
 101350c:	2000      	movs	r0, #0
 101350e:	0412      	lsls	r2, r2, #16
 1013510:	b90a      	cbnz	r2, 1013516 <__hi0bits+0xe>
 1013512:	041b      	lsls	r3, r3, #16
 1013514:	2010      	movs	r0, #16
 1013516:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 101351a:	bf04      	itt	eq
 101351c:	021b      	lsleq	r3, r3, #8
 101351e:	3008      	addeq	r0, #8
 1013520:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 1013524:	bf04      	itt	eq
 1013526:	011b      	lsleq	r3, r3, #4
 1013528:	3004      	addeq	r0, #4
 101352a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 101352e:	bf04      	itt	eq
 1013530:	009b      	lsleq	r3, r3, #2
 1013532:	3002      	addeq	r0, #2
 1013534:	2b00      	cmp	r3, #0
 1013536:	db05      	blt.n	1013544 <__hi0bits+0x3c>
 1013538:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 101353c:	f100 0001 	add.w	r0, r0, #1
 1013540:	bf08      	it	eq
 1013542:	2020      	moveq	r0, #32
 1013544:	4770      	bx	lr
 1013546:	bf00      	nop

01013548 <__lo0bits>:
 1013548:	6803      	ldr	r3, [r0, #0]
 101354a:	4601      	mov	r1, r0
 101354c:	f013 0207 	ands.w	r2, r3, #7
 1013550:	d009      	beq.n	1013566 <__lo0bits+0x1e>
 1013552:	07da      	lsls	r2, r3, #31
 1013554:	d422      	bmi.n	101359c <__lo0bits+0x54>
 1013556:	0798      	lsls	r0, r3, #30
 1013558:	bf4b      	itete	mi
 101355a:	085b      	lsrmi	r3, r3, #1
 101355c:	089b      	lsrpl	r3, r3, #2
 101355e:	2001      	movmi	r0, #1
 1013560:	2002      	movpl	r0, #2
 1013562:	600b      	str	r3, [r1, #0]
 1013564:	4770      	bx	lr
 1013566:	b298      	uxth	r0, r3
 1013568:	b9b0      	cbnz	r0, 1013598 <__lo0bits+0x50>
 101356a:	0c1b      	lsrs	r3, r3, #16
 101356c:	2010      	movs	r0, #16
 101356e:	f013 0fff 	tst.w	r3, #255	; 0xff
 1013572:	bf04      	itt	eq
 1013574:	0a1b      	lsreq	r3, r3, #8
 1013576:	3008      	addeq	r0, #8
 1013578:	071a      	lsls	r2, r3, #28
 101357a:	bf04      	itt	eq
 101357c:	091b      	lsreq	r3, r3, #4
 101357e:	3004      	addeq	r0, #4
 1013580:	079a      	lsls	r2, r3, #30
 1013582:	bf04      	itt	eq
 1013584:	089b      	lsreq	r3, r3, #2
 1013586:	3002      	addeq	r0, #2
 1013588:	07da      	lsls	r2, r3, #31
 101358a:	d403      	bmi.n	1013594 <__lo0bits+0x4c>
 101358c:	085b      	lsrs	r3, r3, #1
 101358e:	f100 0001 	add.w	r0, r0, #1
 1013592:	d005      	beq.n	10135a0 <__lo0bits+0x58>
 1013594:	600b      	str	r3, [r1, #0]
 1013596:	4770      	bx	lr
 1013598:	4610      	mov	r0, r2
 101359a:	e7e8      	b.n	101356e <__lo0bits+0x26>
 101359c:	2000      	movs	r0, #0
 101359e:	4770      	bx	lr
 10135a0:	2020      	movs	r0, #32
 10135a2:	4770      	bx	lr

010135a4 <__i2b>:
 10135a4:	b510      	push	{r4, lr}
 10135a6:	460c      	mov	r4, r1
 10135a8:	2101      	movs	r1, #1
 10135aa:	f7ff fee9 	bl	1013380 <_Balloc>
 10135ae:	2201      	movs	r2, #1
 10135b0:	6144      	str	r4, [r0, #20]
 10135b2:	6102      	str	r2, [r0, #16]
 10135b4:	bd10      	pop	{r4, pc}
 10135b6:	bf00      	nop

010135b8 <__multiply>:
 10135b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10135bc:	b083      	sub	sp, #12
 10135be:	690d      	ldr	r5, [r1, #16]
 10135c0:	6913      	ldr	r3, [r2, #16]
 10135c2:	429d      	cmp	r5, r3
 10135c4:	bfb5      	itete	lt
 10135c6:	4614      	movlt	r4, r2
 10135c8:	460c      	movge	r4, r1
 10135ca:	461f      	movlt	r7, r3
 10135cc:	469b      	movge	fp, r3
 10135ce:	68a3      	ldr	r3, [r4, #8]
 10135d0:	bfae      	itee	ge
 10135d2:	462f      	movge	r7, r5
 10135d4:	46ab      	movlt	fp, r5
 10135d6:	460d      	movlt	r5, r1
 10135d8:	eb07 080b 	add.w	r8, r7, fp
 10135dc:	6861      	ldr	r1, [r4, #4]
 10135de:	bfa8      	it	ge
 10135e0:	4615      	movge	r5, r2
 10135e2:	4543      	cmp	r3, r8
 10135e4:	bfb8      	it	lt
 10135e6:	3101      	addlt	r1, #1
 10135e8:	f7ff feca 	bl	1013380 <_Balloc>
 10135ec:	f100 0a14 	add.w	sl, r0, #20
 10135f0:	4603      	mov	r3, r0
 10135f2:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 10135f6:	9000      	str	r0, [sp, #0]
 10135f8:	45ca      	cmp	sl, r9
 10135fa:	bf3c      	itt	cc
 10135fc:	4653      	movcc	r3, sl
 10135fe:	2000      	movcc	r0, #0
 1013600:	d203      	bcs.n	101360a <__multiply+0x52>
 1013602:	f843 0b04 	str.w	r0, [r3], #4
 1013606:	4599      	cmp	r9, r3
 1013608:	d8fb      	bhi.n	1013602 <__multiply+0x4a>
 101360a:	f105 0e14 	add.w	lr, r5, #20
 101360e:	f104 0314 	add.w	r3, r4, #20
 1013612:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 1013616:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 101361a:	45de      	cmp	lr, fp
 101361c:	bf3c      	itt	cc
 101361e:	f8cd 8004 	strcc.w	r8, [sp, #4]
 1013622:	4698      	movcc	r8, r3
 1013624:	d306      	bcc.n	1013634 <__multiply+0x7c>
 1013626:	e051      	b.n	10136cc <__multiply+0x114>
 1013628:	0c24      	lsrs	r4, r4, #16
 101362a:	d12a      	bne.n	1013682 <__multiply+0xca>
 101362c:	45f3      	cmp	fp, lr
 101362e:	f10a 0a04 	add.w	sl, sl, #4
 1013632:	d949      	bls.n	10136c8 <__multiply+0x110>
 1013634:	f85e 4b04 	ldr.w	r4, [lr], #4
 1013638:	b2a6      	uxth	r6, r4
 101363a:	2e00      	cmp	r6, #0
 101363c:	d0f4      	beq.n	1013628 <__multiply+0x70>
 101363e:	4645      	mov	r5, r8
 1013640:	4654      	mov	r4, sl
 1013642:	2300      	movs	r3, #0
 1013644:	f855 1b04 	ldr.w	r1, [r5], #4
 1013648:	6820      	ldr	r0, [r4, #0]
 101364a:	42af      	cmp	r7, r5
 101364c:	b28a      	uxth	r2, r1
 101364e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 1013652:	fa1f fc80 	uxth.w	ip, r0
 1013656:	ea4f 4010 	mov.w	r0, r0, lsr #16
 101365a:	fb06 c202 	mla	r2, r6, r2, ip
 101365e:	fb06 0101 	mla	r1, r6, r1, r0
 1013662:	4413      	add	r3, r2
 1013664:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 1013668:	b29b      	uxth	r3, r3
 101366a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 101366e:	ea4f 4311 	mov.w	r3, r1, lsr #16
 1013672:	f844 2b04 	str.w	r2, [r4], #4
 1013676:	d8e5      	bhi.n	1013644 <__multiply+0x8c>
 1013678:	6023      	str	r3, [r4, #0]
 101367a:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 101367e:	0c24      	lsrs	r4, r4, #16
 1013680:	d0d4      	beq.n	101362c <__multiply+0x74>
 1013682:	f8da 3000 	ldr.w	r3, [sl]
 1013686:	4645      	mov	r5, r8
 1013688:	4656      	mov	r6, sl
 101368a:	2200      	movs	r2, #0
 101368c:	4618      	mov	r0, r3
 101368e:	8829      	ldrh	r1, [r5, #0]
 1013690:	0c00      	lsrs	r0, r0, #16
 1013692:	b29b      	uxth	r3, r3
 1013694:	fb04 0001 	mla	r0, r4, r1, r0
 1013698:	4402      	add	r2, r0
 101369a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 101369e:	f846 3b04 	str.w	r3, [r6], #4
 10136a2:	f855 3b04 	ldr.w	r3, [r5], #4
 10136a6:	6830      	ldr	r0, [r6, #0]
 10136a8:	42af      	cmp	r7, r5
 10136aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 10136ae:	b281      	uxth	r1, r0
 10136b0:	fb04 1303 	mla	r3, r4, r3, r1
 10136b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 10136b8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 10136bc:	d8e7      	bhi.n	101368e <__multiply+0xd6>
 10136be:	45f3      	cmp	fp, lr
 10136c0:	6033      	str	r3, [r6, #0]
 10136c2:	f10a 0a04 	add.w	sl, sl, #4
 10136c6:	d8b5      	bhi.n	1013634 <__multiply+0x7c>
 10136c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 10136cc:	f1b8 0f00 	cmp.w	r8, #0
 10136d0:	dd0b      	ble.n	10136ea <__multiply+0x132>
 10136d2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 10136d6:	f1a9 0904 	sub.w	r9, r9, #4
 10136da:	b11b      	cbz	r3, 10136e4 <__multiply+0x12c>
 10136dc:	e005      	b.n	10136ea <__multiply+0x132>
 10136de:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 10136e2:	b913      	cbnz	r3, 10136ea <__multiply+0x132>
 10136e4:	f1b8 0801 	subs.w	r8, r8, #1
 10136e8:	d1f9      	bne.n	10136de <__multiply+0x126>
 10136ea:	9800      	ldr	r0, [sp, #0]
 10136ec:	f8c0 8010 	str.w	r8, [r0, #16]
 10136f0:	b003      	add	sp, #12
 10136f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10136f6:	bf00      	nop

010136f8 <__pow5mult>:
 10136f8:	f012 0303 	ands.w	r3, r2, #3
 10136fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1013700:	4614      	mov	r4, r2
 1013702:	4607      	mov	r7, r0
 1013704:	bf08      	it	eq
 1013706:	460d      	moveq	r5, r1
 1013708:	d12d      	bne.n	1013766 <__pow5mult+0x6e>
 101370a:	10a4      	asrs	r4, r4, #2
 101370c:	d01c      	beq.n	1013748 <__pow5mult+0x50>
 101370e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 1013710:	b3ae      	cbz	r6, 101377e <__pow5mult+0x86>
 1013712:	07e3      	lsls	r3, r4, #31
 1013714:	f04f 0800 	mov.w	r8, #0
 1013718:	d406      	bmi.n	1013728 <__pow5mult+0x30>
 101371a:	1064      	asrs	r4, r4, #1
 101371c:	d014      	beq.n	1013748 <__pow5mult+0x50>
 101371e:	6830      	ldr	r0, [r6, #0]
 1013720:	b1a8      	cbz	r0, 101374e <__pow5mult+0x56>
 1013722:	4606      	mov	r6, r0
 1013724:	07e3      	lsls	r3, r4, #31
 1013726:	d5f8      	bpl.n	101371a <__pow5mult+0x22>
 1013728:	4632      	mov	r2, r6
 101372a:	4629      	mov	r1, r5
 101372c:	4638      	mov	r0, r7
 101372e:	f7ff ff43 	bl	10135b8 <__multiply>
 1013732:	b1b5      	cbz	r5, 1013762 <__pow5mult+0x6a>
 1013734:	686a      	ldr	r2, [r5, #4]
 1013736:	1064      	asrs	r4, r4, #1
 1013738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 101373a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 101373e:	6029      	str	r1, [r5, #0]
 1013740:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1013744:	4605      	mov	r5, r0
 1013746:	d1ea      	bne.n	101371e <__pow5mult+0x26>
 1013748:	4628      	mov	r0, r5
 101374a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101374e:	4632      	mov	r2, r6
 1013750:	4631      	mov	r1, r6
 1013752:	4638      	mov	r0, r7
 1013754:	f7ff ff30 	bl	10135b8 <__multiply>
 1013758:	6030      	str	r0, [r6, #0]
 101375a:	4606      	mov	r6, r0
 101375c:	f8c0 8000 	str.w	r8, [r0]
 1013760:	e7e0      	b.n	1013724 <__pow5mult+0x2c>
 1013762:	4605      	mov	r5, r0
 1013764:	e7d9      	b.n	101371a <__pow5mult+0x22>
 1013766:	1e5a      	subs	r2, r3, #1
 1013768:	f646 3558 	movw	r5, #27480	; 0x6b58
 101376c:	f2c0 1505 	movt	r5, #261	; 0x105
 1013770:	2300      	movs	r3, #0
 1013772:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 1013776:	f7ff fe33 	bl	10133e0 <__multadd>
 101377a:	4605      	mov	r5, r0
 101377c:	e7c5      	b.n	101370a <__pow5mult+0x12>
 101377e:	2101      	movs	r1, #1
 1013780:	4638      	mov	r0, r7
 1013782:	f7ff fdfd 	bl	1013380 <_Balloc>
 1013786:	2301      	movs	r3, #1
 1013788:	f240 2271 	movw	r2, #625	; 0x271
 101378c:	4606      	mov	r6, r0
 101378e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 1013792:	2300      	movs	r3, #0
 1013794:	64b8      	str	r0, [r7, #72]	; 0x48
 1013796:	6003      	str	r3, [r0, #0]
 1013798:	e7bb      	b.n	1013712 <__pow5mult+0x1a>
 101379a:	bf00      	nop

0101379c <__lshift>:
 101379c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10137a0:	ea4f 1962 	mov.w	r9, r2, asr #5
 10137a4:	690e      	ldr	r6, [r1, #16]
 10137a6:	460d      	mov	r5, r1
 10137a8:	688b      	ldr	r3, [r1, #8]
 10137aa:	4690      	mov	r8, r2
 10137ac:	444e      	add	r6, r9
 10137ae:	4607      	mov	r7, r0
 10137b0:	1c74      	adds	r4, r6, #1
 10137b2:	6849      	ldr	r1, [r1, #4]
 10137b4:	429c      	cmp	r4, r3
 10137b6:	dd03      	ble.n	10137c0 <__lshift+0x24>
 10137b8:	005b      	lsls	r3, r3, #1
 10137ba:	3101      	adds	r1, #1
 10137bc:	429c      	cmp	r4, r3
 10137be:	dcfb      	bgt.n	10137b8 <__lshift+0x1c>
 10137c0:	4638      	mov	r0, r7
 10137c2:	f7ff fddd 	bl	1013380 <_Balloc>
 10137c6:	f1b9 0f00 	cmp.w	r9, #0
 10137ca:	4684      	mov	ip, r0
 10137cc:	f100 0014 	add.w	r0, r0, #20
 10137d0:	dd0e      	ble.n	10137f0 <__lshift+0x54>
 10137d2:	f109 0905 	add.w	r9, r9, #5
 10137d6:	4603      	mov	r3, r0
 10137d8:	2100      	movs	r1, #0
 10137da:	ea4f 0989 	mov.w	r9, r9, lsl #2
 10137de:	eb0c 0209 	add.w	r2, ip, r9
 10137e2:	f843 1b04 	str.w	r1, [r3], #4
 10137e6:	4293      	cmp	r3, r2
 10137e8:	d1fb      	bne.n	10137e2 <__lshift+0x46>
 10137ea:	f1a9 0914 	sub.w	r9, r9, #20
 10137ee:	4448      	add	r0, r9
 10137f0:	6929      	ldr	r1, [r5, #16]
 10137f2:	f018 081f 	ands.w	r8, r8, #31
 10137f6:	f105 0314 	add.w	r3, r5, #20
 10137fa:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 10137fe:	d022      	beq.n	1013846 <__lshift+0xaa>
 1013800:	f1c8 0220 	rsb	r2, r8, #32
 1013804:	f04f 0900 	mov.w	r9, #0
 1013808:	6819      	ldr	r1, [r3, #0]
 101380a:	fa01 f108 	lsl.w	r1, r1, r8
 101380e:	ea41 0109 	orr.w	r1, r1, r9
 1013812:	f840 1b04 	str.w	r1, [r0], #4
 1013816:	f853 1b04 	ldr.w	r1, [r3], #4
 101381a:	4573      	cmp	r3, lr
 101381c:	fa21 f902 	lsr.w	r9, r1, r2
 1013820:	d3f2      	bcc.n	1013808 <__lshift+0x6c>
 1013822:	f1b9 0f00 	cmp.w	r9, #0
 1013826:	bf18      	it	ne
 1013828:	4626      	movne	r6, r4
 101382a:	f8c0 9000 	str.w	r9, [r0]
 101382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1013830:	4660      	mov	r0, ip
 1013832:	686a      	ldr	r2, [r5, #4]
 1013834:	f8cc 6010 	str.w	r6, [ip, #16]
 1013838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 101383c:	6029      	str	r1, [r5, #0]
 101383e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1013842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1013846:	3804      	subs	r0, #4
 1013848:	f853 2b04 	ldr.w	r2, [r3], #4
 101384c:	459e      	cmp	lr, r3
 101384e:	f840 2f04 	str.w	r2, [r0, #4]!
 1013852:	d8f9      	bhi.n	1013848 <__lshift+0xac>
 1013854:	e7eb      	b.n	101382e <__lshift+0x92>
 1013856:	bf00      	nop

01013858 <__mcmp>:
 1013858:	b430      	push	{r4, r5}
 101385a:	4605      	mov	r5, r0
 101385c:	690a      	ldr	r2, [r1, #16]
 101385e:	6900      	ldr	r0, [r0, #16]
 1013860:	1a80      	subs	r0, r0, r2
 1013862:	d110      	bne.n	1013886 <__mcmp+0x2e>
 1013864:	0092      	lsls	r2, r2, #2
 1013866:	3514      	adds	r5, #20
 1013868:	3114      	adds	r1, #20
 101386a:	18ab      	adds	r3, r5, r2
 101386c:	4411      	add	r1, r2
 101386e:	e001      	b.n	1013874 <__mcmp+0x1c>
 1013870:	429d      	cmp	r5, r3
 1013872:	d208      	bcs.n	1013886 <__mcmp+0x2e>
 1013874:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 1013878:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 101387c:	4294      	cmp	r4, r2
 101387e:	d0f7      	beq.n	1013870 <__mcmp+0x18>
 1013880:	bf28      	it	cs
 1013882:	2001      	movcs	r0, #1
 1013884:	d301      	bcc.n	101388a <__mcmp+0x32>
 1013886:	bc30      	pop	{r4, r5}
 1013888:	4770      	bx	lr
 101388a:	f04f 30ff 	mov.w	r0, #4294967295
 101388e:	bc30      	pop	{r4, r5}
 1013890:	4770      	bx	lr
 1013892:	bf00      	nop

01013894 <__mdiff>:
 1013894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1013898:	460f      	mov	r7, r1
 101389a:	690d      	ldr	r5, [r1, #16]
 101389c:	4616      	mov	r6, r2
 101389e:	6911      	ldr	r1, [r2, #16]
 10138a0:	4684      	mov	ip, r0
 10138a2:	f107 0414 	add.w	r4, r7, #20
 10138a6:	f102 0914 	add.w	r9, r2, #20
 10138aa:	1a6d      	subs	r5, r5, r1
 10138ac:	2d00      	cmp	r5, #0
 10138ae:	d15f      	bne.n	1013970 <__mdiff+0xdc>
 10138b0:	0089      	lsls	r1, r1, #2
 10138b2:	1863      	adds	r3, r4, r1
 10138b4:	4449      	add	r1, r9
 10138b6:	e001      	b.n	10138bc <__mdiff+0x28>
 10138b8:	42a3      	cmp	r3, r4
 10138ba:	d964      	bls.n	1013986 <__mdiff+0xf2>
 10138bc:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 10138c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 10138c4:	4290      	cmp	r0, r2
 10138c6:	d0f7      	beq.n	10138b8 <__mdiff+0x24>
 10138c8:	d355      	bcc.n	1013976 <__mdiff+0xe2>
 10138ca:	4660      	mov	r0, ip
 10138cc:	6879      	ldr	r1, [r7, #4]
 10138ce:	f7ff fd57 	bl	1013380 <_Balloc>
 10138d2:	f8d7 8010 	ldr.w	r8, [r7, #16]
 10138d6:	6933      	ldr	r3, [r6, #16]
 10138d8:	46cc      	mov	ip, r9
 10138da:	4627      	mov	r7, r4
 10138dc:	2200      	movs	r2, #0
 10138de:	eb04 0e88 	add.w	lr, r4, r8, lsl #2
 10138e2:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 10138e6:	60c5      	str	r5, [r0, #12]
 10138e8:	f100 0514 	add.w	r5, r0, #20
 10138ec:	e000      	b.n	10138f0 <__mdiff+0x5c>
 10138ee:	4625      	mov	r5, r4
 10138f0:	f857 ab04 	ldr.w	sl, [r7], #4
 10138f4:	462c      	mov	r4, r5
 10138f6:	f85c 1b04 	ldr.w	r1, [ip], #4
 10138fa:	fa12 f38a 	uxtah	r3, r2, sl
 10138fe:	45e1      	cmp	r9, ip
 1013900:	fa1f fb81 	uxth.w	fp, r1
 1013904:	ea4f 4211 	mov.w	r2, r1, lsr #16
 1013908:	eba3 030b 	sub.w	r3, r3, fp
 101390c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 1013910:	463e      	mov	r6, r7
 1013912:	eb02 4223 	add.w	r2, r2, r3, asr #16
 1013916:	b29b      	uxth	r3, r3
 1013918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 101391c:	ea4f 4222 	mov.w	r2, r2, asr #16
 1013920:	f844 3b04 	str.w	r3, [r4], #4
 1013924:	d8e3      	bhi.n	10138ee <__mdiff+0x5a>
 1013926:	45be      	cmp	lr, r7
 1013928:	d917      	bls.n	101395a <__mdiff+0xc6>
 101392a:	4625      	mov	r5, r4
 101392c:	f856 1b04 	ldr.w	r1, [r6], #4
 1013930:	45b6      	cmp	lr, r6
 1013932:	fa12 f381 	uxtah	r3, r2, r1
 1013936:	ea4f 4223 	mov.w	r2, r3, asr #16
 101393a:	b29b      	uxth	r3, r3
 101393c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 1013940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1013944:	ea4f 4222 	mov.w	r2, r2, asr #16
 1013948:	f845 3b04 	str.w	r3, [r5], #4
 101394c:	d8ee      	bhi.n	101392c <__mdiff+0x98>
 101394e:	f10e 35ff 	add.w	r5, lr, #4294967295
 1013952:	1bed      	subs	r5, r5, r7
 1013954:	f025 0503 	bic.w	r5, r5, #3
 1013958:	4425      	add	r5, r4
 101395a:	b92b      	cbnz	r3, 1013968 <__mdiff+0xd4>
 101395c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 1013960:	f108 38ff 	add.w	r8, r8, #4294967295
 1013964:	2b00      	cmp	r3, #0
 1013966:	d0f9      	beq.n	101395c <__mdiff+0xc8>
 1013968:	f8c0 8010 	str.w	r8, [r0, #16]
 101396c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013970:	bfa8      	it	ge
 1013972:	2500      	movge	r5, #0
 1013974:	daa9      	bge.n	10138ca <__mdiff+0x36>
 1013976:	4622      	mov	r2, r4
 1013978:	463b      	mov	r3, r7
 101397a:	464c      	mov	r4, r9
 101397c:	4637      	mov	r7, r6
 101397e:	4691      	mov	r9, r2
 1013980:	461e      	mov	r6, r3
 1013982:	2501      	movs	r5, #1
 1013984:	e7a1      	b.n	10138ca <__mdiff+0x36>
 1013986:	4660      	mov	r0, ip
 1013988:	2100      	movs	r1, #0
 101398a:	f7ff fcf9 	bl	1013380 <_Balloc>
 101398e:	2201      	movs	r2, #1
 1013990:	2300      	movs	r3, #0
 1013992:	e9c0 2304 	strd	r2, r3, [r0, #16]
 1013996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101399a:	bf00      	nop

0101399c <__ulp>:
 101399c:	ee10 2a90 	vmov	r2, s1
 10139a0:	2300      	movs	r3, #0
 10139a2:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 10139a6:	401a      	ands	r2, r3
 10139a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 10139ac:	2b00      	cmp	r3, #0
 10139ae:	dd04      	ble.n	10139ba <__ulp+0x1e>
 10139b0:	2000      	movs	r0, #0
 10139b2:	4619      	mov	r1, r3
 10139b4:	ec41 0b10 	vmov	d0, r0, r1
 10139b8:	4770      	bx	lr
 10139ba:	425b      	negs	r3, r3
 10139bc:	151b      	asrs	r3, r3, #20
 10139be:	2b13      	cmp	r3, #19
 10139c0:	dc07      	bgt.n	10139d2 <__ulp+0x36>
 10139c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 10139c6:	2000      	movs	r0, #0
 10139c8:	fa42 f103 	asr.w	r1, r2, r3
 10139cc:	ec41 0b10 	vmov	d0, r0, r1
 10139d0:	4770      	bx	lr
 10139d2:	3b14      	subs	r3, #20
 10139d4:	2100      	movs	r1, #0
 10139d6:	2b1e      	cmp	r3, #30
 10139d8:	bfd6      	itet	le
 10139da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 10139de:	2301      	movgt	r3, #1
 10139e0:	fa22 f303 	lsrle.w	r3, r2, r3
 10139e4:	4618      	mov	r0, r3
 10139e6:	ec41 0b10 	vmov	d0, r0, r1
 10139ea:	4770      	bx	lr

010139ec <__b2d>:
 10139ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10139ee:	f100 0614 	add.w	r6, r0, #20
 10139f2:	6904      	ldr	r4, [r0, #16]
 10139f4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 10139f8:	1f27      	subs	r7, r4, #4
 10139fa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 10139fe:	4628      	mov	r0, r5
 1013a00:	f7ff fd82 	bl	1013508 <__hi0bits>
 1013a04:	280a      	cmp	r0, #10
 1013a06:	f1c0 0320 	rsb	r3, r0, #32
 1013a0a:	600b      	str	r3, [r1, #0]
 1013a0c:	dd24      	ble.n	1013a58 <__b2d+0x6c>
 1013a0e:	42be      	cmp	r6, r7
 1013a10:	f1a0 000b 	sub.w	r0, r0, #11
 1013a14:	d219      	bcs.n	1013a4a <__b2d+0x5e>
 1013a16:	f854 1c08 	ldr.w	r1, [r4, #-8]
 1013a1a:	b1c0      	cbz	r0, 1013a4e <__b2d+0x62>
 1013a1c:	f1c0 0720 	rsb	r7, r0, #32
 1013a20:	4085      	lsls	r5, r0
 1013a22:	fa21 f307 	lsr.w	r3, r1, r7
 1013a26:	4081      	lsls	r1, r0
 1013a28:	431d      	orrs	r5, r3
 1013a2a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1013a2e:	f1a4 0508 	sub.w	r5, r4, #8
 1013a32:	42ae      	cmp	r6, r5
 1013a34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1013a38:	d203      	bcs.n	1013a42 <__b2d+0x56>
 1013a3a:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 1013a3e:	40f8      	lsrs	r0, r7
 1013a40:	4301      	orrs	r1, r0
 1013a42:	460a      	mov	r2, r1
 1013a44:	ec43 2b10 	vmov	d0, r2, r3
 1013a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1013a4a:	4601      	mov	r1, r0
 1013a4c:	b9e8      	cbnz	r0, 1013a8a <__b2d+0x9e>
 1013a4e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 1013a52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1013a56:	e7f4      	b.n	1013a42 <__b2d+0x56>
 1013a58:	f1c0 0c0b 	rsb	ip, r0, #11
 1013a5c:	42be      	cmp	r6, r7
 1013a5e:	fa25 f10c 	lsr.w	r1, r5, ip
 1013a62:	f100 0015 	add.w	r0, r0, #21
 1013a66:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 1013a6a:	bf38      	it	cc
 1013a6c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 1013a70:	fa05 f000 	lsl.w	r0, r5, r0
 1013a74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1013a78:	bf2c      	ite	cs
 1013a7a:	2100      	movcs	r1, #0
 1013a7c:	fa21 f10c 	lsrcc.w	r1, r1, ip
 1013a80:	ea40 0201 	orr.w	r2, r0, r1
 1013a84:	ec43 2b10 	vmov	d0, r2, r3
 1013a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1013a8a:	fa05 f000 	lsl.w	r0, r5, r0
 1013a8e:	2100      	movs	r1, #0
 1013a90:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 1013a94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 1013a98:	e7d3      	b.n	1013a42 <__b2d+0x56>
 1013a9a:	bf00      	nop

01013a9c <__d2b>:
 1013a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1013aa0:	4688      	mov	r8, r1
 1013aa2:	b083      	sub	sp, #12
 1013aa4:	2101      	movs	r1, #1
 1013aa6:	ec55 4b10 	vmov	r4, r5, d0
 1013aaa:	4617      	mov	r7, r2
 1013aac:	f7ff fc68 	bl	1013380 <_Balloc>
 1013ab0:	f3c5 560a 	ubfx	r6, r5, #20, #11
 1013ab4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 1013ab8:	4681      	mov	r9, r0
 1013aba:	b10e      	cbz	r6, 1013ac0 <__d2b+0x24>
 1013abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1013ac0:	2c00      	cmp	r4, #0
 1013ac2:	9301      	str	r3, [sp, #4]
 1013ac4:	d029      	beq.n	1013b1a <__d2b+0x7e>
 1013ac6:	4668      	mov	r0, sp
 1013ac8:	9400      	str	r4, [sp, #0]
 1013aca:	f7ff fd3d 	bl	1013548 <__lo0bits>
 1013ace:	b9c0      	cbnz	r0, 1013b02 <__d2b+0x66>
 1013ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 1013ad4:	f8c9 2014 	str.w	r2, [r9, #20]
 1013ad8:	2b00      	cmp	r3, #0
 1013ada:	f8c9 3018 	str.w	r3, [r9, #24]
 1013ade:	bf14      	ite	ne
 1013ae0:	2102      	movne	r1, #2
 1013ae2:	2101      	moveq	r1, #1
 1013ae4:	f8c9 1010 	str.w	r1, [r9, #16]
 1013ae8:	b30e      	cbz	r6, 1013b2e <__d2b+0x92>
 1013aea:	f2a6 4633 	subw	r6, r6, #1075	; 0x433
 1013aee:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 1013af2:	4406      	add	r6, r0
 1013af4:	4648      	mov	r0, r9
 1013af6:	f8c8 6000 	str.w	r6, [r8]
 1013afa:	603b      	str	r3, [r7, #0]
 1013afc:	b003      	add	sp, #12
 1013afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1013b02:	9b01      	ldr	r3, [sp, #4]
 1013b04:	f1c0 0220 	rsb	r2, r0, #32
 1013b08:	9900      	ldr	r1, [sp, #0]
 1013b0a:	fa03 f202 	lsl.w	r2, r3, r2
 1013b0e:	40c3      	lsrs	r3, r0
 1013b10:	430a      	orrs	r2, r1
 1013b12:	9301      	str	r3, [sp, #4]
 1013b14:	f8c9 2014 	str.w	r2, [r9, #20]
 1013b18:	e7de      	b.n	1013ad8 <__d2b+0x3c>
 1013b1a:	a801      	add	r0, sp, #4
 1013b1c:	f7ff fd14 	bl	1013548 <__lo0bits>
 1013b20:	9b01      	ldr	r3, [sp, #4]
 1013b22:	2101      	movs	r1, #1
 1013b24:	e9c9 1304 	strd	r1, r3, [r9, #16]
 1013b28:	3020      	adds	r0, #32
 1013b2a:	2e00      	cmp	r6, #0
 1013b2c:	d1dd      	bne.n	1013aea <__d2b+0x4e>
 1013b2e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 1013b32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 1013b36:	f8c8 0000 	str.w	r0, [r8]
 1013b3a:	6918      	ldr	r0, [r3, #16]
 1013b3c:	f7ff fce4 	bl	1013508 <__hi0bits>
 1013b40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 1013b44:	6038      	str	r0, [r7, #0]
 1013b46:	4648      	mov	r0, r9
 1013b48:	b003      	add	sp, #12
 1013b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1013b4e:	bf00      	nop

01013b50 <__ratio>:
 1013b50:	b530      	push	{r4, r5, lr}
 1013b52:	b087      	sub	sp, #28
 1013b54:	460c      	mov	r4, r1
 1013b56:	a904      	add	r1, sp, #16
 1013b58:	4605      	mov	r5, r0
 1013b5a:	f7ff ff47 	bl	10139ec <__b2d>
 1013b5e:	4620      	mov	r0, r4
 1013b60:	a905      	add	r1, sp, #20
 1013b62:	ed8d 0b00 	vstr	d0, [sp]
 1013b66:	f7ff ff41 	bl	10139ec <__b2d>
 1013b6a:	6920      	ldr	r0, [r4, #16]
 1013b6c:	6929      	ldr	r1, [r5, #16]
 1013b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 1013b72:	1a09      	subs	r1, r1, r0
 1013b74:	1ad3      	subs	r3, r2, r3
 1013b76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 1013b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 1013b7e:	2b00      	cmp	r3, #0
 1013b80:	ed8d 0b02 	vstr	d0, [sp, #8]
 1013b84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 1013b88:	dd0c      	ble.n	1013ba4 <__ratio+0x54>
 1013b8a:	9a01      	ldr	r2, [sp, #4]
 1013b8c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 1013b90:	e9cd 0100 	strd	r0, r1, [sp]
 1013b94:	ed9d 7b00 	vldr	d7, [sp]
 1013b98:	ed9d 6b02 	vldr	d6, [sp, #8]
 1013b9c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 1013ba0:	b007      	add	sp, #28
 1013ba2:	bd30      	pop	{r4, r5, pc}
 1013ba4:	9a03      	ldr	r2, [sp, #12]
 1013ba6:	eba2 5503 	sub.w	r5, r2, r3, lsl #20
 1013baa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 1013bae:	e7f1      	b.n	1013b94 <__ratio+0x44>

01013bb0 <_mprec_log10>:
 1013bb0:	2817      	cmp	r0, #23
 1013bb2:	dd08      	ble.n	1013bc6 <_mprec_log10+0x16>
 1013bb4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 1013bb8:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 1013bbc:	3801      	subs	r0, #1
 1013bbe:	ee20 0b07 	vmul.f64	d0, d0, d7
 1013bc2:	d1fb      	bne.n	1013bbc <_mprec_log10+0xc>
 1013bc4:	4770      	bx	lr
 1013bc6:	f646 3358 	movw	r3, #27480	; 0x6b58
 1013bca:	f2c0 1305 	movt	r3, #261	; 0x105
 1013bce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 1013bd2:	ed90 0b04 	vldr	d0, [r0, #16]
 1013bd6:	4770      	bx	lr

01013bd8 <__copybits>:
 1013bd8:	b470      	push	{r4, r5, r6}
 1013bda:	3901      	subs	r1, #1
 1013bdc:	6914      	ldr	r4, [r2, #16]
 1013bde:	f102 0314 	add.w	r3, r2, #20
 1013be2:	1149      	asrs	r1, r1, #5
 1013be4:	1c4e      	adds	r6, r1, #1
 1013be6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 1013bea:	428b      	cmp	r3, r1
 1013bec:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 1013bf0:	d20c      	bcs.n	1013c0c <__copybits+0x34>
 1013bf2:	1f04      	subs	r4, r0, #4
 1013bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 1013bf8:	4299      	cmp	r1, r3
 1013bfa:	f844 5f04 	str.w	r5, [r4, #4]!
 1013bfe:	d8f9      	bhi.n	1013bf4 <__copybits+0x1c>
 1013c00:	1a8b      	subs	r3, r1, r2
 1013c02:	3b15      	subs	r3, #21
 1013c04:	f023 0303 	bic.w	r3, r3, #3
 1013c08:	3304      	adds	r3, #4
 1013c0a:	4418      	add	r0, r3
 1013c0c:	4286      	cmp	r6, r0
 1013c0e:	d904      	bls.n	1013c1a <__copybits+0x42>
 1013c10:	2300      	movs	r3, #0
 1013c12:	f840 3b04 	str.w	r3, [r0], #4
 1013c16:	4286      	cmp	r6, r0
 1013c18:	d8fb      	bhi.n	1013c12 <__copybits+0x3a>
 1013c1a:	bc70      	pop	{r4, r5, r6}
 1013c1c:	4770      	bx	lr
 1013c1e:	bf00      	nop

01013c20 <__any_on>:
 1013c20:	6903      	ldr	r3, [r0, #16]
 1013c22:	114a      	asrs	r2, r1, #5
 1013c24:	b410      	push	{r4}
 1013c26:	4293      	cmp	r3, r2
 1013c28:	f100 0414 	add.w	r4, r0, #20
 1013c2c:	bfb8      	it	lt
 1013c2e:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 1013c32:	db02      	blt.n	1013c3a <__any_on+0x1a>
 1013c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 1013c38:	dc0e      	bgt.n	1013c58 <__any_on+0x38>
 1013c3a:	429c      	cmp	r4, r3
 1013c3c:	d21b      	bcs.n	1013c76 <__any_on+0x56>
 1013c3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 1013c42:	3b04      	subs	r3, #4
 1013c44:	b118      	cbz	r0, 1013c4e <__any_on+0x2e>
 1013c46:	e012      	b.n	1013c6e <__any_on+0x4e>
 1013c48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 1013c4c:	b97a      	cbnz	r2, 1013c6e <__any_on+0x4e>
 1013c4e:	429c      	cmp	r4, r3
 1013c50:	d3fa      	bcc.n	1013c48 <__any_on+0x28>
 1013c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 1013c56:	4770      	bx	lr
 1013c58:	f011 011f 	ands.w	r1, r1, #31
 1013c5c:	d0ed      	beq.n	1013c3a <__any_on+0x1a>
 1013c5e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 1013c62:	fa20 f201 	lsr.w	r2, r0, r1
 1013c66:	fa02 f101 	lsl.w	r1, r2, r1
 1013c6a:	4288      	cmp	r0, r1
 1013c6c:	d0e5      	beq.n	1013c3a <__any_on+0x1a>
 1013c6e:	2001      	movs	r0, #1
 1013c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 1013c74:	4770      	bx	lr
 1013c76:	2000      	movs	r0, #0
 1013c78:	e7eb      	b.n	1013c52 <__any_on+0x32>
 1013c7a:	bf00      	nop

01013c7c <_realloc_r>:
 1013c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1013c80:	4692      	mov	sl, r2
 1013c82:	b083      	sub	sp, #12
 1013c84:	2900      	cmp	r1, #0
 1013c86:	f000 80df 	beq.w	1013e48 <_realloc_r+0x1cc>
 1013c8a:	460d      	mov	r5, r1
 1013c8c:	4680      	mov	r8, r0
 1013c8e:	f7f9 f977 	bl	100cf80 <__malloc_lock>
 1013c92:	f10a 040b 	add.w	r4, sl, #11
 1013c96:	2c16      	cmp	r4, #22
 1013c98:	f855 1c04 	ldr.w	r1, [r5, #-4]
 1013c9c:	bf88      	it	hi
 1013c9e:	f024 0407 	bichi.w	r4, r4, #7
 1013ca2:	f1a5 0708 	sub.w	r7, r5, #8
 1013ca6:	bf99      	ittee	ls
 1013ca8:	2210      	movls	r2, #16
 1013caa:	2300      	movls	r3, #0
 1013cac:	0fe3      	lsrhi	r3, r4, #31
 1013cae:	4622      	movhi	r2, r4
 1013cb0:	f021 0603 	bic.w	r6, r1, #3
 1013cb4:	bf98      	it	ls
 1013cb6:	4614      	movls	r4, r2
 1013cb8:	4554      	cmp	r4, sl
 1013cba:	bf38      	it	cc
 1013cbc:	f043 0301 	orrcc.w	r3, r3, #1
 1013cc0:	2b00      	cmp	r3, #0
 1013cc2:	f040 80c7 	bne.w	1013e54 <_realloc_r+0x1d8>
 1013cc6:	4296      	cmp	r6, r2
 1013cc8:	eb07 0906 	add.w	r9, r7, r6
 1013ccc:	f280 808b 	bge.w	1013de6 <_realloc_r+0x16a>
 1013cd0:	f24a 1bec 	movw	fp, #41452	; 0xa1ec
 1013cd4:	f2c0 1b05 	movt	fp, #261	; 0x105
 1013cd8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 1013cdc:	f8db 3008 	ldr.w	r3, [fp, #8]
 1013ce0:	454b      	cmp	r3, r9
 1013ce2:	f000 80c0 	beq.w	1013e66 <_realloc_r+0x1ea>
 1013ce6:	f020 0301 	bic.w	r3, r0, #1
 1013cea:	444b      	add	r3, r9
 1013cec:	685b      	ldr	r3, [r3, #4]
 1013cee:	07db      	lsls	r3, r3, #31
 1013cf0:	f100 80a0 	bmi.w	1013e34 <_realloc_r+0x1b8>
 1013cf4:	f020 0003 	bic.w	r0, r0, #3
 1013cf8:	1833      	adds	r3, r6, r0
 1013cfa:	4293      	cmp	r3, r2
 1013cfc:	f280 810c 	bge.w	1013f18 <_realloc_r+0x29c>
 1013d00:	07c9      	lsls	r1, r1, #31
 1013d02:	d40f      	bmi.n	1013d24 <_realloc_r+0xa8>
 1013d04:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1013d08:	1afb      	subs	r3, r7, r3
 1013d0a:	6859      	ldr	r1, [r3, #4]
 1013d0c:	f021 0103 	bic.w	r1, r1, #3
 1013d10:	4408      	add	r0, r1
 1013d12:	eb00 0c06 	add.w	ip, r0, r6
 1013d16:	4594      	cmp	ip, r2
 1013d18:	f280 811f 	bge.w	1013f5a <_realloc_r+0x2de>
 1013d1c:	eb06 0c01 	add.w	ip, r6, r1
 1013d20:	4594      	cmp	ip, r2
 1013d22:	da2a      	bge.n	1013d7a <_realloc_r+0xfe>
 1013d24:	4651      	mov	r1, sl
 1013d26:	4640      	mov	r0, r8
 1013d28:	f7f8 f8d6 	bl	100bed8 <_malloc_r>
 1013d2c:	4682      	mov	sl, r0
 1013d2e:	b1e8      	cbz	r0, 1013d6c <_realloc_r+0xf0>
 1013d30:	f855 3c04 	ldr.w	r3, [r5, #-4]
 1013d34:	f1a0 0208 	sub.w	r2, r0, #8
 1013d38:	f023 0301 	bic.w	r3, r3, #1
 1013d3c:	443b      	add	r3, r7
 1013d3e:	4293      	cmp	r3, r2
 1013d40:	f000 80f4 	beq.w	1013f2c <_realloc_r+0x2b0>
 1013d44:	1f32      	subs	r2, r6, #4
 1013d46:	2a24      	cmp	r2, #36	; 0x24
 1013d48:	f200 8103 	bhi.w	1013f52 <_realloc_r+0x2d6>
 1013d4c:	2a13      	cmp	r2, #19
 1013d4e:	6829      	ldr	r1, [r5, #0]
 1013d50:	bf9c      	itt	ls
 1013d52:	4603      	movls	r3, r0
 1013d54:	462a      	movls	r2, r5
 1013d56:	f200 80f1 	bhi.w	1013f3c <_realloc_r+0x2c0>
 1013d5a:	6019      	str	r1, [r3, #0]
 1013d5c:	6851      	ldr	r1, [r2, #4]
 1013d5e:	6059      	str	r1, [r3, #4]
 1013d60:	6892      	ldr	r2, [r2, #8]
 1013d62:	609a      	str	r2, [r3, #8]
 1013d64:	4629      	mov	r1, r5
 1013d66:	4640      	mov	r0, r8
 1013d68:	f7fe fe8a 	bl	1012a80 <_free_r>
 1013d6c:	4640      	mov	r0, r8
 1013d6e:	f7f9 f909 	bl	100cf84 <__malloc_unlock>
 1013d72:	4650      	mov	r0, sl
 1013d74:	b003      	add	sp, #12
 1013d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013d7a:	469a      	mov	sl, r3
 1013d7c:	68d9      	ldr	r1, [r3, #12]
 1013d7e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1013d82:	1f32      	subs	r2, r6, #4
 1013d84:	2a24      	cmp	r2, #36	; 0x24
 1013d86:	eb03 090c 	add.w	r9, r3, ip
 1013d8a:	60c1      	str	r1, [r0, #12]
 1013d8c:	6088      	str	r0, [r1, #8]
 1013d8e:	f200 80f6 	bhi.w	1013f7e <_realloc_r+0x302>
 1013d92:	2a13      	cmp	r2, #19
 1013d94:	6829      	ldr	r1, [r5, #0]
 1013d96:	bf98      	it	ls
 1013d98:	4652      	movls	r2, sl
 1013d9a:	d91c      	bls.n	1013dd6 <_realloc_r+0x15a>
 1013d9c:	6099      	str	r1, [r3, #8]
 1013d9e:	2a1b      	cmp	r2, #27
 1013da0:	6869      	ldr	r1, [r5, #4]
 1013da2:	bf98      	it	ls
 1013da4:	f103 0210 	addls.w	r2, r3, #16
 1013da8:	60d9      	str	r1, [r3, #12]
 1013daa:	68a9      	ldr	r1, [r5, #8]
 1013dac:	bf98      	it	ls
 1013dae:	3508      	addls	r5, #8
 1013db0:	d911      	bls.n	1013dd6 <_realloc_r+0x15a>
 1013db2:	6119      	str	r1, [r3, #16]
 1013db4:	2a24      	cmp	r2, #36	; 0x24
 1013db6:	68e9      	ldr	r1, [r5, #12]
 1013db8:	bf14      	ite	ne
 1013dba:	f103 0218 	addne.w	r2, r3, #24
 1013dbe:	f103 0220 	addeq.w	r2, r3, #32
 1013dc2:	6159      	str	r1, [r3, #20]
 1013dc4:	6929      	ldr	r1, [r5, #16]
 1013dc6:	bf11      	iteee	ne
 1013dc8:	3510      	addne	r5, #16
 1013dca:	6199      	streq	r1, [r3, #24]
 1013dcc:	6969      	ldreq	r1, [r5, #20]
 1013dce:	61d9      	streq	r1, [r3, #28]
 1013dd0:	bf04      	itt	eq
 1013dd2:	69a9      	ldreq	r1, [r5, #24]
 1013dd4:	3518      	addeq	r5, #24
 1013dd6:	6011      	str	r1, [r2, #0]
 1013dd8:	461f      	mov	r7, r3
 1013dda:	6869      	ldr	r1, [r5, #4]
 1013ddc:	4666      	mov	r6, ip
 1013dde:	6051      	str	r1, [r2, #4]
 1013de0:	68ab      	ldr	r3, [r5, #8]
 1013de2:	4655      	mov	r5, sl
 1013de4:	6093      	str	r3, [r2, #8]
 1013de6:	1b32      	subs	r2, r6, r4
 1013de8:	687b      	ldr	r3, [r7, #4]
 1013dea:	2a0f      	cmp	r2, #15
 1013dec:	f003 0301 	and.w	r3, r3, #1
 1013df0:	d80f      	bhi.n	1013e12 <_realloc_r+0x196>
 1013df2:	4333      	orrs	r3, r6
 1013df4:	607b      	str	r3, [r7, #4]
 1013df6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1013dfa:	f043 0301 	orr.w	r3, r3, #1
 1013dfe:	f8c9 3004 	str.w	r3, [r9, #4]
 1013e02:	4640      	mov	r0, r8
 1013e04:	46aa      	mov	sl, r5
 1013e06:	f7f9 f8bd 	bl	100cf84 <__malloc_unlock>
 1013e0a:	4650      	mov	r0, sl
 1013e0c:	b003      	add	sp, #12
 1013e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013e12:	1939      	adds	r1, r7, r4
 1013e14:	4323      	orrs	r3, r4
 1013e16:	f042 0201 	orr.w	r2, r2, #1
 1013e1a:	607b      	str	r3, [r7, #4]
 1013e1c:	604a      	str	r2, [r1, #4]
 1013e1e:	4640      	mov	r0, r8
 1013e20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1013e24:	3108      	adds	r1, #8
 1013e26:	f043 0301 	orr.w	r3, r3, #1
 1013e2a:	f8c9 3004 	str.w	r3, [r9, #4]
 1013e2e:	f7fe fe27 	bl	1012a80 <_free_r>
 1013e32:	e7e6      	b.n	1013e02 <_realloc_r+0x186>
 1013e34:	07c8      	lsls	r0, r1, #31
 1013e36:	f53f af75 	bmi.w	1013d24 <_realloc_r+0xa8>
 1013e3a:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1013e3e:	1afb      	subs	r3, r7, r3
 1013e40:	6859      	ldr	r1, [r3, #4]
 1013e42:	f021 0103 	bic.w	r1, r1, #3
 1013e46:	e769      	b.n	1013d1c <_realloc_r+0xa0>
 1013e48:	4611      	mov	r1, r2
 1013e4a:	b003      	add	sp, #12
 1013e4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1013e50:	f7f8 b842 	b.w	100bed8 <_malloc_r>
 1013e54:	f04f 0a00 	mov.w	sl, #0
 1013e58:	230c      	movs	r3, #12
 1013e5a:	4650      	mov	r0, sl
 1013e5c:	f8c8 3000 	str.w	r3, [r8]
 1013e60:	b003      	add	sp, #12
 1013e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1013e66:	f020 0003 	bic.w	r0, r0, #3
 1013e6a:	f104 0c10 	add.w	ip, r4, #16
 1013e6e:	1833      	adds	r3, r6, r0
 1013e70:	4563      	cmp	r3, ip
 1013e72:	f280 8098 	bge.w	1013fa6 <_realloc_r+0x32a>
 1013e76:	07cb      	lsls	r3, r1, #31
 1013e78:	f53f af54 	bmi.w	1013d24 <_realloc_r+0xa8>
 1013e7c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 1013e80:	1afb      	subs	r3, r7, r3
 1013e82:	6859      	ldr	r1, [r3, #4]
 1013e84:	f021 0103 	bic.w	r1, r1, #3
 1013e88:	4408      	add	r0, r1
 1013e8a:	eb00 0906 	add.w	r9, r0, r6
 1013e8e:	45cc      	cmp	ip, r9
 1013e90:	f73f af44 	bgt.w	1013d1c <_realloc_r+0xa0>
 1013e94:	469a      	mov	sl, r3
 1013e96:	68d9      	ldr	r1, [r3, #12]
 1013e98:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1013e9c:	1f32      	subs	r2, r6, #4
 1013e9e:	2a24      	cmp	r2, #36	; 0x24
 1013ea0:	60c1      	str	r1, [r0, #12]
 1013ea2:	6088      	str	r0, [r1, #8]
 1013ea4:	f200 809c 	bhi.w	1013fe0 <_realloc_r+0x364>
 1013ea8:	2a13      	cmp	r2, #19
 1013eaa:	6829      	ldr	r1, [r5, #0]
 1013eac:	bf98      	it	ls
 1013eae:	4652      	movls	r2, sl
 1013eb0:	d91c      	bls.n	1013eec <_realloc_r+0x270>
 1013eb2:	6099      	str	r1, [r3, #8]
 1013eb4:	2a1b      	cmp	r2, #27
 1013eb6:	6869      	ldr	r1, [r5, #4]
 1013eb8:	bf98      	it	ls
 1013eba:	f103 0210 	addls.w	r2, r3, #16
 1013ebe:	60d9      	str	r1, [r3, #12]
 1013ec0:	68a9      	ldr	r1, [r5, #8]
 1013ec2:	bf98      	it	ls
 1013ec4:	3508      	addls	r5, #8
 1013ec6:	d911      	bls.n	1013eec <_realloc_r+0x270>
 1013ec8:	6119      	str	r1, [r3, #16]
 1013eca:	2a24      	cmp	r2, #36	; 0x24
 1013ecc:	68e9      	ldr	r1, [r5, #12]
 1013ece:	bf14      	ite	ne
 1013ed0:	f103 0218 	addne.w	r2, r3, #24
 1013ed4:	f103 0220 	addeq.w	r2, r3, #32
 1013ed8:	6159      	str	r1, [r3, #20]
 1013eda:	6929      	ldr	r1, [r5, #16]
 1013edc:	bf11      	iteee	ne
 1013ede:	3510      	addne	r5, #16
 1013ee0:	6199      	streq	r1, [r3, #24]
 1013ee2:	6969      	ldreq	r1, [r5, #20]
 1013ee4:	61d9      	streq	r1, [r3, #28]
 1013ee6:	bf04      	itt	eq
 1013ee8:	69a9      	ldreq	r1, [r5, #24]
 1013eea:	3518      	addeq	r5, #24
 1013eec:	6011      	str	r1, [r2, #0]
 1013eee:	6869      	ldr	r1, [r5, #4]
 1013ef0:	6051      	str	r1, [r2, #4]
 1013ef2:	68a9      	ldr	r1, [r5, #8]
 1013ef4:	6091      	str	r1, [r2, #8]
 1013ef6:	1919      	adds	r1, r3, r4
 1013ef8:	eba9 0204 	sub.w	r2, r9, r4
 1013efc:	f8cb 1008 	str.w	r1, [fp, #8]
 1013f00:	f042 0201 	orr.w	r2, r2, #1
 1013f04:	604a      	str	r2, [r1, #4]
 1013f06:	4640      	mov	r0, r8
 1013f08:	685a      	ldr	r2, [r3, #4]
 1013f0a:	f002 0201 	and.w	r2, r2, #1
 1013f0e:	4314      	orrs	r4, r2
 1013f10:	605c      	str	r4, [r3, #4]
 1013f12:	f7f9 f837 	bl	100cf84 <__malloc_unlock>
 1013f16:	e778      	b.n	1013e0a <_realloc_r+0x18e>
 1013f18:	f8d9 200c 	ldr.w	r2, [r9, #12]
 1013f1c:	461e      	mov	r6, r3
 1013f1e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 1013f22:	eb07 0903 	add.w	r9, r7, r3
 1013f26:	60ca      	str	r2, [r1, #12]
 1013f28:	6091      	str	r1, [r2, #8]
 1013f2a:	e75c      	b.n	1013de6 <_realloc_r+0x16a>
 1013f2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 1013f30:	f023 0303 	bic.w	r3, r3, #3
 1013f34:	441e      	add	r6, r3
 1013f36:	eb07 0906 	add.w	r9, r7, r6
 1013f3a:	e754      	b.n	1013de6 <_realloc_r+0x16a>
 1013f3c:	6001      	str	r1, [r0, #0]
 1013f3e:	2a1b      	cmp	r2, #27
 1013f40:	686b      	ldr	r3, [r5, #4]
 1013f42:	6043      	str	r3, [r0, #4]
 1013f44:	d823      	bhi.n	1013f8e <_realloc_r+0x312>
 1013f46:	f105 0208 	add.w	r2, r5, #8
 1013f4a:	f100 0308 	add.w	r3, r0, #8
 1013f4e:	68a9      	ldr	r1, [r5, #8]
 1013f50:	e703      	b.n	1013d5a <_realloc_r+0xde>
 1013f52:	4629      	mov	r1, r5
 1013f54:	f7ff f9ac 	bl	10132b0 <memmove>
 1013f58:	e704      	b.n	1013d64 <_realloc_r+0xe8>
 1013f5a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 1013f5e:	469a      	mov	sl, r3
 1013f60:	f8d9 0008 	ldr.w	r0, [r9, #8]
 1013f64:	1f32      	subs	r2, r6, #4
 1013f66:	2a24      	cmp	r2, #36	; 0x24
 1013f68:	eb03 090c 	add.w	r9, r3, ip
 1013f6c:	60c1      	str	r1, [r0, #12]
 1013f6e:	6088      	str	r0, [r1, #8]
 1013f70:	68d9      	ldr	r1, [r3, #12]
 1013f72:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 1013f76:	60c1      	str	r1, [r0, #12]
 1013f78:	6088      	str	r0, [r1, #8]
 1013f7a:	f67f af0a 	bls.w	1013d92 <_realloc_r+0x116>
 1013f7e:	4629      	mov	r1, r5
 1013f80:	4650      	mov	r0, sl
 1013f82:	4666      	mov	r6, ip
 1013f84:	461f      	mov	r7, r3
 1013f86:	4655      	mov	r5, sl
 1013f88:	f7ff f992 	bl	10132b0 <memmove>
 1013f8c:	e72b      	b.n	1013de6 <_realloc_r+0x16a>
 1013f8e:	68ab      	ldr	r3, [r5, #8]
 1013f90:	2a24      	cmp	r2, #36	; 0x24
 1013f92:	6083      	str	r3, [r0, #8]
 1013f94:	68eb      	ldr	r3, [r5, #12]
 1013f96:	60c3      	str	r3, [r0, #12]
 1013f98:	d018      	beq.n	1013fcc <_realloc_r+0x350>
 1013f9a:	f105 0210 	add.w	r2, r5, #16
 1013f9e:	f100 0310 	add.w	r3, r0, #16
 1013fa2:	6929      	ldr	r1, [r5, #16]
 1013fa4:	e6d9      	b.n	1013d5a <_realloc_r+0xde>
 1013fa6:	4427      	add	r7, r4
 1013fa8:	1b1b      	subs	r3, r3, r4
 1013faa:	f8cb 7008 	str.w	r7, [fp, #8]
 1013fae:	f043 0301 	orr.w	r3, r3, #1
 1013fb2:	607b      	str	r3, [r7, #4]
 1013fb4:	4640      	mov	r0, r8
 1013fb6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 1013fba:	46aa      	mov	sl, r5
 1013fbc:	f003 0301 	and.w	r3, r3, #1
 1013fc0:	431c      	orrs	r4, r3
 1013fc2:	f845 4c04 	str.w	r4, [r5, #-4]
 1013fc6:	f7f8 ffdd 	bl	100cf84 <__malloc_unlock>
 1013fca:	e71e      	b.n	1013e0a <_realloc_r+0x18e>
 1013fcc:	6929      	ldr	r1, [r5, #16]
 1013fce:	f105 0218 	add.w	r2, r5, #24
 1013fd2:	f100 0318 	add.w	r3, r0, #24
 1013fd6:	6101      	str	r1, [r0, #16]
 1013fd8:	6969      	ldr	r1, [r5, #20]
 1013fda:	6141      	str	r1, [r0, #20]
 1013fdc:	69a9      	ldr	r1, [r5, #24]
 1013fde:	e6bc      	b.n	1013d5a <_realloc_r+0xde>
 1013fe0:	4629      	mov	r1, r5
 1013fe2:	4650      	mov	r0, sl
 1013fe4:	9301      	str	r3, [sp, #4]
 1013fe6:	f7ff f963 	bl	10132b0 <memmove>
 1013fea:	9b01      	ldr	r3, [sp, #4]
 1013fec:	e783      	b.n	1013ef6 <_realloc_r+0x27a>
 1013fee:	bf00      	nop

01013ff0 <cleanup_glue>:
 1013ff0:	b538      	push	{r3, r4, r5, lr}
 1013ff2:	460c      	mov	r4, r1
 1013ff4:	6809      	ldr	r1, [r1, #0]
 1013ff6:	4605      	mov	r5, r0
 1013ff8:	b109      	cbz	r1, 1013ffe <cleanup_glue+0xe>
 1013ffa:	f7ff fff9 	bl	1013ff0 <cleanup_glue>
 1013ffe:	4621      	mov	r1, r4
 1014000:	4628      	mov	r0, r5
 1014002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1014006:	f7fe bd3b 	b.w	1012a80 <_free_r>
 101400a:	bf00      	nop

0101400c <_reclaim_reent>:
 101400c:	f649 4330 	movw	r3, #39984	; 0x9c30
 1014010:	f2c0 1305 	movt	r3, #261	; 0x105
 1014014:	681b      	ldr	r3, [r3, #0]
 1014016:	4283      	cmp	r3, r0
 1014018:	d03b      	beq.n	1014092 <_reclaim_reent+0x86>
 101401a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 101401c:	b570      	push	{r4, r5, r6, lr}
 101401e:	4605      	mov	r5, r0
 1014020:	b18b      	cbz	r3, 1014046 <_reclaim_reent+0x3a>
 1014022:	2600      	movs	r6, #0
 1014024:	5999      	ldr	r1, [r3, r6]
 1014026:	b139      	cbz	r1, 1014038 <_reclaim_reent+0x2c>
 1014028:	680c      	ldr	r4, [r1, #0]
 101402a:	4628      	mov	r0, r5
 101402c:	f7fe fd28 	bl	1012a80 <_free_r>
 1014030:	4621      	mov	r1, r4
 1014032:	2c00      	cmp	r4, #0
 1014034:	d1f8      	bne.n	1014028 <_reclaim_reent+0x1c>
 1014036:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 1014038:	3604      	adds	r6, #4
 101403a:	2e80      	cmp	r6, #128	; 0x80
 101403c:	d1f2      	bne.n	1014024 <_reclaim_reent+0x18>
 101403e:	4619      	mov	r1, r3
 1014040:	4628      	mov	r0, r5
 1014042:	f7fe fd1d 	bl	1012a80 <_free_r>
 1014046:	6c29      	ldr	r1, [r5, #64]	; 0x40
 1014048:	b111      	cbz	r1, 1014050 <_reclaim_reent+0x44>
 101404a:	4628      	mov	r0, r5
 101404c:	f7fe fd18 	bl	1012a80 <_free_r>
 1014050:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 1014054:	b151      	cbz	r1, 101406c <_reclaim_reent+0x60>
 1014056:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 101405a:	42b1      	cmp	r1, r6
 101405c:	d006      	beq.n	101406c <_reclaim_reent+0x60>
 101405e:	680c      	ldr	r4, [r1, #0]
 1014060:	4628      	mov	r0, r5
 1014062:	f7fe fd0d 	bl	1012a80 <_free_r>
 1014066:	42a6      	cmp	r6, r4
 1014068:	4621      	mov	r1, r4
 101406a:	d1f8      	bne.n	101405e <_reclaim_reent+0x52>
 101406c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 101406e:	b111      	cbz	r1, 1014076 <_reclaim_reent+0x6a>
 1014070:	4628      	mov	r0, r5
 1014072:	f7fe fd05 	bl	1012a80 <_free_r>
 1014076:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1014078:	b153      	cbz	r3, 1014090 <_reclaim_reent+0x84>
 101407a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 101407c:	4628      	mov	r0, r5
 101407e:	4798      	blx	r3
 1014080:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 1014084:	b121      	cbz	r1, 1014090 <_reclaim_reent+0x84>
 1014086:	4628      	mov	r0, r5
 1014088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101408c:	f7ff bfb0 	b.w	1013ff0 <cleanup_glue>
 1014090:	bd70      	pop	{r4, r5, r6, pc}
 1014092:	4770      	bx	lr
 1014094:	0000      	movs	r0, r0
	...

01014098 <frexp>:
 1014098:	b430      	push	{r4, r5}
 101409a:	b082      	sub	sp, #8
 101409c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 10140a0:	f6c7 74ef 	movt	r4, #32751	; 0x7fef
 10140a4:	ed8d 0b00 	vstr	d0, [sp]
 10140a8:	2500      	movs	r5, #0
 10140aa:	9b01      	ldr	r3, [sp, #4]
 10140ac:	6005      	str	r5, [r0, #0]
 10140ae:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10140b2:	42a1      	cmp	r1, r4
 10140b4:	dc24      	bgt.n	1014100 <frexp+0x68>
 10140b6:	9c00      	ldr	r4, [sp, #0]
 10140b8:	ea51 0204 	orrs.w	r2, r1, r4
 10140bc:	d020      	beq.n	1014100 <frexp+0x68>
 10140be:	462c      	mov	r4, r5
 10140c0:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 10140c4:	401c      	ands	r4, r3
 10140c6:	b954      	cbnz	r4, 10140de <frexp+0x46>
 10140c8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 1014110 <frexp+0x78>
 10140cc:	f06f 0535 	mvn.w	r5, #53	; 0x35
 10140d0:	ee20 7b07 	vmul.f64	d7, d0, d7
 10140d4:	ed8d 7b00 	vstr	d7, [sp]
 10140d8:	9b01      	ldr	r3, [sp, #4]
 10140da:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10140de:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
 10140e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 10140e6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 10140ea:	1509      	asrs	r1, r1, #20
 10140ec:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 10140f0:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 10140f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 10140f8:	4429      	add	r1, r5
 10140fa:	e9cd 2300 	strd	r2, r3, [sp]
 10140fe:	6001      	str	r1, [r0, #0]
 1014100:	ed9d 0b00 	vldr	d0, [sp]
 1014104:	b002      	add	sp, #8
 1014106:	bc30      	pop	{r4, r5}
 1014108:	4770      	bx	lr
 101410a:	bf00      	nop
 101410c:	f3af 8000 	nop.w
 1014110:	00000000 	.word	0x00000000
 1014114:	43500000 	.word	0x43500000

01014118 <__sread>:
 1014118:	b510      	push	{r4, lr}
 101411a:	460c      	mov	r4, r1
 101411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1014120:	f002 f9f8 	bl	1016514 <_read_r>
 1014124:	2800      	cmp	r0, #0
 1014126:	bfab      	itete	ge
 1014128:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 101412a:	89a3      	ldrhlt	r3, [r4, #12]
 101412c:	181b      	addge	r3, r3, r0
 101412e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 1014132:	bfac      	ite	ge
 1014134:	6523      	strge	r3, [r4, #80]	; 0x50
 1014136:	81a3      	strhlt	r3, [r4, #12]
 1014138:	bd10      	pop	{r4, pc}
 101413a:	bf00      	nop

0101413c <__seofread>:
 101413c:	2000      	movs	r0, #0
 101413e:	4770      	bx	lr

01014140 <__swrite>:
 1014140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1014144:	4616      	mov	r6, r2
 1014146:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 101414a:	461f      	mov	r7, r3
 101414c:	460c      	mov	r4, r1
 101414e:	4605      	mov	r5, r0
 1014150:	05d3      	lsls	r3, r2, #23
 1014152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1014156:	d409      	bmi.n	101416c <__swrite+0x2c>
 1014158:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 101415c:	463b      	mov	r3, r7
 101415e:	81a2      	strh	r2, [r4, #12]
 1014160:	4628      	mov	r0, r5
 1014162:	4632      	mov	r2, r6
 1014164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1014168:	f002 b85a 	b.w	1016220 <_write_r>
 101416c:	2200      	movs	r2, #0
 101416e:	2302      	movs	r3, #2
 1014170:	f002 f9ba 	bl	10164e8 <_lseek_r>
 1014174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1014178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 101417c:	e7ec      	b.n	1014158 <__swrite+0x18>
 101417e:	bf00      	nop

01014180 <__sseek>:
 1014180:	b510      	push	{r4, lr}
 1014182:	460c      	mov	r4, r1
 1014184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1014188:	f002 f9ae 	bl	10164e8 <_lseek_r>
 101418c:	89a3      	ldrh	r3, [r4, #12]
 101418e:	1c42      	adds	r2, r0, #1
 1014190:	bf16      	itet	ne
 1014192:	6520      	strne	r0, [r4, #80]	; 0x50
 1014194:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 1014198:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 101419c:	81a3      	strh	r3, [r4, #12]
 101419e:	bd10      	pop	{r4, pc}

010141a0 <__sclose>:
 10141a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 10141a4:	f002 b884 	b.w	10162b0 <_close_r>

010141a8 <__ssprint_r>:
 10141a8:	6893      	ldr	r3, [r2, #8]
 10141aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10141ae:	4692      	mov	sl, r2
 10141b0:	b083      	sub	sp, #12
 10141b2:	2b00      	cmp	r3, #0
 10141b4:	d06e      	beq.n	1014294 <__ssprint_r+0xec>
 10141b6:	6817      	ldr	r7, [r2, #0]
 10141b8:	4681      	mov	r9, r0
 10141ba:	460c      	mov	r4, r1
 10141bc:	6808      	ldr	r0, [r1, #0]
 10141be:	3708      	adds	r7, #8
 10141c0:	688d      	ldr	r5, [r1, #8]
 10141c2:	e042      	b.n	101424a <__ssprint_r+0xa2>
 10141c4:	89a3      	ldrh	r3, [r4, #12]
 10141c6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 10141ca:	d02d      	beq.n	1014228 <__ssprint_r+0x80>
 10141cc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 10141d0:	1a45      	subs	r5, r0, r1
 10141d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 10141d6:	eb05 0806 	add.w	r8, r5, r6
 10141da:	f108 0801 	add.w	r8, r8, #1
 10141de:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 10141e2:	1052      	asrs	r2, r2, #1
 10141e4:	4590      	cmp	r8, r2
 10141e6:	bf94      	ite	ls
 10141e8:	4690      	movls	r8, r2
 10141ea:	4642      	movhi	r2, r8
 10141ec:	055b      	lsls	r3, r3, #21
 10141ee:	d538      	bpl.n	1014262 <__ssprint_r+0xba>
 10141f0:	4611      	mov	r1, r2
 10141f2:	4648      	mov	r0, r9
 10141f4:	f7f7 fe70 	bl	100bed8 <_malloc_r>
 10141f8:	2800      	cmp	r0, #0
 10141fa:	d03c      	beq.n	1014276 <__ssprint_r+0xce>
 10141fc:	462a      	mov	r2, r5
 10141fe:	6921      	ldr	r1, [r4, #16]
 1014200:	9001      	str	r0, [sp, #4]
 1014202:	f7f8 eb7e 	blx	100c900 <memcpy>
 1014206:	89a2      	ldrh	r2, [r4, #12]
 1014208:	9b01      	ldr	r3, [sp, #4]
 101420a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 101420e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1014212:	81a2      	strh	r2, [r4, #12]
 1014214:	1958      	adds	r0, r3, r5
 1014216:	f8c4 8014 	str.w	r8, [r4, #20]
 101421a:	eba8 0505 	sub.w	r5, r8, r5
 101421e:	46b0      	mov	r8, r6
 1014220:	60a5      	str	r5, [r4, #8]
 1014222:	4635      	mov	r5, r6
 1014224:	6123      	str	r3, [r4, #16]
 1014226:	6020      	str	r0, [r4, #0]
 1014228:	4642      	mov	r2, r8
 101422a:	4659      	mov	r1, fp
 101422c:	f7ff f840 	bl	10132b0 <memmove>
 1014230:	f8da 2008 	ldr.w	r2, [sl, #8]
 1014234:	68a3      	ldr	r3, [r4, #8]
 1014236:	6820      	ldr	r0, [r4, #0]
 1014238:	1b96      	subs	r6, r2, r6
 101423a:	1b5d      	subs	r5, r3, r5
 101423c:	60a5      	str	r5, [r4, #8]
 101423e:	4440      	add	r0, r8
 1014240:	6020      	str	r0, [r4, #0]
 1014242:	f8ca 6008 	str.w	r6, [sl, #8]
 1014246:	b32e      	cbz	r6, 1014294 <__ssprint_r+0xec>
 1014248:	3708      	adds	r7, #8
 101424a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 101424e:	46a8      	mov	r8, r5
 1014250:	f857 bc08 	ldr.w	fp, [r7, #-8]
 1014254:	2e00      	cmp	r6, #0
 1014256:	d0f7      	beq.n	1014248 <__ssprint_r+0xa0>
 1014258:	42ae      	cmp	r6, r5
 101425a:	d2b3      	bcs.n	10141c4 <__ssprint_r+0x1c>
 101425c:	4635      	mov	r5, r6
 101425e:	46b0      	mov	r8, r6
 1014260:	e7e2      	b.n	1014228 <__ssprint_r+0x80>
 1014262:	4648      	mov	r0, r9
 1014264:	f7ff fd0a 	bl	1013c7c <_realloc_r>
 1014268:	4603      	mov	r3, r0
 101426a:	2800      	cmp	r0, #0
 101426c:	d1d2      	bne.n	1014214 <__ssprint_r+0x6c>
 101426e:	6921      	ldr	r1, [r4, #16]
 1014270:	4648      	mov	r0, r9
 1014272:	f7fe fc05 	bl	1012a80 <_free_r>
 1014276:	230c      	movs	r3, #12
 1014278:	f8c9 3000 	str.w	r3, [r9]
 101427c:	89a3      	ldrh	r3, [r4, #12]
 101427e:	f04f 30ff 	mov.w	r0, #4294967295
 1014282:	2200      	movs	r2, #0
 1014284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1014288:	81a3      	strh	r3, [r4, #12]
 101428a:	e9ca 2201 	strd	r2, r2, [sl, #4]
 101428e:	b003      	add	sp, #12
 1014290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1014294:	2000      	movs	r0, #0
 1014296:	f8ca 0004 	str.w	r0, [sl, #4]
 101429a:	b003      	add	sp, #12
 101429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

010142a0 <_svfiprintf_r>:
 10142a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10142a4:	b0c7      	sub	sp, #284	; 0x11c
 10142a6:	460c      	mov	r4, r1
 10142a8:	4683      	mov	fp, r0
 10142aa:	9109      	str	r1, [sp, #36]	; 0x24
 10142ac:	4615      	mov	r5, r2
 10142ae:	a816      	add	r0, sp, #88	; 0x58
 10142b0:	2208      	movs	r2, #8
 10142b2:	2100      	movs	r1, #0
 10142b4:	9307      	str	r3, [sp, #28]
 10142b6:	f7f8 fe13 	bl	100cee0 <memset>
 10142ba:	89a3      	ldrh	r3, [r4, #12]
 10142bc:	061b      	lsls	r3, r3, #24
 10142be:	d503      	bpl.n	10142c8 <_svfiprintf_r+0x28>
 10142c0:	6923      	ldr	r3, [r4, #16]
 10142c2:	2b00      	cmp	r3, #0
 10142c4:	f000 853f 	beq.w	1014d46 <_svfiprintf_r+0xaa6>
 10142c8:	f649 4930 	movw	r9, #39984	; 0x9c30
 10142cc:	f2c0 1905 	movt	r9, #261	; 0x105
 10142d0:	46aa      	mov	sl, r5
 10142d2:	2300      	movs	r3, #0
 10142d4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 10142d8:	930c      	str	r3, [sp, #48]	; 0x30
 10142da:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 10142de:	930f      	str	r3, [sp, #60]	; 0x3c
 10142e0:	9304      	str	r3, [sp, #16]
 10142e2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 10142e6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 10142ea:	f24a 0660 	movw	r6, #41056	; 0xa060
 10142ee:	f2c0 1605 	movt	r6, #261	; 0x105
 10142f2:	4654      	mov	r4, sl
 10142f4:	f8d9 3000 	ldr.w	r3, [r9]
 10142f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 10142fa:	2b00      	cmp	r3, #0
 10142fc:	bf08      	it	eq
 10142fe:	4633      	moveq	r3, r6
 1014300:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 1014304:	f7f7 fd26 	bl	100bd54 <__locale_mb_cur_max>
 1014308:	ab16      	add	r3, sp, #88	; 0x58
 101430a:	4622      	mov	r2, r4
 101430c:	9300      	str	r3, [sp, #0]
 101430e:	a914      	add	r1, sp, #80	; 0x50
 1014310:	4603      	mov	r3, r0
 1014312:	4658      	mov	r0, fp
 1014314:	47a8      	blx	r5
 1014316:	2800      	cmp	r0, #0
 1014318:	4603      	mov	r3, r0
 101431a:	f000 8086 	beq.w	101442a <_svfiprintf_r+0x18a>
 101431e:	db7c      	blt.n	101441a <_svfiprintf_r+0x17a>
 1014320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 1014322:	2a25      	cmp	r2, #37	; 0x25
 1014324:	d001      	beq.n	101432a <_svfiprintf_r+0x8a>
 1014326:	441c      	add	r4, r3
 1014328:	e7e4      	b.n	10142f4 <_svfiprintf_r+0x54>
 101432a:	ebb4 060a 	subs.w	r6, r4, sl
 101432e:	4605      	mov	r5, r0
 1014330:	d17f      	bne.n	1014432 <_svfiprintf_r+0x192>
 1014332:	2300      	movs	r3, #0
 1014334:	9306      	str	r3, [sp, #24]
 1014336:	461e      	mov	r6, r3
 1014338:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 101433c:	7863      	ldrb	r3, [r4, #1]
 101433e:	f104 0a01 	add.w	sl, r4, #1
 1014342:	f04f 32ff 	mov.w	r2, #4294967295
 1014346:	9203      	str	r2, [sp, #12]
 1014348:	f10a 0a01 	add.w	sl, sl, #1
 101434c:	f1a3 0220 	sub.w	r2, r3, #32
 1014350:	2a5a      	cmp	r2, #90	; 0x5a
 1014352:	f200 8322 	bhi.w	101499a <_svfiprintf_r+0x6fa>
 1014356:	e8df f012 	tbh	[pc, r2, lsl #1]
 101435a:	01d2      	.short	0x01d2
 101435c:	03200320 	.word	0x03200320
 1014360:	032001cd 	.word	0x032001cd
 1014364:	03200320 	.word	0x03200320
 1014368:	032001af 	.word	0x032001af
 101436c:	01a00320 	.word	0x01a00320
 1014370:	0320025e 	.word	0x0320025e
 1014374:	01f4020f 	.word	0x01f4020f
 1014378:	01ef0320 	.word	0x01ef0320
 101437c:	015e015e 	.word	0x015e015e
 1014380:	015e015e 	.word	0x015e015e
 1014384:	015e015e 	.word	0x015e015e
 1014388:	015e015e 	.word	0x015e015e
 101438c:	0320015e 	.word	0x0320015e
 1014390:	03200320 	.word	0x03200320
 1014394:	03200320 	.word	0x03200320
 1014398:	03200320 	.word	0x03200320
 101439c:	03200320 	.word	0x03200320
 10143a0:	0220016c 	.word	0x0220016c
 10143a4:	03200320 	.word	0x03200320
 10143a8:	03200320 	.word	0x03200320
 10143ac:	03200320 	.word	0x03200320
 10143b0:	03200320 	.word	0x03200320
 10143b4:	03200320 	.word	0x03200320
 10143b8:	03200214 	.word	0x03200214
 10143bc:	03200320 	.word	0x03200320
 10143c0:	032002c9 	.word	0x032002c9
 10143c4:	032002bc 	.word	0x032002bc
 10143c8:	02900320 	.word	0x02900320
 10143cc:	03200320 	.word	0x03200320
 10143d0:	03200320 	.word	0x03200320
 10143d4:	03200320 	.word	0x03200320
 10143d8:	03200320 	.word	0x03200320
 10143dc:	03200320 	.word	0x03200320
 10143e0:	0276016c 	.word	0x0276016c
 10143e4:	03200320 	.word	0x03200320
 10143e8:	02fe0320 	.word	0x02fe0320
 10143ec:	005b0276 	.word	0x005b0276
 10143f0:	02f10320 	.word	0x02f10320
 10143f4:	030b0320 	.word	0x030b0320
 10143f8:	0264018f 	.word	0x0264018f
 10143fc:	0320005b 	.word	0x0320005b
 1014400:	005d02c9 	.word	0x005d02c9
 1014404:	032001dd 	.word	0x032001dd
 1014408:	009b0320 	.word	0x009b0320
 101440c:	005d0320 	.word	0x005d0320
 1014410:	f046 0620 	orr.w	r6, r6, #32
 1014414:	f89a 3000 	ldrb.w	r3, [sl]
 1014418:	e796      	b.n	1014348 <_svfiprintf_r+0xa8>
 101441a:	2208      	movs	r2, #8
 101441c:	2100      	movs	r1, #0
 101441e:	a816      	add	r0, sp, #88	; 0x58
 1014420:	f7f8 fd5e 	bl	100cee0 <memset>
 1014424:	2301      	movs	r3, #1
 1014426:	441c      	add	r4, r3
 1014428:	e764      	b.n	10142f4 <_svfiprintf_r+0x54>
 101442a:	ebb4 060a 	subs.w	r6, r4, sl
 101442e:	4605      	mov	r5, r0
 1014430:	d012      	beq.n	1014458 <_svfiprintf_r+0x1b8>
 1014432:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1014436:	e9c8 a600 	strd	sl, r6, [r8]
 101443a:	3301      	adds	r3, #1
 101443c:	4432      	add	r2, r6
 101443e:	2b07      	cmp	r3, #7
 1014440:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1014444:	bfd8      	it	le
 1014446:	f108 0808 	addle.w	r8, r8, #8
 101444a:	dc17      	bgt.n	101447c <_svfiprintf_r+0x1dc>
 101444c:	9b04      	ldr	r3, [sp, #16]
 101444e:	4433      	add	r3, r6
 1014450:	9304      	str	r3, [sp, #16]
 1014452:	2d00      	cmp	r5, #0
 1014454:	f47f af6d 	bne.w	1014332 <_svfiprintf_r+0x92>
 1014458:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 101445a:	2b00      	cmp	r3, #0
 101445c:	f040 8586 	bne.w	1014f6c <_svfiprintf_r+0xccc>
 1014460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1014462:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 1014466:	f013 0f40 	tst.w	r3, #64	; 0x40
 101446a:	9b04      	ldr	r3, [sp, #16]
 101446c:	bf18      	it	ne
 101446e:	f04f 33ff 	movne.w	r3, #4294967295
 1014472:	9304      	str	r3, [sp, #16]
 1014474:	9804      	ldr	r0, [sp, #16]
 1014476:	b047      	add	sp, #284	; 0x11c
 1014478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101447c:	aa1a      	add	r2, sp, #104	; 0x68
 101447e:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014480:	4658      	mov	r0, fp
 1014482:	f7ff fe91 	bl	10141a8 <__ssprint_r>
 1014486:	2800      	cmp	r0, #0
 1014488:	d1ea      	bne.n	1014460 <_svfiprintf_r+0x1c0>
 101448a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 101448e:	e7dd      	b.n	101444c <_svfiprintf_r+0x1ac>
 1014490:	06b4      	lsls	r4, r6, #26
 1014492:	f249 7294 	movw	r2, #38804	; 0x9794
 1014496:	f2c0 1205 	movt	r2, #261	; 0x105
 101449a:	920c      	str	r2, [sp, #48]	; 0x30
 101449c:	f140 81f5 	bpl.w	101488a <_svfiprintf_r+0x5ea>
 10144a0:	9d07      	ldr	r5, [sp, #28]
 10144a2:	3507      	adds	r5, #7
 10144a4:	f025 0207 	bic.w	r2, r5, #7
 10144a8:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10144ac:	9207      	str	r2, [sp, #28]
 10144ae:	ea54 0205 	orrs.w	r2, r4, r5
 10144b2:	f006 0201 	and.w	r2, r6, #1
 10144b6:	bf08      	it	eq
 10144b8:	2200      	moveq	r2, #0
 10144ba:	2a00      	cmp	r2, #0
 10144bc:	f040 8201 	bne.w	10148c2 <_svfiprintf_r+0x622>
 10144c0:	f426 6780 	bic.w	r7, r6, #1024	; 0x400
 10144c4:	2302      	movs	r3, #2
 10144c6:	9903      	ldr	r1, [sp, #12]
 10144c8:	2200      	movs	r2, #0
 10144ca:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10144ce:	1c4a      	adds	r2, r1, #1
 10144d0:	f000 8182 	beq.w	10147d8 <_svfiprintf_r+0x538>
 10144d4:	ea54 0205 	orrs.w	r2, r4, r5
 10144d8:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 10144dc:	bf14      	ite	ne
 10144de:	2201      	movne	r2, #1
 10144e0:	2200      	moveq	r2, #0
 10144e2:	2900      	cmp	r1, #0
 10144e4:	bf18      	it	ne
 10144e6:	2201      	movne	r2, #1
 10144e8:	2a00      	cmp	r2, #0
 10144ea:	f040 8417 	bne.w	1014d1c <_svfiprintf_r+0xa7c>
 10144ee:	2b00      	cmp	r3, #0
 10144f0:	f040 83f0 	bne.w	1014cd4 <_svfiprintf_r+0xa34>
 10144f4:	f017 0201 	ands.w	r2, r7, #1
 10144f8:	9303      	str	r3, [sp, #12]
 10144fa:	9205      	str	r2, [sp, #20]
 10144fc:	bf04      	itt	eq
 10144fe:	ab46      	addeq	r3, sp, #280	; 0x118
 1014500:	930b      	streq	r3, [sp, #44]	; 0x2c
 1014502:	d005      	beq.n	1014510 <_svfiprintf_r+0x270>
 1014504:	2330      	movs	r3, #48	; 0x30
 1014506:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 101450a:	f20d 1317 	addw	r3, sp, #279	; 0x117
 101450e:	930b      	str	r3, [sp, #44]	; 0x2c
 1014510:	9b05      	ldr	r3, [sp, #20]
 1014512:	9a03      	ldr	r2, [sp, #12]
 1014514:	4293      	cmp	r3, r2
 1014516:	bfb8      	it	lt
 1014518:	4613      	movlt	r3, r2
 101451a:	9302      	str	r3, [sp, #8]
 101451c:	2300      	movs	r3, #0
 101451e:	9308      	str	r3, [sp, #32]
 1014520:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 1014524:	b113      	cbz	r3, 101452c <_svfiprintf_r+0x28c>
 1014526:	9b02      	ldr	r3, [sp, #8]
 1014528:	3301      	adds	r3, #1
 101452a:	9302      	str	r3, [sp, #8]
 101452c:	f016 0302 	ands.w	r3, r6, #2
 1014530:	bf1e      	ittt	ne
 1014532:	9a02      	ldrne	r2, [sp, #8]
 1014534:	3202      	addne	r2, #2
 1014536:	9202      	strne	r2, [sp, #8]
 1014538:	f016 0084 	ands.w	r0, r6, #132	; 0x84
 101453c:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1014540:	900a      	str	r0, [sp, #40]	; 0x28
 1014542:	d105      	bne.n	1014550 <_svfiprintf_r+0x2b0>
 1014544:	9806      	ldr	r0, [sp, #24]
 1014546:	9c02      	ldr	r4, [sp, #8]
 1014548:	1b04      	subs	r4, r0, r4
 101454a:	2c00      	cmp	r4, #0
 101454c:	f300 8326 	bgt.w	1014b9c <_svfiprintf_r+0x8fc>
 1014550:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 1014554:	1c48      	adds	r0, r1, #1
 1014556:	f108 0708 	add.w	r7, r8, #8
 101455a:	b1ac      	cbz	r4, 1014588 <_svfiprintf_r+0x2e8>
 101455c:	2807      	cmp	r0, #7
 101455e:	f10d 044b 	add.w	r4, sp, #75	; 0x4b
 1014562:	f102 0201 	add.w	r2, r2, #1
 1014566:	f8c8 4000 	str.w	r4, [r8]
 101456a:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 101456e:	f04f 0401 	mov.w	r4, #1
 1014572:	f8c8 4004 	str.w	r4, [r8, #4]
 1014576:	f300 8355 	bgt.w	1014c24 <_svfiprintf_r+0x984>
 101457a:	1c8d      	adds	r5, r1, #2
 101457c:	f108 0410 	add.w	r4, r8, #16
 1014580:	4601      	mov	r1, r0
 1014582:	46b8      	mov	r8, r7
 1014584:	4628      	mov	r0, r5
 1014586:	4627      	mov	r7, r4
 1014588:	b18b      	cbz	r3, 10145ae <_svfiprintf_r+0x30e>
 101458a:	2807      	cmp	r0, #7
 101458c:	ab13      	add	r3, sp, #76	; 0x4c
 101458e:	f102 0202 	add.w	r2, r2, #2
 1014592:	f8c8 3000 	str.w	r3, [r8]
 1014596:	e9cd 021b 	strd	r0, r2, [sp, #108]	; 0x6c
 101459a:	f04f 0302 	mov.w	r3, #2
 101459e:	f8c8 3004 	str.w	r3, [r8, #4]
 10145a2:	f300 834f 	bgt.w	1014c44 <_svfiprintf_r+0x9a4>
 10145a6:	4601      	mov	r1, r0
 10145a8:	46b8      	mov	r8, r7
 10145aa:	3001      	adds	r0, #1
 10145ac:	3708      	adds	r7, #8
 10145ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 10145b0:	2b80      	cmp	r3, #128	; 0x80
 10145b2:	f000 825f 	beq.w	1014a74 <_svfiprintf_r+0x7d4>
 10145b6:	9b03      	ldr	r3, [sp, #12]
 10145b8:	9c05      	ldr	r4, [sp, #20]
 10145ba:	1b1c      	subs	r4, r3, r4
 10145bc:	2c00      	cmp	r4, #0
 10145be:	f300 829c 	bgt.w	1014afa <_svfiprintf_r+0x85a>
 10145c2:	9b05      	ldr	r3, [sp, #20]
 10145c4:	2807      	cmp	r0, #7
 10145c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 10145c8:	441a      	add	r2, r3
 10145ca:	901b      	str	r0, [sp, #108]	; 0x6c
 10145cc:	921c      	str	r2, [sp, #112]	; 0x70
 10145ce:	f8c8 1000 	str.w	r1, [r8]
 10145d2:	f8c8 3004 	str.w	r3, [r8, #4]
 10145d6:	f300 82c7 	bgt.w	1014b68 <_svfiprintf_r+0x8c8>
 10145da:	0773      	lsls	r3, r6, #29
 10145dc:	d505      	bpl.n	10145ea <_svfiprintf_r+0x34a>
 10145de:	9b06      	ldr	r3, [sp, #24]
 10145e0:	9902      	ldr	r1, [sp, #8]
 10145e2:	1a5c      	subs	r4, r3, r1
 10145e4:	2c00      	cmp	r4, #0
 10145e6:	f300 833b 	bgt.w	1014c60 <_svfiprintf_r+0x9c0>
 10145ea:	9b04      	ldr	r3, [sp, #16]
 10145ec:	9906      	ldr	r1, [sp, #24]
 10145ee:	9802      	ldr	r0, [sp, #8]
 10145f0:	4281      	cmp	r1, r0
 10145f2:	bfac      	ite	ge
 10145f4:	185b      	addge	r3, r3, r1
 10145f6:	181b      	addlt	r3, r3, r0
 10145f8:	9304      	str	r3, [sp, #16]
 10145fa:	2a00      	cmp	r2, #0
 10145fc:	f040 82bd 	bne.w	1014b7a <_svfiprintf_r+0x8da>
 1014600:	2300      	movs	r3, #0
 1014602:	931b      	str	r3, [sp, #108]	; 0x6c
 1014604:	9b08      	ldr	r3, [sp, #32]
 1014606:	b11b      	cbz	r3, 1014610 <_svfiprintf_r+0x370>
 1014608:	9908      	ldr	r1, [sp, #32]
 101460a:	4658      	mov	r0, fp
 101460c:	f7fe fa38 	bl	1012a80 <_free_r>
 1014610:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014614:	e669      	b.n	10142ea <_svfiprintf_r+0x4a>
 1014616:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101461a:	2100      	movs	r1, #0
 101461c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1014620:	200a      	movs	r0, #10
 1014622:	fb00 2101 	mla	r1, r0, r1, r2
 1014626:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 101462a:	2a09      	cmp	r2, #9
 101462c:	d9f6      	bls.n	101461c <_svfiprintf_r+0x37c>
 101462e:	9106      	str	r1, [sp, #24]
 1014630:	e68c      	b.n	101434c <_svfiprintf_r+0xac>
 1014632:	9a07      	ldr	r2, [sp, #28]
 1014634:	2b43      	cmp	r3, #67	; 0x43
 1014636:	f102 0404 	add.w	r4, r2, #4
 101463a:	d002      	beq.n	1014642 <_svfiprintf_r+0x3a2>
 101463c:	06f7      	lsls	r7, r6, #27
 101463e:	f140 8379 	bpl.w	1014d34 <_svfiprintf_r+0xa94>
 1014642:	2208      	movs	r2, #8
 1014644:	2100      	movs	r1, #0
 1014646:	a818      	add	r0, sp, #96	; 0x60
 1014648:	ad2d      	add	r5, sp, #180	; 0xb4
 101464a:	f7f8 fc49 	bl	100cee0 <memset>
 101464e:	9a07      	ldr	r2, [sp, #28]
 1014650:	ab18      	add	r3, sp, #96	; 0x60
 1014652:	4629      	mov	r1, r5
 1014654:	4658      	mov	r0, fp
 1014656:	6812      	ldr	r2, [r2, #0]
 1014658:	f7fc fe50 	bl	10112fc <_wcrtomb_r>
 101465c:	1c43      	adds	r3, r0, #1
 101465e:	9005      	str	r0, [sp, #20]
 1014660:	f000 84bf 	beq.w	1014fe2 <_svfiprintf_r+0xd42>
 1014664:	9b05      	ldr	r3, [sp, #20]
 1014666:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 101466a:	9302      	str	r3, [sp, #8]
 101466c:	2300      	movs	r3, #0
 101466e:	9407      	str	r4, [sp, #28]
 1014670:	950b      	str	r5, [sp, #44]	; 0x2c
 1014672:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1014676:	e19d      	b.n	10149b4 <_svfiprintf_r+0x714>
 1014678:	06b2      	lsls	r2, r6, #26
 101467a:	f100 81d0 	bmi.w	1014a1e <_svfiprintf_r+0x77e>
 101467e:	9a07      	ldr	r2, [sp, #28]
 1014680:	06f3      	lsls	r3, r6, #27
 1014682:	f852 4b04 	ldr.w	r4, [r2], #4
 1014686:	f100 84c3 	bmi.w	1015010 <_svfiprintf_r+0xd70>
 101468a:	0677      	lsls	r7, r6, #25
 101468c:	f140 8436 	bpl.w	1014efc <_svfiprintf_r+0xc5c>
 1014690:	4633      	mov	r3, r6
 1014692:	9207      	str	r2, [sp, #28]
 1014694:	b2a4      	uxth	r4, r4
 1014696:	2500      	movs	r5, #0
 1014698:	e1c9      	b.n	1014a2e <_svfiprintf_r+0x78e>
 101469a:	9a07      	ldr	r2, [sp, #28]
 101469c:	f89a 3000 	ldrb.w	r3, [sl]
 10146a0:	f852 1b04 	ldr.w	r1, [r2], #4
 10146a4:	2900      	cmp	r1, #0
 10146a6:	9106      	str	r1, [sp, #24]
 10146a8:	bfa8      	it	ge
 10146aa:	9207      	strge	r2, [sp, #28]
 10146ac:	f6bf ae4c 	bge.w	1014348 <_svfiprintf_r+0xa8>
 10146b0:	4249      	negs	r1, r1
 10146b2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 10146b6:	e061      	b.n	101477c <_svfiprintf_r+0x4dc>
 10146b8:	4658      	mov	r0, fp
 10146ba:	f7fe fd09 	bl	10130d0 <_localeconv_r>
 10146be:	6843      	ldr	r3, [r0, #4]
 10146c0:	4618      	mov	r0, r3
 10146c2:	930f      	str	r3, [sp, #60]	; 0x3c
 10146c4:	f7f9 f81c 	bl	100d700 <strlen>
 10146c8:	4604      	mov	r4, r0
 10146ca:	900e      	str	r0, [sp, #56]	; 0x38
 10146cc:	4658      	mov	r0, fp
 10146ce:	f7fe fcff 	bl	10130d0 <_localeconv_r>
 10146d2:	6883      	ldr	r3, [r0, #8]
 10146d4:	2c00      	cmp	r4, #0
 10146d6:	bf18      	it	ne
 10146d8:	2b00      	cmpne	r3, #0
 10146da:	930d      	str	r3, [sp, #52]	; 0x34
 10146dc:	f43f ae9a 	beq.w	1014414 <_svfiprintf_r+0x174>
 10146e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10146e2:	781a      	ldrb	r2, [r3, #0]
 10146e4:	f89a 3000 	ldrb.w	r3, [sl]
 10146e8:	2a00      	cmp	r2, #0
 10146ea:	f43f ae2d 	beq.w	1014348 <_svfiprintf_r+0xa8>
 10146ee:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 10146f2:	e629      	b.n	1014348 <_svfiprintf_r+0xa8>
 10146f4:	f046 0601 	orr.w	r6, r6, #1
 10146f8:	f89a 3000 	ldrb.w	r3, [sl]
 10146fc:	e624      	b.n	1014348 <_svfiprintf_r+0xa8>
 10146fe:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1014702:	f89a 3000 	ldrb.w	r3, [sl]
 1014706:	2a00      	cmp	r2, #0
 1014708:	f47f ae1e 	bne.w	1014348 <_svfiprintf_r+0xa8>
 101470c:	2220      	movs	r2, #32
 101470e:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1014712:	e619      	b.n	1014348 <_svfiprintf_r+0xa8>
 1014714:	06b0      	lsls	r0, r6, #26
 1014716:	f100 8178 	bmi.w	1014a0a <_svfiprintf_r+0x76a>
 101471a:	9a07      	ldr	r2, [sp, #28]
 101471c:	06f1      	lsls	r1, r6, #27
 101471e:	f852 4b04 	ldr.w	r4, [r2], #4
 1014722:	f100 8478 	bmi.w	1015016 <_svfiprintf_r+0xd76>
 1014726:	0673      	lsls	r3, r6, #25
 1014728:	9207      	str	r2, [sp, #28]
 101472a:	4637      	mov	r7, r6
 101472c:	f140 83f1 	bpl.w	1014f12 <_svfiprintf_r+0xc72>
 1014730:	b2a4      	uxth	r4, r4
 1014732:	2500      	movs	r5, #0
 1014734:	2301      	movs	r3, #1
 1014736:	e6c6      	b.n	10144c6 <_svfiprintf_r+0x226>
 1014738:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 101473c:	f89a 3000 	ldrb.w	r3, [sl]
 1014740:	e602      	b.n	1014348 <_svfiprintf_r+0xa8>
 1014742:	4651      	mov	r1, sl
 1014744:	f811 3b01 	ldrb.w	r3, [r1], #1
 1014748:	2b2a      	cmp	r3, #42	; 0x2a
 101474a:	f000 8452 	beq.w	1014ff2 <_svfiprintf_r+0xd52>
 101474e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1014752:	468a      	mov	sl, r1
 1014754:	2a09      	cmp	r2, #9
 1014756:	bf84      	itt	hi
 1014758:	2200      	movhi	r2, #0
 101475a:	9203      	strhi	r2, [sp, #12]
 101475c:	f63f adf6 	bhi.w	101434c <_svfiprintf_r+0xac>
 1014760:	2100      	movs	r1, #0
 1014762:	f81a 3b01 	ldrb.w	r3, [sl], #1
 1014766:	200a      	movs	r0, #10
 1014768:	fb00 2101 	mla	r1, r0, r1, r2
 101476c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 1014770:	2a09      	cmp	r2, #9
 1014772:	d9f6      	bls.n	1014762 <_svfiprintf_r+0x4c2>
 1014774:	9103      	str	r1, [sp, #12]
 1014776:	e5e9      	b.n	101434c <_svfiprintf_r+0xac>
 1014778:	f89a 3000 	ldrb.w	r3, [sl]
 101477c:	f046 0604 	orr.w	r6, r6, #4
 1014780:	e5e2      	b.n	1014348 <_svfiprintf_r+0xa8>
 1014782:	06b1      	lsls	r1, r6, #26
 1014784:	f046 0310 	orr.w	r3, r6, #16
 1014788:	f100 814a 	bmi.w	1014a20 <_svfiprintf_r+0x780>
 101478c:	9a07      	ldr	r2, [sp, #28]
 101478e:	3204      	adds	r2, #4
 1014790:	9907      	ldr	r1, [sp, #28]
 1014792:	2500      	movs	r5, #0
 1014794:	9207      	str	r2, [sp, #28]
 1014796:	680c      	ldr	r4, [r1, #0]
 1014798:	e149      	b.n	1014a2e <_svfiprintf_r+0x78e>
 101479a:	f046 0710 	orr.w	r7, r6, #16
 101479e:	06b6      	lsls	r6, r6, #26
 10147a0:	f100 810d 	bmi.w	10149be <_svfiprintf_r+0x71e>
 10147a4:	9b07      	ldr	r3, [sp, #28]
 10147a6:	1d1a      	adds	r2, r3, #4
 10147a8:	9b07      	ldr	r3, [sp, #28]
 10147aa:	9207      	str	r2, [sp, #28]
 10147ac:	681c      	ldr	r4, [r3, #0]
 10147ae:	17e5      	asrs	r5, r4, #31
 10147b0:	4622      	mov	r2, r4
 10147b2:	2a00      	cmp	r2, #0
 10147b4:	462b      	mov	r3, r5
 10147b6:	f173 0300 	sbcs.w	r3, r3, #0
 10147ba:	f280 810f 	bge.w	10149dc <_svfiprintf_r+0x73c>
 10147be:	4264      	negs	r4, r4
 10147c0:	9903      	ldr	r1, [sp, #12]
 10147c2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 10147c6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10147ca:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 10147ce:	1c4a      	adds	r2, r1, #1
 10147d0:	f04f 0301 	mov.w	r3, #1
 10147d4:	f47f ae7e 	bne.w	10144d4 <_svfiprintf_r+0x234>
 10147d8:	2b01      	cmp	r3, #1
 10147da:	f000 8281 	beq.w	1014ce0 <_svfiprintf_r+0xa40>
 10147de:	2b02      	cmp	r3, #2
 10147e0:	bf18      	it	ne
 10147e2:	a946      	addne	r1, sp, #280	; 0x118
 10147e4:	f040 8128 	bne.w	1014a38 <_svfiprintf_r+0x798>
 10147e8:	ab46      	add	r3, sp, #280	; 0x118
 10147ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 10147ec:	461a      	mov	r2, r3
 10147ee:	f004 010f 	and.w	r1, r4, #15
 10147f2:	0923      	lsrs	r3, r4, #4
 10147f4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 10147f8:	0928      	lsrs	r0, r5, #4
 10147fa:	5c71      	ldrb	r1, [r6, r1]
 10147fc:	461c      	mov	r4, r3
 10147fe:	4605      	mov	r5, r0
 1014800:	ea54 0305 	orrs.w	r3, r4, r5
 1014804:	f802 1d01 	strb.w	r1, [r2, #-1]!
 1014808:	d1f1      	bne.n	10147ee <_svfiprintf_r+0x54e>
 101480a:	ab46      	add	r3, sp, #280	; 0x118
 101480c:	920b      	str	r2, [sp, #44]	; 0x2c
 101480e:	1a9b      	subs	r3, r3, r2
 1014810:	463e      	mov	r6, r7
 1014812:	9305      	str	r3, [sp, #20]
 1014814:	e67c      	b.n	1014510 <_svfiprintf_r+0x270>
 1014816:	232b      	movs	r3, #43	; 0x2b
 1014818:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 101481c:	f89a 3000 	ldrb.w	r3, [sl]
 1014820:	e592      	b.n	1014348 <_svfiprintf_r+0xa8>
 1014822:	9b07      	ldr	r3, [sp, #28]
 1014824:	f647 0230 	movw	r2, #30768	; 0x7830
 1014828:	f249 7194 	movw	r1, #38804	; 0x9794
 101482c:	f046 0702 	orr.w	r7, r6, #2
 1014830:	f2c0 1105 	movt	r1, #261	; 0x105
 1014834:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 1014838:	f853 4b04 	ldr.w	r4, [r3], #4
 101483c:	2500      	movs	r5, #0
 101483e:	910c      	str	r1, [sp, #48]	; 0x30
 1014840:	9307      	str	r3, [sp, #28]
 1014842:	2302      	movs	r3, #2
 1014844:	e63f      	b.n	10144c6 <_svfiprintf_r+0x226>
 1014846:	06b5      	lsls	r5, r6, #26
 1014848:	f100 80b8 	bmi.w	10149bc <_svfiprintf_r+0x71c>
 101484c:	9b07      	ldr	r3, [sp, #28]
 101484e:	06f4      	lsls	r4, r6, #27
 1014850:	f103 0204 	add.w	r2, r3, #4
 1014854:	f100 83d9 	bmi.w	101500a <_svfiprintf_r+0xd6a>
 1014858:	9b07      	ldr	r3, [sp, #28]
 101485a:	0670      	lsls	r0, r6, #25
 101485c:	bf48      	it	mi
 101485e:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1014862:	d404      	bmi.n	101486e <_svfiprintf_r+0x5ce>
 1014864:	05b1      	lsls	r1, r6, #22
 1014866:	f140 837a 	bpl.w	1014f5e <_svfiprintf_r+0xcbe>
 101486a:	f993 4000 	ldrsb.w	r4, [r3]
 101486e:	17e5      	asrs	r5, r4, #31
 1014870:	9207      	str	r2, [sp, #28]
 1014872:	4637      	mov	r7, r6
 1014874:	4622      	mov	r2, r4
 1014876:	462b      	mov	r3, r5
 1014878:	e0ab      	b.n	10149d2 <_svfiprintf_r+0x732>
 101487a:	06b4      	lsls	r4, r6, #26
 101487c:	f249 5248 	movw	r2, #38216	; 0x9548
 1014880:	f2c0 1205 	movt	r2, #261	; 0x105
 1014884:	920c      	str	r2, [sp, #48]	; 0x30
 1014886:	f53f ae0b 	bmi.w	10144a0 <_svfiprintf_r+0x200>
 101488a:	9a07      	ldr	r2, [sp, #28]
 101488c:	06f0      	lsls	r0, r6, #27
 101488e:	f852 4b04 	ldr.w	r4, [r2], #4
 1014892:	9207      	str	r2, [sp, #28]
 1014894:	d40b      	bmi.n	10148ae <_svfiprintf_r+0x60e>
 1014896:	0671      	lsls	r1, r6, #25
 1014898:	bf44      	itt	mi
 101489a:	b2a4      	uxthmi	r4, r4
 101489c:	2500      	movmi	r5, #0
 101489e:	f53f ae06 	bmi.w	10144ae <_svfiprintf_r+0x20e>
 10148a2:	05b2      	lsls	r2, r6, #22
 10148a4:	bf44      	itt	mi
 10148a6:	b2e4      	uxtbmi	r4, r4
 10148a8:	2500      	movmi	r5, #0
 10148aa:	f53f ae00 	bmi.w	10144ae <_svfiprintf_r+0x20e>
 10148ae:	2500      	movs	r5, #0
 10148b0:	ea54 0205 	orrs.w	r2, r4, r5
 10148b4:	f006 0201 	and.w	r2, r6, #1
 10148b8:	bf08      	it	eq
 10148ba:	2200      	moveq	r2, #0
 10148bc:	2a00      	cmp	r2, #0
 10148be:	f43f adff 	beq.w	10144c0 <_svfiprintf_r+0x220>
 10148c2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 10148c6:	f046 0602 	orr.w	r6, r6, #2
 10148ca:	2330      	movs	r3, #48	; 0x30
 10148cc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 10148d0:	e5f6      	b.n	10144c0 <_svfiprintf_r+0x220>
 10148d2:	06b4      	lsls	r4, r6, #26
 10148d4:	f046 0710 	orr.w	r7, r6, #16
 10148d8:	f100 8098 	bmi.w	1014a0c <_svfiprintf_r+0x76c>
 10148dc:	9b07      	ldr	r3, [sp, #28]
 10148de:	1d1a      	adds	r2, r3, #4
 10148e0:	9b07      	ldr	r3, [sp, #28]
 10148e2:	2500      	movs	r5, #0
 10148e4:	9207      	str	r2, [sp, #28]
 10148e6:	681c      	ldr	r4, [r3, #0]
 10148e8:	2301      	movs	r3, #1
 10148ea:	e5ec      	b.n	10144c6 <_svfiprintf_r+0x226>
 10148ec:	9d07      	ldr	r5, [sp, #28]
 10148ee:	2200      	movs	r2, #0
 10148f0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 10148f4:	f855 1b04 	ldr.w	r1, [r5], #4
 10148f8:	910b      	str	r1, [sp, #44]	; 0x2c
 10148fa:	2900      	cmp	r1, #0
 10148fc:	f000 82f1 	beq.w	1014ee2 <_svfiprintf_r+0xc42>
 1014900:	2b53      	cmp	r3, #83	; 0x53
 1014902:	f000 8231 	beq.w	1014d68 <_svfiprintf_r+0xac8>
 1014906:	f016 0410 	ands.w	r4, r6, #16
 101490a:	f040 822d 	bne.w	1014d68 <_svfiprintf_r+0xac8>
 101490e:	9a03      	ldr	r2, [sp, #12]
 1014910:	1c53      	adds	r3, r2, #1
 1014912:	f000 8343 	beq.w	1014f9c <_svfiprintf_r+0xcfc>
 1014916:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 1014918:	4621      	mov	r1, r4
 101491a:	4638      	mov	r0, r7
 101491c:	f7fe fc78 	bl	1013210 <memchr>
 1014920:	9008      	str	r0, [sp, #32]
 1014922:	2800      	cmp	r0, #0
 1014924:	f000 8332 	beq.w	1014f8c <_svfiprintf_r+0xcec>
 1014928:	1bc3      	subs	r3, r0, r7
 101492a:	4622      	mov	r2, r4
 101492c:	9305      	str	r3, [sp, #20]
 101492e:	9403      	str	r4, [sp, #12]
 1014930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1014934:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1014938:	9302      	str	r3, [sp, #8]
 101493a:	e5f1      	b.n	1014520 <_svfiprintf_r+0x280>
 101493c:	f89a 3000 	ldrb.w	r3, [sl]
 1014940:	2b6c      	cmp	r3, #108	; 0x6c
 1014942:	bf09      	itett	eq
 1014944:	f046 0620 	orreq.w	r6, r6, #32
 1014948:	f046 0610 	orrne.w	r6, r6, #16
 101494c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 1014950:	f10a 0a01 	addeq.w	sl, sl, #1
 1014954:	e4f8      	b.n	1014348 <_svfiprintf_r+0xa8>
 1014956:	f89a 3000 	ldrb.w	r3, [sl]
 101495a:	2b68      	cmp	r3, #104	; 0x68
 101495c:	bf09      	itett	eq
 101495e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 1014962:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1014966:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 101496a:	f10a 0a01 	addeq.w	sl, sl, #1
 101496e:	e4eb      	b.n	1014348 <_svfiprintf_r+0xa8>
 1014970:	9a07      	ldr	r2, [sp, #28]
 1014972:	06b7      	lsls	r7, r6, #26
 1014974:	f102 0304 	add.w	r3, r2, #4
 1014978:	f100 81d2 	bmi.w	1014d20 <_svfiprintf_r+0xa80>
 101497c:	06f5      	lsls	r5, r6, #27
 101497e:	f100 825d 	bmi.w	1014e3c <_svfiprintf_r+0xb9c>
 1014982:	0674      	lsls	r4, r6, #25
 1014984:	f100 82e4 	bmi.w	1014f50 <_svfiprintf_r+0xcb0>
 1014988:	05b0      	lsls	r0, r6, #22
 101498a:	f140 8257 	bpl.w	1014e3c <_svfiprintf_r+0xb9c>
 101498e:	9a07      	ldr	r2, [sp, #28]
 1014990:	9307      	str	r3, [sp, #28]
 1014992:	9b04      	ldr	r3, [sp, #16]
 1014994:	6812      	ldr	r2, [r2, #0]
 1014996:	7013      	strb	r3, [r2, #0]
 1014998:	e4a7      	b.n	10142ea <_svfiprintf_r+0x4a>
 101499a:	2b00      	cmp	r3, #0
 101499c:	f43f ad5c 	beq.w	1014458 <_svfiprintf_r+0x1b8>
 10149a0:	2201      	movs	r2, #1
 10149a2:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 10149a6:	9202      	str	r2, [sp, #8]
 10149a8:	2300      	movs	r3, #0
 10149aa:	9205      	str	r2, [sp, #20]
 10149ac:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10149b0:	ab2d      	add	r3, sp, #180	; 0xb4
 10149b2:	930b      	str	r3, [sp, #44]	; 0x2c
 10149b4:	2300      	movs	r3, #0
 10149b6:	9308      	str	r3, [sp, #32]
 10149b8:	9303      	str	r3, [sp, #12]
 10149ba:	e5b7      	b.n	101452c <_svfiprintf_r+0x28c>
 10149bc:	4637      	mov	r7, r6
 10149be:	9d07      	ldr	r5, [sp, #28]
 10149c0:	3507      	adds	r5, #7
 10149c2:	f025 0307 	bic.w	r3, r5, #7
 10149c6:	4619      	mov	r1, r3
 10149c8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 10149cc:	4614      	mov	r4, r2
 10149ce:	461d      	mov	r5, r3
 10149d0:	9107      	str	r1, [sp, #28]
 10149d2:	2a00      	cmp	r2, #0
 10149d4:	f173 0300 	sbcs.w	r3, r3, #0
 10149d8:	f6ff aef1 	blt.w	10147be <_svfiprintf_r+0x51e>
 10149dc:	9b03      	ldr	r3, [sp, #12]
 10149de:	3301      	adds	r3, #1
 10149e0:	f000 817e 	beq.w	1014ce0 <_svfiprintf_r+0xa40>
 10149e4:	ea54 0305 	orrs.w	r3, r4, r5
 10149e8:	9a03      	ldr	r2, [sp, #12]
 10149ea:	f027 0680 	bic.w	r6, r7, #128	; 0x80
 10149ee:	bf14      	ite	ne
 10149f0:	2301      	movne	r3, #1
 10149f2:	2300      	moveq	r3, #0
 10149f4:	2a00      	cmp	r2, #0
 10149f6:	bf18      	it	ne
 10149f8:	2301      	movne	r3, #1
 10149fa:	2b00      	cmp	r3, #0
 10149fc:	f040 816f 	bne.w	1014cde <_svfiprintf_r+0xa3e>
 1014a00:	aa46      	add	r2, sp, #280	; 0x118
 1014a02:	9303      	str	r3, [sp, #12]
 1014a04:	920b      	str	r2, [sp, #44]	; 0x2c
 1014a06:	9305      	str	r3, [sp, #20]
 1014a08:	e582      	b.n	1014510 <_svfiprintf_r+0x270>
 1014a0a:	4637      	mov	r7, r6
 1014a0c:	9d07      	ldr	r5, [sp, #28]
 1014a0e:	2301      	movs	r3, #1
 1014a10:	3507      	adds	r5, #7
 1014a12:	f025 0207 	bic.w	r2, r5, #7
 1014a16:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1014a1a:	9207      	str	r2, [sp, #28]
 1014a1c:	e553      	b.n	10144c6 <_svfiprintf_r+0x226>
 1014a1e:	4633      	mov	r3, r6
 1014a20:	9d07      	ldr	r5, [sp, #28]
 1014a22:	3507      	adds	r5, #7
 1014a24:	f025 0207 	bic.w	r2, r5, #7
 1014a28:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 1014a2c:	9207      	str	r2, [sp, #28]
 1014a2e:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
 1014a32:	2300      	movs	r3, #0
 1014a34:	e547      	b.n	10144c6 <_svfiprintf_r+0x226>
 1014a36:	4611      	mov	r1, r2
 1014a38:	08e2      	lsrs	r2, r4, #3
 1014a3a:	08e8      	lsrs	r0, r5, #3
 1014a3c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 1014a40:	f004 0307 	and.w	r3, r4, #7
 1014a44:	4605      	mov	r5, r0
 1014a46:	3330      	adds	r3, #48	; 0x30
 1014a48:	4614      	mov	r4, r2
 1014a4a:	ea54 0005 	orrs.w	r0, r4, r5
 1014a4e:	f801 3c01 	strb.w	r3, [r1, #-1]
 1014a52:	f101 32ff 	add.w	r2, r1, #4294967295
 1014a56:	d1ee      	bne.n	1014a36 <_svfiprintf_r+0x796>
 1014a58:	2b30      	cmp	r3, #48	; 0x30
 1014a5a:	bf0c      	ite	eq
 1014a5c:	2300      	moveq	r3, #0
 1014a5e:	f007 0301 	andne.w	r3, r7, #1
 1014a62:	920b      	str	r2, [sp, #44]	; 0x2c
 1014a64:	2b00      	cmp	r3, #0
 1014a66:	f040 81cd 	bne.w	1014e04 <_svfiprintf_r+0xb64>
 1014a6a:	ab46      	add	r3, sp, #280	; 0x118
 1014a6c:	463e      	mov	r6, r7
 1014a6e:	1a9b      	subs	r3, r3, r2
 1014a70:	9305      	str	r3, [sp, #20]
 1014a72:	e54d      	b.n	1014510 <_svfiprintf_r+0x270>
 1014a74:	9b06      	ldr	r3, [sp, #24]
 1014a76:	9c02      	ldr	r4, [sp, #8]
 1014a78:	1b1c      	subs	r4, r3, r4
 1014a7a:	2c00      	cmp	r4, #0
 1014a7c:	f77f ad9b 	ble.w	10145b6 <_svfiprintf_r+0x316>
 1014a80:	2c10      	cmp	r4, #16
 1014a82:	4db8      	ldr	r5, [pc, #736]	; (1014d64 <_svfiprintf_r+0xac4>)
 1014a84:	f340 82aa 	ble.w	1014fdc <_svfiprintf_r+0xd3c>
 1014a88:	960a      	str	r6, [sp, #40]	; 0x28
 1014a8a:	2710      	movs	r7, #16
 1014a8c:	462e      	mov	r6, r5
 1014a8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1014a90:	e002      	b.n	1014a98 <_svfiprintf_r+0x7f8>
 1014a92:	3c10      	subs	r4, #16
 1014a94:	2c10      	cmp	r4, #16
 1014a96:	dd17      	ble.n	1014ac8 <_svfiprintf_r+0x828>
 1014a98:	3101      	adds	r1, #1
 1014a9a:	3210      	adds	r2, #16
 1014a9c:	2907      	cmp	r1, #7
 1014a9e:	e9c8 6700 	strd	r6, r7, [r8]
 1014aa2:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1014aa6:	f108 0808 	add.w	r8, r8, #8
 1014aaa:	ddf2      	ble.n	1014a92 <_svfiprintf_r+0x7f2>
 1014aac:	aa1a      	add	r2, sp, #104	; 0x68
 1014aae:	4629      	mov	r1, r5
 1014ab0:	4658      	mov	r0, fp
 1014ab2:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014ab6:	f7ff fb77 	bl	10141a8 <__ssprint_r>
 1014aba:	2800      	cmp	r0, #0
 1014abc:	d165      	bne.n	1014b8a <_svfiprintf_r+0x8ea>
 1014abe:	3c10      	subs	r4, #16
 1014ac0:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1014ac4:	2c10      	cmp	r4, #16
 1014ac6:	dce7      	bgt.n	1014a98 <_svfiprintf_r+0x7f8>
 1014ac8:	4635      	mov	r5, r6
 1014aca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1014acc:	3101      	adds	r1, #1
 1014ace:	f108 0308 	add.w	r3, r8, #8
 1014ad2:	2907      	cmp	r1, #7
 1014ad4:	4422      	add	r2, r4
 1014ad6:	f8c8 5000 	str.w	r5, [r8]
 1014ada:	921c      	str	r2, [sp, #112]	; 0x70
 1014adc:	f8c8 4004 	str.w	r4, [r8, #4]
 1014ae0:	911b      	str	r1, [sp, #108]	; 0x6c
 1014ae2:	f300 819b 	bgt.w	1014e1c <_svfiprintf_r+0xb7c>
 1014ae6:	f103 0708 	add.w	r7, r3, #8
 1014aea:	4698      	mov	r8, r3
 1014aec:	9c05      	ldr	r4, [sp, #20]
 1014aee:	1c48      	adds	r0, r1, #1
 1014af0:	9b03      	ldr	r3, [sp, #12]
 1014af2:	1b1c      	subs	r4, r3, r4
 1014af4:	2c00      	cmp	r4, #0
 1014af6:	f77f ad64 	ble.w	10145c2 <_svfiprintf_r+0x322>
 1014afa:	2c10      	cmp	r4, #16
 1014afc:	4d99      	ldr	r5, [pc, #612]	; (1014d64 <_svfiprintf_r+0xac4>)
 1014afe:	f340 8210 	ble.w	1014f22 <_svfiprintf_r+0xc82>
 1014b02:	9603      	str	r6, [sp, #12]
 1014b04:	2710      	movs	r7, #16
 1014b06:	462e      	mov	r6, r5
 1014b08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1014b0a:	e002      	b.n	1014b12 <_svfiprintf_r+0x872>
 1014b0c:	3c10      	subs	r4, #16
 1014b0e:	2c10      	cmp	r4, #16
 1014b10:	dd16      	ble.n	1014b40 <_svfiprintf_r+0x8a0>
 1014b12:	3101      	adds	r1, #1
 1014b14:	3210      	adds	r2, #16
 1014b16:	2907      	cmp	r1, #7
 1014b18:	e9c8 6700 	strd	r6, r7, [r8]
 1014b1c:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1014b20:	f108 0808 	add.w	r8, r8, #8
 1014b24:	ddf2      	ble.n	1014b0c <_svfiprintf_r+0x86c>
 1014b26:	aa1a      	add	r2, sp, #104	; 0x68
 1014b28:	4629      	mov	r1, r5
 1014b2a:	4658      	mov	r0, fp
 1014b2c:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014b30:	f7ff fb3a 	bl	10141a8 <__ssprint_r>
 1014b34:	bb48      	cbnz	r0, 1014b8a <_svfiprintf_r+0x8ea>
 1014b36:	3c10      	subs	r4, #16
 1014b38:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1014b3c:	2c10      	cmp	r4, #16
 1014b3e:	dce8      	bgt.n	1014b12 <_svfiprintf_r+0x872>
 1014b40:	4635      	mov	r5, r6
 1014b42:	9e03      	ldr	r6, [sp, #12]
 1014b44:	1c48      	adds	r0, r1, #1
 1014b46:	f108 0308 	add.w	r3, r8, #8
 1014b4a:	2807      	cmp	r0, #7
 1014b4c:	4422      	add	r2, r4
 1014b4e:	f8c8 5000 	str.w	r5, [r8]
 1014b52:	921c      	str	r2, [sp, #112]	; 0x70
 1014b54:	f8c8 4004 	str.w	r4, [r8, #4]
 1014b58:	901b      	str	r0, [sp, #108]	; 0x6c
 1014b5a:	f300 80d0 	bgt.w	1014cfe <_svfiprintf_r+0xa5e>
 1014b5e:	3001      	adds	r0, #1
 1014b60:	f103 0708 	add.w	r7, r3, #8
 1014b64:	4698      	mov	r8, r3
 1014b66:	e52c      	b.n	10145c2 <_svfiprintf_r+0x322>
 1014b68:	aa1a      	add	r2, sp, #104	; 0x68
 1014b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014b6c:	4658      	mov	r0, fp
 1014b6e:	f7ff fb1b 	bl	10141a8 <__ssprint_r>
 1014b72:	b950      	cbnz	r0, 1014b8a <_svfiprintf_r+0x8ea>
 1014b74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014b76:	af1d      	add	r7, sp, #116	; 0x74
 1014b78:	e52f      	b.n	10145da <_svfiprintf_r+0x33a>
 1014b7a:	aa1a      	add	r2, sp, #104	; 0x68
 1014b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014b7e:	4658      	mov	r0, fp
 1014b80:	f7ff fb12 	bl	10141a8 <__ssprint_r>
 1014b84:	2800      	cmp	r0, #0
 1014b86:	f43f ad3b 	beq.w	1014600 <_svfiprintf_r+0x360>
 1014b8a:	9b08      	ldr	r3, [sp, #32]
 1014b8c:	2b00      	cmp	r3, #0
 1014b8e:	f43f ac67 	beq.w	1014460 <_svfiprintf_r+0x1c0>
 1014b92:	9908      	ldr	r1, [sp, #32]
 1014b94:	4658      	mov	r0, fp
 1014b96:	f7fd ff73 	bl	1012a80 <_free_r>
 1014b9a:	e461      	b.n	1014460 <_svfiprintf_r+0x1c0>
 1014b9c:	2c10      	cmp	r4, #16
 1014b9e:	f646 4580 	movw	r5, #27776	; 0x6c80
 1014ba2:	f2c0 1505 	movt	r5, #261	; 0x105
 1014ba6:	dd23      	ble.n	1014bf0 <_svfiprintf_r+0x950>
 1014ba8:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 1014bac:	2710      	movs	r7, #16
 1014bae:	462e      	mov	r6, r5
 1014bb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 1014bb2:	e002      	b.n	1014bba <_svfiprintf_r+0x91a>
 1014bb4:	3c10      	subs	r4, #16
 1014bb6:	2c10      	cmp	r4, #16
 1014bb8:	dd17      	ble.n	1014bea <_svfiprintf_r+0x94a>
 1014bba:	3101      	adds	r1, #1
 1014bbc:	3210      	adds	r2, #16
 1014bbe:	2907      	cmp	r1, #7
 1014bc0:	e9c8 6700 	strd	r6, r7, [r8]
 1014bc4:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1014bc8:	f108 0808 	add.w	r8, r8, #8
 1014bcc:	ddf2      	ble.n	1014bb4 <_svfiprintf_r+0x914>
 1014bce:	aa1a      	add	r2, sp, #104	; 0x68
 1014bd0:	4629      	mov	r1, r5
 1014bd2:	4658      	mov	r0, fp
 1014bd4:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014bd8:	f7ff fae6 	bl	10141a8 <__ssprint_r>
 1014bdc:	2800      	cmp	r0, #0
 1014bde:	d1d4      	bne.n	1014b8a <_svfiprintf_r+0x8ea>
 1014be0:	3c10      	subs	r4, #16
 1014be2:	e9dd 121b 	ldrd	r1, r2, [sp, #108]	; 0x6c
 1014be6:	2c10      	cmp	r4, #16
 1014be8:	dce7      	bgt.n	1014bba <_svfiprintf_r+0x91a>
 1014bea:	4635      	mov	r5, r6
 1014bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1014bee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 1014bf0:	3101      	adds	r1, #1
 1014bf2:	4422      	add	r2, r4
 1014bf4:	2907      	cmp	r1, #7
 1014bf6:	e9c8 5400 	strd	r5, r4, [r8]
 1014bfa:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
 1014bfe:	bfd8      	it	le
 1014c00:	f108 0808 	addle.w	r8, r8, #8
 1014c04:	f77f aca4 	ble.w	1014550 <_svfiprintf_r+0x2b0>
 1014c08:	aa1a      	add	r2, sp, #104	; 0x68
 1014c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014c0c:	4658      	mov	r0, fp
 1014c0e:	9310      	str	r3, [sp, #64]	; 0x40
 1014c10:	f7ff faca 	bl	10141a8 <__ssprint_r>
 1014c14:	2800      	cmp	r0, #0
 1014c16:	d1b8      	bne.n	1014b8a <_svfiprintf_r+0x8ea>
 1014c18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014c1a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014c1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1014c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1014c22:	e495      	b.n	1014550 <_svfiprintf_r+0x2b0>
 1014c24:	aa1a      	add	r2, sp, #104	; 0x68
 1014c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014c28:	4658      	mov	r0, fp
 1014c2a:	9310      	str	r3, [sp, #64]	; 0x40
 1014c2c:	f7ff fabc 	bl	10141a8 <__ssprint_r>
 1014c30:	2800      	cmp	r0, #0
 1014c32:	d1aa      	bne.n	1014b8a <_svfiprintf_r+0x8ea>
 1014c34:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1014c36:	af1f      	add	r7, sp, #124	; 0x7c
 1014c38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014c3a:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014c3e:	1c48      	adds	r0, r1, #1
 1014c40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 1014c42:	e4a1      	b.n	1014588 <_svfiprintf_r+0x2e8>
 1014c44:	aa1a      	add	r2, sp, #104	; 0x68
 1014c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014c48:	4658      	mov	r0, fp
 1014c4a:	f7ff faad 	bl	10141a8 <__ssprint_r>
 1014c4e:	2800      	cmp	r0, #0
 1014c50:	d19b      	bne.n	1014b8a <_svfiprintf_r+0x8ea>
 1014c52:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1014c54:	af1f      	add	r7, sp, #124	; 0x7c
 1014c56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014c58:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014c5c:	1c48      	adds	r0, r1, #1
 1014c5e:	e4a6      	b.n	10145ae <_svfiprintf_r+0x30e>
 1014c60:	2c10      	cmp	r4, #16
 1014c62:	f646 4580 	movw	r5, #27776	; 0x6c80
 1014c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 1014c68:	f2c0 1505 	movt	r5, #261	; 0x105
 1014c6c:	bfc4      	itt	gt
 1014c6e:	2610      	movgt	r6, #16
 1014c70:	f8dd 8024 	ldrgt.w	r8, [sp, #36]	; 0x24
 1014c74:	dc03      	bgt.n	1014c7e <_svfiprintf_r+0x9de>
 1014c76:	e01a      	b.n	1014cae <_svfiprintf_r+0xa0e>
 1014c78:	3c10      	subs	r4, #16
 1014c7a:	2c10      	cmp	r4, #16
 1014c7c:	dd17      	ble.n	1014cae <_svfiprintf_r+0xa0e>
 1014c7e:	3301      	adds	r3, #1
 1014c80:	3210      	adds	r2, #16
 1014c82:	2b07      	cmp	r3, #7
 1014c84:	e9c7 5600 	strd	r5, r6, [r7]
 1014c88:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1014c8c:	f107 0708 	add.w	r7, r7, #8
 1014c90:	ddf2      	ble.n	1014c78 <_svfiprintf_r+0x9d8>
 1014c92:	aa1a      	add	r2, sp, #104	; 0x68
 1014c94:	4641      	mov	r1, r8
 1014c96:	4658      	mov	r0, fp
 1014c98:	af1d      	add	r7, sp, #116	; 0x74
 1014c9a:	f7ff fa85 	bl	10141a8 <__ssprint_r>
 1014c9e:	2800      	cmp	r0, #0
 1014ca0:	f47f af73 	bne.w	1014b8a <_svfiprintf_r+0x8ea>
 1014ca4:	3c10      	subs	r4, #16
 1014ca6:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 1014caa:	2c10      	cmp	r4, #16
 1014cac:	dce7      	bgt.n	1014c7e <_svfiprintf_r+0x9de>
 1014cae:	3301      	adds	r3, #1
 1014cb0:	4422      	add	r2, r4
 1014cb2:	2b07      	cmp	r3, #7
 1014cb4:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 1014cb8:	e9c7 5400 	strd	r5, r4, [r7]
 1014cbc:	f77f ac95 	ble.w	10145ea <_svfiprintf_r+0x34a>
 1014cc0:	aa1a      	add	r2, sp, #104	; 0x68
 1014cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014cc4:	4658      	mov	r0, fp
 1014cc6:	f7ff fa6f 	bl	10141a8 <__ssprint_r>
 1014cca:	2800      	cmp	r0, #0
 1014ccc:	f47f af5d 	bne.w	1014b8a <_svfiprintf_r+0x8ea>
 1014cd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014cd2:	e48a      	b.n	10145ea <_svfiprintf_r+0x34a>
 1014cd4:	ab46      	add	r3, sp, #280	; 0x118
 1014cd6:	9203      	str	r2, [sp, #12]
 1014cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 1014cda:	9205      	str	r2, [sp, #20]
 1014cdc:	e418      	b.n	1014510 <_svfiprintf_r+0x270>
 1014cde:	4637      	mov	r7, r6
 1014ce0:	2d00      	cmp	r5, #0
 1014ce2:	bf08      	it	eq
 1014ce4:	2c0a      	cmpeq	r4, #10
 1014ce6:	f080 80b0 	bcs.w	1014e4a <_svfiprintf_r+0xbaa>
 1014cea:	2301      	movs	r3, #1
 1014cec:	3430      	adds	r4, #48	; 0x30
 1014cee:	9305      	str	r3, [sp, #20]
 1014cf0:	463e      	mov	r6, r7
 1014cf2:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1014cf6:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1014cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 1014cfc:	e408      	b.n	1014510 <_svfiprintf_r+0x270>
 1014cfe:	aa1a      	add	r2, sp, #104	; 0x68
 1014d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014d02:	4658      	mov	r0, fp
 1014d04:	f7ff fa50 	bl	10141a8 <__ssprint_r>
 1014d08:	2800      	cmp	r0, #0
 1014d0a:	f47f af3e 	bne.w	1014b8a <_svfiprintf_r+0x8ea>
 1014d0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1014d10:	af1f      	add	r7, sp, #124	; 0x7c
 1014d12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014d14:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014d18:	3001      	adds	r0, #1
 1014d1a:	e452      	b.n	10145c2 <_svfiprintf_r+0x322>
 1014d1c:	4637      	mov	r7, r6
 1014d1e:	e55b      	b.n	10147d8 <_svfiprintf_r+0x538>
 1014d20:	9904      	ldr	r1, [sp, #16]
 1014d22:	6812      	ldr	r2, [r2, #0]
 1014d24:	9307      	str	r3, [sp, #28]
 1014d26:	17cd      	asrs	r5, r1, #31
 1014d28:	4608      	mov	r0, r1
 1014d2a:	4629      	mov	r1, r5
 1014d2c:	e9c2 0100 	strd	r0, r1, [r2]
 1014d30:	f7ff badb 	b.w	10142ea <_svfiprintf_r+0x4a>
 1014d34:	9b07      	ldr	r3, [sp, #28]
 1014d36:	2201      	movs	r2, #1
 1014d38:	ad2d      	add	r5, sp, #180	; 0xb4
 1014d3a:	9202      	str	r2, [sp, #8]
 1014d3c:	9205      	str	r2, [sp, #20]
 1014d3e:	681b      	ldr	r3, [r3, #0]
 1014d40:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1014d44:	e492      	b.n	101466c <_svfiprintf_r+0x3cc>
 1014d46:	2140      	movs	r1, #64	; 0x40
 1014d48:	4658      	mov	r0, fp
 1014d4a:	f7f7 f8c5 	bl	100bed8 <_malloc_r>
 1014d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1014d50:	6018      	str	r0, [r3, #0]
 1014d52:	6118      	str	r0, [r3, #16]
 1014d54:	2800      	cmp	r0, #0
 1014d56:	f000 8160 	beq.w	101501a <_svfiprintf_r+0xd7a>
 1014d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1014d5c:	2340      	movs	r3, #64	; 0x40
 1014d5e:	6153      	str	r3, [r2, #20]
 1014d60:	f7ff bab2 	b.w	10142c8 <_svfiprintf_r+0x28>
 1014d64:	01056c90 	.word	0x01056c90
 1014d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014d6a:	2208      	movs	r2, #8
 1014d6c:	2100      	movs	r1, #0
 1014d6e:	a818      	add	r0, sp, #96	; 0x60
 1014d70:	9315      	str	r3, [sp, #84]	; 0x54
 1014d72:	f7f8 f8b5 	bl	100cee0 <memset>
 1014d76:	9f03      	ldr	r7, [sp, #12]
 1014d78:	1c7b      	adds	r3, r7, #1
 1014d7a:	f000 80d4 	beq.w	1014f26 <_svfiprintf_r+0xc86>
 1014d7e:	2400      	movs	r4, #0
 1014d80:	9602      	str	r6, [sp, #8]
 1014d82:	9503      	str	r5, [sp, #12]
 1014d84:	4626      	mov	r6, r4
 1014d86:	e009      	b.n	1014d9c <_svfiprintf_r+0xafc>
 1014d88:	f7fc fab8 	bl	10112fc <_wcrtomb_r>
 1014d8c:	1833      	adds	r3, r6, r0
 1014d8e:	3001      	adds	r0, #1
 1014d90:	f000 8127 	beq.w	1014fe2 <_svfiprintf_r+0xd42>
 1014d94:	42bb      	cmp	r3, r7
 1014d96:	dc0a      	bgt.n	1014dae <_svfiprintf_r+0xb0e>
 1014d98:	461e      	mov	r6, r3
 1014d9a:	d008      	beq.n	1014dae <_svfiprintf_r+0xb0e>
 1014d9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1014d9e:	ab18      	add	r3, sp, #96	; 0x60
 1014da0:	a92d      	add	r1, sp, #180	; 0xb4
 1014da2:	4658      	mov	r0, fp
 1014da4:	5915      	ldr	r5, [r2, r4]
 1014da6:	3404      	adds	r4, #4
 1014da8:	462a      	mov	r2, r5
 1014daa:	2d00      	cmp	r5, #0
 1014dac:	d1ec      	bne.n	1014d88 <_svfiprintf_r+0xae8>
 1014dae:	9605      	str	r6, [sp, #20]
 1014db0:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 1014db4:	9b05      	ldr	r3, [sp, #20]
 1014db6:	2b00      	cmp	r3, #0
 1014db8:	f000 80c3 	beq.w	1014f42 <_svfiprintf_r+0xca2>
 1014dbc:	2b63      	cmp	r3, #99	; 0x63
 1014dbe:	f300 80dc 	bgt.w	1014f7a <_svfiprintf_r+0xcda>
 1014dc2:	2300      	movs	r3, #0
 1014dc4:	9308      	str	r3, [sp, #32]
 1014dc6:	ab2d      	add	r3, sp, #180	; 0xb4
 1014dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 1014dca:	2208      	movs	r2, #8
 1014dcc:	2100      	movs	r1, #0
 1014dce:	a818      	add	r0, sp, #96	; 0x60
 1014dd0:	f7f8 f886 	bl	100cee0 <memset>
 1014dd4:	9c05      	ldr	r4, [sp, #20]
 1014dd6:	ab18      	add	r3, sp, #96	; 0x60
 1014dd8:	aa15      	add	r2, sp, #84	; 0x54
 1014dda:	9300      	str	r3, [sp, #0]
 1014ddc:	4658      	mov	r0, fp
 1014dde:	4623      	mov	r3, r4
 1014de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1014de2:	f7fc fae1 	bl	10113a8 <_wcsrtombs_r>
 1014de6:	4284      	cmp	r4, r0
 1014de8:	f040 811f 	bne.w	101502a <_svfiprintf_r+0xd8a>
 1014dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014dee:	2400      	movs	r4, #0
 1014df0:	9507      	str	r5, [sp, #28]
 1014df2:	9403      	str	r4, [sp, #12]
 1014df4:	4619      	mov	r1, r3
 1014df6:	9b05      	ldr	r3, [sp, #20]
 1014df8:	54cc      	strb	r4, [r1, r3]
 1014dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1014dfe:	9302      	str	r3, [sp, #8]
 1014e00:	f7ff bb8e 	b.w	1014520 <_svfiprintf_r+0x280>
 1014e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1014e06:	3902      	subs	r1, #2
 1014e08:	2330      	movs	r3, #48	; 0x30
 1014e0a:	463e      	mov	r6, r7
 1014e0c:	910b      	str	r1, [sp, #44]	; 0x2c
 1014e0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 1014e12:	ab46      	add	r3, sp, #280	; 0x118
 1014e14:	1a5b      	subs	r3, r3, r1
 1014e16:	9305      	str	r3, [sp, #20]
 1014e18:	f7ff bb7a 	b.w	1014510 <_svfiprintf_r+0x270>
 1014e1c:	aa1a      	add	r2, sp, #104	; 0x68
 1014e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014e20:	4658      	mov	r0, fp
 1014e22:	f7ff f9c1 	bl	10141a8 <__ssprint_r>
 1014e26:	2800      	cmp	r0, #0
 1014e28:	f47f aeaf 	bne.w	1014b8a <_svfiprintf_r+0x8ea>
 1014e2c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 1014e2e:	af1f      	add	r7, sp, #124	; 0x7c
 1014e30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 1014e32:	f10d 0874 	add.w	r8, sp, #116	; 0x74
 1014e36:	1c48      	adds	r0, r1, #1
 1014e38:	f7ff bbbd 	b.w	10145b6 <_svfiprintf_r+0x316>
 1014e3c:	9a07      	ldr	r2, [sp, #28]
 1014e3e:	6812      	ldr	r2, [r2, #0]
 1014e40:	9307      	str	r3, [sp, #28]
 1014e42:	9b04      	ldr	r3, [sp, #16]
 1014e44:	6013      	str	r3, [r2, #0]
 1014e46:	f7ff ba50 	b.w	10142ea <_svfiprintf_r+0x4a>
 1014e4a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 1014e4e:	2200      	movs	r2, #0
 1014e50:	9702      	str	r7, [sp, #8]
 1014e52:	ae46      	add	r6, sp, #280	; 0x118
 1014e54:	f8cd a020 	str.w	sl, [sp, #32]
 1014e58:	4617      	mov	r7, r2
 1014e5a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 1014e5e:	4699      	mov	r9, r3
 1014e60:	f8cd 8014 	str.w	r8, [sp, #20]
 1014e64:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 1014e68:	e008      	b.n	1014e7c <_svfiprintf_r+0xbdc>
 1014e6a:	f7f6 f97d 	bl	100b168 <__aeabi_uldivmod>
 1014e6e:	2d00      	cmp	r5, #0
 1014e70:	bf08      	it	eq
 1014e72:	2c0a      	cmpeq	r4, #10
 1014e74:	d328      	bcc.n	1014ec8 <_svfiprintf_r+0xc28>
 1014e76:	4604      	mov	r4, r0
 1014e78:	4646      	mov	r6, r8
 1014e7a:	460d      	mov	r5, r1
 1014e7c:	220a      	movs	r2, #10
 1014e7e:	2300      	movs	r3, #0
 1014e80:	4620      	mov	r0, r4
 1014e82:	4629      	mov	r1, r5
 1014e84:	f7f6 f970 	bl	100b168 <__aeabi_uldivmod>
 1014e88:	3701      	adds	r7, #1
 1014e8a:	4620      	mov	r0, r4
 1014e8c:	4629      	mov	r1, r5
 1014e8e:	f106 38ff 	add.w	r8, r6, #4294967295
 1014e92:	2300      	movs	r3, #0
 1014e94:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1014e98:	220a      	movs	r2, #10
 1014e9a:	f806 cc01 	strb.w	ip, [r6, #-1]
 1014e9e:	f1b9 0f00 	cmp.w	r9, #0
 1014ea2:	d0e2      	beq.n	1014e6a <_svfiprintf_r+0xbca>
 1014ea4:	f89a 6000 	ldrb.w	r6, [sl]
 1014ea8:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1014eac:	bf18      	it	ne
 1014eae:	f04f 0c01 	movne.w	ip, #1
 1014eb2:	42be      	cmp	r6, r7
 1014eb4:	bf18      	it	ne
 1014eb6:	f04f 0c00 	movne.w	ip, #0
 1014eba:	f1bc 0f00 	cmp.w	ip, #0
 1014ebe:	d0d4      	beq.n	1014e6a <_svfiprintf_r+0xbca>
 1014ec0:	429d      	cmp	r5, r3
 1014ec2:	bf08      	it	eq
 1014ec4:	4294      	cmpeq	r4, r2
 1014ec6:	d275      	bcs.n	1014fb4 <_svfiprintf_r+0xd14>
 1014ec8:	4642      	mov	r2, r8
 1014eca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 1014ece:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 1014ed2:	9f02      	ldr	r7, [sp, #8]
 1014ed4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 1014ed8:	f8dd a020 	ldr.w	sl, [sp, #32]
 1014edc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 1014ee0:	e5c3      	b.n	1014a6a <_svfiprintf_r+0x7ca>
 1014ee2:	9b03      	ldr	r3, [sp, #12]
 1014ee4:	f249 72a8 	movw	r2, #38824	; 0x97a8
 1014ee8:	9507      	str	r5, [sp, #28]
 1014eea:	f2c0 1205 	movt	r2, #261	; 0x105
 1014eee:	2b06      	cmp	r3, #6
 1014ef0:	920b      	str	r2, [sp, #44]	; 0x2c
 1014ef2:	bf28      	it	cs
 1014ef4:	2306      	movcs	r3, #6
 1014ef6:	9305      	str	r3, [sp, #20]
 1014ef8:	9302      	str	r3, [sp, #8]
 1014efa:	e55b      	b.n	10149b4 <_svfiprintf_r+0x714>
 1014efc:	05b5      	lsls	r5, r6, #22
 1014efe:	bf45      	ittet	mi
 1014f00:	9207      	strmi	r2, [sp, #28]
 1014f02:	b2e4      	uxtbmi	r4, r4
 1014f04:	9207      	strpl	r2, [sp, #28]
 1014f06:	4633      	movmi	r3, r6
 1014f08:	bf4e      	itee	mi
 1014f0a:	2500      	movmi	r5, #0
 1014f0c:	2500      	movpl	r5, #0
 1014f0e:	4633      	movpl	r3, r6
 1014f10:	e58d      	b.n	1014a2e <_svfiprintf_r+0x78e>
 1014f12:	05b5      	lsls	r5, r6, #22
 1014f14:	f04f 0301 	mov.w	r3, #1
 1014f18:	bf48      	it	mi
 1014f1a:	b2e4      	uxtbmi	r4, r4
 1014f1c:	2500      	movs	r5, #0
 1014f1e:	f7ff bad2 	b.w	10144c6 <_svfiprintf_r+0x226>
 1014f22:	463b      	mov	r3, r7
 1014f24:	e611      	b.n	1014b4a <_svfiprintf_r+0x8aa>
 1014f26:	2300      	movs	r3, #0
 1014f28:	aa18      	add	r2, sp, #96	; 0x60
 1014f2a:	4619      	mov	r1, r3
 1014f2c:	9200      	str	r2, [sp, #0]
 1014f2e:	4658      	mov	r0, fp
 1014f30:	aa15      	add	r2, sp, #84	; 0x54
 1014f32:	f7fc fa39 	bl	10113a8 <_wcsrtombs_r>
 1014f36:	1c43      	adds	r3, r0, #1
 1014f38:	9005      	str	r0, [sp, #20]
 1014f3a:	d052      	beq.n	1014fe2 <_svfiprintf_r+0xd42>
 1014f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014f3e:	9315      	str	r3, [sp, #84]	; 0x54
 1014f40:	e738      	b.n	1014db4 <_svfiprintf_r+0xb14>
 1014f42:	9b05      	ldr	r3, [sp, #20]
 1014f44:	9507      	str	r5, [sp, #28]
 1014f46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 1014f4a:	9308      	str	r3, [sp, #32]
 1014f4c:	f7ff bae8 	b.w	1014520 <_svfiprintf_r+0x280>
 1014f50:	9a07      	ldr	r2, [sp, #28]
 1014f52:	9307      	str	r3, [sp, #28]
 1014f54:	9b04      	ldr	r3, [sp, #16]
 1014f56:	6812      	ldr	r2, [r2, #0]
 1014f58:	8013      	strh	r3, [r2, #0]
 1014f5a:	f7ff b9c6 	b.w	10142ea <_svfiprintf_r+0x4a>
 1014f5e:	681c      	ldr	r4, [r3, #0]
 1014f60:	4637      	mov	r7, r6
 1014f62:	9207      	str	r2, [sp, #28]
 1014f64:	17e5      	asrs	r5, r4, #31
 1014f66:	4622      	mov	r2, r4
 1014f68:	462b      	mov	r3, r5
 1014f6a:	e532      	b.n	10149d2 <_svfiprintf_r+0x732>
 1014f6c:	4658      	mov	r0, fp
 1014f6e:	aa1a      	add	r2, sp, #104	; 0x68
 1014f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 1014f72:	f7ff f919 	bl	10141a8 <__ssprint_r>
 1014f76:	f7ff ba73 	b.w	1014460 <_svfiprintf_r+0x1c0>
 1014f7a:	1c59      	adds	r1, r3, #1
 1014f7c:	4658      	mov	r0, fp
 1014f7e:	f7f6 ffab 	bl	100bed8 <_malloc_r>
 1014f82:	900b      	str	r0, [sp, #44]	; 0x2c
 1014f84:	b368      	cbz	r0, 1014fe2 <_svfiprintf_r+0xd42>
 1014f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1014f88:	9308      	str	r3, [sp, #32]
 1014f8a:	e71e      	b.n	1014dca <_svfiprintf_r+0xb2a>
 1014f8c:	9b03      	ldr	r3, [sp, #12]
 1014f8e:	9507      	str	r5, [sp, #28]
 1014f90:	9302      	str	r3, [sp, #8]
 1014f92:	9305      	str	r3, [sp, #20]
 1014f94:	9b08      	ldr	r3, [sp, #32]
 1014f96:	9303      	str	r3, [sp, #12]
 1014f98:	f7ff bac2 	b.w	1014520 <_svfiprintf_r+0x280>
 1014f9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1014f9e:	9403      	str	r4, [sp, #12]
 1014fa0:	f7f8 fbae 	bl	100d700 <strlen>
 1014fa4:	9507      	str	r5, [sp, #28]
 1014fa6:	9408      	str	r4, [sp, #32]
 1014fa8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1014fac:	9005      	str	r0, [sp, #20]
 1014fae:	9302      	str	r3, [sp, #8]
 1014fb0:	f7ff bab6 	b.w	1014520 <_svfiprintf_r+0x280>
 1014fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 1014fb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 1014fb8:	eba8 0802 	sub.w	r8, r8, r2
 1014fbc:	4640      	mov	r0, r8
 1014fbe:	f7f8 fc8d 	bl	100d8dc <strncpy>
 1014fc2:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1014fc6:	b10b      	cbz	r3, 1014fcc <_svfiprintf_r+0xd2c>
 1014fc8:	f10a 0a01 	add.w	sl, sl, #1
 1014fcc:	4620      	mov	r0, r4
 1014fce:	4629      	mov	r1, r5
 1014fd0:	220a      	movs	r2, #10
 1014fd2:	2300      	movs	r3, #0
 1014fd4:	f7f6 f8c8 	bl	100b168 <__aeabi_uldivmod>
 1014fd8:	2700      	movs	r7, #0
 1014fda:	e74c      	b.n	1014e76 <_svfiprintf_r+0xbd6>
 1014fdc:	463b      	mov	r3, r7
 1014fde:	4601      	mov	r1, r0
 1014fe0:	e577      	b.n	1014ad2 <_svfiprintf_r+0x832>
 1014fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 1014fe4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1014fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1014fec:	8193      	strh	r3, [r2, #12]
 1014fee:	f7ff ba3a 	b.w	1014466 <_svfiprintf_r+0x1c6>
 1014ff2:	9a07      	ldr	r2, [sp, #28]
 1014ff4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1014ff8:	468a      	mov	sl, r1
 1014ffa:	f852 0b04 	ldr.w	r0, [r2], #4
 1014ffe:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 1015002:	9207      	str	r2, [sp, #28]
 1015004:	9103      	str	r1, [sp, #12]
 1015006:	f7ff b99f 	b.w	1014348 <_svfiprintf_r+0xa8>
 101500a:	4637      	mov	r7, r6
 101500c:	f7ff bbcc 	b.w	10147a8 <_svfiprintf_r+0x508>
 1015010:	4633      	mov	r3, r6
 1015012:	f7ff bbbd 	b.w	1014790 <_svfiprintf_r+0x4f0>
 1015016:	4637      	mov	r7, r6
 1015018:	e462      	b.n	10148e0 <_svfiprintf_r+0x640>
 101501a:	230c      	movs	r3, #12
 101501c:	f04f 32ff 	mov.w	r2, #4294967295
 1015020:	f8cb 3000 	str.w	r3, [fp]
 1015024:	9204      	str	r2, [sp, #16]
 1015026:	f7ff ba25 	b.w	1014474 <_svfiprintf_r+0x1d4>
 101502a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 101502c:	8993      	ldrh	r3, [r2, #12]
 101502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1015032:	8193      	strh	r3, [r2, #12]
 1015034:	e5a9      	b.n	1014b8a <_svfiprintf_r+0x8ea>
 1015036:	bf00      	nop

01015038 <__sprint_r.part.0>:
 1015038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101503c:	4693      	mov	fp, r2
 101503e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 1015040:	049c      	lsls	r4, r3, #18
 1015042:	d52c      	bpl.n	101509e <__sprint_r.part.0+0x66>
 1015044:	6893      	ldr	r3, [r2, #8]
 1015046:	460e      	mov	r6, r1
 1015048:	6812      	ldr	r2, [r2, #0]
 101504a:	4607      	mov	r7, r0
 101504c:	f102 0908 	add.w	r9, r2, #8
 1015050:	b31b      	cbz	r3, 101509a <__sprint_r.part.0+0x62>
 1015052:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 1015056:	ea5f 089a 	movs.w	r8, sl, lsr #2
 101505a:	d014      	beq.n	1015086 <__sprint_r.part.0+0x4e>
 101505c:	3d04      	subs	r5, #4
 101505e:	2400      	movs	r4, #0
 1015060:	e001      	b.n	1015066 <__sprint_r.part.0+0x2e>
 1015062:	45a0      	cmp	r8, r4
 1015064:	d00d      	beq.n	1015082 <__sprint_r.part.0+0x4a>
 1015066:	4632      	mov	r2, r6
 1015068:	f855 1f04 	ldr.w	r1, [r5, #4]!
 101506c:	4638      	mov	r0, r7
 101506e:	3401      	adds	r4, #1
 1015070:	f001 f9da 	bl	1016428 <_fputwc_r>
 1015074:	1c43      	adds	r3, r0, #1
 1015076:	d1f4      	bne.n	1015062 <__sprint_r.part.0+0x2a>
 1015078:	2300      	movs	r3, #0
 101507a:	e9cb 3301 	strd	r3, r3, [fp, #4]
 101507e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1015082:	f8db 3008 	ldr.w	r3, [fp, #8]
 1015086:	f02a 0a03 	bic.w	sl, sl, #3
 101508a:	f109 0908 	add.w	r9, r9, #8
 101508e:	eba3 030a 	sub.w	r3, r3, sl
 1015092:	f8cb 3008 	str.w	r3, [fp, #8]
 1015096:	2b00      	cmp	r3, #0
 1015098:	d1db      	bne.n	1015052 <__sprint_r.part.0+0x1a>
 101509a:	2000      	movs	r0, #0
 101509c:	e7ec      	b.n	1015078 <__sprint_r.part.0+0x40>
 101509e:	f7fd fde7 	bl	1012c70 <__sfvwrite_r>
 10150a2:	2300      	movs	r3, #0
 10150a4:	e9cb 3301 	strd	r3, r3, [fp, #4]
 10150a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

010150ac <__sprint_r>:
 10150ac:	6893      	ldr	r3, [r2, #8]
 10150ae:	b103      	cbz	r3, 10150b2 <__sprint_r+0x6>
 10150b0:	e7c2      	b.n	1015038 <__sprint_r.part.0>
 10150b2:	b410      	push	{r4}
 10150b4:	4618      	mov	r0, r3
 10150b6:	6053      	str	r3, [r2, #4]
 10150b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 10150bc:	4770      	bx	lr
 10150be:	bf00      	nop

010150c0 <_vfiprintf_r>:
 10150c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10150c4:	b0c7      	sub	sp, #284	; 0x11c
 10150c6:	4683      	mov	fp, r0
 10150c8:	4615      	mov	r5, r2
 10150ca:	9106      	str	r1, [sp, #24]
 10150cc:	a816      	add	r0, sp, #88	; 0x58
 10150ce:	2208      	movs	r2, #8
 10150d0:	2100      	movs	r1, #0
 10150d2:	461c      	mov	r4, r3
 10150d4:	9307      	str	r3, [sp, #28]
 10150d6:	f7f7 ff03 	bl	100cee0 <memset>
 10150da:	f1bb 0f00 	cmp.w	fp, #0
 10150de:	d004      	beq.n	10150ea <_vfiprintf_r+0x2a>
 10150e0:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 10150e4:	2b00      	cmp	r3, #0
 10150e6:	f000 83ac 	beq.w	1015842 <_vfiprintf_r+0x782>
 10150ea:	9906      	ldr	r1, [sp, #24]
 10150ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 10150f0:	b293      	uxth	r3, r2
 10150f2:	049e      	lsls	r6, r3, #18
 10150f4:	d407      	bmi.n	1015106 <_vfiprintf_r+0x46>
 10150f6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 10150fa:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 10150fc:	818b      	strh	r3, [r1, #12]
 10150fe:	b29b      	uxth	r3, r3
 1015100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 1015104:	664a      	str	r2, [r1, #100]	; 0x64
 1015106:	0718      	lsls	r0, r3, #28
 1015108:	f140 80af 	bpl.w	101526a <_vfiprintf_r+0x1aa>
 101510c:	9a06      	ldr	r2, [sp, #24]
 101510e:	6912      	ldr	r2, [r2, #16]
 1015110:	2a00      	cmp	r2, #0
 1015112:	f000 80aa 	beq.w	101526a <_vfiprintf_r+0x1aa>
 1015116:	f003 031a 	and.w	r3, r3, #26
 101511a:	2b0a      	cmp	r3, #10
 101511c:	f000 80b3 	beq.w	1015286 <_vfiprintf_r+0x1c6>
 1015120:	2300      	movs	r3, #0
 1015122:	930c      	str	r3, [sp, #48]	; 0x30
 1015124:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 1015128:	f649 4830 	movw	r8, #39984	; 0x9c30
 101512c:	930d      	str	r3, [sp, #52]	; 0x34
 101512e:	f2c0 1805 	movt	r8, #261	; 0x105
 1015132:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 1015136:	462f      	mov	r7, r5
 1015138:	9303      	str	r3, [sp, #12]
 101513a:	ab1d      	add	r3, sp, #116	; 0x74
 101513c:	931a      	str	r3, [sp, #104]	; 0x68
 101513e:	4699      	mov	r9, r3
 1015140:	f24a 0660 	movw	r6, #41056	; 0xa060
 1015144:	f2c0 1605 	movt	r6, #261	; 0x105
 1015148:	463c      	mov	r4, r7
 101514a:	f8d8 3000 	ldr.w	r3, [r8]
 101514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 1015150:	2b00      	cmp	r3, #0
 1015152:	bf08      	it	eq
 1015154:	4633      	moveq	r3, r6
 1015156:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
 101515a:	f7f6 fdfb 	bl	100bd54 <__locale_mb_cur_max>
 101515e:	ab16      	add	r3, sp, #88	; 0x58
 1015160:	4622      	mov	r2, r4
 1015162:	9300      	str	r3, [sp, #0]
 1015164:	a914      	add	r1, sp, #80	; 0x50
 1015166:	4603      	mov	r3, r0
 1015168:	4658      	mov	r0, fp
 101516a:	47a8      	blx	r5
 101516c:	2800      	cmp	r0, #0
 101516e:	4603      	mov	r3, r0
 1015170:	f000 809f 	beq.w	10152b2 <_vfiprintf_r+0x1f2>
 1015174:	f2c0 8095 	blt.w	10152a2 <_vfiprintf_r+0x1e2>
 1015178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 101517a:	2a25      	cmp	r2, #37	; 0x25
 101517c:	d001      	beq.n	1015182 <_vfiprintf_r+0xc2>
 101517e:	441c      	add	r4, r3
 1015180:	e7e3      	b.n	101514a <_vfiprintf_r+0x8a>
 1015182:	1be6      	subs	r6, r4, r7
 1015184:	4605      	mov	r5, r0
 1015186:	f040 8097 	bne.w	10152b8 <_vfiprintf_r+0x1f8>
 101518a:	2300      	movs	r3, #0
 101518c:	9305      	str	r3, [sp, #20]
 101518e:	461e      	mov	r6, r3
 1015190:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1015194:	7863      	ldrb	r3, [r4, #1]
 1015196:	1c67      	adds	r7, r4, #1
 1015198:	f04f 3aff 	mov.w	sl, #4294967295
 101519c:	3701      	adds	r7, #1
 101519e:	f1a3 0220 	sub.w	r2, r3, #32
 10151a2:	2a5a      	cmp	r2, #90	; 0x5a
 10151a4:	f200 8351 	bhi.w	101584a <_vfiprintf_r+0x78a>
 10151a8:	e8df f012 	tbh	[pc, r2, lsl #1]
 10151ac:	034f01bb 	.word	0x034f01bb
 10151b0:	0207034f 	.word	0x0207034f
 10151b4:	034f034f 	.word	0x034f034f
 10151b8:	01ea034f 	.word	0x01ea034f
 10151bc:	034f034f 	.word	0x034f034f
 10151c0:	01d701dc 	.word	0x01d701dc
 10151c4:	0223034f 	.word	0x0223034f
 10151c8:	034f020b 	.word	0x034f020b
 10151cc:	019a0227 	.word	0x019a0227
 10151d0:	019a019a 	.word	0x019a019a
 10151d4:	019a019a 	.word	0x019a019a
 10151d8:	019a019a 	.word	0x019a019a
 10151dc:	019a019a 	.word	0x019a019a
 10151e0:	034f034f 	.word	0x034f034f
 10151e4:	034f034f 	.word	0x034f034f
 10151e8:	034f034f 	.word	0x034f034f
 10151ec:	034f034f 	.word	0x034f034f
 10151f0:	02ee034f 	.word	0x02ee034f
 10151f4:	034f02e0 	.word	0x034f02e0
 10151f8:	034f034f 	.word	0x034f034f
 10151fc:	034f034f 	.word	0x034f034f
 1015200:	034f034f 	.word	0x034f034f
 1015204:	034f034f 	.word	0x034f034f
 1015208:	0311034f 	.word	0x0311034f
 101520c:	034f034f 	.word	0x034f034f
 1015210:	02b8034f 	.word	0x02b8034f
 1015214:	02aa034f 	.word	0x02aa034f
 1015218:	034f034f 	.word	0x034f034f
 101521c:	034f027e 	.word	0x034f027e
 1015220:	034f034f 	.word	0x034f034f
 1015224:	034f034f 	.word	0x034f034f
 1015228:	034f034f 	.word	0x034f034f
 101522c:	034f034f 	.word	0x034f034f
 1015230:	02ee034f 	.word	0x02ee034f
 1015234:	034f0235 	.word	0x034f0235
 1015238:	034f034f 	.word	0x034f034f
 101523c:	0235022b 	.word	0x0235022b
 1015240:	034f005b 	.word	0x034f005b
 1015244:	034f0341 	.word	0x034f0341
 1015248:	0331031c 	.word	0x0331031c
 101524c:	005b01a8 	.word	0x005b01a8
 1015250:	02b8034f 	.word	0x02b8034f
 1015254:	01c5005d 	.word	0x01c5005d
 1015258:	034f034f 	.word	0x034f034f
 101525c:	034f00b2 	.word	0x034f00b2
 1015260:	005d      	.short	0x005d
 1015262:	f046 0620 	orr.w	r6, r6, #32
 1015266:	783b      	ldrb	r3, [r7, #0]
 1015268:	e798      	b.n	101519c <_vfiprintf_r+0xdc>
 101526a:	9906      	ldr	r1, [sp, #24]
 101526c:	4658      	mov	r0, fp
 101526e:	f7fc f9cf 	bl	1011610 <__swsetup_r>
 1015272:	2800      	cmp	r0, #0
 1015274:	f040 86c4 	bne.w	1016000 <_vfiprintf_r+0xf40>
 1015278:	9b06      	ldr	r3, [sp, #24]
 101527a:	899b      	ldrh	r3, [r3, #12]
 101527c:	f003 031a 	and.w	r3, r3, #26
 1015280:	2b0a      	cmp	r3, #10
 1015282:	f47f af4d 	bne.w	1015120 <_vfiprintf_r+0x60>
 1015286:	9b06      	ldr	r3, [sp, #24]
 1015288:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 101528c:	2b00      	cmp	r3, #0
 101528e:	f6ff af47 	blt.w	1015120 <_vfiprintf_r+0x60>
 1015292:	4623      	mov	r3, r4
 1015294:	462a      	mov	r2, r5
 1015296:	9906      	ldr	r1, [sp, #24]
 1015298:	4658      	mov	r0, fp
 101529a:	f000 fedd 	bl	1016058 <__sbprintf>
 101529e:	9003      	str	r0, [sp, #12]
 10152a0:	e02f      	b.n	1015302 <_vfiprintf_r+0x242>
 10152a2:	2208      	movs	r2, #8
 10152a4:	2100      	movs	r1, #0
 10152a6:	a816      	add	r0, sp, #88	; 0x58
 10152a8:	f7f7 fe1a 	bl	100cee0 <memset>
 10152ac:	2301      	movs	r3, #1
 10152ae:	441c      	add	r4, r3
 10152b0:	e74b      	b.n	101514a <_vfiprintf_r+0x8a>
 10152b2:	1be6      	subs	r6, r4, r7
 10152b4:	4605      	mov	r5, r0
 10152b6:	d01a      	beq.n	10152ee <_vfiprintf_r+0x22e>
 10152b8:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 10152bc:	e9c9 7600 	strd	r7, r6, [r9]
 10152c0:	3301      	adds	r3, #1
 10152c2:	4432      	add	r2, r6
 10152c4:	2b07      	cmp	r3, #7
 10152c6:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
 10152ca:	dd1e      	ble.n	101530a <_vfiprintf_r+0x24a>
 10152cc:	2a00      	cmp	r2, #0
 10152ce:	f000 84ce 	beq.w	1015c6e <_vfiprintf_r+0xbae>
 10152d2:	aa1a      	add	r2, sp, #104	; 0x68
 10152d4:	9906      	ldr	r1, [sp, #24]
 10152d6:	4658      	mov	r0, fp
 10152d8:	f7ff feae 	bl	1015038 <__sprint_r.part.0>
 10152dc:	b958      	cbnz	r0, 10152f6 <_vfiprintf_r+0x236>
 10152de:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10152e2:	9b03      	ldr	r3, [sp, #12]
 10152e4:	4433      	add	r3, r6
 10152e6:	9303      	str	r3, [sp, #12]
 10152e8:	2d00      	cmp	r5, #0
 10152ea:	f47f af4e 	bne.w	101518a <_vfiprintf_r+0xca>
 10152ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 10152f0:	2b00      	cmp	r3, #0
 10152f2:	f040 8633 	bne.w	1015f5c <_vfiprintf_r+0xe9c>
 10152f6:	9b06      	ldr	r3, [sp, #24]
 10152f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 10152fc:	065b      	lsls	r3, r3, #25
 10152fe:	f100 867f 	bmi.w	1016000 <_vfiprintf_r+0xf40>
 1015302:	9803      	ldr	r0, [sp, #12]
 1015304:	b047      	add	sp, #284	; 0x11c
 1015306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101530a:	f109 0908 	add.w	r9, r9, #8
 101530e:	e7e8      	b.n	10152e2 <_vfiprintf_r+0x222>
 1015310:	06b1      	lsls	r1, r6, #26
 1015312:	f249 7294 	movw	r2, #38804	; 0x9794
 1015316:	f2c0 1205 	movt	r2, #261	; 0x105
 101531a:	920c      	str	r2, [sp, #48]	; 0x30
 101531c:	f140 81cc 	bpl.w	10156b8 <_vfiprintf_r+0x5f8>
 1015320:	9d07      	ldr	r5, [sp, #28]
 1015322:	3507      	adds	r5, #7
 1015324:	f025 0207 	bic.w	r2, r5, #7
 1015328:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 101532c:	9207      	str	r2, [sp, #28]
 101532e:	ea54 0205 	orrs.w	r2, r4, r5
 1015332:	f006 0201 	and.w	r2, r6, #1
 1015336:	bf08      	it	eq
 1015338:	2200      	moveq	r2, #0
 101533a:	2a00      	cmp	r2, #0
 101533c:	f040 81d8 	bne.w	10156f0 <_vfiprintf_r+0x630>
 1015340:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
 1015344:	9302      	str	r3, [sp, #8]
 1015346:	2302      	movs	r3, #2
 1015348:	f1ba 3fff 	cmp.w	sl, #4294967295
 101534c:	f04f 0200 	mov.w	r2, #0
 1015350:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1015354:	f000 818a 	beq.w	101566c <_vfiprintf_r+0x5ac>
 1015358:	ea54 0205 	orrs.w	r2, r4, r5
 101535c:	9a02      	ldr	r2, [sp, #8]
 101535e:	f022 0680 	bic.w	r6, r2, #128	; 0x80
 1015362:	bf14      	ite	ne
 1015364:	2201      	movne	r2, #1
 1015366:	2200      	moveq	r2, #0
 1015368:	f1ba 0f00 	cmp.w	sl, #0
 101536c:	bf18      	it	ne
 101536e:	2201      	movne	r2, #1
 1015370:	2a00      	cmp	r2, #0
 1015372:	f040 84ac 	bne.w	1015cce <_vfiprintf_r+0xc0e>
 1015376:	2b00      	cmp	r3, #0
 1015378:	f040 845e 	bne.w	1015c38 <_vfiprintf_r+0xb78>
 101537c:	9a02      	ldr	r2, [sp, #8]
 101537e:	469a      	mov	sl, r3
 1015380:	f012 0201 	ands.w	r2, r2, #1
 1015384:	9204      	str	r2, [sp, #16]
 1015386:	bf04      	itt	eq
 1015388:	ab46      	addeq	r3, sp, #280	; 0x118
 101538a:	930b      	streq	r3, [sp, #44]	; 0x2c
 101538c:	d005      	beq.n	101539a <_vfiprintf_r+0x2da>
 101538e:	2330      	movs	r3, #48	; 0x30
 1015390:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
 1015394:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1015398:	930b      	str	r3, [sp, #44]	; 0x2c
 101539a:	9b04      	ldr	r3, [sp, #16]
 101539c:	4553      	cmp	r3, sl
 101539e:	bfb8      	it	lt
 10153a0:	4653      	movlt	r3, sl
 10153a2:	9302      	str	r3, [sp, #8]
 10153a4:	2300      	movs	r3, #0
 10153a6:	9308      	str	r3, [sp, #32]
 10153a8:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 10153ac:	b113      	cbz	r3, 10153b4 <_vfiprintf_r+0x2f4>
 10153ae:	9b02      	ldr	r3, [sp, #8]
 10153b0:	3301      	adds	r3, #1
 10153b2:	9302      	str	r3, [sp, #8]
 10153b4:	f016 0302 	ands.w	r3, r6, #2
 10153b8:	9309      	str	r3, [sp, #36]	; 0x24
 10153ba:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	; 0x6c
 10153be:	bf18      	it	ne
 10153c0:	9b02      	ldrne	r3, [sp, #8]
 10153c2:	f102 0101 	add.w	r1, r2, #1
 10153c6:	bf1c      	itt	ne
 10153c8:	3302      	addne	r3, #2
 10153ca:	9302      	strne	r3, [sp, #8]
 10153cc:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 10153d0:	4608      	mov	r0, r1
 10153d2:	930a      	str	r3, [sp, #40]	; 0x28
 10153d4:	d105      	bne.n	10153e2 <_vfiprintf_r+0x322>
 10153d6:	9b05      	ldr	r3, [sp, #20]
 10153d8:	9c02      	ldr	r4, [sp, #8]
 10153da:	1b1c      	subs	r4, r3, r4
 10153dc:	2c00      	cmp	r4, #0
 10153de:	f300 8381 	bgt.w	1015ae4 <_vfiprintf_r+0xa24>
 10153e2:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
 10153e6:	f109 0108 	add.w	r1, r9, #8
 10153ea:	b194      	cbz	r4, 1015412 <_vfiprintf_r+0x352>
 10153ec:	2807      	cmp	r0, #7
 10153ee:	f10d 024b 	add.w	r2, sp, #75	; 0x4b
 10153f2:	f10c 0c01 	add.w	ip, ip, #1
 10153f6:	f8c9 2000 	str.w	r2, [r9]
 10153fa:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 10153fe:	f04f 0201 	mov.w	r2, #1
 1015402:	f8c9 2004 	str.w	r2, [r9, #4]
 1015406:	f300 834b 	bgt.w	1015aa0 <_vfiprintf_r+0x9e0>
 101540a:	4602      	mov	r2, r0
 101540c:	4689      	mov	r9, r1
 101540e:	3001      	adds	r0, #1
 1015410:	3108      	adds	r1, #8
 1015412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1015414:	b303      	cbz	r3, 1015458 <_vfiprintf_r+0x398>
 1015416:	2807      	cmp	r0, #7
 1015418:	ab13      	add	r3, sp, #76	; 0x4c
 101541a:	f10c 0c02 	add.w	ip, ip, #2
 101541e:	f8c9 3000 	str.w	r3, [r9]
 1015422:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	; 0x6c
 1015426:	f04f 0302 	mov.w	r3, #2
 101542a:	f8c9 3004 	str.w	r3, [r9, #4]
 101542e:	f340 8354 	ble.w	1015ada <_vfiprintf_r+0xa1a>
 1015432:	f1bc 0f00 	cmp.w	ip, #0
 1015436:	f000 8430 	beq.w	1015c9a <_vfiprintf_r+0xbda>
 101543a:	aa1a      	add	r2, sp, #104	; 0x68
 101543c:	9906      	ldr	r1, [sp, #24]
 101543e:	4658      	mov	r0, fp
 1015440:	f7ff fdfa 	bl	1015038 <__sprint_r.part.0>
 1015444:	2800      	cmp	r0, #0
 1015446:	f040 8322 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 101544a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 101544c:	a91f      	add	r1, sp, #124	; 0x7c
 101544e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1015452:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015456:	1c50      	adds	r0, r2, #1
 1015458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 101545a:	2b80      	cmp	r3, #128	; 0x80
 101545c:	f000 8266 	beq.w	101592c <_vfiprintf_r+0x86c>
 1015460:	9b04      	ldr	r3, [sp, #16]
 1015462:	ebaa 0403 	sub.w	r4, sl, r3
 1015466:	2c00      	cmp	r4, #0
 1015468:	f300 82c2 	bgt.w	10159f0 <_vfiprintf_r+0x930>
 101546c:	9a04      	ldr	r2, [sp, #16]
 101546e:	2807      	cmp	r0, #7
 1015470:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 1015472:	901b      	str	r0, [sp, #108]	; 0x6c
 1015474:	4613      	mov	r3, r2
 1015476:	f8c9 2004 	str.w	r2, [r9, #4]
 101547a:	4463      	add	r3, ip
 101547c:	f8c9 4000 	str.w	r4, [r9]
 1015480:	931c      	str	r3, [sp, #112]	; 0x70
 1015482:	dd0c      	ble.n	101549e <_vfiprintf_r+0x3de>
 1015484:	2b00      	cmp	r3, #0
 1015486:	f000 837b 	beq.w	1015b80 <_vfiprintf_r+0xac0>
 101548a:	aa1a      	add	r2, sp, #104	; 0x68
 101548c:	9906      	ldr	r1, [sp, #24]
 101548e:	4658      	mov	r0, fp
 1015490:	f7ff fdd2 	bl	1015038 <__sprint_r.part.0>
 1015494:	2800      	cmp	r0, #0
 1015496:	f040 82fa 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 101549a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 101549c:	a91d      	add	r1, sp, #116	; 0x74
 101549e:	0772      	lsls	r2, r6, #29
 10154a0:	d505      	bpl.n	10154ae <_vfiprintf_r+0x3ee>
 10154a2:	9a05      	ldr	r2, [sp, #20]
 10154a4:	9802      	ldr	r0, [sp, #8]
 10154a6:	1a14      	subs	r4, r2, r0
 10154a8:	2c00      	cmp	r4, #0
 10154aa:	f300 8372 	bgt.w	1015b92 <_vfiprintf_r+0xad2>
 10154ae:	9a03      	ldr	r2, [sp, #12]
 10154b0:	9905      	ldr	r1, [sp, #20]
 10154b2:	9802      	ldr	r0, [sp, #8]
 10154b4:	4281      	cmp	r1, r0
 10154b6:	bfac      	ite	ge
 10154b8:	1852      	addge	r2, r2, r1
 10154ba:	1812      	addlt	r2, r2, r0
 10154bc:	9203      	str	r2, [sp, #12]
 10154be:	2b00      	cmp	r3, #0
 10154c0:	f040 82dd 	bne.w	1015a7e <_vfiprintf_r+0x9be>
 10154c4:	9908      	ldr	r1, [sp, #32]
 10154c6:	2300      	movs	r3, #0
 10154c8:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10154cc:	931b      	str	r3, [sp, #108]	; 0x6c
 10154ce:	2900      	cmp	r1, #0
 10154d0:	f43f ae36 	beq.w	1015140 <_vfiprintf_r+0x80>
 10154d4:	4658      	mov	r0, fp
 10154d6:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10154da:	f7fd fad1 	bl	1012a80 <_free_r>
 10154de:	e62f      	b.n	1015140 <_vfiprintf_r+0x80>
 10154e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10154e4:	2100      	movs	r1, #0
 10154e6:	f817 3b01 	ldrb.w	r3, [r7], #1
 10154ea:	200a      	movs	r0, #10
 10154ec:	fb00 2101 	mla	r1, r0, r1, r2
 10154f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10154f4:	2a09      	cmp	r2, #9
 10154f6:	d9f6      	bls.n	10154e6 <_vfiprintf_r+0x426>
 10154f8:	9105      	str	r1, [sp, #20]
 10154fa:	e650      	b.n	101519e <_vfiprintf_r+0xde>
 10154fc:	9b07      	ldr	r3, [sp, #28]
 10154fe:	f046 0202 	orr.w	r2, r6, #2
 1015502:	f249 7194 	movw	r1, #38804	; 0x9794
 1015506:	9202      	str	r2, [sp, #8]
 1015508:	f2c0 1105 	movt	r1, #261	; 0x105
 101550c:	f647 0230 	movw	r2, #30768	; 0x7830
 1015510:	f853 4b04 	ldr.w	r4, [r3], #4
 1015514:	2500      	movs	r5, #0
 1015516:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 101551a:	910c      	str	r1, [sp, #48]	; 0x30
 101551c:	9307      	str	r3, [sp, #28]
 101551e:	2302      	movs	r3, #2
 1015520:	e712      	b.n	1015348 <_vfiprintf_r+0x288>
 1015522:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1015526:	783b      	ldrb	r3, [r7, #0]
 1015528:	2a00      	cmp	r2, #0
 101552a:	f47f ae37 	bne.w	101519c <_vfiprintf_r+0xdc>
 101552e:	2220      	movs	r2, #32
 1015530:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1015534:	e632      	b.n	101519c <_vfiprintf_r+0xdc>
 1015536:	06b2      	lsls	r2, r6, #26
 1015538:	f100 81c1 	bmi.w	10158be <_vfiprintf_r+0x7fe>
 101553c:	9a07      	ldr	r2, [sp, #28]
 101553e:	06f3      	lsls	r3, r6, #27
 1015540:	f852 4b04 	ldr.w	r4, [r2], #4
 1015544:	f100 8571 	bmi.w	101602a <_vfiprintf_r+0xf6a>
 1015548:	0675      	lsls	r5, r6, #25
 101554a:	9207      	str	r2, [sp, #28]
 101554c:	9602      	str	r6, [sp, #8]
 101554e:	f140 84c7 	bpl.w	1015ee0 <_vfiprintf_r+0xe20>
 1015552:	b2a4      	uxth	r4, r4
 1015554:	2500      	movs	r5, #0
 1015556:	2301      	movs	r3, #1
 1015558:	e6f6      	b.n	1015348 <_vfiprintf_r+0x288>
 101555a:	232b      	movs	r3, #43	; 0x2b
 101555c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1015560:	783b      	ldrb	r3, [r7, #0]
 1015562:	e61b      	b.n	101519c <_vfiprintf_r+0xdc>
 1015564:	9a07      	ldr	r2, [sp, #28]
 1015566:	783b      	ldrb	r3, [r7, #0]
 1015568:	f852 1b04 	ldr.w	r1, [r2], #4
 101556c:	2900      	cmp	r1, #0
 101556e:	9105      	str	r1, [sp, #20]
 1015570:	bfa8      	it	ge
 1015572:	9207      	strge	r2, [sp, #28]
 1015574:	f6bf ae12 	bge.w	101519c <_vfiprintf_r+0xdc>
 1015578:	4249      	negs	r1, r1
 101557a:	9207      	str	r2, [sp, #28]
 101557c:	9105      	str	r1, [sp, #20]
 101557e:	e039      	b.n	10155f4 <_vfiprintf_r+0x534>
 1015580:	4658      	mov	r0, fp
 1015582:	f7fd fda5 	bl	10130d0 <_localeconv_r>
 1015586:	6843      	ldr	r3, [r0, #4]
 1015588:	4618      	mov	r0, r3
 101558a:	930e      	str	r3, [sp, #56]	; 0x38
 101558c:	f7f8 f8b8 	bl	100d700 <strlen>
 1015590:	4604      	mov	r4, r0
 1015592:	900f      	str	r0, [sp, #60]	; 0x3c
 1015594:	4658      	mov	r0, fp
 1015596:	f7fd fd9b 	bl	10130d0 <_localeconv_r>
 101559a:	6883      	ldr	r3, [r0, #8]
 101559c:	2c00      	cmp	r4, #0
 101559e:	bf18      	it	ne
 10155a0:	2b00      	cmpne	r3, #0
 10155a2:	930d      	str	r3, [sp, #52]	; 0x34
 10155a4:	f43f ae5f 	beq.w	1015266 <_vfiprintf_r+0x1a6>
 10155a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10155aa:	781a      	ldrb	r2, [r3, #0]
 10155ac:	783b      	ldrb	r3, [r7, #0]
 10155ae:	2a00      	cmp	r2, #0
 10155b0:	f43f adf4 	beq.w	101519c <_vfiprintf_r+0xdc>
 10155b4:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 10155b8:	e5f0      	b.n	101519c <_vfiprintf_r+0xdc>
 10155ba:	f046 0601 	orr.w	r6, r6, #1
 10155be:	783b      	ldrb	r3, [r7, #0]
 10155c0:	e5ec      	b.n	101519c <_vfiprintf_r+0xdc>
 10155c2:	4639      	mov	r1, r7
 10155c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 10155c8:	2b2a      	cmp	r3, #42	; 0x2a
 10155ca:	f000 851e 	beq.w	101600a <_vfiprintf_r+0xf4a>
 10155ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10155d2:	460f      	mov	r7, r1
 10155d4:	2a09      	cmp	r2, #9
 10155d6:	f04f 0a00 	mov.w	sl, #0
 10155da:	f63f ade0 	bhi.w	101519e <_vfiprintf_r+0xde>
 10155de:	f817 3b01 	ldrb.w	r3, [r7], #1
 10155e2:	210a      	movs	r1, #10
 10155e4:	fb01 2a0a 	mla	sl, r1, sl, r2
 10155e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 10155ec:	2a09      	cmp	r2, #9
 10155ee:	d9f6      	bls.n	10155de <_vfiprintf_r+0x51e>
 10155f0:	e5d5      	b.n	101519e <_vfiprintf_r+0xde>
 10155f2:	783b      	ldrb	r3, [r7, #0]
 10155f4:	f046 0604 	orr.w	r6, r6, #4
 10155f8:	e5d0      	b.n	101519c <_vfiprintf_r+0xdc>
 10155fa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 10155fe:	783b      	ldrb	r3, [r7, #0]
 1015600:	e5cc      	b.n	101519c <_vfiprintf_r+0xdc>
 1015602:	783b      	ldrb	r3, [r7, #0]
 1015604:	2b68      	cmp	r3, #104	; 0x68
 1015606:	bf09      	itett	eq
 1015608:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
 101560c:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
 1015610:	787b      	ldrbeq	r3, [r7, #1]
 1015612:	3701      	addeq	r7, #1
 1015614:	e5c2      	b.n	101519c <_vfiprintf_r+0xdc>
 1015616:	06b3      	lsls	r3, r6, #26
 1015618:	f100 8128 	bmi.w	101586c <_vfiprintf_r+0x7ac>
 101561c:	9b07      	ldr	r3, [sp, #28]
 101561e:	06f5      	lsls	r5, r6, #27
 1015620:	f103 0204 	add.w	r2, r3, #4
 1015624:	f100 8504 	bmi.w	1016030 <_vfiprintf_r+0xf70>
 1015628:	9b07      	ldr	r3, [sp, #28]
 101562a:	0674      	lsls	r4, r6, #25
 101562c:	bf48      	it	mi
 101562e:	f9b3 4000 	ldrshmi.w	r4, [r3]
 1015632:	d404      	bmi.n	101563e <_vfiprintf_r+0x57e>
 1015634:	05b0      	lsls	r0, r6, #22
 1015636:	f140 848a 	bpl.w	1015f4e <_vfiprintf_r+0xe8e>
 101563a:	f993 4000 	ldrsb.w	r4, [r3]
 101563e:	17e5      	asrs	r5, r4, #31
 1015640:	9207      	str	r2, [sp, #28]
 1015642:	4622      	mov	r2, r4
 1015644:	2a00      	cmp	r2, #0
 1015646:	462b      	mov	r3, r5
 1015648:	f173 0300 	sbcs.w	r3, r3, #0
 101564c:	9602      	str	r6, [sp, #8]
 101564e:	f280 811d 	bge.w	101588c <_vfiprintf_r+0x7cc>
 1015652:	4264      	negs	r4, r4
 1015654:	f04f 032d 	mov.w	r3, #45	; 0x2d
 1015658:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 101565c:	f04f 0301 	mov.w	r3, #1
 1015660:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 1015664:	f1ba 3fff 	cmp.w	sl, #4294967295
 1015668:	f47f ae76 	bne.w	1015358 <_vfiprintf_r+0x298>
 101566c:	2b01      	cmp	r3, #1
 101566e:	f000 8304 	beq.w	1015c7a <_vfiprintf_r+0xbba>
 1015672:	2b02      	cmp	r3, #2
 1015674:	bf18      	it	ne
 1015676:	a946      	addne	r1, sp, #280	; 0x118
 1015678:	f040 8139 	bne.w	10158ee <_vfiprintf_r+0x82e>
 101567c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 101567e:	aa46      	add	r2, sp, #280	; 0x118
 1015680:	f004 010f 	and.w	r1, r4, #15
 1015684:	0923      	lsrs	r3, r4, #4
 1015686:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 101568a:	0928      	lsrs	r0, r5, #4
 101568c:	5c71      	ldrb	r1, [r6, r1]
 101568e:	461c      	mov	r4, r3
 1015690:	4605      	mov	r5, r0
 1015692:	ea54 0305 	orrs.w	r3, r4, r5
 1015696:	f802 1d01 	strb.w	r1, [r2, #-1]!
 101569a:	d1f1      	bne.n	1015680 <_vfiprintf_r+0x5c0>
 101569c:	ab46      	add	r3, sp, #280	; 0x118
 101569e:	920b      	str	r2, [sp, #44]	; 0x2c
 10156a0:	1a9b      	subs	r3, r3, r2
 10156a2:	9e02      	ldr	r6, [sp, #8]
 10156a4:	9304      	str	r3, [sp, #16]
 10156a6:	e678      	b.n	101539a <_vfiprintf_r+0x2da>
 10156a8:	06b1      	lsls	r1, r6, #26
 10156aa:	f249 5248 	movw	r2, #38216	; 0x9548
 10156ae:	f2c0 1205 	movt	r2, #261	; 0x105
 10156b2:	920c      	str	r2, [sp, #48]	; 0x30
 10156b4:	f53f ae34 	bmi.w	1015320 <_vfiprintf_r+0x260>
 10156b8:	9a07      	ldr	r2, [sp, #28]
 10156ba:	f852 4b04 	ldr.w	r4, [r2], #4
 10156be:	9207      	str	r2, [sp, #28]
 10156c0:	06f2      	lsls	r2, r6, #27
 10156c2:	d40b      	bmi.n	10156dc <_vfiprintf_r+0x61c>
 10156c4:	0675      	lsls	r5, r6, #25
 10156c6:	bf44      	itt	mi
 10156c8:	b2a4      	uxthmi	r4, r4
 10156ca:	2500      	movmi	r5, #0
 10156cc:	f53f ae2f 	bmi.w	101532e <_vfiprintf_r+0x26e>
 10156d0:	05b0      	lsls	r0, r6, #22
 10156d2:	bf44      	itt	mi
 10156d4:	b2e4      	uxtbmi	r4, r4
 10156d6:	2500      	movmi	r5, #0
 10156d8:	f53f ae29 	bmi.w	101532e <_vfiprintf_r+0x26e>
 10156dc:	2500      	movs	r5, #0
 10156de:	ea54 0205 	orrs.w	r2, r4, r5
 10156e2:	f006 0201 	and.w	r2, r6, #1
 10156e6:	bf08      	it	eq
 10156e8:	2200      	moveq	r2, #0
 10156ea:	2a00      	cmp	r2, #0
 10156ec:	f43f ae28 	beq.w	1015340 <_vfiprintf_r+0x280>
 10156f0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 10156f4:	f046 0602 	orr.w	r6, r6, #2
 10156f8:	2330      	movs	r3, #48	; 0x30
 10156fa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 10156fe:	e61f      	b.n	1015340 <_vfiprintf_r+0x280>
 1015700:	06b1      	lsls	r1, r6, #26
 1015702:	f046 0310 	orr.w	r3, r6, #16
 1015706:	9302      	str	r3, [sp, #8]
 1015708:	f100 80da 	bmi.w	10158c0 <_vfiprintf_r+0x800>
 101570c:	9b07      	ldr	r3, [sp, #28]
 101570e:	1d1a      	adds	r2, r3, #4
 1015710:	9b07      	ldr	r3, [sp, #28]
 1015712:	2500      	movs	r5, #0
 1015714:	9207      	str	r2, [sp, #28]
 1015716:	681c      	ldr	r4, [r3, #0]
 1015718:	2301      	movs	r3, #1
 101571a:	e615      	b.n	1015348 <_vfiprintf_r+0x288>
 101571c:	9d07      	ldr	r5, [sp, #28]
 101571e:	2200      	movs	r2, #0
 1015720:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 1015724:	f855 1b04 	ldr.w	r1, [r5], #4
 1015728:	910b      	str	r1, [sp, #44]	; 0x2c
 101572a:	2900      	cmp	r1, #0
 101572c:	f000 8373 	beq.w	1015e16 <_vfiprintf_r+0xd56>
 1015730:	2b53      	cmp	r3, #83	; 0x53
 1015732:	f000 82ff 	beq.w	1015d34 <_vfiprintf_r+0xc74>
 1015736:	f016 0410 	ands.w	r4, r6, #16
 101573a:	f040 82fb 	bne.w	1015d34 <_vfiprintf_r+0xc74>
 101573e:	f1ba 3fff 	cmp.w	sl, #4294967295
 1015742:	f000 8420 	beq.w	1015f86 <_vfiprintf_r+0xec6>
 1015746:	4652      	mov	r2, sl
 1015748:	4621      	mov	r1, r4
 101574a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 101574c:	f7fd fd60 	bl	1013210 <memchr>
 1015750:	9008      	str	r0, [sp, #32]
 1015752:	2800      	cmp	r0, #0
 1015754:	f000 840e 	beq.w	1015f74 <_vfiprintf_r+0xeb4>
 1015758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 101575a:	46a2      	mov	sl, r4
 101575c:	e9cd 5407 	strd	r5, r4, [sp, #28]
 1015760:	1a83      	subs	r3, r0, r2
 1015762:	9304      	str	r3, [sp, #16]
 1015764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1015768:	9302      	str	r3, [sp, #8]
 101576a:	e61d      	b.n	10153a8 <_vfiprintf_r+0x2e8>
 101576c:	06b2      	lsls	r2, r6, #26
 101576e:	f046 0310 	orr.w	r3, r6, #16
 1015772:	9302      	str	r3, [sp, #8]
 1015774:	d47b      	bmi.n	101586e <_vfiprintf_r+0x7ae>
 1015776:	9b07      	ldr	r3, [sp, #28]
 1015778:	1d1a      	adds	r2, r3, #4
 101577a:	9b07      	ldr	r3, [sp, #28]
 101577c:	9207      	str	r2, [sp, #28]
 101577e:	681c      	ldr	r4, [r3, #0]
 1015780:	17e5      	asrs	r5, r4, #31
 1015782:	4622      	mov	r2, r4
 1015784:	462b      	mov	r3, r5
 1015786:	e07c      	b.n	1015882 <_vfiprintf_r+0x7c2>
 1015788:	9a07      	ldr	r2, [sp, #28]
 101578a:	2b43      	cmp	r3, #67	; 0x43
 101578c:	f102 0404 	add.w	r4, r2, #4
 1015790:	d002      	beq.n	1015798 <_vfiprintf_r+0x6d8>
 1015792:	06f1      	lsls	r1, r6, #27
 1015794:	f140 82b5 	bpl.w	1015d02 <_vfiprintf_r+0xc42>
 1015798:	2208      	movs	r2, #8
 101579a:	2100      	movs	r1, #0
 101579c:	a818      	add	r0, sp, #96	; 0x60
 101579e:	ad2d      	add	r5, sp, #180	; 0xb4
 10157a0:	f7f7 fb9e 	bl	100cee0 <memset>
 10157a4:	9a07      	ldr	r2, [sp, #28]
 10157a6:	ab18      	add	r3, sp, #96	; 0x60
 10157a8:	4629      	mov	r1, r5
 10157aa:	4658      	mov	r0, fp
 10157ac:	6812      	ldr	r2, [r2, #0]
 10157ae:	f7fb fda5 	bl	10112fc <_wcrtomb_r>
 10157b2:	1c43      	adds	r3, r0, #1
 10157b4:	9004      	str	r0, [sp, #16]
 10157b6:	f000 8413 	beq.w	1015fe0 <_vfiprintf_r+0xf20>
 10157ba:	9b04      	ldr	r3, [sp, #16]
 10157bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 10157c0:	9302      	str	r3, [sp, #8]
 10157c2:	2300      	movs	r3, #0
 10157c4:	9407      	str	r4, [sp, #28]
 10157c6:	950b      	str	r5, [sp, #44]	; 0x2c
 10157c8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 10157cc:	e04a      	b.n	1015864 <_vfiprintf_r+0x7a4>
 10157ce:	06b1      	lsls	r1, r6, #26
 10157d0:	f046 0310 	orr.w	r3, r6, #16
 10157d4:	d47e      	bmi.n	10158d4 <_vfiprintf_r+0x814>
 10157d6:	9a07      	ldr	r2, [sp, #28]
 10157d8:	3204      	adds	r2, #4
 10157da:	9907      	ldr	r1, [sp, #28]
 10157dc:	2500      	movs	r5, #0
 10157de:	9207      	str	r2, [sp, #28]
 10157e0:	680c      	ldr	r4, [r1, #0]
 10157e2:	e07e      	b.n	10158e2 <_vfiprintf_r+0x822>
 10157e4:	9a07      	ldr	r2, [sp, #28]
 10157e6:	06b1      	lsls	r1, r6, #26
 10157e8:	f102 0304 	add.w	r3, r2, #4
 10157ec:	f100 8278 	bmi.w	1015ce0 <_vfiprintf_r+0xc20>
 10157f0:	06f5      	lsls	r5, r6, #27
 10157f2:	f100 8309 	bmi.w	1015e08 <_vfiprintf_r+0xd48>
 10157f6:	0674      	lsls	r4, r6, #25
 10157f8:	f100 83a2 	bmi.w	1015f40 <_vfiprintf_r+0xe80>
 10157fc:	05b0      	lsls	r0, r6, #22
 10157fe:	f140 8303 	bpl.w	1015e08 <_vfiprintf_r+0xd48>
 1015802:	9a07      	ldr	r2, [sp, #28]
 1015804:	9307      	str	r3, [sp, #28]
 1015806:	9b03      	ldr	r3, [sp, #12]
 1015808:	6812      	ldr	r2, [r2, #0]
 101580a:	7013      	strb	r3, [r2, #0]
 101580c:	e498      	b.n	1015140 <_vfiprintf_r+0x80>
 101580e:	06b2      	lsls	r2, r6, #26
 1015810:	d45f      	bmi.n	10158d2 <_vfiprintf_r+0x812>
 1015812:	9a07      	ldr	r2, [sp, #28]
 1015814:	06f3      	lsls	r3, r6, #27
 1015816:	f852 4b04 	ldr.w	r4, [r2], #4
 101581a:	f100 840c 	bmi.w	1016036 <_vfiprintf_r+0xf76>
 101581e:	0675      	lsls	r5, r6, #25
 1015820:	f140 8353 	bpl.w	1015eca <_vfiprintf_r+0xe0a>
 1015824:	4633      	mov	r3, r6
 1015826:	9207      	str	r2, [sp, #28]
 1015828:	b2a4      	uxth	r4, r4
 101582a:	2500      	movs	r5, #0
 101582c:	e059      	b.n	10158e2 <_vfiprintf_r+0x822>
 101582e:	783b      	ldrb	r3, [r7, #0]
 1015830:	2b6c      	cmp	r3, #108	; 0x6c
 1015832:	bf09      	itett	eq
 1015834:	f046 0620 	orreq.w	r6, r6, #32
 1015838:	f046 0610 	orrne.w	r6, r6, #16
 101583c:	787b      	ldrbeq	r3, [r7, #1]
 101583e:	3701      	addeq	r7, #1
 1015840:	e4ac      	b.n	101519c <_vfiprintf_r+0xdc>
 1015842:	4658      	mov	r0, fp
 1015844:	f7fd f8a2 	bl	101298c <__sinit>
 1015848:	e44f      	b.n	10150ea <_vfiprintf_r+0x2a>
 101584a:	2b00      	cmp	r3, #0
 101584c:	f43f ad4f 	beq.w	10152ee <_vfiprintf_r+0x22e>
 1015850:	2201      	movs	r2, #1
 1015852:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1015856:	9202      	str	r2, [sp, #8]
 1015858:	2300      	movs	r3, #0
 101585a:	9204      	str	r2, [sp, #16]
 101585c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 1015860:	ab2d      	add	r3, sp, #180	; 0xb4
 1015862:	930b      	str	r3, [sp, #44]	; 0x2c
 1015864:	2300      	movs	r3, #0
 1015866:	9308      	str	r3, [sp, #32]
 1015868:	469a      	mov	sl, r3
 101586a:	e5a3      	b.n	10153b4 <_vfiprintf_r+0x2f4>
 101586c:	9602      	str	r6, [sp, #8]
 101586e:	9d07      	ldr	r5, [sp, #28]
 1015870:	3507      	adds	r5, #7
 1015872:	f025 0307 	bic.w	r3, r5, #7
 1015876:	4619      	mov	r1, r3
 1015878:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 101587c:	4614      	mov	r4, r2
 101587e:	461d      	mov	r5, r3
 1015880:	9107      	str	r1, [sp, #28]
 1015882:	2a00      	cmp	r2, #0
 1015884:	f173 0300 	sbcs.w	r3, r3, #0
 1015888:	f6ff aee3 	blt.w	1015652 <_vfiprintf_r+0x592>
 101588c:	f1ba 3fff 	cmp.w	sl, #4294967295
 1015890:	f000 81f3 	beq.w	1015c7a <_vfiprintf_r+0xbba>
 1015894:	ea54 0305 	orrs.w	r3, r4, r5
 1015898:	9b02      	ldr	r3, [sp, #8]
 101589a:	f023 0680 	bic.w	r6, r3, #128	; 0x80
 101589e:	bf14      	ite	ne
 10158a0:	2301      	movne	r3, #1
 10158a2:	2300      	moveq	r3, #0
 10158a4:	f1ba 0f00 	cmp.w	sl, #0
 10158a8:	bf18      	it	ne
 10158aa:	2301      	movne	r3, #1
 10158ac:	2b00      	cmp	r3, #0
 10158ae:	f040 81e3 	bne.w	1015c78 <_vfiprintf_r+0xbb8>
 10158b2:	469a      	mov	sl, r3
 10158b4:	ab46      	add	r3, sp, #280	; 0x118
 10158b6:	f8cd a010 	str.w	sl, [sp, #16]
 10158ba:	930b      	str	r3, [sp, #44]	; 0x2c
 10158bc:	e56d      	b.n	101539a <_vfiprintf_r+0x2da>
 10158be:	9602      	str	r6, [sp, #8]
 10158c0:	9d07      	ldr	r5, [sp, #28]
 10158c2:	2301      	movs	r3, #1
 10158c4:	3507      	adds	r5, #7
 10158c6:	f025 0207 	bic.w	r2, r5, #7
 10158ca:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10158ce:	9207      	str	r2, [sp, #28]
 10158d0:	e53a      	b.n	1015348 <_vfiprintf_r+0x288>
 10158d2:	4633      	mov	r3, r6
 10158d4:	9d07      	ldr	r5, [sp, #28]
 10158d6:	3507      	adds	r5, #7
 10158d8:	f025 0207 	bic.w	r2, r5, #7
 10158dc:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 10158e0:	9207      	str	r2, [sp, #28]
 10158e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 10158e6:	9302      	str	r3, [sp, #8]
 10158e8:	2300      	movs	r3, #0
 10158ea:	e52d      	b.n	1015348 <_vfiprintf_r+0x288>
 10158ec:	4611      	mov	r1, r2
 10158ee:	08e2      	lsrs	r2, r4, #3
 10158f0:	08e8      	lsrs	r0, r5, #3
 10158f2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 10158f6:	f004 0307 	and.w	r3, r4, #7
 10158fa:	4605      	mov	r5, r0
 10158fc:	3330      	adds	r3, #48	; 0x30
 10158fe:	4614      	mov	r4, r2
 1015900:	ea54 0005 	orrs.w	r0, r4, r5
 1015904:	f801 3c01 	strb.w	r3, [r1, #-1]
 1015908:	f101 32ff 	add.w	r2, r1, #4294967295
 101590c:	d1ee      	bne.n	10158ec <_vfiprintf_r+0x82c>
 101590e:	9e02      	ldr	r6, [sp, #8]
 1015910:	920b      	str	r2, [sp, #44]	; 0x2c
 1015912:	4630      	mov	r0, r6
 1015914:	2b30      	cmp	r3, #48	; 0x30
 1015916:	bf0c      	ite	eq
 1015918:	2000      	moveq	r0, #0
 101591a:	f000 0001 	andne.w	r0, r0, #1
 101591e:	2800      	cmp	r0, #0
 1015920:	f040 8266 	bne.w	1015df0 <_vfiprintf_r+0xd30>
 1015924:	ab46      	add	r3, sp, #280	; 0x118
 1015926:	1a9b      	subs	r3, r3, r2
 1015928:	9304      	str	r3, [sp, #16]
 101592a:	e536      	b.n	101539a <_vfiprintf_r+0x2da>
 101592c:	9b05      	ldr	r3, [sp, #20]
 101592e:	9c02      	ldr	r4, [sp, #8]
 1015930:	1b1c      	subs	r4, r3, r4
 1015932:	2c00      	cmp	r4, #0
 1015934:	f77f ad94 	ble.w	1015460 <_vfiprintf_r+0x3a0>
 1015938:	2c10      	cmp	r4, #16
 101593a:	4dbe      	ldr	r5, [pc, #760]	; (1015c34 <_vfiprintf_r+0xb74>)
 101593c:	f340 834d 	ble.w	1015fda <_vfiprintf_r+0xf1a>
 1015940:	9609      	str	r6, [sp, #36]	; 0x24
 1015942:	4666      	mov	r6, ip
 1015944:	970a      	str	r7, [sp, #40]	; 0x28
 1015946:	462f      	mov	r7, r5
 1015948:	9d06      	ldr	r5, [sp, #24]
 101594a:	e00a      	b.n	1015962 <_vfiprintf_r+0x8a2>
 101594c:	f7ff fb74 	bl	1015038 <__sprint_r.part.0>
 1015950:	2800      	cmp	r0, #0
 1015952:	f040 809c 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 1015956:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 101595a:	1c51      	adds	r1, r2, #1
 101595c:	3c10      	subs	r4, #16
 101595e:	2c10      	cmp	r4, #16
 1015960:	dd1c      	ble.n	101599c <_vfiprintf_r+0x8dc>
 1015962:	1c50      	adds	r0, r2, #1
 1015964:	3610      	adds	r6, #16
 1015966:	2807      	cmp	r0, #7
 1015968:	f8c9 7000 	str.w	r7, [r9]
 101596c:	f102 0102 	add.w	r1, r2, #2
 1015970:	f04f 0310 	mov.w	r3, #16
 1015974:	961c      	str	r6, [sp, #112]	; 0x70
 1015976:	4602      	mov	r2, r0
 1015978:	f8c9 3004 	str.w	r3, [r9, #4]
 101597c:	f109 0908 	add.w	r9, r9, #8
 1015980:	901b      	str	r0, [sp, #108]	; 0x6c
 1015982:	ddeb      	ble.n	101595c <_vfiprintf_r+0x89c>
 1015984:	aa1a      	add	r2, sp, #104	; 0x68
 1015986:	4629      	mov	r1, r5
 1015988:	4658      	mov	r0, fp
 101598a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 101598e:	2e00      	cmp	r6, #0
 1015990:	d1dc      	bne.n	101594c <_vfiprintf_r+0x88c>
 1015992:	3c10      	subs	r4, #16
 1015994:	2101      	movs	r1, #1
 1015996:	2c10      	cmp	r4, #16
 1015998:	4632      	mov	r2, r6
 101599a:	dce2      	bgt.n	1015962 <_vfiprintf_r+0x8a2>
 101599c:	46b4      	mov	ip, r6
 101599e:	463d      	mov	r5, r7
 10159a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 10159a2:	f109 0308 	add.w	r3, r9, #8
 10159a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 10159a8:	2907      	cmp	r1, #7
 10159aa:	44a4      	add	ip, r4
 10159ac:	f8c9 5000 	str.w	r5, [r9]
 10159b0:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 10159b4:	f8c9 4004 	str.w	r4, [r9, #4]
 10159b8:	911b      	str	r1, [sp, #108]	; 0x6c
 10159ba:	f340 818a 	ble.w	1015cd2 <_vfiprintf_r+0xc12>
 10159be:	f1bc 0f00 	cmp.w	ip, #0
 10159c2:	f000 82ac 	beq.w	1015f1e <_vfiprintf_r+0xe5e>
 10159c6:	aa1a      	add	r2, sp, #104	; 0x68
 10159c8:	9906      	ldr	r1, [sp, #24]
 10159ca:	4658      	mov	r0, fp
 10159cc:	f7ff fb34 	bl	1015038 <__sprint_r.part.0>
 10159d0:	2800      	cmp	r0, #0
 10159d2:	d15c      	bne.n	1015a8e <_vfiprintf_r+0x9ce>
 10159d4:	9b04      	ldr	r3, [sp, #16]
 10159d6:	a91f      	add	r1, sp, #124	; 0x7c
 10159d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 10159da:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 10159de:	ebaa 0403 	sub.w	r4, sl, r3
 10159e2:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 10159e6:	2c00      	cmp	r4, #0
 10159e8:	f102 0001 	add.w	r0, r2, #1
 10159ec:	f77f ad3e 	ble.w	101546c <_vfiprintf_r+0x3ac>
 10159f0:	2c10      	cmp	r4, #16
 10159f2:	4d90      	ldr	r5, [pc, #576]	; (1015c34 <_vfiprintf_r+0xb74>)
 10159f4:	f340 827c 	ble.w	1015ef0 <_vfiprintf_r+0xe30>
 10159f8:	9609      	str	r6, [sp, #36]	; 0x24
 10159fa:	f04f 0a10 	mov.w	sl, #16
 10159fe:	970a      	str	r7, [sp, #40]	; 0x28
 1015a00:	4666      	mov	r6, ip
 1015a02:	462f      	mov	r7, r5
 1015a04:	9d06      	ldr	r5, [sp, #24]
 1015a06:	e009      	b.n	1015a1c <_vfiprintf_r+0x95c>
 1015a08:	f7ff fb16 	bl	1015038 <__sprint_r.part.0>
 1015a0c:	2800      	cmp	r0, #0
 1015a0e:	d13e      	bne.n	1015a8e <_vfiprintf_r+0x9ce>
 1015a10:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1015a14:	1c50      	adds	r0, r2, #1
 1015a16:	3c10      	subs	r4, #16
 1015a18:	2c10      	cmp	r4, #16
 1015a1a:	dd1a      	ble.n	1015a52 <_vfiprintf_r+0x992>
 1015a1c:	1c51      	adds	r1, r2, #1
 1015a1e:	3610      	adds	r6, #16
 1015a20:	2907      	cmp	r1, #7
 1015a22:	f8c9 7000 	str.w	r7, [r9]
 1015a26:	f102 0002 	add.w	r0, r2, #2
 1015a2a:	f8c9 a004 	str.w	sl, [r9, #4]
 1015a2e:	961c      	str	r6, [sp, #112]	; 0x70
 1015a30:	460a      	mov	r2, r1
 1015a32:	f109 0908 	add.w	r9, r9, #8
 1015a36:	911b      	str	r1, [sp, #108]	; 0x6c
 1015a38:	dded      	ble.n	1015a16 <_vfiprintf_r+0x956>
 1015a3a:	aa1a      	add	r2, sp, #104	; 0x68
 1015a3c:	4629      	mov	r1, r5
 1015a3e:	4658      	mov	r0, fp
 1015a40:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015a44:	2e00      	cmp	r6, #0
 1015a46:	d1df      	bne.n	1015a08 <_vfiprintf_r+0x948>
 1015a48:	3c10      	subs	r4, #16
 1015a4a:	2001      	movs	r0, #1
 1015a4c:	2c10      	cmp	r4, #16
 1015a4e:	4632      	mov	r2, r6
 1015a50:	dce4      	bgt.n	1015a1c <_vfiprintf_r+0x95c>
 1015a52:	46b4      	mov	ip, r6
 1015a54:	463d      	mov	r5, r7
 1015a56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 1015a58:	f109 0308 	add.w	r3, r9, #8
 1015a5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 1015a5e:	2807      	cmp	r0, #7
 1015a60:	44a4      	add	ip, r4
 1015a62:	f8c9 5000 	str.w	r5, [r9]
 1015a66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1015a6a:	f8c9 4004 	str.w	r4, [r9, #4]
 1015a6e:	901b      	str	r0, [sp, #108]	; 0x6c
 1015a70:	f300 80e8 	bgt.w	1015c44 <_vfiprintf_r+0xb84>
 1015a74:	3001      	adds	r0, #1
 1015a76:	f103 0108 	add.w	r1, r3, #8
 1015a7a:	4699      	mov	r9, r3
 1015a7c:	e4f6      	b.n	101546c <_vfiprintf_r+0x3ac>
 1015a7e:	aa1a      	add	r2, sp, #104	; 0x68
 1015a80:	9906      	ldr	r1, [sp, #24]
 1015a82:	4658      	mov	r0, fp
 1015a84:	f7ff fad8 	bl	1015038 <__sprint_r.part.0>
 1015a88:	2800      	cmp	r0, #0
 1015a8a:	f43f ad1b 	beq.w	10154c4 <_vfiprintf_r+0x404>
 1015a8e:	9b08      	ldr	r3, [sp, #32]
 1015a90:	2b00      	cmp	r3, #0
 1015a92:	f43f ac30 	beq.w	10152f6 <_vfiprintf_r+0x236>
 1015a96:	9908      	ldr	r1, [sp, #32]
 1015a98:	4658      	mov	r0, fp
 1015a9a:	f7fc fff1 	bl	1012a80 <_free_r>
 1015a9e:	e42a      	b.n	10152f6 <_vfiprintf_r+0x236>
 1015aa0:	f1bc 0f00 	cmp.w	ip, #0
 1015aa4:	d00e      	beq.n	1015ac4 <_vfiprintf_r+0xa04>
 1015aa6:	aa1a      	add	r2, sp, #104	; 0x68
 1015aa8:	9906      	ldr	r1, [sp, #24]
 1015aaa:	4658      	mov	r0, fp
 1015aac:	f7ff fac4 	bl	1015038 <__sprint_r.part.0>
 1015ab0:	2800      	cmp	r0, #0
 1015ab2:	d1ec      	bne.n	1015a8e <_vfiprintf_r+0x9ce>
 1015ab4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1015ab6:	a91f      	add	r1, sp, #124	; 0x7c
 1015ab8:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1015abc:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015ac0:	1c50      	adds	r0, r2, #1
 1015ac2:	e4a6      	b.n	1015412 <_vfiprintf_r+0x352>
 1015ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1015ac6:	2b00      	cmp	r3, #0
 1015ac8:	f000 8114 	beq.w	1015cf4 <_vfiprintf_r+0xc34>
 1015acc:	a91f      	add	r1, sp, #124	; 0x7c
 1015ace:	2302      	movs	r3, #2
 1015ad0:	4610      	mov	r0, r2
 1015ad2:	931e      	str	r3, [sp, #120]	; 0x78
 1015ad4:	469c      	mov	ip, r3
 1015ad6:	ab13      	add	r3, sp, #76	; 0x4c
 1015ad8:	931d      	str	r3, [sp, #116]	; 0x74
 1015ada:	4602      	mov	r2, r0
 1015adc:	4689      	mov	r9, r1
 1015ade:	3001      	adds	r0, #1
 1015ae0:	3108      	adds	r1, #8
 1015ae2:	e4b9      	b.n	1015458 <_vfiprintf_r+0x398>
 1015ae4:	2c10      	cmp	r4, #16
 1015ae6:	f646 45a0 	movw	r5, #27808	; 0x6ca0
 1015aea:	f2c0 1505 	movt	r5, #261	; 0x105
 1015aee:	f340 8256 	ble.w	1015f9e <_vfiprintf_r+0xede>
 1015af2:	9610      	str	r6, [sp, #64]	; 0x40
 1015af4:	2310      	movs	r3, #16
 1015af6:	9711      	str	r7, [sp, #68]	; 0x44
 1015af8:	4666      	mov	r6, ip
 1015afa:	9f06      	ldr	r7, [sp, #24]
 1015afc:	e00c      	b.n	1015b18 <_vfiprintf_r+0xa58>
 1015afe:	f7ff fa9b 	bl	1015038 <__sprint_r.part.0>
 1015b02:	2800      	cmp	r0, #0
 1015b04:	d1c3      	bne.n	1015a8e <_vfiprintf_r+0x9ce>
 1015b06:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	; 0x6c
 1015b0a:	2310      	movs	r3, #16
 1015b0c:	f102 0e01 	add.w	lr, r2, #1
 1015b10:	3c10      	subs	r4, #16
 1015b12:	1c51      	adds	r1, r2, #1
 1015b14:	2c10      	cmp	r4, #16
 1015b16:	dd1d      	ble.n	1015b54 <_vfiprintf_r+0xa94>
 1015b18:	2907      	cmp	r1, #7
 1015b1a:	f106 0610 	add.w	r6, r6, #16
 1015b1e:	f8c9 5000 	str.w	r5, [r9]
 1015b22:	f102 0e02 	add.w	lr, r2, #2
 1015b26:	f8c9 3004 	str.w	r3, [r9, #4]
 1015b2a:	460a      	mov	r2, r1
 1015b2c:	961c      	str	r6, [sp, #112]	; 0x70
 1015b2e:	f109 0908 	add.w	r9, r9, #8
 1015b32:	911b      	str	r1, [sp, #108]	; 0x6c
 1015b34:	ddec      	ble.n	1015b10 <_vfiprintf_r+0xa50>
 1015b36:	aa1a      	add	r2, sp, #104	; 0x68
 1015b38:	4639      	mov	r1, r7
 1015b3a:	4658      	mov	r0, fp
 1015b3c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015b40:	2e00      	cmp	r6, #0
 1015b42:	d1dc      	bne.n	1015afe <_vfiprintf_r+0xa3e>
 1015b44:	3c10      	subs	r4, #16
 1015b46:	4632      	mov	r2, r6
 1015b48:	2c10      	cmp	r4, #16
 1015b4a:	f04f 0e01 	mov.w	lr, #1
 1015b4e:	f102 0101 	add.w	r1, r2, #1
 1015b52:	dce1      	bgt.n	1015b18 <_vfiprintf_r+0xa58>
 1015b54:	46b4      	mov	ip, r6
 1015b56:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 1015b5a:	f1be 0f07 	cmp.w	lr, #7
 1015b5e:	44a4      	add	ip, r4
 1015b60:	f8c9 5000 	str.w	r5, [r9]
 1015b64:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 1015b68:	f8c9 4004 	str.w	r4, [r9, #4]
 1015b6c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 1015b70:	f300 809a 	bgt.w	1015ca8 <_vfiprintf_r+0xbe8>
 1015b74:	f109 0908 	add.w	r9, r9, #8
 1015b78:	f10e 0001 	add.w	r0, lr, #1
 1015b7c:	4672      	mov	r2, lr
 1015b7e:	e430      	b.n	10153e2 <_vfiprintf_r+0x322>
 1015b80:	0771      	lsls	r1, r6, #29
 1015b82:	931b      	str	r3, [sp, #108]	; 0x6c
 1015b84:	d54c      	bpl.n	1015c20 <_vfiprintf_r+0xb60>
 1015b86:	9a05      	ldr	r2, [sp, #20]
 1015b88:	9902      	ldr	r1, [sp, #8]
 1015b8a:	1a54      	subs	r4, r2, r1
 1015b8c:	2c00      	cmp	r4, #0
 1015b8e:	dd47      	ble.n	1015c20 <_vfiprintf_r+0xb60>
 1015b90:	a91d      	add	r1, sp, #116	; 0x74
 1015b92:	2c10      	cmp	r4, #16
 1015b94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1015b96:	f340 8204 	ble.w	1015fa2 <_vfiprintf_r+0xee2>
 1015b9a:	f646 45a0 	movw	r5, #27808	; 0x6ca0
 1015b9e:	2610      	movs	r6, #16
 1015ba0:	f2c0 1505 	movt	r5, #261	; 0x105
 1015ba4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 1015ba8:	e00c      	b.n	1015bc4 <_vfiprintf_r+0xb04>
 1015baa:	f7ff fa45 	bl	1015038 <__sprint_r.part.0>
 1015bae:	a91d      	add	r1, sp, #116	; 0x74
 1015bb0:	2800      	cmp	r0, #0
 1015bb2:	f47f af6c 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 1015bb6:	e9dd 031b 	ldrd	r0, r3, [sp, #108]	; 0x6c
 1015bba:	f100 0c01 	add.w	ip, r0, #1
 1015bbe:	3c10      	subs	r4, #16
 1015bc0:	2c10      	cmp	r4, #16
 1015bc2:	dd18      	ble.n	1015bf6 <_vfiprintf_r+0xb36>
 1015bc4:	1c42      	adds	r2, r0, #1
 1015bc6:	3310      	adds	r3, #16
 1015bc8:	2a07      	cmp	r2, #7
 1015bca:	600d      	str	r5, [r1, #0]
 1015bcc:	f100 0c02 	add.w	ip, r0, #2
 1015bd0:	604e      	str	r6, [r1, #4]
 1015bd2:	931c      	str	r3, [sp, #112]	; 0x70
 1015bd4:	4610      	mov	r0, r2
 1015bd6:	f101 0108 	add.w	r1, r1, #8
 1015bda:	921b      	str	r2, [sp, #108]	; 0x6c
 1015bdc:	ddef      	ble.n	1015bbe <_vfiprintf_r+0xafe>
 1015bde:	aa1a      	add	r2, sp, #104	; 0x68
 1015be0:	4649      	mov	r1, r9
 1015be2:	4658      	mov	r0, fp
 1015be4:	2b00      	cmp	r3, #0
 1015be6:	d1e0      	bne.n	1015baa <_vfiprintf_r+0xaea>
 1015be8:	3c10      	subs	r4, #16
 1015bea:	f04f 0c01 	mov.w	ip, #1
 1015bee:	2c10      	cmp	r4, #16
 1015bf0:	4618      	mov	r0, r3
 1015bf2:	a91d      	add	r1, sp, #116	; 0x74
 1015bf4:	dce6      	bgt.n	1015bc4 <_vfiprintf_r+0xb04>
 1015bf6:	f1bc 0f07 	cmp.w	ip, #7
 1015bfa:	4423      	add	r3, r4
 1015bfc:	600d      	str	r5, [r1, #0]
 1015bfe:	931c      	str	r3, [sp, #112]	; 0x70
 1015c00:	604c      	str	r4, [r1, #4]
 1015c02:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 1015c06:	f77f ac52 	ble.w	10154ae <_vfiprintf_r+0x3ee>
 1015c0a:	b14b      	cbz	r3, 1015c20 <_vfiprintf_r+0xb60>
 1015c0c:	aa1a      	add	r2, sp, #104	; 0x68
 1015c0e:	9906      	ldr	r1, [sp, #24]
 1015c10:	4658      	mov	r0, fp
 1015c12:	f7ff fa11 	bl	1015038 <__sprint_r.part.0>
 1015c16:	2800      	cmp	r0, #0
 1015c18:	f47f af39 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 1015c1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 1015c1e:	e446      	b.n	10154ae <_vfiprintf_r+0x3ee>
 1015c20:	9b03      	ldr	r3, [sp, #12]
 1015c22:	9a05      	ldr	r2, [sp, #20]
 1015c24:	9902      	ldr	r1, [sp, #8]
 1015c26:	428a      	cmp	r2, r1
 1015c28:	bfac      	ite	ge
 1015c2a:	189b      	addge	r3, r3, r2
 1015c2c:	185b      	addlt	r3, r3, r1
 1015c2e:	9303      	str	r3, [sp, #12]
 1015c30:	e448      	b.n	10154c4 <_vfiprintf_r+0x404>
 1015c32:	bf00      	nop
 1015c34:	01056cb0 	.word	0x01056cb0
 1015c38:	ab46      	add	r3, sp, #280	; 0x118
 1015c3a:	4692      	mov	sl, r2
 1015c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 1015c3e:	9204      	str	r2, [sp, #16]
 1015c40:	f7ff bbab 	b.w	101539a <_vfiprintf_r+0x2da>
 1015c44:	f1bc 0f00 	cmp.w	ip, #0
 1015c48:	f000 80c8 	beq.w	1015ddc <_vfiprintf_r+0xd1c>
 1015c4c:	aa1a      	add	r2, sp, #104	; 0x68
 1015c4e:	9906      	ldr	r1, [sp, #24]
 1015c50:	4658      	mov	r0, fp
 1015c52:	f7ff f9f1 	bl	1015038 <__sprint_r.part.0>
 1015c56:	2800      	cmp	r0, #0
 1015c58:	f47f af19 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 1015c5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 1015c5e:	a91f      	add	r1, sp, #124	; 0x7c
 1015c60:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1015c64:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015c68:	3001      	adds	r0, #1
 1015c6a:	f7ff bbff 	b.w	101546c <_vfiprintf_r+0x3ac>
 1015c6e:	921b      	str	r2, [sp, #108]	; 0x6c
 1015c70:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015c74:	f7ff bb35 	b.w	10152e2 <_vfiprintf_r+0x222>
 1015c78:	9602      	str	r6, [sp, #8]
 1015c7a:	2d00      	cmp	r5, #0
 1015c7c:	bf08      	it	eq
 1015c7e:	2c0a      	cmpeq	r4, #10
 1015c80:	f080 80d6 	bcs.w	1015e30 <_vfiprintf_r+0xd70>
 1015c84:	2301      	movs	r3, #1
 1015c86:	3430      	adds	r4, #48	; 0x30
 1015c88:	9304      	str	r3, [sp, #16]
 1015c8a:	f20d 1317 	addw	r3, sp, #279	; 0x117
 1015c8e:	9e02      	ldr	r6, [sp, #8]
 1015c90:	f88d 4117 	strb.w	r4, [sp, #279]	; 0x117
 1015c94:	930b      	str	r3, [sp, #44]	; 0x2c
 1015c96:	f7ff bb80 	b.w	101539a <_vfiprintf_r+0x2da>
 1015c9a:	a91f      	add	r1, sp, #124	; 0x7c
 1015c9c:	2001      	movs	r0, #1
 1015c9e:	4662      	mov	r2, ip
 1015ca0:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015ca4:	f7ff bbd8 	b.w	1015458 <_vfiprintf_r+0x398>
 1015ca8:	f1bc 0f00 	cmp.w	ip, #0
 1015cac:	d032      	beq.n	1015d14 <_vfiprintf_r+0xc54>
 1015cae:	aa1a      	add	r2, sp, #104	; 0x68
 1015cb0:	9906      	ldr	r1, [sp, #24]
 1015cb2:	4658      	mov	r0, fp
 1015cb4:	f7ff f9c0 	bl	1015038 <__sprint_r.part.0>
 1015cb8:	2800      	cmp	r0, #0
 1015cba:	f47f aee8 	bne.w	1015a8e <_vfiprintf_r+0x9ce>
 1015cbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 1015cc0:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015cc4:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1015cc8:	1c50      	adds	r0, r2, #1
 1015cca:	f7ff bb8a 	b.w	10153e2 <_vfiprintf_r+0x322>
 1015cce:	9602      	str	r6, [sp, #8]
 1015cd0:	e4cc      	b.n	101566c <_vfiprintf_r+0x5ac>
 1015cd2:	1c48      	adds	r0, r1, #1
 1015cd4:	460a      	mov	r2, r1
 1015cd6:	4699      	mov	r9, r3
 1015cd8:	f103 0108 	add.w	r1, r3, #8
 1015cdc:	f7ff bbc0 	b.w	1015460 <_vfiprintf_r+0x3a0>
 1015ce0:	9903      	ldr	r1, [sp, #12]
 1015ce2:	6812      	ldr	r2, [r2, #0]
 1015ce4:	9307      	str	r3, [sp, #28]
 1015ce6:	17cd      	asrs	r5, r1, #31
 1015ce8:	4608      	mov	r0, r1
 1015cea:	4629      	mov	r1, r5
 1015cec:	e9c2 0100 	strd	r0, r1, [r2]
 1015cf0:	f7ff ba26 	b.w	1015140 <_vfiprintf_r+0x80>
 1015cf4:	4610      	mov	r0, r2
 1015cf6:	a91f      	add	r1, sp, #124	; 0x7c
 1015cf8:	4662      	mov	r2, ip
 1015cfa:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015cfe:	f7ff bbab 	b.w	1015458 <_vfiprintf_r+0x398>
 1015d02:	9b07      	ldr	r3, [sp, #28]
 1015d04:	2201      	movs	r2, #1
 1015d06:	ad2d      	add	r5, sp, #180	; 0xb4
 1015d08:	9202      	str	r2, [sp, #8]
 1015d0a:	9204      	str	r2, [sp, #16]
 1015d0c:	681b      	ldr	r3, [r3, #0]
 1015d0e:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 1015d12:	e556      	b.n	10157c2 <_vfiprintf_r+0x702>
 1015d14:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 1015d18:	2a00      	cmp	r2, #0
 1015d1a:	f040 8107 	bne.w	1015f2c <_vfiprintf_r+0xe6c>
 1015d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1015d20:	2b00      	cmp	r3, #0
 1015d22:	f040 8165 	bne.w	1015ff0 <_vfiprintf_r+0xf30>
 1015d26:	4662      	mov	r2, ip
 1015d28:	a91f      	add	r1, sp, #124	; 0x7c
 1015d2a:	2001      	movs	r0, #1
 1015d2c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015d30:	f7ff bb96 	b.w	1015460 <_vfiprintf_r+0x3a0>
 1015d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1015d36:	2208      	movs	r2, #8
 1015d38:	2100      	movs	r1, #0
 1015d3a:	a818      	add	r0, sp, #96	; 0x60
 1015d3c:	9315      	str	r3, [sp, #84]	; 0x54
 1015d3e:	f7f7 f8cf 	bl	100cee0 <memset>
 1015d42:	f1ba 3fff 	cmp.w	sl, #4294967295
 1015d46:	f000 80d5 	beq.w	1015ef4 <_vfiprintf_r+0xe34>
 1015d4a:	2400      	movs	r4, #0
 1015d4c:	9602      	str	r6, [sp, #8]
 1015d4e:	9507      	str	r5, [sp, #28]
 1015d50:	4626      	mov	r6, r4
 1015d52:	e009      	b.n	1015d68 <_vfiprintf_r+0xca8>
 1015d54:	f7fb fad2 	bl	10112fc <_wcrtomb_r>
 1015d58:	1833      	adds	r3, r6, r0
 1015d5a:	3001      	adds	r0, #1
 1015d5c:	f000 8140 	beq.w	1015fe0 <_vfiprintf_r+0xf20>
 1015d60:	4553      	cmp	r3, sl
 1015d62:	dc0a      	bgt.n	1015d7a <_vfiprintf_r+0xcba>
 1015d64:	461e      	mov	r6, r3
 1015d66:	d008      	beq.n	1015d7a <_vfiprintf_r+0xcba>
 1015d68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 1015d6a:	ab18      	add	r3, sp, #96	; 0x60
 1015d6c:	a92d      	add	r1, sp, #180	; 0xb4
 1015d6e:	4658      	mov	r0, fp
 1015d70:	5915      	ldr	r5, [r2, r4]
 1015d72:	3404      	adds	r4, #4
 1015d74:	462a      	mov	r2, r5
 1015d76:	2d00      	cmp	r5, #0
 1015d78:	d1ec      	bne.n	1015d54 <_vfiprintf_r+0xc94>
 1015d7a:	9604      	str	r6, [sp, #16]
 1015d7c:	9d07      	ldr	r5, [sp, #28]
 1015d7e:	9e02      	ldr	r6, [sp, #8]
 1015d80:	9b04      	ldr	r3, [sp, #16]
 1015d82:	2b00      	cmp	r3, #0
 1015d84:	f000 80c4 	beq.w	1015f10 <_vfiprintf_r+0xe50>
 1015d88:	2b63      	cmp	r3, #99	; 0x63
 1015d8a:	f340 80ee 	ble.w	1015f6a <_vfiprintf_r+0xeaa>
 1015d8e:	1c59      	adds	r1, r3, #1
 1015d90:	4658      	mov	r0, fp
 1015d92:	f7f6 f8a1 	bl	100bed8 <_malloc_r>
 1015d96:	900b      	str	r0, [sp, #44]	; 0x2c
 1015d98:	2800      	cmp	r0, #0
 1015d9a:	f000 8121 	beq.w	1015fe0 <_vfiprintf_r+0xf20>
 1015d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1015da0:	9308      	str	r3, [sp, #32]
 1015da2:	2208      	movs	r2, #8
 1015da4:	2100      	movs	r1, #0
 1015da6:	a818      	add	r0, sp, #96	; 0x60
 1015da8:	f7f7 f89a 	bl	100cee0 <memset>
 1015dac:	9c04      	ldr	r4, [sp, #16]
 1015dae:	ab18      	add	r3, sp, #96	; 0x60
 1015db0:	aa15      	add	r2, sp, #84	; 0x54
 1015db2:	9300      	str	r3, [sp, #0]
 1015db4:	4658      	mov	r0, fp
 1015db6:	4623      	mov	r3, r4
 1015db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 1015dba:	f7fb faf5 	bl	10113a8 <_wcsrtombs_r>
 1015dbe:	4284      	cmp	r4, r0
 1015dc0:	f040 812d 	bne.w	101601e <_vfiprintf_r+0xf5e>
 1015dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1015dc6:	2400      	movs	r4, #0
 1015dc8:	9507      	str	r5, [sp, #28]
 1015dca:	46a2      	mov	sl, r4
 1015dcc:	4619      	mov	r1, r3
 1015dce:	9b04      	ldr	r3, [sp, #16]
 1015dd0:	54cc      	strb	r4, [r1, r3]
 1015dd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1015dd6:	9302      	str	r3, [sp, #8]
 1015dd8:	f7ff bae6 	b.w	10153a8 <_vfiprintf_r+0x2e8>
 1015ddc:	9b04      	ldr	r3, [sp, #16]
 1015dde:	a91f      	add	r1, sp, #124	; 0x7c
 1015de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1015de2:	931c      	str	r3, [sp, #112]	; 0x70
 1015de4:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
 1015de8:	2201      	movs	r2, #1
 1015dea:	921b      	str	r2, [sp, #108]	; 0x6c
 1015dec:	f7ff bb57 	b.w	101549e <_vfiprintf_r+0x3de>
 1015df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1015df2:	3902      	subs	r1, #2
 1015df4:	2330      	movs	r3, #48	; 0x30
 1015df6:	9e02      	ldr	r6, [sp, #8]
 1015df8:	910b      	str	r1, [sp, #44]	; 0x2c
 1015dfa:	f802 3c01 	strb.w	r3, [r2, #-1]
 1015dfe:	ab46      	add	r3, sp, #280	; 0x118
 1015e00:	1a5b      	subs	r3, r3, r1
 1015e02:	9304      	str	r3, [sp, #16]
 1015e04:	f7ff bac9 	b.w	101539a <_vfiprintf_r+0x2da>
 1015e08:	9a07      	ldr	r2, [sp, #28]
 1015e0a:	6812      	ldr	r2, [r2, #0]
 1015e0c:	9307      	str	r3, [sp, #28]
 1015e0e:	9b03      	ldr	r3, [sp, #12]
 1015e10:	6013      	str	r3, [r2, #0]
 1015e12:	f7ff b995 	b.w	1015140 <_vfiprintf_r+0x80>
 1015e16:	4653      	mov	r3, sl
 1015e18:	2b06      	cmp	r3, #6
 1015e1a:	f249 72a8 	movw	r2, #38824	; 0x97a8
 1015e1e:	9507      	str	r5, [sp, #28]
 1015e20:	bf28      	it	cs
 1015e22:	2306      	movcs	r3, #6
 1015e24:	f2c0 1205 	movt	r2, #261	; 0x105
 1015e28:	9304      	str	r3, [sp, #16]
 1015e2a:	920b      	str	r2, [sp, #44]	; 0x2c
 1015e2c:	9302      	str	r3, [sp, #8]
 1015e2e:	e519      	b.n	1015864 <_vfiprintf_r+0x7a4>
 1015e30:	9b02      	ldr	r3, [sp, #8]
 1015e32:	2200      	movs	r2, #0
 1015e34:	f8cd 9010 	str.w	r9, [sp, #16]
 1015e38:	ae46      	add	r6, sp, #280	; 0x118
 1015e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 1015e3e:	9709      	str	r7, [sp, #36]	; 0x24
 1015e40:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 1015e44:	4691      	mov	r9, r2
 1015e46:	f8cd a020 	str.w	sl, [sp, #32]
 1015e4a:	461f      	mov	r7, r3
 1015e4c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 1015e50:	e008      	b.n	1015e64 <_vfiprintf_r+0xda4>
 1015e52:	f7f5 f989 	bl	100b168 <__aeabi_uldivmod>
 1015e56:	2d00      	cmp	r5, #0
 1015e58:	bf08      	it	eq
 1015e5a:	2c0a      	cmpeq	r4, #10
 1015e5c:	d328      	bcc.n	1015eb0 <_vfiprintf_r+0xdf0>
 1015e5e:	4604      	mov	r4, r0
 1015e60:	4656      	mov	r6, sl
 1015e62:	460d      	mov	r5, r1
 1015e64:	220a      	movs	r2, #10
 1015e66:	2300      	movs	r3, #0
 1015e68:	4620      	mov	r0, r4
 1015e6a:	4629      	mov	r1, r5
 1015e6c:	f7f5 f97c 	bl	100b168 <__aeabi_uldivmod>
 1015e70:	f109 0901 	add.w	r9, r9, #1
 1015e74:	4620      	mov	r0, r4
 1015e76:	4629      	mov	r1, r5
 1015e78:	f106 3aff 	add.w	sl, r6, #4294967295
 1015e7c:	2300      	movs	r3, #0
 1015e7e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 1015e82:	220a      	movs	r2, #10
 1015e84:	f806 cc01 	strb.w	ip, [r6, #-1]
 1015e88:	2f00      	cmp	r7, #0
 1015e8a:	d0e2      	beq.n	1015e52 <_vfiprintf_r+0xd92>
 1015e8c:	f898 6000 	ldrb.w	r6, [r8]
 1015e90:	f1b6 0cff 	subs.w	ip, r6, #255	; 0xff
 1015e94:	bf18      	it	ne
 1015e96:	f04f 0c01 	movne.w	ip, #1
 1015e9a:	454e      	cmp	r6, r9
 1015e9c:	bf18      	it	ne
 1015e9e:	f04f 0c00 	movne.w	ip, #0
 1015ea2:	f1bc 0f00 	cmp.w	ip, #0
 1015ea6:	d0d4      	beq.n	1015e52 <_vfiprintf_r+0xd92>
 1015ea8:	429d      	cmp	r5, r3
 1015eaa:	bf08      	it	eq
 1015eac:	4294      	cmpeq	r4, r2
 1015eae:	d27f      	bcs.n	1015fb0 <_vfiprintf_r+0xef0>
 1015eb0:	4652      	mov	r2, sl
 1015eb2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 1015eb6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 1015eba:	f8dd 9010 	ldr.w	r9, [sp, #16]
 1015ebe:	f8dd a020 	ldr.w	sl, [sp, #32]
 1015ec2:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 1015ec6:	9e02      	ldr	r6, [sp, #8]
 1015ec8:	e52c      	b.n	1015924 <_vfiprintf_r+0x864>
 1015eca:	05b0      	lsls	r0, r6, #22
 1015ecc:	bf45      	ittet	mi
 1015ece:	9207      	strmi	r2, [sp, #28]
 1015ed0:	b2e4      	uxtbmi	r4, r4
 1015ed2:	9207      	strpl	r2, [sp, #28]
 1015ed4:	4633      	movmi	r3, r6
 1015ed6:	bf4e      	itee	mi
 1015ed8:	2500      	movmi	r5, #0
 1015eda:	2500      	movpl	r5, #0
 1015edc:	4633      	movpl	r3, r6
 1015ede:	e500      	b.n	10158e2 <_vfiprintf_r+0x822>
 1015ee0:	05b0      	lsls	r0, r6, #22
 1015ee2:	f04f 0500 	mov.w	r5, #0
 1015ee6:	bf48      	it	mi
 1015ee8:	b2e4      	uxtbmi	r4, r4
 1015eea:	2301      	movs	r3, #1
 1015eec:	f7ff ba2c 	b.w	1015348 <_vfiprintf_r+0x288>
 1015ef0:	460b      	mov	r3, r1
 1015ef2:	e5b4      	b.n	1015a5e <_vfiprintf_r+0x99e>
 1015ef4:	2300      	movs	r3, #0
 1015ef6:	aa18      	add	r2, sp, #96	; 0x60
 1015ef8:	4619      	mov	r1, r3
 1015efa:	9200      	str	r2, [sp, #0]
 1015efc:	4658      	mov	r0, fp
 1015efe:	aa15      	add	r2, sp, #84	; 0x54
 1015f00:	f7fb fa52 	bl	10113a8 <_wcsrtombs_r>
 1015f04:	1c43      	adds	r3, r0, #1
 1015f06:	9004      	str	r0, [sp, #16]
 1015f08:	d06a      	beq.n	1015fe0 <_vfiprintf_r+0xf20>
 1015f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 1015f0c:	9315      	str	r3, [sp, #84]	; 0x54
 1015f0e:	e737      	b.n	1015d80 <_vfiprintf_r+0xcc0>
 1015f10:	9b04      	ldr	r3, [sp, #16]
 1015f12:	9507      	str	r5, [sp, #28]
 1015f14:	9302      	str	r3, [sp, #8]
 1015f16:	469a      	mov	sl, r3
 1015f18:	9308      	str	r3, [sp, #32]
 1015f1a:	f7ff ba45 	b.w	10153a8 <_vfiprintf_r+0x2e8>
 1015f1e:	a91f      	add	r1, sp, #124	; 0x7c
 1015f20:	2001      	movs	r0, #1
 1015f22:	4662      	mov	r2, ip
 1015f24:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 1015f28:	f7ff ba9a 	b.w	1015460 <_vfiprintf_r+0x3a0>
 1015f2c:	2201      	movs	r2, #1
 1015f2e:	f10d 014b 	add.w	r1, sp, #75	; 0x4b
 1015f32:	4610      	mov	r0, r2
 1015f34:	911d      	str	r1, [sp, #116]	; 0x74
 1015f36:	921e      	str	r2, [sp, #120]	; 0x78
 1015f38:	4694      	mov	ip, r2
 1015f3a:	a91f      	add	r1, sp, #124	; 0x7c
 1015f3c:	f7ff ba65 	b.w	101540a <_vfiprintf_r+0x34a>
 1015f40:	9a07      	ldr	r2, [sp, #28]
 1015f42:	9307      	str	r3, [sp, #28]
 1015f44:	9b03      	ldr	r3, [sp, #12]
 1015f46:	6812      	ldr	r2, [r2, #0]
 1015f48:	8013      	strh	r3, [r2, #0]
 1015f4a:	f7ff b8f9 	b.w	1015140 <_vfiprintf_r+0x80>
 1015f4e:	681c      	ldr	r4, [r3, #0]
 1015f50:	9207      	str	r2, [sp, #28]
 1015f52:	9602      	str	r6, [sp, #8]
 1015f54:	17e5      	asrs	r5, r4, #31
 1015f56:	4622      	mov	r2, r4
 1015f58:	462b      	mov	r3, r5
 1015f5a:	e492      	b.n	1015882 <_vfiprintf_r+0x7c2>
 1015f5c:	4658      	mov	r0, fp
 1015f5e:	aa1a      	add	r2, sp, #104	; 0x68
 1015f60:	9906      	ldr	r1, [sp, #24]
 1015f62:	f7ff f869 	bl	1015038 <__sprint_r.part.0>
 1015f66:	f7ff b9c6 	b.w	10152f6 <_vfiprintf_r+0x236>
 1015f6a:	2300      	movs	r3, #0
 1015f6c:	9308      	str	r3, [sp, #32]
 1015f6e:	ab2d      	add	r3, sp, #180	; 0xb4
 1015f70:	930b      	str	r3, [sp, #44]	; 0x2c
 1015f72:	e716      	b.n	1015da2 <_vfiprintf_r+0xce2>
 1015f74:	f8cd a008 	str.w	sl, [sp, #8]
 1015f78:	f8cd a010 	str.w	sl, [sp, #16]
 1015f7c:	9507      	str	r5, [sp, #28]
 1015f7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 1015f82:	f7ff ba11 	b.w	10153a8 <_vfiprintf_r+0x2e8>
 1015f86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1015f88:	46a2      	mov	sl, r4
 1015f8a:	f7f7 fbb9 	bl	100d700 <strlen>
 1015f8e:	9507      	str	r5, [sp, #28]
 1015f90:	9408      	str	r4, [sp, #32]
 1015f92:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 1015f96:	9004      	str	r0, [sp, #16]
 1015f98:	9302      	str	r3, [sp, #8]
 1015f9a:	f7ff ba05 	b.w	10153a8 <_vfiprintf_r+0x2e8>
 1015f9e:	468e      	mov	lr, r1
 1015fa0:	e5db      	b.n	1015b5a <_vfiprintf_r+0xa9a>
 1015fa2:	f646 45a0 	movw	r5, #27808	; 0x6ca0
 1015fa6:	f100 0c01 	add.w	ip, r0, #1
 1015faa:	f2c0 1505 	movt	r5, #261	; 0x105
 1015fae:	e622      	b.n	1015bf6 <_vfiprintf_r+0xb36>
 1015fb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 1015fb2:	990e      	ldr	r1, [sp, #56]	; 0x38
 1015fb4:	ebaa 0a02 	sub.w	sl, sl, r2
 1015fb8:	4650      	mov	r0, sl
 1015fba:	f7f7 fc8f 	bl	100d8dc <strncpy>
 1015fbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 1015fc2:	b10b      	cbz	r3, 1015fc8 <_vfiprintf_r+0xf08>
 1015fc4:	f108 0801 	add.w	r8, r8, #1
 1015fc8:	4620      	mov	r0, r4
 1015fca:	4629      	mov	r1, r5
 1015fcc:	220a      	movs	r2, #10
 1015fce:	2300      	movs	r3, #0
 1015fd0:	f7f5 f8ca 	bl	100b168 <__aeabi_uldivmod>
 1015fd4:	f04f 0900 	mov.w	r9, #0
 1015fd8:	e741      	b.n	1015e5e <_vfiprintf_r+0xd9e>
 1015fda:	460b      	mov	r3, r1
 1015fdc:	4601      	mov	r1, r0
 1015fde:	e4e3      	b.n	10159a8 <_vfiprintf_r+0x8e8>
 1015fe0:	9a06      	ldr	r2, [sp, #24]
 1015fe2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1015fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1015fea:	8193      	strh	r3, [r2, #12]
 1015fec:	f7ff b986 	b.w	10152fc <_vfiprintf_r+0x23c>
 1015ff0:	2302      	movs	r3, #2
 1015ff2:	aa13      	add	r2, sp, #76	; 0x4c
 1015ff4:	931e      	str	r3, [sp, #120]	; 0x78
 1015ff6:	469c      	mov	ip, r3
 1015ff8:	921d      	str	r2, [sp, #116]	; 0x74
 1015ffa:	a91f      	add	r1, sp, #124	; 0x7c
 1015ffc:	2001      	movs	r0, #1
 1015ffe:	e56c      	b.n	1015ada <_vfiprintf_r+0xa1a>
 1016000:	f04f 33ff 	mov.w	r3, #4294967295
 1016004:	9303      	str	r3, [sp, #12]
 1016006:	f7ff b97c 	b.w	1015302 <_vfiprintf_r+0x242>
 101600a:	9a07      	ldr	r2, [sp, #28]
 101600c:	787b      	ldrb	r3, [r7, #1]
 101600e:	460f      	mov	r7, r1
 1016010:	f852 0b04 	ldr.w	r0, [r2], #4
 1016014:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
 1016018:	9207      	str	r2, [sp, #28]
 101601a:	f7ff b8bf 	b.w	101519c <_vfiprintf_r+0xdc>
 101601e:	9a06      	ldr	r2, [sp, #24]
 1016020:	8993      	ldrh	r3, [r2, #12]
 1016022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1016026:	8193      	strh	r3, [r2, #12]
 1016028:	e531      	b.n	1015a8e <_vfiprintf_r+0x9ce>
 101602a:	9602      	str	r6, [sp, #8]
 101602c:	f7ff bb70 	b.w	1015710 <_vfiprintf_r+0x650>
 1016030:	9602      	str	r6, [sp, #8]
 1016032:	f7ff bba2 	b.w	101577a <_vfiprintf_r+0x6ba>
 1016036:	4633      	mov	r3, r6
 1016038:	f7ff bbcf 	b.w	10157da <_vfiprintf_r+0x71a>

0101603c <vfiprintf>:
 101603c:	b410      	push	{r4}
 101603e:	f649 4430 	movw	r4, #39984	; 0x9c30
 1016042:	f2c0 1405 	movt	r4, #261	; 0x105
 1016046:	4613      	mov	r3, r2
 1016048:	460a      	mov	r2, r1
 101604a:	4601      	mov	r1, r0
 101604c:	6820      	ldr	r0, [r4, #0]
 101604e:	f85d 4b04 	ldr.w	r4, [sp], #4
 1016052:	f7ff b835 	b.w	10150c0 <_vfiprintf_r>
 1016056:	bf00      	nop

01016058 <__sbprintf>:
 1016058:	b5f0      	push	{r4, r5, r6, r7, lr}
 101605a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 101605e:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 1016060:	460c      	mov	r4, r1
 1016062:	898d      	ldrh	r5, [r1, #12]
 1016064:	2700      	movs	r7, #0
 1016066:	9706      	str	r7, [sp, #24]
 1016068:	4669      	mov	r1, sp
 101606a:	89e7      	ldrh	r7, [r4, #14]
 101606c:	f025 0502 	bic.w	r5, r5, #2
 1016070:	9619      	str	r6, [sp, #100]	; 0x64
 1016072:	f8ad 500c 	strh.w	r5, [sp, #12]
 1016076:	69e6      	ldr	r6, [r4, #28]
 1016078:	6a65      	ldr	r5, [r4, #36]	; 0x24
 101607a:	f8ad 700e 	strh.w	r7, [sp, #14]
 101607e:	9607      	str	r6, [sp, #28]
 1016080:	ae1a      	add	r6, sp, #104	; 0x68
 1016082:	9509      	str	r5, [sp, #36]	; 0x24
 1016084:	f44f 6580 	mov.w	r5, #1024	; 0x400
 1016088:	9600      	str	r6, [sp, #0]
 101608a:	9604      	str	r6, [sp, #16]
 101608c:	4606      	mov	r6, r0
 101608e:	9502      	str	r5, [sp, #8]
 1016090:	9505      	str	r5, [sp, #20]
 1016092:	f7ff f815 	bl	10150c0 <_vfiprintf_r>
 1016096:	1e05      	subs	r5, r0, #0
 1016098:	db07      	blt.n	10160aa <__sbprintf+0x52>
 101609a:	4630      	mov	r0, r6
 101609c:	4669      	mov	r1, sp
 101609e:	f7fc fb63 	bl	1012768 <_fflush_r>
 10160a2:	2800      	cmp	r0, #0
 10160a4:	bf18      	it	ne
 10160a6:	f04f 35ff 	movne.w	r5, #4294967295
 10160aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 10160ae:	4628      	mov	r0, r5
 10160b0:	065b      	lsls	r3, r3, #25
 10160b2:	bf42      	ittt	mi
 10160b4:	89a3      	ldrhmi	r3, [r4, #12]
 10160b6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 10160ba:	81a3      	strhmi	r3, [r4, #12]
 10160bc:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 10160c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10160c2:	bf00      	nop

010160c4 <_wcsnrtombs_l>:
 10160c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10160c8:	b08b      	sub	sp, #44	; 0x2c
 10160ca:	e9dd 9414 	ldrd	r9, r4, [sp, #80]	; 0x50
 10160ce:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 10160d2:	2c00      	cmp	r4, #0
 10160d4:	d058      	beq.n	1016188 <_wcsnrtombs_l+0xc4>
 10160d6:	6816      	ldr	r6, [r2, #0]
 10160d8:	2900      	cmp	r1, #0
 10160da:	d05a      	beq.n	1016192 <_wcsnrtombs_l+0xce>
 10160dc:	f1b9 0f00 	cmp.w	r9, #0
 10160e0:	d064      	beq.n	10161ac <_wcsnrtombs_l+0xe8>
 10160e2:	1e5d      	subs	r5, r3, #1
 10160e4:	2b00      	cmp	r3, #0
 10160e6:	d063      	beq.n	10161b0 <_wcsnrtombs_l+0xec>
 10160e8:	9205      	str	r2, [sp, #20]
 10160ea:	3e04      	subs	r6, #4
 10160ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 10160f0:	f04f 0800 	mov.w	r8, #0
 10160f4:	9104      	str	r1, [sp, #16]
 10160f6:	46cb      	mov	fp, r9
 10160f8:	e00a      	b.n	1016110 <_wcsnrtombs_l+0x4c>
 10160fa:	9b03      	ldr	r3, [sp, #12]
 10160fc:	bb13      	cbnz	r3, 1016144 <_wcsnrtombs_l+0x80>
 10160fe:	6833      	ldr	r3, [r6, #0]
 1016100:	2b00      	cmp	r3, #0
 1016102:	d035      	beq.n	1016170 <_wcsnrtombs_l+0xac>
 1016104:	4559      	cmp	r1, fp
 1016106:	d255      	bcs.n	10161b4 <_wcsnrtombs_l+0xf0>
 1016108:	3d01      	subs	r5, #1
 101610a:	4688      	mov	r8, r1
 101610c:	1c6b      	adds	r3, r5, #1
 101610e:	d015      	beq.n	101613c <_wcsnrtombs_l+0x78>
 1016110:	6827      	ldr	r7, [r4, #0]
 1016112:	4623      	mov	r3, r4
 1016114:	f856 2f04 	ldr.w	r2, [r6, #4]!
 1016118:	a907      	add	r1, sp, #28
 101611a:	9802      	ldr	r0, [sp, #8]
 101611c:	9701      	str	r7, [sp, #4]
 101611e:	f8da 70e0 	ldr.w	r7, [sl, #224]	; 0xe0
 1016122:	f8d4 9004 	ldr.w	r9, [r4, #4]
 1016126:	47b8      	blx	r7
 1016128:	1c42      	adds	r2, r0, #1
 101612a:	d035      	beq.n	1016198 <_wcsnrtombs_l+0xd4>
 101612c:	eb00 0108 	add.w	r1, r0, r8
 1016130:	4559      	cmp	r1, fp
 1016132:	d9e2      	bls.n	10160fa <_wcsnrtombs_l+0x36>
 1016134:	f8dd b004 	ldr.w	fp, [sp, #4]
 1016138:	e9c4 b900 	strd	fp, r9, [r4]
 101613c:	4640      	mov	r0, r8
 101613e:	b00b      	add	sp, #44	; 0x2c
 1016140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1016144:	2800      	cmp	r0, #0
 1016146:	dd0c      	ble.n	1016162 <_wcsnrtombs_l+0x9e>
 1016148:	9b04      	ldr	r3, [sp, #16]
 101614a:	aa07      	add	r2, sp, #28
 101614c:	4418      	add	r0, r3
 101614e:	3b01      	subs	r3, #1
 1016150:	f100 3cff 	add.w	ip, r0, #4294967295
 1016154:	f812 7b01 	ldrb.w	r7, [r2], #1
 1016158:	f803 7f01 	strb.w	r7, [r3, #1]!
 101615c:	4563      	cmp	r3, ip
 101615e:	d1f9      	bne.n	1016154 <_wcsnrtombs_l+0x90>
 1016160:	9004      	str	r0, [sp, #16]
 1016162:	9a05      	ldr	r2, [sp, #20]
 1016164:	6813      	ldr	r3, [r2, #0]
 1016166:	3304      	adds	r3, #4
 1016168:	6013      	str	r3, [r2, #0]
 101616a:	6833      	ldr	r3, [r6, #0]
 101616c:	2b00      	cmp	r3, #0
 101616e:	d1c9      	bne.n	1016104 <_wcsnrtombs_l+0x40>
 1016170:	9a03      	ldr	r2, [sp, #12]
 1016172:	b10a      	cbz	r2, 1016178 <_wcsnrtombs_l+0xb4>
 1016174:	9a05      	ldr	r2, [sp, #20]
 1016176:	6013      	str	r3, [r2, #0]
 1016178:	f101 38ff 	add.w	r8, r1, #4294967295
 101617c:	2300      	movs	r3, #0
 101617e:	6023      	str	r3, [r4, #0]
 1016180:	4640      	mov	r0, r8
 1016182:	b00b      	add	sp, #44	; 0x2c
 1016184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1016188:	f500 748e 	add.w	r4, r0, #284	; 0x11c
 101618c:	6816      	ldr	r6, [r2, #0]
 101618e:	2900      	cmp	r1, #0
 1016190:	d1a4      	bne.n	10160dc <_wcsnrtombs_l+0x18>
 1016192:	f04f 39ff 	mov.w	r9, #4294967295
 1016196:	e7a4      	b.n	10160e2 <_wcsnrtombs_l+0x1e>
 1016198:	9902      	ldr	r1, [sp, #8]
 101619a:	4680      	mov	r8, r0
 101619c:	228a      	movs	r2, #138	; 0x8a
 101619e:	2300      	movs	r3, #0
 10161a0:	4640      	mov	r0, r8
 10161a2:	600a      	str	r2, [r1, #0]
 10161a4:	6023      	str	r3, [r4, #0]
 10161a6:	b00b      	add	sp, #44	; 0x2c
 10161a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10161ac:	46c8      	mov	r8, r9
 10161ae:	e7c5      	b.n	101613c <_wcsnrtombs_l+0x78>
 10161b0:	4698      	mov	r8, r3
 10161b2:	e7c3      	b.n	101613c <_wcsnrtombs_l+0x78>
 10161b4:	4688      	mov	r8, r1
 10161b6:	e7c1      	b.n	101613c <_wcsnrtombs_l+0x78>

010161b8 <_wcsnrtombs_r>:
 10161b8:	f649 4030 	movw	r0, #39984	; 0x9c30
 10161bc:	f2c0 1005 	movt	r0, #261	; 0x105
 10161c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10161c2:	b085      	sub	sp, #20
 10161c4:	6800      	ldr	r0, [r0, #0]
 10161c6:	f24a 0560 	movw	r5, #41056	; 0xa060
 10161ca:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 10161ce:	f2c0 1505 	movt	r5, #261	; 0x105
 10161d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 10161d4:	9700      	str	r7, [sp, #0]
 10161d6:	2c00      	cmp	r4, #0
 10161d8:	bf08      	it	eq
 10161da:	462c      	moveq	r4, r5
 10161dc:	e9cd 6401 	strd	r6, r4, [sp, #4]
 10161e0:	f7ff ff70 	bl	10160c4 <_wcsnrtombs_l>
 10161e4:	b005      	add	sp, #20
 10161e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

010161e8 <wcsnrtombs>:
 10161e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 10161ea:	f649 4430 	movw	r4, #39984	; 0x9c30
 10161ee:	f2c0 1405 	movt	r4, #261	; 0x105
 10161f2:	b085      	sub	sp, #20
 10161f4:	f24a 0560 	movw	r5, #41056	; 0xa060
 10161f8:	f2c0 1505 	movt	r5, #261	; 0x105
 10161fc:	6827      	ldr	r7, [r4, #0]
 10161fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 1016200:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 1016202:	9300      	str	r3, [sp, #0]
 1016204:	4613      	mov	r3, r2
 1016206:	2c00      	cmp	r4, #0
 1016208:	bf08      	it	eq
 101620a:	462c      	moveq	r4, r5
 101620c:	460a      	mov	r2, r1
 101620e:	9402      	str	r4, [sp, #8]
 1016210:	4601      	mov	r1, r0
 1016212:	9601      	str	r6, [sp, #4]
 1016214:	4638      	mov	r0, r7
 1016216:	f7ff ff55 	bl	10160c4 <_wcsnrtombs_l>
 101621a:	b005      	add	sp, #20
 101621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101621e:	bf00      	nop

01016220 <_write_r>:
 1016220:	b570      	push	{r4, r5, r6, lr}
 1016222:	460d      	mov	r5, r1
 1016224:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 1016228:	f2c0 1416 	movt	r4, #278	; 0x116
 101622c:	4611      	mov	r1, r2
 101622e:	4606      	mov	r6, r0
 1016230:	461a      	mov	r2, r3
 1016232:	4628      	mov	r0, r5
 1016234:	2300      	movs	r3, #0
 1016236:	6023      	str	r3, [r4, #0]
 1016238:	f000 ea52 	blx	10166e0 <_write>
 101623c:	1c43      	adds	r3, r0, #1
 101623e:	d000      	beq.n	1016242 <_write_r+0x22>
 1016240:	bd70      	pop	{r4, r5, r6, pc}
 1016242:	6823      	ldr	r3, [r4, #0]
 1016244:	2b00      	cmp	r3, #0
 1016246:	d0fb      	beq.n	1016240 <_write_r+0x20>
 1016248:	6033      	str	r3, [r6, #0]
 101624a:	bd70      	pop	{r4, r5, r6, pc}

0101624c <_calloc_r>:
 101624c:	b510      	push	{r4, lr}
 101624e:	fb02 f101 	mul.w	r1, r2, r1
 1016252:	f7f5 fe41 	bl	100bed8 <_malloc_r>
 1016256:	4604      	mov	r4, r0
 1016258:	b170      	cbz	r0, 1016278 <_calloc_r+0x2c>
 101625a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 101625e:	f022 0203 	bic.w	r2, r2, #3
 1016262:	3a04      	subs	r2, #4
 1016264:	2a24      	cmp	r2, #36	; 0x24
 1016266:	d81d      	bhi.n	10162a4 <_calloc_r+0x58>
 1016268:	2a13      	cmp	r2, #19
 101626a:	bf98      	it	ls
 101626c:	4602      	movls	r2, r0
 101626e:	d805      	bhi.n	101627c <_calloc_r+0x30>
 1016270:	2300      	movs	r3, #0
 1016272:	e9c2 3300 	strd	r3, r3, [r2]
 1016276:	6093      	str	r3, [r2, #8]
 1016278:	4620      	mov	r0, r4
 101627a:	bd10      	pop	{r4, pc}
 101627c:	2a1b      	cmp	r2, #27
 101627e:	f04f 0300 	mov.w	r3, #0
 1016282:	bf98      	it	ls
 1016284:	f100 0208 	addls.w	r2, r0, #8
 1016288:	e9c0 3300 	strd	r3, r3, [r0]
 101628c:	d9f0      	bls.n	1016270 <_calloc_r+0x24>
 101628e:	2a24      	cmp	r2, #36	; 0x24
 1016290:	e9c0 3302 	strd	r3, r3, [r0, #8]
 1016294:	bf11      	iteee	ne
 1016296:	f100 0210 	addne.w	r2, r0, #16
 101629a:	6103      	streq	r3, [r0, #16]
 101629c:	f100 0218 	addeq.w	r2, r0, #24
 10162a0:	6143      	streq	r3, [r0, #20]
 10162a2:	e7e5      	b.n	1016270 <_calloc_r+0x24>
 10162a4:	2100      	movs	r1, #0
 10162a6:	f7f6 fe1b 	bl	100cee0 <memset>
 10162aa:	4620      	mov	r0, r4
 10162ac:	bd10      	pop	{r4, pc}
 10162ae:	bf00      	nop

010162b0 <_close_r>:
 10162b0:	b538      	push	{r3, r4, r5, lr}
 10162b2:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 10162b6:	f2c0 1416 	movt	r4, #278	; 0x116
 10162ba:	4605      	mov	r5, r0
 10162bc:	4608      	mov	r0, r1
 10162be:	2300      	movs	r3, #0
 10162c0:	6023      	str	r3, [r4, #0]
 10162c2:	f000 ea60 	blx	1016784 <_close>
 10162c6:	1c43      	adds	r3, r0, #1
 10162c8:	d000      	beq.n	10162cc <_close_r+0x1c>
 10162ca:	bd38      	pop	{r3, r4, r5, pc}
 10162cc:	6823      	ldr	r3, [r4, #0]
 10162ce:	2b00      	cmp	r3, #0
 10162d0:	d0fb      	beq.n	10162ca <_close_r+0x1a>
 10162d2:	602b      	str	r3, [r5, #0]
 10162d4:	bd38      	pop	{r3, r4, r5, pc}
 10162d6:	bf00      	nop

010162d8 <__env_lock>:
 10162d8:	4770      	bx	lr
 10162da:	bf00      	nop

010162dc <__env_unlock>:
 10162dc:	4770      	bx	lr
 10162de:	bf00      	nop

010162e0 <_fclose_r>:
 10162e0:	b570      	push	{r4, r5, r6, lr}
 10162e2:	b139      	cbz	r1, 10162f4 <_fclose_r+0x14>
 10162e4:	4605      	mov	r5, r0
 10162e6:	460c      	mov	r4, r1
 10162e8:	b108      	cbz	r0, 10162ee <_fclose_r+0xe>
 10162ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 10162ec:	b383      	cbz	r3, 1016350 <_fclose_r+0x70>
 10162ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10162f2:	b913      	cbnz	r3, 10162fa <_fclose_r+0x1a>
 10162f4:	2600      	movs	r6, #0
 10162f6:	4630      	mov	r0, r6
 10162f8:	bd70      	pop	{r4, r5, r6, pc}
 10162fa:	4621      	mov	r1, r4
 10162fc:	4628      	mov	r0, r5
 10162fe:	f7fc f98d 	bl	101261c <__sflush_r>
 1016302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1016304:	4606      	mov	r6, r0
 1016306:	b133      	cbz	r3, 1016316 <_fclose_r+0x36>
 1016308:	69e1      	ldr	r1, [r4, #28]
 101630a:	4628      	mov	r0, r5
 101630c:	4798      	blx	r3
 101630e:	2800      	cmp	r0, #0
 1016310:	bfb8      	it	lt
 1016312:	f04f 36ff 	movlt.w	r6, #4294967295
 1016316:	89a3      	ldrh	r3, [r4, #12]
 1016318:	061b      	lsls	r3, r3, #24
 101631a:	d420      	bmi.n	101635e <_fclose_r+0x7e>
 101631c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 101631e:	b141      	cbz	r1, 1016332 <_fclose_r+0x52>
 1016320:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1016324:	4299      	cmp	r1, r3
 1016326:	d002      	beq.n	101632e <_fclose_r+0x4e>
 1016328:	4628      	mov	r0, r5
 101632a:	f7fc fba9 	bl	1012a80 <_free_r>
 101632e:	2300      	movs	r3, #0
 1016330:	6323      	str	r3, [r4, #48]	; 0x30
 1016332:	6c61      	ldr	r1, [r4, #68]	; 0x44
 1016334:	b121      	cbz	r1, 1016340 <_fclose_r+0x60>
 1016336:	4628      	mov	r0, r5
 1016338:	f7fc fba2 	bl	1012a80 <_free_r>
 101633c:	2300      	movs	r3, #0
 101633e:	6463      	str	r3, [r4, #68]	; 0x44
 1016340:	f7fc fb28 	bl	1012994 <__sfp_lock_acquire>
 1016344:	2300      	movs	r3, #0
 1016346:	81a3      	strh	r3, [r4, #12]
 1016348:	f7fc fb26 	bl	1012998 <__sfp_lock_release>
 101634c:	4630      	mov	r0, r6
 101634e:	bd70      	pop	{r4, r5, r6, pc}
 1016350:	f7fc fb1c 	bl	101298c <__sinit>
 1016354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1016358:	2b00      	cmp	r3, #0
 101635a:	d0cb      	beq.n	10162f4 <_fclose_r+0x14>
 101635c:	e7cd      	b.n	10162fa <_fclose_r+0x1a>
 101635e:	6921      	ldr	r1, [r4, #16]
 1016360:	4628      	mov	r0, r5
 1016362:	f7fc fb8d 	bl	1012a80 <_free_r>
 1016366:	e7d9      	b.n	101631c <_fclose_r+0x3c>

01016368 <fclose>:
 1016368:	f649 4330 	movw	r3, #39984	; 0x9c30
 101636c:	f2c0 1305 	movt	r3, #261	; 0x105
 1016370:	4601      	mov	r1, r0
 1016372:	6818      	ldr	r0, [r3, #0]
 1016374:	f7ff bfb4 	b.w	10162e0 <_fclose_r>

01016378 <__fputwc>:
 1016378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 101637c:	b082      	sub	sp, #8
 101637e:	4680      	mov	r8, r0
 1016380:	4689      	mov	r9, r1
 1016382:	4614      	mov	r4, r2
 1016384:	f7f5 fce6 	bl	100bd54 <__locale_mb_cur_max>
 1016388:	2801      	cmp	r0, #1
 101638a:	d103      	bne.n	1016394 <__fputwc+0x1c>
 101638c:	f109 33ff 	add.w	r3, r9, #4294967295
 1016390:	2bfe      	cmp	r3, #254	; 0xfe
 1016392:	d938      	bls.n	1016406 <__fputwc+0x8e>
 1016394:	466d      	mov	r5, sp
 1016396:	464a      	mov	r2, r9
 1016398:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 101639c:	4640      	mov	r0, r8
 101639e:	4629      	mov	r1, r5
 10163a0:	f7fa ffac 	bl	10112fc <_wcrtomb_r>
 10163a4:	1c42      	adds	r2, r0, #1
 10163a6:	4606      	mov	r6, r0
 10163a8:	d038      	beq.n	101641c <__fputwc+0xa4>
 10163aa:	b398      	cbz	r0, 1016414 <__fputwc+0x9c>
 10163ac:	f89d c000 	ldrb.w	ip, [sp]
 10163b0:	f1c5 0a01 	rsb	sl, r5, #1
 10163b4:	e00a      	b.n	10163cc <__fputwc+0x54>
 10163b6:	6823      	ldr	r3, [r4, #0]
 10163b8:	1c5a      	adds	r2, r3, #1
 10163ba:	6022      	str	r2, [r4, #0]
 10163bc:	f883 c000 	strb.w	ip, [r3]
 10163c0:	eb0a 0305 	add.w	r3, sl, r5
 10163c4:	429e      	cmp	r6, r3
 10163c6:	d925      	bls.n	1016414 <__fputwc+0x9c>
 10163c8:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 10163cc:	68a3      	ldr	r3, [r4, #8]
 10163ce:	f103 3eff 	add.w	lr, r3, #4294967295
 10163d2:	f8c4 e008 	str.w	lr, [r4, #8]
 10163d6:	f1be 0f00 	cmp.w	lr, #0
 10163da:	daec      	bge.n	10163b6 <__fputwc+0x3e>
 10163dc:	69a7      	ldr	r7, [r4, #24]
 10163de:	4661      	mov	r1, ip
 10163e0:	4622      	mov	r2, r4
 10163e2:	4640      	mov	r0, r8
 10163e4:	45be      	cmp	lr, r7
 10163e6:	bfb4      	ite	lt
 10163e8:	2300      	movlt	r3, #0
 10163ea:	2301      	movge	r3, #1
 10163ec:	f1bc 0f0a 	cmp.w	ip, #10
 10163f0:	bf08      	it	eq
 10163f2:	2300      	moveq	r3, #0
 10163f4:	2b00      	cmp	r3, #0
 10163f6:	d1de      	bne.n	10163b6 <__fputwc+0x3e>
 10163f8:	f000 f8a2 	bl	1016540 <__swbuf_r>
 10163fc:	1c43      	adds	r3, r0, #1
 10163fe:	d1df      	bne.n	10163c0 <__fputwc+0x48>
 1016400:	b002      	add	sp, #8
 1016402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1016406:	fa5f fc89 	uxtb.w	ip, r9
 101640a:	4606      	mov	r6, r0
 101640c:	466d      	mov	r5, sp
 101640e:	f88d c000 	strb.w	ip, [sp]
 1016412:	e7cd      	b.n	10163b0 <__fputwc+0x38>
 1016414:	4648      	mov	r0, r9
 1016416:	b002      	add	sp, #8
 1016418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 101641c:	89a3      	ldrh	r3, [r4, #12]
 101641e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1016422:	81a3      	strh	r3, [r4, #12]
 1016424:	e7ec      	b.n	1016400 <__fputwc+0x88>
 1016426:	bf00      	nop

01016428 <_fputwc_r>:
 1016428:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 101642c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 1016430:	d10b      	bne.n	101644a <_fputwc_r+0x22>
 1016432:	b410      	push	{r4}
 1016434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1016438:	6e54      	ldr	r4, [r2, #100]	; 0x64
 101643a:	8193      	strh	r3, [r2, #12]
 101643c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 1016440:	6654      	str	r4, [r2, #100]	; 0x64
 1016442:	f85d 4b04 	ldr.w	r4, [sp], #4
 1016446:	f7ff bf97 	b.w	1016378 <__fputwc>
 101644a:	f7ff bf95 	b.w	1016378 <__fputwc>
 101644e:	bf00      	nop

01016450 <fputwc>:
 1016450:	f649 4330 	movw	r3, #39984	; 0x9c30
 1016454:	f2c0 1305 	movt	r3, #261	; 0x105
 1016458:	b570      	push	{r4, r5, r6, lr}
 101645a:	4606      	mov	r6, r0
 101645c:	681d      	ldr	r5, [r3, #0]
 101645e:	460c      	mov	r4, r1
 1016460:	b10d      	cbz	r5, 1016466 <fputwc+0x16>
 1016462:	6bab      	ldr	r3, [r5, #56]	; 0x38
 1016464:	b18b      	cbz	r3, 101648a <fputwc+0x3a>
 1016466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101646a:	049a      	lsls	r2, r3, #18
 101646c:	d406      	bmi.n	101647c <fputwc+0x2c>
 101646e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 1016470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1016474:	81a3      	strh	r3, [r4, #12]
 1016476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 101647a:	6662      	str	r2, [r4, #100]	; 0x64
 101647c:	4622      	mov	r2, r4
 101647e:	4631      	mov	r1, r6
 1016480:	4628      	mov	r0, r5
 1016482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1016486:	f7ff bf77 	b.w	1016378 <__fputwc>
 101648a:	4628      	mov	r0, r5
 101648c:	f7fc fa7e 	bl	101298c <__sinit>
 1016490:	e7e9      	b.n	1016466 <fputwc+0x16>
 1016492:	bf00      	nop

01016494 <_fstat_r>:
 1016494:	b538      	push	{r3, r4, r5, lr}
 1016496:	460b      	mov	r3, r1
 1016498:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 101649c:	f2c0 1416 	movt	r4, #278	; 0x116
 10164a0:	4605      	mov	r5, r0
 10164a2:	4611      	mov	r1, r2
 10164a4:	4618      	mov	r0, r3
 10164a6:	2300      	movs	r3, #0
 10164a8:	6023      	str	r3, [r4, #0]
 10164aa:	f000 e94c 	blx	1016744 <_fstat>
 10164ae:	1c43      	adds	r3, r0, #1
 10164b0:	d000      	beq.n	10164b4 <_fstat_r+0x20>
 10164b2:	bd38      	pop	{r3, r4, r5, pc}
 10164b4:	6823      	ldr	r3, [r4, #0]
 10164b6:	2b00      	cmp	r3, #0
 10164b8:	d0fb      	beq.n	10164b2 <_fstat_r+0x1e>
 10164ba:	602b      	str	r3, [r5, #0]
 10164bc:	bd38      	pop	{r3, r4, r5, pc}
 10164be:	bf00      	nop

010164c0 <_isatty_r>:
 10164c0:	b538      	push	{r3, r4, r5, lr}
 10164c2:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 10164c6:	f2c0 1416 	movt	r4, #278	; 0x116
 10164ca:	4605      	mov	r5, r0
 10164cc:	4608      	mov	r0, r1
 10164ce:	2300      	movs	r3, #0
 10164d0:	6023      	str	r3, [r4, #0]
 10164d2:	f000 e94e 	blx	1016770 <_isatty>
 10164d6:	1c43      	adds	r3, r0, #1
 10164d8:	d000      	beq.n	10164dc <_isatty_r+0x1c>
 10164da:	bd38      	pop	{r3, r4, r5, pc}
 10164dc:	6823      	ldr	r3, [r4, #0]
 10164de:	2b00      	cmp	r3, #0
 10164e0:	d0fb      	beq.n	10164da <_isatty_r+0x1a>
 10164e2:	602b      	str	r3, [r5, #0]
 10164e4:	bd38      	pop	{r3, r4, r5, pc}
 10164e6:	bf00      	nop

010164e8 <_lseek_r>:
 10164e8:	b570      	push	{r4, r5, r6, lr}
 10164ea:	460d      	mov	r5, r1
 10164ec:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 10164f0:	f2c0 1416 	movt	r4, #278	; 0x116
 10164f4:	4611      	mov	r1, r2
 10164f6:	4606      	mov	r6, r0
 10164f8:	461a      	mov	r2, r3
 10164fa:	4628      	mov	r0, r5
 10164fc:	2300      	movs	r3, #0
 10164fe:	6023      	str	r3, [r4, #0]
 1016500:	f000 e8ac 	blx	101665c <_lseek>
 1016504:	1c43      	adds	r3, r0, #1
 1016506:	d000      	beq.n	101650a <_lseek_r+0x22>
 1016508:	bd70      	pop	{r4, r5, r6, pc}
 101650a:	6823      	ldr	r3, [r4, #0]
 101650c:	2b00      	cmp	r3, #0
 101650e:	d0fb      	beq.n	1016508 <_lseek_r+0x20>
 1016510:	6033      	str	r3, [r6, #0]
 1016512:	bd70      	pop	{r4, r5, r6, pc}

01016514 <_read_r>:
 1016514:	b570      	push	{r4, r5, r6, lr}
 1016516:	460d      	mov	r5, r1
 1016518:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
 101651c:	f2c0 1416 	movt	r4, #278	; 0x116
 1016520:	4611      	mov	r1, r2
 1016522:	4606      	mov	r6, r0
 1016524:	461a      	mov	r2, r3
 1016526:	4628      	mov	r0, r5
 1016528:	2300      	movs	r3, #0
 101652a:	6023      	str	r3, [r4, #0]
 101652c:	f000 e908 	blx	1016740 <_read>
 1016530:	1c43      	adds	r3, r0, #1
 1016532:	d000      	beq.n	1016536 <_read_r+0x22>
 1016534:	bd70      	pop	{r4, r5, r6, pc}
 1016536:	6823      	ldr	r3, [r4, #0]
 1016538:	2b00      	cmp	r3, #0
 101653a:	d0fb      	beq.n	1016534 <_read_r+0x20>
 101653c:	6033      	str	r3, [r6, #0]
 101653e:	bd70      	pop	{r4, r5, r6, pc}

01016540 <__swbuf_r>:
 1016540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1016542:	460d      	mov	r5, r1
 1016544:	4614      	mov	r4, r2
 1016546:	4606      	mov	r6, r0
 1016548:	b110      	cbz	r0, 1016550 <__swbuf_r+0x10>
 101654a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 101654c:	2b00      	cmp	r3, #0
 101654e:	d03a      	beq.n	10165c6 <__swbuf_r+0x86>
 1016550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1016554:	69a3      	ldr	r3, [r4, #24]
 1016556:	b291      	uxth	r1, r2
 1016558:	0708      	lsls	r0, r1, #28
 101655a:	60a3      	str	r3, [r4, #8]
 101655c:	d51e      	bpl.n	101659c <__swbuf_r+0x5c>
 101655e:	6923      	ldr	r3, [r4, #16]
 1016560:	b1e3      	cbz	r3, 101659c <__swbuf_r+0x5c>
 1016562:	b2ed      	uxtb	r5, r5
 1016564:	0489      	lsls	r1, r1, #18
 1016566:	462f      	mov	r7, r5
 1016568:	d525      	bpl.n	10165b6 <__swbuf_r+0x76>
 101656a:	6822      	ldr	r2, [r4, #0]
 101656c:	6961      	ldr	r1, [r4, #20]
 101656e:	1ad3      	subs	r3, r2, r3
 1016570:	4299      	cmp	r1, r3
 1016572:	bfc8      	it	gt
 1016574:	3301      	addgt	r3, #1
 1016576:	dd32      	ble.n	10165de <__swbuf_r+0x9e>
 1016578:	68a1      	ldr	r1, [r4, #8]
 101657a:	1c50      	adds	r0, r2, #1
 101657c:	6020      	str	r0, [r4, #0]
 101657e:	3901      	subs	r1, #1
 1016580:	60a1      	str	r1, [r4, #8]
 1016582:	7015      	strb	r5, [r2, #0]
 1016584:	6962      	ldr	r2, [r4, #20]
 1016586:	429a      	cmp	r2, r3
 1016588:	d020      	beq.n	10165cc <__swbuf_r+0x8c>
 101658a:	7b23      	ldrb	r3, [r4, #12]
 101658c:	2d0a      	cmp	r5, #10
 101658e:	bf14      	ite	ne
 1016590:	2500      	movne	r5, #0
 1016592:	f003 0501 	andeq.w	r5, r3, #1
 1016596:	b9cd      	cbnz	r5, 10165cc <__swbuf_r+0x8c>
 1016598:	4638      	mov	r0, r7
 101659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101659c:	4621      	mov	r1, r4
 101659e:	4630      	mov	r0, r6
 10165a0:	f7fb f836 	bl	1011610 <__swsetup_r>
 10165a4:	b9c0      	cbnz	r0, 10165d8 <__swbuf_r+0x98>
 10165a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 10165aa:	b2ed      	uxtb	r5, r5
 10165ac:	6923      	ldr	r3, [r4, #16]
 10165ae:	462f      	mov	r7, r5
 10165b0:	b291      	uxth	r1, r2
 10165b2:	0489      	lsls	r1, r1, #18
 10165b4:	d4d9      	bmi.n	101656a <__swbuf_r+0x2a>
 10165b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 10165b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 10165bc:	81a2      	strh	r2, [r4, #12]
 10165be:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 10165c2:	6661      	str	r1, [r4, #100]	; 0x64
 10165c4:	e7d1      	b.n	101656a <__swbuf_r+0x2a>
 10165c6:	f7fc f9e1 	bl	101298c <__sinit>
 10165ca:	e7c1      	b.n	1016550 <__swbuf_r+0x10>
 10165cc:	4621      	mov	r1, r4
 10165ce:	4630      	mov	r0, r6
 10165d0:	f7fc f8ca 	bl	1012768 <_fflush_r>
 10165d4:	2800      	cmp	r0, #0
 10165d6:	d0df      	beq.n	1016598 <__swbuf_r+0x58>
 10165d8:	f04f 37ff 	mov.w	r7, #4294967295
 10165dc:	e7dc      	b.n	1016598 <__swbuf_r+0x58>
 10165de:	4621      	mov	r1, r4
 10165e0:	4630      	mov	r0, r6
 10165e2:	f7fc f8c1 	bl	1012768 <_fflush_r>
 10165e6:	2800      	cmp	r0, #0
 10165e8:	d1f6      	bne.n	10165d8 <__swbuf_r+0x98>
 10165ea:	6822      	ldr	r2, [r4, #0]
 10165ec:	2301      	movs	r3, #1
 10165ee:	e7c3      	b.n	1016578 <__swbuf_r+0x38>

010165f0 <__swbuf>:
 10165f0:	f649 4330 	movw	r3, #39984	; 0x9c30
 10165f4:	f2c0 1305 	movt	r3, #261	; 0x105
 10165f8:	460a      	mov	r2, r1
 10165fa:	4601      	mov	r1, r0
 10165fc:	6818      	ldr	r0, [r3, #0]
 10165fe:	f7ff bf9f 	b.w	1016540 <__swbuf_r>
 1016602:	bf00      	nop

01016604 <_sbrk>:
  static u8 *heap = NULL;
  u8 *prev_heap;
  static u8 *HeapEndPtr = (u8 *)&_heap_end;
  caddr_t Status;

  if (heap == NULL) {
 1016604:	e300232c 	movw	r2, #812	; 0x32c
 1016608:	e3402106 	movt	r2, #262	; 0x106
 101660c:	e5923000 	ldr	r3, [r2]
 1016610:	e3530000 	cmp	r3, #0
    heap = (u8 *)&_heap_start;
 1016614:	030a14e0 	movweq	r1, #42208	; 0xa4e0
 1016618:	03401116 	movteq	r1, #278	; 0x116
 101661c:	01a03001 	moveq	r3, r1
 1016620:	05821000 	streq	r1, [r2]
  }
  prev_heap = heap;

	if (((heap + incr) <= HeapEndPtr) && (prev_heap != NULL)) {
 1016624:	e30a14e0 	movw	r1, #42208	; 0xa4e0
 1016628:	e0830000 	add	r0, r3, r0
 101662c:	e3401d16 	movt	r1, #3350	; 0xd16
 1016630:	e1500001 	cmp	r0, r1
  heap += incr;
	  Status = (caddr_t) ((void *)prev_heap);
	} else {
	  Status = (caddr_t) -1;
 1016634:	83e03000 	mvnhi	r3, #0
  heap += incr;
 1016638:	95820000 	strls	r0, [r2]
  }

  return Status;
}
 101663c:	e1a00003 	mov	r0, r3
 1016640:	e12fff1e 	bx	lr

01016644 <lseek>:
#endif
/*
 * lseek --  Since a serial port is non-seekable, we return an error.
 */
__attribute__((weak)) off_t lseek(s32 fd, off_t offset, s32 whence)
{
 1016644:	e92d4010 	push	{r4, lr}
  (void)fd;
  (void)offset;
  (void)whence;
  errno = ESPIPE;
 1016648:	eb000041 	bl	1016754 <__errno>
 101664c:	e3a0301d 	mov	r3, #29
 1016650:	e5803000 	str	r3, [r0]
  return ((off_t)-1);
}
 1016654:	e3e00000 	mvn	r0, #0
 1016658:	e8bd8010 	pop	{r4, pc}

0101665c <_lseek>:
 101665c:	e92d4010 	push	{r4, lr}
 1016660:	eb00003b 	bl	1016754 <__errno>
 1016664:	e3a0301d 	mov	r3, #29
 1016668:	e5803000 	str	r3, [r0]
 101666c:	e3e00000 	mvn	r0, #0
 1016670:	e8bd8010 	pop	{r4, pc}

01016674 <write>:
 *          open will only return an error.
 */
__attribute__((weak)) sint32
write (sint32 fd, char8* buf, sint32 nbytes)

{
 1016674:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
#ifdef STDOUT_BASEADDRESS
  s32 i;
  char8* LocalBuf = buf;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
 1016678:	e2526000 	subs	r6, r2, #0
 101667c:	da000015 	ble	10166d8 <write+0x64>
 1016680:	e1a04001 	mov	r4, r1
 1016684:	e3a03000 	mov	r3, #0
 1016688:	ea000003 	b	101669c <write+0x28>
	}
	if(LocalBuf != NULL) {
	    if (*LocalBuf == '\n') {
	      outbyte ('\r');
	    }
	    outbyte (*LocalBuf);
 101668c:	ebffcd96 	bl	1009cec <outbyte>
  for (i = 0; i < nbytes; i++) {
 1016690:	e1560005 	cmp	r6, r5
 1016694:	e1a03005 	mov	r3, r5
 1016698:	da00000e 	ble	10166d8 <write+0x64>
	if(LocalBuf != NULL) {
 101669c:	e3540000 	cmp	r4, #0
 10166a0:	e2835001 	add	r5, r3, #1
 10166a4:	0a00000b 	beq	10166d8 <write+0x64>
	if(LocalBuf != NULL) {
 10166a8:	e0947003 	adds	r7, r4, r3
 10166ac:	0a000009 	beq	10166d8 <write+0x64>
	    if (*LocalBuf == '\n') {
 10166b0:	e7d40003 	ldrb	r0, [r4, r3]
 10166b4:	e350000a 	cmp	r0, #10
 10166b8:	1afffff3 	bne	101668c <write+0x18>
	      outbyte ('\r');
 10166bc:	e3a0000d 	mov	r0, #13
 10166c0:	ebffcd89 	bl	1009cec <outbyte>
 10166c4:	e5d70000 	ldrb	r0, [r7]
	    outbyte (*LocalBuf);
 10166c8:	ebffcd87 	bl	1009cec <outbyte>
  for (i = 0; i < nbytes; i++) {
 10166cc:	e1560005 	cmp	r6, r5
 10166d0:	e1a03005 	mov	r3, r5
 10166d4:	cafffff0 	bgt	101669c <write+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 10166d8:	e1a00006 	mov	r0, r6
 10166dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

010166e0 <_write>:
 10166e0:	eaffffe3 	b	1016674 <write>

010166e4 <read>:
  s32 i;
  s32 numbytes = 0;
  char8* LocalBuf = buf;

  (void)fd;
  if(LocalBuf != NULL) {
 10166e4:	e3510000 	cmp	r1, #0
 10166e8:	0a000012 	beq	1016738 <read+0x54>
	for (i = 0; i < nbytes; i++) {
 10166ec:	e3520000 	cmp	r2, #0
 10166f0:	da00000f 	ble	1016734 <read+0x50>
 10166f4:	e2422001 	sub	r2, r2, #1
{
 10166f8:	e92d4070 	push	{r4, r5, r6, lr}
 10166fc:	e2414001 	sub	r4, r1, #1
 1016700:	e0815002 	add	r5, r1, r2
 1016704:	e2616002 	rsb	r6, r1, #2
 1016708:	ea000001 	b	1016714 <read+0x30>
	for (i = 0; i < nbytes; i++) {
 101670c:	e1540005 	cmp	r4, r5
 1016710:	0a000005 	beq	101672c <read+0x48>
		numbytes++;
		*(LocalBuf + i) = inbyte();
 1016714:	eb000017 	bl	1016778 <inbyte>
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1016718:	e350000d 	cmp	r0, #13
 101671c:	1350000a 	cmpne	r0, #10
 1016720:	e0861004 	add	r1, r6, r4
		*(LocalBuf + i) = inbyte();
 1016724:	e5e40001 	strb	r0, [r4, #1]!
		if ((*(LocalBuf + i) == '\n' )|| (*(LocalBuf + i) == '\r')) {
 1016728:	1afffff7 	bne	101670c <read+0x28>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
 101672c:	e1a00001 	mov	r0, r1
 1016730:	e8bd8070 	pop	{r4, r5, r6, pc}
  s32 numbytes = 0;
 1016734:	e3a01000 	mov	r1, #0
}
 1016738:	e1a00001 	mov	r0, r1
 101673c:	e12fff1e 	bx	lr

01016740 <_read>:
 1016740:	eaffffe7 	b	10166e4 <read>

01016744 <_fstat>:
 * fstat -- Since we have no file system, we just return an error.
 */
__attribute__((weak)) s32 _fstat(s32 fd, struct stat *buf)
{
  (void)fd;
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 1016744:	e3a03a02 	mov	r3, #8192	; 0x2000

  return (0);
}
 1016748:	e3a00000 	mov	r0, #0
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
 101674c:	e5813004 	str	r3, [r1, #4]
}
 1016750:	e12fff1e 	bx	lr

01016754 <__errno>:
#endif

__attribute__((weak)) sint32 *
__errno (void)
{
  return &_REENT->_errno;
 1016754:	e3093c30 	movw	r3, #39984	; 0x9c30
 1016758:	e3403105 	movt	r3, #261	; 0x105
}
 101675c:	e5930000 	ldr	r0, [r3]
 1016760:	e12fff1e 	bx	lr

01016764 <_exit>:
*/
__attribute__((weak)) void _exit (sint32 status)
{
  (void)status;
  while (1) {
	;
 1016764:	eafffffe 	b	1016764 <_exit>

01016768 <isatty>:
 */
__attribute__((weak)) sint32 isatty(sint32 fd)
{
  (void)fd;
  return (1);
}
 1016768:	e3a00001 	mov	r0, #1
 101676c:	e12fff1e 	bx	lr

01016770 <_isatty>:
 1016770:	e3a00001 	mov	r0, #1
 1016774:	e12fff1e 	bx	lr

01016778 <inbyte>:
#ifdef __cplusplus
}
#endif 

char inbyte(void) {
	 return XUartPs_RecvByte(STDIN_BASEADDRESS);
 1016778:	e3a00a01 	mov	r0, #4096	; 0x1000
 101677c:	e34e0000 	movt	r0, #57344	; 0xe000
 1016780:	eaffcf4e 	b	100a4c0 <XUartPs_RecvByte>

01016784 <_close>:

__attribute__((weak)) s32 _close(s32 fd)
{
  (void)fd;
  return (0);
}
 1016784:	e3a00000 	mov	r0, #0
 1016788:	e12fff1e 	bx	lr

0101678c <main>:

//uint8_t src_buffer[16384] __attribute__((aligned(32)));
//uint8_t dest_buffer[16384] __attribute__((aligned(32)));

int main()
{
 101678c:	e92d4010 	push	{r4, lr}
	int res, i = 0;

	Xil_DCacheDisable();
 1016790:	ebffcc90 	bl	10099d8 <Xil_DCacheDisable>

	hal_init();
 1016794:	ebffb58b 	bl	1003dc8 <hal_init>
	acq_init();
 1016798:	ebffa992 	bl	1000de8 <acq_init>

	d_printf(D_INFO, "Press key to start...");
 101679c:	e30819dc 	movw	r1, #35292	; 0x89dc
 10167a0:	e3a00002 	mov	r0, #2
 10167a4:	e3401105 	movt	r1, #261	; 0x105
 10167a8:	ebffb510 	bl	1003bf0 <d_printf>
	d_waitkey();
 10167ac:	ebffb6c5 	bl	10042c8 <d_waitkey>

	acq_hacks_init();
 10167b0:	ebffa774 	bl	1000588 <acq_hacks_init>
	acq_hacks_run();
 10167b4:	ebffa774 	bl	100058c <acq_hacks_run>

    cleanup_platform();
 10167b8:	ebffb81c 	bl	1004830 <cleanup_platform>
}
 10167bc:	e3a00000 	mov	r0, #0
 10167c0:	e8bd8010 	pop	{r4, pc}

Disassembly of section .init:

010167c4 <_init>:
 10167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10167c6:	bf00      	nop
 10167c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10167ca:	bc08      	pop	{r3}
 10167cc:	469e      	mov	lr, r3
 10167ce:	4770      	bx	lr

Disassembly of section .fini:

010167d0 <_fini>:
 10167d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10167d2:	bf00      	nop
 10167d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10167d6:	bc08      	pop	{r3}
 10167d8:	469e      	mov	lr, r3
 10167da:	4770      	bx	lr
