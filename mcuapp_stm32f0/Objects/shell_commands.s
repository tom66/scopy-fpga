; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -o.\objects\shell_commands.o --depend=.\objects\shell_commands.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -IC:\Users\Tom\Documents\Projects\Scopy_MVP_Platform\scopy-fpga\mcuapp_stm32f0\RTE -IC:\Users\Tom\Documents\Projects\Scopy_MVP_Platform\scopy-fpga\mcuapp_stm32f0\RTE\Device\STM32F071VBTx -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc\Legacy -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F071xB --omf_browse=.\objects\shell_commands.crf shell_commands.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.scmd_adc_lvds_adv||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_adv PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        SXTB     r0,r0
        LDR      r1,|L1.60|
        STRB     r0,[r1,#6]
        MOVS     r0,#6
        LDRSB    r0,[r1,r0]  ; hmcad151x_state
        MOVS     r1,#0
        MVNS     r1,r1
        CMP      r0,r1
        BLT      |L1.34|
        LDR      r0,|L1.60|
        MOVS     r1,#6
        LDRSB    r1,[r0,r1]  ; hmcad151x_state
        CMP      r1,#1
        BLE      |L1.40|
|L1.34|
        MOVS     r0,#0
        LDR      r1,|L1.60|
        STRB     r0,[r1,#6]
|L1.40|
        BL       hmcad151x_sync_lvds_settings
        LDR      r0,|L1.60|
        MOVS     r1,#6
        LDRSB    r1,[r0,r1]  ; hmcad151x_state
        ADR      r0,|L1.64|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.60|
        DCD      hmcad151x_state
|L1.64|
        DCB      "ADC LVDS adv/delay = %d\r\n",0
        DCB      0
        DCB      0

        AREA ||i.scmd_adc_lvds_cdrv||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_cdrv PROC
        PUSH     {r4-r6,lr}
        BL       shell_unpop_int
        LDR      r1,|L2.52|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#0]
        BL       hmcad151x_sync_lvds_settings
        LDR      r1,|L2.52|
        LDRB     r1,[r1,#0]  ; hmcad151x_state
        LSLS     r1,r1,#2
        LDR      r2,|L2.56|
        LDR      r0,[r2,r1]
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L2.60|
        BL       uart_printf
        POP      {r4-r6,pc}
        ENDP

|L2.52|
        DCD      hmcad151x_state
|L2.56|
        DCD      hmcad_lvds_current_lut
|L2.60|
        DCB      "ADC LVDS drive [clock] = %2.1f mA\r\n",0

        AREA ||i.scmd_adc_lvds_cterm||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_cterm PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        LDR      r1,|L3.44|
        STRB     r0,[r1,#3]
        MOV      r0,r1
        LDRB     r0,[r0,#3]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#3]
        BL       hmcad151x_sync_lvds_settings
        LDR      r0,|L3.44|
        LDRB     r0,[r0,#3]  ; hmcad151x_state
        LSLS     r0,r0,#1
        LDR      r2,|L3.48|
        LDRH     r1,[r2,r0]
        ADR      r0,|L3.52|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L3.44|
        DCD      hmcad151x_state
|L3.48|
        DCD      hmcad_lvds_term_lut
|L3.52|
        DCB      "ADC LVDS term [clock] = %d\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.scmd_adc_lvds_ddrv||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_ddrv PROC
        PUSH     {r4-r6,lr}
        BL       shell_unpop_int
        LDR      r1,|L4.52|
        STRB     r0,[r1,#2]
        MOV      r0,r1
        LDRB     r0,[r0,#2]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#2]
        BL       hmcad151x_sync_lvds_settings
        LDR      r1,|L4.52|
        LDRB     r1,[r1,#2]  ; hmcad151x_state
        LSLS     r1,r1,#2
        LDR      r2,|L4.56|
        LDR      r0,[r2,r1]
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L4.60|
        BL       uart_printf
        POP      {r4-r6,pc}
        ENDP

|L4.52|
        DCD      hmcad151x_state
|L4.56|
        DCD      hmcad_lvds_current_lut
|L4.60|
        DCB      "ADC LVDS drive [data ] = %2.1f mA\r\n",0

        AREA ||i.scmd_adc_lvds_def||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_def PROC
        PUSH     {r4,lr}
        MOVS     r0,#0
        LDR      r1,|L5.36|
        STRB     r0,[r1,#7]
        STRB     r0,[r1,#6]
        STRB     r0,[r1,#3]
        STRB     r0,[r1,#4]
        STRB     r0,[r1,#5]
        STRB     r0,[r1,#0]
        STRB     r0,[r1,#1]
        STRB     r0,[r1,#2]
        BL       hmcad151x_sync_lvds_settings
        ADR      r0,|L5.40|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L5.36|
        DCD      hmcad151x_state
|L5.40|
        DCB      "ADC LVDS settings set to default.\r\n",0

        AREA ||i.scmd_adc_lvds_drv||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_drv PROC
        PUSH     {r4-r6,lr}
        BL       shell_unpop_int
        LDR      r1,|L6.140|
        STRB     r0,[r1,#2]
        MOV      r0,r1
        LDRB     r0,[r0,#2]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#2]
        BL       shell_unpop_int
        LDR      r1,|L6.140|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r0,[r0,#1]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#1]
        BL       shell_unpop_int
        LDR      r1,|L6.140|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#0]
        BL       hmcad151x_sync_lvds_settings
        LDR      r1,|L6.140|
        LDRB     r1,[r1,#2]  ; hmcad151x_state
        LSLS     r1,r1,#2
        LDR      r2,|L6.144|
        LDR      r0,[r2,r1]
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L6.148|
        BL       uart_printf
        LDR      r1,|L6.140|
        LDRB     r1,[r1,#1]  ; hmcad151x_state
        LSLS     r1,r1,#2
        LDR      r2,|L6.144|
        LDR      r0,[r2,r1]
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L6.184|
        BL       uart_printf
        LDR      r1,|L6.140|
        LDRB     r1,[r1,#0]  ; hmcad151x_state
        LSLS     r1,r1,#2
        LDR      r2,|L6.144|
        LDR      r0,[r2,r1]
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L6.220|
        BL       uart_printf
        POP      {r4-r6,pc}
        ENDP

|L6.140|
        DCD      hmcad151x_state
|L6.144|
        DCD      hmcad_lvds_current_lut
|L6.148|
        DCB      "ADC LVDS drive [data ] = %2.1f mA\r\n",0
|L6.184|
        DCB      "ADC LVDS drive [frame] = %2.1f mA\r\n",0
|L6.220|
        DCB      "ADC LVDS drive [clock] = %2.1f mA\r\n",0

        AREA ||i.scmd_adc_lvds_dterm||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_dterm PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        LDR      r1,|L7.44|
        STRB     r0,[r1,#5]
        MOV      r0,r1
        LDRB     r0,[r0,#5]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#5]
        BL       hmcad151x_sync_lvds_settings
        LDR      r0,|L7.44|
        LDRB     r0,[r0,#5]  ; hmcad151x_state
        LSLS     r0,r0,#1
        LDR      r2,|L7.48|
        LDRH     r1,[r2,r0]
        ADR      r0,|L7.52|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L7.44|
        DCD      hmcad151x_state
|L7.48|
        DCD      hmcad_lvds_term_lut
|L7.52|
        DCB      "ADC LVDS term [data ] = %d\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.scmd_adc_lvds_fdrv||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_fdrv PROC
        PUSH     {r4-r6,lr}
        BL       shell_unpop_int
        LDR      r1,|L8.52|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r0,[r0,#1]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#1]
        BL       hmcad151x_sync_lvds_settings
        LDR      r1,|L8.52|
        LDRB     r1,[r1,#1]  ; hmcad151x_state
        LSLS     r1,r1,#2
        LDR      r2,|L8.56|
        LDR      r0,[r2,r1]
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L8.60|
        BL       uart_printf
        POP      {r4-r6,pc}
        ENDP

|L8.52|
        DCD      hmcad151x_state
|L8.56|
        DCD      hmcad_lvds_current_lut
|L8.60|
        DCB      "ADC LVDS drive [frame] = %2.1f mA\r\n",0

        AREA ||i.scmd_adc_lvds_fterm||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_fterm PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        LDR      r1,|L9.44|
        STRB     r0,[r1,#4]
        MOV      r0,r1
        LDRB     r0,[r0,#4]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#4]
        BL       hmcad151x_sync_lvds_settings
        LDR      r0,|L9.44|
        LDRB     r0,[r0,#4]  ; hmcad151x_state
        LSLS     r0,r0,#1
        LDR      r2,|L9.48|
        LDRH     r1,[r2,r0]
        ADR      r0,|L9.52|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L9.44|
        DCD      hmcad151x_state
|L9.48|
        DCD      hmcad_lvds_term_lut
|L9.52|
        DCB      "ADC LVDS term [frame] = %d\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.scmd_adc_lvds_phas||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_phas PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        LDR      r1,|L10.36|
        STRB     r0,[r1,#7]
        MOV      r0,r1
        LDRB     r0,[r0,#7]  ; hmcad151x_state
        LSLS     r0,r0,#30
        LSRS     r0,r0,#30
        STRB     r0,[r1,#7]
        BL       hmcad151x_sync_lvds_settings
        LDR      r0,|L10.36|
        LDRB     r1,[r0,#7]  ; hmcad151x_state
        ADR      r0,|L10.40|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

|L10.36|
        DCD      hmcad151x_state
|L10.40|
        DCB      "ADC LVDS phase register now = %d\r\n",0
        DCB      0

        AREA ||i.scmd_adc_lvds_term||, CODE, READONLY, ALIGN=2

scmd_adc_lvds_term PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        LDR      r1,|L11.112|
        STRB     r0,[r1,#5]
        MOV      r0,r1
        LDRB     r0,[r0,#5]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#5]
        BL       shell_unpop_int
        LDR      r1,|L11.112|
        STRB     r0,[r1,#4]
        MOV      r0,r1
        LDRB     r0,[r0,#4]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#4]
        BL       shell_unpop_int
        LDR      r1,|L11.112|
        STRB     r0,[r1,#3]
        MOV      r0,r1
        LDRB     r0,[r0,#3]  ; hmcad151x_state
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STRB     r0,[r1,#3]
        BL       hmcad151x_sync_lvds_settings
        LDR      r0,|L11.112|
        LDRB     r0,[r0,#5]  ; hmcad151x_state
        LSLS     r0,r0,#1
        LDR      r2,|L11.116|
        LDRH     r1,[r2,r0]
        ADR      r0,|L11.120|
        BL       uart_printf
        LDR      r0,|L11.112|
        LDRB     r0,[r0,#4]  ; hmcad151x_state
        LSLS     r0,r0,#1
        LDR      r2,|L11.116|
        LDRH     r1,[r2,r0]
        ADR      r0,|L11.156|
        BL       uart_printf
        LDR      r0,|L11.112|
        LDRB     r0,[r0,#3]  ; hmcad151x_state
        LSLS     r0,r0,#1
        LDR      r2,|L11.116|
        LDRH     r1,[r2,r0]
        ADR      r0,|L11.192|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L11.112|
        DCD      hmcad151x_state
|L11.116|
        DCD      hmcad_lvds_term_lut
|L11.120|
        DCB      "ADC LVDS term [data ] = %d ohms\r\n",0
        DCB      0
        DCB      0
|L11.156|
        DCB      "ADC LVDS term [frame] = %d ohms\r\n",0
        DCB      0
        DCB      0
|L11.192|
        DCB      "ADC LVDS term [clock] = %d ohms\r\n",0
        DCB      0
        DCB      0

        AREA ||i.scmd_adc_pwr||, CODE, READONLY, ALIGN=2

scmd_adc_pwr PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        MOV      r4,r0
        CMP      r4,#0
        BEQ      |L12.28|
        BL       main_psu_power_on_if_off
        BL       hmcad151x_init
        ADR      r0,|L12.40|
        BL       uart_printf
        B        |L12.38|
|L12.28|
        BL       adc_power_off
        ADR      r0,|L12.56|
        BL       uart_printf
|L12.38|
        POP      {r4,pc}
        ENDP

|L12.40|
        DCB      "adc: power up\r\n",0
|L12.56|
        DCB      "adc: power down\r\n",0
        DCB      0
        DCB      0

        AREA ||i.scmd_adc_reset||, CODE, READONLY, ALIGN=1

scmd_adc_reset PROC
        PUSH     {r4,lr}
        BL       adc_power_off
        BL       adc_power_on
        BL       hmcad151x_init
        POP      {r4,pc}
        ENDP


        AREA ||i.scmd_adc_test||, CODE, READONLY, ALIGN=2

scmd_adc_test PROC
        PUSH     {r3-r7,lr}
        BL       shell_unpop_string
        MOV      r4,r0
        BL       shell_unpop_int
        MOV      r6,r0
        LDRB     r0,[r4,#0]
        CMP      r0,#0x30
        BLT      |L14.32|
        LDRB     r0,[r4,#0]
        CMP      r0,#0x39
        BGT      |L14.32|
        LDRB     r0,[r4,#0]
        SUBS     r0,r0,#0x30
        B        |L14.64|
|L14.32|
        LDRB     r0,[r4,#0]
        BL       toupper
        CMP      r0,#0x41
        BLT      |L14.62|
        LDRB     r0,[r4,#0]
        BL       toupper
        CMP      r0,#0x46
        BGT      |L14.62|
        LDRB     r0,[r4,#0]
        BL       toupper
        SUBS     r0,r0,#0x37
        B        |L14.64|
|L14.62|
        MOVS     r0,#0
|L14.64|
        LSLS     r7,r0,#12
        LDRB     r0,[r4,#1]
        CMP      r0,#0x30
        BLT      |L14.84|
        LDRB     r0,[r4,#1]
        CMP      r0,#0x39
        BGT      |L14.84|
        LDRB     r0,[r4,#1]
        SUBS     r0,r0,#0x30
        B        |L14.116|
|L14.84|
        LDRB     r0,[r4,#1]
        BL       toupper
        CMP      r0,#0x41
        BLT      |L14.114|
        LDRB     r0,[r4,#1]
        BL       toupper
        CMP      r0,#0x46
        BGT      |L14.114|
        LDRB     r0,[r4,#1]
        BL       toupper
        SUBS     r0,r0,#0x37
        B        |L14.116|
|L14.114|
        MOVS     r0,#0
|L14.116|
        LSLS     r0,r0,#8
        ORRS     r7,r7,r0
        LDRB     r0,[r4,#2]
        CMP      r0,#0x30
        BLT      |L14.138|
        LDRB     r0,[r4,#2]
        CMP      r0,#0x39
        BGT      |L14.138|
        LDRB     r0,[r4,#2]
        SUBS     r0,r0,#0x30
        B        |L14.170|
|L14.138|
        LDRB     r0,[r4,#2]
        BL       toupper
        CMP      r0,#0x41
        BLT      |L14.168|
        LDRB     r0,[r4,#2]
        BL       toupper
        CMP      r0,#0x46
        BGT      |L14.168|
        LDRB     r0,[r4,#2]
        BL       toupper
        SUBS     r0,r0,#0x37
        B        |L14.170|
|L14.168|
        MOVS     r0,#0
|L14.170|
        LSLS     r0,r0,#4
        ORRS     r7,r7,r0
        LDRB     r0,[r4,#3]
        CMP      r0,#0x30
        BLT      |L14.192|
        LDRB     r0,[r4,#3]
        CMP      r0,#0x39
        BGT      |L14.192|
        LDRB     r0,[r4,#3]
        SUBS     r0,r0,#0x30
        B        |L14.224|
|L14.192|
        LDRB     r0,[r4,#3]
        BL       toupper
        CMP      r0,#0x41
        BLT      |L14.222|
        LDRB     r0,[r4,#3]
        BL       toupper
        CMP      r0,#0x46
        BGT      |L14.222|
        LDRB     r0,[r4,#3]
        BL       toupper
        SUBS     r0,r0,#0x37
        B        |L14.224|
|L14.222|
        MOVS     r0,#0
|L14.224|
        ORRS     r7,r7,r0
        UXTH     r5,r7
        MOV      r2,r5
        MOV      r1,r6
        ADR      r0,|L14.248|
        BL       uart_printf
        MOV      r1,r5
        MOV      r0,r6
        BL       hmcad151x_test_mode
        POP      {r3-r7,pc}
        ENDP

|L14.248|
        DCB      "adc: test mode %d hex word 0x%04x\r\n",0

        AREA ||i.scmd_adc_walk||, CODE, READONLY, ALIGN=2

scmd_adc_walk PROC
        PUSH     {r3-r7,lr}
        MOVS     r0,#1
        STR      r0,[sp,#0]
        MOVS     r4,#0
        MOVS     r7,#1
        MOVS     r5,#0
        ADR      r0,|L15.136|
        BL       uart_printf
        B        |L15.122|
|L15.20|
        MOVS     r4,#0
        B        |L15.118|
|L15.24|
        MOVS     r0,#1
        LSLS     r0,r0,r4
        UXTB     r0,r0
        STR      r0,[sp,#0]
        MOVS     r0,#3
        LDR      r1,[sp,#0]
        BL       hmcad151x_test_mode
        ADR      r0,|L15.180|
        LDR      r1,[sp,#0]
        BL       uart_printf
        MOVS     r5,#0
        B        |L15.72|
|L15.52|
        CMP      r5,r4
        BNE      |L15.64|
        ADR      r0,|L15.200|
        BL       uart_putsraw
        B        |L15.70|
|L15.64|
        ADR      r0,|L15.204|
        BL       uart_putsraw
|L15.70|
        ADDS     r5,r5,#1
|L15.72|
        CMP      r5,#8
        BCC      |L15.52|
        ADR      r0,|L15.208|
        BL       uart_printf
        MOVS     r6,#0xff
        ADDS     r6,r6,#0xf5
        B        |L15.110|
|L15.88|
        MOVS     r0,#1
        BL       systick_wait
        BL       uart_getchar_nb
        CMP      r0,#0x78
        BNE      |L15.108|
        MOVS     r7,#0
        MOVS     r4,#9
        B        |L15.114|
|L15.108|
        SUBS     r6,r6,#1
|L15.110|
        CMP      r6,#0
        BNE      |L15.88|
|L15.114|
        NOP      
        ADDS     r4,r4,#1
|L15.118|
        CMP      r4,#8
        BCC      |L15.24|
|L15.122|
        CMP      r7,#0
        BNE      |L15.20|
        MOVS     r1,#0
        MOV      r0,r1
        BL       hmcad151x_test_mode
        POP      {r3-r7,pc}
        ENDP

|L15.136|
        DCB      "Walk test running, press 'x' to abort.\r\n\r\n",0
        DCB      0
|L15.180|
        DCB      "Walking: 0x%02x (",0
        DCB      0
        DCB      0
|L15.200|
        DCB      "1",0
        DCB      0
        DCB      0
|L15.204|
        DCB      "0",0
        DCB      0
        DCB      0
|L15.208|
        DCB      ")\r\n",0

        AREA ||i.scmd_all_off||, CODE, READONLY, ALIGN=2

scmd_all_off PROC
        PUSH     {r4,lr}
        BL       zynq_power_off
        BL       raspi_power_off
        BL       adf435x_shutdown
        BL       adc_power_off
        BL       main_psu_power_off
        ADR      r0,|L16.32|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L16.32|
        DCB      "pwr: everything goes dark\r\n",0

        AREA ||i.scmd_help||, CODE, READONLY, ALIGN=1

scmd_help PROC
        PUSH     {r4,lr}
        BL       shell_print_help
        POP      {r4,pc}
        ENDP


        AREA ||i.scmd_pll_freq||, CODE, READONLY, ALIGN=2

scmd_pll_freq PROC
        PUSH     {r4-r6,lr}
        BL       shell_unpop_float
        MOV      r6,r0
        MOV      r0,r6
        BL       adf435x_change_frequency
        MOV      r0,r6
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r2,r4
        MOV      r3,r1
        ADR      r0,|L18.36|
        BL       uart_printf
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L18.36|
        DCB      "pll: frequency change request sent (%4.7f MHz)\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.scmd_pll_profile||, CODE, READONLY, ALIGN=1

scmd_pll_profile PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        MOV      r4,r0
        MOV      r0,r4
        BL       adf435x_load_config_index
        BL       adf435x_dump_state
        POP      {r4,pc}
        ENDP


        AREA ||i.scmd_pll_pwr||, CODE, READONLY, ALIGN=2

scmd_pll_pwr PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        MOV      r4,r0
        CMP      r4,#0
        BEQ      |L20.28|
        BL       main_psu_power_on_if_off
        BL       adf435x_init
        ADR      r0,|L20.40|
        BL       uart_printf
        B        |L20.38|
|L20.28|
        BL       pll_power_off
        ADR      r0,|L20.56|
        BL       uart_printf
|L20.38|
        POP      {r4,pc}
        ENDP

|L20.40|
        DCB      "pll: power up\r\n",0
|L20.56|
        DCB      "pll: power down\r\n",0
        DCB      0
        DCB      0

        AREA ||i.scmd_pll_tune||, CODE, READONLY, ALIGN=2

scmd_pll_tune PROC
        PUSH     {r4-r7,lr}
        SUB      sp,sp,#0x14
        MOVS     r0,#1
        STR      r0,[sp,#0xc]
        LDR      r0,|L21.332|
        LDR      r0,[r0,#0x48]  ; adf435x_state
        STR      r0,[sp,#8]
        B        |L21.324|
|L21.16|
        LDR      r1,|L21.332|
        LDR      r0,[r1,#0x48]  ; adf435x_state
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,[sp,#8]
        BL       __aeabi_f2d
        MOV      r6,r0
        MOV      r2,r6
        MOV      r3,r1
        LDR      r0,|L21.336|
        STR      r5,[sp,#4]
        STR      r4,[sp,#0]
        BL       uart_printf
        ADR      r0,|L21.340|
        BL       uart_printf
        ADR      r0,|L21.364|
        BL       uart_printf
        ADR      r0,|L21.396|
        BL       uart_printf
        ADR      r0,|L21.428|
        BL       uart_printf
        ADR      r0,|L21.460|
        BL       uart_printf
        ADR      r0,|L21.492|
        BL       uart_printf
        ADR      r0,|L21.528|
        BL       uart_printf
        BL       uart_getchar
        MOV      r4,r0
        BL       toupper
        CMP      r0,#0x51
        BEQ      |L21.140|
        BGT      |L21.122|
        CMP      r0,#0x41
        BEQ      |L21.152|
        CMP      r0,#0x44
        BEQ      |L21.218|
        CMP      r0,#0x45
        BNE      |L21.244|
        B        |L21.192|
|L21.122|
        CMP      r0,#0x53
        BEQ      |L21.178|
        CMP      r0,#0x57
        BEQ      |L21.164|
        CMP      r0,#0x58
        BNE      |L21.244|
        MOVS     r0,#0
        STR      r0,[sp,#0xc]
        B        |L21.244|
|L21.140|
        LDR      r1,|L21.564|
        LDR      r0,[sp,#8]
        BL       __aeabi_fadd
        STR      r0,[sp,#8]
        B        |L21.244|
|L21.152|
        LDR      r1,|L21.564|
        LDR      r0,[sp,#8]
        BL       __aeabi_fsub
        STR      r0,[sp,#8]
        B        |L21.244|
|L21.164|
        MOVS     r1,#0x7f
        LSLS     r1,r1,#23
        LDR      r0,[sp,#8]
        BL       __aeabi_fadd
        STR      r0,[sp,#8]
        B        |L21.244|
|L21.178|
        MOVS     r1,#0x7f
        LSLS     r1,r1,#23
        LDR      r0,[sp,#8]
        BL       __aeabi_fsub
        STR      r0,[sp,#8]
        B        |L21.244|
|L21.192|
        LDR      r0,[sp,#8]
        BL       __aeabi_f2d
        MOV      r6,r0
        LDR      r2,|L21.568|
        LDR      r3,|L21.572|
        BL       __aeabi_dadd
        MOV      r4,r0
        BL       __aeabi_d2f
        STR      r0,[sp,#8]
        B        |L21.244|
|L21.218|
        LDR      r0,[sp,#8]
        BL       __aeabi_f2d
        MOV      r4,r0
        LDR      r2,|L21.568|
        LDR      r3,|L21.572|
        BL       __aeabi_dsub
        MOV      r6,r0
        BL       __aeabi_d2f
        STR      r0,[sp,#8]
        NOP      
|L21.244|
        NOP      
        LDR      r1,|L21.576|
        LDR      r0,[sp,#8]
        BL       __aeabi_cfcmple
        BCS      |L21.260|
        LDR      r0,|L21.576|
        STR      r0,[sp,#8]
|L21.260|
        LDR      r1,|L21.580|
        LDR      r0,[sp,#8]
        BL       __aeabi_cfrcmple
        BCS      |L21.274|
        LDR      r0,|L21.580|
        STR      r0,[sp,#8]
|L21.274|
        LDR      r0,[sp,#0xc]
        CMP      r0,#0
        BNE      |L21.282|
        B        |L21.326|
|L21.282|
        LDR      r1,|L21.584|
        LDR      r0,[sp,#8]
        BL       __aeabi_fmul
        MOV      r6,r0
        BL       __aeabi_f2iz
        MOV      r5,r0
        BL       __aeabi_i2f
        MOV      r4,r0
        LDR      r1,|L21.588|
        BL       __aeabi_fmul
        STR      r0,[sp,#8]
        LDR      r0,[sp,#8]
        BL       adf435x_change_frequency
        ADR      r0,|L21.592|
        BL       uart_printf
|L21.324|
        B        |L21.16|
|L21.326|
        NOP      
        ADD      sp,sp,#0x14
        POP      {r4-r7,pc}
        ENDP

|L21.332|
        DCD      adf435x_state
|L21.336|
        DCD      ||.conststring||+0xf8
|L21.340|
        DCB      "Press 'X' to exit.\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L21.364|
        DCB      "Press 'Q' to increment 10MHz.\r\n",0
|L21.396|
        DCB      "Press 'A' to decrement 10MHz.\r\n",0
|L21.428|
        DCB      "Press 'W' to increment 1MHz.\r\n",0
        DCB      0
|L21.460|
        DCB      "Press 'S' to decrement 1MHz.\r\n",0
        DCB      0
|L21.492|
        DCB      "Press 'E' to increment 0.01MHz.\r\n",0
        DCB      0
        DCB      0
|L21.528|
        DCB      "Press 'D' to decrement 0.01MHz.\r\n\r\n",0
|L21.564|
        DCD      0x41200000
|L21.568|
        DCD      0x47ae147b
|L21.572|
        DCD      0x3f847ae1
|L21.576|
        DCD      0x42100000
|L21.580|
        DCD      0x45898000
|L21.584|
        DCD      0x447a0000
|L21.588|
        DCD      0x3a83126f
|L21.592|
        DCB      "\r\n\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.scmd_raspi_pwr||, CODE, READONLY, ALIGN=2

scmd_raspi_pwr PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        MOV      r4,r0
        CMP      r4,#0
        BEQ      |L22.28|
        BL       main_psu_power_on_if_off
        BL       raspi_power_on
        ADR      r0,|L22.40|
        BL       uart_printf
        B        |L22.38|
|L22.28|
        BL       raspi_power_off
        ADR      r0,|L22.60|
        BL       uart_printf
|L22.38|
        POP      {r4,pc}
        ENDP

|L22.40|
        DCB      "raspi: power up\r\n",0
        DCB      0
        DCB      0
|L22.60|
        DCB      "raspi: power down\r\n",0

        AREA ||i.scmd_reset||, CODE, READONLY, ALIGN=2

scmd_reset PROC
        BL       zynq_rapid_power_off
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        LDR      r0,|L23.52|
        LDR      r1,|L23.56|
        STR      r0,[r1,#0xc]
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        NOP      
|L23.48|
        NOP      
        B        |L23.48|
        ENDP

|L23.52|
        DCD      0x05fa0004
|L23.56|
        DCD      0xe000ed00

        AREA ||i.scmd_volts||, CODE, READONLY, ALIGN=2

scmd_volts PROC
        PUSH     {r3-r7,lr}
        LDR      r1,|L24.40|
        LDR      r0,[r1,#0x18]  ; sys_state
        BL       __aeabi_ui2f
        MOV      r7,r0
        LDR      r1,|L24.44|
        BL       __aeabi_fdiv
        MOV      r4,r0
        BL       __aeabi_f2d
        MOV      r5,r0
        MOV      r2,r5
        MOV      r3,r1
        ADR      r0,|L24.48|
        BL       uart_printf
        POP      {r3-r7,pc}
        ENDP

        DCW      0x0000
|L24.40|
        DCD      sys_state
|L24.44|
        DCD      0x447a0000
|L24.48|
        DCB      "I can feel %2.2f volts coarsing 'cross my heart...\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.scmd_zynq_pwr||, CODE, READONLY, ALIGN=2

scmd_zynq_pwr PROC
        PUSH     {r4,lr}
        BL       shell_unpop_int
        MOV      r4,r0
        CMP      r4,#0
        BEQ      |L25.28|
        BL       main_psu_power_on_if_off
        BL       zynq_power_on
        ADR      r0,|L25.40|
        BL       uart_printf
        B        |L25.38|
|L25.28|
        BL       zynq_power_off
        ADR      r0,|L25.60|
        BL       uart_printf
|L25.38|
        POP      {r4,pc}
        ENDP

|L25.40|
        DCB      "zynq: power up\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L25.60|
        DCB      "zynq: power down\r\n",0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

        DCB      "help",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "reset",0
        DCB      0
        DCB      0
        DCB      "volts",0
        DCB      0
        DCB      0
        DCB      "adcpwr",0
        DCB      0
        DCB      "pllpwr",0
        DCB      0
        DCB      "zynqpwr",0
        DCB      "raspipwr",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "pwroff",0
        DCB      0
        DCB      "pllfreq",0
        DCB      "plltune",0
        DCB      "pllprof",0
        DCB      "adcreset",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "adctest",0
        DCB      "adcwalk",0
        DCB      "lvdscdrv",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "lvdsfdrv",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "lvdsddrv",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "lvdsdrv",0
        DCB      "lvdscterm",0
        DCB      0
        DCB      0
        DCB      "lvdsfterm",0
        DCB      0
        DCB      0
        DCB      "lvdsdterm",0
        DCB      0
        DCB      0
        DCB      "lvdsterm",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "lvdsadv",0
        DCB      "lvdsphas",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "lvdsdef",0
        DCB      "zspi",0
        DCB      0
        DCB      0
        DCB      0
        DCB      "Current frequency is (requested) %4.4f MHz (calculated)"
        DCB      " %4.4f MHz \r\n\r\n",0

        AREA ||.data||, DATA, ALIGN=2

shell_commands
        DCD      ||.conststring||
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_help
        DCD      ||.conststring||+0x8
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_reset
        DCD      ||.conststring||+0x10
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_volts
        DCD      ||.conststring||+0x18
        DCB      0x04,0x00,0x00,0x00
        DCD      scmd_adc_pwr
        DCD      ||.conststring||+0x20
        DCB      0x04,0x00,0x00,0x00
        DCD      scmd_pll_pwr
        DCD      ||.conststring||+0x28
        DCB      0x04,0x00,0x00,0x00
        DCD      scmd_zynq_pwr
        DCD      ||.conststring||+0x30
        DCB      0x04,0x00,0x00,0x00
        DCD      scmd_raspi_pwr
        DCD      ||.conststring||+0x3c
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_all_off
        DCD      ||.conststring||+0x44
        DCB      0x03,0x00,0x00,0x00
        DCD      scmd_pll_freq
        DCD      ||.conststring||+0x4c
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_pll_tune
        DCD      ||.conststring||+0x54
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_pll_profile
        DCD      ||.conststring||+0x5c
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_adc_reset
        DCD      ||.conststring||+0x68
        DCB      0x01,0x82,0x00,0x00
        DCD      scmd_adc_test
        DCD      ||.conststring||+0x70
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_adc_walk
        DCD      ||.conststring||+0x78
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_cdrv
        DCD      ||.conststring||+0x84
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_fdrv
        DCD      ||.conststring||+0x90
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_ddrv
        DCD      ||.conststring||+0x9c
        DCB      0x01,0x01,0x01,0x00
        DCD      scmd_adc_lvds_drv
        DCD      ||.conststring||+0xa4
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_cterm
        DCD      ||.conststring||+0xb0
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_fterm
        DCD      ||.conststring||+0xbc
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_dterm
        DCD      ||.conststring||+0xc8
        DCB      0x01,0x01,0x01,0x00
        DCD      scmd_adc_lvds_term
        DCD      ||.conststring||+0xd4
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_adv
        DCD      ||.conststring||+0xdc
        DCB      0x01,0x00,0x00,0x00
        DCD      scmd_adc_lvds_phas
        DCD      ||.conststring||+0xe8
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_adc_lvds_def
        DCD      ||.conststring||+0xf0
        DCB      0x00,0x00,0x00,0x00
        DCD      scmd_zynq_spi_test
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "shell_commands.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_shell_commands_c_60565f91____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_shell_commands_c_60565f91____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_shell_commands_c_60565f91____REVSH|
#line 478
|__asm___16_shell_commands_c_60565f91____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT scmd_adc_lvds_adv [CODE]
        EXPORT scmd_adc_lvds_cdrv [CODE]
        EXPORT scmd_adc_lvds_cterm [CODE]
        EXPORT scmd_adc_lvds_ddrv [CODE]
        EXPORT scmd_adc_lvds_def [CODE]
        EXPORT scmd_adc_lvds_drv [CODE]
        EXPORT scmd_adc_lvds_dterm [CODE]
        EXPORT scmd_adc_lvds_fdrv [CODE]
        EXPORT scmd_adc_lvds_fterm [CODE]
        EXPORT scmd_adc_lvds_phas [CODE]
        EXPORT scmd_adc_lvds_term [CODE]
        EXPORT scmd_adc_pwr [CODE]
        EXPORT scmd_adc_reset [CODE]
        EXPORT scmd_adc_test [CODE]
        EXPORT scmd_adc_walk [CODE]
        EXPORT scmd_all_off [CODE]
        EXPORT scmd_help [CODE]
        EXPORT scmd_pll_freq [CODE]
        EXPORT scmd_pll_profile [CODE]
        EXPORT scmd_pll_pwr [CODE]
        EXPORT scmd_pll_tune [CODE]
        EXPORT scmd_raspi_pwr [CODE]
        EXPORT scmd_reset [CODE]
        EXPORT scmd_volts [CODE]
        EXPORT scmd_zynq_pwr [CODE]
        EXPORT shell_commands [DATA,SIZE=324]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT scmd_zynq_spi_test [CODE]
        IMPORT shell_print_help [CODE]
        IMPORT zynq_rapid_power_off [CODE]
        IMPORT __aeabi_ui2f [CODE]
        IMPORT __aeabi_fdiv [CODE]
        IMPORT __aeabi_f2d [CODE]
        IMPORT uart_printf [CODE]
        IMPORT sys_state [DATA]
        IMPORT shell_unpop_int [CODE]
        IMPORT main_psu_power_on_if_off [CODE]
        IMPORT hmcad151x_init [CODE]
        IMPORT adc_power_off [CODE]
        IMPORT adf435x_init [CODE]
        IMPORT pll_power_off [CODE]
        IMPORT zynq_power_on [CODE]
        IMPORT zynq_power_off [CODE]
        IMPORT raspi_power_on [CODE]
        IMPORT raspi_power_off [CODE]
        IMPORT adf435x_shutdown [CODE]
        IMPORT main_psu_power_off [CODE]
        IMPORT shell_unpop_float [CODE]
        IMPORT adf435x_change_frequency [CODE]
        IMPORT uart_getchar [CODE]
        IMPORT toupper [CODE]
        IMPORT __aeabi_fadd [CODE]
        IMPORT __aeabi_fsub [CODE]
        IMPORT __aeabi_dadd [CODE]
        IMPORT __aeabi_d2f [CODE]
        IMPORT __aeabi_dsub [CODE]
        IMPORT __aeabi_cfcmple [CODE]
        IMPORT __aeabi_cfrcmple [CODE]
        IMPORT __aeabi_fmul [CODE]
        IMPORT __aeabi_f2iz [CODE]
        IMPORT __aeabi_i2f [CODE]
        IMPORT adf435x_state [DATA]
        IMPORT adf435x_load_config_index [CODE]
        IMPORT adf435x_dump_state [CODE]
        IMPORT adc_power_on [CODE]
        IMPORT shell_unpop_string [CODE]
        IMPORT hmcad151x_test_mode [CODE]
        IMPORT uart_putsraw [CODE]
        IMPORT systick_wait [CODE]
        IMPORT uart_getchar_nb [CODE]
        IMPORT hmcad151x_sync_lvds_settings [CODE]
        IMPORT hmcad151x_state [DATA]
        IMPORT hmcad_lvds_current_lut [DATA]
        IMPORT hmcad_lvds_term_lut [DATA]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
