; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -o.\objects\adf435x.o --depend=.\objects\adf435x.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -IC:\Users\Tom\Documents\Projects\Scopy_MVP_Platform\scopy-fpga\mcuapp_stm32f0\RTE -IC:\Users\Tom\Documents\Projects\Scopy_MVP_Platform\scopy-fpga\mcuapp_stm32f0\RTE\Device\STM32F071VBTx -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc\Legacy -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F071xB --omf_browse=.\objects\adf435x.crf adf435x.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.adf435x_change_frequency||, CODE, READONLY, ALIGN=2

adf435x_change_frequency PROC
        PUSH     {r0,r4-r7,lr}
        SUB      sp,sp,#0x60
        MOVS     r0,#0
        STR      r0,[sp,#0x58]
        MOVS     r7,#1
        STR      r0,[sp,#0x54]
        STR      r0,[sp,#0x4c]
        MOVS     r4,#0
        B        |L1.70|
|L1.18|
        LDR      r1,|L1.380|
        LDRB     r0,[r1,r4]
        BL       __aeabi_ui2f
        STR      r0,[sp,#0x3c]
        LDR      r1,[sp,#0x60]
        BL       __aeabi_fmul
        STR      r0,[sp,#0x50]
        LDR      r1,|L1.384|
        LDR      r0,[sp,#0x50]
        BL       __aeabi_cfrcmple
        BCS      |L1.68|
        LDR      r1,|L1.388|
        LDR      r0,[sp,#0x50]
        BL       __aeabi_cfcmple
        BCS      |L1.68|
        LDR      r0,|L1.380|
        LDRB     r7,[r0,r4]
        STR      r4,[sp,#0x54]
        MOVS     r0,#1
        STR      r0,[sp,#0x58]
        B        |L1.74|
|L1.68|
        ADDS     r4,r4,#1
|L1.70|
        CMP      r4,#7
        BCC      |L1.18|
|L1.74|
        NOP      
        LDR      r0,[sp,#0x58]
        CMP      r0,#0
        BNE      |L1.92|
        ADR      r0,|L1.392|
        BL       shell_error
|L1.88|
        ADD      sp,sp,#0x64
        POP      {r4-r7,pc}
|L1.92|
        MOV      r0,r7
        BL       __aeabi_ui2f
        STR      r0,[sp,#0x3c]
        LDR      r1,[sp,#0x60]
        BL       __aeabi_fmul
        STR      r0,[sp,#0x50]
        LDR      r1,|L1.436|
        LDR      r0,[sp,#0x50]
        BL       __aeabi_fdiv
        STR      r0,[sp,#0x4c]
        LDR      r0,[sp,#0x4c]
        BL       __aeabi_f2iz
        STR      r0,[sp,#0x40]
        MOVS     r6,#0xfa
        MOV      r0,r6
        BL       __aeabi_i2f
        STR      r0,[sp,#0x38]
        LDR      r0,[sp,#0x40]
        BL       __aeabi_i2f
        STR      r0,[sp,#0x30]
        LDR      r1,[sp,#0x4c]
        BL       __aeabi_frsub
        STR      r0,[sp,#0x34]
        LDR      r1,[sp,#0x38]
        BL       __aeabi_fmul
        STR      r0,[sp,#0x3c]
        BL       __aeabi_f2iz
        MOV      r5,r0
        MOV      r3,r7
        MOV      r2,r6
        MOV      r1,r5
        LDR      r0,[sp,#0x40]
        BL       adf435x_compute_frequency
        STR      r0,[sp,#0x48]
        LDR      r1,[sp,#0x48]
        LDR      r0,[sp,#0x60]
        BL       __aeabi_frsub
        STR      r0,[sp,#0x34]
        BL       __aeabi_f2d
        LSLS     r1,r1,#1
        LSRS     r1,r1,#1
        LDR      r2,|L1.440|
        LDR      r3,|L1.444|
        STR      r1,[sp,#0x3c]
        STR      r0,[sp,#0x38]
        BL       __aeabi_cdrcmple
        BCS      |L1.286|
        MOV      r3,r7
        MOV      r2,r6
        ADDS     r1,r5,#1
        LDR      r0,[sp,#0x40]
        BL       adf435x_compute_frequency
        STR      r0,[sp,#0x44]
        LDR      r1,[sp,#0x48]
        LDR      r0,[sp,#0x60]
        BL       __aeabi_frsub
        STR      r0,[sp,#0x2c]
        BL       __aeabi_f2d
        LSLS     r1,r1,#1
        LSRS     r1,r1,#1
        STR      r1,[sp,#0x3c]
        STR      r0,[sp,#0x38]
        LDR      r1,[sp,#0x44]
        LDR      r0,[sp,#0x60]
        BL       __aeabi_frsub
        STR      r0,[sp,#0x2c]
        BL       __aeabi_f2d
        LSLS     r1,r1,#1
        LSRS     r1,r1,#1
        STR      r1,[sp,#0x34]
        STR      r0,[sp,#0x30]
        LDR      r3,[sp,#0x3c]
        LDR      r2,[sp,#0x38]
        BL       __aeabi_cdcmple
        BCS      |L1.286|
        LDR      r0,[sp,#0x44]
        STR      r0,[sp,#0x48]
        ADDS     r5,r5,#1
|L1.286|
        LDR      r1,[sp,#0x48]
        LDR      r0,[sp,#0x60]
        BL       __aeabi_frsub
        STR      r0,[sp,#0x24]
        BL       __aeabi_f2d
        STR      r1,[sp,#0x3c]
        STR      r0,[sp,#0x38]
        LDR      r0,[sp,#0x48]
        BL       __aeabi_f2d
        STR      r1,[sp,#0x34]
        STR      r0,[sp,#0x30]
        LDR      r0,[sp,#0x60]
        BL       __aeabi_f2d
        STR      r1,[sp,#0x2c]
        STR      r0,[sp,#0x28]
        LDR      r1,[sp,#0x3c]
        LDR      r0,[sp,#0x38]
        STR      r1,[sp,#0x24]
        STR      r0,[sp,#0x20]
        LDR      r1,[sp,#0x34]
        LDR      r0,[sp,#0x30]
        STR      r1,[sp,#0x1c]
        STR      r0,[sp,#0x18]
        LDR      r0,[sp,#0x54]
        STR      r7,[sp,#0xc]
        STR      r6,[sp,#4]
        STR      r5,[sp,#8]
        STR      r0,[sp,#0x10]
        LDR      r0,[sp,#0x40]
        STR      r0,[sp,#0]
        LDR      r0,|L1.448|
        LDR      r3,[sp,#0x2c]
        LDR      r2,[sp,#0x28]
        BL       uart_printf
        MOV      r2,r6
        MOV      r1,r5
        LDR      r3,[sp,#0x54]
        LDR      r0,[sp,#0x40]
        BL       adf435x_change_pll_prop
        NOP      
        B        |L1.88|
        ENDP

|L1.380|
        DCD      adf_rf_dividers
|L1.384|
        DCD      0x45098000
|L1.388|
        DCD      0x458ac000
|L1.392|
        DCB      "Unable to find divider for input frequency",0
        DCB      0
|L1.436|
        DCD      0x41c80000
|L1.440|
        DCD      0xeb1c432d
|L1.444|
        DCD      0x3f1a36e2
|L1.448|
        DCD      ||.conststring||+0xb4

        AREA ||i.adf435x_change_pll_prop||, CODE, READONLY, ALIGN=2

adf435x_change_pll_prop PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r4,r3
        LSLS     r0,r5,#16
        LSRS     r0,r0,#1
        LSLS     r1,r6,#20
        LSRS     r1,r1,#17
        ORRS     r0,r0,r1
        LDR      r1,|L2.144|
        STR      r0,[r1,#0]  ; adf435x_state
        MOV      r0,r1
        LDRH     r0,[r0,#0x38]
        LSLS     r0,r0,#20
        LSRS     r0,r0,#5
        LSLS     r1,r7,#20
        LSRS     r1,r1,#17
        ORRS     r0,r0,r1
        LDR      r1,|L2.144|
        STR      r0,[r1,#4]  ; adf435x_state
        MOV      r0,r1
        LDR      r0,[r0,#0x44]
        MOVS     r1,#2
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L2.64|
        LDR      r0,|L2.144|
        LDR      r0,[r0,#4]  ; adf435x_state
        LDR      r1,|L2.144|
        STR      r0,[r1,#4]  ; adf435x_state
        B        |L2.88|
|L2.64|
        LDR      r0,|L2.144|
        LDR      r0,[r0,#0x44]
        MOVS     r1,#4
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L2.88|
        LDR      r0,|L2.144|
        LDR      r0,[r0,#4]  ; adf435x_state
        LSLS     r1,r1,#25
        ORRS     r0,r0,r1
        LDR      r1,|L2.144|
        STR      r0,[r1,#4]  ; adf435x_state
|L2.88|
        LDR      r0,|L2.144|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#7
        LSLS     r1,r1,#20
        BICS     r0,r0,r1
        LDR      r1,|L2.144|
        STR      r0,[r1,#0x10]  ; adf435x_state
        MOV      r0,r1
        LDR      r0,[r0,#0x10]  ; adf435x_state
        LSLS     r1,r4,#29
        LSRS     r1,r1,#9
        ORRS     r0,r0,r1
        LDR      r1,|L2.144|
        STR      r0,[r1,#0x10]  ; adf435x_state
        BL       adf435x_sync
        LDR      r0,|L2.148|
        LDRB     r3,[r0,r4]
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       adf435x_compute_frequency
        LDR      r1,|L2.144|
        STR      r0,[r1,#0x48]  ; adf435x_state
        BL       adf435x_dump_state
        POP      {r3-r7,pc}
        ENDP

|L2.144|
        DCD      adf435x_state
|L2.148|
        DCD      adf_rf_dividers

        AREA ||i.adf435x_compute_frequency||, CODE, READONLY, ALIGN=1

adf435x_compute_frequency PROC
        PUSH     {r4-r7,lr}
        SUB      sp,sp,#0x1c
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        MOV      r0,r7
        BL       __aeabi_ui2f
        STR      r0,[sp,#0x18]
        MOV      r0,r6
        BL       __aeabi_ui2f
        MOVS     r1,#0x19
        MULS     r1,r5,r1
        STR      r0,[sp,#8]
        MOV      r0,r1
        BL       __aeabi_ui2f
        STR      r0,[sp,#4]
        LDR      r1,[sp,#8]
        BL       __aeabi_fdiv
        MOVS     r1,#0x19
        MULS     r1,r4,r1
        STR      r0,[sp,#0x10]
        MOV      r0,r1
        BL       __aeabi_ui2f
        STR      r0,[sp,#0xc]
        LDR      r1,[sp,#0x10]
        BL       __aeabi_fadd
        STR      r0,[sp,#0x14]
        LDR      r1,[sp,#0x18]
        BL       __aeabi_fdiv
        ADD      sp,sp,#0x1c
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.adf435x_dump_state||, CODE, READONLY, ALIGN=2

adf435x_dump_state PROC
        PUSH     {r3-r5,lr}
        LDR      r0,|L4.132|
        BL       uart_printf
        LDR      r0,|L4.136|
        LDR      r1,[r0,#0]  ; adf435x_state
        ADR      r0,|L4.140|
        BL       uart_printf
        LDR      r0,|L4.136|
        LDR      r0,[r0,#4]  ; adf435x_state
        MOVS     r2,#1
        ORRS     r0,r0,r2
        MOV      r1,r0
        ADR      r0,|L4.164|
        BL       uart_printf
        LDR      r0,|L4.136|
        LDR      r0,[r0,#8]  ; adf435x_state
        MOVS     r2,#2
        ORRS     r0,r0,r2
        MOV      r1,r0
        ADR      r0,|L4.188|
        BL       uart_printf
        LDR      r0,|L4.136|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        MOVS     r2,#3
        ORRS     r0,r0,r2
        MOV      r1,r0
        ADR      r0,|L4.212|
        BL       uart_printf
        LDR      r0,|L4.136|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r2,#4
        ORRS     r0,r0,r2
        MOV      r1,r0
        ADR      r0,|L4.236|
        BL       uart_printf
        LDR      r0,|L4.136|
        LDR      r0,[r0,#0x14]  ; adf435x_state
        MOVS     r2,#5
        ORRS     r0,r0,r2
        MOV      r1,r0
        ADR      r0,|L4.260|
        BL       uart_printf
        LDR      r1,|L4.136|
        LDR      r0,[r1,#0x48]  ; adf435x_state
        BL       __aeabi_f2d
        MOV      r4,r0
        MOV      r3,r1
        LDR      r0,|L4.136|
        ADDS     r0,r0,#0x20
        STR      r0,[sp,#0]
        SUBS     r0,r0,#0x20
        MOV      r2,r4
        LDR      r1,[r0,#0x18]  ; adf435x_state
        LDR      r0,|L4.284|
        BL       uart_printf
        POP      {r3-r5,pc}
        ENDP

        DCW      0x0000
|L4.132|
        DCD      ||.conststring||
|L4.136|
        DCD      adf435x_state
|L4.140|
        DCB      "adf435x: r0=0x%08x\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L4.164|
        DCB      "adf435x: r1=0x%08x\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L4.188|
        DCB      "adf435x: r2=0x%08x\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L4.212|
        DCB      "adf435x: r3=0x%08x\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L4.236|
        DCB      "adf435x: r4=0x%08x\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L4.260|
        DCB      "adf435x: r5=0x%08x\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L4.284|
        DCD      ||.conststring||+0x70

        AREA ||i.adf435x_init||, CODE, READONLY, ALIGN=2

adf435x_init PROC
        PUSH     {r4,lr}
        BL       pll_power_on
        MOVS     r0,#5
        BL       systick_wait
        MOVS     r1,#1
        LDR      r0,|L5.112|
        BL       gpio_set_output
        MOVS     r1,#0x80
        LDR      r0,|L5.116|
        BL       gpio_set_output
        MOVS     r1,#2
        LDR      r0,|L5.112|
        BL       gpio_set_output
        MOVS     r1,#4
        LDR      r0,|L5.112|
        BL       gpio_set_output
        MOVS     r1,#0xff
        ADDS     r1,#1
        LDR      r0,|L5.116|
        BL       gpio_set_output
        MOVS     r0,#1
        LDR      r1,|L5.112|
        STR      r0,[r1,#0x28]
        MOVS     r0,#0x80
        LDR      r1,|L5.116|
        STR      r0,[r1,#0x28]
        MOVS     r0,#2
        LDR      r1,|L5.112|
        STR      r0,[r1,#0x28]
        MOVS     r0,#4
        STR      r0,[r1,#0x28]
        LSLS     r0,r0,#6
        LDR      r1,|L5.116|
        STR      r0,[r1,#0x28]
        MOVS     r0,#2
        BL       systick_wait
        MOVS     r0,#4
        LDR      r1,|L5.112|
        STR      r0,[r1,#0x18]
        LDR      r0,|L5.120|
        BL       adf435x_load_config
        BL       adf435x_rf_off
        MOVS     r0,#4
        BL       adf435x_set_power_level
        POP      {r4,pc}
        ENDP

|L5.112|
        DCD      0x48000400
|L5.116|
        DCD      0x48001000
|L5.120|
        DCD      adf_configs+0x28

        AREA ||i.adf435x_load_config||, CODE, READONLY, ALIGN=2

adf435x_load_config PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LDRH     r0,[r4,#0x14]
        LSLS     r0,r0,#15
        LDRH     r1,[r4,#0x16]
        LSLS     r1,r1,#20
        LSRS     r1,r1,#17
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0]  ; adf435x_state
        LDRH     r0,[r4,#0x18]
        LSLS     r0,r0,#20
        LSRS     r0,r0,#5
        LDRH     r1,[r4,#0x1a]
        LSLS     r1,r1,#20
        LSRS     r1,r1,#17
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#4]  ; adf435x_state
        LDRB     r0,[r4,#0x1d]
        LSLS     r0,r0,#28
        LSRS     r0,r0,#19
        MOVS     r1,#0x40
        ORRS     r0,r0,r1
        LDRH     r1,[r4,#0x1e]
        LSLS     r1,r1,#22
        LSRS     r1,r1,#8
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
        MOVS     r0,#8
        STR      r0,[r1,#0xc]  ; adf435x_state
        LDRB     r0,[r4,#0x1c]
        LSLS     r0,r0,#29
        LSRS     r0,r0,#9
        LDR      r1,|L6.700|
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0x10]  ; adf435x_state
        MOVS     r0,#0xb
        LSLS     r0,r0,#19
        STR      r0,[r1,#0x14]  ; adf435x_state
        MOVS     r1,#2
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.104|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#4]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#4]  ; adf435x_state
        B        |L6.126|
|L6.104|
        MOVS     r1,#4
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.126|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#4]  ; adf435x_state
        LSLS     r1,r1,#25
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#4]  ; adf435x_state
|L6.126|
        MOVS     r1,#8
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.150|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LSLS     r1,r1,#22
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
        B        |L6.172|
|L6.150|
        MOVS     r1,#0x10
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.172|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LSLS     r1,r1,#20
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.172|
        MOVS     r1,#0x20
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.194|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LSLS     r1,r1,#8
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.194|
        MOVS     r1,#0x40
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.214|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
        B        |L6.236|
|L6.214|
        MOVS     r1,#0x80
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.236|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LSLS     r1,r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.236|
        MOVS     r1,#0xff
        ADDS     r1,#1
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.258|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
        B        |L6.282|
|L6.258|
        MOVS     r1,#1
        LSLS     r1,r1,#9
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.282|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        MOVS     r1,#0x80
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.282|
        MOVS     r1,#1
        LSLS     r1,r1,#10
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.308|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        MOVS     r1,#0x40
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
        B        |L6.328|
|L6.308|
        MOVS     r1,#1
        LSLS     r1,r1,#11
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.328|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.328|
        MOVS     r1,#1
        LSLS     r1,r1,#12
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.352|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        MOVS     r1,#0x20
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.352|
        MOVS     r1,#1
        LSLS     r1,r1,#13
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.376|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        MOVS     r1,#0x10
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.376|
        MOVS     r1,#1
        LSLS     r1,r1,#14
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.400|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#8]  ; adf435x_state
        MOVS     r1,#8
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#8]  ; adf435x_state
|L6.400|
        MOVS     r1,#1
        LSLS     r1,r1,#15
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.422|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
        B        |L6.446|
|L6.422|
        MOVS     r1,#1
        LSLS     r1,r1,#16
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.446|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LSLS     r1,r1,#7
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
|L6.446|
        MOVS     r1,#1
        LSLS     r1,r1,#17
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.470|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LSLS     r1,r1,#5
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
|L6.470|
        MOVS     r1,#1
        LSLS     r1,r1,#18
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.494|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LSLS     r1,r1,#3
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
|L6.494|
        MOVS     r1,#1
        LSLS     r1,r1,#19
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.518|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        ASRS     r1,r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
|L6.518|
        MOVS     r1,#1
        LSLS     r1,r1,#20
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.540|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
        B        |L6.590|
|L6.540|
        MOVS     r1,#1
        LSLS     r1,r1,#21
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.566|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LSLS     r1,r1,#9
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
        B        |L6.590|
|L6.566|
        MOVS     r1,#1
        LSLS     r1,r1,#22
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.590|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0xc]  ; adf435x_state
        LSLS     r1,r1,#9
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0xc]  ; adf435x_state
|L6.590|
        MOVS     r1,#1
        LSLS     r1,r1,#23
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.612|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        LDR      r1,|L6.696|
        STR      r0,[r1,#0x10]  ; adf435x_state
        B        |L6.626|
|L6.612|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#1
        LSLS     r1,r1,#23
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0x10]  ; adf435x_state
|L6.626|
        MOVS     r1,#1
        LSLS     r1,r1,#24
        LDR      r0,[r4,#0x24]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L6.650|
        LDR      r0,|L6.696|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        ASRS     r1,r1,#14
        ORRS     r0,r0,r1
        LDR      r1,|L6.696|
        STR      r0,[r1,#0x10]  ; adf435x_state
|L6.650|
        BL       adf435x_sync
        BL       adf435x_sync_rf_power_state
        MOVS     r2,#0x28
        MOV      r1,r4
        LDR      r0,|L6.696|
        ADDS     r0,r0,#0x20
        BL       __aeabi_memcpy4
        LDRB     r5,[r4,#0x1c]
        LSLS     r5,r5,#29
        LSRS     r5,r5,#29
        LDR      r6,|L6.704|
        LDRB     r3,[r6,r5]
        LDRH     r2,[r4,#0x1a]
        LDRH     r1,[r4,#0x16]
        LDRH     r0,[r4,#0x14]
        BL       adf435x_compute_frequency
        LDR      r1,|L6.696|
        STR      r0,[r1,#0x48]  ; adf435x_state
        POP      {r4-r6,pc}
        ENDP

|L6.696|
        DCD      adf435x_state
|L6.700|
        DCD      0x000ff200
|L6.704|
        DCD      adf_rf_dividers

        AREA ||i.adf435x_load_config_index||, CODE, READONLY, ALIGN=2

adf435x_load_config_index PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        CMP      r5,#0x10
        BLS      |L7.10|
|L7.8|
        POP      {r4-r6,pc}
|L7.10|
        MOVS     r4,#1
        B        |L7.40|
|L7.14|
        CMP      r4,r5
        BNE      |L7.20|
        B        |L7.44|
|L7.20|
        MOVS     r1,#0x28
        MULS     r1,r4,r1
        LDR      r2,|L7.64|
        ADDS     r0,r1,r2
        BL       strlen
        CMP      r0,#0
        BNE      |L7.38|
        B        |L7.8|
|L7.38|
        ADDS     r4,r4,#1
|L7.40|
        CMP      r4,#0x10
        BCC      |L7.14|
|L7.44|
        NOP      
        MOVS     r1,#0x28
        MULS     r1,r5,r1
        LDR      r2,|L7.64|
        ADDS     r0,r1,r2
        BL       adf435x_load_config
        NOP      
        B        |L7.8|
        ENDP

        DCW      0x0000
|L7.64|
        DCD      adf_configs

        AREA ||i.adf435x_rf_off||, CODE, READONLY, ALIGN=2

adf435x_rf_off PROC
        PUSH     {lr}
        LDR      r0,|L8.40|
        LDR      r0,[r0,#0x18]  ; adf435x_state
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        LDR      r1,|L8.40|
        STR      r0,[r1,#0x18]  ; adf435x_state
        MOV      r0,r1
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#0x20
        BICS     r0,r0,r1
        LDR      r1,|L8.40|
        STR      r0,[r1,#0x10]  ; adf435x_state
        MOVS     r0,#0xff
        ADDS     r0,#1
        LDR      r1,|L8.44|
        STR      r0,[r1,#0x28]
        BL       adf435x_sync
        POP      {pc}
        ENDP

|L8.40|
        DCD      adf435x_state
|L8.44|
        DCD      0x48001000

        AREA ||i.adf435x_rf_on||, CODE, READONLY, ALIGN=2

adf435x_rf_on PROC
        PUSH     {lr}
        LDR      r0,|L9.40|
        LDR      r0,[r0,#0x18]  ; adf435x_state
        MOVS     r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L9.40|
        STR      r0,[r1,#0x18]  ; adf435x_state
        MOV      r0,r1
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#0x20
        ORRS     r0,r0,r1
        LDR      r1,|L9.40|
        STR      r0,[r1,#0x10]  ; adf435x_state
        BL       adf435x_sync
        MOVS     r0,#0xff
        ADDS     r0,#1
        LDR      r1,|L9.44|
        STR      r0,[r1,#0x18]
        POP      {pc}
        ENDP

|L9.40|
        DCD      adf435x_state
|L9.44|
        DCD      0x48001000

        AREA ||i.adf435x_set_power_level||, CODE, READONLY, ALIGN=2

adf435x_set_power_level PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L10.112|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#0x18
        BICS     r0,r0,r1
        LDR      r1,|L10.112|
        STR      r0,[r1,#0x10]  ; adf435x_state
        STRB     r4,[r1,#0x1c]
        CMP      r4,#1
        BEQ      |L10.36|
        CMP      r4,#2
        BEQ      |L10.46|
        CMP      r4,#3
        BEQ      |L10.60|
        CMP      r4,#4
        BNE      |L10.88|
        B        |L10.74|
|L10.36|
        LDR      r0,|L10.112|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        LDR      r1,|L10.112|
        STR      r0,[r1,#0x10]  ; adf435x_state
        B        |L10.102|
|L10.46|
        LDR      r0,|L10.112|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#8
        ORRS     r0,r0,r1
        LDR      r1,|L10.112|
        STR      r0,[r1,#0x10]  ; adf435x_state
        B        |L10.102|
|L10.60|
        LDR      r0,|L10.112|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#0x10
        ORRS     r0,r0,r1
        LDR      r1,|L10.112|
        STR      r0,[r1,#0x10]  ; adf435x_state
        B        |L10.102|
|L10.74|
        LDR      r0,|L10.112|
        LDR      r0,[r0,#0x10]  ; adf435x_state
        MOVS     r1,#0x18
        ORRS     r0,r0,r1
        LDR      r1,|L10.112|
        STR      r0,[r1,#0x10]  ; adf435x_state
        B        |L10.102|
|L10.88|
        MOVS     r0,#1
        LDR      r1,|L10.112|
        STRB     r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]  ; adf435x_state
        STR      r0,[r1,#0x10]  ; adf435x_state
        NOP      
|L10.102|
        NOP      
        BL       adf435x_sync
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L10.112|
        DCD      adf435x_state

        AREA ||i.adf435x_shutdown||, CODE, READONLY, ALIGN=2

adf435x_shutdown PROC
        PUSH     {r4,lr}
        BL       pll_power_off
        MOVS     r0,#1
        LDR      r1,|L11.36|
        STR      r0,[r1,#0x28]
        MOVS     r0,#0x80
        LDR      r1,|L11.40|
        STR      r0,[r1,#0x28]
        MOVS     r0,#2
        LDR      r1,|L11.36|
        STR      r0,[r1,#0x28]
        MOVS     r0,#4
        STR      r0,[r1,#0x28]
        LSLS     r0,r0,#6
        LDR      r1,|L11.40|
        STR      r0,[r1,#0x28]
        POP      {r4,pc}
        ENDP

|L11.36|
        DCD      0x48000400
|L11.40|
        DCD      0x48001000

        AREA ||i.adf435x_sync||, CODE, READONLY, ALIGN=2

adf435x_sync PROC
        PUSH     {lr}
        LDR      r1,|L12.64|
        LDR      r0,[r1,#0x14]  ; adf435x_state
        MOVS     r1,#5
        BL       adf435x_write_reg
        LDR      r1,|L12.64|
        LDR      r0,[r1,#0x10]  ; adf435x_state
        MOVS     r1,#4
        BL       adf435x_write_reg
        LDR      r1,|L12.64|
        LDR      r0,[r1,#0xc]  ; adf435x_state
        MOVS     r1,#3
        BL       adf435x_write_reg
        LDR      r1,|L12.64|
        LDR      r0,[r1,#8]  ; adf435x_state
        MOVS     r1,#2
        BL       adf435x_write_reg
        LDR      r1,|L12.64|
        LDR      r0,[r1,#4]  ; adf435x_state
        MOVS     r1,#1
        BL       adf435x_write_reg
        LDR      r1,|L12.64|
        LDR      r0,[r1,#0]  ; adf435x_state
        MOVS     r1,#0
        BL       adf435x_write_reg
        POP      {pc}
        ENDP

|L12.64|
        DCD      adf435x_state

        AREA ||i.adf435x_sync_rf_power_state||, CODE, READONLY, ALIGN=2

adf435x_sync_rf_power_state PROC
        PUSH     {lr}
        LDR      r1,|L13.36|
        LDRB     r0,[r1,#0x1c]  ; adf435x_state
        BL       adf435x_set_power_level
        LDR      r0,|L13.36|
        LDRB     r0,[r0,#0x18]  ; adf435x_state
        LSLS     r0,r0,#31
        LSRS     r0,r0,#31
        CMP      r0,#0
        BEQ      |L13.28|
        BL       adf435x_rf_on
        B        |L13.32|
|L13.28|
        BL       adf435x_rf_off
|L13.32|
        POP      {pc}
        ENDP

        DCW      0x0000
|L13.36|
        DCD      adf435x_state

        AREA ||i.adf435x_write_out||, CODE, READONLY, ALIGN=2

adf435x_write_out PROC
        PUSH     {r4,lr}
        MOVS     r3,#1
        LDR      r4,|L14.76|
        STR      r3,[r4,#0x28]
        MOVS     r3,#2
        STR      r3,[r4,#0x18]
        STR      r3,[r4,#0x28]
        MOVS     r1,#0x20
        LSLS     r2,r1,#26
        B        |L14.54|
|L14.20|
        MOV      r3,r2
        ANDS     r3,r3,r0
        CMP      r3,#0
        BEQ      |L14.36|
        MOVS     r3,#0x80
        LDR      r4,|L14.80|
        STR      r3,[r4,#0x18]
        B        |L14.42|
|L14.36|
        MOVS     r3,#0x80
        LDR      r4,|L14.80|
        STR      r3,[r4,#0x28]
|L14.42|
        MOVS     r3,#1
        LDR      r4,|L14.76|
        STR      r3,[r4,#0x28]
        STR      r3,[r4,#0x18]
        LSRS     r2,r2,#1
        SUBS     r1,r1,#1
|L14.54|
        CMP      r1,#0
        BNE      |L14.20|
        MOVS     r3,#1
        LDR      r4,|L14.76|
        STR      r3,[r4,#0x28]
        MOVS     r3,#2
        STR      r3,[r4,#0x18]
        MOVS     r3,#0x80
        LDR      r4,|L14.80|
        STR      r3,[r4,#0x28]
        POP      {r4,pc}
        ENDP

|L14.76|
        DCD      0x48000400
|L14.80|
        DCD      0x48001000

        AREA ||i.adf435x_write_reg||, CODE, READONLY, ALIGN=1

adf435x_write_reg PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LSRS     r0,r4,#3
        LSLS     r0,r0,#3
        LSLS     r1,r5,#29
        LSRS     r1,r1,#29
        ORRS     r0,r0,r1
        MOV      r6,r0
        MOV      r0,r6
        BL       adf435x_write_out
        POP      {r4-r6,pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

adf435x_state
        %        76

        AREA ||.constdata||, DATA, READONLY, ALIGN=0

adf_rf_dividers
        DCB      0x01,0x02,0x04,0x08
        DCB      0x10,0x20,0x40

        AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

        DCB      "adf435x: Register dump follows - N.B.: register number "
        DCB      "OR'd with each register to match ADI ADF435x utility\r\n"
        DCB      0
        DCB      0
        DCB      0
        DCB      "adf435x: state_flags=0x%08x, calc_out_freq=%2.7f MHz, c"
        DCB      "fg_name=%s\r\n",0
        DCB      "adf435x: Target_freq=%2.4f, INT=%d, FRAC=%d, MOD=%d, Di"
        DCB      "vider=%d [idx=%d], Actual_freq=%2.4f, Error=%2.6f\r\n",0

        AREA ||.data||, DATA, ALIGN=2

adf_configs
        DCB      0x00,0x00,0x00,0x00
        %        16
        DCW      0x0000,0x0000
        DCW      0x0000,0x0000
        DCB      0x00,0x00
        DCW      0x0000
        DCW      0x0000
        DCB      0x00,0x00
        DCD      0x00000000
        DCB      0x31,0x30,0x30,0x4d
        DCB      0x5f,0x43,0x6f,0x6e
        DCB      0x74,0x41,0x63,0x71
        DCB      0x00,0x00,0x00,0x00
        DCD      0x00000000
        DCW      0x0080,0x0000
        DCW      0x0000,0x00fa
        DCB      0x05,0x08
        DCW      0x0001
        DCW      0x0001
        DCB      0x00,0x00
        DCD      0x00000504
        DCB      0x31,0x36,0x30,0x4d
        DCB      0x5f,0x50,0x72,0x65
        DCB      0x63,0x69,0x73,0x69
        DCB      0x6f,0x6e,0x00,0x00
        DCD      0x00000000
        DCW      0x0066,0x0064
        DCW      0x0000,0x00fa
        DCB      0x04,0x08
        DCW      0x0001
        DCW      0x0001
        DCB      0x00,0x00
        DCD      0x00000504
        DCB      0x35,0x30,0x30,0x4d
        DCB      0x5f,0x48,0x69,0x67
        DCB      0x68,0x52,0x65,0x73
        DCB      0x00,0x00,0x00,0x00
        DCD      0x00000000
        DCW      0x00a0,0x0000
        DCW      0x0000,0x00fa
        DCB      0x03,0x08
        DCW      0x0001
        DCW      0x0001
        DCB      0x00,0x00
        DCD      0x00000504
        DCB      0x31,0x47,0x5f,0x4e
        DCB      0x6f,0x72,0x6d,0x52
        DCB      0x65,0x73,0x00,0x00
        %        8
        DCW      0x00a0,0x0000
        DCW      0x0000,0x00fa
        DCB      0x02,0x08
        DCW      0x0001
        DCW      0x0001
        DCB      0x00,0x00
        DCD      0x00000504
        DCB      0x31,0x31,0x35,0x30
        DCB      0x4d,0x5f,0x4f,0x76
        DCB      0x65,0x72,0x63,0x6c
        DCB      0x6f,0x63,0x6b,0x65
        DCB      0x64,0x00,0x00,0x00
        DCW      0x005c,0x0000
        DCW      0x0000,0x00fa
        DCB      0x01,0x08
        DCW      0x0001
        DCW      0x0001
        DCB      0x00,0x00
        DCD      0x00000504
        DCB      0x00,0x00,0x00,0x00
        %        16
        DCW      0x0000,0x0000
        DCW      0x0000,0x0000
        DCB      0x00,0x00
        DCW      0x0000
        DCW      0x0000
        DCB      0x00,0x00
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "adf435x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_adf435x_c_5eabe217____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___9_adf435x_c_5eabe217____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_adf435x_c_5eabe217____REVSH|
#line 478
|__asm___9_adf435x_c_5eabe217____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT adf435x_change_frequency [CODE]
        EXPORT adf435x_change_pll_prop [CODE]
        EXPORT adf435x_compute_frequency [CODE]
        EXPORT adf435x_dump_state [CODE]
        EXPORT adf435x_init [CODE]
        EXPORT adf435x_load_config [CODE]
        EXPORT adf435x_load_config_index [CODE]
        EXPORT adf435x_rf_off [CODE]
        EXPORT adf435x_rf_on [CODE]
        EXPORT adf435x_set_power_level [CODE]
        EXPORT adf435x_shutdown [CODE]
        EXPORT adf435x_sync [CODE]
        EXPORT adf435x_sync_rf_power_state [CODE]
        EXPORT adf435x_write_out [CODE]
        EXPORT adf435x_write_reg [CODE]
        EXPORT adf435x_state [DATA,SIZE=76]
        EXPORT adf_rf_dividers [DATA,SIZE=7]
        EXPORT adf_configs [DATA,SIZE=280]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_ui2f [CODE]
        IMPORT __aeabi_fdiv [CODE]
        IMPORT __aeabi_fadd [CODE]
        IMPORT __aeabi_memcpy4 [CODE]
        IMPORT pll_power_on [CODE]
        IMPORT systick_wait [CODE]
        IMPORT gpio_set_output [CODE]
        IMPORT pll_power_off [CODE]
        IMPORT strlen [CODE]
        IMPORT uart_printf [CODE]
        IMPORT __aeabi_f2d [CODE]
        IMPORT __aeabi_fmul [CODE]
        IMPORT __aeabi_cfrcmple [CODE]
        IMPORT __aeabi_cfcmple [CODE]
        IMPORT shell_error [CODE]
        IMPORT __aeabi_f2iz [CODE]
        IMPORT __aeabi_i2f [CODE]
        IMPORT __aeabi_frsub [CODE]
        IMPORT __aeabi_cdrcmple [CODE]
        IMPORT __aeabi_cdcmple [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
