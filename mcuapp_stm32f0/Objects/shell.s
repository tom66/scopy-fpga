; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -o.\objects\shell.o --depend=.\objects\shell.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -IC:\Users\Tom\Documents\Projects\Scopy_MVP_Platform\scopy-fpga\mcuapp_stm32f0\RTE -IC:\Users\Tom\Documents\Projects\Scopy_MVP_Platform\scopy-fpga\mcuapp_stm32f0\RTE\Device\STM32F071VBTx -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc\Legacy -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F071xB --omf_browse=.\objects\shell.crf shell.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i._shell_arg_is_false||, CODE, READONLY, ALIGN=2

_shell_arg_is_false PROC
        PUSH     {r4,r5,lr}
        SUB      sp,sp,#0x1c
        MOV      r5,r0
        MOVS     r4,#0
        B        |L1.30|
|L1.10|
        LDRB     r0,[r5,r4]
        CMP      r0,#0
        BNE      |L1.18|
        B        |L1.34|
|L1.18|
        LDRB     r0,[r5,r4]
        BL       tolower
        ADD      r1,sp,#4
        STRB     r0,[r1,r4]
        ADDS     r4,r4,#1
|L1.30|
        CMP      r4,#0x14
        BCC      |L1.10|
|L1.34|
        NOP      
        MOVS     r0,#0
        ADD      r1,sp,#4
        STRB     r0,[r1,r4]
        ADR      r0,|L1.124|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L1.112|
        ADD      r1,sp,#4
        ADR      r0,|L1.128|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L1.112|
        ADD      r1,sp,#4
        ADR      r0,|L1.132|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L1.112|
        ADD      r1,sp,#4
        ADR      r0,|L1.136|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L1.112|
        ADD      r1,sp,#4
        ADR      r0,|L1.140|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L1.112|
        ADD      r1,sp,#4
        ADR      r0,|L1.148|
        BL       strcasecmp
        CMP      r0,#0
        BNE      |L1.118|
|L1.112|
        MOVS     r0,#1
|L1.114|
        ADD      sp,sp,#0x1c
        POP      {r4,r5,pc}
|L1.118|
        MOVS     r0,#0
        B        |L1.114|
        ENDP

        DCW      0x0000
|L1.124|
        DCB      "n",0
        DCB      0
        DCB      0
|L1.128|
        DCB      "f",0
        DCB      0
        DCB      0
|L1.132|
        DCB      "0",0
        DCB      0
        DCB      0
|L1.136|
        DCB      "off",0
|L1.140|
        DCB      "false",0
        DCB      0
        DCB      0
|L1.148|
        DCB      "no",0
        DCB      0

        AREA ||i._shell_arg_is_true||, CODE, READONLY, ALIGN=2

_shell_arg_is_true PROC
        PUSH     {r4,r5,lr}
        SUB      sp,sp,#0x1c
        MOV      r5,r0
        MOVS     r4,#0
        B        |L2.30|
|L2.10|
        LDRB     r0,[r5,r4]
        CMP      r0,#0
        BNE      |L2.18|
        B        |L2.34|
|L2.18|
        LDRB     r0,[r5,r4]
        BL       tolower
        ADD      r1,sp,#4
        STRB     r0,[r1,r4]
        ADDS     r4,r4,#1
|L2.30|
        CMP      r4,#0x14
        BCC      |L2.10|
|L2.34|
        NOP      
        MOVS     r0,#0
        ADD      r1,sp,#4
        STRB     r0,[r1,r4]
        ADR      r0,|L2.124|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L2.112|
        ADD      r1,sp,#4
        ADR      r0,|L2.128|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L2.112|
        ADD      r1,sp,#4
        ADR      r0,|L2.132|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L2.112|
        ADD      r1,sp,#4
        ADR      r0,|L2.136|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L2.112|
        ADD      r1,sp,#4
        ADR      r0,|L2.140|
        BL       strcasecmp
        CMP      r0,#0
        BEQ      |L2.112|
        ADD      r1,sp,#4
        ADR      r0,|L2.148|
        BL       strcasecmp
        CMP      r0,#0
        BNE      |L2.118|
|L2.112|
        MOVS     r0,#1
|L2.114|
        ADD      sp,sp,#0x1c
        POP      {r4,r5,pc}
|L2.118|
        MOVS     r0,#0
        B        |L2.114|
        ENDP

        DCW      0x0000
|L2.124|
        DCB      "y",0
        DCB      0
        DCB      0
|L2.128|
        DCB      "t",0
        DCB      0
        DCB      0
|L2.132|
        DCB      "1",0
        DCB      0
        DCB      0
|L2.136|
        DCB      "on",0
        DCB      0
|L2.140|
        DCB      "true",0
        DCB      0
        DCB      0
        DCB      0
|L2.148|
        DCB      "yes",0

        AREA ||i._shell_dump_stack||, CODE, READONLY, ALIGN=2

_shell_dump_stack PROC
        MOVS     r0,#0
        B        |L3.6|
|L3.4|
        ADDS     r0,r0,#1
|L3.6|
        LDR      r1,|L3.16|
        LDR      r1,[r1,#0]  ; sh_state
        CMP      r1,r0
        BCS      |L3.4|
        BX       lr
        ENDP

|L3.16|
        DCD      sh_state

        AREA ||i._shell_execute||, CODE, READONLY, ALIGN=2

_shell_execute PROC
        PUSH     {r0-r2,r4-r7,lr}
        SUB      sp,sp,#0x18
        MOV      r5,r2
        MOVS     r0,#0
        STR      r0,[sp,#0x14]
        STR      r0,[sp,#0x10]
        LDR      r0,[sp,#0x1c]
        CMP      r0,#0
        BNE      |L4.22|
|L4.18|
        ADD      sp,sp,#0x24
        POP      {r4-r7,pc}
|L4.22|
        MOVS     r6,#0
        B        |L4.306|
|L4.26|
        MOVS     r2,#0xc
        MULS     r2,r6,r2
        LDR      r3,|L4.340|
        LDR      r0,[r3,r2]
        LDR      r1,[r5,#0]
        BL       strcasecmp
        CMP      r0,#0
        BNE      |L4.290|
        MOVS     r0,#1
        STR      r0,[sp,#0x14]
        BL       shell_unpop_all_args
        MOVS     r4,#0
        B        |L4.262|
|L4.56|
        MOVS     r0,#0
        STR      r0,[sp,#0x10]
        MOVS     r0,#0xc
        MULS     r0,r6,r0
        LDR      r1,|L4.340|
        ADDS     r0,r0,r1
        ADDS     r0,r0,#4
        LDRB     r7,[r0,r4]
        MOVS     r0,#0x80
        ANDS     r0,r0,r7
        CMP      r0,#0
        BEQ      |L4.92|
        MOVS     r0,#1
        STR      r0,[sp,#0x10]
        MOVS     r1,#0x80
        MOV      r0,r7
        BICS     r0,r0,r1
        MOV      r7,r0
|L4.92|
        CMP      r7,#0
        BEQ      |L4.120|
        LDR      r0,[sp,#0x1c]
        SUBS     r0,r0,#1
        CMP      r0,r4
        BHI      |L4.120|
        LDR      r0,[sp,#0x10]
        CMP      r0,#0
        BNE      |L4.120|
        ADR      r0,|L4.344|
        BL       shell_error
        MOVS     r0,#0
        B        |L4.18|
|L4.120|
        CMP      r7,#1
        BEQ      |L4.138|
        CMP      r7,#2
        BEQ      |L4.242|
        CMP      r7,#3
        BEQ      |L4.158|
        CMP      r7,#4
        BNE      |L4.254|
        B        |L4.186|
|L4.138|
        ADDS     r1,r4,#1
        LSLS     r1,r1,#2
        LDR      r0,[r5,r1]
        BL       atoi
        STR      r0,[sp,#0xc]
        LDR      r0,[sp,#0xc]
        BL       shell_push_arg_int
        B        |L4.258|
|L4.158|
        ADDS     r1,r4,#1
        LSLS     r1,r1,#2
        LDR      r0,[r5,r1]
        BL       atof
        STR      r1,[sp,#4]
        STR      r0,[sp,#0]
        BL       __aeabi_d2f
        STR      r0,[sp,#8]
        LDR      r0,[sp,#8]
        BL       shell_push_arg_float
        B        |L4.258|
|L4.186|
        ADDS     r1,r4,#1
        LSLS     r1,r1,#2
        LDR      r0,[r5,r1]
        BL       _shell_arg_is_true
        CMP      r0,#0
        BEQ      |L4.208|
        MOVS     r0,#1
        BL       shell_push_arg_int
        B        |L4.240|
|L4.208|
        ADDS     r1,r4,#1
        LSLS     r1,r1,#2
        LDR      r0,[r5,r1]
        BL       _shell_arg_is_false
        CMP      r0,#0
        BEQ      |L4.230|
        MOVS     r0,#0
        BL       shell_push_arg_int
        B        |L4.240|
|L4.230|
        ADR      r0,|L4.376|
        BL       shell_error
        MOVS     r0,#0
        B        |L4.18|
|L4.240|
        B        |L4.258|
|L4.242|
        ADDS     r1,r4,#1
        LSLS     r1,r1,#2
        LDR      r0,[r5,r1]
        BL       shell_push_arg_string
        B        |L4.258|
|L4.254|
        MOVS     r4,#5
        NOP      
|L4.258|
        NOP      
        ADDS     r4,r4,#1
|L4.262|
        CMP      r4,#4
        BCC      |L4.56|
        BL       _shell_dump_stack
        LDR      r0,|L4.404|
        LDR      r1,[r0,#0]  ; sh_state
        LDR      r0,[sp,#0x1c]
        CMP      r1,r0
        BLS      |L4.292|
        ADR      r0,|L4.408|
        BL       shell_error
        MOVS     r0,#0
        B        |L4.18|
|L4.290|
        B        |L4.304|
|L4.292|
        MOVS     r1,#0xc
        MULS     r1,r6,r1
        LDR      r2,|L4.340|
        ADDS     r1,r1,r2
        LDR      r0,[r1,#8]
        BLX      r0
|L4.304|
        ADDS     r6,r6,#1
|L4.306|
        MOVS     r0,#0xc
        MULS     r0,r6,r0
        LDR      r1,|L4.340|
        LDR      r0,[r1,r0]
        CMP      r0,#0
        BEQ      |L4.320|
        B        |L4.26|
|L4.320|
        LDR      r0,[sp,#0x14]
        CMP      r0,#0
        BNE      |L4.336|
        ADR      r0,|L4.440|
        BL       shell_error
        MOVS     r0,#0
        B        |L4.18|
|L4.336|
        MOVS     r0,#1
        B        |L4.18|
        ENDP

|L4.340|
        DCD      shell_commands
|L4.344|
        DCB      "Command requires more arguments",0
|L4.376|
        DCB      "Invalid boolean argument",0
        DCB      0
        DCB      0
        DCB      0
|L4.404|
        DCD      sh_state
|L4.408|
        DCB      "Command requires less arguments",0
|L4.440|
        DCB      "Command not found",0
        DCB      0
        DCB      0

        AREA ||i._shell_print_wrapper||, CODE, READONLY, ALIGN=1

_shell_print_wrapper PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r0,r4
        BL       uart_putsraw
        POP      {r4,pc}
        ENDP


        AREA ||i._shell_sigint||, CODE, READONLY, ALIGN=2

_shell_sigint PROC
        BL       zynq_rapid_power_off
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        LDR      r0,|L6.52|
        LDR      r1,|L6.56|
        STR      r0,[r1,#0xc]
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        NOP      
|L6.48|
        NOP      
        B        |L6.48|
        ENDP

|L6.52|
        DCD      0x05fa0004
|L6.56|
        DCD      0xe000ed00

        AREA ||i.shell_error||, CODE, READONLY, ALIGN=2

shell_error PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r1,r4
        ADR      r0,|L7.16|
        BL       uart_printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L7.16|
        DCB      27,"[91mError:",27,"[0m %s\r\n\r\n",0
        DCB      0

        AREA ||i.shell_init||, CODE, READONLY, ALIGN=2

shell_init PROC
        PUSH     {lr}
        SUB      sp,sp,#0x24
        MOVS     r2,#0x20
        LDR      r1,|L8.40|
        ADD      r0,sp,#4
        BL       __aeabi_memcpy4
        BL       shell_print_help
        ADR      r0,|L8.44|
        BL       uart_putsraw
        ADD      r1,sp,#4
        LDR      r0,|L8.52|
        LDR      r0,[r0,#0]  ; prl
        BL       microrl_init
        ADD      sp,sp,#0x24
        POP      {pc}
        ENDP

        DCW      0x0000
|L8.40|
        DCD      ||.constdata||
|L8.44|
        DCB      "\r\n\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L8.52|
        DCD      prl

        AREA ||i.shell_iter||, CODE, READONLY, ALIGN=2

shell_iter PROC
        PUSH     {r4,lr}
        BL       uart_char_is_available
        CMP      r0,#0
        BEQ      |L9.26|
        BL       uart_getchar
        MOV      r4,r0
        MOV      r1,r4
        LDR      r0,|L9.28|
        LDR      r0,[r0,#0]  ; prl
        BL       microrl_insert_char
|L9.26|
        POP      {r4,pc}
        ENDP

|L9.28|
        DCD      prl

        AREA ||i.shell_print_help||, CODE, READONLY, ALIGN=2

shell_print_help PROC
        PUSH     {r4-r6,lr}
        ADR      r0,|L10.164|
        BL       uart_putsraw
        ADR      r0,|L10.168|
        BL       uart_putsraw
        ADR      r0,|L10.232|
        BL       uart_putsraw
        MOVS     r5,#0
        B        |L10.144|
|L10.24|
        MOVS     r0,#0xc
        MULS     r0,r5,r0
        LDR      r2,|L10.296|
        LDR      r1,[r2,r0]
        ADR      r0,|L10.300|
        BL       uart_printf
        MOVS     r4,#0
        MOVS     r6,#0
        B        |L10.130|
|L10.44|
        MOVS     r0,#0xc
        MULS     r0,r5,r0
        LDR      r1,|L10.296|
        ADDS     r0,r0,r1
        ADDS     r0,r0,#4
        LDRB     r0,[r0,r6]
        MOVS     r3,r0
        BL       __ARM_common_switch8
        DCB      0x05,0x19
        DCB      0x04,0x0e,0x13,0x09
        DCB      0x18,0x00
        ADR      r0,|L10.320|
        BL       uart_putsraw
        ADDS     r4,r4,#1
        B        |L10.120|
        ADR      r0,|L10.336|
        BL       uart_putsraw
        ADDS     r4,r4,#1
        B        |L10.120|
        ADR      r0,|L10.352|
        BL       uart_putsraw
        ADDS     r4,r4,#1
        B        |L10.120|
        ADR      r0,|L10.368|
        BL       uart_putsraw
        ADDS     r4,r4,#1
        B        |L10.120|
        NOP      
        ADR      r0,|L10.384|
        BL       uart_putsraw
        NOP      
|L10.120|
        NOP      
        ADR      r0,|L10.396|
        BL       uart_putsraw
        ADDS     r6,r6,#1
|L10.130|
        CMP      r6,#4
        BCC      |L10.44|
        MOV      r1,r4
        ADR      r0,|L10.404|
        BL       uart_printf
        ADDS     r5,r5,#1
|L10.144|
        MOVS     r0,#0xc
        MULS     r0,r5,r0
        LDR      r1,|L10.296|
        LDR      r0,[r1,r0]
        CMP      r0,#0
        BNE      |L10.24|
        ADR      r0,|L10.428|
        BL       uart_printf
        POP      {r4-r6,pc}
        ENDP

|L10.164|
        DCB      "\r\n",0
        DCB      0
|L10.168|
        DCB      " Command      Argument Spec                       Requi"
        DCB      "red\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L10.232|
        DCB      "-------------------------------------------------------"
        DCB      "------\r\n",0
|L10.296|
        DCD      shell_commands
|L10.300|
        DCB      " ",27,"[97m%-12s",27,"[0m ",0
        DCB      0
        DCB      0
        DCB      0
|L10.320|
        DCB      27,"[96m<NUMBER>",0
        DCB      0
        DCB      0
|L10.336|
        DCB      27,"[91m<BOOL>  ",0
        DCB      0
        DCB      0
|L10.352|
        DCB      27,"[93m<STRING>",0
        DCB      0
        DCB      0
|L10.368|
        DCB      27,"[94m<FLOAT> ",0
        DCB      0
        DCB      0
|L10.384|
        DCB      "        ",0
        DCB      0
        DCB      0
        DCB      0
|L10.396|
        DCB      27,"[0m ",0
        DCB      0
        DCB      0
|L10.404|
        DCB      27,"[97m(%d args)",27,"[0m\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L10.428|
        DCB      "\r\n\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.shell_push_arg_float||, CODE, READONLY, ALIGN=1

shell_push_arg_float PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOVS     r0,#3
        MOV      r1,sp
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        STR      r0,[sp,#4]
        STR      r4,[sp,#0xc]
        STR      r0,[sp,#8]
        MOV      r0,sp
        BL       shell_push_arg_raw
        ADD      sp,sp,#0x10
        POP      {r4,pc}
        ENDP


        AREA ||i.shell_push_arg_int||, CODE, READONLY, ALIGN=1

shell_push_arg_int PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOVS     r0,#1
        MOV      r1,sp
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        STR      r0,[sp,#4]
        STR      r0,[sp,#0xc]
        STR      r4,[sp,#8]
        MOV      r0,sp
        BL       shell_push_arg_raw
        ADD      sp,sp,#0x10
        POP      {r4,pc}
        ENDP


        AREA ||i.shell_push_arg_raw||, CODE, READONLY, ALIGN=2

shell_push_arg_raw PROC
        PUSH     {r4,r5,lr}
        MOV      r1,r0
        LDR      r0,|L13.44|
        LDR      r0,[r0,#0]  ; sh_state
        CMP      r0,#4
        BNE      |L13.16|
        MOVS     r0,#0
|L13.14|
        POP      {r4,r5,pc}
|L13.16|
        LDR      r0,|L13.44|
        LDR      r2,[r0,#0]  ; sh_state
        LDR      r0,[r0,#0]  ; sh_state
        ADDS     r0,r0,#1
        LDR      r3,|L13.44|
        LSLS     r2,r2,#4
        STR      r0,[r3,#0]  ; sh_state
        ADDS     r0,r3,#4
        ADDS     r0,r2,r0
        MOV      r2,r1
        LDM      r2,{r2-r5}
        STM      r0!,{r2-r5}
        MOVS     r0,#1
        B        |L13.14|
        ENDP

|L13.44|
        DCD      sh_state

        AREA ||i.shell_push_arg_string||, CODE, READONLY, ALIGN=2

shell_push_arg_string PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        LDR      r1,|L14.60|
        LDR      r1,[r1,#0]  ; sh_state
        MOVS     r2,#0x14
        MULS     r1,r2,r1
        LDR      r2,|L14.64|
        ADDS     r0,r1,r2
        MOVS     r2,#0x13
        MOV      r1,r4
        BL       strncpy
        MOVS     r0,#2
        MOV      r1,sp
        STRB     r0,[r1,#0]
        LDR      r0,|L14.60|
        LDR      r0,[r0,#0]  ; sh_state
        MOVS     r1,#0x14
        MULS     r0,r1,r0
        LDR      r1,|L14.64|
        ADDS     r0,r0,r1
        STR      r0,[sp,#4]
        MOVS     r0,#0
        STR      r0,[sp,#0xc]
        STR      r0,[sp,#8]
        MOV      r0,sp
        BL       shell_push_arg_raw
        ADD      sp,sp,#0x10
        POP      {r4,pc}
        ENDP

|L14.60|
        DCD      sh_state
|L14.64|
        DCD      shell_arg_str_buffer

        AREA ||i.shell_run||, CODE, READONLY, ALIGN=1

shell_run PROC
        B        |L15.6|
|L15.2|
        BL       shell_iter
|L15.6|
        B        |L15.2|
        ENDP


        AREA ||i.shell_unpop_all_args||, CODE, READONLY, ALIGN=1

shell_unpop_all_args PROC
        PUSH     {r0-r4,lr}
        MOVS     r4,#0
        B        |L16.14|
|L16.6|
        MOV      r0,sp
        BL       shell_unpop_arg
        ADDS     r4,r4,#1
|L16.14|
        CMP      r4,#4
        BCC      |L16.6|
        POP      {r0-r4,pc}
        ENDP


        AREA ||i.shell_unpop_arg||, CODE, READONLY, ALIGN=2

shell_unpop_arg PROC
        PUSH     {r4,lr}
        MOV      r1,r0
        LDR      r0,|L17.52|
        LDR      r0,[r0,#0]  ; sh_state
        CMP      r0,#0
        BNE      |L17.14|
|L17.12|
        POP      {r4,pc}
|L17.14|
        LDR      r0,|L17.52|
        LDR      r0,[r0,#0]  ; sh_state
        SUBS     r0,r0,#1
        LDR      r2,|L17.52|
        STR      r0,[r2,#0]  ; sh_state
        MOV      r0,r2
        LDR      r0,[r0,#0]  ; sh_state
        LSLS     r2,r0,#4
        LDR      r0,|L17.52|
        ADDS     r0,r0,#4
        ADDS     r4,r2,r0
        LDM      r4,{r0,r2-r4}
        STM      r1!,{r0,r2-r4}
        SUBS     r1,r1,#0x10
        LDR      r0,|L17.52|
        LDR      r0,[r0,#0]  ; sh_state
        ADDS     r0,r0,#1
        B        |L17.12|
        ENDP

        DCW      0x0000
|L17.52|
        DCD      sh_state

        AREA ||i.shell_unpop_float||, CODE, READONLY, ALIGN=2

shell_unpop_float PROC
        PUSH     {r0-r4,lr}
        MOV      r0,sp
        BL       shell_unpop_arg
        CMP      r0,#0
        BNE      |L18.24|
        ADR      r0,|L18.28|
        BL       shell_error
        MOVS     r0,#0
|L18.20|
        ADD      sp,sp,#0x10
        POP      {r4,pc}
|L18.24|
        LDR      r0,[sp,#0xc]
        B        |L18.20|
        ENDP

|L18.28|
        DCB      "No args left to pop float!",0
        DCB      0

        AREA ||i.shell_unpop_int||, CODE, READONLY, ALIGN=2

shell_unpop_int PROC
        PUSH     {r0-r4,lr}
        MOV      r0,sp
        BL       shell_unpop_arg
        CMP      r0,#0
        BNE      |L19.24|
        ADR      r0,|L19.28|
        BL       shell_error
        MOVS     r0,#0
|L19.20|
        ADD      sp,sp,#0x10
        POP      {r4,pc}
|L19.24|
        LDR      r0,[sp,#8]
        B        |L19.20|
        ENDP

|L19.28|
        DCB      "No args left to pop integer!",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.shell_unpop_string||, CODE, READONLY, ALIGN=2

shell_unpop_string PROC
        PUSH     {r0-r4,lr}
        MOV      r0,sp
        BL       shell_unpop_arg
        CMP      r0,#0
        BNE      |L20.24|
        ADR      r0,|L20.28|
        BL       shell_error
        MOVS     r0,#0
|L20.20|
        ADD      sp,sp,#0x10
        POP      {r4,pc}
|L20.24|
        LDR      r0,[sp,#4]
        B        |L20.20|
        ENDP

|L20.28|
        DCB      "No args left to pop string!",0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

||rl||
        %        568
shell_arg_str_buffer
        %        80
sh_state
        %        84

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

        DCD      0x00000000
        DCB      0x00,0x00,0x00,0x00
        DCD      _shell_execute
        DCD      0x00000000
        DCD      _shell_print_wrapper
        DCD      _shell_sigint
        DCD      0x00000000
        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

prl
        DCD      ||rl||

        AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

__ARM_common_switch8 PROC
        PUSH     {r4,r5}
        MOV      r4,lr
        SUBS     r4,r4,#1
        LDRB     r5,[r4,#0]
        ADDS     r4,r4,#1
        CMP      r3,r5
        BCC      |L132.24|
|L132.14|
        LDRB     r3,[r4,r5]
        LSLS     r3,r3,#1
        ADDS     r3,r4,r3
        POP      {r4,r5}
        BX       r3
|L132.24|
        MOV      r5,r3
        B        |L132.14|
        ENDP


;*** Start embedded assembler ***

#line 1 "shell.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_shell_c_prl____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___7_shell_c_prl____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_shell_c_prl____REVSH|
#line 478
|__asm___7_shell_c_prl____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT _shell_arg_is_false [CODE]
        EXPORT _shell_arg_is_true [CODE]
        EXPORT _shell_dump_stack [CODE]
        EXPORT _shell_execute [CODE]
        EXPORT _shell_print_wrapper [CODE]
        EXPORT _shell_sigint [CODE]
        EXPORT shell_error [CODE]
        EXPORT shell_init [CODE]
        EXPORT shell_iter [CODE]
        EXPORT shell_print_help [CODE]
        EXPORT shell_push_arg_float [CODE]
        EXPORT shell_push_arg_int [CODE]
        EXPORT shell_push_arg_raw [CODE]
        EXPORT shell_push_arg_string [CODE]
        EXPORT shell_run [CODE]
        EXPORT shell_unpop_all_args [CODE]
        EXPORT shell_unpop_arg [CODE]
        EXPORT shell_unpop_float [CODE]
        EXPORT shell_unpop_int [CODE]
        EXPORT shell_unpop_string [CODE]
        EXPORT ||rl|| [DATA,SIZE=568]
        EXPORT shell_arg_str_buffer [DATA,SIZE=80]
        EXPORT sh_state [DATA,SIZE=84]
        EXPORT prl [DATA,SIZE=4]
        EXPORT __ARM_common_switch8 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT uart_putsraw [CODE]
        IMPORT uart_printf [CODE]
        IMPORT shell_commands [DATA]
        IMPORT __aeabi_memcpy4 [CODE]
        IMPORT microrl_init [CODE]
        IMPORT strncpy [CODE]
        IMPORT tolower [CODE]
        IMPORT strcasecmp [CODE]
        IMPORT atoi [CODE]
        IMPORT atof [CODE]
        IMPORT __aeabi_d2f [CODE]
        IMPORT zynq_rapid_power_off [CODE]
        IMPORT uart_char_is_available [CODE]
        IMPORT uart_getchar [CODE]
        IMPORT microrl_insert_char [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
