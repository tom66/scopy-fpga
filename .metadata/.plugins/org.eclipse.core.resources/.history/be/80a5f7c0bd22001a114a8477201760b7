/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdarg.h>

#include "platform.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xil_cache.h"
#include "xil_io.h"
#include "xil_testmem.h"
#include "xaxidma.h"
#include "xdebug.h"

uint32_t *mem_addr;
uint32_t *base;

uint32_t buffer[65536] __attribute__((aligned (4096))) __attribute__((section("ddr3")));

//#define MEM_TEST

#define MARK_UNCACHEABLE	0x701

void debug_printf(char *fmt, ...)
{
	char buffer[1024];

	va_list args;
	va_start(args, fmt);

	vsnprintf(buffer, 1024, fmt, args);
	print(buffer);

	va_end(args);
}

void arb_delay(uint32_t n)
{
	while(n--) {
		__asm__("nop");
	}
}

int main()
{
	uint32_t data;
	uint32_t i;
	uint32_t loops = 0;
	int32_t k;
	int32_t error;
	uint32_t addr;
	uint32_t *ptr;
	int32_t result;
	uint32_t n;

	XAxiDma dma0_pointer;
	XAxiDma_Config *dma0_config;

    init_platform();

#if 0
	debug_printf("\r\n\r\nDemoApp v1.0 - starting memory test...\r\n");

	while(1) {
		result = Xil_TestMem32(0x01100000, 0x03a00000, 0, XIL_TESTMEM_ALLMEMTESTS);
		debug_printf("\r\n\r\nResult=%d\r\n", result);
	}

	while(1);
#endif

#if 1
	debug_printf("\r\n\r\nDemoApp v1.0 - DMA controlled transfers\r\n");

	dma0_config = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	error = XAxiDma_CfgInitialize(&dma0_pointer, dma0_config);

	debug_printf("XAxiDma_CfgInitialize error=%d\r\n", error);

	debug_printf("Flush and disable data cache...\r\n");

	Xil_DCacheFlush();
	Xil_DCacheDisable();

	debug_printf("OK, done.\r\n");

	error = XAxiDma_SimpleTransfer(&dma0_pointer, (uint32_t *)addr, 32, XAXIDMA_DEVICE_TO_DMA);
	arb_delay(10000000);

	while(1) {
		addr = &buffer;
		//debug_printf("Sending uncache flag to addr 0x%08x\r\n", addr);
		//Xil_SetTlbAttributes(addr, MARK_UNCACHEABLE);
		//debug_printf("Sending Dinvalidate flag to addr 0x%08x\r\n", addr);
		//Xil_DCacheInvalidateRange(addr, 1);

		debug_printf("Start SimpleTransfer\r\n");
		error = XAxiDma_SimpleTransfer(&dma0_pointer, (uint32_t *)addr, 4, XAXIDMA_DEVICE_TO_DMA);

		debug_printf("Initialise Xfer error=%d addr 0x%08x buffer_at 0x%08x\r\n", error, addr, &buffer);

		while(XAxiDma_Busy(&dma0_pointer, XAXIDMA_DEVICE_TO_DMA)) {
			debug_printf("w");
		}

		n++;

		if(n > 0) {
			debug_printf("Data: \r\n");

			ptr = addr;
			for(k = 0; k < 32; k++) {
				debug_printf("0x%08x ", *ptr++);
				if(((k + 1) & 7) == 0) {
					debug_printf("\r\n");
				}
			}

			debug_printf("\r\n");
			n = 0;
		}
	}
#endif

#if 0
	base = 0x01000000;

    while(1) {
		debug_printf("Running %d\r\n", loops++);

		/* Block 1 */
		srand(loops);
		mem_addr = base;

		for(i = 0; i < 1024; i++) {
			data = 0xff00ff00;
			debug_printf("addr=0x%08x data_write=0x%08x\r\n", mem_addr, data);
			*mem_addr = data;
			mem_addr++;
		}

		srand(loops);
		mem_addr = base;

		for(i = 0; i < 1024; i++) {
			debug_printf("addr=0x%08x data_read=0x%08x expect=0x%08x\r\n", mem_addr, *mem_addr, rand());
			mem_addr++;
		}

		/* Block 2 */
		srand(loops);
		mem_addr = base;

		for(i = 0; i < 1024; i++) {
			data = rand();
			debug_printf("addr=0x%08x data_write=0x%08x\r\n", mem_addr, data);
			*mem_addr = data;
			mem_addr++;
		}

		srand(loops);
		mem_addr = base;

		for(i = 0; i < 1024; i++) {
			debug_printf("addr=0x%08x data_read=0x%08x expect=0x%08x\r\n", mem_addr, *mem_addr, rand());
			mem_addr++;
		}
    }
#endif

#ifdef MEM_TEST
    while(1) {
    	debug_printf("\r\n\r\nAddress of main: 0x%08x\r\n", &main);

		debug_printf("\r\n\r\nSequential Write with Random Data...\r\n\r\n");

		// start at a high offset, test most of the memory (232MB)
		base = 0x01400000;
		mem_addr = base;
		srand(loops);

		for(i = 0; i < ((1024 * 1024 * 58)); i++) {
			data = rand() * rand();
			if((i & ((1024 * 1024 * 1) - 1)) == 0) {
				debug_printf("Write: 0x%08x to 0x%08x (%3.3f KiB) (%d)\r\n", data, mem_addr, (mem_addr - base) / 256.0f, i);
			}
			*mem_addr = data;
			mem_addr++;
		}

		mem_addr = base;
		srand(loops);

		debug_printf("\r\n\r\nSequential Read of Same Random Data...\r\n\r\n");

		for(i = 0; i < ((1024 * 1024 * 58)); i++) {
			data = rand() * rand();
			if((i & ((1024 * 1024 * 1) - 1)) == 0) {
				debug_printf("Read: 0x%08x from 0x%08x expect 0x%08x (%3.3f KiB) (%d loop passes)\r\n", *mem_addr, mem_addr, data, (mem_addr - base) / 256.0f, loops);
			}

			if(((*mem_addr) != data)) {
				debug_printf("FAIL: 0x%08x from 0x%08x expect 0x%08x\r\n", *mem_addr, mem_addr, data);
				while(1) ;
			}
			mem_addr++;
		}

		debug_printf("\r\n\r\nRandom Write with Random Data...\r\n\r\n");

		srand(loops);

		for(i = 0; i < ((1024 * 1024 * 58)); i++) {
			mem_addr = base + (rand() % ((1024 * 1024 * 58)));
			k = (uint32_t)mem_addr;
			data = (k * k) + 0x12345679;

			if((i & ((1024 * 1024 * 1) - 1)) == 0) {
				debug_printf("Write: 0x%08x to 0x%08x\r\n", data, mem_addr);
			}
			*mem_addr = data;
			mem_addr++;
		}

		debug_printf("\r\n\r\nRandom Read of Same Data...\r\n\r\n");

		srand(loops);

		for(i = 0; i < ((1024 * 1024 * 58)); i++) {
			mem_addr = base + (rand() % ((1024 * 1024 * 58)));
			k = (uint32_t)mem_addr;
			data = (k * k) + 0x12345679;

			if((i & ((1024 * 1024 * 1) - 1)) == 0) {
				debug_printf("Read: 0x%08x from 0x%08x expect 0x%08x (%d loop passes)\r\n", *mem_addr, mem_addr, data, loops);
			}

			if(((*mem_addr) != data)) {
				debug_printf("FAIL: 0x%08x from 0x%08x expect 0x%08x\r\n", *mem_addr, mem_addr, data);
				while(1) ;
			}
			*mem_addr = data;
			mem_addr++;
		}
		loops++;
    }

    while(1) {
    	arb_delay(1000000);
    }
#endif

    cleanup_platform();
    return 0;
}
